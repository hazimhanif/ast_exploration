SOURCE_FILE	177:0	3092:0	0	
SIMPLE_DECL	177:0	177:19	1	int ascii85 ; ascii85 = FALSE ;
VAR_DECL	177:0	177:4	2	int ascii85 ; ascii85 = FALSE
TYPE	177:0	177:0	3	int
TYPE_NAME	177:0	177:0	4	int
LEAF_NODE	177:0	177:0	5	int
NAME	177:4	177:4	3	ascii85
LEAF_NODE	177:4	177:4	4	ascii85
LEAF_NODE	0:0	0:0	3	;
INIT	177:4	177:4	3	ascii85 = FALSE
ASSIGN	177:4	177:14	4	ascii85 = FALSE
LVAL	177:4	177:4	5	ascii85
NAME	177:4	177:4	6	ascii85
LEAF_NODE	177:4	177:4	7	ascii85
ASSIGN_OP	177:12	177:12	5	=
LEAF_NODE	177:12	177:12	6	=
RVAL	177:14	177:14	5	FALSE
FIELD	177:14	177:14	6	FALSE
LEAF_NODE	177:14	177:14	7	FALSE
LEAF_NODE	177:19	177:19	2	;
SIMPLE_DECL	178:0	178:22	1	int interpolate ; interpolate = TRUE ;
VAR_DECL	178:0	178:4	2	int interpolate ; interpolate = TRUE
TYPE	178:0	178:0	3	int
TYPE_NAME	178:0	178:0	4	int
LEAF_NODE	178:0	178:0	5	int
NAME	178:4	178:4	3	interpolate
LEAF_NODE	178:4	178:4	4	interpolate
LEAF_NODE	0:0	0:0	3	;
INIT	178:4	178:4	3	interpolate = TRUE
ASSIGN	178:4	178:18	4	interpolate = TRUE
LVAL	178:4	178:4	5	interpolate
NAME	178:4	178:4	6	interpolate
LEAF_NODE	178:4	178:4	7	interpolate
ASSIGN_OP	178:16	178:16	5	=
LEAF_NODE	178:16	178:16	6	=
RVAL	178:18	178:18	5	TRUE
FIELD	178:18	178:18	6	TRUE
LEAF_NODE	178:18	178:18	7	TRUE
LEAF_NODE	178:22	178:22	2	;
SIMPLE_DECL	179:0	179:18	1	int level2 ; level2 = FALSE ;
VAR_DECL	179:0	179:4	2	int level2 ; level2 = FALSE
TYPE	179:0	179:0	3	int
TYPE_NAME	179:0	179:0	4	int
LEAF_NODE	179:0	179:0	5	int
NAME	179:4	179:4	3	level2
LEAF_NODE	179:4	179:4	4	level2
LEAF_NODE	0:0	0:0	3	;
INIT	179:4	179:4	3	level2 = FALSE
ASSIGN	179:4	179:13	4	level2 = FALSE
LVAL	179:4	179:4	5	level2
NAME	179:4	179:4	6	level2
LEAF_NODE	179:4	179:4	7	level2
ASSIGN_OP	179:11	179:11	5	=
LEAF_NODE	179:11	179:11	6	=
RVAL	179:13	179:13	5	FALSE
FIELD	179:13	179:13	6	FALSE
LEAF_NODE	179:13	179:13	7	FALSE
LEAF_NODE	179:18	179:18	2	;
SIMPLE_DECL	180:0	180:18	1	int level3 ; level3 = FALSE ;
VAR_DECL	180:0	180:4	2	int level3 ; level3 = FALSE
TYPE	180:0	180:0	3	int
TYPE_NAME	180:0	180:0	4	int
LEAF_NODE	180:0	180:0	5	int
NAME	180:4	180:4	3	level3
LEAF_NODE	180:4	180:4	4	level3
LEAF_NODE	0:0	0:0	3	;
INIT	180:4	180:4	3	level3 = FALSE
ASSIGN	180:4	180:13	4	level3 = FALSE
LVAL	180:4	180:4	5	level3
NAME	180:4	180:4	6	level3
LEAF_NODE	180:4	180:4	7	level3
ASSIGN_OP	180:11	180:11	5	=
LEAF_NODE	180:11	180:11	6	=
RVAL	180:13	180:13	5	FALSE
FIELD	180:13	180:13	6	FALSE
LEAF_NODE	180:13	180:13	7	FALSE
LEAF_NODE	180:18	180:18	2	;
SIMPLE_DECL	181:0	181:20	1	int printAll ; printAll = FALSE ;
VAR_DECL	181:0	181:4	2	int printAll ; printAll = FALSE
TYPE	181:0	181:0	3	int
TYPE_NAME	181:0	181:0	4	int
LEAF_NODE	181:0	181:0	5	int
NAME	181:4	181:4	3	printAll
LEAF_NODE	181:4	181:4	4	printAll
LEAF_NODE	0:0	0:0	3	;
INIT	181:4	181:4	3	printAll = FALSE
ASSIGN	181:4	181:15	4	printAll = FALSE
LVAL	181:4	181:4	5	printAll
NAME	181:4	181:4	6	printAll
LEAF_NODE	181:4	181:4	7	printAll
ASSIGN_OP	181:13	181:13	5	=
LEAF_NODE	181:13	181:13	6	=
RVAL	181:15	181:15	5	FALSE
FIELD	181:15	181:15	6	FALSE
LEAF_NODE	181:15	181:15	7	FALSE
LEAF_NODE	181:20	181:20	2	;
SIMPLE_DECL	182:0	182:23	1	int generateEPSF ; generateEPSF = TRUE ;
VAR_DECL	182:0	182:4	2	int generateEPSF ; generateEPSF = TRUE
TYPE	182:0	182:0	3	int
TYPE_NAME	182:0	182:0	4	int
LEAF_NODE	182:0	182:0	5	int
NAME	182:4	182:4	3	generateEPSF
LEAF_NODE	182:4	182:4	4	generateEPSF
LEAF_NODE	0:0	0:0	3	;
INIT	182:4	182:4	3	generateEPSF = TRUE
ASSIGN	182:4	182:19	4	generateEPSF = TRUE
LVAL	182:4	182:4	5	generateEPSF
NAME	182:4	182:4	6	generateEPSF
LEAF_NODE	182:4	182:4	7	generateEPSF
ASSIGN_OP	182:17	182:17	5	=
LEAF_NODE	182:17	182:17	6	=
RVAL	182:19	182:19	5	TRUE
FIELD	182:19	182:19	6	TRUE
LEAF_NODE	182:19	182:19	7	TRUE
LEAF_NODE	182:23	182:23	2	;
SIMPLE_DECL	183:0	183:20	1	int PSduplex ; PSduplex = FALSE ;
VAR_DECL	183:0	183:4	2	int PSduplex ; PSduplex = FALSE
TYPE	183:0	183:0	3	int
TYPE_NAME	183:0	183:0	4	int
LEAF_NODE	183:0	183:0	5	int
NAME	183:4	183:4	3	PSduplex
LEAF_NODE	183:4	183:4	4	PSduplex
LEAF_NODE	0:0	0:0	3	;
INIT	183:4	183:4	3	PSduplex = FALSE
ASSIGN	183:4	183:15	4	PSduplex = FALSE
LVAL	183:4	183:4	5	PSduplex
NAME	183:4	183:4	6	PSduplex
LEAF_NODE	183:4	183:4	7	PSduplex
ASSIGN_OP	183:13	183:13	5	=
LEAF_NODE	183:13	183:13	6	=
RVAL	183:15	183:15	5	FALSE
FIELD	183:15	183:15	6	FALSE
LEAF_NODE	183:15	183:15	7	FALSE
LEAF_NODE	183:20	183:20	2	;
SIMPLE_DECL	184:0	184:20	1	int PStumble ; PStumble = FALSE ;
VAR_DECL	184:0	184:4	2	int PStumble ; PStumble = FALSE
TYPE	184:0	184:0	3	int
TYPE_NAME	184:0	184:0	4	int
LEAF_NODE	184:0	184:0	5	int
NAME	184:4	184:4	3	PStumble
LEAF_NODE	184:4	184:4	4	PStumble
LEAF_NODE	0:0	0:0	3	;
INIT	184:4	184:4	3	PStumble = FALSE
ASSIGN	184:4	184:15	4	PStumble = FALSE
LVAL	184:4	184:4	5	PStumble
NAME	184:4	184:4	6	PStumble
LEAF_NODE	184:4	184:4	7	PStumble
ASSIGN_OP	184:13	184:13	5	=
LEAF_NODE	184:13	184:13	6	=
RVAL	184:15	184:15	5	FALSE
FIELD	184:15	184:15	6	FALSE
LEAF_NODE	184:15	184:15	7	FALSE
LEAF_NODE	184:20	184:20	2	;
SIMPLE_DECL	185:0	185:26	1	int PSavoiddeadzone ; PSavoiddeadzone = TRUE ;
VAR_DECL	185:0	185:4	2	int PSavoiddeadzone ; PSavoiddeadzone = TRUE
TYPE	185:0	185:0	3	int
TYPE_NAME	185:0	185:0	4	int
LEAF_NODE	185:0	185:0	5	int
NAME	185:4	185:4	3	PSavoiddeadzone
LEAF_NODE	185:4	185:4	4	PSavoiddeadzone
LEAF_NODE	0:0	0:0	3	;
INIT	185:4	185:4	3	PSavoiddeadzone = TRUE
ASSIGN	185:4	185:22	4	PSavoiddeadzone = TRUE
LVAL	185:4	185:4	5	PSavoiddeadzone
NAME	185:4	185:4	6	PSavoiddeadzone
LEAF_NODE	185:4	185:4	7	PSavoiddeadzone
ASSIGN_OP	185:20	185:20	5	=
LEAF_NODE	185:20	185:20	6	=
RVAL	185:22	185:22	5	TRUE
FIELD	185:22	185:22	6	TRUE
LEAF_NODE	185:22	185:22	7	TRUE
LEAF_NODE	185:26	185:26	2	;
SIMPLE_DECL	186:0	186:24	1	double maxPageHeight ; maxPageHeight = 0 ;
VAR_DECL	186:0	186:7	2	double maxPageHeight ; maxPageHeight = 0
TYPE	186:0	186:0	3	double
TYPE_NAME	186:0	186:0	4	double
LEAF_NODE	186:0	186:0	5	double
NAME	186:7	186:7	3	maxPageHeight
LEAF_NODE	186:7	186:7	4	maxPageHeight
LEAF_NODE	0:0	0:0	3	;
INIT	186:7	186:7	3	maxPageHeight = 0
ASSIGN	186:7	186:23	4	maxPageHeight = 0
LVAL	186:7	186:7	5	maxPageHeight
NAME	186:7	186:7	6	maxPageHeight
LEAF_NODE	186:7	186:7	7	maxPageHeight
ASSIGN_OP	186:21	186:21	5	=
LEAF_NODE	186:21	186:21	6	=
RVAL	186:23	186:23	5	0
FIELD	186:23	186:23	6	0
LEAF_NODE	186:23	186:23	7	0
LEAF_NODE	186:24	186:24	2	;
SIMPLE_DECL	187:0	187:24	1	double maxPageWidth ; maxPageWidth = 0 ;
VAR_DECL	187:0	187:7	2	double maxPageWidth ; maxPageWidth = 0
TYPE	187:0	187:0	3	double
TYPE_NAME	187:0	187:0	4	double
LEAF_NODE	187:0	187:0	5	double
NAME	187:7	187:7	3	maxPageWidth
LEAF_NODE	187:7	187:7	4	maxPageWidth
LEAF_NODE	0:0	0:0	3	;
INIT	187:7	187:7	3	maxPageWidth = 0
ASSIGN	187:7	187:23	4	maxPageWidth = 0
LVAL	187:7	187:7	5	maxPageWidth
NAME	187:7	187:7	6	maxPageWidth
LEAF_NODE	187:7	187:7	7	maxPageWidth
ASSIGN_OP	187:21	187:21	5	=
LEAF_NODE	187:21	187:21	6	=
RVAL	187:23	187:23	5	0
FIELD	187:23	187:23	6	0
LEAF_NODE	187:23	187:23	7	0
LEAF_NODE	187:24	187:24	2	;
SIMPLE_DECL	188:0	188:23	1	double splitOverlap ; splitOverlap = 0 ;
VAR_DECL	188:0	188:7	2	double splitOverlap ; splitOverlap = 0
TYPE	188:0	188:0	3	double
TYPE_NAME	188:0	188:0	4	double
LEAF_NODE	188:0	188:0	5	double
NAME	188:7	188:7	3	splitOverlap
LEAF_NODE	188:7	188:7	4	splitOverlap
LEAF_NODE	0:0	0:0	3	;
INIT	188:7	188:7	3	splitOverlap = 0
ASSIGN	188:7	188:22	4	splitOverlap = 0
LVAL	188:7	188:7	5	splitOverlap
NAME	188:7	188:7	6	splitOverlap
LEAF_NODE	188:7	188:7	7	splitOverlap
ASSIGN_OP	188:20	188:20	5	=
LEAF_NODE	188:20	188:20	6	=
RVAL	188:22	188:22	5	0
FIELD	188:22	188:22	6	0
LEAF_NODE	188:22	188:22	7	0
LEAF_NODE	188:23	188:23	2	;
SIMPLE_DECL	189:0	189:16	1	int rotation ; rotation = 0 ;
VAR_DECL	189:0	189:4	2	int rotation ; rotation = 0
TYPE	189:0	189:0	3	int
TYPE_NAME	189:0	189:0	4	int
LEAF_NODE	189:0	189:0	5	int
NAME	189:4	189:4	3	rotation
LEAF_NODE	189:4	189:4	4	rotation
LEAF_NODE	0:0	0:0	3	;
INIT	189:4	189:4	3	rotation = 0
ASSIGN	189:4	189:15	4	rotation = 0
LVAL	189:4	189:4	5	rotation
NAME	189:4	189:4	6	rotation
LEAF_NODE	189:4	189:4	7	rotation
ASSIGN_OP	189:13	189:13	5	=
LEAF_NODE	189:13	189:13	6	=
RVAL	189:15	189:15	5	0
FIELD	189:15	189:15	6	0
LEAF_NODE	189:15	189:15	7	0
LEAF_NODE	189:16	189:16	2	;
SIMPLE_DECL	190:0	190:23	1	int auto_rotate ; auto_rotate = 0 ;
VAR_DECL	190:0	190:8	2	int auto_rotate ; auto_rotate = 0
TYPE	190:0	190:0	3	int
TYPE_NAME	190:0	190:0	4	int
LEAF_NODE	190:0	190:0	5	int
NAME	190:8	190:8	3	auto_rotate
LEAF_NODE	190:8	190:8	4	auto_rotate
LEAF_NODE	0:0	0:0	3	;
INIT	190:8	190:8	3	auto_rotate = 0
ASSIGN	190:8	190:22	4	auto_rotate = 0
LVAL	190:8	190:8	5	auto_rotate
NAME	190:8	190:8	6	auto_rotate
LEAF_NODE	190:8	190:8	7	auto_rotate
ASSIGN_OP	190:20	190:20	5	=
LEAF_NODE	190:20	190:20	6	=
RVAL	190:22	190:22	5	0
FIELD	190:22	190:22	6	0
LEAF_NODE	190:22	190:22	7	0
LEAF_NODE	190:23	190:23	2	;
SIMPLE_DECL	191:0	191:21	1	char * filename ; filename = NULL ;
VAR_DECL	191:0	191:6	2	char * filename ; filename = NULL
TYPE	191:0	191:5	3	char *
TYPE_NAME	191:0	191:0	4	char
LEAF_NODE	191:0	191:0	5	char
POINTER	191:5	191:5	4	*
LEAF_NODE	191:5	191:5	5	*
NAME	191:6	191:6	3	filename
LEAF_NODE	191:6	191:6	4	filename
LEAF_NODE	0:0	0:0	3	;
INIT	191:6	191:6	3	filename = NULL
ASSIGN	191:6	191:17	4	filename = NULL
LVAL	191:6	191:6	5	filename
NAME	191:6	191:6	6	filename
LEAF_NODE	191:6	191:6	7	filename
ASSIGN_OP	191:15	191:15	5	=
LEAF_NODE	191:15	191:15	6	=
RVAL	191:17	191:17	5	NULL
FIELD	191:17	191:17	6	NULL
LEAF_NODE	191:17	191:17	7	NULL
LEAF_NODE	191:21	191:21	2	;
SIMPLE_DECL	192:0	192:21	1	char * title ; title = NULL ;
VAR_DECL	192:0	192:9	2	char * title ; title = NULL
TYPE	192:0	192:8	3	char *
TYPE_NAME	192:0	192:0	4	char
LEAF_NODE	192:0	192:0	5	char
POINTER	192:8	192:8	4	*
LEAF_NODE	192:8	192:8	5	*
NAME	192:9	192:9	3	title
LEAF_NODE	192:9	192:9	4	title
LEAF_NODE	0:0	0:0	3	;
INIT	192:9	192:9	3	title = NULL
ASSIGN	192:9	192:17	4	title = NULL
LVAL	192:9	192:9	5	title
NAME	192:9	192:9	6	title
LEAF_NODE	192:9	192:9	7	title
ASSIGN_OP	192:15	192:15	5	=
LEAF_NODE	192:15	192:15	6	=
RVAL	192:17	192:17	5	NULL
FIELD	192:17	192:17	6	NULL
LEAF_NODE	192:17	192:17	7	NULL
LEAF_NODE	192:21	192:21	2	;
SIMPLE_DECL	193:0	193:23	1	char * creator ; creator = NULL ;
VAR_DECL	193:0	193:9	2	char * creator ; creator = NULL
TYPE	193:0	193:8	3	char *
TYPE_NAME	193:0	193:0	4	char
LEAF_NODE	193:0	193:0	5	char
POINTER	193:8	193:8	4	*
LEAF_NODE	193:8	193:8	5	*
NAME	193:9	193:9	3	creator
LEAF_NODE	193:9	193:9	4	creator
LEAF_NODE	0:0	0:0	3	;
INIT	193:9	193:9	3	creator = NULL
ASSIGN	193:9	193:19	4	creator = NULL
LVAL	193:9	193:9	5	creator
NAME	193:9	193:9	6	creator
LEAF_NODE	193:9	193:9	7	creator
ASSIGN_OP	193:17	193:17	5	=
LEAF_NODE	193:17	193:17	6	=
RVAL	193:19	193:19	5	NULL
FIELD	193:19	193:19	6	NULL
LEAF_NODE	193:19	193:19	7	NULL
LEAF_NODE	193:23	193:23	2	;
SIMPLE_DECL	194:0	194:27	1	char [ 12 ] pageOrientation ;
VAR_DECL	194:0	194:8	2	char [ 12 ] pageOrientation
TYPE	194:0	194:23	3	char [ 12 ]
TYPE_NAME	194:0	194:0	4	char
LEAF_NODE	194:0	194:0	5	char
TYPE_SUFFIX	194:23	194:26	4	[ 12 ]
LEAF_NODE	194:23	194:23	5	[
FIELD	194:24	194:24	5	12
LEAF_NODE	194:24	194:24	6	12
LEAF_NODE	194:26	194:26	5	]
NAME	194:8	194:8	3	pageOrientation
LEAF_NODE	194:8	194:8	4	pageOrientation
LEAF_NODE	194:27	194:27	2	;
SIMPLE_DECL	195:0	195:24	1	int useImagemask ; useImagemask = FALSE ;
VAR_DECL	195:0	195:4	2	int useImagemask ; useImagemask = FALSE
TYPE	195:0	195:0	3	int
TYPE_NAME	195:0	195:0	4	int
LEAF_NODE	195:0	195:0	5	int
NAME	195:4	195:4	3	useImagemask
LEAF_NODE	195:4	195:4	4	useImagemask
LEAF_NODE	0:0	0:0	3	;
INIT	195:4	195:4	3	useImagemask = FALSE
ASSIGN	195:4	195:19	4	useImagemask = FALSE
LVAL	195:4	195:4	5	useImagemask
NAME	195:4	195:4	6	useImagemask
LEAF_NODE	195:4	195:4	7	useImagemask
ASSIGN_OP	195:17	195:17	5	=
LEAF_NODE	195:17	195:17	6	=
RVAL	195:19	195:19	5	FALSE
FIELD	195:19	195:19	6	FALSE
LEAF_NODE	195:19	195:19	7	FALSE
LEAF_NODE	195:24	195:24	2	;
SIMPLE_DECL	196:0	196:19	1	uint16 res_unit ; res_unit = 0 ;
VAR_DECL	196:0	196:7	2	uint16 res_unit ; res_unit = 0
TYPE	196:0	196:0	3	uint16
TYPE_NAME	196:0	196:0	4	uint16
LEAF_NODE	196:0	196:0	5	uint16
NAME	196:7	196:7	3	res_unit
LEAF_NODE	196:7	196:7	4	res_unit
LEAF_NODE	0:0	0:0	3	;
INIT	196:7	196:7	3	res_unit = 0
ASSIGN	196:7	196:18	4	res_unit = 0
LVAL	196:7	196:7	5	res_unit
NAME	196:7	196:7	6	res_unit
LEAF_NODE	196:7	196:7	7	res_unit
ASSIGN_OP	196:16	196:16	5	=
LEAF_NODE	196:16	196:16	6	=
RVAL	196:18	196:18	5	0
FIELD	196:18	196:18	6	0
LEAF_NODE	196:18	196:18	7	0
LEAF_NODE	196:19	196:19	2	;
SIMPLE_DECL	201:0	201:28	1	unsigned char [ 10 ] ascii85buf ;
VAR_DECL	201:0	201:14	2	unsigned char [ 10 ] ascii85buf
TYPE	201:0	201:24	3	unsigned char [ 10 ]
TYPE_NAME	201:0	201:9	4	unsigned char
LEAF_NODE	201:0	201:0	5	unsigned
LEAF_NODE	201:9	201:9	5	char
TYPE_SUFFIX	201:24	201:27	4	[ 10 ]
LEAF_NODE	201:24	201:24	5	[
FIELD	201:25	201:25	5	10
LEAF_NODE	201:25	201:25	6	10
LEAF_NODE	201:27	201:27	5	]
NAME	201:14	201:14	3	ascii85buf
LEAF_NODE	201:14	201:14	4	ascii85buf
LEAF_NODE	201:28	201:28	2	;
SIMPLE_DECL	202:0	202:16	1	int ascii85count ;
VAR_DECL	202:0	202:4	2	int ascii85count
TYPE	202:0	202:0	3	int
TYPE_NAME	202:0	202:0	4	int
LEAF_NODE	202:0	202:0	5	int
NAME	202:4	202:4	3	ascii85count
LEAF_NODE	202:4	202:4	4	ascii85count
LEAF_NODE	202:16	202:16	2	;
SIMPLE_DECL	203:0	203:19	1	int ascii85breaklen ;
VAR_DECL	203:0	203:4	2	int ascii85breaklen
TYPE	203:0	203:0	3	int
TYPE_NAME	203:0	203:0	4	int
LEAF_NODE	203:0	203:0	5	int
NAME	203:4	203:4	3	ascii85breaklen
LEAF_NODE	203:4	203:4	4	ascii85breaklen
LEAF_NODE	203:19	203:19	2	;
SIMPLE_DECL	214:0	214:22	1	void Ascii85Init ; Ascii85Init Ascii85Init ( void ) ;
VAR_DECL	214:0	214:5	2	void Ascii85Init ; Ascii85Init Ascii85Init ( void )
TYPE	214:0	214:0	3	void
TYPE_NAME	214:0	214:0	4	void
LEAF_NODE	214:0	214:0	5	void
NAME	214:5	214:5	3	Ascii85Init
LEAF_NODE	214:5	214:5	4	Ascii85Init
LEAF_NODE	0:0	0:0	3	;
INIT	214:5	214:5	3	Ascii85Init Ascii85Init ( void )
ASSIGN	214:5	214:16	4	Ascii85Init Ascii85Init ( void )
LVAL	214:5	214:5	5	Ascii85Init
NAME	214:5	214:5	6	Ascii85Init
LEAF_NODE	214:5	214:5	7	Ascii85Init
ASSIGN_OP	214:5	214:5	5	Ascii85Init
NAME	214:5	214:5	6	Ascii85Init
LEAF_NODE	214:5	214:5	7	Ascii85Init
RVAL	214:16	214:21	5	( void )
LEAF_NODE	214:16	214:16	6	(
EXPR	214:17	214:17	6	void
FIELD	214:17	214:17	7	void
LEAF_NODE	214:17	214:17	8	void
LEAF_NODE	214:21	214:21	6	)
LEAF_NODE	214:22	214:22	2	;
SIMPLE_DECL	216:0	216:27	1	void Ascii85Flush ; Ascii85Flush Ascii85Flush ( FILE * fd ) ;
VAR_DECL	216:0	216:5	2	void Ascii85Flush ; Ascii85Flush Ascii85Flush ( FILE * fd )
TYPE	216:0	216:0	3	void
TYPE_NAME	216:0	216:0	4	void
LEAF_NODE	216:0	216:0	5	void
NAME	216:5	216:5	3	Ascii85Flush
LEAF_NODE	216:5	216:5	4	Ascii85Flush
LEAF_NODE	0:0	0:0	3	;
INIT	216:5	216:5	3	Ascii85Flush Ascii85Flush ( FILE * fd )
ASSIGN	216:5	216:17	4	Ascii85Flush Ascii85Flush ( FILE * fd )
LVAL	216:5	216:5	5	Ascii85Flush
NAME	216:5	216:5	6	Ascii85Flush
LEAF_NODE	216:5	216:5	7	Ascii85Flush
ASSIGN_OP	216:5	216:5	5	Ascii85Flush
NAME	216:5	216:5	6	Ascii85Flush
LEAF_NODE	216:5	216:5	7	Ascii85Flush
RVAL	216:17	216:26	5	( FILE * fd )
LEAF_NODE	216:17	216:17	6	(
EXPR	216:18	216:24	6	FILE * fd
FIELD	216:18	216:18	7	FILE
LEAF_NODE	216:18	216:18	8	FILE
LEAF_NODE	216:22	216:22	7	*
FIELD	216:24	216:24	7	fd
LEAF_NODE	216:24	216:24	8	fd
LEAF_NODE	216:26	216:26	6	)
LEAF_NODE	216:27	216:27	2	;
SIMPLE_DECL	235:7	235:22	1	void usage ; usage usage ( int ) ;
VAR_DECL	235:7	235:12	2	void usage ; usage usage ( int )
TYPE	235:7	235:7	3	void
TYPE_NAME	235:7	235:7	4	void
LEAF_NODE	235:7	235:7	5	void
NAME	235:12	235:12	3	usage
LEAF_NODE	235:12	235:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	235:12	235:12	3	usage usage ( int )
ASSIGN	235:12	235:17	4	usage usage ( int )
LVAL	235:12	235:12	5	usage
NAME	235:12	235:12	6	usage
LEAF_NODE	235:12	235:12	7	usage
ASSIGN_OP	235:12	235:12	5	usage
NAME	235:12	235:12	6	usage
LEAF_NODE	235:12	235:12	7	usage
RVAL	235:17	235:21	5	( int )
LEAF_NODE	235:17	235:17	6	(
EXPR	235:18	235:18	6	int
FIELD	235:18	235:18	7	int
LEAF_NODE	235:18	235:18	8	int
LEAF_NODE	235:21	235:21	6	)
LEAF_NODE	235:22	235:22	2	;
FUNCTION_DEF	237:0	493:0	1	
RETURN_TYPE	237:0	237:0	2	int
TYPE_NAME	237:0	237:0	3	int
LEAF_NODE	237:0	237:0	4	int
FUNCTION_NAME	238:0	238:0	2	main
LEAF_NODE	238:0	238:0	3	main
PARAMETER_LIST	238:4	238:27	2	( int argc , char * [ ] argv )
LEAF_NODE	238:4	238:4	3	(
PARAMETER_DECL	238:5	238:9	3	int argc
TYPE	238:5	238:5	4	int
TYPE_NAME	238:5	238:5	5	int
LEAF_NODE	238:5	238:5	6	int
NAME	238:9	238:9	4	argc
LEAF_NODE	238:9	238:9	5	argc
LEAF_NODE	238:13	238:13	3	,
PARAMETER_DECL	238:15	238:21	3	char * [ ] argv
TYPE	238:15	238:25	4	char * [ ]
TYPE_NAME	238:15	238:15	5	char
LEAF_NODE	238:15	238:15	6	char
POINTER	238:19	238:19	5	*
LEAF_NODE	238:19	238:19	6	*
TYPE_SUFFIX	238:25	238:26	5	[ ]
LEAF_NODE	238:25	238:25	6	[
LEAF_NODE	238:26	238:26	6	]
NAME	238:21	238:21	4	argv
LEAF_NODE	238:21	238:21	5	argv
LEAF_NODE	238:27	238:27	3	)
LEAF_NODE	239:0	239:0	2	{
STATEMENTS	240:1	492:1	2	
SIMPLE_DECL	240:1	240:27	3	int dirnum ; dirnum = - 1 , int c , int np ; np = 0 ;
INIT_DECL_LIST	240:1	240:1	4	int dirnum ; dirnum = - 1 , int c , int np ; np = 0
VAR_DECL	240:1	240:5	5	int dirnum ; dirnum = - 1
TYPE	240:1	240:1	6	int
TYPE_NAME	240:1	240:1	7	int
LEAF_NODE	240:1	240:1	8	int
NAME	240:5	240:5	6	dirnum
LEAF_NODE	240:5	240:5	7	dirnum
LEAF_NODE	0:0	0:0	6	;
INIT	240:5	240:5	6	dirnum = - 1
ASSIGN	240:5	240:14	7	dirnum = - 1
LVAL	240:5	240:5	8	dirnum
NAME	240:5	240:5	9	dirnum
LEAF_NODE	240:5	240:5	10	dirnum
ASSIGN_OP	240:12	240:12	8	=
LEAF_NODE	240:12	240:12	9	=
RVAL	240:14	240:14	8	- 1
UNARY_EXPR	240:14	240:15	9	- 1
UNARY_OPERATOR	240:14	240:14	10	-
LEAF_NODE	240:14	240:14	11	-
FIELD	240:15	240:15	10	1
LEAF_NODE	240:15	240:15	11	1
LEAF_NODE	240:16	240:16	5	,
INIT_DECL_LIST	240:1	240:1	5	int c , int np ; np = 0
VAR_DECL	240:1	240:18	6	int c
TYPE	240:1	240:1	7	int
TYPE_NAME	240:1	240:1	8	int
LEAF_NODE	240:1	240:1	9	int
NAME	240:18	240:18	7	c
LEAF_NODE	240:18	240:18	8	c
LEAF_NODE	240:19	240:19	6	,
VAR_DECL	240:1	240:21	6	int np ; np = 0
TYPE	240:1	240:1	7	int
TYPE_NAME	240:1	240:1	8	int
LEAF_NODE	240:1	240:1	9	int
NAME	240:21	240:21	7	np
LEAF_NODE	240:21	240:21	8	np
LEAF_NODE	0:0	0:0	7	;
INIT	240:21	240:21	7	np = 0
ASSIGN	240:21	240:26	8	np = 0
LVAL	240:21	240:21	9	np
NAME	240:21	240:21	10	np
LEAF_NODE	240:21	240:21	11	np
ASSIGN_OP	240:24	240:24	9	=
LEAF_NODE	240:24	240:24	10	=
RVAL	240:26	240:26	9	0
FIELD	240:26	240:26	10	0
LEAF_NODE	240:26	240:26	11	0
LEAF_NODE	240:27	240:27	4	;
SIMPLE_DECL	241:1	241:17	3	int centered ; centered = 0 ;
VAR_DECL	241:1	241:5	4	int centered ; centered = 0
TYPE	241:1	241:1	5	int
TYPE_NAME	241:1	241:1	6	int
LEAF_NODE	241:1	241:1	7	int
NAME	241:5	241:5	5	centered
LEAF_NODE	241:5	241:5	6	centered
LEAF_NODE	0:0	0:0	5	;
INIT	241:5	241:5	5	centered = 0
ASSIGN	241:5	241:16	6	centered = 0
LVAL	241:5	241:5	7	centered
NAME	241:5	241:5	8	centered
LEAF_NODE	241:5	241:5	9	centered
ASSIGN_OP	241:14	241:14	7	=
LEAF_NODE	241:14	241:14	8	=
RVAL	241:16	241:16	7	0
FIELD	241:16	241:16	8	0
LEAF_NODE	241:16	241:16	9	0
LEAF_NODE	241:17	241:17	4	;
SIMPLE_DECL	242:1	242:24	3	double bottommargin ; bottommargin = 0 ;
VAR_DECL	242:1	242:8	4	double bottommargin ; bottommargin = 0
TYPE	242:1	242:1	5	double
TYPE_NAME	242:1	242:1	6	double
LEAF_NODE	242:1	242:1	7	double
NAME	242:8	242:8	5	bottommargin
LEAF_NODE	242:8	242:8	6	bottommargin
LEAF_NODE	0:0	0:0	5	;
INIT	242:8	242:8	5	bottommargin = 0
ASSIGN	242:8	242:23	6	bottommargin = 0
LVAL	242:8	242:8	7	bottommargin
NAME	242:8	242:8	8	bottommargin
LEAF_NODE	242:8	242:8	9	bottommargin
ASSIGN_OP	242:21	242:21	7	=
LEAF_NODE	242:21	242:21	8	=
RVAL	242:23	242:23	7	0
FIELD	242:23	242:23	8	0
LEAF_NODE	242:23	242:23	9	0
LEAF_NODE	242:24	242:24	4	;
SIMPLE_DECL	243:1	243:22	3	double leftmargin ; leftmargin = 0 ;
VAR_DECL	243:1	243:8	4	double leftmargin ; leftmargin = 0
TYPE	243:1	243:1	5	double
TYPE_NAME	243:1	243:1	6	double
LEAF_NODE	243:1	243:1	7	double
NAME	243:8	243:8	5	leftmargin
LEAF_NODE	243:8	243:8	6	leftmargin
LEAF_NODE	0:0	0:0	5	;
INIT	243:8	243:8	5	leftmargin = 0
ASSIGN	243:8	243:21	6	leftmargin = 0
LVAL	243:8	243:8	7	leftmargin
NAME	243:8	243:8	8	leftmargin
LEAF_NODE	243:8	243:8	9	leftmargin
ASSIGN_OP	243:19	243:19	7	=
LEAF_NODE	243:19	243:19	8	=
RVAL	243:21	243:21	7	0
FIELD	243:21	243:21	8	0
LEAF_NODE	243:21	243:21	9	0
LEAF_NODE	243:22	243:22	4	;
SIMPLE_DECL	244:1	244:21	3	double pageWidth ; pageWidth = 0 ;
VAR_DECL	244:1	244:8	4	double pageWidth ; pageWidth = 0
TYPE	244:1	244:1	5	double
TYPE_NAME	244:1	244:1	6	double
LEAF_NODE	244:1	244:1	7	double
NAME	244:8	244:8	5	pageWidth
LEAF_NODE	244:8	244:8	6	pageWidth
LEAF_NODE	0:0	0:0	5	;
INIT	244:8	244:8	5	pageWidth = 0
ASSIGN	244:8	244:20	6	pageWidth = 0
LVAL	244:8	244:8	7	pageWidth
NAME	244:8	244:8	8	pageWidth
LEAF_NODE	244:8	244:8	9	pageWidth
ASSIGN_OP	244:18	244:18	7	=
LEAF_NODE	244:18	244:18	8	=
RVAL	244:20	244:20	7	0
FIELD	244:20	244:20	8	0
LEAF_NODE	244:20	244:20	9	0
LEAF_NODE	244:21	244:21	4	;
SIMPLE_DECL	245:1	245:22	3	double pageHeight ; pageHeight = 0 ;
VAR_DECL	245:1	245:8	4	double pageHeight ; pageHeight = 0
TYPE	245:1	245:1	5	double
TYPE_NAME	245:1	245:1	6	double
LEAF_NODE	245:1	245:1	7	double
NAME	245:8	245:8	5	pageHeight
LEAF_NODE	245:8	245:8	6	pageHeight
LEAF_NODE	0:0	0:0	5	;
INIT	245:8	245:8	5	pageHeight = 0
ASSIGN	245:8	245:21	6	pageHeight = 0
LVAL	245:8	245:8	7	pageHeight
NAME	245:8	245:8	8	pageHeight
LEAF_NODE	245:8	245:8	9	pageHeight
ASSIGN_OP	245:19	245:19	7	=
LEAF_NODE	245:19	245:19	8	=
RVAL	245:21	245:21	7	0
FIELD	245:21	245:21	8	0
LEAF_NODE	245:21	245:21	9	0
LEAF_NODE	245:22	245:22	4	;
SIMPLE_DECL	246:1	246:18	3	uint32 diroff ; diroff = 0 ;
VAR_DECL	246:1	246:8	4	uint32 diroff ; diroff = 0
TYPE	246:1	246:1	5	uint32
TYPE_NAME	246:1	246:1	6	uint32
LEAF_NODE	246:1	246:1	7	uint32
NAME	246:8	246:8	5	diroff
LEAF_NODE	246:8	246:8	6	diroff
LEAF_NODE	0:0	0:0	5	;
INIT	246:8	246:8	5	diroff = 0
ASSIGN	246:8	246:17	6	diroff = 0
LVAL	246:8	246:8	7	diroff
NAME	246:8	246:8	8	diroff
LEAF_NODE	246:8	246:8	9	diroff
ASSIGN_OP	246:15	246:15	7	=
LEAF_NODE	246:15	246:15	8	=
RVAL	246:17	246:17	7	0
FIELD	246:17	246:17	8	0
LEAF_NODE	246:17	246:17	9	0
LEAF_NODE	246:18	246:18	4	;
LEAF_NODE	248:1	248:1	3	extern
SIMPLE_DECL	248:8	248:20	3	char * optarg ;
VAR_DECL	248:8	248:14	4	char * optarg
TYPE	248:8	248:13	5	char *
TYPE_NAME	248:8	248:8	6	char
LEAF_NODE	248:8	248:8	7	char
POINTER	248:13	248:13	6	*
LEAF_NODE	248:13	248:13	7	*
NAME	248:14	248:14	5	optarg
LEAF_NODE	248:14	248:14	6	optarg
LEAF_NODE	248:20	248:20	4	;
LEAF_NODE	249:1	249:1	3	extern
SIMPLE_DECL	249:8	249:18	3	int optind ;
VAR_DECL	249:8	249:12	4	int optind
TYPE	249:8	249:8	5	int
TYPE_NAME	249:8	249:8	6	int
LEAF_NODE	249:8	249:8	7	int
NAME	249:12	249:12	5	optind
LEAF_NODE	249:12	249:12	6	optind
LEAF_NODE	249:18	249:18	4	;
SIMPLE_DECL	251:1	251:22	3	FILE * output ; output = stdout ;
VAR_DECL	251:1	251:7	4	FILE * output ; output = stdout
TYPE	251:1	251:5	5	FILE *
TYPE_NAME	251:1	251:1	6	FILE
LEAF_NODE	251:1	251:1	7	FILE
POINTER	251:5	251:5	6	*
LEAF_NODE	251:5	251:5	7	*
NAME	251:7	251:7	5	output
LEAF_NODE	251:7	251:7	6	output
LEAF_NODE	0:0	0:0	5	;
INIT	251:7	251:7	5	output = stdout
ASSIGN	251:7	251:16	6	output = stdout
LVAL	251:7	251:7	7	output
NAME	251:7	251:7	8	output
LEAF_NODE	251:7	251:7	9	output
ASSIGN_OP	251:14	251:14	7	=
LEAF_NODE	251:14	251:14	8	=
RVAL	251:16	251:16	7	stdout
FIELD	251:16	251:16	8	stdout
LEAF_NODE	251:16	251:16	9	stdout
LEAF_NODE	251:22	251:22	4	;
EXPR_STATEMENT	253:8	253:33	3	pageOrientation [ 0 ] = '\0' ;
EXPR	253:8	253:8	4	pageOrientation [ 0 ] = '\0'
ASSIGN	253:8	253:29	5	pageOrientation [ 0 ] = '\0'
LVAL	253:8	253:8	6	pageOrientation [ 0 ]
FIELD	253:8	253:25	7	pageOrientation [ 0 ]
LEAF_NODE	253:8	253:8	8	pageOrientation
LEAF_NODE	253:23	253:23	8	[
EXPR	253:24	253:24	8	0
FIELD	253:24	253:24	9	0
LEAF_NODE	253:24	253:24	10	0
LEAF_NODE	253:25	253:25	8	]
ASSIGN_OP	253:27	253:27	6	=
LEAF_NODE	253:27	253:27	7	=
RVAL	253:29	253:29	6	'\0'
FIELD	253:29	253:29	7	'\0'
LEAF_NODE	253:29	253:29	8	'\0'
LEAF_NODE	253:33	253:33	4	;
ITERATION	255:1	256:2	3	
KEYWORD	255:1	255:1	4	while
LEAF_NODE	255:1	255:1	5	while
LEAF_NODE	255:7	255:7	4	(
CONDITION	255:8	255:8	4	( c = getopt ( argc , argv , "b:d:h:H:W:L:i:w:l:o:O:P:C:r:t:acemxyzps1238DT" ) ) != - 1
EXPR	255:8	255:85	5	( c = getopt ( argc , argv , "b:d:h:H:W:L:i:w:l:o:O:P:C:r:t:acemxyzps1238DT" ) ) != - 1
LEAF_NODE	255:8	255:8	6	(
ASSIGN	255:9	255:13	6	c = getopt ( argc , argv , "b:d:h:H:W:L:i:w:l:o:O:P:C:r:t:acemxyzps1238DT" )
LVAL	255:9	255:9	7	c
FIELD	255:9	255:9	8	c
LEAF_NODE	255:9	255:9	9	c
ASSIGN_OP	255:11	255:11	7	=
LEAF_NODE	255:11	255:11	8	=
RVAL	255:13	255:13	7	getopt ( argc , argv , "b:d:h:H:W:L:i:w:l:o:O:P:C:r:t:acemxyzps1238DT" )
FUNCTION_CALL	255:13	255:79	8	getopt ( argc , argv , "b:d:h:H:W:L:i:w:l:o:O:P:C:r:t:acemxyzps1238DT" )
CALLEE	255:13	255:13	9	getopt
LEAF_NODE	255:13	255:13	10	getopt
LEAF_NODE	255:19	255:19	9	(
ARGUMENT	255:20	255:20	9	argc
FIELD	255:20	255:20	10	argc
LEAF_NODE	255:20	255:20	11	argc
LEAF_NODE	255:24	255:24	9	,
ARGUMENT	255:26	255:26	9	argv
FIELD	255:26	255:26	10	argv
LEAF_NODE	255:26	255:26	11	argv
LEAF_NODE	255:30	255:30	9	,
ARGUMENT	255:32	255:32	9	"b:d:h:H:W:L:i:w:l:o:O:P:C:r:t:acemxyzps1238DT"
FIELD	255:32	255:32	10	"b:d:h:H:W:L:i:w:l:o:O:P:C:r:t:acemxyzps1238DT"
LEAF_NODE	255:32	255:32	11	"b:d:h:H:W:L:i:w:l:o:O:P:C:r:t:acemxyzps1238DT"
LEAF_NODE	255:79	255:79	9	)
LEAF_NODE	255:80	255:80	6	)
EQ_OPERATOR	255:82	255:82	6	!=
LEAF_NODE	255:82	255:82	7	!=
UNARY_EXPR	255:85	255:86	6	- 1
UNARY_OPERATOR	255:85	255:85	7	-
LEAF_NODE	255:85	255:85	8	-
FIELD	255:86	255:86	7	1
LEAF_NODE	255:86	255:86	8	1
LEAF_NODE	255:87	255:87	4	)
STATEMENTS	256:2	256:2	4	
SELECTION	256:2	256:13	5	
KEYWORD	256:2	256:2	6	switch
LEAF_NODE	256:2	256:2	7	switch
LEAF_NODE	256:9	256:9	6	(
CONDITION	256:10	256:10	6	c
EXPR	256:10	256:10	7	c
FIELD	256:10	256:10	8	c
LEAF_NODE	256:10	256:10	9	c
LEAF_NODE	256:11	256:11	6	)
STATEMENTS	256:13	405:2	6	
LEAF_NODE	256:13	256:13	7	{
STATEMENTS	257:2	404:3	7	
LEAF_NODE	257:2	257:2	8	case
LEAF_NODE	257:7	257:7	8	'b'
LEAF_NODE	257:10	257:10	8	:
EXPR_STATEMENT	258:3	258:30	8	bottommargin = atof ( optarg ) ;
EXPR	258:3	258:3	9	bottommargin = atof ( optarg )
ASSIGN	258:3	258:18	10	bottommargin = atof ( optarg )
LVAL	258:3	258:3	11	bottommargin
FIELD	258:3	258:3	12	bottommargin
LEAF_NODE	258:3	258:3	13	bottommargin
ASSIGN_OP	258:16	258:16	11	=
LEAF_NODE	258:16	258:16	12	=
RVAL	258:18	258:18	11	atof ( optarg )
FUNCTION_CALL	258:18	258:29	12	atof ( optarg )
CALLEE	258:18	258:18	13	atof
LEAF_NODE	258:18	258:18	14	atof
LEAF_NODE	258:22	258:22	13	(
ARGUMENT	258:23	258:23	13	optarg
FIELD	258:23	258:23	14	optarg
LEAF_NODE	258:23	258:23	15	optarg
LEAF_NODE	258:29	258:29	13	)
LEAF_NODE	258:30	258:30	9	;
JUMP_STATEMENT	259:3	259:8	8	break DESTINATION ;
KEYWORD	259:3	259:3	9	break
LEAF_NODE	259:3	259:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	259:8	259:8	9	;
LEAF_NODE	260:2	260:2	8	case
LEAF_NODE	260:7	260:7	8	'c'
LEAF_NODE	260:10	260:10	8	:
EXPR_STATEMENT	261:3	261:15	8	centered = 1 ;
EXPR	261:3	261:3	9	centered = 1
ASSIGN	261:3	261:14	10	centered = 1
LVAL	261:3	261:3	11	centered
FIELD	261:3	261:3	12	centered
LEAF_NODE	261:3	261:3	13	centered
ASSIGN_OP	261:12	261:12	11	=
LEAF_NODE	261:12	261:12	12	=
RVAL	261:14	261:14	11	1
FIELD	261:14	261:14	12	1
LEAF_NODE	261:14	261:14	13	1
LEAF_NODE	261:15	261:15	9	;
JUMP_STATEMENT	262:3	262:8	8	break DESTINATION ;
KEYWORD	262:3	262:3	9	break
LEAF_NODE	262:3	262:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	262:8	262:8	9	;
LEAF_NODE	263:2	263:2	8	case
LEAF_NODE	263:7	263:7	8	'C'
LEAF_NODE	263:10	263:10	8	:
EXPR_STATEMENT	264:3	264:19	8	creator = optarg ;
EXPR	264:3	264:3	9	creator = optarg
ASSIGN	264:3	264:13	10	creator = optarg
LVAL	264:3	264:3	11	creator
FIELD	264:3	264:3	12	creator
LEAF_NODE	264:3	264:3	13	creator
ASSIGN_OP	264:11	264:11	11	=
LEAF_NODE	264:11	264:11	12	=
RVAL	264:13	264:13	11	optarg
FIELD	264:13	264:13	12	optarg
LEAF_NODE	264:13	264:13	13	optarg
LEAF_NODE	264:19	264:19	9	;
JUMP_STATEMENT	265:3	265:8	8	break DESTINATION ;
KEYWORD	265:3	265:3	9	break
LEAF_NODE	265:3	265:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	265:8	265:8	9	;
LEAF_NODE	266:2	266:2	8	case
LEAF_NODE	266:7	266:7	8	'd'
LEAF_NODE	266:10	266:10	8	:
EXPR_STATEMENT	267:3	267:24	8	dirnum = atoi ( optarg ) ;
EXPR	267:3	267:3	9	dirnum = atoi ( optarg )
ASSIGN	267:3	267:12	10	dirnum = atoi ( optarg )
LVAL	267:3	267:3	11	dirnum
FIELD	267:3	267:3	12	dirnum
LEAF_NODE	267:3	267:3	13	dirnum
ASSIGN_OP	267:10	267:10	11	=
LEAF_NODE	267:10	267:10	12	=
RVAL	267:12	267:12	11	atoi ( optarg )
FUNCTION_CALL	267:12	267:23	12	atoi ( optarg )
CALLEE	267:12	267:12	13	atoi
LEAF_NODE	267:12	267:12	14	atoi
LEAF_NODE	267:16	267:16	13	(
ARGUMENT	267:17	267:17	13	optarg
FIELD	267:17	267:17	14	optarg
LEAF_NODE	267:17	267:17	15	optarg
LEAF_NODE	267:23	267:23	13	)
LEAF_NODE	267:24	267:24	9	;
JUMP_STATEMENT	268:3	268:8	8	break DESTINATION ;
KEYWORD	268:3	268:3	9	break
LEAF_NODE	268:3	268:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	268:8	268:8	9	;
LEAF_NODE	269:2	269:2	8	case
LEAF_NODE	269:7	269:7	8	'D'
LEAF_NODE	269:10	269:10	8	:
EXPR_STATEMENT	270:3	270:18	8	PSduplex = TRUE ;
EXPR	270:3	270:3	9	PSduplex = TRUE
ASSIGN	270:3	270:14	10	PSduplex = TRUE
LVAL	270:3	270:3	11	PSduplex
FIELD	270:3	270:3	12	PSduplex
LEAF_NODE	270:3	270:3	13	PSduplex
ASSIGN_OP	270:12	270:12	11	=
LEAF_NODE	270:12	270:12	12	=
RVAL	270:14	270:14	11	TRUE
FIELD	270:14	270:14	12	TRUE
LEAF_NODE	270:14	270:14	13	TRUE
LEAF_NODE	270:18	270:18	9	;
JUMP_STATEMENT	271:3	271:8	8	break DESTINATION ;
KEYWORD	271:3	271:3	9	break
LEAF_NODE	271:3	271:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	271:8	271:8	9	;
LEAF_NODE	272:2	272:2	8	case
LEAF_NODE	272:7	272:7	8	'i'
LEAF_NODE	272:10	272:10	8	:
EXPR_STATEMENT	273:3	273:42	8	interpolate = atoi ( optarg ) ? TRUE : FALSE ;
EXPR	273:3	273:3	9	interpolate = atoi ( optarg ) ? TRUE : FALSE
ASSIGN	273:3	273:17	10	interpolate = atoi ( optarg ) ? TRUE : FALSE
LVAL	273:3	273:3	11	interpolate
FIELD	273:3	273:3	12	interpolate
LEAF_NODE	273:3	273:3	13	interpolate
ASSIGN_OP	273:15	273:15	11	=
LEAF_NODE	273:15	273:15	12	=
RVAL	273:17	273:17	11	atoi ( optarg ) ? TRUE : FALSE
COND_EXPR	273:17	273:37	12	atoi ( optarg ) ? TRUE : FALSE
CONDITION	273:17	273:17	13	atoi ( optarg )
FUNCTION_CALL	273:17	273:28	14	atoi ( optarg )
CALLEE	273:17	273:17	15	atoi
LEAF_NODE	273:17	273:17	16	atoi
LEAF_NODE	273:21	273:21	15	(
ARGUMENT	273:22	273:22	15	optarg
FIELD	273:22	273:22	16	optarg
LEAF_NODE	273:22	273:22	17	optarg
LEAF_NODE	273:28	273:28	15	)
LEAF_NODE	273:30	273:30	13	?
EXPR	273:32	273:32	13	TRUE
FIELD	273:32	273:32	14	TRUE
LEAF_NODE	273:32	273:32	15	TRUE
LEAF_NODE	273:36	273:36	13	:
FIELD	273:37	273:37	13	FALSE
LEAF_NODE	273:37	273:37	14	FALSE
LEAF_NODE	273:42	273:42	9	;
JUMP_STATEMENT	274:3	274:8	8	break DESTINATION ;
KEYWORD	274:3	274:3	9	break
LEAF_NODE	274:3	274:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	274:8	274:8	9	;
LEAF_NODE	275:2	275:2	8	case
LEAF_NODE	275:7	275:7	8	'T'
LEAF_NODE	275:10	275:10	8	:
EXPR_STATEMENT	276:3	276:18	8	PStumble = TRUE ;
EXPR	276:3	276:3	9	PStumble = TRUE
ASSIGN	276:3	276:14	10	PStumble = TRUE
LVAL	276:3	276:3	11	PStumble
FIELD	276:3	276:3	12	PStumble
LEAF_NODE	276:3	276:3	13	PStumble
ASSIGN_OP	276:12	276:12	11	=
LEAF_NODE	276:12	276:12	12	=
RVAL	276:14	276:14	11	TRUE
FIELD	276:14	276:14	12	TRUE
LEAF_NODE	276:14	276:14	13	TRUE
LEAF_NODE	276:18	276:18	9	;
JUMP_STATEMENT	277:3	277:8	8	break DESTINATION ;
KEYWORD	277:3	277:3	9	break
LEAF_NODE	277:3	277:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	277:8	277:8	9	;
LEAF_NODE	278:2	278:2	8	case
LEAF_NODE	278:7	278:7	8	'e'
LEAF_NODE	278:10	278:10	8	:
EXPR_STATEMENT	279:24	279:47	8	PSavoiddeadzone = FALSE ;
EXPR	279:24	279:24	9	PSavoiddeadzone = FALSE
ASSIGN	279:24	279:42	10	PSavoiddeadzone = FALSE
LVAL	279:24	279:24	11	PSavoiddeadzone
FIELD	279:24	279:24	12	PSavoiddeadzone
LEAF_NODE	279:24	279:24	13	PSavoiddeadzone
ASSIGN_OP	279:40	279:40	11	=
LEAF_NODE	279:40	279:40	12	=
RVAL	279:42	279:42	11	FALSE
FIELD	279:42	279:42	12	FALSE
LEAF_NODE	279:42	279:42	13	FALSE
LEAF_NODE	279:47	279:47	9	;
EXPR_STATEMENT	280:3	280:22	8	generateEPSF = TRUE ;
EXPR	280:3	280:3	9	generateEPSF = TRUE
ASSIGN	280:3	280:18	10	generateEPSF = TRUE
LVAL	280:3	280:3	11	generateEPSF
FIELD	280:3	280:3	12	generateEPSF
LEAF_NODE	280:3	280:3	13	generateEPSF
ASSIGN_OP	280:16	280:16	11	=
LEAF_NODE	280:16	280:16	12	=
RVAL	280:18	280:18	11	TRUE
FIELD	280:18	280:18	12	TRUE
LEAF_NODE	280:18	280:18	13	TRUE
LEAF_NODE	280:22	280:22	9	;
JUMP_STATEMENT	281:3	281:8	8	break DESTINATION ;
KEYWORD	281:3	281:3	9	break
LEAF_NODE	281:3	281:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	281:8	281:8	9	;
LEAF_NODE	282:2	282:2	8	case
LEAF_NODE	282:7	282:7	8	'h'
LEAF_NODE	282:10	282:10	8	:
EXPR_STATEMENT	283:3	283:28	8	pageHeight = atof ( optarg ) ;
EXPR	283:3	283:3	9	pageHeight = atof ( optarg )
ASSIGN	283:3	283:16	10	pageHeight = atof ( optarg )
LVAL	283:3	283:3	11	pageHeight
FIELD	283:3	283:3	12	pageHeight
LEAF_NODE	283:3	283:3	13	pageHeight
ASSIGN_OP	283:14	283:14	11	=
LEAF_NODE	283:14	283:14	12	=
RVAL	283:16	283:16	11	atof ( optarg )
FUNCTION_CALL	283:16	283:27	12	atof ( optarg )
CALLEE	283:16	283:16	13	atof
LEAF_NODE	283:16	283:16	14	atof
LEAF_NODE	283:20	283:20	13	(
ARGUMENT	283:21	283:21	13	optarg
FIELD	283:21	283:21	14	optarg
LEAF_NODE	283:21	283:21	15	optarg
LEAF_NODE	283:27	283:27	13	)
LEAF_NODE	283:28	283:28	9	;
JUMP_STATEMENT	284:3	284:8	8	break DESTINATION ;
KEYWORD	284:3	284:3	9	break
LEAF_NODE	284:3	284:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	284:8	284:8	9	;
LEAF_NODE	285:2	285:2	8	case
LEAF_NODE	285:7	285:7	8	'H'
LEAF_NODE	285:10	285:10	8	:
EXPR_STATEMENT	286:3	286:31	8	maxPageHeight = atof ( optarg ) ;
EXPR	286:3	286:3	9	maxPageHeight = atof ( optarg )
ASSIGN	286:3	286:19	10	maxPageHeight = atof ( optarg )
LVAL	286:3	286:3	11	maxPageHeight
FIELD	286:3	286:3	12	maxPageHeight
LEAF_NODE	286:3	286:3	13	maxPageHeight
ASSIGN_OP	286:17	286:17	11	=
LEAF_NODE	286:17	286:17	12	=
RVAL	286:19	286:19	11	atof ( optarg )
FUNCTION_CALL	286:19	286:30	12	atof ( optarg )
CALLEE	286:19	286:19	13	atof
LEAF_NODE	286:19	286:19	14	atof
LEAF_NODE	286:23	286:23	13	(
ARGUMENT	286:24	286:24	13	optarg
FIELD	286:24	286:24	14	optarg
LEAF_NODE	286:24	286:24	15	optarg
LEAF_NODE	286:30	286:30	13	)
LEAF_NODE	286:31	286:31	9	;
JUMP_STATEMENT	287:3	287:8	8	break DESTINATION ;
KEYWORD	287:3	287:3	9	break
LEAF_NODE	287:3	287:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	287:8	287:8	9	;
LEAF_NODE	288:2	288:2	8	case
LEAF_NODE	288:7	288:7	8	'W'
LEAF_NODE	288:10	288:10	8	:
EXPR_STATEMENT	289:3	289:30	8	maxPageWidth = atof ( optarg ) ;
EXPR	289:3	289:3	9	maxPageWidth = atof ( optarg )
ASSIGN	289:3	289:18	10	maxPageWidth = atof ( optarg )
LVAL	289:3	289:3	11	maxPageWidth
FIELD	289:3	289:3	12	maxPageWidth
LEAF_NODE	289:3	289:3	13	maxPageWidth
ASSIGN_OP	289:16	289:16	11	=
LEAF_NODE	289:16	289:16	12	=
RVAL	289:18	289:18	11	atof ( optarg )
FUNCTION_CALL	289:18	289:29	12	atof ( optarg )
CALLEE	289:18	289:18	13	atof
LEAF_NODE	289:18	289:18	14	atof
LEAF_NODE	289:22	289:22	13	(
ARGUMENT	289:23	289:23	13	optarg
FIELD	289:23	289:23	14	optarg
LEAF_NODE	289:23	289:23	15	optarg
LEAF_NODE	289:29	289:29	13	)
LEAF_NODE	289:30	289:30	9	;
JUMP_STATEMENT	290:3	290:8	8	break DESTINATION ;
KEYWORD	290:3	290:3	9	break
LEAF_NODE	290:3	290:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	290:8	290:8	9	;
LEAF_NODE	291:2	291:2	8	case
LEAF_NODE	291:7	291:7	8	'L'
LEAF_NODE	291:10	291:10	8	:
EXPR_STATEMENT	292:3	292:30	8	splitOverlap = atof ( optarg ) ;
EXPR	292:3	292:3	9	splitOverlap = atof ( optarg )
ASSIGN	292:3	292:18	10	splitOverlap = atof ( optarg )
LVAL	292:3	292:3	11	splitOverlap
FIELD	292:3	292:3	12	splitOverlap
LEAF_NODE	292:3	292:3	13	splitOverlap
ASSIGN_OP	292:16	292:16	11	=
LEAF_NODE	292:16	292:16	12	=
RVAL	292:18	292:18	11	atof ( optarg )
FUNCTION_CALL	292:18	292:29	12	atof ( optarg )
CALLEE	292:18	292:18	13	atof
LEAF_NODE	292:18	292:18	14	atof
LEAF_NODE	292:22	292:22	13	(
ARGUMENT	292:23	292:23	13	optarg
FIELD	292:23	292:23	14	optarg
LEAF_NODE	292:23	292:23	15	optarg
LEAF_NODE	292:29	292:29	13	)
LEAF_NODE	292:30	292:30	9	;
JUMP_STATEMENT	293:3	293:8	8	break DESTINATION ;
KEYWORD	293:3	293:3	9	break
LEAF_NODE	293:3	293:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	293:8	293:8	9	;
LEAF_NODE	294:2	294:2	8	case
LEAF_NODE	294:7	294:7	8	'm'
LEAF_NODE	294:10	294:10	8	:
EXPR_STATEMENT	295:3	295:22	8	useImagemask = TRUE ;
EXPR	295:3	295:3	9	useImagemask = TRUE
ASSIGN	295:3	295:18	10	useImagemask = TRUE
LVAL	295:3	295:3	11	useImagemask
FIELD	295:3	295:3	12	useImagemask
LEAF_NODE	295:3	295:3	13	useImagemask
ASSIGN_OP	295:16	295:16	11	=
LEAF_NODE	295:16	295:16	12	=
RVAL	295:18	295:18	11	TRUE
FIELD	295:18	295:18	12	TRUE
LEAF_NODE	295:18	295:18	13	TRUE
LEAF_NODE	295:22	295:22	9	;
JUMP_STATEMENT	296:3	296:8	8	break DESTINATION ;
KEYWORD	296:3	296:3	9	break
LEAF_NODE	296:3	296:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	296:8	296:8	9	;
LEAF_NODE	297:2	297:2	8	case
LEAF_NODE	297:7	297:7	8	'o'
LEAF_NODE	297:10	297:10	8	:
SELECTION	298:10	299:26	8	
KEYWORD	298:10	298:10	9	switch
LEAF_NODE	298:10	298:10	10	switch
LEAF_NODE	298:17	298:17	9	(
CONDITION	298:18	298:18	9	optarg [ 0 ]
EXPR	298:18	298:18	10	optarg [ 0 ]
FIELD	298:18	298:26	11	optarg [ 0 ]
LEAF_NODE	298:18	298:18	12	optarg
LEAF_NODE	298:24	298:24	12	[
EXPR	298:25	298:25	12	0
FIELD	298:25	298:25	13	0
LEAF_NODE	298:25	298:25	14	0
LEAF_NODE	298:26	298:26	12	]
LEAF_NODE	298:27	298:27	9	)
STATEMENTS	299:26	313:5	9	
LEAF_NODE	299:26	299:26	10	{
STATEMENTS	300:26	312:7	10	
LEAF_NODE	300:26	300:26	11	case
LEAF_NODE	300:31	300:31	11	'0'
LEAF_NODE	300:34	300:34	11	:
LEAF_NODE	301:26	301:26	11	case
LEAF_NODE	301:31	301:31	11	'1'
LEAF_NODE	301:34	301:34	11	:
LEAF_NODE	302:26	302:26	11	case
LEAF_NODE	302:31	302:31	11	'2'
LEAF_NODE	302:34	302:34	11	:
LEAF_NODE	303:26	303:26	11	case
LEAF_NODE	303:31	303:31	11	'3'
LEAF_NODE	303:34	303:34	11	:
LEAF_NODE	304:26	304:26	11	case
LEAF_NODE	304:31	304:31	11	'4'
LEAF_NODE	304:34	304:34	11	:
LEAF_NODE	305:26	305:26	11	case
LEAF_NODE	305:31	305:31	11	'5'
LEAF_NODE	305:34	305:34	11	:
LEAF_NODE	306:26	306:26	11	case
LEAF_NODE	306:31	306:31	11	'6'
LEAF_NODE	306:34	306:34	11	:
LEAF_NODE	307:26	307:26	11	case
LEAF_NODE	307:31	307:31	11	'7'
LEAF_NODE	307:34	307:34	11	:
LEAF_NODE	308:26	308:26	11	case
LEAF_NODE	308:31	308:31	11	'8'
LEAF_NODE	308:34	308:34	11	:
LEAF_NODE	309:26	309:26	11	case
LEAF_NODE	309:31	309:31	11	'9'
LEAF_NODE	309:34	309:34	11	:
EXPR_STATEMENT	309:36	309:78	11	diroff = ( uint32 ) strtoul ( optarg , NULL , 0 ) ;
EXPR	309:36	309:36	12	diroff = ( uint32 ) strtoul ( optarg , NULL , 0 )
ASSIGN	309:36	309:45	13	diroff = ( uint32 ) strtoul ( optarg , NULL , 0 )
LVAL	309:36	309:36	14	diroff
FIELD	309:36	309:36	15	diroff
LEAF_NODE	309:36	309:36	16	diroff
ASSIGN_OP	309:43	309:43	14	=
LEAF_NODE	309:43	309:43	15	=
RVAL	309:45	309:54	14	( uint32 ) strtoul ( optarg , NULL , 0 )
LEAF_NODE	309:45	309:45	15	(
TYPE_NAME	309:46	309:46	15	uint32
LEAF_NODE	309:46	309:46	16	uint32
LEAF_NODE	309:52	309:52	15	)
FUNCTION_CALL	309:54	309:77	15	strtoul ( optarg , NULL , 0 )
CALLEE	309:54	309:54	16	strtoul
LEAF_NODE	309:54	309:54	17	strtoul
LEAF_NODE	309:61	309:61	16	(
ARGUMENT	309:62	309:62	16	optarg
FIELD	309:62	309:62	17	optarg
LEAF_NODE	309:62	309:62	18	optarg
LEAF_NODE	309:68	309:68	16	,
ARGUMENT	309:70	309:70	16	NULL
FIELD	309:70	309:70	17	NULL
LEAF_NODE	309:70	309:70	18	NULL
LEAF_NODE	309:74	309:74	16	,
ARGUMENT	309:76	309:76	16	0
FIELD	309:76	309:76	17	0
LEAF_NODE	309:76	309:76	18	0
LEAF_NODE	309:77	309:77	16	)
LEAF_NODE	309:78	309:78	12	;
JUMP_STATEMENT	310:13	310:18	11	break DESTINATION ;
KEYWORD	310:13	310:13	12	break
LEAF_NODE	310:13	310:13	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	310:18	310:18	12	;
LABEL	311:26	311:33	11	default :
LEAF_NODE	311:26	311:26	12	default
LEAF_NODE	311:33	311:33	12	:
EXPR_STATEMENT	311:35	311:86	11	TIFFError ( "-o" , "Offset must be a numeric value." ) ;
EXPR	311:35	311:35	12	TIFFError ( "-o" , "Offset must be a numeric value." )
FUNCTION_CALL	311:35	311:85	13	TIFFError ( "-o" , "Offset must be a numeric value." )
CALLEE	311:35	311:35	14	TIFFError
LEAF_NODE	311:35	311:35	15	TIFFError
LEAF_NODE	311:45	311:45	14	(
ARGUMENT	311:46	311:46	14	"-o"
FIELD	311:46	311:46	15	"-o"
LEAF_NODE	311:46	311:46	16	"-o"
LEAF_NODE	311:50	311:50	14	,
ARGUMENT	311:52	311:52	14	"Offset must be a numeric value."
FIELD	311:52	311:52	15	"Offset must be a numeric value."
LEAF_NODE	311:52	311:52	16	"Offset must be a numeric value."
LEAF_NODE	311:85	311:85	14	)
LEAF_NODE	311:86	311:86	12	;
EXPR_STATEMENT	312:7	312:15	11	exit ( 1 ) ;
EXPR	312:7	312:7	12	exit ( 1 )
FUNCTION_CALL	312:7	312:14	13	exit ( 1 )
CALLEE	312:7	312:7	14	exit
LEAF_NODE	312:7	312:7	15	exit
LEAF_NODE	312:12	312:12	14	(
ARGUMENT	312:13	312:13	14	1
FIELD	312:13	312:13	15	1
LEAF_NODE	312:13	312:13	16	1
LEAF_NODE	312:14	312:14	14	)
LEAF_NODE	312:15	312:15	12	;
LEAF_NODE	313:5	313:5	10	}
JUMP_STATEMENT	314:3	314:8	8	break DESTINATION ;
KEYWORD	314:3	314:3	9	break
LEAF_NODE	314:3	314:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	314:8	314:8	9	;
LEAF_NODE	315:2	315:2	8	case
LEAF_NODE	315:7	315:7	8	'O'
LEAF_NODE	315:10	315:10	8	:
EXPR_STATEMENT	316:3	316:30	8	output = fopen ( optarg , "w" ) ;
EXPR	316:3	316:3	9	output = fopen ( optarg , "w" )
ASSIGN	316:3	316:12	10	output = fopen ( optarg , "w" )
LVAL	316:3	316:3	11	output
FIELD	316:3	316:3	12	output
LEAF_NODE	316:3	316:3	13	output
ASSIGN_OP	316:10	316:10	11	=
LEAF_NODE	316:10	316:10	12	=
RVAL	316:12	316:12	11	fopen ( optarg , "w" )
FUNCTION_CALL	316:12	316:29	12	fopen ( optarg , "w" )
CALLEE	316:12	316:12	13	fopen
LEAF_NODE	316:12	316:12	14	fopen
LEAF_NODE	316:17	316:17	13	(
ARGUMENT	316:18	316:18	13	optarg
FIELD	316:18	316:18	14	optarg
LEAF_NODE	316:18	316:18	15	optarg
LEAF_NODE	316:24	316:24	13	,
ARGUMENT	316:26	316:26	13	"w"
FIELD	316:26	316:26	14	"w"
LEAF_NODE	316:26	316:26	15	"w"
LEAF_NODE	316:29	316:29	13	)
LEAF_NODE	316:30	316:30	9	;
SELECTION	317:3	317:23	8	
KEYWORD	317:3	317:3	9	if
LEAF_NODE	317:3	317:3	10	if
LEAF_NODE	317:6	317:6	9	(
CONDITION	317:7	317:7	9	output == NULL
EXPR	317:7	317:17	10	output == NULL
FIELD	317:7	317:7	11	output
LEAF_NODE	317:7	317:7	12	output
EQ_OPERATOR	317:14	317:14	11	==
LEAF_NODE	317:14	317:14	12	==
FIELD	317:17	317:17	11	NULL
LEAF_NODE	317:17	317:17	12	NULL
LEAF_NODE	317:21	317:21	9	)
STATEMENTS	317:23	322:3	9	
LEAF_NODE	317:23	317:23	10	{
STATEMENTS	318:4	321:4	10	
EXPR_STATEMENT	318:4	320:24	11	fprintf ( stderr , "%s: %s: Cannot open output file.\n" , argv [ 0 ] , optarg ) ;
EXPR	318:4	318:4	12	fprintf ( stderr , "%s: %s: Cannot open output file.\n" , argv [ 0 ] , optarg )
FUNCTION_CALL	318:4	320:23	13	fprintf ( stderr , "%s: %s: Cannot open output file.\n" , argv [ 0 ] , optarg )
CALLEE	318:4	318:4	14	fprintf
LEAF_NODE	318:4	318:4	15	fprintf
LEAF_NODE	318:11	318:11	14	(
ARGUMENT	318:12	318:12	14	stderr
FIELD	318:12	318:12	15	stderr
LEAF_NODE	318:12	318:12	16	stderr
LEAF_NODE	318:18	318:18	14	,
ARGUMENT	319:8	319:8	14	"%s: %s: Cannot open output file.\n"
FIELD	319:8	319:8	15	"%s: %s: Cannot open output file.\n"
LEAF_NODE	319:8	319:8	16	"%s: %s: Cannot open output file.\n"
LEAF_NODE	319:44	319:44	14	,
ARGUMENT	320:8	320:8	14	argv [ 0 ]
FIELD	320:8	320:14	15	argv [ 0 ]
LEAF_NODE	320:8	320:8	16	argv
LEAF_NODE	320:12	320:12	16	[
EXPR	320:13	320:13	16	0
FIELD	320:13	320:13	17	0
LEAF_NODE	320:13	320:13	18	0
LEAF_NODE	320:14	320:14	16	]
LEAF_NODE	320:15	320:15	14	,
ARGUMENT	320:17	320:17	14	optarg
FIELD	320:17	320:17	15	optarg
LEAF_NODE	320:17	320:17	16	optarg
LEAF_NODE	320:23	320:23	14	)
LEAF_NODE	320:24	320:24	12	;
EXPR_STATEMENT	321:4	321:12	11	exit ( - 2 ) ;
EXPR	321:4	321:4	12	exit ( - 2 )
FUNCTION_CALL	321:4	321:11	13	exit ( - 2 )
CALLEE	321:4	321:4	14	exit
LEAF_NODE	321:4	321:4	15	exit
LEAF_NODE	321:8	321:8	14	(
ARGUMENT	321:9	321:9	14	- 2
UNARY_EXPR	321:9	321:10	15	- 2
UNARY_OPERATOR	321:9	321:9	16	-
LEAF_NODE	321:9	321:9	17	-
FIELD	321:10	321:10	16	2
LEAF_NODE	321:10	321:10	17	2
LEAF_NODE	321:11	321:11	14	)
LEAF_NODE	321:12	321:12	12	;
LEAF_NODE	322:3	322:3	10	}
JUMP_STATEMENT	323:3	323:8	8	break DESTINATION ;
KEYWORD	323:3	323:3	9	break
LEAF_NODE	323:3	323:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	323:8	323:8	9	;
LEAF_NODE	324:2	324:2	8	case
LEAF_NODE	324:7	324:7	8	'P'
LEAF_NODE	324:10	324:10	8	:
SELECTION	325:24	326:26	8	
KEYWORD	325:24	325:24	9	switch
LEAF_NODE	325:24	325:24	10	switch
LEAF_NODE	325:31	325:31	9	(
CONDITION	325:32	325:32	9	optarg [ 0 ]
EXPR	325:32	325:32	10	optarg [ 0 ]
FIELD	325:32	325:40	11	optarg [ 0 ]
LEAF_NODE	325:32	325:32	12	optarg
LEAF_NODE	325:38	325:38	12	[
EXPR	325:39	325:39	12	0
FIELD	325:39	325:39	13	0
LEAF_NODE	325:39	325:39	14	0
LEAF_NODE	325:40	325:40	12	]
LEAF_NODE	325:41	325:41	9	)
STATEMENTS	326:26	335:5	9	
LEAF_NODE	326:26	326:26	10	{
STATEMENTS	327:26	334:14	10	
LEAF_NODE	327:26	327:26	11	case
LEAF_NODE	327:31	327:31	11	'l'
LEAF_NODE	327:34	327:34	11	:
LEAF_NODE	328:26	328:26	11	case
LEAF_NODE	328:31	328:31	11	'L'
LEAF_NODE	328:34	328:34	11	:
EXPR_STATEMENT	328:36	328:73	11	strcpy ( pageOrientation , "Landscape" ) ;
EXPR	328:36	328:36	12	strcpy ( pageOrientation , "Landscape" )
FUNCTION_CALL	328:36	328:72	13	strcpy ( pageOrientation , "Landscape" )
CALLEE	328:36	328:36	14	strcpy
LEAF_NODE	328:36	328:36	15	strcpy
LEAF_NODE	328:43	328:43	14	(
ARGUMENT	328:44	328:44	14	pageOrientation
FIELD	328:44	328:44	15	pageOrientation
LEAF_NODE	328:44	328:44	16	pageOrientation
LEAF_NODE	328:59	328:59	14	,
ARGUMENT	328:61	328:61	14	"Landscape"
FIELD	328:61	328:61	15	"Landscape"
LEAF_NODE	328:61	328:61	16	"Landscape"
LEAF_NODE	328:72	328:72	14	)
LEAF_NODE	328:73	328:73	12	;
JUMP_STATEMENT	329:15	329:20	11	break DESTINATION ;
KEYWORD	329:15	329:15	12	break
LEAF_NODE	329:15	329:15	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	329:20	329:20	12	;
LEAF_NODE	330:26	330:26	11	case
LEAF_NODE	330:31	330:31	11	'p'
LEAF_NODE	330:34	330:34	11	:
LEAF_NODE	331:26	331:26	11	case
LEAF_NODE	331:31	331:31	11	'P'
LEAF_NODE	331:34	331:34	11	:
EXPR_STATEMENT	331:36	331:72	11	strcpy ( pageOrientation , "Portrait" ) ;
EXPR	331:36	331:36	12	strcpy ( pageOrientation , "Portrait" )
FUNCTION_CALL	331:36	331:71	13	strcpy ( pageOrientation , "Portrait" )
CALLEE	331:36	331:36	14	strcpy
LEAF_NODE	331:36	331:36	15	strcpy
LEAF_NODE	331:43	331:43	14	(
ARGUMENT	331:44	331:44	14	pageOrientation
FIELD	331:44	331:44	15	pageOrientation
LEAF_NODE	331:44	331:44	16	pageOrientation
LEAF_NODE	331:59	331:59	14	,
ARGUMENT	331:61	331:61	14	"Portrait"
FIELD	331:61	331:61	15	"Portrait"
LEAF_NODE	331:61	331:61	16	"Portrait"
LEAF_NODE	331:71	331:71	14	)
LEAF_NODE	331:72	331:72	12	;
JUMP_STATEMENT	332:15	332:20	11	break DESTINATION ;
KEYWORD	332:15	332:15	12	break
LEAF_NODE	332:15	332:15	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	332:20	332:20	12	;
LABEL	333:26	333:33	11	default :
LEAF_NODE	333:26	333:26	12	default
LEAF_NODE	333:33	333:33	12	:
EXPR_STATEMENT	333:35	333:101	11	TIFFError ( "-P" , "Page orientation must be Landscape or Portrait" ) ;
EXPR	333:35	333:35	12	TIFFError ( "-P" , "Page orientation must be Landscape or Portrait" )
FUNCTION_CALL	333:35	333:100	13	TIFFError ( "-P" , "Page orientation must be Landscape or Portrait" )
CALLEE	333:35	333:35	14	TIFFError
LEAF_NODE	333:35	333:35	15	TIFFError
LEAF_NODE	333:45	333:45	14	(
ARGUMENT	333:46	333:46	14	"-P"
FIELD	333:46	333:46	15	"-P"
LEAF_NODE	333:46	333:46	16	"-P"
LEAF_NODE	333:50	333:50	14	,
ARGUMENT	333:52	333:52	14	"Page orientation must be Landscape or Portrait"
FIELD	333:52	333:52	15	"Page orientation must be Landscape or Portrait"
LEAF_NODE	333:52	333:52	16	"Page orientation must be Landscape or Portrait"
LEAF_NODE	333:100	333:100	14	)
LEAF_NODE	333:101	333:101	12	;
EXPR_STATEMENT	334:14	334:23	11	exit ( - 1 ) ;
EXPR	334:14	334:14	12	exit ( - 1 )
FUNCTION_CALL	334:14	334:22	13	exit ( - 1 )
CALLEE	334:14	334:14	14	exit
LEAF_NODE	334:14	334:14	15	exit
LEAF_NODE	334:19	334:19	14	(
ARGUMENT	334:20	334:20	14	- 1
UNARY_EXPR	334:20	334:21	15	- 1
UNARY_OPERATOR	334:20	334:20	16	-
LEAF_NODE	334:20	334:20	17	-
FIELD	334:21	334:21	16	1
LEAF_NODE	334:21	334:21	17	1
LEAF_NODE	334:22	334:22	14	)
LEAF_NODE	334:23	334:23	12	;
LEAF_NODE	335:5	335:5	10	}
JUMP_STATEMENT	336:3	336:8	8	break DESTINATION ;
KEYWORD	336:3	336:3	9	break
LEAF_NODE	336:3	336:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	336:8	336:8	9	;
LEAF_NODE	337:2	337:2	8	case
LEAF_NODE	337:7	337:7	8	'l'
LEAF_NODE	337:10	337:10	8	:
EXPR_STATEMENT	338:3	338:28	8	leftmargin = atof ( optarg ) ;
EXPR	338:3	338:3	9	leftmargin = atof ( optarg )
ASSIGN	338:3	338:16	10	leftmargin = atof ( optarg )
LVAL	338:3	338:3	11	leftmargin
FIELD	338:3	338:3	12	leftmargin
LEAF_NODE	338:3	338:3	13	leftmargin
ASSIGN_OP	338:14	338:14	11	=
LEAF_NODE	338:14	338:14	12	=
RVAL	338:16	338:16	11	atof ( optarg )
FUNCTION_CALL	338:16	338:27	12	atof ( optarg )
CALLEE	338:16	338:16	13	atof
LEAF_NODE	338:16	338:16	14	atof
LEAF_NODE	338:20	338:20	13	(
ARGUMENT	338:21	338:21	13	optarg
FIELD	338:21	338:21	14	optarg
LEAF_NODE	338:21	338:21	15	optarg
LEAF_NODE	338:27	338:27	13	)
LEAF_NODE	338:28	338:28	9	;
JUMP_STATEMENT	339:3	339:8	8	break DESTINATION ;
KEYWORD	339:3	339:3	9	break
LEAF_NODE	339:3	339:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	339:8	339:8	9	;
LEAF_NODE	340:2	340:2	8	case
LEAF_NODE	340:7	340:7	8	'a'
LEAF_NODE	340:10	340:10	8	:
EXPR_STATEMENT	341:3	341:18	8	printAll = TRUE ;
EXPR	341:3	341:3	9	printAll = TRUE
ASSIGN	341:3	341:14	10	printAll = TRUE
LVAL	341:3	341:3	11	printAll
FIELD	341:3	341:3	12	printAll
LEAF_NODE	341:3	341:3	13	printAll
ASSIGN_OP	341:12	341:12	11	=
LEAF_NODE	341:12	341:12	12	=
RVAL	341:14	341:14	11	TRUE
FIELD	341:14	341:14	12	TRUE
LEAF_NODE	341:14	341:14	13	TRUE
LEAF_NODE	341:18	341:18	9	;
JUMP_STATEMENT	342:3	342:8	8	break DESTINATION ;
KEYWORD	342:3	342:3	9	break
LEAF_NODE	342:3	342:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	342:8	342:8	9	;
LEAF_NODE	343:2	343:2	8	case
LEAF_NODE	343:7	343:7	8	'p'
LEAF_NODE	343:10	343:10	8	:
EXPR_STATEMENT	344:3	344:23	8	generateEPSF = FALSE ;
EXPR	344:3	344:3	9	generateEPSF = FALSE
ASSIGN	344:3	344:18	10	generateEPSF = FALSE
LVAL	344:3	344:3	11	generateEPSF
FIELD	344:3	344:3	12	generateEPSF
LEAF_NODE	344:3	344:3	13	generateEPSF
ASSIGN_OP	344:16	344:16	11	=
LEAF_NODE	344:16	344:16	12	=
RVAL	344:18	344:18	11	FALSE
FIELD	344:18	344:18	12	FALSE
LEAF_NODE	344:18	344:18	13	FALSE
LEAF_NODE	344:23	344:23	9	;
JUMP_STATEMENT	345:3	345:8	8	break DESTINATION ;
KEYWORD	345:3	345:3	9	break
LEAF_NODE	345:3	345:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	345:8	345:8	9	;
LEAF_NODE	346:2	346:2	8	case
LEAF_NODE	346:7	346:7	8	'r'
LEAF_NODE	346:10	346:10	8	:
SELECTION	347:24	348:5	8	
KEYWORD	347:24	347:24	9	if
LEAF_NODE	347:24	347:24	10	if
LEAF_NODE	347:27	347:27	9	(
CONDITION	347:28	347:28	9	strcmp ( optarg , "auto" ) == 0
EXPR	347:28	347:55	10	strcmp ( optarg , "auto" ) == 0
FUNCTION_CALL	347:28	347:50	11	strcmp ( optarg , "auto" )
CALLEE	347:28	347:28	12	strcmp
LEAF_NODE	347:28	347:28	13	strcmp
LEAF_NODE	347:35	347:35	12	(
ARGUMENT	347:36	347:36	12	optarg
FIELD	347:36	347:36	13	optarg
LEAF_NODE	347:36	347:36	14	optarg
LEAF_NODE	347:42	347:42	12	,
ARGUMENT	347:44	347:44	12	"auto"
FIELD	347:44	347:44	13	"auto"
LEAF_NODE	347:44	347:44	14	"auto"
LEAF_NODE	347:50	347:50	12	)
EQ_OPERATOR	347:52	347:52	11	==
LEAF_NODE	347:52	347:52	12	==
FIELD	347:55	347:55	11	0
LEAF_NODE	347:55	347:55	12	0
LEAF_NODE	347:56	347:56	9	)
STATEMENTS	348:5	351:26	9	
LEAF_NODE	348:5	348:5	10	{
STATEMENTS	349:26	350:26	10	
EXPR_STATEMENT	349:26	349:38	11	rotation = 0 ;
EXPR	349:26	349:26	12	rotation = 0
ASSIGN	349:26	349:37	13	rotation = 0
LVAL	349:26	349:26	14	rotation
FIELD	349:26	349:26	15	rotation
LEAF_NODE	349:26	349:26	16	rotation
ASSIGN_OP	349:35	349:35	14	=
LEAF_NODE	349:35	349:35	15	=
RVAL	349:37	349:37	14	0
FIELD	349:37	349:37	15	0
LEAF_NODE	349:37	349:37	16	0
LEAF_NODE	349:38	349:38	12	;
EXPR_STATEMENT	350:26	350:44	11	auto_rotate = TRUE ;
EXPR	350:26	350:26	12	auto_rotate = TRUE
ASSIGN	350:26	350:40	13	auto_rotate = TRUE
LVAL	350:26	350:26	14	auto_rotate
FIELD	350:26	350:26	15	auto_rotate
LEAF_NODE	350:26	350:26	16	auto_rotate
ASSIGN_OP	350:38	350:38	14	=
LEAF_NODE	350:38	350:38	15	=
RVAL	350:40	350:40	14	TRUE
FIELD	350:40	350:40	15	TRUE
LEAF_NODE	350:40	350:40	16	TRUE
LEAF_NODE	350:44	350:44	12	;
LEAF_NODE	351:26	351:26	10	}
SELECTION	352:24	353:5	8	
KEYWORD	352:24	352:24	9	else
LEAF_NODE	352:24	352:24	10	else
STATEMENTS	353:5	356:5	9	
LEAF_NODE	353:5	353:5	10	{
STATEMENTS	354:6	355:26	10	
EXPR_STATEMENT	354:6	354:29	11	rotation = atoi ( optarg ) ;
EXPR	354:6	354:6	12	rotation = atoi ( optarg )
ASSIGN	354:6	354:17	13	rotation = atoi ( optarg )
LVAL	354:6	354:6	14	rotation
FIELD	354:6	354:6	15	rotation
LEAF_NODE	354:6	354:6	16	rotation
ASSIGN_OP	354:15	354:15	14	=
LEAF_NODE	354:15	354:15	15	=
RVAL	354:17	354:17	14	atoi ( optarg )
FUNCTION_CALL	354:17	354:28	15	atoi ( optarg )
CALLEE	354:17	354:17	16	atoi
LEAF_NODE	354:17	354:17	17	atoi
LEAF_NODE	354:21	354:21	16	(
ARGUMENT	354:22	354:22	16	optarg
FIELD	354:22	354:22	17	optarg
LEAF_NODE	354:22	354:22	18	optarg
LEAF_NODE	354:28	354:28	16	)
LEAF_NODE	354:29	354:29	12	;
EXPR_STATEMENT	355:26	355:45	11	auto_rotate = FALSE ;
EXPR	355:26	355:26	12	auto_rotate = FALSE
ASSIGN	355:26	355:40	13	auto_rotate = FALSE
LVAL	355:26	355:26	14	auto_rotate
FIELD	355:26	355:26	15	auto_rotate
LEAF_NODE	355:26	355:26	16	auto_rotate
ASSIGN_OP	355:38	355:38	14	=
LEAF_NODE	355:38	355:38	15	=
RVAL	355:40	355:40	14	FALSE
FIELD	355:40	355:40	15	FALSE
LEAF_NODE	355:40	355:40	16	FALSE
LEAF_NODE	355:45	355:45	12	;
LEAF_NODE	356:5	356:5	10	}
SELECTION	357:24	358:26	8	
KEYWORD	357:24	357:24	9	switch
LEAF_NODE	357:24	357:24	10	switch
LEAF_NODE	357:31	357:31	9	(
CONDITION	357:32	357:32	9	rotation
EXPR	357:32	357:32	10	rotation
FIELD	357:32	357:32	11	rotation
LEAF_NODE	357:32	357:32	12	rotation
LEAF_NODE	357:40	357:40	9	)
STATEMENTS	358:26	367:5	9	
LEAF_NODE	358:26	358:26	10	{
STATEMENTS	359:5	366:7	10	
LABEL	359:5	359:13	11	case 0 :
LEAF_NODE	359:5	359:5	12	case
LEAF_NODE	359:12	359:12	12	0
LEAF_NODE	359:13	359:13	12	:
LABEL	360:26	360:34	11	case 90 :
LEAF_NODE	360:26	360:26	12	case
LEAF_NODE	360:32	360:32	12	90
LEAF_NODE	360:34	360:34	12	:
LABEL	361:26	361:34	11	case 180 :
LEAF_NODE	361:26	361:26	12	case
LEAF_NODE	361:31	361:31	12	180
LEAF_NODE	361:34	361:34	12	:
LABEL	362:26	362:34	11	case 270 :
LEAF_NODE	362:26	362:26	12	case
LEAF_NODE	362:31	362:31	12	270
LEAF_NODE	362:34	362:34	12	:
JUMP_STATEMENT	363:7	363:12	11	break DESTINATION ;
KEYWORD	363:7	363:7	12	break
LEAF_NODE	363:7	363:7	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	363:12	363:12	12	;
LABEL	364:5	364:12	11	default :
LEAF_NODE	364:5	364:5	12	default
LEAF_NODE	364:12	364:12	12	:
EXPR_STATEMENT	365:28	365:107	11	fprintf ( stderr , "Rotation angle must be 90, 180, 270 (degrees ccw) or auto\n" ) ;
EXPR	365:28	365:28	12	fprintf ( stderr , "Rotation angle must be 90, 180, 270 (degrees ccw) or auto\n" )
FUNCTION_CALL	365:28	365:106	13	fprintf ( stderr , "Rotation angle must be 90, 180, 270 (degrees ccw) or auto\n" )
CALLEE	365:28	365:28	14	fprintf
LEAF_NODE	365:28	365:28	15	fprintf
LEAF_NODE	365:36	365:36	14	(
ARGUMENT	365:37	365:37	14	stderr
FIELD	365:37	365:37	15	stderr
LEAF_NODE	365:37	365:37	16	stderr
LEAF_NODE	365:43	365:43	14	,
ARGUMENT	365:45	365:45	14	"Rotation angle must be 90, 180, 270 (degrees ccw) or auto\n"
FIELD	365:45	365:45	15	"Rotation angle must be 90, 180, 270 (degrees ccw) or auto\n"
LEAF_NODE	365:45	365:45	16	"Rotation angle must be 90, 180, 270 (degrees ccw) or auto\n"
LEAF_NODE	365:106	365:106	14	)
LEAF_NODE	365:107	365:107	12	;
EXPR_STATEMENT	366:7	366:16	11	exit ( - 1 ) ;
EXPR	366:7	366:7	12	exit ( - 1 )
FUNCTION_CALL	366:7	366:15	13	exit ( - 1 )
CALLEE	366:7	366:7	14	exit
LEAF_NODE	366:7	366:7	15	exit
LEAF_NODE	366:12	366:12	14	(
ARGUMENT	366:13	366:13	14	- 1
UNARY_EXPR	366:13	366:14	15	- 1
UNARY_OPERATOR	366:13	366:13	16	-
LEAF_NODE	366:13	366:13	17	-
FIELD	366:14	366:14	16	1
LEAF_NODE	366:14	366:14	17	1
LEAF_NODE	366:15	366:15	14	)
LEAF_NODE	366:16	366:16	12	;
LEAF_NODE	367:5	367:5	10	}
JUMP_STATEMENT	368:3	368:8	8	break DESTINATION ;
KEYWORD	368:3	368:3	9	break
LEAF_NODE	368:3	368:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	368:8	368:8	9	;
LEAF_NODE	369:2	369:2	8	case
LEAF_NODE	369:7	369:7	8	's'
LEAF_NODE	369:10	369:10	8	:
EXPR_STATEMENT	370:3	370:19	8	printAll = FALSE ;
EXPR	370:3	370:3	9	printAll = FALSE
ASSIGN	370:3	370:14	10	printAll = FALSE
LVAL	370:3	370:3	11	printAll
FIELD	370:3	370:3	12	printAll
LEAF_NODE	370:3	370:3	13	printAll
ASSIGN_OP	370:12	370:12	11	=
LEAF_NODE	370:12	370:12	12	=
RVAL	370:14	370:14	11	FALSE
FIELD	370:14	370:14	12	FALSE
LEAF_NODE	370:14	370:14	13	FALSE
LEAF_NODE	370:19	370:19	9	;
JUMP_STATEMENT	371:3	371:8	8	break DESTINATION ;
KEYWORD	371:3	371:3	9	break
LEAF_NODE	371:3	371:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	371:8	371:8	9	;
LEAF_NODE	372:16	372:16	8	case
LEAF_NODE	372:21	372:21	8	't'
LEAF_NODE	372:24	372:24	8	:
EXPR_STATEMENT	373:24	373:38	8	title = optarg ;
EXPR	373:24	373:24	9	title = optarg
ASSIGN	373:24	373:32	10	title = optarg
LVAL	373:24	373:24	11	title
FIELD	373:24	373:24	12	title
LEAF_NODE	373:24	373:24	13	title
ASSIGN_OP	373:30	373:30	11	=
LEAF_NODE	373:30	373:30	12	=
RVAL	373:32	373:32	11	optarg
FIELD	373:32	373:32	12	optarg
LEAF_NODE	373:32	373:32	13	optarg
LEAF_NODE	373:38	373:38	9	;
JUMP_STATEMENT	374:24	374:29	8	break DESTINATION ;
KEYWORD	374:24	374:24	9	break
LEAF_NODE	374:24	374:24	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	374:29	374:29	9	;
LEAF_NODE	375:2	375:2	8	case
LEAF_NODE	375:7	375:7	8	'w'
LEAF_NODE	375:10	375:10	8	:
EXPR_STATEMENT	376:3	376:27	8	pageWidth = atof ( optarg ) ;
EXPR	376:3	376:3	9	pageWidth = atof ( optarg )
ASSIGN	376:3	376:15	10	pageWidth = atof ( optarg )
LVAL	376:3	376:3	11	pageWidth
FIELD	376:3	376:3	12	pageWidth
LEAF_NODE	376:3	376:3	13	pageWidth
ASSIGN_OP	376:13	376:13	11	=
LEAF_NODE	376:13	376:13	12	=
RVAL	376:15	376:15	11	atof ( optarg )
FUNCTION_CALL	376:15	376:26	12	atof ( optarg )
CALLEE	376:15	376:15	13	atof
LEAF_NODE	376:15	376:15	14	atof
LEAF_NODE	376:19	376:19	13	(
ARGUMENT	376:20	376:20	13	optarg
FIELD	376:20	376:20	14	optarg
LEAF_NODE	376:20	376:20	15	optarg
LEAF_NODE	376:26	376:26	13	)
LEAF_NODE	376:27	376:27	9	;
JUMP_STATEMENT	377:3	377:8	8	break DESTINATION ;
KEYWORD	377:3	377:3	9	break
LEAF_NODE	377:3	377:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	377:8	377:8	9	;
LEAF_NODE	378:2	378:2	8	case
LEAF_NODE	378:7	378:7	8	'z'
LEAF_NODE	378:10	378:10	8	:
EXPR_STATEMENT	379:3	379:26	8	PSavoiddeadzone = FALSE ;
EXPR	379:3	379:3	9	PSavoiddeadzone = FALSE
ASSIGN	379:3	379:21	10	PSavoiddeadzone = FALSE
LVAL	379:3	379:3	11	PSavoiddeadzone
FIELD	379:3	379:3	12	PSavoiddeadzone
LEAF_NODE	379:3	379:3	13	PSavoiddeadzone
ASSIGN_OP	379:19	379:19	11	=
LEAF_NODE	379:19	379:19	12	=
RVAL	379:21	379:21	11	FALSE
FIELD	379:21	379:21	12	FALSE
LEAF_NODE	379:21	379:21	13	FALSE
LEAF_NODE	379:26	379:26	9	;
JUMP_STATEMENT	380:3	380:8	8	break DESTINATION ;
KEYWORD	380:3	380:3	9	break
LEAF_NODE	380:3	380:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	380:8	380:8	9	;
LEAF_NODE	381:2	381:2	8	case
LEAF_NODE	381:7	381:7	8	'1'
LEAF_NODE	381:10	381:10	8	:
EXPR_STATEMENT	382:3	382:17	8	level2 = FALSE ;
EXPR	382:3	382:3	9	level2 = FALSE
ASSIGN	382:3	382:12	10	level2 = FALSE
LVAL	382:3	382:3	11	level2
FIELD	382:3	382:3	12	level2
LEAF_NODE	382:3	382:3	13	level2
ASSIGN_OP	382:10	382:10	11	=
LEAF_NODE	382:10	382:10	12	=
RVAL	382:12	382:12	11	FALSE
FIELD	382:12	382:12	12	FALSE
LEAF_NODE	382:12	382:12	13	FALSE
LEAF_NODE	382:17	382:17	9	;
EXPR_STATEMENT	383:3	383:17	8	level3 = FALSE ;
EXPR	383:3	383:3	9	level3 = FALSE
ASSIGN	383:3	383:12	10	level3 = FALSE
LVAL	383:3	383:3	11	level3
FIELD	383:3	383:3	12	level3
LEAF_NODE	383:3	383:3	13	level3
ASSIGN_OP	383:10	383:10	11	=
LEAF_NODE	383:10	383:10	12	=
RVAL	383:12	383:12	11	FALSE
FIELD	383:12	383:12	12	FALSE
LEAF_NODE	383:12	383:12	13	FALSE
LEAF_NODE	383:17	383:17	9	;
EXPR_STATEMENT	384:3	384:18	8	ascii85 = FALSE ;
EXPR	384:3	384:3	9	ascii85 = FALSE
ASSIGN	384:3	384:13	10	ascii85 = FALSE
LVAL	384:3	384:3	11	ascii85
FIELD	384:3	384:3	12	ascii85
LEAF_NODE	384:3	384:3	13	ascii85
ASSIGN_OP	384:11	384:11	11	=
LEAF_NODE	384:11	384:11	12	=
RVAL	384:13	384:13	11	FALSE
FIELD	384:13	384:13	12	FALSE
LEAF_NODE	384:13	384:13	13	FALSE
LEAF_NODE	384:18	384:18	9	;
JUMP_STATEMENT	385:3	385:8	8	break DESTINATION ;
KEYWORD	385:3	385:3	9	break
LEAF_NODE	385:3	385:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	385:8	385:8	9	;
LEAF_NODE	386:2	386:2	8	case
LEAF_NODE	386:7	386:7	8	'2'
LEAF_NODE	386:10	386:10	8	:
EXPR_STATEMENT	387:3	387:16	8	level2 = TRUE ;
EXPR	387:3	387:3	9	level2 = TRUE
ASSIGN	387:3	387:12	10	level2 = TRUE
LVAL	387:3	387:3	11	level2
FIELD	387:3	387:3	12	level2
LEAF_NODE	387:3	387:3	13	level2
ASSIGN_OP	387:10	387:10	11	=
LEAF_NODE	387:10	387:10	12	=
RVAL	387:12	387:12	11	TRUE
FIELD	387:12	387:12	12	TRUE
LEAF_NODE	387:12	387:12	13	TRUE
LEAF_NODE	387:16	387:16	9	;
EXPR_STATEMENT	388:3	388:17	8	ascii85 = TRUE ;
EXPR	388:3	388:3	9	ascii85 = TRUE
ASSIGN	388:3	388:13	10	ascii85 = TRUE
LVAL	388:3	388:3	11	ascii85
FIELD	388:3	388:3	12	ascii85
LEAF_NODE	388:3	388:3	13	ascii85
ASSIGN_OP	388:11	388:11	11	=
LEAF_NODE	388:11	388:11	12	=
RVAL	388:13	388:13	11	TRUE
FIELD	388:13	388:13	12	TRUE
LEAF_NODE	388:13	388:13	13	TRUE
LEAF_NODE	388:17	388:17	9	;
JUMP_STATEMENT	389:3	389:8	8	break DESTINATION ;
KEYWORD	389:3	389:3	9	break
LEAF_NODE	389:3	389:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	389:8	389:8	9	;
LEAF_NODE	390:2	390:2	8	case
LEAF_NODE	390:7	390:7	8	'3'
LEAF_NODE	390:10	390:10	8	:
EXPR_STATEMENT	391:3	391:16	8	level3 = TRUE ;
EXPR	391:3	391:3	9	level3 = TRUE
ASSIGN	391:3	391:12	10	level3 = TRUE
LVAL	391:3	391:3	11	level3
FIELD	391:3	391:3	12	level3
LEAF_NODE	391:3	391:3	13	level3
ASSIGN_OP	391:10	391:10	11	=
LEAF_NODE	391:10	391:10	12	=
RVAL	391:12	391:12	11	TRUE
FIELD	391:12	391:12	12	TRUE
LEAF_NODE	391:12	391:12	13	TRUE
LEAF_NODE	391:16	391:16	9	;
EXPR_STATEMENT	392:3	392:17	8	ascii85 = TRUE ;
EXPR	392:3	392:3	9	ascii85 = TRUE
ASSIGN	392:3	392:13	10	ascii85 = TRUE
LVAL	392:3	392:3	11	ascii85
FIELD	392:3	392:3	12	ascii85
LEAF_NODE	392:3	392:3	13	ascii85
ASSIGN_OP	392:11	392:11	11	=
LEAF_NODE	392:11	392:11	12	=
RVAL	392:13	392:13	11	TRUE
FIELD	392:13	392:13	12	TRUE
LEAF_NODE	392:13	392:13	13	TRUE
LEAF_NODE	392:17	392:17	9	;
JUMP_STATEMENT	393:3	393:8	8	break DESTINATION ;
KEYWORD	393:3	393:3	9	break
LEAF_NODE	393:3	393:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	393:8	393:8	9	;
LEAF_NODE	394:2	394:2	8	case
LEAF_NODE	394:7	394:7	8	'8'
LEAF_NODE	394:10	394:10	8	:
EXPR_STATEMENT	395:3	395:18	8	ascii85 = FALSE ;
EXPR	395:3	395:3	9	ascii85 = FALSE
ASSIGN	395:3	395:13	10	ascii85 = FALSE
LVAL	395:3	395:3	11	ascii85
FIELD	395:3	395:3	12	ascii85
LEAF_NODE	395:3	395:3	13	ascii85
ASSIGN_OP	395:11	395:11	11	=
LEAF_NODE	395:11	395:11	12	=
RVAL	395:13	395:13	11	FALSE
FIELD	395:13	395:13	12	FALSE
LEAF_NODE	395:13	395:13	13	FALSE
LEAF_NODE	395:18	395:18	9	;
JUMP_STATEMENT	396:3	396:8	8	break DESTINATION ;
KEYWORD	396:3	396:3	9	break
LEAF_NODE	396:3	396:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	396:8	396:8	9	;
LEAF_NODE	397:2	397:2	8	case
LEAF_NODE	397:7	397:7	8	'x'
LEAF_NODE	397:10	397:10	8	:
EXPR_STATEMENT	398:3	398:32	8	res_unit = RESUNIT_CENTIMETER ;
EXPR	398:3	398:3	9	res_unit = RESUNIT_CENTIMETER
ASSIGN	398:3	398:14	10	res_unit = RESUNIT_CENTIMETER
LVAL	398:3	398:3	11	res_unit
FIELD	398:3	398:3	12	res_unit
LEAF_NODE	398:3	398:3	13	res_unit
ASSIGN_OP	398:12	398:12	11	=
LEAF_NODE	398:12	398:12	12	=
RVAL	398:14	398:14	11	RESUNIT_CENTIMETER
FIELD	398:14	398:14	12	RESUNIT_CENTIMETER
LEAF_NODE	398:14	398:14	13	RESUNIT_CENTIMETER
LEAF_NODE	398:32	398:32	9	;
JUMP_STATEMENT	399:3	399:8	8	break DESTINATION ;
KEYWORD	399:3	399:3	9	break
LEAF_NODE	399:3	399:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	399:8	399:8	9	;
LEAF_NODE	400:2	400:2	8	case
LEAF_NODE	400:7	400:7	8	'y'
LEAF_NODE	400:10	400:10	8	:
EXPR_STATEMENT	401:3	401:26	8	res_unit = RESUNIT_INCH ;
EXPR	401:3	401:3	9	res_unit = RESUNIT_INCH
ASSIGN	401:3	401:14	10	res_unit = RESUNIT_INCH
LVAL	401:3	401:3	11	res_unit
FIELD	401:3	401:3	12	res_unit
LEAF_NODE	401:3	401:3	13	res_unit
ASSIGN_OP	401:12	401:12	11	=
LEAF_NODE	401:12	401:12	12	=
RVAL	401:14	401:14	11	RESUNIT_INCH
FIELD	401:14	401:14	12	RESUNIT_INCH
LEAF_NODE	401:14	401:14	13	RESUNIT_INCH
LEAF_NODE	401:26	401:26	9	;
JUMP_STATEMENT	402:3	402:8	8	break DESTINATION ;
KEYWORD	402:3	402:3	9	break
LEAF_NODE	402:3	402:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	402:8	402:8	9	;
LEAF_NODE	403:2	403:2	8	case
LEAF_NODE	403:7	403:7	8	'?'
LEAF_NODE	403:10	403:10	8	:
EXPR_STATEMENT	404:3	404:12	8	usage ( - 1 ) ;
EXPR	404:3	404:3	9	usage ( - 1 )
FUNCTION_CALL	404:3	404:11	10	usage ( - 1 )
CALLEE	404:3	404:3	11	usage
LEAF_NODE	404:3	404:3	12	usage
LEAF_NODE	404:8	404:8	11	(
ARGUMENT	404:9	404:9	11	- 1
UNARY_EXPR	404:9	404:10	12	- 1
UNARY_OPERATOR	404:9	404:9	13	-
LEAF_NODE	404:9	404:9	14	-
FIELD	404:10	404:10	13	1
LEAF_NODE	404:10	404:10	14	1
LEAF_NODE	404:11	404:11	11	)
LEAF_NODE	404:12	404:12	9	;
LEAF_NODE	405:2	405:2	7	}
SELECTION	407:8	408:10	3	
KEYWORD	407:8	407:8	4	if
LEAF_NODE	407:8	407:8	5	if
LEAF_NODE	407:11	407:11	4	(
CONDITION	407:12	407:12	4	useImagemask == TRUE
EXPR	407:12	407:28	5	useImagemask == TRUE
FIELD	407:12	407:12	6	useImagemask
LEAF_NODE	407:12	407:12	7	useImagemask
EQ_OPERATOR	407:25	407:25	6	==
LEAF_NODE	407:25	407:25	7	==
FIELD	407:28	407:28	6	TRUE
LEAF_NODE	407:28	407:28	7	TRUE
LEAF_NODE	407:32	407:32	4	)
STATEMENTS	408:10	414:10	4	
LEAF_NODE	408:10	408:10	5	{
STATEMENTS	409:3	409:3	5	
SELECTION	409:3	410:12	6	
KEYWORD	409:3	409:3	7	if
LEAF_NODE	409:3	409:3	8	if
LEAF_NODE	409:6	409:6	7	(
CONDITION	409:7	409:7	7	( level2 == FALSE ) && ( level3 == FALSE )
EXPR	409:7	409:7	8	( level2 == FALSE ) && ( level3 == FALSE )
AND	409:7	409:28	9	( level2 == FALSE ) && ( level3 == FALSE )
EXPR	409:7	409:23	10	( level2 == FALSE )
LEAF_NODE	409:7	409:7	11	(
FIELD	409:8	409:8	11	level2
LEAF_NODE	409:8	409:8	12	level2
EQ_OPERATOR	409:15	409:15	11	==
LEAF_NODE	409:15	409:15	12	==
FIELD	409:18	409:18	11	FALSE
LEAF_NODE	409:18	409:18	12	FALSE
LEAF_NODE	409:23	409:23	11	)
LEAF_NODE	409:25	409:25	10	&&
EXPR	409:28	409:44	10	( level3 == FALSE )
LEAF_NODE	409:28	409:28	11	(
FIELD	409:29	409:29	11	level3
LEAF_NODE	409:29	409:29	12	level3
EQ_OPERATOR	409:36	409:36	11	==
LEAF_NODE	409:36	409:36	12	==
FIELD	409:39	409:39	11	FALSE
LEAF_NODE	409:39	409:39	12	FALSE
LEAF_NODE	409:44	409:44	11	)
LEAF_NODE	409:45	409:45	7	)
STATEMENTS	410:12	413:12	7	
LEAF_NODE	410:12	410:12	8	{
STATEMENTS	411:5	412:5	8	
EXPR_STATEMENT	411:5	411:80	9	TIFFError ( "-m " , " imagemask operator requres Postscript Level2 or Level3" ) ;
EXPR	411:5	411:5	10	TIFFError ( "-m " , " imagemask operator requres Postscript Level2 or Level3" )
FUNCTION_CALL	411:5	411:79	11	TIFFError ( "-m " , " imagemask operator requres Postscript Level2 or Level3" )
CALLEE	411:5	411:5	12	TIFFError
LEAF_NODE	411:5	411:5	13	TIFFError
LEAF_NODE	411:15	411:15	12	(
ARGUMENT	411:16	411:16	12	"-m "
FIELD	411:16	411:16	13	"-m "
LEAF_NODE	411:16	411:16	14	"-m "
LEAF_NODE	411:21	411:21	12	,
ARGUMENT	411:22	411:22	12	" imagemask operator requres Postscript Level2 or Level3"
FIELD	411:22	411:22	13	" imagemask operator requres Postscript Level2 or Level3"
LEAF_NODE	411:22	411:22	14	" imagemask operator requres Postscript Level2 or Level3"
LEAF_NODE	411:79	411:79	12	)
LEAF_NODE	411:80	411:80	10	;
EXPR_STATEMENT	412:5	412:13	9	exit ( 1 ) ;
EXPR	412:5	412:5	10	exit ( 1 )
FUNCTION_CALL	412:5	412:12	11	exit ( 1 )
CALLEE	412:5	412:5	12	exit
LEAF_NODE	412:5	412:5	13	exit
LEAF_NODE	412:10	412:10	12	(
ARGUMENT	412:11	412:11	12	1
FIELD	412:11	412:11	13	1
LEAF_NODE	412:11	412:11	14	1
LEAF_NODE	412:12	412:12	12	)
LEAF_NODE	412:13	412:13	10	;
LEAF_NODE	413:12	413:12	8	}
LEAF_NODE	414:10	414:10	5	}
SELECTION	416:8	417:3	3	
KEYWORD	416:8	416:8	4	if
LEAF_NODE	416:8	416:8	5	if
LEAF_NODE	416:11	416:11	4	(
CONDITION	416:12	416:12	4	pageWidth && ( maxPageWidth > pageWidth )
EXPR	416:12	416:12	5	pageWidth && ( maxPageWidth > pageWidth )
AND	416:12	416:25	6	pageWidth && ( maxPageWidth > pageWidth )
EXPR	416:12	416:12	7	pageWidth
FIELD	416:12	416:12	8	pageWidth
LEAF_NODE	416:12	416:12	9	pageWidth
LEAF_NODE	416:22	416:22	7	&&
EXPR	416:25	416:50	7	( maxPageWidth > pageWidth )
LEAF_NODE	416:25	416:25	8	(
FIELD	416:26	416:26	8	maxPageWidth
LEAF_NODE	416:26	416:26	9	maxPageWidth
REL_OPERATOR	416:39	416:39	8	>
LEAF_NODE	416:39	416:39	9	>
FIELD	416:41	416:41	8	pageWidth
LEAF_NODE	416:41	416:41	9	pageWidth
LEAF_NODE	416:50	416:50	8	)
LEAF_NODE	416:51	416:51	4	)
STATEMENTS	417:3	420:10	4	
LEAF_NODE	417:3	417:3	5	{
STATEMENTS	418:3	419:3	5	
EXPR_STATEMENT	418:3	418:66	6	TIFFError ( "-W" , "Max viewport width cannot exceed page width" ) ;
EXPR	418:3	418:3	7	TIFFError ( "-W" , "Max viewport width cannot exceed page width" )
FUNCTION_CALL	418:3	418:65	8	TIFFError ( "-W" , "Max viewport width cannot exceed page width" )
CALLEE	418:3	418:3	9	TIFFError
LEAF_NODE	418:3	418:3	10	TIFFError
LEAF_NODE	418:13	418:13	9	(
ARGUMENT	418:14	418:14	9	"-W"
FIELD	418:14	418:14	10	"-W"
LEAF_NODE	418:14	418:14	11	"-W"
LEAF_NODE	418:18	418:18	9	,
ARGUMENT	418:20	418:20	9	"Max viewport width cannot exceed page width"
FIELD	418:20	418:20	10	"Max viewport width cannot exceed page width"
LEAF_NODE	418:20	418:20	11	"Max viewport width cannot exceed page width"
LEAF_NODE	418:65	418:65	9	)
LEAF_NODE	418:66	418:66	7	;
EXPR_STATEMENT	419:3	419:11	6	exit ( 1 ) ;
EXPR	419:3	419:3	7	exit ( 1 )
FUNCTION_CALL	419:3	419:10	8	exit ( 1 )
CALLEE	419:3	419:3	9	exit
LEAF_NODE	419:3	419:3	10	exit
LEAF_NODE	419:8	419:8	9	(
ARGUMENT	419:9	419:9	9	1
FIELD	419:9	419:9	10	1
LEAF_NODE	419:9	419:9	11	1
LEAF_NODE	419:10	419:10	9	)
LEAF_NODE	419:11	419:11	7	;
LEAF_NODE	420:10	420:10	5	}
SELECTION	423:8	424:10	3	
KEYWORD	423:8	423:8	4	if
LEAF_NODE	423:8	423:8	5	if
LEAF_NODE	423:11	423:11	4	(
CONDITION	423:12	423:12	4	auto_rotate == TRUE
EXPR	423:12	423:27	5	auto_rotate == TRUE
FIELD	423:12	423:12	6	auto_rotate
LEAF_NODE	423:12	423:12	7	auto_rotate
EQ_OPERATOR	423:24	423:24	6	==
LEAF_NODE	423:24	423:24	7	==
FIELD	423:27	423:27	6	TRUE
LEAF_NODE	423:27	423:27	7	TRUE
LEAF_NODE	423:31	423:31	4	)
STATEMENTS	424:10	434:10	4	
LEAF_NODE	424:10	424:10	5	{
STATEMENTS	429:10	429:10	5	
SELECTION	429:10	430:12	6	
KEYWORD	429:10	429:10	7	if
LEAF_NODE	429:10	429:10	8	if
LEAF_NODE	429:13	429:13	7	(
CONDITION	429:14	429:14	7	( maxPageWidth > 0 ) || ( maxPageHeight > 0 )
EXPR	429:14	429:14	8	( maxPageWidth > 0 ) || ( maxPageHeight > 0 )
OR	429:14	429:36	9	( maxPageWidth > 0 ) || ( maxPageHeight > 0 )
EXPR	429:14	429:31	10	( maxPageWidth > 0 )
LEAF_NODE	429:14	429:14	11	(
FIELD	429:15	429:15	11	maxPageWidth
LEAF_NODE	429:15	429:15	12	maxPageWidth
REL_OPERATOR	429:28	429:28	11	>
LEAF_NODE	429:28	429:28	12	>
FIELD	429:30	429:30	11	0
LEAF_NODE	429:30	429:30	12	0
LEAF_NODE	429:31	429:31	11	)
LEAF_NODE	429:33	429:33	10	||
EXPR	429:36	429:54	10	( maxPageHeight > 0 )
LEAF_NODE	429:36	429:36	11	(
FIELD	429:37	429:37	11	maxPageHeight
LEAF_NODE	429:37	429:37	12	maxPageHeight
REL_OPERATOR	429:51	429:51	11	>
LEAF_NODE	429:51	429:51	12	>
FIELD	429:53	429:53	11	0
LEAF_NODE	429:53	429:53	12	0
LEAF_NODE	429:54	429:54	11	)
LEAF_NODE	429:55	429:55	7	)
STATEMENTS	430:12	433:12	7	
LEAF_NODE	430:12	430:12	8	{
STATEMENTS	431:5	432:12	8	
EXPR_STATEMENT	431:5	431:99	9	TIFFError ( "-r auto" , " is incompatible with maximum page width/height specified by -H or -W" ) ;
EXPR	431:5	431:5	10	TIFFError ( "-r auto" , " is incompatible with maximum page width/height specified by -H or -W" )
FUNCTION_CALL	431:5	431:98	11	TIFFError ( "-r auto" , " is incompatible with maximum page width/height specified by -H or -W" )
CALLEE	431:5	431:5	12	TIFFError
LEAF_NODE	431:5	431:5	13	TIFFError
LEAF_NODE	431:15	431:15	12	(
ARGUMENT	431:16	431:16	12	"-r auto"
FIELD	431:16	431:16	13	"-r auto"
LEAF_NODE	431:16	431:16	14	"-r auto"
LEAF_NODE	431:25	431:25	12	,
ARGUMENT	431:27	431:27	12	" is incompatible with maximum page width/height specified by -H or -W"
FIELD	431:27	431:27	13	" is incompatible with maximum page width/height specified by -H or -W"
LEAF_NODE	431:27	431:27	14	" is incompatible with maximum page width/height specified by -H or -W"
LEAF_NODE	431:98	431:98	12	)
LEAF_NODE	431:99	431:99	10	;
EXPR_STATEMENT	432:12	432:20	9	exit ( 1 ) ;
EXPR	432:12	432:12	10	exit ( 1 )
FUNCTION_CALL	432:12	432:19	11	exit ( 1 )
CALLEE	432:12	432:12	12	exit
LEAF_NODE	432:12	432:12	13	exit
LEAF_NODE	432:17	432:17	12	(
ARGUMENT	432:18	432:18	12	1
FIELD	432:18	432:18	13	1
LEAF_NODE	432:18	432:18	14	1
LEAF_NODE	432:19	432:19	12	)
LEAF_NODE	432:20	432:20	10	;
LEAF_NODE	433:12	433:12	8	}
LEAF_NODE	434:10	434:10	5	}
SELECTION	435:8	436:12	3	
KEYWORD	435:8	435:8	4	if
LEAF_NODE	435:8	435:8	5	if
LEAF_NODE	435:11	435:11	4	(
CONDITION	435:12	435:12	4	( maxPageWidth > 0 ) && ( maxPageHeight > 0 )
EXPR	435:12	435:12	5	( maxPageWidth > 0 ) && ( maxPageHeight > 0 )
AND	435:12	435:34	6	( maxPageWidth > 0 ) && ( maxPageHeight > 0 )
EXPR	435:12	435:29	7	( maxPageWidth > 0 )
LEAF_NODE	435:12	435:12	8	(
FIELD	435:13	435:13	8	maxPageWidth
LEAF_NODE	435:13	435:13	9	maxPageWidth
REL_OPERATOR	435:26	435:26	8	>
LEAF_NODE	435:26	435:26	9	>
FIELD	435:28	435:28	8	0
LEAF_NODE	435:28	435:28	9	0
LEAF_NODE	435:29	435:29	8	)
LEAF_NODE	435:31	435:31	7	&&
EXPR	435:34	435:52	7	( maxPageHeight > 0 )
LEAF_NODE	435:34	435:34	8	(
FIELD	435:35	435:35	8	maxPageHeight
LEAF_NODE	435:35	435:35	9	maxPageHeight
REL_OPERATOR	435:49	435:49	8	>
LEAF_NODE	435:49	435:49	9	>
FIELD	435:51	435:51	8	0
LEAF_NODE	435:51	435:51	9	0
LEAF_NODE	435:52	435:52	8	)
LEAF_NODE	435:53	435:53	4	)
STATEMENTS	436:12	439:12	4	
LEAF_NODE	436:12	436:12	5	{
STATEMENTS	437:5	438:12	5	
EXPR_STATEMENT	437:5	437:78	6	TIFFError ( "-H and -W" , " Use only one of -H or -W to define a viewport" ) ;
EXPR	437:5	437:5	7	TIFFError ( "-H and -W" , " Use only one of -H or -W to define a viewport" )
FUNCTION_CALL	437:5	437:77	8	TIFFError ( "-H and -W" , " Use only one of -H or -W to define a viewport" )
CALLEE	437:5	437:5	9	TIFFError
LEAF_NODE	437:5	437:5	10	TIFFError
LEAF_NODE	437:15	437:15	9	(
ARGUMENT	437:16	437:16	9	"-H and -W"
FIELD	437:16	437:16	10	"-H and -W"
LEAF_NODE	437:16	437:16	11	"-H and -W"
LEAF_NODE	437:27	437:27	9	,
ARGUMENT	437:29	437:29	9	" Use only one of -H or -W to define a viewport"
FIELD	437:29	437:29	10	" Use only one of -H or -W to define a viewport"
LEAF_NODE	437:29	437:29	11	" Use only one of -H or -W to define a viewport"
LEAF_NODE	437:77	437:77	9	)
LEAF_NODE	437:78	437:78	7	;
EXPR_STATEMENT	438:12	438:20	6	exit ( 1 ) ;
EXPR	438:12	438:12	7	exit ( 1 )
FUNCTION_CALL	438:12	438:19	8	exit ( 1 )
CALLEE	438:12	438:12	9	exit
LEAF_NODE	438:12	438:12	10	exit
LEAF_NODE	438:17	438:17	9	(
ARGUMENT	438:18	438:18	9	1
FIELD	438:18	438:18	10	1
LEAF_NODE	438:18	438:18	11	1
LEAF_NODE	438:19	438:19	9	)
LEAF_NODE	438:20	438:20	7	;
LEAF_NODE	439:12	439:12	5	}
SELECTION	441:8	442:10	3	
KEYWORD	441:8	441:8	4	if
LEAF_NODE	441:8	441:8	5	if
LEAF_NODE	441:11	441:11	4	(
CONDITION	441:12	441:12	4	( generateEPSF == TRUE ) && ( printAll == TRUE )
EXPR	441:12	441:12	5	( generateEPSF == TRUE ) && ( printAll == TRUE )
AND	441:12	441:38	6	( generateEPSF == TRUE ) && ( printAll == TRUE )
EXPR	441:12	441:33	7	( generateEPSF == TRUE )
LEAF_NODE	441:12	441:12	8	(
FIELD	441:13	441:13	8	generateEPSF
LEAF_NODE	441:13	441:13	9	generateEPSF
EQ_OPERATOR	441:26	441:26	8	==
LEAF_NODE	441:26	441:26	9	==
FIELD	441:29	441:29	8	TRUE
LEAF_NODE	441:29	441:29	9	TRUE
LEAF_NODE	441:33	441:33	8	)
LEAF_NODE	441:35	441:35	7	&&
EXPR	441:38	441:55	7	( printAll == TRUE )
LEAF_NODE	441:38	441:38	8	(
FIELD	441:39	441:39	8	printAll
LEAF_NODE	441:39	441:39	9	printAll
EQ_OPERATOR	441:48	441:48	8	==
LEAF_NODE	441:48	441:48	9	==
FIELD	441:51	441:51	8	TRUE
LEAF_NODE	441:51	441:51	9	TRUE
LEAF_NODE	441:55	441:55	8	)
LEAF_NODE	441:56	441:56	4	)
STATEMENTS	442:10	445:10	4	
LEAF_NODE	442:10	442:10	5	{
STATEMENTS	443:3	444:3	5	
EXPR_STATEMENT	443:3	443:98	6	TIFFError ( " -e and -a" , "Warning: Cannot generate Encapsulated Postscript for multiple images" ) ;
EXPR	443:3	443:3	7	TIFFError ( " -e and -a" , "Warning: Cannot generate Encapsulated Postscript for multiple images" )
FUNCTION_CALL	443:3	443:97	8	TIFFError ( " -e and -a" , "Warning: Cannot generate Encapsulated Postscript for multiple images" )
CALLEE	443:3	443:3	9	TIFFError
LEAF_NODE	443:3	443:3	10	TIFFError
LEAF_NODE	443:12	443:12	9	(
ARGUMENT	443:13	443:13	9	" -e and -a"
FIELD	443:13	443:13	10	" -e and -a"
LEAF_NODE	443:13	443:13	11	" -e and -a"
LEAF_NODE	443:25	443:25	9	,
ARGUMENT	443:27	443:27	9	"Warning: Cannot generate Encapsulated Postscript for multiple images"
FIELD	443:27	443:27	10	"Warning: Cannot generate Encapsulated Postscript for multiple images"
LEAF_NODE	443:27	443:27	11	"Warning: Cannot generate Encapsulated Postscript for multiple images"
LEAF_NODE	443:97	443:97	9	)
LEAF_NODE	443:98	443:98	7	;
EXPR_STATEMENT	444:3	444:23	6	generateEPSF = FALSE ;
EXPR	444:3	444:3	7	generateEPSF = FALSE
ASSIGN	444:3	444:18	8	generateEPSF = FALSE
LVAL	444:3	444:3	9	generateEPSF
FIELD	444:3	444:3	10	generateEPSF
LEAF_NODE	444:3	444:3	11	generateEPSF
ASSIGN_OP	444:16	444:16	9	=
LEAF_NODE	444:16	444:16	10	=
RVAL	444:18	444:18	9	FALSE
FIELD	444:18	444:18	10	FALSE
LEAF_NODE	444:18	444:18	11	FALSE
LEAF_NODE	444:23	444:23	7	;
LEAF_NODE	445:10	445:10	5	}
SELECTION	447:8	448:10	3	
KEYWORD	447:8	447:8	4	if
LEAF_NODE	447:8	447:8	5	if
LEAF_NODE	447:11	447:11	4	(
CONDITION	447:12	447:12	4	( generateEPSF == TRUE ) && ( PSduplex == TRUE )
EXPR	447:12	447:12	5	( generateEPSF == TRUE ) && ( PSduplex == TRUE )
AND	447:12	447:38	6	( generateEPSF == TRUE ) && ( PSduplex == TRUE )
EXPR	447:12	447:33	7	( generateEPSF == TRUE )
LEAF_NODE	447:12	447:12	8	(
FIELD	447:13	447:13	8	generateEPSF
LEAF_NODE	447:13	447:13	9	generateEPSF
EQ_OPERATOR	447:26	447:26	8	==
LEAF_NODE	447:26	447:26	9	==
FIELD	447:29	447:29	8	TRUE
LEAF_NODE	447:29	447:29	9	TRUE
LEAF_NODE	447:33	447:33	8	)
LEAF_NODE	447:35	447:35	7	&&
EXPR	447:38	447:55	7	( PSduplex == TRUE )
LEAF_NODE	447:38	447:38	8	(
FIELD	447:39	447:39	8	PSduplex
LEAF_NODE	447:39	447:39	9	PSduplex
EQ_OPERATOR	447:48	447:48	8	==
LEAF_NODE	447:48	447:48	9	==
FIELD	447:51	447:51	8	TRUE
LEAF_NODE	447:51	447:51	9	TRUE
LEAF_NODE	447:55	447:55	8	)
LEAF_NODE	447:56	447:56	4	)
STATEMENTS	448:10	451:10	4	
LEAF_NODE	448:10	448:10	5	{
STATEMENTS	449:3	450:3	5	
EXPR_STATEMENT	449:3	449:93	6	TIFFError ( " -e and -D" , "Warning: Encapsulated Postscript does not support Duplex option" ) ;
EXPR	449:3	449:3	7	TIFFError ( " -e and -D" , "Warning: Encapsulated Postscript does not support Duplex option" )
FUNCTION_CALL	449:3	449:92	8	TIFFError ( " -e and -D" , "Warning: Encapsulated Postscript does not support Duplex option" )
CALLEE	449:3	449:3	9	TIFFError
LEAF_NODE	449:3	449:3	10	TIFFError
LEAF_NODE	449:12	449:12	9	(
ARGUMENT	449:13	449:13	9	" -e and -D"
FIELD	449:13	449:13	10	" -e and -D"
LEAF_NODE	449:13	449:13	11	" -e and -D"
LEAF_NODE	449:25	449:25	9	,
ARGUMENT	449:27	449:27	9	"Warning: Encapsulated Postscript does not support Duplex option"
FIELD	449:27	449:27	10	"Warning: Encapsulated Postscript does not support Duplex option"
LEAF_NODE	449:27	449:27	11	"Warning: Encapsulated Postscript does not support Duplex option"
LEAF_NODE	449:92	449:92	9	)
LEAF_NODE	449:93	449:93	7	;
EXPR_STATEMENT	450:3	450:19	6	PSduplex = FALSE ;
EXPR	450:3	450:3	7	PSduplex = FALSE
ASSIGN	450:3	450:14	8	PSduplex = FALSE
LVAL	450:3	450:3	9	PSduplex
FIELD	450:3	450:3	10	PSduplex
LEAF_NODE	450:3	450:3	11	PSduplex
ASSIGN_OP	450:12	450:12	9	=
LEAF_NODE	450:12	450:12	10	=
RVAL	450:14	450:14	9	FALSE
FIELD	450:14	450:14	10	FALSE
LEAF_NODE	450:14	450:14	11	FALSE
LEAF_NODE	450:19	450:19	7	;
LEAF_NODE	451:10	451:10	5	}
SELECTION	453:8	454:10	3	
KEYWORD	453:8	453:8	4	if
LEAF_NODE	453:8	453:8	5	if
LEAF_NODE	453:11	453:11	4	(
CONDITION	453:12	453:12	4	( generateEPSF == TRUE ) && ( PStumble == TRUE )
EXPR	453:12	453:12	5	( generateEPSF == TRUE ) && ( PStumble == TRUE )
AND	453:12	453:38	6	( generateEPSF == TRUE ) && ( PStumble == TRUE )
EXPR	453:12	453:33	7	( generateEPSF == TRUE )
LEAF_NODE	453:12	453:12	8	(
FIELD	453:13	453:13	8	generateEPSF
LEAF_NODE	453:13	453:13	9	generateEPSF
EQ_OPERATOR	453:26	453:26	8	==
LEAF_NODE	453:26	453:26	9	==
FIELD	453:29	453:29	8	TRUE
LEAF_NODE	453:29	453:29	9	TRUE
LEAF_NODE	453:33	453:33	8	)
LEAF_NODE	453:35	453:35	7	&&
EXPR	453:38	453:55	7	( PStumble == TRUE )
LEAF_NODE	453:38	453:38	8	(
FIELD	453:39	453:39	8	PStumble
LEAF_NODE	453:39	453:39	9	PStumble
EQ_OPERATOR	453:48	453:48	8	==
LEAF_NODE	453:48	453:48	9	==
FIELD	453:51	453:51	8	TRUE
LEAF_NODE	453:51	453:51	9	TRUE
LEAF_NODE	453:55	453:55	8	)
LEAF_NODE	453:56	453:56	4	)
STATEMENTS	454:10	457:10	4	
LEAF_NODE	454:10	454:10	5	{
STATEMENTS	455:3	456:3	5	
EXPR_STATEMENT	455:3	455:103	6	TIFFError ( " -e and -T" , "Warning: Encapsulated Postscript does not support Top Edge Binding option" ) ;
EXPR	455:3	455:3	7	TIFFError ( " -e and -T" , "Warning: Encapsulated Postscript does not support Top Edge Binding option" )
FUNCTION_CALL	455:3	455:102	8	TIFFError ( " -e and -T" , "Warning: Encapsulated Postscript does not support Top Edge Binding option" )
CALLEE	455:3	455:3	9	TIFFError
LEAF_NODE	455:3	455:3	10	TIFFError
LEAF_NODE	455:12	455:12	9	(
ARGUMENT	455:13	455:13	9	" -e and -T"
FIELD	455:13	455:13	10	" -e and -T"
LEAF_NODE	455:13	455:13	11	" -e and -T"
LEAF_NODE	455:25	455:25	9	,
ARGUMENT	455:27	455:27	9	"Warning: Encapsulated Postscript does not support Top Edge Binding option"
FIELD	455:27	455:27	10	"Warning: Encapsulated Postscript does not support Top Edge Binding option"
LEAF_NODE	455:27	455:27	11	"Warning: Encapsulated Postscript does not support Top Edge Binding option"
LEAF_NODE	455:102	455:102	9	)
LEAF_NODE	455:103	455:103	7	;
EXPR_STATEMENT	456:3	456:19	6	PStumble = FALSE ;
EXPR	456:3	456:3	7	PStumble = FALSE
ASSIGN	456:3	456:14	8	PStumble = FALSE
LVAL	456:3	456:3	9	PStumble
FIELD	456:3	456:3	10	PStumble
LEAF_NODE	456:3	456:3	11	PStumble
ASSIGN_OP	456:12	456:12	9	=
LEAF_NODE	456:12	456:12	10	=
RVAL	456:14	456:14	9	FALSE
FIELD	456:14	456:14	10	FALSE
LEAF_NODE	456:14	456:14	11	FALSE
LEAF_NODE	456:19	456:19	7	;
LEAF_NODE	457:10	457:10	5	}
SELECTION	459:8	460:3	3	
KEYWORD	459:8	459:8	4	if
LEAF_NODE	459:8	459:8	5	if
LEAF_NODE	459:11	459:11	4	(
CONDITION	459:12	459:12	4	( generateEPSF == TRUE ) && ( PSavoiddeadzone == TRUE )
EXPR	459:12	459:12	5	( generateEPSF == TRUE ) && ( PSavoiddeadzone == TRUE )
AND	459:12	459:38	6	( generateEPSF == TRUE ) && ( PSavoiddeadzone == TRUE )
EXPR	459:12	459:33	7	( generateEPSF == TRUE )
LEAF_NODE	459:12	459:12	8	(
FIELD	459:13	459:13	8	generateEPSF
LEAF_NODE	459:13	459:13	9	generateEPSF
EQ_OPERATOR	459:26	459:26	8	==
LEAF_NODE	459:26	459:26	9	==
FIELD	459:29	459:29	8	TRUE
LEAF_NODE	459:29	459:29	9	TRUE
LEAF_NODE	459:33	459:33	8	)
LEAF_NODE	459:35	459:35	7	&&
EXPR	459:38	459:62	7	( PSavoiddeadzone == TRUE )
LEAF_NODE	459:38	459:38	8	(
FIELD	459:39	459:39	8	PSavoiddeadzone
LEAF_NODE	459:39	459:39	9	PSavoiddeadzone
EQ_OPERATOR	459:55	459:55	8	==
LEAF_NODE	459:55	459:55	9	==
FIELD	459:58	459:58	8	TRUE
LEAF_NODE	459:58	459:58	9	TRUE
LEAF_NODE	459:62	459:62	8	)
LEAF_NODE	459:63	459:63	4	)
STATEMENTS	460:3	460:3	4	
EXPR_STATEMENT	460:3	460:26	5	PSavoiddeadzone = FALSE ;
EXPR	460:3	460:3	6	PSavoiddeadzone = FALSE
ASSIGN	460:3	460:21	7	PSavoiddeadzone = FALSE
LVAL	460:3	460:3	8	PSavoiddeadzone
FIELD	460:3	460:3	9	PSavoiddeadzone
LEAF_NODE	460:3	460:3	10	PSavoiddeadzone
ASSIGN_OP	460:19	460:19	8	=
LEAF_NODE	460:19	460:19	9	=
RVAL	460:21	460:21	8	FALSE
FIELD	460:21	460:21	9	FALSE
LEAF_NODE	460:21	460:21	10	FALSE
LEAF_NODE	460:26	460:26	6	;
ITERATION	462:1	462:37	3	
KEYWORD	462:1	462:1	4	for
LEAF_NODE	462:1	462:1	5	for
LEAF_NODE	462:5	462:5	4	(
FOR_INIT	462:6	462:6	4	;
LEAF_NODE	462:6	462:6	5	;
CONDITION	462:8	462:8	4	argc - optind > 0
EXPR	462:8	462:24	5	argc - optind > 0
FIELD	462:8	462:8	6	argc
LEAF_NODE	462:8	462:8	7	argc
LEAF_NODE	462:13	462:13	6	-
FIELD	462:15	462:15	6	optind
LEAF_NODE	462:15	462:15	7	optind
REL_OPERATOR	462:22	462:22	6	>
LEAF_NODE	462:22	462:22	7	>
FIELD	462:24	462:24	6	0
LEAF_NODE	462:24	462:24	7	0
LEAF_NODE	462:25	462:25	4	;
FOR_EXPR	462:27	462:27	4	optind ++
EXPR	462:27	462:27	5	optind ++
FIELD	462:27	462:33	6	optind ++
LEAF_NODE	462:27	462:27	7	optind
LEAF_NODE	462:33	462:33	7	++
LEAF_NODE	462:35	462:35	4	)
STATEMENTS	462:37	485:1	4	
LEAF_NODE	462:37	462:37	5	{
STATEMENTS	463:2	464:2	5	
SIMPLE_DECL	463:2	463:52	6	TIFF * tif ; tif = TIFFOpen ( filename = argv [ optind ] , "r" ) ;
VAR_DECL	463:2	463:8	7	TIFF * tif ; tif = TIFFOpen ( filename = argv [ optind ] , "r" )
TYPE	463:2	463:6	8	TIFF *
TYPE_NAME	463:2	463:2	9	TIFF
LEAF_NODE	463:2	463:2	10	TIFF
POINTER	463:6	463:6	9	*
LEAF_NODE	463:6	463:6	10	*
NAME	463:8	463:8	8	tif
LEAF_NODE	463:8	463:8	9	tif
LEAF_NODE	0:0	0:0	8	;
INIT	463:8	463:8	8	tif = TIFFOpen ( filename = argv [ optind ] , "r" )
ASSIGN	463:8	463:14	9	tif = TIFFOpen ( filename = argv [ optind ] , "r" )
LVAL	463:8	463:8	10	tif
NAME	463:8	463:8	11	tif
LEAF_NODE	463:8	463:8	12	tif
ASSIGN_OP	463:12	463:12	10	=
LEAF_NODE	463:12	463:12	11	=
RVAL	463:14	463:14	10	TIFFOpen ( filename = argv [ optind ] , "r" )
FUNCTION_CALL	463:14	463:51	11	TIFFOpen ( filename = argv [ optind ] , "r" )
CALLEE	463:14	463:14	12	TIFFOpen
LEAF_NODE	463:14	463:14	13	TIFFOpen
LEAF_NODE	463:22	463:22	12	(
ARGUMENT	463:23	463:23	12	filename = argv [ optind ]
ASSIGN	463:23	463:34	13	filename = argv [ optind ]
LVAL	463:23	463:23	14	filename
FIELD	463:23	463:23	15	filename
LEAF_NODE	463:23	463:23	16	filename
ASSIGN_OP	463:32	463:32	14	=
LEAF_NODE	463:32	463:32	15	=
RVAL	463:34	463:34	14	argv [ optind ]
FIELD	463:34	463:45	15	argv [ optind ]
LEAF_NODE	463:34	463:34	16	argv
LEAF_NODE	463:38	463:38	16	[
EXPR	463:39	463:39	16	optind
FIELD	463:39	463:39	17	optind
LEAF_NODE	463:39	463:39	18	optind
LEAF_NODE	463:45	463:45	16	]
LEAF_NODE	463:46	463:46	12	,
ARGUMENT	463:48	463:48	12	"r"
FIELD	463:48	463:48	13	"r"
LEAF_NODE	463:48	463:48	14	"r"
LEAF_NODE	463:51	463:51	12	)
LEAF_NODE	463:52	463:52	7	;
SELECTION	464:2	464:19	6	
KEYWORD	464:2	464:2	7	if
LEAF_NODE	464:2	464:2	8	if
LEAF_NODE	464:5	464:5	7	(
CONDITION	464:6	464:6	7	tif != NULL
EXPR	464:6	464:13	8	tif != NULL
FIELD	464:6	464:6	9	tif
LEAF_NODE	464:6	464:6	10	tif
EQ_OPERATOR	464:10	464:10	9	!=
LEAF_NODE	464:10	464:10	10	!=
FIELD	464:13	464:13	9	NULL
LEAF_NODE	464:13	464:13	10	NULL
LEAF_NODE	464:17	464:17	7	)
STATEMENTS	464:19	484:2	7	
LEAF_NODE	464:19	464:19	8	{
STATEMENTS	465:3	483:3	8	
SELECTION	465:3	467:24	9	
KEYWORD	465:3	465:3	10	if
LEAF_NODE	465:3	465:3	11	if
LEAF_NODE	465:6	465:6	10	(
CONDITION	465:7	465:7	10	dirnum != - 1 && ! TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
EXPR	465:7	465:7	11	dirnum != - 1 && ! TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
AND	465:7	466:31	12	dirnum != - 1 && ! TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
EXPR	465:7	465:17	13	dirnum != - 1
FIELD	465:7	465:7	14	dirnum
LEAF_NODE	465:7	465:7	15	dirnum
EQ_OPERATOR	465:14	465:14	14	!=
LEAF_NODE	465:14	465:14	15	!=
UNARY_EXPR	465:17	465:18	14	- 1
UNARY_OPERATOR	465:17	465:17	15	-
LEAF_NODE	465:17	465:17	16	-
FIELD	465:18	465:18	15	1
LEAF_NODE	465:18	465:18	16	1
LEAF_NODE	466:28	466:28	13	&&
EXPR	466:31	466:31	13	! TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
UNARY_EXPR	466:31	466:32	14	! TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
UNARY_OPERATOR	466:31	466:31	15	!
LEAF_NODE	466:31	466:31	16	!
FUNCTION_CALL	466:32	466:68	15	TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
CALLEE	466:32	466:32	16	TIFFSetDirectory
LEAF_NODE	466:32	466:32	17	TIFFSetDirectory
LEAF_NODE	466:48	466:48	16	(
ARGUMENT	466:49	466:49	16	tif
FIELD	466:49	466:49	17	tif
LEAF_NODE	466:49	466:49	18	tif
LEAF_NODE	466:52	466:52	16	,
ARGUMENT	466:54	466:62	16	( tdir_t ) dirnum
LEAF_NODE	466:54	466:54	17	(
TYPE_NAME	466:55	466:55	17	tdir_t
LEAF_NODE	466:55	466:55	18	tdir_t
LEAF_NODE	466:61	466:61	17	)
FIELD	466:62	466:62	17	dirnum
LEAF_NODE	466:62	466:62	18	dirnum
LEAF_NODE	466:68	466:68	16	)
LEAF_NODE	466:69	466:69	10	)
STATEMENTS	467:24	470:24	10	
LEAF_NODE	467:24	467:24	11	{
STATEMENTS	468:32	469:4	11	
EXPR_STATEMENT	468:32	468:46	12	TIFFClose ( tif ) ;
EXPR	468:32	468:32	13	TIFFClose ( tif )
FUNCTION_CALL	468:32	468:45	14	TIFFClose ( tif )
CALLEE	468:32	468:32	15	TIFFClose
LEAF_NODE	468:32	468:32	16	TIFFClose
LEAF_NODE	468:41	468:41	15	(
ARGUMENT	468:42	468:42	15	tif
FIELD	468:42	468:42	16	tif
LEAF_NODE	468:42	468:42	17	tif
LEAF_NODE	468:45	468:45	15	)
LEAF_NODE	468:46	468:46	13	;
JUMP_STATEMENT	469:4	469:15	12	return ( - 1 ) ;
KEYWORD	469:4	469:4	13	return
LEAF_NODE	469:4	469:4	14	return
DESTINATION	469:11	469:11	13	( - 1 )
EXPR	469:11	469:14	14	( - 1 )
LEAF_NODE	469:11	469:11	15	(
UNARY_EXPR	469:12	469:13	15	- 1
UNARY_OPERATOR	469:12	469:12	16	-
LEAF_NODE	469:12	469:12	17	-
FIELD	469:13	469:13	16	1
LEAF_NODE	469:13	469:13	17	1
LEAF_NODE	469:14	469:14	15	)
LEAF_NODE	469:15	469:15	13	;
LEAF_NODE	470:24	470:24	11	}
SELECTION	471:3	471:8	9	
KEYWORD	471:3	471:3	10	else
LEAF_NODE	471:3	471:3	11	else
STATEMENTS	471:8	471:8	10	
SELECTION	471:8	473:24	11	
KEYWORD	471:8	471:8	12	if
LEAF_NODE	471:8	471:8	13	if
LEAF_NODE	471:11	471:11	12	(
CONDITION	471:12	471:12	12	diroff != 0 && ! TIFFSetSubDirectory ( tif , diroff )
EXPR	471:12	471:12	13	diroff != 0 && ! TIFFSetSubDirectory ( tif , diroff )
AND	471:12	472:7	14	diroff != 0 && ! TIFFSetSubDirectory ( tif , diroff )
EXPR	471:12	471:22	15	diroff != 0
FIELD	471:12	471:12	16	diroff
LEAF_NODE	471:12	471:12	17	diroff
EQ_OPERATOR	471:19	471:19	16	!=
LEAF_NODE	471:19	471:19	17	!=
FIELD	471:22	471:22	16	0
LEAF_NODE	471:22	471:22	17	0
LEAF_NODE	471:24	471:24	15	&&
EXPR	472:7	472:7	15	! TIFFSetSubDirectory ( tif , diroff )
UNARY_EXPR	472:7	472:8	16	! TIFFSetSubDirectory ( tif , diroff )
UNARY_OPERATOR	472:7	472:7	17	!
LEAF_NODE	472:7	472:7	18	!
FUNCTION_CALL	472:8	472:39	17	TIFFSetSubDirectory ( tif , diroff )
CALLEE	472:8	472:8	18	TIFFSetSubDirectory
LEAF_NODE	472:8	472:8	19	TIFFSetSubDirectory
LEAF_NODE	472:27	472:27	18	(
ARGUMENT	472:28	472:28	18	tif
FIELD	472:28	472:28	19	tif
LEAF_NODE	472:28	472:28	20	tif
LEAF_NODE	472:31	472:31	18	,
ARGUMENT	472:33	472:33	18	diroff
FIELD	472:33	472:33	19	diroff
LEAF_NODE	472:33	472:33	20	diroff
LEAF_NODE	472:39	472:39	18	)
LEAF_NODE	472:40	472:40	12	)
STATEMENTS	473:24	476:24	12	
LEAF_NODE	473:24	473:24	13	{
STATEMENTS	474:32	475:4	13	
EXPR_STATEMENT	474:32	474:46	14	TIFFClose ( tif ) ;
EXPR	474:32	474:32	15	TIFFClose ( tif )
FUNCTION_CALL	474:32	474:45	16	TIFFClose ( tif )
CALLEE	474:32	474:32	17	TIFFClose
LEAF_NODE	474:32	474:32	18	TIFFClose
LEAF_NODE	474:41	474:41	17	(
ARGUMENT	474:42	474:42	17	tif
FIELD	474:42	474:42	18	tif
LEAF_NODE	474:42	474:42	19	tif
LEAF_NODE	474:45	474:45	17	)
LEAF_NODE	474:46	474:46	15	;
JUMP_STATEMENT	475:4	475:15	14	return ( - 1 ) ;
KEYWORD	475:4	475:4	15	return
LEAF_NODE	475:4	475:4	16	return
DESTINATION	475:11	475:11	15	( - 1 )
EXPR	475:11	475:14	16	( - 1 )
LEAF_NODE	475:11	475:11	17	(
UNARY_EXPR	475:12	475:13	17	- 1
UNARY_OPERATOR	475:12	475:12	18	-
LEAF_NODE	475:12	475:12	19	-
FIELD	475:13	475:13	18	1
LEAF_NODE	475:13	475:13	19	1
LEAF_NODE	475:14	475:14	17	)
LEAF_NODE	475:15	475:15	15	;
LEAF_NODE	476:24	476:24	13	}
EXPR_STATEMENT	477:3	478:44	9	np = TIFF2PS ( output , tif , pageWidth , pageHeight , leftmargin , bottommargin , centered ) ;
EXPR	477:3	477:3	10	np = TIFF2PS ( output , tif , pageWidth , pageHeight , leftmargin , bottommargin , centered )
ASSIGN	477:3	477:8	11	np = TIFF2PS ( output , tif , pageWidth , pageHeight , leftmargin , bottommargin , centered )
LVAL	477:3	477:3	12	np
FIELD	477:3	477:3	13	np
LEAF_NODE	477:3	477:3	14	np
ASSIGN_OP	477:6	477:6	12	=
LEAF_NODE	477:6	477:6	13	=
RVAL	477:8	477:8	12	TIFF2PS ( output , tif , pageWidth , pageHeight , leftmargin , bottommargin , centered )
FUNCTION_CALL	477:8	478:43	13	TIFF2PS ( output , tif , pageWidth , pageHeight , leftmargin , bottommargin , centered )
CALLEE	477:8	477:8	14	TIFF2PS
LEAF_NODE	477:8	477:8	15	TIFF2PS
LEAF_NODE	477:15	477:15	14	(
ARGUMENT	477:16	477:16	14	output
FIELD	477:16	477:16	15	output
LEAF_NODE	477:16	477:16	16	output
LEAF_NODE	477:22	477:22	14	,
ARGUMENT	477:24	477:24	14	tif
FIELD	477:24	477:24	15	tif
LEAF_NODE	477:24	477:24	16	tif
LEAF_NODE	477:27	477:27	14	,
ARGUMENT	477:29	477:29	14	pageWidth
FIELD	477:29	477:29	15	pageWidth
LEAF_NODE	477:29	477:29	16	pageWidth
LEAF_NODE	477:38	477:38	14	,
ARGUMENT	477:40	477:40	14	pageHeight
FIELD	477:40	477:40	15	pageHeight
LEAF_NODE	477:40	477:40	16	pageHeight
LEAF_NODE	477:50	477:50	14	,
ARGUMENT	478:9	478:9	14	leftmargin
FIELD	478:9	478:9	15	leftmargin
LEAF_NODE	478:9	478:9	16	leftmargin
LEAF_NODE	478:19	478:19	14	,
ARGUMENT	478:21	478:21	14	bottommargin
FIELD	478:21	478:21	15	bottommargin
LEAF_NODE	478:21	478:21	16	bottommargin
LEAF_NODE	478:33	478:33	14	,
ARGUMENT	478:35	478:35	14	centered
FIELD	478:35	478:35	15	centered
LEAF_NODE	478:35	478:35	16	centered
LEAF_NODE	478:43	478:43	14	)
LEAF_NODE	478:44	478:44	10	;
SELECTION	479:24	480:26	9	
KEYWORD	479:24	479:24	10	if
LEAF_NODE	479:24	479:24	11	if
LEAF_NODE	479:27	479:27	10	(
CONDITION	479:28	479:28	10	np < 0
EXPR	479:28	479:33	11	np < 0
FIELD	479:28	479:28	12	np
LEAF_NODE	479:28	479:28	13	np
REL_OPERATOR	479:31	479:31	12	<
LEAF_NODE	479:31	479:31	13	<
FIELD	479:33	479:33	12	0
LEAF_NODE	479:33	479:33	13	0
LEAF_NODE	479:34	479:34	10	)
STATEMENTS	480:26	482:26	10	
LEAF_NODE	480:26	480:26	11	{
STATEMENTS	481:5	481:5	11	
EXPR_STATEMENT	481:5	481:57	12	TIFFError ( "Error" , "Unable to process %s" , filename ) ;
EXPR	481:5	481:5	13	TIFFError ( "Error" , "Unable to process %s" , filename )
FUNCTION_CALL	481:5	481:56	14	TIFFError ( "Error" , "Unable to process %s" , filename )
CALLEE	481:5	481:5	15	TIFFError
LEAF_NODE	481:5	481:5	16	TIFFError
LEAF_NODE	481:14	481:14	15	(
ARGUMENT	481:15	481:15	15	"Error"
FIELD	481:15	481:15	16	"Error"
LEAF_NODE	481:15	481:15	17	"Error"
LEAF_NODE	481:22	481:22	15	,
ARGUMENT	481:24	481:24	15	"Unable to process %s"
FIELD	481:24	481:24	16	"Unable to process %s"
LEAF_NODE	481:24	481:24	17	"Unable to process %s"
LEAF_NODE	481:46	481:46	15	,
ARGUMENT	481:48	481:48	15	filename
FIELD	481:48	481:48	16	filename
LEAF_NODE	481:48	481:48	17	filename
LEAF_NODE	481:56	481:56	15	)
LEAF_NODE	481:57	481:57	13	;
LEAF_NODE	482:26	482:26	11	}
EXPR_STATEMENT	483:3	483:17	9	TIFFClose ( tif ) ;
EXPR	483:3	483:3	10	TIFFClose ( tif )
FUNCTION_CALL	483:3	483:16	11	TIFFClose ( tif )
CALLEE	483:3	483:3	12	TIFFClose
LEAF_NODE	483:3	483:3	13	TIFFClose
LEAF_NODE	483:12	483:12	12	(
ARGUMENT	483:13	483:13	12	tif
FIELD	483:13	483:13	13	tif
LEAF_NODE	483:13	483:13	14	tif
LEAF_NODE	483:16	483:16	12	)
LEAF_NODE	483:17	483:17	10	;
LEAF_NODE	484:2	484:2	8	}
LEAF_NODE	485:1	485:1	5	}
SELECTION	486:1	487:2	3	
KEYWORD	486:1	486:1	4	if
LEAF_NODE	486:1	486:1	5	if
LEAF_NODE	486:4	486:4	4	(
CONDITION	486:5	486:5	4	np
EXPR	486:5	486:5	5	np
FIELD	486:5	486:5	6	np
LEAF_NODE	486:5	486:5	7	np
LEAF_NODE	486:7	486:7	4	)
STATEMENTS	487:2	487:2	4	
EXPR_STATEMENT	487:2	487:20	5	PSTail ( output , np ) ;
EXPR	487:2	487:2	6	PSTail ( output , np )
FUNCTION_CALL	487:2	487:19	7	PSTail ( output , np )
CALLEE	487:2	487:2	8	PSTail
LEAF_NODE	487:2	487:2	9	PSTail
LEAF_NODE	487:8	487:8	8	(
ARGUMENT	487:9	487:9	8	output
FIELD	487:9	487:9	9	output
LEAF_NODE	487:9	487:9	10	output
LEAF_NODE	487:15	487:15	8	,
ARGUMENT	487:17	487:17	8	np
FIELD	487:17	487:17	9	np
LEAF_NODE	487:17	487:17	10	np
LEAF_NODE	487:19	487:19	8	)
LEAF_NODE	487:20	487:20	6	;
SELECTION	488:1	489:2	3	
KEYWORD	488:1	488:1	4	else
LEAF_NODE	488:1	488:1	5	else
STATEMENTS	489:2	489:2	4	
EXPR_STATEMENT	489:2	489:11	5	usage ( - 1 ) ;
EXPR	489:2	489:2	6	usage ( - 1 )
FUNCTION_CALL	489:2	489:10	7	usage ( - 1 )
CALLEE	489:2	489:2	8	usage
LEAF_NODE	489:2	489:2	9	usage
LEAF_NODE	489:7	489:7	8	(
ARGUMENT	489:8	489:8	8	- 1
UNARY_EXPR	489:8	489:9	9	- 1
UNARY_OPERATOR	489:8	489:8	10	-
LEAF_NODE	489:8	489:8	11	-
FIELD	489:9	489:9	10	1
LEAF_NODE	489:9	489:9	11	1
LEAF_NODE	489:10	489:10	8	)
LEAF_NODE	489:11	489:11	6	;
SELECTION	490:1	491:2	3	
KEYWORD	490:1	490:1	4	if
LEAF_NODE	490:1	490:1	5	if
LEAF_NODE	490:4	490:4	4	(
CONDITION	490:5	490:5	4	output != stdout
EXPR	490:5	490:15	5	output != stdout
FIELD	490:5	490:5	6	output
LEAF_NODE	490:5	490:5	7	output
EQ_OPERATOR	490:12	490:12	6	!=
LEAF_NODE	490:12	490:12	7	!=
FIELD	490:15	490:15	6	stdout
LEAF_NODE	490:15	490:15	7	stdout
LEAF_NODE	490:21	490:21	4	)
STATEMENTS	491:2	491:2	4	
EXPR_STATEMENT	491:2	491:16	5	fclose ( output ) ;
EXPR	491:2	491:2	6	fclose ( output )
FUNCTION_CALL	491:2	491:15	7	fclose ( output )
CALLEE	491:2	491:2	8	fclose
LEAF_NODE	491:2	491:2	9	fclose
LEAF_NODE	491:8	491:8	8	(
ARGUMENT	491:9	491:9	8	output
FIELD	491:9	491:9	9	output
LEAF_NODE	491:9	491:9	10	output
LEAF_NODE	491:15	491:15	8	)
LEAF_NODE	491:16	491:16	6	;
JUMP_STATEMENT	492:1	492:11	3	return ( 0 ) ;
KEYWORD	492:1	492:1	4	return
LEAF_NODE	492:1	492:1	5	return
DESTINATION	492:8	492:8	4	( 0 )
EXPR	492:8	492:10	5	( 0 )
LEAF_NODE	492:8	492:8	6	(
FIELD	492:9	492:9	6	0
LEAF_NODE	492:9	492:9	7	0
LEAF_NODE	492:10	492:10	6	)
LEAF_NODE	492:11	492:11	4	;
LEAF_NODE	493:0	493:0	2	}
SIMPLE_DECL	495:7	495:29	1	uint16 samplesperpixel ;
VAR_DECL	495:7	495:14	2	uint16 samplesperpixel
TYPE	495:7	495:7	3	uint16
TYPE_NAME	495:7	495:7	4	uint16
LEAF_NODE	495:7	495:7	5	uint16
NAME	495:14	495:14	3	samplesperpixel
LEAF_NODE	495:14	495:14	4	samplesperpixel
LEAF_NODE	495:29	495:29	2	;
SIMPLE_DECL	496:7	496:27	1	uint16 bitspersample ;
VAR_DECL	496:7	496:14	2	uint16 bitspersample
TYPE	496:7	496:7	3	uint16
TYPE_NAME	496:7	496:7	4	uint16
LEAF_NODE	496:7	496:7	5	uint16
NAME	496:14	496:14	3	bitspersample
LEAF_NODE	496:14	496:14	4	bitspersample
LEAF_NODE	496:27	496:27	2	;
SIMPLE_DECL	497:7	497:33	1	uint16 planarconfiguration ;
VAR_DECL	497:7	497:14	2	uint16 planarconfiguration
TYPE	497:7	497:7	3	uint16
TYPE_NAME	497:7	497:7	4	uint16
LEAF_NODE	497:7	497:7	5	uint16
NAME	497:14	497:14	3	planarconfiguration
LEAF_NODE	497:14	497:14	4	planarconfiguration
LEAF_NODE	497:33	497:33	2	;
SIMPLE_DECL	498:7	498:25	1	uint16 photometric ;
VAR_DECL	498:7	498:14	2	uint16 photometric
TYPE	498:7	498:7	3	uint16
TYPE_NAME	498:7	498:7	4	uint16
LEAF_NODE	498:7	498:7	5	uint16
NAME	498:14	498:14	3	photometric
LEAF_NODE	498:14	498:14	4	photometric
LEAF_NODE	498:25	498:25	2	;
SIMPLE_DECL	499:7	499:25	1	uint16 compression ;
VAR_DECL	499:7	499:14	2	uint16 compression
TYPE	499:7	499:7	3	uint16
TYPE_NAME	499:7	499:7	4	uint16
LEAF_NODE	499:7	499:7	5	uint16
NAME	499:14	499:14	3	compression
LEAF_NODE	499:14	499:14	4	compression
LEAF_NODE	499:25	499:25	2	;
SIMPLE_DECL	500:7	500:26	1	uint16 extrasamples ;
VAR_DECL	500:7	500:14	2	uint16 extrasamples
TYPE	500:7	500:7	3	uint16
TYPE_NAME	500:7	500:7	4	uint16
LEAF_NODE	500:7	500:7	5	uint16
NAME	500:14	500:14	3	extrasamples
LEAF_NODE	500:14	500:14	4	extrasamples
LEAF_NODE	500:26	500:26	2	;
SIMPLE_DECL	501:7	501:16	1	int alpha ;
VAR_DECL	501:7	501:11	2	int alpha
TYPE	501:7	501:7	3	int
TYPE_NAME	501:7	501:7	4	int
LEAF_NODE	501:7	501:7	5	int
NAME	501:11	501:11	3	alpha
LEAF_NODE	501:11	501:11	4	alpha
LEAF_NODE	501:16	501:16	2	;
FUNCTION_DEF	503:0	573:0	1	
RETURN_TYPE	503:0	503:7	2	static int
LEAF_NODE	503:0	503:0	3	static
TYPE_NAME	503:7	503:7	3	int
LEAF_NODE	503:7	503:7	4	int
FUNCTION_NAME	504:0	504:0	2	checkImage
LEAF_NODE	504:0	504:0	3	checkImage
PARAMETER_LIST	504:10	504:20	2	( TIFF * tif )
LEAF_NODE	504:10	504:10	3	(
PARAMETER_DECL	504:11	504:17	3	TIFF * tif
TYPE	504:11	504:15	4	TIFF *
TYPE_NAME	504:11	504:11	5	TIFF
LEAF_NODE	504:11	504:11	6	TIFF
POINTER	504:15	504:15	5	*
LEAF_NODE	504:15	504:15	6	*
NAME	504:17	504:17	4	tif
LEAF_NODE	504:17	504:17	5	tif
LEAF_NODE	504:20	504:20	3	)
LEAF_NODE	505:0	505:0	2	{
STATEMENTS	506:1	572:1	2	
SELECTION	506:1	506:22	3	
KEYWORD	506:1	506:1	4	switch
LEAF_NODE	506:1	506:1	5	switch
LEAF_NODE	506:8	506:8	4	(
CONDITION	506:9	506:9	4	photometric
EXPR	506:9	506:9	5	photometric
FIELD	506:9	506:9	6	photometric
LEAF_NODE	506:9	506:9	7	photometric
LEAF_NODE	506:20	506:20	4	)
STATEMENTS	506:22	559:1	4	
LEAF_NODE	506:22	506:22	5	{
STATEMENTS	507:1	558:2	5	
LABEL	507:1	507:23	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	507:1	507:1	7	case
LEAF_NODE	507:6	507:6	7	PHOTOMETRIC_YCBCR
LEAF_NODE	507:23	507:23	7	:
SELECTION	508:2	509:50	6	
KEYWORD	508:2	508:2	7	if
LEAF_NODE	508:2	508:2	8	if
LEAF_NODE	508:5	508:5	7	(
CONDITION	508:6	508:6	7	( compression == COMPRESSION_JPEG || compression == COMPRESSION_OJPEG ) && planarconfiguration == PLANARCONFIG_CONTIG
EXPR	508:6	508:6	8	( compression == COMPRESSION_JPEG || compression == COMPRESSION_OJPEG ) && planarconfiguration == PLANARCONFIG_CONTIG
AND	508:6	509:6	9	( compression == COMPRESSION_JPEG || compression == COMPRESSION_OJPEG ) && planarconfiguration == PLANARCONFIG_CONTIG
EXPR	508:6	508:74	10	( compression == COMPRESSION_JPEG || compression == COMPRESSION_OJPEG )
LEAF_NODE	508:6	508:6	11	(
OR	508:7	508:42	11	compression == COMPRESSION_JPEG || compression == COMPRESSION_OJPEG
EXPR	508:7	508:22	12	compression == COMPRESSION_JPEG
FIELD	508:7	508:7	13	compression
LEAF_NODE	508:7	508:7	14	compression
EQ_OPERATOR	508:19	508:19	13	==
LEAF_NODE	508:19	508:19	14	==
FIELD	508:22	508:22	13	COMPRESSION_JPEG
LEAF_NODE	508:22	508:22	14	COMPRESSION_JPEG
LEAF_NODE	508:39	508:39	12	||
EXPR	508:42	508:57	12	compression == COMPRESSION_OJPEG
FIELD	508:42	508:42	13	compression
LEAF_NODE	508:42	508:42	14	compression
EQ_OPERATOR	508:54	508:54	13	==
LEAF_NODE	508:54	508:54	14	==
FIELD	508:57	508:57	13	COMPRESSION_OJPEG
LEAF_NODE	508:57	508:57	14	COMPRESSION_OJPEG
LEAF_NODE	508:74	508:74	11	)
LEAF_NODE	509:3	509:3	10	&&
EXPR	509:6	509:29	10	planarconfiguration == PLANARCONFIG_CONTIG
FIELD	509:6	509:6	11	planarconfiguration
LEAF_NODE	509:6	509:6	12	planarconfiguration
EQ_OPERATOR	509:26	509:26	11	==
LEAF_NODE	509:26	509:26	12	==
FIELD	509:29	509:29	11	PLANARCONFIG_CONTIG
LEAF_NODE	509:29	509:29	12	PLANARCONFIG_CONTIG
LEAF_NODE	509:48	509:48	7	)
STATEMENTS	509:50	514:2	7	
LEAF_NODE	509:50	509:50	8	{
STATEMENTS	511:3	513:3	8	
EXPR_STATEMENT	511:3	512:27	9	TIFFSetField ( tif , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB ) ;
EXPR	511:3	511:3	10	TIFFSetField ( tif , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
FUNCTION_CALL	511:3	512:26	11	TIFFSetField ( tif , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
CALLEE	511:3	511:3	12	TIFFSetField
LEAF_NODE	511:3	511:3	13	TIFFSetField
LEAF_NODE	511:15	511:15	12	(
ARGUMENT	511:16	511:16	12	tif
FIELD	511:16	511:16	13	tif
LEAF_NODE	511:16	511:16	14	tif
LEAF_NODE	511:19	511:19	12	,
ARGUMENT	511:21	511:21	12	TIFFTAG_JPEGCOLORMODE
FIELD	511:21	511:21	13	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	511:21	511:21	14	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	511:42	511:42	12	,
ARGUMENT	512:9	512:9	12	JPEGCOLORMODE_RGB
FIELD	512:9	512:9	13	JPEGCOLORMODE_RGB
LEAF_NODE	512:9	512:9	14	JPEGCOLORMODE_RGB
LEAF_NODE	512:26	512:26	12	)
LEAF_NODE	512:27	512:27	10	;
EXPR_STATEMENT	513:3	513:32	9	photometric = PHOTOMETRIC_RGB ;
EXPR	513:3	513:3	10	photometric = PHOTOMETRIC_RGB
ASSIGN	513:3	513:17	11	photometric = PHOTOMETRIC_RGB
LVAL	513:3	513:3	12	photometric
FIELD	513:3	513:3	13	photometric
LEAF_NODE	513:3	513:3	14	photometric
ASSIGN_OP	513:15	513:15	12	=
LEAF_NODE	513:15	513:15	13	=
RVAL	513:17	513:17	12	PHOTOMETRIC_RGB
FIELD	513:17	513:17	13	PHOTOMETRIC_RGB
LEAF_NODE	513:17	513:17	14	PHOTOMETRIC_RGB
LEAF_NODE	513:32	513:32	10	;
LEAF_NODE	514:2	514:2	8	}
SELECTION	514:4	514:9	6	
KEYWORD	514:4	514:4	7	else
LEAF_NODE	514:4	514:4	8	else
STATEMENTS	514:9	520:2	7	
LEAF_NODE	514:9	514:9	8	{
STATEMENTS	515:3	519:3	8	
SELECTION	515:3	516:4	9	
KEYWORD	515:3	515:3	10	if
LEAF_NODE	515:3	515:3	11	if
LEAF_NODE	515:6	515:6	10	(
CONDITION	515:7	515:7	10	level2 || level3
EXPR	515:7	515:7	11	level2 || level3
OR	515:7	515:17	12	level2 || level3
EXPR	515:7	515:7	13	level2
FIELD	515:7	515:7	14	level2
LEAF_NODE	515:7	515:7	15	level2
LEAF_NODE	515:14	515:14	13	||
EXPR	515:17	515:17	13	level3
FIELD	515:17	515:17	14	level3
LEAF_NODE	515:17	515:17	15	level3
LEAF_NODE	515:23	515:23	10	)
STATEMENTS	516:4	516:4	10	
JUMP_STATEMENT	516:4	516:9	11	break DESTINATION ;
KEYWORD	516:4	516:4	12	break
LEAF_NODE	516:4	516:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	516:9	516:9	12	;
EXPR_STATEMENT	517:3	518:41	9	TIFFError ( filename , "Can not handle image with %s" , "PhotometricInterpretation=YCbCr" ) ;
EXPR	517:3	517:3	10	TIFFError ( filename , "Can not handle image with %s" , "PhotometricInterpretation=YCbCr" )
FUNCTION_CALL	517:3	518:40	11	TIFFError ( filename , "Can not handle image with %s" , "PhotometricInterpretation=YCbCr" )
CALLEE	517:3	517:3	12	TIFFError
LEAF_NODE	517:3	517:3	13	TIFFError
LEAF_NODE	517:12	517:12	12	(
ARGUMENT	517:13	517:13	12	filename
FIELD	517:13	517:13	13	filename
LEAF_NODE	517:13	517:13	14	filename
LEAF_NODE	517:21	517:21	12	,
ARGUMENT	517:23	517:23	12	"Can not handle image with %s"
FIELD	517:23	517:23	13	"Can not handle image with %s"
LEAF_NODE	517:23	517:23	14	"Can not handle image with %s"
LEAF_NODE	517:53	517:53	12	,
ARGUMENT	518:7	518:7	12	"PhotometricInterpretation=YCbCr"
FIELD	518:7	518:7	13	"PhotometricInterpretation=YCbCr"
LEAF_NODE	518:7	518:7	14	"PhotometricInterpretation=YCbCr"
LEAF_NODE	518:40	518:40	12	)
LEAF_NODE	518:41	518:41	10	;
JUMP_STATEMENT	519:3	519:13	9	return ( 0 ) ;
KEYWORD	519:3	519:3	10	return
LEAF_NODE	519:3	519:3	11	return
DESTINATION	519:10	519:10	10	( 0 )
EXPR	519:10	519:12	11	( 0 )
LEAF_NODE	519:10	519:10	12	(
FIELD	519:11	519:11	12	0
LEAF_NODE	519:11	519:11	13	0
LEAF_NODE	519:12	519:12	12	)
LEAF_NODE	519:13	519:13	10	;
LEAF_NODE	520:2	520:2	8	}
LABEL	522:1	522:21	6	case PHOTOMETRIC_RGB :
LEAF_NODE	522:1	522:1	7	case
LEAF_NODE	522:6	522:6	7	PHOTOMETRIC_RGB
LEAF_NODE	522:21	522:21	7	:
SELECTION	523:2	523:35	6	
KEYWORD	523:2	523:2	7	if
LEAF_NODE	523:2	523:2	8	if
LEAF_NODE	523:5	523:5	7	(
CONDITION	523:6	523:6	7	alpha && bitspersample != 8
EXPR	523:6	523:6	8	alpha && bitspersample != 8
AND	523:6	523:15	9	alpha && bitspersample != 8
EXPR	523:6	523:6	10	alpha
FIELD	523:6	523:6	11	alpha
LEAF_NODE	523:6	523:6	12	alpha
LEAF_NODE	523:12	523:12	10	&&
EXPR	523:15	523:32	10	bitspersample != 8
FIELD	523:15	523:15	11	bitspersample
LEAF_NODE	523:15	523:15	12	bitspersample
EQ_OPERATOR	523:29	523:29	11	!=
LEAF_NODE	523:29	523:29	12	!=
FIELD	523:32	523:32	11	8
LEAF_NODE	523:32	523:32	12	8
LEAF_NODE	523:33	523:33	7	)
STATEMENTS	523:35	528:2	7	
LEAF_NODE	523:35	523:35	8	{
STATEMENTS	524:3	527:3	8	
EXPR_STATEMENT	524:3	526:21	9	TIFFError ( filename , "Can not handle %d-bit/sample RGB image with alpha" , bitspersample ) ;
EXPR	524:3	524:3	10	TIFFError ( filename , "Can not handle %d-bit/sample RGB image with alpha" , bitspersample )
FUNCTION_CALL	524:3	526:20	11	TIFFError ( filename , "Can not handle %d-bit/sample RGB image with alpha" , bitspersample )
CALLEE	524:3	524:3	12	TIFFError
LEAF_NODE	524:3	524:3	13	TIFFError
LEAF_NODE	524:12	524:12	12	(
ARGUMENT	524:13	524:13	12	filename
FIELD	524:13	524:13	13	filename
LEAF_NODE	524:13	524:13	14	filename
LEAF_NODE	524:21	524:21	12	,
ARGUMENT	525:7	525:7	12	"Can not handle %d-bit/sample RGB image with alpha"
FIELD	525:7	525:7	13	"Can not handle %d-bit/sample RGB image with alpha"
LEAF_NODE	525:7	525:7	14	"Can not handle %d-bit/sample RGB image with alpha"
LEAF_NODE	525:58	525:58	12	,
ARGUMENT	526:7	526:7	12	bitspersample
FIELD	526:7	526:7	13	bitspersample
LEAF_NODE	526:7	526:7	14	bitspersample
LEAF_NODE	526:20	526:20	12	)
LEAF_NODE	526:21	526:21	10	;
JUMP_STATEMENT	527:3	527:13	9	return ( 0 ) ;
KEYWORD	527:3	527:3	10	return
LEAF_NODE	527:3	527:3	11	return
DESTINATION	527:10	527:10	10	( 0 )
EXPR	527:10	527:12	11	( 0 )
LEAF_NODE	527:10	527:10	12	(
FIELD	527:11	527:11	12	0
LEAF_NODE	527:11	527:11	13	0
LEAF_NODE	527:12	527:12	12	)
LEAF_NODE	527:13	527:13	10	;
LEAF_NODE	528:2	528:2	8	}
LABEL	530:1	530:27	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	530:1	530:1	7	case
LEAF_NODE	530:6	530:6	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	530:27	530:27	7	:
LABEL	531:1	531:25	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	531:1	531:1	7	case
LEAF_NODE	531:6	531:6	7	PHOTOMETRIC_PALETTE
LEAF_NODE	531:25	531:25	7	:
LABEL	532:1	532:28	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	532:1	532:1	7	case
LEAF_NODE	532:6	532:6	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	532:28	532:28	7	:
LABEL	533:1	533:28	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	533:1	533:1	7	case
LEAF_NODE	533:6	533:6	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	533:28	533:28	7	:
JUMP_STATEMENT	534:2	534:7	6	break DESTINATION ;
KEYWORD	534:2	534:2	7	break
LEAF_NODE	534:2	534:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	534:7	534:7	7	;
LABEL	535:1	535:22	6	case PHOTOMETRIC_LOGL :
LEAF_NODE	535:1	535:1	7	case
LEAF_NODE	535:6	535:6	7	PHOTOMETRIC_LOGL
LEAF_NODE	535:22	535:22	7	:
LABEL	536:1	536:24	6	case PHOTOMETRIC_LOGLUV :
LEAF_NODE	536:1	536:1	7	case
LEAF_NODE	536:6	536:6	7	PHOTOMETRIC_LOGLUV
LEAF_NODE	536:24	536:24	7	:
SELECTION	537:2	538:43	6	
KEYWORD	537:2	537:2	7	if
LEAF_NODE	537:2	537:2	8	if
LEAF_NODE	537:5	537:5	7	(
CONDITION	537:6	537:6	7	compression != COMPRESSION_SGILOG && compression != COMPRESSION_SGILOG24
EXPR	537:6	537:6	8	compression != COMPRESSION_SGILOG && compression != COMPRESSION_SGILOG24
AND	537:6	538:6	9	compression != COMPRESSION_SGILOG && compression != COMPRESSION_SGILOG24
EXPR	537:6	537:21	10	compression != COMPRESSION_SGILOG
FIELD	537:6	537:6	11	compression
LEAF_NODE	537:6	537:6	12	compression
EQ_OPERATOR	537:18	537:18	11	!=
LEAF_NODE	537:18	537:18	12	!=
FIELD	537:21	537:21	11	COMPRESSION_SGILOG
LEAF_NODE	537:21	537:21	12	COMPRESSION_SGILOG
LEAF_NODE	537:40	537:40	10	&&
EXPR	538:6	538:21	10	compression != COMPRESSION_SGILOG24
FIELD	538:6	538:6	11	compression
LEAF_NODE	538:6	538:6	12	compression
EQ_OPERATOR	538:18	538:18	11	!=
LEAF_NODE	538:18	538:18	12	!=
FIELD	538:21	538:21	11	COMPRESSION_SGILOG24
LEAF_NODE	538:21	538:21	12	COMPRESSION_SGILOG24
LEAF_NODE	538:41	538:41	7	)
STATEMENTS	538:43	545:2	7	
LEAF_NODE	538:43	538:43	8	{
STATEMENTS	539:3	544:3	8	
EXPR_STATEMENT	539:3	543:4	9	TIFFError ( filename , "Can not handle %s data with compression other than SGILog" , ( photometric == PHOTOMETRIC_LOGL ) ? "LogL" : "LogLuv" ) ;
EXPR	539:3	539:3	10	TIFFError ( filename , "Can not handle %s data with compression other than SGILog" , ( photometric == PHOTOMETRIC_LOGL ) ? "LogL" : "LogLuv" )
FUNCTION_CALL	539:3	543:3	11	TIFFError ( filename , "Can not handle %s data with compression other than SGILog" , ( photometric == PHOTOMETRIC_LOGL ) ? "LogL" : "LogLuv" )
CALLEE	539:3	539:3	12	TIFFError
LEAF_NODE	539:3	539:3	13	TIFFError
LEAF_NODE	539:12	539:12	12	(
ARGUMENT	539:13	539:13	12	filename
FIELD	539:13	539:13	13	filename
LEAF_NODE	539:13	539:13	14	filename
LEAF_NODE	539:21	539:21	12	,
ARGUMENT	540:6	540:6	12	"Can not handle %s data with compression other than SGILog"
FIELD	540:6	540:6	13	"Can not handle %s data with compression other than SGILog"
LEAF_NODE	540:6	540:6	14	"Can not handle %s data with compression other than SGILog"
LEAF_NODE	540:65	540:65	12	,
ARGUMENT	541:7	541:7	12	( photometric == PHOTOMETRIC_LOGL ) ? "LogL" : "LogLuv"
COND_EXPR	541:7	542:13	13	( photometric == PHOTOMETRIC_LOGL ) ? "LogL" : "LogLuv"
CONDITION	541:7	541:39	14	( photometric == PHOTOMETRIC_LOGL )
LEAF_NODE	541:7	541:7	15	(
FIELD	541:8	541:8	15	photometric
LEAF_NODE	541:8	541:8	16	photometric
EQ_OPERATOR	541:20	541:20	15	==
LEAF_NODE	541:20	541:20	16	==
FIELD	541:23	541:23	15	PHOTOMETRIC_LOGL
LEAF_NODE	541:23	541:23	16	PHOTOMETRIC_LOGL
LEAF_NODE	541:39	541:39	15	)
LEAF_NODE	541:41	541:41	14	?
EXPR	542:4	542:4	14	"LogL"
FIELD	542:4	542:4	15	"LogL"
LEAF_NODE	542:4	542:4	16	"LogL"
LEAF_NODE	542:11	542:11	14	:
FIELD	542:13	542:13	14	"LogLuv"
LEAF_NODE	542:13	542:13	15	"LogLuv"
LEAF_NODE	543:3	543:3	12	)
LEAF_NODE	543:4	543:4	10	;
JUMP_STATEMENT	544:3	544:13	9	return ( 0 ) ;
KEYWORD	544:3	544:3	10	return
LEAF_NODE	544:3	544:3	11	return
DESTINATION	544:10	544:10	10	( 0 )
EXPR	544:10	544:12	11	( 0 )
LEAF_NODE	544:10	544:10	12	(
FIELD	544:11	544:11	12	0
LEAF_NODE	544:11	544:11	13	0
LEAF_NODE	544:12	544:12	12	)
LEAF_NODE	544:13	544:13	10	;
LEAF_NODE	545:2	545:2	8	}
EXPR_STATEMENT	547:2	547:62	6	TIFFSetField ( tif , TIFFTAG_SGILOGDATAFMT , SGILOGDATAFMT_8BIT ) ;
EXPR	547:2	547:2	7	TIFFSetField ( tif , TIFFTAG_SGILOGDATAFMT , SGILOGDATAFMT_8BIT )
FUNCTION_CALL	547:2	547:61	8	TIFFSetField ( tif , TIFFTAG_SGILOGDATAFMT , SGILOGDATAFMT_8BIT )
CALLEE	547:2	547:2	9	TIFFSetField
LEAF_NODE	547:2	547:2	10	TIFFSetField
LEAF_NODE	547:14	547:14	9	(
ARGUMENT	547:15	547:15	9	tif
FIELD	547:15	547:15	10	tif
LEAF_NODE	547:15	547:15	11	tif
LEAF_NODE	547:18	547:18	9	,
ARGUMENT	547:20	547:20	9	TIFFTAG_SGILOGDATAFMT
FIELD	547:20	547:20	10	TIFFTAG_SGILOGDATAFMT
LEAF_NODE	547:20	547:20	11	TIFFTAG_SGILOGDATAFMT
LEAF_NODE	547:41	547:41	9	,
ARGUMENT	547:43	547:43	9	SGILOGDATAFMT_8BIT
FIELD	547:43	547:43	10	SGILOGDATAFMT_8BIT
LEAF_NODE	547:43	547:43	11	SGILOGDATAFMT_8BIT
LEAF_NODE	547:61	547:61	9	)
LEAF_NODE	547:62	547:62	7	;
EXPR_STATEMENT	548:2	549:46	6	photometric = ( photometric == PHOTOMETRIC_LOGL ) ? PHOTOMETRIC_MINISBLACK : PHOTOMETRIC_RGB ;
EXPR	548:2	548:2	7	photometric = ( photometric == PHOTOMETRIC_LOGL ) ? PHOTOMETRIC_MINISBLACK : PHOTOMETRIC_RGB
ASSIGN	548:2	548:16	8	photometric = ( photometric == PHOTOMETRIC_LOGL ) ? PHOTOMETRIC_MINISBLACK : PHOTOMETRIC_RGB
LVAL	548:2	548:2	9	photometric
FIELD	548:2	548:2	10	photometric
LEAF_NODE	548:2	548:2	11	photometric
ASSIGN_OP	548:14	548:14	9	=
LEAF_NODE	548:14	548:14	10	=
RVAL	548:16	548:16	9	( photometric == PHOTOMETRIC_LOGL ) ? PHOTOMETRIC_MINISBLACK : PHOTOMETRIC_RGB
COND_EXPR	548:16	549:31	10	( photometric == PHOTOMETRIC_LOGL ) ? PHOTOMETRIC_MINISBLACK : PHOTOMETRIC_RGB
CONDITION	548:16	548:48	11	( photometric == PHOTOMETRIC_LOGL )
LEAF_NODE	548:16	548:16	12	(
FIELD	548:17	548:17	12	photometric
LEAF_NODE	548:17	548:17	13	photometric
EQ_OPERATOR	548:29	548:29	12	==
LEAF_NODE	548:29	548:29	13	==
FIELD	548:32	548:32	12	PHOTOMETRIC_LOGL
LEAF_NODE	548:32	548:32	13	PHOTOMETRIC_LOGL
LEAF_NODE	548:48	548:48	12	)
LEAF_NODE	548:50	548:50	11	?
EXPR	549:6	549:6	11	PHOTOMETRIC_MINISBLACK
FIELD	549:6	549:6	12	PHOTOMETRIC_MINISBLACK
LEAF_NODE	549:6	549:6	13	PHOTOMETRIC_MINISBLACK
LEAF_NODE	549:29	549:29	11	:
FIELD	549:31	549:31	11	PHOTOMETRIC_RGB
LEAF_NODE	549:31	549:31	12	PHOTOMETRIC_RGB
LEAF_NODE	549:46	549:46	7	;
EXPR_STATEMENT	550:2	550:19	6	bitspersample = 8 ;
EXPR	550:2	550:2	7	bitspersample = 8
ASSIGN	550:2	550:18	8	bitspersample = 8
LVAL	550:2	550:2	9	bitspersample
FIELD	550:2	550:2	10	bitspersample
LEAF_NODE	550:2	550:2	11	bitspersample
ASSIGN_OP	550:16	550:16	9	=
LEAF_NODE	550:16	550:16	10	=
RVAL	550:18	550:18	9	8
FIELD	550:18	550:18	10	8
LEAF_NODE	550:18	550:18	11	8
LEAF_NODE	550:19	550:19	7	;
JUMP_STATEMENT	551:2	551:7	6	break DESTINATION ;
KEYWORD	551:2	551:2	7	break
LEAF_NODE	551:2	551:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	551:7	551:7	7	;
LABEL	552:1	552:24	6	case PHOTOMETRIC_CIELAB :
LEAF_NODE	552:1	552:1	7	case
LEAF_NODE	552:6	552:6	7	PHOTOMETRIC_CIELAB
LEAF_NODE	552:24	552:24	7	:
LABEL	554:1	554:8	6	default :
LEAF_NODE	554:1	554:1	7	default
LEAF_NODE	554:8	554:8	7	:
EXPR_STATEMENT	555:2	557:18	6	TIFFError ( filename , "Can not handle image with PhotometricInterpretation=%d" , photometric ) ;
EXPR	555:2	555:2	7	TIFFError ( filename , "Can not handle image with PhotometricInterpretation=%d" , photometric )
FUNCTION_CALL	555:2	557:17	8	TIFFError ( filename , "Can not handle image with PhotometricInterpretation=%d" , photometric )
CALLEE	555:2	555:2	9	TIFFError
LEAF_NODE	555:2	555:2	10	TIFFError
LEAF_NODE	555:11	555:11	9	(
ARGUMENT	555:12	555:12	9	filename
FIELD	555:12	555:12	10	filename
LEAF_NODE	555:12	555:12	11	filename
LEAF_NODE	555:20	555:20	9	,
ARGUMENT	556:6	556:6	9	"Can not handle image with PhotometricInterpretation=%d"
FIELD	556:6	556:6	10	"Can not handle image with PhotometricInterpretation=%d"
LEAF_NODE	556:6	556:6	11	"Can not handle image with PhotometricInterpretation=%d"
LEAF_NODE	556:62	556:62	9	,
ARGUMENT	557:6	557:6	9	photometric
FIELD	557:6	557:6	10	photometric
LEAF_NODE	557:6	557:6	11	photometric
LEAF_NODE	557:17	557:17	9	)
LEAF_NODE	557:18	557:18	7	;
JUMP_STATEMENT	558:2	558:12	6	return ( 0 ) ;
KEYWORD	558:2	558:2	7	return
LEAF_NODE	558:2	558:2	8	return
DESTINATION	558:9	558:9	7	( 0 )
EXPR	558:9	558:11	8	( 0 )
LEAF_NODE	558:9	558:9	9	(
FIELD	558:10	558:10	9	0
LEAF_NODE	558:10	558:10	10	0
LEAF_NODE	558:11	558:11	9	)
LEAF_NODE	558:12	558:12	7	;
LEAF_NODE	559:1	559:1	5	}
SELECTION	560:1	560:24	3	
KEYWORD	560:1	560:1	4	switch
LEAF_NODE	560:1	560:1	5	switch
LEAF_NODE	560:8	560:8	4	(
CONDITION	560:9	560:9	4	bitspersample
EXPR	560:9	560:9	5	bitspersample
FIELD	560:9	560:9	6	bitspersample
LEAF_NODE	560:9	560:9	7	bitspersample
LEAF_NODE	560:22	560:22	4	)
STATEMENTS	560:24	569:1	4	
LEAF_NODE	560:24	560:24	5	{
STATEMENTS	561:1	568:2	5	
LABEL	561:1	561:7	6	case 1 :
LEAF_NODE	561:1	561:1	7	case
LEAF_NODE	561:6	561:6	7	1
LEAF_NODE	561:7	561:7	7	:
LABEL	561:9	561:15	6	case 2 :
LEAF_NODE	561:9	561:9	7	case
LEAF_NODE	561:14	561:14	7	2
LEAF_NODE	561:15	561:15	7	:
LABEL	562:1	562:7	6	case 4 :
LEAF_NODE	562:1	562:1	7	case
LEAF_NODE	562:6	562:6	7	4
LEAF_NODE	562:7	562:7	7	:
LABEL	562:9	562:15	6	case 8 :
LEAF_NODE	562:9	562:9	7	case
LEAF_NODE	562:14	562:14	7	8
LEAF_NODE	562:15	562:15	7	:
LABEL	563:1	563:8	6	case 16 :
LEAF_NODE	563:1	563:1	7	case
LEAF_NODE	563:6	563:6	7	16
LEAF_NODE	563:8	563:8	7	:
JUMP_STATEMENT	564:2	564:7	6	break DESTINATION ;
KEYWORD	564:2	564:2	7	break
LEAF_NODE	564:2	564:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	564:7	564:7	7	;
LABEL	565:1	565:8	6	default :
LEAF_NODE	565:1	565:1	7	default
LEAF_NODE	565:8	565:8	7	:
EXPR_STATEMENT	566:2	567:20	6	TIFFError ( filename , "Can not handle %d-bit/sample image" , bitspersample ) ;
EXPR	566:2	566:2	7	TIFFError ( filename , "Can not handle %d-bit/sample image" , bitspersample )
FUNCTION_CALL	566:2	567:19	8	TIFFError ( filename , "Can not handle %d-bit/sample image" , bitspersample )
CALLEE	566:2	566:2	9	TIFFError
LEAF_NODE	566:2	566:2	10	TIFFError
LEAF_NODE	566:11	566:11	9	(
ARGUMENT	566:12	566:12	9	filename
FIELD	566:12	566:12	10	filename
LEAF_NODE	566:12	566:12	11	filename
LEAF_NODE	566:20	566:20	9	,
ARGUMENT	566:22	566:22	9	"Can not handle %d-bit/sample image"
FIELD	566:22	566:22	10	"Can not handle %d-bit/sample image"
LEAF_NODE	566:22	566:22	11	"Can not handle %d-bit/sample image"
LEAF_NODE	566:58	566:58	9	,
ARGUMENT	567:6	567:6	9	bitspersample
FIELD	567:6	567:6	10	bitspersample
LEAF_NODE	567:6	567:6	11	bitspersample
LEAF_NODE	567:19	567:19	9	)
LEAF_NODE	567:20	567:20	7	;
JUMP_STATEMENT	568:2	568:12	6	return ( 0 ) ;
KEYWORD	568:2	568:2	7	return
LEAF_NODE	568:2	568:2	8	return
DESTINATION	568:9	568:9	7	( 0 )
EXPR	568:9	568:11	8	( 0 )
LEAF_NODE	568:9	568:9	9	(
FIELD	568:10	568:10	9	0
LEAF_NODE	568:10	568:10	10	0
LEAF_NODE	568:11	568:11	9	)
LEAF_NODE	568:12	568:12	7	;
LEAF_NODE	569:1	569:1	5	}
SELECTION	570:1	571:2	3	
KEYWORD	570:1	570:1	4	if
LEAF_NODE	570:1	570:1	5	if
LEAF_NODE	570:4	570:4	4	(
CONDITION	570:5	570:5	4	planarconfiguration == PLANARCONFIG_SEPARATE && extrasamples > 0
EXPR	570:5	570:5	5	planarconfiguration == PLANARCONFIG_SEPARATE && extrasamples > 0
AND	570:5	570:53	6	planarconfiguration == PLANARCONFIG_SEPARATE && extrasamples > 0
EXPR	570:5	570:28	7	planarconfiguration == PLANARCONFIG_SEPARATE
FIELD	570:5	570:5	8	planarconfiguration
LEAF_NODE	570:5	570:5	9	planarconfiguration
EQ_OPERATOR	570:25	570:25	8	==
LEAF_NODE	570:25	570:25	9	==
FIELD	570:28	570:28	8	PLANARCONFIG_SEPARATE
LEAF_NODE	570:28	570:28	9	PLANARCONFIG_SEPARATE
LEAF_NODE	570:50	570:50	7	&&
EXPR	570:53	570:68	7	extrasamples > 0
FIELD	570:53	570:53	8	extrasamples
LEAF_NODE	570:53	570:53	9	extrasamples
REL_OPERATOR	570:66	570:66	8	>
LEAF_NODE	570:66	570:66	9	>
FIELD	570:68	570:68	8	0
LEAF_NODE	570:68	570:68	9	0
LEAF_NODE	570:69	570:69	4	)
STATEMENTS	571:2	571:2	4	
EXPR_STATEMENT	571:2	571:49	5	TIFFWarning ( filename , "Ignoring extra samples" ) ;
EXPR	571:2	571:2	6	TIFFWarning ( filename , "Ignoring extra samples" )
FUNCTION_CALL	571:2	571:48	7	TIFFWarning ( filename , "Ignoring extra samples" )
CALLEE	571:2	571:2	8	TIFFWarning
LEAF_NODE	571:2	571:2	9	TIFFWarning
LEAF_NODE	571:13	571:13	8	(
ARGUMENT	571:14	571:14	8	filename
FIELD	571:14	571:14	9	filename
LEAF_NODE	571:14	571:14	10	filename
LEAF_NODE	571:22	571:22	8	,
ARGUMENT	571:24	571:24	8	"Ignoring extra samples"
FIELD	571:24	571:24	9	"Ignoring extra samples"
LEAF_NODE	571:24	571:24	10	"Ignoring extra samples"
LEAF_NODE	571:48	571:48	8	)
LEAF_NODE	571:49	571:49	6	;
JUMP_STATEMENT	572:1	572:11	3	return ( 1 ) ;
KEYWORD	572:1	572:1	4	return
LEAF_NODE	572:1	572:1	5	return
DESTINATION	572:8	572:8	4	( 1 )
EXPR	572:8	572:10	5	( 1 )
LEAF_NODE	572:8	572:8	6	(
FIELD	572:9	572:9	6	1
LEAF_NODE	572:9	572:9	7	1
LEAF_NODE	572:10	572:10	6	)
LEAF_NODE	572:11	572:11	4	;
LEAF_NODE	573:0	573:0	2	}
SIMPLE_DECL	578:7	597:1	1	char [ ] RGBcolorimage ; RGBcolorimage = "\\n/bwproc {\n\\n    rgbproc\n\\n    dup length 3 idiv string 0 3 0\n\\n    5 -1 roll {\n\\n\tadd 2 1 roll 1 sub dup 0 eq {\n\\n\t    pop 3 idiv\n\\n\t    3 -1 roll\n\\n\t    dup 4 -1 roll\n\\n\t    dup 3 1 roll\n\\n\t    5 -1 roll put\n\\n\t    1 add 3 0\n\\n\t} { 2 1 roll } ifelse\n\\n    } forall\n\\n    pop pop pop\n\\n} def\n\\n/colorimage where {pop} {\n\\n    /colorimage {pop pop /rgbproc exch def {bwproc} image} bind def\n\\n} ifelse\n\\n" ;
VAR_DECL	578:7	578:12	2	char [ ] RGBcolorimage ; RGBcolorimage = "\\n/bwproc {\n\\n    rgbproc\n\\n    dup length 3 idiv string 0 3 0\n\\n    5 -1 roll {\n\\n\tadd 2 1 roll 1 sub dup 0 eq {\n\\n\t    pop 3 idiv\n\\n\t    3 -1 roll\n\\n\t    dup 4 -1 roll\n\\n\t    dup 3 1 roll\n\\n\t    5 -1 roll put\n\\n\t    1 add 3 0\n\\n\t} { 2 1 roll } ifelse\n\\n    } forall\n\\n    pop pop pop\n\\n} def\n\\n/colorimage where {pop} {\n\\n    /colorimage {pop pop /rgbproc exch def {bwproc} image} bind def\n\\n} ifelse\n\\n"
TYPE	578:7	578:25	3	char [ ]
TYPE_NAME	578:7	578:7	4	char
LEAF_NODE	578:7	578:7	5	char
TYPE_SUFFIX	578:25	578:26	4	[ ]
LEAF_NODE	578:25	578:25	5	[
LEAF_NODE	578:26	578:26	5	]
NAME	578:12	578:12	3	RGBcolorimage
LEAF_NODE	578:12	578:12	4	RGBcolorimage
LEAF_NODE	0:0	0:0	3	;
INIT	578:12	578:12	3	RGBcolorimage = "\\n/bwproc {\n\\n    rgbproc\n\\n    dup length 3 idiv string 0 3 0\n\\n    5 -1 roll {\n\\n\tadd 2 1 roll 1 sub dup 0 eq {\n\\n\t    pop 3 idiv\n\\n\t    3 -1 roll\n\\n\t    dup 4 -1 roll\n\\n\t    dup 3 1 roll\n\\n\t    5 -1 roll put\n\\n\t    1 add 3 0\n\\n\t} { 2 1 roll } ifelse\n\\n    } forall\n\\n    pop pop pop\n\\n} def\n\\n/colorimage where {pop} {\n\\n    /colorimage {pop pop /rgbproc exch def {bwproc} image} bind def\n\\n} ifelse\n\\n"
ASSIGN	578:12	578:30	4	RGBcolorimage = "\\n/bwproc {\n\\n    rgbproc\n\\n    dup length 3 idiv string 0 3 0\n\\n    5 -1 roll {\n\\n\tadd 2 1 roll 1 sub dup 0 eq {\n\\n\t    pop 3 idiv\n\\n\t    3 -1 roll\n\\n\t    dup 4 -1 roll\n\\n\t    dup 3 1 roll\n\\n\t    5 -1 roll put\n\\n\t    1 add 3 0\n\\n\t} { 2 1 roll } ifelse\n\\n    } forall\n\\n    pop pop pop\n\\n} def\n\\n/colorimage where {pop} {\n\\n    /colorimage {pop pop /rgbproc exch def {bwproc} image} bind def\n\\n} ifelse\n\\n"
LVAL	578:12	578:12	5	RGBcolorimage
NAME	578:12	578:12	6	RGBcolorimage
LEAF_NODE	578:12	578:12	7	RGBcolorimage
ASSIGN_OP	578:28	578:28	5	=
LEAF_NODE	578:28	578:28	6	=
RVAL	578:30	578:30	5	"\\n/bwproc {\n\\n    rgbproc\n\\n    dup length 3 idiv string 0 3 0\n\\n    5 -1 roll {\n\\n\tadd 2 1 roll 1 sub dup 0 eq {\n\\n\t    pop 3 idiv\n\\n\t    3 -1 roll\n\\n\t    dup 4 -1 roll\n\\n\t    dup 3 1 roll\n\\n\t    5 -1 roll put\n\\n\t    1 add 3 0\n\\n\t} { 2 1 roll } ifelse\n\\n    } forall\n\\n    pop pop pop\n\\n} def\n\\n/colorimage where {pop} {\n\\n    /colorimage {pop pop /rgbproc exch def {bwproc} image} bind def\n\\n} ifelse\n\\n"
FIELD	578:30	578:30	6	"\\n/bwproc {\n\\n    rgbproc\n\\n    dup length 3 idiv string 0 3 0\n\\n    5 -1 roll {\n\\n\tadd 2 1 roll 1 sub dup 0 eq {\n\\n\t    pop 3 idiv\n\\n\t    3 -1 roll\n\\n\t    dup 4 -1 roll\n\\n\t    dup 3 1 roll\n\\n\t    5 -1 roll put\n\\n\t    1 add 3 0\n\\n\t} { 2 1 roll } ifelse\n\\n    } forall\n\\n    pop pop pop\n\\n} def\n\\n/colorimage where {pop} {\n\\n    /colorimage {pop pop /rgbproc exch def {bwproc} image} bind def\n\\n} ifelse\n\\n"
LEAF_NODE	578:30	578:30	7	"\\n/bwproc {\n\\n    rgbproc\n\\n    dup length 3 idiv string 0 3 0\n\\n    5 -1 roll {\n\\n\tadd 2 1 roll 1 sub dup 0 eq {\n\\n\t    pop 3 idiv\n\\n\t    3 -1 roll\n\\n\t    dup 4 -1 roll\n\\n\t    dup 3 1 roll\n\\n\t    5 -1 roll put\n\\n\t    1 add 3 0\n\\n\t} { 2 1 roll } ifelse\n\\n    } forall\n\\n    pop pop pop\n\\n} def\n\\n/colorimage where {pop} {\n\\n    /colorimage {pop pop /rgbproc exch def {bwproc} image} bind def\n\\n} ifelse\n\\n"
LEAF_NODE	597:1	597:1	2	;
FUNCTION_DEF	607:0	614:0	1	
RETURN_TYPE	607:0	607:7	2	static void
LEAF_NODE	607:0	607:0	3	static
TYPE_NAME	607:7	607:7	3	void
LEAF_NODE	607:7	607:7	4	void
FUNCTION_NAME	608:0	608:0	2	PhotoshopBanner
LEAF_NODE	608:0	608:0	3	PhotoshopBanner
PARAMETER_LIST	608:15	608:77	2	( FILE * fd , uint32 w , uint32 h , int bs , int nc , char * startline )
LEAF_NODE	608:15	608:15	3	(
PARAMETER_DECL	608:16	608:22	3	FILE * fd
TYPE	608:16	608:20	4	FILE *
TYPE_NAME	608:16	608:16	5	FILE
LEAF_NODE	608:16	608:16	6	FILE
POINTER	608:20	608:20	5	*
LEAF_NODE	608:20	608:20	6	*
NAME	608:22	608:22	4	fd
LEAF_NODE	608:22	608:22	5	fd
LEAF_NODE	608:24	608:24	3	,
PARAMETER_DECL	608:26	608:33	3	uint32 w
TYPE	608:26	608:26	4	uint32
TYPE_NAME	608:26	608:26	5	uint32
LEAF_NODE	608:26	608:26	6	uint32
NAME	608:33	608:33	4	w
LEAF_NODE	608:33	608:33	5	w
LEAF_NODE	608:34	608:34	3	,
PARAMETER_DECL	608:36	608:43	3	uint32 h
TYPE	608:36	608:36	4	uint32
TYPE_NAME	608:36	608:36	5	uint32
LEAF_NODE	608:36	608:36	6	uint32
NAME	608:43	608:43	4	h
LEAF_NODE	608:43	608:43	5	h
LEAF_NODE	608:44	608:44	3	,
PARAMETER_DECL	608:46	608:50	3	int bs
TYPE	608:46	608:46	4	int
TYPE_NAME	608:46	608:46	5	int
LEAF_NODE	608:46	608:46	6	int
NAME	608:50	608:50	4	bs
LEAF_NODE	608:50	608:50	5	bs
LEAF_NODE	608:52	608:52	3	,
PARAMETER_DECL	608:54	608:58	3	int nc
TYPE	608:54	608:54	4	int
TYPE_NAME	608:54	608:54	5	int
LEAF_NODE	608:54	608:54	6	int
NAME	608:58	608:58	4	nc
LEAF_NODE	608:58	608:58	5	nc
LEAF_NODE	608:60	608:60	3	,
PARAMETER_DECL	608:62	608:68	3	char * startline
TYPE	608:62	608:66	4	char *
TYPE_NAME	608:62	608:62	5	char
LEAF_NODE	608:62	608:62	6	char
POINTER	608:66	608:66	5	*
LEAF_NODE	608:66	608:66	6	*
NAME	608:68	608:68	4	startline
LEAF_NODE	608:68	608:68	5	startline
LEAF_NODE	608:77	608:77	3	)
LEAF_NODE	609:0	609:0	2	{
STATEMENTS	610:1	613:1	2	
EXPR_STATEMENT	610:1	611:47	3	fprintf ( fd , "%%ImageData: %ld %ld %d %d 0 %d 2 \"" , ( long ) w , ( long ) h , bitspersample , nc , bs ) ;
EXPR	610:1	610:1	4	fprintf ( fd , "%%ImageData: %ld %ld %d %d 0 %d 2 \"" , ( long ) w , ( long ) h , bitspersample , nc , bs )
FUNCTION_CALL	610:1	611:46	5	fprintf ( fd , "%%ImageData: %ld %ld %d %d 0 %d 2 \"" , ( long ) w , ( long ) h , bitspersample , nc , bs )
CALLEE	610:1	610:1	6	fprintf
LEAF_NODE	610:1	610:1	7	fprintf
LEAF_NODE	610:8	610:8	6	(
ARGUMENT	610:9	610:9	6	fd
FIELD	610:9	610:9	7	fd
LEAF_NODE	610:9	610:9	8	fd
LEAF_NODE	610:11	610:11	6	,
ARGUMENT	610:13	610:13	6	"%%ImageData: %ld %ld %d %d 0 %d 2 \""
FIELD	610:13	610:13	7	"%%ImageData: %ld %ld %d %d 0 %d 2 \""
LEAF_NODE	610:13	610:13	8	"%%ImageData: %ld %ld %d %d 0 %d 2 \""
LEAF_NODE	610:51	610:51	6	,
ARGUMENT	611:5	611:12	6	( long ) w
LEAF_NODE	611:5	611:5	7	(
TYPE_NAME	611:6	611:6	7	long
LEAF_NODE	611:6	611:6	8	long
LEAF_NODE	611:10	611:10	7	)
FIELD	611:12	611:12	7	w
LEAF_NODE	611:12	611:12	8	w
LEAF_NODE	611:13	611:13	6	,
ARGUMENT	611:15	611:22	6	( long ) h
LEAF_NODE	611:15	611:15	7	(
TYPE_NAME	611:16	611:16	7	long
LEAF_NODE	611:16	611:16	8	long
LEAF_NODE	611:20	611:20	7	)
FIELD	611:22	611:22	7	h
LEAF_NODE	611:22	611:22	8	h
LEAF_NODE	611:23	611:23	6	,
ARGUMENT	611:25	611:25	6	bitspersample
FIELD	611:25	611:25	7	bitspersample
LEAF_NODE	611:25	611:25	8	bitspersample
LEAF_NODE	611:38	611:38	6	,
ARGUMENT	611:40	611:40	6	nc
FIELD	611:40	611:40	7	nc
LEAF_NODE	611:40	611:40	8	nc
LEAF_NODE	611:42	611:42	6	,
ARGUMENT	611:44	611:44	6	bs
FIELD	611:44	611:44	7	bs
LEAF_NODE	611:44	611:44	8	bs
LEAF_NODE	611:46	611:46	6	)
LEAF_NODE	611:47	611:47	4	;
EXPR_STATEMENT	612:1	612:27	3	fprintf ( fd , startline , nc ) ;
EXPR	612:1	612:1	4	fprintf ( fd , startline , nc )
FUNCTION_CALL	612:1	612:26	5	fprintf ( fd , startline , nc )
CALLEE	612:1	612:1	6	fprintf
LEAF_NODE	612:1	612:1	7	fprintf
LEAF_NODE	612:8	612:8	6	(
ARGUMENT	612:9	612:9	6	fd
FIELD	612:9	612:9	7	fd
LEAF_NODE	612:9	612:9	8	fd
LEAF_NODE	612:11	612:11	6	,
ARGUMENT	612:13	612:13	6	startline
FIELD	612:13	612:13	7	startline
LEAF_NODE	612:13	612:13	8	startline
LEAF_NODE	612:22	612:22	6	,
ARGUMENT	612:24	612:24	6	nc
FIELD	612:24	612:24	7	nc
LEAF_NODE	612:24	612:24	8	nc
LEAF_NODE	612:26	612:26	6	)
LEAF_NODE	612:27	612:27	4	;
EXPR_STATEMENT	613:1	613:20	3	fprintf ( fd , "\"\n" ) ;
EXPR	613:1	613:1	4	fprintf ( fd , "\"\n" )
FUNCTION_CALL	613:1	613:19	5	fprintf ( fd , "\"\n" )
CALLEE	613:1	613:1	6	fprintf
LEAF_NODE	613:1	613:1	7	fprintf
LEAF_NODE	613:8	613:8	6	(
ARGUMENT	613:9	613:9	6	fd
FIELD	613:9	613:9	7	fd
LEAF_NODE	613:9	613:9	8	fd
LEAF_NODE	613:11	613:11	6	,
ARGUMENT	613:13	613:13	6	"\"\n"
FIELD	613:13	613:13	7	"\"\n"
LEAF_NODE	613:13	613:13	8	"\"\n"
LEAF_NODE	613:19	613:19	6	)
LEAF_NODE	613:20	613:20	4	;
LEAF_NODE	614:0	614:0	2	}
FUNCTION_DEF	623:0	670:0	1	
RETURN_TYPE	623:0	623:7	2	static void
LEAF_NODE	623:0	623:0	3	static
TYPE_NAME	623:7	623:7	3	void
LEAF_NODE	623:7	623:7	4	void
FUNCTION_NAME	624:0	624:0	2	setupPageState
LEAF_NODE	624:0	624:0	3	setupPageState
PARAMETER_LIST	624:14	624:76	2	( TIFF * tif , uint32 * pw , uint32 * ph , double * pprw , double * pprh )
LEAF_NODE	624:14	624:14	3	(
PARAMETER_DECL	624:15	624:21	3	TIFF * tif
TYPE	624:15	624:19	4	TIFF *
TYPE_NAME	624:15	624:15	5	TIFF
LEAF_NODE	624:15	624:15	6	TIFF
POINTER	624:19	624:19	5	*
LEAF_NODE	624:19	624:19	6	*
NAME	624:21	624:21	4	tif
LEAF_NODE	624:21	624:21	5	tif
LEAF_NODE	624:24	624:24	3	,
PARAMETER_DECL	624:26	624:34	3	uint32 * pw
TYPE	624:26	624:32	4	uint32 *
TYPE_NAME	624:26	624:26	5	uint32
LEAF_NODE	624:26	624:26	6	uint32
POINTER	624:32	624:32	5	*
LEAF_NODE	624:32	624:32	6	*
NAME	624:34	624:34	4	pw
LEAF_NODE	624:34	624:34	5	pw
LEAF_NODE	624:36	624:36	3	,
PARAMETER_DECL	624:38	624:46	3	uint32 * ph
TYPE	624:38	624:44	4	uint32 *
TYPE_NAME	624:38	624:38	5	uint32
LEAF_NODE	624:38	624:38	6	uint32
POINTER	624:44	624:44	5	*
LEAF_NODE	624:44	624:44	6	*
NAME	624:46	624:46	4	ph
LEAF_NODE	624:46	624:46	5	ph
LEAF_NODE	624:48	624:48	3	,
PARAMETER_DECL	624:50	624:58	3	double * pprw
TYPE	624:50	624:56	4	double *
TYPE_NAME	624:50	624:50	5	double
LEAF_NODE	624:50	624:50	6	double
POINTER	624:56	624:56	5	*
LEAF_NODE	624:56	624:56	6	*
NAME	624:58	624:58	4	pprw
LEAF_NODE	624:58	624:58	5	pprw
LEAF_NODE	624:62	624:62	3	,
PARAMETER_DECL	624:64	624:72	3	double * pprh
TYPE	624:64	624:70	4	double *
TYPE_NAME	624:64	624:64	5	double
LEAF_NODE	624:64	624:64	6	double
POINTER	624:70	624:70	5	*
LEAF_NODE	624:70	624:70	6	*
NAME	624:72	624:72	4	pprh
LEAF_NODE	624:72	624:72	5	pprh
LEAF_NODE	624:76	624:76	3	)
LEAF_NODE	625:0	625:0	2	{
STATEMENTS	626:1	668:1	2	
SIMPLE_DECL	626:1	626:31	3	float xres ; xres = 0.0F , float yres ; yres = 0.0F ;
INIT_DECL_LIST	626:1	626:1	4	float xres ; xres = 0.0F , float yres ; yres = 0.0F
VAR_DECL	626:1	626:7	5	float xres ; xres = 0.0F
TYPE	626:1	626:1	6	float
TYPE_NAME	626:1	626:1	7	float
LEAF_NODE	626:1	626:1	8	float
NAME	626:7	626:7	6	xres
LEAF_NODE	626:7	626:7	7	xres
LEAF_NODE	0:0	0:0	6	;
INIT	626:7	626:7	6	xres = 0.0F
ASSIGN	626:7	626:14	7	xres = 0.0F
LVAL	626:7	626:7	8	xres
NAME	626:7	626:7	9	xres
LEAF_NODE	626:7	626:7	10	xres
ASSIGN_OP	626:12	626:12	8	=
LEAF_NODE	626:12	626:12	9	=
RVAL	626:14	626:14	8	0.0F
FIELD	626:14	626:14	9	0.0F
LEAF_NODE	626:14	626:14	10	0.0F
LEAF_NODE	626:18	626:18	5	,
VAR_DECL	626:1	626:20	5	float yres ; yres = 0.0F
TYPE	626:1	626:1	6	float
TYPE_NAME	626:1	626:1	7	float
LEAF_NODE	626:1	626:1	8	float
NAME	626:20	626:20	6	yres
LEAF_NODE	626:20	626:20	7	yres
LEAF_NODE	0:0	0:0	6	;
INIT	626:20	626:20	6	yres = 0.0F
ASSIGN	626:20	626:27	7	yres = 0.0F
LVAL	626:20	626:20	8	yres
NAME	626:20	626:20	9	yres
LEAF_NODE	626:20	626:20	10	yres
ASSIGN_OP	626:25	626:25	8	=
LEAF_NODE	626:25	626:25	9	=
RVAL	626:27	626:27	8	0.0F
FIELD	626:27	626:27	9	0.0F
LEAF_NODE	626:27	626:27	10	0.0F
LEAF_NODE	626:31	626:31	4	;
EXPR_STATEMENT	628:1	628:42	3	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , pw ) ;
EXPR	628:1	628:1	4	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , pw )
FUNCTION_CALL	628:1	628:41	5	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , pw )
CALLEE	628:1	628:1	6	TIFFGetField
LEAF_NODE	628:1	628:1	7	TIFFGetField
LEAF_NODE	628:13	628:13	6	(
ARGUMENT	628:14	628:14	6	tif
FIELD	628:14	628:14	7	tif
LEAF_NODE	628:14	628:14	8	tif
LEAF_NODE	628:17	628:17	6	,
ARGUMENT	628:19	628:19	6	TIFFTAG_IMAGEWIDTH
FIELD	628:19	628:19	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	628:19	628:19	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	628:37	628:37	6	,
ARGUMENT	628:39	628:39	6	pw
FIELD	628:39	628:39	7	pw
LEAF_NODE	628:39	628:39	8	pw
LEAF_NODE	628:41	628:41	6	)
LEAF_NODE	628:42	628:42	4	;
EXPR_STATEMENT	629:1	629:43	3	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , ph ) ;
EXPR	629:1	629:1	4	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , ph )
FUNCTION_CALL	629:1	629:42	5	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , ph )
CALLEE	629:1	629:1	6	TIFFGetField
LEAF_NODE	629:1	629:1	7	TIFFGetField
LEAF_NODE	629:13	629:13	6	(
ARGUMENT	629:14	629:14	6	tif
FIELD	629:14	629:14	7	tif
LEAF_NODE	629:14	629:14	8	tif
LEAF_NODE	629:17	629:17	6	,
ARGUMENT	629:19	629:19	6	TIFFTAG_IMAGELENGTH
FIELD	629:19	629:19	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	629:19	629:19	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	629:38	629:38	6	,
ARGUMENT	629:40	629:40	6	ph
FIELD	629:40	629:40	7	ph
LEAF_NODE	629:40	629:40	8	ph
LEAF_NODE	629:42	629:42	6	)
LEAF_NODE	629:43	629:43	4	;
SELECTION	630:1	631:2	3	
KEYWORD	630:1	630:1	4	if
LEAF_NODE	630:1	630:1	5	if
LEAF_NODE	630:4	630:4	4	(
CONDITION	630:5	630:5	4	res_unit == 0
EXPR	630:5	630:17	5	res_unit == 0
FIELD	630:5	630:5	6	res_unit
LEAF_NODE	630:5	630:5	7	res_unit
EQ_OPERATOR	630:14	630:14	6	==
LEAF_NODE	630:14	630:14	7	==
FIELD	630:17	630:17	6	0
LEAF_NODE	630:17	630:17	7	0
LEAF_NODE	630:18	630:18	4	)
STATEMENTS	631:2	631:2	4	
SELECTION	631:2	632:3	5	
KEYWORD	631:2	631:2	6	if
LEAF_NODE	631:2	631:2	7	if
LEAF_NODE	631:5	631:5	6	(
CONDITION	631:6	631:6	6	! TIFFGetFieldDefaulted ( tif , TIFFTAG_RESOLUTIONUNIT , & res_unit )
EXPR	631:6	631:6	7	! TIFFGetFieldDefaulted ( tif , TIFFTAG_RESOLUTIONUNIT , & res_unit )
UNARY_EXPR	631:6	631:7	8	! TIFFGetFieldDefaulted ( tif , TIFFTAG_RESOLUTIONUNIT , & res_unit )
UNARY_OPERATOR	631:6	631:6	9	!
LEAF_NODE	631:6	631:6	10	!
FUNCTION_CALL	631:7	631:67	9	TIFFGetFieldDefaulted ( tif , TIFFTAG_RESOLUTIONUNIT , & res_unit )
CALLEE	631:7	631:7	10	TIFFGetFieldDefaulted
LEAF_NODE	631:7	631:7	11	TIFFGetFieldDefaulted
LEAF_NODE	631:28	631:28	10	(
ARGUMENT	631:29	631:29	10	tif
FIELD	631:29	631:29	11	tif
LEAF_NODE	631:29	631:29	12	tif
LEAF_NODE	631:32	631:32	10	,
ARGUMENT	631:34	631:34	10	TIFFTAG_RESOLUTIONUNIT
FIELD	631:34	631:34	11	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	631:34	631:34	12	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	631:56	631:56	10	,
ARGUMENT	631:58	631:58	10	& res_unit
UNARY_EXPR	631:58	631:59	11	& res_unit
UNARY_OPERATOR	631:58	631:58	12	&
LEAF_NODE	631:58	631:58	13	&
FIELD	631:59	631:59	12	res_unit
LEAF_NODE	631:59	631:59	13	res_unit
LEAF_NODE	631:67	631:67	10	)
LEAF_NODE	631:68	631:68	6	)
STATEMENTS	632:3	632:3	6	
EXPR_STATEMENT	632:3	632:26	7	res_unit = RESUNIT_INCH ;
EXPR	632:3	632:3	8	res_unit = RESUNIT_INCH
ASSIGN	632:3	632:14	9	res_unit = RESUNIT_INCH
LVAL	632:3	632:3	10	res_unit
FIELD	632:3	632:3	11	res_unit
LEAF_NODE	632:3	632:3	12	res_unit
ASSIGN_OP	632:12	632:12	10	=
LEAF_NODE	632:12	632:12	11	=
RVAL	632:14	632:14	10	RESUNIT_INCH
FIELD	632:14	632:14	11	RESUNIT_INCH
LEAF_NODE	632:14	632:14	12	RESUNIT_INCH
LEAF_NODE	632:26	632:26	8	;
SELECTION	636:1	638:2	3	
KEYWORD	636:1	636:1	4	if
LEAF_NODE	636:1	636:1	5	if
LEAF_NODE	636:4	636:4	4	(
CONDITION	636:5	636:5	4	! TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres ) || fabs ( xres ) < 0.0000001
EXPR	636:5	636:5	5	! TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres ) || fabs ( xres ) < 0.0000001
OR	636:5	637:15	6	! TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres ) || fabs ( xres ) < 0.0000001
EXPR	636:5	636:5	7	! TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres )
UNARY_EXPR	636:5	636:6	8	! TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres )
UNARY_OPERATOR	636:5	636:5	9	!
LEAF_NODE	636:5	636:5	10	!
FUNCTION_CALL	636:6	636:50	9	TIFFGetField ( tif , TIFFTAG_XRESOLUTION , & xres )
CALLEE	636:6	636:6	10	TIFFGetField
LEAF_NODE	636:6	636:6	11	TIFFGetField
LEAF_NODE	636:18	636:18	10	(
ARGUMENT	636:19	636:19	10	tif
FIELD	636:19	636:19	11	tif
LEAF_NODE	636:19	636:19	12	tif
LEAF_NODE	636:22	636:22	10	,
ARGUMENT	636:24	636:24	10	TIFFTAG_XRESOLUTION
FIELD	636:24	636:24	11	TIFFTAG_XRESOLUTION
LEAF_NODE	636:24	636:24	12	TIFFTAG_XRESOLUTION
LEAF_NODE	636:43	636:43	10	,
ARGUMENT	636:45	636:45	10	& xres
UNARY_EXPR	636:45	636:46	11	& xres
UNARY_OPERATOR	636:45	636:45	12	&
LEAF_NODE	636:45	636:45	13	&
FIELD	636:46	636:46	12	xres
LEAF_NODE	636:46	636:46	13	xres
LEAF_NODE	636:50	636:50	10	)
LEAF_NODE	637:12	637:12	7	||
EXPR	637:15	637:28	7	fabs ( xres ) < 0.0000001
FUNCTION_CALL	637:15	637:24	8	fabs ( xres )
CALLEE	637:15	637:15	9	fabs
LEAF_NODE	637:15	637:15	10	fabs
LEAF_NODE	637:19	637:19	9	(
ARGUMENT	637:20	637:20	9	xres
FIELD	637:20	637:20	10	xres
LEAF_NODE	637:20	637:20	11	xres
LEAF_NODE	637:24	637:24	9	)
REL_OPERATOR	637:26	637:26	8	<
LEAF_NODE	637:26	637:26	9	<
FIELD	637:28	637:28	8	0.0000001
LEAF_NODE	637:28	637:28	9	0.0000001
LEAF_NODE	637:37	637:37	4	)
STATEMENTS	638:2	638:2	4	
EXPR_STATEMENT	638:2	638:21	5	xres = PS_UNIT_SIZE ;
EXPR	638:2	638:2	6	xres = PS_UNIT_SIZE
ASSIGN	638:2	638:9	7	xres = PS_UNIT_SIZE
LVAL	638:2	638:2	8	xres
FIELD	638:2	638:2	9	xres
LEAF_NODE	638:2	638:2	10	xres
ASSIGN_OP	638:7	638:7	8	=
LEAF_NODE	638:7	638:7	9	=
RVAL	638:9	638:9	8	PS_UNIT_SIZE
FIELD	638:9	638:9	9	PS_UNIT_SIZE
LEAF_NODE	638:9	638:9	10	PS_UNIT_SIZE
LEAF_NODE	638:21	638:21	6	;
SELECTION	639:1	641:2	3	
KEYWORD	639:1	639:1	4	if
LEAF_NODE	639:1	639:1	5	if
LEAF_NODE	639:4	639:4	4	(
CONDITION	639:5	639:5	4	! TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres ) || fabs ( yres ) < 0.0000001
EXPR	639:5	639:5	5	! TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres ) || fabs ( yres ) < 0.0000001
OR	639:5	640:15	6	! TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres ) || fabs ( yres ) < 0.0000001
EXPR	639:5	639:5	7	! TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres )
UNARY_EXPR	639:5	639:6	8	! TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres )
UNARY_OPERATOR	639:5	639:5	9	!
LEAF_NODE	639:5	639:5	10	!
FUNCTION_CALL	639:6	639:50	9	TIFFGetField ( tif , TIFFTAG_YRESOLUTION , & yres )
CALLEE	639:6	639:6	10	TIFFGetField
LEAF_NODE	639:6	639:6	11	TIFFGetField
LEAF_NODE	639:18	639:18	10	(
ARGUMENT	639:19	639:19	10	tif
FIELD	639:19	639:19	11	tif
LEAF_NODE	639:19	639:19	12	tif
LEAF_NODE	639:22	639:22	10	,
ARGUMENT	639:24	639:24	10	TIFFTAG_YRESOLUTION
FIELD	639:24	639:24	11	TIFFTAG_YRESOLUTION
LEAF_NODE	639:24	639:24	12	TIFFTAG_YRESOLUTION
LEAF_NODE	639:43	639:43	10	,
ARGUMENT	639:45	639:45	10	& yres
UNARY_EXPR	639:45	639:46	11	& yres
UNARY_OPERATOR	639:45	639:45	12	&
LEAF_NODE	639:45	639:45	13	&
FIELD	639:46	639:46	12	yres
LEAF_NODE	639:46	639:46	13	yres
LEAF_NODE	639:50	639:50	10	)
LEAF_NODE	640:12	640:12	7	||
EXPR	640:15	640:28	7	fabs ( yres ) < 0.0000001
FUNCTION_CALL	640:15	640:24	8	fabs ( yres )
CALLEE	640:15	640:15	9	fabs
LEAF_NODE	640:15	640:15	10	fabs
LEAF_NODE	640:19	640:19	9	(
ARGUMENT	640:20	640:20	9	yres
FIELD	640:20	640:20	10	yres
LEAF_NODE	640:20	640:20	11	yres
LEAF_NODE	640:24	640:24	9	)
REL_OPERATOR	640:26	640:26	8	<
LEAF_NODE	640:26	640:26	9	<
FIELD	640:28	640:28	8	0.0000001
LEAF_NODE	640:28	640:28	9	0.0000001
LEAF_NODE	640:37	640:37	4	)
STATEMENTS	641:2	641:2	4	
EXPR_STATEMENT	641:2	641:21	5	yres = PS_UNIT_SIZE ;
EXPR	641:2	641:2	6	yres = PS_UNIT_SIZE
ASSIGN	641:2	641:9	7	yres = PS_UNIT_SIZE
LVAL	641:2	641:2	8	yres
FIELD	641:2	641:2	9	yres
LEAF_NODE	641:2	641:2	10	yres
ASSIGN_OP	641:7	641:7	8	=
LEAF_NODE	641:7	641:7	9	=
RVAL	641:9	641:9	8	PS_UNIT_SIZE
FIELD	641:9	641:9	9	PS_UNIT_SIZE
LEAF_NODE	641:9	641:9	10	PS_UNIT_SIZE
LEAF_NODE	641:21	641:21	6	;
SELECTION	642:1	642:19	3	
KEYWORD	642:1	642:1	4	switch
LEAF_NODE	642:1	642:1	5	switch
LEAF_NODE	642:8	642:8	4	(
CONDITION	642:9	642:9	4	res_unit
EXPR	642:9	642:9	5	res_unit
FIELD	642:9	642:9	6	res_unit
LEAF_NODE	642:9	642:9	7	res_unit
LEAF_NODE	642:17	642:17	4	)
STATEMENTS	642:19	658:1	4	
LEAF_NODE	642:19	642:19	5	{
STATEMENTS	643:1	657:2	5	
LABEL	643:1	643:24	6	case RESUNIT_CENTIMETER :
LEAF_NODE	643:1	643:1	7	case
LEAF_NODE	643:6	643:6	7	RESUNIT_CENTIMETER
LEAF_NODE	643:24	643:24	7	:
EXPR_STATEMENT	644:2	644:30	6	xres *= 2.54F , yres *= 2.54F ;
EXPR	644:2	644:17	7	xres *= 2.54F , yres *= 2.54F
ASSIGN	644:2	644:10	8	xres *= 2.54F
LVAL	644:2	644:2	9	xres
FIELD	644:2	644:2	10	xres
LEAF_NODE	644:2	644:2	11	xres
ASSIGN_OP	644:7	644:7	9	*=
LEAF_NODE	644:7	644:7	10	*=
RVAL	644:10	644:10	9	2.54F
FIELD	644:10	644:10	10	2.54F
LEAF_NODE	644:10	644:10	11	2.54F
LEAF_NODE	644:15	644:15	8	,
ASSIGN	644:17	644:25	8	yres *= 2.54F
LVAL	644:17	644:17	9	yres
FIELD	644:17	644:17	10	yres
LEAF_NODE	644:17	644:17	11	yres
ASSIGN_OP	644:22	644:22	9	*=
LEAF_NODE	644:22	644:22	10	*=
RVAL	644:25	644:25	9	2.54F
FIELD	644:25	644:25	10	2.54F
LEAF_NODE	644:25	644:25	11	2.54F
LEAF_NODE	644:30	644:30	7	;
JUMP_STATEMENT	645:2	645:7	6	break DESTINATION ;
KEYWORD	645:2	645:2	7	break
LEAF_NODE	645:2	645:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	645:7	645:7	7	;
LABEL	646:1	646:18	6	case RESUNIT_INCH :
LEAF_NODE	646:1	646:1	7	case
LEAF_NODE	646:6	646:6	7	RESUNIT_INCH
LEAF_NODE	646:18	646:18	7	:
JUMP_STATEMENT	647:2	647:7	6	break DESTINATION ;
KEYWORD	647:2	647:2	7	break
LEAF_NODE	647:2	647:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	647:7	647:7	7	;
LABEL	648:1	648:18	6	case RESUNIT_NONE :
LEAF_NODE	648:1	648:1	7	case
LEAF_NODE	648:6	648:6	7	RESUNIT_NONE
LEAF_NODE	648:18	648:18	7	:
EXPR_STATEMENT	649:2	649:25	6	res_unit = RESUNIT_INCH ;
EXPR	649:2	649:2	7	res_unit = RESUNIT_INCH
ASSIGN	649:2	649:13	8	res_unit = RESUNIT_INCH
LVAL	649:2	649:2	9	res_unit
FIELD	649:2	649:2	10	res_unit
LEAF_NODE	649:2	649:2	11	res_unit
ASSIGN_OP	649:11	649:11	9	=
LEAF_NODE	649:11	649:11	10	=
RVAL	649:13	649:13	9	RESUNIT_INCH
FIELD	649:13	649:13	10	RESUNIT_INCH
LEAF_NODE	649:13	649:13	11	RESUNIT_INCH
LEAF_NODE	649:25	649:25	7	;
JUMP_STATEMENT	650:2	650:7	6	break DESTINATION ;
KEYWORD	650:2	650:2	7	break
LEAF_NODE	650:2	650:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	650:7	650:7	7	;
LABEL	651:1	651:8	6	default :
LEAF_NODE	651:1	651:1	7	default
LEAF_NODE	651:8	651:8	7	:
JUMP_STATEMENT	657:2	657:7	6	break DESTINATION ;
KEYWORD	657:2	657:2	7	break
LEAF_NODE	657:2	657:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	657:7	657:7	7	;
LEAF_NODE	658:1	658:1	5	}
SELECTION	662:1	663:2	3	
KEYWORD	662:1	662:1	4	if
LEAF_NODE	662:1	662:1	5	if
LEAF_NODE	662:4	662:4	4	(
CONDITION	662:5	662:5	4	( xres > 1.0 ) && ( xres != PS_UNIT_SIZE )
EXPR	662:5	662:5	5	( xres > 1.0 ) && ( xres != PS_UNIT_SIZE )
AND	662:5	662:21	6	( xres > 1.0 ) && ( xres != PS_UNIT_SIZE )
EXPR	662:5	662:16	7	( xres > 1.0 )
LEAF_NODE	662:5	662:5	8	(
FIELD	662:6	662:6	8	xres
LEAF_NODE	662:6	662:6	9	xres
REL_OPERATOR	662:11	662:11	8	>
LEAF_NODE	662:11	662:11	9	>
FIELD	662:13	662:13	8	1.0
LEAF_NODE	662:13	662:13	9	1.0
LEAF_NODE	662:16	662:16	8	)
LEAF_NODE	662:18	662:18	7	&&
EXPR	662:21	662:42	7	( xres != PS_UNIT_SIZE )
LEAF_NODE	662:21	662:21	8	(
FIELD	662:22	662:22	8	xres
LEAF_NODE	662:22	662:22	9	xres
EQ_OPERATOR	662:27	662:27	8	!=
LEAF_NODE	662:27	662:27	9	!=
FIELD	662:30	662:30	8	PS_UNIT_SIZE
LEAF_NODE	662:30	662:30	9	PS_UNIT_SIZE
LEAF_NODE	662:42	662:42	8	)
LEAF_NODE	662:43	662:43	4	)
STATEMENTS	663:2	663:2	4	
EXPR_STATEMENT	663:2	663:28	5	* pprw = PSUNITS ( * pw , xres ) ;
EXPR	663:2	663:2	6	* pprw = PSUNITS ( * pw , xres )
ASSIGN	663:2	663:10	7	* pprw = PSUNITS ( * pw , xres )
LVAL	663:2	663:2	8	* pprw
UNARY_EXPR	663:2	663:3	9	* pprw
UNARY_OPERATOR	663:2	663:2	10	*
LEAF_NODE	663:2	663:2	11	*
FIELD	663:3	663:3	10	pprw
LEAF_NODE	663:3	663:3	11	pprw
ASSIGN_OP	663:8	663:8	8	=
LEAF_NODE	663:8	663:8	9	=
RVAL	663:10	663:10	8	PSUNITS ( * pw , xres )
FUNCTION_CALL	663:10	663:27	9	PSUNITS ( * pw , xres )
CALLEE	663:10	663:10	10	PSUNITS
LEAF_NODE	663:10	663:10	11	PSUNITS
LEAF_NODE	663:17	663:17	10	(
ARGUMENT	663:18	663:18	10	* pw
UNARY_EXPR	663:18	663:19	11	* pw
UNARY_OPERATOR	663:18	663:18	12	*
LEAF_NODE	663:18	663:18	13	*
FIELD	663:19	663:19	12	pw
LEAF_NODE	663:19	663:19	13	pw
LEAF_NODE	663:21	663:21	10	,
ARGUMENT	663:23	663:23	10	xres
FIELD	663:23	663:23	11	xres
LEAF_NODE	663:23	663:23	12	xres
LEAF_NODE	663:27	663:27	10	)
LEAF_NODE	663:28	663:28	6	;
SELECTION	664:1	665:2	3	
KEYWORD	664:1	664:1	4	else
LEAF_NODE	664:1	664:1	5	else
STATEMENTS	665:2	665:2	4	
EXPR_STATEMENT	665:2	665:36	5	* pprw = PSUNITS ( * pw , PS_UNIT_SIZE ) ;
EXPR	665:2	665:2	6	* pprw = PSUNITS ( * pw , PS_UNIT_SIZE )
ASSIGN	665:2	665:10	7	* pprw = PSUNITS ( * pw , PS_UNIT_SIZE )
LVAL	665:2	665:2	8	* pprw
UNARY_EXPR	665:2	665:3	9	* pprw
UNARY_OPERATOR	665:2	665:2	10	*
LEAF_NODE	665:2	665:2	11	*
FIELD	665:3	665:3	10	pprw
LEAF_NODE	665:3	665:3	11	pprw
ASSIGN_OP	665:8	665:8	8	=
LEAF_NODE	665:8	665:8	9	=
RVAL	665:10	665:10	8	PSUNITS ( * pw , PS_UNIT_SIZE )
FUNCTION_CALL	665:10	665:35	9	PSUNITS ( * pw , PS_UNIT_SIZE )
CALLEE	665:10	665:10	10	PSUNITS
LEAF_NODE	665:10	665:10	11	PSUNITS
LEAF_NODE	665:17	665:17	10	(
ARGUMENT	665:18	665:18	10	* pw
UNARY_EXPR	665:18	665:19	11	* pw
UNARY_OPERATOR	665:18	665:18	12	*
LEAF_NODE	665:18	665:18	13	*
FIELD	665:19	665:19	12	pw
LEAF_NODE	665:19	665:19	13	pw
LEAF_NODE	665:21	665:21	10	,
ARGUMENT	665:23	665:23	10	PS_UNIT_SIZE
FIELD	665:23	665:23	11	PS_UNIT_SIZE
LEAF_NODE	665:23	665:23	12	PS_UNIT_SIZE
LEAF_NODE	665:35	665:35	10	)
LEAF_NODE	665:36	665:36	6	;
SELECTION	666:1	667:2	3	
KEYWORD	666:1	666:1	4	if
LEAF_NODE	666:1	666:1	5	if
LEAF_NODE	666:4	666:4	4	(
CONDITION	666:5	666:5	4	( yres > 1.0 ) && ( yres != PS_UNIT_SIZE )
EXPR	666:5	666:5	5	( yres > 1.0 ) && ( yres != PS_UNIT_SIZE )
AND	666:5	666:21	6	( yres > 1.0 ) && ( yres != PS_UNIT_SIZE )
EXPR	666:5	666:16	7	( yres > 1.0 )
LEAF_NODE	666:5	666:5	8	(
FIELD	666:6	666:6	8	yres
LEAF_NODE	666:6	666:6	9	yres
REL_OPERATOR	666:11	666:11	8	>
LEAF_NODE	666:11	666:11	9	>
FIELD	666:13	666:13	8	1.0
LEAF_NODE	666:13	666:13	9	1.0
LEAF_NODE	666:16	666:16	8	)
LEAF_NODE	666:18	666:18	7	&&
EXPR	666:21	666:42	7	( yres != PS_UNIT_SIZE )
LEAF_NODE	666:21	666:21	8	(
FIELD	666:22	666:22	8	yres
LEAF_NODE	666:22	666:22	9	yres
EQ_OPERATOR	666:27	666:27	8	!=
LEAF_NODE	666:27	666:27	9	!=
FIELD	666:30	666:30	8	PS_UNIT_SIZE
LEAF_NODE	666:30	666:30	9	PS_UNIT_SIZE
LEAF_NODE	666:42	666:42	8	)
LEAF_NODE	666:43	666:43	4	)
STATEMENTS	667:2	667:2	4	
EXPR_STATEMENT	667:2	667:28	5	* pprh = PSUNITS ( * ph , yres ) ;
EXPR	667:2	667:2	6	* pprh = PSUNITS ( * ph , yres )
ASSIGN	667:2	667:10	7	* pprh = PSUNITS ( * ph , yres )
LVAL	667:2	667:2	8	* pprh
UNARY_EXPR	667:2	667:3	9	* pprh
UNARY_OPERATOR	667:2	667:2	10	*
LEAF_NODE	667:2	667:2	11	*
FIELD	667:3	667:3	10	pprh
LEAF_NODE	667:3	667:3	11	pprh
ASSIGN_OP	667:8	667:8	8	=
LEAF_NODE	667:8	667:8	9	=
RVAL	667:10	667:10	8	PSUNITS ( * ph , yres )
FUNCTION_CALL	667:10	667:27	9	PSUNITS ( * ph , yres )
CALLEE	667:10	667:10	10	PSUNITS
LEAF_NODE	667:10	667:10	11	PSUNITS
LEAF_NODE	667:17	667:17	10	(
ARGUMENT	667:18	667:18	10	* ph
UNARY_EXPR	667:18	667:19	11	* ph
UNARY_OPERATOR	667:18	667:18	12	*
LEAF_NODE	667:18	667:18	13	*
FIELD	667:19	667:19	12	ph
LEAF_NODE	667:19	667:19	13	ph
LEAF_NODE	667:21	667:21	10	,
ARGUMENT	667:23	667:23	10	yres
FIELD	667:23	667:23	11	yres
LEAF_NODE	667:23	667:23	12	yres
LEAF_NODE	667:27	667:27	10	)
LEAF_NODE	667:28	667:28	6	;
SELECTION	668:1	669:2	3	
KEYWORD	668:1	668:1	4	else
LEAF_NODE	668:1	668:1	5	else
STATEMENTS	669:2	669:2	4	
EXPR_STATEMENT	669:2	669:36	5	* pprh = PSUNITS ( * ph , PS_UNIT_SIZE ) ;
EXPR	669:2	669:2	6	* pprh = PSUNITS ( * ph , PS_UNIT_SIZE )
ASSIGN	669:2	669:10	7	* pprh = PSUNITS ( * ph , PS_UNIT_SIZE )
LVAL	669:2	669:2	8	* pprh
UNARY_EXPR	669:2	669:3	9	* pprh
UNARY_OPERATOR	669:2	669:2	10	*
LEAF_NODE	669:2	669:2	11	*
FIELD	669:3	669:3	10	pprh
LEAF_NODE	669:3	669:3	11	pprh
ASSIGN_OP	669:8	669:8	8	=
LEAF_NODE	669:8	669:8	9	=
RVAL	669:10	669:10	8	PSUNITS ( * ph , PS_UNIT_SIZE )
FUNCTION_CALL	669:10	669:35	9	PSUNITS ( * ph , PS_UNIT_SIZE )
CALLEE	669:10	669:10	10	PSUNITS
LEAF_NODE	669:10	669:10	11	PSUNITS
LEAF_NODE	669:17	669:17	10	(
ARGUMENT	669:18	669:18	10	* ph
UNARY_EXPR	669:18	669:19	11	* ph
UNARY_OPERATOR	669:18	669:18	12	*
LEAF_NODE	669:18	669:18	13	*
FIELD	669:19	669:19	12	ph
LEAF_NODE	669:19	669:19	13	ph
LEAF_NODE	669:21	669:21	10	,
ARGUMENT	669:23	669:23	10	PS_UNIT_SIZE
FIELD	669:23	669:23	11	PS_UNIT_SIZE
LEAF_NODE	669:23	669:23	12	PS_UNIT_SIZE
LEAF_NODE	669:35	669:35	10	)
LEAF_NODE	669:36	669:36	6	;
LEAF_NODE	670:0	670:0	2	}
FUNCTION_DEF	672:0	681:0	1	
RETURN_TYPE	672:0	672:7	2	static int
LEAF_NODE	672:0	672:0	3	static
TYPE_NAME	672:7	672:7	3	int
LEAF_NODE	672:7	672:7	4	int
FUNCTION_NAME	673:0	673:0	2	isCCITTCompression
LEAF_NODE	673:0	673:0	3	isCCITTCompression
PARAMETER_LIST	673:18	673:28	2	( TIFF * tif )
LEAF_NODE	673:18	673:18	3	(
PARAMETER_DECL	673:19	673:25	3	TIFF * tif
TYPE	673:19	673:23	4	TIFF *
TYPE_NAME	673:19	673:19	5	TIFF
LEAF_NODE	673:19	673:19	6	TIFF
POINTER	673:23	673:23	5	*
LEAF_NODE	673:23	673:23	6	*
NAME	673:25	673:25	4	tif
LEAF_NODE	673:25	673:25	5	tif
LEAF_NODE	673:28	673:28	3	)
LEAF_NODE	674:0	674:0	2	{
STATEMENTS	675:4	677:4	2	
SIMPLE_DECL	675:4	675:19	3	uint16 compress ;
VAR_DECL	675:4	675:11	4	uint16 compress
TYPE	675:4	675:4	5	uint16
TYPE_NAME	675:4	675:4	6	uint16
LEAF_NODE	675:4	675:4	7	uint16
NAME	675:11	675:11	5	compress
LEAF_NODE	675:11	675:11	6	compress
LEAF_NODE	675:19	675:19	4	;
EXPR_STATEMENT	676:4	676:53	3	TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compress ) ;
EXPR	676:4	676:4	4	TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compress )
FUNCTION_CALL	676:4	676:52	5	TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compress )
CALLEE	676:4	676:4	6	TIFFGetField
LEAF_NODE	676:4	676:4	7	TIFFGetField
LEAF_NODE	676:16	676:16	6	(
ARGUMENT	676:17	676:17	6	tif
FIELD	676:17	676:17	7	tif
LEAF_NODE	676:17	676:17	8	tif
LEAF_NODE	676:20	676:20	6	,
ARGUMENT	676:22	676:22	6	TIFFTAG_COMPRESSION
FIELD	676:22	676:22	7	TIFFTAG_COMPRESSION
LEAF_NODE	676:22	676:22	8	TIFFTAG_COMPRESSION
LEAF_NODE	676:41	676:41	6	,
ARGUMENT	676:43	676:43	6	& compress
UNARY_EXPR	676:43	676:44	7	& compress
UNARY_OPERATOR	676:43	676:43	8	&
LEAF_NODE	676:43	676:43	9	&
FIELD	676:44	676:44	8	compress
LEAF_NODE	676:44	676:44	9	compress
LEAF_NODE	676:52	676:52	6	)
LEAF_NODE	676:53	676:53	4	;
JUMP_STATEMENT	677:4	680:39	3	return ( compress == COMPRESSION_CCITTFAX3 || compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW ) ;
KEYWORD	677:4	677:4	4	return
LEAF_NODE	677:4	677:4	5	return
DESTINATION	677:11	677:11	4	( compress == COMPRESSION_CCITTFAX3 || compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW )
EXPR	677:11	680:38	5	( compress == COMPRESSION_CCITTFAX3 || compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW )
LEAF_NODE	677:11	677:11	6	(
OR	677:12	678:5	6	compress == COMPRESSION_CCITTFAX3 || compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW
EXPR	677:12	677:24	7	compress == COMPRESSION_CCITTFAX3
FIELD	677:12	677:12	8	compress
LEAF_NODE	677:12	677:12	9	compress
EQ_OPERATOR	677:21	677:21	8	==
LEAF_NODE	677:21	677:21	9	==
FIELD	677:24	677:24	8	COMPRESSION_CCITTFAX3
LEAF_NODE	677:24	677:24	9	COMPRESSION_CCITTFAX3
LEAF_NODE	677:46	677:46	7	||
EXPR	678:5	678:5	7	compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW
OR	678:5	679:5	8	compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW
EXPR	678:5	678:17	9	compress == COMPRESSION_CCITTFAX4
FIELD	678:5	678:5	10	compress
LEAF_NODE	678:5	678:5	11	compress
EQ_OPERATOR	678:14	678:14	10	==
LEAF_NODE	678:14	678:14	11	==
FIELD	678:17	678:17	10	COMPRESSION_CCITTFAX4
LEAF_NODE	678:17	678:17	11	COMPRESSION_CCITTFAX4
LEAF_NODE	678:39	678:39	9	||
EXPR	679:5	679:5	9	compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW
OR	679:5	680:5	10	compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW
EXPR	679:5	679:17	11	compress == COMPRESSION_CCITTRLE
FIELD	679:5	679:5	12	compress
LEAF_NODE	679:5	679:5	13	compress
EQ_OPERATOR	679:14	679:14	12	==
LEAF_NODE	679:14	679:14	13	==
FIELD	679:17	679:17	12	COMPRESSION_CCITTRLE
LEAF_NODE	679:17	679:17	13	COMPRESSION_CCITTRLE
LEAF_NODE	679:38	679:38	11	||
EXPR	680:5	680:17	11	compress == COMPRESSION_CCITTRLEW
FIELD	680:5	680:5	12	compress
LEAF_NODE	680:5	680:5	13	compress
EQ_OPERATOR	680:14	680:14	12	==
LEAF_NODE	680:14	680:14	13	==
FIELD	680:17	680:17	12	COMPRESSION_CCITTRLEW
LEAF_NODE	680:17	680:17	13	COMPRESSION_CCITTRLEW
LEAF_NODE	680:38	680:38	6	)
LEAF_NODE	680:39	680:39	4	;
LEAF_NODE	681:0	681:0	2	}
SIMPLE_DECL	683:7	683:29	1	tsize_t tf_bytesperrow ;
VAR_DECL	683:7	683:15	2	tsize_t tf_bytesperrow
TYPE	683:7	683:7	3	tsize_t
TYPE_NAME	683:7	683:7	4	tsize_t
LEAF_NODE	683:7	683:7	5	tsize_t
NAME	683:15	683:15	3	tf_bytesperrow
LEAF_NODE	683:15	683:15	4	tf_bytesperrow
LEAF_NODE	683:29	683:29	2	;
SIMPLE_DECL	684:7	684:29	1	tsize_t ps_bytesperrow ;
VAR_DECL	684:7	684:15	2	tsize_t ps_bytesperrow
TYPE	684:7	684:7	3	tsize_t
TYPE_NAME	684:7	684:7	4	tsize_t
LEAF_NODE	684:7	684:7	5	tsize_t
NAME	684:15	684:15	3	ps_bytesperrow
LEAF_NODE	684:15	684:15	4	ps_bytesperrow
LEAF_NODE	684:29	684:29	2	;
SIMPLE_DECL	685:7	685:29	1	uint32 tf_rowsperstrip ;
VAR_DECL	685:7	685:14	2	uint32 tf_rowsperstrip
TYPE	685:7	685:7	3	uint32
TYPE_NAME	685:7	685:7	4	uint32
LEAF_NODE	685:7	685:7	5	uint32
NAME	685:14	685:14	3	tf_rowsperstrip
LEAF_NODE	685:14	685:14	4	tf_rowsperstrip
LEAF_NODE	685:29	685:29	2	;
SIMPLE_DECL	686:7	686:29	1	uint32 tf_numberstrips ;
VAR_DECL	686:7	686:14	2	uint32 tf_numberstrips
TYPE	686:7	686:7	3	uint32
TYPE_NAME	686:7	686:7	4	uint32
LEAF_NODE	686:7	686:7	5	uint32
NAME	686:14	686:14	3	tf_numberstrips
LEAF_NODE	686:14	686:14	4	tf_numberstrips
LEAF_NODE	686:29	686:29	2	;
SIMPLE_DECL	687:7	687:37	1	char * hex ; hex = "0123456789abcdef" ;
VAR_DECL	687:7	687:13	2	char * hex ; hex = "0123456789abcdef"
TYPE	687:7	687:12	3	char *
TYPE_NAME	687:7	687:7	4	char
LEAF_NODE	687:7	687:7	5	char
POINTER	687:12	687:12	4	*
LEAF_NODE	687:12	687:12	5	*
NAME	687:13	687:13	3	hex
LEAF_NODE	687:13	687:13	4	hex
LEAF_NODE	0:0	0:0	3	;
INIT	687:13	687:13	3	hex = "0123456789abcdef"
ASSIGN	687:13	687:19	4	hex = "0123456789abcdef"
LVAL	687:13	687:13	5	hex
NAME	687:13	687:13	6	hex
LEAF_NODE	687:13	687:13	7	hex
ASSIGN_OP	687:17	687:17	5	=
LEAF_NODE	687:17	687:17	6	=
RVAL	687:19	687:19	5	"0123456789abcdef"
FIELD	687:19	687:19	6	"0123456789abcdef"
LEAF_NODE	687:19	687:19	7	"0123456789abcdef"
LEAF_NODE	687:37	687:37	2	;
FUNCTION_DEF	698:0	823:2	1	
RETURN_TYPE	698:0	698:0	2	int
TYPE_NAME	698:0	698:0	3	int
LEAF_NODE	698:0	698:0	4	int
FUNCTION_NAME	698:4	698:4	2	get_subimage_count
LEAF_NODE	698:4	698:4	3	get_subimage_count
PARAMETER_LIST	698:22	701:35	2	( double pagewidth , double pageheight , double imagewidth , double imageheight , int * ximages , int * yimages , int rotation , double scale )
LEAF_NODE	698:22	698:22	3	(
PARAMETER_DECL	698:23	698:30	3	double pagewidth
TYPE	698:23	698:23	4	double
TYPE_NAME	698:23	698:23	5	double
LEAF_NODE	698:23	698:23	6	double
NAME	698:30	698:30	4	pagewidth
LEAF_NODE	698:30	698:30	5	pagewidth
LEAF_NODE	698:39	698:39	3	,
PARAMETER_DECL	698:42	698:49	3	double pageheight
TYPE	698:42	698:42	4	double
TYPE_NAME	698:42	698:42	5	double
LEAF_NODE	698:42	698:42	6	double
NAME	698:49	698:49	4	pageheight
LEAF_NODE	698:49	698:49	5	pageheight
LEAF_NODE	698:59	698:59	3	,
PARAMETER_DECL	699:9	699:16	3	double imagewidth
TYPE	699:9	699:9	4	double
TYPE_NAME	699:9	699:9	5	double
LEAF_NODE	699:9	699:9	6	double
NAME	699:16	699:16	4	imagewidth
LEAF_NODE	699:16	699:16	5	imagewidth
LEAF_NODE	699:26	699:26	3	,
PARAMETER_DECL	699:28	699:35	3	double imageheight
TYPE	699:28	699:28	4	double
TYPE_NAME	699:28	699:28	5	double
LEAF_NODE	699:28	699:28	6	double
NAME	699:35	699:35	4	imageheight
LEAF_NODE	699:35	699:35	5	imageheight
LEAF_NODE	699:46	699:46	3	,
PARAMETER_DECL	700:9	700:14	3	int * ximages
TYPE	700:9	700:13	4	int *
TYPE_NAME	700:9	700:9	5	int
LEAF_NODE	700:9	700:9	6	int
POINTER	700:13	700:13	5	*
LEAF_NODE	700:13	700:13	6	*
NAME	700:14	700:14	4	ximages
LEAF_NODE	700:14	700:14	5	ximages
LEAF_NODE	700:21	700:21	3	,
PARAMETER_DECL	700:23	700:28	3	int * yimages
TYPE	700:23	700:27	4	int *
TYPE_NAME	700:23	700:23	5	int
LEAF_NODE	700:23	700:23	6	int
POINTER	700:27	700:27	5	*
LEAF_NODE	700:27	700:27	6	*
NAME	700:28	700:28	4	yimages
LEAF_NODE	700:28	700:28	5	yimages
LEAF_NODE	700:35	700:35	3	,
PARAMETER_DECL	701:9	701:13	3	int rotation
TYPE	701:9	701:9	4	int
TYPE_NAME	701:9	701:9	5	int
LEAF_NODE	701:9	701:9	6	int
NAME	701:13	701:13	4	rotation
LEAF_NODE	701:13	701:13	5	rotation
LEAF_NODE	701:21	701:21	3	,
PARAMETER_DECL	701:23	701:30	3	double scale
TYPE	701:23	701:23	4	double
TYPE_NAME	701:23	701:23	5	double
LEAF_NODE	701:23	701:23	6	double
NAME	701:30	701:30	4	scale
LEAF_NODE	701:30	701:30	5	scale
LEAF_NODE	701:35	701:35	3	)
LEAF_NODE	702:0	702:0	2	{
STATEMENTS	703:1	822:16	2	
SIMPLE_DECL	703:1	703:14	3	int pages ; pages = 1 ;
VAR_DECL	703:1	703:5	4	int pages ; pages = 1
TYPE	703:1	703:1	5	int
TYPE_NAME	703:1	703:1	6	int
LEAF_NODE	703:1	703:1	7	int
NAME	703:5	703:5	5	pages
LEAF_NODE	703:5	703:5	6	pages
LEAF_NODE	0:0	0:0	5	;
INIT	703:5	703:5	5	pages = 1
ASSIGN	703:5	703:13	6	pages = 1
LVAL	703:5	703:5	7	pages
NAME	703:5	703:5	8	pages
LEAF_NODE	703:5	703:5	9	pages
ASSIGN_OP	703:11	703:11	7	=
LEAF_NODE	703:11	703:11	8	=
RVAL	703:13	703:13	7	1
FIELD	703:13	703:13	8	1
LEAF_NODE	703:13	703:13	9	1
LEAF_NODE	703:14	703:14	4	;
SIMPLE_DECL	704:1	704:23	3	double splitheight ; splitheight = 0 ;
VAR_DECL	704:1	704:8	4	double splitheight ; splitheight = 0
TYPE	704:1	704:1	5	double
TYPE_NAME	704:1	704:1	6	double
LEAF_NODE	704:1	704:1	7	double
NAME	704:8	704:8	5	splitheight
LEAF_NODE	704:8	704:8	6	splitheight
LEAF_NODE	0:0	0:0	5	;
INIT	704:8	704:8	5	splitheight = 0
ASSIGN	704:8	704:22	6	splitheight = 0
LVAL	704:8	704:8	7	splitheight
NAME	704:8	704:8	8	splitheight
LEAF_NODE	704:8	704:8	9	splitheight
ASSIGN_OP	704:20	704:20	7	=
LEAF_NODE	704:20	704:20	8	=
RVAL	704:22	704:22	7	0
FIELD	704:22	704:22	8	0
LEAF_NODE	704:22	704:22	9	0
LEAF_NODE	704:23	704:23	4	;
SIMPLE_DECL	705:1	705:23	3	double splitwidth ; splitwidth = 0 ;
VAR_DECL	705:1	705:8	4	double splitwidth ; splitwidth = 0
TYPE	705:1	705:1	5	double
TYPE_NAME	705:1	705:1	6	double
LEAF_NODE	705:1	705:1	7	double
NAME	705:8	705:8	5	splitwidth
LEAF_NODE	705:8	705:8	6	splitwidth
LEAF_NODE	0:0	0:0	5	;
INIT	705:8	705:8	5	splitwidth = 0
ASSIGN	705:8	705:22	6	splitwidth = 0
LVAL	705:8	705:8	7	splitwidth
NAME	705:8	705:8	8	splitwidth
LEAF_NODE	705:8	705:8	9	splitwidth
ASSIGN_OP	705:20	705:20	7	=
LEAF_NODE	705:20	705:20	8	=
RVAL	705:22	705:22	7	0
FIELD	705:22	705:22	8	0
LEAF_NODE	705:22	705:22	9	0
LEAF_NODE	705:23	705:23	4	;
SIMPLE_DECL	706:1	706:23	3	double overlap ; overlap = 0 ;
VAR_DECL	706:1	706:8	4	double overlap ; overlap = 0
TYPE	706:1	706:1	5	double
TYPE_NAME	706:1	706:1	6	double
LEAF_NODE	706:1	706:1	7	double
NAME	706:8	706:8	5	overlap
LEAF_NODE	706:8	706:8	6	overlap
LEAF_NODE	0:0	0:0	5	;
INIT	706:8	706:8	5	overlap = 0
ASSIGN	706:8	706:22	6	overlap = 0
LVAL	706:8	706:8	7	overlap
NAME	706:8	706:8	8	overlap
LEAF_NODE	706:8	706:8	9	overlap
ASSIGN_OP	706:20	706:20	7	=
LEAF_NODE	706:20	706:20	8	=
RVAL	706:22	706:22	7	0
FIELD	706:22	706:22	8	0
LEAF_NODE	706:22	706:22	9	0
LEAF_NODE	706:23	706:23	4	;
EXPR_STATEMENT	708:1	708:43	3	splitheight = maxPageHeight * PS_UNIT_SIZE ;
EXPR	708:1	708:1	4	splitheight = maxPageHeight * PS_UNIT_SIZE
ASSIGN	708:1	708:15	5	splitheight = maxPageHeight * PS_UNIT_SIZE
LVAL	708:1	708:1	6	splitheight
FIELD	708:1	708:1	7	splitheight
LEAF_NODE	708:1	708:1	8	splitheight
ASSIGN_OP	708:13	708:13	6	=
LEAF_NODE	708:13	708:13	7	=
RVAL	708:15	708:31	6	maxPageHeight * PS_UNIT_SIZE
FIELD	708:15	708:15	7	maxPageHeight
LEAF_NODE	708:15	708:15	8	maxPageHeight
LEAF_NODE	708:29	708:29	7	*
FIELD	708:31	708:31	7	PS_UNIT_SIZE
LEAF_NODE	708:31	708:31	8	PS_UNIT_SIZE
LEAF_NODE	708:43	708:43	4	;
EXPR_STATEMENT	709:1	709:43	3	splitwidth = maxPageWidth * PS_UNIT_SIZE ;
EXPR	709:1	709:1	4	splitwidth = maxPageWidth * PS_UNIT_SIZE
ASSIGN	709:1	709:15	5	splitwidth = maxPageWidth * PS_UNIT_SIZE
LVAL	709:1	709:1	6	splitwidth
FIELD	709:1	709:1	7	splitwidth
LEAF_NODE	709:1	709:1	8	splitwidth
ASSIGN_OP	709:13	709:13	6	=
LEAF_NODE	709:13	709:13	7	=
RVAL	709:15	709:31	6	maxPageWidth * PS_UNIT_SIZE
FIELD	709:15	709:15	7	maxPageWidth
LEAF_NODE	709:15	709:15	8	maxPageWidth
LEAF_NODE	709:29	709:29	7	*
FIELD	709:31	709:31	7	PS_UNIT_SIZE
LEAF_NODE	709:31	709:31	8	PS_UNIT_SIZE
LEAF_NODE	709:43	709:43	4	;
EXPR_STATEMENT	710:1	710:43	3	overlap = splitOverlap * PS_UNIT_SIZE ;
EXPR	710:1	710:1	4	overlap = splitOverlap * PS_UNIT_SIZE
ASSIGN	710:1	710:15	5	overlap = splitOverlap * PS_UNIT_SIZE
LVAL	710:1	710:1	6	overlap
FIELD	710:1	710:1	7	overlap
LEAF_NODE	710:1	710:1	8	overlap
ASSIGN_OP	710:13	710:13	6	=
LEAF_NODE	710:13	710:13	7	=
RVAL	710:15	710:31	6	splitOverlap * PS_UNIT_SIZE
FIELD	710:15	710:15	7	splitOverlap
LEAF_NODE	710:15	710:15	8	splitOverlap
LEAF_NODE	710:29	710:29	7	*
FIELD	710:31	710:31	7	PS_UNIT_SIZE
LEAF_NODE	710:31	710:31	8	PS_UNIT_SIZE
LEAF_NODE	710:43	710:43	4	;
EXPR_STATEMENT	711:1	711:27	3	pagewidth *= PS_UNIT_SIZE ;
EXPR	711:1	711:1	4	pagewidth *= PS_UNIT_SIZE
ASSIGN	711:1	711:15	5	pagewidth *= PS_UNIT_SIZE
LVAL	711:1	711:1	6	pagewidth
FIELD	711:1	711:1	7	pagewidth
LEAF_NODE	711:1	711:1	8	pagewidth
ASSIGN_OP	711:12	711:12	6	*=
LEAF_NODE	711:12	711:12	7	*=
RVAL	711:15	711:15	6	PS_UNIT_SIZE
FIELD	711:15	711:15	7	PS_UNIT_SIZE
LEAF_NODE	711:15	711:15	8	PS_UNIT_SIZE
LEAF_NODE	711:27	711:27	4	;
EXPR_STATEMENT	712:1	712:27	3	pageheight *= PS_UNIT_SIZE ;
EXPR	712:1	712:1	4	pageheight *= PS_UNIT_SIZE
ASSIGN	712:1	712:15	5	pageheight *= PS_UNIT_SIZE
LVAL	712:1	712:1	6	pageheight
FIELD	712:1	712:1	7	pageheight
LEAF_NODE	712:1	712:1	8	pageheight
ASSIGN_OP	712:12	712:12	6	*=
LEAF_NODE	712:12	712:12	7	*=
RVAL	712:15	712:15	6	PS_UNIT_SIZE
FIELD	712:15	712:15	7	PS_UNIT_SIZE
LEAF_NODE	712:15	712:15	8	PS_UNIT_SIZE
LEAF_NODE	712:27	712:27	4	;
SELECTION	714:1	715:1	3	
KEYWORD	714:1	714:1	4	if
LEAF_NODE	714:1	714:1	5	if
LEAF_NODE	714:4	714:4	4	(
CONDITION	714:5	714:5	4	( imagewidth < 1.0 ) || ( imageheight < 1.0 )
EXPR	714:5	714:5	5	( imagewidth < 1.0 ) || ( imageheight < 1.0 )
OR	714:5	714:27	6	( imagewidth < 1.0 ) || ( imageheight < 1.0 )
EXPR	714:5	714:22	7	( imagewidth < 1.0 )
LEAF_NODE	714:5	714:5	8	(
FIELD	714:6	714:6	8	imagewidth
LEAF_NODE	714:6	714:6	9	imagewidth
REL_OPERATOR	714:17	714:17	8	<
LEAF_NODE	714:17	714:17	9	<
FIELD	714:19	714:19	8	1.0
LEAF_NODE	714:19	714:19	9	1.0
LEAF_NODE	714:22	714:22	8	)
LEAF_NODE	714:24	714:24	7	||
EXPR	714:27	714:45	7	( imageheight < 1.0 )
LEAF_NODE	714:27	714:27	8	(
FIELD	714:28	714:28	8	imageheight
LEAF_NODE	714:28	714:28	9	imageheight
REL_OPERATOR	714:40	714:40	8	<
LEAF_NODE	714:40	714:40	9	<
FIELD	714:42	714:42	8	1.0
LEAF_NODE	714:42	714:42	9	1.0
LEAF_NODE	714:45	714:45	8	)
LEAF_NODE	714:46	714:46	4	)
STATEMENTS	715:1	718:1	4	
LEAF_NODE	715:1	715:1	5	{
STATEMENTS	716:2	717:2	5	
EXPR_STATEMENT	716:2	716:66	6	TIFFError ( "get_subimage_count" , "Invalid image width or height" ) ;
EXPR	716:2	716:2	7	TIFFError ( "get_subimage_count" , "Invalid image width or height" )
FUNCTION_CALL	716:2	716:65	8	TIFFError ( "get_subimage_count" , "Invalid image width or height" )
CALLEE	716:2	716:2	9	TIFFError
LEAF_NODE	716:2	716:2	10	TIFFError
LEAF_NODE	716:11	716:11	9	(
ARGUMENT	716:12	716:12	9	"get_subimage_count"
FIELD	716:12	716:12	10	"get_subimage_count"
LEAF_NODE	716:12	716:12	11	"get_subimage_count"
LEAF_NODE	716:32	716:32	9	,
ARGUMENT	716:34	716:34	9	"Invalid image width or height"
FIELD	716:34	716:34	10	"Invalid image width or height"
LEAF_NODE	716:34	716:34	11	"Invalid image width or height"
LEAF_NODE	716:65	716:65	9	)
LEAF_NODE	716:66	716:66	7	;
JUMP_STATEMENT	717:2	717:12	6	return ( 0 ) ;
KEYWORD	717:2	717:2	7	return
LEAF_NODE	717:2	717:2	8	return
DESTINATION	717:9	717:9	7	( 0 )
EXPR	717:9	717:11	8	( 0 )
LEAF_NODE	717:9	717:9	9	(
FIELD	717:10	717:10	9	0
LEAF_NODE	717:10	717:10	10	0
LEAF_NODE	717:11	717:11	9	)
LEAF_NODE	717:12	717:12	7	;
LEAF_NODE	718:1	718:1	5	}
SELECTION	720:2	721:4	3	
KEYWORD	720:2	720:2	4	switch
LEAF_NODE	720:2	720:2	5	switch
LEAF_NODE	720:9	720:9	4	(
CONDITION	720:10	720:10	4	rotation
EXPR	720:10	720:10	5	rotation
FIELD	720:10	720:10	6	rotation
LEAF_NODE	720:10	720:10	7	rotation
LEAF_NODE	720:18	720:18	4	)
STATEMENTS	721:4	820:2	4	
LEAF_NODE	721:4	721:4	5	{
STATEMENTS	722:4	819:13	5	
LABEL	722:4	722:10	6	case 0 :
LEAF_NODE	722:4	722:4	7	case
LEAF_NODE	722:9	722:9	7	0
LEAF_NODE	722:10	722:10	7	:
LABEL	723:4	723:12	6	case 180 :
LEAF_NODE	723:4	723:4	7	case
LEAF_NODE	723:9	723:9	7	180
LEAF_NODE	723:12	723:12	7	:
SELECTION	723:14	724:16	6	
KEYWORD	723:14	723:14	7	if
LEAF_NODE	723:14	723:14	8	if
LEAF_NODE	723:17	723:17	7	(
CONDITION	723:18	723:18	7	splitheight > 0
EXPR	723:18	723:32	8	splitheight > 0
FIELD	723:18	723:18	9	splitheight
LEAF_NODE	723:18	723:18	10	splitheight
REL_OPERATOR	723:30	723:30	9	>
LEAF_NODE	723:30	723:30	10	>
FIELD	723:32	723:32	9	0
LEAF_NODE	723:32	723:32	10	0
LEAF_NODE	723:33	723:33	7	)
STATEMENTS	724:16	741:15	7	
LEAF_NODE	724:16	724:16	8	{
STATEMENTS	725:15	733:16	8	
SELECTION	725:15	726:17	9	
KEYWORD	725:15	725:15	10	if
LEAF_NODE	725:15	725:15	11	if
LEAF_NODE	725:18	725:18	10	(
CONDITION	725:19	725:19	10	imageheight > splitheight
EXPR	725:19	725:33	11	imageheight > splitheight
FIELD	725:19	725:19	12	imageheight
LEAF_NODE	725:19	725:19	13	imageheight
REL_OPERATOR	725:31	725:31	12	>
LEAF_NODE	725:31	725:31	13	>
FIELD	725:33	725:33	12	splitheight
LEAF_NODE	725:33	725:33	13	splitheight
LEAF_NODE	725:44	725:44	10	)
STATEMENTS	726:17	732:17	10	
LEAF_NODE	726:17	726:17	11	{
STATEMENTS	727:17	731:17	11	
SELECTION	727:17	728:19	12	
KEYWORD	727:17	727:17	13	if
LEAF_NODE	727:17	727:17	14	if
LEAF_NODE	727:20	727:20	13	(
CONDITION	727:21	727:21	13	pagewidth
EXPR	727:21	727:21	14	pagewidth
FIELD	727:21	727:21	15	pagewidth
LEAF_NODE	727:21	727:21	16	pagewidth
LEAF_NODE	727:30	727:30	13	)
STATEMENTS	728:19	728:19	13	
EXPR_STATEMENT	728:19	728:86	14	* ximages = ( int ) ceil ( ( scale * imagewidth ) / ( pagewidth - overlap ) ) ;
EXPR	728:19	728:19	15	* ximages = ( int ) ceil ( ( scale * imagewidth ) / ( pagewidth - overlap ) )
ASSIGN	728:19	728:30	16	* ximages = ( int ) ceil ( ( scale * imagewidth ) / ( pagewidth - overlap ) )
LVAL	728:19	728:19	17	* ximages
UNARY_EXPR	728:19	728:20	18	* ximages
UNARY_OPERATOR	728:19	728:19	19	*
LEAF_NODE	728:19	728:19	20	*
FIELD	728:20	728:20	19	ximages
LEAF_NODE	728:20	728:20	20	ximages
ASSIGN_OP	728:28	728:28	17	=
LEAF_NODE	728:28	728:28	18	=
RVAL	728:30	728:35	17	( int ) ceil ( ( scale * imagewidth ) / ( pagewidth - overlap ) )
LEAF_NODE	728:30	728:30	18	(
TYPE_NAME	728:31	728:31	18	int
LEAF_NODE	728:31	728:31	19	int
LEAF_NODE	728:34	728:34	18	)
FUNCTION_CALL	728:35	728:85	18	ceil ( ( scale * imagewidth ) / ( pagewidth - overlap ) )
CALLEE	728:35	728:35	19	ceil
LEAF_NODE	728:35	728:35	20	ceil
LEAF_NODE	728:39	728:39	19	(
ARGUMENT	728:40	728:84	19	( scale * imagewidth ) / ( pagewidth - overlap )
LEAF_NODE	728:40	728:40	20	(
FIELD	728:41	728:41	20	scale
LEAF_NODE	728:41	728:41	21	scale
LEAF_NODE	728:47	728:47	20	*
FIELD	728:49	728:49	20	imagewidth
LEAF_NODE	728:49	728:49	21	imagewidth
LEAF_NODE	728:59	728:59	20	)
LEAF_NODE	728:62	728:62	20	/
LEAF_NODE	728:64	728:64	20	(
FIELD	728:65	728:65	20	pagewidth
LEAF_NODE	728:65	728:65	21	pagewidth
LEAF_NODE	728:75	728:75	20	-
FIELD	728:77	728:77	20	overlap
LEAF_NODE	728:77	728:77	21	overlap
LEAF_NODE	728:84	728:84	20	)
LEAF_NODE	728:85	728:85	19	)
LEAF_NODE	728:86	728:86	15	;
SELECTION	729:18	730:19	12	
KEYWORD	729:18	729:18	13	else
LEAF_NODE	729:18	729:18	14	else
STATEMENTS	730:19	730:19	13	
EXPR_STATEMENT	730:19	730:31	14	* ximages = 1 ;
EXPR	730:19	730:19	15	* ximages = 1
ASSIGN	730:19	730:30	16	* ximages = 1
LVAL	730:19	730:19	17	* ximages
UNARY_EXPR	730:19	730:20	18	* ximages
UNARY_OPERATOR	730:19	730:19	19	*
LEAF_NODE	730:19	730:19	20	*
FIELD	730:20	730:20	19	ximages
LEAF_NODE	730:20	730:20	20	ximages
ASSIGN_OP	730:28	730:28	17	=
LEAF_NODE	730:28	730:28	18	=
RVAL	730:30	730:30	17	1
FIELD	730:30	730:30	18	1
LEAF_NODE	730:30	730:30	19	1
LEAF_NODE	730:31	730:31	15	;
EXPR_STATEMENT	731:17	731:86	12	* yimages = ( int ) ceil ( ( scale * imageheight ) / ( splitheight - overlap ) ) ;
EXPR	731:17	731:17	13	* yimages = ( int ) ceil ( ( scale * imageheight ) / ( splitheight - overlap ) )
ASSIGN	731:17	731:28	14	* yimages = ( int ) ceil ( ( scale * imageheight ) / ( splitheight - overlap ) )
LVAL	731:17	731:17	15	* yimages
UNARY_EXPR	731:17	731:18	16	* yimages
UNARY_OPERATOR	731:17	731:17	17	*
LEAF_NODE	731:17	731:17	18	*
FIELD	731:18	731:18	17	yimages
LEAF_NODE	731:18	731:18	18	yimages
ASSIGN_OP	731:26	731:26	15	=
LEAF_NODE	731:26	731:26	16	=
RVAL	731:28	731:33	15	( int ) ceil ( ( scale * imageheight ) / ( splitheight - overlap ) )
LEAF_NODE	731:28	731:28	16	(
TYPE_NAME	731:29	731:29	16	int
LEAF_NODE	731:29	731:29	17	int
LEAF_NODE	731:32	731:32	16	)
FUNCTION_CALL	731:33	731:85	16	ceil ( ( scale * imageheight ) / ( splitheight - overlap ) )
CALLEE	731:33	731:33	17	ceil
LEAF_NODE	731:33	731:33	18	ceil
LEAF_NODE	731:37	731:37	17	(
ARGUMENT	731:38	731:84	17	( scale * imageheight ) / ( splitheight - overlap )
LEAF_NODE	731:38	731:38	18	(
FIELD	731:39	731:39	18	scale
LEAF_NODE	731:39	731:39	19	scale
LEAF_NODE	731:45	731:45	18	*
FIELD	731:47	731:47	18	imageheight
LEAF_NODE	731:47	731:47	19	imageheight
LEAF_NODE	731:58	731:58	18	)
LEAF_NODE	731:60	731:60	18	/
LEAF_NODE	731:62	731:62	18	(
FIELD	731:63	731:63	18	splitheight
LEAF_NODE	731:63	731:63	19	splitheight
LEAF_NODE	731:75	731:75	18	-
FIELD	731:77	731:77	18	overlap
LEAF_NODE	731:77	731:77	19	overlap
LEAF_NODE	731:84	731:84	18	)
LEAF_NODE	731:85	731:85	17	)
LEAF_NODE	731:86	731:86	13	;
LEAF_NODE	732:17	732:17	11	}
SELECTION	733:16	734:17	9	
KEYWORD	733:16	733:16	10	else
LEAF_NODE	733:16	733:16	11	else
STATEMENTS	734:17	740:17	10	
LEAF_NODE	734:17	734:17	11	{
STATEMENTS	735:17	739:17	11	
SELECTION	735:17	736:19	12	
KEYWORD	735:17	735:17	13	if
LEAF_NODE	735:17	735:17	14	if
LEAF_NODE	735:20	735:20	13	(
CONDITION	735:21	735:21	13	pagewidth
EXPR	735:21	735:21	14	pagewidth
FIELD	735:21	735:21	15	pagewidth
LEAF_NODE	735:21	735:21	16	pagewidth
LEAF_NODE	735:30	735:30	13	)
STATEMENTS	736:19	736:19	13	
EXPR_STATEMENT	736:19	736:85	14	* ximages = ( int ) ceil ( ( scale * imagewidth ) / ( pagewidth - overlap ) ) ;
EXPR	736:19	736:19	15	* ximages = ( int ) ceil ( ( scale * imagewidth ) / ( pagewidth - overlap ) )
ASSIGN	736:19	736:30	16	* ximages = ( int ) ceil ( ( scale * imagewidth ) / ( pagewidth - overlap ) )
LVAL	736:19	736:19	17	* ximages
UNARY_EXPR	736:19	736:20	18	* ximages
UNARY_OPERATOR	736:19	736:19	19	*
LEAF_NODE	736:19	736:19	20	*
FIELD	736:20	736:20	19	ximages
LEAF_NODE	736:20	736:20	20	ximages
ASSIGN_OP	736:28	736:28	17	=
LEAF_NODE	736:28	736:28	18	=
RVAL	736:30	736:35	17	( int ) ceil ( ( scale * imagewidth ) / ( pagewidth - overlap ) )
LEAF_NODE	736:30	736:30	18	(
TYPE_NAME	736:31	736:31	18	int
LEAF_NODE	736:31	736:31	19	int
LEAF_NODE	736:34	736:34	18	)
FUNCTION_CALL	736:35	736:84	18	ceil ( ( scale * imagewidth ) / ( pagewidth - overlap ) )
CALLEE	736:35	736:35	19	ceil
LEAF_NODE	736:35	736:35	20	ceil
LEAF_NODE	736:39	736:39	19	(
ARGUMENT	736:40	736:83	19	( scale * imagewidth ) / ( pagewidth - overlap )
LEAF_NODE	736:40	736:40	20	(
FIELD	736:41	736:41	20	scale
LEAF_NODE	736:41	736:41	21	scale
LEAF_NODE	736:47	736:47	20	*
FIELD	736:49	736:49	20	imagewidth
LEAF_NODE	736:49	736:49	21	imagewidth
LEAF_NODE	736:59	736:59	20	)
LEAF_NODE	736:61	736:61	20	/
LEAF_NODE	736:63	736:63	20	(
FIELD	736:64	736:64	20	pagewidth
LEAF_NODE	736:64	736:64	21	pagewidth
LEAF_NODE	736:74	736:74	20	-
FIELD	736:76	736:76	20	overlap
LEAF_NODE	736:76	736:76	21	overlap
LEAF_NODE	736:83	736:83	20	)
LEAF_NODE	736:84	736:84	19	)
LEAF_NODE	736:85	736:85	15	;
SELECTION	737:18	738:19	12	
KEYWORD	737:18	737:18	13	else
LEAF_NODE	737:18	737:18	14	else
STATEMENTS	738:19	738:19	13	
EXPR_STATEMENT	738:19	738:31	14	* ximages = 1 ;
EXPR	738:19	738:19	15	* ximages = 1
ASSIGN	738:19	738:30	16	* ximages = 1
LVAL	738:19	738:19	17	* ximages
UNARY_EXPR	738:19	738:20	18	* ximages
UNARY_OPERATOR	738:19	738:19	19	*
LEAF_NODE	738:19	738:19	20	*
FIELD	738:20	738:20	19	ximages
LEAF_NODE	738:20	738:20	20	ximages
ASSIGN_OP	738:28	738:28	17	=
LEAF_NODE	738:28	738:28	18	=
RVAL	738:30	738:30	17	1
FIELD	738:30	738:30	18	1
LEAF_NODE	738:30	738:30	19	1
LEAF_NODE	738:31	738:31	15	;
EXPR_STATEMENT	739:17	739:29	12	* yimages = 1 ;
EXPR	739:17	739:17	13	* yimages = 1
ASSIGN	739:17	739:28	14	* yimages = 1
LVAL	739:17	739:17	15	* yimages
UNARY_EXPR	739:17	739:18	16	* yimages
UNARY_OPERATOR	739:17	739:17	17	*
LEAF_NODE	739:17	739:17	18	*
FIELD	739:18	739:18	17	yimages
LEAF_NODE	739:18	739:18	18	yimages
ASSIGN_OP	739:26	739:26	15	=
LEAF_NODE	739:26	739:26	16	=
RVAL	739:28	739:28	15	1
FIELD	739:28	739:28	16	1
LEAF_NODE	739:28	739:28	17	1
LEAF_NODE	739:29	739:29	13	;
LEAF_NODE	740:17	740:17	11	}
LEAF_NODE	741:15	741:15	8	}
SELECTION	742:14	743:15	6	
KEYWORD	742:14	742:14	7	else
LEAF_NODE	742:14	742:14	8	else
STATEMENTS	743:15	768:15	7	
LEAF_NODE	743:15	743:15	8	{
STATEMENTS	744:16	763:16	8	
SELECTION	744:16	745:17	9	
KEYWORD	744:16	744:16	10	if
LEAF_NODE	744:16	744:16	11	if
LEAF_NODE	744:19	744:19	10	(
CONDITION	744:20	744:20	10	splitwidth > 0
EXPR	744:20	744:33	11	splitwidth > 0
FIELD	744:20	744:20	12	splitwidth
LEAF_NODE	744:20	744:20	13	splitwidth
REL_OPERATOR	744:31	744:31	12	>
LEAF_NODE	744:31	744:31	13	>
FIELD	744:33	744:33	12	0
LEAF_NODE	744:33	744:33	13	0
LEAF_NODE	744:34	744:34	10	)
STATEMENTS	745:17	762:17	10	
LEAF_NODE	745:17	745:17	11	{
STATEMENTS	746:17	754:18	11	
SELECTION	746:17	747:19	12	
KEYWORD	746:17	746:17	13	if
LEAF_NODE	746:17	746:17	14	if
LEAF_NODE	746:20	746:20	13	(
CONDITION	746:21	746:21	13	imagewidth > splitwidth
EXPR	746:21	746:33	14	imagewidth > splitwidth
FIELD	746:21	746:21	15	imagewidth
LEAF_NODE	746:21	746:21	16	imagewidth
REL_OPERATOR	746:32	746:32	15	>
LEAF_NODE	746:32	746:32	16	>
FIELD	746:33	746:33	15	splitwidth
LEAF_NODE	746:33	746:33	16	splitwidth
LEAF_NODE	746:43	746:43	13	)
STATEMENTS	747:19	753:19	13	
LEAF_NODE	747:19	747:19	14	{
STATEMENTS	748:19	751:20	14	
EXPR_STATEMENT	748:19	748:87	15	* ximages = ( int ) ceil ( ( scale * imagewidth ) / ( splitwidth - overlap ) ) ;
EXPR	748:19	748:19	16	* ximages = ( int ) ceil ( ( scale * imagewidth ) / ( splitwidth - overlap ) )
ASSIGN	748:19	748:30	17	* ximages = ( int ) ceil ( ( scale * imagewidth ) / ( splitwidth - overlap ) )
LVAL	748:19	748:19	18	* ximages
UNARY_EXPR	748:19	748:20	19	* ximages
UNARY_OPERATOR	748:19	748:19	20	*
LEAF_NODE	748:19	748:19	21	*
FIELD	748:20	748:20	20	ximages
LEAF_NODE	748:20	748:20	21	ximages
ASSIGN_OP	748:28	748:28	18	=
LEAF_NODE	748:28	748:28	19	=
RVAL	748:30	748:35	18	( int ) ceil ( ( scale * imagewidth ) / ( splitwidth - overlap ) )
LEAF_NODE	748:30	748:30	19	(
TYPE_NAME	748:31	748:31	19	int
LEAF_NODE	748:31	748:31	20	int
LEAF_NODE	748:34	748:34	19	)
FUNCTION_CALL	748:35	748:86	19	ceil ( ( scale * imagewidth ) / ( splitwidth - overlap ) )
CALLEE	748:35	748:35	20	ceil
LEAF_NODE	748:35	748:35	21	ceil
LEAF_NODE	748:39	748:39	20	(
ARGUMENT	748:40	748:85	20	( scale * imagewidth ) / ( splitwidth - overlap )
LEAF_NODE	748:40	748:40	21	(
FIELD	748:41	748:41	21	scale
LEAF_NODE	748:41	748:41	22	scale
LEAF_NODE	748:47	748:47	21	*
FIELD	748:49	748:49	21	imagewidth
LEAF_NODE	748:49	748:49	22	imagewidth
LEAF_NODE	748:59	748:59	21	)
LEAF_NODE	748:62	748:62	21	/
LEAF_NODE	748:64	748:64	21	(
FIELD	748:65	748:65	21	splitwidth
LEAF_NODE	748:65	748:65	22	splitwidth
LEAF_NODE	748:76	748:76	21	-
FIELD	748:78	748:78	21	overlap
LEAF_NODE	748:78	748:78	22	overlap
LEAF_NODE	748:85	748:85	21	)
LEAF_NODE	748:86	748:86	20	)
LEAF_NODE	748:87	748:87	16	;
SELECTION	749:20	750:21	15	
KEYWORD	749:20	749:20	16	if
LEAF_NODE	749:20	749:20	17	if
LEAF_NODE	749:23	749:23	16	(
CONDITION	749:24	749:24	16	pageheight
EXPR	749:24	749:24	17	pageheight
FIELD	749:24	749:24	18	pageheight
LEAF_NODE	749:24	749:24	19	pageheight
LEAF_NODE	749:34	749:34	16	)
STATEMENTS	750:21	750:21	16	
EXPR_STATEMENT	750:21	750:89	17	* yimages = ( int ) ceil ( ( scale * imageheight ) / ( pageheight - overlap ) ) ;
EXPR	750:21	750:21	18	* yimages = ( int ) ceil ( ( scale * imageheight ) / ( pageheight - overlap ) )
ASSIGN	750:21	750:32	19	* yimages = ( int ) ceil ( ( scale * imageheight ) / ( pageheight - overlap ) )
LVAL	750:21	750:21	20	* yimages
UNARY_EXPR	750:21	750:22	21	* yimages
UNARY_OPERATOR	750:21	750:21	22	*
LEAF_NODE	750:21	750:21	23	*
FIELD	750:22	750:22	22	yimages
LEAF_NODE	750:22	750:22	23	yimages
ASSIGN_OP	750:30	750:30	20	=
LEAF_NODE	750:30	750:30	21	=
RVAL	750:32	750:37	20	( int ) ceil ( ( scale * imageheight ) / ( pageheight - overlap ) )
LEAF_NODE	750:32	750:32	21	(
TYPE_NAME	750:33	750:33	21	int
LEAF_NODE	750:33	750:33	22	int
LEAF_NODE	750:36	750:36	21	)
FUNCTION_CALL	750:37	750:88	21	ceil ( ( scale * imageheight ) / ( pageheight - overlap ) )
CALLEE	750:37	750:37	22	ceil
LEAF_NODE	750:37	750:37	23	ceil
LEAF_NODE	750:41	750:41	22	(
ARGUMENT	750:42	750:87	22	( scale * imageheight ) / ( pageheight - overlap )
LEAF_NODE	750:42	750:42	23	(
FIELD	750:43	750:43	23	scale
LEAF_NODE	750:43	750:43	24	scale
LEAF_NODE	750:49	750:49	23	*
FIELD	750:51	750:51	23	imageheight
LEAF_NODE	750:51	750:51	24	imageheight
LEAF_NODE	750:62	750:62	23	)
LEAF_NODE	750:64	750:64	23	/
LEAF_NODE	750:66	750:66	23	(
FIELD	750:67	750:67	23	pageheight
LEAF_NODE	750:67	750:67	24	pageheight
LEAF_NODE	750:78	750:78	23	-
FIELD	750:80	750:80	23	overlap
LEAF_NODE	750:80	750:80	24	overlap
LEAF_NODE	750:87	750:87	23	)
LEAF_NODE	750:88	750:88	22	)
LEAF_NODE	750:89	750:89	18	;
SELECTION	751:20	752:21	15	
KEYWORD	751:20	751:20	16	else
LEAF_NODE	751:20	751:20	17	else
STATEMENTS	752:21	752:21	16	
EXPR_STATEMENT	752:21	752:33	17	* yimages = 1 ;
EXPR	752:21	752:21	18	* yimages = 1
ASSIGN	752:21	752:32	19	* yimages = 1
LVAL	752:21	752:21	20	* yimages
UNARY_EXPR	752:21	752:22	21	* yimages
UNARY_OPERATOR	752:21	752:21	22	*
LEAF_NODE	752:21	752:21	23	*
FIELD	752:22	752:22	22	yimages
LEAF_NODE	752:22	752:22	23	yimages
ASSIGN_OP	752:30	752:30	20	=
LEAF_NODE	752:30	752:30	21	=
RVAL	752:32	752:32	20	1
FIELD	752:32	752:32	21	1
LEAF_NODE	752:32	752:32	22	1
LEAF_NODE	752:33	752:33	18	;
LEAF_NODE	753:19	753:19	14	}
SELECTION	754:18	755:19	12	
KEYWORD	754:18	754:18	13	else
LEAF_NODE	754:18	754:18	14	else
STATEMENTS	755:19	761:19	13	
LEAF_NODE	755:19	755:19	14	{
STATEMENTS	756:19	759:20	14	
EXPR_STATEMENT	756:19	756:31	15	* ximages = 1 ;
EXPR	756:19	756:19	16	* ximages = 1
ASSIGN	756:19	756:30	17	* ximages = 1
LVAL	756:19	756:19	18	* ximages
UNARY_EXPR	756:19	756:20	19	* ximages
UNARY_OPERATOR	756:19	756:19	20	*
LEAF_NODE	756:19	756:19	21	*
FIELD	756:20	756:20	20	ximages
LEAF_NODE	756:20	756:20	21	ximages
ASSIGN_OP	756:28	756:28	18	=
LEAF_NODE	756:28	756:28	19	=
RVAL	756:30	756:30	18	1
FIELD	756:30	756:30	19	1
LEAF_NODE	756:30	756:30	20	1
LEAF_NODE	756:31	756:31	16	;
SELECTION	757:20	758:21	15	
KEYWORD	757:20	757:20	16	if
LEAF_NODE	757:20	757:20	17	if
LEAF_NODE	757:23	757:23	16	(
CONDITION	757:24	757:24	16	pageheight
EXPR	757:24	757:24	17	pageheight
FIELD	757:24	757:24	18	pageheight
LEAF_NODE	757:24	757:24	19	pageheight
LEAF_NODE	757:34	757:34	16	)
STATEMENTS	758:21	758:21	16	
EXPR_STATEMENT	758:21	758:89	17	* yimages = ( int ) ceil ( ( scale * imageheight ) / ( pageheight - overlap ) ) ;
EXPR	758:21	758:21	18	* yimages = ( int ) ceil ( ( scale * imageheight ) / ( pageheight - overlap ) )
ASSIGN	758:21	758:32	19	* yimages = ( int ) ceil ( ( scale * imageheight ) / ( pageheight - overlap ) )
LVAL	758:21	758:21	20	* yimages
UNARY_EXPR	758:21	758:22	21	* yimages
UNARY_OPERATOR	758:21	758:21	22	*
LEAF_NODE	758:21	758:21	23	*
FIELD	758:22	758:22	22	yimages
LEAF_NODE	758:22	758:22	23	yimages
ASSIGN_OP	758:30	758:30	20	=
LEAF_NODE	758:30	758:30	21	=
RVAL	758:32	758:37	20	( int ) ceil ( ( scale * imageheight ) / ( pageheight - overlap ) )
LEAF_NODE	758:32	758:32	21	(
TYPE_NAME	758:33	758:33	21	int
LEAF_NODE	758:33	758:33	22	int
LEAF_NODE	758:36	758:36	21	)
FUNCTION_CALL	758:37	758:88	21	ceil ( ( scale * imageheight ) / ( pageheight - overlap ) )
CALLEE	758:37	758:37	22	ceil
LEAF_NODE	758:37	758:37	23	ceil
LEAF_NODE	758:41	758:41	22	(
ARGUMENT	758:42	758:87	22	( scale * imageheight ) / ( pageheight - overlap )
LEAF_NODE	758:42	758:42	23	(
FIELD	758:43	758:43	23	scale
LEAF_NODE	758:43	758:43	24	scale
LEAF_NODE	758:49	758:49	23	*
FIELD	758:51	758:51	23	imageheight
LEAF_NODE	758:51	758:51	24	imageheight
LEAF_NODE	758:62	758:62	23	)
LEAF_NODE	758:64	758:64	23	/
LEAF_NODE	758:66	758:66	23	(
FIELD	758:67	758:67	23	pageheight
LEAF_NODE	758:67	758:67	24	pageheight
LEAF_NODE	758:78	758:78	23	-
FIELD	758:80	758:80	23	overlap
LEAF_NODE	758:80	758:80	24	overlap
LEAF_NODE	758:87	758:87	23	)
LEAF_NODE	758:88	758:88	22	)
LEAF_NODE	758:89	758:89	18	;
SELECTION	759:20	760:21	15	
KEYWORD	759:20	759:20	16	else
LEAF_NODE	759:20	759:20	17	else
STATEMENTS	760:21	760:21	16	
EXPR_STATEMENT	760:21	760:33	17	* yimages = 1 ;
EXPR	760:21	760:21	18	* yimages = 1
ASSIGN	760:21	760:32	19	* yimages = 1
LVAL	760:21	760:21	20	* yimages
UNARY_EXPR	760:21	760:22	21	* yimages
UNARY_OPERATOR	760:21	760:21	22	*
LEAF_NODE	760:21	760:21	23	*
FIELD	760:22	760:22	22	yimages
LEAF_NODE	760:22	760:22	23	yimages
ASSIGN_OP	760:30	760:30	20	=
LEAF_NODE	760:30	760:30	21	=
RVAL	760:32	760:32	20	1
FIELD	760:32	760:32	21	1
LEAF_NODE	760:32	760:32	22	1
LEAF_NODE	760:33	760:33	18	;
LEAF_NODE	761:19	761:19	14	}
LEAF_NODE	762:17	762:17	11	}
SELECTION	763:16	764:17	9	
KEYWORD	763:16	763:16	10	else
LEAF_NODE	763:16	763:16	11	else
STATEMENTS	764:17	767:17	10	
LEAF_NODE	764:17	764:17	11	{
STATEMENTS	765:17	766:17	11	
EXPR_STATEMENT	765:17	765:29	12	* ximages = 1 ;
EXPR	765:17	765:17	13	* ximages = 1
ASSIGN	765:17	765:28	14	* ximages = 1
LVAL	765:17	765:17	15	* ximages
UNARY_EXPR	765:17	765:18	16	* ximages
UNARY_OPERATOR	765:17	765:17	17	*
LEAF_NODE	765:17	765:17	18	*
FIELD	765:18	765:18	17	ximages
LEAF_NODE	765:18	765:18	18	ximages
ASSIGN_OP	765:26	765:26	15	=
LEAF_NODE	765:26	765:26	16	=
RVAL	765:28	765:28	15	1
FIELD	765:28	765:28	16	1
LEAF_NODE	765:28	765:28	17	1
LEAF_NODE	765:29	765:29	13	;
EXPR_STATEMENT	766:17	766:29	12	* yimages = 1 ;
EXPR	766:17	766:17	13	* yimages = 1
ASSIGN	766:17	766:28	14	* yimages = 1
LVAL	766:17	766:17	15	* yimages
UNARY_EXPR	766:17	766:18	16	* yimages
UNARY_OPERATOR	766:17	766:17	17	*
LEAF_NODE	766:17	766:17	18	*
FIELD	766:18	766:18	17	yimages
LEAF_NODE	766:18	766:18	18	yimages
ASSIGN_OP	766:26	766:26	15	=
LEAF_NODE	766:26	766:26	16	=
RVAL	766:28	766:28	15	1
FIELD	766:28	766:28	16	1
LEAF_NODE	766:28	766:28	17	1
LEAF_NODE	766:29	766:29	13	;
LEAF_NODE	767:17	767:17	11	}
LEAF_NODE	768:15	768:15	8	}
JUMP_STATEMENT	769:13	769:18	6	break DESTINATION ;
KEYWORD	769:13	769:13	7	break
LEAF_NODE	769:13	769:13	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	769:18	769:18	7	;
LABEL	770:4	770:11	6	case 90 :
LEAF_NODE	770:4	770:4	7	case
LEAF_NODE	770:9	770:9	7	90
LEAF_NODE	770:11	770:11	7	:
LABEL	771:4	771:12	6	case 270 :
LEAF_NODE	771:4	771:4	7	case
LEAF_NODE	771:9	771:9	7	270
LEAF_NODE	771:12	771:12	7	:
SELECTION	771:14	772:16	6	
KEYWORD	771:14	771:14	7	if
LEAF_NODE	771:14	771:14	8	if
LEAF_NODE	771:17	771:17	7	(
CONDITION	771:18	771:18	7	splitheight > 0
EXPR	771:18	771:32	8	splitheight > 0
FIELD	771:18	771:18	9	splitheight
LEAF_NODE	771:18	771:18	10	splitheight
REL_OPERATOR	771:30	771:30	9	>
LEAF_NODE	771:30	771:30	10	>
FIELD	771:32	771:32	9	0
LEAF_NODE	771:32	771:32	10	0
LEAF_NODE	771:33	771:33	7	)
STATEMENTS	772:16	789:15	7	
LEAF_NODE	772:16	772:16	8	{
STATEMENTS	773:15	781:16	8	
SELECTION	773:15	774:17	9	
KEYWORD	773:15	773:15	10	if
LEAF_NODE	773:15	773:15	11	if
LEAF_NODE	773:18	773:18	10	(
CONDITION	773:19	773:19	10	imagewidth > splitheight
EXPR	773:19	773:32	11	imagewidth > splitheight
FIELD	773:19	773:19	12	imagewidth
LEAF_NODE	773:19	773:19	13	imagewidth
REL_OPERATOR	773:30	773:30	12	>
LEAF_NODE	773:30	773:30	13	>
FIELD	773:32	773:32	12	splitheight
LEAF_NODE	773:32	773:32	13	splitheight
LEAF_NODE	773:43	773:43	10	)
STATEMENTS	774:17	780:17	10	
LEAF_NODE	774:17	774:17	11	{
STATEMENTS	775:17	778:18	11	
EXPR_STATEMENT	775:17	775:85	12	* yimages = ( int ) ceil ( ( scale * imagewidth ) / ( splitheight - overlap ) ) ;
EXPR	775:17	775:17	13	* yimages = ( int ) ceil ( ( scale * imagewidth ) / ( splitheight - overlap ) )
ASSIGN	775:17	775:28	14	* yimages = ( int ) ceil ( ( scale * imagewidth ) / ( splitheight - overlap ) )
LVAL	775:17	775:17	15	* yimages
UNARY_EXPR	775:17	775:18	16	* yimages
UNARY_OPERATOR	775:17	775:17	17	*
LEAF_NODE	775:17	775:17	18	*
FIELD	775:18	775:18	17	yimages
LEAF_NODE	775:18	775:18	18	yimages
ASSIGN_OP	775:26	775:26	15	=
LEAF_NODE	775:26	775:26	16	=
RVAL	775:28	775:33	15	( int ) ceil ( ( scale * imagewidth ) / ( splitheight - overlap ) )
LEAF_NODE	775:28	775:28	16	(
TYPE_NAME	775:29	775:29	16	int
LEAF_NODE	775:29	775:29	17	int
LEAF_NODE	775:32	775:32	16	)
FUNCTION_CALL	775:33	775:84	16	ceil ( ( scale * imagewidth ) / ( splitheight - overlap ) )
CALLEE	775:33	775:33	17	ceil
LEAF_NODE	775:33	775:33	18	ceil
LEAF_NODE	775:37	775:37	17	(
ARGUMENT	775:38	775:83	17	( scale * imagewidth ) / ( splitheight - overlap )
LEAF_NODE	775:38	775:38	18	(
FIELD	775:39	775:39	18	scale
LEAF_NODE	775:39	775:39	19	scale
LEAF_NODE	775:45	775:45	18	*
FIELD	775:47	775:47	18	imagewidth
LEAF_NODE	775:47	775:47	19	imagewidth
LEAF_NODE	775:57	775:57	18	)
LEAF_NODE	775:59	775:59	18	/
LEAF_NODE	775:61	775:61	18	(
FIELD	775:62	775:62	18	splitheight
LEAF_NODE	775:62	775:62	19	splitheight
LEAF_NODE	775:74	775:74	18	-
FIELD	775:76	775:76	18	overlap
LEAF_NODE	775:76	775:76	19	overlap
LEAF_NODE	775:83	775:83	18	)
LEAF_NODE	775:84	775:84	17	)
LEAF_NODE	775:85	775:85	13	;
SELECTION	776:18	777:19	12	
KEYWORD	776:18	776:18	13	if
LEAF_NODE	776:18	776:18	14	if
LEAF_NODE	776:21	776:21	13	(
CONDITION	776:22	776:22	13	pagewidth
EXPR	776:22	776:22	14	pagewidth
FIELD	776:22	776:22	15	pagewidth
LEAF_NODE	776:22	776:22	16	pagewidth
LEAF_NODE	776:31	776:31	13	)
STATEMENTS	777:19	777:19	13	
EXPR_STATEMENT	777:19	777:86	14	* ximages = ( int ) ceil ( ( scale * imageheight ) / ( pagewidth - overlap ) ) ;
EXPR	777:19	777:19	15	* ximages = ( int ) ceil ( ( scale * imageheight ) / ( pagewidth - overlap ) )
ASSIGN	777:19	777:30	16	* ximages = ( int ) ceil ( ( scale * imageheight ) / ( pagewidth - overlap ) )
LVAL	777:19	777:19	17	* ximages
UNARY_EXPR	777:19	777:20	18	* ximages
UNARY_OPERATOR	777:19	777:19	19	*
LEAF_NODE	777:19	777:19	20	*
FIELD	777:20	777:20	19	ximages
LEAF_NODE	777:20	777:20	20	ximages
ASSIGN_OP	777:28	777:28	17	=
LEAF_NODE	777:28	777:28	18	=
RVAL	777:30	777:35	17	( int ) ceil ( ( scale * imageheight ) / ( pagewidth - overlap ) )
LEAF_NODE	777:30	777:30	18	(
TYPE_NAME	777:31	777:31	18	int
LEAF_NODE	777:31	777:31	19	int
LEAF_NODE	777:34	777:34	18	)
FUNCTION_CALL	777:35	777:85	18	ceil ( ( scale * imageheight ) / ( pagewidth - overlap ) )
CALLEE	777:35	777:35	19	ceil
LEAF_NODE	777:35	777:35	20	ceil
LEAF_NODE	777:39	777:39	19	(
ARGUMENT	777:40	777:84	19	( scale * imageheight ) / ( pagewidth - overlap )
LEAF_NODE	777:40	777:40	20	(
FIELD	777:41	777:41	20	scale
LEAF_NODE	777:41	777:41	21	scale
LEAF_NODE	777:47	777:47	20	*
FIELD	777:49	777:49	20	imageheight
LEAF_NODE	777:49	777:49	21	imageheight
LEAF_NODE	777:60	777:60	20	)
LEAF_NODE	777:62	777:62	20	/
LEAF_NODE	777:64	777:64	20	(
FIELD	777:65	777:65	20	pagewidth
LEAF_NODE	777:65	777:65	21	pagewidth
LEAF_NODE	777:75	777:75	20	-
FIELD	777:77	777:77	20	overlap
LEAF_NODE	777:77	777:77	21	overlap
LEAF_NODE	777:84	777:84	20	)
LEAF_NODE	777:85	777:85	19	)
LEAF_NODE	777:86	777:86	15	;
SELECTION	778:18	779:19	12	
KEYWORD	778:18	778:18	13	else
LEAF_NODE	778:18	778:18	14	else
STATEMENTS	779:19	779:19	13	
EXPR_STATEMENT	779:19	779:31	14	* ximages = 1 ;
EXPR	779:19	779:19	15	* ximages = 1
ASSIGN	779:19	779:30	16	* ximages = 1
LVAL	779:19	779:19	17	* ximages
UNARY_EXPR	779:19	779:20	18	* ximages
UNARY_OPERATOR	779:19	779:19	19	*
LEAF_NODE	779:19	779:19	20	*
FIELD	779:20	779:20	19	ximages
LEAF_NODE	779:20	779:20	20	ximages
ASSIGN_OP	779:28	779:28	17	=
LEAF_NODE	779:28	779:28	18	=
RVAL	779:30	779:30	17	1
FIELD	779:30	779:30	18	1
LEAF_NODE	779:30	779:30	19	1
LEAF_NODE	779:31	779:31	15	;
LEAF_NODE	780:17	780:17	11	}
SELECTION	781:16	782:17	9	
KEYWORD	781:16	781:16	10	else
LEAF_NODE	781:16	781:16	11	else
STATEMENTS	782:17	788:17	10	
LEAF_NODE	782:17	782:17	11	{
STATEMENTS	783:17	786:18	11	
EXPR_STATEMENT	783:17	783:29	12	* yimages = 1 ;
EXPR	783:17	783:17	13	* yimages = 1
ASSIGN	783:17	783:28	14	* yimages = 1
LVAL	783:17	783:17	15	* yimages
UNARY_EXPR	783:17	783:18	16	* yimages
UNARY_OPERATOR	783:17	783:17	17	*
LEAF_NODE	783:17	783:17	18	*
FIELD	783:18	783:18	17	yimages
LEAF_NODE	783:18	783:18	18	yimages
ASSIGN_OP	783:26	783:26	15	=
LEAF_NODE	783:26	783:26	16	=
RVAL	783:28	783:28	15	1
FIELD	783:28	783:28	16	1
LEAF_NODE	783:28	783:28	17	1
LEAF_NODE	783:29	783:29	13	;
SELECTION	784:18	785:19	12	
KEYWORD	784:18	784:18	13	if
LEAF_NODE	784:18	784:18	14	if
LEAF_NODE	784:21	784:21	13	(
CONDITION	784:22	784:22	13	pagewidth
EXPR	784:22	784:22	14	pagewidth
FIELD	784:22	784:22	15	pagewidth
LEAF_NODE	784:22	784:22	16	pagewidth
LEAF_NODE	784:31	784:31	13	)
STATEMENTS	785:19	785:19	13	
EXPR_STATEMENT	785:19	785:86	14	* ximages = ( int ) ceil ( ( scale * imageheight ) / ( pagewidth - overlap ) ) ;
EXPR	785:19	785:19	15	* ximages = ( int ) ceil ( ( scale * imageheight ) / ( pagewidth - overlap ) )
ASSIGN	785:19	785:30	16	* ximages = ( int ) ceil ( ( scale * imageheight ) / ( pagewidth - overlap ) )
LVAL	785:19	785:19	17	* ximages
UNARY_EXPR	785:19	785:20	18	* ximages
UNARY_OPERATOR	785:19	785:19	19	*
LEAF_NODE	785:19	785:19	20	*
FIELD	785:20	785:20	19	ximages
LEAF_NODE	785:20	785:20	20	ximages
ASSIGN_OP	785:28	785:28	17	=
LEAF_NODE	785:28	785:28	18	=
RVAL	785:30	785:35	17	( int ) ceil ( ( scale * imageheight ) / ( pagewidth - overlap ) )
LEAF_NODE	785:30	785:30	18	(
TYPE_NAME	785:31	785:31	18	int
LEAF_NODE	785:31	785:31	19	int
LEAF_NODE	785:34	785:34	18	)
FUNCTION_CALL	785:35	785:85	18	ceil ( ( scale * imageheight ) / ( pagewidth - overlap ) )
CALLEE	785:35	785:35	19	ceil
LEAF_NODE	785:35	785:35	20	ceil
LEAF_NODE	785:39	785:39	19	(
ARGUMENT	785:40	785:84	19	( scale * imageheight ) / ( pagewidth - overlap )
LEAF_NODE	785:40	785:40	20	(
FIELD	785:41	785:41	20	scale
LEAF_NODE	785:41	785:41	21	scale
LEAF_NODE	785:47	785:47	20	*
FIELD	785:49	785:49	20	imageheight
LEAF_NODE	785:49	785:49	21	imageheight
LEAF_NODE	785:60	785:60	20	)
LEAF_NODE	785:62	785:62	20	/
LEAF_NODE	785:64	785:64	20	(
FIELD	785:65	785:65	20	pagewidth
LEAF_NODE	785:65	785:65	21	pagewidth
LEAF_NODE	785:75	785:75	20	-
FIELD	785:77	785:77	20	overlap
LEAF_NODE	785:77	785:77	21	overlap
LEAF_NODE	785:84	785:84	20	)
LEAF_NODE	785:85	785:85	19	)
LEAF_NODE	785:86	785:86	15	;
SELECTION	786:18	787:19	12	
KEYWORD	786:18	786:18	13	else
LEAF_NODE	786:18	786:18	14	else
STATEMENTS	787:19	787:19	13	
EXPR_STATEMENT	787:19	787:31	14	* ximages = 1 ;
EXPR	787:19	787:19	15	* ximages = 1
ASSIGN	787:19	787:30	16	* ximages = 1
LVAL	787:19	787:19	17	* ximages
UNARY_EXPR	787:19	787:20	18	* ximages
UNARY_OPERATOR	787:19	787:19	19	*
LEAF_NODE	787:19	787:19	20	*
FIELD	787:20	787:20	19	ximages
LEAF_NODE	787:20	787:20	20	ximages
ASSIGN_OP	787:28	787:28	17	=
LEAF_NODE	787:28	787:28	18	=
RVAL	787:30	787:30	17	1
FIELD	787:30	787:30	18	1
LEAF_NODE	787:30	787:30	19	1
LEAF_NODE	787:31	787:31	15	;
LEAF_NODE	788:17	788:17	11	}
LEAF_NODE	789:15	789:15	8	}
SELECTION	790:14	791:15	6	
KEYWORD	790:14	790:14	7	else
LEAF_NODE	790:14	790:14	8	else
STATEMENTS	791:15	816:15	7	
LEAF_NODE	791:15	791:15	8	{
STATEMENTS	792:16	811:16	8	
SELECTION	792:16	793:17	9	
KEYWORD	792:16	792:16	10	if
LEAF_NODE	792:16	792:16	11	if
LEAF_NODE	792:19	792:19	10	(
CONDITION	792:20	792:20	10	splitwidth > 0
EXPR	792:20	792:33	11	splitwidth > 0
FIELD	792:20	792:20	12	splitwidth
LEAF_NODE	792:20	792:20	13	splitwidth
REL_OPERATOR	792:31	792:31	12	>
LEAF_NODE	792:31	792:31	13	>
FIELD	792:33	792:33	12	0
LEAF_NODE	792:33	792:33	13	0
LEAF_NODE	792:34	792:34	10	)
STATEMENTS	793:17	810:17	10	
LEAF_NODE	793:17	793:17	11	{
STATEMENTS	794:17	802:18	11	
SELECTION	794:17	795:19	12	
KEYWORD	794:17	794:17	13	if
LEAF_NODE	794:17	794:17	14	if
LEAF_NODE	794:20	794:20	13	(
CONDITION	794:21	794:21	13	imageheight > splitwidth
EXPR	794:21	794:35	14	imageheight > splitwidth
FIELD	794:21	794:21	15	imageheight
LEAF_NODE	794:21	794:21	16	imageheight
REL_OPERATOR	794:33	794:33	15	>
LEAF_NODE	794:33	794:33	16	>
FIELD	794:35	794:35	15	splitwidth
LEAF_NODE	794:35	794:35	16	splitwidth
LEAF_NODE	794:45	794:45	13	)
STATEMENTS	795:19	801:19	13	
LEAF_NODE	795:19	795:19	14	{
STATEMENTS	796:19	800:19	14	
SELECTION	796:19	797:21	15	
KEYWORD	796:19	796:19	16	if
LEAF_NODE	796:19	796:19	17	if
LEAF_NODE	796:22	796:22	16	(
CONDITION	796:23	796:23	16	pageheight
EXPR	796:23	796:23	17	pageheight
FIELD	796:23	796:23	18	pageheight
LEAF_NODE	796:23	796:23	19	pageheight
LEAF_NODE	796:33	796:33	16	)
STATEMENTS	797:21	797:21	16	
EXPR_STATEMENT	797:21	797:88	17	* yimages = ( int ) ceil ( ( scale * imagewidth ) / ( pageheight - overlap ) ) ;
EXPR	797:21	797:21	18	* yimages = ( int ) ceil ( ( scale * imagewidth ) / ( pageheight - overlap ) )
ASSIGN	797:21	797:32	19	* yimages = ( int ) ceil ( ( scale * imagewidth ) / ( pageheight - overlap ) )
LVAL	797:21	797:21	20	* yimages
UNARY_EXPR	797:21	797:22	21	* yimages
UNARY_OPERATOR	797:21	797:21	22	*
LEAF_NODE	797:21	797:21	23	*
FIELD	797:22	797:22	22	yimages
LEAF_NODE	797:22	797:22	23	yimages
ASSIGN_OP	797:30	797:30	20	=
LEAF_NODE	797:30	797:30	21	=
RVAL	797:32	797:37	20	( int ) ceil ( ( scale * imagewidth ) / ( pageheight - overlap ) )
LEAF_NODE	797:32	797:32	21	(
TYPE_NAME	797:33	797:33	21	int
LEAF_NODE	797:33	797:33	22	int
LEAF_NODE	797:36	797:36	21	)
FUNCTION_CALL	797:37	797:87	21	ceil ( ( scale * imagewidth ) / ( pageheight - overlap ) )
CALLEE	797:37	797:37	22	ceil
LEAF_NODE	797:37	797:37	23	ceil
LEAF_NODE	797:41	797:41	22	(
ARGUMENT	797:42	797:86	22	( scale * imagewidth ) / ( pageheight - overlap )
LEAF_NODE	797:42	797:42	23	(
FIELD	797:43	797:43	23	scale
LEAF_NODE	797:43	797:43	24	scale
LEAF_NODE	797:49	797:49	23	*
FIELD	797:51	797:51	23	imagewidth
LEAF_NODE	797:51	797:51	24	imagewidth
LEAF_NODE	797:61	797:61	23	)
LEAF_NODE	797:63	797:63	23	/
LEAF_NODE	797:65	797:65	23	(
FIELD	797:66	797:66	23	pageheight
LEAF_NODE	797:66	797:66	24	pageheight
LEAF_NODE	797:77	797:77	23	-
FIELD	797:79	797:79	23	overlap
LEAF_NODE	797:79	797:79	24	overlap
LEAF_NODE	797:86	797:86	23	)
LEAF_NODE	797:87	797:87	22	)
LEAF_NODE	797:88	797:88	18	;
SELECTION	798:20	799:21	15	
KEYWORD	798:20	798:20	16	else
LEAF_NODE	798:20	798:20	17	else
STATEMENTS	799:21	799:21	16	
EXPR_STATEMENT	799:21	799:33	17	* yimages = 1 ;
EXPR	799:21	799:21	18	* yimages = 1
ASSIGN	799:21	799:32	19	* yimages = 1
LVAL	799:21	799:21	20	* yimages
UNARY_EXPR	799:21	799:22	21	* yimages
UNARY_OPERATOR	799:21	799:21	22	*
LEAF_NODE	799:21	799:21	23	*
FIELD	799:22	799:22	22	yimages
LEAF_NODE	799:22	799:22	23	yimages
ASSIGN_OP	799:30	799:30	20	=
LEAF_NODE	799:30	799:30	21	=
RVAL	799:32	799:32	20	1
FIELD	799:32	799:32	21	1
LEAF_NODE	799:32	799:32	22	1
LEAF_NODE	799:33	799:33	18	;
EXPR_STATEMENT	800:19	800:88	15	* ximages = ( int ) ceil ( ( scale * imageheight ) / ( splitwidth - overlap ) ) ;
EXPR	800:19	800:19	16	* ximages = ( int ) ceil ( ( scale * imageheight ) / ( splitwidth - overlap ) )
ASSIGN	800:19	800:30	17	* ximages = ( int ) ceil ( ( scale * imageheight ) / ( splitwidth - overlap ) )
LVAL	800:19	800:19	18	* ximages
UNARY_EXPR	800:19	800:20	19	* ximages
UNARY_OPERATOR	800:19	800:19	20	*
LEAF_NODE	800:19	800:19	21	*
FIELD	800:20	800:20	20	ximages
LEAF_NODE	800:20	800:20	21	ximages
ASSIGN_OP	800:28	800:28	18	=
LEAF_NODE	800:28	800:28	19	=
RVAL	800:30	800:35	18	( int ) ceil ( ( scale * imageheight ) / ( splitwidth - overlap ) )
LEAF_NODE	800:30	800:30	19	(
TYPE_NAME	800:31	800:31	19	int
LEAF_NODE	800:31	800:31	20	int
LEAF_NODE	800:34	800:34	19	)
FUNCTION_CALL	800:35	800:87	19	ceil ( ( scale * imageheight ) / ( splitwidth - overlap ) )
CALLEE	800:35	800:35	20	ceil
LEAF_NODE	800:35	800:35	21	ceil
LEAF_NODE	800:39	800:39	20	(
ARGUMENT	800:40	800:86	20	( scale * imageheight ) / ( splitwidth - overlap )
LEAF_NODE	800:40	800:40	21	(
FIELD	800:41	800:41	21	scale
LEAF_NODE	800:41	800:41	22	scale
LEAF_NODE	800:47	800:47	21	*
FIELD	800:49	800:49	21	imageheight
LEAF_NODE	800:49	800:49	22	imageheight
LEAF_NODE	800:60	800:60	21	)
LEAF_NODE	800:63	800:63	21	/
LEAF_NODE	800:65	800:65	21	(
FIELD	800:66	800:66	21	splitwidth
LEAF_NODE	800:66	800:66	22	splitwidth
LEAF_NODE	800:77	800:77	21	-
FIELD	800:79	800:79	21	overlap
LEAF_NODE	800:79	800:79	22	overlap
LEAF_NODE	800:86	800:86	21	)
LEAF_NODE	800:87	800:87	20	)
LEAF_NODE	800:88	800:88	16	;
LEAF_NODE	801:19	801:19	14	}
SELECTION	802:18	803:19	12	
KEYWORD	802:18	802:18	13	else
LEAF_NODE	802:18	802:18	14	else
STATEMENTS	803:19	809:19	13	
LEAF_NODE	803:19	803:19	14	{
STATEMENTS	804:19	808:19	14	
SELECTION	804:19	805:21	15	
KEYWORD	804:19	804:19	16	if
LEAF_NODE	804:19	804:19	17	if
LEAF_NODE	804:22	804:22	16	(
CONDITION	804:23	804:23	16	pageheight
EXPR	804:23	804:23	17	pageheight
FIELD	804:23	804:23	18	pageheight
LEAF_NODE	804:23	804:23	19	pageheight
LEAF_NODE	804:33	804:33	16	)
STATEMENTS	805:21	805:21	16	
EXPR_STATEMENT	805:21	805:88	17	* yimages = ( int ) ceil ( ( scale * imagewidth ) / ( pageheight - overlap ) ) ;
EXPR	805:21	805:21	18	* yimages = ( int ) ceil ( ( scale * imagewidth ) / ( pageheight - overlap ) )
ASSIGN	805:21	805:32	19	* yimages = ( int ) ceil ( ( scale * imagewidth ) / ( pageheight - overlap ) )
LVAL	805:21	805:21	20	* yimages
UNARY_EXPR	805:21	805:22	21	* yimages
UNARY_OPERATOR	805:21	805:21	22	*
LEAF_NODE	805:21	805:21	23	*
FIELD	805:22	805:22	22	yimages
LEAF_NODE	805:22	805:22	23	yimages
ASSIGN_OP	805:30	805:30	20	=
LEAF_NODE	805:30	805:30	21	=
RVAL	805:32	805:37	20	( int ) ceil ( ( scale * imagewidth ) / ( pageheight - overlap ) )
LEAF_NODE	805:32	805:32	21	(
TYPE_NAME	805:33	805:33	21	int
LEAF_NODE	805:33	805:33	22	int
LEAF_NODE	805:36	805:36	21	)
FUNCTION_CALL	805:37	805:87	21	ceil ( ( scale * imagewidth ) / ( pageheight - overlap ) )
CALLEE	805:37	805:37	22	ceil
LEAF_NODE	805:37	805:37	23	ceil
LEAF_NODE	805:41	805:41	22	(
ARGUMENT	805:42	805:86	22	( scale * imagewidth ) / ( pageheight - overlap )
LEAF_NODE	805:42	805:42	23	(
FIELD	805:43	805:43	23	scale
LEAF_NODE	805:43	805:43	24	scale
LEAF_NODE	805:49	805:49	23	*
FIELD	805:51	805:51	23	imagewidth
LEAF_NODE	805:51	805:51	24	imagewidth
LEAF_NODE	805:61	805:61	23	)
LEAF_NODE	805:63	805:63	23	/
LEAF_NODE	805:65	805:65	23	(
FIELD	805:66	805:66	23	pageheight
LEAF_NODE	805:66	805:66	24	pageheight
LEAF_NODE	805:77	805:77	23	-
FIELD	805:79	805:79	23	overlap
LEAF_NODE	805:79	805:79	24	overlap
LEAF_NODE	805:86	805:86	23	)
LEAF_NODE	805:87	805:87	22	)
LEAF_NODE	805:88	805:88	18	;
SELECTION	806:20	807:21	15	
KEYWORD	806:20	806:20	16	else
LEAF_NODE	806:20	806:20	17	else
STATEMENTS	807:21	807:21	16	
EXPR_STATEMENT	807:21	807:33	17	* yimages = 1 ;
EXPR	807:21	807:21	18	* yimages = 1
ASSIGN	807:21	807:32	19	* yimages = 1
LVAL	807:21	807:21	20	* yimages
UNARY_EXPR	807:21	807:22	21	* yimages
UNARY_OPERATOR	807:21	807:21	22	*
LEAF_NODE	807:21	807:21	23	*
FIELD	807:22	807:22	22	yimages
LEAF_NODE	807:22	807:22	23	yimages
ASSIGN_OP	807:30	807:30	20	=
LEAF_NODE	807:30	807:30	21	=
RVAL	807:32	807:32	20	1
FIELD	807:32	807:32	21	1
LEAF_NODE	807:32	807:32	22	1
LEAF_NODE	807:33	807:33	18	;
EXPR_STATEMENT	808:19	808:31	15	* ximages = 1 ;
EXPR	808:19	808:19	16	* ximages = 1
ASSIGN	808:19	808:30	17	* ximages = 1
LVAL	808:19	808:19	18	* ximages
UNARY_EXPR	808:19	808:20	19	* ximages
UNARY_OPERATOR	808:19	808:19	20	*
LEAF_NODE	808:19	808:19	21	*
FIELD	808:20	808:20	20	ximages
LEAF_NODE	808:20	808:20	21	ximages
ASSIGN_OP	808:28	808:28	18	=
LEAF_NODE	808:28	808:28	19	=
RVAL	808:30	808:30	18	1
FIELD	808:30	808:30	19	1
LEAF_NODE	808:30	808:30	20	1
LEAF_NODE	808:31	808:31	16	;
LEAF_NODE	809:19	809:19	14	}
LEAF_NODE	810:17	810:17	11	}
SELECTION	811:16	812:17	9	
KEYWORD	811:16	811:16	10	else
LEAF_NODE	811:16	811:16	11	else
STATEMENTS	812:17	815:17	10	
LEAF_NODE	812:17	812:17	11	{
STATEMENTS	813:17	814:17	11	
EXPR_STATEMENT	813:17	813:29	12	* ximages = 1 ;
EXPR	813:17	813:17	13	* ximages = 1
ASSIGN	813:17	813:28	14	* ximages = 1
LVAL	813:17	813:17	15	* ximages
UNARY_EXPR	813:17	813:18	16	* ximages
UNARY_OPERATOR	813:17	813:17	17	*
LEAF_NODE	813:17	813:17	18	*
FIELD	813:18	813:18	17	ximages
LEAF_NODE	813:18	813:18	18	ximages
ASSIGN_OP	813:26	813:26	15	=
LEAF_NODE	813:26	813:26	16	=
RVAL	813:28	813:28	15	1
FIELD	813:28	813:28	16	1
LEAF_NODE	813:28	813:28	17	1
LEAF_NODE	813:29	813:29	13	;
EXPR_STATEMENT	814:17	814:29	12	* yimages = 1 ;
EXPR	814:17	814:17	13	* yimages = 1
ASSIGN	814:17	814:28	14	* yimages = 1
LVAL	814:17	814:17	15	* yimages
UNARY_EXPR	814:17	814:18	16	* yimages
UNARY_OPERATOR	814:17	814:17	17	*
LEAF_NODE	814:17	814:17	18	*
FIELD	814:18	814:18	17	yimages
LEAF_NODE	814:18	814:18	18	yimages
ASSIGN_OP	814:26	814:26	15	=
LEAF_NODE	814:26	814:26	16	=
RVAL	814:28	814:28	15	1
FIELD	814:28	814:28	16	1
LEAF_NODE	814:28	814:28	17	1
LEAF_NODE	814:29	814:29	13	;
LEAF_NODE	815:17	815:17	11	}
LEAF_NODE	816:15	816:15	8	}
JUMP_STATEMENT	817:13	817:18	6	break DESTINATION ;
KEYWORD	817:13	817:13	7	break
LEAF_NODE	817:13	817:13	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	817:18	817:18	7	;
LABEL	818:4	818:11	6	default :
LEAF_NODE	818:4	818:4	7	default
LEAF_NODE	818:11	818:11	7	:
EXPR_STATEMENT	818:14	818:26	6	* ximages = 1 ;
EXPR	818:14	818:14	7	* ximages = 1
ASSIGN	818:14	818:25	8	* ximages = 1
LVAL	818:14	818:14	9	* ximages
UNARY_EXPR	818:14	818:15	10	* ximages
UNARY_OPERATOR	818:14	818:14	11	*
LEAF_NODE	818:14	818:14	12	*
FIELD	818:15	818:15	11	ximages
LEAF_NODE	818:15	818:15	12	ximages
ASSIGN_OP	818:23	818:23	9	=
LEAF_NODE	818:23	818:23	10	=
RVAL	818:25	818:25	9	1
FIELD	818:25	818:25	10	1
LEAF_NODE	818:25	818:25	11	1
LEAF_NODE	818:26	818:26	7	;
EXPR_STATEMENT	819:13	819:25	6	* yimages = 1 ;
EXPR	819:13	819:13	7	* yimages = 1
ASSIGN	819:13	819:24	8	* yimages = 1
LVAL	819:13	819:13	9	* yimages
UNARY_EXPR	819:13	819:14	10	* yimages
UNARY_OPERATOR	819:13	819:13	11	*
LEAF_NODE	819:13	819:13	12	*
FIELD	819:14	819:14	11	yimages
LEAF_NODE	819:14	819:14	12	yimages
ASSIGN_OP	819:22	819:22	9	=
LEAF_NODE	819:22	819:22	10	=
RVAL	819:24	819:24	9	1
FIELD	819:24	819:24	10	1
LEAF_NODE	819:24	819:24	11	1
LEAF_NODE	819:25	819:25	7	;
LEAF_NODE	820:2	820:2	5	}
EXPR_STATEMENT	821:2	821:33	3	pages = ( * ximages ) * ( * yimages ) ;
EXPR	821:2	821:2	4	pages = ( * ximages ) * ( * yimages )
ASSIGN	821:2	821:10	5	pages = ( * ximages ) * ( * yimages )
LVAL	821:2	821:2	6	pages
FIELD	821:2	821:2	7	pages
LEAF_NODE	821:2	821:2	8	pages
ASSIGN_OP	821:8	821:8	6	=
LEAF_NODE	821:8	821:8	7	=
RVAL	821:10	821:32	6	( * ximages ) * ( * yimages )
LEAF_NODE	821:10	821:10	7	(
UNARY_EXPR	821:11	821:12	7	* ximages
UNARY_OPERATOR	821:11	821:11	8	*
LEAF_NODE	821:11	821:11	9	*
FIELD	821:12	821:12	8	ximages
LEAF_NODE	821:12	821:12	9	ximages
LEAF_NODE	821:19	821:19	7	)
LEAF_NODE	821:21	821:21	7	*
LEAF_NODE	821:23	821:23	7	(
UNARY_EXPR	821:24	821:25	7	* yimages
UNARY_OPERATOR	821:24	821:24	8	*
LEAF_NODE	821:24	821:24	9	*
FIELD	821:25	821:25	8	yimages
LEAF_NODE	821:25	821:25	9	yimages
LEAF_NODE	821:32	821:32	7	)
LEAF_NODE	821:33	821:33	4	;
LEAF_NODE	822:2	822:2	3	return
LEAF_NODE	822:9	822:9	3	(
LEAF_NODE	822:10	822:10	3	pages
LEAF_NODE	822:15	822:15	3	)
LEAF_NODE	822:16	822:16	3	;
LEAF_NODE	823:2	823:2	2	}
FUNCTION_DEF	828:0	980:2	1	
RETURN_TYPE	828:0	828:0	2	int
TYPE_NAME	828:0	828:0	3	int
LEAF_NODE	828:0	828:0	4	int
FUNCTION_NAME	828:4	828:4	2	exportMaskedImage
LEAF_NODE	828:4	828:4	3	exportMaskedImage
PARAMETER_LIST	828:21	832:59	2	( FILE * fp , double pagewidth , double pageheight , double imagewidth , double imageheight , int row , int column , double left_offset , double bott_offset , double scale , int center , int rotation )
LEAF_NODE	828:21	828:21	3	(
PARAMETER_DECL	828:22	828:28	3	FILE * fp
TYPE	828:22	828:27	4	FILE *
TYPE_NAME	828:22	828:22	5	FILE
LEAF_NODE	828:22	828:22	6	FILE
POINTER	828:27	828:27	5	*
LEAF_NODE	828:27	828:27	6	*
NAME	828:28	828:28	4	fp
LEAF_NODE	828:28	828:28	5	fp
LEAF_NODE	828:30	828:30	3	,
PARAMETER_DECL	828:32	828:39	3	double pagewidth
TYPE	828:32	828:32	4	double
TYPE_NAME	828:32	828:32	5	double
LEAF_NODE	828:32	828:32	6	double
NAME	828:39	828:39	4	pagewidth
LEAF_NODE	828:39	828:39	5	pagewidth
LEAF_NODE	828:48	828:48	3	,
PARAMETER_DECL	828:50	828:57	3	double pageheight
TYPE	828:50	828:50	4	double
TYPE_NAME	828:50	828:50	5	double
LEAF_NODE	828:50	828:50	6	double
NAME	828:57	828:57	4	pageheight
LEAF_NODE	828:57	828:57	5	pageheight
LEAF_NODE	828:67	828:67	3	,
PARAMETER_DECL	829:21	829:28	3	double imagewidth
TYPE	829:21	829:21	4	double
TYPE_NAME	829:21	829:21	5	double
LEAF_NODE	829:21	829:21	6	double
NAME	829:28	829:28	4	imagewidth
LEAF_NODE	829:28	829:28	5	imagewidth
LEAF_NODE	829:38	829:38	3	,
PARAMETER_DECL	829:40	829:47	3	double imageheight
TYPE	829:40	829:40	4	double
TYPE_NAME	829:40	829:40	5	double
LEAF_NODE	829:40	829:40	6	double
NAME	829:47	829:47	4	imageheight
LEAF_NODE	829:47	829:47	5	imageheight
LEAF_NODE	829:58	829:58	3	,
PARAMETER_DECL	830:22	830:26	3	int row
TYPE	830:22	830:22	4	int
TYPE_NAME	830:22	830:22	5	int
LEAF_NODE	830:22	830:22	6	int
NAME	830:26	830:26	4	row
LEAF_NODE	830:26	830:26	5	row
LEAF_NODE	830:29	830:29	3	,
PARAMETER_DECL	830:31	830:35	3	int column
TYPE	830:31	830:31	4	int
TYPE_NAME	830:31	830:31	5	int
LEAF_NODE	830:31	830:31	6	int
NAME	830:35	830:35	4	column
LEAF_NODE	830:35	830:35	5	column
LEAF_NODE	830:41	830:41	3	,
PARAMETER_DECL	831:22	831:29	3	double left_offset
TYPE	831:22	831:22	4	double
TYPE_NAME	831:22	831:22	5	double
LEAF_NODE	831:22	831:22	6	double
NAME	831:29	831:29	4	left_offset
LEAF_NODE	831:29	831:29	5	left_offset
LEAF_NODE	831:40	831:40	3	,
PARAMETER_DECL	831:42	831:49	3	double bott_offset
TYPE	831:42	831:42	4	double
TYPE_NAME	831:42	831:42	5	double
LEAF_NODE	831:42	831:42	6	double
NAME	831:49	831:49	4	bott_offset
LEAF_NODE	831:49	831:49	5	bott_offset
LEAF_NODE	831:60	831:60	3	,
PARAMETER_DECL	832:21	832:28	3	double scale
TYPE	832:21	832:21	4	double
TYPE_NAME	832:21	832:21	5	double
LEAF_NODE	832:21	832:21	6	double
NAME	832:28	832:28	4	scale
LEAF_NODE	832:28	832:28	5	scale
LEAF_NODE	832:33	832:33	3	,
PARAMETER_DECL	832:35	832:39	3	int center
TYPE	832:35	832:35	4	int
TYPE_NAME	832:35	832:35	5	int
LEAF_NODE	832:35	832:35	6	int
NAME	832:39	832:39	4	center
LEAF_NODE	832:39	832:39	5	center
LEAF_NODE	832:45	832:45	3	,
PARAMETER_DECL	832:47	832:51	3	int rotation
TYPE	832:47	832:47	4	int
TYPE_NAME	832:47	832:47	5	int
LEAF_NODE	832:47	832:47	6	int
NAME	832:51	832:51	4	rotation
LEAF_NODE	832:51	832:51	5	rotation
LEAF_NODE	832:59	832:59	3	)
LEAF_NODE	833:2	833:2	2	{
STATEMENTS	834:2	979:2	2	
SIMPLE_DECL	834:2	834:20	3	double xtran ; xtran = 0.0 ;
VAR_DECL	834:2	834:9	4	double xtran ; xtran = 0.0
TYPE	834:2	834:2	5	double
TYPE_NAME	834:2	834:2	6	double
LEAF_NODE	834:2	834:2	7	double
NAME	834:9	834:9	5	xtran
LEAF_NODE	834:9	834:9	6	xtran
LEAF_NODE	0:0	0:0	5	;
INIT	834:9	834:9	5	xtran = 0.0
ASSIGN	834:9	834:17	6	xtran = 0.0
LVAL	834:9	834:9	7	xtran
NAME	834:9	834:9	8	xtran
LEAF_NODE	834:9	834:9	9	xtran
ASSIGN_OP	834:15	834:15	7	=
LEAF_NODE	834:15	834:15	8	=
RVAL	834:17	834:17	7	0.0
FIELD	834:17	834:17	8	0.0
LEAF_NODE	834:17	834:17	9	0.0
LEAF_NODE	834:20	834:20	4	;
SIMPLE_DECL	835:2	835:20	3	double ytran ; ytran = 0.0 ;
VAR_DECL	835:2	835:9	4	double ytran ; ytran = 0.0
TYPE	835:2	835:2	5	double
TYPE_NAME	835:2	835:2	6	double
LEAF_NODE	835:2	835:2	7	double
NAME	835:9	835:9	5	ytran
LEAF_NODE	835:9	835:9	6	ytran
LEAF_NODE	0:0	0:0	5	;
INIT	835:9	835:9	5	ytran = 0.0
ASSIGN	835:9	835:17	6	ytran = 0.0
LVAL	835:9	835:9	7	ytran
NAME	835:9	835:9	8	ytran
LEAF_NODE	835:9	835:9	9	ytran
ASSIGN_OP	835:15	835:15	7	=
LEAF_NODE	835:15	835:15	8	=
RVAL	835:17	835:17	7	0.0
FIELD	835:17	835:17	8	0.0
LEAF_NODE	835:17	835:17	9	0.0
LEAF_NODE	835:20	835:20	4	;
SIMPLE_DECL	837:2	837:21	3	double xscale ; xscale = 1.0 ;
VAR_DECL	837:2	837:9	4	double xscale ; xscale = 1.0
TYPE	837:2	837:2	5	double
TYPE_NAME	837:2	837:2	6	double
LEAF_NODE	837:2	837:2	7	double
NAME	837:9	837:9	5	xscale
LEAF_NODE	837:9	837:9	6	xscale
LEAF_NODE	0:0	0:0	5	;
INIT	837:9	837:9	5	xscale = 1.0
ASSIGN	837:9	837:18	6	xscale = 1.0
LVAL	837:9	837:9	7	xscale
NAME	837:9	837:9	8	xscale
LEAF_NODE	837:9	837:9	9	xscale
ASSIGN_OP	837:16	837:16	7	=
LEAF_NODE	837:16	837:16	8	=
RVAL	837:18	837:18	7	1.0
FIELD	837:18	837:18	8	1.0
LEAF_NODE	837:18	837:18	9	1.0
LEAF_NODE	837:21	837:21	4	;
SIMPLE_DECL	838:2	838:21	3	double yscale ; yscale = 1.0 ;
VAR_DECL	838:2	838:9	4	double yscale ; yscale = 1.0
TYPE	838:2	838:2	5	double
TYPE_NAME	838:2	838:2	6	double
LEAF_NODE	838:2	838:2	7	double
NAME	838:9	838:9	5	yscale
LEAF_NODE	838:9	838:9	6	yscale
LEAF_NODE	0:0	0:0	5	;
INIT	838:9	838:9	5	yscale = 1.0
ASSIGN	838:9	838:18	6	yscale = 1.0
LVAL	838:9	838:9	7	yscale
NAME	838:9	838:9	8	yscale
LEAF_NODE	838:9	838:9	9	yscale
ASSIGN_OP	838:16	838:16	7	=
LEAF_NODE	838:16	838:16	8	=
RVAL	838:18	838:18	7	1.0
FIELD	838:18	838:18	8	1.0
LEAF_NODE	838:18	838:18	9	1.0
LEAF_NODE	838:21	838:21	4	;
SIMPLE_DECL	840:2	840:27	3	double splitheight ; splitheight = 0 ;
VAR_DECL	840:2	840:9	4	double splitheight ; splitheight = 0
TYPE	840:2	840:2	5	double
TYPE_NAME	840:2	840:2	6	double
LEAF_NODE	840:2	840:2	7	double
NAME	840:9	840:9	5	splitheight
LEAF_NODE	840:9	840:9	6	splitheight
LEAF_NODE	0:0	0:0	5	;
INIT	840:9	840:9	5	splitheight = 0
ASSIGN	840:9	840:26	6	splitheight = 0
LVAL	840:9	840:9	7	splitheight
NAME	840:9	840:9	8	splitheight
LEAF_NODE	840:9	840:9	9	splitheight
ASSIGN_OP	840:24	840:24	7	=
LEAF_NODE	840:24	840:24	8	=
RVAL	840:26	840:26	7	0
FIELD	840:26	840:26	8	0
LEAF_NODE	840:26	840:26	9	0
LEAF_NODE	840:27	840:27	4	;
SIMPLE_DECL	841:2	841:27	3	double splitwidth ; splitwidth = 0 ;
VAR_DECL	841:2	841:9	4	double splitwidth ; splitwidth = 0
TYPE	841:2	841:2	5	double
TYPE_NAME	841:2	841:2	6	double
LEAF_NODE	841:2	841:2	7	double
NAME	841:9	841:9	5	splitwidth
LEAF_NODE	841:9	841:9	6	splitwidth
LEAF_NODE	0:0	0:0	5	;
INIT	841:9	841:9	5	splitwidth = 0
ASSIGN	841:9	841:26	6	splitwidth = 0
LVAL	841:9	841:9	7	splitwidth
NAME	841:9	841:9	8	splitwidth
LEAF_NODE	841:9	841:9	9	splitwidth
ASSIGN_OP	841:24	841:24	7	=
LEAF_NODE	841:24	841:24	8	=
RVAL	841:26	841:26	7	0
FIELD	841:26	841:26	8	0
LEAF_NODE	841:26	841:26	9	0
LEAF_NODE	841:27	841:27	4	;
SIMPLE_DECL	842:2	842:27	3	double overlap ; overlap = 0 ;
VAR_DECL	842:2	842:9	4	double overlap ; overlap = 0
TYPE	842:2	842:2	5	double
TYPE_NAME	842:2	842:2	6	double
LEAF_NODE	842:2	842:2	7	double
NAME	842:9	842:9	5	overlap
LEAF_NODE	842:9	842:9	6	overlap
LEAF_NODE	0:0	0:0	5	;
INIT	842:9	842:9	5	overlap = 0
ASSIGN	842:9	842:26	6	overlap = 0
LVAL	842:9	842:9	7	overlap
NAME	842:9	842:9	8	overlap
LEAF_NODE	842:9	842:9	9	overlap
ASSIGN_OP	842:24	842:24	7	=
LEAF_NODE	842:24	842:24	8	=
RVAL	842:26	842:26	7	0
FIELD	842:26	842:26	8	0
LEAF_NODE	842:26	842:26	9	0
LEAF_NODE	842:27	842:27	4	;
SIMPLE_DECL	843:2	843:30	3	double subimage_height ; subimage_height = 0.0 ;
VAR_DECL	843:2	843:9	4	double subimage_height ; subimage_height = 0.0
TYPE	843:2	843:2	5	double
TYPE_NAME	843:2	843:2	6	double
LEAF_NODE	843:2	843:2	7	double
NAME	843:9	843:9	5	subimage_height
LEAF_NODE	843:9	843:9	6	subimage_height
LEAF_NODE	0:0	0:0	5	;
INIT	843:9	843:9	5	subimage_height = 0.0
ASSIGN	843:9	843:27	6	subimage_height = 0.0
LVAL	843:9	843:9	7	subimage_height
NAME	843:9	843:9	8	subimage_height
LEAF_NODE	843:9	843:9	9	subimage_height
ASSIGN_OP	843:25	843:25	7	=
LEAF_NODE	843:25	843:25	8	=
RVAL	843:27	843:27	7	0.0
FIELD	843:27	843:27	8	0.0
LEAF_NODE	843:27	843:27	9	0.0
LEAF_NODE	843:30	843:30	4	;
EXPR_STATEMENT	845:2	845:44	3	splitheight = maxPageHeight * PS_UNIT_SIZE ;
EXPR	845:2	845:2	4	splitheight = maxPageHeight * PS_UNIT_SIZE
ASSIGN	845:2	845:16	5	splitheight = maxPageHeight * PS_UNIT_SIZE
LVAL	845:2	845:2	6	splitheight
FIELD	845:2	845:2	7	splitheight
LEAF_NODE	845:2	845:2	8	splitheight
ASSIGN_OP	845:14	845:14	6	=
LEAF_NODE	845:14	845:14	7	=
RVAL	845:16	845:32	6	maxPageHeight * PS_UNIT_SIZE
FIELD	845:16	845:16	7	maxPageHeight
LEAF_NODE	845:16	845:16	8	maxPageHeight
LEAF_NODE	845:30	845:30	7	*
FIELD	845:32	845:32	7	PS_UNIT_SIZE
LEAF_NODE	845:32	845:32	8	PS_UNIT_SIZE
LEAF_NODE	845:44	845:44	4	;
EXPR_STATEMENT	846:2	846:44	3	splitwidth = maxPageWidth * PS_UNIT_SIZE ;
EXPR	846:2	846:2	4	splitwidth = maxPageWidth * PS_UNIT_SIZE
ASSIGN	846:2	846:16	5	splitwidth = maxPageWidth * PS_UNIT_SIZE
LVAL	846:2	846:2	6	splitwidth
FIELD	846:2	846:2	7	splitwidth
LEAF_NODE	846:2	846:2	8	splitwidth
ASSIGN_OP	846:14	846:14	6	=
LEAF_NODE	846:14	846:14	7	=
RVAL	846:16	846:32	6	maxPageWidth * PS_UNIT_SIZE
FIELD	846:16	846:16	7	maxPageWidth
LEAF_NODE	846:16	846:16	8	maxPageWidth
LEAF_NODE	846:30	846:30	7	*
FIELD	846:32	846:32	7	PS_UNIT_SIZE
LEAF_NODE	846:32	846:32	8	PS_UNIT_SIZE
LEAF_NODE	846:44	846:44	4	;
EXPR_STATEMENT	847:2	847:44	3	overlap = splitOverlap * PS_UNIT_SIZE ;
EXPR	847:2	847:2	4	overlap = splitOverlap * PS_UNIT_SIZE
ASSIGN	847:2	847:16	5	overlap = splitOverlap * PS_UNIT_SIZE
LVAL	847:2	847:2	6	overlap
FIELD	847:2	847:2	7	overlap
LEAF_NODE	847:2	847:2	8	overlap
ASSIGN_OP	847:14	847:14	6	=
LEAF_NODE	847:14	847:14	7	=
RVAL	847:16	847:32	6	splitOverlap * PS_UNIT_SIZE
FIELD	847:16	847:16	7	splitOverlap
LEAF_NODE	847:16	847:16	8	splitOverlap
LEAF_NODE	847:30	847:30	7	*
FIELD	847:32	847:32	7	PS_UNIT_SIZE
LEAF_NODE	847:32	847:32	8	PS_UNIT_SIZE
LEAF_NODE	847:44	847:44	4	;
EXPR_STATEMENT	848:2	848:29	3	xscale = scale * imagewidth ;
EXPR	848:2	848:2	4	xscale = scale * imagewidth
ASSIGN	848:2	848:11	5	xscale = scale * imagewidth
LVAL	848:2	848:2	6	xscale
FIELD	848:2	848:2	7	xscale
LEAF_NODE	848:2	848:2	8	xscale
ASSIGN_OP	848:9	848:9	6	=
LEAF_NODE	848:9	848:9	7	=
RVAL	848:11	848:19	6	scale * imagewidth
FIELD	848:11	848:11	7	scale
LEAF_NODE	848:11	848:11	8	scale
LEAF_NODE	848:17	848:17	7	*
FIELD	848:19	848:19	7	imagewidth
LEAF_NODE	848:19	848:19	8	imagewidth
LEAF_NODE	848:29	848:29	4	;
EXPR_STATEMENT	849:2	849:30	3	yscale = scale * imageheight ;
EXPR	849:2	849:2	4	yscale = scale * imageheight
ASSIGN	849:2	849:11	5	yscale = scale * imageheight
LVAL	849:2	849:2	6	yscale
FIELD	849:2	849:2	7	yscale
LEAF_NODE	849:2	849:2	8	yscale
ASSIGN_OP	849:9	849:9	6	=
LEAF_NODE	849:9	849:9	7	=
RVAL	849:11	849:19	6	scale * imageheight
FIELD	849:11	849:11	7	scale
LEAF_NODE	849:11	849:11	8	scale
LEAF_NODE	849:17	849:17	7	*
FIELD	849:19	849:19	7	imageheight
LEAF_NODE	849:19	849:19	8	imageheight
LEAF_NODE	849:30	849:30	4	;
SELECTION	851:2	852:4	3	
KEYWORD	851:2	851:2	4	if
LEAF_NODE	851:2	851:2	5	if
LEAF_NODE	851:5	851:5	4	(
CONDITION	851:6	851:6	4	( xscale < 0.0 ) || ( yscale < 0.0 )
EXPR	851:6	851:6	5	( xscale < 0.0 ) || ( yscale < 0.0 )
OR	851:6	851:24	6	( xscale < 0.0 ) || ( yscale < 0.0 )
EXPR	851:6	851:19	7	( xscale < 0.0 )
LEAF_NODE	851:6	851:6	8	(
FIELD	851:7	851:7	8	xscale
LEAF_NODE	851:7	851:7	9	xscale
REL_OPERATOR	851:14	851:14	8	<
LEAF_NODE	851:14	851:14	9	<
FIELD	851:16	851:16	8	0.0
LEAF_NODE	851:16	851:16	9	0.0
LEAF_NODE	851:19	851:19	8	)
LEAF_NODE	851:21	851:21	7	||
EXPR	851:24	851:37	7	( yscale < 0.0 )
LEAF_NODE	851:24	851:24	8	(
FIELD	851:25	851:25	8	yscale
LEAF_NODE	851:25	851:25	9	yscale
REL_OPERATOR	851:32	851:32	8	<
LEAF_NODE	851:32	851:32	9	<
FIELD	851:34	851:34	8	0.0
LEAF_NODE	851:34	851:34	9	0.0
LEAF_NODE	851:37	851:37	8	)
LEAF_NODE	851:38	851:38	4	)
STATEMENTS	852:4	855:4	4	
LEAF_NODE	852:4	852:4	5	{
STATEMENTS	853:4	854:4	5	
EXPR_STATEMENT	853:4	853:57	6	TIFFError ( "exportMaskedImage" , "Invalid parameters." ) ;
EXPR	853:4	853:4	7	TIFFError ( "exportMaskedImage" , "Invalid parameters." )
FUNCTION_CALL	853:4	853:56	8	TIFFError ( "exportMaskedImage" , "Invalid parameters." )
CALLEE	853:4	853:4	9	TIFFError
LEAF_NODE	853:4	853:4	10	TIFFError
LEAF_NODE	853:13	853:13	9	(
ARGUMENT	853:14	853:14	9	"exportMaskedImage"
FIELD	853:14	853:14	10	"exportMaskedImage"
LEAF_NODE	853:14	853:14	11	"exportMaskedImage"
LEAF_NODE	853:33	853:33	9	,
ARGUMENT	853:35	853:35	9	"Invalid parameters."
FIELD	853:35	853:35	10	"Invalid parameters."
LEAF_NODE	853:35	853:35	11	"Invalid parameters."
LEAF_NODE	853:56	853:56	9	)
LEAF_NODE	853:57	853:57	7	;
JUMP_STATEMENT	854:4	854:15	6	return ( - 1 ) ;
KEYWORD	854:4	854:4	7	return
LEAF_NODE	854:4	854:4	8	return
DESTINATION	854:11	854:11	7	( - 1 )
EXPR	854:11	854:14	8	( - 1 )
LEAF_NODE	854:11	854:11	9	(
UNARY_EXPR	854:12	854:13	9	- 1
UNARY_OPERATOR	854:12	854:12	10	-
LEAF_NODE	854:12	854:12	11	-
FIELD	854:13	854:13	10	1
LEAF_NODE	854:13	854:13	11	1
LEAF_NODE	854:14	854:14	9	)
LEAF_NODE	854:15	854:15	7	;
LEAF_NODE	855:4	855:4	5	}
SELECTION	860:2	861:4	3	
KEYWORD	860:2	860:2	4	switch
LEAF_NODE	860:2	860:2	5	switch
LEAF_NODE	860:9	860:9	4	(
CONDITION	860:10	860:10	4	rotation
EXPR	860:10	860:10	5	rotation
FIELD	860:10	860:10	6	rotation
LEAF_NODE	860:10	860:10	7	rotation
LEAF_NODE	860:18	860:18	4	)
STATEMENTS	861:4	958:4	4	
LEAF_NODE	861:4	861:4	5	{
STATEMENTS	862:4	957:13	5	
LABEL	862:4	862:10	6	case 0 :
LEAF_NODE	862:4	862:4	7	case
LEAF_NODE	862:9	862:9	7	0
LEAF_NODE	862:10	862:10	7	:
LABEL	863:4	863:12	6	case 180 :
LEAF_NODE	863:4	863:4	7	case
LEAF_NODE	863:9	863:9	7	180
LEAF_NODE	863:12	863:12	7	:
SELECTION	863:14	864:16	6	
KEYWORD	863:14	863:14	7	if
LEAF_NODE	863:14	863:14	8	if
LEAF_NODE	863:17	863:17	7	(
CONDITION	863:18	863:18	7	splitheight > 0
EXPR	863:18	863:32	8	splitheight > 0
FIELD	863:18	863:18	9	splitheight
LEAF_NODE	863:18	863:18	10	splitheight
REL_OPERATOR	863:30	863:30	9	>
LEAF_NODE	863:30	863:30	10	>
FIELD	863:32	863:32	9	0
LEAF_NODE	863:32	863:32	10	0
LEAF_NODE	863:33	863:33	7	)
STATEMENTS	864:16	879:15	7	
LEAF_NODE	864:16	864:16	8	{
STATEMENTS	865:15	874:16	8	
SELECTION	865:15	866:17	9	
KEYWORD	865:15	865:15	10	if
LEAF_NODE	865:15	865:15	11	if
LEAF_NODE	865:18	865:18	10	(
CONDITION	865:19	865:19	10	splitheight < imageheight
EXPR	865:19	865:33	11	splitheight < imageheight
FIELD	865:19	865:19	12	splitheight
LEAF_NODE	865:19	865:19	13	splitheight
REL_OPERATOR	865:31	865:31	12	<
LEAF_NODE	865:31	865:31	13	<
FIELD	865:33	865:33	12	imageheight
LEAF_NODE	865:33	865:33	13	imageheight
LEAF_NODE	865:44	865:44	10	)
STATEMENTS	866:17	873:18	10	
LEAF_NODE	866:17	866:17	11	{
STATEMENTS	868:17	872:17	11	
LEAF_NODE	868:17	868:17	12	xscale
LEAF_NODE	868:24	868:24	12	=
LEAF_NODE	868:26	868:26	12	(
LEAF_NODE	868:27	868:27	12	imagewidth
LEAF_NODE	868:38	868:38	12	+
LEAF_NODE	868:40	868:40	12	overlap
LEAF_NODE	868:47	868:47	12	)
EXPR_STATEMENT	868:49	868:85	12	* ( pageheight / splitheight ) * scale ;
EXPR	868:49	868:80	13	* ( pageheight / splitheight ) * scale
UNARY_EXPR	868:49	868:76	14	* ( pageheight / splitheight )
UNARY_OPERATOR	868:49	868:49	15	*
LEAF_NODE	868:49	868:49	16	*
LEAF_NODE	868:51	868:51	15	(
FIELD	868:52	868:52	15	pageheight
LEAF_NODE	868:52	868:52	16	pageheight
LEAF_NODE	868:63	868:63	15	/
FIELD	868:65	868:65	15	splitheight
LEAF_NODE	868:65	868:65	16	splitheight
LEAF_NODE	868:76	868:76	15	)
LEAF_NODE	868:78	868:78	14	*
FIELD	868:80	868:80	14	scale
LEAF_NODE	868:80	868:80	15	scale
LEAF_NODE	868:85	868:85	13	;
LEAF_NODE	870:17	870:17	12	xtran
LEAF_NODE	870:23	870:23	12	=
LEAF_NODE	870:25	870:25	12	-
LEAF_NODE	870:26	870:26	12	1.0
EXPR_STATEMENT	870:30	870:62	12	* column * ( pagewidth - overlap ) ;
EXPR	870:30	870:61	13	* column * ( pagewidth - overlap )
UNARY_EXPR	870:30	870:32	14	* column
UNARY_OPERATOR	870:30	870:30	15	*
LEAF_NODE	870:30	870:30	16	*
FIELD	870:32	870:32	15	column
LEAF_NODE	870:32	870:32	16	column
LEAF_NODE	870:39	870:39	14	*
LEAF_NODE	870:41	870:41	14	(
FIELD	870:42	870:42	14	pagewidth
LEAF_NODE	870:42	870:42	15	pagewidth
LEAF_NODE	870:52	870:52	14	-
FIELD	870:54	870:54	14	overlap
LEAF_NODE	870:54	870:54	15	overlap
LEAF_NODE	870:61	870:61	14	)
LEAF_NODE	870:62	870:62	13	;
EXPR_STATEMENT	871:18	871:81	12	subimage_height = imageheight - ( ( splitheight - overlap ) * row ) ;
EXPR	871:18	871:18	13	subimage_height = imageheight - ( ( splitheight - overlap ) * row )
ASSIGN	871:18	871:36	14	subimage_height = imageheight - ( ( splitheight - overlap ) * row )
LVAL	871:18	871:18	15	subimage_height
FIELD	871:18	871:18	16	subimage_height
LEAF_NODE	871:18	871:18	17	subimage_height
ASSIGN_OP	871:34	871:34	15	=
LEAF_NODE	871:34	871:34	16	=
RVAL	871:36	871:80	15	imageheight - ( ( splitheight - overlap ) * row )
FIELD	871:36	871:36	16	imageheight
LEAF_NODE	871:36	871:36	17	imageheight
LEAF_NODE	871:48	871:48	16	-
LEAF_NODE	871:50	871:50	16	(
LEAF_NODE	871:51	871:51	16	(
FIELD	871:52	871:52	16	splitheight
LEAF_NODE	871:52	871:52	17	splitheight
LEAF_NODE	871:64	871:64	16	-
FIELD	871:66	871:66	16	overlap
LEAF_NODE	871:66	871:66	17	overlap
LEAF_NODE	871:73	871:73	16	)
LEAF_NODE	871:75	871:75	16	*
FIELD	871:77	871:77	16	row
LEAF_NODE	871:77	871:77	17	row
LEAF_NODE	871:80	871:80	16	)
LEAF_NODE	871:81	871:81	13	;
EXPR_STATEMENT	872:17	872:83	12	ytran = pageheight - subimage_height * ( pageheight / splitheight ) ;
EXPR	872:17	872:17	13	ytran = pageheight - subimage_height * ( pageheight / splitheight )
ASSIGN	872:17	872:26	14	ytran = pageheight - subimage_height * ( pageheight / splitheight )
LVAL	872:17	872:17	15	ytran
FIELD	872:17	872:17	16	ytran
LEAF_NODE	872:17	872:17	17	ytran
ASSIGN_OP	872:24	872:24	15	=
LEAF_NODE	872:24	872:24	16	=
RVAL	872:26	872:82	15	pageheight - subimage_height * ( pageheight / splitheight )
FIELD	872:26	872:26	16	pageheight
LEAF_NODE	872:26	872:26	17	pageheight
LEAF_NODE	872:37	872:37	16	-
FIELD	872:39	872:39	16	subimage_height
LEAF_NODE	872:39	872:39	17	subimage_height
LEAF_NODE	872:55	872:55	16	*
LEAF_NODE	872:57	872:57	16	(
FIELD	872:58	872:58	16	pageheight
LEAF_NODE	872:58	872:58	17	pageheight
LEAF_NODE	872:69	872:69	16	/
FIELD	872:71	872:71	16	splitheight
LEAF_NODE	872:71	872:71	17	splitheight
LEAF_NODE	872:82	872:82	16	)
LEAF_NODE	872:83	872:83	13	;
LEAF_NODE	873:18	873:18	11	}
SELECTION	874:16	875:17	9	
KEYWORD	874:16	874:16	10	else
LEAF_NODE	874:16	874:16	11	else
STATEMENTS	875:17	878:17	10	
LEAF_NODE	875:17	875:17	11	{
STATEMENTS	876:17	877:18	11	
LEAF_NODE	876:17	876:17	12	xtran
LEAF_NODE	876:23	876:23	12	=
LEAF_NODE	876:25	876:25	12	-
LEAF_NODE	876:26	876:26	12	1.0
EXPR_STATEMENT	876:30	876:62	12	* column * ( pagewidth - overlap ) ;
EXPR	876:30	876:61	13	* column * ( pagewidth - overlap )
UNARY_EXPR	876:30	876:32	14	* column
UNARY_OPERATOR	876:30	876:30	15	*
LEAF_NODE	876:30	876:30	16	*
FIELD	876:32	876:32	15	column
LEAF_NODE	876:32	876:32	16	column
LEAF_NODE	876:39	876:39	14	*
LEAF_NODE	876:41	876:41	14	(
FIELD	876:42	876:42	14	pagewidth
LEAF_NODE	876:42	876:42	15	pagewidth
LEAF_NODE	876:52	876:52	14	-
FIELD	876:54	876:54	14	overlap
LEAF_NODE	876:54	876:54	15	overlap
LEAF_NODE	876:61	876:61	14	)
LEAF_NODE	876:62	876:62	13	;
EXPR_STATEMENT	877:18	877:51	12	ytran = splitheight - imageheight ;
EXPR	877:18	877:18	13	ytran = splitheight - imageheight
ASSIGN	877:18	877:26	14	ytran = splitheight - imageheight
LVAL	877:18	877:18	15	ytran
FIELD	877:18	877:18	16	ytran
LEAF_NODE	877:18	877:18	17	ytran
ASSIGN_OP	877:24	877:24	15	=
LEAF_NODE	877:24	877:24	16	=
RVAL	877:26	877:40	15	splitheight - imageheight
FIELD	877:26	877:26	16	splitheight
LEAF_NODE	877:26	877:26	17	splitheight
LEAF_NODE	877:38	877:38	16	-
FIELD	877:40	877:40	16	imageheight
LEAF_NODE	877:40	877:40	17	imageheight
LEAF_NODE	877:51	877:51	13	;
LEAF_NODE	878:17	878:17	11	}
LEAF_NODE	879:15	879:15	8	}
SELECTION	880:14	881:15	6	
KEYWORD	880:14	880:14	7	else
LEAF_NODE	880:14	880:14	8	else
STATEMENTS	881:15	900:16	7	
LEAF_NODE	881:15	881:15	8	{
STATEMENTS	882:16	895:16	8	
SELECTION	882:16	883:17	9	
KEYWORD	882:16	882:16	10	if
LEAF_NODE	882:16	882:16	11	if
LEAF_NODE	882:19	882:19	10	(
CONDITION	882:20	882:20	10	splitwidth > 0
EXPR	882:20	882:33	11	splitwidth > 0
FIELD	882:20	882:20	12	splitwidth
LEAF_NODE	882:20	882:20	13	splitwidth
REL_OPERATOR	882:31	882:31	12	>
LEAF_NODE	882:31	882:31	13	>
FIELD	882:33	882:33	12	0
LEAF_NODE	882:33	882:33	13	0
LEAF_NODE	882:34	882:34	10	)
STATEMENTS	883:17	894:17	10	
LEAF_NODE	883:17	883:17	11	{
STATEMENTS	884:17	889:18	11	
SELECTION	884:17	885:19	12	
KEYWORD	884:17	884:17	13	if
LEAF_NODE	884:17	884:17	14	if
LEAF_NODE	884:20	884:20	13	(
CONDITION	884:21	884:21	13	splitwidth < imagewidth
EXPR	884:21	884:34	14	splitwidth < imagewidth
FIELD	884:21	884:21	15	splitwidth
LEAF_NODE	884:21	884:21	16	splitwidth
REL_OPERATOR	884:32	884:32	15	<
LEAF_NODE	884:32	884:32	16	<
FIELD	884:34	884:34	15	imagewidth
LEAF_NODE	884:34	884:34	16	imagewidth
LEAF_NODE	884:44	884:44	13	)
STATEMENTS	885:19	888:20	13	
LEAF_NODE	885:19	885:19	14	{
STATEMENTS	886:19	887:32	14	
LEAF_NODE	886:19	886:19	15	xtran
LEAF_NODE	886:25	886:25	15	=
LEAF_NODE	886:27	886:27	15	-
LEAF_NODE	886:28	886:28	15	1.0
EXPR_STATEMENT	886:33	886:54	15	* column * splitwidth ;
EXPR	886:33	886:44	16	* column * splitwidth
UNARY_EXPR	886:33	886:35	17	* column
UNARY_OPERATOR	886:33	886:33	18	*
LEAF_NODE	886:33	886:33	19	*
FIELD	886:35	886:35	18	column
LEAF_NODE	886:35	886:35	19	column
LEAF_NODE	886:42	886:42	17	*
FIELD	886:44	886:44	17	splitwidth
LEAF_NODE	886:44	886:44	18	splitwidth
LEAF_NODE	886:54	886:54	16	;
LEAF_NODE	887:19	887:19	15	ytran
LEAF_NODE	887:25	887:25	15	=
LEAF_NODE	887:27	887:27	15	-
LEAF_NODE	887:28	887:28	15	1.0
EXPR_STATEMENT	887:32	887:62	15	* row * ( pageheight - overlap ) ;
EXPR	887:32	887:61	16	* row * ( pageheight - overlap )
UNARY_EXPR	887:32	887:34	17	* row
UNARY_OPERATOR	887:32	887:32	18	*
LEAF_NODE	887:32	887:32	19	*
FIELD	887:34	887:34	18	row
LEAF_NODE	887:34	887:34	19	row
LEAF_NODE	887:38	887:38	17	*
LEAF_NODE	887:40	887:40	17	(
FIELD	887:41	887:41	17	pageheight
LEAF_NODE	887:41	887:41	18	pageheight
LEAF_NODE	887:52	887:52	17	-
FIELD	887:54	887:54	17	overlap
LEAF_NODE	887:54	887:54	18	overlap
LEAF_NODE	887:61	887:61	17	)
LEAF_NODE	887:62	887:62	16	;
LEAF_NODE	888:20	888:20	14	}
SELECTION	889:18	890:19	12	
KEYWORD	889:18	889:18	13	else
LEAF_NODE	889:18	889:18	14	else
STATEMENTS	890:19	893:19	13	
LEAF_NODE	890:19	890:19	14	{
STATEMENTS	891:20	892:20	14	
LEAF_NODE	891:20	891:20	15	ytran
LEAF_NODE	891:26	891:26	15	=
LEAF_NODE	891:28	891:28	15	-
LEAF_NODE	891:29	891:29	15	1.0
EXPR_STATEMENT	891:33	891:63	15	* row * ( pageheight - overlap ) ;
EXPR	891:33	891:62	16	* row * ( pageheight - overlap )
UNARY_EXPR	891:33	891:35	17	* row
UNARY_OPERATOR	891:33	891:33	18	*
LEAF_NODE	891:33	891:33	19	*
FIELD	891:35	891:35	18	row
LEAF_NODE	891:35	891:35	19	row
LEAF_NODE	891:39	891:39	17	*
LEAF_NODE	891:41	891:41	17	(
FIELD	891:42	891:42	17	pageheight
LEAF_NODE	891:42	891:42	18	pageheight
LEAF_NODE	891:53	891:53	17	-
FIELD	891:55	891:55	17	overlap
LEAF_NODE	891:55	891:55	18	overlap
LEAF_NODE	891:62	891:62	17	)
LEAF_NODE	891:63	891:63	16	;
EXPR_STATEMENT	892:20	892:29	15	xtran = 0 ;
EXPR	892:20	892:20	16	xtran = 0
ASSIGN	892:20	892:28	17	xtran = 0
LVAL	892:20	892:20	18	xtran
FIELD	892:20	892:20	19	xtran
LEAF_NODE	892:20	892:20	20	xtran
ASSIGN_OP	892:26	892:26	18	=
LEAF_NODE	892:26	892:26	19	=
RVAL	892:28	892:28	18	0
FIELD	892:28	892:28	19	0
LEAF_NODE	892:28	892:28	20	0
LEAF_NODE	892:29	892:29	16	;
LEAF_NODE	893:19	893:19	14	}
LEAF_NODE	894:17	894:17	11	}
SELECTION	895:16	896:17	9	
KEYWORD	895:16	895:16	10	else
LEAF_NODE	895:16	895:16	11	else
STATEMENTS	896:17	899:18	10	
LEAF_NODE	896:17	896:17	11	{
STATEMENTS	897:17	898:17	11	
EXPR_STATEMENT	897:17	897:49	12	ytran = pageheight - imageheight ;
EXPR	897:17	897:17	13	ytran = pageheight - imageheight
ASSIGN	897:17	897:25	14	ytran = pageheight - imageheight
LVAL	897:17	897:17	15	ytran
FIELD	897:17	897:17	16	ytran
LEAF_NODE	897:17	897:17	17	ytran
ASSIGN_OP	897:23	897:23	15	=
LEAF_NODE	897:23	897:23	16	=
RVAL	897:25	897:38	15	pageheight - imageheight
FIELD	897:25	897:25	16	pageheight
LEAF_NODE	897:25	897:25	17	pageheight
LEAF_NODE	897:36	897:36	16	-
FIELD	897:38	897:38	16	imageheight
LEAF_NODE	897:38	897:38	17	imageheight
LEAF_NODE	897:49	897:49	13	;
EXPR_STATEMENT	898:17	898:26	12	xtran = 0 ;
EXPR	898:17	898:17	13	xtran = 0
ASSIGN	898:17	898:25	14	xtran = 0
LVAL	898:17	898:17	15	xtran
FIELD	898:17	898:17	16	xtran
LEAF_NODE	898:17	898:17	17	xtran
ASSIGN_OP	898:23	898:23	15	=
LEAF_NODE	898:23	898:23	16	=
RVAL	898:25	898:25	15	0
FIELD	898:25	898:25	16	0
LEAF_NODE	898:25	898:25	17	0
LEAF_NODE	898:26	898:26	13	;
LEAF_NODE	899:18	899:18	11	}
LEAF_NODE	900:16	900:16	8	}
SELECTION	902:12	902:41	6	
KEYWORD	902:12	902:12	7	if
LEAF_NODE	902:12	902:12	8	if
LEAF_NODE	902:15	902:15	7	(
CONDITION	902:16	902:16	7	imagewidth <= pagewidth
EXPR	902:16	902:30	8	imagewidth <= pagewidth
FIELD	902:16	902:16	9	imagewidth
LEAF_NODE	902:16	902:16	10	imagewidth
REL_OPERATOR	902:27	902:27	9	<=
LEAF_NODE	902:27	902:27	10	<=
FIELD	902:30	902:30	9	pagewidth
LEAF_NODE	902:30	902:30	10	pagewidth
LEAF_NODE	902:39	902:39	7	)
STATEMENTS	902:41	908:12	7	
LEAF_NODE	902:41	902:41	8	{
STATEMENTS	905:16	905:16	8	
SELECTION	905:16	905:48	9	
KEYWORD	905:16	905:16	10	if
LEAF_NODE	905:16	905:16	11	if
LEAF_NODE	905:19	905:19	10	(
CONDITION	905:20	905:20	10	imageheight <= splitheight
EXPR	905:20	905:35	11	imageheight <= splitheight
FIELD	905:20	905:20	12	imageheight
LEAF_NODE	905:20	905:20	13	imageheight
REL_OPERATOR	905:32	905:32	12	<=
LEAF_NODE	905:32	905:32	13	<=
FIELD	905:35	905:35	12	splitheight
LEAF_NODE	905:35	905:35	13	splitheight
LEAF_NODE	905:46	905:46	10	)
STATEMENTS	905:48	907:16	10	
LEAF_NODE	905:48	905:48	11	{
STATEMENTS	906:20	906:20	11	
EXPR_STATEMENT	906:20	906:52	12	ytran = pageheight - imageheight ;
EXPR	906:20	906:20	13	ytran = pageheight - imageheight
ASSIGN	906:20	906:28	14	ytran = pageheight - imageheight
LVAL	906:20	906:20	15	ytran
FIELD	906:20	906:20	16	ytran
LEAF_NODE	906:20	906:20	17	ytran
ASSIGN_OP	906:26	906:26	15	=
LEAF_NODE	906:26	906:26	16	=
RVAL	906:28	906:41	15	pageheight - imageheight
FIELD	906:28	906:28	16	pageheight
LEAF_NODE	906:28	906:28	17	pageheight
LEAF_NODE	906:39	906:39	16	-
FIELD	906:41	906:41	16	imageheight
LEAF_NODE	906:41	906:41	17	imageheight
LEAF_NODE	906:52	906:52	13	;
LEAF_NODE	907:16	907:16	11	}
LEAF_NODE	908:12	908:12	8	}
EXPR_STATEMENT	909:14	909:53	6	bott_offset += ytran / ( center ? 2 : 1 ) ;
EXPR	909:14	909:14	7	bott_offset += ytran / ( center ? 2 : 1 )
ASSIGN	909:14	909:29	8	bott_offset += ytran / ( center ? 2 : 1 )
LVAL	909:14	909:14	9	bott_offset
FIELD	909:14	909:14	10	bott_offset
LEAF_NODE	909:14	909:14	11	bott_offset
ASSIGN_OP	909:26	909:26	9	+=
LEAF_NODE	909:26	909:26	10	+=
RVAL	909:29	909:52	9	ytran / ( center ? 2 : 1 )
FIELD	909:29	909:29	10	ytran
LEAF_NODE	909:29	909:29	11	ytran
LEAF_NODE	909:35	909:35	10	/
LEAF_NODE	909:37	909:37	10	(
COND_EXPR	909:38	909:51	10	center ? 2 : 1
CONDITION	909:38	909:38	11	center
FIELD	909:38	909:38	12	center
LEAF_NODE	909:38	909:38	13	center
LEAF_NODE	909:45	909:45	11	?
EXPR	909:47	909:47	11	2
FIELD	909:47	909:47	12	2
LEAF_NODE	909:47	909:47	13	2
LEAF_NODE	909:49	909:49	11	:
FIELD	909:51	909:51	11	1
LEAF_NODE	909:51	909:51	12	1
LEAF_NODE	909:52	909:52	10	)
LEAF_NODE	909:53	909:53	7	;
EXPR_STATEMENT	910:14	910:53	6	left_offset += xtran / ( center ? 2 : 1 ) ;
EXPR	910:14	910:14	7	left_offset += xtran / ( center ? 2 : 1 )
ASSIGN	910:14	910:29	8	left_offset += xtran / ( center ? 2 : 1 )
LVAL	910:14	910:14	9	left_offset
FIELD	910:14	910:14	10	left_offset
LEAF_NODE	910:14	910:14	11	left_offset
ASSIGN_OP	910:26	910:26	9	+=
LEAF_NODE	910:26	910:26	10	+=
RVAL	910:29	910:52	9	xtran / ( center ? 2 : 1 )
FIELD	910:29	910:29	10	xtran
LEAF_NODE	910:29	910:29	11	xtran
LEAF_NODE	910:35	910:35	10	/
LEAF_NODE	910:37	910:37	10	(
COND_EXPR	910:38	910:51	10	center ? 2 : 1
CONDITION	910:38	910:38	11	center
FIELD	910:38	910:38	12	center
LEAF_NODE	910:38	910:38	13	center
LEAF_NODE	910:45	910:45	11	?
EXPR	910:47	910:47	11	2
FIELD	910:47	910:47	12	2
LEAF_NODE	910:47	910:47	13	2
LEAF_NODE	910:49	910:49	11	:
FIELD	910:51	910:51	11	1
LEAF_NODE	910:51	910:51	12	1
LEAF_NODE	910:52	910:52	10	)
LEAF_NODE	910:53	910:53	7	;
JUMP_STATEMENT	911:14	911:19	6	break DESTINATION ;
KEYWORD	911:14	911:14	7	break
LEAF_NODE	911:14	911:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	911:19	911:19	7	;
LABEL	912:4	912:12	6	case 90 :
LEAF_NODE	912:4	912:4	7	case
LEAF_NODE	912:10	912:10	7	90
LEAF_NODE	912:12	912:12	7	:
LABEL	913:4	913:12	6	case 270 :
LEAF_NODE	913:4	913:4	7	case
LEAF_NODE	913:9	913:9	7	270
LEAF_NODE	913:12	913:12	7	:
SELECTION	913:15	914:16	6	
KEYWORD	913:15	913:15	7	if
LEAF_NODE	913:15	913:15	8	if
LEAF_NODE	913:18	913:18	7	(
CONDITION	913:19	913:19	7	splitheight > 0
EXPR	913:19	913:33	8	splitheight > 0
FIELD	913:19	913:19	9	splitheight
LEAF_NODE	913:19	913:19	10	splitheight
REL_OPERATOR	913:31	913:31	9	>
LEAF_NODE	913:31	913:31	10	>
FIELD	913:33	913:33	9	0
LEAF_NODE	913:33	913:33	10	0
LEAF_NODE	913:34	913:34	7	)
STATEMENTS	914:16	931:2	7	
LEAF_NODE	914:16	914:16	8	{
STATEMENTS	915:15	926:16	8	
SELECTION	915:15	916:17	9	
KEYWORD	915:15	915:15	10	if
LEAF_NODE	915:15	915:15	11	if
LEAF_NODE	915:18	915:18	10	(
CONDITION	915:19	915:19	10	splitheight < imagewidth
EXPR	915:19	915:33	11	splitheight < imagewidth
FIELD	915:19	915:19	12	splitheight
LEAF_NODE	915:19	915:19	13	splitheight
REL_OPERATOR	915:31	915:31	12	<
LEAF_NODE	915:31	915:31	13	<
FIELD	915:33	915:33	12	imagewidth
LEAF_NODE	915:33	915:33	13	imagewidth
LEAF_NODE	915:43	915:43	10	)
STATEMENTS	916:17	925:18	10	
LEAF_NODE	916:17	916:17	11	{
STATEMENTS	917:17	923:18	11	
LEAF_NODE	917:17	917:17	12	xtran
LEAF_NODE	917:23	917:23	12	=
LEAF_NODE	917:25	917:25	12	-
LEAF_NODE	917:26	917:26	12	1.0
EXPR_STATEMENT	917:30	917:63	12	* column * ( pageheight - overlap ) ;
EXPR	917:30	917:62	13	* column * ( pageheight - overlap )
UNARY_EXPR	917:30	917:32	14	* column
UNARY_OPERATOR	917:30	917:30	15	*
LEAF_NODE	917:30	917:30	16	*
FIELD	917:32	917:32	15	column
LEAF_NODE	917:32	917:32	16	column
LEAF_NODE	917:39	917:39	14	*
LEAF_NODE	917:41	917:41	14	(
FIELD	917:42	917:42	14	pageheight
LEAF_NODE	917:42	917:42	15	pageheight
LEAF_NODE	917:53	917:53	14	-
FIELD	917:55	917:55	14	overlap
LEAF_NODE	917:55	917:55	15	overlap
LEAF_NODE	917:62	917:62	14	)
LEAF_NODE	917:63	917:63	13	;
SELECTION	921:18	922:20	12	
KEYWORD	921:18	921:18	13	if
LEAF_NODE	921:18	921:18	14	if
LEAF_NODE	921:21	921:21	13	(
CONDITION	921:22	921:22	13	row == 0
EXPR	921:22	921:29	14	row == 0
FIELD	921:22	921:22	15	row
LEAF_NODE	921:22	921:22	16	row
EQ_OPERATOR	921:26	921:26	15	==
LEAF_NODE	921:26	921:26	16	==
FIELD	921:29	921:29	15	0
LEAF_NODE	921:29	921:29	16	0
LEAF_NODE	921:30	921:30	13	)
STATEMENTS	922:20	922:20	13	
EXPR_STATEMENT	922:20	922:61	14	ytran = - 1.0 * ( imagewidth - splitheight ) ;
EXPR	922:20	922:20	15	ytran = - 1.0 * ( imagewidth - splitheight )
ASSIGN	922:20	922:28	16	ytran = - 1.0 * ( imagewidth - splitheight )
LVAL	922:20	922:20	17	ytran
FIELD	922:20	922:20	18	ytran
LEAF_NODE	922:20	922:20	19	ytran
ASSIGN_OP	922:26	922:26	17	=
LEAF_NODE	922:26	922:26	18	=
RVAL	922:28	922:60	17	- 1.0 * ( imagewidth - splitheight )
UNARY_EXPR	922:28	922:29	18	- 1.0
UNARY_OPERATOR	922:28	922:28	19	-
LEAF_NODE	922:28	922:28	20	-
FIELD	922:29	922:29	19	1.0
LEAF_NODE	922:29	922:29	20	1.0
LEAF_NODE	922:33	922:33	18	*
LEAF_NODE	922:35	922:35	18	(
FIELD	922:36	922:36	18	imagewidth
LEAF_NODE	922:36	922:36	19	imagewidth
LEAF_NODE	922:47	922:47	18	-
FIELD	922:49	922:49	18	splitheight
LEAF_NODE	922:49	922:49	19	splitheight
LEAF_NODE	922:60	922:60	18	)
LEAF_NODE	922:61	922:61	15	;
SELECTION	923:18	924:20	12	
KEYWORD	923:18	923:18	13	else
LEAF_NODE	923:18	923:18	14	else
STATEMENTS	924:20	924:20	13	
EXPR_STATEMENT	924:20	924:85	14	ytran = - 1.0 * ( imagewidth - ( splitheight - overlap ) * ( row + 1 ) ) ;
EXPR	924:20	924:20	15	ytran = - 1.0 * ( imagewidth - ( splitheight - overlap ) * ( row + 1 ) )
ASSIGN	924:20	924:28	16	ytran = - 1.0 * ( imagewidth - ( splitheight - overlap ) * ( row + 1 ) )
LVAL	924:20	924:20	17	ytran
FIELD	924:20	924:20	18	ytran
LEAF_NODE	924:20	924:20	19	ytran
ASSIGN_OP	924:26	924:26	17	=
LEAF_NODE	924:26	924:26	18	=
RVAL	924:28	924:84	17	- 1.0 * ( imagewidth - ( splitheight - overlap ) * ( row + 1 ) )
UNARY_EXPR	924:28	924:29	18	- 1.0
UNARY_OPERATOR	924:28	924:28	19	-
LEAF_NODE	924:28	924:28	20	-
FIELD	924:29	924:29	19	1.0
LEAF_NODE	924:29	924:29	20	1.0
LEAF_NODE	924:33	924:33	18	*
LEAF_NODE	924:35	924:35	18	(
FIELD	924:36	924:36	18	imagewidth
LEAF_NODE	924:36	924:36	19	imagewidth
LEAF_NODE	924:47	924:47	18	-
LEAF_NODE	924:49	924:49	18	(
FIELD	924:50	924:50	18	splitheight
LEAF_NODE	924:50	924:50	19	splitheight
LEAF_NODE	924:62	924:62	18	-
FIELD	924:64	924:64	18	overlap
LEAF_NODE	924:64	924:64	19	overlap
LEAF_NODE	924:71	924:71	18	)
LEAF_NODE	924:73	924:73	18	*
LEAF_NODE	924:75	924:75	18	(
FIELD	924:76	924:76	18	row
LEAF_NODE	924:76	924:76	19	row
LEAF_NODE	924:80	924:80	18	+
FIELD	924:82	924:82	18	1
LEAF_NODE	924:82	924:82	19	1
LEAF_NODE	924:83	924:83	18	)
LEAF_NODE	924:84	924:84	18	)
LEAF_NODE	924:85	924:85	15	;
LEAF_NODE	925:18	925:18	11	}
SELECTION	926:16	927:17	9	
KEYWORD	926:16	926:16	10	else
LEAF_NODE	926:16	926:16	11	else
STATEMENTS	927:17	930:17	10	
LEAF_NODE	927:17	927:17	11	{
STATEMENTS	928:18	929:18	11	
LEAF_NODE	928:18	928:18	12	xtran
LEAF_NODE	928:24	928:24	12	=
LEAF_NODE	928:26	928:26	12	-
LEAF_NODE	928:27	928:27	12	1.0
EXPR_STATEMENT	928:31	928:64	12	* column * ( pageheight - overlap ) ;
EXPR	928:31	928:63	13	* column * ( pageheight - overlap )
UNARY_EXPR	928:31	928:33	14	* column
UNARY_OPERATOR	928:31	928:31	15	*
LEAF_NODE	928:31	928:31	16	*
FIELD	928:33	928:33	15	column
LEAF_NODE	928:33	928:33	16	column
LEAF_NODE	928:40	928:40	14	*
LEAF_NODE	928:42	928:42	14	(
FIELD	928:43	928:43	14	pageheight
LEAF_NODE	928:43	928:43	15	pageheight
LEAF_NODE	928:54	928:54	14	-
FIELD	928:56	928:56	14	overlap
LEAF_NODE	928:56	928:56	15	overlap
LEAF_NODE	928:63	928:63	14	)
LEAF_NODE	928:64	928:64	13	;
EXPR_STATEMENT	929:18	929:50	12	ytran = splitheight - imagewidth ;
EXPR	929:18	929:18	13	ytran = splitheight - imagewidth
ASSIGN	929:18	929:26	14	ytran = splitheight - imagewidth
LVAL	929:18	929:18	15	ytran
FIELD	929:18	929:18	16	ytran
LEAF_NODE	929:18	929:18	17	ytran
ASSIGN_OP	929:24	929:24	15	=
LEAF_NODE	929:24	929:24	16	=
RVAL	929:26	929:40	15	splitheight - imagewidth
FIELD	929:26	929:26	16	splitheight
LEAF_NODE	929:26	929:26	17	splitheight
LEAF_NODE	929:38	929:38	16	-
FIELD	929:40	929:40	16	imagewidth
LEAF_NODE	929:40	929:40	17	imagewidth
LEAF_NODE	929:50	929:50	13	;
LEAF_NODE	930:17	930:17	11	}
LEAF_NODE	931:2	931:2	8	}
SELECTION	932:14	933:15	6	
KEYWORD	932:14	932:14	7	else
LEAF_NODE	932:14	932:14	8	else
STATEMENTS	933:15	952:16	7	
LEAF_NODE	933:15	933:15	8	{
STATEMENTS	934:16	947:16	8	
SELECTION	934:16	935:17	9	
KEYWORD	934:16	934:16	10	if
LEAF_NODE	934:16	934:16	11	if
LEAF_NODE	934:19	934:19	10	(
CONDITION	934:20	934:20	10	splitwidth > 0
EXPR	934:20	934:33	11	splitwidth > 0
FIELD	934:20	934:20	12	splitwidth
LEAF_NODE	934:20	934:20	13	splitwidth
REL_OPERATOR	934:31	934:31	12	>
LEAF_NODE	934:31	934:31	13	>
FIELD	934:33	934:33	12	0
LEAF_NODE	934:33	934:33	13	0
LEAF_NODE	934:34	934:34	10	)
STATEMENTS	935:17	946:17	10	
LEAF_NODE	935:17	935:17	11	{
STATEMENTS	936:17	941:18	11	
SELECTION	936:17	937:19	12	
KEYWORD	936:17	936:17	13	if
LEAF_NODE	936:17	936:17	14	if
LEAF_NODE	936:20	936:20	13	(
CONDITION	936:21	936:21	13	splitwidth < imageheight
EXPR	936:21	936:34	14	splitwidth < imageheight
FIELD	936:21	936:21	15	splitwidth
LEAF_NODE	936:21	936:21	16	splitwidth
REL_OPERATOR	936:32	936:32	15	<
LEAF_NODE	936:32	936:32	16	<
FIELD	936:34	936:34	15	imageheight
LEAF_NODE	936:34	936:34	16	imageheight
LEAF_NODE	936:45	936:45	13	)
STATEMENTS	937:19	940:20	13	
LEAF_NODE	937:19	937:19	14	{
STATEMENTS	938:20	939:33	14	
LEAF_NODE	938:20	938:20	15	xtran
LEAF_NODE	938:26	938:26	15	=
LEAF_NODE	938:28	938:28	15	-
LEAF_NODE	938:29	938:29	15	1.0
EXPR_STATEMENT	938:34	938:55	15	* column * splitwidth ;
EXPR	938:34	938:45	16	* column * splitwidth
UNARY_EXPR	938:34	938:36	17	* column
UNARY_OPERATOR	938:34	938:34	18	*
LEAF_NODE	938:34	938:34	19	*
FIELD	938:36	938:36	18	column
LEAF_NODE	938:36	938:36	19	column
LEAF_NODE	938:43	938:43	17	*
FIELD	938:45	938:45	17	splitwidth
LEAF_NODE	938:45	938:45	18	splitwidth
LEAF_NODE	938:55	938:55	16	;
LEAF_NODE	939:20	939:20	15	ytran
LEAF_NODE	939:26	939:26	15	=
LEAF_NODE	939:28	939:28	15	-
LEAF_NODE	939:29	939:29	15	1.0
EXPR_STATEMENT	939:33	939:62	15	* row * ( pagewidth - overlap ) ;
EXPR	939:33	939:61	16	* row * ( pagewidth - overlap )
UNARY_EXPR	939:33	939:35	17	* row
UNARY_OPERATOR	939:33	939:33	18	*
LEAF_NODE	939:33	939:33	19	*
FIELD	939:35	939:35	18	row
LEAF_NODE	939:35	939:35	19	row
LEAF_NODE	939:39	939:39	17	*
LEAF_NODE	939:41	939:41	17	(
FIELD	939:42	939:42	17	pagewidth
LEAF_NODE	939:42	939:42	18	pagewidth
LEAF_NODE	939:52	939:52	17	-
FIELD	939:54	939:54	17	overlap
LEAF_NODE	939:54	939:54	18	overlap
LEAF_NODE	939:61	939:61	17	)
LEAF_NODE	939:62	939:62	16	;
LEAF_NODE	940:20	940:20	14	}
SELECTION	941:18	942:19	12	
KEYWORD	941:18	941:18	13	else
LEAF_NODE	941:18	941:18	14	else
STATEMENTS	942:19	945:19	13	
LEAF_NODE	942:19	942:19	14	{
STATEMENTS	943:20	944:20	14	
LEAF_NODE	943:20	943:20	15	ytran
LEAF_NODE	943:26	943:26	15	=
LEAF_NODE	943:28	943:28	15	-
LEAF_NODE	943:29	943:29	15	1.0
EXPR_STATEMENT	943:33	943:62	15	* row * ( pagewidth - overlap ) ;
EXPR	943:33	943:61	16	* row * ( pagewidth - overlap )
UNARY_EXPR	943:33	943:35	17	* row
UNARY_OPERATOR	943:33	943:33	18	*
LEAF_NODE	943:33	943:33	19	*
FIELD	943:35	943:35	18	row
LEAF_NODE	943:35	943:35	19	row
LEAF_NODE	943:39	943:39	17	*
LEAF_NODE	943:41	943:41	17	(
FIELD	943:42	943:42	17	pagewidth
LEAF_NODE	943:42	943:42	18	pagewidth
LEAF_NODE	943:52	943:52	17	-
FIELD	943:54	943:54	17	overlap
LEAF_NODE	943:54	943:54	18	overlap
LEAF_NODE	943:61	943:61	17	)
LEAF_NODE	943:62	943:62	16	;
EXPR_STATEMENT	944:20	944:29	15	xtran = 0 ;
EXPR	944:20	944:20	16	xtran = 0
ASSIGN	944:20	944:28	17	xtran = 0
LVAL	944:20	944:20	18	xtran
FIELD	944:20	944:20	19	xtran
LEAF_NODE	944:20	944:20	20	xtran
ASSIGN_OP	944:26	944:26	18	=
LEAF_NODE	944:26	944:26	19	=
RVAL	944:28	944:28	18	0
FIELD	944:28	944:28	19	0
LEAF_NODE	944:28	944:28	20	0
LEAF_NODE	944:29	944:29	16	;
LEAF_NODE	945:19	945:19	14	}
LEAF_NODE	946:17	946:17	11	}
SELECTION	947:16	948:17	9	
KEYWORD	947:16	947:16	10	else
LEAF_NODE	947:16	947:16	11	else
STATEMENTS	948:17	951:18	10	
LEAF_NODE	948:17	948:17	11	{
STATEMENTS	949:17	950:17	11	
EXPR_STATEMENT	949:17	949:49	12	ytran = pageheight - imageheight ;
EXPR	949:17	949:17	13	ytran = pageheight - imageheight
ASSIGN	949:17	949:25	14	ytran = pageheight - imageheight
LVAL	949:17	949:17	15	ytran
FIELD	949:17	949:17	16	ytran
LEAF_NODE	949:17	949:17	17	ytran
ASSIGN_OP	949:23	949:23	15	=
LEAF_NODE	949:23	949:23	16	=
RVAL	949:25	949:38	15	pageheight - imageheight
FIELD	949:25	949:25	16	pageheight
LEAF_NODE	949:25	949:25	17	pageheight
LEAF_NODE	949:36	949:36	16	-
FIELD	949:38	949:38	16	imageheight
LEAF_NODE	949:38	949:38	17	imageheight
LEAF_NODE	949:49	949:49	13	;
EXPR_STATEMENT	950:17	950:26	12	xtran = 0 ;
EXPR	950:17	950:17	13	xtran = 0
ASSIGN	950:17	950:25	14	xtran = 0
LVAL	950:17	950:17	15	xtran
FIELD	950:17	950:17	16	xtran
LEAF_NODE	950:17	950:17	17	xtran
ASSIGN_OP	950:23	950:23	15	=
LEAF_NODE	950:23	950:23	16	=
RVAL	950:25	950:25	15	0
FIELD	950:25	950:25	16	0
LEAF_NODE	950:25	950:25	17	0
LEAF_NODE	950:26	950:26	13	;
LEAF_NODE	951:18	951:18	11	}
LEAF_NODE	952:16	952:16	8	}
EXPR_STATEMENT	953:14	953:53	6	bott_offset += ytran / ( center ? 2 : 1 ) ;
EXPR	953:14	953:14	7	bott_offset += ytran / ( center ? 2 : 1 )
ASSIGN	953:14	953:29	8	bott_offset += ytran / ( center ? 2 : 1 )
LVAL	953:14	953:14	9	bott_offset
FIELD	953:14	953:14	10	bott_offset
LEAF_NODE	953:14	953:14	11	bott_offset
ASSIGN_OP	953:26	953:26	9	+=
LEAF_NODE	953:26	953:26	10	+=
RVAL	953:29	953:52	9	ytran / ( center ? 2 : 1 )
FIELD	953:29	953:29	10	ytran
LEAF_NODE	953:29	953:29	11	ytran
LEAF_NODE	953:35	953:35	10	/
LEAF_NODE	953:37	953:37	10	(
COND_EXPR	953:38	953:51	10	center ? 2 : 1
CONDITION	953:38	953:38	11	center
FIELD	953:38	953:38	12	center
LEAF_NODE	953:38	953:38	13	center
LEAF_NODE	953:45	953:45	11	?
EXPR	953:47	953:47	11	2
FIELD	953:47	953:47	12	2
LEAF_NODE	953:47	953:47	13	2
LEAF_NODE	953:49	953:49	11	:
FIELD	953:51	953:51	11	1
LEAF_NODE	953:51	953:51	12	1
LEAF_NODE	953:52	953:52	10	)
LEAF_NODE	953:53	953:53	7	;
EXPR_STATEMENT	954:14	954:53	6	left_offset += xtran / ( center ? 2 : 1 ) ;
EXPR	954:14	954:14	7	left_offset += xtran / ( center ? 2 : 1 )
ASSIGN	954:14	954:29	8	left_offset += xtran / ( center ? 2 : 1 )
LVAL	954:14	954:14	9	left_offset
FIELD	954:14	954:14	10	left_offset
LEAF_NODE	954:14	954:14	11	left_offset
ASSIGN_OP	954:26	954:26	9	+=
LEAF_NODE	954:26	954:26	10	+=
RVAL	954:29	954:52	9	xtran / ( center ? 2 : 1 )
FIELD	954:29	954:29	10	xtran
LEAF_NODE	954:29	954:29	11	xtran
LEAF_NODE	954:35	954:35	10	/
LEAF_NODE	954:37	954:37	10	(
COND_EXPR	954:38	954:51	10	center ? 2 : 1
CONDITION	954:38	954:38	11	center
FIELD	954:38	954:38	12	center
LEAF_NODE	954:38	954:38	13	center
LEAF_NODE	954:45	954:45	11	?
EXPR	954:47	954:47	11	2
FIELD	954:47	954:47	12	2
LEAF_NODE	954:47	954:47	13	2
LEAF_NODE	954:49	954:49	11	:
FIELD	954:51	954:51	11	1
LEAF_NODE	954:51	954:51	12	1
LEAF_NODE	954:52	954:52	10	)
LEAF_NODE	954:53	954:53	7	;
JUMP_STATEMENT	955:14	955:19	6	break DESTINATION ;
KEYWORD	955:14	955:14	7	break
LEAF_NODE	955:14	955:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	955:19	955:19	7	;
LABEL	956:4	956:11	6	default :
LEAF_NODE	956:4	956:4	7	default
LEAF_NODE	956:11	956:11	7	:
EXPR_STATEMENT	956:14	956:23	6	xtran = 0 ;
EXPR	956:14	956:14	7	xtran = 0
ASSIGN	956:14	956:22	8	xtran = 0
LVAL	956:14	956:14	9	xtran
FIELD	956:14	956:14	10	xtran
LEAF_NODE	956:14	956:14	11	xtran
ASSIGN_OP	956:20	956:20	9	=
LEAF_NODE	956:20	956:20	10	=
RVAL	956:22	956:22	9	0
FIELD	956:22	956:22	10	0
LEAF_NODE	956:22	956:22	11	0
LEAF_NODE	956:23	956:23	7	;
EXPR_STATEMENT	957:13	957:22	6	ytran = 0 ;
EXPR	957:13	957:13	7	ytran = 0
ASSIGN	957:13	957:21	8	ytran = 0
LVAL	957:13	957:13	9	ytran
FIELD	957:13	957:13	10	ytran
LEAF_NODE	957:13	957:13	11	ytran
ASSIGN_OP	957:19	957:19	9	=
LEAF_NODE	957:19	957:19	10	=
RVAL	957:21	957:21	9	0
FIELD	957:21	957:21	10	0
LEAF_NODE	957:21	957:21	11	0
LEAF_NODE	957:22	957:22	7	;
LEAF_NODE	958:4	958:4	5	}
SELECTION	960:2	961:4	3	
KEYWORD	960:2	960:2	4	switch
LEAF_NODE	960:2	960:2	5	switch
LEAF_NODE	960:9	960:9	4	(
CONDITION	960:10	960:10	4	rotation
EXPR	960:10	960:10	5	rotation
FIELD	960:10	960:10	6	rotation
LEAF_NODE	960:10	960:10	7	rotation
LEAF_NODE	960:18	960:18	4	)
STATEMENTS	961:4	977:4	4	
LEAF_NODE	961:4	961:4	5	{
STATEMENTS	962:4	976:14	5	
LABEL	962:4	962:12	6	case 0 :
LEAF_NODE	962:4	962:4	7	case
LEAF_NODE	962:11	962:11	7	0
LEAF_NODE	962:12	962:12	7	:
EXPR_STATEMENT	962:14	962:72	6	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset ) ;
EXPR	962:14	962:14	7	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset )
FUNCTION_CALL	962:14	962:71	8	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset )
CALLEE	962:14	962:14	9	fprintf
LEAF_NODE	962:14	962:14	10	fprintf
LEAF_NODE	962:21	962:21	9	(
ARGUMENT	962:22	962:22	9	fp
FIELD	962:22	962:22	10	fp
LEAF_NODE	962:22	962:22	11	fp
LEAF_NODE	962:24	962:24	9	,
ARGUMENT	962:26	962:26	9	"%f %f translate\n"
FIELD	962:26	962:26	10	"%f %f translate\n"
LEAF_NODE	962:26	962:26	11	"%f %f translate\n"
LEAF_NODE	962:45	962:45	9	,
ARGUMENT	962:47	962:47	9	left_offset
FIELD	962:47	962:47	10	left_offset
LEAF_NODE	962:47	962:47	11	left_offset
LEAF_NODE	962:58	962:58	9	,
ARGUMENT	962:60	962:60	9	bott_offset
FIELD	962:60	962:60	10	bott_offset
LEAF_NODE	962:60	962:60	11	bott_offset
LEAF_NODE	962:71	962:71	9	)
LEAF_NODE	962:72	962:72	7	;
EXPR_STATEMENT	963:14	963:58	6	fprintf ( fp , "%f %f scale\n" , xscale , yscale ) ;
EXPR	963:14	963:14	7	fprintf ( fp , "%f %f scale\n" , xscale , yscale )
FUNCTION_CALL	963:14	963:57	8	fprintf ( fp , "%f %f scale\n" , xscale , yscale )
CALLEE	963:14	963:14	9	fprintf
LEAF_NODE	963:14	963:14	10	fprintf
LEAF_NODE	963:21	963:21	9	(
ARGUMENT	963:22	963:22	9	fp
FIELD	963:22	963:22	10	fp
LEAF_NODE	963:22	963:22	11	fp
LEAF_NODE	963:24	963:24	9	,
ARGUMENT	963:26	963:26	9	"%f %f scale\n"
FIELD	963:26	963:26	10	"%f %f scale\n"
LEAF_NODE	963:26	963:26	11	"%f %f scale\n"
LEAF_NODE	963:41	963:41	9	,
ARGUMENT	963:43	963:43	9	xscale
FIELD	963:43	963:43	10	xscale
LEAF_NODE	963:43	963:43	11	xscale
LEAF_NODE	963:49	963:49	9	,
ARGUMENT	963:51	963:51	9	yscale
FIELD	963:51	963:51	10	yscale
LEAF_NODE	963:51	963:51	11	yscale
LEAF_NODE	963:57	963:57	9	)
LEAF_NODE	963:58	963:58	7	;
JUMP_STATEMENT	964:13	964:18	6	break DESTINATION ;
KEYWORD	964:13	964:13	7	break
LEAF_NODE	964:13	964:13	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	964:18	964:18	7	;
LABEL	965:4	965:12	6	case 180 :
LEAF_NODE	965:4	965:4	7	case
LEAF_NODE	965:9	965:9	7	180
LEAF_NODE	965:12	965:12	7	:
EXPR_STATEMENT	965:14	965:72	6	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset ) ;
EXPR	965:14	965:14	7	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset )
FUNCTION_CALL	965:14	965:71	8	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset )
CALLEE	965:14	965:14	9	fprintf
LEAF_NODE	965:14	965:14	10	fprintf
LEAF_NODE	965:21	965:21	9	(
ARGUMENT	965:22	965:22	9	fp
FIELD	965:22	965:22	10	fp
LEAF_NODE	965:22	965:22	11	fp
LEAF_NODE	965:24	965:24	9	,
ARGUMENT	965:26	965:26	9	"%f %f translate\n"
FIELD	965:26	965:26	10	"%f %f translate\n"
LEAF_NODE	965:26	965:26	11	"%f %f translate\n"
LEAF_NODE	965:45	965:45	9	,
ARGUMENT	965:47	965:47	9	left_offset
FIELD	965:47	965:47	10	left_offset
LEAF_NODE	965:47	965:47	11	left_offset
LEAF_NODE	965:58	965:58	9	,
ARGUMENT	965:60	965:60	9	bott_offset
FIELD	965:60	965:60	10	bott_offset
LEAF_NODE	965:60	965:60	11	bott_offset
LEAF_NODE	965:71	965:71	9	)
LEAF_NODE	965:72	965:72	7	;
EXPR_STATEMENT	966:14	966:85	6	fprintf ( fp , "%f %f scale\n1 1 translate 180 rotate\n" , xscale , yscale ) ;
EXPR	966:14	966:14	7	fprintf ( fp , "%f %f scale\n1 1 translate 180 rotate\n" , xscale , yscale )
FUNCTION_CALL	966:14	966:84	8	fprintf ( fp , "%f %f scale\n1 1 translate 180 rotate\n" , xscale , yscale )
CALLEE	966:14	966:14	9	fprintf
LEAF_NODE	966:14	966:14	10	fprintf
LEAF_NODE	966:21	966:21	9	(
ARGUMENT	966:22	966:22	9	fp
FIELD	966:22	966:22	10	fp
LEAF_NODE	966:22	966:22	11	fp
LEAF_NODE	966:24	966:24	9	,
ARGUMENT	966:26	966:26	9	"%f %f scale\n1 1 translate 180 rotate\n"
FIELD	966:26	966:26	10	"%f %f scale\n1 1 translate 180 rotate\n"
LEAF_NODE	966:26	966:26	11	"%f %f scale\n1 1 translate 180 rotate\n"
LEAF_NODE	966:67	966:67	9	,
ARGUMENT	966:70	966:70	9	xscale
FIELD	966:70	966:70	10	xscale
LEAF_NODE	966:70	966:70	11	xscale
LEAF_NODE	966:76	966:76	9	,
ARGUMENT	966:78	966:78	9	yscale
FIELD	966:78	966:78	10	yscale
LEAF_NODE	966:78	966:78	11	yscale
LEAF_NODE	966:84	966:84	9	)
LEAF_NODE	966:85	966:85	7	;
JUMP_STATEMENT	967:14	967:19	6	break DESTINATION ;
KEYWORD	967:14	967:14	7	break
LEAF_NODE	967:14	967:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	967:19	967:19	7	;
LABEL	968:4	968:12	6	case 90 :
LEAF_NODE	968:4	968:4	7	case
LEAF_NODE	968:10	968:10	7	90
LEAF_NODE	968:12	968:12	7	:
EXPR_STATEMENT	968:14	968:72	6	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset ) ;
EXPR	968:14	968:14	7	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset )
FUNCTION_CALL	968:14	968:71	8	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset )
CALLEE	968:14	968:14	9	fprintf
LEAF_NODE	968:14	968:14	10	fprintf
LEAF_NODE	968:21	968:21	9	(
ARGUMENT	968:22	968:22	9	fp
FIELD	968:22	968:22	10	fp
LEAF_NODE	968:22	968:22	11	fp
LEAF_NODE	968:24	968:24	9	,
ARGUMENT	968:26	968:26	9	"%f %f translate\n"
FIELD	968:26	968:26	10	"%f %f translate\n"
LEAF_NODE	968:26	968:26	11	"%f %f translate\n"
LEAF_NODE	968:45	968:45	9	,
ARGUMENT	968:47	968:47	9	left_offset
FIELD	968:47	968:47	10	left_offset
LEAF_NODE	968:47	968:47	11	left_offset
LEAF_NODE	968:58	968:58	9	,
ARGUMENT	968:60	968:60	9	bott_offset
FIELD	968:60	968:60	10	bott_offset
LEAF_NODE	968:60	968:60	11	bott_offset
LEAF_NODE	968:71	968:71	9	)
LEAF_NODE	968:72	968:72	7	;
EXPR_STATEMENT	969:14	969:83	6	fprintf ( fp , "%f %f scale\n1 0 translate 90 rotate\n" , yscale , xscale ) ;
EXPR	969:14	969:14	7	fprintf ( fp , "%f %f scale\n1 0 translate 90 rotate\n" , yscale , xscale )
FUNCTION_CALL	969:14	969:82	8	fprintf ( fp , "%f %f scale\n1 0 translate 90 rotate\n" , yscale , xscale )
CALLEE	969:14	969:14	9	fprintf
LEAF_NODE	969:14	969:14	10	fprintf
LEAF_NODE	969:21	969:21	9	(
ARGUMENT	969:22	969:22	9	fp
FIELD	969:22	969:22	10	fp
LEAF_NODE	969:22	969:22	11	fp
LEAF_NODE	969:24	969:24	9	,
ARGUMENT	969:26	969:26	9	"%f %f scale\n1 0 translate 90 rotate\n"
FIELD	969:26	969:26	10	"%f %f scale\n1 0 translate 90 rotate\n"
LEAF_NODE	969:26	969:26	11	"%f %f scale\n1 0 translate 90 rotate\n"
LEAF_NODE	969:66	969:66	9	,
ARGUMENT	969:68	969:68	9	yscale
FIELD	969:68	969:68	10	yscale
LEAF_NODE	969:68	969:68	11	yscale
LEAF_NODE	969:74	969:74	9	,
ARGUMENT	969:76	969:76	9	xscale
FIELD	969:76	969:76	10	xscale
LEAF_NODE	969:76	969:76	11	xscale
LEAF_NODE	969:82	969:82	9	)
LEAF_NODE	969:83	969:83	7	;
JUMP_STATEMENT	970:14	970:19	6	break DESTINATION ;
KEYWORD	970:14	970:14	7	break
LEAF_NODE	970:14	970:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	970:19	970:19	7	;
LABEL	971:4	971:12	6	case 270 :
LEAF_NODE	971:4	971:4	7	case
LEAF_NODE	971:9	971:9	7	270
LEAF_NODE	971:12	971:12	7	:
EXPR_STATEMENT	971:14	971:72	6	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset ) ;
EXPR	971:14	971:14	7	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset )
FUNCTION_CALL	971:14	971:71	8	fprintf ( fp , "%f %f translate\n" , left_offset , bott_offset )
CALLEE	971:14	971:14	9	fprintf
LEAF_NODE	971:14	971:14	10	fprintf
LEAF_NODE	971:21	971:21	9	(
ARGUMENT	971:22	971:22	9	fp
FIELD	971:22	971:22	10	fp
LEAF_NODE	971:22	971:22	11	fp
LEAF_NODE	971:24	971:24	9	,
ARGUMENT	971:26	971:26	9	"%f %f translate\n"
FIELD	971:26	971:26	10	"%f %f translate\n"
LEAF_NODE	971:26	971:26	11	"%f %f translate\n"
LEAF_NODE	971:45	971:45	9	,
ARGUMENT	971:47	971:47	9	left_offset
FIELD	971:47	971:47	10	left_offset
LEAF_NODE	971:47	971:47	11	left_offset
LEAF_NODE	971:58	971:58	9	,
ARGUMENT	971:60	971:60	9	bott_offset
FIELD	971:60	971:60	10	bott_offset
LEAF_NODE	971:60	971:60	11	bott_offset
LEAF_NODE	971:71	971:71	9	)
LEAF_NODE	971:72	971:72	7	;
EXPR_STATEMENT	972:14	972:84	6	fprintf ( fp , "%f %f scale\n0 1 translate 270 rotate\n" , yscale , xscale ) ;
EXPR	972:14	972:14	7	fprintf ( fp , "%f %f scale\n0 1 translate 270 rotate\n" , yscale , xscale )
FUNCTION_CALL	972:14	972:83	8	fprintf ( fp , "%f %f scale\n0 1 translate 270 rotate\n" , yscale , xscale )
CALLEE	972:14	972:14	9	fprintf
LEAF_NODE	972:14	972:14	10	fprintf
LEAF_NODE	972:21	972:21	9	(
ARGUMENT	972:22	972:22	9	fp
FIELD	972:22	972:22	10	fp
LEAF_NODE	972:22	972:22	11	fp
LEAF_NODE	972:24	972:24	9	,
ARGUMENT	972:26	972:26	9	"%f %f scale\n0 1 translate 270 rotate\n"
FIELD	972:26	972:26	10	"%f %f scale\n0 1 translate 270 rotate\n"
LEAF_NODE	972:26	972:26	11	"%f %f scale\n0 1 translate 270 rotate\n"
LEAF_NODE	972:67	972:67	9	,
ARGUMENT	972:69	972:69	9	yscale
FIELD	972:69	972:69	10	yscale
LEAF_NODE	972:69	972:69	11	yscale
LEAF_NODE	972:75	972:75	9	,
ARGUMENT	972:77	972:77	9	xscale
FIELD	972:77	972:77	10	xscale
LEAF_NODE	972:77	972:77	11	xscale
LEAF_NODE	972:83	972:83	9	)
LEAF_NODE	972:84	972:84	7	;
JUMP_STATEMENT	973:14	973:19	6	break DESTINATION ;
KEYWORD	973:14	973:14	7	break
LEAF_NODE	973:14	973:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	973:19	973:19	7	;
LABEL	974:4	974:11	6	default :
LEAF_NODE	974:4	974:4	7	default
LEAF_NODE	974:11	974:11	7	:
EXPR_STATEMENT	974:14	974:101	6	TIFFError ( "exportMaskedImage" , "Unsupported rotation angle %d. No rotation" , rotation ) ;
EXPR	974:14	974:14	7	TIFFError ( "exportMaskedImage" , "Unsupported rotation angle %d. No rotation" , rotation )
FUNCTION_CALL	974:14	974:100	8	TIFFError ( "exportMaskedImage" , "Unsupported rotation angle %d. No rotation" , rotation )
CALLEE	974:14	974:14	9	TIFFError
LEAF_NODE	974:14	974:14	10	TIFFError
LEAF_NODE	974:24	974:24	9	(
ARGUMENT	974:25	974:25	9	"exportMaskedImage"
FIELD	974:25	974:25	10	"exportMaskedImage"
LEAF_NODE	974:25	974:25	11	"exportMaskedImage"
LEAF_NODE	974:44	974:44	9	,
ARGUMENT	974:46	974:46	9	"Unsupported rotation angle %d. No rotation"
FIELD	974:46	974:46	10	"Unsupported rotation angle %d. No rotation"
LEAF_NODE	974:46	974:46	11	"Unsupported rotation angle %d. No rotation"
LEAF_NODE	974:90	974:90	9	,
ARGUMENT	974:92	974:92	9	rotation
FIELD	974:92	974:92	10	rotation
LEAF_NODE	974:92	974:92	11	rotation
LEAF_NODE	974:100	974:100	9	)
LEAF_NODE	974:101	974:101	7	;
EXPR_STATEMENT	975:13	975:58	6	fprintf ( fp , "%f %f scale\n" , xscale , yscale ) ;
EXPR	975:13	975:13	7	fprintf ( fp , "%f %f scale\n" , xscale , yscale )
FUNCTION_CALL	975:13	975:57	8	fprintf ( fp , "%f %f scale\n" , xscale , yscale )
CALLEE	975:13	975:13	9	fprintf
LEAF_NODE	975:13	975:13	10	fprintf
LEAF_NODE	975:20	975:20	9	(
ARGUMENT	975:22	975:22	9	fp
FIELD	975:22	975:22	10	fp
LEAF_NODE	975:22	975:22	11	fp
LEAF_NODE	975:24	975:24	9	,
ARGUMENT	975:26	975:26	9	"%f %f scale\n"
FIELD	975:26	975:26	10	"%f %f scale\n"
LEAF_NODE	975:26	975:26	11	"%f %f scale\n"
LEAF_NODE	975:41	975:41	9	,
ARGUMENT	975:43	975:43	9	xscale
FIELD	975:43	975:43	10	xscale
LEAF_NODE	975:43	975:43	11	xscale
LEAF_NODE	975:49	975:49	9	,
ARGUMENT	975:51	975:51	9	yscale
FIELD	975:51	975:51	10	yscale
LEAF_NODE	975:51	975:51	11	yscale
LEAF_NODE	975:57	975:57	9	)
LEAF_NODE	975:58	975:58	7	;
JUMP_STATEMENT	976:14	976:19	6	break DESTINATION ;
KEYWORD	976:14	976:14	7	break
LEAF_NODE	976:14	976:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	976:19	976:19	7	;
LEAF_NODE	977:4	977:4	5	}
JUMP_STATEMENT	979:2	979:12	3	return ( 0 ) ;
KEYWORD	979:2	979:2	4	return
LEAF_NODE	979:2	979:2	5	return
DESTINATION	979:9	979:9	4	( 0 )
EXPR	979:9	979:11	5	( 0 )
LEAF_NODE	979:9	979:9	6	(
FIELD	979:10	979:10	6	0
LEAF_NODE	979:10	979:10	7	0
LEAF_NODE	979:11	979:11	6	)
LEAF_NODE	979:12	979:12	4	;
LEAF_NODE	980:2	980:2	2	}
FUNCTION_DEF	983:0	1005:2	1	
RETURN_TYPE	983:0	983:0	2	int
TYPE_NAME	983:0	983:0	3	int
LEAF_NODE	983:0	983:0	4	int
FUNCTION_NAME	983:5	983:5	2	psRotateImage
LEAF_NODE	983:5	983:5	3	psRotateImage
PARAMETER_LIST	983:19	984:60	2	( FILE * fd , int rotation , double pswidth , double psheight , double left_offset , double bottom_offset )
LEAF_NODE	983:19	983:19	3	(
PARAMETER_DECL	983:20	983:27	3	FILE * fd
TYPE	983:20	983:25	4	FILE *
TYPE_NAME	983:20	983:20	5	FILE
LEAF_NODE	983:20	983:20	6	FILE
POINTER	983:25	983:25	5	*
LEAF_NODE	983:25	983:25	6	*
NAME	983:27	983:27	4	fd
LEAF_NODE	983:27	983:27	5	fd
LEAF_NODE	983:29	983:29	3	,
PARAMETER_DECL	983:31	983:35	3	int rotation
TYPE	983:31	983:31	4	int
TYPE_NAME	983:31	983:31	5	int
LEAF_NODE	983:31	983:31	6	int
NAME	983:35	983:35	4	rotation
LEAF_NODE	983:35	983:35	5	rotation
LEAF_NODE	983:43	983:43	3	,
PARAMETER_DECL	983:45	983:52	3	double pswidth
TYPE	983:45	983:45	4	double
TYPE_NAME	983:45	983:45	5	double
LEAF_NODE	983:45	983:45	6	double
NAME	983:52	983:52	4	pswidth
LEAF_NODE	983:52	983:52	5	pswidth
LEAF_NODE	983:59	983:59	3	,
PARAMETER_DECL	983:61	983:68	3	double psheight
TYPE	983:61	983:61	4	double
TYPE_NAME	983:61	983:61	5	double
LEAF_NODE	983:61	983:61	6	double
NAME	983:68	983:68	4	psheight
LEAF_NODE	983:68	983:68	5	psheight
LEAF_NODE	983:76	983:76	3	,
PARAMETER_DECL	984:20	984:27	3	double left_offset
TYPE	984:20	984:20	4	double
TYPE_NAME	984:20	984:20	5	double
LEAF_NODE	984:20	984:20	6	double
NAME	984:27	984:27	4	left_offset
LEAF_NODE	984:27	984:27	5	left_offset
LEAF_NODE	984:38	984:38	3	,
PARAMETER_DECL	984:40	984:47	3	double bottom_offset
TYPE	984:40	984:40	4	double
TYPE_NAME	984:40	984:40	5	double
LEAF_NODE	984:40	984:40	6	double
NAME	984:47	984:47	4	bottom_offset
LEAF_NODE	984:47	984:47	5	bottom_offset
LEAF_NODE	984:60	984:60	3	)
LEAF_NODE	985:2	985:2	2	{
STATEMENTS	986:2	1004:2	2	
SELECTION	986:2	987:4	3	
KEYWORD	986:2	986:2	4	if
LEAF_NODE	986:2	986:2	5	if
LEAF_NODE	986:5	986:5	4	(
CONDITION	986:6	986:6	4	( left_offset != 0.0 ) || ( bottom_offset != 0 )
EXPR	986:6	986:6	5	( left_offset != 0.0 ) || ( bottom_offset != 0 )
OR	986:6	986:30	6	( left_offset != 0.0 ) || ( bottom_offset != 0 )
EXPR	986:6	986:25	7	( left_offset != 0.0 )
LEAF_NODE	986:6	986:6	8	(
FIELD	986:7	986:7	8	left_offset
LEAF_NODE	986:7	986:7	9	left_offset
EQ_OPERATOR	986:19	986:19	8	!=
LEAF_NODE	986:19	986:19	9	!=
FIELD	986:22	986:22	8	0.0
LEAF_NODE	986:22	986:22	9	0.0
LEAF_NODE	986:25	986:25	8	)
LEAF_NODE	986:27	986:27	7	||
EXPR	986:30	986:49	7	( bottom_offset != 0 )
LEAF_NODE	986:30	986:30	8	(
FIELD	986:31	986:31	8	bottom_offset
LEAF_NODE	986:31	986:31	9	bottom_offset
EQ_OPERATOR	986:45	986:45	8	!=
LEAF_NODE	986:45	986:45	9	!=
FIELD	986:48	986:48	8	0
LEAF_NODE	986:48	986:48	9	0
LEAF_NODE	986:49	986:49	8	)
LEAF_NODE	986:50	986:50	4	)
STATEMENTS	987:4	987:4	4	
EXPR_STATEMENT	987:4	987:65	5	fprintf ( fd , "%f %f translate\n" , left_offset , bottom_offset ) ;
EXPR	987:4	987:4	6	fprintf ( fd , "%f %f translate\n" , left_offset , bottom_offset )
FUNCTION_CALL	987:4	987:64	7	fprintf ( fd , "%f %f translate\n" , left_offset , bottom_offset )
CALLEE	987:4	987:4	8	fprintf
LEAF_NODE	987:4	987:4	9	fprintf
LEAF_NODE	987:12	987:12	8	(
ARGUMENT	987:13	987:13	8	fd
FIELD	987:13	987:13	9	fd
LEAF_NODE	987:13	987:13	10	fd
LEAF_NODE	987:15	987:15	8	,
ARGUMENT	987:17	987:17	8	"%f %f translate\n"
FIELD	987:17	987:17	9	"%f %f translate\n"
LEAF_NODE	987:17	987:17	10	"%f %f translate\n"
LEAF_NODE	987:36	987:36	8	,
ARGUMENT	987:38	987:38	8	left_offset
FIELD	987:38	987:38	9	left_offset
LEAF_NODE	987:38	987:38	10	left_offset
LEAF_NODE	987:49	987:49	8	,
ARGUMENT	987:51	987:51	8	bottom_offset
FIELD	987:51	987:51	9	bottom_offset
LEAF_NODE	987:51	987:51	10	bottom_offset
LEAF_NODE	987:64	987:64	8	)
LEAF_NODE	987:65	987:65	6	;
SELECTION	990:2	991:4	3	
KEYWORD	990:2	990:2	4	switch
LEAF_NODE	990:2	990:2	5	switch
LEAF_NODE	990:9	990:9	4	(
CONDITION	990:10	990:10	4	rotation
EXPR	990:10	990:10	5	rotation
FIELD	990:10	990:10	6	rotation
LEAF_NODE	990:10	990:10	7	rotation
LEAF_NODE	990:18	990:18	4	)
STATEMENTS	991:4	1003:4	4	
LEAF_NODE	991:4	991:4	5	{
STATEMENTS	992:4	1002:14	5	
LABEL	992:4	992:12	6	case 0 :
LEAF_NODE	992:4	992:4	7	case
LEAF_NODE	992:11	992:11	7	0
LEAF_NODE	992:12	992:12	7	:
EXPR_STATEMENT	992:14	992:62	6	fprintf ( fd , "%f %f scale\n" , pswidth , psheight ) ;
EXPR	992:14	992:14	7	fprintf ( fd , "%f %f scale\n" , pswidth , psheight )
FUNCTION_CALL	992:14	992:61	8	fprintf ( fd , "%f %f scale\n" , pswidth , psheight )
CALLEE	992:14	992:14	9	fprintf
LEAF_NODE	992:14	992:14	10	fprintf
LEAF_NODE	992:22	992:22	9	(
ARGUMENT	992:23	992:23	9	fd
FIELD	992:23	992:23	10	fd
LEAF_NODE	992:23	992:23	11	fd
LEAF_NODE	992:25	992:25	9	,
ARGUMENT	992:27	992:27	9	"%f %f scale\n"
FIELD	992:27	992:27	10	"%f %f scale\n"
LEAF_NODE	992:27	992:27	11	"%f %f scale\n"
LEAF_NODE	992:42	992:42	9	,
ARGUMENT	992:44	992:44	9	pswidth
FIELD	992:44	992:44	10	pswidth
LEAF_NODE	992:44	992:44	11	pswidth
LEAF_NODE	992:51	992:51	9	,
ARGUMENT	992:53	992:53	9	psheight
FIELD	992:53	992:53	10	psheight
LEAF_NODE	992:53	992:53	11	psheight
LEAF_NODE	992:61	992:61	9	)
LEAF_NODE	992:62	992:62	7	;
JUMP_STATEMENT	993:14	993:19	6	break DESTINATION ;
KEYWORD	993:14	993:14	7	break
LEAF_NODE	993:14	993:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	993:19	993:19	7	;
LABEL	994:4	994:12	6	case 90 :
LEAF_NODE	994:4	994:4	7	case
LEAF_NODE	994:10	994:10	7	90
LEAF_NODE	994:12	994:12	7	:
EXPR_STATEMENT	994:14	994:87	6	fprintf ( fd , "%f %f scale\n1 0 translate 90 rotate\n" , psheight , pswidth ) ;
EXPR	994:14	994:14	7	fprintf ( fd , "%f %f scale\n1 0 translate 90 rotate\n" , psheight , pswidth )
FUNCTION_CALL	994:14	994:86	8	fprintf ( fd , "%f %f scale\n1 0 translate 90 rotate\n" , psheight , pswidth )
CALLEE	994:14	994:14	9	fprintf
LEAF_NODE	994:14	994:14	10	fprintf
LEAF_NODE	994:22	994:22	9	(
ARGUMENT	994:23	994:23	9	fd
FIELD	994:23	994:23	10	fd
LEAF_NODE	994:23	994:23	11	fd
LEAF_NODE	994:25	994:25	9	,
ARGUMENT	994:27	994:27	9	"%f %f scale\n1 0 translate 90 rotate\n"
FIELD	994:27	994:27	10	"%f %f scale\n1 0 translate 90 rotate\n"
LEAF_NODE	994:27	994:27	11	"%f %f scale\n1 0 translate 90 rotate\n"
LEAF_NODE	994:67	994:67	9	,
ARGUMENT	994:69	994:69	9	psheight
FIELD	994:69	994:69	10	psheight
LEAF_NODE	994:69	994:69	11	psheight
LEAF_NODE	994:77	994:77	9	,
ARGUMENT	994:79	994:79	9	pswidth
FIELD	994:79	994:79	10	pswidth
LEAF_NODE	994:79	994:79	11	pswidth
LEAF_NODE	994:86	994:86	9	)
LEAF_NODE	994:87	994:87	7	;
JUMP_STATEMENT	995:14	995:19	6	break DESTINATION ;
KEYWORD	995:14	995:14	7	break
LEAF_NODE	995:14	995:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	995:19	995:19	7	;
LABEL	996:4	996:12	6	case 180 :
LEAF_NODE	996:4	996:4	7	case
LEAF_NODE	996:9	996:9	7	180
LEAF_NODE	996:12	996:12	7	:
EXPR_STATEMENT	996:14	996:88	6	fprintf ( fd , "%f %f scale\n1 1 translate 180 rotate\n" , pswidth , psheight ) ;
EXPR	996:14	996:14	7	fprintf ( fd , "%f %f scale\n1 1 translate 180 rotate\n" , pswidth , psheight )
FUNCTION_CALL	996:14	996:87	8	fprintf ( fd , "%f %f scale\n1 1 translate 180 rotate\n" , pswidth , psheight )
CALLEE	996:14	996:14	9	fprintf
LEAF_NODE	996:14	996:14	10	fprintf
LEAF_NODE	996:22	996:22	9	(
ARGUMENT	996:23	996:23	9	fd
FIELD	996:23	996:23	10	fd
LEAF_NODE	996:23	996:23	11	fd
LEAF_NODE	996:25	996:25	9	,
ARGUMENT	996:27	996:27	9	"%f %f scale\n1 1 translate 180 rotate\n"
FIELD	996:27	996:27	10	"%f %f scale\n1 1 translate 180 rotate\n"
LEAF_NODE	996:27	996:27	11	"%f %f scale\n1 1 translate 180 rotate\n"
LEAF_NODE	996:68	996:68	9	,
ARGUMENT	996:70	996:70	9	pswidth
FIELD	996:70	996:70	10	pswidth
LEAF_NODE	996:70	996:70	11	pswidth
LEAF_NODE	996:77	996:77	9	,
ARGUMENT	996:79	996:79	9	psheight
FIELD	996:79	996:79	10	psheight
LEAF_NODE	996:79	996:79	11	psheight
LEAF_NODE	996:87	996:87	9	)
LEAF_NODE	996:88	996:88	7	;
JUMP_STATEMENT	997:14	997:19	6	break DESTINATION ;
KEYWORD	997:14	997:14	7	break
LEAF_NODE	997:14	997:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	997:19	997:19	7	;
LABEL	998:4	998:12	6	case 270 :
LEAF_NODE	998:4	998:4	7	case
LEAF_NODE	998:9	998:9	7	270
LEAF_NODE	998:12	998:12	7	:
EXPR_STATEMENT	998:14	998:88	6	fprintf ( fd , "%f %f scale\n0 1 translate 270 rotate\n" , psheight , pswidth ) ;
EXPR	998:14	998:14	7	fprintf ( fd , "%f %f scale\n0 1 translate 270 rotate\n" , psheight , pswidth )
FUNCTION_CALL	998:14	998:87	8	fprintf ( fd , "%f %f scale\n0 1 translate 270 rotate\n" , psheight , pswidth )
CALLEE	998:14	998:14	9	fprintf
LEAF_NODE	998:14	998:14	10	fprintf
LEAF_NODE	998:22	998:22	9	(
ARGUMENT	998:23	998:23	9	fd
FIELD	998:23	998:23	10	fd
LEAF_NODE	998:23	998:23	11	fd
LEAF_NODE	998:25	998:25	9	,
ARGUMENT	998:27	998:27	9	"%f %f scale\n0 1 translate 270 rotate\n"
FIELD	998:27	998:27	10	"%f %f scale\n0 1 translate 270 rotate\n"
LEAF_NODE	998:27	998:27	11	"%f %f scale\n0 1 translate 270 rotate\n"
LEAF_NODE	998:68	998:68	9	,
ARGUMENT	998:70	998:70	9	psheight
FIELD	998:70	998:70	10	psheight
LEAF_NODE	998:70	998:70	11	psheight
LEAF_NODE	998:78	998:78	9	,
ARGUMENT	998:80	998:80	9	pswidth
FIELD	998:80	998:80	10	pswidth
LEAF_NODE	998:80	998:80	11	pswidth
LEAF_NODE	998:87	998:87	9	)
LEAF_NODE	998:88	998:88	7	;
JUMP_STATEMENT	999:14	999:19	6	break DESTINATION ;
KEYWORD	999:14	999:14	7	break
LEAF_NODE	999:14	999:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	999:19	999:19	7	;
LABEL	1000:4	1000:11	6	default :
LEAF_NODE	1000:4	1000:4	7	default
LEAF_NODE	1000:11	1000:11	7	:
EXPR_STATEMENT	1000:14	1000:79	6	TIFFError ( "psRotateImage" , "Unsupported rotation %d." , rotation ) ;
EXPR	1000:14	1000:14	7	TIFFError ( "psRotateImage" , "Unsupported rotation %d." , rotation )
FUNCTION_CALL	1000:14	1000:78	8	TIFFError ( "psRotateImage" , "Unsupported rotation %d." , rotation )
CALLEE	1000:14	1000:14	9	TIFFError
LEAF_NODE	1000:14	1000:14	10	TIFFError
LEAF_NODE	1000:24	1000:24	9	(
ARGUMENT	1000:25	1000:25	9	"psRotateImage"
FIELD	1000:25	1000:25	10	"psRotateImage"
LEAF_NODE	1000:25	1000:25	11	"psRotateImage"
LEAF_NODE	1000:40	1000:40	9	,
ARGUMENT	1000:42	1000:42	9	"Unsupported rotation %d."
FIELD	1000:42	1000:42	10	"Unsupported rotation %d."
LEAF_NODE	1000:42	1000:42	11	"Unsupported rotation %d."
LEAF_NODE	1000:68	1000:68	9	,
ARGUMENT	1000:70	1000:70	9	rotation
FIELD	1000:70	1000:70	10	rotation
LEAF_NODE	1000:70	1000:70	11	rotation
LEAF_NODE	1000:78	1000:78	9	)
LEAF_NODE	1000:79	1000:79	7	;
EXPR_STATEMENT	1001:13	1001:61	6	fprintf ( fd , "%f %f scale\n" , pswidth , psheight ) ;
EXPR	1001:13	1001:13	7	fprintf ( fd , "%f %f scale\n" , pswidth , psheight )
FUNCTION_CALL	1001:13	1001:60	8	fprintf ( fd , "%f %f scale\n" , pswidth , psheight )
CALLEE	1001:13	1001:13	9	fprintf
LEAF_NODE	1001:13	1001:13	10	fprintf
LEAF_NODE	1001:20	1001:20	9	(
ARGUMENT	1001:22	1001:22	9	fd
FIELD	1001:22	1001:22	10	fd
LEAF_NODE	1001:22	1001:22	11	fd
LEAF_NODE	1001:24	1001:24	9	,
ARGUMENT	1001:26	1001:26	9	"%f %f scale\n"
FIELD	1001:26	1001:26	10	"%f %f scale\n"
LEAF_NODE	1001:26	1001:26	11	"%f %f scale\n"
LEAF_NODE	1001:41	1001:41	9	,
ARGUMENT	1001:43	1001:43	9	pswidth
FIELD	1001:43	1001:43	10	pswidth
LEAF_NODE	1001:43	1001:43	11	pswidth
LEAF_NODE	1001:50	1001:50	9	,
ARGUMENT	1001:52	1001:52	9	psheight
FIELD	1001:52	1001:52	10	psheight
LEAF_NODE	1001:52	1001:52	11	psheight
LEAF_NODE	1001:60	1001:60	9	)
LEAF_NODE	1001:61	1001:61	7	;
JUMP_STATEMENT	1002:14	1002:24	6	return ( 1 ) ;
KEYWORD	1002:14	1002:14	7	return
LEAF_NODE	1002:14	1002:14	8	return
DESTINATION	1002:21	1002:21	7	( 1 )
EXPR	1002:21	1002:23	8	( 1 )
LEAF_NODE	1002:21	1002:21	9	(
FIELD	1002:22	1002:22	9	1
LEAF_NODE	1002:22	1002:22	10	1
LEAF_NODE	1002:23	1002:23	9	)
LEAF_NODE	1002:24	1002:24	7	;
LEAF_NODE	1003:4	1003:4	5	}
JUMP_STATEMENT	1004:2	1004:12	3	return ( 0 ) ;
KEYWORD	1004:2	1004:2	4	return
LEAF_NODE	1004:2	1004:2	5	return
DESTINATION	1004:9	1004:9	4	( 0 )
EXPR	1004:9	1004:11	5	( 0 )
LEAF_NODE	1004:9	1004:9	6	(
FIELD	1004:10	1004:10	6	0
LEAF_NODE	1004:10	1004:10	7	0
LEAF_NODE	1004:11	1004:11	6	)
LEAF_NODE	1004:12	1004:12	4	;
LEAF_NODE	1005:2	1005:2	2	}
FUNCTION_DEF	1008:0	1069:2	1	
RETURN_TYPE	1008:0	1008:0	2	int
TYPE_NAME	1008:0	1008:0	3	int
LEAF_NODE	1008:0	1008:0	4	int
FUNCTION_NAME	1008:4	1008:4	2	psScaleImage
LEAF_NODE	1008:4	1008:4	3	psScaleImage
PARAMETER_LIST	1008:16	1010:57	2	( FILE * fd , double scale , int rotation , int center , double reqwidth , double reqheight , double pswidth , double psheight , double left_offset , double bottom_offset )
LEAF_NODE	1008:16	1008:16	3	(
PARAMETER_DECL	1008:17	1008:24	3	FILE * fd
TYPE	1008:17	1008:22	4	FILE *
TYPE_NAME	1008:17	1008:17	5	FILE
LEAF_NODE	1008:17	1008:17	6	FILE
POINTER	1008:22	1008:22	5	*
LEAF_NODE	1008:22	1008:22	6	*
NAME	1008:24	1008:24	4	fd
LEAF_NODE	1008:24	1008:24	5	fd
LEAF_NODE	1008:26	1008:26	3	,
PARAMETER_DECL	1008:28	1008:35	3	double scale
TYPE	1008:28	1008:28	4	double
TYPE_NAME	1008:28	1008:28	5	double
LEAF_NODE	1008:28	1008:28	6	double
NAME	1008:35	1008:35	4	scale
LEAF_NODE	1008:35	1008:35	5	scale
LEAF_NODE	1008:40	1008:40	3	,
PARAMETER_DECL	1008:42	1008:46	3	int rotation
TYPE	1008:42	1008:42	4	int
TYPE_NAME	1008:42	1008:42	5	int
LEAF_NODE	1008:42	1008:42	6	int
NAME	1008:46	1008:46	4	rotation
LEAF_NODE	1008:46	1008:46	5	rotation
LEAF_NODE	1008:54	1008:54	3	,
PARAMETER_DECL	1008:56	1008:60	3	int center
TYPE	1008:56	1008:56	4	int
TYPE_NAME	1008:56	1008:56	5	int
LEAF_NODE	1008:56	1008:56	6	int
NAME	1008:60	1008:60	4	center
LEAF_NODE	1008:60	1008:60	5	center
LEAF_NODE	1008:66	1008:66	3	,
PARAMETER_DECL	1009:17	1009:24	3	double reqwidth
TYPE	1009:17	1009:17	4	double
TYPE_NAME	1009:17	1009:17	5	double
LEAF_NODE	1009:17	1009:17	6	double
NAME	1009:24	1009:24	4	reqwidth
LEAF_NODE	1009:24	1009:24	5	reqwidth
LEAF_NODE	1009:32	1009:32	3	,
PARAMETER_DECL	1009:34	1009:41	3	double reqheight
TYPE	1009:34	1009:34	4	double
TYPE_NAME	1009:34	1009:34	5	double
LEAF_NODE	1009:34	1009:34	6	double
NAME	1009:41	1009:41	4	reqheight
LEAF_NODE	1009:41	1009:41	5	reqheight
LEAF_NODE	1009:50	1009:50	3	,
PARAMETER_DECL	1009:52	1009:59	3	double pswidth
TYPE	1009:52	1009:52	4	double
TYPE_NAME	1009:52	1009:52	5	double
LEAF_NODE	1009:52	1009:52	6	double
NAME	1009:59	1009:59	4	pswidth
LEAF_NODE	1009:59	1009:59	5	pswidth
LEAF_NODE	1009:66	1009:66	3	,
PARAMETER_DECL	1009:68	1009:75	3	double psheight
TYPE	1009:68	1009:68	4	double
TYPE_NAME	1009:68	1009:68	5	double
LEAF_NODE	1009:68	1009:68	6	double
NAME	1009:75	1009:75	4	psheight
LEAF_NODE	1009:75	1009:75	5	psheight
LEAF_NODE	1009:83	1009:83	3	,
PARAMETER_DECL	1010:17	1010:24	3	double left_offset
TYPE	1010:17	1010:17	4	double
TYPE_NAME	1010:17	1010:17	5	double
LEAF_NODE	1010:17	1010:17	6	double
NAME	1010:24	1010:24	4	left_offset
LEAF_NODE	1010:24	1010:24	5	left_offset
LEAF_NODE	1010:35	1010:35	3	,
PARAMETER_DECL	1010:37	1010:44	3	double bottom_offset
TYPE	1010:37	1010:37	4	double
TYPE_NAME	1010:37	1010:37	5	double
LEAF_NODE	1010:37	1010:37	6	double
NAME	1010:44	1010:44	4	bottom_offset
LEAF_NODE	1010:44	1010:44	5	bottom_offset
LEAF_NODE	1010:57	1010:57	3	)
LEAF_NODE	1011:2	1011:2	2	{
STATEMENTS	1012:2	1068:2	2	
SIMPLE_DECL	1012:2	1012:37	3	double hcenter ; hcenter = 0.0 , double vcenter ; vcenter = 0.0 ;
INIT_DECL_LIST	1012:2	1012:2	4	double hcenter ; hcenter = 0.0 , double vcenter ; vcenter = 0.0
VAR_DECL	1012:2	1012:9	5	double hcenter ; hcenter = 0.0
TYPE	1012:2	1012:2	6	double
TYPE_NAME	1012:2	1012:2	7	double
LEAF_NODE	1012:2	1012:2	8	double
NAME	1012:9	1012:9	6	hcenter
LEAF_NODE	1012:9	1012:9	7	hcenter
LEAF_NODE	0:0	0:0	6	;
INIT	1012:9	1012:9	6	hcenter = 0.0
ASSIGN	1012:9	1012:19	7	hcenter = 0.0
LVAL	1012:9	1012:9	8	hcenter
NAME	1012:9	1012:9	9	hcenter
LEAF_NODE	1012:9	1012:9	10	hcenter
ASSIGN_OP	1012:17	1012:17	8	=
LEAF_NODE	1012:17	1012:17	9	=
RVAL	1012:19	1012:19	8	0.0
FIELD	1012:19	1012:19	9	0.0
LEAF_NODE	1012:19	1012:19	10	0.0
LEAF_NODE	1012:22	1012:22	5	,
VAR_DECL	1012:2	1012:24	5	double vcenter ; vcenter = 0.0
TYPE	1012:2	1012:2	6	double
TYPE_NAME	1012:2	1012:2	7	double
LEAF_NODE	1012:2	1012:2	8	double
NAME	1012:24	1012:24	6	vcenter
LEAF_NODE	1012:24	1012:24	7	vcenter
LEAF_NODE	0:0	0:0	6	;
INIT	1012:24	1012:24	6	vcenter = 0.0
ASSIGN	1012:24	1012:34	7	vcenter = 0.0
LVAL	1012:24	1012:24	8	vcenter
NAME	1012:24	1012:24	9	vcenter
LEAF_NODE	1012:24	1012:24	10	vcenter
ASSIGN_OP	1012:32	1012:32	8	=
LEAF_NODE	1012:32	1012:32	9	=
RVAL	1012:34	1012:34	8	0.0
FIELD	1012:34	1012:34	9	0.0
LEAF_NODE	1012:34	1012:34	10	0.0
LEAF_NODE	1012:37	1012:37	4	;
SELECTION	1015:2	1016:4	3	
KEYWORD	1015:2	1015:2	4	if
LEAF_NODE	1015:2	1015:2	5	if
LEAF_NODE	1015:5	1015:5	4	(
CONDITION	1015:6	1015:6	4	center
EXPR	1015:6	1015:6	5	center
FIELD	1015:6	1015:6	6	center
LEAF_NODE	1015:6	1015:6	7	center
LEAF_NODE	1015:12	1015:12	4	)
STATEMENTS	1016:4	1041:4	4	
LEAF_NODE	1016:4	1016:4	5	{
STATEMENTS	1017:4	1017:4	5	
SELECTION	1017:4	1018:6	6	
KEYWORD	1017:4	1017:4	7	switch
LEAF_NODE	1017:4	1017:4	8	switch
LEAF_NODE	1017:11	1017:11	7	(
CONDITION	1017:12	1017:12	7	rotation
EXPR	1017:12	1017:12	8	rotation
FIELD	1017:12	1017:12	9	rotation
LEAF_NODE	1017:12	1017:12	10	rotation
LEAF_NODE	1017:20	1017:20	7	)
STATEMENTS	1018:6	1040:6	7	
LEAF_NODE	1018:6	1018:6	8	{
STATEMENTS	1019:6	1039:17	8	
LABEL	1019:6	1019:15	9	case 90 :
LEAF_NODE	1019:6	1019:6	10	case
LEAF_NODE	1019:13	1019:13	10	90
LEAF_NODE	1019:15	1019:15	10	:
EXPR_STATEMENT	1019:17	1019:60	9	vcenter = ( reqheight - pswidth * scale ) / 2 ;
EXPR	1019:17	1019:17	10	vcenter = ( reqheight - pswidth * scale ) / 2
ASSIGN	1019:17	1019:27	11	vcenter = ( reqheight - pswidth * scale ) / 2
LVAL	1019:17	1019:17	12	vcenter
FIELD	1019:17	1019:17	13	vcenter
LEAF_NODE	1019:17	1019:17	14	vcenter
ASSIGN_OP	1019:25	1019:25	12	=
LEAF_NODE	1019:25	1019:25	13	=
RVAL	1019:27	1019:59	12	( reqheight - pswidth * scale ) / 2
LEAF_NODE	1019:27	1019:27	13	(
FIELD	1019:28	1019:28	13	reqheight
LEAF_NODE	1019:28	1019:28	14	reqheight
LEAF_NODE	1019:38	1019:38	13	-
FIELD	1019:40	1019:40	13	pswidth
LEAF_NODE	1019:40	1019:40	14	pswidth
LEAF_NODE	1019:48	1019:48	13	*
FIELD	1019:50	1019:50	13	scale
LEAF_NODE	1019:50	1019:50	14	scale
LEAF_NODE	1019:55	1019:55	13	)
LEAF_NODE	1019:57	1019:57	13	/
FIELD	1019:59	1019:59	13	2
LEAF_NODE	1019:59	1019:59	14	2
LEAF_NODE	1019:60	1019:60	10	;
EXPR_STATEMENT	1020:16	1020:59	9	hcenter = ( reqwidth - psheight * scale ) / 2 ;
EXPR	1020:16	1020:16	10	hcenter = ( reqwidth - psheight * scale ) / 2
ASSIGN	1020:16	1020:26	11	hcenter = ( reqwidth - psheight * scale ) / 2
LVAL	1020:16	1020:16	12	hcenter
FIELD	1020:16	1020:16	13	hcenter
LEAF_NODE	1020:16	1020:16	14	hcenter
ASSIGN_OP	1020:24	1020:24	12	=
LEAF_NODE	1020:24	1020:24	13	=
RVAL	1020:26	1020:58	12	( reqwidth - psheight * scale ) / 2
LEAF_NODE	1020:26	1020:26	13	(
FIELD	1020:27	1020:27	13	reqwidth
LEAF_NODE	1020:27	1020:27	14	reqwidth
LEAF_NODE	1020:36	1020:36	13	-
FIELD	1020:38	1020:38	13	psheight
LEAF_NODE	1020:38	1020:38	14	psheight
LEAF_NODE	1020:47	1020:47	13	*
FIELD	1020:49	1020:49	13	scale
LEAF_NODE	1020:49	1020:49	14	scale
LEAF_NODE	1020:54	1020:54	13	)
LEAF_NODE	1020:56	1020:56	13	/
FIELD	1020:58	1020:58	13	2
LEAF_NODE	1020:58	1020:58	14	2
LEAF_NODE	1020:59	1020:59	10	;
EXPR_STATEMENT	1021:17	1021:68	9	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter ) ;
EXPR	1021:17	1021:17	10	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter )
FUNCTION_CALL	1021:17	1021:67	11	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter )
CALLEE	1021:17	1021:17	12	fprintf
LEAF_NODE	1021:17	1021:17	13	fprintf
LEAF_NODE	1021:25	1021:25	12	(
ARGUMENT	1021:26	1021:26	12	fd
FIELD	1021:26	1021:26	13	fd
LEAF_NODE	1021:26	1021:26	14	fd
LEAF_NODE	1021:28	1021:28	12	,
ARGUMENT	1021:30	1021:30	12	"%f %f translate\n"
FIELD	1021:30	1021:30	13	"%f %f translate\n"
LEAF_NODE	1021:30	1021:30	14	"%f %f translate\n"
LEAF_NODE	1021:49	1021:49	12	,
ARGUMENT	1021:51	1021:51	12	hcenter
FIELD	1021:51	1021:51	13	hcenter
LEAF_NODE	1021:51	1021:51	14	hcenter
LEAF_NODE	1021:58	1021:58	12	,
ARGUMENT	1021:60	1021:60	12	vcenter
FIELD	1021:60	1021:60	13	vcenter
LEAF_NODE	1021:60	1021:60	14	vcenter
LEAF_NODE	1021:67	1021:67	12	)
LEAF_NODE	1021:68	1021:68	10	;
EXPR_STATEMENT	1022:17	1022:106	9	fprintf ( fd , "%f %f scale\n1 0 translate 90 rotate\n" , psheight * scale , pswidth * scale ) ;
EXPR	1022:17	1022:17	10	fprintf ( fd , "%f %f scale\n1 0 translate 90 rotate\n" , psheight * scale , pswidth * scale )
FUNCTION_CALL	1022:17	1022:105	11	fprintf ( fd , "%f %f scale\n1 0 translate 90 rotate\n" , psheight * scale , pswidth * scale )
CALLEE	1022:17	1022:17	12	fprintf
LEAF_NODE	1022:17	1022:17	13	fprintf
LEAF_NODE	1022:25	1022:25	12	(
ARGUMENT	1022:26	1022:26	12	fd
FIELD	1022:26	1022:26	13	fd
LEAF_NODE	1022:26	1022:26	14	fd
LEAF_NODE	1022:28	1022:28	12	,
ARGUMENT	1022:30	1022:30	12	"%f %f scale\n1 0 translate 90 rotate\n"
FIELD	1022:30	1022:30	13	"%f %f scale\n1 0 translate 90 rotate\n"
LEAF_NODE	1022:30	1022:30	14	"%f %f scale\n1 0 translate 90 rotate\n"
LEAF_NODE	1022:70	1022:70	12	,
ARGUMENT	1022:72	1022:83	12	psheight * scale
FIELD	1022:72	1022:72	13	psheight
LEAF_NODE	1022:72	1022:72	14	psheight
LEAF_NODE	1022:81	1022:81	13	*
FIELD	1022:83	1022:83	13	scale
LEAF_NODE	1022:83	1022:83	14	scale
LEAF_NODE	1022:88	1022:88	12	,
ARGUMENT	1022:90	1022:100	12	pswidth * scale
FIELD	1022:90	1022:90	13	pswidth
LEAF_NODE	1022:90	1022:90	14	pswidth
LEAF_NODE	1022:98	1022:98	13	*
FIELD	1022:100	1022:100	13	scale
LEAF_NODE	1022:100	1022:100	14	scale
LEAF_NODE	1022:105	1022:105	12	)
LEAF_NODE	1022:106	1022:106	10	;
JUMP_STATEMENT	1023:17	1023:22	9	break DESTINATION ;
KEYWORD	1023:17	1023:17	10	break
LEAF_NODE	1023:17	1023:17	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1023:22	1023:22	10	;
LABEL	1024:6	1024:15	9	case 180 :
LEAF_NODE	1024:6	1024:6	10	case
LEAF_NODE	1024:12	1024:12	10	180
LEAF_NODE	1024:15	1024:15	10	:
EXPR_STATEMENT	1024:17	1024:59	9	hcenter = ( reqwidth - pswidth * scale ) / 2 ;
EXPR	1024:17	1024:17	10	hcenter = ( reqwidth - pswidth * scale ) / 2
ASSIGN	1024:17	1024:27	11	hcenter = ( reqwidth - pswidth * scale ) / 2
LVAL	1024:17	1024:17	12	hcenter
FIELD	1024:17	1024:17	13	hcenter
LEAF_NODE	1024:17	1024:17	14	hcenter
ASSIGN_OP	1024:25	1024:25	12	=
LEAF_NODE	1024:25	1024:25	13	=
RVAL	1024:27	1024:58	12	( reqwidth - pswidth * scale ) / 2
LEAF_NODE	1024:27	1024:27	13	(
FIELD	1024:28	1024:28	13	reqwidth
LEAF_NODE	1024:28	1024:28	14	reqwidth
LEAF_NODE	1024:37	1024:37	13	-
FIELD	1024:39	1024:39	13	pswidth
LEAF_NODE	1024:39	1024:39	14	pswidth
LEAF_NODE	1024:47	1024:47	13	*
FIELD	1024:49	1024:49	13	scale
LEAF_NODE	1024:49	1024:49	14	scale
LEAF_NODE	1024:54	1024:54	13	)
LEAF_NODE	1024:56	1024:56	13	/
FIELD	1024:58	1024:58	13	2
LEAF_NODE	1024:58	1024:58	14	2
LEAF_NODE	1024:59	1024:59	10	;
EXPR_STATEMENT	1025:16	1025:60	9	vcenter = ( reqheight - psheight * scale ) / 2 ;
EXPR	1025:16	1025:16	10	vcenter = ( reqheight - psheight * scale ) / 2
ASSIGN	1025:16	1025:26	11	vcenter = ( reqheight - psheight * scale ) / 2
LVAL	1025:16	1025:16	12	vcenter
FIELD	1025:16	1025:16	13	vcenter
LEAF_NODE	1025:16	1025:16	14	vcenter
ASSIGN_OP	1025:24	1025:24	12	=
LEAF_NODE	1025:24	1025:24	13	=
RVAL	1025:26	1025:59	12	( reqheight - psheight * scale ) / 2
LEAF_NODE	1025:26	1025:26	13	(
FIELD	1025:27	1025:27	13	reqheight
LEAF_NODE	1025:27	1025:27	14	reqheight
LEAF_NODE	1025:37	1025:37	13	-
FIELD	1025:39	1025:39	13	psheight
LEAF_NODE	1025:39	1025:39	14	psheight
LEAF_NODE	1025:48	1025:48	13	*
FIELD	1025:50	1025:50	13	scale
LEAF_NODE	1025:50	1025:50	14	scale
LEAF_NODE	1025:55	1025:55	13	)
LEAF_NODE	1025:57	1025:57	13	/
FIELD	1025:59	1025:59	13	2
LEAF_NODE	1025:59	1025:59	14	2
LEAF_NODE	1025:60	1025:60	10	;
EXPR_STATEMENT	1026:17	1026:68	9	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter ) ;
EXPR	1026:17	1026:17	10	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter )
FUNCTION_CALL	1026:17	1026:67	11	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter )
CALLEE	1026:17	1026:17	12	fprintf
LEAF_NODE	1026:17	1026:17	13	fprintf
LEAF_NODE	1026:25	1026:25	12	(
ARGUMENT	1026:26	1026:26	12	fd
FIELD	1026:26	1026:26	13	fd
LEAF_NODE	1026:26	1026:26	14	fd
LEAF_NODE	1026:28	1026:28	12	,
ARGUMENT	1026:30	1026:30	12	"%f %f translate\n"
FIELD	1026:30	1026:30	13	"%f %f translate\n"
LEAF_NODE	1026:30	1026:30	14	"%f %f translate\n"
LEAF_NODE	1026:49	1026:49	12	,
ARGUMENT	1026:51	1026:51	12	hcenter
FIELD	1026:51	1026:51	13	hcenter
LEAF_NODE	1026:51	1026:51	14	hcenter
LEAF_NODE	1026:58	1026:58	12	,
ARGUMENT	1026:60	1026:60	12	vcenter
FIELD	1026:60	1026:60	13	vcenter
LEAF_NODE	1026:60	1026:60	14	vcenter
LEAF_NODE	1026:67	1026:67	12	)
LEAF_NODE	1026:68	1026:68	10	;
EXPR_STATEMENT	1027:17	1027:107	9	fprintf ( fd , "%f %f scale\n1 1 translate 180 rotate\n" , pswidth * scale , psheight * scale ) ;
EXPR	1027:17	1027:17	10	fprintf ( fd , "%f %f scale\n1 1 translate 180 rotate\n" , pswidth * scale , psheight * scale )
FUNCTION_CALL	1027:17	1027:106	11	fprintf ( fd , "%f %f scale\n1 1 translate 180 rotate\n" , pswidth * scale , psheight * scale )
CALLEE	1027:17	1027:17	12	fprintf
LEAF_NODE	1027:17	1027:17	13	fprintf
LEAF_NODE	1027:25	1027:25	12	(
ARGUMENT	1027:26	1027:26	12	fd
FIELD	1027:26	1027:26	13	fd
LEAF_NODE	1027:26	1027:26	14	fd
LEAF_NODE	1027:28	1027:28	12	,
ARGUMENT	1027:30	1027:30	12	"%f %f scale\n1 1 translate 180 rotate\n"
FIELD	1027:30	1027:30	13	"%f %f scale\n1 1 translate 180 rotate\n"
LEAF_NODE	1027:30	1027:30	14	"%f %f scale\n1 1 translate 180 rotate\n"
LEAF_NODE	1027:71	1027:71	12	,
ARGUMENT	1027:73	1027:83	12	pswidth * scale
FIELD	1027:73	1027:73	13	pswidth
LEAF_NODE	1027:73	1027:73	14	pswidth
LEAF_NODE	1027:81	1027:81	13	*
FIELD	1027:83	1027:83	13	scale
LEAF_NODE	1027:83	1027:83	14	scale
LEAF_NODE	1027:88	1027:88	12	,
ARGUMENT	1027:90	1027:101	12	psheight * scale
FIELD	1027:90	1027:90	13	psheight
LEAF_NODE	1027:90	1027:90	14	psheight
LEAF_NODE	1027:99	1027:99	13	*
FIELD	1027:101	1027:101	13	scale
LEAF_NODE	1027:101	1027:101	14	scale
LEAF_NODE	1027:106	1027:106	12	)
LEAF_NODE	1027:107	1027:107	10	;
JUMP_STATEMENT	1028:17	1028:22	9	break DESTINATION ;
KEYWORD	1028:17	1028:17	10	break
LEAF_NODE	1028:17	1028:17	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1028:22	1028:22	10	;
LABEL	1029:6	1029:15	9	case 270 :
LEAF_NODE	1029:6	1029:6	10	case
LEAF_NODE	1029:12	1029:12	10	270
LEAF_NODE	1029:15	1029:15	10	:
EXPR_STATEMENT	1029:17	1029:60	9	vcenter = ( reqheight - pswidth * scale ) / 2 ;
EXPR	1029:17	1029:17	10	vcenter = ( reqheight - pswidth * scale ) / 2
ASSIGN	1029:17	1029:27	11	vcenter = ( reqheight - pswidth * scale ) / 2
LVAL	1029:17	1029:17	12	vcenter
FIELD	1029:17	1029:17	13	vcenter
LEAF_NODE	1029:17	1029:17	14	vcenter
ASSIGN_OP	1029:25	1029:25	12	=
LEAF_NODE	1029:25	1029:25	13	=
RVAL	1029:27	1029:59	12	( reqheight - pswidth * scale ) / 2
LEAF_NODE	1029:27	1029:27	13	(
FIELD	1029:28	1029:28	13	reqheight
LEAF_NODE	1029:28	1029:28	14	reqheight
LEAF_NODE	1029:38	1029:38	13	-
FIELD	1029:40	1029:40	13	pswidth
LEAF_NODE	1029:40	1029:40	14	pswidth
LEAF_NODE	1029:48	1029:48	13	*
FIELD	1029:50	1029:50	13	scale
LEAF_NODE	1029:50	1029:50	14	scale
LEAF_NODE	1029:55	1029:55	13	)
LEAF_NODE	1029:57	1029:57	13	/
FIELD	1029:59	1029:59	13	2
LEAF_NODE	1029:59	1029:59	14	2
LEAF_NODE	1029:60	1029:60	10	;
EXPR_STATEMENT	1030:16	1030:59	9	hcenter = ( reqwidth - psheight * scale ) / 2 ;
EXPR	1030:16	1030:16	10	hcenter = ( reqwidth - psheight * scale ) / 2
ASSIGN	1030:16	1030:26	11	hcenter = ( reqwidth - psheight * scale ) / 2
LVAL	1030:16	1030:16	12	hcenter
FIELD	1030:16	1030:16	13	hcenter
LEAF_NODE	1030:16	1030:16	14	hcenter
ASSIGN_OP	1030:24	1030:24	12	=
LEAF_NODE	1030:24	1030:24	13	=
RVAL	1030:26	1030:58	12	( reqwidth - psheight * scale ) / 2
LEAF_NODE	1030:26	1030:26	13	(
FIELD	1030:27	1030:27	13	reqwidth
LEAF_NODE	1030:27	1030:27	14	reqwidth
LEAF_NODE	1030:36	1030:36	13	-
FIELD	1030:38	1030:38	13	psheight
LEAF_NODE	1030:38	1030:38	14	psheight
LEAF_NODE	1030:47	1030:47	13	*
FIELD	1030:49	1030:49	13	scale
LEAF_NODE	1030:49	1030:49	14	scale
LEAF_NODE	1030:54	1030:54	13	)
LEAF_NODE	1030:56	1030:56	13	/
FIELD	1030:58	1030:58	13	2
LEAF_NODE	1030:58	1030:58	14	2
LEAF_NODE	1030:59	1030:59	10	;
EXPR_STATEMENT	1031:17	1031:68	9	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter ) ;
EXPR	1031:17	1031:17	10	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter )
FUNCTION_CALL	1031:17	1031:67	11	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter )
CALLEE	1031:17	1031:17	12	fprintf
LEAF_NODE	1031:17	1031:17	13	fprintf
LEAF_NODE	1031:25	1031:25	12	(
ARGUMENT	1031:26	1031:26	12	fd
FIELD	1031:26	1031:26	13	fd
LEAF_NODE	1031:26	1031:26	14	fd
LEAF_NODE	1031:28	1031:28	12	,
ARGUMENT	1031:30	1031:30	12	"%f %f translate\n"
FIELD	1031:30	1031:30	13	"%f %f translate\n"
LEAF_NODE	1031:30	1031:30	14	"%f %f translate\n"
LEAF_NODE	1031:49	1031:49	12	,
ARGUMENT	1031:51	1031:51	12	hcenter
FIELD	1031:51	1031:51	13	hcenter
LEAF_NODE	1031:51	1031:51	14	hcenter
LEAF_NODE	1031:58	1031:58	12	,
ARGUMENT	1031:60	1031:60	12	vcenter
FIELD	1031:60	1031:60	13	vcenter
LEAF_NODE	1031:60	1031:60	14	vcenter
LEAF_NODE	1031:67	1031:67	12	)
LEAF_NODE	1031:68	1031:68	10	;
EXPR_STATEMENT	1032:17	1032:107	9	fprintf ( fd , "%f %f scale\n0 1 translate 270 rotate\n" , psheight * scale , pswidth * scale ) ;
EXPR	1032:17	1032:17	10	fprintf ( fd , "%f %f scale\n0 1 translate 270 rotate\n" , psheight * scale , pswidth * scale )
FUNCTION_CALL	1032:17	1032:106	11	fprintf ( fd , "%f %f scale\n0 1 translate 270 rotate\n" , psheight * scale , pswidth * scale )
CALLEE	1032:17	1032:17	12	fprintf
LEAF_NODE	1032:17	1032:17	13	fprintf
LEAF_NODE	1032:25	1032:25	12	(
ARGUMENT	1032:26	1032:26	12	fd
FIELD	1032:26	1032:26	13	fd
LEAF_NODE	1032:26	1032:26	14	fd
LEAF_NODE	1032:28	1032:28	12	,
ARGUMENT	1032:30	1032:30	12	"%f %f scale\n0 1 translate 270 rotate\n"
FIELD	1032:30	1032:30	13	"%f %f scale\n0 1 translate 270 rotate\n"
LEAF_NODE	1032:30	1032:30	14	"%f %f scale\n0 1 translate 270 rotate\n"
LEAF_NODE	1032:71	1032:71	12	,
ARGUMENT	1032:73	1032:84	12	psheight * scale
FIELD	1032:73	1032:73	13	psheight
LEAF_NODE	1032:73	1032:73	14	psheight
LEAF_NODE	1032:82	1032:82	13	*
FIELD	1032:84	1032:84	13	scale
LEAF_NODE	1032:84	1032:84	14	scale
LEAF_NODE	1032:89	1032:89	12	,
ARGUMENT	1032:91	1032:101	12	pswidth * scale
FIELD	1032:91	1032:91	13	pswidth
LEAF_NODE	1032:91	1032:91	14	pswidth
LEAF_NODE	1032:99	1032:99	13	*
FIELD	1032:101	1032:101	13	scale
LEAF_NODE	1032:101	1032:101	14	scale
LEAF_NODE	1032:106	1032:106	12	)
LEAF_NODE	1032:107	1032:107	10	;
JUMP_STATEMENT	1033:17	1033:22	9	break DESTINATION ;
KEYWORD	1033:17	1033:17	10	break
LEAF_NODE	1033:17	1033:17	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1033:22	1033:22	10	;
LABEL	1034:6	1034:15	9	case 0 :
LEAF_NODE	1034:6	1034:6	10	case
LEAF_NODE	1034:14	1034:14	10	0
LEAF_NODE	1034:15	1034:15	10	:
LABEL	1035:6	1035:13	9	default :
LEAF_NODE	1035:6	1035:6	10	default
LEAF_NODE	1035:13	1035:13	10	:
EXPR_STATEMENT	1035:17	1035:59	9	hcenter = ( reqwidth - pswidth * scale ) / 2 ;
EXPR	1035:17	1035:17	10	hcenter = ( reqwidth - pswidth * scale ) / 2
ASSIGN	1035:17	1035:27	11	hcenter = ( reqwidth - pswidth * scale ) / 2
LVAL	1035:17	1035:17	12	hcenter
FIELD	1035:17	1035:17	13	hcenter
LEAF_NODE	1035:17	1035:17	14	hcenter
ASSIGN_OP	1035:25	1035:25	12	=
LEAF_NODE	1035:25	1035:25	13	=
RVAL	1035:27	1035:58	12	( reqwidth - pswidth * scale ) / 2
LEAF_NODE	1035:27	1035:27	13	(
FIELD	1035:28	1035:28	13	reqwidth
LEAF_NODE	1035:28	1035:28	14	reqwidth
LEAF_NODE	1035:37	1035:37	13	-
FIELD	1035:39	1035:39	13	pswidth
LEAF_NODE	1035:39	1035:39	14	pswidth
LEAF_NODE	1035:47	1035:47	13	*
FIELD	1035:49	1035:49	13	scale
LEAF_NODE	1035:49	1035:49	14	scale
LEAF_NODE	1035:54	1035:54	13	)
LEAF_NODE	1035:56	1035:56	13	/
FIELD	1035:58	1035:58	13	2
LEAF_NODE	1035:58	1035:58	14	2
LEAF_NODE	1035:59	1035:59	10	;
EXPR_STATEMENT	1036:16	1036:60	9	vcenter = ( reqheight - psheight * scale ) / 2 ;
EXPR	1036:16	1036:16	10	vcenter = ( reqheight - psheight * scale ) / 2
ASSIGN	1036:16	1036:26	11	vcenter = ( reqheight - psheight * scale ) / 2
LVAL	1036:16	1036:16	12	vcenter
FIELD	1036:16	1036:16	13	vcenter
LEAF_NODE	1036:16	1036:16	14	vcenter
ASSIGN_OP	1036:24	1036:24	12	=
LEAF_NODE	1036:24	1036:24	13	=
RVAL	1036:26	1036:59	12	( reqheight - psheight * scale ) / 2
LEAF_NODE	1036:26	1036:26	13	(
FIELD	1036:27	1036:27	13	reqheight
LEAF_NODE	1036:27	1036:27	14	reqheight
LEAF_NODE	1036:37	1036:37	13	-
FIELD	1036:39	1036:39	13	psheight
LEAF_NODE	1036:39	1036:39	14	psheight
LEAF_NODE	1036:48	1036:48	13	*
FIELD	1036:50	1036:50	13	scale
LEAF_NODE	1036:50	1036:50	14	scale
LEAF_NODE	1036:55	1036:55	13	)
LEAF_NODE	1036:57	1036:57	13	/
FIELD	1036:59	1036:59	13	2
LEAF_NODE	1036:59	1036:59	14	2
LEAF_NODE	1036:60	1036:60	10	;
EXPR_STATEMENT	1037:17	1037:68	9	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter ) ;
EXPR	1037:17	1037:17	10	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter )
FUNCTION_CALL	1037:17	1037:67	11	fprintf ( fd , "%f %f translate\n" , hcenter , vcenter )
CALLEE	1037:17	1037:17	12	fprintf
LEAF_NODE	1037:17	1037:17	13	fprintf
LEAF_NODE	1037:25	1037:25	12	(
ARGUMENT	1037:26	1037:26	12	fd
FIELD	1037:26	1037:26	13	fd
LEAF_NODE	1037:26	1037:26	14	fd
LEAF_NODE	1037:28	1037:28	12	,
ARGUMENT	1037:30	1037:30	12	"%f %f translate\n"
FIELD	1037:30	1037:30	13	"%f %f translate\n"
LEAF_NODE	1037:30	1037:30	14	"%f %f translate\n"
LEAF_NODE	1037:49	1037:49	12	,
ARGUMENT	1037:51	1037:51	12	hcenter
FIELD	1037:51	1037:51	13	hcenter
LEAF_NODE	1037:51	1037:51	14	hcenter
LEAF_NODE	1037:58	1037:58	12	,
ARGUMENT	1037:60	1037:60	12	vcenter
FIELD	1037:60	1037:60	13	vcenter
LEAF_NODE	1037:60	1037:60	14	vcenter
LEAF_NODE	1037:67	1037:67	12	)
LEAF_NODE	1037:68	1037:68	10	;
EXPR_STATEMENT	1038:17	1038:81	9	fprintf ( fd , "%f %f scale\n" , pswidth * scale , psheight * scale ) ;
EXPR	1038:17	1038:17	10	fprintf ( fd , "%f %f scale\n" , pswidth * scale , psheight * scale )
FUNCTION_CALL	1038:17	1038:80	11	fprintf ( fd , "%f %f scale\n" , pswidth * scale , psheight * scale )
CALLEE	1038:17	1038:17	12	fprintf
LEAF_NODE	1038:17	1038:17	13	fprintf
LEAF_NODE	1038:25	1038:25	12	(
ARGUMENT	1038:26	1038:26	12	fd
FIELD	1038:26	1038:26	13	fd
LEAF_NODE	1038:26	1038:26	14	fd
LEAF_NODE	1038:28	1038:28	12	,
ARGUMENT	1038:30	1038:30	12	"%f %f scale\n"
FIELD	1038:30	1038:30	13	"%f %f scale\n"
LEAF_NODE	1038:30	1038:30	14	"%f %f scale\n"
LEAF_NODE	1038:45	1038:45	12	,
ARGUMENT	1038:47	1038:57	12	pswidth * scale
FIELD	1038:47	1038:47	13	pswidth
LEAF_NODE	1038:47	1038:47	14	pswidth
LEAF_NODE	1038:55	1038:55	13	*
FIELD	1038:57	1038:57	13	scale
LEAF_NODE	1038:57	1038:57	14	scale
LEAF_NODE	1038:62	1038:62	12	,
ARGUMENT	1038:64	1038:75	12	psheight * scale
FIELD	1038:64	1038:64	13	psheight
LEAF_NODE	1038:64	1038:64	14	psheight
LEAF_NODE	1038:73	1038:73	13	*
FIELD	1038:75	1038:75	13	scale
LEAF_NODE	1038:75	1038:75	14	scale
LEAF_NODE	1038:80	1038:80	12	)
LEAF_NODE	1038:81	1038:81	10	;
JUMP_STATEMENT	1039:17	1039:22	9	break DESTINATION ;
KEYWORD	1039:17	1039:17	10	break
LEAF_NODE	1039:17	1039:17	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1039:22	1039:22	10	;
LEAF_NODE	1040:6	1040:6	8	}
LEAF_NODE	1041:4	1041:4	5	}
SELECTION	1042:2	1043:4	3	
KEYWORD	1042:2	1042:2	4	else
LEAF_NODE	1042:2	1042:2	5	else
STATEMENTS	1043:4	1066:4	4	
LEAF_NODE	1043:4	1043:4	5	{
STATEMENTS	1044:4	1044:4	5	
SELECTION	1044:4	1045:6	6	
KEYWORD	1044:4	1044:4	7	switch
LEAF_NODE	1044:4	1044:4	8	switch
LEAF_NODE	1044:11	1044:11	7	(
CONDITION	1044:12	1044:12	7	rotation
EXPR	1044:12	1044:12	8	rotation
FIELD	1044:12	1044:12	9	rotation
LEAF_NODE	1044:12	1044:12	10	rotation
LEAF_NODE	1044:20	1044:20	7	)
STATEMENTS	1045:6	1065:6	7	
LEAF_NODE	1045:6	1045:6	8	{
STATEMENTS	1046:6	1064:16	8	
LABEL	1046:6	1046:12	9	case 0 :
LEAF_NODE	1046:6	1046:6	10	case
LEAF_NODE	1046:11	1046:11	10	0
LEAF_NODE	1046:12	1046:12	10	:
EXPR_STATEMENT	1046:16	1047:88	9	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( psheight * scale ) ) ;
EXPR	1046:16	1046:16	10	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( psheight * scale ) )
FUNCTION_CALL	1046:16	1047:87	11	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( psheight * scale ) )
CALLEE	1046:16	1046:16	12	fprintf
LEAF_NODE	1046:16	1046:16	13	fprintf
LEAF_NODE	1046:24	1046:24	12	(
ARGUMENT	1046:25	1046:25	12	fd
FIELD	1046:25	1046:25	13	fd
LEAF_NODE	1046:25	1046:25	14	fd
LEAF_NODE	1046:27	1046:27	12	,
ARGUMENT	1046:29	1046:29	12	"%f %f translate\n"
FIELD	1046:29	1046:29	13	"%f %f translate\n"
LEAF_NODE	1046:29	1046:29	14	"%f %f translate\n"
LEAF_NODE	1046:48	1046:48	12	,
ARGUMENT	1046:50	1046:50	12	left_offset ? left_offset : 0.0
COND_EXPR	1046:50	1046:78	13	left_offset ? left_offset : 0.0
CONDITION	1046:50	1046:50	14	left_offset
FIELD	1046:50	1046:50	15	left_offset
LEAF_NODE	1046:50	1046:50	16	left_offset
LEAF_NODE	1046:62	1046:62	14	?
EXPR	1046:64	1046:64	14	left_offset
FIELD	1046:64	1046:64	15	left_offset
LEAF_NODE	1046:64	1046:64	16	left_offset
LEAF_NODE	1046:76	1046:76	14	:
FIELD	1046:78	1046:78	14	0.0
LEAF_NODE	1046:78	1046:78	15	0.0
LEAF_NODE	1046:81	1046:81	12	,
ARGUMENT	1047:25	1047:25	12	bottom_offset ? bottom_offset : reqheight - ( psheight * scale )
COND_EXPR	1047:25	1047:86	13	bottom_offset ? bottom_offset : reqheight - ( psheight * scale )
CONDITION	1047:25	1047:25	14	bottom_offset
FIELD	1047:25	1047:25	15	bottom_offset
LEAF_NODE	1047:25	1047:25	16	bottom_offset
LEAF_NODE	1047:39	1047:39	14	?
EXPR	1047:41	1047:41	14	bottom_offset
FIELD	1047:41	1047:41	15	bottom_offset
LEAF_NODE	1047:41	1047:41	16	bottom_offset
LEAF_NODE	1047:55	1047:55	14	:
FIELD	1047:57	1047:57	14	reqheight
LEAF_NODE	1047:57	1047:57	15	reqheight
LEAF_NODE	1047:67	1047:67	14	-
LEAF_NODE	1047:69	1047:69	14	(
FIELD	1047:70	1047:70	14	psheight
LEAF_NODE	1047:70	1047:70	15	psheight
LEAF_NODE	1047:79	1047:79	14	*
FIELD	1047:81	1047:81	14	scale
LEAF_NODE	1047:81	1047:81	15	scale
LEAF_NODE	1047:86	1047:86	14	)
LEAF_NODE	1047:87	1047:87	12	)
LEAF_NODE	1047:88	1047:88	10	;
EXPR_STATEMENT	1048:16	1048:80	9	fprintf ( fd , "%f %f scale\n" , pswidth * scale , psheight * scale ) ;
EXPR	1048:16	1048:16	10	fprintf ( fd , "%f %f scale\n" , pswidth * scale , psheight * scale )
FUNCTION_CALL	1048:16	1048:79	11	fprintf ( fd , "%f %f scale\n" , pswidth * scale , psheight * scale )
CALLEE	1048:16	1048:16	12	fprintf
LEAF_NODE	1048:16	1048:16	13	fprintf
LEAF_NODE	1048:24	1048:24	12	(
ARGUMENT	1048:25	1048:25	12	fd
FIELD	1048:25	1048:25	13	fd
LEAF_NODE	1048:25	1048:25	14	fd
LEAF_NODE	1048:27	1048:27	12	,
ARGUMENT	1048:29	1048:29	12	"%f %f scale\n"
FIELD	1048:29	1048:29	13	"%f %f scale\n"
LEAF_NODE	1048:29	1048:29	14	"%f %f scale\n"
LEAF_NODE	1048:44	1048:44	12	,
ARGUMENT	1048:46	1048:56	12	pswidth * scale
FIELD	1048:46	1048:46	13	pswidth
LEAF_NODE	1048:46	1048:46	14	pswidth
LEAF_NODE	1048:54	1048:54	13	*
FIELD	1048:56	1048:56	13	scale
LEAF_NODE	1048:56	1048:56	14	scale
LEAF_NODE	1048:61	1048:61	12	,
ARGUMENT	1048:63	1048:74	12	psheight * scale
FIELD	1048:63	1048:63	13	psheight
LEAF_NODE	1048:63	1048:63	14	psheight
LEAF_NODE	1048:72	1048:72	13	*
FIELD	1048:74	1048:74	13	scale
LEAF_NODE	1048:74	1048:74	14	scale
LEAF_NODE	1048:79	1048:79	12	)
LEAF_NODE	1048:80	1048:80	10	;
JUMP_STATEMENT	1049:16	1049:21	9	break DESTINATION ;
KEYWORD	1049:16	1049:16	10	break
LEAF_NODE	1049:16	1049:16	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1049:21	1049:21	10	;
LABEL	1050:6	1050:13	9	case 90 :
LEAF_NODE	1050:6	1050:6	10	case
LEAF_NODE	1050:11	1050:11	10	90
LEAF_NODE	1050:13	1050:13	10	:
EXPR_STATEMENT	1050:16	1051:87	9	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( pswidth * scale ) ) ;
EXPR	1050:16	1050:16	10	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( pswidth * scale ) )
FUNCTION_CALL	1050:16	1051:86	11	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( pswidth * scale ) )
CALLEE	1050:16	1050:16	12	fprintf
LEAF_NODE	1050:16	1050:16	13	fprintf
LEAF_NODE	1050:24	1050:24	12	(
ARGUMENT	1050:25	1050:25	12	fd
FIELD	1050:25	1050:25	13	fd
LEAF_NODE	1050:25	1050:25	14	fd
LEAF_NODE	1050:27	1050:27	12	,
ARGUMENT	1050:29	1050:29	12	"%f %f translate\n"
FIELD	1050:29	1050:29	13	"%f %f translate\n"
LEAF_NODE	1050:29	1050:29	14	"%f %f translate\n"
LEAF_NODE	1050:48	1050:48	12	,
ARGUMENT	1050:50	1050:50	12	left_offset ? left_offset : 0.0
COND_EXPR	1050:50	1050:78	13	left_offset ? left_offset : 0.0
CONDITION	1050:50	1050:50	14	left_offset
FIELD	1050:50	1050:50	15	left_offset
LEAF_NODE	1050:50	1050:50	16	left_offset
LEAF_NODE	1050:62	1050:62	14	?
EXPR	1050:64	1050:64	14	left_offset
FIELD	1050:64	1050:64	15	left_offset
LEAF_NODE	1050:64	1050:64	16	left_offset
LEAF_NODE	1050:76	1050:76	14	:
FIELD	1050:78	1050:78	14	0.0
LEAF_NODE	1050:78	1050:78	15	0.0
LEAF_NODE	1050:81	1050:81	12	,
ARGUMENT	1051:25	1051:25	12	bottom_offset ? bottom_offset : reqheight - ( pswidth * scale )
COND_EXPR	1051:25	1051:85	13	bottom_offset ? bottom_offset : reqheight - ( pswidth * scale )
CONDITION	1051:25	1051:25	14	bottom_offset
FIELD	1051:25	1051:25	15	bottom_offset
LEAF_NODE	1051:25	1051:25	16	bottom_offset
LEAF_NODE	1051:39	1051:39	14	?
EXPR	1051:41	1051:41	14	bottom_offset
FIELD	1051:41	1051:41	15	bottom_offset
LEAF_NODE	1051:41	1051:41	16	bottom_offset
LEAF_NODE	1051:55	1051:55	14	:
FIELD	1051:57	1051:57	14	reqheight
LEAF_NODE	1051:57	1051:57	15	reqheight
LEAF_NODE	1051:67	1051:67	14	-
LEAF_NODE	1051:69	1051:69	14	(
FIELD	1051:70	1051:70	14	pswidth
LEAF_NODE	1051:70	1051:70	15	pswidth
LEAF_NODE	1051:78	1051:78	14	*
FIELD	1051:80	1051:80	14	scale
LEAF_NODE	1051:80	1051:80	15	scale
LEAF_NODE	1051:85	1051:85	14	)
LEAF_NODE	1051:86	1051:86	12	)
LEAF_NODE	1051:87	1051:87	10	;
EXPR_STATEMENT	1052:16	1052:105	9	fprintf ( fd , "%f %f scale\n1 0 translate 90 rotate\n" , psheight * scale , pswidth * scale ) ;
EXPR	1052:16	1052:16	10	fprintf ( fd , "%f %f scale\n1 0 translate 90 rotate\n" , psheight * scale , pswidth * scale )
FUNCTION_CALL	1052:16	1052:104	11	fprintf ( fd , "%f %f scale\n1 0 translate 90 rotate\n" , psheight * scale , pswidth * scale )
CALLEE	1052:16	1052:16	12	fprintf
LEAF_NODE	1052:16	1052:16	13	fprintf
LEAF_NODE	1052:24	1052:24	12	(
ARGUMENT	1052:25	1052:25	12	fd
FIELD	1052:25	1052:25	13	fd
LEAF_NODE	1052:25	1052:25	14	fd
LEAF_NODE	1052:27	1052:27	12	,
ARGUMENT	1052:29	1052:29	12	"%f %f scale\n1 0 translate 90 rotate\n"
FIELD	1052:29	1052:29	13	"%f %f scale\n1 0 translate 90 rotate\n"
LEAF_NODE	1052:29	1052:29	14	"%f %f scale\n1 0 translate 90 rotate\n"
LEAF_NODE	1052:69	1052:69	12	,
ARGUMENT	1052:71	1052:82	12	psheight * scale
FIELD	1052:71	1052:71	13	psheight
LEAF_NODE	1052:71	1052:71	14	psheight
LEAF_NODE	1052:80	1052:80	13	*
FIELD	1052:82	1052:82	13	scale
LEAF_NODE	1052:82	1052:82	14	scale
LEAF_NODE	1052:87	1052:87	12	,
ARGUMENT	1052:89	1052:99	12	pswidth * scale
FIELD	1052:89	1052:89	13	pswidth
LEAF_NODE	1052:89	1052:89	14	pswidth
LEAF_NODE	1052:97	1052:97	13	*
FIELD	1052:99	1052:99	13	scale
LEAF_NODE	1052:99	1052:99	14	scale
LEAF_NODE	1052:104	1052:104	12	)
LEAF_NODE	1052:105	1052:105	10	;
JUMP_STATEMENT	1053:16	1053:21	9	break DESTINATION ;
KEYWORD	1053:16	1053:16	10	break
LEAF_NODE	1053:16	1053:16	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1053:21	1053:21	10	;
LABEL	1054:6	1054:14	9	case 180 :
LEAF_NODE	1054:6	1054:6	10	case
LEAF_NODE	1054:11	1054:11	10	180
LEAF_NODE	1054:14	1054:14	10	:
EXPR_STATEMENT	1054:16	1055:88	9	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( psheight * scale ) ) ;
EXPR	1054:16	1054:16	10	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( psheight * scale ) )
FUNCTION_CALL	1054:16	1055:87	11	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( psheight * scale ) )
CALLEE	1054:16	1054:16	12	fprintf
LEAF_NODE	1054:16	1054:16	13	fprintf
LEAF_NODE	1054:24	1054:24	12	(
ARGUMENT	1054:25	1054:25	12	fd
FIELD	1054:25	1054:25	13	fd
LEAF_NODE	1054:25	1054:25	14	fd
LEAF_NODE	1054:27	1054:27	12	,
ARGUMENT	1054:29	1054:29	12	"%f %f translate\n"
FIELD	1054:29	1054:29	13	"%f %f translate\n"
LEAF_NODE	1054:29	1054:29	14	"%f %f translate\n"
LEAF_NODE	1054:48	1054:48	12	,
ARGUMENT	1054:50	1054:50	12	left_offset ? left_offset : 0.0
COND_EXPR	1054:50	1054:78	13	left_offset ? left_offset : 0.0
CONDITION	1054:50	1054:50	14	left_offset
FIELD	1054:50	1054:50	15	left_offset
LEAF_NODE	1054:50	1054:50	16	left_offset
LEAF_NODE	1054:62	1054:62	14	?
EXPR	1054:64	1054:64	14	left_offset
FIELD	1054:64	1054:64	15	left_offset
LEAF_NODE	1054:64	1054:64	16	left_offset
LEAF_NODE	1054:76	1054:76	14	:
FIELD	1054:78	1054:78	14	0.0
LEAF_NODE	1054:78	1054:78	15	0.0
LEAF_NODE	1054:81	1054:81	12	,
ARGUMENT	1055:25	1055:25	12	bottom_offset ? bottom_offset : reqheight - ( psheight * scale )
COND_EXPR	1055:25	1055:86	13	bottom_offset ? bottom_offset : reqheight - ( psheight * scale )
CONDITION	1055:25	1055:25	14	bottom_offset
FIELD	1055:25	1055:25	15	bottom_offset
LEAF_NODE	1055:25	1055:25	16	bottom_offset
LEAF_NODE	1055:39	1055:39	14	?
EXPR	1055:41	1055:41	14	bottom_offset
FIELD	1055:41	1055:41	15	bottom_offset
LEAF_NODE	1055:41	1055:41	16	bottom_offset
LEAF_NODE	1055:55	1055:55	14	:
FIELD	1055:57	1055:57	14	reqheight
LEAF_NODE	1055:57	1055:57	15	reqheight
LEAF_NODE	1055:67	1055:67	14	-
LEAF_NODE	1055:69	1055:69	14	(
FIELD	1055:70	1055:70	14	psheight
LEAF_NODE	1055:70	1055:70	15	psheight
LEAF_NODE	1055:79	1055:79	14	*
FIELD	1055:81	1055:81	14	scale
LEAF_NODE	1055:81	1055:81	15	scale
LEAF_NODE	1055:86	1055:86	14	)
LEAF_NODE	1055:87	1055:87	12	)
LEAF_NODE	1055:88	1055:88	10	;
EXPR_STATEMENT	1056:16	1056:106	9	fprintf ( fd , "%f %f scale\n1 1 translate 180 rotate\n" , pswidth * scale , psheight * scale ) ;
EXPR	1056:16	1056:16	10	fprintf ( fd , "%f %f scale\n1 1 translate 180 rotate\n" , pswidth * scale , psheight * scale )
FUNCTION_CALL	1056:16	1056:105	11	fprintf ( fd , "%f %f scale\n1 1 translate 180 rotate\n" , pswidth * scale , psheight * scale )
CALLEE	1056:16	1056:16	12	fprintf
LEAF_NODE	1056:16	1056:16	13	fprintf
LEAF_NODE	1056:24	1056:24	12	(
ARGUMENT	1056:25	1056:25	12	fd
FIELD	1056:25	1056:25	13	fd
LEAF_NODE	1056:25	1056:25	14	fd
LEAF_NODE	1056:27	1056:27	12	,
ARGUMENT	1056:29	1056:29	12	"%f %f scale\n1 1 translate 180 rotate\n"
FIELD	1056:29	1056:29	13	"%f %f scale\n1 1 translate 180 rotate\n"
LEAF_NODE	1056:29	1056:29	14	"%f %f scale\n1 1 translate 180 rotate\n"
LEAF_NODE	1056:70	1056:70	12	,
ARGUMENT	1056:72	1056:82	12	pswidth * scale
FIELD	1056:72	1056:72	13	pswidth
LEAF_NODE	1056:72	1056:72	14	pswidth
LEAF_NODE	1056:80	1056:80	13	*
FIELD	1056:82	1056:82	13	scale
LEAF_NODE	1056:82	1056:82	14	scale
LEAF_NODE	1056:87	1056:87	12	,
ARGUMENT	1056:89	1056:100	12	psheight * scale
FIELD	1056:89	1056:89	13	psheight
LEAF_NODE	1056:89	1056:89	14	psheight
LEAF_NODE	1056:98	1056:98	13	*
FIELD	1056:100	1056:100	13	scale
LEAF_NODE	1056:100	1056:100	14	scale
LEAF_NODE	1056:105	1056:105	12	)
LEAF_NODE	1056:106	1056:106	10	;
JUMP_STATEMENT	1057:16	1057:21	9	break DESTINATION ;
KEYWORD	1057:16	1057:16	10	break
LEAF_NODE	1057:16	1057:16	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1057:21	1057:21	10	;
LABEL	1058:6	1058:14	9	case 270 :
LEAF_NODE	1058:6	1058:6	10	case
LEAF_NODE	1058:11	1058:11	10	270
LEAF_NODE	1058:14	1058:14	10	:
EXPR_STATEMENT	1058:16	1059:87	9	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( pswidth * scale ) ) ;
EXPR	1058:16	1058:16	10	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( pswidth * scale ) )
FUNCTION_CALL	1058:16	1059:86	11	fprintf ( fd , "%f %f translate\n" , left_offset ? left_offset : 0.0 , bottom_offset ? bottom_offset : reqheight - ( pswidth * scale ) )
CALLEE	1058:16	1058:16	12	fprintf
LEAF_NODE	1058:16	1058:16	13	fprintf
LEAF_NODE	1058:24	1058:24	12	(
ARGUMENT	1058:25	1058:25	12	fd
FIELD	1058:25	1058:25	13	fd
LEAF_NODE	1058:25	1058:25	14	fd
LEAF_NODE	1058:27	1058:27	12	,
ARGUMENT	1058:29	1058:29	12	"%f %f translate\n"
FIELD	1058:29	1058:29	13	"%f %f translate\n"
LEAF_NODE	1058:29	1058:29	14	"%f %f translate\n"
LEAF_NODE	1058:48	1058:48	12	,
ARGUMENT	1058:50	1058:50	12	left_offset ? left_offset : 0.0
COND_EXPR	1058:50	1058:78	13	left_offset ? left_offset : 0.0
CONDITION	1058:50	1058:50	14	left_offset
FIELD	1058:50	1058:50	15	left_offset
LEAF_NODE	1058:50	1058:50	16	left_offset
LEAF_NODE	1058:62	1058:62	14	?
EXPR	1058:64	1058:64	14	left_offset
FIELD	1058:64	1058:64	15	left_offset
LEAF_NODE	1058:64	1058:64	16	left_offset
LEAF_NODE	1058:76	1058:76	14	:
FIELD	1058:78	1058:78	14	0.0
LEAF_NODE	1058:78	1058:78	15	0.0
LEAF_NODE	1058:81	1058:81	12	,
ARGUMENT	1059:25	1059:25	12	bottom_offset ? bottom_offset : reqheight - ( pswidth * scale )
COND_EXPR	1059:25	1059:85	13	bottom_offset ? bottom_offset : reqheight - ( pswidth * scale )
CONDITION	1059:25	1059:25	14	bottom_offset
FIELD	1059:25	1059:25	15	bottom_offset
LEAF_NODE	1059:25	1059:25	16	bottom_offset
LEAF_NODE	1059:39	1059:39	14	?
EXPR	1059:41	1059:41	14	bottom_offset
FIELD	1059:41	1059:41	15	bottom_offset
LEAF_NODE	1059:41	1059:41	16	bottom_offset
LEAF_NODE	1059:55	1059:55	14	:
FIELD	1059:57	1059:57	14	reqheight
LEAF_NODE	1059:57	1059:57	15	reqheight
LEAF_NODE	1059:67	1059:67	14	-
LEAF_NODE	1059:69	1059:69	14	(
FIELD	1059:70	1059:70	14	pswidth
LEAF_NODE	1059:70	1059:70	15	pswidth
LEAF_NODE	1059:78	1059:78	14	*
FIELD	1059:80	1059:80	14	scale
LEAF_NODE	1059:80	1059:80	15	scale
LEAF_NODE	1059:85	1059:85	14	)
LEAF_NODE	1059:86	1059:86	12	)
LEAF_NODE	1059:87	1059:87	10	;
EXPR_STATEMENT	1060:16	1060:106	9	fprintf ( fd , "%f %f scale\n0 1 translate 270 rotate\n" , psheight * scale , pswidth * scale ) ;
EXPR	1060:16	1060:16	10	fprintf ( fd , "%f %f scale\n0 1 translate 270 rotate\n" , psheight * scale , pswidth * scale )
FUNCTION_CALL	1060:16	1060:105	11	fprintf ( fd , "%f %f scale\n0 1 translate 270 rotate\n" , psheight * scale , pswidth * scale )
CALLEE	1060:16	1060:16	12	fprintf
LEAF_NODE	1060:16	1060:16	13	fprintf
LEAF_NODE	1060:24	1060:24	12	(
ARGUMENT	1060:25	1060:25	12	fd
FIELD	1060:25	1060:25	13	fd
LEAF_NODE	1060:25	1060:25	14	fd
LEAF_NODE	1060:27	1060:27	12	,
ARGUMENT	1060:29	1060:29	12	"%f %f scale\n0 1 translate 270 rotate\n"
FIELD	1060:29	1060:29	13	"%f %f scale\n0 1 translate 270 rotate\n"
LEAF_NODE	1060:29	1060:29	14	"%f %f scale\n0 1 translate 270 rotate\n"
LEAF_NODE	1060:70	1060:70	12	,
ARGUMENT	1060:72	1060:83	12	psheight * scale
FIELD	1060:72	1060:72	13	psheight
LEAF_NODE	1060:72	1060:72	14	psheight
LEAF_NODE	1060:81	1060:81	13	*
FIELD	1060:83	1060:83	13	scale
LEAF_NODE	1060:83	1060:83	14	scale
LEAF_NODE	1060:88	1060:88	12	,
ARGUMENT	1060:90	1060:100	12	pswidth * scale
FIELD	1060:90	1060:90	13	pswidth
LEAF_NODE	1060:90	1060:90	14	pswidth
LEAF_NODE	1060:98	1060:98	13	*
FIELD	1060:100	1060:100	13	scale
LEAF_NODE	1060:100	1060:100	14	scale
LEAF_NODE	1060:105	1060:105	12	)
LEAF_NODE	1060:106	1060:106	10	;
JUMP_STATEMENT	1061:16	1061:21	9	break DESTINATION ;
KEYWORD	1061:16	1061:16	10	break
LEAF_NODE	1061:16	1061:16	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1061:21	1061:21	10	;
LABEL	1062:6	1062:13	9	default :
LEAF_NODE	1062:6	1062:6	10	default
LEAF_NODE	1062:13	1062:13	10	:
EXPR_STATEMENT	1062:16	1062:80	9	TIFFError ( "psScaleImage" , "Unsupported rotation  %d" , rotation ) ;
EXPR	1062:16	1062:16	10	TIFFError ( "psScaleImage" , "Unsupported rotation  %d" , rotation )
FUNCTION_CALL	1062:16	1062:79	11	TIFFError ( "psScaleImage" , "Unsupported rotation  %d" , rotation )
CALLEE	1062:16	1062:16	12	TIFFError
LEAF_NODE	1062:16	1062:16	13	TIFFError
LEAF_NODE	1062:26	1062:26	12	(
ARGUMENT	1062:27	1062:27	12	"psScaleImage"
FIELD	1062:27	1062:27	13	"psScaleImage"
LEAF_NODE	1062:27	1062:27	14	"psScaleImage"
LEAF_NODE	1062:41	1062:41	12	,
ARGUMENT	1062:43	1062:43	12	"Unsupported rotation  %d"
FIELD	1062:43	1062:43	13	"Unsupported rotation  %d"
LEAF_NODE	1062:43	1062:43	14	"Unsupported rotation  %d"
LEAF_NODE	1062:69	1062:69	12	,
ARGUMENT	1062:71	1062:71	12	rotation
FIELD	1062:71	1062:71	13	rotation
LEAF_NODE	1062:71	1062:71	14	rotation
LEAF_NODE	1062:79	1062:79	12	)
LEAF_NODE	1062:80	1062:80	10	;
EXPR_STATEMENT	1063:15	1063:79	9	fprintf ( fd , "%f %f scale\n" , pswidth * scale , psheight * scale ) ;
EXPR	1063:15	1063:15	10	fprintf ( fd , "%f %f scale\n" , pswidth * scale , psheight * scale )
FUNCTION_CALL	1063:15	1063:78	11	fprintf ( fd , "%f %f scale\n" , pswidth * scale , psheight * scale )
CALLEE	1063:15	1063:15	12	fprintf
LEAF_NODE	1063:15	1063:15	13	fprintf
LEAF_NODE	1063:23	1063:23	12	(
ARGUMENT	1063:24	1063:24	12	fd
FIELD	1063:24	1063:24	13	fd
LEAF_NODE	1063:24	1063:24	14	fd
LEAF_NODE	1063:26	1063:26	12	,
ARGUMENT	1063:28	1063:28	12	"%f %f scale\n"
FIELD	1063:28	1063:28	13	"%f %f scale\n"
LEAF_NODE	1063:28	1063:28	14	"%f %f scale\n"
LEAF_NODE	1063:43	1063:43	12	,
ARGUMENT	1063:45	1063:55	12	pswidth * scale
FIELD	1063:45	1063:45	13	pswidth
LEAF_NODE	1063:45	1063:45	14	pswidth
LEAF_NODE	1063:53	1063:53	13	*
FIELD	1063:55	1063:55	13	scale
LEAF_NODE	1063:55	1063:55	14	scale
LEAF_NODE	1063:60	1063:60	12	,
ARGUMENT	1063:62	1063:73	12	psheight * scale
FIELD	1063:62	1063:62	13	psheight
LEAF_NODE	1063:62	1063:62	14	psheight
LEAF_NODE	1063:71	1063:71	13	*
FIELD	1063:73	1063:73	13	scale
LEAF_NODE	1063:73	1063:73	14	scale
LEAF_NODE	1063:78	1063:78	12	)
LEAF_NODE	1063:79	1063:79	10	;
JUMP_STATEMENT	1064:16	1064:26	9	return ( 1 ) ;
KEYWORD	1064:16	1064:16	10	return
LEAF_NODE	1064:16	1064:16	11	return
DESTINATION	1064:23	1064:23	10	( 1 )
EXPR	1064:23	1064:25	11	( 1 )
LEAF_NODE	1064:23	1064:23	12	(
FIELD	1064:24	1064:24	12	1
LEAF_NODE	1064:24	1064:24	13	1
LEAF_NODE	1064:25	1064:25	12	)
LEAF_NODE	1064:26	1064:26	10	;
LEAF_NODE	1065:6	1065:6	8	}
LEAF_NODE	1066:4	1066:4	5	}
JUMP_STATEMENT	1068:2	1068:12	3	return ( 0 ) ;
KEYWORD	1068:2	1068:2	4	return
LEAF_NODE	1068:2	1068:2	5	return
DESTINATION	1068:9	1068:9	4	( 0 )
EXPR	1068:9	1068:11	5	( 0 )
LEAF_NODE	1068:9	1068:9	6	(
FIELD	1068:10	1068:10	6	0
LEAF_NODE	1068:10	1068:10	7	0
LEAF_NODE	1068:11	1068:11	6	)
LEAF_NODE	1068:12	1068:12	4	;
LEAF_NODE	1069:2	1069:2	2	}
FUNCTION_DEF	1074:0	1181:2	1	
RETURN_TYPE	1074:0	1074:0	2	int
TYPE_NAME	1074:0	1074:0	3	int
LEAF_NODE	1074:0	1074:0	4	int
FUNCTION_NAME	1074:4	1074:4	2	psPageSize
LEAF_NODE	1074:4	1074:4	3	psPageSize
PARAMETER_LIST	1074:15	1075:82	2	( FILE * fd , int rotation , double pgwidth , double pgheight , double reqwidth , double reqheight , double pswidth , double psheight )
LEAF_NODE	1074:15	1074:15	3	(
PARAMETER_DECL	1074:16	1074:23	3	FILE * fd
TYPE	1074:16	1074:21	4	FILE *
TYPE_NAME	1074:16	1074:16	5	FILE
LEAF_NODE	1074:16	1074:16	6	FILE
POINTER	1074:21	1074:21	5	*
LEAF_NODE	1074:21	1074:21	6	*
NAME	1074:23	1074:23	4	fd
LEAF_NODE	1074:23	1074:23	5	fd
LEAF_NODE	1074:25	1074:25	3	,
PARAMETER_DECL	1074:27	1074:31	3	int rotation
TYPE	1074:27	1074:27	4	int
TYPE_NAME	1074:27	1074:27	5	int
LEAF_NODE	1074:27	1074:27	6	int
NAME	1074:31	1074:31	4	rotation
LEAF_NODE	1074:31	1074:31	5	rotation
LEAF_NODE	1074:39	1074:39	3	,
PARAMETER_DECL	1074:41	1074:48	3	double pgwidth
TYPE	1074:41	1074:41	4	double
TYPE_NAME	1074:41	1074:41	5	double
LEAF_NODE	1074:41	1074:41	6	double
NAME	1074:48	1074:48	4	pgwidth
LEAF_NODE	1074:48	1074:48	5	pgwidth
LEAF_NODE	1074:55	1074:55	3	,
PARAMETER_DECL	1074:57	1074:64	3	double pgheight
TYPE	1074:57	1074:57	4	double
TYPE_NAME	1074:57	1074:57	5	double
LEAF_NODE	1074:57	1074:57	6	double
NAME	1074:64	1074:64	4	pgheight
LEAF_NODE	1074:64	1074:64	5	pgheight
LEAF_NODE	1074:72	1074:72	3	,
PARAMETER_DECL	1075:16	1075:23	3	double reqwidth
TYPE	1075:16	1075:16	4	double
TYPE_NAME	1075:16	1075:16	5	double
LEAF_NODE	1075:16	1075:16	6	double
NAME	1075:23	1075:23	4	reqwidth
LEAF_NODE	1075:23	1075:23	5	reqwidth
LEAF_NODE	1075:31	1075:31	3	,
PARAMETER_DECL	1075:33	1075:40	3	double reqheight
TYPE	1075:33	1075:33	4	double
TYPE_NAME	1075:33	1075:33	5	double
LEAF_NODE	1075:33	1075:33	6	double
NAME	1075:40	1075:40	4	reqheight
LEAF_NODE	1075:40	1075:40	5	reqheight
LEAF_NODE	1075:49	1075:49	3	,
PARAMETER_DECL	1075:51	1075:58	3	double pswidth
TYPE	1075:51	1075:51	4	double
TYPE_NAME	1075:51	1075:51	5	double
LEAF_NODE	1075:51	1075:51	6	double
NAME	1075:58	1075:58	4	pswidth
LEAF_NODE	1075:58	1075:58	5	pswidth
LEAF_NODE	1075:65	1075:65	3	,
PARAMETER_DECL	1075:67	1075:74	3	double psheight
TYPE	1075:67	1075:67	4	double
TYPE_NAME	1075:67	1075:67	5	double
LEAF_NODE	1075:67	1075:67	6	double
NAME	1075:74	1075:74	4	psheight
LEAF_NODE	1075:74	1075:74	5	psheight
LEAF_NODE	1075:82	1075:82	3	)
LEAF_NODE	1076:2	1076:2	2	{
STATEMENTS	1077:2	1180:2	2	
SIMPLE_DECL	1077:2	1077:48	3	double xscale ; xscale = 1.0 , double yscale ; yscale = 1.0 , double scale ; scale = 1.0 ;
INIT_DECL_LIST	1077:2	1077:2	4	double xscale ; xscale = 1.0 , double yscale ; yscale = 1.0 , double scale ; scale = 1.0
VAR_DECL	1077:2	1077:9	5	double xscale ; xscale = 1.0
TYPE	1077:2	1077:2	6	double
TYPE_NAME	1077:2	1077:2	7	double
LEAF_NODE	1077:2	1077:2	8	double
NAME	1077:9	1077:9	6	xscale
LEAF_NODE	1077:9	1077:9	7	xscale
LEAF_NODE	0:0	0:0	6	;
INIT	1077:9	1077:9	6	xscale = 1.0
ASSIGN	1077:9	1077:18	7	xscale = 1.0
LVAL	1077:9	1077:9	8	xscale
NAME	1077:9	1077:9	9	xscale
LEAF_NODE	1077:9	1077:9	10	xscale
ASSIGN_OP	1077:16	1077:16	8	=
LEAF_NODE	1077:16	1077:16	9	=
RVAL	1077:18	1077:18	8	1.0
FIELD	1077:18	1077:18	9	1.0
LEAF_NODE	1077:18	1077:18	10	1.0
LEAF_NODE	1077:21	1077:21	5	,
INIT_DECL_LIST	1077:2	1077:2	5	double yscale ; yscale = 1.0 , double scale ; scale = 1.0
VAR_DECL	1077:2	1077:23	6	double yscale ; yscale = 1.0
TYPE	1077:2	1077:2	7	double
TYPE_NAME	1077:2	1077:2	8	double
LEAF_NODE	1077:2	1077:2	9	double
NAME	1077:23	1077:23	7	yscale
LEAF_NODE	1077:23	1077:23	8	yscale
LEAF_NODE	0:0	0:0	7	;
INIT	1077:23	1077:23	7	yscale = 1.0
ASSIGN	1077:23	1077:32	8	yscale = 1.0
LVAL	1077:23	1077:23	9	yscale
NAME	1077:23	1077:23	10	yscale
LEAF_NODE	1077:23	1077:23	11	yscale
ASSIGN_OP	1077:30	1077:30	9	=
LEAF_NODE	1077:30	1077:30	10	=
RVAL	1077:32	1077:32	9	1.0
FIELD	1077:32	1077:32	10	1.0
LEAF_NODE	1077:32	1077:32	11	1.0
LEAF_NODE	1077:35	1077:35	6	,
VAR_DECL	1077:2	1077:37	6	double scale ; scale = 1.0
TYPE	1077:2	1077:2	7	double
TYPE_NAME	1077:2	1077:2	8	double
LEAF_NODE	1077:2	1077:2	9	double
NAME	1077:37	1077:37	7	scale
LEAF_NODE	1077:37	1077:37	8	scale
LEAF_NODE	0:0	0:0	7	;
INIT	1077:37	1077:37	7	scale = 1.0
ASSIGN	1077:37	1077:45	8	scale = 1.0
LVAL	1077:37	1077:37	9	scale
NAME	1077:37	1077:37	10	scale
LEAF_NODE	1077:37	1077:37	11	scale
ASSIGN_OP	1077:43	1077:43	9	=
LEAF_NODE	1077:43	1077:43	10	=
RVAL	1077:45	1077:45	9	1.0
FIELD	1077:45	1077:45	10	1.0
LEAF_NODE	1077:45	1077:45	11	1.0
LEAF_NODE	1077:48	1077:48	4	;
SIMPLE_DECL	1078:2	1078:20	3	double splitheight ;
VAR_DECL	1078:2	1078:9	4	double splitheight
TYPE	1078:2	1078:2	5	double
TYPE_NAME	1078:2	1078:2	6	double
LEAF_NODE	1078:2	1078:2	7	double
NAME	1078:9	1078:9	5	splitheight
LEAF_NODE	1078:9	1078:9	6	splitheight
LEAF_NODE	1078:20	1078:20	4	;
SIMPLE_DECL	1079:2	1079:19	3	double splitwidth ;
VAR_DECL	1079:2	1079:9	4	double splitwidth
TYPE	1079:2	1079:2	5	double
TYPE_NAME	1079:2	1079:2	6	double
LEAF_NODE	1079:2	1079:2	7	double
NAME	1079:9	1079:9	5	splitwidth
LEAF_NODE	1079:9	1079:9	6	splitwidth
LEAF_NODE	1079:19	1079:19	4	;
SIMPLE_DECL	1080:2	1080:18	3	double new_width ;
VAR_DECL	1080:2	1080:9	4	double new_width
TYPE	1080:2	1080:2	5	double
TYPE_NAME	1080:2	1080:2	6	double
LEAF_NODE	1080:2	1080:2	7	double
NAME	1080:9	1080:9	5	new_width
LEAF_NODE	1080:9	1080:9	6	new_width
LEAF_NODE	1080:18	1080:18	4	;
SIMPLE_DECL	1081:2	1081:19	3	double new_height ;
VAR_DECL	1081:2	1081:9	4	double new_height
TYPE	1081:2	1081:2	5	double
TYPE_NAME	1081:2	1081:2	6	double
LEAF_NODE	1081:2	1081:2	7	double
NAME	1081:9	1081:9	5	new_height
LEAF_NODE	1081:9	1081:9	6	new_height
LEAF_NODE	1081:19	1081:19	4	;
EXPR_STATEMENT	1083:2	1083:44	3	splitheight = maxPageHeight * PS_UNIT_SIZE ;
EXPR	1083:2	1083:2	4	splitheight = maxPageHeight * PS_UNIT_SIZE
ASSIGN	1083:2	1083:16	5	splitheight = maxPageHeight * PS_UNIT_SIZE
LVAL	1083:2	1083:2	6	splitheight
FIELD	1083:2	1083:2	7	splitheight
LEAF_NODE	1083:2	1083:2	8	splitheight
ASSIGN_OP	1083:14	1083:14	6	=
LEAF_NODE	1083:14	1083:14	7	=
RVAL	1083:16	1083:32	6	maxPageHeight * PS_UNIT_SIZE
FIELD	1083:16	1083:16	7	maxPageHeight
LEAF_NODE	1083:16	1083:16	8	maxPageHeight
LEAF_NODE	1083:30	1083:30	7	*
FIELD	1083:32	1083:32	7	PS_UNIT_SIZE
LEAF_NODE	1083:32	1083:32	8	PS_UNIT_SIZE
LEAF_NODE	1083:44	1083:44	4	;
EXPR_STATEMENT	1084:2	1084:44	3	splitwidth = maxPageWidth * PS_UNIT_SIZE ;
EXPR	1084:2	1084:2	4	splitwidth = maxPageWidth * PS_UNIT_SIZE
ASSIGN	1084:2	1084:16	5	splitwidth = maxPageWidth * PS_UNIT_SIZE
LVAL	1084:2	1084:2	6	splitwidth
FIELD	1084:2	1084:2	7	splitwidth
LEAF_NODE	1084:2	1084:2	8	splitwidth
ASSIGN_OP	1084:14	1084:14	6	=
LEAF_NODE	1084:14	1084:14	7	=
RVAL	1084:16	1084:32	6	maxPageWidth * PS_UNIT_SIZE
FIELD	1084:16	1084:16	7	maxPageWidth
LEAF_NODE	1084:16	1084:16	8	maxPageWidth
LEAF_NODE	1084:30	1084:30	7	*
FIELD	1084:32	1084:32	7	PS_UNIT_SIZE
LEAF_NODE	1084:32	1084:32	8	PS_UNIT_SIZE
LEAF_NODE	1084:44	1084:44	4	;
SELECTION	1086:2	1087:4	3	
KEYWORD	1086:2	1086:2	4	switch
LEAF_NODE	1086:2	1086:2	5	switch
LEAF_NODE	1086:9	1086:9	4	(
CONDITION	1086:10	1086:10	4	rotation
EXPR	1086:10	1086:10	5	rotation
FIELD	1086:10	1086:10	6	rotation
LEAF_NODE	1086:10	1086:10	7	rotation
LEAF_NODE	1086:18	1086:18	4	)
STATEMENTS	1087:4	1177:4	4	
LEAF_NODE	1087:4	1087:4	5	{
STATEMENTS	1088:4	1176:6	5	
LABEL	1088:4	1088:12	6	case 0 :
LEAF_NODE	1088:4	1088:4	7	case
LEAF_NODE	1088:11	1088:11	7	0
LEAF_NODE	1088:12	1088:12	7	:
LABEL	1089:4	1089:12	6	case 180 :
LEAF_NODE	1089:4	1089:4	7	case
LEAF_NODE	1089:9	1089:9	7	180
LEAF_NODE	1089:12	1089:12	7	:
SELECTION	1089:14	1090:16	6	
KEYWORD	1089:14	1089:14	7	if
LEAF_NODE	1089:14	1089:14	8	if
LEAF_NODE	1089:17	1089:17	7	(
CONDITION	1089:18	1089:18	7	( splitheight > 0 ) || ( splitwidth > 0 )
EXPR	1089:18	1089:18	8	( splitheight > 0 ) || ( splitwidth > 0 )
OR	1089:18	1089:39	9	( splitheight > 0 ) || ( splitwidth > 0 )
EXPR	1089:18	1089:34	10	( splitheight > 0 )
LEAF_NODE	1089:18	1089:18	11	(
FIELD	1089:19	1089:19	11	splitheight
LEAF_NODE	1089:19	1089:19	12	splitheight
REL_OPERATOR	1089:31	1089:31	11	>
LEAF_NODE	1089:31	1089:31	12	>
FIELD	1089:33	1089:33	11	0
LEAF_NODE	1089:33	1089:33	12	0
LEAF_NODE	1089:34	1089:34	11	)
LEAF_NODE	1089:36	1089:36	10	||
EXPR	1089:39	1089:54	10	( splitwidth > 0 )
LEAF_NODE	1089:39	1089:39	11	(
FIELD	1089:40	1089:40	11	splitwidth
LEAF_NODE	1089:40	1089:40	12	splitwidth
REL_OPERATOR	1089:51	1089:51	11	>
LEAF_NODE	1089:51	1089:51	12	>
FIELD	1089:53	1089:53	11	0
LEAF_NODE	1089:53	1089:53	12	0
LEAF_NODE	1089:54	1089:54	11	)
LEAF_NODE	1089:55	1089:55	7	)
STATEMENTS	1090:16	1106:16	7	
LEAF_NODE	1090:16	1090:16	8	{
STATEMENTS	1091:15	1104:16	8	
SELECTION	1091:15	1092:18	9	
KEYWORD	1091:15	1091:15	10	if
LEAF_NODE	1091:15	1091:15	11	if
LEAF_NODE	1091:18	1091:18	10	(
CONDITION	1091:19	1091:19	10	pgwidth != 0 || pgheight != 0
EXPR	1091:19	1091:19	11	pgwidth != 0 || pgheight != 0
OR	1091:19	1091:35	12	pgwidth != 0 || pgheight != 0
EXPR	1091:19	1091:30	13	pgwidth != 0
FIELD	1091:19	1091:19	14	pgwidth
LEAF_NODE	1091:19	1091:19	15	pgwidth
EQ_OPERATOR	1091:27	1091:27	14	!=
LEAF_NODE	1091:27	1091:27	15	!=
FIELD	1091:30	1091:30	14	0
LEAF_NODE	1091:30	1091:30	15	0
LEAF_NODE	1091:32	1091:32	13	||
EXPR	1091:35	1091:47	13	pgheight != 0
FIELD	1091:35	1091:35	14	pgheight
LEAF_NODE	1091:35	1091:35	15	pgheight
EQ_OPERATOR	1091:44	1091:44	14	!=
LEAF_NODE	1091:44	1091:44	15	!=
FIELD	1091:47	1091:47	14	0
LEAF_NODE	1091:47	1091:47	15	0
LEAF_NODE	1091:48	1091:48	10	)
STATEMENTS	1092:18	1096:18	10	
LEAF_NODE	1092:18	1092:18	11	{
STATEMENTS	1093:17	1095:18	11	
EXPR_STATEMENT	1093:17	1093:72	12	xscale = reqwidth / ( splitwidth ? splitwidth : pswidth ) ;
EXPR	1093:17	1093:17	13	xscale = reqwidth / ( splitwidth ? splitwidth : pswidth )
ASSIGN	1093:17	1093:26	14	xscale = reqwidth / ( splitwidth ? splitwidth : pswidth )
LVAL	1093:17	1093:17	15	xscale
FIELD	1093:17	1093:17	16	xscale
LEAF_NODE	1093:17	1093:17	17	xscale
ASSIGN_OP	1093:24	1093:24	15	=
LEAF_NODE	1093:24	1093:24	16	=
RVAL	1093:26	1093:71	15	reqwidth / ( splitwidth ? splitwidth : pswidth )
FIELD	1093:26	1093:26	16	reqwidth
LEAF_NODE	1093:26	1093:26	17	reqwidth
LEAF_NODE	1093:35	1093:35	16	/
LEAF_NODE	1093:37	1093:37	16	(
COND_EXPR	1093:38	1093:64	16	splitwidth ? splitwidth : pswidth
CONDITION	1093:38	1093:38	17	splitwidth
FIELD	1093:38	1093:38	18	splitwidth
LEAF_NODE	1093:38	1093:38	19	splitwidth
LEAF_NODE	1093:49	1093:49	17	?
EXPR	1093:51	1093:51	17	splitwidth
FIELD	1093:51	1093:51	18	splitwidth
LEAF_NODE	1093:51	1093:51	19	splitwidth
LEAF_NODE	1093:62	1093:62	17	:
FIELD	1093:64	1093:64	17	pswidth
LEAF_NODE	1093:64	1093:64	18	pswidth
LEAF_NODE	1093:71	1093:71	16	)
LEAF_NODE	1093:72	1093:72	13	;
EXPR_STATEMENT	1094:17	1094:76	12	yscale = reqheight / ( splitheight ? splitheight : psheight ) ;
EXPR	1094:17	1094:17	13	yscale = reqheight / ( splitheight ? splitheight : psheight )
ASSIGN	1094:17	1094:26	14	yscale = reqheight / ( splitheight ? splitheight : psheight )
LVAL	1094:17	1094:17	15	yscale
FIELD	1094:17	1094:17	16	yscale
LEAF_NODE	1094:17	1094:17	17	yscale
ASSIGN_OP	1094:24	1094:24	15	=
LEAF_NODE	1094:24	1094:24	16	=
RVAL	1094:26	1094:75	15	reqheight / ( splitheight ? splitheight : psheight )
FIELD	1094:26	1094:26	16	reqheight
LEAF_NODE	1094:26	1094:26	17	reqheight
LEAF_NODE	1094:36	1094:36	16	/
LEAF_NODE	1094:38	1094:38	16	(
COND_EXPR	1094:39	1094:67	16	splitheight ? splitheight : psheight
CONDITION	1094:39	1094:39	17	splitheight
FIELD	1094:39	1094:39	18	splitheight
LEAF_NODE	1094:39	1094:39	19	splitheight
LEAF_NODE	1094:51	1094:51	17	?
EXPR	1094:53	1094:53	17	splitheight
FIELD	1094:53	1094:53	18	splitheight
LEAF_NODE	1094:53	1094:53	19	splitheight
LEAF_NODE	1094:65	1094:65	17	:
FIELD	1094:67	1094:67	17	psheight
LEAF_NODE	1094:67	1094:67	18	psheight
LEAF_NODE	1094:75	1094:75	16	)
LEAF_NODE	1094:76	1094:76	13	;
EXPR_STATEMENT	1095:18	1095:61	12	scale = ( xscale < yscale ) ? xscale : yscale ;
EXPR	1095:18	1095:18	13	scale = ( xscale < yscale ) ? xscale : yscale
ASSIGN	1095:18	1095:26	14	scale = ( xscale < yscale ) ? xscale : yscale
LVAL	1095:18	1095:18	15	scale
FIELD	1095:18	1095:18	16	scale
LEAF_NODE	1095:18	1095:18	17	scale
ASSIGN_OP	1095:24	1095:24	15	=
LEAF_NODE	1095:24	1095:24	16	=
RVAL	1095:26	1095:26	15	( xscale < yscale ) ? xscale : yscale
COND_EXPR	1095:26	1095:55	16	( xscale < yscale ) ? xscale : yscale
CONDITION	1095:26	1095:42	17	( xscale < yscale )
LEAF_NODE	1095:26	1095:26	18	(
FIELD	1095:27	1095:27	18	xscale
LEAF_NODE	1095:27	1095:27	19	xscale
REL_OPERATOR	1095:34	1095:34	18	<
LEAF_NODE	1095:34	1095:34	19	<
FIELD	1095:36	1095:36	18	yscale
LEAF_NODE	1095:36	1095:36	19	yscale
LEAF_NODE	1095:42	1095:42	18	)
LEAF_NODE	1095:44	1095:44	17	?
EXPR	1095:46	1095:46	17	xscale
FIELD	1095:46	1095:46	18	xscale
LEAF_NODE	1095:46	1095:46	19	xscale
LEAF_NODE	1095:53	1095:53	17	:
FIELD	1095:55	1095:55	17	yscale
LEAF_NODE	1095:55	1095:55	18	yscale
LEAF_NODE	1095:61	1095:61	13	;
LEAF_NODE	1096:18	1096:18	11	}
EXPR_STATEMENT	1097:16	1097:69	9	new_width = splitwidth ? splitwidth : scale * pswidth ;
EXPR	1097:16	1097:16	10	new_width = splitwidth ? splitwidth : scale * pswidth
ASSIGN	1097:16	1097:28	11	new_width = splitwidth ? splitwidth : scale * pswidth
LVAL	1097:16	1097:16	12	new_width
FIELD	1097:16	1097:16	13	new_width
LEAF_NODE	1097:16	1097:16	14	new_width
ASSIGN_OP	1097:26	1097:26	12	=
LEAF_NODE	1097:26	1097:26	13	=
RVAL	1097:28	1097:28	12	splitwidth ? splitwidth : scale * pswidth
COND_EXPR	1097:28	1097:62	13	splitwidth ? splitwidth : scale * pswidth
CONDITION	1097:28	1097:28	14	splitwidth
FIELD	1097:28	1097:28	15	splitwidth
LEAF_NODE	1097:28	1097:28	16	splitwidth
LEAF_NODE	1097:39	1097:39	14	?
EXPR	1097:41	1097:41	14	splitwidth
FIELD	1097:41	1097:41	15	splitwidth
LEAF_NODE	1097:41	1097:41	16	splitwidth
LEAF_NODE	1097:52	1097:52	14	:
FIELD	1097:54	1097:54	14	scale
LEAF_NODE	1097:54	1097:54	15	scale
LEAF_NODE	1097:60	1097:60	14	*
FIELD	1097:62	1097:62	14	pswidth
LEAF_NODE	1097:62	1097:62	15	pswidth
LEAF_NODE	1097:69	1097:69	10	;
EXPR_STATEMENT	1098:16	1098:73	9	new_height = splitheight ? splitheight : scale * psheight ;
EXPR	1098:16	1098:16	10	new_height = splitheight ? splitheight : scale * psheight
ASSIGN	1098:16	1098:29	11	new_height = splitheight ? splitheight : scale * psheight
LVAL	1098:16	1098:16	12	new_height
FIELD	1098:16	1098:16	13	new_height
LEAF_NODE	1098:16	1098:16	14	new_height
ASSIGN_OP	1098:27	1098:27	12	=
LEAF_NODE	1098:27	1098:27	13	=
RVAL	1098:29	1098:29	12	splitheight ? splitheight : scale * psheight
COND_EXPR	1098:29	1098:65	13	splitheight ? splitheight : scale * psheight
CONDITION	1098:29	1098:29	14	splitheight
FIELD	1098:29	1098:29	15	splitheight
LEAF_NODE	1098:29	1098:29	16	splitheight
LEAF_NODE	1098:41	1098:41	14	?
EXPR	1098:43	1098:43	14	splitheight
FIELD	1098:43	1098:43	15	splitheight
LEAF_NODE	1098:43	1098:43	16	splitheight
LEAF_NODE	1098:55	1098:55	14	:
FIELD	1098:57	1098:57	14	scale
LEAF_NODE	1098:57	1098:57	15	scale
LEAF_NODE	1098:63	1098:63	14	*
FIELD	1098:65	1098:65	14	psheight
LEAF_NODE	1098:65	1098:65	15	psheight
LEAF_NODE	1098:73	1098:73	10	;
SELECTION	1099:16	1100:18	9	
KEYWORD	1099:16	1099:16	10	if
LEAF_NODE	1099:16	1099:16	11	if
LEAF_NODE	1099:19	1099:19	10	(
CONDITION	1099:20	1099:20	10	strlen ( pageOrientation )
EXPR	1099:20	1099:20	11	strlen ( pageOrientation )
FUNCTION_CALL	1099:20	1099:42	12	strlen ( pageOrientation )
CALLEE	1099:20	1099:20	13	strlen
LEAF_NODE	1099:20	1099:20	14	strlen
LEAF_NODE	1099:26	1099:26	13	(
ARGUMENT	1099:27	1099:27	13	pageOrientation
FIELD	1099:27	1099:27	14	pageOrientation
LEAF_NODE	1099:27	1099:27	15	pageOrientation
LEAF_NODE	1099:42	1099:42	13	)
LEAF_NODE	1099:43	1099:43	10	)
STATEMENTS	1100:18	1100:18	10	
EXPR_STATEMENT	1100:18	1100:76	11	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation ) ;
EXPR	1100:18	1100:18	12	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
FUNCTION_CALL	1100:18	1100:75	13	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
CALLEE	1100:18	1100:18	14	fprintf
LEAF_NODE	1100:18	1100:18	15	fprintf
LEAF_NODE	1100:26	1100:26	14	(
ARGUMENT	1100:27	1100:27	14	fd
FIELD	1100:27	1100:27	15	fd
LEAF_NODE	1100:27	1100:27	16	fd
LEAF_NODE	1100:29	1100:29	14	,
ARGUMENT	1100:31	1100:31	14	"%%%%PageOrientation: %s\n"
FIELD	1100:31	1100:31	15	"%%%%PageOrientation: %s\n"
LEAF_NODE	1100:31	1100:31	16	"%%%%PageOrientation: %s\n"
LEAF_NODE	1100:58	1100:58	14	,
ARGUMENT	1100:60	1100:60	14	pageOrientation
FIELD	1100:60	1100:60	15	pageOrientation
LEAF_NODE	1100:60	1100:60	16	pageOrientation
LEAF_NODE	1100:75	1100:75	14	)
LEAF_NODE	1100:76	1100:76	12	;
SELECTION	1101:16	1102:18	9	
KEYWORD	1101:16	1101:16	10	else
LEAF_NODE	1101:16	1101:16	11	else
STATEMENTS	1102:18	1102:18	10	
EXPR_STATEMENT	1102:18	1102:112	11	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( new_width > new_height ) ? "Landscape" : "Portrait" ) ;
EXPR	1102:18	1102:18	12	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( new_width > new_height ) ? "Landscape" : "Portrait" )
FUNCTION_CALL	1102:18	1102:111	13	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( new_width > new_height ) ? "Landscape" : "Portrait" )
CALLEE	1102:18	1102:18	14	fprintf
LEAF_NODE	1102:18	1102:18	15	fprintf
LEAF_NODE	1102:26	1102:26	14	(
ARGUMENT	1102:27	1102:27	14	fd
FIELD	1102:27	1102:27	15	fd
LEAF_NODE	1102:27	1102:27	16	fd
LEAF_NODE	1102:29	1102:29	14	,
ARGUMENT	1102:31	1102:31	14	"%%%%PageOrientation: %s\n"
FIELD	1102:31	1102:31	15	"%%%%PageOrientation: %s\n"
LEAF_NODE	1102:31	1102:31	16	"%%%%PageOrientation: %s\n"
LEAF_NODE	1102:58	1102:58	14	,
ARGUMENT	1102:60	1102:60	14	( new_width > new_height ) ? "Landscape" : "Portrait"
COND_EXPR	1102:60	1102:101	15	( new_width > new_height ) ? "Landscape" : "Portrait"
CONDITION	1102:60	1102:83	16	( new_width > new_height )
LEAF_NODE	1102:60	1102:60	17	(
FIELD	1102:61	1102:61	17	new_width
LEAF_NODE	1102:61	1102:61	18	new_width
REL_OPERATOR	1102:71	1102:71	17	>
LEAF_NODE	1102:71	1102:71	18	>
FIELD	1102:73	1102:73	17	new_height
LEAF_NODE	1102:73	1102:73	18	new_height
LEAF_NODE	1102:83	1102:83	17	)
LEAF_NODE	1102:85	1102:85	16	?
EXPR	1102:87	1102:87	16	"Landscape"
FIELD	1102:87	1102:87	17	"Landscape"
LEAF_NODE	1102:87	1102:87	18	"Landscape"
LEAF_NODE	1102:99	1102:99	16	:
FIELD	1102:101	1102:101	16	"Portrait"
LEAF_NODE	1102:101	1102:101	17	"Portrait"
LEAF_NODE	1102:111	1102:111	14	)
LEAF_NODE	1102:112	1102:112	12	;
EXPR_STATEMENT	1103:16	1103:101	9	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) new_width , ( long ) new_height ) ;
EXPR	1103:16	1103:16	10	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) new_width , ( long ) new_height )
FUNCTION_CALL	1103:16	1103:100	11	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) new_width , ( long ) new_height )
CALLEE	1103:16	1103:16	12	fprintf
LEAF_NODE	1103:16	1103:16	13	fprintf
LEAF_NODE	1103:24	1103:24	12	(
ARGUMENT	1103:25	1103:25	12	fd
FIELD	1103:25	1103:25	13	fd
LEAF_NODE	1103:25	1103:25	14	fd
LEAF_NODE	1103:27	1103:27	12	,
ARGUMENT	1103:29	1103:29	12	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
FIELD	1103:29	1103:29	13	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1103:29	1103:29	14	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1103:65	1103:65	12	,
ARGUMENT	1103:67	1103:73	12	( long ) new_width
LEAF_NODE	1103:67	1103:67	13	(
TYPE_NAME	1103:68	1103:68	13	long
LEAF_NODE	1103:68	1103:68	14	long
LEAF_NODE	1103:72	1103:72	13	)
FIELD	1103:73	1103:73	13	new_width
LEAF_NODE	1103:73	1103:73	14	new_width
LEAF_NODE	1103:82	1103:82	12	,
ARGUMENT	1103:84	1103:90	12	( long ) new_height
LEAF_NODE	1103:84	1103:84	13	(
TYPE_NAME	1103:85	1103:85	13	long
LEAF_NODE	1103:85	1103:85	14	long
LEAF_NODE	1103:89	1103:89	13	)
FIELD	1103:90	1103:90	13	new_height
LEAF_NODE	1103:90	1103:90	14	new_height
LEAF_NODE	1103:100	1103:100	12	)
LEAF_NODE	1103:101	1103:101	10	;
EXPR_STATEMENT	1104:16	1105:45	9	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , new_width , new_height ) ;
EXPR	1104:16	1104:16	10	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , new_width , new_height )
FUNCTION_CALL	1104:16	1105:44	11	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , new_width , new_height )
CALLEE	1104:16	1104:16	12	fprintf
LEAF_NODE	1104:16	1104:16	13	fprintf
LEAF_NODE	1104:24	1104:24	12	(
ARGUMENT	1104:25	1104:25	12	fd
FIELD	1104:25	1104:25	13	fd
LEAF_NODE	1104:25	1104:25	14	fd
LEAF_NODE	1104:27	1104:27	12	,
ARGUMENT	1104:29	1104:29	12	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
FIELD	1104:29	1104:29	13	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1104:29	1104:29	14	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1104:99	1104:99	12	,
ARGUMENT	1105:23	1105:23	12	new_width
FIELD	1105:23	1105:23	13	new_width
LEAF_NODE	1105:23	1105:23	14	new_width
LEAF_NODE	1105:32	1105:32	12	,
ARGUMENT	1105:34	1105:34	12	new_height
FIELD	1105:34	1105:34	13	new_height
LEAF_NODE	1105:34	1105:34	14	new_height
LEAF_NODE	1105:44	1105:44	12	)
LEAF_NODE	1105:45	1105:45	10	;
LEAF_NODE	1106:16	1106:16	8	}
SELECTION	1107:13	1108:16	6	
KEYWORD	1107:13	1107:13	7	else
LEAF_NODE	1107:13	1107:13	8	else
STATEMENTS	1108:16	1129:16	7	
LEAF_NODE	1108:16	1108:16	8	{
STATEMENTS	1109:16	1119:15	8	
SELECTION	1109:16	1110:18	9	
KEYWORD	1109:16	1109:16	10	if
LEAF_NODE	1109:16	1109:16	11	if
LEAF_NODE	1109:19	1109:19	10	(
CONDITION	1109:20	1109:20	10	( pgwidth == 0 ) && ( pgheight == 0 )
EXPR	1109:20	1109:20	11	( pgwidth == 0 ) && ( pgheight == 0 )
AND	1109:20	1109:38	12	( pgwidth == 0 ) && ( pgheight == 0 )
EXPR	1109:20	1109:33	13	( pgwidth == 0 )
LEAF_NODE	1109:20	1109:20	14	(
FIELD	1109:21	1109:21	14	pgwidth
LEAF_NODE	1109:21	1109:21	15	pgwidth
EQ_OPERATOR	1109:29	1109:29	14	==
LEAF_NODE	1109:29	1109:29	15	==
FIELD	1109:32	1109:32	14	0
LEAF_NODE	1109:32	1109:32	15	0
LEAF_NODE	1109:33	1109:33	14	)
LEAF_NODE	1109:35	1109:35	13	&&
EXPR	1109:38	1109:52	13	( pgheight == 0 )
LEAF_NODE	1109:38	1109:38	14	(
FIELD	1109:39	1109:39	14	pgheight
LEAF_NODE	1109:39	1109:39	15	pgheight
EQ_OPERATOR	1109:48	1109:48	14	==
LEAF_NODE	1109:48	1109:48	15	==
FIELD	1109:51	1109:51	14	0
LEAF_NODE	1109:51	1109:51	15	0
LEAF_NODE	1109:52	1109:52	14	)
LEAF_NODE	1109:53	1109:53	10	)
STATEMENTS	1110:18	1118:18	10	
LEAF_NODE	1110:18	1110:18	11	{
STATEMENTS	1111:18	1116:18	11	
SELECTION	1111:18	1112:20	12	
KEYWORD	1111:18	1111:18	13	if
LEAF_NODE	1111:18	1111:18	14	if
LEAF_NODE	1111:21	1111:21	13	(
CONDITION	1111:22	1111:22	13	strlen ( pageOrientation )
EXPR	1111:22	1111:22	14	strlen ( pageOrientation )
FUNCTION_CALL	1111:22	1111:44	15	strlen ( pageOrientation )
CALLEE	1111:22	1111:22	16	strlen
LEAF_NODE	1111:22	1111:22	17	strlen
LEAF_NODE	1111:28	1111:28	16	(
ARGUMENT	1111:29	1111:29	16	pageOrientation
FIELD	1111:29	1111:29	17	pageOrientation
LEAF_NODE	1111:29	1111:29	18	pageOrientation
LEAF_NODE	1111:44	1111:44	16	)
LEAF_NODE	1111:45	1111:45	13	)
STATEMENTS	1112:20	1112:20	13	
EXPR_STATEMENT	1112:20	1112:78	14	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation ) ;
EXPR	1112:20	1112:20	15	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
FUNCTION_CALL	1112:20	1112:77	16	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
CALLEE	1112:20	1112:20	17	fprintf
LEAF_NODE	1112:20	1112:20	18	fprintf
LEAF_NODE	1112:28	1112:28	17	(
ARGUMENT	1112:29	1112:29	17	fd
FIELD	1112:29	1112:29	18	fd
LEAF_NODE	1112:29	1112:29	19	fd
LEAF_NODE	1112:31	1112:31	17	,
ARGUMENT	1112:33	1112:33	17	"%%%%PageOrientation: %s\n"
FIELD	1112:33	1112:33	18	"%%%%PageOrientation: %s\n"
LEAF_NODE	1112:33	1112:33	19	"%%%%PageOrientation: %s\n"
LEAF_NODE	1112:60	1112:60	17	,
ARGUMENT	1112:62	1112:62	17	pageOrientation
FIELD	1112:62	1112:62	18	pageOrientation
LEAF_NODE	1112:62	1112:62	19	pageOrientation
LEAF_NODE	1112:77	1112:77	17	)
LEAF_NODE	1112:78	1112:78	15	;
SELECTION	1113:18	1114:20	12	
KEYWORD	1113:18	1113:18	13	else
LEAF_NODE	1113:18	1113:18	14	else
STATEMENTS	1114:20	1114:20	13	
EXPR_STATEMENT	1114:20	1114:110	14	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( pswidth > psheight ) ? "Landscape" : "Portrait" ) ;
EXPR	1114:20	1114:20	15	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( pswidth > psheight ) ? "Landscape" : "Portrait" )
FUNCTION_CALL	1114:20	1114:109	16	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( pswidth > psheight ) ? "Landscape" : "Portrait" )
CALLEE	1114:20	1114:20	17	fprintf
LEAF_NODE	1114:20	1114:20	18	fprintf
LEAF_NODE	1114:28	1114:28	17	(
ARGUMENT	1114:29	1114:29	17	fd
FIELD	1114:29	1114:29	18	fd
LEAF_NODE	1114:29	1114:29	19	fd
LEAF_NODE	1114:31	1114:31	17	,
ARGUMENT	1114:33	1114:33	17	"%%%%PageOrientation: %s\n"
FIELD	1114:33	1114:33	18	"%%%%PageOrientation: %s\n"
LEAF_NODE	1114:33	1114:33	19	"%%%%PageOrientation: %s\n"
LEAF_NODE	1114:60	1114:60	17	,
ARGUMENT	1114:62	1114:62	17	( pswidth > psheight ) ? "Landscape" : "Portrait"
COND_EXPR	1114:62	1114:99	18	( pswidth > psheight ) ? "Landscape" : "Portrait"
CONDITION	1114:62	1114:81	19	( pswidth > psheight )
LEAF_NODE	1114:62	1114:62	20	(
FIELD	1114:63	1114:63	20	pswidth
LEAF_NODE	1114:63	1114:63	21	pswidth
REL_OPERATOR	1114:71	1114:71	20	>
LEAF_NODE	1114:71	1114:71	21	>
FIELD	1114:73	1114:73	20	psheight
LEAF_NODE	1114:73	1114:73	21	psheight
LEAF_NODE	1114:81	1114:81	20	)
LEAF_NODE	1114:83	1114:83	19	?
EXPR	1114:85	1114:85	19	"Landscape"
FIELD	1114:85	1114:85	20	"Landscape"
LEAF_NODE	1114:85	1114:85	21	"Landscape"
LEAF_NODE	1114:97	1114:97	19	:
FIELD	1114:99	1114:99	19	"Portrait"
LEAF_NODE	1114:99	1114:99	20	"Portrait"
LEAF_NODE	1114:109	1114:109	17	)
LEAF_NODE	1114:110	1114:110	15	;
EXPR_STATEMENT	1115:17	1115:98	12	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) pswidth , ( long ) psheight ) ;
EXPR	1115:17	1115:17	13	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) pswidth , ( long ) psheight )
FUNCTION_CALL	1115:17	1115:97	14	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) pswidth , ( long ) psheight )
CALLEE	1115:17	1115:17	15	fprintf
LEAF_NODE	1115:17	1115:17	16	fprintf
LEAF_NODE	1115:25	1115:25	15	(
ARGUMENT	1115:26	1115:26	15	fd
FIELD	1115:26	1115:26	16	fd
LEAF_NODE	1115:26	1115:26	17	fd
LEAF_NODE	1115:28	1115:28	15	,
ARGUMENT	1115:30	1115:30	15	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
FIELD	1115:30	1115:30	16	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1115:30	1115:30	17	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1115:66	1115:66	15	,
ARGUMENT	1115:68	1115:74	15	( long ) pswidth
LEAF_NODE	1115:68	1115:68	16	(
TYPE_NAME	1115:69	1115:69	16	long
LEAF_NODE	1115:69	1115:69	17	long
LEAF_NODE	1115:73	1115:73	16	)
FIELD	1115:74	1115:74	16	pswidth
LEAF_NODE	1115:74	1115:74	17	pswidth
LEAF_NODE	1115:81	1115:81	15	,
ARGUMENT	1115:83	1115:89	15	( long ) psheight
LEAF_NODE	1115:83	1115:83	16	(
TYPE_NAME	1115:84	1115:84	16	long
LEAF_NODE	1115:84	1115:84	17	long
LEAF_NODE	1115:88	1115:88	16	)
FIELD	1115:89	1115:89	16	psheight
LEAF_NODE	1115:89	1115:89	17	psheight
LEAF_NODE	1115:97	1115:97	15	)
LEAF_NODE	1115:98	1115:98	13	;
EXPR_STATEMENT	1116:18	1117:44	12	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , pswidth , psheight ) ;
EXPR	1116:18	1116:18	13	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , pswidth , psheight )
FUNCTION_CALL	1116:18	1117:43	14	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , pswidth , psheight )
CALLEE	1116:18	1116:18	15	fprintf
LEAF_NODE	1116:18	1116:18	16	fprintf
LEAF_NODE	1116:25	1116:25	15	(
ARGUMENT	1116:26	1116:26	15	fd
FIELD	1116:26	1116:26	16	fd
LEAF_NODE	1116:26	1116:26	17	fd
LEAF_NODE	1116:28	1116:28	15	,
ARGUMENT	1116:30	1116:30	15	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
FIELD	1116:30	1116:30	16	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1116:30	1116:30	17	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1116:100	1116:100	15	,
ARGUMENT	1117:26	1117:26	15	pswidth
FIELD	1117:26	1117:26	16	pswidth
LEAF_NODE	1117:26	1117:26	17	pswidth
LEAF_NODE	1117:33	1117:33	15	,
ARGUMENT	1117:35	1117:35	15	psheight
FIELD	1117:35	1117:35	16	psheight
LEAF_NODE	1117:35	1117:35	17	psheight
LEAF_NODE	1117:43	1117:43	15	)
LEAF_NODE	1117:44	1117:44	13	;
LEAF_NODE	1118:18	1118:18	11	}
SELECTION	1119:15	1120:18	9	
KEYWORD	1119:15	1119:15	10	else
LEAF_NODE	1119:15	1119:15	11	else
STATEMENTS	1120:18	1128:18	10	
LEAF_NODE	1120:18	1120:18	11	{
STATEMENTS	1121:18	1126:18	11	
SELECTION	1121:18	1122:20	12	
KEYWORD	1121:18	1121:18	13	if
LEAF_NODE	1121:18	1121:18	14	if
LEAF_NODE	1121:21	1121:21	13	(
CONDITION	1121:22	1121:22	13	strlen ( pageOrientation )
EXPR	1121:22	1121:22	14	strlen ( pageOrientation )
FUNCTION_CALL	1121:22	1121:44	15	strlen ( pageOrientation )
CALLEE	1121:22	1121:22	16	strlen
LEAF_NODE	1121:22	1121:22	17	strlen
LEAF_NODE	1121:28	1121:28	16	(
ARGUMENT	1121:29	1121:29	16	pageOrientation
FIELD	1121:29	1121:29	17	pageOrientation
LEAF_NODE	1121:29	1121:29	18	pageOrientation
LEAF_NODE	1121:44	1121:44	16	)
LEAF_NODE	1121:45	1121:45	13	)
STATEMENTS	1122:20	1122:20	13	
EXPR_STATEMENT	1122:20	1122:78	14	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation ) ;
EXPR	1122:20	1122:20	15	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
FUNCTION_CALL	1122:20	1122:77	16	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
CALLEE	1122:20	1122:20	17	fprintf
LEAF_NODE	1122:20	1122:20	18	fprintf
LEAF_NODE	1122:28	1122:28	17	(
ARGUMENT	1122:29	1122:29	17	fd
FIELD	1122:29	1122:29	18	fd
LEAF_NODE	1122:29	1122:29	19	fd
LEAF_NODE	1122:31	1122:31	17	,
ARGUMENT	1122:33	1122:33	17	"%%%%PageOrientation: %s\n"
FIELD	1122:33	1122:33	18	"%%%%PageOrientation: %s\n"
LEAF_NODE	1122:33	1122:33	19	"%%%%PageOrientation: %s\n"
LEAF_NODE	1122:60	1122:60	17	,
ARGUMENT	1122:62	1122:62	17	pageOrientation
FIELD	1122:62	1122:62	18	pageOrientation
LEAF_NODE	1122:62	1122:62	19	pageOrientation
LEAF_NODE	1122:77	1122:77	17	)
LEAF_NODE	1122:78	1122:78	15	;
SELECTION	1123:18	1124:20	12	
KEYWORD	1123:18	1123:18	13	else
LEAF_NODE	1123:18	1123:18	14	else
STATEMENTS	1124:20	1124:20	13	
EXPR_STATEMENT	1124:20	1124:112	14	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( reqwidth > reqheight ) ? "Landscape" : "Portrait" ) ;
EXPR	1124:20	1124:20	15	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( reqwidth > reqheight ) ? "Landscape" : "Portrait" )
FUNCTION_CALL	1124:20	1124:111	16	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( reqwidth > reqheight ) ? "Landscape" : "Portrait" )
CALLEE	1124:20	1124:20	17	fprintf
LEAF_NODE	1124:20	1124:20	18	fprintf
LEAF_NODE	1124:28	1124:28	17	(
ARGUMENT	1124:29	1124:29	17	fd
FIELD	1124:29	1124:29	18	fd
LEAF_NODE	1124:29	1124:29	19	fd
LEAF_NODE	1124:31	1124:31	17	,
ARGUMENT	1124:33	1124:33	17	"%%%%PageOrientation: %s\n"
FIELD	1124:33	1124:33	18	"%%%%PageOrientation: %s\n"
LEAF_NODE	1124:33	1124:33	19	"%%%%PageOrientation: %s\n"
LEAF_NODE	1124:60	1124:60	17	,
ARGUMENT	1124:62	1124:62	17	( reqwidth > reqheight ) ? "Landscape" : "Portrait"
COND_EXPR	1124:62	1124:101	18	( reqwidth > reqheight ) ? "Landscape" : "Portrait"
CONDITION	1124:62	1124:83	19	( reqwidth > reqheight )
LEAF_NODE	1124:62	1124:62	20	(
FIELD	1124:63	1124:63	20	reqwidth
LEAF_NODE	1124:63	1124:63	21	reqwidth
REL_OPERATOR	1124:72	1124:72	20	>
LEAF_NODE	1124:72	1124:72	21	>
FIELD	1124:74	1124:74	20	reqheight
LEAF_NODE	1124:74	1124:74	21	reqheight
LEAF_NODE	1124:83	1124:83	20	)
LEAF_NODE	1124:85	1124:85	19	?
EXPR	1124:87	1124:87	19	"Landscape"
FIELD	1124:87	1124:87	20	"Landscape"
LEAF_NODE	1124:87	1124:87	21	"Landscape"
LEAF_NODE	1124:99	1124:99	19	:
FIELD	1124:101	1124:101	19	"Portrait"
LEAF_NODE	1124:101	1124:101	20	"Portrait"
LEAF_NODE	1124:111	1124:111	17	)
LEAF_NODE	1124:112	1124:112	15	;
EXPR_STATEMENT	1125:17	1125:100	12	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) reqwidth , ( long ) reqheight ) ;
EXPR	1125:17	1125:17	13	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) reqwidth , ( long ) reqheight )
FUNCTION_CALL	1125:17	1125:99	14	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) reqwidth , ( long ) reqheight )
CALLEE	1125:17	1125:17	15	fprintf
LEAF_NODE	1125:17	1125:17	16	fprintf
LEAF_NODE	1125:25	1125:25	15	(
ARGUMENT	1125:26	1125:26	15	fd
FIELD	1125:26	1125:26	16	fd
LEAF_NODE	1125:26	1125:26	17	fd
LEAF_NODE	1125:28	1125:28	15	,
ARGUMENT	1125:30	1125:30	15	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
FIELD	1125:30	1125:30	16	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1125:30	1125:30	17	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1125:66	1125:66	15	,
ARGUMENT	1125:68	1125:74	15	( long ) reqwidth
LEAF_NODE	1125:68	1125:68	16	(
TYPE_NAME	1125:69	1125:69	16	long
LEAF_NODE	1125:69	1125:69	17	long
LEAF_NODE	1125:73	1125:73	16	)
FIELD	1125:74	1125:74	16	reqwidth
LEAF_NODE	1125:74	1125:74	17	reqwidth
LEAF_NODE	1125:82	1125:82	15	,
ARGUMENT	1125:84	1125:90	15	( long ) reqheight
LEAF_NODE	1125:84	1125:84	16	(
TYPE_NAME	1125:85	1125:85	16	long
LEAF_NODE	1125:85	1125:85	17	long
LEAF_NODE	1125:89	1125:89	16	)
FIELD	1125:90	1125:90	16	reqheight
LEAF_NODE	1125:90	1125:90	17	reqheight
LEAF_NODE	1125:99	1125:99	15	)
LEAF_NODE	1125:100	1125:100	13	;
EXPR_STATEMENT	1126:18	1127:47	12	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , reqwidth , reqheight ) ;
EXPR	1126:18	1126:18	13	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , reqwidth , reqheight )
FUNCTION_CALL	1126:18	1127:46	14	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , reqwidth , reqheight )
CALLEE	1126:18	1126:18	15	fprintf
LEAF_NODE	1126:18	1126:18	16	fprintf
LEAF_NODE	1126:25	1126:25	15	(
ARGUMENT	1126:26	1126:26	15	fd
FIELD	1126:26	1126:26	16	fd
LEAF_NODE	1126:26	1126:26	17	fd
LEAF_NODE	1126:28	1126:28	15	,
ARGUMENT	1126:30	1126:30	15	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
FIELD	1126:30	1126:30	16	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1126:30	1126:30	17	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1126:100	1126:100	15	,
ARGUMENT	1127:27	1127:27	15	reqwidth
FIELD	1127:27	1127:27	16	reqwidth
LEAF_NODE	1127:27	1127:27	17	reqwidth
LEAF_NODE	1127:35	1127:35	15	,
ARGUMENT	1127:37	1127:37	15	reqheight
FIELD	1127:37	1127:37	16	reqheight
LEAF_NODE	1127:37	1127:37	17	reqheight
LEAF_NODE	1127:46	1127:46	15	)
LEAF_NODE	1127:47	1127:47	13	;
LEAF_NODE	1128:18	1128:18	11	}
LEAF_NODE	1129:16	1129:16	8	}
JUMP_STATEMENT	1130:13	1130:18	6	break DESTINATION ;
KEYWORD	1130:13	1130:13	7	break
LEAF_NODE	1130:13	1130:13	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1130:18	1130:18	7	;
LABEL	1131:4	1131:12	6	case 90 :
LEAF_NODE	1131:4	1131:4	7	case
LEAF_NODE	1131:10	1131:10	7	90
LEAF_NODE	1131:12	1131:12	7	:
LABEL	1132:4	1132:12	6	case 270 :
LEAF_NODE	1132:4	1132:4	7	case
LEAF_NODE	1132:9	1132:9	7	270
LEAF_NODE	1132:12	1132:12	7	:
SELECTION	1132:14	1133:15	6	
KEYWORD	1132:14	1132:14	7	if
LEAF_NODE	1132:14	1132:14	8	if
LEAF_NODE	1132:17	1132:17	7	(
CONDITION	1132:18	1132:18	7	( splitheight > 0 ) || ( splitwidth > 0 )
EXPR	1132:18	1132:18	8	( splitheight > 0 ) || ( splitwidth > 0 )
OR	1132:18	1132:39	9	( splitheight > 0 ) || ( splitwidth > 0 )
EXPR	1132:18	1132:34	10	( splitheight > 0 )
LEAF_NODE	1132:18	1132:18	11	(
FIELD	1132:19	1132:19	11	splitheight
LEAF_NODE	1132:19	1132:19	12	splitheight
REL_OPERATOR	1132:31	1132:31	11	>
LEAF_NODE	1132:31	1132:31	12	>
FIELD	1132:33	1132:33	11	0
LEAF_NODE	1132:33	1132:33	12	0
LEAF_NODE	1132:34	1132:34	11	)
LEAF_NODE	1132:36	1132:36	10	||
EXPR	1132:39	1132:54	10	( splitwidth > 0 )
LEAF_NODE	1132:39	1132:39	11	(
FIELD	1132:40	1132:40	11	splitwidth
LEAF_NODE	1132:40	1132:40	12	splitwidth
REL_OPERATOR	1132:51	1132:51	11	>
LEAF_NODE	1132:51	1132:51	12	>
FIELD	1132:53	1132:53	11	0
LEAF_NODE	1132:53	1132:53	12	0
LEAF_NODE	1132:54	1132:54	11	)
LEAF_NODE	1132:55	1132:55	7	)
STATEMENTS	1133:15	1150:16	7	
LEAF_NODE	1133:15	1133:15	8	{
STATEMENTS	1134:15	1148:16	8	
SELECTION	1134:15	1135:18	9	
KEYWORD	1134:15	1134:15	10	if
LEAF_NODE	1134:15	1134:15	11	if
LEAF_NODE	1134:18	1134:18	10	(
CONDITION	1134:19	1134:19	10	pgwidth != 0 || pgheight != 0
EXPR	1134:19	1134:19	11	pgwidth != 0 || pgheight != 0
OR	1134:19	1134:35	12	pgwidth != 0 || pgheight != 0
EXPR	1134:19	1134:30	13	pgwidth != 0
FIELD	1134:19	1134:19	14	pgwidth
LEAF_NODE	1134:19	1134:19	15	pgwidth
EQ_OPERATOR	1134:27	1134:27	14	!=
LEAF_NODE	1134:27	1134:27	15	!=
FIELD	1134:30	1134:30	14	0
LEAF_NODE	1134:30	1134:30	15	0
LEAF_NODE	1134:32	1134:32	13	||
EXPR	1134:35	1134:47	13	pgheight != 0
FIELD	1134:35	1134:35	14	pgheight
LEAF_NODE	1134:35	1134:35	15	pgheight
EQ_OPERATOR	1134:44	1134:44	14	!=
LEAF_NODE	1134:44	1134:44	15	!=
FIELD	1134:47	1134:47	14	0
LEAF_NODE	1134:47	1134:47	15	0
LEAF_NODE	1134:48	1134:48	10	)
STATEMENTS	1135:18	1139:18	10	
LEAF_NODE	1135:18	1135:18	11	{
STATEMENTS	1136:17	1138:18	11	
EXPR_STATEMENT	1136:17	1136:72	12	xscale = reqwidth / ( splitwidth ? splitwidth : pswidth ) ;
EXPR	1136:17	1136:17	13	xscale = reqwidth / ( splitwidth ? splitwidth : pswidth )
ASSIGN	1136:17	1136:26	14	xscale = reqwidth / ( splitwidth ? splitwidth : pswidth )
LVAL	1136:17	1136:17	15	xscale
FIELD	1136:17	1136:17	16	xscale
LEAF_NODE	1136:17	1136:17	17	xscale
ASSIGN_OP	1136:24	1136:24	15	=
LEAF_NODE	1136:24	1136:24	16	=
RVAL	1136:26	1136:71	15	reqwidth / ( splitwidth ? splitwidth : pswidth )
FIELD	1136:26	1136:26	16	reqwidth
LEAF_NODE	1136:26	1136:26	17	reqwidth
LEAF_NODE	1136:35	1136:35	16	/
LEAF_NODE	1136:37	1136:37	16	(
COND_EXPR	1136:38	1136:64	16	splitwidth ? splitwidth : pswidth
CONDITION	1136:38	1136:38	17	splitwidth
FIELD	1136:38	1136:38	18	splitwidth
LEAF_NODE	1136:38	1136:38	19	splitwidth
LEAF_NODE	1136:49	1136:49	17	?
EXPR	1136:51	1136:51	17	splitwidth
FIELD	1136:51	1136:51	18	splitwidth
LEAF_NODE	1136:51	1136:51	19	splitwidth
LEAF_NODE	1136:62	1136:62	17	:
FIELD	1136:64	1136:64	17	pswidth
LEAF_NODE	1136:64	1136:64	18	pswidth
LEAF_NODE	1136:71	1136:71	16	)
LEAF_NODE	1136:72	1136:72	13	;
EXPR_STATEMENT	1137:17	1137:76	12	yscale = reqheight / ( splitheight ? splitheight : psheight ) ;
EXPR	1137:17	1137:17	13	yscale = reqheight / ( splitheight ? splitheight : psheight )
ASSIGN	1137:17	1137:26	14	yscale = reqheight / ( splitheight ? splitheight : psheight )
LVAL	1137:17	1137:17	15	yscale
FIELD	1137:17	1137:17	16	yscale
LEAF_NODE	1137:17	1137:17	17	yscale
ASSIGN_OP	1137:24	1137:24	15	=
LEAF_NODE	1137:24	1137:24	16	=
RVAL	1137:26	1137:75	15	reqheight / ( splitheight ? splitheight : psheight )
FIELD	1137:26	1137:26	16	reqheight
LEAF_NODE	1137:26	1137:26	17	reqheight
LEAF_NODE	1137:36	1137:36	16	/
LEAF_NODE	1137:38	1137:38	16	(
COND_EXPR	1137:39	1137:67	16	splitheight ? splitheight : psheight
CONDITION	1137:39	1137:39	17	splitheight
FIELD	1137:39	1137:39	18	splitheight
LEAF_NODE	1137:39	1137:39	19	splitheight
LEAF_NODE	1137:51	1137:51	17	?
EXPR	1137:53	1137:53	17	splitheight
FIELD	1137:53	1137:53	18	splitheight
LEAF_NODE	1137:53	1137:53	19	splitheight
LEAF_NODE	1137:65	1137:65	17	:
FIELD	1137:67	1137:67	17	psheight
LEAF_NODE	1137:67	1137:67	18	psheight
LEAF_NODE	1137:75	1137:75	16	)
LEAF_NODE	1137:76	1137:76	13	;
EXPR_STATEMENT	1138:18	1138:61	12	scale = ( xscale < yscale ) ? xscale : yscale ;
EXPR	1138:18	1138:18	13	scale = ( xscale < yscale ) ? xscale : yscale
ASSIGN	1138:18	1138:26	14	scale = ( xscale < yscale ) ? xscale : yscale
LVAL	1138:18	1138:18	15	scale
FIELD	1138:18	1138:18	16	scale
LEAF_NODE	1138:18	1138:18	17	scale
ASSIGN_OP	1138:24	1138:24	15	=
LEAF_NODE	1138:24	1138:24	16	=
RVAL	1138:26	1138:26	15	( xscale < yscale ) ? xscale : yscale
COND_EXPR	1138:26	1138:55	16	( xscale < yscale ) ? xscale : yscale
CONDITION	1138:26	1138:42	17	( xscale < yscale )
LEAF_NODE	1138:26	1138:26	18	(
FIELD	1138:27	1138:27	18	xscale
LEAF_NODE	1138:27	1138:27	19	xscale
REL_OPERATOR	1138:34	1138:34	18	<
LEAF_NODE	1138:34	1138:34	19	<
FIELD	1138:36	1138:36	18	yscale
LEAF_NODE	1138:36	1138:36	19	yscale
LEAF_NODE	1138:42	1138:42	18	)
LEAF_NODE	1138:44	1138:44	17	?
EXPR	1138:46	1138:46	17	xscale
FIELD	1138:46	1138:46	18	xscale
LEAF_NODE	1138:46	1138:46	19	xscale
LEAF_NODE	1138:53	1138:53	17	:
FIELD	1138:55	1138:55	17	yscale
LEAF_NODE	1138:55	1138:55	18	yscale
LEAF_NODE	1138:61	1138:61	13	;
LEAF_NODE	1139:18	1139:18	11	}
EXPR_STATEMENT	1140:16	1140:70	9	new_width = splitwidth ? splitwidth : scale * psheight ;
EXPR	1140:16	1140:16	10	new_width = splitwidth ? splitwidth : scale * psheight
ASSIGN	1140:16	1140:28	11	new_width = splitwidth ? splitwidth : scale * psheight
LVAL	1140:16	1140:16	12	new_width
FIELD	1140:16	1140:16	13	new_width
LEAF_NODE	1140:16	1140:16	14	new_width
ASSIGN_OP	1140:26	1140:26	12	=
LEAF_NODE	1140:26	1140:26	13	=
RVAL	1140:28	1140:28	12	splitwidth ? splitwidth : scale * psheight
COND_EXPR	1140:28	1140:62	13	splitwidth ? splitwidth : scale * psheight
CONDITION	1140:28	1140:28	14	splitwidth
FIELD	1140:28	1140:28	15	splitwidth
LEAF_NODE	1140:28	1140:28	16	splitwidth
LEAF_NODE	1140:39	1140:39	14	?
EXPR	1140:41	1140:41	14	splitwidth
FIELD	1140:41	1140:41	15	splitwidth
LEAF_NODE	1140:41	1140:41	16	splitwidth
LEAF_NODE	1140:52	1140:52	14	:
FIELD	1140:54	1140:54	14	scale
LEAF_NODE	1140:54	1140:54	15	scale
LEAF_NODE	1140:60	1140:60	14	*
FIELD	1140:62	1140:62	14	psheight
LEAF_NODE	1140:62	1140:62	15	psheight
LEAF_NODE	1140:70	1140:70	10	;
EXPR_STATEMENT	1141:16	1141:72	9	new_height = splitheight ? splitheight : scale * pswidth ;
EXPR	1141:16	1141:16	10	new_height = splitheight ? splitheight : scale * pswidth
ASSIGN	1141:16	1141:29	11	new_height = splitheight ? splitheight : scale * pswidth
LVAL	1141:16	1141:16	12	new_height
FIELD	1141:16	1141:16	13	new_height
LEAF_NODE	1141:16	1141:16	14	new_height
ASSIGN_OP	1141:27	1141:27	12	=
LEAF_NODE	1141:27	1141:27	13	=
RVAL	1141:29	1141:29	12	splitheight ? splitheight : scale * pswidth
COND_EXPR	1141:29	1141:65	13	splitheight ? splitheight : scale * pswidth
CONDITION	1141:29	1141:29	14	splitheight
FIELD	1141:29	1141:29	15	splitheight
LEAF_NODE	1141:29	1141:29	16	splitheight
LEAF_NODE	1141:41	1141:41	14	?
EXPR	1141:43	1141:43	14	splitheight
FIELD	1141:43	1141:43	15	splitheight
LEAF_NODE	1141:43	1141:43	16	splitheight
LEAF_NODE	1141:55	1141:55	14	:
FIELD	1141:57	1141:57	14	scale
LEAF_NODE	1141:57	1141:57	15	scale
LEAF_NODE	1141:63	1141:63	14	*
FIELD	1141:65	1141:65	14	pswidth
LEAF_NODE	1141:65	1141:65	15	pswidth
LEAF_NODE	1141:72	1141:72	10	;
SELECTION	1143:16	1144:18	9	
KEYWORD	1143:16	1143:16	10	if
LEAF_NODE	1143:16	1143:16	11	if
LEAF_NODE	1143:19	1143:19	10	(
CONDITION	1143:20	1143:20	10	strlen ( pageOrientation )
EXPR	1143:20	1143:20	11	strlen ( pageOrientation )
FUNCTION_CALL	1143:20	1143:42	12	strlen ( pageOrientation )
CALLEE	1143:20	1143:20	13	strlen
LEAF_NODE	1143:20	1143:20	14	strlen
LEAF_NODE	1143:26	1143:26	13	(
ARGUMENT	1143:27	1143:27	13	pageOrientation
FIELD	1143:27	1143:27	14	pageOrientation
LEAF_NODE	1143:27	1143:27	15	pageOrientation
LEAF_NODE	1143:42	1143:42	13	)
LEAF_NODE	1143:43	1143:43	10	)
STATEMENTS	1144:18	1144:18	10	
EXPR_STATEMENT	1144:18	1144:76	11	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation ) ;
EXPR	1144:18	1144:18	12	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
FUNCTION_CALL	1144:18	1144:75	13	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
CALLEE	1144:18	1144:18	14	fprintf
LEAF_NODE	1144:18	1144:18	15	fprintf
LEAF_NODE	1144:26	1144:26	14	(
ARGUMENT	1144:27	1144:27	14	fd
FIELD	1144:27	1144:27	15	fd
LEAF_NODE	1144:27	1144:27	16	fd
LEAF_NODE	1144:29	1144:29	14	,
ARGUMENT	1144:31	1144:31	14	"%%%%PageOrientation: %s\n"
FIELD	1144:31	1144:31	15	"%%%%PageOrientation: %s\n"
LEAF_NODE	1144:31	1144:31	16	"%%%%PageOrientation: %s\n"
LEAF_NODE	1144:58	1144:58	14	,
ARGUMENT	1144:60	1144:60	14	pageOrientation
FIELD	1144:60	1144:60	15	pageOrientation
LEAF_NODE	1144:60	1144:60	16	pageOrientation
LEAF_NODE	1144:75	1144:75	14	)
LEAF_NODE	1144:76	1144:76	12	;
SELECTION	1145:16	1146:18	9	
KEYWORD	1145:16	1145:16	10	else
LEAF_NODE	1145:16	1145:16	11	else
STATEMENTS	1146:18	1146:18	10	
EXPR_STATEMENT	1146:18	1146:112	11	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( new_width > new_height ) ? "Landscape" : "Portrait" ) ;
EXPR	1146:18	1146:18	12	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( new_width > new_height ) ? "Landscape" : "Portrait" )
FUNCTION_CALL	1146:18	1146:111	13	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( new_width > new_height ) ? "Landscape" : "Portrait" )
CALLEE	1146:18	1146:18	14	fprintf
LEAF_NODE	1146:18	1146:18	15	fprintf
LEAF_NODE	1146:26	1146:26	14	(
ARGUMENT	1146:27	1146:27	14	fd
FIELD	1146:27	1146:27	15	fd
LEAF_NODE	1146:27	1146:27	16	fd
LEAF_NODE	1146:29	1146:29	14	,
ARGUMENT	1146:31	1146:31	14	"%%%%PageOrientation: %s\n"
FIELD	1146:31	1146:31	15	"%%%%PageOrientation: %s\n"
LEAF_NODE	1146:31	1146:31	16	"%%%%PageOrientation: %s\n"
LEAF_NODE	1146:58	1146:58	14	,
ARGUMENT	1146:60	1146:60	14	( new_width > new_height ) ? "Landscape" : "Portrait"
COND_EXPR	1146:60	1146:101	15	( new_width > new_height ) ? "Landscape" : "Portrait"
CONDITION	1146:60	1146:83	16	( new_width > new_height )
LEAF_NODE	1146:60	1146:60	17	(
FIELD	1146:61	1146:61	17	new_width
LEAF_NODE	1146:61	1146:61	18	new_width
REL_OPERATOR	1146:71	1146:71	17	>
LEAF_NODE	1146:71	1146:71	18	>
FIELD	1146:73	1146:73	17	new_height
LEAF_NODE	1146:73	1146:73	18	new_height
LEAF_NODE	1146:83	1146:83	17	)
LEAF_NODE	1146:85	1146:85	16	?
EXPR	1146:87	1146:87	16	"Landscape"
FIELD	1146:87	1146:87	17	"Landscape"
LEAF_NODE	1146:87	1146:87	18	"Landscape"
LEAF_NODE	1146:99	1146:99	16	:
FIELD	1146:101	1146:101	16	"Portrait"
LEAF_NODE	1146:101	1146:101	17	"Portrait"
LEAF_NODE	1146:111	1146:111	14	)
LEAF_NODE	1146:112	1146:112	12	;
EXPR_STATEMENT	1147:16	1147:101	9	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) new_width , ( long ) new_height ) ;
EXPR	1147:16	1147:16	10	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) new_width , ( long ) new_height )
FUNCTION_CALL	1147:16	1147:100	11	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) new_width , ( long ) new_height )
CALLEE	1147:16	1147:16	12	fprintf
LEAF_NODE	1147:16	1147:16	13	fprintf
LEAF_NODE	1147:24	1147:24	12	(
ARGUMENT	1147:25	1147:25	12	fd
FIELD	1147:25	1147:25	13	fd
LEAF_NODE	1147:25	1147:25	14	fd
LEAF_NODE	1147:27	1147:27	12	,
ARGUMENT	1147:29	1147:29	12	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
FIELD	1147:29	1147:29	13	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1147:29	1147:29	14	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1147:65	1147:65	12	,
ARGUMENT	1147:67	1147:73	12	( long ) new_width
LEAF_NODE	1147:67	1147:67	13	(
TYPE_NAME	1147:68	1147:68	13	long
LEAF_NODE	1147:68	1147:68	14	long
LEAF_NODE	1147:72	1147:72	13	)
FIELD	1147:73	1147:73	13	new_width
LEAF_NODE	1147:73	1147:73	14	new_width
LEAF_NODE	1147:82	1147:82	12	,
ARGUMENT	1147:84	1147:90	12	( long ) new_height
LEAF_NODE	1147:84	1147:84	13	(
TYPE_NAME	1147:85	1147:85	13	long
LEAF_NODE	1147:85	1147:85	14	long
LEAF_NODE	1147:89	1147:89	13	)
FIELD	1147:90	1147:90	13	new_height
LEAF_NODE	1147:90	1147:90	14	new_height
LEAF_NODE	1147:100	1147:100	12	)
LEAF_NODE	1147:101	1147:101	10	;
EXPR_STATEMENT	1148:16	1149:45	9	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , new_width , new_height ) ;
EXPR	1148:16	1148:16	10	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , new_width , new_height )
FUNCTION_CALL	1148:16	1149:44	11	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , new_width , new_height )
CALLEE	1148:16	1148:16	12	fprintf
LEAF_NODE	1148:16	1148:16	13	fprintf
LEAF_NODE	1148:24	1148:24	12	(
ARGUMENT	1148:25	1148:25	12	fd
FIELD	1148:25	1148:25	13	fd
LEAF_NODE	1148:25	1148:25	14	fd
LEAF_NODE	1148:27	1148:27	12	,
ARGUMENT	1148:29	1148:29	12	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
FIELD	1148:29	1148:29	13	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1148:29	1148:29	14	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1148:99	1148:99	12	,
ARGUMENT	1149:23	1149:23	12	new_width
FIELD	1149:23	1149:23	13	new_width
LEAF_NODE	1149:23	1149:23	14	new_width
LEAF_NODE	1149:32	1149:32	12	,
ARGUMENT	1149:34	1149:34	12	new_height
FIELD	1149:34	1149:34	13	new_height
LEAF_NODE	1149:34	1149:34	14	new_height
LEAF_NODE	1149:44	1149:44	12	)
LEAF_NODE	1149:45	1149:45	10	;
LEAF_NODE	1150:16	1150:16	8	}
SELECTION	1151:14	1152:16	6	
KEYWORD	1151:14	1151:14	7	else
LEAF_NODE	1151:14	1151:14	8	else
STATEMENTS	1152:16	1173:15	7	
LEAF_NODE	1152:16	1152:16	8	{
STATEMENTS	1153:16	1163:15	8	
SELECTION	1153:16	1154:18	9	
KEYWORD	1153:16	1153:16	10	if
LEAF_NODE	1153:16	1153:16	11	if
LEAF_NODE	1153:19	1153:19	10	(
CONDITION	1153:20	1153:20	10	( pgwidth == 0 ) && ( pgheight == 0 )
EXPR	1153:20	1153:20	11	( pgwidth == 0 ) && ( pgheight == 0 )
AND	1153:20	1153:38	12	( pgwidth == 0 ) && ( pgheight == 0 )
EXPR	1153:20	1153:33	13	( pgwidth == 0 )
LEAF_NODE	1153:20	1153:20	14	(
FIELD	1153:21	1153:21	14	pgwidth
LEAF_NODE	1153:21	1153:21	15	pgwidth
EQ_OPERATOR	1153:29	1153:29	14	==
LEAF_NODE	1153:29	1153:29	15	==
FIELD	1153:32	1153:32	14	0
LEAF_NODE	1153:32	1153:32	15	0
LEAF_NODE	1153:33	1153:33	14	)
LEAF_NODE	1153:35	1153:35	13	&&
EXPR	1153:38	1153:52	13	( pgheight == 0 )
LEAF_NODE	1153:38	1153:38	14	(
FIELD	1153:39	1153:39	14	pgheight
LEAF_NODE	1153:39	1153:39	15	pgheight
EQ_OPERATOR	1153:48	1153:48	14	==
LEAF_NODE	1153:48	1153:48	15	==
FIELD	1153:51	1153:51	14	0
LEAF_NODE	1153:51	1153:51	15	0
LEAF_NODE	1153:52	1153:52	14	)
LEAF_NODE	1153:53	1153:53	10	)
STATEMENTS	1154:18	1162:18	10	
LEAF_NODE	1154:18	1154:18	11	{
STATEMENTS	1155:18	1160:18	11	
SELECTION	1155:18	1156:20	12	
KEYWORD	1155:18	1155:18	13	if
LEAF_NODE	1155:18	1155:18	14	if
LEAF_NODE	1155:21	1155:21	13	(
CONDITION	1155:22	1155:22	13	strlen ( pageOrientation )
EXPR	1155:22	1155:22	14	strlen ( pageOrientation )
FUNCTION_CALL	1155:22	1155:44	15	strlen ( pageOrientation )
CALLEE	1155:22	1155:22	16	strlen
LEAF_NODE	1155:22	1155:22	17	strlen
LEAF_NODE	1155:28	1155:28	16	(
ARGUMENT	1155:29	1155:29	16	pageOrientation
FIELD	1155:29	1155:29	17	pageOrientation
LEAF_NODE	1155:29	1155:29	18	pageOrientation
LEAF_NODE	1155:44	1155:44	16	)
LEAF_NODE	1155:45	1155:45	13	)
STATEMENTS	1156:20	1156:20	13	
EXPR_STATEMENT	1156:20	1156:78	14	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation ) ;
EXPR	1156:20	1156:20	15	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
FUNCTION_CALL	1156:20	1156:77	16	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
CALLEE	1156:20	1156:20	17	fprintf
LEAF_NODE	1156:20	1156:20	18	fprintf
LEAF_NODE	1156:28	1156:28	17	(
ARGUMENT	1156:29	1156:29	17	fd
FIELD	1156:29	1156:29	18	fd
LEAF_NODE	1156:29	1156:29	19	fd
LEAF_NODE	1156:31	1156:31	17	,
ARGUMENT	1156:33	1156:33	17	"%%%%PageOrientation: %s\n"
FIELD	1156:33	1156:33	18	"%%%%PageOrientation: %s\n"
LEAF_NODE	1156:33	1156:33	19	"%%%%PageOrientation: %s\n"
LEAF_NODE	1156:60	1156:60	17	,
ARGUMENT	1156:62	1156:62	17	pageOrientation
FIELD	1156:62	1156:62	18	pageOrientation
LEAF_NODE	1156:62	1156:62	19	pageOrientation
LEAF_NODE	1156:77	1156:77	17	)
LEAF_NODE	1156:78	1156:78	15	;
SELECTION	1157:18	1158:20	12	
KEYWORD	1157:18	1157:18	13	else
LEAF_NODE	1157:18	1157:18	14	else
STATEMENTS	1158:20	1158:20	13	
EXPR_STATEMENT	1158:20	1158:110	14	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( psheight > pswidth ) ? "Landscape" : "Portrait" ) ;
EXPR	1158:20	1158:20	15	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( psheight > pswidth ) ? "Landscape" : "Portrait" )
FUNCTION_CALL	1158:20	1158:109	16	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( psheight > pswidth ) ? "Landscape" : "Portrait" )
CALLEE	1158:20	1158:20	17	fprintf
LEAF_NODE	1158:20	1158:20	18	fprintf
LEAF_NODE	1158:28	1158:28	17	(
ARGUMENT	1158:29	1158:29	17	fd
FIELD	1158:29	1158:29	18	fd
LEAF_NODE	1158:29	1158:29	19	fd
LEAF_NODE	1158:31	1158:31	17	,
ARGUMENT	1158:33	1158:33	17	"%%%%PageOrientation: %s\n"
FIELD	1158:33	1158:33	18	"%%%%PageOrientation: %s\n"
LEAF_NODE	1158:33	1158:33	19	"%%%%PageOrientation: %s\n"
LEAF_NODE	1158:60	1158:60	17	,
ARGUMENT	1158:62	1158:62	17	( psheight > pswidth ) ? "Landscape" : "Portrait"
COND_EXPR	1158:62	1158:99	18	( psheight > pswidth ) ? "Landscape" : "Portrait"
CONDITION	1158:62	1158:81	19	( psheight > pswidth )
LEAF_NODE	1158:62	1158:62	20	(
FIELD	1158:63	1158:63	20	psheight
LEAF_NODE	1158:63	1158:63	21	psheight
REL_OPERATOR	1158:72	1158:72	20	>
LEAF_NODE	1158:72	1158:72	21	>
FIELD	1158:74	1158:74	20	pswidth
LEAF_NODE	1158:74	1158:74	21	pswidth
LEAF_NODE	1158:81	1158:81	20	)
LEAF_NODE	1158:83	1158:83	19	?
EXPR	1158:85	1158:85	19	"Landscape"
FIELD	1158:85	1158:85	20	"Landscape"
LEAF_NODE	1158:85	1158:85	21	"Landscape"
LEAF_NODE	1158:97	1158:97	19	:
FIELD	1158:99	1158:99	19	"Portrait"
LEAF_NODE	1158:99	1158:99	20	"Portrait"
LEAF_NODE	1158:109	1158:109	17	)
LEAF_NODE	1158:110	1158:110	15	;
EXPR_STATEMENT	1159:17	1159:98	12	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) psheight , ( long ) pswidth ) ;
EXPR	1159:17	1159:17	13	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) psheight , ( long ) pswidth )
FUNCTION_CALL	1159:17	1159:97	14	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) psheight , ( long ) pswidth )
CALLEE	1159:17	1159:17	15	fprintf
LEAF_NODE	1159:17	1159:17	16	fprintf
LEAF_NODE	1159:25	1159:25	15	(
ARGUMENT	1159:26	1159:26	15	fd
FIELD	1159:26	1159:26	16	fd
LEAF_NODE	1159:26	1159:26	17	fd
LEAF_NODE	1159:28	1159:28	15	,
ARGUMENT	1159:30	1159:30	15	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
FIELD	1159:30	1159:30	16	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1159:30	1159:30	17	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1159:66	1159:66	15	,
ARGUMENT	1159:68	1159:74	15	( long ) psheight
LEAF_NODE	1159:68	1159:68	16	(
TYPE_NAME	1159:69	1159:69	16	long
LEAF_NODE	1159:69	1159:69	17	long
LEAF_NODE	1159:73	1159:73	16	)
FIELD	1159:74	1159:74	16	psheight
LEAF_NODE	1159:74	1159:74	17	psheight
LEAF_NODE	1159:82	1159:82	15	,
ARGUMENT	1159:84	1159:90	15	( long ) pswidth
LEAF_NODE	1159:84	1159:84	16	(
TYPE_NAME	1159:85	1159:85	16	long
LEAF_NODE	1159:85	1159:85	17	long
LEAF_NODE	1159:89	1159:89	16	)
FIELD	1159:90	1159:90	16	pswidth
LEAF_NODE	1159:90	1159:90	17	pswidth
LEAF_NODE	1159:97	1159:97	15	)
LEAF_NODE	1159:98	1159:98	13	;
EXPR_STATEMENT	1160:18	1161:43	12	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , psheight , pswidth ) ;
EXPR	1160:18	1160:18	13	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , psheight , pswidth )
FUNCTION_CALL	1160:18	1161:42	14	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , psheight , pswidth )
CALLEE	1160:18	1160:18	15	fprintf
LEAF_NODE	1160:18	1160:18	16	fprintf
LEAF_NODE	1160:25	1160:25	15	(
ARGUMENT	1160:26	1160:26	15	fd
FIELD	1160:26	1160:26	16	fd
LEAF_NODE	1160:26	1160:26	17	fd
LEAF_NODE	1160:28	1160:28	15	,
ARGUMENT	1160:30	1160:30	15	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
FIELD	1160:30	1160:30	16	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1160:30	1160:30	17	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1160:100	1160:100	15	,
ARGUMENT	1161:25	1161:25	15	psheight
FIELD	1161:25	1161:25	16	psheight
LEAF_NODE	1161:25	1161:25	17	psheight
LEAF_NODE	1161:33	1161:33	15	,
ARGUMENT	1161:35	1161:35	15	pswidth
FIELD	1161:35	1161:35	16	pswidth
LEAF_NODE	1161:35	1161:35	17	pswidth
LEAF_NODE	1161:42	1161:42	15	)
LEAF_NODE	1161:43	1161:43	13	;
LEAF_NODE	1162:18	1162:18	11	}
SELECTION	1163:15	1164:18	9	
KEYWORD	1163:15	1163:15	10	else
LEAF_NODE	1163:15	1163:15	11	else
STATEMENTS	1164:18	1172:18	10	
LEAF_NODE	1164:18	1164:18	11	{
STATEMENTS	1165:18	1170:18	11	
SELECTION	1165:18	1166:20	12	
KEYWORD	1165:18	1165:18	13	if
LEAF_NODE	1165:18	1165:18	14	if
LEAF_NODE	1165:21	1165:21	13	(
CONDITION	1165:22	1165:22	13	strlen ( pageOrientation )
EXPR	1165:22	1165:22	14	strlen ( pageOrientation )
FUNCTION_CALL	1165:22	1165:44	15	strlen ( pageOrientation )
CALLEE	1165:22	1165:22	16	strlen
LEAF_NODE	1165:22	1165:22	17	strlen
LEAF_NODE	1165:28	1165:28	16	(
ARGUMENT	1165:29	1165:29	16	pageOrientation
FIELD	1165:29	1165:29	17	pageOrientation
LEAF_NODE	1165:29	1165:29	18	pageOrientation
LEAF_NODE	1165:44	1165:44	16	)
LEAF_NODE	1165:45	1165:45	13	)
STATEMENTS	1166:20	1166:20	13	
EXPR_STATEMENT	1166:20	1166:78	14	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation ) ;
EXPR	1166:20	1166:20	15	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
FUNCTION_CALL	1166:20	1166:77	16	fprintf ( fd , "%%%%PageOrientation: %s\n" , pageOrientation )
CALLEE	1166:20	1166:20	17	fprintf
LEAF_NODE	1166:20	1166:20	18	fprintf
LEAF_NODE	1166:28	1166:28	17	(
ARGUMENT	1166:29	1166:29	17	fd
FIELD	1166:29	1166:29	18	fd
LEAF_NODE	1166:29	1166:29	19	fd
LEAF_NODE	1166:31	1166:31	17	,
ARGUMENT	1166:33	1166:33	17	"%%%%PageOrientation: %s\n"
FIELD	1166:33	1166:33	18	"%%%%PageOrientation: %s\n"
LEAF_NODE	1166:33	1166:33	19	"%%%%PageOrientation: %s\n"
LEAF_NODE	1166:60	1166:60	17	,
ARGUMENT	1166:62	1166:62	17	pageOrientation
FIELD	1166:62	1166:62	18	pageOrientation
LEAF_NODE	1166:62	1166:62	19	pageOrientation
LEAF_NODE	1166:77	1166:77	17	)
LEAF_NODE	1166:78	1166:78	15	;
SELECTION	1167:18	1168:20	12	
KEYWORD	1167:18	1167:18	13	else
LEAF_NODE	1167:18	1167:18	14	else
STATEMENTS	1168:20	1168:20	13	
EXPR_STATEMENT	1168:20	1168:112	14	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( reqwidth > reqheight ) ? "Landscape" : "Portrait" ) ;
EXPR	1168:20	1168:20	15	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( reqwidth > reqheight ) ? "Landscape" : "Portrait" )
FUNCTION_CALL	1168:20	1168:111	16	fprintf ( fd , "%%%%PageOrientation: %s\n" , ( reqwidth > reqheight ) ? "Landscape" : "Portrait" )
CALLEE	1168:20	1168:20	17	fprintf
LEAF_NODE	1168:20	1168:20	18	fprintf
LEAF_NODE	1168:28	1168:28	17	(
ARGUMENT	1168:29	1168:29	17	fd
FIELD	1168:29	1168:29	18	fd
LEAF_NODE	1168:29	1168:29	19	fd
LEAF_NODE	1168:31	1168:31	17	,
ARGUMENT	1168:33	1168:33	17	"%%%%PageOrientation: %s\n"
FIELD	1168:33	1168:33	18	"%%%%PageOrientation: %s\n"
LEAF_NODE	1168:33	1168:33	19	"%%%%PageOrientation: %s\n"
LEAF_NODE	1168:60	1168:60	17	,
ARGUMENT	1168:62	1168:62	17	( reqwidth > reqheight ) ? "Landscape" : "Portrait"
COND_EXPR	1168:62	1168:101	18	( reqwidth > reqheight ) ? "Landscape" : "Portrait"
CONDITION	1168:62	1168:83	19	( reqwidth > reqheight )
LEAF_NODE	1168:62	1168:62	20	(
FIELD	1168:63	1168:63	20	reqwidth
LEAF_NODE	1168:63	1168:63	21	reqwidth
REL_OPERATOR	1168:72	1168:72	20	>
LEAF_NODE	1168:72	1168:72	21	>
FIELD	1168:74	1168:74	20	reqheight
LEAF_NODE	1168:74	1168:74	21	reqheight
LEAF_NODE	1168:83	1168:83	20	)
LEAF_NODE	1168:85	1168:85	19	?
EXPR	1168:87	1168:87	19	"Landscape"
FIELD	1168:87	1168:87	20	"Landscape"
LEAF_NODE	1168:87	1168:87	21	"Landscape"
LEAF_NODE	1168:99	1168:99	19	:
FIELD	1168:101	1168:101	19	"Portrait"
LEAF_NODE	1168:101	1168:101	20	"Portrait"
LEAF_NODE	1168:111	1168:111	17	)
LEAF_NODE	1168:112	1168:112	15	;
EXPR_STATEMENT	1169:17	1169:100	12	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) reqwidth , ( long ) reqheight ) ;
EXPR	1169:17	1169:17	13	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) reqwidth , ( long ) reqheight )
FUNCTION_CALL	1169:17	1169:99	14	fprintf ( fd , "%%%%PageBoundingBox: 0 0 %ld %ld\n" , ( long ) reqwidth , ( long ) reqheight )
CALLEE	1169:17	1169:17	15	fprintf
LEAF_NODE	1169:17	1169:17	16	fprintf
LEAF_NODE	1169:25	1169:25	15	(
ARGUMENT	1169:26	1169:26	15	fd
FIELD	1169:26	1169:26	16	fd
LEAF_NODE	1169:26	1169:26	17	fd
LEAF_NODE	1169:28	1169:28	15	,
ARGUMENT	1169:30	1169:30	15	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
FIELD	1169:30	1169:30	16	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1169:30	1169:30	17	"%%%%PageBoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1169:66	1169:66	15	,
ARGUMENT	1169:68	1169:74	15	( long ) reqwidth
LEAF_NODE	1169:68	1169:68	16	(
TYPE_NAME	1169:69	1169:69	16	long
LEAF_NODE	1169:69	1169:69	17	long
LEAF_NODE	1169:73	1169:73	16	)
FIELD	1169:74	1169:74	16	reqwidth
LEAF_NODE	1169:74	1169:74	17	reqwidth
LEAF_NODE	1169:82	1169:82	15	,
ARGUMENT	1169:84	1169:90	15	( long ) reqheight
LEAF_NODE	1169:84	1169:84	16	(
TYPE_NAME	1169:85	1169:85	16	long
LEAF_NODE	1169:85	1169:85	17	long
LEAF_NODE	1169:89	1169:89	16	)
FIELD	1169:90	1169:90	16	reqheight
LEAF_NODE	1169:90	1169:90	17	reqheight
LEAF_NODE	1169:99	1169:99	15	)
LEAF_NODE	1169:100	1169:100	13	;
EXPR_STATEMENT	1170:18	1171:46	12	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , reqwidth , reqheight ) ;
EXPR	1170:18	1170:18	13	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , reqwidth , reqheight )
FUNCTION_CALL	1170:18	1171:45	14	fprintf ( fd , "1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n" , reqwidth , reqheight )
CALLEE	1170:18	1170:18	15	fprintf
LEAF_NODE	1170:18	1170:18	16	fprintf
LEAF_NODE	1170:25	1170:25	15	(
ARGUMENT	1170:26	1170:26	15	fd
FIELD	1170:26	1170:26	16	fd
LEAF_NODE	1170:26	1170:26	17	fd
LEAF_NODE	1170:28	1170:28	15	,
ARGUMENT	1170:30	1170:30	15	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
FIELD	1170:30	1170:30	16	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1170:30	1170:30	17	"1 dict begin /PageSize [ %f %f ] def currentdict end setpagedevice\n"
LEAF_NODE	1170:100	1170:100	15	,
ARGUMENT	1171:26	1171:26	15	reqwidth
FIELD	1171:26	1171:26	16	reqwidth
LEAF_NODE	1171:26	1171:26	17	reqwidth
LEAF_NODE	1171:34	1171:34	15	,
ARGUMENT	1171:36	1171:36	15	reqheight
FIELD	1171:36	1171:36	16	reqheight
LEAF_NODE	1171:36	1171:36	17	reqheight
LEAF_NODE	1171:45	1171:45	15	)
LEAF_NODE	1171:46	1171:46	13	;
LEAF_NODE	1172:18	1172:18	11	}
LEAF_NODE	1173:15	1173:15	8	}
JUMP_STATEMENT	1174:13	1174:18	6	break DESTINATION ;
KEYWORD	1174:13	1174:13	7	break
LEAF_NODE	1174:13	1174:13	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1174:18	1174:18	7	;
LABEL	1175:4	1175:11	6	default :
LEAF_NODE	1175:4	1175:4	7	default
LEAF_NODE	1175:11	1175:11	7	:
EXPR_STATEMENT	1175:14	1175:71	6	TIFFError ( "psPageSize" , "Invalid rotation %d" , rotation ) ;
EXPR	1175:14	1175:14	7	TIFFError ( "psPageSize" , "Invalid rotation %d" , rotation )
FUNCTION_CALL	1175:14	1175:70	8	TIFFError ( "psPageSize" , "Invalid rotation %d" , rotation )
CALLEE	1175:14	1175:14	9	TIFFError
LEAF_NODE	1175:14	1175:14	10	TIFFError
LEAF_NODE	1175:24	1175:24	9	(
ARGUMENT	1175:25	1175:25	9	"psPageSize"
FIELD	1175:25	1175:25	10	"psPageSize"
LEAF_NODE	1175:25	1175:25	11	"psPageSize"
LEAF_NODE	1175:37	1175:37	9	,
ARGUMENT	1175:39	1175:39	9	"Invalid rotation %d"
FIELD	1175:39	1175:39	10	"Invalid rotation %d"
LEAF_NODE	1175:39	1175:39	11	"Invalid rotation %d"
LEAF_NODE	1175:60	1175:60	9	,
ARGUMENT	1175:62	1175:62	9	rotation
FIELD	1175:62	1175:62	10	rotation
LEAF_NODE	1175:62	1175:62	11	rotation
LEAF_NODE	1175:70	1175:70	9	)
LEAF_NODE	1175:71	1175:71	7	;
JUMP_STATEMENT	1176:6	1176:16	6	return ( 1 ) ;
KEYWORD	1176:6	1176:6	7	return
LEAF_NODE	1176:6	1176:6	8	return
DESTINATION	1176:13	1176:13	7	( 1 )
EXPR	1176:13	1176:15	8	( 1 )
LEAF_NODE	1176:13	1176:13	9	(
FIELD	1176:14	1176:14	9	1
LEAF_NODE	1176:14	1176:14	10	1
LEAF_NODE	1176:15	1176:15	9	)
LEAF_NODE	1176:16	1176:16	7	;
LEAF_NODE	1177:4	1177:4	5	}
EXPR_STATEMENT	1178:2	1178:76	3	fputs ( "<<\n  /Policies <<\n    /PageSize 3\n  >>\n>> setpagedevice\n" , fd ) ;
EXPR	1178:2	1178:2	4	fputs ( "<<\n  /Policies <<\n    /PageSize 3\n  >>\n>> setpagedevice\n" , fd )
FUNCTION_CALL	1178:2	1178:75	5	fputs ( "<<\n  /Policies <<\n    /PageSize 3\n  >>\n>> setpagedevice\n" , fd )
CALLEE	1178:2	1178:2	6	fputs
LEAF_NODE	1178:2	1178:2	7	fputs
LEAF_NODE	1178:7	1178:7	6	(
ARGUMENT	1178:8	1178:8	6	"<<\n  /Policies <<\n    /PageSize 3\n  >>\n>> setpagedevice\n"
FIELD	1178:8	1178:8	7	"<<\n  /Policies <<\n    /PageSize 3\n  >>\n>> setpagedevice\n"
LEAF_NODE	1178:8	1178:8	8	"<<\n  /Policies <<\n    /PageSize 3\n  >>\n>> setpagedevice\n"
LEAF_NODE	1178:71	1178:71	6	,
ARGUMENT	1178:73	1178:73	6	fd
FIELD	1178:73	1178:73	7	fd
LEAF_NODE	1178:73	1178:73	8	fd
LEAF_NODE	1178:75	1178:75	6	)
LEAF_NODE	1178:76	1178:76	4	;
JUMP_STATEMENT	1180:2	1180:12	3	return ( 0 ) ;
KEYWORD	1180:2	1180:2	4	return
LEAF_NODE	1180:2	1180:2	5	return
DESTINATION	1180:9	1180:9	4	( 0 )
EXPR	1180:9	1180:11	5	( 0 )
LEAF_NODE	1180:9	1180:9	6	(
FIELD	1180:10	1180:10	6	0
LEAF_NODE	1180:10	1180:10	7	0
LEAF_NODE	1180:11	1180:11	6	)
LEAF_NODE	1180:12	1180:12	4	;
LEAF_NODE	1181:2	1181:2	2	}
FUNCTION_DEF	1186:0	1243:2	1	
RETURN_TYPE	1186:0	1186:0	2	int
TYPE_NAME	1186:0	1186:0	3	int
LEAF_NODE	1186:0	1186:0	4	int
FUNCTION_NAME	1186:4	1186:4	2	psMaskImage
LEAF_NODE	1186:4	1186:4	3	psMaskImage
PARAMETER_LIST	1186:15	1190:60	2	( FILE * fd , TIFF * tif , int rotation , int center , int * npages , double pixwidth , double pixheight , double left_margin , double bottom_margin , double pgwidth , double pgheight , double pswidth , double psheight , double scale )
LEAF_NODE	1186:15	1186:15	3	(
PARAMETER_DECL	1186:16	1186:22	3	FILE * fd
TYPE	1186:16	1186:21	4	FILE *
TYPE_NAME	1186:16	1186:16	5	FILE
LEAF_NODE	1186:16	1186:16	6	FILE
POINTER	1186:21	1186:21	5	*
LEAF_NODE	1186:21	1186:21	6	*
NAME	1186:22	1186:22	4	fd
LEAF_NODE	1186:22	1186:22	5	fd
LEAF_NODE	1186:24	1186:24	3	,
PARAMETER_DECL	1186:26	1186:32	3	TIFF * tif
TYPE	1186:26	1186:31	4	TIFF *
TYPE_NAME	1186:26	1186:26	5	TIFF
LEAF_NODE	1186:26	1186:26	6	TIFF
POINTER	1186:31	1186:31	5	*
LEAF_NODE	1186:31	1186:31	6	*
NAME	1186:32	1186:32	4	tif
LEAF_NODE	1186:32	1186:32	5	tif
LEAF_NODE	1186:35	1186:35	3	,
PARAMETER_DECL	1186:37	1186:41	3	int rotation
TYPE	1186:37	1186:37	4	int
TYPE_NAME	1186:37	1186:37	5	int
LEAF_NODE	1186:37	1186:37	6	int
NAME	1186:41	1186:41	4	rotation
LEAF_NODE	1186:41	1186:41	5	rotation
LEAF_NODE	1186:49	1186:49	3	,
PARAMETER_DECL	1186:51	1186:55	3	int center
TYPE	1186:51	1186:51	4	int
TYPE_NAME	1186:51	1186:51	5	int
LEAF_NODE	1186:51	1186:51	6	int
NAME	1186:55	1186:55	4	center
LEAF_NODE	1186:55	1186:55	5	center
LEAF_NODE	1186:61	1186:61	3	,
PARAMETER_DECL	1187:16	1187:21	3	int * npages
TYPE	1187:16	1187:20	4	int *
TYPE_NAME	1187:16	1187:16	5	int
LEAF_NODE	1187:16	1187:16	6	int
POINTER	1187:20	1187:20	5	*
LEAF_NODE	1187:20	1187:20	6	*
NAME	1187:21	1187:21	4	npages
LEAF_NODE	1187:21	1187:21	5	npages
LEAF_NODE	1187:27	1187:27	3	,
PARAMETER_DECL	1187:29	1187:36	3	double pixwidth
TYPE	1187:29	1187:29	4	double
TYPE_NAME	1187:29	1187:29	5	double
LEAF_NODE	1187:29	1187:29	6	double
NAME	1187:36	1187:36	4	pixwidth
LEAF_NODE	1187:36	1187:36	5	pixwidth
LEAF_NODE	1187:44	1187:44	3	,
PARAMETER_DECL	1187:46	1187:53	3	double pixheight
TYPE	1187:46	1187:46	4	double
TYPE_NAME	1187:46	1187:46	5	double
LEAF_NODE	1187:46	1187:46	6	double
NAME	1187:53	1187:53	4	pixheight
LEAF_NODE	1187:53	1187:53	5	pixheight
LEAF_NODE	1187:62	1187:62	3	,
PARAMETER_DECL	1188:15	1188:22	3	double left_margin
TYPE	1188:15	1188:15	4	double
TYPE_NAME	1188:15	1188:15	5	double
LEAF_NODE	1188:15	1188:15	6	double
NAME	1188:22	1188:22	4	left_margin
LEAF_NODE	1188:22	1188:22	5	left_margin
LEAF_NODE	1188:33	1188:33	3	,
PARAMETER_DECL	1188:35	1188:42	3	double bottom_margin
TYPE	1188:35	1188:35	4	double
TYPE_NAME	1188:35	1188:35	5	double
LEAF_NODE	1188:35	1188:35	6	double
NAME	1188:42	1188:42	4	bottom_margin
LEAF_NODE	1188:42	1188:42	5	bottom_margin
LEAF_NODE	1188:55	1188:55	3	,
PARAMETER_DECL	1189:16	1189:23	3	double pgwidth
TYPE	1189:16	1189:16	4	double
TYPE_NAME	1189:16	1189:16	5	double
LEAF_NODE	1189:16	1189:16	6	double
NAME	1189:23	1189:23	4	pgwidth
LEAF_NODE	1189:23	1189:23	5	pgwidth
LEAF_NODE	1189:30	1189:30	3	,
PARAMETER_DECL	1189:32	1189:39	3	double pgheight
TYPE	1189:32	1189:32	4	double
TYPE_NAME	1189:32	1189:32	5	double
LEAF_NODE	1189:32	1189:32	6	double
NAME	1189:39	1189:39	4	pgheight
LEAF_NODE	1189:39	1189:39	5	pgheight
LEAF_NODE	1189:47	1189:47	3	,
PARAMETER_DECL	1190:15	1190:22	3	double pswidth
TYPE	1190:15	1190:15	4	double
TYPE_NAME	1190:15	1190:15	5	double
LEAF_NODE	1190:15	1190:15	6	double
NAME	1190:22	1190:22	4	pswidth
LEAF_NODE	1190:22	1190:22	5	pswidth
LEAF_NODE	1190:29	1190:29	3	,
PARAMETER_DECL	1190:31	1190:38	3	double psheight
TYPE	1190:31	1190:31	4	double
TYPE_NAME	1190:31	1190:31	5	double
LEAF_NODE	1190:31	1190:31	6	double
NAME	1190:38	1190:38	4	psheight
LEAF_NODE	1190:38	1190:38	5	psheight
LEAF_NODE	1190:46	1190:46	3	,
PARAMETER_DECL	1190:48	1190:55	3	double scale
TYPE	1190:48	1190:48	4	double
TYPE_NAME	1190:48	1190:48	5	double
LEAF_NODE	1190:48	1190:48	6	double
NAME	1190:55	1190:55	4	scale
LEAF_NODE	1190:55	1190:55	5	scale
LEAF_NODE	1190:60	1190:60	3	)
LEAF_NODE	1191:2	1191:2	2	{
STATEMENTS	1192:2	1242:16	2	
SIMPLE_DECL	1192:2	1192:10	3	int i , int j ;
INIT_DECL_LIST	1192:2	1192:2	4	int i , int j
VAR_DECL	1192:2	1192:6	5	int i
TYPE	1192:2	1192:2	6	int
TYPE_NAME	1192:2	1192:2	7	int
LEAF_NODE	1192:2	1192:2	8	int
NAME	1192:6	1192:6	6	i
LEAF_NODE	1192:6	1192:6	7	i
LEAF_NODE	1192:7	1192:7	5	,
VAR_DECL	1192:2	1192:9	5	int j
TYPE	1192:2	1192:2	6	int
TYPE_NAME	1192:2	1192:2	7	int
LEAF_NODE	1192:2	1192:2	8	int
NAME	1192:9	1192:9	6	j
LEAF_NODE	1192:9	1192:9	7	j
LEAF_NODE	1192:10	1192:10	4	;
SIMPLE_DECL	1193:2	1193:30	3	int ximages ; ximages = 1 , int yimages ; yimages = 1 ;
INIT_DECL_LIST	1193:2	1193:2	4	int ximages ; ximages = 1 , int yimages ; yimages = 1
VAR_DECL	1193:2	1193:6	5	int ximages ; ximages = 1
TYPE	1193:2	1193:2	6	int
TYPE_NAME	1193:2	1193:2	7	int
LEAF_NODE	1193:2	1193:2	8	int
NAME	1193:6	1193:6	6	ximages
LEAF_NODE	1193:6	1193:6	7	ximages
LEAF_NODE	0:0	0:0	6	;
INIT	1193:6	1193:6	6	ximages = 1
ASSIGN	1193:6	1193:16	7	ximages = 1
LVAL	1193:6	1193:6	8	ximages
NAME	1193:6	1193:6	9	ximages
LEAF_NODE	1193:6	1193:6	10	ximages
ASSIGN_OP	1193:14	1193:14	8	=
LEAF_NODE	1193:14	1193:14	9	=
RVAL	1193:16	1193:16	8	1
FIELD	1193:16	1193:16	9	1
LEAF_NODE	1193:16	1193:16	10	1
LEAF_NODE	1193:17	1193:17	5	,
VAR_DECL	1193:2	1193:19	5	int yimages ; yimages = 1
TYPE	1193:2	1193:2	6	int
TYPE_NAME	1193:2	1193:2	7	int
LEAF_NODE	1193:2	1193:2	8	int
NAME	1193:19	1193:19	6	yimages
LEAF_NODE	1193:19	1193:19	7	yimages
LEAF_NODE	0:0	0:0	6	;
INIT	1193:19	1193:19	6	yimages = 1
ASSIGN	1193:19	1193:29	7	yimages = 1
LVAL	1193:19	1193:19	8	yimages
NAME	1193:19	1193:19	9	yimages
LEAF_NODE	1193:19	1193:19	10	yimages
ASSIGN_OP	1193:27	1193:27	8	=
LEAF_NODE	1193:27	1193:27	9	=
RVAL	1193:29	1193:29	8	1
FIELD	1193:29	1193:29	9	1
LEAF_NODE	1193:29	1193:29	10	1
LEAF_NODE	1193:30	1193:30	4	;
SIMPLE_DECL	1194:2	1194:21	3	int pages ; pages = * npages ;
VAR_DECL	1194:2	1194:6	4	int pages ; pages = * npages
TYPE	1194:2	1194:2	5	int
TYPE_NAME	1194:2	1194:2	6	int
LEAF_NODE	1194:2	1194:2	7	int
NAME	1194:6	1194:6	5	pages
LEAF_NODE	1194:6	1194:6	6	pages
LEAF_NODE	0:0	0:0	5	;
INIT	1194:6	1194:6	5	pages = * npages
ASSIGN	1194:6	1194:14	6	pages = * npages
LVAL	1194:6	1194:6	7	pages
NAME	1194:6	1194:6	8	pages
LEAF_NODE	1194:6	1194:6	9	pages
ASSIGN_OP	1194:12	1194:12	7	=
LEAF_NODE	1194:12	1194:12	8	=
RVAL	1194:14	1194:14	7	* npages
UNARY_EXPR	1194:14	1194:15	8	* npages
UNARY_OPERATOR	1194:14	1194:14	9	*
LEAF_NODE	1194:14	1194:14	10	*
FIELD	1194:15	1194:15	9	npages
LEAF_NODE	1194:15	1194:15	10	npages
LEAF_NODE	1194:21	1194:21	4	;
SIMPLE_DECL	1195:2	1195:23	3	double view_width ; view_width = 0 ;
VAR_DECL	1195:2	1195:9	4	double view_width ; view_width = 0
TYPE	1195:2	1195:2	5	double
TYPE_NAME	1195:2	1195:2	6	double
LEAF_NODE	1195:2	1195:2	7	double
NAME	1195:9	1195:9	5	view_width
LEAF_NODE	1195:9	1195:9	6	view_width
LEAF_NODE	0:0	0:0	5	;
INIT	1195:9	1195:9	5	view_width = 0
ASSIGN	1195:9	1195:22	6	view_width = 0
LVAL	1195:9	1195:9	7	view_width
NAME	1195:9	1195:9	8	view_width
LEAF_NODE	1195:9	1195:9	9	view_width
ASSIGN_OP	1195:20	1195:20	7	=
LEAF_NODE	1195:20	1195:20	8	=
RVAL	1195:22	1195:22	7	0
FIELD	1195:22	1195:22	8	0
LEAF_NODE	1195:22	1195:22	9	0
LEAF_NODE	1195:23	1195:23	4	;
SIMPLE_DECL	1196:2	1196:24	3	double view_height ; view_height = 0 ;
VAR_DECL	1196:2	1196:9	4	double view_height ; view_height = 0
TYPE	1196:2	1196:2	5	double
TYPE_NAME	1196:2	1196:2	6	double
LEAF_NODE	1196:2	1196:2	7	double
NAME	1196:9	1196:9	5	view_height
LEAF_NODE	1196:9	1196:9	6	view_height
LEAF_NODE	0:0	0:0	5	;
INIT	1196:9	1196:9	5	view_height = 0
ASSIGN	1196:9	1196:23	6	view_height = 0
LVAL	1196:9	1196:9	7	view_height
NAME	1196:9	1196:9	8	view_height
LEAF_NODE	1196:9	1196:9	9	view_height
ASSIGN_OP	1196:21	1196:21	7	=
LEAF_NODE	1196:21	1196:21	8	=
RVAL	1196:23	1196:23	7	0
FIELD	1196:23	1196:23	8	0
LEAF_NODE	1196:23	1196:23	9	0
LEAF_NODE	1196:24	1196:24	4	;
SELECTION	1198:2	1199:4	3	
KEYWORD	1198:2	1198:2	4	if
LEAF_NODE	1198:2	1198:2	5	if
LEAF_NODE	1198:5	1198:5	4	(
CONDITION	1198:6	1198:6	4	get_viewport ( pgwidth , pgheight , pswidth , psheight , & view_width , & view_height , rotation )
EXPR	1198:6	1198:6	5	get_viewport ( pgwidth , pgheight , pswidth , psheight , & view_width , & view_height , rotation )
FUNCTION_CALL	1198:6	1198:93	6	get_viewport ( pgwidth , pgheight , pswidth , psheight , & view_width , & view_height , rotation )
CALLEE	1198:6	1198:6	7	get_viewport
LEAF_NODE	1198:6	1198:6	8	get_viewport
LEAF_NODE	1198:19	1198:19	7	(
ARGUMENT	1198:20	1198:20	7	pgwidth
FIELD	1198:20	1198:20	8	pgwidth
LEAF_NODE	1198:20	1198:20	9	pgwidth
LEAF_NODE	1198:27	1198:27	7	,
ARGUMENT	1198:29	1198:29	7	pgheight
FIELD	1198:29	1198:29	8	pgheight
LEAF_NODE	1198:29	1198:29	9	pgheight
LEAF_NODE	1198:37	1198:37	7	,
ARGUMENT	1198:39	1198:39	7	pswidth
FIELD	1198:39	1198:39	8	pswidth
LEAF_NODE	1198:39	1198:39	9	pswidth
LEAF_NODE	1198:46	1198:46	7	,
ARGUMENT	1198:48	1198:48	7	psheight
FIELD	1198:48	1198:48	8	psheight
LEAF_NODE	1198:48	1198:48	9	psheight
LEAF_NODE	1198:56	1198:56	7	,
ARGUMENT	1198:58	1198:58	7	& view_width
UNARY_EXPR	1198:58	1198:59	8	& view_width
UNARY_OPERATOR	1198:58	1198:58	9	&
LEAF_NODE	1198:58	1198:58	10	&
FIELD	1198:59	1198:59	9	view_width
LEAF_NODE	1198:59	1198:59	10	view_width
LEAF_NODE	1198:69	1198:69	7	,
ARGUMENT	1198:71	1198:71	7	& view_height
UNARY_EXPR	1198:71	1198:72	8	& view_height
UNARY_OPERATOR	1198:71	1198:71	9	&
LEAF_NODE	1198:71	1198:71	10	&
FIELD	1198:72	1198:72	9	view_height
LEAF_NODE	1198:72	1198:72	10	view_height
LEAF_NODE	1198:83	1198:83	7	,
ARGUMENT	1198:85	1198:85	7	rotation
FIELD	1198:85	1198:85	8	rotation
LEAF_NODE	1198:85	1198:85	9	rotation
LEAF_NODE	1198:93	1198:93	7	)
LEAF_NODE	1198:94	1198:94	4	)
STATEMENTS	1199:4	1202:4	4	
LEAF_NODE	1199:4	1199:4	5	{
STATEMENTS	1200:4	1201:4	5	
EXPR_STATEMENT	1200:4	1200:62	6	TIFFError ( "get_viewport" , "Unable to set image viewport" ) ;
EXPR	1200:4	1200:4	7	TIFFError ( "get_viewport" , "Unable to set image viewport" )
FUNCTION_CALL	1200:4	1200:61	8	TIFFError ( "get_viewport" , "Unable to set image viewport" )
CALLEE	1200:4	1200:4	9	TIFFError
LEAF_NODE	1200:4	1200:4	10	TIFFError
LEAF_NODE	1200:14	1200:14	9	(
ARGUMENT	1200:15	1200:15	9	"get_viewport"
FIELD	1200:15	1200:15	10	"get_viewport"
LEAF_NODE	1200:15	1200:15	11	"get_viewport"
LEAF_NODE	1200:29	1200:29	9	,
ARGUMENT	1200:31	1200:31	9	"Unable to set image viewport"
FIELD	1200:31	1200:31	10	"Unable to set image viewport"
LEAF_NODE	1200:31	1200:31	11	"Unable to set image viewport"
LEAF_NODE	1200:61	1200:61	9	)
LEAF_NODE	1200:62	1200:62	7	;
JUMP_STATEMENT	1201:4	1201:15	6	return ( - 1 ) ;
KEYWORD	1201:4	1201:4	7	return
LEAF_NODE	1201:4	1201:4	8	return
DESTINATION	1201:11	1201:11	7	( - 1 )
EXPR	1201:11	1201:14	8	( - 1 )
LEAF_NODE	1201:11	1201:11	9	(
UNARY_EXPR	1201:12	1201:13	9	- 1
UNARY_OPERATOR	1201:12	1201:12	10	-
LEAF_NODE	1201:12	1201:12	11	-
FIELD	1201:13	1201:13	10	1
LEAF_NODE	1201:13	1201:13	11	1
LEAF_NODE	1201:14	1201:14	9	)
LEAF_NODE	1201:15	1201:15	7	;
LEAF_NODE	1202:4	1202:4	5	}
SELECTION	1204:2	1206:4	3	
KEYWORD	1204:2	1204:2	4	if
LEAF_NODE	1204:2	1204:2	5	if
LEAF_NODE	1204:5	1204:5	4	(
CONDITION	1204:6	1204:6	4	get_subimage_count ( pgwidth , pgheight , pswidth , psheight , & ximages , & yimages , rotation , scale ) < 1
EXPR	1204:6	1205:63	5	get_subimage_count ( pgwidth , pgheight , pswidth , psheight , & ximages , & yimages , rotation , scale ) < 1
FUNCTION_CALL	1204:6	1205:59	6	get_subimage_count ( pgwidth , pgheight , pswidth , psheight , & ximages , & yimages , rotation , scale )
CALLEE	1204:6	1204:6	7	get_subimage_count
LEAF_NODE	1204:6	1204:6	8	get_subimage_count
LEAF_NODE	1204:24	1204:24	7	(
ARGUMENT	1204:25	1204:25	7	pgwidth
FIELD	1204:25	1204:25	8	pgwidth
LEAF_NODE	1204:25	1204:25	9	pgwidth
LEAF_NODE	1204:32	1204:32	7	,
ARGUMENT	1204:34	1204:34	7	pgheight
FIELD	1204:34	1204:34	8	pgheight
LEAF_NODE	1204:34	1204:34	9	pgheight
LEAF_NODE	1204:42	1204:42	7	,
ARGUMENT	1204:44	1204:44	7	pswidth
FIELD	1204:44	1204:44	8	pswidth
LEAF_NODE	1204:44	1204:44	9	pswidth
LEAF_NODE	1204:51	1204:51	7	,
ARGUMENT	1204:53	1204:53	7	psheight
FIELD	1204:53	1204:53	8	psheight
LEAF_NODE	1204:53	1204:53	9	psheight
LEAF_NODE	1204:61	1204:61	7	,
ARGUMENT	1205:24	1205:24	7	& ximages
UNARY_EXPR	1205:24	1205:25	8	& ximages
UNARY_OPERATOR	1205:24	1205:24	9	&
LEAF_NODE	1205:24	1205:24	10	&
FIELD	1205:25	1205:25	9	ximages
LEAF_NODE	1205:25	1205:25	10	ximages
LEAF_NODE	1205:32	1205:32	7	,
ARGUMENT	1205:34	1205:34	7	& yimages
UNARY_EXPR	1205:34	1205:35	8	& yimages
UNARY_OPERATOR	1205:34	1205:34	9	&
LEAF_NODE	1205:34	1205:34	10	&
FIELD	1205:35	1205:35	9	yimages
LEAF_NODE	1205:35	1205:35	10	yimages
LEAF_NODE	1205:42	1205:42	7	,
ARGUMENT	1205:44	1205:44	7	rotation
FIELD	1205:44	1205:44	8	rotation
LEAF_NODE	1205:44	1205:44	9	rotation
LEAF_NODE	1205:52	1205:52	7	,
ARGUMENT	1205:54	1205:54	7	scale
FIELD	1205:54	1205:54	8	scale
LEAF_NODE	1205:54	1205:54	9	scale
LEAF_NODE	1205:59	1205:59	7	)
REL_OPERATOR	1205:61	1205:61	6	<
LEAF_NODE	1205:61	1205:61	7	<
FIELD	1205:63	1205:63	6	1
LEAF_NODE	1205:63	1205:63	7	1
LEAF_NODE	1205:64	1205:64	4	)
STATEMENTS	1206:4	1209:4	4	
LEAF_NODE	1206:4	1206:4	5	{
STATEMENTS	1207:4	1208:4	5	
EXPR_STATEMENT	1207:4	1207:97	6	TIFFError ( "get_subimage_count" , "Invalid image count: %d columns, %d rows" , ximages , yimages ) ;
EXPR	1207:4	1207:4	7	TIFFError ( "get_subimage_count" , "Invalid image count: %d columns, %d rows" , ximages , yimages )
FUNCTION_CALL	1207:4	1207:96	8	TIFFError ( "get_subimage_count" , "Invalid image count: %d columns, %d rows" , ximages , yimages )
CALLEE	1207:4	1207:4	9	TIFFError
LEAF_NODE	1207:4	1207:4	10	TIFFError
LEAF_NODE	1207:13	1207:13	9	(
ARGUMENT	1207:14	1207:14	9	"get_subimage_count"
FIELD	1207:14	1207:14	10	"get_subimage_count"
LEAF_NODE	1207:14	1207:14	11	"get_subimage_count"
LEAF_NODE	1207:34	1207:34	9	,
ARGUMENT	1207:36	1207:36	9	"Invalid image count: %d columns, %d rows"
FIELD	1207:36	1207:36	10	"Invalid image count: %d columns, %d rows"
LEAF_NODE	1207:36	1207:36	11	"Invalid image count: %d columns, %d rows"
LEAF_NODE	1207:78	1207:78	9	,
ARGUMENT	1207:80	1207:80	9	ximages
FIELD	1207:80	1207:80	10	ximages
LEAF_NODE	1207:80	1207:80	11	ximages
LEAF_NODE	1207:87	1207:87	9	,
ARGUMENT	1207:89	1207:89	9	yimages
FIELD	1207:89	1207:89	10	yimages
LEAF_NODE	1207:89	1207:89	11	yimages
LEAF_NODE	1207:96	1207:96	9	)
LEAF_NODE	1207:97	1207:97	7	;
JUMP_STATEMENT	1208:4	1208:15	6	return ( - 1 ) ;
KEYWORD	1208:4	1208:4	7	return
LEAF_NODE	1208:4	1208:4	8	return
DESTINATION	1208:11	1208:11	7	( - 1 )
EXPR	1208:11	1208:14	8	( - 1 )
LEAF_NODE	1208:11	1208:11	9	(
UNARY_EXPR	1208:12	1208:13	9	- 1
UNARY_OPERATOR	1208:12	1208:12	10	-
LEAF_NODE	1208:12	1208:12	11	-
FIELD	1208:13	1208:13	10	1
LEAF_NODE	1208:13	1208:13	11	1
LEAF_NODE	1208:14	1208:14	9	)
LEAF_NODE	1208:15	1208:15	7	;
LEAF_NODE	1209:4	1209:4	5	}
ITERATION	1211:2	1212:4	3	
KEYWORD	1211:2	1211:2	4	for
LEAF_NODE	1211:2	1211:2	5	for
LEAF_NODE	1211:6	1211:6	4	(
FOR_INIT	1211:7	1211:12	4	i = 0 ;
EXPR	1211:7	1211:7	5	i = 0
ASSIGN	1211:7	1211:11	6	i = 0
LVAL	1211:7	1211:7	7	i
FIELD	1211:7	1211:7	8	i
LEAF_NODE	1211:7	1211:7	9	i
ASSIGN_OP	1211:9	1211:9	7	=
LEAF_NODE	1211:9	1211:9	8	=
RVAL	1211:11	1211:11	7	0
FIELD	1211:11	1211:11	8	0
LEAF_NODE	1211:11	1211:11	9	0
LEAF_NODE	1211:12	1211:12	5	;
CONDITION	1211:14	1211:14	4	i < yimages
EXPR	1211:14	1211:18	5	i < yimages
FIELD	1211:14	1211:14	6	i
LEAF_NODE	1211:14	1211:14	7	i
REL_OPERATOR	1211:16	1211:16	6	<
LEAF_NODE	1211:16	1211:16	7	<
FIELD	1211:18	1211:18	6	yimages
LEAF_NODE	1211:18	1211:18	7	yimages
LEAF_NODE	1211:25	1211:25	4	;
FOR_EXPR	1211:27	1211:27	4	i ++
EXPR	1211:27	1211:27	5	i ++
FIELD	1211:27	1211:28	6	i ++
LEAF_NODE	1211:27	1211:27	7	i
LEAF_NODE	1211:28	1211:28	7	++
LEAF_NODE	1211:30	1211:30	4	)
STATEMENTS	1212:4	1240:4	4	
LEAF_NODE	1212:4	1212:4	5	{
STATEMENTS	1213:4	1213:4	5	
ITERATION	1213:4	1214:7	6	
KEYWORD	1213:4	1213:4	7	for
LEAF_NODE	1213:4	1213:4	8	for
LEAF_NODE	1213:8	1213:8	7	(
FOR_INIT	1213:9	1213:14	7	j = 0 ;
EXPR	1213:9	1213:9	8	j = 0
ASSIGN	1213:9	1213:13	9	j = 0
LVAL	1213:9	1213:9	10	j
FIELD	1213:9	1213:9	11	j
LEAF_NODE	1213:9	1213:9	12	j
ASSIGN_OP	1213:11	1213:11	10	=
LEAF_NODE	1213:11	1213:11	11	=
RVAL	1213:13	1213:13	10	0
FIELD	1213:13	1213:13	11	0
LEAF_NODE	1213:13	1213:13	12	0
LEAF_NODE	1213:14	1213:14	8	;
CONDITION	1213:16	1213:16	7	j < ximages
EXPR	1213:16	1213:20	8	j < ximages
FIELD	1213:16	1213:16	9	j
LEAF_NODE	1213:16	1213:16	10	j
REL_OPERATOR	1213:18	1213:18	9	<
LEAF_NODE	1213:18	1213:18	10	<
FIELD	1213:20	1213:20	9	ximages
LEAF_NODE	1213:20	1213:20	10	ximages
LEAF_NODE	1213:27	1213:27	7	;
FOR_EXPR	1213:29	1213:29	7	j ++
EXPR	1213:29	1213:29	8	j ++
FIELD	1213:29	1213:30	9	j ++
LEAF_NODE	1213:29	1213:29	10	j
LEAF_NODE	1213:30	1213:30	10	++
LEAF_NODE	1213:32	1213:32	7	)
STATEMENTS	1214:7	1239:7	7	
LEAF_NODE	1214:7	1214:7	8	{
STATEMENTS	1215:7	1238:7	8	
EXPR_STATEMENT	1215:7	1215:14	9	pages ++ ;
EXPR	1215:7	1215:7	10	pages ++
FIELD	1215:7	1215:12	11	pages ++
LEAF_NODE	1215:7	1215:7	12	pages
LEAF_NODE	1215:12	1215:12	12	++
LEAF_NODE	1215:14	1215:14	10	;
EXPR_STATEMENT	1216:7	1216:22	9	* npages = pages ;
EXPR	1216:7	1216:7	10	* npages = pages
ASSIGN	1216:7	1216:17	11	* npages = pages
LVAL	1216:7	1216:7	12	* npages
UNARY_EXPR	1216:7	1216:8	13	* npages
UNARY_OPERATOR	1216:7	1216:7	14	*
LEAF_NODE	1216:7	1216:7	15	*
FIELD	1216:8	1216:8	14	npages
LEAF_NODE	1216:8	1216:8	15	npages
ASSIGN_OP	1216:15	1216:15	12	=
LEAF_NODE	1216:15	1216:15	13	=
RVAL	1216:17	1216:17	12	pages
FIELD	1216:17	1216:17	13	pages
LEAF_NODE	1216:17	1216:17	14	pages
LEAF_NODE	1216:22	1216:22	10	;
EXPR_STATEMENT	1217:7	1217:53	9	fprintf ( fd , "%%%%Page: %d %d\n" , pages , pages ) ;
EXPR	1217:7	1217:7	10	fprintf ( fd , "%%%%Page: %d %d\n" , pages , pages )
FUNCTION_CALL	1217:7	1217:52	11	fprintf ( fd , "%%%%Page: %d %d\n" , pages , pages )
CALLEE	1217:7	1217:7	12	fprintf
LEAF_NODE	1217:7	1217:7	13	fprintf
LEAF_NODE	1217:14	1217:14	12	(
ARGUMENT	1217:15	1217:15	12	fd
FIELD	1217:15	1217:15	13	fd
LEAF_NODE	1217:15	1217:15	14	fd
LEAF_NODE	1217:17	1217:17	12	,
ARGUMENT	1217:19	1217:19	12	"%%%%Page: %d %d\n"
FIELD	1217:19	1217:19	13	"%%%%Page: %d %d\n"
LEAF_NODE	1217:19	1217:19	14	"%%%%Page: %d %d\n"
LEAF_NODE	1217:38	1217:38	12	,
ARGUMENT	1217:40	1217:40	12	pages
FIELD	1217:40	1217:40	13	pages
LEAF_NODE	1217:40	1217:40	14	pages
LEAF_NODE	1217:45	1217:45	12	,
ARGUMENT	1217:47	1217:47	12	pages
FIELD	1217:47	1217:47	13	pages
LEAF_NODE	1217:47	1217:47	14	pages
LEAF_NODE	1217:52	1217:52	12	)
LEAF_NODE	1217:53	1217:53	10	;
SELECTION	1220:7	1221:9	9	
KEYWORD	1220:7	1220:7	10	if
LEAF_NODE	1220:7	1220:7	11	if
LEAF_NODE	1220:10	1220:10	10	(
CONDITION	1220:11	1220:11	10	! generateEPSF && ( level2 || level3 )
EXPR	1220:11	1220:11	11	! generateEPSF && ( level2 || level3 )
AND	1220:11	1220:28	12	! generateEPSF && ( level2 || level3 )
EXPR	1220:11	1220:11	13	! generateEPSF
UNARY_EXPR	1220:11	1220:12	14	! generateEPSF
UNARY_OPERATOR	1220:11	1220:11	15	!
LEAF_NODE	1220:11	1220:11	16	!
FIELD	1220:12	1220:12	15	generateEPSF
LEAF_NODE	1220:12	1220:12	16	generateEPSF
LEAF_NODE	1220:25	1220:25	13	&&
EXPR	1220:28	1220:47	13	( level2 || level3 )
LEAF_NODE	1220:28	1220:28	14	(
OR	1220:30	1220:40	14	level2 || level3
EXPR	1220:30	1220:30	15	level2
FIELD	1220:30	1220:30	16	level2
LEAF_NODE	1220:30	1220:30	17	level2
LEAF_NODE	1220:37	1220:37	15	||
EXPR	1220:40	1220:40	15	level3
FIELD	1220:40	1220:40	16	level3
LEAF_NODE	1220:40	1220:40	17	level3
LEAF_NODE	1220:47	1220:47	14	)
LEAF_NODE	1220:48	1220:48	10	)
STATEMENTS	1221:9	1225:8	10	
LEAF_NODE	1221:9	1221:9	11	{
STATEMENTS	1222:9	1222:9	11	
SELECTION	1222:9	1224:11	12	
KEYWORD	1222:9	1222:9	13	if
LEAF_NODE	1222:9	1222:9	14	if
LEAF_NODE	1222:12	1222:12	13	(
CONDITION	1222:13	1222:13	13	psPageSize ( fd , rotation , pgwidth , pgheight , view_width , view_height , pswidth , psheight )
EXPR	1222:13	1222:13	14	psPageSize ( fd , rotation , pgwidth , pgheight , view_width , view_height , pswidth , psheight )
FUNCTION_CALL	1222:13	1223:66	15	psPageSize ( fd , rotation , pgwidth , pgheight , view_width , view_height , pswidth , psheight )
CALLEE	1222:13	1222:13	16	psPageSize
LEAF_NODE	1222:13	1222:13	17	psPageSize
LEAF_NODE	1222:23	1222:23	16	(
ARGUMENT	1222:24	1222:24	16	fd
FIELD	1222:24	1222:24	17	fd
LEAF_NODE	1222:24	1222:24	18	fd
LEAF_NODE	1222:26	1222:26	16	,
ARGUMENT	1222:28	1222:28	16	rotation
FIELD	1222:28	1222:28	17	rotation
LEAF_NODE	1222:28	1222:28	18	rotation
LEAF_NODE	1222:36	1222:36	16	,
ARGUMENT	1222:38	1222:38	16	pgwidth
FIELD	1222:38	1222:38	17	pgwidth
LEAF_NODE	1222:38	1222:38	18	pgwidth
LEAF_NODE	1222:45	1222:45	16	,
ARGUMENT	1222:47	1222:47	16	pgheight
FIELD	1222:47	1222:47	17	pgheight
LEAF_NODE	1222:47	1222:47	18	pgheight
LEAF_NODE	1222:55	1222:55	16	,
ARGUMENT	1223:24	1223:24	16	view_width
FIELD	1223:24	1223:24	17	view_width
LEAF_NODE	1223:24	1223:24	18	view_width
LEAF_NODE	1223:34	1223:34	16	,
ARGUMENT	1223:36	1223:36	16	view_height
FIELD	1223:36	1223:36	17	view_height
LEAF_NODE	1223:36	1223:36	18	view_height
LEAF_NODE	1223:47	1223:47	16	,
ARGUMENT	1223:49	1223:49	16	pswidth
FIELD	1223:49	1223:49	17	pswidth
LEAF_NODE	1223:49	1223:49	18	pswidth
LEAF_NODE	1223:56	1223:56	16	,
ARGUMENT	1223:58	1223:58	16	psheight
FIELD	1223:58	1223:58	17	psheight
LEAF_NODE	1223:58	1223:58	18	psheight
LEAF_NODE	1223:66	1223:66	16	)
LEAF_NODE	1223:67	1223:67	13	)
STATEMENTS	1224:11	1224:11	13	
JUMP_STATEMENT	1224:11	1224:22	14	return ( - 1 ) ;
KEYWORD	1224:11	1224:11	15	return
LEAF_NODE	1224:11	1224:11	16	return
DESTINATION	1224:18	1224:18	15	( - 1 )
EXPR	1224:18	1224:21	16	( - 1 )
LEAF_NODE	1224:18	1224:18	17	(
UNARY_EXPR	1224:19	1224:20	17	- 1
UNARY_OPERATOR	1224:19	1224:19	18	-
LEAF_NODE	1224:19	1224:19	19	-
FIELD	1224:20	1224:20	18	1
LEAF_NODE	1224:20	1224:20	19	1
LEAF_NODE	1224:21	1224:21	17	)
LEAF_NODE	1224:22	1224:22	15	;
LEAF_NODE	1225:8	1225:8	11	}
EXPR_STATEMENT	1226:7	1226:29	9	fprintf ( fd , "gsave\n" ) ;
EXPR	1226:7	1226:7	10	fprintf ( fd , "gsave\n" )
FUNCTION_CALL	1226:7	1226:28	11	fprintf ( fd , "gsave\n" )
CALLEE	1226:7	1226:7	12	fprintf
LEAF_NODE	1226:7	1226:7	13	fprintf
LEAF_NODE	1226:14	1226:14	12	(
ARGUMENT	1226:15	1226:15	12	fd
FIELD	1226:15	1226:15	13	fd
LEAF_NODE	1226:15	1226:15	14	fd
LEAF_NODE	1226:17	1226:17	12	,
ARGUMENT	1226:19	1226:19	12	"gsave\n"
FIELD	1226:19	1226:19	13	"gsave\n"
LEAF_NODE	1226:19	1226:19	14	"gsave\n"
LEAF_NODE	1226:28	1226:28	12	)
LEAF_NODE	1226:29	1226:29	10	;
EXPR_STATEMENT	1227:7	1227:38	9	fprintf ( fd , "100 dict begin\n" ) ;
EXPR	1227:7	1227:7	10	fprintf ( fd , "100 dict begin\n" )
FUNCTION_CALL	1227:7	1227:37	11	fprintf ( fd , "100 dict begin\n" )
CALLEE	1227:7	1227:7	12	fprintf
LEAF_NODE	1227:7	1227:7	13	fprintf
LEAF_NODE	1227:14	1227:14	12	(
ARGUMENT	1227:15	1227:15	12	fd
FIELD	1227:15	1227:15	13	fd
LEAF_NODE	1227:15	1227:15	14	fd
LEAF_NODE	1227:17	1227:17	12	,
ARGUMENT	1227:19	1227:19	12	"100 dict begin\n"
FIELD	1227:19	1227:19	13	"100 dict begin\n"
LEAF_NODE	1227:19	1227:19	14	"100 dict begin\n"
LEAF_NODE	1227:37	1227:37	12	)
LEAF_NODE	1227:38	1227:38	10	;
SELECTION	1228:7	1231:8	9	
KEYWORD	1228:7	1228:7	10	if
LEAF_NODE	1228:7	1228:7	11	if
LEAF_NODE	1228:10	1228:10	10	(
CONDITION	1228:11	1228:11	10	exportMaskedImage ( fd , view_width , view_height , pswidth , psheight , i , j , left_margin , bottom_margin , scale , center , rotation )
EXPR	1228:11	1228:11	11	exportMaskedImage ( fd , view_width , view_height , pswidth , psheight , i , j , left_margin , bottom_margin , scale , center , rotation )
FUNCTION_CALL	1228:11	1230:51	12	exportMaskedImage ( fd , view_width , view_height , pswidth , psheight , i , j , left_margin , bottom_margin , scale , center , rotation )
CALLEE	1228:11	1228:11	13	exportMaskedImage
LEAF_NODE	1228:11	1228:11	14	exportMaskedImage
LEAF_NODE	1228:28	1228:28	13	(
ARGUMENT	1228:29	1228:29	13	fd
FIELD	1228:29	1228:29	14	fd
LEAF_NODE	1228:29	1228:29	15	fd
LEAF_NODE	1228:31	1228:31	13	,
ARGUMENT	1228:33	1228:33	13	view_width
FIELD	1228:33	1228:33	14	view_width
LEAF_NODE	1228:33	1228:33	15	view_width
LEAF_NODE	1228:43	1228:43	13	,
ARGUMENT	1228:45	1228:45	13	view_height
FIELD	1228:45	1228:45	14	view_height
LEAF_NODE	1228:45	1228:45	15	view_height
LEAF_NODE	1228:56	1228:56	13	,
ARGUMENT	1228:58	1228:58	13	pswidth
FIELD	1228:58	1228:58	14	pswidth
LEAF_NODE	1228:58	1228:58	15	pswidth
LEAF_NODE	1228:65	1228:65	13	,
ARGUMENT	1228:67	1228:67	13	psheight
FIELD	1228:67	1228:67	14	psheight
LEAF_NODE	1228:67	1228:67	15	psheight
LEAF_NODE	1228:75	1228:75	13	,
ARGUMENT	1229:28	1229:28	13	i
FIELD	1229:28	1229:28	14	i
LEAF_NODE	1229:28	1229:28	15	i
LEAF_NODE	1229:29	1229:29	13	,
ARGUMENT	1229:31	1229:31	13	j
FIELD	1229:31	1229:31	14	j
LEAF_NODE	1229:31	1229:31	15	j
LEAF_NODE	1229:32	1229:32	13	,
ARGUMENT	1229:34	1229:34	13	left_margin
FIELD	1229:34	1229:34	14	left_margin
LEAF_NODE	1229:34	1229:34	15	left_margin
LEAF_NODE	1229:45	1229:45	13	,
ARGUMENT	1229:47	1229:47	13	bottom_margin
FIELD	1229:47	1229:47	14	bottom_margin
LEAF_NODE	1229:47	1229:47	15	bottom_margin
LEAF_NODE	1229:60	1229:60	13	,
ARGUMENT	1230:28	1230:28	13	scale
FIELD	1230:28	1230:28	14	scale
LEAF_NODE	1230:28	1230:28	15	scale
LEAF_NODE	1230:33	1230:33	13	,
ARGUMENT	1230:35	1230:35	13	center
FIELD	1230:35	1230:35	14	center
LEAF_NODE	1230:35	1230:35	15	center
LEAF_NODE	1230:41	1230:41	13	,
ARGUMENT	1230:43	1230:43	13	rotation
FIELD	1230:43	1230:43	14	rotation
LEAF_NODE	1230:43	1230:43	15	rotation
LEAF_NODE	1230:51	1230:51	13	)
LEAF_NODE	1230:52	1230:52	10	)
STATEMENTS	1231:8	1234:8	10	
LEAF_NODE	1231:8	1231:8	11	{
STATEMENTS	1232:8	1233:8	11	
EXPR_STATEMENT	1232:8	1232:67	12	TIFFError ( "exportMaskedImage" , "Invalid image parameters." ) ;
EXPR	1232:8	1232:8	13	TIFFError ( "exportMaskedImage" , "Invalid image parameters." )
FUNCTION_CALL	1232:8	1232:66	14	TIFFError ( "exportMaskedImage" , "Invalid image parameters." )
CALLEE	1232:8	1232:8	15	TIFFError
LEAF_NODE	1232:8	1232:8	16	TIFFError
LEAF_NODE	1232:17	1232:17	15	(
ARGUMENT	1232:18	1232:18	15	"exportMaskedImage"
FIELD	1232:18	1232:18	16	"exportMaskedImage"
LEAF_NODE	1232:18	1232:18	17	"exportMaskedImage"
LEAF_NODE	1232:37	1232:37	15	,
ARGUMENT	1232:39	1232:39	15	"Invalid image parameters."
FIELD	1232:39	1232:39	16	"Invalid image parameters."
LEAF_NODE	1232:39	1232:39	17	"Invalid image parameters."
LEAF_NODE	1232:66	1232:66	15	)
LEAF_NODE	1232:67	1232:67	13	;
JUMP_STATEMENT	1233:8	1233:19	12	return ( - 1 ) ;
KEYWORD	1233:8	1233:8	13	return
LEAF_NODE	1233:8	1233:8	14	return
DESTINATION	1233:15	1233:15	13	( - 1 )
EXPR	1233:15	1233:18	14	( - 1 )
LEAF_NODE	1233:15	1233:15	15	(
UNARY_EXPR	1233:16	1233:17	15	- 1
UNARY_OPERATOR	1233:16	1233:16	16	-
LEAF_NODE	1233:16	1233:16	17	-
FIELD	1233:17	1233:17	16	1
LEAF_NODE	1233:17	1233:17	17	1
LEAF_NODE	1233:18	1233:18	15	)
LEAF_NODE	1233:19	1233:19	13	;
LEAF_NODE	1234:8	1234:8	11	}
EXPR_STATEMENT	1235:7	1235:43	9	PSpage ( fd , tif , pixwidth , pixheight ) ;
EXPR	1235:7	1235:7	10	PSpage ( fd , tif , pixwidth , pixheight )
FUNCTION_CALL	1235:7	1235:42	11	PSpage ( fd , tif , pixwidth , pixheight )
CALLEE	1235:7	1235:7	12	PSpage
LEAF_NODE	1235:7	1235:7	13	PSpage
LEAF_NODE	1235:13	1235:13	12	(
ARGUMENT	1235:14	1235:14	12	fd
FIELD	1235:14	1235:14	13	fd
LEAF_NODE	1235:14	1235:14	14	fd
LEAF_NODE	1235:16	1235:16	12	,
ARGUMENT	1235:18	1235:18	12	tif
FIELD	1235:18	1235:18	13	tif
LEAF_NODE	1235:18	1235:18	14	tif
LEAF_NODE	1235:21	1235:21	12	,
ARGUMENT	1235:23	1235:23	12	pixwidth
FIELD	1235:23	1235:23	13	pixwidth
LEAF_NODE	1235:23	1235:23	14	pixwidth
LEAF_NODE	1235:31	1235:31	12	,
ARGUMENT	1235:33	1235:33	12	pixheight
FIELD	1235:33	1235:33	13	pixheight
LEAF_NODE	1235:33	1235:33	14	pixheight
LEAF_NODE	1235:42	1235:42	12	)
LEAF_NODE	1235:43	1235:43	10	;
EXPR_STATEMENT	1236:7	1236:27	9	fprintf ( fd , "end\n" ) ;
EXPR	1236:7	1236:7	10	fprintf ( fd , "end\n" )
FUNCTION_CALL	1236:7	1236:26	11	fprintf ( fd , "end\n" )
CALLEE	1236:7	1236:7	12	fprintf
LEAF_NODE	1236:7	1236:7	13	fprintf
LEAF_NODE	1236:14	1236:14	12	(
ARGUMENT	1236:15	1236:15	12	fd
FIELD	1236:15	1236:15	13	fd
LEAF_NODE	1236:15	1236:15	14	fd
LEAF_NODE	1236:17	1236:17	12	,
ARGUMENT	1236:19	1236:19	12	"end\n"
FIELD	1236:19	1236:19	13	"end\n"
LEAF_NODE	1236:19	1236:19	14	"end\n"
LEAF_NODE	1236:26	1236:26	12	)
LEAF_NODE	1236:27	1236:27	10	;
EXPR_STATEMENT	1237:7	1237:32	9	fprintf ( fd , "grestore\n" ) ;
EXPR	1237:7	1237:7	10	fprintf ( fd , "grestore\n" )
FUNCTION_CALL	1237:7	1237:31	11	fprintf ( fd , "grestore\n" )
CALLEE	1237:7	1237:7	12	fprintf
LEAF_NODE	1237:7	1237:7	13	fprintf
LEAF_NODE	1237:14	1237:14	12	(
ARGUMENT	1237:15	1237:15	12	fd
FIELD	1237:15	1237:15	13	fd
LEAF_NODE	1237:15	1237:15	14	fd
LEAF_NODE	1237:17	1237:17	12	,
ARGUMENT	1237:19	1237:19	12	"grestore\n"
FIELD	1237:19	1237:19	13	"grestore\n"
LEAF_NODE	1237:19	1237:19	14	"grestore\n"
LEAF_NODE	1237:31	1237:31	12	)
LEAF_NODE	1237:32	1237:32	10	;
EXPR_STATEMENT	1238:7	1238:32	9	fprintf ( fd , "showpage\n" ) ;
EXPR	1238:7	1238:7	10	fprintf ( fd , "showpage\n" )
FUNCTION_CALL	1238:7	1238:31	11	fprintf ( fd , "showpage\n" )
CALLEE	1238:7	1238:7	12	fprintf
LEAF_NODE	1238:7	1238:7	13	fprintf
LEAF_NODE	1238:14	1238:14	12	(
ARGUMENT	1238:15	1238:15	12	fd
FIELD	1238:15	1238:15	13	fd
LEAF_NODE	1238:15	1238:15	14	fd
LEAF_NODE	1238:17	1238:17	12	,
ARGUMENT	1238:19	1238:19	12	"showpage\n"
FIELD	1238:19	1238:19	13	"showpage\n"
LEAF_NODE	1238:19	1238:19	14	"showpage\n"
LEAF_NODE	1238:31	1238:31	12	)
LEAF_NODE	1238:32	1238:32	10	;
LEAF_NODE	1239:7	1239:7	8	}
LEAF_NODE	1240:4	1240:4	5	}
LEAF_NODE	1242:2	1242:2	3	return
LEAF_NODE	1242:9	1242:9	3	(
LEAF_NODE	1242:10	1242:10	3	pages
LEAF_NODE	1242:15	1242:15	3	)
LEAF_NODE	1242:16	1242:16	3	;
LEAF_NODE	1243:2	1243:2	2	}
FUNCTION_DEF	1246:0	1405:2	1	
RETURN_TYPE	1246:0	1246:0	2	int
TYPE_NAME	1246:0	1246:0	3	int
LEAF_NODE	1246:0	1246:0	4	int
FUNCTION_NAME	1246:4	1246:4	2	psStart
LEAF_NODE	1246:4	1246:4	3	psStart
PARAMETER_LIST	1246:11	1249:51	2	( FILE * fd , int npages , int auto_rotate , int * rotation , double * scale , double ox , double oy , double pgwidth , double pgheight , double reqwidth , double reqheight , double pswidth , double psheight , double left_offset , double bottom_offset )
LEAF_NODE	1246:11	1246:11	3	(
PARAMETER_DECL	1246:12	1246:18	3	FILE * fd
TYPE	1246:12	1246:17	4	FILE *
TYPE_NAME	1246:12	1246:12	5	FILE
LEAF_NODE	1246:12	1246:12	6	FILE
POINTER	1246:17	1246:17	5	*
LEAF_NODE	1246:17	1246:17	6	*
NAME	1246:18	1246:18	4	fd
LEAF_NODE	1246:18	1246:18	5	fd
LEAF_NODE	1246:20	1246:20	3	,
PARAMETER_DECL	1246:22	1246:26	3	int npages
TYPE	1246:22	1246:22	4	int
TYPE_NAME	1246:22	1246:22	5	int
LEAF_NODE	1246:22	1246:22	6	int
NAME	1246:26	1246:26	4	npages
LEAF_NODE	1246:26	1246:26	5	npages
LEAF_NODE	1246:32	1246:32	3	,
PARAMETER_DECL	1246:34	1246:38	3	int auto_rotate
TYPE	1246:34	1246:34	4	int
TYPE_NAME	1246:34	1246:34	5	int
LEAF_NODE	1246:34	1246:34	6	int
NAME	1246:38	1246:38	4	auto_rotate
LEAF_NODE	1246:38	1246:38	5	auto_rotate
LEAF_NODE	1246:49	1246:49	3	,
PARAMETER_DECL	1246:51	1246:56	3	int * rotation
TYPE	1246:51	1246:55	4	int *
TYPE_NAME	1246:51	1246:51	5	int
LEAF_NODE	1246:51	1246:51	6	int
POINTER	1246:55	1246:55	5	*
LEAF_NODE	1246:55	1246:55	6	*
NAME	1246:56	1246:56	4	rotation
LEAF_NODE	1246:56	1246:56	5	rotation
LEAF_NODE	1246:64	1246:64	3	,
PARAMETER_DECL	1246:66	1246:74	3	double * scale
TYPE	1246:66	1246:73	4	double *
TYPE_NAME	1246:66	1246:66	5	double
LEAF_NODE	1246:66	1246:66	6	double
POINTER	1246:73	1246:73	5	*
LEAF_NODE	1246:73	1246:73	6	*
NAME	1246:74	1246:74	4	scale
LEAF_NODE	1246:74	1246:74	5	scale
LEAF_NODE	1246:79	1246:79	3	,
PARAMETER_DECL	1247:12	1247:19	3	double ox
TYPE	1247:12	1247:12	4	double
TYPE_NAME	1247:12	1247:12	5	double
LEAF_NODE	1247:12	1247:12	6	double
NAME	1247:19	1247:19	4	ox
LEAF_NODE	1247:19	1247:19	5	ox
LEAF_NODE	1247:21	1247:21	3	,
PARAMETER_DECL	1247:23	1247:30	3	double oy
TYPE	1247:23	1247:23	4	double
TYPE_NAME	1247:23	1247:23	5	double
LEAF_NODE	1247:23	1247:23	6	double
NAME	1247:30	1247:30	4	oy
LEAF_NODE	1247:30	1247:30	5	oy
LEAF_NODE	1247:32	1247:32	3	,
PARAMETER_DECL	1247:34	1247:41	3	double pgwidth
TYPE	1247:34	1247:34	4	double
TYPE_NAME	1247:34	1247:34	5	double
LEAF_NODE	1247:34	1247:34	6	double
NAME	1247:41	1247:41	4	pgwidth
LEAF_NODE	1247:41	1247:41	5	pgwidth
LEAF_NODE	1247:48	1247:48	3	,
PARAMETER_DECL	1247:50	1247:57	3	double pgheight
TYPE	1247:50	1247:50	4	double
TYPE_NAME	1247:50	1247:50	5	double
LEAF_NODE	1247:50	1247:50	6	double
NAME	1247:57	1247:57	4	pgheight
LEAF_NODE	1247:57	1247:57	5	pgheight
LEAF_NODE	1247:65	1247:65	3	,
PARAMETER_DECL	1248:11	1248:18	3	double reqwidth
TYPE	1248:11	1248:11	4	double
TYPE_NAME	1248:11	1248:11	5	double
LEAF_NODE	1248:11	1248:11	6	double
NAME	1248:18	1248:18	4	reqwidth
LEAF_NODE	1248:18	1248:18	5	reqwidth
LEAF_NODE	1248:26	1248:26	3	,
PARAMETER_DECL	1248:28	1248:35	3	double reqheight
TYPE	1248:28	1248:28	4	double
TYPE_NAME	1248:28	1248:28	5	double
LEAF_NODE	1248:28	1248:28	6	double
NAME	1248:35	1248:35	4	reqheight
LEAF_NODE	1248:35	1248:35	5	reqheight
LEAF_NODE	1248:44	1248:44	3	,
PARAMETER_DECL	1248:46	1248:53	3	double pswidth
TYPE	1248:46	1248:46	4	double
TYPE_NAME	1248:46	1248:46	5	double
LEAF_NODE	1248:46	1248:46	6	double
NAME	1248:53	1248:53	4	pswidth
LEAF_NODE	1248:53	1248:53	5	pswidth
LEAF_NODE	1248:60	1248:60	3	,
PARAMETER_DECL	1248:62	1248:69	3	double psheight
TYPE	1248:62	1248:62	4	double
TYPE_NAME	1248:62	1248:62	5	double
LEAF_NODE	1248:62	1248:62	6	double
NAME	1248:69	1248:69	4	psheight
LEAF_NODE	1248:69	1248:69	5	psheight
LEAF_NODE	1248:77	1248:77	3	,
PARAMETER_DECL	1249:11	1249:18	3	double left_offset
TYPE	1249:11	1249:11	4	double
TYPE_NAME	1249:11	1249:11	5	double
LEAF_NODE	1249:11	1249:11	6	double
NAME	1249:18	1249:18	4	left_offset
LEAF_NODE	1249:18	1249:18	5	left_offset
LEAF_NODE	1249:29	1249:29	3	,
PARAMETER_DECL	1249:31	1249:38	3	double bottom_offset
TYPE	1249:31	1249:31	4	double
TYPE_NAME	1249:31	1249:31	5	double
LEAF_NODE	1249:31	1249:31	6	double
NAME	1249:38	1249:38	4	bottom_offset
LEAF_NODE	1249:38	1249:38	5	bottom_offset
LEAF_NODE	1249:51	1249:51	3	)
LEAF_NODE	1250:2	1250:2	2	{
STATEMENTS	1251:2	1404:2	2	
SIMPLE_DECL	1251:2	1251:24	3	double maxsource ; maxsource = 0.0 ;
VAR_DECL	1251:2	1251:9	4	double maxsource ; maxsource = 0.0
TYPE	1251:2	1251:2	5	double
TYPE_NAME	1251:2	1251:2	6	double
LEAF_NODE	1251:2	1251:2	7	double
NAME	1251:9	1251:9	5	maxsource
LEAF_NODE	1251:9	1251:9	6	maxsource
LEAF_NODE	0:0	0:0	5	;
INIT	1251:9	1251:9	5	maxsource = 0.0
ASSIGN	1251:9	1251:21	6	maxsource = 0.0
LVAL	1251:9	1251:9	7	maxsource
NAME	1251:9	1251:9	8	maxsource
LEAF_NODE	1251:9	1251:9	9	maxsource
ASSIGN_OP	1251:19	1251:19	7	=
LEAF_NODE	1251:19	1251:19	8	=
RVAL	1251:21	1251:21	7	0.0
FIELD	1251:21	1251:21	8	0.0
LEAF_NODE	1251:21	1251:21	9	0.0
LEAF_NODE	1251:24	1251:24	4	;
SIMPLE_DECL	1252:2	1252:24	3	double maxtarget ; maxtarget = 0.0 ;
VAR_DECL	1252:2	1252:9	4	double maxtarget ; maxtarget = 0.0
TYPE	1252:2	1252:2	5	double
TYPE_NAME	1252:2	1252:2	6	double
LEAF_NODE	1252:2	1252:2	7	double
NAME	1252:9	1252:9	5	maxtarget
LEAF_NODE	1252:9	1252:9	6	maxtarget
LEAF_NODE	0:0	0:0	5	;
INIT	1252:9	1252:9	5	maxtarget = 0.0
ASSIGN	1252:9	1252:21	6	maxtarget = 0.0
LVAL	1252:9	1252:9	7	maxtarget
NAME	1252:9	1252:9	8	maxtarget
LEAF_NODE	1252:9	1252:9	9	maxtarget
ASSIGN_OP	1252:19	1252:19	7	=
LEAF_NODE	1252:19	1252:19	8	=
RVAL	1252:21	1252:21	7	0.0
FIELD	1252:21	1252:21	8	0.0
LEAF_NODE	1252:21	1252:21	9	0.0
LEAF_NODE	1252:24	1252:24	4	;
SIMPLE_DECL	1253:2	1253:35	3	double xscale ; xscale = 1.0 , double yscale ; yscale = 1.0 ;
INIT_DECL_LIST	1253:2	1253:2	4	double xscale ; xscale = 1.0 , double yscale ; yscale = 1.0
VAR_DECL	1253:2	1253:9	5	double xscale ; xscale = 1.0
TYPE	1253:2	1253:2	6	double
TYPE_NAME	1253:2	1253:2	7	double
LEAF_NODE	1253:2	1253:2	8	double
NAME	1253:9	1253:9	6	xscale
LEAF_NODE	1253:9	1253:9	7	xscale
LEAF_NODE	0:0	0:0	6	;
INIT	1253:9	1253:9	6	xscale = 1.0
ASSIGN	1253:9	1253:18	7	xscale = 1.0
LVAL	1253:9	1253:9	8	xscale
NAME	1253:9	1253:9	9	xscale
LEAF_NODE	1253:9	1253:9	10	xscale
ASSIGN_OP	1253:16	1253:16	8	=
LEAF_NODE	1253:16	1253:16	9	=
RVAL	1253:18	1253:18	8	1.0
FIELD	1253:18	1253:18	9	1.0
LEAF_NODE	1253:18	1253:18	10	1.0
LEAF_NODE	1253:21	1253:21	5	,
VAR_DECL	1253:2	1253:23	5	double yscale ; yscale = 1.0
TYPE	1253:2	1253:2	6	double
TYPE_NAME	1253:2	1253:2	7	double
LEAF_NODE	1253:2	1253:2	8	double
NAME	1253:23	1253:23	6	yscale
LEAF_NODE	1253:23	1253:23	7	yscale
LEAF_NODE	0:0	0:0	6	;
INIT	1253:23	1253:23	6	yscale = 1.0
ASSIGN	1253:23	1253:32	7	yscale = 1.0
LVAL	1253:23	1253:23	8	yscale
NAME	1253:23	1253:23	9	yscale
LEAF_NODE	1253:23	1253:23	10	yscale
ASSIGN_OP	1253:30	1253:30	8	=
LEAF_NODE	1253:30	1253:30	9	=
RVAL	1253:32	1253:32	8	1.0
FIELD	1253:32	1253:32	9	1.0
LEAF_NODE	1253:32	1253:32	10	1.0
LEAF_NODE	1253:35	1253:35	4	;
SIMPLE_DECL	1254:2	1254:20	3	double splitheight ;
VAR_DECL	1254:2	1254:9	4	double splitheight
TYPE	1254:2	1254:2	5	double
TYPE_NAME	1254:2	1254:2	6	double
LEAF_NODE	1254:2	1254:2	7	double
NAME	1254:9	1254:9	5	splitheight
LEAF_NODE	1254:9	1254:9	6	splitheight
LEAF_NODE	1254:20	1254:20	4	;
SIMPLE_DECL	1255:2	1255:19	3	double splitwidth ;
VAR_DECL	1255:2	1255:9	4	double splitwidth
TYPE	1255:2	1255:2	5	double
TYPE_NAME	1255:2	1255:2	6	double
LEAF_NODE	1255:2	1255:2	7	double
NAME	1255:9	1255:9	5	splitwidth
LEAF_NODE	1255:9	1255:9	6	splitwidth
LEAF_NODE	1255:19	1255:19	4	;
SIMPLE_DECL	1256:2	1256:44	3	double view_width ; view_width = 0.0 , double view_height ; view_height = 0.0 ;
INIT_DECL_LIST	1256:2	1256:2	4	double view_width ; view_width = 0.0 , double view_height ; view_height = 0.0
VAR_DECL	1256:2	1256:9	5	double view_width ; view_width = 0.0
TYPE	1256:2	1256:2	6	double
TYPE_NAME	1256:2	1256:2	7	double
LEAF_NODE	1256:2	1256:2	8	double
NAME	1256:9	1256:9	6	view_width
LEAF_NODE	1256:9	1256:9	7	view_width
LEAF_NODE	0:0	0:0	6	;
INIT	1256:9	1256:9	6	view_width = 0.0
ASSIGN	1256:9	1256:22	7	view_width = 0.0
LVAL	1256:9	1256:9	8	view_width
NAME	1256:9	1256:9	9	view_width
LEAF_NODE	1256:9	1256:9	10	view_width
ASSIGN_OP	1256:20	1256:20	8	=
LEAF_NODE	1256:20	1256:20	9	=
RVAL	1256:22	1256:22	8	0.0
FIELD	1256:22	1256:22	9	0.0
LEAF_NODE	1256:22	1256:22	10	0.0
LEAF_NODE	1256:25	1256:25	5	,
VAR_DECL	1256:2	1256:27	5	double view_height ; view_height = 0.0
TYPE	1256:2	1256:2	6	double
TYPE_NAME	1256:2	1256:2	7	double
LEAF_NODE	1256:2	1256:2	8	double
NAME	1256:27	1256:27	6	view_height
LEAF_NODE	1256:27	1256:27	7	view_height
LEAF_NODE	0:0	0:0	6	;
INIT	1256:27	1256:27	6	view_height = 0.0
ASSIGN	1256:27	1256:41	7	view_height = 0.0
LVAL	1256:27	1256:27	8	view_height
NAME	1256:27	1256:27	9	view_height
LEAF_NODE	1256:27	1256:27	10	view_height
ASSIGN_OP	1256:39	1256:39	8	=
LEAF_NODE	1256:39	1256:39	9	=
RVAL	1256:41	1256:41	8	0.0
FIELD	1256:41	1256:41	9	0.0
LEAF_NODE	1256:41	1256:41	10	0.0
LEAF_NODE	1256:44	1256:44	4	;
SIMPLE_DECL	1257:2	1257:44	3	double page_width ; page_width = 0.0 , double page_height ; page_height = 0.0 ;
INIT_DECL_LIST	1257:2	1257:2	4	double page_width ; page_width = 0.0 , double page_height ; page_height = 0.0
VAR_DECL	1257:2	1257:9	5	double page_width ; page_width = 0.0
TYPE	1257:2	1257:2	6	double
TYPE_NAME	1257:2	1257:2	7	double
LEAF_NODE	1257:2	1257:2	8	double
NAME	1257:9	1257:9	6	page_width
LEAF_NODE	1257:9	1257:9	7	page_width
LEAF_NODE	0:0	0:0	6	;
INIT	1257:9	1257:9	6	page_width = 0.0
ASSIGN	1257:9	1257:22	7	page_width = 0.0
LVAL	1257:9	1257:9	8	page_width
NAME	1257:9	1257:9	9	page_width
LEAF_NODE	1257:9	1257:9	10	page_width
ASSIGN_OP	1257:20	1257:20	8	=
LEAF_NODE	1257:20	1257:20	9	=
RVAL	1257:22	1257:22	8	0.0
FIELD	1257:22	1257:22	9	0.0
LEAF_NODE	1257:22	1257:22	10	0.0
LEAF_NODE	1257:25	1257:25	5	,
VAR_DECL	1257:2	1257:27	5	double page_height ; page_height = 0.0
TYPE	1257:2	1257:2	6	double
TYPE_NAME	1257:2	1257:2	7	double
LEAF_NODE	1257:2	1257:2	8	double
NAME	1257:27	1257:27	6	page_height
LEAF_NODE	1257:27	1257:27	7	page_height
LEAF_NODE	0:0	0:0	6	;
INIT	1257:27	1257:27	6	page_height = 0.0
ASSIGN	1257:27	1257:41	7	page_height = 0.0
LVAL	1257:27	1257:27	8	page_height
NAME	1257:27	1257:27	9	page_height
LEAF_NODE	1257:27	1257:27	10	page_height
ASSIGN_OP	1257:39	1257:39	8	=
LEAF_NODE	1257:39	1257:39	9	=
RVAL	1257:41	1257:41	8	0.0
FIELD	1257:41	1257:41	9	0.0
LEAF_NODE	1257:41	1257:41	10	0.0
LEAF_NODE	1257:44	1257:44	4	;
EXPR_STATEMENT	1260:2	1260:44	3	splitheight = maxPageHeight * PS_UNIT_SIZE ;
EXPR	1260:2	1260:2	4	splitheight = maxPageHeight * PS_UNIT_SIZE
ASSIGN	1260:2	1260:16	5	splitheight = maxPageHeight * PS_UNIT_SIZE
LVAL	1260:2	1260:2	6	splitheight
FIELD	1260:2	1260:2	7	splitheight
LEAF_NODE	1260:2	1260:2	8	splitheight
ASSIGN_OP	1260:14	1260:14	6	=
LEAF_NODE	1260:14	1260:14	7	=
RVAL	1260:16	1260:32	6	maxPageHeight * PS_UNIT_SIZE
FIELD	1260:16	1260:16	7	maxPageHeight
LEAF_NODE	1260:16	1260:16	8	maxPageHeight
LEAF_NODE	1260:30	1260:30	7	*
FIELD	1260:32	1260:32	7	PS_UNIT_SIZE
LEAF_NODE	1260:32	1260:32	8	PS_UNIT_SIZE
LEAF_NODE	1260:44	1260:44	4	;
EXPR_STATEMENT	1261:2	1261:43	3	splitwidth = maxPageWidth * PS_UNIT_SIZE ;
EXPR	1261:2	1261:2	4	splitwidth = maxPageWidth * PS_UNIT_SIZE
ASSIGN	1261:2	1261:16	5	splitwidth = maxPageWidth * PS_UNIT_SIZE
LVAL	1261:2	1261:2	6	splitwidth
FIELD	1261:2	1261:2	7	splitwidth
LEAF_NODE	1261:2	1261:2	8	splitwidth
ASSIGN_OP	1261:14	1261:14	6	=
LEAF_NODE	1261:14	1261:14	7	=
RVAL	1261:16	1261:31	6	maxPageWidth * PS_UNIT_SIZE
FIELD	1261:16	1261:16	7	maxPageWidth
LEAF_NODE	1261:16	1261:16	8	maxPageWidth
LEAF_NODE	1261:29	1261:29	7	*
FIELD	1261:31	1261:31	7	PS_UNIT_SIZE
LEAF_NODE	1261:31	1261:31	8	PS_UNIT_SIZE
LEAF_NODE	1261:43	1261:43	4	;
EXPR_STATEMENT	1263:2	1263:37	3	page_width = pgwidth * PS_UNIT_SIZE ;
EXPR	1263:2	1263:2	4	page_width = pgwidth * PS_UNIT_SIZE
ASSIGN	1263:2	1263:15	5	page_width = pgwidth * PS_UNIT_SIZE
LVAL	1263:2	1263:2	6	page_width
FIELD	1263:2	1263:2	7	page_width
LEAF_NODE	1263:2	1263:2	8	page_width
ASSIGN_OP	1263:13	1263:13	6	=
LEAF_NODE	1263:13	1263:13	7	=
RVAL	1263:15	1263:25	6	pgwidth * PS_UNIT_SIZE
FIELD	1263:15	1263:15	7	pgwidth
LEAF_NODE	1263:15	1263:15	8	pgwidth
LEAF_NODE	1263:23	1263:23	7	*
FIELD	1263:25	1263:25	7	PS_UNIT_SIZE
LEAF_NODE	1263:25	1263:25	8	PS_UNIT_SIZE
LEAF_NODE	1263:37	1263:37	4	;
EXPR_STATEMENT	1264:2	1264:39	3	page_height = pgheight * PS_UNIT_SIZE ;
EXPR	1264:2	1264:2	4	page_height = pgheight * PS_UNIT_SIZE
ASSIGN	1264:2	1264:16	5	page_height = pgheight * PS_UNIT_SIZE
LVAL	1264:2	1264:2	6	page_height
FIELD	1264:2	1264:2	7	page_height
LEAF_NODE	1264:2	1264:2	8	page_height
ASSIGN_OP	1264:14	1264:14	6	=
LEAF_NODE	1264:14	1264:14	7	=
RVAL	1264:16	1264:27	6	pgheight * PS_UNIT_SIZE
FIELD	1264:16	1264:16	7	pgheight
LEAF_NODE	1264:16	1264:16	8	pgheight
LEAF_NODE	1264:25	1264:25	7	*
FIELD	1264:27	1264:27	7	PS_UNIT_SIZE
LEAF_NODE	1264:27	1264:27	8	PS_UNIT_SIZE
LEAF_NODE	1264:39	1264:39	4	;
SELECTION	1271:2	1272:4	3	
KEYWORD	1271:2	1271:2	4	if
LEAF_NODE	1271:2	1271:2	5	if
LEAF_NODE	1271:5	1271:5	4	(
CONDITION	1271:6	1271:6	4	auto_rotate
EXPR	1271:6	1271:6	5	auto_rotate
FIELD	1271:6	1271:6	6	auto_rotate
LEAF_NODE	1271:6	1271:6	7	auto_rotate
LEAF_NODE	1271:17	1271:17	4	)
STATEMENTS	1272:4	1308:4	4	
LEAF_NODE	1272:4	1272:4	5	{
STATEMENTS	1273:4	1307:4	5	
SELECTION	1273:4	1274:6	6	
KEYWORD	1273:4	1273:4	7	if
LEAF_NODE	1273:4	1273:4	8	if
LEAF_NODE	1273:7	1273:7	7	(
CONDITION	1273:8	1273:8	7	( splitheight != 0 ) || ( splitwidth != 0 )
EXPR	1273:8	1273:8	8	( splitheight != 0 ) || ( splitwidth != 0 )
OR	1273:8	1273:30	9	( splitheight != 0 ) || ( splitwidth != 0 )
EXPR	1273:8	1273:25	10	( splitheight != 0 )
LEAF_NODE	1273:8	1273:8	11	(
FIELD	1273:9	1273:9	11	splitheight
LEAF_NODE	1273:9	1273:9	12	splitheight
EQ_OPERATOR	1273:21	1273:21	11	!=
LEAF_NODE	1273:21	1273:21	12	!=
FIELD	1273:24	1273:24	11	0
LEAF_NODE	1273:24	1273:24	12	0
LEAF_NODE	1273:25	1273:25	11	)
LEAF_NODE	1273:27	1273:27	10	||
EXPR	1273:30	1273:46	10	( splitwidth != 0 )
LEAF_NODE	1273:30	1273:30	11	(
FIELD	1273:31	1273:31	11	splitwidth
LEAF_NODE	1273:31	1273:31	12	splitwidth
EQ_OPERATOR	1273:42	1273:42	11	!=
LEAF_NODE	1273:42	1273:42	12	!=
FIELD	1273:45	1273:45	11	0
LEAF_NODE	1273:45	1273:45	12	0
LEAF_NODE	1273:46	1273:46	11	)
LEAF_NODE	1273:47	1273:47	7	)
STATEMENTS	1274:6	1277:6	7	
LEAF_NODE	1274:6	1274:6	8	{
STATEMENTS	1275:6	1276:6	8	
EXPR_STATEMENT	1275:6	1275:79	9	TIFFError ( "psStart" , "Auto-rotate is incompatible with page splitting " ) ;
EXPR	1275:6	1275:6	10	TIFFError ( "psStart" , "Auto-rotate is incompatible with page splitting " )
FUNCTION_CALL	1275:6	1275:78	11	TIFFError ( "psStart" , "Auto-rotate is incompatible with page splitting " )
CALLEE	1275:6	1275:6	12	TIFFError
LEAF_NODE	1275:6	1275:6	13	TIFFError
LEAF_NODE	1275:16	1275:16	12	(
ARGUMENT	1275:17	1275:17	12	"psStart"
FIELD	1275:17	1275:17	13	"psStart"
LEAF_NODE	1275:17	1275:17	14	"psStart"
LEAF_NODE	1275:26	1275:26	12	,
ARGUMENT	1275:28	1275:28	12	"Auto-rotate is incompatible with page splitting "
FIELD	1275:28	1275:28	13	"Auto-rotate is incompatible with page splitting "
LEAF_NODE	1275:28	1275:28	14	"Auto-rotate is incompatible with page splitting "
LEAF_NODE	1275:78	1275:78	12	)
LEAF_NODE	1275:79	1275:79	10	;
JUMP_STATEMENT	1276:6	1276:16	9	return ( 1 ) ;
KEYWORD	1276:6	1276:6	10	return
LEAF_NODE	1276:6	1276:6	11	return
DESTINATION	1276:13	1276:13	10	( 1 )
EXPR	1276:13	1276:15	11	( 1 )
LEAF_NODE	1276:13	1276:13	12	(
FIELD	1276:14	1276:14	12	1
LEAF_NODE	1276:14	1276:14	13	1
LEAF_NODE	1276:15	1276:15	12	)
LEAF_NODE	1276:16	1276:16	10	;
LEAF_NODE	1277:6	1277:6	8	}
EXPR_STATEMENT	1280:4	1280:58	6	maxsource = ( pswidth >= psheight ) ? pswidth : psheight ;
EXPR	1280:4	1280:4	7	maxsource = ( pswidth >= psheight ) ? pswidth : psheight
ASSIGN	1280:4	1280:16	8	maxsource = ( pswidth >= psheight ) ? pswidth : psheight
LVAL	1280:4	1280:4	9	maxsource
FIELD	1280:4	1280:4	10	maxsource
LEAF_NODE	1280:4	1280:4	11	maxsource
ASSIGN_OP	1280:14	1280:14	9	=
LEAF_NODE	1280:14	1280:14	10	=
RVAL	1280:16	1280:16	9	( pswidth >= psheight ) ? pswidth : psheight
COND_EXPR	1280:16	1280:50	10	( pswidth >= psheight ) ? pswidth : psheight
CONDITION	1280:16	1280:36	11	( pswidth >= psheight )
LEAF_NODE	1280:16	1280:16	12	(
FIELD	1280:17	1280:17	12	pswidth
LEAF_NODE	1280:17	1280:17	13	pswidth
REL_OPERATOR	1280:25	1280:25	12	>=
LEAF_NODE	1280:25	1280:25	13	>=
FIELD	1280:28	1280:28	12	psheight
LEAF_NODE	1280:28	1280:28	13	psheight
LEAF_NODE	1280:36	1280:36	12	)
LEAF_NODE	1280:38	1280:38	11	?
EXPR	1280:40	1280:40	11	pswidth
FIELD	1280:40	1280:40	12	pswidth
LEAF_NODE	1280:40	1280:40	13	pswidth
LEAF_NODE	1280:48	1280:48	11	:
FIELD	1280:50	1280:50	11	psheight
LEAF_NODE	1280:50	1280:50	12	psheight
LEAF_NODE	1280:58	1280:58	7	;
EXPR_STATEMENT	1281:4	1281:62	6	maxtarget = ( reqwidth >= reqheight ) ? reqwidth : reqheight ;
EXPR	1281:4	1281:4	7	maxtarget = ( reqwidth >= reqheight ) ? reqwidth : reqheight
ASSIGN	1281:4	1281:16	8	maxtarget = ( reqwidth >= reqheight ) ? reqwidth : reqheight
LVAL	1281:4	1281:4	9	maxtarget
FIELD	1281:4	1281:4	10	maxtarget
LEAF_NODE	1281:4	1281:4	11	maxtarget
ASSIGN_OP	1281:14	1281:14	9	=
LEAF_NODE	1281:14	1281:14	10	=
RVAL	1281:16	1281:16	9	( reqwidth >= reqheight ) ? reqwidth : reqheight
COND_EXPR	1281:16	1281:53	10	( reqwidth >= reqheight ) ? reqwidth : reqheight
CONDITION	1281:16	1281:38	11	( reqwidth >= reqheight )
LEAF_NODE	1281:16	1281:16	12	(
FIELD	1281:17	1281:17	12	reqwidth
LEAF_NODE	1281:17	1281:17	13	reqwidth
REL_OPERATOR	1281:26	1281:26	12	>=
LEAF_NODE	1281:26	1281:26	13	>=
FIELD	1281:29	1281:29	12	reqheight
LEAF_NODE	1281:29	1281:29	13	reqheight
LEAF_NODE	1281:38	1281:38	12	)
LEAF_NODE	1281:40	1281:40	11	?
EXPR	1281:42	1281:42	11	reqwidth
FIELD	1281:42	1281:42	12	reqwidth
LEAF_NODE	1281:42	1281:42	13	reqwidth
LEAF_NODE	1281:51	1281:51	11	:
FIELD	1281:53	1281:53	11	reqheight
LEAF_NODE	1281:53	1281:53	12	reqheight
LEAF_NODE	1281:62	1281:62	7	;
SELECTION	1283:4	1285:6	6	
KEYWORD	1283:4	1283:4	7	if
LEAF_NODE	1283:4	1283:4	8	if
LEAF_NODE	1283:7	1283:7	7	(
CONDITION	1283:8	1283:8	7	( ( maxsource == pswidth ) && ( maxtarget != reqwidth ) ) || ( ( maxsource == psheight ) && ( maxtarget != reqheight ) )
EXPR	1283:8	1283:8	8	( ( maxsource == pswidth ) && ( maxtarget != reqwidth ) ) || ( ( maxsource == psheight ) && ( maxtarget != reqheight ) )
OR	1283:8	1284:8	9	( ( maxsource == pswidth ) && ( maxtarget != reqwidth ) ) || ( ( maxsource == psheight ) && ( maxtarget != reqheight ) )
EXPR	1283:8	1283:58	10	( ( maxsource == pswidth ) && ( maxtarget != reqwidth ) )
LEAF_NODE	1283:8	1283:8	11	(
AND	1283:9	1283:35	11	( maxsource == pswidth ) && ( maxtarget != reqwidth )
EXPR	1283:9	1283:30	12	( maxsource == pswidth )
LEAF_NODE	1283:9	1283:9	13	(
FIELD	1283:10	1283:10	13	maxsource
LEAF_NODE	1283:10	1283:10	14	maxsource
EQ_OPERATOR	1283:20	1283:20	13	==
LEAF_NODE	1283:20	1283:20	14	==
FIELD	1283:23	1283:23	13	pswidth
LEAF_NODE	1283:23	1283:23	14	pswidth
LEAF_NODE	1283:30	1283:30	13	)
LEAF_NODE	1283:32	1283:32	12	&&
EXPR	1283:35	1283:57	12	( maxtarget != reqwidth )
LEAF_NODE	1283:35	1283:35	13	(
FIELD	1283:36	1283:36	13	maxtarget
LEAF_NODE	1283:36	1283:36	14	maxtarget
EQ_OPERATOR	1283:46	1283:46	13	!=
LEAF_NODE	1283:46	1283:46	14	!=
FIELD	1283:49	1283:49	13	reqwidth
LEAF_NODE	1283:49	1283:49	14	reqwidth
LEAF_NODE	1283:57	1283:57	13	)
LEAF_NODE	1283:58	1283:58	11	)
LEAF_NODE	1283:60	1283:60	10	||
EXPR	1284:8	1284:60	10	( ( maxsource == psheight ) && ( maxtarget != reqheight ) )
LEAF_NODE	1284:8	1284:8	11	(
AND	1284:9	1284:36	11	( maxsource == psheight ) && ( maxtarget != reqheight )
EXPR	1284:9	1284:31	12	( maxsource == psheight )
LEAF_NODE	1284:9	1284:9	13	(
FIELD	1284:10	1284:10	13	maxsource
LEAF_NODE	1284:10	1284:10	14	maxsource
EQ_OPERATOR	1284:20	1284:20	13	==
LEAF_NODE	1284:20	1284:20	14	==
FIELD	1284:23	1284:23	13	psheight
LEAF_NODE	1284:23	1284:23	14	psheight
LEAF_NODE	1284:31	1284:31	13	)
LEAF_NODE	1284:33	1284:33	12	&&
EXPR	1284:36	1284:59	12	( maxtarget != reqheight )
LEAF_NODE	1284:36	1284:36	13	(
FIELD	1284:37	1284:37	13	maxtarget
LEAF_NODE	1284:37	1284:37	14	maxtarget
EQ_OPERATOR	1284:47	1284:47	13	!=
LEAF_NODE	1284:47	1284:47	14	!=
FIELD	1284:50	1284:50	13	reqheight
LEAF_NODE	1284:50	1284:50	14	reqheight
LEAF_NODE	1284:59	1284:59	13	)
LEAF_NODE	1284:60	1284:60	11	)
LEAF_NODE	1284:61	1284:61	7	)
STATEMENTS	1285:6	1289:6	7	
LEAF_NODE	1285:6	1285:6	8	{
STATEMENTS	1286:6	1288:6	8	
EXPR_STATEMENT	1286:6	1286:20	9	* rotation = 90 ;
EXPR	1286:6	1286:6	10	* rotation = 90
ASSIGN	1286:6	1286:18	11	* rotation = 90
LVAL	1286:6	1286:6	12	* rotation
UNARY_EXPR	1286:6	1286:7	13	* rotation
UNARY_OPERATOR	1286:6	1286:6	14	*
LEAF_NODE	1286:6	1286:6	15	*
FIELD	1286:7	1286:7	14	rotation
LEAF_NODE	1286:7	1286:7	15	rotation
ASSIGN_OP	1286:16	1286:16	12	=
LEAF_NODE	1286:16	1286:16	13	=
RVAL	1286:18	1286:18	12	90
FIELD	1286:18	1286:18	13	90
LEAF_NODE	1286:18	1286:18	14	90
LEAF_NODE	1286:20	1286:20	10	;
EXPR_STATEMENT	1287:6	1287:48	9	xscale = ( reqwidth - left_offset ) / psheight ;
EXPR	1287:6	1287:6	10	xscale = ( reqwidth - left_offset ) / psheight
ASSIGN	1287:6	1287:15	11	xscale = ( reqwidth - left_offset ) / psheight
LVAL	1287:6	1287:6	12	xscale
FIELD	1287:6	1287:6	13	xscale
LEAF_NODE	1287:6	1287:6	14	xscale
ASSIGN_OP	1287:13	1287:13	12	=
LEAF_NODE	1287:13	1287:13	13	=
RVAL	1287:15	1287:40	12	( reqwidth - left_offset ) / psheight
LEAF_NODE	1287:15	1287:15	13	(
FIELD	1287:16	1287:16	13	reqwidth
LEAF_NODE	1287:16	1287:16	14	reqwidth
LEAF_NODE	1287:25	1287:25	13	-
FIELD	1287:27	1287:27	13	left_offset
LEAF_NODE	1287:27	1287:27	14	left_offset
LEAF_NODE	1287:38	1287:38	13	)
LEAF_NODE	1287:39	1287:39	13	/
FIELD	1287:40	1287:40	13	psheight
LEAF_NODE	1287:40	1287:40	14	psheight
LEAF_NODE	1287:48	1287:48	10	;
EXPR_STATEMENT	1288:6	1288:50	9	yscale = ( reqheight - bottom_offset ) / pswidth ;
EXPR	1288:6	1288:6	10	yscale = ( reqheight - bottom_offset ) / pswidth
ASSIGN	1288:6	1288:15	11	yscale = ( reqheight - bottom_offset ) / pswidth
LVAL	1288:6	1288:6	12	yscale
FIELD	1288:6	1288:6	13	yscale
LEAF_NODE	1288:6	1288:6	14	yscale
ASSIGN_OP	1288:13	1288:13	12	=
LEAF_NODE	1288:13	1288:13	13	=
RVAL	1288:15	1288:43	12	( reqheight - bottom_offset ) / pswidth
LEAF_NODE	1288:15	1288:15	13	(
FIELD	1288:16	1288:16	13	reqheight
LEAF_NODE	1288:16	1288:16	14	reqheight
LEAF_NODE	1288:26	1288:26	13	-
FIELD	1288:28	1288:28	13	bottom_offset
LEAF_NODE	1288:28	1288:28	14	bottom_offset
LEAF_NODE	1288:41	1288:41	13	)
LEAF_NODE	1288:42	1288:42	13	/
FIELD	1288:43	1288:43	13	pswidth
LEAF_NODE	1288:43	1288:43	14	pswidth
LEAF_NODE	1288:50	1288:50	10	;
LEAF_NODE	1289:6	1289:6	8	}
SELECTION	1290:4	1291:6	6	
KEYWORD	1290:4	1290:4	7	else
LEAF_NODE	1290:4	1290:4	8	else
STATEMENTS	1291:6	1294:6	7	
LEAF_NODE	1291:6	1291:6	8	{
STATEMENTS	1292:6	1293:6	8	
EXPR_STATEMENT	1292:6	1292:47	9	xscale = ( reqwidth - left_offset ) / pswidth ;
EXPR	1292:6	1292:6	10	xscale = ( reqwidth - left_offset ) / pswidth
ASSIGN	1292:6	1292:15	11	xscale = ( reqwidth - left_offset ) / pswidth
LVAL	1292:6	1292:6	12	xscale
FIELD	1292:6	1292:6	13	xscale
LEAF_NODE	1292:6	1292:6	14	xscale
ASSIGN_OP	1292:13	1292:13	12	=
LEAF_NODE	1292:13	1292:13	13	=
RVAL	1292:15	1292:40	12	( reqwidth - left_offset ) / pswidth
LEAF_NODE	1292:15	1292:15	13	(
FIELD	1292:16	1292:16	13	reqwidth
LEAF_NODE	1292:16	1292:16	14	reqwidth
LEAF_NODE	1292:25	1292:25	13	-
FIELD	1292:27	1292:27	13	left_offset
LEAF_NODE	1292:27	1292:27	14	left_offset
LEAF_NODE	1292:38	1292:38	13	)
LEAF_NODE	1292:39	1292:39	13	/
FIELD	1292:40	1292:40	13	pswidth
LEAF_NODE	1292:40	1292:40	14	pswidth
LEAF_NODE	1292:47	1292:47	10	;
EXPR_STATEMENT	1293:6	1293:51	9	yscale = ( reqheight - bottom_offset ) / psheight ;
EXPR	1293:6	1293:6	10	yscale = ( reqheight - bottom_offset ) / psheight
ASSIGN	1293:6	1293:15	11	yscale = ( reqheight - bottom_offset ) / psheight
LVAL	1293:6	1293:6	12	yscale
FIELD	1293:6	1293:6	13	yscale
LEAF_NODE	1293:6	1293:6	14	yscale
ASSIGN_OP	1293:13	1293:13	12	=
LEAF_NODE	1293:13	1293:13	13	=
RVAL	1293:15	1293:43	12	( reqheight - bottom_offset ) / psheight
LEAF_NODE	1293:15	1293:15	13	(
FIELD	1293:16	1293:16	13	reqheight
LEAF_NODE	1293:16	1293:16	14	reqheight
LEAF_NODE	1293:26	1293:26	13	-
FIELD	1293:28	1293:28	13	bottom_offset
LEAF_NODE	1293:28	1293:28	14	bottom_offset
LEAF_NODE	1293:41	1293:41	13	)
LEAF_NODE	1293:42	1293:42	13	/
FIELD	1293:43	1293:43	13	psheight
LEAF_NODE	1293:43	1293:43	14	psheight
LEAF_NODE	1293:51	1293:51	10	;
LEAF_NODE	1294:6	1294:6	8	}
EXPR_STATEMENT	1295:4	1295:48	6	* scale = ( xscale < yscale ) ? xscale : yscale ;
EXPR	1295:4	1295:4	7	* scale = ( xscale < yscale ) ? xscale : yscale
ASSIGN	1295:4	1295:13	8	* scale = ( xscale < yscale ) ? xscale : yscale
LVAL	1295:4	1295:4	9	* scale
UNARY_EXPR	1295:4	1295:5	10	* scale
UNARY_OPERATOR	1295:4	1295:4	11	*
LEAF_NODE	1295:4	1295:4	12	*
FIELD	1295:5	1295:5	11	scale
LEAF_NODE	1295:5	1295:5	12	scale
ASSIGN_OP	1295:11	1295:11	9	=
LEAF_NODE	1295:11	1295:11	10	=
RVAL	1295:13	1295:13	9	( xscale < yscale ) ? xscale : yscale
COND_EXPR	1295:13	1295:42	10	( xscale < yscale ) ? xscale : yscale
CONDITION	1295:13	1295:29	11	( xscale < yscale )
LEAF_NODE	1295:13	1295:13	12	(
FIELD	1295:14	1295:14	12	xscale
LEAF_NODE	1295:14	1295:14	13	xscale
REL_OPERATOR	1295:21	1295:21	12	<
LEAF_NODE	1295:21	1295:21	13	<
FIELD	1295:23	1295:23	12	yscale
LEAF_NODE	1295:23	1295:23	13	yscale
LEAF_NODE	1295:29	1295:29	12	)
LEAF_NODE	1295:31	1295:31	11	?
EXPR	1295:33	1295:33	11	xscale
FIELD	1295:33	1295:33	12	xscale
LEAF_NODE	1295:33	1295:33	13	xscale
LEAF_NODE	1295:40	1295:40	11	:
FIELD	1295:42	1295:42	11	yscale
LEAF_NODE	1295:42	1295:42	12	yscale
LEAF_NODE	1295:48	1295:48	7	;
SELECTION	1298:4	1299:6	6	
KEYWORD	1298:4	1298:4	7	if
LEAF_NODE	1298:4	1298:4	8	if
LEAF_NODE	1298:7	1298:7	7	(
CONDITION	1298:8	1298:8	7	* scale > 1.0
EXPR	1298:8	1298:17	8	* scale > 1.0
UNARY_EXPR	1298:8	1298:9	9	* scale
UNARY_OPERATOR	1298:8	1298:8	10	*
LEAF_NODE	1298:8	1298:8	11	*
FIELD	1298:9	1298:9	10	scale
LEAF_NODE	1298:9	1298:9	11	scale
REL_OPERATOR	1298:15	1298:15	9	>
LEAF_NODE	1298:15	1298:15	10	>
FIELD	1298:17	1298:17	9	1.0
LEAF_NODE	1298:17	1298:17	10	1.0
LEAF_NODE	1298:20	1298:20	7	)
STATEMENTS	1299:6	1299:6	7	
EXPR_STATEMENT	1299:6	1299:18	8	* scale = 1.0 ;
EXPR	1299:6	1299:6	9	* scale = 1.0
ASSIGN	1299:6	1299:15	10	* scale = 1.0
LVAL	1299:6	1299:6	11	* scale
UNARY_EXPR	1299:6	1299:7	12	* scale
UNARY_OPERATOR	1299:6	1299:6	13	*
LEAF_NODE	1299:6	1299:6	14	*
FIELD	1299:7	1299:7	13	scale
LEAF_NODE	1299:7	1299:7	14	scale
ASSIGN_OP	1299:13	1299:13	11	=
LEAF_NODE	1299:13	1299:13	12	=
RVAL	1299:15	1299:15	11	1.0
FIELD	1299:15	1299:15	12	1.0
LEAF_NODE	1299:15	1299:15	13	1.0
LEAF_NODE	1299:18	1299:18	9	;
SELECTION	1304:4	1305:6	6	
KEYWORD	1304:4	1304:4	7	if
LEAF_NODE	1304:4	1304:4	8	if
LEAF_NODE	1304:7	1304:7	7	(
CONDITION	1304:8	1304:8	7	! npages
EXPR	1304:8	1304:8	8	! npages
UNARY_EXPR	1304:8	1304:9	9	! npages
UNARY_OPERATOR	1304:8	1304:8	10	!
LEAF_NODE	1304:8	1304:8	11	!
FIELD	1304:9	1304:9	10	npages
LEAF_NODE	1304:9	1304:9	11	npages
LEAF_NODE	1304:15	1304:15	7	)
STATEMENTS	1305:6	1305:6	7	
EXPR_STATEMENT	1305:6	1305:45	8	PSHead ( fd , reqwidth , reqheight , ox , oy ) ;
EXPR	1305:6	1305:6	9	PSHead ( fd , reqwidth , reqheight , ox , oy )
FUNCTION_CALL	1305:6	1305:44	10	PSHead ( fd , reqwidth , reqheight , ox , oy )
CALLEE	1305:6	1305:6	11	PSHead
LEAF_NODE	1305:6	1305:6	12	PSHead
LEAF_NODE	1305:12	1305:12	11	(
ARGUMENT	1305:13	1305:13	11	fd
FIELD	1305:13	1305:13	12	fd
LEAF_NODE	1305:13	1305:13	13	fd
LEAF_NODE	1305:15	1305:15	11	,
ARGUMENT	1305:17	1305:17	11	reqwidth
FIELD	1305:17	1305:17	12	reqwidth
LEAF_NODE	1305:17	1305:17	13	reqwidth
LEAF_NODE	1305:25	1305:25	11	,
ARGUMENT	1305:27	1305:27	11	reqheight
FIELD	1305:27	1305:27	12	reqheight
LEAF_NODE	1305:27	1305:27	13	reqheight
LEAF_NODE	1305:36	1305:36	11	,
ARGUMENT	1305:38	1305:38	11	ox
FIELD	1305:38	1305:38	12	ox
LEAF_NODE	1305:38	1305:38	13	ox
LEAF_NODE	1305:40	1305:40	11	,
ARGUMENT	1305:42	1305:42	11	oy
FIELD	1305:42	1305:42	12	oy
LEAF_NODE	1305:42	1305:42	13	oy
LEAF_NODE	1305:44	1305:44	11	)
LEAF_NODE	1305:45	1305:45	9	;
JUMP_STATEMENT	1307:4	1307:14	6	return ( 0 ) ;
KEYWORD	1307:4	1307:4	7	return
LEAF_NODE	1307:4	1307:4	8	return
DESTINATION	1307:11	1307:11	7	( 0 )
EXPR	1307:11	1307:13	8	( 0 )
LEAF_NODE	1307:11	1307:11	9	(
FIELD	1307:12	1307:12	9	0
LEAF_NODE	1307:12	1307:12	10	0
LEAF_NODE	1307:13	1307:13	9	)
LEAF_NODE	1307:14	1307:14	7	;
LEAF_NODE	1308:4	1308:4	5	}
SELECTION	1314:2	1315:4	3	
KEYWORD	1314:2	1314:2	4	switch
LEAF_NODE	1314:2	1314:2	5	switch
LEAF_NODE	1314:9	1314:9	4	(
CONDITION	1314:10	1314:10	4	* rotation
EXPR	1314:10	1314:10	5	* rotation
UNARY_EXPR	1314:10	1314:11	6	* rotation
UNARY_OPERATOR	1314:10	1314:10	7	*
LEAF_NODE	1314:10	1314:10	8	*
FIELD	1314:11	1314:11	7	rotation
LEAF_NODE	1314:11	1314:11	8	rotation
LEAF_NODE	1314:19	1314:19	4	)
STATEMENTS	1315:4	1395:4	4	
LEAF_NODE	1315:4	1315:4	5	{
STATEMENTS	1316:4	1394:14	5	
LABEL	1316:4	1316:12	6	case 0 :
LEAF_NODE	1316:4	1316:4	7	case
LEAF_NODE	1316:11	1316:11	7	0
LEAF_NODE	1316:12	1316:12	7	:
LABEL	1317:4	1317:12	6	case 180 :
LEAF_NODE	1317:4	1317:4	7	case
LEAF_NODE	1317:9	1317:9	7	180
LEAF_NODE	1317:12	1317:12	7	:
SELECTION	1317:14	1318:16	6	
KEYWORD	1317:14	1317:14	7	if
LEAF_NODE	1317:14	1317:14	8	if
LEAF_NODE	1317:17	1317:17	7	(
CONDITION	1317:18	1317:18	7	( splitheight != 0 ) || ( splitwidth != 0 )
EXPR	1317:18	1317:18	8	( splitheight != 0 ) || ( splitwidth != 0 )
OR	1317:18	1317:41	9	( splitheight != 0 ) || ( splitwidth != 0 )
EXPR	1317:18	1317:35	10	( splitheight != 0 )
LEAF_NODE	1317:18	1317:18	11	(
FIELD	1317:19	1317:19	11	splitheight
LEAF_NODE	1317:19	1317:19	12	splitheight
EQ_OPERATOR	1317:31	1317:31	11	!=
LEAF_NODE	1317:31	1317:31	12	!=
FIELD	1317:34	1317:34	11	0
LEAF_NODE	1317:34	1317:34	12	0
LEAF_NODE	1317:35	1317:35	11	)
LEAF_NODE	1317:38	1317:38	10	||
EXPR	1317:41	1317:57	10	( splitwidth != 0 )
LEAF_NODE	1317:41	1317:41	11	(
FIELD	1317:42	1317:42	11	splitwidth
LEAF_NODE	1317:42	1317:42	12	splitwidth
EQ_OPERATOR	1317:53	1317:53	11	!=
LEAF_NODE	1317:53	1317:53	12	!=
FIELD	1317:56	1317:56	11	0
LEAF_NODE	1317:56	1317:56	12	0
LEAF_NODE	1317:57	1317:57	11	)
LEAF_NODE	1317:58	1317:58	7	)
STATEMENTS	1318:16	1334:15	7	
LEAF_NODE	1318:16	1318:16	8	{
STATEMENTS	1319:16	1333:16	8	
SELECTION	1319:16	1320:18	9	
KEYWORD	1319:16	1319:16	10	if
LEAF_NODE	1319:16	1319:16	11	if
LEAF_NODE	1319:19	1319:19	10	(
CONDITION	1319:20	1319:20	10	( page_width != 0 ) || ( page_height != 0 )
EXPR	1319:20	1319:20	11	( page_width != 0 ) || ( page_height != 0 )
OR	1319:20	1319:41	12	( page_width != 0 ) || ( page_height != 0 )
EXPR	1319:20	1319:36	13	( page_width != 0 )
LEAF_NODE	1319:20	1319:20	14	(
FIELD	1319:21	1319:21	14	page_width
LEAF_NODE	1319:21	1319:21	15	page_width
EQ_OPERATOR	1319:32	1319:32	14	!=
LEAF_NODE	1319:32	1319:32	15	!=
FIELD	1319:35	1319:35	14	0
LEAF_NODE	1319:35	1319:35	15	0
LEAF_NODE	1319:36	1319:36	14	)
LEAF_NODE	1319:38	1319:38	13	||
EXPR	1319:41	1319:58	13	( page_height != 0 )
LEAF_NODE	1319:41	1319:41	14	(
FIELD	1319:42	1319:42	14	page_height
LEAF_NODE	1319:42	1319:42	15	page_height
EQ_OPERATOR	1319:54	1319:54	14	!=
LEAF_NODE	1319:54	1319:54	15	!=
FIELD	1319:57	1319:57	14	0
LEAF_NODE	1319:57	1319:57	15	0
LEAF_NODE	1319:58	1319:58	14	)
LEAF_NODE	1319:59	1319:59	10	)
STATEMENTS	1320:18	1328:17	10	
LEAF_NODE	1320:18	1320:18	11	{
STATEMENTS	1321:17	1323:18	11	
EXPR_STATEMENT	1321:17	1321:89	12	xscale = ( reqwidth - left_offset ) / ( page_width ? page_width : pswidth ) ;
EXPR	1321:17	1321:17	13	xscale = ( reqwidth - left_offset ) / ( page_width ? page_width : pswidth )
ASSIGN	1321:17	1321:26	14	xscale = ( reqwidth - left_offset ) / ( page_width ? page_width : pswidth )
LVAL	1321:17	1321:17	15	xscale
FIELD	1321:17	1321:17	16	xscale
LEAF_NODE	1321:17	1321:17	17	xscale
ASSIGN_OP	1321:24	1321:24	15	=
LEAF_NODE	1321:24	1321:24	16	=
RVAL	1321:26	1321:88	15	( reqwidth - left_offset ) / ( page_width ? page_width : pswidth )
LEAF_NODE	1321:26	1321:26	16	(
FIELD	1321:27	1321:27	16	reqwidth
LEAF_NODE	1321:27	1321:27	17	reqwidth
LEAF_NODE	1321:37	1321:37	16	-
FIELD	1321:39	1321:39	16	left_offset
LEAF_NODE	1321:39	1321:39	17	left_offset
LEAF_NODE	1321:50	1321:50	16	)
LEAF_NODE	1321:52	1321:52	16	/
LEAF_NODE	1321:54	1321:54	16	(
COND_EXPR	1321:55	1321:81	16	page_width ? page_width : pswidth
CONDITION	1321:55	1321:55	17	page_width
FIELD	1321:55	1321:55	18	page_width
LEAF_NODE	1321:55	1321:55	19	page_width
LEAF_NODE	1321:66	1321:66	17	?
EXPR	1321:68	1321:68	17	page_width
FIELD	1321:68	1321:68	18	page_width
LEAF_NODE	1321:68	1321:68	19	page_width
LEAF_NODE	1321:79	1321:79	17	:
FIELD	1321:81	1321:81	17	pswidth
LEAF_NODE	1321:81	1321:81	18	pswidth
LEAF_NODE	1321:88	1321:88	16	)
LEAF_NODE	1321:89	1321:89	13	;
EXPR_STATEMENT	1322:17	1322:94	12	yscale = ( reqheight - bottom_offset ) / ( page_height ? page_height : psheight ) ;
EXPR	1322:17	1322:17	13	yscale = ( reqheight - bottom_offset ) / ( page_height ? page_height : psheight )
ASSIGN	1322:17	1322:26	14	yscale = ( reqheight - bottom_offset ) / ( page_height ? page_height : psheight )
LVAL	1322:17	1322:17	15	yscale
FIELD	1322:17	1322:17	16	yscale
LEAF_NODE	1322:17	1322:17	17	yscale
ASSIGN_OP	1322:24	1322:24	15	=
LEAF_NODE	1322:24	1322:24	16	=
RVAL	1322:26	1322:93	15	( reqheight - bottom_offset ) / ( page_height ? page_height : psheight )
LEAF_NODE	1322:26	1322:26	16	(
FIELD	1322:27	1322:27	16	reqheight
LEAF_NODE	1322:27	1322:27	17	reqheight
LEAF_NODE	1322:37	1322:37	16	-
FIELD	1322:39	1322:39	16	bottom_offset
LEAF_NODE	1322:39	1322:39	17	bottom_offset
LEAF_NODE	1322:52	1322:52	16	)
LEAF_NODE	1322:54	1322:54	16	/
LEAF_NODE	1322:56	1322:56	16	(
COND_EXPR	1322:57	1322:85	16	page_height ? page_height : psheight
CONDITION	1322:57	1322:57	17	page_height
FIELD	1322:57	1322:57	18	page_height
LEAF_NODE	1322:57	1322:57	19	page_height
LEAF_NODE	1322:69	1322:69	17	?
EXPR	1322:71	1322:71	17	page_height
FIELD	1322:71	1322:71	18	page_height
LEAF_NODE	1322:71	1322:71	19	page_height
LEAF_NODE	1322:83	1322:83	17	:
FIELD	1322:85	1322:85	17	psheight
LEAF_NODE	1322:85	1322:85	18	psheight
LEAF_NODE	1322:93	1322:93	16	)
LEAF_NODE	1322:94	1322:94	13	;
EXPR_STATEMENT	1323:18	1323:62	12	* scale = ( xscale < yscale ) ? xscale : yscale ;
EXPR	1323:18	1323:18	13	* scale = ( xscale < yscale ) ? xscale : yscale
ASSIGN	1323:18	1323:27	14	* scale = ( xscale < yscale ) ? xscale : yscale
LVAL	1323:18	1323:18	15	* scale
UNARY_EXPR	1323:18	1323:19	16	* scale
UNARY_OPERATOR	1323:18	1323:18	17	*
LEAF_NODE	1323:18	1323:18	18	*
FIELD	1323:19	1323:19	17	scale
LEAF_NODE	1323:19	1323:19	18	scale
ASSIGN_OP	1323:25	1323:25	15	=
LEAF_NODE	1323:25	1323:25	16	=
RVAL	1323:27	1323:27	15	( xscale < yscale ) ? xscale : yscale
COND_EXPR	1323:27	1323:56	16	( xscale < yscale ) ? xscale : yscale
CONDITION	1323:27	1323:43	17	( xscale < yscale )
LEAF_NODE	1323:27	1323:27	18	(
FIELD	1323:28	1323:28	18	xscale
LEAF_NODE	1323:28	1323:28	19	xscale
REL_OPERATOR	1323:35	1323:35	18	<
LEAF_NODE	1323:35	1323:35	19	<
FIELD	1323:37	1323:37	18	yscale
LEAF_NODE	1323:37	1323:37	19	yscale
LEAF_NODE	1323:43	1323:43	18	)
LEAF_NODE	1323:45	1323:45	17	?
EXPR	1323:47	1323:47	17	xscale
FIELD	1323:47	1323:47	18	xscale
LEAF_NODE	1323:47	1323:47	19	xscale
LEAF_NODE	1323:54	1323:54	17	:
FIELD	1323:56	1323:56	17	yscale
LEAF_NODE	1323:56	1323:56	18	yscale
LEAF_NODE	1323:62	1323:62	13	;
LEAF_NODE	1328:17	1328:17	11	}
SELECTION	1329:16	1330:17	9	
KEYWORD	1329:16	1329:16	10	else
LEAF_NODE	1329:16	1329:16	11	else
STATEMENTS	1330:17	1330:17	10	
EXPR_STATEMENT	1330:17	1330:29	11	* scale = 1.0 ;
EXPR	1330:17	1330:17	12	* scale = 1.0
ASSIGN	1330:17	1330:26	13	* scale = 1.0
LVAL	1330:17	1330:17	14	* scale
UNARY_EXPR	1330:17	1330:18	15	* scale
UNARY_OPERATOR	1330:17	1330:17	16	*
LEAF_NODE	1330:17	1330:17	17	*
FIELD	1330:18	1330:18	16	scale
LEAF_NODE	1330:18	1330:18	17	scale
ASSIGN_OP	1330:24	1330:24	14	=
LEAF_NODE	1330:24	1330:24	15	=
RVAL	1330:26	1330:26	14	1.0
FIELD	1330:26	1330:26	15	1.0
LEAF_NODE	1330:26	1330:26	16	1.0
LEAF_NODE	1330:29	1330:29	12	;
EXPR_STATEMENT	1332:16	1332:71	9	view_width = splitwidth ? splitwidth : * scale * pswidth ;
EXPR	1332:16	1332:16	10	view_width = splitwidth ? splitwidth : * scale * pswidth
ASSIGN	1332:16	1332:29	11	view_width = splitwidth ? splitwidth : * scale * pswidth
LVAL	1332:16	1332:16	12	view_width
FIELD	1332:16	1332:16	13	view_width
LEAF_NODE	1332:16	1332:16	14	view_width
ASSIGN_OP	1332:27	1332:27	12	=
LEAF_NODE	1332:27	1332:27	13	=
RVAL	1332:29	1332:29	12	splitwidth ? splitwidth : * scale * pswidth
COND_EXPR	1332:29	1332:64	13	splitwidth ? splitwidth : * scale * pswidth
CONDITION	1332:29	1332:29	14	splitwidth
FIELD	1332:29	1332:29	15	splitwidth
LEAF_NODE	1332:29	1332:29	16	splitwidth
LEAF_NODE	1332:40	1332:40	14	?
EXPR	1332:42	1332:42	14	splitwidth
FIELD	1332:42	1332:42	15	splitwidth
LEAF_NODE	1332:42	1332:42	16	splitwidth
LEAF_NODE	1332:53	1332:53	14	:
UNARY_EXPR	1332:55	1332:56	14	* scale
UNARY_OPERATOR	1332:55	1332:55	15	*
LEAF_NODE	1332:55	1332:55	16	*
FIELD	1332:56	1332:56	15	scale
LEAF_NODE	1332:56	1332:56	16	scale
LEAF_NODE	1332:62	1332:62	14	*
FIELD	1332:64	1332:64	14	pswidth
LEAF_NODE	1332:64	1332:64	15	pswidth
LEAF_NODE	1332:71	1332:71	10	;
EXPR_STATEMENT	1333:16	1333:74	9	view_height = splitheight ? splitheight : * scale * psheight ;
EXPR	1333:16	1333:16	10	view_height = splitheight ? splitheight : * scale * psheight
ASSIGN	1333:16	1333:30	11	view_height = splitheight ? splitheight : * scale * psheight
LVAL	1333:16	1333:16	12	view_height
FIELD	1333:16	1333:16	13	view_height
LEAF_NODE	1333:16	1333:16	14	view_height
ASSIGN_OP	1333:28	1333:28	12	=
LEAF_NODE	1333:28	1333:28	13	=
RVAL	1333:30	1333:30	12	splitheight ? splitheight : * scale * psheight
COND_EXPR	1333:30	1333:66	13	splitheight ? splitheight : * scale * psheight
CONDITION	1333:30	1333:30	14	splitheight
FIELD	1333:30	1333:30	15	splitheight
LEAF_NODE	1333:30	1333:30	16	splitheight
LEAF_NODE	1333:42	1333:42	14	?
EXPR	1333:44	1333:44	14	splitheight
FIELD	1333:44	1333:44	15	splitheight
LEAF_NODE	1333:44	1333:44	16	splitheight
LEAF_NODE	1333:55	1333:55	14	:
UNARY_EXPR	1333:57	1333:58	14	* scale
UNARY_OPERATOR	1333:57	1333:57	15	*
LEAF_NODE	1333:57	1333:57	16	*
FIELD	1333:58	1333:58	15	scale
LEAF_NODE	1333:58	1333:58	16	scale
LEAF_NODE	1333:64	1333:64	14	*
FIELD	1333:66	1333:66	14	psheight
LEAF_NODE	1333:66	1333:66	15	psheight
LEAF_NODE	1333:74	1333:74	10	;
LEAF_NODE	1334:15	1334:15	8	}
SELECTION	1335:14	1336:16	6	
KEYWORD	1335:14	1335:14	7	else
LEAF_NODE	1335:14	1335:14	8	else
STATEMENTS	1336:16	1353:15	7	
LEAF_NODE	1336:16	1336:16	8	{
STATEMENTS	1337:16	1345:16	8	
SELECTION	1337:16	1338:18	9	
KEYWORD	1337:16	1337:16	10	if
LEAF_NODE	1337:16	1337:16	11	if
LEAF_NODE	1337:19	1337:19	10	(
CONDITION	1337:20	1337:20	10	( page_width != 0 ) || ( page_height != 0 )
EXPR	1337:20	1337:20	11	( page_width != 0 ) || ( page_height != 0 )
OR	1337:20	1337:41	12	( page_width != 0 ) || ( page_height != 0 )
EXPR	1337:20	1337:36	13	( page_width != 0 )
LEAF_NODE	1337:20	1337:20	14	(
FIELD	1337:21	1337:21	14	page_width
LEAF_NODE	1337:21	1337:21	15	page_width
EQ_OPERATOR	1337:32	1337:32	14	!=
LEAF_NODE	1337:32	1337:32	15	!=
FIELD	1337:35	1337:35	14	0
LEAF_NODE	1337:35	1337:35	15	0
LEAF_NODE	1337:36	1337:36	14	)
LEAF_NODE	1337:38	1337:38	13	||
EXPR	1337:41	1337:58	13	( page_height != 0 )
LEAF_NODE	1337:41	1337:41	14	(
FIELD	1337:42	1337:42	14	page_height
LEAF_NODE	1337:42	1337:42	15	page_height
EQ_OPERATOR	1337:54	1337:54	14	!=
LEAF_NODE	1337:54	1337:54	15	!=
FIELD	1337:57	1337:57	14	0
LEAF_NODE	1337:57	1337:57	15	0
LEAF_NODE	1337:58	1337:58	14	)
LEAF_NODE	1337:59	1337:59	10	)
STATEMENTS	1338:18	1344:17	10	
LEAF_NODE	1338:18	1338:18	11	{
STATEMENTS	1339:18	1343:18	11	
EXPR_STATEMENT	1339:18	1339:61	12	xscale = ( reqwidth - left_offset ) / pswidth ;
EXPR	1339:18	1339:18	13	xscale = ( reqwidth - left_offset ) / pswidth
ASSIGN	1339:18	1339:27	14	xscale = ( reqwidth - left_offset ) / pswidth
LVAL	1339:18	1339:18	15	xscale
FIELD	1339:18	1339:18	16	xscale
LEAF_NODE	1339:18	1339:18	17	xscale
ASSIGN_OP	1339:25	1339:25	15	=
LEAF_NODE	1339:25	1339:25	16	=
RVAL	1339:27	1339:54	15	( reqwidth - left_offset ) / pswidth
LEAF_NODE	1339:27	1339:27	16	(
FIELD	1339:28	1339:28	16	reqwidth
LEAF_NODE	1339:28	1339:28	17	reqwidth
LEAF_NODE	1339:37	1339:37	16	-
FIELD	1339:39	1339:39	16	left_offset
LEAF_NODE	1339:39	1339:39	17	left_offset
LEAF_NODE	1339:50	1339:50	16	)
LEAF_NODE	1339:52	1339:52	16	/
FIELD	1339:54	1339:54	16	pswidth
LEAF_NODE	1339:54	1339:54	17	pswidth
LEAF_NODE	1339:61	1339:61	13	;
EXPR_STATEMENT	1340:18	1340:65	12	yscale = ( reqheight - bottom_offset ) / psheight ;
EXPR	1340:18	1340:18	13	yscale = ( reqheight - bottom_offset ) / psheight
ASSIGN	1340:18	1340:27	14	yscale = ( reqheight - bottom_offset ) / psheight
LVAL	1340:18	1340:18	15	yscale
FIELD	1340:18	1340:18	16	yscale
LEAF_NODE	1340:18	1340:18	17	yscale
ASSIGN_OP	1340:25	1340:25	15	=
LEAF_NODE	1340:25	1340:25	16	=
RVAL	1340:27	1340:57	15	( reqheight - bottom_offset ) / psheight
LEAF_NODE	1340:27	1340:27	16	(
FIELD	1340:28	1340:28	16	reqheight
LEAF_NODE	1340:28	1340:28	17	reqheight
LEAF_NODE	1340:38	1340:38	16	-
FIELD	1340:40	1340:40	16	bottom_offset
LEAF_NODE	1340:40	1340:40	17	bottom_offset
LEAF_NODE	1340:53	1340:53	16	)
LEAF_NODE	1340:55	1340:55	16	/
FIELD	1340:57	1340:57	16	psheight
LEAF_NODE	1340:57	1340:57	17	psheight
LEAF_NODE	1340:65	1340:65	13	;
EXPR_STATEMENT	1342:18	1342:39	12	view_width = reqwidth ;
EXPR	1342:18	1342:18	13	view_width = reqwidth
ASSIGN	1342:18	1342:31	14	view_width = reqwidth
LVAL	1342:18	1342:18	15	view_width
FIELD	1342:18	1342:18	16	view_width
LEAF_NODE	1342:18	1342:18	17	view_width
ASSIGN_OP	1342:29	1342:29	15	=
LEAF_NODE	1342:29	1342:29	16	=
RVAL	1342:31	1342:31	15	reqwidth
FIELD	1342:31	1342:31	16	reqwidth
LEAF_NODE	1342:31	1342:31	17	reqwidth
LEAF_NODE	1342:39	1342:39	13	;
EXPR_STATEMENT	1343:18	1343:41	12	view_height = reqheight ;
EXPR	1343:18	1343:18	13	view_height = reqheight
ASSIGN	1343:18	1343:32	14	view_height = reqheight
LVAL	1343:18	1343:18	15	view_height
FIELD	1343:18	1343:18	16	view_height
LEAF_NODE	1343:18	1343:18	17	view_height
ASSIGN_OP	1343:30	1343:30	15	=
LEAF_NODE	1343:30	1343:30	16	=
RVAL	1343:32	1343:32	15	reqheight
FIELD	1343:32	1343:32	16	reqheight
LEAF_NODE	1343:32	1343:32	17	reqheight
LEAF_NODE	1343:41	1343:41	13	;
LEAF_NODE	1344:17	1344:17	11	}
SELECTION	1345:16	1346:18	9	
KEYWORD	1345:16	1345:16	10	else
LEAF_NODE	1345:16	1345:16	11	else
STATEMENTS	1346:18	1352:17	10	
LEAF_NODE	1346:18	1346:18	11	{
STATEMENTS	1347:18	1351:18	11	
EXPR_STATEMENT	1347:18	1347:58	12	xscale = ( pswidth - left_offset ) / pswidth ;
EXPR	1347:18	1347:18	13	xscale = ( pswidth - left_offset ) / pswidth
ASSIGN	1347:18	1347:27	14	xscale = ( pswidth - left_offset ) / pswidth
LVAL	1347:18	1347:18	15	xscale
FIELD	1347:18	1347:18	16	xscale
LEAF_NODE	1347:18	1347:18	17	xscale
ASSIGN_OP	1347:25	1347:25	15	=
LEAF_NODE	1347:25	1347:25	16	=
RVAL	1347:27	1347:51	15	( pswidth - left_offset ) / pswidth
LEAF_NODE	1347:27	1347:27	16	(
FIELD	1347:28	1347:28	16	pswidth
LEAF_NODE	1347:28	1347:28	17	pswidth
LEAF_NODE	1347:36	1347:36	16	-
FIELD	1347:38	1347:38	16	left_offset
LEAF_NODE	1347:38	1347:38	17	left_offset
LEAF_NODE	1347:49	1347:49	16	)
LEAF_NODE	1347:50	1347:50	16	/
FIELD	1347:51	1347:51	16	pswidth
LEAF_NODE	1347:51	1347:51	17	pswidth
LEAF_NODE	1347:58	1347:58	13	;
EXPR_STATEMENT	1348:18	1348:62	12	yscale = ( psheight - bottom_offset ) / psheight ;
EXPR	1348:18	1348:18	13	yscale = ( psheight - bottom_offset ) / psheight
ASSIGN	1348:18	1348:27	14	yscale = ( psheight - bottom_offset ) / psheight
LVAL	1348:18	1348:18	15	yscale
FIELD	1348:18	1348:18	16	yscale
LEAF_NODE	1348:18	1348:18	17	yscale
ASSIGN_OP	1348:25	1348:25	15	=
LEAF_NODE	1348:25	1348:25	16	=
RVAL	1348:27	1348:54	15	( psheight - bottom_offset ) / psheight
LEAF_NODE	1348:27	1348:27	16	(
FIELD	1348:28	1348:28	16	psheight
LEAF_NODE	1348:28	1348:28	17	psheight
LEAF_NODE	1348:37	1348:37	16	-
FIELD	1348:39	1348:39	16	bottom_offset
LEAF_NODE	1348:39	1348:39	17	bottom_offset
LEAF_NODE	1348:52	1348:52	16	)
LEAF_NODE	1348:53	1348:53	16	/
FIELD	1348:54	1348:54	16	psheight
LEAF_NODE	1348:54	1348:54	17	psheight
LEAF_NODE	1348:62	1348:62	13	;
EXPR_STATEMENT	1350:18	1350:38	12	view_width = pswidth ;
EXPR	1350:18	1350:18	13	view_width = pswidth
ASSIGN	1350:18	1350:31	14	view_width = pswidth
LVAL	1350:18	1350:18	15	view_width
FIELD	1350:18	1350:18	16	view_width
LEAF_NODE	1350:18	1350:18	17	view_width
ASSIGN_OP	1350:29	1350:29	15	=
LEAF_NODE	1350:29	1350:29	16	=
RVAL	1350:31	1350:31	15	pswidth
FIELD	1350:31	1350:31	16	pswidth
LEAF_NODE	1350:31	1350:31	17	pswidth
LEAF_NODE	1350:38	1350:38	13	;
EXPR_STATEMENT	1351:18	1351:40	12	view_height = psheight ;
EXPR	1351:18	1351:18	13	view_height = psheight
ASSIGN	1351:18	1351:32	14	view_height = psheight
LVAL	1351:18	1351:18	15	view_height
FIELD	1351:18	1351:18	16	view_height
LEAF_NODE	1351:18	1351:18	17	view_height
ASSIGN_OP	1351:30	1351:30	15	=
LEAF_NODE	1351:30	1351:30	16	=
RVAL	1351:32	1351:32	15	psheight
FIELD	1351:32	1351:32	16	psheight
LEAF_NODE	1351:32	1351:32	17	psheight
LEAF_NODE	1351:40	1351:40	13	;
LEAF_NODE	1352:17	1352:17	11	}
LEAF_NODE	1353:15	1353:15	8	}
JUMP_STATEMENT	1354:13	1354:18	6	break DESTINATION ;
KEYWORD	1354:13	1354:13	7	break
LEAF_NODE	1354:13	1354:13	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1354:18	1354:18	7	;
LABEL	1355:4	1355:12	6	case 90 :
LEAF_NODE	1355:4	1355:4	7	case
LEAF_NODE	1355:10	1355:10	7	90
LEAF_NODE	1355:12	1355:12	7	:
LABEL	1356:4	1356:12	6	case 270 :
LEAF_NODE	1356:4	1356:4	7	case
LEAF_NODE	1356:9	1356:9	7	270
LEAF_NODE	1356:12	1356:12	7	:
SELECTION	1356:14	1357:16	6	
KEYWORD	1356:14	1356:14	7	if
LEAF_NODE	1356:14	1356:14	8	if
LEAF_NODE	1356:17	1356:17	7	(
CONDITION	1356:18	1356:18	7	( splitheight != 0 ) || ( splitwidth != 0 )
EXPR	1356:18	1356:18	8	( splitheight != 0 ) || ( splitwidth != 0 )
OR	1356:18	1356:40	9	( splitheight != 0 ) || ( splitwidth != 0 )
EXPR	1356:18	1356:35	10	( splitheight != 0 )
LEAF_NODE	1356:18	1356:18	11	(
FIELD	1356:19	1356:19	11	splitheight
LEAF_NODE	1356:19	1356:19	12	splitheight
EQ_OPERATOR	1356:31	1356:31	11	!=
LEAF_NODE	1356:31	1356:31	12	!=
FIELD	1356:34	1356:34	11	0
LEAF_NODE	1356:34	1356:34	12	0
LEAF_NODE	1356:35	1356:35	11	)
LEAF_NODE	1356:37	1356:37	10	||
EXPR	1356:40	1356:56	10	( splitwidth != 0 )
LEAF_NODE	1356:40	1356:40	11	(
FIELD	1356:41	1356:41	11	splitwidth
LEAF_NODE	1356:41	1356:41	12	splitwidth
EQ_OPERATOR	1356:52	1356:52	11	!=
LEAF_NODE	1356:52	1356:52	12	!=
FIELD	1356:55	1356:55	11	0
LEAF_NODE	1356:55	1356:55	12	0
LEAF_NODE	1356:56	1356:56	11	)
LEAF_NODE	1356:57	1356:57	7	)
STATEMENTS	1357:16	1372:15	7	
LEAF_NODE	1357:16	1357:16	8	{
STATEMENTS	1358:16	1371:16	8	
SELECTION	1358:16	1359:18	9	
KEYWORD	1358:16	1358:16	10	if
LEAF_NODE	1358:16	1358:16	11	if
LEAF_NODE	1358:19	1358:19	10	(
CONDITION	1358:20	1358:20	10	( page_width != 0 ) || ( page_height != 0 )
EXPR	1358:20	1358:20	11	( page_width != 0 ) || ( page_height != 0 )
OR	1358:20	1358:41	12	( page_width != 0 ) || ( page_height != 0 )
EXPR	1358:20	1358:36	13	( page_width != 0 )
LEAF_NODE	1358:20	1358:20	14	(
FIELD	1358:21	1358:21	14	page_width
LEAF_NODE	1358:21	1358:21	15	page_width
EQ_OPERATOR	1358:32	1358:32	14	!=
LEAF_NODE	1358:32	1358:32	15	!=
FIELD	1358:35	1358:35	14	0
LEAF_NODE	1358:35	1358:35	15	0
LEAF_NODE	1358:36	1358:36	14	)
LEAF_NODE	1358:38	1358:38	13	||
EXPR	1358:41	1358:58	13	( page_height != 0 )
LEAF_NODE	1358:41	1358:41	14	(
FIELD	1358:42	1358:42	14	page_height
LEAF_NODE	1358:42	1358:42	15	page_height
EQ_OPERATOR	1358:54	1358:54	14	!=
LEAF_NODE	1358:54	1358:54	15	!=
FIELD	1358:57	1358:57	14	0
LEAF_NODE	1358:57	1358:57	15	0
LEAF_NODE	1358:58	1358:58	14	)
LEAF_NODE	1358:59	1358:59	10	)
STATEMENTS	1359:18	1367:17	10	
LEAF_NODE	1359:18	1359:18	11	{
STATEMENTS	1360:17	1362:18	11	
EXPR_STATEMENT	1360:17	1360:60	12	xscale = ( reqwidth - left_offset ) / psheight ;
EXPR	1360:17	1360:17	13	xscale = ( reqwidth - left_offset ) / psheight
ASSIGN	1360:17	1360:26	14	xscale = ( reqwidth - left_offset ) / psheight
LVAL	1360:17	1360:17	15	xscale
FIELD	1360:17	1360:17	16	xscale
LEAF_NODE	1360:17	1360:17	17	xscale
ASSIGN_OP	1360:24	1360:24	15	=
LEAF_NODE	1360:24	1360:24	16	=
RVAL	1360:26	1360:52	15	( reqwidth - left_offset ) / psheight
LEAF_NODE	1360:26	1360:26	16	(
FIELD	1360:27	1360:27	16	reqwidth
LEAF_NODE	1360:27	1360:27	17	reqwidth
LEAF_NODE	1360:36	1360:36	16	-
FIELD	1360:38	1360:38	16	left_offset
LEAF_NODE	1360:38	1360:38	17	left_offset
LEAF_NODE	1360:49	1360:49	16	)
LEAF_NODE	1360:50	1360:50	16	/
FIELD	1360:52	1360:52	16	psheight
LEAF_NODE	1360:52	1360:52	17	psheight
LEAF_NODE	1360:60	1360:60	13	;
EXPR_STATEMENT	1361:17	1361:62	12	yscale = ( reqheight - bottom_offset ) / pswidth ;
EXPR	1361:17	1361:17	13	yscale = ( reqheight - bottom_offset ) / pswidth
ASSIGN	1361:17	1361:26	14	yscale = ( reqheight - bottom_offset ) / pswidth
LVAL	1361:17	1361:17	15	yscale
FIELD	1361:17	1361:17	16	yscale
LEAF_NODE	1361:17	1361:17	17	yscale
ASSIGN_OP	1361:24	1361:24	15	=
LEAF_NODE	1361:24	1361:24	16	=
RVAL	1361:26	1361:55	15	( reqheight - bottom_offset ) / pswidth
LEAF_NODE	1361:26	1361:26	16	(
FIELD	1361:27	1361:27	16	reqheight
LEAF_NODE	1361:27	1361:27	17	reqheight
LEAF_NODE	1361:37	1361:37	16	-
FIELD	1361:39	1361:39	16	bottom_offset
LEAF_NODE	1361:39	1361:39	17	bottom_offset
LEAF_NODE	1361:52	1361:52	16	)
LEAF_NODE	1361:53	1361:53	16	/
FIELD	1361:55	1361:55	16	pswidth
LEAF_NODE	1361:55	1361:55	17	pswidth
LEAF_NODE	1361:62	1361:62	13	;
EXPR_STATEMENT	1362:18	1362:62	12	* scale = ( xscale < yscale ) ? xscale : yscale ;
EXPR	1362:18	1362:18	13	* scale = ( xscale < yscale ) ? xscale : yscale
ASSIGN	1362:18	1362:27	14	* scale = ( xscale < yscale ) ? xscale : yscale
LVAL	1362:18	1362:18	15	* scale
UNARY_EXPR	1362:18	1362:19	16	* scale
UNARY_OPERATOR	1362:18	1362:18	17	*
LEAF_NODE	1362:18	1362:18	18	*
FIELD	1362:19	1362:19	17	scale
LEAF_NODE	1362:19	1362:19	18	scale
ASSIGN_OP	1362:25	1362:25	15	=
LEAF_NODE	1362:25	1362:25	16	=
RVAL	1362:27	1362:27	15	( xscale < yscale ) ? xscale : yscale
COND_EXPR	1362:27	1362:56	16	( xscale < yscale ) ? xscale : yscale
CONDITION	1362:27	1362:43	17	( xscale < yscale )
LEAF_NODE	1362:27	1362:27	18	(
FIELD	1362:28	1362:28	18	xscale
LEAF_NODE	1362:28	1362:28	19	xscale
REL_OPERATOR	1362:35	1362:35	18	<
LEAF_NODE	1362:35	1362:35	19	<
FIELD	1362:37	1362:37	18	yscale
LEAF_NODE	1362:37	1362:37	19	yscale
LEAF_NODE	1362:43	1362:43	18	)
LEAF_NODE	1362:45	1362:45	17	?
EXPR	1362:47	1362:47	17	xscale
FIELD	1362:47	1362:47	18	xscale
LEAF_NODE	1362:47	1362:47	19	xscale
LEAF_NODE	1362:54	1362:54	17	:
FIELD	1362:56	1362:56	17	yscale
LEAF_NODE	1362:56	1362:56	18	yscale
LEAF_NODE	1362:62	1362:62	13	;
LEAF_NODE	1367:17	1367:17	11	}
SELECTION	1368:16	1369:17	9	
KEYWORD	1368:16	1368:16	10	else
LEAF_NODE	1368:16	1368:16	11	else
STATEMENTS	1369:17	1369:17	10	
EXPR_STATEMENT	1369:17	1369:29	11	* scale = 1.0 ;
EXPR	1369:17	1369:17	12	* scale = 1.0
ASSIGN	1369:17	1369:26	13	* scale = 1.0
LVAL	1369:17	1369:17	14	* scale
UNARY_EXPR	1369:17	1369:18	15	* scale
UNARY_OPERATOR	1369:17	1369:17	16	*
LEAF_NODE	1369:17	1369:17	17	*
FIELD	1369:18	1369:18	16	scale
LEAF_NODE	1369:18	1369:18	17	scale
ASSIGN_OP	1369:24	1369:24	14	=
LEAF_NODE	1369:24	1369:24	15	=
RVAL	1369:26	1369:26	14	1.0
FIELD	1369:26	1369:26	15	1.0
LEAF_NODE	1369:26	1369:26	16	1.0
LEAF_NODE	1369:29	1369:29	12	;
EXPR_STATEMENT	1370:16	1370:72	9	view_width = splitwidth ? splitwidth : * scale * psheight ;
EXPR	1370:16	1370:16	10	view_width = splitwidth ? splitwidth : * scale * psheight
ASSIGN	1370:16	1370:29	11	view_width = splitwidth ? splitwidth : * scale * psheight
LVAL	1370:16	1370:16	12	view_width
FIELD	1370:16	1370:16	13	view_width
LEAF_NODE	1370:16	1370:16	14	view_width
ASSIGN_OP	1370:27	1370:27	12	=
LEAF_NODE	1370:27	1370:27	13	=
RVAL	1370:29	1370:29	12	splitwidth ? splitwidth : * scale * psheight
COND_EXPR	1370:29	1370:64	13	splitwidth ? splitwidth : * scale * psheight
CONDITION	1370:29	1370:29	14	splitwidth
FIELD	1370:29	1370:29	15	splitwidth
LEAF_NODE	1370:29	1370:29	16	splitwidth
LEAF_NODE	1370:40	1370:40	14	?
EXPR	1370:42	1370:42	14	splitwidth
FIELD	1370:42	1370:42	15	splitwidth
LEAF_NODE	1370:42	1370:42	16	splitwidth
LEAF_NODE	1370:53	1370:53	14	:
UNARY_EXPR	1370:55	1370:56	14	* scale
UNARY_OPERATOR	1370:55	1370:55	15	*
LEAF_NODE	1370:55	1370:55	16	*
FIELD	1370:56	1370:56	15	scale
LEAF_NODE	1370:56	1370:56	16	scale
LEAF_NODE	1370:62	1370:62	14	*
FIELD	1370:64	1370:64	14	psheight
LEAF_NODE	1370:64	1370:64	15	psheight
LEAF_NODE	1370:72	1370:72	10	;
EXPR_STATEMENT	1371:16	1371:74	9	view_height = splitheight ? splitheight : * scale * pswidth ;
EXPR	1371:16	1371:16	10	view_height = splitheight ? splitheight : * scale * pswidth
ASSIGN	1371:16	1371:30	11	view_height = splitheight ? splitheight : * scale * pswidth
LVAL	1371:16	1371:16	12	view_height
FIELD	1371:16	1371:16	13	view_height
LEAF_NODE	1371:16	1371:16	14	view_height
ASSIGN_OP	1371:28	1371:28	12	=
LEAF_NODE	1371:28	1371:28	13	=
RVAL	1371:30	1371:30	12	splitheight ? splitheight : * scale * pswidth
COND_EXPR	1371:30	1371:67	13	splitheight ? splitheight : * scale * pswidth
CONDITION	1371:30	1371:30	14	splitheight
FIELD	1371:30	1371:30	15	splitheight
LEAF_NODE	1371:30	1371:30	16	splitheight
LEAF_NODE	1371:42	1371:42	14	?
EXPR	1371:44	1371:44	14	splitheight
FIELD	1371:44	1371:44	15	splitheight
LEAF_NODE	1371:44	1371:44	16	splitheight
LEAF_NODE	1371:56	1371:56	14	:
UNARY_EXPR	1371:58	1371:59	14	* scale
UNARY_OPERATOR	1371:58	1371:58	15	*
LEAF_NODE	1371:58	1371:58	16	*
FIELD	1371:59	1371:59	15	scale
LEAF_NODE	1371:59	1371:59	16	scale
LEAF_NODE	1371:65	1371:65	14	*
FIELD	1371:67	1371:67	14	pswidth
LEAF_NODE	1371:67	1371:67	15	pswidth
LEAF_NODE	1371:74	1371:74	10	;
LEAF_NODE	1372:15	1372:15	8	}
SELECTION	1373:14	1374:16	6	
KEYWORD	1373:14	1373:14	7	else
LEAF_NODE	1373:14	1373:14	8	else
STATEMENTS	1374:16	1391:16	7	
LEAF_NODE	1374:16	1374:16	8	{
STATEMENTS	1375:16	1383:16	8	
SELECTION	1375:16	1376:18	9	
KEYWORD	1375:16	1375:16	10	if
LEAF_NODE	1375:16	1375:16	11	if
LEAF_NODE	1375:19	1375:19	10	(
CONDITION	1375:20	1375:20	10	( page_width != 0 ) || ( page_height != 0 )
EXPR	1375:20	1375:20	11	( page_width != 0 ) || ( page_height != 0 )
OR	1375:20	1375:41	12	( page_width != 0 ) || ( page_height != 0 )
EXPR	1375:20	1375:36	13	( page_width != 0 )
LEAF_NODE	1375:20	1375:20	14	(
FIELD	1375:21	1375:21	14	page_width
LEAF_NODE	1375:21	1375:21	15	page_width
EQ_OPERATOR	1375:32	1375:32	14	!=
LEAF_NODE	1375:32	1375:32	15	!=
FIELD	1375:35	1375:35	14	0
LEAF_NODE	1375:35	1375:35	15	0
LEAF_NODE	1375:36	1375:36	14	)
LEAF_NODE	1375:38	1375:38	13	||
EXPR	1375:41	1375:58	13	( page_height != 0 )
LEAF_NODE	1375:41	1375:41	14	(
FIELD	1375:42	1375:42	14	page_height
LEAF_NODE	1375:42	1375:42	15	page_height
EQ_OPERATOR	1375:54	1375:54	14	!=
LEAF_NODE	1375:54	1375:54	15	!=
FIELD	1375:57	1375:57	14	0
LEAF_NODE	1375:57	1375:57	15	0
LEAF_NODE	1375:58	1375:58	14	)
LEAF_NODE	1375:59	1375:59	10	)
STATEMENTS	1376:18	1382:17	10	
LEAF_NODE	1376:18	1376:18	11	{
STATEMENTS	1377:18	1381:17	11	
EXPR_STATEMENT	1377:18	1377:62	12	xscale = ( reqwidth - left_offset ) / psheight ;
EXPR	1377:18	1377:18	13	xscale = ( reqwidth - left_offset ) / psheight
ASSIGN	1377:18	1377:27	14	xscale = ( reqwidth - left_offset ) / psheight
LVAL	1377:18	1377:18	15	xscale
FIELD	1377:18	1377:18	16	xscale
LEAF_NODE	1377:18	1377:18	17	xscale
ASSIGN_OP	1377:25	1377:25	15	=
LEAF_NODE	1377:25	1377:25	16	=
RVAL	1377:27	1377:54	15	( reqwidth - left_offset ) / psheight
LEAF_NODE	1377:27	1377:27	16	(
FIELD	1377:28	1377:28	16	reqwidth
LEAF_NODE	1377:28	1377:28	17	reqwidth
LEAF_NODE	1377:37	1377:37	16	-
FIELD	1377:39	1377:39	16	left_offset
LEAF_NODE	1377:39	1377:39	17	left_offset
LEAF_NODE	1377:50	1377:50	16	)
LEAF_NODE	1377:52	1377:52	16	/
FIELD	1377:54	1377:54	16	psheight
LEAF_NODE	1377:54	1377:54	17	psheight
LEAF_NODE	1377:62	1377:62	13	;
EXPR_STATEMENT	1378:18	1378:64	12	yscale = ( reqheight - bottom_offset ) / pswidth ;
EXPR	1378:18	1378:18	13	yscale = ( reqheight - bottom_offset ) / pswidth
ASSIGN	1378:18	1378:27	14	yscale = ( reqheight - bottom_offset ) / pswidth
LVAL	1378:18	1378:18	15	yscale
FIELD	1378:18	1378:18	16	yscale
LEAF_NODE	1378:18	1378:18	17	yscale
ASSIGN_OP	1378:25	1378:25	15	=
LEAF_NODE	1378:25	1378:25	16	=
RVAL	1378:27	1378:57	15	( reqheight - bottom_offset ) / pswidth
LEAF_NODE	1378:27	1378:27	16	(
FIELD	1378:28	1378:28	16	reqheight
LEAF_NODE	1378:28	1378:28	17	reqheight
LEAF_NODE	1378:38	1378:38	16	-
FIELD	1378:40	1378:40	16	bottom_offset
LEAF_NODE	1378:40	1378:40	17	bottom_offset
LEAF_NODE	1378:53	1378:53	16	)
LEAF_NODE	1378:55	1378:55	16	/
FIELD	1378:57	1378:57	16	pswidth
LEAF_NODE	1378:57	1378:57	17	pswidth
LEAF_NODE	1378:64	1378:64	13	;
EXPR_STATEMENT	1380:17	1380:38	12	view_width = reqwidth ;
EXPR	1380:17	1380:17	13	view_width = reqwidth
ASSIGN	1380:17	1380:30	14	view_width = reqwidth
LVAL	1380:17	1380:17	15	view_width
FIELD	1380:17	1380:17	16	view_width
LEAF_NODE	1380:17	1380:17	17	view_width
ASSIGN_OP	1380:28	1380:28	15	=
LEAF_NODE	1380:28	1380:28	16	=
RVAL	1380:30	1380:30	15	reqwidth
FIELD	1380:30	1380:30	16	reqwidth
LEAF_NODE	1380:30	1380:30	17	reqwidth
LEAF_NODE	1380:38	1380:38	13	;
EXPR_STATEMENT	1381:17	1381:40	12	view_height = reqheight ;
EXPR	1381:17	1381:17	13	view_height = reqheight
ASSIGN	1381:17	1381:31	14	view_height = reqheight
LVAL	1381:17	1381:17	15	view_height
FIELD	1381:17	1381:17	16	view_height
LEAF_NODE	1381:17	1381:17	17	view_height
ASSIGN_OP	1381:29	1381:29	15	=
LEAF_NODE	1381:29	1381:29	16	=
RVAL	1381:31	1381:31	15	reqheight
FIELD	1381:31	1381:31	16	reqheight
LEAF_NODE	1381:31	1381:31	17	reqheight
LEAF_NODE	1381:40	1381:40	13	;
LEAF_NODE	1382:17	1382:17	11	}
SELECTION	1383:16	1384:18	9	
KEYWORD	1383:16	1383:16	10	else
LEAF_NODE	1383:16	1383:16	11	else
STATEMENTS	1384:18	1390:18	10	
LEAF_NODE	1384:18	1384:18	11	{
STATEMENTS	1385:18	1389:17	11	
EXPR_STATEMENT	1385:18	1385:61	12	xscale = ( pswidth - left_offset ) / psheight ;
EXPR	1385:18	1385:18	13	xscale = ( pswidth - left_offset ) / psheight
ASSIGN	1385:18	1385:27	14	xscale = ( pswidth - left_offset ) / psheight
LVAL	1385:18	1385:18	15	xscale
FIELD	1385:18	1385:18	16	xscale
LEAF_NODE	1385:18	1385:18	17	xscale
ASSIGN_OP	1385:25	1385:25	15	=
LEAF_NODE	1385:25	1385:25	16	=
RVAL	1385:27	1385:53	15	( pswidth - left_offset ) / psheight
LEAF_NODE	1385:27	1385:27	16	(
FIELD	1385:28	1385:28	16	pswidth
LEAF_NODE	1385:28	1385:28	17	pswidth
LEAF_NODE	1385:37	1385:37	16	-
FIELD	1385:39	1385:39	16	left_offset
LEAF_NODE	1385:39	1385:39	17	left_offset
LEAF_NODE	1385:50	1385:50	16	)
LEAF_NODE	1385:51	1385:51	16	/
FIELD	1385:53	1385:53	16	psheight
LEAF_NODE	1385:53	1385:53	17	psheight
LEAF_NODE	1385:61	1385:61	13	;
EXPR_STATEMENT	1386:17	1386:62	12	yscale = ( psheight - bottom_offset ) / pswidth ;
EXPR	1386:17	1386:17	13	yscale = ( psheight - bottom_offset ) / pswidth
ASSIGN	1386:17	1386:26	14	yscale = ( psheight - bottom_offset ) / pswidth
LVAL	1386:17	1386:17	15	yscale
FIELD	1386:17	1386:17	16	yscale
LEAF_NODE	1386:17	1386:17	17	yscale
ASSIGN_OP	1386:24	1386:24	15	=
LEAF_NODE	1386:24	1386:24	16	=
RVAL	1386:26	1386:55	15	( psheight - bottom_offset ) / pswidth
LEAF_NODE	1386:26	1386:26	16	(
FIELD	1386:27	1386:27	16	psheight
LEAF_NODE	1386:27	1386:27	17	psheight
LEAF_NODE	1386:37	1386:37	16	-
FIELD	1386:39	1386:39	16	bottom_offset
LEAF_NODE	1386:39	1386:39	17	bottom_offset
LEAF_NODE	1386:52	1386:52	16	)
LEAF_NODE	1386:53	1386:53	16	/
FIELD	1386:55	1386:55	16	pswidth
LEAF_NODE	1386:55	1386:55	17	pswidth
LEAF_NODE	1386:62	1386:62	13	;
EXPR_STATEMENT	1388:17	1388:38	12	view_width = psheight ;
EXPR	1388:17	1388:17	13	view_width = psheight
ASSIGN	1388:17	1388:30	14	view_width = psheight
LVAL	1388:17	1388:17	15	view_width
FIELD	1388:17	1388:17	16	view_width
LEAF_NODE	1388:17	1388:17	17	view_width
ASSIGN_OP	1388:28	1388:28	15	=
LEAF_NODE	1388:28	1388:28	16	=
RVAL	1388:30	1388:30	15	psheight
FIELD	1388:30	1388:30	16	psheight
LEAF_NODE	1388:30	1388:30	17	psheight
LEAF_NODE	1388:38	1388:38	13	;
EXPR_STATEMENT	1389:17	1389:38	12	view_height = pswidth ;
EXPR	1389:17	1389:17	13	view_height = pswidth
ASSIGN	1389:17	1389:31	14	view_height = pswidth
LVAL	1389:17	1389:17	15	view_height
FIELD	1389:17	1389:17	16	view_height
LEAF_NODE	1389:17	1389:17	17	view_height
ASSIGN_OP	1389:29	1389:29	15	=
LEAF_NODE	1389:29	1389:29	16	=
RVAL	1389:31	1389:31	15	pswidth
FIELD	1389:31	1389:31	16	pswidth
LEAF_NODE	1389:31	1389:31	17	pswidth
LEAF_NODE	1389:38	1389:38	13	;
LEAF_NODE	1390:18	1390:18	11	}
LEAF_NODE	1391:16	1391:16	8	}
JUMP_STATEMENT	1392:14	1392:19	6	break DESTINATION ;
KEYWORD	1392:14	1392:14	7	break
LEAF_NODE	1392:14	1392:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1392:19	1392:19	7	;
LABEL	1393:4	1393:11	6	default :
LEAF_NODE	1393:4	1393:4	7	default
LEAF_NODE	1393:11	1393:11	7	:
EXPR_STATEMENT	1393:14	1393:72	6	TIFFError ( "psPageSize" , "Invalid rotation %d" , * rotation ) ;
EXPR	1393:14	1393:14	7	TIFFError ( "psPageSize" , "Invalid rotation %d" , * rotation )
FUNCTION_CALL	1393:14	1393:71	8	TIFFError ( "psPageSize" , "Invalid rotation %d" , * rotation )
CALLEE	1393:14	1393:14	9	TIFFError
LEAF_NODE	1393:14	1393:14	10	TIFFError
LEAF_NODE	1393:24	1393:24	9	(
ARGUMENT	1393:25	1393:25	9	"psPageSize"
FIELD	1393:25	1393:25	10	"psPageSize"
LEAF_NODE	1393:25	1393:25	11	"psPageSize"
LEAF_NODE	1393:37	1393:37	9	,
ARGUMENT	1393:39	1393:39	9	"Invalid rotation %d"
FIELD	1393:39	1393:39	10	"Invalid rotation %d"
LEAF_NODE	1393:39	1393:39	11	"Invalid rotation %d"
LEAF_NODE	1393:60	1393:60	9	,
ARGUMENT	1393:62	1393:62	9	* rotation
UNARY_EXPR	1393:62	1393:63	10	* rotation
UNARY_OPERATOR	1393:62	1393:62	11	*
LEAF_NODE	1393:62	1393:62	12	*
FIELD	1393:63	1393:63	11	rotation
LEAF_NODE	1393:63	1393:63	12	rotation
LEAF_NODE	1393:71	1393:71	9	)
LEAF_NODE	1393:72	1393:72	7	;
JUMP_STATEMENT	1394:14	1394:24	6	return ( 1 ) ;
KEYWORD	1394:14	1394:14	7	return
LEAF_NODE	1394:14	1394:14	8	return
DESTINATION	1394:21	1394:21	7	( 1 )
EXPR	1394:21	1394:23	8	( 1 )
LEAF_NODE	1394:21	1394:21	9	(
FIELD	1394:22	1394:22	9	1
LEAF_NODE	1394:22	1394:22	10	1
LEAF_NODE	1394:23	1394:23	9	)
LEAF_NODE	1394:24	1394:24	7	;
LEAF_NODE	1395:4	1395:4	5	}
SELECTION	1397:2	1398:4	3	
KEYWORD	1397:2	1397:2	4	if
LEAF_NODE	1397:2	1397:2	5	if
LEAF_NODE	1397:5	1397:5	4	(
CONDITION	1397:6	1397:6	4	! npages
EXPR	1397:6	1397:6	5	! npages
UNARY_EXPR	1397:6	1397:7	6	! npages
UNARY_OPERATOR	1397:6	1397:6	7	!
LEAF_NODE	1397:6	1397:6	8	!
FIELD	1397:7	1397:7	7	npages
LEAF_NODE	1397:7	1397:7	8	npages
LEAF_NODE	1397:13	1397:13	4	)
STATEMENTS	1398:4	1398:4	4	
EXPR_STATEMENT	1398:4	1398:105	5	PSHead ( fd , ( page_width ? page_width : view_width ) , ( page_height ? page_height : view_height ) , ox , oy ) ;
EXPR	1398:4	1398:4	6	PSHead ( fd , ( page_width ? page_width : view_width ) , ( page_height ? page_height : view_height ) , ox , oy )
FUNCTION_CALL	1398:4	1398:104	7	PSHead ( fd , ( page_width ? page_width : view_width ) , ( page_height ? page_height : view_height ) , ox , oy )
CALLEE	1398:4	1398:4	8	PSHead
LEAF_NODE	1398:4	1398:4	9	PSHead
LEAF_NODE	1398:10	1398:10	8	(
ARGUMENT	1398:11	1398:11	8	fd
FIELD	1398:11	1398:11	9	fd
LEAF_NODE	1398:11	1398:11	10	fd
LEAF_NODE	1398:13	1398:13	8	,
ARGUMENT	1398:15	1398:52	8	( page_width ? page_width : view_width )
LEAF_NODE	1398:15	1398:15	9	(
COND_EXPR	1398:16	1398:42	9	page_width ? page_width : view_width
CONDITION	1398:16	1398:16	10	page_width
FIELD	1398:16	1398:16	11	page_width
LEAF_NODE	1398:16	1398:16	12	page_width
LEAF_NODE	1398:27	1398:27	10	?
EXPR	1398:29	1398:29	10	page_width
FIELD	1398:29	1398:29	11	page_width
LEAF_NODE	1398:29	1398:29	12	page_width
LEAF_NODE	1398:40	1398:40	10	:
FIELD	1398:42	1398:42	10	view_width
LEAF_NODE	1398:42	1398:42	11	view_width
LEAF_NODE	1398:52	1398:52	9	)
LEAF_NODE	1398:53	1398:53	8	,
ARGUMENT	1398:55	1398:95	8	( page_height ? page_height : view_height )
LEAF_NODE	1398:55	1398:55	9	(
COND_EXPR	1398:56	1398:84	9	page_height ? page_height : view_height
CONDITION	1398:56	1398:56	10	page_height
FIELD	1398:56	1398:56	11	page_height
LEAF_NODE	1398:56	1398:56	12	page_height
LEAF_NODE	1398:68	1398:68	10	?
EXPR	1398:70	1398:70	10	page_height
FIELD	1398:70	1398:70	11	page_height
LEAF_NODE	1398:70	1398:70	12	page_height
LEAF_NODE	1398:82	1398:82	10	:
FIELD	1398:84	1398:84	10	view_height
LEAF_NODE	1398:84	1398:84	11	view_height
LEAF_NODE	1398:95	1398:95	9	)
LEAF_NODE	1398:96	1398:96	8	,
ARGUMENT	1398:98	1398:98	8	ox
FIELD	1398:98	1398:98	9	ox
LEAF_NODE	1398:98	1398:98	10	ox
LEAF_NODE	1398:100	1398:100	8	,
ARGUMENT	1398:102	1398:102	8	oy
FIELD	1398:102	1398:102	9	oy
LEAF_NODE	1398:102	1398:102	10	oy
LEAF_NODE	1398:104	1398:104	8	)
LEAF_NODE	1398:105	1398:105	6	;
EXPR_STATEMENT	1400:2	1400:46	3	* scale = ( xscale < yscale ) ? xscale : yscale ;
EXPR	1400:2	1400:2	4	* scale = ( xscale < yscale ) ? xscale : yscale
ASSIGN	1400:2	1400:11	5	* scale = ( xscale < yscale ) ? xscale : yscale
LVAL	1400:2	1400:2	6	* scale
UNARY_EXPR	1400:2	1400:3	7	* scale
UNARY_OPERATOR	1400:2	1400:2	8	*
LEAF_NODE	1400:2	1400:2	9	*
FIELD	1400:3	1400:3	8	scale
LEAF_NODE	1400:3	1400:3	9	scale
ASSIGN_OP	1400:9	1400:9	6	=
LEAF_NODE	1400:9	1400:9	7	=
RVAL	1400:11	1400:11	6	( xscale < yscale ) ? xscale : yscale
COND_EXPR	1400:11	1400:40	7	( xscale < yscale ) ? xscale : yscale
CONDITION	1400:11	1400:27	8	( xscale < yscale )
LEAF_NODE	1400:11	1400:11	9	(
FIELD	1400:12	1400:12	9	xscale
LEAF_NODE	1400:12	1400:12	10	xscale
REL_OPERATOR	1400:19	1400:19	9	<
LEAF_NODE	1400:19	1400:19	10	<
FIELD	1400:21	1400:21	9	yscale
LEAF_NODE	1400:21	1400:21	10	yscale
LEAF_NODE	1400:27	1400:27	9	)
LEAF_NODE	1400:29	1400:29	8	?
EXPR	1400:31	1400:31	8	xscale
FIELD	1400:31	1400:31	9	xscale
LEAF_NODE	1400:31	1400:31	10	xscale
LEAF_NODE	1400:38	1400:38	8	:
FIELD	1400:40	1400:40	8	yscale
LEAF_NODE	1400:40	1400:40	9	yscale
LEAF_NODE	1400:46	1400:46	4	;
SELECTION	1401:2	1402:4	3	
KEYWORD	1401:2	1401:2	4	if
LEAF_NODE	1401:2	1401:2	5	if
LEAF_NODE	1401:5	1401:5	4	(
CONDITION	1401:6	1401:6	4	* scale > 1.0
EXPR	1401:6	1401:15	5	* scale > 1.0
UNARY_EXPR	1401:6	1401:7	6	* scale
UNARY_OPERATOR	1401:6	1401:6	7	*
LEAF_NODE	1401:6	1401:6	8	*
FIELD	1401:7	1401:7	7	scale
LEAF_NODE	1401:7	1401:7	8	scale
REL_OPERATOR	1401:13	1401:13	6	>
LEAF_NODE	1401:13	1401:13	7	>
FIELD	1401:15	1401:15	6	1.0
LEAF_NODE	1401:15	1401:15	7	1.0
LEAF_NODE	1401:18	1401:18	4	)
STATEMENTS	1402:4	1402:4	4	
EXPR_STATEMENT	1402:4	1402:16	5	* scale = 1.0 ;
EXPR	1402:4	1402:4	6	* scale = 1.0
ASSIGN	1402:4	1402:13	7	* scale = 1.0
LVAL	1402:4	1402:4	8	* scale
UNARY_EXPR	1402:4	1402:5	9	* scale
UNARY_OPERATOR	1402:4	1402:4	10	*
LEAF_NODE	1402:4	1402:4	11	*
FIELD	1402:5	1402:5	10	scale
LEAF_NODE	1402:5	1402:5	11	scale
ASSIGN_OP	1402:11	1402:11	8	=
LEAF_NODE	1402:11	1402:11	9	=
RVAL	1402:13	1402:13	8	1.0
FIELD	1402:13	1402:13	9	1.0
LEAF_NODE	1402:13	1402:13	10	1.0
LEAF_NODE	1402:16	1402:16	6	;
JUMP_STATEMENT	1404:2	1404:12	3	return ( 0 ) ;
KEYWORD	1404:2	1404:2	4	return
LEAF_NODE	1404:2	1404:2	5	return
DESTINATION	1404:9	1404:9	4	( 0 )
EXPR	1404:9	1404:11	5	( 0 )
LEAF_NODE	1404:9	1404:9	6	(
FIELD	1404:10	1404:10	6	0
LEAF_NODE	1404:10	1404:10	7	0
LEAF_NODE	1404:11	1404:11	6	)
LEAF_NODE	1404:12	1404:12	4	;
LEAF_NODE	1405:2	1405:2	2	}
FUNCTION_DEF	1407:0	1477:2	1	
RETURN_TYPE	1407:0	1407:0	2	int
TYPE_NAME	1407:0	1407:0	3	int
LEAF_NODE	1407:0	1407:0	4	int
FUNCTION_NAME	1407:4	1407:4	2	get_viewport
LEAF_NODE	1407:4	1407:4	3	get_viewport
PARAMETER_LIST	1407:17	1408:71	2	( double pgwidth , double pgheight , double pswidth , double psheight , double * view_width , double * view_height , int rotation )
LEAF_NODE	1407:17	1407:17	3	(
PARAMETER_DECL	1407:18	1407:25	3	double pgwidth
TYPE	1407:18	1407:18	4	double
TYPE_NAME	1407:18	1407:18	5	double
LEAF_NODE	1407:18	1407:18	6	double
NAME	1407:25	1407:25	4	pgwidth
LEAF_NODE	1407:25	1407:25	5	pgwidth
LEAF_NODE	1407:32	1407:32	3	,
PARAMETER_DECL	1407:34	1407:41	3	double pgheight
TYPE	1407:34	1407:34	4	double
TYPE_NAME	1407:34	1407:34	5	double
LEAF_NODE	1407:34	1407:34	6	double
NAME	1407:41	1407:41	4	pgheight
LEAF_NODE	1407:41	1407:41	5	pgheight
LEAF_NODE	1407:49	1407:49	3	,
PARAMETER_DECL	1407:51	1407:58	3	double pswidth
TYPE	1407:51	1407:51	4	double
TYPE_NAME	1407:51	1407:51	5	double
LEAF_NODE	1407:51	1407:51	6	double
NAME	1407:58	1407:58	4	pswidth
LEAF_NODE	1407:58	1407:58	5	pswidth
LEAF_NODE	1407:65	1407:65	3	,
PARAMETER_DECL	1407:67	1407:74	3	double psheight
TYPE	1407:67	1407:67	4	double
TYPE_NAME	1407:67	1407:67	5	double
LEAF_NODE	1407:67	1407:67	6	double
NAME	1407:74	1407:74	4	psheight
LEAF_NODE	1407:74	1407:74	5	psheight
LEAF_NODE	1407:82	1407:82	3	,
PARAMETER_DECL	1408:18	1408:26	3	double * view_width
TYPE	1408:18	1408:25	4	double *
TYPE_NAME	1408:18	1408:18	5	double
LEAF_NODE	1408:18	1408:18	6	double
POINTER	1408:25	1408:25	5	*
LEAF_NODE	1408:25	1408:25	6	*
NAME	1408:26	1408:26	4	view_width
LEAF_NODE	1408:26	1408:26	5	view_width
LEAF_NODE	1408:36	1408:36	3	,
PARAMETER_DECL	1408:38	1408:46	3	double * view_height
TYPE	1408:38	1408:45	4	double *
TYPE_NAME	1408:38	1408:38	5	double
LEAF_NODE	1408:38	1408:38	6	double
POINTER	1408:45	1408:45	5	*
LEAF_NODE	1408:45	1408:45	6	*
NAME	1408:46	1408:46	4	view_height
LEAF_NODE	1408:46	1408:46	5	view_height
LEAF_NODE	1408:57	1408:57	3	,
PARAMETER_DECL	1408:59	1408:63	3	int rotation
TYPE	1408:59	1408:59	4	int
TYPE_NAME	1408:59	1408:59	5	int
LEAF_NODE	1408:59	1408:59	6	int
NAME	1408:63	1408:63	4	rotation
LEAF_NODE	1408:63	1408:63	5	rotation
LEAF_NODE	1408:71	1408:71	3	)
LEAF_NODE	1409:2	1409:2	2	{
STATEMENTS	1411:2	1476:2	2	
SELECTION	1411:2	1412:4	3	
KEYWORD	1411:2	1411:2	4	if
LEAF_NODE	1411:2	1411:2	5	if
LEAF_NODE	1411:5	1411:5	4	(
CONDITION	1411:6	1411:6	4	maxPageHeight != 0
EXPR	1411:6	1411:23	5	maxPageHeight != 0
FIELD	1411:6	1411:6	6	maxPageHeight
LEAF_NODE	1411:6	1411:6	7	maxPageHeight
EQ_OPERATOR	1411:20	1411:20	6	!=
LEAF_NODE	1411:20	1411:20	7	!=
FIELD	1411:23	1411:23	6	0
LEAF_NODE	1411:23	1411:23	7	0
LEAF_NODE	1411:24	1411:24	4	)
STATEMENTS	1412:4	1421:4	4	
LEAF_NODE	1412:4	1412:4	5	{
STATEMENTS	1413:4	1415:4	5	
SELECTION	1413:4	1414:6	6	
KEYWORD	1413:4	1413:4	7	if
LEAF_NODE	1413:4	1413:4	8	if
LEAF_NODE	1413:7	1413:7	7	(
CONDITION	1413:8	1413:8	7	pgheight != 0 && pgheight < maxPageHeight
EXPR	1413:8	1413:8	8	pgheight != 0 && pgheight < maxPageHeight
AND	1413:8	1413:25	9	pgheight != 0 && pgheight < maxPageHeight
EXPR	1413:8	1413:20	10	pgheight != 0
FIELD	1413:8	1413:8	11	pgheight
LEAF_NODE	1413:8	1413:8	12	pgheight
EQ_OPERATOR	1413:17	1413:17	11	!=
LEAF_NODE	1413:17	1413:17	12	!=
FIELD	1413:20	1413:20	11	0
LEAF_NODE	1413:20	1413:20	12	0
LEAF_NODE	1413:22	1413:22	10	&&
EXPR	1413:25	1413:36	10	pgheight < maxPageHeight
FIELD	1413:25	1413:25	11	pgheight
LEAF_NODE	1413:25	1413:25	12	pgheight
REL_OPERATOR	1413:34	1413:34	11	<
LEAF_NODE	1413:34	1413:34	12	<
FIELD	1413:36	1413:36	11	maxPageHeight
LEAF_NODE	1413:36	1413:36	12	maxPageHeight
LEAF_NODE	1413:49	1413:49	7	)
STATEMENTS	1414:6	1414:6	7	
EXPR_STATEMENT	1414:6	1414:44	8	* view_height = pgheight * PS_UNIT_SIZE ;
EXPR	1414:6	1414:6	9	* view_height = pgheight * PS_UNIT_SIZE
ASSIGN	1414:6	1414:21	10	* view_height = pgheight * PS_UNIT_SIZE
LVAL	1414:6	1414:6	11	* view_height
UNARY_EXPR	1414:6	1414:7	12	* view_height
UNARY_OPERATOR	1414:6	1414:6	13	*
LEAF_NODE	1414:6	1414:6	14	*
FIELD	1414:7	1414:7	13	view_height
LEAF_NODE	1414:7	1414:7	14	view_height
ASSIGN_OP	1414:19	1414:19	11	=
LEAF_NODE	1414:19	1414:19	12	=
RVAL	1414:21	1414:32	11	pgheight * PS_UNIT_SIZE
FIELD	1414:21	1414:21	12	pgheight
LEAF_NODE	1414:21	1414:21	13	pgheight
LEAF_NODE	1414:30	1414:30	12	*
FIELD	1414:32	1414:32	12	PS_UNIT_SIZE
LEAF_NODE	1414:32	1414:32	13	PS_UNIT_SIZE
LEAF_NODE	1414:44	1414:44	9	;
SELECTION	1415:4	1416:6	6	
KEYWORD	1415:4	1415:4	7	else
LEAF_NODE	1415:4	1415:4	8	else
STATEMENTS	1416:6	1416:6	7	
EXPR_STATEMENT	1416:6	1416:49	8	* view_height = maxPageHeight * PS_UNIT_SIZE ;
EXPR	1416:6	1416:6	9	* view_height = maxPageHeight * PS_UNIT_SIZE
ASSIGN	1416:6	1416:21	10	* view_height = maxPageHeight * PS_UNIT_SIZE
LVAL	1416:6	1416:6	11	* view_height
UNARY_EXPR	1416:6	1416:7	12	* view_height
UNARY_OPERATOR	1416:6	1416:6	13	*
LEAF_NODE	1416:6	1416:6	14	*
FIELD	1416:7	1416:7	13	view_height
LEAF_NODE	1416:7	1416:7	14	view_height
ASSIGN_OP	1416:19	1416:19	11	=
LEAF_NODE	1416:19	1416:19	12	=
RVAL	1416:21	1416:37	11	maxPageHeight * PS_UNIT_SIZE
FIELD	1416:21	1416:21	12	maxPageHeight
LEAF_NODE	1416:21	1416:21	13	maxPageHeight
LEAF_NODE	1416:35	1416:35	12	*
FIELD	1416:37	1416:37	12	PS_UNIT_SIZE
LEAF_NODE	1416:37	1416:37	13	PS_UNIT_SIZE
LEAF_NODE	1416:49	1416:49	9	;
LEAF_NODE	1421:4	1421:4	5	}
SELECTION	1422:2	1423:4	3	
KEYWORD	1422:2	1422:2	4	else
LEAF_NODE	1422:2	1422:2	5	else
STATEMENTS	1423:4	1442:4	4	
LEAF_NODE	1423:4	1423:4	5	{
STATEMENTS	1424:4	1431:4	5	
SELECTION	1424:4	1425:6	6	
KEYWORD	1424:4	1424:4	7	if
LEAF_NODE	1424:4	1424:4	8	if
LEAF_NODE	1424:7	1424:7	7	(
CONDITION	1424:8	1424:8	7	pgheight != 0
EXPR	1424:8	1424:20	8	pgheight != 0
FIELD	1424:8	1424:8	9	pgheight
LEAF_NODE	1424:8	1424:8	10	pgheight
EQ_OPERATOR	1424:17	1424:17	9	!=
LEAF_NODE	1424:17	1424:17	10	!=
FIELD	1424:20	1424:20	9	0
LEAF_NODE	1424:20	1424:20	10	0
LEAF_NODE	1424:21	1424:21	7	)
STATEMENTS	1425:6	1430:6	7	
LEAF_NODE	1425:6	1425:6	8	{
STATEMENTS	1426:6	1426:6	8	
EXPR_STATEMENT	1426:6	1426:44	9	* view_height = pgheight * PS_UNIT_SIZE ;
EXPR	1426:6	1426:6	10	* view_height = pgheight * PS_UNIT_SIZE
ASSIGN	1426:6	1426:21	11	* view_height = pgheight * PS_UNIT_SIZE
LVAL	1426:6	1426:6	12	* view_height
UNARY_EXPR	1426:6	1426:7	13	* view_height
UNARY_OPERATOR	1426:6	1426:6	14	*
LEAF_NODE	1426:6	1426:6	15	*
FIELD	1426:7	1426:7	14	view_height
LEAF_NODE	1426:7	1426:7	15	view_height
ASSIGN_OP	1426:19	1426:19	12	=
LEAF_NODE	1426:19	1426:19	13	=
RVAL	1426:21	1426:32	12	pgheight * PS_UNIT_SIZE
FIELD	1426:21	1426:21	13	pgheight
LEAF_NODE	1426:21	1426:21	14	pgheight
LEAF_NODE	1426:30	1426:30	13	*
FIELD	1426:32	1426:32	13	PS_UNIT_SIZE
LEAF_NODE	1426:32	1426:32	14	PS_UNIT_SIZE
LEAF_NODE	1426:44	1426:44	10	;
LEAF_NODE	1430:6	1430:6	8	}
SELECTION	1431:4	1432:6	6	
KEYWORD	1431:4	1431:4	7	else
LEAF_NODE	1431:4	1431:4	8	else
STATEMENTS	1432:6	1432:6	7	
SELECTION	1432:6	1433:8	8	
KEYWORD	1432:6	1432:6	9	switch
LEAF_NODE	1432:6	1432:6	10	switch
LEAF_NODE	1432:13	1432:13	9	(
CONDITION	1432:14	1432:14	9	rotation
EXPR	1432:14	1432:14	10	rotation
FIELD	1432:14	1432:14	11	rotation
LEAF_NODE	1432:14	1432:14	12	rotation
LEAF_NODE	1432:22	1432:22	9	)
STATEMENTS	1433:8	1441:7	9	
LEAF_NODE	1433:8	1433:8	10	{
STATEMENTS	1434:8	1440:17	10	
LABEL	1434:8	1434:15	11	default :
LEAF_NODE	1434:8	1434:8	12	default
LEAF_NODE	1434:15	1434:15	12	:
LABEL	1435:8	1435:16	11	case 0 :
LEAF_NODE	1435:8	1435:8	12	case
LEAF_NODE	1435:15	1435:15	12	0
LEAF_NODE	1435:16	1435:16	12	:
LABEL	1436:8	1436:16	11	case 180 :
LEAF_NODE	1436:8	1436:8	12	case
LEAF_NODE	1436:13	1436:13	12	180
LEAF_NODE	1436:16	1436:16	12	:
EXPR_STATEMENT	1436:18	1436:41	11	* view_height = psheight ;
EXPR	1436:18	1436:18	12	* view_height = psheight
ASSIGN	1436:18	1436:33	13	* view_height = psheight
LVAL	1436:18	1436:18	14	* view_height
UNARY_EXPR	1436:18	1436:19	15	* view_height
UNARY_OPERATOR	1436:18	1436:18	16	*
LEAF_NODE	1436:18	1436:18	17	*
FIELD	1436:19	1436:19	16	view_height
LEAF_NODE	1436:19	1436:19	17	view_height
ASSIGN_OP	1436:31	1436:31	14	=
LEAF_NODE	1436:31	1436:31	15	=
RVAL	1436:33	1436:33	14	psheight
FIELD	1436:33	1436:33	15	psheight
LEAF_NODE	1436:33	1436:33	16	psheight
LEAF_NODE	1436:41	1436:41	12	;
JUMP_STATEMENT	1437:17	1437:22	11	break DESTINATION ;
KEYWORD	1437:17	1437:17	12	break
LEAF_NODE	1437:17	1437:17	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	1437:22	1437:22	12	;
LABEL	1438:8	1438:16	11	case 90 :
LEAF_NODE	1438:8	1438:8	12	case
LEAF_NODE	1438:14	1438:14	12	90
LEAF_NODE	1438:16	1438:16	12	:
LABEL	1439:8	1439:16	11	case 270 :
LEAF_NODE	1439:8	1439:8	12	case
LEAF_NODE	1439:13	1439:13	12	270
LEAF_NODE	1439:16	1439:16	12	:
EXPR_STATEMENT	1439:18	1439:40	11	* view_height = pswidth ;
EXPR	1439:18	1439:18	12	* view_height = pswidth
ASSIGN	1439:18	1439:33	13	* view_height = pswidth
LVAL	1439:18	1439:18	14	* view_height
UNARY_EXPR	1439:18	1439:19	15	* view_height
UNARY_OPERATOR	1439:18	1439:18	16	*
LEAF_NODE	1439:18	1439:18	17	*
FIELD	1439:19	1439:19	16	view_height
LEAF_NODE	1439:19	1439:19	17	view_height
ASSIGN_OP	1439:31	1439:31	14	=
LEAF_NODE	1439:31	1439:31	15	=
RVAL	1439:33	1439:33	14	pswidth
FIELD	1439:33	1439:33	15	pswidth
LEAF_NODE	1439:33	1439:33	16	pswidth
LEAF_NODE	1439:40	1439:40	12	;
JUMP_STATEMENT	1440:17	1440:22	11	break DESTINATION ;
KEYWORD	1440:17	1440:17	12	break
LEAF_NODE	1440:17	1440:17	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	1440:22	1440:22	12	;
LEAF_NODE	1441:7	1441:7	10	}
LEAF_NODE	1442:4	1442:4	5	}
SELECTION	1444:2	1445:4	3	
KEYWORD	1444:2	1444:2	4	if
LEAF_NODE	1444:2	1444:2	5	if
LEAF_NODE	1444:5	1444:5	4	(
CONDITION	1444:6	1444:6	4	maxPageWidth != 0
EXPR	1444:6	1444:22	5	maxPageWidth != 0
FIELD	1444:6	1444:6	6	maxPageWidth
LEAF_NODE	1444:6	1444:6	7	maxPageWidth
EQ_OPERATOR	1444:19	1444:19	6	!=
LEAF_NODE	1444:19	1444:19	7	!=
FIELD	1444:22	1444:22	6	0
LEAF_NODE	1444:22	1444:22	7	0
LEAF_NODE	1444:23	1444:23	4	)
STATEMENTS	1445:4	1453:4	4	
LEAF_NODE	1445:4	1445:4	5	{
STATEMENTS	1446:4	1448:4	5	
SELECTION	1446:4	1447:6	6	
KEYWORD	1446:4	1446:4	7	if
LEAF_NODE	1446:4	1446:4	8	if
LEAF_NODE	1446:7	1446:7	7	(
CONDITION	1446:8	1446:8	7	pgwidth != 0 && pgwidth < maxPageWidth
EXPR	1446:8	1446:8	8	pgwidth != 0 && pgwidth < maxPageWidth
AND	1446:8	1446:24	9	pgwidth != 0 && pgwidth < maxPageWidth
EXPR	1446:8	1446:19	10	pgwidth != 0
FIELD	1446:8	1446:8	11	pgwidth
LEAF_NODE	1446:8	1446:8	12	pgwidth
EQ_OPERATOR	1446:16	1446:16	11	!=
LEAF_NODE	1446:16	1446:16	12	!=
FIELD	1446:19	1446:19	11	0
LEAF_NODE	1446:19	1446:19	12	0
LEAF_NODE	1446:21	1446:21	10	&&
EXPR	1446:24	1446:34	10	pgwidth < maxPageWidth
FIELD	1446:24	1446:24	11	pgwidth
LEAF_NODE	1446:24	1446:24	12	pgwidth
REL_OPERATOR	1446:32	1446:32	11	<
LEAF_NODE	1446:32	1446:32	12	<
FIELD	1446:34	1446:34	11	maxPageWidth
LEAF_NODE	1446:34	1446:34	12	maxPageWidth
LEAF_NODE	1446:46	1446:46	7	)
STATEMENTS	1447:6	1447:6	7	
EXPR_STATEMENT	1447:6	1447:42	8	* view_width = pgwidth * PS_UNIT_SIZE ;
EXPR	1447:6	1447:6	9	* view_width = pgwidth * PS_UNIT_SIZE
ASSIGN	1447:6	1447:20	10	* view_width = pgwidth * PS_UNIT_SIZE
LVAL	1447:6	1447:6	11	* view_width
UNARY_EXPR	1447:6	1447:7	12	* view_width
UNARY_OPERATOR	1447:6	1447:6	13	*
LEAF_NODE	1447:6	1447:6	14	*
FIELD	1447:7	1447:7	13	view_width
LEAF_NODE	1447:7	1447:7	14	view_width
ASSIGN_OP	1447:18	1447:18	11	=
LEAF_NODE	1447:18	1447:18	12	=
RVAL	1447:20	1447:30	11	pgwidth * PS_UNIT_SIZE
FIELD	1447:20	1447:20	12	pgwidth
LEAF_NODE	1447:20	1447:20	13	pgwidth
LEAF_NODE	1447:28	1447:28	12	*
FIELD	1447:30	1447:30	12	PS_UNIT_SIZE
LEAF_NODE	1447:30	1447:30	13	PS_UNIT_SIZE
LEAF_NODE	1447:42	1447:42	9	;
SELECTION	1448:4	1449:6	6	
KEYWORD	1448:4	1448:4	7	else
LEAF_NODE	1448:4	1448:4	8	else
STATEMENTS	1449:6	1449:6	7	
EXPR_STATEMENT	1449:6	1449:47	8	* view_width = maxPageWidth * PS_UNIT_SIZE ;
EXPR	1449:6	1449:6	9	* view_width = maxPageWidth * PS_UNIT_SIZE
ASSIGN	1449:6	1449:20	10	* view_width = maxPageWidth * PS_UNIT_SIZE
LVAL	1449:6	1449:6	11	* view_width
UNARY_EXPR	1449:6	1449:7	12	* view_width
UNARY_OPERATOR	1449:6	1449:6	13	*
LEAF_NODE	1449:6	1449:6	14	*
FIELD	1449:7	1449:7	13	view_width
LEAF_NODE	1449:7	1449:7	14	view_width
ASSIGN_OP	1449:18	1449:18	11	=
LEAF_NODE	1449:18	1449:18	12	=
RVAL	1449:20	1449:35	11	maxPageWidth * PS_UNIT_SIZE
FIELD	1449:20	1449:20	12	maxPageWidth
LEAF_NODE	1449:20	1449:20	13	maxPageWidth
LEAF_NODE	1449:33	1449:33	12	*
FIELD	1449:35	1449:35	12	PS_UNIT_SIZE
LEAF_NODE	1449:35	1449:35	13	PS_UNIT_SIZE
LEAF_NODE	1449:47	1449:47	9	;
LEAF_NODE	1453:4	1453:4	5	}
SELECTION	1454:2	1455:4	3	
KEYWORD	1454:2	1454:2	4	else
LEAF_NODE	1454:2	1454:2	5	else
STATEMENTS	1455:4	1474:4	4	
LEAF_NODE	1455:4	1455:4	5	{
STATEMENTS	1456:4	1463:4	5	
SELECTION	1456:4	1457:6	6	
KEYWORD	1456:4	1456:4	7	if
LEAF_NODE	1456:4	1456:4	8	if
LEAF_NODE	1456:7	1456:7	7	(
CONDITION	1456:8	1456:8	7	pgwidth != 0
EXPR	1456:8	1456:19	8	pgwidth != 0
FIELD	1456:8	1456:8	9	pgwidth
LEAF_NODE	1456:8	1456:8	10	pgwidth
EQ_OPERATOR	1456:16	1456:16	9	!=
LEAF_NODE	1456:16	1456:16	10	!=
FIELD	1456:19	1456:19	9	0
LEAF_NODE	1456:19	1456:19	10	0
LEAF_NODE	1456:20	1456:20	7	)
STATEMENTS	1457:6	1462:6	7	
LEAF_NODE	1457:6	1457:6	8	{
STATEMENTS	1458:6	1458:6	8	
EXPR_STATEMENT	1458:6	1458:42	9	* view_width = pgwidth * PS_UNIT_SIZE ;
EXPR	1458:6	1458:6	10	* view_width = pgwidth * PS_UNIT_SIZE
ASSIGN	1458:6	1458:20	11	* view_width = pgwidth * PS_UNIT_SIZE
LVAL	1458:6	1458:6	12	* view_width
UNARY_EXPR	1458:6	1458:7	13	* view_width
UNARY_OPERATOR	1458:6	1458:6	14	*
LEAF_NODE	1458:6	1458:6	15	*
FIELD	1458:7	1458:7	14	view_width
LEAF_NODE	1458:7	1458:7	15	view_width
ASSIGN_OP	1458:18	1458:18	12	=
LEAF_NODE	1458:18	1458:18	13	=
RVAL	1458:20	1458:30	12	pgwidth * PS_UNIT_SIZE
FIELD	1458:20	1458:20	13	pgwidth
LEAF_NODE	1458:20	1458:20	14	pgwidth
LEAF_NODE	1458:28	1458:28	13	*
FIELD	1458:30	1458:30	13	PS_UNIT_SIZE
LEAF_NODE	1458:30	1458:30	14	PS_UNIT_SIZE
LEAF_NODE	1458:42	1458:42	10	;
LEAF_NODE	1462:6	1462:6	8	}
SELECTION	1463:4	1464:6	6	
KEYWORD	1463:4	1463:4	7	else
LEAF_NODE	1463:4	1463:4	8	else
STATEMENTS	1464:6	1464:6	7	
SELECTION	1464:6	1465:8	8	
KEYWORD	1464:6	1464:6	9	switch
LEAF_NODE	1464:6	1464:6	10	switch
LEAF_NODE	1464:13	1464:13	9	(
CONDITION	1464:14	1464:14	9	rotation
EXPR	1464:14	1464:14	10	rotation
FIELD	1464:14	1464:14	11	rotation
LEAF_NODE	1464:14	1464:14	12	rotation
LEAF_NODE	1464:22	1464:22	9	)
STATEMENTS	1465:8	1473:7	9	
LEAF_NODE	1465:8	1465:8	10	{
STATEMENTS	1466:8	1472:17	10	
LABEL	1466:8	1466:15	11	default :
LEAF_NODE	1466:8	1466:8	12	default
LEAF_NODE	1466:15	1466:15	12	:
LABEL	1467:8	1467:16	11	case 0 :
LEAF_NODE	1467:8	1467:8	12	case
LEAF_NODE	1467:15	1467:15	12	0
LEAF_NODE	1467:16	1467:16	12	:
LABEL	1468:8	1468:16	11	case 180 :
LEAF_NODE	1468:8	1468:8	12	case
LEAF_NODE	1468:13	1468:13	12	180
LEAF_NODE	1468:16	1468:16	12	:
EXPR_STATEMENT	1468:18	1468:39	11	* view_width = pswidth ;
EXPR	1468:18	1468:18	12	* view_width = pswidth
ASSIGN	1468:18	1468:32	13	* view_width = pswidth
LVAL	1468:18	1468:18	14	* view_width
UNARY_EXPR	1468:18	1468:19	15	* view_width
UNARY_OPERATOR	1468:18	1468:18	16	*
LEAF_NODE	1468:18	1468:18	17	*
FIELD	1468:19	1468:19	16	view_width
LEAF_NODE	1468:19	1468:19	17	view_width
ASSIGN_OP	1468:30	1468:30	14	=
LEAF_NODE	1468:30	1468:30	15	=
RVAL	1468:32	1468:32	14	pswidth
FIELD	1468:32	1468:32	15	pswidth
LEAF_NODE	1468:32	1468:32	16	pswidth
LEAF_NODE	1468:39	1468:39	12	;
JUMP_STATEMENT	1469:17	1469:22	11	break DESTINATION ;
KEYWORD	1469:17	1469:17	12	break
LEAF_NODE	1469:17	1469:17	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	1469:22	1469:22	12	;
LABEL	1470:8	1470:16	11	case 90 :
LEAF_NODE	1470:8	1470:8	12	case
LEAF_NODE	1470:14	1470:14	12	90
LEAF_NODE	1470:16	1470:16	12	:
LABEL	1471:8	1471:16	11	case 270 :
LEAF_NODE	1471:8	1471:8	12	case
LEAF_NODE	1471:13	1471:13	12	270
LEAF_NODE	1471:16	1471:16	12	:
EXPR_STATEMENT	1471:18	1471:40	11	* view_width = psheight ;
EXPR	1471:18	1471:18	12	* view_width = psheight
ASSIGN	1471:18	1471:32	13	* view_width = psheight
LVAL	1471:18	1471:18	14	* view_width
UNARY_EXPR	1471:18	1471:19	15	* view_width
UNARY_OPERATOR	1471:18	1471:18	16	*
LEAF_NODE	1471:18	1471:18	17	*
FIELD	1471:19	1471:19	16	view_width
LEAF_NODE	1471:19	1471:19	17	view_width
ASSIGN_OP	1471:30	1471:30	14	=
LEAF_NODE	1471:30	1471:30	15	=
RVAL	1471:32	1471:32	14	psheight
FIELD	1471:32	1471:32	15	psheight
LEAF_NODE	1471:32	1471:32	16	psheight
LEAF_NODE	1471:40	1471:40	12	;
JUMP_STATEMENT	1472:17	1472:22	11	break DESTINATION ;
KEYWORD	1472:17	1472:17	12	break
LEAF_NODE	1472:17	1472:17	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	1472:22	1472:22	12	;
LEAF_NODE	1473:7	1473:7	10	}
LEAF_NODE	1474:4	1474:4	5	}
JUMP_STATEMENT	1476:2	1476:12	3	return ( 0 ) ;
KEYWORD	1476:2	1476:2	4	return
LEAF_NODE	1476:2	1476:2	5	return
DESTINATION	1476:9	1476:9	4	( 0 )
EXPR	1476:9	1476:11	5	( 0 )
LEAF_NODE	1476:9	1476:9	6	(
FIELD	1476:10	1476:10	6	0
LEAF_NODE	1476:10	1476:10	7	0
LEAF_NODE	1476:11	1476:11	6	)
LEAF_NODE	1476:12	1476:12	4	;
LEAF_NODE	1477:2	1477:2	2	}
FUNCTION_DEF	1486:0	1624:0	1	
RETURN_TYPE	1486:0	1486:0	2	int
TYPE_NAME	1486:0	1486:0	3	int
LEAF_NODE	1486:0	1486:0	4	int
FUNCTION_NAME	1486:4	1486:4	2	TIFF2PS
LEAF_NODE	1486:4	1486:4	3	TIFF2PS
PARAMETER_LIST	1486:11	1486:98	2	( FILE * fd , TIFF * tif , double pgwidth , double pgheight , double lm , double bm , int center )
LEAF_NODE	1486:11	1486:11	3	(
PARAMETER_DECL	1486:12	1486:18	3	FILE * fd
TYPE	1486:12	1486:16	4	FILE *
TYPE_NAME	1486:12	1486:12	5	FILE
LEAF_NODE	1486:12	1486:12	6	FILE
POINTER	1486:16	1486:16	5	*
LEAF_NODE	1486:16	1486:16	6	*
NAME	1486:18	1486:18	4	fd
LEAF_NODE	1486:18	1486:18	5	fd
LEAF_NODE	1486:20	1486:20	3	,
PARAMETER_DECL	1486:22	1486:28	3	TIFF * tif
TYPE	1486:22	1486:26	4	TIFF *
TYPE_NAME	1486:22	1486:22	5	TIFF
LEAF_NODE	1486:22	1486:22	6	TIFF
POINTER	1486:26	1486:26	5	*
LEAF_NODE	1486:26	1486:26	6	*
NAME	1486:28	1486:28	4	tif
LEAF_NODE	1486:28	1486:28	5	tif
LEAF_NODE	1486:31	1486:31	3	,
PARAMETER_DECL	1486:33	1486:40	3	double pgwidth
TYPE	1486:33	1486:33	4	double
TYPE_NAME	1486:33	1486:33	5	double
LEAF_NODE	1486:33	1486:33	6	double
NAME	1486:40	1486:40	4	pgwidth
LEAF_NODE	1486:40	1486:40	5	pgwidth
LEAF_NODE	1486:47	1486:47	3	,
PARAMETER_DECL	1486:49	1486:56	3	double pgheight
TYPE	1486:49	1486:49	4	double
TYPE_NAME	1486:49	1486:49	5	double
LEAF_NODE	1486:49	1486:49	6	double
NAME	1486:56	1486:56	4	pgheight
LEAF_NODE	1486:56	1486:56	5	pgheight
LEAF_NODE	1486:64	1486:64	3	,
PARAMETER_DECL	1486:66	1486:73	3	double lm
TYPE	1486:66	1486:66	4	double
TYPE_NAME	1486:66	1486:66	5	double
LEAF_NODE	1486:66	1486:66	6	double
NAME	1486:73	1486:73	4	lm
LEAF_NODE	1486:73	1486:73	5	lm
LEAF_NODE	1486:75	1486:75	3	,
PARAMETER_DECL	1486:77	1486:84	3	double bm
TYPE	1486:77	1486:77	4	double
TYPE_NAME	1486:77	1486:77	5	double
LEAF_NODE	1486:77	1486:77	6	double
NAME	1486:84	1486:84	4	bm
LEAF_NODE	1486:84	1486:84	5	bm
LEAF_NODE	1486:86	1486:86	3	,
PARAMETER_DECL	1486:88	1486:92	3	int center
TYPE	1486:88	1486:88	4	int
TYPE_NAME	1486:88	1486:88	5	int
LEAF_NODE	1486:88	1486:88	6	int
NAME	1486:92	1486:92	4	center
LEAF_NODE	1486:92	1486:92	5	center
LEAF_NODE	1486:98	1486:98	3	)
LEAF_NODE	1487:2	1487:2	2	{
STATEMENTS	1488:2	1623:14	2	
SIMPLE_DECL	1488:2	1488:36	3	uint32 pixwidth ; pixwidth = 0 , uint32 pixheight ; pixheight = 0 ;
INIT_DECL_LIST	1488:2	1488:2	4	uint32 pixwidth ; pixwidth = 0 , uint32 pixheight ; pixheight = 0
VAR_DECL	1488:2	1488:9	5	uint32 pixwidth ; pixwidth = 0
TYPE	1488:2	1488:2	6	uint32
TYPE_NAME	1488:2	1488:2	7	uint32
LEAF_NODE	1488:2	1488:2	8	uint32
NAME	1488:9	1488:9	6	pixwidth
LEAF_NODE	1488:9	1488:9	7	pixwidth
LEAF_NODE	0:0	0:0	6	;
INIT	1488:9	1488:9	6	pixwidth = 0
ASSIGN	1488:9	1488:20	7	pixwidth = 0
LVAL	1488:9	1488:9	8	pixwidth
NAME	1488:9	1488:9	9	pixwidth
LEAF_NODE	1488:9	1488:9	10	pixwidth
ASSIGN_OP	1488:18	1488:18	8	=
LEAF_NODE	1488:18	1488:18	9	=
RVAL	1488:20	1488:20	8	0
FIELD	1488:20	1488:20	9	0
LEAF_NODE	1488:20	1488:20	10	0
LEAF_NODE	1488:21	1488:21	5	,
VAR_DECL	1488:2	1488:23	5	uint32 pixheight ; pixheight = 0
TYPE	1488:2	1488:2	6	uint32
TYPE_NAME	1488:2	1488:2	7	uint32
LEAF_NODE	1488:2	1488:2	8	uint32
NAME	1488:23	1488:23	6	pixheight
LEAF_NODE	1488:23	1488:23	7	pixheight
LEAF_NODE	0:0	0:0	6	;
INIT	1488:23	1488:23	6	pixheight = 0
ASSIGN	1488:23	1488:35	7	pixheight = 0
LVAL	1488:23	1488:23	8	pixheight
NAME	1488:23	1488:23	9	pixheight
LEAF_NODE	1488:23	1488:23	10	pixheight
ASSIGN_OP	1488:33	1488:33	8	=
LEAF_NODE	1488:33	1488:33	9	=
RVAL	1488:35	1488:35	8	0
FIELD	1488:35	1488:35	9	0
LEAF_NODE	1488:35	1488:35	10	0
LEAF_NODE	1488:36	1488:36	4	;
SIMPLE_DECL	1489:2	1489:27	3	double ox ; ox = 0.0 , double oy ; oy = 0.0 ;
INIT_DECL_LIST	1489:2	1489:2	4	double ox ; ox = 0.0 , double oy ; oy = 0.0
VAR_DECL	1489:2	1489:9	5	double ox ; ox = 0.0
TYPE	1489:2	1489:2	6	double
TYPE_NAME	1489:2	1489:2	7	double
LEAF_NODE	1489:2	1489:2	8	double
NAME	1489:9	1489:9	6	ox
LEAF_NODE	1489:9	1489:9	7	ox
LEAF_NODE	0:0	0:0	6	;
INIT	1489:9	1489:9	6	ox = 0.0
ASSIGN	1489:9	1489:14	7	ox = 0.0
LVAL	1489:9	1489:9	8	ox
NAME	1489:9	1489:9	9	ox
LEAF_NODE	1489:9	1489:9	10	ox
ASSIGN_OP	1489:12	1489:12	8	=
LEAF_NODE	1489:12	1489:12	9	=
RVAL	1489:14	1489:14	8	0.0
FIELD	1489:14	1489:14	9	0.0
LEAF_NODE	1489:14	1489:14	10	0.0
LEAF_NODE	1489:17	1489:17	5	,
VAR_DECL	1489:2	1489:19	5	double oy ; oy = 0.0
TYPE	1489:2	1489:2	6	double
TYPE_NAME	1489:2	1489:2	7	double
LEAF_NODE	1489:2	1489:2	8	double
NAME	1489:19	1489:19	6	oy
LEAF_NODE	1489:19	1489:19	7	oy
LEAF_NODE	0:0	0:0	6	;
INIT	1489:19	1489:19	6	oy = 0.0
ASSIGN	1489:19	1489:24	7	oy = 0.0
LVAL	1489:19	1489:19	8	oy
NAME	1489:19	1489:19	9	oy
LEAF_NODE	1489:19	1489:19	10	oy
ASSIGN_OP	1489:22	1489:22	8	=
LEAF_NODE	1489:22	1489:22	9	=
RVAL	1489:24	1489:24	8	0.0
FIELD	1489:24	1489:24	9	0.0
LEAF_NODE	1489:24	1489:24	10	0.0
LEAF_NODE	1489:27	1489:27	4	;
SIMPLE_DECL	1490:2	1490:26	3	double pswidth , double psheight ;
INIT_DECL_LIST	1490:2	1490:2	4	double pswidth , double psheight
VAR_DECL	1490:2	1490:9	5	double pswidth
TYPE	1490:2	1490:2	6	double
TYPE_NAME	1490:2	1490:2	7	double
LEAF_NODE	1490:2	1490:2	8	double
NAME	1490:9	1490:9	6	pswidth
LEAF_NODE	1490:9	1490:9	7	pswidth
LEAF_NODE	1490:16	1490:16	5	,
VAR_DECL	1490:2	1490:18	5	double psheight
TYPE	1490:2	1490:2	6	double
TYPE_NAME	1490:2	1490:2	7	double
LEAF_NODE	1490:2	1490:2	8	double
NAME	1490:18	1490:18	6	psheight
LEAF_NODE	1490:18	1490:18	7	psheight
LEAF_NODE	1490:26	1490:26	4	;
SIMPLE_DECL	1491:2	1491:32	3	double view_width , double view_height ;
INIT_DECL_LIST	1491:2	1491:2	4	double view_width , double view_height
VAR_DECL	1491:2	1491:9	5	double view_width
TYPE	1491:2	1491:2	6	double
TYPE_NAME	1491:2	1491:2	7	double
LEAF_NODE	1491:2	1491:2	8	double
NAME	1491:9	1491:9	6	view_width
LEAF_NODE	1491:9	1491:9	7	view_width
LEAF_NODE	1491:19	1491:19	5	,
VAR_DECL	1491:2	1491:21	5	double view_height
TYPE	1491:2	1491:2	6	double
TYPE_NAME	1491:2	1491:2	7	double
LEAF_NODE	1491:2	1491:2	8	double
NAME	1491:21	1491:21	6	view_height
LEAF_NODE	1491:21	1491:21	7	view_height
LEAF_NODE	1491:32	1491:32	4	;
SIMPLE_DECL	1492:2	1492:20	3	double scale ; scale = 1.0 ;
VAR_DECL	1492:2	1492:9	4	double scale ; scale = 1.0
TYPE	1492:2	1492:2	5	double
TYPE_NAME	1492:2	1492:2	6	double
LEAF_NODE	1492:2	1492:2	7	double
NAME	1492:9	1492:9	5	scale
LEAF_NODE	1492:9	1492:9	6	scale
LEAF_NODE	0:0	0:0	5	;
INIT	1492:9	1492:9	5	scale = 1.0
ASSIGN	1492:9	1492:17	6	scale = 1.0
LVAL	1492:9	1492:9	7	scale
NAME	1492:9	1492:9	8	scale
LEAF_NODE	1492:9	1492:9	9	scale
ASSIGN_OP	1492:15	1492:15	7	=
LEAF_NODE	1492:15	1492:15	8	=
RVAL	1492:17	1492:17	7	1.0
FIELD	1492:17	1492:17	8	1.0
LEAF_NODE	1492:17	1492:17	9	1.0
LEAF_NODE	1492:20	1492:20	4	;
SIMPLE_DECL	1493:2	1493:40	3	double left_offset ; left_offset = lm * PS_UNIT_SIZE ;
VAR_DECL	1493:2	1493:9	4	double left_offset ; left_offset = lm * PS_UNIT_SIZE
TYPE	1493:2	1493:2	5	double
TYPE_NAME	1493:2	1493:2	6	double
LEAF_NODE	1493:2	1493:2	7	double
NAME	1493:9	1493:9	5	left_offset
LEAF_NODE	1493:9	1493:9	6	left_offset
LEAF_NODE	0:0	0:0	5	;
INIT	1493:9	1493:9	5	left_offset = lm * PS_UNIT_SIZE
ASSIGN	1493:9	1493:23	6	left_offset = lm * PS_UNIT_SIZE
LVAL	1493:9	1493:9	7	left_offset
NAME	1493:9	1493:9	8	left_offset
LEAF_NODE	1493:9	1493:9	9	left_offset
ASSIGN_OP	1493:21	1493:21	7	=
LEAF_NODE	1493:21	1493:21	8	=
RVAL	1493:23	1493:28	7	lm * PS_UNIT_SIZE
FIELD	1493:23	1493:23	8	lm
LEAF_NODE	1493:23	1493:23	9	lm
LEAF_NODE	1493:26	1493:26	8	*
FIELD	1493:28	1493:28	8	PS_UNIT_SIZE
LEAF_NODE	1493:28	1493:28	9	PS_UNIT_SIZE
LEAF_NODE	1493:40	1493:40	4	;
SIMPLE_DECL	1494:2	1494:42	3	double bottom_offset ; bottom_offset = bm * PS_UNIT_SIZE ;
VAR_DECL	1494:2	1494:9	4	double bottom_offset ; bottom_offset = bm * PS_UNIT_SIZE
TYPE	1494:2	1494:2	5	double
TYPE_NAME	1494:2	1494:2	6	double
LEAF_NODE	1494:2	1494:2	7	double
NAME	1494:9	1494:9	5	bottom_offset
LEAF_NODE	1494:9	1494:9	6	bottom_offset
LEAF_NODE	0:0	0:0	5	;
INIT	1494:9	1494:9	5	bottom_offset = bm * PS_UNIT_SIZE
ASSIGN	1494:9	1494:25	6	bottom_offset = bm * PS_UNIT_SIZE
LVAL	1494:9	1494:9	7	bottom_offset
NAME	1494:9	1494:9	8	bottom_offset
LEAF_NODE	1494:9	1494:9	9	bottom_offset
ASSIGN_OP	1494:23	1494:23	7	=
LEAF_NODE	1494:23	1494:23	8	=
RVAL	1494:25	1494:30	7	bm * PS_UNIT_SIZE
FIELD	1494:25	1494:25	8	bm
LEAF_NODE	1494:25	1494:25	9	bm
LEAF_NODE	1494:28	1494:28	8	*
FIELD	1494:30	1494:30	8	PS_UNIT_SIZE
LEAF_NODE	1494:30	1494:30	9	PS_UNIT_SIZE
LEAF_NODE	1494:42	1494:42	4	;
SIMPLE_DECL	1495:2	1495:20	3	uint32 subfiletype ;
VAR_DECL	1495:2	1495:9	4	uint32 subfiletype
TYPE	1495:2	1495:2	5	uint32
TYPE_NAME	1495:2	1495:2	6	uint32
LEAF_NODE	1495:2	1495:2	7	uint32
NAME	1495:9	1495:9	5	subfiletype
LEAF_NODE	1495:9	1495:9	6	subfiletype
LEAF_NODE	1495:20	1495:20	4	;
SIMPLE_DECL	1496:2	1496:20	3	uint16 * sampleinfo ;
VAR_DECL	1496:2	1496:10	4	uint16 * sampleinfo
TYPE	1496:2	1496:8	5	uint16 *
TYPE_NAME	1496:2	1496:2	6	uint16
LEAF_NODE	1496:2	1496:2	7	uint16
POINTER	1496:8	1496:8	6	*
LEAF_NODE	1496:8	1496:8	7	*
NAME	1496:10	1496:10	5	sampleinfo
LEAF_NODE	1496:10	1496:10	6	sampleinfo
LEAF_NODE	1496:20	1496:20	4	;
LEAF_NODE	1497:2	1497:2	3	static
SIMPLE_DECL	1497:9	1497:23	3	int npages ; npages = 0 ;
VAR_DECL	1497:9	1497:13	4	int npages ; npages = 0
TYPE	1497:9	1497:9	5	int
TYPE_NAME	1497:9	1497:9	6	int
LEAF_NODE	1497:9	1497:9	7	int
NAME	1497:13	1497:13	5	npages
LEAF_NODE	1497:13	1497:13	6	npages
LEAF_NODE	0:0	0:0	5	;
INIT	1497:13	1497:13	5	npages = 0
ASSIGN	1497:13	1497:22	6	npages = 0
LVAL	1497:13	1497:13	7	npages
NAME	1497:13	1497:13	8	npages
LEAF_NODE	1497:13	1497:13	9	npages
ASSIGN_OP	1497:20	1497:20	7	=
LEAF_NODE	1497:20	1497:20	8	=
RVAL	1497:22	1497:22	7	0
FIELD	1497:22	1497:22	8	0
LEAF_NODE	1497:22	1497:22	9	0
LEAF_NODE	1497:23	1497:23	4	;
SELECTION	1499:2	1500:5	3	
KEYWORD	1499:2	1499:2	4	if
LEAF_NODE	1499:2	1499:2	5	if
LEAF_NODE	1499:5	1499:5	4	(
CONDITION	1499:6	1499:6	4	! TIFFGetField ( tif , TIFFTAG_XPOSITION , & ox )
EXPR	1499:6	1499:6	5	! TIFFGetField ( tif , TIFFTAG_XPOSITION , & ox )
UNARY_EXPR	1499:6	1499:7	6	! TIFFGetField ( tif , TIFFTAG_XPOSITION , & ox )
UNARY_OPERATOR	1499:6	1499:6	7	!
LEAF_NODE	1499:6	1499:6	8	!
FUNCTION_CALL	1499:7	1499:47	7	TIFFGetField ( tif , TIFFTAG_XPOSITION , & ox )
CALLEE	1499:7	1499:7	8	TIFFGetField
LEAF_NODE	1499:7	1499:7	9	TIFFGetField
LEAF_NODE	1499:19	1499:19	8	(
ARGUMENT	1499:20	1499:20	8	tif
FIELD	1499:20	1499:20	9	tif
LEAF_NODE	1499:20	1499:20	10	tif
LEAF_NODE	1499:23	1499:23	8	,
ARGUMENT	1499:25	1499:25	8	TIFFTAG_XPOSITION
FIELD	1499:25	1499:25	9	TIFFTAG_XPOSITION
LEAF_NODE	1499:25	1499:25	10	TIFFTAG_XPOSITION
LEAF_NODE	1499:42	1499:42	8	,
ARGUMENT	1499:44	1499:44	8	& ox
UNARY_EXPR	1499:44	1499:45	9	& ox
UNARY_OPERATOR	1499:44	1499:44	10	&
LEAF_NODE	1499:44	1499:44	11	&
FIELD	1499:45	1499:45	10	ox
LEAF_NODE	1499:45	1499:45	11	ox
LEAF_NODE	1499:47	1499:47	8	)
LEAF_NODE	1499:48	1499:48	4	)
STATEMENTS	1500:5	1500:5	4	
EXPR_STATEMENT	1500:5	1500:11	5	ox = 0 ;
EXPR	1500:5	1500:5	6	ox = 0
ASSIGN	1500:5	1500:10	7	ox = 0
LVAL	1500:5	1500:5	8	ox
FIELD	1500:5	1500:5	9	ox
LEAF_NODE	1500:5	1500:5	10	ox
ASSIGN_OP	1500:8	1500:8	8	=
LEAF_NODE	1500:8	1500:8	9	=
RVAL	1500:10	1500:10	8	0
FIELD	1500:10	1500:10	9	0
LEAF_NODE	1500:10	1500:10	10	0
LEAF_NODE	1500:11	1500:11	6	;
SELECTION	1501:2	1502:5	3	
KEYWORD	1501:2	1501:2	4	if
LEAF_NODE	1501:2	1501:2	5	if
LEAF_NODE	1501:5	1501:5	4	(
CONDITION	1501:6	1501:6	4	! TIFFGetField ( tif , TIFFTAG_YPOSITION , & oy )
EXPR	1501:6	1501:6	5	! TIFFGetField ( tif , TIFFTAG_YPOSITION , & oy )
UNARY_EXPR	1501:6	1501:7	6	! TIFFGetField ( tif , TIFFTAG_YPOSITION , & oy )
UNARY_OPERATOR	1501:6	1501:6	7	!
LEAF_NODE	1501:6	1501:6	8	!
FUNCTION_CALL	1501:7	1501:47	7	TIFFGetField ( tif , TIFFTAG_YPOSITION , & oy )
CALLEE	1501:7	1501:7	8	TIFFGetField
LEAF_NODE	1501:7	1501:7	9	TIFFGetField
LEAF_NODE	1501:19	1501:19	8	(
ARGUMENT	1501:20	1501:20	8	tif
FIELD	1501:20	1501:20	9	tif
LEAF_NODE	1501:20	1501:20	10	tif
LEAF_NODE	1501:23	1501:23	8	,
ARGUMENT	1501:25	1501:25	8	TIFFTAG_YPOSITION
FIELD	1501:25	1501:25	9	TIFFTAG_YPOSITION
LEAF_NODE	1501:25	1501:25	10	TIFFTAG_YPOSITION
LEAF_NODE	1501:42	1501:42	8	,
ARGUMENT	1501:44	1501:44	8	& oy
UNARY_EXPR	1501:44	1501:45	9	& oy
UNARY_OPERATOR	1501:44	1501:44	10	&
LEAF_NODE	1501:44	1501:44	11	&
FIELD	1501:45	1501:45	10	oy
LEAF_NODE	1501:45	1501:45	11	oy
LEAF_NODE	1501:47	1501:47	8	)
LEAF_NODE	1501:48	1501:48	4	)
STATEMENTS	1502:5	1502:5	4	
EXPR_STATEMENT	1502:5	1502:11	5	oy = 0 ;
EXPR	1502:5	1502:5	6	oy = 0
ASSIGN	1502:5	1502:10	7	oy = 0
LVAL	1502:5	1502:5	8	oy
FIELD	1502:5	1502:5	9	oy
LEAF_NODE	1502:5	1502:5	10	oy
ASSIGN_OP	1502:8	1502:8	8	=
LEAF_NODE	1502:8	1502:8	9	=
RVAL	1502:10	1502:10	8	0
FIELD	1502:10	1502:10	9	0
LEAF_NODE	1502:10	1502:10	10	0
LEAF_NODE	1502:11	1502:11	6	;
ITERATION	1505:2	1505:5	3	
KEYWORD	1505:2	1505:2	4	do
LEAF_NODE	1505:2	1505:2	5	do
LEAF_NODE	1621:10	1621:10	4	(
CONDITION	1621:11	1621:11	4	( ( subfiletype & FILETYPE_PAGE ) || printAll ) && TIFFReadDirectory ( tif )
EXPR	1621:11	1621:11	5	( ( subfiletype & FILETYPE_PAGE ) || printAll ) && TIFFReadDirectory ( tif )
AND	1621:11	1621:58	6	( ( subfiletype & FILETYPE_PAGE ) || printAll ) && TIFFReadDirectory ( tif )
EXPR	1621:11	1621:53	7	( ( subfiletype & FILETYPE_PAGE ) || printAll )
LEAF_NODE	1621:11	1621:11	8	(
OR	1621:12	1621:45	8	( subfiletype & FILETYPE_PAGE ) || printAll
EXPR	1621:12	1621:40	9	( subfiletype & FILETYPE_PAGE )
LEAF_NODE	1621:12	1621:12	10	(
FIELD	1621:13	1621:13	10	subfiletype
LEAF_NODE	1621:13	1621:13	11	subfiletype
LEAF_NODE	1621:25	1621:25	10	&
FIELD	1621:27	1621:27	10	FILETYPE_PAGE
LEAF_NODE	1621:27	1621:27	11	FILETYPE_PAGE
LEAF_NODE	1621:40	1621:40	10	)
LEAF_NODE	1621:42	1621:42	9	||
EXPR	1621:45	1621:45	9	printAll
FIELD	1621:45	1621:45	10	printAll
LEAF_NODE	1621:45	1621:45	11	printAll
LEAF_NODE	1621:53	1621:53	8	)
LEAF_NODE	1621:55	1621:55	7	&&
EXPR	1621:58	1621:58	7	TIFFReadDirectory ( tif )
FUNCTION_CALL	1621:58	1621:79	8	TIFFReadDirectory ( tif )
CALLEE	1621:58	1621:58	9	TIFFReadDirectory
LEAF_NODE	1621:58	1621:58	10	TIFFReadDirectory
LEAF_NODE	1621:75	1621:75	9	(
ARGUMENT	1621:76	1621:76	9	tif
FIELD	1621:76	1621:76	10	tif
LEAF_NODE	1621:76	1621:76	11	tif
LEAF_NODE	1621:79	1621:79	9	)
LEAF_NODE	1621:80	1621:80	4	)
STATEMENTS	1505:5	1621:2	4	
LEAF_NODE	1505:5	1505:5	5	{
STATEMENTS	1506:5	1620:2	5	
EXPR_STATEMENT	1506:5	1506:46	6	tf_numberstrips = TIFFNumberOfStrips ( tif ) ;
EXPR	1506:5	1506:5	7	tf_numberstrips = TIFFNumberOfStrips ( tif )
ASSIGN	1506:5	1506:23	8	tf_numberstrips = TIFFNumberOfStrips ( tif )
LVAL	1506:5	1506:5	9	tf_numberstrips
FIELD	1506:5	1506:5	10	tf_numberstrips
LEAF_NODE	1506:5	1506:5	11	tf_numberstrips
ASSIGN_OP	1506:21	1506:21	9	=
LEAF_NODE	1506:21	1506:21	10	=
RVAL	1506:23	1506:23	9	TIFFNumberOfStrips ( tif )
FUNCTION_CALL	1506:23	1506:45	10	TIFFNumberOfStrips ( tif )
CALLEE	1506:23	1506:23	11	TIFFNumberOfStrips
LEAF_NODE	1506:23	1506:23	12	TIFFNumberOfStrips
LEAF_NODE	1506:41	1506:41	11	(
ARGUMENT	1506:42	1506:42	11	tif
FIELD	1506:42	1506:42	12	tif
LEAF_NODE	1506:42	1506:42	13	tif
LEAF_NODE	1506:45	1506:45	11	)
LEAF_NODE	1506:46	1506:46	7	;
EXPR_STATEMENT	1507:5	1507:71	6	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & tf_rowsperstrip ) ;
EXPR	1507:5	1507:5	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & tf_rowsperstrip )
FUNCTION_CALL	1507:5	1507:70	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & tf_rowsperstrip )
CALLEE	1507:5	1507:5	9	TIFFGetFieldDefaulted
LEAF_NODE	1507:5	1507:5	10	TIFFGetFieldDefaulted
LEAF_NODE	1507:26	1507:26	9	(
ARGUMENT	1507:27	1507:27	9	tif
FIELD	1507:27	1507:27	10	tif
LEAF_NODE	1507:27	1507:27	11	tif
LEAF_NODE	1507:30	1507:30	9	,
ARGUMENT	1507:32	1507:32	9	TIFFTAG_ROWSPERSTRIP
FIELD	1507:32	1507:32	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1507:32	1507:32	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1507:52	1507:52	9	,
ARGUMENT	1507:54	1507:54	9	& tf_rowsperstrip
UNARY_EXPR	1507:54	1507:55	10	& tf_rowsperstrip
UNARY_OPERATOR	1507:54	1507:54	11	&
LEAF_NODE	1507:54	1507:54	12	&
FIELD	1507:55	1507:55	11	tf_rowsperstrip
LEAF_NODE	1507:55	1507:55	12	tf_rowsperstrip
LEAF_NODE	1507:70	1507:70	9	)
LEAF_NODE	1507:71	1507:71	7	;
EXPR_STATEMENT	1508:5	1508:70	6	TIFFGetFieldDefaulted ( tif , TIFFTAG_BITSPERSAMPLE , & bitspersample ) ;
EXPR	1508:5	1508:5	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_BITSPERSAMPLE , & bitspersample )
FUNCTION_CALL	1508:5	1508:69	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_BITSPERSAMPLE , & bitspersample )
CALLEE	1508:5	1508:5	9	TIFFGetFieldDefaulted
LEAF_NODE	1508:5	1508:5	10	TIFFGetFieldDefaulted
LEAF_NODE	1508:26	1508:26	9	(
ARGUMENT	1508:27	1508:27	9	tif
FIELD	1508:27	1508:27	10	tif
LEAF_NODE	1508:27	1508:27	11	tif
LEAF_NODE	1508:30	1508:30	9	,
ARGUMENT	1508:32	1508:32	9	TIFFTAG_BITSPERSAMPLE
FIELD	1508:32	1508:32	10	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1508:32	1508:32	11	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1508:53	1508:53	9	,
ARGUMENT	1508:55	1508:55	9	& bitspersample
UNARY_EXPR	1508:55	1508:56	10	& bitspersample
UNARY_OPERATOR	1508:55	1508:55	11	&
LEAF_NODE	1508:55	1508:55	12	&
FIELD	1508:56	1508:56	11	bitspersample
LEAF_NODE	1508:56	1508:56	12	bitspersample
LEAF_NODE	1508:69	1508:69	9	)
LEAF_NODE	1508:70	1508:70	7	;
EXPR_STATEMENT	1509:5	1509:74	6	TIFFGetFieldDefaulted ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel ) ;
EXPR	1509:5	1509:5	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
FUNCTION_CALL	1509:5	1509:73	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
CALLEE	1509:5	1509:5	9	TIFFGetFieldDefaulted
LEAF_NODE	1509:5	1509:5	10	TIFFGetFieldDefaulted
LEAF_NODE	1509:26	1509:26	9	(
ARGUMENT	1509:27	1509:27	9	tif
FIELD	1509:27	1509:27	10	tif
LEAF_NODE	1509:27	1509:27	11	tif
LEAF_NODE	1509:30	1509:30	9	,
ARGUMENT	1509:32	1509:32	9	TIFFTAG_SAMPLESPERPIXEL
FIELD	1509:32	1509:32	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	1509:32	1509:32	11	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	1509:55	1509:55	9	,
ARGUMENT	1509:57	1509:57	9	& samplesperpixel
UNARY_EXPR	1509:57	1509:58	10	& samplesperpixel
UNARY_OPERATOR	1509:57	1509:57	11	&
LEAF_NODE	1509:57	1509:57	12	&
FIELD	1509:58	1509:58	11	samplesperpixel
LEAF_NODE	1509:58	1509:58	12	samplesperpixel
LEAF_NODE	1509:73	1509:73	9	)
LEAF_NODE	1509:74	1509:74	7	;
EXPR_STATEMENT	1510:5	1510:75	6	TIFFGetFieldDefaulted ( tif , TIFFTAG_PLANARCONFIG , & planarconfiguration ) ;
EXPR	1510:5	1510:5	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_PLANARCONFIG , & planarconfiguration )
FUNCTION_CALL	1510:5	1510:74	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_PLANARCONFIG , & planarconfiguration )
CALLEE	1510:5	1510:5	9	TIFFGetFieldDefaulted
LEAF_NODE	1510:5	1510:5	10	TIFFGetFieldDefaulted
LEAF_NODE	1510:26	1510:26	9	(
ARGUMENT	1510:27	1510:27	9	tif
FIELD	1510:27	1510:27	10	tif
LEAF_NODE	1510:27	1510:27	11	tif
LEAF_NODE	1510:30	1510:30	9	,
ARGUMENT	1510:32	1510:32	9	TIFFTAG_PLANARCONFIG
FIELD	1510:32	1510:32	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	1510:32	1510:32	11	TIFFTAG_PLANARCONFIG
LEAF_NODE	1510:52	1510:52	9	,
ARGUMENT	1510:54	1510:54	9	& planarconfiguration
UNARY_EXPR	1510:54	1510:55	10	& planarconfiguration
UNARY_OPERATOR	1510:54	1510:54	11	&
LEAF_NODE	1510:54	1510:54	12	&
FIELD	1510:55	1510:55	11	planarconfiguration
LEAF_NODE	1510:55	1510:55	12	planarconfiguration
LEAF_NODE	1510:74	1510:74	9	)
LEAF_NODE	1510:75	1510:75	7	;
EXPR_STATEMENT	1511:5	1511:57	6	TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compression ) ;
EXPR	1511:5	1511:5	7	TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compression )
FUNCTION_CALL	1511:5	1511:56	8	TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compression )
CALLEE	1511:5	1511:5	9	TIFFGetField
LEAF_NODE	1511:5	1511:5	10	TIFFGetField
LEAF_NODE	1511:17	1511:17	9	(
ARGUMENT	1511:18	1511:18	9	tif
FIELD	1511:18	1511:18	10	tif
LEAF_NODE	1511:18	1511:18	11	tif
LEAF_NODE	1511:21	1511:21	9	,
ARGUMENT	1511:23	1511:23	9	TIFFTAG_COMPRESSION
FIELD	1511:23	1511:23	10	TIFFTAG_COMPRESSION
LEAF_NODE	1511:23	1511:23	11	TIFFTAG_COMPRESSION
LEAF_NODE	1511:42	1511:42	9	,
ARGUMENT	1511:44	1511:44	9	& compression
UNARY_EXPR	1511:44	1511:45	10	& compression
UNARY_OPERATOR	1511:44	1511:44	11	&
LEAF_NODE	1511:44	1511:44	12	&
FIELD	1511:45	1511:45	11	compression
LEAF_NODE	1511:45	1511:45	12	compression
LEAF_NODE	1511:56	1511:56	9	)
LEAF_NODE	1511:57	1511:57	7	;
EXPR_STATEMENT	1512:5	1512:81	6	TIFFGetFieldDefaulted ( tif , TIFFTAG_EXTRASAMPLES , & extrasamples , & sampleinfo ) ;
EXPR	1512:5	1512:5	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_EXTRASAMPLES , & extrasamples , & sampleinfo )
FUNCTION_CALL	1512:5	1512:80	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_EXTRASAMPLES , & extrasamples , & sampleinfo )
CALLEE	1512:5	1512:5	9	TIFFGetFieldDefaulted
LEAF_NODE	1512:5	1512:5	10	TIFFGetFieldDefaulted
LEAF_NODE	1512:26	1512:26	9	(
ARGUMENT	1512:27	1512:27	9	tif
FIELD	1512:27	1512:27	10	tif
LEAF_NODE	1512:27	1512:27	11	tif
LEAF_NODE	1512:30	1512:30	9	,
ARGUMENT	1512:32	1512:32	9	TIFFTAG_EXTRASAMPLES
FIELD	1512:32	1512:32	10	TIFFTAG_EXTRASAMPLES
LEAF_NODE	1512:32	1512:32	11	TIFFTAG_EXTRASAMPLES
LEAF_NODE	1512:52	1512:52	9	,
ARGUMENT	1512:54	1512:54	9	& extrasamples
UNARY_EXPR	1512:54	1512:55	10	& extrasamples
UNARY_OPERATOR	1512:54	1512:54	11	&
LEAF_NODE	1512:54	1512:54	12	&
FIELD	1512:55	1512:55	11	extrasamples
LEAF_NODE	1512:55	1512:55	12	extrasamples
LEAF_NODE	1512:67	1512:67	9	,
ARGUMENT	1512:69	1512:69	9	& sampleinfo
UNARY_EXPR	1512:69	1512:70	10	& sampleinfo
UNARY_OPERATOR	1512:69	1512:69	11	&
LEAF_NODE	1512:69	1512:69	12	&
FIELD	1512:70	1512:70	11	sampleinfo
LEAF_NODE	1512:70	1512:70	12	sampleinfo
LEAF_NODE	1512:80	1512:80	9	)
LEAF_NODE	1512:81	1512:81	7	;
EXPR_STATEMENT	1513:5	1513:75	6	alpha = ( extrasamples == 1 && sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA ) ;
EXPR	1513:5	1513:5	7	alpha = ( extrasamples == 1 && sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA )
ASSIGN	1513:5	1513:13	8	alpha = ( extrasamples == 1 && sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA )
LVAL	1513:5	1513:5	9	alpha
FIELD	1513:5	1513:5	10	alpha
LEAF_NODE	1513:5	1513:5	11	alpha
ASSIGN_OP	1513:11	1513:11	9	=
LEAF_NODE	1513:11	1513:11	10	=
RVAL	1513:13	1513:74	9	( extrasamples == 1 && sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA )
LEAF_NODE	1513:13	1513:13	10	(
AND	1513:14	1513:35	10	extrasamples == 1 && sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA
EXPR	1513:14	1513:30	11	extrasamples == 1
FIELD	1513:14	1513:14	12	extrasamples
LEAF_NODE	1513:14	1513:14	13	extrasamples
EQ_OPERATOR	1513:27	1513:27	12	==
LEAF_NODE	1513:27	1513:27	13	==
FIELD	1513:30	1513:30	12	1
LEAF_NODE	1513:30	1513:30	13	1
LEAF_NODE	1513:32	1513:32	11	&&
EXPR	1513:35	1513:52	11	sampleinfo [ 0 ] == EXTRASAMPLE_ASSOCALPHA
FIELD	1513:35	1513:47	12	sampleinfo [ 0 ]
LEAF_NODE	1513:35	1513:35	13	sampleinfo
LEAF_NODE	1513:45	1513:45	13	[
EXPR	1513:46	1513:46	13	0
FIELD	1513:46	1513:46	14	0
LEAF_NODE	1513:46	1513:46	15	0
LEAF_NODE	1513:47	1513:47	13	]
EQ_OPERATOR	1513:49	1513:49	12	==
LEAF_NODE	1513:49	1513:49	13	==
FIELD	1513:52	1513:52	12	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	1513:52	1513:52	13	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	1513:74	1513:74	10	)
LEAF_NODE	1513:75	1513:75	7	;
SELECTION	1514:5	1515:7	6	
KEYWORD	1514:5	1514:5	7	if
LEAF_NODE	1514:5	1514:5	8	if
LEAF_NODE	1514:8	1514:8	7	(
CONDITION	1514:9	1514:9	7	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & photometric )
EXPR	1514:9	1514:9	8	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & photometric )
UNARY_EXPR	1514:9	1514:10	9	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & photometric )
UNARY_OPERATOR	1514:9	1514:9	10	!
LEAF_NODE	1514:9	1514:9	11	!
FUNCTION_CALL	1514:10	1514:61	10	TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & photometric )
CALLEE	1514:10	1514:10	11	TIFFGetField
LEAF_NODE	1514:10	1514:10	12	TIFFGetField
LEAF_NODE	1514:22	1514:22	11	(
ARGUMENT	1514:23	1514:23	11	tif
FIELD	1514:23	1514:23	12	tif
LEAF_NODE	1514:23	1514:23	13	tif
LEAF_NODE	1514:26	1514:26	11	,
ARGUMENT	1514:28	1514:28	11	TIFFTAG_PHOTOMETRIC
FIELD	1514:28	1514:28	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	1514:28	1514:28	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	1514:47	1514:47	11	,
ARGUMENT	1514:49	1514:49	11	& photometric
UNARY_EXPR	1514:49	1514:50	12	& photometric
UNARY_OPERATOR	1514:49	1514:49	13	&
LEAF_NODE	1514:49	1514:49	14	&
FIELD	1514:50	1514:50	13	photometric
LEAF_NODE	1514:50	1514:50	14	photometric
LEAF_NODE	1514:61	1514:61	11	)
LEAF_NODE	1514:62	1514:62	7	)
STATEMENTS	1515:7	1528:7	7	
LEAF_NODE	1515:7	1515:7	8	{
STATEMENTS	1516:7	1516:7	8	
SELECTION	1516:7	1517:13	9	
KEYWORD	1516:7	1516:7	10	switch
LEAF_NODE	1516:7	1516:7	11	switch
LEAF_NODE	1516:14	1516:14	10	(
CONDITION	1516:15	1516:15	10	samplesperpixel - extrasamples
EXPR	1516:15	1516:33	11	samplesperpixel - extrasamples
FIELD	1516:15	1516:15	12	samplesperpixel
LEAF_NODE	1516:15	1516:15	13	samplesperpixel
LEAF_NODE	1516:31	1516:31	12	-
FIELD	1516:33	1516:33	12	extrasamples
LEAF_NODE	1516:33	1516:33	13	extrasamples
LEAF_NODE	1516:45	1516:45	10	)
STATEMENTS	1517:13	1527:12	10	
LEAF_NODE	1517:13	1517:13	11	{
STATEMENTS	1518:12	1526:20	11	
LABEL	1518:12	1518:18	12	case 1 :
LEAF_NODE	1518:12	1518:12	13	case
LEAF_NODE	1518:17	1518:17	13	1
LEAF_NODE	1518:18	1518:18	13	:
SELECTION	1518:20	1519:22	12	
KEYWORD	1518:20	1518:20	13	if
LEAF_NODE	1518:20	1518:20	14	if
LEAF_NODE	1518:23	1518:23	13	(
CONDITION	1518:24	1518:24	13	isCCITTCompression ( tif )
EXPR	1518:24	1518:24	14	isCCITTCompression ( tif )
FUNCTION_CALL	1518:24	1518:46	15	isCCITTCompression ( tif )
CALLEE	1518:24	1518:24	16	isCCITTCompression
LEAF_NODE	1518:24	1518:24	17	isCCITTCompression
LEAF_NODE	1518:42	1518:42	16	(
ARGUMENT	1518:43	1518:43	16	tif
FIELD	1518:43	1518:43	17	tif
LEAF_NODE	1518:43	1518:43	18	tif
LEAF_NODE	1518:46	1518:46	16	)
LEAF_NODE	1518:47	1518:47	13	)
STATEMENTS	1519:22	1519:22	13	
EXPR_STATEMENT	1519:22	1519:58	14	photometric = PHOTOMETRIC_MINISWHITE ;
EXPR	1519:22	1519:22	15	photometric = PHOTOMETRIC_MINISWHITE
ASSIGN	1519:22	1519:36	16	photometric = PHOTOMETRIC_MINISWHITE
LVAL	1519:22	1519:22	17	photometric
FIELD	1519:22	1519:22	18	photometric
LEAF_NODE	1519:22	1519:22	19	photometric
ASSIGN_OP	1519:34	1519:34	17	=
LEAF_NODE	1519:34	1519:34	18	=
RVAL	1519:36	1519:36	17	PHOTOMETRIC_MINISWHITE
FIELD	1519:36	1519:36	18	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1519:36	1519:36	19	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1519:58	1519:58	15	;
SELECTION	1520:20	1521:23	12	
KEYWORD	1520:20	1520:20	13	else
LEAF_NODE	1520:20	1520:20	14	else
STATEMENTS	1521:23	1521:23	13	
EXPR_STATEMENT	1521:23	1521:59	14	photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	1521:23	1521:23	15	photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	1521:23	1521:37	16	photometric = PHOTOMETRIC_MINISBLACK
LVAL	1521:23	1521:23	17	photometric
FIELD	1521:23	1521:23	18	photometric
LEAF_NODE	1521:23	1521:23	19	photometric
ASSIGN_OP	1521:35	1521:35	17	=
LEAF_NODE	1521:35	1521:35	18	=
RVAL	1521:37	1521:37	17	PHOTOMETRIC_MINISBLACK
FIELD	1521:37	1521:37	18	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1521:37	1521:37	19	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1521:59	1521:59	15	;
JUMP_STATEMENT	1522:20	1522:25	12	break DESTINATION ;
KEYWORD	1522:20	1522:20	13	break
LEAF_NODE	1522:20	1522:20	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1522:25	1522:25	13	;
LABEL	1523:12	1523:18	12	case 3 :
LEAF_NODE	1523:12	1523:12	13	case
LEAF_NODE	1523:17	1523:17	13	3
LEAF_NODE	1523:18	1523:18	13	:
EXPR_STATEMENT	1523:20	1523:49	12	photometric = PHOTOMETRIC_RGB ;
EXPR	1523:20	1523:20	13	photometric = PHOTOMETRIC_RGB
ASSIGN	1523:20	1523:34	14	photometric = PHOTOMETRIC_RGB
LVAL	1523:20	1523:20	15	photometric
FIELD	1523:20	1523:20	16	photometric
LEAF_NODE	1523:20	1523:20	17	photometric
ASSIGN_OP	1523:32	1523:32	15	=
LEAF_NODE	1523:32	1523:32	16	=
RVAL	1523:34	1523:34	15	PHOTOMETRIC_RGB
FIELD	1523:34	1523:34	16	PHOTOMETRIC_RGB
LEAF_NODE	1523:34	1523:34	17	PHOTOMETRIC_RGB
LEAF_NODE	1523:49	1523:49	13	;
JUMP_STATEMENT	1524:20	1524:25	12	break DESTINATION ;
KEYWORD	1524:20	1524:20	13	break
LEAF_NODE	1524:20	1524:20	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1524:25	1524:25	13	;
LABEL	1525:12	1525:18	12	case 4 :
LEAF_NODE	1525:12	1525:12	13	case
LEAF_NODE	1525:17	1525:17	13	4
LEAF_NODE	1525:18	1525:18	13	:
EXPR_STATEMENT	1525:20	1525:55	12	photometric = PHOTOMETRIC_SEPARATED ;
EXPR	1525:20	1525:20	13	photometric = PHOTOMETRIC_SEPARATED
ASSIGN	1525:20	1525:34	14	photometric = PHOTOMETRIC_SEPARATED
LVAL	1525:20	1525:20	15	photometric
FIELD	1525:20	1525:20	16	photometric
LEAF_NODE	1525:20	1525:20	17	photometric
ASSIGN_OP	1525:32	1525:32	15	=
LEAF_NODE	1525:32	1525:32	16	=
RVAL	1525:34	1525:34	15	PHOTOMETRIC_SEPARATED
FIELD	1525:34	1525:34	16	PHOTOMETRIC_SEPARATED
LEAF_NODE	1525:34	1525:34	17	PHOTOMETRIC_SEPARATED
LEAF_NODE	1525:55	1525:55	13	;
JUMP_STATEMENT	1526:20	1526:25	12	break DESTINATION ;
KEYWORD	1526:20	1526:20	13	break
LEAF_NODE	1526:20	1526:20	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1526:25	1526:25	13	;
LEAF_NODE	1527:12	1527:12	11	}
LEAF_NODE	1528:7	1528:7	8	}
EXPR_STATEMENT	1533:5	1533:68	6	setupPageState ( tif , & pixwidth , & pixheight , & pswidth , & psheight ) ;
EXPR	1533:5	1533:5	7	setupPageState ( tif , & pixwidth , & pixheight , & pswidth , & psheight )
FUNCTION_CALL	1533:5	1533:67	8	setupPageState ( tif , & pixwidth , & pixheight , & pswidth , & psheight )
CALLEE	1533:5	1533:5	9	setupPageState
LEAF_NODE	1533:5	1533:5	10	setupPageState
LEAF_NODE	1533:19	1533:19	9	(
ARGUMENT	1533:20	1533:20	9	tif
FIELD	1533:20	1533:20	10	tif
LEAF_NODE	1533:20	1533:20	11	tif
LEAF_NODE	1533:23	1533:23	9	,
ARGUMENT	1533:25	1533:25	9	& pixwidth
UNARY_EXPR	1533:25	1533:26	10	& pixwidth
UNARY_OPERATOR	1533:25	1533:25	11	&
LEAF_NODE	1533:25	1533:25	12	&
FIELD	1533:26	1533:26	11	pixwidth
LEAF_NODE	1533:26	1533:26	12	pixwidth
LEAF_NODE	1533:34	1533:34	9	,
ARGUMENT	1533:36	1533:36	9	& pixheight
UNARY_EXPR	1533:36	1533:37	10	& pixheight
UNARY_OPERATOR	1533:36	1533:36	11	&
LEAF_NODE	1533:36	1533:36	12	&
FIELD	1533:37	1533:37	11	pixheight
LEAF_NODE	1533:37	1533:37	12	pixheight
LEAF_NODE	1533:46	1533:46	9	,
ARGUMENT	1533:48	1533:48	9	& pswidth
UNARY_EXPR	1533:48	1533:49	10	& pswidth
UNARY_OPERATOR	1533:48	1533:48	11	&
LEAF_NODE	1533:48	1533:48	12	&
FIELD	1533:49	1533:49	11	pswidth
LEAF_NODE	1533:49	1533:49	12	pswidth
LEAF_NODE	1533:56	1533:56	9	,
ARGUMENT	1533:58	1533:58	9	& psheight
UNARY_EXPR	1533:58	1533:59	10	& psheight
UNARY_OPERATOR	1533:58	1533:58	11	&
LEAF_NODE	1533:58	1533:58	12	&
FIELD	1533:59	1533:59	11	psheight
LEAF_NODE	1533:59	1533:59	12	psheight
LEAF_NODE	1533:67	1533:67	9	)
LEAF_NODE	1533:68	1533:68	7	;
EXPR_STATEMENT	1534:5	1534:25	6	view_width = pswidth ;
EXPR	1534:5	1534:5	7	view_width = pswidth
ASSIGN	1534:5	1534:18	8	view_width = pswidth
LVAL	1534:5	1534:5	9	view_width
FIELD	1534:5	1534:5	10	view_width
LEAF_NODE	1534:5	1534:5	11	view_width
ASSIGN_OP	1534:16	1534:16	9	=
LEAF_NODE	1534:16	1534:16	10	=
RVAL	1534:18	1534:18	9	pswidth
FIELD	1534:18	1534:18	10	pswidth
LEAF_NODE	1534:18	1534:18	11	pswidth
LEAF_NODE	1534:25	1534:25	7	;
EXPR_STATEMENT	1535:5	1535:27	6	view_height = psheight ;
EXPR	1535:5	1535:5	7	view_height = psheight
ASSIGN	1535:5	1535:19	8	view_height = psheight
LVAL	1535:5	1535:5	9	view_height
FIELD	1535:5	1535:5	10	view_height
LEAF_NODE	1535:5	1535:5	11	view_height
ASSIGN_OP	1535:17	1535:17	9	=
LEAF_NODE	1535:17	1535:17	10	=
RVAL	1535:19	1535:19	9	psheight
FIELD	1535:19	1535:19	10	psheight
LEAF_NODE	1535:19	1535:19	11	psheight
LEAF_NODE	1535:27	1535:27	7	;
SELECTION	1537:5	1538:7	6	
KEYWORD	1537:5	1537:5	7	if
LEAF_NODE	1537:5	1537:5	8	if
LEAF_NODE	1537:8	1537:8	7	(
CONDITION	1537:9	1537:9	7	get_viewport ( pgwidth , pgheight , pswidth , psheight , & view_width , & view_height , rotation )
EXPR	1537:9	1537:9	8	get_viewport ( pgwidth , pgheight , pswidth , psheight , & view_width , & view_height , rotation )
FUNCTION_CALL	1537:9	1537:96	9	get_viewport ( pgwidth , pgheight , pswidth , psheight , & view_width , & view_height , rotation )
CALLEE	1537:9	1537:9	10	get_viewport
LEAF_NODE	1537:9	1537:9	11	get_viewport
LEAF_NODE	1537:22	1537:22	10	(
ARGUMENT	1537:23	1537:23	10	pgwidth
FIELD	1537:23	1537:23	11	pgwidth
LEAF_NODE	1537:23	1537:23	12	pgwidth
LEAF_NODE	1537:30	1537:30	10	,
ARGUMENT	1537:32	1537:32	10	pgheight
FIELD	1537:32	1537:32	11	pgheight
LEAF_NODE	1537:32	1537:32	12	pgheight
LEAF_NODE	1537:40	1537:40	10	,
ARGUMENT	1537:42	1537:42	10	pswidth
FIELD	1537:42	1537:42	11	pswidth
LEAF_NODE	1537:42	1537:42	12	pswidth
LEAF_NODE	1537:49	1537:49	10	,
ARGUMENT	1537:51	1537:51	10	psheight
FIELD	1537:51	1537:51	11	psheight
LEAF_NODE	1537:51	1537:51	12	psheight
LEAF_NODE	1537:59	1537:59	10	,
ARGUMENT	1537:61	1537:61	10	& view_width
UNARY_EXPR	1537:61	1537:62	11	& view_width
UNARY_OPERATOR	1537:61	1537:61	12	&
LEAF_NODE	1537:61	1537:61	13	&
FIELD	1537:62	1537:62	12	view_width
LEAF_NODE	1537:62	1537:62	13	view_width
LEAF_NODE	1537:72	1537:72	10	,
ARGUMENT	1537:74	1537:74	10	& view_height
UNARY_EXPR	1537:74	1537:75	11	& view_height
UNARY_OPERATOR	1537:74	1537:74	12	&
LEAF_NODE	1537:74	1537:74	13	&
FIELD	1537:75	1537:75	12	view_height
LEAF_NODE	1537:75	1537:75	13	view_height
LEAF_NODE	1537:86	1537:86	10	,
ARGUMENT	1537:88	1537:88	10	rotation
FIELD	1537:88	1537:88	11	rotation
LEAF_NODE	1537:88	1537:88	12	rotation
LEAF_NODE	1537:96	1537:96	10	)
LEAF_NODE	1537:97	1537:97	7	)
STATEMENTS	1538:7	1541:7	7	
LEAF_NODE	1538:7	1538:7	8	{
STATEMENTS	1539:7	1540:7	8	
EXPR_STATEMENT	1539:7	1539:64	9	TIFFError ( "get_viewport" , "Unable to set image viewport" ) ;
EXPR	1539:7	1539:7	10	TIFFError ( "get_viewport" , "Unable to set image viewport" )
FUNCTION_CALL	1539:7	1539:63	11	TIFFError ( "get_viewport" , "Unable to set image viewport" )
CALLEE	1539:7	1539:7	12	TIFFError
LEAF_NODE	1539:7	1539:7	13	TIFFError
LEAF_NODE	1539:16	1539:16	12	(
ARGUMENT	1539:17	1539:17	12	"get_viewport"
FIELD	1539:17	1539:17	13	"get_viewport"
LEAF_NODE	1539:17	1539:17	14	"get_viewport"
LEAF_NODE	1539:31	1539:31	12	,
ARGUMENT	1539:33	1539:33	12	"Unable to set image viewport"
FIELD	1539:33	1539:33	13	"Unable to set image viewport"
LEAF_NODE	1539:33	1539:33	14	"Unable to set image viewport"
LEAF_NODE	1539:63	1539:63	12	)
LEAF_NODE	1539:64	1539:64	10	;
JUMP_STATEMENT	1540:7	1540:17	9	return ( 1 ) ;
KEYWORD	1540:7	1540:7	10	return
LEAF_NODE	1540:7	1540:7	11	return
DESTINATION	1540:14	1540:14	10	( 1 )
EXPR	1540:14	1540:16	11	( 1 )
LEAF_NODE	1540:14	1540:14	12	(
FIELD	1540:15	1540:15	12	1
LEAF_NODE	1540:15	1540:15	13	1
LEAF_NODE	1540:16	1540:16	12	)
LEAF_NODE	1540:17	1540:17	10	;
LEAF_NODE	1541:7	1541:7	8	}
SELECTION	1544:5	1547:7	6	
KEYWORD	1544:5	1544:5	7	if
LEAF_NODE	1544:5	1544:5	8	if
LEAF_NODE	1544:8	1544:8	7	(
CONDITION	1544:9	1544:9	7	psStart ( fd , npages , auto_rotate , & rotation , & scale , ox , oy , pgwidth , pgheight , view_width , view_height , pswidth , psheight , left_offset , bottom_offset )
EXPR	1544:9	1544:9	8	psStart ( fd , npages , auto_rotate , & rotation , & scale , ox , oy , pgwidth , pgheight , view_width , view_height , pswidth , psheight , left_offset , bottom_offset )
FUNCTION_CALL	1544:9	1546:43	9	psStart ( fd , npages , auto_rotate , & rotation , & scale , ox , oy , pgwidth , pgheight , view_width , view_height , pswidth , psheight , left_offset , bottom_offset )
CALLEE	1544:9	1544:9	10	psStart
LEAF_NODE	1544:9	1544:9	11	psStart
LEAF_NODE	1544:16	1544:16	10	(
ARGUMENT	1544:17	1544:17	10	fd
FIELD	1544:17	1544:17	11	fd
LEAF_NODE	1544:17	1544:17	12	fd
LEAF_NODE	1544:19	1544:19	10	,
ARGUMENT	1544:21	1544:21	10	npages
FIELD	1544:21	1544:21	11	npages
LEAF_NODE	1544:21	1544:21	12	npages
LEAF_NODE	1544:27	1544:27	10	,
ARGUMENT	1544:29	1544:29	10	auto_rotate
FIELD	1544:29	1544:29	11	auto_rotate
LEAF_NODE	1544:29	1544:29	12	auto_rotate
LEAF_NODE	1544:40	1544:40	10	,
ARGUMENT	1544:42	1544:42	10	& rotation
UNARY_EXPR	1544:42	1544:43	11	& rotation
UNARY_OPERATOR	1544:42	1544:42	12	&
LEAF_NODE	1544:42	1544:42	13	&
FIELD	1544:43	1544:43	12	rotation
LEAF_NODE	1544:43	1544:43	13	rotation
LEAF_NODE	1544:51	1544:51	10	,
ARGUMENT	1544:53	1544:53	10	& scale
UNARY_EXPR	1544:53	1544:54	11	& scale
UNARY_OPERATOR	1544:53	1544:53	12	&
LEAF_NODE	1544:53	1544:53	13	&
FIELD	1544:54	1544:54	12	scale
LEAF_NODE	1544:54	1544:54	13	scale
LEAF_NODE	1544:59	1544:59	10	,
ARGUMENT	1544:61	1544:61	10	ox
FIELD	1544:61	1544:61	11	ox
LEAF_NODE	1544:61	1544:61	12	ox
LEAF_NODE	1544:63	1544:63	10	,
ARGUMENT	1544:65	1544:65	10	oy
FIELD	1544:65	1544:65	11	oy
LEAF_NODE	1544:65	1544:65	12	oy
LEAF_NODE	1544:67	1544:67	10	,
ARGUMENT	1545:16	1545:16	10	pgwidth
FIELD	1545:16	1545:16	11	pgwidth
LEAF_NODE	1545:16	1545:16	12	pgwidth
LEAF_NODE	1545:23	1545:23	10	,
ARGUMENT	1545:25	1545:25	10	pgheight
FIELD	1545:25	1545:25	11	pgheight
LEAF_NODE	1545:25	1545:25	12	pgheight
LEAF_NODE	1545:33	1545:33	10	,
ARGUMENT	1545:35	1545:35	10	view_width
FIELD	1545:35	1545:35	11	view_width
LEAF_NODE	1545:35	1545:35	12	view_width
LEAF_NODE	1545:45	1545:45	10	,
ARGUMENT	1545:47	1545:47	10	view_height
FIELD	1545:47	1545:47	11	view_height
LEAF_NODE	1545:47	1545:47	12	view_height
LEAF_NODE	1545:58	1545:58	10	,
ARGUMENT	1545:60	1545:60	10	pswidth
FIELD	1545:60	1545:60	11	pswidth
LEAF_NODE	1545:60	1545:60	12	pswidth
LEAF_NODE	1545:67	1545:67	10	,
ARGUMENT	1545:69	1545:69	10	psheight
FIELD	1545:69	1545:69	11	psheight
LEAF_NODE	1545:69	1545:69	12	psheight
LEAF_NODE	1545:77	1545:77	10	,
ARGUMENT	1546:17	1546:17	10	left_offset
FIELD	1546:17	1546:17	11	left_offset
LEAF_NODE	1546:17	1546:17	12	left_offset
LEAF_NODE	1546:28	1546:28	10	,
ARGUMENT	1546:30	1546:30	10	bottom_offset
FIELD	1546:30	1546:30	11	bottom_offset
LEAF_NODE	1546:30	1546:30	12	bottom_offset
LEAF_NODE	1546:43	1546:43	10	)
LEAF_NODE	1546:44	1546:44	7	)
STATEMENTS	1547:7	1547:7	7	
JUMP_STATEMENT	1547:7	1547:18	8	return ( - 1 ) ;
KEYWORD	1547:7	1547:7	9	return
LEAF_NODE	1547:7	1547:7	10	return
DESTINATION	1547:14	1547:14	9	( - 1 )
EXPR	1547:14	1547:17	10	( - 1 )
LEAF_NODE	1547:14	1547:14	11	(
UNARY_EXPR	1547:15	1547:16	11	- 1
UNARY_OPERATOR	1547:15	1547:15	12	-
LEAF_NODE	1547:15	1547:15	13	-
FIELD	1547:16	1547:16	12	1
LEAF_NODE	1547:16	1547:16	13	1
LEAF_NODE	1547:17	1547:17	11	)
LEAF_NODE	1547:18	1547:18	9	;
SELECTION	1549:5	1550:7	6	
KEYWORD	1549:5	1549:5	7	if
LEAF_NODE	1549:5	1549:5	8	if
LEAF_NODE	1549:8	1549:8	7	(
CONDITION	1549:9	1549:9	7	checkImage ( tif )
EXPR	1549:9	1549:9	8	checkImage ( tif )
FUNCTION_CALL	1549:9	1549:23	9	checkImage ( tif )
CALLEE	1549:9	1549:9	10	checkImage
LEAF_NODE	1549:9	1549:9	11	checkImage
LEAF_NODE	1549:19	1549:19	10	(
ARGUMENT	1549:20	1549:20	10	tif
FIELD	1549:20	1549:20	11	tif
LEAF_NODE	1549:20	1549:20	12	tif
LEAF_NODE	1549:23	1549:23	10	)
LEAF_NODE	1549:24	1549:24	7	)
STATEMENTS	1550:7	1615:7	7	
LEAF_NODE	1550:7	1550:7	8	{
STATEMENTS	1551:7	1593:7	8	
EXPR_STATEMENT	1551:7	1551:45	9	tf_bytesperrow = TIFFScanlineSize ( tif ) ;
EXPR	1551:7	1551:7	10	tf_bytesperrow = TIFFScanlineSize ( tif )
ASSIGN	1551:7	1551:24	11	tf_bytesperrow = TIFFScanlineSize ( tif )
LVAL	1551:7	1551:7	12	tf_bytesperrow
FIELD	1551:7	1551:7	13	tf_bytesperrow
LEAF_NODE	1551:7	1551:7	14	tf_bytesperrow
ASSIGN_OP	1551:22	1551:22	12	=
LEAF_NODE	1551:22	1551:22	13	=
RVAL	1551:24	1551:24	12	TIFFScanlineSize ( tif )
FUNCTION_CALL	1551:24	1551:44	13	TIFFScanlineSize ( tif )
CALLEE	1551:24	1551:24	14	TIFFScanlineSize
LEAF_NODE	1551:24	1551:24	15	TIFFScanlineSize
LEAF_NODE	1551:40	1551:40	14	(
ARGUMENT	1551:41	1551:41	14	tif
FIELD	1551:41	1551:41	15	tif
LEAF_NODE	1551:41	1551:41	16	tif
LEAF_NODE	1551:44	1551:44	14	)
LEAF_NODE	1551:45	1551:45	10	;
LEAF_NODE	1554:7	1554:7	9	if
LEAF_NODE	1554:10	1554:10	9	(
LEAF_NODE	1554:11	1554:11	9	(
LEAF_NODE	1554:12	1554:12	9	maxPageHeight
LEAF_NODE	1554:25	1554:25	9	)
LEAF_NODE	1554:27	1554:27	9	||
LEAF_NODE	1554:30	1554:30	9	(
LEAF_NODE	1554:31	1554:31	9	maxPageWidth
LEAF_NODE	1554:43	1554:43	9	)
LEAF_NODE	1554:46	1554:46	9	||
LEAF_NODE	1554:49	1554:49	9	(
LEAF_NODE	1554:50	1554:50	9	pgwidth
LEAF_NODE	1554:58	1554:58	9	!=
LEAF_NODE	1554:61	1554:61	9	0
LEAF_NODE	1554:62	1554:62	9	)
LEAF_NODE	1554:64	1554:64	9	||
LEAF_NODE	1554:67	1554:67	9	(
LEAF_NODE	1554:68	1554:68	9	pgheight
LEAF_NODE	1554:77	1554:77	9	!=
LEAF_NODE	1554:80	1554:80	9	0
LEAF_NODE	1554:81	1554:81	9	)
LEAF_NODE	1554:82	1554:82	9	)
LEAF_NODE	1555:9	1555:9	9	{
STATEMENTS	1556:8	1563:9	9	
LEAF_NODE	1556:8	1556:8	10	if
LEAF_NODE	1556:11	1556:11	10	(
LEAF_NODE	1556:12	1556:12	10	(
LEAF_NODE	1556:13	1556:13	10	maxPageHeight
LEAF_NODE	1556:26	1556:26	10	)
LEAF_NODE	1556:28	1556:28	10	||
LEAF_NODE	1556:31	1556:31	10	(
LEAF_NODE	1556:32	1556:32	10	maxPageWidth
LEAF_NODE	1556:44	1556:44	10	)
LEAF_NODE	1556:45	1556:45	10	)
LEAF_NODE	1557:11	1557:11	10	{
STATEMENTS	1558:10	1558:10	10	
SELECTION	1558:10	1561:12	11	
KEYWORD	1558:10	1558:10	12	if
LEAF_NODE	1558:10	1558:10	13	if
LEAF_NODE	1558:13	1558:13	12	(
CONDITION	1558:14	1558:14	12	psMaskImage ( fd , tif , rotation , center , & npages , pixwidth , pixheight , left_offset , bottom_offset , pgwidth , pgheight , pswidth , psheight , scale ) < 0
EXPR	1558:14	1560:55	13	psMaskImage ( fd , tif , rotation , center , & npages , pixwidth , pixheight , left_offset , bottom_offset , pgwidth , pgheight , pswidth , psheight , scale ) < 0
FUNCTION_CALL	1558:14	1560:51	14	psMaskImage ( fd , tif , rotation , center , & npages , pixwidth , pixheight , left_offset , bottom_offset , pgwidth , pgheight , pswidth , psheight , scale )
CALLEE	1558:14	1558:14	15	psMaskImage
LEAF_NODE	1558:14	1558:14	16	psMaskImage
LEAF_NODE	1558:25	1558:25	15	(
ARGUMENT	1558:26	1558:26	15	fd
FIELD	1558:26	1558:26	16	fd
LEAF_NODE	1558:26	1558:26	17	fd
LEAF_NODE	1558:28	1558:28	15	,
ARGUMENT	1558:30	1558:30	15	tif
FIELD	1558:30	1558:30	16	tif
LEAF_NODE	1558:30	1558:30	17	tif
LEAF_NODE	1558:33	1558:33	15	,
ARGUMENT	1558:35	1558:35	15	rotation
FIELD	1558:35	1558:35	16	rotation
LEAF_NODE	1558:35	1558:35	17	rotation
LEAF_NODE	1558:43	1558:43	15	,
ARGUMENT	1558:45	1558:45	15	center
FIELD	1558:45	1558:45	16	center
LEAF_NODE	1558:45	1558:45	17	center
LEAF_NODE	1558:51	1558:51	15	,
ARGUMENT	1558:53	1558:53	15	& npages
UNARY_EXPR	1558:53	1558:54	16	& npages
UNARY_OPERATOR	1558:53	1558:53	17	&
LEAF_NODE	1558:53	1558:53	18	&
FIELD	1558:54	1558:54	17	npages
LEAF_NODE	1558:54	1558:54	18	npages
LEAF_NODE	1558:60	1558:60	15	,
ARGUMENT	1558:62	1558:62	15	pixwidth
FIELD	1558:62	1558:62	16	pixwidth
LEAF_NODE	1558:62	1558:62	17	pixwidth
LEAF_NODE	1558:70	1558:70	15	,
ARGUMENT	1558:72	1558:72	15	pixheight
FIELD	1558:72	1558:72	16	pixheight
LEAF_NODE	1558:72	1558:72	17	pixheight
LEAF_NODE	1558:81	1558:81	15	,
ARGUMENT	1559:26	1559:26	15	left_offset
FIELD	1559:26	1559:26	16	left_offset
LEAF_NODE	1559:26	1559:26	17	left_offset
LEAF_NODE	1559:37	1559:37	15	,
ARGUMENT	1559:39	1559:39	15	bottom_offset
FIELD	1559:39	1559:39	16	bottom_offset
LEAF_NODE	1559:39	1559:39	17	bottom_offset
LEAF_NODE	1559:52	1559:52	15	,
ARGUMENT	1559:54	1559:54	15	pgwidth
FIELD	1559:54	1559:54	16	pgwidth
LEAF_NODE	1559:54	1559:54	17	pgwidth
LEAF_NODE	1559:61	1559:61	15	,
ARGUMENT	1559:63	1559:63	15	pgheight
FIELD	1559:63	1559:63	16	pgheight
LEAF_NODE	1559:63	1559:63	17	pgheight
LEAF_NODE	1559:71	1559:71	15	,
ARGUMENT	1560:27	1560:27	15	pswidth
FIELD	1560:27	1560:27	16	pswidth
LEAF_NODE	1560:27	1560:27	17	pswidth
LEAF_NODE	1560:34	1560:34	15	,
ARGUMENT	1560:36	1560:36	15	psheight
FIELD	1560:36	1560:36	16	psheight
LEAF_NODE	1560:36	1560:36	17	psheight
LEAF_NODE	1560:44	1560:44	15	,
ARGUMENT	1560:46	1560:46	15	scale
FIELD	1560:46	1560:46	16	scale
LEAF_NODE	1560:46	1560:46	17	scale
LEAF_NODE	1560:51	1560:51	15	)
REL_OPERATOR	1560:53	1560:53	14	<
LEAF_NODE	1560:53	1560:53	15	<
FIELD	1560:55	1560:55	14	0
LEAF_NODE	1560:55	1560:55	15	0
LEAF_NODE	1560:56	1560:56	12	)
STATEMENTS	1561:12	1561:12	12	
JUMP_STATEMENT	1561:12	1561:23	13	return ( - 1 ) ;
KEYWORD	1561:12	1561:12	14	return
LEAF_NODE	1561:12	1561:12	15	return
DESTINATION	1561:19	1561:19	14	( - 1 )
EXPR	1561:19	1561:22	15	( - 1 )
LEAF_NODE	1561:19	1561:19	16	(
UNARY_EXPR	1561:20	1561:21	16	- 1
UNARY_OPERATOR	1561:20	1561:20	17	-
LEAF_NODE	1561:20	1561:20	18	-
FIELD	1561:21	1561:21	17	1
LEAF_NODE	1561:21	1561:21	18	1
LEAF_NODE	1561:22	1561:22	16	)
LEAF_NODE	1561:23	1561:23	14	;
LEAF_NODE	1562:10	1562:10	10	}
SELECTION	1563:9	1564:11	10	
KEYWORD	1563:9	1563:9	11	else
LEAF_NODE	1563:9	1563:9	12	else
STATEMENTS	1564:11	1591:10	11	
LEAF_NODE	1564:11	1564:11	12	{
STATEMENTS	1565:11	1565:11	12	
SELECTION	1565:11	1566:13	13	
KEYWORD	1565:11	1565:11	14	if
LEAF_NODE	1565:11	1565:11	15	if
LEAF_NODE	1565:14	1565:14	14	(
CONDITION	1565:15	1565:15	14	pgwidth != 0 || pgheight != 0
EXPR	1565:15	1565:15	15	pgwidth != 0 || pgheight != 0
OR	1565:15	1565:31	16	pgwidth != 0 || pgheight != 0
EXPR	1565:15	1565:26	17	pgwidth != 0
FIELD	1565:15	1565:15	18	pgwidth
LEAF_NODE	1565:15	1565:15	19	pgwidth
EQ_OPERATOR	1565:23	1565:23	18	!=
LEAF_NODE	1565:23	1565:23	19	!=
FIELD	1565:26	1565:26	18	0
LEAF_NODE	1565:26	1565:26	19	0
LEAF_NODE	1565:28	1565:28	17	||
EXPR	1565:31	1565:43	17	pgheight != 0
FIELD	1565:31	1565:31	18	pgheight
LEAF_NODE	1565:31	1565:31	19	pgheight
EQ_OPERATOR	1565:40	1565:40	18	!=
LEAF_NODE	1565:40	1565:40	19	!=
FIELD	1565:43	1565:43	18	0
LEAF_NODE	1565:43	1565:43	19	0
LEAF_NODE	1565:44	1565:44	14	)
STATEMENTS	1566:13	1590:12	14	
LEAF_NODE	1566:13	1566:13	15	{
STATEMENTS	1570:13	1589:13	15	
EXPR_STATEMENT	1570:13	1570:21	16	npages ++ ;
EXPR	1570:13	1570:13	17	npages ++
FIELD	1570:13	1570:19	18	npages ++
LEAF_NODE	1570:13	1570:13	19	npages
LEAF_NODE	1570:19	1570:19	19	++
LEAF_NODE	1570:21	1570:21	17	;
EXPR_STATEMENT	1571:13	1571:61	16	fprintf ( fd , "%%%%Page: %d %d\n" , npages , npages ) ;
EXPR	1571:13	1571:13	17	fprintf ( fd , "%%%%Page: %d %d\n" , npages , npages )
FUNCTION_CALL	1571:13	1571:60	18	fprintf ( fd , "%%%%Page: %d %d\n" , npages , npages )
CALLEE	1571:13	1571:13	19	fprintf
LEAF_NODE	1571:13	1571:13	20	fprintf
LEAF_NODE	1571:20	1571:20	19	(
ARGUMENT	1571:21	1571:21	19	fd
FIELD	1571:21	1571:21	20	fd
LEAF_NODE	1571:21	1571:21	21	fd
LEAF_NODE	1571:23	1571:23	19	,
ARGUMENT	1571:25	1571:25	19	"%%%%Page: %d %d\n"
FIELD	1571:25	1571:25	20	"%%%%Page: %d %d\n"
LEAF_NODE	1571:25	1571:25	21	"%%%%Page: %d %d\n"
LEAF_NODE	1571:44	1571:44	19	,
ARGUMENT	1571:46	1571:46	19	npages
FIELD	1571:46	1571:46	20	npages
LEAF_NODE	1571:46	1571:46	21	npages
LEAF_NODE	1571:52	1571:52	19	,
ARGUMENT	1571:54	1571:54	19	npages
FIELD	1571:54	1571:54	20	npages
LEAF_NODE	1571:54	1571:54	21	npages
LEAF_NODE	1571:60	1571:60	19	)
LEAF_NODE	1571:61	1571:61	17	;
SELECTION	1573:13	1574:15	16	
KEYWORD	1573:13	1573:13	17	if
LEAF_NODE	1573:13	1573:13	18	if
LEAF_NODE	1573:16	1573:16	17	(
CONDITION	1573:17	1573:17	17	! generateEPSF && ( level2 || level3 )
EXPR	1573:17	1573:17	18	! generateEPSF && ( level2 || level3 )
AND	1573:17	1573:34	19	! generateEPSF && ( level2 || level3 )
EXPR	1573:17	1573:17	20	! generateEPSF
UNARY_EXPR	1573:17	1573:18	21	! generateEPSF
UNARY_OPERATOR	1573:17	1573:17	22	!
LEAF_NODE	1573:17	1573:17	23	!
FIELD	1573:18	1573:18	22	generateEPSF
LEAF_NODE	1573:18	1573:18	23	generateEPSF
LEAF_NODE	1573:31	1573:31	20	&&
EXPR	1573:34	1573:53	20	( level2 || level3 )
LEAF_NODE	1573:34	1573:34	21	(
OR	1573:36	1573:46	21	level2 || level3
EXPR	1573:36	1573:36	22	level2
FIELD	1573:36	1573:36	23	level2
LEAF_NODE	1573:36	1573:36	24	level2
LEAF_NODE	1573:43	1573:43	22	||
EXPR	1573:46	1573:46	22	level3
FIELD	1573:46	1573:46	23	level3
LEAF_NODE	1573:46	1573:46	24	level3
LEAF_NODE	1573:53	1573:53	21	)
LEAF_NODE	1573:54	1573:54	17	)
STATEMENTS	1574:15	1579:15	17	
LEAF_NODE	1574:15	1574:15	18	{
STATEMENTS	1576:14	1576:14	18	
SELECTION	1576:14	1578:16	19	
KEYWORD	1576:14	1576:14	20	if
LEAF_NODE	1576:14	1576:14	21	if
LEAF_NODE	1576:17	1576:17	20	(
CONDITION	1576:18	1576:18	20	psPageSize ( fd , rotation , pgwidth , pgheight , view_width , view_height , pswidth , psheight )
EXPR	1576:18	1576:18	21	psPageSize ( fd , rotation , pgwidth , pgheight , view_width , view_height , pswidth , psheight )
FUNCTION_CALL	1576:18	1577:72	22	psPageSize ( fd , rotation , pgwidth , pgheight , view_width , view_height , pswidth , psheight )
CALLEE	1576:18	1576:18	23	psPageSize
LEAF_NODE	1576:18	1576:18	24	psPageSize
LEAF_NODE	1576:28	1576:28	23	(
ARGUMENT	1576:29	1576:29	23	fd
FIELD	1576:29	1576:29	24	fd
LEAF_NODE	1576:29	1576:29	25	fd
LEAF_NODE	1576:31	1576:31	23	,
ARGUMENT	1576:33	1576:33	23	rotation
FIELD	1576:33	1576:33	24	rotation
LEAF_NODE	1576:33	1576:33	25	rotation
LEAF_NODE	1576:41	1576:41	23	,
ARGUMENT	1576:43	1576:43	23	pgwidth
FIELD	1576:43	1576:43	24	pgwidth
LEAF_NODE	1576:43	1576:43	25	pgwidth
LEAF_NODE	1576:50	1576:50	23	,
ARGUMENT	1576:52	1576:52	23	pgheight
FIELD	1576:52	1576:52	24	pgheight
LEAF_NODE	1576:52	1576:52	25	pgheight
LEAF_NODE	1576:60	1576:60	23	,
ARGUMENT	1577:30	1577:30	23	view_width
FIELD	1577:30	1577:30	24	view_width
LEAF_NODE	1577:30	1577:30	25	view_width
LEAF_NODE	1577:40	1577:40	23	,
ARGUMENT	1577:42	1577:42	23	view_height
FIELD	1577:42	1577:42	24	view_height
LEAF_NODE	1577:42	1577:42	25	view_height
LEAF_NODE	1577:53	1577:53	23	,
ARGUMENT	1577:55	1577:55	23	pswidth
FIELD	1577:55	1577:55	24	pswidth
LEAF_NODE	1577:55	1577:55	25	pswidth
LEAF_NODE	1577:62	1577:62	23	,
ARGUMENT	1577:64	1577:64	23	psheight
FIELD	1577:64	1577:64	24	psheight
LEAF_NODE	1577:64	1577:64	25	psheight
LEAF_NODE	1577:72	1577:72	23	)
LEAF_NODE	1577:73	1577:73	20	)
STATEMENTS	1578:16	1578:16	20	
JUMP_STATEMENT	1578:16	1578:27	21	return ( - 1 ) ;
KEYWORD	1578:16	1578:16	22	return
LEAF_NODE	1578:16	1578:16	23	return
DESTINATION	1578:23	1578:23	22	( - 1 )
EXPR	1578:23	1578:26	23	( - 1 )
LEAF_NODE	1578:23	1578:23	24	(
UNARY_EXPR	1578:24	1578:25	24	- 1
UNARY_OPERATOR	1578:24	1578:24	25	-
LEAF_NODE	1578:24	1578:24	26	-
FIELD	1578:25	1578:25	25	1
LEAF_NODE	1578:25	1578:25	26	1
LEAF_NODE	1578:26	1578:26	24	)
LEAF_NODE	1578:27	1578:27	22	;
LEAF_NODE	1579:15	1579:15	18	}
EXPR_STATEMENT	1580:13	1580:35	16	fprintf ( fd , "gsave\n" ) ;
EXPR	1580:13	1580:13	17	fprintf ( fd , "gsave\n" )
FUNCTION_CALL	1580:13	1580:34	18	fprintf ( fd , "gsave\n" )
CALLEE	1580:13	1580:13	19	fprintf
LEAF_NODE	1580:13	1580:13	20	fprintf
LEAF_NODE	1580:20	1580:20	19	(
ARGUMENT	1580:21	1580:21	19	fd
FIELD	1580:21	1580:21	20	fd
LEAF_NODE	1580:21	1580:21	21	fd
LEAF_NODE	1580:23	1580:23	19	,
ARGUMENT	1580:25	1580:25	19	"gsave\n"
FIELD	1580:25	1580:25	20	"gsave\n"
LEAF_NODE	1580:25	1580:25	21	"gsave\n"
LEAF_NODE	1580:34	1580:34	19	)
LEAF_NODE	1580:35	1580:35	17	;
EXPR_STATEMENT	1581:13	1581:44	16	fprintf ( fd , "100 dict begin\n" ) ;
EXPR	1581:13	1581:13	17	fprintf ( fd , "100 dict begin\n" )
FUNCTION_CALL	1581:13	1581:43	18	fprintf ( fd , "100 dict begin\n" )
CALLEE	1581:13	1581:13	19	fprintf
LEAF_NODE	1581:13	1581:13	20	fprintf
LEAF_NODE	1581:20	1581:20	19	(
ARGUMENT	1581:21	1581:21	19	fd
FIELD	1581:21	1581:21	20	fd
LEAF_NODE	1581:21	1581:21	21	fd
LEAF_NODE	1581:23	1581:23	19	,
ARGUMENT	1581:25	1581:25	19	"100 dict begin\n"
FIELD	1581:25	1581:25	20	"100 dict begin\n"
LEAF_NODE	1581:25	1581:25	21	"100 dict begin\n"
LEAF_NODE	1581:43	1581:43	19	)
LEAF_NODE	1581:44	1581:44	17	;
SELECTION	1582:13	1584:14	16	
KEYWORD	1582:13	1582:13	17	if
LEAF_NODE	1582:13	1582:13	18	if
LEAF_NODE	1582:16	1582:16	17	(
CONDITION	1582:17	1582:17	17	psScaleImage ( fd , scale , rotation , center , view_width , view_height , pswidth , psheight , left_offset , bottom_offset )
EXPR	1582:17	1582:17	18	psScaleImage ( fd , scale , rotation , center , view_width , view_height , pswidth , psheight , left_offset , bottom_offset )
FUNCTION_CALL	1582:17	1583:75	19	psScaleImage ( fd , scale , rotation , center , view_width , view_height , pswidth , psheight , left_offset , bottom_offset )
CALLEE	1582:17	1582:17	20	psScaleImage
LEAF_NODE	1582:17	1582:17	21	psScaleImage
LEAF_NODE	1582:29	1582:29	20	(
ARGUMENT	1582:30	1582:30	20	fd
FIELD	1582:30	1582:30	21	fd
LEAF_NODE	1582:30	1582:30	22	fd
LEAF_NODE	1582:32	1582:32	20	,
ARGUMENT	1582:34	1582:34	20	scale
FIELD	1582:34	1582:34	21	scale
LEAF_NODE	1582:34	1582:34	22	scale
LEAF_NODE	1582:39	1582:39	20	,
ARGUMENT	1582:41	1582:41	20	rotation
FIELD	1582:41	1582:41	21	rotation
LEAF_NODE	1582:41	1582:41	22	rotation
LEAF_NODE	1582:49	1582:49	20	,
ARGUMENT	1582:51	1582:51	20	center
FIELD	1582:51	1582:51	21	center
LEAF_NODE	1582:51	1582:51	22	center
LEAF_NODE	1582:57	1582:57	20	,
ARGUMENT	1582:59	1582:59	20	view_width
FIELD	1582:59	1582:59	21	view_width
LEAF_NODE	1582:59	1582:59	22	view_width
LEAF_NODE	1582:69	1582:69	20	,
ARGUMENT	1582:71	1582:71	20	view_height
FIELD	1582:71	1582:71	21	view_height
LEAF_NODE	1582:71	1582:71	22	view_height
LEAF_NODE	1582:82	1582:82	20	,
ARGUMENT	1583:30	1583:30	20	pswidth
FIELD	1583:30	1583:30	21	pswidth
LEAF_NODE	1583:30	1583:30	22	pswidth
LEAF_NODE	1583:37	1583:37	20	,
ARGUMENT	1583:39	1583:39	20	psheight
FIELD	1583:39	1583:39	21	psheight
LEAF_NODE	1583:39	1583:39	22	psheight
LEAF_NODE	1583:47	1583:47	20	,
ARGUMENT	1583:49	1583:49	20	left_offset
FIELD	1583:49	1583:49	21	left_offset
LEAF_NODE	1583:49	1583:49	22	left_offset
LEAF_NODE	1583:60	1583:60	20	,
ARGUMENT	1583:62	1583:62	20	bottom_offset
FIELD	1583:62	1583:62	21	bottom_offset
LEAF_NODE	1583:62	1583:62	22	bottom_offset
LEAF_NODE	1583:75	1583:75	20	)
LEAF_NODE	1583:76	1583:76	17	)
STATEMENTS	1584:14	1584:14	17	
JUMP_STATEMENT	1584:14	1584:25	18	return ( - 1 ) ;
KEYWORD	1584:14	1584:14	19	return
LEAF_NODE	1584:14	1584:14	20	return
DESTINATION	1584:21	1584:21	19	( - 1 )
EXPR	1584:21	1584:24	20	( - 1 )
LEAF_NODE	1584:21	1584:21	21	(
UNARY_EXPR	1584:22	1584:23	21	- 1
UNARY_OPERATOR	1584:22	1584:22	22	-
LEAF_NODE	1584:22	1584:22	23	-
FIELD	1584:23	1584:23	22	1
LEAF_NODE	1584:23	1584:23	23	1
LEAF_NODE	1584:24	1584:24	21	)
LEAF_NODE	1584:25	1584:25	19	;
EXPR_STATEMENT	1586:13	1586:49	16	PSpage ( fd , tif , pixwidth , pixheight ) ;
EXPR	1586:13	1586:13	17	PSpage ( fd , tif , pixwidth , pixheight )
FUNCTION_CALL	1586:13	1586:48	18	PSpage ( fd , tif , pixwidth , pixheight )
CALLEE	1586:13	1586:13	19	PSpage
LEAF_NODE	1586:13	1586:13	20	PSpage
LEAF_NODE	1586:19	1586:19	19	(
ARGUMENT	1586:20	1586:20	19	fd
FIELD	1586:20	1586:20	20	fd
LEAF_NODE	1586:20	1586:20	21	fd
LEAF_NODE	1586:22	1586:22	19	,
ARGUMENT	1586:24	1586:24	19	tif
FIELD	1586:24	1586:24	20	tif
LEAF_NODE	1586:24	1586:24	21	tif
LEAF_NODE	1586:27	1586:27	19	,
ARGUMENT	1586:29	1586:29	19	pixwidth
FIELD	1586:29	1586:29	20	pixwidth
LEAF_NODE	1586:29	1586:29	21	pixwidth
LEAF_NODE	1586:37	1586:37	19	,
ARGUMENT	1586:39	1586:39	19	pixheight
FIELD	1586:39	1586:39	20	pixheight
LEAF_NODE	1586:39	1586:39	21	pixheight
LEAF_NODE	1586:48	1586:48	19	)
LEAF_NODE	1586:49	1586:49	17	;
EXPR_STATEMENT	1587:13	1587:33	16	fprintf ( fd , "end\n" ) ;
EXPR	1587:13	1587:13	17	fprintf ( fd , "end\n" )
FUNCTION_CALL	1587:13	1587:32	18	fprintf ( fd , "end\n" )
CALLEE	1587:13	1587:13	19	fprintf
LEAF_NODE	1587:13	1587:13	20	fprintf
LEAF_NODE	1587:20	1587:20	19	(
ARGUMENT	1587:21	1587:21	19	fd
FIELD	1587:21	1587:21	20	fd
LEAF_NODE	1587:21	1587:21	21	fd
LEAF_NODE	1587:23	1587:23	19	,
ARGUMENT	1587:25	1587:25	19	"end\n"
FIELD	1587:25	1587:25	20	"end\n"
LEAF_NODE	1587:25	1587:25	21	"end\n"
LEAF_NODE	1587:32	1587:32	19	)
LEAF_NODE	1587:33	1587:33	17	;
EXPR_STATEMENT	1588:13	1588:38	16	fprintf ( fd , "grestore\n" ) ;
EXPR	1588:13	1588:13	17	fprintf ( fd , "grestore\n" )
FUNCTION_CALL	1588:13	1588:37	18	fprintf ( fd , "grestore\n" )
CALLEE	1588:13	1588:13	19	fprintf
LEAF_NODE	1588:13	1588:13	20	fprintf
LEAF_NODE	1588:20	1588:20	19	(
ARGUMENT	1588:21	1588:21	19	fd
FIELD	1588:21	1588:21	20	fd
LEAF_NODE	1588:21	1588:21	21	fd
LEAF_NODE	1588:23	1588:23	19	,
ARGUMENT	1588:25	1588:25	19	"grestore\n"
FIELD	1588:25	1588:25	20	"grestore\n"
LEAF_NODE	1588:25	1588:25	21	"grestore\n"
LEAF_NODE	1588:37	1588:37	19	)
LEAF_NODE	1588:38	1588:38	17	;
EXPR_STATEMENT	1589:13	1589:38	16	fprintf ( fd , "showpage\n" ) ;
EXPR	1589:13	1589:13	17	fprintf ( fd , "showpage\n" )
FUNCTION_CALL	1589:13	1589:37	18	fprintf ( fd , "showpage\n" )
CALLEE	1589:13	1589:13	19	fprintf
LEAF_NODE	1589:13	1589:13	20	fprintf
LEAF_NODE	1589:20	1589:20	19	(
ARGUMENT	1589:21	1589:21	19	fd
FIELD	1589:21	1589:21	20	fd
LEAF_NODE	1589:21	1589:21	21	fd
LEAF_NODE	1589:23	1589:23	19	,
ARGUMENT	1589:25	1589:25	19	"showpage\n"
FIELD	1589:25	1589:25	20	"showpage\n"
LEAF_NODE	1589:25	1589:25	21	"showpage\n"
LEAF_NODE	1589:37	1589:37	19	)
LEAF_NODE	1589:38	1589:38	17	;
LEAF_NODE	1590:12	1590:12	15	}
LEAF_NODE	1591:10	1591:10	12	}
LEAF_NODE	1592:8	1592:8	9	}
SELECTION	1593:7	1594:9	9	
KEYWORD	1593:7	1593:7	10	else
LEAF_NODE	1593:7	1593:7	11	else
STATEMENTS	1594:9	1614:9	10	
LEAF_NODE	1594:9	1594:9	11	{
STATEMENTS	1595:9	1613:9	11	
EXPR_STATEMENT	1595:9	1595:17	12	npages ++ ;
EXPR	1595:9	1595:9	13	npages ++
FIELD	1595:9	1595:15	14	npages ++
LEAF_NODE	1595:9	1595:9	15	npages
LEAF_NODE	1595:15	1595:15	15	++
LEAF_NODE	1595:17	1595:17	13	;
EXPR_STATEMENT	1596:9	1596:57	12	fprintf ( fd , "%%%%Page: %d %d\n" , npages , npages ) ;
EXPR	1596:9	1596:9	13	fprintf ( fd , "%%%%Page: %d %d\n" , npages , npages )
FUNCTION_CALL	1596:9	1596:56	14	fprintf ( fd , "%%%%Page: %d %d\n" , npages , npages )
CALLEE	1596:9	1596:9	15	fprintf
LEAF_NODE	1596:9	1596:9	16	fprintf
LEAF_NODE	1596:16	1596:16	15	(
ARGUMENT	1596:17	1596:17	15	fd
FIELD	1596:17	1596:17	16	fd
LEAF_NODE	1596:17	1596:17	17	fd
LEAF_NODE	1596:19	1596:19	15	,
ARGUMENT	1596:21	1596:21	15	"%%%%Page: %d %d\n"
FIELD	1596:21	1596:21	16	"%%%%Page: %d %d\n"
LEAF_NODE	1596:21	1596:21	17	"%%%%Page: %d %d\n"
LEAF_NODE	1596:40	1596:40	15	,
ARGUMENT	1596:42	1596:42	15	npages
FIELD	1596:42	1596:42	16	npages
LEAF_NODE	1596:42	1596:42	17	npages
LEAF_NODE	1596:48	1596:48	15	,
ARGUMENT	1596:50	1596:50	15	npages
FIELD	1596:50	1596:50	16	npages
LEAF_NODE	1596:50	1596:50	17	npages
LEAF_NODE	1596:56	1596:56	15	)
LEAF_NODE	1596:57	1596:57	13	;
SELECTION	1598:9	1599:11	12	
KEYWORD	1598:9	1598:9	13	if
LEAF_NODE	1598:9	1598:9	14	if
LEAF_NODE	1598:12	1598:12	13	(
CONDITION	1598:13	1598:13	13	! generateEPSF && ( level2 || level3 )
EXPR	1598:13	1598:13	14	! generateEPSF && ( level2 || level3 )
AND	1598:13	1598:30	15	! generateEPSF && ( level2 || level3 )
EXPR	1598:13	1598:13	16	! generateEPSF
UNARY_EXPR	1598:13	1598:14	17	! generateEPSF
UNARY_OPERATOR	1598:13	1598:13	18	!
LEAF_NODE	1598:13	1598:13	19	!
FIELD	1598:14	1598:14	18	generateEPSF
LEAF_NODE	1598:14	1598:14	19	generateEPSF
LEAF_NODE	1598:27	1598:27	16	&&
EXPR	1598:30	1598:49	16	( level2 || level3 )
LEAF_NODE	1598:30	1598:30	17	(
OR	1598:32	1598:42	17	level2 || level3
EXPR	1598:32	1598:32	18	level2
FIELD	1598:32	1598:32	19	level2
LEAF_NODE	1598:32	1598:32	20	level2
LEAF_NODE	1598:39	1598:39	18	||
EXPR	1598:42	1598:42	18	level3
FIELD	1598:42	1598:42	19	level3
LEAF_NODE	1598:42	1598:42	20	level3
LEAF_NODE	1598:49	1598:49	17	)
LEAF_NODE	1598:50	1598:50	13	)
STATEMENTS	1599:11	1604:9	13	
LEAF_NODE	1599:11	1599:11	14	{
STATEMENTS	1601:10	1601:10	14	
SELECTION	1601:10	1603:11	15	
KEYWORD	1601:10	1601:10	16	if
LEAF_NODE	1601:10	1601:10	17	if
LEAF_NODE	1601:13	1601:13	16	(
CONDITION	1601:14	1601:14	16	psPageSize ( fd , rotation , pgwidth , pgheight , view_width , view_height , pswidth , psheight )
EXPR	1601:14	1601:14	17	psPageSize ( fd , rotation , pgwidth , pgheight , view_width , view_height , pswidth , psheight )
FUNCTION_CALL	1601:14	1602:68	18	psPageSize ( fd , rotation , pgwidth , pgheight , view_width , view_height , pswidth , psheight )
CALLEE	1601:14	1601:14	19	psPageSize
LEAF_NODE	1601:14	1601:14	20	psPageSize
LEAF_NODE	1601:24	1601:24	19	(
ARGUMENT	1601:25	1601:25	19	fd
FIELD	1601:25	1601:25	20	fd
LEAF_NODE	1601:25	1601:25	21	fd
LEAF_NODE	1601:27	1601:27	19	,
ARGUMENT	1601:29	1601:29	19	rotation
FIELD	1601:29	1601:29	20	rotation
LEAF_NODE	1601:29	1601:29	21	rotation
LEAF_NODE	1601:37	1601:37	19	,
ARGUMENT	1601:39	1601:39	19	pgwidth
FIELD	1601:39	1601:39	20	pgwidth
LEAF_NODE	1601:39	1601:39	21	pgwidth
LEAF_NODE	1601:46	1601:46	19	,
ARGUMENT	1601:48	1601:48	19	pgheight
FIELD	1601:48	1601:48	20	pgheight
LEAF_NODE	1601:48	1601:48	21	pgheight
LEAF_NODE	1601:56	1601:56	19	,
ARGUMENT	1602:26	1602:26	19	view_width
FIELD	1602:26	1602:26	20	view_width
LEAF_NODE	1602:26	1602:26	21	view_width
LEAF_NODE	1602:36	1602:36	19	,
ARGUMENT	1602:38	1602:38	19	view_height
FIELD	1602:38	1602:38	20	view_height
LEAF_NODE	1602:38	1602:38	21	view_height
LEAF_NODE	1602:49	1602:49	19	,
ARGUMENT	1602:51	1602:51	19	pswidth
FIELD	1602:51	1602:51	20	pswidth
LEAF_NODE	1602:51	1602:51	21	pswidth
LEAF_NODE	1602:58	1602:58	19	,
ARGUMENT	1602:60	1602:60	19	psheight
FIELD	1602:60	1602:60	20	psheight
LEAF_NODE	1602:60	1602:60	21	psheight
LEAF_NODE	1602:68	1602:68	19	)
LEAF_NODE	1602:69	1602:69	16	)
STATEMENTS	1603:11	1603:11	16	
JUMP_STATEMENT	1603:11	1603:22	17	return ( - 1 ) ;
KEYWORD	1603:11	1603:11	18	return
LEAF_NODE	1603:11	1603:11	19	return
DESTINATION	1603:18	1603:18	18	( - 1 )
EXPR	1603:18	1603:21	19	( - 1 )
LEAF_NODE	1603:18	1603:18	20	(
UNARY_EXPR	1603:19	1603:20	20	- 1
UNARY_OPERATOR	1603:19	1603:19	21	-
LEAF_NODE	1603:19	1603:19	22	-
FIELD	1603:20	1603:20	21	1
LEAF_NODE	1603:20	1603:20	22	1
LEAF_NODE	1603:21	1603:21	20	)
LEAF_NODE	1603:22	1603:22	18	;
LEAF_NODE	1604:9	1604:9	14	}
EXPR_STATEMENT	1605:9	1605:31	12	fprintf ( fd , "gsave\n" ) ;
EXPR	1605:9	1605:9	13	fprintf ( fd , "gsave\n" )
FUNCTION_CALL	1605:9	1605:30	14	fprintf ( fd , "gsave\n" )
CALLEE	1605:9	1605:9	15	fprintf
LEAF_NODE	1605:9	1605:9	16	fprintf
LEAF_NODE	1605:16	1605:16	15	(
ARGUMENT	1605:17	1605:17	15	fd
FIELD	1605:17	1605:17	16	fd
LEAF_NODE	1605:17	1605:17	17	fd
LEAF_NODE	1605:19	1605:19	15	,
ARGUMENT	1605:21	1605:21	15	"gsave\n"
FIELD	1605:21	1605:21	16	"gsave\n"
LEAF_NODE	1605:21	1605:21	17	"gsave\n"
LEAF_NODE	1605:30	1605:30	15	)
LEAF_NODE	1605:31	1605:31	13	;
EXPR_STATEMENT	1606:9	1606:40	12	fprintf ( fd , "100 dict begin\n" ) ;
EXPR	1606:9	1606:9	13	fprintf ( fd , "100 dict begin\n" )
FUNCTION_CALL	1606:9	1606:39	14	fprintf ( fd , "100 dict begin\n" )
CALLEE	1606:9	1606:9	15	fprintf
LEAF_NODE	1606:9	1606:9	16	fprintf
LEAF_NODE	1606:16	1606:16	15	(
ARGUMENT	1606:17	1606:17	15	fd
FIELD	1606:17	1606:17	16	fd
LEAF_NODE	1606:17	1606:17	17	fd
LEAF_NODE	1606:19	1606:19	15	,
ARGUMENT	1606:21	1606:21	15	"100 dict begin\n"
FIELD	1606:21	1606:21	16	"100 dict begin\n"
LEAF_NODE	1606:21	1606:21	17	"100 dict begin\n"
LEAF_NODE	1606:39	1606:39	15	)
LEAF_NODE	1606:40	1606:40	13	;
SELECTION	1607:8	1608:11	12	
KEYWORD	1607:8	1607:8	13	if
LEAF_NODE	1607:8	1607:8	14	if
LEAF_NODE	1607:11	1607:11	13	(
CONDITION	1607:12	1607:12	13	psRotateImage ( fd , rotation , pswidth , psheight , left_offset , bottom_offset )
EXPR	1607:12	1607:12	14	psRotateImage ( fd , rotation , pswidth , psheight , left_offset , bottom_offset )
FUNCTION_CALL	1607:12	1607:85	15	psRotateImage ( fd , rotation , pswidth , psheight , left_offset , bottom_offset )
CALLEE	1607:12	1607:12	16	psRotateImage
LEAF_NODE	1607:12	1607:12	17	psRotateImage
LEAF_NODE	1607:25	1607:25	16	(
ARGUMENT	1607:26	1607:26	16	fd
FIELD	1607:26	1607:26	17	fd
LEAF_NODE	1607:26	1607:26	18	fd
LEAF_NODE	1607:28	1607:28	16	,
ARGUMENT	1607:30	1607:30	16	rotation
FIELD	1607:30	1607:30	17	rotation
LEAF_NODE	1607:30	1607:30	18	rotation
LEAF_NODE	1607:38	1607:38	16	,
ARGUMENT	1607:40	1607:40	16	pswidth
FIELD	1607:40	1607:40	17	pswidth
LEAF_NODE	1607:40	1607:40	18	pswidth
LEAF_NODE	1607:47	1607:47	16	,
ARGUMENT	1607:49	1607:49	16	psheight
FIELD	1607:49	1607:49	17	psheight
LEAF_NODE	1607:49	1607:49	18	psheight
LEAF_NODE	1607:57	1607:57	16	,
ARGUMENT	1607:59	1607:59	16	left_offset
FIELD	1607:59	1607:59	17	left_offset
LEAF_NODE	1607:59	1607:59	18	left_offset
LEAF_NODE	1607:70	1607:70	16	,
ARGUMENT	1607:72	1607:72	16	bottom_offset
FIELD	1607:72	1607:72	17	bottom_offset
LEAF_NODE	1607:72	1607:72	18	bottom_offset
LEAF_NODE	1607:85	1607:85	16	)
LEAF_NODE	1607:86	1607:86	13	)
STATEMENTS	1608:11	1608:11	13	
JUMP_STATEMENT	1608:11	1608:22	14	return ( - 1 ) ;
KEYWORD	1608:11	1608:11	15	return
LEAF_NODE	1608:11	1608:11	16	return
DESTINATION	1608:18	1608:18	15	( - 1 )
EXPR	1608:18	1608:21	16	( - 1 )
LEAF_NODE	1608:18	1608:18	17	(
UNARY_EXPR	1608:19	1608:20	17	- 1
UNARY_OPERATOR	1608:19	1608:19	18	-
LEAF_NODE	1608:19	1608:19	19	-
FIELD	1608:20	1608:20	18	1
LEAF_NODE	1608:20	1608:20	19	1
LEAF_NODE	1608:21	1608:21	17	)
LEAF_NODE	1608:22	1608:22	15	;
EXPR_STATEMENT	1610:9	1610:45	12	PSpage ( fd , tif , pixwidth , pixheight ) ;
EXPR	1610:9	1610:9	13	PSpage ( fd , tif , pixwidth , pixheight )
FUNCTION_CALL	1610:9	1610:44	14	PSpage ( fd , tif , pixwidth , pixheight )
CALLEE	1610:9	1610:9	15	PSpage
LEAF_NODE	1610:9	1610:9	16	PSpage
LEAF_NODE	1610:15	1610:15	15	(
ARGUMENT	1610:16	1610:16	15	fd
FIELD	1610:16	1610:16	16	fd
LEAF_NODE	1610:16	1610:16	17	fd
LEAF_NODE	1610:18	1610:18	15	,
ARGUMENT	1610:20	1610:20	15	tif
FIELD	1610:20	1610:20	16	tif
LEAF_NODE	1610:20	1610:20	17	tif
LEAF_NODE	1610:23	1610:23	15	,
ARGUMENT	1610:25	1610:25	15	pixwidth
FIELD	1610:25	1610:25	16	pixwidth
LEAF_NODE	1610:25	1610:25	17	pixwidth
LEAF_NODE	1610:33	1610:33	15	,
ARGUMENT	1610:35	1610:35	15	pixheight
FIELD	1610:35	1610:35	16	pixheight
LEAF_NODE	1610:35	1610:35	17	pixheight
LEAF_NODE	1610:44	1610:44	15	)
LEAF_NODE	1610:45	1610:45	13	;
EXPR_STATEMENT	1611:9	1611:29	12	fprintf ( fd , "end\n" ) ;
EXPR	1611:9	1611:9	13	fprintf ( fd , "end\n" )
FUNCTION_CALL	1611:9	1611:28	14	fprintf ( fd , "end\n" )
CALLEE	1611:9	1611:9	15	fprintf
LEAF_NODE	1611:9	1611:9	16	fprintf
LEAF_NODE	1611:16	1611:16	15	(
ARGUMENT	1611:17	1611:17	15	fd
FIELD	1611:17	1611:17	16	fd
LEAF_NODE	1611:17	1611:17	17	fd
LEAF_NODE	1611:19	1611:19	15	,
ARGUMENT	1611:21	1611:21	15	"end\n"
FIELD	1611:21	1611:21	16	"end\n"
LEAF_NODE	1611:21	1611:21	17	"end\n"
LEAF_NODE	1611:28	1611:28	15	)
LEAF_NODE	1611:29	1611:29	13	;
EXPR_STATEMENT	1612:9	1612:34	12	fprintf ( fd , "grestore\n" ) ;
EXPR	1612:9	1612:9	13	fprintf ( fd , "grestore\n" )
FUNCTION_CALL	1612:9	1612:33	14	fprintf ( fd , "grestore\n" )
CALLEE	1612:9	1612:9	15	fprintf
LEAF_NODE	1612:9	1612:9	16	fprintf
LEAF_NODE	1612:16	1612:16	15	(
ARGUMENT	1612:17	1612:17	15	fd
FIELD	1612:17	1612:17	16	fd
LEAF_NODE	1612:17	1612:17	17	fd
LEAF_NODE	1612:19	1612:19	15	,
ARGUMENT	1612:21	1612:21	15	"grestore\n"
FIELD	1612:21	1612:21	16	"grestore\n"
LEAF_NODE	1612:21	1612:21	17	"grestore\n"
LEAF_NODE	1612:33	1612:33	15	)
LEAF_NODE	1612:34	1612:34	13	;
EXPR_STATEMENT	1613:9	1613:34	12	fprintf ( fd , "showpage\n" ) ;
EXPR	1613:9	1613:9	13	fprintf ( fd , "showpage\n" )
FUNCTION_CALL	1613:9	1613:33	14	fprintf ( fd , "showpage\n" )
CALLEE	1613:9	1613:9	15	fprintf
LEAF_NODE	1613:9	1613:9	16	fprintf
LEAF_NODE	1613:16	1613:16	15	(
ARGUMENT	1613:17	1613:17	15	fd
FIELD	1613:17	1613:17	16	fd
LEAF_NODE	1613:17	1613:17	17	fd
LEAF_NODE	1613:19	1613:19	15	,
ARGUMENT	1613:21	1613:21	15	"showpage\n"
FIELD	1613:21	1613:21	16	"showpage\n"
LEAF_NODE	1613:21	1613:21	17	"showpage\n"
LEAF_NODE	1613:33	1613:33	15	)
LEAF_NODE	1613:34	1613:34	13	;
LEAF_NODE	1614:9	1614:9	11	}
LEAF_NODE	1615:7	1615:7	8	}
SELECTION	1616:2	1617:4	6	
KEYWORD	1616:2	1616:2	7	if
LEAF_NODE	1616:2	1616:2	8	if
LEAF_NODE	1616:5	1616:5	7	(
CONDITION	1616:6	1616:6	7	generateEPSF
EXPR	1616:6	1616:6	8	generateEPSF
FIELD	1616:6	1616:6	9	generateEPSF
LEAF_NODE	1616:6	1616:6	10	generateEPSF
LEAF_NODE	1616:18	1616:18	7	)
STATEMENTS	1617:4	1617:4	7	
JUMP_STATEMENT	1617:4	1617:9	8	break DESTINATION ;
KEYWORD	1617:4	1617:4	9	break
LEAF_NODE	1617:4	1617:4	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	1617:9	1617:9	9	;
SELECTION	1618:2	1619:4	6	
KEYWORD	1618:2	1618:2	7	if
LEAF_NODE	1618:2	1618:2	8	if
LEAF_NODE	1618:5	1618:5	7	(
CONDITION	1618:6	1618:6	7	auto_rotate
EXPR	1618:6	1618:6	8	auto_rotate
FIELD	1618:6	1618:6	9	auto_rotate
LEAF_NODE	1618:6	1618:6	10	auto_rotate
LEAF_NODE	1618:17	1618:17	7	)
STATEMENTS	1619:4	1619:4	7	
EXPR_STATEMENT	1619:4	1619:18	8	rotation = 0.0 ;
EXPR	1619:4	1619:4	9	rotation = 0.0
ASSIGN	1619:4	1619:15	10	rotation = 0.0
LVAL	1619:4	1619:4	11	rotation
FIELD	1619:4	1619:4	12	rotation
LEAF_NODE	1619:4	1619:4	13	rotation
ASSIGN_OP	1619:13	1619:13	11	=
LEAF_NODE	1619:13	1619:13	12	=
RVAL	1619:15	1619:15	11	0.0
FIELD	1619:15	1619:15	12	0.0
LEAF_NODE	1619:15	1619:15	13	0.0
LEAF_NODE	1619:18	1619:18	9	;
EXPR_STATEMENT	1620:2	1620:63	6	TIFFGetFieldDefaulted ( tif , TIFFTAG_SUBFILETYPE , & subfiletype ) ;
EXPR	1620:2	1620:2	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_SUBFILETYPE , & subfiletype )
FUNCTION_CALL	1620:2	1620:62	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_SUBFILETYPE , & subfiletype )
CALLEE	1620:2	1620:2	9	TIFFGetFieldDefaulted
LEAF_NODE	1620:2	1620:2	10	TIFFGetFieldDefaulted
LEAF_NODE	1620:23	1620:23	9	(
ARGUMENT	1620:24	1620:24	9	tif
FIELD	1620:24	1620:24	10	tif
LEAF_NODE	1620:24	1620:24	11	tif
LEAF_NODE	1620:27	1620:27	9	,
ARGUMENT	1620:29	1620:29	9	TIFFTAG_SUBFILETYPE
FIELD	1620:29	1620:29	10	TIFFTAG_SUBFILETYPE
LEAF_NODE	1620:29	1620:29	11	TIFFTAG_SUBFILETYPE
LEAF_NODE	1620:48	1620:48	9	,
ARGUMENT	1620:50	1620:50	9	& subfiletype
UNARY_EXPR	1620:50	1620:51	10	& subfiletype
UNARY_OPERATOR	1620:50	1620:50	11	&
LEAF_NODE	1620:50	1620:50	12	&
FIELD	1620:51	1620:51	11	subfiletype
LEAF_NODE	1620:51	1620:51	12	subfiletype
LEAF_NODE	1620:62	1620:62	9	)
LEAF_NODE	1620:63	1620:63	7	;
LEAF_NODE	1621:2	1621:2	5	}
LEAF_NODE	1621:81	1621:81	3	;
LEAF_NODE	1623:0	1623:0	3	return
LEAF_NODE	1623:6	1623:6	3	(
LEAF_NODE	1623:7	1623:7	3	npages
LEAF_NODE	1623:13	1623:13	3	)
LEAF_NODE	1623:14	1623:14	3	;
LEAF_NODE	1624:0	1624:0	2	}
SIMPLE_DECL	1626:7	1635:1	1	char [ ] DuplexPreamble ; DuplexPreamble = "\\n%%BeginFeature: *Duplex True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Duplex true put setpagedevice }\n\\n  { statusdict /setduplex known { statusdict begin setduplex true end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n" ;
VAR_DECL	1626:7	1626:12	2	char [ ] DuplexPreamble ; DuplexPreamble = "\\n%%BeginFeature: *Duplex True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Duplex true put setpagedevice }\n\\n  { statusdict /setduplex known { statusdict begin setduplex true end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
TYPE	1626:7	1626:26	3	char [ ]
TYPE_NAME	1626:7	1626:7	4	char
LEAF_NODE	1626:7	1626:7	5	char
TYPE_SUFFIX	1626:26	1626:27	4	[ ]
LEAF_NODE	1626:26	1626:26	5	[
LEAF_NODE	1626:27	1626:27	5	]
NAME	1626:12	1626:12	3	DuplexPreamble
LEAF_NODE	1626:12	1626:12	4	DuplexPreamble
LEAF_NODE	0:0	0:0	3	;
INIT	1626:12	1626:12	3	DuplexPreamble = "\\n%%BeginFeature: *Duplex True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Duplex true put setpagedevice }\n\\n  { statusdict /setduplex known { statusdict begin setduplex true end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
ASSIGN	1626:12	1626:31	4	DuplexPreamble = "\\n%%BeginFeature: *Duplex True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Duplex true put setpagedevice }\n\\n  { statusdict /setduplex known { statusdict begin setduplex true end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
LVAL	1626:12	1626:12	5	DuplexPreamble
NAME	1626:12	1626:12	6	DuplexPreamble
LEAF_NODE	1626:12	1626:12	7	DuplexPreamble
ASSIGN_OP	1626:29	1626:29	5	=
LEAF_NODE	1626:29	1626:29	6	=
RVAL	1626:31	1626:31	5	"\\n%%BeginFeature: *Duplex True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Duplex true put setpagedevice }\n\\n  { statusdict /setduplex known { statusdict begin setduplex true end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
FIELD	1626:31	1626:31	6	"\\n%%BeginFeature: *Duplex True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Duplex true put setpagedevice }\n\\n  { statusdict /setduplex known { statusdict begin setduplex true end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
LEAF_NODE	1626:31	1626:31	7	"\\n%%BeginFeature: *Duplex True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Duplex true put setpagedevice }\n\\n  { statusdict /setduplex known { statusdict begin setduplex true end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
LEAF_NODE	1635:1	1635:1	2	;
SIMPLE_DECL	1637:7	1646:1	1	char [ ] TumblePreamble ; TumblePreamble = "\\n%%BeginFeature: *Tumble True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Tumble true put setpagedevice }\n\\n  { statusdict /settumble known { statusdict begin true settumble end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n" ;
VAR_DECL	1637:7	1637:12	2	char [ ] TumblePreamble ; TumblePreamble = "\\n%%BeginFeature: *Tumble True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Tumble true put setpagedevice }\n\\n  { statusdict /settumble known { statusdict begin true settumble end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
TYPE	1637:7	1637:26	3	char [ ]
TYPE_NAME	1637:7	1637:7	4	char
LEAF_NODE	1637:7	1637:7	5	char
TYPE_SUFFIX	1637:26	1637:27	4	[ ]
LEAF_NODE	1637:26	1637:26	5	[
LEAF_NODE	1637:27	1637:27	5	]
NAME	1637:12	1637:12	3	TumblePreamble
LEAF_NODE	1637:12	1637:12	4	TumblePreamble
LEAF_NODE	0:0	0:0	3	;
INIT	1637:12	1637:12	3	TumblePreamble = "\\n%%BeginFeature: *Tumble True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Tumble true put setpagedevice }\n\\n  { statusdict /settumble known { statusdict begin true settumble end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
ASSIGN	1637:12	1637:31	4	TumblePreamble = "\\n%%BeginFeature: *Tumble True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Tumble true put setpagedevice }\n\\n  { statusdict /settumble known { statusdict begin true settumble end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
LVAL	1637:12	1637:12	5	TumblePreamble
NAME	1637:12	1637:12	6	TumblePreamble
LEAF_NODE	1637:12	1637:12	7	TumblePreamble
ASSIGN_OP	1637:29	1637:29	5	=
LEAF_NODE	1637:29	1637:29	6	=
RVAL	1637:31	1637:31	5	"\\n%%BeginFeature: *Tumble True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Tumble true put setpagedevice }\n\\n  { statusdict /settumble known { statusdict begin true settumble end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
FIELD	1637:31	1637:31	6	"\\n%%BeginFeature: *Tumble True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Tumble true put setpagedevice }\n\\n  { statusdict /settumble known { statusdict begin true settumble end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
LEAF_NODE	1637:31	1637:31	7	"\\n%%BeginFeature: *Tumble True\n\\nsystemdict begin\n\\n  /languagelevel where { pop languagelevel } { 1 } ifelse\n\\n  2 ge { 1 dict dup /Tumble true put setpagedevice }\n\\n  { statusdict /settumble known { statusdict begin true settumble end } if\n\\n  } ifelse\n\\nend\n\\n%%EndFeature\n\\n"
LEAF_NODE	1646:1	1646:1	2	;
SIMPLE_DECL	1648:7	1656:1	1	char [ ] AvoidDeadZonePreamble ; AvoidDeadZonePreamble = "\\ngsave newpath clippath pathbbox grestore\n\\n  4 2 roll 2 copy translate\n\\n  exch 3 1 roll sub 3 1 roll sub exch\n\\n  currentpagedevice /PageSize get aload pop\n\\n  exch 3 1 roll div 3 1 roll div abs exch abs\n\\n  2 copy gt { exch } if pop\n\\n  dup 1 lt { dup scale } { pop } ifelse\n\\n" ;
VAR_DECL	1648:7	1648:12	2	char [ ] AvoidDeadZonePreamble ; AvoidDeadZonePreamble = "\\ngsave newpath clippath pathbbox grestore\n\\n  4 2 roll 2 copy translate\n\\n  exch 3 1 roll sub 3 1 roll sub exch\n\\n  currentpagedevice /PageSize get aload pop\n\\n  exch 3 1 roll div 3 1 roll div abs exch abs\n\\n  2 copy gt { exch } if pop\n\\n  dup 1 lt { dup scale } { pop } ifelse\n\\n"
TYPE	1648:7	1648:33	3	char [ ]
TYPE_NAME	1648:7	1648:7	4	char
LEAF_NODE	1648:7	1648:7	5	char
TYPE_SUFFIX	1648:33	1648:34	4	[ ]
LEAF_NODE	1648:33	1648:33	5	[
LEAF_NODE	1648:34	1648:34	5	]
NAME	1648:12	1648:12	3	AvoidDeadZonePreamble
LEAF_NODE	1648:12	1648:12	4	AvoidDeadZonePreamble
LEAF_NODE	0:0	0:0	3	;
INIT	1648:12	1648:12	3	AvoidDeadZonePreamble = "\\ngsave newpath clippath pathbbox grestore\n\\n  4 2 roll 2 copy translate\n\\n  exch 3 1 roll sub 3 1 roll sub exch\n\\n  currentpagedevice /PageSize get aload pop\n\\n  exch 3 1 roll div 3 1 roll div abs exch abs\n\\n  2 copy gt { exch } if pop\n\\n  dup 1 lt { dup scale } { pop } ifelse\n\\n"
ASSIGN	1648:12	1648:38	4	AvoidDeadZonePreamble = "\\ngsave newpath clippath pathbbox grestore\n\\n  4 2 roll 2 copy translate\n\\n  exch 3 1 roll sub 3 1 roll sub exch\n\\n  currentpagedevice /PageSize get aload pop\n\\n  exch 3 1 roll div 3 1 roll div abs exch abs\n\\n  2 copy gt { exch } if pop\n\\n  dup 1 lt { dup scale } { pop } ifelse\n\\n"
LVAL	1648:12	1648:12	5	AvoidDeadZonePreamble
NAME	1648:12	1648:12	6	AvoidDeadZonePreamble
LEAF_NODE	1648:12	1648:12	7	AvoidDeadZonePreamble
ASSIGN_OP	1648:36	1648:36	5	=
LEAF_NODE	1648:36	1648:36	6	=
RVAL	1648:38	1648:38	5	"\\ngsave newpath clippath pathbbox grestore\n\\n  4 2 roll 2 copy translate\n\\n  exch 3 1 roll sub 3 1 roll sub exch\n\\n  currentpagedevice /PageSize get aload pop\n\\n  exch 3 1 roll div 3 1 roll div abs exch abs\n\\n  2 copy gt { exch } if pop\n\\n  dup 1 lt { dup scale } { pop } ifelse\n\\n"
FIELD	1648:38	1648:38	6	"\\ngsave newpath clippath pathbbox grestore\n\\n  4 2 roll 2 copy translate\n\\n  exch 3 1 roll sub 3 1 roll sub exch\n\\n  currentpagedevice /PageSize get aload pop\n\\n  exch 3 1 roll div 3 1 roll div abs exch abs\n\\n  2 copy gt { exch } if pop\n\\n  dup 1 lt { dup scale } { pop } ifelse\n\\n"
LEAF_NODE	1648:38	1648:38	7	"\\ngsave newpath clippath pathbbox grestore\n\\n  4 2 roll 2 copy translate\n\\n  exch 3 1 roll sub 3 1 roll sub exch\n\\n  currentpagedevice /PageSize get aload pop\n\\n  exch 3 1 roll div 3 1 roll div abs exch abs\n\\n  2 copy gt { exch } if pop\n\\n  dup 1 lt { dup scale } { pop } ifelse\n\\n"
LEAF_NODE	1656:1	1656:1	2	;
FUNCTION_DEF	1658:0	1693:0	1	
RETURN_TYPE	1658:0	1658:0	2	void
TYPE_NAME	1658:0	1658:0	3	void
LEAF_NODE	1658:0	1658:0	4	void
FUNCTION_NAME	1659:0	1659:0	2	PSHead
LEAF_NODE	1659:0	1659:0	3	PSHead
PARAMETER_LIST	1659:6	1659:78	2	( FILE * fd , double pagewidth , double pageheight , double xoff , double yoff )
LEAF_NODE	1659:6	1659:6	3	(
PARAMETER_DECL	1659:7	1659:13	3	FILE * fd
TYPE	1659:7	1659:12	4	FILE *
TYPE_NAME	1659:7	1659:7	5	FILE
LEAF_NODE	1659:7	1659:7	6	FILE
POINTER	1659:12	1659:12	5	*
LEAF_NODE	1659:12	1659:12	6	*
NAME	1659:13	1659:13	4	fd
LEAF_NODE	1659:13	1659:13	5	fd
LEAF_NODE	1659:15	1659:15	3	,
PARAMETER_DECL	1659:17	1659:24	3	double pagewidth
TYPE	1659:17	1659:17	4	double
TYPE_NAME	1659:17	1659:17	5	double
LEAF_NODE	1659:17	1659:17	6	double
NAME	1659:24	1659:24	4	pagewidth
LEAF_NODE	1659:24	1659:24	5	pagewidth
LEAF_NODE	1659:33	1659:33	3	,
PARAMETER_DECL	1659:35	1659:42	3	double pageheight
TYPE	1659:35	1659:35	4	double
TYPE_NAME	1659:35	1659:35	5	double
LEAF_NODE	1659:35	1659:35	6	double
NAME	1659:42	1659:42	4	pageheight
LEAF_NODE	1659:42	1659:42	5	pageheight
LEAF_NODE	1659:52	1659:52	3	,
PARAMETER_DECL	1659:54	1659:61	3	double xoff
TYPE	1659:54	1659:54	4	double
TYPE_NAME	1659:54	1659:54	5	double
LEAF_NODE	1659:54	1659:54	6	double
NAME	1659:61	1659:61	4	xoff
LEAF_NODE	1659:61	1659:61	5	xoff
LEAF_NODE	1659:65	1659:65	3	,
PARAMETER_DECL	1659:67	1659:74	3	double yoff
TYPE	1659:67	1659:67	4	double
TYPE_NAME	1659:67	1659:67	5	double
LEAF_NODE	1659:67	1659:67	6	double
NAME	1659:74	1659:74	4	yoff
LEAF_NODE	1659:74	1659:74	5	yoff
LEAF_NODE	1659:78	1659:78	3	)
LEAF_NODE	1660:0	1660:0	2	{
STATEMENTS	1661:1	1682:8	2	
SIMPLE_DECL	1661:1	1661:9	3	time_t t ;
VAR_DECL	1661:1	1661:8	4	time_t t
TYPE	1661:1	1661:1	5	time_t
TYPE_NAME	1661:1	1661:1	6	time_t
LEAF_NODE	1661:1	1661:1	7	time_t
NAME	1661:8	1661:8	5	t
LEAF_NODE	1661:8	1661:8	6	t
LEAF_NODE	1661:9	1661:9	4	;
EXPR_STATEMENT	1663:1	1663:12	3	t = time ( 0 ) ;
EXPR	1663:1	1663:1	4	t = time ( 0 )
ASSIGN	1663:1	1663:5	5	t = time ( 0 )
LVAL	1663:1	1663:1	6	t
FIELD	1663:1	1663:1	7	t
LEAF_NODE	1663:1	1663:1	8	t
ASSIGN_OP	1663:3	1663:3	6	=
LEAF_NODE	1663:3	1663:3	7	=
RVAL	1663:5	1663:5	6	time ( 0 )
FUNCTION_CALL	1663:5	1663:11	7	time ( 0 )
CALLEE	1663:5	1663:5	8	time
LEAF_NODE	1663:5	1663:5	9	time
LEAF_NODE	1663:9	1663:9	8	(
ARGUMENT	1663:10	1663:10	8	0
FIELD	1663:10	1663:10	9	0
LEAF_NODE	1663:10	1663:10	10	0
LEAF_NODE	1663:11	1663:11	8	)
LEAF_NODE	1663:12	1663:12	4	;
EXPR_STATEMENT	1664:1	1664:68	3	fprintf ( fd , "%%!PS-Adobe-3.0%s\n" , generateEPSF ? " EPSF-3.0" : "" ) ;
EXPR	1664:1	1664:1	4	fprintf ( fd , "%%!PS-Adobe-3.0%s\n" , generateEPSF ? " EPSF-3.0" : "" )
FUNCTION_CALL	1664:1	1664:67	5	fprintf ( fd , "%%!PS-Adobe-3.0%s\n" , generateEPSF ? " EPSF-3.0" : "" )
CALLEE	1664:1	1664:1	6	fprintf
LEAF_NODE	1664:1	1664:1	7	fprintf
LEAF_NODE	1664:8	1664:8	6	(
ARGUMENT	1664:9	1664:9	6	fd
FIELD	1664:9	1664:9	7	fd
LEAF_NODE	1664:9	1664:9	8	fd
LEAF_NODE	1664:11	1664:11	6	,
ARGUMENT	1664:13	1664:13	6	"%%!PS-Adobe-3.0%s\n"
FIELD	1664:13	1664:13	7	"%%!PS-Adobe-3.0%s\n"
LEAF_NODE	1664:13	1664:13	8	"%%!PS-Adobe-3.0%s\n"
LEAF_NODE	1664:34	1664:34	6	,
ARGUMENT	1664:36	1664:36	6	generateEPSF ? " EPSF-3.0" : ""
COND_EXPR	1664:36	1664:65	7	generateEPSF ? " EPSF-3.0" : ""
CONDITION	1664:36	1664:36	8	generateEPSF
FIELD	1664:36	1664:36	9	generateEPSF
LEAF_NODE	1664:36	1664:36	10	generateEPSF
LEAF_NODE	1664:49	1664:49	8	?
EXPR	1664:51	1664:51	8	" EPSF-3.0"
FIELD	1664:51	1664:51	9	" EPSF-3.0"
LEAF_NODE	1664:51	1664:51	10	" EPSF-3.0"
LEAF_NODE	1664:63	1664:63	8	:
FIELD	1664:65	1664:65	8	""
LEAF_NODE	1664:65	1664:65	9	""
LEAF_NODE	1664:67	1664:67	6	)
LEAF_NODE	1664:68	1664:68	4	;
EXPR_STATEMENT	1665:1	1665:64	3	fprintf ( fd , "%%%%Creator: %s\n" , creator ? creator : "tiff2ps" ) ;
EXPR	1665:1	1665:1	4	fprintf ( fd , "%%%%Creator: %s\n" , creator ? creator : "tiff2ps" )
FUNCTION_CALL	1665:1	1665:63	5	fprintf ( fd , "%%%%Creator: %s\n" , creator ? creator : "tiff2ps" )
CALLEE	1665:1	1665:1	6	fprintf
LEAF_NODE	1665:1	1665:1	7	fprintf
LEAF_NODE	1665:8	1665:8	6	(
ARGUMENT	1665:9	1665:9	6	fd
FIELD	1665:9	1665:9	7	fd
LEAF_NODE	1665:9	1665:9	8	fd
LEAF_NODE	1665:11	1665:11	6	,
ARGUMENT	1665:13	1665:13	6	"%%%%Creator: %s\n"
FIELD	1665:13	1665:13	7	"%%%%Creator: %s\n"
LEAF_NODE	1665:13	1665:13	8	"%%%%Creator: %s\n"
LEAF_NODE	1665:32	1665:32	6	,
ARGUMENT	1665:34	1665:34	6	creator ? creator : "tiff2ps"
COND_EXPR	1665:34	1665:54	7	creator ? creator : "tiff2ps"
CONDITION	1665:34	1665:34	8	creator
FIELD	1665:34	1665:34	9	creator
LEAF_NODE	1665:34	1665:34	10	creator
LEAF_NODE	1665:42	1665:42	8	?
EXPR	1665:44	1665:44	8	creator
FIELD	1665:44	1665:44	9	creator
LEAF_NODE	1665:44	1665:44	10	creator
LEAF_NODE	1665:52	1665:52	8	:
FIELD	1665:54	1665:54	8	"tiff2ps"
LEAF_NODE	1665:54	1665:54	9	"tiff2ps"
LEAF_NODE	1665:63	1665:63	6	)
LEAF_NODE	1665:64	1665:64	4	;
EXPR_STATEMENT	1666:8	1666:64	3	fprintf ( fd , "%%%%Title: %s\n" , title ? title : filename ) ;
EXPR	1666:8	1666:8	4	fprintf ( fd , "%%%%Title: %s\n" , title ? title : filename )
FUNCTION_CALL	1666:8	1666:63	5	fprintf ( fd , "%%%%Title: %s\n" , title ? title : filename )
CALLEE	1666:8	1666:8	6	fprintf
LEAF_NODE	1666:8	1666:8	7	fprintf
LEAF_NODE	1666:15	1666:15	6	(
ARGUMENT	1666:16	1666:16	6	fd
FIELD	1666:16	1666:16	7	fd
LEAF_NODE	1666:16	1666:16	8	fd
LEAF_NODE	1666:18	1666:18	6	,
ARGUMENT	1666:20	1666:20	6	"%%%%Title: %s\n"
FIELD	1666:20	1666:20	7	"%%%%Title: %s\n"
LEAF_NODE	1666:20	1666:20	8	"%%%%Title: %s\n"
LEAF_NODE	1666:37	1666:37	6	,
ARGUMENT	1666:39	1666:39	6	title ? title : filename
COND_EXPR	1666:39	1666:55	7	title ? title : filename
CONDITION	1666:39	1666:39	8	title
FIELD	1666:39	1666:39	9	title
LEAF_NODE	1666:39	1666:39	10	title
LEAF_NODE	1666:45	1666:45	8	?
EXPR	1666:47	1666:47	8	title
FIELD	1666:47	1666:47	9	title
LEAF_NODE	1666:47	1666:47	10	title
LEAF_NODE	1666:53	1666:53	8	:
FIELD	1666:55	1666:55	8	filename
LEAF_NODE	1666:55	1666:55	9	filename
LEAF_NODE	1666:63	1666:63	6	)
LEAF_NODE	1666:64	1666:64	4	;
EXPR_STATEMENT	1667:1	1667:47	3	fprintf ( fd , "%%%%CreationDate: %s" , ctime ( & t ) ) ;
EXPR	1667:1	1667:1	4	fprintf ( fd , "%%%%CreationDate: %s" , ctime ( & t ) )
FUNCTION_CALL	1667:1	1667:46	5	fprintf ( fd , "%%%%CreationDate: %s" , ctime ( & t ) )
CALLEE	1667:1	1667:1	6	fprintf
LEAF_NODE	1667:1	1667:1	7	fprintf
LEAF_NODE	1667:8	1667:8	6	(
ARGUMENT	1667:9	1667:9	6	fd
FIELD	1667:9	1667:9	7	fd
LEAF_NODE	1667:9	1667:9	8	fd
LEAF_NODE	1667:11	1667:11	6	,
ARGUMENT	1667:13	1667:13	6	"%%%%CreationDate: %s"
FIELD	1667:13	1667:13	7	"%%%%CreationDate: %s"
LEAF_NODE	1667:13	1667:13	8	"%%%%CreationDate: %s"
LEAF_NODE	1667:35	1667:35	6	,
ARGUMENT	1667:37	1667:37	6	ctime ( & t )
FUNCTION_CALL	1667:37	1667:45	7	ctime ( & t )
CALLEE	1667:37	1667:37	8	ctime
LEAF_NODE	1667:37	1667:37	9	ctime
LEAF_NODE	1667:42	1667:42	8	(
ARGUMENT	1667:43	1667:43	8	& t
UNARY_EXPR	1667:43	1667:44	9	& t
UNARY_OPERATOR	1667:43	1667:43	10	&
LEAF_NODE	1667:43	1667:43	11	&
FIELD	1667:44	1667:44	10	t
LEAF_NODE	1667:44	1667:44	11	t
LEAF_NODE	1667:45	1667:45	8	)
LEAF_NODE	1667:46	1667:46	6	)
LEAF_NODE	1667:47	1667:47	4	;
EXPR_STATEMENT	1668:1	1668:45	3	fprintf ( fd , "%%%%DocumentData: Clean7Bit\n" ) ;
EXPR	1668:1	1668:1	4	fprintf ( fd , "%%%%DocumentData: Clean7Bit\n" )
FUNCTION_CALL	1668:1	1668:44	5	fprintf ( fd , "%%%%DocumentData: Clean7Bit\n" )
CALLEE	1668:1	1668:1	6	fprintf
LEAF_NODE	1668:1	1668:1	7	fprintf
LEAF_NODE	1668:8	1668:8	6	(
ARGUMENT	1668:9	1668:9	6	fd
FIELD	1668:9	1668:9	7	fd
LEAF_NODE	1668:9	1668:9	8	fd
LEAF_NODE	1668:11	1668:11	6	,
ARGUMENT	1668:13	1668:13	6	"%%%%DocumentData: Clean7Bit\n"
FIELD	1668:13	1668:13	7	"%%%%DocumentData: Clean7Bit\n"
LEAF_NODE	1668:13	1668:13	8	"%%%%DocumentData: Clean7Bit\n"
LEAF_NODE	1668:44	1668:44	6	)
LEAF_NODE	1668:45	1668:45	4	;
EXPR_STATEMENT	1672:1	1672:63	3	fprintf ( fd , "%%%%Origin: %ld %ld\n" , ( long ) xoff , ( long ) yoff ) ;
EXPR	1672:1	1672:1	4	fprintf ( fd , "%%%%Origin: %ld %ld\n" , ( long ) xoff , ( long ) yoff )
FUNCTION_CALL	1672:1	1672:62	5	fprintf ( fd , "%%%%Origin: %ld %ld\n" , ( long ) xoff , ( long ) yoff )
CALLEE	1672:1	1672:1	6	fprintf
LEAF_NODE	1672:1	1672:1	7	fprintf
LEAF_NODE	1672:8	1672:8	6	(
ARGUMENT	1672:9	1672:9	6	fd
FIELD	1672:9	1672:9	7	fd
LEAF_NODE	1672:9	1672:9	8	fd
LEAF_NODE	1672:11	1672:11	6	,
ARGUMENT	1672:13	1672:13	6	"%%%%Origin: %ld %ld\n"
FIELD	1672:13	1672:13	7	"%%%%Origin: %ld %ld\n"
LEAF_NODE	1672:13	1672:13	8	"%%%%Origin: %ld %ld\n"
LEAF_NODE	1672:36	1672:36	6	,
ARGUMENT	1672:38	1672:45	6	( long ) xoff
LEAF_NODE	1672:38	1672:38	7	(
TYPE_NAME	1672:39	1672:39	7	long
LEAF_NODE	1672:39	1672:39	8	long
LEAF_NODE	1672:43	1672:43	7	)
FIELD	1672:45	1672:45	7	xoff
LEAF_NODE	1672:45	1672:45	8	xoff
LEAF_NODE	1672:49	1672:49	6	,
ARGUMENT	1672:51	1672:58	6	( long ) yoff
LEAF_NODE	1672:51	1672:51	7	(
TYPE_NAME	1672:52	1672:52	7	long
LEAF_NODE	1672:52	1672:52	8	long
LEAF_NODE	1672:56	1672:56	7	)
FIELD	1672:58	1672:58	7	yoff
LEAF_NODE	1672:58	1672:58	8	yoff
LEAF_NODE	1672:62	1672:62	6	)
LEAF_NODE	1672:63	1672:63	4	;
EXPR_STATEMENT	1673:8	1674:56	3	fprintf ( fd , "%%%%BoundingBox: 0 0 %ld %ld\n" , ( long ) ceil ( pagewidth ) , ( long ) ceil ( pageheight ) ) ;
EXPR	1673:8	1673:8	4	fprintf ( fd , "%%%%BoundingBox: 0 0 %ld %ld\n" , ( long ) ceil ( pagewidth ) , ( long ) ceil ( pageheight ) )
FUNCTION_CALL	1673:8	1674:55	5	fprintf ( fd , "%%%%BoundingBox: 0 0 %ld %ld\n" , ( long ) ceil ( pagewidth ) , ( long ) ceil ( pageheight ) )
CALLEE	1673:8	1673:8	6	fprintf
LEAF_NODE	1673:8	1673:8	7	fprintf
LEAF_NODE	1673:15	1673:15	6	(
ARGUMENT	1673:16	1673:16	6	fd
FIELD	1673:16	1673:16	7	fd
LEAF_NODE	1673:16	1673:16	8	fd
LEAF_NODE	1673:18	1673:18	6	,
ARGUMENT	1673:20	1673:20	6	"%%%%BoundingBox: 0 0 %ld %ld\n"
FIELD	1673:20	1673:20	7	"%%%%BoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1673:20	1673:20	8	"%%%%BoundingBox: 0 0 %ld %ld\n"
LEAF_NODE	1673:52	1673:52	6	,
ARGUMENT	1674:8	1674:15	6	( long ) ceil ( pagewidth )
LEAF_NODE	1674:8	1674:8	7	(
TYPE_NAME	1674:9	1674:9	7	long
LEAF_NODE	1674:9	1674:9	8	long
LEAF_NODE	1674:13	1674:13	7	)
FUNCTION_CALL	1674:15	1674:29	7	ceil ( pagewidth )
CALLEE	1674:15	1674:15	8	ceil
LEAF_NODE	1674:15	1674:15	9	ceil
LEAF_NODE	1674:19	1674:19	8	(
ARGUMENT	1674:20	1674:20	8	pagewidth
FIELD	1674:20	1674:20	9	pagewidth
LEAF_NODE	1674:20	1674:20	10	pagewidth
LEAF_NODE	1674:29	1674:29	8	)
LEAF_NODE	1674:30	1674:30	6	,
ARGUMENT	1674:32	1674:39	6	( long ) ceil ( pageheight )
LEAF_NODE	1674:32	1674:32	7	(
TYPE_NAME	1674:33	1674:33	7	long
LEAF_NODE	1674:33	1674:33	8	long
LEAF_NODE	1674:37	1674:37	7	)
FUNCTION_CALL	1674:39	1674:54	7	ceil ( pageheight )
CALLEE	1674:39	1674:39	8	ceil
LEAF_NODE	1674:39	1674:39	9	ceil
LEAF_NODE	1674:43	1674:43	8	(
ARGUMENT	1674:44	1674:44	8	pageheight
FIELD	1674:44	1674:44	9	pageheight
LEAF_NODE	1674:44	1674:44	10	pageheight
LEAF_NODE	1674:54	1674:54	8	)
LEAF_NODE	1674:55	1674:55	6	)
LEAF_NODE	1674:56	1674:56	4	;
EXPR_STATEMENT	1676:1	1676:72	3	fprintf ( fd , "%%%%LanguageLevel: %d\n" , ( level3 ? 3 : ( level2 ? 2 : 1 ) ) ) ;
EXPR	1676:1	1676:1	4	fprintf ( fd , "%%%%LanguageLevel: %d\n" , ( level3 ? 3 : ( level2 ? 2 : 1 ) ) )
FUNCTION_CALL	1676:1	1676:71	5	fprintf ( fd , "%%%%LanguageLevel: %d\n" , ( level3 ? 3 : ( level2 ? 2 : 1 ) ) )
CALLEE	1676:1	1676:1	6	fprintf
LEAF_NODE	1676:1	1676:1	7	fprintf
LEAF_NODE	1676:8	1676:8	6	(
ARGUMENT	1676:9	1676:9	6	fd
FIELD	1676:9	1676:9	7	fd
LEAF_NODE	1676:9	1676:9	8	fd
LEAF_NODE	1676:11	1676:11	6	,
ARGUMENT	1676:13	1676:13	6	"%%%%LanguageLevel: %d\n"
FIELD	1676:13	1676:13	7	"%%%%LanguageLevel: %d\n"
LEAF_NODE	1676:13	1676:13	8	"%%%%LanguageLevel: %d\n"
LEAF_NODE	1676:38	1676:38	6	,
ARGUMENT	1676:40	1676:70	6	( level3 ? 3 : ( level2 ? 2 : 1 ) )
LEAF_NODE	1676:40	1676:40	7	(
COND_EXPR	1676:41	1676:69	7	level3 ? 3 : ( level2 ? 2 : 1 )
CONDITION	1676:41	1676:41	8	level3
FIELD	1676:41	1676:41	9	level3
LEAF_NODE	1676:41	1676:41	10	level3
LEAF_NODE	1676:48	1676:48	8	?
EXPR	1676:50	1676:50	8	3
FIELD	1676:50	1676:50	9	3
LEAF_NODE	1676:50	1676:50	10	3
LEAF_NODE	1676:52	1676:52	8	:
LEAF_NODE	1676:54	1676:54	8	(
COND_EXPR	1676:55	1676:68	8	level2 ? 2 : 1
CONDITION	1676:55	1676:55	9	level2
FIELD	1676:55	1676:55	10	level2
LEAF_NODE	1676:55	1676:55	11	level2
LEAF_NODE	1676:62	1676:62	9	?
EXPR	1676:64	1676:64	9	2
FIELD	1676:64	1676:64	10	2
LEAF_NODE	1676:64	1676:64	11	2
LEAF_NODE	1676:66	1676:66	9	:
FIELD	1676:68	1676:68	9	1
LEAF_NODE	1676:68	1676:68	10	1
LEAF_NODE	1676:69	1676:69	8	)
LEAF_NODE	1676:70	1676:70	7	)
LEAF_NODE	1676:71	1676:71	6	)
LEAF_NODE	1676:72	1676:72	4	;
SELECTION	1677:8	1678:3	3	
KEYWORD	1677:8	1677:8	4	if
LEAF_NODE	1677:8	1677:8	5	if
LEAF_NODE	1677:11	1677:11	4	(
CONDITION	1677:12	1677:12	4	generateEPSF == TRUE
EXPR	1677:12	1677:28	5	generateEPSF == TRUE
FIELD	1677:12	1677:12	6	generateEPSF
LEAF_NODE	1677:12	1677:12	7	generateEPSF
EQ_OPERATOR	1677:25	1677:25	6	==
LEAF_NODE	1677:25	1677:25	7	==
FIELD	1677:28	1677:28	6	TRUE
LEAF_NODE	1677:28	1677:28	7	TRUE
LEAF_NODE	1677:32	1677:32	4	)
STATEMENTS	1678:3	1678:3	4	
EXPR_STATEMENT	1678:3	1678:34	5	fprintf ( fd , "%%%%Pages: 1 1\n" ) ;
EXPR	1678:3	1678:3	6	fprintf ( fd , "%%%%Pages: 1 1\n" )
FUNCTION_CALL	1678:3	1678:33	7	fprintf ( fd , "%%%%Pages: 1 1\n" )
CALLEE	1678:3	1678:3	8	fprintf
LEAF_NODE	1678:3	1678:3	9	fprintf
LEAF_NODE	1678:10	1678:10	8	(
ARGUMENT	1678:11	1678:11	8	fd
FIELD	1678:11	1678:11	9	fd
LEAF_NODE	1678:11	1678:11	10	fd
LEAF_NODE	1678:13	1678:13	8	,
ARGUMENT	1678:15	1678:15	8	"%%%%Pages: 1 1\n"
FIELD	1678:15	1678:15	9	"%%%%Pages: 1 1\n"
LEAF_NODE	1678:15	1678:15	10	"%%%%Pages: 1 1\n"
LEAF_NODE	1678:33	1678:33	8	)
LEAF_NODE	1678:34	1678:34	6	;
SELECTION	1679:8	1680:3	3	
KEYWORD	1679:8	1679:8	4	else
LEAF_NODE	1679:8	1679:8	5	else
STATEMENTS	1680:3	1680:3	4	
EXPR_STATEMENT	1680:3	1680:38	5	fprintf ( fd , "%%%%Pages: (atend)\n" ) ;
EXPR	1680:3	1680:3	6	fprintf ( fd , "%%%%Pages: (atend)\n" )
FUNCTION_CALL	1680:3	1680:37	7	fprintf ( fd , "%%%%Pages: (atend)\n" )
CALLEE	1680:3	1680:3	8	fprintf
LEAF_NODE	1680:3	1680:3	9	fprintf
LEAF_NODE	1680:10	1680:10	8	(
ARGUMENT	1680:11	1680:11	8	fd
FIELD	1680:11	1680:11	9	fd
LEAF_NODE	1680:11	1680:11	10	fd
LEAF_NODE	1680:13	1680:13	8	,
ARGUMENT	1680:15	1680:15	8	"%%%%Pages: (atend)\n"
FIELD	1680:15	1680:15	9	"%%%%Pages: (atend)\n"
LEAF_NODE	1680:15	1680:15	10	"%%%%Pages: (atend)\n"
LEAF_NODE	1680:37	1680:37	8	)
LEAF_NODE	1680:38	1680:38	6	;
EXPR_STATEMENT	1681:1	1681:33	3	fprintf ( fd , "%%%%EndComments\n" ) ;
EXPR	1681:1	1681:1	4	fprintf ( fd , "%%%%EndComments\n" )
FUNCTION_CALL	1681:1	1681:32	5	fprintf ( fd , "%%%%EndComments\n" )
CALLEE	1681:1	1681:1	6	fprintf
LEAF_NODE	1681:1	1681:1	7	fprintf
LEAF_NODE	1681:8	1681:8	6	(
ARGUMENT	1681:9	1681:9	6	fd
FIELD	1681:9	1681:9	7	fd
LEAF_NODE	1681:9	1681:9	8	fd
LEAF_NODE	1681:11	1681:11	6	,
ARGUMENT	1681:13	1681:13	6	"%%%%EndComments\n"
FIELD	1681:13	1681:13	7	"%%%%EndComments\n"
LEAF_NODE	1681:13	1681:13	8	"%%%%EndComments\n"
LEAF_NODE	1681:32	1681:32	6	)
LEAF_NODE	1681:33	1681:33	4	;
SELECTION	1682:8	1683:10	3	
KEYWORD	1682:8	1682:8	4	if
LEAF_NODE	1682:8	1682:8	5	if
LEAF_NODE	1682:11	1682:11	4	(
CONDITION	1682:12	1682:12	4	generateEPSF == FALSE
EXPR	1682:12	1682:28	5	generateEPSF == FALSE
FIELD	1682:12	1682:12	6	generateEPSF
LEAF_NODE	1682:12	1682:12	7	generateEPSF
EQ_OPERATOR	1682:25	1682:25	6	==
LEAF_NODE	1682:25	1682:25	7	==
FIELD	1682:28	1682:28	6	FALSE
LEAF_NODE	1682:28	1682:28	7	FALSE
LEAF_NODE	1682:33	1682:33	4	)
STATEMENTS	1683:10	1692:3	4	
LEAF_NODE	1683:10	1683:10	5	{
STATEMENTS	1684:5	1691:3	5	
EXPR_STATEMENT	1684:5	1684:36	6	fprintf ( fd , "%%%%BeginSetup\n" ) ;
EXPR	1684:5	1684:5	7	fprintf ( fd , "%%%%BeginSetup\n" )
FUNCTION_CALL	1684:5	1684:35	8	fprintf ( fd , "%%%%BeginSetup\n" )
CALLEE	1684:5	1684:5	9	fprintf
LEAF_NODE	1684:5	1684:5	10	fprintf
LEAF_NODE	1684:12	1684:12	9	(
ARGUMENT	1684:13	1684:13	9	fd
FIELD	1684:13	1684:13	10	fd
LEAF_NODE	1684:13	1684:13	11	fd
LEAF_NODE	1684:15	1684:15	9	,
ARGUMENT	1684:17	1684:17	9	"%%%%BeginSetup\n"
FIELD	1684:17	1684:17	10	"%%%%BeginSetup\n"
LEAF_NODE	1684:17	1684:17	11	"%%%%BeginSetup\n"
LEAF_NODE	1684:35	1684:35	9	)
LEAF_NODE	1684:36	1684:36	7	;
SELECTION	1685:3	1686:2	6	
KEYWORD	1685:3	1685:3	7	if
LEAF_NODE	1685:3	1685:3	8	if
LEAF_NODE	1685:6	1685:6	7	(
CONDITION	1685:7	1685:7	7	PSduplex
EXPR	1685:7	1685:7	8	PSduplex
FIELD	1685:7	1685:7	9	PSduplex
LEAF_NODE	1685:7	1685:7	10	PSduplex
LEAF_NODE	1685:15	1685:15	7	)
STATEMENTS	1686:2	1686:2	7	
EXPR_STATEMENT	1686:2	1686:35	8	fprintf ( fd , "%s" , DuplexPreamble ) ;
EXPR	1686:2	1686:2	9	fprintf ( fd , "%s" , DuplexPreamble )
FUNCTION_CALL	1686:2	1686:34	10	fprintf ( fd , "%s" , DuplexPreamble )
CALLEE	1686:2	1686:2	11	fprintf
LEAF_NODE	1686:2	1686:2	12	fprintf
LEAF_NODE	1686:9	1686:9	11	(
ARGUMENT	1686:10	1686:10	11	fd
FIELD	1686:10	1686:10	12	fd
LEAF_NODE	1686:10	1686:10	13	fd
LEAF_NODE	1686:12	1686:12	11	,
ARGUMENT	1686:14	1686:14	11	"%s"
FIELD	1686:14	1686:14	12	"%s"
LEAF_NODE	1686:14	1686:14	13	"%s"
LEAF_NODE	1686:18	1686:18	11	,
ARGUMENT	1686:20	1686:20	11	DuplexPreamble
FIELD	1686:20	1686:20	12	DuplexPreamble
LEAF_NODE	1686:20	1686:20	13	DuplexPreamble
LEAF_NODE	1686:34	1686:34	11	)
LEAF_NODE	1686:35	1686:35	9	;
SELECTION	1687:3	1688:2	6	
KEYWORD	1687:3	1687:3	7	if
LEAF_NODE	1687:3	1687:3	8	if
LEAF_NODE	1687:6	1687:6	7	(
CONDITION	1687:7	1687:7	7	PStumble
EXPR	1687:7	1687:7	8	PStumble
FIELD	1687:7	1687:7	9	PStumble
LEAF_NODE	1687:7	1687:7	10	PStumble
LEAF_NODE	1687:15	1687:15	7	)
STATEMENTS	1688:2	1688:2	7	
EXPR_STATEMENT	1688:2	1688:35	8	fprintf ( fd , "%s" , TumblePreamble ) ;
EXPR	1688:2	1688:2	9	fprintf ( fd , "%s" , TumblePreamble )
FUNCTION_CALL	1688:2	1688:34	10	fprintf ( fd , "%s" , TumblePreamble )
CALLEE	1688:2	1688:2	11	fprintf
LEAF_NODE	1688:2	1688:2	12	fprintf
LEAF_NODE	1688:9	1688:9	11	(
ARGUMENT	1688:10	1688:10	11	fd
FIELD	1688:10	1688:10	12	fd
LEAF_NODE	1688:10	1688:10	13	fd
LEAF_NODE	1688:12	1688:12	11	,
ARGUMENT	1688:14	1688:14	11	"%s"
FIELD	1688:14	1688:14	12	"%s"
LEAF_NODE	1688:14	1688:14	13	"%s"
LEAF_NODE	1688:18	1688:18	11	,
ARGUMENT	1688:20	1688:20	11	TumblePreamble
FIELD	1688:20	1688:20	12	TumblePreamble
LEAF_NODE	1688:20	1688:20	13	TumblePreamble
LEAF_NODE	1688:34	1688:34	11	)
LEAF_NODE	1688:35	1688:35	9	;
SELECTION	1689:3	1690:2	6	
KEYWORD	1689:3	1689:3	7	if
LEAF_NODE	1689:3	1689:3	8	if
LEAF_NODE	1689:6	1689:6	7	(
CONDITION	1689:7	1689:7	7	PSavoiddeadzone && ( level2 || level3 )
EXPR	1689:7	1689:7	8	PSavoiddeadzone && ( level2 || level3 )
AND	1689:7	1689:26	9	PSavoiddeadzone && ( level2 || level3 )
EXPR	1689:7	1689:7	10	PSavoiddeadzone
FIELD	1689:7	1689:7	11	PSavoiddeadzone
LEAF_NODE	1689:7	1689:7	12	PSavoiddeadzone
LEAF_NODE	1689:23	1689:23	10	&&
EXPR	1689:26	1689:43	10	( level2 || level3 )
LEAF_NODE	1689:26	1689:26	11	(
OR	1689:27	1689:37	11	level2 || level3
EXPR	1689:27	1689:27	12	level2
FIELD	1689:27	1689:27	13	level2
LEAF_NODE	1689:27	1689:27	14	level2
LEAF_NODE	1689:34	1689:34	12	||
EXPR	1689:37	1689:37	12	level3
FIELD	1689:37	1689:37	13	level3
LEAF_NODE	1689:37	1689:37	14	level3
LEAF_NODE	1689:43	1689:43	11	)
LEAF_NODE	1689:44	1689:44	7	)
STATEMENTS	1690:2	1690:2	7	
EXPR_STATEMENT	1690:2	1690:42	8	fprintf ( fd , "%s" , AvoidDeadZonePreamble ) ;
EXPR	1690:2	1690:2	9	fprintf ( fd , "%s" , AvoidDeadZonePreamble )
FUNCTION_CALL	1690:2	1690:41	10	fprintf ( fd , "%s" , AvoidDeadZonePreamble )
CALLEE	1690:2	1690:2	11	fprintf
LEAF_NODE	1690:2	1690:2	12	fprintf
LEAF_NODE	1690:9	1690:9	11	(
ARGUMENT	1690:10	1690:10	11	fd
FIELD	1690:10	1690:10	12	fd
LEAF_NODE	1690:10	1690:10	13	fd
LEAF_NODE	1690:12	1690:12	11	,
ARGUMENT	1690:14	1690:14	11	"%s"
FIELD	1690:14	1690:14	12	"%s"
LEAF_NODE	1690:14	1690:14	13	"%s"
LEAF_NODE	1690:18	1690:18	11	,
ARGUMENT	1690:20	1690:20	11	AvoidDeadZonePreamble
FIELD	1690:20	1690:20	12	AvoidDeadZonePreamble
LEAF_NODE	1690:20	1690:20	13	AvoidDeadZonePreamble
LEAF_NODE	1690:41	1690:41	11	)
LEAF_NODE	1690:42	1690:42	9	;
EXPR_STATEMENT	1691:3	1691:32	6	fprintf ( fd , "%%%%EndSetup\n" ) ;
EXPR	1691:3	1691:3	7	fprintf ( fd , "%%%%EndSetup\n" )
FUNCTION_CALL	1691:3	1691:31	8	fprintf ( fd , "%%%%EndSetup\n" )
CALLEE	1691:3	1691:3	9	fprintf
LEAF_NODE	1691:3	1691:3	10	fprintf
LEAF_NODE	1691:10	1691:10	9	(
ARGUMENT	1691:11	1691:11	9	fd
FIELD	1691:11	1691:11	10	fd
LEAF_NODE	1691:11	1691:11	11	fd
LEAF_NODE	1691:13	1691:13	9	,
ARGUMENT	1691:15	1691:15	9	"%%%%EndSetup\n"
FIELD	1691:15	1691:15	10	"%%%%EndSetup\n"
LEAF_NODE	1691:15	1691:15	11	"%%%%EndSetup\n"
LEAF_NODE	1691:31	1691:31	9	)
LEAF_NODE	1691:32	1691:32	7	;
LEAF_NODE	1692:3	1692:3	5	}
LEAF_NODE	1693:0	1693:0	2	}
FUNCTION_DEF	1695:0	1702:0	1	
RETURN_TYPE	1695:0	1695:0	2	void
TYPE_NAME	1695:0	1695:0	3	void
LEAF_NODE	1695:0	1695:0	4	void
FUNCTION_NAME	1696:0	1696:0	2	PSTail
LEAF_NODE	1696:0	1696:0	3	PSTail
PARAMETER_LIST	1696:6	1696:27	2	( FILE * fd , int npages )
LEAF_NODE	1696:6	1696:6	3	(
PARAMETER_DECL	1696:7	1696:13	3	FILE * fd
TYPE	1696:7	1696:12	4	FILE *
TYPE_NAME	1696:7	1696:7	5	FILE
LEAF_NODE	1696:7	1696:7	6	FILE
POINTER	1696:12	1696:12	5	*
LEAF_NODE	1696:12	1696:12	6	*
NAME	1696:13	1696:13	4	fd
LEAF_NODE	1696:13	1696:13	5	fd
LEAF_NODE	1696:15	1696:15	3	,
PARAMETER_DECL	1696:17	1696:21	3	int npages
TYPE	1696:17	1696:17	4	int
TYPE_NAME	1696:17	1696:17	5	int
LEAF_NODE	1696:17	1696:17	6	int
NAME	1696:21	1696:21	4	npages
LEAF_NODE	1696:21	1696:21	5	npages
LEAF_NODE	1696:27	1696:27	3	)
LEAF_NODE	1697:0	1697:0	2	{
STATEMENTS	1698:1	1701:1	2	
EXPR_STATEMENT	1698:1	1698:29	3	fprintf ( fd , "%%%%Trailer\n" ) ;
EXPR	1698:1	1698:1	4	fprintf ( fd , "%%%%Trailer\n" )
FUNCTION_CALL	1698:1	1698:28	5	fprintf ( fd , "%%%%Trailer\n" )
CALLEE	1698:1	1698:1	6	fprintf
LEAF_NODE	1698:1	1698:1	7	fprintf
LEAF_NODE	1698:8	1698:8	6	(
ARGUMENT	1698:9	1698:9	6	fd
FIELD	1698:9	1698:9	7	fd
LEAF_NODE	1698:9	1698:9	8	fd
LEAF_NODE	1698:11	1698:11	6	,
ARGUMENT	1698:13	1698:13	6	"%%%%Trailer\n"
FIELD	1698:13	1698:13	7	"%%%%Trailer\n"
LEAF_NODE	1698:13	1698:13	8	"%%%%Trailer\n"
LEAF_NODE	1698:28	1698:28	6	)
LEAF_NODE	1698:29	1698:29	4	;
SELECTION	1699:8	1700:3	3	
KEYWORD	1699:8	1699:8	4	if
LEAF_NODE	1699:8	1699:8	5	if
LEAF_NODE	1699:11	1699:11	4	(
CONDITION	1699:12	1699:12	4	generateEPSF == FALSE
EXPR	1699:12	1699:28	5	generateEPSF == FALSE
FIELD	1699:12	1699:12	6	generateEPSF
LEAF_NODE	1699:12	1699:12	7	generateEPSF
EQ_OPERATOR	1699:25	1699:25	6	==
LEAF_NODE	1699:25	1699:25	7	==
FIELD	1699:28	1699:28	6	FALSE
LEAF_NODE	1699:28	1699:28	7	FALSE
LEAF_NODE	1699:33	1699:33	4	)
STATEMENTS	1700:3	1700:3	4	
EXPR_STATEMENT	1700:3	1700:41	5	fprintf ( fd , "%%%%Pages: %d\n" , npages ) ;
EXPR	1700:3	1700:3	6	fprintf ( fd , "%%%%Pages: %d\n" , npages )
FUNCTION_CALL	1700:3	1700:40	7	fprintf ( fd , "%%%%Pages: %d\n" , npages )
CALLEE	1700:3	1700:3	8	fprintf
LEAF_NODE	1700:3	1700:3	9	fprintf
LEAF_NODE	1700:10	1700:10	8	(
ARGUMENT	1700:11	1700:11	8	fd
FIELD	1700:11	1700:11	9	fd
LEAF_NODE	1700:11	1700:11	10	fd
LEAF_NODE	1700:13	1700:13	8	,
ARGUMENT	1700:15	1700:15	8	"%%%%Pages: %d\n"
FIELD	1700:15	1700:15	9	"%%%%Pages: %d\n"
LEAF_NODE	1700:15	1700:15	10	"%%%%Pages: %d\n"
LEAF_NODE	1700:32	1700:32	8	,
ARGUMENT	1700:34	1700:34	8	npages
FIELD	1700:34	1700:34	9	npages
LEAF_NODE	1700:34	1700:34	10	npages
LEAF_NODE	1700:40	1700:40	8	)
LEAF_NODE	1700:41	1700:41	6	;
EXPR_STATEMENT	1701:1	1701:25	3	fprintf ( fd , "%%%%EOF\n" ) ;
EXPR	1701:1	1701:1	4	fprintf ( fd , "%%%%EOF\n" )
FUNCTION_CALL	1701:1	1701:24	5	fprintf ( fd , "%%%%EOF\n" )
CALLEE	1701:1	1701:1	6	fprintf
LEAF_NODE	1701:1	1701:1	7	fprintf
LEAF_NODE	1701:8	1701:8	6	(
ARGUMENT	1701:9	1701:9	6	fd
FIELD	1701:9	1701:9	7	fd
LEAF_NODE	1701:9	1701:9	8	fd
LEAF_NODE	1701:11	1701:11	6	,
ARGUMENT	1701:13	1701:13	6	"%%%%EOF\n"
FIELD	1701:13	1701:13	7	"%%%%EOF\n"
LEAF_NODE	1701:13	1701:13	8	"%%%%EOF\n"
LEAF_NODE	1701:24	1701:24	6	)
LEAF_NODE	1701:25	1701:25	4	;
LEAF_NODE	1702:0	1702:0	2	}
FUNCTION_DEF	1704:0	1713:0	1	
RETURN_TYPE	1704:0	1704:7	2	static int
LEAF_NODE	1704:0	1704:0	3	static
TYPE_NAME	1704:7	1704:7	3	int
LEAF_NODE	1704:7	1704:7	4	int
FUNCTION_NAME	1705:0	1705:0	2	checkcmap
LEAF_NODE	1705:0	1705:0	3	checkcmap
PARAMETER_LIST	1705:9	1705:59	2	( TIFF * tif , int n , uint16 * r , uint16 * g , uint16 * b )
LEAF_NODE	1705:9	1705:9	3	(
PARAMETER_DECL	1705:10	1705:16	3	TIFF * tif
TYPE	1705:10	1705:14	4	TIFF *
TYPE_NAME	1705:10	1705:10	5	TIFF
LEAF_NODE	1705:10	1705:10	6	TIFF
POINTER	1705:14	1705:14	5	*
LEAF_NODE	1705:14	1705:14	6	*
NAME	1705:16	1705:16	4	tif
LEAF_NODE	1705:16	1705:16	5	tif
LEAF_NODE	1705:19	1705:19	3	,
PARAMETER_DECL	1705:21	1705:25	3	int n
TYPE	1705:21	1705:21	4	int
TYPE_NAME	1705:21	1705:21	5	int
LEAF_NODE	1705:21	1705:21	6	int
NAME	1705:25	1705:25	4	n
LEAF_NODE	1705:25	1705:25	5	n
LEAF_NODE	1705:26	1705:26	3	,
PARAMETER_DECL	1705:28	1705:36	3	uint16 * r
TYPE	1705:28	1705:34	4	uint16 *
TYPE_NAME	1705:28	1705:28	5	uint16
LEAF_NODE	1705:28	1705:28	6	uint16
POINTER	1705:34	1705:34	5	*
LEAF_NODE	1705:34	1705:34	6	*
NAME	1705:36	1705:36	4	r
LEAF_NODE	1705:36	1705:36	5	r
LEAF_NODE	1705:37	1705:37	3	,
PARAMETER_DECL	1705:39	1705:47	3	uint16 * g
TYPE	1705:39	1705:45	4	uint16 *
TYPE_NAME	1705:39	1705:39	5	uint16
LEAF_NODE	1705:39	1705:39	6	uint16
POINTER	1705:45	1705:45	5	*
LEAF_NODE	1705:45	1705:45	6	*
NAME	1705:47	1705:47	4	g
LEAF_NODE	1705:47	1705:47	5	g
LEAF_NODE	1705:48	1705:48	3	,
PARAMETER_DECL	1705:50	1705:58	3	uint16 * b
TYPE	1705:50	1705:56	4	uint16 *
TYPE_NAME	1705:50	1705:50	5	uint16
LEAF_NODE	1705:50	1705:50	6	uint16
POINTER	1705:56	1705:56	5	*
LEAF_NODE	1705:56	1705:56	6	*
NAME	1705:58	1705:58	4	b
LEAF_NODE	1705:58	1705:58	5	b
LEAF_NODE	1705:59	1705:59	3	)
LEAF_NODE	1706:0	1706:0	2	{
STATEMENTS	1707:1	1712:1	2	
EXPR_STATEMENT	1707:1	1707:11	3	( void ) tif ;
EXPR	1707:1	1707:8	4	( void ) tif
LEAF_NODE	1707:1	1707:1	5	(
TYPE_NAME	1707:2	1707:2	5	void
LEAF_NODE	1707:2	1707:2	6	void
LEAF_NODE	1707:6	1707:6	5	)
FIELD	1707:8	1707:8	5	tif
LEAF_NODE	1707:8	1707:8	6	tif
LEAF_NODE	1707:11	1707:11	4	;
ITERATION	1708:1	1709:2	3	
KEYWORD	1708:1	1708:1	4	while
LEAF_NODE	1708:1	1708:1	5	while
LEAF_NODE	1708:7	1708:7	4	(
CONDITION	1708:8	1708:8	4	n -- > 0
EXPR	1708:8	1708:14	5	n -- > 0
FIELD	1708:8	1708:9	6	n --
LEAF_NODE	1708:8	1708:8	7	n
LEAF_NODE	1708:9	1708:9	7	--
REL_OPERATOR	1708:12	1708:12	6	>
LEAF_NODE	1708:12	1708:12	7	>
FIELD	1708:14	1708:14	6	0
LEAF_NODE	1708:14	1708:14	7	0
LEAF_NODE	1708:15	1708:15	4	)
STATEMENTS	1709:2	1709:2	4	
SELECTION	1709:2	1710:3	5	
KEYWORD	1709:2	1709:2	6	if
LEAF_NODE	1709:2	1709:2	7	if
LEAF_NODE	1709:5	1709:5	6	(
CONDITION	1709:6	1709:6	6	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
EXPR	1709:6	1709:6	7	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
OR	1709:6	1709:21	8	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
EXPR	1709:6	1709:14	9	* r ++ >= 256
UNARY_EXPR	1709:6	1709:7	10	* r ++
UNARY_OPERATOR	1709:6	1709:6	11	*
LEAF_NODE	1709:6	1709:6	12	*
FIELD	1709:7	1709:8	11	r ++
LEAF_NODE	1709:7	1709:7	12	r
LEAF_NODE	1709:8	1709:8	12	++
REL_OPERATOR	1709:11	1709:11	10	>=
LEAF_NODE	1709:11	1709:11	11	>=
FIELD	1709:14	1709:14	10	256
LEAF_NODE	1709:14	1709:14	11	256
LEAF_NODE	1709:18	1709:18	9	||
EXPR	1709:21	1709:21	9	* g ++ >= 256 || * b ++ >= 256
OR	1709:21	1709:36	10	* g ++ >= 256 || * b ++ >= 256
EXPR	1709:21	1709:29	11	* g ++ >= 256
UNARY_EXPR	1709:21	1709:22	12	* g ++
UNARY_OPERATOR	1709:21	1709:21	13	*
LEAF_NODE	1709:21	1709:21	14	*
FIELD	1709:22	1709:23	13	g ++
LEAF_NODE	1709:22	1709:22	14	g
LEAF_NODE	1709:23	1709:23	14	++
REL_OPERATOR	1709:26	1709:26	12	>=
LEAF_NODE	1709:26	1709:26	13	>=
FIELD	1709:29	1709:29	12	256
LEAF_NODE	1709:29	1709:29	13	256
LEAF_NODE	1709:33	1709:33	11	||
EXPR	1709:36	1709:44	11	* b ++ >= 256
UNARY_EXPR	1709:36	1709:37	12	* b ++
UNARY_OPERATOR	1709:36	1709:36	13	*
LEAF_NODE	1709:36	1709:36	14	*
FIELD	1709:37	1709:38	13	b ++
LEAF_NODE	1709:37	1709:37	14	b
LEAF_NODE	1709:38	1709:38	14	++
REL_OPERATOR	1709:41	1709:41	12	>=
LEAF_NODE	1709:41	1709:41	13	>=
FIELD	1709:44	1709:44	12	256
LEAF_NODE	1709:44	1709:44	13	256
LEAF_NODE	1709:47	1709:47	6	)
STATEMENTS	1710:3	1710:3	6	
JUMP_STATEMENT	1710:3	1710:14	7	return ( 16 ) ;
KEYWORD	1710:3	1710:3	8	return
LEAF_NODE	1710:3	1710:3	9	return
DESTINATION	1710:10	1710:10	8	( 16 )
EXPR	1710:10	1710:13	9	( 16 )
LEAF_NODE	1710:10	1710:10	10	(
FIELD	1710:11	1710:11	10	16
LEAF_NODE	1710:11	1710:11	11	16
LEAF_NODE	1710:13	1710:13	10	)
LEAF_NODE	1710:14	1710:14	8	;
EXPR_STATEMENT	1711:1	1711:49	3	TIFFWarning ( filename , "Assuming 8-bit colormap" ) ;
EXPR	1711:1	1711:1	4	TIFFWarning ( filename , "Assuming 8-bit colormap" )
FUNCTION_CALL	1711:1	1711:48	5	TIFFWarning ( filename , "Assuming 8-bit colormap" )
CALLEE	1711:1	1711:1	6	TIFFWarning
LEAF_NODE	1711:1	1711:1	7	TIFFWarning
LEAF_NODE	1711:12	1711:12	6	(
ARGUMENT	1711:13	1711:13	6	filename
FIELD	1711:13	1711:13	7	filename
LEAF_NODE	1711:13	1711:13	8	filename
LEAF_NODE	1711:21	1711:21	6	,
ARGUMENT	1711:23	1711:23	6	"Assuming 8-bit colormap"
FIELD	1711:23	1711:23	7	"Assuming 8-bit colormap"
LEAF_NODE	1711:23	1711:23	8	"Assuming 8-bit colormap"
LEAF_NODE	1711:48	1711:48	6	)
LEAF_NODE	1711:49	1711:49	4	;
JUMP_STATEMENT	1712:1	1712:11	3	return ( 8 ) ;
KEYWORD	1712:1	1712:1	4	return
LEAF_NODE	1712:1	1712:1	5	return
DESTINATION	1712:8	1712:8	4	( 8 )
EXPR	1712:8	1712:10	5	( 8 )
LEAF_NODE	1712:8	1712:8	6	(
FIELD	1712:9	1712:9	6	8
LEAF_NODE	1712:9	1712:9	7	8
LEAF_NODE	1712:10	1712:10	6	)
LEAF_NODE	1712:11	1712:11	4	;
LEAF_NODE	1713:0	1713:0	2	}
FUNCTION_DEF	1715:0	1793:0	1	
RETURN_TYPE	1715:0	1715:7	2	static void
LEAF_NODE	1715:0	1715:0	3	static
TYPE_NAME	1715:7	1715:7	3	void
LEAF_NODE	1715:7	1715:7	4	void
FUNCTION_NAME	1716:0	1716:0	2	PS_Lvl2colorspace
LEAF_NODE	1716:0	1716:0	3	PS_Lvl2colorspace
PARAMETER_LIST	1716:17	1716:37	2	( FILE * fd , TIFF * tif )
LEAF_NODE	1716:17	1716:17	3	(
PARAMETER_DECL	1716:18	1716:24	3	FILE * fd
TYPE	1716:18	1716:22	4	FILE *
TYPE_NAME	1716:18	1716:18	5	FILE
LEAF_NODE	1716:18	1716:18	6	FILE
POINTER	1716:22	1716:22	5	*
LEAF_NODE	1716:22	1716:22	6	*
NAME	1716:24	1716:24	4	fd
LEAF_NODE	1716:24	1716:24	5	fd
LEAF_NODE	1716:26	1716:26	3	,
PARAMETER_DECL	1716:28	1716:34	3	TIFF * tif
TYPE	1716:28	1716:32	4	TIFF *
TYPE_NAME	1716:28	1716:28	5	TIFF
LEAF_NODE	1716:28	1716:28	6	TIFF
POINTER	1716:32	1716:32	5	*
LEAF_NODE	1716:32	1716:32	6	*
NAME	1716:34	1716:34	4	tif
LEAF_NODE	1716:34	1716:34	5	tif
LEAF_NODE	1716:37	1716:37	3	)
LEAF_NODE	1717:0	1717:0	2	{
STATEMENTS	1718:1	1792:1	2	
SIMPLE_DECL	1718:1	1718:27	3	uint16 * rmap , uint16 * gmap , uint16 * bmap ;
INIT_DECL_LIST	1718:1	1718:1	4	uint16 * rmap , uint16 * gmap , uint16 * bmap
VAR_DECL	1718:1	1718:9	5	uint16 * rmap
TYPE	1718:1	1718:8	6	uint16 *
TYPE_NAME	1718:1	1718:1	7	uint16
LEAF_NODE	1718:1	1718:1	8	uint16
POINTER	1718:8	1718:8	7	*
LEAF_NODE	1718:8	1718:8	8	*
NAME	1718:9	1718:9	6	rmap
LEAF_NODE	1718:9	1718:9	7	rmap
LEAF_NODE	1718:13	1718:13	5	,
INIT_DECL_LIST	1718:1	1718:1	5	uint16 * gmap , uint16 * bmap
VAR_DECL	1718:1	1718:16	6	uint16 * gmap
TYPE	1718:1	1718:15	7	uint16 *
TYPE_NAME	1718:1	1718:1	8	uint16
LEAF_NODE	1718:1	1718:1	9	uint16
POINTER	1718:15	1718:15	8	*
LEAF_NODE	1718:15	1718:15	9	*
NAME	1718:16	1718:16	7	gmap
LEAF_NODE	1718:16	1718:16	8	gmap
LEAF_NODE	1718:20	1718:20	6	,
VAR_DECL	1718:1	1718:23	6	uint16 * bmap
TYPE	1718:1	1718:22	7	uint16 *
TYPE_NAME	1718:1	1718:1	8	uint16
LEAF_NODE	1718:1	1718:1	9	uint16
POINTER	1718:22	1718:22	8	*
LEAF_NODE	1718:22	1718:22	9	*
NAME	1718:23	1718:23	7	bmap
LEAF_NODE	1718:23	1718:23	8	bmap
LEAF_NODE	1718:27	1718:27	4	;
SIMPLE_DECL	1719:1	1719:18	3	int i , int num_colors ;
INIT_DECL_LIST	1719:1	1719:1	4	int i , int num_colors
VAR_DECL	1719:1	1719:5	5	int i
TYPE	1719:1	1719:1	6	int
TYPE_NAME	1719:1	1719:1	7	int
LEAF_NODE	1719:1	1719:1	8	int
NAME	1719:5	1719:5	6	i
LEAF_NODE	1719:5	1719:5	7	i
LEAF_NODE	1719:6	1719:6	5	,
VAR_DECL	1719:1	1719:8	5	int num_colors
TYPE	1719:1	1719:1	6	int
TYPE_NAME	1719:1	1719:1	7	int
LEAF_NODE	1719:1	1719:1	8	int
NAME	1719:8	1719:8	6	num_colors
LEAF_NODE	1719:8	1719:8	7	num_colors
LEAF_NODE	1719:18	1719:18	4	;
SIMPLE_DECL	1720:1	1720:26	3	const char * colorspace_p ;
VAR_DECL	1720:1	1720:14	4	const char * colorspace_p
TYPE	1720:1	1720:12	5	const char *
TYPE_NAME	1720:1	1720:7	6	const char
LEAF_NODE	1720:1	1720:1	7	const
LEAF_NODE	1720:7	1720:7	7	char
POINTER	1720:12	1720:12	6	*
LEAF_NODE	1720:12	1720:12	7	*
NAME	1720:14	1720:14	5	colorspace_p
LEAF_NODE	1720:14	1720:14	6	colorspace_p
LEAF_NODE	1720:26	1720:26	4	;
SELECTION	1722:1	1723:1	3	
KEYWORD	1722:1	1722:1	4	switch
LEAF_NODE	1722:1	1722:1	5	switch
LEAF_NODE	1722:8	1722:8	4	(
CONDITION	1722:10	1722:10	4	photometric
EXPR	1722:10	1722:10	5	photometric
FIELD	1722:10	1722:10	6	photometric
LEAF_NODE	1722:10	1722:10	7	photometric
LEAF_NODE	1722:22	1722:22	4	)
STATEMENTS	1723:1	1734:1	4	
LEAF_NODE	1723:1	1723:1	5	{
STATEMENTS	1724:1	1733:2	5	
LABEL	1724:1	1724:27	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	1724:1	1724:1	7	case
LEAF_NODE	1724:6	1724:6	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	1724:27	1724:27	7	:
EXPR_STATEMENT	1725:2	1725:23	6	colorspace_p = "CMYK" ;
EXPR	1725:2	1725:2	7	colorspace_p = "CMYK"
ASSIGN	1725:2	1725:17	8	colorspace_p = "CMYK"
LVAL	1725:2	1725:2	9	colorspace_p
FIELD	1725:2	1725:2	10	colorspace_p
LEAF_NODE	1725:2	1725:2	11	colorspace_p
ASSIGN_OP	1725:15	1725:15	9	=
LEAF_NODE	1725:15	1725:15	10	=
RVAL	1725:17	1725:17	9	"CMYK"
FIELD	1725:17	1725:17	10	"CMYK"
LEAF_NODE	1725:17	1725:17	11	"CMYK"
LEAF_NODE	1725:23	1725:23	7	;
JUMP_STATEMENT	1726:2	1726:7	6	break DESTINATION ;
KEYWORD	1726:2	1726:2	7	break
LEAF_NODE	1726:2	1726:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1726:7	1726:7	7	;
LABEL	1728:1	1728:21	6	case PHOTOMETRIC_RGB :
LEAF_NODE	1728:1	1728:1	7	case
LEAF_NODE	1728:6	1728:6	7	PHOTOMETRIC_RGB
LEAF_NODE	1728:21	1728:21	7	:
EXPR_STATEMENT	1729:2	1729:22	6	colorspace_p = "RGB" ;
EXPR	1729:2	1729:2	7	colorspace_p = "RGB"
ASSIGN	1729:2	1729:17	8	colorspace_p = "RGB"
LVAL	1729:2	1729:2	9	colorspace_p
FIELD	1729:2	1729:2	10	colorspace_p
LEAF_NODE	1729:2	1729:2	11	colorspace_p
ASSIGN_OP	1729:15	1729:15	9	=
LEAF_NODE	1729:15	1729:15	10	=
RVAL	1729:17	1729:17	9	"RGB"
FIELD	1729:17	1729:17	10	"RGB"
LEAF_NODE	1729:17	1729:17	11	"RGB"
LEAF_NODE	1729:22	1729:22	7	;
JUMP_STATEMENT	1730:2	1730:7	6	break DESTINATION ;
KEYWORD	1730:2	1730:2	7	break
LEAF_NODE	1730:2	1730:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1730:7	1730:7	7	;
LABEL	1732:1	1732:8	6	default :
LEAF_NODE	1732:1	1732:1	7	default
LEAF_NODE	1732:8	1732:8	7	:
EXPR_STATEMENT	1733:2	1733:23	6	colorspace_p = "Gray" ;
EXPR	1733:2	1733:2	7	colorspace_p = "Gray"
ASSIGN	1733:2	1733:17	8	colorspace_p = "Gray"
LVAL	1733:2	1733:2	9	colorspace_p
FIELD	1733:2	1733:2	10	colorspace_p
LEAF_NODE	1733:2	1733:2	11	colorspace_p
ASSIGN_OP	1733:15	1733:15	9	=
LEAF_NODE	1733:15	1733:15	10	=
RVAL	1733:17	1733:17	9	"Gray"
FIELD	1733:17	1733:17	10	"Gray"
LEAF_NODE	1733:17	1733:17	11	"Gray"
LEAF_NODE	1733:23	1733:23	7	;
LEAF_NODE	1734:1	1734:1	5	}
EXPR_STATEMENT	1740:1	1740:42	3	fputs ( "% PostScript Level 2 only.\n" , fd ) ;
EXPR	1740:1	1740:1	4	fputs ( "% PostScript Level 2 only.\n" , fd )
FUNCTION_CALL	1740:1	1740:41	5	fputs ( "% PostScript Level 2 only.\n" , fd )
CALLEE	1740:1	1740:1	6	fputs
LEAF_NODE	1740:1	1740:1	7	fputs
LEAF_NODE	1740:6	1740:6	6	(
ARGUMENT	1740:7	1740:7	6	"% PostScript Level 2 only.\n"
FIELD	1740:7	1740:7	7	"% PostScript Level 2 only.\n"
LEAF_NODE	1740:7	1740:7	8	"% PostScript Level 2 only.\n"
LEAF_NODE	1740:37	1740:37	6	,
ARGUMENT	1740:39	1740:39	6	fd
FIELD	1740:39	1740:39	7	fd
LEAF_NODE	1740:39	1740:39	8	fd
LEAF_NODE	1740:41	1740:41	6	)
LEAF_NODE	1740:42	1740:42	4	;
SELECTION	1741:1	1741:41	3	
KEYWORD	1741:1	1741:1	4	if
LEAF_NODE	1741:1	1741:1	5	if
LEAF_NODE	1741:4	1741:4	4	(
CONDITION	1741:5	1741:5	4	photometric != PHOTOMETRIC_PALETTE
EXPR	1741:5	1741:20	5	photometric != PHOTOMETRIC_PALETTE
FIELD	1741:5	1741:5	6	photometric
LEAF_NODE	1741:5	1741:5	7	photometric
EQ_OPERATOR	1741:17	1741:17	6	!=
LEAF_NODE	1741:17	1741:17	7	!=
FIELD	1741:20	1741:20	6	PHOTOMETRIC_PALETTE
LEAF_NODE	1741:20	1741:20	7	PHOTOMETRIC_PALETTE
LEAF_NODE	1741:39	1741:39	4	)
STATEMENTS	1741:41	1747:1	4	
LEAF_NODE	1741:41	1741:41	5	{
STATEMENTS	1742:2	1746:2	5	
SELECTION	1742:2	1742:40	6	
KEYWORD	1742:2	1742:2	7	if
LEAF_NODE	1742:2	1742:2	8	if
LEAF_NODE	1742:5	1742:5	7	(
CONDITION	1742:6	1742:6	7	photometric == PHOTOMETRIC_YCBCR
EXPR	1742:6	1742:21	8	photometric == PHOTOMETRIC_YCBCR
FIELD	1742:6	1742:6	9	photometric
LEAF_NODE	1742:6	1742:6	10	photometric
EQ_OPERATOR	1742:18	1742:18	9	==
LEAF_NODE	1742:18	1742:18	10	==
FIELD	1742:21	1742:21	9	PHOTOMETRIC_YCBCR
LEAF_NODE	1742:21	1742:21	10	PHOTOMETRIC_YCBCR
LEAF_NODE	1742:38	1742:38	7	)
STATEMENTS	1742:40	1744:2	7	
LEAF_NODE	1742:40	1742:40	8	{
LEAF_NODE	0:0	0:0	8	STATEMENTS
LEAF_NODE	1744:2	1744:2	8	}
EXPR_STATEMENT	1745:2	1745:57	6	fprintf ( fd , "/Device%s setcolorspace\n" , colorspace_p ) ;
EXPR	1745:2	1745:2	7	fprintf ( fd , "/Device%s setcolorspace\n" , colorspace_p )
FUNCTION_CALL	1745:2	1745:56	8	fprintf ( fd , "/Device%s setcolorspace\n" , colorspace_p )
CALLEE	1745:2	1745:2	9	fprintf
LEAF_NODE	1745:2	1745:2	10	fprintf
LEAF_NODE	1745:9	1745:9	9	(
ARGUMENT	1745:10	1745:10	9	fd
FIELD	1745:10	1745:10	10	fd
LEAF_NODE	1745:10	1745:10	11	fd
LEAF_NODE	1745:12	1745:12	9	,
ARGUMENT	1745:14	1745:14	9	"/Device%s setcolorspace\n"
FIELD	1745:14	1745:14	10	"/Device%s setcolorspace\n"
LEAF_NODE	1745:14	1745:14	11	"/Device%s setcolorspace\n"
LEAF_NODE	1745:41	1745:41	9	,
ARGUMENT	1745:43	1745:43	9	colorspace_p
FIELD	1745:43	1745:43	10	colorspace_p
LEAF_NODE	1745:43	1745:43	11	colorspace_p
LEAF_NODE	1745:56	1745:56	9	)
LEAF_NODE	1745:57	1745:57	7	;
JUMP_STATEMENT	1746:2	1746:8	6	return DESTINATION ;
KEYWORD	1746:2	1746:2	7	return
LEAF_NODE	1746:2	1746:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1746:8	1746:8	7	;
LEAF_NODE	1747:1	1747:1	5	}
EXPR_STATEMENT	1752:1	1752:34	3	num_colors = ( 1 << bitspersample ) ;
EXPR	1752:1	1752:1	4	num_colors = ( 1 << bitspersample )
ASSIGN	1752:1	1752:14	5	num_colors = ( 1 << bitspersample )
LVAL	1752:1	1752:1	6	num_colors
FIELD	1752:1	1752:1	7	num_colors
LEAF_NODE	1752:1	1752:1	8	num_colors
ASSIGN_OP	1752:12	1752:12	6	=
LEAF_NODE	1752:12	1752:12	7	=
RVAL	1752:14	1752:33	6	( 1 << bitspersample )
LEAF_NODE	1752:14	1752:14	7	(
FIELD	1752:15	1752:15	7	1
LEAF_NODE	1752:15	1752:15	8	1
LEAF_NODE	1752:17	1752:17	7	<<
FIELD	1752:20	1752:20	7	bitspersample
LEAF_NODE	1752:20	1752:20	8	bitspersample
LEAF_NODE	1752:33	1752:33	7	)
LEAF_NODE	1752:34	1752:34	4	;
SELECTION	1753:1	1753:64	3	
KEYWORD	1753:1	1753:1	4	if
LEAF_NODE	1753:1	1753:1	5	if
LEAF_NODE	1753:4	1753:4	4	(
CONDITION	1753:5	1753:5	4	! TIFFGetField ( tif , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
EXPR	1753:5	1753:5	5	! TIFFGetField ( tif , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
UNARY_EXPR	1753:5	1753:6	6	! TIFFGetField ( tif , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
UNARY_OPERATOR	1753:5	1753:5	7	!
LEAF_NODE	1753:5	1753:5	8	!
FUNCTION_CALL	1753:6	1753:61	7	TIFFGetField ( tif , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
CALLEE	1753:6	1753:6	8	TIFFGetField
LEAF_NODE	1753:6	1753:6	9	TIFFGetField
LEAF_NODE	1753:18	1753:18	8	(
ARGUMENT	1753:19	1753:19	8	tif
FIELD	1753:19	1753:19	9	tif
LEAF_NODE	1753:19	1753:19	10	tif
LEAF_NODE	1753:22	1753:22	8	,
ARGUMENT	1753:24	1753:24	8	TIFFTAG_COLORMAP
FIELD	1753:24	1753:24	9	TIFFTAG_COLORMAP
LEAF_NODE	1753:24	1753:24	10	TIFFTAG_COLORMAP
LEAF_NODE	1753:40	1753:40	8	,
ARGUMENT	1753:42	1753:42	8	& rmap
UNARY_EXPR	1753:42	1753:43	9	& rmap
UNARY_OPERATOR	1753:42	1753:42	10	&
LEAF_NODE	1753:42	1753:42	11	&
FIELD	1753:43	1753:43	10	rmap
LEAF_NODE	1753:43	1753:43	11	rmap
LEAF_NODE	1753:47	1753:47	8	,
ARGUMENT	1753:49	1753:49	8	& gmap
UNARY_EXPR	1753:49	1753:50	9	& gmap
UNARY_OPERATOR	1753:49	1753:49	10	&
LEAF_NODE	1753:49	1753:49	11	&
FIELD	1753:50	1753:50	10	gmap
LEAF_NODE	1753:50	1753:50	11	gmap
LEAF_NODE	1753:54	1753:54	8	,
ARGUMENT	1753:56	1753:56	8	& bmap
UNARY_EXPR	1753:56	1753:57	9	& bmap
UNARY_OPERATOR	1753:56	1753:56	10	&
LEAF_NODE	1753:56	1753:56	11	&
FIELD	1753:57	1753:57	10	bmap
LEAF_NODE	1753:57	1753:57	11	bmap
LEAF_NODE	1753:61	1753:61	8	)
LEAF_NODE	1753:62	1753:62	4	)
STATEMENTS	1753:64	1757:1	4	
LEAF_NODE	1753:64	1753:64	5	{
STATEMENTS	1754:2	1756:2	5	
EXPR_STATEMENT	1754:2	1755:40	6	TIFFError ( filename , "Palette image w/o \"Colormap\" tag" ) ;
EXPR	1754:2	1754:2	7	TIFFError ( filename , "Palette image w/o \"Colormap\" tag" )
FUNCTION_CALL	1754:2	1755:39	8	TIFFError ( filename , "Palette image w/o \"Colormap\" tag" )
CALLEE	1754:2	1754:2	9	TIFFError
LEAF_NODE	1754:2	1754:2	10	TIFFError
LEAF_NODE	1754:11	1754:11	9	(
ARGUMENT	1754:12	1754:12	9	filename
FIELD	1754:12	1754:12	10	filename
LEAF_NODE	1754:12	1754:12	11	filename
LEAF_NODE	1754:20	1754:20	9	,
ARGUMENT	1755:3	1755:3	9	"Palette image w/o \"Colormap\" tag"
FIELD	1755:3	1755:3	10	"Palette image w/o \"Colormap\" tag"
LEAF_NODE	1755:3	1755:3	11	"Palette image w/o \"Colormap\" tag"
LEAF_NODE	1755:39	1755:39	9	)
LEAF_NODE	1755:40	1755:40	7	;
JUMP_STATEMENT	1756:2	1756:8	6	return DESTINATION ;
KEYWORD	1756:2	1756:2	7	return
LEAF_NODE	1756:2	1756:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1756:8	1756:8	7	;
LEAF_NODE	1757:1	1757:1	5	}
SELECTION	1758:1	1758:57	3	
KEYWORD	1758:1	1758:1	4	if
LEAF_NODE	1758:1	1758:1	5	if
LEAF_NODE	1758:4	1758:4	4	(
CONDITION	1758:5	1758:5	4	checkcmap ( tif , num_colors , rmap , gmap , bmap ) == 16
EXPR	1758:5	1758:53	5	checkcmap ( tif , num_colors , rmap , gmap , bmap ) == 16
FUNCTION_CALL	1758:5	1758:48	6	checkcmap ( tif , num_colors , rmap , gmap , bmap )
CALLEE	1758:5	1758:5	7	checkcmap
LEAF_NODE	1758:5	1758:5	8	checkcmap
LEAF_NODE	1758:14	1758:14	7	(
ARGUMENT	1758:15	1758:15	7	tif
FIELD	1758:15	1758:15	8	tif
LEAF_NODE	1758:15	1758:15	9	tif
LEAF_NODE	1758:18	1758:18	7	,
ARGUMENT	1758:20	1758:20	7	num_colors
FIELD	1758:20	1758:20	8	num_colors
LEAF_NODE	1758:20	1758:20	9	num_colors
LEAF_NODE	1758:30	1758:30	7	,
ARGUMENT	1758:32	1758:32	7	rmap
FIELD	1758:32	1758:32	8	rmap
LEAF_NODE	1758:32	1758:32	9	rmap
LEAF_NODE	1758:36	1758:36	7	,
ARGUMENT	1758:38	1758:38	7	gmap
FIELD	1758:38	1758:38	8	gmap
LEAF_NODE	1758:38	1758:38	9	gmap
LEAF_NODE	1758:42	1758:42	7	,
ARGUMENT	1758:44	1758:44	7	bmap
FIELD	1758:44	1758:44	8	bmap
LEAF_NODE	1758:44	1758:44	9	bmap
LEAF_NODE	1758:48	1758:48	7	)
EQ_OPERATOR	1758:50	1758:50	6	==
LEAF_NODE	1758:50	1758:50	7	==
FIELD	1758:53	1758:53	6	16
LEAF_NODE	1758:53	1758:53	7	16
LEAF_NODE	1758:55	1758:55	4	)
STATEMENTS	1758:57	1769:1	4	
LEAF_NODE	1758:57	1758:57	5	{
STATEMENTS	1763:2	1763:2	5	
ITERATION	1763:2	1763:35	6	
KEYWORD	1763:2	1763:2	7	for
LEAF_NODE	1763:2	1763:2	8	for
LEAF_NODE	1763:6	1763:6	7	(
FOR_INIT	1763:7	1763:12	7	i = 0 ;
EXPR	1763:7	1763:7	8	i = 0
ASSIGN	1763:7	1763:11	9	i = 0
LVAL	1763:7	1763:7	10	i
FIELD	1763:7	1763:7	11	i
LEAF_NODE	1763:7	1763:7	12	i
ASSIGN_OP	1763:9	1763:9	10	=
LEAF_NODE	1763:9	1763:9	11	=
RVAL	1763:11	1763:11	10	0
FIELD	1763:11	1763:11	11	0
LEAF_NODE	1763:11	1763:11	12	0
LEAF_NODE	1763:12	1763:12	8	;
CONDITION	1763:14	1763:14	7	i < num_colors
EXPR	1763:14	1763:18	8	i < num_colors
FIELD	1763:14	1763:14	9	i
LEAF_NODE	1763:14	1763:14	10	i
REL_OPERATOR	1763:16	1763:16	9	<
LEAF_NODE	1763:16	1763:16	10	<
FIELD	1763:18	1763:18	9	num_colors
LEAF_NODE	1763:18	1763:18	10	num_colors
LEAF_NODE	1763:28	1763:28	7	;
FOR_EXPR	1763:30	1763:30	7	i ++
EXPR	1763:30	1763:30	8	i ++
FIELD	1763:30	1763:31	9	i ++
LEAF_NODE	1763:30	1763:30	10	i
LEAF_NODE	1763:31	1763:31	10	++
LEAF_NODE	1763:33	1763:33	7	)
STATEMENTS	1763:35	1767:2	7	
LEAF_NODE	1763:35	1763:35	8	{
STATEMENTS	1764:3	1766:3	8	
EXPR_STATEMENT	1764:3	1764:25	9	rmap [ i ] = CVT ( rmap [ i ] ) ;
EXPR	1764:3	1764:3	10	rmap [ i ] = CVT ( rmap [ i ] )
ASSIGN	1764:3	1764:13	11	rmap [ i ] = CVT ( rmap [ i ] )
LVAL	1764:3	1764:3	12	rmap [ i ]
FIELD	1764:3	1764:9	13	rmap [ i ]
LEAF_NODE	1764:3	1764:3	14	rmap
LEAF_NODE	1764:7	1764:7	14	[
EXPR	1764:8	1764:8	14	i
FIELD	1764:8	1764:8	15	i
LEAF_NODE	1764:8	1764:8	16	i
LEAF_NODE	1764:9	1764:9	14	]
ASSIGN_OP	1764:11	1764:11	12	=
LEAF_NODE	1764:11	1764:11	13	=
RVAL	1764:13	1764:13	12	CVT ( rmap [ i ] )
FUNCTION_CALL	1764:13	1764:24	13	CVT ( rmap [ i ] )
CALLEE	1764:13	1764:13	14	CVT
LEAF_NODE	1764:13	1764:13	15	CVT
LEAF_NODE	1764:16	1764:16	14	(
ARGUMENT	1764:17	1764:17	14	rmap [ i ]
FIELD	1764:17	1764:23	15	rmap [ i ]
LEAF_NODE	1764:17	1764:17	16	rmap
LEAF_NODE	1764:21	1764:21	16	[
EXPR	1764:22	1764:22	16	i
FIELD	1764:22	1764:22	17	i
LEAF_NODE	1764:22	1764:22	18	i
LEAF_NODE	1764:23	1764:23	16	]
LEAF_NODE	1764:24	1764:24	14	)
LEAF_NODE	1764:25	1764:25	10	;
EXPR_STATEMENT	1765:3	1765:25	9	gmap [ i ] = CVT ( gmap [ i ] ) ;
EXPR	1765:3	1765:3	10	gmap [ i ] = CVT ( gmap [ i ] )
ASSIGN	1765:3	1765:13	11	gmap [ i ] = CVT ( gmap [ i ] )
LVAL	1765:3	1765:3	12	gmap [ i ]
FIELD	1765:3	1765:9	13	gmap [ i ]
LEAF_NODE	1765:3	1765:3	14	gmap
LEAF_NODE	1765:7	1765:7	14	[
EXPR	1765:8	1765:8	14	i
FIELD	1765:8	1765:8	15	i
LEAF_NODE	1765:8	1765:8	16	i
LEAF_NODE	1765:9	1765:9	14	]
ASSIGN_OP	1765:11	1765:11	12	=
LEAF_NODE	1765:11	1765:11	13	=
RVAL	1765:13	1765:13	12	CVT ( gmap [ i ] )
FUNCTION_CALL	1765:13	1765:24	13	CVT ( gmap [ i ] )
CALLEE	1765:13	1765:13	14	CVT
LEAF_NODE	1765:13	1765:13	15	CVT
LEAF_NODE	1765:16	1765:16	14	(
ARGUMENT	1765:17	1765:17	14	gmap [ i ]
FIELD	1765:17	1765:23	15	gmap [ i ]
LEAF_NODE	1765:17	1765:17	16	gmap
LEAF_NODE	1765:21	1765:21	16	[
EXPR	1765:22	1765:22	16	i
FIELD	1765:22	1765:22	17	i
LEAF_NODE	1765:22	1765:22	18	i
LEAF_NODE	1765:23	1765:23	16	]
LEAF_NODE	1765:24	1765:24	14	)
LEAF_NODE	1765:25	1765:25	10	;
EXPR_STATEMENT	1766:3	1766:25	9	bmap [ i ] = CVT ( bmap [ i ] ) ;
EXPR	1766:3	1766:3	10	bmap [ i ] = CVT ( bmap [ i ] )
ASSIGN	1766:3	1766:13	11	bmap [ i ] = CVT ( bmap [ i ] )
LVAL	1766:3	1766:3	12	bmap [ i ]
FIELD	1766:3	1766:9	13	bmap [ i ]
LEAF_NODE	1766:3	1766:3	14	bmap
LEAF_NODE	1766:7	1766:7	14	[
EXPR	1766:8	1766:8	14	i
FIELD	1766:8	1766:8	15	i
LEAF_NODE	1766:8	1766:8	16	i
LEAF_NODE	1766:9	1766:9	14	]
ASSIGN_OP	1766:11	1766:11	12	=
LEAF_NODE	1766:11	1766:11	13	=
RVAL	1766:13	1766:13	12	CVT ( bmap [ i ] )
FUNCTION_CALL	1766:13	1766:24	13	CVT ( bmap [ i ] )
CALLEE	1766:13	1766:13	14	CVT
LEAF_NODE	1766:13	1766:13	15	CVT
LEAF_NODE	1766:16	1766:16	14	(
ARGUMENT	1766:17	1766:17	14	bmap [ i ]
FIELD	1766:17	1766:23	15	bmap [ i ]
LEAF_NODE	1766:17	1766:17	16	bmap
LEAF_NODE	1766:21	1766:21	16	[
EXPR	1766:22	1766:22	16	i
FIELD	1766:22	1766:22	17	i
LEAF_NODE	1766:22	1766:22	18	i
LEAF_NODE	1766:23	1766:23	16	]
LEAF_NODE	1766:24	1766:24	14	)
LEAF_NODE	1766:25	1766:25	10	;
LEAF_NODE	1767:2	1767:2	8	}
LEAF_NODE	1769:1	1769:1	5	}
EXPR_STATEMENT	1770:1	1770:56	3	fprintf ( fd , "[ /Indexed /DeviceRGB %d" , num_colors - 1 ) ;
EXPR	1770:1	1770:1	4	fprintf ( fd , "[ /Indexed /DeviceRGB %d" , num_colors - 1 )
FUNCTION_CALL	1770:1	1770:55	5	fprintf ( fd , "[ /Indexed /DeviceRGB %d" , num_colors - 1 )
CALLEE	1770:1	1770:1	6	fprintf
LEAF_NODE	1770:1	1770:1	7	fprintf
LEAF_NODE	1770:8	1770:8	6	(
ARGUMENT	1770:9	1770:9	6	fd
FIELD	1770:9	1770:9	7	fd
LEAF_NODE	1770:9	1770:9	8	fd
LEAF_NODE	1770:11	1770:11	6	,
ARGUMENT	1770:13	1770:13	6	"[ /Indexed /DeviceRGB %d"
FIELD	1770:13	1770:13	7	"[ /Indexed /DeviceRGB %d"
LEAF_NODE	1770:13	1770:13	8	"[ /Indexed /DeviceRGB %d"
LEAF_NODE	1770:39	1770:39	6	,
ARGUMENT	1770:41	1770:54	6	num_colors - 1
FIELD	1770:41	1770:41	7	num_colors
LEAF_NODE	1770:41	1770:41	8	num_colors
LEAF_NODE	1770:52	1770:52	7	-
FIELD	1770:54	1770:54	7	1
LEAF_NODE	1770:54	1770:54	8	1
LEAF_NODE	1770:55	1770:55	6	)
LEAF_NODE	1770:56	1770:56	4	;
SELECTION	1771:1	1771:14	3	
KEYWORD	1771:1	1771:1	4	if
LEAF_NODE	1771:1	1771:1	5	if
LEAF_NODE	1771:4	1771:4	4	(
CONDITION	1771:5	1771:5	4	ascii85
EXPR	1771:5	1771:5	5	ascii85
FIELD	1771:5	1771:5	6	ascii85
LEAF_NODE	1771:5	1771:5	7	ascii85
LEAF_NODE	1771:12	1771:12	4	)
STATEMENTS	1771:14	1775:1	4	
LEAF_NODE	1771:14	1771:14	5	{
STATEMENTS	1772:2	1774:2	5	
EXPR_STATEMENT	1772:2	1772:15	6	Ascii85Init ( ) ;
EXPR	1772:2	1772:2	7	Ascii85Init ( )
FUNCTION_CALL	1772:2	1772:14	8	Ascii85Init ( )
CALLEE	1772:2	1772:2	9	Ascii85Init
LEAF_NODE	1772:2	1772:2	10	Ascii85Init
LEAF_NODE	1772:13	1772:13	9	(
LEAF_NODE	1772:14	1772:14	9	)
LEAF_NODE	1772:15	1772:15	7	;
EXPR_STATEMENT	1773:2	1773:19	6	fputs ( "\n<~" , fd ) ;
EXPR	1773:2	1773:2	7	fputs ( "\n<~" , fd )
FUNCTION_CALL	1773:2	1773:18	8	fputs ( "\n<~" , fd )
CALLEE	1773:2	1773:2	9	fputs
LEAF_NODE	1773:2	1773:2	10	fputs
LEAF_NODE	1773:7	1773:7	9	(
ARGUMENT	1773:8	1773:8	9	"\n<~"
FIELD	1773:8	1773:8	10	"\n<~"
LEAF_NODE	1773:8	1773:8	11	"\n<~"
LEAF_NODE	1773:14	1773:14	9	,
ARGUMENT	1773:16	1773:16	9	fd
FIELD	1773:16	1773:16	10	fd
LEAF_NODE	1773:16	1773:16	11	fd
LEAF_NODE	1773:18	1773:18	9	)
LEAF_NODE	1773:19	1773:19	7	;
EXPR_STATEMENT	1774:2	1774:22	6	ascii85breaklen -= 2 ;
EXPR	1774:2	1774:2	7	ascii85breaklen -= 2
ASSIGN	1774:2	1774:21	8	ascii85breaklen -= 2
LVAL	1774:2	1774:2	9	ascii85breaklen
FIELD	1774:2	1774:2	10	ascii85breaklen
LEAF_NODE	1774:2	1774:2	11	ascii85breaklen
ASSIGN_OP	1774:18	1774:18	9	-=
LEAF_NODE	1774:18	1774:18	10	-=
RVAL	1774:21	1774:21	9	2
FIELD	1774:21	1774:21	10	2
LEAF_NODE	1774:21	1774:21	11	2
LEAF_NODE	1774:22	1774:22	7	;
LEAF_NODE	1775:1	1775:1	5	}
SELECTION	1775:3	1776:2	3	
KEYWORD	1775:3	1775:3	4	else
LEAF_NODE	1775:3	1775:3	5	else
STATEMENTS	1776:2	1776:2	4	
EXPR_STATEMENT	1776:2	1776:17	5	fputs ( " <" , fd ) ;
EXPR	1776:2	1776:2	6	fputs ( " <" , fd )
FUNCTION_CALL	1776:2	1776:16	7	fputs ( " <" , fd )
CALLEE	1776:2	1776:2	8	fputs
LEAF_NODE	1776:2	1776:2	9	fputs
LEAF_NODE	1776:7	1776:7	8	(
ARGUMENT	1776:8	1776:8	8	" <"
FIELD	1776:8	1776:8	9	" <"
LEAF_NODE	1776:8	1776:8	10	" <"
LEAF_NODE	1776:12	1776:12	8	,
ARGUMENT	1776:14	1776:14	8	fd
FIELD	1776:14	1776:14	9	fd
LEAF_NODE	1776:14	1776:14	10	fd
LEAF_NODE	1776:16	1776:16	8	)
LEAF_NODE	1776:17	1776:17	6	;
ITERATION	1777:1	1777:34	3	
KEYWORD	1777:1	1777:1	4	for
LEAF_NODE	1777:1	1777:1	5	for
LEAF_NODE	1777:5	1777:5	4	(
FOR_INIT	1777:6	1777:11	4	i = 0 ;
EXPR	1777:6	1777:6	5	i = 0
ASSIGN	1777:6	1777:10	6	i = 0
LVAL	1777:6	1777:6	7	i
FIELD	1777:6	1777:6	8	i
LEAF_NODE	1777:6	1777:6	9	i
ASSIGN_OP	1777:8	1777:8	7	=
LEAF_NODE	1777:8	1777:8	8	=
RVAL	1777:10	1777:10	7	0
FIELD	1777:10	1777:10	8	0
LEAF_NODE	1777:10	1777:10	9	0
LEAF_NODE	1777:11	1777:11	5	;
CONDITION	1777:13	1777:13	4	i < num_colors
EXPR	1777:13	1777:17	5	i < num_colors
FIELD	1777:13	1777:13	6	i
LEAF_NODE	1777:13	1777:13	7	i
REL_OPERATOR	1777:15	1777:15	6	<
LEAF_NODE	1777:15	1777:15	7	<
FIELD	1777:17	1777:17	6	num_colors
LEAF_NODE	1777:17	1777:17	7	num_colors
LEAF_NODE	1777:27	1777:27	4	;
FOR_EXPR	1777:29	1777:29	4	i ++
EXPR	1777:29	1777:29	5	i ++
FIELD	1777:29	1777:30	6	i ++
LEAF_NODE	1777:29	1777:29	7	i
LEAF_NODE	1777:30	1777:30	7	++
LEAF_NODE	1777:32	1777:32	4	)
STATEMENTS	1777:34	1787:1	4	
LEAF_NODE	1777:34	1777:34	5	{
STATEMENTS	1778:2	1782:4	5	
SELECTION	1778:2	1778:15	6	
KEYWORD	1778:2	1778:2	7	if
LEAF_NODE	1778:2	1778:2	8	if
LEAF_NODE	1778:5	1778:5	7	(
CONDITION	1778:6	1778:6	7	ascii85
EXPR	1778:6	1778:6	8	ascii85
FIELD	1778:6	1778:6	9	ascii85
LEAF_NODE	1778:6	1778:6	10	ascii85
LEAF_NODE	1778:13	1778:13	7	)
STATEMENTS	1778:15	1782:2	7	
LEAF_NODE	1778:15	1778:15	8	{
STATEMENTS	1779:3	1781:3	8	
EXPR_STATEMENT	1779:3	1779:41	9	Ascii85Put ( ( unsigned char ) rmap [ i ] , fd ) ;
EXPR	1779:3	1779:3	10	Ascii85Put ( ( unsigned char ) rmap [ i ] , fd )
FUNCTION_CALL	1779:3	1779:40	11	Ascii85Put ( ( unsigned char ) rmap [ i ] , fd )
CALLEE	1779:3	1779:3	12	Ascii85Put
LEAF_NODE	1779:3	1779:3	13	Ascii85Put
LEAF_NODE	1779:13	1779:13	12	(
ARGUMENT	1779:14	1779:29	12	( unsigned char ) rmap [ i ]
LEAF_NODE	1779:14	1779:14	13	(
TYPE_NAME	1779:15	1779:24	13	unsigned char
LEAF_NODE	1779:15	1779:15	14	unsigned
LEAF_NODE	1779:24	1779:24	14	char
LEAF_NODE	1779:28	1779:28	13	)
FIELD	1779:29	1779:35	13	rmap [ i ]
LEAF_NODE	1779:29	1779:29	14	rmap
LEAF_NODE	1779:33	1779:33	14	[
EXPR	1779:34	1779:34	14	i
FIELD	1779:34	1779:34	15	i
LEAF_NODE	1779:34	1779:34	16	i
LEAF_NODE	1779:35	1779:35	14	]
LEAF_NODE	1779:36	1779:36	12	,
ARGUMENT	1779:38	1779:38	12	fd
FIELD	1779:38	1779:38	13	fd
LEAF_NODE	1779:38	1779:38	14	fd
LEAF_NODE	1779:40	1779:40	12	)
LEAF_NODE	1779:41	1779:41	10	;
EXPR_STATEMENT	1780:3	1780:41	9	Ascii85Put ( ( unsigned char ) gmap [ i ] , fd ) ;
EXPR	1780:3	1780:3	10	Ascii85Put ( ( unsigned char ) gmap [ i ] , fd )
FUNCTION_CALL	1780:3	1780:40	11	Ascii85Put ( ( unsigned char ) gmap [ i ] , fd )
CALLEE	1780:3	1780:3	12	Ascii85Put
LEAF_NODE	1780:3	1780:3	13	Ascii85Put
LEAF_NODE	1780:13	1780:13	12	(
ARGUMENT	1780:14	1780:29	12	( unsigned char ) gmap [ i ]
LEAF_NODE	1780:14	1780:14	13	(
TYPE_NAME	1780:15	1780:24	13	unsigned char
LEAF_NODE	1780:15	1780:15	14	unsigned
LEAF_NODE	1780:24	1780:24	14	char
LEAF_NODE	1780:28	1780:28	13	)
FIELD	1780:29	1780:35	13	gmap [ i ]
LEAF_NODE	1780:29	1780:29	14	gmap
LEAF_NODE	1780:33	1780:33	14	[
EXPR	1780:34	1780:34	14	i
FIELD	1780:34	1780:34	15	i
LEAF_NODE	1780:34	1780:34	16	i
LEAF_NODE	1780:35	1780:35	14	]
LEAF_NODE	1780:36	1780:36	12	,
ARGUMENT	1780:38	1780:38	12	fd
FIELD	1780:38	1780:38	13	fd
LEAF_NODE	1780:38	1780:38	14	fd
LEAF_NODE	1780:40	1780:40	12	)
LEAF_NODE	1780:41	1780:41	10	;
EXPR_STATEMENT	1781:3	1781:41	9	Ascii85Put ( ( unsigned char ) bmap [ i ] , fd ) ;
EXPR	1781:3	1781:3	10	Ascii85Put ( ( unsigned char ) bmap [ i ] , fd )
FUNCTION_CALL	1781:3	1781:40	11	Ascii85Put ( ( unsigned char ) bmap [ i ] , fd )
CALLEE	1781:3	1781:3	12	Ascii85Put
LEAF_NODE	1781:3	1781:3	13	Ascii85Put
LEAF_NODE	1781:13	1781:13	12	(
ARGUMENT	1781:14	1781:29	12	( unsigned char ) bmap [ i ]
LEAF_NODE	1781:14	1781:14	13	(
TYPE_NAME	1781:15	1781:24	13	unsigned char
LEAF_NODE	1781:15	1781:15	14	unsigned
LEAF_NODE	1781:24	1781:24	14	char
LEAF_NODE	1781:28	1781:28	13	)
FIELD	1781:29	1781:35	13	bmap [ i ]
LEAF_NODE	1781:29	1781:29	14	bmap
LEAF_NODE	1781:33	1781:33	14	[
EXPR	1781:34	1781:34	14	i
FIELD	1781:34	1781:34	15	i
LEAF_NODE	1781:34	1781:34	16	i
LEAF_NODE	1781:35	1781:35	14	]
LEAF_NODE	1781:36	1781:36	12	,
ARGUMENT	1781:38	1781:38	12	fd
FIELD	1781:38	1781:38	13	fd
LEAF_NODE	1781:38	1781:38	14	fd
LEAF_NODE	1781:40	1781:40	12	)
LEAF_NODE	1781:41	1781:41	10	;
LEAF_NODE	1782:2	1782:2	8	}
SELECTION	1782:4	1782:9	6	
KEYWORD	1782:4	1782:4	7	else
LEAF_NODE	1782:4	1782:4	8	else
STATEMENTS	1782:9	1786:2	7	
LEAF_NODE	1782:9	1782:9	8	{
STATEMENTS	1783:3	1784:3	8	
EXPR_STATEMENT	1783:3	1783:36	9	fputs ( ( i % 8 ) ? " " : "\n  " , fd ) ;
EXPR	1783:3	1783:3	10	fputs ( ( i % 8 ) ? " " : "\n  " , fd )
FUNCTION_CALL	1783:3	1783:35	11	fputs ( ( i % 8 ) ? " " : "\n  " , fd )
CALLEE	1783:3	1783:3	12	fputs
LEAF_NODE	1783:3	1783:3	13	fputs
LEAF_NODE	1783:8	1783:8	12	(
ARGUMENT	1783:9	1783:9	12	( i % 8 ) ? " " : "\n  "
COND_EXPR	1783:9	1783:25	13	( i % 8 ) ? " " : "\n  "
CONDITION	1783:9	1783:15	14	( i % 8 )
LEAF_NODE	1783:9	1783:9	15	(
FIELD	1783:10	1783:10	15	i
LEAF_NODE	1783:10	1783:10	16	i
LEAF_NODE	1783:12	1783:12	15	%
FIELD	1783:14	1783:14	15	8
LEAF_NODE	1783:14	1783:14	16	8
LEAF_NODE	1783:15	1783:15	15	)
LEAF_NODE	1783:17	1783:17	14	?
EXPR	1783:19	1783:19	14	" "
FIELD	1783:19	1783:19	15	" "
LEAF_NODE	1783:19	1783:19	16	" "
LEAF_NODE	1783:23	1783:23	14	:
FIELD	1783:25	1783:25	14	"\n  "
LEAF_NODE	1783:25	1783:25	15	"\n  "
LEAF_NODE	1783:31	1783:31	12	,
ARGUMENT	1783:33	1783:33	12	fd
FIELD	1783:33	1783:33	13	fd
LEAF_NODE	1783:33	1783:33	14	fd
LEAF_NODE	1783:35	1783:35	12	)
LEAF_NODE	1783:36	1783:36	10	;
EXPR_STATEMENT	1784:3	1785:33	9	fprintf ( fd , "%02x%02x%02x" , rmap [ i ] , gmap [ i ] , bmap [ i ] ) ;
EXPR	1784:3	1784:3	10	fprintf ( fd , "%02x%02x%02x" , rmap [ i ] , gmap [ i ] , bmap [ i ] )
FUNCTION_CALL	1784:3	1785:32	11	fprintf ( fd , "%02x%02x%02x" , rmap [ i ] , gmap [ i ] , bmap [ i ] )
CALLEE	1784:3	1784:3	12	fprintf
LEAF_NODE	1784:3	1784:3	13	fprintf
LEAF_NODE	1784:10	1784:10	12	(
ARGUMENT	1784:11	1784:11	12	fd
FIELD	1784:11	1784:11	13	fd
LEAF_NODE	1784:11	1784:11	14	fd
LEAF_NODE	1784:13	1784:13	12	,
ARGUMENT	1784:15	1784:15	12	"%02x%02x%02x"
FIELD	1784:15	1784:15	13	"%02x%02x%02x"
LEAF_NODE	1784:15	1784:15	14	"%02x%02x%02x"
LEAF_NODE	1784:29	1784:29	12	,
ARGUMENT	1785:7	1785:7	12	rmap [ i ]
FIELD	1785:7	1785:13	13	rmap [ i ]
LEAF_NODE	1785:7	1785:7	14	rmap
LEAF_NODE	1785:11	1785:11	14	[
EXPR	1785:12	1785:12	14	i
FIELD	1785:12	1785:12	15	i
LEAF_NODE	1785:12	1785:12	16	i
LEAF_NODE	1785:13	1785:13	14	]
LEAF_NODE	1785:14	1785:14	12	,
ARGUMENT	1785:16	1785:16	12	gmap [ i ]
FIELD	1785:16	1785:22	13	gmap [ i ]
LEAF_NODE	1785:16	1785:16	14	gmap
LEAF_NODE	1785:20	1785:20	14	[
EXPR	1785:21	1785:21	14	i
FIELD	1785:21	1785:21	15	i
LEAF_NODE	1785:21	1785:21	16	i
LEAF_NODE	1785:22	1785:22	14	]
LEAF_NODE	1785:23	1785:23	12	,
ARGUMENT	1785:25	1785:25	12	bmap [ i ]
FIELD	1785:25	1785:31	13	bmap [ i ]
LEAF_NODE	1785:25	1785:25	14	bmap
LEAF_NODE	1785:29	1785:29	14	[
EXPR	1785:30	1785:30	14	i
FIELD	1785:30	1785:30	15	i
LEAF_NODE	1785:30	1785:30	16	i
LEAF_NODE	1785:31	1785:31	14	]
LEAF_NODE	1785:32	1785:32	12	)
LEAF_NODE	1785:33	1785:33	10	;
LEAF_NODE	1786:2	1786:2	8	}
LEAF_NODE	1787:1	1787:1	5	}
SELECTION	1788:1	1789:2	3	
KEYWORD	1788:1	1788:1	4	if
LEAF_NODE	1788:1	1788:1	5	if
LEAF_NODE	1788:4	1788:4	4	(
CONDITION	1788:5	1788:5	4	ascii85
EXPR	1788:5	1788:5	5	ascii85
FIELD	1788:5	1788:5	6	ascii85
LEAF_NODE	1788:5	1788:5	7	ascii85
LEAF_NODE	1788:12	1788:12	4	)
STATEMENTS	1789:2	1789:2	4	
EXPR_STATEMENT	1789:2	1789:18	5	Ascii85Flush ( fd ) ;
EXPR	1789:2	1789:2	6	Ascii85Flush ( fd )
FUNCTION_CALL	1789:2	1789:17	7	Ascii85Flush ( fd )
CALLEE	1789:2	1789:2	8	Ascii85Flush
LEAF_NODE	1789:2	1789:2	9	Ascii85Flush
LEAF_NODE	1789:14	1789:14	8	(
ARGUMENT	1789:15	1789:15	8	fd
FIELD	1789:15	1789:15	9	fd
LEAF_NODE	1789:15	1789:15	10	fd
LEAF_NODE	1789:17	1789:17	8	)
LEAF_NODE	1789:18	1789:18	6	;
SELECTION	1790:1	1791:2	3	
KEYWORD	1790:1	1790:1	4	else
LEAF_NODE	1790:1	1790:1	5	else
STATEMENTS	1791:2	1791:2	4	
EXPR_STATEMENT	1791:2	1791:18	5	fputs ( ">\n" , fd ) ;
EXPR	1791:2	1791:2	6	fputs ( ">\n" , fd )
FUNCTION_CALL	1791:2	1791:17	7	fputs ( ">\n" , fd )
CALLEE	1791:2	1791:2	8	fputs
LEAF_NODE	1791:2	1791:2	9	fputs
LEAF_NODE	1791:7	1791:7	8	(
ARGUMENT	1791:8	1791:8	8	">\n"
FIELD	1791:8	1791:8	9	">\n"
LEAF_NODE	1791:8	1791:8	10	">\n"
LEAF_NODE	1791:13	1791:13	8	,
ARGUMENT	1791:15	1791:15	8	fd
FIELD	1791:15	1791:15	9	fd
LEAF_NODE	1791:15	1791:15	10	fd
LEAF_NODE	1791:17	1791:17	8	)
LEAF_NODE	1791:18	1791:18	6	;
EXPR_STATEMENT	1792:1	1792:31	3	fputs ( "] setcolorspace\n" , fd ) ;
EXPR	1792:1	1792:1	4	fputs ( "] setcolorspace\n" , fd )
FUNCTION_CALL	1792:1	1792:30	5	fputs ( "] setcolorspace\n" , fd )
CALLEE	1792:1	1792:1	6	fputs
LEAF_NODE	1792:1	1792:1	7	fputs
LEAF_NODE	1792:6	1792:6	6	(
ARGUMENT	1792:7	1792:7	6	"] setcolorspace\n"
FIELD	1792:7	1792:7	7	"] setcolorspace\n"
LEAF_NODE	1792:7	1792:7	8	"] setcolorspace\n"
LEAF_NODE	1792:26	1792:26	6	,
ARGUMENT	1792:28	1792:28	6	fd
FIELD	1792:28	1792:28	7	fd
LEAF_NODE	1792:28	1792:28	8	fd
LEAF_NODE	1792:30	1792:30	6	)
LEAF_NODE	1792:31	1792:31	4	;
LEAF_NODE	1793:0	1793:0	2	}
FUNCTION_DEF	1795:0	2122:0	1	
RETURN_TYPE	1795:0	1795:7	2	static int
LEAF_NODE	1795:0	1795:0	3	static
TYPE_NAME	1795:7	1795:7	3	int
LEAF_NODE	1795:7	1795:7	4	int
FUNCTION_NAME	1796:0	1796:0	2	PS_Lvl2ImageDict
LEAF_NODE	1796:0	1796:0	3	PS_Lvl2ImageDict
PARAMETER_LIST	1796:16	1796:56	2	( FILE * fd , TIFF * tif , uint32 w , uint32 h )
LEAF_NODE	1796:16	1796:16	3	(
PARAMETER_DECL	1796:17	1796:23	3	FILE * fd
TYPE	1796:17	1796:21	4	FILE *
TYPE_NAME	1796:17	1796:17	5	FILE
LEAF_NODE	1796:17	1796:17	6	FILE
POINTER	1796:21	1796:21	5	*
LEAF_NODE	1796:21	1796:21	6	*
NAME	1796:23	1796:23	4	fd
LEAF_NODE	1796:23	1796:23	5	fd
LEAF_NODE	1796:25	1796:25	3	,
PARAMETER_DECL	1796:27	1796:33	3	TIFF * tif
TYPE	1796:27	1796:31	4	TIFF *
TYPE_NAME	1796:27	1796:27	5	TIFF
LEAF_NODE	1796:27	1796:27	6	TIFF
POINTER	1796:31	1796:31	5	*
LEAF_NODE	1796:31	1796:31	6	*
NAME	1796:33	1796:33	4	tif
LEAF_NODE	1796:33	1796:33	5	tif
LEAF_NODE	1796:36	1796:36	3	,
PARAMETER_DECL	1796:38	1796:45	3	uint32 w
TYPE	1796:38	1796:38	4	uint32
TYPE_NAME	1796:38	1796:38	5	uint32
LEAF_NODE	1796:38	1796:38	6	uint32
NAME	1796:45	1796:45	4	w
LEAF_NODE	1796:45	1796:45	5	w
LEAF_NODE	1796:46	1796:46	3	,
PARAMETER_DECL	1796:48	1796:55	3	uint32 h
TYPE	1796:48	1796:48	4	uint32
TYPE_NAME	1796:48	1796:48	5	uint32
LEAF_NODE	1796:48	1796:48	6	uint32
NAME	1796:55	1796:55	4	h
LEAF_NODE	1796:55	1796:55	5	h
LEAF_NODE	1796:56	1796:56	3	)
LEAF_NODE	1797:0	1797:0	2	{
STATEMENTS	1798:1	2121:20	2	
SIMPLE_DECL	1798:1	1798:16	3	int use_rawdata ;
VAR_DECL	1798:1	1798:5	4	int use_rawdata
TYPE	1798:1	1798:1	5	int
TYPE_NAME	1798:1	1798:1	6	int
LEAF_NODE	1798:1	1798:1	7	int
NAME	1798:5	1798:5	5	use_rawdata
LEAF_NODE	1798:5	1798:5	6	use_rawdata
LEAF_NODE	1798:16	1798:16	4	;
SIMPLE_DECL	1799:1	1799:31	3	uint32 tile_width , uint32 tile_height ;
INIT_DECL_LIST	1799:1	1799:1	4	uint32 tile_width , uint32 tile_height
VAR_DECL	1799:1	1799:8	5	uint32 tile_width
TYPE	1799:1	1799:1	6	uint32
TYPE_NAME	1799:1	1799:1	7	uint32
LEAF_NODE	1799:1	1799:1	8	uint32
NAME	1799:8	1799:8	6	tile_width
LEAF_NODE	1799:8	1799:8	7	tile_width
LEAF_NODE	1799:18	1799:18	5	,
VAR_DECL	1799:1	1799:20	5	uint32 tile_height
TYPE	1799:1	1799:1	6	uint32
TYPE_NAME	1799:1	1799:1	7	uint32
LEAF_NODE	1799:1	1799:1	8	uint32
NAME	1799:20	1799:20	6	tile_height
LEAF_NODE	1799:20	1799:20	7	tile_height
LEAF_NODE	1799:31	1799:31	4	;
SIMPLE_DECL	1800:1	1800:49	3	uint16 predictor , uint16 minsamplevalue , uint16 maxsamplevalue ;
INIT_DECL_LIST	1800:1	1800:1	4	uint16 predictor , uint16 minsamplevalue , uint16 maxsamplevalue
VAR_DECL	1800:1	1800:8	5	uint16 predictor
TYPE	1800:1	1800:1	6	uint16
TYPE_NAME	1800:1	1800:1	7	uint16
LEAF_NODE	1800:1	1800:1	8	uint16
NAME	1800:8	1800:8	6	predictor
LEAF_NODE	1800:8	1800:8	7	predictor
LEAF_NODE	1800:17	1800:17	5	,
INIT_DECL_LIST	1800:1	1800:1	5	uint16 minsamplevalue , uint16 maxsamplevalue
VAR_DECL	1800:1	1800:19	6	uint16 minsamplevalue
TYPE	1800:1	1800:1	7	uint16
TYPE_NAME	1800:1	1800:1	8	uint16
LEAF_NODE	1800:1	1800:1	9	uint16
NAME	1800:19	1800:19	7	minsamplevalue
LEAF_NODE	1800:19	1800:19	8	minsamplevalue
LEAF_NODE	1800:33	1800:33	6	,
VAR_DECL	1800:1	1800:35	6	uint16 maxsamplevalue
TYPE	1800:1	1800:1	7	uint16
TYPE_NAME	1800:1	1800:1	8	uint16
LEAF_NODE	1800:1	1800:1	9	uint16
NAME	1800:35	1800:35	7	maxsamplevalue
LEAF_NODE	1800:35	1800:35	8	maxsamplevalue
LEAF_NODE	1800:49	1800:49	4	;
SIMPLE_DECL	1801:1	1801:20	3	uint32 repeat_count ;
VAR_DECL	1801:1	1801:8	4	uint32 repeat_count
TYPE	1801:1	1801:1	5	uint32
TYPE_NAME	1801:1	1801:1	6	uint32
LEAF_NODE	1801:1	1801:1	7	uint32
NAME	1801:8	1801:8	5	repeat_count
LEAF_NODE	1801:8	1801:8	6	repeat_count
LEAF_NODE	1801:20	1801:20	4	;
SIMPLE_DECL	1802:1	1802:34	3	char [ 64 ] im_h , char [ 64 ] im_x , char [ 64 ] im_y ;
INIT_DECL_LIST	1802:1	1802:1	4	char [ 64 ] im_h , char [ 64 ] im_x , char [ 64 ] im_y
VAR_DECL	1802:1	1802:6	5	char [ 64 ] im_h
TYPE	1802:1	1802:10	6	char [ 64 ]
TYPE_NAME	1802:1	1802:1	7	char
LEAF_NODE	1802:1	1802:1	8	char
TYPE_SUFFIX	1802:10	1802:13	7	[ 64 ]
LEAF_NODE	1802:10	1802:10	8	[
FIELD	1802:11	1802:11	8	64
LEAF_NODE	1802:11	1802:11	9	64
LEAF_NODE	1802:13	1802:13	8	]
NAME	1802:6	1802:6	6	im_h
LEAF_NODE	1802:6	1802:6	7	im_h
LEAF_NODE	1802:14	1802:14	5	,
INIT_DECL_LIST	1802:1	1802:1	5	char [ 64 ] im_x , char [ 64 ] im_y
VAR_DECL	1802:1	1802:16	6	char [ 64 ] im_x
TYPE	1802:1	1802:20	7	char [ 64 ]
TYPE_NAME	1802:1	1802:1	8	char
LEAF_NODE	1802:1	1802:1	9	char
TYPE_SUFFIX	1802:20	1802:23	8	[ 64 ]
LEAF_NODE	1802:20	1802:20	9	[
FIELD	1802:21	1802:21	9	64
LEAF_NODE	1802:21	1802:21	10	64
LEAF_NODE	1802:23	1802:23	9	]
NAME	1802:16	1802:16	7	im_x
LEAF_NODE	1802:16	1802:16	8	im_x
LEAF_NODE	1802:24	1802:24	6	,
VAR_DECL	1802:1	1802:26	6	char [ 64 ] im_y
TYPE	1802:1	1802:30	7	char [ 64 ]
TYPE_NAME	1802:1	1802:1	8	char
LEAF_NODE	1802:1	1802:1	9	char
TYPE_SUFFIX	1802:30	1802:33	8	[ 64 ]
LEAF_NODE	1802:30	1802:30	9	[
FIELD	1802:31	1802:31	9	64
LEAF_NODE	1802:31	1802:31	10	64
LEAF_NODE	1802:33	1802:33	9	]
NAME	1802:26	1802:26	7	im_y
LEAF_NODE	1802:26	1802:26	8	im_y
LEAF_NODE	1802:34	1802:34	4	;
SIMPLE_DECL	1803:1	1803:25	3	char * imageOp ; imageOp = "image" ;
VAR_DECL	1803:1	1803:8	4	char * imageOp ; imageOp = "image"
TYPE	1803:1	1803:6	5	char *
TYPE_NAME	1803:1	1803:1	6	char
LEAF_NODE	1803:1	1803:1	7	char
POINTER	1803:6	1803:6	6	*
LEAF_NODE	1803:6	1803:6	7	*
NAME	1803:8	1803:8	5	imageOp
LEAF_NODE	1803:8	1803:8	6	imageOp
LEAF_NODE	0:0	0:0	5	;
INIT	1803:8	1803:8	5	imageOp = "image"
ASSIGN	1803:8	1803:18	6	imageOp = "image"
LVAL	1803:8	1803:8	7	imageOp
NAME	1803:8	1803:8	8	imageOp
LEAF_NODE	1803:8	1803:8	9	imageOp
ASSIGN_OP	1803:16	1803:16	7	=
LEAF_NODE	1803:16	1803:16	8	=
RVAL	1803:18	1803:18	7	"image"
FIELD	1803:18	1803:18	8	"image"
LEAF_NODE	1803:18	1803:18	9	"image"
LEAF_NODE	1803:25	1803:25	4	;
SELECTION	1805:1	1806:2	3	
KEYWORD	1805:1	1805:1	4	if
LEAF_NODE	1805:1	1805:1	5	if
LEAF_NODE	1805:4	1805:4	4	(
CONDITION	1805:6	1805:6	4	useImagemask && ( bitspersample == 1 )
EXPR	1805:6	1805:6	5	useImagemask && ( bitspersample == 1 )
AND	1805:6	1805:22	6	useImagemask && ( bitspersample == 1 )
EXPR	1805:6	1805:6	7	useImagemask
FIELD	1805:6	1805:6	8	useImagemask
LEAF_NODE	1805:6	1805:6	9	useImagemask
LEAF_NODE	1805:19	1805:19	7	&&
EXPR	1805:22	1805:41	7	( bitspersample == 1 )
LEAF_NODE	1805:22	1805:22	8	(
FIELD	1805:23	1805:23	8	bitspersample
LEAF_NODE	1805:23	1805:23	9	bitspersample
EQ_OPERATOR	1805:37	1805:37	8	==
LEAF_NODE	1805:37	1805:37	9	==
FIELD	1805:40	1805:40	8	1
LEAF_NODE	1805:40	1805:40	9	1
LEAF_NODE	1805:41	1805:41	8	)
LEAF_NODE	1805:43	1805:43	4	)
STATEMENTS	1806:2	1806:2	4	
EXPR_STATEMENT	1806:2	1806:23	5	imageOp = "imagemask" ;
EXPR	1806:2	1806:2	6	imageOp = "imagemask"
ASSIGN	1806:2	1806:12	7	imageOp = "imagemask"
LVAL	1806:2	1806:2	8	imageOp
FIELD	1806:2	1806:2	9	imageOp
LEAF_NODE	1806:2	1806:2	10	imageOp
ASSIGN_OP	1806:10	1806:10	8	=
LEAF_NODE	1806:10	1806:10	9	=
RVAL	1806:12	1806:12	8	"imagemask"
FIELD	1806:12	1806:12	9	"imagemask"
LEAF_NODE	1806:12	1806:12	10	"imagemask"
LEAF_NODE	1806:23	1806:23	6	;
EXPR_STATEMENT	1808:1	1808:24	3	( void ) strcpy ( im_x , "0" ) ;
EXPR	1808:1	1808:7	4	( void ) strcpy ( im_x , "0" )
LEAF_NODE	1808:1	1808:1	5	(
TYPE_NAME	1808:2	1808:2	5	void
LEAF_NODE	1808:2	1808:2	6	void
LEAF_NODE	1808:6	1808:6	5	)
FUNCTION_CALL	1808:7	1808:23	5	strcpy ( im_x , "0" )
CALLEE	1808:7	1808:7	6	strcpy
LEAF_NODE	1808:7	1808:7	7	strcpy
LEAF_NODE	1808:13	1808:13	6	(
ARGUMENT	1808:14	1808:14	6	im_x
FIELD	1808:14	1808:14	7	im_x
LEAF_NODE	1808:14	1808:14	8	im_x
LEAF_NODE	1808:18	1808:18	6	,
ARGUMENT	1808:20	1808:20	6	"0"
FIELD	1808:20	1808:20	7	"0"
LEAF_NODE	1808:20	1808:20	8	"0"
LEAF_NODE	1808:23	1808:23	6	)
LEAF_NODE	1808:24	1808:24	4	;
EXPR_STATEMENT	1809:1	1809:52	3	( void ) snprintf ( im_y , sizeof ( im_y ) , "%lu" , ( long ) h ) ;
EXPR	1809:1	1809:7	4	( void ) snprintf ( im_y , sizeof ( im_y ) , "%lu" , ( long ) h )
LEAF_NODE	1809:1	1809:1	5	(
TYPE_NAME	1809:2	1809:2	5	void
LEAF_NODE	1809:2	1809:2	6	void
LEAF_NODE	1809:6	1809:6	5	)
FUNCTION_CALL	1809:7	1809:51	5	snprintf ( im_y , sizeof ( im_y ) , "%lu" , ( long ) h )
CALLEE	1809:7	1809:7	6	snprintf
LEAF_NODE	1809:7	1809:7	7	snprintf
LEAF_NODE	1809:15	1809:15	6	(
ARGUMENT	1809:16	1809:16	6	im_y
FIELD	1809:16	1809:16	7	im_y
LEAF_NODE	1809:16	1809:16	8	im_y
LEAF_NODE	1809:20	1809:20	6	,
ARGUMENT	1809:22	1809:22	6	sizeof ( im_y )
FUNCTION_CALL	1809:22	1809:33	7	sizeof ( im_y )
CALLEE	1809:22	1809:22	8	sizeof
LEAF_NODE	1809:22	1809:22	9	sizeof
LEAF_NODE	1809:28	1809:28	8	(
ARGUMENT	1809:29	1809:29	8	im_y
FIELD	1809:29	1809:29	9	im_y
LEAF_NODE	1809:29	1809:29	10	im_y
LEAF_NODE	1809:33	1809:33	8	)
LEAF_NODE	1809:34	1809:34	6	,
ARGUMENT	1809:36	1809:36	6	"%lu"
FIELD	1809:36	1809:36	7	"%lu"
LEAF_NODE	1809:36	1809:36	8	"%lu"
LEAF_NODE	1809:41	1809:41	6	,
ARGUMENT	1809:43	1809:50	6	( long ) h
LEAF_NODE	1809:43	1809:43	7	(
TYPE_NAME	1809:44	1809:44	7	long
LEAF_NODE	1809:44	1809:44	8	long
LEAF_NODE	1809:48	1809:48	7	)
FIELD	1809:50	1809:50	7	h
LEAF_NODE	1809:50	1809:50	8	h
LEAF_NODE	1809:51	1809:51	6	)
LEAF_NODE	1809:52	1809:52	4	;
EXPR_STATEMENT	1810:1	1810:52	3	( void ) snprintf ( im_h , sizeof ( im_h ) , "%lu" , ( long ) h ) ;
EXPR	1810:1	1810:7	4	( void ) snprintf ( im_h , sizeof ( im_h ) , "%lu" , ( long ) h )
LEAF_NODE	1810:1	1810:1	5	(
TYPE_NAME	1810:2	1810:2	5	void
LEAF_NODE	1810:2	1810:2	6	void
LEAF_NODE	1810:6	1810:6	5	)
FUNCTION_CALL	1810:7	1810:51	5	snprintf ( im_h , sizeof ( im_h ) , "%lu" , ( long ) h )
CALLEE	1810:7	1810:7	6	snprintf
LEAF_NODE	1810:7	1810:7	7	snprintf
LEAF_NODE	1810:15	1810:15	6	(
ARGUMENT	1810:16	1810:16	6	im_h
FIELD	1810:16	1810:16	7	im_h
LEAF_NODE	1810:16	1810:16	8	im_h
LEAF_NODE	1810:20	1810:20	6	,
ARGUMENT	1810:22	1810:22	6	sizeof ( im_h )
FUNCTION_CALL	1810:22	1810:33	7	sizeof ( im_h )
CALLEE	1810:22	1810:22	8	sizeof
LEAF_NODE	1810:22	1810:22	9	sizeof
LEAF_NODE	1810:28	1810:28	8	(
ARGUMENT	1810:29	1810:29	8	im_h
FIELD	1810:29	1810:29	9	im_h
LEAF_NODE	1810:29	1810:29	10	im_h
LEAF_NODE	1810:33	1810:33	8	)
LEAF_NODE	1810:34	1810:34	6	,
ARGUMENT	1810:36	1810:36	6	"%lu"
FIELD	1810:36	1810:36	7	"%lu"
LEAF_NODE	1810:36	1810:36	8	"%lu"
LEAF_NODE	1810:41	1810:41	6	,
ARGUMENT	1810:43	1810:50	6	( long ) h
LEAF_NODE	1810:43	1810:43	7	(
TYPE_NAME	1810:44	1810:44	7	long
LEAF_NODE	1810:44	1810:44	8	long
LEAF_NODE	1810:48	1810:48	7	)
FIELD	1810:50	1810:50	7	h
LEAF_NODE	1810:50	1810:50	8	h
LEAF_NODE	1810:51	1810:51	6	)
LEAF_NODE	1810:52	1810:52	4	;
EXPR_STATEMENT	1811:1	1811:15	3	tile_width = w ;
EXPR	1811:1	1811:1	4	tile_width = w
ASSIGN	1811:1	1811:14	5	tile_width = w
LVAL	1811:1	1811:1	6	tile_width
FIELD	1811:1	1811:1	7	tile_width
LEAF_NODE	1811:1	1811:1	8	tile_width
ASSIGN_OP	1811:12	1811:12	6	=
LEAF_NODE	1811:12	1811:12	7	=
RVAL	1811:14	1811:14	6	w
FIELD	1811:14	1811:14	7	w
LEAF_NODE	1811:14	1811:14	8	w
LEAF_NODE	1811:15	1811:15	4	;
EXPR_STATEMENT	1812:1	1812:16	3	tile_height = h ;
EXPR	1812:1	1812:1	4	tile_height = h
ASSIGN	1812:1	1812:15	5	tile_height = h
LVAL	1812:1	1812:1	6	tile_height
FIELD	1812:1	1812:1	7	tile_height
LEAF_NODE	1812:1	1812:1	8	tile_height
ASSIGN_OP	1812:13	1812:13	6	=
LEAF_NODE	1812:13	1812:13	7	=
RVAL	1812:15	1812:15	6	h
FIELD	1812:15	1812:15	7	h
LEAF_NODE	1812:15	1812:15	8	h
LEAF_NODE	1812:16	1812:16	4	;
SELECTION	1813:1	1813:23	3	
KEYWORD	1813:1	1813:1	4	if
LEAF_NODE	1813:1	1813:1	5	if
LEAF_NODE	1813:4	1813:4	4	(
CONDITION	1813:5	1813:5	4	TIFFIsTiled ( tif )
EXPR	1813:5	1813:5	5	TIFFIsTiled ( tif )
FUNCTION_CALL	1813:5	1813:20	6	TIFFIsTiled ( tif )
CALLEE	1813:5	1813:5	7	TIFFIsTiled
LEAF_NODE	1813:5	1813:5	8	TIFFIsTiled
LEAF_NODE	1813:16	1813:16	7	(
ARGUMENT	1813:17	1813:17	7	tif
FIELD	1813:17	1813:17	8	tif
LEAF_NODE	1813:17	1813:17	9	tif
LEAF_NODE	1813:20	1813:20	7	)
LEAF_NODE	1813:21	1813:21	4	)
STATEMENTS	1813:23	1833:1	4	
LEAF_NODE	1813:23	1813:23	5	{
STATEMENTS	1814:2	1829:2	5	
EXPR_STATEMENT	1814:2	1814:39	6	repeat_count = TIFFNumberOfTiles ( tif ) ;
EXPR	1814:2	1814:2	7	repeat_count = TIFFNumberOfTiles ( tif )
ASSIGN	1814:2	1814:17	8	repeat_count = TIFFNumberOfTiles ( tif )
LVAL	1814:2	1814:2	9	repeat_count
FIELD	1814:2	1814:2	10	repeat_count
LEAF_NODE	1814:2	1814:2	11	repeat_count
ASSIGN_OP	1814:15	1814:15	9	=
LEAF_NODE	1814:15	1814:15	10	=
RVAL	1814:17	1814:17	9	TIFFNumberOfTiles ( tif )
FUNCTION_CALL	1814:17	1814:38	10	TIFFNumberOfTiles ( tif )
CALLEE	1814:17	1814:17	11	TIFFNumberOfTiles
LEAF_NODE	1814:17	1814:17	12	TIFFNumberOfTiles
LEAF_NODE	1814:34	1814:34	11	(
ARGUMENT	1814:35	1814:35	11	tif
FIELD	1814:35	1814:35	12	tif
LEAF_NODE	1814:35	1814:35	13	tif
LEAF_NODE	1814:38	1814:38	11	)
LEAF_NODE	1814:39	1814:39	7	;
EXPR_STATEMENT	1815:2	1815:51	6	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tile_width ) ;
EXPR	1815:2	1815:2	7	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tile_width )
FUNCTION_CALL	1815:2	1815:50	8	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tile_width )
CALLEE	1815:2	1815:2	9	TIFFGetField
LEAF_NODE	1815:2	1815:2	10	TIFFGetField
LEAF_NODE	1815:14	1815:14	9	(
ARGUMENT	1815:15	1815:15	9	tif
FIELD	1815:15	1815:15	10	tif
LEAF_NODE	1815:15	1815:15	11	tif
LEAF_NODE	1815:18	1815:18	9	,
ARGUMENT	1815:20	1815:20	9	TIFFTAG_TILEWIDTH
FIELD	1815:20	1815:20	10	TIFFTAG_TILEWIDTH
LEAF_NODE	1815:20	1815:20	11	TIFFTAG_TILEWIDTH
LEAF_NODE	1815:37	1815:37	9	,
ARGUMENT	1815:39	1815:39	9	& tile_width
UNARY_EXPR	1815:39	1815:40	10	& tile_width
UNARY_OPERATOR	1815:39	1815:39	11	&
LEAF_NODE	1815:39	1815:39	12	&
FIELD	1815:40	1815:40	11	tile_width
LEAF_NODE	1815:40	1815:40	12	tile_width
LEAF_NODE	1815:50	1815:50	9	)
LEAF_NODE	1815:51	1815:51	7	;
EXPR_STATEMENT	1816:2	1816:53	6	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & tile_height ) ;
EXPR	1816:2	1816:2	7	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & tile_height )
FUNCTION_CALL	1816:2	1816:52	8	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & tile_height )
CALLEE	1816:2	1816:2	9	TIFFGetField
LEAF_NODE	1816:2	1816:2	10	TIFFGetField
LEAF_NODE	1816:14	1816:14	9	(
ARGUMENT	1816:15	1816:15	9	tif
FIELD	1816:15	1816:15	10	tif
LEAF_NODE	1816:15	1816:15	11	tif
LEAF_NODE	1816:18	1816:18	9	,
ARGUMENT	1816:20	1816:20	9	TIFFTAG_TILELENGTH
FIELD	1816:20	1816:20	10	TIFFTAG_TILELENGTH
LEAF_NODE	1816:20	1816:20	11	TIFFTAG_TILELENGTH
LEAF_NODE	1816:38	1816:38	9	,
ARGUMENT	1816:40	1816:40	9	& tile_height
UNARY_EXPR	1816:40	1816:41	10	& tile_height
UNARY_OPERATOR	1816:40	1816:40	11	&
LEAF_NODE	1816:40	1816:40	12	&
FIELD	1816:41	1816:41	11	tile_height
LEAF_NODE	1816:41	1816:41	12	tile_height
LEAF_NODE	1816:52	1816:52	9	)
LEAF_NODE	1816:53	1816:53	7	;
SELECTION	1817:2	1818:55	6	
KEYWORD	1817:2	1817:2	7	if
LEAF_NODE	1817:2	1817:2	8	if
LEAF_NODE	1817:5	1817:5	7	(
CONDITION	1817:6	1817:6	7	tile_width > w || tile_height > h || ( w % tile_width ) != 0 || ( h % tile_height != 0 )
EXPR	1817:6	1817:6	8	tile_width > w || tile_height > h || ( w % tile_width ) != 0 || ( h % tile_height != 0 )
OR	1817:6	1817:24	9	tile_width > w || tile_height > h || ( w % tile_width ) != 0 || ( h % tile_height != 0 )
EXPR	1817:6	1817:19	10	tile_width > w
FIELD	1817:6	1817:6	11	tile_width
LEAF_NODE	1817:6	1817:6	12	tile_width
REL_OPERATOR	1817:17	1817:17	11	>
LEAF_NODE	1817:17	1817:17	12	>
FIELD	1817:19	1817:19	11	w
LEAF_NODE	1817:19	1817:19	12	w
LEAF_NODE	1817:21	1817:21	10	||
EXPR	1817:24	1817:24	10	tile_height > h || ( w % tile_width ) != 0 || ( h % tile_height != 0 )
OR	1817:24	1818:6	11	tile_height > h || ( w % tile_width ) != 0 || ( h % tile_height != 0 )
EXPR	1817:24	1817:38	12	tile_height > h
FIELD	1817:24	1817:24	13	tile_height
LEAF_NODE	1817:24	1817:24	14	tile_height
REL_OPERATOR	1817:36	1817:36	13	>
LEAF_NODE	1817:36	1817:36	14	>
FIELD	1817:38	1817:38	13	h
LEAF_NODE	1817:38	1817:38	14	h
LEAF_NODE	1817:40	1817:40	12	||
EXPR	1818:6	1818:6	12	( w % tile_width ) != 0 || ( h % tile_height != 0 )
OR	1818:6	1818:31	13	( w % tile_width ) != 0 || ( h % tile_height != 0 )
EXPR	1818:6	1818:26	14	( w % tile_width ) != 0
LEAF_NODE	1818:6	1818:6	15	(
FIELD	1818:7	1818:7	15	w
LEAF_NODE	1818:7	1818:7	16	w
LEAF_NODE	1818:9	1818:9	15	%
FIELD	1818:11	1818:11	15	tile_width
LEAF_NODE	1818:11	1818:11	16	tile_width
LEAF_NODE	1818:21	1818:21	15	)
EQ_OPERATOR	1818:23	1818:23	15	!=
LEAF_NODE	1818:23	1818:23	16	!=
FIELD	1818:26	1818:26	15	0
LEAF_NODE	1818:26	1818:26	16	0
LEAF_NODE	1818:28	1818:28	14	||
EXPR	1818:31	1818:52	14	( h % tile_height != 0 )
LEAF_NODE	1818:31	1818:31	15	(
FIELD	1818:32	1818:32	15	h
LEAF_NODE	1818:32	1818:32	16	h
LEAF_NODE	1818:34	1818:34	15	%
FIELD	1818:36	1818:36	15	tile_height
LEAF_NODE	1818:36	1818:36	16	tile_height
EQ_OPERATOR	1818:48	1818:48	15	!=
LEAF_NODE	1818:48	1818:48	16	!=
FIELD	1818:51	1818:51	15	0
LEAF_NODE	1818:51	1818:51	16	0
LEAF_NODE	1818:52	1818:52	15	)
LEAF_NODE	1818:53	1818:53	7	)
STATEMENTS	1818:55	1824:2	7	
LEAF_NODE	1818:55	1818:55	8	{
STATEMENTS	1823:3	1823:3	8	
EXPR_STATEMENT	1823:3	1823:34	9	fputs ( "0 0 1 1 rectclip\n" , fd ) ;
EXPR	1823:3	1823:3	10	fputs ( "0 0 1 1 rectclip\n" , fd )
FUNCTION_CALL	1823:3	1823:33	11	fputs ( "0 0 1 1 rectclip\n" , fd )
CALLEE	1823:3	1823:3	12	fputs
LEAF_NODE	1823:3	1823:3	13	fputs
LEAF_NODE	1823:8	1823:8	12	(
ARGUMENT	1823:9	1823:9	12	"0 0 1 1 rectclip\n"
FIELD	1823:9	1823:9	13	"0 0 1 1 rectclip\n"
LEAF_NODE	1823:9	1823:9	14	"0 0 1 1 rectclip\n"
LEAF_NODE	1823:29	1823:29	12	,
ARGUMENT	1823:31	1823:31	12	fd
FIELD	1823:31	1823:31	13	fd
LEAF_NODE	1823:31	1823:31	14	fd
LEAF_NODE	1823:33	1823:33	12	)
LEAF_NODE	1823:34	1823:34	10	;
LEAF_NODE	1824:2	1824:2	8	}
SELECTION	1825:2	1825:22	6	
KEYWORD	1825:2	1825:2	7	if
LEAF_NODE	1825:2	1825:2	8	if
LEAF_NODE	1825:5	1825:5	7	(
CONDITION	1825:6	1825:6	7	tile_width < w
EXPR	1825:6	1825:19	8	tile_width < w
FIELD	1825:6	1825:6	9	tile_width
LEAF_NODE	1825:6	1825:6	10	tile_width
REL_OPERATOR	1825:17	1825:17	9	<
LEAF_NODE	1825:17	1825:17	10	<
FIELD	1825:19	1825:19	9	w
LEAF_NODE	1825:19	1825:19	10	w
LEAF_NODE	1825:20	1825:20	7	)
STATEMENTS	1825:22	1828:2	7	
LEAF_NODE	1825:22	1825:22	8	{
STATEMENTS	1826:3	1827:3	8	
EXPR_STATEMENT	1826:3	1826:29	9	fputs ( "/im_x 0 def\n" , fd ) ;
EXPR	1826:3	1826:3	10	fputs ( "/im_x 0 def\n" , fd )
FUNCTION_CALL	1826:3	1826:28	11	fputs ( "/im_x 0 def\n" , fd )
CALLEE	1826:3	1826:3	12	fputs
LEAF_NODE	1826:3	1826:3	13	fputs
LEAF_NODE	1826:8	1826:8	12	(
ARGUMENT	1826:9	1826:9	12	"/im_x 0 def\n"
FIELD	1826:9	1826:9	13	"/im_x 0 def\n"
LEAF_NODE	1826:9	1826:9	14	"/im_x 0 def\n"
LEAF_NODE	1826:24	1826:24	12	,
ARGUMENT	1826:26	1826:26	12	fd
FIELD	1826:26	1826:26	13	fd
LEAF_NODE	1826:26	1826:26	14	fd
LEAF_NODE	1826:28	1826:28	12	)
LEAF_NODE	1826:29	1826:29	10	;
EXPR_STATEMENT	1827:3	1827:33	9	( void ) strcpy ( im_x , "im_x neg" ) ;
EXPR	1827:3	1827:9	10	( void ) strcpy ( im_x , "im_x neg" )
LEAF_NODE	1827:3	1827:3	11	(
TYPE_NAME	1827:4	1827:4	11	void
LEAF_NODE	1827:4	1827:4	12	void
LEAF_NODE	1827:8	1827:8	11	)
FUNCTION_CALL	1827:9	1827:32	11	strcpy ( im_x , "im_x neg" )
CALLEE	1827:9	1827:9	12	strcpy
LEAF_NODE	1827:9	1827:9	13	strcpy
LEAF_NODE	1827:15	1827:15	12	(
ARGUMENT	1827:16	1827:16	12	im_x
FIELD	1827:16	1827:16	13	im_x
LEAF_NODE	1827:16	1827:16	14	im_x
LEAF_NODE	1827:20	1827:20	12	,
ARGUMENT	1827:22	1827:22	12	"im_x neg"
FIELD	1827:22	1827:22	13	"im_x neg"
LEAF_NODE	1827:22	1827:22	14	"im_x neg"
LEAF_NODE	1827:32	1827:32	12	)
LEAF_NODE	1827:33	1827:33	10	;
LEAF_NODE	1828:2	1828:2	8	}
SELECTION	1829:2	1829:23	6	
KEYWORD	1829:2	1829:2	7	if
LEAF_NODE	1829:2	1829:2	8	if
LEAF_NODE	1829:5	1829:5	7	(
CONDITION	1829:6	1829:6	7	tile_height < h
EXPR	1829:6	1829:20	8	tile_height < h
FIELD	1829:6	1829:6	9	tile_height
LEAF_NODE	1829:6	1829:6	10	tile_height
REL_OPERATOR	1829:18	1829:18	9	<
LEAF_NODE	1829:18	1829:18	10	<
FIELD	1829:20	1829:20	9	h
LEAF_NODE	1829:20	1829:20	10	h
LEAF_NODE	1829:21	1829:21	7	)
STATEMENTS	1829:23	1832:2	7	
LEAF_NODE	1829:23	1829:23	8	{
STATEMENTS	1830:3	1831:3	8	
EXPR_STATEMENT	1830:3	1830:29	9	fputs ( "/im_y 0 def\n" , fd ) ;
EXPR	1830:3	1830:3	10	fputs ( "/im_y 0 def\n" , fd )
FUNCTION_CALL	1830:3	1830:28	11	fputs ( "/im_y 0 def\n" , fd )
CALLEE	1830:3	1830:3	12	fputs
LEAF_NODE	1830:3	1830:3	13	fputs
LEAF_NODE	1830:8	1830:8	12	(
ARGUMENT	1830:9	1830:9	12	"/im_y 0 def\n"
FIELD	1830:9	1830:9	13	"/im_y 0 def\n"
LEAF_NODE	1830:9	1830:9	14	"/im_y 0 def\n"
LEAF_NODE	1830:24	1830:24	12	,
ARGUMENT	1830:26	1830:26	12	fd
FIELD	1830:26	1830:26	13	fd
LEAF_NODE	1830:26	1830:26	14	fd
LEAF_NODE	1830:28	1830:28	12	)
LEAF_NODE	1830:29	1830:29	10	;
EXPR_STATEMENT	1831:3	1831:72	9	( void ) snprintf ( im_y , sizeof ( im_y ) , "%lu im_y sub" , ( unsigned long ) h ) ;
EXPR	1831:3	1831:9	10	( void ) snprintf ( im_y , sizeof ( im_y ) , "%lu im_y sub" , ( unsigned long ) h )
LEAF_NODE	1831:3	1831:3	11	(
TYPE_NAME	1831:4	1831:4	11	void
LEAF_NODE	1831:4	1831:4	12	void
LEAF_NODE	1831:8	1831:8	11	)
FUNCTION_CALL	1831:9	1831:71	11	snprintf ( im_y , sizeof ( im_y ) , "%lu im_y sub" , ( unsigned long ) h )
CALLEE	1831:9	1831:9	12	snprintf
LEAF_NODE	1831:9	1831:9	13	snprintf
LEAF_NODE	1831:17	1831:17	12	(
ARGUMENT	1831:18	1831:18	12	im_y
FIELD	1831:18	1831:18	13	im_y
LEAF_NODE	1831:18	1831:18	14	im_y
LEAF_NODE	1831:22	1831:22	12	,
ARGUMENT	1831:24	1831:24	12	sizeof ( im_y )
FUNCTION_CALL	1831:24	1831:35	13	sizeof ( im_y )
CALLEE	1831:24	1831:24	14	sizeof
LEAF_NODE	1831:24	1831:24	15	sizeof
LEAF_NODE	1831:30	1831:30	14	(
ARGUMENT	1831:31	1831:31	14	im_y
FIELD	1831:31	1831:31	15	im_y
LEAF_NODE	1831:31	1831:31	16	im_y
LEAF_NODE	1831:35	1831:35	14	)
LEAF_NODE	1831:36	1831:36	12	,
ARGUMENT	1831:38	1831:38	12	"%lu im_y sub"
FIELD	1831:38	1831:38	13	"%lu im_y sub"
LEAF_NODE	1831:38	1831:38	14	"%lu im_y sub"
LEAF_NODE	1831:52	1831:52	12	,
ARGUMENT	1831:54	1831:70	12	( unsigned long ) h
LEAF_NODE	1831:54	1831:54	13	(
TYPE_NAME	1831:55	1831:64	13	unsigned long
LEAF_NODE	1831:55	1831:55	14	unsigned
LEAF_NODE	1831:64	1831:64	14	long
LEAF_NODE	1831:68	1831:68	13	)
FIELD	1831:70	1831:70	13	h
LEAF_NODE	1831:70	1831:70	14	h
LEAF_NODE	1831:71	1831:71	12	)
LEAF_NODE	1831:72	1831:72	10	;
LEAF_NODE	1832:2	1832:2	8	}
LEAF_NODE	1833:1	1833:1	5	}
SELECTION	1833:3	1833:8	3	
KEYWORD	1833:3	1833:3	4	else
LEAF_NODE	1833:3	1833:3	5	else
STATEMENTS	1833:8	1845:1	4	
LEAF_NODE	1833:8	1833:8	5	{
STATEMENTS	1834:2	1838:2	5	
EXPR_STATEMENT	1834:2	1834:32	6	repeat_count = tf_numberstrips ;
EXPR	1834:2	1834:2	7	repeat_count = tf_numberstrips
ASSIGN	1834:2	1834:17	8	repeat_count = tf_numberstrips
LVAL	1834:2	1834:2	9	repeat_count
FIELD	1834:2	1834:2	10	repeat_count
LEAF_NODE	1834:2	1834:2	11	repeat_count
ASSIGN_OP	1834:15	1834:15	9	=
LEAF_NODE	1834:15	1834:15	10	=
RVAL	1834:17	1834:17	9	tf_numberstrips
FIELD	1834:17	1834:17	10	tf_numberstrips
LEAF_NODE	1834:17	1834:17	11	tf_numberstrips
LEAF_NODE	1834:32	1834:32	7	;
EXPR_STATEMENT	1835:2	1835:31	6	tile_height = tf_rowsperstrip ;
EXPR	1835:2	1835:2	7	tile_height = tf_rowsperstrip
ASSIGN	1835:2	1835:16	8	tile_height = tf_rowsperstrip
LVAL	1835:2	1835:2	9	tile_height
FIELD	1835:2	1835:2	10	tile_height
LEAF_NODE	1835:2	1835:2	11	tile_height
ASSIGN_OP	1835:14	1835:14	9	=
LEAF_NODE	1835:14	1835:14	10	=
RVAL	1835:16	1835:16	9	tf_rowsperstrip
FIELD	1835:16	1835:16	10	tf_rowsperstrip
LEAF_NODE	1835:16	1835:16	11	tf_rowsperstrip
LEAF_NODE	1835:31	1835:31	7	;
SELECTION	1836:2	1837:3	6	
KEYWORD	1836:2	1836:2	7	if
LEAF_NODE	1836:2	1836:2	8	if
LEAF_NODE	1836:5	1836:5	7	(
CONDITION	1836:6	1836:6	7	tile_height > h
EXPR	1836:6	1836:20	8	tile_height > h
FIELD	1836:6	1836:6	9	tile_height
LEAF_NODE	1836:6	1836:6	10	tile_height
REL_OPERATOR	1836:18	1836:18	9	>
LEAF_NODE	1836:18	1836:18	10	>
FIELD	1836:20	1836:20	9	h
LEAF_NODE	1836:20	1836:20	10	h
LEAF_NODE	1836:21	1836:21	7	)
STATEMENTS	1837:3	1837:3	7	
EXPR_STATEMENT	1837:3	1837:18	8	tile_height = h ;
EXPR	1837:3	1837:3	9	tile_height = h
ASSIGN	1837:3	1837:17	10	tile_height = h
LVAL	1837:3	1837:3	11	tile_height
FIELD	1837:3	1837:3	12	tile_height
LEAF_NODE	1837:3	1837:3	13	tile_height
ASSIGN_OP	1837:15	1837:15	11	=
LEAF_NODE	1837:15	1837:15	12	=
RVAL	1837:17	1837:17	11	h
FIELD	1837:17	1837:17	12	h
LEAF_NODE	1837:17	1837:17	13	h
LEAF_NODE	1837:18	1837:18	9	;
SELECTION	1838:2	1838:24	6	
KEYWORD	1838:2	1838:2	7	if
LEAF_NODE	1838:2	1838:2	8	if
LEAF_NODE	1838:5	1838:5	7	(
CONDITION	1838:6	1838:6	7	repeat_count > 1
EXPR	1838:6	1838:21	8	repeat_count > 1
FIELD	1838:6	1838:6	9	repeat_count
LEAF_NODE	1838:6	1838:6	10	repeat_count
REL_OPERATOR	1838:19	1838:19	9	>
LEAF_NODE	1838:19	1838:19	10	>
FIELD	1838:21	1838:21	9	1
LEAF_NODE	1838:21	1838:21	10	1
LEAF_NODE	1838:22	1838:22	7	)
STATEMENTS	1838:24	1844:2	7	
LEAF_NODE	1838:24	1838:24	8	{
STATEMENTS	1839:3	1843:3	8	
EXPR_STATEMENT	1839:3	1839:29	9	fputs ( "/im_y 0 def\n" , fd ) ;
EXPR	1839:3	1839:3	10	fputs ( "/im_y 0 def\n" , fd )
FUNCTION_CALL	1839:3	1839:28	11	fputs ( "/im_y 0 def\n" , fd )
CALLEE	1839:3	1839:3	12	fputs
LEAF_NODE	1839:3	1839:3	13	fputs
LEAF_NODE	1839:8	1839:8	12	(
ARGUMENT	1839:9	1839:9	12	"/im_y 0 def\n"
FIELD	1839:9	1839:9	13	"/im_y 0 def\n"
LEAF_NODE	1839:9	1839:9	14	"/im_y 0 def\n"
LEAF_NODE	1839:24	1839:24	12	,
ARGUMENT	1839:26	1839:26	12	fd
FIELD	1839:26	1839:26	13	fd
LEAF_NODE	1839:26	1839:26	14	fd
LEAF_NODE	1839:28	1839:28	12	)
LEAF_NODE	1839:29	1839:29	10	;
EXPR_STATEMENT	1840:3	1841:35	9	fprintf ( fd , "/im_h %lu def\n" , ( unsigned long ) tile_height ) ;
EXPR	1840:3	1840:3	10	fprintf ( fd , "/im_h %lu def\n" , ( unsigned long ) tile_height )
FUNCTION_CALL	1840:3	1841:34	11	fprintf ( fd , "/im_h %lu def\n" , ( unsigned long ) tile_height )
CALLEE	1840:3	1840:3	12	fprintf
LEAF_NODE	1840:3	1840:3	13	fprintf
LEAF_NODE	1840:10	1840:10	12	(
ARGUMENT	1840:11	1840:11	12	fd
FIELD	1840:11	1840:11	13	fd
LEAF_NODE	1840:11	1840:11	14	fd
LEAF_NODE	1840:13	1840:13	12	,
ARGUMENT	1840:15	1840:15	12	"/im_h %lu def\n"
FIELD	1840:15	1840:15	13	"/im_h %lu def\n"
LEAF_NODE	1840:15	1840:15	14	"/im_h %lu def\n"
LEAF_NODE	1840:32	1840:32	12	,
ARGUMENT	1841:7	1841:23	12	( unsigned long ) tile_height
LEAF_NODE	1841:7	1841:7	13	(
TYPE_NAME	1841:8	1841:17	13	unsigned long
LEAF_NODE	1841:8	1841:8	14	unsigned
LEAF_NODE	1841:17	1841:17	14	long
LEAF_NODE	1841:21	1841:21	13	)
FIELD	1841:23	1841:23	13	tile_height
LEAF_NODE	1841:23	1841:23	14	tile_height
LEAF_NODE	1841:34	1841:34	12	)
LEAF_NODE	1841:35	1841:35	10	;
EXPR_STATEMENT	1842:3	1842:29	9	( void ) strcpy ( im_h , "im_h" ) ;
EXPR	1842:3	1842:9	10	( void ) strcpy ( im_h , "im_h" )
LEAF_NODE	1842:3	1842:3	11	(
TYPE_NAME	1842:4	1842:4	11	void
LEAF_NODE	1842:4	1842:4	12	void
LEAF_NODE	1842:8	1842:8	11	)
FUNCTION_CALL	1842:9	1842:28	11	strcpy ( im_h , "im_h" )
CALLEE	1842:9	1842:9	12	strcpy
LEAF_NODE	1842:9	1842:9	13	strcpy
LEAF_NODE	1842:15	1842:15	12	(
ARGUMENT	1842:16	1842:16	12	im_h
FIELD	1842:16	1842:16	13	im_h
LEAF_NODE	1842:16	1842:16	14	im_h
LEAF_NODE	1842:20	1842:20	12	,
ARGUMENT	1842:22	1842:22	12	"im_h"
FIELD	1842:22	1842:22	13	"im_h"
LEAF_NODE	1842:22	1842:22	14	"im_h"
LEAF_NODE	1842:28	1842:28	12	)
LEAF_NODE	1842:29	1842:29	10	;
EXPR_STATEMENT	1843:3	1843:72	9	( void ) snprintf ( im_y , sizeof ( im_y ) , "%lu im_y sub" , ( unsigned long ) h ) ;
EXPR	1843:3	1843:9	10	( void ) snprintf ( im_y , sizeof ( im_y ) , "%lu im_y sub" , ( unsigned long ) h )
LEAF_NODE	1843:3	1843:3	11	(
TYPE_NAME	1843:4	1843:4	11	void
LEAF_NODE	1843:4	1843:4	12	void
LEAF_NODE	1843:8	1843:8	11	)
FUNCTION_CALL	1843:9	1843:71	11	snprintf ( im_y , sizeof ( im_y ) , "%lu im_y sub" , ( unsigned long ) h )
CALLEE	1843:9	1843:9	12	snprintf
LEAF_NODE	1843:9	1843:9	13	snprintf
LEAF_NODE	1843:17	1843:17	12	(
ARGUMENT	1843:18	1843:18	12	im_y
FIELD	1843:18	1843:18	13	im_y
LEAF_NODE	1843:18	1843:18	14	im_y
LEAF_NODE	1843:22	1843:22	12	,
ARGUMENT	1843:24	1843:24	12	sizeof ( im_y )
FUNCTION_CALL	1843:24	1843:35	13	sizeof ( im_y )
CALLEE	1843:24	1843:24	14	sizeof
LEAF_NODE	1843:24	1843:24	15	sizeof
LEAF_NODE	1843:30	1843:30	14	(
ARGUMENT	1843:31	1843:31	14	im_y
FIELD	1843:31	1843:31	15	im_y
LEAF_NODE	1843:31	1843:31	16	im_y
LEAF_NODE	1843:35	1843:35	14	)
LEAF_NODE	1843:36	1843:36	12	,
ARGUMENT	1843:38	1843:38	12	"%lu im_y sub"
FIELD	1843:38	1843:38	13	"%lu im_y sub"
LEAF_NODE	1843:38	1843:38	14	"%lu im_y sub"
LEAF_NODE	1843:52	1843:52	12	,
ARGUMENT	1843:54	1843:70	12	( unsigned long ) h
LEAF_NODE	1843:54	1843:54	13	(
TYPE_NAME	1843:55	1843:64	13	unsigned long
LEAF_NODE	1843:55	1843:55	14	unsigned
LEAF_NODE	1843:64	1843:64	14	long
LEAF_NODE	1843:68	1843:68	13	)
FIELD	1843:70	1843:70	13	h
LEAF_NODE	1843:70	1843:70	14	h
LEAF_NODE	1843:71	1843:71	12	)
LEAF_NODE	1843:72	1843:72	10	;
LEAF_NODE	1844:2	1844:2	8	}
LEAF_NODE	1845:1	1845:1	5	}
EXPR_STATEMENT	1850:1	1850:24	3	fputs ( "{ % exec\n" , fd ) ;
EXPR	1850:1	1850:1	4	fputs ( "{ % exec\n" , fd )
FUNCTION_CALL	1850:1	1850:23	5	fputs ( "{ % exec\n" , fd )
CALLEE	1850:1	1850:1	6	fputs
LEAF_NODE	1850:1	1850:1	7	fputs
LEAF_NODE	1850:6	1850:6	6	(
ARGUMENT	1850:7	1850:7	6	"{ % exec\n"
FIELD	1850:7	1850:7	7	"{ % exec\n"
LEAF_NODE	1850:7	1850:7	8	"{ % exec\n"
LEAF_NODE	1850:19	1850:19	6	,
ARGUMENT	1850:21	1850:21	6	fd
FIELD	1850:21	1850:21	7	fd
LEAF_NODE	1850:21	1850:21	8	fd
LEAF_NODE	1850:23	1850:23	6	)
LEAF_NODE	1850:24	1850:24	4	;
SELECTION	1852:1	1853:2	3	
KEYWORD	1852:1	1852:1	4	if
LEAF_NODE	1852:1	1852:1	5	if
LEAF_NODE	1852:4	1852:4	4	(
CONDITION	1852:5	1852:5	4	repeat_count > 1
EXPR	1852:5	1852:20	5	repeat_count > 1
FIELD	1852:5	1852:5	6	repeat_count
LEAF_NODE	1852:5	1852:5	7	repeat_count
REL_OPERATOR	1852:18	1852:18	6	>
LEAF_NODE	1852:18	1852:18	7	>
FIELD	1852:20	1852:20	6	1
LEAF_NODE	1852:20	1852:20	7	1
LEAF_NODE	1852:21	1852:21	4	)
STATEMENTS	1853:2	1853:2	4	
EXPR_STATEMENT	1853:2	1853:47	5	fprintf ( fd , "%u { %% repeat\n" , repeat_count ) ;
EXPR	1853:2	1853:2	6	fprintf ( fd , "%u { %% repeat\n" , repeat_count )
FUNCTION_CALL	1853:2	1853:46	7	fprintf ( fd , "%u { %% repeat\n" , repeat_count )
CALLEE	1853:2	1853:2	8	fprintf
LEAF_NODE	1853:2	1853:2	9	fprintf
LEAF_NODE	1853:9	1853:9	8	(
ARGUMENT	1853:10	1853:10	8	fd
FIELD	1853:10	1853:10	9	fd
LEAF_NODE	1853:10	1853:10	10	fd
LEAF_NODE	1853:12	1853:12	8	,
ARGUMENT	1853:14	1853:14	8	"%u { %% repeat\n"
FIELD	1853:14	1853:14	9	"%u { %% repeat\n"
LEAF_NODE	1853:14	1853:14	10	"%u { %% repeat\n"
LEAF_NODE	1853:32	1853:32	8	,
ARGUMENT	1853:34	1853:34	8	repeat_count
FIELD	1853:34	1853:34	9	repeat_count
LEAF_NODE	1853:34	1853:34	10	repeat_count
LEAF_NODE	1853:46	1853:46	8	)
LEAF_NODE	1853:47	1853:47	6	;
SELECTION	1858:1	1859:2	3	
KEYWORD	1858:1	1858:1	4	if
LEAF_NODE	1858:1	1858:1	5	if
LEAF_NODE	1858:4	1858:4	4	(
CONDITION	1858:5	1858:5	4	ascii85
EXPR	1858:5	1858:5	5	ascii85
FIELD	1858:5	1858:5	6	ascii85
LEAF_NODE	1858:5	1858:5	7	ascii85
LEAF_NODE	1858:12	1858:12	4	)
STATEMENTS	1859:2	1859:2	4	
EXPR_STATEMENT	1859:2	1860:9	5	fputs ( " /im_stream currentfile /ASCII85Decode filter def\n" , fd ) ;
EXPR	1859:2	1859:2	6	fputs ( " /im_stream currentfile /ASCII85Decode filter def\n" , fd )
FUNCTION_CALL	1859:2	1860:8	7	fputs ( " /im_stream currentfile /ASCII85Decode filter def\n" , fd )
CALLEE	1859:2	1859:2	8	fputs
LEAF_NODE	1859:2	1859:2	9	fputs
LEAF_NODE	1859:7	1859:7	8	(
ARGUMENT	1859:8	1859:8	8	" /im_stream currentfile /ASCII85Decode filter def\n"
FIELD	1859:8	1859:8	9	" /im_stream currentfile /ASCII85Decode filter def\n"
LEAF_NODE	1859:8	1859:8	10	" /im_stream currentfile /ASCII85Decode filter def\n"
LEAF_NODE	1859:61	1859:61	8	,
ARGUMENT	1860:6	1860:6	8	fd
FIELD	1860:6	1860:6	9	fd
LEAF_NODE	1860:6	1860:6	10	fd
LEAF_NODE	1860:8	1860:8	8	)
LEAF_NODE	1860:9	1860:9	6	;
EXPR_STATEMENT	1861:1	1861:19	3	fputs ( " <<\n" , fd ) ;
EXPR	1861:1	1861:1	4	fputs ( " <<\n" , fd )
FUNCTION_CALL	1861:1	1861:18	5	fputs ( " <<\n" , fd )
CALLEE	1861:1	1861:1	6	fputs
LEAF_NODE	1861:1	1861:1	7	fputs
LEAF_NODE	1861:6	1861:6	6	(
ARGUMENT	1861:7	1861:7	6	" <<\n"
FIELD	1861:7	1861:7	7	" <<\n"
LEAF_NODE	1861:7	1861:7	8	" <<\n"
LEAF_NODE	1861:14	1861:14	6	,
ARGUMENT	1861:16	1861:16	6	fd
FIELD	1861:16	1861:16	7	fd
LEAF_NODE	1861:16	1861:16	8	fd
LEAF_NODE	1861:18	1861:18	6	)
LEAF_NODE	1861:19	1861:19	4	;
EXPR_STATEMENT	1862:1	1862:30	3	fputs ( "  /ImageType 1\n" , fd ) ;
EXPR	1862:1	1862:1	4	fputs ( "  /ImageType 1\n" , fd )
FUNCTION_CALL	1862:1	1862:29	5	fputs ( "  /ImageType 1\n" , fd )
CALLEE	1862:1	1862:1	6	fputs
LEAF_NODE	1862:1	1862:1	7	fputs
LEAF_NODE	1862:6	1862:6	6	(
ARGUMENT	1862:7	1862:7	6	"  /ImageType 1\n"
FIELD	1862:7	1862:7	7	"  /ImageType 1\n"
LEAF_NODE	1862:7	1862:7	8	"  /ImageType 1\n"
LEAF_NODE	1862:25	1862:25	6	,
ARGUMENT	1862:27	1862:27	6	fd
FIELD	1862:27	1862:27	7	fd
LEAF_NODE	1862:27	1862:27	8	fd
LEAF_NODE	1862:29	1862:29	6	)
LEAF_NODE	1862:30	1862:30	4	;
EXPR_STATEMENT	1863:1	1863:58	3	fprintf ( fd , "  /Width %lu\n" , ( unsigned long ) tile_width ) ;
EXPR	1863:1	1863:1	4	fprintf ( fd , "  /Width %lu\n" , ( unsigned long ) tile_width )
FUNCTION_CALL	1863:1	1863:57	5	fprintf ( fd , "  /Width %lu\n" , ( unsigned long ) tile_width )
CALLEE	1863:1	1863:1	6	fprintf
LEAF_NODE	1863:1	1863:1	7	fprintf
LEAF_NODE	1863:8	1863:8	6	(
ARGUMENT	1863:9	1863:9	6	fd
FIELD	1863:9	1863:9	7	fd
LEAF_NODE	1863:9	1863:9	8	fd
LEAF_NODE	1863:11	1863:11	6	,
ARGUMENT	1863:13	1863:13	6	"  /Width %lu\n"
FIELD	1863:13	1863:13	7	"  /Width %lu\n"
LEAF_NODE	1863:13	1863:13	8	"  /Width %lu\n"
LEAF_NODE	1863:29	1863:29	6	,
ARGUMENT	1863:31	1863:47	6	( unsigned long ) tile_width
LEAF_NODE	1863:31	1863:31	7	(
TYPE_NAME	1863:32	1863:41	7	unsigned long
LEAF_NODE	1863:32	1863:32	8	unsigned
LEAF_NODE	1863:41	1863:41	8	long
LEAF_NODE	1863:45	1863:45	7	)
FIELD	1863:47	1863:47	7	tile_width
LEAF_NODE	1863:47	1863:47	8	tile_width
LEAF_NODE	1863:57	1863:57	6	)
LEAF_NODE	1863:58	1863:58	4	;
SELECTION	1874:1	1875:2	3	
KEYWORD	1874:1	1874:1	4	if
LEAF_NODE	1874:1	1874:1	5	if
LEAF_NODE	1874:4	1874:4	4	(
CONDITION	1874:5	1874:5	4	TIFFIsTiled ( tif ) || tf_numberstrips == 1
EXPR	1874:5	1874:5	5	TIFFIsTiled ( tif ) || tf_numberstrips == 1
OR	1874:5	1874:25	6	TIFFIsTiled ( tif ) || tf_numberstrips == 1
EXPR	1874:5	1874:5	7	TIFFIsTiled ( tif )
FUNCTION_CALL	1874:5	1874:20	8	TIFFIsTiled ( tif )
CALLEE	1874:5	1874:5	9	TIFFIsTiled
LEAF_NODE	1874:5	1874:5	10	TIFFIsTiled
LEAF_NODE	1874:16	1874:16	9	(
ARGUMENT	1874:17	1874:17	9	tif
FIELD	1874:17	1874:17	10	tif
LEAF_NODE	1874:17	1874:17	11	tif
LEAF_NODE	1874:20	1874:20	9	)
LEAF_NODE	1874:22	1874:22	7	||
EXPR	1874:25	1874:44	7	tf_numberstrips == 1
FIELD	1874:25	1874:25	8	tf_numberstrips
LEAF_NODE	1874:25	1874:25	9	tf_numberstrips
EQ_OPERATOR	1874:41	1874:41	8	==
LEAF_NODE	1874:41	1874:41	9	==
FIELD	1874:44	1874:44	8	1
LEAF_NODE	1874:44	1874:44	9	1
LEAF_NODE	1874:45	1874:45	4	)
STATEMENTS	1875:2	1875:2	4	
EXPR_STATEMENT	1875:2	1875:61	5	fprintf ( fd , "  /Height %lu\n" , ( unsigned long ) tile_height ) ;
EXPR	1875:2	1875:2	6	fprintf ( fd , "  /Height %lu\n" , ( unsigned long ) tile_height )
FUNCTION_CALL	1875:2	1875:60	7	fprintf ( fd , "  /Height %lu\n" , ( unsigned long ) tile_height )
CALLEE	1875:2	1875:2	8	fprintf
LEAF_NODE	1875:2	1875:2	9	fprintf
LEAF_NODE	1875:9	1875:9	8	(
ARGUMENT	1875:10	1875:10	8	fd
FIELD	1875:10	1875:10	9	fd
LEAF_NODE	1875:10	1875:10	10	fd
LEAF_NODE	1875:12	1875:12	8	,
ARGUMENT	1875:14	1875:14	8	"  /Height %lu\n"
FIELD	1875:14	1875:14	9	"  /Height %lu\n"
LEAF_NODE	1875:14	1875:14	10	"  /Height %lu\n"
LEAF_NODE	1875:31	1875:31	8	,
ARGUMENT	1875:33	1875:49	8	( unsigned long ) tile_height
LEAF_NODE	1875:33	1875:33	9	(
TYPE_NAME	1875:34	1875:43	9	unsigned long
LEAF_NODE	1875:34	1875:34	10	unsigned
LEAF_NODE	1875:43	1875:43	10	long
LEAF_NODE	1875:47	1875:47	9	)
FIELD	1875:49	1875:49	9	tile_height
LEAF_NODE	1875:49	1875:49	10	tile_height
LEAF_NODE	1875:60	1875:60	8	)
LEAF_NODE	1875:61	1875:61	6	;
SELECTION	1876:1	1877:2	3	
KEYWORD	1876:1	1876:1	4	else
LEAF_NODE	1876:1	1876:1	5	else
STATEMENTS	1877:2	1877:2	4	
EXPR_STATEMENT	1877:2	1877:33	5	fprintf ( fd , "  /Height im_h\n" ) ;
EXPR	1877:2	1877:2	6	fprintf ( fd , "  /Height im_h\n" )
FUNCTION_CALL	1877:2	1877:32	7	fprintf ( fd , "  /Height im_h\n" )
CALLEE	1877:2	1877:2	8	fprintf
LEAF_NODE	1877:2	1877:2	9	fprintf
LEAF_NODE	1877:9	1877:9	8	(
ARGUMENT	1877:10	1877:10	8	fd
FIELD	1877:10	1877:10	9	fd
LEAF_NODE	1877:10	1877:10	10	fd
LEAF_NODE	1877:12	1877:12	8	,
ARGUMENT	1877:14	1877:14	8	"  /Height im_h\n"
FIELD	1877:14	1877:14	9	"  /Height im_h\n"
LEAF_NODE	1877:14	1877:14	10	"  /Height im_h\n"
LEAF_NODE	1877:32	1877:32	8	)
LEAF_NODE	1877:33	1877:33	6	;
SELECTION	1879:1	1880:2	3	
KEYWORD	1879:1	1879:1	4	if
LEAF_NODE	1879:1	1879:1	5	if
LEAF_NODE	1879:4	1879:4	4	(
CONDITION	1879:5	1879:5	4	planarconfiguration == PLANARCONFIG_SEPARATE && samplesperpixel > 1
EXPR	1879:5	1879:5	5	planarconfiguration == PLANARCONFIG_SEPARATE && samplesperpixel > 1
AND	1879:5	1879:53	6	planarconfiguration == PLANARCONFIG_SEPARATE && samplesperpixel > 1
EXPR	1879:5	1879:28	7	planarconfiguration == PLANARCONFIG_SEPARATE
FIELD	1879:5	1879:5	8	planarconfiguration
LEAF_NODE	1879:5	1879:5	9	planarconfiguration
EQ_OPERATOR	1879:25	1879:25	8	==
LEAF_NODE	1879:25	1879:25	9	==
FIELD	1879:28	1879:28	8	PLANARCONFIG_SEPARATE
LEAF_NODE	1879:28	1879:28	9	PLANARCONFIG_SEPARATE
LEAF_NODE	1879:50	1879:50	7	&&
EXPR	1879:53	1879:71	7	samplesperpixel > 1
FIELD	1879:53	1879:53	8	samplesperpixel
LEAF_NODE	1879:53	1879:53	9	samplesperpixel
REL_OPERATOR	1879:69	1879:69	8	>
LEAF_NODE	1879:69	1879:69	9	>
FIELD	1879:71	1879:71	8	1
LEAF_NODE	1879:71	1879:71	9	1
LEAF_NODE	1879:72	1879:72	4	)
STATEMENTS	1880:2	1880:2	4	
EXPR_STATEMENT	1880:2	1880:44	5	fputs ( "  /MultipleDataSources true\n" , fd ) ;
EXPR	1880:2	1880:2	6	fputs ( "  /MultipleDataSources true\n" , fd )
FUNCTION_CALL	1880:2	1880:43	7	fputs ( "  /MultipleDataSources true\n" , fd )
CALLEE	1880:2	1880:2	8	fputs
LEAF_NODE	1880:2	1880:2	9	fputs
LEAF_NODE	1880:7	1880:7	8	(
ARGUMENT	1880:8	1880:8	8	"  /MultipleDataSources true\n"
FIELD	1880:8	1880:8	9	"  /MultipleDataSources true\n"
LEAF_NODE	1880:8	1880:8	10	"  /MultipleDataSources true\n"
LEAF_NODE	1880:39	1880:39	8	,
ARGUMENT	1880:41	1880:41	8	fd
FIELD	1880:41	1880:41	9	fd
LEAF_NODE	1880:41	1880:41	10	fd
LEAF_NODE	1880:43	1880:43	8	)
LEAF_NODE	1880:44	1880:44	6	;
LEAF_NODE	1881:1	1881:1	3	fprintf
LEAF_NODE	1881:8	1881:8	3	(
LEAF_NODE	1881:9	1881:9	3	fd
LEAF_NODE	1881:11	1881:11	3	,
LEAF_NODE	1881:13	1881:13	3	"  /ImageMatrix [ %lu 0 0 %ld %s %s ]\n"
LEAF_NODE	1881:53	1881:53	3	,
LEAF_NODE	1882:5	1882:5	3	(
LEAF_NODE	1882:6	1882:6	3	unsigned
LEAF_NODE	1882:15	1882:15	3	long
LEAF_NODE	1882:19	1882:19	3	)
LEAF_NODE	1882:21	1882:21	3	w
LEAF_NODE	1882:22	1882:22	3	,
LEAF_NODE	1882:24	1882:24	3	-
LEAF_NODE	1882:26	1882:26	3	(
LEAF_NODE	1882:27	1882:27	3	long
LEAF_NODE	1882:31	1882:31	3	)
LEAF_NODE	1882:32	1882:32	3	h
LEAF_NODE	1882:33	1882:33	3	,
LEAF_NODE	1882:35	1882:35	3	im_x
LEAF_NODE	1882:39	1882:39	3	,
LEAF_NODE	1882:41	1882:41	3	im_y
LEAF_NODE	1882:45	1882:45	3	)
LEAF_NODE	1882:46	1882:46	3	;
EXPR_STATEMENT	1883:1	1883:55	3	fprintf ( fd , "  /BitsPerComponent %d\n" , bitspersample ) ;
EXPR	1883:1	1883:1	4	fprintf ( fd , "  /BitsPerComponent %d\n" , bitspersample )
FUNCTION_CALL	1883:1	1883:54	5	fprintf ( fd , "  /BitsPerComponent %d\n" , bitspersample )
CALLEE	1883:1	1883:1	6	fprintf
LEAF_NODE	1883:1	1883:1	7	fprintf
LEAF_NODE	1883:8	1883:8	6	(
ARGUMENT	1883:9	1883:9	6	fd
FIELD	1883:9	1883:9	7	fd
LEAF_NODE	1883:9	1883:9	8	fd
LEAF_NODE	1883:11	1883:11	6	,
ARGUMENT	1883:13	1883:13	6	"  /BitsPerComponent %d\n"
FIELD	1883:13	1883:13	7	"  /BitsPerComponent %d\n"
LEAF_NODE	1883:13	1883:13	8	"  /BitsPerComponent %d\n"
LEAF_NODE	1883:39	1883:39	6	,
ARGUMENT	1883:41	1883:41	6	bitspersample
FIELD	1883:41	1883:41	7	bitspersample
LEAF_NODE	1883:41	1883:41	8	bitspersample
LEAF_NODE	1883:54	1883:54	6	)
LEAF_NODE	1883:55	1883:55	4	;
EXPR_STATEMENT	1884:1	1884:67	3	fprintf ( fd , "  /Interpolate %s\n" , interpolate ? "true" : "false" ) ;
EXPR	1884:1	1884:1	4	fprintf ( fd , "  /Interpolate %s\n" , interpolate ? "true" : "false" )
FUNCTION_CALL	1884:1	1884:66	5	fprintf ( fd , "  /Interpolate %s\n" , interpolate ? "true" : "false" )
CALLEE	1884:1	1884:1	6	fprintf
LEAF_NODE	1884:1	1884:1	7	fprintf
LEAF_NODE	1884:8	1884:8	6	(
ARGUMENT	1884:9	1884:9	6	fd
FIELD	1884:9	1884:9	7	fd
LEAF_NODE	1884:9	1884:9	8	fd
LEAF_NODE	1884:11	1884:11	6	,
ARGUMENT	1884:13	1884:13	6	"  /Interpolate %s\n"
FIELD	1884:13	1884:13	7	"  /Interpolate %s\n"
LEAF_NODE	1884:13	1884:13	8	"  /Interpolate %s\n"
LEAF_NODE	1884:34	1884:34	6	,
ARGUMENT	1884:36	1884:36	6	interpolate ? "true" : "false"
COND_EXPR	1884:36	1884:59	7	interpolate ? "true" : "false"
CONDITION	1884:36	1884:36	8	interpolate
FIELD	1884:36	1884:36	9	interpolate
LEAF_NODE	1884:36	1884:36	10	interpolate
LEAF_NODE	1884:48	1884:48	8	?
EXPR	1884:50	1884:50	8	"true"
FIELD	1884:50	1884:50	9	"true"
LEAF_NODE	1884:50	1884:50	10	"true"
LEAF_NODE	1884:57	1884:57	8	:
FIELD	1884:59	1884:59	8	"false"
LEAF_NODE	1884:59	1884:59	9	"false"
LEAF_NODE	1884:66	1884:66	6	)
LEAF_NODE	1884:67	1884:67	4	;
SELECTION	1886:1	1886:41	3	
KEYWORD	1886:1	1886:1	4	switch
LEAF_NODE	1886:1	1886:1	5	switch
LEAF_NODE	1886:8	1886:8	4	(
CONDITION	1886:9	1886:9	4	samplesperpixel - extrasamples
EXPR	1886:9	1886:27	5	samplesperpixel - extrasamples
FIELD	1886:9	1886:9	6	samplesperpixel
LEAF_NODE	1886:9	1886:9	7	samplesperpixel
LEAF_NODE	1886:25	1886:25	6	-
FIELD	1886:27	1886:27	6	extrasamples
LEAF_NODE	1886:27	1886:27	7	extrasamples
LEAF_NODE	1886:39	1886:39	4	)
STATEMENTS	1886:41	1949:1	4	
LEAF_NODE	1886:41	1886:41	5	{
STATEMENTS	1887:1	1948:2	5	
LABEL	1887:1	1887:7	6	case 1 :
LEAF_NODE	1887:1	1887:1	7	case
LEAF_NODE	1887:6	1887:6	7	1
LEAF_NODE	1887:7	1887:7	7	:
SELECTION	1888:2	1888:23	6	
KEYWORD	1888:2	1888:2	7	switch
LEAF_NODE	1888:2	1888:2	8	switch
LEAF_NODE	1888:9	1888:9	7	(
CONDITION	1888:10	1888:10	7	photometric
EXPR	1888:10	1888:10	8	photometric
FIELD	1888:10	1888:10	9	photometric
LEAF_NODE	1888:10	1888:10	10	photometric
LEAF_NODE	1888:21	1888:21	7	)
STATEMENTS	1888:23	1926:2	7	
LEAF_NODE	1888:23	1888:23	8	{
STATEMENTS	1889:2	1925:3	8	
LABEL	1889:2	1889:29	9	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	1889:2	1889:2	10	case
LEAF_NODE	1889:7	1889:7	10	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1889:29	1889:29	10	:
EXPR_STATEMENT	1890:3	1890:33	9	fputs ( "  /Decode [0 1]\n" , fd ) ;
EXPR	1890:3	1890:3	10	fputs ( "  /Decode [0 1]\n" , fd )
FUNCTION_CALL	1890:3	1890:32	11	fputs ( "  /Decode [0 1]\n" , fd )
CALLEE	1890:3	1890:3	12	fputs
LEAF_NODE	1890:3	1890:3	13	fputs
LEAF_NODE	1890:8	1890:8	12	(
ARGUMENT	1890:9	1890:9	12	"  /Decode [0 1]\n"
FIELD	1890:9	1890:9	13	"  /Decode [0 1]\n"
LEAF_NODE	1890:9	1890:9	14	"  /Decode [0 1]\n"
LEAF_NODE	1890:28	1890:28	12	,
ARGUMENT	1890:30	1890:30	12	fd
FIELD	1890:30	1890:30	13	fd
LEAF_NODE	1890:30	1890:30	14	fd
LEAF_NODE	1890:32	1890:32	12	)
LEAF_NODE	1890:33	1890:33	10	;
JUMP_STATEMENT	1891:3	1891:8	9	break DESTINATION ;
KEYWORD	1891:3	1891:3	10	break
LEAF_NODE	1891:3	1891:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1891:8	1891:8	10	;
LABEL	1892:2	1892:29	9	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	1892:2	1892:2	10	case
LEAF_NODE	1892:7	1892:7	10	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1892:29	1892:29	10	:
SELECTION	1893:3	1893:24	9	
KEYWORD	1893:3	1893:3	10	switch
LEAF_NODE	1893:3	1893:3	11	switch
LEAF_NODE	1893:10	1893:10	10	(
CONDITION	1893:11	1893:11	10	compression
EXPR	1893:11	1893:11	11	compression
FIELD	1893:11	1893:11	12	compression
LEAF_NODE	1893:11	1893:11	13	compression
LEAF_NODE	1893:22	1893:22	10	)
STATEMENTS	1893:24	1910:3	10	
LEAF_NODE	1893:24	1893:24	11	{
STATEMENTS	1894:3	1909:4	11	
LABEL	1894:3	1894:28	12	case COMPRESSION_CCITTRLE :
LEAF_NODE	1894:3	1894:3	13	case
LEAF_NODE	1894:8	1894:8	13	COMPRESSION_CCITTRLE
LEAF_NODE	1894:28	1894:28	13	:
LABEL	1895:3	1895:29	12	case COMPRESSION_CCITTRLEW :
LEAF_NODE	1895:3	1895:3	13	case
LEAF_NODE	1895:8	1895:8	13	COMPRESSION_CCITTRLEW
LEAF_NODE	1895:29	1895:29	13	:
LABEL	1896:3	1896:29	12	case COMPRESSION_CCITTFAX3 :
LEAF_NODE	1896:3	1896:3	13	case
LEAF_NODE	1896:8	1896:8	13	COMPRESSION_CCITTFAX3
LEAF_NODE	1896:29	1896:29	13	:
LABEL	1897:3	1897:29	12	case COMPRESSION_CCITTFAX4 :
LEAF_NODE	1897:3	1897:3	13	case
LEAF_NODE	1897:8	1897:8	13	COMPRESSION_CCITTFAX4
LEAF_NODE	1897:29	1897:29	13	:
EXPR_STATEMENT	1902:4	1902:34	12	fputs ( "  /Decode [0 1]\n" , fd ) ;
EXPR	1902:4	1902:4	13	fputs ( "  /Decode [0 1]\n" , fd )
FUNCTION_CALL	1902:4	1902:33	14	fputs ( "  /Decode [0 1]\n" , fd )
CALLEE	1902:4	1902:4	15	fputs
LEAF_NODE	1902:4	1902:4	16	fputs
LEAF_NODE	1902:9	1902:9	15	(
ARGUMENT	1902:10	1902:10	15	"  /Decode [0 1]\n"
FIELD	1902:10	1902:10	16	"  /Decode [0 1]\n"
LEAF_NODE	1902:10	1902:10	17	"  /Decode [0 1]\n"
LEAF_NODE	1902:29	1902:29	15	,
ARGUMENT	1902:31	1902:31	15	fd
FIELD	1902:31	1902:31	16	fd
LEAF_NODE	1902:31	1902:31	17	fd
LEAF_NODE	1902:33	1902:33	15	)
LEAF_NODE	1902:34	1902:34	13	;
JUMP_STATEMENT	1903:4	1903:9	12	break DESTINATION ;
KEYWORD	1903:4	1903:4	13	break
LEAF_NODE	1903:4	1903:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1903:9	1903:9	13	;
LABEL	1904:3	1904:10	12	default :
LEAF_NODE	1904:3	1904:3	13	default
LEAF_NODE	1904:10	1904:10	13	:
EXPR_STATEMENT	1908:4	1908:34	12	fputs ( "  /Decode [1 0]\n" , fd ) ;
EXPR	1908:4	1908:4	13	fputs ( "  /Decode [1 0]\n" , fd )
FUNCTION_CALL	1908:4	1908:33	14	fputs ( "  /Decode [1 0]\n" , fd )
CALLEE	1908:4	1908:4	15	fputs
LEAF_NODE	1908:4	1908:4	16	fputs
LEAF_NODE	1908:9	1908:9	15	(
ARGUMENT	1908:10	1908:10	15	"  /Decode [1 0]\n"
FIELD	1908:10	1908:10	16	"  /Decode [1 0]\n"
LEAF_NODE	1908:10	1908:10	17	"  /Decode [1 0]\n"
LEAF_NODE	1908:29	1908:29	15	,
ARGUMENT	1908:31	1908:31	15	fd
FIELD	1908:31	1908:31	16	fd
LEAF_NODE	1908:31	1908:31	17	fd
LEAF_NODE	1908:33	1908:33	15	)
LEAF_NODE	1908:34	1908:34	13	;
JUMP_STATEMENT	1909:4	1909:9	12	break DESTINATION ;
KEYWORD	1909:4	1909:4	13	break
LEAF_NODE	1909:4	1909:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1909:9	1909:9	13	;
LEAF_NODE	1910:3	1910:3	11	}
JUMP_STATEMENT	1911:3	1911:8	9	break DESTINATION ;
KEYWORD	1911:3	1911:3	10	break
LEAF_NODE	1911:3	1911:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1911:8	1911:8	10	;
LABEL	1912:2	1912:26	9	case PHOTOMETRIC_PALETTE :
LEAF_NODE	1912:2	1912:2	10	case
LEAF_NODE	1912:7	1912:7	10	PHOTOMETRIC_PALETTE
LEAF_NODE	1912:26	1912:26	10	:
EXPR_STATEMENT	1913:3	1914:23	9	TIFFGetFieldDefaulted ( tif , TIFFTAG_MINSAMPLEVALUE , & minsamplevalue ) ;
EXPR	1913:3	1913:3	10	TIFFGetFieldDefaulted ( tif , TIFFTAG_MINSAMPLEVALUE , & minsamplevalue )
FUNCTION_CALL	1913:3	1914:22	11	TIFFGetFieldDefaulted ( tif , TIFFTAG_MINSAMPLEVALUE , & minsamplevalue )
CALLEE	1913:3	1913:3	12	TIFFGetFieldDefaulted
LEAF_NODE	1913:3	1913:3	13	TIFFGetFieldDefaulted
LEAF_NODE	1913:24	1913:24	12	(
ARGUMENT	1913:25	1913:25	12	tif
FIELD	1913:25	1913:25	13	tif
LEAF_NODE	1913:25	1913:25	14	tif
LEAF_NODE	1913:28	1913:28	12	,
ARGUMENT	1913:30	1913:30	12	TIFFTAG_MINSAMPLEVALUE
FIELD	1913:30	1913:30	13	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	1913:30	1913:30	14	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	1913:52	1913:52	12	,
ARGUMENT	1914:7	1914:7	12	& minsamplevalue
UNARY_EXPR	1914:7	1914:8	13	& minsamplevalue
UNARY_OPERATOR	1914:7	1914:7	14	&
LEAF_NODE	1914:7	1914:7	15	&
FIELD	1914:8	1914:8	14	minsamplevalue
LEAF_NODE	1914:8	1914:8	15	minsamplevalue
LEAF_NODE	1914:22	1914:22	12	)
LEAF_NODE	1914:23	1914:23	10	;
EXPR_STATEMENT	1915:3	1916:23	9	TIFFGetFieldDefaulted ( tif , TIFFTAG_MAXSAMPLEVALUE , & maxsamplevalue ) ;
EXPR	1915:3	1915:3	10	TIFFGetFieldDefaulted ( tif , TIFFTAG_MAXSAMPLEVALUE , & maxsamplevalue )
FUNCTION_CALL	1915:3	1916:22	11	TIFFGetFieldDefaulted ( tif , TIFFTAG_MAXSAMPLEVALUE , & maxsamplevalue )
CALLEE	1915:3	1915:3	12	TIFFGetFieldDefaulted
LEAF_NODE	1915:3	1915:3	13	TIFFGetFieldDefaulted
LEAF_NODE	1915:24	1915:24	12	(
ARGUMENT	1915:25	1915:25	12	tif
FIELD	1915:25	1915:25	13	tif
LEAF_NODE	1915:25	1915:25	14	tif
LEAF_NODE	1915:28	1915:28	12	,
ARGUMENT	1915:30	1915:30	12	TIFFTAG_MAXSAMPLEVALUE
FIELD	1915:30	1915:30	13	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	1915:30	1915:30	14	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	1915:52	1915:52	12	,
ARGUMENT	1916:7	1916:7	12	& maxsamplevalue
UNARY_EXPR	1916:7	1916:8	13	& maxsamplevalue
UNARY_OPERATOR	1916:7	1916:7	14	&
LEAF_NODE	1916:7	1916:7	15	&
FIELD	1916:8	1916:8	14	maxsamplevalue
LEAF_NODE	1916:8	1916:8	15	maxsamplevalue
LEAF_NODE	1916:22	1916:22	12	)
LEAF_NODE	1916:23	1916:23	10	;
EXPR_STATEMENT	1917:3	1918:39	9	fprintf ( fd , "  /Decode [%u %u]\n" , minsamplevalue , maxsamplevalue ) ;
EXPR	1917:3	1917:3	10	fprintf ( fd , "  /Decode [%u %u]\n" , minsamplevalue , maxsamplevalue )
FUNCTION_CALL	1917:3	1918:38	11	fprintf ( fd , "  /Decode [%u %u]\n" , minsamplevalue , maxsamplevalue )
CALLEE	1917:3	1917:3	12	fprintf
LEAF_NODE	1917:3	1917:3	13	fprintf
LEAF_NODE	1917:10	1917:10	12	(
ARGUMENT	1917:11	1917:11	12	fd
FIELD	1917:11	1917:11	13	fd
LEAF_NODE	1917:11	1917:11	14	fd
LEAF_NODE	1917:13	1917:13	12	,
ARGUMENT	1917:15	1917:15	12	"  /Decode [%u %u]\n"
FIELD	1917:15	1917:15	13	"  /Decode [%u %u]\n"
LEAF_NODE	1917:15	1917:15	14	"  /Decode [%u %u]\n"
LEAF_NODE	1917:36	1917:36	12	,
ARGUMENT	1918:8	1918:8	12	minsamplevalue
FIELD	1918:8	1918:8	13	minsamplevalue
LEAF_NODE	1918:8	1918:8	14	minsamplevalue
LEAF_NODE	1918:22	1918:22	12	,
ARGUMENT	1918:24	1918:24	12	maxsamplevalue
FIELD	1918:24	1918:24	13	maxsamplevalue
LEAF_NODE	1918:24	1918:24	14	maxsamplevalue
LEAF_NODE	1918:38	1918:38	12	)
LEAF_NODE	1918:39	1918:39	10	;
JUMP_STATEMENT	1919:3	1919:8	9	break DESTINATION ;
KEYWORD	1919:3	1919:3	10	break
LEAF_NODE	1919:3	1919:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1919:8	1919:8	10	;
LABEL	1920:2	1920:9	9	default :
LEAF_NODE	1920:2	1920:2	10	default
LEAF_NODE	1920:9	1920:9	10	:
EXPR_STATEMENT	1924:3	1924:33	9	fputs ( "  /Decode [0 1]\n" , fd ) ;
EXPR	1924:3	1924:3	10	fputs ( "  /Decode [0 1]\n" , fd )
FUNCTION_CALL	1924:3	1924:32	11	fputs ( "  /Decode [0 1]\n" , fd )
CALLEE	1924:3	1924:3	12	fputs
LEAF_NODE	1924:3	1924:3	13	fputs
LEAF_NODE	1924:8	1924:8	12	(
ARGUMENT	1924:9	1924:9	12	"  /Decode [0 1]\n"
FIELD	1924:9	1924:9	13	"  /Decode [0 1]\n"
LEAF_NODE	1924:9	1924:9	14	"  /Decode [0 1]\n"
LEAF_NODE	1924:28	1924:28	12	,
ARGUMENT	1924:30	1924:30	12	fd
FIELD	1924:30	1924:30	13	fd
LEAF_NODE	1924:30	1924:30	14	fd
LEAF_NODE	1924:32	1924:32	12	)
LEAF_NODE	1924:33	1924:33	10	;
JUMP_STATEMENT	1925:3	1925:8	9	break DESTINATION ;
KEYWORD	1925:3	1925:3	10	break
LEAF_NODE	1925:3	1925:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1925:8	1925:8	10	;
LEAF_NODE	1926:2	1926:2	8	}
JUMP_STATEMENT	1927:2	1927:7	6	break DESTINATION ;
KEYWORD	1927:2	1927:2	7	break
LEAF_NODE	1927:2	1927:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1927:7	1927:7	7	;
LABEL	1928:1	1928:7	6	case 3 :
LEAF_NODE	1928:1	1928:1	7	case
LEAF_NODE	1928:6	1928:6	7	3
LEAF_NODE	1928:7	1928:7	7	:
SELECTION	1929:2	1929:23	6	
KEYWORD	1929:2	1929:2	7	switch
LEAF_NODE	1929:2	1929:2	8	switch
LEAF_NODE	1929:9	1929:9	7	(
CONDITION	1929:10	1929:10	7	photometric
EXPR	1929:10	1929:10	8	photometric
FIELD	1929:10	1929:10	9	photometric
LEAF_NODE	1929:10	1929:10	10	photometric
LEAF_NODE	1929:21	1929:21	7	)
STATEMENTS	1929:23	1941:2	7	
LEAF_NODE	1929:23	1929:23	8	{
STATEMENTS	1930:2	1940:3	8	
LABEL	1930:2	1930:22	9	case PHOTOMETRIC_RGB :
LEAF_NODE	1930:2	1930:2	10	case
LEAF_NODE	1930:7	1930:7	10	PHOTOMETRIC_RGB
LEAF_NODE	1930:22	1930:22	10	:
EXPR_STATEMENT	1931:3	1931:41	9	fputs ( "  /Decode [0 1 0 1 0 1]\n" , fd ) ;
EXPR	1931:3	1931:3	10	fputs ( "  /Decode [0 1 0 1 0 1]\n" , fd )
FUNCTION_CALL	1931:3	1931:40	11	fputs ( "  /Decode [0 1 0 1 0 1]\n" , fd )
CALLEE	1931:3	1931:3	12	fputs
LEAF_NODE	1931:3	1931:3	13	fputs
LEAF_NODE	1931:8	1931:8	12	(
ARGUMENT	1931:9	1931:9	12	"  /Decode [0 1 0 1 0 1]\n"
FIELD	1931:9	1931:9	13	"  /Decode [0 1 0 1 0 1]\n"
LEAF_NODE	1931:9	1931:9	14	"  /Decode [0 1 0 1 0 1]\n"
LEAF_NODE	1931:36	1931:36	12	,
ARGUMENT	1931:38	1931:38	12	fd
FIELD	1931:38	1931:38	13	fd
LEAF_NODE	1931:38	1931:38	14	fd
LEAF_NODE	1931:40	1931:40	12	)
LEAF_NODE	1931:41	1931:41	10	;
JUMP_STATEMENT	1932:3	1932:8	9	break DESTINATION ;
KEYWORD	1932:3	1932:3	10	break
LEAF_NODE	1932:3	1932:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1932:8	1932:8	10	;
LABEL	1933:2	1933:29	9	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	1933:2	1933:2	10	case
LEAF_NODE	1933:7	1933:7	10	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1933:29	1933:29	10	:
LABEL	1934:2	1934:29	9	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	1934:2	1934:2	10	case
LEAF_NODE	1934:7	1934:7	10	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1934:29	1934:29	10	:
LABEL	1935:2	1935:9	9	default :
LEAF_NODE	1935:2	1935:2	10	default
LEAF_NODE	1935:9	1935:9	10	:
EXPR_STATEMENT	1939:3	1939:41	9	fputs ( "  /Decode [0 1 0 1 0 1]\n" , fd ) ;
EXPR	1939:3	1939:3	10	fputs ( "  /Decode [0 1 0 1 0 1]\n" , fd )
FUNCTION_CALL	1939:3	1939:40	11	fputs ( "  /Decode [0 1 0 1 0 1]\n" , fd )
CALLEE	1939:3	1939:3	12	fputs
LEAF_NODE	1939:3	1939:3	13	fputs
LEAF_NODE	1939:8	1939:8	12	(
ARGUMENT	1939:9	1939:9	12	"  /Decode [0 1 0 1 0 1]\n"
FIELD	1939:9	1939:9	13	"  /Decode [0 1 0 1 0 1]\n"
LEAF_NODE	1939:9	1939:9	14	"  /Decode [0 1 0 1 0 1]\n"
LEAF_NODE	1939:36	1939:36	12	,
ARGUMENT	1939:38	1939:38	12	fd
FIELD	1939:38	1939:38	13	fd
LEAF_NODE	1939:38	1939:38	14	fd
LEAF_NODE	1939:40	1939:40	12	)
LEAF_NODE	1939:41	1939:41	10	;
JUMP_STATEMENT	1940:3	1940:8	9	break DESTINATION ;
KEYWORD	1940:3	1940:3	10	break
LEAF_NODE	1940:3	1940:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1940:8	1940:8	10	;
LEAF_NODE	1941:2	1941:2	8	}
JUMP_STATEMENT	1942:2	1942:7	6	break DESTINATION ;
KEYWORD	1942:2	1942:2	7	break
LEAF_NODE	1942:2	1942:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1942:7	1942:7	7	;
LABEL	1943:1	1943:7	6	case 4 :
LEAF_NODE	1943:1	1943:1	7	case
LEAF_NODE	1943:6	1943:6	7	4
LEAF_NODE	1943:7	1943:7	7	:
EXPR_STATEMENT	1947:2	1947:44	6	fputs ( "  /Decode [0 1 0 1 0 1 0 1]\n" , fd ) ;
EXPR	1947:2	1947:2	7	fputs ( "  /Decode [0 1 0 1 0 1 0 1]\n" , fd )
FUNCTION_CALL	1947:2	1947:43	8	fputs ( "  /Decode [0 1 0 1 0 1 0 1]\n" , fd )
CALLEE	1947:2	1947:2	9	fputs
LEAF_NODE	1947:2	1947:2	10	fputs
LEAF_NODE	1947:7	1947:7	9	(
ARGUMENT	1947:8	1947:8	9	"  /Decode [0 1 0 1 0 1 0 1]\n"
FIELD	1947:8	1947:8	10	"  /Decode [0 1 0 1 0 1 0 1]\n"
LEAF_NODE	1947:8	1947:8	11	"  /Decode [0 1 0 1 0 1 0 1]\n"
LEAF_NODE	1947:39	1947:39	9	,
ARGUMENT	1947:41	1947:41	9	fd
FIELD	1947:41	1947:41	10	fd
LEAF_NODE	1947:41	1947:41	11	fd
LEAF_NODE	1947:43	1947:43	9	)
LEAF_NODE	1947:44	1947:44	7	;
JUMP_STATEMENT	1948:2	1948:7	6	break DESTINATION ;
KEYWORD	1948:2	1948:2	7	break
LEAF_NODE	1948:2	1948:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1948:7	1948:7	7	;
LEAF_NODE	1949:1	1949:1	5	}
EXPR_STATEMENT	1950:1	1950:27	3	fputs ( "  /DataSource" , fd ) ;
EXPR	1950:1	1950:1	4	fputs ( "  /DataSource" , fd )
FUNCTION_CALL	1950:1	1950:26	5	fputs ( "  /DataSource" , fd )
CALLEE	1950:1	1950:1	6	fputs
LEAF_NODE	1950:1	1950:1	7	fputs
LEAF_NODE	1950:6	1950:6	6	(
ARGUMENT	1950:7	1950:7	6	"  /DataSource"
FIELD	1950:7	1950:7	7	"  /DataSource"
LEAF_NODE	1950:7	1950:7	8	"  /DataSource"
LEAF_NODE	1950:22	1950:22	6	,
ARGUMENT	1950:24	1950:24	6	fd
FIELD	1950:24	1950:24	7	fd
LEAF_NODE	1950:24	1950:24	8	fd
LEAF_NODE	1950:26	1950:26	6	)
LEAF_NODE	1950:27	1950:27	4	;
SELECTION	1951:1	1953:2	3	
KEYWORD	1951:1	1951:1	4	if
LEAF_NODE	1951:1	1951:1	5	if
LEAF_NODE	1951:4	1951:4	4	(
CONDITION	1951:5	1951:5	4	planarconfiguration == PLANARCONFIG_SEPARATE && samplesperpixel > 1
EXPR	1951:5	1951:5	5	planarconfiguration == PLANARCONFIG_SEPARATE && samplesperpixel > 1
AND	1951:5	1952:5	6	planarconfiguration == PLANARCONFIG_SEPARATE && samplesperpixel > 1
EXPR	1951:5	1951:28	7	planarconfiguration == PLANARCONFIG_SEPARATE
FIELD	1951:5	1951:5	8	planarconfiguration
LEAF_NODE	1951:5	1951:5	9	planarconfiguration
EQ_OPERATOR	1951:25	1951:25	8	==
LEAF_NODE	1951:25	1951:25	9	==
FIELD	1951:28	1951:28	8	PLANARCONFIG_SEPARATE
LEAF_NODE	1951:28	1951:28	9	PLANARCONFIG_SEPARATE
LEAF_NODE	1951:50	1951:50	7	&&
EXPR	1952:5	1952:23	7	samplesperpixel > 1
FIELD	1952:5	1952:5	8	samplesperpixel
LEAF_NODE	1952:5	1952:5	9	samplesperpixel
REL_OPERATOR	1952:21	1952:21	8	>
LEAF_NODE	1952:21	1952:21	9	>
FIELD	1952:23	1952:23	8	1
LEAF_NODE	1952:23	1952:23	9	1
LEAF_NODE	1952:24	1952:24	4	)
STATEMENTS	1953:2	1953:2	4	
EXPR_STATEMENT	1953:2	1953:17	5	fputs ( " [" , fd ) ;
EXPR	1953:2	1953:2	6	fputs ( " [" , fd )
FUNCTION_CALL	1953:2	1953:16	7	fputs ( " [" , fd )
CALLEE	1953:2	1953:2	8	fputs
LEAF_NODE	1953:2	1953:2	9	fputs
LEAF_NODE	1953:7	1953:7	8	(
ARGUMENT	1953:8	1953:8	8	" ["
FIELD	1953:8	1953:8	9	" ["
LEAF_NODE	1953:8	1953:8	10	" ["
LEAF_NODE	1953:12	1953:12	8	,
ARGUMENT	1953:14	1953:14	8	fd
FIELD	1953:14	1953:14	9	fd
LEAF_NODE	1953:14	1953:14	10	fd
LEAF_NODE	1953:16	1953:16	8	)
LEAF_NODE	1953:17	1953:17	6	;
SELECTION	1954:1	1955:2	3	
KEYWORD	1954:1	1954:1	4	if
LEAF_NODE	1954:1	1954:1	5	if
LEAF_NODE	1954:4	1954:4	4	(
CONDITION	1954:5	1954:5	4	ascii85
EXPR	1954:5	1954:5	5	ascii85
FIELD	1954:5	1954:5	6	ascii85
LEAF_NODE	1954:5	1954:5	7	ascii85
LEAF_NODE	1954:12	1954:12	4	)
STATEMENTS	1955:2	1955:2	4	
EXPR_STATEMENT	1955:2	1955:25	5	fputs ( " im_stream" , fd ) ;
EXPR	1955:2	1955:2	6	fputs ( " im_stream" , fd )
FUNCTION_CALL	1955:2	1955:24	7	fputs ( " im_stream" , fd )
CALLEE	1955:2	1955:2	8	fputs
LEAF_NODE	1955:2	1955:2	9	fputs
LEAF_NODE	1955:7	1955:7	8	(
ARGUMENT	1955:8	1955:8	8	" im_stream"
FIELD	1955:8	1955:8	9	" im_stream"
LEAF_NODE	1955:8	1955:8	10	" im_stream"
LEAF_NODE	1955:20	1955:20	8	,
ARGUMENT	1955:22	1955:22	8	fd
FIELD	1955:22	1955:22	9	fd
LEAF_NODE	1955:22	1955:22	10	fd
LEAF_NODE	1955:24	1955:24	8	)
LEAF_NODE	1955:25	1955:25	6	;
SELECTION	1956:1	1957:2	3	
KEYWORD	1956:1	1956:1	4	else
LEAF_NODE	1956:1	1956:1	5	else
STATEMENTS	1957:2	1957:2	4	
EXPR_STATEMENT	1957:2	1957:50	5	fputs ( " currentfile /ASCIIHexDecode filter" , fd ) ;
EXPR	1957:2	1957:2	6	fputs ( " currentfile /ASCIIHexDecode filter" , fd )
FUNCTION_CALL	1957:2	1957:49	7	fputs ( " currentfile /ASCIIHexDecode filter" , fd )
CALLEE	1957:2	1957:2	8	fputs
LEAF_NODE	1957:2	1957:2	9	fputs
LEAF_NODE	1957:7	1957:7	8	(
ARGUMENT	1957:8	1957:8	8	" currentfile /ASCIIHexDecode filter"
FIELD	1957:8	1957:8	9	" currentfile /ASCIIHexDecode filter"
LEAF_NODE	1957:8	1957:8	10	" currentfile /ASCIIHexDecode filter"
LEAF_NODE	1957:45	1957:45	8	,
ARGUMENT	1957:47	1957:47	8	fd
FIELD	1957:47	1957:47	9	fd
LEAF_NODE	1957:47	1957:47	10	fd
LEAF_NODE	1957:49	1957:49	8	)
LEAF_NODE	1957:50	1957:50	6	;
EXPR_STATEMENT	1959:1	1959:19	3	use_rawdata = TRUE ;
EXPR	1959:1	1959:1	4	use_rawdata = TRUE
ASSIGN	1959:1	1959:15	5	use_rawdata = TRUE
LVAL	1959:1	1959:1	6	use_rawdata
FIELD	1959:1	1959:1	7	use_rawdata
LEAF_NODE	1959:1	1959:1	8	use_rawdata
ASSIGN_OP	1959:13	1959:13	6	=
LEAF_NODE	1959:13	1959:13	7	=
RVAL	1959:15	1959:15	6	TRUE
FIELD	1959:15	1959:15	7	TRUE
LEAF_NODE	1959:15	1959:15	8	TRUE
LEAF_NODE	1959:19	1959:19	4	;
SELECTION	1960:1	1960:22	3	
KEYWORD	1960:1	1960:1	4	switch
LEAF_NODE	1960:1	1960:1	5	switch
LEAF_NODE	1960:8	1960:8	4	(
CONDITION	1960:9	1960:9	4	compression
EXPR	1960:9	1960:9	5	compression
FIELD	1960:9	1960:9	6	compression
LEAF_NODE	1960:9	1960:9	7	compression
LEAF_NODE	1960:20	1960:20	4	)
STATEMENTS	1960:22	2071:1	4	
LEAF_NODE	1960:22	1960:22	5	{
STATEMENTS	1961:1	2070:2	5	
LABEL	1961:1	1961:22	6	case COMPRESSION_NONE :
LEAF_NODE	1961:1	1961:1	7	case
LEAF_NODE	1961:6	1961:6	7	COMPRESSION_NONE
LEAF_NODE	1961:22	1961:22	7	:
JUMP_STATEMENT	1962:2	1962:7	6	break DESTINATION ;
KEYWORD	1962:2	1962:2	7	break
LEAF_NODE	1962:2	1962:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1962:7	1962:7	7	;
LABEL	1963:1	1963:26	6	case COMPRESSION_CCITTRLE :
LEAF_NODE	1963:1	1963:1	7	case
LEAF_NODE	1963:6	1963:6	7	COMPRESSION_CCITTRLE
LEAF_NODE	1963:26	1963:26	7	:
LABEL	1964:1	1964:27	6	case COMPRESSION_CCITTRLEW :
LEAF_NODE	1964:1	1964:1	7	case
LEAF_NODE	1964:6	1964:6	7	COMPRESSION_CCITTRLEW
LEAF_NODE	1964:27	1964:27	7	:
LABEL	1965:1	1965:27	6	case COMPRESSION_CCITTFAX3 :
LEAF_NODE	1965:1	1965:1	7	case
LEAF_NODE	1965:6	1965:6	7	COMPRESSION_CCITTFAX3
LEAF_NODE	1965:27	1965:27	7	:
LABEL	1966:1	1966:27	6	case COMPRESSION_CCITTFAX4 :
LEAF_NODE	1966:1	1966:1	7	case
LEAF_NODE	1966:6	1966:6	7	COMPRESSION_CCITTFAX4
LEAF_NODE	1966:27	1966:27	7	:
EXPR_STATEMENT	1967:2	1967:23	6	fputs ( "\n\t<<\n" , fd ) ;
EXPR	1967:2	1967:2	7	fputs ( "\n\t<<\n" , fd )
FUNCTION_CALL	1967:2	1967:22	8	fputs ( "\n\t<<\n" , fd )
CALLEE	1967:2	1967:2	9	fputs
LEAF_NODE	1967:2	1967:2	10	fputs
LEAF_NODE	1967:7	1967:7	9	(
ARGUMENT	1967:8	1967:8	9	"\n\t<<\n"
FIELD	1967:8	1967:8	10	"\n\t<<\n"
LEAF_NODE	1967:8	1967:8	11	"\n\t<<\n"
LEAF_NODE	1967:18	1967:18	9	,
ARGUMENT	1967:20	1967:20	9	fd
FIELD	1967:20	1967:20	10	fd
LEAF_NODE	1967:20	1967:20	11	fd
LEAF_NODE	1967:22	1967:22	9	)
LEAF_NODE	1967:23	1967:23	7	;
SELECTION	1968:2	1968:44	6	
KEYWORD	1968:2	1968:2	7	if
LEAF_NODE	1968:2	1968:2	8	if
LEAF_NODE	1968:5	1968:5	7	(
CONDITION	1968:6	1968:6	7	compression == COMPRESSION_CCITTFAX3
EXPR	1968:6	1968:21	8	compression == COMPRESSION_CCITTFAX3
FIELD	1968:6	1968:6	9	compression
LEAF_NODE	1968:6	1968:6	10	compression
EQ_OPERATOR	1968:18	1968:18	9	==
LEAF_NODE	1968:18	1968:18	10	==
FIELD	1968:21	1968:21	9	COMPRESSION_CCITTFAX3
LEAF_NODE	1968:21	1968:21	10	COMPRESSION_CCITTFAX3
LEAF_NODE	1968:42	1968:42	7	)
STATEMENTS	1968:44	1982:2	7	
LEAF_NODE	1968:44	1968:44	8	{
STATEMENTS	1969:3	1980:3	8	
SIMPLE_DECL	1969:3	1969:20	9	uint32 g3_options ;
VAR_DECL	1969:3	1969:10	10	uint32 g3_options
TYPE	1969:3	1969:3	11	uint32
TYPE_NAME	1969:3	1969:3	12	uint32
LEAF_NODE	1969:3	1969:3	13	uint32
NAME	1969:10	1969:10	11	g3_options
LEAF_NODE	1969:10	1969:10	12	g3_options
LEAF_NODE	1969:20	1969:20	10	;
EXPR_STATEMENT	1971:3	1971:36	9	fputs ( "\t /EndOfLine true\n" , fd ) ;
EXPR	1971:3	1971:3	10	fputs ( "\t /EndOfLine true\n" , fd )
FUNCTION_CALL	1971:3	1971:35	11	fputs ( "\t /EndOfLine true\n" , fd )
CALLEE	1971:3	1971:3	12	fputs
LEAF_NODE	1971:3	1971:3	13	fputs
LEAF_NODE	1971:8	1971:8	12	(
ARGUMENT	1971:9	1971:9	12	"\t /EndOfLine true\n"
FIELD	1971:9	1971:9	13	"\t /EndOfLine true\n"
LEAF_NODE	1971:9	1971:9	14	"\t /EndOfLine true\n"
LEAF_NODE	1971:31	1971:31	12	,
ARGUMENT	1971:33	1971:33	12	fd
FIELD	1971:33	1971:33	13	fd
LEAF_NODE	1971:33	1971:33	14	fd
LEAF_NODE	1971:35	1971:35	12	)
LEAF_NODE	1971:36	1971:36	10	;
EXPR_STATEMENT	1972:3	1972:38	9	fputs ( "\t /EndOfBlock false\n" , fd ) ;
EXPR	1972:3	1972:3	10	fputs ( "\t /EndOfBlock false\n" , fd )
FUNCTION_CALL	1972:3	1972:37	11	fputs ( "\t /EndOfBlock false\n" , fd )
CALLEE	1972:3	1972:3	12	fputs
LEAF_NODE	1972:3	1972:3	13	fputs
LEAF_NODE	1972:8	1972:8	12	(
ARGUMENT	1972:9	1972:9	12	"\t /EndOfBlock false\n"
FIELD	1972:9	1972:9	13	"\t /EndOfBlock false\n"
LEAF_NODE	1972:9	1972:9	14	"\t /EndOfBlock false\n"
LEAF_NODE	1972:33	1972:33	12	,
ARGUMENT	1972:35	1972:35	12	fd
FIELD	1972:35	1972:35	13	fd
LEAF_NODE	1972:35	1972:35	14	fd
LEAF_NODE	1972:37	1972:37	12	)
LEAF_NODE	1972:38	1972:38	10	;
SELECTION	1973:3	1975:4	9	
KEYWORD	1973:3	1973:3	10	if
LEAF_NODE	1973:3	1973:3	11	if
LEAF_NODE	1973:6	1973:6	10	(
CONDITION	1973:7	1973:7	10	! TIFFGetField ( tif , TIFFTAG_GROUP3OPTIONS , & g3_options )
EXPR	1973:7	1973:7	11	! TIFFGetField ( tif , TIFFTAG_GROUP3OPTIONS , & g3_options )
UNARY_EXPR	1973:7	1973:8	12	! TIFFGetField ( tif , TIFFTAG_GROUP3OPTIONS , & g3_options )
UNARY_OPERATOR	1973:7	1973:7	13	!
LEAF_NODE	1973:7	1973:7	14	!
FUNCTION_CALL	1973:8	1974:20	13	TIFFGetField ( tif , TIFFTAG_GROUP3OPTIONS , & g3_options )
CALLEE	1973:8	1973:8	14	TIFFGetField
LEAF_NODE	1973:8	1973:8	15	TIFFGetField
LEAF_NODE	1973:20	1973:20	14	(
ARGUMENT	1973:21	1973:21	14	tif
FIELD	1973:21	1973:21	15	tif
LEAF_NODE	1973:21	1973:21	16	tif
LEAF_NODE	1973:24	1973:24	14	,
ARGUMENT	1973:26	1973:26	14	TIFFTAG_GROUP3OPTIONS
FIELD	1973:26	1973:26	15	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	1973:26	1973:26	16	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	1973:47	1973:47	14	,
ARGUMENT	1974:9	1974:9	14	& g3_options
UNARY_EXPR	1974:9	1974:10	15	& g3_options
UNARY_OPERATOR	1974:9	1974:9	16	&
LEAF_NODE	1974:9	1974:9	17	&
FIELD	1974:10	1974:10	16	g3_options
LEAF_NODE	1974:10	1974:10	17	g3_options
LEAF_NODE	1974:20	1974:20	14	)
LEAF_NODE	1974:21	1974:21	10	)
STATEMENTS	1975:4	1975:4	10	
EXPR_STATEMENT	1975:4	1975:18	11	g3_options = 0 ;
EXPR	1975:4	1975:4	12	g3_options = 0
ASSIGN	1975:4	1975:17	13	g3_options = 0
LVAL	1975:4	1975:4	14	g3_options
FIELD	1975:4	1975:4	15	g3_options
LEAF_NODE	1975:4	1975:4	16	g3_options
ASSIGN_OP	1975:15	1975:15	14	=
LEAF_NODE	1975:15	1975:15	15	=
RVAL	1975:17	1975:17	14	0
FIELD	1975:17	1975:17	15	0
LEAF_NODE	1975:17	1975:17	16	0
LEAF_NODE	1975:18	1975:18	12	;
SELECTION	1976:3	1977:4	9	
KEYWORD	1976:3	1976:3	10	if
LEAF_NODE	1976:3	1976:3	11	if
LEAF_NODE	1976:6	1976:6	10	(
CONDITION	1976:7	1976:7	10	g3_options & GROUP3OPT_2DENCODING
EXPR	1976:7	1976:20	11	g3_options & GROUP3OPT_2DENCODING
FIELD	1976:7	1976:7	12	g3_options
LEAF_NODE	1976:7	1976:7	13	g3_options
LEAF_NODE	1976:18	1976:18	12	&
FIELD	1976:20	1976:20	12	GROUP3OPT_2DENCODING
LEAF_NODE	1976:20	1976:20	13	GROUP3OPT_2DENCODING
LEAF_NODE	1976:40	1976:40	10	)
STATEMENTS	1977:4	1977:4	10	
EXPR_STATEMENT	1977:4	1977:35	11	fprintf ( fd , "\t /K %s\n" , im_h ) ;
EXPR	1977:4	1977:4	12	fprintf ( fd , "\t /K %s\n" , im_h )
FUNCTION_CALL	1977:4	1977:34	13	fprintf ( fd , "\t /K %s\n" , im_h )
CALLEE	1977:4	1977:4	14	fprintf
LEAF_NODE	1977:4	1977:4	15	fprintf
LEAF_NODE	1977:11	1977:11	14	(
ARGUMENT	1977:12	1977:12	14	fd
FIELD	1977:12	1977:12	15	fd
LEAF_NODE	1977:12	1977:12	16	fd
LEAF_NODE	1977:14	1977:14	14	,
ARGUMENT	1977:16	1977:16	14	"\t /K %s\n"
FIELD	1977:16	1977:16	15	"\t /K %s\n"
LEAF_NODE	1977:16	1977:16	16	"\t /K %s\n"
LEAF_NODE	1977:28	1977:28	14	,
ARGUMENT	1977:30	1977:30	14	im_h
FIELD	1977:30	1977:30	15	im_h
LEAF_NODE	1977:30	1977:30	16	im_h
LEAF_NODE	1977:34	1977:34	14	)
LEAF_NODE	1977:35	1977:35	12	;
SELECTION	1978:3	1979:4	9	
KEYWORD	1978:3	1978:3	10	if
LEAF_NODE	1978:3	1978:3	11	if
LEAF_NODE	1978:6	1978:6	10	(
CONDITION	1978:7	1978:7	10	g3_options & GROUP3OPT_UNCOMPRESSED
EXPR	1978:7	1978:20	11	g3_options & GROUP3OPT_UNCOMPRESSED
FIELD	1978:7	1978:7	12	g3_options
LEAF_NODE	1978:7	1978:7	13	g3_options
LEAF_NODE	1978:18	1978:18	12	&
FIELD	1978:20	1978:20	12	GROUP3OPT_UNCOMPRESSED
LEAF_NODE	1978:20	1978:20	13	GROUP3OPT_UNCOMPRESSED
LEAF_NODE	1978:42	1978:42	10	)
STATEMENTS	1979:4	1979:4	10	
EXPR_STATEMENT	1979:4	1979:40	11	fputs ( "\t /Uncompressed true\n" , fd ) ;
EXPR	1979:4	1979:4	12	fputs ( "\t /Uncompressed true\n" , fd )
FUNCTION_CALL	1979:4	1979:39	13	fputs ( "\t /Uncompressed true\n" , fd )
CALLEE	1979:4	1979:4	14	fputs
LEAF_NODE	1979:4	1979:4	15	fputs
LEAF_NODE	1979:9	1979:9	14	(
ARGUMENT	1979:10	1979:10	14	"\t /Uncompressed true\n"
FIELD	1979:10	1979:10	15	"\t /Uncompressed true\n"
LEAF_NODE	1979:10	1979:10	16	"\t /Uncompressed true\n"
LEAF_NODE	1979:35	1979:35	14	,
ARGUMENT	1979:37	1979:37	14	fd
FIELD	1979:37	1979:37	15	fd
LEAF_NODE	1979:37	1979:37	16	fd
LEAF_NODE	1979:39	1979:39	14	)
LEAF_NODE	1979:40	1979:40	12	;
SELECTION	1980:3	1981:4	9	
KEYWORD	1980:3	1980:3	10	if
LEAF_NODE	1980:3	1980:3	11	if
LEAF_NODE	1980:6	1980:6	10	(
CONDITION	1980:7	1980:7	10	g3_options & GROUP3OPT_FILLBITS
EXPR	1980:7	1980:20	11	g3_options & GROUP3OPT_FILLBITS
FIELD	1980:7	1980:7	12	g3_options
LEAF_NODE	1980:7	1980:7	13	g3_options
LEAF_NODE	1980:18	1980:18	12	&
FIELD	1980:20	1980:20	12	GROUP3OPT_FILLBITS
LEAF_NODE	1980:20	1980:20	13	GROUP3OPT_FILLBITS
LEAF_NODE	1980:38	1980:38	10	)
STATEMENTS	1981:4	1981:4	10	
EXPR_STATEMENT	1981:4	1981:44	11	fputs ( "\t /EncodedByteAlign true\n" , fd ) ;
EXPR	1981:4	1981:4	12	fputs ( "\t /EncodedByteAlign true\n" , fd )
FUNCTION_CALL	1981:4	1981:43	13	fputs ( "\t /EncodedByteAlign true\n" , fd )
CALLEE	1981:4	1981:4	14	fputs
LEAF_NODE	1981:4	1981:4	15	fputs
LEAF_NODE	1981:9	1981:9	14	(
ARGUMENT	1981:10	1981:10	14	"\t /EncodedByteAlign true\n"
FIELD	1981:10	1981:10	15	"\t /EncodedByteAlign true\n"
LEAF_NODE	1981:10	1981:10	16	"\t /EncodedByteAlign true\n"
LEAF_NODE	1981:39	1981:39	14	,
ARGUMENT	1981:41	1981:41	14	fd
FIELD	1981:41	1981:41	15	fd
LEAF_NODE	1981:41	1981:41	16	fd
LEAF_NODE	1981:43	1981:43	14	)
LEAF_NODE	1981:44	1981:44	12	;
LEAF_NODE	1982:2	1982:2	8	}
SELECTION	1983:2	1983:44	6	
KEYWORD	1983:2	1983:2	7	if
LEAF_NODE	1983:2	1983:2	8	if
LEAF_NODE	1983:5	1983:5	7	(
CONDITION	1983:6	1983:6	7	compression == COMPRESSION_CCITTFAX4
EXPR	1983:6	1983:21	8	compression == COMPRESSION_CCITTFAX4
FIELD	1983:6	1983:6	9	compression
LEAF_NODE	1983:6	1983:6	10	compression
EQ_OPERATOR	1983:18	1983:18	9	==
LEAF_NODE	1983:18	1983:18	10	==
FIELD	1983:21	1983:21	9	COMPRESSION_CCITTFAX4
LEAF_NODE	1983:21	1983:21	10	COMPRESSION_CCITTFAX4
LEAF_NODE	1983:42	1983:42	7	)
STATEMENTS	1983:44	1991:2	7	
LEAF_NODE	1983:44	1983:44	8	{
STATEMENTS	1984:3	1989:3	8	
SIMPLE_DECL	1984:3	1984:20	9	uint32 g4_options ;
VAR_DECL	1984:3	1984:10	10	uint32 g4_options
TYPE	1984:3	1984:3	11	uint32
TYPE_NAME	1984:3	1984:3	12	uint32
LEAF_NODE	1984:3	1984:3	13	uint32
NAME	1984:10	1984:10	11	g4_options
LEAF_NODE	1984:10	1984:10	12	g4_options
LEAF_NODE	1984:20	1984:20	10	;
EXPR_STATEMENT	1986:3	1986:26	9	fputs ( "\t /K -1\n" , fd ) ;
EXPR	1986:3	1986:3	10	fputs ( "\t /K -1\n" , fd )
FUNCTION_CALL	1986:3	1986:25	11	fputs ( "\t /K -1\n" , fd )
CALLEE	1986:3	1986:3	12	fputs
LEAF_NODE	1986:3	1986:3	13	fputs
LEAF_NODE	1986:8	1986:8	12	(
ARGUMENT	1986:9	1986:9	12	"\t /K -1\n"
FIELD	1986:9	1986:9	13	"\t /K -1\n"
LEAF_NODE	1986:9	1986:9	14	"\t /K -1\n"
LEAF_NODE	1986:21	1986:21	12	,
ARGUMENT	1986:23	1986:23	12	fd
FIELD	1986:23	1986:23	13	fd
LEAF_NODE	1986:23	1986:23	14	fd
LEAF_NODE	1986:25	1986:25	12	)
LEAF_NODE	1986:26	1986:26	10	;
EXPR_STATEMENT	1987:3	1988:24	9	TIFFGetFieldDefaulted ( tif , TIFFTAG_GROUP4OPTIONS , & g4_options ) ;
EXPR	1987:3	1987:3	10	TIFFGetFieldDefaulted ( tif , TIFFTAG_GROUP4OPTIONS , & g4_options )
FUNCTION_CALL	1987:3	1988:23	11	TIFFGetFieldDefaulted ( tif , TIFFTAG_GROUP4OPTIONS , & g4_options )
CALLEE	1987:3	1987:3	12	TIFFGetFieldDefaulted
LEAF_NODE	1987:3	1987:3	13	TIFFGetFieldDefaulted
LEAF_NODE	1987:24	1987:24	12	(
ARGUMENT	1987:25	1987:25	12	tif
FIELD	1987:25	1987:25	13	tif
LEAF_NODE	1987:25	1987:25	14	tif
LEAF_NODE	1987:28	1987:28	12	,
ARGUMENT	1987:30	1987:30	12	TIFFTAG_GROUP4OPTIONS
FIELD	1987:30	1987:30	13	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	1987:30	1987:30	14	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	1987:51	1987:51	12	,
ARGUMENT	1988:12	1988:12	12	& g4_options
UNARY_EXPR	1988:12	1988:13	13	& g4_options
UNARY_OPERATOR	1988:12	1988:12	14	&
LEAF_NODE	1988:12	1988:12	15	&
FIELD	1988:13	1988:13	14	g4_options
LEAF_NODE	1988:13	1988:13	15	g4_options
LEAF_NODE	1988:23	1988:23	12	)
LEAF_NODE	1988:24	1988:24	10	;
SELECTION	1989:3	1990:4	9	
KEYWORD	1989:3	1989:3	10	if
LEAF_NODE	1989:3	1989:3	11	if
LEAF_NODE	1989:6	1989:6	10	(
CONDITION	1989:7	1989:7	10	g4_options & GROUP4OPT_UNCOMPRESSED
EXPR	1989:7	1989:20	11	g4_options & GROUP4OPT_UNCOMPRESSED
FIELD	1989:7	1989:7	12	g4_options
LEAF_NODE	1989:7	1989:7	13	g4_options
LEAF_NODE	1989:18	1989:18	12	&
FIELD	1989:20	1989:20	12	GROUP4OPT_UNCOMPRESSED
LEAF_NODE	1989:20	1989:20	13	GROUP4OPT_UNCOMPRESSED
LEAF_NODE	1989:42	1989:42	10	)
STATEMENTS	1990:4	1990:4	10	
EXPR_STATEMENT	1990:4	1990:40	11	fputs ( "\t /Uncompressed true\n" , fd ) ;
EXPR	1990:4	1990:4	12	fputs ( "\t /Uncompressed true\n" , fd )
FUNCTION_CALL	1990:4	1990:39	13	fputs ( "\t /Uncompressed true\n" , fd )
CALLEE	1990:4	1990:4	14	fputs
LEAF_NODE	1990:4	1990:4	15	fputs
LEAF_NODE	1990:9	1990:9	14	(
ARGUMENT	1990:10	1990:10	14	"\t /Uncompressed true\n"
FIELD	1990:10	1990:10	15	"\t /Uncompressed true\n"
LEAF_NODE	1990:10	1990:10	16	"\t /Uncompressed true\n"
LEAF_NODE	1990:35	1990:35	14	,
ARGUMENT	1990:37	1990:37	14	fd
FIELD	1990:37	1990:37	15	fd
LEAF_NODE	1990:37	1990:37	16	fd
LEAF_NODE	1990:39	1990:39	14	)
LEAF_NODE	1990:40	1990:40	12	;
LEAF_NODE	1991:2	1991:2	8	}
SELECTION	1992:2	1993:3	6	
KEYWORD	1992:2	1992:2	7	if
LEAF_NODE	1992:2	1992:2	8	if
LEAF_NODE	1992:5	1992:5	7	(
CONDITION	1992:6	1992:6	7	! ( tile_width == w && w == 1728U )
EXPR	1992:6	1992:6	8	! ( tile_width == w && w == 1728U )
UNARY_EXPR	1992:6	1992:37	9	! ( tile_width == w && w == 1728U )
UNARY_OPERATOR	1992:6	1992:6	10	!
LEAF_NODE	1992:6	1992:6	11	!
LEAF_NODE	1992:7	1992:7	10	(
AND	1992:8	1992:27	10	tile_width == w && w == 1728U
EXPR	1992:8	1992:22	11	tile_width == w
FIELD	1992:8	1992:8	12	tile_width
LEAF_NODE	1992:8	1992:8	13	tile_width
EQ_OPERATOR	1992:19	1992:19	12	==
LEAF_NODE	1992:19	1992:19	13	==
FIELD	1992:22	1992:22	12	w
LEAF_NODE	1992:22	1992:22	13	w
LEAF_NODE	1992:24	1992:24	11	&&
EXPR	1992:27	1992:32	11	w == 1728U
FIELD	1992:27	1992:27	12	w
LEAF_NODE	1992:27	1992:27	13	w
EQ_OPERATOR	1992:29	1992:29	12	==
LEAF_NODE	1992:29	1992:29	13	==
FIELD	1992:32	1992:32	12	1728U
LEAF_NODE	1992:32	1992:32	13	1728U
LEAF_NODE	1992:37	1992:37	10	)
LEAF_NODE	1992:38	1992:38	7	)
STATEMENTS	1993:3	1993:3	7	
EXPR_STATEMENT	1993:3	1994:34	8	fprintf ( fd , "\t /Columns %lu\n" , ( unsigned long ) tile_width ) ;
EXPR	1993:3	1993:3	9	fprintf ( fd , "\t /Columns %lu\n" , ( unsigned long ) tile_width )
FUNCTION_CALL	1993:3	1994:33	10	fprintf ( fd , "\t /Columns %lu\n" , ( unsigned long ) tile_width )
CALLEE	1993:3	1993:3	11	fprintf
LEAF_NODE	1993:3	1993:3	12	fprintf
LEAF_NODE	1993:10	1993:10	11	(
ARGUMENT	1993:11	1993:11	11	fd
FIELD	1993:11	1993:11	12	fd
LEAF_NODE	1993:11	1993:11	13	fd
LEAF_NODE	1993:13	1993:13	11	,
ARGUMENT	1993:15	1993:15	11	"\t /Columns %lu\n"
FIELD	1993:15	1993:15	12	"\t /Columns %lu\n"
LEAF_NODE	1993:15	1993:15	13	"\t /Columns %lu\n"
LEAF_NODE	1993:34	1993:34	11	,
ARGUMENT	1994:7	1994:23	11	( unsigned long ) tile_width
LEAF_NODE	1994:7	1994:7	12	(
TYPE_NAME	1994:8	1994:17	12	unsigned long
LEAF_NODE	1994:8	1994:8	13	unsigned
LEAF_NODE	1994:17	1994:17	13	long
LEAF_NODE	1994:21	1994:21	12	)
FIELD	1994:23	1994:23	12	tile_width
LEAF_NODE	1994:23	1994:23	13	tile_width
LEAF_NODE	1994:33	1994:33	11	)
LEAF_NODE	1994:34	1994:34	9	;
EXPR_STATEMENT	1995:2	1995:36	6	fprintf ( fd , "\t /Rows %s\n" , im_h ) ;
EXPR	1995:2	1995:2	7	fprintf ( fd , "\t /Rows %s\n" , im_h )
FUNCTION_CALL	1995:2	1995:35	8	fprintf ( fd , "\t /Rows %s\n" , im_h )
CALLEE	1995:2	1995:2	9	fprintf
LEAF_NODE	1995:2	1995:2	10	fprintf
LEAF_NODE	1995:9	1995:9	9	(
ARGUMENT	1995:10	1995:10	9	fd
FIELD	1995:10	1995:10	10	fd
LEAF_NODE	1995:10	1995:10	11	fd
LEAF_NODE	1995:12	1995:12	9	,
ARGUMENT	1995:14	1995:14	9	"\t /Rows %s\n"
FIELD	1995:14	1995:14	10	"\t /Rows %s\n"
LEAF_NODE	1995:14	1995:14	11	"\t /Rows %s\n"
LEAF_NODE	1995:29	1995:29	9	,
ARGUMENT	1995:31	1995:31	9	im_h
FIELD	1995:31	1995:31	10	im_h
LEAF_NODE	1995:31	1995:31	11	im_h
LEAF_NODE	1995:35	1995:35	9	)
LEAF_NODE	1995:36	1995:36	7	;
SELECTION	1996:2	1997:44	6	
KEYWORD	1996:2	1996:2	7	if
LEAF_NODE	1996:2	1996:2	8	if
LEAF_NODE	1996:5	1996:5	7	(
CONDITION	1996:6	1996:6	7	compression == COMPRESSION_CCITTRLE || compression == COMPRESSION_CCITTRLEW
EXPR	1996:6	1996:6	8	compression == COMPRESSION_CCITTRLE || compression == COMPRESSION_CCITTRLEW
OR	1996:6	1997:6	9	compression == COMPRESSION_CCITTRLE || compression == COMPRESSION_CCITTRLEW
EXPR	1996:6	1996:21	10	compression == COMPRESSION_CCITTRLE
FIELD	1996:6	1996:6	11	compression
LEAF_NODE	1996:6	1996:6	12	compression
EQ_OPERATOR	1996:18	1996:18	11	==
LEAF_NODE	1996:18	1996:18	12	==
FIELD	1996:21	1996:21	11	COMPRESSION_CCITTRLE
LEAF_NODE	1996:21	1996:21	12	COMPRESSION_CCITTRLE
LEAF_NODE	1996:42	1996:42	10	||
EXPR	1997:6	1997:21	10	compression == COMPRESSION_CCITTRLEW
FIELD	1997:6	1997:6	11	compression
LEAF_NODE	1997:6	1997:6	12	compression
EQ_OPERATOR	1997:18	1997:18	11	==
LEAF_NODE	1997:18	1997:18	12	==
FIELD	1997:21	1997:21	11	COMPRESSION_CCITTRLEW
LEAF_NODE	1997:21	1997:21	12	COMPRESSION_CCITTRLEW
LEAF_NODE	1997:42	1997:42	7	)
STATEMENTS	1997:44	2000:2	7	
LEAF_NODE	1997:44	1997:44	8	{
STATEMENTS	1998:3	1999:3	8	
EXPR_STATEMENT	1998:3	1998:43	9	fputs ( "\t /EncodedByteAlign true\n" , fd ) ;
EXPR	1998:3	1998:3	10	fputs ( "\t /EncodedByteAlign true\n" , fd )
FUNCTION_CALL	1998:3	1998:42	11	fputs ( "\t /EncodedByteAlign true\n" , fd )
CALLEE	1998:3	1998:3	12	fputs
LEAF_NODE	1998:3	1998:3	13	fputs
LEAF_NODE	1998:8	1998:8	12	(
ARGUMENT	1998:9	1998:9	12	"\t /EncodedByteAlign true\n"
FIELD	1998:9	1998:9	13	"\t /EncodedByteAlign true\n"
LEAF_NODE	1998:9	1998:9	14	"\t /EncodedByteAlign true\n"
LEAF_NODE	1998:38	1998:38	12	,
ARGUMENT	1998:40	1998:40	12	fd
FIELD	1998:40	1998:40	13	fd
LEAF_NODE	1998:40	1998:40	14	fd
LEAF_NODE	1998:42	1998:42	12	)
LEAF_NODE	1998:43	1998:43	10	;
EXPR_STATEMENT	1999:3	1999:38	9	fputs ( "\t /EndOfBlock false\n" , fd ) ;
EXPR	1999:3	1999:3	10	fputs ( "\t /EndOfBlock false\n" , fd )
FUNCTION_CALL	1999:3	1999:37	11	fputs ( "\t /EndOfBlock false\n" , fd )
CALLEE	1999:3	1999:3	12	fputs
LEAF_NODE	1999:3	1999:3	13	fputs
LEAF_NODE	1999:8	1999:8	12	(
ARGUMENT	1999:9	1999:9	12	"\t /EndOfBlock false\n"
FIELD	1999:9	1999:9	13	"\t /EndOfBlock false\n"
LEAF_NODE	1999:9	1999:9	14	"\t /EndOfBlock false\n"
LEAF_NODE	1999:33	1999:33	12	,
ARGUMENT	1999:35	1999:35	12	fd
FIELD	1999:35	1999:35	13	fd
LEAF_NODE	1999:35	1999:35	14	fd
LEAF_NODE	1999:37	1999:37	12	)
LEAF_NODE	1999:38	1999:38	10	;
LEAF_NODE	2000:2	2000:2	8	}
SELECTION	2001:2	2002:3	6	
KEYWORD	2001:2	2001:2	7	if
LEAF_NODE	2001:2	2001:2	8	if
LEAF_NODE	2001:5	2001:5	7	(
CONDITION	2001:6	2001:6	7	photometric == PHOTOMETRIC_MINISBLACK
EXPR	2001:6	2001:21	8	photometric == PHOTOMETRIC_MINISBLACK
FIELD	2001:6	2001:6	9	photometric
LEAF_NODE	2001:6	2001:6	10	photometric
EQ_OPERATOR	2001:18	2001:18	9	==
LEAF_NODE	2001:18	2001:18	10	==
FIELD	2001:21	2001:21	9	PHOTOMETRIC_MINISBLACK
LEAF_NODE	2001:21	2001:21	10	PHOTOMETRIC_MINISBLACK
LEAF_NODE	2001:43	2001:43	7	)
STATEMENTS	2002:3	2002:3	7	
EXPR_STATEMENT	2002:3	2002:35	8	fputs ( "\t /BlackIs1 true\n" , fd ) ;
EXPR	2002:3	2002:3	9	fputs ( "\t /BlackIs1 true\n" , fd )
FUNCTION_CALL	2002:3	2002:34	10	fputs ( "\t /BlackIs1 true\n" , fd )
CALLEE	2002:3	2002:3	11	fputs
LEAF_NODE	2002:3	2002:3	12	fputs
LEAF_NODE	2002:8	2002:8	11	(
ARGUMENT	2002:9	2002:9	11	"\t /BlackIs1 true\n"
FIELD	2002:9	2002:9	12	"\t /BlackIs1 true\n"
LEAF_NODE	2002:9	2002:9	13	"\t /BlackIs1 true\n"
LEAF_NODE	2002:30	2002:30	11	,
ARGUMENT	2002:32	2002:32	11	fd
FIELD	2002:32	2002:32	12	fd
LEAF_NODE	2002:32	2002:32	13	fd
LEAF_NODE	2002:34	2002:34	11	)
LEAF_NODE	2002:35	2002:35	9	;
EXPR_STATEMENT	2003:2	2003:44	6	fprintf ( fd , "\t>> /CCITTFaxDecode filter" ) ;
EXPR	2003:2	2003:2	7	fprintf ( fd , "\t>> /CCITTFaxDecode filter" )
FUNCTION_CALL	2003:2	2003:43	8	fprintf ( fd , "\t>> /CCITTFaxDecode filter" )
CALLEE	2003:2	2003:2	9	fprintf
LEAF_NODE	2003:2	2003:2	10	fprintf
LEAF_NODE	2003:9	2003:9	9	(
ARGUMENT	2003:10	2003:10	9	fd
FIELD	2003:10	2003:10	10	fd
LEAF_NODE	2003:10	2003:10	11	fd
LEAF_NODE	2003:12	2003:12	9	,
ARGUMENT	2003:14	2003:14	9	"\t>> /CCITTFaxDecode filter"
FIELD	2003:14	2003:14	10	"\t>> /CCITTFaxDecode filter"
LEAF_NODE	2003:14	2003:14	11	"\t>> /CCITTFaxDecode filter"
LEAF_NODE	2003:43	2003:43	9	)
LEAF_NODE	2003:44	2003:44	7	;
JUMP_STATEMENT	2004:2	2004:7	6	break DESTINATION ;
KEYWORD	2004:2	2004:2	7	break
LEAF_NODE	2004:2	2004:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2004:7	2004:7	7	;
LABEL	2005:1	2005:21	6	case COMPRESSION_LZW :
LEAF_NODE	2005:1	2005:1	7	case
LEAF_NODE	2005:6	2005:6	7	COMPRESSION_LZW
LEAF_NODE	2005:21	2005:21	7	:
EXPR_STATEMENT	2006:2	2006:59	6	TIFFGetFieldDefaulted ( tif , TIFFTAG_PREDICTOR , & predictor ) ;
EXPR	2006:2	2006:2	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_PREDICTOR , & predictor )
FUNCTION_CALL	2006:2	2006:58	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_PREDICTOR , & predictor )
CALLEE	2006:2	2006:2	9	TIFFGetFieldDefaulted
LEAF_NODE	2006:2	2006:2	10	TIFFGetFieldDefaulted
LEAF_NODE	2006:23	2006:23	9	(
ARGUMENT	2006:24	2006:24	9	tif
FIELD	2006:24	2006:24	10	tif
LEAF_NODE	2006:24	2006:24	11	tif
LEAF_NODE	2006:27	2006:27	9	,
ARGUMENT	2006:29	2006:29	9	TIFFTAG_PREDICTOR
FIELD	2006:29	2006:29	10	TIFFTAG_PREDICTOR
LEAF_NODE	2006:29	2006:29	11	TIFFTAG_PREDICTOR
LEAF_NODE	2006:46	2006:46	9	,
ARGUMENT	2006:48	2006:48	9	& predictor
UNARY_EXPR	2006:48	2006:49	10	& predictor
UNARY_OPERATOR	2006:48	2006:48	11	&
LEAF_NODE	2006:48	2006:48	12	&
FIELD	2006:49	2006:49	11	predictor
LEAF_NODE	2006:49	2006:49	12	predictor
LEAF_NODE	2006:58	2006:58	9	)
LEAF_NODE	2006:59	2006:59	7	;
SELECTION	2007:2	2007:22	6	
KEYWORD	2007:2	2007:2	7	if
LEAF_NODE	2007:2	2007:2	8	if
LEAF_NODE	2007:5	2007:5	7	(
CONDITION	2007:6	2007:6	7	predictor == 2
EXPR	2007:6	2007:19	8	predictor == 2
FIELD	2007:6	2007:6	9	predictor
LEAF_NODE	2007:6	2007:6	10	predictor
EQ_OPERATOR	2007:16	2007:16	9	==
LEAF_NODE	2007:16	2007:16	10	==
FIELD	2007:19	2007:19	9	2
LEAF_NODE	2007:19	2007:19	10	2
LEAF_NODE	2007:20	2007:20	7	)
STATEMENTS	2007:22	2016:2	7	
LEAF_NODE	2007:22	2007:22	8	{
STATEMENTS	2008:3	2015:3	8	
EXPR_STATEMENT	2008:3	2008:24	9	fputs ( "\n\t<<\n" , fd ) ;
EXPR	2008:3	2008:3	10	fputs ( "\n\t<<\n" , fd )
FUNCTION_CALL	2008:3	2008:23	11	fputs ( "\n\t<<\n" , fd )
CALLEE	2008:3	2008:3	12	fputs
LEAF_NODE	2008:3	2008:3	13	fputs
LEAF_NODE	2008:8	2008:8	12	(
ARGUMENT	2008:9	2008:9	12	"\n\t<<\n"
FIELD	2008:9	2008:9	13	"\n\t<<\n"
LEAF_NODE	2008:9	2008:9	14	"\n\t<<\n"
LEAF_NODE	2008:19	2008:19	12	,
ARGUMENT	2008:21	2008:21	12	fd
FIELD	2008:21	2008:21	13	fd
LEAF_NODE	2008:21	2008:21	14	fd
LEAF_NODE	2008:23	2008:23	12	)
LEAF_NODE	2008:24	2008:24	10	;
EXPR_STATEMENT	2009:3	2009:47	9	fprintf ( fd , "\t /Predictor %u\n" , predictor ) ;
EXPR	2009:3	2009:3	10	fprintf ( fd , "\t /Predictor %u\n" , predictor )
FUNCTION_CALL	2009:3	2009:46	11	fprintf ( fd , "\t /Predictor %u\n" , predictor )
CALLEE	2009:3	2009:3	12	fprintf
LEAF_NODE	2009:3	2009:3	13	fprintf
LEAF_NODE	2009:10	2009:10	12	(
ARGUMENT	2009:11	2009:11	12	fd
FIELD	2009:11	2009:11	13	fd
LEAF_NODE	2009:11	2009:11	14	fd
LEAF_NODE	2009:13	2009:13	12	,
ARGUMENT	2009:15	2009:15	12	"\t /Predictor %u\n"
FIELD	2009:15	2009:15	13	"\t /Predictor %u\n"
LEAF_NODE	2009:15	2009:15	14	"\t /Predictor %u\n"
LEAF_NODE	2009:35	2009:35	12	,
ARGUMENT	2009:37	2009:37	12	predictor
FIELD	2009:37	2009:37	13	predictor
LEAF_NODE	2009:37	2009:37	14	predictor
LEAF_NODE	2009:46	2009:46	12	)
LEAF_NODE	2009:47	2009:47	10	;
EXPR_STATEMENT	2010:3	2011:34	9	fprintf ( fd , "\t /Columns %lu\n" , ( unsigned long ) tile_width ) ;
EXPR	2010:3	2010:3	10	fprintf ( fd , "\t /Columns %lu\n" , ( unsigned long ) tile_width )
FUNCTION_CALL	2010:3	2011:33	11	fprintf ( fd , "\t /Columns %lu\n" , ( unsigned long ) tile_width )
CALLEE	2010:3	2010:3	12	fprintf
LEAF_NODE	2010:3	2010:3	13	fprintf
LEAF_NODE	2010:10	2010:10	12	(
ARGUMENT	2010:11	2010:11	12	fd
FIELD	2010:11	2010:11	13	fd
LEAF_NODE	2010:11	2010:11	14	fd
LEAF_NODE	2010:13	2010:13	12	,
ARGUMENT	2010:15	2010:15	12	"\t /Columns %lu\n"
FIELD	2010:15	2010:15	13	"\t /Columns %lu\n"
LEAF_NODE	2010:15	2010:15	14	"\t /Columns %lu\n"
LEAF_NODE	2010:34	2010:34	12	,
ARGUMENT	2011:7	2011:23	12	( unsigned long ) tile_width
LEAF_NODE	2011:7	2011:7	13	(
TYPE_NAME	2011:8	2011:17	13	unsigned long
LEAF_NODE	2011:8	2011:8	14	unsigned
LEAF_NODE	2011:17	2011:17	14	long
LEAF_NODE	2011:21	2011:21	13	)
FIELD	2011:23	2011:23	13	tile_width
LEAF_NODE	2011:23	2011:23	14	tile_width
LEAF_NODE	2011:33	2011:33	12	)
LEAF_NODE	2011:34	2011:34	10	;
EXPR_STATEMENT	2012:3	2012:50	9	fprintf ( fd , "\t /Colors %u\n" , samplesperpixel ) ;
EXPR	2012:3	2012:3	10	fprintf ( fd , "\t /Colors %u\n" , samplesperpixel )
FUNCTION_CALL	2012:3	2012:49	11	fprintf ( fd , "\t /Colors %u\n" , samplesperpixel )
CALLEE	2012:3	2012:3	12	fprintf
LEAF_NODE	2012:3	2012:3	13	fprintf
LEAF_NODE	2012:10	2012:10	12	(
ARGUMENT	2012:11	2012:11	12	fd
FIELD	2012:11	2012:11	13	fd
LEAF_NODE	2012:11	2012:11	14	fd
LEAF_NODE	2012:13	2012:13	12	,
ARGUMENT	2012:15	2012:15	12	"\t /Colors %u\n"
FIELD	2012:15	2012:15	13	"\t /Colors %u\n"
LEAF_NODE	2012:15	2012:15	14	"\t /Colors %u\n"
LEAF_NODE	2012:32	2012:32	12	,
ARGUMENT	2012:34	2012:34	12	samplesperpixel
FIELD	2012:34	2012:34	13	samplesperpixel
LEAF_NODE	2012:34	2012:34	14	samplesperpixel
LEAF_NODE	2012:49	2012:49	12	)
LEAF_NODE	2012:50	2012:50	10	;
EXPR_STATEMENT	2013:3	2014:21	9	fprintf ( fd , "\t /BitsPerComponent %u\n" , bitspersample ) ;
EXPR	2013:3	2013:3	10	fprintf ( fd , "\t /BitsPerComponent %u\n" , bitspersample )
FUNCTION_CALL	2013:3	2014:20	11	fprintf ( fd , "\t /BitsPerComponent %u\n" , bitspersample )
CALLEE	2013:3	2013:3	12	fprintf
LEAF_NODE	2013:3	2013:3	13	fprintf
LEAF_NODE	2013:10	2013:10	12	(
ARGUMENT	2013:11	2013:11	12	fd
FIELD	2013:11	2013:11	13	fd
LEAF_NODE	2013:11	2013:11	14	fd
LEAF_NODE	2013:13	2013:13	12	,
ARGUMENT	2013:15	2013:15	12	"\t /BitsPerComponent %u\n"
FIELD	2013:15	2013:15	13	"\t /BitsPerComponent %u\n"
LEAF_NODE	2013:15	2013:15	14	"\t /BitsPerComponent %u\n"
LEAF_NODE	2013:42	2013:42	12	,
ARGUMENT	2014:7	2014:7	12	bitspersample
FIELD	2014:7	2014:7	13	bitspersample
LEAF_NODE	2014:7	2014:7	14	bitspersample
LEAF_NODE	2014:20	2014:20	12	)
LEAF_NODE	2014:21	2014:21	10	;
EXPR_STATEMENT	2015:3	2015:20	9	fputs ( "\t>>" , fd ) ;
EXPR	2015:3	2015:3	10	fputs ( "\t>>" , fd )
FUNCTION_CALL	2015:3	2015:19	11	fputs ( "\t>>" , fd )
CALLEE	2015:3	2015:3	12	fputs
LEAF_NODE	2015:3	2015:3	13	fputs
LEAF_NODE	2015:8	2015:8	12	(
ARGUMENT	2015:9	2015:9	12	"\t>>"
FIELD	2015:9	2015:9	13	"\t>>"
LEAF_NODE	2015:9	2015:9	14	"\t>>"
LEAF_NODE	2015:15	2015:15	12	,
ARGUMENT	2015:17	2015:17	12	fd
FIELD	2015:17	2015:17	13	fd
LEAF_NODE	2015:17	2015:17	14	fd
LEAF_NODE	2015:19	2015:19	12	)
LEAF_NODE	2015:20	2015:20	10	;
LEAF_NODE	2016:2	2016:2	8	}
EXPR_STATEMENT	2017:2	2017:33	6	fputs ( " /LZWDecode filter" , fd ) ;
EXPR	2017:2	2017:2	7	fputs ( " /LZWDecode filter" , fd )
FUNCTION_CALL	2017:2	2017:32	8	fputs ( " /LZWDecode filter" , fd )
CALLEE	2017:2	2017:2	9	fputs
LEAF_NODE	2017:2	2017:2	10	fputs
LEAF_NODE	2017:7	2017:7	9	(
ARGUMENT	2017:8	2017:8	9	" /LZWDecode filter"
FIELD	2017:8	2017:8	10	" /LZWDecode filter"
LEAF_NODE	2017:8	2017:8	11	" /LZWDecode filter"
LEAF_NODE	2017:28	2017:28	9	,
ARGUMENT	2017:30	2017:30	9	fd
FIELD	2017:30	2017:30	10	fd
LEAF_NODE	2017:30	2017:30	11	fd
LEAF_NODE	2017:32	2017:32	9	)
LEAF_NODE	2017:33	2017:33	7	;
JUMP_STATEMENT	2018:2	2018:7	6	break DESTINATION ;
KEYWORD	2018:2	2018:2	7	break
LEAF_NODE	2018:2	2018:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2018:7	2018:7	7	;
LABEL	2019:1	2019:25	6	case COMPRESSION_DEFLATE :
LEAF_NODE	2019:1	2019:1	7	case
LEAF_NODE	2019:6	2019:6	7	COMPRESSION_DEFLATE
LEAF_NODE	2019:25	2019:25	7	:
LABEL	2020:1	2020:31	6	case COMPRESSION_ADOBE_DEFLATE :
LEAF_NODE	2020:1	2020:1	7	case
LEAF_NODE	2020:6	2020:6	7	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	2020:31	2020:31	7	:
SELECTION	2021:2	2021:16	6	
KEYWORD	2021:2	2021:2	7	if
LEAF_NODE	2021:2	2021:2	8	if
LEAF_NODE	2021:5	2021:5	7	(
CONDITION	2021:7	2021:7	7	level3
EXPR	2021:7	2021:7	8	level3
FIELD	2021:7	2021:7	9	level3
LEAF_NODE	2021:7	2021:7	10	level3
LEAF_NODE	2021:14	2021:14	7	)
STATEMENTS	2021:16	2035:2	7	
LEAF_NODE	2021:16	2021:16	8	{
STATEMENTS	2022:4	2034:4	8	
EXPR_STATEMENT	2022:4	2022:61	9	TIFFGetFieldDefaulted ( tif , TIFFTAG_PREDICTOR , & predictor ) ;
EXPR	2022:4	2022:4	10	TIFFGetFieldDefaulted ( tif , TIFFTAG_PREDICTOR , & predictor )
FUNCTION_CALL	2022:4	2022:60	11	TIFFGetFieldDefaulted ( tif , TIFFTAG_PREDICTOR , & predictor )
CALLEE	2022:4	2022:4	12	TIFFGetFieldDefaulted
LEAF_NODE	2022:4	2022:4	13	TIFFGetFieldDefaulted
LEAF_NODE	2022:25	2022:25	12	(
ARGUMENT	2022:26	2022:26	12	tif
FIELD	2022:26	2022:26	13	tif
LEAF_NODE	2022:26	2022:26	14	tif
LEAF_NODE	2022:29	2022:29	12	,
ARGUMENT	2022:31	2022:31	12	TIFFTAG_PREDICTOR
FIELD	2022:31	2022:31	13	TIFFTAG_PREDICTOR
LEAF_NODE	2022:31	2022:31	14	TIFFTAG_PREDICTOR
LEAF_NODE	2022:48	2022:48	12	,
ARGUMENT	2022:50	2022:50	12	& predictor
UNARY_EXPR	2022:50	2022:51	13	& predictor
UNARY_OPERATOR	2022:50	2022:50	14	&
LEAF_NODE	2022:50	2022:50	15	&
FIELD	2022:51	2022:51	14	predictor
LEAF_NODE	2022:51	2022:51	15	predictor
LEAF_NODE	2022:60	2022:60	12	)
LEAF_NODE	2022:61	2022:61	10	;
SELECTION	2023:4	2023:23	9	
KEYWORD	2023:4	2023:4	10	if
LEAF_NODE	2023:4	2023:4	11	if
LEAF_NODE	2023:7	2023:7	10	(
CONDITION	2023:8	2023:8	10	predictor > 1
EXPR	2023:8	2023:20	11	predictor > 1
FIELD	2023:8	2023:8	12	predictor
LEAF_NODE	2023:8	2023:8	13	predictor
REL_OPERATOR	2023:18	2023:18	12	>
LEAF_NODE	2023:18	2023:18	13	>
FIELD	2023:20	2023:20	12	1
LEAF_NODE	2023:20	2023:20	13	1
LEAF_NODE	2023:21	2023:21	10	)
STATEMENTS	2023:23	2033:4	10	
LEAF_NODE	2023:23	2023:23	11	{
STATEMENTS	2024:4	2032:4	11	
EXPR_STATEMENT	2024:4	2024:49	12	fprintf ( fd , "\t %% PostScript Level 3 only." ) ;
EXPR	2024:4	2024:4	13	fprintf ( fd , "\t %% PostScript Level 3 only." )
FUNCTION_CALL	2024:4	2024:48	14	fprintf ( fd , "\t %% PostScript Level 3 only." )
CALLEE	2024:4	2024:4	15	fprintf
LEAF_NODE	2024:4	2024:4	16	fprintf
LEAF_NODE	2024:11	2024:11	15	(
ARGUMENT	2024:12	2024:12	15	fd
FIELD	2024:12	2024:12	16	fd
LEAF_NODE	2024:12	2024:12	17	fd
LEAF_NODE	2024:14	2024:14	15	,
ARGUMENT	2024:16	2024:16	15	"\t %% PostScript Level 3 only."
FIELD	2024:16	2024:16	16	"\t %% PostScript Level 3 only."
LEAF_NODE	2024:16	2024:16	17	"\t %% PostScript Level 3 only."
LEAF_NODE	2024:48	2024:48	15	)
LEAF_NODE	2024:49	2024:49	13	;
EXPR_STATEMENT	2025:4	2025:25	12	fputs ( "\n\t<<\n" , fd ) ;
EXPR	2025:4	2025:4	13	fputs ( "\n\t<<\n" , fd )
FUNCTION_CALL	2025:4	2025:24	14	fputs ( "\n\t<<\n" , fd )
CALLEE	2025:4	2025:4	15	fputs
LEAF_NODE	2025:4	2025:4	16	fputs
LEAF_NODE	2025:9	2025:9	15	(
ARGUMENT	2025:10	2025:10	15	"\n\t<<\n"
FIELD	2025:10	2025:10	16	"\n\t<<\n"
LEAF_NODE	2025:10	2025:10	17	"\n\t<<\n"
LEAF_NODE	2025:20	2025:20	15	,
ARGUMENT	2025:22	2025:22	15	fd
FIELD	2025:22	2025:22	16	fd
LEAF_NODE	2025:22	2025:22	17	fd
LEAF_NODE	2025:24	2025:24	15	)
LEAF_NODE	2025:25	2025:25	13	;
EXPR_STATEMENT	2026:4	2026:48	12	fprintf ( fd , "\t /Predictor %u\n" , predictor ) ;
EXPR	2026:4	2026:4	13	fprintf ( fd , "\t /Predictor %u\n" , predictor )
FUNCTION_CALL	2026:4	2026:47	14	fprintf ( fd , "\t /Predictor %u\n" , predictor )
CALLEE	2026:4	2026:4	15	fprintf
LEAF_NODE	2026:4	2026:4	16	fprintf
LEAF_NODE	2026:11	2026:11	15	(
ARGUMENT	2026:12	2026:12	15	fd
FIELD	2026:12	2026:12	16	fd
LEAF_NODE	2026:12	2026:12	17	fd
LEAF_NODE	2026:14	2026:14	15	,
ARGUMENT	2026:16	2026:16	15	"\t /Predictor %u\n"
FIELD	2026:16	2026:16	16	"\t /Predictor %u\n"
LEAF_NODE	2026:16	2026:16	17	"\t /Predictor %u\n"
LEAF_NODE	2026:36	2026:36	15	,
ARGUMENT	2026:38	2026:38	15	predictor
FIELD	2026:38	2026:38	16	predictor
LEAF_NODE	2026:38	2026:38	17	predictor
LEAF_NODE	2026:47	2026:47	15	)
LEAF_NODE	2026:48	2026:48	13	;
EXPR_STATEMENT	2027:4	2028:32	12	fprintf ( fd , "\t /Columns %lu\n" , ( unsigned long ) tile_width ) ;
EXPR	2027:4	2027:4	13	fprintf ( fd , "\t /Columns %lu\n" , ( unsigned long ) tile_width )
FUNCTION_CALL	2027:4	2028:31	14	fprintf ( fd , "\t /Columns %lu\n" , ( unsigned long ) tile_width )
CALLEE	2027:4	2027:4	15	fprintf
LEAF_NODE	2027:4	2027:4	16	fprintf
LEAF_NODE	2027:11	2027:11	15	(
ARGUMENT	2027:12	2027:12	15	fd
FIELD	2027:12	2027:12	16	fd
LEAF_NODE	2027:12	2027:12	17	fd
LEAF_NODE	2027:14	2027:14	15	,
ARGUMENT	2027:16	2027:16	15	"\t /Columns %lu\n"
FIELD	2027:16	2027:16	16	"\t /Columns %lu\n"
LEAF_NODE	2027:16	2027:16	17	"\t /Columns %lu\n"
LEAF_NODE	2027:35	2027:35	15	,
ARGUMENT	2028:5	2028:21	15	( unsigned long ) tile_width
LEAF_NODE	2028:5	2028:5	16	(
TYPE_NAME	2028:6	2028:15	16	unsigned long
LEAF_NODE	2028:6	2028:6	17	unsigned
LEAF_NODE	2028:15	2028:15	17	long
LEAF_NODE	2028:19	2028:19	16	)
FIELD	2028:21	2028:21	16	tile_width
LEAF_NODE	2028:21	2028:21	17	tile_width
LEAF_NODE	2028:31	2028:31	15	)
LEAF_NODE	2028:32	2028:32	13	;
EXPR_STATEMENT	2029:4	2029:51	12	fprintf ( fd , "\t /Colors %u\n" , samplesperpixel ) ;
EXPR	2029:4	2029:4	13	fprintf ( fd , "\t /Colors %u\n" , samplesperpixel )
FUNCTION_CALL	2029:4	2029:50	14	fprintf ( fd , "\t /Colors %u\n" , samplesperpixel )
CALLEE	2029:4	2029:4	15	fprintf
LEAF_NODE	2029:4	2029:4	16	fprintf
LEAF_NODE	2029:11	2029:11	15	(
ARGUMENT	2029:12	2029:12	15	fd
FIELD	2029:12	2029:12	16	fd
LEAF_NODE	2029:12	2029:12	17	fd
LEAF_NODE	2029:14	2029:14	15	,
ARGUMENT	2029:16	2029:16	15	"\t /Colors %u\n"
FIELD	2029:16	2029:16	16	"\t /Colors %u\n"
LEAF_NODE	2029:16	2029:16	17	"\t /Colors %u\n"
LEAF_NODE	2029:33	2029:33	15	,
ARGUMENT	2029:35	2029:35	15	samplesperpixel
FIELD	2029:35	2029:35	16	samplesperpixel
LEAF_NODE	2029:35	2029:35	17	samplesperpixel
LEAF_NODE	2029:50	2029:50	15	)
LEAF_NODE	2029:51	2029:51	13	;
EXPR_STATEMENT	2030:5	2031:19	12	fprintf ( fd , "\t /BitsPerComponent %u\n" , bitspersample ) ;
EXPR	2030:5	2030:5	13	fprintf ( fd , "\t /BitsPerComponent %u\n" , bitspersample )
FUNCTION_CALL	2030:5	2031:18	14	fprintf ( fd , "\t /BitsPerComponent %u\n" , bitspersample )
CALLEE	2030:5	2030:5	15	fprintf
LEAF_NODE	2030:5	2030:5	16	fprintf
LEAF_NODE	2030:12	2030:12	15	(
ARGUMENT	2030:13	2030:13	15	fd
FIELD	2030:13	2030:13	16	fd
LEAF_NODE	2030:13	2030:13	17	fd
LEAF_NODE	2030:15	2030:15	15	,
ARGUMENT	2030:17	2030:17	15	"\t /BitsPerComponent %u\n"
FIELD	2030:17	2030:17	16	"\t /BitsPerComponent %u\n"
LEAF_NODE	2030:17	2030:17	17	"\t /BitsPerComponent %u\n"
LEAF_NODE	2030:44	2030:44	15	,
ARGUMENT	2031:5	2031:5	15	bitspersample
FIELD	2031:5	2031:5	16	bitspersample
LEAF_NODE	2031:5	2031:5	17	bitspersample
LEAF_NODE	2031:18	2031:18	15	)
LEAF_NODE	2031:19	2031:19	13	;
EXPR_STATEMENT	2032:4	2032:21	12	fputs ( "\t>>" , fd ) ;
EXPR	2032:4	2032:4	13	fputs ( "\t>>" , fd )
FUNCTION_CALL	2032:4	2032:20	14	fputs ( "\t>>" , fd )
CALLEE	2032:4	2032:4	15	fputs
LEAF_NODE	2032:4	2032:4	16	fputs
LEAF_NODE	2032:9	2032:9	15	(
ARGUMENT	2032:10	2032:10	15	"\t>>"
FIELD	2032:10	2032:10	16	"\t>>"
LEAF_NODE	2032:10	2032:10	17	"\t>>"
LEAF_NODE	2032:16	2032:16	15	,
ARGUMENT	2032:18	2032:18	15	fd
FIELD	2032:18	2032:18	16	fd
LEAF_NODE	2032:18	2032:18	17	fd
LEAF_NODE	2032:20	2032:20	15	)
LEAF_NODE	2032:21	2032:21	13	;
LEAF_NODE	2033:4	2033:4	11	}
EXPR_STATEMENT	2034:4	2034:37	9	fputs ( " /FlateDecode filter" , fd ) ;
EXPR	2034:4	2034:4	10	fputs ( " /FlateDecode filter" , fd )
FUNCTION_CALL	2034:4	2034:36	11	fputs ( " /FlateDecode filter" , fd )
CALLEE	2034:4	2034:4	12	fputs
LEAF_NODE	2034:4	2034:4	13	fputs
LEAF_NODE	2034:9	2034:9	12	(
ARGUMENT	2034:10	2034:10	12	" /FlateDecode filter"
FIELD	2034:10	2034:10	13	" /FlateDecode filter"
LEAF_NODE	2034:10	2034:10	14	" /FlateDecode filter"
LEAF_NODE	2034:32	2034:32	12	,
ARGUMENT	2034:34	2034:34	12	fd
FIELD	2034:34	2034:34	13	fd
LEAF_NODE	2034:34	2034:34	14	fd
LEAF_NODE	2034:36	2034:36	12	)
LEAF_NODE	2034:37	2034:37	10	;
LEAF_NODE	2035:2	2035:2	8	}
SELECTION	2035:4	2035:9	6	
KEYWORD	2035:4	2035:4	7	else
LEAF_NODE	2035:4	2035:4	8	else
STATEMENTS	2035:9	2037:2	7	
LEAF_NODE	2035:9	2035:9	8	{
STATEMENTS	2036:3	2036:3	8	
EXPR_STATEMENT	2036:3	2036:23	9	use_rawdata = FALSE ;
EXPR	2036:3	2036:3	10	use_rawdata = FALSE
ASSIGN	2036:3	2036:17	11	use_rawdata = FALSE
LVAL	2036:3	2036:3	12	use_rawdata
FIELD	2036:3	2036:3	13	use_rawdata
LEAF_NODE	2036:3	2036:3	14	use_rawdata
ASSIGN_OP	2036:15	2036:15	12	=
LEAF_NODE	2036:15	2036:15	13	=
RVAL	2036:17	2036:17	12	FALSE
FIELD	2036:17	2036:17	13	FALSE
LEAF_NODE	2036:17	2036:17	14	FALSE
LEAF_NODE	2036:23	2036:23	10	;
LEAF_NODE	2037:2	2037:2	8	}
JUMP_STATEMENT	2038:2	2038:7	6	break DESTINATION ;
KEYWORD	2038:2	2038:2	7	break
LEAF_NODE	2038:2	2038:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2038:7	2038:7	7	;
LABEL	2039:1	2039:26	6	case COMPRESSION_PACKBITS :
LEAF_NODE	2039:1	2039:1	7	case
LEAF_NODE	2039:6	2039:6	7	COMPRESSION_PACKBITS
LEAF_NODE	2039:26	2039:26	7	:
EXPR_STATEMENT	2040:2	2040:39	6	fputs ( " /RunLengthDecode filter" , fd ) ;
EXPR	2040:2	2040:2	7	fputs ( " /RunLengthDecode filter" , fd )
FUNCTION_CALL	2040:2	2040:38	8	fputs ( " /RunLengthDecode filter" , fd )
CALLEE	2040:2	2040:2	9	fputs
LEAF_NODE	2040:2	2040:2	10	fputs
LEAF_NODE	2040:7	2040:7	9	(
ARGUMENT	2040:8	2040:8	9	" /RunLengthDecode filter"
FIELD	2040:8	2040:8	10	" /RunLengthDecode filter"
LEAF_NODE	2040:8	2040:8	11	" /RunLengthDecode filter"
LEAF_NODE	2040:34	2040:34	9	,
ARGUMENT	2040:36	2040:36	9	fd
FIELD	2040:36	2040:36	10	fd
LEAF_NODE	2040:36	2040:36	11	fd
LEAF_NODE	2040:38	2040:38	9	)
LEAF_NODE	2040:39	2040:39	7	;
EXPR_STATEMENT	2041:2	2041:20	6	use_rawdata = TRUE ;
EXPR	2041:2	2041:2	7	use_rawdata = TRUE
ASSIGN	2041:2	2041:16	8	use_rawdata = TRUE
LVAL	2041:2	2041:2	9	use_rawdata
FIELD	2041:2	2041:2	10	use_rawdata
LEAF_NODE	2041:2	2041:2	11	use_rawdata
ASSIGN_OP	2041:14	2041:14	9	=
LEAF_NODE	2041:14	2041:14	10	=
RVAL	2041:16	2041:16	9	TRUE
FIELD	2041:16	2041:16	10	TRUE
LEAF_NODE	2041:16	2041:16	11	TRUE
LEAF_NODE	2041:20	2041:20	7	;
JUMP_STATEMENT	2042:5	2042:10	6	break DESTINATION ;
KEYWORD	2042:5	2042:5	7	break
LEAF_NODE	2042:5	2042:5	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2042:10	2042:10	7	;
LABEL	2043:1	2043:23	6	case COMPRESSION_OJPEG :
LEAF_NODE	2043:1	2043:1	7	case
LEAF_NODE	2043:6	2043:6	7	COMPRESSION_OJPEG
LEAF_NODE	2043:23	2043:23	7	:
LABEL	2044:1	2044:22	6	case COMPRESSION_JPEG :
LEAF_NODE	2044:1	2044:1	7	case
LEAF_NODE	2044:6	2044:6	7	COMPRESSION_JPEG
LEAF_NODE	2044:22	2044:22	7	:
EXPR_STATEMENT	2049:2	2049:33	6	fputs ( " /DCTDecode filter" , fd ) ;
EXPR	2049:2	2049:2	7	fputs ( " /DCTDecode filter" , fd )
FUNCTION_CALL	2049:2	2049:32	8	fputs ( " /DCTDecode filter" , fd )
CALLEE	2049:2	2049:2	9	fputs
LEAF_NODE	2049:2	2049:2	10	fputs
LEAF_NODE	2049:7	2049:7	9	(
ARGUMENT	2049:8	2049:8	9	" /DCTDecode filter"
FIELD	2049:8	2049:8	10	" /DCTDecode filter"
LEAF_NODE	2049:8	2049:8	11	" /DCTDecode filter"
LEAF_NODE	2049:28	2049:28	9	,
ARGUMENT	2049:30	2049:30	9	fd
FIELD	2049:30	2049:30	10	fd
LEAF_NODE	2049:30	2049:30	11	fd
LEAF_NODE	2049:32	2049:32	9	)
LEAF_NODE	2049:33	2049:33	7	;
EXPR_STATEMENT	2050:2	2050:20	6	use_rawdata = TRUE ;
EXPR	2050:2	2050:2	7	use_rawdata = TRUE
ASSIGN	2050:2	2050:16	8	use_rawdata = TRUE
LVAL	2050:2	2050:2	9	use_rawdata
FIELD	2050:2	2050:2	10	use_rawdata
LEAF_NODE	2050:2	2050:2	11	use_rawdata
ASSIGN_OP	2050:14	2050:14	9	=
LEAF_NODE	2050:14	2050:14	10	=
RVAL	2050:16	2050:16	9	TRUE
FIELD	2050:16	2050:16	10	TRUE
LEAF_NODE	2050:16	2050:16	11	TRUE
LEAF_NODE	2050:20	2050:20	7	;
EXPR_STATEMENT	2052:2	2052:21	6	use_rawdata = FALSE ;
EXPR	2052:2	2052:2	7	use_rawdata = FALSE
ASSIGN	2052:2	2052:16	8	use_rawdata = FALSE
LVAL	2052:2	2052:2	9	use_rawdata
FIELD	2052:2	2052:2	10	use_rawdata
LEAF_NODE	2052:2	2052:2	11	use_rawdata
ASSIGN_OP	2052:14	2052:14	9	=
LEAF_NODE	2052:14	2052:14	10	=
RVAL	2052:16	2052:16	9	FALSE
FIELD	2052:16	2052:16	10	FALSE
LEAF_NODE	2052:16	2052:16	11	FALSE
LEAF_NODE	2052:21	2052:21	7	;
JUMP_STATEMENT	2054:2	2054:7	6	break DESTINATION ;
KEYWORD	2054:2	2054:2	7	break
LEAF_NODE	2054:2	2054:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2054:7	2054:7	7	;
LABEL	2055:1	2055:22	6	case COMPRESSION_NEXT :
LEAF_NODE	2055:1	2055:1	7	case
LEAF_NODE	2055:6	2055:6	7	COMPRESSION_NEXT
LEAF_NODE	2055:22	2055:22	7	:
LABEL	2056:1	2056:29	6	case COMPRESSION_THUNDERSCAN :
LEAF_NODE	2056:1	2056:1	7	case
LEAF_NODE	2056:6	2056:6	7	COMPRESSION_THUNDERSCAN
LEAF_NODE	2056:29	2056:29	7	:
LABEL	2057:1	2057:27	6	case COMPRESSION_PIXARFILM :
LEAF_NODE	2057:1	2057:1	7	case
LEAF_NODE	2057:6	2057:6	7	COMPRESSION_PIXARFILM
LEAF_NODE	2057:27	2057:27	7	:
LABEL	2058:1	2058:22	6	case COMPRESSION_JBIG :
LEAF_NODE	2058:1	2058:1	7	case
LEAF_NODE	2058:6	2058:6	7	COMPRESSION_JBIG
LEAF_NODE	2058:22	2058:22	7	:
EXPR_STATEMENT	2059:2	2059:21	6	use_rawdata = FALSE ;
EXPR	2059:2	2059:2	7	use_rawdata = FALSE
ASSIGN	2059:2	2059:16	8	use_rawdata = FALSE
LVAL	2059:2	2059:2	9	use_rawdata
FIELD	2059:2	2059:2	10	use_rawdata
LEAF_NODE	2059:2	2059:2	11	use_rawdata
ASSIGN_OP	2059:14	2059:14	9	=
LEAF_NODE	2059:14	2059:14	10	=
RVAL	2059:16	2059:16	9	FALSE
FIELD	2059:16	2059:16	10	FALSE
LEAF_NODE	2059:16	2059:16	11	FALSE
LEAF_NODE	2059:21	2059:21	7	;
JUMP_STATEMENT	2060:2	2060:7	6	break DESTINATION ;
KEYWORD	2060:2	2060:2	7	break
LEAF_NODE	2060:2	2060:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2060:7	2060:7	7	;
LABEL	2061:1	2061:24	6	case COMPRESSION_SGILOG :
LEAF_NODE	2061:1	2061:1	7	case
LEAF_NODE	2061:6	2061:6	7	COMPRESSION_SGILOG
LEAF_NODE	2061:24	2061:24	7	:
LABEL	2062:1	2062:26	6	case COMPRESSION_SGILOG24 :
LEAF_NODE	2062:1	2062:1	7	case
LEAF_NODE	2062:6	2062:6	7	COMPRESSION_SGILOG24
LEAF_NODE	2062:26	2062:26	7	:
EXPR_STATEMENT	2063:2	2063:21	6	use_rawdata = FALSE ;
EXPR	2063:2	2063:2	7	use_rawdata = FALSE
ASSIGN	2063:2	2063:16	8	use_rawdata = FALSE
LVAL	2063:2	2063:2	9	use_rawdata
FIELD	2063:2	2063:2	10	use_rawdata
LEAF_NODE	2063:2	2063:2	11	use_rawdata
ASSIGN_OP	2063:14	2063:14	9	=
LEAF_NODE	2063:14	2063:14	10	=
RVAL	2063:16	2063:16	9	FALSE
FIELD	2063:16	2063:16	10	FALSE
LEAF_NODE	2063:16	2063:16	11	FALSE
LEAF_NODE	2063:21	2063:21	7	;
JUMP_STATEMENT	2064:2	2064:7	6	break DESTINATION ;
KEYWORD	2064:2	2064:2	7	break
LEAF_NODE	2064:2	2064:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2064:7	2064:7	7	;
LABEL	2065:1	2065:8	6	default :
LEAF_NODE	2065:1	2065:1	7	default
LEAF_NODE	2065:8	2065:8	7	:
EXPR_STATEMENT	2069:2	2069:21	6	use_rawdata = FALSE ;
EXPR	2069:2	2069:2	7	use_rawdata = FALSE
ASSIGN	2069:2	2069:16	8	use_rawdata = FALSE
LVAL	2069:2	2069:2	9	use_rawdata
FIELD	2069:2	2069:2	10	use_rawdata
LEAF_NODE	2069:2	2069:2	11	use_rawdata
ASSIGN_OP	2069:14	2069:14	9	=
LEAF_NODE	2069:14	2069:14	10	=
RVAL	2069:16	2069:16	9	FALSE
FIELD	2069:16	2069:16	10	FALSE
LEAF_NODE	2069:16	2069:16	11	FALSE
LEAF_NODE	2069:21	2069:21	7	;
JUMP_STATEMENT	2070:2	2070:7	6	break DESTINATION ;
KEYWORD	2070:2	2070:2	7	break
LEAF_NODE	2070:2	2070:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2070:7	2070:7	7	;
LEAF_NODE	2071:1	2071:1	5	}
SELECTION	2072:1	2073:26	3	
KEYWORD	2072:1	2072:1	4	if
LEAF_NODE	2072:1	2072:1	5	if
LEAF_NODE	2072:4	2072:4	4	(
CONDITION	2072:5	2072:5	4	planarconfiguration == PLANARCONFIG_SEPARATE && samplesperpixel > 1
EXPR	2072:5	2072:5	5	planarconfiguration == PLANARCONFIG_SEPARATE && samplesperpixel > 1
AND	2072:5	2073:5	6	planarconfiguration == PLANARCONFIG_SEPARATE && samplesperpixel > 1
EXPR	2072:5	2072:28	7	planarconfiguration == PLANARCONFIG_SEPARATE
FIELD	2072:5	2072:5	8	planarconfiguration
LEAF_NODE	2072:5	2072:5	9	planarconfiguration
EQ_OPERATOR	2072:25	2072:25	8	==
LEAF_NODE	2072:25	2072:25	9	==
FIELD	2072:28	2072:28	8	PLANARCONFIG_SEPARATE
LEAF_NODE	2072:28	2072:28	9	PLANARCONFIG_SEPARATE
LEAF_NODE	2072:50	2072:50	7	&&
EXPR	2073:5	2073:23	7	samplesperpixel > 1
FIELD	2073:5	2073:5	8	samplesperpixel
LEAF_NODE	2073:5	2073:5	9	samplesperpixel
REL_OPERATOR	2073:21	2073:21	8	>
LEAF_NODE	2073:21	2073:21	9	>
FIELD	2073:23	2073:23	8	1
LEAF_NODE	2073:23	2073:23	9	1
LEAF_NODE	2073:24	2073:24	4	)
STATEMENTS	2073:26	2082:1	4	
LEAF_NODE	2073:26	2073:26	5	{
STATEMENTS	2074:2	2081:2	5	
SIMPLE_DECL	2074:2	2074:10	6	uint16 i ;
VAR_DECL	2074:2	2074:9	7	uint16 i
TYPE	2074:2	2074:2	8	uint16
TYPE_NAME	2074:2	2074:2	9	uint16
LEAF_NODE	2074:2	2074:2	10	uint16
NAME	2074:9	2074:9	8	i
LEAF_NODE	2074:9	2074:9	9	i
LEAF_NODE	2074:10	2074:10	7	;
ITERATION	2079:2	2080:3	6	
KEYWORD	2079:2	2079:2	7	for
LEAF_NODE	2079:2	2079:2	8	for
LEAF_NODE	2079:6	2079:6	7	(
FOR_INIT	2079:7	2079:12	7	i = 1 ;
EXPR	2079:7	2079:7	8	i = 1
ASSIGN	2079:7	2079:11	9	i = 1
LVAL	2079:7	2079:7	10	i
FIELD	2079:7	2079:7	11	i
LEAF_NODE	2079:7	2079:7	12	i
ASSIGN_OP	2079:9	2079:9	10	=
LEAF_NODE	2079:9	2079:9	11	=
RVAL	2079:11	2079:11	10	1
FIELD	2079:11	2079:11	11	1
LEAF_NODE	2079:11	2079:11	12	1
LEAF_NODE	2079:12	2079:12	8	;
CONDITION	2079:14	2079:14	7	i < samplesperpixel
EXPR	2079:14	2079:18	8	i < samplesperpixel
FIELD	2079:14	2079:14	9	i
LEAF_NODE	2079:14	2079:14	10	i
REL_OPERATOR	2079:16	2079:16	9	<
LEAF_NODE	2079:16	2079:16	10	<
FIELD	2079:18	2079:18	9	samplesperpixel
LEAF_NODE	2079:18	2079:18	10	samplesperpixel
LEAF_NODE	2079:33	2079:33	7	;
FOR_EXPR	2079:35	2079:35	7	i ++
EXPR	2079:35	2079:35	8	i ++
FIELD	2079:35	2079:36	9	i ++
LEAF_NODE	2079:35	2079:35	10	i
LEAF_NODE	2079:36	2079:36	10	++
LEAF_NODE	2079:38	2079:38	7	)
STATEMENTS	2080:3	2080:3	7	
EXPR_STATEMENT	2080:3	2080:20	8	fputs ( " dup" , fd ) ;
EXPR	2080:3	2080:3	9	fputs ( " dup" , fd )
FUNCTION_CALL	2080:3	2080:19	10	fputs ( " dup" , fd )
CALLEE	2080:3	2080:3	11	fputs
LEAF_NODE	2080:3	2080:3	12	fputs
LEAF_NODE	2080:8	2080:8	11	(
ARGUMENT	2080:9	2080:9	11	" dup"
FIELD	2080:9	2080:9	12	" dup"
LEAF_NODE	2080:9	2080:9	13	" dup"
LEAF_NODE	2080:15	2080:15	11	,
ARGUMENT	2080:17	2080:17	11	fd
FIELD	2080:17	2080:17	12	fd
LEAF_NODE	2080:17	2080:17	13	fd
LEAF_NODE	2080:19	2080:19	11	)
LEAF_NODE	2080:20	2080:20	9	;
EXPR_STATEMENT	2081:2	2081:17	6	fputs ( " ]" , fd ) ;
EXPR	2081:2	2081:2	7	fputs ( " ]" , fd )
FUNCTION_CALL	2081:2	2081:16	8	fputs ( " ]" , fd )
CALLEE	2081:2	2081:2	9	fputs
LEAF_NODE	2081:2	2081:2	10	fputs
LEAF_NODE	2081:7	2081:7	9	(
ARGUMENT	2081:8	2081:8	9	" ]"
FIELD	2081:8	2081:8	10	" ]"
LEAF_NODE	2081:8	2081:8	11	" ]"
LEAF_NODE	2081:12	2081:12	9	,
ARGUMENT	2081:14	2081:14	9	fd
FIELD	2081:14	2081:14	10	fd
LEAF_NODE	2081:14	2081:14	11	fd
LEAF_NODE	2081:16	2081:16	9	)
LEAF_NODE	2081:17	2081:17	7	;
LEAF_NODE	2082:1	2082:1	5	}
EXPR_STATEMENT	2084:1	2084:37	3	fprintf ( fd , "\n >> %s\n" , imageOp ) ;
EXPR	2084:1	2084:1	4	fprintf ( fd , "\n >> %s\n" , imageOp )
FUNCTION_CALL	2084:1	2084:36	5	fprintf ( fd , "\n >> %s\n" , imageOp )
CALLEE	2084:1	2084:1	6	fprintf
LEAF_NODE	2084:1	2084:1	7	fprintf
LEAF_NODE	2084:8	2084:8	6	(
ARGUMENT	2084:10	2084:10	6	fd
FIELD	2084:10	2084:10	7	fd
LEAF_NODE	2084:10	2084:10	8	fd
LEAF_NODE	2084:12	2084:12	6	,
ARGUMENT	2084:14	2084:14	6	"\n >> %s\n"
FIELD	2084:14	2084:14	7	"\n >> %s\n"
LEAF_NODE	2084:14	2084:14	8	"\n >> %s\n"
LEAF_NODE	2084:26	2084:26	6	,
ARGUMENT	2084:28	2084:28	6	imageOp
FIELD	2084:28	2084:28	7	imageOp
LEAF_NODE	2084:28	2084:28	8	imageOp
LEAF_NODE	2084:36	2084:36	6	)
LEAF_NODE	2084:37	2084:37	4	;
SELECTION	2085:1	2086:2	3	
KEYWORD	2085:1	2085:1	4	if
LEAF_NODE	2085:1	2085:1	5	if
LEAF_NODE	2085:4	2085:4	4	(
CONDITION	2085:5	2085:5	4	ascii85
EXPR	2085:5	2085:5	5	ascii85
FIELD	2085:5	2085:5	6	ascii85
LEAF_NODE	2085:5	2085:5	7	ascii85
LEAF_NODE	2085:12	2085:12	4	)
STATEMENTS	2086:2	2086:2	4	
EXPR_STATEMENT	2086:2	2086:61	5	fputs ( " im_stream status { im_stream flushfile } if\n" , fd ) ;
EXPR	2086:2	2086:2	6	fputs ( " im_stream status { im_stream flushfile } if\n" , fd )
FUNCTION_CALL	2086:2	2086:60	7	fputs ( " im_stream status { im_stream flushfile } if\n" , fd )
CALLEE	2086:2	2086:2	8	fputs
LEAF_NODE	2086:2	2086:2	9	fputs
LEAF_NODE	2086:7	2086:7	8	(
ARGUMENT	2086:8	2086:8	8	" im_stream status { im_stream flushfile } if\n"
FIELD	2086:8	2086:8	9	" im_stream status { im_stream flushfile } if\n"
LEAF_NODE	2086:8	2086:8	10	" im_stream status { im_stream flushfile } if\n"
LEAF_NODE	2086:56	2086:56	8	,
ARGUMENT	2086:58	2086:58	8	fd
FIELD	2086:58	2086:58	9	fd
LEAF_NODE	2086:58	2086:58	10	fd
LEAF_NODE	2086:60	2086:60	8	)
LEAF_NODE	2086:61	2086:61	6	;
SELECTION	2087:1	2087:23	3	
KEYWORD	2087:1	2087:1	4	if
LEAF_NODE	2087:1	2087:1	5	if
LEAF_NODE	2087:4	2087:4	4	(
CONDITION	2087:5	2087:5	4	repeat_count > 1
EXPR	2087:5	2087:20	5	repeat_count > 1
FIELD	2087:5	2087:5	6	repeat_count
LEAF_NODE	2087:5	2087:5	7	repeat_count
REL_OPERATOR	2087:18	2087:18	6	>
LEAF_NODE	2087:18	2087:18	7	>
FIELD	2087:20	2087:20	6	1
LEAF_NODE	2087:20	2087:20	7	1
LEAF_NODE	2087:21	2087:21	4	)
STATEMENTS	2087:23	2115:1	4	
LEAF_NODE	2087:23	2087:23	5	{
STATEMENTS	2088:2	2114:2	5	
SELECTION	2088:2	2088:22	6	
KEYWORD	2088:2	2088:2	7	if
LEAF_NODE	2088:2	2088:2	8	if
LEAF_NODE	2088:5	2088:5	7	(
CONDITION	2088:6	2088:6	7	tile_width < w
EXPR	2088:6	2088:19	8	tile_width < w
FIELD	2088:6	2088:6	9	tile_width
LEAF_NODE	2088:6	2088:6	10	tile_width
REL_OPERATOR	2088:17	2088:17	9	<
LEAF_NODE	2088:17	2088:17	10	<
FIELD	2088:19	2088:19	9	w
LEAF_NODE	2088:19	2088:19	10	w
LEAF_NODE	2088:20	2088:20	7	)
STATEMENTS	2088:22	2099:2	7	
LEAF_NODE	2088:22	2088:22	8	{
STATEMENTS	2089:3	2091:3	8	
EXPR_STATEMENT	2089:3	2090:34	9	fprintf ( fd , " /im_x im_x %lu add def\n" , ( unsigned long ) tile_width ) ;
EXPR	2089:3	2089:3	10	fprintf ( fd , " /im_x im_x %lu add def\n" , ( unsigned long ) tile_width )
FUNCTION_CALL	2089:3	2090:33	11	fprintf ( fd , " /im_x im_x %lu add def\n" , ( unsigned long ) tile_width )
CALLEE	2089:3	2089:3	12	fprintf
LEAF_NODE	2089:3	2089:3	13	fprintf
LEAF_NODE	2089:10	2089:10	12	(
ARGUMENT	2089:11	2089:11	12	fd
FIELD	2089:11	2089:11	13	fd
LEAF_NODE	2089:11	2089:11	14	fd
LEAF_NODE	2089:13	2089:13	12	,
ARGUMENT	2089:15	2089:15	12	" /im_x im_x %lu add def\n"
FIELD	2089:15	2089:15	13	" /im_x im_x %lu add def\n"
LEAF_NODE	2089:15	2089:15	14	" /im_x im_x %lu add def\n"
LEAF_NODE	2089:42	2089:42	12	,
ARGUMENT	2090:7	2090:23	12	( unsigned long ) tile_width
LEAF_NODE	2090:7	2090:7	13	(
TYPE_NAME	2090:8	2090:17	13	unsigned long
LEAF_NODE	2090:8	2090:8	14	unsigned
LEAF_NODE	2090:17	2090:17	14	long
LEAF_NODE	2090:21	2090:21	13	)
FIELD	2090:23	2090:23	13	tile_width
LEAF_NODE	2090:23	2090:23	14	tile_width
LEAF_NODE	2090:33	2090:33	12	)
LEAF_NODE	2090:34	2090:34	10	;
SELECTION	2091:3	2091:24	9	
KEYWORD	2091:3	2091:3	10	if
LEAF_NODE	2091:3	2091:3	11	if
LEAF_NODE	2091:6	2091:6	10	(
CONDITION	2091:7	2091:7	10	tile_height < h
EXPR	2091:7	2091:21	11	tile_height < h
FIELD	2091:7	2091:7	12	tile_height
LEAF_NODE	2091:7	2091:7	13	tile_height
REL_OPERATOR	2091:19	2091:19	12	<
LEAF_NODE	2091:19	2091:19	13	<
FIELD	2091:21	2091:21	12	h
LEAF_NODE	2091:21	2091:21	13	h
LEAF_NODE	2091:22	2091:22	10	)
STATEMENTS	2091:24	2098:3	10	
LEAF_NODE	2091:24	2091:24	11	{
STATEMENTS	2092:4	2097:4	11	
EXPR_STATEMENT	2092:4	2093:26	12	fprintf ( fd , " im_x %lu ge {\n" , ( unsigned long ) w ) ;
EXPR	2092:4	2092:4	13	fprintf ( fd , " im_x %lu ge {\n" , ( unsigned long ) w )
FUNCTION_CALL	2092:4	2093:25	14	fprintf ( fd , " im_x %lu ge {\n" , ( unsigned long ) w )
CALLEE	2092:4	2092:4	15	fprintf
LEAF_NODE	2092:4	2092:4	16	fprintf
LEAF_NODE	2092:11	2092:11	15	(
ARGUMENT	2092:12	2092:12	15	fd
FIELD	2092:12	2092:12	16	fd
LEAF_NODE	2092:12	2092:12	17	fd
LEAF_NODE	2092:14	2092:14	15	,
ARGUMENT	2092:16	2092:16	15	" im_x %lu ge {\n"
FIELD	2092:16	2092:16	16	" im_x %lu ge {\n"
LEAF_NODE	2092:16	2092:16	17	" im_x %lu ge {\n"
LEAF_NODE	2092:34	2092:34	15	,
ARGUMENT	2093:8	2093:24	15	( unsigned long ) w
LEAF_NODE	2093:8	2093:8	16	(
TYPE_NAME	2093:9	2093:18	16	unsigned long
LEAF_NODE	2093:9	2093:9	17	unsigned
LEAF_NODE	2093:18	2093:18	17	long
LEAF_NODE	2093:22	2093:22	16	)
FIELD	2093:24	2093:24	16	w
LEAF_NODE	2093:24	2093:24	17	w
LEAF_NODE	2093:25	2093:25	15	)
LEAF_NODE	2093:26	2093:26	13	;
EXPR_STATEMENT	2094:4	2094:32	12	fputs ( "  /im_x 0 def\n" , fd ) ;
EXPR	2094:4	2094:4	13	fputs ( "  /im_x 0 def\n" , fd )
FUNCTION_CALL	2094:4	2094:31	14	fputs ( "  /im_x 0 def\n" , fd )
CALLEE	2094:4	2094:4	15	fputs
LEAF_NODE	2094:4	2094:4	16	fputs
LEAF_NODE	2094:9	2094:9	15	(
ARGUMENT	2094:10	2094:10	15	"  /im_x 0 def\n"
FIELD	2094:10	2094:10	16	"  /im_x 0 def\n"
LEAF_NODE	2094:10	2094:10	17	"  /im_x 0 def\n"
LEAF_NODE	2094:27	2094:27	15	,
ARGUMENT	2094:29	2094:29	15	fd
FIELD	2094:29	2094:29	16	fd
LEAF_NODE	2094:29	2094:29	17	fd
LEAF_NODE	2094:31	2094:31	15	)
LEAF_NODE	2094:32	2094:32	13	;
EXPR_STATEMENT	2095:4	2096:36	12	fprintf ( fd , " /im_y im_y %lu add def\n" , ( unsigned long ) tile_height ) ;
EXPR	2095:4	2095:4	13	fprintf ( fd , " /im_y im_y %lu add def\n" , ( unsigned long ) tile_height )
FUNCTION_CALL	2095:4	2096:35	14	fprintf ( fd , " /im_y im_y %lu add def\n" , ( unsigned long ) tile_height )
CALLEE	2095:4	2095:4	15	fprintf
LEAF_NODE	2095:4	2095:4	16	fprintf
LEAF_NODE	2095:11	2095:11	15	(
ARGUMENT	2095:12	2095:12	15	fd
FIELD	2095:12	2095:12	16	fd
LEAF_NODE	2095:12	2095:12	17	fd
LEAF_NODE	2095:14	2095:14	15	,
ARGUMENT	2095:16	2095:16	15	" /im_y im_y %lu add def\n"
FIELD	2095:16	2095:16	16	" /im_y im_y %lu add def\n"
LEAF_NODE	2095:16	2095:16	17	" /im_y im_y %lu add def\n"
LEAF_NODE	2095:43	2095:43	15	,
ARGUMENT	2096:8	2096:24	15	( unsigned long ) tile_height
LEAF_NODE	2096:8	2096:8	16	(
TYPE_NAME	2096:9	2096:18	16	unsigned long
LEAF_NODE	2096:9	2096:9	17	unsigned
LEAF_NODE	2096:18	2096:18	17	long
LEAF_NODE	2096:22	2096:22	16	)
FIELD	2096:24	2096:24	16	tile_height
LEAF_NODE	2096:24	2096:24	17	tile_height
LEAF_NODE	2096:35	2096:35	15	)
LEAF_NODE	2096:36	2096:36	13	;
EXPR_STATEMENT	2097:4	2097:24	12	fputs ( " } if\n" , fd ) ;
EXPR	2097:4	2097:4	13	fputs ( " } if\n" , fd )
FUNCTION_CALL	2097:4	2097:23	14	fputs ( " } if\n" , fd )
CALLEE	2097:4	2097:4	15	fputs
LEAF_NODE	2097:4	2097:4	16	fputs
LEAF_NODE	2097:9	2097:9	15	(
ARGUMENT	2097:10	2097:10	15	" } if\n"
FIELD	2097:10	2097:10	16	" } if\n"
LEAF_NODE	2097:10	2097:10	17	" } if\n"
LEAF_NODE	2097:19	2097:19	15	,
ARGUMENT	2097:21	2097:21	15	fd
FIELD	2097:21	2097:21	16	fd
LEAF_NODE	2097:21	2097:21	17	fd
LEAF_NODE	2097:23	2097:23	15	)
LEAF_NODE	2097:24	2097:24	13	;
LEAF_NODE	2098:3	2098:3	11	}
LEAF_NODE	2099:2	2099:2	8	}
SELECTION	2100:2	2100:23	6	
KEYWORD	2100:2	2100:2	7	if
LEAF_NODE	2100:2	2100:2	8	if
LEAF_NODE	2100:5	2100:5	7	(
CONDITION	2100:6	2100:6	7	tile_height < h
EXPR	2100:6	2100:20	8	tile_height < h
FIELD	2100:6	2100:6	9	tile_height
LEAF_NODE	2100:6	2100:6	10	tile_height
REL_OPERATOR	2100:18	2100:18	9	<
LEAF_NODE	2100:18	2100:18	10	<
FIELD	2100:20	2100:20	9	h
LEAF_NODE	2100:20	2100:20	10	h
LEAF_NODE	2100:21	2100:21	7	)
STATEMENTS	2100:23	2113:2	7	
LEAF_NODE	2100:23	2100:23	8	{
STATEMENTS	2101:3	2101:3	8	
SELECTION	2101:3	2101:24	9	
KEYWORD	2101:3	2101:3	10	if
LEAF_NODE	2101:3	2101:3	11	if
LEAF_NODE	2101:6	2101:6	10	(
CONDITION	2101:7	2101:7	10	tile_width >= w
EXPR	2101:7	2101:21	11	tile_width >= w
FIELD	2101:7	2101:7	12	tile_width
LEAF_NODE	2101:7	2101:7	13	tile_width
REL_OPERATOR	2101:18	2101:18	12	>=
LEAF_NODE	2101:18	2101:18	13	>=
FIELD	2101:21	2101:21	12	w
LEAF_NODE	2101:21	2101:21	13	w
LEAF_NODE	2101:22	2101:22	10	)
STATEMENTS	2101:24	2112:3	10	
LEAF_NODE	2101:24	2101:24	11	{
STATEMENTS	2102:4	2104:4	11	
EXPR_STATEMENT	2102:4	2103:36	12	fprintf ( fd , " /im_y im_y %lu add def\n" , ( unsigned long ) tile_height ) ;
EXPR	2102:4	2102:4	13	fprintf ( fd , " /im_y im_y %lu add def\n" , ( unsigned long ) tile_height )
FUNCTION_CALL	2102:4	2103:35	14	fprintf ( fd , " /im_y im_y %lu add def\n" , ( unsigned long ) tile_height )
CALLEE	2102:4	2102:4	15	fprintf
LEAF_NODE	2102:4	2102:4	16	fprintf
LEAF_NODE	2102:11	2102:11	15	(
ARGUMENT	2102:12	2102:12	15	fd
FIELD	2102:12	2102:12	16	fd
LEAF_NODE	2102:12	2102:12	17	fd
LEAF_NODE	2102:14	2102:14	15	,
ARGUMENT	2102:16	2102:16	15	" /im_y im_y %lu add def\n"
FIELD	2102:16	2102:16	16	" /im_y im_y %lu add def\n"
LEAF_NODE	2102:16	2102:16	17	" /im_y im_y %lu add def\n"
LEAF_NODE	2102:43	2102:43	15	,
ARGUMENT	2103:8	2103:24	15	( unsigned long ) tile_height
LEAF_NODE	2103:8	2103:8	16	(
TYPE_NAME	2103:9	2103:18	16	unsigned long
LEAF_NODE	2103:9	2103:9	17	unsigned
LEAF_NODE	2103:18	2103:18	17	long
LEAF_NODE	2103:22	2103:22	16	)
FIELD	2103:24	2103:24	16	tile_height
LEAF_NODE	2103:24	2103:24	17	tile_height
LEAF_NODE	2103:35	2103:35	15	)
LEAF_NODE	2103:36	2103:36	13	;
SELECTION	2104:4	2104:27	12	
KEYWORD	2104:4	2104:4	13	if
LEAF_NODE	2104:4	2104:4	14	if
LEAF_NODE	2104:7	2104:7	13	(
CONDITION	2104:8	2104:8	13	! TIFFIsTiled ( tif )
EXPR	2104:8	2104:8	14	! TIFFIsTiled ( tif )
UNARY_EXPR	2104:8	2104:9	15	! TIFFIsTiled ( tif )
UNARY_OPERATOR	2104:8	2104:8	16	!
LEAF_NODE	2104:8	2104:8	17	!
FUNCTION_CALL	2104:9	2104:24	16	TIFFIsTiled ( tif )
CALLEE	2104:9	2104:9	17	TIFFIsTiled
LEAF_NODE	2104:9	2104:9	18	TIFFIsTiled
LEAF_NODE	2104:20	2104:20	17	(
ARGUMENT	2104:21	2104:21	17	tif
FIELD	2104:21	2104:21	18	tif
LEAF_NODE	2104:21	2104:21	19	tif
LEAF_NODE	2104:24	2104:24	17	)
LEAF_NODE	2104:25	2104:25	13	)
STATEMENTS	2104:27	2111:4	13	
LEAF_NODE	2104:27	2104:27	14	{
STATEMENTS	2105:5	2109:5	14	
EXPR_STATEMENT	2105:5	2106:27	15	fprintf ( fd , " /im_h %lu im_y sub" , ( unsigned long ) h ) ;
EXPR	2105:5	2105:5	16	fprintf ( fd , " /im_h %lu im_y sub" , ( unsigned long ) h )
FUNCTION_CALL	2105:5	2106:26	17	fprintf ( fd , " /im_h %lu im_y sub" , ( unsigned long ) h )
CALLEE	2105:5	2105:5	18	fprintf
LEAF_NODE	2105:5	2105:5	19	fprintf
LEAF_NODE	2105:12	2105:12	18	(
ARGUMENT	2105:13	2105:13	18	fd
FIELD	2105:13	2105:13	19	fd
LEAF_NODE	2105:13	2105:13	20	fd
LEAF_NODE	2105:15	2105:15	18	,
ARGUMENT	2105:17	2105:17	18	" /im_h %lu im_y sub"
FIELD	2105:17	2105:17	19	" /im_h %lu im_y sub"
LEAF_NODE	2105:17	2105:17	20	" /im_h %lu im_y sub"
LEAF_NODE	2105:38	2105:38	18	,
ARGUMENT	2106:9	2106:25	18	( unsigned long ) h
LEAF_NODE	2106:9	2106:9	19	(
TYPE_NAME	2106:10	2106:19	19	unsigned long
LEAF_NODE	2106:10	2106:10	20	unsigned
LEAF_NODE	2106:19	2106:19	20	long
LEAF_NODE	2106:23	2106:23	19	)
FIELD	2106:25	2106:25	19	h
LEAF_NODE	2106:25	2106:25	20	h
LEAF_NODE	2106:26	2106:26	18	)
LEAF_NODE	2106:27	2106:27	16	;
EXPR_STATEMENT	2107:5	2108:37	15	fprintf ( fd , " dup %lu gt { pop" , ( unsigned long ) tile_height ) ;
EXPR	2107:5	2107:5	16	fprintf ( fd , " dup %lu gt { pop" , ( unsigned long ) tile_height )
FUNCTION_CALL	2107:5	2108:36	17	fprintf ( fd , " dup %lu gt { pop" , ( unsigned long ) tile_height )
CALLEE	2107:5	2107:5	18	fprintf
LEAF_NODE	2107:5	2107:5	19	fprintf
LEAF_NODE	2107:12	2107:12	18	(
ARGUMENT	2107:13	2107:13	18	fd
FIELD	2107:13	2107:13	19	fd
LEAF_NODE	2107:13	2107:13	20	fd
LEAF_NODE	2107:15	2107:15	18	,
ARGUMENT	2107:17	2107:17	18	" dup %lu gt { pop"
FIELD	2107:17	2107:17	19	" dup %lu gt { pop"
LEAF_NODE	2107:17	2107:17	20	" dup %lu gt { pop"
LEAF_NODE	2107:36	2107:36	18	,
ARGUMENT	2108:9	2108:25	18	( unsigned long ) tile_height
LEAF_NODE	2108:9	2108:9	19	(
TYPE_NAME	2108:10	2108:19	19	unsigned long
LEAF_NODE	2108:10	2108:10	20	unsigned
LEAF_NODE	2108:19	2108:19	20	long
LEAF_NODE	2108:23	2108:23	19	)
FIELD	2108:25	2108:25	19	tile_height
LEAF_NODE	2108:25	2108:25	20	tile_height
LEAF_NODE	2108:36	2108:36	18	)
LEAF_NODE	2108:37	2108:37	16	;
EXPR_STATEMENT	2109:5	2110:37	15	fprintf ( fd , " %lu } if def\n" , ( unsigned long ) tile_height ) ;
EXPR	2109:5	2109:5	16	fprintf ( fd , " %lu } if def\n" , ( unsigned long ) tile_height )
FUNCTION_CALL	2109:5	2110:36	17	fprintf ( fd , " %lu } if def\n" , ( unsigned long ) tile_height )
CALLEE	2109:5	2109:5	18	fprintf
LEAF_NODE	2109:5	2109:5	19	fprintf
LEAF_NODE	2109:12	2109:12	18	(
ARGUMENT	2109:13	2109:13	18	fd
FIELD	2109:13	2109:13	19	fd
LEAF_NODE	2109:13	2109:13	20	fd
LEAF_NODE	2109:15	2109:15	18	,
ARGUMENT	2109:17	2109:17	18	" %lu } if def\n"
FIELD	2109:17	2109:17	19	" %lu } if def\n"
LEAF_NODE	2109:17	2109:17	20	" %lu } if def\n"
LEAF_NODE	2109:34	2109:34	18	,
ARGUMENT	2110:9	2110:25	18	( unsigned long ) tile_height
LEAF_NODE	2110:9	2110:9	19	(
TYPE_NAME	2110:10	2110:19	19	unsigned long
LEAF_NODE	2110:10	2110:10	20	unsigned
LEAF_NODE	2110:19	2110:19	20	long
LEAF_NODE	2110:23	2110:23	19	)
FIELD	2110:25	2110:25	19	tile_height
LEAF_NODE	2110:25	2110:25	20	tile_height
LEAF_NODE	2110:36	2110:36	18	)
LEAF_NODE	2110:37	2110:37	16	;
LEAF_NODE	2111:4	2111:4	14	}
LEAF_NODE	2112:3	2112:3	11	}
LEAF_NODE	2113:2	2113:2	8	}
EXPR_STATEMENT	2114:2	2114:25	6	fputs ( "} repeat\n" , fd ) ;
EXPR	2114:2	2114:2	7	fputs ( "} repeat\n" , fd )
FUNCTION_CALL	2114:2	2114:24	8	fputs ( "} repeat\n" , fd )
CALLEE	2114:2	2114:2	9	fputs
LEAF_NODE	2114:2	2114:2	10	fputs
LEAF_NODE	2114:7	2114:7	9	(
ARGUMENT	2114:8	2114:8	9	"} repeat\n"
FIELD	2114:8	2114:8	10	"} repeat\n"
LEAF_NODE	2114:8	2114:8	11	"} repeat\n"
LEAF_NODE	2114:20	2114:20	9	,
ARGUMENT	2114:22	2114:22	9	fd
FIELD	2114:22	2114:22	10	fd
LEAF_NODE	2114:22	2114:22	11	fd
LEAF_NODE	2114:24	2114:24	9	)
LEAF_NODE	2114:25	2114:25	7	;
LEAF_NODE	2115:1	2115:1	5	}
EXPR_STATEMENT	2119:1	2119:17	3	fputs ( "}\n" , fd ) ;
EXPR	2119:1	2119:1	4	fputs ( "}\n" , fd )
FUNCTION_CALL	2119:1	2119:16	5	fputs ( "}\n" , fd )
CALLEE	2119:1	2119:1	6	fputs
LEAF_NODE	2119:1	2119:1	7	fputs
LEAF_NODE	2119:6	2119:6	6	(
ARGUMENT	2119:7	2119:7	6	"}\n"
FIELD	2119:7	2119:7	7	"}\n"
LEAF_NODE	2119:7	2119:7	8	"}\n"
LEAF_NODE	2119:12	2119:12	6	,
ARGUMENT	2119:14	2119:14	6	fd
FIELD	2119:14	2119:14	7	fd
LEAF_NODE	2119:14	2119:14	8	fd
LEAF_NODE	2119:16	2119:16	6	)
LEAF_NODE	2119:17	2119:17	4	;
LEAF_NODE	2121:1	2121:1	3	return
LEAF_NODE	2121:7	2121:7	3	(
LEAF_NODE	2121:8	2121:8	3	use_rawdata
LEAF_NODE	2121:19	2121:19	3	)
LEAF_NODE	2121:20	2121:20	3	;
LEAF_NODE	2122:0	2122:0	2	}
FUNCTION_DEF	2125:0	2142:0	1	
RETURN_TYPE	2125:0	2125:7	2	static void
LEAF_NODE	2125:0	2125:0	3	static
TYPE_NAME	2125:7	2125:7	3	void
LEAF_NODE	2125:7	2125:7	4	void
FUNCTION_NAME	2126:0	2126:0	2	PS_FlipBytes
LEAF_NODE	2126:0	2126:0	3	PS_FlipBytes
PARAMETER_LIST	2126:12	2126:46	2	( unsigned char * buf , tsize_t count )
LEAF_NODE	2126:12	2126:12	3	(
PARAMETER_DECL	2126:13	2126:28	3	unsigned char * buf
TYPE	2126:13	2126:26	4	unsigned char *
TYPE_NAME	2126:13	2126:22	5	unsigned char
LEAF_NODE	2126:13	2126:13	6	unsigned
LEAF_NODE	2126:22	2126:22	6	char
POINTER	2126:26	2126:26	5	*
LEAF_NODE	2126:26	2126:26	6	*
NAME	2126:28	2126:28	4	buf
LEAF_NODE	2126:28	2126:28	5	buf
LEAF_NODE	2126:31	2126:31	3	,
PARAMETER_DECL	2126:33	2126:41	3	tsize_t count
TYPE	2126:33	2126:33	4	tsize_t
TYPE_NAME	2126:33	2126:33	5	tsize_t
LEAF_NODE	2126:33	2126:33	6	tsize_t
NAME	2126:41	2126:41	4	count
LEAF_NODE	2126:41	2126:41	5	count
LEAF_NODE	2126:46	2126:46	3	)
LEAF_NODE	2127:0	2127:0	2	{
STATEMENTS	2128:1	2137:1	2	
SIMPLE_DECL	2128:1	2128:6	3	int i ;
VAR_DECL	2128:1	2128:5	4	int i
TYPE	2128:1	2128:1	5	int
TYPE_NAME	2128:1	2128:1	6	int
LEAF_NODE	2128:1	2128:1	7	int
NAME	2128:5	2128:5	5	i
LEAF_NODE	2128:5	2128:5	6	i
LEAF_NODE	2128:6	2128:6	4	;
SIMPLE_DECL	2129:1	2129:19	3	unsigned char temp ;
VAR_DECL	2129:1	2129:15	4	unsigned char temp
TYPE	2129:1	2129:1	5	unsigned char
TYPE_NAME	2129:1	2129:10	6	unsigned char
LEAF_NODE	2129:1	2129:1	7	unsigned
LEAF_NODE	2129:10	2129:10	7	char
NAME	2129:15	2129:15	5	temp
LEAF_NODE	2129:15	2129:15	6	temp
LEAF_NODE	2129:19	2129:19	4	;
SELECTION	2131:1	2131:39	3	
KEYWORD	2131:1	2131:1	4	if
LEAF_NODE	2131:1	2131:1	5	if
LEAF_NODE	2131:4	2131:4	4	(
CONDITION	2131:5	2131:5	4	count <= 0 || bitspersample <= 8
EXPR	2131:5	2131:5	5	count <= 0 || bitspersample <= 8
OR	2131:5	2131:19	6	count <= 0 || bitspersample <= 8
EXPR	2131:5	2131:14	7	count <= 0
FIELD	2131:5	2131:5	8	count
LEAF_NODE	2131:5	2131:5	9	count
REL_OPERATOR	2131:11	2131:11	8	<=
LEAF_NODE	2131:11	2131:11	9	<=
FIELD	2131:14	2131:14	8	0
LEAF_NODE	2131:14	2131:14	9	0
LEAF_NODE	2131:16	2131:16	7	||
EXPR	2131:19	2131:36	7	bitspersample <= 8
FIELD	2131:19	2131:19	8	bitspersample
LEAF_NODE	2131:19	2131:19	9	bitspersample
REL_OPERATOR	2131:33	2131:33	8	<=
LEAF_NODE	2131:33	2131:33	9	<=
FIELD	2131:36	2131:36	8	8
LEAF_NODE	2131:36	2131:36	9	8
LEAF_NODE	2131:37	2131:37	4	)
STATEMENTS	2131:39	2133:1	4	
LEAF_NODE	2131:39	2131:39	5	{
STATEMENTS	2132:2	2132:2	5	
JUMP_STATEMENT	2132:2	2132:8	6	return DESTINATION ;
KEYWORD	2132:2	2132:2	7	return
LEAF_NODE	2132:2	2132:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2132:8	2132:8	7	;
LEAF_NODE	2133:1	2133:1	5	}
EXPR_STATEMENT	2135:1	2135:8	3	count -- ;
EXPR	2135:1	2135:1	4	count --
FIELD	2135:1	2135:6	5	count --
LEAF_NODE	2135:1	2135:1	6	count
LEAF_NODE	2135:6	2135:6	6	--
LEAF_NODE	2135:8	2135:8	4	;
ITERATION	2137:1	2137:32	3	
KEYWORD	2137:1	2137:1	4	for
LEAF_NODE	2137:1	2137:1	5	for
LEAF_NODE	2137:5	2137:5	4	(
FOR_INIT	2137:6	2137:11	4	i = 0 ;
EXPR	2137:6	2137:6	5	i = 0
ASSIGN	2137:6	2137:10	6	i = 0
LVAL	2137:6	2137:6	7	i
FIELD	2137:6	2137:6	8	i
LEAF_NODE	2137:6	2137:6	9	i
ASSIGN_OP	2137:8	2137:8	7	=
LEAF_NODE	2137:8	2137:8	8	=
RVAL	2137:10	2137:10	7	0
FIELD	2137:10	2137:10	8	0
LEAF_NODE	2137:10	2137:10	9	0
LEAF_NODE	2137:11	2137:11	5	;
CONDITION	2137:13	2137:13	4	i < count
EXPR	2137:13	2137:17	5	i < count
FIELD	2137:13	2137:13	6	i
LEAF_NODE	2137:13	2137:13	7	i
REL_OPERATOR	2137:15	2137:15	6	<
LEAF_NODE	2137:15	2137:15	7	<
FIELD	2137:17	2137:17	6	count
LEAF_NODE	2137:17	2137:17	7	count
LEAF_NODE	2137:22	2137:22	4	;
FOR_EXPR	2137:24	2137:24	4	i += 2
EXPR	2137:24	2137:24	5	i += 2
ASSIGN	2137:24	2137:29	6	i += 2
LVAL	2137:24	2137:24	7	i
FIELD	2137:24	2137:24	8	i
LEAF_NODE	2137:24	2137:24	9	i
ASSIGN_OP	2137:26	2137:26	7	+=
LEAF_NODE	2137:26	2137:26	8	+=
RVAL	2137:29	2137:29	7	2
FIELD	2137:29	2137:29	8	2
LEAF_NODE	2137:29	2137:29	9	2
LEAF_NODE	2137:30	2137:30	4	)
STATEMENTS	2137:32	2141:1	4	
LEAF_NODE	2137:32	2137:32	5	{
STATEMENTS	2138:2	2140:2	5	
EXPR_STATEMENT	2138:2	2138:15	6	temp = buf [ i ] ;
EXPR	2138:2	2138:2	7	temp = buf [ i ]
ASSIGN	2138:2	2138:9	8	temp = buf [ i ]
LVAL	2138:2	2138:2	9	temp
FIELD	2138:2	2138:2	10	temp
LEAF_NODE	2138:2	2138:2	11	temp
ASSIGN_OP	2138:7	2138:7	9	=
LEAF_NODE	2138:7	2138:7	10	=
RVAL	2138:9	2138:9	9	buf [ i ]
FIELD	2138:9	2138:14	10	buf [ i ]
LEAF_NODE	2138:9	2138:9	11	buf
LEAF_NODE	2138:12	2138:12	11	[
EXPR	2138:13	2138:13	11	i
FIELD	2138:13	2138:13	12	i
LEAF_NODE	2138:13	2138:13	13	i
LEAF_NODE	2138:14	2138:14	11	]
LEAF_NODE	2138:15	2138:15	7	;
EXPR_STATEMENT	2139:2	2139:21	6	buf [ i ] = buf [ i + 1 ] ;
EXPR	2139:2	2139:2	7	buf [ i ] = buf [ i + 1 ]
ASSIGN	2139:2	2139:11	8	buf [ i ] = buf [ i + 1 ]
LVAL	2139:2	2139:2	9	buf [ i ]
FIELD	2139:2	2139:7	10	buf [ i ]
LEAF_NODE	2139:2	2139:2	11	buf
LEAF_NODE	2139:5	2139:5	11	[
EXPR	2139:6	2139:6	11	i
FIELD	2139:6	2139:6	12	i
LEAF_NODE	2139:6	2139:6	13	i
LEAF_NODE	2139:7	2139:7	11	]
ASSIGN_OP	2139:9	2139:9	9	=
LEAF_NODE	2139:9	2139:9	10	=
RVAL	2139:11	2139:11	9	buf [ i + 1 ]
FIELD	2139:11	2139:20	10	buf [ i + 1 ]
LEAF_NODE	2139:11	2139:11	11	buf
LEAF_NODE	2139:14	2139:14	11	[
EXPR	2139:15	2139:19	11	i + 1
FIELD	2139:15	2139:15	12	i
LEAF_NODE	2139:15	2139:15	13	i
LEAF_NODE	2139:17	2139:17	12	+
FIELD	2139:19	2139:19	12	1
LEAF_NODE	2139:19	2139:19	13	1
LEAF_NODE	2139:20	2139:20	11	]
LEAF_NODE	2139:21	2139:21	7	;
EXPR_STATEMENT	2140:2	2140:19	6	buf [ i + 1 ] = temp ;
EXPR	2140:2	2140:2	7	buf [ i + 1 ] = temp
ASSIGN	2140:2	2140:15	8	buf [ i + 1 ] = temp
LVAL	2140:2	2140:2	9	buf [ i + 1 ]
FIELD	2140:2	2140:11	10	buf [ i + 1 ]
LEAF_NODE	2140:2	2140:2	11	buf
LEAF_NODE	2140:5	2140:5	11	[
EXPR	2140:6	2140:10	11	i + 1
FIELD	2140:6	2140:6	12	i
LEAF_NODE	2140:6	2140:6	13	i
LEAF_NODE	2140:8	2140:8	12	+
FIELD	2140:10	2140:10	12	1
LEAF_NODE	2140:10	2140:10	13	1
LEAF_NODE	2140:11	2140:11	11	]
ASSIGN_OP	2140:13	2140:13	9	=
LEAF_NODE	2140:13	2140:13	10	=
RVAL	2140:15	2140:15	9	temp
FIELD	2140:15	2140:15	10	temp
LEAF_NODE	2140:15	2140:15	11	temp
LEAF_NODE	2140:19	2140:19	7	;
LEAF_NODE	2141:1	2141:1	5	}
LEAF_NODE	2142:0	2142:0	2	}
FUNCTION_DEF	2146:0	2333:0	1	
RETURN_TYPE	2146:0	2146:0	2	int
TYPE_NAME	2146:0	2146:0	3	int
LEAF_NODE	2146:0	2146:0	4	int
FUNCTION_NAME	2147:0	2147:0	2	PS_Lvl2page
LEAF_NODE	2147:0	2147:0	3	PS_Lvl2page
PARAMETER_LIST	2147:11	2147:51	2	( FILE * fd , TIFF * tif , uint32 w , uint32 h )
LEAF_NODE	2147:11	2147:11	3	(
PARAMETER_DECL	2147:12	2147:18	3	FILE * fd
TYPE	2147:12	2147:16	4	FILE *
TYPE_NAME	2147:12	2147:12	5	FILE
LEAF_NODE	2147:12	2147:12	6	FILE
POINTER	2147:16	2147:16	5	*
LEAF_NODE	2147:16	2147:16	6	*
NAME	2147:18	2147:18	4	fd
LEAF_NODE	2147:18	2147:18	5	fd
LEAF_NODE	2147:20	2147:20	3	,
PARAMETER_DECL	2147:22	2147:28	3	TIFF * tif
TYPE	2147:22	2147:26	4	TIFF *
TYPE_NAME	2147:22	2147:22	5	TIFF
LEAF_NODE	2147:22	2147:22	6	TIFF
POINTER	2147:26	2147:26	5	*
LEAF_NODE	2147:26	2147:26	6	*
NAME	2147:28	2147:28	4	tif
LEAF_NODE	2147:28	2147:28	5	tif
LEAF_NODE	2147:31	2147:31	3	,
PARAMETER_DECL	2147:33	2147:40	3	uint32 w
TYPE	2147:33	2147:33	4	uint32
TYPE_NAME	2147:33	2147:33	5	uint32
LEAF_NODE	2147:33	2147:33	6	uint32
NAME	2147:40	2147:40	4	w
LEAF_NODE	2147:40	2147:40	5	w
LEAF_NODE	2147:41	2147:41	3	,
PARAMETER_DECL	2147:43	2147:50	3	uint32 h
TYPE	2147:43	2147:43	4	uint32
TYPE_NAME	2147:43	2147:43	5	uint32
LEAF_NODE	2147:43	2147:43	6	uint32
NAME	2147:50	2147:50	4	h
LEAF_NODE	2147:50	2147:50	5	h
LEAF_NODE	2147:51	2147:51	3	)
LEAF_NODE	2148:0	2148:0	2	{
STATEMENTS	2149:1	2332:13	2	
SIMPLE_DECL	2149:1	2149:17	3	uint16 fillorder ;
VAR_DECL	2149:1	2149:8	4	uint16 fillorder
TYPE	2149:1	2149:1	5	uint16
TYPE_NAME	2149:1	2149:1	6	uint16
LEAF_NODE	2149:1	2149:1	7	uint16
NAME	2149:8	2149:8	5	fillorder
LEAF_NODE	2149:8	2149:8	6	fillorder
LEAF_NODE	2149:17	2149:17	4	;
SIMPLE_DECL	2150:1	2150:49	3	int use_rawdata , int tiled_image , int breaklen ; breaklen = MAXLINE ;
INIT_DECL_LIST	2150:1	2150:1	4	int use_rawdata , int tiled_image , int breaklen ; breaklen = MAXLINE
VAR_DECL	2150:1	2150:5	5	int use_rawdata
TYPE	2150:1	2150:1	6	int
TYPE_NAME	2150:1	2150:1	7	int
LEAF_NODE	2150:1	2150:1	8	int
NAME	2150:5	2150:5	6	use_rawdata
LEAF_NODE	2150:5	2150:5	7	use_rawdata
LEAF_NODE	2150:16	2150:16	5	,
INIT_DECL_LIST	2150:1	2150:1	5	int tiled_image , int breaklen ; breaklen = MAXLINE
VAR_DECL	2150:1	2150:18	6	int tiled_image
TYPE	2150:1	2150:1	7	int
TYPE_NAME	2150:1	2150:1	8	int
LEAF_NODE	2150:1	2150:1	9	int
NAME	2150:18	2150:18	7	tiled_image
LEAF_NODE	2150:18	2150:18	8	tiled_image
LEAF_NODE	2150:29	2150:29	6	,
VAR_DECL	2150:1	2150:31	6	int breaklen ; breaklen = MAXLINE
TYPE	2150:1	2150:1	7	int
TYPE_NAME	2150:1	2150:1	8	int
LEAF_NODE	2150:1	2150:1	9	int
NAME	2150:31	2150:31	7	breaklen
LEAF_NODE	2150:31	2150:31	8	breaklen
LEAF_NODE	0:0	0:0	7	;
INIT	2150:31	2150:31	7	breaklen = MAXLINE
ASSIGN	2150:31	2150:42	8	breaklen = MAXLINE
LVAL	2150:31	2150:31	9	breaklen
NAME	2150:31	2150:31	10	breaklen
LEAF_NODE	2150:31	2150:31	11	breaklen
ASSIGN_OP	2150:40	2150:40	9	=
LEAF_NODE	2150:40	2150:40	10	=
RVAL	2150:42	2150:42	9	MAXLINE
FIELD	2150:42	2150:42	10	MAXLINE
LEAF_NODE	2150:42	2150:42	11	MAXLINE
LEAF_NODE	2150:49	2150:49	4	;
SIMPLE_DECL	2151:1	2151:28	3	uint32 chunk_no , uint32 num_chunks ;
INIT_DECL_LIST	2151:1	2151:1	4	uint32 chunk_no , uint32 num_chunks
VAR_DECL	2151:1	2151:8	5	uint32 chunk_no
TYPE	2151:1	2151:1	6	uint32
TYPE_NAME	2151:1	2151:1	7	uint32
LEAF_NODE	2151:1	2151:1	8	uint32
NAME	2151:8	2151:8	6	chunk_no
LEAF_NODE	2151:8	2151:8	7	chunk_no
LEAF_NODE	2151:16	2151:16	5	,
VAR_DECL	2151:1	2151:18	5	uint32 num_chunks
TYPE	2151:1	2151:1	6	uint32
TYPE_NAME	2151:1	2151:1	7	uint32
LEAF_NODE	2151:1	2151:1	8	uint32
NAME	2151:18	2151:18	6	num_chunks
LEAF_NODE	2151:18	2151:18	7	num_chunks
LEAF_NODE	2151:28	2151:28	4	;
SIMPLE_DECL	2152:8	2152:18	3	uint64 * bc ;
VAR_DECL	2152:8	2152:16	4	uint64 * bc
TYPE	2152:8	2152:15	5	uint64 *
TYPE_NAME	2152:8	2152:8	6	uint64
LEAF_NODE	2152:8	2152:8	7	uint64
POINTER	2152:15	2152:15	6	*
LEAF_NODE	2152:15	2152:15	7	*
NAME	2152:16	2152:16	5	bc
LEAF_NODE	2152:16	2152:16	6	bc
LEAF_NODE	2152:18	2152:18	4	;
SIMPLE_DECL	2153:1	2153:29	3	unsigned char * buf_data , unsigned char * cp ;
INIT_DECL_LIST	2153:1	2153:1	4	unsigned char * buf_data , unsigned char * cp
VAR_DECL	2153:1	2153:16	5	unsigned char * buf_data
TYPE	2153:1	2153:15	6	unsigned char *
TYPE_NAME	2153:1	2153:10	7	unsigned char
LEAF_NODE	2153:1	2153:1	8	unsigned
LEAF_NODE	2153:10	2153:10	8	char
POINTER	2153:15	2153:15	7	*
LEAF_NODE	2153:15	2153:15	8	*
NAME	2153:16	2153:16	6	buf_data
LEAF_NODE	2153:16	2153:16	7	buf_data
LEAF_NODE	2153:24	2153:24	5	,
VAR_DECL	2153:1	2153:27	5	unsigned char * cp
TYPE	2153:1	2153:26	6	unsigned char *
TYPE_NAME	2153:1	2153:10	7	unsigned char
LEAF_NODE	2153:1	2153:1	8	unsigned
LEAF_NODE	2153:10	2153:10	8	char
POINTER	2153:26	2153:26	7	*
LEAF_NODE	2153:26	2153:26	8	*
NAME	2153:27	2153:27	6	cp
LEAF_NODE	2153:27	2153:27	7	cp
LEAF_NODE	2153:29	2153:29	4	;
SIMPLE_DECL	2154:1	2154:31	3	tsize_t chunk_size , tsize_t byte_count ;
INIT_DECL_LIST	2154:1	2154:1	4	tsize_t chunk_size , tsize_t byte_count
VAR_DECL	2154:1	2154:9	5	tsize_t chunk_size
TYPE	2154:1	2154:1	6	tsize_t
TYPE_NAME	2154:1	2154:1	7	tsize_t
LEAF_NODE	2154:1	2154:1	8	tsize_t
NAME	2154:9	2154:9	6	chunk_size
LEAF_NODE	2154:9	2154:9	7	chunk_size
LEAF_NODE	2154:19	2154:19	5	,
VAR_DECL	2154:1	2154:21	5	tsize_t byte_count
TYPE	2154:1	2154:1	6	tsize_t
TYPE_NAME	2154:1	2154:1	7	tsize_t
LEAF_NODE	2154:1	2154:1	8	tsize_t
NAME	2154:21	2154:21	6	byte_count
LEAF_NODE	2154:21	2154:21	7	byte_count
LEAF_NODE	2154:31	2154:31	4	;
SIMPLE_DECL	2157:1	2157:20	3	tsize_t ascii85_l ;
VAR_DECL	2157:1	2157:11	4	tsize_t ascii85_l
TYPE	2157:1	2157:1	5	tsize_t
TYPE_NAME	2157:1	2157:1	6	tsize_t
LEAF_NODE	2157:1	2157:1	7	tsize_t
NAME	2157:11	2157:11	5	ascii85_l
LEAF_NODE	2157:11	2157:11	6	ascii85_l
LEAF_NODE	2157:20	2157:20	4	;
SIMPLE_DECL	2158:1	2158:23	3	uint8 * ascii85_p ; ascii85_p = 0 ;
VAR_DECL	2158:1	2158:10	4	uint8 * ascii85_p ; ascii85_p = 0
TYPE	2158:1	2158:8	5	uint8 *
TYPE_NAME	2158:1	2158:1	6	uint8
LEAF_NODE	2158:1	2158:1	7	uint8
POINTER	2158:8	2158:8	6	*
LEAF_NODE	2158:8	2158:8	7	*
NAME	2158:10	2158:10	5	ascii85_p
LEAF_NODE	2158:10	2158:10	6	ascii85_p
LEAF_NODE	0:0	0:0	5	;
INIT	2158:10	2158:10	5	ascii85_p = 0
ASSIGN	2158:10	2158:22	6	ascii85_p = 0
LVAL	2158:10	2158:10	7	ascii85_p
NAME	2158:10	2158:10	8	ascii85_p
LEAF_NODE	2158:10	2158:10	9	ascii85_p
ASSIGN_OP	2158:20	2158:20	7	=
LEAF_NODE	2158:20	2158:20	8	=
RVAL	2158:22	2158:22	7	0
FIELD	2158:22	2158:22	8	0
LEAF_NODE	2158:22	2158:22	9	0
LEAF_NODE	2158:23	2158:23	4	;
EXPR_STATEMENT	2161:1	2161:27	3	PS_Lvl2colorspace ( fd , tif ) ;
EXPR	2161:1	2161:1	4	PS_Lvl2colorspace ( fd , tif )
FUNCTION_CALL	2161:1	2161:26	5	PS_Lvl2colorspace ( fd , tif )
CALLEE	2161:1	2161:1	6	PS_Lvl2colorspace
LEAF_NODE	2161:1	2161:1	7	PS_Lvl2colorspace
LEAF_NODE	2161:18	2161:18	6	(
ARGUMENT	2161:19	2161:19	6	fd
FIELD	2161:19	2161:19	7	fd
LEAF_NODE	2161:19	2161:19	8	fd
LEAF_NODE	2161:21	2161:21	6	,
ARGUMENT	2161:23	2161:23	6	tif
FIELD	2161:23	2161:23	7	tif
LEAF_NODE	2161:23	2161:23	8	tif
LEAF_NODE	2161:26	2161:26	6	)
LEAF_NODE	2161:27	2161:27	4	;
EXPR_STATEMENT	2162:1	2162:46	3	use_rawdata = PS_Lvl2ImageDict ( fd , tif , w , h ) ;
EXPR	2162:1	2162:1	4	use_rawdata = PS_Lvl2ImageDict ( fd , tif , w , h )
ASSIGN	2162:1	2162:15	5	use_rawdata = PS_Lvl2ImageDict ( fd , tif , w , h )
LVAL	2162:1	2162:1	6	use_rawdata
FIELD	2162:1	2162:1	7	use_rawdata
LEAF_NODE	2162:1	2162:1	8	use_rawdata
ASSIGN_OP	2162:13	2162:13	6	=
LEAF_NODE	2162:13	2162:13	7	=
RVAL	2162:15	2162:15	6	PS_Lvl2ImageDict ( fd , tif , w , h )
FUNCTION_CALL	2162:15	2162:45	7	PS_Lvl2ImageDict ( fd , tif , w , h )
CALLEE	2162:15	2162:15	8	PS_Lvl2ImageDict
LEAF_NODE	2162:15	2162:15	9	PS_Lvl2ImageDict
LEAF_NODE	2162:31	2162:31	8	(
ARGUMENT	2162:32	2162:32	8	fd
FIELD	2162:32	2162:32	9	fd
LEAF_NODE	2162:32	2162:32	10	fd
LEAF_NODE	2162:34	2162:34	8	,
ARGUMENT	2162:36	2162:36	8	tif
FIELD	2162:36	2162:36	9	tif
LEAF_NODE	2162:36	2162:36	10	tif
LEAF_NODE	2162:39	2162:39	8	,
ARGUMENT	2162:41	2162:41	8	w
FIELD	2162:41	2162:41	9	w
LEAF_NODE	2162:41	2162:41	10	w
LEAF_NODE	2162:42	2162:42	8	,
ARGUMENT	2162:44	2162:44	8	h
FIELD	2162:44	2162:44	9	h
LEAF_NODE	2162:44	2162:44	10	h
LEAF_NODE	2162:45	2162:45	8	)
LEAF_NODE	2162:46	2162:46	4	;
EXPR_STATEMENT	2166:1	2166:28	3	fputs ( "%%BeginData:\n" , fd ) ;
EXPR	2166:1	2166:1	4	fputs ( "%%BeginData:\n" , fd )
FUNCTION_CALL	2166:1	2166:27	5	fputs ( "%%BeginData:\n" , fd )
CALLEE	2166:1	2166:1	6	fputs
LEAF_NODE	2166:1	2166:1	7	fputs
LEAF_NODE	2166:6	2166:6	6	(
ARGUMENT	2166:7	2166:7	6	"%%BeginData:\n"
FIELD	2166:7	2166:7	7	"%%BeginData:\n"
LEAF_NODE	2166:7	2166:7	8	"%%BeginData:\n"
LEAF_NODE	2166:23	2166:23	6	,
ARGUMENT	2166:25	2166:25	6	fd
FIELD	2166:25	2166:25	7	fd
LEAF_NODE	2166:25	2166:25	8	fd
LEAF_NODE	2166:27	2166:27	6	)
LEAF_NODE	2166:28	2166:28	4	;
EXPR_STATEMENT	2168:1	2168:20	3	fputs ( "exec\n" , fd ) ;
EXPR	2168:1	2168:1	4	fputs ( "exec\n" , fd )
FUNCTION_CALL	2168:1	2168:19	5	fputs ( "exec\n" , fd )
CALLEE	2168:1	2168:1	6	fputs
LEAF_NODE	2168:1	2168:1	7	fputs
LEAF_NODE	2168:6	2168:6	6	(
ARGUMENT	2168:7	2168:7	6	"exec\n"
FIELD	2168:7	2168:7	7	"exec\n"
LEAF_NODE	2168:7	2168:7	8	"exec\n"
LEAF_NODE	2168:15	2168:15	6	,
ARGUMENT	2168:17	2168:17	6	fd
FIELD	2168:17	2168:17	7	fd
LEAF_NODE	2168:17	2168:17	8	fd
LEAF_NODE	2168:19	2168:19	6	)
LEAF_NODE	2168:20	2168:20	4	;
EXPR_STATEMENT	2170:1	2170:31	3	tiled_image = TIFFIsTiled ( tif ) ;
EXPR	2170:1	2170:1	4	tiled_image = TIFFIsTiled ( tif )
ASSIGN	2170:1	2170:15	5	tiled_image = TIFFIsTiled ( tif )
LVAL	2170:1	2170:1	6	tiled_image
FIELD	2170:1	2170:1	7	tiled_image
LEAF_NODE	2170:1	2170:1	8	tiled_image
ASSIGN_OP	2170:13	2170:13	6	=
LEAF_NODE	2170:13	2170:13	7	=
RVAL	2170:15	2170:15	6	TIFFIsTiled ( tif )
FUNCTION_CALL	2170:15	2170:30	7	TIFFIsTiled ( tif )
CALLEE	2170:15	2170:15	8	TIFFIsTiled
LEAF_NODE	2170:15	2170:15	9	TIFFIsTiled
LEAF_NODE	2170:26	2170:26	8	(
ARGUMENT	2170:27	2170:27	8	tif
FIELD	2170:27	2170:27	9	tif
LEAF_NODE	2170:27	2170:27	10	tif
LEAF_NODE	2170:30	2170:30	8	)
LEAF_NODE	2170:31	2170:31	4	;
SELECTION	2171:1	2171:18	3	
KEYWORD	2171:1	2171:1	4	if
LEAF_NODE	2171:1	2171:1	5	if
LEAF_NODE	2171:4	2171:4	4	(
CONDITION	2171:5	2171:5	4	tiled_image
EXPR	2171:5	2171:5	5	tiled_image
FIELD	2171:5	2171:5	6	tiled_image
LEAF_NODE	2171:5	2171:5	7	tiled_image
LEAF_NODE	2171:16	2171:16	4	)
STATEMENTS	2171:18	2174:1	4	
LEAF_NODE	2171:18	2171:18	5	{
STATEMENTS	2172:2	2173:2	5	
EXPR_STATEMENT	2172:2	2172:37	6	num_chunks = TIFFNumberOfTiles ( tif ) ;
EXPR	2172:2	2172:2	7	num_chunks = TIFFNumberOfTiles ( tif )
ASSIGN	2172:2	2172:15	8	num_chunks = TIFFNumberOfTiles ( tif )
LVAL	2172:2	2172:2	9	num_chunks
FIELD	2172:2	2172:2	10	num_chunks
LEAF_NODE	2172:2	2172:2	11	num_chunks
ASSIGN_OP	2172:13	2172:13	9	=
LEAF_NODE	2172:13	2172:13	10	=
RVAL	2172:15	2172:15	9	TIFFNumberOfTiles ( tif )
FUNCTION_CALL	2172:15	2172:36	10	TIFFNumberOfTiles ( tif )
CALLEE	2172:15	2172:15	11	TIFFNumberOfTiles
LEAF_NODE	2172:15	2172:15	12	TIFFNumberOfTiles
LEAF_NODE	2172:32	2172:32	11	(
ARGUMENT	2172:33	2172:33	11	tif
FIELD	2172:33	2172:33	12	tif
LEAF_NODE	2172:33	2172:33	13	tif
LEAF_NODE	2172:36	2172:36	11	)
LEAF_NODE	2172:37	2172:37	7	;
EXPR_STATEMENT	2173:2	2173:48	6	TIFFGetField ( tif , TIFFTAG_TILEBYTECOUNTS , & bc ) ;
EXPR	2173:2	2173:2	7	TIFFGetField ( tif , TIFFTAG_TILEBYTECOUNTS , & bc )
FUNCTION_CALL	2173:2	2173:47	8	TIFFGetField ( tif , TIFFTAG_TILEBYTECOUNTS , & bc )
CALLEE	2173:2	2173:2	9	TIFFGetField
LEAF_NODE	2173:2	2173:2	10	TIFFGetField
LEAF_NODE	2173:14	2173:14	9	(
ARGUMENT	2173:15	2173:15	9	tif
FIELD	2173:15	2173:15	10	tif
LEAF_NODE	2173:15	2173:15	11	tif
LEAF_NODE	2173:18	2173:18	9	,
ARGUMENT	2173:20	2173:20	9	TIFFTAG_TILEBYTECOUNTS
FIELD	2173:20	2173:20	10	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	2173:20	2173:20	11	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	2173:42	2173:42	9	,
ARGUMENT	2173:44	2173:44	9	& bc
UNARY_EXPR	2173:44	2173:45	10	& bc
UNARY_OPERATOR	2173:44	2173:44	11	&
LEAF_NODE	2173:44	2173:44	12	&
FIELD	2173:45	2173:45	11	bc
LEAF_NODE	2173:45	2173:45	12	bc
LEAF_NODE	2173:47	2173:47	9	)
LEAF_NODE	2173:48	2173:48	7	;
LEAF_NODE	2174:1	2174:1	5	}
SELECTION	2174:3	2174:8	3	
KEYWORD	2174:3	2174:3	4	else
LEAF_NODE	2174:3	2174:3	5	else
STATEMENTS	2174:8	2177:1	4	
LEAF_NODE	2174:8	2174:8	5	{
STATEMENTS	2175:2	2176:2	5	
EXPR_STATEMENT	2175:2	2175:38	6	num_chunks = TIFFNumberOfStrips ( tif ) ;
EXPR	2175:2	2175:2	7	num_chunks = TIFFNumberOfStrips ( tif )
ASSIGN	2175:2	2175:15	8	num_chunks = TIFFNumberOfStrips ( tif )
LVAL	2175:2	2175:2	9	num_chunks
FIELD	2175:2	2175:2	10	num_chunks
LEAF_NODE	2175:2	2175:2	11	num_chunks
ASSIGN_OP	2175:13	2175:13	9	=
LEAF_NODE	2175:13	2175:13	10	=
RVAL	2175:15	2175:15	9	TIFFNumberOfStrips ( tif )
FUNCTION_CALL	2175:15	2175:37	10	TIFFNumberOfStrips ( tif )
CALLEE	2175:15	2175:15	11	TIFFNumberOfStrips
LEAF_NODE	2175:15	2175:15	12	TIFFNumberOfStrips
LEAF_NODE	2175:33	2175:33	11	(
ARGUMENT	2175:34	2175:34	11	tif
FIELD	2175:34	2175:34	12	tif
LEAF_NODE	2175:34	2175:34	13	tif
LEAF_NODE	2175:37	2175:37	11	)
LEAF_NODE	2175:38	2175:38	7	;
EXPR_STATEMENT	2176:2	2176:49	6	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & bc ) ;
EXPR	2176:2	2176:2	7	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & bc )
FUNCTION_CALL	2176:2	2176:48	8	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & bc )
CALLEE	2176:2	2176:2	9	TIFFGetField
LEAF_NODE	2176:2	2176:2	10	TIFFGetField
LEAF_NODE	2176:14	2176:14	9	(
ARGUMENT	2176:15	2176:15	9	tif
FIELD	2176:15	2176:15	10	tif
LEAF_NODE	2176:15	2176:15	11	tif
LEAF_NODE	2176:18	2176:18	9	,
ARGUMENT	2176:20	2176:20	9	TIFFTAG_STRIPBYTECOUNTS
FIELD	2176:20	2176:20	10	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2176:20	2176:20	11	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2176:43	2176:43	9	,
ARGUMENT	2176:45	2176:45	9	& bc
UNARY_EXPR	2176:45	2176:46	10	& bc
UNARY_OPERATOR	2176:45	2176:45	11	&
LEAF_NODE	2176:45	2176:45	12	&
FIELD	2176:46	2176:46	11	bc
LEAF_NODE	2176:46	2176:46	12	bc
LEAF_NODE	2176:48	2176:48	9	)
LEAF_NODE	2176:49	2176:49	7	;
LEAF_NODE	2177:1	2177:1	5	}
SELECTION	2179:1	2179:18	3	
KEYWORD	2179:1	2179:1	4	if
LEAF_NODE	2179:1	2179:1	5	if
LEAF_NODE	2179:4	2179:4	4	(
CONDITION	2179:5	2179:5	4	use_rawdata
EXPR	2179:5	2179:5	5	use_rawdata
FIELD	2179:5	2179:5	6	use_rawdata
LEAF_NODE	2179:5	2179:5	7	use_rawdata
LEAF_NODE	2179:16	2179:16	4	)
STATEMENTS	2179:18	2184:1	4	
LEAF_NODE	2179:18	2179:18	5	{
STATEMENTS	2180:2	2181:2	5	
EXPR_STATEMENT	2180:2	2180:30	6	chunk_size = ( tsize_t ) bc [ 0 ] ;
EXPR	2180:2	2180:2	7	chunk_size = ( tsize_t ) bc [ 0 ]
ASSIGN	2180:2	2180:15	8	chunk_size = ( tsize_t ) bc [ 0 ]
LVAL	2180:2	2180:2	9	chunk_size
FIELD	2180:2	2180:2	10	chunk_size
LEAF_NODE	2180:2	2180:2	11	chunk_size
ASSIGN_OP	2180:13	2180:13	9	=
LEAF_NODE	2180:13	2180:13	10	=
RVAL	2180:15	2180:25	9	( tsize_t ) bc [ 0 ]
LEAF_NODE	2180:15	2180:15	10	(
TYPE_NAME	2180:16	2180:16	10	tsize_t
LEAF_NODE	2180:16	2180:16	11	tsize_t
LEAF_NODE	2180:23	2180:23	10	)
FIELD	2180:25	2180:29	10	bc [ 0 ]
LEAF_NODE	2180:25	2180:25	11	bc
LEAF_NODE	2180:27	2180:27	11	[
EXPR	2180:28	2180:28	11	0
FIELD	2180:28	2180:28	12	0
LEAF_NODE	2180:28	2180:28	13	0
LEAF_NODE	2180:29	2180:29	11	]
LEAF_NODE	2180:30	2180:30	7	;
ITERATION	2181:2	2182:3	6	
KEYWORD	2181:2	2181:2	7	for
LEAF_NODE	2181:2	2181:2	8	for
LEAF_NODE	2181:6	2181:6	7	(
FOR_INIT	2181:7	2181:19	7	chunk_no = 1 ;
EXPR	2181:7	2181:7	8	chunk_no = 1
ASSIGN	2181:7	2181:18	9	chunk_no = 1
LVAL	2181:7	2181:7	10	chunk_no
FIELD	2181:7	2181:7	11	chunk_no
LEAF_NODE	2181:7	2181:7	12	chunk_no
ASSIGN_OP	2181:16	2181:16	10	=
LEAF_NODE	2181:16	2181:16	11	=
RVAL	2181:18	2181:18	10	1
FIELD	2181:18	2181:18	11	1
LEAF_NODE	2181:18	2181:18	12	1
LEAF_NODE	2181:19	2181:19	8	;
CONDITION	2181:21	2181:21	7	chunk_no < num_chunks
EXPR	2181:21	2181:32	8	chunk_no < num_chunks
FIELD	2181:21	2181:21	9	chunk_no
LEAF_NODE	2181:21	2181:21	10	chunk_no
REL_OPERATOR	2181:30	2181:30	9	<
LEAF_NODE	2181:30	2181:30	10	<
FIELD	2181:32	2181:32	9	num_chunks
LEAF_NODE	2181:32	2181:32	10	num_chunks
LEAF_NODE	2181:42	2181:42	7	;
FOR_EXPR	2181:44	2181:44	7	chunk_no ++
EXPR	2181:44	2181:44	8	chunk_no ++
FIELD	2181:44	2181:52	9	chunk_no ++
LEAF_NODE	2181:44	2181:44	10	chunk_no
LEAF_NODE	2181:52	2181:52	10	++
LEAF_NODE	2181:54	2181:54	7	)
STATEMENTS	2182:3	2182:3	7	
SELECTION	2182:3	2183:4	8	
KEYWORD	2182:3	2182:3	9	if
LEAF_NODE	2182:3	2182:3	10	if
LEAF_NODE	2182:6	2182:6	9	(
CONDITION	2182:7	2182:7	9	( tsize_t ) bc [ chunk_no ] > chunk_size
EXPR	2182:7	2182:32	10	( tsize_t ) bc [ chunk_no ] > chunk_size
LEAF_NODE	2182:7	2182:7	11	(
TYPE_NAME	2182:8	2182:8	11	tsize_t
LEAF_NODE	2182:8	2182:8	12	tsize_t
LEAF_NODE	2182:15	2182:15	11	)
FIELD	2182:17	2182:28	11	bc [ chunk_no ]
LEAF_NODE	2182:17	2182:17	12	bc
LEAF_NODE	2182:19	2182:19	12	[
EXPR	2182:20	2182:20	12	chunk_no
FIELD	2182:20	2182:20	13	chunk_no
LEAF_NODE	2182:20	2182:20	14	chunk_no
LEAF_NODE	2182:28	2182:28	12	]
REL_OPERATOR	2182:30	2182:30	11	>
LEAF_NODE	2182:30	2182:30	12	>
FIELD	2182:32	2182:32	11	chunk_size
LEAF_NODE	2182:32	2182:32	12	chunk_size
LEAF_NODE	2182:42	2182:42	9	)
STATEMENTS	2183:4	2183:4	9	
EXPR_STATEMENT	2183:4	2183:39	10	chunk_size = ( tsize_t ) bc [ chunk_no ] ;
EXPR	2183:4	2183:4	11	chunk_size = ( tsize_t ) bc [ chunk_no ]
ASSIGN	2183:4	2183:17	12	chunk_size = ( tsize_t ) bc [ chunk_no ]
LVAL	2183:4	2183:4	13	chunk_size
FIELD	2183:4	2183:4	14	chunk_size
LEAF_NODE	2183:4	2183:4	15	chunk_size
ASSIGN_OP	2183:15	2183:15	13	=
LEAF_NODE	2183:15	2183:15	14	=
RVAL	2183:17	2183:27	13	( tsize_t ) bc [ chunk_no ]
LEAF_NODE	2183:17	2183:17	14	(
TYPE_NAME	2183:18	2183:18	14	tsize_t
LEAF_NODE	2183:18	2183:18	15	tsize_t
LEAF_NODE	2183:25	2183:25	14	)
FIELD	2183:27	2183:38	14	bc [ chunk_no ]
LEAF_NODE	2183:27	2183:27	15	bc
LEAF_NODE	2183:29	2183:29	15	[
EXPR	2183:30	2183:30	15	chunk_no
FIELD	2183:30	2183:30	16	chunk_no
LEAF_NODE	2183:30	2183:30	17	chunk_no
LEAF_NODE	2183:38	2183:38	15	]
LEAF_NODE	2183:39	2183:39	11	;
LEAF_NODE	2184:1	2184:1	5	}
SELECTION	2184:3	2184:8	3	
KEYWORD	2184:3	2184:3	4	else
LEAF_NODE	2184:3	2184:3	5	else
STATEMENTS	2184:8	2189:1	4	
LEAF_NODE	2184:8	2184:8	5	{
STATEMENTS	2185:2	2187:2	5	
SELECTION	2185:2	2186:3	6	
KEYWORD	2185:2	2185:2	7	if
LEAF_NODE	2185:2	2185:2	8	if
LEAF_NODE	2185:5	2185:5	7	(
CONDITION	2185:6	2185:6	7	tiled_image
EXPR	2185:6	2185:6	8	tiled_image
FIELD	2185:6	2185:6	9	tiled_image
LEAF_NODE	2185:6	2185:6	10	tiled_image
LEAF_NODE	2185:17	2185:17	7	)
STATEMENTS	2186:3	2186:3	7	
EXPR_STATEMENT	2186:3	2186:33	8	chunk_size = TIFFTileSize ( tif ) ;
EXPR	2186:3	2186:3	9	chunk_size = TIFFTileSize ( tif )
ASSIGN	2186:3	2186:16	10	chunk_size = TIFFTileSize ( tif )
LVAL	2186:3	2186:3	11	chunk_size
FIELD	2186:3	2186:3	12	chunk_size
LEAF_NODE	2186:3	2186:3	13	chunk_size
ASSIGN_OP	2186:14	2186:14	11	=
LEAF_NODE	2186:14	2186:14	12	=
RVAL	2186:16	2186:16	11	TIFFTileSize ( tif )
FUNCTION_CALL	2186:16	2186:32	12	TIFFTileSize ( tif )
CALLEE	2186:16	2186:16	13	TIFFTileSize
LEAF_NODE	2186:16	2186:16	14	TIFFTileSize
LEAF_NODE	2186:28	2186:28	13	(
ARGUMENT	2186:29	2186:29	13	tif
FIELD	2186:29	2186:29	14	tif
LEAF_NODE	2186:29	2186:29	15	tif
LEAF_NODE	2186:32	2186:32	13	)
LEAF_NODE	2186:33	2186:33	9	;
SELECTION	2187:2	2188:3	6	
KEYWORD	2187:2	2187:2	7	else
LEAF_NODE	2187:2	2187:2	8	else
STATEMENTS	2188:3	2188:3	7	
EXPR_STATEMENT	2188:3	2188:34	8	chunk_size = TIFFStripSize ( tif ) ;
EXPR	2188:3	2188:3	9	chunk_size = TIFFStripSize ( tif )
ASSIGN	2188:3	2188:16	10	chunk_size = TIFFStripSize ( tif )
LVAL	2188:3	2188:3	11	chunk_size
FIELD	2188:3	2188:3	12	chunk_size
LEAF_NODE	2188:3	2188:3	13	chunk_size
ASSIGN_OP	2188:14	2188:14	11	=
LEAF_NODE	2188:14	2188:14	12	=
RVAL	2188:16	2188:16	11	TIFFStripSize ( tif )
FUNCTION_CALL	2188:16	2188:33	12	TIFFStripSize ( tif )
CALLEE	2188:16	2188:16	13	TIFFStripSize
LEAF_NODE	2188:16	2188:16	14	TIFFStripSize
LEAF_NODE	2188:29	2188:29	13	(
ARGUMENT	2188:30	2188:30	13	tif
FIELD	2188:30	2188:30	14	tif
LEAF_NODE	2188:30	2188:30	15	tif
LEAF_NODE	2188:33	2188:33	13	)
LEAF_NODE	2188:34	2188:34	9	;
LEAF_NODE	2189:1	2189:1	5	}
EXPR_STATEMENT	2190:1	2190:52	3	buf_data = ( unsigned char * ) _TIFFmalloc ( chunk_size ) ;
EXPR	2190:1	2190:1	4	buf_data = ( unsigned char * ) _TIFFmalloc ( chunk_size )
ASSIGN	2190:1	2190:12	5	buf_data = ( unsigned char * ) _TIFFmalloc ( chunk_size )
LVAL	2190:1	2190:1	6	buf_data
FIELD	2190:1	2190:1	7	buf_data
LEAF_NODE	2190:1	2190:1	8	buf_data
ASSIGN_OP	2190:10	2190:10	6	=
LEAF_NODE	2190:10	2190:10	7	=
RVAL	2190:12	2190:29	6	( unsigned char * ) _TIFFmalloc ( chunk_size )
LEAF_NODE	2190:12	2190:12	7	(
TYPE_NAME	2190:13	2190:22	7	unsigned char
LEAF_NODE	2190:13	2190:13	8	unsigned
LEAF_NODE	2190:22	2190:22	8	char
LEAF_NODE	2190:27	2190:27	7	*
LEAF_NODE	2190:28	2190:28	7	)
FUNCTION_CALL	2190:29	2190:51	7	_TIFFmalloc ( chunk_size )
CALLEE	2190:29	2190:29	8	_TIFFmalloc
LEAF_NODE	2190:29	2190:29	9	_TIFFmalloc
LEAF_NODE	2190:40	2190:40	8	(
ARGUMENT	2190:41	2190:41	8	chunk_size
FIELD	2190:41	2190:41	9	chunk_size
LEAF_NODE	2190:41	2190:41	10	chunk_size
LEAF_NODE	2190:51	2190:51	8	)
LEAF_NODE	2190:52	2190:52	4	;
SELECTION	2191:1	2191:16	3	
KEYWORD	2191:1	2191:1	4	if
LEAF_NODE	2191:1	2191:1	5	if
LEAF_NODE	2191:4	2191:4	4	(
CONDITION	2191:5	2191:5	4	! buf_data
EXPR	2191:5	2191:5	5	! buf_data
UNARY_EXPR	2191:5	2191:6	6	! buf_data
UNARY_OPERATOR	2191:5	2191:5	7	!
LEAF_NODE	2191:5	2191:5	8	!
FIELD	2191:6	2191:6	7	buf_data
LEAF_NODE	2191:6	2191:6	8	buf_data
LEAF_NODE	2191:14	2191:14	4	)
STATEMENTS	2191:16	2195:1	4	
LEAF_NODE	2191:16	2191:16	5	{
STATEMENTS	2192:2	2194:15	5	
EXPR_STATEMENT	2192:2	2193:64	6	TIFFError ( filename , "Can't alloc %lu bytes for %s." , ( unsigned long ) chunk_size , tiled_image ? "tiles" : "strips" ) ;
EXPR	2192:2	2192:2	7	TIFFError ( filename , "Can't alloc %lu bytes for %s." , ( unsigned long ) chunk_size , tiled_image ? "tiles" : "strips" )
FUNCTION_CALL	2192:2	2193:63	8	TIFFError ( filename , "Can't alloc %lu bytes for %s." , ( unsigned long ) chunk_size , tiled_image ? "tiles" : "strips" )
CALLEE	2192:2	2192:2	9	TIFFError
LEAF_NODE	2192:2	2192:2	10	TIFFError
LEAF_NODE	2192:11	2192:11	9	(
ARGUMENT	2192:12	2192:12	9	filename
FIELD	2192:12	2192:12	10	filename
LEAF_NODE	2192:12	2192:12	11	filename
LEAF_NODE	2192:20	2192:20	9	,
ARGUMENT	2192:22	2192:22	9	"Can't alloc %lu bytes for %s."
FIELD	2192:22	2192:22	10	"Can't alloc %lu bytes for %s."
LEAF_NODE	2192:22	2192:22	11	"Can't alloc %lu bytes for %s."
LEAF_NODE	2192:53	2192:53	9	,
ARGUMENT	2193:3	2193:19	9	( unsigned long ) chunk_size
LEAF_NODE	2193:3	2193:3	10	(
TYPE_NAME	2193:4	2193:13	10	unsigned long
LEAF_NODE	2193:4	2193:4	11	unsigned
LEAF_NODE	2193:13	2193:13	11	long
LEAF_NODE	2193:17	2193:17	10	)
FIELD	2193:19	2193:19	10	chunk_size
LEAF_NODE	2193:19	2193:19	11	chunk_size
LEAF_NODE	2193:29	2193:29	9	,
ARGUMENT	2193:31	2193:31	9	tiled_image ? "tiles" : "strips"
COND_EXPR	2193:31	2193:55	10	tiled_image ? "tiles" : "strips"
CONDITION	2193:31	2193:31	11	tiled_image
FIELD	2193:31	2193:31	12	tiled_image
LEAF_NODE	2193:31	2193:31	13	tiled_image
LEAF_NODE	2193:43	2193:43	11	?
EXPR	2193:45	2193:45	11	"tiles"
FIELD	2193:45	2193:45	12	"tiles"
LEAF_NODE	2193:45	2193:45	13	"tiles"
LEAF_NODE	2193:53	2193:53	11	:
FIELD	2193:55	2193:55	11	"strips"
LEAF_NODE	2193:55	2193:55	12	"strips"
LEAF_NODE	2193:63	2193:63	9	)
LEAF_NODE	2193:64	2193:64	7	;
LEAF_NODE	2194:2	2194:2	6	return
LEAF_NODE	2194:8	2194:8	6	(
LEAF_NODE	2194:9	2194:9	6	FALSE
LEAF_NODE	2194:14	2194:14	6	)
LEAF_NODE	2194:15	2194:15	6	;
LEAF_NODE	2195:1	2195:1	5	}
SELECTION	2198:1	2198:16	3	
KEYWORD	2198:1	2198:1	4	if
LEAF_NODE	2198:1	2198:1	5	if
LEAF_NODE	2198:4	2198:4	4	(
CONDITION	2198:6	2198:6	4	ascii85
EXPR	2198:6	2198:6	5	ascii85
FIELD	2198:6	2198:6	6	ascii85
LEAF_NODE	2198:6	2198:6	7	ascii85
LEAF_NODE	2198:14	2198:14	4	)
STATEMENTS	2198:16	2216:1	4	
LEAF_NODE	2198:16	2198:16	5	{
STATEMENTS	2208:5	2210:5	5	
EXPR_STATEMENT	2208:5	2208:63	6	ascii85_p = _TIFFmalloc ( ( chunk_size + ( chunk_size / 2 ) ) + 8 ) ;
EXPR	2208:5	2208:5	7	ascii85_p = _TIFFmalloc ( ( chunk_size + ( chunk_size / 2 ) ) + 8 )
ASSIGN	2208:5	2208:17	8	ascii85_p = _TIFFmalloc ( ( chunk_size + ( chunk_size / 2 ) ) + 8 )
LVAL	2208:5	2208:5	9	ascii85_p
FIELD	2208:5	2208:5	10	ascii85_p
LEAF_NODE	2208:5	2208:5	11	ascii85_p
ASSIGN_OP	2208:15	2208:15	9	=
LEAF_NODE	2208:15	2208:15	10	=
RVAL	2208:17	2208:17	9	_TIFFmalloc ( ( chunk_size + ( chunk_size / 2 ) ) + 8 )
FUNCTION_CALL	2208:17	2208:62	10	_TIFFmalloc ( ( chunk_size + ( chunk_size / 2 ) ) + 8 )
CALLEE	2208:17	2208:17	11	_TIFFmalloc
LEAF_NODE	2208:17	2208:17	12	_TIFFmalloc
LEAF_NODE	2208:28	2208:28	11	(
ARGUMENT	2208:30	2208:60	11	( chunk_size + ( chunk_size / 2 ) ) + 8
LEAF_NODE	2208:30	2208:30	12	(
FIELD	2208:31	2208:31	12	chunk_size
LEAF_NODE	2208:31	2208:31	13	chunk_size
LEAF_NODE	2208:41	2208:41	12	+
LEAF_NODE	2208:42	2208:42	12	(
FIELD	2208:43	2208:43	12	chunk_size
LEAF_NODE	2208:43	2208:43	13	chunk_size
LEAF_NODE	2208:53	2208:53	12	/
FIELD	2208:54	2208:54	12	2
LEAF_NODE	2208:54	2208:54	13	2
LEAF_NODE	2208:55	2208:55	12	)
LEAF_NODE	2208:56	2208:56	12	)
LEAF_NODE	2208:58	2208:58	12	+
FIELD	2208:60	2208:60	12	8
LEAF_NODE	2208:60	2208:60	13	8
LEAF_NODE	2208:62	2208:62	11	)
LEAF_NODE	2208:63	2208:63	7	;
SELECTION	2210:5	2210:23	6	
KEYWORD	2210:5	2210:5	7	if
LEAF_NODE	2210:5	2210:5	8	if
LEAF_NODE	2210:8	2210:8	7	(
CONDITION	2210:10	2210:10	7	! ascii85_p
EXPR	2210:10	2210:10	8	! ascii85_p
UNARY_EXPR	2210:10	2210:11	9	! ascii85_p
UNARY_OPERATOR	2210:10	2210:10	10	!
LEAF_NODE	2210:10	2210:10	11	!
FIELD	2210:11	2210:11	10	ascii85_p
LEAF_NODE	2210:11	2210:11	11	ascii85_p
LEAF_NODE	2210:21	2210:21	7	)
STATEMENTS	2210:23	2215:5	7	
LEAF_NODE	2210:23	2210:23	8	{
STATEMENTS	2211:2	2214:18	8	
EXPR_STATEMENT	2211:2	2211:23	9	_TIFFfree ( buf_data ) ;
EXPR	2211:2	2211:2	10	_TIFFfree ( buf_data )
FUNCTION_CALL	2211:2	2211:22	11	_TIFFfree ( buf_data )
CALLEE	2211:2	2211:2	12	_TIFFfree
LEAF_NODE	2211:2	2211:2	13	_TIFFfree
LEAF_NODE	2211:11	2211:11	12	(
ARGUMENT	2211:13	2211:13	12	buf_data
FIELD	2211:13	2211:13	13	buf_data
LEAF_NODE	2211:13	2211:13	14	buf_data
LEAF_NODE	2211:22	2211:22	12	)
LEAF_NODE	2211:23	2211:23	10	;
EXPR_STATEMENT	2213:2	2213:67	9	TIFFError ( filename , "Cannot allocate ASCII85 encoding buffer." ) ;
EXPR	2213:2	2213:2	10	TIFFError ( filename , "Cannot allocate ASCII85 encoding buffer." )
FUNCTION_CALL	2213:2	2213:66	11	TIFFError ( filename , "Cannot allocate ASCII85 encoding buffer." )
CALLEE	2213:2	2213:2	12	TIFFError
LEAF_NODE	2213:2	2213:2	13	TIFFError
LEAF_NODE	2213:11	2213:11	12	(
ARGUMENT	2213:13	2213:13	12	filename
FIELD	2213:13	2213:13	13	filename
LEAF_NODE	2213:13	2213:13	14	filename
LEAF_NODE	2213:21	2213:21	12	,
ARGUMENT	2213:23	2213:23	12	"Cannot allocate ASCII85 encoding buffer."
FIELD	2213:23	2213:23	13	"Cannot allocate ASCII85 encoding buffer."
LEAF_NODE	2213:23	2213:23	14	"Cannot allocate ASCII85 encoding buffer."
LEAF_NODE	2213:66	2213:66	12	)
LEAF_NODE	2213:67	2213:67	10	;
LEAF_NODE	2214:2	2214:2	9	return
LEAF_NODE	2214:9	2214:9	9	(
LEAF_NODE	2214:11	2214:11	9	FALSE
LEAF_NODE	2214:17	2214:17	9	)
LEAF_NODE	2214:18	2214:18	9	;
LEAF_NODE	2215:5	2215:5	8	}
LEAF_NODE	2216:1	2216:1	5	}
EXPR_STATEMENT	2219:1	2219:58	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & fillorder ) ;
EXPR	2219:1	2219:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & fillorder )
FUNCTION_CALL	2219:1	2219:57	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & fillorder )
CALLEE	2219:1	2219:1	6	TIFFGetFieldDefaulted
LEAF_NODE	2219:1	2219:1	7	TIFFGetFieldDefaulted
LEAF_NODE	2219:22	2219:22	6	(
ARGUMENT	2219:23	2219:23	6	tif
FIELD	2219:23	2219:23	7	tif
LEAF_NODE	2219:23	2219:23	8	tif
LEAF_NODE	2219:26	2219:26	6	,
ARGUMENT	2219:28	2219:28	6	TIFFTAG_FILLORDER
FIELD	2219:28	2219:28	7	TIFFTAG_FILLORDER
LEAF_NODE	2219:28	2219:28	8	TIFFTAG_FILLORDER
LEAF_NODE	2219:45	2219:45	6	,
ARGUMENT	2219:47	2219:47	6	& fillorder
UNARY_EXPR	2219:47	2219:48	7	& fillorder
UNARY_OPERATOR	2219:47	2219:47	8	&
LEAF_NODE	2219:47	2219:47	9	&
FIELD	2219:48	2219:48	8	fillorder
LEAF_NODE	2219:48	2219:48	9	fillorder
LEAF_NODE	2219:57	2219:57	6	)
LEAF_NODE	2219:58	2219:58	4	;
ITERATION	2220:1	2220:55	3	
KEYWORD	2220:1	2220:1	4	for
LEAF_NODE	2220:1	2220:1	5	for
LEAF_NODE	2220:5	2220:5	4	(
FOR_INIT	2220:6	2220:18	4	chunk_no = 0 ;
EXPR	2220:6	2220:6	5	chunk_no = 0
ASSIGN	2220:6	2220:17	6	chunk_no = 0
LVAL	2220:6	2220:6	7	chunk_no
FIELD	2220:6	2220:6	8	chunk_no
LEAF_NODE	2220:6	2220:6	9	chunk_no
ASSIGN_OP	2220:15	2220:15	7	=
LEAF_NODE	2220:15	2220:15	8	=
RVAL	2220:17	2220:17	7	0
FIELD	2220:17	2220:17	8	0
LEAF_NODE	2220:17	2220:17	9	0
LEAF_NODE	2220:18	2220:18	5	;
CONDITION	2220:20	2220:20	4	chunk_no < num_chunks
EXPR	2220:20	2220:31	5	chunk_no < num_chunks
FIELD	2220:20	2220:20	6	chunk_no
LEAF_NODE	2220:20	2220:20	7	chunk_no
REL_OPERATOR	2220:29	2220:29	6	<
LEAF_NODE	2220:29	2220:29	7	<
FIELD	2220:31	2220:31	6	num_chunks
LEAF_NODE	2220:31	2220:31	7	num_chunks
LEAF_NODE	2220:41	2220:41	4	;
FOR_EXPR	2220:43	2220:43	4	chunk_no ++
EXPR	2220:43	2220:43	5	chunk_no ++
FIELD	2220:43	2220:51	6	chunk_no ++
LEAF_NODE	2220:43	2220:43	7	chunk_no
LEAF_NODE	2220:51	2220:51	7	++
LEAF_NODE	2220:53	2220:53	4	)
STATEMENTS	2220:55	2321:1	4	
LEAF_NODE	2220:55	2220:55	5	{
STATEMENTS	2221:2	2318:2	5	
SELECTION	2221:2	2222:3	6	
KEYWORD	2221:2	2221:2	7	if
LEAF_NODE	2221:2	2221:2	8	if
LEAF_NODE	2221:5	2221:5	7	(
CONDITION	2221:6	2221:6	7	ascii85
EXPR	2221:6	2221:6	8	ascii85
FIELD	2221:6	2221:6	9	ascii85
LEAF_NODE	2221:6	2221:6	10	ascii85
LEAF_NODE	2221:13	2221:13	7	)
STATEMENTS	2222:3	2222:3	7	
EXPR_STATEMENT	2222:3	2222:16	8	Ascii85Init ( ) ;
EXPR	2222:3	2222:3	9	Ascii85Init ( )
FUNCTION_CALL	2222:3	2222:15	10	Ascii85Init ( )
CALLEE	2222:3	2222:3	11	Ascii85Init
LEAF_NODE	2222:3	2222:3	12	Ascii85Init
LEAF_NODE	2222:14	2222:14	11	(
LEAF_NODE	2222:15	2222:15	11	)
LEAF_NODE	2222:16	2222:16	9	;
SELECTION	2223:2	2224:3	6	
KEYWORD	2223:2	2223:2	7	else
LEAF_NODE	2223:2	2223:2	8	else
STATEMENTS	2224:3	2224:3	7	
EXPR_STATEMENT	2224:3	2224:21	8	breaklen = MAXLINE ;
EXPR	2224:3	2224:3	9	breaklen = MAXLINE
ASSIGN	2224:3	2224:14	10	breaklen = MAXLINE
LVAL	2224:3	2224:3	11	breaklen
FIELD	2224:3	2224:3	12	breaklen
LEAF_NODE	2224:3	2224:3	13	breaklen
ASSIGN_OP	2224:12	2224:12	11	=
LEAF_NODE	2224:12	2224:12	12	=
RVAL	2224:14	2224:14	11	MAXLINE
FIELD	2224:14	2224:14	12	MAXLINE
LEAF_NODE	2224:14	2224:14	13	MAXLINE
LEAF_NODE	2224:21	2224:21	9	;
SELECTION	2225:2	2225:19	6	
KEYWORD	2225:2	2225:2	7	if
LEAF_NODE	2225:2	2225:2	8	if
LEAF_NODE	2225:5	2225:5	7	(
CONDITION	2225:6	2225:6	7	use_rawdata
EXPR	2225:6	2225:6	8	use_rawdata
FIELD	2225:6	2225:6	9	use_rawdata
LEAF_NODE	2225:6	2225:6	10	use_rawdata
LEAF_NODE	2225:17	2225:17	7	)
STATEMENTS	2225:19	2234:2	7	
LEAF_NODE	2225:19	2225:19	8	{
STATEMENTS	2226:3	2232:3	8	
SELECTION	2226:3	2227:4	9	
KEYWORD	2226:3	2226:3	10	if
LEAF_NODE	2226:3	2226:3	11	if
LEAF_NODE	2226:6	2226:6	10	(
CONDITION	2226:7	2226:7	10	tiled_image
EXPR	2226:7	2226:7	11	tiled_image
FIELD	2226:7	2226:7	12	tiled_image
LEAF_NODE	2226:7	2226:7	13	tiled_image
LEAF_NODE	2226:18	2226:18	10	)
STATEMENTS	2227:4	2227:4	10	
EXPR_STATEMENT	2227:4	2228:29	11	byte_count = TIFFReadRawTile ( tif , chunk_no , buf_data , chunk_size ) ;
EXPR	2227:4	2227:4	12	byte_count = TIFFReadRawTile ( tif , chunk_no , buf_data , chunk_size )
ASSIGN	2227:4	2227:17	13	byte_count = TIFFReadRawTile ( tif , chunk_no , buf_data , chunk_size )
LVAL	2227:4	2227:4	14	byte_count
FIELD	2227:4	2227:4	15	byte_count
LEAF_NODE	2227:4	2227:4	16	byte_count
ASSIGN_OP	2227:15	2227:15	14	=
LEAF_NODE	2227:15	2227:15	15	=
RVAL	2227:17	2227:17	14	TIFFReadRawTile ( tif , chunk_no , buf_data , chunk_size )
FUNCTION_CALL	2227:17	2228:28	15	TIFFReadRawTile ( tif , chunk_no , buf_data , chunk_size )
CALLEE	2227:17	2227:17	16	TIFFReadRawTile
LEAF_NODE	2227:17	2227:17	17	TIFFReadRawTile
LEAF_NODE	2227:32	2227:32	16	(
ARGUMENT	2227:33	2227:33	16	tif
FIELD	2227:33	2227:33	17	tif
LEAF_NODE	2227:33	2227:33	18	tif
LEAF_NODE	2227:36	2227:36	16	,
ARGUMENT	2227:38	2227:38	16	chunk_no
FIELD	2227:38	2227:38	17	chunk_no
LEAF_NODE	2227:38	2227:38	18	chunk_no
LEAF_NODE	2227:46	2227:46	16	,
ARGUMENT	2228:8	2228:8	16	buf_data
FIELD	2228:8	2228:8	17	buf_data
LEAF_NODE	2228:8	2228:8	18	buf_data
LEAF_NODE	2228:16	2228:16	16	,
ARGUMENT	2228:18	2228:18	16	chunk_size
FIELD	2228:18	2228:18	17	chunk_size
LEAF_NODE	2228:18	2228:18	18	chunk_size
LEAF_NODE	2228:28	2228:28	16	)
LEAF_NODE	2228:29	2228:29	12	;
SELECTION	2229:3	2230:4	9	
KEYWORD	2229:3	2229:3	10	else
LEAF_NODE	2229:3	2229:3	11	else
STATEMENTS	2230:4	2230:4	10	
EXPR_STATEMENT	2230:4	2231:29	11	byte_count = TIFFReadRawStrip ( tif , chunk_no , buf_data , chunk_size ) ;
EXPR	2230:4	2230:4	12	byte_count = TIFFReadRawStrip ( tif , chunk_no , buf_data , chunk_size )
ASSIGN	2230:4	2230:17	13	byte_count = TIFFReadRawStrip ( tif , chunk_no , buf_data , chunk_size )
LVAL	2230:4	2230:4	14	byte_count
FIELD	2230:4	2230:4	15	byte_count
LEAF_NODE	2230:4	2230:4	16	byte_count
ASSIGN_OP	2230:15	2230:15	14	=
LEAF_NODE	2230:15	2230:15	15	=
RVAL	2230:17	2230:17	14	TIFFReadRawStrip ( tif , chunk_no , buf_data , chunk_size )
FUNCTION_CALL	2230:17	2231:28	15	TIFFReadRawStrip ( tif , chunk_no , buf_data , chunk_size )
CALLEE	2230:17	2230:17	16	TIFFReadRawStrip
LEAF_NODE	2230:17	2230:17	17	TIFFReadRawStrip
LEAF_NODE	2230:33	2230:33	16	(
ARGUMENT	2230:34	2230:34	16	tif
FIELD	2230:34	2230:34	17	tif
LEAF_NODE	2230:34	2230:34	18	tif
LEAF_NODE	2230:37	2230:37	16	,
ARGUMENT	2230:39	2230:39	16	chunk_no
FIELD	2230:39	2230:39	17	chunk_no
LEAF_NODE	2230:39	2230:39	18	chunk_no
LEAF_NODE	2230:47	2230:47	16	,
ARGUMENT	2231:8	2231:8	16	buf_data
FIELD	2231:8	2231:8	17	buf_data
LEAF_NODE	2231:8	2231:8	18	buf_data
LEAF_NODE	2231:16	2231:16	16	,
ARGUMENT	2231:18	2231:18	16	chunk_size
FIELD	2231:18	2231:18	17	chunk_size
LEAF_NODE	2231:18	2231:18	18	chunk_size
LEAF_NODE	2231:28	2231:28	16	)
LEAF_NODE	2231:29	2231:29	12	;
SELECTION	2232:3	2233:7	9	
KEYWORD	2232:3	2232:3	10	if
LEAF_NODE	2232:3	2232:3	11	if
LEAF_NODE	2232:6	2232:6	10	(
CONDITION	2232:7	2232:7	10	fillorder == FILLORDER_LSB2MSB
EXPR	2232:7	2232:20	11	fillorder == FILLORDER_LSB2MSB
FIELD	2232:7	2232:7	12	fillorder
LEAF_NODE	2232:7	2232:7	13	fillorder
EQ_OPERATOR	2232:17	2232:17	12	==
LEAF_NODE	2232:17	2232:17	13	==
FIELD	2232:20	2232:20	12	FILLORDER_LSB2MSB
LEAF_NODE	2232:20	2232:20	13	FILLORDER_LSB2MSB
LEAF_NODE	2232:37	2232:37	10	)
STATEMENTS	2233:7	2233:7	10	
EXPR_STATEMENT	2233:7	2233:44	11	TIFFReverseBits ( buf_data , byte_count ) ;
EXPR	2233:7	2233:7	12	TIFFReverseBits ( buf_data , byte_count )
FUNCTION_CALL	2233:7	2233:43	13	TIFFReverseBits ( buf_data , byte_count )
CALLEE	2233:7	2233:7	14	TIFFReverseBits
LEAF_NODE	2233:7	2233:7	15	TIFFReverseBits
LEAF_NODE	2233:22	2233:22	14	(
ARGUMENT	2233:23	2233:23	14	buf_data
FIELD	2233:23	2233:23	15	buf_data
LEAF_NODE	2233:23	2233:23	16	buf_data
LEAF_NODE	2233:31	2233:31	14	,
ARGUMENT	2233:33	2233:33	14	byte_count
FIELD	2233:33	2233:33	15	byte_count
LEAF_NODE	2233:33	2233:33	16	byte_count
LEAF_NODE	2233:43	2233:43	14	)
LEAF_NODE	2233:44	2233:44	12	;
LEAF_NODE	2234:2	2234:2	8	}
SELECTION	2234:4	2234:9	6	
KEYWORD	2234:4	2234:4	7	else
LEAF_NODE	2234:4	2234:4	8	else
STATEMENTS	2234:9	2243:2	7	
LEAF_NODE	2234:9	2234:9	8	{
STATEMENTS	2235:3	2239:3	8	
SELECTION	2235:3	2236:4	9	
KEYWORD	2235:3	2235:3	10	if
LEAF_NODE	2235:3	2235:3	11	if
LEAF_NODE	2235:6	2235:6	10	(
CONDITION	2235:7	2235:7	10	tiled_image
EXPR	2235:7	2235:7	11	tiled_image
FIELD	2235:7	2235:7	12	tiled_image
LEAF_NODE	2235:7	2235:7	13	tiled_image
LEAF_NODE	2235:18	2235:18	10	)
STATEMENTS	2236:4	2236:4	10	
EXPR_STATEMENT	2236:4	2238:17	11	byte_count = TIFFReadEncodedTile ( tif , chunk_no , buf_data , chunk_size ) ;
EXPR	2236:4	2236:4	12	byte_count = TIFFReadEncodedTile ( tif , chunk_no , buf_data , chunk_size )
ASSIGN	2236:4	2236:17	13	byte_count = TIFFReadEncodedTile ( tif , chunk_no , buf_data , chunk_size )
LVAL	2236:4	2236:4	14	byte_count
FIELD	2236:4	2236:4	15	byte_count
LEAF_NODE	2236:4	2236:4	16	byte_count
ASSIGN_OP	2236:15	2236:15	14	=
LEAF_NODE	2236:15	2236:15	15	=
RVAL	2236:17	2236:17	14	TIFFReadEncodedTile ( tif , chunk_no , buf_data , chunk_size )
FUNCTION_CALL	2236:17	2238:16	15	TIFFReadEncodedTile ( tif , chunk_no , buf_data , chunk_size )
CALLEE	2236:17	2236:17	16	TIFFReadEncodedTile
LEAF_NODE	2236:17	2236:17	17	TIFFReadEncodedTile
LEAF_NODE	2236:36	2236:36	16	(
ARGUMENT	2236:37	2236:37	16	tif
FIELD	2236:37	2236:37	17	tif
LEAF_NODE	2236:37	2236:37	18	tif
LEAF_NODE	2236:40	2236:40	16	,
ARGUMENT	2237:6	2237:6	16	chunk_no
FIELD	2237:6	2237:6	17	chunk_no
LEAF_NODE	2237:6	2237:6	18	chunk_no
LEAF_NODE	2237:14	2237:14	16	,
ARGUMENT	2237:16	2237:16	16	buf_data
FIELD	2237:16	2237:16	17	buf_data
LEAF_NODE	2237:16	2237:16	18	buf_data
LEAF_NODE	2237:24	2237:24	16	,
ARGUMENT	2238:6	2238:6	16	chunk_size
FIELD	2238:6	2238:6	17	chunk_size
LEAF_NODE	2238:6	2238:6	18	chunk_size
LEAF_NODE	2238:16	2238:16	16	)
LEAF_NODE	2238:17	2238:17	12	;
SELECTION	2239:3	2240:4	9	
KEYWORD	2239:3	2239:3	10	else
LEAF_NODE	2239:3	2239:3	11	else
STATEMENTS	2240:4	2240:4	10	
EXPR_STATEMENT	2240:4	2242:17	11	byte_count = TIFFReadEncodedStrip ( tif , chunk_no , buf_data , chunk_size ) ;
EXPR	2240:4	2240:4	12	byte_count = TIFFReadEncodedStrip ( tif , chunk_no , buf_data , chunk_size )
ASSIGN	2240:4	2240:17	13	byte_count = TIFFReadEncodedStrip ( tif , chunk_no , buf_data , chunk_size )
LVAL	2240:4	2240:4	14	byte_count
FIELD	2240:4	2240:4	15	byte_count
LEAF_NODE	2240:4	2240:4	16	byte_count
ASSIGN_OP	2240:15	2240:15	14	=
LEAF_NODE	2240:15	2240:15	15	=
RVAL	2240:17	2240:17	14	TIFFReadEncodedStrip ( tif , chunk_no , buf_data , chunk_size )
FUNCTION_CALL	2240:17	2242:16	15	TIFFReadEncodedStrip ( tif , chunk_no , buf_data , chunk_size )
CALLEE	2240:17	2240:17	16	TIFFReadEncodedStrip
LEAF_NODE	2240:17	2240:17	17	TIFFReadEncodedStrip
LEAF_NODE	2240:37	2240:37	16	(
ARGUMENT	2240:38	2240:38	16	tif
FIELD	2240:38	2240:38	17	tif
LEAF_NODE	2240:38	2240:38	18	tif
LEAF_NODE	2240:41	2240:41	16	,
ARGUMENT	2241:6	2241:6	16	chunk_no
FIELD	2241:6	2241:6	17	chunk_no
LEAF_NODE	2241:6	2241:6	18	chunk_no
LEAF_NODE	2241:14	2241:14	16	,
ARGUMENT	2241:16	2241:16	16	buf_data
FIELD	2241:16	2241:16	17	buf_data
LEAF_NODE	2241:16	2241:16	18	buf_data
LEAF_NODE	2241:24	2241:24	16	,
ARGUMENT	2242:6	2242:6	16	chunk_size
FIELD	2242:6	2242:6	17	chunk_size
LEAF_NODE	2242:6	2242:6	18	chunk_size
LEAF_NODE	2242:16	2242:16	16	)
LEAF_NODE	2242:17	2242:17	12	;
LEAF_NODE	2243:2	2243:2	8	}
SELECTION	2244:2	2244:22	6	
KEYWORD	2244:2	2244:2	7	if
LEAF_NODE	2244:2	2244:2	8	if
LEAF_NODE	2244:5	2244:5	7	(
CONDITION	2244:6	2244:6	7	byte_count < 0
EXPR	2244:6	2244:19	8	byte_count < 0
FIELD	2244:6	2244:6	9	byte_count
LEAF_NODE	2244:6	2244:6	10	byte_count
REL_OPERATOR	2244:17	2244:17	9	<
LEAF_NODE	2244:17	2244:17	10	<
FIELD	2244:19	2244:19	9	0
LEAF_NODE	2244:19	2244:19	10	0
LEAF_NODE	2244:20	2244:20	7	)
STATEMENTS	2244:22	2249:2	7	
LEAF_NODE	2244:22	2244:22	8	{
STATEMENTS	2245:3	2247:3	8	
EXPR_STATEMENT	2245:3	2246:45	9	TIFFError ( filename , "Can't read %s %d." , tiled_image ? "tile" : "strip" , chunk_no ) ;
EXPR	2245:3	2245:3	10	TIFFError ( filename , "Can't read %s %d." , tiled_image ? "tile" : "strip" , chunk_no )
FUNCTION_CALL	2245:3	2246:44	11	TIFFError ( filename , "Can't read %s %d." , tiled_image ? "tile" : "strip" , chunk_no )
CALLEE	2245:3	2245:3	12	TIFFError
LEAF_NODE	2245:3	2245:3	13	TIFFError
LEAF_NODE	2245:12	2245:12	12	(
ARGUMENT	2245:13	2245:13	12	filename
FIELD	2245:13	2245:13	13	filename
LEAF_NODE	2245:13	2245:13	14	filename
LEAF_NODE	2245:21	2245:21	12	,
ARGUMENT	2245:23	2245:23	12	"Can't read %s %d."
FIELD	2245:23	2245:23	13	"Can't read %s %d."
LEAF_NODE	2245:23	2245:23	14	"Can't read %s %d."
LEAF_NODE	2245:42	2245:42	12	,
ARGUMENT	2246:4	2246:4	12	tiled_image ? "tile" : "strip"
COND_EXPR	2246:4	2246:27	13	tiled_image ? "tile" : "strip"
CONDITION	2246:4	2246:4	14	tiled_image
FIELD	2246:4	2246:4	15	tiled_image
LEAF_NODE	2246:4	2246:4	16	tiled_image
LEAF_NODE	2246:16	2246:16	14	?
EXPR	2246:18	2246:18	14	"tile"
FIELD	2246:18	2246:18	15	"tile"
LEAF_NODE	2246:18	2246:18	16	"tile"
LEAF_NODE	2246:25	2246:25	14	:
FIELD	2246:27	2246:27	14	"strip"
LEAF_NODE	2246:27	2246:27	15	"strip"
LEAF_NODE	2246:34	2246:34	12	,
ARGUMENT	2246:36	2246:36	12	chunk_no
FIELD	2246:36	2246:36	13	chunk_no
LEAF_NODE	2246:36	2246:36	14	chunk_no
LEAF_NODE	2246:44	2246:44	12	)
LEAF_NODE	2246:45	2246:45	10	;
SELECTION	2247:3	2248:4	9	
KEYWORD	2247:3	2247:3	10	if
LEAF_NODE	2247:3	2247:3	11	if
LEAF_NODE	2247:6	2247:6	10	(
CONDITION	2247:7	2247:7	10	ascii85
EXPR	2247:7	2247:7	11	ascii85
FIELD	2247:7	2247:7	12	ascii85
LEAF_NODE	2247:7	2247:7	13	ascii85
LEAF_NODE	2247:14	2247:14	10	)
STATEMENTS	2248:4	2248:4	10	
EXPR_STATEMENT	2248:4	2248:24	11	Ascii85Put ( '\0' , fd ) ;
EXPR	2248:4	2248:4	12	Ascii85Put ( '\0' , fd )
FUNCTION_CALL	2248:4	2248:23	13	Ascii85Put ( '\0' , fd )
CALLEE	2248:4	2248:4	14	Ascii85Put
LEAF_NODE	2248:4	2248:4	15	Ascii85Put
LEAF_NODE	2248:14	2248:14	14	(
ARGUMENT	2248:15	2248:15	14	'\0'
FIELD	2248:15	2248:15	15	'\0'
LEAF_NODE	2248:15	2248:15	16	'\0'
LEAF_NODE	2248:19	2248:19	14	,
ARGUMENT	2248:21	2248:21	14	fd
FIELD	2248:21	2248:21	15	fd
LEAF_NODE	2248:21	2248:21	16	fd
LEAF_NODE	2248:23	2248:23	14	)
LEAF_NODE	2248:24	2248:24	12	;
LEAF_NODE	2249:2	2249:2	8	}
SELECTION	2254:2	2254:52	6	
KEYWORD	2254:2	2254:2	7	if
LEAF_NODE	2254:2	2254:2	8	if
LEAF_NODE	2254:5	2254:5	7	(
CONDITION	2254:6	2254:6	7	bitspersample == 16 && ! TIFFIsBigEndian ( tif )
EXPR	2254:6	2254:6	8	bitspersample == 16 && ! TIFFIsBigEndian ( tif )
AND	2254:6	2254:29	9	bitspersample == 16 && ! TIFFIsBigEndian ( tif )
EXPR	2254:6	2254:23	10	bitspersample == 16
FIELD	2254:6	2254:6	11	bitspersample
LEAF_NODE	2254:6	2254:6	12	bitspersample
EQ_OPERATOR	2254:20	2254:20	11	==
LEAF_NODE	2254:20	2254:20	12	==
FIELD	2254:23	2254:23	11	16
LEAF_NODE	2254:23	2254:23	12	16
LEAF_NODE	2254:26	2254:26	10	&&
EXPR	2254:29	2254:29	10	! TIFFIsBigEndian ( tif )
UNARY_EXPR	2254:29	2254:30	11	! TIFFIsBigEndian ( tif )
UNARY_OPERATOR	2254:29	2254:29	12	!
LEAF_NODE	2254:29	2254:29	13	!
FUNCTION_CALL	2254:30	2254:49	12	TIFFIsBigEndian ( tif )
CALLEE	2254:30	2254:30	13	TIFFIsBigEndian
LEAF_NODE	2254:30	2254:30	14	TIFFIsBigEndian
LEAF_NODE	2254:45	2254:45	13	(
ARGUMENT	2254:46	2254:46	13	tif
FIELD	2254:46	2254:46	14	tif
LEAF_NODE	2254:46	2254:46	15	tif
LEAF_NODE	2254:49	2254:49	13	)
LEAF_NODE	2254:50	2254:50	7	)
STATEMENTS	2254:52	2256:2	7	
LEAF_NODE	2254:52	2254:52	8	{
STATEMENTS	2255:3	2255:3	8	
EXPR_STATEMENT	2255:3	2255:37	9	PS_FlipBytes ( buf_data , byte_count ) ;
EXPR	2255:3	2255:3	10	PS_FlipBytes ( buf_data , byte_count )
FUNCTION_CALL	2255:3	2255:36	11	PS_FlipBytes ( buf_data , byte_count )
CALLEE	2255:3	2255:3	12	PS_FlipBytes
LEAF_NODE	2255:3	2255:3	13	PS_FlipBytes
LEAF_NODE	2255:15	2255:15	12	(
ARGUMENT	2255:16	2255:16	12	buf_data
FIELD	2255:16	2255:16	13	buf_data
LEAF_NODE	2255:16	2255:16	14	buf_data
LEAF_NODE	2255:24	2255:24	12	,
ARGUMENT	2255:26	2255:26	12	byte_count
FIELD	2255:26	2255:26	13	byte_count
LEAF_NODE	2255:26	2255:26	14	byte_count
LEAF_NODE	2255:36	2255:36	12	)
LEAF_NODE	2255:37	2255:37	10	;
LEAF_NODE	2256:2	2256:2	8	}
SELECTION	2264:2	2264:13	6	
KEYWORD	2264:2	2264:2	7	if
LEAF_NODE	2264:2	2264:2	8	if
LEAF_NODE	2264:5	2264:5	7	(
CONDITION	2264:6	2264:6	7	alpha
EXPR	2264:6	2264:6	8	alpha
FIELD	2264:6	2264:6	9	alpha
LEAF_NODE	2264:6	2264:6	10	alpha
LEAF_NODE	2264:11	2264:11	7	)
STATEMENTS	2264:13	2285:2	7	
LEAF_NODE	2264:13	2264:13	8	{
STATEMENTS	2265:3	2284:3	8	
SIMPLE_DECL	2265:3	2265:23	9	int adjust , int i , int j ; j = 0 ;
INIT_DECL_LIST	2265:3	2265:3	10	int adjust , int i , int j ; j = 0
VAR_DECL	2265:3	2265:7	11	int adjust
TYPE	2265:3	2265:3	12	int
TYPE_NAME	2265:3	2265:3	13	int
LEAF_NODE	2265:3	2265:3	14	int
NAME	2265:7	2265:7	12	adjust
LEAF_NODE	2265:7	2265:7	13	adjust
LEAF_NODE	2265:13	2265:13	11	,
INIT_DECL_LIST	2265:3	2265:3	11	int i , int j ; j = 0
VAR_DECL	2265:3	2265:15	12	int i
TYPE	2265:3	2265:3	13	int
TYPE_NAME	2265:3	2265:3	14	int
LEAF_NODE	2265:3	2265:3	15	int
NAME	2265:15	2265:15	13	i
LEAF_NODE	2265:15	2265:15	14	i
LEAF_NODE	2265:16	2265:16	12	,
VAR_DECL	2265:3	2265:18	12	int j ; j = 0
TYPE	2265:3	2265:3	13	int
TYPE_NAME	2265:3	2265:3	14	int
LEAF_NODE	2265:3	2265:3	15	int
NAME	2265:18	2265:18	13	j
LEAF_NODE	2265:18	2265:18	14	j
LEAF_NODE	0:0	0:0	13	;
INIT	2265:18	2265:18	13	j = 0
ASSIGN	2265:18	2265:22	14	j = 0
LVAL	2265:18	2265:18	15	j
NAME	2265:18	2265:18	16	j
LEAF_NODE	2265:18	2265:18	17	j
ASSIGN_OP	2265:20	2265:20	15	=
LEAF_NODE	2265:20	2265:20	16	=
RVAL	2265:22	2265:22	15	0
FIELD	2265:22	2265:22	16	0
LEAF_NODE	2265:22	2265:22	17	0
LEAF_NODE	2265:23	2265:23	10	;
SIMPLE_DECL	2266:3	2266:46	9	int ncomps ; ncomps = samplesperpixel - extrasamples ;
VAR_DECL	2266:3	2266:7	10	int ncomps ; ncomps = samplesperpixel - extrasamples
TYPE	2266:3	2266:3	11	int
TYPE_NAME	2266:3	2266:3	12	int
LEAF_NODE	2266:3	2266:3	13	int
NAME	2266:7	2266:7	11	ncomps
LEAF_NODE	2266:7	2266:7	12	ncomps
LEAF_NODE	0:0	0:0	11	;
INIT	2266:7	2266:7	11	ncomps = samplesperpixel - extrasamples
ASSIGN	2266:7	2266:16	12	ncomps = samplesperpixel - extrasamples
LVAL	2266:7	2266:7	13	ncomps
NAME	2266:7	2266:7	14	ncomps
LEAF_NODE	2266:7	2266:7	15	ncomps
ASSIGN_OP	2266:14	2266:14	13	=
LEAF_NODE	2266:14	2266:14	14	=
RVAL	2266:16	2266:34	13	samplesperpixel - extrasamples
FIELD	2266:16	2266:16	14	samplesperpixel
LEAF_NODE	2266:16	2266:16	15	samplesperpixel
LEAF_NODE	2266:32	2266:32	14	-
FIELD	2266:34	2266:34	14	extrasamples
LEAF_NODE	2266:34	2266:34	15	extrasamples
LEAF_NODE	2266:46	2266:46	10	;
ITERATION	2267:3	2267:62	9	
KEYWORD	2267:3	2267:3	10	for
LEAF_NODE	2267:3	2267:3	11	for
LEAF_NODE	2267:7	2267:7	10	(
FOR_INIT	2267:8	2267:13	10	i = 0 ;
EXPR	2267:8	2267:8	11	i = 0
ASSIGN	2267:8	2267:12	12	i = 0
LVAL	2267:8	2267:8	13	i
FIELD	2267:8	2267:8	14	i
LEAF_NODE	2267:8	2267:8	15	i
ASSIGN_OP	2267:10	2267:10	13	=
LEAF_NODE	2267:10	2267:10	14	=
RVAL	2267:12	2267:12	13	0
FIELD	2267:12	2267:12	14	0
LEAF_NODE	2267:12	2267:12	15	0
LEAF_NODE	2267:13	2267:13	11	;
CONDITION	2267:15	2267:15	10	( i + ncomps ) < byte_count
EXPR	2267:15	2267:30	11	( i + ncomps ) < byte_count
LEAF_NODE	2267:15	2267:15	12	(
FIELD	2267:16	2267:16	12	i
LEAF_NODE	2267:16	2267:16	13	i
LEAF_NODE	2267:18	2267:18	12	+
FIELD	2267:20	2267:20	12	ncomps
LEAF_NODE	2267:20	2267:20	13	ncomps
LEAF_NODE	2267:26	2267:26	12	)
REL_OPERATOR	2267:28	2267:28	12	<
LEAF_NODE	2267:28	2267:28	13	<
FIELD	2267:30	2267:30	12	byte_count
LEAF_NODE	2267:30	2267:30	13	byte_count
LEAF_NODE	2267:40	2267:40	10	;
FOR_EXPR	2267:42	2267:42	10	i += samplesperpixel
EXPR	2267:42	2267:42	11	i += samplesperpixel
ASSIGN	2267:42	2267:45	12	i += samplesperpixel
LVAL	2267:42	2267:42	13	i
FIELD	2267:42	2267:42	14	i
LEAF_NODE	2267:42	2267:42	15	i
ASSIGN_OP	2267:43	2267:43	13	+=
LEAF_NODE	2267:43	2267:43	14	+=
RVAL	2267:45	2267:45	13	samplesperpixel
FIELD	2267:45	2267:45	14	samplesperpixel
LEAF_NODE	2267:45	2267:45	15	samplesperpixel
LEAF_NODE	2267:60	2267:60	10	)
STATEMENTS	2267:62	2283:3	10	
LEAF_NODE	2267:62	2267:62	11	{
STATEMENTS	2268:4	2269:4	11	
EXPR_STATEMENT	2268:4	2268:39	12	adjust = 255 - buf_data [ i + ncomps ] ;
EXPR	2268:4	2268:4	13	adjust = 255 - buf_data [ i + ncomps ]
ASSIGN	2268:4	2268:13	14	adjust = 255 - buf_data [ i + ncomps ]
LVAL	2268:4	2268:4	15	adjust
FIELD	2268:4	2268:4	16	adjust
LEAF_NODE	2268:4	2268:4	17	adjust
ASSIGN_OP	2268:11	2268:11	15	=
LEAF_NODE	2268:11	2268:11	16	=
RVAL	2268:13	2268:19	15	255 - buf_data [ i + ncomps ]
FIELD	2268:13	2268:13	16	255
LEAF_NODE	2268:13	2268:13	17	255
LEAF_NODE	2268:17	2268:17	16	-
FIELD	2268:19	2268:38	16	buf_data [ i + ncomps ]
LEAF_NODE	2268:19	2268:19	17	buf_data
LEAF_NODE	2268:27	2268:27	17	[
EXPR	2268:28	2268:32	17	i + ncomps
FIELD	2268:28	2268:28	18	i
LEAF_NODE	2268:28	2268:28	19	i
LEAF_NODE	2268:30	2268:30	18	+
FIELD	2268:32	2268:32	18	ncomps
LEAF_NODE	2268:32	2268:32	19	ncomps
LEAF_NODE	2268:38	2268:38	17	]
LEAF_NODE	2268:39	2268:39	13	;
SELECTION	2269:4	2269:20	12	
KEYWORD	2269:4	2269:4	13	switch
LEAF_NODE	2269:4	2269:4	14	switch
LEAF_NODE	2269:11	2269:11	13	(
CONDITION	2269:12	2269:12	13	ncomps
EXPR	2269:12	2269:12	14	ncomps
FIELD	2269:12	2269:12	15	ncomps
LEAF_NODE	2269:12	2269:12	16	ncomps
LEAF_NODE	2269:18	2269:18	13	)
STATEMENTS	2269:20	2282:4	13	
LEAF_NODE	2269:20	2269:20	14	{
STATEMENTS	2270:5	2281:6	14	
LABEL	2270:5	2270:11	15	case 1 :
LEAF_NODE	2270:5	2270:5	16	case
LEAF_NODE	2270:10	2270:10	16	1
LEAF_NODE	2270:11	2270:11	16	:
EXPR_STATEMENT	2271:6	2271:42	15	buf_data [ j ++ ] = buf_data [ i ] + adjust ;
EXPR	2271:6	2271:6	16	buf_data [ j ++ ] = buf_data [ i ] + adjust
ASSIGN	2271:6	2271:22	17	buf_data [ j ++ ] = buf_data [ i ] + adjust
LVAL	2271:6	2271:6	18	buf_data [ j ++ ]
FIELD	2271:6	2271:18	19	buf_data [ j ++ ]
LEAF_NODE	2271:6	2271:6	20	buf_data
LEAF_NODE	2271:14	2271:14	20	[
EXPR	2271:15	2271:15	20	j ++
FIELD	2271:15	2271:16	21	j ++
LEAF_NODE	2271:15	2271:15	22	j
LEAF_NODE	2271:16	2271:16	22	++
LEAF_NODE	2271:18	2271:18	20	]
ASSIGN_OP	2271:20	2271:20	18	=
LEAF_NODE	2271:20	2271:20	19	=
RVAL	2271:22	2271:36	18	buf_data [ i ] + adjust
FIELD	2271:22	2271:32	19	buf_data [ i ]
LEAF_NODE	2271:22	2271:22	20	buf_data
LEAF_NODE	2271:30	2271:30	20	[
EXPR	2271:31	2271:31	20	i
FIELD	2271:31	2271:31	21	i
LEAF_NODE	2271:31	2271:31	22	i
LEAF_NODE	2271:32	2271:32	20	]
LEAF_NODE	2271:34	2271:34	19	+
FIELD	2271:36	2271:36	19	adjust
LEAF_NODE	2271:36	2271:36	20	adjust
LEAF_NODE	2271:42	2271:42	16	;
JUMP_STATEMENT	2272:6	2272:11	15	break DESTINATION ;
KEYWORD	2272:6	2272:6	16	break
LEAF_NODE	2272:6	2272:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2272:11	2272:11	16	;
LABEL	2273:5	2273:11	15	case 2 :
LEAF_NODE	2273:5	2273:5	16	case
LEAF_NODE	2273:10	2273:10	16	2
LEAF_NODE	2273:11	2273:11	16	:
EXPR_STATEMENT	2274:6	2274:42	15	buf_data [ j ++ ] = buf_data [ i ] + adjust ;
EXPR	2274:6	2274:6	16	buf_data [ j ++ ] = buf_data [ i ] + adjust
ASSIGN	2274:6	2274:22	17	buf_data [ j ++ ] = buf_data [ i ] + adjust
LVAL	2274:6	2274:6	18	buf_data [ j ++ ]
FIELD	2274:6	2274:18	19	buf_data [ j ++ ]
LEAF_NODE	2274:6	2274:6	20	buf_data
LEAF_NODE	2274:14	2274:14	20	[
EXPR	2274:15	2274:15	20	j ++
FIELD	2274:15	2274:16	21	j ++
LEAF_NODE	2274:15	2274:15	22	j
LEAF_NODE	2274:16	2274:16	22	++
LEAF_NODE	2274:18	2274:18	20	]
ASSIGN_OP	2274:20	2274:20	18	=
LEAF_NODE	2274:20	2274:20	19	=
RVAL	2274:22	2274:36	18	buf_data [ i ] + adjust
FIELD	2274:22	2274:32	19	buf_data [ i ]
LEAF_NODE	2274:22	2274:22	20	buf_data
LEAF_NODE	2274:30	2274:30	20	[
EXPR	2274:31	2274:31	20	i
FIELD	2274:31	2274:31	21	i
LEAF_NODE	2274:31	2274:31	22	i
LEAF_NODE	2274:32	2274:32	20	]
LEAF_NODE	2274:34	2274:34	19	+
FIELD	2274:36	2274:36	19	adjust
LEAF_NODE	2274:36	2274:36	20	adjust
LEAF_NODE	2274:42	2274:42	16	;
EXPR_STATEMENT	2275:6	2275:44	15	buf_data [ j ++ ] = buf_data [ i + 1 ] + adjust ;
EXPR	2275:6	2275:6	16	buf_data [ j ++ ] = buf_data [ i + 1 ] + adjust
ASSIGN	2275:6	2275:22	17	buf_data [ j ++ ] = buf_data [ i + 1 ] + adjust
LVAL	2275:6	2275:6	18	buf_data [ j ++ ]
FIELD	2275:6	2275:18	19	buf_data [ j ++ ]
LEAF_NODE	2275:6	2275:6	20	buf_data
LEAF_NODE	2275:14	2275:14	20	[
EXPR	2275:15	2275:15	20	j ++
FIELD	2275:15	2275:16	21	j ++
LEAF_NODE	2275:15	2275:15	22	j
LEAF_NODE	2275:16	2275:16	22	++
LEAF_NODE	2275:18	2275:18	20	]
ASSIGN_OP	2275:20	2275:20	18	=
LEAF_NODE	2275:20	2275:20	19	=
RVAL	2275:22	2275:38	18	buf_data [ i + 1 ] + adjust
FIELD	2275:22	2275:34	19	buf_data [ i + 1 ]
LEAF_NODE	2275:22	2275:22	20	buf_data
LEAF_NODE	2275:30	2275:30	20	[
EXPR	2275:31	2275:33	20	i + 1
FIELD	2275:31	2275:31	21	i
LEAF_NODE	2275:31	2275:31	22	i
LEAF_NODE	2275:32	2275:32	21	+
FIELD	2275:33	2275:33	21	1
LEAF_NODE	2275:33	2275:33	22	1
LEAF_NODE	2275:34	2275:34	20	]
LEAF_NODE	2275:36	2275:36	19	+
FIELD	2275:38	2275:38	19	adjust
LEAF_NODE	2275:38	2275:38	20	adjust
LEAF_NODE	2275:44	2275:44	16	;
JUMP_STATEMENT	2276:6	2276:11	15	break DESTINATION ;
KEYWORD	2276:6	2276:6	16	break
LEAF_NODE	2276:6	2276:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2276:11	2276:11	16	;
LABEL	2277:5	2277:11	15	case 3 :
LEAF_NODE	2277:5	2277:5	16	case
LEAF_NODE	2277:10	2277:10	16	3
LEAF_NODE	2277:11	2277:11	16	:
EXPR_STATEMENT	2278:6	2278:42	15	buf_data [ j ++ ] = buf_data [ i ] + adjust ;
EXPR	2278:6	2278:6	16	buf_data [ j ++ ] = buf_data [ i ] + adjust
ASSIGN	2278:6	2278:22	17	buf_data [ j ++ ] = buf_data [ i ] + adjust
LVAL	2278:6	2278:6	18	buf_data [ j ++ ]
FIELD	2278:6	2278:18	19	buf_data [ j ++ ]
LEAF_NODE	2278:6	2278:6	20	buf_data
LEAF_NODE	2278:14	2278:14	20	[
EXPR	2278:15	2278:15	20	j ++
FIELD	2278:15	2278:16	21	j ++
LEAF_NODE	2278:15	2278:15	22	j
LEAF_NODE	2278:16	2278:16	22	++
LEAF_NODE	2278:18	2278:18	20	]
ASSIGN_OP	2278:20	2278:20	18	=
LEAF_NODE	2278:20	2278:20	19	=
RVAL	2278:22	2278:36	18	buf_data [ i ] + adjust
FIELD	2278:22	2278:32	19	buf_data [ i ]
LEAF_NODE	2278:22	2278:22	20	buf_data
LEAF_NODE	2278:30	2278:30	20	[
EXPR	2278:31	2278:31	20	i
FIELD	2278:31	2278:31	21	i
LEAF_NODE	2278:31	2278:31	22	i
LEAF_NODE	2278:32	2278:32	20	]
LEAF_NODE	2278:34	2278:34	19	+
FIELD	2278:36	2278:36	19	adjust
LEAF_NODE	2278:36	2278:36	20	adjust
LEAF_NODE	2278:42	2278:42	16	;
EXPR_STATEMENT	2279:6	2279:44	15	buf_data [ j ++ ] = buf_data [ i + 1 ] + adjust ;
EXPR	2279:6	2279:6	16	buf_data [ j ++ ] = buf_data [ i + 1 ] + adjust
ASSIGN	2279:6	2279:22	17	buf_data [ j ++ ] = buf_data [ i + 1 ] + adjust
LVAL	2279:6	2279:6	18	buf_data [ j ++ ]
FIELD	2279:6	2279:18	19	buf_data [ j ++ ]
LEAF_NODE	2279:6	2279:6	20	buf_data
LEAF_NODE	2279:14	2279:14	20	[
EXPR	2279:15	2279:15	20	j ++
FIELD	2279:15	2279:16	21	j ++
LEAF_NODE	2279:15	2279:15	22	j
LEAF_NODE	2279:16	2279:16	22	++
LEAF_NODE	2279:18	2279:18	20	]
ASSIGN_OP	2279:20	2279:20	18	=
LEAF_NODE	2279:20	2279:20	19	=
RVAL	2279:22	2279:38	18	buf_data [ i + 1 ] + adjust
FIELD	2279:22	2279:34	19	buf_data [ i + 1 ]
LEAF_NODE	2279:22	2279:22	20	buf_data
LEAF_NODE	2279:30	2279:30	20	[
EXPR	2279:31	2279:33	20	i + 1
FIELD	2279:31	2279:31	21	i
LEAF_NODE	2279:31	2279:31	22	i
LEAF_NODE	2279:32	2279:32	21	+
FIELD	2279:33	2279:33	21	1
LEAF_NODE	2279:33	2279:33	22	1
LEAF_NODE	2279:34	2279:34	20	]
LEAF_NODE	2279:36	2279:36	19	+
FIELD	2279:38	2279:38	19	adjust
LEAF_NODE	2279:38	2279:38	20	adjust
LEAF_NODE	2279:44	2279:44	16	;
EXPR_STATEMENT	2280:6	2280:44	15	buf_data [ j ++ ] = buf_data [ i + 2 ] + adjust ;
EXPR	2280:6	2280:6	16	buf_data [ j ++ ] = buf_data [ i + 2 ] + adjust
ASSIGN	2280:6	2280:22	17	buf_data [ j ++ ] = buf_data [ i + 2 ] + adjust
LVAL	2280:6	2280:6	18	buf_data [ j ++ ]
FIELD	2280:6	2280:18	19	buf_data [ j ++ ]
LEAF_NODE	2280:6	2280:6	20	buf_data
LEAF_NODE	2280:14	2280:14	20	[
EXPR	2280:15	2280:15	20	j ++
FIELD	2280:15	2280:16	21	j ++
LEAF_NODE	2280:15	2280:15	22	j
LEAF_NODE	2280:16	2280:16	22	++
LEAF_NODE	2280:18	2280:18	20	]
ASSIGN_OP	2280:20	2280:20	18	=
LEAF_NODE	2280:20	2280:20	19	=
RVAL	2280:22	2280:38	18	buf_data [ i + 2 ] + adjust
FIELD	2280:22	2280:34	19	buf_data [ i + 2 ]
LEAF_NODE	2280:22	2280:22	20	buf_data
LEAF_NODE	2280:30	2280:30	20	[
EXPR	2280:31	2280:33	20	i + 2
FIELD	2280:31	2280:31	21	i
LEAF_NODE	2280:31	2280:31	22	i
LEAF_NODE	2280:32	2280:32	21	+
FIELD	2280:33	2280:33	21	2
LEAF_NODE	2280:33	2280:33	22	2
LEAF_NODE	2280:34	2280:34	20	]
LEAF_NODE	2280:36	2280:36	19	+
FIELD	2280:38	2280:38	19	adjust
LEAF_NODE	2280:38	2280:38	20	adjust
LEAF_NODE	2280:44	2280:44	16	;
JUMP_STATEMENT	2281:6	2281:11	15	break DESTINATION ;
KEYWORD	2281:6	2281:6	16	break
LEAF_NODE	2281:6	2281:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2281:11	2281:11	16	;
LEAF_NODE	2282:4	2282:4	14	}
LEAF_NODE	2283:3	2283:3	11	}
EXPR_STATEMENT	2284:3	2284:18	9	byte_count -= j ;
EXPR	2284:3	2284:3	10	byte_count -= j
ASSIGN	2284:3	2284:17	11	byte_count -= j
LVAL	2284:3	2284:3	12	byte_count
FIELD	2284:3	2284:3	13	byte_count
LEAF_NODE	2284:3	2284:3	14	byte_count
ASSIGN_OP	2284:14	2284:14	12	-=
LEAF_NODE	2284:14	2284:14	13	-=
RVAL	2284:17	2284:17	12	j
FIELD	2284:17	2284:17	13	j
LEAF_NODE	2284:17	2284:17	14	j
LEAF_NODE	2284:18	2284:18	10	;
LEAF_NODE	2285:2	2285:2	8	}
SELECTION	2287:2	2287:15	6	
KEYWORD	2287:2	2287:2	7	if
LEAF_NODE	2287:2	2287:2	8	if
LEAF_NODE	2287:5	2287:5	7	(
CONDITION	2287:6	2287:6	7	ascii85
EXPR	2287:6	2287:6	8	ascii85
FIELD	2287:6	2287:6	9	ascii85
LEAF_NODE	2287:6	2287:6	10	ascii85
LEAF_NODE	2287:13	2287:13	7	)
STATEMENTS	2287:15	2297:2	7	
LEAF_NODE	2287:15	2287:15	8	{
STATEMENTS	2289:3	2294:3	8	
EXPR_STATEMENT	2289:3	2289:70	9	ascii85_l = Ascii85EncodeBlock ( ascii85_p , 1 , buf_data , byte_count ) ;
EXPR	2289:3	2289:3	10	ascii85_l = Ascii85EncodeBlock ( ascii85_p , 1 , buf_data , byte_count )
ASSIGN	2289:3	2289:15	11	ascii85_l = Ascii85EncodeBlock ( ascii85_p , 1 , buf_data , byte_count )
LVAL	2289:3	2289:3	12	ascii85_l
FIELD	2289:3	2289:3	13	ascii85_l
LEAF_NODE	2289:3	2289:3	14	ascii85_l
ASSIGN_OP	2289:13	2289:13	12	=
LEAF_NODE	2289:13	2289:13	13	=
RVAL	2289:15	2289:15	12	Ascii85EncodeBlock ( ascii85_p , 1 , buf_data , byte_count )
FUNCTION_CALL	2289:15	2289:69	13	Ascii85EncodeBlock ( ascii85_p , 1 , buf_data , byte_count )
CALLEE	2289:15	2289:15	14	Ascii85EncodeBlock
LEAF_NODE	2289:15	2289:15	15	Ascii85EncodeBlock
LEAF_NODE	2289:33	2289:33	14	(
ARGUMENT	2289:34	2289:34	14	ascii85_p
FIELD	2289:34	2289:34	15	ascii85_p
LEAF_NODE	2289:34	2289:34	16	ascii85_p
LEAF_NODE	2289:43	2289:43	14	,
ARGUMENT	2289:45	2289:45	14	1
FIELD	2289:45	2289:45	15	1
LEAF_NODE	2289:45	2289:45	16	1
LEAF_NODE	2289:46	2289:46	14	,
ARGUMENT	2289:48	2289:48	14	buf_data
FIELD	2289:48	2289:48	15	buf_data
LEAF_NODE	2289:48	2289:48	16	buf_data
LEAF_NODE	2289:56	2289:56	14	,
ARGUMENT	2289:58	2289:58	14	byte_count
FIELD	2289:58	2289:58	15	byte_count
LEAF_NODE	2289:58	2289:58	16	byte_count
LEAF_NODE	2289:69	2289:69	14	)
LEAF_NODE	2289:70	2289:70	10	;
SELECTION	2291:3	2292:4	9	
KEYWORD	2291:3	2291:3	10	if
LEAF_NODE	2291:3	2291:3	11	if
LEAF_NODE	2291:6	2291:6	10	(
CONDITION	2291:8	2291:8	10	ascii85_l > 0
EXPR	2291:8	2291:20	11	ascii85_l > 0
FIELD	2291:8	2291:8	12	ascii85_l
LEAF_NODE	2291:8	2291:8	13	ascii85_l
REL_OPERATOR	2291:18	2291:18	12	>
LEAF_NODE	2291:18	2291:18	13	>
FIELD	2291:20	2291:20	12	0
LEAF_NODE	2291:20	2291:20	13	0
LEAF_NODE	2291:22	2291:22	10	)
STATEMENTS	2292:4	2292:4	10	
EXPR_STATEMENT	2292:4	2292:41	11	fwrite ( ascii85_p , ascii85_l , 1 , fd ) ;
EXPR	2292:4	2292:4	12	fwrite ( ascii85_p , ascii85_l , 1 , fd )
FUNCTION_CALL	2292:4	2292:40	13	fwrite ( ascii85_p , ascii85_l , 1 , fd )
CALLEE	2292:4	2292:4	14	fwrite
LEAF_NODE	2292:4	2292:4	15	fwrite
LEAF_NODE	2292:10	2292:10	14	(
ARGUMENT	2292:12	2292:12	14	ascii85_p
FIELD	2292:12	2292:12	15	ascii85_p
LEAF_NODE	2292:12	2292:12	16	ascii85_p
LEAF_NODE	2292:21	2292:21	14	,
ARGUMENT	2292:23	2292:23	14	ascii85_l
FIELD	2292:23	2292:23	15	ascii85_l
LEAF_NODE	2292:23	2292:23	16	ascii85_l
LEAF_NODE	2292:32	2292:32	14	,
ARGUMENT	2292:34	2292:34	14	1
FIELD	2292:34	2292:34	15	1
LEAF_NODE	2292:34	2292:34	16	1
LEAF_NODE	2292:35	2292:35	14	,
ARGUMENT	2292:37	2292:37	14	fd
FIELD	2292:37	2292:37	15	fd
LEAF_NODE	2292:37	2292:37	16	fd
LEAF_NODE	2292:40	2292:40	14	)
LEAF_NODE	2292:41	2292:41	12	;
ITERATION	2294:3	2295:4	9	
KEYWORD	2294:3	2294:3	10	for
LEAF_NODE	2294:3	2294:3	11	for
LEAF_NODE	2294:7	2294:7	10	(
FOR_INIT	2294:8	2294:21	10	cp = buf_data ;
EXPR	2294:8	2294:8	11	cp = buf_data
ASSIGN	2294:8	2294:13	12	cp = buf_data
LVAL	2294:8	2294:8	13	cp
FIELD	2294:8	2294:8	14	cp
LEAF_NODE	2294:8	2294:8	15	cp
ASSIGN_OP	2294:11	2294:11	13	=
LEAF_NODE	2294:11	2294:11	14	=
RVAL	2294:13	2294:13	13	buf_data
FIELD	2294:13	2294:13	14	buf_data
LEAF_NODE	2294:13	2294:13	15	buf_data
LEAF_NODE	2294:21	2294:21	11	;
CONDITION	2294:23	2294:23	10	byte_count > 0
EXPR	2294:23	2294:36	11	byte_count > 0
FIELD	2294:23	2294:23	12	byte_count
LEAF_NODE	2294:23	2294:23	13	byte_count
REL_OPERATOR	2294:34	2294:34	12	>
LEAF_NODE	2294:34	2294:34	13	>
FIELD	2294:36	2294:36	12	0
LEAF_NODE	2294:36	2294:36	13	0
LEAF_NODE	2294:37	2294:37	10	;
FOR_EXPR	2294:39	2294:39	10	byte_count --
EXPR	2294:39	2294:39	11	byte_count --
FIELD	2294:39	2294:49	12	byte_count --
LEAF_NODE	2294:39	2294:39	13	byte_count
LEAF_NODE	2294:49	2294:49	13	--
LEAF_NODE	2294:51	2294:51	10	)
STATEMENTS	2295:4	2295:4	10	
EXPR_STATEMENT	2295:4	2295:25	11	Ascii85Put ( * cp ++ , fd ) ;
EXPR	2295:4	2295:4	12	Ascii85Put ( * cp ++ , fd )
FUNCTION_CALL	2295:4	2295:24	13	Ascii85Put ( * cp ++ , fd )
CALLEE	2295:4	2295:4	14	Ascii85Put
LEAF_NODE	2295:4	2295:4	15	Ascii85Put
LEAF_NODE	2295:14	2295:14	14	(
ARGUMENT	2295:15	2295:15	14	* cp ++
UNARY_EXPR	2295:15	2295:16	15	* cp ++
UNARY_OPERATOR	2295:15	2295:15	16	*
LEAF_NODE	2295:15	2295:15	17	*
FIELD	2295:16	2295:18	16	cp ++
LEAF_NODE	2295:16	2295:16	17	cp
LEAF_NODE	2295:18	2295:18	17	++
LEAF_NODE	2295:20	2295:20	14	,
ARGUMENT	2295:22	2295:22	14	fd
FIELD	2295:22	2295:22	15	fd
LEAF_NODE	2295:22	2295:22	16	fd
LEAF_NODE	2295:24	2295:24	14	)
LEAF_NODE	2295:25	2295:25	12	;
LEAF_NODE	2297:2	2297:2	8	}
SELECTION	2298:2	2299:2	6	
KEYWORD	2298:2	2298:2	7	else
LEAF_NODE	2298:2	2298:2	8	else
STATEMENTS	2299:2	2310:2	7	
LEAF_NODE	2299:2	2299:2	8	{
STATEMENTS	2300:3	2300:3	8	
ITERATION	2300:3	2300:53	9	
KEYWORD	2300:3	2300:3	10	for
LEAF_NODE	2300:3	2300:3	11	for
LEAF_NODE	2300:7	2300:7	10	(
FOR_INIT	2300:8	2300:21	10	cp = buf_data ;
EXPR	2300:8	2300:8	11	cp = buf_data
ASSIGN	2300:8	2300:13	12	cp = buf_data
LVAL	2300:8	2300:8	13	cp
FIELD	2300:8	2300:8	14	cp
LEAF_NODE	2300:8	2300:8	15	cp
ASSIGN_OP	2300:11	2300:11	13	=
LEAF_NODE	2300:11	2300:11	14	=
RVAL	2300:13	2300:13	13	buf_data
FIELD	2300:13	2300:13	14	buf_data
LEAF_NODE	2300:13	2300:13	15	buf_data
LEAF_NODE	2300:21	2300:21	11	;
CONDITION	2300:23	2300:23	10	byte_count > 0
EXPR	2300:23	2300:36	11	byte_count > 0
FIELD	2300:23	2300:23	12	byte_count
LEAF_NODE	2300:23	2300:23	13	byte_count
REL_OPERATOR	2300:34	2300:34	12	>
LEAF_NODE	2300:34	2300:34	13	>
FIELD	2300:36	2300:36	12	0
LEAF_NODE	2300:36	2300:36	13	0
LEAF_NODE	2300:37	2300:37	10	;
FOR_EXPR	2300:39	2300:39	10	byte_count --
EXPR	2300:39	2300:39	11	byte_count --
FIELD	2300:39	2300:49	12	byte_count --
LEAF_NODE	2300:39	2300:39	13	byte_count
LEAF_NODE	2300:49	2300:49	13	--
LEAF_NODE	2300:51	2300:51	10	)
STATEMENTS	2300:53	2309:3	10	
LEAF_NODE	2300:53	2300:53	11	{
STATEMENTS	2301:4	2305:4	11	
EXPR_STATEMENT	2301:4	2301:33	12	putc ( hex [ ( ( * cp ) >> 4 ) & 0xf ] , fd ) ;
EXPR	2301:4	2301:4	13	putc ( hex [ ( ( * cp ) >> 4 ) & 0xf ] , fd )
FUNCTION_CALL	2301:4	2301:32	14	putc ( hex [ ( ( * cp ) >> 4 ) & 0xf ] , fd )
CALLEE	2301:4	2301:4	15	putc
LEAF_NODE	2301:4	2301:4	16	putc
LEAF_NODE	2301:8	2301:8	15	(
ARGUMENT	2301:9	2301:9	15	hex [ ( ( * cp ) >> 4 ) & 0xf ]
FIELD	2301:9	2301:27	16	hex [ ( ( * cp ) >> 4 ) & 0xf ]
LEAF_NODE	2301:9	2301:9	17	hex
LEAF_NODE	2301:12	2301:12	17	[
EXPR	2301:13	2301:24	17	( ( * cp ) >> 4 ) & 0xf
LEAF_NODE	2301:13	2301:13	18	(
LEAF_NODE	2301:14	2301:14	18	(
UNARY_EXPR	2301:15	2301:16	18	* cp
UNARY_OPERATOR	2301:15	2301:15	19	*
LEAF_NODE	2301:15	2301:15	20	*
FIELD	2301:16	2301:16	19	cp
LEAF_NODE	2301:16	2301:16	20	cp
LEAF_NODE	2301:18	2301:18	18	)
LEAF_NODE	2301:19	2301:19	18	>>
FIELD	2301:21	2301:21	18	4
LEAF_NODE	2301:21	2301:21	19	4
LEAF_NODE	2301:22	2301:22	18	)
LEAF_NODE	2301:23	2301:23	18	&
FIELD	2301:24	2301:24	18	0xf
LEAF_NODE	2301:24	2301:24	19	0xf
LEAF_NODE	2301:27	2301:27	17	]
LEAF_NODE	2301:28	2301:28	15	,
ARGUMENT	2301:30	2301:30	15	fd
FIELD	2301:30	2301:30	16	fd
LEAF_NODE	2301:30	2301:30	17	fd
LEAF_NODE	2301:32	2301:32	15	)
LEAF_NODE	2301:33	2301:33	13	;
EXPR_STATEMENT	2302:4	2302:28	12	putc ( hex [ ( * cp ) & 0xf ] , fd ) ;
EXPR	2302:4	2302:4	13	putc ( hex [ ( * cp ) & 0xf ] , fd )
FUNCTION_CALL	2302:4	2302:27	14	putc ( hex [ ( * cp ) & 0xf ] , fd )
CALLEE	2302:4	2302:4	15	putc
LEAF_NODE	2302:4	2302:4	16	putc
LEAF_NODE	2302:8	2302:8	15	(
ARGUMENT	2302:9	2302:9	15	hex [ ( * cp ) & 0xf ]
FIELD	2302:9	2302:22	16	hex [ ( * cp ) & 0xf ]
LEAF_NODE	2302:9	2302:9	17	hex
LEAF_NODE	2302:12	2302:12	17	[
EXPR	2302:13	2302:19	17	( * cp ) & 0xf
LEAF_NODE	2302:13	2302:13	18	(
UNARY_EXPR	2302:14	2302:15	18	* cp
UNARY_OPERATOR	2302:14	2302:14	19	*
LEAF_NODE	2302:14	2302:14	20	*
FIELD	2302:15	2302:15	19	cp
LEAF_NODE	2302:15	2302:15	20	cp
LEAF_NODE	2302:17	2302:17	18	)
LEAF_NODE	2302:18	2302:18	18	&
FIELD	2302:19	2302:19	18	0xf
LEAF_NODE	2302:19	2302:19	19	0xf
LEAF_NODE	2302:22	2302:22	17	]
LEAF_NODE	2302:23	2302:23	15	,
ARGUMENT	2302:25	2302:25	15	fd
FIELD	2302:25	2302:25	16	fd
LEAF_NODE	2302:25	2302:25	17	fd
LEAF_NODE	2302:27	2302:27	15	)
LEAF_NODE	2302:28	2302:28	13	;
EXPR_STATEMENT	2303:4	2303:8	12	cp ++ ;
EXPR	2303:4	2303:4	13	cp ++
FIELD	2303:4	2303:6	14	cp ++
LEAF_NODE	2303:4	2303:4	15	cp
LEAF_NODE	2303:6	2303:6	15	++
LEAF_NODE	2303:8	2303:8	13	;
SELECTION	2305:4	2305:25	12	
KEYWORD	2305:4	2305:4	13	if
LEAF_NODE	2305:4	2305:4	14	if
LEAF_NODE	2305:7	2305:7	13	(
CONDITION	2305:8	2305:8	13	-- breaklen <= 0
EXPR	2305:8	2305:22	14	-- breaklen <= 0
LEAF_NODE	2305:8	2305:8	15	--
FIELD	2305:10	2305:10	15	breaklen
LEAF_NODE	2305:10	2305:10	16	breaklen
REL_OPERATOR	2305:19	2305:19	15	<=
LEAF_NODE	2305:19	2305:19	16	<=
FIELD	2305:22	2305:22	15	0
LEAF_NODE	2305:22	2305:22	16	0
LEAF_NODE	2305:23	2305:23	13	)
STATEMENTS	2305:25	2308:4	13	
LEAF_NODE	2305:25	2305:25	14	{
STATEMENTS	2306:5	2307:5	14	
EXPR_STATEMENT	2306:5	2306:19	15	putc ( '\n' , fd ) ;
EXPR	2306:5	2306:5	16	putc ( '\n' , fd )
FUNCTION_CALL	2306:5	2306:18	17	putc ( '\n' , fd )
CALLEE	2306:5	2306:5	18	putc
LEAF_NODE	2306:5	2306:5	19	putc
LEAF_NODE	2306:9	2306:9	18	(
ARGUMENT	2306:10	2306:10	18	'\n'
FIELD	2306:10	2306:10	19	'\n'
LEAF_NODE	2306:10	2306:10	20	'\n'
LEAF_NODE	2306:14	2306:14	18	,
ARGUMENT	2306:16	2306:16	18	fd
FIELD	2306:16	2306:16	19	fd
LEAF_NODE	2306:16	2306:16	20	fd
LEAF_NODE	2306:18	2306:18	18	)
LEAF_NODE	2306:19	2306:19	16	;
EXPR_STATEMENT	2307:5	2307:23	15	breaklen = MAXLINE ;
EXPR	2307:5	2307:5	16	breaklen = MAXLINE
ASSIGN	2307:5	2307:16	17	breaklen = MAXLINE
LVAL	2307:5	2307:5	18	breaklen
FIELD	2307:5	2307:5	19	breaklen
LEAF_NODE	2307:5	2307:5	20	breaklen
ASSIGN_OP	2307:14	2307:14	18	=
LEAF_NODE	2307:14	2307:14	19	=
RVAL	2307:16	2307:16	18	MAXLINE
FIELD	2307:16	2307:16	19	MAXLINE
LEAF_NODE	2307:16	2307:16	20	MAXLINE
LEAF_NODE	2307:23	2307:23	16	;
LEAF_NODE	2308:4	2308:4	14	}
LEAF_NODE	2309:3	2309:3	11	}
LEAF_NODE	2310:2	2310:2	8	}
SELECTION	2312:2	2312:18	6	
KEYWORD	2312:2	2312:2	7	if
LEAF_NODE	2312:2	2312:2	8	if
LEAF_NODE	2312:5	2312:5	7	(
CONDITION	2312:7	2312:7	7	! ascii85
EXPR	2312:7	2312:7	8	! ascii85
UNARY_EXPR	2312:7	2312:8	9	! ascii85
UNARY_OPERATOR	2312:7	2312:7	10	!
LEAF_NODE	2312:7	2312:7	11	!
FIELD	2312:8	2312:8	10	ascii85
LEAF_NODE	2312:8	2312:8	11	ascii85
LEAF_NODE	2312:16	2312:16	7	)
STATEMENTS	2312:18	2316:2	7	
LEAF_NODE	2312:18	2312:18	8	{
STATEMENTS	2313:3	2315:3	8	
SELECTION	2313:3	2314:4	9	
KEYWORD	2313:3	2313:3	10	if
LEAF_NODE	2313:3	2313:3	11	if
LEAF_NODE	2313:6	2313:6	10	(
CONDITION	2313:8	2313:8	10	level2 || level3
EXPR	2313:8	2313:8	11	level2 || level3
OR	2313:8	2313:18	12	level2 || level3
EXPR	2313:8	2313:8	13	level2
FIELD	2313:8	2313:8	14	level2
LEAF_NODE	2313:8	2313:8	15	level2
LEAF_NODE	2313:15	2313:15	13	||
EXPR	2313:18	2313:18	13	level3
FIELD	2313:18	2313:18	14	level3
LEAF_NODE	2313:18	2313:18	15	level3
LEAF_NODE	2313:25	2313:25	10	)
STATEMENTS	2314:4	2314:4	10	
EXPR_STATEMENT	2314:4	2314:19	11	putc ( '>' , fd ) ;
EXPR	2314:4	2314:4	12	putc ( '>' , fd )
FUNCTION_CALL	2314:4	2314:18	13	putc ( '>' , fd )
CALLEE	2314:4	2314:4	14	putc
LEAF_NODE	2314:4	2314:4	15	putc
LEAF_NODE	2314:8	2314:8	14	(
ARGUMENT	2314:10	2314:10	14	'>'
FIELD	2314:10	2314:10	15	'>'
LEAF_NODE	2314:10	2314:10	16	'>'
LEAF_NODE	2314:13	2314:13	14	,
ARGUMENT	2314:15	2314:15	14	fd
FIELD	2314:15	2314:15	15	fd
LEAF_NODE	2314:15	2314:15	16	fd
LEAF_NODE	2314:18	2314:18	14	)
LEAF_NODE	2314:19	2314:19	12	;
EXPR_STATEMENT	2315:3	2315:17	9	putc ( '\n' , fd ) ;
EXPR	2315:3	2315:3	10	putc ( '\n' , fd )
FUNCTION_CALL	2315:3	2315:16	11	putc ( '\n' , fd )
CALLEE	2315:3	2315:3	12	putc
LEAF_NODE	2315:3	2315:3	13	putc
LEAF_NODE	2315:7	2315:7	12	(
ARGUMENT	2315:8	2315:8	12	'\n'
FIELD	2315:8	2315:8	13	'\n'
LEAF_NODE	2315:8	2315:8	14	'\n'
LEAF_NODE	2315:12	2315:12	12	,
ARGUMENT	2315:14	2315:14	12	fd
FIELD	2315:14	2315:14	13	fd
LEAF_NODE	2315:14	2315:14	14	fd
LEAF_NODE	2315:16	2315:16	12	)
LEAF_NODE	2315:17	2315:17	10	;
LEAF_NODE	2316:2	2316:2	8	}
SELECTION	2318:2	2319:3	6	
KEYWORD	2318:2	2318:2	7	else
LEAF_NODE	2318:2	2318:2	8	else
STATEMENTS	2319:3	2319:3	7	
EXPR_STATEMENT	2319:3	2319:19	8	Ascii85Flush ( fd ) ;
EXPR	2319:3	2319:3	9	Ascii85Flush ( fd )
FUNCTION_CALL	2319:3	2319:18	10	Ascii85Flush ( fd )
CALLEE	2319:3	2319:3	11	Ascii85Flush
LEAF_NODE	2319:3	2319:3	12	Ascii85Flush
LEAF_NODE	2319:15	2319:15	11	(
ARGUMENT	2319:16	2319:16	11	fd
FIELD	2319:16	2319:16	12	fd
LEAF_NODE	2319:16	2319:16	13	fd
LEAF_NODE	2319:18	2319:18	11	)
LEAF_NODE	2319:19	2319:19	9	;
LEAF_NODE	2321:1	2321:1	5	}
SELECTION	2324:1	2325:5	3	
KEYWORD	2324:1	2324:1	4	if
LEAF_NODE	2324:1	2324:1	5	if
LEAF_NODE	2324:4	2324:4	4	(
CONDITION	2324:6	2324:6	4	ascii85_p
EXPR	2324:6	2324:6	5	ascii85_p
FIELD	2324:6	2324:6	6	ascii85_p
LEAF_NODE	2324:6	2324:6	7	ascii85_p
LEAF_NODE	2324:16	2324:16	4	)
STATEMENTS	2325:5	2325:5	4	
EXPR_STATEMENT	2325:5	2325:27	5	_TIFFfree ( ascii85_p ) ;
EXPR	2325:5	2325:5	6	_TIFFfree ( ascii85_p )
FUNCTION_CALL	2325:5	2325:26	7	_TIFFfree ( ascii85_p )
CALLEE	2325:5	2325:5	8	_TIFFfree
LEAF_NODE	2325:5	2325:5	9	_TIFFfree
LEAF_NODE	2325:14	2325:14	8	(
ARGUMENT	2325:16	2325:16	8	ascii85_p
FIELD	2325:16	2325:16	9	ascii85_p
LEAF_NODE	2325:16	2325:16	10	ascii85_p
LEAF_NODE	2325:26	2325:26	8	)
LEAF_NODE	2325:27	2325:27	6	;
EXPR_STATEMENT	2328:1	2328:20	3	_TIFFfree ( buf_data ) ;
EXPR	2328:1	2328:1	4	_TIFFfree ( buf_data )
FUNCTION_CALL	2328:1	2328:19	5	_TIFFfree ( buf_data )
CALLEE	2328:1	2328:1	6	_TIFFfree
LEAF_NODE	2328:1	2328:1	7	_TIFFfree
LEAF_NODE	2328:10	2328:10	6	(
ARGUMENT	2328:11	2328:11	6	buf_data
FIELD	2328:11	2328:11	7	buf_data
LEAF_NODE	2328:11	2328:11	8	buf_data
LEAF_NODE	2328:19	2328:19	6	)
LEAF_NODE	2328:20	2328:20	4	;
EXPR_STATEMENT	2330:1	2330:25	3	fputs ( "%%EndData\n" , fd ) ;
EXPR	2330:1	2330:1	4	fputs ( "%%EndData\n" , fd )
FUNCTION_CALL	2330:1	2330:24	5	fputs ( "%%EndData\n" , fd )
CALLEE	2330:1	2330:1	6	fputs
LEAF_NODE	2330:1	2330:1	7	fputs
LEAF_NODE	2330:6	2330:6	6	(
ARGUMENT	2330:7	2330:7	6	"%%EndData\n"
FIELD	2330:7	2330:7	7	"%%EndData\n"
LEAF_NODE	2330:7	2330:7	8	"%%EndData\n"
LEAF_NODE	2330:20	2330:20	6	,
ARGUMENT	2330:22	2330:22	6	fd
FIELD	2330:22	2330:22	7	fd
LEAF_NODE	2330:22	2330:22	8	fd
LEAF_NODE	2330:24	2330:24	6	)
LEAF_NODE	2330:25	2330:25	4	;
LEAF_NODE	2332:1	2332:1	3	return
LEAF_NODE	2332:7	2332:7	3	(
LEAF_NODE	2332:8	2332:8	3	TRUE
LEAF_NODE	2332:12	2332:12	3	)
LEAF_NODE	2332:13	2332:13	3	;
LEAF_NODE	2333:0	2333:0	2	}
FUNCTION_DEF	2335:0	2396:0	1	
RETURN_TYPE	2335:0	2335:0	2	void
TYPE_NAME	2335:0	2335:0	3	void
LEAF_NODE	2335:0	2335:0	4	void
FUNCTION_NAME	2336:0	2336:0	2	PSpage
LEAF_NODE	2336:0	2336:0	3	PSpage
PARAMETER_LIST	2336:6	2336:46	2	( FILE * fd , TIFF * tif , uint32 w , uint32 h )
LEAF_NODE	2336:6	2336:6	3	(
PARAMETER_DECL	2336:7	2336:13	3	FILE * fd
TYPE	2336:7	2336:11	4	FILE *
TYPE_NAME	2336:7	2336:7	5	FILE
LEAF_NODE	2336:7	2336:7	6	FILE
POINTER	2336:11	2336:11	5	*
LEAF_NODE	2336:11	2336:11	6	*
NAME	2336:13	2336:13	4	fd
LEAF_NODE	2336:13	2336:13	5	fd
LEAF_NODE	2336:15	2336:15	3	,
PARAMETER_DECL	2336:17	2336:23	3	TIFF * tif
TYPE	2336:17	2336:21	4	TIFF *
TYPE_NAME	2336:17	2336:17	5	TIFF
LEAF_NODE	2336:17	2336:17	6	TIFF
POINTER	2336:21	2336:21	5	*
LEAF_NODE	2336:21	2336:21	6	*
NAME	2336:23	2336:23	4	tif
LEAF_NODE	2336:23	2336:23	5	tif
LEAF_NODE	2336:26	2336:26	3	,
PARAMETER_DECL	2336:28	2336:35	3	uint32 w
TYPE	2336:28	2336:28	4	uint32
TYPE_NAME	2336:28	2336:28	5	uint32
LEAF_NODE	2336:28	2336:28	6	uint32
NAME	2336:35	2336:35	4	w
LEAF_NODE	2336:35	2336:35	5	w
LEAF_NODE	2336:36	2336:36	3	,
PARAMETER_DECL	2336:38	2336:45	3	uint32 h
TYPE	2336:38	2336:38	4	uint32
TYPE_NAME	2336:38	2336:38	5	uint32
LEAF_NODE	2336:38	2336:38	6	uint32
NAME	2336:45	2336:45	4	h
LEAF_NODE	2336:45	2336:45	5	h
LEAF_NODE	2336:46	2336:46	3	)
LEAF_NODE	2337:0	2337:0	2	{
STATEMENTS	2338:1	2395:1	2	
SIMPLE_DECL	2338:1	2338:25	3	char * imageOp ; imageOp = "image" ;
VAR_DECL	2338:1	2338:8	4	char * imageOp ; imageOp = "image"
TYPE	2338:1	2338:6	5	char *
TYPE_NAME	2338:1	2338:1	6	char
LEAF_NODE	2338:1	2338:1	7	char
POINTER	2338:6	2338:6	6	*
LEAF_NODE	2338:6	2338:6	7	*
NAME	2338:8	2338:8	5	imageOp
LEAF_NODE	2338:8	2338:8	6	imageOp
LEAF_NODE	0:0	0:0	5	;
INIT	2338:8	2338:8	5	imageOp = "image"
ASSIGN	2338:8	2338:18	6	imageOp = "image"
LVAL	2338:8	2338:8	7	imageOp
NAME	2338:8	2338:8	8	imageOp
LEAF_NODE	2338:8	2338:8	9	imageOp
ASSIGN_OP	2338:16	2338:16	7	=
LEAF_NODE	2338:16	2338:16	8	=
RVAL	2338:18	2338:18	7	"image"
FIELD	2338:18	2338:18	8	"image"
LEAF_NODE	2338:18	2338:18	9	"image"
LEAF_NODE	2338:25	2338:25	4	;
SELECTION	2340:1	2341:2	3	
KEYWORD	2340:1	2340:1	4	if
LEAF_NODE	2340:1	2340:1	5	if
LEAF_NODE	2340:4	2340:4	4	(
CONDITION	2340:6	2340:6	4	useImagemask && ( bitspersample == 1 )
EXPR	2340:6	2340:6	5	useImagemask && ( bitspersample == 1 )
AND	2340:6	2340:22	6	useImagemask && ( bitspersample == 1 )
EXPR	2340:6	2340:6	7	useImagemask
FIELD	2340:6	2340:6	8	useImagemask
LEAF_NODE	2340:6	2340:6	9	useImagemask
LEAF_NODE	2340:19	2340:19	7	&&
EXPR	2340:22	2340:41	7	( bitspersample == 1 )
LEAF_NODE	2340:22	2340:22	8	(
FIELD	2340:23	2340:23	8	bitspersample
LEAF_NODE	2340:23	2340:23	9	bitspersample
EQ_OPERATOR	2340:37	2340:37	8	==
LEAF_NODE	2340:37	2340:37	9	==
FIELD	2340:40	2340:40	8	1
LEAF_NODE	2340:40	2340:40	9	1
LEAF_NODE	2340:41	2340:41	8	)
LEAF_NODE	2340:43	2340:43	4	)
STATEMENTS	2341:2	2341:2	4	
EXPR_STATEMENT	2341:2	2341:23	5	imageOp = "imagemask" ;
EXPR	2341:2	2341:2	6	imageOp = "imagemask"
ASSIGN	2341:2	2341:12	7	imageOp = "imagemask"
LVAL	2341:2	2341:2	8	imageOp
FIELD	2341:2	2341:2	9	imageOp
LEAF_NODE	2341:2	2341:2	10	imageOp
ASSIGN_OP	2341:10	2341:10	8	=
LEAF_NODE	2341:10	2341:10	9	=
RVAL	2341:12	2341:12	8	"imagemask"
FIELD	2341:12	2341:12	9	"imagemask"
LEAF_NODE	2341:12	2341:12	10	"imagemask"
LEAF_NODE	2341:23	2341:23	6	;
SELECTION	2343:1	2344:2	3	
KEYWORD	2343:1	2343:1	4	if
LEAF_NODE	2343:1	2343:1	5	if
LEAF_NODE	2343:4	2343:4	4	(
CONDITION	2343:5	2343:5	4	( level2 || level3 ) && PS_Lvl2page ( fd , tif , w , h )
EXPR	2343:5	2343:5	5	( level2 || level3 ) && PS_Lvl2page ( fd , tif , w , h )
AND	2343:5	2343:27	6	( level2 || level3 ) && PS_Lvl2page ( fd , tif , w , h )
EXPR	2343:5	2343:22	7	( level2 || level3 )
LEAF_NODE	2343:5	2343:5	8	(
OR	2343:6	2343:16	8	level2 || level3
EXPR	2343:6	2343:6	9	level2
FIELD	2343:6	2343:6	10	level2
LEAF_NODE	2343:6	2343:6	11	level2
LEAF_NODE	2343:13	2343:13	9	||
EXPR	2343:16	2343:16	9	level3
FIELD	2343:16	2343:16	10	level3
LEAF_NODE	2343:16	2343:16	11	level3
LEAF_NODE	2343:22	2343:22	8	)
LEAF_NODE	2343:24	2343:24	7	&&
EXPR	2343:27	2343:27	7	PS_Lvl2page ( fd , tif , w , h )
FUNCTION_CALL	2343:27	2343:52	8	PS_Lvl2page ( fd , tif , w , h )
CALLEE	2343:27	2343:27	9	PS_Lvl2page
LEAF_NODE	2343:27	2343:27	10	PS_Lvl2page
LEAF_NODE	2343:38	2343:38	9	(
ARGUMENT	2343:39	2343:39	9	fd
FIELD	2343:39	2343:39	10	fd
LEAF_NODE	2343:39	2343:39	11	fd
LEAF_NODE	2343:41	2343:41	9	,
ARGUMENT	2343:43	2343:43	9	tif
FIELD	2343:43	2343:43	10	tif
LEAF_NODE	2343:43	2343:43	11	tif
LEAF_NODE	2343:46	2343:46	9	,
ARGUMENT	2343:48	2343:48	9	w
FIELD	2343:48	2343:48	10	w
LEAF_NODE	2343:48	2343:48	11	w
LEAF_NODE	2343:49	2343:49	9	,
ARGUMENT	2343:51	2343:51	9	h
FIELD	2343:51	2343:51	10	h
LEAF_NODE	2343:51	2343:51	11	h
LEAF_NODE	2343:52	2343:52	9	)
LEAF_NODE	2343:53	2343:53	4	)
STATEMENTS	2344:2	2344:2	4	
JUMP_STATEMENT	2344:2	2344:8	5	return DESTINATION ;
KEYWORD	2344:2	2344:2	6	return
LEAF_NODE	2344:2	2344:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	2344:8	2344:8	6	;
LEAF_NODE	2345:1	2345:1	3	ps_bytesperrow
LEAF_NODE	2345:16	2345:16	3	=
LEAF_NODE	2345:18	2345:18	3	tf_bytesperrow
LEAF_NODE	2345:33	2345:33	3	-
LEAF_NODE	2345:35	2345:35	3	(
LEAF_NODE	2345:36	2345:36	3	extrasamples
LEAF_NODE	2345:49	2345:49	3	*
LEAF_NODE	2345:51	2345:51	3	bitspersample
LEAF_NODE	2345:65	2345:65	3	/
LEAF_NODE	2345:67	2345:67	3	8
LEAF_NODE	2345:68	2345:68	3	)
EXPR_STATEMENT	2345:69	2345:71	3	* w ;
EXPR	2345:69	2345:69	4	* w
UNARY_EXPR	2345:69	2345:70	5	* w
UNARY_OPERATOR	2345:69	2345:69	6	*
LEAF_NODE	2345:69	2345:69	7	*
FIELD	2345:70	2345:70	6	w
LEAF_NODE	2345:70	2345:70	7	w
LEAF_NODE	2345:71	2345:71	4	;
SELECTION	2346:1	2346:22	3	
KEYWORD	2346:1	2346:1	4	switch
LEAF_NODE	2346:1	2346:1	5	switch
LEAF_NODE	2346:8	2346:8	4	(
CONDITION	2346:9	2346:9	4	photometric
EXPR	2346:9	2346:9	5	photometric
FIELD	2346:9	2346:9	6	photometric
LEAF_NODE	2346:9	2346:9	7	photometric
LEAF_NODE	2346:20	2346:20	4	)
STATEMENTS	2346:22	2394:1	4	
LEAF_NODE	2346:22	2346:22	5	{
STATEMENTS	2347:1	2393:2	5	
LABEL	2347:1	2347:21	6	case PHOTOMETRIC_RGB :
LEAF_NODE	2347:1	2347:1	7	case
LEAF_NODE	2347:6	2347:6	7	PHOTOMETRIC_RGB
LEAF_NODE	2347:21	2347:21	7	:
SELECTION	2348:2	2348:50	6	
KEYWORD	2348:2	2348:2	7	if
LEAF_NODE	2348:2	2348:2	8	if
LEAF_NODE	2348:5	2348:5	7	(
CONDITION	2348:6	2348:6	7	planarconfiguration == PLANARCONFIG_CONTIG
EXPR	2348:6	2348:29	8	planarconfiguration == PLANARCONFIG_CONTIG
FIELD	2348:6	2348:6	9	planarconfiguration
LEAF_NODE	2348:6	2348:6	10	planarconfiguration
EQ_OPERATOR	2348:26	2348:26	9	==
LEAF_NODE	2348:26	2348:26	10	==
FIELD	2348:29	2348:29	9	PLANARCONFIG_CONTIG
LEAF_NODE	2348:29	2348:29	10	PLANARCONFIG_CONTIG
LEAF_NODE	2348:48	2348:48	7	)
STATEMENTS	2348:50	2352:2	7	
LEAF_NODE	2348:50	2348:50	8	{
STATEMENTS	2349:3	2351:3	8	
EXPR_STATEMENT	2349:3	2349:35	9	fprintf ( fd , "%s" , RGBcolorimage ) ;
EXPR	2349:3	2349:3	10	fprintf ( fd , "%s" , RGBcolorimage )
FUNCTION_CALL	2349:3	2349:34	11	fprintf ( fd , "%s" , RGBcolorimage )
CALLEE	2349:3	2349:3	12	fprintf
LEAF_NODE	2349:3	2349:3	13	fprintf
LEAF_NODE	2349:10	2349:10	12	(
ARGUMENT	2349:11	2349:11	12	fd
FIELD	2349:11	2349:11	13	fd
LEAF_NODE	2349:11	2349:11	14	fd
LEAF_NODE	2349:13	2349:13	12	,
ARGUMENT	2349:15	2349:15	12	"%s"
FIELD	2349:15	2349:15	13	"%s"
LEAF_NODE	2349:15	2349:15	14	"%s"
LEAF_NODE	2349:19	2349:19	12	,
ARGUMENT	2349:21	2349:21	12	RGBcolorimage
FIELD	2349:21	2349:21	13	RGBcolorimage
LEAF_NODE	2349:21	2349:21	14	RGBcolorimage
LEAF_NODE	2349:34	2349:34	12	)
LEAF_NODE	2349:35	2349:35	10	;
EXPR_STATEMENT	2350:3	2350:37	9	PSColorContigPreamble ( fd , w , h , 3 ) ;
EXPR	2350:3	2350:3	10	PSColorContigPreamble ( fd , w , h , 3 )
FUNCTION_CALL	2350:3	2350:36	11	PSColorContigPreamble ( fd , w , h , 3 )
CALLEE	2350:3	2350:3	12	PSColorContigPreamble
LEAF_NODE	2350:3	2350:3	13	PSColorContigPreamble
LEAF_NODE	2350:24	2350:24	12	(
ARGUMENT	2350:25	2350:25	12	fd
FIELD	2350:25	2350:25	13	fd
LEAF_NODE	2350:25	2350:25	14	fd
LEAF_NODE	2350:27	2350:27	12	,
ARGUMENT	2350:29	2350:29	12	w
FIELD	2350:29	2350:29	13	w
LEAF_NODE	2350:29	2350:29	14	w
LEAF_NODE	2350:30	2350:30	12	,
ARGUMENT	2350:32	2350:32	12	h
FIELD	2350:32	2350:32	13	h
LEAF_NODE	2350:32	2350:32	14	h
LEAF_NODE	2350:33	2350:33	12	,
ARGUMENT	2350:35	2350:35	12	3
FIELD	2350:35	2350:35	13	3
LEAF_NODE	2350:35	2350:35	14	3
LEAF_NODE	2350:36	2350:36	12	)
LEAF_NODE	2350:37	2350:37	10	;
EXPR_STATEMENT	2351:3	2351:38	9	PSDataColorContig ( fd , tif , w , h , 3 ) ;
EXPR	2351:3	2351:3	10	PSDataColorContig ( fd , tif , w , h , 3 )
FUNCTION_CALL	2351:3	2351:37	11	PSDataColorContig ( fd , tif , w , h , 3 )
CALLEE	2351:3	2351:3	12	PSDataColorContig
LEAF_NODE	2351:3	2351:3	13	PSDataColorContig
LEAF_NODE	2351:20	2351:20	12	(
ARGUMENT	2351:21	2351:21	12	fd
FIELD	2351:21	2351:21	13	fd
LEAF_NODE	2351:21	2351:21	14	fd
LEAF_NODE	2351:23	2351:23	12	,
ARGUMENT	2351:25	2351:25	12	tif
FIELD	2351:25	2351:25	13	tif
LEAF_NODE	2351:25	2351:25	14	tif
LEAF_NODE	2351:28	2351:28	12	,
ARGUMENT	2351:30	2351:30	12	w
FIELD	2351:30	2351:30	13	w
LEAF_NODE	2351:30	2351:30	14	w
LEAF_NODE	2351:31	2351:31	12	,
ARGUMENT	2351:33	2351:33	12	h
FIELD	2351:33	2351:33	13	h
LEAF_NODE	2351:33	2351:33	14	h
LEAF_NODE	2351:34	2351:34	12	,
ARGUMENT	2351:36	2351:36	12	3
FIELD	2351:36	2351:36	13	3
LEAF_NODE	2351:36	2351:36	14	3
LEAF_NODE	2351:37	2351:37	12	)
LEAF_NODE	2351:38	2351:38	10	;
LEAF_NODE	2352:2	2352:2	8	}
SELECTION	2352:4	2352:9	6	
KEYWORD	2352:4	2352:4	7	else
LEAF_NODE	2352:4	2352:4	8	else
STATEMENTS	2352:9	2355:2	7	
LEAF_NODE	2352:9	2352:9	8	{
STATEMENTS	2353:3	2354:3	8	
EXPR_STATEMENT	2353:3	2353:39	9	PSColorSeparatePreamble ( fd , w , h , 3 ) ;
EXPR	2353:3	2353:3	10	PSColorSeparatePreamble ( fd , w , h , 3 )
FUNCTION_CALL	2353:3	2353:38	11	PSColorSeparatePreamble ( fd , w , h , 3 )
CALLEE	2353:3	2353:3	12	PSColorSeparatePreamble
LEAF_NODE	2353:3	2353:3	13	PSColorSeparatePreamble
LEAF_NODE	2353:26	2353:26	12	(
ARGUMENT	2353:27	2353:27	12	fd
FIELD	2353:27	2353:27	13	fd
LEAF_NODE	2353:27	2353:27	14	fd
LEAF_NODE	2353:29	2353:29	12	,
ARGUMENT	2353:31	2353:31	12	w
FIELD	2353:31	2353:31	13	w
LEAF_NODE	2353:31	2353:31	14	w
LEAF_NODE	2353:32	2353:32	12	,
ARGUMENT	2353:34	2353:34	12	h
FIELD	2353:34	2353:34	13	h
LEAF_NODE	2353:34	2353:34	14	h
LEAF_NODE	2353:35	2353:35	12	,
ARGUMENT	2353:37	2353:37	12	3
FIELD	2353:37	2353:37	13	3
LEAF_NODE	2353:37	2353:37	14	3
LEAF_NODE	2353:38	2353:38	12	)
LEAF_NODE	2353:39	2353:39	10	;
EXPR_STATEMENT	2354:3	2354:40	9	PSDataColorSeparate ( fd , tif , w , h , 3 ) ;
EXPR	2354:3	2354:3	10	PSDataColorSeparate ( fd , tif , w , h , 3 )
FUNCTION_CALL	2354:3	2354:39	11	PSDataColorSeparate ( fd , tif , w , h , 3 )
CALLEE	2354:3	2354:3	12	PSDataColorSeparate
LEAF_NODE	2354:3	2354:3	13	PSDataColorSeparate
LEAF_NODE	2354:22	2354:22	12	(
ARGUMENT	2354:23	2354:23	12	fd
FIELD	2354:23	2354:23	13	fd
LEAF_NODE	2354:23	2354:23	14	fd
LEAF_NODE	2354:25	2354:25	12	,
ARGUMENT	2354:27	2354:27	12	tif
FIELD	2354:27	2354:27	13	tif
LEAF_NODE	2354:27	2354:27	14	tif
LEAF_NODE	2354:30	2354:30	12	,
ARGUMENT	2354:32	2354:32	12	w
FIELD	2354:32	2354:32	13	w
LEAF_NODE	2354:32	2354:32	14	w
LEAF_NODE	2354:33	2354:33	12	,
ARGUMENT	2354:35	2354:35	12	h
FIELD	2354:35	2354:35	13	h
LEAF_NODE	2354:35	2354:35	14	h
LEAF_NODE	2354:36	2354:36	12	,
ARGUMENT	2354:38	2354:38	12	3
FIELD	2354:38	2354:38	13	3
LEAF_NODE	2354:38	2354:38	14	3
LEAF_NODE	2354:39	2354:39	12	)
LEAF_NODE	2354:40	2354:40	10	;
LEAF_NODE	2355:2	2355:2	8	}
JUMP_STATEMENT	2356:2	2356:7	6	break DESTINATION ;
KEYWORD	2356:2	2356:2	7	break
LEAF_NODE	2356:2	2356:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2356:7	2356:7	7	;
LABEL	2357:1	2357:27	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	2357:1	2357:1	7	case
LEAF_NODE	2357:6	2357:6	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	2357:27	2357:27	7	:
SELECTION	2359:2	2359:50	6	
KEYWORD	2359:2	2359:2	7	if
LEAF_NODE	2359:2	2359:2	8	if
LEAF_NODE	2359:5	2359:5	7	(
CONDITION	2359:6	2359:6	7	planarconfiguration == PLANARCONFIG_CONTIG
EXPR	2359:6	2359:29	8	planarconfiguration == PLANARCONFIG_CONTIG
FIELD	2359:6	2359:6	9	planarconfiguration
LEAF_NODE	2359:6	2359:6	10	planarconfiguration
EQ_OPERATOR	2359:26	2359:26	9	==
LEAF_NODE	2359:26	2359:26	10	==
FIELD	2359:29	2359:29	9	PLANARCONFIG_CONTIG
LEAF_NODE	2359:29	2359:29	10	PLANARCONFIG_CONTIG
LEAF_NODE	2359:48	2359:48	7	)
STATEMENTS	2359:50	2362:2	7	
LEAF_NODE	2359:50	2359:50	8	{
STATEMENTS	2360:3	2361:3	8	
EXPR_STATEMENT	2360:3	2360:37	9	PSColorContigPreamble ( fd , w , h , 4 ) ;
EXPR	2360:3	2360:3	10	PSColorContigPreamble ( fd , w , h , 4 )
FUNCTION_CALL	2360:3	2360:36	11	PSColorContigPreamble ( fd , w , h , 4 )
CALLEE	2360:3	2360:3	12	PSColorContigPreamble
LEAF_NODE	2360:3	2360:3	13	PSColorContigPreamble
LEAF_NODE	2360:24	2360:24	12	(
ARGUMENT	2360:25	2360:25	12	fd
FIELD	2360:25	2360:25	13	fd
LEAF_NODE	2360:25	2360:25	14	fd
LEAF_NODE	2360:27	2360:27	12	,
ARGUMENT	2360:29	2360:29	12	w
FIELD	2360:29	2360:29	13	w
LEAF_NODE	2360:29	2360:29	14	w
LEAF_NODE	2360:30	2360:30	12	,
ARGUMENT	2360:32	2360:32	12	h
FIELD	2360:32	2360:32	13	h
LEAF_NODE	2360:32	2360:32	14	h
LEAF_NODE	2360:33	2360:33	12	,
ARGUMENT	2360:35	2360:35	12	4
FIELD	2360:35	2360:35	13	4
LEAF_NODE	2360:35	2360:35	14	4
LEAF_NODE	2360:36	2360:36	12	)
LEAF_NODE	2360:37	2360:37	10	;
EXPR_STATEMENT	2361:3	2361:38	9	PSDataColorContig ( fd , tif , w , h , 4 ) ;
EXPR	2361:3	2361:3	10	PSDataColorContig ( fd , tif , w , h , 4 )
FUNCTION_CALL	2361:3	2361:37	11	PSDataColorContig ( fd , tif , w , h , 4 )
CALLEE	2361:3	2361:3	12	PSDataColorContig
LEAF_NODE	2361:3	2361:3	13	PSDataColorContig
LEAF_NODE	2361:20	2361:20	12	(
ARGUMENT	2361:21	2361:21	12	fd
FIELD	2361:21	2361:21	13	fd
LEAF_NODE	2361:21	2361:21	14	fd
LEAF_NODE	2361:23	2361:23	12	,
ARGUMENT	2361:25	2361:25	12	tif
FIELD	2361:25	2361:25	13	tif
LEAF_NODE	2361:25	2361:25	14	tif
LEAF_NODE	2361:28	2361:28	12	,
ARGUMENT	2361:30	2361:30	12	w
FIELD	2361:30	2361:30	13	w
LEAF_NODE	2361:30	2361:30	14	w
LEAF_NODE	2361:31	2361:31	12	,
ARGUMENT	2361:33	2361:33	12	h
FIELD	2361:33	2361:33	13	h
LEAF_NODE	2361:33	2361:33	14	h
LEAF_NODE	2361:34	2361:34	12	,
ARGUMENT	2361:36	2361:36	12	4
FIELD	2361:36	2361:36	13	4
LEAF_NODE	2361:36	2361:36	14	4
LEAF_NODE	2361:37	2361:37	12	)
LEAF_NODE	2361:38	2361:38	10	;
LEAF_NODE	2362:2	2362:2	8	}
SELECTION	2362:4	2362:9	6	
KEYWORD	2362:4	2362:4	7	else
LEAF_NODE	2362:4	2362:4	8	else
STATEMENTS	2362:9	2365:2	7	
LEAF_NODE	2362:9	2362:9	8	{
STATEMENTS	2363:3	2364:3	8	
EXPR_STATEMENT	2363:3	2363:39	9	PSColorSeparatePreamble ( fd , w , h , 4 ) ;
EXPR	2363:3	2363:3	10	PSColorSeparatePreamble ( fd , w , h , 4 )
FUNCTION_CALL	2363:3	2363:38	11	PSColorSeparatePreamble ( fd , w , h , 4 )
CALLEE	2363:3	2363:3	12	PSColorSeparatePreamble
LEAF_NODE	2363:3	2363:3	13	PSColorSeparatePreamble
LEAF_NODE	2363:26	2363:26	12	(
ARGUMENT	2363:27	2363:27	12	fd
FIELD	2363:27	2363:27	13	fd
LEAF_NODE	2363:27	2363:27	14	fd
LEAF_NODE	2363:29	2363:29	12	,
ARGUMENT	2363:31	2363:31	12	w
FIELD	2363:31	2363:31	13	w
LEAF_NODE	2363:31	2363:31	14	w
LEAF_NODE	2363:32	2363:32	12	,
ARGUMENT	2363:34	2363:34	12	h
FIELD	2363:34	2363:34	13	h
LEAF_NODE	2363:34	2363:34	14	h
LEAF_NODE	2363:35	2363:35	12	,
ARGUMENT	2363:37	2363:37	12	4
FIELD	2363:37	2363:37	13	4
LEAF_NODE	2363:37	2363:37	14	4
LEAF_NODE	2363:38	2363:38	12	)
LEAF_NODE	2363:39	2363:39	10	;
EXPR_STATEMENT	2364:3	2364:40	9	PSDataColorSeparate ( fd , tif , w , h , 4 ) ;
EXPR	2364:3	2364:3	10	PSDataColorSeparate ( fd , tif , w , h , 4 )
FUNCTION_CALL	2364:3	2364:39	11	PSDataColorSeparate ( fd , tif , w , h , 4 )
CALLEE	2364:3	2364:3	12	PSDataColorSeparate
LEAF_NODE	2364:3	2364:3	13	PSDataColorSeparate
LEAF_NODE	2364:22	2364:22	12	(
ARGUMENT	2364:23	2364:23	12	fd
FIELD	2364:23	2364:23	13	fd
LEAF_NODE	2364:23	2364:23	14	fd
LEAF_NODE	2364:25	2364:25	12	,
ARGUMENT	2364:27	2364:27	12	tif
FIELD	2364:27	2364:27	13	tif
LEAF_NODE	2364:27	2364:27	14	tif
LEAF_NODE	2364:30	2364:30	12	,
ARGUMENT	2364:32	2364:32	12	w
FIELD	2364:32	2364:32	13	w
LEAF_NODE	2364:32	2364:32	14	w
LEAF_NODE	2364:33	2364:33	12	,
ARGUMENT	2364:35	2364:35	12	h
FIELD	2364:35	2364:35	13	h
LEAF_NODE	2364:35	2364:35	14	h
LEAF_NODE	2364:36	2364:36	12	,
ARGUMENT	2364:38	2364:38	12	4
FIELD	2364:38	2364:38	13	4
LEAF_NODE	2364:38	2364:38	14	4
LEAF_NODE	2364:39	2364:39	12	)
LEAF_NODE	2364:40	2364:40	10	;
LEAF_NODE	2365:2	2365:2	8	}
JUMP_STATEMENT	2366:2	2366:7	6	break DESTINATION ;
KEYWORD	2366:2	2366:2	7	break
LEAF_NODE	2366:2	2366:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2366:7	2366:7	7	;
LABEL	2367:1	2367:25	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	2367:1	2367:1	7	case
LEAF_NODE	2367:6	2367:6	7	PHOTOMETRIC_PALETTE
LEAF_NODE	2367:25	2367:25	7	:
EXPR_STATEMENT	2368:2	2368:34	6	fprintf ( fd , "%s" , RGBcolorimage ) ;
EXPR	2368:2	2368:2	7	fprintf ( fd , "%s" , RGBcolorimage )
FUNCTION_CALL	2368:2	2368:33	8	fprintf ( fd , "%s" , RGBcolorimage )
CALLEE	2368:2	2368:2	9	fprintf
LEAF_NODE	2368:2	2368:2	10	fprintf
LEAF_NODE	2368:9	2368:9	9	(
ARGUMENT	2368:10	2368:10	9	fd
FIELD	2368:10	2368:10	10	fd
LEAF_NODE	2368:10	2368:10	11	fd
LEAF_NODE	2368:12	2368:12	9	,
ARGUMENT	2368:14	2368:14	9	"%s"
FIELD	2368:14	2368:14	10	"%s"
LEAF_NODE	2368:14	2368:14	11	"%s"
LEAF_NODE	2368:18	2368:18	9	,
ARGUMENT	2368:20	2368:20	9	RGBcolorimage
FIELD	2368:20	2368:20	10	RGBcolorimage
LEAF_NODE	2368:20	2368:20	11	RGBcolorimage
LEAF_NODE	2368:33	2368:33	9	)
LEAF_NODE	2368:34	2368:34	7	;
EXPR_STATEMENT	2369:2	2369:55	6	PhotoshopBanner ( fd , w , h , 1 , 3 , "false 3 colorimage" ) ;
EXPR	2369:2	2369:2	7	PhotoshopBanner ( fd , w , h , 1 , 3 , "false 3 colorimage" )
FUNCTION_CALL	2369:2	2369:54	8	PhotoshopBanner ( fd , w , h , 1 , 3 , "false 3 colorimage" )
CALLEE	2369:2	2369:2	9	PhotoshopBanner
LEAF_NODE	2369:2	2369:2	10	PhotoshopBanner
LEAF_NODE	2369:17	2369:17	9	(
ARGUMENT	2369:18	2369:18	9	fd
FIELD	2369:18	2369:18	10	fd
LEAF_NODE	2369:18	2369:18	11	fd
LEAF_NODE	2369:20	2369:20	9	,
ARGUMENT	2369:22	2369:22	9	w
FIELD	2369:22	2369:22	10	w
LEAF_NODE	2369:22	2369:22	11	w
LEAF_NODE	2369:23	2369:23	9	,
ARGUMENT	2369:25	2369:25	9	h
FIELD	2369:25	2369:25	10	h
LEAF_NODE	2369:25	2369:25	11	h
LEAF_NODE	2369:26	2369:26	9	,
ARGUMENT	2369:28	2369:28	9	1
FIELD	2369:28	2369:28	10	1
LEAF_NODE	2369:28	2369:28	11	1
LEAF_NODE	2369:29	2369:29	9	,
ARGUMENT	2369:31	2369:31	9	3
FIELD	2369:31	2369:31	10	3
LEAF_NODE	2369:31	2369:31	11	3
LEAF_NODE	2369:32	2369:32	9	,
ARGUMENT	2369:34	2369:34	9	"false 3 colorimage"
FIELD	2369:34	2369:34	10	"false 3 colorimage"
LEAF_NODE	2369:34	2369:34	11	"false 3 colorimage"
LEAF_NODE	2369:54	2369:54	9	)
LEAF_NODE	2369:55	2369:55	7	;
EXPR_STATEMENT	2370:2	2371:33	6	fprintf ( fd , "/scanLine %ld string def\n" , ( long ) ps_bytesperrow * 3L ) ;
EXPR	2370:2	2370:2	7	fprintf ( fd , "/scanLine %ld string def\n" , ( long ) ps_bytesperrow * 3L )
FUNCTION_CALL	2370:2	2371:32	8	fprintf ( fd , "/scanLine %ld string def\n" , ( long ) ps_bytesperrow * 3L )
CALLEE	2370:2	2370:2	9	fprintf
LEAF_NODE	2370:2	2370:2	10	fprintf
LEAF_NODE	2370:9	2370:9	9	(
ARGUMENT	2370:10	2370:10	9	fd
FIELD	2370:10	2370:10	10	fd
LEAF_NODE	2370:10	2370:10	11	fd
LEAF_NODE	2370:12	2370:12	9	,
ARGUMENT	2370:14	2370:14	9	"/scanLine %ld string def\n"
FIELD	2370:14	2370:14	10	"/scanLine %ld string def\n"
LEAF_NODE	2370:14	2370:14	11	"/scanLine %ld string def\n"
LEAF_NODE	2370:42	2370:42	9	,
ARGUMENT	2371:6	2371:30	9	( long ) ps_bytesperrow * 3L
LEAF_NODE	2371:6	2371:6	10	(
TYPE_NAME	2371:7	2371:7	10	long
LEAF_NODE	2371:7	2371:7	11	long
LEAF_NODE	2371:11	2371:11	10	)
FIELD	2371:13	2371:13	10	ps_bytesperrow
LEAF_NODE	2371:13	2371:13	11	ps_bytesperrow
LEAF_NODE	2371:28	2371:28	10	*
FIELD	2371:30	2371:30	10	3L
LEAF_NODE	2371:30	2371:30	11	3L
LEAF_NODE	2371:32	2371:32	9	)
LEAF_NODE	2371:33	2371:33	7	;
EXPR_STATEMENT	2372:2	2373:43	6	fprintf ( fd , "%lu %lu 8\n" , ( unsigned long ) w , ( unsigned long ) h ) ;
EXPR	2372:2	2372:2	7	fprintf ( fd , "%lu %lu 8\n" , ( unsigned long ) w , ( unsigned long ) h )
FUNCTION_CALL	2372:2	2373:42	8	fprintf ( fd , "%lu %lu 8\n" , ( unsigned long ) w , ( unsigned long ) h )
CALLEE	2372:2	2372:2	9	fprintf
LEAF_NODE	2372:2	2372:2	10	fprintf
LEAF_NODE	2372:9	2372:9	9	(
ARGUMENT	2372:10	2372:10	9	fd
FIELD	2372:10	2372:10	10	fd
LEAF_NODE	2372:10	2372:10	11	fd
LEAF_NODE	2372:12	2372:12	9	,
ARGUMENT	2372:14	2372:14	9	"%lu %lu 8\n"
FIELD	2372:14	2372:14	10	"%lu %lu 8\n"
LEAF_NODE	2372:14	2372:14	11	"%lu %lu 8\n"
LEAF_NODE	2372:27	2372:27	9	,
ARGUMENT	2373:6	2373:22	9	( unsigned long ) w
LEAF_NODE	2373:6	2373:6	10	(
TYPE_NAME	2373:7	2373:16	10	unsigned long
LEAF_NODE	2373:7	2373:7	11	unsigned
LEAF_NODE	2373:16	2373:16	11	long
LEAF_NODE	2373:20	2373:20	10	)
FIELD	2373:22	2373:22	10	w
LEAF_NODE	2373:22	2373:22	11	w
LEAF_NODE	2373:23	2373:23	9	,
ARGUMENT	2373:25	2373:41	9	( unsigned long ) h
LEAF_NODE	2373:25	2373:25	10	(
TYPE_NAME	2373:26	2373:35	10	unsigned long
LEAF_NODE	2373:26	2373:26	11	unsigned
LEAF_NODE	2373:35	2373:35	11	long
LEAF_NODE	2373:39	2373:39	10	)
FIELD	2373:41	2373:41	10	h
LEAF_NODE	2373:41	2373:41	11	h
LEAF_NODE	2373:42	2373:42	9	)
LEAF_NODE	2373:43	2373:43	7	;
EXPR_STATEMENT	2374:2	2375:62	6	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu]\n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h ) ;
EXPR	2374:2	2374:2	7	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu]\n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h )
FUNCTION_CALL	2374:2	2375:61	8	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu]\n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h )
CALLEE	2374:2	2374:2	9	fprintf
LEAF_NODE	2374:2	2374:2	10	fprintf
LEAF_NODE	2374:9	2374:9	9	(
ARGUMENT	2374:10	2374:10	9	fd
FIELD	2374:10	2374:10	10	fd
LEAF_NODE	2374:10	2374:10	11	fd
LEAF_NODE	2374:12	2374:12	9	,
ARGUMENT	2374:14	2374:14	9	"[%lu 0 0 -%lu 0 %lu]\n"
FIELD	2374:14	2374:14	10	"[%lu 0 0 -%lu 0 %lu]\n"
LEAF_NODE	2374:14	2374:14	11	"[%lu 0 0 -%lu 0 %lu]\n"
LEAF_NODE	2374:38	2374:38	9	,
ARGUMENT	2375:6	2375:22	9	( unsigned long ) w
LEAF_NODE	2375:6	2375:6	10	(
TYPE_NAME	2375:7	2375:16	10	unsigned long
LEAF_NODE	2375:7	2375:7	11	unsigned
LEAF_NODE	2375:16	2375:16	11	long
LEAF_NODE	2375:20	2375:20	10	)
FIELD	2375:22	2375:22	10	w
LEAF_NODE	2375:22	2375:22	11	w
LEAF_NODE	2375:23	2375:23	9	,
ARGUMENT	2375:25	2375:41	9	( unsigned long ) h
LEAF_NODE	2375:25	2375:25	10	(
TYPE_NAME	2375:26	2375:35	10	unsigned long
LEAF_NODE	2375:26	2375:26	11	unsigned
LEAF_NODE	2375:35	2375:35	11	long
LEAF_NODE	2375:39	2375:39	10	)
FIELD	2375:41	2375:41	10	h
LEAF_NODE	2375:41	2375:41	11	h
LEAF_NODE	2375:42	2375:42	9	,
ARGUMENT	2375:44	2375:60	9	( unsigned long ) h
LEAF_NODE	2375:44	2375:44	10	(
TYPE_NAME	2375:45	2375:54	10	unsigned long
LEAF_NODE	2375:45	2375:45	11	unsigned
LEAF_NODE	2375:54	2375:54	11	long
LEAF_NODE	2375:58	2375:58	10	)
FIELD	2375:60	2375:60	10	h
LEAF_NODE	2375:60	2375:60	11	h
LEAF_NODE	2375:61	2375:61	9	)
LEAF_NODE	2375:62	2375:62	7	;
EXPR_STATEMENT	2376:2	2376:64	6	fprintf ( fd , "{currentfile scanLine readhexstring pop} bind\n" ) ;
EXPR	2376:2	2376:2	7	fprintf ( fd , "{currentfile scanLine readhexstring pop} bind\n" )
FUNCTION_CALL	2376:2	2376:63	8	fprintf ( fd , "{currentfile scanLine readhexstring pop} bind\n" )
CALLEE	2376:2	2376:2	9	fprintf
LEAF_NODE	2376:2	2376:2	10	fprintf
LEAF_NODE	2376:9	2376:9	9	(
ARGUMENT	2376:10	2376:10	9	fd
FIELD	2376:10	2376:10	10	fd
LEAF_NODE	2376:10	2376:10	11	fd
LEAF_NODE	2376:12	2376:12	9	,
ARGUMENT	2376:14	2376:14	9	"{currentfile scanLine readhexstring pop} bind\n"
FIELD	2376:14	2376:14	10	"{currentfile scanLine readhexstring pop} bind\n"
LEAF_NODE	2376:14	2376:14	11	"{currentfile scanLine readhexstring pop} bind\n"
LEAF_NODE	2376:63	2376:63	9	)
LEAF_NODE	2376:64	2376:64	7	;
EXPR_STATEMENT	2377:2	2377:37	6	fprintf ( fd , "false 3 colorimage\n" ) ;
EXPR	2377:2	2377:2	7	fprintf ( fd , "false 3 colorimage\n" )
FUNCTION_CALL	2377:2	2377:36	8	fprintf ( fd , "false 3 colorimage\n" )
CALLEE	2377:2	2377:2	9	fprintf
LEAF_NODE	2377:2	2377:2	10	fprintf
LEAF_NODE	2377:9	2377:9	9	(
ARGUMENT	2377:10	2377:10	9	fd
FIELD	2377:10	2377:10	10	fd
LEAF_NODE	2377:10	2377:10	11	fd
LEAF_NODE	2377:12	2377:12	9	,
ARGUMENT	2377:14	2377:14	9	"false 3 colorimage\n"
FIELD	2377:14	2377:14	10	"false 3 colorimage\n"
LEAF_NODE	2377:14	2377:14	11	"false 3 colorimage\n"
LEAF_NODE	2377:36	2377:36	9	)
LEAF_NODE	2377:37	2377:37	7	;
EXPR_STATEMENT	2378:2	2378:30	6	PSDataPalette ( fd , tif , w , h ) ;
EXPR	2378:2	2378:2	7	PSDataPalette ( fd , tif , w , h )
FUNCTION_CALL	2378:2	2378:29	8	PSDataPalette ( fd , tif , w , h )
CALLEE	2378:2	2378:2	9	PSDataPalette
LEAF_NODE	2378:2	2378:2	10	PSDataPalette
LEAF_NODE	2378:15	2378:15	9	(
ARGUMENT	2378:16	2378:16	9	fd
FIELD	2378:16	2378:16	10	fd
LEAF_NODE	2378:16	2378:16	11	fd
LEAF_NODE	2378:18	2378:18	9	,
ARGUMENT	2378:20	2378:20	9	tif
FIELD	2378:20	2378:20	10	tif
LEAF_NODE	2378:20	2378:20	11	tif
LEAF_NODE	2378:23	2378:23	9	,
ARGUMENT	2378:25	2378:25	9	w
FIELD	2378:25	2378:25	10	w
LEAF_NODE	2378:25	2378:25	11	w
LEAF_NODE	2378:26	2378:26	9	,
ARGUMENT	2378:28	2378:28	9	h
FIELD	2378:28	2378:28	10	h
LEAF_NODE	2378:28	2378:28	11	h
LEAF_NODE	2378:29	2378:29	9	)
LEAF_NODE	2378:30	2378:30	7	;
JUMP_STATEMENT	2379:2	2379:7	6	break DESTINATION ;
KEYWORD	2379:2	2379:2	7	break
LEAF_NODE	2379:2	2379:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2379:7	2379:7	7	;
LABEL	2380:1	2380:28	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	2380:1	2380:1	7	case
LEAF_NODE	2380:6	2380:6	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	2380:28	2380:28	7	:
LABEL	2381:1	2381:28	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	2381:1	2381:1	7	case
LEAF_NODE	2381:6	2381:6	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	2381:28	2381:28	7	:
EXPR_STATEMENT	2382:2	2382:42	6	PhotoshopBanner ( fd , w , h , 1 , 1 , imageOp ) ;
EXPR	2382:2	2382:2	7	PhotoshopBanner ( fd , w , h , 1 , 1 , imageOp )
FUNCTION_CALL	2382:2	2382:41	8	PhotoshopBanner ( fd , w , h , 1 , 1 , imageOp )
CALLEE	2382:2	2382:2	9	PhotoshopBanner
LEAF_NODE	2382:2	2382:2	10	PhotoshopBanner
LEAF_NODE	2382:17	2382:17	9	(
ARGUMENT	2382:18	2382:18	9	fd
FIELD	2382:18	2382:18	10	fd
LEAF_NODE	2382:18	2382:18	11	fd
LEAF_NODE	2382:20	2382:20	9	,
ARGUMENT	2382:22	2382:22	9	w
FIELD	2382:22	2382:22	10	w
LEAF_NODE	2382:22	2382:22	11	w
LEAF_NODE	2382:23	2382:23	9	,
ARGUMENT	2382:25	2382:25	9	h
FIELD	2382:25	2382:25	10	h
LEAF_NODE	2382:25	2382:25	11	h
LEAF_NODE	2382:26	2382:26	9	,
ARGUMENT	2382:28	2382:28	9	1
FIELD	2382:28	2382:28	10	1
LEAF_NODE	2382:28	2382:28	11	1
LEAF_NODE	2382:29	2382:29	9	,
ARGUMENT	2382:31	2382:31	9	1
FIELD	2382:31	2382:31	10	1
LEAF_NODE	2382:31	2382:31	11	1
LEAF_NODE	2382:32	2382:32	9	,
ARGUMENT	2382:34	2382:34	9	imageOp
FIELD	2382:34	2382:34	10	imageOp
LEAF_NODE	2382:34	2382:34	11	imageOp
LEAF_NODE	2382:41	2382:41	9	)
LEAF_NODE	2382:42	2382:42	7	;
EXPR_STATEMENT	2383:2	2384:28	6	fprintf ( fd , "/scanLine %ld string def\n" , ( long ) ps_bytesperrow ) ;
EXPR	2383:2	2383:2	7	fprintf ( fd , "/scanLine %ld string def\n" , ( long ) ps_bytesperrow )
FUNCTION_CALL	2383:2	2384:27	8	fprintf ( fd , "/scanLine %ld string def\n" , ( long ) ps_bytesperrow )
CALLEE	2383:2	2383:2	9	fprintf
LEAF_NODE	2383:2	2383:2	10	fprintf
LEAF_NODE	2383:9	2383:9	9	(
ARGUMENT	2383:10	2383:10	9	fd
FIELD	2383:10	2383:10	10	fd
LEAF_NODE	2383:10	2383:10	11	fd
LEAF_NODE	2383:12	2383:12	9	,
ARGUMENT	2383:14	2383:14	9	"/scanLine %ld string def\n"
FIELD	2383:14	2383:14	10	"/scanLine %ld string def\n"
LEAF_NODE	2383:14	2383:14	11	"/scanLine %ld string def\n"
LEAF_NODE	2383:42	2383:42	9	,
ARGUMENT	2384:6	2384:13	9	( long ) ps_bytesperrow
LEAF_NODE	2384:6	2384:6	10	(
TYPE_NAME	2384:7	2384:7	10	long
LEAF_NODE	2384:7	2384:7	11	long
LEAF_NODE	2384:11	2384:11	10	)
FIELD	2384:13	2384:13	10	ps_bytesperrow
LEAF_NODE	2384:13	2384:13	11	ps_bytesperrow
LEAF_NODE	2384:27	2384:27	9	)
LEAF_NODE	2384:28	2384:28	7	;
EXPR_STATEMENT	2385:2	2386:58	6	fprintf ( fd , "%lu %lu %d\n" , ( unsigned long ) w , ( unsigned long ) h , bitspersample ) ;
EXPR	2385:2	2385:2	7	fprintf ( fd , "%lu %lu %d\n" , ( unsigned long ) w , ( unsigned long ) h , bitspersample )
FUNCTION_CALL	2385:2	2386:57	8	fprintf ( fd , "%lu %lu %d\n" , ( unsigned long ) w , ( unsigned long ) h , bitspersample )
CALLEE	2385:2	2385:2	9	fprintf
LEAF_NODE	2385:2	2385:2	10	fprintf
LEAF_NODE	2385:9	2385:9	9	(
ARGUMENT	2385:10	2385:10	9	fd
FIELD	2385:10	2385:10	10	fd
LEAF_NODE	2385:10	2385:10	11	fd
LEAF_NODE	2385:12	2385:12	9	,
ARGUMENT	2385:14	2385:14	9	"%lu %lu %d\n"
FIELD	2385:14	2385:14	10	"%lu %lu %d\n"
LEAF_NODE	2385:14	2385:14	11	"%lu %lu %d\n"
LEAF_NODE	2385:28	2385:28	9	,
ARGUMENT	2386:6	2386:22	9	( unsigned long ) w
LEAF_NODE	2386:6	2386:6	10	(
TYPE_NAME	2386:7	2386:16	10	unsigned long
LEAF_NODE	2386:7	2386:7	11	unsigned
LEAF_NODE	2386:16	2386:16	11	long
LEAF_NODE	2386:20	2386:20	10	)
FIELD	2386:22	2386:22	10	w
LEAF_NODE	2386:22	2386:22	11	w
LEAF_NODE	2386:23	2386:23	9	,
ARGUMENT	2386:25	2386:41	9	( unsigned long ) h
LEAF_NODE	2386:25	2386:25	10	(
TYPE_NAME	2386:26	2386:35	10	unsigned long
LEAF_NODE	2386:26	2386:26	11	unsigned
LEAF_NODE	2386:35	2386:35	11	long
LEAF_NODE	2386:39	2386:39	10	)
FIELD	2386:41	2386:41	10	h
LEAF_NODE	2386:41	2386:41	11	h
LEAF_NODE	2386:42	2386:42	9	,
ARGUMENT	2386:44	2386:44	9	bitspersample
FIELD	2386:44	2386:44	10	bitspersample
LEAF_NODE	2386:44	2386:44	11	bitspersample
LEAF_NODE	2386:57	2386:57	9	)
LEAF_NODE	2386:58	2386:58	7	;
EXPR_STATEMENT	2387:2	2388:62	6	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu]\n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h ) ;
EXPR	2387:2	2387:2	7	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu]\n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h )
FUNCTION_CALL	2387:2	2388:61	8	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu]\n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h )
CALLEE	2387:2	2387:2	9	fprintf
LEAF_NODE	2387:2	2387:2	10	fprintf
LEAF_NODE	2387:9	2387:9	9	(
ARGUMENT	2387:10	2387:10	9	fd
FIELD	2387:10	2387:10	10	fd
LEAF_NODE	2387:10	2387:10	11	fd
LEAF_NODE	2387:12	2387:12	9	,
ARGUMENT	2387:14	2387:14	9	"[%lu 0 0 -%lu 0 %lu]\n"
FIELD	2387:14	2387:14	10	"[%lu 0 0 -%lu 0 %lu]\n"
LEAF_NODE	2387:14	2387:14	11	"[%lu 0 0 -%lu 0 %lu]\n"
LEAF_NODE	2387:38	2387:38	9	,
ARGUMENT	2388:6	2388:22	9	( unsigned long ) w
LEAF_NODE	2388:6	2388:6	10	(
TYPE_NAME	2388:7	2388:16	10	unsigned long
LEAF_NODE	2388:7	2388:7	11	unsigned
LEAF_NODE	2388:16	2388:16	11	long
LEAF_NODE	2388:20	2388:20	10	)
FIELD	2388:22	2388:22	10	w
LEAF_NODE	2388:22	2388:22	11	w
LEAF_NODE	2388:23	2388:23	9	,
ARGUMENT	2388:25	2388:41	9	( unsigned long ) h
LEAF_NODE	2388:25	2388:25	10	(
TYPE_NAME	2388:26	2388:35	10	unsigned long
LEAF_NODE	2388:26	2388:26	11	unsigned
LEAF_NODE	2388:35	2388:35	11	long
LEAF_NODE	2388:39	2388:39	10	)
FIELD	2388:41	2388:41	10	h
LEAF_NODE	2388:41	2388:41	11	h
LEAF_NODE	2388:42	2388:42	9	,
ARGUMENT	2388:44	2388:60	9	( unsigned long ) h
LEAF_NODE	2388:44	2388:44	10	(
TYPE_NAME	2388:45	2388:54	10	unsigned long
LEAF_NODE	2388:45	2388:45	11	unsigned
LEAF_NODE	2388:54	2388:54	11	long
LEAF_NODE	2388:58	2388:58	10	)
FIELD	2388:60	2388:60	10	h
LEAF_NODE	2388:60	2388:60	11	h
LEAF_NODE	2388:61	2388:61	9	)
LEAF_NODE	2388:62	2388:62	7	;
EXPR_STATEMENT	2389:2	2390:56	6	fprintf ( fd , "{currentfile scanLine readhexstring pop} bind\n" ) ;
EXPR	2389:2	2389:2	7	fprintf ( fd , "{currentfile scanLine readhexstring pop} bind\n" )
FUNCTION_CALL	2389:2	2390:55	8	fprintf ( fd , "{currentfile scanLine readhexstring pop} bind\n" )
CALLEE	2389:2	2389:2	9	fprintf
LEAF_NODE	2389:2	2389:2	10	fprintf
LEAF_NODE	2389:9	2389:9	9	(
ARGUMENT	2389:10	2389:10	9	fd
FIELD	2389:10	2389:10	10	fd
LEAF_NODE	2389:10	2389:10	11	fd
LEAF_NODE	2389:12	2389:12	9	,
ARGUMENT	2390:6	2390:6	9	"{currentfile scanLine readhexstring pop} bind\n"
FIELD	2390:6	2390:6	10	"{currentfile scanLine readhexstring pop} bind\n"
LEAF_NODE	2390:6	2390:6	11	"{currentfile scanLine readhexstring pop} bind\n"
LEAF_NODE	2390:55	2390:55	9	)
LEAF_NODE	2390:56	2390:56	7	;
EXPR_STATEMENT	2391:2	2391:30	6	fprintf ( fd , "%s\n" , imageOp ) ;
EXPR	2391:2	2391:2	7	fprintf ( fd , "%s\n" , imageOp )
FUNCTION_CALL	2391:2	2391:29	8	fprintf ( fd , "%s\n" , imageOp )
CALLEE	2391:2	2391:2	9	fprintf
LEAF_NODE	2391:2	2391:2	10	fprintf
LEAF_NODE	2391:9	2391:9	9	(
ARGUMENT	2391:10	2391:10	9	fd
FIELD	2391:10	2391:10	10	fd
LEAF_NODE	2391:10	2391:10	11	fd
LEAF_NODE	2391:12	2391:12	9	,
ARGUMENT	2391:14	2391:14	9	"%s\n"
FIELD	2391:14	2391:14	10	"%s\n"
LEAF_NODE	2391:14	2391:14	11	"%s\n"
LEAF_NODE	2391:20	2391:20	9	,
ARGUMENT	2391:22	2391:22	9	imageOp
FIELD	2391:22	2391:22	10	imageOp
LEAF_NODE	2391:22	2391:22	11	imageOp
LEAF_NODE	2391:29	2391:29	9	)
LEAF_NODE	2391:30	2391:30	7	;
EXPR_STATEMENT	2392:2	2392:25	6	PSDataBW ( fd , tif , w , h ) ;
EXPR	2392:2	2392:2	7	PSDataBW ( fd , tif , w , h )
FUNCTION_CALL	2392:2	2392:24	8	PSDataBW ( fd , tif , w , h )
CALLEE	2392:2	2392:2	9	PSDataBW
LEAF_NODE	2392:2	2392:2	10	PSDataBW
LEAF_NODE	2392:10	2392:10	9	(
ARGUMENT	2392:11	2392:11	9	fd
FIELD	2392:11	2392:11	10	fd
LEAF_NODE	2392:11	2392:11	11	fd
LEAF_NODE	2392:13	2392:13	9	,
ARGUMENT	2392:15	2392:15	9	tif
FIELD	2392:15	2392:15	10	tif
LEAF_NODE	2392:15	2392:15	11	tif
LEAF_NODE	2392:18	2392:18	9	,
ARGUMENT	2392:20	2392:20	9	w
FIELD	2392:20	2392:20	10	w
LEAF_NODE	2392:20	2392:20	11	w
LEAF_NODE	2392:21	2392:21	9	,
ARGUMENT	2392:23	2392:23	9	h
FIELD	2392:23	2392:23	10	h
LEAF_NODE	2392:23	2392:23	11	h
LEAF_NODE	2392:24	2392:24	9	)
LEAF_NODE	2392:25	2392:25	7	;
JUMP_STATEMENT	2393:2	2393:7	6	break DESTINATION ;
KEYWORD	2393:2	2393:2	7	break
LEAF_NODE	2393:2	2393:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2393:7	2393:7	7	;
LEAF_NODE	2394:1	2394:1	5	}
EXPR_STATEMENT	2395:1	2395:15	3	putc ( '\n' , fd ) ;
EXPR	2395:1	2395:1	4	putc ( '\n' , fd )
FUNCTION_CALL	2395:1	2395:14	5	putc ( '\n' , fd )
CALLEE	2395:1	2395:1	6	putc
LEAF_NODE	2395:1	2395:1	7	putc
LEAF_NODE	2395:5	2395:5	6	(
ARGUMENT	2395:6	2395:6	6	'\n'
FIELD	2395:6	2395:6	7	'\n'
LEAF_NODE	2395:6	2395:6	8	'\n'
LEAF_NODE	2395:10	2395:10	6	,
ARGUMENT	2395:12	2395:12	6	fd
FIELD	2395:12	2395:12	7	fd
LEAF_NODE	2395:12	2395:12	8	fd
LEAF_NODE	2395:14	2395:14	6	)
LEAF_NODE	2395:15	2395:15	4	;
LEAF_NODE	2396:0	2396:0	2	}
FUNCTION_DEF	2398:0	2410:0	1	
RETURN_TYPE	2398:0	2398:0	2	void
TYPE_NAME	2398:0	2398:0	3	void
LEAF_NODE	2398:0	2398:0	4	void
FUNCTION_NAME	2399:0	2399:0	2	PSColorContigPreamble
LEAF_NODE	2399:0	2399:0	3	PSColorContigPreamble
PARAMETER_LIST	2399:21	2399:58	2	( FILE * fd , uint32 w , uint32 h , int nc )
LEAF_NODE	2399:21	2399:21	3	(
PARAMETER_DECL	2399:22	2399:28	3	FILE * fd
TYPE	2399:22	2399:26	4	FILE *
TYPE_NAME	2399:22	2399:22	5	FILE
LEAF_NODE	2399:22	2399:22	6	FILE
POINTER	2399:26	2399:26	5	*
LEAF_NODE	2399:26	2399:26	6	*
NAME	2399:28	2399:28	4	fd
LEAF_NODE	2399:28	2399:28	5	fd
LEAF_NODE	2399:30	2399:30	3	,
PARAMETER_DECL	2399:32	2399:39	3	uint32 w
TYPE	2399:32	2399:32	4	uint32
TYPE_NAME	2399:32	2399:32	5	uint32
LEAF_NODE	2399:32	2399:32	6	uint32
NAME	2399:39	2399:39	4	w
LEAF_NODE	2399:39	2399:39	5	w
LEAF_NODE	2399:40	2399:40	3	,
PARAMETER_DECL	2399:42	2399:49	3	uint32 h
TYPE	2399:42	2399:42	4	uint32
TYPE_NAME	2399:42	2399:42	5	uint32
LEAF_NODE	2399:42	2399:42	6	uint32
NAME	2399:49	2399:49	4	h
LEAF_NODE	2399:49	2399:49	5	h
LEAF_NODE	2399:50	2399:50	3	,
PARAMETER_DECL	2399:52	2399:56	3	int nc
TYPE	2399:52	2399:52	4	int
TYPE_NAME	2399:52	2399:52	5	int
LEAF_NODE	2399:52	2399:52	6	int
NAME	2399:56	2399:56	4	nc
LEAF_NODE	2399:56	2399:56	5	nc
LEAF_NODE	2399:58	2399:58	3	)
LEAF_NODE	2400:0	2400:0	2	{
STATEMENTS	2401:1	2409:1	2	
EXPR_STATEMENT	2401:1	2401:57	3	ps_bytesperrow = nc * ( tf_bytesperrow / samplesperpixel ) ;
EXPR	2401:1	2401:1	4	ps_bytesperrow = nc * ( tf_bytesperrow / samplesperpixel )
ASSIGN	2401:1	2401:18	5	ps_bytesperrow = nc * ( tf_bytesperrow / samplesperpixel )
LVAL	2401:1	2401:1	6	ps_bytesperrow
FIELD	2401:1	2401:1	7	ps_bytesperrow
LEAF_NODE	2401:1	2401:1	8	ps_bytesperrow
ASSIGN_OP	2401:16	2401:16	6	=
LEAF_NODE	2401:16	2401:16	7	=
RVAL	2401:18	2401:56	6	nc * ( tf_bytesperrow / samplesperpixel )
FIELD	2401:18	2401:18	7	nc
LEAF_NODE	2401:18	2401:18	8	nc
LEAF_NODE	2401:21	2401:21	7	*
LEAF_NODE	2401:23	2401:23	7	(
FIELD	2401:24	2401:24	7	tf_bytesperrow
LEAF_NODE	2401:24	2401:24	8	tf_bytesperrow
LEAF_NODE	2401:39	2401:39	7	/
FIELD	2401:41	2401:41	7	samplesperpixel
LEAF_NODE	2401:41	2401:41	8	samplesperpixel
LEAF_NODE	2401:56	2401:56	7	)
LEAF_NODE	2401:57	2401:57	4	;
EXPR_STATEMENT	2402:1	2402:56	3	PhotoshopBanner ( fd , w , h , 1 , nc , "false %d colorimage" ) ;
EXPR	2402:1	2402:1	4	PhotoshopBanner ( fd , w , h , 1 , nc , "false %d colorimage" )
FUNCTION_CALL	2402:1	2402:55	5	PhotoshopBanner ( fd , w , h , 1 , nc , "false %d colorimage" )
CALLEE	2402:1	2402:1	6	PhotoshopBanner
LEAF_NODE	2402:1	2402:1	7	PhotoshopBanner
LEAF_NODE	2402:16	2402:16	6	(
ARGUMENT	2402:17	2402:17	6	fd
FIELD	2402:17	2402:17	7	fd
LEAF_NODE	2402:17	2402:17	8	fd
LEAF_NODE	2402:19	2402:19	6	,
ARGUMENT	2402:21	2402:21	6	w
FIELD	2402:21	2402:21	7	w
LEAF_NODE	2402:21	2402:21	8	w
LEAF_NODE	2402:22	2402:22	6	,
ARGUMENT	2402:24	2402:24	6	h
FIELD	2402:24	2402:24	7	h
LEAF_NODE	2402:24	2402:24	8	h
LEAF_NODE	2402:25	2402:25	6	,
ARGUMENT	2402:27	2402:27	6	1
FIELD	2402:27	2402:27	7	1
LEAF_NODE	2402:27	2402:27	8	1
LEAF_NODE	2402:28	2402:28	6	,
ARGUMENT	2402:30	2402:30	6	nc
FIELD	2402:30	2402:30	7	nc
LEAF_NODE	2402:30	2402:30	8	nc
LEAF_NODE	2402:32	2402:32	6	,
ARGUMENT	2402:34	2402:34	6	"false %d colorimage"
FIELD	2402:34	2402:34	7	"false %d colorimage"
LEAF_NODE	2402:34	2402:34	8	"false %d colorimage"
LEAF_NODE	2402:55	2402:55	6	)
LEAF_NODE	2402:56	2402:56	4	;
EXPR_STATEMENT	2403:1	2403:61	3	fprintf ( fd , "/line %ld string def\n" , ( long ) ps_bytesperrow ) ;
EXPR	2403:1	2403:1	4	fprintf ( fd , "/line %ld string def\n" , ( long ) ps_bytesperrow )
FUNCTION_CALL	2403:1	2403:60	5	fprintf ( fd , "/line %ld string def\n" , ( long ) ps_bytesperrow )
CALLEE	2403:1	2403:1	6	fprintf
LEAF_NODE	2403:1	2403:1	7	fprintf
LEAF_NODE	2403:8	2403:8	6	(
ARGUMENT	2403:9	2403:9	6	fd
FIELD	2403:9	2403:9	7	fd
LEAF_NODE	2403:9	2403:9	8	fd
LEAF_NODE	2403:11	2403:11	6	,
ARGUMENT	2403:13	2403:13	6	"/line %ld string def\n"
FIELD	2403:13	2403:13	7	"/line %ld string def\n"
LEAF_NODE	2403:13	2403:13	8	"/line %ld string def\n"
LEAF_NODE	2403:37	2403:37	6	,
ARGUMENT	2403:39	2403:46	6	( long ) ps_bytesperrow
LEAF_NODE	2403:39	2403:39	7	(
TYPE_NAME	2403:40	2403:40	7	long
LEAF_NODE	2403:40	2403:40	8	long
LEAF_NODE	2403:44	2403:44	7	)
FIELD	2403:46	2403:46	7	ps_bytesperrow
LEAF_NODE	2403:46	2403:46	8	ps_bytesperrow
LEAF_NODE	2403:60	2403:60	6	)
LEAF_NODE	2403:61	2403:61	4	;
EXPR_STATEMENT	2404:1	2405:57	3	fprintf ( fd , "%lu %lu %d\n" , ( unsigned long ) w , ( unsigned long ) h , bitspersample ) ;
EXPR	2404:1	2404:1	4	fprintf ( fd , "%lu %lu %d\n" , ( unsigned long ) w , ( unsigned long ) h , bitspersample )
FUNCTION_CALL	2404:1	2405:56	5	fprintf ( fd , "%lu %lu %d\n" , ( unsigned long ) w , ( unsigned long ) h , bitspersample )
CALLEE	2404:1	2404:1	6	fprintf
LEAF_NODE	2404:1	2404:1	7	fprintf
LEAF_NODE	2404:8	2404:8	6	(
ARGUMENT	2404:9	2404:9	6	fd
FIELD	2404:9	2404:9	7	fd
LEAF_NODE	2404:9	2404:9	8	fd
LEAF_NODE	2404:11	2404:11	6	,
ARGUMENT	2404:13	2404:13	6	"%lu %lu %d\n"
FIELD	2404:13	2404:13	7	"%lu %lu %d\n"
LEAF_NODE	2404:13	2404:13	8	"%lu %lu %d\n"
LEAF_NODE	2404:27	2404:27	6	,
ARGUMENT	2405:5	2405:21	6	( unsigned long ) w
LEAF_NODE	2405:5	2405:5	7	(
TYPE_NAME	2405:6	2405:15	7	unsigned long
LEAF_NODE	2405:6	2405:6	8	unsigned
LEAF_NODE	2405:15	2405:15	8	long
LEAF_NODE	2405:19	2405:19	7	)
FIELD	2405:21	2405:21	7	w
LEAF_NODE	2405:21	2405:21	8	w
LEAF_NODE	2405:22	2405:22	6	,
ARGUMENT	2405:24	2405:40	6	( unsigned long ) h
LEAF_NODE	2405:24	2405:24	7	(
TYPE_NAME	2405:25	2405:34	7	unsigned long
LEAF_NODE	2405:25	2405:25	8	unsigned
LEAF_NODE	2405:34	2405:34	8	long
LEAF_NODE	2405:38	2405:38	7	)
FIELD	2405:40	2405:40	7	h
LEAF_NODE	2405:40	2405:40	8	h
LEAF_NODE	2405:41	2405:41	6	,
ARGUMENT	2405:43	2405:43	6	bitspersample
FIELD	2405:43	2405:43	7	bitspersample
LEAF_NODE	2405:43	2405:43	8	bitspersample
LEAF_NODE	2405:56	2405:56	6	)
LEAF_NODE	2405:57	2405:57	4	;
EXPR_STATEMENT	2406:1	2407:61	3	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu]\n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h ) ;
EXPR	2406:1	2406:1	4	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu]\n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h )
FUNCTION_CALL	2406:1	2407:60	5	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu]\n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h )
CALLEE	2406:1	2406:1	6	fprintf
LEAF_NODE	2406:1	2406:1	7	fprintf
LEAF_NODE	2406:8	2406:8	6	(
ARGUMENT	2406:9	2406:9	6	fd
FIELD	2406:9	2406:9	7	fd
LEAF_NODE	2406:9	2406:9	8	fd
LEAF_NODE	2406:11	2406:11	6	,
ARGUMENT	2406:13	2406:13	6	"[%lu 0 0 -%lu 0 %lu]\n"
FIELD	2406:13	2406:13	7	"[%lu 0 0 -%lu 0 %lu]\n"
LEAF_NODE	2406:13	2406:13	8	"[%lu 0 0 -%lu 0 %lu]\n"
LEAF_NODE	2406:37	2406:37	6	,
ARGUMENT	2407:5	2407:21	6	( unsigned long ) w
LEAF_NODE	2407:5	2407:5	7	(
TYPE_NAME	2407:6	2407:15	7	unsigned long
LEAF_NODE	2407:6	2407:6	8	unsigned
LEAF_NODE	2407:15	2407:15	8	long
LEAF_NODE	2407:19	2407:19	7	)
FIELD	2407:21	2407:21	7	w
LEAF_NODE	2407:21	2407:21	8	w
LEAF_NODE	2407:22	2407:22	6	,
ARGUMENT	2407:24	2407:40	6	( unsigned long ) h
LEAF_NODE	2407:24	2407:24	7	(
TYPE_NAME	2407:25	2407:34	7	unsigned long
LEAF_NODE	2407:25	2407:25	8	unsigned
LEAF_NODE	2407:34	2407:34	8	long
LEAF_NODE	2407:38	2407:38	7	)
FIELD	2407:40	2407:40	7	h
LEAF_NODE	2407:40	2407:40	8	h
LEAF_NODE	2407:41	2407:41	6	,
ARGUMENT	2407:43	2407:59	6	( unsigned long ) h
LEAF_NODE	2407:43	2407:43	7	(
TYPE_NAME	2407:44	2407:53	7	unsigned long
LEAF_NODE	2407:44	2407:44	8	unsigned
LEAF_NODE	2407:53	2407:53	8	long
LEAF_NODE	2407:57	2407:57	7	)
FIELD	2407:59	2407:59	7	h
LEAF_NODE	2407:59	2407:59	8	h
LEAF_NODE	2407:60	2407:60	6	)
LEAF_NODE	2407:61	2407:61	4	;
EXPR_STATEMENT	2408:1	2408:59	3	fprintf ( fd , "{currentfile line readhexstring pop} bind\n" ) ;
EXPR	2408:1	2408:1	4	fprintf ( fd , "{currentfile line readhexstring pop} bind\n" )
FUNCTION_CALL	2408:1	2408:58	5	fprintf ( fd , "{currentfile line readhexstring pop} bind\n" )
CALLEE	2408:1	2408:1	6	fprintf
LEAF_NODE	2408:1	2408:1	7	fprintf
LEAF_NODE	2408:8	2408:8	6	(
ARGUMENT	2408:9	2408:9	6	fd
FIELD	2408:9	2408:9	7	fd
LEAF_NODE	2408:9	2408:9	8	fd
LEAF_NODE	2408:11	2408:11	6	,
ARGUMENT	2408:13	2408:13	6	"{currentfile line readhexstring pop} bind\n"
FIELD	2408:13	2408:13	7	"{currentfile line readhexstring pop} bind\n"
LEAF_NODE	2408:13	2408:13	8	"{currentfile line readhexstring pop} bind\n"
LEAF_NODE	2408:58	2408:58	6	)
LEAF_NODE	2408:59	2408:59	4	;
EXPR_STATEMENT	2409:1	2409:41	3	fprintf ( fd , "false %d colorimage\n" , nc ) ;
EXPR	2409:1	2409:1	4	fprintf ( fd , "false %d colorimage\n" , nc )
FUNCTION_CALL	2409:1	2409:40	5	fprintf ( fd , "false %d colorimage\n" , nc )
CALLEE	2409:1	2409:1	6	fprintf
LEAF_NODE	2409:1	2409:1	7	fprintf
LEAF_NODE	2409:8	2409:8	6	(
ARGUMENT	2409:9	2409:9	6	fd
FIELD	2409:9	2409:9	7	fd
LEAF_NODE	2409:9	2409:9	8	fd
LEAF_NODE	2409:11	2409:11	6	,
ARGUMENT	2409:13	2409:13	6	"false %d colorimage\n"
FIELD	2409:13	2409:13	7	"false %d colorimage\n"
LEAF_NODE	2409:13	2409:13	8	"false %d colorimage\n"
LEAF_NODE	2409:36	2409:36	6	,
ARGUMENT	2409:38	2409:38	6	nc
FIELD	2409:38	2409:38	7	nc
LEAF_NODE	2409:38	2409:38	8	nc
LEAF_NODE	2409:40	2409:40	6	)
LEAF_NODE	2409:41	2409:41	4	;
LEAF_NODE	2410:0	2410:0	2	}
FUNCTION_DEF	2412:0	2428:0	1	
RETURN_TYPE	2412:0	2412:0	2	void
TYPE_NAME	2412:0	2412:0	3	void
LEAF_NODE	2412:0	2412:0	4	void
FUNCTION_NAME	2413:0	2413:0	2	PSColorSeparatePreamble
LEAF_NODE	2413:0	2413:0	3	PSColorSeparatePreamble
PARAMETER_LIST	2413:23	2413:60	2	( FILE * fd , uint32 w , uint32 h , int nc )
LEAF_NODE	2413:23	2413:23	3	(
PARAMETER_DECL	2413:24	2413:30	3	FILE * fd
TYPE	2413:24	2413:28	4	FILE *
TYPE_NAME	2413:24	2413:24	5	FILE
LEAF_NODE	2413:24	2413:24	6	FILE
POINTER	2413:28	2413:28	5	*
LEAF_NODE	2413:28	2413:28	6	*
NAME	2413:30	2413:30	4	fd
LEAF_NODE	2413:30	2413:30	5	fd
LEAF_NODE	2413:32	2413:32	3	,
PARAMETER_DECL	2413:34	2413:41	3	uint32 w
TYPE	2413:34	2413:34	4	uint32
TYPE_NAME	2413:34	2413:34	5	uint32
LEAF_NODE	2413:34	2413:34	6	uint32
NAME	2413:41	2413:41	4	w
LEAF_NODE	2413:41	2413:41	5	w
LEAF_NODE	2413:42	2413:42	3	,
PARAMETER_DECL	2413:44	2413:51	3	uint32 h
TYPE	2413:44	2413:44	4	uint32
TYPE_NAME	2413:44	2413:44	5	uint32
LEAF_NODE	2413:44	2413:44	6	uint32
NAME	2413:51	2413:51	4	h
LEAF_NODE	2413:51	2413:51	5	h
LEAF_NODE	2413:52	2413:52	3	,
PARAMETER_DECL	2413:54	2413:58	3	int nc
TYPE	2413:54	2413:54	4	int
TYPE_NAME	2413:54	2413:54	5	int
LEAF_NODE	2413:54	2413:54	6	int
NAME	2413:58	2413:58	4	nc
LEAF_NODE	2413:58	2413:58	5	nc
LEAF_NODE	2413:60	2413:60	3	)
LEAF_NODE	2414:0	2414:0	2	{
STATEMENTS	2415:1	2427:1	2	
SIMPLE_DECL	2415:1	2415:6	3	int i ;
VAR_DECL	2415:1	2415:5	4	int i
TYPE	2415:1	2415:1	5	int
TYPE_NAME	2415:1	2415:1	6	int
LEAF_NODE	2415:1	2415:1	7	int
NAME	2415:5	2415:5	5	i
LEAF_NODE	2415:5	2415:5	6	i
LEAF_NODE	2415:6	2415:6	4	;
EXPR_STATEMENT	2417:1	2417:68	3	PhotoshopBanner ( fd , w , h , ps_bytesperrow , nc , "true %d colorimage" ) ;
EXPR	2417:1	2417:1	4	PhotoshopBanner ( fd , w , h , ps_bytesperrow , nc , "true %d colorimage" )
FUNCTION_CALL	2417:1	2417:67	5	PhotoshopBanner ( fd , w , h , ps_bytesperrow , nc , "true %d colorimage" )
CALLEE	2417:1	2417:1	6	PhotoshopBanner
LEAF_NODE	2417:1	2417:1	7	PhotoshopBanner
LEAF_NODE	2417:16	2417:16	6	(
ARGUMENT	2417:17	2417:17	6	fd
FIELD	2417:17	2417:17	7	fd
LEAF_NODE	2417:17	2417:17	8	fd
LEAF_NODE	2417:19	2417:19	6	,
ARGUMENT	2417:21	2417:21	6	w
FIELD	2417:21	2417:21	7	w
LEAF_NODE	2417:21	2417:21	8	w
LEAF_NODE	2417:22	2417:22	6	,
ARGUMENT	2417:24	2417:24	6	h
FIELD	2417:24	2417:24	7	h
LEAF_NODE	2417:24	2417:24	8	h
LEAF_NODE	2417:25	2417:25	6	,
ARGUMENT	2417:27	2417:27	6	ps_bytesperrow
FIELD	2417:27	2417:27	7	ps_bytesperrow
LEAF_NODE	2417:27	2417:27	8	ps_bytesperrow
LEAF_NODE	2417:41	2417:41	6	,
ARGUMENT	2417:43	2417:43	6	nc
FIELD	2417:43	2417:43	7	nc
LEAF_NODE	2417:43	2417:43	8	nc
LEAF_NODE	2417:45	2417:45	6	,
ARGUMENT	2417:47	2417:47	6	"true %d colorimage"
FIELD	2417:47	2417:47	7	"true %d colorimage"
LEAF_NODE	2417:47	2417:47	8	"true %d colorimage"
LEAF_NODE	2417:67	2417:67	6	)
LEAF_NODE	2417:68	2417:68	4	;
ITERATION	2418:1	2419:2	3	
KEYWORD	2418:1	2418:1	4	for
LEAF_NODE	2418:1	2418:1	5	for
LEAF_NODE	2418:5	2418:5	4	(
FOR_INIT	2418:6	2418:11	4	i = 0 ;
EXPR	2418:6	2418:6	5	i = 0
ASSIGN	2418:6	2418:10	6	i = 0
LVAL	2418:6	2418:6	7	i
FIELD	2418:6	2418:6	8	i
LEAF_NODE	2418:6	2418:6	9	i
ASSIGN_OP	2418:8	2418:8	7	=
LEAF_NODE	2418:8	2418:8	8	=
RVAL	2418:10	2418:10	7	0
FIELD	2418:10	2418:10	8	0
LEAF_NODE	2418:10	2418:10	9	0
LEAF_NODE	2418:11	2418:11	5	;
CONDITION	2418:13	2418:13	4	i < nc
EXPR	2418:13	2418:17	5	i < nc
FIELD	2418:13	2418:13	6	i
LEAF_NODE	2418:13	2418:13	7	i
REL_OPERATOR	2418:15	2418:15	6	<
LEAF_NODE	2418:15	2418:15	7	<
FIELD	2418:17	2418:17	6	nc
LEAF_NODE	2418:17	2418:17	7	nc
LEAF_NODE	2418:19	2418:19	4	;
FOR_EXPR	2418:21	2418:21	4	i ++
EXPR	2418:21	2418:21	5	i ++
FIELD	2418:21	2418:22	6	i ++
LEAF_NODE	2418:21	2418:21	7	i
LEAF_NODE	2418:22	2418:22	7	++
LEAF_NODE	2418:24	2418:24	4	)
STATEMENTS	2419:2	2419:2	4	
EXPR_STATEMENT	2419:2	2420:31	5	fprintf ( fd , "/line%d %ld string def\n" , i , ( long ) ps_bytesperrow ) ;
EXPR	2419:2	2419:2	6	fprintf ( fd , "/line%d %ld string def\n" , i , ( long ) ps_bytesperrow )
FUNCTION_CALL	2419:2	2420:30	7	fprintf ( fd , "/line%d %ld string def\n" , i , ( long ) ps_bytesperrow )
CALLEE	2419:2	2419:2	8	fprintf
LEAF_NODE	2419:2	2419:2	9	fprintf
LEAF_NODE	2419:9	2419:9	8	(
ARGUMENT	2419:10	2419:10	8	fd
FIELD	2419:10	2419:10	9	fd
LEAF_NODE	2419:10	2419:10	10	fd
LEAF_NODE	2419:12	2419:12	8	,
ARGUMENT	2419:14	2419:14	8	"/line%d %ld string def\n"
FIELD	2419:14	2419:14	9	"/line%d %ld string def\n"
LEAF_NODE	2419:14	2419:14	10	"/line%d %ld string def\n"
LEAF_NODE	2419:40	2419:40	8	,
ARGUMENT	2420:6	2420:6	8	i
FIELD	2420:6	2420:6	9	i
LEAF_NODE	2420:6	2420:6	10	i
LEAF_NODE	2420:7	2420:7	8	,
ARGUMENT	2420:9	2420:16	8	( long ) ps_bytesperrow
LEAF_NODE	2420:9	2420:9	9	(
TYPE_NAME	2420:10	2420:10	9	long
LEAF_NODE	2420:10	2420:10	10	long
LEAF_NODE	2420:14	2420:14	9	)
FIELD	2420:16	2420:16	9	ps_bytesperrow
LEAF_NODE	2420:16	2420:16	10	ps_bytesperrow
LEAF_NODE	2420:30	2420:30	8	)
LEAF_NODE	2420:31	2420:31	6	;
EXPR_STATEMENT	2421:1	2422:57	3	fprintf ( fd , "%lu %lu %d\n" , ( unsigned long ) w , ( unsigned long ) h , bitspersample ) ;
EXPR	2421:1	2421:1	4	fprintf ( fd , "%lu %lu %d\n" , ( unsigned long ) w , ( unsigned long ) h , bitspersample )
FUNCTION_CALL	2421:1	2422:56	5	fprintf ( fd , "%lu %lu %d\n" , ( unsigned long ) w , ( unsigned long ) h , bitspersample )
CALLEE	2421:1	2421:1	6	fprintf
LEAF_NODE	2421:1	2421:1	7	fprintf
LEAF_NODE	2421:8	2421:8	6	(
ARGUMENT	2421:9	2421:9	6	fd
FIELD	2421:9	2421:9	7	fd
LEAF_NODE	2421:9	2421:9	8	fd
LEAF_NODE	2421:11	2421:11	6	,
ARGUMENT	2421:13	2421:13	6	"%lu %lu %d\n"
FIELD	2421:13	2421:13	7	"%lu %lu %d\n"
LEAF_NODE	2421:13	2421:13	8	"%lu %lu %d\n"
LEAF_NODE	2421:27	2421:27	6	,
ARGUMENT	2422:5	2422:21	6	( unsigned long ) w
LEAF_NODE	2422:5	2422:5	7	(
TYPE_NAME	2422:6	2422:15	7	unsigned long
LEAF_NODE	2422:6	2422:6	8	unsigned
LEAF_NODE	2422:15	2422:15	8	long
LEAF_NODE	2422:19	2422:19	7	)
FIELD	2422:21	2422:21	7	w
LEAF_NODE	2422:21	2422:21	8	w
LEAF_NODE	2422:22	2422:22	6	,
ARGUMENT	2422:24	2422:40	6	( unsigned long ) h
LEAF_NODE	2422:24	2422:24	7	(
TYPE_NAME	2422:25	2422:34	7	unsigned long
LEAF_NODE	2422:25	2422:25	8	unsigned
LEAF_NODE	2422:34	2422:34	8	long
LEAF_NODE	2422:38	2422:38	7	)
FIELD	2422:40	2422:40	7	h
LEAF_NODE	2422:40	2422:40	8	h
LEAF_NODE	2422:41	2422:41	6	,
ARGUMENT	2422:43	2422:43	6	bitspersample
FIELD	2422:43	2422:43	7	bitspersample
LEAF_NODE	2422:43	2422:43	8	bitspersample
LEAF_NODE	2422:56	2422:56	6	)
LEAF_NODE	2422:57	2422:57	4	;
EXPR_STATEMENT	2423:1	2424:61	3	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu] \n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h ) ;
EXPR	2423:1	2423:1	4	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu] \n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h )
FUNCTION_CALL	2423:1	2424:60	5	fprintf ( fd , "[%lu 0 0 -%lu 0 %lu] \n" , ( unsigned long ) w , ( unsigned long ) h , ( unsigned long ) h )
CALLEE	2423:1	2423:1	6	fprintf
LEAF_NODE	2423:1	2423:1	7	fprintf
LEAF_NODE	2423:8	2423:8	6	(
ARGUMENT	2423:9	2423:9	6	fd
FIELD	2423:9	2423:9	7	fd
LEAF_NODE	2423:9	2423:9	8	fd
LEAF_NODE	2423:11	2423:11	6	,
ARGUMENT	2423:13	2423:13	6	"[%lu 0 0 -%lu 0 %lu] \n"
FIELD	2423:13	2423:13	7	"[%lu 0 0 -%lu 0 %lu] \n"
LEAF_NODE	2423:13	2423:13	8	"[%lu 0 0 -%lu 0 %lu] \n"
LEAF_NODE	2423:38	2423:38	6	,
ARGUMENT	2424:5	2424:21	6	( unsigned long ) w
LEAF_NODE	2424:5	2424:5	7	(
TYPE_NAME	2424:6	2424:15	7	unsigned long
LEAF_NODE	2424:6	2424:6	8	unsigned
LEAF_NODE	2424:15	2424:15	8	long
LEAF_NODE	2424:19	2424:19	7	)
FIELD	2424:21	2424:21	7	w
LEAF_NODE	2424:21	2424:21	8	w
LEAF_NODE	2424:22	2424:22	6	,
ARGUMENT	2424:24	2424:40	6	( unsigned long ) h
LEAF_NODE	2424:24	2424:24	7	(
TYPE_NAME	2424:25	2424:34	7	unsigned long
LEAF_NODE	2424:25	2424:25	8	unsigned
LEAF_NODE	2424:34	2424:34	8	long
LEAF_NODE	2424:38	2424:38	7	)
FIELD	2424:40	2424:40	7	h
LEAF_NODE	2424:40	2424:40	8	h
LEAF_NODE	2424:41	2424:41	6	,
ARGUMENT	2424:43	2424:59	6	( unsigned long ) h
LEAF_NODE	2424:43	2424:43	7	(
TYPE_NAME	2424:44	2424:53	7	unsigned long
LEAF_NODE	2424:44	2424:44	8	unsigned
LEAF_NODE	2424:53	2424:53	8	long
LEAF_NODE	2424:57	2424:57	7	)
FIELD	2424:59	2424:59	7	h
LEAF_NODE	2424:59	2424:59	8	h
LEAF_NODE	2424:60	2424:60	6	)
LEAF_NODE	2424:61	2424:61	4	;
ITERATION	2425:1	2426:2	3	
KEYWORD	2425:1	2425:1	4	for
LEAF_NODE	2425:1	2425:1	5	for
LEAF_NODE	2425:5	2425:5	4	(
FOR_INIT	2425:6	2425:11	4	i = 0 ;
EXPR	2425:6	2425:6	5	i = 0
ASSIGN	2425:6	2425:10	6	i = 0
LVAL	2425:6	2425:6	7	i
FIELD	2425:6	2425:6	8	i
LEAF_NODE	2425:6	2425:6	9	i
ASSIGN_OP	2425:8	2425:8	7	=
LEAF_NODE	2425:8	2425:8	8	=
RVAL	2425:10	2425:10	7	0
FIELD	2425:10	2425:10	8	0
LEAF_NODE	2425:10	2425:10	9	0
LEAF_NODE	2425:11	2425:11	5	;
CONDITION	2425:13	2425:13	4	i < nc
EXPR	2425:13	2425:17	5	i < nc
FIELD	2425:13	2425:13	6	i
LEAF_NODE	2425:13	2425:13	7	i
REL_OPERATOR	2425:15	2425:15	6	<
LEAF_NODE	2425:15	2425:15	7	<
FIELD	2425:17	2425:17	6	nc
LEAF_NODE	2425:17	2425:17	7	nc
LEAF_NODE	2425:19	2425:19	4	;
FOR_EXPR	2425:21	2425:21	4	i ++
EXPR	2425:21	2425:21	5	i ++
FIELD	2425:21	2425:22	6	i ++
LEAF_NODE	2425:21	2425:21	7	i
LEAF_NODE	2425:22	2425:22	7	++
LEAF_NODE	2425:24	2425:24	4	)
STATEMENTS	2426:2	2426:2	4	
EXPR_STATEMENT	2426:2	2426:64	5	fprintf ( fd , "{currentfile line%d readhexstring pop}bind\n" , i ) ;
EXPR	2426:2	2426:2	6	fprintf ( fd , "{currentfile line%d readhexstring pop}bind\n" , i )
FUNCTION_CALL	2426:2	2426:63	7	fprintf ( fd , "{currentfile line%d readhexstring pop}bind\n" , i )
CALLEE	2426:2	2426:2	8	fprintf
LEAF_NODE	2426:2	2426:2	9	fprintf
LEAF_NODE	2426:9	2426:9	8	(
ARGUMENT	2426:10	2426:10	8	fd
FIELD	2426:10	2426:10	9	fd
LEAF_NODE	2426:10	2426:10	10	fd
LEAF_NODE	2426:12	2426:12	8	,
ARGUMENT	2426:14	2426:14	8	"{currentfile line%d readhexstring pop}bind\n"
FIELD	2426:14	2426:14	9	"{currentfile line%d readhexstring pop}bind\n"
LEAF_NODE	2426:14	2426:14	10	"{currentfile line%d readhexstring pop}bind\n"
LEAF_NODE	2426:60	2426:60	8	,
ARGUMENT	2426:62	2426:62	8	i
FIELD	2426:62	2426:62	9	i
LEAF_NODE	2426:62	2426:62	10	i
LEAF_NODE	2426:63	2426:63	8	)
LEAF_NODE	2426:64	2426:64	6	;
EXPR_STATEMENT	2427:1	2427:40	3	fprintf ( fd , "true %d colorimage\n" , nc ) ;
EXPR	2427:1	2427:1	4	fprintf ( fd , "true %d colorimage\n" , nc )
FUNCTION_CALL	2427:1	2427:39	5	fprintf ( fd , "true %d colorimage\n" , nc )
CALLEE	2427:1	2427:1	6	fprintf
LEAF_NODE	2427:1	2427:1	7	fprintf
LEAF_NODE	2427:8	2427:8	6	(
ARGUMENT	2427:9	2427:9	6	fd
FIELD	2427:9	2427:9	7	fd
LEAF_NODE	2427:9	2427:9	8	fd
LEAF_NODE	2427:11	2427:11	6	,
ARGUMENT	2427:13	2427:13	6	"true %d colorimage\n"
FIELD	2427:13	2427:13	7	"true %d colorimage\n"
LEAF_NODE	2427:13	2427:13	8	"true %d colorimage\n"
LEAF_NODE	2427:35	2427:35	6	,
ARGUMENT	2427:37	2427:37	6	nc
FIELD	2427:37	2427:37	7	nc
LEAF_NODE	2427:37	2427:37	8	nc
LEAF_NODE	2427:39	2427:39	6	)
LEAF_NODE	2427:40	2427:40	4	;
LEAF_NODE	2428:0	2428:0	2	}
FUNCTION_DEF	2437:0	2503:0	1	
RETURN_TYPE	2437:0	2437:0	2	void
TYPE_NAME	2437:0	2437:0	3	void
LEAF_NODE	2437:0	2437:0	4	void
FUNCTION_NAME	2438:0	2438:0	2	PSDataColorContig
LEAF_NODE	2438:0	2438:0	3	PSDataColorContig
PARAMETER_LIST	2438:17	2438:65	2	( FILE * fd , TIFF * tif , uint32 w , uint32 h , int nc )
LEAF_NODE	2438:17	2438:17	3	(
PARAMETER_DECL	2438:18	2438:24	3	FILE * fd
TYPE	2438:18	2438:22	4	FILE *
TYPE_NAME	2438:18	2438:18	5	FILE
LEAF_NODE	2438:18	2438:18	6	FILE
POINTER	2438:22	2438:22	5	*
LEAF_NODE	2438:22	2438:22	6	*
NAME	2438:24	2438:24	4	fd
LEAF_NODE	2438:24	2438:24	5	fd
LEAF_NODE	2438:26	2438:26	3	,
PARAMETER_DECL	2438:28	2438:34	3	TIFF * tif
TYPE	2438:28	2438:32	4	TIFF *
TYPE_NAME	2438:28	2438:28	5	TIFF
LEAF_NODE	2438:28	2438:28	6	TIFF
POINTER	2438:32	2438:32	5	*
LEAF_NODE	2438:32	2438:32	6	*
NAME	2438:34	2438:34	4	tif
LEAF_NODE	2438:34	2438:34	5	tif
LEAF_NODE	2438:37	2438:37	3	,
PARAMETER_DECL	2438:39	2438:46	3	uint32 w
TYPE	2438:39	2438:39	4	uint32
TYPE_NAME	2438:39	2438:39	5	uint32
LEAF_NODE	2438:39	2438:39	6	uint32
NAME	2438:46	2438:46	4	w
LEAF_NODE	2438:46	2438:46	5	w
LEAF_NODE	2438:47	2438:47	3	,
PARAMETER_DECL	2438:49	2438:56	3	uint32 h
TYPE	2438:49	2438:49	4	uint32
TYPE_NAME	2438:49	2438:49	5	uint32
LEAF_NODE	2438:49	2438:49	6	uint32
NAME	2438:56	2438:56	4	h
LEAF_NODE	2438:56	2438:56	5	h
LEAF_NODE	2438:57	2438:57	3	,
PARAMETER_DECL	2438:59	2438:63	3	int nc
TYPE	2438:59	2438:59	4	int
TYPE_NAME	2438:59	2438:59	5	int
LEAF_NODE	2438:59	2438:59	6	int
NAME	2438:63	2438:63	4	nc
LEAF_NODE	2438:63	2438:63	5	nc
LEAF_NODE	2438:65	2438:65	3	)
LEAF_NODE	2439:0	2439:0	2	{
STATEMENTS	2440:1	2502:1	2	
SIMPLE_DECL	2440:1	2440:11	3	uint32 row ;
VAR_DECL	2440:1	2440:8	4	uint32 row
TYPE	2440:1	2440:1	5	uint32
TYPE_NAME	2440:1	2440:1	6	uint32
LEAF_NODE	2440:1	2440:1	7	uint32
NAME	2440:8	2440:8	5	row
LEAF_NODE	2440:8	2440:8	6	row
LEAF_NODE	2440:11	2440:11	4	;
SIMPLE_DECL	2441:1	2441:50	3	int breaklen ; breaklen = MAXLINE , int es ; es = samplesperpixel - nc ;
INIT_DECL_LIST	2441:1	2441:1	4	int breaklen ; breaklen = MAXLINE , int es ; es = samplesperpixel - nc
VAR_DECL	2441:1	2441:5	5	int breaklen ; breaklen = MAXLINE
TYPE	2441:1	2441:1	6	int
TYPE_NAME	2441:1	2441:1	7	int
LEAF_NODE	2441:1	2441:1	8	int
NAME	2441:5	2441:5	6	breaklen
LEAF_NODE	2441:5	2441:5	7	breaklen
LEAF_NODE	0:0	0:0	6	;
INIT	2441:5	2441:5	6	breaklen = MAXLINE
ASSIGN	2441:5	2441:16	7	breaklen = MAXLINE
LVAL	2441:5	2441:5	8	breaklen
NAME	2441:5	2441:5	9	breaklen
LEAF_NODE	2441:5	2441:5	10	breaklen
ASSIGN_OP	2441:14	2441:14	8	=
LEAF_NODE	2441:14	2441:14	9	=
RVAL	2441:16	2441:16	8	MAXLINE
FIELD	2441:16	2441:16	9	MAXLINE
LEAF_NODE	2441:16	2441:16	10	MAXLINE
LEAF_NODE	2441:23	2441:23	5	,
VAR_DECL	2441:1	2441:25	5	int es ; es = samplesperpixel - nc
TYPE	2441:1	2441:1	6	int
TYPE_NAME	2441:1	2441:1	7	int
LEAF_NODE	2441:1	2441:1	8	int
NAME	2441:25	2441:25	6	es
LEAF_NODE	2441:25	2441:25	7	es
LEAF_NODE	0:0	0:0	6	;
INIT	2441:25	2441:25	6	es = samplesperpixel - nc
ASSIGN	2441:25	2441:30	7	es = samplesperpixel - nc
LVAL	2441:25	2441:25	8	es
NAME	2441:25	2441:25	9	es
LEAF_NODE	2441:25	2441:25	10	es
ASSIGN_OP	2441:28	2441:28	8	=
LEAF_NODE	2441:28	2441:28	9	=
RVAL	2441:30	2441:48	8	samplesperpixel - nc
FIELD	2441:30	2441:30	9	samplesperpixel
LEAF_NODE	2441:30	2441:30	10	samplesperpixel
LEAF_NODE	2441:46	2441:46	9	-
FIELD	2441:48	2441:48	9	nc
LEAF_NODE	2441:48	2441:48	10	nc
LEAF_NODE	2441:50	2441:50	4	;
SIMPLE_DECL	2442:1	2442:11	3	tsize_t cc ;
VAR_DECL	2442:1	2442:9	4	tsize_t cc
TYPE	2442:1	2442:1	5	tsize_t
TYPE_NAME	2442:1	2442:1	6	tsize_t
LEAF_NODE	2442:1	2442:1	7	tsize_t
NAME	2442:9	2442:9	5	cc
LEAF_NODE	2442:9	2442:9	6	cc
LEAF_NODE	2442:11	2442:11	4	;
SIMPLE_DECL	2443:1	2443:22	3	unsigned char * tf_buf ;
VAR_DECL	2443:1	2443:16	4	unsigned char * tf_buf
TYPE	2443:1	2443:15	5	unsigned char *
TYPE_NAME	2443:1	2443:10	6	unsigned char
LEAF_NODE	2443:1	2443:1	7	unsigned
LEAF_NODE	2443:10	2443:10	7	char
POINTER	2443:15	2443:15	6	*
LEAF_NODE	2443:15	2443:15	7	*
NAME	2443:16	2443:16	5	tf_buf
LEAF_NODE	2443:16	2443:16	6	tf_buf
LEAF_NODE	2443:22	2443:22	4	;
SIMPLE_DECL	2444:1	2444:21	3	unsigned char * cp , unsigned char c ;
INIT_DECL_LIST	2444:1	2444:1	4	unsigned char * cp , unsigned char c
VAR_DECL	2444:1	2444:16	5	unsigned char * cp
TYPE	2444:1	2444:15	6	unsigned char *
TYPE_NAME	2444:1	2444:10	7	unsigned char
LEAF_NODE	2444:1	2444:1	8	unsigned
LEAF_NODE	2444:10	2444:10	8	char
POINTER	2444:15	2444:15	7	*
LEAF_NODE	2444:15	2444:15	8	*
NAME	2444:16	2444:16	6	cp
LEAF_NODE	2444:16	2444:16	7	cp
LEAF_NODE	2444:18	2444:18	5	,
VAR_DECL	2444:1	2444:20	5	unsigned char c
TYPE	2444:1	2444:1	6	unsigned char
TYPE_NAME	2444:1	2444:10	7	unsigned char
LEAF_NODE	2444:1	2444:1	8	unsigned
LEAF_NODE	2444:10	2444:10	8	char
NAME	2444:20	2444:20	6	c
LEAF_NODE	2444:20	2444:20	7	c
LEAF_NODE	2444:21	2444:21	4	;
EXPR_STATEMENT	2446:1	2446:9	3	( void ) w ;
EXPR	2446:1	2446:8	4	( void ) w
LEAF_NODE	2446:1	2446:1	5	(
TYPE_NAME	2446:2	2446:2	5	void
LEAF_NODE	2446:2	2446:2	6	void
LEAF_NODE	2446:6	2446:6	5	)
FIELD	2446:8	2446:8	5	w
LEAF_NODE	2446:8	2446:8	6	w
LEAF_NODE	2446:9	2446:9	4	;
SELECTION	2447:8	2448:8	3	
KEYWORD	2447:8	2447:8	4	if
LEAF_NODE	2447:8	2447:8	5	if
LEAF_NODE	2447:10	2447:10	4	(
CONDITION	2447:12	2447:12	4	es < 0
EXPR	2447:12	2447:17	5	es < 0
FIELD	2447:12	2447:12	6	es
LEAF_NODE	2447:12	2447:12	7	es
REL_OPERATOR	2447:15	2447:15	6	<
LEAF_NODE	2447:15	2447:15	7	<
FIELD	2447:17	2447:17	6	0
LEAF_NODE	2447:17	2447:17	7	0
LEAF_NODE	2447:19	2447:19	4	)
STATEMENTS	2448:8	2451:8	4	
LEAF_NODE	2448:8	2448:8	5	{
STATEMENTS	2449:12	2450:12	5	
EXPR_STATEMENT	2449:12	2449:116	6	TIFFError ( filename , "Inconsistent value of es: %d (samplesperpixel=%u, nc=%d)" , es , samplesperpixel , nc ) ;
EXPR	2449:12	2449:12	7	TIFFError ( filename , "Inconsistent value of es: %d (samplesperpixel=%u, nc=%d)" , es , samplesperpixel , nc )
FUNCTION_CALL	2449:12	2449:115	8	TIFFError ( filename , "Inconsistent value of es: %d (samplesperpixel=%u, nc=%d)" , es , samplesperpixel , nc )
CALLEE	2449:12	2449:12	9	TIFFError
LEAF_NODE	2449:12	2449:12	10	TIFFError
LEAF_NODE	2449:21	2449:21	9	(
ARGUMENT	2449:22	2449:22	9	filename
FIELD	2449:22	2449:22	10	filename
LEAF_NODE	2449:22	2449:22	11	filename
LEAF_NODE	2449:30	2449:30	9	,
ARGUMENT	2449:32	2449:32	9	"Inconsistent value of es: %d (samplesperpixel=%u, nc=%d)"
FIELD	2449:32	2449:32	10	"Inconsistent value of es: %d (samplesperpixel=%u, nc=%d)"
LEAF_NODE	2449:32	2449:32	11	"Inconsistent value of es: %d (samplesperpixel=%u, nc=%d)"
LEAF_NODE	2449:90	2449:90	9	,
ARGUMENT	2449:92	2449:92	9	es
FIELD	2449:92	2449:92	10	es
LEAF_NODE	2449:92	2449:92	11	es
LEAF_NODE	2449:94	2449:94	9	,
ARGUMENT	2449:96	2449:96	9	samplesperpixel
FIELD	2449:96	2449:96	10	samplesperpixel
LEAF_NODE	2449:96	2449:96	11	samplesperpixel
LEAF_NODE	2449:111	2449:111	9	,
ARGUMENT	2449:113	2449:113	9	nc
FIELD	2449:113	2449:113	10	nc
LEAF_NODE	2449:113	2449:113	11	nc
LEAF_NODE	2449:115	2449:115	9	)
LEAF_NODE	2449:116	2449:116	7	;
JUMP_STATEMENT	2450:12	2450:18	6	return DESTINATION ;
KEYWORD	2450:12	2450:12	7	return
LEAF_NODE	2450:12	2450:12	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2450:18	2450:18	7	;
LEAF_NODE	2451:8	2451:8	5	}
EXPR_STATEMENT	2452:1	2452:55	3	tf_buf = ( unsigned char * ) _TIFFmalloc ( tf_bytesperrow ) ;
EXPR	2452:1	2452:1	4	tf_buf = ( unsigned char * ) _TIFFmalloc ( tf_bytesperrow )
ASSIGN	2452:1	2452:10	5	tf_buf = ( unsigned char * ) _TIFFmalloc ( tf_bytesperrow )
LVAL	2452:1	2452:1	6	tf_buf
FIELD	2452:1	2452:1	7	tf_buf
LEAF_NODE	2452:1	2452:1	8	tf_buf
ASSIGN_OP	2452:8	2452:8	6	=
LEAF_NODE	2452:8	2452:8	7	=
RVAL	2452:10	2452:28	6	( unsigned char * ) _TIFFmalloc ( tf_bytesperrow )
LEAF_NODE	2452:10	2452:10	7	(
TYPE_NAME	2452:11	2452:20	7	unsigned char
LEAF_NODE	2452:11	2452:11	8	unsigned
LEAF_NODE	2452:20	2452:20	8	char
LEAF_NODE	2452:25	2452:25	7	*
LEAF_NODE	2452:26	2452:26	7	)
FUNCTION_CALL	2452:28	2452:54	7	_TIFFmalloc ( tf_bytesperrow )
CALLEE	2452:28	2452:28	8	_TIFFmalloc
LEAF_NODE	2452:28	2452:28	9	_TIFFmalloc
LEAF_NODE	2452:39	2452:39	8	(
ARGUMENT	2452:40	2452:40	8	tf_bytesperrow
FIELD	2452:40	2452:40	9	tf_bytesperrow
LEAF_NODE	2452:40	2452:40	10	tf_bytesperrow
LEAF_NODE	2452:54	2452:54	8	)
LEAF_NODE	2452:55	2452:55	4	;
SELECTION	2453:1	2453:21	3	
KEYWORD	2453:1	2453:1	4	if
LEAF_NODE	2453:1	2453:1	5	if
LEAF_NODE	2453:4	2453:4	4	(
CONDITION	2453:5	2453:5	4	tf_buf == NULL
EXPR	2453:5	2453:15	5	tf_buf == NULL
FIELD	2453:5	2453:5	6	tf_buf
LEAF_NODE	2453:5	2453:5	7	tf_buf
EQ_OPERATOR	2453:12	2453:12	6	==
LEAF_NODE	2453:12	2453:12	7	==
FIELD	2453:15	2453:15	6	NULL
LEAF_NODE	2453:15	2453:15	7	NULL
LEAF_NODE	2453:19	2453:19	4	)
STATEMENTS	2453:21	2456:1	4	
LEAF_NODE	2453:21	2453:21	5	{
STATEMENTS	2454:2	2455:2	5	
EXPR_STATEMENT	2454:2	2454:53	6	TIFFError ( filename , "No space for scanline buffer" ) ;
EXPR	2454:2	2454:2	7	TIFFError ( filename , "No space for scanline buffer" )
FUNCTION_CALL	2454:2	2454:52	8	TIFFError ( filename , "No space for scanline buffer" )
CALLEE	2454:2	2454:2	9	TIFFError
LEAF_NODE	2454:2	2454:2	10	TIFFError
LEAF_NODE	2454:11	2454:11	9	(
ARGUMENT	2454:12	2454:12	9	filename
FIELD	2454:12	2454:12	10	filename
LEAF_NODE	2454:12	2454:12	11	filename
LEAF_NODE	2454:20	2454:20	9	,
ARGUMENT	2454:22	2454:22	9	"No space for scanline buffer"
FIELD	2454:22	2454:22	10	"No space for scanline buffer"
LEAF_NODE	2454:22	2454:22	11	"No space for scanline buffer"
LEAF_NODE	2454:52	2454:52	9	)
LEAF_NODE	2454:53	2454:53	7	;
JUMP_STATEMENT	2455:2	2455:8	6	return DESTINATION ;
KEYWORD	2455:2	2455:2	7	return
LEAF_NODE	2455:2	2455:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2455:8	2455:8	7	;
LEAF_NODE	2456:1	2456:1	5	}
ITERATION	2457:1	2457:31	3	
KEYWORD	2457:1	2457:1	4	for
LEAF_NODE	2457:1	2457:1	5	for
LEAF_NODE	2457:5	2457:5	4	(
FOR_INIT	2457:6	2457:13	4	row = 0 ;
EXPR	2457:6	2457:6	5	row = 0
ASSIGN	2457:6	2457:12	6	row = 0
LVAL	2457:6	2457:6	7	row
FIELD	2457:6	2457:6	8	row
LEAF_NODE	2457:6	2457:6	9	row
ASSIGN_OP	2457:10	2457:10	7	=
LEAF_NODE	2457:10	2457:10	8	=
RVAL	2457:12	2457:12	7	0
FIELD	2457:12	2457:12	8	0
LEAF_NODE	2457:12	2457:12	9	0
LEAF_NODE	2457:13	2457:13	5	;
CONDITION	2457:15	2457:15	4	row < h
EXPR	2457:15	2457:21	5	row < h
FIELD	2457:15	2457:15	6	row
LEAF_NODE	2457:15	2457:15	7	row
REL_OPERATOR	2457:19	2457:19	6	<
LEAF_NODE	2457:19	2457:19	7	<
FIELD	2457:21	2457:21	6	h
LEAF_NODE	2457:21	2457:21	7	h
LEAF_NODE	2457:22	2457:22	4	;
FOR_EXPR	2457:24	2457:24	4	row ++
EXPR	2457:24	2457:24	5	row ++
FIELD	2457:24	2457:27	6	row ++
LEAF_NODE	2457:24	2457:24	7	row
LEAF_NODE	2457:27	2457:27	7	++
LEAF_NODE	2457:29	2457:29	4	)
STATEMENTS	2457:31	2501:1	4	
LEAF_NODE	2457:31	2457:31	5	{
STATEMENTS	2458:2	2488:4	5	
SELECTION	2458:2	2459:3	6	
KEYWORD	2458:2	2458:2	7	if
LEAF_NODE	2458:2	2458:2	8	if
LEAF_NODE	2458:5	2458:5	7	(
CONDITION	2458:6	2458:6	7	TIFFReadScanline ( tif , tf_buf , row , 0 ) < 0
EXPR	2458:6	2458:46	8	TIFFReadScanline ( tif , tf_buf , row , 0 ) < 0
FUNCTION_CALL	2458:6	2458:42	9	TIFFReadScanline ( tif , tf_buf , row , 0 )
CALLEE	2458:6	2458:6	10	TIFFReadScanline
LEAF_NODE	2458:6	2458:6	11	TIFFReadScanline
LEAF_NODE	2458:22	2458:22	10	(
ARGUMENT	2458:23	2458:23	10	tif
FIELD	2458:23	2458:23	11	tif
LEAF_NODE	2458:23	2458:23	12	tif
LEAF_NODE	2458:26	2458:26	10	,
ARGUMENT	2458:28	2458:28	10	tf_buf
FIELD	2458:28	2458:28	11	tf_buf
LEAF_NODE	2458:28	2458:28	12	tf_buf
LEAF_NODE	2458:34	2458:34	10	,
ARGUMENT	2458:36	2458:36	10	row
FIELD	2458:36	2458:36	11	row
LEAF_NODE	2458:36	2458:36	12	row
LEAF_NODE	2458:39	2458:39	10	,
ARGUMENT	2458:41	2458:41	10	0
FIELD	2458:41	2458:41	11	0
LEAF_NODE	2458:41	2458:41	12	0
LEAF_NODE	2458:42	2458:42	10	)
REL_OPERATOR	2458:44	2458:44	9	<
LEAF_NODE	2458:44	2458:44	10	<
FIELD	2458:46	2458:46	9	0
LEAF_NODE	2458:46	2458:46	10	0
LEAF_NODE	2458:47	2458:47	7	)
STATEMENTS	2459:3	2459:3	7	
JUMP_STATEMENT	2459:3	2459:8	8	break DESTINATION ;
KEYWORD	2459:3	2459:3	9	break
LEAF_NODE	2459:3	2459:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	2459:8	2459:8	9	;
EXPR_STATEMENT	2460:2	2460:13	6	cp = tf_buf ;
EXPR	2460:2	2460:2	7	cp = tf_buf
ASSIGN	2460:2	2460:7	8	cp = tf_buf
LVAL	2460:2	2460:2	9	cp
FIELD	2460:2	2460:2	10	cp
LEAF_NODE	2460:2	2460:2	11	cp
ASSIGN_OP	2460:5	2460:5	9	=
LEAF_NODE	2460:5	2460:5	10	=
RVAL	2460:7	2460:7	9	tf_buf
FIELD	2460:7	2460:7	10	tf_buf
LEAF_NODE	2460:7	2460:7	11	tf_buf
LEAF_NODE	2460:13	2460:13	7	;
SELECTION	2465:2	2465:46	6	
KEYWORD	2465:2	2465:2	7	if
LEAF_NODE	2465:2	2465:2	8	if
LEAF_NODE	2465:5	2465:5	7	(
CONDITION	2465:6	2465:6	7	bitspersample == 16 && ! HOST_BIGENDIAN
EXPR	2465:6	2465:6	8	bitspersample == 16 && ! HOST_BIGENDIAN
AND	2465:6	2465:29	9	bitspersample == 16 && ! HOST_BIGENDIAN
EXPR	2465:6	2465:23	10	bitspersample == 16
FIELD	2465:6	2465:6	11	bitspersample
LEAF_NODE	2465:6	2465:6	12	bitspersample
EQ_OPERATOR	2465:20	2465:20	11	==
LEAF_NODE	2465:20	2465:20	12	==
FIELD	2465:23	2465:23	11	16
LEAF_NODE	2465:23	2465:23	12	16
LEAF_NODE	2465:26	2465:26	10	&&
EXPR	2465:29	2465:29	10	! HOST_BIGENDIAN
UNARY_EXPR	2465:29	2465:30	11	! HOST_BIGENDIAN
UNARY_OPERATOR	2465:29	2465:29	12	!
LEAF_NODE	2465:29	2465:29	13	!
FIELD	2465:30	2465:30	12	HOST_BIGENDIAN
LEAF_NODE	2465:30	2465:30	13	HOST_BIGENDIAN
LEAF_NODE	2465:44	2465:44	7	)
STATEMENTS	2465:46	2467:2	7	
LEAF_NODE	2465:46	2465:46	8	{
STATEMENTS	2466:3	2466:3	8	
EXPR_STATEMENT	2466:3	2466:35	9	PS_FlipBytes ( cp , tf_bytesperrow ) ;
EXPR	2466:3	2466:3	10	PS_FlipBytes ( cp , tf_bytesperrow )
FUNCTION_CALL	2466:3	2466:34	11	PS_FlipBytes ( cp , tf_bytesperrow )
CALLEE	2466:3	2466:3	12	PS_FlipBytes
LEAF_NODE	2466:3	2466:3	13	PS_FlipBytes
LEAF_NODE	2466:15	2466:15	12	(
ARGUMENT	2466:16	2466:16	12	cp
FIELD	2466:16	2466:16	13	cp
LEAF_NODE	2466:16	2466:16	14	cp
LEAF_NODE	2466:18	2466:18	12	,
ARGUMENT	2466:20	2466:20	12	tf_bytesperrow
FIELD	2466:20	2466:20	13	tf_bytesperrow
LEAF_NODE	2466:20	2466:20	14	tf_bytesperrow
LEAF_NODE	2466:34	2466:34	12	)
LEAF_NODE	2466:35	2466:35	10	;
LEAF_NODE	2467:2	2467:2	8	}
SELECTION	2468:2	2468:13	6	
KEYWORD	2468:2	2468:2	7	if
LEAF_NODE	2468:2	2468:2	8	if
LEAF_NODE	2468:5	2468:5	7	(
CONDITION	2468:6	2468:6	7	alpha
EXPR	2468:6	2468:6	8	alpha
FIELD	2468:6	2468:6	9	alpha
LEAF_NODE	2468:6	2468:6	10	alpha
LEAF_NODE	2468:11	2468:11	7	)
STATEMENTS	2468:13	2488:2	7	
LEAF_NODE	2468:13	2468:13	8	{
STATEMENTS	2469:3	2471:3	8	
SIMPLE_DECL	2469:3	2469:13	9	int adjust ;
VAR_DECL	2469:3	2469:7	10	int adjust
TYPE	2469:3	2469:3	11	int
TYPE_NAME	2469:3	2469:3	12	int
LEAF_NODE	2469:3	2469:3	13	int
NAME	2469:7	2469:7	11	adjust
LEAF_NODE	2469:7	2469:7	12	adjust
LEAF_NODE	2469:13	2469:13	10	;
EXPR_STATEMENT	2470:3	2470:9	9	cc = 0 ;
EXPR	2470:3	2470:3	10	cc = 0
ASSIGN	2470:3	2470:8	11	cc = 0
LVAL	2470:3	2470:3	12	cc
FIELD	2470:3	2470:3	13	cc
LEAF_NODE	2470:3	2470:3	14	cc
ASSIGN_OP	2470:6	2470:6	12	=
LEAF_NODE	2470:6	2470:6	13	=
RVAL	2470:8	2470:8	12	0
FIELD	2470:8	2470:8	13	0
LEAF_NODE	2470:8	2470:8	14	0
LEAF_NODE	2470:9	2470:9	10	;
ITERATION	2471:3	2471:62	9	
KEYWORD	2471:3	2471:3	10	for
LEAF_NODE	2471:3	2471:3	11	for
LEAF_NODE	2471:7	2471:7	10	(
FOR_INIT	2471:8	2471:8	10	;
LEAF_NODE	2471:8	2471:8	11	;
CONDITION	2471:10	2471:10	10	( cc + nc ) <= tf_bytesperrow
EXPR	2471:10	2471:23	11	( cc + nc ) <= tf_bytesperrow
LEAF_NODE	2471:10	2471:10	12	(
FIELD	2471:11	2471:11	12	cc
LEAF_NODE	2471:11	2471:11	13	cc
LEAF_NODE	2471:14	2471:14	12	+
FIELD	2471:16	2471:16	12	nc
LEAF_NODE	2471:16	2471:16	13	nc
LEAF_NODE	2471:18	2471:18	12	)
REL_OPERATOR	2471:20	2471:20	12	<=
LEAF_NODE	2471:20	2471:20	13	<=
FIELD	2471:23	2471:23	12	tf_bytesperrow
LEAF_NODE	2471:23	2471:23	13	tf_bytesperrow
LEAF_NODE	2471:37	2471:37	10	;
FOR_EXPR	2471:39	2471:39	10	cc += samplesperpixel
EXPR	2471:39	2471:39	11	cc += samplesperpixel
ASSIGN	2471:39	2471:45	12	cc += samplesperpixel
LVAL	2471:39	2471:39	13	cc
FIELD	2471:39	2471:39	14	cc
LEAF_NODE	2471:39	2471:39	15	cc
ASSIGN_OP	2471:42	2471:42	13	+=
LEAF_NODE	2471:42	2471:42	14	+=
RVAL	2471:45	2471:45	13	samplesperpixel
FIELD	2471:45	2471:45	14	samplesperpixel
LEAF_NODE	2471:45	2471:45	15	samplesperpixel
LEAF_NODE	2471:60	2471:60	10	)
STATEMENTS	2471:62	2487:3	10	
LEAF_NODE	2471:62	2471:62	11	{
STATEMENTS	2472:4	2486:4	11	
EXPR_STATEMENT	2472:4	2472:29	12	DOBREAK ( breaklen , nc , fd ) ;
EXPR	2472:4	2472:4	13	DOBREAK ( breaklen , nc , fd )
FUNCTION_CALL	2472:4	2472:28	14	DOBREAK ( breaklen , nc , fd )
CALLEE	2472:4	2472:4	15	DOBREAK
LEAF_NODE	2472:4	2472:4	16	DOBREAK
LEAF_NODE	2472:11	2472:11	15	(
ARGUMENT	2472:12	2472:12	15	breaklen
FIELD	2472:12	2472:12	16	breaklen
LEAF_NODE	2472:12	2472:12	17	breaklen
LEAF_NODE	2472:20	2472:20	15	,
ARGUMENT	2472:22	2472:22	15	nc
FIELD	2472:22	2472:22	16	nc
LEAF_NODE	2472:22	2472:22	17	nc
LEAF_NODE	2472:24	2472:24	15	,
ARGUMENT	2472:26	2472:26	15	fd
FIELD	2472:26	2472:26	16	fd
LEAF_NODE	2472:26	2472:26	17	fd
LEAF_NODE	2472:28	2472:28	15	)
LEAF_NODE	2472:29	2472:29	13	;
EXPR_STATEMENT	2479:4	2479:25	12	adjust = 255 - cp [ nc ] ;
EXPR	2479:4	2479:4	13	adjust = 255 - cp [ nc ]
ASSIGN	2479:4	2479:13	14	adjust = 255 - cp [ nc ]
LVAL	2479:4	2479:4	15	adjust
FIELD	2479:4	2479:4	16	adjust
LEAF_NODE	2479:4	2479:4	17	adjust
ASSIGN_OP	2479:11	2479:11	15	=
LEAF_NODE	2479:11	2479:11	16	=
RVAL	2479:13	2479:19	15	255 - cp [ nc ]
FIELD	2479:13	2479:13	16	255
LEAF_NODE	2479:13	2479:13	17	255
LEAF_NODE	2479:17	2479:17	16	-
FIELD	2479:19	2479:24	16	cp [ nc ]
LEAF_NODE	2479:19	2479:19	17	cp
LEAF_NODE	2479:21	2479:21	17	[
EXPR	2479:22	2479:22	17	nc
FIELD	2479:22	2479:22	18	nc
LEAF_NODE	2479:22	2479:22	19	nc
LEAF_NODE	2479:24	2479:24	17	]
LEAF_NODE	2479:25	2479:25	13	;
SELECTION	2480:4	2480:16	12	
KEYWORD	2480:4	2480:4	13	switch
LEAF_NODE	2480:4	2480:4	14	switch
LEAF_NODE	2480:11	2480:11	13	(
CONDITION	2480:12	2480:12	13	nc
EXPR	2480:12	2480:12	14	nc
FIELD	2480:12	2480:12	15	nc
LEAF_NODE	2480:12	2480:12	16	nc
LEAF_NODE	2480:14	2480:14	13	)
STATEMENTS	2480:16	2485:4	13	
LEAF_NODE	2480:16	2480:16	14	{
STATEMENTS	2481:4	2484:32	14	
LABEL	2481:4	2481:10	15	case 4 :
LEAF_NODE	2481:4	2481:4	16	case
LEAF_NODE	2481:9	2481:9	16	4
LEAF_NODE	2481:10	2481:10	16	:
EXPR_STATEMENT	2481:12	2481:30	15	c = * cp ++ + adjust ;
EXPR	2481:12	2481:12	16	c = * cp ++ + adjust
ASSIGN	2481:12	2481:16	17	c = * cp ++ + adjust
LVAL	2481:12	2481:12	18	c
FIELD	2481:12	2481:12	19	c
LEAF_NODE	2481:12	2481:12	20	c
ASSIGN_OP	2481:14	2481:14	18	=
LEAF_NODE	2481:14	2481:14	19	=
RVAL	2481:16	2481:24	18	* cp ++ + adjust
UNARY_EXPR	2481:16	2481:17	19	* cp ++
UNARY_OPERATOR	2481:16	2481:16	20	*
LEAF_NODE	2481:16	2481:16	21	*
FIELD	2481:17	2481:19	20	cp ++
LEAF_NODE	2481:17	2481:17	21	cp
LEAF_NODE	2481:19	2481:19	21	++
LEAF_NODE	2481:22	2481:22	19	+
FIELD	2481:24	2481:24	19	adjust
LEAF_NODE	2481:24	2481:24	20	adjust
LEAF_NODE	2481:30	2481:30	16	;
EXPR_STATEMENT	2481:32	2481:44	15	PUTHEX ( c , fd ) ;
EXPR	2481:32	2481:32	16	PUTHEX ( c , fd )
FUNCTION_CALL	2481:32	2481:43	17	PUTHEX ( c , fd )
CALLEE	2481:32	2481:32	18	PUTHEX
LEAF_NODE	2481:32	2481:32	19	PUTHEX
LEAF_NODE	2481:38	2481:38	18	(
ARGUMENT	2481:39	2481:39	18	c
FIELD	2481:39	2481:39	19	c
LEAF_NODE	2481:39	2481:39	20	c
LEAF_NODE	2481:40	2481:40	18	,
ARGUMENT	2481:41	2481:41	18	fd
FIELD	2481:41	2481:41	19	fd
LEAF_NODE	2481:41	2481:41	20	fd
LEAF_NODE	2481:43	2481:43	18	)
LEAF_NODE	2481:44	2481:44	16	;
LABEL	2482:4	2482:10	15	case 3 :
LEAF_NODE	2482:4	2482:4	16	case
LEAF_NODE	2482:9	2482:9	16	3
LEAF_NODE	2482:10	2482:10	16	:
EXPR_STATEMENT	2482:12	2482:30	15	c = * cp ++ + adjust ;
EXPR	2482:12	2482:12	16	c = * cp ++ + adjust
ASSIGN	2482:12	2482:16	17	c = * cp ++ + adjust
LVAL	2482:12	2482:12	18	c
FIELD	2482:12	2482:12	19	c
LEAF_NODE	2482:12	2482:12	20	c
ASSIGN_OP	2482:14	2482:14	18	=
LEAF_NODE	2482:14	2482:14	19	=
RVAL	2482:16	2482:24	18	* cp ++ + adjust
UNARY_EXPR	2482:16	2482:17	19	* cp ++
UNARY_OPERATOR	2482:16	2482:16	20	*
LEAF_NODE	2482:16	2482:16	21	*
FIELD	2482:17	2482:19	20	cp ++
LEAF_NODE	2482:17	2482:17	21	cp
LEAF_NODE	2482:19	2482:19	21	++
LEAF_NODE	2482:22	2482:22	19	+
FIELD	2482:24	2482:24	19	adjust
LEAF_NODE	2482:24	2482:24	20	adjust
LEAF_NODE	2482:30	2482:30	16	;
EXPR_STATEMENT	2482:32	2482:44	15	PUTHEX ( c , fd ) ;
EXPR	2482:32	2482:32	16	PUTHEX ( c , fd )
FUNCTION_CALL	2482:32	2482:43	17	PUTHEX ( c , fd )
CALLEE	2482:32	2482:32	18	PUTHEX
LEAF_NODE	2482:32	2482:32	19	PUTHEX
LEAF_NODE	2482:38	2482:38	18	(
ARGUMENT	2482:39	2482:39	18	c
FIELD	2482:39	2482:39	19	c
LEAF_NODE	2482:39	2482:39	20	c
LEAF_NODE	2482:40	2482:40	18	,
ARGUMENT	2482:41	2482:41	18	fd
FIELD	2482:41	2482:41	19	fd
LEAF_NODE	2482:41	2482:41	20	fd
LEAF_NODE	2482:43	2482:43	18	)
LEAF_NODE	2482:44	2482:44	16	;
LABEL	2483:4	2483:10	15	case 2 :
LEAF_NODE	2483:4	2483:4	16	case
LEAF_NODE	2483:9	2483:9	16	2
LEAF_NODE	2483:10	2483:10	16	:
EXPR_STATEMENT	2483:12	2483:30	15	c = * cp ++ + adjust ;
EXPR	2483:12	2483:12	16	c = * cp ++ + adjust
ASSIGN	2483:12	2483:16	17	c = * cp ++ + adjust
LVAL	2483:12	2483:12	18	c
FIELD	2483:12	2483:12	19	c
LEAF_NODE	2483:12	2483:12	20	c
ASSIGN_OP	2483:14	2483:14	18	=
LEAF_NODE	2483:14	2483:14	19	=
RVAL	2483:16	2483:24	18	* cp ++ + adjust
UNARY_EXPR	2483:16	2483:17	19	* cp ++
UNARY_OPERATOR	2483:16	2483:16	20	*
LEAF_NODE	2483:16	2483:16	21	*
FIELD	2483:17	2483:19	20	cp ++
LEAF_NODE	2483:17	2483:17	21	cp
LEAF_NODE	2483:19	2483:19	21	++
LEAF_NODE	2483:22	2483:22	19	+
FIELD	2483:24	2483:24	19	adjust
LEAF_NODE	2483:24	2483:24	20	adjust
LEAF_NODE	2483:30	2483:30	16	;
EXPR_STATEMENT	2483:32	2483:44	15	PUTHEX ( c , fd ) ;
EXPR	2483:32	2483:32	16	PUTHEX ( c , fd )
FUNCTION_CALL	2483:32	2483:43	17	PUTHEX ( c , fd )
CALLEE	2483:32	2483:32	18	PUTHEX
LEAF_NODE	2483:32	2483:32	19	PUTHEX
LEAF_NODE	2483:38	2483:38	18	(
ARGUMENT	2483:39	2483:39	18	c
FIELD	2483:39	2483:39	19	c
LEAF_NODE	2483:39	2483:39	20	c
LEAF_NODE	2483:40	2483:40	18	,
ARGUMENT	2483:41	2483:41	18	fd
FIELD	2483:41	2483:41	19	fd
LEAF_NODE	2483:41	2483:41	20	fd
LEAF_NODE	2483:43	2483:43	18	)
LEAF_NODE	2483:44	2483:44	16	;
LABEL	2484:4	2484:10	15	case 1 :
LEAF_NODE	2484:4	2484:4	16	case
LEAF_NODE	2484:9	2484:9	16	1
LEAF_NODE	2484:10	2484:10	16	:
EXPR_STATEMENT	2484:12	2484:30	15	c = * cp ++ + adjust ;
EXPR	2484:12	2484:12	16	c = * cp ++ + adjust
ASSIGN	2484:12	2484:16	17	c = * cp ++ + adjust
LVAL	2484:12	2484:12	18	c
FIELD	2484:12	2484:12	19	c
LEAF_NODE	2484:12	2484:12	20	c
ASSIGN_OP	2484:14	2484:14	18	=
LEAF_NODE	2484:14	2484:14	19	=
RVAL	2484:16	2484:24	18	* cp ++ + adjust
UNARY_EXPR	2484:16	2484:17	19	* cp ++
UNARY_OPERATOR	2484:16	2484:16	20	*
LEAF_NODE	2484:16	2484:16	21	*
FIELD	2484:17	2484:19	20	cp ++
LEAF_NODE	2484:17	2484:17	21	cp
LEAF_NODE	2484:19	2484:19	21	++
LEAF_NODE	2484:22	2484:22	19	+
FIELD	2484:24	2484:24	19	adjust
LEAF_NODE	2484:24	2484:24	20	adjust
LEAF_NODE	2484:30	2484:30	16	;
EXPR_STATEMENT	2484:32	2484:44	15	PUTHEX ( c , fd ) ;
EXPR	2484:32	2484:32	16	PUTHEX ( c , fd )
FUNCTION_CALL	2484:32	2484:43	17	PUTHEX ( c , fd )
CALLEE	2484:32	2484:32	18	PUTHEX
LEAF_NODE	2484:32	2484:32	19	PUTHEX
LEAF_NODE	2484:38	2484:38	18	(
ARGUMENT	2484:39	2484:39	18	c
FIELD	2484:39	2484:39	19	c
LEAF_NODE	2484:39	2484:39	20	c
LEAF_NODE	2484:40	2484:40	18	,
ARGUMENT	2484:41	2484:41	18	fd
FIELD	2484:41	2484:41	19	fd
LEAF_NODE	2484:41	2484:41	20	fd
LEAF_NODE	2484:43	2484:43	18	)
LEAF_NODE	2484:44	2484:44	16	;
LEAF_NODE	2485:4	2485:4	14	}
EXPR_STATEMENT	2486:4	2486:12	12	cp += es ;
EXPR	2486:4	2486:4	13	cp += es
ASSIGN	2486:4	2486:10	14	cp += es
LVAL	2486:4	2486:4	15	cp
FIELD	2486:4	2486:4	16	cp
LEAF_NODE	2486:4	2486:4	17	cp
ASSIGN_OP	2486:7	2486:7	15	+=
LEAF_NODE	2486:7	2486:7	16	+=
RVAL	2486:10	2486:10	15	es
FIELD	2486:10	2486:10	16	es
LEAF_NODE	2486:10	2486:10	17	es
LEAF_NODE	2486:12	2486:12	13	;
LEAF_NODE	2487:3	2487:3	11	}
LEAF_NODE	2488:2	2488:2	8	}
SELECTION	2488:4	2488:9	6	
KEYWORD	2488:4	2488:4	7	else
LEAF_NODE	2488:4	2488:4	8	else
STATEMENTS	2488:9	2500:2	7	
LEAF_NODE	2488:9	2488:9	8	{
STATEMENTS	2489:3	2490:3	8	
EXPR_STATEMENT	2489:3	2489:9	9	cc = 0 ;
EXPR	2489:3	2489:3	10	cc = 0
ASSIGN	2489:3	2489:8	11	cc = 0
LVAL	2489:3	2489:3	12	cc
FIELD	2489:3	2489:3	13	cc
LEAF_NODE	2489:3	2489:3	14	cc
ASSIGN_OP	2489:6	2489:6	12	=
LEAF_NODE	2489:6	2489:6	13	=
RVAL	2489:8	2489:8	12	0
FIELD	2489:8	2489:8	13	0
LEAF_NODE	2489:8	2489:8	14	0
LEAF_NODE	2489:9	2489:9	10	;
ITERATION	2490:3	2490:62	9	
KEYWORD	2490:3	2490:3	10	for
LEAF_NODE	2490:3	2490:3	11	for
LEAF_NODE	2490:7	2490:7	10	(
FOR_INIT	2490:8	2490:8	10	;
LEAF_NODE	2490:8	2490:8	11	;
CONDITION	2490:10	2490:10	10	( cc + nc ) <= tf_bytesperrow
EXPR	2490:10	2490:23	11	( cc + nc ) <= tf_bytesperrow
LEAF_NODE	2490:10	2490:10	12	(
FIELD	2490:11	2490:11	12	cc
LEAF_NODE	2490:11	2490:11	13	cc
LEAF_NODE	2490:14	2490:14	12	+
FIELD	2490:16	2490:16	12	nc
LEAF_NODE	2490:16	2490:16	13	nc
LEAF_NODE	2490:18	2490:18	12	)
REL_OPERATOR	2490:20	2490:20	12	<=
LEAF_NODE	2490:20	2490:20	13	<=
FIELD	2490:23	2490:23	12	tf_bytesperrow
LEAF_NODE	2490:23	2490:23	13	tf_bytesperrow
LEAF_NODE	2490:37	2490:37	10	;
FOR_EXPR	2490:39	2490:39	10	cc += samplesperpixel
EXPR	2490:39	2490:39	11	cc += samplesperpixel
ASSIGN	2490:39	2490:45	12	cc += samplesperpixel
LVAL	2490:39	2490:39	13	cc
FIELD	2490:39	2490:39	14	cc
LEAF_NODE	2490:39	2490:39	15	cc
ASSIGN_OP	2490:42	2490:42	13	+=
LEAF_NODE	2490:42	2490:42	14	+=
RVAL	2490:45	2490:45	13	samplesperpixel
FIELD	2490:45	2490:45	14	samplesperpixel
LEAF_NODE	2490:45	2490:45	15	samplesperpixel
LEAF_NODE	2490:60	2490:60	10	)
STATEMENTS	2490:62	2499:3	10	
LEAF_NODE	2490:62	2490:62	11	{
STATEMENTS	2491:4	2498:4	11	
EXPR_STATEMENT	2491:4	2491:29	12	DOBREAK ( breaklen , nc , fd ) ;
EXPR	2491:4	2491:4	13	DOBREAK ( breaklen , nc , fd )
FUNCTION_CALL	2491:4	2491:28	14	DOBREAK ( breaklen , nc , fd )
CALLEE	2491:4	2491:4	15	DOBREAK
LEAF_NODE	2491:4	2491:4	16	DOBREAK
LEAF_NODE	2491:11	2491:11	15	(
ARGUMENT	2491:12	2491:12	15	breaklen
FIELD	2491:12	2491:12	16	breaklen
LEAF_NODE	2491:12	2491:12	17	breaklen
LEAF_NODE	2491:20	2491:20	15	,
ARGUMENT	2491:22	2491:22	15	nc
FIELD	2491:22	2491:22	16	nc
LEAF_NODE	2491:22	2491:22	17	nc
LEAF_NODE	2491:24	2491:24	15	,
ARGUMENT	2491:26	2491:26	15	fd
FIELD	2491:26	2491:26	16	fd
LEAF_NODE	2491:26	2491:26	17	fd
LEAF_NODE	2491:28	2491:28	15	)
LEAF_NODE	2491:29	2491:29	13	;
SELECTION	2492:4	2492:16	12	
KEYWORD	2492:4	2492:4	13	switch
LEAF_NODE	2492:4	2492:4	14	switch
LEAF_NODE	2492:11	2492:11	13	(
CONDITION	2492:12	2492:12	13	nc
EXPR	2492:12	2492:12	14	nc
FIELD	2492:12	2492:12	15	nc
LEAF_NODE	2492:12	2492:12	16	nc
LEAF_NODE	2492:14	2492:14	13	)
STATEMENTS	2492:16	2497:4	13	
LEAF_NODE	2492:16	2492:16	14	{
STATEMENTS	2493:4	2496:23	14	
LABEL	2493:4	2493:10	15	case 4 :
LEAF_NODE	2493:4	2493:4	16	case
LEAF_NODE	2493:9	2493:9	16	4
LEAF_NODE	2493:10	2493:10	16	:
EXPR_STATEMENT	2493:12	2493:21	15	c = * cp ++ ;
EXPR	2493:12	2493:12	16	c = * cp ++
ASSIGN	2493:12	2493:16	17	c = * cp ++
LVAL	2493:12	2493:12	18	c
FIELD	2493:12	2493:12	19	c
LEAF_NODE	2493:12	2493:12	20	c
ASSIGN_OP	2493:14	2493:14	18	=
LEAF_NODE	2493:14	2493:14	19	=
RVAL	2493:16	2493:16	18	* cp ++
UNARY_EXPR	2493:16	2493:17	19	* cp ++
UNARY_OPERATOR	2493:16	2493:16	20	*
LEAF_NODE	2493:16	2493:16	21	*
FIELD	2493:17	2493:19	20	cp ++
LEAF_NODE	2493:17	2493:17	21	cp
LEAF_NODE	2493:19	2493:19	21	++
LEAF_NODE	2493:21	2493:21	16	;
EXPR_STATEMENT	2493:23	2493:35	15	PUTHEX ( c , fd ) ;
EXPR	2493:23	2493:23	16	PUTHEX ( c , fd )
FUNCTION_CALL	2493:23	2493:34	17	PUTHEX ( c , fd )
CALLEE	2493:23	2493:23	18	PUTHEX
LEAF_NODE	2493:23	2493:23	19	PUTHEX
LEAF_NODE	2493:29	2493:29	18	(
ARGUMENT	2493:30	2493:30	18	c
FIELD	2493:30	2493:30	19	c
LEAF_NODE	2493:30	2493:30	20	c
LEAF_NODE	2493:31	2493:31	18	,
ARGUMENT	2493:32	2493:32	18	fd
FIELD	2493:32	2493:32	19	fd
LEAF_NODE	2493:32	2493:32	20	fd
LEAF_NODE	2493:34	2493:34	18	)
LEAF_NODE	2493:35	2493:35	16	;
LABEL	2494:4	2494:10	15	case 3 :
LEAF_NODE	2494:4	2494:4	16	case
LEAF_NODE	2494:9	2494:9	16	3
LEAF_NODE	2494:10	2494:10	16	:
EXPR_STATEMENT	2494:12	2494:21	15	c = * cp ++ ;
EXPR	2494:12	2494:12	16	c = * cp ++
ASSIGN	2494:12	2494:16	17	c = * cp ++
LVAL	2494:12	2494:12	18	c
FIELD	2494:12	2494:12	19	c
LEAF_NODE	2494:12	2494:12	20	c
ASSIGN_OP	2494:14	2494:14	18	=
LEAF_NODE	2494:14	2494:14	19	=
RVAL	2494:16	2494:16	18	* cp ++
UNARY_EXPR	2494:16	2494:17	19	* cp ++
UNARY_OPERATOR	2494:16	2494:16	20	*
LEAF_NODE	2494:16	2494:16	21	*
FIELD	2494:17	2494:19	20	cp ++
LEAF_NODE	2494:17	2494:17	21	cp
LEAF_NODE	2494:19	2494:19	21	++
LEAF_NODE	2494:21	2494:21	16	;
EXPR_STATEMENT	2494:23	2494:35	15	PUTHEX ( c , fd ) ;
EXPR	2494:23	2494:23	16	PUTHEX ( c , fd )
FUNCTION_CALL	2494:23	2494:34	17	PUTHEX ( c , fd )
CALLEE	2494:23	2494:23	18	PUTHEX
LEAF_NODE	2494:23	2494:23	19	PUTHEX
LEAF_NODE	2494:29	2494:29	18	(
ARGUMENT	2494:30	2494:30	18	c
FIELD	2494:30	2494:30	19	c
LEAF_NODE	2494:30	2494:30	20	c
LEAF_NODE	2494:31	2494:31	18	,
ARGUMENT	2494:32	2494:32	18	fd
FIELD	2494:32	2494:32	19	fd
LEAF_NODE	2494:32	2494:32	20	fd
LEAF_NODE	2494:34	2494:34	18	)
LEAF_NODE	2494:35	2494:35	16	;
LABEL	2495:4	2495:10	15	case 2 :
LEAF_NODE	2495:4	2495:4	16	case
LEAF_NODE	2495:9	2495:9	16	2
LEAF_NODE	2495:10	2495:10	16	:
EXPR_STATEMENT	2495:12	2495:21	15	c = * cp ++ ;
EXPR	2495:12	2495:12	16	c = * cp ++
ASSIGN	2495:12	2495:16	17	c = * cp ++
LVAL	2495:12	2495:12	18	c
FIELD	2495:12	2495:12	19	c
LEAF_NODE	2495:12	2495:12	20	c
ASSIGN_OP	2495:14	2495:14	18	=
LEAF_NODE	2495:14	2495:14	19	=
RVAL	2495:16	2495:16	18	* cp ++
UNARY_EXPR	2495:16	2495:17	19	* cp ++
UNARY_OPERATOR	2495:16	2495:16	20	*
LEAF_NODE	2495:16	2495:16	21	*
FIELD	2495:17	2495:19	20	cp ++
LEAF_NODE	2495:17	2495:17	21	cp
LEAF_NODE	2495:19	2495:19	21	++
LEAF_NODE	2495:21	2495:21	16	;
EXPR_STATEMENT	2495:23	2495:35	15	PUTHEX ( c , fd ) ;
EXPR	2495:23	2495:23	16	PUTHEX ( c , fd )
FUNCTION_CALL	2495:23	2495:34	17	PUTHEX ( c , fd )
CALLEE	2495:23	2495:23	18	PUTHEX
LEAF_NODE	2495:23	2495:23	19	PUTHEX
LEAF_NODE	2495:29	2495:29	18	(
ARGUMENT	2495:30	2495:30	18	c
FIELD	2495:30	2495:30	19	c
LEAF_NODE	2495:30	2495:30	20	c
LEAF_NODE	2495:31	2495:31	18	,
ARGUMENT	2495:32	2495:32	18	fd
FIELD	2495:32	2495:32	19	fd
LEAF_NODE	2495:32	2495:32	20	fd
LEAF_NODE	2495:34	2495:34	18	)
LEAF_NODE	2495:35	2495:35	16	;
LABEL	2496:4	2496:10	15	case 1 :
LEAF_NODE	2496:4	2496:4	16	case
LEAF_NODE	2496:9	2496:9	16	1
LEAF_NODE	2496:10	2496:10	16	:
EXPR_STATEMENT	2496:12	2496:21	15	c = * cp ++ ;
EXPR	2496:12	2496:12	16	c = * cp ++
ASSIGN	2496:12	2496:16	17	c = * cp ++
LVAL	2496:12	2496:12	18	c
FIELD	2496:12	2496:12	19	c
LEAF_NODE	2496:12	2496:12	20	c
ASSIGN_OP	2496:14	2496:14	18	=
LEAF_NODE	2496:14	2496:14	19	=
RVAL	2496:16	2496:16	18	* cp ++
UNARY_EXPR	2496:16	2496:17	19	* cp ++
UNARY_OPERATOR	2496:16	2496:16	20	*
LEAF_NODE	2496:16	2496:16	21	*
FIELD	2496:17	2496:19	20	cp ++
LEAF_NODE	2496:17	2496:17	21	cp
LEAF_NODE	2496:19	2496:19	21	++
LEAF_NODE	2496:21	2496:21	16	;
EXPR_STATEMENT	2496:23	2496:35	15	PUTHEX ( c , fd ) ;
EXPR	2496:23	2496:23	16	PUTHEX ( c , fd )
FUNCTION_CALL	2496:23	2496:34	17	PUTHEX ( c , fd )
CALLEE	2496:23	2496:23	18	PUTHEX
LEAF_NODE	2496:23	2496:23	19	PUTHEX
LEAF_NODE	2496:29	2496:29	18	(
ARGUMENT	2496:30	2496:30	18	c
FIELD	2496:30	2496:30	19	c
LEAF_NODE	2496:30	2496:30	20	c
LEAF_NODE	2496:31	2496:31	18	,
ARGUMENT	2496:32	2496:32	18	fd
FIELD	2496:32	2496:32	19	fd
LEAF_NODE	2496:32	2496:32	20	fd
LEAF_NODE	2496:34	2496:34	18	)
LEAF_NODE	2496:35	2496:35	16	;
LEAF_NODE	2497:4	2497:4	14	}
EXPR_STATEMENT	2498:4	2498:12	12	cp += es ;
EXPR	2498:4	2498:4	13	cp += es
ASSIGN	2498:4	2498:10	14	cp += es
LVAL	2498:4	2498:4	15	cp
FIELD	2498:4	2498:4	16	cp
LEAF_NODE	2498:4	2498:4	17	cp
ASSIGN_OP	2498:7	2498:7	15	+=
LEAF_NODE	2498:7	2498:7	16	+=
RVAL	2498:10	2498:10	15	es
FIELD	2498:10	2498:10	16	es
LEAF_NODE	2498:10	2498:10	17	es
LEAF_NODE	2498:12	2498:12	13	;
LEAF_NODE	2499:3	2499:3	11	}
LEAF_NODE	2500:2	2500:2	8	}
LEAF_NODE	2501:1	2501:1	5	}
EXPR_STATEMENT	2502:1	2502:27	3	_TIFFfree ( ( char * ) tf_buf ) ;
EXPR	2502:1	2502:1	4	_TIFFfree ( ( char * ) tf_buf )
FUNCTION_CALL	2502:1	2502:26	5	_TIFFfree ( ( char * ) tf_buf )
CALLEE	2502:1	2502:1	6	_TIFFfree
LEAF_NODE	2502:1	2502:1	7	_TIFFfree
LEAF_NODE	2502:10	2502:10	6	(
ARGUMENT	2502:11	2502:20	6	( char * ) tf_buf
LEAF_NODE	2502:11	2502:11	7	(
TYPE_NAME	2502:12	2502:12	7	char
LEAF_NODE	2502:12	2502:12	8	char
LEAF_NODE	2502:17	2502:17	7	*
LEAF_NODE	2502:18	2502:18	7	)
FIELD	2502:20	2502:20	7	tf_buf
LEAF_NODE	2502:20	2502:20	8	tf_buf
LEAF_NODE	2502:26	2502:26	6	)
LEAF_NODE	2502:27	2502:27	4	;
LEAF_NODE	2503:0	2503:0	2	}
FUNCTION_DEF	2505:0	2534:0	1	
RETURN_TYPE	2505:0	2505:0	2	void
TYPE_NAME	2505:0	2505:0	3	void
LEAF_NODE	2505:0	2505:0	4	void
FUNCTION_NAME	2506:0	2506:0	2	PSDataColorSeparate
LEAF_NODE	2506:0	2506:0	3	PSDataColorSeparate
PARAMETER_LIST	2506:19	2506:67	2	( FILE * fd , TIFF * tif , uint32 w , uint32 h , int nc )
LEAF_NODE	2506:19	2506:19	3	(
PARAMETER_DECL	2506:20	2506:26	3	FILE * fd
TYPE	2506:20	2506:24	4	FILE *
TYPE_NAME	2506:20	2506:20	5	FILE
LEAF_NODE	2506:20	2506:20	6	FILE
POINTER	2506:24	2506:24	5	*
LEAF_NODE	2506:24	2506:24	6	*
NAME	2506:26	2506:26	4	fd
LEAF_NODE	2506:26	2506:26	5	fd
LEAF_NODE	2506:28	2506:28	3	,
PARAMETER_DECL	2506:30	2506:36	3	TIFF * tif
TYPE	2506:30	2506:34	4	TIFF *
TYPE_NAME	2506:30	2506:30	5	TIFF
LEAF_NODE	2506:30	2506:30	6	TIFF
POINTER	2506:34	2506:34	5	*
LEAF_NODE	2506:34	2506:34	6	*
NAME	2506:36	2506:36	4	tif
LEAF_NODE	2506:36	2506:36	5	tif
LEAF_NODE	2506:39	2506:39	3	,
PARAMETER_DECL	2506:41	2506:48	3	uint32 w
TYPE	2506:41	2506:41	4	uint32
TYPE_NAME	2506:41	2506:41	5	uint32
LEAF_NODE	2506:41	2506:41	6	uint32
NAME	2506:48	2506:48	4	w
LEAF_NODE	2506:48	2506:48	5	w
LEAF_NODE	2506:49	2506:49	3	,
PARAMETER_DECL	2506:51	2506:58	3	uint32 h
TYPE	2506:51	2506:51	4	uint32
TYPE_NAME	2506:51	2506:51	5	uint32
LEAF_NODE	2506:51	2506:51	6	uint32
NAME	2506:58	2506:58	4	h
LEAF_NODE	2506:58	2506:58	5	h
LEAF_NODE	2506:59	2506:59	3	,
PARAMETER_DECL	2506:61	2506:65	3	int nc
TYPE	2506:61	2506:61	4	int
TYPE_NAME	2506:61	2506:61	5	int
LEAF_NODE	2506:61	2506:61	6	int
NAME	2506:65	2506:65	4	nc
LEAF_NODE	2506:65	2506:65	5	nc
LEAF_NODE	2506:67	2506:67	3	)
LEAF_NODE	2507:0	2507:0	2	{
STATEMENTS	2508:1	2533:1	2	
SIMPLE_DECL	2508:1	2508:11	3	uint32 row ;
VAR_DECL	2508:1	2508:8	4	uint32 row
TYPE	2508:1	2508:1	5	uint32
TYPE_NAME	2508:1	2508:1	6	uint32
LEAF_NODE	2508:1	2508:1	7	uint32
NAME	2508:8	2508:8	5	row
LEAF_NODE	2508:8	2508:8	6	row
LEAF_NODE	2508:11	2508:11	4	;
SIMPLE_DECL	2509:1	2509:23	3	int breaklen ; breaklen = MAXLINE ;
VAR_DECL	2509:1	2509:5	4	int breaklen ; breaklen = MAXLINE
TYPE	2509:1	2509:1	5	int
TYPE_NAME	2509:1	2509:1	6	int
LEAF_NODE	2509:1	2509:1	7	int
NAME	2509:5	2509:5	5	breaklen
LEAF_NODE	2509:5	2509:5	6	breaklen
LEAF_NODE	0:0	0:0	5	;
INIT	2509:5	2509:5	5	breaklen = MAXLINE
ASSIGN	2509:5	2509:16	6	breaklen = MAXLINE
LVAL	2509:5	2509:5	7	breaklen
NAME	2509:5	2509:5	8	breaklen
LEAF_NODE	2509:5	2509:5	9	breaklen
ASSIGN_OP	2509:14	2509:14	7	=
LEAF_NODE	2509:14	2509:14	8	=
RVAL	2509:16	2509:16	7	MAXLINE
FIELD	2509:16	2509:16	8	MAXLINE
LEAF_NODE	2509:16	2509:16	9	MAXLINE
LEAF_NODE	2509:23	2509:23	4	;
SIMPLE_DECL	2510:1	2510:11	3	tsize_t cc ;
VAR_DECL	2510:1	2510:9	4	tsize_t cc
TYPE	2510:1	2510:1	5	tsize_t
TYPE_NAME	2510:1	2510:1	6	tsize_t
LEAF_NODE	2510:1	2510:1	7	tsize_t
NAME	2510:9	2510:9	5	cc
LEAF_NODE	2510:9	2510:9	6	cc
LEAF_NODE	2510:11	2510:11	4	;
SIMPLE_DECL	2511:1	2511:18	3	tsample_t s , tsample_t maxs ;
INIT_DECL_LIST	2511:1	2511:1	4	tsample_t s , tsample_t maxs
VAR_DECL	2511:1	2511:11	5	tsample_t s
TYPE	2511:1	2511:1	6	tsample_t
TYPE_NAME	2511:1	2511:1	7	tsample_t
LEAF_NODE	2511:1	2511:1	8	tsample_t
NAME	2511:11	2511:11	6	s
LEAF_NODE	2511:11	2511:11	7	s
LEAF_NODE	2511:12	2511:12	5	,
VAR_DECL	2511:1	2511:14	5	tsample_t maxs
TYPE	2511:1	2511:1	6	tsample_t
TYPE_NAME	2511:1	2511:1	7	tsample_t
LEAF_NODE	2511:1	2511:1	8	tsample_t
NAME	2511:14	2511:14	6	maxs
LEAF_NODE	2511:14	2511:14	7	maxs
LEAF_NODE	2511:18	2511:18	4	;
SIMPLE_DECL	2512:1	2512:22	3	unsigned char * tf_buf ;
VAR_DECL	2512:1	2512:16	4	unsigned char * tf_buf
TYPE	2512:1	2512:15	5	unsigned char *
TYPE_NAME	2512:1	2512:10	6	unsigned char
LEAF_NODE	2512:1	2512:1	7	unsigned
LEAF_NODE	2512:10	2512:10	7	char
POINTER	2512:15	2512:15	6	*
LEAF_NODE	2512:15	2512:15	7	*
NAME	2512:16	2512:16	5	tf_buf
LEAF_NODE	2512:16	2512:16	6	tf_buf
LEAF_NODE	2512:22	2512:22	4	;
SIMPLE_DECL	2513:1	2513:21	3	unsigned char * cp , unsigned char c ;
INIT_DECL_LIST	2513:1	2513:1	4	unsigned char * cp , unsigned char c
VAR_DECL	2513:1	2513:16	5	unsigned char * cp
TYPE	2513:1	2513:15	6	unsigned char *
TYPE_NAME	2513:1	2513:10	7	unsigned char
LEAF_NODE	2513:1	2513:1	8	unsigned
LEAF_NODE	2513:10	2513:10	8	char
POINTER	2513:15	2513:15	7	*
LEAF_NODE	2513:15	2513:15	8	*
NAME	2513:16	2513:16	6	cp
LEAF_NODE	2513:16	2513:16	7	cp
LEAF_NODE	2513:18	2513:18	5	,
VAR_DECL	2513:1	2513:20	5	unsigned char c
TYPE	2513:1	2513:1	6	unsigned char
TYPE_NAME	2513:1	2513:10	7	unsigned char
LEAF_NODE	2513:1	2513:1	8	unsigned
LEAF_NODE	2513:10	2513:10	8	char
NAME	2513:20	2513:20	6	c
LEAF_NODE	2513:20	2513:20	7	c
LEAF_NODE	2513:21	2513:21	4	;
EXPR_STATEMENT	2515:1	2515:9	3	( void ) w ;
EXPR	2515:1	2515:8	4	( void ) w
LEAF_NODE	2515:1	2515:1	5	(
TYPE_NAME	2515:2	2515:2	5	void
LEAF_NODE	2515:2	2515:2	6	void
LEAF_NODE	2515:6	2515:6	5	)
FIELD	2515:8	2515:8	5	w
LEAF_NODE	2515:8	2515:8	6	w
LEAF_NODE	2515:9	2515:9	4	;
EXPR_STATEMENT	2516:1	2516:55	3	tf_buf = ( unsigned char * ) _TIFFmalloc ( tf_bytesperrow ) ;
EXPR	2516:1	2516:1	4	tf_buf = ( unsigned char * ) _TIFFmalloc ( tf_bytesperrow )
ASSIGN	2516:1	2516:10	5	tf_buf = ( unsigned char * ) _TIFFmalloc ( tf_bytesperrow )
LVAL	2516:1	2516:1	6	tf_buf
FIELD	2516:1	2516:1	7	tf_buf
LEAF_NODE	2516:1	2516:1	8	tf_buf
ASSIGN_OP	2516:8	2516:8	6	=
LEAF_NODE	2516:8	2516:8	7	=
RVAL	2516:10	2516:28	6	( unsigned char * ) _TIFFmalloc ( tf_bytesperrow )
LEAF_NODE	2516:10	2516:10	7	(
TYPE_NAME	2516:11	2516:20	7	unsigned char
LEAF_NODE	2516:11	2516:11	8	unsigned
LEAF_NODE	2516:20	2516:20	8	char
LEAF_NODE	2516:25	2516:25	7	*
LEAF_NODE	2516:26	2516:26	7	)
FUNCTION_CALL	2516:28	2516:54	7	_TIFFmalloc ( tf_bytesperrow )
CALLEE	2516:28	2516:28	8	_TIFFmalloc
LEAF_NODE	2516:28	2516:28	9	_TIFFmalloc
LEAF_NODE	2516:39	2516:39	8	(
ARGUMENT	2516:40	2516:40	8	tf_bytesperrow
FIELD	2516:40	2516:40	9	tf_bytesperrow
LEAF_NODE	2516:40	2516:40	10	tf_bytesperrow
LEAF_NODE	2516:54	2516:54	8	)
LEAF_NODE	2516:55	2516:55	4	;
SELECTION	2517:1	2517:21	3	
KEYWORD	2517:1	2517:1	4	if
LEAF_NODE	2517:1	2517:1	5	if
LEAF_NODE	2517:4	2517:4	4	(
CONDITION	2517:5	2517:5	4	tf_buf == NULL
EXPR	2517:5	2517:15	5	tf_buf == NULL
FIELD	2517:5	2517:5	6	tf_buf
LEAF_NODE	2517:5	2517:5	7	tf_buf
EQ_OPERATOR	2517:12	2517:12	6	==
LEAF_NODE	2517:12	2517:12	7	==
FIELD	2517:15	2517:15	6	NULL
LEAF_NODE	2517:15	2517:15	7	NULL
LEAF_NODE	2517:19	2517:19	4	)
STATEMENTS	2517:21	2520:1	4	
LEAF_NODE	2517:21	2517:21	5	{
STATEMENTS	2518:2	2519:2	5	
EXPR_STATEMENT	2518:2	2518:53	6	TIFFError ( filename , "No space for scanline buffer" ) ;
EXPR	2518:2	2518:2	7	TIFFError ( filename , "No space for scanline buffer" )
FUNCTION_CALL	2518:2	2518:52	8	TIFFError ( filename , "No space for scanline buffer" )
CALLEE	2518:2	2518:2	9	TIFFError
LEAF_NODE	2518:2	2518:2	10	TIFFError
LEAF_NODE	2518:11	2518:11	9	(
ARGUMENT	2518:12	2518:12	9	filename
FIELD	2518:12	2518:12	10	filename
LEAF_NODE	2518:12	2518:12	11	filename
LEAF_NODE	2518:20	2518:20	9	,
ARGUMENT	2518:22	2518:22	9	"No space for scanline buffer"
FIELD	2518:22	2518:22	10	"No space for scanline buffer"
LEAF_NODE	2518:22	2518:22	11	"No space for scanline buffer"
LEAF_NODE	2518:52	2518:52	9	)
LEAF_NODE	2518:53	2518:53	7	;
JUMP_STATEMENT	2519:2	2519:8	6	return DESTINATION ;
KEYWORD	2519:2	2519:2	7	return
LEAF_NODE	2519:2	2519:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2519:8	2519:8	7	;
LEAF_NODE	2520:1	2520:1	5	}
EXPR_STATEMENT	2521:1	2521:53	3	maxs = ( samplesperpixel > nc ? nc : samplesperpixel ) ;
EXPR	2521:1	2521:1	4	maxs = ( samplesperpixel > nc ? nc : samplesperpixel )
ASSIGN	2521:1	2521:8	5	maxs = ( samplesperpixel > nc ? nc : samplesperpixel )
LVAL	2521:1	2521:1	6	maxs
FIELD	2521:1	2521:1	7	maxs
LEAF_NODE	2521:1	2521:1	8	maxs
ASSIGN_OP	2521:6	2521:6	6	=
LEAF_NODE	2521:6	2521:6	7	=
RVAL	2521:8	2521:52	6	( samplesperpixel > nc ? nc : samplesperpixel )
LEAF_NODE	2521:8	2521:8	7	(
COND_EXPR	2521:9	2521:37	7	samplesperpixel > nc ? nc : samplesperpixel
CONDITION	2521:9	2521:27	8	samplesperpixel > nc
FIELD	2521:9	2521:9	9	samplesperpixel
LEAF_NODE	2521:9	2521:9	10	samplesperpixel
REL_OPERATOR	2521:25	2521:25	9	>
LEAF_NODE	2521:25	2521:25	10	>
FIELD	2521:27	2521:27	9	nc
LEAF_NODE	2521:27	2521:27	10	nc
LEAF_NODE	2521:30	2521:30	8	?
EXPR	2521:32	2521:32	8	nc
FIELD	2521:32	2521:32	9	nc
LEAF_NODE	2521:32	2521:32	10	nc
LEAF_NODE	2521:35	2521:35	8	:
FIELD	2521:37	2521:37	8	samplesperpixel
LEAF_NODE	2521:37	2521:37	9	samplesperpixel
LEAF_NODE	2521:52	2521:52	7	)
LEAF_NODE	2521:53	2521:53	4	;
ITERATION	2522:1	2522:31	3	
KEYWORD	2522:1	2522:1	4	for
LEAF_NODE	2522:1	2522:1	5	for
LEAF_NODE	2522:5	2522:5	4	(
FOR_INIT	2522:6	2522:13	4	row = 0 ;
EXPR	2522:6	2522:6	5	row = 0
ASSIGN	2522:6	2522:12	6	row = 0
LVAL	2522:6	2522:6	7	row
FIELD	2522:6	2522:6	8	row
LEAF_NODE	2522:6	2522:6	9	row
ASSIGN_OP	2522:10	2522:10	7	=
LEAF_NODE	2522:10	2522:10	8	=
RVAL	2522:12	2522:12	7	0
FIELD	2522:12	2522:12	8	0
LEAF_NODE	2522:12	2522:12	9	0
LEAF_NODE	2522:13	2522:13	5	;
CONDITION	2522:15	2522:15	4	row < h
EXPR	2522:15	2522:21	5	row < h
FIELD	2522:15	2522:15	6	row
LEAF_NODE	2522:15	2522:15	7	row
REL_OPERATOR	2522:19	2522:19	6	<
LEAF_NODE	2522:19	2522:19	7	<
FIELD	2522:21	2522:21	6	h
LEAF_NODE	2522:21	2522:21	7	h
LEAF_NODE	2522:22	2522:22	4	;
FOR_EXPR	2522:24	2522:24	4	row ++
EXPR	2522:24	2522:24	5	row ++
FIELD	2522:24	2522:27	6	row ++
LEAF_NODE	2522:24	2522:24	7	row
LEAF_NODE	2522:27	2522:27	7	++
LEAF_NODE	2522:29	2522:29	4	)
STATEMENTS	2522:31	2532:1	4	
LEAF_NODE	2522:31	2522:31	5	{
STATEMENTS	2523:2	2523:2	5	
ITERATION	2523:2	2523:29	6	
KEYWORD	2523:2	2523:2	7	for
LEAF_NODE	2523:2	2523:2	8	for
LEAF_NODE	2523:6	2523:6	7	(
FOR_INIT	2523:7	2523:12	7	s = 0 ;
EXPR	2523:7	2523:7	8	s = 0
ASSIGN	2523:7	2523:11	9	s = 0
LVAL	2523:7	2523:7	10	s
FIELD	2523:7	2523:7	11	s
LEAF_NODE	2523:7	2523:7	12	s
ASSIGN_OP	2523:9	2523:9	10	=
LEAF_NODE	2523:9	2523:9	11	=
RVAL	2523:11	2523:11	10	0
FIELD	2523:11	2523:11	11	0
LEAF_NODE	2523:11	2523:11	12	0
LEAF_NODE	2523:12	2523:12	8	;
CONDITION	2523:14	2523:14	7	s < maxs
EXPR	2523:14	2523:18	8	s < maxs
FIELD	2523:14	2523:14	9	s
LEAF_NODE	2523:14	2523:14	10	s
REL_OPERATOR	2523:16	2523:16	9	<
LEAF_NODE	2523:16	2523:16	10	<
FIELD	2523:18	2523:18	9	maxs
LEAF_NODE	2523:18	2523:18	10	maxs
LEAF_NODE	2523:22	2523:22	7	;
FOR_EXPR	2523:24	2523:24	7	s ++
EXPR	2523:24	2523:24	8	s ++
FIELD	2523:24	2523:25	9	s ++
LEAF_NODE	2523:24	2523:24	10	s
LEAF_NODE	2523:25	2523:25	10	++
LEAF_NODE	2523:27	2523:27	7	)
STATEMENTS	2523:29	2531:2	7	
LEAF_NODE	2523:29	2523:29	8	{
STATEMENTS	2524:3	2526:3	8	
SELECTION	2524:3	2525:4	9	
KEYWORD	2524:3	2524:3	10	if
LEAF_NODE	2524:3	2524:3	11	if
LEAF_NODE	2524:6	2524:6	10	(
CONDITION	2524:7	2524:7	10	TIFFReadScanline ( tif , tf_buf , row , s ) < 0
EXPR	2524:7	2524:47	11	TIFFReadScanline ( tif , tf_buf , row , s ) < 0
FUNCTION_CALL	2524:7	2524:43	12	TIFFReadScanline ( tif , tf_buf , row , s )
CALLEE	2524:7	2524:7	13	TIFFReadScanline
LEAF_NODE	2524:7	2524:7	14	TIFFReadScanline
LEAF_NODE	2524:23	2524:23	13	(
ARGUMENT	2524:24	2524:24	13	tif
FIELD	2524:24	2524:24	14	tif
LEAF_NODE	2524:24	2524:24	15	tif
LEAF_NODE	2524:27	2524:27	13	,
ARGUMENT	2524:29	2524:29	13	tf_buf
FIELD	2524:29	2524:29	14	tf_buf
LEAF_NODE	2524:29	2524:29	15	tf_buf
LEAF_NODE	2524:35	2524:35	13	,
ARGUMENT	2524:37	2524:37	13	row
FIELD	2524:37	2524:37	14	row
LEAF_NODE	2524:37	2524:37	15	row
LEAF_NODE	2524:40	2524:40	13	,
ARGUMENT	2524:42	2524:42	13	s
FIELD	2524:42	2524:42	14	s
LEAF_NODE	2524:42	2524:42	15	s
LEAF_NODE	2524:43	2524:43	13	)
REL_OPERATOR	2524:45	2524:45	12	<
LEAF_NODE	2524:45	2524:45	13	<
FIELD	2524:47	2524:47	12	0
LEAF_NODE	2524:47	2524:47	13	0
LEAF_NODE	2524:48	2524:48	10	)
STATEMENTS	2525:4	2525:4	10	
JUMP_STATEMENT	2525:4	2525:9	11	break DESTINATION ;
KEYWORD	2525:4	2525:4	12	break
LEAF_NODE	2525:4	2525:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	2525:9	2525:9	12	;
ITERATION	2526:3	2526:56	9	
KEYWORD	2526:3	2526:3	10	for
LEAF_NODE	2526:3	2526:3	11	for
LEAF_NODE	2526:7	2526:7	10	(
FOR_INIT	2526:8	2526:27	10	cp = tf_buf , cc = 0 ;
EXPR	2526:8	2526:21	11	cp = tf_buf , cc = 0
ASSIGN	2526:8	2526:13	12	cp = tf_buf
LVAL	2526:8	2526:8	13	cp
FIELD	2526:8	2526:8	14	cp
LEAF_NODE	2526:8	2526:8	15	cp
ASSIGN_OP	2526:11	2526:11	13	=
LEAF_NODE	2526:11	2526:11	14	=
RVAL	2526:13	2526:13	13	tf_buf
FIELD	2526:13	2526:13	14	tf_buf
LEAF_NODE	2526:13	2526:13	15	tf_buf
LEAF_NODE	2526:19	2526:19	12	,
ASSIGN	2526:21	2526:26	12	cc = 0
LVAL	2526:21	2526:21	13	cc
FIELD	2526:21	2526:21	14	cc
LEAF_NODE	2526:21	2526:21	15	cc
ASSIGN_OP	2526:24	2526:24	13	=
LEAF_NODE	2526:24	2526:24	14	=
RVAL	2526:26	2526:26	13	0
FIELD	2526:26	2526:26	14	0
LEAF_NODE	2526:26	2526:26	15	0
LEAF_NODE	2526:27	2526:27	11	;
CONDITION	2526:29	2526:29	10	cc < tf_bytesperrow
EXPR	2526:29	2526:34	11	cc < tf_bytesperrow
FIELD	2526:29	2526:29	12	cc
LEAF_NODE	2526:29	2526:29	13	cc
REL_OPERATOR	2526:32	2526:32	12	<
LEAF_NODE	2526:32	2526:32	13	<
FIELD	2526:34	2526:34	12	tf_bytesperrow
LEAF_NODE	2526:34	2526:34	13	tf_bytesperrow
LEAF_NODE	2526:48	2526:48	10	;
FOR_EXPR	2526:50	2526:50	10	cc ++
EXPR	2526:50	2526:50	11	cc ++
FIELD	2526:50	2526:52	12	cc ++
LEAF_NODE	2526:50	2526:50	13	cc
LEAF_NODE	2526:52	2526:52	13	++
LEAF_NODE	2526:54	2526:54	10	)
STATEMENTS	2526:56	2530:3	10	
LEAF_NODE	2526:56	2526:56	11	{
STATEMENTS	2527:4	2529:4	11	
EXPR_STATEMENT	2527:4	2527:28	12	DOBREAK ( breaklen , 1 , fd ) ;
EXPR	2527:4	2527:4	13	DOBREAK ( breaklen , 1 , fd )
FUNCTION_CALL	2527:4	2527:27	14	DOBREAK ( breaklen , 1 , fd )
CALLEE	2527:4	2527:4	15	DOBREAK
LEAF_NODE	2527:4	2527:4	16	DOBREAK
LEAF_NODE	2527:11	2527:11	15	(
ARGUMENT	2527:12	2527:12	15	breaklen
FIELD	2527:12	2527:12	16	breaklen
LEAF_NODE	2527:12	2527:12	17	breaklen
LEAF_NODE	2527:20	2527:20	15	,
ARGUMENT	2527:22	2527:22	15	1
FIELD	2527:22	2527:22	16	1
LEAF_NODE	2527:22	2527:22	17	1
LEAF_NODE	2527:23	2527:23	15	,
ARGUMENT	2527:25	2527:25	15	fd
FIELD	2527:25	2527:25	16	fd
LEAF_NODE	2527:25	2527:25	17	fd
LEAF_NODE	2527:27	2527:27	15	)
LEAF_NODE	2527:28	2527:28	13	;
EXPR_STATEMENT	2528:4	2528:13	12	c = * cp ++ ;
EXPR	2528:4	2528:4	13	c = * cp ++
ASSIGN	2528:4	2528:8	14	c = * cp ++
LVAL	2528:4	2528:4	15	c
FIELD	2528:4	2528:4	16	c
LEAF_NODE	2528:4	2528:4	17	c
ASSIGN_OP	2528:6	2528:6	15	=
LEAF_NODE	2528:6	2528:6	16	=
RVAL	2528:8	2528:8	15	* cp ++
UNARY_EXPR	2528:8	2528:9	16	* cp ++
UNARY_OPERATOR	2528:8	2528:8	17	*
LEAF_NODE	2528:8	2528:8	18	*
FIELD	2528:9	2528:11	17	cp ++
LEAF_NODE	2528:9	2528:9	18	cp
LEAF_NODE	2528:11	2528:11	18	++
LEAF_NODE	2528:13	2528:13	13	;
EXPR_STATEMENT	2529:4	2529:16	12	PUTHEX ( c , fd ) ;
EXPR	2529:4	2529:4	13	PUTHEX ( c , fd )
FUNCTION_CALL	2529:4	2529:15	14	PUTHEX ( c , fd )
CALLEE	2529:4	2529:4	15	PUTHEX
LEAF_NODE	2529:4	2529:4	16	PUTHEX
LEAF_NODE	2529:10	2529:10	15	(
ARGUMENT	2529:11	2529:11	15	c
FIELD	2529:11	2529:11	16	c
LEAF_NODE	2529:11	2529:11	17	c
LEAF_NODE	2529:12	2529:12	15	,
ARGUMENT	2529:13	2529:13	15	fd
FIELD	2529:13	2529:13	16	fd
LEAF_NODE	2529:13	2529:13	17	fd
LEAF_NODE	2529:15	2529:15	15	)
LEAF_NODE	2529:16	2529:16	13	;
LEAF_NODE	2530:3	2530:3	11	}
LEAF_NODE	2531:2	2531:2	8	}
LEAF_NODE	2532:1	2532:1	5	}
EXPR_STATEMENT	2533:1	2533:27	3	_TIFFfree ( ( char * ) tf_buf ) ;
EXPR	2533:1	2533:1	4	_TIFFfree ( ( char * ) tf_buf )
FUNCTION_CALL	2533:1	2533:26	5	_TIFFfree ( ( char * ) tf_buf )
CALLEE	2533:1	2533:1	6	_TIFFfree
LEAF_NODE	2533:1	2533:1	7	_TIFFfree
LEAF_NODE	2533:10	2533:10	6	(
ARGUMENT	2533:11	2533:20	6	( char * ) tf_buf
LEAF_NODE	2533:11	2533:11	7	(
TYPE_NAME	2533:12	2533:12	7	char
LEAF_NODE	2533:12	2533:12	8	char
LEAF_NODE	2533:17	2533:17	7	*
LEAF_NODE	2533:18	2533:18	7	)
FIELD	2533:20	2533:20	7	tf_buf
LEAF_NODE	2533:20	2533:20	8	tf_buf
LEAF_NODE	2533:26	2533:26	6	)
LEAF_NODE	2533:27	2533:27	4	;
LEAF_NODE	2534:0	2534:0	2	}
FUNCTION_DEF	2539:0	2610:0	1	
RETURN_TYPE	2539:0	2539:0	2	void
TYPE_NAME	2539:0	2539:0	3	void
LEAF_NODE	2539:0	2539:0	4	void
FUNCTION_NAME	2540:0	2540:0	2	PSDataPalette
LEAF_NODE	2540:0	2540:0	3	PSDataPalette
PARAMETER_LIST	2540:13	2540:53	2	( FILE * fd , TIFF * tif , uint32 w , uint32 h )
LEAF_NODE	2540:13	2540:13	3	(
PARAMETER_DECL	2540:14	2540:20	3	FILE * fd
TYPE	2540:14	2540:18	4	FILE *
TYPE_NAME	2540:14	2540:14	5	FILE
LEAF_NODE	2540:14	2540:14	6	FILE
POINTER	2540:18	2540:18	5	*
LEAF_NODE	2540:18	2540:18	6	*
NAME	2540:20	2540:20	4	fd
LEAF_NODE	2540:20	2540:20	5	fd
LEAF_NODE	2540:22	2540:22	3	,
PARAMETER_DECL	2540:24	2540:30	3	TIFF * tif
TYPE	2540:24	2540:28	4	TIFF *
TYPE_NAME	2540:24	2540:24	5	TIFF
LEAF_NODE	2540:24	2540:24	6	TIFF
POINTER	2540:28	2540:28	5	*
LEAF_NODE	2540:28	2540:28	6	*
NAME	2540:30	2540:30	4	tif
LEAF_NODE	2540:30	2540:30	5	tif
LEAF_NODE	2540:33	2540:33	3	,
PARAMETER_DECL	2540:35	2540:42	3	uint32 w
TYPE	2540:35	2540:35	4	uint32
TYPE_NAME	2540:35	2540:35	5	uint32
LEAF_NODE	2540:35	2540:35	6	uint32
NAME	2540:42	2540:42	4	w
LEAF_NODE	2540:42	2540:42	5	w
LEAF_NODE	2540:43	2540:43	3	,
PARAMETER_DECL	2540:45	2540:52	3	uint32 h
TYPE	2540:45	2540:45	4	uint32
TYPE_NAME	2540:45	2540:45	5	uint32
LEAF_NODE	2540:45	2540:45	6	uint32
NAME	2540:52	2540:52	4	h
LEAF_NODE	2540:52	2540:52	5	h
LEAF_NODE	2540:53	2540:53	3	)
LEAF_NODE	2541:0	2541:0	2	{
STATEMENTS	2542:1	2609:1	2	
SIMPLE_DECL	2542:1	2542:27	3	uint16 * rmap , uint16 * gmap , uint16 * bmap ;
INIT_DECL_LIST	2542:1	2542:1	4	uint16 * rmap , uint16 * gmap , uint16 * bmap
VAR_DECL	2542:1	2542:9	5	uint16 * rmap
TYPE	2542:1	2542:8	6	uint16 *
TYPE_NAME	2542:1	2542:1	7	uint16
LEAF_NODE	2542:1	2542:1	8	uint16
POINTER	2542:8	2542:8	7	*
LEAF_NODE	2542:8	2542:8	8	*
NAME	2542:9	2542:9	6	rmap
LEAF_NODE	2542:9	2542:9	7	rmap
LEAF_NODE	2542:13	2542:13	5	,
INIT_DECL_LIST	2542:1	2542:1	5	uint16 * gmap , uint16 * bmap
VAR_DECL	2542:1	2542:16	6	uint16 * gmap
TYPE	2542:1	2542:15	7	uint16 *
TYPE_NAME	2542:1	2542:1	8	uint16
LEAF_NODE	2542:1	2542:1	9	uint16
POINTER	2542:15	2542:15	8	*
LEAF_NODE	2542:15	2542:15	9	*
NAME	2542:16	2542:16	7	gmap
LEAF_NODE	2542:16	2542:16	8	gmap
LEAF_NODE	2542:20	2542:20	6	,
VAR_DECL	2542:1	2542:23	6	uint16 * bmap
TYPE	2542:1	2542:22	7	uint16 *
TYPE_NAME	2542:1	2542:1	8	uint16
LEAF_NODE	2542:1	2542:1	9	uint16
POINTER	2542:22	2542:22	8	*
LEAF_NODE	2542:22	2542:22	9	*
NAME	2542:23	2542:23	7	bmap
LEAF_NODE	2542:23	2542:23	8	bmap
LEAF_NODE	2542:27	2542:27	4	;
SIMPLE_DECL	2543:1	2543:11	3	uint32 row ;
VAR_DECL	2543:1	2543:8	4	uint32 row
TYPE	2543:1	2543:1	5	uint32
TYPE_NAME	2543:1	2543:1	6	uint32
LEAF_NODE	2543:1	2543:1	7	uint32
NAME	2543:8	2543:8	5	row
LEAF_NODE	2543:8	2543:8	6	row
LEAF_NODE	2543:11	2543:11	4	;
SIMPLE_DECL	2544:1	2544:27	3	int breaklen ; breaklen = MAXLINE , int nc ;
INIT_DECL_LIST	2544:1	2544:1	4	int breaklen ; breaklen = MAXLINE , int nc
VAR_DECL	2544:1	2544:5	5	int breaklen ; breaklen = MAXLINE
TYPE	2544:1	2544:1	6	int
TYPE_NAME	2544:1	2544:1	7	int
LEAF_NODE	2544:1	2544:1	8	int
NAME	2544:5	2544:5	6	breaklen
LEAF_NODE	2544:5	2544:5	7	breaklen
LEAF_NODE	0:0	0:0	6	;
INIT	2544:5	2544:5	6	breaklen = MAXLINE
ASSIGN	2544:5	2544:16	7	breaklen = MAXLINE
LVAL	2544:5	2544:5	8	breaklen
NAME	2544:5	2544:5	9	breaklen
LEAF_NODE	2544:5	2544:5	10	breaklen
ASSIGN_OP	2544:14	2544:14	8	=
LEAF_NODE	2544:14	2544:14	9	=
RVAL	2544:16	2544:16	8	MAXLINE
FIELD	2544:16	2544:16	9	MAXLINE
LEAF_NODE	2544:16	2544:16	10	MAXLINE
LEAF_NODE	2544:23	2544:23	5	,
VAR_DECL	2544:1	2544:25	5	int nc
TYPE	2544:1	2544:1	6	int
TYPE_NAME	2544:1	2544:1	7	int
LEAF_NODE	2544:1	2544:1	8	int
NAME	2544:25	2544:25	6	nc
LEAF_NODE	2544:25	2544:25	7	nc
LEAF_NODE	2544:27	2544:27	4	;
SIMPLE_DECL	2545:1	2545:11	3	tsize_t cc ;
VAR_DECL	2545:1	2545:9	4	tsize_t cc
TYPE	2545:1	2545:1	5	tsize_t
TYPE_NAME	2545:1	2545:1	6	tsize_t
LEAF_NODE	2545:1	2545:1	7	tsize_t
NAME	2545:9	2545:9	5	cc
LEAF_NODE	2545:9	2545:9	6	cc
LEAF_NODE	2545:11	2545:11	4	;
SIMPLE_DECL	2546:1	2546:22	3	unsigned char * tf_buf ;
VAR_DECL	2546:1	2546:16	4	unsigned char * tf_buf
TYPE	2546:1	2546:15	5	unsigned char *
TYPE_NAME	2546:1	2546:10	6	unsigned char
LEAF_NODE	2546:1	2546:1	7	unsigned
LEAF_NODE	2546:10	2546:10	7	char
POINTER	2546:15	2546:15	6	*
LEAF_NODE	2546:15	2546:15	7	*
NAME	2546:16	2546:16	5	tf_buf
LEAF_NODE	2546:16	2546:16	6	tf_buf
LEAF_NODE	2546:22	2546:22	4	;
SIMPLE_DECL	2547:1	2547:21	3	unsigned char * cp , unsigned char c ;
INIT_DECL_LIST	2547:1	2547:1	4	unsigned char * cp , unsigned char c
VAR_DECL	2547:1	2547:16	5	unsigned char * cp
TYPE	2547:1	2547:15	6	unsigned char *
TYPE_NAME	2547:1	2547:10	7	unsigned char
LEAF_NODE	2547:1	2547:1	8	unsigned
LEAF_NODE	2547:10	2547:10	8	char
POINTER	2547:15	2547:15	7	*
LEAF_NODE	2547:15	2547:15	8	*
NAME	2547:16	2547:16	6	cp
LEAF_NODE	2547:16	2547:16	7	cp
LEAF_NODE	2547:18	2547:18	5	,
VAR_DECL	2547:1	2547:20	5	unsigned char c
TYPE	2547:1	2547:1	6	unsigned char
TYPE_NAME	2547:1	2547:10	7	unsigned char
LEAF_NODE	2547:1	2547:1	8	unsigned
LEAF_NODE	2547:10	2547:10	8	char
NAME	2547:20	2547:20	6	c
LEAF_NODE	2547:20	2547:20	7	c
LEAF_NODE	2547:21	2547:21	4	;
EXPR_STATEMENT	2549:1	2549:9	3	( void ) w ;
EXPR	2549:1	2549:8	4	( void ) w
LEAF_NODE	2549:1	2549:1	5	(
TYPE_NAME	2549:2	2549:2	5	void
LEAF_NODE	2549:2	2549:2	6	void
LEAF_NODE	2549:6	2549:6	5	)
FIELD	2549:8	2549:8	5	w
LEAF_NODE	2549:8	2549:8	6	w
LEAF_NODE	2549:9	2549:9	4	;
SELECTION	2550:1	2550:64	3	
KEYWORD	2550:1	2550:1	4	if
LEAF_NODE	2550:1	2550:1	5	if
LEAF_NODE	2550:4	2550:4	4	(
CONDITION	2550:5	2550:5	4	! TIFFGetField ( tif , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
EXPR	2550:5	2550:5	5	! TIFFGetField ( tif , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
UNARY_EXPR	2550:5	2550:6	6	! TIFFGetField ( tif , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
UNARY_OPERATOR	2550:5	2550:5	7	!
LEAF_NODE	2550:5	2550:5	8	!
FUNCTION_CALL	2550:6	2550:61	7	TIFFGetField ( tif , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
CALLEE	2550:6	2550:6	8	TIFFGetField
LEAF_NODE	2550:6	2550:6	9	TIFFGetField
LEAF_NODE	2550:18	2550:18	8	(
ARGUMENT	2550:19	2550:19	8	tif
FIELD	2550:19	2550:19	9	tif
LEAF_NODE	2550:19	2550:19	10	tif
LEAF_NODE	2550:22	2550:22	8	,
ARGUMENT	2550:24	2550:24	8	TIFFTAG_COLORMAP
FIELD	2550:24	2550:24	9	TIFFTAG_COLORMAP
LEAF_NODE	2550:24	2550:24	10	TIFFTAG_COLORMAP
LEAF_NODE	2550:40	2550:40	8	,
ARGUMENT	2550:42	2550:42	8	& rmap
UNARY_EXPR	2550:42	2550:43	9	& rmap
UNARY_OPERATOR	2550:42	2550:42	10	&
LEAF_NODE	2550:42	2550:42	11	&
FIELD	2550:43	2550:43	10	rmap
LEAF_NODE	2550:43	2550:43	11	rmap
LEAF_NODE	2550:47	2550:47	8	,
ARGUMENT	2550:49	2550:49	8	& gmap
UNARY_EXPR	2550:49	2550:50	9	& gmap
UNARY_OPERATOR	2550:49	2550:49	10	&
LEAF_NODE	2550:49	2550:49	11	&
FIELD	2550:50	2550:50	10	gmap
LEAF_NODE	2550:50	2550:50	11	gmap
LEAF_NODE	2550:54	2550:54	8	,
ARGUMENT	2550:56	2550:56	8	& bmap
UNARY_EXPR	2550:56	2550:57	9	& bmap
UNARY_OPERATOR	2550:56	2550:56	10	&
LEAF_NODE	2550:56	2550:56	11	&
FIELD	2550:57	2550:57	10	bmap
LEAF_NODE	2550:57	2550:57	11	bmap
LEAF_NODE	2550:61	2550:61	8	)
LEAF_NODE	2550:62	2550:62	4	)
STATEMENTS	2550:64	2553:1	4	
LEAF_NODE	2550:64	2550:64	5	{
STATEMENTS	2551:2	2552:2	5	
EXPR_STATEMENT	2551:2	2551:59	6	TIFFError ( filename , "Palette image w/o \"Colormap\" tag" ) ;
EXPR	2551:2	2551:2	7	TIFFError ( filename , "Palette image w/o \"Colormap\" tag" )
FUNCTION_CALL	2551:2	2551:58	8	TIFFError ( filename , "Palette image w/o \"Colormap\" tag" )
CALLEE	2551:2	2551:2	9	TIFFError
LEAF_NODE	2551:2	2551:2	10	TIFFError
LEAF_NODE	2551:11	2551:11	9	(
ARGUMENT	2551:12	2551:12	9	filename
FIELD	2551:12	2551:12	10	filename
LEAF_NODE	2551:12	2551:12	11	filename
LEAF_NODE	2551:20	2551:20	9	,
ARGUMENT	2551:22	2551:22	9	"Palette image w/o \"Colormap\" tag"
FIELD	2551:22	2551:22	10	"Palette image w/o \"Colormap\" tag"
LEAF_NODE	2551:22	2551:22	11	"Palette image w/o \"Colormap\" tag"
LEAF_NODE	2551:58	2551:58	9	)
LEAF_NODE	2551:59	2551:59	7	;
JUMP_STATEMENT	2552:2	2552:8	6	return DESTINATION ;
KEYWORD	2552:2	2552:2	7	return
LEAF_NODE	2552:2	2552:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2552:8	2552:8	7	;
LEAF_NODE	2553:1	2553:1	5	}
SELECTION	2554:1	2554:24	3	
KEYWORD	2554:1	2554:1	4	switch
LEAF_NODE	2554:1	2554:1	5	switch
LEAF_NODE	2554:8	2554:8	4	(
CONDITION	2554:9	2554:9	4	bitspersample
EXPR	2554:9	2554:9	5	bitspersample
FIELD	2554:9	2554:9	6	bitspersample
LEAF_NODE	2554:9	2554:9	7	bitspersample
LEAF_NODE	2554:22	2554:22	4	)
STATEMENTS	2554:24	2560:1	4	
LEAF_NODE	2554:24	2554:24	5	{
STATEMENTS	2555:1	2559:2	5	
LABEL	2555:1	2555:7	6	case 8 :
LEAF_NODE	2555:1	2555:1	7	case
LEAF_NODE	2555:6	2555:6	7	8
LEAF_NODE	2555:7	2555:7	7	:
LABEL	2555:9	2555:15	6	case 4 :
LEAF_NODE	2555:9	2555:9	7	case
LEAF_NODE	2555:14	2555:14	7	4
LEAF_NODE	2555:15	2555:15	7	:
LABEL	2555:17	2555:23	6	case 2 :
LEAF_NODE	2555:17	2555:17	7	case
LEAF_NODE	2555:22	2555:22	7	2
LEAF_NODE	2555:23	2555:23	7	:
LABEL	2555:25	2555:31	6	case 1 :
LEAF_NODE	2555:25	2555:25	7	case
LEAF_NODE	2555:30	2555:30	7	1
LEAF_NODE	2555:31	2555:31	7	:
JUMP_STATEMENT	2556:2	2556:7	6	break DESTINATION ;
KEYWORD	2556:2	2556:2	7	break
LEAF_NODE	2556:2	2556:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2556:7	2556:7	7	;
LABEL	2557:1	2557:8	6	default :
LEAF_NODE	2557:1	2557:1	7	default
LEAF_NODE	2557:8	2557:8	7	:
EXPR_STATEMENT	2558:2	2558:62	6	TIFFError ( filename , "Depth %d not supported" , bitspersample ) ;
EXPR	2558:2	2558:2	7	TIFFError ( filename , "Depth %d not supported" , bitspersample )
FUNCTION_CALL	2558:2	2558:61	8	TIFFError ( filename , "Depth %d not supported" , bitspersample )
CALLEE	2558:2	2558:2	9	TIFFError
LEAF_NODE	2558:2	2558:2	10	TIFFError
LEAF_NODE	2558:11	2558:11	9	(
ARGUMENT	2558:12	2558:12	9	filename
FIELD	2558:12	2558:12	10	filename
LEAF_NODE	2558:12	2558:12	11	filename
LEAF_NODE	2558:20	2558:20	9	,
ARGUMENT	2558:22	2558:22	9	"Depth %d not supported"
FIELD	2558:22	2558:22	10	"Depth %d not supported"
LEAF_NODE	2558:22	2558:22	11	"Depth %d not supported"
LEAF_NODE	2558:46	2558:46	9	,
ARGUMENT	2558:48	2558:48	9	bitspersample
FIELD	2558:48	2558:48	10	bitspersample
LEAF_NODE	2558:48	2558:48	11	bitspersample
LEAF_NODE	2558:61	2558:61	9	)
LEAF_NODE	2558:62	2558:62	7	;
JUMP_STATEMENT	2559:2	2559:8	6	return DESTINATION ;
KEYWORD	2559:2	2559:2	7	return
LEAF_NODE	2559:2	2559:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2559:8	2559:8	7	;
LEAF_NODE	2560:1	2560:1	5	}
EXPR_STATEMENT	2561:1	2561:29	3	nc = 3 * ( 8 / bitspersample ) ;
EXPR	2561:1	2561:1	4	nc = 3 * ( 8 / bitspersample )
ASSIGN	2561:1	2561:6	5	nc = 3 * ( 8 / bitspersample )
LVAL	2561:1	2561:1	6	nc
FIELD	2561:1	2561:1	7	nc
LEAF_NODE	2561:1	2561:1	8	nc
ASSIGN_OP	2561:4	2561:4	6	=
LEAF_NODE	2561:4	2561:4	7	=
RVAL	2561:6	2561:28	6	3 * ( 8 / bitspersample )
FIELD	2561:6	2561:6	7	3
LEAF_NODE	2561:6	2561:6	8	3
LEAF_NODE	2561:8	2561:8	7	*
LEAF_NODE	2561:10	2561:10	7	(
FIELD	2561:11	2561:11	7	8
LEAF_NODE	2561:11	2561:11	8	8
LEAF_NODE	2561:13	2561:13	7	/
FIELD	2561:15	2561:15	7	bitspersample
LEAF_NODE	2561:15	2561:15	8	bitspersample
LEAF_NODE	2561:28	2561:28	7	)
LEAF_NODE	2561:29	2561:29	4	;
EXPR_STATEMENT	2562:1	2562:55	3	tf_buf = ( unsigned char * ) _TIFFmalloc ( tf_bytesperrow ) ;
EXPR	2562:1	2562:1	4	tf_buf = ( unsigned char * ) _TIFFmalloc ( tf_bytesperrow )
ASSIGN	2562:1	2562:10	5	tf_buf = ( unsigned char * ) _TIFFmalloc ( tf_bytesperrow )
LVAL	2562:1	2562:1	6	tf_buf
FIELD	2562:1	2562:1	7	tf_buf
LEAF_NODE	2562:1	2562:1	8	tf_buf
ASSIGN_OP	2562:8	2562:8	6	=
LEAF_NODE	2562:8	2562:8	7	=
RVAL	2562:10	2562:28	6	( unsigned char * ) _TIFFmalloc ( tf_bytesperrow )
LEAF_NODE	2562:10	2562:10	7	(
TYPE_NAME	2562:11	2562:20	7	unsigned char
LEAF_NODE	2562:11	2562:11	8	unsigned
LEAF_NODE	2562:20	2562:20	8	char
LEAF_NODE	2562:25	2562:25	7	*
LEAF_NODE	2562:26	2562:26	7	)
FUNCTION_CALL	2562:28	2562:54	7	_TIFFmalloc ( tf_bytesperrow )
CALLEE	2562:28	2562:28	8	_TIFFmalloc
LEAF_NODE	2562:28	2562:28	9	_TIFFmalloc
LEAF_NODE	2562:39	2562:39	8	(
ARGUMENT	2562:40	2562:40	8	tf_bytesperrow
FIELD	2562:40	2562:40	9	tf_bytesperrow
LEAF_NODE	2562:40	2562:40	10	tf_bytesperrow
LEAF_NODE	2562:54	2562:54	8	)
LEAF_NODE	2562:55	2562:55	4	;
SELECTION	2563:1	2563:21	3	
KEYWORD	2563:1	2563:1	4	if
LEAF_NODE	2563:1	2563:1	5	if
LEAF_NODE	2563:4	2563:4	4	(
CONDITION	2563:5	2563:5	4	tf_buf == NULL
EXPR	2563:5	2563:15	5	tf_buf == NULL
FIELD	2563:5	2563:5	6	tf_buf
LEAF_NODE	2563:5	2563:5	7	tf_buf
EQ_OPERATOR	2563:12	2563:12	6	==
LEAF_NODE	2563:12	2563:12	7	==
FIELD	2563:15	2563:15	6	NULL
LEAF_NODE	2563:15	2563:15	7	NULL
LEAF_NODE	2563:19	2563:19	4	)
STATEMENTS	2563:21	2566:1	4	
LEAF_NODE	2563:21	2563:21	5	{
STATEMENTS	2564:2	2565:2	5	
EXPR_STATEMENT	2564:2	2564:53	6	TIFFError ( filename , "No space for scanline buffer" ) ;
EXPR	2564:2	2564:2	7	TIFFError ( filename , "No space for scanline buffer" )
FUNCTION_CALL	2564:2	2564:52	8	TIFFError ( filename , "No space for scanline buffer" )
CALLEE	2564:2	2564:2	9	TIFFError
LEAF_NODE	2564:2	2564:2	10	TIFFError
LEAF_NODE	2564:11	2564:11	9	(
ARGUMENT	2564:12	2564:12	9	filename
FIELD	2564:12	2564:12	10	filename
LEAF_NODE	2564:12	2564:12	11	filename
LEAF_NODE	2564:20	2564:20	9	,
ARGUMENT	2564:22	2564:22	9	"No space for scanline buffer"
FIELD	2564:22	2564:22	10	"No space for scanline buffer"
LEAF_NODE	2564:22	2564:22	11	"No space for scanline buffer"
LEAF_NODE	2564:52	2564:52	9	)
LEAF_NODE	2564:53	2564:53	7	;
JUMP_STATEMENT	2565:2	2565:8	6	return DESTINATION ;
KEYWORD	2565:2	2565:2	7	return
LEAF_NODE	2565:2	2565:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2565:8	2565:8	7	;
LEAF_NODE	2566:1	2566:1	5	}
SELECTION	2567:1	2567:63	3	
KEYWORD	2567:1	2567:1	4	if
LEAF_NODE	2567:1	2567:1	5	if
LEAF_NODE	2567:4	2567:4	4	(
CONDITION	2567:5	2567:5	4	checkcmap ( tif , 1 << bitspersample , rmap , gmap , bmap ) == 16
EXPR	2567:5	2567:59	5	checkcmap ( tif , 1 << bitspersample , rmap , gmap , bmap ) == 16
FUNCTION_CALL	2567:5	2567:54	6	checkcmap ( tif , 1 << bitspersample , rmap , gmap , bmap )
CALLEE	2567:5	2567:5	7	checkcmap
LEAF_NODE	2567:5	2567:5	8	checkcmap
LEAF_NODE	2567:14	2567:14	7	(
ARGUMENT	2567:15	2567:15	7	tif
FIELD	2567:15	2567:15	8	tif
LEAF_NODE	2567:15	2567:15	9	tif
LEAF_NODE	2567:18	2567:18	7	,
ARGUMENT	2567:20	2567:23	7	1 << bitspersample
FIELD	2567:20	2567:20	8	1
LEAF_NODE	2567:20	2567:20	9	1
LEAF_NODE	2567:21	2567:21	8	<<
FIELD	2567:23	2567:23	8	bitspersample
LEAF_NODE	2567:23	2567:23	9	bitspersample
LEAF_NODE	2567:36	2567:36	7	,
ARGUMENT	2567:38	2567:38	7	rmap
FIELD	2567:38	2567:38	8	rmap
LEAF_NODE	2567:38	2567:38	9	rmap
LEAF_NODE	2567:42	2567:42	7	,
ARGUMENT	2567:44	2567:44	7	gmap
FIELD	2567:44	2567:44	8	gmap
LEAF_NODE	2567:44	2567:44	9	gmap
LEAF_NODE	2567:48	2567:48	7	,
ARGUMENT	2567:50	2567:50	7	bmap
FIELD	2567:50	2567:50	8	bmap
LEAF_NODE	2567:50	2567:50	9	bmap
LEAF_NODE	2567:54	2567:54	7	)
EQ_OPERATOR	2567:56	2567:56	6	==
LEAF_NODE	2567:56	2567:56	7	==
FIELD	2567:59	2567:59	6	16
LEAF_NODE	2567:59	2567:59	7	16
LEAF_NODE	2567:61	2567:61	4	)
STATEMENTS	2567:63	2576:1	4	
LEAF_NODE	2567:63	2567:63	5	{
STATEMENTS	2568:2	2570:2	5	
SIMPLE_DECL	2568:2	2568:7	6	int i ;
VAR_DECL	2568:2	2568:6	7	int i
TYPE	2568:2	2568:2	8	int
TYPE_NAME	2568:2	2568:2	9	int
LEAF_NODE	2568:2	2568:2	10	int
NAME	2568:6	2568:6	8	i
LEAF_NODE	2568:6	2568:6	9	i
LEAF_NODE	2568:7	2568:7	7	;
ITERATION	2570:2	2570:46	6	
KEYWORD	2570:2	2570:2	7	for
LEAF_NODE	2570:2	2570:2	8	for
LEAF_NODE	2570:6	2570:6	7	(
FOR_INIT	2570:7	2570:31	7	i = ( 1 << bitspersample ) - 1 ;
EXPR	2570:7	2570:7	8	i = ( 1 << bitspersample ) - 1
ASSIGN	2570:7	2570:11	9	i = ( 1 << bitspersample ) - 1
LVAL	2570:7	2570:7	10	i
FIELD	2570:7	2570:7	11	i
LEAF_NODE	2570:7	2570:7	12	i
ASSIGN_OP	2570:9	2570:9	10	=
LEAF_NODE	2570:9	2570:9	11	=
RVAL	2570:11	2570:30	10	( 1 << bitspersample ) - 1
LEAF_NODE	2570:11	2570:11	11	(
FIELD	2570:12	2570:12	11	1
LEAF_NODE	2570:12	2570:12	12	1
LEAF_NODE	2570:13	2570:13	11	<<
FIELD	2570:15	2570:15	11	bitspersample
LEAF_NODE	2570:15	2570:15	12	bitspersample
LEAF_NODE	2570:28	2570:28	11	)
LEAF_NODE	2570:29	2570:29	11	-
FIELD	2570:30	2570:30	11	1
LEAF_NODE	2570:30	2570:30	12	1
LEAF_NODE	2570:31	2570:31	8	;
CONDITION	2570:33	2570:33	7	i >= 0
EXPR	2570:33	2570:38	8	i >= 0
FIELD	2570:33	2570:33	9	i
LEAF_NODE	2570:33	2570:33	10	i
REL_OPERATOR	2570:35	2570:35	9	>=
LEAF_NODE	2570:35	2570:35	10	>=
FIELD	2570:38	2570:38	9	0
LEAF_NODE	2570:38	2570:38	10	0
LEAF_NODE	2570:39	2570:39	7	;
FOR_EXPR	2570:41	2570:41	7	i --
EXPR	2570:41	2570:41	8	i --
FIELD	2570:41	2570:42	9	i --
LEAF_NODE	2570:41	2570:41	10	i
LEAF_NODE	2570:42	2570:42	10	--
LEAF_NODE	2570:44	2570:44	7	)
STATEMENTS	2570:46	2574:2	7	
LEAF_NODE	2570:46	2570:46	8	{
STATEMENTS	2571:3	2573:3	8	
EXPR_STATEMENT	2571:3	2571:25	9	rmap [ i ] = CVT ( rmap [ i ] ) ;
EXPR	2571:3	2571:3	10	rmap [ i ] = CVT ( rmap [ i ] )
ASSIGN	2571:3	2571:13	11	rmap [ i ] = CVT ( rmap [ i ] )
LVAL	2571:3	2571:3	12	rmap [ i ]
FIELD	2571:3	2571:9	13	rmap [ i ]
LEAF_NODE	2571:3	2571:3	14	rmap
LEAF_NODE	2571:7	2571:7	14	[
EXPR	2571:8	2571:8	14	i
FIELD	2571:8	2571:8	15	i
LEAF_NODE	2571:8	2571:8	16	i
LEAF_NODE	2571:9	2571:9	14	]
ASSIGN_OP	2571:11	2571:11	12	=
LEAF_NODE	2571:11	2571:11	13	=
RVAL	2571:13	2571:13	12	CVT ( rmap [ i ] )
FUNCTION_CALL	2571:13	2571:24	13	CVT ( rmap [ i ] )
CALLEE	2571:13	2571:13	14	CVT
LEAF_NODE	2571:13	2571:13	15	CVT
LEAF_NODE	2571:16	2571:16	14	(
ARGUMENT	2571:17	2571:17	14	rmap [ i ]
FIELD	2571:17	2571:23	15	rmap [ i ]
LEAF_NODE	2571:17	2571:17	16	rmap
LEAF_NODE	2571:21	2571:21	16	[
EXPR	2571:22	2571:22	16	i
FIELD	2571:22	2571:22	17	i
LEAF_NODE	2571:22	2571:22	18	i
LEAF_NODE	2571:23	2571:23	16	]
LEAF_NODE	2571:24	2571:24	14	)
LEAF_NODE	2571:25	2571:25	10	;
EXPR_STATEMENT	2572:3	2572:25	9	gmap [ i ] = CVT ( gmap [ i ] ) ;
EXPR	2572:3	2572:3	10	gmap [ i ] = CVT ( gmap [ i ] )
ASSIGN	2572:3	2572:13	11	gmap [ i ] = CVT ( gmap [ i ] )
LVAL	2572:3	2572:3	12	gmap [ i ]
FIELD	2572:3	2572:9	13	gmap [ i ]
LEAF_NODE	2572:3	2572:3	14	gmap
LEAF_NODE	2572:7	2572:7	14	[
EXPR	2572:8	2572:8	14	i
FIELD	2572:8	2572:8	15	i
LEAF_NODE	2572:8	2572:8	16	i
LEAF_NODE	2572:9	2572:9	14	]
ASSIGN_OP	2572:11	2572:11	12	=
LEAF_NODE	2572:11	2572:11	13	=
RVAL	2572:13	2572:13	12	CVT ( gmap [ i ] )
FUNCTION_CALL	2572:13	2572:24	13	CVT ( gmap [ i ] )
CALLEE	2572:13	2572:13	14	CVT
LEAF_NODE	2572:13	2572:13	15	CVT
LEAF_NODE	2572:16	2572:16	14	(
ARGUMENT	2572:17	2572:17	14	gmap [ i ]
FIELD	2572:17	2572:23	15	gmap [ i ]
LEAF_NODE	2572:17	2572:17	16	gmap
LEAF_NODE	2572:21	2572:21	16	[
EXPR	2572:22	2572:22	16	i
FIELD	2572:22	2572:22	17	i
LEAF_NODE	2572:22	2572:22	18	i
LEAF_NODE	2572:23	2572:23	16	]
LEAF_NODE	2572:24	2572:24	14	)
LEAF_NODE	2572:25	2572:25	10	;
EXPR_STATEMENT	2573:3	2573:25	9	bmap [ i ] = CVT ( bmap [ i ] ) ;
EXPR	2573:3	2573:3	10	bmap [ i ] = CVT ( bmap [ i ] )
ASSIGN	2573:3	2573:13	11	bmap [ i ] = CVT ( bmap [ i ] )
LVAL	2573:3	2573:3	12	bmap [ i ]
FIELD	2573:3	2573:9	13	bmap [ i ]
LEAF_NODE	2573:3	2573:3	14	bmap
LEAF_NODE	2573:7	2573:7	14	[
EXPR	2573:8	2573:8	14	i
FIELD	2573:8	2573:8	15	i
LEAF_NODE	2573:8	2573:8	16	i
LEAF_NODE	2573:9	2573:9	14	]
ASSIGN_OP	2573:11	2573:11	12	=
LEAF_NODE	2573:11	2573:11	13	=
RVAL	2573:13	2573:13	12	CVT ( bmap [ i ] )
FUNCTION_CALL	2573:13	2573:24	13	CVT ( bmap [ i ] )
CALLEE	2573:13	2573:13	14	CVT
LEAF_NODE	2573:13	2573:13	15	CVT
LEAF_NODE	2573:16	2573:16	14	(
ARGUMENT	2573:17	2573:17	14	bmap [ i ]
FIELD	2573:17	2573:23	15	bmap [ i ]
LEAF_NODE	2573:17	2573:17	16	bmap
LEAF_NODE	2573:21	2573:21	16	[
EXPR	2573:22	2573:22	16	i
FIELD	2573:22	2573:22	17	i
LEAF_NODE	2573:22	2573:22	18	i
LEAF_NODE	2573:23	2573:23	16	]
LEAF_NODE	2573:24	2573:24	14	)
LEAF_NODE	2573:25	2573:25	10	;
LEAF_NODE	2574:2	2574:2	8	}
LEAF_NODE	2576:1	2576:1	5	}
ITERATION	2577:1	2577:31	3	
KEYWORD	2577:1	2577:1	4	for
LEAF_NODE	2577:1	2577:1	5	for
LEAF_NODE	2577:5	2577:5	4	(
FOR_INIT	2577:6	2577:13	4	row = 0 ;
EXPR	2577:6	2577:6	5	row = 0
ASSIGN	2577:6	2577:12	6	row = 0
LVAL	2577:6	2577:6	7	row
FIELD	2577:6	2577:6	8	row
LEAF_NODE	2577:6	2577:6	9	row
ASSIGN_OP	2577:10	2577:10	7	=
LEAF_NODE	2577:10	2577:10	8	=
RVAL	2577:12	2577:12	7	0
FIELD	2577:12	2577:12	8	0
LEAF_NODE	2577:12	2577:12	9	0
LEAF_NODE	2577:13	2577:13	5	;
CONDITION	2577:15	2577:15	4	row < h
EXPR	2577:15	2577:21	5	row < h
FIELD	2577:15	2577:15	6	row
LEAF_NODE	2577:15	2577:15	7	row
REL_OPERATOR	2577:19	2577:19	6	<
LEAF_NODE	2577:19	2577:19	7	<
FIELD	2577:21	2577:21	6	h
LEAF_NODE	2577:21	2577:21	7	h
LEAF_NODE	2577:22	2577:22	4	;
FOR_EXPR	2577:24	2577:24	4	row ++
EXPR	2577:24	2577:24	5	row ++
FIELD	2577:24	2577:27	6	row ++
LEAF_NODE	2577:24	2577:24	7	row
LEAF_NODE	2577:27	2577:27	7	++
LEAF_NODE	2577:29	2577:29	4	)
STATEMENTS	2577:31	2608:1	4	
LEAF_NODE	2577:31	2577:31	5	{
STATEMENTS	2578:2	2580:2	5	
SELECTION	2578:2	2579:3	6	
KEYWORD	2578:2	2578:2	7	if
LEAF_NODE	2578:2	2578:2	8	if
LEAF_NODE	2578:5	2578:5	7	(
CONDITION	2578:6	2578:6	7	TIFFReadScanline ( tif , tf_buf , row , 0 ) < 0
EXPR	2578:6	2578:46	8	TIFFReadScanline ( tif , tf_buf , row , 0 ) < 0
FUNCTION_CALL	2578:6	2578:42	9	TIFFReadScanline ( tif , tf_buf , row , 0 )
CALLEE	2578:6	2578:6	10	TIFFReadScanline
LEAF_NODE	2578:6	2578:6	11	TIFFReadScanline
LEAF_NODE	2578:22	2578:22	10	(
ARGUMENT	2578:23	2578:23	10	tif
FIELD	2578:23	2578:23	11	tif
LEAF_NODE	2578:23	2578:23	12	tif
LEAF_NODE	2578:26	2578:26	10	,
ARGUMENT	2578:28	2578:28	10	tf_buf
FIELD	2578:28	2578:28	11	tf_buf
LEAF_NODE	2578:28	2578:28	12	tf_buf
LEAF_NODE	2578:34	2578:34	10	,
ARGUMENT	2578:36	2578:36	10	row
FIELD	2578:36	2578:36	11	row
LEAF_NODE	2578:36	2578:36	12	row
LEAF_NODE	2578:39	2578:39	10	,
ARGUMENT	2578:41	2578:41	10	0
FIELD	2578:41	2578:41	11	0
LEAF_NODE	2578:41	2578:41	12	0
LEAF_NODE	2578:42	2578:42	10	)
REL_OPERATOR	2578:44	2578:44	9	<
LEAF_NODE	2578:44	2578:44	10	<
FIELD	2578:46	2578:46	9	0
LEAF_NODE	2578:46	2578:46	10	0
LEAF_NODE	2578:47	2578:47	7	)
STATEMENTS	2579:3	2579:3	7	
JUMP_STATEMENT	2579:3	2579:8	8	break DESTINATION ;
KEYWORD	2579:3	2579:3	9	break
LEAF_NODE	2579:3	2579:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	2579:8	2579:8	9	;
ITERATION	2580:2	2580:55	6	
KEYWORD	2580:2	2580:2	7	for
LEAF_NODE	2580:2	2580:2	8	for
LEAF_NODE	2580:6	2580:6	7	(
FOR_INIT	2580:7	2580:26	7	cp = tf_buf , cc = 0 ;
EXPR	2580:7	2580:20	8	cp = tf_buf , cc = 0
ASSIGN	2580:7	2580:12	9	cp = tf_buf
LVAL	2580:7	2580:7	10	cp
FIELD	2580:7	2580:7	11	cp
LEAF_NODE	2580:7	2580:7	12	cp
ASSIGN_OP	2580:10	2580:10	10	=
LEAF_NODE	2580:10	2580:10	11	=
RVAL	2580:12	2580:12	10	tf_buf
FIELD	2580:12	2580:12	11	tf_buf
LEAF_NODE	2580:12	2580:12	12	tf_buf
LEAF_NODE	2580:18	2580:18	9	,
ASSIGN	2580:20	2580:25	9	cc = 0
LVAL	2580:20	2580:20	10	cc
FIELD	2580:20	2580:20	11	cc
LEAF_NODE	2580:20	2580:20	12	cc
ASSIGN_OP	2580:23	2580:23	10	=
LEAF_NODE	2580:23	2580:23	11	=
RVAL	2580:25	2580:25	10	0
FIELD	2580:25	2580:25	11	0
LEAF_NODE	2580:25	2580:25	12	0
LEAF_NODE	2580:26	2580:26	8	;
CONDITION	2580:28	2580:28	7	cc < tf_bytesperrow
EXPR	2580:28	2580:33	8	cc < tf_bytesperrow
FIELD	2580:28	2580:28	9	cc
LEAF_NODE	2580:28	2580:28	10	cc
REL_OPERATOR	2580:31	2580:31	9	<
LEAF_NODE	2580:31	2580:31	10	<
FIELD	2580:33	2580:33	9	tf_bytesperrow
LEAF_NODE	2580:33	2580:33	10	tf_bytesperrow
LEAF_NODE	2580:47	2580:47	7	;
FOR_EXPR	2580:49	2580:49	7	cc ++
EXPR	2580:49	2580:49	8	cc ++
FIELD	2580:49	2580:51	9	cc ++
LEAF_NODE	2580:49	2580:49	10	cc
LEAF_NODE	2580:51	2580:51	10	++
LEAF_NODE	2580:53	2580:53	7	)
STATEMENTS	2580:55	2607:2	7	
LEAF_NODE	2580:55	2580:55	8	{
STATEMENTS	2581:3	2582:3	8	
EXPR_STATEMENT	2581:3	2581:28	9	DOBREAK ( breaklen , nc , fd ) ;
EXPR	2581:3	2581:3	10	DOBREAK ( breaklen , nc , fd )
FUNCTION_CALL	2581:3	2581:27	11	DOBREAK ( breaklen , nc , fd )
CALLEE	2581:3	2581:3	12	DOBREAK
LEAF_NODE	2581:3	2581:3	13	DOBREAK
LEAF_NODE	2581:10	2581:10	12	(
ARGUMENT	2581:11	2581:11	12	breaklen
FIELD	2581:11	2581:11	13	breaklen
LEAF_NODE	2581:11	2581:11	14	breaklen
LEAF_NODE	2581:19	2581:19	12	,
ARGUMENT	2581:21	2581:21	12	nc
FIELD	2581:21	2581:21	13	nc
LEAF_NODE	2581:21	2581:21	14	nc
LEAF_NODE	2581:23	2581:23	12	,
ARGUMENT	2581:25	2581:25	12	fd
FIELD	2581:25	2581:25	13	fd
LEAF_NODE	2581:25	2581:25	14	fd
LEAF_NODE	2581:27	2581:27	12	)
LEAF_NODE	2581:28	2581:28	10	;
SELECTION	2582:3	2582:26	9	
KEYWORD	2582:3	2582:3	10	switch
LEAF_NODE	2582:3	2582:3	11	switch
LEAF_NODE	2582:10	2582:10	10	(
CONDITION	2582:11	2582:11	10	bitspersample
EXPR	2582:11	2582:11	11	bitspersample
FIELD	2582:11	2582:11	12	bitspersample
LEAF_NODE	2582:11	2582:11	13	bitspersample
LEAF_NODE	2582:24	2582:24	10	)
STATEMENTS	2582:26	2606:3	10	
LEAF_NODE	2582:26	2582:26	11	{
STATEMENTS	2583:3	2605:4	11	
LABEL	2583:3	2583:9	12	case 8 :
LEAF_NODE	2583:3	2583:3	13	case
LEAF_NODE	2583:8	2583:8	13	8
LEAF_NODE	2583:9	2583:9	13	:
EXPR_STATEMENT	2584:4	2584:13	12	c = * cp ++ ;
EXPR	2584:4	2584:4	13	c = * cp ++
ASSIGN	2584:4	2584:8	14	c = * cp ++
LVAL	2584:4	2584:4	15	c
FIELD	2584:4	2584:4	16	c
LEAF_NODE	2584:4	2584:4	17	c
ASSIGN_OP	2584:6	2584:6	15	=
LEAF_NODE	2584:6	2584:6	16	=
RVAL	2584:8	2584:8	15	* cp ++
UNARY_EXPR	2584:8	2584:9	16	* cp ++
UNARY_OPERATOR	2584:8	2584:8	17	*
LEAF_NODE	2584:8	2584:8	18	*
FIELD	2584:9	2584:11	17	cp ++
LEAF_NODE	2584:9	2584:9	18	cp
LEAF_NODE	2584:11	2584:11	18	++
LEAF_NODE	2584:13	2584:13	13	;
EXPR_STATEMENT	2584:15	2584:31	12	PUTRGBHEX ( c , fd ) ;
EXPR	2584:15	2584:15	13	PUTRGBHEX ( c , fd )
FUNCTION_CALL	2584:15	2584:30	14	PUTRGBHEX ( c , fd )
CALLEE	2584:15	2584:15	15	PUTRGBHEX
LEAF_NODE	2584:15	2584:15	16	PUTRGBHEX
LEAF_NODE	2584:24	2584:24	15	(
ARGUMENT	2584:25	2584:25	15	c
FIELD	2584:25	2584:25	16	c
LEAF_NODE	2584:25	2584:25	17	c
LEAF_NODE	2584:26	2584:26	15	,
ARGUMENT	2584:28	2584:28	15	fd
FIELD	2584:28	2584:28	16	fd
LEAF_NODE	2584:28	2584:28	17	fd
LEAF_NODE	2584:30	2584:30	15	)
LEAF_NODE	2584:31	2584:31	13	;
JUMP_STATEMENT	2585:4	2585:9	12	break DESTINATION ;
KEYWORD	2585:4	2585:4	13	break
LEAF_NODE	2585:4	2585:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2585:9	2585:9	13	;
LABEL	2586:3	2586:9	12	case 4 :
LEAF_NODE	2586:3	2586:3	13	case
LEAF_NODE	2586:8	2586:8	13	4
LEAF_NODE	2586:9	2586:9	13	:
EXPR_STATEMENT	2587:4	2587:13	12	c = * cp ++ ;
EXPR	2587:4	2587:4	13	c = * cp ++
ASSIGN	2587:4	2587:8	14	c = * cp ++
LVAL	2587:4	2587:4	15	c
FIELD	2587:4	2587:4	16	c
LEAF_NODE	2587:4	2587:4	17	c
ASSIGN_OP	2587:6	2587:6	15	=
LEAF_NODE	2587:6	2587:6	16	=
RVAL	2587:8	2587:8	15	* cp ++
UNARY_EXPR	2587:8	2587:9	16	* cp ++
UNARY_OPERATOR	2587:8	2587:8	17	*
LEAF_NODE	2587:8	2587:8	18	*
FIELD	2587:9	2587:11	17	cp ++
LEAF_NODE	2587:9	2587:9	18	cp
LEAF_NODE	2587:11	2587:11	18	++
LEAF_NODE	2587:13	2587:13	13	;
EXPR_STATEMENT	2587:15	2587:35	12	PUTRGBHEX ( c & 0xf , fd ) ;
EXPR	2587:15	2587:15	13	PUTRGBHEX ( c & 0xf , fd )
FUNCTION_CALL	2587:15	2587:34	14	PUTRGBHEX ( c & 0xf , fd )
CALLEE	2587:15	2587:15	15	PUTRGBHEX
LEAF_NODE	2587:15	2587:15	16	PUTRGBHEX
LEAF_NODE	2587:24	2587:24	15	(
ARGUMENT	2587:25	2587:27	15	c & 0xf
FIELD	2587:25	2587:25	16	c
LEAF_NODE	2587:25	2587:25	17	c
LEAF_NODE	2587:26	2587:26	16	&
FIELD	2587:27	2587:27	16	0xf
LEAF_NODE	2587:27	2587:27	17	0xf
LEAF_NODE	2587:30	2587:30	15	,
ARGUMENT	2587:32	2587:32	15	fd
FIELD	2587:32	2587:32	16	fd
LEAF_NODE	2587:32	2587:32	17	fd
LEAF_NODE	2587:34	2587:34	15	)
LEAF_NODE	2587:35	2587:35	13	;
EXPR_STATEMENT	2588:4	2588:11	12	c >>= 4 ;
EXPR	2588:4	2588:4	13	c >>= 4
ASSIGN	2588:4	2588:10	14	c >>= 4
LVAL	2588:4	2588:4	15	c
FIELD	2588:4	2588:4	16	c
LEAF_NODE	2588:4	2588:4	17	c
ASSIGN_OP	2588:6	2588:6	15	>>=
LEAF_NODE	2588:6	2588:6	16	>>=
RVAL	2588:10	2588:10	15	4
FIELD	2588:10	2588:10	16	4
LEAF_NODE	2588:10	2588:10	17	4
LEAF_NODE	2588:11	2588:11	13	;
EXPR_STATEMENT	2588:15	2588:31	12	PUTRGBHEX ( c , fd ) ;
EXPR	2588:15	2588:15	13	PUTRGBHEX ( c , fd )
FUNCTION_CALL	2588:15	2588:30	14	PUTRGBHEX ( c , fd )
CALLEE	2588:15	2588:15	15	PUTRGBHEX
LEAF_NODE	2588:15	2588:15	16	PUTRGBHEX
LEAF_NODE	2588:24	2588:24	15	(
ARGUMENT	2588:25	2588:25	15	c
FIELD	2588:25	2588:25	16	c
LEAF_NODE	2588:25	2588:25	17	c
LEAF_NODE	2588:26	2588:26	15	,
ARGUMENT	2588:28	2588:28	15	fd
FIELD	2588:28	2588:28	16	fd
LEAF_NODE	2588:28	2588:28	17	fd
LEAF_NODE	2588:30	2588:30	15	)
LEAF_NODE	2588:31	2588:31	13	;
JUMP_STATEMENT	2589:4	2589:9	12	break DESTINATION ;
KEYWORD	2589:4	2589:4	13	break
LEAF_NODE	2589:4	2589:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2589:9	2589:9	13	;
LABEL	2590:3	2590:9	12	case 2 :
LEAF_NODE	2590:3	2590:3	13	case
LEAF_NODE	2590:8	2590:8	13	2
LEAF_NODE	2590:9	2590:9	13	:
EXPR_STATEMENT	2591:4	2591:13	12	c = * cp ++ ;
EXPR	2591:4	2591:4	13	c = * cp ++
ASSIGN	2591:4	2591:8	14	c = * cp ++
LVAL	2591:4	2591:4	15	c
FIELD	2591:4	2591:4	16	c
LEAF_NODE	2591:4	2591:4	17	c
ASSIGN_OP	2591:6	2591:6	15	=
LEAF_NODE	2591:6	2591:6	16	=
RVAL	2591:8	2591:8	15	* cp ++
UNARY_EXPR	2591:8	2591:9	16	* cp ++
UNARY_OPERATOR	2591:8	2591:8	17	*
LEAF_NODE	2591:8	2591:8	18	*
FIELD	2591:9	2591:11	17	cp ++
LEAF_NODE	2591:9	2591:9	18	cp
LEAF_NODE	2591:11	2591:11	18	++
LEAF_NODE	2591:13	2591:13	13	;
EXPR_STATEMENT	2591:15	2591:35	12	PUTRGBHEX ( c & 0x3 , fd ) ;
EXPR	2591:15	2591:15	13	PUTRGBHEX ( c & 0x3 , fd )
FUNCTION_CALL	2591:15	2591:34	14	PUTRGBHEX ( c & 0x3 , fd )
CALLEE	2591:15	2591:15	15	PUTRGBHEX
LEAF_NODE	2591:15	2591:15	16	PUTRGBHEX
LEAF_NODE	2591:24	2591:24	15	(
ARGUMENT	2591:25	2591:27	15	c & 0x3
FIELD	2591:25	2591:25	16	c
LEAF_NODE	2591:25	2591:25	17	c
LEAF_NODE	2591:26	2591:26	16	&
FIELD	2591:27	2591:27	16	0x3
LEAF_NODE	2591:27	2591:27	17	0x3
LEAF_NODE	2591:30	2591:30	15	,
ARGUMENT	2591:32	2591:32	15	fd
FIELD	2591:32	2591:32	16	fd
LEAF_NODE	2591:32	2591:32	17	fd
LEAF_NODE	2591:34	2591:34	15	)
LEAF_NODE	2591:35	2591:35	13	;
EXPR_STATEMENT	2592:4	2592:11	12	c >>= 2 ;
EXPR	2592:4	2592:4	13	c >>= 2
ASSIGN	2592:4	2592:10	14	c >>= 2
LVAL	2592:4	2592:4	15	c
FIELD	2592:4	2592:4	16	c
LEAF_NODE	2592:4	2592:4	17	c
ASSIGN_OP	2592:6	2592:6	15	>>=
LEAF_NODE	2592:6	2592:6	16	>>=
RVAL	2592:10	2592:10	15	2
FIELD	2592:10	2592:10	16	2
LEAF_NODE	2592:10	2592:10	17	2
LEAF_NODE	2592:11	2592:11	13	;
EXPR_STATEMENT	2592:15	2592:35	12	PUTRGBHEX ( c & 0x3 , fd ) ;
EXPR	2592:15	2592:15	13	PUTRGBHEX ( c & 0x3 , fd )
FUNCTION_CALL	2592:15	2592:34	14	PUTRGBHEX ( c & 0x3 , fd )
CALLEE	2592:15	2592:15	15	PUTRGBHEX
LEAF_NODE	2592:15	2592:15	16	PUTRGBHEX
LEAF_NODE	2592:24	2592:24	15	(
ARGUMENT	2592:25	2592:27	15	c & 0x3
FIELD	2592:25	2592:25	16	c
LEAF_NODE	2592:25	2592:25	17	c
LEAF_NODE	2592:26	2592:26	16	&
FIELD	2592:27	2592:27	16	0x3
LEAF_NODE	2592:27	2592:27	17	0x3
LEAF_NODE	2592:30	2592:30	15	,
ARGUMENT	2592:32	2592:32	15	fd
FIELD	2592:32	2592:32	16	fd
LEAF_NODE	2592:32	2592:32	17	fd
LEAF_NODE	2592:34	2592:34	15	)
LEAF_NODE	2592:35	2592:35	13	;
EXPR_STATEMENT	2593:4	2593:11	12	c >>= 2 ;
EXPR	2593:4	2593:4	13	c >>= 2
ASSIGN	2593:4	2593:10	14	c >>= 2
LVAL	2593:4	2593:4	15	c
FIELD	2593:4	2593:4	16	c
LEAF_NODE	2593:4	2593:4	17	c
ASSIGN_OP	2593:6	2593:6	15	>>=
LEAF_NODE	2593:6	2593:6	16	>>=
RVAL	2593:10	2593:10	15	2
FIELD	2593:10	2593:10	16	2
LEAF_NODE	2593:10	2593:10	17	2
LEAF_NODE	2593:11	2593:11	13	;
EXPR_STATEMENT	2593:15	2593:35	12	PUTRGBHEX ( c & 0x3 , fd ) ;
EXPR	2593:15	2593:15	13	PUTRGBHEX ( c & 0x3 , fd )
FUNCTION_CALL	2593:15	2593:34	14	PUTRGBHEX ( c & 0x3 , fd )
CALLEE	2593:15	2593:15	15	PUTRGBHEX
LEAF_NODE	2593:15	2593:15	16	PUTRGBHEX
LEAF_NODE	2593:24	2593:24	15	(
ARGUMENT	2593:25	2593:27	15	c & 0x3
FIELD	2593:25	2593:25	16	c
LEAF_NODE	2593:25	2593:25	17	c
LEAF_NODE	2593:26	2593:26	16	&
FIELD	2593:27	2593:27	16	0x3
LEAF_NODE	2593:27	2593:27	17	0x3
LEAF_NODE	2593:30	2593:30	15	,
ARGUMENT	2593:32	2593:32	15	fd
FIELD	2593:32	2593:32	16	fd
LEAF_NODE	2593:32	2593:32	17	fd
LEAF_NODE	2593:34	2593:34	15	)
LEAF_NODE	2593:35	2593:35	13	;
EXPR_STATEMENT	2594:4	2594:11	12	c >>= 2 ;
EXPR	2594:4	2594:4	13	c >>= 2
ASSIGN	2594:4	2594:10	14	c >>= 2
LVAL	2594:4	2594:4	15	c
FIELD	2594:4	2594:4	16	c
LEAF_NODE	2594:4	2594:4	17	c
ASSIGN_OP	2594:6	2594:6	15	>>=
LEAF_NODE	2594:6	2594:6	16	>>=
RVAL	2594:10	2594:10	15	2
FIELD	2594:10	2594:10	16	2
LEAF_NODE	2594:10	2594:10	17	2
LEAF_NODE	2594:11	2594:11	13	;
EXPR_STATEMENT	2594:15	2594:31	12	PUTRGBHEX ( c , fd ) ;
EXPR	2594:15	2594:15	13	PUTRGBHEX ( c , fd )
FUNCTION_CALL	2594:15	2594:30	14	PUTRGBHEX ( c , fd )
CALLEE	2594:15	2594:15	15	PUTRGBHEX
LEAF_NODE	2594:15	2594:15	16	PUTRGBHEX
LEAF_NODE	2594:24	2594:24	15	(
ARGUMENT	2594:25	2594:25	15	c
FIELD	2594:25	2594:25	16	c
LEAF_NODE	2594:25	2594:25	17	c
LEAF_NODE	2594:26	2594:26	15	,
ARGUMENT	2594:28	2594:28	15	fd
FIELD	2594:28	2594:28	16	fd
LEAF_NODE	2594:28	2594:28	17	fd
LEAF_NODE	2594:30	2594:30	15	)
LEAF_NODE	2594:31	2594:31	13	;
JUMP_STATEMENT	2595:4	2595:9	12	break DESTINATION ;
KEYWORD	2595:4	2595:4	13	break
LEAF_NODE	2595:4	2595:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2595:9	2595:9	13	;
LABEL	2596:3	2596:9	12	case 1 :
LEAF_NODE	2596:3	2596:3	13	case
LEAF_NODE	2596:8	2596:8	13	1
LEAF_NODE	2596:9	2596:9	13	:
EXPR_STATEMENT	2597:4	2597:13	12	c = * cp ++ ;
EXPR	2597:4	2597:4	13	c = * cp ++
ASSIGN	2597:4	2597:8	14	c = * cp ++
LVAL	2597:4	2597:4	15	c
FIELD	2597:4	2597:4	16	c
LEAF_NODE	2597:4	2597:4	17	c
ASSIGN_OP	2597:6	2597:6	15	=
LEAF_NODE	2597:6	2597:6	16	=
RVAL	2597:8	2597:8	15	* cp ++
UNARY_EXPR	2597:8	2597:9	16	* cp ++
UNARY_OPERATOR	2597:8	2597:8	17	*
LEAF_NODE	2597:8	2597:8	18	*
FIELD	2597:9	2597:11	17	cp ++
LEAF_NODE	2597:9	2597:9	18	cp
LEAF_NODE	2597:11	2597:11	18	++
LEAF_NODE	2597:13	2597:13	13	;
EXPR_STATEMENT	2597:15	2597:35	12	PUTRGBHEX ( c & 0x1 , fd ) ;
EXPR	2597:15	2597:15	13	PUTRGBHEX ( c & 0x1 , fd )
FUNCTION_CALL	2597:15	2597:34	14	PUTRGBHEX ( c & 0x1 , fd )
CALLEE	2597:15	2597:15	15	PUTRGBHEX
LEAF_NODE	2597:15	2597:15	16	PUTRGBHEX
LEAF_NODE	2597:24	2597:24	15	(
ARGUMENT	2597:25	2597:27	15	c & 0x1
FIELD	2597:25	2597:25	16	c
LEAF_NODE	2597:25	2597:25	17	c
LEAF_NODE	2597:26	2597:26	16	&
FIELD	2597:27	2597:27	16	0x1
LEAF_NODE	2597:27	2597:27	17	0x1
LEAF_NODE	2597:30	2597:30	15	,
ARGUMENT	2597:32	2597:32	15	fd
FIELD	2597:32	2597:32	16	fd
LEAF_NODE	2597:32	2597:32	17	fd
LEAF_NODE	2597:34	2597:34	15	)
LEAF_NODE	2597:35	2597:35	13	;
EXPR_STATEMENT	2598:4	2598:11	12	c >>= 1 ;
EXPR	2598:4	2598:4	13	c >>= 1
ASSIGN	2598:4	2598:10	14	c >>= 1
LVAL	2598:4	2598:4	15	c
FIELD	2598:4	2598:4	16	c
LEAF_NODE	2598:4	2598:4	17	c
ASSIGN_OP	2598:6	2598:6	15	>>=
LEAF_NODE	2598:6	2598:6	16	>>=
RVAL	2598:10	2598:10	15	1
FIELD	2598:10	2598:10	16	1
LEAF_NODE	2598:10	2598:10	17	1
LEAF_NODE	2598:11	2598:11	13	;
EXPR_STATEMENT	2598:15	2598:35	12	PUTRGBHEX ( c & 0x1 , fd ) ;
EXPR	2598:15	2598:15	13	PUTRGBHEX ( c & 0x1 , fd )
FUNCTION_CALL	2598:15	2598:34	14	PUTRGBHEX ( c & 0x1 , fd )
CALLEE	2598:15	2598:15	15	PUTRGBHEX
LEAF_NODE	2598:15	2598:15	16	PUTRGBHEX
LEAF_NODE	2598:24	2598:24	15	(
ARGUMENT	2598:25	2598:27	15	c & 0x1
FIELD	2598:25	2598:25	16	c
LEAF_NODE	2598:25	2598:25	17	c
LEAF_NODE	2598:26	2598:26	16	&
FIELD	2598:27	2598:27	16	0x1
LEAF_NODE	2598:27	2598:27	17	0x1
LEAF_NODE	2598:30	2598:30	15	,
ARGUMENT	2598:32	2598:32	15	fd
FIELD	2598:32	2598:32	16	fd
LEAF_NODE	2598:32	2598:32	17	fd
LEAF_NODE	2598:34	2598:34	15	)
LEAF_NODE	2598:35	2598:35	13	;
EXPR_STATEMENT	2599:4	2599:11	12	c >>= 1 ;
EXPR	2599:4	2599:4	13	c >>= 1
ASSIGN	2599:4	2599:10	14	c >>= 1
LVAL	2599:4	2599:4	15	c
FIELD	2599:4	2599:4	16	c
LEAF_NODE	2599:4	2599:4	17	c
ASSIGN_OP	2599:6	2599:6	15	>>=
LEAF_NODE	2599:6	2599:6	16	>>=
RVAL	2599:10	2599:10	15	1
FIELD	2599:10	2599:10	16	1
LEAF_NODE	2599:10	2599:10	17	1
LEAF_NODE	2599:11	2599:11	13	;
EXPR_STATEMENT	2599:15	2599:35	12	PUTRGBHEX ( c & 0x1 , fd ) ;
EXPR	2599:15	2599:15	13	PUTRGBHEX ( c & 0x1 , fd )
FUNCTION_CALL	2599:15	2599:34	14	PUTRGBHEX ( c & 0x1 , fd )
CALLEE	2599:15	2599:15	15	PUTRGBHEX
LEAF_NODE	2599:15	2599:15	16	PUTRGBHEX
LEAF_NODE	2599:24	2599:24	15	(
ARGUMENT	2599:25	2599:27	15	c & 0x1
FIELD	2599:25	2599:25	16	c
LEAF_NODE	2599:25	2599:25	17	c
LEAF_NODE	2599:26	2599:26	16	&
FIELD	2599:27	2599:27	16	0x1
LEAF_NODE	2599:27	2599:27	17	0x1
LEAF_NODE	2599:30	2599:30	15	,
ARGUMENT	2599:32	2599:32	15	fd
FIELD	2599:32	2599:32	16	fd
LEAF_NODE	2599:32	2599:32	17	fd
LEAF_NODE	2599:34	2599:34	15	)
LEAF_NODE	2599:35	2599:35	13	;
EXPR_STATEMENT	2600:4	2600:11	12	c >>= 1 ;
EXPR	2600:4	2600:4	13	c >>= 1
ASSIGN	2600:4	2600:10	14	c >>= 1
LVAL	2600:4	2600:4	15	c
FIELD	2600:4	2600:4	16	c
LEAF_NODE	2600:4	2600:4	17	c
ASSIGN_OP	2600:6	2600:6	15	>>=
LEAF_NODE	2600:6	2600:6	16	>>=
RVAL	2600:10	2600:10	15	1
FIELD	2600:10	2600:10	16	1
LEAF_NODE	2600:10	2600:10	17	1
LEAF_NODE	2600:11	2600:11	13	;
EXPR_STATEMENT	2600:15	2600:35	12	PUTRGBHEX ( c & 0x1 , fd ) ;
EXPR	2600:15	2600:15	13	PUTRGBHEX ( c & 0x1 , fd )
FUNCTION_CALL	2600:15	2600:34	14	PUTRGBHEX ( c & 0x1 , fd )
CALLEE	2600:15	2600:15	15	PUTRGBHEX
LEAF_NODE	2600:15	2600:15	16	PUTRGBHEX
LEAF_NODE	2600:24	2600:24	15	(
ARGUMENT	2600:25	2600:27	15	c & 0x1
FIELD	2600:25	2600:25	16	c
LEAF_NODE	2600:25	2600:25	17	c
LEAF_NODE	2600:26	2600:26	16	&
FIELD	2600:27	2600:27	16	0x1
LEAF_NODE	2600:27	2600:27	17	0x1
LEAF_NODE	2600:30	2600:30	15	,
ARGUMENT	2600:32	2600:32	15	fd
FIELD	2600:32	2600:32	16	fd
LEAF_NODE	2600:32	2600:32	17	fd
LEAF_NODE	2600:34	2600:34	15	)
LEAF_NODE	2600:35	2600:35	13	;
EXPR_STATEMENT	2601:4	2601:11	12	c >>= 1 ;
EXPR	2601:4	2601:4	13	c >>= 1
ASSIGN	2601:4	2601:10	14	c >>= 1
LVAL	2601:4	2601:4	15	c
FIELD	2601:4	2601:4	16	c
LEAF_NODE	2601:4	2601:4	17	c
ASSIGN_OP	2601:6	2601:6	15	>>=
LEAF_NODE	2601:6	2601:6	16	>>=
RVAL	2601:10	2601:10	15	1
FIELD	2601:10	2601:10	16	1
LEAF_NODE	2601:10	2601:10	17	1
LEAF_NODE	2601:11	2601:11	13	;
EXPR_STATEMENT	2601:15	2601:35	12	PUTRGBHEX ( c & 0x1 , fd ) ;
EXPR	2601:15	2601:15	13	PUTRGBHEX ( c & 0x1 , fd )
FUNCTION_CALL	2601:15	2601:34	14	PUTRGBHEX ( c & 0x1 , fd )
CALLEE	2601:15	2601:15	15	PUTRGBHEX
LEAF_NODE	2601:15	2601:15	16	PUTRGBHEX
LEAF_NODE	2601:24	2601:24	15	(
ARGUMENT	2601:25	2601:27	15	c & 0x1
FIELD	2601:25	2601:25	16	c
LEAF_NODE	2601:25	2601:25	17	c
LEAF_NODE	2601:26	2601:26	16	&
FIELD	2601:27	2601:27	16	0x1
LEAF_NODE	2601:27	2601:27	17	0x1
LEAF_NODE	2601:30	2601:30	15	,
ARGUMENT	2601:32	2601:32	15	fd
FIELD	2601:32	2601:32	16	fd
LEAF_NODE	2601:32	2601:32	17	fd
LEAF_NODE	2601:34	2601:34	15	)
LEAF_NODE	2601:35	2601:35	13	;
EXPR_STATEMENT	2602:4	2602:11	12	c >>= 1 ;
EXPR	2602:4	2602:4	13	c >>= 1
ASSIGN	2602:4	2602:10	14	c >>= 1
LVAL	2602:4	2602:4	15	c
FIELD	2602:4	2602:4	16	c
LEAF_NODE	2602:4	2602:4	17	c
ASSIGN_OP	2602:6	2602:6	15	>>=
LEAF_NODE	2602:6	2602:6	16	>>=
RVAL	2602:10	2602:10	15	1
FIELD	2602:10	2602:10	16	1
LEAF_NODE	2602:10	2602:10	17	1
LEAF_NODE	2602:11	2602:11	13	;
EXPR_STATEMENT	2602:15	2602:35	12	PUTRGBHEX ( c & 0x1 , fd ) ;
EXPR	2602:15	2602:15	13	PUTRGBHEX ( c & 0x1 , fd )
FUNCTION_CALL	2602:15	2602:34	14	PUTRGBHEX ( c & 0x1 , fd )
CALLEE	2602:15	2602:15	15	PUTRGBHEX
LEAF_NODE	2602:15	2602:15	16	PUTRGBHEX
LEAF_NODE	2602:24	2602:24	15	(
ARGUMENT	2602:25	2602:27	15	c & 0x1
FIELD	2602:25	2602:25	16	c
LEAF_NODE	2602:25	2602:25	17	c
LEAF_NODE	2602:26	2602:26	16	&
FIELD	2602:27	2602:27	16	0x1
LEAF_NODE	2602:27	2602:27	17	0x1
LEAF_NODE	2602:30	2602:30	15	,
ARGUMENT	2602:32	2602:32	15	fd
FIELD	2602:32	2602:32	16	fd
LEAF_NODE	2602:32	2602:32	17	fd
LEAF_NODE	2602:34	2602:34	15	)
LEAF_NODE	2602:35	2602:35	13	;
EXPR_STATEMENT	2603:4	2603:11	12	c >>= 1 ;
EXPR	2603:4	2603:4	13	c >>= 1
ASSIGN	2603:4	2603:10	14	c >>= 1
LVAL	2603:4	2603:4	15	c
FIELD	2603:4	2603:4	16	c
LEAF_NODE	2603:4	2603:4	17	c
ASSIGN_OP	2603:6	2603:6	15	>>=
LEAF_NODE	2603:6	2603:6	16	>>=
RVAL	2603:10	2603:10	15	1
FIELD	2603:10	2603:10	16	1
LEAF_NODE	2603:10	2603:10	17	1
LEAF_NODE	2603:11	2603:11	13	;
EXPR_STATEMENT	2603:15	2603:35	12	PUTRGBHEX ( c & 0x1 , fd ) ;
EXPR	2603:15	2603:15	13	PUTRGBHEX ( c & 0x1 , fd )
FUNCTION_CALL	2603:15	2603:34	14	PUTRGBHEX ( c & 0x1 , fd )
CALLEE	2603:15	2603:15	15	PUTRGBHEX
LEAF_NODE	2603:15	2603:15	16	PUTRGBHEX
LEAF_NODE	2603:24	2603:24	15	(
ARGUMENT	2603:25	2603:27	15	c & 0x1
FIELD	2603:25	2603:25	16	c
LEAF_NODE	2603:25	2603:25	17	c
LEAF_NODE	2603:26	2603:26	16	&
FIELD	2603:27	2603:27	16	0x1
LEAF_NODE	2603:27	2603:27	17	0x1
LEAF_NODE	2603:30	2603:30	15	,
ARGUMENT	2603:32	2603:32	15	fd
FIELD	2603:32	2603:32	16	fd
LEAF_NODE	2603:32	2603:32	17	fd
LEAF_NODE	2603:34	2603:34	15	)
LEAF_NODE	2603:35	2603:35	13	;
EXPR_STATEMENT	2604:4	2604:11	12	c >>= 1 ;
EXPR	2604:4	2604:4	13	c >>= 1
ASSIGN	2604:4	2604:10	14	c >>= 1
LVAL	2604:4	2604:4	15	c
FIELD	2604:4	2604:4	16	c
LEAF_NODE	2604:4	2604:4	17	c
ASSIGN_OP	2604:6	2604:6	15	>>=
LEAF_NODE	2604:6	2604:6	16	>>=
RVAL	2604:10	2604:10	15	1
FIELD	2604:10	2604:10	16	1
LEAF_NODE	2604:10	2604:10	17	1
LEAF_NODE	2604:11	2604:11	13	;
EXPR_STATEMENT	2604:15	2604:31	12	PUTRGBHEX ( c , fd ) ;
EXPR	2604:15	2604:15	13	PUTRGBHEX ( c , fd )
FUNCTION_CALL	2604:15	2604:30	14	PUTRGBHEX ( c , fd )
CALLEE	2604:15	2604:15	15	PUTRGBHEX
LEAF_NODE	2604:15	2604:15	16	PUTRGBHEX
LEAF_NODE	2604:24	2604:24	15	(
ARGUMENT	2604:25	2604:25	15	c
FIELD	2604:25	2604:25	16	c
LEAF_NODE	2604:25	2604:25	17	c
LEAF_NODE	2604:26	2604:26	15	,
ARGUMENT	2604:28	2604:28	15	fd
FIELD	2604:28	2604:28	16	fd
LEAF_NODE	2604:28	2604:28	17	fd
LEAF_NODE	2604:30	2604:30	15	)
LEAF_NODE	2604:31	2604:31	13	;
JUMP_STATEMENT	2605:4	2605:9	12	break DESTINATION ;
KEYWORD	2605:4	2605:4	13	break
LEAF_NODE	2605:4	2605:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2605:9	2605:9	13	;
LEAF_NODE	2606:3	2606:3	11	}
LEAF_NODE	2607:2	2607:2	8	}
LEAF_NODE	2608:1	2608:1	5	}
EXPR_STATEMENT	2609:1	2609:27	3	_TIFFfree ( ( char * ) tf_buf ) ;
EXPR	2609:1	2609:1	4	_TIFFfree ( ( char * ) tf_buf )
FUNCTION_CALL	2609:1	2609:26	5	_TIFFfree ( ( char * ) tf_buf )
CALLEE	2609:1	2609:1	6	_TIFFfree
LEAF_NODE	2609:1	2609:1	7	_TIFFfree
LEAF_NODE	2609:10	2609:10	6	(
ARGUMENT	2609:11	2609:20	6	( char * ) tf_buf
LEAF_NODE	2609:11	2609:11	7	(
TYPE_NAME	2609:12	2609:12	7	char
LEAF_NODE	2609:12	2609:12	8	char
LEAF_NODE	2609:17	2609:17	7	*
LEAF_NODE	2609:18	2609:18	7	)
FIELD	2609:20	2609:20	7	tf_buf
LEAF_NODE	2609:20	2609:20	8	tf_buf
LEAF_NODE	2609:26	2609:26	6	)
LEAF_NODE	2609:27	2609:27	4	;
LEAF_NODE	2610:0	2610:0	2	}
FUNCTION_DEF	2612:0	2740:0	1	
RETURN_TYPE	2612:0	2612:0	2	void
TYPE_NAME	2612:0	2612:0	3	void
LEAF_NODE	2612:0	2612:0	4	void
FUNCTION_NAME	2613:0	2613:0	2	PSDataBW
LEAF_NODE	2613:0	2613:0	3	PSDataBW
PARAMETER_LIST	2613:8	2613:48	2	( FILE * fd , TIFF * tif , uint32 w , uint32 h )
LEAF_NODE	2613:8	2613:8	3	(
PARAMETER_DECL	2613:9	2613:15	3	FILE * fd
TYPE	2613:9	2613:13	4	FILE *
TYPE_NAME	2613:9	2613:9	5	FILE
LEAF_NODE	2613:9	2613:9	6	FILE
POINTER	2613:13	2613:13	5	*
LEAF_NODE	2613:13	2613:13	6	*
NAME	2613:15	2613:15	4	fd
LEAF_NODE	2613:15	2613:15	5	fd
LEAF_NODE	2613:17	2613:17	3	,
PARAMETER_DECL	2613:19	2613:25	3	TIFF * tif
TYPE	2613:19	2613:23	4	TIFF *
TYPE_NAME	2613:19	2613:19	5	TIFF
LEAF_NODE	2613:19	2613:19	6	TIFF
POINTER	2613:23	2613:23	5	*
LEAF_NODE	2613:23	2613:23	6	*
NAME	2613:25	2613:25	4	tif
LEAF_NODE	2613:25	2613:25	5	tif
LEAF_NODE	2613:28	2613:28	3	,
PARAMETER_DECL	2613:30	2613:37	3	uint32 w
TYPE	2613:30	2613:30	4	uint32
TYPE_NAME	2613:30	2613:30	5	uint32
LEAF_NODE	2613:30	2613:30	6	uint32
NAME	2613:37	2613:37	4	w
LEAF_NODE	2613:37	2613:37	5	w
LEAF_NODE	2613:38	2613:38	3	,
PARAMETER_DECL	2613:40	2613:47	3	uint32 h
TYPE	2613:40	2613:40	4	uint32
TYPE_NAME	2613:40	2613:40	5	uint32
LEAF_NODE	2613:40	2613:40	6	uint32
NAME	2613:47	2613:47	4	h
LEAF_NODE	2613:47	2613:47	5	h
LEAF_NODE	2613:48	2613:48	3	)
LEAF_NODE	2614:0	2614:0	2	{
STATEMENTS	2615:1	2739:1	2	
SIMPLE_DECL	2615:1	2615:23	3	int breaklen ; breaklen = MAXLINE ;
VAR_DECL	2615:1	2615:5	4	int breaklen ; breaklen = MAXLINE
TYPE	2615:1	2615:1	5	int
TYPE_NAME	2615:1	2615:1	6	int
LEAF_NODE	2615:1	2615:1	7	int
NAME	2615:5	2615:5	5	breaklen
LEAF_NODE	2615:5	2615:5	6	breaklen
LEAF_NODE	0:0	0:0	5	;
INIT	2615:5	2615:5	5	breaklen = MAXLINE
ASSIGN	2615:5	2615:16	6	breaklen = MAXLINE
LVAL	2615:5	2615:5	7	breaklen
NAME	2615:5	2615:5	8	breaklen
LEAF_NODE	2615:5	2615:5	9	breaklen
ASSIGN_OP	2615:14	2615:14	7	=
LEAF_NODE	2615:14	2615:14	8	=
RVAL	2615:16	2615:16	7	MAXLINE
FIELD	2615:16	2615:16	8	MAXLINE
LEAF_NODE	2615:16	2615:16	9	MAXLINE
LEAF_NODE	2615:23	2615:23	4	;
SIMPLE_DECL	2616:1	2616:22	3	unsigned char * tf_buf ;
VAR_DECL	2616:1	2616:16	4	unsigned char * tf_buf
TYPE	2616:1	2616:14	5	unsigned char *
TYPE_NAME	2616:1	2616:10	6	unsigned char
LEAF_NODE	2616:1	2616:1	7	unsigned
LEAF_NODE	2616:10	2616:10	7	char
POINTER	2616:14	2616:14	6	*
LEAF_NODE	2616:14	2616:14	7	*
NAME	2616:16	2616:16	5	tf_buf
LEAF_NODE	2616:16	2616:16	6	tf_buf
LEAF_NODE	2616:22	2616:22	4	;
SIMPLE_DECL	2617:1	2617:18	3	unsigned char * cp ;
VAR_DECL	2617:1	2617:16	4	unsigned char * cp
TYPE	2617:1	2617:14	5	unsigned char *
TYPE_NAME	2617:1	2617:10	6	unsigned char
LEAF_NODE	2617:1	2617:1	7	unsigned
LEAF_NODE	2617:10	2617:10	7	char
POINTER	2617:14	2617:14	6	*
LEAF_NODE	2617:14	2617:14	7	*
NAME	2617:16	2617:16	5	cp
LEAF_NODE	2617:16	2617:16	6	cp
LEAF_NODE	2617:18	2617:18	4	;
SIMPLE_DECL	2618:1	2618:39	3	tsize_t stripsize ; stripsize = TIFFStripSize ( tif ) ;
VAR_DECL	2618:1	2618:9	4	tsize_t stripsize ; stripsize = TIFFStripSize ( tif )
TYPE	2618:1	2618:1	5	tsize_t
TYPE_NAME	2618:1	2618:1	6	tsize_t
LEAF_NODE	2618:1	2618:1	7	tsize_t
NAME	2618:9	2618:9	5	stripsize
LEAF_NODE	2618:9	2618:9	6	stripsize
LEAF_NODE	0:0	0:0	5	;
INIT	2618:9	2618:9	5	stripsize = TIFFStripSize ( tif )
ASSIGN	2618:9	2618:21	6	stripsize = TIFFStripSize ( tif )
LVAL	2618:9	2618:9	7	stripsize
NAME	2618:9	2618:9	8	stripsize
LEAF_NODE	2618:9	2618:9	9	stripsize
ASSIGN_OP	2618:19	2618:19	7	=
LEAF_NODE	2618:19	2618:19	8	=
RVAL	2618:21	2618:21	7	TIFFStripSize ( tif )
FUNCTION_CALL	2618:21	2618:38	8	TIFFStripSize ( tif )
CALLEE	2618:21	2618:21	9	TIFFStripSize
LEAF_NODE	2618:21	2618:21	10	TIFFStripSize
LEAF_NODE	2618:34	2618:34	9	(
ARGUMENT	2618:35	2618:35	9	tif
FIELD	2618:35	2618:35	10	tif
LEAF_NODE	2618:35	2618:35	11	tif
LEAF_NODE	2618:38	2618:38	9	)
LEAF_NODE	2618:39	2618:39	4	;
SIMPLE_DECL	2619:1	2619:11	3	tstrip_t s ;
VAR_DECL	2619:1	2619:10	4	tstrip_t s
TYPE	2619:1	2619:1	5	tstrip_t
TYPE_NAME	2619:1	2619:1	6	tstrip_t
LEAF_NODE	2619:1	2619:1	7	tstrip_t
NAME	2619:10	2619:10	5	s
LEAF_NODE	2619:10	2619:10	6	s
LEAF_NODE	2619:11	2619:11	4	;
SIMPLE_DECL	2622:1	2622:18	3	tsize_t ascii85_l ;
VAR_DECL	2622:1	2622:9	4	tsize_t ascii85_l
TYPE	2622:1	2622:1	5	tsize_t
TYPE_NAME	2622:1	2622:1	6	tsize_t
LEAF_NODE	2622:1	2622:1	7	tsize_t
NAME	2622:9	2622:9	5	ascii85_l
LEAF_NODE	2622:9	2622:9	6	ascii85_l
LEAF_NODE	2622:18	2622:18	4	;
SIMPLE_DECL	2623:1	2623:21	3	uint8 * ascii85_p ; ascii85_p = 0 ;
VAR_DECL	2623:1	2623:8	4	uint8 * ascii85_p ; ascii85_p = 0
TYPE	2623:1	2623:7	5	uint8 *
TYPE_NAME	2623:1	2623:1	6	uint8
LEAF_NODE	2623:1	2623:1	7	uint8
POINTER	2623:7	2623:7	6	*
LEAF_NODE	2623:7	2623:7	7	*
NAME	2623:8	2623:8	5	ascii85_p
LEAF_NODE	2623:8	2623:8	6	ascii85_p
LEAF_NODE	0:0	0:0	5	;
INIT	2623:8	2623:8	5	ascii85_p = 0
ASSIGN	2623:8	2623:20	6	ascii85_p = 0
LVAL	2623:8	2623:8	7	ascii85_p
NAME	2623:8	2623:8	8	ascii85_p
LEAF_NODE	2623:8	2623:8	9	ascii85_p
ASSIGN_OP	2623:18	2623:18	7	=
LEAF_NODE	2623:18	2623:18	8	=
RVAL	2623:20	2623:20	7	0
FIELD	2623:20	2623:20	8	0
LEAF_NODE	2623:20	2623:20	9	0
LEAF_NODE	2623:21	2623:21	4	;
EXPR_STATEMENT	2626:1	2626:9	3	( void ) w ;
EXPR	2626:1	2626:8	4	( void ) w
LEAF_NODE	2626:1	2626:1	5	(
TYPE_NAME	2626:2	2626:2	5	void
LEAF_NODE	2626:2	2626:2	6	void
LEAF_NODE	2626:6	2626:6	5	)
FIELD	2626:8	2626:8	5	w
LEAF_NODE	2626:8	2626:8	6	w
LEAF_NODE	2626:9	2626:9	4	;
EXPR_STATEMENT	2626:11	2626:19	3	( void ) h ;
EXPR	2626:11	2626:18	4	( void ) h
LEAF_NODE	2626:11	2626:11	5	(
TYPE_NAME	2626:12	2626:12	5	void
LEAF_NODE	2626:12	2626:12	6	void
LEAF_NODE	2626:16	2626:16	5	)
FIELD	2626:18	2626:18	5	h
LEAF_NODE	2626:18	2626:18	6	h
LEAF_NODE	2626:19	2626:19	4	;
EXPR_STATEMENT	2627:1	2627:50	3	tf_buf = ( unsigned char * ) _TIFFmalloc ( stripsize ) ;
EXPR	2627:1	2627:1	4	tf_buf = ( unsigned char * ) _TIFFmalloc ( stripsize )
ASSIGN	2627:1	2627:10	5	tf_buf = ( unsigned char * ) _TIFFmalloc ( stripsize )
LVAL	2627:1	2627:1	6	tf_buf
FIELD	2627:1	2627:1	7	tf_buf
LEAF_NODE	2627:1	2627:1	8	tf_buf
ASSIGN_OP	2627:8	2627:8	6	=
LEAF_NODE	2627:8	2627:8	7	=
RVAL	2627:10	2627:28	6	( unsigned char * ) _TIFFmalloc ( stripsize )
LEAF_NODE	2627:10	2627:10	7	(
TYPE_NAME	2627:11	2627:20	7	unsigned char
LEAF_NODE	2627:11	2627:11	8	unsigned
LEAF_NODE	2627:20	2627:20	8	char
LEAF_NODE	2627:25	2627:25	7	*
LEAF_NODE	2627:26	2627:26	7	)
FUNCTION_CALL	2627:28	2627:49	7	_TIFFmalloc ( stripsize )
CALLEE	2627:28	2627:28	8	_TIFFmalloc
LEAF_NODE	2627:28	2627:28	9	_TIFFmalloc
LEAF_NODE	2627:39	2627:39	8	(
ARGUMENT	2627:40	2627:40	8	stripsize
FIELD	2627:40	2627:40	9	stripsize
LEAF_NODE	2627:40	2627:40	10	stripsize
LEAF_NODE	2627:49	2627:49	8	)
LEAF_NODE	2627:50	2627:50	4	;
SELECTION	2628:1	2628:21	3	
KEYWORD	2628:1	2628:1	4	if
LEAF_NODE	2628:1	2628:1	5	if
LEAF_NODE	2628:4	2628:4	4	(
CONDITION	2628:5	2628:5	4	tf_buf == NULL
EXPR	2628:5	2628:15	5	tf_buf == NULL
FIELD	2628:5	2628:5	6	tf_buf
LEAF_NODE	2628:5	2628:5	7	tf_buf
EQ_OPERATOR	2628:12	2628:12	6	==
LEAF_NODE	2628:12	2628:12	7	==
FIELD	2628:15	2628:15	6	NULL
LEAF_NODE	2628:15	2628:15	7	NULL
LEAF_NODE	2628:19	2628:19	4	)
STATEMENTS	2628:21	2631:1	4	
LEAF_NODE	2628:21	2628:21	5	{
STATEMENTS	2629:2	2630:2	5	
EXPR_STATEMENT	2629:2	2629:53	6	TIFFError ( filename , "No space for scanline buffer" ) ;
EXPR	2629:2	2629:2	7	TIFFError ( filename , "No space for scanline buffer" )
FUNCTION_CALL	2629:2	2629:52	8	TIFFError ( filename , "No space for scanline buffer" )
CALLEE	2629:2	2629:2	9	TIFFError
LEAF_NODE	2629:2	2629:2	10	TIFFError
LEAF_NODE	2629:11	2629:11	9	(
ARGUMENT	2629:12	2629:12	9	filename
FIELD	2629:12	2629:12	10	filename
LEAF_NODE	2629:12	2629:12	11	filename
LEAF_NODE	2629:20	2629:20	9	,
ARGUMENT	2629:22	2629:22	9	"No space for scanline buffer"
FIELD	2629:22	2629:22	10	"No space for scanline buffer"
LEAF_NODE	2629:22	2629:22	11	"No space for scanline buffer"
LEAF_NODE	2629:52	2629:52	9	)
LEAF_NODE	2629:53	2629:53	7	;
JUMP_STATEMENT	2630:2	2630:8	6	return DESTINATION ;
KEYWORD	2630:2	2630:2	7	return
LEAF_NODE	2630:2	2630:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2630:8	2630:8	7	;
LEAF_NODE	2631:1	2631:1	5	}
EXPR_STATEMENT	2634:1	2634:29	3	memset ( tf_buf , 0 , stripsize ) ;
EXPR	2634:1	2634:1	4	memset ( tf_buf , 0 , stripsize )
FUNCTION_CALL	2634:1	2634:28	5	memset ( tf_buf , 0 , stripsize )
CALLEE	2634:1	2634:1	6	memset
LEAF_NODE	2634:1	2634:1	7	memset
LEAF_NODE	2634:7	2634:7	6	(
ARGUMENT	2634:8	2634:8	6	tf_buf
FIELD	2634:8	2634:8	7	tf_buf
LEAF_NODE	2634:8	2634:8	8	tf_buf
LEAF_NODE	2634:14	2634:14	6	,
ARGUMENT	2634:16	2634:16	6	0
FIELD	2634:16	2634:16	7	0
LEAF_NODE	2634:16	2634:16	8	0
LEAF_NODE	2634:17	2634:17	6	,
ARGUMENT	2634:19	2634:19	6	stripsize
FIELD	2634:19	2634:19	7	stripsize
LEAF_NODE	2634:19	2634:19	8	stripsize
LEAF_NODE	2634:28	2634:28	6	)
LEAF_NODE	2634:29	2634:29	4	;
SELECTION	2637:1	2637:16	3	
KEYWORD	2637:1	2637:1	4	if
LEAF_NODE	2637:1	2637:1	5	if
LEAF_NODE	2637:4	2637:4	4	(
CONDITION	2637:6	2637:6	4	ascii85
EXPR	2637:6	2637:6	5	ascii85
FIELD	2637:6	2637:6	6	ascii85
LEAF_NODE	2637:6	2637:6	7	ascii85
LEAF_NODE	2637:14	2637:14	4	)
STATEMENTS	2637:16	2655:1	4	
LEAF_NODE	2637:16	2637:16	5	{
STATEMENTS	2647:5	2649:5	5	
EXPR_STATEMENT	2647:5	2647:61	6	ascii85_p = _TIFFmalloc ( ( stripsize + ( stripsize / 2 ) ) + 8 ) ;
EXPR	2647:5	2647:5	7	ascii85_p = _TIFFmalloc ( ( stripsize + ( stripsize / 2 ) ) + 8 )
ASSIGN	2647:5	2647:17	8	ascii85_p = _TIFFmalloc ( ( stripsize + ( stripsize / 2 ) ) + 8 )
LVAL	2647:5	2647:5	9	ascii85_p
FIELD	2647:5	2647:5	10	ascii85_p
LEAF_NODE	2647:5	2647:5	11	ascii85_p
ASSIGN_OP	2647:15	2647:15	9	=
LEAF_NODE	2647:15	2647:15	10	=
RVAL	2647:17	2647:17	9	_TIFFmalloc ( ( stripsize + ( stripsize / 2 ) ) + 8 )
FUNCTION_CALL	2647:17	2647:60	10	_TIFFmalloc ( ( stripsize + ( stripsize / 2 ) ) + 8 )
CALLEE	2647:17	2647:17	11	_TIFFmalloc
LEAF_NODE	2647:17	2647:17	12	_TIFFmalloc
LEAF_NODE	2647:28	2647:28	11	(
ARGUMENT	2647:30	2647:58	11	( stripsize + ( stripsize / 2 ) ) + 8
LEAF_NODE	2647:30	2647:30	12	(
FIELD	2647:31	2647:31	12	stripsize
LEAF_NODE	2647:31	2647:31	13	stripsize
LEAF_NODE	2647:40	2647:40	12	+
LEAF_NODE	2647:41	2647:41	12	(
FIELD	2647:42	2647:42	12	stripsize
LEAF_NODE	2647:42	2647:42	13	stripsize
LEAF_NODE	2647:51	2647:51	12	/
FIELD	2647:52	2647:52	12	2
LEAF_NODE	2647:52	2647:52	13	2
LEAF_NODE	2647:53	2647:53	12	)
LEAF_NODE	2647:54	2647:54	12	)
LEAF_NODE	2647:56	2647:56	12	+
FIELD	2647:58	2647:58	12	8
LEAF_NODE	2647:58	2647:58	13	8
LEAF_NODE	2647:60	2647:60	11	)
LEAF_NODE	2647:61	2647:61	7	;
SELECTION	2649:5	2649:23	6	
KEYWORD	2649:5	2649:5	7	if
LEAF_NODE	2649:5	2649:5	8	if
LEAF_NODE	2649:8	2649:8	7	(
CONDITION	2649:10	2649:10	7	! ascii85_p
EXPR	2649:10	2649:10	8	! ascii85_p
UNARY_EXPR	2649:10	2649:11	9	! ascii85_p
UNARY_OPERATOR	2649:10	2649:10	10	!
LEAF_NODE	2649:10	2649:10	11	!
FIELD	2649:11	2649:11	10	ascii85_p
LEAF_NODE	2649:11	2649:11	11	ascii85_p
LEAF_NODE	2649:21	2649:21	7	)
STATEMENTS	2649:23	2654:5	7	
LEAF_NODE	2649:23	2649:23	8	{
STATEMENTS	2650:2	2653:2	8	
EXPR_STATEMENT	2650:2	2650:21	9	_TIFFfree ( tf_buf ) ;
EXPR	2650:2	2650:2	10	_TIFFfree ( tf_buf )
FUNCTION_CALL	2650:2	2650:20	11	_TIFFfree ( tf_buf )
CALLEE	2650:2	2650:2	12	_TIFFfree
LEAF_NODE	2650:2	2650:2	13	_TIFFfree
LEAF_NODE	2650:11	2650:11	12	(
ARGUMENT	2650:13	2650:13	12	tf_buf
FIELD	2650:13	2650:13	13	tf_buf
LEAF_NODE	2650:13	2650:13	14	tf_buf
LEAF_NODE	2650:20	2650:20	12	)
LEAF_NODE	2650:21	2650:21	10	;
EXPR_STATEMENT	2652:2	2652:67	9	TIFFError ( filename , "Cannot allocate ASCII85 encoding buffer." ) ;
EXPR	2652:2	2652:2	10	TIFFError ( filename , "Cannot allocate ASCII85 encoding buffer." )
FUNCTION_CALL	2652:2	2652:66	11	TIFFError ( filename , "Cannot allocate ASCII85 encoding buffer." )
CALLEE	2652:2	2652:2	12	TIFFError
LEAF_NODE	2652:2	2652:2	13	TIFFError
LEAF_NODE	2652:11	2652:11	12	(
ARGUMENT	2652:13	2652:13	12	filename
FIELD	2652:13	2652:13	13	filename
LEAF_NODE	2652:13	2652:13	14	filename
LEAF_NODE	2652:21	2652:21	12	,
ARGUMENT	2652:23	2652:23	12	"Cannot allocate ASCII85 encoding buffer."
FIELD	2652:23	2652:23	13	"Cannot allocate ASCII85 encoding buffer."
LEAF_NODE	2652:23	2652:23	14	"Cannot allocate ASCII85 encoding buffer."
LEAF_NODE	2652:66	2652:66	12	)
LEAF_NODE	2652:67	2652:67	10	;
JUMP_STATEMENT	2653:2	2653:8	9	return DESTINATION ;
KEYWORD	2653:2	2653:2	10	return
LEAF_NODE	2653:2	2653:2	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2653:8	2653:8	10	;
LEAF_NODE	2654:5	2654:5	8	}
LEAF_NODE	2655:1	2655:1	5	}
SELECTION	2658:1	2659:2	3	
KEYWORD	2658:1	2658:1	4	if
LEAF_NODE	2658:1	2658:1	5	if
LEAF_NODE	2658:4	2658:4	4	(
CONDITION	2658:5	2658:5	4	ascii85
EXPR	2658:5	2658:5	5	ascii85
FIELD	2658:5	2658:5	6	ascii85
LEAF_NODE	2658:5	2658:5	7	ascii85
LEAF_NODE	2658:12	2658:12	4	)
STATEMENTS	2659:2	2659:2	4	
EXPR_STATEMENT	2659:2	2659:15	5	Ascii85Init ( ) ;
EXPR	2659:2	2659:2	6	Ascii85Init ( )
FUNCTION_CALL	2659:2	2659:14	7	Ascii85Init ( )
CALLEE	2659:2	2659:2	8	Ascii85Init
LEAF_NODE	2659:2	2659:2	9	Ascii85Init
LEAF_NODE	2659:13	2659:13	8	(
LEAF_NODE	2659:14	2659:14	8	)
LEAF_NODE	2659:15	2659:15	6	;
ITERATION	2661:1	2661:47	3	
KEYWORD	2661:1	2661:1	4	for
LEAF_NODE	2661:1	2661:1	5	for
LEAF_NODE	2661:5	2661:5	4	(
FOR_INIT	2661:6	2661:11	4	s = 0 ;
EXPR	2661:6	2661:6	5	s = 0
ASSIGN	2661:6	2661:10	6	s = 0
LVAL	2661:6	2661:6	7	s
FIELD	2661:6	2661:6	8	s
LEAF_NODE	2661:6	2661:6	9	s
ASSIGN_OP	2661:8	2661:8	7	=
LEAF_NODE	2661:8	2661:8	8	=
RVAL	2661:10	2661:10	7	0
FIELD	2661:10	2661:10	8	0
LEAF_NODE	2661:10	2661:10	9	0
LEAF_NODE	2661:11	2661:11	5	;
CONDITION	2661:13	2661:13	4	s < TIFFNumberOfStrips ( tif )
EXPR	2661:13	2661:17	5	s < TIFFNumberOfStrips ( tif )
FIELD	2661:13	2661:13	6	s
LEAF_NODE	2661:13	2661:13	7	s
REL_OPERATOR	2661:15	2661:15	6	<
LEAF_NODE	2661:15	2661:15	7	<
FUNCTION_CALL	2661:17	2661:39	6	TIFFNumberOfStrips ( tif )
CALLEE	2661:17	2661:17	7	TIFFNumberOfStrips
LEAF_NODE	2661:17	2661:17	8	TIFFNumberOfStrips
LEAF_NODE	2661:35	2661:35	7	(
ARGUMENT	2661:36	2661:36	7	tif
FIELD	2661:36	2661:36	8	tif
LEAF_NODE	2661:36	2661:36	9	tif
LEAF_NODE	2661:39	2661:39	7	)
LEAF_NODE	2661:40	2661:40	4	;
FOR_EXPR	2661:42	2661:42	4	s ++
EXPR	2661:42	2661:42	5	s ++
FIELD	2661:42	2661:43	6	s ++
LEAF_NODE	2661:42	2661:42	7	s
LEAF_NODE	2661:43	2661:43	7	++
LEAF_NODE	2661:45	2661:45	4	)
STATEMENTS	2661:47	2724:1	4	
LEAF_NODE	2661:47	2661:47	5	{
STATEMENTS	2662:2	2699:4	5	
SIMPLE_DECL	2662:2	2662:63	6	tmsize_t cc ; cc = TIFFReadEncodedStrip ( tif , s , tf_buf , stripsize ) ;
VAR_DECL	2662:2	2662:11	7	tmsize_t cc ; cc = TIFFReadEncodedStrip ( tif , s , tf_buf , stripsize )
TYPE	2662:2	2662:2	8	tmsize_t
TYPE_NAME	2662:2	2662:2	9	tmsize_t
LEAF_NODE	2662:2	2662:2	10	tmsize_t
NAME	2662:11	2662:11	8	cc
LEAF_NODE	2662:11	2662:11	9	cc
LEAF_NODE	0:0	0:0	8	;
INIT	2662:11	2662:11	8	cc = TIFFReadEncodedStrip ( tif , s , tf_buf , stripsize )
ASSIGN	2662:11	2662:16	9	cc = TIFFReadEncodedStrip ( tif , s , tf_buf , stripsize )
LVAL	2662:11	2662:11	10	cc
NAME	2662:11	2662:11	11	cc
LEAF_NODE	2662:11	2662:11	12	cc
ASSIGN_OP	2662:14	2662:14	10	=
LEAF_NODE	2662:14	2662:14	11	=
RVAL	2662:16	2662:16	10	TIFFReadEncodedStrip ( tif , s , tf_buf , stripsize )
FUNCTION_CALL	2662:16	2662:62	11	TIFFReadEncodedStrip ( tif , s , tf_buf , stripsize )
CALLEE	2662:16	2662:16	12	TIFFReadEncodedStrip
LEAF_NODE	2662:16	2662:16	13	TIFFReadEncodedStrip
LEAF_NODE	2662:36	2662:36	12	(
ARGUMENT	2662:37	2662:37	12	tif
FIELD	2662:37	2662:37	13	tif
LEAF_NODE	2662:37	2662:37	14	tif
LEAF_NODE	2662:40	2662:40	12	,
ARGUMENT	2662:42	2662:42	12	s
FIELD	2662:42	2662:42	13	s
LEAF_NODE	2662:42	2662:42	14	s
LEAF_NODE	2662:43	2662:43	12	,
ARGUMENT	2662:45	2662:45	12	tf_buf
FIELD	2662:45	2662:45	13	tf_buf
LEAF_NODE	2662:45	2662:45	14	tf_buf
LEAF_NODE	2662:51	2662:51	12	,
ARGUMENT	2662:53	2662:53	12	stripsize
FIELD	2662:53	2662:53	13	stripsize
LEAF_NODE	2662:53	2662:53	14	stripsize
LEAF_NODE	2662:62	2662:62	12	)
LEAF_NODE	2662:63	2662:63	7	;
SELECTION	2663:2	2663:14	6	
KEYWORD	2663:2	2663:2	7	if
LEAF_NODE	2663:2	2663:2	8	if
LEAF_NODE	2663:5	2663:5	7	(
CONDITION	2663:6	2663:6	7	cc < 0
EXPR	2663:6	2663:11	8	cc < 0
FIELD	2663:6	2663:6	9	cc
LEAF_NODE	2663:6	2663:6	10	cc
REL_OPERATOR	2663:9	2663:9	9	<
LEAF_NODE	2663:9	2663:9	10	<
FIELD	2663:11	2663:11	9	0
LEAF_NODE	2663:11	2663:11	10	0
LEAF_NODE	2663:12	2663:12	7	)
STATEMENTS	2663:14	2666:2	7	
LEAF_NODE	2663:14	2663:14	8	{
STATEMENTS	2664:3	2665:3	8	
EXPR_STATEMENT	2664:3	2664:42	9	TIFFError ( filename , "Can't read strip" ) ;
EXPR	2664:3	2664:3	10	TIFFError ( filename , "Can't read strip" )
FUNCTION_CALL	2664:3	2664:41	11	TIFFError ( filename , "Can't read strip" )
CALLEE	2664:3	2664:3	12	TIFFError
LEAF_NODE	2664:3	2664:3	13	TIFFError
LEAF_NODE	2664:12	2664:12	12	(
ARGUMENT	2664:13	2664:13	12	filename
FIELD	2664:13	2664:13	13	filename
LEAF_NODE	2664:13	2664:13	14	filename
LEAF_NODE	2664:21	2664:21	12	,
ARGUMENT	2664:23	2664:23	12	"Can't read strip"
FIELD	2664:23	2664:23	13	"Can't read strip"
LEAF_NODE	2664:23	2664:23	14	"Can't read strip"
LEAF_NODE	2664:41	2664:41	12	)
LEAF_NODE	2664:42	2664:42	10	;
JUMP_STATEMENT	2665:3	2665:8	9	break DESTINATION ;
KEYWORD	2665:3	2665:3	10	break
LEAF_NODE	2665:3	2665:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2665:8	2665:8	10	;
LEAF_NODE	2666:2	2666:2	8	}
EXPR_STATEMENT	2667:2	2667:13	6	cp = tf_buf ;
EXPR	2667:2	2667:2	7	cp = tf_buf
ASSIGN	2667:2	2667:7	8	cp = tf_buf
LVAL	2667:2	2667:2	9	cp
FIELD	2667:2	2667:2	10	cp
LEAF_NODE	2667:2	2667:2	11	cp
ASSIGN_OP	2667:5	2667:5	9	=
LEAF_NODE	2667:5	2667:5	10	=
RVAL	2667:7	2667:7	9	tf_buf
FIELD	2667:7	2667:7	10	tf_buf
LEAF_NODE	2667:7	2667:7	11	tf_buf
LEAF_NODE	2667:13	2667:13	7	;
SELECTION	2668:2	2668:45	6	
KEYWORD	2668:2	2668:2	7	if
LEAF_NODE	2668:2	2668:2	8	if
LEAF_NODE	2668:5	2668:5	7	(
CONDITION	2668:6	2668:6	7	photometric == PHOTOMETRIC_MINISWHITE
EXPR	2668:6	2668:21	8	photometric == PHOTOMETRIC_MINISWHITE
FIELD	2668:6	2668:6	9	photometric
LEAF_NODE	2668:6	2668:6	10	photometric
EQ_OPERATOR	2668:18	2668:18	9	==
LEAF_NODE	2668:18	2668:18	10	==
FIELD	2668:21	2668:21	9	PHOTOMETRIC_MINISWHITE
LEAF_NODE	2668:21	2668:21	10	PHOTOMETRIC_MINISWHITE
LEAF_NODE	2668:43	2668:43	7	)
STATEMENTS	2668:45	2672:2	7	
LEAF_NODE	2668:45	2668:45	8	{
STATEMENTS	2669:3	2671:3	8	
ITERATION	2669:3	2670:4	9	
KEYWORD	2669:3	2669:3	10	for
LEAF_NODE	2669:3	2669:3	11	for
LEAF_NODE	2669:7	2669:7	10	(
FOR_INIT	2669:8	2669:16	10	cp += cc ;
EXPR	2669:8	2669:8	11	cp += cc
ASSIGN	2669:8	2669:14	12	cp += cc
LVAL	2669:8	2669:8	13	cp
FIELD	2669:8	2669:8	14	cp
LEAF_NODE	2669:8	2669:8	15	cp
ASSIGN_OP	2669:11	2669:11	13	+=
LEAF_NODE	2669:11	2669:11	14	+=
RVAL	2669:14	2669:14	13	cc
FIELD	2669:14	2669:14	14	cc
LEAF_NODE	2669:14	2669:14	15	cc
LEAF_NODE	2669:16	2669:16	11	;
CONDITION	2669:18	2669:18	10	-- cp >= tf_buf
EXPR	2669:18	2669:26	11	-- cp >= tf_buf
LEAF_NODE	2669:18	2669:18	12	--
FIELD	2669:20	2669:20	12	cp
LEAF_NODE	2669:20	2669:20	13	cp
REL_OPERATOR	2669:23	2669:23	12	>=
LEAF_NODE	2669:23	2669:23	13	>=
FIELD	2669:26	2669:26	12	tf_buf
LEAF_NODE	2669:26	2669:26	13	tf_buf
LEAF_NODE	2669:32	2669:32	10	;
LEAF_NODE	0:0	0:0	10	FOR_EXPR
LEAF_NODE	2669:33	2669:33	10	)
STATEMENTS	2670:4	2670:4	10	
EXPR_STATEMENT	2670:4	2670:14	11	* cp = ~ * cp ;
EXPR	2670:4	2670:4	12	* cp = ~ * cp
ASSIGN	2670:4	2670:10	13	* cp = ~ * cp
LVAL	2670:4	2670:4	14	* cp
UNARY_EXPR	2670:4	2670:5	15	* cp
UNARY_OPERATOR	2670:4	2670:4	16	*
LEAF_NODE	2670:4	2670:4	17	*
FIELD	2670:5	2670:5	16	cp
LEAF_NODE	2670:5	2670:5	17	cp
ASSIGN_OP	2670:8	2670:8	14	=
LEAF_NODE	2670:8	2670:8	15	=
RVAL	2670:10	2670:10	14	~ * cp
UNARY_EXPR	2670:10	2670:12	15	~ * cp
UNARY_OPERATOR	2670:10	2670:10	16	~
LEAF_NODE	2670:10	2670:10	17	~
UNARY_OPERATOR	2670:11	2670:11	16	*
LEAF_NODE	2670:11	2670:11	17	*
FIELD	2670:12	2670:12	16	cp
LEAF_NODE	2670:12	2670:12	17	cp
LEAF_NODE	2670:14	2670:14	12	;
EXPR_STATEMENT	2671:3	2671:7	9	cp ++ ;
EXPR	2671:3	2671:3	10	cp ++
FIELD	2671:3	2671:5	11	cp ++
LEAF_NODE	2671:3	2671:3	12	cp
LEAF_NODE	2671:5	2671:5	12	++
LEAF_NODE	2671:7	2671:7	10	;
LEAF_NODE	2672:2	2672:2	8	}
SELECTION	2677:2	2677:46	6	
KEYWORD	2677:2	2677:2	7	if
LEAF_NODE	2677:2	2677:2	8	if
LEAF_NODE	2677:5	2677:5	7	(
CONDITION	2677:6	2677:6	7	bitspersample == 16 && ! HOST_BIGENDIAN
EXPR	2677:6	2677:6	8	bitspersample == 16 && ! HOST_BIGENDIAN
AND	2677:6	2677:29	9	bitspersample == 16 && ! HOST_BIGENDIAN
EXPR	2677:6	2677:23	10	bitspersample == 16
FIELD	2677:6	2677:6	11	bitspersample
LEAF_NODE	2677:6	2677:6	12	bitspersample
EQ_OPERATOR	2677:20	2677:20	11	==
LEAF_NODE	2677:20	2677:20	12	==
FIELD	2677:23	2677:23	11	16
LEAF_NODE	2677:23	2677:23	12	16
LEAF_NODE	2677:26	2677:26	10	&&
EXPR	2677:29	2677:29	10	! HOST_BIGENDIAN
UNARY_EXPR	2677:29	2677:30	11	! HOST_BIGENDIAN
UNARY_OPERATOR	2677:29	2677:29	12	!
LEAF_NODE	2677:29	2677:29	13	!
FIELD	2677:30	2677:30	12	HOST_BIGENDIAN
LEAF_NODE	2677:30	2677:30	13	HOST_BIGENDIAN
LEAF_NODE	2677:44	2677:44	7	)
STATEMENTS	2677:46	2679:2	7	
LEAF_NODE	2677:46	2677:46	8	{
STATEMENTS	2678:3	2678:3	8	
EXPR_STATEMENT	2678:3	2678:23	9	PS_FlipBytes ( cp , cc ) ;
EXPR	2678:3	2678:3	10	PS_FlipBytes ( cp , cc )
FUNCTION_CALL	2678:3	2678:22	11	PS_FlipBytes ( cp , cc )
CALLEE	2678:3	2678:3	12	PS_FlipBytes
LEAF_NODE	2678:3	2678:3	13	PS_FlipBytes
LEAF_NODE	2678:15	2678:15	12	(
ARGUMENT	2678:16	2678:16	12	cp
FIELD	2678:16	2678:16	13	cp
LEAF_NODE	2678:16	2678:16	14	cp
LEAF_NODE	2678:18	2678:18	12	,
ARGUMENT	2678:20	2678:20	12	cc
FIELD	2678:20	2678:20	13	cc
LEAF_NODE	2678:20	2678:20	14	cc
LEAF_NODE	2678:22	2678:22	12	)
LEAF_NODE	2678:23	2678:23	10	;
LEAF_NODE	2679:2	2679:2	8	}
SELECTION	2680:2	2680:15	6	
KEYWORD	2680:2	2680:2	7	if
LEAF_NODE	2680:2	2680:2	8	if
LEAF_NODE	2680:5	2680:5	7	(
CONDITION	2680:6	2680:6	7	ascii85
EXPR	2680:6	2680:6	8	ascii85
FIELD	2680:6	2680:6	9	ascii85
LEAF_NODE	2680:6	2680:6	10	ascii85
LEAF_NODE	2680:13	2680:13	7	)
STATEMENTS	2680:15	2699:2	7	
LEAF_NODE	2680:15	2680:15	8	{
STATEMENTS	2682:3	2696:3	8	
SELECTION	2682:3	2682:14	9	
KEYWORD	2682:3	2682:3	10	if
LEAF_NODE	2682:3	2682:3	11	if
LEAF_NODE	2682:6	2682:6	10	(
CONDITION	2682:7	2682:7	10	alpha
EXPR	2682:7	2682:7	11	alpha
FIELD	2682:7	2682:7	12	alpha
LEAF_NODE	2682:7	2682:7	13	alpha
LEAF_NODE	2682:12	2682:12	10	)
STATEMENTS	2682:14	2689:3	10	
LEAF_NODE	2682:14	2682:14	11	{
STATEMENTS	2683:4	2688:4	11	
SIMPLE_DECL	2683:4	2683:17	12	int adjust , int i ;
INIT_DECL_LIST	2683:4	2683:4	13	int adjust , int i
VAR_DECL	2683:4	2683:8	14	int adjust
TYPE	2683:4	2683:4	15	int
TYPE_NAME	2683:4	2683:4	16	int
LEAF_NODE	2683:4	2683:4	17	int
NAME	2683:8	2683:8	15	adjust
LEAF_NODE	2683:8	2683:8	16	adjust
LEAF_NODE	2683:14	2683:14	14	,
VAR_DECL	2683:4	2683:16	14	int i
TYPE	2683:4	2683:4	15	int
TYPE_NAME	2683:4	2683:4	16	int
LEAF_NODE	2683:4	2683:4	17	int
NAME	2683:16	2683:16	15	i
LEAF_NODE	2683:16	2683:16	16	i
LEAF_NODE	2683:17	2683:17	13	;
ITERATION	2684:4	2684:30	12	
KEYWORD	2684:4	2684:4	13	for
LEAF_NODE	2684:4	2684:4	14	for
LEAF_NODE	2684:8	2684:8	13	(
FOR_INIT	2684:9	2684:14	13	i = 0 ;
EXPR	2684:9	2684:9	14	i = 0
ASSIGN	2684:9	2684:13	15	i = 0
LVAL	2684:9	2684:9	16	i
FIELD	2684:9	2684:9	17	i
LEAF_NODE	2684:9	2684:9	18	i
ASSIGN_OP	2684:11	2684:11	16	=
LEAF_NODE	2684:11	2684:11	17	=
RVAL	2684:13	2684:13	16	0
FIELD	2684:13	2684:13	17	0
LEAF_NODE	2684:13	2684:13	18	0
LEAF_NODE	2684:14	2684:14	14	;
CONDITION	2684:16	2684:16	13	i < cc
EXPR	2684:16	2684:20	14	i < cc
FIELD	2684:16	2684:16	15	i
LEAF_NODE	2684:16	2684:16	16	i
REL_OPERATOR	2684:18	2684:18	15	<
LEAF_NODE	2684:18	2684:18	16	<
FIELD	2684:20	2684:20	15	cc
LEAF_NODE	2684:20	2684:20	16	cc
LEAF_NODE	2684:22	2684:22	13	;
FOR_EXPR	2684:24	2684:24	13	i += 2
EXPR	2684:24	2684:24	14	i += 2
ASSIGN	2684:24	2684:27	15	i += 2
LVAL	2684:24	2684:24	16	i
FIELD	2684:24	2684:24	17	i
LEAF_NODE	2684:24	2684:24	18	i
ASSIGN_OP	2684:25	2684:25	16	+=
LEAF_NODE	2684:25	2684:25	17	+=
RVAL	2684:27	2684:27	16	2
FIELD	2684:27	2684:27	17	2
LEAF_NODE	2684:27	2684:27	18	2
LEAF_NODE	2684:28	2684:28	13	)
STATEMENTS	2684:30	2687:4	13	
LEAF_NODE	2684:30	2684:30	14	{
STATEMENTS	2685:5	2686:8	14	
EXPR_STATEMENT	2685:5	2685:29	15	adjust = 255 - cp [ i + 1 ] ;
EXPR	2685:5	2685:5	16	adjust = 255 - cp [ i + 1 ]
ASSIGN	2685:5	2685:14	17	adjust = 255 - cp [ i + 1 ]
LVAL	2685:5	2685:5	18	adjust
FIELD	2685:5	2685:5	19	adjust
LEAF_NODE	2685:5	2685:5	20	adjust
ASSIGN_OP	2685:12	2685:12	18	=
LEAF_NODE	2685:12	2685:12	19	=
RVAL	2685:14	2685:20	18	255 - cp [ i + 1 ]
FIELD	2685:14	2685:14	19	255
LEAF_NODE	2685:14	2685:14	20	255
LEAF_NODE	2685:18	2685:18	19	-
FIELD	2685:20	2685:28	19	cp [ i + 1 ]
LEAF_NODE	2685:20	2685:20	20	cp
LEAF_NODE	2685:22	2685:22	20	[
EXPR	2685:23	2685:27	20	i + 1
FIELD	2685:23	2685:23	21	i
LEAF_NODE	2685:23	2685:23	22	i
LEAF_NODE	2685:25	2685:25	21	+
FIELD	2685:27	2685:27	21	1
LEAF_NODE	2685:27	2685:27	22	1
LEAF_NODE	2685:28	2685:28	20	]
LEAF_NODE	2685:29	2685:29	16	;
EXPR_STATEMENT	2686:8	2686:34	15	cp [ i / 2 ] = cp [ i ] + adjust ;
EXPR	2686:8	2686:8	16	cp [ i / 2 ] = cp [ i ] + adjust
ASSIGN	2686:8	2686:20	17	cp [ i / 2 ] = cp [ i ] + adjust
LVAL	2686:8	2686:8	18	cp [ i / 2 ]
FIELD	2686:8	2686:16	19	cp [ i / 2 ]
LEAF_NODE	2686:8	2686:8	20	cp
LEAF_NODE	2686:10	2686:10	20	[
EXPR	2686:11	2686:15	20	i / 2
FIELD	2686:11	2686:11	21	i
LEAF_NODE	2686:11	2686:11	22	i
LEAF_NODE	2686:13	2686:13	21	/
FIELD	2686:15	2686:15	21	2
LEAF_NODE	2686:15	2686:15	22	2
LEAF_NODE	2686:16	2686:16	20	]
ASSIGN_OP	2686:18	2686:18	18	=
LEAF_NODE	2686:18	2686:18	19	=
RVAL	2686:20	2686:28	18	cp [ i ] + adjust
FIELD	2686:20	2686:24	19	cp [ i ]
LEAF_NODE	2686:20	2686:20	20	cp
LEAF_NODE	2686:22	2686:22	20	[
EXPR	2686:23	2686:23	20	i
FIELD	2686:23	2686:23	21	i
LEAF_NODE	2686:23	2686:23	22	i
LEAF_NODE	2686:24	2686:24	20	]
LEAF_NODE	2686:26	2686:26	19	+
FIELD	2686:28	2686:28	19	adjust
LEAF_NODE	2686:28	2686:28	20	adjust
LEAF_NODE	2686:34	2686:34	16	;
LEAF_NODE	2687:4	2687:4	14	}
EXPR_STATEMENT	2688:4	2688:11	12	cc /= 2 ;
EXPR	2688:4	2688:4	13	cc /= 2
ASSIGN	2688:4	2688:10	14	cc /= 2
LVAL	2688:4	2688:4	15	cc
FIELD	2688:4	2688:4	16	cc
LEAF_NODE	2688:4	2688:4	17	cc
ASSIGN_OP	2688:7	2688:7	15	/=
LEAF_NODE	2688:7	2688:7	16	/=
RVAL	2688:10	2688:10	15	2
FIELD	2688:10	2688:10	16	2
LEAF_NODE	2688:10	2688:10	17	2
LEAF_NODE	2688:11	2688:11	13	;
LEAF_NODE	2689:3	2689:3	11	}
EXPR_STATEMENT	2691:3	2691:57	9	ascii85_l = Ascii85EncodeBlock ( ascii85_p , 1 , cp , cc ) ;
EXPR	2691:3	2691:3	10	ascii85_l = Ascii85EncodeBlock ( ascii85_p , 1 , cp , cc )
ASSIGN	2691:3	2691:15	11	ascii85_l = Ascii85EncodeBlock ( ascii85_p , 1 , cp , cc )
LVAL	2691:3	2691:3	12	ascii85_l
FIELD	2691:3	2691:3	13	ascii85_l
LEAF_NODE	2691:3	2691:3	14	ascii85_l
ASSIGN_OP	2691:13	2691:13	12	=
LEAF_NODE	2691:13	2691:13	13	=
RVAL	2691:15	2691:15	12	Ascii85EncodeBlock ( ascii85_p , 1 , cp , cc )
FUNCTION_CALL	2691:15	2691:56	13	Ascii85EncodeBlock ( ascii85_p , 1 , cp , cc )
CALLEE	2691:15	2691:15	14	Ascii85EncodeBlock
LEAF_NODE	2691:15	2691:15	15	Ascii85EncodeBlock
LEAF_NODE	2691:33	2691:33	14	(
ARGUMENT	2691:35	2691:35	14	ascii85_p
FIELD	2691:35	2691:35	15	ascii85_p
LEAF_NODE	2691:35	2691:35	16	ascii85_p
LEAF_NODE	2691:44	2691:44	14	,
ARGUMENT	2691:46	2691:46	14	1
FIELD	2691:46	2691:46	15	1
LEAF_NODE	2691:46	2691:46	16	1
LEAF_NODE	2691:47	2691:47	14	,
ARGUMENT	2691:49	2691:49	14	cp
FIELD	2691:49	2691:49	15	cp
LEAF_NODE	2691:49	2691:49	16	cp
LEAF_NODE	2691:51	2691:51	14	,
ARGUMENT	2691:53	2691:53	14	cc
FIELD	2691:53	2691:53	15	cc
LEAF_NODE	2691:53	2691:53	16	cc
LEAF_NODE	2691:56	2691:56	14	)
LEAF_NODE	2691:57	2691:57	10	;
SELECTION	2693:3	2694:7	9	
KEYWORD	2693:3	2693:3	10	if
LEAF_NODE	2693:3	2693:3	11	if
LEAF_NODE	2693:6	2693:6	10	(
CONDITION	2693:8	2693:8	10	ascii85_l > 0
EXPR	2693:8	2693:20	11	ascii85_l > 0
FIELD	2693:8	2693:8	12	ascii85_l
LEAF_NODE	2693:8	2693:8	13	ascii85_l
REL_OPERATOR	2693:18	2693:18	12	>
LEAF_NODE	2693:18	2693:18	13	>
FIELD	2693:20	2693:20	12	0
LEAF_NODE	2693:20	2693:20	13	0
LEAF_NODE	2693:22	2693:22	10	)
STATEMENTS	2694:7	2694:7	10	
EXPR_STATEMENT	2694:7	2694:44	11	fwrite ( ascii85_p , ascii85_l , 1 , fd ) ;
EXPR	2694:7	2694:7	12	fwrite ( ascii85_p , ascii85_l , 1 , fd )
FUNCTION_CALL	2694:7	2694:43	13	fwrite ( ascii85_p , ascii85_l , 1 , fd )
CALLEE	2694:7	2694:7	14	fwrite
LEAF_NODE	2694:7	2694:7	15	fwrite
LEAF_NODE	2694:13	2694:13	14	(
ARGUMENT	2694:15	2694:15	14	ascii85_p
FIELD	2694:15	2694:15	15	ascii85_p
LEAF_NODE	2694:15	2694:15	16	ascii85_p
LEAF_NODE	2694:24	2694:24	14	,
ARGUMENT	2694:26	2694:26	14	ascii85_l
FIELD	2694:26	2694:26	15	ascii85_l
LEAF_NODE	2694:26	2694:26	16	ascii85_l
LEAF_NODE	2694:35	2694:35	14	,
ARGUMENT	2694:37	2694:37	14	1
FIELD	2694:37	2694:37	15	1
LEAF_NODE	2694:37	2694:37	16	1
LEAF_NODE	2694:38	2694:38	14	,
ARGUMENT	2694:40	2694:40	14	fd
FIELD	2694:40	2694:40	15	fd
LEAF_NODE	2694:40	2694:40	16	fd
LEAF_NODE	2694:43	2694:43	14	)
LEAF_NODE	2694:44	2694:44	12	;
ITERATION	2696:3	2697:4	9	
KEYWORD	2696:3	2696:3	10	while
LEAF_NODE	2696:3	2696:3	11	while
LEAF_NODE	2696:9	2696:9	10	(
CONDITION	2696:10	2696:10	10	cc -- > 0
EXPR	2696:10	2696:17	11	cc -- > 0
FIELD	2696:10	2696:12	12	cc --
LEAF_NODE	2696:10	2696:10	13	cc
LEAF_NODE	2696:12	2696:12	13	--
REL_OPERATOR	2696:15	2696:15	12	>
LEAF_NODE	2696:15	2696:15	13	>
FIELD	2696:17	2696:17	12	0
LEAF_NODE	2696:17	2696:17	13	0
LEAF_NODE	2696:18	2696:18	10	)
STATEMENTS	2697:4	2697:4	10	
EXPR_STATEMENT	2697:4	2697:25	11	Ascii85Put ( * cp ++ , fd ) ;
EXPR	2697:4	2697:4	12	Ascii85Put ( * cp ++ , fd )
FUNCTION_CALL	2697:4	2697:24	13	Ascii85Put ( * cp ++ , fd )
CALLEE	2697:4	2697:4	14	Ascii85Put
LEAF_NODE	2697:4	2697:4	15	Ascii85Put
LEAF_NODE	2697:14	2697:14	14	(
ARGUMENT	2697:15	2697:15	14	* cp ++
UNARY_EXPR	2697:15	2697:16	15	* cp ++
UNARY_OPERATOR	2697:15	2697:15	16	*
LEAF_NODE	2697:15	2697:15	17	*
FIELD	2697:16	2697:18	16	cp ++
LEAF_NODE	2697:16	2697:16	17	cp
LEAF_NODE	2697:18	2697:18	17	++
LEAF_NODE	2697:20	2697:20	14	,
ARGUMENT	2697:22	2697:22	14	fd
FIELD	2697:22	2697:22	15	fd
LEAF_NODE	2697:22	2697:22	16	fd
LEAF_NODE	2697:24	2697:24	14	)
LEAF_NODE	2697:25	2697:25	12	;
LEAF_NODE	2699:2	2699:2	8	}
SELECTION	2699:4	2699:9	6	
KEYWORD	2699:4	2699:4	7	else
LEAF_NODE	2699:4	2699:4	8	else
STATEMENTS	2699:9	2723:2	7	
LEAF_NODE	2699:9	2699:9	8	{
STATEMENTS	2700:3	2716:5	8	
SIMPLE_DECL	2700:3	2700:18	9	unsigned char c ;
VAR_DECL	2700:3	2700:17	10	unsigned char c
TYPE	2700:3	2700:3	11	unsigned char
TYPE_NAME	2700:3	2700:12	12	unsigned char
LEAF_NODE	2700:3	2700:3	13	unsigned
LEAF_NODE	2700:12	2700:12	13	char
NAME	2700:17	2700:17	11	c
LEAF_NODE	2700:17	2700:17	12	c
LEAF_NODE	2700:18	2700:18	10	;
SELECTION	2702:3	2702:14	9	
KEYWORD	2702:3	2702:3	10	if
LEAF_NODE	2702:3	2702:3	11	if
LEAF_NODE	2702:6	2702:6	10	(
CONDITION	2702:7	2702:7	10	alpha
EXPR	2702:7	2702:7	11	alpha
FIELD	2702:7	2702:7	12	alpha
LEAF_NODE	2702:7	2702:7	13	alpha
LEAF_NODE	2702:12	2702:12	10	)
STATEMENTS	2702:14	2716:3	10	
LEAF_NODE	2702:14	2702:14	11	{
STATEMENTS	2703:4	2704:4	11	
SIMPLE_DECL	2703:4	2703:14	12	int adjust ;
VAR_DECL	2703:4	2703:8	13	int adjust
TYPE	2703:4	2703:4	14	int
TYPE_NAME	2703:4	2703:4	15	int
LEAF_NODE	2703:4	2703:4	16	int
NAME	2703:8	2703:8	14	adjust
LEAF_NODE	2703:8	2703:8	15	adjust
LEAF_NODE	2703:14	2703:14	13	;
ITERATION	2704:4	2704:21	12	
KEYWORD	2704:4	2704:4	13	while
LEAF_NODE	2704:4	2704:4	14	while
LEAF_NODE	2704:10	2704:10	13	(
CONDITION	2704:11	2704:11	13	cc -- > 1
EXPR	2704:11	2704:18	14	cc -- > 1
FIELD	2704:11	2704:13	15	cc --
LEAF_NODE	2704:11	2704:11	16	cc
LEAF_NODE	2704:13	2704:13	16	--
REL_OPERATOR	2704:16	2704:16	15	>
LEAF_NODE	2704:16	2704:16	16	>
FIELD	2704:18	2704:18	15	1
LEAF_NODE	2704:18	2704:18	16	1
LEAF_NODE	2704:19	2704:19	13	)
STATEMENTS	2704:21	2715:4	13	
LEAF_NODE	2704:21	2704:21	14	{
STATEMENTS	2705:5	2714:5	14	
EXPR_STATEMENT	2705:5	2705:29	15	DOBREAK ( breaklen , 1 , fd ) ;
EXPR	2705:5	2705:5	16	DOBREAK ( breaklen , 1 , fd )
FUNCTION_CALL	2705:5	2705:28	17	DOBREAK ( breaklen , 1 , fd )
CALLEE	2705:5	2705:5	18	DOBREAK
LEAF_NODE	2705:5	2705:5	19	DOBREAK
LEAF_NODE	2705:12	2705:12	18	(
ARGUMENT	2705:13	2705:13	18	breaklen
FIELD	2705:13	2705:13	19	breaklen
LEAF_NODE	2705:13	2705:13	20	breaklen
LEAF_NODE	2705:21	2705:21	18	,
ARGUMENT	2705:23	2705:23	18	1
FIELD	2705:23	2705:23	19	1
LEAF_NODE	2705:23	2705:23	20	1
LEAF_NODE	2705:24	2705:24	18	,
ARGUMENT	2705:26	2705:26	18	fd
FIELD	2705:26	2705:26	19	fd
LEAF_NODE	2705:26	2705:26	20	fd
LEAF_NODE	2705:28	2705:28	18	)
LEAF_NODE	2705:29	2705:29	16	;
EXPR_STATEMENT	2712:5	2712:25	15	adjust = 255 - cp [ 1 ] ;
EXPR	2712:5	2712:5	16	adjust = 255 - cp [ 1 ]
ASSIGN	2712:5	2712:14	17	adjust = 255 - cp [ 1 ]
LVAL	2712:5	2712:5	18	adjust
FIELD	2712:5	2712:5	19	adjust
LEAF_NODE	2712:5	2712:5	20	adjust
ASSIGN_OP	2712:12	2712:12	18	=
LEAF_NODE	2712:12	2712:12	19	=
RVAL	2712:14	2712:20	18	255 - cp [ 1 ]
FIELD	2712:14	2712:14	19	255
LEAF_NODE	2712:14	2712:14	20	255
LEAF_NODE	2712:18	2712:18	19	-
FIELD	2712:20	2712:24	19	cp [ 1 ]
LEAF_NODE	2712:20	2712:20	20	cp
LEAF_NODE	2712:22	2712:22	20	[
EXPR	2712:23	2712:23	20	1
FIELD	2712:23	2712:23	21	1
LEAF_NODE	2712:23	2712:23	22	1
LEAF_NODE	2712:24	2712:24	20	]
LEAF_NODE	2712:25	2712:25	16	;
EXPR_STATEMENT	2713:5	2713:23	15	c = * cp ++ + adjust ;
EXPR	2713:5	2713:5	16	c = * cp ++ + adjust
ASSIGN	2713:5	2713:9	17	c = * cp ++ + adjust
LVAL	2713:5	2713:5	18	c
FIELD	2713:5	2713:5	19	c
LEAF_NODE	2713:5	2713:5	20	c
ASSIGN_OP	2713:7	2713:7	18	=
LEAF_NODE	2713:7	2713:7	19	=
RVAL	2713:9	2713:17	18	* cp ++ + adjust
UNARY_EXPR	2713:9	2713:10	19	* cp ++
UNARY_OPERATOR	2713:9	2713:9	20	*
LEAF_NODE	2713:9	2713:9	21	*
FIELD	2713:10	2713:12	20	cp ++
LEAF_NODE	2713:10	2713:10	21	cp
LEAF_NODE	2713:12	2713:12	21	++
LEAF_NODE	2713:15	2713:15	19	+
FIELD	2713:17	2713:17	19	adjust
LEAF_NODE	2713:17	2713:17	20	adjust
LEAF_NODE	2713:23	2713:23	16	;
EXPR_STATEMENT	2713:25	2713:37	15	PUTHEX ( c , fd ) ;
EXPR	2713:25	2713:25	16	PUTHEX ( c , fd )
FUNCTION_CALL	2713:25	2713:36	17	PUTHEX ( c , fd )
CALLEE	2713:25	2713:25	18	PUTHEX
LEAF_NODE	2713:25	2713:25	19	PUTHEX
LEAF_NODE	2713:31	2713:31	18	(
ARGUMENT	2713:32	2713:32	18	c
FIELD	2713:32	2713:32	19	c
LEAF_NODE	2713:32	2713:32	20	c
LEAF_NODE	2713:33	2713:33	18	,
ARGUMENT	2713:34	2713:34	18	fd
FIELD	2713:34	2713:34	19	fd
LEAF_NODE	2713:34	2713:34	20	fd
LEAF_NODE	2713:36	2713:36	18	)
LEAF_NODE	2713:37	2713:37	16	;
EXPR_STATEMENT	2714:5	2714:15	15	cp ++ , cc -- ;
EXPR	2714:5	2714:11	16	cp ++ , cc --
FIELD	2714:5	2714:7	17	cp ++
LEAF_NODE	2714:5	2714:5	18	cp
LEAF_NODE	2714:7	2714:7	18	++
LEAF_NODE	2714:9	2714:9	17	,
FIELD	2714:11	2714:13	17	cc --
LEAF_NODE	2714:11	2714:11	18	cc
LEAF_NODE	2714:13	2714:13	18	--
LEAF_NODE	2714:15	2714:15	16	;
LEAF_NODE	2715:4	2715:4	14	}
LEAF_NODE	2716:3	2716:3	11	}
SELECTION	2716:5	2716:10	9	
KEYWORD	2716:5	2716:5	10	else
LEAF_NODE	2716:5	2716:5	11	else
STATEMENTS	2716:10	2722:3	10	
LEAF_NODE	2716:10	2716:10	11	{
STATEMENTS	2717:4	2717:4	11	
ITERATION	2717:4	2717:21	12	
KEYWORD	2717:4	2717:4	13	while
LEAF_NODE	2717:4	2717:4	14	while
LEAF_NODE	2717:10	2717:10	13	(
CONDITION	2717:11	2717:11	13	cc -- > 0
EXPR	2717:11	2717:18	14	cc -- > 0
FIELD	2717:11	2717:13	15	cc --
LEAF_NODE	2717:11	2717:11	16	cc
LEAF_NODE	2717:13	2717:13	16	--
REL_OPERATOR	2717:16	2717:16	15	>
LEAF_NODE	2717:16	2717:16	16	>
FIELD	2717:18	2717:18	15	0
LEAF_NODE	2717:18	2717:18	16	0
LEAF_NODE	2717:19	2717:19	13	)
STATEMENTS	2717:21	2721:4	13	
LEAF_NODE	2717:21	2717:21	14	{
STATEMENTS	2718:5	2720:5	14	
EXPR_STATEMENT	2718:5	2718:14	15	c = * cp ++ ;
EXPR	2718:5	2718:5	16	c = * cp ++
ASSIGN	2718:5	2718:9	17	c = * cp ++
LVAL	2718:5	2718:5	18	c
FIELD	2718:5	2718:5	19	c
LEAF_NODE	2718:5	2718:5	20	c
ASSIGN_OP	2718:7	2718:7	18	=
LEAF_NODE	2718:7	2718:7	19	=
RVAL	2718:9	2718:9	18	* cp ++
UNARY_EXPR	2718:9	2718:10	19	* cp ++
UNARY_OPERATOR	2718:9	2718:9	20	*
LEAF_NODE	2718:9	2718:9	21	*
FIELD	2718:10	2718:12	20	cp ++
LEAF_NODE	2718:10	2718:10	21	cp
LEAF_NODE	2718:12	2718:12	21	++
LEAF_NODE	2718:14	2718:14	16	;
EXPR_STATEMENT	2719:5	2719:29	15	DOBREAK ( breaklen , 1 , fd ) ;
EXPR	2719:5	2719:5	16	DOBREAK ( breaklen , 1 , fd )
FUNCTION_CALL	2719:5	2719:28	17	DOBREAK ( breaklen , 1 , fd )
CALLEE	2719:5	2719:5	18	DOBREAK
LEAF_NODE	2719:5	2719:5	19	DOBREAK
LEAF_NODE	2719:12	2719:12	18	(
ARGUMENT	2719:13	2719:13	18	breaklen
FIELD	2719:13	2719:13	19	breaklen
LEAF_NODE	2719:13	2719:13	20	breaklen
LEAF_NODE	2719:21	2719:21	18	,
ARGUMENT	2719:23	2719:23	18	1
FIELD	2719:23	2719:23	19	1
LEAF_NODE	2719:23	2719:23	20	1
LEAF_NODE	2719:24	2719:24	18	,
ARGUMENT	2719:26	2719:26	18	fd
FIELD	2719:26	2719:26	19	fd
LEAF_NODE	2719:26	2719:26	20	fd
LEAF_NODE	2719:28	2719:28	18	)
LEAF_NODE	2719:29	2719:29	16	;
EXPR_STATEMENT	2720:5	2720:18	15	PUTHEX ( c , fd ) ;
EXPR	2720:5	2720:5	16	PUTHEX ( c , fd )
FUNCTION_CALL	2720:5	2720:17	17	PUTHEX ( c , fd )
CALLEE	2720:5	2720:5	18	PUTHEX
LEAF_NODE	2720:5	2720:5	19	PUTHEX
LEAF_NODE	2720:11	2720:11	18	(
ARGUMENT	2720:12	2720:12	18	c
FIELD	2720:12	2720:12	19	c
LEAF_NODE	2720:12	2720:12	20	c
LEAF_NODE	2720:13	2720:13	18	,
ARGUMENT	2720:15	2720:15	18	fd
FIELD	2720:15	2720:15	19	fd
LEAF_NODE	2720:15	2720:15	20	fd
LEAF_NODE	2720:17	2720:17	18	)
LEAF_NODE	2720:18	2720:18	16	;
LEAF_NODE	2721:4	2721:4	14	}
LEAF_NODE	2722:3	2722:3	11	}
LEAF_NODE	2723:2	2723:2	8	}
LEAF_NODE	2724:1	2724:1	5	}
SELECTION	2726:1	2727:1	3	
KEYWORD	2726:1	2726:1	4	if
LEAF_NODE	2726:1	2726:1	5	if
LEAF_NODE	2726:4	2726:4	4	(
CONDITION	2726:6	2726:6	4	! ascii85
EXPR	2726:6	2726:6	5	! ascii85
UNARY_EXPR	2726:6	2726:7	6	! ascii85
UNARY_OPERATOR	2726:6	2726:6	7	!
LEAF_NODE	2726:6	2726:6	8	!
FIELD	2726:7	2726:7	7	ascii85
LEAF_NODE	2726:7	2726:7	8	ascii85
LEAF_NODE	2726:15	2726:15	4	)
STATEMENTS	2727:1	2730:1	4	
LEAF_NODE	2727:1	2727:1	5	{
STATEMENTS	2728:5	2728:5	5	
SELECTION	2728:5	2729:2	6	
KEYWORD	2728:5	2728:5	7	if
LEAF_NODE	2728:5	2728:5	8	if
LEAF_NODE	2728:8	2728:8	7	(
CONDITION	2728:10	2728:10	7	level2 || level3
EXPR	2728:10	2728:10	8	level2 || level3
OR	2728:10	2728:20	9	level2 || level3
EXPR	2728:10	2728:10	10	level2
FIELD	2728:10	2728:10	11	level2
LEAF_NODE	2728:10	2728:10	12	level2
LEAF_NODE	2728:17	2728:17	10	||
EXPR	2728:20	2728:20	10	level3
FIELD	2728:20	2728:20	11	level3
LEAF_NODE	2728:20	2728:20	12	level3
LEAF_NODE	2728:26	2728:26	7	)
STATEMENTS	2729:2	2729:2	7	
EXPR_STATEMENT	2729:2	2729:18	8	fputs ( ">\n" , fd ) ;
EXPR	2729:2	2729:2	9	fputs ( ">\n" , fd )
FUNCTION_CALL	2729:2	2729:17	10	fputs ( ">\n" , fd )
CALLEE	2729:2	2729:2	11	fputs
LEAF_NODE	2729:2	2729:2	12	fputs
LEAF_NODE	2729:7	2729:7	11	(
ARGUMENT	2729:8	2729:8	11	">\n"
FIELD	2729:8	2729:8	12	">\n"
LEAF_NODE	2729:8	2729:8	13	">\n"
LEAF_NODE	2729:13	2729:13	11	,
ARGUMENT	2729:15	2729:15	11	fd
FIELD	2729:15	2729:15	12	fd
LEAF_NODE	2729:15	2729:15	13	fd
LEAF_NODE	2729:17	2729:17	11	)
LEAF_NODE	2729:18	2729:18	9	;
LEAF_NODE	2730:1	2730:1	5	}
SELECTION	2732:1	2733:5	3	
KEYWORD	2732:1	2732:1	4	else
LEAF_NODE	2732:1	2732:1	5	else
STATEMENTS	2733:5	2733:5	4	
EXPR_STATEMENT	2733:5	2733:21	5	Ascii85Flush ( fd ) ;
EXPR	2733:5	2733:5	6	Ascii85Flush ( fd )
FUNCTION_CALL	2733:5	2733:20	7	Ascii85Flush ( fd )
CALLEE	2733:5	2733:5	8	Ascii85Flush
LEAF_NODE	2733:5	2733:5	9	Ascii85Flush
LEAF_NODE	2733:17	2733:17	8	(
ARGUMENT	2733:18	2733:18	8	fd
FIELD	2733:18	2733:18	9	fd
LEAF_NODE	2733:18	2733:18	10	fd
LEAF_NODE	2733:20	2733:20	8	)
LEAF_NODE	2733:21	2733:21	6	;
SELECTION	2735:1	2736:5	3	
KEYWORD	2735:1	2735:1	4	if
LEAF_NODE	2735:1	2735:1	5	if
LEAF_NODE	2735:4	2735:4	4	(
CONDITION	2735:6	2735:6	4	ascii85_p
EXPR	2735:6	2735:6	5	ascii85_p
FIELD	2735:6	2735:6	6	ascii85_p
LEAF_NODE	2735:6	2735:6	7	ascii85_p
LEAF_NODE	2735:16	2735:16	4	)
STATEMENTS	2736:5	2736:5	4	
EXPR_STATEMENT	2736:5	2736:27	5	_TIFFfree ( ascii85_p ) ;
EXPR	2736:5	2736:5	6	_TIFFfree ( ascii85_p )
FUNCTION_CALL	2736:5	2736:26	7	_TIFFfree ( ascii85_p )
CALLEE	2736:5	2736:5	8	_TIFFfree
LEAF_NODE	2736:5	2736:5	9	_TIFFfree
LEAF_NODE	2736:14	2736:14	8	(
ARGUMENT	2736:16	2736:16	8	ascii85_p
FIELD	2736:16	2736:16	9	ascii85_p
LEAF_NODE	2736:16	2736:16	10	ascii85_p
LEAF_NODE	2736:26	2736:26	8	)
LEAF_NODE	2736:27	2736:27	6	;
EXPR_STATEMENT	2739:1	2739:18	3	_TIFFfree ( tf_buf ) ;
EXPR	2739:1	2739:1	4	_TIFFfree ( tf_buf )
FUNCTION_CALL	2739:1	2739:17	5	_TIFFfree ( tf_buf )
CALLEE	2739:1	2739:1	6	_TIFFfree
LEAF_NODE	2739:1	2739:1	7	_TIFFfree
LEAF_NODE	2739:10	2739:10	6	(
ARGUMENT	2739:11	2739:11	6	tf_buf
FIELD	2739:11	2739:11	7	tf_buf
LEAF_NODE	2739:11	2739:11	8	tf_buf
LEAF_NODE	2739:17	2739:17	6	)
LEAF_NODE	2739:18	2739:18	4	;
LEAF_NODE	2740:0	2740:0	2	}
FUNCTION_DEF	2742:0	2838:0	1	
RETURN_TYPE	2742:0	2742:0	2	void
TYPE_NAME	2742:0	2742:0	3	void
LEAF_NODE	2742:0	2742:0	4	void
FUNCTION_NAME	2743:0	2743:0	2	PSRawDataBW
LEAF_NODE	2743:0	2743:0	3	PSRawDataBW
PARAMETER_LIST	2743:11	2743:51	2	( FILE * fd , TIFF * tif , uint32 w , uint32 h )
LEAF_NODE	2743:11	2743:11	3	(
PARAMETER_DECL	2743:12	2743:18	3	FILE * fd
TYPE	2743:12	2743:16	4	FILE *
TYPE_NAME	2743:12	2743:12	5	FILE
LEAF_NODE	2743:12	2743:12	6	FILE
POINTER	2743:16	2743:16	5	*
LEAF_NODE	2743:16	2743:16	6	*
NAME	2743:18	2743:18	4	fd
LEAF_NODE	2743:18	2743:18	5	fd
LEAF_NODE	2743:20	2743:20	3	,
PARAMETER_DECL	2743:22	2743:28	3	TIFF * tif
TYPE	2743:22	2743:26	4	TIFF *
TYPE_NAME	2743:22	2743:22	5	TIFF
LEAF_NODE	2743:22	2743:22	6	TIFF
POINTER	2743:26	2743:26	5	*
LEAF_NODE	2743:26	2743:26	6	*
NAME	2743:28	2743:28	4	tif
LEAF_NODE	2743:28	2743:28	5	tif
LEAF_NODE	2743:31	2743:31	3	,
PARAMETER_DECL	2743:33	2743:40	3	uint32 w
TYPE	2743:33	2743:33	4	uint32
TYPE_NAME	2743:33	2743:33	5	uint32
LEAF_NODE	2743:33	2743:33	6	uint32
NAME	2743:40	2743:40	4	w
LEAF_NODE	2743:40	2743:40	5	w
LEAF_NODE	2743:41	2743:41	3	,
PARAMETER_DECL	2743:43	2743:50	3	uint32 h
TYPE	2743:43	2743:43	4	uint32
TYPE_NAME	2743:43	2743:43	5	uint32
LEAF_NODE	2743:43	2743:43	6	uint32
NAME	2743:50	2743:50	4	h
LEAF_NODE	2743:50	2743:50	5	h
LEAF_NODE	2743:51	2743:51	3	)
LEAF_NODE	2744:0	2744:0	2	{
STATEMENTS	2745:1	2835:1	2	
SIMPLE_DECL	2745:1	2745:11	3	uint64 * bc ;
VAR_DECL	2745:1	2745:9	4	uint64 * bc
TYPE	2745:1	2745:8	5	uint64 *
TYPE_NAME	2745:1	2745:1	6	uint64
LEAF_NODE	2745:1	2745:1	7	uint64
POINTER	2745:8	2745:8	6	*
LEAF_NODE	2745:8	2745:8	7	*
NAME	2745:9	2745:9	5	bc
LEAF_NODE	2745:9	2745:9	6	bc
LEAF_NODE	2745:11	2745:11	4	;
SIMPLE_DECL	2746:1	2746:15	3	uint32 bufsize ;
VAR_DECL	2746:1	2746:8	4	uint32 bufsize
TYPE	2746:1	2746:1	5	uint32
TYPE_NAME	2746:1	2746:1	6	uint32
LEAF_NODE	2746:1	2746:1	7	uint32
NAME	2746:8	2746:8	5	bufsize
LEAF_NODE	2746:8	2746:8	6	bufsize
LEAF_NODE	2746:15	2746:15	4	;
SIMPLE_DECL	2747:1	2747:23	3	int breaklen ; breaklen = MAXLINE ;
VAR_DECL	2747:1	2747:5	4	int breaklen ; breaklen = MAXLINE
TYPE	2747:1	2747:1	5	int
TYPE_NAME	2747:1	2747:1	6	int
LEAF_NODE	2747:1	2747:1	7	int
NAME	2747:5	2747:5	5	breaklen
LEAF_NODE	2747:5	2747:5	6	breaklen
LEAF_NODE	0:0	0:0	5	;
INIT	2747:5	2747:5	5	breaklen = MAXLINE
ASSIGN	2747:5	2747:16	6	breaklen = MAXLINE
LVAL	2747:5	2747:5	7	breaklen
NAME	2747:5	2747:5	8	breaklen
LEAF_NODE	2747:5	2747:5	9	breaklen
ASSIGN_OP	2747:14	2747:14	7	=
LEAF_NODE	2747:14	2747:14	8	=
RVAL	2747:16	2747:16	7	MAXLINE
FIELD	2747:16	2747:16	8	MAXLINE
LEAF_NODE	2747:16	2747:16	9	MAXLINE
LEAF_NODE	2747:23	2747:23	4	;
SIMPLE_DECL	2748:1	2748:12	3	tmsize_t cc ;
VAR_DECL	2748:1	2748:10	4	tmsize_t cc
TYPE	2748:1	2748:1	5	tmsize_t
TYPE_NAME	2748:1	2748:1	6	tmsize_t
LEAF_NODE	2748:1	2748:1	7	tmsize_t
NAME	2748:10	2748:10	5	cc
LEAF_NODE	2748:10	2748:10	6	cc
LEAF_NODE	2748:12	2748:12	4	;
SIMPLE_DECL	2749:1	2749:17	3	uint16 fillorder ;
VAR_DECL	2749:1	2749:8	4	uint16 fillorder
TYPE	2749:1	2749:1	5	uint16
TYPE_NAME	2749:1	2749:1	6	uint16
LEAF_NODE	2749:1	2749:1	7	uint16
NAME	2749:8	2749:8	5	fillorder
LEAF_NODE	2749:8	2749:8	6	fillorder
LEAF_NODE	2749:17	2749:17	4	;
SIMPLE_DECL	2750:1	2750:22	3	unsigned char * tf_buf ;
VAR_DECL	2750:1	2750:16	4	unsigned char * tf_buf
TYPE	2750:1	2750:15	5	unsigned char *
TYPE_NAME	2750:1	2750:10	6	unsigned char
LEAF_NODE	2750:1	2750:1	7	unsigned
LEAF_NODE	2750:10	2750:10	7	char
POINTER	2750:15	2750:15	6	*
LEAF_NODE	2750:15	2750:15	7	*
NAME	2750:16	2750:16	5	tf_buf
LEAF_NODE	2750:16	2750:16	6	tf_buf
LEAF_NODE	2750:22	2750:22	4	;
SIMPLE_DECL	2751:1	2751:21	3	unsigned char * cp , unsigned char c ;
INIT_DECL_LIST	2751:1	2751:1	4	unsigned char * cp , unsigned char c
VAR_DECL	2751:1	2751:16	5	unsigned char * cp
TYPE	2751:1	2751:15	6	unsigned char *
TYPE_NAME	2751:1	2751:10	7	unsigned char
LEAF_NODE	2751:1	2751:1	8	unsigned
LEAF_NODE	2751:10	2751:10	8	char
POINTER	2751:15	2751:15	7	*
LEAF_NODE	2751:15	2751:15	8	*
NAME	2751:16	2751:16	6	cp
LEAF_NODE	2751:16	2751:16	7	cp
LEAF_NODE	2751:18	2751:18	5	,
VAR_DECL	2751:1	2751:20	5	unsigned char c
TYPE	2751:1	2751:1	6	unsigned char
TYPE_NAME	2751:1	2751:10	7	unsigned char
LEAF_NODE	2751:1	2751:1	8	unsigned
LEAF_NODE	2751:10	2751:10	8	char
NAME	2751:20	2751:20	6	c
LEAF_NODE	2751:20	2751:20	7	c
LEAF_NODE	2751:21	2751:21	4	;
SIMPLE_DECL	2752:1	2752:11	3	tstrip_t s ;
VAR_DECL	2752:1	2752:10	4	tstrip_t s
TYPE	2752:1	2752:1	5	tstrip_t
TYPE_NAME	2752:1	2752:1	6	tstrip_t
LEAF_NODE	2752:1	2752:1	7	tstrip_t
NAME	2752:10	2752:10	5	s
LEAF_NODE	2752:10	2752:10	6	s
LEAF_NODE	2752:11	2752:11	4	;
SIMPLE_DECL	2755:1	2755:20	3	tsize_t ascii85_l ;
VAR_DECL	2755:1	2755:11	4	tsize_t ascii85_l
TYPE	2755:1	2755:1	5	tsize_t
TYPE_NAME	2755:1	2755:1	6	tsize_t
LEAF_NODE	2755:1	2755:1	7	tsize_t
NAME	2755:11	2755:11	5	ascii85_l
LEAF_NODE	2755:11	2755:11	6	ascii85_l
LEAF_NODE	2755:20	2755:20	4	;
SIMPLE_DECL	2756:1	2756:23	3	uint8 * ascii85_p ; ascii85_p = 0 ;
VAR_DECL	2756:1	2756:10	4	uint8 * ascii85_p ; ascii85_p = 0
TYPE	2756:1	2756:8	5	uint8 *
TYPE_NAME	2756:1	2756:1	6	uint8
LEAF_NODE	2756:1	2756:1	7	uint8
POINTER	2756:8	2756:8	6	*
LEAF_NODE	2756:8	2756:8	7	*
NAME	2756:10	2756:10	5	ascii85_p
LEAF_NODE	2756:10	2756:10	6	ascii85_p
LEAF_NODE	0:0	0:0	5	;
INIT	2756:10	2756:10	5	ascii85_p = 0
ASSIGN	2756:10	2756:22	6	ascii85_p = 0
LVAL	2756:10	2756:10	7	ascii85_p
NAME	2756:10	2756:10	8	ascii85_p
LEAF_NODE	2756:10	2756:10	9	ascii85_p
ASSIGN_OP	2756:20	2756:20	7	=
LEAF_NODE	2756:20	2756:20	8	=
RVAL	2756:22	2756:22	7	0
FIELD	2756:22	2756:22	8	0
LEAF_NODE	2756:22	2756:22	9	0
LEAF_NODE	2756:23	2756:23	4	;
EXPR_STATEMENT	2759:1	2759:9	3	( void ) w ;
EXPR	2759:1	2759:8	4	( void ) w
LEAF_NODE	2759:1	2759:1	5	(
TYPE_NAME	2759:2	2759:2	5	void
LEAF_NODE	2759:2	2759:2	6	void
LEAF_NODE	2759:6	2759:6	5	)
FIELD	2759:8	2759:8	5	w
LEAF_NODE	2759:8	2759:8	6	w
LEAF_NODE	2759:9	2759:9	4	;
EXPR_STATEMENT	2759:11	2759:19	3	( void ) h ;
EXPR	2759:11	2759:18	4	( void ) h
LEAF_NODE	2759:11	2759:11	5	(
TYPE_NAME	2759:12	2759:12	5	void
LEAF_NODE	2759:12	2759:12	6	void
LEAF_NODE	2759:16	2759:16	5	)
FIELD	2759:18	2759:18	5	h
LEAF_NODE	2759:18	2759:18	6	h
LEAF_NODE	2759:19	2759:19	4	;
EXPR_STATEMENT	2760:1	2760:58	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & fillorder ) ;
EXPR	2760:1	2760:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & fillorder )
FUNCTION_CALL	2760:1	2760:57	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & fillorder )
CALLEE	2760:1	2760:1	6	TIFFGetFieldDefaulted
LEAF_NODE	2760:1	2760:1	7	TIFFGetFieldDefaulted
LEAF_NODE	2760:22	2760:22	6	(
ARGUMENT	2760:23	2760:23	6	tif
FIELD	2760:23	2760:23	7	tif
LEAF_NODE	2760:23	2760:23	8	tif
LEAF_NODE	2760:26	2760:26	6	,
ARGUMENT	2760:28	2760:28	6	TIFFTAG_FILLORDER
FIELD	2760:28	2760:28	7	TIFFTAG_FILLORDER
LEAF_NODE	2760:28	2760:28	8	TIFFTAG_FILLORDER
LEAF_NODE	2760:45	2760:45	6	,
ARGUMENT	2760:47	2760:47	6	& fillorder
UNARY_EXPR	2760:47	2760:48	7	& fillorder
UNARY_OPERATOR	2760:47	2760:47	8	&
LEAF_NODE	2760:47	2760:47	9	&
FIELD	2760:48	2760:48	8	fillorder
LEAF_NODE	2760:48	2760:48	9	fillorder
LEAF_NODE	2760:57	2760:57	6	)
LEAF_NODE	2760:58	2760:58	4	;
EXPR_STATEMENT	2761:1	2761:48	3	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & bc ) ;
EXPR	2761:1	2761:1	4	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & bc )
FUNCTION_CALL	2761:1	2761:47	5	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & bc )
CALLEE	2761:1	2761:1	6	TIFFGetField
LEAF_NODE	2761:1	2761:1	7	TIFFGetField
LEAF_NODE	2761:13	2761:13	6	(
ARGUMENT	2761:14	2761:14	6	tif
FIELD	2761:14	2761:14	7	tif
LEAF_NODE	2761:14	2761:14	8	tif
LEAF_NODE	2761:17	2761:17	6	,
ARGUMENT	2761:19	2761:19	6	TIFFTAG_STRIPBYTECOUNTS
FIELD	2761:19	2761:19	7	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2761:19	2761:19	8	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2761:42	2761:42	6	,
ARGUMENT	2761:44	2761:44	6	& bc
UNARY_EXPR	2761:44	2761:45	7	& bc
UNARY_OPERATOR	2761:44	2761:44	8	&
LEAF_NODE	2761:44	2761:44	9	&
FIELD	2761:45	2761:45	8	bc
LEAF_NODE	2761:45	2761:45	9	bc
LEAF_NODE	2761:47	2761:47	6	)
LEAF_NODE	2761:48	2761:48	4	;
EXPR_STATEMENT	2767:1	2767:25	3	bufsize = ( uint32 ) bc [ 0 ] ;
EXPR	2767:1	2767:1	4	bufsize = ( uint32 ) bc [ 0 ]
ASSIGN	2767:1	2767:11	5	bufsize = ( uint32 ) bc [ 0 ]
LVAL	2767:1	2767:1	6	bufsize
FIELD	2767:1	2767:1	7	bufsize
LEAF_NODE	2767:1	2767:1	8	bufsize
ASSIGN_OP	2767:9	2767:9	6	=
LEAF_NODE	2767:9	2767:9	7	=
RVAL	2767:11	2767:20	6	( uint32 ) bc [ 0 ]
LEAF_NODE	2767:11	2767:11	7	(
TYPE_NAME	2767:12	2767:12	7	uint32
LEAF_NODE	2767:12	2767:12	8	uint32
LEAF_NODE	2767:18	2767:18	7	)
FIELD	2767:20	2767:24	7	bc [ 0 ]
LEAF_NODE	2767:20	2767:20	8	bc
LEAF_NODE	2767:22	2767:22	8	[
EXPR	2767:23	2767:23	8	0
FIELD	2767:23	2767:23	9	0
LEAF_NODE	2767:23	2767:23	10	0
LEAF_NODE	2767:24	2767:24	8	]
LEAF_NODE	2767:25	2767:25	4	;
ITERATION	2769:1	2769:39	3	
KEYWORD	2769:1	2769:1	4	for
LEAF_NODE	2769:1	2769:1	5	for
LEAF_NODE	2769:5	2769:5	4	(
FOR_INIT	2769:7	2769:12	4	s = 0 ;
EXPR	2769:7	2769:7	5	s = 0
ASSIGN	2769:7	2769:11	6	s = 0
LVAL	2769:7	2769:7	7	s
FIELD	2769:7	2769:7	8	s
LEAF_NODE	2769:7	2769:7	9	s
ASSIGN_OP	2769:9	2769:9	7	=
LEAF_NODE	2769:9	2769:9	8	=
RVAL	2769:11	2769:11	7	0
FIELD	2769:11	2769:11	8	0
LEAF_NODE	2769:11	2769:11	9	0
LEAF_NODE	2769:12	2769:12	5	;
CONDITION	2769:14	2769:14	4	++ s < tf_numberstrips
EXPR	2769:14	2769:20	5	++ s < tf_numberstrips
LEAF_NODE	2769:14	2769:14	6	++
FIELD	2769:16	2769:16	6	s
LEAF_NODE	2769:16	2769:16	7	s
REL_OPERATOR	2769:18	2769:18	6	<
LEAF_NODE	2769:18	2769:18	7	<
FIELD	2769:20	2769:20	6	tf_numberstrips
LEAF_NODE	2769:20	2769:20	7	tf_numberstrips
LEAF_NODE	2769:35	2769:35	4	;
LEAF_NODE	0:0	0:0	4	FOR_EXPR
LEAF_NODE	2769:37	2769:37	4	)
STATEMENTS	2769:39	2772:1	4	
LEAF_NODE	2769:39	2769:39	5	{
STATEMENTS	2770:2	2770:2	5	
SELECTION	2770:2	2771:3	6	
KEYWORD	2770:2	2770:2	7	if
LEAF_NODE	2770:2	2770:2	8	if
LEAF_NODE	2770:5	2770:5	7	(
CONDITION	2770:7	2770:7	7	bc [ s ] > bufsize
EXPR	2770:7	2770:15	8	bc [ s ] > bufsize
FIELD	2770:7	2770:11	9	bc [ s ]
LEAF_NODE	2770:7	2770:7	10	bc
LEAF_NODE	2770:9	2770:9	10	[
EXPR	2770:10	2770:10	10	s
FIELD	2770:10	2770:10	11	s
LEAF_NODE	2770:10	2770:10	12	s
LEAF_NODE	2770:11	2770:11	10	]
REL_OPERATOR	2770:13	2770:13	9	>
LEAF_NODE	2770:13	2770:13	10	>
FIELD	2770:15	2770:15	9	bufsize
LEAF_NODE	2770:15	2770:15	10	bufsize
LEAF_NODE	2770:23	2770:23	7	)
STATEMENTS	2771:3	2771:3	7	
EXPR_STATEMENT	2771:3	2771:27	8	bufsize = ( uint32 ) bc [ s ] ;
EXPR	2771:3	2771:3	9	bufsize = ( uint32 ) bc [ s ]
ASSIGN	2771:3	2771:13	10	bufsize = ( uint32 ) bc [ s ]
LVAL	2771:3	2771:3	11	bufsize
FIELD	2771:3	2771:3	12	bufsize
LEAF_NODE	2771:3	2771:3	13	bufsize
ASSIGN_OP	2771:11	2771:11	11	=
LEAF_NODE	2771:11	2771:11	12	=
RVAL	2771:13	2771:22	11	( uint32 ) bc [ s ]
LEAF_NODE	2771:13	2771:13	12	(
TYPE_NAME	2771:14	2771:14	12	uint32
LEAF_NODE	2771:14	2771:14	13	uint32
LEAF_NODE	2771:20	2771:20	12	)
FIELD	2771:22	2771:26	12	bc [ s ]
LEAF_NODE	2771:22	2771:22	13	bc
LEAF_NODE	2771:24	2771:24	13	[
EXPR	2771:25	2771:25	13	s
FIELD	2771:25	2771:25	14	s
LEAF_NODE	2771:25	2771:25	15	s
LEAF_NODE	2771:26	2771:26	13	]
LEAF_NODE	2771:27	2771:27	9	;
LEAF_NODE	2772:1	2772:1	5	}
EXPR_STATEMENT	2774:1	2774:47	3	tf_buf = ( unsigned char * ) _TIFFmalloc ( bufsize ) ;
EXPR	2774:1	2774:1	4	tf_buf = ( unsigned char * ) _TIFFmalloc ( bufsize )
ASSIGN	2774:1	2774:10	5	tf_buf = ( unsigned char * ) _TIFFmalloc ( bufsize )
LVAL	2774:1	2774:1	6	tf_buf
FIELD	2774:1	2774:1	7	tf_buf
LEAF_NODE	2774:1	2774:1	8	tf_buf
ASSIGN_OP	2774:8	2774:8	6	=
LEAF_NODE	2774:8	2774:8	7	=
RVAL	2774:10	2774:27	6	( unsigned char * ) _TIFFmalloc ( bufsize )
LEAF_NODE	2774:10	2774:10	7	(
TYPE_NAME	2774:11	2774:20	7	unsigned char
LEAF_NODE	2774:11	2774:11	8	unsigned
LEAF_NODE	2774:20	2774:20	8	char
LEAF_NODE	2774:24	2774:24	7	*
LEAF_NODE	2774:25	2774:25	7	)
FUNCTION_CALL	2774:27	2774:46	7	_TIFFmalloc ( bufsize )
CALLEE	2774:27	2774:27	8	_TIFFmalloc
LEAF_NODE	2774:27	2774:27	9	_TIFFmalloc
LEAF_NODE	2774:38	2774:38	8	(
ARGUMENT	2774:39	2774:39	8	bufsize
FIELD	2774:39	2774:39	9	bufsize
LEAF_NODE	2774:39	2774:39	10	bufsize
LEAF_NODE	2774:46	2774:46	8	)
LEAF_NODE	2774:47	2774:47	4	;
SELECTION	2775:1	2775:21	3	
KEYWORD	2775:1	2775:1	4	if
LEAF_NODE	2775:1	2775:1	5	if
LEAF_NODE	2775:4	2775:4	4	(
CONDITION	2775:5	2775:5	4	tf_buf == NULL
EXPR	2775:5	2775:15	5	tf_buf == NULL
FIELD	2775:5	2775:5	6	tf_buf
LEAF_NODE	2775:5	2775:5	7	tf_buf
EQ_OPERATOR	2775:12	2775:12	6	==
LEAF_NODE	2775:12	2775:12	7	==
FIELD	2775:15	2775:15	6	NULL
LEAF_NODE	2775:15	2775:15	7	NULL
LEAF_NODE	2775:19	2775:19	4	)
STATEMENTS	2775:21	2778:1	4	
LEAF_NODE	2775:21	2775:21	5	{
STATEMENTS	2776:2	2777:2	5	
EXPR_STATEMENT	2776:2	2776:50	6	TIFFError ( filename , "No space for strip buffer" ) ;
EXPR	2776:2	2776:2	7	TIFFError ( filename , "No space for strip buffer" )
FUNCTION_CALL	2776:2	2776:49	8	TIFFError ( filename , "No space for strip buffer" )
CALLEE	2776:2	2776:2	9	TIFFError
LEAF_NODE	2776:2	2776:2	10	TIFFError
LEAF_NODE	2776:11	2776:11	9	(
ARGUMENT	2776:12	2776:12	9	filename
FIELD	2776:12	2776:12	10	filename
LEAF_NODE	2776:12	2776:12	11	filename
LEAF_NODE	2776:20	2776:20	9	,
ARGUMENT	2776:22	2776:22	9	"No space for strip buffer"
FIELD	2776:22	2776:22	10	"No space for strip buffer"
LEAF_NODE	2776:22	2776:22	11	"No space for strip buffer"
LEAF_NODE	2776:49	2776:49	9	)
LEAF_NODE	2776:50	2776:50	7	;
JUMP_STATEMENT	2777:2	2777:8	6	return DESTINATION ;
KEYWORD	2777:2	2777:2	7	return
LEAF_NODE	2777:2	2777:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2777:8	2777:8	7	;
LEAF_NODE	2778:1	2778:1	5	}
SELECTION	2781:1	2781:16	3	
KEYWORD	2781:1	2781:1	4	if
LEAF_NODE	2781:1	2781:1	5	if
LEAF_NODE	2781:4	2781:4	4	(
CONDITION	2781:6	2781:6	4	ascii85
EXPR	2781:6	2781:6	5	ascii85
FIELD	2781:6	2781:6	6	ascii85
LEAF_NODE	2781:6	2781:6	7	ascii85
LEAF_NODE	2781:14	2781:14	4	)
STATEMENTS	2781:16	2799:1	4	
LEAF_NODE	2781:16	2781:16	5	{
STATEMENTS	2791:5	2793:5	5	
EXPR_STATEMENT	2791:5	2791:57	6	ascii85_p = _TIFFmalloc ( ( bufsize + ( bufsize / 2 ) ) + 8 ) ;
EXPR	2791:5	2791:5	7	ascii85_p = _TIFFmalloc ( ( bufsize + ( bufsize / 2 ) ) + 8 )
ASSIGN	2791:5	2791:17	8	ascii85_p = _TIFFmalloc ( ( bufsize + ( bufsize / 2 ) ) + 8 )
LVAL	2791:5	2791:5	9	ascii85_p
FIELD	2791:5	2791:5	10	ascii85_p
LEAF_NODE	2791:5	2791:5	11	ascii85_p
ASSIGN_OP	2791:15	2791:15	9	=
LEAF_NODE	2791:15	2791:15	10	=
RVAL	2791:17	2791:17	9	_TIFFmalloc ( ( bufsize + ( bufsize / 2 ) ) + 8 )
FUNCTION_CALL	2791:17	2791:56	10	_TIFFmalloc ( ( bufsize + ( bufsize / 2 ) ) + 8 )
CALLEE	2791:17	2791:17	11	_TIFFmalloc
LEAF_NODE	2791:17	2791:17	12	_TIFFmalloc
LEAF_NODE	2791:28	2791:28	11	(
ARGUMENT	2791:30	2791:54	11	( bufsize + ( bufsize / 2 ) ) + 8
LEAF_NODE	2791:30	2791:30	12	(
FIELD	2791:31	2791:31	12	bufsize
LEAF_NODE	2791:31	2791:31	13	bufsize
LEAF_NODE	2791:38	2791:38	12	+
LEAF_NODE	2791:39	2791:39	12	(
FIELD	2791:40	2791:40	12	bufsize
LEAF_NODE	2791:40	2791:40	13	bufsize
LEAF_NODE	2791:47	2791:47	12	/
FIELD	2791:48	2791:48	12	2
LEAF_NODE	2791:48	2791:48	13	2
LEAF_NODE	2791:49	2791:49	12	)
LEAF_NODE	2791:50	2791:50	12	)
LEAF_NODE	2791:52	2791:52	12	+
FIELD	2791:54	2791:54	12	8
LEAF_NODE	2791:54	2791:54	13	8
LEAF_NODE	2791:56	2791:56	11	)
LEAF_NODE	2791:57	2791:57	7	;
SELECTION	2793:5	2793:23	6	
KEYWORD	2793:5	2793:5	7	if
LEAF_NODE	2793:5	2793:5	8	if
LEAF_NODE	2793:8	2793:8	7	(
CONDITION	2793:10	2793:10	7	! ascii85_p
EXPR	2793:10	2793:10	8	! ascii85_p
UNARY_EXPR	2793:10	2793:11	9	! ascii85_p
UNARY_OPERATOR	2793:10	2793:10	10	!
LEAF_NODE	2793:10	2793:10	11	!
FIELD	2793:11	2793:11	10	ascii85_p
LEAF_NODE	2793:11	2793:11	11	ascii85_p
LEAF_NODE	2793:21	2793:21	7	)
STATEMENTS	2793:23	2798:5	7	
LEAF_NODE	2793:23	2793:23	8	{
STATEMENTS	2794:2	2797:2	8	
EXPR_STATEMENT	2794:2	2794:21	9	_TIFFfree ( tf_buf ) ;
EXPR	2794:2	2794:2	10	_TIFFfree ( tf_buf )
FUNCTION_CALL	2794:2	2794:20	11	_TIFFfree ( tf_buf )
CALLEE	2794:2	2794:2	12	_TIFFfree
LEAF_NODE	2794:2	2794:2	13	_TIFFfree
LEAF_NODE	2794:11	2794:11	12	(
ARGUMENT	2794:13	2794:13	12	tf_buf
FIELD	2794:13	2794:13	13	tf_buf
LEAF_NODE	2794:13	2794:13	14	tf_buf
LEAF_NODE	2794:20	2794:20	12	)
LEAF_NODE	2794:21	2794:21	10	;
EXPR_STATEMENT	2796:2	2796:67	9	TIFFError ( filename , "Cannot allocate ASCII85 encoding buffer." ) ;
EXPR	2796:2	2796:2	10	TIFFError ( filename , "Cannot allocate ASCII85 encoding buffer." )
FUNCTION_CALL	2796:2	2796:66	11	TIFFError ( filename , "Cannot allocate ASCII85 encoding buffer." )
CALLEE	2796:2	2796:2	12	TIFFError
LEAF_NODE	2796:2	2796:2	13	TIFFError
LEAF_NODE	2796:11	2796:11	12	(
ARGUMENT	2796:13	2796:13	12	filename
FIELD	2796:13	2796:13	13	filename
LEAF_NODE	2796:13	2796:13	14	filename
LEAF_NODE	2796:21	2796:21	12	,
ARGUMENT	2796:23	2796:23	12	"Cannot allocate ASCII85 encoding buffer."
FIELD	2796:23	2796:23	13	"Cannot allocate ASCII85 encoding buffer."
LEAF_NODE	2796:23	2796:23	14	"Cannot allocate ASCII85 encoding buffer."
LEAF_NODE	2796:66	2796:66	12	)
LEAF_NODE	2796:67	2796:67	10	;
JUMP_STATEMENT	2797:2	2797:8	9	return DESTINATION ;
KEYWORD	2797:2	2797:2	10	return
LEAF_NODE	2797:2	2797:2	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2797:8	2797:8	10	;
LEAF_NODE	2798:5	2798:5	8	}
LEAF_NODE	2799:1	2799:1	5	}
ITERATION	2802:1	2802:39	3	
KEYWORD	2802:1	2802:1	4	for
LEAF_NODE	2802:1	2802:1	5	for
LEAF_NODE	2802:5	2802:5	4	(
FOR_INIT	2802:6	2802:11	4	s = 0 ;
EXPR	2802:6	2802:6	5	s = 0
ASSIGN	2802:6	2802:10	6	s = 0
LVAL	2802:6	2802:6	7	s
FIELD	2802:6	2802:6	8	s
LEAF_NODE	2802:6	2802:6	9	s
ASSIGN_OP	2802:8	2802:8	7	=
LEAF_NODE	2802:8	2802:8	8	=
RVAL	2802:10	2802:10	7	0
FIELD	2802:10	2802:10	8	0
LEAF_NODE	2802:10	2802:10	9	0
LEAF_NODE	2802:11	2802:11	5	;
CONDITION	2802:13	2802:13	4	s < tf_numberstrips
EXPR	2802:13	2802:17	5	s < tf_numberstrips
FIELD	2802:13	2802:13	6	s
LEAF_NODE	2802:13	2802:13	7	s
REL_OPERATOR	2802:15	2802:15	6	<
LEAF_NODE	2802:15	2802:15	7	<
FIELD	2802:17	2802:17	6	tf_numberstrips
LEAF_NODE	2802:17	2802:17	7	tf_numberstrips
LEAF_NODE	2802:32	2802:32	4	;
FOR_EXPR	2802:34	2802:34	4	s ++
EXPR	2802:34	2802:34	5	s ++
FIELD	2802:34	2802:35	6	s ++
LEAF_NODE	2802:34	2802:34	7	s
LEAF_NODE	2802:35	2802:35	7	++
LEAF_NODE	2802:37	2802:37	4	)
STATEMENTS	2802:39	2831:1	4	
LEAF_NODE	2802:39	2802:39	5	{
STATEMENTS	2803:2	2818:4	5	
EXPR_STATEMENT	2803:2	2803:57	6	cc = TIFFReadRawStrip ( tif , s , tf_buf , ( tmsize_t ) bc [ s ] ) ;
EXPR	2803:2	2803:2	7	cc = TIFFReadRawStrip ( tif , s , tf_buf , ( tmsize_t ) bc [ s ] )
ASSIGN	2803:2	2803:7	8	cc = TIFFReadRawStrip ( tif , s , tf_buf , ( tmsize_t ) bc [ s ] )
LVAL	2803:2	2803:2	9	cc
FIELD	2803:2	2803:2	10	cc
LEAF_NODE	2803:2	2803:2	11	cc
ASSIGN_OP	2803:5	2803:5	9	=
LEAF_NODE	2803:5	2803:5	10	=
RVAL	2803:7	2803:7	9	TIFFReadRawStrip ( tif , s , tf_buf , ( tmsize_t ) bc [ s ] )
FUNCTION_CALL	2803:7	2803:56	10	TIFFReadRawStrip ( tif , s , tf_buf , ( tmsize_t ) bc [ s ] )
CALLEE	2803:7	2803:7	11	TIFFReadRawStrip
LEAF_NODE	2803:7	2803:7	12	TIFFReadRawStrip
LEAF_NODE	2803:23	2803:23	11	(
ARGUMENT	2803:24	2803:24	11	tif
FIELD	2803:24	2803:24	12	tif
LEAF_NODE	2803:24	2803:24	13	tif
LEAF_NODE	2803:27	2803:27	11	,
ARGUMENT	2803:29	2803:29	11	s
FIELD	2803:29	2803:29	12	s
LEAF_NODE	2803:29	2803:29	13	s
LEAF_NODE	2803:30	2803:30	11	,
ARGUMENT	2803:32	2803:32	11	tf_buf
FIELD	2803:32	2803:32	12	tf_buf
LEAF_NODE	2803:32	2803:32	13	tf_buf
LEAF_NODE	2803:38	2803:38	11	,
ARGUMENT	2803:40	2803:51	11	( tmsize_t ) bc [ s ]
LEAF_NODE	2803:40	2803:40	12	(
TYPE_NAME	2803:41	2803:41	12	tmsize_t
LEAF_NODE	2803:41	2803:41	13	tmsize_t
LEAF_NODE	2803:49	2803:49	12	)
FIELD	2803:51	2803:55	12	bc [ s ]
LEAF_NODE	2803:51	2803:51	13	bc
LEAF_NODE	2803:53	2803:53	13	[
EXPR	2803:54	2803:54	13	s
FIELD	2803:54	2803:54	14	s
LEAF_NODE	2803:54	2803:54	15	s
LEAF_NODE	2803:55	2803:55	13	]
LEAF_NODE	2803:56	2803:56	11	)
LEAF_NODE	2803:57	2803:57	7	;
SELECTION	2804:2	2804:14	6	
KEYWORD	2804:2	2804:2	7	if
LEAF_NODE	2804:2	2804:2	8	if
LEAF_NODE	2804:5	2804:5	7	(
CONDITION	2804:6	2804:6	7	cc < 0
EXPR	2804:6	2804:11	8	cc < 0
FIELD	2804:6	2804:6	9	cc
LEAF_NODE	2804:6	2804:6	10	cc
REL_OPERATOR	2804:9	2804:9	9	<
LEAF_NODE	2804:9	2804:9	10	<
FIELD	2804:11	2804:11	9	0
LEAF_NODE	2804:11	2804:11	10	0
LEAF_NODE	2804:12	2804:12	7	)
STATEMENTS	2804:14	2807:2	7	
LEAF_NODE	2804:14	2804:14	8	{
STATEMENTS	2805:3	2806:3	8	
EXPR_STATEMENT	2805:3	2805:42	9	TIFFError ( filename , "Can't read strip" ) ;
EXPR	2805:3	2805:3	10	TIFFError ( filename , "Can't read strip" )
FUNCTION_CALL	2805:3	2805:41	11	TIFFError ( filename , "Can't read strip" )
CALLEE	2805:3	2805:3	12	TIFFError
LEAF_NODE	2805:3	2805:3	13	TIFFError
LEAF_NODE	2805:12	2805:12	12	(
ARGUMENT	2805:13	2805:13	12	filename
FIELD	2805:13	2805:13	13	filename
LEAF_NODE	2805:13	2805:13	14	filename
LEAF_NODE	2805:21	2805:21	12	,
ARGUMENT	2805:23	2805:23	12	"Can't read strip"
FIELD	2805:23	2805:23	13	"Can't read strip"
LEAF_NODE	2805:23	2805:23	14	"Can't read strip"
LEAF_NODE	2805:41	2805:41	12	)
LEAF_NODE	2805:42	2805:42	10	;
JUMP_STATEMENT	2806:3	2806:8	9	break DESTINATION ;
KEYWORD	2806:3	2806:3	10	break
LEAF_NODE	2806:3	2806:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2806:8	2806:8	10	;
LEAF_NODE	2807:2	2807:2	8	}
SELECTION	2808:2	2809:3	6	
KEYWORD	2808:2	2808:2	7	if
LEAF_NODE	2808:2	2808:2	8	if
LEAF_NODE	2808:5	2808:5	7	(
CONDITION	2808:6	2808:6	7	fillorder == FILLORDER_LSB2MSB
EXPR	2808:6	2808:19	8	fillorder == FILLORDER_LSB2MSB
FIELD	2808:6	2808:6	9	fillorder
LEAF_NODE	2808:6	2808:6	10	fillorder
EQ_OPERATOR	2808:16	2808:16	9	==
LEAF_NODE	2808:16	2808:16	10	==
FIELD	2808:19	2808:19	9	FILLORDER_LSB2MSB
LEAF_NODE	2808:19	2808:19	10	FILLORDER_LSB2MSB
LEAF_NODE	2808:36	2808:36	7	)
STATEMENTS	2809:3	2809:3	7	
EXPR_STATEMENT	2809:3	2809:30	8	TIFFReverseBits ( tf_buf , cc ) ;
EXPR	2809:3	2809:3	9	TIFFReverseBits ( tf_buf , cc )
FUNCTION_CALL	2809:3	2809:29	10	TIFFReverseBits ( tf_buf , cc )
CALLEE	2809:3	2809:3	11	TIFFReverseBits
LEAF_NODE	2809:3	2809:3	12	TIFFReverseBits
LEAF_NODE	2809:18	2809:18	11	(
ARGUMENT	2809:19	2809:19	11	tf_buf
FIELD	2809:19	2809:19	12	tf_buf
LEAF_NODE	2809:19	2809:19	13	tf_buf
LEAF_NODE	2809:25	2809:25	11	,
ARGUMENT	2809:27	2809:27	11	cc
FIELD	2809:27	2809:27	12	cc
LEAF_NODE	2809:27	2809:27	13	cc
LEAF_NODE	2809:29	2809:29	11	)
LEAF_NODE	2809:30	2809:30	9	;
SELECTION	2810:2	2810:16	6	
KEYWORD	2810:2	2810:2	7	if
LEAF_NODE	2810:2	2810:2	8	if
LEAF_NODE	2810:5	2810:5	7	(
CONDITION	2810:6	2810:6	7	! ascii85
EXPR	2810:6	2810:6	8	! ascii85
UNARY_EXPR	2810:6	2810:7	9	! ascii85
UNARY_OPERATOR	2810:6	2810:6	10	!
LEAF_NODE	2810:6	2810:6	11	!
FIELD	2810:7	2810:7	10	ascii85
LEAF_NODE	2810:7	2810:7	11	ascii85
LEAF_NODE	2810:14	2810:14	7	)
STATEMENTS	2810:16	2818:2	7	
LEAF_NODE	2810:16	2810:16	8	{
STATEMENTS	2811:3	2817:3	8	
ITERATION	2811:3	2811:35	9	
KEYWORD	2811:3	2811:3	10	for
LEAF_NODE	2811:3	2811:3	11	for
LEAF_NODE	2811:7	2811:7	10	(
FOR_INIT	2811:8	2811:19	10	cp = tf_buf ;
EXPR	2811:8	2811:8	11	cp = tf_buf
ASSIGN	2811:8	2811:13	12	cp = tf_buf
LVAL	2811:8	2811:8	13	cp
FIELD	2811:8	2811:8	14	cp
LEAF_NODE	2811:8	2811:8	15	cp
ASSIGN_OP	2811:11	2811:11	13	=
LEAF_NODE	2811:11	2811:11	14	=
RVAL	2811:13	2811:13	13	tf_buf
FIELD	2811:13	2811:13	14	tf_buf
LEAF_NODE	2811:13	2811:13	15	tf_buf
LEAF_NODE	2811:19	2811:19	11	;
CONDITION	2811:21	2811:21	10	cc > 0
EXPR	2811:21	2811:26	11	cc > 0
FIELD	2811:21	2811:21	12	cc
LEAF_NODE	2811:21	2811:21	13	cc
REL_OPERATOR	2811:24	2811:24	12	>
LEAF_NODE	2811:24	2811:24	13	>
FIELD	2811:26	2811:26	12	0
LEAF_NODE	2811:26	2811:26	13	0
LEAF_NODE	2811:27	2811:27	10	;
FOR_EXPR	2811:29	2811:29	10	cc --
EXPR	2811:29	2811:29	11	cc --
FIELD	2811:29	2811:31	12	cc --
LEAF_NODE	2811:29	2811:29	13	cc
LEAF_NODE	2811:31	2811:31	13	--
LEAF_NODE	2811:33	2811:33	10	)
STATEMENTS	2811:35	2815:3	10	
LEAF_NODE	2811:35	2811:35	11	{
STATEMENTS	2812:4	2814:4	11	
EXPR_STATEMENT	2812:4	2812:28	12	DOBREAK ( breaklen , 1 , fd ) ;
EXPR	2812:4	2812:4	13	DOBREAK ( breaklen , 1 , fd )
FUNCTION_CALL	2812:4	2812:27	14	DOBREAK ( breaklen , 1 , fd )
CALLEE	2812:4	2812:4	15	DOBREAK
LEAF_NODE	2812:4	2812:4	16	DOBREAK
LEAF_NODE	2812:11	2812:11	15	(
ARGUMENT	2812:12	2812:12	15	breaklen
FIELD	2812:12	2812:12	16	breaklen
LEAF_NODE	2812:12	2812:12	17	breaklen
LEAF_NODE	2812:20	2812:20	15	,
ARGUMENT	2812:22	2812:22	15	1
FIELD	2812:22	2812:22	16	1
LEAF_NODE	2812:22	2812:22	17	1
LEAF_NODE	2812:23	2812:23	15	,
ARGUMENT	2812:25	2812:25	15	fd
FIELD	2812:25	2812:25	16	fd
LEAF_NODE	2812:25	2812:25	17	fd
LEAF_NODE	2812:27	2812:27	15	)
LEAF_NODE	2812:28	2812:28	13	;
EXPR_STATEMENT	2813:4	2813:13	12	c = * cp ++ ;
EXPR	2813:4	2813:4	13	c = * cp ++
ASSIGN	2813:4	2813:8	14	c = * cp ++
LVAL	2813:4	2813:4	15	c
FIELD	2813:4	2813:4	16	c
LEAF_NODE	2813:4	2813:4	17	c
ASSIGN_OP	2813:6	2813:6	15	=
LEAF_NODE	2813:6	2813:6	16	=
RVAL	2813:8	2813:8	15	* cp ++
UNARY_EXPR	2813:8	2813:9	16	* cp ++
UNARY_OPERATOR	2813:8	2813:8	17	*
LEAF_NODE	2813:8	2813:8	18	*
FIELD	2813:9	2813:11	17	cp ++
LEAF_NODE	2813:9	2813:9	18	cp
LEAF_NODE	2813:11	2813:11	18	++
LEAF_NODE	2813:13	2813:13	13	;
EXPR_STATEMENT	2814:4	2814:17	12	PUTHEX ( c , fd ) ;
EXPR	2814:4	2814:4	13	PUTHEX ( c , fd )
FUNCTION_CALL	2814:4	2814:16	14	PUTHEX ( c , fd )
CALLEE	2814:4	2814:4	15	PUTHEX
LEAF_NODE	2814:4	2814:4	16	PUTHEX
LEAF_NODE	2814:10	2814:10	15	(
ARGUMENT	2814:11	2814:11	15	c
FIELD	2814:11	2814:11	16	c
LEAF_NODE	2814:11	2814:11	17	c
LEAF_NODE	2814:12	2814:12	15	,
ARGUMENT	2814:14	2814:14	15	fd
FIELD	2814:14	2814:14	16	fd
LEAF_NODE	2814:14	2814:14	17	fd
LEAF_NODE	2814:16	2814:16	15	)
LEAF_NODE	2814:17	2814:17	13	;
LEAF_NODE	2815:3	2815:3	11	}
EXPR_STATEMENT	2816:3	2816:19	9	fputs ( ">\n" , fd ) ;
EXPR	2816:3	2816:3	10	fputs ( ">\n" , fd )
FUNCTION_CALL	2816:3	2816:18	11	fputs ( ">\n" , fd )
CALLEE	2816:3	2816:3	12	fputs
LEAF_NODE	2816:3	2816:3	13	fputs
LEAF_NODE	2816:8	2816:8	12	(
ARGUMENT	2816:9	2816:9	12	">\n"
FIELD	2816:9	2816:9	13	">\n"
LEAF_NODE	2816:9	2816:9	14	">\n"
LEAF_NODE	2816:14	2816:14	12	,
ARGUMENT	2816:16	2816:16	12	fd
FIELD	2816:16	2816:16	13	fd
LEAF_NODE	2816:16	2816:16	14	fd
LEAF_NODE	2816:18	2816:18	12	)
LEAF_NODE	2816:19	2816:19	10	;
EXPR_STATEMENT	2817:3	2817:21	9	breaklen = MAXLINE ;
EXPR	2817:3	2817:3	10	breaklen = MAXLINE
ASSIGN	2817:3	2817:14	11	breaklen = MAXLINE
LVAL	2817:3	2817:3	12	breaklen
FIELD	2817:3	2817:3	13	breaklen
LEAF_NODE	2817:3	2817:3	14	breaklen
ASSIGN_OP	2817:12	2817:12	12	=
LEAF_NODE	2817:12	2817:12	13	=
RVAL	2817:14	2817:14	12	MAXLINE
FIELD	2817:14	2817:14	13	MAXLINE
LEAF_NODE	2817:14	2817:14	14	MAXLINE
LEAF_NODE	2817:21	2817:21	10	;
LEAF_NODE	2818:2	2818:2	8	}
SELECTION	2818:4	2818:9	6	
KEYWORD	2818:4	2818:4	7	else
LEAF_NODE	2818:4	2818:4	8	else
STATEMENTS	2818:9	2830:2	7	
LEAF_NODE	2818:9	2818:9	8	{
STATEMENTS	2819:3	2828:3	8	
EXPR_STATEMENT	2819:3	2819:16	9	Ascii85Init ( ) ;
EXPR	2819:3	2819:3	10	Ascii85Init ( )
FUNCTION_CALL	2819:3	2819:15	11	Ascii85Init ( )
CALLEE	2819:3	2819:3	12	Ascii85Init
LEAF_NODE	2819:3	2819:3	13	Ascii85Init
LEAF_NODE	2819:14	2819:14	12	(
LEAF_NODE	2819:15	2819:15	12	)
LEAF_NODE	2819:16	2819:16	10	;
EXPR_STATEMENT	2821:3	2821:61	9	ascii85_l = Ascii85EncodeBlock ( ascii85_p , 1 , tf_buf , cc ) ;
EXPR	2821:3	2821:3	10	ascii85_l = Ascii85EncodeBlock ( ascii85_p , 1 , tf_buf , cc )
ASSIGN	2821:3	2821:15	11	ascii85_l = Ascii85EncodeBlock ( ascii85_p , 1 , tf_buf , cc )
LVAL	2821:3	2821:3	12	ascii85_l
FIELD	2821:3	2821:3	13	ascii85_l
LEAF_NODE	2821:3	2821:3	14	ascii85_l
ASSIGN_OP	2821:13	2821:13	12	=
LEAF_NODE	2821:13	2821:13	13	=
RVAL	2821:15	2821:15	12	Ascii85EncodeBlock ( ascii85_p , 1 , tf_buf , cc )
FUNCTION_CALL	2821:15	2821:60	13	Ascii85EncodeBlock ( ascii85_p , 1 , tf_buf , cc )
CALLEE	2821:15	2821:15	14	Ascii85EncodeBlock
LEAF_NODE	2821:15	2821:15	15	Ascii85EncodeBlock
LEAF_NODE	2821:33	2821:33	14	(
ARGUMENT	2821:35	2821:35	14	ascii85_p
FIELD	2821:35	2821:35	15	ascii85_p
LEAF_NODE	2821:35	2821:35	16	ascii85_p
LEAF_NODE	2821:44	2821:44	14	,
ARGUMENT	2821:46	2821:46	14	1
FIELD	2821:46	2821:46	15	1
LEAF_NODE	2821:46	2821:46	16	1
LEAF_NODE	2821:47	2821:47	14	,
ARGUMENT	2821:49	2821:49	14	tf_buf
FIELD	2821:49	2821:49	15	tf_buf
LEAF_NODE	2821:49	2821:49	16	tf_buf
LEAF_NODE	2821:55	2821:55	14	,
ARGUMENT	2821:57	2821:57	14	cc
FIELD	2821:57	2821:57	15	cc
LEAF_NODE	2821:57	2821:57	16	cc
LEAF_NODE	2821:60	2821:60	14	)
LEAF_NODE	2821:61	2821:61	10	;
SELECTION	2823:3	2824:4	9	
KEYWORD	2823:3	2823:3	10	if
LEAF_NODE	2823:3	2823:3	11	if
LEAF_NODE	2823:6	2823:6	10	(
CONDITION	2823:8	2823:8	10	ascii85_l > 0
EXPR	2823:8	2823:20	11	ascii85_l > 0
FIELD	2823:8	2823:8	12	ascii85_l
LEAF_NODE	2823:8	2823:8	13	ascii85_l
REL_OPERATOR	2823:18	2823:18	12	>
LEAF_NODE	2823:18	2823:18	13	>
FIELD	2823:20	2823:20	12	0
LEAF_NODE	2823:20	2823:20	13	0
LEAF_NODE	2823:22	2823:22	10	)
STATEMENTS	2824:4	2824:4	10	
EXPR_STATEMENT	2824:4	2824:41	11	fwrite ( ascii85_p , ascii85_l , 1 , fd ) ;
EXPR	2824:4	2824:4	12	fwrite ( ascii85_p , ascii85_l , 1 , fd )
FUNCTION_CALL	2824:4	2824:40	13	fwrite ( ascii85_p , ascii85_l , 1 , fd )
CALLEE	2824:4	2824:4	14	fwrite
LEAF_NODE	2824:4	2824:4	15	fwrite
LEAF_NODE	2824:10	2824:10	14	(
ARGUMENT	2824:12	2824:12	14	ascii85_p
FIELD	2824:12	2824:12	15	ascii85_p
LEAF_NODE	2824:12	2824:12	16	ascii85_p
LEAF_NODE	2824:21	2824:21	14	,
ARGUMENT	2824:23	2824:23	14	ascii85_l
FIELD	2824:23	2824:23	15	ascii85_l
LEAF_NODE	2824:23	2824:23	16	ascii85_l
LEAF_NODE	2824:32	2824:32	14	,
ARGUMENT	2824:34	2824:34	14	1
FIELD	2824:34	2824:34	15	1
LEAF_NODE	2824:34	2824:34	16	1
LEAF_NODE	2824:35	2824:35	14	,
ARGUMENT	2824:37	2824:37	14	fd
FIELD	2824:37	2824:37	15	fd
LEAF_NODE	2824:37	2824:37	16	fd
LEAF_NODE	2824:40	2824:40	14	)
LEAF_NODE	2824:41	2824:41	12	;
ITERATION	2826:3	2827:4	9	
KEYWORD	2826:3	2826:3	10	for
LEAF_NODE	2826:3	2826:3	11	for
LEAF_NODE	2826:7	2826:7	10	(
FOR_INIT	2826:8	2826:19	10	cp = tf_buf ;
EXPR	2826:8	2826:8	11	cp = tf_buf
ASSIGN	2826:8	2826:13	12	cp = tf_buf
LVAL	2826:8	2826:8	13	cp
FIELD	2826:8	2826:8	14	cp
LEAF_NODE	2826:8	2826:8	15	cp
ASSIGN_OP	2826:11	2826:11	13	=
LEAF_NODE	2826:11	2826:11	14	=
RVAL	2826:13	2826:13	13	tf_buf
FIELD	2826:13	2826:13	14	tf_buf
LEAF_NODE	2826:13	2826:13	15	tf_buf
LEAF_NODE	2826:19	2826:19	11	;
CONDITION	2826:21	2826:21	10	cc > 0
EXPR	2826:21	2826:26	11	cc > 0
FIELD	2826:21	2826:21	12	cc
LEAF_NODE	2826:21	2826:21	13	cc
REL_OPERATOR	2826:24	2826:24	12	>
LEAF_NODE	2826:24	2826:24	13	>
FIELD	2826:26	2826:26	12	0
LEAF_NODE	2826:26	2826:26	13	0
LEAF_NODE	2826:27	2826:27	10	;
FOR_EXPR	2826:29	2826:29	10	cc --
EXPR	2826:29	2826:29	11	cc --
FIELD	2826:29	2826:31	12	cc --
LEAF_NODE	2826:29	2826:29	13	cc
LEAF_NODE	2826:31	2826:31	13	--
LEAF_NODE	2826:33	2826:33	10	)
STATEMENTS	2827:4	2827:4	10	
EXPR_STATEMENT	2827:4	2827:25	11	Ascii85Put ( * cp ++ , fd ) ;
EXPR	2827:4	2827:4	12	Ascii85Put ( * cp ++ , fd )
FUNCTION_CALL	2827:4	2827:24	13	Ascii85Put ( * cp ++ , fd )
CALLEE	2827:4	2827:4	14	Ascii85Put
LEAF_NODE	2827:4	2827:4	15	Ascii85Put
LEAF_NODE	2827:14	2827:14	14	(
ARGUMENT	2827:15	2827:15	14	* cp ++
UNARY_EXPR	2827:15	2827:16	15	* cp ++
UNARY_OPERATOR	2827:15	2827:15	16	*
LEAF_NODE	2827:15	2827:15	17	*
FIELD	2827:16	2827:18	16	cp ++
LEAF_NODE	2827:16	2827:16	17	cp
LEAF_NODE	2827:18	2827:18	17	++
LEAF_NODE	2827:20	2827:20	14	,
ARGUMENT	2827:22	2827:22	14	fd
FIELD	2827:22	2827:22	15	fd
LEAF_NODE	2827:22	2827:22	16	fd
LEAF_NODE	2827:24	2827:24	14	)
LEAF_NODE	2827:25	2827:25	12	;
EXPR_STATEMENT	2828:3	2828:19	9	Ascii85Flush ( fd ) ;
EXPR	2828:3	2828:3	10	Ascii85Flush ( fd )
FUNCTION_CALL	2828:3	2828:18	11	Ascii85Flush ( fd )
CALLEE	2828:3	2828:3	12	Ascii85Flush
LEAF_NODE	2828:3	2828:3	13	Ascii85Flush
LEAF_NODE	2828:15	2828:15	12	(
ARGUMENT	2828:16	2828:16	12	fd
FIELD	2828:16	2828:16	13	fd
LEAF_NODE	2828:16	2828:16	14	fd
LEAF_NODE	2828:18	2828:18	12	)
LEAF_NODE	2828:19	2828:19	10	;
LEAF_NODE	2830:2	2830:2	8	}
LEAF_NODE	2831:1	2831:1	5	}
EXPR_STATEMENT	2832:1	2832:27	3	_TIFFfree ( ( char * ) tf_buf ) ;
EXPR	2832:1	2832:1	4	_TIFFfree ( ( char * ) tf_buf )
FUNCTION_CALL	2832:1	2832:26	5	_TIFFfree ( ( char * ) tf_buf )
CALLEE	2832:1	2832:1	6	_TIFFfree
LEAF_NODE	2832:1	2832:1	7	_TIFFfree
LEAF_NODE	2832:10	2832:10	6	(
ARGUMENT	2832:11	2832:20	6	( char * ) tf_buf
LEAF_NODE	2832:11	2832:11	7	(
TYPE_NAME	2832:12	2832:12	7	char
LEAF_NODE	2832:12	2832:12	8	char
LEAF_NODE	2832:17	2832:17	7	*
LEAF_NODE	2832:18	2832:18	7	)
FIELD	2832:20	2832:20	7	tf_buf
LEAF_NODE	2832:20	2832:20	8	tf_buf
LEAF_NODE	2832:26	2832:26	6	)
LEAF_NODE	2832:27	2832:27	4	;
SELECTION	2835:1	2836:2	3	
KEYWORD	2835:1	2835:1	4	if
LEAF_NODE	2835:1	2835:1	5	if
LEAF_NODE	2835:4	2835:4	4	(
CONDITION	2835:6	2835:6	4	ascii85_p
EXPR	2835:6	2835:6	5	ascii85_p
FIELD	2835:6	2835:6	6	ascii85_p
LEAF_NODE	2835:6	2835:6	7	ascii85_p
LEAF_NODE	2835:16	2835:16	4	)
STATEMENTS	2836:2	2836:2	4	
EXPR_STATEMENT	2836:2	2836:24	5	_TIFFfree ( ascii85_p ) ;
EXPR	2836:2	2836:2	6	_TIFFfree ( ascii85_p )
FUNCTION_CALL	2836:2	2836:23	7	_TIFFfree ( ascii85_p )
CALLEE	2836:2	2836:2	8	_TIFFfree
LEAF_NODE	2836:2	2836:2	9	_TIFFfree
LEAF_NODE	2836:11	2836:11	8	(
ARGUMENT	2836:13	2836:13	8	ascii85_p
FIELD	2836:13	2836:13	9	ascii85_p
LEAF_NODE	2836:13	2836:13	10	ascii85_p
LEAF_NODE	2836:23	2836:23	8	)
LEAF_NODE	2836:24	2836:24	6	;
LEAF_NODE	2838:0	2838:0	2	}
FUNCTION_DEF	2840:0	2845:0	1	
RETURN_TYPE	2840:0	2840:0	2	void
TYPE_NAME	2840:0	2840:0	3	void
LEAF_NODE	2840:0	2840:0	4	void
FUNCTION_NAME	2841:0	2841:0	2	Ascii85Init
LEAF_NODE	2841:0	2841:0	3	Ascii85Init
PARAMETER_LIST	2841:11	2841:16	2	( void )
LEAF_NODE	2841:11	2841:11	3	(
PARAMETER_DECL	2841:12	2841:12	3	void
LEAF_NODE	2841:12	2841:12	4	void
LEAF_NODE	2841:16	2841:16	3	)
LEAF_NODE	2842:0	2842:0	2	{
STATEMENTS	2843:1	2844:1	2	
EXPR_STATEMENT	2843:1	2843:28	3	ascii85breaklen = 2 * MAXLINE ;
EXPR	2843:1	2843:1	4	ascii85breaklen = 2 * MAXLINE
ASSIGN	2843:1	2843:19	5	ascii85breaklen = 2 * MAXLINE
LVAL	2843:1	2843:1	6	ascii85breaklen
FIELD	2843:1	2843:1	7	ascii85breaklen
LEAF_NODE	2843:1	2843:1	8	ascii85breaklen
ASSIGN_OP	2843:17	2843:17	6	=
LEAF_NODE	2843:17	2843:17	7	=
RVAL	2843:19	2843:21	6	2 * MAXLINE
FIELD	2843:19	2843:19	7	2
LEAF_NODE	2843:19	2843:19	8	2
LEAF_NODE	2843:20	2843:20	7	*
FIELD	2843:21	2843:21	7	MAXLINE
LEAF_NODE	2843:21	2843:21	8	MAXLINE
LEAF_NODE	2843:28	2843:28	4	;
EXPR_STATEMENT	2844:1	2844:17	3	ascii85count = 0 ;
EXPR	2844:1	2844:1	4	ascii85count = 0
ASSIGN	2844:1	2844:16	5	ascii85count = 0
LVAL	2844:1	2844:1	6	ascii85count
FIELD	2844:1	2844:1	7	ascii85count
LEAF_NODE	2844:1	2844:1	8	ascii85count
ASSIGN_OP	2844:14	2844:14	6	=
LEAF_NODE	2844:14	2844:14	7	=
RVAL	2844:16	2844:16	6	0
FIELD	2844:16	2844:16	7	0
LEAF_NODE	2844:16	2844:16	8	0
LEAF_NODE	2844:17	2844:17	4	;
LEAF_NODE	2845:0	2845:0	2	}
FUNCTION_DEF	2847:0	2874:0	1	
RETURN_TYPE	2847:0	2847:11	2	static char *
LEAF_NODE	2847:0	2847:0	3	static
TYPE_NAME	2847:7	2847:7	3	char
LEAF_NODE	2847:7	2847:7	4	char
LEAF_NODE	2847:11	2847:11	3	*
FUNCTION_NAME	2848:0	2848:0	2	Ascii85Encode
LEAF_NODE	2848:0	2848:0	3	Ascii85Encode
PARAMETER_LIST	2848:13	2848:32	2	( unsigned char * raw )
LEAF_NODE	2848:13	2848:13	3	(
PARAMETER_DECL	2848:14	2848:29	3	unsigned char * raw
TYPE	2848:14	2848:27	4	unsigned char *
TYPE_NAME	2848:14	2848:23	5	unsigned char
LEAF_NODE	2848:14	2848:14	6	unsigned
LEAF_NODE	2848:23	2848:23	6	char
POINTER	2848:27	2848:27	5	*
LEAF_NODE	2848:27	2848:27	6	*
NAME	2848:29	2848:29	4	raw
LEAF_NODE	2848:29	2848:29	5	raw
LEAF_NODE	2848:32	2848:32	3	)
LEAF_NODE	2849:0	2849:0	2	{
STATEMENTS	2850:1	2873:17	2	
LEAF_NODE	2850:1	2850:1	3	static
SIMPLE_DECL	2850:8	2850:23	3	char [ 6 ] encoded ;
VAR_DECL	2850:8	2850:13	4	char [ 6 ] encoded
TYPE	2850:8	2850:20	5	char [ 6 ]
TYPE_NAME	2850:8	2850:8	6	char
LEAF_NODE	2850:8	2850:8	7	char
TYPE_SUFFIX	2850:20	2850:22	6	[ 6 ]
LEAF_NODE	2850:20	2850:20	7	[
FIELD	2850:21	2850:21	7	6
LEAF_NODE	2850:21	2850:21	8	6
LEAF_NODE	2850:22	2850:22	7	]
NAME	2850:13	2850:13	5	encoded
LEAF_NODE	2850:13	2850:13	6	encoded
LEAF_NODE	2850:23	2850:23	4	;
SIMPLE_DECL	2851:1	2851:12	3	uint32 word ;
VAR_DECL	2851:1	2851:8	4	uint32 word
TYPE	2851:1	2851:1	5	uint32
TYPE_NAME	2851:1	2851:1	6	uint32
LEAF_NODE	2851:1	2851:1	7	uint32
NAME	2851:8	2851:8	5	word
LEAF_NODE	2851:8	2851:8	6	word
LEAF_NODE	2851:12	2851:12	4	;
EXPR_STATEMENT	2853:1	2853:57	3	word = ( ( ( raw [ 0 ] << 8 ) + raw [ 1 ] ) << 16 ) + ( raw [ 2 ] << 8 ) + raw [ 3 ] ;
EXPR	2853:1	2853:1	4	word = ( ( ( raw [ 0 ] << 8 ) + raw [ 1 ] ) << 16 ) + ( raw [ 2 ] << 8 ) + raw [ 3 ]
ASSIGN	2853:1	2853:8	5	word = ( ( ( raw [ 0 ] << 8 ) + raw [ 1 ] ) << 16 ) + ( raw [ 2 ] << 8 ) + raw [ 3 ]
LVAL	2853:1	2853:1	6	word
FIELD	2853:1	2853:1	7	word
LEAF_NODE	2853:1	2853:1	8	word
ASSIGN_OP	2853:6	2853:6	6	=
LEAF_NODE	2853:6	2853:6	7	=
RVAL	2853:8	2853:51	6	( ( ( raw [ 0 ] << 8 ) + raw [ 1 ] ) << 16 ) + ( raw [ 2 ] << 8 ) + raw [ 3 ]
LEAF_NODE	2853:8	2853:8	7	(
LEAF_NODE	2853:9	2853:9	7	(
LEAF_NODE	2853:10	2853:10	7	(
FIELD	2853:11	2853:16	7	raw [ 0 ]
LEAF_NODE	2853:11	2853:11	8	raw
LEAF_NODE	2853:14	2853:14	8	[
EXPR	2853:15	2853:15	8	0
FIELD	2853:15	2853:15	9	0
LEAF_NODE	2853:15	2853:15	10	0
LEAF_NODE	2853:16	2853:16	8	]
LEAF_NODE	2853:17	2853:17	7	<<
FIELD	2853:19	2853:19	7	8
LEAF_NODE	2853:19	2853:19	8	8
LEAF_NODE	2853:20	2853:20	7	)
LEAF_NODE	2853:21	2853:21	7	+
FIELD	2853:22	2853:27	7	raw [ 1 ]
LEAF_NODE	2853:22	2853:22	8	raw
LEAF_NODE	2853:25	2853:25	8	[
EXPR	2853:26	2853:26	8	1
FIELD	2853:26	2853:26	9	1
LEAF_NODE	2853:26	2853:26	10	1
LEAF_NODE	2853:27	2853:27	8	]
LEAF_NODE	2853:28	2853:28	7	)
LEAF_NODE	2853:29	2853:29	7	<<
FIELD	2853:31	2853:31	7	16
LEAF_NODE	2853:31	2853:31	8	16
LEAF_NODE	2853:33	2853:33	7	)
LEAF_NODE	2853:35	2853:35	7	+
LEAF_NODE	2853:37	2853:37	7	(
FIELD	2853:38	2853:43	7	raw [ 2 ]
LEAF_NODE	2853:38	2853:38	8	raw
LEAF_NODE	2853:41	2853:41	8	[
EXPR	2853:42	2853:42	8	2
FIELD	2853:42	2853:42	9	2
LEAF_NODE	2853:42	2853:42	10	2
LEAF_NODE	2853:43	2853:43	8	]
LEAF_NODE	2853:44	2853:44	7	<<
FIELD	2853:46	2853:46	7	8
LEAF_NODE	2853:46	2853:46	8	8
LEAF_NODE	2853:47	2853:47	7	)
LEAF_NODE	2853:49	2853:49	7	+
FIELD	2853:51	2853:56	7	raw [ 3 ]
LEAF_NODE	2853:51	2853:51	8	raw
LEAF_NODE	2853:54	2853:54	8	[
EXPR	2853:55	2853:55	8	3
FIELD	2853:55	2853:55	9	3
LEAF_NODE	2853:55	2853:55	10	3
LEAF_NODE	2853:56	2853:56	8	]
LEAF_NODE	2853:57	2853:57	4	;
SELECTION	2854:1	2854:17	3	
KEYWORD	2854:1	2854:1	4	if
LEAF_NODE	2854:1	2854:1	5	if
LEAF_NODE	2854:4	2854:4	4	(
CONDITION	2854:5	2854:5	4	word != 0L
EXPR	2854:5	2854:13	5	word != 0L
FIELD	2854:5	2854:5	6	word
LEAF_NODE	2854:5	2854:5	7	word
EQ_OPERATOR	2854:10	2854:10	6	!=
LEAF_NODE	2854:10	2854:10	7	!=
FIELD	2854:13	2854:13	6	0L
LEAF_NODE	2854:13	2854:13	7	0L
LEAF_NODE	2854:15	2854:15	4	)
STATEMENTS	2854:17	2871:1	4	
LEAF_NODE	2854:17	2854:17	5	{
STATEMENTS	2855:2	2870:2	5	
SIMPLE_DECL	2855:2	2855:10	6	uint32 q ;
VAR_DECL	2855:2	2855:9	7	uint32 q
TYPE	2855:2	2855:2	8	uint32
TYPE_NAME	2855:2	2855:2	9	uint32
LEAF_NODE	2855:2	2855:2	10	uint32
NAME	2855:9	2855:9	8	q
LEAF_NODE	2855:9	2855:9	9	q
LEAF_NODE	2855:10	2855:10	7	;
SIMPLE_DECL	2856:2	2856:11	6	uint16 w1 ;
VAR_DECL	2856:2	2856:9	7	uint16 w1
TYPE	2856:2	2856:2	8	uint16
TYPE_NAME	2856:2	2856:2	9	uint16
LEAF_NODE	2856:2	2856:2	10	uint16
NAME	2856:9	2856:9	8	w1
LEAF_NODE	2856:9	2856:9	9	w1
LEAF_NODE	2856:11	2856:11	7	;
LEAF_NODE	2858:2	2858:2	6	q
LEAF_NODE	2858:4	2858:4	6	=
LEAF_NODE	2858:6	2858:6	6	word
LEAF_NODE	2858:11	2858:11	6	/
LEAF_NODE	2858:13	2858:13	6	(
LEAF_NODE	2858:14	2858:14	6	85L
LEAF_NODE	2858:17	2858:17	6	*
LEAF_NODE	2858:18	2858:18	6	85
LEAF_NODE	2858:20	2858:20	6	*
LEAF_NODE	2858:21	2858:21	6	85
LEAF_NODE	2858:23	2858:23	6	*
LEAF_NODE	2858:24	2858:24	6	85
LEAF_NODE	2858:26	2858:26	6	)
LEAF_NODE	2858:27	2858:27	6	;
EXPR_STATEMENT	2859:2	2859:31	6	encoded [ 0 ] = ( char ) ( q + '!' ) ;
EXPR	2859:2	2859:2	7	encoded [ 0 ] = ( char ) ( q + '!' )
ASSIGN	2859:2	2859:15	8	encoded [ 0 ] = ( char ) ( q + '!' )
LVAL	2859:2	2859:2	9	encoded [ 0 ]
FIELD	2859:2	2859:11	10	encoded [ 0 ]
LEAF_NODE	2859:2	2859:2	11	encoded
LEAF_NODE	2859:9	2859:9	11	[
EXPR	2859:10	2859:10	11	0
FIELD	2859:10	2859:10	12	0
LEAF_NODE	2859:10	2859:10	13	0
LEAF_NODE	2859:11	2859:11	11	]
ASSIGN_OP	2859:13	2859:13	9	=
LEAF_NODE	2859:13	2859:13	10	=
RVAL	2859:15	2859:30	9	( char ) ( q + '!' )
LEAF_NODE	2859:15	2859:15	10	(
TYPE_NAME	2859:16	2859:16	10	char
LEAF_NODE	2859:16	2859:16	11	char
LEAF_NODE	2859:20	2859:20	10	)
LEAF_NODE	2859:22	2859:22	10	(
FIELD	2859:23	2859:23	10	q
LEAF_NODE	2859:23	2859:23	11	q
LEAF_NODE	2859:25	2859:25	10	+
FIELD	2859:27	2859:27	10	'!'
LEAF_NODE	2859:27	2859:27	11	'!'
LEAF_NODE	2859:30	2859:30	10	)
LEAF_NODE	2859:31	2859:31	7	;
LEAF_NODE	2861:2	2861:2	6	word
LEAF_NODE	2861:7	2861:7	6	-=
LEAF_NODE	2861:10	2861:10	6	q
LEAF_NODE	2861:12	2861:12	6	*
LEAF_NODE	2861:14	2861:14	6	(
LEAF_NODE	2861:15	2861:15	6	85L
LEAF_NODE	2861:18	2861:18	6	*
LEAF_NODE	2861:19	2861:19	6	85
LEAF_NODE	2861:21	2861:21	6	*
LEAF_NODE	2861:22	2861:22	6	85
LEAF_NODE	2861:24	2861:24	6	*
LEAF_NODE	2861:25	2861:25	6	85
LEAF_NODE	2861:27	2861:27	6	)
LEAF_NODE	2861:28	2861:28	6	;
LEAF_NODE	2861:30	2861:30	6	q
LEAF_NODE	2861:32	2861:32	6	=
LEAF_NODE	2861:34	2861:34	6	word
LEAF_NODE	2861:39	2861:39	6	/
LEAF_NODE	2861:41	2861:41	6	(
LEAF_NODE	2861:42	2861:42	6	85L
LEAF_NODE	2861:45	2861:45	6	*
LEAF_NODE	2861:46	2861:46	6	85
LEAF_NODE	2861:48	2861:48	6	*
LEAF_NODE	2861:49	2861:49	6	85
LEAF_NODE	2861:51	2861:51	6	)
LEAF_NODE	2861:52	2861:52	6	;
EXPR_STATEMENT	2862:2	2862:31	6	encoded [ 1 ] = ( char ) ( q + '!' ) ;
EXPR	2862:2	2862:2	7	encoded [ 1 ] = ( char ) ( q + '!' )
ASSIGN	2862:2	2862:15	8	encoded [ 1 ] = ( char ) ( q + '!' )
LVAL	2862:2	2862:2	9	encoded [ 1 ]
FIELD	2862:2	2862:11	10	encoded [ 1 ]
LEAF_NODE	2862:2	2862:2	11	encoded
LEAF_NODE	2862:9	2862:9	11	[
EXPR	2862:10	2862:10	11	1
FIELD	2862:10	2862:10	12	1
LEAF_NODE	2862:10	2862:10	13	1
LEAF_NODE	2862:11	2862:11	11	]
ASSIGN_OP	2862:13	2862:13	9	=
LEAF_NODE	2862:13	2862:13	10	=
RVAL	2862:15	2862:30	9	( char ) ( q + '!' )
LEAF_NODE	2862:15	2862:15	10	(
TYPE_NAME	2862:16	2862:16	10	char
LEAF_NODE	2862:16	2862:16	11	char
LEAF_NODE	2862:20	2862:20	10	)
LEAF_NODE	2862:22	2862:22	10	(
FIELD	2862:23	2862:23	10	q
LEAF_NODE	2862:23	2862:23	11	q
LEAF_NODE	2862:25	2862:25	10	+
FIELD	2862:27	2862:27	10	'!'
LEAF_NODE	2862:27	2862:27	11	'!'
LEAF_NODE	2862:30	2862:30	10	)
LEAF_NODE	2862:31	2862:31	7	;
LEAF_NODE	2864:2	2864:2	6	word
LEAF_NODE	2864:7	2864:7	6	-=
LEAF_NODE	2864:10	2864:10	6	q
LEAF_NODE	2864:12	2864:12	6	*
LEAF_NODE	2864:14	2864:14	6	(
LEAF_NODE	2864:15	2864:15	6	85L
LEAF_NODE	2864:18	2864:18	6	*
LEAF_NODE	2864:19	2864:19	6	85
LEAF_NODE	2864:21	2864:21	6	*
LEAF_NODE	2864:22	2864:22	6	85
LEAF_NODE	2864:24	2864:24	6	)
LEAF_NODE	2864:25	2864:25	6	;
EXPR_STATEMENT	2864:27	2864:45	6	q = word / ( 85 * 85 ) ;
EXPR	2864:27	2864:27	7	q = word / ( 85 * 85 )
ASSIGN	2864:27	2864:31	8	q = word / ( 85 * 85 )
LVAL	2864:27	2864:27	9	q
FIELD	2864:27	2864:27	10	q
LEAF_NODE	2864:27	2864:27	11	q
ASSIGN_OP	2864:29	2864:29	9	=
LEAF_NODE	2864:29	2864:29	10	=
RVAL	2864:31	2864:44	9	word / ( 85 * 85 )
FIELD	2864:31	2864:31	10	word
LEAF_NODE	2864:31	2864:31	11	word
LEAF_NODE	2864:36	2864:36	10	/
LEAF_NODE	2864:38	2864:38	10	(
FIELD	2864:39	2864:39	10	85
LEAF_NODE	2864:39	2864:39	11	85
LEAF_NODE	2864:41	2864:41	10	*
FIELD	2864:42	2864:42	10	85
LEAF_NODE	2864:42	2864:42	11	85
LEAF_NODE	2864:44	2864:44	10	)
LEAF_NODE	2864:45	2864:45	7	;
EXPR_STATEMENT	2865:2	2865:31	6	encoded [ 2 ] = ( char ) ( q + '!' ) ;
EXPR	2865:2	2865:2	7	encoded [ 2 ] = ( char ) ( q + '!' )
ASSIGN	2865:2	2865:15	8	encoded [ 2 ] = ( char ) ( q + '!' )
LVAL	2865:2	2865:2	9	encoded [ 2 ]
FIELD	2865:2	2865:11	10	encoded [ 2 ]
LEAF_NODE	2865:2	2865:2	11	encoded
LEAF_NODE	2865:9	2865:9	11	[
EXPR	2865:10	2865:10	11	2
FIELD	2865:10	2865:10	12	2
LEAF_NODE	2865:10	2865:10	13	2
LEAF_NODE	2865:11	2865:11	11	]
ASSIGN_OP	2865:13	2865:13	9	=
LEAF_NODE	2865:13	2865:13	10	=
RVAL	2865:15	2865:30	9	( char ) ( q + '!' )
LEAF_NODE	2865:15	2865:15	10	(
TYPE_NAME	2865:16	2865:16	10	char
LEAF_NODE	2865:16	2865:16	11	char
LEAF_NODE	2865:20	2865:20	10	)
LEAF_NODE	2865:22	2865:22	10	(
FIELD	2865:23	2865:23	10	q
LEAF_NODE	2865:23	2865:23	11	q
LEAF_NODE	2865:25	2865:25	10	+
FIELD	2865:27	2865:27	10	'!'
LEAF_NODE	2865:27	2865:27	11	'!'
LEAF_NODE	2865:30	2865:30	10	)
LEAF_NODE	2865:31	2865:31	7	;
EXPR_STATEMENT	2867:2	2867:35	6	w1 = ( uint16 ) ( word - q * ( 85L * 85 ) ) ;
EXPR	2867:2	2867:2	7	w1 = ( uint16 ) ( word - q * ( 85L * 85 ) )
ASSIGN	2867:2	2867:7	8	w1 = ( uint16 ) ( word - q * ( 85L * 85 ) )
LVAL	2867:2	2867:2	9	w1
FIELD	2867:2	2867:2	10	w1
LEAF_NODE	2867:2	2867:2	11	w1
ASSIGN_OP	2867:5	2867:5	9	=
LEAF_NODE	2867:5	2867:5	10	=
RVAL	2867:7	2867:34	9	( uint16 ) ( word - q * ( 85L * 85 ) )
LEAF_NODE	2867:7	2867:7	10	(
TYPE_NAME	2867:8	2867:8	10	uint16
LEAF_NODE	2867:8	2867:8	11	uint16
LEAF_NODE	2867:14	2867:14	10	)
LEAF_NODE	2867:16	2867:16	10	(
FIELD	2867:17	2867:17	10	word
LEAF_NODE	2867:17	2867:17	11	word
LEAF_NODE	2867:22	2867:22	10	-
FIELD	2867:24	2867:24	10	q
LEAF_NODE	2867:24	2867:24	11	q
LEAF_NODE	2867:25	2867:25	10	*
LEAF_NODE	2867:26	2867:26	10	(
FIELD	2867:27	2867:27	10	85L
LEAF_NODE	2867:27	2867:27	11	85L
LEAF_NODE	2867:30	2867:30	10	*
FIELD	2867:31	2867:31	10	85
LEAF_NODE	2867:31	2867:31	11	85
LEAF_NODE	2867:33	2867:33	10	)
LEAF_NODE	2867:34	2867:34	10	)
LEAF_NODE	2867:35	2867:35	7	;
EXPR_STATEMENT	2868:2	2868:39	6	encoded [ 3 ] = ( char ) ( ( w1 / 85 ) + '!' ) ;
EXPR	2868:2	2868:2	7	encoded [ 3 ] = ( char ) ( ( w1 / 85 ) + '!' )
ASSIGN	2868:2	2868:15	8	encoded [ 3 ] = ( char ) ( ( w1 / 85 ) + '!' )
LVAL	2868:2	2868:2	9	encoded [ 3 ]
FIELD	2868:2	2868:11	10	encoded [ 3 ]
LEAF_NODE	2868:2	2868:2	11	encoded
LEAF_NODE	2868:9	2868:9	11	[
EXPR	2868:10	2868:10	11	3
FIELD	2868:10	2868:10	12	3
LEAF_NODE	2868:10	2868:10	13	3
LEAF_NODE	2868:11	2868:11	11	]
ASSIGN_OP	2868:13	2868:13	9	=
LEAF_NODE	2868:13	2868:13	10	=
RVAL	2868:15	2868:38	9	( char ) ( ( w1 / 85 ) + '!' )
LEAF_NODE	2868:15	2868:15	10	(
TYPE_NAME	2868:16	2868:16	10	char
LEAF_NODE	2868:16	2868:16	11	char
LEAF_NODE	2868:20	2868:20	10	)
LEAF_NODE	2868:22	2868:22	10	(
LEAF_NODE	2868:23	2868:23	10	(
FIELD	2868:24	2868:24	10	w1
LEAF_NODE	2868:24	2868:24	11	w1
LEAF_NODE	2868:27	2868:27	10	/
FIELD	2868:29	2868:29	10	85
LEAF_NODE	2868:29	2868:29	11	85
LEAF_NODE	2868:31	2868:31	10	)
LEAF_NODE	2868:33	2868:33	10	+
FIELD	2868:35	2868:35	10	'!'
LEAF_NODE	2868:35	2868:35	11	'!'
LEAF_NODE	2868:38	2868:38	10	)
LEAF_NODE	2868:39	2868:39	7	;
EXPR_STATEMENT	2869:2	2869:39	6	encoded [ 4 ] = ( char ) ( ( w1 % 85 ) + '!' ) ;
EXPR	2869:2	2869:2	7	encoded [ 4 ] = ( char ) ( ( w1 % 85 ) + '!' )
ASSIGN	2869:2	2869:15	8	encoded [ 4 ] = ( char ) ( ( w1 % 85 ) + '!' )
LVAL	2869:2	2869:2	9	encoded [ 4 ]
FIELD	2869:2	2869:11	10	encoded [ 4 ]
LEAF_NODE	2869:2	2869:2	11	encoded
LEAF_NODE	2869:9	2869:9	11	[
EXPR	2869:10	2869:10	11	4
FIELD	2869:10	2869:10	12	4
LEAF_NODE	2869:10	2869:10	13	4
LEAF_NODE	2869:11	2869:11	11	]
ASSIGN_OP	2869:13	2869:13	9	=
LEAF_NODE	2869:13	2869:13	10	=
RVAL	2869:15	2869:38	9	( char ) ( ( w1 % 85 ) + '!' )
LEAF_NODE	2869:15	2869:15	10	(
TYPE_NAME	2869:16	2869:16	10	char
LEAF_NODE	2869:16	2869:16	11	char
LEAF_NODE	2869:20	2869:20	10	)
LEAF_NODE	2869:22	2869:22	10	(
LEAF_NODE	2869:23	2869:23	10	(
FIELD	2869:24	2869:24	10	w1
LEAF_NODE	2869:24	2869:24	11	w1
LEAF_NODE	2869:27	2869:27	10	%
FIELD	2869:29	2869:29	10	85
LEAF_NODE	2869:29	2869:29	11	85
LEAF_NODE	2869:31	2869:31	10	)
LEAF_NODE	2869:33	2869:33	10	+
FIELD	2869:35	2869:35	10	'!'
LEAF_NODE	2869:35	2869:35	11	'!'
LEAF_NODE	2869:38	2869:38	10	)
LEAF_NODE	2869:39	2869:39	7	;
EXPR_STATEMENT	2870:2	2870:19	6	encoded [ 5 ] = '\0' ;
EXPR	2870:2	2870:2	7	encoded [ 5 ] = '\0'
ASSIGN	2870:2	2870:15	8	encoded [ 5 ] = '\0'
LVAL	2870:2	2870:2	9	encoded [ 5 ]
FIELD	2870:2	2870:11	10	encoded [ 5 ]
LEAF_NODE	2870:2	2870:2	11	encoded
LEAF_NODE	2870:9	2870:9	11	[
EXPR	2870:10	2870:10	11	5
FIELD	2870:10	2870:10	12	5
LEAF_NODE	2870:10	2870:10	13	5
LEAF_NODE	2870:11	2870:11	11	]
ASSIGN_OP	2870:13	2870:13	9	=
LEAF_NODE	2870:13	2870:13	10	=
RVAL	2870:15	2870:15	9	'\0'
FIELD	2870:15	2870:15	10	'\0'
LEAF_NODE	2870:15	2870:15	11	'\0'
LEAF_NODE	2870:19	2870:19	7	;
LEAF_NODE	2871:1	2871:1	5	}
SELECTION	2871:3	2872:2	3	
KEYWORD	2871:3	2871:3	4	else
LEAF_NODE	2871:3	2871:3	5	else
STATEMENTS	2872:2	2872:2	4	
EXPR_STATEMENT	2872:2	2872:37	5	encoded [ 0 ] = 'z' , encoded [ 1 ] = '\0' ;
EXPR	2872:2	2872:20	6	encoded [ 0 ] = 'z' , encoded [ 1 ] = '\0'
ASSIGN	2872:2	2872:15	7	encoded [ 0 ] = 'z'
LVAL	2872:2	2872:2	8	encoded [ 0 ]
FIELD	2872:2	2872:11	9	encoded [ 0 ]
LEAF_NODE	2872:2	2872:2	10	encoded
LEAF_NODE	2872:9	2872:9	10	[
EXPR	2872:10	2872:10	10	0
FIELD	2872:10	2872:10	11	0
LEAF_NODE	2872:10	2872:10	12	0
LEAF_NODE	2872:11	2872:11	10	]
ASSIGN_OP	2872:13	2872:13	8	=
LEAF_NODE	2872:13	2872:13	9	=
RVAL	2872:15	2872:15	8	'z'
FIELD	2872:15	2872:15	9	'z'
LEAF_NODE	2872:15	2872:15	10	'z'
LEAF_NODE	2872:18	2872:18	7	,
ASSIGN	2872:20	2872:33	7	encoded [ 1 ] = '\0'
LVAL	2872:20	2872:20	8	encoded [ 1 ]
FIELD	2872:20	2872:29	9	encoded [ 1 ]
LEAF_NODE	2872:20	2872:20	10	encoded
LEAF_NODE	2872:27	2872:27	10	[
EXPR	2872:28	2872:28	10	1
FIELD	2872:28	2872:28	11	1
LEAF_NODE	2872:28	2872:28	12	1
LEAF_NODE	2872:29	2872:29	10	]
ASSIGN_OP	2872:31	2872:31	8	=
LEAF_NODE	2872:31	2872:31	9	=
RVAL	2872:33	2872:33	8	'\0'
FIELD	2872:33	2872:33	9	'\0'
LEAF_NODE	2872:33	2872:33	10	'\0'
LEAF_NODE	2872:37	2872:37	6	;
LEAF_NODE	2873:1	2873:1	3	return
LEAF_NODE	2873:8	2873:8	3	(
LEAF_NODE	2873:9	2873:9	3	encoded
LEAF_NODE	2873:16	2873:16	3	)
LEAF_NODE	2873:17	2873:17	3	;
LEAF_NODE	2874:0	2874:0	2	}
FUNCTION_DEF	2876:0	2897:0	1	
RETURN_TYPE	2876:0	2876:0	2	void
TYPE_NAME	2876:0	2876:0	3	void
LEAF_NODE	2876:0	2876:0	4	void
FUNCTION_NAME	2877:0	2877:0	2	Ascii85Put
LEAF_NODE	2877:0	2877:0	3	Ascii85Put
PARAMETER_LIST	2877:10	2877:39	2	( unsigned char code , FILE * fd )
LEAF_NODE	2877:10	2877:10	3	(
PARAMETER_DECL	2877:11	2877:25	3	unsigned char code
TYPE	2877:11	2877:11	4	unsigned char
TYPE_NAME	2877:11	2877:20	5	unsigned char
LEAF_NODE	2877:11	2877:11	6	unsigned
LEAF_NODE	2877:20	2877:20	6	char
NAME	2877:25	2877:25	4	code
LEAF_NODE	2877:25	2877:25	5	code
LEAF_NODE	2877:29	2877:29	3	,
PARAMETER_DECL	2877:31	2877:37	3	FILE * fd
TYPE	2877:31	2877:35	4	FILE *
TYPE_NAME	2877:31	2877:31	5	FILE
LEAF_NODE	2877:31	2877:31	6	FILE
POINTER	2877:35	2877:35	5	*
LEAF_NODE	2877:35	2877:35	6	*
NAME	2877:37	2877:37	4	fd
LEAF_NODE	2877:37	2877:37	5	fd
LEAF_NODE	2877:39	2877:39	3	)
LEAF_NODE	2878:0	2878:0	2	{
STATEMENTS	2879:1	2880:1	2	
EXPR_STATEMENT	2879:1	2879:34	3	ascii85buf [ ascii85count ++ ] = code ;
EXPR	2879:1	2879:1	4	ascii85buf [ ascii85count ++ ] = code
ASSIGN	2879:1	2879:30	5	ascii85buf [ ascii85count ++ ] = code
LVAL	2879:1	2879:1	6	ascii85buf [ ascii85count ++ ]
FIELD	2879:1	2879:26	7	ascii85buf [ ascii85count ++ ]
LEAF_NODE	2879:1	2879:1	8	ascii85buf
LEAF_NODE	2879:11	2879:11	8	[
EXPR	2879:12	2879:12	8	ascii85count ++
FIELD	2879:12	2879:24	9	ascii85count ++
LEAF_NODE	2879:12	2879:12	10	ascii85count
LEAF_NODE	2879:24	2879:24	10	++
LEAF_NODE	2879:26	2879:26	8	]
ASSIGN_OP	2879:28	2879:28	6	=
LEAF_NODE	2879:28	2879:28	7	=
RVAL	2879:30	2879:30	6	code
FIELD	2879:30	2879:30	7	code
LEAF_NODE	2879:30	2879:30	8	code
LEAF_NODE	2879:34	2879:34	4	;
SELECTION	2880:1	2880:24	3	
KEYWORD	2880:1	2880:1	4	if
LEAF_NODE	2880:1	2880:1	5	if
LEAF_NODE	2880:4	2880:4	4	(
CONDITION	2880:5	2880:5	4	ascii85count >= 4
EXPR	2880:5	2880:21	5	ascii85count >= 4
FIELD	2880:5	2880:5	6	ascii85count
LEAF_NODE	2880:5	2880:5	7	ascii85count
REL_OPERATOR	2880:18	2880:18	6	>=
LEAF_NODE	2880:18	2880:18	7	>=
FIELD	2880:21	2880:21	6	4
LEAF_NODE	2880:21	2880:21	7	4
LEAF_NODE	2880:22	2880:22	4	)
STATEMENTS	2880:24	2896:1	4	
LEAF_NODE	2880:24	2880:24	5	{
STATEMENTS	2881:2	2895:2	5	
SIMPLE_DECL	2881:2	2881:18	6	unsigned char * p ;
VAR_DECL	2881:2	2881:17	7	unsigned char * p
TYPE	2881:2	2881:15	8	unsigned char *
TYPE_NAME	2881:2	2881:11	9	unsigned char
LEAF_NODE	2881:2	2881:2	10	unsigned
LEAF_NODE	2881:11	2881:11	10	char
POINTER	2881:15	2881:15	9	*
LEAF_NODE	2881:15	2881:15	10	*
NAME	2881:17	2881:17	8	p
LEAF_NODE	2881:17	2881:17	9	p
LEAF_NODE	2881:18	2881:18	7	;
SIMPLE_DECL	2882:2	2882:7	6	int n ;
VAR_DECL	2882:2	2882:6	7	int n
TYPE	2882:2	2882:2	8	int
TYPE_NAME	2882:2	2882:2	9	int
LEAF_NODE	2882:2	2882:2	10	int
NAME	2882:6	2882:6	8	n
LEAF_NODE	2882:6	2882:6	9	n
LEAF_NODE	2882:7	2882:7	7	;
ITERATION	2884:2	2884:65	6	
KEYWORD	2884:2	2884:2	7	for
LEAF_NODE	2884:2	2884:2	8	for
LEAF_NODE	2884:6	2884:6	7	(
FOR_INIT	2884:7	2884:39	7	n = ascii85count , p = ascii85buf ;
EXPR	2884:7	2884:25	8	n = ascii85count , p = ascii85buf
ASSIGN	2884:7	2884:11	9	n = ascii85count
LVAL	2884:7	2884:7	10	n
FIELD	2884:7	2884:7	11	n
LEAF_NODE	2884:7	2884:7	12	n
ASSIGN_OP	2884:9	2884:9	10	=
LEAF_NODE	2884:9	2884:9	11	=
RVAL	2884:11	2884:11	10	ascii85count
FIELD	2884:11	2884:11	11	ascii85count
LEAF_NODE	2884:11	2884:11	12	ascii85count
LEAF_NODE	2884:23	2884:23	9	,
ASSIGN	2884:25	2884:29	9	p = ascii85buf
LVAL	2884:25	2884:25	10	p
FIELD	2884:25	2884:25	11	p
LEAF_NODE	2884:25	2884:25	12	p
ASSIGN_OP	2884:27	2884:27	10	=
LEAF_NODE	2884:27	2884:27	11	=
RVAL	2884:29	2884:29	10	ascii85buf
FIELD	2884:29	2884:29	11	ascii85buf
LEAF_NODE	2884:29	2884:29	12	ascii85buf
LEAF_NODE	2884:39	2884:39	8	;
CONDITION	2884:41	2884:41	7	n >= 4
EXPR	2884:41	2884:46	8	n >= 4
FIELD	2884:41	2884:41	9	n
LEAF_NODE	2884:41	2884:41	10	n
REL_OPERATOR	2884:43	2884:43	9	>=
LEAF_NODE	2884:43	2884:43	10	>=
FIELD	2884:46	2884:46	9	4
LEAF_NODE	2884:46	2884:46	10	4
LEAF_NODE	2884:47	2884:47	7	;
FOR_EXPR	2884:49	2884:49	7	n -= 4 , p += 4
EXPR	2884:49	2884:57	8	n -= 4 , p += 4
ASSIGN	2884:49	2884:54	9	n -= 4
LVAL	2884:49	2884:49	10	n
FIELD	2884:49	2884:49	11	n
LEAF_NODE	2884:49	2884:49	12	n
ASSIGN_OP	2884:51	2884:51	10	-=
LEAF_NODE	2884:51	2884:51	11	-=
RVAL	2884:54	2884:54	10	4
FIELD	2884:54	2884:54	11	4
LEAF_NODE	2884:54	2884:54	12	4
LEAF_NODE	2884:55	2884:55	9	,
ASSIGN	2884:57	2884:62	9	p += 4
LVAL	2884:57	2884:57	10	p
FIELD	2884:57	2884:57	11	p
LEAF_NODE	2884:57	2884:57	12	p
ASSIGN_OP	2884:59	2884:59	10	+=
LEAF_NODE	2884:59	2884:59	11	+=
RVAL	2884:62	2884:62	10	4
FIELD	2884:62	2884:62	11	4
LEAF_NODE	2884:62	2884:62	12	4
LEAF_NODE	2884:63	2884:63	7	)
STATEMENTS	2884:65	2893:2	7	
LEAF_NODE	2884:65	2884:65	8	{
STATEMENTS	2885:3	2886:3	8	
SIMPLE_DECL	2885:3	2885:11	9	char * cp ;
VAR_DECL	2885:3	2885:9	10	char * cp
TYPE	2885:3	2885:7	11	char *
TYPE_NAME	2885:3	2885:3	12	char
LEAF_NODE	2885:3	2885:3	13	char
POINTER	2885:7	2885:7	12	*
LEAF_NODE	2885:7	2885:7	13	*
NAME	2885:9	2885:9	11	cp
LEAF_NODE	2885:9	2885:9	12	cp
LEAF_NODE	2885:11	2885:11	10	;
ITERATION	2886:3	2886:42	9	
KEYWORD	2886:3	2886:3	10	for
LEAF_NODE	2886:3	2886:3	11	for
LEAF_NODE	2886:7	2886:7	10	(
FOR_INIT	2886:8	2886:29	10	cp = Ascii85Encode ( p ) ;
EXPR	2886:8	2886:8	11	cp = Ascii85Encode ( p )
ASSIGN	2886:8	2886:13	12	cp = Ascii85Encode ( p )
LVAL	2886:8	2886:8	13	cp
FIELD	2886:8	2886:8	14	cp
LEAF_NODE	2886:8	2886:8	15	cp
ASSIGN_OP	2886:11	2886:11	13	=
LEAF_NODE	2886:11	2886:11	14	=
RVAL	2886:13	2886:13	13	Ascii85Encode ( p )
FUNCTION_CALL	2886:13	2886:28	14	Ascii85Encode ( p )
CALLEE	2886:13	2886:13	15	Ascii85Encode
LEAF_NODE	2886:13	2886:13	16	Ascii85Encode
LEAF_NODE	2886:26	2886:26	15	(
ARGUMENT	2886:27	2886:27	15	p
FIELD	2886:27	2886:27	16	p
LEAF_NODE	2886:27	2886:27	17	p
LEAF_NODE	2886:28	2886:28	15	)
LEAF_NODE	2886:29	2886:29	11	;
CONDITION	2886:31	2886:31	10	* cp
EXPR	2886:31	2886:31	11	* cp
UNARY_EXPR	2886:31	2886:32	12	* cp
UNARY_OPERATOR	2886:31	2886:31	13	*
LEAF_NODE	2886:31	2886:31	14	*
FIELD	2886:32	2886:32	13	cp
LEAF_NODE	2886:32	2886:32	14	cp
LEAF_NODE	2886:34	2886:34	10	;
FOR_EXPR	2886:36	2886:36	10	cp ++
EXPR	2886:36	2886:36	11	cp ++
FIELD	2886:36	2886:38	12	cp ++
LEAF_NODE	2886:36	2886:36	13	cp
LEAF_NODE	2886:38	2886:38	13	++
LEAF_NODE	2886:40	2886:40	10	)
STATEMENTS	2886:42	2892:3	10	
LEAF_NODE	2886:42	2886:42	11	{
STATEMENTS	2887:4	2888:4	11	
EXPR_STATEMENT	2887:4	2887:17	12	putc ( * cp , fd ) ;
EXPR	2887:4	2887:4	13	putc ( * cp , fd )
FUNCTION_CALL	2887:4	2887:16	14	putc ( * cp , fd )
CALLEE	2887:4	2887:4	15	putc
LEAF_NODE	2887:4	2887:4	16	putc
LEAF_NODE	2887:8	2887:8	15	(
ARGUMENT	2887:9	2887:9	15	* cp
UNARY_EXPR	2887:9	2887:10	16	* cp
UNARY_OPERATOR	2887:9	2887:9	17	*
LEAF_NODE	2887:9	2887:9	18	*
FIELD	2887:10	2887:10	17	cp
LEAF_NODE	2887:10	2887:10	18	cp
LEAF_NODE	2887:12	2887:12	15	,
ARGUMENT	2887:14	2887:14	15	fd
FIELD	2887:14	2887:14	16	fd
LEAF_NODE	2887:14	2887:14	17	fd
LEAF_NODE	2887:16	2887:16	15	)
LEAF_NODE	2887:17	2887:17	13	;
SELECTION	2888:4	2888:32	12	
KEYWORD	2888:4	2888:4	13	if
LEAF_NODE	2888:4	2888:4	14	if
LEAF_NODE	2888:7	2888:7	13	(
CONDITION	2888:8	2888:8	13	-- ascii85breaklen == 0
EXPR	2888:8	2888:29	14	-- ascii85breaklen == 0
LEAF_NODE	2888:8	2888:8	15	--
FIELD	2888:10	2888:10	15	ascii85breaklen
LEAF_NODE	2888:10	2888:10	16	ascii85breaklen
EQ_OPERATOR	2888:26	2888:26	15	==
LEAF_NODE	2888:26	2888:26	16	==
FIELD	2888:29	2888:29	15	0
LEAF_NODE	2888:29	2888:29	16	0
LEAF_NODE	2888:30	2888:30	13	)
STATEMENTS	2888:32	2891:4	13	
LEAF_NODE	2888:32	2888:32	14	{
STATEMENTS	2889:5	2890:5	14	
EXPR_STATEMENT	2889:5	2889:19	15	putc ( '\n' , fd ) ;
EXPR	2889:5	2889:5	16	putc ( '\n' , fd )
FUNCTION_CALL	2889:5	2889:18	17	putc ( '\n' , fd )
CALLEE	2889:5	2889:5	18	putc
LEAF_NODE	2889:5	2889:5	19	putc
LEAF_NODE	2889:9	2889:9	18	(
ARGUMENT	2889:10	2889:10	18	'\n'
FIELD	2889:10	2889:10	19	'\n'
LEAF_NODE	2889:10	2889:10	20	'\n'
LEAF_NODE	2889:14	2889:14	18	,
ARGUMENT	2889:16	2889:16	18	fd
FIELD	2889:16	2889:16	19	fd
LEAF_NODE	2889:16	2889:16	20	fd
LEAF_NODE	2889:18	2889:18	18	)
LEAF_NODE	2889:19	2889:19	16	;
EXPR_STATEMENT	2890:5	2890:32	15	ascii85breaklen = 2 * MAXLINE ;
EXPR	2890:5	2890:5	16	ascii85breaklen = 2 * MAXLINE
ASSIGN	2890:5	2890:23	17	ascii85breaklen = 2 * MAXLINE
LVAL	2890:5	2890:5	18	ascii85breaklen
FIELD	2890:5	2890:5	19	ascii85breaklen
LEAF_NODE	2890:5	2890:5	20	ascii85breaklen
ASSIGN_OP	2890:21	2890:21	18	=
LEAF_NODE	2890:21	2890:21	19	=
RVAL	2890:23	2890:25	18	2 * MAXLINE
FIELD	2890:23	2890:23	19	2
LEAF_NODE	2890:23	2890:23	20	2
LEAF_NODE	2890:24	2890:24	19	*
FIELD	2890:25	2890:25	19	MAXLINE
LEAF_NODE	2890:25	2890:25	20	MAXLINE
LEAF_NODE	2890:32	2890:32	16	;
LEAF_NODE	2891:4	2891:4	14	}
LEAF_NODE	2892:3	2892:3	11	}
LEAF_NODE	2893:2	2893:2	8	}
EXPR_STATEMENT	2894:2	2894:31	6	_TIFFmemcpy ( ascii85buf , p , n ) ;
EXPR	2894:2	2894:2	7	_TIFFmemcpy ( ascii85buf , p , n )
FUNCTION_CALL	2894:2	2894:30	8	_TIFFmemcpy ( ascii85buf , p , n )
CALLEE	2894:2	2894:2	9	_TIFFmemcpy
LEAF_NODE	2894:2	2894:2	10	_TIFFmemcpy
LEAF_NODE	2894:13	2894:13	9	(
ARGUMENT	2894:14	2894:14	9	ascii85buf
FIELD	2894:14	2894:14	10	ascii85buf
LEAF_NODE	2894:14	2894:14	11	ascii85buf
LEAF_NODE	2894:24	2894:24	9	,
ARGUMENT	2894:26	2894:26	9	p
FIELD	2894:26	2894:26	10	p
LEAF_NODE	2894:26	2894:26	11	p
LEAF_NODE	2894:27	2894:27	9	,
ARGUMENT	2894:29	2894:29	9	n
FIELD	2894:29	2894:29	10	n
LEAF_NODE	2894:29	2894:29	11	n
LEAF_NODE	2894:30	2894:30	9	)
LEAF_NODE	2894:31	2894:31	7	;
EXPR_STATEMENT	2895:2	2895:18	6	ascii85count = n ;
EXPR	2895:2	2895:2	7	ascii85count = n
ASSIGN	2895:2	2895:17	8	ascii85count = n
LVAL	2895:2	2895:2	9	ascii85count
FIELD	2895:2	2895:2	10	ascii85count
LEAF_NODE	2895:2	2895:2	11	ascii85count
ASSIGN_OP	2895:15	2895:15	9	=
LEAF_NODE	2895:15	2895:15	10	=
RVAL	2895:17	2895:17	9	n
FIELD	2895:17	2895:17	10	n
LEAF_NODE	2895:17	2895:17	11	n
LEAF_NODE	2895:18	2895:18	7	;
LEAF_NODE	2896:1	2896:1	5	}
LEAF_NODE	2897:0	2897:0	2	}
FUNCTION_DEF	2899:0	2909:0	1	
RETURN_TYPE	2899:0	2899:0	2	void
TYPE_NAME	2899:0	2899:0	3	void
LEAF_NODE	2899:0	2899:0	4	void
FUNCTION_NAME	2900:0	2900:0	2	Ascii85Flush
LEAF_NODE	2900:0	2900:0	3	Ascii85Flush
PARAMETER_LIST	2900:12	2900:21	2	( FILE * fd )
LEAF_NODE	2900:12	2900:12	3	(
PARAMETER_DECL	2900:13	2900:19	3	FILE * fd
TYPE	2900:13	2900:17	4	FILE *
TYPE_NAME	2900:13	2900:13	5	FILE
LEAF_NODE	2900:13	2900:13	6	FILE
POINTER	2900:17	2900:17	5	*
LEAF_NODE	2900:17	2900:17	6	*
NAME	2900:19	2900:19	4	fd
LEAF_NODE	2900:19	2900:19	5	fd
LEAF_NODE	2900:21	2900:21	3	)
LEAF_NODE	2901:0	2901:0	2	{
STATEMENTS	2902:1	2908:1	2	
SELECTION	2902:1	2902:23	3	
KEYWORD	2902:1	2902:1	4	if
LEAF_NODE	2902:1	2902:1	5	if
LEAF_NODE	2902:4	2902:4	4	(
CONDITION	2902:5	2902:5	4	ascii85count > 0
EXPR	2902:5	2902:20	5	ascii85count > 0
FIELD	2902:5	2902:5	6	ascii85count
LEAF_NODE	2902:5	2902:5	7	ascii85count
REL_OPERATOR	2902:18	2902:18	6	>
LEAF_NODE	2902:18	2902:18	7	>
FIELD	2902:20	2902:20	6	0
LEAF_NODE	2902:20	2902:20	7	0
LEAF_NODE	2902:21	2902:21	4	)
STATEMENTS	2902:23	2907:1	4	
LEAF_NODE	2902:23	2902:23	5	{
STATEMENTS	2903:2	2906:2	5	
SIMPLE_DECL	2903:2	2903:11	6	char * res ;
VAR_DECL	2903:2	2903:8	7	char * res
TYPE	2903:2	2903:6	8	char *
TYPE_NAME	2903:2	2903:2	9	char
LEAF_NODE	2903:2	2903:2	10	char
POINTER	2903:6	2903:6	9	*
LEAF_NODE	2903:6	2903:6	10	*
NAME	2903:8	2903:8	8	res
LEAF_NODE	2903:8	2903:8	9	res
LEAF_NODE	2903:11	2903:11	7	;
EXPR_STATEMENT	2904:2	2904:46	6	_TIFFmemset ( & ascii85buf [ ascii85count ] , 0 , 3 ) ;
EXPR	2904:2	2904:2	7	_TIFFmemset ( & ascii85buf [ ascii85count ] , 0 , 3 )
FUNCTION_CALL	2904:2	2904:45	8	_TIFFmemset ( & ascii85buf [ ascii85count ] , 0 , 3 )
CALLEE	2904:2	2904:2	9	_TIFFmemset
LEAF_NODE	2904:2	2904:2	10	_TIFFmemset
LEAF_NODE	2904:13	2904:13	9	(
ARGUMENT	2904:14	2904:14	9	& ascii85buf [ ascii85count ]
UNARY_EXPR	2904:14	2904:15	10	& ascii85buf [ ascii85count ]
UNARY_OPERATOR	2904:14	2904:14	11	&
LEAF_NODE	2904:14	2904:14	12	&
FIELD	2904:15	2904:38	11	ascii85buf [ ascii85count ]
LEAF_NODE	2904:15	2904:15	12	ascii85buf
LEAF_NODE	2904:25	2904:25	12	[
EXPR	2904:26	2904:26	12	ascii85count
FIELD	2904:26	2904:26	13	ascii85count
LEAF_NODE	2904:26	2904:26	14	ascii85count
LEAF_NODE	2904:38	2904:38	12	]
LEAF_NODE	2904:39	2904:39	9	,
ARGUMENT	2904:41	2904:41	9	0
FIELD	2904:41	2904:41	10	0
LEAF_NODE	2904:41	2904:41	11	0
LEAF_NODE	2904:42	2904:42	9	,
ARGUMENT	2904:44	2904:44	9	3
FIELD	2904:44	2904:44	10	3
LEAF_NODE	2904:44	2904:44	11	3
LEAF_NODE	2904:45	2904:45	9	)
LEAF_NODE	2904:46	2904:46	7	;
EXPR_STATEMENT	2905:2	2905:33	6	res = Ascii85Encode ( ascii85buf ) ;
EXPR	2905:2	2905:2	7	res = Ascii85Encode ( ascii85buf )
ASSIGN	2905:2	2905:8	8	res = Ascii85Encode ( ascii85buf )
LVAL	2905:2	2905:2	9	res
FIELD	2905:2	2905:2	10	res
LEAF_NODE	2905:2	2905:2	11	res
ASSIGN_OP	2905:6	2905:6	9	=
LEAF_NODE	2905:6	2905:6	10	=
RVAL	2905:8	2905:8	9	Ascii85Encode ( ascii85buf )
FUNCTION_CALL	2905:8	2905:32	10	Ascii85Encode ( ascii85buf )
CALLEE	2905:8	2905:8	11	Ascii85Encode
LEAF_NODE	2905:8	2905:8	12	Ascii85Encode
LEAF_NODE	2905:21	2905:21	11	(
ARGUMENT	2905:22	2905:22	11	ascii85buf
FIELD	2905:22	2905:22	12	ascii85buf
LEAF_NODE	2905:22	2905:22	13	ascii85buf
LEAF_NODE	2905:32	2905:32	11	)
LEAF_NODE	2905:33	2905:33	7	;
EXPR_STATEMENT	2906:2	2906:63	6	fwrite ( res [ 0 ] == 'z' ? "!!!!" : res , ascii85count + 1 , 1 , fd ) ;
EXPR	2906:2	2906:2	7	fwrite ( res [ 0 ] == 'z' ? "!!!!" : res , ascii85count + 1 , 1 , fd )
FUNCTION_CALL	2906:2	2906:62	8	fwrite ( res [ 0 ] == 'z' ? "!!!!" : res , ascii85count + 1 , 1 , fd )
CALLEE	2906:2	2906:2	9	fwrite
LEAF_NODE	2906:2	2906:2	10	fwrite
LEAF_NODE	2906:8	2906:8	9	(
ARGUMENT	2906:9	2906:9	9	res [ 0 ] == 'z' ? "!!!!" : res
COND_EXPR	2906:9	2906:34	10	res [ 0 ] == 'z' ? "!!!!" : res
CONDITION	2906:9	2906:19	11	res [ 0 ] == 'z'
FIELD	2906:9	2906:14	12	res [ 0 ]
LEAF_NODE	2906:9	2906:9	13	res
LEAF_NODE	2906:12	2906:12	13	[
EXPR	2906:13	2906:13	13	0
FIELD	2906:13	2906:13	14	0
LEAF_NODE	2906:13	2906:13	15	0
LEAF_NODE	2906:14	2906:14	13	]
EQ_OPERATOR	2906:16	2906:16	12	==
LEAF_NODE	2906:16	2906:16	13	==
FIELD	2906:19	2906:19	12	'z'
LEAF_NODE	2906:19	2906:19	13	'z'
LEAF_NODE	2906:23	2906:23	11	?
EXPR	2906:25	2906:25	11	"!!!!"
FIELD	2906:25	2906:25	12	"!!!!"
LEAF_NODE	2906:25	2906:25	13	"!!!!"
LEAF_NODE	2906:32	2906:32	11	:
FIELD	2906:34	2906:34	11	res
LEAF_NODE	2906:34	2906:34	12	res
LEAF_NODE	2906:37	2906:37	9	,
ARGUMENT	2906:39	2906:54	9	ascii85count + 1
FIELD	2906:39	2906:39	10	ascii85count
LEAF_NODE	2906:39	2906:39	11	ascii85count
LEAF_NODE	2906:52	2906:52	10	+
FIELD	2906:54	2906:54	10	1
LEAF_NODE	2906:54	2906:54	11	1
LEAF_NODE	2906:55	2906:55	9	,
ARGUMENT	2906:57	2906:57	9	1
FIELD	2906:57	2906:57	10	1
LEAF_NODE	2906:57	2906:57	11	1
LEAF_NODE	2906:58	2906:58	9	,
ARGUMENT	2906:60	2906:60	9	fd
FIELD	2906:60	2906:60	10	fd
LEAF_NODE	2906:60	2906:60	11	fd
LEAF_NODE	2906:62	2906:62	9	)
LEAF_NODE	2906:63	2906:63	7	;
LEAF_NODE	2907:1	2907:1	5	}
EXPR_STATEMENT	2908:1	2908:18	3	fputs ( "~>\n" , fd ) ;
EXPR	2908:1	2908:1	4	fputs ( "~>\n" , fd )
FUNCTION_CALL	2908:1	2908:17	5	fputs ( "~>\n" , fd )
CALLEE	2908:1	2908:1	6	fputs
LEAF_NODE	2908:1	2908:1	7	fputs
LEAF_NODE	2908:6	2908:6	6	(
ARGUMENT	2908:7	2908:7	6	"~>\n"
FIELD	2908:7	2908:7	7	"~>\n"
LEAF_NODE	2908:7	2908:7	8	"~>\n"
LEAF_NODE	2908:13	2908:13	6	,
ARGUMENT	2908:15	2908:15	6	fd
FIELD	2908:15	2908:15	7	fd
LEAF_NODE	2908:15	2908:15	8	fd
LEAF_NODE	2908:17	2908:17	6	)
LEAF_NODE	2908:18	2908:18	4	;
LEAF_NODE	2909:0	2909:0	2	}
SIMPLE_DECL	2956:4	2956:42	1	char [ 5 ] ascii85 ;
VAR_DECL	2956:4	2956:32	2	char [ 5 ] ascii85
TYPE	2956:4	2956:39	3	char [ 5 ]
TYPE_NAME	2956:4	2956:4	4	char
LEAF_NODE	2956:4	2956:4	5	char
TYPE_SUFFIX	2956:39	2956:41	4	[ 5 ]
LEAF_NODE	2956:39	2956:39	5	[
FIELD	2956:40	2956:40	5	5
LEAF_NODE	2956:40	2956:40	6	5
LEAF_NODE	2956:41	2956:41	5	]
NAME	2956:32	2956:32	3	ascii85
LEAF_NODE	2956:32	2956:32	4	ascii85
LEAF_NODE	2956:42	2956:42	2	;
SIMPLE_DECL	2957:4	2957:41	1	tsize_t ascii85_l ;
VAR_DECL	2957:4	2957:32	2	tsize_t ascii85_l
TYPE	2957:4	2957:4	3	tsize_t
TYPE_NAME	2957:4	2957:4	4	tsize_t
LEAF_NODE	2957:4	2957:4	5	tsize_t
NAME	2957:32	2957:32	3	ascii85_l
LEAF_NODE	2957:32	2957:32	4	ascii85_l
LEAF_NODE	2957:41	2957:41	2	;
SIMPLE_DECL	2958:4	2958:34	1	int rc ;
VAR_DECL	2958:4	2958:32	2	int rc
TYPE	2958:4	2958:4	3	int
TYPE_NAME	2958:4	2958:4	4	int
LEAF_NODE	2958:4	2958:4	5	int
NAME	2958:32	2958:32	3	rc
LEAF_NODE	2958:32	2958:32	4	rc
LEAF_NODE	2958:34	2958:34	2	;
SIMPLE_DECL	2959:4	2959:37	1	uint32 val32 ;
VAR_DECL	2959:4	2959:32	2	uint32 val32
TYPE	2959:4	2959:4	3	uint32
TYPE_NAME	2959:4	2959:4	4	uint32
LEAF_NODE	2959:4	2959:4	5	uint32
NAME	2959:32	2959:32	3	val32
LEAF_NODE	2959:32	2959:32	4	val32
LEAF_NODE	2959:37	2959:37	2	;
SIMPLE_DECL	3014:12	3014:31	1	tsize_t len ;
VAR_DECL	3014:12	3014:28	2	tsize_t len
TYPE	3014:12	3014:12	3	tsize_t
TYPE_NAME	3014:12	3014:12	4	tsize_t
LEAF_NODE	3014:12	3014:12	5	tsize_t
NAME	3014:28	3014:28	3	len
LEAF_NODE	3014:28	3014:28	4	len
LEAF_NODE	3014:31	3014:31	2	;
FUNCTION_DEF	3092:0	3103:0	1	
RETURN_TYPE	3092:0	3092:7	2	static void
LEAF_NODE	3092:0	3092:0	3	static
TYPE_NAME	3092:7	3092:7	3	void
LEAF_NODE	3092:7	3092:7	4	void
FUNCTION_NAME	3093:0	3093:0	2	usage
LEAF_NODE	3093:0	3093:0	3	usage
PARAMETER_LIST	3093:5	3093:14	2	( int code )
LEAF_NODE	3093:5	3093:5	3	(
PARAMETER_DECL	3093:6	3093:10	3	int code
TYPE	3093:6	3093:6	4	int
TYPE_NAME	3093:6	3093:6	5	int
LEAF_NODE	3093:6	3093:6	6	int
NAME	3093:10	3093:10	4	code
LEAF_NODE	3093:10	3093:10	5	code
LEAF_NODE	3093:14	3093:14	3	)
LEAF_NODE	3094:0	3094:0	2	{
STATEMENTS	3095:1	3102:1	2	
SIMPLE_DECL	3095:1	3095:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	3095:1	3095:6	4	char [ BUFSIZ ] buf
TYPE	3095:1	3095:9	5	char [ BUFSIZ ]
TYPE_NAME	3095:1	3095:1	6	char
LEAF_NODE	3095:1	3095:1	7	char
TYPE_SUFFIX	3095:9	3095:16	6	[ BUFSIZ ]
LEAF_NODE	3095:9	3095:9	7	[
FIELD	3095:10	3095:10	7	BUFSIZ
LEAF_NODE	3095:10	3095:10	8	BUFSIZ
LEAF_NODE	3095:16	3095:16	7	]
NAME	3095:6	3095:6	5	buf
LEAF_NODE	3095:6	3095:6	6	buf
LEAF_NODE	3095:17	3095:17	4	;
SIMPLE_DECL	3096:1	3096:6	3	int i ;
VAR_DECL	3096:1	3096:5	4	int i
TYPE	3096:1	3096:1	5	int
TYPE_NAME	3096:1	3096:1	6	int
LEAF_NODE	3096:1	3096:1	7	int
NAME	3096:5	3096:5	5	i
LEAF_NODE	3096:5	3096:5	6	i
LEAF_NODE	3096:6	3096:6	4	;
EXPR_STATEMENT	3098:1	3098:20	3	setbuf ( stderr , buf ) ;
EXPR	3098:1	3098:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	3098:1	3098:19	5	setbuf ( stderr , buf )
CALLEE	3098:1	3098:1	6	setbuf
LEAF_NODE	3098:1	3098:1	7	setbuf
LEAF_NODE	3098:7	3098:7	6	(
ARGUMENT	3098:8	3098:8	6	stderr
FIELD	3098:8	3098:8	7	stderr
LEAF_NODE	3098:8	3098:8	8	stderr
LEAF_NODE	3098:14	3098:14	6	,
ARGUMENT	3098:16	3098:16	6	buf
FIELD	3098:16	3098:16	7	buf
LEAF_NODE	3098:16	3098:16	8	buf
LEAF_NODE	3098:19	3098:19	6	)
LEAF_NODE	3098:20	3098:20	4	;
EXPR_STATEMENT	3099:8	3099:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	3099:8	3099:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	3099:8	3099:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	3099:8	3099:8	6	fprintf
LEAF_NODE	3099:8	3099:8	7	fprintf
LEAF_NODE	3099:15	3099:15	6	(
ARGUMENT	3099:16	3099:16	6	stderr
FIELD	3099:16	3099:16	7	stderr
LEAF_NODE	3099:16	3099:16	8	stderr
LEAF_NODE	3099:22	3099:22	6	,
ARGUMENT	3099:24	3099:24	6	"%s\n\n"
FIELD	3099:24	3099:24	7	"%s\n\n"
LEAF_NODE	3099:24	3099:24	8	"%s\n\n"
LEAF_NODE	3099:32	3099:32	6	,
ARGUMENT	3099:34	3099:34	6	TIFFGetVersion ( )
FUNCTION_CALL	3099:34	3099:49	7	TIFFGetVersion ( )
CALLEE	3099:34	3099:34	8	TIFFGetVersion
LEAF_NODE	3099:34	3099:34	9	TIFFGetVersion
LEAF_NODE	3099:48	3099:48	8	(
LEAF_NODE	3099:49	3099:49	8	)
LEAF_NODE	3099:50	3099:50	6	)
LEAF_NODE	3099:51	3099:51	4	;
ITERATION	3100:1	3101:2	3	
KEYWORD	3100:1	3100:1	4	for
LEAF_NODE	3100:1	3100:1	5	for
LEAF_NODE	3100:5	3100:5	4	(
FOR_INIT	3100:6	3100:11	4	i = 0 ;
EXPR	3100:6	3100:6	5	i = 0
ASSIGN	3100:6	3100:10	6	i = 0
LVAL	3100:6	3100:6	7	i
FIELD	3100:6	3100:6	8	i
LEAF_NODE	3100:6	3100:6	9	i
ASSIGN_OP	3100:8	3100:8	7	=
LEAF_NODE	3100:8	3100:8	8	=
RVAL	3100:10	3100:10	7	0
FIELD	3100:10	3100:10	8	0
LEAF_NODE	3100:10	3100:10	9	0
LEAF_NODE	3100:11	3100:11	5	;
CONDITION	3100:13	3100:13	4	stuff [ i ] != NULL
EXPR	3100:13	3100:25	5	stuff [ i ] != NULL
FIELD	3100:13	3100:20	6	stuff [ i ]
LEAF_NODE	3100:13	3100:13	7	stuff
LEAF_NODE	3100:18	3100:18	7	[
EXPR	3100:19	3100:19	7	i
FIELD	3100:19	3100:19	8	i
LEAF_NODE	3100:19	3100:19	9	i
LEAF_NODE	3100:20	3100:20	7	]
EQ_OPERATOR	3100:22	3100:22	6	!=
LEAF_NODE	3100:22	3100:22	7	!=
FIELD	3100:25	3100:25	6	NULL
LEAF_NODE	3100:25	3100:25	7	NULL
LEAF_NODE	3100:29	3100:29	4	;
FOR_EXPR	3100:31	3100:31	4	i ++
EXPR	3100:31	3100:31	5	i ++
FIELD	3100:31	3100:32	6	i ++
LEAF_NODE	3100:31	3100:31	7	i
LEAF_NODE	3100:32	3100:32	7	++
LEAF_NODE	3100:34	3100:34	4	)
STATEMENTS	3101:2	3101:2	4	
EXPR_STATEMENT	3101:2	3101:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	3101:2	3101:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	3101:2	3101:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	3101:2	3101:2	8	fprintf
LEAF_NODE	3101:2	3101:2	9	fprintf
LEAF_NODE	3101:9	3101:9	8	(
ARGUMENT	3101:10	3101:10	8	stderr
FIELD	3101:10	3101:10	9	stderr
LEAF_NODE	3101:10	3101:10	10	stderr
LEAF_NODE	3101:16	3101:16	8	,
ARGUMENT	3101:18	3101:18	8	"%s\n"
FIELD	3101:18	3101:18	9	"%s\n"
LEAF_NODE	3101:18	3101:18	10	"%s\n"
LEAF_NODE	3101:24	3101:24	8	,
ARGUMENT	3101:26	3101:26	8	stuff [ i ]
FIELD	3101:26	3101:33	9	stuff [ i ]
LEAF_NODE	3101:26	3101:26	10	stuff
LEAF_NODE	3101:31	3101:31	10	[
EXPR	3101:32	3101:32	10	i
FIELD	3101:32	3101:32	11	i
LEAF_NODE	3101:32	3101:32	12	i
LEAF_NODE	3101:33	3101:33	10	]
LEAF_NODE	3101:34	3101:34	8	)
LEAF_NODE	3101:35	3101:35	6	;
EXPR_STATEMENT	3102:1	3102:11	3	exit ( code ) ;
EXPR	3102:1	3102:1	4	exit ( code )
FUNCTION_CALL	3102:1	3102:10	5	exit ( code )
CALLEE	3102:1	3102:1	6	exit
LEAF_NODE	3102:1	3102:1	7	exit
LEAF_NODE	3102:5	3102:5	6	(
ARGUMENT	3102:6	3102:6	6	code
FIELD	3102:6	3102:6	7	code
LEAF_NODE	3102:6	3102:6	8	code
LEAF_NODE	3102:10	3102:10	6	)
LEAF_NODE	3102:11	3102:11	4	;
LEAF_NODE	3103:0	3103:0	2	}
