SOURCE_FILE	55:0	374:0	0	
SIMPLE_DECL	55:0	55:41	1	uint16 compression ; compression = COMPRESSION_PACKBITS ;
VAR_DECL	55:0	55:7	2	uint16 compression ; compression = COMPRESSION_PACKBITS
TYPE	55:0	55:0	3	uint16
TYPE_NAME	55:0	55:0	4	uint16
LEAF_NODE	55:0	55:0	5	uint16
NAME	55:7	55:7	3	compression
LEAF_NODE	55:7	55:7	4	compression
LEAF_NODE	0:0	0:0	3	;
INIT	55:7	55:7	3	compression = COMPRESSION_PACKBITS
ASSIGN	55:7	55:21	4	compression = COMPRESSION_PACKBITS
LVAL	55:7	55:7	5	compression
NAME	55:7	55:7	6	compression
LEAF_NODE	55:7	55:7	7	compression
ASSIGN_OP	55:19	55:19	5	=
LEAF_NODE	55:19	55:19	6	=
RVAL	55:21	55:21	5	COMPRESSION_PACKBITS
FIELD	55:21	55:21	6	COMPRESSION_PACKBITS
LEAF_NODE	55:21	55:21	7	COMPRESSION_PACKBITS
LEAF_NODE	55:41	55:41	2	;
SIMPLE_DECL	56:0	56:33	1	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	56:0	56:7	2	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	56:0	56:0	3	uint32
TYPE_NAME	56:0	56:0	4	uint32
LEAF_NODE	56:0	56:0	5	uint32
NAME	56:7	56:7	3	rowsperstrip
LEAF_NODE	56:7	56:7	4	rowsperstrip
LEAF_NODE	0:0	0:0	3	;
INIT	56:7	56:7	3	rowsperstrip = ( uint32 ) - 1
ASSIGN	56:7	56:22	4	rowsperstrip = ( uint32 ) - 1
LVAL	56:7	56:7	5	rowsperstrip
NAME	56:7	56:7	6	rowsperstrip
LEAF_NODE	56:7	56:7	7	rowsperstrip
ASSIGN_OP	56:20	56:20	5	=
LEAF_NODE	56:20	56:20	6	=
RVAL	56:22	56:31	5	( uint32 ) - 1
LEAF_NODE	56:22	56:22	6	(
TYPE_NAME	56:23	56:23	6	uint32
LEAF_NODE	56:23	56:23	7	uint32
LEAF_NODE	56:29	56:29	6	)
UNARY_EXPR	56:31	56:32	6	- 1
UNARY_OPERATOR	56:31	56:31	7	-
LEAF_NODE	56:31	56:31	8	-
FIELD	56:32	56:32	7	1
LEAF_NODE	56:32	56:32	8	1
LEAF_NODE	56:33	56:33	2	;
SIMPLE_DECL	58:0	58:27	1	uint16 horizSubSampling ; horizSubSampling = 2 ;
VAR_DECL	58:0	58:7	2	uint16 horizSubSampling ; horizSubSampling = 2
TYPE	58:0	58:0	3	uint16
TYPE_NAME	58:0	58:0	4	uint16
LEAF_NODE	58:0	58:0	5	uint16
NAME	58:7	58:7	3	horizSubSampling
LEAF_NODE	58:7	58:7	4	horizSubSampling
LEAF_NODE	0:0	0:0	3	;
INIT	58:7	58:7	3	horizSubSampling = 2
ASSIGN	58:7	58:26	4	horizSubSampling = 2
LVAL	58:7	58:7	5	horizSubSampling
NAME	58:7	58:7	6	horizSubSampling
LEAF_NODE	58:7	58:7	7	horizSubSampling
ASSIGN_OP	58:24	58:24	5	=
LEAF_NODE	58:24	58:24	6	=
RVAL	58:26	58:26	5	2
FIELD	58:26	58:26	6	2
LEAF_NODE	58:26	58:26	7	2
LEAF_NODE	58:27	58:27	2	;
SIMPLE_DECL	59:0	59:26	1	uint16 vertSubSampling ; vertSubSampling = 2 ;
VAR_DECL	59:0	59:7	2	uint16 vertSubSampling ; vertSubSampling = 2
TYPE	59:0	59:0	3	uint16
TYPE_NAME	59:0	59:0	4	uint16
LEAF_NODE	59:0	59:0	5	uint16
NAME	59:7	59:7	3	vertSubSampling
LEAF_NODE	59:7	59:7	4	vertSubSampling
LEAF_NODE	0:0	0:0	3	;
INIT	59:7	59:7	3	vertSubSampling = 2
ASSIGN	59:7	59:25	4	vertSubSampling = 2
LVAL	59:7	59:7	5	vertSubSampling
NAME	59:7	59:7	6	vertSubSampling
LEAF_NODE	59:7	59:7	7	vertSubSampling
ASSIGN_OP	59:23	59:23	5	=
LEAF_NODE	59:23	59:23	6	=
RVAL	59:25	59:25	5	2
FIELD	59:25	59:25	6	2
LEAF_NODE	59:25	59:25	7	2
LEAF_NODE	59:26	59:26	2	;
SIMPLE_DECL	64:7	64:39	1	int tiffcvt ; tiffcvt tiffcvt ( TIFF * in , TIFF * out ) ;
VAR_DECL	64:7	64:11	2	int tiffcvt ; tiffcvt tiffcvt ( TIFF * in , TIFF * out )
TYPE	64:7	64:7	3	int
TYPE_NAME	64:7	64:7	4	int
LEAF_NODE	64:7	64:7	5	int
NAME	64:11	64:11	3	tiffcvt
LEAF_NODE	64:11	64:11	4	tiffcvt
LEAF_NODE	0:0	0:0	3	;
INIT	64:11	64:11	3	tiffcvt tiffcvt ( TIFF * in , TIFF * out )
ASSIGN	64:11	64:18	4	tiffcvt tiffcvt ( TIFF * in , TIFF * out )
LVAL	64:11	64:11	5	tiffcvt
NAME	64:11	64:11	6	tiffcvt
LEAF_NODE	64:11	64:11	7	tiffcvt
ASSIGN_OP	64:11	64:11	5	tiffcvt
NAME	64:11	64:11	6	tiffcvt
LEAF_NODE	64:11	64:11	7	tiffcvt
RVAL	64:18	64:38	5	( TIFF * in , TIFF * out )
LEAF_NODE	64:18	64:18	6	(
EXPR	64:19	64:35	6	TIFF * in , TIFF * out
FIELD	64:19	64:19	7	TIFF
LEAF_NODE	64:19	64:19	8	TIFF
LEAF_NODE	64:23	64:23	7	*
FIELD	64:25	64:25	7	in
LEAF_NODE	64:25	64:25	8	in
LEAF_NODE	64:27	64:27	7	,
FIELD	64:29	64:29	7	TIFF
LEAF_NODE	64:29	64:29	8	TIFF
LEAF_NODE	64:33	64:33	7	*
FIELD	64:35	64:35	7	out
LEAF_NODE	64:35	64:35	8	out
LEAF_NODE	64:38	64:38	6	)
LEAF_NODE	64:39	64:39	2	;
SIMPLE_DECL	66:7	66:33	1	void setupLumaTables ; setupLumaTables setupLumaTables ( void ) ;
VAR_DECL	66:7	66:12	2	void setupLumaTables ; setupLumaTables setupLumaTables ( void )
TYPE	66:7	66:7	3	void
TYPE_NAME	66:7	66:7	4	void
LEAF_NODE	66:7	66:7	5	void
NAME	66:12	66:12	3	setupLumaTables
LEAF_NODE	66:12	66:12	4	setupLumaTables
LEAF_NODE	0:0	0:0	3	;
INIT	66:12	66:12	3	setupLumaTables setupLumaTables ( void )
ASSIGN	66:12	66:27	4	setupLumaTables setupLumaTables ( void )
LVAL	66:12	66:12	5	setupLumaTables
NAME	66:12	66:12	6	setupLumaTables
LEAF_NODE	66:12	66:12	7	setupLumaTables
ASSIGN_OP	66:12	66:12	5	setupLumaTables
NAME	66:12	66:12	6	setupLumaTables
LEAF_NODE	66:12	66:12	7	setupLumaTables
RVAL	66:27	66:32	5	( void )
LEAF_NODE	66:27	66:27	6	(
EXPR	66:28	66:28	6	void
FIELD	66:28	66:28	7	void
LEAF_NODE	66:28	66:28	8	void
LEAF_NODE	66:32	66:32	6	)
LEAF_NODE	66:33	66:33	2	;
FUNCTION_DEF	68:0	140:0	1	
RETURN_TYPE	68:0	68:0	2	int
TYPE_NAME	68:0	68:0	3	int
LEAF_NODE	68:0	68:0	4	int
FUNCTION_NAME	69:0	69:0	2	main
LEAF_NODE	69:0	69:0	3	main
PARAMETER_LIST	69:4	69:27	2	( int argc , char * [ ] argv )
LEAF_NODE	69:4	69:4	3	(
PARAMETER_DECL	69:5	69:9	3	int argc
TYPE	69:5	69:5	4	int
TYPE_NAME	69:5	69:5	5	int
LEAF_NODE	69:5	69:5	6	int
NAME	69:9	69:9	4	argc
LEAF_NODE	69:9	69:9	5	argc
LEAF_NODE	69:13	69:13	3	,
PARAMETER_DECL	69:15	69:21	3	char * [ ] argv
TYPE	69:15	69:25	4	char * [ ]
TYPE_NAME	69:15	69:15	5	char
LEAF_NODE	69:15	69:15	6	char
POINTER	69:19	69:19	5	*
LEAF_NODE	69:19	69:19	6	*
TYPE_SUFFIX	69:25	69:26	5	[ ]
LEAF_NODE	69:25	69:25	6	[
LEAF_NODE	69:26	69:26	6	]
NAME	69:21	69:21	4	argv
LEAF_NODE	69:21	69:21	5	argv
LEAF_NODE	69:27	69:27	3	)
LEAF_NODE	70:0	70:0	2	{
STATEMENTS	71:1	139:1	2	
SIMPLE_DECL	71:1	71:15	3	TIFF * in , TIFF * out ;
INIT_DECL_LIST	71:1	71:1	4	TIFF * in , TIFF * out
VAR_DECL	71:1	71:7	5	TIFF * in
TYPE	71:1	71:6	6	TIFF *
TYPE_NAME	71:1	71:1	7	TIFF
LEAF_NODE	71:1	71:1	8	TIFF
POINTER	71:6	71:6	7	*
LEAF_NODE	71:6	71:6	8	*
NAME	71:7	71:7	6	in
LEAF_NODE	71:7	71:7	7	in
LEAF_NODE	71:9	71:9	5	,
VAR_DECL	71:1	71:12	5	TIFF * out
TYPE	71:1	71:11	6	TIFF *
TYPE_NAME	71:1	71:1	7	TIFF
LEAF_NODE	71:1	71:1	8	TIFF
POINTER	71:11	71:11	7	*
LEAF_NODE	71:11	71:11	8	*
NAME	71:12	71:12	6	out
LEAF_NODE	71:12	71:12	7	out
LEAF_NODE	71:15	71:15	4	;
SIMPLE_DECL	72:1	72:6	3	int c ;
VAR_DECL	72:1	72:5	4	int c
TYPE	72:1	72:1	5	int
TYPE_NAME	72:1	72:1	6	int
LEAF_NODE	72:1	72:1	7	int
NAME	72:5	72:5	5	c
LEAF_NODE	72:5	72:5	6	c
LEAF_NODE	72:6	72:6	4	;
LEAF_NODE	74:1	74:1	3	extern
SIMPLE_DECL	74:8	74:18	3	int optind ;
VAR_DECL	74:8	74:12	4	int optind
TYPE	74:8	74:8	5	int
TYPE_NAME	74:8	74:8	6	int
LEAF_NODE	74:8	74:8	7	int
NAME	74:12	74:12	5	optind
LEAF_NODE	74:12	74:12	6	optind
LEAF_NODE	74:18	74:18	4	;
LEAF_NODE	75:1	75:1	3	extern
SIMPLE_DECL	75:8	75:20	3	char * optarg ;
VAR_DECL	75:8	75:14	4	char * optarg
TYPE	75:8	75:13	5	char *
TYPE_NAME	75:8	75:8	6	char
LEAF_NODE	75:8	75:8	7	char
POINTER	75:13	75:13	6	*
LEAF_NODE	75:13	75:13	7	*
NAME	75:14	75:14	5	optarg
LEAF_NODE	75:14	75:14	6	optarg
LEAF_NODE	75:20	75:20	4	;
ITERATION	78:1	79:2	3	
KEYWORD	78:1	78:1	4	while
LEAF_NODE	78:1	78:1	5	while
LEAF_NODE	78:7	78:7	4	(
CONDITION	78:8	78:8	4	( c = getopt ( argc , argv , "c:h:r:v:z" ) ) != - 1
EXPR	78:8	78:49	5	( c = getopt ( argc , argv , "c:h:r:v:z" ) ) != - 1
LEAF_NODE	78:8	78:8	6	(
ASSIGN	78:9	78:13	6	c = getopt ( argc , argv , "c:h:r:v:z" )
LVAL	78:9	78:9	7	c
FIELD	78:9	78:9	8	c
LEAF_NODE	78:9	78:9	9	c
ASSIGN_OP	78:11	78:11	7	=
LEAF_NODE	78:11	78:11	8	=
RVAL	78:13	78:13	7	getopt ( argc , argv , "c:h:r:v:z" )
FUNCTION_CALL	78:13	78:43	8	getopt ( argc , argv , "c:h:r:v:z" )
CALLEE	78:13	78:13	9	getopt
LEAF_NODE	78:13	78:13	10	getopt
LEAF_NODE	78:19	78:19	9	(
ARGUMENT	78:20	78:20	9	argc
FIELD	78:20	78:20	10	argc
LEAF_NODE	78:20	78:20	11	argc
LEAF_NODE	78:24	78:24	9	,
ARGUMENT	78:26	78:26	9	argv
FIELD	78:26	78:26	10	argv
LEAF_NODE	78:26	78:26	11	argv
LEAF_NODE	78:30	78:30	9	,
ARGUMENT	78:32	78:32	9	"c:h:r:v:z"
FIELD	78:32	78:32	10	"c:h:r:v:z"
LEAF_NODE	78:32	78:32	11	"c:h:r:v:z"
LEAF_NODE	78:43	78:43	9	)
LEAF_NODE	78:44	78:44	6	)
EQ_OPERATOR	78:46	78:46	6	!=
LEAF_NODE	78:46	78:46	7	!=
UNARY_EXPR	78:49	78:50	6	- 1
UNARY_OPERATOR	78:49	78:49	7	-
LEAF_NODE	78:49	78:49	8	-
FIELD	78:50	78:50	7	1
LEAF_NODE	78:50	78:50	8	1
LEAF_NODE	78:51	78:51	4	)
STATEMENTS	79:2	79:2	4	
SELECTION	79:2	79:13	5	
KEYWORD	79:2	79:2	6	switch
LEAF_NODE	79:2	79:2	7	switch
LEAF_NODE	79:9	79:9	6	(
CONDITION	79:10	79:10	6	c
EXPR	79:10	79:10	7	c
FIELD	79:10	79:10	8	c
LEAF_NODE	79:10	79:10	9	c
LEAF_NODE	79:11	79:11	6	)
STATEMENTS	79:13	118:2	6	
LEAF_NODE	79:13	79:13	7	{
STATEMENTS	80:2	116:3	7	
LEAF_NODE	80:2	80:2	8	case
LEAF_NODE	80:7	80:7	8	'c'
LEAF_NODE	80:10	80:10	8	:
SELECTION	81:3	82:7	8	
KEYWORD	81:3	81:3	9	if
LEAF_NODE	81:3	81:3	10	if
LEAF_NODE	81:6	81:6	9	(
CONDITION	81:7	81:7	9	streq ( optarg , "none" )
EXPR	81:7	81:7	10	streq ( optarg , "none" )
FUNCTION_CALL	81:7	81:27	11	streq ( optarg , "none" )
CALLEE	81:7	81:7	12	streq
LEAF_NODE	81:7	81:7	13	streq
LEAF_NODE	81:12	81:12	12	(
ARGUMENT	81:13	81:13	12	optarg
FIELD	81:13	81:13	13	optarg
LEAF_NODE	81:13	81:13	14	optarg
LEAF_NODE	81:19	81:19	12	,
ARGUMENT	81:21	81:21	12	"none"
FIELD	81:21	81:21	13	"none"
LEAF_NODE	81:21	81:21	14	"none"
LEAF_NODE	81:27	81:27	12	)
LEAF_NODE	81:28	81:28	9	)
STATEMENTS	82:7	82:7	9	
EXPR_STATEMENT	82:7	82:37	10	compression = COMPRESSION_NONE ;
EXPR	82:7	82:7	11	compression = COMPRESSION_NONE
ASSIGN	82:7	82:21	12	compression = COMPRESSION_NONE
LVAL	82:7	82:7	13	compression
FIELD	82:7	82:7	14	compression
LEAF_NODE	82:7	82:7	15	compression
ASSIGN_OP	82:19	82:19	13	=
LEAF_NODE	82:19	82:19	14	=
RVAL	82:21	82:21	13	COMPRESSION_NONE
FIELD	82:21	82:21	14	COMPRESSION_NONE
LEAF_NODE	82:21	82:21	15	COMPRESSION_NONE
LEAF_NODE	82:37	82:37	11	;
SELECTION	83:3	83:8	8	
KEYWORD	83:3	83:3	9	else
LEAF_NODE	83:3	83:3	10	else
STATEMENTS	83:8	83:8	9	
SELECTION	83:8	84:7	10	
KEYWORD	83:8	83:8	11	if
LEAF_NODE	83:8	83:8	12	if
LEAF_NODE	83:11	83:11	11	(
CONDITION	83:12	83:12	11	streq ( optarg , "packbits" )
EXPR	83:12	83:12	12	streq ( optarg , "packbits" )
FUNCTION_CALL	83:12	83:36	13	streq ( optarg , "packbits" )
CALLEE	83:12	83:12	14	streq
LEAF_NODE	83:12	83:12	15	streq
LEAF_NODE	83:17	83:17	14	(
ARGUMENT	83:18	83:18	14	optarg
FIELD	83:18	83:18	15	optarg
LEAF_NODE	83:18	83:18	16	optarg
LEAF_NODE	83:24	83:24	14	,
ARGUMENT	83:26	83:26	14	"packbits"
FIELD	83:26	83:26	15	"packbits"
LEAF_NODE	83:26	83:26	16	"packbits"
LEAF_NODE	83:36	83:36	14	)
LEAF_NODE	83:37	83:37	11	)
STATEMENTS	84:7	84:7	11	
EXPR_STATEMENT	84:7	84:41	12	compression = COMPRESSION_PACKBITS ;
EXPR	84:7	84:7	13	compression = COMPRESSION_PACKBITS
ASSIGN	84:7	84:21	14	compression = COMPRESSION_PACKBITS
LVAL	84:7	84:7	15	compression
FIELD	84:7	84:7	16	compression
LEAF_NODE	84:7	84:7	17	compression
ASSIGN_OP	84:19	84:19	15	=
LEAF_NODE	84:19	84:19	16	=
RVAL	84:21	84:21	15	COMPRESSION_PACKBITS
FIELD	84:21	84:21	16	COMPRESSION_PACKBITS
LEAF_NODE	84:21	84:21	17	COMPRESSION_PACKBITS
LEAF_NODE	84:41	84:41	13	;
SELECTION	85:3	85:8	8	
KEYWORD	85:3	85:3	9	else
LEAF_NODE	85:3	85:3	10	else
STATEMENTS	85:8	85:8	9	
SELECTION	85:8	86:7	10	
KEYWORD	85:8	85:8	11	if
LEAF_NODE	85:8	85:8	12	if
LEAF_NODE	85:11	85:11	11	(
CONDITION	85:12	85:12	11	streq ( optarg , "lzw" )
EXPR	85:12	85:12	12	streq ( optarg , "lzw" )
FUNCTION_CALL	85:12	85:31	13	streq ( optarg , "lzw" )
CALLEE	85:12	85:12	14	streq
LEAF_NODE	85:12	85:12	15	streq
LEAF_NODE	85:17	85:17	14	(
ARGUMENT	85:18	85:18	14	optarg
FIELD	85:18	85:18	15	optarg
LEAF_NODE	85:18	85:18	16	optarg
LEAF_NODE	85:24	85:24	14	,
ARGUMENT	85:26	85:26	14	"lzw"
FIELD	85:26	85:26	15	"lzw"
LEAF_NODE	85:26	85:26	16	"lzw"
LEAF_NODE	85:31	85:31	14	)
LEAF_NODE	85:32	85:32	11	)
STATEMENTS	86:7	86:7	11	
EXPR_STATEMENT	86:7	86:36	12	compression = COMPRESSION_LZW ;
EXPR	86:7	86:7	13	compression = COMPRESSION_LZW
ASSIGN	86:7	86:21	14	compression = COMPRESSION_LZW
LVAL	86:7	86:7	15	compression
FIELD	86:7	86:7	16	compression
LEAF_NODE	86:7	86:7	17	compression
ASSIGN_OP	86:19	86:19	15	=
LEAF_NODE	86:19	86:19	16	=
RVAL	86:21	86:21	15	COMPRESSION_LZW
FIELD	86:21	86:21	16	COMPRESSION_LZW
LEAF_NODE	86:21	86:21	17	COMPRESSION_LZW
LEAF_NODE	86:36	86:36	13	;
SELECTION	87:3	87:8	8	
KEYWORD	87:3	87:3	9	else
LEAF_NODE	87:3	87:3	10	else
STATEMENTS	87:8	87:8	9	
SELECTION	87:8	88:7	10	
KEYWORD	87:8	87:8	11	if
LEAF_NODE	87:8	87:8	12	if
LEAF_NODE	87:11	87:11	11	(
CONDITION	87:12	87:12	11	streq ( optarg , "jpeg" )
EXPR	87:12	87:12	12	streq ( optarg , "jpeg" )
FUNCTION_CALL	87:12	87:32	13	streq ( optarg , "jpeg" )
CALLEE	87:12	87:12	14	streq
LEAF_NODE	87:12	87:12	15	streq
LEAF_NODE	87:17	87:17	14	(
ARGUMENT	87:18	87:18	14	optarg
FIELD	87:18	87:18	15	optarg
LEAF_NODE	87:18	87:18	16	optarg
LEAF_NODE	87:24	87:24	14	,
ARGUMENT	87:26	87:26	14	"jpeg"
FIELD	87:26	87:26	15	"jpeg"
LEAF_NODE	87:26	87:26	16	"jpeg"
LEAF_NODE	87:32	87:32	14	)
LEAF_NODE	87:33	87:33	11	)
STATEMENTS	88:7	88:7	11	
EXPR_STATEMENT	88:7	88:37	12	compression = COMPRESSION_JPEG ;
EXPR	88:7	88:7	13	compression = COMPRESSION_JPEG
ASSIGN	88:7	88:21	14	compression = COMPRESSION_JPEG
LVAL	88:7	88:7	15	compression
FIELD	88:7	88:7	16	compression
LEAF_NODE	88:7	88:7	17	compression
ASSIGN_OP	88:19	88:19	15	=
LEAF_NODE	88:19	88:19	16	=
RVAL	88:21	88:21	15	COMPRESSION_JPEG
FIELD	88:21	88:21	16	COMPRESSION_JPEG
LEAF_NODE	88:21	88:21	17	COMPRESSION_JPEG
LEAF_NODE	88:37	88:37	13	;
SELECTION	89:3	89:8	8	
KEYWORD	89:3	89:3	9	else
LEAF_NODE	89:3	89:3	10	else
STATEMENTS	89:8	89:8	9	
SELECTION	89:8	90:7	10	
KEYWORD	89:8	89:8	11	if
LEAF_NODE	89:8	89:8	12	if
LEAF_NODE	89:11	89:11	11	(
CONDITION	89:12	89:12	11	streq ( optarg , "zip" )
EXPR	89:12	89:12	12	streq ( optarg , "zip" )
FUNCTION_CALL	89:12	89:31	13	streq ( optarg , "zip" )
CALLEE	89:12	89:12	14	streq
LEAF_NODE	89:12	89:12	15	streq
LEAF_NODE	89:17	89:17	14	(
ARGUMENT	89:18	89:18	14	optarg
FIELD	89:18	89:18	15	optarg
LEAF_NODE	89:18	89:18	16	optarg
LEAF_NODE	89:24	89:24	14	,
ARGUMENT	89:26	89:26	14	"zip"
FIELD	89:26	89:26	15	"zip"
LEAF_NODE	89:26	89:26	16	"zip"
LEAF_NODE	89:31	89:31	14	)
LEAF_NODE	89:32	89:32	11	)
STATEMENTS	90:7	90:7	11	
EXPR_STATEMENT	90:7	90:46	12	compression = COMPRESSION_ADOBE_DEFLATE ;
EXPR	90:7	90:7	13	compression = COMPRESSION_ADOBE_DEFLATE
ASSIGN	90:7	90:21	14	compression = COMPRESSION_ADOBE_DEFLATE
LVAL	90:7	90:7	15	compression
FIELD	90:7	90:7	16	compression
LEAF_NODE	90:7	90:7	17	compression
ASSIGN_OP	90:19	90:19	15	=
LEAF_NODE	90:19	90:19	16	=
RVAL	90:21	90:21	15	COMPRESSION_ADOBE_DEFLATE
FIELD	90:21	90:21	16	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	90:21	90:21	17	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	90:46	90:46	13	;
SELECTION	91:3	92:7	8	
KEYWORD	91:3	91:3	9	else
LEAF_NODE	91:3	91:3	10	else
STATEMENTS	92:7	92:7	9	
EXPR_STATEMENT	92:7	92:16	10	usage ( - 1 ) ;
EXPR	92:7	92:7	11	usage ( - 1 )
FUNCTION_CALL	92:7	92:15	12	usage ( - 1 )
CALLEE	92:7	92:7	13	usage
LEAF_NODE	92:7	92:7	14	usage
LEAF_NODE	92:12	92:12	13	(
ARGUMENT	92:13	92:13	13	- 1
UNARY_EXPR	92:13	92:14	14	- 1
UNARY_OPERATOR	92:13	92:13	15	-
LEAF_NODE	92:13	92:13	16	-
FIELD	92:14	92:14	15	1
LEAF_NODE	92:14	92:14	16	1
LEAF_NODE	92:15	92:15	13	)
LEAF_NODE	92:16	92:16	11	;
JUMP_STATEMENT	93:3	93:8	8	break DESTINATION ;
KEYWORD	93:3	93:3	9	break
LEAF_NODE	93:3	93:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	93:8	93:8	9	;
LEAF_NODE	94:2	94:2	8	case
LEAF_NODE	94:7	94:7	8	'h'
LEAF_NODE	94:10	94:10	8	:
EXPR_STATEMENT	95:3	95:34	8	horizSubSampling = atoi ( optarg ) ;
EXPR	95:3	95:3	9	horizSubSampling = atoi ( optarg )
ASSIGN	95:3	95:22	10	horizSubSampling = atoi ( optarg )
LVAL	95:3	95:3	11	horizSubSampling
FIELD	95:3	95:3	12	horizSubSampling
LEAF_NODE	95:3	95:3	13	horizSubSampling
ASSIGN_OP	95:20	95:20	11	=
LEAF_NODE	95:20	95:20	12	=
RVAL	95:22	95:22	11	atoi ( optarg )
FUNCTION_CALL	95:22	95:33	12	atoi ( optarg )
CALLEE	95:22	95:22	13	atoi
LEAF_NODE	95:22	95:22	14	atoi
LEAF_NODE	95:26	95:26	13	(
ARGUMENT	95:27	95:27	13	optarg
FIELD	95:27	95:27	14	optarg
LEAF_NODE	95:27	95:27	15	optarg
LEAF_NODE	95:33	95:33	13	)
LEAF_NODE	95:34	95:34	9	;
SELECTION	96:12	97:16	8	
KEYWORD	96:12	96:12	9	if
LEAF_NODE	96:12	96:12	10	if
LEAF_NODE	96:14	96:14	9	(
CONDITION	96:16	96:16	9	horizSubSampling != 1 && horizSubSampling != 2 && horizSubSampling != 4
EXPR	96:16	96:16	10	horizSubSampling != 1 && horizSubSampling != 2 && horizSubSampling != 4
AND	96:16	96:41	11	horizSubSampling != 1 && horizSubSampling != 2 && horizSubSampling != 4
EXPR	96:16	96:36	12	horizSubSampling != 1
FIELD	96:16	96:16	13	horizSubSampling
LEAF_NODE	96:16	96:16	14	horizSubSampling
EQ_OPERATOR	96:33	96:33	13	!=
LEAF_NODE	96:33	96:33	14	!=
FIELD	96:36	96:36	13	1
LEAF_NODE	96:36	96:36	14	1
LEAF_NODE	96:38	96:38	12	&&
EXPR	96:41	96:41	12	horizSubSampling != 2 && horizSubSampling != 4
AND	96:41	96:66	13	horizSubSampling != 2 && horizSubSampling != 4
EXPR	96:41	96:61	14	horizSubSampling != 2
FIELD	96:41	96:41	15	horizSubSampling
LEAF_NODE	96:41	96:41	16	horizSubSampling
EQ_OPERATOR	96:58	96:58	15	!=
LEAF_NODE	96:58	96:58	16	!=
FIELD	96:61	96:61	15	2
LEAF_NODE	96:61	96:61	16	2
LEAF_NODE	96:63	96:63	14	&&
EXPR	96:66	96:86	14	horizSubSampling != 4
FIELD	96:66	96:66	15	horizSubSampling
LEAF_NODE	96:66	96:66	16	horizSubSampling
EQ_OPERATOR	96:83	96:83	15	!=
LEAF_NODE	96:83	96:83	16	!=
FIELD	96:86	96:86	15	4
LEAF_NODE	96:86	96:86	16	4
LEAF_NODE	96:88	96:88	9	)
STATEMENTS	97:16	97:16	9	
EXPR_STATEMENT	97:16	97:25	10	usage ( - 1 ) ;
EXPR	97:16	97:16	11	usage ( - 1 )
FUNCTION_CALL	97:16	97:24	12	usage ( - 1 )
CALLEE	97:16	97:16	13	usage
LEAF_NODE	97:16	97:16	14	usage
LEAF_NODE	97:21	97:21	13	(
ARGUMENT	97:22	97:22	13	- 1
UNARY_EXPR	97:22	97:23	14	- 1
UNARY_OPERATOR	97:22	97:22	15	-
LEAF_NODE	97:22	97:22	16	-
FIELD	97:23	97:23	15	1
LEAF_NODE	97:23	97:23	16	1
LEAF_NODE	97:24	97:24	13	)
LEAF_NODE	97:25	97:25	11	;
JUMP_STATEMENT	98:3	98:8	8	break DESTINATION ;
KEYWORD	98:3	98:3	9	break
LEAF_NODE	98:3	98:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	98:8	98:8	9	;
LEAF_NODE	99:2	99:2	8	case
LEAF_NODE	99:7	99:7	8	'v'
LEAF_NODE	99:10	99:10	8	:
EXPR_STATEMENT	100:3	100:33	8	vertSubSampling = atoi ( optarg ) ;
EXPR	100:3	100:3	9	vertSubSampling = atoi ( optarg )
ASSIGN	100:3	100:21	10	vertSubSampling = atoi ( optarg )
LVAL	100:3	100:3	11	vertSubSampling
FIELD	100:3	100:3	12	vertSubSampling
LEAF_NODE	100:3	100:3	13	vertSubSampling
ASSIGN_OP	100:19	100:19	11	=
LEAF_NODE	100:19	100:19	12	=
RVAL	100:21	100:21	11	atoi ( optarg )
FUNCTION_CALL	100:21	100:32	12	atoi ( optarg )
CALLEE	100:21	100:21	13	atoi
LEAF_NODE	100:21	100:21	14	atoi
LEAF_NODE	100:25	100:25	13	(
ARGUMENT	100:26	100:26	13	optarg
FIELD	100:26	100:26	14	optarg
LEAF_NODE	100:26	100:26	15	optarg
LEAF_NODE	100:32	100:32	13	)
LEAF_NODE	100:33	100:33	9	;
SELECTION	101:12	102:16	8	
KEYWORD	101:12	101:12	9	if
LEAF_NODE	101:12	101:12	10	if
LEAF_NODE	101:14	101:14	9	(
CONDITION	101:16	101:16	9	vertSubSampling != 1 && vertSubSampling != 2 && vertSubSampling != 4
EXPR	101:16	101:16	10	vertSubSampling != 1 && vertSubSampling != 2 && vertSubSampling != 4
AND	101:16	101:40	11	vertSubSampling != 1 && vertSubSampling != 2 && vertSubSampling != 4
EXPR	101:16	101:35	12	vertSubSampling != 1
FIELD	101:16	101:16	13	vertSubSampling
LEAF_NODE	101:16	101:16	14	vertSubSampling
EQ_OPERATOR	101:32	101:32	13	!=
LEAF_NODE	101:32	101:32	14	!=
FIELD	101:35	101:35	13	1
LEAF_NODE	101:35	101:35	14	1
LEAF_NODE	101:37	101:37	12	&&
EXPR	101:40	101:40	12	vertSubSampling != 2 && vertSubSampling != 4
AND	101:40	101:64	13	vertSubSampling != 2 && vertSubSampling != 4
EXPR	101:40	101:59	14	vertSubSampling != 2
FIELD	101:40	101:40	15	vertSubSampling
LEAF_NODE	101:40	101:40	16	vertSubSampling
EQ_OPERATOR	101:56	101:56	15	!=
LEAF_NODE	101:56	101:56	16	!=
FIELD	101:59	101:59	15	2
LEAF_NODE	101:59	101:59	16	2
LEAF_NODE	101:61	101:61	14	&&
EXPR	101:64	101:83	14	vertSubSampling != 4
FIELD	101:64	101:64	15	vertSubSampling
LEAF_NODE	101:64	101:64	16	vertSubSampling
EQ_OPERATOR	101:80	101:80	15	!=
LEAF_NODE	101:80	101:80	16	!=
FIELD	101:83	101:83	15	4
LEAF_NODE	101:83	101:83	16	4
LEAF_NODE	101:85	101:85	9	)
STATEMENTS	102:16	102:16	9	
EXPR_STATEMENT	102:16	102:25	10	usage ( - 1 ) ;
EXPR	102:16	102:16	11	usage ( - 1 )
FUNCTION_CALL	102:16	102:24	12	usage ( - 1 )
CALLEE	102:16	102:16	13	usage
LEAF_NODE	102:16	102:16	14	usage
LEAF_NODE	102:21	102:21	13	(
ARGUMENT	102:22	102:22	13	- 1
UNARY_EXPR	102:22	102:23	14	- 1
UNARY_OPERATOR	102:22	102:22	15	-
LEAF_NODE	102:22	102:22	16	-
FIELD	102:23	102:23	15	1
LEAF_NODE	102:23	102:23	16	1
LEAF_NODE	102:24	102:24	13	)
LEAF_NODE	102:25	102:25	11	;
JUMP_STATEMENT	103:3	103:8	8	break DESTINATION ;
KEYWORD	103:3	103:3	9	break
LEAF_NODE	103:3	103:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	103:8	103:8	9	;
LEAF_NODE	104:2	104:2	8	case
LEAF_NODE	104:7	104:7	8	'r'
LEAF_NODE	104:10	104:10	8	:
EXPR_STATEMENT	105:3	105:30	8	rowsperstrip = atoi ( optarg ) ;
EXPR	105:3	105:3	9	rowsperstrip = atoi ( optarg )
ASSIGN	105:3	105:18	10	rowsperstrip = atoi ( optarg )
LVAL	105:3	105:3	11	rowsperstrip
FIELD	105:3	105:3	12	rowsperstrip
LEAF_NODE	105:3	105:3	13	rowsperstrip
ASSIGN_OP	105:16	105:16	11	=
LEAF_NODE	105:16	105:16	12	=
RVAL	105:18	105:18	11	atoi ( optarg )
FUNCTION_CALL	105:18	105:29	12	atoi ( optarg )
CALLEE	105:18	105:18	13	atoi
LEAF_NODE	105:18	105:18	14	atoi
LEAF_NODE	105:22	105:22	13	(
ARGUMENT	105:23	105:23	13	optarg
FIELD	105:23	105:23	14	optarg
LEAF_NODE	105:23	105:23	15	optarg
LEAF_NODE	105:29	105:29	13	)
LEAF_NODE	105:30	105:30	9	;
JUMP_STATEMENT	106:3	106:8	8	break DESTINATION ;
KEYWORD	106:3	106:3	9	break
LEAF_NODE	106:3	106:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	106:8	106:8	9	;
LEAF_NODE	107:2	107:2	8	case
LEAF_NODE	107:7	107:7	8	'z'
LEAF_NODE	107:10	107:10	8	:
EXPR_STATEMENT	108:3	108:25	8	refBlackWhite [ 0 ] = 16. ;
EXPR	108:3	108:3	9	refBlackWhite [ 0 ] = 16.
ASSIGN	108:3	108:22	10	refBlackWhite [ 0 ] = 16.
LVAL	108:3	108:3	11	refBlackWhite [ 0 ]
FIELD	108:3	108:18	12	refBlackWhite [ 0 ]
LEAF_NODE	108:3	108:3	13	refBlackWhite
LEAF_NODE	108:16	108:16	13	[
EXPR	108:17	108:17	13	0
FIELD	108:17	108:17	14	0
LEAF_NODE	108:17	108:17	15	0
LEAF_NODE	108:18	108:18	13	]
ASSIGN_OP	108:20	108:20	11	=
LEAF_NODE	108:20	108:20	12	=
RVAL	108:22	108:22	11	16.
FIELD	108:22	108:22	12	16.
LEAF_NODE	108:22	108:22	13	16.
LEAF_NODE	108:25	108:25	9	;
EXPR_STATEMENT	109:3	109:26	8	refBlackWhite [ 1 ] = 235. ;
EXPR	109:3	109:3	9	refBlackWhite [ 1 ] = 235.
ASSIGN	109:3	109:22	10	refBlackWhite [ 1 ] = 235.
LVAL	109:3	109:3	11	refBlackWhite [ 1 ]
FIELD	109:3	109:18	12	refBlackWhite [ 1 ]
LEAF_NODE	109:3	109:3	13	refBlackWhite
LEAF_NODE	109:16	109:16	13	[
EXPR	109:17	109:17	13	1
FIELD	109:17	109:17	14	1
LEAF_NODE	109:17	109:17	15	1
LEAF_NODE	109:18	109:18	13	]
ASSIGN_OP	109:20	109:20	11	=
LEAF_NODE	109:20	109:20	12	=
RVAL	109:22	109:22	11	235.
FIELD	109:22	109:22	12	235.
LEAF_NODE	109:22	109:22	13	235.
LEAF_NODE	109:26	109:26	9	;
EXPR_STATEMENT	110:3	110:26	8	refBlackWhite [ 2 ] = 128. ;
EXPR	110:3	110:3	9	refBlackWhite [ 2 ] = 128.
ASSIGN	110:3	110:22	10	refBlackWhite [ 2 ] = 128.
LVAL	110:3	110:3	11	refBlackWhite [ 2 ]
FIELD	110:3	110:18	12	refBlackWhite [ 2 ]
LEAF_NODE	110:3	110:3	13	refBlackWhite
LEAF_NODE	110:16	110:16	13	[
EXPR	110:17	110:17	13	2
FIELD	110:17	110:17	14	2
LEAF_NODE	110:17	110:17	15	2
LEAF_NODE	110:18	110:18	13	]
ASSIGN_OP	110:20	110:20	11	=
LEAF_NODE	110:20	110:20	12	=
RVAL	110:22	110:22	11	128.
FIELD	110:22	110:22	12	128.
LEAF_NODE	110:22	110:22	13	128.
LEAF_NODE	110:26	110:26	9	;
EXPR_STATEMENT	111:3	111:26	8	refBlackWhite [ 3 ] = 240. ;
EXPR	111:3	111:3	9	refBlackWhite [ 3 ] = 240.
ASSIGN	111:3	111:22	10	refBlackWhite [ 3 ] = 240.
LVAL	111:3	111:3	11	refBlackWhite [ 3 ]
FIELD	111:3	111:18	12	refBlackWhite [ 3 ]
LEAF_NODE	111:3	111:3	13	refBlackWhite
LEAF_NODE	111:16	111:16	13	[
EXPR	111:17	111:17	13	3
FIELD	111:17	111:17	14	3
LEAF_NODE	111:17	111:17	15	3
LEAF_NODE	111:18	111:18	13	]
ASSIGN_OP	111:20	111:20	11	=
LEAF_NODE	111:20	111:20	12	=
RVAL	111:22	111:22	11	240.
FIELD	111:22	111:22	12	240.
LEAF_NODE	111:22	111:22	13	240.
LEAF_NODE	111:26	111:26	9	;
EXPR_STATEMENT	112:3	112:26	8	refBlackWhite [ 4 ] = 128. ;
EXPR	112:3	112:3	9	refBlackWhite [ 4 ] = 128.
ASSIGN	112:3	112:22	10	refBlackWhite [ 4 ] = 128.
LVAL	112:3	112:3	11	refBlackWhite [ 4 ]
FIELD	112:3	112:18	12	refBlackWhite [ 4 ]
LEAF_NODE	112:3	112:3	13	refBlackWhite
LEAF_NODE	112:16	112:16	13	[
EXPR	112:17	112:17	13	4
FIELD	112:17	112:17	14	4
LEAF_NODE	112:17	112:17	15	4
LEAF_NODE	112:18	112:18	13	]
ASSIGN_OP	112:20	112:20	11	=
LEAF_NODE	112:20	112:20	12	=
RVAL	112:22	112:22	11	128.
FIELD	112:22	112:22	12	128.
LEAF_NODE	112:22	112:22	13	128.
LEAF_NODE	112:26	112:26	9	;
EXPR_STATEMENT	113:3	113:26	8	refBlackWhite [ 5 ] = 240. ;
EXPR	113:3	113:3	9	refBlackWhite [ 5 ] = 240.
ASSIGN	113:3	113:22	10	refBlackWhite [ 5 ] = 240.
LVAL	113:3	113:3	11	refBlackWhite [ 5 ]
FIELD	113:3	113:18	12	refBlackWhite [ 5 ]
LEAF_NODE	113:3	113:3	13	refBlackWhite
LEAF_NODE	113:16	113:16	13	[
EXPR	113:17	113:17	13	5
FIELD	113:17	113:17	14	5
LEAF_NODE	113:17	113:17	15	5
LEAF_NODE	113:18	113:18	13	]
ASSIGN_OP	113:20	113:20	11	=
LEAF_NODE	113:20	113:20	12	=
RVAL	113:22	113:22	11	240.
FIELD	113:22	113:22	12	240.
LEAF_NODE	113:22	113:22	13	240.
LEAF_NODE	113:26	113:26	9	;
JUMP_STATEMENT	114:3	114:8	8	break DESTINATION ;
KEYWORD	114:3	114:3	9	break
LEAF_NODE	114:3	114:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	114:8	114:8	9	;
LEAF_NODE	115:2	115:2	8	case
LEAF_NODE	115:7	115:7	8	'?'
LEAF_NODE	115:10	115:10	8	:
EXPR_STATEMENT	116:3	116:11	8	usage ( 0 ) ;
EXPR	116:3	116:3	9	usage ( 0 )
FUNCTION_CALL	116:3	116:10	10	usage ( 0 )
CALLEE	116:3	116:3	11	usage
LEAF_NODE	116:3	116:3	12	usage
LEAF_NODE	116:8	116:8	11	(
ARGUMENT	116:9	116:9	11	0
FIELD	116:9	116:9	12	0
LEAF_NODE	116:9	116:9	13	0
LEAF_NODE	116:10	116:10	11	)
LEAF_NODE	116:11	116:11	9	;
LEAF_NODE	118:2	118:2	7	}
SELECTION	119:1	120:2	3	
KEYWORD	119:1	119:1	4	if
LEAF_NODE	119:1	119:1	5	if
LEAF_NODE	119:4	119:4	4	(
CONDITION	119:5	119:5	4	argc - optind < 2
EXPR	119:5	119:21	5	argc - optind < 2
FIELD	119:5	119:5	6	argc
LEAF_NODE	119:5	119:5	7	argc
LEAF_NODE	119:10	119:10	6	-
FIELD	119:12	119:12	6	optind
LEAF_NODE	119:12	119:12	7	optind
REL_OPERATOR	119:19	119:19	6	<
LEAF_NODE	119:19	119:19	7	<
FIELD	119:21	119:21	6	2
LEAF_NODE	119:21	119:21	7	2
LEAF_NODE	119:22	119:22	4	)
STATEMENTS	120:2	120:2	4	
EXPR_STATEMENT	120:2	120:11	5	usage ( - 1 ) ;
EXPR	120:2	120:2	6	usage ( - 1 )
FUNCTION_CALL	120:2	120:10	7	usage ( - 1 )
CALLEE	120:2	120:2	8	usage
LEAF_NODE	120:2	120:2	9	usage
LEAF_NODE	120:7	120:7	8	(
ARGUMENT	120:8	120:8	8	- 1
UNARY_EXPR	120:8	120:9	9	- 1
UNARY_OPERATOR	120:8	120:8	10	-
LEAF_NODE	120:8	120:8	11	-
FIELD	120:9	120:9	10	1
LEAF_NODE	120:9	120:9	11	1
LEAF_NODE	120:10	120:10	8	)
LEAF_NODE	120:11	120:11	6	;
EXPR_STATEMENT	121:1	121:34	3	out = TIFFOpen ( argv [ argc - 1 ] , "w" ) ;
EXPR	121:1	121:1	4	out = TIFFOpen ( argv [ argc - 1 ] , "w" )
ASSIGN	121:1	121:7	5	out = TIFFOpen ( argv [ argc - 1 ] , "w" )
LVAL	121:1	121:1	6	out
FIELD	121:1	121:1	7	out
LEAF_NODE	121:1	121:1	8	out
ASSIGN_OP	121:5	121:5	6	=
LEAF_NODE	121:5	121:5	7	=
RVAL	121:7	121:7	6	TIFFOpen ( argv [ argc - 1 ] , "w" )
FUNCTION_CALL	121:7	121:33	7	TIFFOpen ( argv [ argc - 1 ] , "w" )
CALLEE	121:7	121:7	8	TIFFOpen
LEAF_NODE	121:7	121:7	9	TIFFOpen
LEAF_NODE	121:15	121:15	8	(
ARGUMENT	121:16	121:16	8	argv [ argc - 1 ]
FIELD	121:16	121:27	9	argv [ argc - 1 ]
LEAF_NODE	121:16	121:16	10	argv
LEAF_NODE	121:20	121:20	10	[
EXPR	121:21	121:26	10	argc - 1
FIELD	121:21	121:21	11	argc
LEAF_NODE	121:21	121:21	12	argc
LEAF_NODE	121:25	121:25	11	-
FIELD	121:26	121:26	11	1
LEAF_NODE	121:26	121:26	12	1
LEAF_NODE	121:27	121:27	10	]
LEAF_NODE	121:28	121:28	8	,
ARGUMENT	121:30	121:30	8	"w"
FIELD	121:30	121:30	9	"w"
LEAF_NODE	121:30	121:30	10	"w"
LEAF_NODE	121:33	121:33	8	)
LEAF_NODE	121:34	121:34	4	;
SELECTION	122:1	123:2	3	
KEYWORD	122:1	122:1	4	if
LEAF_NODE	122:1	122:1	5	if
LEAF_NODE	122:4	122:4	4	(
CONDITION	122:5	122:5	4	out == NULL
EXPR	122:5	122:12	5	out == NULL
FIELD	122:5	122:5	6	out
LEAF_NODE	122:5	122:5	7	out
EQ_OPERATOR	122:9	122:9	6	==
LEAF_NODE	122:9	122:9	7	==
FIELD	122:12	122:12	6	NULL
LEAF_NODE	122:12	122:12	7	NULL
LEAF_NODE	122:16	122:16	4	)
STATEMENTS	123:2	123:2	4	
JUMP_STATEMENT	123:2	123:13	5	return ( - 2 ) ;
KEYWORD	123:2	123:2	6	return
LEAF_NODE	123:2	123:2	7	return
DESTINATION	123:9	123:9	6	( - 2 )
EXPR	123:9	123:12	7	( - 2 )
LEAF_NODE	123:9	123:9	8	(
UNARY_EXPR	123:10	123:11	8	- 2
UNARY_OPERATOR	123:10	123:10	9	-
LEAF_NODE	123:10	123:10	10	-
FIELD	123:11	123:11	9	2
LEAF_NODE	123:11	123:11	10	2
LEAF_NODE	123:12	123:12	8	)
LEAF_NODE	123:13	123:13	6	;
EXPR_STATEMENT	124:1	124:18	3	setupLumaTables ( ) ;
EXPR	124:1	124:1	4	setupLumaTables ( )
FUNCTION_CALL	124:1	124:17	5	setupLumaTables ( )
CALLEE	124:1	124:1	6	setupLumaTables
LEAF_NODE	124:1	124:1	7	setupLumaTables
LEAF_NODE	124:16	124:16	6	(
LEAF_NODE	124:17	124:17	6	)
LEAF_NODE	124:18	124:18	4	;
ITERATION	125:1	125:35	3	
KEYWORD	125:1	125:1	4	for
LEAF_NODE	125:1	125:1	5	for
LEAF_NODE	125:5	125:5	4	(
FOR_INIT	125:6	125:6	4	;
LEAF_NODE	125:6	125:6	5	;
CONDITION	125:8	125:8	4	optind < argc - 1
EXPR	125:8	125:22	5	optind < argc - 1
FIELD	125:8	125:8	6	optind
LEAF_NODE	125:8	125:8	7	optind
REL_OPERATOR	125:15	125:15	6	<
LEAF_NODE	125:15	125:15	7	<
FIELD	125:17	125:17	6	argc
LEAF_NODE	125:17	125:17	7	argc
LEAF_NODE	125:21	125:21	6	-
FIELD	125:22	125:22	6	1
LEAF_NODE	125:22	125:22	7	1
LEAF_NODE	125:23	125:23	4	;
FOR_EXPR	125:25	125:25	4	optind ++
EXPR	125:25	125:25	5	optind ++
FIELD	125:25	125:31	6	optind ++
LEAF_NODE	125:25	125:25	7	optind
LEAF_NODE	125:31	125:31	7	++
LEAF_NODE	125:33	125:33	4	)
STATEMENTS	125:35	137:1	4	
LEAF_NODE	125:35	125:35	5	{
STATEMENTS	126:2	127:2	5	
EXPR_STATEMENT	126:2	126:34	6	in = TIFFOpen ( argv [ optind ] , "r" ) ;
EXPR	126:2	126:2	7	in = TIFFOpen ( argv [ optind ] , "r" )
ASSIGN	126:2	126:7	8	in = TIFFOpen ( argv [ optind ] , "r" )
LVAL	126:2	126:2	9	in
FIELD	126:2	126:2	10	in
LEAF_NODE	126:2	126:2	11	in
ASSIGN_OP	126:5	126:5	9	=
LEAF_NODE	126:5	126:5	10	=
RVAL	126:7	126:7	9	TIFFOpen ( argv [ optind ] , "r" )
FUNCTION_CALL	126:7	126:33	10	TIFFOpen ( argv [ optind ] , "r" )
CALLEE	126:7	126:7	11	TIFFOpen
LEAF_NODE	126:7	126:7	12	TIFFOpen
LEAF_NODE	126:15	126:15	11	(
ARGUMENT	126:16	126:16	11	argv [ optind ]
FIELD	126:16	126:27	12	argv [ optind ]
LEAF_NODE	126:16	126:16	13	argv
LEAF_NODE	126:20	126:20	13	[
EXPR	126:21	126:21	13	optind
FIELD	126:21	126:21	14	optind
LEAF_NODE	126:21	126:21	15	optind
LEAF_NODE	126:27	126:27	13	]
LEAF_NODE	126:28	126:28	11	,
ARGUMENT	126:30	126:30	11	"r"
FIELD	126:30	126:30	12	"r"
LEAF_NODE	126:30	126:30	13	"r"
LEAF_NODE	126:33	126:33	11	)
LEAF_NODE	126:34	126:34	7	;
SELECTION	127:2	127:18	6	
KEYWORD	127:2	127:2	7	if
LEAF_NODE	127:2	127:2	8	if
LEAF_NODE	127:5	127:5	7	(
CONDITION	127:6	127:6	7	in != NULL
EXPR	127:6	127:12	8	in != NULL
FIELD	127:6	127:6	9	in
LEAF_NODE	127:6	127:6	10	in
EQ_OPERATOR	127:9	127:9	9	!=
LEAF_NODE	127:9	127:9	10	!=
FIELD	127:12	127:12	9	NULL
LEAF_NODE	127:12	127:12	10	NULL
LEAF_NODE	127:16	127:16	7	)
STATEMENTS	127:18	136:2	7	
LEAF_NODE	127:18	127:18	8	{
STATEMENTS	128:3	135:3	8	
ITERATION	128:3	128:6	9	
KEYWORD	128:3	128:3	10	do
LEAF_NODE	128:3	128:3	11	do
LEAF_NODE	134:11	134:11	10	(
CONDITION	134:12	134:12	10	TIFFReadDirectory ( in )
EXPR	134:12	134:12	11	TIFFReadDirectory ( in )
FUNCTION_CALL	134:12	134:32	12	TIFFReadDirectory ( in )
CALLEE	134:12	134:12	13	TIFFReadDirectory
LEAF_NODE	134:12	134:12	14	TIFFReadDirectory
LEAF_NODE	134:29	134:29	13	(
ARGUMENT	134:30	134:30	13	in
FIELD	134:30	134:30	14	in
LEAF_NODE	134:30	134:30	15	in
LEAF_NODE	134:32	134:32	13	)
LEAF_NODE	134:33	134:33	10	)
STATEMENTS	128:6	134:3	10	
LEAF_NODE	128:6	128:6	11	{
STATEMENTS	129:4	129:4	11	
SELECTION	129:4	130:34	12	
KEYWORD	129:4	129:4	13	if
LEAF_NODE	129:4	129:4	14	if
LEAF_NODE	129:7	129:7	13	(
CONDITION	129:8	129:8	13	! tiffcvt ( in , out ) || ! TIFFWriteDirectory ( out )
EXPR	129:8	129:8	14	! tiffcvt ( in , out ) || ! TIFFWriteDirectory ( out )
OR	129:8	130:8	15	! tiffcvt ( in , out ) || ! TIFFWriteDirectory ( out )
EXPR	129:8	129:8	16	! tiffcvt ( in , out )
UNARY_EXPR	129:8	129:9	17	! tiffcvt ( in , out )
UNARY_OPERATOR	129:8	129:8	18	!
LEAF_NODE	129:8	129:8	19	!
FUNCTION_CALL	129:9	129:24	18	tiffcvt ( in , out )
CALLEE	129:9	129:9	19	tiffcvt
LEAF_NODE	129:9	129:9	20	tiffcvt
LEAF_NODE	129:16	129:16	19	(
ARGUMENT	129:17	129:17	19	in
FIELD	129:17	129:17	20	in
LEAF_NODE	129:17	129:17	21	in
LEAF_NODE	129:19	129:19	19	,
ARGUMENT	129:21	129:21	19	out
FIELD	129:21	129:21	20	out
LEAF_NODE	129:21	129:21	21	out
LEAF_NODE	129:24	129:24	19	)
LEAF_NODE	129:26	129:26	16	||
EXPR	130:8	130:8	16	! TIFFWriteDirectory ( out )
UNARY_EXPR	130:8	130:9	17	! TIFFWriteDirectory ( out )
UNARY_OPERATOR	130:8	130:8	18	!
LEAF_NODE	130:8	130:8	19	!
FUNCTION_CALL	130:9	130:31	18	TIFFWriteDirectory ( out )
CALLEE	130:9	130:9	19	TIFFWriteDirectory
LEAF_NODE	130:9	130:9	20	TIFFWriteDirectory
LEAF_NODE	130:27	130:27	19	(
ARGUMENT	130:28	130:28	19	out
FIELD	130:28	130:28	20	out
LEAF_NODE	130:28	130:28	21	out
LEAF_NODE	130:31	130:31	19	)
LEAF_NODE	130:32	130:32	13	)
STATEMENTS	130:34	133:4	13	
LEAF_NODE	130:34	130:34	14	{
STATEMENTS	131:5	132:5	14	
EXPR_STATEMENT	131:5	131:26	15	( void ) TIFFClose ( out ) ;
EXPR	131:5	131:12	16	( void ) TIFFClose ( out )
LEAF_NODE	131:5	131:5	17	(
TYPE_NAME	131:6	131:6	17	void
LEAF_NODE	131:6	131:6	18	void
LEAF_NODE	131:10	131:10	17	)
FUNCTION_CALL	131:12	131:25	17	TIFFClose ( out )
CALLEE	131:12	131:12	18	TIFFClose
LEAF_NODE	131:12	131:12	19	TIFFClose
LEAF_NODE	131:21	131:21	18	(
ARGUMENT	131:22	131:22	18	out
FIELD	131:22	131:22	19	out
LEAF_NODE	131:22	131:22	20	out
LEAF_NODE	131:25	131:25	18	)
LEAF_NODE	131:26	131:26	16	;
JUMP_STATEMENT	132:5	132:15	15	return ( 1 ) ;
KEYWORD	132:5	132:5	16	return
LEAF_NODE	132:5	132:5	17	return
DESTINATION	132:12	132:12	16	( 1 )
EXPR	132:12	132:14	17	( 1 )
LEAF_NODE	132:12	132:12	18	(
FIELD	132:13	132:13	18	1
LEAF_NODE	132:13	132:13	19	1
LEAF_NODE	132:14	132:14	18	)
LEAF_NODE	132:15	132:15	16	;
LEAF_NODE	133:4	133:4	14	}
LEAF_NODE	134:3	134:3	11	}
LEAF_NODE	134:34	134:34	9	;
EXPR_STATEMENT	135:3	135:23	9	( void ) TIFFClose ( in ) ;
EXPR	135:3	135:10	10	( void ) TIFFClose ( in )
LEAF_NODE	135:3	135:3	11	(
TYPE_NAME	135:4	135:4	11	void
LEAF_NODE	135:4	135:4	12	void
LEAF_NODE	135:8	135:8	11	)
FUNCTION_CALL	135:10	135:22	11	TIFFClose ( in )
CALLEE	135:10	135:10	12	TIFFClose
LEAF_NODE	135:10	135:10	13	TIFFClose
LEAF_NODE	135:19	135:19	12	(
ARGUMENT	135:20	135:20	12	in
FIELD	135:20	135:20	13	in
LEAF_NODE	135:20	135:20	14	in
LEAF_NODE	135:22	135:22	12	)
LEAF_NODE	135:23	135:23	10	;
LEAF_NODE	136:2	136:2	8	}
LEAF_NODE	137:1	137:1	5	}
EXPR_STATEMENT	138:1	138:22	3	( void ) TIFFClose ( out ) ;
EXPR	138:1	138:8	4	( void ) TIFFClose ( out )
LEAF_NODE	138:1	138:1	5	(
TYPE_NAME	138:2	138:2	5	void
LEAF_NODE	138:2	138:2	6	void
LEAF_NODE	138:6	138:6	5	)
FUNCTION_CALL	138:8	138:21	5	TIFFClose ( out )
CALLEE	138:8	138:8	6	TIFFClose
LEAF_NODE	138:8	138:8	7	TIFFClose
LEAF_NODE	138:17	138:17	6	(
ARGUMENT	138:18	138:18	6	out
FIELD	138:18	138:18	7	out
LEAF_NODE	138:18	138:18	8	out
LEAF_NODE	138:21	138:21	6	)
LEAF_NODE	138:22	138:22	4	;
JUMP_STATEMENT	139:1	139:11	3	return ( 0 ) ;
KEYWORD	139:1	139:1	4	return
LEAF_NODE	139:1	139:1	5	return
DESTINATION	139:8	139:8	4	( 0 )
EXPR	139:8	139:10	5	( 0 )
LEAF_NODE	139:8	139:8	6	(
FIELD	139:9	139:9	6	0
LEAF_NODE	139:9	139:9	7	0
LEAF_NODE	139:10	139:10	6	)
LEAF_NODE	139:11	139:11	4	;
LEAF_NODE	140:0	140:0	2	}
SIMPLE_DECL	142:0	142:14	1	float * lumaRed ;
VAR_DECL	142:0	142:7	2	float * lumaRed
TYPE	142:0	142:6	3	float *
TYPE_NAME	142:0	142:0	4	float
LEAF_NODE	142:0	142:0	5	float
POINTER	142:6	142:6	4	*
LEAF_NODE	142:6	142:6	5	*
NAME	142:7	142:7	3	lumaRed
LEAF_NODE	142:7	142:7	4	lumaRed
LEAF_NODE	142:14	142:14	2	;
SIMPLE_DECL	143:0	143:16	1	float * lumaGreen ;
VAR_DECL	143:0	143:7	2	float * lumaGreen
TYPE	143:0	143:6	3	float *
TYPE_NAME	143:0	143:0	4	float
LEAF_NODE	143:0	143:0	5	float
POINTER	143:6	143:6	4	*
LEAF_NODE	143:6	143:6	5	*
NAME	143:7	143:7	3	lumaGreen
LEAF_NODE	143:7	143:7	4	lumaGreen
LEAF_NODE	143:16	143:16	2	;
SIMPLE_DECL	144:0	144:15	1	float * lumaBlue ;
VAR_DECL	144:0	144:7	2	float * lumaBlue
TYPE	144:0	144:6	3	float *
TYPE_NAME	144:0	144:0	4	float
LEAF_NODE	144:0	144:0	5	float
POINTER	144:6	144:6	4	*
LEAF_NODE	144:6	144:6	5	*
NAME	144:7	144:7	3	lumaBlue
LEAF_NODE	144:7	144:7	4	lumaBlue
LEAF_NODE	144:15	144:15	2	;
SIMPLE_DECL	145:0	145:12	1	float D1 , float D2 ;
INIT_DECL_LIST	145:0	145:0	2	float D1 , float D2
VAR_DECL	145:0	145:6	3	float D1
TYPE	145:0	145:0	4	float
TYPE_NAME	145:0	145:0	5	float
LEAF_NODE	145:0	145:0	6	float
NAME	145:6	145:6	4	D1
LEAF_NODE	145:6	145:6	5	D1
LEAF_NODE	145:8	145:8	3	,
VAR_DECL	145:0	145:10	3	float D2
TYPE	145:0	145:0	4	float
TYPE_NAME	145:0	145:0	5	float
LEAF_NODE	145:0	145:0	6	float
NAME	145:10	145:10	4	D2
LEAF_NODE	145:10	145:10	5	D2
LEAF_NODE	145:12	145:12	2	;
SIMPLE_DECL	146:0	146:9	1	int Yzero ;
VAR_DECL	146:0	146:4	2	int Yzero
TYPE	146:0	146:0	3	int
TYPE_NAME	146:0	146:0	4	int
LEAF_NODE	146:0	146:0	5	int
NAME	146:4	146:4	3	Yzero
LEAF_NODE	146:4	146:4	4	Yzero
LEAF_NODE	146:9	146:9	2	;
FUNCTION_DEF	148:0	156:0	1	
RETURN_TYPE	148:0	148:12	2	static float *
LEAF_NODE	148:0	148:0	3	static
TYPE_NAME	148:7	148:7	3	float
LEAF_NODE	148:7	148:7	4	float
LEAF_NODE	148:12	148:12	3	*
FUNCTION_NAME	149:0	149:0	2	setupLuma
LEAF_NODE	149:0	149:0	3	setupLuma
PARAMETER_LIST	149:9	149:17	2	( float c )
LEAF_NODE	149:9	149:9	3	(
PARAMETER_DECL	149:10	149:16	3	float c
TYPE	149:10	149:10	4	float
TYPE_NAME	149:10	149:10	5	float
LEAF_NODE	149:10	149:10	6	float
NAME	149:16	149:16	4	c
LEAF_NODE	149:16	149:16	5	c
LEAF_NODE	149:17	149:17	3	)
LEAF_NODE	150:0	150:0	2	{
STATEMENTS	151:1	155:11	2	
SIMPLE_DECL	151:1	151:54	3	float * v ; v = ( float * ) _TIFFmalloc ( 256 * sizeof ( float ) ) ;
VAR_DECL	151:1	151:8	4	float * v ; v = ( float * ) _TIFFmalloc ( 256 * sizeof ( float ) )
TYPE	151:1	151:7	5	float *
TYPE_NAME	151:1	151:1	6	float
LEAF_NODE	151:1	151:1	7	float
POINTER	151:7	151:7	6	*
LEAF_NODE	151:7	151:7	7	*
NAME	151:8	151:8	5	v
LEAF_NODE	151:8	151:8	6	v
LEAF_NODE	0:0	0:0	5	;
INIT	151:8	151:8	5	v = ( float * ) _TIFFmalloc ( 256 * sizeof ( float ) )
ASSIGN	151:8	151:12	6	v = ( float * ) _TIFFmalloc ( 256 * sizeof ( float ) )
LVAL	151:8	151:8	7	v
NAME	151:8	151:8	8	v
LEAF_NODE	151:8	151:8	9	v
ASSIGN_OP	151:10	151:10	7	=
LEAF_NODE	151:10	151:10	8	=
RVAL	151:12	151:21	7	( float * ) _TIFFmalloc ( 256 * sizeof ( float ) )
LEAF_NODE	151:12	151:12	8	(
TYPE_NAME	151:13	151:13	8	float
LEAF_NODE	151:13	151:13	9	float
LEAF_NODE	151:19	151:19	8	*
LEAF_NODE	151:20	151:20	8	)
FUNCTION_CALL	151:21	151:53	8	_TIFFmalloc ( 256 * sizeof ( float ) )
CALLEE	151:21	151:21	9	_TIFFmalloc
LEAF_NODE	151:21	151:21	10	_TIFFmalloc
LEAF_NODE	151:32	151:32	9	(
ARGUMENT	151:33	151:39	9	256 * sizeof ( float )
FIELD	151:33	151:33	10	256
LEAF_NODE	151:33	151:33	11	256
LEAF_NODE	151:37	151:37	10	*
FUNCTION_CALL	151:39	151:52	10	sizeof ( float )
CALLEE	151:39	151:39	11	sizeof
LEAF_NODE	151:39	151:39	12	sizeof
LEAF_NODE	151:46	151:46	11	(
ARGUMENT	151:47	151:47	11	float
FIELD	151:47	151:47	12	float
LEAF_NODE	151:47	151:47	13	float
LEAF_NODE	151:52	151:52	11	)
LEAF_NODE	151:53	151:53	9	)
LEAF_NODE	151:54	151:54	4	;
SIMPLE_DECL	152:1	152:6	3	int i ;
VAR_DECL	152:1	152:5	4	int i
TYPE	152:1	152:1	5	int
TYPE_NAME	152:1	152:1	6	int
LEAF_NODE	152:1	152:1	7	int
NAME	152:5	152:5	5	i
LEAF_NODE	152:5	152:5	6	i
LEAF_NODE	152:6	152:6	4	;
ITERATION	153:1	154:2	3	
KEYWORD	153:1	153:1	4	for
LEAF_NODE	153:1	153:1	5	for
LEAF_NODE	153:5	153:5	4	(
FOR_INIT	153:6	153:11	4	i = 0 ;
EXPR	153:6	153:6	5	i = 0
ASSIGN	153:6	153:10	6	i = 0
LVAL	153:6	153:6	7	i
FIELD	153:6	153:6	8	i
LEAF_NODE	153:6	153:6	9	i
ASSIGN_OP	153:8	153:8	7	=
LEAF_NODE	153:8	153:8	8	=
RVAL	153:10	153:10	7	0
FIELD	153:10	153:10	8	0
LEAF_NODE	153:10	153:10	9	0
LEAF_NODE	153:11	153:11	5	;
CONDITION	153:13	153:13	4	i < 256
EXPR	153:13	153:17	5	i < 256
FIELD	153:13	153:13	6	i
LEAF_NODE	153:13	153:13	7	i
REL_OPERATOR	153:15	153:15	6	<
LEAF_NODE	153:15	153:15	7	<
FIELD	153:17	153:17	6	256
LEAF_NODE	153:17	153:17	7	256
LEAF_NODE	153:20	153:20	4	;
FOR_EXPR	153:22	153:22	4	i ++
EXPR	153:22	153:22	5	i ++
FIELD	153:22	153:23	6	i ++
LEAF_NODE	153:22	153:22	7	i
LEAF_NODE	153:23	153:23	7	++
LEAF_NODE	153:25	153:25	4	)
STATEMENTS	154:2	154:2	4	
EXPR_STATEMENT	154:2	154:14	5	v [ i ] = c * i ;
EXPR	154:2	154:2	6	v [ i ] = c * i
ASSIGN	154:2	154:9	7	v [ i ] = c * i
LVAL	154:2	154:2	8	v [ i ]
FIELD	154:2	154:5	9	v [ i ]
LEAF_NODE	154:2	154:2	10	v
LEAF_NODE	154:3	154:3	10	[
EXPR	154:4	154:4	10	i
FIELD	154:4	154:4	11	i
LEAF_NODE	154:4	154:4	12	i
LEAF_NODE	154:5	154:5	10	]
ASSIGN_OP	154:7	154:7	8	=
LEAF_NODE	154:7	154:7	9	=
RVAL	154:9	154:13	8	c * i
FIELD	154:9	154:9	9	c
LEAF_NODE	154:9	154:9	10	c
LEAF_NODE	154:11	154:11	9	*
FIELD	154:13	154:13	9	i
LEAF_NODE	154:13	154:13	10	i
LEAF_NODE	154:14	154:14	6	;
LEAF_NODE	155:1	155:1	3	return
LEAF_NODE	155:8	155:8	3	(
LEAF_NODE	155:9	155:9	3	v
LEAF_NODE	155:10	155:10	3	)
LEAF_NODE	155:11	155:11	3	;
LEAF_NODE	156:0	156:0	2	}
FUNCTION_DEF	0:0	163:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	159:0	159:0	2	V2Code
LEAF_NODE	159:0	159:0	3	V2Code
PARAMETER_LIST	159:6	159:42	2	( float f , float RB , float RW , int CR )
LEAF_NODE	159:6	159:6	3	(
PARAMETER_DECL	159:7	159:13	3	float f
TYPE	159:7	159:7	4	float
TYPE_NAME	159:7	159:7	5	float
LEAF_NODE	159:7	159:7	6	float
NAME	159:13	159:13	4	f
LEAF_NODE	159:13	159:13	5	f
LEAF_NODE	159:14	159:14	3	,
PARAMETER_DECL	159:16	159:22	3	float RB
TYPE	159:16	159:16	4	float
TYPE_NAME	159:16	159:16	5	float
LEAF_NODE	159:16	159:16	6	float
NAME	159:22	159:22	4	RB
LEAF_NODE	159:22	159:22	5	RB
LEAF_NODE	159:24	159:24	3	,
PARAMETER_DECL	159:26	159:32	3	float RW
TYPE	159:26	159:26	4	float
TYPE_NAME	159:26	159:26	5	float
LEAF_NODE	159:26	159:26	6	float
NAME	159:32	159:32	4	RW
LEAF_NODE	159:32	159:32	5	RW
LEAF_NODE	159:34	159:34	3	,
PARAMETER_DECL	159:36	159:40	3	int CR
TYPE	159:36	159:36	4	int
TYPE_NAME	159:36	159:36	5	int
LEAF_NODE	159:36	159:36	6	int
NAME	159:40	159:40	4	CR
LEAF_NODE	159:40	159:40	5	CR
LEAF_NODE	159:42	159:42	3	)
LEAF_NODE	160:0	160:0	2	{
STATEMENTS	161:1	162:1	2	
SIMPLE_DECL	161:1	161:58	3	unsigned int c ; c = ( unsigned int ) ( ( ( ( f ) * ( RW - RB ) / CR ) + RB ) + .5 ) ;
VAR_DECL	161:1	161:14	4	unsigned int c ; c = ( unsigned int ) ( ( ( ( f ) * ( RW - RB ) / CR ) + RB ) + .5 )
TYPE	161:1	161:1	5	unsigned int
TYPE_NAME	161:1	161:10	6	unsigned int
LEAF_NODE	161:1	161:1	7	unsigned
LEAF_NODE	161:10	161:10	7	int
NAME	161:14	161:14	5	c
LEAF_NODE	161:14	161:14	6	c
LEAF_NODE	0:0	0:0	5	;
INIT	161:14	161:14	5	c = ( unsigned int ) ( ( ( ( f ) * ( RW - RB ) / CR ) + RB ) + .5 )
ASSIGN	161:14	161:18	6	c = ( unsigned int ) ( ( ( ( f ) * ( RW - RB ) / CR ) + RB ) + .5 )
LVAL	161:14	161:14	7	c
NAME	161:14	161:14	8	c
LEAF_NODE	161:14	161:14	9	c
ASSIGN_OP	161:16	161:16	7	=
LEAF_NODE	161:16	161:16	8	=
RVAL	161:18	161:57	7	( unsigned int ) ( ( ( ( f ) * ( RW - RB ) / CR ) + RB ) + .5 )
LEAF_NODE	161:18	161:18	8	(
TYPE_NAME	161:19	161:28	8	unsigned int
LEAF_NODE	161:19	161:19	9	unsigned
LEAF_NODE	161:28	161:28	9	int
LEAF_NODE	161:31	161:31	8	)
LEAF_NODE	161:32	161:32	8	(
LEAF_NODE	161:33	161:33	8	(
LEAF_NODE	161:34	161:34	8	(
LEAF_NODE	161:35	161:35	8	(
TYPE_NAME	161:36	161:36	8	f
LEAF_NODE	161:36	161:36	9	f
LEAF_NODE	161:37	161:37	8	)
UNARY_EXPR	161:38	161:45	8	* ( RW - RB )
UNARY_OPERATOR	161:38	161:38	9	*
LEAF_NODE	161:38	161:38	10	*
LEAF_NODE	161:39	161:39	9	(
FIELD	161:40	161:40	9	RW
LEAF_NODE	161:40	161:40	10	RW
LEAF_NODE	161:42	161:42	9	-
FIELD	161:43	161:43	9	RB
LEAF_NODE	161:43	161:43	10	RB
LEAF_NODE	161:45	161:45	9	)
LEAF_NODE	161:46	161:46	8	/
FIELD	161:47	161:47	8	CR
LEAF_NODE	161:47	161:47	9	CR
LEAF_NODE	161:49	161:49	8	)
LEAF_NODE	161:50	161:50	8	+
FIELD	161:51	161:51	8	RB
LEAF_NODE	161:51	161:51	9	RB
LEAF_NODE	161:53	161:53	8	)
LEAF_NODE	161:54	161:54	8	+
FIELD	161:55	161:55	8	.5
LEAF_NODE	161:55	161:55	9	.5
LEAF_NODE	161:57	161:57	8	)
LEAF_NODE	161:58	161:58	4	;
JUMP_STATEMENT	162:1	162:27	3	return ( c > 255 ? 255 : c ) ;
KEYWORD	162:1	162:1	4	return
LEAF_NODE	162:1	162:1	5	return
DESTINATION	162:8	162:8	4	( c > 255 ? 255 : c )
EXPR	162:8	162:26	5	( c > 255 ? 255 : c )
LEAF_NODE	162:8	162:8	6	(
COND_EXPR	162:9	162:25	6	c > 255 ? 255 : c
CONDITION	162:9	162:13	7	c > 255
FIELD	162:9	162:9	8	c
LEAF_NODE	162:9	162:9	9	c
REL_OPERATOR	162:11	162:11	8	>
LEAF_NODE	162:11	162:11	9	>
FIELD	162:13	162:13	8	255
LEAF_NODE	162:13	162:13	9	255
LEAF_NODE	162:17	162:17	7	?
EXPR	162:19	162:19	7	255
FIELD	162:19	162:19	8	255
LEAF_NODE	162:19	162:19	9	255
LEAF_NODE	162:23	162:23	7	:
FIELD	162:25	162:25	7	c
LEAF_NODE	162:25	162:25	8	c
LEAF_NODE	162:26	162:26	6	)
LEAF_NODE	162:27	162:27	4	;
LEAF_NODE	163:0	163:0	2	}
FUNCTION_DEF	165:0	174:0	1	
RETURN_TYPE	165:0	165:7	2	static void
LEAF_NODE	165:0	165:0	3	static
TYPE_NAME	165:7	165:7	3	void
LEAF_NODE	165:7	165:7	4	void
FUNCTION_NAME	166:0	166:0	2	setupLumaTables
LEAF_NODE	166:0	166:0	3	setupLumaTables
PARAMETER_LIST	166:15	166:20	2	( void )
LEAF_NODE	166:15	166:15	3	(
PARAMETER_DECL	166:16	166:16	3	void
LEAF_NODE	166:16	166:16	4	void
LEAF_NODE	166:20	166:20	3	)
LEAF_NODE	167:0	167:0	2	{
STATEMENTS	168:1	173:1	2	
EXPR_STATEMENT	168:1	168:29	3	lumaRed = setupLuma ( LumaRed ) ;
EXPR	168:1	168:1	4	lumaRed = setupLuma ( LumaRed )
ASSIGN	168:1	168:11	5	lumaRed = setupLuma ( LumaRed )
LVAL	168:1	168:1	6	lumaRed
FIELD	168:1	168:1	7	lumaRed
LEAF_NODE	168:1	168:1	8	lumaRed
ASSIGN_OP	168:9	168:9	6	=
LEAF_NODE	168:9	168:9	7	=
RVAL	168:11	168:11	6	setupLuma ( LumaRed )
FUNCTION_CALL	168:11	168:28	7	setupLuma ( LumaRed )
CALLEE	168:11	168:11	8	setupLuma
LEAF_NODE	168:11	168:11	9	setupLuma
LEAF_NODE	168:20	168:20	8	(
ARGUMENT	168:21	168:21	8	LumaRed
FIELD	168:21	168:21	9	LumaRed
LEAF_NODE	168:21	168:21	10	LumaRed
LEAF_NODE	168:28	168:28	8	)
LEAF_NODE	168:29	168:29	4	;
EXPR_STATEMENT	169:1	169:33	3	lumaGreen = setupLuma ( LumaGreen ) ;
EXPR	169:1	169:1	4	lumaGreen = setupLuma ( LumaGreen )
ASSIGN	169:1	169:13	5	lumaGreen = setupLuma ( LumaGreen )
LVAL	169:1	169:1	6	lumaGreen
FIELD	169:1	169:1	7	lumaGreen
LEAF_NODE	169:1	169:1	8	lumaGreen
ASSIGN_OP	169:11	169:11	6	=
LEAF_NODE	169:11	169:11	7	=
RVAL	169:13	169:13	6	setupLuma ( LumaGreen )
FUNCTION_CALL	169:13	169:32	7	setupLuma ( LumaGreen )
CALLEE	169:13	169:13	8	setupLuma
LEAF_NODE	169:13	169:13	9	setupLuma
LEAF_NODE	169:22	169:22	8	(
ARGUMENT	169:23	169:23	8	LumaGreen
FIELD	169:23	169:23	9	LumaGreen
LEAF_NODE	169:23	169:23	10	LumaGreen
LEAF_NODE	169:32	169:32	8	)
LEAF_NODE	169:33	169:33	4	;
EXPR_STATEMENT	170:1	170:31	3	lumaBlue = setupLuma ( LumaBlue ) ;
EXPR	170:1	170:1	4	lumaBlue = setupLuma ( LumaBlue )
ASSIGN	170:1	170:12	5	lumaBlue = setupLuma ( LumaBlue )
LVAL	170:1	170:1	6	lumaBlue
FIELD	170:1	170:1	7	lumaBlue
LEAF_NODE	170:1	170:1	8	lumaBlue
ASSIGN_OP	170:10	170:10	6	=
LEAF_NODE	170:10	170:10	7	=
RVAL	170:12	170:12	6	setupLuma ( LumaBlue )
FUNCTION_CALL	170:12	170:30	7	setupLuma ( LumaBlue )
CALLEE	170:12	170:12	8	setupLuma
LEAF_NODE	170:12	170:12	9	setupLuma
LEAF_NODE	170:21	170:21	8	(
ARGUMENT	170:22	170:22	8	LumaBlue
FIELD	170:22	170:22	9	LumaBlue
LEAF_NODE	170:22	170:22	10	LumaBlue
LEAF_NODE	170:30	170:30	8	)
LEAF_NODE	170:31	170:31	4	;
EXPR_STATEMENT	171:1	171:30	3	D1 = 1.F / ( 2.F - 2.F * LumaBlue ) ;
EXPR	171:1	171:1	4	D1 = 1.F / ( 2.F - 2.F * LumaBlue )
ASSIGN	171:1	171:6	5	D1 = 1.F / ( 2.F - 2.F * LumaBlue )
LVAL	171:1	171:1	6	D1
FIELD	171:1	171:1	7	D1
LEAF_NODE	171:1	171:1	8	D1
ASSIGN_OP	171:4	171:4	6	=
LEAF_NODE	171:4	171:4	7	=
RVAL	171:6	171:29	6	1.F / ( 2.F - 2.F * LumaBlue )
FIELD	171:6	171:6	7	1.F
LEAF_NODE	171:6	171:6	8	1.F
LEAF_NODE	171:9	171:9	7	/
LEAF_NODE	171:10	171:10	7	(
FIELD	171:11	171:11	7	2.F
LEAF_NODE	171:11	171:11	8	2.F
LEAF_NODE	171:15	171:15	7	-
FIELD	171:17	171:17	7	2.F
LEAF_NODE	171:17	171:17	8	2.F
LEAF_NODE	171:20	171:20	7	*
FIELD	171:21	171:21	7	LumaBlue
LEAF_NODE	171:21	171:21	8	LumaBlue
LEAF_NODE	171:29	171:29	7	)
LEAF_NODE	171:30	171:30	4	;
EXPR_STATEMENT	172:1	172:29	3	D2 = 1.F / ( 2.F - 2.F * LumaRed ) ;
EXPR	172:1	172:1	4	D2 = 1.F / ( 2.F - 2.F * LumaRed )
ASSIGN	172:1	172:6	5	D2 = 1.F / ( 2.F - 2.F * LumaRed )
LVAL	172:1	172:1	6	D2
FIELD	172:1	172:1	7	D2
LEAF_NODE	172:1	172:1	8	D2
ASSIGN_OP	172:4	172:4	6	=
LEAF_NODE	172:4	172:4	7	=
RVAL	172:6	172:28	6	1.F / ( 2.F - 2.F * LumaRed )
FIELD	172:6	172:6	7	1.F
LEAF_NODE	172:6	172:6	8	1.F
LEAF_NODE	172:9	172:9	7	/
LEAF_NODE	172:10	172:10	7	(
FIELD	172:11	172:11	7	2.F
LEAF_NODE	172:11	172:11	8	2.F
LEAF_NODE	172:15	172:15	7	-
FIELD	172:17	172:17	7	2.F
LEAF_NODE	172:17	172:17	8	2.F
LEAF_NODE	172:20	172:20	7	*
FIELD	172:21	172:21	7	LumaRed
LEAF_NODE	172:21	172:21	8	LumaRed
LEAF_NODE	172:28	172:28	7	)
LEAF_NODE	172:29	172:29	4	;
EXPR_STATEMENT	173:1	173:59	3	Yzero = V2Code ( 0 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 ) ;
EXPR	173:1	173:1	4	Yzero = V2Code ( 0 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
ASSIGN	173:1	173:9	5	Yzero = V2Code ( 0 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
LVAL	173:1	173:1	6	Yzero
FIELD	173:1	173:1	7	Yzero
LEAF_NODE	173:1	173:1	8	Yzero
ASSIGN_OP	173:7	173:7	6	=
LEAF_NODE	173:7	173:7	7	=
RVAL	173:9	173:9	6	V2Code ( 0 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
FUNCTION_CALL	173:9	173:58	7	V2Code ( 0 , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
CALLEE	173:9	173:9	8	V2Code
LEAF_NODE	173:9	173:9	9	V2Code
LEAF_NODE	173:15	173:15	8	(
ARGUMENT	173:16	173:16	8	0
FIELD	173:16	173:16	9	0
LEAF_NODE	173:16	173:16	10	0
LEAF_NODE	173:17	173:17	8	,
ARGUMENT	173:19	173:19	8	refBlackWhite [ 0 ]
FIELD	173:19	173:34	9	refBlackWhite [ 0 ]
LEAF_NODE	173:19	173:19	10	refBlackWhite
LEAF_NODE	173:32	173:32	10	[
EXPR	173:33	173:33	10	0
FIELD	173:33	173:33	11	0
LEAF_NODE	173:33	173:33	12	0
LEAF_NODE	173:34	173:34	10	]
LEAF_NODE	173:35	173:35	8	,
ARGUMENT	173:37	173:37	8	refBlackWhite [ 1 ]
FIELD	173:37	173:52	9	refBlackWhite [ 1 ]
LEAF_NODE	173:37	173:37	10	refBlackWhite
LEAF_NODE	173:50	173:50	10	[
EXPR	173:51	173:51	10	1
FIELD	173:51	173:51	11	1
LEAF_NODE	173:51	173:51	12	1
LEAF_NODE	173:52	173:52	10	]
LEAF_NODE	173:53	173:53	8	,
ARGUMENT	173:55	173:55	8	255
FIELD	173:55	173:55	9	255
LEAF_NODE	173:55	173:55	10	255
LEAF_NODE	173:58	173:58	8	)
LEAF_NODE	173:59	173:59	4	;
LEAF_NODE	174:0	174:0	2	}
FUNCTION_DEF	176:0	208:0	1	
RETURN_TYPE	176:0	176:7	2	static void
LEAF_NODE	176:0	176:0	3	static
TYPE_NAME	176:7	176:7	3	void
LEAF_NODE	176:7	176:7	4	void
FUNCTION_NAME	177:0	177:0	2	cvtClump
LEAF_NODE	177:0	177:0	3	cvtClump
PARAMETER_LIST	177:8	177:74	2	( unsigned char * op , uint32 * raster , uint32 ch , uint32 cw , uint32 w )
LEAF_NODE	177:8	177:8	3	(
PARAMETER_DECL	177:9	177:24	3	unsigned char * op
TYPE	177:9	177:22	4	unsigned char *
TYPE_NAME	177:9	177:18	5	unsigned char
LEAF_NODE	177:9	177:9	6	unsigned
LEAF_NODE	177:18	177:18	6	char
POINTER	177:22	177:22	5	*
LEAF_NODE	177:22	177:22	6	*
NAME	177:24	177:24	4	op
LEAF_NODE	177:24	177:24	5	op
LEAF_NODE	177:26	177:26	3	,
PARAMETER_DECL	177:28	177:36	3	uint32 * raster
TYPE	177:28	177:34	4	uint32 *
TYPE_NAME	177:28	177:28	5	uint32
LEAF_NODE	177:28	177:28	6	uint32
POINTER	177:34	177:34	5	*
LEAF_NODE	177:34	177:34	6	*
NAME	177:36	177:36	4	raster
LEAF_NODE	177:36	177:36	5	raster
LEAF_NODE	177:42	177:42	3	,
PARAMETER_DECL	177:44	177:51	3	uint32 ch
TYPE	177:44	177:44	4	uint32
TYPE_NAME	177:44	177:44	5	uint32
LEAF_NODE	177:44	177:44	6	uint32
NAME	177:51	177:51	4	ch
LEAF_NODE	177:51	177:51	5	ch
LEAF_NODE	177:53	177:53	3	,
PARAMETER_DECL	177:55	177:62	3	uint32 cw
TYPE	177:55	177:55	4	uint32
TYPE_NAME	177:55	177:55	5	uint32
LEAF_NODE	177:55	177:55	6	uint32
NAME	177:62	177:62	4	cw
LEAF_NODE	177:62	177:62	5	cw
LEAF_NODE	177:64	177:64	3	,
PARAMETER_DECL	177:66	177:73	3	uint32 w
TYPE	177:66	177:66	4	uint32
TYPE_NAME	177:66	177:66	5	uint32
LEAF_NODE	177:66	177:66	6	uint32
NAME	177:73	177:73	4	w
LEAF_NODE	177:73	177:73	5	w
LEAF_NODE	177:74	177:74	3	)
LEAF_NODE	178:0	178:0	2	{
STATEMENTS	179:1	207:1	2	
SIMPLE_DECL	179:1	179:24	3	float Y , float Cb ; Cb = 0 , float Cr ; Cr = 0 ;
INIT_DECL_LIST	179:1	179:1	4	float Y , float Cb ; Cb = 0 , float Cr ; Cr = 0
VAR_DECL	179:1	179:7	5	float Y
TYPE	179:1	179:1	6	float
TYPE_NAME	179:1	179:1	7	float
LEAF_NODE	179:1	179:1	8	float
NAME	179:7	179:7	6	Y
LEAF_NODE	179:7	179:7	7	Y
LEAF_NODE	179:8	179:8	5	,
INIT_DECL_LIST	179:1	179:1	5	float Cb ; Cb = 0 , float Cr ; Cr = 0
VAR_DECL	179:1	179:10	6	float Cb ; Cb = 0
TYPE	179:1	179:1	7	float
TYPE_NAME	179:1	179:1	8	float
LEAF_NODE	179:1	179:1	9	float
NAME	179:10	179:10	7	Cb
LEAF_NODE	179:10	179:10	8	Cb
LEAF_NODE	0:0	0:0	7	;
INIT	179:10	179:10	7	Cb = 0
ASSIGN	179:10	179:15	8	Cb = 0
LVAL	179:10	179:10	9	Cb
NAME	179:10	179:10	10	Cb
LEAF_NODE	179:10	179:10	11	Cb
ASSIGN_OP	179:13	179:13	9	=
LEAF_NODE	179:13	179:13	10	=
RVAL	179:15	179:15	9	0
FIELD	179:15	179:15	10	0
LEAF_NODE	179:15	179:15	11	0
LEAF_NODE	179:16	179:16	6	,
VAR_DECL	179:1	179:18	6	float Cr ; Cr = 0
TYPE	179:1	179:1	7	float
TYPE_NAME	179:1	179:1	8	float
LEAF_NODE	179:1	179:1	9	float
NAME	179:18	179:18	7	Cr
LEAF_NODE	179:18	179:18	8	Cr
LEAF_NODE	0:0	0:0	7	;
INIT	179:18	179:18	7	Cr = 0
ASSIGN	179:18	179:23	8	Cr = 0
LVAL	179:18	179:18	9	Cr
NAME	179:18	179:18	10	Cr
LEAF_NODE	179:18	179:18	11	Cr
ASSIGN_OP	179:21	179:21	9	=
LEAF_NODE	179:21	179:21	10	=
RVAL	179:23	179:23	9	0
FIELD	179:23	179:23	10	0
LEAF_NODE	179:23	179:23	11	0
LEAF_NODE	179:24	179:24	4	;
SIMPLE_DECL	180:1	180:12	3	uint32 j , uint32 k ;
INIT_DECL_LIST	180:1	180:1	4	uint32 j , uint32 k
VAR_DECL	180:1	180:8	5	uint32 j
TYPE	180:1	180:1	6	uint32
TYPE_NAME	180:1	180:1	7	uint32
LEAF_NODE	180:1	180:1	8	uint32
NAME	180:8	180:8	6	j
LEAF_NODE	180:8	180:8	7	j
LEAF_NODE	180:9	180:9	5	,
VAR_DECL	180:1	180:11	5	uint32 k
TYPE	180:1	180:1	6	uint32
TYPE_NAME	180:1	180:1	7	uint32
LEAF_NODE	180:1	180:1	8	uint32
NAME	180:11	180:11	6	k
LEAF_NODE	180:11	180:11	7	k
LEAF_NODE	180:12	180:12	4	;
ITERATION	185:1	185:26	3	
KEYWORD	185:1	185:1	4	for
LEAF_NODE	185:1	185:1	5	for
LEAF_NODE	185:5	185:5	4	(
FOR_INIT	185:6	185:11	4	k = 0 ;
EXPR	185:6	185:6	5	k = 0
ASSIGN	185:6	185:10	6	k = 0
LVAL	185:6	185:6	7	k
FIELD	185:6	185:6	8	k
LEAF_NODE	185:6	185:6	9	k
ASSIGN_OP	185:8	185:8	7	=
LEAF_NODE	185:8	185:8	8	=
RVAL	185:10	185:10	7	0
FIELD	185:10	185:10	8	0
LEAF_NODE	185:10	185:10	9	0
LEAF_NODE	185:11	185:11	5	;
CONDITION	185:13	185:13	4	k < ch
EXPR	185:13	185:17	5	k < ch
FIELD	185:13	185:13	6	k
LEAF_NODE	185:13	185:13	7	k
REL_OPERATOR	185:15	185:15	6	<
LEAF_NODE	185:15	185:15	7	<
FIELD	185:17	185:17	6	ch
LEAF_NODE	185:17	185:17	7	ch
LEAF_NODE	185:19	185:19	4	;
FOR_EXPR	185:21	185:21	4	k ++
EXPR	185:21	185:21	5	k ++
FIELD	185:21	185:22	6	k ++
LEAF_NODE	185:21	185:21	7	k
LEAF_NODE	185:22	185:22	7	++
LEAF_NODE	185:24	185:24	4	)
STATEMENTS	185:26	200:1	4	
LEAF_NODE	185:26	185:26	5	{
STATEMENTS	186:2	198:2	5	
ITERATION	186:2	186:27	6	
KEYWORD	186:2	186:2	7	for
LEAF_NODE	186:2	186:2	8	for
LEAF_NODE	186:6	186:6	7	(
FOR_INIT	186:7	186:12	7	j = 0 ;
EXPR	186:7	186:7	8	j = 0
ASSIGN	186:7	186:11	9	j = 0
LVAL	186:7	186:7	10	j
FIELD	186:7	186:7	11	j
LEAF_NODE	186:7	186:7	12	j
ASSIGN_OP	186:9	186:9	10	=
LEAF_NODE	186:9	186:9	11	=
RVAL	186:11	186:11	10	0
FIELD	186:11	186:11	11	0
LEAF_NODE	186:11	186:11	12	0
LEAF_NODE	186:12	186:12	8	;
CONDITION	186:14	186:14	7	j < cw
EXPR	186:14	186:18	8	j < cw
FIELD	186:14	186:14	9	j
LEAF_NODE	186:14	186:14	10	j
REL_OPERATOR	186:16	186:16	9	<
LEAF_NODE	186:16	186:16	10	<
FIELD	186:18	186:18	9	cw
LEAF_NODE	186:18	186:18	10	cw
LEAF_NODE	186:20	186:20	7	;
FOR_EXPR	186:22	186:22	7	j ++
EXPR	186:22	186:22	8	j ++
FIELD	186:22	186:23	9	j ++
LEAF_NODE	186:22	186:22	10	j
LEAF_NODE	186:23	186:23	10	++
LEAF_NODE	186:25	186:25	7	)
STATEMENTS	186:27	197:2	7	
LEAF_NODE	186:27	186:27	8	{
STATEMENTS	187:3	195:3	8	
SIMPLE_DECL	187:3	187:33	9	uint32 RGB ; RGB = ( raster - k * w ) [ j ] ;
VAR_DECL	187:3	187:10	10	uint32 RGB ; RGB = ( raster - k * w ) [ j ]
TYPE	187:3	187:3	11	uint32
TYPE_NAME	187:3	187:3	12	uint32
LEAF_NODE	187:3	187:3	13	uint32
NAME	187:10	187:10	11	RGB
LEAF_NODE	187:10	187:10	12	RGB
LEAF_NODE	0:0	0:0	11	;
INIT	187:10	187:10	11	RGB = ( raster - k * w ) [ j ]
ASSIGN	187:10	187:16	12	RGB = ( raster - k * w ) [ j ]
LVAL	187:10	187:10	13	RGB
NAME	187:10	187:10	14	RGB
LEAF_NODE	187:10	187:10	15	RGB
ASSIGN_OP	187:14	187:14	13	=
LEAF_NODE	187:14	187:14	14	=
RVAL	187:16	187:32	13	( raster - k * w ) [ j ]
LEAF_NODE	187:16	187:16	14	(
FIELD	187:17	187:17	14	raster
LEAF_NODE	187:17	187:17	15	raster
LEAF_NODE	187:24	187:24	14	-
FIELD	187:26	187:26	14	k
LEAF_NODE	187:26	187:26	15	k
LEAF_NODE	187:27	187:27	14	*
FIELD	187:28	187:28	14	w
LEAF_NODE	187:28	187:28	15	w
LEAF_NODE	187:29	187:29	14	)
LEAF_NODE	187:30	187:30	14	[
EXPR	187:31	187:31	14	j
FIELD	187:31	187:31	15	j
LEAF_NODE	187:31	187:31	16	j
LEAF_NODE	187:32	187:32	14	]
LEAF_NODE	187:33	187:33	10	;
EXPR_STATEMENT	188:3	190:30	9	Y = lumaRed [ TIFFGetR ( RGB ) ] + lumaGreen [ TIFFGetG ( RGB ) ] + lumaBlue [ TIFFGetB ( RGB ) ] ;
EXPR	188:3	188:3	10	Y = lumaRed [ TIFFGetR ( RGB ) ] + lumaGreen [ TIFFGetG ( RGB ) ] + lumaBlue [ TIFFGetB ( RGB ) ]
ASSIGN	188:3	188:7	11	Y = lumaRed [ TIFFGetR ( RGB ) ] + lumaGreen [ TIFFGetG ( RGB ) ] + lumaBlue [ TIFFGetB ( RGB ) ]
LVAL	188:3	188:3	12	Y
FIELD	188:3	188:3	13	Y
LEAF_NODE	188:3	188:3	14	Y
ASSIGN_OP	188:5	188:5	12	=
LEAF_NODE	188:5	188:5	13	=
RVAL	188:7	190:7	12	lumaRed [ TIFFGetR ( RGB ) ] + lumaGreen [ TIFFGetG ( RGB ) ] + lumaBlue [ TIFFGetB ( RGB ) ]
FIELD	188:7	188:28	13	lumaRed [ TIFFGetR ( RGB ) ]
LEAF_NODE	188:7	188:7	14	lumaRed
LEAF_NODE	188:14	188:14	14	[
EXPR	188:15	188:15	14	TIFFGetR ( RGB )
FUNCTION_CALL	188:15	188:27	15	TIFFGetR ( RGB )
CALLEE	188:15	188:15	16	TIFFGetR
LEAF_NODE	188:15	188:15	17	TIFFGetR
LEAF_NODE	188:23	188:23	16	(
ARGUMENT	188:24	188:24	16	RGB
FIELD	188:24	188:24	17	RGB
LEAF_NODE	188:24	188:24	18	RGB
LEAF_NODE	188:27	188:27	16	)
LEAF_NODE	188:28	188:28	14	]
LEAF_NODE	188:30	188:30	13	+
FIELD	189:7	189:30	13	lumaGreen [ TIFFGetG ( RGB ) ]
LEAF_NODE	189:7	189:7	14	lumaGreen
LEAF_NODE	189:16	189:16	14	[
EXPR	189:17	189:17	14	TIFFGetG ( RGB )
FUNCTION_CALL	189:17	189:29	15	TIFFGetG ( RGB )
CALLEE	189:17	189:17	16	TIFFGetG
LEAF_NODE	189:17	189:17	17	TIFFGetG
LEAF_NODE	189:25	189:25	16	(
ARGUMENT	189:26	189:26	16	RGB
FIELD	189:26	189:26	17	RGB
LEAF_NODE	189:26	189:26	18	RGB
LEAF_NODE	189:29	189:29	16	)
LEAF_NODE	189:30	189:30	14	]
LEAF_NODE	189:32	189:32	13	+
FIELD	190:7	190:29	13	lumaBlue [ TIFFGetB ( RGB ) ]
LEAF_NODE	190:7	190:7	14	lumaBlue
LEAF_NODE	190:15	190:15	14	[
EXPR	190:16	190:16	14	TIFFGetB ( RGB )
FUNCTION_CALL	190:16	190:28	15	TIFFGetB ( RGB )
CALLEE	190:16	190:16	16	TIFFGetB
LEAF_NODE	190:16	190:16	17	TIFFGetB
LEAF_NODE	190:24	190:24	16	(
ARGUMENT	190:25	190:25	16	RGB
FIELD	190:25	190:25	17	RGB
LEAF_NODE	190:25	190:25	18	RGB
LEAF_NODE	190:28	190:28	16	)
LEAF_NODE	190:29	190:29	14	]
LEAF_NODE	190:30	190:30	10	;
EXPR_STATEMENT	192:3	192:33	9	Cb += ( TIFFGetB ( RGB ) - Y ) * D1 ;
EXPR	192:3	192:3	10	Cb += ( TIFFGetB ( RGB ) - Y ) * D1
ASSIGN	192:3	192:9	11	Cb += ( TIFFGetB ( RGB ) - Y ) * D1
LVAL	192:3	192:3	12	Cb
FIELD	192:3	192:3	13	Cb
LEAF_NODE	192:3	192:3	14	Cb
ASSIGN_OP	192:6	192:6	12	+=
LEAF_NODE	192:6	192:6	13	+=
RVAL	192:9	192:31	12	( TIFFGetB ( RGB ) - Y ) * D1
LEAF_NODE	192:9	192:9	13	(
FUNCTION_CALL	192:10	192:22	13	TIFFGetB ( RGB )
CALLEE	192:10	192:10	14	TIFFGetB
LEAF_NODE	192:10	192:10	15	TIFFGetB
LEAF_NODE	192:18	192:18	14	(
ARGUMENT	192:19	192:19	14	RGB
FIELD	192:19	192:19	15	RGB
LEAF_NODE	192:19	192:19	16	RGB
LEAF_NODE	192:22	192:22	14	)
LEAF_NODE	192:24	192:24	13	-
FIELD	192:26	192:26	13	Y
LEAF_NODE	192:26	192:26	14	Y
LEAF_NODE	192:27	192:27	13	)
LEAF_NODE	192:29	192:29	13	*
FIELD	192:31	192:31	13	D1
LEAF_NODE	192:31	192:31	14	D1
LEAF_NODE	192:33	192:33	10	;
EXPR_STATEMENT	193:3	193:33	9	Cr += ( TIFFGetR ( RGB ) - Y ) * D2 ;
EXPR	193:3	193:3	10	Cr += ( TIFFGetR ( RGB ) - Y ) * D2
ASSIGN	193:3	193:9	11	Cr += ( TIFFGetR ( RGB ) - Y ) * D2
LVAL	193:3	193:3	12	Cr
FIELD	193:3	193:3	13	Cr
LEAF_NODE	193:3	193:3	14	Cr
ASSIGN_OP	193:6	193:6	12	+=
LEAF_NODE	193:6	193:6	13	+=
RVAL	193:9	193:31	12	( TIFFGetR ( RGB ) - Y ) * D2
LEAF_NODE	193:9	193:9	13	(
FUNCTION_CALL	193:10	193:22	13	TIFFGetR ( RGB )
CALLEE	193:10	193:10	14	TIFFGetR
LEAF_NODE	193:10	193:10	15	TIFFGetR
LEAF_NODE	193:18	193:18	14	(
ARGUMENT	193:19	193:19	14	RGB
FIELD	193:19	193:19	15	RGB
LEAF_NODE	193:19	193:19	16	RGB
LEAF_NODE	193:22	193:22	14	)
LEAF_NODE	193:24	193:24	13	-
FIELD	193:26	193:26	13	Y
LEAF_NODE	193:26	193:26	14	Y
LEAF_NODE	193:27	193:27	13	)
LEAF_NODE	193:29	193:29	13	*
FIELD	193:31	193:31	13	D2
LEAF_NODE	193:31	193:31	14	D2
LEAF_NODE	193:33	193:33	10	;
EXPR_STATEMENT	195:3	196:47	9	* op ++ = V2Code ( Y , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 ) ;
EXPR	195:3	195:3	10	* op ++ = V2Code ( Y , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
ASSIGN	195:3	195:11	11	* op ++ = V2Code ( Y , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
LVAL	195:3	195:3	12	* op ++
UNARY_EXPR	195:3	195:4	13	* op ++
UNARY_OPERATOR	195:3	195:3	14	*
LEAF_NODE	195:3	195:3	15	*
FIELD	195:4	195:6	14	op ++
LEAF_NODE	195:4	195:4	15	op
LEAF_NODE	195:6	195:6	15	++
ASSIGN_OP	195:9	195:9	12	=
LEAF_NODE	195:9	195:9	13	=
RVAL	195:11	195:11	12	V2Code ( Y , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
FUNCTION_CALL	195:11	196:46	13	V2Code ( Y , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
CALLEE	195:11	195:11	14	V2Code
LEAF_NODE	195:11	195:11	15	V2Code
LEAF_NODE	195:17	195:17	14	(
ARGUMENT	195:18	195:18	14	Y
FIELD	195:18	195:18	15	Y
LEAF_NODE	195:18	195:18	16	Y
LEAF_NODE	195:19	195:19	14	,
ARGUMENT	196:7	196:7	14	refBlackWhite [ 0 ]
FIELD	196:7	196:22	15	refBlackWhite [ 0 ]
LEAF_NODE	196:7	196:7	16	refBlackWhite
LEAF_NODE	196:20	196:20	16	[
EXPR	196:21	196:21	16	0
FIELD	196:21	196:21	17	0
LEAF_NODE	196:21	196:21	18	0
LEAF_NODE	196:22	196:22	16	]
LEAF_NODE	196:23	196:23	14	,
ARGUMENT	196:25	196:25	14	refBlackWhite [ 1 ]
FIELD	196:25	196:40	15	refBlackWhite [ 1 ]
LEAF_NODE	196:25	196:25	16	refBlackWhite
LEAF_NODE	196:38	196:38	16	[
EXPR	196:39	196:39	16	1
FIELD	196:39	196:39	17	1
LEAF_NODE	196:39	196:39	18	1
LEAF_NODE	196:40	196:40	16	]
LEAF_NODE	196:41	196:41	14	,
ARGUMENT	196:43	196:43	14	255
FIELD	196:43	196:43	15	255
LEAF_NODE	196:43	196:43	16	255
LEAF_NODE	196:46	196:46	14	)
LEAF_NODE	196:47	196:47	10	;
LEAF_NODE	197:2	197:2	8	}
ITERATION	198:2	199:3	6	
KEYWORD	198:2	198:2	7	for
LEAF_NODE	198:2	198:2	8	for
LEAF_NODE	198:6	198:6	7	(
FOR_INIT	198:7	198:7	7	;
LEAF_NODE	198:7	198:7	8	;
CONDITION	198:9	198:9	7	j < horizSubSampling
EXPR	198:9	198:13	8	j < horizSubSampling
FIELD	198:9	198:9	9	j
LEAF_NODE	198:9	198:9	10	j
REL_OPERATOR	198:11	198:11	9	<
LEAF_NODE	198:11	198:11	10	<
FIELD	198:13	198:13	9	horizSubSampling
LEAF_NODE	198:13	198:13	10	horizSubSampling
LEAF_NODE	198:29	198:29	7	;
FOR_EXPR	198:31	198:31	7	j ++
EXPR	198:31	198:31	8	j ++
FIELD	198:31	198:32	9	j ++
LEAF_NODE	198:31	198:31	10	j
LEAF_NODE	198:32	198:32	10	++
LEAF_NODE	198:34	198:34	7	)
STATEMENTS	199:3	199:3	7	
EXPR_STATEMENT	199:3	199:16	8	* op ++ = Yzero ;
EXPR	199:3	199:3	9	* op ++ = Yzero
ASSIGN	199:3	199:11	10	* op ++ = Yzero
LVAL	199:3	199:3	11	* op ++
UNARY_EXPR	199:3	199:4	12	* op ++
UNARY_OPERATOR	199:3	199:3	13	*
LEAF_NODE	199:3	199:3	14	*
FIELD	199:4	199:6	13	op ++
LEAF_NODE	199:4	199:4	14	op
LEAF_NODE	199:6	199:6	14	++
ASSIGN_OP	199:9	199:9	11	=
LEAF_NODE	199:9	199:9	12	=
RVAL	199:11	199:11	11	Yzero
FIELD	199:11	199:11	12	Yzero
LEAF_NODE	199:11	199:11	13	Yzero
LEAF_NODE	199:16	199:16	9	;
LEAF_NODE	200:1	200:1	5	}
ITERATION	201:1	201:34	3	
KEYWORD	201:1	201:1	4	for
LEAF_NODE	201:1	201:1	5	for
LEAF_NODE	201:5	201:5	4	(
FOR_INIT	201:6	201:6	4	;
LEAF_NODE	201:6	201:6	5	;
CONDITION	201:8	201:8	4	k < vertSubSampling
EXPR	201:8	201:12	5	k < vertSubSampling
FIELD	201:8	201:8	6	k
LEAF_NODE	201:8	201:8	7	k
REL_OPERATOR	201:10	201:10	6	<
LEAF_NODE	201:10	201:10	7	<
FIELD	201:12	201:12	6	vertSubSampling
LEAF_NODE	201:12	201:12	7	vertSubSampling
LEAF_NODE	201:27	201:27	4	;
FOR_EXPR	201:29	201:29	4	k ++
EXPR	201:29	201:29	5	k ++
FIELD	201:29	201:30	6	k ++
LEAF_NODE	201:29	201:29	7	k
LEAF_NODE	201:30	201:30	7	++
LEAF_NODE	201:32	201:32	4	)
STATEMENTS	201:34	204:1	4	
LEAF_NODE	201:34	201:34	5	{
STATEMENTS	202:2	202:2	5	
ITERATION	202:2	203:3	6	
KEYWORD	202:2	202:2	7	for
LEAF_NODE	202:2	202:2	8	for
LEAF_NODE	202:6	202:6	7	(
FOR_INIT	202:7	202:12	7	j = 0 ;
EXPR	202:7	202:7	8	j = 0
ASSIGN	202:7	202:11	9	j = 0
LVAL	202:7	202:7	10	j
FIELD	202:7	202:7	11	j
LEAF_NODE	202:7	202:7	12	j
ASSIGN_OP	202:9	202:9	10	=
LEAF_NODE	202:9	202:9	11	=
RVAL	202:11	202:11	10	0
FIELD	202:11	202:11	11	0
LEAF_NODE	202:11	202:11	12	0
LEAF_NODE	202:12	202:12	8	;
CONDITION	202:14	202:14	7	j < horizSubSampling
EXPR	202:14	202:18	8	j < horizSubSampling
FIELD	202:14	202:14	9	j
LEAF_NODE	202:14	202:14	10	j
REL_OPERATOR	202:16	202:16	9	<
LEAF_NODE	202:16	202:16	10	<
FIELD	202:18	202:18	9	horizSubSampling
LEAF_NODE	202:18	202:18	10	horizSubSampling
LEAF_NODE	202:34	202:34	7	;
FOR_EXPR	202:36	202:36	7	j ++
EXPR	202:36	202:36	8	j ++
FIELD	202:36	202:37	9	j ++
LEAF_NODE	202:36	202:36	10	j
LEAF_NODE	202:37	202:37	10	++
LEAF_NODE	202:39	202:39	7	)
STATEMENTS	203:3	203:3	7	
EXPR_STATEMENT	203:3	203:16	8	* op ++ = Yzero ;
EXPR	203:3	203:3	9	* op ++ = Yzero
ASSIGN	203:3	203:11	10	* op ++ = Yzero
LVAL	203:3	203:3	11	* op ++
UNARY_EXPR	203:3	203:4	12	* op ++
UNARY_OPERATOR	203:3	203:3	13	*
LEAF_NODE	203:3	203:3	14	*
FIELD	203:4	203:6	13	op ++
LEAF_NODE	203:4	203:4	14	op
LEAF_NODE	203:6	203:6	14	++
ASSIGN_OP	203:9	203:9	11	=
LEAF_NODE	203:9	203:9	12	=
RVAL	203:11	203:11	11	Yzero
FIELD	203:11	203:11	12	Yzero
LEAF_NODE	203:11	203:11	13	Yzero
LEAF_NODE	203:16	203:16	9	;
LEAF_NODE	204:1	204:1	5	}
EXPR_STATEMENT	206:1	206:70	3	* op ++ = V2Code ( Cb / ( ch * cw ) , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 ) ;
EXPR	206:1	206:1	4	* op ++ = V2Code ( Cb / ( ch * cw ) , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
ASSIGN	206:1	206:9	5	* op ++ = V2Code ( Cb / ( ch * cw ) , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
LVAL	206:1	206:1	6	* op ++
UNARY_EXPR	206:1	206:2	7	* op ++
UNARY_OPERATOR	206:1	206:1	8	*
LEAF_NODE	206:1	206:1	9	*
FIELD	206:2	206:4	8	op ++
LEAF_NODE	206:2	206:2	9	op
LEAF_NODE	206:4	206:4	9	++
ASSIGN_OP	206:7	206:7	6	=
LEAF_NODE	206:7	206:7	7	=
RVAL	206:9	206:9	6	V2Code ( Cb / ( ch * cw ) , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
FUNCTION_CALL	206:9	206:69	7	V2Code ( Cb / ( ch * cw ) , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
CALLEE	206:9	206:9	8	V2Code
LEAF_NODE	206:9	206:9	9	V2Code
LEAF_NODE	206:15	206:15	8	(
ARGUMENT	206:16	206:27	8	Cb / ( ch * cw )
FIELD	206:16	206:16	9	Cb
LEAF_NODE	206:16	206:16	10	Cb
LEAF_NODE	206:19	206:19	9	/
LEAF_NODE	206:21	206:21	9	(
FIELD	206:22	206:22	9	ch
LEAF_NODE	206:22	206:22	10	ch
LEAF_NODE	206:24	206:24	9	*
FIELD	206:25	206:25	9	cw
LEAF_NODE	206:25	206:25	10	cw
LEAF_NODE	206:27	206:27	9	)
LEAF_NODE	206:28	206:28	8	,
ARGUMENT	206:30	206:30	8	refBlackWhite [ 2 ]
FIELD	206:30	206:45	9	refBlackWhite [ 2 ]
LEAF_NODE	206:30	206:30	10	refBlackWhite
LEAF_NODE	206:43	206:43	10	[
EXPR	206:44	206:44	10	2
FIELD	206:44	206:44	11	2
LEAF_NODE	206:44	206:44	12	2
LEAF_NODE	206:45	206:45	10	]
LEAF_NODE	206:46	206:46	8	,
ARGUMENT	206:48	206:48	8	refBlackWhite [ 3 ]
FIELD	206:48	206:63	9	refBlackWhite [ 3 ]
LEAF_NODE	206:48	206:48	10	refBlackWhite
LEAF_NODE	206:61	206:61	10	[
EXPR	206:62	206:62	10	3
FIELD	206:62	206:62	11	3
LEAF_NODE	206:62	206:62	12	3
LEAF_NODE	206:63	206:63	10	]
LEAF_NODE	206:64	206:64	8	,
ARGUMENT	206:66	206:66	8	127
FIELD	206:66	206:66	9	127
LEAF_NODE	206:66	206:66	10	127
LEAF_NODE	206:69	206:69	8	)
LEAF_NODE	206:70	206:70	4	;
EXPR_STATEMENT	207:1	207:70	3	* op ++ = V2Code ( Cr / ( ch * cw ) , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 ) ;
EXPR	207:1	207:1	4	* op ++ = V2Code ( Cr / ( ch * cw ) , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
ASSIGN	207:1	207:9	5	* op ++ = V2Code ( Cr / ( ch * cw ) , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
LVAL	207:1	207:1	6	* op ++
UNARY_EXPR	207:1	207:2	7	* op ++
UNARY_OPERATOR	207:1	207:1	8	*
LEAF_NODE	207:1	207:1	9	*
FIELD	207:2	207:4	8	op ++
LEAF_NODE	207:2	207:2	9	op
LEAF_NODE	207:4	207:4	9	++
ASSIGN_OP	207:7	207:7	6	=
LEAF_NODE	207:7	207:7	7	=
RVAL	207:9	207:9	6	V2Code ( Cr / ( ch * cw ) , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
FUNCTION_CALL	207:9	207:69	7	V2Code ( Cr / ( ch * cw ) , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
CALLEE	207:9	207:9	8	V2Code
LEAF_NODE	207:9	207:9	9	V2Code
LEAF_NODE	207:15	207:15	8	(
ARGUMENT	207:16	207:27	8	Cr / ( ch * cw )
FIELD	207:16	207:16	9	Cr
LEAF_NODE	207:16	207:16	10	Cr
LEAF_NODE	207:19	207:19	9	/
LEAF_NODE	207:21	207:21	9	(
FIELD	207:22	207:22	9	ch
LEAF_NODE	207:22	207:22	10	ch
LEAF_NODE	207:24	207:24	9	*
FIELD	207:25	207:25	9	cw
LEAF_NODE	207:25	207:25	10	cw
LEAF_NODE	207:27	207:27	9	)
LEAF_NODE	207:28	207:28	8	,
ARGUMENT	207:30	207:30	8	refBlackWhite [ 4 ]
FIELD	207:30	207:45	9	refBlackWhite [ 4 ]
LEAF_NODE	207:30	207:30	10	refBlackWhite
LEAF_NODE	207:43	207:43	10	[
EXPR	207:44	207:44	10	4
FIELD	207:44	207:44	11	4
LEAF_NODE	207:44	207:44	12	4
LEAF_NODE	207:45	207:45	10	]
LEAF_NODE	207:46	207:46	8	,
ARGUMENT	207:48	207:48	8	refBlackWhite [ 5 ]
FIELD	207:48	207:63	9	refBlackWhite [ 5 ]
LEAF_NODE	207:48	207:48	10	refBlackWhite
LEAF_NODE	207:61	207:61	10	[
EXPR	207:62	207:62	10	5
FIELD	207:62	207:62	11	5
LEAF_NODE	207:62	207:62	12	5
LEAF_NODE	207:63	207:63	10	]
LEAF_NODE	207:64	207:64	8	,
ARGUMENT	207:66	207:66	8	127
FIELD	207:66	207:66	9	127
LEAF_NODE	207:66	207:66	10	127
LEAF_NODE	207:69	207:69	8	)
LEAF_NODE	207:70	207:70	4	;
LEAF_NODE	208:0	208:0	2	}
FUNCTION_DEF	218:0	249:0	1	
RETURN_TYPE	218:0	218:7	2	static void
LEAF_NODE	218:0	218:0	3	static
TYPE_NAME	218:7	218:7	3	void
LEAF_NODE	218:7	218:7	4	void
FUNCTION_NAME	219:0	219:0	2	cvtStrip
LEAF_NODE	219:0	219:0	3	cvtStrip
PARAMETER_LIST	219:8	219:70	2	( unsigned char * op , uint32 * raster , uint32 nrows , uint32 width )
LEAF_NODE	219:8	219:8	3	(
PARAMETER_DECL	219:9	219:24	3	unsigned char * op
TYPE	219:9	219:22	4	unsigned char *
TYPE_NAME	219:9	219:18	5	unsigned char
LEAF_NODE	219:9	219:9	6	unsigned
LEAF_NODE	219:18	219:18	6	char
POINTER	219:22	219:22	5	*
LEAF_NODE	219:22	219:22	6	*
NAME	219:24	219:24	4	op
LEAF_NODE	219:24	219:24	5	op
LEAF_NODE	219:26	219:26	3	,
PARAMETER_DECL	219:28	219:36	3	uint32 * raster
TYPE	219:28	219:34	4	uint32 *
TYPE_NAME	219:28	219:28	5	uint32
LEAF_NODE	219:28	219:28	6	uint32
POINTER	219:34	219:34	5	*
LEAF_NODE	219:34	219:34	6	*
NAME	219:36	219:36	4	raster
LEAF_NODE	219:36	219:36	5	raster
LEAF_NODE	219:42	219:42	3	,
PARAMETER_DECL	219:44	219:51	3	uint32 nrows
TYPE	219:44	219:44	4	uint32
TYPE_NAME	219:44	219:44	5	uint32
LEAF_NODE	219:44	219:44	6	uint32
NAME	219:51	219:51	4	nrows
LEAF_NODE	219:51	219:51	5	nrows
LEAF_NODE	219:56	219:56	3	,
PARAMETER_DECL	219:58	219:65	3	uint32 width
TYPE	219:58	219:58	4	uint32
TYPE_NAME	219:58	219:58	5	uint32
LEAF_NODE	219:58	219:58	6	uint32
NAME	219:65	219:65	4	width
LEAF_NODE	219:65	219:65	5	width
LEAF_NODE	219:70	219:70	3	)
LEAF_NODE	220:0	220:0	2	{
STATEMENTS	221:1	239:1	2	
SIMPLE_DECL	221:1	221:9	3	uint32 x ;
VAR_DECL	221:1	221:8	4	uint32 x
TYPE	221:1	221:1	5	uint32
TYPE_NAME	221:1	221:1	6	uint32
LEAF_NODE	221:1	221:1	7	uint32
NAME	221:8	221:8	5	x
LEAF_NODE	221:8	221:8	6	x
LEAF_NODE	221:9	221:9	4	;
SIMPLE_DECL	222:1	222:55	3	int clumpSize ; clumpSize = vertSubSampling * horizSubSampling + 2 ;
VAR_DECL	222:1	222:5	4	int clumpSize ; clumpSize = vertSubSampling * horizSubSampling + 2
TYPE	222:1	222:1	5	int
TYPE_NAME	222:1	222:1	6	int
LEAF_NODE	222:1	222:1	7	int
NAME	222:5	222:5	5	clumpSize
LEAF_NODE	222:5	222:5	6	clumpSize
LEAF_NODE	0:0	0:0	5	;
INIT	222:5	222:5	5	clumpSize = vertSubSampling * horizSubSampling + 2
ASSIGN	222:5	222:17	6	clumpSize = vertSubSampling * horizSubSampling + 2
LVAL	222:5	222:5	7	clumpSize
NAME	222:5	222:5	8	clumpSize
LEAF_NODE	222:5	222:5	9	clumpSize
ASSIGN_OP	222:15	222:15	7	=
LEAF_NODE	222:15	222:15	8	=
RVAL	222:17	222:54	7	vertSubSampling * horizSubSampling + 2
FIELD	222:17	222:17	8	vertSubSampling
LEAF_NODE	222:17	222:17	9	vertSubSampling
LEAF_NODE	222:33	222:33	8	*
FIELD	222:35	222:35	8	horizSubSampling
LEAF_NODE	222:35	222:35	9	horizSubSampling
LEAF_NODE	222:52	222:52	8	+
FIELD	222:54	222:54	8	2
LEAF_NODE	222:54	222:54	9	2
LEAF_NODE	222:55	222:55	4	;
SIMPLE_DECL	223:1	223:11	3	uint32 * tp ;
VAR_DECL	223:1	223:9	4	uint32 * tp
TYPE	223:1	223:8	5	uint32 *
TYPE_NAME	223:1	223:1	6	uint32
LEAF_NODE	223:1	223:1	7	uint32
POINTER	223:8	223:8	6	*
LEAF_NODE	223:8	223:8	7	*
NAME	223:9	223:9	5	tp
LEAF_NODE	223:9	223:9	6	tp
LEAF_NODE	223:11	223:11	4	;
ITERATION	225:1	225:60	3	
KEYWORD	225:1	225:1	4	for
LEAF_NODE	225:1	225:1	5	for
LEAF_NODE	225:5	225:5	4	(
FOR_INIT	225:6	225:6	4	;
LEAF_NODE	225:6	225:6	5	;
CONDITION	225:8	225:8	4	nrows >= vertSubSampling
EXPR	225:8	225:17	5	nrows >= vertSubSampling
FIELD	225:8	225:8	6	nrows
LEAF_NODE	225:8	225:8	7	nrows
REL_OPERATOR	225:14	225:14	6	>=
LEAF_NODE	225:14	225:14	7	>=
FIELD	225:17	225:17	6	vertSubSampling
LEAF_NODE	225:17	225:17	7	vertSubSampling
LEAF_NODE	225:32	225:32	4	;
FOR_EXPR	225:34	225:34	4	nrows -= vertSubSampling
EXPR	225:34	225:34	5	nrows -= vertSubSampling
ASSIGN	225:34	225:43	6	nrows -= vertSubSampling
LVAL	225:34	225:34	7	nrows
FIELD	225:34	225:34	8	nrows
LEAF_NODE	225:34	225:34	9	nrows
ASSIGN_OP	225:40	225:40	7	-=
LEAF_NODE	225:40	225:40	8	-=
RVAL	225:43	225:43	7	vertSubSampling
FIELD	225:43	225:43	8	vertSubSampling
LEAF_NODE	225:43	225:43	9	vertSubSampling
LEAF_NODE	225:58	225:58	4	)
STATEMENTS	225:60	238:1	4	
LEAF_NODE	225:60	225:60	5	{
STATEMENTS	226:2	237:2	5	
EXPR_STATEMENT	226:2	226:13	6	tp = raster ;
EXPR	226:2	226:2	7	tp = raster
ASSIGN	226:2	226:7	8	tp = raster
LVAL	226:2	226:2	9	tp
FIELD	226:2	226:2	10	tp
LEAF_NODE	226:2	226:2	11	tp
ASSIGN_OP	226:5	226:5	9	=
LEAF_NODE	226:5	226:5	10	=
RVAL	226:7	226:7	9	raster
FIELD	226:7	226:7	10	raster
LEAF_NODE	226:7	226:7	11	raster
LEAF_NODE	226:13	226:13	7	;
ITERATION	227:2	227:64	6	
KEYWORD	227:2	227:2	7	for
LEAF_NODE	227:2	227:2	8	for
LEAF_NODE	227:6	227:6	7	(
FOR_INIT	227:7	227:16	7	x = width ;
EXPR	227:7	227:7	8	x = width
ASSIGN	227:7	227:11	9	x = width
LVAL	227:7	227:7	10	x
FIELD	227:7	227:7	11	x
LEAF_NODE	227:7	227:7	12	x
ASSIGN_OP	227:9	227:9	10	=
LEAF_NODE	227:9	227:9	11	=
RVAL	227:11	227:11	10	width
FIELD	227:11	227:11	11	width
LEAF_NODE	227:11	227:11	12	width
LEAF_NODE	227:16	227:16	8	;
CONDITION	227:18	227:18	7	x >= horizSubSampling
EXPR	227:18	227:23	8	x >= horizSubSampling
FIELD	227:18	227:18	9	x
LEAF_NODE	227:18	227:18	10	x
REL_OPERATOR	227:20	227:20	9	>=
LEAF_NODE	227:20	227:20	10	>=
FIELD	227:23	227:23	9	horizSubSampling
LEAF_NODE	227:23	227:23	10	horizSubSampling
LEAF_NODE	227:39	227:39	7	;
FOR_EXPR	227:41	227:41	7	x -= horizSubSampling
EXPR	227:41	227:41	8	x -= horizSubSampling
ASSIGN	227:41	227:46	9	x -= horizSubSampling
LVAL	227:41	227:41	10	x
FIELD	227:41	227:41	11	x
LEAF_NODE	227:41	227:41	12	x
ASSIGN_OP	227:43	227:43	10	-=
LEAF_NODE	227:43	227:43	11	-=
RVAL	227:46	227:46	10	horizSubSampling
FIELD	227:46	227:46	11	horizSubSampling
LEAF_NODE	227:46	227:46	12	horizSubSampling
LEAF_NODE	227:62	227:62	7	)
STATEMENTS	227:64	232:2	7	
LEAF_NODE	227:64	227:64	8	{
STATEMENTS	228:3	231:3	8	
EXPR_STATEMENT	228:3	229:48	9	cvtClump ( op , tp , vertSubSampling , horizSubSampling , width ) ;
EXPR	228:3	228:3	10	cvtClump ( op , tp , vertSubSampling , horizSubSampling , width )
FUNCTION_CALL	228:3	229:47	11	cvtClump ( op , tp , vertSubSampling , horizSubSampling , width )
CALLEE	228:3	228:3	12	cvtClump
LEAF_NODE	228:3	228:3	13	cvtClump
LEAF_NODE	228:11	228:11	12	(
ARGUMENT	228:12	228:12	12	op
FIELD	228:12	228:12	13	op
LEAF_NODE	228:12	228:12	14	op
LEAF_NODE	228:14	228:14	12	,
ARGUMENT	228:16	228:16	12	tp
FIELD	228:16	228:16	13	tp
LEAF_NODE	228:16	228:16	14	tp
LEAF_NODE	228:18	228:18	12	,
ARGUMENT	229:7	229:7	12	vertSubSampling
FIELD	229:7	229:7	13	vertSubSampling
LEAF_NODE	229:7	229:7	14	vertSubSampling
LEAF_NODE	229:22	229:22	12	,
ARGUMENT	229:24	229:24	12	horizSubSampling
FIELD	229:24	229:24	13	horizSubSampling
LEAF_NODE	229:24	229:24	14	horizSubSampling
LEAF_NODE	229:40	229:40	12	,
ARGUMENT	229:42	229:42	12	width
FIELD	229:42	229:42	13	width
LEAF_NODE	229:42	229:42	14	width
LEAF_NODE	229:47	229:47	12	)
LEAF_NODE	229:48	229:48	10	;
EXPR_STATEMENT	230:3	230:18	9	op += clumpSize ;
EXPR	230:3	230:3	10	op += clumpSize
ASSIGN	230:3	230:9	11	op += clumpSize
LVAL	230:3	230:3	12	op
FIELD	230:3	230:3	13	op
LEAF_NODE	230:3	230:3	14	op
ASSIGN_OP	230:6	230:6	12	+=
LEAF_NODE	230:6	230:6	13	+=
RVAL	230:9	230:9	12	clumpSize
FIELD	230:9	230:9	13	clumpSize
LEAF_NODE	230:9	230:9	14	clumpSize
LEAF_NODE	230:18	230:18	10	;
EXPR_STATEMENT	231:3	231:25	9	tp += horizSubSampling ;
EXPR	231:3	231:3	10	tp += horizSubSampling
ASSIGN	231:3	231:9	11	tp += horizSubSampling
LVAL	231:3	231:3	12	tp
FIELD	231:3	231:3	13	tp
LEAF_NODE	231:3	231:3	14	tp
ASSIGN_OP	231:6	231:6	12	+=
LEAF_NODE	231:6	231:6	13	+=
RVAL	231:9	231:9	12	horizSubSampling
FIELD	231:9	231:9	13	horizSubSampling
LEAF_NODE	231:9	231:9	14	horizSubSampling
LEAF_NODE	231:25	231:25	10	;
LEAF_NODE	232:2	232:2	8	}
SELECTION	233:2	233:13	6	
KEYWORD	233:2	233:2	7	if
LEAF_NODE	233:2	233:2	8	if
LEAF_NODE	233:5	233:5	7	(
CONDITION	233:6	233:6	7	x > 0
EXPR	233:6	233:10	8	x > 0
FIELD	233:6	233:6	9	x
LEAF_NODE	233:6	233:6	10	x
REL_OPERATOR	233:8	233:8	9	>
LEAF_NODE	233:8	233:8	10	>
FIELD	233:10	233:10	9	0
LEAF_NODE	233:10	233:10	10	0
LEAF_NODE	233:11	233:11	7	)
STATEMENTS	233:13	236:2	7	
LEAF_NODE	233:13	233:13	8	{
STATEMENTS	234:3	235:3	8	
EXPR_STATEMENT	234:3	234:46	9	cvtClump ( op , tp , vertSubSampling , x , width ) ;
EXPR	234:3	234:3	10	cvtClump ( op , tp , vertSubSampling , x , width )
FUNCTION_CALL	234:3	234:45	11	cvtClump ( op , tp , vertSubSampling , x , width )
CALLEE	234:3	234:3	12	cvtClump
LEAF_NODE	234:3	234:3	13	cvtClump
LEAF_NODE	234:11	234:11	12	(
ARGUMENT	234:12	234:12	12	op
FIELD	234:12	234:12	13	op
LEAF_NODE	234:12	234:12	14	op
LEAF_NODE	234:14	234:14	12	,
ARGUMENT	234:16	234:16	12	tp
FIELD	234:16	234:16	13	tp
LEAF_NODE	234:16	234:16	14	tp
LEAF_NODE	234:18	234:18	12	,
ARGUMENT	234:20	234:20	12	vertSubSampling
FIELD	234:20	234:20	13	vertSubSampling
LEAF_NODE	234:20	234:20	14	vertSubSampling
LEAF_NODE	234:35	234:35	12	,
ARGUMENT	234:37	234:37	12	x
FIELD	234:37	234:37	13	x
LEAF_NODE	234:37	234:37	14	x
LEAF_NODE	234:38	234:38	12	,
ARGUMENT	234:40	234:40	12	width
FIELD	234:40	234:40	13	width
LEAF_NODE	234:40	234:40	14	width
LEAF_NODE	234:45	234:45	12	)
LEAF_NODE	234:46	234:46	10	;
EXPR_STATEMENT	235:3	235:18	9	op += clumpSize ;
EXPR	235:3	235:3	10	op += clumpSize
ASSIGN	235:3	235:9	11	op += clumpSize
LVAL	235:3	235:3	12	op
FIELD	235:3	235:3	13	op
LEAF_NODE	235:3	235:3	14	op
ASSIGN_OP	235:6	235:6	12	+=
LEAF_NODE	235:6	235:6	13	+=
RVAL	235:9	235:9	12	clumpSize
FIELD	235:9	235:9	13	clumpSize
LEAF_NODE	235:9	235:9	14	clumpSize
LEAF_NODE	235:18	235:18	10	;
LEAF_NODE	236:2	236:2	8	}
EXPR_STATEMENT	237:2	237:33	6	raster -= vertSubSampling * width ;
EXPR	237:2	237:2	7	raster -= vertSubSampling * width
ASSIGN	237:2	237:12	8	raster -= vertSubSampling * width
LVAL	237:2	237:2	9	raster
FIELD	237:2	237:2	10	raster
LEAF_NODE	237:2	237:2	11	raster
ASSIGN_OP	237:9	237:9	9	-=
LEAF_NODE	237:9	237:9	10	-=
RVAL	237:12	237:28	9	vertSubSampling * width
FIELD	237:12	237:12	10	vertSubSampling
LEAF_NODE	237:12	237:12	11	vertSubSampling
LEAF_NODE	237:27	237:27	10	*
FIELD	237:28	237:28	10	width
LEAF_NODE	237:28	237:28	11	width
LEAF_NODE	237:33	237:33	7	;
LEAF_NODE	238:1	238:1	5	}
SELECTION	239:1	239:16	3	
KEYWORD	239:1	239:1	4	if
LEAF_NODE	239:1	239:1	5	if
LEAF_NODE	239:4	239:4	4	(
CONDITION	239:5	239:5	4	nrows > 0
EXPR	239:5	239:13	5	nrows > 0
FIELD	239:5	239:5	6	nrows
LEAF_NODE	239:5	239:5	7	nrows
REL_OPERATOR	239:11	239:11	6	>
LEAF_NODE	239:11	239:11	7	>
FIELD	239:13	239:13	6	0
LEAF_NODE	239:13	239:13	7	0
LEAF_NODE	239:14	239:14	4	)
STATEMENTS	239:16	248:1	4	
LEAF_NODE	239:16	239:16	5	{
STATEMENTS	240:2	246:2	5	
EXPR_STATEMENT	240:2	240:13	6	tp = raster ;
EXPR	240:2	240:2	7	tp = raster
ASSIGN	240:2	240:7	8	tp = raster
LVAL	240:2	240:2	9	tp
FIELD	240:2	240:2	10	tp
LEAF_NODE	240:2	240:2	11	tp
ASSIGN_OP	240:5	240:5	9	=
LEAF_NODE	240:5	240:5	10	=
RVAL	240:7	240:7	9	raster
FIELD	240:7	240:7	10	raster
LEAF_NODE	240:7	240:7	11	raster
LEAF_NODE	240:13	240:13	7	;
ITERATION	241:2	241:64	6	
KEYWORD	241:2	241:2	7	for
LEAF_NODE	241:2	241:2	8	for
LEAF_NODE	241:6	241:6	7	(
FOR_INIT	241:7	241:16	7	x = width ;
EXPR	241:7	241:7	8	x = width
ASSIGN	241:7	241:11	9	x = width
LVAL	241:7	241:7	10	x
FIELD	241:7	241:7	11	x
LEAF_NODE	241:7	241:7	12	x
ASSIGN_OP	241:9	241:9	10	=
LEAF_NODE	241:9	241:9	11	=
RVAL	241:11	241:11	10	width
FIELD	241:11	241:11	11	width
LEAF_NODE	241:11	241:11	12	width
LEAF_NODE	241:16	241:16	8	;
CONDITION	241:18	241:18	7	x >= horizSubSampling
EXPR	241:18	241:23	8	x >= horizSubSampling
FIELD	241:18	241:18	9	x
LEAF_NODE	241:18	241:18	10	x
REL_OPERATOR	241:20	241:20	9	>=
LEAF_NODE	241:20	241:20	10	>=
FIELD	241:23	241:23	9	horizSubSampling
LEAF_NODE	241:23	241:23	10	horizSubSampling
LEAF_NODE	241:39	241:39	7	;
FOR_EXPR	241:41	241:41	7	x -= horizSubSampling
EXPR	241:41	241:41	8	x -= horizSubSampling
ASSIGN	241:41	241:46	9	x -= horizSubSampling
LVAL	241:41	241:41	10	x
FIELD	241:41	241:41	11	x
LEAF_NODE	241:41	241:41	12	x
ASSIGN_OP	241:43	241:43	10	-=
LEAF_NODE	241:43	241:43	11	-=
RVAL	241:46	241:46	10	horizSubSampling
FIELD	241:46	241:46	11	horizSubSampling
LEAF_NODE	241:46	241:46	12	horizSubSampling
LEAF_NODE	241:62	241:62	7	)
STATEMENTS	241:64	245:2	7	
LEAF_NODE	241:64	241:64	8	{
STATEMENTS	242:3	244:3	8	
EXPR_STATEMENT	242:3	242:51	9	cvtClump ( op , tp , nrows , horizSubSampling , width ) ;
EXPR	242:3	242:3	10	cvtClump ( op , tp , nrows , horizSubSampling , width )
FUNCTION_CALL	242:3	242:50	11	cvtClump ( op , tp , nrows , horizSubSampling , width )
CALLEE	242:3	242:3	12	cvtClump
LEAF_NODE	242:3	242:3	13	cvtClump
LEAF_NODE	242:11	242:11	12	(
ARGUMENT	242:12	242:12	12	op
FIELD	242:12	242:12	13	op
LEAF_NODE	242:12	242:12	14	op
LEAF_NODE	242:14	242:14	12	,
ARGUMENT	242:16	242:16	12	tp
FIELD	242:16	242:16	13	tp
LEAF_NODE	242:16	242:16	14	tp
LEAF_NODE	242:18	242:18	12	,
ARGUMENT	242:20	242:20	12	nrows
FIELD	242:20	242:20	13	nrows
LEAF_NODE	242:20	242:20	14	nrows
LEAF_NODE	242:25	242:25	12	,
ARGUMENT	242:27	242:27	12	horizSubSampling
FIELD	242:27	242:27	13	horizSubSampling
LEAF_NODE	242:27	242:27	14	horizSubSampling
LEAF_NODE	242:43	242:43	12	,
ARGUMENT	242:45	242:45	12	width
FIELD	242:45	242:45	13	width
LEAF_NODE	242:45	242:45	14	width
LEAF_NODE	242:50	242:50	12	)
LEAF_NODE	242:51	242:51	10	;
EXPR_STATEMENT	243:3	243:18	9	op += clumpSize ;
EXPR	243:3	243:3	10	op += clumpSize
ASSIGN	243:3	243:9	11	op += clumpSize
LVAL	243:3	243:3	12	op
FIELD	243:3	243:3	13	op
LEAF_NODE	243:3	243:3	14	op
ASSIGN_OP	243:6	243:6	12	+=
LEAF_NODE	243:6	243:6	13	+=
RVAL	243:9	243:9	12	clumpSize
FIELD	243:9	243:9	13	clumpSize
LEAF_NODE	243:9	243:9	14	clumpSize
LEAF_NODE	243:18	243:18	10	;
EXPR_STATEMENT	244:3	244:25	9	tp += horizSubSampling ;
EXPR	244:3	244:3	10	tp += horizSubSampling
ASSIGN	244:3	244:9	11	tp += horizSubSampling
LVAL	244:3	244:3	12	tp
FIELD	244:3	244:3	13	tp
LEAF_NODE	244:3	244:3	14	tp
ASSIGN_OP	244:6	244:6	12	+=
LEAF_NODE	244:6	244:6	13	+=
RVAL	244:9	244:9	12	horizSubSampling
FIELD	244:9	244:9	13	horizSubSampling
LEAF_NODE	244:9	244:9	14	horizSubSampling
LEAF_NODE	244:25	244:25	10	;
LEAF_NODE	245:2	245:2	8	}
SELECTION	246:2	247:3	6	
KEYWORD	246:2	246:2	7	if
LEAF_NODE	246:2	246:2	8	if
LEAF_NODE	246:5	246:5	7	(
CONDITION	246:6	246:6	7	x > 0
EXPR	246:6	246:10	8	x > 0
FIELD	246:6	246:6	9	x
LEAF_NODE	246:6	246:6	10	x
REL_OPERATOR	246:8	246:8	9	>
LEAF_NODE	246:8	246:8	10	>
FIELD	246:10	246:10	9	0
LEAF_NODE	246:10	246:10	10	0
LEAF_NODE	246:11	246:11	7	)
STATEMENTS	247:3	247:3	7	
EXPR_STATEMENT	247:3	247:36	8	cvtClump ( op , tp , nrows , x , width ) ;
EXPR	247:3	247:3	9	cvtClump ( op , tp , nrows , x , width )
FUNCTION_CALL	247:3	247:35	10	cvtClump ( op , tp , nrows , x , width )
CALLEE	247:3	247:3	11	cvtClump
LEAF_NODE	247:3	247:3	12	cvtClump
LEAF_NODE	247:11	247:11	11	(
ARGUMENT	247:12	247:12	11	op
FIELD	247:12	247:12	12	op
LEAF_NODE	247:12	247:12	13	op
LEAF_NODE	247:14	247:14	11	,
ARGUMENT	247:16	247:16	11	tp
FIELD	247:16	247:16	12	tp
LEAF_NODE	247:16	247:16	13	tp
LEAF_NODE	247:18	247:18	11	,
ARGUMENT	247:20	247:20	11	nrows
FIELD	247:20	247:20	12	nrows
LEAF_NODE	247:20	247:20	13	nrows
LEAF_NODE	247:25	247:25	11	,
ARGUMENT	247:27	247:27	11	x
FIELD	247:27	247:27	12	x
LEAF_NODE	247:27	247:27	13	x
LEAF_NODE	247:28	247:28	11	,
ARGUMENT	247:30	247:30	11	width
FIELD	247:30	247:30	12	width
LEAF_NODE	247:30	247:30	13	width
LEAF_NODE	247:35	247:35	11	)
LEAF_NODE	247:36	247:36	9	;
LEAF_NODE	248:1	248:1	5	}
LEAF_NODE	249:0	249:0	2	}
FUNCTION_DEF	251:0	280:0	1	
RETURN_TYPE	251:0	251:7	2	static int
LEAF_NODE	251:0	251:0	3	static
TYPE_NAME	251:7	251:7	3	int
LEAF_NODE	251:7	251:7	4	int
FUNCTION_NAME	252:0	252:0	2	cvtRaster
LEAF_NODE	252:0	252:0	3	cvtRaster
PARAMETER_LIST	252:9	252:64	2	( TIFF * tif , uint32 * raster , uint32 width , uint32 height )
LEAF_NODE	252:9	252:9	3	(
PARAMETER_DECL	252:10	252:16	3	TIFF * tif
TYPE	252:10	252:14	4	TIFF *
TYPE_NAME	252:10	252:10	5	TIFF
LEAF_NODE	252:10	252:10	6	TIFF
POINTER	252:14	252:14	5	*
LEAF_NODE	252:14	252:14	6	*
NAME	252:16	252:16	4	tif
LEAF_NODE	252:16	252:16	5	tif
LEAF_NODE	252:19	252:19	3	,
PARAMETER_DECL	252:21	252:29	3	uint32 * raster
TYPE	252:21	252:27	4	uint32 *
TYPE_NAME	252:21	252:21	5	uint32
LEAF_NODE	252:21	252:21	6	uint32
POINTER	252:27	252:27	5	*
LEAF_NODE	252:27	252:27	6	*
NAME	252:29	252:29	4	raster
LEAF_NODE	252:29	252:29	5	raster
LEAF_NODE	252:35	252:35	3	,
PARAMETER_DECL	252:37	252:44	3	uint32 width
TYPE	252:37	252:37	4	uint32
TYPE_NAME	252:37	252:37	5	uint32
LEAF_NODE	252:37	252:37	6	uint32
NAME	252:44	252:44	4	width
LEAF_NODE	252:44	252:44	5	width
LEAF_NODE	252:49	252:49	3	,
PARAMETER_DECL	252:51	252:58	3	uint32 height
TYPE	252:51	252:51	4	uint32
TYPE_NAME	252:51	252:51	5	uint32
LEAF_NODE	252:51	252:51	6	uint32
NAME	252:58	252:58	4	height
LEAF_NODE	252:58	252:58	5	height
LEAF_NODE	252:64	252:64	3	)
LEAF_NODE	253:0	253:0	2	{
STATEMENTS	254:1	279:1	2	
SIMPLE_DECL	254:1	254:9	3	uint32 y ;
VAR_DECL	254:1	254:8	4	uint32 y
TYPE	254:1	254:1	5	uint32
TYPE_NAME	254:1	254:1	6	uint32
LEAF_NODE	254:1	254:1	7	uint32
NAME	254:8	254:8	5	y
LEAF_NODE	254:8	254:8	6	y
LEAF_NODE	254:9	254:9	4	;
SIMPLE_DECL	255:1	255:19	3	tstrip_t strip ; strip = 0 ;
VAR_DECL	255:1	255:10	4	tstrip_t strip ; strip = 0
TYPE	255:1	255:1	5	tstrip_t
TYPE_NAME	255:1	255:1	6	tstrip_t
LEAF_NODE	255:1	255:1	7	tstrip_t
NAME	255:10	255:10	5	strip
LEAF_NODE	255:10	255:10	6	strip
LEAF_NODE	0:0	0:0	5	;
INIT	255:10	255:10	5	strip = 0
ASSIGN	255:10	255:18	6	strip = 0
LVAL	255:10	255:10	7	strip
NAME	255:10	255:10	8	strip
LEAF_NODE	255:10	255:10	9	strip
ASSIGN_OP	255:16	255:16	7	=
LEAF_NODE	255:16	255:16	8	=
RVAL	255:18	255:18	7	0
FIELD	255:18	255:18	8	0
LEAF_NODE	255:18	255:18	9	0
LEAF_NODE	255:19	255:19	4	;
SIMPLE_DECL	256:1	256:16	3	tsize_t cc , tsize_t acc ;
INIT_DECL_LIST	256:1	256:1	4	tsize_t cc , tsize_t acc
VAR_DECL	256:1	256:9	5	tsize_t cc
TYPE	256:1	256:1	6	tsize_t
TYPE_NAME	256:1	256:1	7	tsize_t
LEAF_NODE	256:1	256:1	8	tsize_t
NAME	256:9	256:9	6	cc
LEAF_NODE	256:9	256:9	7	cc
LEAF_NODE	256:11	256:11	5	,
VAR_DECL	256:1	256:13	5	tsize_t acc
TYPE	256:1	256:1	6	tsize_t
TYPE_NAME	256:1	256:1	7	tsize_t
LEAF_NODE	256:1	256:1	8	tsize_t
NAME	256:13	256:13	6	acc
LEAF_NODE	256:13	256:13	7	acc
LEAF_NODE	256:16	256:16	4	;
SIMPLE_DECL	257:1	257:19	3	unsigned char * buf ;
VAR_DECL	257:1	257:16	4	unsigned char * buf
TYPE	257:1	257:14	5	unsigned char *
TYPE_NAME	257:1	257:10	6	unsigned char
LEAF_NODE	257:1	257:1	7	unsigned
LEAF_NODE	257:10	257:10	7	char
POINTER	257:14	257:14	6	*
LEAF_NODE	257:14	257:14	7	*
NAME	257:16	257:16	5	buf
LEAF_NODE	257:16	257:16	6	buf
LEAF_NODE	257:19	257:19	4	;
SIMPLE_DECL	258:1	258:49	3	uint32 rwidth ; rwidth = roundup ( width , horizSubSampling ) ;
VAR_DECL	258:1	258:8	4	uint32 rwidth ; rwidth = roundup ( width , horizSubSampling )
TYPE	258:1	258:1	5	uint32
TYPE_NAME	258:1	258:1	6	uint32
LEAF_NODE	258:1	258:1	7	uint32
NAME	258:8	258:8	5	rwidth
LEAF_NODE	258:8	258:8	6	rwidth
LEAF_NODE	0:0	0:0	5	;
INIT	258:8	258:8	5	rwidth = roundup ( width , horizSubSampling )
ASSIGN	258:8	258:17	6	rwidth = roundup ( width , horizSubSampling )
LVAL	258:8	258:8	7	rwidth
NAME	258:8	258:8	8	rwidth
LEAF_NODE	258:8	258:8	9	rwidth
ASSIGN_OP	258:15	258:15	7	=
LEAF_NODE	258:15	258:15	8	=
RVAL	258:17	258:17	7	roundup ( width , horizSubSampling )
FUNCTION_CALL	258:17	258:48	8	roundup ( width , horizSubSampling )
CALLEE	258:17	258:17	9	roundup
LEAF_NODE	258:17	258:17	10	roundup
LEAF_NODE	258:24	258:24	9	(
ARGUMENT	258:25	258:25	9	width
FIELD	258:25	258:25	10	width
LEAF_NODE	258:25	258:25	11	width
LEAF_NODE	258:30	258:30	9	,
ARGUMENT	258:32	258:32	9	horizSubSampling
FIELD	258:32	258:32	10	horizSubSampling
LEAF_NODE	258:32	258:32	11	horizSubSampling
LEAF_NODE	258:48	258:48	9	)
LEAF_NODE	258:49	258:49	4	;
SIMPLE_DECL	259:1	259:50	3	uint32 rheight ; rheight = roundup ( height , vertSubSampling ) ;
VAR_DECL	259:1	259:8	4	uint32 rheight ; rheight = roundup ( height , vertSubSampling )
TYPE	259:1	259:1	5	uint32
TYPE_NAME	259:1	259:1	6	uint32
LEAF_NODE	259:1	259:1	7	uint32
NAME	259:8	259:8	5	rheight
LEAF_NODE	259:8	259:8	6	rheight
LEAF_NODE	0:0	0:0	5	;
INIT	259:8	259:8	5	rheight = roundup ( height , vertSubSampling )
ASSIGN	259:8	259:18	6	rheight = roundup ( height , vertSubSampling )
LVAL	259:8	259:8	7	rheight
NAME	259:8	259:8	8	rheight
LEAF_NODE	259:8	259:8	9	rheight
ASSIGN_OP	259:16	259:16	7	=
LEAF_NODE	259:16	259:16	8	=
RVAL	259:18	259:18	7	roundup ( height , vertSubSampling )
FUNCTION_CALL	259:18	259:49	8	roundup ( height , vertSubSampling )
CALLEE	259:18	259:18	9	roundup
LEAF_NODE	259:18	259:18	10	roundup
LEAF_NODE	259:25	259:25	9	(
ARGUMENT	259:26	259:26	9	height
FIELD	259:26	259:26	10	height
LEAF_NODE	259:26	259:26	11	height
LEAF_NODE	259:32	259:32	9	,
ARGUMENT	259:34	259:34	9	vertSubSampling
FIELD	259:34	259:34	10	vertSubSampling
LEAF_NODE	259:34	259:34	11	vertSubSampling
LEAF_NODE	259:49	259:49	9	)
LEAF_NODE	259:50	259:50	4	;
SIMPLE_DECL	260:1	260:65	3	uint32 nrows ; nrows = ( rowsperstrip > rheight ? rheight : rowsperstrip ) ;
VAR_DECL	260:1	260:8	4	uint32 nrows ; nrows = ( rowsperstrip > rheight ? rheight : rowsperstrip )
TYPE	260:1	260:1	5	uint32
TYPE_NAME	260:1	260:1	6	uint32
LEAF_NODE	260:1	260:1	7	uint32
NAME	260:8	260:8	5	nrows
LEAF_NODE	260:8	260:8	6	nrows
LEAF_NODE	0:0	0:0	5	;
INIT	260:8	260:8	5	nrows = ( rowsperstrip > rheight ? rheight : rowsperstrip )
ASSIGN	260:8	260:16	6	nrows = ( rowsperstrip > rheight ? rheight : rowsperstrip )
LVAL	260:8	260:8	7	nrows
NAME	260:8	260:8	8	nrows
LEAF_NODE	260:8	260:8	9	nrows
ASSIGN_OP	260:14	260:14	7	=
LEAF_NODE	260:14	260:14	8	=
RVAL	260:16	260:64	7	( rowsperstrip > rheight ? rheight : rowsperstrip )
LEAF_NODE	260:16	260:16	8	(
COND_EXPR	260:17	260:52	8	rowsperstrip > rheight ? rheight : rowsperstrip
CONDITION	260:17	260:32	9	rowsperstrip > rheight
FIELD	260:17	260:17	10	rowsperstrip
LEAF_NODE	260:17	260:17	11	rowsperstrip
REL_OPERATOR	260:30	260:30	10	>
LEAF_NODE	260:30	260:30	11	>
FIELD	260:32	260:32	10	rheight
LEAF_NODE	260:32	260:32	11	rheight
LEAF_NODE	260:40	260:40	9	?
EXPR	260:42	260:42	9	rheight
FIELD	260:42	260:42	10	rheight
LEAF_NODE	260:42	260:42	11	rheight
LEAF_NODE	260:50	260:50	9	:
FIELD	260:52	260:52	9	rowsperstrip
LEAF_NODE	260:52	260:52	10	rowsperstrip
LEAF_NODE	260:64	260:64	8	)
LEAF_NODE	260:65	260:65	4	;
SIMPLE_DECL	261:8	261:54	3	uint32 rnrows ; rnrows = roundup ( nrows , vertSubSampling ) ;
VAR_DECL	261:8	261:15	4	uint32 rnrows ; rnrows = roundup ( nrows , vertSubSampling )
TYPE	261:8	261:8	5	uint32
TYPE_NAME	261:8	261:8	6	uint32
LEAF_NODE	261:8	261:8	7	uint32
NAME	261:15	261:15	5	rnrows
LEAF_NODE	261:15	261:15	6	rnrows
LEAF_NODE	0:0	0:0	5	;
INIT	261:15	261:15	5	rnrows = roundup ( nrows , vertSubSampling )
ASSIGN	261:15	261:24	6	rnrows = roundup ( nrows , vertSubSampling )
LVAL	261:15	261:15	7	rnrows
NAME	261:15	261:15	8	rnrows
LEAF_NODE	261:15	261:15	9	rnrows
ASSIGN_OP	261:22	261:22	7	=
LEAF_NODE	261:22	261:22	8	=
RVAL	261:24	261:24	7	roundup ( nrows , vertSubSampling )
FUNCTION_CALL	261:24	261:53	8	roundup ( nrows , vertSubSampling )
CALLEE	261:24	261:24	9	roundup
LEAF_NODE	261:24	261:24	10	roundup
LEAF_NODE	261:31	261:31	9	(
ARGUMENT	261:32	261:32	9	nrows
FIELD	261:32	261:32	10	nrows
LEAF_NODE	261:32	261:32	11	nrows
LEAF_NODE	261:37	261:37	9	,
ARGUMENT	261:38	261:38	9	vertSubSampling
FIELD	261:38	261:38	10	vertSubSampling
LEAF_NODE	261:38	261:38	11	vertSubSampling
LEAF_NODE	261:53	261:53	9	)
LEAF_NODE	261:54	261:54	4	;
EXPR_STATEMENT	263:1	264:61	3	cc = rnrows * rwidth + 2 * ( ( rnrows * rwidth ) / ( horizSubSampling * vertSubSampling ) ) ;
EXPR	263:1	263:1	4	cc = rnrows * rwidth + 2 * ( ( rnrows * rwidth ) / ( horizSubSampling * vertSubSampling ) )
ASSIGN	263:1	263:6	5	cc = rnrows * rwidth + 2 * ( ( rnrows * rwidth ) / ( horizSubSampling * vertSubSampling ) )
LVAL	263:1	263:1	6	cc
FIELD	263:1	263:1	7	cc
LEAF_NODE	263:1	263:1	8	cc
ASSIGN_OP	263:4	263:4	6	=
LEAF_NODE	263:4	263:4	7	=
RVAL	263:6	264:60	6	rnrows * rwidth + 2 * ( ( rnrows * rwidth ) / ( horizSubSampling * vertSubSampling ) )
FIELD	263:6	263:6	7	rnrows
LEAF_NODE	263:6	263:6	8	rnrows
LEAF_NODE	263:12	263:12	7	*
FIELD	263:13	263:13	7	rwidth
LEAF_NODE	263:13	263:13	8	rwidth
LEAF_NODE	263:20	263:20	7	+
FIELD	264:5	264:5	7	2
LEAF_NODE	264:5	264:5	8	2
LEAF_NODE	264:6	264:6	7	*
LEAF_NODE	264:7	264:7	7	(
LEAF_NODE	264:8	264:8	7	(
FIELD	264:9	264:9	7	rnrows
LEAF_NODE	264:9	264:9	8	rnrows
LEAF_NODE	264:15	264:15	7	*
FIELD	264:16	264:16	7	rwidth
LEAF_NODE	264:16	264:16	8	rwidth
LEAF_NODE	264:22	264:22	7	)
LEAF_NODE	264:24	264:24	7	/
LEAF_NODE	264:26	264:26	7	(
FIELD	264:27	264:27	7	horizSubSampling
LEAF_NODE	264:27	264:27	8	horizSubSampling
LEAF_NODE	264:43	264:43	7	*
FIELD	264:44	264:44	7	vertSubSampling
LEAF_NODE	264:44	264:44	8	vertSubSampling
LEAF_NODE	264:59	264:59	7	)
LEAF_NODE	264:60	264:60	7	)
LEAF_NODE	264:61	264:61	4	;
EXPR_STATEMENT	265:1	265:38	3	buf = ( unsigned char * ) _TIFFmalloc ( cc ) ;
EXPR	265:1	265:1	4	buf = ( unsigned char * ) _TIFFmalloc ( cc )
ASSIGN	265:1	265:7	5	buf = ( unsigned char * ) _TIFFmalloc ( cc )
LVAL	265:1	265:1	6	buf
FIELD	265:1	265:1	7	buf
LEAF_NODE	265:1	265:1	8	buf
ASSIGN_OP	265:5	265:5	6	=
LEAF_NODE	265:5	265:5	7	=
RVAL	265:7	265:23	6	( unsigned char * ) _TIFFmalloc ( cc )
LEAF_NODE	265:7	265:7	7	(
TYPE_NAME	265:8	265:17	7	unsigned char
LEAF_NODE	265:8	265:8	8	unsigned
LEAF_NODE	265:17	265:17	8	char
LEAF_NODE	265:21	265:21	7	*
LEAF_NODE	265:22	265:22	7	)
FUNCTION_CALL	265:23	265:37	7	_TIFFmalloc ( cc )
CALLEE	265:23	265:23	8	_TIFFmalloc
LEAF_NODE	265:23	265:23	9	_TIFFmalloc
LEAF_NODE	265:34	265:34	8	(
ARGUMENT	265:35	265:35	8	cc
FIELD	265:35	265:35	9	cc
LEAF_NODE	265:35	265:35	10	cc
LEAF_NODE	265:37	265:37	8	)
LEAF_NODE	265:38	265:38	4	;
ITERATION	267:1	267:45	3	
KEYWORD	267:1	267:1	4	for
LEAF_NODE	267:1	267:1	5	for
LEAF_NODE	267:5	267:5	4	(
FOR_INIT	267:6	267:16	4	y = height ;
EXPR	267:6	267:6	5	y = height
ASSIGN	267:6	267:10	6	y = height
LVAL	267:6	267:6	7	y
FIELD	267:6	267:6	8	y
LEAF_NODE	267:6	267:6	9	y
ASSIGN_OP	267:8	267:8	7	=
LEAF_NODE	267:8	267:8	8	=
RVAL	267:10	267:10	7	height
FIELD	267:10	267:10	8	height
LEAF_NODE	267:10	267:10	9	height
LEAF_NODE	267:16	267:16	5	;
CONDITION	267:18	267:18	4	( int32 ) y > 0
EXPR	267:18	267:30	5	( int32 ) y > 0
LEAF_NODE	267:18	267:18	6	(
TYPE_NAME	267:19	267:19	6	int32
LEAF_NODE	267:19	267:19	7	int32
LEAF_NODE	267:24	267:24	6	)
FIELD	267:26	267:26	6	y
LEAF_NODE	267:26	267:26	7	y
REL_OPERATOR	267:28	267:28	6	>
LEAF_NODE	267:28	267:28	7	>
FIELD	267:30	267:30	6	0
LEAF_NODE	267:30	267:30	7	0
LEAF_NODE	267:31	267:31	4	;
FOR_EXPR	267:33	267:33	4	y -= nrows
EXPR	267:33	267:33	5	y -= nrows
ASSIGN	267:33	267:38	6	y -= nrows
LVAL	267:33	267:33	7	y
FIELD	267:33	267:33	8	y
LEAF_NODE	267:33	267:33	9	y
ASSIGN_OP	267:35	267:35	7	-=
LEAF_NODE	267:35	267:35	8	-=
RVAL	267:38	267:38	7	nrows
FIELD	267:38	267:38	8	nrows
LEAF_NODE	267:38	267:38	9	nrows
LEAF_NODE	267:43	267:43	4	)
STATEMENTS	267:45	277:1	4	
LEAF_NODE	267:45	267:45	5	{
STATEMENTS	268:2	273:2	5	
SIMPLE_DECL	268:2	268:37	6	uint32 nr ; nr = ( y > nrows ? nrows : y ) ;
VAR_DECL	268:2	268:9	7	uint32 nr ; nr = ( y > nrows ? nrows : y )
TYPE	268:2	268:2	8	uint32
TYPE_NAME	268:2	268:2	9	uint32
LEAF_NODE	268:2	268:2	10	uint32
NAME	268:9	268:9	8	nr
LEAF_NODE	268:9	268:9	9	nr
LEAF_NODE	0:0	0:0	8	;
INIT	268:9	268:9	8	nr = ( y > nrows ? nrows : y )
ASSIGN	268:9	268:14	9	nr = ( y > nrows ? nrows : y )
LVAL	268:9	268:9	10	nr
NAME	268:9	268:9	11	nr
LEAF_NODE	268:9	268:9	12	nr
ASSIGN_OP	268:12	268:12	10	=
LEAF_NODE	268:12	268:12	11	=
RVAL	268:14	268:36	10	( y > nrows ? nrows : y )
LEAF_NODE	268:14	268:14	11	(
COND_EXPR	268:15	268:35	11	y > nrows ? nrows : y
CONDITION	268:15	268:19	12	y > nrows
FIELD	268:15	268:15	13	y
LEAF_NODE	268:15	268:15	14	y
REL_OPERATOR	268:17	268:17	13	>
LEAF_NODE	268:17	268:17	14	>
FIELD	268:19	268:19	13	nrows
LEAF_NODE	268:19	268:19	14	nrows
LEAF_NODE	268:25	268:25	12	?
EXPR	268:27	268:27	12	nrows
FIELD	268:27	268:27	13	nrows
LEAF_NODE	268:27	268:27	14	nrows
LEAF_NODE	268:33	268:33	12	:
FIELD	268:35	268:35	12	y
LEAF_NODE	268:35	268:35	13	y
LEAF_NODE	268:36	268:36	11	)
LEAF_NODE	268:37	268:37	7	;
EXPR_STATEMENT	269:2	269:48	6	cvtStrip ( buf , raster + ( y - 1 ) * width , nr , width ) ;
EXPR	269:2	269:2	7	cvtStrip ( buf , raster + ( y - 1 ) * width , nr , width )
FUNCTION_CALL	269:2	269:47	8	cvtStrip ( buf , raster + ( y - 1 ) * width , nr , width )
CALLEE	269:2	269:2	9	cvtStrip
LEAF_NODE	269:2	269:2	10	cvtStrip
LEAF_NODE	269:10	269:10	9	(
ARGUMENT	269:11	269:11	9	buf
FIELD	269:11	269:11	10	buf
LEAF_NODE	269:11	269:11	11	buf
LEAF_NODE	269:14	269:14	9	,
ARGUMENT	269:16	269:31	9	raster + ( y - 1 ) * width
FIELD	269:16	269:16	10	raster
LEAF_NODE	269:16	269:16	11	raster
LEAF_NODE	269:23	269:23	10	+
LEAF_NODE	269:25	269:25	10	(
FIELD	269:26	269:26	10	y
LEAF_NODE	269:26	269:26	11	y
LEAF_NODE	269:27	269:27	10	-
FIELD	269:28	269:28	10	1
LEAF_NODE	269:28	269:28	11	1
LEAF_NODE	269:29	269:29	10	)
LEAF_NODE	269:30	269:30	10	*
FIELD	269:31	269:31	10	width
LEAF_NODE	269:31	269:31	11	width
LEAF_NODE	269:36	269:36	9	,
ARGUMENT	269:38	269:38	9	nr
FIELD	269:38	269:38	10	nr
LEAF_NODE	269:38	269:38	11	nr
LEAF_NODE	269:40	269:40	9	,
ARGUMENT	269:42	269:42	9	width
FIELD	269:42	269:42	10	width
LEAF_NODE	269:42	269:42	11	width
LEAF_NODE	269:47	269:47	9	)
LEAF_NODE	269:48	269:48	7	;
EXPR_STATEMENT	270:2	270:35	6	nr = roundup ( nr , vertSubSampling ) ;
EXPR	270:2	270:2	7	nr = roundup ( nr , vertSubSampling )
ASSIGN	270:2	270:7	8	nr = roundup ( nr , vertSubSampling )
LVAL	270:2	270:2	9	nr
FIELD	270:2	270:2	10	nr
LEAF_NODE	270:2	270:2	11	nr
ASSIGN_OP	270:5	270:5	9	=
LEAF_NODE	270:5	270:5	10	=
RVAL	270:7	270:7	9	roundup ( nr , vertSubSampling )
FUNCTION_CALL	270:7	270:34	10	roundup ( nr , vertSubSampling )
CALLEE	270:7	270:7	11	roundup
LEAF_NODE	270:7	270:7	12	roundup
LEAF_NODE	270:14	270:14	11	(
ARGUMENT	270:15	270:15	11	nr
FIELD	270:15	270:15	12	nr
LEAF_NODE	270:15	270:15	13	nr
LEAF_NODE	270:17	270:17	11	,
ARGUMENT	270:19	270:19	11	vertSubSampling
FIELD	270:19	270:19	12	vertSubSampling
LEAF_NODE	270:19	270:19	13	vertSubSampling
LEAF_NODE	270:34	270:34	11	)
LEAF_NODE	270:35	270:35	7	;
EXPR_STATEMENT	271:2	272:53	6	acc = nr * rwidth + 2 * ( ( nr * rwidth ) / ( horizSubSampling * vertSubSampling ) ) ;
EXPR	271:2	271:2	7	acc = nr * rwidth + 2 * ( ( nr * rwidth ) / ( horizSubSampling * vertSubSampling ) )
ASSIGN	271:2	271:8	8	acc = nr * rwidth + 2 * ( ( nr * rwidth ) / ( horizSubSampling * vertSubSampling ) )
LVAL	271:2	271:2	9	acc
FIELD	271:2	271:2	10	acc
LEAF_NODE	271:2	271:2	11	acc
ASSIGN_OP	271:6	271:6	9	=
LEAF_NODE	271:6	271:6	10	=
RVAL	271:8	272:52	9	nr * rwidth + 2 * ( ( nr * rwidth ) / ( horizSubSampling * vertSubSampling ) )
FIELD	271:8	271:8	10	nr
LEAF_NODE	271:8	271:8	11	nr
LEAF_NODE	271:10	271:10	10	*
FIELD	271:11	271:11	10	rwidth
LEAF_NODE	271:11	271:11	11	rwidth
LEAF_NODE	271:18	271:18	10	+
FIELD	272:3	272:3	10	2
LEAF_NODE	272:3	272:3	11	2
LEAF_NODE	272:4	272:4	10	*
LEAF_NODE	272:5	272:5	10	(
LEAF_NODE	272:6	272:6	10	(
FIELD	272:7	272:7	10	nr
LEAF_NODE	272:7	272:7	11	nr
LEAF_NODE	272:9	272:9	10	*
FIELD	272:10	272:10	10	rwidth
LEAF_NODE	272:10	272:10	11	rwidth
LEAF_NODE	272:16	272:16	10	)
LEAF_NODE	272:17	272:17	10	/
LEAF_NODE	272:18	272:18	10	(
FIELD	272:19	272:19	10	horizSubSampling
LEAF_NODE	272:19	272:19	11	horizSubSampling
LEAF_NODE	272:35	272:35	10	*
FIELD	272:36	272:36	10	vertSubSampling
LEAF_NODE	272:36	272:36	11	vertSubSampling
LEAF_NODE	272:51	272:51	10	)
LEAF_NODE	272:52	272:52	10	)
LEAF_NODE	272:53	272:53	7	;
SELECTION	273:2	273:54	6	
KEYWORD	273:2	273:2	7	if
LEAF_NODE	273:2	273:2	8	if
LEAF_NODE	273:5	273:5	7	(
CONDITION	273:6	273:6	7	! TIFFWriteEncodedStrip ( tif , strip ++ , buf , acc )
EXPR	273:6	273:6	8	! TIFFWriteEncodedStrip ( tif , strip ++ , buf , acc )
UNARY_EXPR	273:6	273:7	9	! TIFFWriteEncodedStrip ( tif , strip ++ , buf , acc )
UNARY_OPERATOR	273:6	273:6	10	!
LEAF_NODE	273:6	273:6	11	!
FUNCTION_CALL	273:7	273:51	10	TIFFWriteEncodedStrip ( tif , strip ++ , buf , acc )
CALLEE	273:7	273:7	11	TIFFWriteEncodedStrip
LEAF_NODE	273:7	273:7	12	TIFFWriteEncodedStrip
LEAF_NODE	273:28	273:28	11	(
ARGUMENT	273:29	273:29	11	tif
FIELD	273:29	273:29	12	tif
LEAF_NODE	273:29	273:29	13	tif
LEAF_NODE	273:32	273:32	11	,
ARGUMENT	273:34	273:34	11	strip ++
FIELD	273:34	273:39	12	strip ++
LEAF_NODE	273:34	273:34	13	strip
LEAF_NODE	273:39	273:39	13	++
LEAF_NODE	273:41	273:41	11	,
ARGUMENT	273:43	273:43	11	buf
FIELD	273:43	273:43	12	buf
LEAF_NODE	273:43	273:43	13	buf
LEAF_NODE	273:46	273:46	11	,
ARGUMENT	273:48	273:48	11	acc
FIELD	273:48	273:48	12	acc
LEAF_NODE	273:48	273:48	13	acc
LEAF_NODE	273:51	273:51	11	)
LEAF_NODE	273:52	273:52	7	)
STATEMENTS	273:54	276:2	7	
LEAF_NODE	273:54	273:54	8	{
STATEMENTS	274:3	275:3	8	
EXPR_STATEMENT	274:3	274:17	9	_TIFFfree ( buf ) ;
EXPR	274:3	274:3	10	_TIFFfree ( buf )
FUNCTION_CALL	274:3	274:16	11	_TIFFfree ( buf )
CALLEE	274:3	274:3	12	_TIFFfree
LEAF_NODE	274:3	274:3	13	_TIFFfree
LEAF_NODE	274:12	274:12	12	(
ARGUMENT	274:13	274:13	12	buf
FIELD	274:13	274:13	13	buf
LEAF_NODE	274:13	274:13	14	buf
LEAF_NODE	274:16	274:16	12	)
LEAF_NODE	274:17	274:17	10	;
JUMP_STATEMENT	275:3	275:13	9	return ( 0 ) ;
KEYWORD	275:3	275:3	10	return
LEAF_NODE	275:3	275:3	11	return
DESTINATION	275:10	275:10	10	( 0 )
EXPR	275:10	275:12	11	( 0 )
LEAF_NODE	275:10	275:10	12	(
FIELD	275:11	275:11	12	0
LEAF_NODE	275:11	275:11	13	0
LEAF_NODE	275:12	275:12	12	)
LEAF_NODE	275:13	275:13	10	;
LEAF_NODE	276:2	276:2	8	}
LEAF_NODE	277:1	277:1	5	}
EXPR_STATEMENT	278:1	278:15	3	_TIFFfree ( buf ) ;
EXPR	278:1	278:1	4	_TIFFfree ( buf )
FUNCTION_CALL	278:1	278:14	5	_TIFFfree ( buf )
CALLEE	278:1	278:1	6	_TIFFfree
LEAF_NODE	278:1	278:1	7	_TIFFfree
LEAF_NODE	278:10	278:10	6	(
ARGUMENT	278:11	278:11	6	buf
FIELD	278:11	278:11	7	buf
LEAF_NODE	278:11	278:11	8	buf
LEAF_NODE	278:14	278:14	6	)
LEAF_NODE	278:15	278:15	4	;
JUMP_STATEMENT	279:1	279:11	3	return ( 1 ) ;
KEYWORD	279:1	279:1	4	return
LEAF_NODE	279:1	279:1	5	return
DESTINATION	279:8	279:8	4	( 1 )
EXPR	279:8	279:10	5	( 1 )
LEAF_NODE	279:8	279:8	6	(
FIELD	279:9	279:9	6	1
LEAF_NODE	279:9	279:9	7	1
LEAF_NODE	279:10	279:10	6	)
LEAF_NODE	279:11	279:11	4	;
LEAF_NODE	280:0	280:0	2	}
FUNCTION_DEF	282:0	357:0	1	
RETURN_TYPE	282:0	282:7	2	static int
LEAF_NODE	282:0	282:0	3	static
TYPE_NAME	282:7	282:7	3	int
LEAF_NODE	282:7	282:7	4	int
FUNCTION_NAME	283:0	283:0	2	tiffcvt
LEAF_NODE	283:0	283:0	3	tiffcvt
PARAMETER_LIST	283:7	283:27	2	( TIFF * in , TIFF * out )
LEAF_NODE	283:7	283:7	3	(
PARAMETER_DECL	283:8	283:14	3	TIFF * in
TYPE	283:8	283:12	4	TIFF *
TYPE_NAME	283:8	283:8	5	TIFF
LEAF_NODE	283:8	283:8	6	TIFF
POINTER	283:12	283:12	5	*
LEAF_NODE	283:12	283:12	6	*
NAME	283:14	283:14	4	in
LEAF_NODE	283:14	283:14	5	in
LEAF_NODE	283:16	283:16	3	,
PARAMETER_DECL	283:18	283:24	3	TIFF * out
TYPE	283:18	283:22	4	TIFF *
TYPE_NAME	283:18	283:18	5	TIFF
LEAF_NODE	283:18	283:18	6	TIFF
POINTER	283:22	283:22	5	*
LEAF_NODE	283:22	283:22	6	*
NAME	283:24	283:24	4	out
LEAF_NODE	283:24	283:24	5	out
LEAF_NODE	283:27	283:27	3	)
LEAF_NODE	284:0	284:0	2	{
STATEMENTS	285:1	356:8	2	
SIMPLE_DECL	285:1	285:21	3	uint32 width , uint32 height ;
INIT_DECL_LIST	285:1	285:1	4	uint32 width , uint32 height
VAR_DECL	285:1	285:8	5	uint32 width
TYPE	285:1	285:1	6	uint32
TYPE_NAME	285:1	285:1	7	uint32
LEAF_NODE	285:1	285:1	8	uint32
NAME	285:8	285:8	6	width
LEAF_NODE	285:8	285:8	7	width
LEAF_NODE	285:13	285:13	5	,
VAR_DECL	285:1	285:15	5	uint32 height
TYPE	285:1	285:1	6	uint32
TYPE_NAME	285:1	285:1	7	uint32
LEAF_NODE	285:1	285:1	8	uint32
NAME	285:15	285:15	6	height
LEAF_NODE	285:15	285:15	7	height
LEAF_NODE	285:21	285:21	4	;
SIMPLE_DECL	286:1	286:15	3	uint32 * raster ;
VAR_DECL	286:1	286:9	4	uint32 * raster
TYPE	286:1	286:7	5	uint32 *
TYPE_NAME	286:1	286:1	6	uint32
LEAF_NODE	286:1	286:1	7	uint32
POINTER	286:7	286:7	6	*
LEAF_NODE	286:7	286:7	7	*
NAME	286:9	286:9	5	raster
LEAF_NODE	286:9	286:9	6	raster
LEAF_NODE	286:15	286:15	4	;
SIMPLE_DECL	287:1	287:14	3	uint16 shortv ;
VAR_DECL	287:1	287:8	4	uint16 shortv
TYPE	287:1	287:1	5	uint16
TYPE_NAME	287:1	287:1	6	uint16
LEAF_NODE	287:1	287:1	7	uint16
NAME	287:8	287:8	5	shortv
LEAF_NODE	287:8	287:8	6	shortv
LEAF_NODE	287:14	287:14	4	;
SIMPLE_DECL	288:1	288:13	3	float floatv ;
VAR_DECL	288:1	288:7	4	float floatv
TYPE	288:1	288:1	5	float
TYPE_NAME	288:1	288:1	6	float
LEAF_NODE	288:1	288:1	7	float
NAME	288:7	288:7	5	floatv
LEAF_NODE	288:7	288:7	6	floatv
LEAF_NODE	288:13	288:13	4	;
SIMPLE_DECL	289:1	289:14	3	char * stringv ;
VAR_DECL	289:1	289:7	4	char * stringv
TYPE	289:1	289:6	5	char *
TYPE_NAME	289:1	289:1	6	char
LEAF_NODE	289:1	289:1	7	char
POINTER	289:6	289:6	6	*
LEAF_NODE	289:6	289:6	7	*
NAME	289:7	289:7	5	stringv
LEAF_NODE	289:7	289:7	6	stringv
LEAF_NODE	289:14	289:14	4	;
SIMPLE_DECL	290:1	290:13	3	uint32 longv ;
VAR_DECL	290:1	290:8	4	uint32 longv
TYPE	290:1	290:1	5	uint32
TYPE_NAME	290:1	290:1	6	uint32
LEAF_NODE	290:1	290:1	7	uint32
NAME	290:8	290:8	5	longv
LEAF_NODE	290:8	290:8	6	longv
LEAF_NODE	290:13	290:13	4	;
SIMPLE_DECL	291:1	291:11	3	int result ;
VAR_DECL	291:1	291:5	4	int result
TYPE	291:1	291:1	5	int
TYPE_NAME	291:1	291:1	6	int
LEAF_NODE	291:1	291:1	7	int
NAME	291:5	291:5	5	result
LEAF_NODE	291:5	291:5	6	result
LEAF_NODE	291:11	291:11	4	;
SIMPLE_DECL	292:1	292:19	3	size_t pixel_count ;
VAR_DECL	292:1	292:8	4	size_t pixel_count
TYPE	292:1	292:1	5	size_t
TYPE_NAME	292:1	292:1	6	size_t
LEAF_NODE	292:1	292:1	7	size_t
NAME	292:8	292:8	5	pixel_count
LEAF_NODE	292:8	292:8	6	pixel_count
LEAF_NODE	292:19	292:19	4	;
EXPR_STATEMENT	294:1	294:45	3	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width ) ;
EXPR	294:1	294:1	4	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
FUNCTION_CALL	294:1	294:44	5	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
CALLEE	294:1	294:1	6	TIFFGetField
LEAF_NODE	294:1	294:1	7	TIFFGetField
LEAF_NODE	294:13	294:13	6	(
ARGUMENT	294:14	294:14	6	in
FIELD	294:14	294:14	7	in
LEAF_NODE	294:14	294:14	8	in
LEAF_NODE	294:16	294:16	6	,
ARGUMENT	294:18	294:18	6	TIFFTAG_IMAGEWIDTH
FIELD	294:18	294:18	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	294:18	294:18	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	294:36	294:36	6	,
ARGUMENT	294:38	294:38	6	& width
UNARY_EXPR	294:38	294:39	7	& width
UNARY_OPERATOR	294:38	294:38	8	&
LEAF_NODE	294:38	294:38	9	&
FIELD	294:39	294:39	8	width
LEAF_NODE	294:39	294:39	9	width
LEAF_NODE	294:44	294:44	6	)
LEAF_NODE	294:45	294:45	4	;
EXPR_STATEMENT	295:1	295:47	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height ) ;
EXPR	295:1	295:1	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height )
FUNCTION_CALL	295:1	295:46	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & height )
CALLEE	295:1	295:1	6	TIFFGetField
LEAF_NODE	295:1	295:1	7	TIFFGetField
LEAF_NODE	295:13	295:13	6	(
ARGUMENT	295:14	295:14	6	in
FIELD	295:14	295:14	7	in
LEAF_NODE	295:14	295:14	8	in
LEAF_NODE	295:16	295:16	6	,
ARGUMENT	295:18	295:18	6	TIFFTAG_IMAGELENGTH
FIELD	295:18	295:18	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	295:18	295:18	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	295:37	295:37	6	,
ARGUMENT	295:39	295:39	6	& height
UNARY_EXPR	295:39	295:40	7	& height
UNARY_OPERATOR	295:39	295:39	8	&
LEAF_NODE	295:39	295:39	9	&
FIELD	295:40	295:40	8	height
LEAF_NODE	295:40	295:40	9	height
LEAF_NODE	295:46	295:46	6	)
LEAF_NODE	295:47	295:47	4	;
EXPR_STATEMENT	296:1	296:29	3	pixel_count = width * height ;
EXPR	296:1	296:1	4	pixel_count = width * height
ASSIGN	296:1	296:15	5	pixel_count = width * height
LVAL	296:1	296:1	6	pixel_count
FIELD	296:1	296:1	7	pixel_count
LEAF_NODE	296:1	296:1	8	pixel_count
ASSIGN_OP	296:13	296:13	6	=
LEAF_NODE	296:13	296:13	7	=
RVAL	296:15	296:23	6	width * height
FIELD	296:15	296:15	7	width
LEAF_NODE	296:15	296:15	8	width
LEAF_NODE	296:21	296:21	7	*
FIELD	296:23	296:23	7	height
LEAF_NODE	296:23	296:23	8	height
LEAF_NODE	296:29	296:29	4	;
SELECTION	299:2	299:58	3	
KEYWORD	299:2	299:2	4	if
LEAF_NODE	299:2	299:2	5	if
LEAF_NODE	299:5	299:5	4	(
CONDITION	299:6	299:6	4	! width || ! height || pixel_count / width != height
EXPR	299:6	299:6	5	! width || ! height || pixel_count / width != height
OR	299:6	299:16	6	! width || ! height || pixel_count / width != height
EXPR	299:6	299:6	7	! width
UNARY_EXPR	299:6	299:7	8	! width
UNARY_OPERATOR	299:6	299:6	9	!
LEAF_NODE	299:6	299:6	10	!
FIELD	299:7	299:7	9	width
LEAF_NODE	299:7	299:7	10	width
LEAF_NODE	299:13	299:13	7	||
EXPR	299:16	299:16	7	! height || pixel_count / width != height
OR	299:16	299:27	8	! height || pixel_count / width != height
EXPR	299:16	299:16	9	! height
UNARY_EXPR	299:16	299:17	10	! height
UNARY_OPERATOR	299:16	299:16	11	!
LEAF_NODE	299:16	299:16	12	!
FIELD	299:17	299:17	11	height
LEAF_NODE	299:17	299:17	12	height
LEAF_NODE	299:24	299:24	9	||
EXPR	299:27	299:50	9	pixel_count / width != height
FIELD	299:27	299:27	10	pixel_count
LEAF_NODE	299:27	299:27	11	pixel_count
LEAF_NODE	299:39	299:39	10	/
FIELD	299:41	299:41	10	width
LEAF_NODE	299:41	299:41	11	width
EQ_OPERATOR	299:47	299:47	10	!=
LEAF_NODE	299:47	299:47	11	!=
FIELD	299:50	299:50	10	height
LEAF_NODE	299:50	299:50	11	height
LEAF_NODE	299:56	299:56	4	)
STATEMENTS	299:58	305:2	4	
LEAF_NODE	299:58	299:58	5	{
STATEMENTS	300:3	304:3	5	
LEAF_NODE	300:3	300:3	6	TIFFError
LEAF_NODE	300:12	300:12	6	(
LEAF_NODE	300:13	300:13	6	TIFFFileName
LEAF_NODE	300:25	300:25	6	(
LEAF_NODE	300:26	300:26	6	in
LEAF_NODE	300:28	300:28	6	)
LEAF_NODE	300:29	300:29	6	,
LEAF_NODE	301:6	301:6	6	"Malformed input file; "
LEAF_NODE	302:6	302:6	6	"can't allocate buffer for raster of %lux%lu size"
LEAF_NODE	302:56	302:56	6	,
LEAF_NODE	303:6	303:6	6	(
LEAF_NODE	303:7	303:7	6	unsigned
LEAF_NODE	303:16	303:16	6	long
LEAF_NODE	303:20	303:20	6	)
LEAF_NODE	303:21	303:21	6	width
LEAF_NODE	303:26	303:26	6	,
LEAF_NODE	303:28	303:28	6	(
LEAF_NODE	303:29	303:29	6	unsigned
LEAF_NODE	303:38	303:38	6	long
LEAF_NODE	303:42	303:42	6	)
LEAF_NODE	303:43	303:43	6	height
LEAF_NODE	303:49	303:49	6	)
LEAF_NODE	303:50	303:50	6	;
JUMP_STATEMENT	304:3	304:11	6	return 0 ;
KEYWORD	304:3	304:3	7	return
LEAF_NODE	304:3	304:3	8	return
DESTINATION	304:10	304:10	7	0
EXPR	304:10	304:10	8	0
FIELD	304:10	304:10	9	0
LEAF_NODE	304:10	304:10	10	0
LEAF_NODE	304:11	304:11	7	;
LEAF_NODE	305:2	305:2	5	}
EXPR_STATEMENT	307:2	308:25	3	raster = ( uint32 * ) _TIFFCheckMalloc ( in , pixel_count , sizeof ( uint32 ) , "raster buffer" ) ;
EXPR	307:2	307:2	4	raster = ( uint32 * ) _TIFFCheckMalloc ( in , pixel_count , sizeof ( uint32 ) , "raster buffer" )
ASSIGN	307:2	307:11	5	raster = ( uint32 * ) _TIFFCheckMalloc ( in , pixel_count , sizeof ( uint32 ) , "raster buffer" )
LVAL	307:2	307:2	6	raster
FIELD	307:2	307:2	7	raster
LEAF_NODE	307:2	307:2	8	raster
ASSIGN_OP	307:9	307:9	6	=
LEAF_NODE	307:9	307:9	7	=
RVAL	307:11	307:20	6	( uint32 * ) _TIFFCheckMalloc ( in , pixel_count , sizeof ( uint32 ) , "raster buffer" )
LEAF_NODE	307:11	307:11	7	(
TYPE_NAME	307:12	307:12	7	uint32
LEAF_NODE	307:12	307:12	8	uint32
LEAF_NODE	307:18	307:18	7	*
LEAF_NODE	307:19	307:19	7	)
FUNCTION_CALL	307:20	308:24	7	_TIFFCheckMalloc ( in , pixel_count , sizeof ( uint32 ) , "raster buffer" )
CALLEE	307:20	307:20	8	_TIFFCheckMalloc
LEAF_NODE	307:20	307:20	9	_TIFFCheckMalloc
LEAF_NODE	307:36	307:36	8	(
ARGUMENT	307:37	307:37	8	in
FIELD	307:37	307:37	9	in
LEAF_NODE	307:37	307:37	10	in
LEAF_NODE	307:39	307:39	8	,
ARGUMENT	307:41	307:41	8	pixel_count
FIELD	307:41	307:41	9	pixel_count
LEAF_NODE	307:41	307:41	10	pixel_count
LEAF_NODE	307:52	307:52	8	,
ARGUMENT	307:54	307:54	8	sizeof ( uint32 )
FUNCTION_CALL	307:54	307:67	9	sizeof ( uint32 )
CALLEE	307:54	307:54	10	sizeof
LEAF_NODE	307:54	307:54	11	sizeof
LEAF_NODE	307:60	307:60	10	(
ARGUMENT	307:61	307:61	10	uint32
FIELD	307:61	307:61	11	uint32
LEAF_NODE	307:61	307:61	12	uint32
LEAF_NODE	307:67	307:67	10	)
LEAF_NODE	307:68	307:68	8	,
ARGUMENT	308:9	308:9	8	"raster buffer"
FIELD	308:9	308:9	9	"raster buffer"
LEAF_NODE	308:9	308:9	10	"raster buffer"
LEAF_NODE	308:24	308:24	8	)
LEAF_NODE	308:25	308:25	4	;
SELECTION	309:3	309:20	3	
KEYWORD	309:3	309:3	4	if
LEAF_NODE	309:3	309:3	5	if
LEAF_NODE	309:6	309:6	4	(
CONDITION	309:7	309:7	4	raster == 0
EXPR	309:7	309:17	5	raster == 0
FIELD	309:7	309:7	6	raster
LEAF_NODE	309:7	309:7	7	raster
EQ_OPERATOR	309:14	309:14	6	==
LEAF_NODE	309:14	309:14	7	==
FIELD	309:17	309:17	6	0
LEAF_NODE	309:17	309:17	7	0
LEAF_NODE	309:18	309:18	4	)
STATEMENTS	309:20	315:3	4	
LEAF_NODE	309:20	309:20	5	{
STATEMENTS	310:3	314:4	5	
EXPR_STATEMENT	310:3	313:36	6	TIFFError ( TIFFFileName ( in ) , "Failed to allocate buffer (%lu elements of %lu each)" , ( unsigned long ) pixel_count , ( unsigned long ) sizeof ( uint32 ) ) ;
EXPR	310:3	310:3	7	TIFFError ( TIFFFileName ( in ) , "Failed to allocate buffer (%lu elements of %lu each)" , ( unsigned long ) pixel_count , ( unsigned long ) sizeof ( uint32 ) )
FUNCTION_CALL	310:3	313:35	8	TIFFError ( TIFFFileName ( in ) , "Failed to allocate buffer (%lu elements of %lu each)" , ( unsigned long ) pixel_count , ( unsigned long ) sizeof ( uint32 ) )
CALLEE	310:3	310:3	9	TIFFError
LEAF_NODE	310:3	310:3	10	TIFFError
LEAF_NODE	310:12	310:12	9	(
ARGUMENT	310:13	310:13	9	TIFFFileName ( in )
FUNCTION_CALL	310:13	310:28	10	TIFFFileName ( in )
CALLEE	310:13	310:13	11	TIFFFileName
LEAF_NODE	310:13	310:13	12	TIFFFileName
LEAF_NODE	310:25	310:25	11	(
ARGUMENT	310:26	310:26	11	in
FIELD	310:26	310:26	12	in
LEAF_NODE	310:26	310:26	13	in
LEAF_NODE	310:28	310:28	11	)
LEAF_NODE	310:29	310:29	9	,
ARGUMENT	311:6	311:6	9	"Failed to allocate buffer (%lu elements of %lu each)"
FIELD	311:6	311:6	10	"Failed to allocate buffer (%lu elements of %lu each)"
LEAF_NODE	311:6	311:6	11	"Failed to allocate buffer (%lu elements of %lu each)"
LEAF_NODE	311:60	311:60	9	,
ARGUMENT	312:6	312:21	9	( unsigned long ) pixel_count
LEAF_NODE	312:6	312:6	10	(
TYPE_NAME	312:7	312:16	10	unsigned long
LEAF_NODE	312:7	312:7	11	unsigned
LEAF_NODE	312:16	312:16	11	long
LEAF_NODE	312:20	312:20	10	)
FIELD	312:21	312:21	10	pixel_count
LEAF_NODE	312:21	312:21	11	pixel_count
LEAF_NODE	312:32	312:32	9	,
ARGUMENT	313:6	313:21	9	( unsigned long ) sizeof ( uint32 )
LEAF_NODE	313:6	313:6	10	(
TYPE_NAME	313:7	313:16	10	unsigned long
LEAF_NODE	313:7	313:7	11	unsigned
LEAF_NODE	313:16	313:16	11	long
LEAF_NODE	313:20	313:20	10	)
FUNCTION_CALL	313:21	313:34	10	sizeof ( uint32 )
CALLEE	313:21	313:21	11	sizeof
LEAF_NODE	313:21	313:21	12	sizeof
LEAF_NODE	313:27	313:27	11	(
ARGUMENT	313:28	313:28	11	uint32
FIELD	313:28	313:28	12	uint32
LEAF_NODE	313:28	313:28	13	uint32
LEAF_NODE	313:34	313:34	11	)
LEAF_NODE	313:35	313:35	9	)
LEAF_NODE	313:36	313:36	7	;
JUMP_STATEMENT	314:4	314:14	6	return ( 0 ) ;
KEYWORD	314:4	314:4	7	return
LEAF_NODE	314:4	314:4	8	return
DESTINATION	314:11	314:11	7	( 0 )
EXPR	314:11	314:13	8	( 0 )
LEAF_NODE	314:11	314:11	9	(
FIELD	314:12	314:12	9	0
LEAF_NODE	314:12	314:12	10	0
LEAF_NODE	314:13	314:13	9	)
LEAF_NODE	314:14	314:14	7	;
LEAF_NODE	315:3	315:3	5	}
SELECTION	317:1	317:55	3	
KEYWORD	317:1	317:1	4	if
LEAF_NODE	317:1	317:1	5	if
LEAF_NODE	317:4	317:4	4	(
CONDITION	317:5	317:5	4	! TIFFReadRGBAImage ( in , width , height , raster , 0 )
EXPR	317:5	317:5	5	! TIFFReadRGBAImage ( in , width , height , raster , 0 )
UNARY_EXPR	317:5	317:6	6	! TIFFReadRGBAImage ( in , width , height , raster , 0 )
UNARY_OPERATOR	317:5	317:5	7	!
LEAF_NODE	317:5	317:5	8	!
FUNCTION_CALL	317:6	317:52	7	TIFFReadRGBAImage ( in , width , height , raster , 0 )
CALLEE	317:6	317:6	8	TIFFReadRGBAImage
LEAF_NODE	317:6	317:6	9	TIFFReadRGBAImage
LEAF_NODE	317:23	317:23	8	(
ARGUMENT	317:24	317:24	8	in
FIELD	317:24	317:24	9	in
LEAF_NODE	317:24	317:24	10	in
LEAF_NODE	317:26	317:26	8	,
ARGUMENT	317:28	317:28	8	width
FIELD	317:28	317:28	9	width
LEAF_NODE	317:28	317:28	10	width
LEAF_NODE	317:33	317:33	8	,
ARGUMENT	317:35	317:35	8	height
FIELD	317:35	317:35	9	height
LEAF_NODE	317:35	317:35	10	height
LEAF_NODE	317:41	317:41	8	,
ARGUMENT	317:43	317:43	8	raster
FIELD	317:43	317:43	9	raster
LEAF_NODE	317:43	317:43	10	raster
LEAF_NODE	317:49	317:49	8	,
ARGUMENT	317:51	317:51	8	0
FIELD	317:51	317:51	9	0
LEAF_NODE	317:51	317:51	10	0
LEAF_NODE	317:52	317:52	8	)
LEAF_NODE	317:53	317:53	4	)
STATEMENTS	317:55	320:1	4	
LEAF_NODE	317:55	317:55	5	{
STATEMENTS	318:2	319:2	5	
EXPR_STATEMENT	318:2	318:19	6	_TIFFfree ( raster ) ;
EXPR	318:2	318:2	7	_TIFFfree ( raster )
FUNCTION_CALL	318:2	318:18	8	_TIFFfree ( raster )
CALLEE	318:2	318:2	9	_TIFFfree
LEAF_NODE	318:2	318:2	10	_TIFFfree
LEAF_NODE	318:11	318:11	9	(
ARGUMENT	318:12	318:12	9	raster
FIELD	318:12	318:12	10	raster
LEAF_NODE	318:12	318:12	11	raster
LEAF_NODE	318:18	318:18	9	)
LEAF_NODE	318:19	318:19	7	;
JUMP_STATEMENT	319:2	319:12	6	return ( 0 ) ;
KEYWORD	319:2	319:2	7	return
LEAF_NODE	319:2	319:2	8	return
DESTINATION	319:9	319:9	7	( 0 )
EXPR	319:9	319:11	8	( 0 )
LEAF_NODE	319:9	319:9	9	(
FIELD	319:10	319:10	9	0
LEAF_NODE	319:10	319:10	10	0
LEAF_NODE	319:11	319:11	9	)
LEAF_NODE	319:12	319:12	7	;
LEAF_NODE	320:1	320:1	5	}
EXPR_STATEMENT	322:1	322:38	3	CopyField ( TIFFTAG_SUBFILETYPE , longv ) ;
EXPR	322:1	322:1	4	CopyField ( TIFFTAG_SUBFILETYPE , longv )
FUNCTION_CALL	322:1	322:37	5	CopyField ( TIFFTAG_SUBFILETYPE , longv )
CALLEE	322:1	322:1	6	CopyField
LEAF_NODE	322:1	322:1	7	CopyField
LEAF_NODE	322:10	322:10	6	(
ARGUMENT	322:11	322:11	6	TIFFTAG_SUBFILETYPE
FIELD	322:11	322:11	7	TIFFTAG_SUBFILETYPE
LEAF_NODE	322:11	322:11	8	TIFFTAG_SUBFILETYPE
LEAF_NODE	322:30	322:30	6	,
ARGUMENT	322:32	322:32	6	longv
FIELD	322:32	322:32	7	longv
LEAF_NODE	322:32	322:32	8	longv
LEAF_NODE	322:37	322:37	6	)
LEAF_NODE	322:38	322:38	4	;
EXPR_STATEMENT	323:1	323:45	3	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width ) ;
EXPR	323:1	323:1	4	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width )
FUNCTION_CALL	323:1	323:44	5	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width )
CALLEE	323:1	323:1	6	TIFFSetField
LEAF_NODE	323:1	323:1	7	TIFFSetField
LEAF_NODE	323:13	323:13	6	(
ARGUMENT	323:14	323:14	6	out
FIELD	323:14	323:14	7	out
LEAF_NODE	323:14	323:14	8	out
LEAF_NODE	323:17	323:17	6	,
ARGUMENT	323:19	323:19	6	TIFFTAG_IMAGEWIDTH
FIELD	323:19	323:19	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	323:19	323:19	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	323:37	323:37	6	,
ARGUMENT	323:39	323:39	6	width
FIELD	323:39	323:39	7	width
LEAF_NODE	323:39	323:39	8	width
LEAF_NODE	323:44	323:44	6	)
LEAF_NODE	323:45	323:45	4	;
EXPR_STATEMENT	324:1	324:47	3	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , height ) ;
EXPR	324:1	324:1	4	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , height )
FUNCTION_CALL	324:1	324:46	5	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , height )
CALLEE	324:1	324:1	6	TIFFSetField
LEAF_NODE	324:1	324:1	7	TIFFSetField
LEAF_NODE	324:13	324:13	6	(
ARGUMENT	324:14	324:14	6	out
FIELD	324:14	324:14	7	out
LEAF_NODE	324:14	324:14	8	out
LEAF_NODE	324:17	324:17	6	,
ARGUMENT	324:19	324:19	6	TIFFTAG_IMAGELENGTH
FIELD	324:19	324:19	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	324:19	324:19	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	324:38	324:38	6	,
ARGUMENT	324:40	324:40	6	height
FIELD	324:40	324:40	7	height
LEAF_NODE	324:40	324:40	8	height
LEAF_NODE	324:46	324:46	6	)
LEAF_NODE	324:47	324:47	4	;
EXPR_STATEMENT	325:1	325:44	3	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 8 ) ;
EXPR	325:1	325:1	4	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 8 )
FUNCTION_CALL	325:1	325:43	5	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 8 )
CALLEE	325:1	325:1	6	TIFFSetField
LEAF_NODE	325:1	325:1	7	TIFFSetField
LEAF_NODE	325:13	325:13	6	(
ARGUMENT	325:14	325:14	6	out
FIELD	325:14	325:14	7	out
LEAF_NODE	325:14	325:14	8	out
LEAF_NODE	325:17	325:17	6	,
ARGUMENT	325:19	325:19	6	TIFFTAG_BITSPERSAMPLE
FIELD	325:19	325:19	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	325:19	325:19	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	325:40	325:40	6	,
ARGUMENT	325:42	325:42	6	8
FIELD	325:42	325:42	7	8
LEAF_NODE	325:42	325:42	8	8
LEAF_NODE	325:43	325:43	6	)
LEAF_NODE	325:44	325:44	4	;
EXPR_STATEMENT	326:1	326:52	3	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	326:1	326:1	4	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	326:1	326:51	5	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	326:1	326:1	6	TIFFSetField
LEAF_NODE	326:1	326:1	7	TIFFSetField
LEAF_NODE	326:13	326:13	6	(
ARGUMENT	326:14	326:14	6	out
FIELD	326:14	326:14	7	out
LEAF_NODE	326:14	326:14	8	out
LEAF_NODE	326:17	326:17	6	,
ARGUMENT	326:19	326:19	6	TIFFTAG_COMPRESSION
FIELD	326:19	326:19	7	TIFFTAG_COMPRESSION
LEAF_NODE	326:19	326:19	8	TIFFTAG_COMPRESSION
LEAF_NODE	326:38	326:38	6	,
ARGUMENT	326:40	326:40	6	compression
FIELD	326:40	326:40	7	compression
LEAF_NODE	326:40	326:40	8	compression
LEAF_NODE	326:51	326:51	6	)
LEAF_NODE	326:52	326:52	4	;
EXPR_STATEMENT	327:1	327:58	3	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR ) ;
EXPR	327:1	327:1	4	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
FUNCTION_CALL	327:1	327:57	5	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
CALLEE	327:1	327:1	6	TIFFSetField
LEAF_NODE	327:1	327:1	7	TIFFSetField
LEAF_NODE	327:13	327:13	6	(
ARGUMENT	327:14	327:14	6	out
FIELD	327:14	327:14	7	out
LEAF_NODE	327:14	327:14	8	out
LEAF_NODE	327:17	327:17	6	,
ARGUMENT	327:19	327:19	6	TIFFTAG_PHOTOMETRIC
FIELD	327:19	327:19	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	327:19	327:19	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	327:38	327:38	6	,
ARGUMENT	327:40	327:40	6	PHOTOMETRIC_YCBCR
FIELD	327:40	327:40	7	PHOTOMETRIC_YCBCR
LEAF_NODE	327:40	327:40	8	PHOTOMETRIC_YCBCR
LEAF_NODE	327:57	327:57	6	)
LEAF_NODE	327:58	327:58	4	;
SELECTION	328:1	329:2	3	
KEYWORD	328:1	328:1	4	if
LEAF_NODE	328:1	328:1	5	if
LEAF_NODE	328:4	328:4	4	(
CONDITION	328:5	328:5	4	compression == COMPRESSION_JPEG
EXPR	328:5	328:20	5	compression == COMPRESSION_JPEG
FIELD	328:5	328:5	6	compression
LEAF_NODE	328:5	328:5	7	compression
EQ_OPERATOR	328:17	328:17	6	==
LEAF_NODE	328:17	328:17	7	==
FIELD	328:20	328:20	6	COMPRESSION_JPEG
LEAF_NODE	328:20	328:20	7	COMPRESSION_JPEG
LEAF_NODE	328:36	328:36	4	)
STATEMENTS	329:2	329:2	4	
EXPR_STATEMENT	329:2	329:61	5	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RAW ) ;
EXPR	329:2	329:2	6	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RAW )
FUNCTION_CALL	329:2	329:60	7	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RAW )
CALLEE	329:2	329:2	8	TIFFSetField
LEAF_NODE	329:2	329:2	9	TIFFSetField
LEAF_NODE	329:14	329:14	8	(
ARGUMENT	329:15	329:15	8	out
FIELD	329:15	329:15	9	out
LEAF_NODE	329:15	329:15	10	out
LEAF_NODE	329:18	329:18	8	,
ARGUMENT	329:20	329:20	8	TIFFTAG_JPEGCOLORMODE
FIELD	329:20	329:20	9	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	329:20	329:20	10	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	329:41	329:41	8	,
ARGUMENT	329:43	329:43	8	JPEGCOLORMODE_RAW
FIELD	329:43	329:43	9	JPEGCOLORMODE_RAW
LEAF_NODE	329:43	329:43	10	JPEGCOLORMODE_RAW
LEAF_NODE	329:60	329:60	8	)
LEAF_NODE	329:61	329:61	6	;
EXPR_STATEMENT	330:1	330:37	3	CopyField ( TIFFTAG_FILLORDER , shortv ) ;
EXPR	330:1	330:1	4	CopyField ( TIFFTAG_FILLORDER , shortv )
FUNCTION_CALL	330:1	330:36	5	CopyField ( TIFFTAG_FILLORDER , shortv )
CALLEE	330:1	330:1	6	CopyField
LEAF_NODE	330:1	330:1	7	CopyField
LEAF_NODE	330:10	330:10	6	(
ARGUMENT	330:11	330:11	6	TIFFTAG_FILLORDER
FIELD	330:11	330:11	7	TIFFTAG_FILLORDER
LEAF_NODE	330:11	330:11	8	TIFFTAG_FILLORDER
LEAF_NODE	330:28	330:28	6	,
ARGUMENT	330:30	330:30	6	shortv
FIELD	330:30	330:30	7	shortv
LEAF_NODE	330:30	330:30	8	shortv
LEAF_NODE	330:36	330:36	6	)
LEAF_NODE	330:37	330:37	4	;
EXPR_STATEMENT	331:1	331:60	3	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT ) ;
EXPR	331:1	331:1	4	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
FUNCTION_CALL	331:1	331:59	5	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
CALLEE	331:1	331:1	6	TIFFSetField
LEAF_NODE	331:1	331:1	7	TIFFSetField
LEAF_NODE	331:13	331:13	6	(
ARGUMENT	331:14	331:14	6	out
FIELD	331:14	331:14	7	out
LEAF_NODE	331:14	331:14	8	out
LEAF_NODE	331:17	331:17	6	,
ARGUMENT	331:19	331:19	6	TIFFTAG_ORIENTATION
FIELD	331:19	331:19	7	TIFFTAG_ORIENTATION
LEAF_NODE	331:19	331:19	8	TIFFTAG_ORIENTATION
LEAF_NODE	331:38	331:38	6	,
ARGUMENT	331:40	331:40	6	ORIENTATION_TOPLEFT
FIELD	331:40	331:40	7	ORIENTATION_TOPLEFT
LEAF_NODE	331:40	331:40	8	ORIENTATION_TOPLEFT
LEAF_NODE	331:59	331:59	6	)
LEAF_NODE	331:60	331:60	4	;
EXPR_STATEMENT	332:1	332:46	3	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 3 ) ;
EXPR	332:1	332:1	4	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 3 )
FUNCTION_CALL	332:1	332:45	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 3 )
CALLEE	332:1	332:1	6	TIFFSetField
LEAF_NODE	332:1	332:1	7	TIFFSetField
LEAF_NODE	332:13	332:13	6	(
ARGUMENT	332:14	332:14	6	out
FIELD	332:14	332:14	7	out
LEAF_NODE	332:14	332:14	8	out
LEAF_NODE	332:17	332:17	6	,
ARGUMENT	332:19	332:19	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	332:19	332:19	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	332:19	332:19	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	332:42	332:42	6	,
ARGUMENT	332:44	332:44	6	3
FIELD	332:44	332:44	7	3
LEAF_NODE	332:44	332:44	8	3
LEAF_NODE	332:45	332:45	6	)
LEAF_NODE	332:46	332:46	4	;
EXPR_STATEMENT	333:1	333:39	3	CopyField ( TIFFTAG_XRESOLUTION , floatv ) ;
EXPR	333:1	333:1	4	CopyField ( TIFFTAG_XRESOLUTION , floatv )
FUNCTION_CALL	333:1	333:38	5	CopyField ( TIFFTAG_XRESOLUTION , floatv )
CALLEE	333:1	333:1	6	CopyField
LEAF_NODE	333:1	333:1	7	CopyField
LEAF_NODE	333:10	333:10	6	(
ARGUMENT	333:11	333:11	6	TIFFTAG_XRESOLUTION
FIELD	333:11	333:11	7	TIFFTAG_XRESOLUTION
LEAF_NODE	333:11	333:11	8	TIFFTAG_XRESOLUTION
LEAF_NODE	333:30	333:30	6	,
ARGUMENT	333:32	333:32	6	floatv
FIELD	333:32	333:32	7	floatv
LEAF_NODE	333:32	333:32	8	floatv
LEAF_NODE	333:38	333:38	6	)
LEAF_NODE	333:39	333:39	4	;
EXPR_STATEMENT	334:1	334:39	3	CopyField ( TIFFTAG_YRESOLUTION , floatv ) ;
EXPR	334:1	334:1	4	CopyField ( TIFFTAG_YRESOLUTION , floatv )
FUNCTION_CALL	334:1	334:38	5	CopyField ( TIFFTAG_YRESOLUTION , floatv )
CALLEE	334:1	334:1	6	CopyField
LEAF_NODE	334:1	334:1	7	CopyField
LEAF_NODE	334:10	334:10	6	(
ARGUMENT	334:11	334:11	6	TIFFTAG_YRESOLUTION
FIELD	334:11	334:11	7	TIFFTAG_YRESOLUTION
LEAF_NODE	334:11	334:11	8	TIFFTAG_YRESOLUTION
LEAF_NODE	334:30	334:30	6	,
ARGUMENT	334:32	334:32	6	floatv
FIELD	334:32	334:32	7	floatv
LEAF_NODE	334:32	334:32	8	floatv
LEAF_NODE	334:38	334:38	6	)
LEAF_NODE	334:39	334:39	4	;
EXPR_STATEMENT	335:1	335:42	3	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv ) ;
EXPR	335:1	335:1	4	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv )
FUNCTION_CALL	335:1	335:41	5	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv )
CALLEE	335:1	335:1	6	CopyField
LEAF_NODE	335:1	335:1	7	CopyField
LEAF_NODE	335:10	335:10	6	(
ARGUMENT	335:11	335:11	6	TIFFTAG_RESOLUTIONUNIT
FIELD	335:11	335:11	7	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	335:11	335:11	8	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	335:33	335:33	6	,
ARGUMENT	335:35	335:35	6	shortv
FIELD	335:35	335:35	7	shortv
LEAF_NODE	335:35	335:35	8	shortv
LEAF_NODE	335:41	335:41	6	)
LEAF_NODE	335:42	335:42	4	;
EXPR_STATEMENT	336:1	336:61	3	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	336:1	336:1	4	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	336:1	336:60	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	336:1	336:1	6	TIFFSetField
LEAF_NODE	336:1	336:1	7	TIFFSetField
LEAF_NODE	336:13	336:13	6	(
ARGUMENT	336:14	336:14	6	out
FIELD	336:14	336:14	7	out
LEAF_NODE	336:14	336:14	8	out
LEAF_NODE	336:17	336:17	6	,
ARGUMENT	336:19	336:19	6	TIFFTAG_PLANARCONFIG
FIELD	336:19	336:19	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	336:19	336:19	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	336:39	336:39	6	,
ARGUMENT	336:41	336:41	6	PLANARCONFIG_CONTIG
FIELD	336:41	336:41	7	PLANARCONFIG_CONTIG
LEAF_NODE	336:41	336:41	8	PLANARCONFIG_CONTIG
LEAF_NODE	336:60	336:60	6	)
LEAF_NODE	336:61	336:61	4	;
LEAF_NODE	337:1	337:1	3	{
STATEMENTS	337:3	341:3	3	
SIMPLE_DECL	337:3	337:17	4	char [ 2048 ] buf ;
VAR_DECL	337:3	337:8	5	char [ 2048 ] buf
TYPE	337:3	337:11	6	char [ 2048 ]
TYPE_NAME	337:3	337:3	7	char
LEAF_NODE	337:3	337:3	8	char
TYPE_SUFFIX	337:11	337:16	7	[ 2048 ]
LEAF_NODE	337:11	337:11	8	[
FIELD	337:12	337:12	8	2048
LEAF_NODE	337:12	337:12	9	2048
LEAF_NODE	337:16	337:16	8	]
NAME	337:8	337:8	6	buf
LEAF_NODE	337:8	337:8	7	buf
LEAF_NODE	337:17	337:17	5	;
SIMPLE_DECL	338:3	338:44	4	char * cp ; cp = strrchr ( TIFFFileName ( in ) , '/' ) ;
VAR_DECL	338:3	338:9	5	char * cp ; cp = strrchr ( TIFFFileName ( in ) , '/' )
TYPE	338:3	338:8	6	char *
TYPE_NAME	338:3	338:3	7	char
LEAF_NODE	338:3	338:3	8	char
POINTER	338:8	338:8	7	*
LEAF_NODE	338:8	338:8	8	*
NAME	338:9	338:9	6	cp
LEAF_NODE	338:9	338:9	7	cp
LEAF_NODE	0:0	0:0	6	;
INIT	338:9	338:9	6	cp = strrchr ( TIFFFileName ( in ) , '/' )
ASSIGN	338:9	338:14	7	cp = strrchr ( TIFFFileName ( in ) , '/' )
LVAL	338:9	338:9	8	cp
NAME	338:9	338:9	9	cp
LEAF_NODE	338:9	338:9	10	cp
ASSIGN_OP	338:12	338:12	8	=
LEAF_NODE	338:12	338:12	9	=
RVAL	338:14	338:14	8	strrchr ( TIFFFileName ( in ) , '/' )
FUNCTION_CALL	338:14	338:43	9	strrchr ( TIFFFileName ( in ) , '/' )
CALLEE	338:14	338:14	10	strrchr
LEAF_NODE	338:14	338:14	11	strrchr
LEAF_NODE	338:21	338:21	10	(
ARGUMENT	338:22	338:22	10	TIFFFileName ( in )
FUNCTION_CALL	338:22	338:37	11	TIFFFileName ( in )
CALLEE	338:22	338:22	12	TIFFFileName
LEAF_NODE	338:22	338:22	13	TIFFFileName
LEAF_NODE	338:34	338:34	12	(
ARGUMENT	338:35	338:35	12	in
FIELD	338:35	338:35	13	in
LEAF_NODE	338:35	338:35	14	in
LEAF_NODE	338:37	338:37	12	)
LEAF_NODE	338:38	338:38	10	,
ARGUMENT	338:40	338:40	10	'/'
FIELD	338:40	338:40	11	'/'
LEAF_NODE	338:40	338:40	12	'/'
LEAF_NODE	338:43	338:43	10	)
LEAF_NODE	338:44	338:44	5	;
EXPR_STATEMENT	339:3	340:34	4	snprintf ( buf , sizeof ( buf ) , "YCbCr conversion of %s" , cp ? cp + 1 : TIFFFileName ( in ) ) ;
EXPR	339:3	339:3	5	snprintf ( buf , sizeof ( buf ) , "YCbCr conversion of %s" , cp ? cp + 1 : TIFFFileName ( in ) )
FUNCTION_CALL	339:3	340:33	6	snprintf ( buf , sizeof ( buf ) , "YCbCr conversion of %s" , cp ? cp + 1 : TIFFFileName ( in ) )
CALLEE	339:3	339:3	7	snprintf
LEAF_NODE	339:3	339:3	8	snprintf
LEAF_NODE	339:11	339:11	7	(
ARGUMENT	339:12	339:12	7	buf
FIELD	339:12	339:12	8	buf
LEAF_NODE	339:12	339:12	9	buf
LEAF_NODE	339:15	339:15	7	,
ARGUMENT	339:17	339:17	7	sizeof ( buf )
FUNCTION_CALL	339:17	339:27	8	sizeof ( buf )
CALLEE	339:17	339:17	9	sizeof
LEAF_NODE	339:17	339:17	10	sizeof
LEAF_NODE	339:23	339:23	9	(
ARGUMENT	339:24	339:24	9	buf
FIELD	339:24	339:24	10	buf
LEAF_NODE	339:24	339:24	11	buf
LEAF_NODE	339:27	339:27	9	)
LEAF_NODE	339:28	339:28	7	,
ARGUMENT	339:30	339:30	7	"YCbCr conversion of %s"
FIELD	339:30	339:30	8	"YCbCr conversion of %s"
LEAF_NODE	339:30	339:30	9	"YCbCr conversion of %s"
LEAF_NODE	339:54	339:54	7	,
ARGUMENT	340:5	340:5	7	cp ? cp + 1 : TIFFFileName ( in )
COND_EXPR	340:5	340:17	8	cp ? cp + 1 : TIFFFileName ( in )
CONDITION	340:5	340:5	9	cp
FIELD	340:5	340:5	10	cp
LEAF_NODE	340:5	340:5	11	cp
LEAF_NODE	340:8	340:8	9	?
EXPR	340:10	340:13	9	cp + 1
FIELD	340:10	340:10	10	cp
LEAF_NODE	340:10	340:10	11	cp
LEAF_NODE	340:12	340:12	10	+
FIELD	340:13	340:13	10	1
LEAF_NODE	340:13	340:13	11	1
LEAF_NODE	340:15	340:15	9	:
FUNCTION_CALL	340:17	340:32	9	TIFFFileName ( in )
CALLEE	340:17	340:17	10	TIFFFileName
LEAF_NODE	340:17	340:17	11	TIFFFileName
LEAF_NODE	340:29	340:29	10	(
ARGUMENT	340:30	340:30	10	in
FIELD	340:30	340:30	11	in
LEAF_NODE	340:30	340:30	12	in
LEAF_NODE	340:32	340:32	10	)
LEAF_NODE	340:33	340:33	7	)
LEAF_NODE	340:34	340:34	5	;
EXPR_STATEMENT	341:3	341:51	4	TIFFSetField ( out , TIFFTAG_IMAGEDESCRIPTION , buf ) ;
EXPR	341:3	341:3	5	TIFFSetField ( out , TIFFTAG_IMAGEDESCRIPTION , buf )
FUNCTION_CALL	341:3	341:50	6	TIFFSetField ( out , TIFFTAG_IMAGEDESCRIPTION , buf )
CALLEE	341:3	341:3	7	TIFFSetField
LEAF_NODE	341:3	341:3	8	TIFFSetField
LEAF_NODE	341:15	341:15	7	(
ARGUMENT	341:16	341:16	7	out
FIELD	341:16	341:16	8	out
LEAF_NODE	341:16	341:16	9	out
LEAF_NODE	341:19	341:19	7	,
ARGUMENT	341:21	341:21	7	TIFFTAG_IMAGEDESCRIPTION
FIELD	341:21	341:21	8	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	341:21	341:21	9	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	341:45	341:45	7	,
ARGUMENT	341:47	341:47	7	buf
FIELD	341:47	341:47	8	buf
LEAF_NODE	341:47	341:47	9	buf
LEAF_NODE	341:50	341:50	7	)
LEAF_NODE	341:51	341:51	5	;
LEAF_NODE	342:1	342:1	3	}
EXPR_STATEMENT	343:1	343:54	3	TIFFSetField ( out , TIFFTAG_SOFTWARE , TIFFGetVersion ( ) ) ;
EXPR	343:1	343:1	4	TIFFSetField ( out , TIFFTAG_SOFTWARE , TIFFGetVersion ( ) )
FUNCTION_CALL	343:1	343:53	5	TIFFSetField ( out , TIFFTAG_SOFTWARE , TIFFGetVersion ( ) )
CALLEE	343:1	343:1	6	TIFFSetField
LEAF_NODE	343:1	343:1	7	TIFFSetField
LEAF_NODE	343:13	343:13	6	(
ARGUMENT	343:14	343:14	6	out
FIELD	343:14	343:14	7	out
LEAF_NODE	343:14	343:14	8	out
LEAF_NODE	343:17	343:17	6	,
ARGUMENT	343:19	343:19	6	TIFFTAG_SOFTWARE
FIELD	343:19	343:19	7	TIFFTAG_SOFTWARE
LEAF_NODE	343:19	343:19	8	TIFFTAG_SOFTWARE
LEAF_NODE	343:35	343:35	6	,
ARGUMENT	343:37	343:37	6	TIFFGetVersion ( )
FUNCTION_CALL	343:37	343:52	7	TIFFGetVersion ( )
CALLEE	343:37	343:37	8	TIFFGetVersion
LEAF_NODE	343:37	343:37	9	TIFFGetVersion
LEAF_NODE	343:51	343:51	8	(
LEAF_NODE	343:52	343:52	8	)
LEAF_NODE	343:53	343:53	6	)
LEAF_NODE	343:54	343:54	4	;
EXPR_STATEMENT	344:1	344:41	3	CopyField ( TIFFTAG_DOCUMENTNAME , stringv ) ;
EXPR	344:1	344:1	4	CopyField ( TIFFTAG_DOCUMENTNAME , stringv )
FUNCTION_CALL	344:1	344:40	5	CopyField ( TIFFTAG_DOCUMENTNAME , stringv )
CALLEE	344:1	344:1	6	CopyField
LEAF_NODE	344:1	344:1	7	CopyField
LEAF_NODE	344:10	344:10	6	(
ARGUMENT	344:11	344:11	6	TIFFTAG_DOCUMENTNAME
FIELD	344:11	344:11	7	TIFFTAG_DOCUMENTNAME
LEAF_NODE	344:11	344:11	8	TIFFTAG_DOCUMENTNAME
LEAF_NODE	344:31	344:31	6	,
ARGUMENT	344:33	344:33	6	stringv
FIELD	344:33	344:33	7	stringv
LEAF_NODE	344:33	344:33	8	stringv
LEAF_NODE	344:40	344:40	6	)
LEAF_NODE	344:41	344:41	4	;
EXPR_STATEMENT	346:1	346:62	3	TIFFSetField ( out , TIFFTAG_REFERENCEBLACKWHITE , refBlackWhite ) ;
EXPR	346:1	346:1	4	TIFFSetField ( out , TIFFTAG_REFERENCEBLACKWHITE , refBlackWhite )
FUNCTION_CALL	346:1	346:61	5	TIFFSetField ( out , TIFFTAG_REFERENCEBLACKWHITE , refBlackWhite )
CALLEE	346:1	346:1	6	TIFFSetField
LEAF_NODE	346:1	346:1	7	TIFFSetField
LEAF_NODE	346:13	346:13	6	(
ARGUMENT	346:14	346:14	6	out
FIELD	346:14	346:14	7	out
LEAF_NODE	346:14	346:14	8	out
LEAF_NODE	346:17	346:17	6	,
ARGUMENT	346:19	346:19	6	TIFFTAG_REFERENCEBLACKWHITE
FIELD	346:19	346:19	7	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	346:19	346:19	8	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	346:46	346:46	6	,
ARGUMENT	346:48	346:48	6	refBlackWhite
FIELD	346:48	346:48	7	refBlackWhite
LEAF_NODE	346:48	346:48	8	refBlackWhite
LEAF_NODE	346:61	346:61	6	)
LEAF_NODE	346:62	346:62	4	;
EXPR_STATEMENT	347:1	348:39	3	TIFFSetField ( out , TIFFTAG_YCBCRSUBSAMPLING , horizSubSampling , vertSubSampling ) ;
EXPR	347:1	347:1	4	TIFFSetField ( out , TIFFTAG_YCBCRSUBSAMPLING , horizSubSampling , vertSubSampling )
FUNCTION_CALL	347:1	348:38	5	TIFFSetField ( out , TIFFTAG_YCBCRSUBSAMPLING , horizSubSampling , vertSubSampling )
CALLEE	347:1	347:1	6	TIFFSetField
LEAF_NODE	347:1	347:1	7	TIFFSetField
LEAF_NODE	347:13	347:13	6	(
ARGUMENT	347:14	347:14	6	out
FIELD	347:14	347:14	7	out
LEAF_NODE	347:14	347:14	8	out
LEAF_NODE	347:17	347:17	6	,
ARGUMENT	347:19	347:19	6	TIFFTAG_YCBCRSUBSAMPLING
FIELD	347:19	347:19	7	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	347:19	347:19	8	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	347:43	347:43	6	,
ARGUMENT	348:5	348:5	6	horizSubSampling
FIELD	348:5	348:5	7	horizSubSampling
LEAF_NODE	348:5	348:5	8	horizSubSampling
LEAF_NODE	348:21	348:21	6	,
ARGUMENT	348:23	348:23	6	vertSubSampling
FIELD	348:23	348:23	7	vertSubSampling
LEAF_NODE	348:23	348:23	8	vertSubSampling
LEAF_NODE	348:38	348:38	6	)
LEAF_NODE	348:39	348:39	4	;
EXPR_STATEMENT	349:1	349:68	3	TIFFSetField ( out , TIFFTAG_YCBCRPOSITIONING , YCBCRPOSITION_CENTERED ) ;
EXPR	349:1	349:1	4	TIFFSetField ( out , TIFFTAG_YCBCRPOSITIONING , YCBCRPOSITION_CENTERED )
FUNCTION_CALL	349:1	349:67	5	TIFFSetField ( out , TIFFTAG_YCBCRPOSITIONING , YCBCRPOSITION_CENTERED )
CALLEE	349:1	349:1	6	TIFFSetField
LEAF_NODE	349:1	349:1	7	TIFFSetField
LEAF_NODE	349:13	349:13	6	(
ARGUMENT	349:14	349:14	6	out
FIELD	349:14	349:14	7	out
LEAF_NODE	349:14	349:14	8	out
LEAF_NODE	349:17	349:17	6	,
ARGUMENT	349:19	349:19	6	TIFFTAG_YCBCRPOSITIONING
FIELD	349:19	349:19	7	TIFFTAG_YCBCRPOSITIONING
LEAF_NODE	349:19	349:19	8	TIFFTAG_YCBCRPOSITIONING
LEAF_NODE	349:43	349:43	6	,
ARGUMENT	349:45	349:45	6	YCBCRPOSITION_CENTERED
FIELD	349:45	349:45	7	YCBCRPOSITION_CENTERED
LEAF_NODE	349:45	349:45	8	YCBCRPOSITION_CENTERED
LEAF_NODE	349:67	349:67	6	)
LEAF_NODE	349:68	349:68	4	;
EXPR_STATEMENT	350:1	350:58	3	TIFFSetField ( out , TIFFTAG_YCBCRCOEFFICIENTS , ycbcrCoeffs ) ;
EXPR	350:1	350:1	4	TIFFSetField ( out , TIFFTAG_YCBCRCOEFFICIENTS , ycbcrCoeffs )
FUNCTION_CALL	350:1	350:57	5	TIFFSetField ( out , TIFFTAG_YCBCRCOEFFICIENTS , ycbcrCoeffs )
CALLEE	350:1	350:1	6	TIFFSetField
LEAF_NODE	350:1	350:1	7	TIFFSetField
LEAF_NODE	350:13	350:13	6	(
ARGUMENT	350:14	350:14	6	out
FIELD	350:14	350:14	7	out
LEAF_NODE	350:14	350:14	8	out
LEAF_NODE	350:17	350:17	6	,
ARGUMENT	350:19	350:19	6	TIFFTAG_YCBCRCOEFFICIENTS
FIELD	350:19	350:19	7	TIFFTAG_YCBCRCOEFFICIENTS
LEAF_NODE	350:19	350:19	8	TIFFTAG_YCBCRCOEFFICIENTS
LEAF_NODE	350:44	350:44	6	,
ARGUMENT	350:46	350:46	6	ycbcrCoeffs
FIELD	350:46	350:46	7	ycbcrCoeffs
LEAF_NODE	350:46	350:46	8	ycbcrCoeffs
LEAF_NODE	350:57	350:57	6	)
LEAF_NODE	350:58	350:58	4	;
EXPR_STATEMENT	351:1	351:55	3	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip ) ;
EXPR	351:1	351:1	4	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
ASSIGN	351:1	351:16	5	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
LVAL	351:1	351:1	6	rowsperstrip
FIELD	351:1	351:1	7	rowsperstrip
LEAF_NODE	351:1	351:1	8	rowsperstrip
ASSIGN_OP	351:14	351:14	6	=
LEAF_NODE	351:14	351:14	7	=
RVAL	351:16	351:16	6	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	351:16	351:54	7	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	351:16	351:16	8	TIFFDefaultStripSize
LEAF_NODE	351:16	351:16	9	TIFFDefaultStripSize
LEAF_NODE	351:36	351:36	8	(
ARGUMENT	351:37	351:37	8	out
FIELD	351:37	351:37	9	out
LEAF_NODE	351:37	351:37	10	out
LEAF_NODE	351:40	351:40	8	,
ARGUMENT	351:42	351:42	8	rowsperstrip
FIELD	351:42	351:42	9	rowsperstrip
LEAF_NODE	351:42	351:42	10	rowsperstrip
LEAF_NODE	351:54	351:54	8	)
LEAF_NODE	351:55	351:55	4	;
EXPR_STATEMENT	352:1	352:54	3	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ;
EXPR	352:1	352:1	4	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
FUNCTION_CALL	352:1	352:53	5	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
CALLEE	352:1	352:1	6	TIFFSetField
LEAF_NODE	352:1	352:1	7	TIFFSetField
LEAF_NODE	352:13	352:13	6	(
ARGUMENT	352:14	352:14	6	out
FIELD	352:14	352:14	7	out
LEAF_NODE	352:14	352:14	8	out
LEAF_NODE	352:17	352:17	6	,
ARGUMENT	352:19	352:19	6	TIFFTAG_ROWSPERSTRIP
FIELD	352:19	352:19	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	352:19	352:19	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	352:39	352:39	6	,
ARGUMENT	352:41	352:41	6	rowsperstrip
FIELD	352:41	352:41	7	rowsperstrip
LEAF_NODE	352:41	352:41	8	rowsperstrip
LEAF_NODE	352:53	352:53	6	)
LEAF_NODE	352:54	352:54	4	;
EXPR_STATEMENT	354:1	354:47	3	result = cvtRaster ( out , raster , width , height ) ;
EXPR	354:1	354:1	4	result = cvtRaster ( out , raster , width , height )
ASSIGN	354:1	354:10	5	result = cvtRaster ( out , raster , width , height )
LVAL	354:1	354:1	6	result
FIELD	354:1	354:1	7	result
LEAF_NODE	354:1	354:1	8	result
ASSIGN_OP	354:8	354:8	6	=
LEAF_NODE	354:8	354:8	7	=
RVAL	354:10	354:10	6	cvtRaster ( out , raster , width , height )
FUNCTION_CALL	354:10	354:46	7	cvtRaster ( out , raster , width , height )
CALLEE	354:10	354:10	8	cvtRaster
LEAF_NODE	354:10	354:10	9	cvtRaster
LEAF_NODE	354:19	354:19	8	(
ARGUMENT	354:20	354:20	8	out
FIELD	354:20	354:20	9	out
LEAF_NODE	354:20	354:20	10	out
LEAF_NODE	354:23	354:23	8	,
ARGUMENT	354:25	354:25	8	raster
FIELD	354:25	354:25	9	raster
LEAF_NODE	354:25	354:25	10	raster
LEAF_NODE	354:31	354:31	8	,
ARGUMENT	354:33	354:33	8	width
FIELD	354:33	354:33	9	width
LEAF_NODE	354:33	354:33	10	width
LEAF_NODE	354:38	354:38	8	,
ARGUMENT	354:40	354:40	8	height
FIELD	354:40	354:40	9	height
LEAF_NODE	354:40	354:40	10	height
LEAF_NODE	354:46	354:46	8	)
LEAF_NODE	354:47	354:47	4	;
EXPR_STATEMENT	355:8	355:25	3	_TIFFfree ( raster ) ;
EXPR	355:8	355:8	4	_TIFFfree ( raster )
FUNCTION_CALL	355:8	355:24	5	_TIFFfree ( raster )
CALLEE	355:8	355:8	6	_TIFFfree
LEAF_NODE	355:8	355:8	7	_TIFFfree
LEAF_NODE	355:17	355:17	6	(
ARGUMENT	355:18	355:18	6	raster
FIELD	355:18	355:18	7	raster
LEAF_NODE	355:18	355:18	8	raster
LEAF_NODE	355:24	355:24	6	)
LEAF_NODE	355:25	355:25	4	;
JUMP_STATEMENT	356:8	356:21	3	return result ;
KEYWORD	356:8	356:8	4	return
LEAF_NODE	356:8	356:8	5	return
DESTINATION	356:15	356:15	4	result
EXPR	356:15	356:15	5	result
FIELD	356:15	356:15	6	result
LEAF_NODE	356:15	356:15	7	result
LEAF_NODE	356:21	356:21	4	;
LEAF_NODE	357:0	357:0	2	}
FUNCTION_DEF	374:0	386:0	1	
RETURN_TYPE	374:0	374:7	2	static void
LEAF_NODE	374:0	374:0	3	static
TYPE_NAME	374:7	374:7	3	void
LEAF_NODE	374:7	374:7	4	void
FUNCTION_NAME	375:0	375:0	2	usage
LEAF_NODE	375:0	375:0	3	usage
PARAMETER_LIST	375:5	375:14	2	( int code )
LEAF_NODE	375:5	375:5	3	(
PARAMETER_DECL	375:6	375:10	3	int code
TYPE	375:6	375:6	4	int
TYPE_NAME	375:6	375:6	5	int
LEAF_NODE	375:6	375:6	6	int
NAME	375:10	375:10	4	code
LEAF_NODE	375:10	375:10	5	code
LEAF_NODE	375:14	375:14	3	)
LEAF_NODE	376:0	376:0	2	{
STATEMENTS	377:1	385:1	2	
SIMPLE_DECL	377:1	377:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	377:1	377:6	4	char [ BUFSIZ ] buf
TYPE	377:1	377:9	5	char [ BUFSIZ ]
TYPE_NAME	377:1	377:1	6	char
LEAF_NODE	377:1	377:1	7	char
TYPE_SUFFIX	377:9	377:16	6	[ BUFSIZ ]
LEAF_NODE	377:9	377:9	7	[
FIELD	377:10	377:10	7	BUFSIZ
LEAF_NODE	377:10	377:10	8	BUFSIZ
LEAF_NODE	377:16	377:16	7	]
NAME	377:6	377:6	5	buf
LEAF_NODE	377:6	377:6	6	buf
LEAF_NODE	377:17	377:17	4	;
SIMPLE_DECL	378:1	378:6	3	int i ;
VAR_DECL	378:1	378:5	4	int i
TYPE	378:1	378:1	5	int
TYPE_NAME	378:1	378:1	6	int
LEAF_NODE	378:1	378:1	7	int
NAME	378:5	378:5	5	i
LEAF_NODE	378:5	378:5	6	i
LEAF_NODE	378:6	378:6	4	;
EXPR_STATEMENT	380:1	380:20	3	setbuf ( stderr , buf ) ;
EXPR	380:1	380:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	380:1	380:19	5	setbuf ( stderr , buf )
CALLEE	380:1	380:1	6	setbuf
LEAF_NODE	380:1	380:1	7	setbuf
LEAF_NODE	380:7	380:7	6	(
ARGUMENT	380:8	380:8	6	stderr
FIELD	380:8	380:8	7	stderr
LEAF_NODE	380:8	380:8	8	stderr
LEAF_NODE	380:14	380:14	6	,
ARGUMENT	380:16	380:16	6	buf
FIELD	380:16	380:16	7	buf
LEAF_NODE	380:16	380:16	8	buf
LEAF_NODE	380:19	380:19	6	)
LEAF_NODE	380:20	380:20	4	;
EXPR_STATEMENT	382:1	382:44	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	382:1	382:1	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	382:1	382:43	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	382:1	382:1	6	fprintf
LEAF_NODE	382:1	382:1	7	fprintf
LEAF_NODE	382:8	382:8	6	(
ARGUMENT	382:9	382:9	6	stderr
FIELD	382:9	382:9	7	stderr
LEAF_NODE	382:9	382:9	8	stderr
LEAF_NODE	382:15	382:15	6	,
ARGUMENT	382:17	382:17	6	"%s\n\n"
FIELD	382:17	382:17	7	"%s\n\n"
LEAF_NODE	382:17	382:17	8	"%s\n\n"
LEAF_NODE	382:25	382:25	6	,
ARGUMENT	382:27	382:27	6	TIFFGetVersion ( )
FUNCTION_CALL	382:27	382:42	7	TIFFGetVersion ( )
CALLEE	382:27	382:27	8	TIFFGetVersion
LEAF_NODE	382:27	382:27	9	TIFFGetVersion
LEAF_NODE	382:41	382:41	8	(
LEAF_NODE	382:42	382:42	8	)
LEAF_NODE	382:43	382:43	6	)
LEAF_NODE	382:44	382:44	4	;
ITERATION	383:1	384:2	3	
KEYWORD	383:1	383:1	4	for
LEAF_NODE	383:1	383:1	5	for
LEAF_NODE	383:5	383:5	4	(
FOR_INIT	383:6	383:11	4	i = 0 ;
EXPR	383:6	383:6	5	i = 0
ASSIGN	383:6	383:10	6	i = 0
LVAL	383:6	383:6	7	i
FIELD	383:6	383:6	8	i
LEAF_NODE	383:6	383:6	9	i
ASSIGN_OP	383:8	383:8	7	=
LEAF_NODE	383:8	383:8	8	=
RVAL	383:10	383:10	7	0
FIELD	383:10	383:10	8	0
LEAF_NODE	383:10	383:10	9	0
LEAF_NODE	383:11	383:11	5	;
CONDITION	383:13	383:13	4	stuff [ i ] != NULL
EXPR	383:13	383:25	5	stuff [ i ] != NULL
FIELD	383:13	383:20	6	stuff [ i ]
LEAF_NODE	383:13	383:13	7	stuff
LEAF_NODE	383:18	383:18	7	[
EXPR	383:19	383:19	7	i
FIELD	383:19	383:19	8	i
LEAF_NODE	383:19	383:19	9	i
LEAF_NODE	383:20	383:20	7	]
EQ_OPERATOR	383:22	383:22	6	!=
LEAF_NODE	383:22	383:22	7	!=
FIELD	383:25	383:25	6	NULL
LEAF_NODE	383:25	383:25	7	NULL
LEAF_NODE	383:29	383:29	4	;
FOR_EXPR	383:31	383:31	4	i ++
EXPR	383:31	383:31	5	i ++
FIELD	383:31	383:32	6	i ++
LEAF_NODE	383:31	383:31	7	i
LEAF_NODE	383:32	383:32	7	++
LEAF_NODE	383:34	383:34	4	)
STATEMENTS	384:2	384:2	4	
EXPR_STATEMENT	384:2	384:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	384:2	384:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	384:2	384:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	384:2	384:2	8	fprintf
LEAF_NODE	384:2	384:2	9	fprintf
LEAF_NODE	384:9	384:9	8	(
ARGUMENT	384:10	384:10	8	stderr
FIELD	384:10	384:10	9	stderr
LEAF_NODE	384:10	384:10	10	stderr
LEAF_NODE	384:16	384:16	8	,
ARGUMENT	384:18	384:18	8	"%s\n"
FIELD	384:18	384:18	9	"%s\n"
LEAF_NODE	384:18	384:18	10	"%s\n"
LEAF_NODE	384:24	384:24	8	,
ARGUMENT	384:26	384:26	8	stuff [ i ]
FIELD	384:26	384:33	9	stuff [ i ]
LEAF_NODE	384:26	384:26	10	stuff
LEAF_NODE	384:31	384:31	10	[
EXPR	384:32	384:32	10	i
FIELD	384:32	384:32	11	i
LEAF_NODE	384:32	384:32	12	i
LEAF_NODE	384:33	384:33	10	]
LEAF_NODE	384:34	384:34	8	)
LEAF_NODE	384:35	384:35	6	;
EXPR_STATEMENT	385:1	385:11	3	exit ( code ) ;
EXPR	385:1	385:1	4	exit ( code )
FUNCTION_CALL	385:1	385:10	5	exit ( code )
CALLEE	385:1	385:1	6	exit
LEAF_NODE	385:1	385:1	7	exit
LEAF_NODE	385:5	385:5	6	(
ARGUMENT	385:6	385:6	6	code
FIELD	385:6	385:6	7	code
LEAF_NODE	385:6	385:6	8	code
LEAF_NODE	385:10	385:10	6	)
LEAF_NODE	385:11	385:11	4	;
LEAF_NODE	386:0	386:0	2	}
