SOURCE_FILE	49:0	592:0	0	
FUNCTION_DEF	49:0	49:29	1	
RETURN_TYPE	49:0	49:0	2	void
TYPE_NAME	49:0	49:0	3	void
LEAF_NODE	49:0	49:0	4	void
FUNCTION_NAME	49:5	49:5	2	TIFFModeCCITTFax3
LEAF_NODE	49:5	49:5	3	TIFFModeCCITTFax3
PARAMETER_LIST	49:22	49:27	2	( void )
LEAF_NODE	49:22	49:22	3	(
PARAMETER_DECL	49:23	49:23	3	void
LEAF_NODE	49:23	49:23	4	void
LEAF_NODE	49:27	49:27	3	)
LEAF_NODE	49:28	49:28	2	{
LEAF_NODE	0:0	0:0	2	STATEMENTS
LEAF_NODE	49:29	49:29	2	}
FUNCTION_DEF	52:0	56:0	1	
RETURN_TYPE	52:0	52:7	2	static tsize_t
LEAF_NODE	52:0	52:0	3	static
TYPE_NAME	52:7	52:7	3	tsize_t
LEAF_NODE	52:7	52:7	4	tsize_t
FUNCTION_NAME	53:0	53:0	2	_tiffReadProc
LEAF_NODE	53:0	53:0	3	_tiffReadProc
PARAMETER_LIST	53:13	53:53	2	( thandle_t fd , tdata_t buf , tsize_t size )
LEAF_NODE	53:13	53:13	3	(
PARAMETER_DECL	53:14	53:24	3	thandle_t fd
TYPE	53:14	53:14	4	thandle_t
TYPE_NAME	53:14	53:14	5	thandle_t
LEAF_NODE	53:14	53:14	6	thandle_t
NAME	53:24	53:24	4	fd
LEAF_NODE	53:24	53:24	5	fd
LEAF_NODE	53:26	53:26	3	,
PARAMETER_DECL	53:28	53:36	3	tdata_t buf
TYPE	53:28	53:28	4	tdata_t
TYPE_NAME	53:28	53:28	5	tdata_t
LEAF_NODE	53:28	53:28	6	tdata_t
NAME	53:36	53:36	4	buf
LEAF_NODE	53:36	53:36	5	buf
LEAF_NODE	53:39	53:39	3	,
PARAMETER_DECL	53:41	53:49	3	tsize_t size
TYPE	53:41	53:41	4	tsize_t
TYPE_NAME	53:41	53:41	5	tsize_t
LEAF_NODE	53:41	53:41	6	tsize_t
NAME	53:49	53:49	4	size
LEAF_NODE	53:49	53:49	5	size
LEAF_NODE	53:53	53:53	3	)
LEAF_NODE	54:0	54:0	2	{
STATEMENTS	55:1	55:1	2	
JUMP_STATEMENT	55:1	55:35	3	return ( read ( ( int ) fd , buf , size ) ) ;
KEYWORD	55:1	55:1	4	return
LEAF_NODE	55:1	55:1	5	return
DESTINATION	55:8	55:8	4	( read ( ( int ) fd , buf , size ) )
EXPR	55:8	55:34	5	( read ( ( int ) fd , buf , size ) )
LEAF_NODE	55:8	55:8	6	(
FUNCTION_CALL	55:9	55:33	6	read ( ( int ) fd , buf , size )
CALLEE	55:9	55:9	7	read
LEAF_NODE	55:9	55:9	8	read
LEAF_NODE	55:13	55:13	7	(
ARGUMENT	55:14	55:20	7	( int ) fd
LEAF_NODE	55:14	55:14	8	(
TYPE_NAME	55:15	55:15	8	int
LEAF_NODE	55:15	55:15	9	int
LEAF_NODE	55:18	55:18	8	)
FIELD	55:20	55:20	8	fd
LEAF_NODE	55:20	55:20	9	fd
LEAF_NODE	55:22	55:22	7	,
ARGUMENT	55:24	55:24	7	buf
FIELD	55:24	55:24	8	buf
LEAF_NODE	55:24	55:24	9	buf
LEAF_NODE	55:27	55:27	7	,
ARGUMENT	55:29	55:29	7	size
FIELD	55:29	55:29	8	size
LEAF_NODE	55:29	55:29	9	size
LEAF_NODE	55:33	55:33	7	)
LEAF_NODE	55:34	55:34	6	)
LEAF_NODE	55:35	55:35	4	;
LEAF_NODE	56:0	56:0	2	}
FUNCTION_DEF	58:0	62:0	1	
RETURN_TYPE	58:0	58:7	2	static tsize_t
LEAF_NODE	58:0	58:0	3	static
TYPE_NAME	58:7	58:7	3	tsize_t
LEAF_NODE	58:7	58:7	4	tsize_t
FUNCTION_NAME	59:0	59:0	2	_tiffWriteProc
LEAF_NODE	59:0	59:0	3	_tiffWriteProc
PARAMETER_LIST	59:14	59:54	2	( thandle_t fd , tdata_t buf , tsize_t size )
LEAF_NODE	59:14	59:14	3	(
PARAMETER_DECL	59:15	59:25	3	thandle_t fd
TYPE	59:15	59:15	4	thandle_t
TYPE_NAME	59:15	59:15	5	thandle_t
LEAF_NODE	59:15	59:15	6	thandle_t
NAME	59:25	59:25	4	fd
LEAF_NODE	59:25	59:25	5	fd
LEAF_NODE	59:27	59:27	3	,
PARAMETER_DECL	59:29	59:37	3	tdata_t buf
TYPE	59:29	59:29	4	tdata_t
TYPE_NAME	59:29	59:29	5	tdata_t
LEAF_NODE	59:29	59:29	6	tdata_t
NAME	59:37	59:37	4	buf
LEAF_NODE	59:37	59:37	5	buf
LEAF_NODE	59:40	59:40	3	,
PARAMETER_DECL	59:42	59:50	3	tsize_t size
TYPE	59:42	59:42	4	tsize_t
TYPE_NAME	59:42	59:42	5	tsize_t
LEAF_NODE	59:42	59:42	6	tsize_t
NAME	59:50	59:50	4	size
LEAF_NODE	59:50	59:50	5	size
LEAF_NODE	59:54	59:54	3	)
LEAF_NODE	60:0	60:0	2	{
STATEMENTS	61:1	61:1	2	
JUMP_STATEMENT	61:1	61:36	3	return ( write ( ( int ) fd , buf , size ) ) ;
KEYWORD	61:1	61:1	4	return
LEAF_NODE	61:1	61:1	5	return
DESTINATION	61:8	61:8	4	( write ( ( int ) fd , buf , size ) )
EXPR	61:8	61:35	5	( write ( ( int ) fd , buf , size ) )
LEAF_NODE	61:8	61:8	6	(
FUNCTION_CALL	61:9	61:34	6	write ( ( int ) fd , buf , size )
CALLEE	61:9	61:9	7	write
LEAF_NODE	61:9	61:9	8	write
LEAF_NODE	61:14	61:14	7	(
ARGUMENT	61:15	61:21	7	( int ) fd
LEAF_NODE	61:15	61:15	8	(
TYPE_NAME	61:16	61:16	8	int
LEAF_NODE	61:16	61:16	9	int
LEAF_NODE	61:19	61:19	8	)
FIELD	61:21	61:21	8	fd
LEAF_NODE	61:21	61:21	9	fd
LEAF_NODE	61:23	61:23	7	,
ARGUMENT	61:25	61:25	7	buf
FIELD	61:25	61:25	8	buf
LEAF_NODE	61:25	61:25	9	buf
LEAF_NODE	61:28	61:28	7	,
ARGUMENT	61:30	61:30	7	size
FIELD	61:30	61:30	8	size
LEAF_NODE	61:30	61:30	9	size
LEAF_NODE	61:34	61:34	7	)
LEAF_NODE	61:35	61:35	6	)
LEAF_NODE	61:36	61:36	4	;
LEAF_NODE	62:0	62:0	2	}
FUNCTION_DEF	64:0	68:0	1	
RETURN_TYPE	64:0	64:7	2	static toff_t
LEAF_NODE	64:0	64:0	3	static
TYPE_NAME	64:7	64:7	3	toff_t
LEAF_NODE	64:7	64:7	4	toff_t
FUNCTION_NAME	65:0	65:0	2	_tiffSeekProc
LEAF_NODE	65:0	65:0	3	_tiffSeekProc
PARAMETER_LIST	65:13	65:50	2	( thandle_t fd , toff_t off , int whence )
LEAF_NODE	65:13	65:13	3	(
PARAMETER_DECL	65:14	65:24	3	thandle_t fd
TYPE	65:14	65:14	4	thandle_t
TYPE_NAME	65:14	65:14	5	thandle_t
LEAF_NODE	65:14	65:14	6	thandle_t
NAME	65:24	65:24	4	fd
LEAF_NODE	65:24	65:24	5	fd
LEAF_NODE	65:26	65:26	3	,
PARAMETER_DECL	65:28	65:35	3	toff_t off
TYPE	65:28	65:28	4	toff_t
TYPE_NAME	65:28	65:28	5	toff_t
LEAF_NODE	65:28	65:28	6	toff_t
NAME	65:35	65:35	4	off
LEAF_NODE	65:35	65:35	5	off
LEAF_NODE	65:38	65:38	3	,
PARAMETER_DECL	65:40	65:44	3	int whence
TYPE	65:40	65:40	4	int
TYPE_NAME	65:40	65:40	5	int
LEAF_NODE	65:40	65:40	6	int
NAME	65:44	65:44	4	whence
LEAF_NODE	65:44	65:44	5	whence
LEAF_NODE	65:50	65:50	3	)
LEAF_NODE	66:0	66:0	2	{
STATEMENTS	67:1	67:1	2	
JUMP_STATEMENT	67:1	67:69	3	return ( ( toff_t ) _TIFF_lseek_f ( ( int ) fd , ( _TIFF_off_t ) off , whence ) ) ;
KEYWORD	67:1	67:1	4	return
LEAF_NODE	67:1	67:1	5	return
DESTINATION	67:8	67:8	4	( ( toff_t ) _TIFF_lseek_f ( ( int ) fd , ( _TIFF_off_t ) off , whence ) )
EXPR	67:8	67:68	5	( ( toff_t ) _TIFF_lseek_f ( ( int ) fd , ( _TIFF_off_t ) off , whence ) )
LEAF_NODE	67:8	67:8	6	(
LEAF_NODE	67:9	67:9	6	(
TYPE_NAME	67:10	67:10	6	toff_t
LEAF_NODE	67:10	67:10	7	toff_t
LEAF_NODE	67:16	67:16	6	)
FUNCTION_CALL	67:18	67:67	6	_TIFF_lseek_f ( ( int ) fd , ( _TIFF_off_t ) off , whence )
CALLEE	67:18	67:18	7	_TIFF_lseek_f
LEAF_NODE	67:18	67:18	8	_TIFF_lseek_f
LEAF_NODE	67:31	67:31	7	(
ARGUMENT	67:32	67:38	7	( int ) fd
LEAF_NODE	67:32	67:32	8	(
TYPE_NAME	67:33	67:33	8	int
LEAF_NODE	67:33	67:33	9	int
LEAF_NODE	67:36	67:36	8	)
FIELD	67:38	67:38	8	fd
LEAF_NODE	67:38	67:38	9	fd
LEAF_NODE	67:40	67:40	7	,
ARGUMENT	67:42	67:56	7	( _TIFF_off_t ) off
LEAF_NODE	67:42	67:42	8	(
TYPE_NAME	67:43	67:43	8	_TIFF_off_t
LEAF_NODE	67:43	67:43	9	_TIFF_off_t
LEAF_NODE	67:54	67:54	8	)
FIELD	67:56	67:56	8	off
LEAF_NODE	67:56	67:56	9	off
LEAF_NODE	67:59	67:59	7	,
ARGUMENT	67:61	67:61	7	whence
FIELD	67:61	67:61	8	whence
LEAF_NODE	67:61	67:61	9	whence
LEAF_NODE	67:67	67:67	7	)
LEAF_NODE	67:68	67:68	6	)
LEAF_NODE	67:69	67:69	4	;
LEAF_NODE	68:0	68:0	2	}
FUNCTION_DEF	70:0	74:0	1	
RETURN_TYPE	70:0	70:7	2	static int
LEAF_NODE	70:0	70:0	3	static
TYPE_NAME	70:7	70:7	3	int
LEAF_NODE	70:7	70:7	4	int
FUNCTION_NAME	71:0	71:0	2	_tiffCloseProc
LEAF_NODE	71:0	71:0	3	_tiffCloseProc
PARAMETER_LIST	71:14	71:27	2	( thandle_t fd )
LEAF_NODE	71:14	71:14	3	(
PARAMETER_DECL	71:15	71:25	3	thandle_t fd
TYPE	71:15	71:15	4	thandle_t
TYPE_NAME	71:15	71:15	5	thandle_t
LEAF_NODE	71:15	71:15	6	thandle_t
NAME	71:25	71:25	4	fd
LEAF_NODE	71:25	71:25	5	fd
LEAF_NODE	71:27	71:27	3	)
LEAF_NODE	72:0	72:0	2	{
STATEMENTS	73:1	73:1	2	
JUMP_STATEMENT	73:1	73:25	3	return ( close ( ( int ) fd ) ) ;
KEYWORD	73:1	73:1	4	return
LEAF_NODE	73:1	73:1	5	return
DESTINATION	73:8	73:8	4	( close ( ( int ) fd ) )
EXPR	73:8	73:24	5	( close ( ( int ) fd ) )
LEAF_NODE	73:8	73:8	6	(
FUNCTION_CALL	73:9	73:23	6	close ( ( int ) fd )
CALLEE	73:9	73:9	7	close
LEAF_NODE	73:9	73:9	8	close
LEAF_NODE	73:14	73:14	7	(
ARGUMENT	73:15	73:21	7	( int ) fd
LEAF_NODE	73:15	73:15	8	(
TYPE_NAME	73:16	73:16	8	int
LEAF_NODE	73:16	73:16	9	int
LEAF_NODE	73:19	73:19	8	)
FIELD	73:21	73:21	8	fd
LEAF_NODE	73:21	73:21	9	fd
LEAF_NODE	73:23	73:23	7	)
LEAF_NODE	73:24	73:24	6	)
LEAF_NODE	73:25	73:25	4	;
LEAF_NODE	74:0	74:0	2	}
FUNCTION_DEF	78:0	83:0	1	
RETURN_TYPE	78:0	78:7	2	static toff_t
LEAF_NODE	78:0	78:0	3	static
TYPE_NAME	78:7	78:7	3	toff_t
LEAF_NODE	78:7	78:7	4	toff_t
FUNCTION_NAME	79:0	79:0	2	_tiffSizeProc
LEAF_NODE	79:0	79:0	3	_tiffSizeProc
PARAMETER_LIST	79:13	79:26	2	( thandle_t fd )
LEAF_NODE	79:13	79:13	3	(
PARAMETER_DECL	79:14	79:24	3	thandle_t fd
TYPE	79:14	79:14	4	thandle_t
TYPE_NAME	79:14	79:14	5	thandle_t
LEAF_NODE	79:14	79:14	6	thandle_t
NAME	79:24	79:24	4	fd
LEAF_NODE	79:24	79:24	5	fd
LEAF_NODE	79:26	79:26	3	)
LEAF_NODE	80:0	80:0	2	{
STATEMENTS	81:1	82:1	2	
SIMPLE_DECL	81:1	81:16	3	_TIFF_stat_s sb ;
VAR_DECL	81:1	81:14	4	_TIFF_stat_s sb
TYPE	81:1	81:1	5	_TIFF_stat_s
TYPE_NAME	81:1	81:1	6	_TIFF_stat_s
LEAF_NODE	81:1	81:1	7	_TIFF_stat_s
NAME	81:14	81:14	5	sb
LEAF_NODE	81:14	81:14	6	sb
LEAF_NODE	81:16	81:16	4	;
JUMP_STATEMENT	82:1	82:68	3	return ( toff_t ) ( _TIFF_fstat_f ( ( int ) fd , & sb ) < 0 ? 0 : sb . st_size ) ;
KEYWORD	82:1	82:1	4	return
LEAF_NODE	82:1	82:1	5	return
DESTINATION	82:8	82:8	4	( toff_t ) ( _TIFF_fstat_f ( ( int ) fd , & sb ) < 0 ? 0 : sb . st_size )
EXPR	82:8	82:67	5	( toff_t ) ( _TIFF_fstat_f ( ( int ) fd , & sb ) < 0 ? 0 : sb . st_size )
LEAF_NODE	82:8	82:8	6	(
TYPE_NAME	82:9	82:9	6	toff_t
LEAF_NODE	82:9	82:9	7	toff_t
LEAF_NODE	82:15	82:15	6	)
LEAF_NODE	82:17	82:17	6	(
COND_EXPR	82:18	82:57	6	_TIFF_fstat_f ( ( int ) fd , & sb ) < 0 ? 0 : sb . st_size
CONDITION	82:18	82:49	7	_TIFF_fstat_f ( ( int ) fd , & sb ) < 0
FUNCTION_CALL	82:18	82:45	8	_TIFF_fstat_f ( ( int ) fd , & sb )
CALLEE	82:18	82:18	9	_TIFF_fstat_f
LEAF_NODE	82:18	82:18	10	_TIFF_fstat_f
LEAF_NODE	82:31	82:31	9	(
ARGUMENT	82:32	82:38	9	( int ) fd
LEAF_NODE	82:32	82:32	10	(
TYPE_NAME	82:33	82:33	10	int
LEAF_NODE	82:33	82:33	11	int
LEAF_NODE	82:36	82:36	10	)
FIELD	82:38	82:38	10	fd
LEAF_NODE	82:38	82:38	11	fd
LEAF_NODE	82:40	82:40	9	,
ARGUMENT	82:42	82:42	9	& sb
UNARY_EXPR	82:42	82:43	10	& sb
UNARY_OPERATOR	82:42	82:42	11	&
LEAF_NODE	82:42	82:42	12	&
FIELD	82:43	82:43	11	sb
LEAF_NODE	82:43	82:43	12	sb
LEAF_NODE	82:45	82:45	9	)
REL_OPERATOR	82:47	82:47	8	<
LEAF_NODE	82:47	82:47	9	<
FIELD	82:49	82:49	8	0
LEAF_NODE	82:49	82:49	9	0
LEAF_NODE	82:51	82:51	7	?
EXPR	82:53	82:53	7	0
FIELD	82:53	82:53	8	0
LEAF_NODE	82:53	82:53	9	0
LEAF_NODE	82:55	82:55	7	:
FIELD	82:57	82:60	7	sb . st_size
LEAF_NODE	82:57	82:57	8	sb
LEAF_NODE	82:59	82:59	8	.
LEAF_NODE	82:60	82:60	8	st_size
LEAF_NODE	82:67	82:67	6	)
LEAF_NODE	82:68	82:68	4	;
LEAF_NODE	83:0	83:0	2	}
SIMPLE_DECL	95:7	95:24	1	int no_mapped ; no_mapped = 0 ;
VAR_DECL	95:7	95:11	2	int no_mapped ; no_mapped = 0
TYPE	95:7	95:7	3	int
TYPE_NAME	95:7	95:7	4	int
LEAF_NODE	95:7	95:7	5	int
NAME	95:11	95:11	3	no_mapped
LEAF_NODE	95:11	95:11	4	no_mapped
LEAF_NODE	0:0	0:0	3	;
INIT	95:11	95:11	3	no_mapped = 0
ASSIGN	95:11	95:23	4	no_mapped = 0
LVAL	95:11	95:11	5	no_mapped
NAME	95:11	95:11	6	no_mapped
LEAF_NODE	95:11	95:11	7	no_mapped
ASSIGN_OP	95:21	95:21	5	=
LEAF_NODE	95:21	95:21	6	=
RVAL	95:23	95:23	5	0
FIELD	95:23	95:23	6	0
LEAF_NODE	95:23	95:23	7	0
LEAF_NODE	95:24	95:24	2	;
SIMPLE_DECL	96:7	100:23	1	struct CLASS_NAME BASE_CLASSES { char * base ; char * top ; unsigned short channel ; } [ MAX_MAPPED ] map_table ;
VAR_DECL	96:7	100:2	2	struct CLASS_NAME BASE_CLASSES { char * base ; char * top ; unsigned short channel ; } [ MAX_MAPPED ] map_table
TYPE	96:7	100:11	3	struct CLASS_NAME BASE_CLASSES { char * base ; char * top ; unsigned short channel ; } [ MAX_MAPPED ]
CLASS_DEF	96:7	100:0	4	struct CLASS_NAME BASE_CLASSES { char * base ; char * top ; unsigned short channel ; }
LEAF_NODE	96:7	96:7	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	96:14	96:14	5	{
CLASS_CONTENT	97:1	99:1	5	char * base ; char * top ; unsigned short channel ;
SIMPLE_DECL	97:1	97:11	6	char * base ;
VAR_DECL	97:1	97:7	7	char * base
TYPE	97:1	97:6	8	char *
TYPE_NAME	97:1	97:1	9	char
LEAF_NODE	97:1	97:1	10	char
POINTER	97:6	97:6	9	*
LEAF_NODE	97:6	97:6	10	*
NAME	97:7	97:7	8	base
LEAF_NODE	97:7	97:7	9	base
LEAF_NODE	97:11	97:11	7	;
SIMPLE_DECL	98:1	98:10	6	char * top ;
VAR_DECL	98:1	98:7	7	char * top
TYPE	98:1	98:6	8	char *
TYPE_NAME	98:1	98:1	9	char
LEAF_NODE	98:1	98:1	10	char
POINTER	98:6	98:6	9	*
LEAF_NODE	98:6	98:6	10	*
NAME	98:7	98:7	8	top
LEAF_NODE	98:7	98:7	9	top
LEAF_NODE	98:10	98:10	7	;
SIMPLE_DECL	99:1	99:23	6	unsigned short channel ;
VAR_DECL	99:1	99:16	7	unsigned short channel
TYPE	99:1	99:1	8	unsigned short
TYPE_NAME	99:1	99:10	9	unsigned short
LEAF_NODE	99:1	99:1	10	unsigned
LEAF_NODE	99:10	99:10	10	short
NAME	99:16	99:16	8	channel
LEAF_NODE	99:16	99:16	9	channel
LEAF_NODE	99:23	99:23	7	;
LEAF_NODE	100:0	100:0	5	}
TYPE_SUFFIX	100:11	100:22	4	[ MAX_MAPPED ]
LEAF_NODE	100:11	100:11	5	[
FIELD	100:12	100:12	5	MAX_MAPPED
LEAF_NODE	100:12	100:12	6	MAX_MAPPED
LEAF_NODE	100:22	100:22	5	]
NAME	100:2	100:2	3	map_table
LEAF_NODE	100:2	100:2	4	map_table
LEAF_NODE	100:23	100:23	2	;
FUNCTION_DEF	115:0	169:0	1	
RETURN_TYPE	115:0	115:7	2	static int
LEAF_NODE	115:0	115:0	3	static
TYPE_NAME	115:7	115:7	3	int
LEAF_NODE	115:7	115:7	4	int
FUNCTION_NAME	116:0	116:0	2	_tiffMapProc
LEAF_NODE	116:0	116:0	3	_tiffMapProc
PARAMETER_LIST	116:12	116:56	2	( thandle_t fd , tdata_t * pbase , toff_t * psize )
LEAF_NODE	116:12	116:12	3	(
PARAMETER_DECL	116:13	116:23	3	thandle_t fd
TYPE	116:13	116:13	4	thandle_t
TYPE_NAME	116:13	116:13	5	thandle_t
LEAF_NODE	116:13	116:13	6	thandle_t
NAME	116:23	116:23	4	fd
LEAF_NODE	116:23	116:23	5	fd
LEAF_NODE	116:25	116:25	3	,
PARAMETER_DECL	116:27	116:36	3	tdata_t * pbase
TYPE	116:27	116:34	4	tdata_t *
TYPE_NAME	116:27	116:27	5	tdata_t
LEAF_NODE	116:27	116:27	6	tdata_t
POINTER	116:34	116:34	5	*
LEAF_NODE	116:34	116:34	6	*
NAME	116:36	116:36	4	pbase
LEAF_NODE	116:36	116:36	5	pbase
LEAF_NODE	116:41	116:41	3	,
PARAMETER_DECL	116:43	116:51	3	toff_t * psize
TYPE	116:43	116:49	4	toff_t *
TYPE_NAME	116:43	116:43	5	toff_t
LEAF_NODE	116:43	116:43	6	toff_t
POINTER	116:49	116:49	5	*
LEAF_NODE	116:49	116:49	6	*
NAME	116:51	116:51	4	psize
LEAF_NODE	116:51	116:51	5	psize
LEAF_NODE	116:56	116:56	3	)
LEAF_NODE	117:0	117:0	2	{
STATEMENTS	118:1	168:8	2	
SIMPLE_DECL	118:1	118:15	3	char [ 256 ] name ;
VAR_DECL	118:1	118:6	4	char [ 256 ] name
TYPE	118:1	118:10	5	char [ 256 ]
TYPE_NAME	118:1	118:1	6	char
LEAF_NODE	118:1	118:1	7	char
TYPE_SUFFIX	118:10	118:14	6	[ 256 ]
LEAF_NODE	118:10	118:10	7	[
FIELD	118:11	118:11	7	256
LEAF_NODE	118:11	118:11	8	256
LEAF_NODE	118:14	118:14	7	]
NAME	118:6	118:6	5	name
LEAF_NODE	118:6	118:6	6	name
LEAF_NODE	118:15	118:15	4	;
SIMPLE_DECL	119:1	119:15	3	struct FAB fab ;
VAR_DECL	119:1	119:12	4	struct FAB fab
TYPE	119:1	119:1	5	struct FAB
TYPE_NAME	119:1	119:8	6	struct FAB
LEAF_NODE	119:1	119:1	7	struct
LEAF_NODE	119:8	119:8	7	FAB
NAME	119:12	119:12	5	fab
LEAF_NODE	119:12	119:12	6	fab
LEAF_NODE	119:15	119:15	4	;
SIMPLE_DECL	120:1	120:23	3	unsigned short channel ;
VAR_DECL	120:1	120:16	4	unsigned short channel
TYPE	120:1	120:1	5	unsigned short
TYPE_NAME	120:1	120:10	6	unsigned short
LEAF_NODE	120:1	120:1	7	unsigned
LEAF_NODE	120:10	120:10	7	short
NAME	120:16	120:16	5	channel
LEAF_NODE	120:16	120:16	6	channel
LEAF_NODE	120:23	120:23	4	;
SIMPLE_DECL	121:1	121:27	3	char * [ 2 ] inadr , char * [ 2 ] retadr ;
INIT_DECL_LIST	121:1	121:1	4	char * [ 2 ] inadr , char * [ 2 ] retadr
VAR_DECL	121:1	121:7	5	char * [ 2 ] inadr
TYPE	121:1	121:12	6	char * [ 2 ]
TYPE_NAME	121:1	121:1	7	char
LEAF_NODE	121:1	121:1	8	char
POINTER	121:6	121:6	7	*
LEAF_NODE	121:6	121:6	8	*
TYPE_SUFFIX	121:12	121:14	7	[ 2 ]
LEAF_NODE	121:12	121:12	8	[
FIELD	121:13	121:13	8	2
LEAF_NODE	121:13	121:13	9	2
LEAF_NODE	121:14	121:14	8	]
NAME	121:7	121:7	6	inadr
LEAF_NODE	121:7	121:7	7	inadr
LEAF_NODE	121:15	121:15	5	,
VAR_DECL	121:1	121:18	5	char * [ 2 ] retadr
TYPE	121:1	121:24	6	char * [ 2 ]
TYPE_NAME	121:1	121:1	7	char
LEAF_NODE	121:1	121:1	8	char
POINTER	121:17	121:17	7	*
LEAF_NODE	121:17	121:17	8	*
TYPE_SUFFIX	121:24	121:26	7	[ 2 ]
LEAF_NODE	121:24	121:24	8	[
FIELD	121:25	121:25	8	2
LEAF_NODE	121:25	121:25	9	2
LEAF_NODE	121:26	121:26	8	]
NAME	121:18	121:18	6	retadr
LEAF_NODE	121:18	121:18	7	retadr
LEAF_NODE	121:27	121:27	4	;
SIMPLE_DECL	122:1	122:21	3	unsigned long status ;
VAR_DECL	122:1	122:15	4	unsigned long status
TYPE	122:1	122:1	5	unsigned long
TYPE_NAME	122:1	122:10	6	unsigned long
LEAF_NODE	122:1	122:1	7	unsigned
LEAF_NODE	122:10	122:10	7	long
NAME	122:15	122:15	5	status
LEAF_NODE	122:15	122:15	6	status
LEAF_NODE	122:21	122:21	4	;
SIMPLE_DECL	123:1	123:10	3	long size ;
VAR_DECL	123:1	123:6	4	long size
TYPE	123:1	123:1	5	long
TYPE_NAME	123:1	123:1	6	long
LEAF_NODE	123:1	123:1	7	long
NAME	123:6	123:6	5	size
LEAF_NODE	123:6	123:6	6	size
LEAF_NODE	123:10	123:10	4	;
SELECTION	125:1	126:2	3	
KEYWORD	125:1	125:1	4	if
LEAF_NODE	125:1	125:1	5	if
LEAF_NODE	125:4	125:4	4	(
CONDITION	125:5	125:5	4	no_mapped >= MAX_MAPPED
EXPR	125:5	125:18	5	no_mapped >= MAX_MAPPED
FIELD	125:5	125:5	6	no_mapped
LEAF_NODE	125:5	125:5	7	no_mapped
REL_OPERATOR	125:15	125:15	6	>=
LEAF_NODE	125:15	125:15	7	>=
FIELD	125:18	125:18	6	MAX_MAPPED
LEAF_NODE	125:18	125:18	7	MAX_MAPPED
LEAF_NODE	125:28	125:28	4	)
STATEMENTS	126:2	126:2	4	
JUMP_STATEMENT	126:2	126:11	5	return ( 0 ) ;
KEYWORD	126:2	126:2	6	return
LEAF_NODE	126:2	126:2	7	return
DESTINATION	126:8	126:8	6	( 0 )
EXPR	126:8	126:10	7	( 0 )
LEAF_NODE	126:8	126:8	8	(
FIELD	126:9	126:9	8	0
LEAF_NODE	126:9	126:9	9	0
LEAF_NODE	126:10	126:10	8	)
LEAF_NODE	126:11	126:11	6	;
SELECTION	131:1	132:2	3	
KEYWORD	131:1	131:1	4	if
LEAF_NODE	131:1	131:1	5	if
LEAF_NODE	131:4	131:4	4	(
CONDITION	131:5	131:5	4	getname ( ( int ) fd , name , 1 ) == NULL
EXPR	131:5	131:34	5	getname ( ( int ) fd , name , 1 ) == NULL
FUNCTION_CALL	131:5	131:29	6	getname ( ( int ) fd , name , 1 )
CALLEE	131:5	131:5	7	getname
LEAF_NODE	131:5	131:5	8	getname
LEAF_NODE	131:12	131:12	7	(
ARGUMENT	131:13	131:18	7	( int ) fd
LEAF_NODE	131:13	131:13	8	(
TYPE_NAME	131:14	131:14	8	int
LEAF_NODE	131:14	131:14	9	int
LEAF_NODE	131:17	131:17	8	)
FIELD	131:18	131:18	8	fd
LEAF_NODE	131:18	131:18	9	fd
LEAF_NODE	131:20	131:20	7	,
ARGUMENT	131:22	131:22	7	name
FIELD	131:22	131:22	8	name
LEAF_NODE	131:22	131:22	9	name
LEAF_NODE	131:26	131:26	7	,
ARGUMENT	131:28	131:28	7	1
FIELD	131:28	131:28	8	1
LEAF_NODE	131:28	131:28	9	1
LEAF_NODE	131:29	131:29	7	)
EQ_OPERATOR	131:31	131:31	6	==
LEAF_NODE	131:31	131:31	7	==
FIELD	131:34	131:34	6	NULL
LEAF_NODE	131:34	131:34	7	NULL
LEAF_NODE	131:38	131:38	4	)
STATEMENTS	132:2	132:2	4	
JUMP_STATEMENT	132:2	132:11	5	return ( 0 ) ;
KEYWORD	132:2	132:2	6	return
LEAF_NODE	132:2	132:2	7	return
DESTINATION	132:8	132:8	6	( 0 )
EXPR	132:8	132:10	7	( 0 )
LEAF_NODE	132:8	132:8	8	(
FIELD	132:9	132:9	8	0
LEAF_NODE	132:9	132:9	9	0
LEAF_NODE	132:10	132:10	8	)
LEAF_NODE	132:11	132:11	6	;
LEAF_NODE	134:1	134:1	3	fab
LEAF_NODE	134:5	134:5	3	=
SIMPLE_DECL	134:7	134:17	3	cc rms_fab ;
VAR_DECL	134:7	134:10	4	cc rms_fab
TYPE	134:7	134:7	5	cc
TYPE_NAME	134:7	134:7	6	cc
LEAF_NODE	134:7	134:7	7	cc
NAME	134:10	134:10	5	rms_fab
LEAF_NODE	134:10	134:10	6	rms_fab
LEAF_NODE	134:17	134:17	4	;
LEAF_NODE	135:1	135:1	3	fab
LEAF_NODE	135:4	135:4	3	.
LEAF_NODE	135:5	135:5	3	fab
LEAF_NODE	135:9	135:9	3	l_fop
LEAF_NODE	135:15	135:15	3	|=
SIMPLE_DECL	135:18	135:27	3	FAB V_UFO ;
VAR_DECL	135:18	135:22	4	FAB V_UFO
TYPE	135:18	135:18	5	FAB
TYPE_NAME	135:18	135:18	6	FAB
LEAF_NODE	135:18	135:18	7	FAB
NAME	135:22	135:22	5	V_UFO
LEAF_NODE	135:22	135:22	6	V_UFO
LEAF_NODE	135:27	135:27	4	;
LEAF_NODE	136:1	136:1	3	fab
LEAF_NODE	136:4	136:4	3	.
LEAF_NODE	136:5	136:5	3	fab
LEAF_NODE	136:9	136:9	3	b_fac
LEAF_NODE	136:15	136:15	3	=
SIMPLE_DECL	136:17	136:26	3	FAB M_GET ;
VAR_DECL	136:17	136:21	4	FAB M_GET
TYPE	136:17	136:17	5	FAB
TYPE_NAME	136:17	136:17	6	FAB
LEAF_NODE	136:17	136:17	7	FAB
NAME	136:21	136:21	5	M_GET
LEAF_NODE	136:21	136:21	6	M_GET
LEAF_NODE	136:26	136:26	4	;
LEAF_NODE	137:1	137:1	3	fab
LEAF_NODE	137:4	137:4	3	.
LEAF_NODE	137:5	137:5	3	fab
LEAF_NODE	137:9	137:9	3	b_shr
LEAF_NODE	137:15	137:15	3	=
SIMPLE_DECL	137:17	137:29	3	FAB M_SHRGET ;
VAR_DECL	137:17	137:21	4	FAB M_SHRGET
TYPE	137:17	137:17	5	FAB
TYPE_NAME	137:17	137:17	6	FAB
LEAF_NODE	137:17	137:17	7	FAB
NAME	137:21	137:21	5	M_SHRGET
LEAF_NODE	137:21	137:21	6	M_SHRGET
LEAF_NODE	137:29	137:29	4	;
LEAF_NODE	138:1	138:1	3	fab
LEAF_NODE	138:4	138:4	3	.
SIMPLE_DECL	138:5	138:21	3	fab l_fna ; l_fna = name ;
VAR_DECL	138:5	138:9	4	fab l_fna ; l_fna = name
TYPE	138:5	138:5	5	fab
TYPE_NAME	138:5	138:5	6	fab
LEAF_NODE	138:5	138:5	7	fab
NAME	138:9	138:9	5	l_fna
LEAF_NODE	138:9	138:9	6	l_fna
LEAF_NODE	0:0	0:0	5	;
INIT	138:9	138:9	5	l_fna = name
ASSIGN	138:9	138:17	6	l_fna = name
LVAL	138:9	138:9	7	l_fna
NAME	138:9	138:9	8	l_fna
LEAF_NODE	138:9	138:9	9	l_fna
ASSIGN_OP	138:15	138:15	7	=
LEAF_NODE	138:15	138:15	8	=
RVAL	138:17	138:17	7	name
FIELD	138:17	138:17	8	name
LEAF_NODE	138:17	138:17	9	name
LEAF_NODE	138:21	138:21	4	;
LEAF_NODE	139:1	139:1	3	fab
LEAF_NODE	139:4	139:4	3	.
SIMPLE_DECL	139:5	139:29	3	fab b_fns ; b_fns = strlen ( name ) ;
VAR_DECL	139:5	139:9	4	fab b_fns ; b_fns = strlen ( name )
TYPE	139:5	139:5	5	fab
TYPE_NAME	139:5	139:5	6	fab
LEAF_NODE	139:5	139:5	7	fab
NAME	139:9	139:9	5	b_fns
LEAF_NODE	139:9	139:9	6	b_fns
LEAF_NODE	0:0	0:0	5	;
INIT	139:9	139:9	5	b_fns = strlen ( name )
ASSIGN	139:9	139:17	6	b_fns = strlen ( name )
LVAL	139:9	139:9	7	b_fns
NAME	139:9	139:9	8	b_fns
LEAF_NODE	139:9	139:9	9	b_fns
ASSIGN_OP	139:15	139:15	7	=
LEAF_NODE	139:15	139:15	8	=
RVAL	139:17	139:17	7	strlen ( name )
FUNCTION_CALL	139:17	139:28	8	strlen ( name )
CALLEE	139:17	139:17	9	strlen
LEAF_NODE	139:17	139:17	10	strlen
LEAF_NODE	139:23	139:23	9	(
ARGUMENT	139:24	139:24	9	name
FIELD	139:24	139:24	10	name
LEAF_NODE	139:24	139:24	11	name
LEAF_NODE	139:28	139:28	9	)
LEAF_NODE	139:29	139:29	4	;
LEAF_NODE	140:1	140:1	3	status
LEAF_NODE	140:8	140:8	3	=
SIMPLE_DECL	140:10	140:24	3	sys open ; open open ( & fab ) ;
VAR_DECL	140:10	140:14	4	sys open ; open open ( & fab )
TYPE	140:10	140:10	5	sys
TYPE_NAME	140:10	140:10	6	sys
LEAF_NODE	140:10	140:10	7	sys
NAME	140:14	140:14	5	open
LEAF_NODE	140:14	140:14	6	open
LEAF_NODE	0:0	0:0	5	;
INIT	140:14	140:14	5	open open ( & fab )
ASSIGN	140:14	140:18	6	open open ( & fab )
LVAL	140:14	140:14	7	open
NAME	140:14	140:14	8	open
LEAF_NODE	140:14	140:14	9	open
ASSIGN_OP	140:14	140:14	7	open
NAME	140:14	140:14	8	open
LEAF_NODE	140:14	140:14	9	open
RVAL	140:18	140:23	7	( & fab )
LEAF_NODE	140:18	140:18	8	(
EXPR	140:19	140:19	8	& fab
UNARY_EXPR	140:19	140:20	9	& fab
UNARY_OPERATOR	140:19	140:19	10	&
LEAF_NODE	140:19	140:19	11	&
FIELD	140:20	140:20	10	fab
LEAF_NODE	140:20	140:20	11	fab
LEAF_NODE	140:23	140:23	8	)
LEAF_NODE	140:24	140:24	4	;
SELECTION	141:1	142:2	3	
KEYWORD	141:1	141:1	4	if
LEAF_NODE	141:1	141:1	5	if
LEAF_NODE	141:4	141:4	4	(
CONDITION	141:5	141:5	4	( status & 1 ) == 0
EXPR	141:5	141:19	5	( status & 1 ) == 0
LEAF_NODE	141:5	141:5	6	(
FIELD	141:6	141:6	6	status
LEAF_NODE	141:6	141:6	7	status
LEAF_NODE	141:12	141:12	6	&
FIELD	141:13	141:13	6	1
LEAF_NODE	141:13	141:13	7	1
LEAF_NODE	141:14	141:14	6	)
EQ_OPERATOR	141:16	141:16	6	==
LEAF_NODE	141:16	141:16	7	==
FIELD	141:19	141:19	6	0
LEAF_NODE	141:19	141:19	7	0
LEAF_NODE	141:20	141:20	4	)
STATEMENTS	142:2	142:2	4	
JUMP_STATEMENT	142:2	142:11	5	return ( 0 ) ;
KEYWORD	142:2	142:2	6	return
LEAF_NODE	142:2	142:2	7	return
DESTINATION	142:8	142:8	6	( 0 )
EXPR	142:8	142:10	7	( 0 )
LEAF_NODE	142:8	142:8	8	(
FIELD	142:9	142:9	8	0
LEAF_NODE	142:9	142:9	9	0
LEAF_NODE	142:10	142:10	8	)
LEAF_NODE	142:11	142:11	6	;
LEAF_NODE	143:1	143:1	3	channel
LEAF_NODE	143:9	143:9	3	=
LEAF_NODE	143:11	143:11	3	(
LEAF_NODE	143:12	143:12	3	unsigned
LEAF_NODE	143:21	143:21	3	short
LEAF_NODE	143:26	143:26	3	)
LEAF_NODE	143:27	143:27	3	fab
LEAF_NODE	143:30	143:30	3	.
SIMPLE_DECL	143:31	143:40	3	fab l_stv ;
VAR_DECL	143:31	143:35	4	fab l_stv
TYPE	143:31	143:31	5	fab
TYPE_NAME	143:31	143:31	6	fab
LEAF_NODE	143:31	143:31	7	fab
NAME	143:35	143:35	5	l_stv
LEAF_NODE	143:35	143:35	6	l_stv
LEAF_NODE	143:40	143:40	4	;
EXPR_STATEMENT	144:1	144:32	3	inadr [ 0 ] = inadr [ 1 ] = ( char * ) 0 ;
EXPR	144:1	144:1	4	inadr [ 0 ] = inadr [ 1 ] = ( char * ) 0
ASSIGN	144:1	144:12	5	inadr [ 0 ] = inadr [ 1 ] = ( char * ) 0
LVAL	144:1	144:1	6	inadr [ 0 ]
FIELD	144:1	144:8	7	inadr [ 0 ]
LEAF_NODE	144:1	144:1	8	inadr
LEAF_NODE	144:6	144:6	8	[
EXPR	144:7	144:7	8	0
FIELD	144:7	144:7	9	0
LEAF_NODE	144:7	144:7	10	0
LEAF_NODE	144:8	144:8	8	]
ASSIGN_OP	144:10	144:10	6	=
LEAF_NODE	144:10	144:10	7	=
RVAL	144:12	144:12	6	inadr [ 1 ] = ( char * ) 0
ASSIGN	144:12	144:23	7	inadr [ 1 ] = ( char * ) 0
LVAL	144:12	144:12	8	inadr [ 1 ]
FIELD	144:12	144:19	9	inadr [ 1 ]
LEAF_NODE	144:12	144:12	10	inadr
LEAF_NODE	144:17	144:17	10	[
EXPR	144:18	144:18	10	1
FIELD	144:18	144:18	11	1
LEAF_NODE	144:18	144:18	12	1
LEAF_NODE	144:19	144:19	10	]
ASSIGN_OP	144:21	144:21	8	=
LEAF_NODE	144:21	144:21	9	=
RVAL	144:23	144:31	8	( char * ) 0
LEAF_NODE	144:23	144:23	9	(
TYPE_NAME	144:24	144:24	9	char
LEAF_NODE	144:24	144:24	10	char
LEAF_NODE	144:29	144:29	9	*
LEAF_NODE	144:30	144:30	9	)
FIELD	144:31	144:31	9	0
LEAF_NODE	144:31	144:31	10	0
LEAF_NODE	144:32	144:32	4	;
EXPR_STATEMENT	149:1	149:25	3	size = _tiffSizeProc ( fd ) ;
EXPR	149:1	149:1	4	size = _tiffSizeProc ( fd )
ASSIGN	149:1	149:8	5	size = _tiffSizeProc ( fd )
LVAL	149:1	149:1	6	size
FIELD	149:1	149:1	7	size
LEAF_NODE	149:1	149:1	8	size
ASSIGN_OP	149:6	149:6	6	=
LEAF_NODE	149:6	149:6	7	=
RVAL	149:8	149:8	6	_tiffSizeProc ( fd )
FUNCTION_CALL	149:8	149:24	7	_tiffSizeProc ( fd )
CALLEE	149:8	149:8	8	_tiffSizeProc
LEAF_NODE	149:8	149:8	9	_tiffSizeProc
LEAF_NODE	149:21	149:21	8	(
ARGUMENT	149:22	149:22	8	fd
FIELD	149:22	149:22	9	fd
LEAF_NODE	149:22	149:22	10	fd
LEAF_NODE	149:24	149:24	8	)
LEAF_NODE	149:25	149:25	4	;
LEAF_NODE	150:1	150:1	3	status
LEAF_NODE	150:8	150:8	3	=
LEAF_NODE	150:10	150:10	3	sys
LEAF_NODE	150:14	150:14	3	crmpsc
LEAF_NODE	150:20	150:20	3	(
LEAF_NODE	150:21	150:21	3	inadr
LEAF_NODE	150:26	150:26	3	,
LEAF_NODE	150:28	150:28	3	retadr
LEAF_NODE	150:34	150:34	3	,
LEAF_NODE	150:36	150:36	3	0
LEAF_NODE	150:37	150:37	3	,
LEAF_NODE	150:39	150:39	3	SEC
LEAF_NODE	150:43	150:43	3	M_EXPREG
LEAF_NODE	150:51	150:51	3	,
LEAF_NODE	150:53	150:53	3	0
LEAF_NODE	150:54	150:54	3	,
LEAF_NODE	150:55	150:55	3	0
LEAF_NODE	150:56	150:56	3	,
LEAF_NODE	150:57	150:57	3	0
LEAF_NODE	150:58	150:58	3	,
LEAF_NODE	150:60	150:60	3	channel
LEAF_NODE	150:67	150:67	3	,
LEAF_NODE	151:2	151:2	3	TIFFhowmany
LEAF_NODE	151:13	151:13	3	(
LEAF_NODE	151:14	151:14	3	size
LEAF_NODE	151:18	151:18	3	,
LEAF_NODE	151:19	151:19	3	512
LEAF_NODE	151:22	151:22	3	)
LEAF_NODE	151:23	151:23	3	,
LEAF_NODE	151:25	151:25	3	0
LEAF_NODE	151:26	151:26	3	,
LEAF_NODE	151:27	151:27	3	0
LEAF_NODE	151:28	151:28	3	,
LEAF_NODE	151:29	151:29	3	0
LEAF_NODE	151:30	151:30	3	)
LEAF_NODE	151:31	151:31	3	;
LEAF_NODE	151:34	151:34	3	ddd
SELECTION	152:1	152:21	3	
KEYWORD	152:1	152:1	4	if
LEAF_NODE	152:1	152:1	5	if
LEAF_NODE	152:4	152:4	4	(
CONDITION	152:5	152:5	4	( status & 1 ) == 0
EXPR	152:5	152:19	5	( status & 1 ) == 0
LEAF_NODE	152:5	152:5	6	(
FIELD	152:6	152:6	6	status
LEAF_NODE	152:6	152:6	7	status
LEAF_NODE	152:12	152:12	6	&
FIELD	152:13	152:13	6	1
LEAF_NODE	152:13	152:13	7	1
LEAF_NODE	152:14	152:14	6	)
EQ_OPERATOR	152:16	152:16	6	==
LEAF_NODE	152:16	152:16	7	==
FIELD	152:19	152:19	6	0
LEAF_NODE	152:19	152:19	7	0
LEAF_NODE	152:20	152:20	4	)
STATEMENTS	152:21	155:1	4	
LEAF_NODE	152:21	152:21	5	{
STATEMENTS	153:2	154:2	5	
SIMPLE_DECL	153:2	153:21	6	sys dassgn ; dassgn dassgn ( channel ) ;
VAR_DECL	153:2	153:6	7	sys dassgn ; dassgn dassgn ( channel )
TYPE	153:2	153:2	8	sys
TYPE_NAME	153:2	153:2	9	sys
LEAF_NODE	153:2	153:2	10	sys
NAME	153:6	153:6	8	dassgn
LEAF_NODE	153:6	153:6	9	dassgn
LEAF_NODE	0:0	0:0	8	;
INIT	153:6	153:6	8	dassgn dassgn ( channel )
ASSIGN	153:6	153:12	9	dassgn dassgn ( channel )
LVAL	153:6	153:6	10	dassgn
NAME	153:6	153:6	11	dassgn
LEAF_NODE	153:6	153:6	12	dassgn
ASSIGN_OP	153:6	153:6	10	dassgn
NAME	153:6	153:6	11	dassgn
LEAF_NODE	153:6	153:6	12	dassgn
RVAL	153:12	153:20	10	( channel )
LEAF_NODE	153:12	153:12	11	(
EXPR	153:13	153:13	11	channel
FIELD	153:13	153:13	12	channel
LEAF_NODE	153:13	153:13	13	channel
LEAF_NODE	153:20	153:20	11	)
LEAF_NODE	153:21	153:21	7	;
JUMP_STATEMENT	154:2	154:11	6	return ( 0 ) ;
KEYWORD	154:2	154:2	7	return
LEAF_NODE	154:2	154:2	8	return
DESTINATION	154:8	154:8	7	( 0 )
EXPR	154:8	154:10	8	( 0 )
LEAF_NODE	154:8	154:8	9	(
FIELD	154:9	154:9	9	0
LEAF_NODE	154:9	154:9	10	0
LEAF_NODE	154:10	154:10	9	)
LEAF_NODE	154:11	154:11	7	;
LEAF_NODE	155:1	155:1	5	}
EXPR_STATEMENT	156:1	156:29	3	* pbase = ( tdata_t ) retadr [ 0 ] ;
EXPR	156:1	156:1	4	* pbase = ( tdata_t ) retadr [ 0 ]
ASSIGN	156:1	156:10	5	* pbase = ( tdata_t ) retadr [ 0 ]
LVAL	156:1	156:1	6	* pbase
UNARY_EXPR	156:1	156:2	7	* pbase
UNARY_OPERATOR	156:1	156:1	8	*
LEAF_NODE	156:1	156:1	9	*
FIELD	156:2	156:2	8	pbase
LEAF_NODE	156:2	156:2	9	pbase
ASSIGN_OP	156:8	156:8	6	=
LEAF_NODE	156:8	156:8	7	=
RVAL	156:10	156:20	6	( tdata_t ) retadr [ 0 ]
LEAF_NODE	156:10	156:10	7	(
TYPE_NAME	156:11	156:11	7	tdata_t
LEAF_NODE	156:11	156:11	8	tdata_t
LEAF_NODE	156:18	156:18	7	)
FIELD	156:20	156:28	7	retadr [ 0 ]
LEAF_NODE	156:20	156:20	8	retadr
LEAF_NODE	156:26	156:26	8	[
EXPR	156:27	156:27	8	0
FIELD	156:27	156:27	9	0
LEAF_NODE	156:27	156:27	10	0
LEAF_NODE	156:28	156:28	8	]
LEAF_NODE	156:29	156:29	4	;
EXPR_STATEMENT	161:1	161:23	3	* psize = ( toff_t ) size ;
EXPR	161:1	161:1	4	* psize = ( toff_t ) size
ASSIGN	161:1	161:10	5	* psize = ( toff_t ) size
LVAL	161:1	161:1	6	* psize
UNARY_EXPR	161:1	161:2	7	* psize
UNARY_OPERATOR	161:1	161:1	8	*
LEAF_NODE	161:1	161:1	9	*
FIELD	161:2	161:2	8	psize
LEAF_NODE	161:2	161:2	9	psize
ASSIGN_OP	161:8	161:8	6	=
LEAF_NODE	161:8	161:8	7	=
RVAL	161:10	161:19	6	( toff_t ) size
LEAF_NODE	161:10	161:10	7	(
TYPE_NAME	161:11	161:11	7	toff_t
LEAF_NODE	161:11	161:11	8	toff_t
LEAF_NODE	161:17	161:17	7	)
FIELD	161:19	161:19	7	size
LEAF_NODE	161:19	161:19	8	size
LEAF_NODE	161:23	161:23	4	;
EXPR_STATEMENT	163:1	163:38	3	map_table [ no_mapped ] . base = retadr [ 0 ] ;
EXPR	163:1	163:1	4	map_table [ no_mapped ] . base = retadr [ 0 ]
ASSIGN	163:1	163:29	5	map_table [ no_mapped ] . base = retadr [ 0 ]
LVAL	163:1	163:1	6	map_table [ no_mapped ] . base
FIELD	163:1	163:22	7	map_table [ no_mapped ] . base
LEAF_NODE	163:1	163:1	8	map_table
LEAF_NODE	163:10	163:10	8	[
EXPR	163:11	163:11	8	no_mapped
FIELD	163:11	163:11	9	no_mapped
LEAF_NODE	163:11	163:11	10	no_mapped
LEAF_NODE	163:20	163:20	8	]
LEAF_NODE	163:21	163:21	8	.
LEAF_NODE	163:22	163:22	8	base
ASSIGN_OP	163:27	163:27	6	=
LEAF_NODE	163:27	163:27	7	=
RVAL	163:29	163:29	6	retadr [ 0 ]
FIELD	163:29	163:37	7	retadr [ 0 ]
LEAF_NODE	163:29	163:29	8	retadr
LEAF_NODE	163:35	163:35	8	[
EXPR	163:36	163:36	8	0
FIELD	163:36	163:36	9	0
LEAF_NODE	163:36	163:36	10	0
LEAF_NODE	163:37	163:37	8	]
LEAF_NODE	163:38	163:38	4	;
EXPR_STATEMENT	164:1	164:37	3	map_table [ no_mapped ] . top = retadr [ 1 ] ;
EXPR	164:1	164:1	4	map_table [ no_mapped ] . top = retadr [ 1 ]
ASSIGN	164:1	164:28	5	map_table [ no_mapped ] . top = retadr [ 1 ]
LVAL	164:1	164:1	6	map_table [ no_mapped ] . top
FIELD	164:1	164:22	7	map_table [ no_mapped ] . top
LEAF_NODE	164:1	164:1	8	map_table
LEAF_NODE	164:10	164:10	8	[
EXPR	164:11	164:11	8	no_mapped
FIELD	164:11	164:11	9	no_mapped
LEAF_NODE	164:11	164:11	10	no_mapped
LEAF_NODE	164:20	164:20	8	]
LEAF_NODE	164:21	164:21	8	.
LEAF_NODE	164:22	164:22	8	top
ASSIGN_OP	164:26	164:26	6	=
LEAF_NODE	164:26	164:26	7	=
RVAL	164:28	164:28	6	retadr [ 1 ]
FIELD	164:28	164:36	7	retadr [ 1 ]
LEAF_NODE	164:28	164:28	8	retadr
LEAF_NODE	164:34	164:34	8	[
EXPR	164:35	164:35	8	1
FIELD	164:35	164:35	9	1
LEAF_NODE	164:35	164:35	10	1
LEAF_NODE	164:36	164:36	8	]
LEAF_NODE	164:37	164:37	4	;
EXPR_STATEMENT	165:1	165:39	3	map_table [ no_mapped ] . channel = channel ;
EXPR	165:1	165:1	4	map_table [ no_mapped ] . channel = channel
ASSIGN	165:1	165:32	5	map_table [ no_mapped ] . channel = channel
LVAL	165:1	165:1	6	map_table [ no_mapped ] . channel
FIELD	165:1	165:22	7	map_table [ no_mapped ] . channel
LEAF_NODE	165:1	165:1	8	map_table
LEAF_NODE	165:10	165:10	8	[
EXPR	165:11	165:11	8	no_mapped
FIELD	165:11	165:11	9	no_mapped
LEAF_NODE	165:11	165:11	10	no_mapped
LEAF_NODE	165:20	165:20	8	]
LEAF_NODE	165:21	165:21	8	.
LEAF_NODE	165:22	165:22	8	channel
ASSIGN_OP	165:30	165:30	6	=
LEAF_NODE	165:30	165:30	7	=
RVAL	165:32	165:32	6	channel
FIELD	165:32	165:32	7	channel
LEAF_NODE	165:32	165:32	8	channel
LEAF_NODE	165:39	165:39	4	;
EXPR_STATEMENT	166:1	166:12	3	no_mapped ++ ;
EXPR	166:1	166:1	4	no_mapped ++
FIELD	166:1	166:10	5	no_mapped ++
LEAF_NODE	166:1	166:1	6	no_mapped
LEAF_NODE	166:10	166:10	6	++
LEAF_NODE	166:12	166:12	4	;
JUMP_STATEMENT	168:8	168:17	3	return ( 1 ) ;
KEYWORD	168:8	168:8	4	return
LEAF_NODE	168:8	168:8	5	return
DESTINATION	168:14	168:14	4	( 1 )
EXPR	168:14	168:16	5	( 1 )
LEAF_NODE	168:14	168:14	6	(
FIELD	168:15	168:15	6	1
LEAF_NODE	168:15	168:15	7	1
LEAF_NODE	168:16	168:16	6	)
LEAF_NODE	168:17	168:17	4	;
LEAF_NODE	169:0	169:0	2	}
FUNCTION_DEF	176:0	197:0	1	
RETURN_TYPE	176:0	176:7	2	static void
LEAF_NODE	176:0	176:0	3	static
TYPE_NAME	176:7	176:7	3	void
LEAF_NODE	176:7	176:7	4	void
FUNCTION_NAME	177:0	177:0	2	_tiffUnmapProc
LEAF_NODE	177:0	177:0	3	_tiffUnmapProc
PARAMETER_LIST	177:14	177:54	2	( thandle_t fd , tdata_t base , toff_t size )
LEAF_NODE	177:14	177:14	3	(
PARAMETER_DECL	177:15	177:25	3	thandle_t fd
TYPE	177:15	177:15	4	thandle_t
TYPE_NAME	177:15	177:15	5	thandle_t
LEAF_NODE	177:15	177:15	6	thandle_t
NAME	177:25	177:25	4	fd
LEAF_NODE	177:25	177:25	5	fd
LEAF_NODE	177:27	177:27	3	,
PARAMETER_DECL	177:29	177:37	3	tdata_t base
TYPE	177:29	177:29	4	tdata_t
TYPE_NAME	177:29	177:29	5	tdata_t
LEAF_NODE	177:29	177:29	6	tdata_t
NAME	177:37	177:37	4	base
LEAF_NODE	177:37	177:37	5	base
LEAF_NODE	177:41	177:41	3	,
PARAMETER_DECL	177:43	177:50	3	toff_t size
TYPE	177:43	177:43	4	toff_t
TYPE_NAME	177:43	177:43	5	toff_t
LEAF_NODE	177:43	177:43	6	toff_t
NAME	177:50	177:50	4	size
LEAF_NODE	177:50	177:50	5	size
LEAF_NODE	177:54	177:54	3	)
LEAF_NODE	178:0	178:0	2	{
STATEMENTS	179:1	183:1	2	
SIMPLE_DECL	179:1	179:15	3	char * [ 2 ] inadr ;
VAR_DECL	179:1	179:7	4	char * [ 2 ] inadr
TYPE	179:1	179:12	5	char * [ 2 ]
TYPE_NAME	179:1	179:1	6	char
LEAF_NODE	179:1	179:1	7	char
POINTER	179:6	179:6	6	*
LEAF_NODE	179:6	179:6	7	*
TYPE_SUFFIX	179:12	179:14	6	[ 2 ]
LEAF_NODE	179:12	179:12	7	[
FIELD	179:13	179:13	7	2
LEAF_NODE	179:13	179:13	8	2
LEAF_NODE	179:14	179:14	7	]
NAME	179:7	179:7	5	inadr
LEAF_NODE	179:7	179:7	6	inadr
LEAF_NODE	179:15	179:15	4	;
SIMPLE_DECL	180:1	180:9	3	int i , int j ;
INIT_DECL_LIST	180:1	180:1	4	int i , int j
VAR_DECL	180:1	180:5	5	int i
TYPE	180:1	180:1	6	int
TYPE_NAME	180:1	180:1	7	int
LEAF_NODE	180:1	180:1	8	int
NAME	180:5	180:5	6	i
LEAF_NODE	180:5	180:5	7	i
LEAF_NODE	180:6	180:6	5	,
VAR_DECL	180:1	180:8	5	int j
TYPE	180:1	180:1	6	int
TYPE_NAME	180:1	180:1	7	int
LEAF_NODE	180:1	180:1	8	int
NAME	180:8	180:8	6	j
LEAF_NODE	180:8	180:8	7	j
LEAF_NODE	180:9	180:9	4	;
ITERATION	183:1	183:32	3	
KEYWORD	183:1	183:1	4	for
LEAF_NODE	183:1	183:1	5	for
LEAF_NODE	183:5	183:5	4	(
FOR_INIT	183:6	183:11	4	i = 0 ;
EXPR	183:6	183:6	5	i = 0
ASSIGN	183:6	183:10	6	i = 0
LVAL	183:6	183:6	7	i
FIELD	183:6	183:6	8	i
LEAF_NODE	183:6	183:6	9	i
ASSIGN_OP	183:8	183:8	7	=
LEAF_NODE	183:8	183:8	8	=
RVAL	183:10	183:10	7	0
FIELD	183:10	183:10	8	0
LEAF_NODE	183:10	183:10	9	0
LEAF_NODE	183:11	183:11	5	;
CONDITION	183:12	183:12	4	i < no_mapped
EXPR	183:12	183:16	5	i < no_mapped
FIELD	183:12	183:12	6	i
LEAF_NODE	183:12	183:12	7	i
REL_OPERATOR	183:14	183:14	6	<
LEAF_NODE	183:14	183:14	7	<
FIELD	183:16	183:16	6	no_mapped
LEAF_NODE	183:16	183:16	7	no_mapped
LEAF_NODE	183:25	183:25	4	;
FOR_EXPR	183:27	183:27	4	i ++
EXPR	183:27	183:27	5	i ++
FIELD	183:27	183:28	6	i ++
LEAF_NODE	183:27	183:27	7	i
LEAF_NODE	183:28	183:28	7	++
LEAF_NODE	183:30	183:30	4	)
STATEMENTS	183:32	196:1	4	
LEAF_NODE	183:32	183:32	5	{
STATEMENTS	184:2	184:2	5	
SELECTION	184:2	184:42	6	
KEYWORD	184:2	184:2	7	if
LEAF_NODE	184:2	184:2	8	if
LEAF_NODE	184:5	184:5	7	(
CONDITION	184:6	184:6	7	map_table [ i ] . base == ( char * ) base
EXPR	184:6	184:36	8	map_table [ i ] . base == ( char * ) base
FIELD	184:6	184:19	9	map_table [ i ] . base
LEAF_NODE	184:6	184:6	10	map_table
LEAF_NODE	184:15	184:15	10	[
EXPR	184:16	184:16	10	i
FIELD	184:16	184:16	11	i
LEAF_NODE	184:16	184:16	12	i
LEAF_NODE	184:17	184:17	10	]
LEAF_NODE	184:18	184:18	10	.
LEAF_NODE	184:19	184:19	10	base
EQ_OPERATOR	184:24	184:24	9	==
LEAF_NODE	184:24	184:24	10	==
LEAF_NODE	184:27	184:27	9	(
TYPE_NAME	184:28	184:28	9	char
LEAF_NODE	184:28	184:28	10	char
LEAF_NODE	184:33	184:33	9	*
LEAF_NODE	184:34	184:34	9	)
FIELD	184:36	184:36	9	base
LEAF_NODE	184:36	184:36	10	base
LEAF_NODE	184:40	184:40	7	)
STATEMENTS	184:42	195:2	7	
LEAF_NODE	184:42	184:42	8	{
STATEMENTS	186:3	194:3	8	
EXPR_STATEMENT	186:3	186:27	9	inadr [ 0 ] = ( char * ) base ;
EXPR	186:3	186:3	10	inadr [ 0 ] = ( char * ) base
ASSIGN	186:3	186:14	11	inadr [ 0 ] = ( char * ) base
LVAL	186:3	186:3	12	inadr [ 0 ]
FIELD	186:3	186:10	13	inadr [ 0 ]
LEAF_NODE	186:3	186:3	14	inadr
LEAF_NODE	186:8	186:8	14	[
EXPR	186:9	186:9	14	0
FIELD	186:9	186:9	15	0
LEAF_NODE	186:9	186:9	16	0
LEAF_NODE	186:10	186:10	14	]
ASSIGN_OP	186:12	186:12	12	=
LEAF_NODE	186:12	186:12	13	=
RVAL	186:14	186:23	12	( char * ) base
LEAF_NODE	186:14	186:14	13	(
TYPE_NAME	186:15	186:15	13	char
LEAF_NODE	186:15	186:15	14	char
LEAF_NODE	186:20	186:20	13	*
LEAF_NODE	186:21	186:21	13	)
FIELD	186:23	186:23	13	base
LEAF_NODE	186:23	186:23	14	base
LEAF_NODE	186:27	186:27	10	;
EXPR_STATEMENT	187:3	187:30	9	inadr [ 1 ] = map_table [ i ] . top ;
EXPR	187:3	187:3	10	inadr [ 1 ] = map_table [ i ] . top
ASSIGN	187:3	187:14	11	inadr [ 1 ] = map_table [ i ] . top
LVAL	187:3	187:3	12	inadr [ 1 ]
FIELD	187:3	187:10	13	inadr [ 1 ]
LEAF_NODE	187:3	187:3	14	inadr
LEAF_NODE	187:8	187:8	14	[
EXPR	187:9	187:9	14	1
FIELD	187:9	187:9	15	1
LEAF_NODE	187:9	187:9	16	1
LEAF_NODE	187:10	187:10	14	]
ASSIGN_OP	187:12	187:12	12	=
LEAF_NODE	187:12	187:12	13	=
RVAL	187:14	187:14	12	map_table [ i ] . top
FIELD	187:14	187:27	13	map_table [ i ] . top
LEAF_NODE	187:14	187:14	14	map_table
LEAF_NODE	187:23	187:23	14	[
EXPR	187:24	187:24	14	i
FIELD	187:24	187:24	15	i
LEAF_NODE	187:24	187:24	16	i
LEAF_NODE	187:25	187:25	14	]
LEAF_NODE	187:26	187:26	14	.
LEAF_NODE	187:27	187:27	14	top
LEAF_NODE	187:30	187:30	10	;
LEAF_NODE	188:3	188:3	9	sys
EXPR_STATEMENT	188:7	188:26	9	deltva ( inadr , 0 , 0 ) ;
EXPR	188:7	188:7	10	deltva ( inadr , 0 , 0 )
FUNCTION_CALL	188:7	188:25	11	deltva ( inadr , 0 , 0 )
CALLEE	188:7	188:7	12	deltva
LEAF_NODE	188:7	188:7	13	deltva
LEAF_NODE	188:13	188:13	12	(
ARGUMENT	188:14	188:14	12	inadr
FIELD	188:14	188:14	13	inadr
LEAF_NODE	188:14	188:14	14	inadr
LEAF_NODE	188:19	188:19	12	,
ARGUMENT	188:21	188:21	12	0
FIELD	188:21	188:21	13	0
LEAF_NODE	188:21	188:21	14	0
LEAF_NODE	188:22	188:22	12	,
ARGUMENT	188:24	188:24	12	0
FIELD	188:24	188:24	13	0
LEAF_NODE	188:24	188:24	14	0
LEAF_NODE	188:25	188:25	12	)
LEAF_NODE	188:26	188:26	10	;
SIMPLE_DECL	189:3	189:35	9	sys dassgn ; dassgn dassgn ( map_table [ i ] . channel ) ;
VAR_DECL	189:3	189:7	10	sys dassgn ; dassgn dassgn ( map_table [ i ] . channel )
TYPE	189:3	189:3	11	sys
TYPE_NAME	189:3	189:3	12	sys
LEAF_NODE	189:3	189:3	13	sys
NAME	189:7	189:7	11	dassgn
LEAF_NODE	189:7	189:7	12	dassgn
LEAF_NODE	0:0	0:0	11	;
INIT	189:7	189:7	11	dassgn dassgn ( map_table [ i ] . channel )
ASSIGN	189:7	189:13	12	dassgn dassgn ( map_table [ i ] . channel )
LVAL	189:7	189:7	13	dassgn
NAME	189:7	189:7	14	dassgn
LEAF_NODE	189:7	189:7	15	dassgn
ASSIGN_OP	189:7	189:7	13	dassgn
NAME	189:7	189:7	14	dassgn
LEAF_NODE	189:7	189:7	15	dassgn
RVAL	189:13	189:34	13	( map_table [ i ] . channel )
LEAF_NODE	189:13	189:13	14	(
EXPR	189:14	189:14	14	map_table [ i ] . channel
FIELD	189:14	189:27	15	map_table [ i ] . channel
LEAF_NODE	189:14	189:14	16	map_table
LEAF_NODE	189:23	189:23	16	[
EXPR	189:24	189:24	16	i
FIELD	189:24	189:24	17	i
LEAF_NODE	189:24	189:24	18	i
LEAF_NODE	189:25	189:25	16	]
LEAF_NODE	189:26	189:26	16	.
LEAF_NODE	189:27	189:27	16	channel
LEAF_NODE	189:34	189:34	14	)
LEAF_NODE	189:35	189:35	10	;
ITERATION	191:3	192:4	9	
KEYWORD	191:3	191:3	10	for
LEAF_NODE	191:3	191:3	11	for
LEAF_NODE	191:7	191:7	10	(
FOR_INIT	191:8	191:15	10	j = i + 1 ;
EXPR	191:8	191:8	11	j = i + 1
ASSIGN	191:8	191:12	12	j = i + 1
LVAL	191:8	191:8	13	j
FIELD	191:8	191:8	14	j
LEAF_NODE	191:8	191:8	15	j
ASSIGN_OP	191:10	191:10	13	=
LEAF_NODE	191:10	191:10	14	=
RVAL	191:12	191:14	13	i + 1
FIELD	191:12	191:12	14	i
LEAF_NODE	191:12	191:12	15	i
LEAF_NODE	191:13	191:13	14	+
FIELD	191:14	191:14	14	1
LEAF_NODE	191:14	191:14	15	1
LEAF_NODE	191:15	191:15	11	;
CONDITION	191:17	191:17	10	j < no_mapped
EXPR	191:17	191:21	11	j < no_mapped
FIELD	191:17	191:17	12	j
LEAF_NODE	191:17	191:17	13	j
REL_OPERATOR	191:19	191:19	12	<
LEAF_NODE	191:19	191:19	13	<
FIELD	191:21	191:21	12	no_mapped
LEAF_NODE	191:21	191:21	13	no_mapped
LEAF_NODE	191:30	191:30	10	;
FOR_EXPR	191:32	191:32	10	j ++
EXPR	191:32	191:32	11	j ++
FIELD	191:32	191:33	12	j ++
LEAF_NODE	191:32	191:32	13	j
LEAF_NODE	191:33	191:33	13	++
LEAF_NODE	191:35	191:35	10	)
STATEMENTS	192:4	192:4	10	
EXPR_STATEMENT	192:4	192:33	11	map_table [ j - 1 ] = map_table [ j ] ;
EXPR	192:4	192:4	12	map_table [ j - 1 ] = map_table [ j ]
ASSIGN	192:4	192:21	13	map_table [ j - 1 ] = map_table [ j ]
LVAL	192:4	192:4	14	map_table [ j - 1 ]
FIELD	192:4	192:17	15	map_table [ j - 1 ]
LEAF_NODE	192:4	192:4	16	map_table
LEAF_NODE	192:13	192:13	16	[
EXPR	192:14	192:16	16	j - 1
FIELD	192:14	192:14	17	j
LEAF_NODE	192:14	192:14	18	j
LEAF_NODE	192:15	192:15	17	-
FIELD	192:16	192:16	17	1
LEAF_NODE	192:16	192:16	18	1
LEAF_NODE	192:17	192:17	16	]
ASSIGN_OP	192:19	192:19	14	=
LEAF_NODE	192:19	192:19	15	=
RVAL	192:21	192:21	14	map_table [ j ]
FIELD	192:21	192:32	15	map_table [ j ]
LEAF_NODE	192:21	192:21	16	map_table
LEAF_NODE	192:30	192:30	16	[
EXPR	192:31	192:31	16	j
FIELD	192:31	192:31	17	j
LEAF_NODE	192:31	192:31	18	j
LEAF_NODE	192:32	192:32	16	]
LEAF_NODE	192:33	192:33	12	;
EXPR_STATEMENT	193:3	193:14	9	no_mapped -- ;
EXPR	193:3	193:3	10	no_mapped --
FIELD	193:3	193:12	11	no_mapped --
LEAF_NODE	193:3	193:3	12	no_mapped
LEAF_NODE	193:12	193:12	12	--
LEAF_NODE	193:14	193:14	10	;
JUMP_STATEMENT	194:3	194:9	9	return DESTINATION ;
KEYWORD	194:3	194:3	10	return
LEAF_NODE	194:3	194:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	194:9	194:9	10	;
LEAF_NODE	195:2	195:2	8	}
LEAF_NODE	196:1	196:1	5	}
LEAF_NODE	197:0	197:0	2	}
FUNCTION_DEF	199:0	203:0	1	
RETURN_TYPE	199:0	199:7	2	static int
LEAF_NODE	199:0	199:0	3	static
TYPE_NAME	199:7	199:7	3	int
LEAF_NODE	199:7	199:7	4	int
FUNCTION_NAME	200:0	200:0	2	_tiffMapProc
LEAF_NODE	200:0	200:0	3	_tiffMapProc
PARAMETER_LIST	200:12	200:56	2	( thandle_t fd , tdata_t * pbase , toff_t * psize )
LEAF_NODE	200:12	200:12	3	(
PARAMETER_DECL	200:13	200:23	3	thandle_t fd
TYPE	200:13	200:13	4	thandle_t
TYPE_NAME	200:13	200:13	5	thandle_t
LEAF_NODE	200:13	200:13	6	thandle_t
NAME	200:23	200:23	4	fd
LEAF_NODE	200:23	200:23	5	fd
LEAF_NODE	200:25	200:25	3	,
PARAMETER_DECL	200:27	200:36	3	tdata_t * pbase
TYPE	200:27	200:34	4	tdata_t *
TYPE_NAME	200:27	200:27	5	tdata_t
LEAF_NODE	200:27	200:27	6	tdata_t
POINTER	200:34	200:34	5	*
LEAF_NODE	200:34	200:34	6	*
NAME	200:36	200:36	4	pbase
LEAF_NODE	200:36	200:36	5	pbase
LEAF_NODE	200:41	200:41	3	,
PARAMETER_DECL	200:43	200:51	3	toff_t * psize
TYPE	200:43	200:49	4	toff_t *
TYPE_NAME	200:43	200:43	5	toff_t
LEAF_NODE	200:43	200:43	6	toff_t
POINTER	200:49	200:49	5	*
LEAF_NODE	200:49	200:49	6	*
NAME	200:51	200:51	4	psize
LEAF_NODE	200:51	200:51	5	psize
LEAF_NODE	200:56	200:56	3	)
LEAF_NODE	201:0	201:0	2	{
STATEMENTS	202:1	202:1	2	
JUMP_STATEMENT	202:1	202:11	3	return ( 0 ) ;
KEYWORD	202:1	202:1	4	return
LEAF_NODE	202:1	202:1	5	return
DESTINATION	202:8	202:8	4	( 0 )
EXPR	202:8	202:10	5	( 0 )
LEAF_NODE	202:8	202:8	6	(
FIELD	202:9	202:9	6	0
LEAF_NODE	202:9	202:9	7	0
LEAF_NODE	202:10	202:10	6	)
LEAF_NODE	202:11	202:11	4	;
LEAF_NODE	203:0	203:0	2	}
FUNCTION_DEF	205:0	208:0	1	
RETURN_TYPE	205:0	205:7	2	static void
LEAF_NODE	205:0	205:0	3	static
TYPE_NAME	205:7	205:7	3	void
LEAF_NODE	205:7	205:7	4	void
FUNCTION_NAME	206:0	206:0	2	_tiffUnmapProc
LEAF_NODE	206:0	206:0	3	_tiffUnmapProc
PARAMETER_LIST	206:14	206:54	2	( thandle_t fd , tdata_t base , toff_t size )
LEAF_NODE	206:14	206:14	3	(
PARAMETER_DECL	206:15	206:25	3	thandle_t fd
TYPE	206:15	206:15	4	thandle_t
TYPE_NAME	206:15	206:15	5	thandle_t
LEAF_NODE	206:15	206:15	6	thandle_t
NAME	206:25	206:25	4	fd
LEAF_NODE	206:25	206:25	5	fd
LEAF_NODE	206:27	206:27	3	,
PARAMETER_DECL	206:29	206:37	3	tdata_t base
TYPE	206:29	206:29	4	tdata_t
TYPE_NAME	206:29	206:29	5	tdata_t
LEAF_NODE	206:29	206:29	6	tdata_t
NAME	206:37	206:37	4	base
LEAF_NODE	206:37	206:37	5	base
LEAF_NODE	206:41	206:41	3	,
PARAMETER_DECL	206:43	206:50	3	toff_t size
TYPE	206:43	206:43	4	toff_t
TYPE_NAME	206:43	206:43	5	toff_t
LEAF_NODE	206:43	206:43	6	toff_t
NAME	206:50	206:50	4	size
LEAF_NODE	206:50	206:50	5	size
LEAF_NODE	206:54	206:54	3	)
LEAF_NODE	207:0	207:0	2	{
LEAF_NODE	0:0	0:0	2	STATEMENTS
LEAF_NODE	208:0	208:0	2	}
FUNCTION_DEF	214:0	226:0	1	
RETURN_TYPE	214:0	214:4	2	TIFF *
TYPE_NAME	214:0	214:0	3	TIFF
LEAF_NODE	214:0	214:0	4	TIFF
LEAF_NODE	214:4	214:4	3	*
FUNCTION_NAME	215:0	215:0	2	TIFFFdOpen
LEAF_NODE	215:0	215:0	3	TIFFFdOpen
PARAMETER_LIST	215:10	215:53	2	( int fd , const char * name , const char * mode )
LEAF_NODE	215:10	215:10	3	(
PARAMETER_DECL	215:11	215:15	3	int fd
TYPE	215:11	215:11	4	int
TYPE_NAME	215:11	215:11	5	int
LEAF_NODE	215:11	215:11	6	int
NAME	215:15	215:15	4	fd
LEAF_NODE	215:15	215:15	5	fd
LEAF_NODE	215:17	215:17	3	,
PARAMETER_DECL	215:19	215:31	3	const char * name
TYPE	215:19	215:29	4	const char *
TYPE_NAME	215:19	215:25	5	const char
LEAF_NODE	215:19	215:19	6	const
LEAF_NODE	215:25	215:25	6	char
POINTER	215:29	215:29	5	*
LEAF_NODE	215:29	215:29	6	*
NAME	215:31	215:31	4	name
LEAF_NODE	215:31	215:31	5	name
LEAF_NODE	215:35	215:35	3	,
PARAMETER_DECL	215:37	215:49	3	const char * mode
TYPE	215:37	215:47	4	const char *
TYPE_NAME	215:37	215:43	5	const char
LEAF_NODE	215:37	215:37	6	const
LEAF_NODE	215:43	215:43	6	char
POINTER	215:47	215:47	5	*
LEAF_NODE	215:47	215:47	6	*
NAME	215:49	215:49	4	mode
LEAF_NODE	215:49	215:49	5	mode
LEAF_NODE	215:53	215:53	3	)
LEAF_NODE	216:0	216:0	2	{
STATEMENTS	217:1	225:13	2	
SIMPLE_DECL	217:1	217:10	3	TIFF * tif ;
VAR_DECL	217:1	217:7	4	TIFF * tif
TYPE	217:1	217:5	5	TIFF *
TYPE_NAME	217:1	217:1	6	TIFF
LEAF_NODE	217:1	217:1	7	TIFF
POINTER	217:5	217:5	6	*
LEAF_NODE	217:5	217:5	7	*
NAME	217:7	217:7	5	tif
LEAF_NODE	217:7	217:7	6	tif
LEAF_NODE	217:10	217:10	4	;
LEAF_NODE	219:1	219:1	3	tif
LEAF_NODE	219:5	219:5	3	=
LEAF_NODE	219:7	219:7	3	TIFFClientOpen
LEAF_NODE	219:21	219:21	3	(
LEAF_NODE	219:22	219:22	3	name
LEAF_NODE	219:26	219:26	3	,
LEAF_NODE	219:28	219:28	3	mode
LEAF_NODE	219:32	219:32	3	,
LEAF_NODE	219:35	219:35	3	ddd
LEAF_NODE	220:5	220:5	3	(
LEAF_NODE	220:6	220:6	3	thandle_t
LEAF_NODE	220:15	220:15	3	)
LEAF_NODE	220:17	220:17	3	fd
LEAF_NODE	220:19	220:19	3	,
LEAF_NODE	221:5	221:5	3	_tiffReadProc
LEAF_NODE	221:18	221:18	3	,
LEAF_NODE	221:20	221:20	3	_tiffWriteProc
LEAF_NODE	221:34	221:34	3	,
LEAF_NODE	221:36	221:36	3	_tiffSeekProc
LEAF_NODE	221:49	221:49	3	,
LEAF_NODE	221:51	221:51	3	_tiffCloseProc
LEAF_NODE	221:65	221:65	3	,
LEAF_NODE	222:5	222:5	3	_tiffSizeProc
LEAF_NODE	222:18	222:18	3	,
LEAF_NODE	222:20	222:20	3	_tiffMapProc
LEAF_NODE	222:32	222:32	3	,
LEAF_NODE	222:34	222:34	3	_tiffUnmapProc
LEAF_NODE	222:48	222:48	3	)
LEAF_NODE	222:49	222:49	3	;
SELECTION	223:1	224:2	3	
KEYWORD	223:1	223:1	4	if
LEAF_NODE	223:1	223:1	5	if
LEAF_NODE	223:4	223:4	4	(
CONDITION	223:5	223:5	4	tif
EXPR	223:5	223:5	5	tif
FIELD	223:5	223:5	6	tif
LEAF_NODE	223:5	223:5	7	tif
LEAF_NODE	223:8	223:8	4	)
STATEMENTS	224:2	224:2	4	
EXPR_STATEMENT	224:2	224:18	5	tif -> tif_fd = fd ;
EXPR	224:2	224:2	6	tif -> tif_fd = fd
ASSIGN	224:2	224:16	7	tif -> tif_fd = fd
LVAL	224:2	224:2	8	tif -> tif_fd
FIELD	224:2	224:7	9	tif -> tif_fd
LEAF_NODE	224:2	224:2	10	tif
LEAF_NODE	224:5	224:5	10	->
LEAF_NODE	224:7	224:7	10	tif_fd
ASSIGN_OP	224:14	224:14	8	=
LEAF_NODE	224:14	224:14	9	=
RVAL	224:16	224:16	8	fd
FIELD	224:16	224:16	9	fd
LEAF_NODE	224:16	224:16	10	fd
LEAF_NODE	224:18	224:18	6	;
LEAF_NODE	225:1	225:1	3	return
LEAF_NODE	225:8	225:8	3	(
LEAF_NODE	225:9	225:9	3	tif
LEAF_NODE	225:12	225:12	3	)
LEAF_NODE	225:13	225:13	3	;
LEAF_NODE	226:0	226:0	2	}
FUNCTION_DEF	231:0	260:0	1	
RETURN_TYPE	231:0	231:4	2	TIFF *
TYPE_NAME	231:0	231:0	3	TIFF
LEAF_NODE	231:0	231:0	4	TIFF
LEAF_NODE	231:4	231:4	3	*
FUNCTION_NAME	232:0	232:0	2	TIFFOpen
LEAF_NODE	232:0	232:0	3	TIFFOpen
PARAMETER_LIST	232:8	232:43	2	( const char * name , const char * mode )
LEAF_NODE	232:8	232:8	3	(
PARAMETER_DECL	232:9	232:21	3	const char * name
TYPE	232:9	232:19	4	const char *
TYPE_NAME	232:9	232:15	5	const char
LEAF_NODE	232:9	232:9	6	const
LEAF_NODE	232:15	232:15	6	char
POINTER	232:19	232:19	5	*
LEAF_NODE	232:19	232:19	6	*
NAME	232:21	232:21	4	name
LEAF_NODE	232:21	232:21	5	name
LEAF_NODE	232:25	232:25	3	,
PARAMETER_DECL	232:27	232:39	3	const char * mode
TYPE	232:27	232:37	4	const char *
TYPE_NAME	232:27	232:33	5	const char
LEAF_NODE	232:27	232:27	6	const
LEAF_NODE	232:33	232:33	6	char
POINTER	232:37	232:37	5	*
LEAF_NODE	232:37	232:37	6	*
NAME	232:39	232:39	4	mode
LEAF_NODE	232:39	232:39	5	mode
LEAF_NODE	232:43	232:43	3	)
LEAF_NODE	233:0	233:0	2	{
STATEMENTS	234:1	259:1	2	
LEAF_NODE	234:1	234:1	3	static
SIMPLE_DECL	234:8	234:40	3	const char [ ] module ; module = "TIFFOpen" ;
VAR_DECL	234:8	234:19	4	const char [ ] module ; module = "TIFFOpen"
TYPE	234:8	234:25	5	const char [ ]
TYPE_NAME	234:8	234:14	6	const char
LEAF_NODE	234:8	234:8	7	const
LEAF_NODE	234:14	234:14	7	char
TYPE_SUFFIX	234:25	234:26	6	[ ]
LEAF_NODE	234:25	234:25	7	[
LEAF_NODE	234:26	234:26	7	]
NAME	234:19	234:19	5	module
LEAF_NODE	234:19	234:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	234:19	234:19	5	module = "TIFFOpen"
ASSIGN	234:19	234:30	6	module = "TIFFOpen"
LVAL	234:19	234:19	7	module
NAME	234:19	234:19	8	module
LEAF_NODE	234:19	234:19	9	module
ASSIGN_OP	234:28	234:28	7	=
LEAF_NODE	234:28	234:28	8	=
RVAL	234:30	234:30	7	"TIFFOpen"
FIELD	234:30	234:30	8	"TIFFOpen"
LEAF_NODE	234:30	234:30	9	"TIFFOpen"
LEAF_NODE	234:40	234:40	4	;
SIMPLE_DECL	235:1	235:10	3	int m , int fd ;
INIT_DECL_LIST	235:1	235:1	4	int m , int fd
VAR_DECL	235:1	235:5	5	int m
TYPE	235:1	235:1	6	int
TYPE_NAME	235:1	235:1	7	int
LEAF_NODE	235:1	235:1	8	int
NAME	235:5	235:5	6	m
LEAF_NODE	235:5	235:5	7	m
LEAF_NODE	235:6	235:6	5	,
VAR_DECL	235:1	235:8	5	int fd
TYPE	235:1	235:1	6	int
TYPE_NAME	235:1	235:1	7	int
LEAF_NODE	235:1	235:1	8	int
NAME	235:8	235:8	6	fd
LEAF_NODE	235:8	235:8	7	fd
LEAF_NODE	235:10	235:10	4	;
EXPR_STATEMENT	237:1	237:31	3	m = _TIFFgetMode ( mode , module ) ;
EXPR	237:1	237:1	4	m = _TIFFgetMode ( mode , module )
ASSIGN	237:1	237:5	5	m = _TIFFgetMode ( mode , module )
LVAL	237:1	237:1	6	m
FIELD	237:1	237:1	7	m
LEAF_NODE	237:1	237:1	8	m
ASSIGN_OP	237:3	237:3	6	=
LEAF_NODE	237:3	237:3	7	=
RVAL	237:5	237:5	6	_TIFFgetMode ( mode , module )
FUNCTION_CALL	237:5	237:30	7	_TIFFgetMode ( mode , module )
CALLEE	237:5	237:5	8	_TIFFgetMode
LEAF_NODE	237:5	237:5	9	_TIFFgetMode
LEAF_NODE	237:17	237:17	8	(
ARGUMENT	237:18	237:18	8	mode
FIELD	237:18	237:18	9	mode
LEAF_NODE	237:18	237:18	10	mode
LEAF_NODE	237:22	237:22	8	,
ARGUMENT	237:24	237:24	8	module
FIELD	237:24	237:24	9	module
LEAF_NODE	237:24	237:24	10	module
LEAF_NODE	237:30	237:30	8	)
LEAF_NODE	237:31	237:31	4	;
SELECTION	238:1	239:2	3	
KEYWORD	238:1	238:1	4	if
LEAF_NODE	238:1	238:1	5	if
LEAF_NODE	238:4	238:4	4	(
CONDITION	238:5	238:5	4	m == - 1
EXPR	238:5	238:10	5	m == - 1
FIELD	238:5	238:5	6	m
LEAF_NODE	238:5	238:5	7	m
EQ_OPERATOR	238:7	238:7	6	==
LEAF_NODE	238:7	238:7	7	==
UNARY_EXPR	238:10	238:11	6	- 1
UNARY_OPERATOR	238:10	238:10	7	-
LEAF_NODE	238:10	238:10	8	-
FIELD	238:11	238:11	7	1
LEAF_NODE	238:11	238:11	8	1
LEAF_NODE	238:12	238:12	4	)
STATEMENTS	239:2	239:2	4	
JUMP_STATEMENT	239:2	239:19	5	return ( ( TIFF * ) 0 ) ;
KEYWORD	239:2	239:2	6	return
LEAF_NODE	239:2	239:2	7	return
DESTINATION	239:9	239:9	6	( ( TIFF * ) 0 )
EXPR	239:9	239:18	7	( ( TIFF * ) 0 )
LEAF_NODE	239:9	239:9	8	(
LEAF_NODE	239:10	239:10	8	(
TYPE_NAME	239:11	239:11	8	TIFF
LEAF_NODE	239:11	239:11	9	TIFF
LEAF_NODE	239:15	239:15	8	*
LEAF_NODE	239:16	239:16	8	)
FIELD	239:17	239:17	8	0
LEAF_NODE	239:17	239:17	9	0
LEAF_NODE	239:18	239:18	8	)
LEAF_NODE	239:19	239:19	6	;
SELECTION	240:8	240:22	3	
KEYWORD	240:8	240:8	4	if
LEAF_NODE	240:8	240:8	5	if
LEAF_NODE	240:11	240:11	4	(
CONDITION	240:12	240:12	4	m & O_TRUNC
EXPR	240:12	240:14	5	m & O_TRUNC
FIELD	240:12	240:12	6	m
LEAF_NODE	240:12	240:12	7	m
LEAF_NODE	240:13	240:13	6	&
FIELD	240:14	240:14	6	O_TRUNC
LEAF_NODE	240:14	240:14	7	O_TRUNC
LEAF_NODE	240:21	240:21	4	)
STATEMENTS	240:22	250:1	4	
LEAF_NODE	240:22	240:22	5	{
STATEMENTS	247:16	247:16	5	
EXPR_STATEMENT	247:16	249:18	6	fd = creat ( ( char * ) name , 0666 , "alq = 128" , "deq = 64" , "mbc = 32" , "fop = tef" ) ;
EXPR	247:16	247:16	7	fd = creat ( ( char * ) name , 0666 , "alq = 128" , "deq = 64" , "mbc = 32" , "fop = tef" )
ASSIGN	247:16	247:21	8	fd = creat ( ( char * ) name , 0666 , "alq = 128" , "deq = 64" , "mbc = 32" , "fop = tef" )
LVAL	247:16	247:16	9	fd
FIELD	247:16	247:16	10	fd
LEAF_NODE	247:16	247:16	11	fd
ASSIGN_OP	247:19	247:19	9	=
LEAF_NODE	247:19	247:19	10	=
RVAL	247:21	247:21	9	creat ( ( char * ) name , 0666 , "alq = 128" , "deq = 64" , "mbc = 32" , "fop = tef" )
FUNCTION_CALL	247:21	249:17	10	creat ( ( char * ) name , 0666 , "alq = 128" , "deq = 64" , "mbc = 32" , "fop = tef" )
CALLEE	247:21	247:21	11	creat
LEAF_NODE	247:21	247:21	12	creat
LEAF_NODE	247:26	247:26	11	(
ARGUMENT	247:27	247:57	11	( char * ) name
LEAF_NODE	247:27	247:27	12	(
TYPE_NAME	247:28	247:28	12	char
LEAF_NODE	247:28	247:28	13	char
LEAF_NODE	247:33	247:33	12	*
LEAF_NODE	247:34	247:34	12	)
FIELD	247:57	247:57	12	name
LEAF_NODE	247:57	247:57	13	name
LEAF_NODE	247:61	247:61	11	,
ARGUMENT	247:63	247:63	11	0666
FIELD	247:63	247:63	12	0666
LEAF_NODE	247:63	247:63	13	0666
LEAF_NODE	247:67	247:67	11	,
ARGUMENT	248:6	248:6	11	"alq = 128"
FIELD	248:6	248:6	12	"alq = 128"
LEAF_NODE	248:6	248:6	13	"alq = 128"
LEAF_NODE	248:17	248:17	11	,
ARGUMENT	248:19	248:19	11	"deq = 64"
FIELD	248:19	248:19	12	"deq = 64"
LEAF_NODE	248:19	248:19	13	"deq = 64"
LEAF_NODE	248:29	248:29	11	,
ARGUMENT	248:31	248:31	11	"mbc = 32"
FIELD	248:31	248:31	12	"mbc = 32"
LEAF_NODE	248:31	248:31	13	"mbc = 32"
LEAF_NODE	248:41	248:41	11	,
ARGUMENT	249:6	249:6	11	"fop = tef"
FIELD	249:6	249:6	12	"fop = tef"
LEAF_NODE	249:6	249:6	13	"fop = tef"
LEAF_NODE	249:17	249:17	11	)
LEAF_NODE	249:18	249:18	7	;
LEAF_NODE	250:1	250:1	5	}
SELECTION	250:3	250:8	3	
KEYWORD	250:3	250:3	4	else
LEAF_NODE	250:3	250:3	5	else
STATEMENTS	250:8	250:8	4	
SELECTION	250:8	250:22	5	
KEYWORD	250:8	250:8	6	if
LEAF_NODE	250:8	250:8	7	if
LEAF_NODE	250:11	250:11	6	(
CONDITION	250:12	250:12	6	m & O_RDWR
EXPR	250:12	250:14	7	m & O_RDWR
FIELD	250:12	250:12	8	m
LEAF_NODE	250:12	250:12	9	m
LEAF_NODE	250:13	250:13	8	&
FIELD	250:14	250:14	8	O_RDWR
LEAF_NODE	250:14	250:14	9	O_RDWR
LEAF_NODE	250:20	250:20	6	)
STATEMENTS	250:22	253:1	6	
LEAF_NODE	250:22	250:22	7	{
STATEMENTS	251:2	251:2	7	
EXPR_STATEMENT	251:2	252:55	8	fd = open ( name , m , 0666 , "deq = 64" , "mbc = 32" , "fop = tef" , "ctx = stm" ) ;
EXPR	251:2	251:2	9	fd = open ( name , m , 0666 , "deq = 64" , "mbc = 32" , "fop = tef" , "ctx = stm" )
ASSIGN	251:2	251:7	10	fd = open ( name , m , 0666 , "deq = 64" , "mbc = 32" , "fop = tef" , "ctx = stm" )
LVAL	251:2	251:2	11	fd
FIELD	251:2	251:2	12	fd
LEAF_NODE	251:2	251:2	13	fd
ASSIGN_OP	251:5	251:5	11	=
LEAF_NODE	251:5	251:5	12	=
RVAL	251:7	251:7	11	open ( name , m , 0666 , "deq = 64" , "mbc = 32" , "fop = tef" , "ctx = stm" )
FUNCTION_CALL	251:7	252:54	12	open ( name , m , 0666 , "deq = 64" , "mbc = 32" , "fop = tef" , "ctx = stm" )
CALLEE	251:7	251:7	13	open
LEAF_NODE	251:7	251:7	14	open
LEAF_NODE	251:11	251:11	13	(
ARGUMENT	251:12	251:12	13	name
FIELD	251:12	251:12	14	name
LEAF_NODE	251:12	251:12	15	name
LEAF_NODE	251:16	251:16	13	,
ARGUMENT	251:18	251:18	13	m
FIELD	251:18	251:18	14	m
LEAF_NODE	251:18	251:18	15	m
LEAF_NODE	251:19	251:19	13	,
ARGUMENT	251:21	251:21	13	0666
FIELD	251:21	251:21	14	0666
LEAF_NODE	251:21	251:21	15	0666
LEAF_NODE	251:25	251:25	13	,
ARGUMENT	252:6	252:6	13	"deq = 64"
FIELD	252:6	252:6	14	"deq = 64"
LEAF_NODE	252:6	252:6	15	"deq = 64"
LEAF_NODE	252:16	252:16	13	,
ARGUMENT	252:18	252:18	13	"mbc = 32"
FIELD	252:18	252:18	14	"mbc = 32"
LEAF_NODE	252:18	252:18	15	"mbc = 32"
LEAF_NODE	252:28	252:28	13	,
ARGUMENT	252:30	252:30	13	"fop = tef"
FIELD	252:30	252:30	14	"fop = tef"
LEAF_NODE	252:30	252:30	15	"fop = tef"
LEAF_NODE	252:41	252:41	13	,
ARGUMENT	252:43	252:43	13	"ctx = stm"
FIELD	252:43	252:43	14	"ctx = stm"
LEAF_NODE	252:43	252:43	15	"ctx = stm"
LEAF_NODE	252:54	252:54	13	)
LEAF_NODE	252:55	252:55	9	;
LEAF_NODE	253:1	253:1	7	}
SELECTION	253:3	254:2	3	
KEYWORD	253:3	253:3	4	else
LEAF_NODE	253:3	253:3	5	else
STATEMENTS	254:2	254:2	4	
EXPR_STATEMENT	254:2	254:51	5	fd = open ( name , m , 0666 , "mbc = 32" , "ctx = stm" ) ;
EXPR	254:2	254:2	6	fd = open ( name , m , 0666 , "mbc = 32" , "ctx = stm" )
ASSIGN	254:2	254:7	7	fd = open ( name , m , 0666 , "mbc = 32" , "ctx = stm" )
LVAL	254:2	254:2	8	fd
FIELD	254:2	254:2	9	fd
LEAF_NODE	254:2	254:2	10	fd
ASSIGN_OP	254:5	254:5	8	=
LEAF_NODE	254:5	254:5	9	=
RVAL	254:7	254:7	8	open ( name , m , 0666 , "mbc = 32" , "ctx = stm" )
FUNCTION_CALL	254:7	254:50	9	open ( name , m , 0666 , "mbc = 32" , "ctx = stm" )
CALLEE	254:7	254:7	10	open
LEAF_NODE	254:7	254:7	11	open
LEAF_NODE	254:11	254:11	10	(
ARGUMENT	254:12	254:12	10	name
FIELD	254:12	254:12	11	name
LEAF_NODE	254:12	254:12	12	name
LEAF_NODE	254:16	254:16	10	,
ARGUMENT	254:18	254:18	10	m
FIELD	254:18	254:18	11	m
LEAF_NODE	254:18	254:18	12	m
LEAF_NODE	254:19	254:19	10	,
ARGUMENT	254:21	254:21	10	0666
FIELD	254:21	254:21	11	0666
LEAF_NODE	254:21	254:21	12	0666
LEAF_NODE	254:25	254:25	10	,
ARGUMENT	254:27	254:27	10	"mbc = 32"
FIELD	254:27	254:27	11	"mbc = 32"
LEAF_NODE	254:27	254:27	12	"mbc = 32"
LEAF_NODE	254:37	254:37	10	,
ARGUMENT	254:39	254:39	10	"ctx = stm"
FIELD	254:39	254:39	11	"ctx = stm"
LEAF_NODE	254:39	254:39	12	"ctx = stm"
LEAF_NODE	254:50	254:50	10	)
LEAF_NODE	254:51	254:51	6	;
SELECTION	255:1	255:13	3	
KEYWORD	255:1	255:1	4	if
LEAF_NODE	255:1	255:1	5	if
LEAF_NODE	255:4	255:4	4	(
CONDITION	255:5	255:5	4	fd < 0
EXPR	255:5	255:10	5	fd < 0
FIELD	255:5	255:5	6	fd
LEAF_NODE	255:5	255:5	7	fd
REL_OPERATOR	255:8	255:8	6	<
LEAF_NODE	255:8	255:8	7	<
FIELD	255:10	255:10	6	0
LEAF_NODE	255:10	255:10	7	0
LEAF_NODE	255:11	255:11	4	)
STATEMENTS	255:13	258:1	4	
LEAF_NODE	255:13	255:13	5	{
STATEMENTS	256:2	257:2	5	
EXPR_STATEMENT	256:2	256:50	6	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name ) ;
EXPR	256:2	256:2	7	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name )
FUNCTION_CALL	256:2	256:49	8	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name )
CALLEE	256:2	256:2	9	TIFFErrorExt
LEAF_NODE	256:2	256:2	10	TIFFErrorExt
LEAF_NODE	256:14	256:14	9	(
ARGUMENT	256:15	256:15	9	0
FIELD	256:15	256:15	10	0
LEAF_NODE	256:15	256:15	11	0
LEAF_NODE	256:16	256:16	9	,
ARGUMENT	256:18	256:18	9	module
FIELD	256:18	256:18	10	module
LEAF_NODE	256:18	256:18	11	module
LEAF_NODE	256:24	256:24	9	,
ARGUMENT	256:26	256:26	9	"%s: Cannot open"
FIELD	256:26	256:26	10	"%s: Cannot open"
LEAF_NODE	256:26	256:26	11	"%s: Cannot open"
LEAF_NODE	256:43	256:43	9	,
ARGUMENT	256:45	256:45	9	name
FIELD	256:45	256:45	10	name
LEAF_NODE	256:45	256:45	11	name
LEAF_NODE	256:49	256:49	9	)
LEAF_NODE	256:50	256:50	7	;
JUMP_STATEMENT	257:2	257:19	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	257:2	257:2	7	return
LEAF_NODE	257:2	257:2	8	return
DESTINATION	257:9	257:9	7	( ( TIFF * ) 0 )
EXPR	257:9	257:18	8	( ( TIFF * ) 0 )
LEAF_NODE	257:9	257:9	9	(
LEAF_NODE	257:10	257:10	9	(
TYPE_NAME	257:11	257:11	9	TIFF
LEAF_NODE	257:11	257:11	10	TIFF
LEAF_NODE	257:15	257:15	9	*
LEAF_NODE	257:16	257:16	9	)
FIELD	257:17	257:17	9	0
LEAF_NODE	257:17	257:17	10	0
LEAF_NODE	257:18	257:18	9	)
LEAF_NODE	257:19	257:19	7	;
LEAF_NODE	258:1	258:1	5	}
JUMP_STATEMENT	259:1	259:36	3	return ( TIFFFdOpen ( fd , name , mode ) ) ;
KEYWORD	259:1	259:1	4	return
LEAF_NODE	259:1	259:1	5	return
DESTINATION	259:8	259:8	4	( TIFFFdOpen ( fd , name , mode ) )
EXPR	259:8	259:35	5	( TIFFFdOpen ( fd , name , mode ) )
LEAF_NODE	259:8	259:8	6	(
FUNCTION_CALL	259:9	259:34	6	TIFFFdOpen ( fd , name , mode )
CALLEE	259:9	259:9	7	TIFFFdOpen
LEAF_NODE	259:9	259:9	8	TIFFFdOpen
LEAF_NODE	259:19	259:19	7	(
ARGUMENT	259:20	259:20	7	fd
FIELD	259:20	259:20	8	fd
LEAF_NODE	259:20	259:20	9	fd
LEAF_NODE	259:22	259:22	7	,
ARGUMENT	259:24	259:24	7	name
FIELD	259:24	259:24	8	name
LEAF_NODE	259:24	259:24	9	name
LEAF_NODE	259:28	259:28	7	,
ARGUMENT	259:30	259:30	7	mode
FIELD	259:30	259:30	8	mode
LEAF_NODE	259:30	259:30	9	mode
LEAF_NODE	259:34	259:34	7	)
LEAF_NODE	259:35	259:35	6	)
LEAF_NODE	259:36	259:36	4	;
LEAF_NODE	260:0	260:0	2	}
FUNCTION_DEF	262:0	269:0	1	
RETURN_TYPE	262:0	262:0	2	tdata_t
TYPE_NAME	262:0	262:0	3	tdata_t
LEAF_NODE	262:0	262:0	4	tdata_t
FUNCTION_NAME	263:0	263:0	2	_TIFFmalloc
LEAF_NODE	263:0	263:0	3	_TIFFmalloc
PARAMETER_LIST	263:11	263:21	2	( tsize_t s )
LEAF_NODE	263:11	263:11	3	(
PARAMETER_DECL	263:12	263:20	3	tsize_t s
TYPE	263:12	263:12	4	tsize_t
TYPE_NAME	263:12	263:12	5	tsize_t
LEAF_NODE	263:12	263:12	6	tsize_t
NAME	263:20	263:20	4	s
LEAF_NODE	263:20	263:20	5	s
LEAF_NODE	263:21	263:21	3	)
LEAF_NODE	264:0	264:0	2	{
STATEMENTS	265:8	268:1	2	
SELECTION	265:8	266:16	3	
KEYWORD	265:8	265:8	4	if
LEAF_NODE	265:8	265:8	5	if
LEAF_NODE	265:11	265:11	4	(
CONDITION	265:12	265:12	4	s == 0
EXPR	265:12	265:17	5	s == 0
FIELD	265:12	265:12	6	s
LEAF_NODE	265:12	265:12	7	s
EQ_OPERATOR	265:14	265:14	6	==
LEAF_NODE	265:14	265:14	7	==
FIELD	265:17	265:17	6	0
LEAF_NODE	265:17	265:17	7	0
LEAF_NODE	265:18	265:18	4	)
STATEMENTS	266:16	266:16	4	
JUMP_STATEMENT	266:16	266:38	5	return ( ( void * ) NULL ) ;
KEYWORD	266:16	266:16	6	return
LEAF_NODE	266:16	266:16	7	return
DESTINATION	266:23	266:23	6	( ( void * ) NULL )
EXPR	266:23	266:37	7	( ( void * ) NULL )
LEAF_NODE	266:23	266:23	8	(
LEAF_NODE	266:24	266:24	8	(
TYPE_NAME	266:25	266:25	8	void
LEAF_NODE	266:25	266:25	9	void
LEAF_NODE	266:30	266:30	8	*
LEAF_NODE	266:31	266:31	8	)
FIELD	266:33	266:33	8	NULL
LEAF_NODE	266:33	266:33	9	NULL
LEAF_NODE	266:37	266:37	8	)
LEAF_NODE	266:38	266:38	6	;
JUMP_STATEMENT	268:1	268:28	3	return ( malloc ( ( size_t ) s ) ) ;
KEYWORD	268:1	268:1	4	return
LEAF_NODE	268:1	268:1	5	return
DESTINATION	268:8	268:8	4	( malloc ( ( size_t ) s ) )
EXPR	268:8	268:27	5	( malloc ( ( size_t ) s ) )
LEAF_NODE	268:8	268:8	6	(
FUNCTION_CALL	268:9	268:26	6	malloc ( ( size_t ) s )
CALLEE	268:9	268:9	7	malloc
LEAF_NODE	268:9	268:9	8	malloc
LEAF_NODE	268:15	268:15	7	(
ARGUMENT	268:16	268:25	7	( size_t ) s
LEAF_NODE	268:16	268:16	8	(
TYPE_NAME	268:17	268:17	8	size_t
LEAF_NODE	268:17	268:17	9	size_t
LEAF_NODE	268:23	268:23	8	)
FIELD	268:25	268:25	8	s
LEAF_NODE	268:25	268:25	9	s
LEAF_NODE	268:26	268:26	7	)
LEAF_NODE	268:27	268:27	6	)
LEAF_NODE	268:28	268:28	4	;
LEAF_NODE	269:0	269:0	2	}
FUNCTION_DEF	271:0	277:0	1	
RETURN_TYPE	271:0	271:4	2	void *
TYPE_NAME	271:0	271:0	3	void
LEAF_NODE	271:0	271:0	4	void
LEAF_NODE	271:4	271:4	3	*
FUNCTION_NAME	271:6	271:6	2	_TIFFcalloc
LEAF_NODE	271:6	271:6	3	_TIFFcalloc
PARAMETER_LIST	271:17	271:46	2	( tmsize_t nmemb , tmsize_t siz )
LEAF_NODE	271:17	271:17	3	(
PARAMETER_DECL	271:18	271:27	3	tmsize_t nmemb
TYPE	271:18	271:18	4	tmsize_t
TYPE_NAME	271:18	271:18	5	tmsize_t
LEAF_NODE	271:18	271:18	6	tmsize_t
NAME	271:27	271:27	4	nmemb
LEAF_NODE	271:27	271:27	5	nmemb
LEAF_NODE	271:32	271:32	3	,
PARAMETER_DECL	271:34	271:43	3	tmsize_t siz
TYPE	271:34	271:34	4	tmsize_t
TYPE_NAME	271:34	271:34	5	tmsize_t
LEAF_NODE	271:34	271:34	6	tmsize_t
NAME	271:43	271:43	4	siz
LEAF_NODE	271:43	271:43	5	siz
LEAF_NODE	271:46	271:46	3	)
LEAF_NODE	272:0	272:0	2	{
STATEMENTS	273:4	276:4	2	
SELECTION	273:4	274:8	3	
KEYWORD	273:4	273:4	4	if
LEAF_NODE	273:4	273:4	5	if
LEAF_NODE	273:6	273:6	4	(
CONDITION	273:8	273:8	4	nmemb == 0 || siz == 0
EXPR	273:8	273:8	5	nmemb == 0 || siz == 0
OR	273:8	273:22	6	nmemb == 0 || siz == 0
EXPR	273:8	273:17	7	nmemb == 0
FIELD	273:8	273:8	8	nmemb
LEAF_NODE	273:8	273:8	9	nmemb
EQ_OPERATOR	273:14	273:14	8	==
LEAF_NODE	273:14	273:14	9	==
FIELD	273:17	273:17	8	0
LEAF_NODE	273:17	273:17	9	0
LEAF_NODE	273:19	273:19	7	||
EXPR	273:22	273:29	7	siz == 0
FIELD	273:22	273:22	8	siz
LEAF_NODE	273:22	273:22	9	siz
EQ_OPERATOR	273:26	273:26	8	==
LEAF_NODE	273:26	273:26	9	==
FIELD	273:29	273:29	8	0
LEAF_NODE	273:29	273:29	9	0
LEAF_NODE	273:31	273:31	4	)
STATEMENTS	274:8	274:8	4	
JUMP_STATEMENT	274:8	274:30	5	return ( ( void * ) NULL ) ;
KEYWORD	274:8	274:8	6	return
LEAF_NODE	274:8	274:8	7	return
DESTINATION	274:15	274:15	6	( ( void * ) NULL )
EXPR	274:15	274:29	7	( ( void * ) NULL )
LEAF_NODE	274:15	274:15	8	(
LEAF_NODE	274:16	274:16	8	(
TYPE_NAME	274:17	274:17	8	void
LEAF_NODE	274:17	274:17	9	void
LEAF_NODE	274:22	274:22	8	*
LEAF_NODE	274:23	274:23	8	)
FIELD	274:25	274:25	8	NULL
LEAF_NODE	274:25	274:25	9	NULL
LEAF_NODE	274:29	274:29	8	)
LEAF_NODE	274:30	274:30	6	;
JUMP_STATEMENT	276:4	276:46	3	return calloc ( ( size_t ) nmemb , ( size_t ) siz ) ;
KEYWORD	276:4	276:4	4	return
LEAF_NODE	276:4	276:4	5	return
DESTINATION	276:11	276:11	4	calloc ( ( size_t ) nmemb , ( size_t ) siz )
EXPR	276:11	276:11	5	calloc ( ( size_t ) nmemb , ( size_t ) siz )
FUNCTION_CALL	276:11	276:45	6	calloc ( ( size_t ) nmemb , ( size_t ) siz )
CALLEE	276:11	276:11	7	calloc
LEAF_NODE	276:11	276:11	8	calloc
LEAF_NODE	276:17	276:17	7	(
ARGUMENT	276:18	276:27	7	( size_t ) nmemb
LEAF_NODE	276:18	276:18	8	(
TYPE_NAME	276:19	276:19	8	size_t
LEAF_NODE	276:19	276:19	9	size_t
LEAF_NODE	276:25	276:25	8	)
FIELD	276:27	276:27	8	nmemb
LEAF_NODE	276:27	276:27	9	nmemb
LEAF_NODE	276:32	276:32	7	,
ARGUMENT	276:34	276:42	7	( size_t ) siz
LEAF_NODE	276:34	276:34	8	(
TYPE_NAME	276:35	276:35	8	size_t
LEAF_NODE	276:35	276:35	9	size_t
LEAF_NODE	276:41	276:41	8	)
FIELD	276:42	276:42	8	siz
LEAF_NODE	276:42	276:42	9	siz
LEAF_NODE	276:45	276:45	7	)
LEAF_NODE	276:46	276:46	4	;
LEAF_NODE	277:0	277:0	2	}
FUNCTION_DEF	279:0	283:0	1	
RETURN_TYPE	279:0	279:0	2	void
TYPE_NAME	279:0	279:0	3	void
LEAF_NODE	279:0	279:0	4	void
FUNCTION_NAME	280:0	280:0	2	_TIFFfree
LEAF_NODE	280:0	280:0	3	_TIFFfree
PARAMETER_LIST	280:9	280:19	2	( tdata_t p )
LEAF_NODE	280:9	280:9	3	(
PARAMETER_DECL	280:10	280:18	3	tdata_t p
TYPE	280:10	280:10	4	tdata_t
TYPE_NAME	280:10	280:10	5	tdata_t
LEAF_NODE	280:10	280:10	6	tdata_t
NAME	280:18	280:18	4	p
LEAF_NODE	280:18	280:18	5	p
LEAF_NODE	280:19	280:19	3	)
LEAF_NODE	281:0	281:0	2	{
STATEMENTS	282:1	282:1	2	
EXPR_STATEMENT	282:1	282:8	3	free ( p ) ;
EXPR	282:1	282:1	4	free ( p )
FUNCTION_CALL	282:1	282:7	5	free ( p )
CALLEE	282:1	282:1	6	free
LEAF_NODE	282:1	282:1	7	free
LEAF_NODE	282:5	282:5	6	(
ARGUMENT	282:6	282:6	6	p
FIELD	282:6	282:6	7	p
LEAF_NODE	282:6	282:6	8	p
LEAF_NODE	282:7	282:7	6	)
LEAF_NODE	282:8	282:8	4	;
LEAF_NODE	283:0	283:0	2	}
FUNCTION_DEF	285:0	289:0	1	
RETURN_TYPE	285:0	285:0	2	tdata_t
TYPE_NAME	285:0	285:0	3	tdata_t
LEAF_NODE	285:0	285:0	4	tdata_t
FUNCTION_NAME	286:0	286:0	2	_TIFFrealloc
LEAF_NODE	286:0	286:0	3	_TIFFrealloc
PARAMETER_LIST	286:12	286:33	2	( tdata_t p , tsize_t s )
LEAF_NODE	286:12	286:12	3	(
PARAMETER_DECL	286:13	286:21	3	tdata_t p
TYPE	286:13	286:13	4	tdata_t
TYPE_NAME	286:13	286:13	5	tdata_t
LEAF_NODE	286:13	286:13	6	tdata_t
NAME	286:21	286:21	4	p
LEAF_NODE	286:21	286:21	5	p
LEAF_NODE	286:22	286:22	3	,
PARAMETER_DECL	286:24	286:32	3	tsize_t s
TYPE	286:24	286:24	4	tsize_t
TYPE_NAME	286:24	286:24	5	tsize_t
LEAF_NODE	286:24	286:24	6	tsize_t
NAME	286:32	286:32	4	s
LEAF_NODE	286:32	286:32	5	s
LEAF_NODE	286:33	286:33	3	)
LEAF_NODE	287:0	287:0	2	{
STATEMENTS	288:1	288:1	2	
JUMP_STATEMENT	288:1	288:32	3	return ( realloc ( p , ( size_t ) s ) ) ;
KEYWORD	288:1	288:1	4	return
LEAF_NODE	288:1	288:1	5	return
DESTINATION	288:8	288:8	4	( realloc ( p , ( size_t ) s ) )
EXPR	288:8	288:31	5	( realloc ( p , ( size_t ) s ) )
LEAF_NODE	288:8	288:8	6	(
FUNCTION_CALL	288:9	288:30	6	realloc ( p , ( size_t ) s )
CALLEE	288:9	288:9	7	realloc
LEAF_NODE	288:9	288:9	8	realloc
LEAF_NODE	288:16	288:16	7	(
ARGUMENT	288:17	288:17	7	p
FIELD	288:17	288:17	8	p
LEAF_NODE	288:17	288:17	9	p
LEAF_NODE	288:18	288:18	7	,
ARGUMENT	288:20	288:29	7	( size_t ) s
LEAF_NODE	288:20	288:20	8	(
TYPE_NAME	288:21	288:21	8	size_t
LEAF_NODE	288:21	288:21	9	size_t
LEAF_NODE	288:27	288:27	8	)
FIELD	288:29	288:29	8	s
LEAF_NODE	288:29	288:29	9	s
LEAF_NODE	288:30	288:30	7	)
LEAF_NODE	288:31	288:31	6	)
LEAF_NODE	288:32	288:32	4	;
LEAF_NODE	289:0	289:0	2	}
FUNCTION_DEF	291:0	295:0	1	
RETURN_TYPE	291:0	291:0	2	void
TYPE_NAME	291:0	291:0	3	void
LEAF_NODE	291:0	291:0	4	void
FUNCTION_NAME	292:0	292:0	2	_TIFFmemset
LEAF_NODE	292:0	292:0	3	_TIFFmemset
PARAMETER_LIST	292:11	292:39	2	( tdata_t p , int v , tsize_t c )
LEAF_NODE	292:11	292:11	3	(
PARAMETER_DECL	292:12	292:20	3	tdata_t p
TYPE	292:12	292:12	4	tdata_t
TYPE_NAME	292:12	292:12	5	tdata_t
LEAF_NODE	292:12	292:12	6	tdata_t
NAME	292:20	292:20	4	p
LEAF_NODE	292:20	292:20	5	p
LEAF_NODE	292:21	292:21	3	,
PARAMETER_DECL	292:23	292:27	3	int v
TYPE	292:23	292:23	4	int
TYPE_NAME	292:23	292:23	5	int
LEAF_NODE	292:23	292:23	6	int
NAME	292:27	292:27	4	v
LEAF_NODE	292:27	292:27	5	v
LEAF_NODE	292:28	292:28	3	,
PARAMETER_DECL	292:30	292:38	3	tsize_t c
TYPE	292:30	292:30	4	tsize_t
TYPE_NAME	292:30	292:30	5	tsize_t
LEAF_NODE	292:30	292:30	6	tsize_t
NAME	292:38	292:38	4	c
LEAF_NODE	292:38	292:38	5	c
LEAF_NODE	292:39	292:39	3	)
LEAF_NODE	293:0	293:0	2	{
STATEMENTS	294:1	294:1	2	
EXPR_STATEMENT	294:1	294:25	3	memset ( p , v , ( size_t ) c ) ;
EXPR	294:1	294:1	4	memset ( p , v , ( size_t ) c )
FUNCTION_CALL	294:1	294:24	5	memset ( p , v , ( size_t ) c )
CALLEE	294:1	294:1	6	memset
LEAF_NODE	294:1	294:1	7	memset
LEAF_NODE	294:7	294:7	6	(
ARGUMENT	294:8	294:8	6	p
FIELD	294:8	294:8	7	p
LEAF_NODE	294:8	294:8	8	p
LEAF_NODE	294:9	294:9	6	,
ARGUMENT	294:11	294:11	6	v
FIELD	294:11	294:11	7	v
LEAF_NODE	294:11	294:11	8	v
LEAF_NODE	294:12	294:12	6	,
ARGUMENT	294:14	294:23	6	( size_t ) c
LEAF_NODE	294:14	294:14	7	(
TYPE_NAME	294:15	294:15	7	size_t
LEAF_NODE	294:15	294:15	8	size_t
LEAF_NODE	294:21	294:21	7	)
FIELD	294:23	294:23	7	c
LEAF_NODE	294:23	294:23	8	c
LEAF_NODE	294:24	294:24	6	)
LEAF_NODE	294:25	294:25	4	;
LEAF_NODE	295:0	295:0	2	}
FUNCTION_DEF	297:0	301:0	1	
RETURN_TYPE	297:0	297:0	2	void
TYPE_NAME	297:0	297:0	3	void
LEAF_NODE	297:0	297:0	4	void
FUNCTION_NAME	298:0	298:0	2	_TIFFmemcpy
LEAF_NODE	298:0	298:0	3	_TIFFmemcpy
PARAMETER_LIST	298:11	298:49	2	( tdata_t d , const tdata_t s , tsize_t c )
LEAF_NODE	298:11	298:11	3	(
PARAMETER_DECL	298:12	298:20	3	tdata_t d
TYPE	298:12	298:12	4	tdata_t
TYPE_NAME	298:12	298:12	5	tdata_t
LEAF_NODE	298:12	298:12	6	tdata_t
NAME	298:20	298:20	4	d
LEAF_NODE	298:20	298:20	5	d
LEAF_NODE	298:21	298:21	3	,
PARAMETER_DECL	298:23	298:37	3	const tdata_t s
TYPE	298:23	298:23	4	const tdata_t
TYPE_NAME	298:23	298:29	5	const tdata_t
LEAF_NODE	298:23	298:23	6	const
LEAF_NODE	298:29	298:29	6	tdata_t
NAME	298:37	298:37	4	s
LEAF_NODE	298:37	298:37	5	s
LEAF_NODE	298:38	298:38	3	,
PARAMETER_DECL	298:40	298:48	3	tsize_t c
TYPE	298:40	298:40	4	tsize_t
TYPE_NAME	298:40	298:40	5	tsize_t
LEAF_NODE	298:40	298:40	6	tsize_t
NAME	298:48	298:48	4	c
LEAF_NODE	298:48	298:48	5	c
LEAF_NODE	298:49	298:49	3	)
LEAF_NODE	299:0	299:0	2	{
STATEMENTS	300:1	300:1	2	
EXPR_STATEMENT	300:1	300:25	3	memcpy ( d , s , ( size_t ) c ) ;
EXPR	300:1	300:1	4	memcpy ( d , s , ( size_t ) c )
FUNCTION_CALL	300:1	300:24	5	memcpy ( d , s , ( size_t ) c )
CALLEE	300:1	300:1	6	memcpy
LEAF_NODE	300:1	300:1	7	memcpy
LEAF_NODE	300:7	300:7	6	(
ARGUMENT	300:8	300:8	6	d
FIELD	300:8	300:8	7	d
LEAF_NODE	300:8	300:8	8	d
LEAF_NODE	300:9	300:9	6	,
ARGUMENT	300:11	300:11	6	s
FIELD	300:11	300:11	7	s
LEAF_NODE	300:11	300:11	8	s
LEAF_NODE	300:12	300:12	6	,
ARGUMENT	300:14	300:23	6	( size_t ) c
LEAF_NODE	300:14	300:14	7	(
TYPE_NAME	300:15	300:15	7	size_t
LEAF_NODE	300:15	300:15	8	size_t
LEAF_NODE	300:21	300:21	7	)
FIELD	300:23	300:23	7	c
LEAF_NODE	300:23	300:23	8	c
LEAF_NODE	300:24	300:24	6	)
LEAF_NODE	300:25	300:25	4	;
LEAF_NODE	301:0	301:0	2	}
FUNCTION_DEF	303:0	307:0	1	
RETURN_TYPE	303:0	303:0	2	int
TYPE_NAME	303:0	303:0	3	int
LEAF_NODE	303:0	303:0	4	int
FUNCTION_NAME	304:0	304:0	2	_TIFFmemcmp
LEAF_NODE	304:0	304:0	3	_TIFFmemcmp
PARAMETER_LIST	304:11	304:57	2	( const tdata_t p1 , const tdata_t p2 , tsize_t c )
LEAF_NODE	304:11	304:11	3	(
PARAMETER_DECL	304:12	304:26	3	const tdata_t p1
TYPE	304:12	304:12	4	const tdata_t
TYPE_NAME	304:12	304:18	5	const tdata_t
LEAF_NODE	304:12	304:12	6	const
LEAF_NODE	304:18	304:18	6	tdata_t
NAME	304:26	304:26	4	p1
LEAF_NODE	304:26	304:26	5	p1
LEAF_NODE	304:28	304:28	3	,
PARAMETER_DECL	304:30	304:44	3	const tdata_t p2
TYPE	304:30	304:30	4	const tdata_t
TYPE_NAME	304:30	304:36	5	const tdata_t
LEAF_NODE	304:30	304:30	6	const
LEAF_NODE	304:36	304:36	6	tdata_t
NAME	304:44	304:44	4	p2
LEAF_NODE	304:44	304:44	5	p2
LEAF_NODE	304:46	304:46	3	,
PARAMETER_DECL	304:48	304:56	3	tsize_t c
TYPE	304:48	304:48	4	tsize_t
TYPE_NAME	304:48	304:48	5	tsize_t
LEAF_NODE	304:48	304:48	6	tsize_t
NAME	304:56	304:56	4	c
LEAF_NODE	304:56	304:56	5	c
LEAF_NODE	304:57	304:57	3	)
LEAF_NODE	305:0	305:0	2	{
STATEMENTS	306:1	306:1	2	
JUMP_STATEMENT	306:1	306:36	3	return ( memcmp ( p1 , p2 , ( size_t ) c ) ) ;
KEYWORD	306:1	306:1	4	return
LEAF_NODE	306:1	306:1	5	return
DESTINATION	306:8	306:8	4	( memcmp ( p1 , p2 , ( size_t ) c ) )
EXPR	306:8	306:35	5	( memcmp ( p1 , p2 , ( size_t ) c ) )
LEAF_NODE	306:8	306:8	6	(
FUNCTION_CALL	306:9	306:34	6	memcmp ( p1 , p2 , ( size_t ) c )
CALLEE	306:9	306:9	7	memcmp
LEAF_NODE	306:9	306:9	8	memcmp
LEAF_NODE	306:15	306:15	7	(
ARGUMENT	306:16	306:16	7	p1
FIELD	306:16	306:16	8	p1
LEAF_NODE	306:16	306:16	9	p1
LEAF_NODE	306:18	306:18	7	,
ARGUMENT	306:20	306:20	7	p2
FIELD	306:20	306:20	8	p2
LEAF_NODE	306:20	306:20	9	p2
LEAF_NODE	306:22	306:22	7	,
ARGUMENT	306:24	306:33	7	( size_t ) c
LEAF_NODE	306:24	306:24	8	(
TYPE_NAME	306:25	306:25	8	size_t
LEAF_NODE	306:25	306:25	9	size_t
LEAF_NODE	306:31	306:31	8	)
FIELD	306:33	306:33	8	c
LEAF_NODE	306:33	306:33	9	c
LEAF_NODE	306:34	306:34	7	)
LEAF_NODE	306:35	306:35	6	)
LEAF_NODE	306:36	306:36	4	;
LEAF_NODE	307:0	307:0	2	}
FUNCTION_DEF	320:0	328:0	1	
RETURN_TYPE	320:0	320:7	2	static void
LEAF_NODE	320:0	320:0	3	static
TYPE_NAME	320:7	320:7	3	void
LEAF_NODE	320:7	320:7	4	void
FUNCTION_NAME	321:0	321:0	2	vmsWarningHandler
LEAF_NODE	321:0	321:0	3	vmsWarningHandler
PARAMETER_LIST	321:17	321:65	2	( const char * module , const char * fmt , va_list ap )
LEAF_NODE	321:17	321:17	3	(
PARAMETER_DECL	321:18	321:30	3	const char * module
TYPE	321:18	321:28	4	const char *
TYPE_NAME	321:18	321:24	5	const char
LEAF_NODE	321:18	321:18	6	const
LEAF_NODE	321:24	321:24	6	char
POINTER	321:28	321:28	5	*
LEAF_NODE	321:28	321:28	6	*
NAME	321:30	321:30	4	module
LEAF_NODE	321:30	321:30	5	module
LEAF_NODE	321:36	321:36	3	,
PARAMETER_DECL	321:38	321:50	3	const char * fmt
TYPE	321:38	321:48	4	const char *
TYPE_NAME	321:38	321:44	5	const char
LEAF_NODE	321:38	321:38	6	const
LEAF_NODE	321:44	321:44	6	char
POINTER	321:48	321:48	5	*
LEAF_NODE	321:48	321:48	6	*
NAME	321:50	321:50	4	fmt
LEAF_NODE	321:50	321:50	5	fmt
LEAF_NODE	321:53	321:53	3	,
PARAMETER_DECL	321:55	321:63	3	va_list ap
TYPE	321:55	321:55	4	va_list
TYPE_NAME	321:55	321:55	5	va_list
LEAF_NODE	321:55	321:55	6	va_list
NAME	321:63	321:63	4	ap
LEAF_NODE	321:63	321:63	5	ap
LEAF_NODE	321:65	321:65	3	)
LEAF_NODE	322:0	322:0	2	{
STATEMENTS	323:1	327:1	2	
SELECTION	323:1	324:2	3	
KEYWORD	323:1	323:1	4	if
LEAF_NODE	323:1	323:1	5	if
LEAF_NODE	323:4	323:4	4	(
CONDITION	323:5	323:5	4	module != NULL
EXPR	323:5	323:15	5	module != NULL
FIELD	323:5	323:5	6	module
LEAF_NODE	323:5	323:5	7	module
EQ_OPERATOR	323:12	323:12	6	!=
LEAF_NODE	323:12	323:12	7	!=
FIELD	323:15	323:15	6	NULL
LEAF_NODE	323:15	323:15	7	NULL
LEAF_NODE	323:19	323:19	4	)
STATEMENTS	324:2	324:2	4	
EXPR_STATEMENT	324:2	324:33	5	fprintf ( stderr , "%s: " , module ) ;
EXPR	324:2	324:2	6	fprintf ( stderr , "%s: " , module )
FUNCTION_CALL	324:2	324:32	7	fprintf ( stderr , "%s: " , module )
CALLEE	324:2	324:2	8	fprintf
LEAF_NODE	324:2	324:2	9	fprintf
LEAF_NODE	324:9	324:9	8	(
ARGUMENT	324:10	324:10	8	stderr
FIELD	324:10	324:10	9	stderr
LEAF_NODE	324:10	324:10	10	stderr
LEAF_NODE	324:16	324:16	8	,
ARGUMENT	324:18	324:18	8	"%s: "
FIELD	324:18	324:18	9	"%s: "
LEAF_NODE	324:18	324:18	10	"%s: "
LEAF_NODE	324:24	324:24	8	,
ARGUMENT	324:26	324:26	8	module
FIELD	324:26	324:26	9	module
LEAF_NODE	324:26	324:26	10	module
LEAF_NODE	324:32	324:32	8	)
LEAF_NODE	324:33	324:33	6	;
EXPR_STATEMENT	325:1	325:29	3	fprintf ( stderr , "Warning, " ) ;
EXPR	325:1	325:1	4	fprintf ( stderr , "Warning, " )
FUNCTION_CALL	325:1	325:28	5	fprintf ( stderr , "Warning, " )
CALLEE	325:1	325:1	6	fprintf
LEAF_NODE	325:1	325:1	7	fprintf
LEAF_NODE	325:8	325:8	6	(
ARGUMENT	325:9	325:9	6	stderr
FIELD	325:9	325:9	7	stderr
LEAF_NODE	325:9	325:9	8	stderr
LEAF_NODE	325:15	325:15	6	,
ARGUMENT	325:17	325:17	6	"Warning, "
FIELD	325:17	325:17	7	"Warning, "
LEAF_NODE	325:17	325:17	8	"Warning, "
LEAF_NODE	325:28	325:28	6	)
LEAF_NODE	325:29	325:29	4	;
EXPR_STATEMENT	326:1	326:26	3	vfprintf ( stderr , fmt , ap ) ;
EXPR	326:1	326:1	4	vfprintf ( stderr , fmt , ap )
FUNCTION_CALL	326:1	326:25	5	vfprintf ( stderr , fmt , ap )
CALLEE	326:1	326:1	6	vfprintf
LEAF_NODE	326:1	326:1	7	vfprintf
LEAF_NODE	326:9	326:9	6	(
ARGUMENT	326:10	326:10	6	stderr
FIELD	326:10	326:10	7	stderr
LEAF_NODE	326:10	326:10	8	stderr
LEAF_NODE	326:16	326:16	6	,
ARGUMENT	326:18	326:18	6	fmt
FIELD	326:18	326:18	7	fmt
LEAF_NODE	326:18	326:18	8	fmt
LEAF_NODE	326:21	326:21	6	,
ARGUMENT	326:23	326:23	6	ap
FIELD	326:23	326:23	7	ap
LEAF_NODE	326:23	326:23	8	ap
LEAF_NODE	326:25	326:25	6	)
LEAF_NODE	326:26	326:26	4	;
EXPR_STATEMENT	327:1	327:23	3	fprintf ( stderr , ".\n" ) ;
EXPR	327:1	327:1	4	fprintf ( stderr , ".\n" )
FUNCTION_CALL	327:1	327:22	5	fprintf ( stderr , ".\n" )
CALLEE	327:1	327:1	6	fprintf
LEAF_NODE	327:1	327:1	7	fprintf
LEAF_NODE	327:8	327:8	6	(
ARGUMENT	327:9	327:9	6	stderr
FIELD	327:9	327:9	7	stderr
LEAF_NODE	327:9	327:9	8	stderr
LEAF_NODE	327:15	327:15	6	,
ARGUMENT	327:17	327:17	6	".\n"
FIELD	327:17	327:17	7	".\n"
LEAF_NODE	327:17	327:17	8	".\n"
LEAF_NODE	327:22	327:22	6	)
LEAF_NODE	327:23	327:23	4	;
LEAF_NODE	328:0	328:0	2	}
SIMPLE_DECL	330:47	334:0	1	vmsWarningHandler asm ; asm asm ( "_$$PsectAttributes_NOSHR$$_TIFFwarningHandler" ) ;
VAR_DECL	330:47	332:0	2	vmsWarningHandler asm ; asm asm ( "_$$PsectAttributes_NOSHR$$_TIFFwarningHandler" )
TYPE	330:47	330:47	3	vmsWarningHandler
TYPE_NAME	330:47	330:47	4	vmsWarningHandler
LEAF_NODE	330:47	330:47	5	vmsWarningHandler
NAME	332:0	332:0	3	asm
LEAF_NODE	332:0	332:0	4	asm
LEAF_NODE	0:0	0:0	3	;
INIT	332:0	332:0	3	asm asm ( "_$$PsectAttributes_NOSHR$$_TIFFwarningHandler" )
ASSIGN	332:0	332:3	4	asm asm ( "_$$PsectAttributes_NOSHR$$_TIFFwarningHandler" )
LVAL	332:0	332:0	5	asm
NAME	332:0	332:0	6	asm
LEAF_NODE	332:0	332:0	7	asm
ASSIGN_OP	332:0	332:0	5	asm
NAME	332:0	332:0	6	asm
LEAF_NODE	332:0	332:0	7	asm
RVAL	332:3	332:51	5	( "_$$PsectAttributes_NOSHR$$_TIFFwarningHandler" )
LEAF_NODE	332:3	332:3	6	(
EXPR	332:4	332:4	6	"_$$PsectAttributes_NOSHR$$_TIFFwarningHandler"
FIELD	332:4	332:4	7	"_$$PsectAttributes_NOSHR$$_TIFFwarningHandler"
LEAF_NODE	332:4	332:4	8	"_$$PsectAttributes_NOSHR$$_TIFFwarningHandler"
LEAF_NODE	332:51	332:51	6	)
LEAF_NODE	334:0	334:0	2	;
FUNCTION_DEF	336:0	343:0	1	
RETURN_TYPE	336:0	336:7	2	static void
LEAF_NODE	336:0	336:0	3	static
TYPE_NAME	336:7	336:7	3	void
LEAF_NODE	336:7	336:7	4	void
FUNCTION_NAME	337:0	337:0	2	vmsErrorHandler
LEAF_NODE	337:0	337:0	3	vmsErrorHandler
PARAMETER_LIST	337:15	337:63	2	( const char * module , const char * fmt , va_list ap )
LEAF_NODE	337:15	337:15	3	(
PARAMETER_DECL	337:16	337:28	3	const char * module
TYPE	337:16	337:26	4	const char *
TYPE_NAME	337:16	337:22	5	const char
LEAF_NODE	337:16	337:16	6	const
LEAF_NODE	337:22	337:22	6	char
POINTER	337:26	337:26	5	*
LEAF_NODE	337:26	337:26	6	*
NAME	337:28	337:28	4	module
LEAF_NODE	337:28	337:28	5	module
LEAF_NODE	337:34	337:34	3	,
PARAMETER_DECL	337:36	337:48	3	const char * fmt
TYPE	337:36	337:46	4	const char *
TYPE_NAME	337:36	337:42	5	const char
LEAF_NODE	337:36	337:36	6	const
LEAF_NODE	337:42	337:42	6	char
POINTER	337:46	337:46	5	*
LEAF_NODE	337:46	337:46	6	*
NAME	337:48	337:48	4	fmt
LEAF_NODE	337:48	337:48	5	fmt
LEAF_NODE	337:51	337:51	3	,
PARAMETER_DECL	337:53	337:61	3	va_list ap
TYPE	337:53	337:53	4	va_list
TYPE_NAME	337:53	337:53	5	va_list
LEAF_NODE	337:53	337:53	6	va_list
NAME	337:61	337:61	4	ap
LEAF_NODE	337:61	337:61	5	ap
LEAF_NODE	337:63	337:63	3	)
LEAF_NODE	338:0	338:0	2	{
STATEMENTS	339:1	342:1	2	
SELECTION	339:1	340:2	3	
KEYWORD	339:1	339:1	4	if
LEAF_NODE	339:1	339:1	5	if
LEAF_NODE	339:4	339:4	4	(
CONDITION	339:5	339:5	4	module != NULL
EXPR	339:5	339:15	5	module != NULL
FIELD	339:5	339:5	6	module
LEAF_NODE	339:5	339:5	7	module
EQ_OPERATOR	339:12	339:12	6	!=
LEAF_NODE	339:12	339:12	7	!=
FIELD	339:15	339:15	6	NULL
LEAF_NODE	339:15	339:15	7	NULL
LEAF_NODE	339:19	339:19	4	)
STATEMENTS	340:2	340:2	4	
EXPR_STATEMENT	340:2	340:33	5	fprintf ( stderr , "%s: " , module ) ;
EXPR	340:2	340:2	6	fprintf ( stderr , "%s: " , module )
FUNCTION_CALL	340:2	340:32	7	fprintf ( stderr , "%s: " , module )
CALLEE	340:2	340:2	8	fprintf
LEAF_NODE	340:2	340:2	9	fprintf
LEAF_NODE	340:9	340:9	8	(
ARGUMENT	340:10	340:10	8	stderr
FIELD	340:10	340:10	9	stderr
LEAF_NODE	340:10	340:10	10	stderr
LEAF_NODE	340:16	340:16	8	,
ARGUMENT	340:18	340:18	8	"%s: "
FIELD	340:18	340:18	9	"%s: "
LEAF_NODE	340:18	340:18	10	"%s: "
LEAF_NODE	340:24	340:24	8	,
ARGUMENT	340:26	340:26	8	module
FIELD	340:26	340:26	9	module
LEAF_NODE	340:26	340:26	10	module
LEAF_NODE	340:32	340:32	8	)
LEAF_NODE	340:33	340:33	6	;
EXPR_STATEMENT	341:1	341:26	3	vfprintf ( stderr , fmt , ap ) ;
EXPR	341:1	341:1	4	vfprintf ( stderr , fmt , ap )
FUNCTION_CALL	341:1	341:25	5	vfprintf ( stderr , fmt , ap )
CALLEE	341:1	341:1	6	vfprintf
LEAF_NODE	341:1	341:1	7	vfprintf
LEAF_NODE	341:9	341:9	6	(
ARGUMENT	341:10	341:10	6	stderr
FIELD	341:10	341:10	7	stderr
LEAF_NODE	341:10	341:10	8	stderr
LEAF_NODE	341:16	341:16	6	,
ARGUMENT	341:18	341:18	6	fmt
FIELD	341:18	341:18	7	fmt
LEAF_NODE	341:18	341:18	8	fmt
LEAF_NODE	341:21	341:21	6	,
ARGUMENT	341:23	341:23	6	ap
FIELD	341:23	341:23	7	ap
LEAF_NODE	341:23	341:23	8	ap
LEAF_NODE	341:25	341:25	6	)
LEAF_NODE	341:26	341:26	4	;
EXPR_STATEMENT	342:1	342:23	3	fprintf ( stderr , ".\n" ) ;
EXPR	342:1	342:1	4	fprintf ( stderr , ".\n" )
FUNCTION_CALL	342:1	342:22	5	fprintf ( stderr , ".\n" )
CALLEE	342:1	342:1	6	fprintf
LEAF_NODE	342:1	342:1	7	fprintf
LEAF_NODE	342:8	342:8	6	(
ARGUMENT	342:9	342:9	6	stderr
FIELD	342:9	342:9	7	stderr
LEAF_NODE	342:9	342:9	8	stderr
LEAF_NODE	342:15	342:15	6	,
ARGUMENT	342:17	342:17	6	".\n"
FIELD	342:17	342:17	7	".\n"
LEAF_NODE	342:17	342:17	8	".\n"
LEAF_NODE	342:22	342:22	6	)
LEAF_NODE	342:23	342:23	4	;
LEAF_NODE	343:0	343:0	2	}
SIMPLE_DECL	345:45	349:0	1	vmsErrorHandler asm ; asm asm ( "_$$PsectAttributes_NOSHR$$_TIFFerrorHandler" ) ;
VAR_DECL	345:45	347:0	2	vmsErrorHandler asm ; asm asm ( "_$$PsectAttributes_NOSHR$$_TIFFerrorHandler" )
TYPE	345:45	345:45	3	vmsErrorHandler
TYPE_NAME	345:45	345:45	4	vmsErrorHandler
LEAF_NODE	345:45	345:45	5	vmsErrorHandler
NAME	347:0	347:0	3	asm
LEAF_NODE	347:0	347:0	4	asm
LEAF_NODE	0:0	0:0	3	;
INIT	347:0	347:0	3	asm asm ( "_$$PsectAttributes_NOSHR$$_TIFFerrorHandler" )
ASSIGN	347:0	347:3	4	asm asm ( "_$$PsectAttributes_NOSHR$$_TIFFerrorHandler" )
LVAL	347:0	347:0	5	asm
NAME	347:0	347:0	6	asm
LEAF_NODE	347:0	347:0	7	asm
ASSIGN_OP	347:0	347:0	5	asm
NAME	347:0	347:0	6	asm
LEAF_NODE	347:0	347:0	7	asm
RVAL	347:3	347:49	5	( "_$$PsectAttributes_NOSHR$$_TIFFerrorHandler" )
LEAF_NODE	347:3	347:3	6	(
EXPR	347:4	347:4	6	"_$$PsectAttributes_NOSHR$$_TIFFerrorHandler"
FIELD	347:4	347:4	7	"_$$PsectAttributes_NOSHR$$_TIFFerrorHandler"
LEAF_NODE	347:4	347:4	8	"_$$PsectAttributes_NOSHR$$_TIFFerrorHandler"
LEAF_NODE	347:49	347:49	6	)
LEAF_NODE	349:0	349:0	2	;
SIMPLE_DECL	355:8	360:12	1	struct ieeedouble BASE_CLASSES { unsigned long mant2 ; unsigned long mant : 20 , exp : 11 , sign : 1 ; } ieeedouble ;
VAR_DECL	355:8	360:2	2	struct ieeedouble BASE_CLASSES { unsigned long mant2 ; unsigned long mant : 20 , exp : 11 , sign : 1 ; } ieeedouble
TYPE	355:8	355:8	3	struct ieeedouble BASE_CLASSES { unsigned long mant2 ; unsigned long mant : 20 , exp : 11 , sign : 1 ; }
CLASS_DEF	355:8	360:0	4	struct ieeedouble BASE_CLASSES { unsigned long mant2 ; unsigned long mant : 20 , exp : 11 , sign : 1 ; }
LEAF_NODE	355:8	355:8	5	struct
CLASS_NAME	355:15	355:15	5	ieeedouble
LEAF_NODE	355:15	355:15	6	ieeedouble
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	355:26	355:26	5	{
CLASS_CONTENT	356:1	359:10	5	unsigned long mant2 ; unsigned long mant : 20 , exp : 11 , sign : 1 ;
SIMPLE_DECL	356:1	356:20	6	unsigned long mant2 ;
VAR_DECL	356:1	356:15	7	unsigned long mant2
TYPE	356:1	356:1	8	unsigned long
TYPE_NAME	356:1	356:10	9	unsigned long
LEAF_NODE	356:1	356:1	10	unsigned
LEAF_NODE	356:10	356:10	10	long
NAME	356:15	356:15	8	mant2
LEAF_NODE	356:15	356:15	9	mant2
LEAF_NODE	356:20	356:20	7	;
LEAF_NODE	357:1	357:1	6	unsigned
LEAF_NODE	357:10	357:10	6	long
LABEL	357:15	357:20	6	mant :
LEAF_NODE	357:15	357:15	7	mant
LEAF_NODE	357:20	357:20	7	:
LEAF_NODE	357:22	357:22	6	20
LEAF_NODE	357:24	357:24	6	,
LABEL	358:2	358:6	6	exp :
LEAF_NODE	358:2	358:2	7	exp
LEAF_NODE	358:6	358:6	7	:
LEAF_NODE	358:8	358:8	6	11
LEAF_NODE	358:10	358:10	6	,
LABEL	359:2	359:7	6	sign :
LEAF_NODE	359:2	359:2	7	sign
LEAF_NODE	359:7	359:7	7	:
LEAF_NODE	359:9	359:9	6	1
LEAF_NODE	359:10	359:10	6	;
LEAF_NODE	360:0	360:0	5	}
NAME	360:2	360:2	3	ieeedouble
LEAF_NODE	360:2	360:2	4	ieeedouble
LEAF_NODE	360:12	360:12	2	;
SIMPLE_DECL	361:8	365:11	1	struct ieeefloat BASE_CLASSES { unsigned long mant : 23 , exp : 8 , sign : 1 ; } ieeefloat ;
VAR_DECL	361:8	365:2	2	struct ieeefloat BASE_CLASSES { unsigned long mant : 23 , exp : 8 , sign : 1 ; } ieeefloat
TYPE	361:8	361:8	3	struct ieeefloat BASE_CLASSES { unsigned long mant : 23 , exp : 8 , sign : 1 ; }
CLASS_DEF	361:8	365:0	4	struct ieeefloat BASE_CLASSES { unsigned long mant : 23 , exp : 8 , sign : 1 ; }
LEAF_NODE	361:8	361:8	5	struct
CLASS_NAME	361:15	361:15	5	ieeefloat
LEAF_NODE	361:15	361:15	6	ieeefloat
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	361:25	361:25	5	{
CLASS_CONTENT	362:1	364:10	5	unsigned long mant : 23 , exp : 8 , sign : 1 ;
LEAF_NODE	362:1	362:1	6	unsigned
LEAF_NODE	362:10	362:10	6	long
LABEL	362:17	362:22	6	mant :
LEAF_NODE	362:17	362:17	7	mant
LEAF_NODE	362:22	362:22	7	:
LEAF_NODE	362:24	362:24	6	23
LEAF_NODE	362:26	362:26	6	,
LABEL	363:2	363:6	6	exp :
LEAF_NODE	363:2	363:2	7	exp
LEAF_NODE	363:6	363:6	7	:
LEAF_NODE	363:8	363:8	6	8
LEAF_NODE	363:9	363:9	6	,
LABEL	364:2	364:7	6	sign :
LEAF_NODE	364:2	364:2	7	sign
LEAF_NODE	364:7	364:7	7	:
LEAF_NODE	364:9	364:9	6	1
LEAF_NODE	364:10	364:10	6	;
LEAF_NODE	365:0	365:0	5	}
NAME	365:2	365:2	3	ieeefloat
LEAF_NODE	365:2	365:2	4	ieeefloat
LEAF_NODE	365:11	365:11	2	;
SIMPLE_DECL	372:8	379:14	1	struct CLASS_NAME BASE_CLASSES { unsigned long mant1 : 7 , exp : 8 , sign : 1 , mant2 : 16 , mant3 : 16 , mant4 : 16 ; } nativedouble ;
VAR_DECL	372:8	379:2	2	struct CLASS_NAME BASE_CLASSES { unsigned long mant1 : 7 , exp : 8 , sign : 1 , mant2 : 16 , mant3 : 16 , mant4 : 16 ; } nativedouble
TYPE	372:8	372:8	3	struct CLASS_NAME BASE_CLASSES { unsigned long mant1 : 7 , exp : 8 , sign : 1 , mant2 : 16 , mant3 : 16 , mant4 : 16 ; }
CLASS_DEF	372:8	379:0	4	struct CLASS_NAME BASE_CLASSES { unsigned long mant1 : 7 , exp : 8 , sign : 1 , mant2 : 16 , mant3 : 16 , mant4 : 16 ; }
LEAF_NODE	372:8	372:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	372:15	372:15	5	{
CLASS_CONTENT	373:1	378:14	5	unsigned long mant1 : 7 , exp : 8 , sign : 1 , mant2 : 16 , mant3 : 16 , mant4 : 16 ;
LEAF_NODE	373:1	373:1	6	unsigned
LEAF_NODE	373:10	373:10	6	long
LABEL	373:15	373:21	6	mant1 :
LEAF_NODE	373:15	373:15	7	mant1
LEAF_NODE	373:21	373:21	7	:
LEAF_NODE	373:23	373:23	6	7
LEAF_NODE	373:24	373:24	6	,
LABEL	374:2	374:6	6	exp :
LEAF_NODE	374:2	374:2	7	exp
LEAF_NODE	374:6	374:6	7	:
LEAF_NODE	374:8	374:8	6	8
LEAF_NODE	374:9	374:9	6	,
LABEL	375:2	375:7	6	sign :
LEAF_NODE	375:2	375:2	7	sign
LEAF_NODE	375:7	375:7	7	:
LEAF_NODE	375:9	375:9	6	1
LEAF_NODE	375:10	375:10	6	,
LABEL	376:2	376:8	6	mant2 :
LEAF_NODE	376:2	376:2	7	mant2
LEAF_NODE	376:8	376:8	7	:
LEAF_NODE	376:10	376:10	6	16
LEAF_NODE	376:12	376:12	6	,
LABEL	377:2	377:10	6	mant3 :
LEAF_NODE	377:2	377:2	7	mant3
LEAF_NODE	377:10	377:10	7	:
LEAF_NODE	377:12	377:12	6	16
LEAF_NODE	377:14	377:14	6	,
LABEL	378:2	378:10	6	mant4 :
LEAF_NODE	378:2	378:2	7	mant4
LEAF_NODE	378:10	378:10	7	:
LEAF_NODE	378:12	378:12	6	16
LEAF_NODE	378:14	378:14	6	;
LEAF_NODE	379:0	379:0	5	}
NAME	379:2	379:2	3	nativedouble
LEAF_NODE	379:2	379:2	4	nativedouble
LEAF_NODE	379:14	379:14	2	;
SIMPLE_DECL	380:8	385:13	1	struct CLASS_NAME BASE_CLASSES { unsigned long mant1 : 7 , exp : 8 , sign : 1 , mant2 : 16 ; } nativefloat ;
VAR_DECL	380:8	385:2	2	struct CLASS_NAME BASE_CLASSES { unsigned long mant1 : 7 , exp : 8 , sign : 1 , mant2 : 16 ; } nativefloat
TYPE	380:8	380:8	3	struct CLASS_NAME BASE_CLASSES { unsigned long mant1 : 7 , exp : 8 , sign : 1 , mant2 : 16 ; }
CLASS_DEF	380:8	385:0	4	struct CLASS_NAME BASE_CLASSES { unsigned long mant1 : 7 , exp : 8 , sign : 1 , mant2 : 16 ; }
LEAF_NODE	380:8	380:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	380:15	380:15	5	{
CLASS_CONTENT	381:1	384:12	5	unsigned long mant1 : 7 , exp : 8 , sign : 1 , mant2 : 16 ;
LEAF_NODE	381:1	381:1	6	unsigned
LEAF_NODE	381:10	381:10	6	long
LABEL	381:15	381:21	6	mant1 :
LEAF_NODE	381:15	381:15	7	mant1
LEAF_NODE	381:21	381:21	7	:
LEAF_NODE	381:23	381:23	6	7
LEAF_NODE	381:24	381:24	6	,
LABEL	382:2	382:6	6	exp :
LEAF_NODE	382:2	382:2	7	exp
LEAF_NODE	382:6	382:6	7	:
LEAF_NODE	382:8	382:8	6	8
LEAF_NODE	382:9	382:9	6	,
LABEL	383:2	383:7	6	sign :
LEAF_NODE	383:2	383:2	7	sign
LEAF_NODE	383:7	383:7	7	:
LEAF_NODE	383:9	383:9	6	1
LEAF_NODE	383:10	383:10	6	,
LABEL	384:2	384:8	6	mant2 :
LEAF_NODE	384:2	384:2	7	mant2
LEAF_NODE	384:8	384:8	7	:
LEAF_NODE	384:10	384:10	6	16
LEAF_NODE	384:12	384:12	6	;
LEAF_NODE	385:0	385:0	5	}
NAME	385:2	385:2	3	nativefloat
LEAF_NODE	385:2	385:2	4	nativefloat
LEAF_NODE	385:13	385:13	2	;
SIMPLE_DECL	387:8	393:10	1	union CLASS_NAME BASE_CLASSES { ieeedouble ieee ; nativedouble native ; char [ 8 ] b ; uint32 [ 2 ] l ; double d ; } double_t ;
VAR_DECL	387:8	393:2	2	union CLASS_NAME BASE_CLASSES { ieeedouble ieee ; nativedouble native ; char [ 8 ] b ; uint32 [ 2 ] l ; double d ; } double_t
TYPE	387:8	387:8	3	union CLASS_NAME BASE_CLASSES { ieeedouble ieee ; nativedouble native ; char [ 8 ] b ; uint32 [ 2 ] l ; double d ; }
CLASS_DEF	387:8	393:0	4	union CLASS_NAME BASE_CLASSES { ieeedouble ieee ; nativedouble native ; char [ 8 ] b ; uint32 [ 2 ] l ; double d ; }
LEAF_NODE	387:8	387:8	5	union
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	387:14	387:14	5	{
CLASS_CONTENT	388:1	392:1	5	ieeedouble ieee ; nativedouble native ; char [ 8 ] b ; uint32 [ 2 ] l ; double d ;
SIMPLE_DECL	388:1	388:16	6	ieeedouble ieee ;
VAR_DECL	388:1	388:12	7	ieeedouble ieee
TYPE	388:1	388:1	8	ieeedouble
TYPE_NAME	388:1	388:1	9	ieeedouble
LEAF_NODE	388:1	388:1	10	ieeedouble
NAME	388:12	388:12	8	ieee
LEAF_NODE	388:12	388:12	9	ieee
LEAF_NODE	388:16	388:16	7	;
SIMPLE_DECL	389:1	389:20	6	nativedouble native ;
VAR_DECL	389:1	389:14	7	nativedouble native
TYPE	389:1	389:1	8	nativedouble
TYPE_NAME	389:1	389:1	9	nativedouble
LEAF_NODE	389:1	389:1	10	nativedouble
NAME	389:14	389:14	8	native
LEAF_NODE	389:14	389:14	9	native
LEAF_NODE	389:20	389:20	7	;
SIMPLE_DECL	390:1	390:11	6	char [ 8 ] b ;
VAR_DECL	390:1	390:7	7	char [ 8 ] b
TYPE	390:1	390:8	8	char [ 8 ]
TYPE_NAME	390:1	390:1	9	char
LEAF_NODE	390:1	390:1	10	char
TYPE_SUFFIX	390:8	390:10	9	[ 8 ]
LEAF_NODE	390:8	390:8	10	[
FIELD	390:9	390:9	10	8
LEAF_NODE	390:9	390:9	11	8
LEAF_NODE	390:10	390:10	10	]
NAME	390:7	390:7	8	b
LEAF_NODE	390:7	390:7	9	b
LEAF_NODE	390:11	390:11	7	;
SIMPLE_DECL	391:1	391:13	6	uint32 [ 2 ] l ;
VAR_DECL	391:1	391:9	7	uint32 [ 2 ] l
TYPE	391:1	391:10	8	uint32 [ 2 ]
TYPE_NAME	391:1	391:1	9	uint32
LEAF_NODE	391:1	391:1	10	uint32
TYPE_SUFFIX	391:10	391:12	9	[ 2 ]
LEAF_NODE	391:10	391:10	10	[
FIELD	391:11	391:11	10	2
LEAF_NODE	391:11	391:11	11	2
LEAF_NODE	391:12	391:12	10	]
NAME	391:9	391:9	8	l
LEAF_NODE	391:9	391:9	9	l
LEAF_NODE	391:13	391:13	7	;
SIMPLE_DECL	392:1	392:10	6	double d ;
VAR_DECL	392:1	392:9	7	double d
TYPE	392:1	392:1	8	double
TYPE_NAME	392:1	392:1	9	double
LEAF_NODE	392:1	392:1	10	double
NAME	392:9	392:9	8	d
LEAF_NODE	392:9	392:9	9	d
LEAF_NODE	392:10	392:10	7	;
LEAF_NODE	393:0	393:0	5	}
NAME	393:2	393:2	3	double_t
LEAF_NODE	393:2	393:2	4	double_t
LEAF_NODE	393:10	393:10	2	;
SIMPLE_DECL	395:8	401:9	1	union CLASS_NAME BASE_CLASSES { ieeefloat ieee ; nativefloat native ; char [ 4 ] b ; uint32 l ; float f ; } float_t ;
VAR_DECL	395:8	401:2	2	union CLASS_NAME BASE_CLASSES { ieeefloat ieee ; nativefloat native ; char [ 4 ] b ; uint32 l ; float f ; } float_t
TYPE	395:8	395:8	3	union CLASS_NAME BASE_CLASSES { ieeefloat ieee ; nativefloat native ; char [ 4 ] b ; uint32 l ; float f ; }
CLASS_DEF	395:8	401:0	4	union CLASS_NAME BASE_CLASSES { ieeefloat ieee ; nativefloat native ; char [ 4 ] b ; uint32 l ; float f ; }
LEAF_NODE	395:8	395:8	5	union
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	395:14	395:14	5	{
CLASS_CONTENT	396:1	400:1	5	ieeefloat ieee ; nativefloat native ; char [ 4 ] b ; uint32 l ; float f ;
SIMPLE_DECL	396:1	396:15	6	ieeefloat ieee ;
VAR_DECL	396:1	396:11	7	ieeefloat ieee
TYPE	396:1	396:1	8	ieeefloat
TYPE_NAME	396:1	396:1	9	ieeefloat
LEAF_NODE	396:1	396:1	10	ieeefloat
NAME	396:11	396:11	8	ieee
LEAF_NODE	396:11	396:11	9	ieee
LEAF_NODE	396:15	396:15	7	;
SIMPLE_DECL	397:1	397:19	6	nativefloat native ;
VAR_DECL	397:1	397:13	7	nativefloat native
TYPE	397:1	397:1	8	nativefloat
TYPE_NAME	397:1	397:1	9	nativefloat
LEAF_NODE	397:1	397:1	10	nativefloat
NAME	397:13	397:13	8	native
LEAF_NODE	397:13	397:13	9	native
LEAF_NODE	397:19	397:19	7	;
SIMPLE_DECL	398:1	398:11	6	char [ 4 ] b ;
VAR_DECL	398:1	398:7	7	char [ 4 ] b
TYPE	398:1	398:8	8	char [ 4 ]
TYPE_NAME	398:1	398:1	9	char
LEAF_NODE	398:1	398:1	10	char
TYPE_SUFFIX	398:8	398:10	9	[ 4 ]
LEAF_NODE	398:8	398:8	10	[
FIELD	398:9	398:9	10	4
LEAF_NODE	398:9	398:9	11	4
LEAF_NODE	398:10	398:10	10	]
NAME	398:7	398:7	8	b
LEAF_NODE	398:7	398:7	9	b
LEAF_NODE	398:11	398:11	7	;
SIMPLE_DECL	399:1	399:10	6	uint32 l ;
VAR_DECL	399:1	399:9	7	uint32 l
TYPE	399:1	399:1	8	uint32
TYPE_NAME	399:1	399:1	9	uint32
LEAF_NODE	399:1	399:1	10	uint32
NAME	399:9	399:9	8	l
LEAF_NODE	399:9	399:9	9	l
LEAF_NODE	399:10	399:10	7	;
SIMPLE_DECL	400:1	400:9	6	float f ;
VAR_DECL	400:1	400:8	7	float f
TYPE	400:1	400:1	8	float
TYPE_NAME	400:1	400:1	9	float
LEAF_NODE	400:1	400:1	10	float
NAME	400:8	400:8	8	f
LEAF_NODE	400:8	400:8	9	f
LEAF_NODE	400:9	400:9	7	;
LEAF_NODE	401:0	401:0	5	}
NAME	401:2	401:2	3	float_t
LEAF_NODE	401:2	401:2	4	float_t
LEAF_NODE	401:9	401:9	2	;
FUNCTION_DEF	433:7	471:0	1	
RETURN_TYPE	433:7	433:14	2	static void
LEAF_NODE	433:7	433:7	3	static
TYPE_NAME	433:14	433:14	3	void
LEAF_NODE	433:14	433:14	4	void
FUNCTION_NAME	434:0	434:0	2	ieeetod
LEAF_NODE	434:0	434:0	3	ieeetod
PARAMETER_LIST	434:7	434:18	2	( double * dp )
LEAF_NODE	434:7	434:7	3	(
PARAMETER_DECL	434:8	434:16	3	double * dp
TYPE	434:8	434:15	4	double *
TYPE_NAME	434:8	434:8	5	double
LEAF_NODE	434:8	434:8	6	double
POINTER	434:15	434:15	5	*
LEAF_NODE	434:15	434:15	6	*
NAME	434:16	434:16	4	dp
LEAF_NODE	434:16	434:16	5	dp
LEAF_NODE	434:18	434:18	3	)
LEAF_NODE	435:0	435:0	2	{
STATEMENTS	436:1	470:1	2	
SIMPLE_DECL	436:1	436:16	3	double_t source ;
VAR_DECL	436:1	436:10	4	double_t source
TYPE	436:1	436:1	5	double_t
TYPE_NAME	436:1	436:1	6	double_t
LEAF_NODE	436:1	436:1	7	double_t
NAME	436:10	436:10	5	source
LEAF_NODE	436:10	436:10	6	source
LEAF_NODE	436:16	436:16	4	;
SIMPLE_DECL	437:1	437:19	3	long sign , long exp , long mant ;
INIT_DECL_LIST	437:1	437:1	4	long sign , long exp , long mant
VAR_DECL	437:1	437:6	5	long sign
TYPE	437:1	437:1	6	long
TYPE_NAME	437:1	437:1	7	long
LEAF_NODE	437:1	437:1	8	long
NAME	437:6	437:6	6	sign
LEAF_NODE	437:6	437:6	7	sign
LEAF_NODE	437:10	437:10	5	,
INIT_DECL_LIST	437:1	437:1	5	long exp , long mant
VAR_DECL	437:1	437:11	6	long exp
TYPE	437:1	437:1	7	long
TYPE_NAME	437:1	437:1	8	long
LEAF_NODE	437:1	437:1	9	long
NAME	437:11	437:11	7	exp
LEAF_NODE	437:11	437:11	8	exp
LEAF_NODE	437:14	437:14	6	,
VAR_DECL	437:1	437:15	6	long mant
TYPE	437:1	437:1	7	long
TYPE_NAME	437:1	437:1	8	long
LEAF_NODE	437:1	437:1	9	long
NAME	437:15	437:15	7	mant
LEAF_NODE	437:15	437:15	8	mant
LEAF_NODE	437:19	437:19	4	;
SIMPLE_DECL	438:1	438:13	3	double dmant ;
VAR_DECL	438:1	438:8	4	double dmant
TYPE	438:1	438:1	5	double
TYPE_NAME	438:1	438:1	6	double
LEAF_NODE	438:1	438:1	7	double
NAME	438:8	438:8	5	dmant
LEAF_NODE	438:8	438:8	6	dmant
LEAF_NODE	438:13	438:13	4	;
EXPR_STATEMENT	440:1	440:36	3	source . ieee = ( ( double_t * ) dp ) -> ieee ;
EXPR	440:1	440:1	4	source . ieee = ( ( double_t * ) dp ) -> ieee
ASSIGN	440:1	440:15	5	source . ieee = ( ( double_t * ) dp ) -> ieee
LVAL	440:1	440:1	6	source . ieee
FIELD	440:1	440:8	7	source . ieee
LEAF_NODE	440:1	440:1	8	source
LEAF_NODE	440:7	440:7	8	.
LEAF_NODE	440:8	440:8	8	ieee
ASSIGN_OP	440:13	440:13	6	=
LEAF_NODE	440:13	440:13	7	=
RVAL	440:15	440:32	6	( ( double_t * ) dp ) -> ieee
LEAF_NODE	440:15	440:15	7	(
LEAF_NODE	440:16	440:16	7	(
TYPE_NAME	440:17	440:17	7	double_t
LEAF_NODE	440:17	440:17	8	double_t
LEAF_NODE	440:25	440:25	7	*
LEAF_NODE	440:26	440:26	7	)
FIELD	440:27	440:27	7	dp
LEAF_NODE	440:27	440:27	8	dp
LEAF_NODE	440:29	440:29	7	)
LEAF_NODE	440:30	440:30	7	->
LEAF_NODE	440:32	440:32	7	ieee
LEAF_NODE	440:36	440:36	4	;
EXPR_STATEMENT	441:1	441:24	3	sign = source . ieee . sign ;
EXPR	441:1	441:1	4	sign = source . ieee . sign
ASSIGN	441:1	441:8	5	sign = source . ieee . sign
LVAL	441:1	441:1	6	sign
FIELD	441:1	441:1	7	sign
LEAF_NODE	441:1	441:1	8	sign
ASSIGN_OP	441:6	441:6	6	=
LEAF_NODE	441:6	441:6	7	=
RVAL	441:8	441:8	6	source . ieee . sign
FIELD	441:8	441:20	7	source . ieee . sign
LEAF_NODE	441:8	441:8	8	source
LEAF_NODE	441:14	441:14	8	.
LEAF_NODE	441:15	441:15	8	ieee
LEAF_NODE	441:19	441:19	8	.
LEAF_NODE	441:20	441:20	8	sign
LEAF_NODE	441:24	441:24	4	;
EXPR_STATEMENT	442:1	442:22	3	exp = source . ieee . exp ;
EXPR	442:1	442:1	4	exp = source . ieee . exp
ASSIGN	442:1	442:7	5	exp = source . ieee . exp
LVAL	442:1	442:1	6	exp
FIELD	442:1	442:1	7	exp
LEAF_NODE	442:1	442:1	8	exp
ASSIGN_OP	442:5	442:5	6	=
LEAF_NODE	442:5	442:5	7	=
RVAL	442:7	442:7	6	source . ieee . exp
FIELD	442:7	442:19	7	source . ieee . exp
LEAF_NODE	442:7	442:7	8	source
LEAF_NODE	442:13	442:13	8	.
LEAF_NODE	442:14	442:14	8	ieee
LEAF_NODE	442:18	442:18	8	.
LEAF_NODE	442:19	442:19	8	exp
LEAF_NODE	442:22	442:22	4	;
EXPR_STATEMENT	443:1	443:24	3	mant = source . ieee . mant ;
EXPR	443:1	443:1	4	mant = source . ieee . mant
ASSIGN	443:1	443:8	5	mant = source . ieee . mant
LVAL	443:1	443:1	6	mant
FIELD	443:1	443:1	7	mant
LEAF_NODE	443:1	443:1	8	mant
ASSIGN_OP	443:6	443:6	6	=
LEAF_NODE	443:6	443:6	7	=
RVAL	443:8	443:8	6	source . ieee . mant
FIELD	443:8	443:20	7	source . ieee . mant
LEAF_NODE	443:8	443:8	8	source
LEAF_NODE	443:14	443:14	8	.
LEAF_NODE	443:15	443:15	8	ieee
LEAF_NODE	443:19	443:19	8	.
LEAF_NODE	443:20	443:20	8	mant
LEAF_NODE	443:24	443:24	4	;
SELECTION	445:1	445:18	3	
KEYWORD	445:1	445:1	4	if
LEAF_NODE	445:1	445:1	5	if
LEAF_NODE	445:4	445:4	4	(
CONDITION	445:5	445:5	4	exp == 2047
EXPR	445:5	445:12	5	exp == 2047
FIELD	445:5	445:5	6	exp
LEAF_NODE	445:5	445:5	7	exp
EQ_OPERATOR	445:9	445:9	6	==
LEAF_NODE	445:9	445:9	7	==
FIELD	445:12	445:12	6	2047
LEAF_NODE	445:12	445:12	7	2047
LEAF_NODE	445:16	445:16	4	)
STATEMENTS	445:18	451:1	4	
LEAF_NODE	445:18	445:18	5	{
STATEMENTS	446:2	450:2	5	
SELECTION	446:2	447:3	6	
KEYWORD	446:2	446:2	7	if
LEAF_NODE	446:2	446:2	8	if
LEAF_NODE	446:5	446:5	7	(
CONDITION	446:6	446:6	7	mant
EXPR	446:6	446:6	8	mant
FIELD	446:6	446:6	9	mant
LEAF_NODE	446:6	446:6	10	mant
LEAF_NODE	446:10	446:10	7	)
STATEMENTS	447:3	447:3	7	
EXPR_STATEMENT	447:3	447:17	8	* dp = HUGE_VAL ;
EXPR	447:3	447:3	9	* dp = HUGE_VAL
ASSIGN	447:3	447:9	10	* dp = HUGE_VAL
LVAL	447:3	447:3	11	* dp
UNARY_EXPR	447:3	447:4	12	* dp
UNARY_OPERATOR	447:3	447:3	13	*
LEAF_NODE	447:3	447:3	14	*
FIELD	447:4	447:4	13	dp
LEAF_NODE	447:4	447:4	14	dp
ASSIGN_OP	447:7	447:7	11	=
LEAF_NODE	447:7	447:7	12	=
RVAL	447:9	447:9	11	HUGE_VAL
FIELD	447:9	447:9	12	HUGE_VAL
LEAF_NODE	447:9	447:9	13	HUGE_VAL
LEAF_NODE	447:17	447:17	9	;
SELECTION	448:2	449:3	6	
KEYWORD	448:2	448:2	7	else
LEAF_NODE	448:2	448:2	8	else
STATEMENTS	449:3	449:3	7	
EXPR_STATEMENT	449:3	449:38	8	* dp = ( sign ? - HUGE_VAL : HUGE_VAL ) ;
EXPR	449:3	449:3	9	* dp = ( sign ? - HUGE_VAL : HUGE_VAL )
ASSIGN	449:3	449:9	10	* dp = ( sign ? - HUGE_VAL : HUGE_VAL )
LVAL	449:3	449:3	11	* dp
UNARY_EXPR	449:3	449:4	12	* dp
UNARY_OPERATOR	449:3	449:3	13	*
LEAF_NODE	449:3	449:3	14	*
FIELD	449:4	449:4	13	dp
LEAF_NODE	449:4	449:4	14	dp
ASSIGN_OP	449:7	449:7	11	=
LEAF_NODE	449:7	449:7	12	=
RVAL	449:9	449:37	11	( sign ? - HUGE_VAL : HUGE_VAL )
LEAF_NODE	449:9	449:9	12	(
COND_EXPR	449:10	449:29	12	sign ? - HUGE_VAL : HUGE_VAL
CONDITION	449:10	449:10	13	sign
FIELD	449:10	449:10	14	sign
LEAF_NODE	449:10	449:10	15	sign
LEAF_NODE	449:15	449:15	13	?
EXPR	449:17	449:17	13	- HUGE_VAL
UNARY_EXPR	449:17	449:18	14	- HUGE_VAL
UNARY_OPERATOR	449:17	449:17	15	-
LEAF_NODE	449:17	449:17	16	-
FIELD	449:18	449:18	15	HUGE_VAL
LEAF_NODE	449:18	449:18	16	HUGE_VAL
LEAF_NODE	449:27	449:27	13	:
FIELD	449:29	449:29	13	HUGE_VAL
LEAF_NODE	449:29	449:29	14	HUGE_VAL
LEAF_NODE	449:37	449:37	12	)
LEAF_NODE	449:38	449:38	9	;
JUMP_STATEMENT	450:2	450:8	6	return DESTINATION ;
KEYWORD	450:2	450:2	7	return
LEAF_NODE	450:2	450:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	450:8	450:8	7	;
LEAF_NODE	451:1	451:1	5	}
SELECTION	452:1	452:11	3	
KEYWORD	452:1	452:1	4	if
LEAF_NODE	452:1	452:1	5	if
LEAF_NODE	452:4	452:4	4	(
CONDITION	452:5	452:5	4	! exp
EXPR	452:5	452:5	5	! exp
UNARY_EXPR	452:5	452:6	6	! exp
UNARY_OPERATOR	452:5	452:5	7	!
LEAF_NODE	452:5	452:5	8	!
FIELD	452:6	452:6	7	exp
LEAF_NODE	452:6	452:6	8	exp
LEAF_NODE	452:9	452:9	4	)
STATEMENTS	452:11	460:1	4	
LEAF_NODE	452:11	452:11	5	{
STATEMENTS	453:2	456:4	5	
SELECTION	453:2	453:36	6	
KEYWORD	453:2	453:2	7	if
LEAF_NODE	453:2	453:2	8	if
LEAF_NODE	453:5	453:5	7	(
CONDITION	453:6	453:6	7	! ( mant || source . ieee . mant2 )
EXPR	453:6	453:6	8	! ( mant || source . ieee . mant2 )
UNARY_EXPR	453:6	453:33	9	! ( mant || source . ieee . mant2 )
UNARY_OPERATOR	453:6	453:6	10	!
LEAF_NODE	453:6	453:6	11	!
LEAF_NODE	453:7	453:7	10	(
OR	453:8	453:16	10	mant || source . ieee . mant2
EXPR	453:8	453:8	11	mant
FIELD	453:8	453:8	12	mant
LEAF_NODE	453:8	453:8	13	mant
LEAF_NODE	453:13	453:13	11	||
EXPR	453:16	453:16	11	source . ieee . mant2
FIELD	453:16	453:28	12	source . ieee . mant2
LEAF_NODE	453:16	453:16	13	source
LEAF_NODE	453:22	453:22	13	.
LEAF_NODE	453:23	453:23	13	ieee
LEAF_NODE	453:27	453:27	13	.
LEAF_NODE	453:28	453:28	13	mant2
LEAF_NODE	453:33	453:33	10	)
LEAF_NODE	453:34	453:34	7	)
STATEMENTS	453:36	456:2	7	
LEAF_NODE	453:36	453:36	8	{
STATEMENTS	454:3	455:3	8	
EXPR_STATEMENT	454:3	454:8	9	* dp = 0 ;
EXPR	454:3	454:3	10	* dp = 0
ASSIGN	454:3	454:7	11	* dp = 0
LVAL	454:3	454:3	12	* dp
UNARY_EXPR	454:3	454:4	13	* dp
UNARY_OPERATOR	454:3	454:3	14	*
LEAF_NODE	454:3	454:3	15	*
FIELD	454:4	454:4	14	dp
LEAF_NODE	454:4	454:4	15	dp
ASSIGN_OP	454:6	454:6	12	=
LEAF_NODE	454:6	454:6	13	=
RVAL	454:7	454:7	12	0
FIELD	454:7	454:7	13	0
LEAF_NODE	454:7	454:7	14	0
LEAF_NODE	454:8	454:8	10	;
JUMP_STATEMENT	455:3	455:9	9	return DESTINATION ;
KEYWORD	455:3	455:3	10	return
LEAF_NODE	455:3	455:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	455:9	455:9	10	;
LEAF_NODE	456:2	456:2	8	}
SELECTION	456:4	456:9	6	
KEYWORD	456:4	456:4	7	else
LEAF_NODE	456:4	456:4	8	else
STATEMENTS	456:9	459:2	7	
LEAF_NODE	456:9	456:9	8	{
STATEMENTS	458:3	458:3	8	
EXPR_STATEMENT	458:3	458:13	9	exp = - 1022 ;
EXPR	458:3	458:3	10	exp = - 1022
ASSIGN	458:3	458:8	11	exp = - 1022
LVAL	458:3	458:3	12	exp
FIELD	458:3	458:3	13	exp
LEAF_NODE	458:3	458:3	14	exp
ASSIGN_OP	458:6	458:6	12	=
LEAF_NODE	458:6	458:6	13	=
RVAL	458:8	458:8	12	- 1022
UNARY_EXPR	458:8	458:9	13	- 1022
UNARY_OPERATOR	458:8	458:8	14	-
LEAF_NODE	458:8	458:8	15	-
FIELD	458:9	458:9	14	1022
LEAF_NODE	458:9	458:9	15	1022
LEAF_NODE	458:13	458:13	10	;
LEAF_NODE	459:2	459:2	8	}
LEAF_NODE	460:1	460:1	5	}
SELECTION	460:3	460:8	3	
KEYWORD	460:3	460:3	4	else
LEAF_NODE	460:3	460:3	5	else
STATEMENTS	460:8	463:1	4	
LEAF_NODE	460:8	460:8	5	{
STATEMENTS	461:2	462:2	5	
EXPR_STATEMENT	461:2	461:15	6	mant |= 1 << 20 ;
EXPR	461:2	461:2	7	mant |= 1 << 20
ASSIGN	461:2	461:10	8	mant |= 1 << 20
LVAL	461:2	461:2	9	mant
FIELD	461:2	461:2	10	mant
LEAF_NODE	461:2	461:2	11	mant
ASSIGN_OP	461:7	461:7	9	|=
LEAF_NODE	461:7	461:7	10	|=
RVAL	461:10	461:13	9	1 << 20
FIELD	461:10	461:10	10	1
LEAF_NODE	461:10	461:10	11	1
LEAF_NODE	461:11	461:11	10	<<
FIELD	461:13	461:13	10	20
LEAF_NODE	461:13	461:13	11	20
LEAF_NODE	461:15	461:15	7	;
EXPR_STATEMENT	462:2	462:13	6	exp -= 1023 ;
EXPR	462:2	462:2	7	exp -= 1023
ASSIGN	462:2	462:9	8	exp -= 1023
LVAL	462:2	462:2	9	exp
FIELD	462:2	462:2	10	exp
LEAF_NODE	462:2	462:2	11	exp
ASSIGN_OP	462:6	462:6	9	-=
LEAF_NODE	462:6	462:6	10	-=
RVAL	462:9	462:9	9	1023
FIELD	462:9	462:9	10	1023
LEAF_NODE	462:9	462:9	11	1023
LEAF_NODE	462:13	462:13	7	;
LEAF_NODE	463:1	463:1	5	}
EXPR_STATEMENT	464:1	466:41	3	dmant = ( ( ( double ) mant ) + ( ( double ) source . ieee . mant2 ) / ( ( ( double ) ( 1 << 16 ) ) * ( ( double ) ( 1 << 16 ) ) ) ) / ( double ) ( 1 << 20 ) ;
EXPR	464:1	464:1	4	dmant = ( ( ( double ) mant ) + ( ( double ) source . ieee . mant2 ) / ( ( ( double ) ( 1 << 16 ) ) * ( ( double ) ( 1 << 16 ) ) ) ) / ( double ) ( 1 << 20 )
ASSIGN	464:1	464:9	5	dmant = ( ( ( double ) mant ) + ( ( double ) source . ieee . mant2 ) / ( ( ( double ) ( 1 << 16 ) ) * ( ( double ) ( 1 << 16 ) ) ) ) / ( double ) ( 1 << 20 )
LVAL	464:1	464:1	6	dmant
FIELD	464:1	464:1	7	dmant
LEAF_NODE	464:1	464:1	8	dmant
ASSIGN_OP	464:7	464:7	6	=
LEAF_NODE	464:7	464:7	7	=
RVAL	464:9	466:40	6	( ( ( double ) mant ) + ( ( double ) source . ieee . mant2 ) / ( ( ( double ) ( 1 << 16 ) ) * ( ( double ) ( 1 << 16 ) ) ) ) / ( double ) ( 1 << 20 )
LEAF_NODE	464:9	464:9	7	(
LEAF_NODE	464:10	464:10	7	(
LEAF_NODE	464:11	464:11	7	(
TYPE_NAME	464:12	464:12	7	double
LEAF_NODE	464:12	464:12	8	double
LEAF_NODE	464:18	464:18	7	)
FIELD	464:20	464:20	7	mant
LEAF_NODE	464:20	464:20	8	mant
LEAF_NODE	464:24	464:24	7	)
LEAF_NODE	464:26	464:26	7	+
LEAF_NODE	465:2	465:2	7	(
LEAF_NODE	465:3	465:3	7	(
TYPE_NAME	465:4	465:4	7	double
LEAF_NODE	465:4	465:4	8	double
LEAF_NODE	465:10	465:10	7	)
FIELD	465:12	465:24	7	source . ieee . mant2
LEAF_NODE	465:12	465:12	8	source
LEAF_NODE	465:18	465:18	8	.
LEAF_NODE	465:19	465:19	8	ieee
LEAF_NODE	465:23	465:23	8	.
LEAF_NODE	465:24	465:24	8	mant2
LEAF_NODE	465:29	465:29	7	)
LEAF_NODE	465:31	465:31	7	/
LEAF_NODE	465:33	465:33	7	(
LEAF_NODE	465:34	465:34	7	(
LEAF_NODE	465:35	465:35	7	(
TYPE_NAME	465:36	465:36	7	double
LEAF_NODE	465:36	465:36	8	double
LEAF_NODE	465:42	465:42	7	)
LEAF_NODE	465:44	465:44	7	(
FIELD	465:45	465:45	7	1
LEAF_NODE	465:45	465:45	8	1
LEAF_NODE	465:46	465:46	7	<<
FIELD	465:48	465:48	7	16
LEAF_NODE	465:48	465:48	8	16
LEAF_NODE	465:50	465:50	7	)
LEAF_NODE	465:51	465:51	7	)
LEAF_NODE	465:53	465:53	7	*
LEAF_NODE	466:2	466:2	7	(
LEAF_NODE	466:3	466:3	7	(
TYPE_NAME	466:4	466:4	7	double
LEAF_NODE	466:4	466:4	8	double
LEAF_NODE	466:10	466:10	7	)
LEAF_NODE	466:12	466:12	7	(
FIELD	466:13	466:13	7	1
LEAF_NODE	466:13	466:13	8	1
LEAF_NODE	466:14	466:14	7	<<
FIELD	466:16	466:16	7	16
LEAF_NODE	466:16	466:16	8	16
LEAF_NODE	466:18	466:18	7	)
LEAF_NODE	466:19	466:19	7	)
LEAF_NODE	466:20	466:20	7	)
LEAF_NODE	466:21	466:21	7	)
LEAF_NODE	466:23	466:23	7	/
LEAF_NODE	466:25	466:25	7	(
TYPE_NAME	466:26	466:26	7	double
LEAF_NODE	466:26	466:26	8	double
LEAF_NODE	466:32	466:32	7	)
LEAF_NODE	466:34	466:34	7	(
FIELD	466:35	466:35	7	1
LEAF_NODE	466:35	466:35	8	1
LEAF_NODE	466:36	466:36	7	<<
FIELD	466:38	466:38	7	20
LEAF_NODE	466:38	466:38	8	20
LEAF_NODE	466:40	466:40	7	)
LEAF_NODE	466:41	466:41	4	;
EXPR_STATEMENT	467:1	467:26	3	dmant = ldexp ( dmant , exp ) ;
EXPR	467:1	467:1	4	dmant = ldexp ( dmant , exp )
ASSIGN	467:1	467:9	5	dmant = ldexp ( dmant , exp )
LVAL	467:1	467:1	6	dmant
FIELD	467:1	467:1	7	dmant
LEAF_NODE	467:1	467:1	8	dmant
ASSIGN_OP	467:7	467:7	6	=
LEAF_NODE	467:7	467:7	7	=
RVAL	467:9	467:9	6	ldexp ( dmant , exp )
FUNCTION_CALL	467:9	467:25	7	ldexp ( dmant , exp )
CALLEE	467:9	467:9	8	ldexp
LEAF_NODE	467:9	467:9	9	ldexp
LEAF_NODE	467:14	467:14	8	(
ARGUMENT	467:15	467:15	8	dmant
FIELD	467:15	467:15	9	dmant
LEAF_NODE	467:15	467:15	10	dmant
LEAF_NODE	467:20	467:20	8	,
ARGUMENT	467:22	467:22	8	exp
FIELD	467:22	467:22	9	exp
LEAF_NODE	467:22	467:22	10	exp
LEAF_NODE	467:25	467:25	8	)
LEAF_NODE	467:26	467:26	4	;
SELECTION	468:1	469:2	3	
KEYWORD	468:1	468:1	4	if
LEAF_NODE	468:1	468:1	5	if
LEAF_NODE	468:4	468:4	4	(
CONDITION	468:5	468:5	4	sign
EXPR	468:5	468:5	5	sign
FIELD	468:5	468:5	6	sign
LEAF_NODE	468:5	468:5	7	sign
LEAF_NODE	468:9	468:9	4	)
STATEMENTS	469:2	469:2	4	
EXPR_STATEMENT	469:2	469:15	5	dmant = - dmant ;
EXPR	469:2	469:2	6	dmant = - dmant
ASSIGN	469:2	469:9	7	dmant = - dmant
LVAL	469:2	469:2	8	dmant
FIELD	469:2	469:2	9	dmant
LEAF_NODE	469:2	469:2	10	dmant
ASSIGN_OP	469:7	469:7	8	=
LEAF_NODE	469:7	469:7	9	=
RVAL	469:9	469:9	8	- dmant
UNARY_EXPR	469:9	469:10	9	- dmant
UNARY_OPERATOR	469:9	469:9	10	-
LEAF_NODE	469:9	469:9	11	-
FIELD	469:10	469:10	10	dmant
LEAF_NODE	469:10	469:10	11	dmant
LEAF_NODE	469:15	469:15	6	;
EXPR_STATEMENT	470:1	470:12	3	* dp = dmant ;
EXPR	470:1	470:1	4	* dp = dmant
ASSIGN	470:1	470:7	5	* dp = dmant
LVAL	470:1	470:1	6	* dp
UNARY_EXPR	470:1	470:2	7	* dp
UNARY_OPERATOR	470:1	470:1	8	*
LEAF_NODE	470:1	470:1	9	*
FIELD	470:2	470:2	8	dp
LEAF_NODE	470:2	470:2	9	dp
ASSIGN_OP	470:5	470:5	6	=
LEAF_NODE	470:5	470:5	7	=
RVAL	470:7	470:7	6	dmant
FIELD	470:7	470:7	7	dmant
LEAF_NODE	470:7	470:7	8	dmant
LEAF_NODE	470:12	470:12	4	;
LEAF_NODE	471:0	471:0	2	}
FUNCTION_DEF	473:7	525:0	1	
RETURN_TYPE	473:7	473:14	2	static void
LEAF_NODE	473:7	473:7	3	static
TYPE_NAME	473:14	473:14	3	void
LEAF_NODE	473:14	473:14	4	void
FUNCTION_NAME	474:0	474:0	2	dtoieee
LEAF_NODE	474:0	474:0	3	dtoieee
PARAMETER_LIST	474:7	474:18	2	( double * dp )
LEAF_NODE	474:7	474:7	3	(
PARAMETER_DECL	474:8	474:16	3	double * dp
TYPE	474:8	474:15	4	double *
TYPE_NAME	474:8	474:8	5	double
LEAF_NODE	474:8	474:8	6	double
POINTER	474:15	474:15	5	*
LEAF_NODE	474:15	474:15	6	*
NAME	474:16	474:16	4	dp
LEAF_NODE	474:16	474:16	5	dp
LEAF_NODE	474:18	474:18	3	)
LEAF_NODE	475:0	475:0	2	{
STATEMENTS	476:1	524:1	2	
SIMPLE_DECL	476:1	476:13	3	double_t num ;
VAR_DECL	476:1	476:10	4	double_t num
TYPE	476:1	476:1	5	double_t
TYPE_NAME	476:1	476:1	6	double_t
LEAF_NODE	476:1	476:1	7	double_t
NAME	476:10	476:10	5	num
LEAF_NODE	476:10	476:10	6	num
LEAF_NODE	476:13	476:13	4	;
SIMPLE_DECL	477:1	477:9	3	double x ;
VAR_DECL	477:1	477:8	4	double x
TYPE	477:1	477:1	5	double
TYPE_NAME	477:1	477:1	6	double
LEAF_NODE	477:1	477:1	7	double
NAME	477:8	477:8	5	x
LEAF_NODE	477:8	477:8	6	x
LEAF_NODE	477:9	477:9	4	;
SIMPLE_DECL	478:1	478:8	3	int exp ;
VAR_DECL	478:1	478:5	4	int exp
TYPE	478:1	478:1	5	int
TYPE_NAME	478:1	478:1	6	int
LEAF_NODE	478:1	478:1	7	int
NAME	478:5	478:5	5	exp
LEAF_NODE	478:5	478:5	6	exp
LEAF_NODE	478:8	478:8	4	;
EXPR_STATEMENT	480:1	480:12	3	num . d = * dp ;
EXPR	480:1	480:1	4	num . d = * dp
ASSIGN	480:1	480:9	5	num . d = * dp
LVAL	480:1	480:1	6	num . d
FIELD	480:1	480:5	7	num . d
LEAF_NODE	480:1	480:1	8	num
LEAF_NODE	480:4	480:4	8	.
LEAF_NODE	480:5	480:5	8	d
ASSIGN_OP	480:7	480:7	6	=
LEAF_NODE	480:7	480:7	7	=
RVAL	480:9	480:9	6	* dp
UNARY_EXPR	480:9	480:10	7	* dp
UNARY_OPERATOR	480:9	480:9	8	*
LEAF_NODE	480:9	480:9	9	*
FIELD	480:10	480:10	8	dp
LEAF_NODE	480:10	480:10	9	dp
LEAF_NODE	480:12	480:12	4	;
SELECTION	481:1	481:13	3	
KEYWORD	481:1	481:1	4	if
LEAF_NODE	481:1	481:1	5	if
LEAF_NODE	481:4	481:4	4	(
CONDITION	481:5	481:5	4	! num . d
EXPR	481:5	481:5	5	! num . d
UNARY_EXPR	481:5	481:6	6	! num . d
UNARY_OPERATOR	481:5	481:5	7	!
LEAF_NODE	481:5	481:5	8	!
FIELD	481:6	481:10	7	num . d
LEAF_NODE	481:6	481:6	8	num
LEAF_NODE	481:9	481:9	8	.
LEAF_NODE	481:10	481:10	8	d
LEAF_NODE	481:11	481:11	4	)
STATEMENTS	481:13	484:1	4	
LEAF_NODE	481:13	481:13	5	{
STATEMENTS	482:2	483:2	5	
EXPR_STATEMENT	482:2	482:25	6	num . l [ 0 ] = num . l [ 1 ] = 0 ;
EXPR	482:2	482:2	7	num . l [ 0 ] = num . l [ 1 ] = 0
ASSIGN	482:2	482:13	8	num . l [ 0 ] = num . l [ 1 ] = 0
LVAL	482:2	482:2	9	num . l [ 0 ]
FIELD	482:2	482:9	10	num . l [ 0 ]
LEAF_NODE	482:2	482:2	11	num
LEAF_NODE	482:5	482:5	11	.
LEAF_NODE	482:6	482:6	11	l
LEAF_NODE	482:7	482:7	11	[
EXPR	482:8	482:8	11	0
FIELD	482:8	482:8	12	0
LEAF_NODE	482:8	482:8	13	0
LEAF_NODE	482:9	482:9	11	]
ASSIGN_OP	482:11	482:11	9	=
LEAF_NODE	482:11	482:11	10	=
RVAL	482:13	482:13	9	num . l [ 1 ] = 0
ASSIGN	482:13	482:24	10	num . l [ 1 ] = 0
LVAL	482:13	482:13	11	num . l [ 1 ]
FIELD	482:13	482:20	12	num . l [ 1 ]
LEAF_NODE	482:13	482:13	13	num
LEAF_NODE	482:16	482:16	13	.
LEAF_NODE	482:17	482:17	13	l
LEAF_NODE	482:18	482:18	13	[
EXPR	482:19	482:19	13	1
FIELD	482:19	482:19	14	1
LEAF_NODE	482:19	482:19	15	1
LEAF_NODE	482:20	482:20	13	]
ASSIGN_OP	482:22	482:22	11	=
LEAF_NODE	482:22	482:22	12	=
RVAL	482:24	482:24	11	0
FIELD	482:24	482:24	12	0
LEAF_NODE	482:24	482:24	13	0
LEAF_NODE	482:25	482:25	7	;
JUMP_STATEMENT	483:2	483:8	6	return DESTINATION ;
KEYWORD	483:2	483:2	7	return
LEAF_NODE	483:2	483:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	483:8	483:8	7	;
LEAF_NODE	484:1	484:1	5	}
SELECTION	486:1	486:16	3	
KEYWORD	486:1	486:1	4	if
LEAF_NODE	486:1	486:1	5	if
LEAF_NODE	486:4	486:4	4	(
CONDITION	486:5	486:5	4	num . d < 0
EXPR	486:5	486:13	5	num . d < 0
FIELD	486:5	486:9	6	num . d
LEAF_NODE	486:5	486:5	7	num
LEAF_NODE	486:8	486:8	7	.
LEAF_NODE	486:9	486:9	7	d
REL_OPERATOR	486:11	486:11	6	<
LEAF_NODE	486:11	486:11	7	<
FIELD	486:13	486:13	6	0
LEAF_NODE	486:13	486:13	7	0
LEAF_NODE	486:14	486:14	4	)
STATEMENTS	486:16	489:1	4	
LEAF_NODE	486:16	486:16	5	{
STATEMENTS	487:2	488:2	5	
EXPR_STATEMENT	487:2	487:16	6	num . d = - num . d ;
EXPR	487:2	487:2	7	num . d = - num . d
ASSIGN	487:2	487:10	8	num . d = - num . d
LVAL	487:2	487:2	9	num . d
FIELD	487:2	487:6	10	num . d
LEAF_NODE	487:2	487:2	11	num
LEAF_NODE	487:5	487:5	11	.
LEAF_NODE	487:6	487:6	11	d
ASSIGN_OP	487:8	487:8	9	=
LEAF_NODE	487:8	487:8	10	=
RVAL	487:10	487:10	9	- num . d
UNARY_EXPR	487:10	487:11	10	- num . d
UNARY_OPERATOR	487:10	487:10	11	-
LEAF_NODE	487:10	487:10	12	-
FIELD	487:11	487:15	11	num . d
LEAF_NODE	487:11	487:11	12	num
LEAF_NODE	487:14	487:14	12	.
LEAF_NODE	487:15	487:15	12	d
LEAF_NODE	487:16	487:16	7	;
EXPR_STATEMENT	488:2	488:19	6	num . ieee . sign = 1 ;
EXPR	488:2	488:2	7	num . ieee . sign = 1
ASSIGN	488:2	488:18	8	num . ieee . sign = 1
LVAL	488:2	488:2	9	num . ieee . sign
FIELD	488:2	488:11	10	num . ieee . sign
LEAF_NODE	488:2	488:2	11	num
LEAF_NODE	488:5	488:5	11	.
LEAF_NODE	488:6	488:6	11	ieee
LEAF_NODE	488:10	488:10	11	.
LEAF_NODE	488:11	488:11	11	sign
ASSIGN_OP	488:16	488:16	9	=
LEAF_NODE	488:16	488:16	10	=
RVAL	488:18	488:18	9	1
FIELD	488:18	488:18	10	1
LEAF_NODE	488:18	488:18	11	1
LEAF_NODE	488:19	488:19	7	;
LEAF_NODE	489:1	489:1	5	}
SELECTION	489:3	489:8	3	
KEYWORD	489:3	489:3	4	else
LEAF_NODE	489:3	489:3	5	else
STATEMENTS	489:8	491:1	4	
LEAF_NODE	489:8	489:8	5	{
STATEMENTS	490:2	490:2	5	
EXPR_STATEMENT	490:2	490:19	6	num . ieee . sign = 0 ;
EXPR	490:2	490:2	7	num . ieee . sign = 0
ASSIGN	490:2	490:18	8	num . ieee . sign = 0
LVAL	490:2	490:2	9	num . ieee . sign
FIELD	490:2	490:11	10	num . ieee . sign
LEAF_NODE	490:2	490:2	11	num
LEAF_NODE	490:5	490:5	11	.
LEAF_NODE	490:6	490:6	11	ieee
LEAF_NODE	490:10	490:10	11	.
LEAF_NODE	490:11	490:11	11	sign
ASSIGN_OP	490:16	490:16	9	=
LEAF_NODE	490:16	490:16	10	=
RVAL	490:18	490:18	9	0
FIELD	490:18	490:18	10	0
LEAF_NODE	490:18	490:18	11	0
LEAF_NODE	490:19	490:19	7	;
LEAF_NODE	491:1	491:1	5	}
EXPR_STATEMENT	494:1	494:23	3	x = frexp ( num . d , & exp ) ;
EXPR	494:1	494:1	4	x = frexp ( num . d , & exp )
ASSIGN	494:1	494:5	5	x = frexp ( num . d , & exp )
LVAL	494:1	494:1	6	x
FIELD	494:1	494:1	7	x
LEAF_NODE	494:1	494:1	8	x
ASSIGN_OP	494:3	494:3	6	=
LEAF_NODE	494:3	494:3	7	=
RVAL	494:5	494:5	6	frexp ( num . d , & exp )
FUNCTION_CALL	494:5	494:22	7	frexp ( num . d , & exp )
CALLEE	494:5	494:5	8	frexp
LEAF_NODE	494:5	494:5	9	frexp
LEAF_NODE	494:10	494:10	8	(
ARGUMENT	494:11	494:11	8	num . d
FIELD	494:11	494:15	9	num . d
LEAF_NODE	494:11	494:11	10	num
LEAF_NODE	494:14	494:14	10	.
LEAF_NODE	494:15	494:15	10	d
LEAF_NODE	494:16	494:16	8	,
ARGUMENT	494:18	494:18	8	& exp
UNARY_EXPR	494:18	494:19	9	& exp
UNARY_OPERATOR	494:18	494:18	10	&
LEAF_NODE	494:18	494:18	11	&
FIELD	494:19	494:19	10	exp
LEAF_NODE	494:19	494:19	11	exp
LEAF_NODE	494:22	494:22	8	)
LEAF_NODE	494:23	494:23	4	;
SELECTION	502:1	502:18	3	
KEYWORD	502:1	502:1	4	if
LEAF_NODE	502:1	502:1	5	if
LEAF_NODE	502:4	502:4	4	(
CONDITION	502:5	502:5	4	exp < - 1022
EXPR	502:5	502:11	5	exp < - 1022
FIELD	502:5	502:5	6	exp
LEAF_NODE	502:5	502:5	7	exp
REL_OPERATOR	502:9	502:9	6	<
LEAF_NODE	502:9	502:9	7	<
UNARY_EXPR	502:11	502:12	6	- 1022
UNARY_OPERATOR	502:11	502:11	7	-
LEAF_NODE	502:11	502:11	8	-
FIELD	502:12	502:12	7	1022
LEAF_NODE	502:12	502:12	8	1022
LEAF_NODE	502:16	502:16	4	)
STATEMENTS	502:18	505:1	4	
LEAF_NODE	502:18	502:18	5	{
STATEMENTS	503:2	504:2	5	
EXPR_STATEMENT	503:2	503:25	6	x = ldexp ( x , - 1023 - exp ) ;
EXPR	503:2	503:2	7	x = ldexp ( x , - 1023 - exp )
ASSIGN	503:2	503:6	8	x = ldexp ( x , - 1023 - exp )
LVAL	503:2	503:2	9	x
FIELD	503:2	503:2	10	x
LEAF_NODE	503:2	503:2	11	x
ASSIGN_OP	503:4	503:4	9	=
LEAF_NODE	503:4	503:4	10	=
RVAL	503:6	503:6	9	ldexp ( x , - 1023 - exp )
FUNCTION_CALL	503:6	503:24	10	ldexp ( x , - 1023 - exp )
CALLEE	503:6	503:6	11	ldexp
LEAF_NODE	503:6	503:6	12	ldexp
LEAF_NODE	503:11	503:11	11	(
ARGUMENT	503:12	503:12	11	x
FIELD	503:12	503:12	12	x
LEAF_NODE	503:12	503:12	13	x
LEAF_NODE	503:13	503:13	11	,
ARGUMENT	503:15	503:21	11	- 1023 - exp
UNARY_EXPR	503:15	503:16	12	- 1023
UNARY_OPERATOR	503:15	503:15	13	-
LEAF_NODE	503:15	503:15	14	-
FIELD	503:16	503:16	13	1023
LEAF_NODE	503:16	503:16	14	1023
LEAF_NODE	503:20	503:20	12	-
FIELD	503:21	503:21	12	exp
LEAF_NODE	503:21	503:21	13	exp
LEAF_NODE	503:24	503:24	11	)
LEAF_NODE	503:25	503:25	7	;
EXPR_STATEMENT	504:2	504:9	6	exp = 0 ;
EXPR	504:2	504:2	7	exp = 0
ASSIGN	504:2	504:8	8	exp = 0
LVAL	504:2	504:2	9	exp
FIELD	504:2	504:2	10	exp
LEAF_NODE	504:2	504:2	11	exp
ASSIGN_OP	504:6	504:6	9	=
LEAF_NODE	504:6	504:6	10	=
RVAL	504:8	504:8	9	0
FIELD	504:8	504:8	10	0
LEAF_NODE	504:8	504:8	11	0
LEAF_NODE	504:9	504:9	7	;
LEAF_NODE	505:1	505:1	5	}
SELECTION	505:3	505:8	3	
KEYWORD	505:3	505:3	4	else
LEAF_NODE	505:3	505:3	5	else
STATEMENTS	505:8	505:8	4	
SELECTION	505:8	505:24	5	
KEYWORD	505:8	505:8	6	if
LEAF_NODE	505:8	505:8	7	if
LEAF_NODE	505:11	505:11	6	(
CONDITION	505:12	505:12	6	exp > 1023
EXPR	505:12	505:18	7	exp > 1023
FIELD	505:12	505:12	8	exp
LEAF_NODE	505:12	505:12	9	exp
REL_OPERATOR	505:16	505:16	8	>
LEAF_NODE	505:16	505:16	9	>
FIELD	505:18	505:18	8	1023
LEAF_NODE	505:18	505:18	9	1023
LEAF_NODE	505:22	505:22	6	)
STATEMENTS	505:24	508:1	6	
LEAF_NODE	505:24	505:24	7	{
STATEMENTS	506:2	507:2	7	
EXPR_STATEMENT	506:2	506:7	8	x = 0 ;
EXPR	506:2	506:2	9	x = 0
ASSIGN	506:2	506:6	10	x = 0
LVAL	506:2	506:2	11	x
FIELD	506:2	506:2	12	x
LEAF_NODE	506:2	506:2	13	x
ASSIGN_OP	506:4	506:4	11	=
LEAF_NODE	506:4	506:4	12	=
RVAL	506:6	506:6	11	0
FIELD	506:6	506:6	12	0
LEAF_NODE	506:6	506:6	13	0
LEAF_NODE	506:7	506:7	9	;
EXPR_STATEMENT	507:2	507:12	8	exp = 2047 ;
EXPR	507:2	507:2	9	exp = 2047
ASSIGN	507:2	507:8	10	exp = 2047
LVAL	507:2	507:2	11	exp
FIELD	507:2	507:2	12	exp
LEAF_NODE	507:2	507:2	13	exp
ASSIGN_OP	507:6	507:6	11	=
LEAF_NODE	507:6	507:6	12	=
RVAL	507:8	507:8	11	2047
FIELD	507:8	507:8	12	2047
LEAF_NODE	507:8	507:8	13	2047
LEAF_NODE	507:12	507:12	9	;
LEAF_NODE	508:1	508:1	7	}
SELECTION	508:3	508:8	3	
KEYWORD	508:3	508:3	4	else
LEAF_NODE	508:3	508:3	5	else
STATEMENTS	508:8	512:1	4	
LEAF_NODE	508:8	508:8	5	{
STATEMENTS	509:2	511:2	5	
EXPR_STATEMENT	509:2	509:8	6	x *= 2 ;
EXPR	509:2	509:2	7	x *= 2
ASSIGN	509:2	509:7	8	x *= 2
LVAL	509:2	509:2	9	x
FIELD	509:2	509:2	10	x
LEAF_NODE	509:2	509:2	11	x
ASSIGN_OP	509:4	509:4	9	*=
LEAF_NODE	509:4	509:4	10	*=
RVAL	509:7	509:7	9	2
FIELD	509:7	509:7	10	2
LEAF_NODE	509:7	509:7	11	2
LEAF_NODE	509:8	509:8	7	;
EXPR_STATEMENT	510:2	510:8	6	x -= 1 ;
EXPR	510:2	510:2	7	x -= 1
ASSIGN	510:2	510:7	8	x -= 1
LVAL	510:2	510:2	9	x
FIELD	510:2	510:2	10	x
LEAF_NODE	510:2	510:2	11	x
ASSIGN_OP	510:4	510:4	9	-=
LEAF_NODE	510:4	510:4	10	-=
RVAL	510:7	510:7	9	1
FIELD	510:7	510:7	10	1
LEAF_NODE	510:7	510:7	11	1
LEAF_NODE	510:8	510:8	7	;
EXPR_STATEMENT	511:2	511:13	6	exp += 1022 ;
EXPR	511:2	511:2	7	exp += 1022
ASSIGN	511:2	511:9	8	exp += 1022
LVAL	511:2	511:2	9	exp
FIELD	511:2	511:2	10	exp
LEAF_NODE	511:2	511:2	11	exp
ASSIGN_OP	511:6	511:6	9	+=
LEAF_NODE	511:6	511:6	10	+=
RVAL	511:9	511:9	9	1022
FIELD	511:9	511:9	10	1022
LEAF_NODE	511:9	511:9	11	1022
LEAF_NODE	511:13	511:13	7	;
LEAF_NODE	512:1	512:1	5	}
EXPR_STATEMENT	513:1	513:19	3	num . ieee . exp = exp ;
EXPR	513:1	513:1	4	num . ieee . exp = exp
ASSIGN	513:1	513:16	5	num . ieee . exp = exp
LVAL	513:1	513:1	6	num . ieee . exp
FIELD	513:1	513:10	7	num . ieee . exp
LEAF_NODE	513:1	513:1	8	num
LEAF_NODE	513:4	513:4	8	.
LEAF_NODE	513:5	513:5	8	ieee
LEAF_NODE	513:9	513:9	8	.
LEAF_NODE	513:10	513:10	8	exp
ASSIGN_OP	513:14	513:14	6	=
LEAF_NODE	513:14	513:14	7	=
RVAL	513:16	513:16	6	exp
FIELD	513:16	513:16	7	exp
LEAF_NODE	513:16	513:16	8	exp
LEAF_NODE	513:19	513:19	4	;
EXPR_STATEMENT	515:1	515:22	3	x *= ( double ) ( 1 << 20 ) ;
EXPR	515:1	515:1	4	x *= ( double ) ( 1 << 20 )
ASSIGN	515:1	515:6	5	x *= ( double ) ( 1 << 20 )
LVAL	515:1	515:1	6	x
FIELD	515:1	515:1	7	x
LEAF_NODE	515:1	515:1	8	x
ASSIGN_OP	515:3	515:3	6	*=
LEAF_NODE	515:3	515:3	7	*=
RVAL	515:6	515:21	6	( double ) ( 1 << 20 )
LEAF_NODE	515:6	515:6	7	(
TYPE_NAME	515:7	515:7	7	double
LEAF_NODE	515:7	515:7	8	double
LEAF_NODE	515:13	515:13	7	)
LEAF_NODE	515:15	515:15	7	(
FIELD	515:16	515:16	7	1
LEAF_NODE	515:16	515:16	8	1
LEAF_NODE	515:17	515:17	7	<<
FIELD	515:19	515:19	7	20
LEAF_NODE	515:19	515:19	8	20
LEAF_NODE	515:21	515:21	7	)
LEAF_NODE	515:22	515:22	4	;
EXPR_STATEMENT	516:1	516:25	3	num . ieee . mant = ( long ) x ;
EXPR	516:1	516:1	4	num . ieee . mant = ( long ) x
ASSIGN	516:1	516:17	5	num . ieee . mant = ( long ) x
LVAL	516:1	516:1	6	num . ieee . mant
FIELD	516:1	516:10	7	num . ieee . mant
LEAF_NODE	516:1	516:1	8	num
LEAF_NODE	516:4	516:4	8	.
LEAF_NODE	516:5	516:5	8	ieee
LEAF_NODE	516:9	516:9	8	.
LEAF_NODE	516:10	516:10	8	mant
ASSIGN_OP	516:15	516:15	6	=
LEAF_NODE	516:15	516:15	7	=
RVAL	516:17	516:24	6	( long ) x
LEAF_NODE	516:17	516:17	7	(
TYPE_NAME	516:18	516:18	7	long
LEAF_NODE	516:18	516:18	8	long
LEAF_NODE	516:22	516:22	7	)
FIELD	516:24	516:24	7	x
LEAF_NODE	516:24	516:24	8	x
LEAF_NODE	516:25	516:25	4	;
EXPR_STATEMENT	517:1	517:28	3	x -= ( double ) num . ieee . mant ;
EXPR	517:1	517:1	4	x -= ( double ) num . ieee . mant
ASSIGN	517:1	517:6	5	x -= ( double ) num . ieee . mant
LVAL	517:1	517:1	6	x
FIELD	517:1	517:1	7	x
LEAF_NODE	517:1	517:1	8	x
ASSIGN_OP	517:3	517:3	6	-=
LEAF_NODE	517:3	517:3	7	-=
RVAL	517:6	517:15	6	( double ) num . ieee . mant
LEAF_NODE	517:6	517:6	7	(
TYPE_NAME	517:7	517:7	7	double
LEAF_NODE	517:7	517:7	8	double
LEAF_NODE	517:13	517:13	7	)
FIELD	517:15	517:24	7	num . ieee . mant
LEAF_NODE	517:15	517:15	8	num
LEAF_NODE	517:18	517:18	8	.
LEAF_NODE	517:19	517:19	8	ieee
LEAF_NODE	517:23	517:23	8	.
LEAF_NODE	517:24	517:24	8	mant
LEAF_NODE	517:28	517:28	4	;
EXPR_STATEMENT	518:1	518:64	3	num . ieee . mant2 = ( long ) ( x * ( ( double ) ( 1 << 16 ) * ( double ) ( 1 << 16 ) ) ) ;
EXPR	518:1	518:1	4	num . ieee . mant2 = ( long ) ( x * ( ( double ) ( 1 << 16 ) * ( double ) ( 1 << 16 ) ) )
ASSIGN	518:1	518:18	5	num . ieee . mant2 = ( long ) ( x * ( ( double ) ( 1 << 16 ) * ( double ) ( 1 << 16 ) ) )
LVAL	518:1	518:1	6	num . ieee . mant2
FIELD	518:1	518:10	7	num . ieee . mant2
LEAF_NODE	518:1	518:1	8	num
LEAF_NODE	518:4	518:4	8	.
LEAF_NODE	518:5	518:5	8	ieee
LEAF_NODE	518:9	518:9	8	.
LEAF_NODE	518:10	518:10	8	mant2
ASSIGN_OP	518:16	518:16	6	=
LEAF_NODE	518:16	518:16	7	=
RVAL	518:18	518:63	6	( long ) ( x * ( ( double ) ( 1 << 16 ) * ( double ) ( 1 << 16 ) ) )
LEAF_NODE	518:18	518:18	7	(
TYPE_NAME	518:19	518:19	7	long
LEAF_NODE	518:19	518:19	8	long
LEAF_NODE	518:23	518:23	7	)
LEAF_NODE	518:25	518:25	7	(
FIELD	518:26	518:26	7	x
LEAF_NODE	518:26	518:26	8	x
LEAF_NODE	518:27	518:27	7	*
LEAF_NODE	518:28	518:28	7	(
LEAF_NODE	518:29	518:29	7	(
TYPE_NAME	518:30	518:30	7	double
LEAF_NODE	518:30	518:30	8	double
LEAF_NODE	518:36	518:36	7	)
LEAF_NODE	518:38	518:38	7	(
FIELD	518:39	518:39	7	1
LEAF_NODE	518:39	518:39	8	1
LEAF_NODE	518:40	518:40	7	<<
FIELD	518:42	518:42	7	16
LEAF_NODE	518:42	518:42	8	16
LEAF_NODE	518:44	518:44	7	)
LEAF_NODE	518:45	518:45	7	*
LEAF_NODE	518:46	518:46	7	(
TYPE_NAME	518:47	518:47	7	double
LEAF_NODE	518:47	518:47	8	double
LEAF_NODE	518:53	518:53	7	)
LEAF_NODE	518:55	518:55	7	(
FIELD	518:56	518:56	7	1
LEAF_NODE	518:56	518:56	8	1
LEAF_NODE	518:57	518:57	7	<<
FIELD	518:59	518:59	7	16
LEAF_NODE	518:59	518:59	8	16
LEAF_NODE	518:61	518:61	7	)
LEAF_NODE	518:62	518:62	7	)
LEAF_NODE	518:63	518:63	7	)
LEAF_NODE	518:64	518:64	4	;
SELECTION	520:1	520:57	3	
KEYWORD	520:1	520:1	4	if
LEAF_NODE	520:1	520:1	5	if
LEAF_NODE	520:4	520:4	4	(
CONDITION	520:5	520:5	4	! ( num . ieee . mant || num . ieee . exp || num . ieee . mant2 )
EXPR	520:5	520:5	5	! ( num . ieee . mant || num . ieee . exp || num . ieee . mant2 )
UNARY_EXPR	520:5	520:54	6	! ( num . ieee . mant || num . ieee . exp || num . ieee . mant2 )
UNARY_OPERATOR	520:5	520:5	7	!
LEAF_NODE	520:5	520:5	8	!
LEAF_NODE	520:6	520:6	7	(
OR	520:7	520:24	7	num . ieee . mant || num . ieee . exp || num . ieee . mant2
EXPR	520:7	520:7	8	num . ieee . mant
FIELD	520:7	520:16	9	num . ieee . mant
LEAF_NODE	520:7	520:7	10	num
LEAF_NODE	520:10	520:10	10	.
LEAF_NODE	520:11	520:11	10	ieee
LEAF_NODE	520:15	520:15	10	.
LEAF_NODE	520:16	520:16	10	mant
LEAF_NODE	520:21	520:21	8	||
EXPR	520:24	520:24	8	num . ieee . exp || num . ieee . mant2
OR	520:24	520:40	9	num . ieee . exp || num . ieee . mant2
EXPR	520:24	520:24	10	num . ieee . exp
FIELD	520:24	520:33	11	num . ieee . exp
LEAF_NODE	520:24	520:24	12	num
LEAF_NODE	520:27	520:27	12	.
LEAF_NODE	520:28	520:28	12	ieee
LEAF_NODE	520:32	520:32	12	.
LEAF_NODE	520:33	520:33	12	exp
LEAF_NODE	520:37	520:37	10	||
EXPR	520:40	520:40	10	num . ieee . mant2
FIELD	520:40	520:49	11	num . ieee . mant2
LEAF_NODE	520:40	520:40	12	num
LEAF_NODE	520:43	520:43	12	.
LEAF_NODE	520:44	520:44	12	ieee
LEAF_NODE	520:48	520:48	12	.
LEAF_NODE	520:49	520:49	12	mant2
LEAF_NODE	520:54	520:54	7	)
LEAF_NODE	520:55	520:55	4	)
STATEMENTS	520:57	523:1	4	
LEAF_NODE	520:57	520:57	5	{
STATEMENTS	522:2	522:2	5	
EXPR_STATEMENT	522:2	522:19	6	num . ieee . sign = 0 ;
EXPR	522:2	522:2	7	num . ieee . sign = 0
ASSIGN	522:2	522:18	8	num . ieee . sign = 0
LVAL	522:2	522:2	9	num . ieee . sign
FIELD	522:2	522:11	10	num . ieee . sign
LEAF_NODE	522:2	522:2	11	num
LEAF_NODE	522:5	522:5	11	.
LEAF_NODE	522:6	522:6	11	ieee
LEAF_NODE	522:10	522:10	11	.
LEAF_NODE	522:11	522:11	11	sign
ASSIGN_OP	522:16	522:16	9	=
LEAF_NODE	522:16	522:16	10	=
RVAL	522:18	522:18	9	0
FIELD	522:18	522:18	10	0
LEAF_NODE	522:18	522:18	11	0
LEAF_NODE	522:19	522:19	7	;
LEAF_NODE	523:1	523:1	5	}
EXPR_STATEMENT	524:1	524:33	3	( ( double_t * ) dp ) -> ieee = num . ieee ;
EXPR	524:1	524:1	4	( ( double_t * ) dp ) -> ieee = num . ieee
ASSIGN	524:1	524:25	5	( ( double_t * ) dp ) -> ieee = num . ieee
LVAL	524:1	524:18	6	( ( double_t * ) dp ) -> ieee
LEAF_NODE	524:1	524:1	7	(
LEAF_NODE	524:2	524:2	7	(
TYPE_NAME	524:3	524:3	7	double_t
LEAF_NODE	524:3	524:3	8	double_t
LEAF_NODE	524:11	524:11	7	*
LEAF_NODE	524:12	524:12	7	)
FIELD	524:13	524:13	7	dp
LEAF_NODE	524:13	524:13	8	dp
LEAF_NODE	524:15	524:15	7	)
LEAF_NODE	524:16	524:16	7	->
LEAF_NODE	524:18	524:18	7	ieee
ASSIGN_OP	524:23	524:23	6	=
LEAF_NODE	524:23	524:23	7	=
RVAL	524:25	524:25	6	num . ieee
FIELD	524:25	524:29	7	num . ieee
LEAF_NODE	524:25	524:25	8	num
LEAF_NODE	524:28	524:28	8	.
LEAF_NODE	524:29	524:29	8	ieee
LEAF_NODE	524:33	524:33	4	;
LEAF_NODE	525:0	525:0	2	}
FUNCTION_DEF	560:0	569:0	1	
RETURN_TYPE	560:0	560:0	2	void
TYPE_NAME	560:0	560:0	3	void
LEAF_NODE	560:0	560:0	4	void
FUNCTION_NAME	561:0	561:0	2	TIFFCvtIEEEFloatToNative
LEAF_NODE	561:0	561:0	3	TIFFCvtIEEEFloatToNative
PARAMETER_LIST	561:24	561:53	2	( TIFF * tif , u_int n , float * f )
LEAF_NODE	561:24	561:24	3	(
PARAMETER_DECL	561:25	561:31	3	TIFF * tif
TYPE	561:25	561:29	4	TIFF *
TYPE_NAME	561:25	561:25	5	TIFF
LEAF_NODE	561:25	561:25	6	TIFF
POINTER	561:29	561:29	5	*
LEAF_NODE	561:29	561:29	6	*
NAME	561:31	561:31	4	tif
LEAF_NODE	561:31	561:31	5	tif
LEAF_NODE	561:34	561:34	3	,
PARAMETER_DECL	561:36	561:42	3	u_int n
TYPE	561:36	561:36	4	u_int
TYPE_NAME	561:36	561:36	5	u_int
LEAF_NODE	561:36	561:36	6	u_int
NAME	561:42	561:42	4	n
LEAF_NODE	561:42	561:42	5	n
LEAF_NODE	561:43	561:43	3	,
PARAMETER_DECL	561:45	561:52	3	float * f
TYPE	561:45	561:50	4	float *
TYPE_NAME	561:45	561:45	5	float
LEAF_NODE	561:45	561:45	6	float
POINTER	561:50	561:50	5	*
LEAF_NODE	561:50	561:50	6	*
NAME	561:52	561:52	4	f
LEAF_NODE	561:52	561:52	5	f
LEAF_NODE	561:53	561:53	3	)
LEAF_NODE	562:0	562:0	2	{
STATEMENTS	563:1	565:1	2	
SIMPLE_DECL	563:1	563:27	3	float_t * fp ; fp = ( float_t * ) f ;
VAR_DECL	563:1	563:10	4	float_t * fp ; fp = ( float_t * ) f
TYPE	563:1	563:8	5	float_t *
TYPE_NAME	563:1	563:1	6	float_t
LEAF_NODE	563:1	563:1	7	float_t
POINTER	563:8	563:8	6	*
LEAF_NODE	563:8	563:8	7	*
NAME	563:10	563:10	5	fp
LEAF_NODE	563:10	563:10	6	fp
LEAF_NODE	0:0	0:0	5	;
INIT	563:10	563:10	5	fp = ( float_t * ) f
ASSIGN	563:10	563:15	6	fp = ( float_t * ) f
LVAL	563:10	563:10	7	fp
NAME	563:10	563:10	8	fp
LEAF_NODE	563:10	563:10	9	fp
ASSIGN_OP	563:13	563:13	7	=
LEAF_NODE	563:13	563:13	8	=
RVAL	563:15	563:26	7	( float_t * ) f
LEAF_NODE	563:15	563:15	8	(
TYPE_NAME	563:16	563:16	8	float_t
LEAF_NODE	563:16	563:16	9	float_t
LEAF_NODE	563:23	563:23	8	*
LEAF_NODE	563:24	563:24	8	)
FIELD	563:26	563:26	8	f
LEAF_NODE	563:26	563:26	9	f
LEAF_NODE	563:27	563:27	4	;
ITERATION	565:1	565:17	3	
KEYWORD	565:1	565:1	4	while
LEAF_NODE	565:1	565:1	5	while
LEAF_NODE	565:7	565:7	4	(
CONDITION	565:8	565:8	4	n -- > 0
EXPR	565:8	565:14	5	n -- > 0
FIELD	565:8	565:9	6	n --
LEAF_NODE	565:8	565:8	7	n
LEAF_NODE	565:9	565:9	7	--
REL_OPERATOR	565:12	565:12	6	>
LEAF_NODE	565:12	565:12	7	>
FIELD	565:14	565:14	6	0
LEAF_NODE	565:14	565:14	7	0
LEAF_NODE	565:15	565:15	4	)
STATEMENTS	565:17	568:1	4	
LEAF_NODE	565:17	565:17	5	{
STATEMENTS	566:2	567:2	5	
EXPR_STATEMENT	566:2	566:22	6	IEEEFLOAT2NATIVE ( fp ) ;
EXPR	566:2	566:2	7	IEEEFLOAT2NATIVE ( fp )
FUNCTION_CALL	566:2	566:21	8	IEEEFLOAT2NATIVE ( fp )
CALLEE	566:2	566:2	9	IEEEFLOAT2NATIVE
LEAF_NODE	566:2	566:2	10	IEEEFLOAT2NATIVE
LEAF_NODE	566:18	566:18	9	(
ARGUMENT	566:19	566:19	9	fp
FIELD	566:19	566:19	10	fp
LEAF_NODE	566:19	566:19	11	fp
LEAF_NODE	566:21	566:21	9	)
LEAF_NODE	566:22	566:22	7	;
EXPR_STATEMENT	567:2	567:6	6	fp ++ ;
EXPR	567:2	567:2	7	fp ++
FIELD	567:2	567:4	8	fp ++
LEAF_NODE	567:2	567:2	9	fp
LEAF_NODE	567:4	567:4	9	++
LEAF_NODE	567:6	567:6	7	;
LEAF_NODE	568:1	568:1	5	}
LEAF_NODE	569:0	569:0	2	}
FUNCTION_DEF	571:0	580:0	1	
RETURN_TYPE	571:0	571:0	2	void
TYPE_NAME	571:0	571:0	3	void
LEAF_NODE	571:0	571:0	4	void
FUNCTION_NAME	572:0	572:0	2	TIFFCvtNativeToIEEEFloat
LEAF_NODE	572:0	572:0	3	TIFFCvtNativeToIEEEFloat
PARAMETER_LIST	572:24	572:53	2	( TIFF * tif , u_int n , float * f )
LEAF_NODE	572:24	572:24	3	(
PARAMETER_DECL	572:25	572:31	3	TIFF * tif
TYPE	572:25	572:29	4	TIFF *
TYPE_NAME	572:25	572:25	5	TIFF
LEAF_NODE	572:25	572:25	6	TIFF
POINTER	572:29	572:29	5	*
LEAF_NODE	572:29	572:29	6	*
NAME	572:31	572:31	4	tif
LEAF_NODE	572:31	572:31	5	tif
LEAF_NODE	572:34	572:34	3	,
PARAMETER_DECL	572:36	572:42	3	u_int n
TYPE	572:36	572:36	4	u_int
TYPE_NAME	572:36	572:36	5	u_int
LEAF_NODE	572:36	572:36	6	u_int
NAME	572:42	572:42	4	n
LEAF_NODE	572:42	572:42	5	n
LEAF_NODE	572:43	572:43	3	,
PARAMETER_DECL	572:45	572:52	3	float * f
TYPE	572:45	572:50	4	float *
TYPE_NAME	572:45	572:45	5	float
LEAF_NODE	572:45	572:45	6	float
POINTER	572:50	572:50	5	*
LEAF_NODE	572:50	572:50	6	*
NAME	572:52	572:52	4	f
LEAF_NODE	572:52	572:52	5	f
LEAF_NODE	572:53	572:53	3	)
LEAF_NODE	573:0	573:0	2	{
STATEMENTS	574:1	576:1	2	
SIMPLE_DECL	574:1	574:27	3	float_t * fp ; fp = ( float_t * ) f ;
VAR_DECL	574:1	574:10	4	float_t * fp ; fp = ( float_t * ) f
TYPE	574:1	574:8	5	float_t *
TYPE_NAME	574:1	574:1	6	float_t
LEAF_NODE	574:1	574:1	7	float_t
POINTER	574:8	574:8	6	*
LEAF_NODE	574:8	574:8	7	*
NAME	574:10	574:10	5	fp
LEAF_NODE	574:10	574:10	6	fp
LEAF_NODE	0:0	0:0	5	;
INIT	574:10	574:10	5	fp = ( float_t * ) f
ASSIGN	574:10	574:15	6	fp = ( float_t * ) f
LVAL	574:10	574:10	7	fp
NAME	574:10	574:10	8	fp
LEAF_NODE	574:10	574:10	9	fp
ASSIGN_OP	574:13	574:13	7	=
LEAF_NODE	574:13	574:13	8	=
RVAL	574:15	574:26	7	( float_t * ) f
LEAF_NODE	574:15	574:15	8	(
TYPE_NAME	574:16	574:16	8	float_t
LEAF_NODE	574:16	574:16	9	float_t
LEAF_NODE	574:23	574:23	8	*
LEAF_NODE	574:24	574:24	8	)
FIELD	574:26	574:26	8	f
LEAF_NODE	574:26	574:26	9	f
LEAF_NODE	574:27	574:27	4	;
ITERATION	576:1	576:17	3	
KEYWORD	576:1	576:1	4	while
LEAF_NODE	576:1	576:1	5	while
LEAF_NODE	576:7	576:7	4	(
CONDITION	576:8	576:8	4	n -- > 0
EXPR	576:8	576:14	5	n -- > 0
FIELD	576:8	576:9	6	n --
LEAF_NODE	576:8	576:8	7	n
LEAF_NODE	576:9	576:9	7	--
REL_OPERATOR	576:12	576:12	6	>
LEAF_NODE	576:12	576:12	7	>
FIELD	576:14	576:14	6	0
LEAF_NODE	576:14	576:14	7	0
LEAF_NODE	576:15	576:15	4	)
STATEMENTS	576:17	579:1	4	
LEAF_NODE	576:17	576:17	5	{
STATEMENTS	577:2	578:2	5	
EXPR_STATEMENT	577:2	577:22	6	NATIVE2IEEEFLOAT ( fp ) ;
EXPR	577:2	577:2	7	NATIVE2IEEEFLOAT ( fp )
FUNCTION_CALL	577:2	577:21	8	NATIVE2IEEEFLOAT ( fp )
CALLEE	577:2	577:2	9	NATIVE2IEEEFLOAT
LEAF_NODE	577:2	577:2	10	NATIVE2IEEEFLOAT
LEAF_NODE	577:18	577:18	9	(
ARGUMENT	577:19	577:19	9	fp
FIELD	577:19	577:19	10	fp
LEAF_NODE	577:19	577:19	11	fp
LEAF_NODE	577:21	577:21	9	)
LEAF_NODE	577:22	577:22	7	;
EXPR_STATEMENT	578:2	578:6	6	fp ++ ;
EXPR	578:2	578:2	7	fp ++
FIELD	578:2	578:4	8	fp ++
LEAF_NODE	578:2	578:2	9	fp
LEAF_NODE	578:4	578:4	9	++
LEAF_NODE	578:6	578:6	7	;
LEAF_NODE	579:1	579:1	5	}
LEAF_NODE	580:0	580:0	2	}
FUNCTION_DEF	581:0	590:0	1	
RETURN_TYPE	581:0	581:0	2	void
TYPE_NAME	581:0	581:0	3	void
LEAF_NODE	581:0	581:0	4	void
FUNCTION_NAME	582:0	582:0	2	TIFFCvtIEEEDoubleToNative
LEAF_NODE	582:0	582:0	3	TIFFCvtIEEEDoubleToNative
PARAMETER_LIST	582:25	582:55	2	( TIFF * tif , u_int n , double * f )
LEAF_NODE	582:25	582:25	3	(
PARAMETER_DECL	582:26	582:32	3	TIFF * tif
TYPE	582:26	582:30	4	TIFF *
TYPE_NAME	582:26	582:26	5	TIFF
LEAF_NODE	582:26	582:26	6	TIFF
POINTER	582:30	582:30	5	*
LEAF_NODE	582:30	582:30	6	*
NAME	582:32	582:32	4	tif
LEAF_NODE	582:32	582:32	5	tif
LEAF_NODE	582:35	582:35	3	,
PARAMETER_DECL	582:37	582:43	3	u_int n
TYPE	582:37	582:37	4	u_int
TYPE_NAME	582:37	582:37	5	u_int
LEAF_NODE	582:37	582:37	6	u_int
NAME	582:43	582:43	4	n
LEAF_NODE	582:43	582:43	5	n
LEAF_NODE	582:44	582:44	3	,
PARAMETER_DECL	582:46	582:54	3	double * f
TYPE	582:46	582:52	4	double *
TYPE_NAME	582:46	582:46	5	double
LEAF_NODE	582:46	582:46	6	double
POINTER	582:52	582:52	5	*
LEAF_NODE	582:52	582:52	6	*
NAME	582:54	582:54	4	f
LEAF_NODE	582:54	582:54	5	f
LEAF_NODE	582:55	582:55	3	)
LEAF_NODE	583:0	583:0	2	{
STATEMENTS	584:1	586:1	2	
SIMPLE_DECL	584:1	584:29	3	double_t * fp ; fp = ( double_t * ) f ;
VAR_DECL	584:1	584:11	4	double_t * fp ; fp = ( double_t * ) f
TYPE	584:1	584:9	5	double_t *
TYPE_NAME	584:1	584:1	6	double_t
LEAF_NODE	584:1	584:1	7	double_t
POINTER	584:9	584:9	6	*
LEAF_NODE	584:9	584:9	7	*
NAME	584:11	584:11	5	fp
LEAF_NODE	584:11	584:11	6	fp
LEAF_NODE	0:0	0:0	5	;
INIT	584:11	584:11	5	fp = ( double_t * ) f
ASSIGN	584:11	584:16	6	fp = ( double_t * ) f
LVAL	584:11	584:11	7	fp
NAME	584:11	584:11	8	fp
LEAF_NODE	584:11	584:11	9	fp
ASSIGN_OP	584:14	584:14	7	=
LEAF_NODE	584:14	584:14	8	=
RVAL	584:16	584:28	7	( double_t * ) f
LEAF_NODE	584:16	584:16	8	(
TYPE_NAME	584:17	584:17	8	double_t
LEAF_NODE	584:17	584:17	9	double_t
LEAF_NODE	584:25	584:25	8	*
LEAF_NODE	584:26	584:26	8	)
FIELD	584:28	584:28	8	f
LEAF_NODE	584:28	584:28	9	f
LEAF_NODE	584:29	584:29	4	;
ITERATION	586:1	586:17	3	
KEYWORD	586:1	586:1	4	while
LEAF_NODE	586:1	586:1	5	while
LEAF_NODE	586:7	586:7	4	(
CONDITION	586:8	586:8	4	n -- > 0
EXPR	586:8	586:14	5	n -- > 0
FIELD	586:8	586:9	6	n --
LEAF_NODE	586:8	586:8	7	n
LEAF_NODE	586:9	586:9	7	--
REL_OPERATOR	586:12	586:12	6	>
LEAF_NODE	586:12	586:12	7	>
FIELD	586:14	586:14	6	0
LEAF_NODE	586:14	586:14	7	0
LEAF_NODE	586:15	586:15	4	)
STATEMENTS	586:17	589:1	4	
LEAF_NODE	586:17	586:17	5	{
STATEMENTS	587:2	588:2	5	
EXPR_STATEMENT	587:2	587:23	6	IEEEDOUBLE2NATIVE ( fp ) ;
EXPR	587:2	587:2	7	IEEEDOUBLE2NATIVE ( fp )
FUNCTION_CALL	587:2	587:22	8	IEEEDOUBLE2NATIVE ( fp )
CALLEE	587:2	587:2	9	IEEEDOUBLE2NATIVE
LEAF_NODE	587:2	587:2	10	IEEEDOUBLE2NATIVE
LEAF_NODE	587:19	587:19	9	(
ARGUMENT	587:20	587:20	9	fp
FIELD	587:20	587:20	10	fp
LEAF_NODE	587:20	587:20	11	fp
LEAF_NODE	587:22	587:22	9	)
LEAF_NODE	587:23	587:23	7	;
EXPR_STATEMENT	588:2	588:6	6	fp ++ ;
EXPR	588:2	588:2	7	fp ++
FIELD	588:2	588:4	8	fp ++
LEAF_NODE	588:2	588:2	9	fp
LEAF_NODE	588:4	588:4	9	++
LEAF_NODE	588:6	588:6	7	;
LEAF_NODE	589:1	589:1	5	}
LEAF_NODE	590:0	590:0	2	}
FUNCTION_DEF	592:0	601:0	1	
RETURN_TYPE	592:0	592:0	2	void
TYPE_NAME	592:0	592:0	3	void
LEAF_NODE	592:0	592:0	4	void
FUNCTION_NAME	593:0	593:0	2	TIFFCvtNativeToIEEEDouble
LEAF_NODE	593:0	593:0	3	TIFFCvtNativeToIEEEDouble
PARAMETER_LIST	593:25	593:55	2	( TIFF * tif , u_int n , double * f )
LEAF_NODE	593:25	593:25	3	(
PARAMETER_DECL	593:26	593:32	3	TIFF * tif
TYPE	593:26	593:30	4	TIFF *
TYPE_NAME	593:26	593:26	5	TIFF
LEAF_NODE	593:26	593:26	6	TIFF
POINTER	593:30	593:30	5	*
LEAF_NODE	593:30	593:30	6	*
NAME	593:32	593:32	4	tif
LEAF_NODE	593:32	593:32	5	tif
LEAF_NODE	593:35	593:35	3	,
PARAMETER_DECL	593:37	593:43	3	u_int n
TYPE	593:37	593:37	4	u_int
TYPE_NAME	593:37	593:37	5	u_int
LEAF_NODE	593:37	593:37	6	u_int
NAME	593:43	593:43	4	n
LEAF_NODE	593:43	593:43	5	n
LEAF_NODE	593:44	593:44	3	,
PARAMETER_DECL	593:46	593:54	3	double * f
TYPE	593:46	593:52	4	double *
TYPE_NAME	593:46	593:46	5	double
LEAF_NODE	593:46	593:46	6	double
POINTER	593:52	593:52	5	*
LEAF_NODE	593:52	593:52	6	*
NAME	593:54	593:54	4	f
LEAF_NODE	593:54	593:54	5	f
LEAF_NODE	593:55	593:55	3	)
LEAF_NODE	594:0	594:0	2	{
STATEMENTS	595:1	597:1	2	
SIMPLE_DECL	595:1	595:29	3	double_t * fp ; fp = ( double_t * ) f ;
VAR_DECL	595:1	595:11	4	double_t * fp ; fp = ( double_t * ) f
TYPE	595:1	595:9	5	double_t *
TYPE_NAME	595:1	595:1	6	double_t
LEAF_NODE	595:1	595:1	7	double_t
POINTER	595:9	595:9	6	*
LEAF_NODE	595:9	595:9	7	*
NAME	595:11	595:11	5	fp
LEAF_NODE	595:11	595:11	6	fp
LEAF_NODE	0:0	0:0	5	;
INIT	595:11	595:11	5	fp = ( double_t * ) f
ASSIGN	595:11	595:16	6	fp = ( double_t * ) f
LVAL	595:11	595:11	7	fp
NAME	595:11	595:11	8	fp
LEAF_NODE	595:11	595:11	9	fp
ASSIGN_OP	595:14	595:14	7	=
LEAF_NODE	595:14	595:14	8	=
RVAL	595:16	595:28	7	( double_t * ) f
LEAF_NODE	595:16	595:16	8	(
TYPE_NAME	595:17	595:17	8	double_t
LEAF_NODE	595:17	595:17	9	double_t
LEAF_NODE	595:25	595:25	8	*
LEAF_NODE	595:26	595:26	8	)
FIELD	595:28	595:28	8	f
LEAF_NODE	595:28	595:28	9	f
LEAF_NODE	595:29	595:29	4	;
ITERATION	597:1	597:17	3	
KEYWORD	597:1	597:1	4	while
LEAF_NODE	597:1	597:1	5	while
LEAF_NODE	597:7	597:7	4	(
CONDITION	597:8	597:8	4	n -- > 0
EXPR	597:8	597:14	5	n -- > 0
FIELD	597:8	597:9	6	n --
LEAF_NODE	597:8	597:8	7	n
LEAF_NODE	597:9	597:9	7	--
REL_OPERATOR	597:12	597:12	6	>
LEAF_NODE	597:12	597:12	7	>
FIELD	597:14	597:14	6	0
LEAF_NODE	597:14	597:14	7	0
LEAF_NODE	597:15	597:15	4	)
STATEMENTS	597:17	600:1	4	
LEAF_NODE	597:17	597:17	5	{
STATEMENTS	598:2	599:2	5	
EXPR_STATEMENT	598:2	598:23	6	NATIVE2IEEEDOUBLE ( fp ) ;
EXPR	598:2	598:2	7	NATIVE2IEEEDOUBLE ( fp )
FUNCTION_CALL	598:2	598:22	8	NATIVE2IEEEDOUBLE ( fp )
CALLEE	598:2	598:2	9	NATIVE2IEEEDOUBLE
LEAF_NODE	598:2	598:2	10	NATIVE2IEEEDOUBLE
LEAF_NODE	598:19	598:19	9	(
ARGUMENT	598:20	598:20	9	fp
FIELD	598:20	598:20	10	fp
LEAF_NODE	598:20	598:20	11	fp
LEAF_NODE	598:22	598:22	9	)
LEAF_NODE	598:23	598:23	7	;
EXPR_STATEMENT	599:2	599:6	6	fp ++ ;
EXPR	599:2	599:2	7	fp ++
FIELD	599:2	599:4	8	fp ++
LEAF_NODE	599:2	599:2	9	fp
LEAF_NODE	599:4	599:4	9	++
LEAF_NODE	599:6	599:6	7	;
LEAF_NODE	600:1	600:1	5	}
LEAF_NODE	601:0	601:0	2	}
