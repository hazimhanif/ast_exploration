SOURCE_FILE	40:0	332:0	0	
FUNCTION_DEF	40:0	86:0	1	
RETURN_TYPE	40:0	40:7	2	static void
LEAF_NODE	40:0	40:0	3	static
TYPE_NAME	40:7	40:7	3	void
LEAF_NODE	40:7	40:7	4	void
FUNCTION_NAME	41:0	41:0	2	_XTIFFPrintDirectory
LEAF_NODE	41:0	41:0	3	_XTIFFPrintDirectory
PARAMETER_LIST	41:20	41:52	2	( TIFF * tif , FILE * fd , long flags )
LEAF_NODE	41:20	41:20	3	(
PARAMETER_DECL	41:21	41:27	3	TIFF * tif
TYPE	41:21	41:25	4	TIFF *
TYPE_NAME	41:21	41:21	5	TIFF
LEAF_NODE	41:21	41:21	6	TIFF
POINTER	41:25	41:25	5	*
LEAF_NODE	41:25	41:25	6	*
NAME	41:27	41:27	4	tif
LEAF_NODE	41:27	41:27	5	tif
LEAF_NODE	41:30	41:30	3	,
PARAMETER_DECL	41:32	41:38	3	FILE * fd
TYPE	41:32	41:36	4	FILE *
TYPE_NAME	41:32	41:32	5	FILE
LEAF_NODE	41:32	41:32	6	FILE
POINTER	41:36	41:36	5	*
LEAF_NODE	41:36	41:36	6	*
NAME	41:38	41:38	4	fd
LEAF_NODE	41:38	41:38	5	fd
LEAF_NODE	41:40	41:40	3	,
PARAMETER_DECL	41:42	41:47	3	long flags
TYPE	41:42	41:42	4	long
TYPE_NAME	41:42	41:42	5	long
LEAF_NODE	41:42	41:42	6	long
NAME	41:47	41:47	4	flags
LEAF_NODE	41:47	41:47	5	flags
LEAF_NODE	41:52	41:52	3	)
LEAF_NODE	42:0	42:0	2	{
STATEMENTS	43:1	81:1	2	
SIMPLE_DECL	43:1	43:26	3	xtiff * xt ; xt = XTIFFDIR ( tif ) ;
VAR_DECL	43:1	43:8	4	xtiff * xt ; xt = XTIFFDIR ( tif )
TYPE	43:1	43:7	5	xtiff *
TYPE_NAME	43:1	43:1	6	xtiff
LEAF_NODE	43:1	43:1	7	xtiff
POINTER	43:7	43:7	6	*
LEAF_NODE	43:7	43:7	7	*
NAME	43:8	43:8	5	xt
LEAF_NODE	43:8	43:8	6	xt
LEAF_NODE	0:0	0:0	5	;
INIT	43:8	43:8	5	xt = XTIFFDIR ( tif )
ASSIGN	43:8	43:13	6	xt = XTIFFDIR ( tif )
LVAL	43:8	43:8	7	xt
NAME	43:8	43:8	8	xt
LEAF_NODE	43:8	43:8	9	xt
ASSIGN_OP	43:11	43:11	7	=
LEAF_NODE	43:11	43:11	8	=
RVAL	43:13	43:13	7	XTIFFDIR ( tif )
FUNCTION_CALL	43:13	43:25	8	XTIFFDIR ( tif )
CALLEE	43:13	43:13	9	XTIFFDIR
LEAF_NODE	43:13	43:13	10	XTIFFDIR
LEAF_NODE	43:21	43:21	9	(
ARGUMENT	43:22	43:22	9	tif
FIELD	43:22	43:22	10	tif
LEAF_NODE	43:22	43:22	11	tif
LEAF_NODE	43:25	43:25	9	)
LEAF_NODE	43:26	43:26	4	;
SIMPLE_DECL	44:1	44:35	3	XTIFFDirectory * xd ; xd = & xt -> xtif_dir ;
VAR_DECL	44:1	44:17	4	XTIFFDirectory * xd ; xd = & xt -> xtif_dir
TYPE	44:1	44:16	5	XTIFFDirectory *
TYPE_NAME	44:1	44:1	6	XTIFFDirectory
LEAF_NODE	44:1	44:1	7	XTIFFDirectory
POINTER	44:16	44:16	6	*
LEAF_NODE	44:16	44:16	7	*
NAME	44:17	44:17	5	xd
LEAF_NODE	44:17	44:17	6	xd
LEAF_NODE	0:0	0:0	5	;
INIT	44:17	44:17	5	xd = & xt -> xtif_dir
ASSIGN	44:17	44:22	6	xd = & xt -> xtif_dir
LVAL	44:17	44:17	7	xd
NAME	44:17	44:17	8	xd
LEAF_NODE	44:17	44:17	9	xd
ASSIGN_OP	44:20	44:20	7	=
LEAF_NODE	44:20	44:20	8	=
RVAL	44:22	44:22	7	& xt -> xtif_dir
UNARY_EXPR	44:22	44:23	8	& xt -> xtif_dir
UNARY_OPERATOR	44:22	44:22	9	&
LEAF_NODE	44:22	44:22	10	&
FIELD	44:23	44:27	9	xt -> xtif_dir
LEAF_NODE	44:23	44:23	10	xt
LEAF_NODE	44:25	44:25	10	->
LEAF_NODE	44:27	44:27	10	xtif_dir
LEAF_NODE	44:35	44:35	4	;
SIMPLE_DECL	45:1	45:10	3	int i , int num ;
INIT_DECL_LIST	45:1	45:1	4	int i , int num
VAR_DECL	45:1	45:5	5	int i
TYPE	45:1	45:1	6	int
TYPE_NAME	45:1	45:1	7	int
LEAF_NODE	45:1	45:1	8	int
NAME	45:5	45:5	6	i
LEAF_NODE	45:5	45:5	7	i
LEAF_NODE	45:6	45:6	5	,
VAR_DECL	45:1	45:7	5	int num
TYPE	45:1	45:1	6	int
TYPE_NAME	45:1	45:1	7	int
LEAF_NODE	45:1	45:1	8	int
NAME	45:7	45:7	6	num
LEAF_NODE	45:7	45:7	7	num
LEAF_NODE	45:10	45:10	4	;
SELECTION	48:1	49:2	3	
KEYWORD	48:1	48:1	4	if
LEAF_NODE	48:1	48:1	5	if
LEAF_NODE	48:4	48:4	4	(
CONDITION	48:5	48:5	4	PARENT ( xt , printdir )
EXPR	48:5	48:5	5	PARENT ( xt , printdir )
FUNCTION_CALL	48:5	48:23	6	PARENT ( xt , printdir )
CALLEE	48:5	48:5	7	PARENT
LEAF_NODE	48:5	48:5	8	PARENT
LEAF_NODE	48:11	48:11	7	(
ARGUMENT	48:12	48:12	7	xt
FIELD	48:12	48:12	8	xt
LEAF_NODE	48:12	48:12	9	xt
LEAF_NODE	48:14	48:14	7	,
ARGUMENT	48:15	48:15	7	printdir
FIELD	48:15	48:15	8	printdir
LEAF_NODE	48:15	48:15	9	printdir
LEAF_NODE	48:23	48:23	7	)
LEAF_NODE	48:24	48:24	4	)
STATEMENTS	49:2	49:2	4	
EXPR_STATEMENT	49:2	49:37	5	( PARENT ( xt , printdir ) ) ( tif , fd , flags ) ;
EXPR	49:2	49:2	6	( PARENT ( xt , printdir ) ) ( tif , fd , flags )
FUNCTION_CALL	49:2	49:36	7	( PARENT ( xt , printdir ) ) ( tif , fd , flags )
CALLEE	49:2	49:22	8	( PARENT ( xt , printdir ) )
LEAF_NODE	49:2	49:2	9	(
FUNCTION_CALL	49:3	49:21	9	PARENT ( xt , printdir )
CALLEE	49:3	49:3	10	PARENT
LEAF_NODE	49:3	49:3	11	PARENT
LEAF_NODE	49:9	49:9	10	(
ARGUMENT	49:10	49:10	10	xt
FIELD	49:10	49:10	11	xt
LEAF_NODE	49:10	49:10	12	xt
LEAF_NODE	49:12	49:12	10	,
ARGUMENT	49:13	49:13	10	printdir
FIELD	49:13	49:13	11	printdir
LEAF_NODE	49:13	49:13	12	printdir
LEAF_NODE	49:21	49:21	10	)
LEAF_NODE	49:22	49:22	9	)
LEAF_NODE	49:23	49:23	8	(
ARGUMENT	49:24	49:24	8	tif
FIELD	49:24	49:24	9	tif
LEAF_NODE	49:24	49:24	10	tif
LEAF_NODE	49:27	49:27	8	,
ARGUMENT	49:28	49:28	8	fd
FIELD	49:28	49:28	9	fd
LEAF_NODE	49:28	49:28	10	fd
LEAF_NODE	49:30	49:30	8	,
ARGUMENT	49:31	49:31	8	flags
FIELD	49:31	49:31	9	flags
LEAF_NODE	49:31	49:31	10	flags
LEAF_NODE	49:36	49:36	8	)
LEAF_NODE	49:37	49:37	6	;
EXPR_STATEMENT	55:1	55:36	3	fprintf ( fd , "--My Example Tags--\n" ) ;
EXPR	55:1	55:1	4	fprintf ( fd , "--My Example Tags--\n" )
FUNCTION_CALL	55:1	55:35	5	fprintf ( fd , "--My Example Tags--\n" )
CALLEE	55:1	55:1	6	fprintf
LEAF_NODE	55:1	55:1	7	fprintf
LEAF_NODE	55:8	55:8	6	(
ARGUMENT	55:9	55:9	6	fd
FIELD	55:9	55:9	7	fd
LEAF_NODE	55:9	55:9	8	fd
LEAF_NODE	55:11	55:11	6	,
ARGUMENT	55:12	55:12	6	"--My Example Tags--\n"
FIELD	55:12	55:12	7	"--My Example Tags--\n"
LEAF_NODE	55:12	55:12	8	"--My Example Tags--\n"
LEAF_NODE	55:35	55:35	6	)
LEAF_NODE	55:36	55:36	4	;
SELECTION	61:1	62:1	3	
KEYWORD	61:1	61:1	4	if
LEAF_NODE	61:1	61:1	5	if
LEAF_NODE	61:4	61:4	4	(
CONDITION	61:5	61:5	4	TIFFFieldSet ( tif , FIELD_EXAMPLE_MULTI )
EXPR	61:5	61:5	5	TIFFFieldSet ( tif , FIELD_EXAMPLE_MULTI )
FUNCTION_CALL	61:5	61:41	6	TIFFFieldSet ( tif , FIELD_EXAMPLE_MULTI )
CALLEE	61:5	61:5	7	TIFFFieldSet
LEAF_NODE	61:5	61:5	8	TIFFFieldSet
LEAF_NODE	61:17	61:17	7	(
ARGUMENT	61:18	61:18	7	tif
FIELD	61:18	61:18	8	tif
LEAF_NODE	61:18	61:18	9	tif
LEAF_NODE	61:21	61:21	7	,
ARGUMENT	61:22	61:22	7	FIELD_EXAMPLE_MULTI
FIELD	61:22	61:22	8	FIELD_EXAMPLE_MULTI
LEAF_NODE	61:22	61:22	9	FIELD_EXAMPLE_MULTI
LEAF_NODE	61:41	61:41	7	)
LEAF_NODE	61:42	61:42	4	)
STATEMENTS	62:1	74:1	4	
LEAF_NODE	62:1	62:1	5	{
STATEMENTS	63:2	72:4	5	
EXPR_STATEMENT	63:2	63:43	6	fprintf ( fd , "  My Multi-Valued Doubles:" ) ;
EXPR	63:2	63:2	7	fprintf ( fd , "  My Multi-Valued Doubles:" )
FUNCTION_CALL	63:2	63:42	8	fprintf ( fd , "  My Multi-Valued Doubles:" )
CALLEE	63:2	63:2	9	fprintf
LEAF_NODE	63:2	63:2	10	fprintf
LEAF_NODE	63:9	63:9	9	(
ARGUMENT	63:10	63:10	9	fd
FIELD	63:10	63:10	10	fd
LEAF_NODE	63:10	63:10	11	fd
LEAF_NODE	63:12	63:12	9	,
ARGUMENT	63:14	63:14	9	"  My Multi-Valued Doubles:"
FIELD	63:14	63:14	10	"  My Multi-Valued Doubles:"
LEAF_NODE	63:14	63:14	11	"  My Multi-Valued Doubles:"
LEAF_NODE	63:42	63:42	9	)
LEAF_NODE	63:43	63:43	7	;
SELECTION	64:2	65:2	6	
KEYWORD	64:2	64:2	7	if
LEAF_NODE	64:2	64:2	8	if
LEAF_NODE	64:5	64:5	7	(
CONDITION	64:6	64:6	7	flags & TIFFPRINT_MYMULTIDOUBLES
EXPR	64:6	64:14	8	flags & TIFFPRINT_MYMULTIDOUBLES
FIELD	64:6	64:6	9	flags
LEAF_NODE	64:6	64:6	10	flags
LEAF_NODE	64:12	64:12	9	&
FIELD	64:14	64:14	9	TIFFPRINT_MYMULTIDOUBLES
LEAF_NODE	64:14	64:14	10	TIFFPRINT_MYMULTIDOUBLES
LEAF_NODE	64:38	64:38	7	)
STATEMENTS	65:2	72:2	7	
LEAF_NODE	65:2	65:2	8	{
STATEMENTS	66:3	71:3	8	
SIMPLE_DECL	66:3	66:39	9	double * value ; value = xd -> xd_example_multi ;
VAR_DECL	66:3	66:11	10	double * value ; value = xd -> xd_example_multi
TYPE	66:3	66:10	11	double *
TYPE_NAME	66:3	66:3	12	double
LEAF_NODE	66:3	66:3	13	double
POINTER	66:10	66:10	12	*
LEAF_NODE	66:10	66:10	13	*
NAME	66:11	66:11	11	value
LEAF_NODE	66:11	66:11	12	value
LEAF_NODE	0:0	0:0	11	;
INIT	66:11	66:11	11	value = xd -> xd_example_multi
ASSIGN	66:11	66:19	12	value = xd -> xd_example_multi
LVAL	66:11	66:11	13	value
NAME	66:11	66:11	14	value
LEAF_NODE	66:11	66:11	15	value
ASSIGN_OP	66:17	66:17	13	=
LEAF_NODE	66:17	66:17	14	=
RVAL	66:19	66:19	13	xd -> xd_example_multi
FIELD	66:19	66:23	14	xd -> xd_example_multi
LEAF_NODE	66:19	66:19	15	xd
LEAF_NODE	66:21	66:21	15	->
LEAF_NODE	66:23	66:23	15	xd_example_multi
LEAF_NODE	66:39	66:39	10	;
EXPR_STATEMENT	68:3	68:25	9	num = xd -> xd_num_multi ;
EXPR	68:3	68:3	10	num = xd -> xd_num_multi
ASSIGN	68:3	68:9	11	num = xd -> xd_num_multi
LVAL	68:3	68:3	12	num
FIELD	68:3	68:3	13	num
LEAF_NODE	68:3	68:3	14	num
ASSIGN_OP	68:7	68:7	12	=
LEAF_NODE	68:7	68:7	13	=
RVAL	68:9	68:9	12	xd -> xd_num_multi
FIELD	68:9	68:13	13	xd -> xd_num_multi
LEAF_NODE	68:9	68:9	14	xd
LEAF_NODE	68:11	68:11	14	->
LEAF_NODE	68:13	68:13	14	xd_num_multi
LEAF_NODE	68:25	68:25	10	;
EXPR_STATEMENT	69:3	69:18	9	fprintf ( fd , "(" ) ;
EXPR	69:3	69:3	10	fprintf ( fd , "(" )
FUNCTION_CALL	69:3	69:17	11	fprintf ( fd , "(" )
CALLEE	69:3	69:3	12	fprintf
LEAF_NODE	69:3	69:3	13	fprintf
LEAF_NODE	69:10	69:10	12	(
ARGUMENT	69:11	69:11	12	fd
FIELD	69:11	69:11	13	fd
LEAF_NODE	69:11	69:11	14	fd
LEAF_NODE	69:13	69:13	12	,
ARGUMENT	69:14	69:14	12	"("
FIELD	69:14	69:14	13	"("
LEAF_NODE	69:14	69:14	14	"("
LEAF_NODE	69:17	69:17	12	)
LEAF_NODE	69:18	69:18	10	;
ITERATION	70:3	70:23	9	
KEYWORD	70:3	70:3	10	for
LEAF_NODE	70:3	70:3	11	for
LEAF_NODE	70:7	70:7	10	(
FOR_INIT	70:8	70:11	10	i = 0 ;
EXPR	70:8	70:8	11	i = 0
ASSIGN	70:8	70:10	12	i = 0
LVAL	70:8	70:8	13	i
FIELD	70:8	70:8	14	i
LEAF_NODE	70:8	70:8	15	i
ASSIGN_OP	70:9	70:9	13	=
LEAF_NODE	70:9	70:9	14	=
RVAL	70:10	70:10	13	0
FIELD	70:10	70:10	14	0
LEAF_NODE	70:10	70:10	15	0
LEAF_NODE	70:11	70:11	11	;
CONDITION	70:12	70:12	10	i < num
EXPR	70:12	70:14	11	i < num
FIELD	70:12	70:12	12	i
LEAF_NODE	70:12	70:12	13	i
REL_OPERATOR	70:13	70:13	12	<
LEAF_NODE	70:13	70:13	13	<
FIELD	70:14	70:14	12	num
LEAF_NODE	70:14	70:14	13	num
LEAF_NODE	70:17	70:17	10	;
FOR_EXPR	70:18	70:18	10	i ++
EXPR	70:18	70:18	11	i ++
FIELD	70:18	70:19	12	i ++
LEAF_NODE	70:18	70:18	13	i
LEAF_NODE	70:19	70:19	13	++
LEAF_NODE	70:21	70:21	10	)
STATEMENTS	70:23	70:23	10	
EXPR_STATEMENT	70:23	70:52	11	fprintf ( fd , " %lg" , * value ++ ) ;
EXPR	70:23	70:23	12	fprintf ( fd , " %lg" , * value ++ )
FUNCTION_CALL	70:23	70:51	13	fprintf ( fd , " %lg" , * value ++ )
CALLEE	70:23	70:23	14	fprintf
LEAF_NODE	70:23	70:23	15	fprintf
LEAF_NODE	70:30	70:30	14	(
ARGUMENT	70:31	70:31	14	fd
FIELD	70:31	70:31	15	fd
LEAF_NODE	70:31	70:31	16	fd
LEAF_NODE	70:33	70:33	14	,
ARGUMENT	70:35	70:35	14	" %lg"
FIELD	70:35	70:35	15	" %lg"
LEAF_NODE	70:35	70:35	16	" %lg"
LEAF_NODE	70:41	70:41	14	,
ARGUMENT	70:43	70:43	14	* value ++
UNARY_EXPR	70:43	70:44	15	* value ++
UNARY_OPERATOR	70:43	70:43	16	*
LEAF_NODE	70:43	70:43	17	*
FIELD	70:44	70:49	16	value ++
LEAF_NODE	70:44	70:44	17	value
LEAF_NODE	70:49	70:49	17	++
LEAF_NODE	70:51	70:51	14	)
LEAF_NODE	70:52	70:52	12	;
EXPR_STATEMENT	71:3	71:20	9	fprintf ( fd , ")\n" ) ;
EXPR	71:3	71:3	10	fprintf ( fd , ")\n" )
FUNCTION_CALL	71:3	71:19	11	fprintf ( fd , ")\n" )
CALLEE	71:3	71:3	12	fprintf
LEAF_NODE	71:3	71:3	13	fprintf
LEAF_NODE	71:10	71:10	12	(
ARGUMENT	71:11	71:11	12	fd
FIELD	71:11	71:11	13	fd
LEAF_NODE	71:11	71:11	14	fd
LEAF_NODE	71:13	71:13	12	,
ARGUMENT	71:14	71:14	12	")\n"
FIELD	71:14	71:14	13	")\n"
LEAF_NODE	71:14	71:14	14	")\n"
LEAF_NODE	71:19	71:19	12	)
LEAF_NODE	71:20	71:20	10	;
LEAF_NODE	72:2	72:2	8	}
SELECTION	72:4	73:3	6	
KEYWORD	72:4	72:4	7	else
LEAF_NODE	72:4	72:4	8	else
STATEMENTS	73:3	73:3	7	
EXPR_STATEMENT	73:3	73:29	8	fprintf ( fd , "(present)\n" ) ;
EXPR	73:3	73:3	9	fprintf ( fd , "(present)\n" )
FUNCTION_CALL	73:3	73:28	10	fprintf ( fd , "(present)\n" )
CALLEE	73:3	73:3	11	fprintf
LEAF_NODE	73:3	73:3	12	fprintf
LEAF_NODE	73:10	73:10	11	(
ARGUMENT	73:11	73:11	11	fd
FIELD	73:11	73:11	12	fd
LEAF_NODE	73:11	73:11	13	fd
LEAF_NODE	73:13	73:13	11	,
ARGUMENT	73:15	73:15	11	"(present)\n"
FIELD	73:15	73:15	12	"(present)\n"
LEAF_NODE	73:15	73:15	13	"(present)\n"
LEAF_NODE	73:28	73:28	11	)
LEAF_NODE	73:29	73:29	9	;
LEAF_NODE	74:1	74:1	5	}
SELECTION	76:1	77:1	3	
KEYWORD	76:1	76:1	4	if
LEAF_NODE	76:1	76:1	5	if
LEAF_NODE	76:4	76:4	4	(
CONDITION	76:5	76:5	4	TIFFFieldSet ( tif , FIELD_EXAMPLE_SINGLE )
EXPR	76:5	76:5	5	TIFFFieldSet ( tif , FIELD_EXAMPLE_SINGLE )
FUNCTION_CALL	76:5	76:42	6	TIFFFieldSet ( tif , FIELD_EXAMPLE_SINGLE )
CALLEE	76:5	76:5	7	TIFFFieldSet
LEAF_NODE	76:5	76:5	8	TIFFFieldSet
LEAF_NODE	76:17	76:17	7	(
ARGUMENT	76:18	76:18	7	tif
FIELD	76:18	76:18	8	tif
LEAF_NODE	76:18	76:18	9	tif
LEAF_NODE	76:21	76:21	7	,
ARGUMENT	76:22	76:22	7	FIELD_EXAMPLE_SINGLE
FIELD	76:22	76:22	8	FIELD_EXAMPLE_SINGLE
LEAF_NODE	76:22	76:22	9	FIELD_EXAMPLE_SINGLE
LEAF_NODE	76:42	76:42	7	)
LEAF_NODE	76:43	76:43	4	)
STATEMENTS	77:1	79:1	4	
LEAF_NODE	77:1	77:1	5	{
STATEMENTS	78:2	78:2	5	
EXPR_STATEMENT	78:2	78:68	6	fprintf ( fd , "  My Single Long Tag:  %lu\n" , xd -> xd_example_single ) ;
EXPR	78:2	78:2	7	fprintf ( fd , "  My Single Long Tag:  %lu\n" , xd -> xd_example_single )
FUNCTION_CALL	78:2	78:67	8	fprintf ( fd , "  My Single Long Tag:  %lu\n" , xd -> xd_example_single )
CALLEE	78:2	78:2	9	fprintf
LEAF_NODE	78:2	78:2	10	fprintf
LEAF_NODE	78:9	78:9	9	(
ARGUMENT	78:10	78:10	9	fd
FIELD	78:10	78:10	10	fd
LEAF_NODE	78:10	78:10	11	fd
LEAF_NODE	78:12	78:12	9	,
ARGUMENT	78:14	78:14	9	"  My Single Long Tag:  %lu\n"
FIELD	78:14	78:14	10	"  My Single Long Tag:  %lu\n"
LEAF_NODE	78:14	78:14	11	"  My Single Long Tag:  %lu\n"
LEAF_NODE	78:44	78:44	9	,
ARGUMENT	78:46	78:46	9	xd -> xd_example_single
FIELD	78:46	78:50	10	xd -> xd_example_single
LEAF_NODE	78:46	78:46	11	xd
LEAF_NODE	78:48	78:48	11	->
LEAF_NODE	78:50	78:50	11	xd_example_single
LEAF_NODE	78:67	78:67	9	)
LEAF_NODE	78:68	78:68	7	;
LEAF_NODE	79:1	79:1	5	}
SELECTION	81:1	82:1	3	
KEYWORD	81:1	81:1	4	if
LEAF_NODE	81:1	81:1	5	if
LEAF_NODE	81:4	81:4	4	(
CONDITION	81:5	81:5	4	TIFFFieldSet ( tif , FIELD_EXAMPLE_ASCII )
EXPR	81:5	81:5	5	TIFFFieldSet ( tif , FIELD_EXAMPLE_ASCII )
FUNCTION_CALL	81:5	81:41	6	TIFFFieldSet ( tif , FIELD_EXAMPLE_ASCII )
CALLEE	81:5	81:5	7	TIFFFieldSet
LEAF_NODE	81:5	81:5	8	TIFFFieldSet
LEAF_NODE	81:17	81:17	7	(
ARGUMENT	81:18	81:18	7	tif
FIELD	81:18	81:18	8	tif
LEAF_NODE	81:18	81:18	9	tif
LEAF_NODE	81:21	81:21	7	,
ARGUMENT	81:22	81:22	7	FIELD_EXAMPLE_ASCII
FIELD	81:22	81:22	8	FIELD_EXAMPLE_ASCII
LEAF_NODE	81:22	81:22	9	FIELD_EXAMPLE_ASCII
LEAF_NODE	81:41	81:41	7	)
LEAF_NODE	81:42	81:42	4	)
STATEMENTS	82:1	85:1	4	
LEAF_NODE	82:1	82:1	5	{
STATEMENTS	83:2	83:2	5	
EXPR_STATEMENT	83:2	84:25	6	_TIFFprintAsciiTag ( fd , "My ASCII Tag" , xd -> xd_example_ascii ) ;
EXPR	83:2	83:2	7	_TIFFprintAsciiTag ( fd , "My ASCII Tag" , xd -> xd_example_ascii )
FUNCTION_CALL	83:2	84:24	8	_TIFFprintAsciiTag ( fd , "My ASCII Tag" , xd -> xd_example_ascii )
CALLEE	83:2	83:2	9	_TIFFprintAsciiTag
LEAF_NODE	83:2	83:2	10	_TIFFprintAsciiTag
LEAF_NODE	83:20	83:20	9	(
ARGUMENT	83:21	83:21	9	fd
FIELD	83:21	83:21	10	fd
LEAF_NODE	83:21	83:21	11	fd
LEAF_NODE	83:23	83:23	9	,
ARGUMENT	83:24	83:24	9	"My ASCII Tag"
FIELD	83:24	83:24	10	"My ASCII Tag"
LEAF_NODE	83:24	83:24	11	"My ASCII Tag"
LEAF_NODE	83:38	83:38	9	,
ARGUMENT	84:4	84:4	9	xd -> xd_example_ascii
FIELD	84:4	84:8	10	xd -> xd_example_ascii
LEAF_NODE	84:4	84:4	11	xd
LEAF_NODE	84:6	84:6	11	->
LEAF_NODE	84:8	84:8	11	xd_example_ascii
LEAF_NODE	84:24	84:24	9	)
LEAF_NODE	84:25	84:25	7	;
LEAF_NODE	85:1	85:1	5	}
LEAF_NODE	86:0	86:0	2	}
FUNCTION_DEF	88:0	150:0	1	
RETURN_TYPE	88:0	88:7	2	static int
LEAF_NODE	88:0	88:0	3	static
TYPE_NAME	88:7	88:7	3	int
LEAF_NODE	88:7	88:7	4	int
FUNCTION_NAME	89:0	89:0	2	_XTIFFVSetField
LEAF_NODE	89:0	89:0	3	_XTIFFVSetField
PARAMETER_LIST	89:15	89:49	2	( TIFF * tif , ttag_t tag , va_list ap )
LEAF_NODE	89:15	89:15	3	(
PARAMETER_DECL	89:16	89:22	3	TIFF * tif
TYPE	89:16	89:20	4	TIFF *
TYPE_NAME	89:16	89:16	5	TIFF
LEAF_NODE	89:16	89:16	6	TIFF
POINTER	89:20	89:20	5	*
LEAF_NODE	89:20	89:20	6	*
NAME	89:22	89:22	4	tif
LEAF_NODE	89:22	89:22	5	tif
LEAF_NODE	89:25	89:25	3	,
PARAMETER_DECL	89:27	89:34	3	ttag_t tag
TYPE	89:27	89:27	4	ttag_t
TYPE_NAME	89:27	89:27	5	ttag_t
LEAF_NODE	89:27	89:27	6	ttag_t
NAME	89:34	89:34	4	tag
LEAF_NODE	89:34	89:34	5	tag
LEAF_NODE	89:37	89:37	3	,
PARAMETER_DECL	89:39	89:47	3	va_list ap
TYPE	89:39	89:39	4	va_list
TYPE_NAME	89:39	89:39	5	va_list
LEAF_NODE	89:39	89:39	6	va_list
NAME	89:47	89:47	4	ap
LEAF_NODE	89:47	89:47	5	ap
LEAF_NODE	89:49	89:49	3	)
LEAF_NODE	90:0	90:0	2	{
STATEMENTS	91:1	149:1	2	
SIMPLE_DECL	91:1	91:26	3	xtiff * xt ; xt = XTIFFDIR ( tif ) ;
VAR_DECL	91:1	91:8	4	xtiff * xt ; xt = XTIFFDIR ( tif )
TYPE	91:1	91:7	5	xtiff *
TYPE_NAME	91:1	91:1	6	xtiff
LEAF_NODE	91:1	91:1	7	xtiff
POINTER	91:7	91:7	6	*
LEAF_NODE	91:7	91:7	7	*
NAME	91:8	91:8	5	xt
LEAF_NODE	91:8	91:8	6	xt
LEAF_NODE	0:0	0:0	5	;
INIT	91:8	91:8	5	xt = XTIFFDIR ( tif )
ASSIGN	91:8	91:13	6	xt = XTIFFDIR ( tif )
LVAL	91:8	91:8	7	xt
NAME	91:8	91:8	8	xt
LEAF_NODE	91:8	91:8	9	xt
ASSIGN_OP	91:11	91:11	7	=
LEAF_NODE	91:11	91:11	8	=
RVAL	91:13	91:13	7	XTIFFDIR ( tif )
FUNCTION_CALL	91:13	91:25	8	XTIFFDIR ( tif )
CALLEE	91:13	91:13	9	XTIFFDIR
LEAF_NODE	91:13	91:13	10	XTIFFDIR
LEAF_NODE	91:21	91:21	9	(
ARGUMENT	91:22	91:22	9	tif
FIELD	91:22	91:22	10	tif
LEAF_NODE	91:22	91:22	11	tif
LEAF_NODE	91:25	91:25	9	)
LEAF_NODE	91:26	91:26	4	;
SIMPLE_DECL	92:1	92:35	3	XTIFFDirectory * xd ; xd = & xt -> xtif_dir ;
VAR_DECL	92:1	92:17	4	XTIFFDirectory * xd ; xd = & xt -> xtif_dir
TYPE	92:1	92:15	5	XTIFFDirectory *
TYPE_NAME	92:1	92:1	6	XTIFFDirectory
LEAF_NODE	92:1	92:1	7	XTIFFDirectory
POINTER	92:15	92:15	6	*
LEAF_NODE	92:15	92:15	7	*
NAME	92:17	92:17	5	xd
LEAF_NODE	92:17	92:17	6	xd
LEAF_NODE	0:0	0:0	5	;
INIT	92:17	92:17	5	xd = & xt -> xtif_dir
ASSIGN	92:17	92:22	6	xd = & xt -> xtif_dir
LVAL	92:17	92:17	7	xd
NAME	92:17	92:17	8	xd
LEAF_NODE	92:17	92:17	9	xd
ASSIGN_OP	92:20	92:20	7	=
LEAF_NODE	92:20	92:20	8	=
RVAL	92:22	92:22	7	& xt -> xtif_dir
UNARY_EXPR	92:22	92:23	8	& xt -> xtif_dir
UNARY_OPERATOR	92:22	92:22	9	&
LEAF_NODE	92:22	92:22	10	&
FIELD	92:23	92:27	9	xt -> xtif_dir
LEAF_NODE	92:23	92:23	10	xt
LEAF_NODE	92:25	92:25	10	->
LEAF_NODE	92:27	92:27	10	xtif_dir
LEAF_NODE	92:35	92:35	4	;
SIMPLE_DECL	93:1	93:15	3	int status ; status = 1 ;
VAR_DECL	93:1	93:5	4	int status ; status = 1
TYPE	93:1	93:1	5	int
TYPE_NAME	93:1	93:1	6	int
LEAF_NODE	93:1	93:1	7	int
NAME	93:5	93:5	5	status
LEAF_NODE	93:5	93:5	6	status
LEAF_NODE	0:0	0:0	5	;
INIT	93:5	93:5	5	status = 1
ASSIGN	93:5	93:14	6	status = 1
LVAL	93:5	93:5	7	status
NAME	93:5	93:5	8	status
LEAF_NODE	93:5	93:5	9	status
ASSIGN_OP	93:12	93:12	7	=
LEAF_NODE	93:12	93:12	8	=
RVAL	93:14	93:14	7	1
FIELD	93:14	93:14	8	1
LEAF_NODE	93:14	93:14	9	1
LEAF_NODE	93:15	93:15	4	;
SIMPLE_DECL	94:1	94:13	3	uint32 v32 ; v32 = 0 ;
VAR_DECL	94:1	94:8	4	uint32 v32 ; v32 = 0
TYPE	94:1	94:1	5	uint32
TYPE_NAME	94:1	94:1	6	uint32
LEAF_NODE	94:1	94:1	7	uint32
NAME	94:8	94:8	5	v32
LEAF_NODE	94:8	94:8	6	v32
LEAF_NODE	0:0	0:0	5	;
INIT	94:8	94:8	5	v32 = 0
ASSIGN	94:8	94:12	6	v32 = 0
LVAL	94:8	94:8	7	v32
NAME	94:8	94:8	8	v32
LEAF_NODE	94:8	94:8	9	v32
ASSIGN_OP	94:11	94:11	7	=
LEAF_NODE	94:11	94:11	8	=
RVAL	94:12	94:12	7	0
FIELD	94:12	94:12	8	0
LEAF_NODE	94:12	94:12	9	0
LEAF_NODE	94:13	94:13	4	;
SIMPLE_DECL	95:1	95:13	3	int i ; i = 0 , int v ; v = 0 ;
INIT_DECL_LIST	95:1	95:1	4	int i ; i = 0 , int v ; v = 0
VAR_DECL	95:1	95:5	5	int i ; i = 0
TYPE	95:1	95:1	6	int
TYPE_NAME	95:1	95:1	7	int
LEAF_NODE	95:1	95:1	8	int
NAME	95:5	95:5	6	i
LEAF_NODE	95:5	95:5	7	i
LEAF_NODE	0:0	0:0	6	;
INIT	95:5	95:5	6	i = 0
ASSIGN	95:5	95:7	7	i = 0
LVAL	95:5	95:5	8	i
NAME	95:5	95:5	9	i
LEAF_NODE	95:5	95:5	10	i
ASSIGN_OP	95:6	95:6	8	=
LEAF_NODE	95:6	95:6	9	=
RVAL	95:7	95:7	8	0
FIELD	95:7	95:7	9	0
LEAF_NODE	95:7	95:7	10	0
LEAF_NODE	95:8	95:8	5	,
VAR_DECL	95:1	95:10	5	int v ; v = 0
TYPE	95:1	95:1	6	int
TYPE_NAME	95:1	95:1	7	int
LEAF_NODE	95:1	95:1	8	int
NAME	95:10	95:10	6	v
LEAF_NODE	95:10	95:10	7	v
LEAF_NODE	0:0	0:0	6	;
INIT	95:10	95:10	6	v = 0
ASSIGN	95:10	95:12	7	v = 0
LVAL	95:10	95:10	8	v
NAME	95:10	95:10	9	v
LEAF_NODE	95:10	95:10	10	v
ASSIGN_OP	95:11	95:11	8	=
LEAF_NODE	95:11	95:11	9	=
RVAL	95:12	95:12	8	0
FIELD	95:12	95:12	9	0
LEAF_NODE	95:12	95:12	10	0
LEAF_NODE	95:13	95:13	4	;
SIMPLE_DECL	96:1	96:17	3	va_list ap1 ; ap1 = ap ;
VAR_DECL	96:1	96:9	4	va_list ap1 ; ap1 = ap
TYPE	96:1	96:1	5	va_list
TYPE_NAME	96:1	96:1	6	va_list
LEAF_NODE	96:1	96:1	7	va_list
NAME	96:9	96:9	5	ap1
LEAF_NODE	96:9	96:9	6	ap1
LEAF_NODE	0:0	0:0	5	;
INIT	96:9	96:9	5	ap1 = ap
ASSIGN	96:9	96:15	6	ap1 = ap
LVAL	96:9	96:9	7	ap1
NAME	96:9	96:9	8	ap1
LEAF_NODE	96:9	96:9	9	ap1
ASSIGN_OP	96:13	96:13	7	=
LEAF_NODE	96:13	96:13	8	=
RVAL	96:15	96:15	7	ap
FIELD	96:15	96:15	8	ap
LEAF_NODE	96:15	96:15	9	ap
LEAF_NODE	96:17	96:17	4	;
SELECTION	100:1	100:14	3	
KEYWORD	100:1	100:1	4	switch
LEAF_NODE	100:1	100:1	5	switch
LEAF_NODE	100:8	100:8	4	(
CONDITION	100:9	100:9	4	tag
EXPR	100:9	100:9	5	tag
FIELD	100:9	100:9	6	tag
LEAF_NODE	100:9	100:9	7	tag
LEAF_NODE	100:12	100:12	4	)
STATEMENTS	100:14	121:1	4	
LEAF_NODE	100:14	100:14	5	{
STATEMENTS	105:1	120:2	5	
LABEL	105:1	105:27	6	case TIFFTAG_EXAMPLE_MULTI :
LEAF_NODE	105:1	105:1	7	case
LEAF_NODE	105:6	105:6	7	TIFFTAG_EXAMPLE_MULTI
LEAF_NODE	105:27	105:27	7	:
EXPR_STATEMENT	107:2	107:45	6	xd -> xd_num_multi = ( uint16 ) va_arg ( ap , int ) ;
EXPR	107:2	107:2	7	xd -> xd_num_multi = ( uint16 ) va_arg ( ap , int )
ASSIGN	107:2	107:21	8	xd -> xd_num_multi = ( uint16 ) va_arg ( ap , int )
LVAL	107:2	107:2	9	xd -> xd_num_multi
FIELD	107:2	107:6	10	xd -> xd_num_multi
LEAF_NODE	107:2	107:2	11	xd
LEAF_NODE	107:4	107:4	11	->
LEAF_NODE	107:6	107:6	11	xd_num_multi
ASSIGN_OP	107:19	107:19	9	=
LEAF_NODE	107:19	107:19	10	=
RVAL	107:21	107:30	9	( uint16 ) va_arg ( ap , int )
LEAF_NODE	107:21	107:21	10	(
TYPE_NAME	107:22	107:22	10	uint16
LEAF_NODE	107:22	107:22	11	uint16
LEAF_NODE	107:28	107:28	10	)
FUNCTION_CALL	107:30	107:44	10	va_arg ( ap , int )
CALLEE	107:30	107:30	11	va_arg
LEAF_NODE	107:30	107:30	12	va_arg
LEAF_NODE	107:36	107:36	11	(
ARGUMENT	107:37	107:37	11	ap
FIELD	107:37	107:37	12	ap
LEAF_NODE	107:37	107:37	13	ap
LEAF_NODE	107:39	107:39	11	,
ARGUMENT	107:41	107:41	11	int
FIELD	107:41	107:41	12	int
LEAF_NODE	107:41	107:41	13	int
LEAF_NODE	107:44	107:44	11	)
LEAF_NODE	107:45	107:45	7	;
LEAF_NODE	108:2	108:2	6	_TIFFsetDoubleArray
LEAF_NODE	108:21	108:21	6	(
LEAF_NODE	108:22	108:22	6	&
LEAF_NODE	108:23	108:23	6	xd
LEAF_NODE	108:25	108:25	6	->
LEAF_NODE	108:27	108:27	6	xd_example_multi
LEAF_NODE	108:43	108:43	6	,
LEAF_NODE	108:45	108:45	6	va_arg
LEAF_NODE	108:51	108:51	6	(
LEAF_NODE	108:52	108:52	6	ap
LEAF_NODE	108:54	108:54	6	,
LEAF_NODE	108:56	108:56	6	double
LEAF_NODE	108:62	108:62	6	*
LEAF_NODE	108:63	108:63	6	)
LEAF_NODE	108:64	108:64	6	,
LEAF_NODE	109:3	109:3	6	(
LEAF_NODE	109:4	109:4	6	long
LEAF_NODE	109:8	109:8	6	)
LEAF_NODE	109:10	109:10	6	xd
LEAF_NODE	109:12	109:12	6	->
LEAF_NODE	109:14	109:14	6	xd_num_multi
LEAF_NODE	109:26	109:26	6	)
LEAF_NODE	109:27	109:27	6	;
JUMP_STATEMENT	110:2	110:7	6	break DESTINATION ;
KEYWORD	110:2	110:2	7	break
LEAF_NODE	110:2	110:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	110:7	110:7	7	;
LABEL	111:1	111:28	6	case TIFFTAG_EXAMPLE_SINGLE :
LEAF_NODE	111:1	111:1	7	case
LEAF_NODE	111:6	111:6	7	TIFFTAG_EXAMPLE_SINGLE
LEAF_NODE	111:28	111:28	7	:
EXPR_STATEMENT	112:2	112:44	6	xd -> xd_example_single = va_arg ( ap , uint32 ) ;
EXPR	112:2	112:2	7	xd -> xd_example_single = va_arg ( ap , uint32 )
ASSIGN	112:2	112:26	8	xd -> xd_example_single = va_arg ( ap , uint32 )
LVAL	112:2	112:2	9	xd -> xd_example_single
FIELD	112:2	112:6	10	xd -> xd_example_single
LEAF_NODE	112:2	112:2	11	xd
LEAF_NODE	112:4	112:4	11	->
LEAF_NODE	112:6	112:6	11	xd_example_single
ASSIGN_OP	112:24	112:24	9	=
LEAF_NODE	112:24	112:24	10	=
RVAL	112:26	112:26	9	va_arg ( ap , uint32 )
FUNCTION_CALL	112:26	112:43	10	va_arg ( ap , uint32 )
CALLEE	112:26	112:26	11	va_arg
LEAF_NODE	112:26	112:26	12	va_arg
LEAF_NODE	112:32	112:32	11	(
ARGUMENT	112:33	112:33	11	ap
FIELD	112:33	112:33	12	ap
LEAF_NODE	112:33	112:33	13	ap
LEAF_NODE	112:35	112:35	11	,
ARGUMENT	112:37	112:37	11	uint32
FIELD	112:37	112:37	12	uint32
LEAF_NODE	112:37	112:37	13	uint32
LEAF_NODE	112:43	112:43	11	)
LEAF_NODE	112:44	112:44	7	;
JUMP_STATEMENT	113:2	113:7	6	break DESTINATION ;
KEYWORD	113:2	113:2	7	break
LEAF_NODE	113:2	113:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	113:7	113:7	7	;
LABEL	114:1	114:27	6	case TIFFTAG_EXAMPLE_ASCII :
LEAF_NODE	114:1	114:1	7	case
LEAF_NODE	114:6	114:6	7	TIFFTAG_EXAMPLE_ASCII
LEAF_NODE	114:27	114:27	7	:
LEAF_NODE	115:2	115:2	6	_TIFFsetString
LEAF_NODE	115:16	115:16	6	(
LEAF_NODE	115:17	115:17	6	&
LEAF_NODE	115:18	115:18	6	xd
LEAF_NODE	115:20	115:20	6	->
LEAF_NODE	115:22	115:22	6	xd_example_ascii
LEAF_NODE	115:38	115:38	6	,
LEAF_NODE	115:40	115:40	6	va_arg
LEAF_NODE	115:46	115:46	6	(
LEAF_NODE	115:47	115:47	6	ap
LEAF_NODE	115:49	115:49	6	,
LEAF_NODE	115:51	115:51	6	char
LEAF_NODE	115:55	115:55	6	*
LEAF_NODE	115:56	115:56	6	)
LEAF_NODE	115:57	115:57	6	)
LEAF_NODE	115:58	115:58	6	;
JUMP_STATEMENT	116:2	116:7	6	break DESTINATION ;
KEYWORD	116:2	116:2	7	break
LEAF_NODE	116:2	116:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	116:7	116:7	7	;
LABEL	117:1	117:8	6	default :
LEAF_NODE	117:1	117:1	7	default
LEAF_NODE	117:8	117:8	7	:
JUMP_STATEMENT	119:2	119:43	6	return ( PARENT ( xt , vsetfield ) ) ( tif , tag , ap ) ;
KEYWORD	119:2	119:2	7	return
LEAF_NODE	119:2	119:2	8	return
DESTINATION	119:9	119:9	7	( PARENT ( xt , vsetfield ) ) ( tif , tag , ap )
EXPR	119:9	119:9	8	( PARENT ( xt , vsetfield ) ) ( tif , tag , ap )
FUNCTION_CALL	119:9	119:42	9	( PARENT ( xt , vsetfield ) ) ( tif , tag , ap )
CALLEE	119:9	119:30	10	( PARENT ( xt , vsetfield ) )
LEAF_NODE	119:9	119:9	11	(
FUNCTION_CALL	119:10	119:29	11	PARENT ( xt , vsetfield )
CALLEE	119:10	119:10	12	PARENT
LEAF_NODE	119:10	119:10	13	PARENT
LEAF_NODE	119:16	119:16	12	(
ARGUMENT	119:17	119:17	12	xt
FIELD	119:17	119:17	13	xt
LEAF_NODE	119:17	119:17	14	xt
LEAF_NODE	119:19	119:19	12	,
ARGUMENT	119:20	119:20	12	vsetfield
FIELD	119:20	119:20	13	vsetfield
LEAF_NODE	119:20	119:20	14	vsetfield
LEAF_NODE	119:29	119:29	12	)
LEAF_NODE	119:30	119:30	11	)
LEAF_NODE	119:31	119:31	10	(
ARGUMENT	119:32	119:32	10	tif
FIELD	119:32	119:32	11	tif
LEAF_NODE	119:32	119:32	12	tif
LEAF_NODE	119:35	119:35	10	,
ARGUMENT	119:36	119:36	10	tag
FIELD	119:36	119:36	11	tag
LEAF_NODE	119:36	119:36	12	tag
LEAF_NODE	119:39	119:39	10	,
ARGUMENT	119:40	119:40	10	ap
FIELD	119:40	119:40	11	ap
LEAF_NODE	119:40	119:40	12	ap
LEAF_NODE	119:42	119:42	10	)
LEAF_NODE	119:43	119:43	7	;
JUMP_STATEMENT	120:2	120:7	6	break DESTINATION ;
KEYWORD	120:2	120:2	7	break
LEAF_NODE	120:2	120:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	120:7	120:7	7	;
LEAF_NODE	121:1	121:1	5	}
SELECTION	122:1	122:13	3	
KEYWORD	122:1	122:1	4	if
LEAF_NODE	122:1	122:1	5	if
LEAF_NODE	122:4	122:4	4	(
CONDITION	122:5	122:5	4	status
EXPR	122:5	122:5	5	status
FIELD	122:5	122:5	6	status
LEAF_NODE	122:5	122:5	7	status
LEAF_NODE	122:11	122:11	4	)
STATEMENTS	122:13	137:1	4	
LEAF_NODE	122:13	122:13	5	{
STATEMENTS	129:2	136:2	5	
SELECTION	129:2	130:2	6	
KEYWORD	129:2	129:2	7	if
LEAF_NODE	129:2	129:2	8	if
LEAF_NODE	129:5	129:5	7	(
CONDITION	129:6	129:6	7	! ( xt -> xtif_flags & XTIFFP_PRINT )
EXPR	129:6	129:6	8	! ( xt -> xtif_flags & XTIFFP_PRINT )
UNARY_EXPR	129:6	129:37	9	! ( xt -> xtif_flags & XTIFFP_PRINT )
UNARY_OPERATOR	129:6	129:6	10	!
LEAF_NODE	129:6	129:6	11	!
LEAF_NODE	129:7	129:7	10	(
FIELD	129:8	129:12	10	xt -> xtif_flags
LEAF_NODE	129:8	129:8	11	xt
LEAF_NODE	129:10	129:10	11	->
LEAF_NODE	129:12	129:12	11	xtif_flags
LEAF_NODE	129:23	129:23	10	&
FIELD	129:25	129:25	10	XTIFFP_PRINT
LEAF_NODE	129:25	129:25	11	XTIFFP_PRINT
LEAF_NODE	129:37	129:37	10	)
LEAF_NODE	129:38	129:38	7	)
STATEMENTS	130:2	134:2	7	
LEAF_NODE	130:2	130:2	8	{
STATEMENTS	131:10	133:3	8	
EXPR_STATEMENT	131:10	131:57	9	PARENT ( xt , printdir ) = TIFFMEMBER ( tif , printdir ) ;
EXPR	131:10	131:10	10	PARENT ( xt , printdir ) = TIFFMEMBER ( tif , printdir )
ASSIGN	131:10	131:33	11	PARENT ( xt , printdir ) = TIFFMEMBER ( tif , printdir )
LVAL	131:10	131:10	12	PARENT ( xt , printdir )
FUNCTION_CALL	131:10	131:28	13	PARENT ( xt , printdir )
CALLEE	131:10	131:10	14	PARENT
LEAF_NODE	131:10	131:10	15	PARENT
LEAF_NODE	131:16	131:16	14	(
ARGUMENT	131:17	131:17	14	xt
FIELD	131:17	131:17	15	xt
LEAF_NODE	131:17	131:17	16	xt
LEAF_NODE	131:19	131:19	14	,
ARGUMENT	131:20	131:20	14	printdir
FIELD	131:20	131:20	15	printdir
LEAF_NODE	131:20	131:20	16	printdir
LEAF_NODE	131:28	131:28	14	)
ASSIGN_OP	131:30	131:30	12	=
LEAF_NODE	131:30	131:30	13	=
RVAL	131:33	131:33	12	TIFFMEMBER ( tif , printdir )
FUNCTION_CALL	131:33	131:56	13	TIFFMEMBER ( tif , printdir )
CALLEE	131:33	131:33	14	TIFFMEMBER
LEAF_NODE	131:33	131:33	15	TIFFMEMBER
LEAF_NODE	131:43	131:43	14	(
ARGUMENT	131:44	131:44	14	tif
FIELD	131:44	131:44	15	tif
LEAF_NODE	131:44	131:44	16	tif
LEAF_NODE	131:47	131:47	14	,
ARGUMENT	131:48	131:48	14	printdir
FIELD	131:48	131:48	15	printdir
LEAF_NODE	131:48	131:48	16	printdir
LEAF_NODE	131:56	131:56	14	)
LEAF_NODE	131:57	131:57	10	;
EXPR_STATEMENT	132:11	132:58	9	TIFFMEMBER ( tif , printdir ) = _XTIFFPrintDirectory ;
EXPR	132:11	132:11	10	TIFFMEMBER ( tif , printdir ) = _XTIFFPrintDirectory
ASSIGN	132:11	132:38	11	TIFFMEMBER ( tif , printdir ) = _XTIFFPrintDirectory
LVAL	132:11	132:11	12	TIFFMEMBER ( tif , printdir )
FUNCTION_CALL	132:11	132:34	13	TIFFMEMBER ( tif , printdir )
CALLEE	132:11	132:11	14	TIFFMEMBER
LEAF_NODE	132:11	132:11	15	TIFFMEMBER
LEAF_NODE	132:21	132:21	14	(
ARGUMENT	132:22	132:22	14	tif
FIELD	132:22	132:22	15	tif
LEAF_NODE	132:22	132:22	16	tif
LEAF_NODE	132:25	132:25	14	,
ARGUMENT	132:26	132:26	14	printdir
FIELD	132:26	132:26	15	printdir
LEAF_NODE	132:26	132:26	16	printdir
LEAF_NODE	132:34	132:34	14	)
ASSIGN_OP	132:36	132:36	12	=
LEAF_NODE	132:36	132:36	13	=
RVAL	132:38	132:38	12	_XTIFFPrintDirectory
FIELD	132:38	132:38	13	_XTIFFPrintDirectory
LEAF_NODE	132:38	132:38	14	_XTIFFPrintDirectory
LEAF_NODE	132:58	132:58	10	;
EXPR_STATEMENT	133:3	133:33	9	xt -> xtif_flags |= XTIFFP_PRINT ;
EXPR	133:3	133:3	10	xt -> xtif_flags |= XTIFFP_PRINT
ASSIGN	133:3	133:21	11	xt -> xtif_flags |= XTIFFP_PRINT
LVAL	133:3	133:3	12	xt -> xtif_flags
FIELD	133:3	133:7	13	xt -> xtif_flags
LEAF_NODE	133:3	133:3	14	xt
LEAF_NODE	133:5	133:5	14	->
LEAF_NODE	133:7	133:7	14	xtif_flags
ASSIGN_OP	133:18	133:18	12	|=
LEAF_NODE	133:18	133:18	13	|=
RVAL	133:21	133:21	12	XTIFFP_PRINT
FIELD	133:21	133:21	13	XTIFFP_PRINT
LEAF_NODE	133:21	133:21	14	XTIFFP_PRINT
LEAF_NODE	133:33	133:33	10	;
LEAF_NODE	134:2	134:2	8	}
EXPR_STATEMENT	135:2	135:62	6	TIFFSetFieldBit ( tif , _TIFFFieldWithTag ( tif , tag ) -> field_bit ) ;
EXPR	135:2	135:2	7	TIFFSetFieldBit ( tif , _TIFFFieldWithTag ( tif , tag ) -> field_bit )
FUNCTION_CALL	135:2	135:61	8	TIFFSetFieldBit ( tif , _TIFFFieldWithTag ( tif , tag ) -> field_bit )
CALLEE	135:2	135:2	9	TIFFSetFieldBit
LEAF_NODE	135:2	135:2	10	TIFFSetFieldBit
LEAF_NODE	135:17	135:17	9	(
ARGUMENT	135:18	135:18	9	tif
FIELD	135:18	135:18	10	tif
LEAF_NODE	135:18	135:18	11	tif
LEAF_NODE	135:21	135:21	9	,
ARGUMENT	135:23	135:52	9	_TIFFFieldWithTag ( tif , tag ) -> field_bit
FUNCTION_CALL	135:23	135:49	10	_TIFFFieldWithTag ( tif , tag )
CALLEE	135:23	135:23	11	_TIFFFieldWithTag
LEAF_NODE	135:23	135:23	12	_TIFFFieldWithTag
LEAF_NODE	135:40	135:40	11	(
ARGUMENT	135:41	135:41	11	tif
FIELD	135:41	135:41	12	tif
LEAF_NODE	135:41	135:41	13	tif
LEAF_NODE	135:44	135:44	11	,
ARGUMENT	135:46	135:46	11	tag
FIELD	135:46	135:46	12	tag
LEAF_NODE	135:46	135:46	13	tag
LEAF_NODE	135:49	135:49	11	)
LEAF_NODE	135:50	135:50	10	->
LEAF_NODE	135:52	135:52	10	field_bit
LEAF_NODE	135:61	135:61	9	)
LEAF_NODE	135:62	135:62	7	;
EXPR_STATEMENT	136:2	136:36	6	tif -> tif_flags |= TIFF_DIRTYDIRECT ;
EXPR	136:2	136:2	7	tif -> tif_flags |= TIFF_DIRTYDIRECT
ASSIGN	136:2	136:20	8	tif -> tif_flags |= TIFF_DIRTYDIRECT
LVAL	136:2	136:2	9	tif -> tif_flags
FIELD	136:2	136:7	10	tif -> tif_flags
LEAF_NODE	136:2	136:2	11	tif
LEAF_NODE	136:5	136:5	11	->
LEAF_NODE	136:7	136:7	11	tif_flags
ASSIGN_OP	136:17	136:17	9	|=
LEAF_NODE	136:17	136:17	10	|=
RVAL	136:20	136:20	9	TIFF_DIRTYDIRECT
FIELD	136:20	136:20	10	TIFF_DIRTYDIRECT
LEAF_NODE	136:20	136:20	11	TIFF_DIRTYDIRECT
LEAF_NODE	136:36	136:36	7	;
LEAF_NODE	137:1	137:1	5	}
EXPR_STATEMENT	138:1	138:11	3	va_end ( ap ) ;
EXPR	138:1	138:1	4	va_end ( ap )
FUNCTION_CALL	138:1	138:10	5	va_end ( ap )
CALLEE	138:1	138:1	6	va_end
LEAF_NODE	138:1	138:1	7	va_end
LEAF_NODE	138:7	138:7	6	(
ARGUMENT	138:8	138:8	6	ap
FIELD	138:8	138:8	7	ap
LEAF_NODE	138:8	138:8	8	ap
LEAF_NODE	138:10	138:10	6	)
LEAF_NODE	138:11	138:11	4	;
LEAF_NODE	139:1	139:1	3	return
LEAF_NODE	139:8	139:8	3	(
LEAF_NODE	139:9	139:9	3	status
LEAF_NODE	139:15	139:15	3	)
LEAF_NODE	139:16	139:16	3	;
LABEL	140:0	140:8	3	badvalue :
LEAF_NODE	140:0	140:0	4	badvalue
LEAF_NODE	140:8	140:8	4	:
EXPR_STATEMENT	141:1	142:45	3	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%d: Bad value for \"%s\"" , v , _TIFFFieldWithTag ( tif , tag ) -> field_name ) ;
EXPR	141:1	141:1	4	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%d: Bad value for \"%s\"" , v , _TIFFFieldWithTag ( tif , tag ) -> field_name )
FUNCTION_CALL	141:1	142:44	5	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%d: Bad value for \"%s\"" , v , _TIFFFieldWithTag ( tif , tag ) -> field_name )
CALLEE	141:1	141:1	6	TIFFErrorExt
LEAF_NODE	141:1	141:1	7	TIFFErrorExt
LEAF_NODE	141:13	141:13	6	(
ARGUMENT	141:14	141:14	6	tif -> tif_clientdata
FIELD	141:14	141:19	7	tif -> tif_clientdata
LEAF_NODE	141:14	141:14	8	tif
LEAF_NODE	141:17	141:17	8	->
LEAF_NODE	141:19	141:19	8	tif_clientdata
LEAF_NODE	141:33	141:33	6	,
ARGUMENT	141:35	141:35	6	tif -> tif_name
FIELD	141:35	141:40	7	tif -> tif_name
LEAF_NODE	141:35	141:35	8	tif
LEAF_NODE	141:38	141:38	8	->
LEAF_NODE	141:40	141:40	8	tif_name
LEAF_NODE	141:48	141:48	6	,
ARGUMENT	141:50	141:50	6	"%d: Bad value for \"%s\""
FIELD	141:50	141:50	7	"%d: Bad value for \"%s\""
LEAF_NODE	141:50	141:50	8	"%d: Bad value for \"%s\""
LEAF_NODE	141:76	141:76	6	,
ARGUMENT	141:78	141:78	6	v
FIELD	141:78	141:78	7	v
LEAF_NODE	141:78	141:78	8	v
LEAF_NODE	141:79	141:79	6	,
ARGUMENT	142:5	142:34	6	_TIFFFieldWithTag ( tif , tag ) -> field_name
FUNCTION_CALL	142:5	142:31	7	_TIFFFieldWithTag ( tif , tag )
CALLEE	142:5	142:5	8	_TIFFFieldWithTag
LEAF_NODE	142:5	142:5	9	_TIFFFieldWithTag
LEAF_NODE	142:22	142:22	8	(
ARGUMENT	142:23	142:23	8	tif
FIELD	142:23	142:23	9	tif
LEAF_NODE	142:23	142:23	10	tif
LEAF_NODE	142:26	142:26	8	,
ARGUMENT	142:28	142:28	8	tag
FIELD	142:28	142:28	9	tag
LEAF_NODE	142:28	142:28	10	tag
LEAF_NODE	142:31	142:31	8	)
LEAF_NODE	142:32	142:32	7	->
LEAF_NODE	142:34	142:34	7	field_name
LEAF_NODE	142:44	142:44	6	)
LEAF_NODE	142:45	142:45	4	;
EXPR_STATEMENT	143:1	143:11	3	va_end ( ap ) ;
EXPR	143:1	143:1	4	va_end ( ap )
FUNCTION_CALL	143:1	143:10	5	va_end ( ap )
CALLEE	143:1	143:1	6	va_end
LEAF_NODE	143:1	143:1	7	va_end
LEAF_NODE	143:7	143:7	6	(
ARGUMENT	143:8	143:8	6	ap
FIELD	143:8	143:8	7	ap
LEAF_NODE	143:8	143:8	8	ap
LEAF_NODE	143:10	143:10	6	)
LEAF_NODE	143:11	143:11	4	;
JUMP_STATEMENT	144:1	144:11	3	return ( 0 ) ;
KEYWORD	144:1	144:1	4	return
LEAF_NODE	144:1	144:1	5	return
DESTINATION	144:8	144:8	4	( 0 )
EXPR	144:8	144:10	5	( 0 )
LEAF_NODE	144:8	144:8	6	(
FIELD	144:9	144:9	6	0
LEAF_NODE	144:9	144:9	7	0
LEAF_NODE	144:10	144:10	6	)
LEAF_NODE	144:11	144:11	4	;
LABEL	145:0	145:10	3	badvalue32 :
LEAF_NODE	145:0	145:0	4	badvalue32
LEAF_NODE	145:10	145:10	4	:
EXPR_STATEMENT	146:1	147:45	3	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%ld: Bad value for \"%s\"" , v32 , _TIFFFieldWithTag ( tif , tag ) -> field_name ) ;
EXPR	146:1	146:1	4	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%ld: Bad value for \"%s\"" , v32 , _TIFFFieldWithTag ( tif , tag ) -> field_name )
FUNCTION_CALL	146:1	147:44	5	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%ld: Bad value for \"%s\"" , v32 , _TIFFFieldWithTag ( tif , tag ) -> field_name )
CALLEE	146:1	146:1	6	TIFFErrorExt
LEAF_NODE	146:1	146:1	7	TIFFErrorExt
LEAF_NODE	146:13	146:13	6	(
ARGUMENT	146:14	146:14	6	tif -> tif_clientdata
FIELD	146:14	146:19	7	tif -> tif_clientdata
LEAF_NODE	146:14	146:14	8	tif
LEAF_NODE	146:17	146:17	8	->
LEAF_NODE	146:19	146:19	8	tif_clientdata
LEAF_NODE	146:33	146:33	6	,
ARGUMENT	146:35	146:35	6	tif -> tif_name
FIELD	146:35	146:40	7	tif -> tif_name
LEAF_NODE	146:35	146:35	8	tif
LEAF_NODE	146:38	146:38	8	->
LEAF_NODE	146:40	146:40	8	tif_name
LEAF_NODE	146:48	146:48	6	,
ARGUMENT	146:50	146:50	6	"%ld: Bad value for \"%s\""
FIELD	146:50	146:50	7	"%ld: Bad value for \"%s\""
LEAF_NODE	146:50	146:50	8	"%ld: Bad value for \"%s\""
LEAF_NODE	146:77	146:77	6	,
ARGUMENT	146:79	146:79	6	v32
FIELD	146:79	146:79	7	v32
LEAF_NODE	146:79	146:79	8	v32
LEAF_NODE	146:82	146:82	6	,
ARGUMENT	147:5	147:34	6	_TIFFFieldWithTag ( tif , tag ) -> field_name
FUNCTION_CALL	147:5	147:31	7	_TIFFFieldWithTag ( tif , tag )
CALLEE	147:5	147:5	8	_TIFFFieldWithTag
LEAF_NODE	147:5	147:5	9	_TIFFFieldWithTag
LEAF_NODE	147:22	147:22	8	(
ARGUMENT	147:23	147:23	8	tif
FIELD	147:23	147:23	9	tif
LEAF_NODE	147:23	147:23	10	tif
LEAF_NODE	147:26	147:26	8	,
ARGUMENT	147:28	147:28	8	tag
FIELD	147:28	147:28	9	tag
LEAF_NODE	147:28	147:28	10	tag
LEAF_NODE	147:31	147:31	8	)
LEAF_NODE	147:32	147:32	7	->
LEAF_NODE	147:34	147:34	7	field_name
LEAF_NODE	147:44	147:44	6	)
LEAF_NODE	147:45	147:45	4	;
EXPR_STATEMENT	148:1	148:11	3	va_end ( ap ) ;
EXPR	148:1	148:1	4	va_end ( ap )
FUNCTION_CALL	148:1	148:10	5	va_end ( ap )
CALLEE	148:1	148:1	6	va_end
LEAF_NODE	148:1	148:1	7	va_end
LEAF_NODE	148:7	148:7	6	(
ARGUMENT	148:8	148:8	6	ap
FIELD	148:8	148:8	7	ap
LEAF_NODE	148:8	148:8	8	ap
LEAF_NODE	148:10	148:10	6	)
LEAF_NODE	148:11	148:11	4	;
JUMP_STATEMENT	149:1	149:11	3	return ( 0 ) ;
KEYWORD	149:1	149:1	4	return
LEAF_NODE	149:1	149:1	5	return
DESTINATION	149:8	149:8	4	( 0 )
EXPR	149:8	149:10	5	( 0 )
LEAF_NODE	149:8	149:8	6	(
FIELD	149:9	149:9	6	0
LEAF_NODE	149:9	149:9	7	0
LEAF_NODE	149:10	149:10	6	)
LEAF_NODE	149:11	149:11	4	;
LEAF_NODE	150:0	150:0	2	}
FUNCTION_DEF	153:0	180:0	1	
RETURN_TYPE	153:0	153:7	2	static int
LEAF_NODE	153:0	153:0	3	static
TYPE_NAME	153:7	153:7	3	int
LEAF_NODE	153:7	153:7	4	int
FUNCTION_NAME	154:0	154:0	2	_XTIFFVGetField
LEAF_NODE	154:0	154:0	3	_XTIFFVGetField
PARAMETER_LIST	154:15	154:49	2	( TIFF * tif , ttag_t tag , va_list ap )
LEAF_NODE	154:15	154:15	3	(
PARAMETER_DECL	154:16	154:22	3	TIFF * tif
TYPE	154:16	154:20	4	TIFF *
TYPE_NAME	154:16	154:16	5	TIFF
LEAF_NODE	154:16	154:16	6	TIFF
POINTER	154:20	154:20	5	*
LEAF_NODE	154:20	154:20	6	*
NAME	154:22	154:22	4	tif
LEAF_NODE	154:22	154:22	5	tif
LEAF_NODE	154:25	154:25	3	,
PARAMETER_DECL	154:27	154:34	3	ttag_t tag
TYPE	154:27	154:27	4	ttag_t
TYPE_NAME	154:27	154:27	5	ttag_t
LEAF_NODE	154:27	154:27	6	ttag_t
NAME	154:34	154:34	4	tag
LEAF_NODE	154:34	154:34	5	tag
LEAF_NODE	154:37	154:37	3	,
PARAMETER_DECL	154:39	154:47	3	va_list ap
TYPE	154:39	154:39	4	va_list
TYPE_NAME	154:39	154:39	5	va_list
LEAF_NODE	154:39	154:39	6	va_list
NAME	154:47	154:47	4	ap
LEAF_NODE	154:47	154:47	5	ap
LEAF_NODE	154:49	154:49	3	)
LEAF_NODE	155:0	155:0	2	{
STATEMENTS	156:1	179:1	2	
SIMPLE_DECL	156:1	156:26	3	xtiff * xt ; xt = XTIFFDIR ( tif ) ;
VAR_DECL	156:1	156:8	4	xtiff * xt ; xt = XTIFFDIR ( tif )
TYPE	156:1	156:7	5	xtiff *
TYPE_NAME	156:1	156:1	6	xtiff
LEAF_NODE	156:1	156:1	7	xtiff
POINTER	156:7	156:7	6	*
LEAF_NODE	156:7	156:7	7	*
NAME	156:8	156:8	5	xt
LEAF_NODE	156:8	156:8	6	xt
LEAF_NODE	0:0	0:0	5	;
INIT	156:8	156:8	5	xt = XTIFFDIR ( tif )
ASSIGN	156:8	156:13	6	xt = XTIFFDIR ( tif )
LVAL	156:8	156:8	7	xt
NAME	156:8	156:8	8	xt
LEAF_NODE	156:8	156:8	9	xt
ASSIGN_OP	156:11	156:11	7	=
LEAF_NODE	156:11	156:11	8	=
RVAL	156:13	156:13	7	XTIFFDIR ( tif )
FUNCTION_CALL	156:13	156:25	8	XTIFFDIR ( tif )
CALLEE	156:13	156:13	9	XTIFFDIR
LEAF_NODE	156:13	156:13	10	XTIFFDIR
LEAF_NODE	156:21	156:21	9	(
ARGUMENT	156:22	156:22	9	tif
FIELD	156:22	156:22	10	tif
LEAF_NODE	156:22	156:22	11	tif
LEAF_NODE	156:25	156:25	9	)
LEAF_NODE	156:26	156:26	4	;
SIMPLE_DECL	157:1	157:35	3	XTIFFDirectory * xd ; xd = & xt -> xtif_dir ;
VAR_DECL	157:1	157:17	4	XTIFFDirectory * xd ; xd = & xt -> xtif_dir
TYPE	157:1	157:15	5	XTIFFDirectory *
TYPE_NAME	157:1	157:1	6	XTIFFDirectory
LEAF_NODE	157:1	157:1	7	XTIFFDirectory
POINTER	157:15	157:15	6	*
LEAF_NODE	157:15	157:15	7	*
NAME	157:17	157:17	5	xd
LEAF_NODE	157:17	157:17	6	xd
LEAF_NODE	0:0	0:0	5	;
INIT	157:17	157:17	5	xd = & xt -> xtif_dir
ASSIGN	157:17	157:22	6	xd = & xt -> xtif_dir
LVAL	157:17	157:17	7	xd
NAME	157:17	157:17	8	xd
LEAF_NODE	157:17	157:17	9	xd
ASSIGN_OP	157:20	157:20	7	=
LEAF_NODE	157:20	157:20	8	=
RVAL	157:22	157:22	7	& xt -> xtif_dir
UNARY_EXPR	157:22	157:23	8	& xt -> xtif_dir
UNARY_OPERATOR	157:22	157:22	9	&
LEAF_NODE	157:22	157:22	10	&
FIELD	157:23	157:27	9	xt -> xtif_dir
LEAF_NODE	157:23	157:23	10	xt
LEAF_NODE	157:25	157:25	10	->
LEAF_NODE	157:27	157:27	10	xtif_dir
LEAF_NODE	157:35	157:35	4	;
SELECTION	159:1	159:14	3	
KEYWORD	159:1	159:1	4	switch
LEAF_NODE	159:1	159:1	5	switch
LEAF_NODE	159:8	159:8	4	(
CONDITION	159:9	159:9	4	tag
EXPR	159:9	159:9	5	tag
FIELD	159:9	159:9	6	tag
LEAF_NODE	159:9	159:9	7	tag
LEAF_NODE	159:12	159:12	4	)
STATEMENTS	159:14	178:1	4	
LEAF_NODE	159:14	159:14	5	{
STATEMENTS	164:1	177:2	5	
LABEL	164:1	164:27	6	case TIFFTAG_EXAMPLE_MULTI :
LEAF_NODE	164:1	164:1	7	case
LEAF_NODE	164:6	164:6	7	TIFFTAG_EXAMPLE_MULTI
LEAF_NODE	164:27	164:27	7	:
LEAF_NODE	165:2	165:2	6	*
LEAF_NODE	165:3	165:3	6	va_arg
LEAF_NODE	165:9	165:9	6	(
LEAF_NODE	165:10	165:10	6	ap
LEAF_NODE	165:12	165:12	6	,
LEAF_NODE	165:14	165:14	6	uint16
LEAF_NODE	165:20	165:20	6	*
LEAF_NODE	165:21	165:21	6	)
LEAF_NODE	165:23	165:23	6	=
EXPR_STATEMENT	165:25	165:41	6	xd -> xd_num_multi ;
EXPR	165:25	165:25	7	xd -> xd_num_multi
FIELD	165:25	165:29	8	xd -> xd_num_multi
LEAF_NODE	165:25	165:25	9	xd
LEAF_NODE	165:27	165:27	9	->
LEAF_NODE	165:29	165:29	9	xd_num_multi
LEAF_NODE	165:41	165:41	7	;
LEAF_NODE	166:2	166:2	6	*
LEAF_NODE	166:3	166:3	6	va_arg
LEAF_NODE	166:9	166:9	6	(
LEAF_NODE	166:10	166:10	6	ap
LEAF_NODE	166:12	166:12	6	,
LEAF_NODE	166:14	166:14	6	double
LEAF_NODE	166:20	166:20	6	*
LEAF_NODE	166:21	166:21	6	*
LEAF_NODE	166:22	166:22	6	)
LEAF_NODE	166:24	166:24	6	=
EXPR_STATEMENT	166:26	166:46	6	xd -> xd_example_multi ;
EXPR	166:26	166:26	7	xd -> xd_example_multi
FIELD	166:26	166:30	8	xd -> xd_example_multi
LEAF_NODE	166:26	166:26	9	xd
LEAF_NODE	166:28	166:28	9	->
LEAF_NODE	166:30	166:30	9	xd_example_multi
LEAF_NODE	166:46	166:46	7	;
JUMP_STATEMENT	167:2	167:7	6	break DESTINATION ;
KEYWORD	167:2	167:2	7	break
LEAF_NODE	167:2	167:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	167:7	167:7	7	;
LABEL	168:1	168:27	6	case TIFFTAG_EXAMPLE_ASCII :
LEAF_NODE	168:1	168:1	7	case
LEAF_NODE	168:6	168:6	7	TIFFTAG_EXAMPLE_ASCII
LEAF_NODE	168:27	168:27	7	:
LEAF_NODE	169:2	169:2	6	*
LEAF_NODE	169:3	169:3	6	va_arg
LEAF_NODE	169:9	169:9	6	(
LEAF_NODE	169:10	169:10	6	ap
LEAF_NODE	169:12	169:12	6	,
LEAF_NODE	169:14	169:14	6	char
LEAF_NODE	169:18	169:18	6	*
LEAF_NODE	169:19	169:19	6	*
LEAF_NODE	169:20	169:20	6	)
LEAF_NODE	169:22	169:22	6	=
EXPR_STATEMENT	169:24	169:44	6	xd -> xd_example_ascii ;
EXPR	169:24	169:24	7	xd -> xd_example_ascii
FIELD	169:24	169:28	8	xd -> xd_example_ascii
LEAF_NODE	169:24	169:24	9	xd
LEAF_NODE	169:26	169:26	9	->
LEAF_NODE	169:28	169:28	9	xd_example_ascii
LEAF_NODE	169:44	169:44	7	;
JUMP_STATEMENT	170:2	170:7	6	break DESTINATION ;
KEYWORD	170:2	170:2	7	break
LEAF_NODE	170:2	170:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	170:7	170:7	7	;
LABEL	171:1	171:28	6	case TIFFTAG_EXAMPLE_SINGLE :
LEAF_NODE	171:1	171:1	7	case
LEAF_NODE	171:6	171:6	7	TIFFTAG_EXAMPLE_SINGLE
LEAF_NODE	171:28	171:28	7	:
LEAF_NODE	172:2	172:2	6	*
LEAF_NODE	172:3	172:3	6	va_arg
LEAF_NODE	172:9	172:9	6	(
LEAF_NODE	172:10	172:10	6	ap
LEAF_NODE	172:12	172:12	6	,
LEAF_NODE	172:14	172:14	6	uint32
LEAF_NODE	172:20	172:20	6	*
LEAF_NODE	172:21	172:21	6	)
LEAF_NODE	172:23	172:23	6	=
EXPR_STATEMENT	172:25	172:46	6	xd -> xd_example_single ;
EXPR	172:25	172:25	7	xd -> xd_example_single
FIELD	172:25	172:29	8	xd -> xd_example_single
LEAF_NODE	172:25	172:25	9	xd
LEAF_NODE	172:27	172:27	9	->
LEAF_NODE	172:29	172:29	9	xd_example_single
LEAF_NODE	172:46	172:46	7	;
JUMP_STATEMENT	173:2	173:7	6	break DESTINATION ;
KEYWORD	173:2	173:2	7	break
LEAF_NODE	173:2	173:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	173:7	173:7	7	;
LABEL	174:1	174:8	6	default :
LEAF_NODE	174:1	174:1	7	default
LEAF_NODE	174:8	174:8	7	:
JUMP_STATEMENT	176:2	176:43	6	return ( PARENT ( xt , vgetfield ) ) ( tif , tag , ap ) ;
KEYWORD	176:2	176:2	7	return
LEAF_NODE	176:2	176:2	8	return
DESTINATION	176:9	176:9	7	( PARENT ( xt , vgetfield ) ) ( tif , tag , ap )
EXPR	176:9	176:9	8	( PARENT ( xt , vgetfield ) ) ( tif , tag , ap )
FUNCTION_CALL	176:9	176:42	9	( PARENT ( xt , vgetfield ) ) ( tif , tag , ap )
CALLEE	176:9	176:30	10	( PARENT ( xt , vgetfield ) )
LEAF_NODE	176:9	176:9	11	(
FUNCTION_CALL	176:10	176:29	11	PARENT ( xt , vgetfield )
CALLEE	176:10	176:10	12	PARENT
LEAF_NODE	176:10	176:10	13	PARENT
LEAF_NODE	176:16	176:16	12	(
ARGUMENT	176:17	176:17	12	xt
FIELD	176:17	176:17	13	xt
LEAF_NODE	176:17	176:17	14	xt
LEAF_NODE	176:19	176:19	12	,
ARGUMENT	176:20	176:20	12	vgetfield
FIELD	176:20	176:20	13	vgetfield
LEAF_NODE	176:20	176:20	14	vgetfield
LEAF_NODE	176:29	176:29	12	)
LEAF_NODE	176:30	176:30	11	)
LEAF_NODE	176:31	176:31	10	(
ARGUMENT	176:32	176:32	10	tif
FIELD	176:32	176:32	11	tif
LEAF_NODE	176:32	176:32	12	tif
LEAF_NODE	176:35	176:35	10	,
ARGUMENT	176:36	176:36	10	tag
FIELD	176:36	176:36	11	tag
LEAF_NODE	176:36	176:36	12	tag
LEAF_NODE	176:39	176:39	10	,
ARGUMENT	176:40	176:40	10	ap
FIELD	176:40	176:40	11	ap
LEAF_NODE	176:40	176:40	12	ap
LEAF_NODE	176:42	176:42	10	)
LEAF_NODE	176:43	176:43	7	;
JUMP_STATEMENT	177:2	177:7	6	break DESTINATION ;
KEYWORD	177:2	177:2	7	break
LEAF_NODE	177:2	177:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	177:7	177:7	7	;
LEAF_NODE	178:1	178:1	5	}
JUMP_STATEMENT	179:1	179:11	3	return ( 1 ) ;
KEYWORD	179:1	179:1	4	return
LEAF_NODE	179:1	179:1	5	return
DESTINATION	179:8	179:8	4	( 1 )
EXPR	179:8	179:10	5	( 1 )
LEAF_NODE	179:8	179:8	6	(
FIELD	179:9	179:9	6	1
LEAF_NODE	179:9	179:9	7	1
LEAF_NODE	179:10	179:10	6	)
LEAF_NODE	179:11	179:11	4	;
LEAF_NODE	180:0	180:0	2	}
FUNCTION_DEF	191:0	206:0	1	
RETURN_TYPE	191:0	191:7	2	static void
LEAF_NODE	191:0	191:0	3	static
TYPE_NAME	191:7	191:7	3	void
LEAF_NODE	191:7	191:7	4	void
FUNCTION_NAME	192:0	192:0	2	_XTIFFFreeDirectory
LEAF_NODE	192:0	192:0	3	_XTIFFFreeDirectory
PARAMETER_LIST	192:19	192:29	2	( xtiff * xt )
LEAF_NODE	192:19	192:19	3	(
PARAMETER_DECL	192:20	192:27	3	xtiff * xt
TYPE	192:20	192:25	4	xtiff *
TYPE_NAME	192:20	192:20	5	xtiff
LEAF_NODE	192:20	192:20	6	xtiff
POINTER	192:25	192:25	5	*
LEAF_NODE	192:25	192:25	6	*
NAME	192:27	192:27	4	xt
LEAF_NODE	192:27	192:27	5	xt
LEAF_NODE	192:29	192:29	3	)
LEAF_NODE	193:0	193:0	2	{
STATEMENTS	194:1	204:1	2	
SIMPLE_DECL	194:1	194:35	3	XTIFFDirectory * xd ; xd = & xt -> xtif_dir ;
VAR_DECL	194:1	194:17	4	XTIFFDirectory * xd ; xd = & xt -> xtif_dir
TYPE	194:1	194:15	5	XTIFFDirectory *
TYPE_NAME	194:1	194:1	6	XTIFFDirectory
LEAF_NODE	194:1	194:1	7	XTIFFDirectory
POINTER	194:15	194:15	6	*
LEAF_NODE	194:15	194:15	7	*
NAME	194:17	194:17	5	xd
LEAF_NODE	194:17	194:17	6	xd
LEAF_NODE	0:0	0:0	5	;
INIT	194:17	194:17	5	xd = & xt -> xtif_dir
ASSIGN	194:17	194:22	6	xd = & xt -> xtif_dir
LVAL	194:17	194:17	7	xd
NAME	194:17	194:17	8	xd
LEAF_NODE	194:17	194:17	9	xd
ASSIGN_OP	194:20	194:20	7	=
LEAF_NODE	194:20	194:20	8	=
RVAL	194:22	194:22	7	& xt -> xtif_dir
UNARY_EXPR	194:22	194:23	8	& xt -> xtif_dir
UNARY_OPERATOR	194:22	194:22	9	&
LEAF_NODE	194:22	194:22	10	&
FIELD	194:23	194:27	9	xt -> xtif_dir
LEAF_NODE	194:23	194:23	10	xt
LEAF_NODE	194:25	194:25	10	->
LEAF_NODE	194:27	194:27	10	xtif_dir
LEAF_NODE	194:35	194:35	4	;
EXPR_STATEMENT	203:1	203:31	3	CleanupField ( xd_example_multi ) ;
EXPR	203:1	203:1	4	CleanupField ( xd_example_multi )
FUNCTION_CALL	203:1	203:30	5	CleanupField ( xd_example_multi )
CALLEE	203:1	203:1	6	CleanupField
LEAF_NODE	203:1	203:1	7	CleanupField
LEAF_NODE	203:13	203:13	6	(
ARGUMENT	203:14	203:14	6	xd_example_multi
FIELD	203:14	203:14	7	xd_example_multi
LEAF_NODE	203:14	203:14	8	xd_example_multi
LEAF_NODE	203:30	203:30	6	)
LEAF_NODE	203:31	203:31	4	;
EXPR_STATEMENT	204:1	204:31	3	CleanupField ( xd_example_ascii ) ;
EXPR	204:1	204:1	4	CleanupField ( xd_example_ascii )
FUNCTION_CALL	204:1	204:30	5	CleanupField ( xd_example_ascii )
CALLEE	204:1	204:1	6	CleanupField
LEAF_NODE	204:1	204:1	7	CleanupField
LEAF_NODE	204:13	204:13	6	(
ARGUMENT	204:14	204:14	6	xd_example_ascii
FIELD	204:14	204:14	7	xd_example_ascii
LEAF_NODE	204:14	204:14	8	xd_example_ascii
LEAF_NODE	204:30	204:30	6	)
LEAF_NODE	204:31	204:31	4	;
LEAF_NODE	206:0	206:0	2	}
FUNCTION_DEF	209:0	237:0	1	
RETURN_TYPE	209:0	209:7	2	static void
LEAF_NODE	209:0	209:0	3	static
TYPE_NAME	209:7	209:7	3	void
LEAF_NODE	209:7	209:7	4	void
FUNCTION_NAME	209:12	209:12	2	_XTIFFLocalDefaultDirectory
LEAF_NODE	209:12	209:12	3	_XTIFFLocalDefaultDirectory
PARAMETER_LIST	209:39	209:49	2	( TIFF * tif )
LEAF_NODE	209:39	209:39	3	(
PARAMETER_DECL	209:40	209:46	3	TIFF * tif
TYPE	209:40	209:45	4	TIFF *
TYPE_NAME	209:40	209:40	5	TIFF
LEAF_NODE	209:40	209:40	6	TIFF
POINTER	209:45	209:45	5	*
LEAF_NODE	209:45	209:45	6	*
NAME	209:46	209:46	4	tif
LEAF_NODE	209:46	209:46	5	tif
LEAF_NODE	209:49	209:49	3	)
LEAF_NODE	210:0	210:0	2	{
STATEMENTS	211:1	236:1	2	
SIMPLE_DECL	211:1	211:26	3	xtiff * xt ; xt = XTIFFDIR ( tif ) ;
VAR_DECL	211:1	211:8	4	xtiff * xt ; xt = XTIFFDIR ( tif )
TYPE	211:1	211:7	5	xtiff *
TYPE_NAME	211:1	211:1	6	xtiff
LEAF_NODE	211:1	211:1	7	xtiff
POINTER	211:7	211:7	6	*
LEAF_NODE	211:7	211:7	7	*
NAME	211:8	211:8	5	xt
LEAF_NODE	211:8	211:8	6	xt
LEAF_NODE	0:0	0:0	5	;
INIT	211:8	211:8	5	xt = XTIFFDIR ( tif )
ASSIGN	211:8	211:13	6	xt = XTIFFDIR ( tif )
LVAL	211:8	211:8	7	xt
NAME	211:8	211:8	8	xt
LEAF_NODE	211:8	211:8	9	xt
ASSIGN_OP	211:11	211:11	7	=
LEAF_NODE	211:11	211:11	8	=
RVAL	211:13	211:13	7	XTIFFDIR ( tif )
FUNCTION_CALL	211:13	211:25	8	XTIFFDIR ( tif )
CALLEE	211:13	211:13	9	XTIFFDIR
LEAF_NODE	211:13	211:13	10	XTIFFDIR
LEAF_NODE	211:21	211:21	9	(
ARGUMENT	211:22	211:22	9	tif
FIELD	211:22	211:22	10	tif
LEAF_NODE	211:22	211:22	11	tif
LEAF_NODE	211:25	211:25	9	)
LEAF_NODE	211:26	211:26	4	;
SIMPLE_DECL	212:1	212:35	3	XTIFFDirectory * xd ; xd = & xt -> xtif_dir ;
VAR_DECL	212:1	212:17	4	XTIFFDirectory * xd ; xd = & xt -> xtif_dir
TYPE	212:1	212:15	5	XTIFFDirectory *
TYPE_NAME	212:1	212:1	6	XTIFFDirectory
LEAF_NODE	212:1	212:1	7	XTIFFDirectory
POINTER	212:15	212:15	6	*
LEAF_NODE	212:15	212:15	7	*
NAME	212:17	212:17	5	xd
LEAF_NODE	212:17	212:17	6	xd
LEAF_NODE	0:0	0:0	5	;
INIT	212:17	212:17	5	xd = & xt -> xtif_dir
ASSIGN	212:17	212:22	6	xd = & xt -> xtif_dir
LVAL	212:17	212:17	7	xd
NAME	212:17	212:17	8	xd
LEAF_NODE	212:17	212:17	9	xd
ASSIGN_OP	212:20	212:20	7	=
LEAF_NODE	212:20	212:20	8	=
RVAL	212:22	212:22	7	& xt -> xtif_dir
UNARY_EXPR	212:22	212:23	8	& xt -> xtif_dir
UNARY_OPERATOR	212:22	212:22	9	&
LEAF_NODE	212:22	212:22	10	&
FIELD	212:23	212:27	9	xt -> xtif_dir
LEAF_NODE	212:23	212:23	10	xt
LEAF_NODE	212:25	212:25	10	->
LEAF_NODE	212:27	212:27	10	xtif_dir
LEAF_NODE	212:35	212:35	4	;
EXPR_STATEMENT	215:1	215:60	3	_TIFFMergeFieldInfo ( tif , xtiffFieldInfo , N ( xtiffFieldInfo ) ) ;
EXPR	215:1	215:1	4	_TIFFMergeFieldInfo ( tif , xtiffFieldInfo , N ( xtiffFieldInfo ) )
FUNCTION_CALL	215:1	215:59	5	_TIFFMergeFieldInfo ( tif , xtiffFieldInfo , N ( xtiffFieldInfo ) )
CALLEE	215:1	215:1	6	_TIFFMergeFieldInfo
LEAF_NODE	215:1	215:1	7	_TIFFMergeFieldInfo
LEAF_NODE	215:20	215:20	6	(
ARGUMENT	215:21	215:21	6	tif
FIELD	215:21	215:21	7	tif
LEAF_NODE	215:21	215:21	8	tif
LEAF_NODE	215:24	215:24	6	,
ARGUMENT	215:26	215:26	6	xtiffFieldInfo
FIELD	215:26	215:26	7	xtiffFieldInfo
LEAF_NODE	215:26	215:26	8	xtiffFieldInfo
LEAF_NODE	215:40	215:40	6	,
ARGUMENT	215:42	215:42	6	N ( xtiffFieldInfo )
FUNCTION_CALL	215:42	215:58	7	N ( xtiffFieldInfo )
CALLEE	215:42	215:42	8	N
LEAF_NODE	215:42	215:42	9	N
LEAF_NODE	215:43	215:43	8	(
ARGUMENT	215:44	215:44	8	xtiffFieldInfo
FIELD	215:44	215:44	9	xtiffFieldInfo
LEAF_NODE	215:44	215:44	10	xtiffFieldInfo
LEAF_NODE	215:58	215:58	8	)
LEAF_NODE	215:59	215:59	6	)
LEAF_NODE	215:60	215:60	4	;
EXPR_STATEMENT	222:1	222:24	3	_XTIFFFreeDirectory ( xt ) ;
EXPR	222:1	222:1	4	_XTIFFFreeDirectory ( xt )
FUNCTION_CALL	222:1	222:23	5	_XTIFFFreeDirectory ( xt )
CALLEE	222:1	222:1	6	_XTIFFFreeDirectory
LEAF_NODE	222:1	222:1	7	_XTIFFFreeDirectory
LEAF_NODE	222:20	222:20	6	(
ARGUMENT	222:21	222:21	6	xt
FIELD	222:21	222:21	7	xt
LEAF_NODE	222:21	222:21	8	xt
LEAF_NODE	222:23	222:23	6	)
LEAF_NODE	222:24	222:24	4	;
EXPR_STATEMENT	223:1	223:32	3	_TIFFmemset ( xt , 0 , sizeof ( xtiff ) ) ;
EXPR	223:1	223:1	4	_TIFFmemset ( xt , 0 , sizeof ( xtiff ) )
FUNCTION_CALL	223:1	223:31	5	_TIFFmemset ( xt , 0 , sizeof ( xtiff ) )
CALLEE	223:1	223:1	6	_TIFFmemset
LEAF_NODE	223:1	223:1	7	_TIFFmemset
LEAF_NODE	223:12	223:12	6	(
ARGUMENT	223:13	223:13	6	xt
FIELD	223:13	223:13	7	xt
LEAF_NODE	223:13	223:13	8	xt
LEAF_NODE	223:15	223:15	6	,
ARGUMENT	223:16	223:16	6	0
FIELD	223:16	223:16	7	0
LEAF_NODE	223:16	223:16	8	0
LEAF_NODE	223:17	223:17	6	,
ARGUMENT	223:18	223:18	6	sizeof ( xtiff )
FUNCTION_CALL	223:18	223:30	7	sizeof ( xtiff )
CALLEE	223:18	223:18	8	sizeof
LEAF_NODE	223:18	223:18	9	sizeof
LEAF_NODE	223:24	223:24	8	(
ARGUMENT	223:25	223:25	8	xtiff
FIELD	223:25	223:25	9	xtiff
LEAF_NODE	223:25	223:25	10	xtiff
LEAF_NODE	223:30	223:30	8	)
LEAF_NODE	223:31	223:31	6	)
LEAF_NODE	223:32	223:32	4	;
EXPR_STATEMENT	227:1	227:50	3	PARENT ( xt , vsetfield ) = TIFFMEMBER ( tif , vsetfield ) ;
EXPR	227:1	227:1	4	PARENT ( xt , vsetfield ) = TIFFMEMBER ( tif , vsetfield )
ASSIGN	227:1	227:25	5	PARENT ( xt , vsetfield ) = TIFFMEMBER ( tif , vsetfield )
LVAL	227:1	227:1	6	PARENT ( xt , vsetfield )
FUNCTION_CALL	227:1	227:20	7	PARENT ( xt , vsetfield )
CALLEE	227:1	227:1	8	PARENT
LEAF_NODE	227:1	227:1	9	PARENT
LEAF_NODE	227:7	227:7	8	(
ARGUMENT	227:8	227:8	8	xt
FIELD	227:8	227:8	9	xt
LEAF_NODE	227:8	227:8	10	xt
LEAF_NODE	227:10	227:10	8	,
ARGUMENT	227:11	227:11	8	vsetfield
FIELD	227:11	227:11	9	vsetfield
LEAF_NODE	227:11	227:11	10	vsetfield
LEAF_NODE	227:20	227:20	8	)
ASSIGN_OP	227:22	227:22	6	=
LEAF_NODE	227:22	227:22	7	=
RVAL	227:25	227:25	6	TIFFMEMBER ( tif , vsetfield )
FUNCTION_CALL	227:25	227:49	7	TIFFMEMBER ( tif , vsetfield )
CALLEE	227:25	227:25	8	TIFFMEMBER
LEAF_NODE	227:25	227:25	9	TIFFMEMBER
LEAF_NODE	227:35	227:35	8	(
ARGUMENT	227:36	227:36	8	tif
FIELD	227:36	227:36	9	tif
LEAF_NODE	227:36	227:36	10	tif
LEAF_NODE	227:39	227:39	8	,
ARGUMENT	227:40	227:40	8	vsetfield
FIELD	227:40	227:40	9	vsetfield
LEAF_NODE	227:40	227:40	10	vsetfield
LEAF_NODE	227:49	227:49	8	)
LEAF_NODE	227:50	227:50	4	;
EXPR_STATEMENT	228:1	228:44	3	TIFFMEMBER ( tif , vsetfield ) = _XTIFFVSetField ;
EXPR	228:1	228:1	4	TIFFMEMBER ( tif , vsetfield ) = _XTIFFVSetField
ASSIGN	228:1	228:29	5	TIFFMEMBER ( tif , vsetfield ) = _XTIFFVSetField
LVAL	228:1	228:1	6	TIFFMEMBER ( tif , vsetfield )
FUNCTION_CALL	228:1	228:25	7	TIFFMEMBER ( tif , vsetfield )
CALLEE	228:1	228:1	8	TIFFMEMBER
LEAF_NODE	228:1	228:1	9	TIFFMEMBER
LEAF_NODE	228:11	228:11	8	(
ARGUMENT	228:12	228:12	8	tif
FIELD	228:12	228:12	9	tif
LEAF_NODE	228:12	228:12	10	tif
LEAF_NODE	228:15	228:15	8	,
ARGUMENT	228:16	228:16	8	vsetfield
FIELD	228:16	228:16	9	vsetfield
LEAF_NODE	228:16	228:16	10	vsetfield
LEAF_NODE	228:25	228:25	8	)
ASSIGN_OP	228:27	228:27	6	=
LEAF_NODE	228:27	228:27	7	=
RVAL	228:29	228:29	6	_XTIFFVSetField
FIELD	228:29	228:29	7	_XTIFFVSetField
LEAF_NODE	228:29	228:29	8	_XTIFFVSetField
LEAF_NODE	228:44	228:44	4	;
EXPR_STATEMENT	229:1	229:50	3	PARENT ( xt , vgetfield ) = TIFFMEMBER ( tif , vgetfield ) ;
EXPR	229:1	229:1	4	PARENT ( xt , vgetfield ) = TIFFMEMBER ( tif , vgetfield )
ASSIGN	229:1	229:25	5	PARENT ( xt , vgetfield ) = TIFFMEMBER ( tif , vgetfield )
LVAL	229:1	229:1	6	PARENT ( xt , vgetfield )
FUNCTION_CALL	229:1	229:20	7	PARENT ( xt , vgetfield )
CALLEE	229:1	229:1	8	PARENT
LEAF_NODE	229:1	229:1	9	PARENT
LEAF_NODE	229:7	229:7	8	(
ARGUMENT	229:8	229:8	8	xt
FIELD	229:8	229:8	9	xt
LEAF_NODE	229:8	229:8	10	xt
LEAF_NODE	229:10	229:10	8	,
ARGUMENT	229:11	229:11	8	vgetfield
FIELD	229:11	229:11	9	vgetfield
LEAF_NODE	229:11	229:11	10	vgetfield
LEAF_NODE	229:20	229:20	8	)
ASSIGN_OP	229:22	229:22	6	=
LEAF_NODE	229:22	229:22	7	=
RVAL	229:25	229:25	6	TIFFMEMBER ( tif , vgetfield )
FUNCTION_CALL	229:25	229:49	7	TIFFMEMBER ( tif , vgetfield )
CALLEE	229:25	229:25	8	TIFFMEMBER
LEAF_NODE	229:25	229:25	9	TIFFMEMBER
LEAF_NODE	229:35	229:35	8	(
ARGUMENT	229:36	229:36	8	tif
FIELD	229:36	229:36	9	tif
LEAF_NODE	229:36	229:36	10	tif
LEAF_NODE	229:39	229:39	8	,
ARGUMENT	229:40	229:40	8	vgetfield
FIELD	229:40	229:40	9	vgetfield
LEAF_NODE	229:40	229:40	10	vgetfield
LEAF_NODE	229:49	229:49	8	)
LEAF_NODE	229:50	229:50	4	;
EXPR_STATEMENT	230:1	230:44	3	TIFFMEMBER ( tif , vgetfield ) = _XTIFFVGetField ;
EXPR	230:1	230:1	4	TIFFMEMBER ( tif , vgetfield ) = _XTIFFVGetField
ASSIGN	230:1	230:29	5	TIFFMEMBER ( tif , vgetfield ) = _XTIFFVGetField
LVAL	230:1	230:1	6	TIFFMEMBER ( tif , vgetfield )
FUNCTION_CALL	230:1	230:25	7	TIFFMEMBER ( tif , vgetfield )
CALLEE	230:1	230:1	8	TIFFMEMBER
LEAF_NODE	230:1	230:1	9	TIFFMEMBER
LEAF_NODE	230:11	230:11	8	(
ARGUMENT	230:12	230:12	8	tif
FIELD	230:12	230:12	9	tif
LEAF_NODE	230:12	230:12	10	tif
LEAF_NODE	230:15	230:15	8	,
ARGUMENT	230:16	230:16	8	vgetfield
FIELD	230:16	230:16	9	vgetfield
LEAF_NODE	230:16	230:16	10	vgetfield
LEAF_NODE	230:25	230:25	8	)
ASSIGN_OP	230:27	230:27	6	=
LEAF_NODE	230:27	230:27	7	=
RVAL	230:29	230:29	6	_XTIFFVGetField
FIELD	230:29	230:29	7	_XTIFFVGetField
LEAF_NODE	230:29	230:29	8	_XTIFFVGetField
LEAF_NODE	230:44	230:44	4	;
EXPR_STATEMENT	236:1	236:28	3	xd -> xd_example_single = 234 ;
EXPR	236:1	236:1	4	xd -> xd_example_single = 234
ASSIGN	236:1	236:25	5	xd -> xd_example_single = 234
LVAL	236:1	236:1	6	xd -> xd_example_single
FIELD	236:1	236:5	7	xd -> xd_example_single
LEAF_NODE	236:1	236:1	8	xd
LEAF_NODE	236:3	236:3	8	->
LEAF_NODE	236:5	236:5	8	xd_example_single
ASSIGN_OP	236:23	236:23	6	=
LEAF_NODE	236:23	236:23	7	=
RVAL	236:25	236:25	6	234
FIELD	236:25	236:25	7	234
LEAF_NODE	236:25	236:25	8	234
LEAF_NODE	236:28	236:28	4	;
LEAF_NODE	237:0	237:0	2	}
SIMPLE_DECL	245:7	245:37	1	TIFFExtendProc _ParentExtender ;
VAR_DECL	245:7	245:22	2	TIFFExtendProc _ParentExtender
TYPE	245:7	245:7	3	TIFFExtendProc
TYPE_NAME	245:7	245:7	4	TIFFExtendProc
LEAF_NODE	245:7	245:7	5	TIFFExtendProc
NAME	245:22	245:22	3	_ParentExtender
LEAF_NODE	245:22	245:22	4	_ParentExtender
LEAF_NODE	245:37	245:37	2	;
FUNCTION_DEF	253:0	286:0	1	
RETURN_TYPE	253:0	253:7	2	static void
LEAF_NODE	253:0	253:0	3	static
TYPE_NAME	253:7	253:7	3	void
LEAF_NODE	253:7	253:7	4	void
FUNCTION_NAME	254:0	254:0	2	_XTIFFDefaultDirectory
LEAF_NODE	254:0	254:0	3	_XTIFFDefaultDirectory
PARAMETER_LIST	254:22	254:32	2	( TIFF * tif )
LEAF_NODE	254:22	254:22	3	(
PARAMETER_DECL	254:23	254:29	3	TIFF * tif
TYPE	254:23	254:28	4	TIFF *
TYPE_NAME	254:23	254:23	5	TIFF
LEAF_NODE	254:23	254:23	6	TIFF
POINTER	254:28	254:28	5	*
LEAF_NODE	254:28	254:28	6	*
NAME	254:29	254:29	4	tif
LEAF_NODE	254:29	254:29	5	tif
LEAF_NODE	254:32	254:32	3	)
LEAF_NODE	255:0	255:0	2	{
STATEMENTS	256:1	283:1	2	
SIMPLE_DECL	256:1	256:10	3	xtiff * xt ;
VAR_DECL	256:1	256:8	4	xtiff * xt
TYPE	256:1	256:7	5	xtiff *
TYPE_NAME	256:1	256:1	6	xtiff
LEAF_NODE	256:1	256:1	7	xtiff
POINTER	256:7	256:7	6	*
LEAF_NODE	256:7	256:7	7	*
NAME	256:8	256:8	5	xt
LEAF_NODE	256:8	256:8	6	xt
LEAF_NODE	256:10	256:10	4	;
SELECTION	259:1	260:1	3	
KEYWORD	259:1	259:1	4	if
LEAF_NODE	259:1	259:1	5	if
LEAF_NODE	259:4	259:4	4	(
CONDITION	259:5	259:5	4	! ( tif -> tif_flags & XTIFF_INITIALIZED )
EXPR	259:5	259:5	5	! ( tif -> tif_flags & XTIFF_INITIALIZED )
UNARY_EXPR	259:5	259:41	6	! ( tif -> tif_flags & XTIFF_INITIALIZED )
UNARY_OPERATOR	259:5	259:5	7	!
LEAF_NODE	259:5	259:5	8	!
LEAF_NODE	259:6	259:6	7	(
FIELD	259:7	259:12	7	tif -> tif_flags
LEAF_NODE	259:7	259:7	8	tif
LEAF_NODE	259:10	259:10	8	->
LEAF_NODE	259:12	259:12	8	tif_flags
LEAF_NODE	259:22	259:22	7	&
FIELD	259:24	259:24	7	XTIFF_INITIALIZED
LEAF_NODE	259:24	259:24	8	XTIFF_INITIALIZED
LEAF_NODE	259:41	259:41	7	)
LEAF_NODE	259:42	259:42	4	)
STATEMENTS	260:1	273:1	4	
LEAF_NODE	260:1	260:1	5	{
STATEMENTS	261:2	272:2	5	
EXPR_STATEMENT	261:2	261:33	6	xt = _TIFFmalloc ( sizeof ( xtiff ) ) ;
EXPR	261:2	261:2	7	xt = _TIFFmalloc ( sizeof ( xtiff ) )
ASSIGN	261:2	261:7	8	xt = _TIFFmalloc ( sizeof ( xtiff ) )
LVAL	261:2	261:2	9	xt
FIELD	261:2	261:2	10	xt
LEAF_NODE	261:2	261:2	11	xt
ASSIGN_OP	261:5	261:5	9	=
LEAF_NODE	261:5	261:5	10	=
RVAL	261:7	261:7	9	_TIFFmalloc ( sizeof ( xtiff ) )
FUNCTION_CALL	261:7	261:32	10	_TIFFmalloc ( sizeof ( xtiff ) )
CALLEE	261:7	261:7	11	_TIFFmalloc
LEAF_NODE	261:7	261:7	12	_TIFFmalloc
LEAF_NODE	261:18	261:18	11	(
ARGUMENT	261:19	261:19	11	sizeof ( xtiff )
FUNCTION_CALL	261:19	261:31	12	sizeof ( xtiff )
CALLEE	261:19	261:19	13	sizeof
LEAF_NODE	261:19	261:19	14	sizeof
LEAF_NODE	261:25	261:25	13	(
ARGUMENT	261:26	261:26	13	xtiff
FIELD	261:26	261:26	14	xtiff
LEAF_NODE	261:26	261:26	15	xtiff
LEAF_NODE	261:31	261:31	13	)
LEAF_NODE	261:32	261:32	11	)
LEAF_NODE	261:33	261:33	7	;
SELECTION	262:2	263:2	6	
KEYWORD	262:2	262:2	7	if
LEAF_NODE	262:2	262:2	8	if
LEAF_NODE	262:5	262:5	7	(
CONDITION	262:6	262:6	7	! xt
EXPR	262:6	262:6	8	! xt
UNARY_EXPR	262:6	262:7	9	! xt
UNARY_OPERATOR	262:6	262:6	10	!
LEAF_NODE	262:6	262:6	11	!
FIELD	262:7	262:7	10	xt
LEAF_NODE	262:7	262:7	11	xt
LEAF_NODE	262:9	262:9	7	)
STATEMENTS	263:2	266:2	7	
LEAF_NODE	263:2	263:2	8	{
STATEMENTS	265:3	265:3	8	
JUMP_STATEMENT	265:3	265:9	9	return DESTINATION ;
KEYWORD	265:3	265:3	10	return
LEAF_NODE	265:3	265:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	265:9	265:9	10	;
LEAF_NODE	266:2	266:2	8	}
EXPR_STATEMENT	267:2	267:33	6	_TIFFmemset ( xt , 0 , sizeof ( xtiff ) ) ;
EXPR	267:2	267:2	7	_TIFFmemset ( xt , 0 , sizeof ( xtiff ) )
FUNCTION_CALL	267:2	267:32	8	_TIFFmemset ( xt , 0 , sizeof ( xtiff ) )
CALLEE	267:2	267:2	9	_TIFFmemset
LEAF_NODE	267:2	267:2	10	_TIFFmemset
LEAF_NODE	267:13	267:13	9	(
ARGUMENT	267:14	267:14	9	xt
FIELD	267:14	267:14	10	xt
LEAF_NODE	267:14	267:14	11	xt
LEAF_NODE	267:16	267:16	9	,
ARGUMENT	267:17	267:17	9	0
FIELD	267:17	267:17	10	0
LEAF_NODE	267:17	267:17	11	0
LEAF_NODE	267:18	267:18	9	,
ARGUMENT	267:19	267:19	9	sizeof ( xtiff )
FUNCTION_CALL	267:19	267:31	10	sizeof ( xtiff )
CALLEE	267:19	267:19	11	sizeof
LEAF_NODE	267:19	267:19	12	sizeof
LEAF_NODE	267:25	267:25	11	(
ARGUMENT	267:26	267:26	11	xtiff
FIELD	267:26	267:26	12	xtiff
LEAF_NODE	267:26	267:26	13	xtiff
LEAF_NODE	267:31	267:31	11	)
LEAF_NODE	267:32	267:32	9	)
LEAF_NODE	267:33	267:33	7	;
EXPR_STATEMENT	271:2	271:42	6	TIFFMEMBER ( tif , clientdir ) = ( tidata_t ) xt ;
EXPR	271:2	271:2	7	TIFFMEMBER ( tif , clientdir ) = ( tidata_t ) xt
ASSIGN	271:2	271:30	8	TIFFMEMBER ( tif , clientdir ) = ( tidata_t ) xt
LVAL	271:2	271:2	9	TIFFMEMBER ( tif , clientdir )
FUNCTION_CALL	271:2	271:26	10	TIFFMEMBER ( tif , clientdir )
CALLEE	271:2	271:2	11	TIFFMEMBER
LEAF_NODE	271:2	271:2	12	TIFFMEMBER
LEAF_NODE	271:12	271:12	11	(
ARGUMENT	271:13	271:13	11	tif
FIELD	271:13	271:13	12	tif
LEAF_NODE	271:13	271:13	13	tif
LEAF_NODE	271:16	271:16	11	,
ARGUMENT	271:17	271:17	11	clientdir
FIELD	271:17	271:17	12	clientdir
LEAF_NODE	271:17	271:17	13	clientdir
LEAF_NODE	271:26	271:26	11	)
ASSIGN_OP	271:28	271:28	9	=
LEAF_NODE	271:28	271:28	10	=
RVAL	271:30	271:40	9	( tidata_t ) xt
LEAF_NODE	271:30	271:30	10	(
TYPE_NAME	271:31	271:31	10	tidata_t
LEAF_NODE	271:31	271:31	11	tidata_t
LEAF_NODE	271:39	271:39	10	)
FIELD	271:40	271:40	10	xt
LEAF_NODE	271:40	271:40	11	xt
LEAF_NODE	271:42	271:42	7	;
EXPR_STATEMENT	272:2	272:37	6	tif -> tif_flags |= XTIFF_INITIALIZED ;
EXPR	272:2	272:2	7	tif -> tif_flags |= XTIFF_INITIALIZED
ASSIGN	272:2	272:20	8	tif -> tif_flags |= XTIFF_INITIALIZED
LVAL	272:2	272:2	9	tif -> tif_flags
FIELD	272:2	272:7	10	tif -> tif_flags
LEAF_NODE	272:2	272:2	11	tif
LEAF_NODE	272:5	272:5	11	->
LEAF_NODE	272:7	272:7	11	tif_flags
ASSIGN_OP	272:17	272:17	9	|=
LEAF_NODE	272:17	272:17	10	|=
RVAL	272:20	272:20	9	XTIFF_INITIALIZED
FIELD	272:20	272:20	10	XTIFF_INITIALIZED
LEAF_NODE	272:20	272:20	11	XTIFF_INITIALIZED
LEAF_NODE	272:37	272:37	7	;
LEAF_NODE	273:1	273:1	5	}
EXPR_STATEMENT	276:1	276:33	3	_XTIFFLocalDefaultDirectory ( tif ) ;
EXPR	276:1	276:1	4	_XTIFFLocalDefaultDirectory ( tif )
FUNCTION_CALL	276:1	276:32	5	_XTIFFLocalDefaultDirectory ( tif )
CALLEE	276:1	276:1	6	_XTIFFLocalDefaultDirectory
LEAF_NODE	276:1	276:1	7	_XTIFFLocalDefaultDirectory
LEAF_NODE	276:28	276:28	6	(
ARGUMENT	276:29	276:29	6	tif
FIELD	276:29	276:29	7	tif
LEAF_NODE	276:29	276:29	8	tif
LEAF_NODE	276:32	276:32	6	)
LEAF_NODE	276:33	276:33	4	;
SELECTION	283:1	284:2	3	
KEYWORD	283:1	283:1	4	if
LEAF_NODE	283:1	283:1	5	if
LEAF_NODE	283:4	283:4	4	(
CONDITION	283:5	283:5	4	_ParentExtender
EXPR	283:5	283:5	5	_ParentExtender
FIELD	283:5	283:5	6	_ParentExtender
LEAF_NODE	283:5	283:5	7	_ParentExtender
LEAF_NODE	283:20	283:20	4	)
STATEMENTS	284:2	284:2	4	
EXPR_STATEMENT	284:2	284:25	5	( * _ParentExtender ) ( tif ) ;
EXPR	284:2	284:2	6	( * _ParentExtender ) ( tif )
FUNCTION_CALL	284:2	284:24	7	( * _ParentExtender ) ( tif )
CALLEE	284:2	284:19	8	( * _ParentExtender )
LEAF_NODE	284:2	284:2	9	(
UNARY_EXPR	284:3	284:4	9	* _ParentExtender
UNARY_OPERATOR	284:3	284:3	10	*
LEAF_NODE	284:3	284:3	11	*
FIELD	284:4	284:4	10	_ParentExtender
LEAF_NODE	284:4	284:4	11	_ParentExtender
LEAF_NODE	284:19	284:19	9	)
LEAF_NODE	284:20	284:20	8	(
ARGUMENT	284:21	284:21	8	tif
FIELD	284:21	284:21	9	tif
LEAF_NODE	284:21	284:21	10	tif
LEAF_NODE	284:24	284:24	8	)
LEAF_NODE	284:25	284:25	6	;
LEAF_NODE	286:0	286:0	2	}
FUNCTION_DEF	293:0	303:0	1	
RETURN_TYPE	293:0	294:0	2	static void
LEAF_NODE	293:0	293:0	3	static
TYPE_NAME	294:0	294:0	3	void
LEAF_NODE	294:0	294:0	4	void
FUNCTION_NAME	294:5	294:5	2	_XTIFFInitialize
LEAF_NODE	294:5	294:5	3	_XTIFFInitialize
PARAMETER_LIST	294:21	294:26	2	( void )
LEAF_NODE	294:21	294:21	3	(
PARAMETER_DECL	294:22	294:22	3	void
LEAF_NODE	294:22	294:22	4	void
LEAF_NODE	294:26	294:26	3	)
LEAF_NODE	295:0	295:0	2	{
STATEMENTS	296:1	302:1	2	
LEAF_NODE	296:1	296:1	3	static
EXPR_STATEMENT	296:8	296:20	3	first_time = 1 ;
EXPR	296:8	296:8	4	first_time = 1
ASSIGN	296:8	296:19	5	first_time = 1
LVAL	296:8	296:8	6	first_time
FIELD	296:8	296:8	7	first_time
LEAF_NODE	296:8	296:8	8	first_time
ASSIGN_OP	296:18	296:18	6	=
LEAF_NODE	296:18	296:18	7	=
RVAL	296:19	296:19	6	1
FIELD	296:19	296:19	7	1
LEAF_NODE	296:19	296:19	8	1
LEAF_NODE	296:20	296:20	4	;
SELECTION	298:1	298:19	3	
KEYWORD	298:1	298:1	4	if
LEAF_NODE	298:1	298:1	5	if
LEAF_NODE	298:4	298:4	4	(
CONDITION	298:5	298:5	4	! first_time
EXPR	298:5	298:5	5	! first_time
UNARY_EXPR	298:5	298:7	6	! first_time
UNARY_OPERATOR	298:5	298:5	7	!
LEAF_NODE	298:5	298:5	8	!
FIELD	298:7	298:7	7	first_time
LEAF_NODE	298:7	298:7	8	first_time
LEAF_NODE	298:17	298:17	4	)
STATEMENTS	298:19	298:19	4	
JUMP_STATEMENT	298:19	298:25	5	return DESTINATION ;
KEYWORD	298:19	298:19	6	return
LEAF_NODE	298:19	298:19	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	298:25	298:25	6	;
EXPR_STATEMENT	299:1	299:15	3	first_time = 0 ;
EXPR	299:1	299:1	4	first_time = 0
ASSIGN	299:1	299:14	5	first_time = 0
LVAL	299:1	299:1	6	first_time
FIELD	299:1	299:1	7	first_time
LEAF_NODE	299:1	299:1	8	first_time
ASSIGN_OP	299:12	299:12	6	=
LEAF_NODE	299:12	299:12	7	=
RVAL	299:14	299:14	6	0
FIELD	299:14	299:14	7	0
LEAF_NODE	299:14	299:14	8	0
LEAF_NODE	299:15	299:15	4	;
EXPR_STATEMENT	302:1	302:61	3	_ParentExtender = TIFFSetTagExtender ( _XTIFFDefaultDirectory ) ;
EXPR	302:1	302:1	4	_ParentExtender = TIFFSetTagExtender ( _XTIFFDefaultDirectory )
ASSIGN	302:1	302:19	5	_ParentExtender = TIFFSetTagExtender ( _XTIFFDefaultDirectory )
LVAL	302:1	302:1	6	_ParentExtender
FIELD	302:1	302:1	7	_ParentExtender
LEAF_NODE	302:1	302:1	8	_ParentExtender
ASSIGN_OP	302:17	302:17	6	=
LEAF_NODE	302:17	302:17	7	=
RVAL	302:19	302:19	6	TIFFSetTagExtender ( _XTIFFDefaultDirectory )
FUNCTION_CALL	302:19	302:60	7	TIFFSetTagExtender ( _XTIFFDefaultDirectory )
CALLEE	302:19	302:19	8	TIFFSetTagExtender
LEAF_NODE	302:19	302:19	9	TIFFSetTagExtender
LEAF_NODE	302:37	302:37	8	(
ARGUMENT	302:38	302:38	8	_XTIFFDefaultDirectory
FIELD	302:38	302:38	9	_XTIFFDefaultDirectory
LEAF_NODE	302:38	302:38	10	_XTIFFDefaultDirectory
LEAF_NODE	302:60	302:60	8	)
LEAF_NODE	302:61	302:61	4	;
LEAF_NODE	303:0	303:0	2	}
FUNCTION_DEF	309:0	318:0	1	
RETURN_TYPE	309:0	309:4	2	TIFF *
TYPE_NAME	309:0	309:0	3	TIFF
LEAF_NODE	309:0	309:0	4	TIFF
LEAF_NODE	309:4	309:4	3	*
FUNCTION_NAME	310:0	310:0	2	XTIFFOpen
LEAF_NODE	310:0	310:0	3	XTIFFOpen
PARAMETER_LIST	310:9	310:44	2	( const char * name , const char * mode )
LEAF_NODE	310:9	310:9	3	(
PARAMETER_DECL	310:10	310:22	3	const char * name
TYPE	310:10	310:20	4	const char *
TYPE_NAME	310:10	310:16	5	const char
LEAF_NODE	310:10	310:10	6	const
LEAF_NODE	310:16	310:16	6	char
POINTER	310:20	310:20	5	*
LEAF_NODE	310:20	310:20	6	*
NAME	310:22	310:22	4	name
LEAF_NODE	310:22	310:22	5	name
LEAF_NODE	310:26	310:26	3	,
PARAMETER_DECL	310:28	310:40	3	const char * mode
TYPE	310:28	310:38	4	const char *
TYPE_NAME	310:28	310:34	5	const char
LEAF_NODE	310:28	310:28	6	const
LEAF_NODE	310:34	310:34	6	char
POINTER	310:38	310:38	5	*
LEAF_NODE	310:38	310:38	6	*
NAME	310:40	310:40	4	mode
LEAF_NODE	310:40	310:40	5	mode
LEAF_NODE	310:44	310:44	3	)
LEAF_NODE	311:0	311:0	2	{
STATEMENTS	313:1	317:1	2	
EXPR_STATEMENT	313:1	313:19	3	_XTIFFInitialize ( ) ;
EXPR	313:1	313:1	4	_XTIFFInitialize ( )
FUNCTION_CALL	313:1	313:18	5	_XTIFFInitialize ( )
CALLEE	313:1	313:1	6	_XTIFFInitialize
LEAF_NODE	313:1	313:1	7	_XTIFFInitialize
LEAF_NODE	313:17	313:17	6	(
LEAF_NODE	313:18	313:18	6	)
LEAF_NODE	313:19	313:19	4	;
JUMP_STATEMENT	317:1	317:28	3	return TIFFOpen ( name , mode ) ;
KEYWORD	317:1	317:1	4	return
LEAF_NODE	317:1	317:1	5	return
DESTINATION	317:8	317:8	4	TIFFOpen ( name , mode )
EXPR	317:8	317:8	5	TIFFOpen ( name , mode )
FUNCTION_CALL	317:8	317:27	6	TIFFOpen ( name , mode )
CALLEE	317:8	317:8	7	TIFFOpen
LEAF_NODE	317:8	317:8	8	TIFFOpen
LEAF_NODE	317:16	317:16	7	(
ARGUMENT	317:17	317:17	7	name
FIELD	317:17	317:17	8	name
LEAF_NODE	317:17	317:17	9	name
LEAF_NODE	317:21	317:21	7	,
ARGUMENT	317:23	317:23	7	mode
FIELD	317:23	317:23	8	mode
LEAF_NODE	317:23	317:23	9	mode
LEAF_NODE	317:27	317:27	7	)
LEAF_NODE	317:28	317:28	4	;
LEAF_NODE	318:0	318:0	2	}
FUNCTION_DEF	320:0	329:0	1	
RETURN_TYPE	320:0	320:4	2	TIFF *
TYPE_NAME	320:0	320:0	3	TIFF
LEAF_NODE	320:0	320:0	4	TIFF
LEAF_NODE	320:4	320:4	3	*
FUNCTION_NAME	321:0	321:0	2	XTIFFFdOpen
LEAF_NODE	321:0	321:0	3	XTIFFFdOpen
PARAMETER_LIST	321:11	321:54	2	( int fd , const char * name , const char * mode )
LEAF_NODE	321:11	321:11	3	(
PARAMETER_DECL	321:12	321:16	3	int fd
TYPE	321:12	321:12	4	int
TYPE_NAME	321:12	321:12	5	int
LEAF_NODE	321:12	321:12	6	int
NAME	321:16	321:16	4	fd
LEAF_NODE	321:16	321:16	5	fd
LEAF_NODE	321:18	321:18	3	,
PARAMETER_DECL	321:20	321:32	3	const char * name
TYPE	321:20	321:30	4	const char *
TYPE_NAME	321:20	321:26	5	const char
LEAF_NODE	321:20	321:20	6	const
LEAF_NODE	321:26	321:26	6	char
POINTER	321:30	321:30	5	*
LEAF_NODE	321:30	321:30	6	*
NAME	321:32	321:32	4	name
LEAF_NODE	321:32	321:32	5	name
LEAF_NODE	321:36	321:36	3	,
PARAMETER_DECL	321:38	321:50	3	const char * mode
TYPE	321:38	321:48	4	const char *
TYPE_NAME	321:38	321:44	5	const char
LEAF_NODE	321:38	321:38	6	const
LEAF_NODE	321:44	321:44	6	char
POINTER	321:48	321:48	5	*
LEAF_NODE	321:48	321:48	6	*
NAME	321:50	321:50	4	mode
LEAF_NODE	321:50	321:50	5	mode
LEAF_NODE	321:54	321:54	3	)
LEAF_NODE	322:0	322:0	2	{
STATEMENTS	324:1	328:1	2	
EXPR_STATEMENT	324:1	324:19	3	_XTIFFInitialize ( ) ;
EXPR	324:1	324:1	4	_XTIFFInitialize ( )
FUNCTION_CALL	324:1	324:18	5	_XTIFFInitialize ( )
CALLEE	324:1	324:1	6	_XTIFFInitialize
LEAF_NODE	324:1	324:1	7	_XTIFFInitialize
LEAF_NODE	324:17	324:17	6	(
LEAF_NODE	324:18	324:18	6	)
LEAF_NODE	324:19	324:19	4	;
JUMP_STATEMENT	328:1	328:34	3	return TIFFFdOpen ( fd , name , mode ) ;
KEYWORD	328:1	328:1	4	return
LEAF_NODE	328:1	328:1	5	return
DESTINATION	328:8	328:8	4	TIFFFdOpen ( fd , name , mode )
EXPR	328:8	328:8	5	TIFFFdOpen ( fd , name , mode )
FUNCTION_CALL	328:8	328:33	6	TIFFFdOpen ( fd , name , mode )
CALLEE	328:8	328:8	7	TIFFFdOpen
LEAF_NODE	328:8	328:8	8	TIFFFdOpen
LEAF_NODE	328:18	328:18	7	(
ARGUMENT	328:19	328:19	7	fd
FIELD	328:19	328:19	8	fd
LEAF_NODE	328:19	328:19	9	fd
LEAF_NODE	328:21	328:21	7	,
ARGUMENT	328:23	328:23	7	name
FIELD	328:23	328:23	8	name
LEAF_NODE	328:23	328:23	9	name
LEAF_NODE	328:27	328:27	7	,
ARGUMENT	328:29	328:29	7	mode
FIELD	328:29	328:29	8	mode
LEAF_NODE	328:29	328:29	9	mode
LEAF_NODE	328:33	328:33	7	)
LEAF_NODE	328:34	328:34	4	;
LEAF_NODE	329:0	329:0	2	}
FUNCTION_DEF	332:0	343:0	1	
RETURN_TYPE	332:0	332:0	2	void
TYPE_NAME	332:0	332:0	3	void
LEAF_NODE	332:0	332:0	4	void
FUNCTION_NAME	333:0	333:0	2	XTIFFClose
LEAF_NODE	333:0	333:0	3	XTIFFClose
PARAMETER_LIST	333:10	333:20	2	( TIFF * tif )
LEAF_NODE	333:10	333:10	3	(
PARAMETER_DECL	333:11	333:17	3	TIFF * tif
TYPE	333:11	333:16	4	TIFF *
TYPE_NAME	333:11	333:11	5	TIFF
LEAF_NODE	333:11	333:11	6	TIFF
POINTER	333:16	333:16	5	*
LEAF_NODE	333:16	333:16	6	*
NAME	333:17	333:17	4	tif
LEAF_NODE	333:17	333:17	5	tif
LEAF_NODE	333:20	333:20	3	)
LEAF_NODE	334:0	334:0	2	{
STATEMENTS	335:1	342:1	2	
SIMPLE_DECL	335:1	335:26	3	xtiff * xt ; xt = XTIFFDIR ( tif ) ;
VAR_DECL	335:1	335:8	4	xtiff * xt ; xt = XTIFFDIR ( tif )
TYPE	335:1	335:7	5	xtiff *
TYPE_NAME	335:1	335:1	6	xtiff
LEAF_NODE	335:1	335:1	7	xtiff
POINTER	335:7	335:7	6	*
LEAF_NODE	335:7	335:7	7	*
NAME	335:8	335:8	5	xt
LEAF_NODE	335:8	335:8	6	xt
LEAF_NODE	0:0	0:0	5	;
INIT	335:8	335:8	5	xt = XTIFFDIR ( tif )
ASSIGN	335:8	335:13	6	xt = XTIFFDIR ( tif )
LVAL	335:8	335:8	7	xt
NAME	335:8	335:8	8	xt
LEAF_NODE	335:8	335:8	9	xt
ASSIGN_OP	335:11	335:11	7	=
LEAF_NODE	335:11	335:11	8	=
RVAL	335:13	335:13	7	XTIFFDIR ( tif )
FUNCTION_CALL	335:13	335:25	8	XTIFFDIR ( tif )
CALLEE	335:13	335:13	9	XTIFFDIR
LEAF_NODE	335:13	335:13	10	XTIFFDIR
LEAF_NODE	335:21	335:21	9	(
ARGUMENT	335:22	335:22	9	tif
FIELD	335:22	335:22	10	tif
LEAF_NODE	335:22	335:22	11	tif
LEAF_NODE	335:25	335:25	9	)
LEAF_NODE	335:26	335:26	4	;
EXPR_STATEMENT	338:1	338:15	3	TIFFClose ( tif ) ;
EXPR	338:1	338:1	4	TIFFClose ( tif )
FUNCTION_CALL	338:1	338:14	5	TIFFClose ( tif )
CALLEE	338:1	338:1	6	TIFFClose
LEAF_NODE	338:1	338:1	7	TIFFClose
LEAF_NODE	338:10	338:10	6	(
ARGUMENT	338:11	338:11	6	tif
FIELD	338:11	338:11	7	tif
LEAF_NODE	338:11	338:11	8	tif
LEAF_NODE	338:14	338:14	6	)
LEAF_NODE	338:15	338:15	4	;
EXPR_STATEMENT	341:1	341:24	3	_XTIFFFreeDirectory ( xt ) ;
EXPR	341:1	341:1	4	_XTIFFFreeDirectory ( xt )
FUNCTION_CALL	341:1	341:23	5	_XTIFFFreeDirectory ( xt )
CALLEE	341:1	341:1	6	_XTIFFFreeDirectory
LEAF_NODE	341:1	341:1	7	_XTIFFFreeDirectory
LEAF_NODE	341:20	341:20	6	(
ARGUMENT	341:21	341:21	6	xt
FIELD	341:21	341:21	7	xt
LEAF_NODE	341:21	341:21	8	xt
LEAF_NODE	341:23	341:23	6	)
LEAF_NODE	341:24	341:24	4	;
EXPR_STATEMENT	342:1	342:14	3	_TIFFfree ( xt ) ;
EXPR	342:1	342:1	4	_TIFFfree ( xt )
FUNCTION_CALL	342:1	342:13	5	_TIFFfree ( xt )
CALLEE	342:1	342:1	6	_TIFFfree
LEAF_NODE	342:1	342:1	7	_TIFFfree
LEAF_NODE	342:10	342:10	6	(
ARGUMENT	342:11	342:11	6	xt
FIELD	342:11	342:11	7	xt
LEAF_NODE	342:11	342:11	8	xt
LEAF_NODE	342:13	342:13	6	)
LEAF_NODE	342:14	342:14	4	;
LEAF_NODE	343:0	343:0	2	}
