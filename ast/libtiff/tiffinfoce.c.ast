SOURCE_FILE	46:0	456:0	0	
SIMPLE_DECL	46:0	46:16	1	int showdata ; showdata = 0 ;
VAR_DECL	46:0	46:4	2	int showdata ; showdata = 0
TYPE	46:0	46:0	3	int
TYPE_NAME	46:0	46:0	4	int
LEAF_NODE	46:0	46:0	5	int
NAME	46:4	46:4	3	showdata
LEAF_NODE	46:4	46:4	4	showdata
LEAF_NODE	0:0	0:0	3	;
INIT	46:4	46:4	3	showdata = 0
ASSIGN	46:4	46:15	4	showdata = 0
LVAL	46:4	46:4	5	showdata
NAME	46:4	46:4	6	showdata
LEAF_NODE	46:4	46:4	7	showdata
ASSIGN_OP	46:13	46:13	5	=
LEAF_NODE	46:13	46:13	6	=
RVAL	46:15	46:15	5	0
FIELD	46:15	46:15	6	0
LEAF_NODE	46:15	46:15	7	0
LEAF_NODE	46:16	46:16	2	;
SIMPLE_DECL	47:0	47:15	1	int rawdata ; rawdata = 0 ;
VAR_DECL	47:0	47:4	2	int rawdata ; rawdata = 0
TYPE	47:0	47:0	3	int
TYPE_NAME	47:0	47:0	4	int
LEAF_NODE	47:0	47:0	5	int
NAME	47:4	47:4	3	rawdata
LEAF_NODE	47:4	47:4	4	rawdata
LEAF_NODE	0:0	0:0	3	;
INIT	47:4	47:4	3	rawdata = 0
ASSIGN	47:4	47:14	4	rawdata = 0
LVAL	47:4	47:4	5	rawdata
NAME	47:4	47:4	6	rawdata
LEAF_NODE	47:4	47:4	7	rawdata
ASSIGN_OP	47:12	47:12	5	=
LEAF_NODE	47:12	47:12	6	=
RVAL	47:14	47:14	5	0
FIELD	47:14	47:14	6	0
LEAF_NODE	47:14	47:14	7	0
LEAF_NODE	47:15	47:15	2	;
SIMPLE_DECL	48:0	48:17	1	int showwords ; showwords = 0 ;
VAR_DECL	48:0	48:4	2	int showwords ; showwords = 0
TYPE	48:0	48:0	3	int
TYPE_NAME	48:0	48:0	4	int
LEAF_NODE	48:0	48:0	5	int
NAME	48:4	48:4	3	showwords
LEAF_NODE	48:4	48:4	4	showwords
LEAF_NODE	0:0	0:0	3	;
INIT	48:4	48:4	3	showwords = 0
ASSIGN	48:4	48:16	4	showwords = 0
LVAL	48:4	48:4	5	showwords
NAME	48:4	48:4	6	showwords
LEAF_NODE	48:4	48:4	7	showwords
ASSIGN_OP	48:14	48:14	5	=
LEAF_NODE	48:14	48:14	6	=
RVAL	48:16	48:16	5	0
FIELD	48:16	48:16	6	0
LEAF_NODE	48:16	48:16	7	0
LEAF_NODE	48:17	48:17	2	;
SIMPLE_DECL	49:0	49:16	1	int readdata ; readdata = 0 ;
VAR_DECL	49:0	49:4	2	int readdata ; readdata = 0
TYPE	49:0	49:0	3	int
TYPE_NAME	49:0	49:0	4	int
LEAF_NODE	49:0	49:0	5	int
NAME	49:4	49:4	3	readdata
LEAF_NODE	49:4	49:4	4	readdata
LEAF_NODE	0:0	0:0	3	;
INIT	49:4	49:4	3	readdata = 0
ASSIGN	49:4	49:15	4	readdata = 0
LVAL	49:4	49:4	5	readdata
NAME	49:4	49:4	6	readdata
LEAF_NODE	49:4	49:4	7	readdata
ASSIGN_OP	49:13	49:13	5	=
LEAF_NODE	49:13	49:13	6	=
RVAL	49:15	49:15	5	0
FIELD	49:15	49:15	6	0
LEAF_NODE	49:15	49:15	7	0
LEAF_NODE	49:16	49:16	2	;
SIMPLE_DECL	50:0	50:17	1	int stoponerr ; stoponerr = 1 ;
VAR_DECL	50:0	50:4	2	int stoponerr ; stoponerr = 1
TYPE	50:0	50:0	3	int
TYPE_NAME	50:0	50:0	4	int
LEAF_NODE	50:0	50:0	5	int
NAME	50:4	50:4	3	stoponerr
LEAF_NODE	50:4	50:4	4	stoponerr
LEAF_NODE	0:0	0:0	3	;
INIT	50:4	50:4	3	stoponerr = 1
ASSIGN	50:4	50:16	4	stoponerr = 1
LVAL	50:4	50:4	5	stoponerr
NAME	50:4	50:4	6	stoponerr
LEAF_NODE	50:4	50:4	7	stoponerr
ASSIGN_OP	50:14	50:14	5	=
LEAF_NODE	50:14	50:14	6	=
RVAL	50:16	50:16	5	1
FIELD	50:16	50:16	6	1
LEAF_NODE	50:16	50:16	7	1
LEAF_NODE	50:17	50:17	2	;
SIMPLE_DECL	52:7	52:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	52:7	52:12	2	void usage ; usage usage ( void )
TYPE	52:7	52:7	3	void
TYPE_NAME	52:7	52:7	4	void
LEAF_NODE	52:7	52:7	5	void
NAME	52:12	52:12	3	usage
LEAF_NODE	52:12	52:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	52:12	52:12	3	usage usage ( void )
ASSIGN	52:12	52:17	4	usage usage ( void )
LVAL	52:12	52:12	5	usage
NAME	52:12	52:12	6	usage
LEAF_NODE	52:12	52:12	7	usage
ASSIGN_OP	52:12	52:12	5	usage
NAME	52:12	52:12	6	usage
LEAF_NODE	52:12	52:12	7	usage
RVAL	52:17	52:22	5	( void )
LEAF_NODE	52:17	52:17	6	(
EXPR	52:18	52:18	6	void
FIELD	52:18	52:18	7	void
LEAF_NODE	52:18	52:18	8	void
LEAF_NODE	52:22	52:22	6	)
LEAF_NODE	52:23	52:23	2	;
FUNCTION_DEF	55:0	161:0	1	
RETURN_TYPE	55:0	55:0	2	int
TYPE_NAME	55:0	55:0	3	int
LEAF_NODE	55:0	55:0	4	int
FUNCTION_NAME	56:0	56:0	2	main
LEAF_NODE	56:0	56:0	3	main
PARAMETER_LIST	56:4	56:27	2	( int argc , char * [ ] argv )
LEAF_NODE	56:4	56:4	3	(
PARAMETER_DECL	56:5	56:9	3	int argc
TYPE	56:5	56:5	4	int
TYPE_NAME	56:5	56:5	5	int
LEAF_NODE	56:5	56:5	6	int
NAME	56:9	56:9	4	argc
LEAF_NODE	56:9	56:9	5	argc
LEAF_NODE	56:13	56:13	3	,
PARAMETER_DECL	56:15	56:21	3	char * [ ] argv
TYPE	56:15	56:25	4	char * [ ]
TYPE_NAME	56:15	56:15	5	char
LEAF_NODE	56:15	56:15	6	char
POINTER	56:19	56:19	5	*
LEAF_NODE	56:19	56:19	6	*
TYPE_SUFFIX	56:25	56:26	5	[ ]
LEAF_NODE	56:25	56:25	6	[
LEAF_NODE	56:26	56:26	6	]
NAME	56:21	56:21	4	argv
LEAF_NODE	56:21	56:21	5	argv
LEAF_NODE	56:27	56:27	3	)
LEAF_NODE	57:0	57:0	2	{
STATEMENTS	58:1	160:1	2	
SIMPLE_DECL	58:1	58:34	3	int dirnum ; dirnum = - 1 , int multiplefiles , int c ;
INIT_DECL_LIST	58:1	58:1	4	int dirnum ; dirnum = - 1 , int multiplefiles , int c
VAR_DECL	58:1	58:5	5	int dirnum ; dirnum = - 1
TYPE	58:1	58:1	6	int
TYPE_NAME	58:1	58:1	7	int
LEAF_NODE	58:1	58:1	8	int
NAME	58:5	58:5	6	dirnum
LEAF_NODE	58:5	58:5	7	dirnum
LEAF_NODE	0:0	0:0	6	;
INIT	58:5	58:5	6	dirnum = - 1
ASSIGN	58:5	58:14	7	dirnum = - 1
LVAL	58:5	58:5	8	dirnum
NAME	58:5	58:5	9	dirnum
LEAF_NODE	58:5	58:5	10	dirnum
ASSIGN_OP	58:12	58:12	8	=
LEAF_NODE	58:12	58:12	9	=
RVAL	58:14	58:14	8	- 1
UNARY_EXPR	58:14	58:15	9	- 1
UNARY_OPERATOR	58:14	58:14	10	-
LEAF_NODE	58:14	58:14	11	-
FIELD	58:15	58:15	10	1
LEAF_NODE	58:15	58:15	11	1
LEAF_NODE	58:16	58:16	5	,
INIT_DECL_LIST	58:1	58:1	5	int multiplefiles , int c
VAR_DECL	58:1	58:18	6	int multiplefiles
TYPE	58:1	58:1	7	int
TYPE_NAME	58:1	58:1	8	int
LEAF_NODE	58:1	58:1	9	int
NAME	58:18	58:18	7	multiplefiles
LEAF_NODE	58:18	58:18	8	multiplefiles
LEAF_NODE	58:31	58:31	6	,
VAR_DECL	58:1	58:33	6	int c
TYPE	58:1	58:1	7	int
TYPE_NAME	58:1	58:1	8	int
LEAF_NODE	58:1	58:1	9	int
NAME	58:33	58:33	7	c
LEAF_NODE	58:33	58:33	8	c
LEAF_NODE	58:34	58:34	4	;
SIMPLE_DECL	59:1	59:17	3	uint16 order ; order = 0 ;
VAR_DECL	59:1	59:8	4	uint16 order ; order = 0
TYPE	59:1	59:1	5	uint16
TYPE_NAME	59:1	59:1	6	uint16
LEAF_NODE	59:1	59:1	7	uint16
NAME	59:8	59:8	5	order
LEAF_NODE	59:8	59:8	6	order
LEAF_NODE	0:0	0:0	5	;
INIT	59:8	59:8	5	order = 0
ASSIGN	59:8	59:16	6	order = 0
LVAL	59:8	59:8	7	order
NAME	59:8	59:8	8	order
LEAF_NODE	59:8	59:8	9	order
ASSIGN_OP	59:14	59:14	7	=
LEAF_NODE	59:14	59:14	8	=
RVAL	59:16	59:16	7	0
FIELD	59:16	59:16	8	0
LEAF_NODE	59:16	59:16	9	0
LEAF_NODE	59:17	59:17	4	;
SIMPLE_DECL	60:1	60:10	3	TIFF * tif ;
VAR_DECL	60:1	60:7	4	TIFF * tif
TYPE	60:1	60:5	5	TIFF *
TYPE_NAME	60:1	60:1	6	TIFF
LEAF_NODE	60:1	60:1	7	TIFF
POINTER	60:5	60:5	6	*
LEAF_NODE	60:5	60:5	7	*
NAME	60:7	60:7	5	tif
LEAF_NODE	60:7	60:7	6	tif
LEAF_NODE	60:10	60:10	4	;
LEAF_NODE	61:1	61:1	3	extern
SIMPLE_DECL	61:8	61:18	3	int optind ;
VAR_DECL	61:8	61:12	4	int optind
TYPE	61:8	61:8	5	int
TYPE_NAME	61:8	61:8	6	int
LEAF_NODE	61:8	61:8	7	int
NAME	61:12	61:12	5	optind
LEAF_NODE	61:12	61:12	6	optind
LEAF_NODE	61:18	61:18	4	;
LEAF_NODE	62:1	62:1	3	extern
SIMPLE_DECL	62:8	62:20	3	char * optarg ;
VAR_DECL	62:8	62:14	4	char * optarg
TYPE	62:8	62:12	5	char *
TYPE_NAME	62:8	62:8	6	char
LEAF_NODE	62:8	62:8	7	char
POINTER	62:12	62:12	6	*
LEAF_NODE	62:12	62:12	7	*
NAME	62:14	62:14	5	optarg
LEAF_NODE	62:14	62:14	6	optarg
LEAF_NODE	62:20	62:20	4	;
SIMPLE_DECL	63:1	63:15	3	long flags ; flags = 0 ;
VAR_DECL	63:1	63:6	4	long flags ; flags = 0
TYPE	63:1	63:1	5	long
TYPE_NAME	63:1	63:1	6	long
LEAF_NODE	63:1	63:1	7	long
NAME	63:6	63:6	5	flags
LEAF_NODE	63:6	63:6	6	flags
LEAF_NODE	0:0	0:0	5	;
INIT	63:6	63:6	5	flags = 0
ASSIGN	63:6	63:14	6	flags = 0
LVAL	63:6	63:6	7	flags
NAME	63:6	63:6	8	flags
LEAF_NODE	63:6	63:6	9	flags
ASSIGN_OP	63:12	63:12	7	=
LEAF_NODE	63:12	63:12	8	=
RVAL	63:14	63:14	7	0
FIELD	63:14	63:14	8	0
LEAF_NODE	63:14	63:14	9	0
LEAF_NODE	63:15	63:15	4	;
SIMPLE_DECL	64:1	64:18	3	uint32 diroff ; diroff = 0 ;
VAR_DECL	64:1	64:8	4	uint32 diroff ; diroff = 0
TYPE	64:1	64:1	5	uint32
TYPE_NAME	64:1	64:1	6	uint32
LEAF_NODE	64:1	64:1	7	uint32
NAME	64:8	64:8	5	diroff
LEAF_NODE	64:8	64:8	6	diroff
LEAF_NODE	0:0	0:0	5	;
INIT	64:8	64:8	5	diroff = 0
ASSIGN	64:8	64:17	6	diroff = 0
LVAL	64:8	64:8	7	diroff
NAME	64:8	64:8	8	diroff
LEAF_NODE	64:8	64:8	9	diroff
ASSIGN_OP	64:15	64:15	7	=
LEAF_NODE	64:15	64:15	8	=
RVAL	64:17	64:17	7	0
FIELD	64:17	64:17	8	0
LEAF_NODE	64:17	64:17	9	0
LEAF_NODE	64:18	64:18	4	;
SIMPLE_DECL	65:1	65:19	3	int chopstrips ; chopstrips = 0 ;
VAR_DECL	65:1	65:5	4	int chopstrips ; chopstrips = 0
TYPE	65:1	65:1	5	int
TYPE_NAME	65:1	65:1	6	int
LEAF_NODE	65:1	65:1	7	int
NAME	65:5	65:5	5	chopstrips
LEAF_NODE	65:5	65:5	6	chopstrips
LEAF_NODE	0:0	0:0	5	;
INIT	65:5	65:5	5	chopstrips = 0
ASSIGN	65:5	65:18	6	chopstrips = 0
LVAL	65:5	65:5	7	chopstrips
NAME	65:5	65:5	8	chopstrips
LEAF_NODE	65:5	65:5	9	chopstrips
ASSIGN_OP	65:16	65:16	7	=
LEAF_NODE	65:16	65:16	8	=
RVAL	65:18	65:18	7	0
FIELD	65:18	65:18	8	0
LEAF_NODE	65:18	65:18	9	0
LEAF_NODE	65:19	65:19	4	;
ITERATION	67:1	68:2	3	
KEYWORD	67:1	67:1	4	while
LEAF_NODE	67:1	67:1	5	while
LEAF_NODE	67:7	67:7	4	(
CONDITION	67:8	67:8	4	( c = getopt ( argc , argv , "f:o:cdDSjilmrsvwz0123456789" ) ) != - 1
EXPR	67:8	67:67	5	( c = getopt ( argc , argv , "f:o:cdDSjilmrsvwz0123456789" ) ) != - 1
LEAF_NODE	67:8	67:8	6	(
ASSIGN	67:9	67:13	6	c = getopt ( argc , argv , "f:o:cdDSjilmrsvwz0123456789" )
LVAL	67:9	67:9	7	c
FIELD	67:9	67:9	8	c
LEAF_NODE	67:9	67:9	9	c
ASSIGN_OP	67:11	67:11	7	=
LEAF_NODE	67:11	67:11	8	=
RVAL	67:13	67:13	7	getopt ( argc , argv , "f:o:cdDSjilmrsvwz0123456789" )
FUNCTION_CALL	67:13	67:61	8	getopt ( argc , argv , "f:o:cdDSjilmrsvwz0123456789" )
CALLEE	67:13	67:13	9	getopt
LEAF_NODE	67:13	67:13	10	getopt
LEAF_NODE	67:19	67:19	9	(
ARGUMENT	67:20	67:20	9	argc
FIELD	67:20	67:20	10	argc
LEAF_NODE	67:20	67:20	11	argc
LEAF_NODE	67:24	67:24	9	,
ARGUMENT	67:26	67:26	9	argv
FIELD	67:26	67:26	10	argv
LEAF_NODE	67:26	67:26	11	argv
LEAF_NODE	67:30	67:30	9	,
ARGUMENT	67:32	67:32	9	"f:o:cdDSjilmrsvwz0123456789"
FIELD	67:32	67:32	10	"f:o:cdDSjilmrsvwz0123456789"
LEAF_NODE	67:32	67:32	11	"f:o:cdDSjilmrsvwz0123456789"
LEAF_NODE	67:61	67:61	9	)
LEAF_NODE	67:62	67:62	6	)
EQ_OPERATOR	67:64	67:64	6	!=
LEAF_NODE	67:64	67:64	7	!=
UNARY_EXPR	67:67	67:68	6	- 1
UNARY_OPERATOR	67:67	67:67	7	-
LEAF_NODE	67:67	67:67	8	-
FIELD	67:68	67:68	7	1
LEAF_NODE	67:68	67:68	8	1
LEAF_NODE	67:69	67:69	4	)
STATEMENTS	68:2	68:2	4	
SELECTION	68:2	68:13	5	
KEYWORD	68:2	68:2	6	switch
LEAF_NODE	68:2	68:2	7	switch
LEAF_NODE	68:9	68:9	6	(
CONDITION	68:10	68:10	6	c
EXPR	68:10	68:10	7	c
FIELD	68:10	68:10	8	c
LEAF_NODE	68:10	68:10	9	c
LEAF_NODE	68:11	68:11	6	)
STATEMENTS	68:13	117:2	6	
LEAF_NODE	68:13	68:13	7	{
STATEMENTS	69:2	115:3	7	
LEAF_NODE	69:2	69:2	8	case
LEAF_NODE	69:7	69:7	8	'0'
LEAF_NODE	69:10	69:10	8	:
LEAF_NODE	69:12	69:12	8	case
LEAF_NODE	69:17	69:17	8	'1'
LEAF_NODE	69:20	69:20	8	:
LEAF_NODE	69:22	69:22	8	case
LEAF_NODE	69:27	69:27	8	'2'
LEAF_NODE	69:30	69:30	8	:
LEAF_NODE	69:32	69:32	8	case
LEAF_NODE	69:37	69:37	8	'3'
LEAF_NODE	69:40	69:40	8	:
LEAF_NODE	70:2	70:2	8	case
LEAF_NODE	70:7	70:7	8	'4'
LEAF_NODE	70:10	70:10	8	:
LEAF_NODE	70:12	70:12	8	case
LEAF_NODE	70:17	70:17	8	'5'
LEAF_NODE	70:20	70:20	8	:
LEAF_NODE	70:22	70:22	8	case
LEAF_NODE	70:27	70:27	8	'6'
LEAF_NODE	70:30	70:30	8	:
LEAF_NODE	70:32	70:32	8	case
LEAF_NODE	70:37	70:37	8	'7'
LEAF_NODE	70:40	70:40	8	:
LEAF_NODE	71:2	71:2	8	case
LEAF_NODE	71:7	71:7	8	'8'
LEAF_NODE	71:10	71:10	8	:
LEAF_NODE	71:12	71:12	8	case
LEAF_NODE	71:17	71:17	8	'9'
LEAF_NODE	71:20	71:20	8	:
EXPR_STATEMENT	72:3	72:36	8	dirnum = atoi ( & argv [ optind - 1 ] [ 1 ] ) ;
EXPR	72:3	72:3	9	dirnum = atoi ( & argv [ optind - 1 ] [ 1 ] )
ASSIGN	72:3	72:12	10	dirnum = atoi ( & argv [ optind - 1 ] [ 1 ] )
LVAL	72:3	72:3	11	dirnum
FIELD	72:3	72:3	12	dirnum
LEAF_NODE	72:3	72:3	13	dirnum
ASSIGN_OP	72:10	72:10	11	=
LEAF_NODE	72:10	72:10	12	=
RVAL	72:12	72:12	11	atoi ( & argv [ optind - 1 ] [ 1 ] )
FUNCTION_CALL	72:12	72:35	12	atoi ( & argv [ optind - 1 ] [ 1 ] )
CALLEE	72:12	72:12	13	atoi
LEAF_NODE	72:12	72:12	14	atoi
LEAF_NODE	72:16	72:16	13	(
ARGUMENT	72:17	72:17	13	& argv [ optind - 1 ] [ 1 ]
UNARY_EXPR	72:17	72:18	14	& argv [ optind - 1 ] [ 1 ]
UNARY_OPERATOR	72:17	72:17	15	&
LEAF_NODE	72:17	72:17	16	&
FIELD	72:18	72:34	15	argv [ optind - 1 ] [ 1 ]
LEAF_NODE	72:18	72:18	16	argv
LEAF_NODE	72:22	72:22	16	[
EXPR	72:23	72:30	16	optind - 1
FIELD	72:23	72:23	17	optind
LEAF_NODE	72:23	72:23	18	optind
LEAF_NODE	72:29	72:29	17	-
FIELD	72:30	72:30	17	1
LEAF_NODE	72:30	72:30	18	1
LEAF_NODE	72:31	72:31	16	]
LEAF_NODE	72:32	72:32	16	[
EXPR	72:33	72:33	16	1
FIELD	72:33	72:33	17	1
LEAF_NODE	72:33	72:33	18	1
LEAF_NODE	72:34	72:34	16	]
LEAF_NODE	72:35	72:35	13	)
LEAF_NODE	72:36	72:36	9	;
JUMP_STATEMENT	73:3	73:8	8	break DESTINATION ;
KEYWORD	73:3	73:3	9	break
LEAF_NODE	73:3	73:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	73:8	73:8	9	;
LEAF_NODE	74:2	74:2	8	case
LEAF_NODE	74:7	74:7	8	'd'
LEAF_NODE	74:10	74:10	8	:
EXPR_STATEMENT	75:3	75:13	8	showdata ++ ;
EXPR	75:3	75:3	9	showdata ++
FIELD	75:3	75:11	10	showdata ++
LEAF_NODE	75:3	75:3	11	showdata
LEAF_NODE	75:11	75:11	11	++
LEAF_NODE	75:13	75:13	9	;
LEAF_NODE	77:2	77:2	8	case
LEAF_NODE	77:7	77:7	8	'D'
LEAF_NODE	77:10	77:10	8	:
EXPR_STATEMENT	78:3	78:13	8	readdata ++ ;
EXPR	78:3	78:3	9	readdata ++
FIELD	78:3	78:11	10	readdata ++
LEAF_NODE	78:3	78:3	11	readdata
LEAF_NODE	78:11	78:11	11	++
LEAF_NODE	78:13	78:13	9	;
JUMP_STATEMENT	79:3	79:8	8	break DESTINATION ;
KEYWORD	79:3	79:3	9	break
LEAF_NODE	79:3	79:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	79:8	79:8	9	;
LEAF_NODE	80:2	80:2	8	case
LEAF_NODE	80:7	80:7	8	'c'
LEAF_NODE	80:10	80:10	8	:
EXPR_STATEMENT	81:3	81:49	8	flags |= TIFFPRINT_COLORMAP | TIFFPRINT_CURVES ;
EXPR	81:3	81:3	9	flags |= TIFFPRINT_COLORMAP | TIFFPRINT_CURVES
ASSIGN	81:3	81:12	10	flags |= TIFFPRINT_COLORMAP | TIFFPRINT_CURVES
LVAL	81:3	81:3	11	flags
FIELD	81:3	81:3	12	flags
LEAF_NODE	81:3	81:3	13	flags
ASSIGN_OP	81:9	81:9	11	|=
LEAF_NODE	81:9	81:9	12	|=
RVAL	81:12	81:12	11	TIFFPRINT_COLORMAP | TIFFPRINT_CURVES
BIT_OR	81:12	81:33	12	TIFFPRINT_COLORMAP | TIFFPRINT_CURVES
BIT_OR_ELEM	81:12	81:12	13	TIFFPRINT_COLORMAP
FIELD	81:12	81:12	14	TIFFPRINT_COLORMAP
LEAF_NODE	81:12	81:12	15	TIFFPRINT_COLORMAP
LEAF_NODE	81:31	81:31	13	|
BIT_OR_ELEM	81:33	81:33	13	TIFFPRINT_CURVES
FIELD	81:33	81:33	14	TIFFPRINT_CURVES
LEAF_NODE	81:33	81:33	15	TIFFPRINT_CURVES
LEAF_NODE	81:49	81:49	9	;
JUMP_STATEMENT	82:3	82:8	8	break DESTINATION ;
KEYWORD	82:3	82:3	9	break
LEAF_NODE	82:3	82:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	82:8	82:8	9	;
LEAF_NODE	83:2	83:2	8	case
LEAF_NODE	83:7	83:7	8	'f'
LEAF_NODE	83:10	83:10	8	:
SELECTION	84:3	85:4	8	
KEYWORD	84:3	84:3	9	if
LEAF_NODE	84:3	84:3	10	if
LEAF_NODE	84:6	84:6	9	(
CONDITION	84:7	84:7	9	streq ( optarg , "lsb2msb" )
EXPR	84:7	84:7	10	streq ( optarg , "lsb2msb" )
FUNCTION_CALL	84:7	84:30	11	streq ( optarg , "lsb2msb" )
CALLEE	84:7	84:7	12	streq
LEAF_NODE	84:7	84:7	13	streq
LEAF_NODE	84:12	84:12	12	(
ARGUMENT	84:13	84:13	12	optarg
FIELD	84:13	84:13	13	optarg
LEAF_NODE	84:13	84:13	14	optarg
LEAF_NODE	84:19	84:19	12	,
ARGUMENT	84:21	84:21	12	"lsb2msb"
FIELD	84:21	84:21	13	"lsb2msb"
LEAF_NODE	84:21	84:21	14	"lsb2msb"
LEAF_NODE	84:30	84:30	12	)
LEAF_NODE	84:31	84:31	9	)
STATEMENTS	85:4	85:4	9	
EXPR_STATEMENT	85:4	85:29	10	order = FILLORDER_LSB2MSB ;
EXPR	85:4	85:4	11	order = FILLORDER_LSB2MSB
ASSIGN	85:4	85:12	12	order = FILLORDER_LSB2MSB
LVAL	85:4	85:4	13	order
FIELD	85:4	85:4	14	order
LEAF_NODE	85:4	85:4	15	order
ASSIGN_OP	85:10	85:10	13	=
LEAF_NODE	85:10	85:10	14	=
RVAL	85:12	85:12	13	FILLORDER_LSB2MSB
FIELD	85:12	85:12	14	FILLORDER_LSB2MSB
LEAF_NODE	85:12	85:12	15	FILLORDER_LSB2MSB
LEAF_NODE	85:29	85:29	11	;
SELECTION	86:3	86:8	8	
KEYWORD	86:3	86:3	9	else
LEAF_NODE	86:3	86:3	10	else
STATEMENTS	86:8	86:8	9	
SELECTION	86:8	87:4	10	
KEYWORD	86:8	86:8	11	if
LEAF_NODE	86:8	86:8	12	if
LEAF_NODE	86:11	86:11	11	(
CONDITION	86:12	86:12	11	streq ( optarg , "msb2lsb" )
EXPR	86:12	86:12	12	streq ( optarg , "msb2lsb" )
FUNCTION_CALL	86:12	86:35	13	streq ( optarg , "msb2lsb" )
CALLEE	86:12	86:12	14	streq
LEAF_NODE	86:12	86:12	15	streq
LEAF_NODE	86:17	86:17	14	(
ARGUMENT	86:18	86:18	14	optarg
FIELD	86:18	86:18	15	optarg
LEAF_NODE	86:18	86:18	16	optarg
LEAF_NODE	86:24	86:24	14	,
ARGUMENT	86:26	86:26	14	"msb2lsb"
FIELD	86:26	86:26	15	"msb2lsb"
LEAF_NODE	86:26	86:26	16	"msb2lsb"
LEAF_NODE	86:35	86:35	14	)
LEAF_NODE	86:36	86:36	11	)
STATEMENTS	87:4	87:4	11	
EXPR_STATEMENT	87:4	87:29	12	order = FILLORDER_MSB2LSB ;
EXPR	87:4	87:4	13	order = FILLORDER_MSB2LSB
ASSIGN	87:4	87:12	14	order = FILLORDER_MSB2LSB
LVAL	87:4	87:4	15	order
FIELD	87:4	87:4	16	order
LEAF_NODE	87:4	87:4	17	order
ASSIGN_OP	87:10	87:10	15	=
LEAF_NODE	87:10	87:10	16	=
RVAL	87:12	87:12	15	FILLORDER_MSB2LSB
FIELD	87:12	87:12	16	FILLORDER_MSB2LSB
LEAF_NODE	87:12	87:12	17	FILLORDER_MSB2LSB
LEAF_NODE	87:29	87:29	13	;
SELECTION	88:3	89:4	8	
KEYWORD	88:3	88:3	9	else
LEAF_NODE	88:3	88:3	10	else
STATEMENTS	89:4	89:4	9	
EXPR_STATEMENT	89:4	89:11	10	usage ( ) ;
EXPR	89:4	89:4	11	usage ( )
FUNCTION_CALL	89:4	89:10	12	usage ( )
CALLEE	89:4	89:4	13	usage
LEAF_NODE	89:4	89:4	14	usage
LEAF_NODE	89:9	89:9	13	(
LEAF_NODE	89:10	89:10	13	)
LEAF_NODE	89:11	89:11	11	;
JUMP_STATEMENT	90:3	90:8	8	break DESTINATION ;
KEYWORD	90:3	90:3	9	break
LEAF_NODE	90:3	90:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	90:8	90:8	9	;
LEAF_NODE	91:2	91:2	8	case
LEAF_NODE	91:7	91:7	8	'i'
LEAF_NODE	91:10	91:10	8	:
EXPR_STATEMENT	92:3	92:16	8	stoponerr = 0 ;
EXPR	92:3	92:3	9	stoponerr = 0
ASSIGN	92:3	92:15	10	stoponerr = 0
LVAL	92:3	92:3	11	stoponerr
FIELD	92:3	92:3	12	stoponerr
LEAF_NODE	92:3	92:3	13	stoponerr
ASSIGN_OP	92:13	92:13	11	=
LEAF_NODE	92:13	92:13	12	=
RVAL	92:15	92:15	11	0
FIELD	92:15	92:15	12	0
LEAF_NODE	92:15	92:15	13	0
LEAF_NODE	92:16	92:16	9	;
JUMP_STATEMENT	93:3	93:8	8	break DESTINATION ;
KEYWORD	93:3	93:3	9	break
LEAF_NODE	93:3	93:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	93:8	93:8	9	;
LEAF_NODE	94:2	94:2	8	case
LEAF_NODE	94:7	94:7	8	'o'
LEAF_NODE	94:10	94:10	8	:
EXPR_STATEMENT	95:3	95:36	8	diroff = strtoul ( optarg , NULL , 0 ) ;
EXPR	95:3	95:3	9	diroff = strtoul ( optarg , NULL , 0 )
ASSIGN	95:3	95:12	10	diroff = strtoul ( optarg , NULL , 0 )
LVAL	95:3	95:3	11	diroff
FIELD	95:3	95:3	12	diroff
LEAF_NODE	95:3	95:3	13	diroff
ASSIGN_OP	95:10	95:10	11	=
LEAF_NODE	95:10	95:10	12	=
RVAL	95:12	95:12	11	strtoul ( optarg , NULL , 0 )
FUNCTION_CALL	95:12	95:35	12	strtoul ( optarg , NULL , 0 )
CALLEE	95:12	95:12	13	strtoul
LEAF_NODE	95:12	95:12	14	strtoul
LEAF_NODE	95:19	95:19	13	(
ARGUMENT	95:20	95:20	13	optarg
FIELD	95:20	95:20	14	optarg
LEAF_NODE	95:20	95:20	15	optarg
LEAF_NODE	95:26	95:26	13	,
ARGUMENT	95:28	95:28	13	NULL
FIELD	95:28	95:28	14	NULL
LEAF_NODE	95:28	95:28	15	NULL
LEAF_NODE	95:32	95:32	13	,
ARGUMENT	95:34	95:34	13	0
FIELD	95:34	95:34	14	0
LEAF_NODE	95:34	95:34	15	0
LEAF_NODE	95:35	95:35	13	)
LEAF_NODE	95:36	95:36	9	;
JUMP_STATEMENT	96:3	96:8	8	break DESTINATION ;
KEYWORD	96:3	96:3	9	break
LEAF_NODE	96:3	96:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	96:8	96:8	9	;
LEAF_NODE	97:2	97:2	8	case
LEAF_NODE	97:7	97:7	8	'j'
LEAF_NODE	97:10	97:10	8	:
EXPR_STATEMENT	98:3	100:27	8	flags |= TIFFPRINT_JPEGQTABLES | TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES ;
EXPR	98:3	98:3	9	flags |= TIFFPRINT_JPEGQTABLES | TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
ASSIGN	98:3	98:12	10	flags |= TIFFPRINT_JPEGQTABLES | TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
LVAL	98:3	98:3	11	flags
FIELD	98:3	98:3	12	flags
LEAF_NODE	98:3	98:3	13	flags
ASSIGN_OP	98:9	98:9	11	|=
LEAF_NODE	98:9	98:9	12	|=
RVAL	98:12	98:12	11	TIFFPRINT_JPEGQTABLES | TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
BIT_OR	98:12	99:5	12	TIFFPRINT_JPEGQTABLES | TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
BIT_OR_ELEM	98:12	98:12	13	TIFFPRINT_JPEGQTABLES
FIELD	98:12	98:12	14	TIFFPRINT_JPEGQTABLES
LEAF_NODE	98:12	98:12	15	TIFFPRINT_JPEGQTABLES
LEAF_NODE	98:34	98:34	13	|
BIT_OR_ELEM	99:5	99:5	13	TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
BIT_OR	99:5	100:5	14	TIFFPRINT_JPEGACTABLES | TIFFPRINT_JPEGDCTABLES
BIT_OR_ELEM	99:5	99:5	15	TIFFPRINT_JPEGACTABLES
FIELD	99:5	99:5	16	TIFFPRINT_JPEGACTABLES
LEAF_NODE	99:5	99:5	17	TIFFPRINT_JPEGACTABLES
LEAF_NODE	99:28	99:28	15	|
BIT_OR_ELEM	100:5	100:5	15	TIFFPRINT_JPEGDCTABLES
FIELD	100:5	100:5	16	TIFFPRINT_JPEGDCTABLES
LEAF_NODE	100:5	100:5	17	TIFFPRINT_JPEGDCTABLES
LEAF_NODE	100:27	100:27	9	;
JUMP_STATEMENT	101:3	101:8	8	break DESTINATION ;
KEYWORD	101:3	101:3	9	break
LEAF_NODE	101:3	101:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	101:8	101:8	9	;
LEAF_NODE	102:2	102:2	8	case
LEAF_NODE	102:7	102:7	8	'r'
LEAF_NODE	102:10	102:10	8	:
EXPR_STATEMENT	103:3	103:14	8	rawdata = 1 ;
EXPR	103:3	103:3	9	rawdata = 1
ASSIGN	103:3	103:13	10	rawdata = 1
LVAL	103:3	103:3	11	rawdata
FIELD	103:3	103:3	12	rawdata
LEAF_NODE	103:3	103:3	13	rawdata
ASSIGN_OP	103:11	103:11	11	=
LEAF_NODE	103:11	103:11	12	=
RVAL	103:13	103:13	11	1
FIELD	103:13	103:13	12	1
LEAF_NODE	103:13	103:13	13	1
LEAF_NODE	103:14	103:14	9	;
JUMP_STATEMENT	104:3	104:8	8	break DESTINATION ;
KEYWORD	104:3	104:3	9	break
LEAF_NODE	104:3	104:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	104:8	104:8	9	;
LEAF_NODE	105:2	105:2	8	case
LEAF_NODE	105:7	105:7	8	's'
LEAF_NODE	105:10	105:10	8	:
EXPR_STATEMENT	106:3	106:28	8	flags |= TIFFPRINT_STRIPS ;
EXPR	106:3	106:3	9	flags |= TIFFPRINT_STRIPS
ASSIGN	106:3	106:12	10	flags |= TIFFPRINT_STRIPS
LVAL	106:3	106:3	11	flags
FIELD	106:3	106:3	12	flags
LEAF_NODE	106:3	106:3	13	flags
ASSIGN_OP	106:9	106:9	11	|=
LEAF_NODE	106:9	106:9	12	|=
RVAL	106:12	106:12	11	TIFFPRINT_STRIPS
FIELD	106:12	106:12	12	TIFFPRINT_STRIPS
LEAF_NODE	106:12	106:12	13	TIFFPRINT_STRIPS
LEAF_NODE	106:28	106:28	9	;
JUMP_STATEMENT	107:3	107:8	8	break DESTINATION ;
KEYWORD	107:3	107:3	9	break
LEAF_NODE	107:3	107:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	107:8	107:8	9	;
LEAF_NODE	108:2	108:2	8	case
LEAF_NODE	108:7	108:7	8	'w'
LEAF_NODE	108:10	108:10	8	:
EXPR_STATEMENT	109:3	109:16	8	showwords = 1 ;
EXPR	109:3	109:3	9	showwords = 1
ASSIGN	109:3	109:15	10	showwords = 1
LVAL	109:3	109:3	11	showwords
FIELD	109:3	109:3	12	showwords
LEAF_NODE	109:3	109:3	13	showwords
ASSIGN_OP	109:13	109:13	11	=
LEAF_NODE	109:13	109:13	12	=
RVAL	109:15	109:15	11	1
FIELD	109:15	109:15	12	1
LEAF_NODE	109:15	109:15	13	1
LEAF_NODE	109:16	109:16	9	;
JUMP_STATEMENT	110:3	110:8	8	break DESTINATION ;
KEYWORD	110:3	110:3	9	break
LEAF_NODE	110:3	110:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	110:8	110:8	9	;
LEAF_NODE	111:2	111:2	8	case
LEAF_NODE	111:7	111:7	8	'z'
LEAF_NODE	111:10	111:10	8	:
EXPR_STATEMENT	112:3	112:17	8	chopstrips = 1 ;
EXPR	112:3	112:3	9	chopstrips = 1
ASSIGN	112:3	112:16	10	chopstrips = 1
LVAL	112:3	112:3	11	chopstrips
FIELD	112:3	112:3	12	chopstrips
LEAF_NODE	112:3	112:3	13	chopstrips
ASSIGN_OP	112:14	112:14	11	=
LEAF_NODE	112:14	112:14	12	=
RVAL	112:16	112:16	11	1
FIELD	112:16	112:16	12	1
LEAF_NODE	112:16	112:16	13	1
LEAF_NODE	112:17	112:17	9	;
JUMP_STATEMENT	113:3	113:8	8	break DESTINATION ;
KEYWORD	113:3	113:3	9	break
LEAF_NODE	113:3	113:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	113:8	113:8	9	;
LEAF_NODE	114:2	114:2	8	case
LEAF_NODE	114:7	114:7	8	'?'
LEAF_NODE	114:10	114:10	8	:
EXPR_STATEMENT	115:3	115:10	8	usage ( ) ;
EXPR	115:3	115:3	9	usage ( )
FUNCTION_CALL	115:3	115:9	10	usage ( )
CALLEE	115:3	115:3	11	usage
LEAF_NODE	115:3	115:3	12	usage
LEAF_NODE	115:8	115:8	11	(
LEAF_NODE	115:9	115:9	11	)
LEAF_NODE	115:10	115:10	9	;
LEAF_NODE	117:2	117:2	7	}
SELECTION	118:1	119:4	3	
KEYWORD	118:1	118:1	4	if
LEAF_NODE	118:1	118:1	5	if
LEAF_NODE	118:4	118:4	4	(
CONDITION	118:5	118:5	4	optind >= argc
EXPR	118:5	118:15	5	optind >= argc
FIELD	118:5	118:5	6	optind
LEAF_NODE	118:5	118:5	7	optind
REL_OPERATOR	118:12	118:12	6	>=
LEAF_NODE	118:12	118:12	7	>=
FIELD	118:15	118:15	6	argc
LEAF_NODE	118:15	118:15	7	argc
LEAF_NODE	118:19	118:19	4	)
STATEMENTS	119:4	121:4	4	
LEAF_NODE	119:4	119:4	5	{
STATEMENTS	120:2	120:2	5	
EXPR_STATEMENT	120:2	120:9	6	usage ( ) ;
EXPR	120:2	120:2	7	usage ( )
FUNCTION_CALL	120:2	120:8	8	usage ( )
CALLEE	120:2	120:2	9	usage
LEAF_NODE	120:2	120:2	10	usage
LEAF_NODE	120:7	120:7	9	(
LEAF_NODE	120:8	120:8	9	)
LEAF_NODE	120:9	120:9	7	;
LEAF_NODE	121:4	121:4	5	}
EXPR_STATEMENT	123:1	123:36	3	multiplefiles = ( argc - optind > 1 ) ;
EXPR	123:1	123:1	4	multiplefiles = ( argc - optind > 1 )
ASSIGN	123:1	123:17	5	multiplefiles = ( argc - optind > 1 )
LVAL	123:1	123:1	6	multiplefiles
FIELD	123:1	123:1	7	multiplefiles
LEAF_NODE	123:1	123:1	8	multiplefiles
ASSIGN_OP	123:15	123:15	6	=
LEAF_NODE	123:15	123:15	7	=
RVAL	123:17	123:35	6	( argc - optind > 1 )
LEAF_NODE	123:17	123:17	7	(
FIELD	123:18	123:18	7	argc
LEAF_NODE	123:18	123:18	8	argc
LEAF_NODE	123:23	123:23	7	-
FIELD	123:25	123:25	7	optind
LEAF_NODE	123:25	123:25	8	optind
REL_OPERATOR	123:32	123:32	7	>
LEAF_NODE	123:32	123:32	8	>
FIELD	123:34	123:34	7	1
LEAF_NODE	123:34	123:34	8	1
LEAF_NODE	123:35	123:35	7	)
LEAF_NODE	123:36	123:36	4	;
ITERATION	124:1	125:4	3	
KEYWORD	124:1	124:1	4	for
LEAF_NODE	124:1	124:1	5	for
LEAF_NODE	124:5	124:5	4	(
FOR_INIT	124:6	124:6	4	;
LEAF_NODE	124:6	124:6	5	;
CONDITION	124:8	124:8	4	optind < argc
EXPR	124:8	124:17	5	optind < argc
FIELD	124:8	124:8	6	optind
LEAF_NODE	124:8	124:8	7	optind
REL_OPERATOR	124:15	124:15	6	<
LEAF_NODE	124:15	124:15	7	<
FIELD	124:17	124:17	6	argc
LEAF_NODE	124:17	124:17	7	argc
LEAF_NODE	124:21	124:21	4	;
FOR_EXPR	124:23	124:23	4	optind ++
EXPR	124:23	124:23	5	optind ++
FIELD	124:23	124:29	6	optind ++
LEAF_NODE	124:23	124:23	7	optind
LEAF_NODE	124:29	124:29	7	++
LEAF_NODE	124:31	124:31	4	)
STATEMENTS	125:4	155:1	4	
LEAF_NODE	125:4	125:4	5	{
STATEMENTS	126:2	132:2	5	
SELECTION	126:2	127:8	6	
KEYWORD	126:2	126:2	7	if
LEAF_NODE	126:2	126:2	8	if
LEAF_NODE	126:5	126:5	7	(
CONDITION	126:6	126:6	7	multiplefiles
EXPR	126:6	126:6	8	multiplefiles
FIELD	126:6	126:6	9	multiplefiles
LEAF_NODE	126:6	126:6	10	multiplefiles
LEAF_NODE	126:19	126:19	7	)
STATEMENTS	127:8	129:8	7	
LEAF_NODE	127:8	127:8	8	{
STATEMENTS	128:3	128:3	8	
EXPR_STATEMENT	128:3	128:32	9	printf ( "%s:\n" , argv [ optind ] ) ;
EXPR	128:3	128:3	10	printf ( "%s:\n" , argv [ optind ] )
FUNCTION_CALL	128:3	128:31	11	printf ( "%s:\n" , argv [ optind ] )
CALLEE	128:3	128:3	12	printf
LEAF_NODE	128:3	128:3	13	printf
LEAF_NODE	128:9	128:9	12	(
ARGUMENT	128:10	128:10	12	"%s:\n"
FIELD	128:10	128:10	13	"%s:\n"
LEAF_NODE	128:10	128:10	14	"%s:\n"
LEAF_NODE	128:17	128:17	12	,
ARGUMENT	128:19	128:19	12	argv [ optind ]
FIELD	128:19	128:30	13	argv [ optind ]
LEAF_NODE	128:19	128:19	14	argv
LEAF_NODE	128:23	128:23	14	[
EXPR	128:24	128:24	14	optind
FIELD	128:24	128:24	15	optind
LEAF_NODE	128:24	128:24	16	optind
LEAF_NODE	128:30	128:30	14	]
LEAF_NODE	128:31	128:31	12	)
LEAF_NODE	128:32	128:32	10	;
LEAF_NODE	129:8	129:8	8	}
EXPR_STATEMENT	131:2	131:56	6	tif = TIFFOpen ( argv [ optind ] , chopstrips ? "rC" : "rc" ) ;
EXPR	131:2	131:2	7	tif = TIFFOpen ( argv [ optind ] , chopstrips ? "rC" : "rc" )
ASSIGN	131:2	131:8	8	tif = TIFFOpen ( argv [ optind ] , chopstrips ? "rC" : "rc" )
LVAL	131:2	131:2	9	tif
FIELD	131:2	131:2	10	tif
LEAF_NODE	131:2	131:2	11	tif
ASSIGN_OP	131:6	131:6	9	=
LEAF_NODE	131:6	131:6	10	=
RVAL	131:8	131:8	9	TIFFOpen ( argv [ optind ] , chopstrips ? "rC" : "rc" )
FUNCTION_CALL	131:8	131:55	10	TIFFOpen ( argv [ optind ] , chopstrips ? "rC" : "rc" )
CALLEE	131:8	131:8	11	TIFFOpen
LEAF_NODE	131:8	131:8	12	TIFFOpen
LEAF_NODE	131:16	131:16	11	(
ARGUMENT	131:17	131:17	11	argv [ optind ]
FIELD	131:17	131:28	12	argv [ optind ]
LEAF_NODE	131:17	131:17	13	argv
LEAF_NODE	131:21	131:21	13	[
EXPR	131:22	131:22	13	optind
FIELD	131:22	131:22	14	optind
LEAF_NODE	131:22	131:22	15	optind
LEAF_NODE	131:28	131:28	13	]
LEAF_NODE	131:29	131:29	11	,
ARGUMENT	131:31	131:31	11	chopstrips ? "rC" : "rc"
COND_EXPR	131:31	131:51	12	chopstrips ? "rC" : "rc"
CONDITION	131:31	131:31	13	chopstrips
FIELD	131:31	131:31	14	chopstrips
LEAF_NODE	131:31	131:31	15	chopstrips
LEAF_NODE	131:42	131:42	13	?
EXPR	131:44	131:44	13	"rC"
FIELD	131:44	131:44	14	"rC"
LEAF_NODE	131:44	131:44	15	"rC"
LEAF_NODE	131:49	131:49	13	:
FIELD	131:51	131:51	13	"rc"
LEAF_NODE	131:51	131:51	14	"rc"
LEAF_NODE	131:55	131:55	11	)
LEAF_NODE	131:56	131:56	7	;
SELECTION	132:2	133:8	6	
KEYWORD	132:2	132:2	7	if
LEAF_NODE	132:2	132:2	8	if
LEAF_NODE	132:5	132:5	7	(
CONDITION	132:6	132:6	7	tif != NULL
EXPR	132:6	132:13	8	tif != NULL
FIELD	132:6	132:6	9	tif
LEAF_NODE	132:6	132:6	10	tif
EQ_OPERATOR	132:10	132:10	9	!=
LEAF_NODE	132:10	132:10	10	!=
FIELD	132:13	132:13	9	NULL
LEAF_NODE	132:13	132:13	10	NULL
LEAF_NODE	132:17	132:17	7	)
STATEMENTS	133:8	154:2	7	
LEAF_NODE	133:8	133:8	8	{
STATEMENTS	134:3	153:3	8	
SELECTION	134:3	135:12	9	
KEYWORD	134:3	134:3	10	if
LEAF_NODE	134:3	134:3	11	if
LEAF_NODE	134:6	134:6	10	(
CONDITION	134:7	134:7	10	dirnum != - 1
EXPR	134:7	134:17	11	dirnum != - 1
FIELD	134:7	134:7	12	dirnum
LEAF_NODE	134:7	134:7	13	dirnum
EQ_OPERATOR	134:14	134:14	12	!=
LEAF_NODE	134:14	134:14	13	!=
UNARY_EXPR	134:17	134:18	12	- 1
UNARY_OPERATOR	134:17	134:17	13	-
LEAF_NODE	134:17	134:17	14	-
FIELD	134:18	134:18	13	1
LEAF_NODE	134:18	134:18	14	1
LEAF_NODE	134:19	134:19	10	)
STATEMENTS	135:12	138:3	10	
LEAF_NODE	135:12	135:12	11	{
STATEMENTS	136:4	136:4	11	
SELECTION	136:4	137:5	12	
KEYWORD	136:4	136:4	13	if
LEAF_NODE	136:4	136:4	14	if
LEAF_NODE	136:7	136:7	13	(
CONDITION	136:8	136:8	13	TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
EXPR	136:8	136:8	14	TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
FUNCTION_CALL	136:8	136:45	15	TIFFSetDirectory ( tif , ( tdir_t ) dirnum )
CALLEE	136:8	136:8	16	TIFFSetDirectory
LEAF_NODE	136:8	136:8	17	TIFFSetDirectory
LEAF_NODE	136:24	136:24	16	(
ARGUMENT	136:25	136:25	16	tif
FIELD	136:25	136:25	17	tif
LEAF_NODE	136:25	136:25	18	tif
LEAF_NODE	136:28	136:28	16	,
ARGUMENT	136:30	136:39	16	( tdir_t ) dirnum
LEAF_NODE	136:30	136:30	17	(
TYPE_NAME	136:31	136:31	17	tdir_t
LEAF_NODE	136:31	136:31	18	tdir_t
LEAF_NODE	136:37	136:37	17	)
FIELD	136:39	136:39	17	dirnum
LEAF_NODE	136:39	136:39	18	dirnum
LEAF_NODE	136:45	136:45	16	)
LEAF_NODE	136:46	136:46	13	)
STATEMENTS	137:5	137:5	13	
EXPR_STATEMENT	137:5	137:32	14	tiffinfo ( tif , order , flags ) ;
EXPR	137:5	137:5	15	tiffinfo ( tif , order , flags )
FUNCTION_CALL	137:5	137:31	16	tiffinfo ( tif , order , flags )
CALLEE	137:5	137:5	17	tiffinfo
LEAF_NODE	137:5	137:5	18	tiffinfo
LEAF_NODE	137:13	137:13	17	(
ARGUMENT	137:14	137:14	17	tif
FIELD	137:14	137:14	18	tif
LEAF_NODE	137:14	137:14	19	tif
LEAF_NODE	137:17	137:17	17	,
ARGUMENT	137:19	137:19	17	order
FIELD	137:19	137:19	18	order
LEAF_NODE	137:19	137:19	19	order
LEAF_NODE	137:24	137:24	17	,
ARGUMENT	137:26	137:26	17	flags
FIELD	137:26	137:26	18	flags
LEAF_NODE	137:26	137:26	19	flags
LEAF_NODE	137:31	137:31	17	)
LEAF_NODE	137:32	137:32	15	;
LEAF_NODE	138:3	138:3	11	}
SELECTION	138:5	138:10	9	
KEYWORD	138:5	138:5	10	else
LEAF_NODE	138:5	138:5	11	else
STATEMENTS	138:10	138:10	10	
SELECTION	138:10	138:27	11	
KEYWORD	138:10	138:10	12	if
LEAF_NODE	138:10	138:10	13	if
LEAF_NODE	138:13	138:13	12	(
CONDITION	138:14	138:14	12	diroff != 0
EXPR	138:14	138:24	13	diroff != 0
FIELD	138:14	138:14	14	diroff
LEAF_NODE	138:14	138:14	15	diroff
EQ_OPERATOR	138:21	138:21	14	!=
LEAF_NODE	138:21	138:21	15	!=
FIELD	138:24	138:24	14	0
LEAF_NODE	138:24	138:24	15	0
LEAF_NODE	138:25	138:25	12	)
STATEMENTS	138:27	141:3	12	
LEAF_NODE	138:27	138:27	13	{
STATEMENTS	139:4	139:4	13	
SELECTION	139:4	140:5	14	
KEYWORD	139:4	139:4	15	if
LEAF_NODE	139:4	139:4	16	if
LEAF_NODE	139:7	139:7	15	(
CONDITION	139:8	139:8	15	TIFFSetSubDirectory ( tif , diroff )
EXPR	139:8	139:8	16	TIFFSetSubDirectory ( tif , diroff )
FUNCTION_CALL	139:8	139:39	17	TIFFSetSubDirectory ( tif , diroff )
CALLEE	139:8	139:8	18	TIFFSetSubDirectory
LEAF_NODE	139:8	139:8	19	TIFFSetSubDirectory
LEAF_NODE	139:27	139:27	18	(
ARGUMENT	139:28	139:28	18	tif
FIELD	139:28	139:28	19	tif
LEAF_NODE	139:28	139:28	20	tif
LEAF_NODE	139:31	139:31	18	,
ARGUMENT	139:33	139:33	18	diroff
FIELD	139:33	139:33	19	diroff
LEAF_NODE	139:33	139:33	20	diroff
LEAF_NODE	139:39	139:39	18	)
LEAF_NODE	139:40	139:40	15	)
STATEMENTS	140:5	140:5	15	
EXPR_STATEMENT	140:5	140:32	16	tiffinfo ( tif , order , flags ) ;
EXPR	140:5	140:5	17	tiffinfo ( tif , order , flags )
FUNCTION_CALL	140:5	140:31	18	tiffinfo ( tif , order , flags )
CALLEE	140:5	140:5	19	tiffinfo
LEAF_NODE	140:5	140:5	20	tiffinfo
LEAF_NODE	140:13	140:13	19	(
ARGUMENT	140:14	140:14	19	tif
FIELD	140:14	140:14	20	tif
LEAF_NODE	140:14	140:14	21	tif
LEAF_NODE	140:17	140:17	19	,
ARGUMENT	140:19	140:19	19	order
FIELD	140:19	140:19	20	order
LEAF_NODE	140:19	140:19	21	order
LEAF_NODE	140:24	140:24	19	,
ARGUMENT	140:26	140:26	19	flags
FIELD	140:26	140:26	20	flags
LEAF_NODE	140:26	140:26	21	flags
LEAF_NODE	140:31	140:31	19	)
LEAF_NODE	140:32	140:32	17	;
LEAF_NODE	141:3	141:3	13	}
SELECTION	141:5	141:10	9	
KEYWORD	141:5	141:5	10	else
LEAF_NODE	141:5	141:5	11	else
STATEMENTS	141:10	152:3	10	
LEAF_NODE	141:10	141:10	11	{
STATEMENTS	142:4	151:36	11	
ITERATION	142:4	142:7	12	
KEYWORD	142:4	142:4	13	do
LEAF_NODE	142:4	142:4	14	do
LEAF_NODE	151:12	151:12	13	(
CONDITION	151:13	151:13	13	TIFFReadDirectory ( tif )
EXPR	151:13	151:13	14	TIFFReadDirectory ( tif )
FUNCTION_CALL	151:13	151:34	15	TIFFReadDirectory ( tif )
CALLEE	151:13	151:13	16	TIFFReadDirectory
LEAF_NODE	151:13	151:13	17	TIFFReadDirectory
LEAF_NODE	151:30	151:30	16	(
ARGUMENT	151:31	151:31	16	tif
FIELD	151:31	151:31	17	tif
LEAF_NODE	151:31	151:31	18	tif
LEAF_NODE	151:34	151:34	16	)
LEAF_NODE	151:35	151:35	13	)
STATEMENTS	142:7	151:4	13	
LEAF_NODE	142:7	142:7	14	{
STATEMENTS	143:5	146:5	14	
SIMPLE_DECL	143:5	143:18	15	toff_t offset ;
VAR_DECL	143:5	143:12	16	toff_t offset
TYPE	143:5	143:5	17	toff_t
TYPE_NAME	143:5	143:5	18	toff_t
LEAF_NODE	143:5	143:5	19	toff_t
NAME	143:12	143:12	17	offset
LEAF_NODE	143:12	143:12	18	offset
LEAF_NODE	143:18	143:18	16	;
EXPR_STATEMENT	145:5	145:32	15	tiffinfo ( tif , order , flags ) ;
EXPR	145:5	145:5	16	tiffinfo ( tif , order , flags )
FUNCTION_CALL	145:5	145:31	17	tiffinfo ( tif , order , flags )
CALLEE	145:5	145:5	18	tiffinfo
LEAF_NODE	145:5	145:5	19	tiffinfo
LEAF_NODE	145:13	145:13	18	(
ARGUMENT	145:14	145:14	18	tif
FIELD	145:14	145:14	19	tif
LEAF_NODE	145:14	145:14	20	tif
LEAF_NODE	145:17	145:17	18	,
ARGUMENT	145:19	145:19	18	order
FIELD	145:19	145:19	19	order
LEAF_NODE	145:19	145:19	20	order
LEAF_NODE	145:24	145:24	18	,
ARGUMENT	145:26	145:26	18	flags
FIELD	145:26	145:26	19	flags
LEAF_NODE	145:26	145:26	20	flags
LEAF_NODE	145:31	145:31	18	)
LEAF_NODE	145:32	145:32	16	;
SELECTION	146:5	147:18	15	
KEYWORD	146:5	146:5	16	if
LEAF_NODE	146:5	146:5	17	if
LEAF_NODE	146:8	146:8	16	(
CONDITION	146:9	146:9	16	TIFFGetField ( tif , TIFFTAG_EXIFIFD , & offset )
EXPR	146:9	146:9	17	TIFFGetField ( tif , TIFFTAG_EXIFIFD , & offset )
FUNCTION_CALL	146:9	147:15	18	TIFFGetField ( tif , TIFFTAG_EXIFIFD , & offset )
CALLEE	146:9	146:9	19	TIFFGetField
LEAF_NODE	146:9	146:9	20	TIFFGetField
LEAF_NODE	146:21	146:21	19	(
ARGUMENT	146:22	146:22	19	tif
FIELD	146:22	146:22	20	tif
LEAF_NODE	146:22	146:22	21	tif
LEAF_NODE	146:25	146:25	19	,
ARGUMENT	146:27	146:27	19	TIFFTAG_EXIFIFD
FIELD	146:27	146:27	20	TIFFTAG_EXIFIFD
LEAF_NODE	146:27	146:27	21	TIFFTAG_EXIFIFD
LEAF_NODE	146:42	146:42	19	,
ARGUMENT	147:8	147:8	19	& offset
UNARY_EXPR	147:8	147:9	20	& offset
UNARY_OPERATOR	147:8	147:8	21	&
LEAF_NODE	147:8	147:8	22	&
FIELD	147:9	147:9	21	offset
LEAF_NODE	147:9	147:9	22	offset
LEAF_NODE	147:15	147:15	19	)
LEAF_NODE	147:16	147:16	16	)
STATEMENTS	147:18	150:5	16	
LEAF_NODE	147:18	147:18	17	{
STATEMENTS	148:6	148:6	17	
SELECTION	148:6	149:7	18	
KEYWORD	148:6	148:6	19	if
LEAF_NODE	148:6	148:6	20	if
LEAF_NODE	148:9	148:9	19	(
CONDITION	148:10	148:10	19	TIFFReadEXIFDirectory ( tif , offset )
EXPR	148:10	148:10	20	TIFFReadEXIFDirectory ( tif , offset )
FUNCTION_CALL	148:10	148:43	21	TIFFReadEXIFDirectory ( tif , offset )
CALLEE	148:10	148:10	22	TIFFReadEXIFDirectory
LEAF_NODE	148:10	148:10	23	TIFFReadEXIFDirectory
LEAF_NODE	148:31	148:31	22	(
ARGUMENT	148:32	148:32	22	tif
FIELD	148:32	148:32	23	tif
LEAF_NODE	148:32	148:32	24	tif
LEAF_NODE	148:35	148:35	22	,
ARGUMENT	148:37	148:37	22	offset
FIELD	148:37	148:37	23	offset
LEAF_NODE	148:37	148:37	24	offset
LEAF_NODE	148:43	148:43	22	)
LEAF_NODE	148:44	148:44	19	)
STATEMENTS	149:7	149:7	19	
EXPR_STATEMENT	149:7	149:34	20	tiffinfo ( tif , order , flags ) ;
EXPR	149:7	149:7	21	tiffinfo ( tif , order , flags )
FUNCTION_CALL	149:7	149:33	22	tiffinfo ( tif , order , flags )
CALLEE	149:7	149:7	23	tiffinfo
LEAF_NODE	149:7	149:7	24	tiffinfo
LEAF_NODE	149:15	149:15	23	(
ARGUMENT	149:16	149:16	23	tif
FIELD	149:16	149:16	24	tif
LEAF_NODE	149:16	149:16	25	tif
LEAF_NODE	149:19	149:19	23	,
ARGUMENT	149:21	149:21	23	order
FIELD	149:21	149:21	24	order
LEAF_NODE	149:21	149:21	25	order
LEAF_NODE	149:26	149:26	23	,
ARGUMENT	149:28	149:28	23	flags
FIELD	149:28	149:28	24	flags
LEAF_NODE	149:28	149:28	25	flags
LEAF_NODE	149:33	149:33	23	)
LEAF_NODE	149:34	149:34	21	;
LEAF_NODE	150:5	150:5	17	}
LEAF_NODE	151:4	151:4	14	}
LEAF_NODE	151:36	151:36	12	;
LEAF_NODE	152:3	152:3	11	}
EXPR_STATEMENT	153:3	153:17	9	TIFFClose ( tif ) ;
EXPR	153:3	153:3	10	TIFFClose ( tif )
FUNCTION_CALL	153:3	153:16	11	TIFFClose ( tif )
CALLEE	153:3	153:3	12	TIFFClose
LEAF_NODE	153:3	153:3	13	TIFFClose
LEAF_NODE	153:12	153:12	12	(
ARGUMENT	153:13	153:13	12	tif
FIELD	153:13	153:13	13	tif
LEAF_NODE	153:13	153:13	14	tif
LEAF_NODE	153:16	153:16	12	)
LEAF_NODE	153:17	153:17	10	;
LEAF_NODE	154:2	154:2	8	}
LEAF_NODE	155:1	155:1	5	}
EXPR_STATEMENT	157:4	157:41	3	printf ( "\n<press any key to exit>\n" ) ;
EXPR	157:4	157:4	4	printf ( "\n<press any key to exit>\n" )
FUNCTION_CALL	157:4	157:40	5	printf ( "\n<press any key to exit>\n" )
CALLEE	157:4	157:4	6	printf
LEAF_NODE	157:4	157:4	7	printf
LEAF_NODE	157:10	157:10	6	(
ARGUMENT	157:11	157:11	6	"\n<press any key to exit>\n"
FIELD	157:11	157:11	7	"\n<press any key to exit>\n"
LEAF_NODE	157:11	157:11	8	"\n<press any key to exit>\n"
LEAF_NODE	157:40	157:40	6	)
LEAF_NODE	157:41	157:41	4	;
EXPR_STATEMENT	158:4	158:15	3	getc ( stdin ) ;
EXPR	158:4	158:4	4	getc ( stdin )
FUNCTION_CALL	158:4	158:14	5	getc ( stdin )
CALLEE	158:4	158:4	6	getc
LEAF_NODE	158:4	158:4	7	getc
LEAF_NODE	158:8	158:8	6	(
ARGUMENT	158:9	158:9	6	stdin
FIELD	158:9	158:9	7	stdin
LEAF_NODE	158:9	158:9	8	stdin
LEAF_NODE	158:14	158:14	6	)
LEAF_NODE	158:15	158:15	4	;
JUMP_STATEMENT	160:1	160:11	3	return ( 0 ) ;
KEYWORD	160:1	160:1	4	return
LEAF_NODE	160:1	160:1	5	return
DESTINATION	160:8	160:8	4	( 0 )
EXPR	160:8	160:10	5	( 0 )
LEAF_NODE	160:8	160:8	6	(
FIELD	160:9	160:9	6	0
LEAF_NODE	160:9	160:9	7	0
LEAF_NODE	160:10	160:10	6	)
LEAF_NODE	160:11	160:11	4	;
LEAF_NODE	161:0	161:0	2	}
FUNCTION_DEF	182:0	193:0	1	
RETURN_TYPE	182:0	182:7	2	static void
LEAF_NODE	182:0	182:0	3	static
TYPE_NAME	182:7	182:7	3	void
LEAF_NODE	182:7	182:7	4	void
FUNCTION_NAME	183:0	183:0	2	usage
LEAF_NODE	183:0	183:0	3	usage
PARAMETER_LIST	183:5	183:10	2	( void )
LEAF_NODE	183:5	183:5	3	(
PARAMETER_DECL	183:6	183:6	3	void
LEAF_NODE	183:6	183:6	4	void
LEAF_NODE	183:10	183:10	3	)
LEAF_NODE	184:0	184:0	2	{
STATEMENTS	186:1	192:1	2	
SIMPLE_DECL	186:1	186:6	3	int i ;
VAR_DECL	186:1	186:5	4	int i
TYPE	186:1	186:1	5	int
TYPE_NAME	186:1	186:1	6	int
LEAF_NODE	186:1	186:1	7	int
NAME	186:5	186:5	5	i
LEAF_NODE	186:5	186:5	6	i
LEAF_NODE	186:6	186:6	4	;
EXPR_STATEMENT	189:8	189:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	189:8	189:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	189:8	189:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	189:8	189:8	6	fprintf
LEAF_NODE	189:8	189:8	7	fprintf
LEAF_NODE	189:15	189:15	6	(
ARGUMENT	189:16	189:16	6	stderr
FIELD	189:16	189:16	7	stderr
LEAF_NODE	189:16	189:16	8	stderr
LEAF_NODE	189:22	189:22	6	,
ARGUMENT	189:24	189:24	6	"%s\n\n"
FIELD	189:24	189:24	7	"%s\n\n"
LEAF_NODE	189:24	189:24	8	"%s\n\n"
LEAF_NODE	189:32	189:32	6	,
ARGUMENT	189:34	189:34	6	TIFFGetVersion ( )
FUNCTION_CALL	189:34	189:49	7	TIFFGetVersion ( )
CALLEE	189:34	189:34	8	TIFFGetVersion
LEAF_NODE	189:34	189:34	9	TIFFGetVersion
LEAF_NODE	189:48	189:48	8	(
LEAF_NODE	189:49	189:49	8	)
LEAF_NODE	189:50	189:50	6	)
LEAF_NODE	189:51	189:51	4	;
ITERATION	190:1	191:2	3	
KEYWORD	190:1	190:1	4	for
LEAF_NODE	190:1	190:1	5	for
LEAF_NODE	190:5	190:5	4	(
FOR_INIT	190:6	190:11	4	i = 0 ;
EXPR	190:6	190:6	5	i = 0
ASSIGN	190:6	190:10	6	i = 0
LVAL	190:6	190:6	7	i
FIELD	190:6	190:6	8	i
LEAF_NODE	190:6	190:6	9	i
ASSIGN_OP	190:8	190:8	7	=
LEAF_NODE	190:8	190:8	8	=
RVAL	190:10	190:10	7	0
FIELD	190:10	190:10	8	0
LEAF_NODE	190:10	190:10	9	0
LEAF_NODE	190:11	190:11	5	;
CONDITION	190:13	190:13	4	stuff [ i ] != NULL
EXPR	190:13	190:25	5	stuff [ i ] != NULL
FIELD	190:13	190:20	6	stuff [ i ]
LEAF_NODE	190:13	190:13	7	stuff
LEAF_NODE	190:18	190:18	7	[
EXPR	190:19	190:19	7	i
FIELD	190:19	190:19	8	i
LEAF_NODE	190:19	190:19	9	i
LEAF_NODE	190:20	190:20	7	]
EQ_OPERATOR	190:22	190:22	6	!=
LEAF_NODE	190:22	190:22	7	!=
FIELD	190:25	190:25	6	NULL
LEAF_NODE	190:25	190:25	7	NULL
LEAF_NODE	190:29	190:29	4	;
FOR_EXPR	190:31	190:31	4	i ++
EXPR	190:31	190:31	5	i ++
FIELD	190:31	190:32	6	i ++
LEAF_NODE	190:31	190:31	7	i
LEAF_NODE	190:32	190:32	7	++
LEAF_NODE	190:34	190:34	4	)
STATEMENTS	191:2	191:2	4	
EXPR_STATEMENT	191:2	191:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	191:2	191:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	191:2	191:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	191:2	191:2	8	fprintf
LEAF_NODE	191:2	191:2	9	fprintf
LEAF_NODE	191:9	191:9	8	(
ARGUMENT	191:10	191:10	8	stderr
FIELD	191:10	191:10	9	stderr
LEAF_NODE	191:10	191:10	10	stderr
LEAF_NODE	191:16	191:16	8	,
ARGUMENT	191:18	191:18	8	"%s\n"
FIELD	191:18	191:18	9	"%s\n"
LEAF_NODE	191:18	191:18	10	"%s\n"
LEAF_NODE	191:24	191:24	8	,
ARGUMENT	191:26	191:26	8	stuff [ i ]
FIELD	191:26	191:33	9	stuff [ i ]
LEAF_NODE	191:26	191:26	10	stuff
LEAF_NODE	191:31	191:31	10	[
EXPR	191:32	191:32	10	i
FIELD	191:32	191:32	11	i
LEAF_NODE	191:32	191:32	12	i
LEAF_NODE	191:33	191:33	10	]
LEAF_NODE	191:34	191:34	8	)
LEAF_NODE	191:35	191:35	6	;
EXPR_STATEMENT	192:1	192:9	3	exit ( - 1 ) ;
EXPR	192:1	192:1	4	exit ( - 1 )
FUNCTION_CALL	192:1	192:8	5	exit ( - 1 )
CALLEE	192:1	192:1	6	exit
LEAF_NODE	192:1	192:1	7	exit
LEAF_NODE	192:5	192:5	6	(
ARGUMENT	192:6	192:6	6	- 1
UNARY_EXPR	192:6	192:7	7	- 1
UNARY_OPERATOR	192:6	192:6	8	-
LEAF_NODE	192:6	192:6	9	-
FIELD	192:7	192:7	8	1
LEAF_NODE	192:7	192:7	9	1
LEAF_NODE	192:8	192:8	6	)
LEAF_NODE	192:9	192:9	4	;
LEAF_NODE	193:0	193:0	2	}
FUNCTION_DEF	195:0	209:0	1	
RETURN_TYPE	195:0	195:7	2	static void
LEAF_NODE	195:0	195:0	3	static
TYPE_NAME	195:7	195:7	3	void
LEAF_NODE	195:7	195:7	4	void
FUNCTION_NAME	196:0	196:0	2	ShowStrip
LEAF_NODE	196:0	196:0	3	ShowStrip
PARAMETER_LIST	196:9	196:74	2	( tstrip_t strip , unsigned char * pp , uint32 nrow , tsize_t scanline )
LEAF_NODE	196:9	196:9	3	(
PARAMETER_DECL	196:10	196:19	3	tstrip_t strip
TYPE	196:10	196:10	4	tstrip_t
TYPE_NAME	196:10	196:10	5	tstrip_t
LEAF_NODE	196:10	196:10	6	tstrip_t
NAME	196:19	196:19	4	strip
LEAF_NODE	196:19	196:19	5	strip
LEAF_NODE	196:24	196:24	3	,
PARAMETER_DECL	196:26	196:41	3	unsigned char * pp
TYPE	196:26	196:39	4	unsigned char *
TYPE_NAME	196:26	196:35	5	unsigned char
LEAF_NODE	196:26	196:26	6	unsigned
LEAF_NODE	196:35	196:35	6	char
POINTER	196:39	196:39	5	*
LEAF_NODE	196:39	196:39	6	*
NAME	196:41	196:41	4	pp
LEAF_NODE	196:41	196:41	5	pp
LEAF_NODE	196:43	196:43	3	,
PARAMETER_DECL	196:45	196:52	3	uint32 nrow
TYPE	196:45	196:45	4	uint32
TYPE_NAME	196:45	196:45	5	uint32
LEAF_NODE	196:45	196:45	6	uint32
NAME	196:52	196:52	4	nrow
LEAF_NODE	196:52	196:52	5	nrow
LEAF_NODE	196:56	196:56	3	,
PARAMETER_DECL	196:58	196:66	3	tsize_t scanline
TYPE	196:58	196:58	4	tsize_t
TYPE_NAME	196:58	196:58	5	tsize_t
LEAF_NODE	196:58	196:58	6	tsize_t
NAME	196:66	196:66	4	scanline
LEAF_NODE	196:66	196:66	5	scanline
LEAF_NODE	196:74	196:74	3	)
LEAF_NODE	197:0	197:0	2	{
STATEMENTS	198:1	201:1	2	
LEAF_NODE	198:1	198:1	3	register
SIMPLE_DECL	198:10	198:20	3	tsize_t cc ;
VAR_DECL	198:10	198:18	4	tsize_t cc
TYPE	198:10	198:10	5	tsize_t
TYPE_NAME	198:10	198:10	6	tsize_t
LEAF_NODE	198:10	198:10	7	tsize_t
NAME	198:18	198:18	5	cc
LEAF_NODE	198:18	198:18	6	cc
LEAF_NODE	198:20	198:20	4	;
EXPR_STATEMENT	200:1	200:46	3	printf ( "Strip %lu:\n" , ( unsigned long ) strip ) ;
EXPR	200:1	200:1	4	printf ( "Strip %lu:\n" , ( unsigned long ) strip )
FUNCTION_CALL	200:1	200:45	5	printf ( "Strip %lu:\n" , ( unsigned long ) strip )
CALLEE	200:1	200:1	6	printf
LEAF_NODE	200:1	200:1	7	printf
LEAF_NODE	200:7	200:7	6	(
ARGUMENT	200:8	200:8	6	"Strip %lu:\n"
FIELD	200:8	200:8	7	"Strip %lu:\n"
LEAF_NODE	200:8	200:8	8	"Strip %lu:\n"
LEAF_NODE	200:22	200:22	6	,
ARGUMENT	200:24	200:40	6	( unsigned long ) strip
LEAF_NODE	200:24	200:24	7	(
TYPE_NAME	200:25	200:34	7	unsigned long
LEAF_NODE	200:25	200:25	8	unsigned
LEAF_NODE	200:34	200:34	8	long
LEAF_NODE	200:38	200:38	7	)
FIELD	200:40	200:40	7	strip
LEAF_NODE	200:40	200:40	8	strip
LEAF_NODE	200:45	200:45	6	)
LEAF_NODE	200:46	200:46	4	;
ITERATION	201:1	201:20	3	
KEYWORD	201:1	201:1	4	while
LEAF_NODE	201:1	201:1	5	while
LEAF_NODE	201:7	201:7	4	(
CONDITION	201:8	201:8	4	nrow -- > 0
EXPR	201:8	201:17	5	nrow -- > 0
FIELD	201:8	201:12	6	nrow --
LEAF_NODE	201:8	201:8	7	nrow
LEAF_NODE	201:12	201:12	7	--
REL_OPERATOR	201:15	201:15	6	>
LEAF_NODE	201:15	201:15	7	>
FIELD	201:17	201:17	6	0
LEAF_NODE	201:17	201:17	7	0
LEAF_NODE	201:18	201:18	4	)
STATEMENTS	201:20	208:1	4	
LEAF_NODE	201:20	201:20	5	{
STATEMENTS	202:2	207:2	5	
ITERATION	202:2	202:36	6	
KEYWORD	202:2	202:2	7	for
LEAF_NODE	202:2	202:2	8	for
LEAF_NODE	202:6	202:6	7	(
FOR_INIT	202:7	202:13	7	cc = 0 ;
EXPR	202:7	202:7	8	cc = 0
ASSIGN	202:7	202:12	9	cc = 0
LVAL	202:7	202:7	10	cc
FIELD	202:7	202:7	11	cc
LEAF_NODE	202:7	202:7	12	cc
ASSIGN_OP	202:10	202:10	10	=
LEAF_NODE	202:10	202:10	11	=
RVAL	202:12	202:12	10	0
FIELD	202:12	202:12	11	0
LEAF_NODE	202:12	202:12	12	0
LEAF_NODE	202:13	202:13	8	;
CONDITION	202:15	202:15	7	cc < scanline
EXPR	202:15	202:20	8	cc < scanline
FIELD	202:15	202:15	9	cc
LEAF_NODE	202:15	202:15	10	cc
REL_OPERATOR	202:18	202:18	9	<
LEAF_NODE	202:18	202:18	10	<
FIELD	202:20	202:20	9	scanline
LEAF_NODE	202:20	202:20	10	scanline
LEAF_NODE	202:28	202:28	7	;
FOR_EXPR	202:30	202:30	7	cc ++
EXPR	202:30	202:30	8	cc ++
FIELD	202:30	202:32	9	cc ++
LEAF_NODE	202:30	202:30	10	cc
LEAF_NODE	202:32	202:32	10	++
LEAF_NODE	202:34	202:34	7	)
STATEMENTS	202:36	206:2	7	
LEAF_NODE	202:36	202:36	8	{
STATEMENTS	203:3	204:3	8	
EXPR_STATEMENT	203:3	203:25	9	printf ( " %02x" , * pp ++ ) ;
EXPR	203:3	203:3	10	printf ( " %02x" , * pp ++ )
FUNCTION_CALL	203:3	203:24	11	printf ( " %02x" , * pp ++ )
CALLEE	203:3	203:3	12	printf
LEAF_NODE	203:3	203:3	13	printf
LEAF_NODE	203:9	203:9	12	(
ARGUMENT	203:10	203:10	12	" %02x"
FIELD	203:10	203:10	13	" %02x"
LEAF_NODE	203:10	203:10	14	" %02x"
LEAF_NODE	203:17	203:17	12	,
ARGUMENT	203:19	203:19	12	* pp ++
UNARY_EXPR	203:19	203:20	13	* pp ++
UNARY_OPERATOR	203:19	203:19	14	*
LEAF_NODE	203:19	203:19	15	*
FIELD	203:20	203:22	14	pp ++
LEAF_NODE	203:20	203:20	15	pp
LEAF_NODE	203:22	203:22	15	++
LEAF_NODE	203:24	203:24	12	)
LEAF_NODE	203:25	203:25	10	;
SELECTION	204:3	205:4	9	
KEYWORD	204:3	204:3	10	if
LEAF_NODE	204:3	204:3	11	if
LEAF_NODE	204:6	204:6	10	(
CONDITION	204:7	204:7	10	( ( cc + 1 ) % 24 ) == 0
EXPR	204:7	204:24	11	( ( cc + 1 ) % 24 ) == 0
LEAF_NODE	204:7	204:7	12	(
LEAF_NODE	204:8	204:8	12	(
FIELD	204:9	204:9	12	cc
LEAF_NODE	204:9	204:9	13	cc
LEAF_NODE	204:11	204:11	12	+
FIELD	204:12	204:12	12	1
LEAF_NODE	204:12	204:12	13	1
LEAF_NODE	204:13	204:13	12	)
LEAF_NODE	204:15	204:15	12	%
FIELD	204:17	204:17	12	24
LEAF_NODE	204:17	204:17	13	24
LEAF_NODE	204:19	204:19	12	)
EQ_OPERATOR	204:21	204:21	12	==
LEAF_NODE	204:21	204:21	13	==
FIELD	204:24	204:24	12	0
LEAF_NODE	204:24	204:24	13	0
LEAF_NODE	204:25	204:25	10	)
STATEMENTS	205:4	205:4	10	
EXPR_STATEMENT	205:4	205:17	11	putchar ( '\n' ) ;
EXPR	205:4	205:4	12	putchar ( '\n' )
FUNCTION_CALL	205:4	205:16	13	putchar ( '\n' )
CALLEE	205:4	205:4	14	putchar
LEAF_NODE	205:4	205:4	15	putchar
LEAF_NODE	205:11	205:11	14	(
ARGUMENT	205:12	205:12	14	'\n'
FIELD	205:12	205:12	15	'\n'
LEAF_NODE	205:12	205:12	16	'\n'
LEAF_NODE	205:16	205:16	14	)
LEAF_NODE	205:17	205:17	12	;
LEAF_NODE	206:2	206:2	8	}
EXPR_STATEMENT	207:2	207:15	6	putchar ( '\n' ) ;
EXPR	207:2	207:2	7	putchar ( '\n' )
FUNCTION_CALL	207:2	207:14	8	putchar ( '\n' )
CALLEE	207:2	207:2	9	putchar
LEAF_NODE	207:2	207:2	10	putchar
LEAF_NODE	207:9	207:9	9	(
ARGUMENT	207:10	207:10	9	'\n'
FIELD	207:10	207:10	10	'\n'
LEAF_NODE	207:10	207:10	11	'\n'
LEAF_NODE	207:14	207:14	9	)
LEAF_NODE	207:15	207:15	7	;
LEAF_NODE	208:1	208:1	5	}
LEAF_NODE	209:0	209:0	2	}
FUNCTION_DEF	211:0	236:0	1	
RETURN_TYPE	211:0	211:0	2	void
TYPE_NAME	211:0	211:0	3	void
LEAF_NODE	211:0	211:0	4	void
FUNCTION_NAME	212:0	212:0	2	TIFFReadContigStripData
LEAF_NODE	212:0	212:0	3	TIFFReadContigStripData
PARAMETER_LIST	212:23	212:33	2	( TIFF * tif )
LEAF_NODE	212:23	212:23	3	(
PARAMETER_DECL	212:24	212:30	3	TIFF * tif
TYPE	212:24	212:28	4	TIFF *
TYPE_NAME	212:24	212:24	5	TIFF
LEAF_NODE	212:24	212:24	6	TIFF
POINTER	212:28	212:28	5	*
LEAF_NODE	212:28	212:28	6	*
NAME	212:30	212:30	4	tif
LEAF_NODE	212:30	212:30	5	tif
LEAF_NODE	212:33	212:33	3	)
LEAF_NODE	213:0	213:0	2	{
STATEMENTS	214:1	218:1	2	
SIMPLE_DECL	214:1	214:19	3	unsigned char * buf ;
VAR_DECL	214:1	214:16	4	unsigned char * buf
TYPE	214:1	214:15	5	unsigned char *
TYPE_NAME	214:1	214:10	6	unsigned char
LEAF_NODE	214:1	214:1	7	unsigned
LEAF_NODE	214:10	214:10	7	char
POINTER	214:15	214:15	6	*
LEAF_NODE	214:15	214:15	7	*
NAME	214:16	214:16	5	buf
LEAF_NODE	214:16	214:16	6	buf
LEAF_NODE	214:19	214:19	4	;
SIMPLE_DECL	215:1	215:41	3	tsize_t scanline ; scanline = TIFFScanlineSize ( tif ) ;
VAR_DECL	215:1	215:9	4	tsize_t scanline ; scanline = TIFFScanlineSize ( tif )
TYPE	215:1	215:1	5	tsize_t
TYPE_NAME	215:1	215:1	6	tsize_t
LEAF_NODE	215:1	215:1	7	tsize_t
NAME	215:9	215:9	5	scanline
LEAF_NODE	215:9	215:9	6	scanline
LEAF_NODE	0:0	0:0	5	;
INIT	215:9	215:9	5	scanline = TIFFScanlineSize ( tif )
ASSIGN	215:9	215:20	6	scanline = TIFFScanlineSize ( tif )
LVAL	215:9	215:9	7	scanline
NAME	215:9	215:9	8	scanline
LEAF_NODE	215:9	215:9	9	scanline
ASSIGN_OP	215:18	215:18	7	=
LEAF_NODE	215:18	215:18	8	=
RVAL	215:20	215:20	7	TIFFScanlineSize ( tif )
FUNCTION_CALL	215:20	215:40	8	TIFFScanlineSize ( tif )
CALLEE	215:20	215:20	9	TIFFScanlineSize
LEAF_NODE	215:20	215:20	10	TIFFScanlineSize
LEAF_NODE	215:36	215:36	9	(
ARGUMENT	215:37	215:37	9	tif
FIELD	215:37	215:37	10	tif
LEAF_NODE	215:37	215:37	11	tif
LEAF_NODE	215:40	215:40	9	)
LEAF_NODE	215:41	215:41	4	;
EXPR_STATEMENT	217:1	217:55	3	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) ) ;
EXPR	217:1	217:1	4	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
ASSIGN	217:1	217:7	5	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
LVAL	217:1	217:1	6	buf
FIELD	217:1	217:1	7	buf
LEAF_NODE	217:1	217:1	8	buf
ASSIGN_OP	217:5	217:5	6	=
LEAF_NODE	217:5	217:5	7	=
RVAL	217:7	217:24	6	( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
LEAF_NODE	217:7	217:7	7	(
TYPE_NAME	217:8	217:17	7	unsigned char
LEAF_NODE	217:8	217:8	8	unsigned
LEAF_NODE	217:17	217:17	8	char
LEAF_NODE	217:22	217:22	7	*
LEAF_NODE	217:23	217:23	7	)
FUNCTION_CALL	217:24	217:54	7	_TIFFmalloc ( TIFFStripSize ( tif ) )
CALLEE	217:24	217:24	8	_TIFFmalloc
LEAF_NODE	217:24	217:24	9	_TIFFmalloc
LEAF_NODE	217:35	217:35	8	(
ARGUMENT	217:36	217:36	8	TIFFStripSize ( tif )
FUNCTION_CALL	217:36	217:53	9	TIFFStripSize ( tif )
CALLEE	217:36	217:36	10	TIFFStripSize
LEAF_NODE	217:36	217:36	11	TIFFStripSize
LEAF_NODE	217:49	217:49	10	(
ARGUMENT	217:50	217:50	10	tif
FIELD	217:50	217:50	11	tif
LEAF_NODE	217:50	217:50	12	tif
LEAF_NODE	217:53	217:53	10	)
LEAF_NODE	217:54	217:54	8	)
LEAF_NODE	217:55	217:55	4	;
SELECTION	218:1	218:10	3	
KEYWORD	218:1	218:1	4	if
LEAF_NODE	218:1	218:1	5	if
LEAF_NODE	218:4	218:4	4	(
CONDITION	218:5	218:5	4	buf
EXPR	218:5	218:5	5	buf
FIELD	218:5	218:5	6	buf
LEAF_NODE	218:5	218:5	7	buf
LEAF_NODE	218:8	218:8	4	)
STATEMENTS	218:10	235:1	4	
LEAF_NODE	218:10	218:10	5	{
STATEMENTS	219:2	234:2	5	
SIMPLE_DECL	219:2	219:15	6	uint32 row , uint32 h ;
INIT_DECL_LIST	219:2	219:2	7	uint32 row , uint32 h
VAR_DECL	219:2	219:9	8	uint32 row
TYPE	219:2	219:2	9	uint32
TYPE_NAME	219:2	219:2	10	uint32
LEAF_NODE	219:2	219:2	11	uint32
NAME	219:9	219:9	9	row
LEAF_NODE	219:9	219:9	10	row
LEAF_NODE	219:12	219:12	8	,
VAR_DECL	219:2	219:14	8	uint32 h
TYPE	219:2	219:2	9	uint32
TYPE_NAME	219:2	219:2	10	uint32
LEAF_NODE	219:2	219:2	11	uint32
NAME	219:14	219:14	9	h
LEAF_NODE	219:14	219:14	10	h
LEAF_NODE	219:15	219:15	7	;
SIMPLE_DECL	220:2	220:34	6	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	220:2	220:9	7	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	220:2	220:2	8	uint32
TYPE_NAME	220:2	220:2	9	uint32
LEAF_NODE	220:2	220:2	10	uint32
NAME	220:9	220:9	8	rowsperstrip
LEAF_NODE	220:9	220:9	9	rowsperstrip
LEAF_NODE	0:0	0:0	8	;
INIT	220:9	220:9	8	rowsperstrip = ( uint32 ) - 1
ASSIGN	220:9	220:24	9	rowsperstrip = ( uint32 ) - 1
LVAL	220:9	220:9	10	rowsperstrip
NAME	220:9	220:9	11	rowsperstrip
LEAF_NODE	220:9	220:9	12	rowsperstrip
ASSIGN_OP	220:22	220:22	10	=
LEAF_NODE	220:22	220:22	11	=
RVAL	220:24	220:32	10	( uint32 ) - 1
LEAF_NODE	220:24	220:24	11	(
TYPE_NAME	220:25	220:25	11	uint32
LEAF_NODE	220:25	220:25	12	uint32
LEAF_NODE	220:31	220:31	11	)
UNARY_EXPR	220:32	220:33	11	- 1
UNARY_OPERATOR	220:32	220:32	12	-
LEAF_NODE	220:32	220:32	13	-
FIELD	220:33	220:33	12	1
LEAF_NODE	220:33	220:33	13	1
LEAF_NODE	220:34	220:34	7	;
EXPR_STATEMENT	222:2	222:44	6	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	222:2	222:2	7	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	222:2	222:43	8	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
CALLEE	222:2	222:2	9	TIFFGetField
LEAF_NODE	222:2	222:2	10	TIFFGetField
LEAF_NODE	222:14	222:14	9	(
ARGUMENT	222:15	222:15	9	tif
FIELD	222:15	222:15	10	tif
LEAF_NODE	222:15	222:15	11	tif
LEAF_NODE	222:18	222:18	9	,
ARGUMENT	222:20	222:20	9	TIFFTAG_IMAGELENGTH
FIELD	222:20	222:20	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	222:20	222:20	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	222:39	222:39	9	,
ARGUMENT	222:41	222:41	9	& h
UNARY_EXPR	222:41	222:42	10	& h
UNARY_OPERATOR	222:41	222:41	11	&
LEAF_NODE	222:41	222:41	12	&
FIELD	222:42	222:42	11	h
LEAF_NODE	222:42	222:42	12	h
LEAF_NODE	222:43	222:43	9	)
LEAF_NODE	222:44	222:44	7	;
EXPR_STATEMENT	223:2	223:56	6	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	223:2	223:2	7	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
FUNCTION_CALL	223:2	223:55	8	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	223:2	223:2	9	TIFFGetField
LEAF_NODE	223:2	223:2	10	TIFFGetField
LEAF_NODE	223:14	223:14	9	(
ARGUMENT	223:15	223:15	9	tif
FIELD	223:15	223:15	10	tif
LEAF_NODE	223:15	223:15	11	tif
LEAF_NODE	223:18	223:18	9	,
ARGUMENT	223:20	223:20	9	TIFFTAG_ROWSPERSTRIP
FIELD	223:20	223:20	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	223:20	223:20	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	223:40	223:40	9	,
ARGUMENT	223:42	223:42	9	& rowsperstrip
UNARY_EXPR	223:42	223:43	10	& rowsperstrip
UNARY_OPERATOR	223:42	223:42	11	&
LEAF_NODE	223:42	223:42	12	&
FIELD	223:43	223:43	11	rowsperstrip
LEAF_NODE	223:43	223:43	12	rowsperstrip
LEAF_NODE	223:55	223:55	9	)
LEAF_NODE	223:56	223:56	7	;
ITERATION	224:2	224:46	6	
KEYWORD	224:2	224:2	7	for
LEAF_NODE	224:2	224:2	8	for
LEAF_NODE	224:6	224:6	7	(
FOR_INIT	224:7	224:14	7	row = 0 ;
EXPR	224:7	224:7	8	row = 0
ASSIGN	224:7	224:13	9	row = 0
LVAL	224:7	224:7	10	row
FIELD	224:7	224:7	11	row
LEAF_NODE	224:7	224:7	12	row
ASSIGN_OP	224:11	224:11	10	=
LEAF_NODE	224:11	224:11	11	=
RVAL	224:13	224:13	10	0
FIELD	224:13	224:13	11	0
LEAF_NODE	224:13	224:13	12	0
LEAF_NODE	224:14	224:14	8	;
CONDITION	224:16	224:16	7	row < h
EXPR	224:16	224:22	8	row < h
FIELD	224:16	224:16	9	row
LEAF_NODE	224:16	224:16	10	row
REL_OPERATOR	224:20	224:20	9	<
LEAF_NODE	224:20	224:20	10	<
FIELD	224:22	224:22	9	h
LEAF_NODE	224:22	224:22	10	h
LEAF_NODE	224:23	224:23	7	;
FOR_EXPR	224:25	224:25	7	row += rowsperstrip
EXPR	224:25	224:25	8	row += rowsperstrip
ASSIGN	224:25	224:32	9	row += rowsperstrip
LVAL	224:25	224:25	10	row
FIELD	224:25	224:25	11	row
LEAF_NODE	224:25	224:25	12	row
ASSIGN_OP	224:29	224:29	10	+=
LEAF_NODE	224:29	224:29	11	+=
RVAL	224:32	224:32	10	rowsperstrip
FIELD	224:32	224:32	11	rowsperstrip
LEAF_NODE	224:32	224:32	12	rowsperstrip
LEAF_NODE	224:44	224:44	7	)
STATEMENTS	224:46	233:2	7	
LEAF_NODE	224:46	224:46	8	{
STATEMENTS	225:3	231:5	8	
SIMPLE_DECL	225:3	226:28	9	uint32 nrow ; nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip ) ;
VAR_DECL	225:3	225:10	10	uint32 nrow ; nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
TYPE	225:3	225:3	11	uint32
TYPE_NAME	225:3	225:3	12	uint32
LEAF_NODE	225:3	225:3	13	uint32
NAME	225:10	225:10	11	nrow
LEAF_NODE	225:10	225:10	12	nrow
LEAF_NODE	0:0	0:0	11	;
INIT	225:10	225:10	11	nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
ASSIGN	225:10	225:17	12	nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
LVAL	225:10	225:10	13	nrow
NAME	225:10	225:10	14	nrow
LEAF_NODE	225:10	225:10	15	nrow
ASSIGN_OP	225:15	225:15	13	=
LEAF_NODE	225:15	225:15	14	=
RVAL	225:17	226:27	13	( row + rowsperstrip > h ? h - row : rowsperstrip )
LEAF_NODE	225:17	225:17	14	(
COND_EXPR	225:18	226:15	14	row + rowsperstrip > h ? h - row : rowsperstrip
CONDITION	225:18	225:37	15	row + rowsperstrip > h
FIELD	225:18	225:18	16	row
LEAF_NODE	225:18	225:18	17	row
LEAF_NODE	225:21	225:21	16	+
FIELD	225:22	225:22	16	rowsperstrip
LEAF_NODE	225:22	225:22	17	rowsperstrip
REL_OPERATOR	225:35	225:35	16	>
LEAF_NODE	225:35	225:35	17	>
FIELD	225:37	225:37	16	h
LEAF_NODE	225:37	225:37	17	h
LEAF_NODE	225:39	225:39	15	?
EXPR	226:7	226:9	15	h - row
FIELD	226:7	226:7	16	h
LEAF_NODE	226:7	226:7	17	h
LEAF_NODE	226:8	226:8	16	-
FIELD	226:9	226:9	16	row
LEAF_NODE	226:9	226:9	17	row
LEAF_NODE	226:13	226:13	15	:
FIELD	226:15	226:15	15	rowsperstrip
LEAF_NODE	226:15	226:15	16	rowsperstrip
LEAF_NODE	226:27	226:27	14	)
LEAF_NODE	226:28	226:28	10	;
SIMPLE_DECL	227:3	227:49	9	tstrip_t strip ; strip = TIFFComputeStrip ( tif , row , 0 ) ;
VAR_DECL	227:3	227:12	10	tstrip_t strip ; strip = TIFFComputeStrip ( tif , row , 0 )
TYPE	227:3	227:3	11	tstrip_t
TYPE_NAME	227:3	227:3	12	tstrip_t
LEAF_NODE	227:3	227:3	13	tstrip_t
NAME	227:12	227:12	11	strip
LEAF_NODE	227:12	227:12	12	strip
LEAF_NODE	0:0	0:0	11	;
INIT	227:12	227:12	11	strip = TIFFComputeStrip ( tif , row , 0 )
ASSIGN	227:12	227:20	12	strip = TIFFComputeStrip ( tif , row , 0 )
LVAL	227:12	227:12	13	strip
NAME	227:12	227:12	14	strip
LEAF_NODE	227:12	227:12	15	strip
ASSIGN_OP	227:18	227:18	13	=
LEAF_NODE	227:18	227:18	14	=
RVAL	227:20	227:20	13	TIFFComputeStrip ( tif , row , 0 )
FUNCTION_CALL	227:20	227:48	14	TIFFComputeStrip ( tif , row , 0 )
CALLEE	227:20	227:20	15	TIFFComputeStrip
LEAF_NODE	227:20	227:20	16	TIFFComputeStrip
LEAF_NODE	227:36	227:36	15	(
ARGUMENT	227:37	227:37	15	tif
FIELD	227:37	227:37	16	tif
LEAF_NODE	227:37	227:37	17	tif
LEAF_NODE	227:40	227:40	15	,
ARGUMENT	227:42	227:42	15	row
FIELD	227:42	227:42	16	row
LEAF_NODE	227:42	227:42	17	row
LEAF_NODE	227:45	227:45	15	,
ARGUMENT	227:47	227:47	15	0
FIELD	227:47	227:47	16	0
LEAF_NODE	227:47	227:47	17	0
LEAF_NODE	227:48	227:48	15	)
LEAF_NODE	227:49	227:49	10	;
SELECTION	228:3	228:65	9	
KEYWORD	228:3	228:3	10	if
LEAF_NODE	228:3	228:3	11	if
LEAF_NODE	228:6	228:6	10	(
CONDITION	228:7	228:7	10	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline ) < 0
EXPR	228:7	228:62	11	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline ) < 0
FUNCTION_CALL	228:7	228:58	12	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline )
CALLEE	228:7	228:7	13	TIFFReadEncodedStrip
LEAF_NODE	228:7	228:7	14	TIFFReadEncodedStrip
LEAF_NODE	228:27	228:27	13	(
ARGUMENT	228:28	228:28	13	tif
FIELD	228:28	228:28	14	tif
LEAF_NODE	228:28	228:28	15	tif
LEAF_NODE	228:31	228:31	13	,
ARGUMENT	228:33	228:33	13	strip
FIELD	228:33	228:33	14	strip
LEAF_NODE	228:33	228:33	15	strip
LEAF_NODE	228:38	228:38	13	,
ARGUMENT	228:40	228:40	13	buf
FIELD	228:40	228:40	14	buf
LEAF_NODE	228:40	228:40	15	buf
LEAF_NODE	228:43	228:43	13	,
ARGUMENT	228:45	228:50	13	nrow * scanline
FIELD	228:45	228:45	14	nrow
LEAF_NODE	228:45	228:45	15	nrow
LEAF_NODE	228:49	228:49	14	*
FIELD	228:50	228:50	14	scanline
LEAF_NODE	228:50	228:50	15	scanline
LEAF_NODE	228:58	228:58	13	)
REL_OPERATOR	228:60	228:60	12	<
LEAF_NODE	228:60	228:60	13	<
FIELD	228:62	228:62	12	0
LEAF_NODE	228:62	228:62	13	0
LEAF_NODE	228:63	228:63	10	)
STATEMENTS	228:65	231:3	10	
LEAF_NODE	228:65	228:65	11	{
STATEMENTS	229:4	229:4	11	
SELECTION	229:4	230:5	12	
KEYWORD	229:4	229:4	13	if
LEAF_NODE	229:4	229:4	14	if
LEAF_NODE	229:7	229:7	13	(
CONDITION	229:8	229:8	13	stoponerr
EXPR	229:8	229:8	14	stoponerr
FIELD	229:8	229:8	15	stoponerr
LEAF_NODE	229:8	229:8	16	stoponerr
LEAF_NODE	229:17	229:17	13	)
STATEMENTS	230:5	230:5	13	
JUMP_STATEMENT	230:5	230:10	14	break DESTINATION ;
KEYWORD	230:5	230:5	15	break
LEAF_NODE	230:5	230:5	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	230:10	230:10	15	;
LEAF_NODE	231:3	231:3	11	}
SELECTION	231:5	231:10	9	
KEYWORD	231:5	231:5	10	else
LEAF_NODE	231:5	231:5	11	else
STATEMENTS	231:10	231:10	10	
SELECTION	231:10	232:4	11	
KEYWORD	231:10	231:10	12	if
LEAF_NODE	231:10	231:10	13	if
LEAF_NODE	231:13	231:13	12	(
CONDITION	231:14	231:14	12	showdata
EXPR	231:14	231:14	13	showdata
FIELD	231:14	231:14	14	showdata
LEAF_NODE	231:14	231:14	15	showdata
LEAF_NODE	231:22	231:22	12	)
STATEMENTS	232:4	232:4	12	
EXPR_STATEMENT	232:4	232:41	13	ShowStrip ( strip , buf , nrow , scanline ) ;
EXPR	232:4	232:4	14	ShowStrip ( strip , buf , nrow , scanline )
FUNCTION_CALL	232:4	232:40	15	ShowStrip ( strip , buf , nrow , scanline )
CALLEE	232:4	232:4	16	ShowStrip
LEAF_NODE	232:4	232:4	17	ShowStrip
LEAF_NODE	232:13	232:13	16	(
ARGUMENT	232:14	232:14	16	strip
FIELD	232:14	232:14	17	strip
LEAF_NODE	232:14	232:14	18	strip
LEAF_NODE	232:19	232:19	16	,
ARGUMENT	232:21	232:21	16	buf
FIELD	232:21	232:21	17	buf
LEAF_NODE	232:21	232:21	18	buf
LEAF_NODE	232:24	232:24	16	,
ARGUMENT	232:26	232:26	16	nrow
FIELD	232:26	232:26	17	nrow
LEAF_NODE	232:26	232:26	18	nrow
LEAF_NODE	232:30	232:30	16	,
ARGUMENT	232:32	232:32	16	scanline
FIELD	232:32	232:32	17	scanline
LEAF_NODE	232:32	232:32	18	scanline
LEAF_NODE	232:40	232:40	16	)
LEAF_NODE	232:41	232:41	14	;
LEAF_NODE	233:2	233:2	8	}
EXPR_STATEMENT	234:2	234:16	6	_TIFFfree ( buf ) ;
EXPR	234:2	234:2	7	_TIFFfree ( buf )
FUNCTION_CALL	234:2	234:15	8	_TIFFfree ( buf )
CALLEE	234:2	234:2	9	_TIFFfree
LEAF_NODE	234:2	234:2	10	_TIFFfree
LEAF_NODE	234:11	234:11	9	(
ARGUMENT	234:12	234:12	9	buf
FIELD	234:12	234:12	10	buf
LEAF_NODE	234:12	234:12	11	buf
LEAF_NODE	234:15	234:15	9	)
LEAF_NODE	234:16	234:16	7	;
LEAF_NODE	235:1	235:1	5	}
LEAF_NODE	236:0	236:0	2	}
FUNCTION_DEF	238:0	267:0	1	
RETURN_TYPE	238:0	238:0	2	void
TYPE_NAME	238:0	238:0	3	void
LEAF_NODE	238:0	238:0	4	void
FUNCTION_NAME	239:0	239:0	2	TIFFReadSeparateStripData
LEAF_NODE	239:0	239:0	3	TIFFReadSeparateStripData
PARAMETER_LIST	239:25	239:35	2	( TIFF * tif )
LEAF_NODE	239:25	239:25	3	(
PARAMETER_DECL	239:26	239:32	3	TIFF * tif
TYPE	239:26	239:30	4	TIFF *
TYPE_NAME	239:26	239:26	5	TIFF
LEAF_NODE	239:26	239:26	6	TIFF
POINTER	239:30	239:30	5	*
LEAF_NODE	239:30	239:30	6	*
NAME	239:32	239:32	4	tif
LEAF_NODE	239:32	239:32	5	tif
LEAF_NODE	239:35	239:35	3	)
LEAF_NODE	240:0	240:0	2	{
STATEMENTS	241:1	245:1	2	
SIMPLE_DECL	241:1	241:19	3	unsigned char * buf ;
VAR_DECL	241:1	241:16	4	unsigned char * buf
TYPE	241:1	241:15	5	unsigned char *
TYPE_NAME	241:1	241:10	6	unsigned char
LEAF_NODE	241:1	241:1	7	unsigned
LEAF_NODE	241:10	241:10	7	char
POINTER	241:15	241:15	6	*
LEAF_NODE	241:15	241:15	7	*
NAME	241:16	241:16	5	buf
LEAF_NODE	241:16	241:16	6	buf
LEAF_NODE	241:19	241:19	4	;
SIMPLE_DECL	242:1	242:41	3	tsize_t scanline ; scanline = TIFFScanlineSize ( tif ) ;
VAR_DECL	242:1	242:9	4	tsize_t scanline ; scanline = TIFFScanlineSize ( tif )
TYPE	242:1	242:1	5	tsize_t
TYPE_NAME	242:1	242:1	6	tsize_t
LEAF_NODE	242:1	242:1	7	tsize_t
NAME	242:9	242:9	5	scanline
LEAF_NODE	242:9	242:9	6	scanline
LEAF_NODE	0:0	0:0	5	;
INIT	242:9	242:9	5	scanline = TIFFScanlineSize ( tif )
ASSIGN	242:9	242:20	6	scanline = TIFFScanlineSize ( tif )
LVAL	242:9	242:9	7	scanline
NAME	242:9	242:9	8	scanline
LEAF_NODE	242:9	242:9	9	scanline
ASSIGN_OP	242:18	242:18	7	=
LEAF_NODE	242:18	242:18	8	=
RVAL	242:20	242:20	7	TIFFScanlineSize ( tif )
FUNCTION_CALL	242:20	242:40	8	TIFFScanlineSize ( tif )
CALLEE	242:20	242:20	9	TIFFScanlineSize
LEAF_NODE	242:20	242:20	10	TIFFScanlineSize
LEAF_NODE	242:36	242:36	9	(
ARGUMENT	242:37	242:37	9	tif
FIELD	242:37	242:37	10	tif
LEAF_NODE	242:37	242:37	11	tif
LEAF_NODE	242:40	242:40	9	)
LEAF_NODE	242:41	242:41	4	;
EXPR_STATEMENT	244:1	244:55	3	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) ) ;
EXPR	244:1	244:1	4	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
ASSIGN	244:1	244:7	5	buf = ( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
LVAL	244:1	244:1	6	buf
FIELD	244:1	244:1	7	buf
LEAF_NODE	244:1	244:1	8	buf
ASSIGN_OP	244:5	244:5	6	=
LEAF_NODE	244:5	244:5	7	=
RVAL	244:7	244:24	6	( unsigned char * ) _TIFFmalloc ( TIFFStripSize ( tif ) )
LEAF_NODE	244:7	244:7	7	(
TYPE_NAME	244:8	244:17	7	unsigned char
LEAF_NODE	244:8	244:8	8	unsigned
LEAF_NODE	244:17	244:17	8	char
LEAF_NODE	244:22	244:22	7	*
LEAF_NODE	244:23	244:23	7	)
FUNCTION_CALL	244:24	244:54	7	_TIFFmalloc ( TIFFStripSize ( tif ) )
CALLEE	244:24	244:24	8	_TIFFmalloc
LEAF_NODE	244:24	244:24	9	_TIFFmalloc
LEAF_NODE	244:35	244:35	8	(
ARGUMENT	244:36	244:36	8	TIFFStripSize ( tif )
FUNCTION_CALL	244:36	244:53	9	TIFFStripSize ( tif )
CALLEE	244:36	244:36	10	TIFFStripSize
LEAF_NODE	244:36	244:36	11	TIFFStripSize
LEAF_NODE	244:49	244:49	10	(
ARGUMENT	244:50	244:50	10	tif
FIELD	244:50	244:50	11	tif
LEAF_NODE	244:50	244:50	12	tif
LEAF_NODE	244:53	244:53	10	)
LEAF_NODE	244:54	244:54	8	)
LEAF_NODE	244:55	244:55	4	;
SELECTION	245:1	245:10	3	
KEYWORD	245:1	245:1	4	if
LEAF_NODE	245:1	245:1	5	if
LEAF_NODE	245:4	245:4	4	(
CONDITION	245:5	245:5	4	buf
EXPR	245:5	245:5	5	buf
FIELD	245:5	245:5	6	buf
LEAF_NODE	245:5	245:5	7	buf
LEAF_NODE	245:8	245:8	4	)
STATEMENTS	245:10	266:1	4	
LEAF_NODE	245:10	245:10	5	{
STATEMENTS	246:2	265:2	5	
SIMPLE_DECL	246:2	246:15	6	uint32 row , uint32 h ;
INIT_DECL_LIST	246:2	246:2	7	uint32 row , uint32 h
VAR_DECL	246:2	246:9	8	uint32 row
TYPE	246:2	246:2	9	uint32
TYPE_NAME	246:2	246:2	10	uint32
LEAF_NODE	246:2	246:2	11	uint32
NAME	246:9	246:9	9	row
LEAF_NODE	246:9	246:9	10	row
LEAF_NODE	246:12	246:12	8	,
VAR_DECL	246:2	246:14	8	uint32 h
TYPE	246:2	246:2	9	uint32
TYPE_NAME	246:2	246:2	10	uint32
LEAF_NODE	246:2	246:2	11	uint32
NAME	246:14	246:14	9	h
LEAF_NODE	246:14	246:14	10	h
LEAF_NODE	246:15	246:15	7	;
SIMPLE_DECL	247:2	247:34	6	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	247:2	247:9	7	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	247:2	247:2	8	uint32
TYPE_NAME	247:2	247:2	9	uint32
LEAF_NODE	247:2	247:2	10	uint32
NAME	247:9	247:9	8	rowsperstrip
LEAF_NODE	247:9	247:9	9	rowsperstrip
LEAF_NODE	0:0	0:0	8	;
INIT	247:9	247:9	8	rowsperstrip = ( uint32 ) - 1
ASSIGN	247:9	247:24	9	rowsperstrip = ( uint32 ) - 1
LVAL	247:9	247:9	10	rowsperstrip
NAME	247:9	247:9	11	rowsperstrip
LEAF_NODE	247:9	247:9	12	rowsperstrip
ASSIGN_OP	247:22	247:22	10	=
LEAF_NODE	247:22	247:22	11	=
RVAL	247:24	247:32	10	( uint32 ) - 1
LEAF_NODE	247:24	247:24	11	(
TYPE_NAME	247:25	247:25	11	uint32
LEAF_NODE	247:25	247:25	12	uint32
LEAF_NODE	247:31	247:31	11	)
UNARY_EXPR	247:32	247:33	11	- 1
UNARY_OPERATOR	247:32	247:32	12	-
LEAF_NODE	247:32	247:32	13	-
FIELD	247:33	247:33	12	1
LEAF_NODE	247:33	247:33	13	1
LEAF_NODE	247:34	247:34	7	;
SIMPLE_DECL	248:2	248:30	6	tsample_t s , tsample_t samplesperpixel ;
INIT_DECL_LIST	248:2	248:2	7	tsample_t s , tsample_t samplesperpixel
VAR_DECL	248:2	248:12	8	tsample_t s
TYPE	248:2	248:2	9	tsample_t
TYPE_NAME	248:2	248:2	10	tsample_t
LEAF_NODE	248:2	248:2	11	tsample_t
NAME	248:12	248:12	9	s
LEAF_NODE	248:12	248:12	10	s
LEAF_NODE	248:13	248:13	8	,
VAR_DECL	248:2	248:15	8	tsample_t samplesperpixel
TYPE	248:2	248:2	9	tsample_t
TYPE_NAME	248:2	248:2	10	tsample_t
LEAF_NODE	248:2	248:2	11	tsample_t
NAME	248:15	248:15	9	samplesperpixel
LEAF_NODE	248:15	248:15	10	samplesperpixel
LEAF_NODE	248:30	248:30	7	;
EXPR_STATEMENT	250:2	250:44	6	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	250:2	250:2	7	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	250:2	250:43	8	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
CALLEE	250:2	250:2	9	TIFFGetField
LEAF_NODE	250:2	250:2	10	TIFFGetField
LEAF_NODE	250:14	250:14	9	(
ARGUMENT	250:15	250:15	9	tif
FIELD	250:15	250:15	10	tif
LEAF_NODE	250:15	250:15	11	tif
LEAF_NODE	250:18	250:18	9	,
ARGUMENT	250:20	250:20	9	TIFFTAG_IMAGELENGTH
FIELD	250:20	250:20	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	250:20	250:20	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	250:39	250:39	9	,
ARGUMENT	250:41	250:41	9	& h
UNARY_EXPR	250:41	250:42	10	& h
UNARY_OPERATOR	250:41	250:41	11	&
LEAF_NODE	250:41	250:41	12	&
FIELD	250:42	250:42	11	h
LEAF_NODE	250:42	250:42	12	h
LEAF_NODE	250:43	250:43	9	)
LEAF_NODE	250:44	250:44	7	;
EXPR_STATEMENT	251:2	251:56	6	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	251:2	251:2	7	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
FUNCTION_CALL	251:2	251:55	8	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	251:2	251:2	9	TIFFGetField
LEAF_NODE	251:2	251:2	10	TIFFGetField
LEAF_NODE	251:14	251:14	9	(
ARGUMENT	251:15	251:15	9	tif
FIELD	251:15	251:15	10	tif
LEAF_NODE	251:15	251:15	11	tif
LEAF_NODE	251:18	251:18	9	,
ARGUMENT	251:20	251:20	9	TIFFTAG_ROWSPERSTRIP
FIELD	251:20	251:20	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	251:20	251:20	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	251:40	251:40	9	,
ARGUMENT	251:42	251:42	9	& rowsperstrip
UNARY_EXPR	251:42	251:43	10	& rowsperstrip
UNARY_OPERATOR	251:42	251:42	11	&
LEAF_NODE	251:42	251:42	12	&
FIELD	251:43	251:43	11	rowsperstrip
LEAF_NODE	251:43	251:43	12	rowsperstrip
LEAF_NODE	251:55	251:55	9	)
LEAF_NODE	251:56	251:56	7	;
EXPR_STATEMENT	252:2	252:62	6	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel ) ;
EXPR	252:2	252:2	7	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
FUNCTION_CALL	252:2	252:61	8	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
CALLEE	252:2	252:2	9	TIFFGetField
LEAF_NODE	252:2	252:2	10	TIFFGetField
LEAF_NODE	252:14	252:14	9	(
ARGUMENT	252:15	252:15	9	tif
FIELD	252:15	252:15	10	tif
LEAF_NODE	252:15	252:15	11	tif
LEAF_NODE	252:18	252:18	9	,
ARGUMENT	252:20	252:20	9	TIFFTAG_SAMPLESPERPIXEL
FIELD	252:20	252:20	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	252:20	252:20	11	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	252:43	252:43	9	,
ARGUMENT	252:45	252:45	9	& samplesperpixel
UNARY_EXPR	252:45	252:46	10	& samplesperpixel
UNARY_OPERATOR	252:45	252:45	11	&
LEAF_NODE	252:45	252:45	12	&
FIELD	252:46	252:46	11	samplesperpixel
LEAF_NODE	252:46	252:46	12	samplesperpixel
LEAF_NODE	252:61	252:61	9	)
LEAF_NODE	252:62	252:62	7	;
ITERATION	253:2	253:46	6	
KEYWORD	253:2	253:2	7	for
LEAF_NODE	253:2	253:2	8	for
LEAF_NODE	253:6	253:6	7	(
FOR_INIT	253:7	253:14	7	row = 0 ;
EXPR	253:7	253:7	8	row = 0
ASSIGN	253:7	253:13	9	row = 0
LVAL	253:7	253:7	10	row
FIELD	253:7	253:7	11	row
LEAF_NODE	253:7	253:7	12	row
ASSIGN_OP	253:11	253:11	10	=
LEAF_NODE	253:11	253:11	11	=
RVAL	253:13	253:13	10	0
FIELD	253:13	253:13	11	0
LEAF_NODE	253:13	253:13	12	0
LEAF_NODE	253:14	253:14	8	;
CONDITION	253:16	253:16	7	row < h
EXPR	253:16	253:22	8	row < h
FIELD	253:16	253:16	9	row
LEAF_NODE	253:16	253:16	10	row
REL_OPERATOR	253:20	253:20	9	<
LEAF_NODE	253:20	253:20	10	<
FIELD	253:22	253:22	9	h
LEAF_NODE	253:22	253:22	10	h
LEAF_NODE	253:23	253:23	7	;
FOR_EXPR	253:25	253:25	7	row += rowsperstrip
EXPR	253:25	253:25	8	row += rowsperstrip
ASSIGN	253:25	253:32	9	row += rowsperstrip
LVAL	253:25	253:25	10	row
FIELD	253:25	253:25	11	row
LEAF_NODE	253:25	253:25	12	row
ASSIGN_OP	253:29	253:29	10	+=
LEAF_NODE	253:29	253:29	11	+=
RVAL	253:32	253:32	10	rowsperstrip
FIELD	253:32	253:32	11	rowsperstrip
LEAF_NODE	253:32	253:32	12	rowsperstrip
LEAF_NODE	253:44	253:44	7	)
STATEMENTS	253:46	264:2	7	
LEAF_NODE	253:46	253:46	8	{
STATEMENTS	254:3	254:3	8	
ITERATION	254:3	254:41	9	
KEYWORD	254:3	254:3	10	for
LEAF_NODE	254:3	254:3	11	for
LEAF_NODE	254:7	254:7	10	(
FOR_INIT	254:8	254:13	10	s = 0 ;
EXPR	254:8	254:8	11	s = 0
ASSIGN	254:8	254:12	12	s = 0
LVAL	254:8	254:8	13	s
FIELD	254:8	254:8	14	s
LEAF_NODE	254:8	254:8	15	s
ASSIGN_OP	254:10	254:10	13	=
LEAF_NODE	254:10	254:10	14	=
RVAL	254:12	254:12	13	0
FIELD	254:12	254:12	14	0
LEAF_NODE	254:12	254:12	15	0
LEAF_NODE	254:13	254:13	11	;
CONDITION	254:15	254:15	10	s < samplesperpixel
EXPR	254:15	254:19	11	s < samplesperpixel
FIELD	254:15	254:15	12	s
LEAF_NODE	254:15	254:15	13	s
REL_OPERATOR	254:17	254:17	12	<
LEAF_NODE	254:17	254:17	13	<
FIELD	254:19	254:19	12	samplesperpixel
LEAF_NODE	254:19	254:19	13	samplesperpixel
LEAF_NODE	254:34	254:34	10	;
FOR_EXPR	254:36	254:36	10	s ++
EXPR	254:36	254:36	11	s ++
FIELD	254:36	254:37	12	s ++
LEAF_NODE	254:36	254:36	13	s
LEAF_NODE	254:37	254:37	13	++
LEAF_NODE	254:39	254:39	10	)
STATEMENTS	254:41	263:3	10	
LEAF_NODE	254:41	254:41	11	{
STATEMENTS	255:4	261:6	11	
SIMPLE_DECL	255:4	256:29	12	uint32 nrow ; nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip ) ;
VAR_DECL	255:4	255:11	13	uint32 nrow ; nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
TYPE	255:4	255:4	14	uint32
TYPE_NAME	255:4	255:4	15	uint32
LEAF_NODE	255:4	255:4	16	uint32
NAME	255:11	255:11	14	nrow
LEAF_NODE	255:11	255:11	15	nrow
LEAF_NODE	0:0	0:0	14	;
INIT	255:11	255:11	14	nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
ASSIGN	255:11	255:18	15	nrow = ( row + rowsperstrip > h ? h - row : rowsperstrip )
LVAL	255:11	255:11	16	nrow
NAME	255:11	255:11	17	nrow
LEAF_NODE	255:11	255:11	18	nrow
ASSIGN_OP	255:16	255:16	16	=
LEAF_NODE	255:16	255:16	17	=
RVAL	255:18	256:28	16	( row + rowsperstrip > h ? h - row : rowsperstrip )
LEAF_NODE	255:18	255:18	17	(
COND_EXPR	255:19	256:16	17	row + rowsperstrip > h ? h - row : rowsperstrip
CONDITION	255:19	255:38	18	row + rowsperstrip > h
FIELD	255:19	255:19	19	row
LEAF_NODE	255:19	255:19	20	row
LEAF_NODE	255:22	255:22	19	+
FIELD	255:23	255:23	19	rowsperstrip
LEAF_NODE	255:23	255:23	20	rowsperstrip
REL_OPERATOR	255:36	255:36	19	>
LEAF_NODE	255:36	255:36	20	>
FIELD	255:38	255:38	19	h
LEAF_NODE	255:38	255:38	20	h
LEAF_NODE	255:40	255:40	18	?
EXPR	256:8	256:10	18	h - row
FIELD	256:8	256:8	19	h
LEAF_NODE	256:8	256:8	20	h
LEAF_NODE	256:9	256:9	19	-
FIELD	256:10	256:10	19	row
LEAF_NODE	256:10	256:10	20	row
LEAF_NODE	256:14	256:14	18	:
FIELD	256:16	256:16	18	rowsperstrip
LEAF_NODE	256:16	256:16	19	rowsperstrip
LEAF_NODE	256:28	256:28	17	)
LEAF_NODE	256:29	256:29	13	;
SIMPLE_DECL	257:4	257:50	12	tstrip_t strip ; strip = TIFFComputeStrip ( tif , row , s ) ;
VAR_DECL	257:4	257:13	13	tstrip_t strip ; strip = TIFFComputeStrip ( tif , row , s )
TYPE	257:4	257:4	14	tstrip_t
TYPE_NAME	257:4	257:4	15	tstrip_t
LEAF_NODE	257:4	257:4	16	tstrip_t
NAME	257:13	257:13	14	strip
LEAF_NODE	257:13	257:13	15	strip
LEAF_NODE	0:0	0:0	14	;
INIT	257:13	257:13	14	strip = TIFFComputeStrip ( tif , row , s )
ASSIGN	257:13	257:21	15	strip = TIFFComputeStrip ( tif , row , s )
LVAL	257:13	257:13	16	strip
NAME	257:13	257:13	17	strip
LEAF_NODE	257:13	257:13	18	strip
ASSIGN_OP	257:19	257:19	16	=
LEAF_NODE	257:19	257:19	17	=
RVAL	257:21	257:21	16	TIFFComputeStrip ( tif , row , s )
FUNCTION_CALL	257:21	257:49	17	TIFFComputeStrip ( tif , row , s )
CALLEE	257:21	257:21	18	TIFFComputeStrip
LEAF_NODE	257:21	257:21	19	TIFFComputeStrip
LEAF_NODE	257:37	257:37	18	(
ARGUMENT	257:38	257:38	18	tif
FIELD	257:38	257:38	19	tif
LEAF_NODE	257:38	257:38	20	tif
LEAF_NODE	257:41	257:41	18	,
ARGUMENT	257:43	257:43	18	row
FIELD	257:43	257:43	19	row
LEAF_NODE	257:43	257:43	20	row
LEAF_NODE	257:46	257:46	18	,
ARGUMENT	257:48	257:48	18	s
FIELD	257:48	257:48	19	s
LEAF_NODE	257:48	257:48	20	s
LEAF_NODE	257:49	257:49	18	)
LEAF_NODE	257:50	257:50	13	;
SELECTION	258:4	258:66	12	
KEYWORD	258:4	258:4	13	if
LEAF_NODE	258:4	258:4	14	if
LEAF_NODE	258:7	258:7	13	(
CONDITION	258:8	258:8	13	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline ) < 0
EXPR	258:8	258:63	14	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline ) < 0
FUNCTION_CALL	258:8	258:59	15	TIFFReadEncodedStrip ( tif , strip , buf , nrow * scanline )
CALLEE	258:8	258:8	16	TIFFReadEncodedStrip
LEAF_NODE	258:8	258:8	17	TIFFReadEncodedStrip
LEAF_NODE	258:28	258:28	16	(
ARGUMENT	258:29	258:29	16	tif
FIELD	258:29	258:29	17	tif
LEAF_NODE	258:29	258:29	18	tif
LEAF_NODE	258:32	258:32	16	,
ARGUMENT	258:34	258:34	16	strip
FIELD	258:34	258:34	17	strip
LEAF_NODE	258:34	258:34	18	strip
LEAF_NODE	258:39	258:39	16	,
ARGUMENT	258:41	258:41	16	buf
FIELD	258:41	258:41	17	buf
LEAF_NODE	258:41	258:41	18	buf
LEAF_NODE	258:44	258:44	16	,
ARGUMENT	258:46	258:51	16	nrow * scanline
FIELD	258:46	258:46	17	nrow
LEAF_NODE	258:46	258:46	18	nrow
LEAF_NODE	258:50	258:50	17	*
FIELD	258:51	258:51	17	scanline
LEAF_NODE	258:51	258:51	18	scanline
LEAF_NODE	258:59	258:59	16	)
REL_OPERATOR	258:61	258:61	15	<
LEAF_NODE	258:61	258:61	16	<
FIELD	258:63	258:63	15	0
LEAF_NODE	258:63	258:63	16	0
LEAF_NODE	258:64	258:64	13	)
STATEMENTS	258:66	261:4	13	
LEAF_NODE	258:66	258:66	14	{
STATEMENTS	259:5	259:5	14	
SELECTION	259:5	260:6	15	
KEYWORD	259:5	259:5	16	if
LEAF_NODE	259:5	259:5	17	if
LEAF_NODE	259:8	259:8	16	(
CONDITION	259:9	259:9	16	stoponerr
EXPR	259:9	259:9	17	stoponerr
FIELD	259:9	259:9	18	stoponerr
LEAF_NODE	259:9	259:9	19	stoponerr
LEAF_NODE	259:18	259:18	16	)
STATEMENTS	260:6	260:6	16	
JUMP_STATEMENT	260:6	260:11	17	break DESTINATION ;
KEYWORD	260:6	260:6	18	break
LEAF_NODE	260:6	260:6	19	break
LEAF_NODE	0:0	0:0	18	DESTINATION
LEAF_NODE	260:11	260:11	18	;
LEAF_NODE	261:4	261:4	14	}
SELECTION	261:6	261:11	12	
KEYWORD	261:6	261:6	13	else
LEAF_NODE	261:6	261:6	14	else
STATEMENTS	261:11	261:11	13	
SELECTION	261:11	262:5	14	
KEYWORD	261:11	261:11	15	if
LEAF_NODE	261:11	261:11	16	if
LEAF_NODE	261:14	261:14	15	(
CONDITION	261:15	261:15	15	showdata
EXPR	261:15	261:15	16	showdata
FIELD	261:15	261:15	17	showdata
LEAF_NODE	261:15	261:15	18	showdata
LEAF_NODE	261:23	261:23	15	)
STATEMENTS	262:5	262:5	15	
EXPR_STATEMENT	262:5	262:42	16	ShowStrip ( strip , buf , nrow , scanline ) ;
EXPR	262:5	262:5	17	ShowStrip ( strip , buf , nrow , scanline )
FUNCTION_CALL	262:5	262:41	18	ShowStrip ( strip , buf , nrow , scanline )
CALLEE	262:5	262:5	19	ShowStrip
LEAF_NODE	262:5	262:5	20	ShowStrip
LEAF_NODE	262:14	262:14	19	(
ARGUMENT	262:15	262:15	19	strip
FIELD	262:15	262:15	20	strip
LEAF_NODE	262:15	262:15	21	strip
LEAF_NODE	262:20	262:20	19	,
ARGUMENT	262:22	262:22	19	buf
FIELD	262:22	262:22	20	buf
LEAF_NODE	262:22	262:22	21	buf
LEAF_NODE	262:25	262:25	19	,
ARGUMENT	262:27	262:27	19	nrow
FIELD	262:27	262:27	20	nrow
LEAF_NODE	262:27	262:27	21	nrow
LEAF_NODE	262:31	262:31	19	,
ARGUMENT	262:33	262:33	19	scanline
FIELD	262:33	262:33	20	scanline
LEAF_NODE	262:33	262:33	21	scanline
LEAF_NODE	262:41	262:41	19	)
LEAF_NODE	262:42	262:42	17	;
LEAF_NODE	263:3	263:3	11	}
LEAF_NODE	264:2	264:2	8	}
EXPR_STATEMENT	265:2	265:16	6	_TIFFfree ( buf ) ;
EXPR	265:2	265:2	7	_TIFFfree ( buf )
FUNCTION_CALL	265:2	265:15	8	_TIFFfree ( buf )
CALLEE	265:2	265:2	9	_TIFFfree
LEAF_NODE	265:2	265:2	10	_TIFFfree
LEAF_NODE	265:11	265:11	9	(
ARGUMENT	265:12	265:12	9	buf
FIELD	265:12	265:12	10	buf
LEAF_NODE	265:12	265:12	11	buf
LEAF_NODE	265:15	265:15	9	)
LEAF_NODE	265:16	265:16	7	;
LEAF_NODE	266:1	266:1	5	}
LEAF_NODE	267:0	267:0	2	}
FUNCTION_DEF	269:0	287:0	1	
RETURN_TYPE	269:0	269:7	2	static void
LEAF_NODE	269:0	269:0	3	static
TYPE_NAME	269:7	269:7	3	void
LEAF_NODE	269:7	269:7	4	void
FUNCTION_NAME	270:0	270:0	2	ShowTile
LEAF_NODE	270:0	270:0	3	ShowTile
PARAMETER_LIST	270:8	271:50	2	( uint32 row , uint32 col , tsample_t sample , unsigned char * pp , uint32 nrow , uint32 rowsize )
LEAF_NODE	270:8	270:8	3	(
PARAMETER_DECL	270:9	270:16	3	uint32 row
TYPE	270:9	270:9	4	uint32
TYPE_NAME	270:9	270:9	5	uint32
LEAF_NODE	270:9	270:9	6	uint32
NAME	270:16	270:16	4	row
LEAF_NODE	270:16	270:16	5	row
LEAF_NODE	270:19	270:19	3	,
PARAMETER_DECL	270:21	270:28	3	uint32 col
TYPE	270:21	270:21	4	uint32
TYPE_NAME	270:21	270:21	5	uint32
LEAF_NODE	270:21	270:21	6	uint32
NAME	270:28	270:28	4	col
LEAF_NODE	270:28	270:28	5	col
LEAF_NODE	270:31	270:31	3	,
PARAMETER_DECL	270:33	270:43	3	tsample_t sample
TYPE	270:33	270:33	4	tsample_t
TYPE_NAME	270:33	270:33	5	tsample_t
LEAF_NODE	270:33	270:33	6	tsample_t
NAME	270:43	270:43	4	sample
LEAF_NODE	270:43	270:43	5	sample
LEAF_NODE	270:49	270:49	3	,
PARAMETER_DECL	271:4	271:19	3	unsigned char * pp
TYPE	271:4	271:17	4	unsigned char *
TYPE_NAME	271:4	271:13	5	unsigned char
LEAF_NODE	271:4	271:4	6	unsigned
LEAF_NODE	271:13	271:13	6	char
POINTER	271:17	271:17	5	*
LEAF_NODE	271:17	271:17	6	*
NAME	271:19	271:19	4	pp
LEAF_NODE	271:19	271:19	5	pp
LEAF_NODE	271:21	271:21	3	,
PARAMETER_DECL	271:23	271:30	3	uint32 nrow
TYPE	271:23	271:23	4	uint32
TYPE_NAME	271:23	271:23	5	uint32
LEAF_NODE	271:23	271:23	6	uint32
NAME	271:30	271:30	4	nrow
LEAF_NODE	271:30	271:30	5	nrow
LEAF_NODE	271:34	271:34	3	,
PARAMETER_DECL	271:36	271:43	3	uint32 rowsize
TYPE	271:36	271:36	4	uint32
TYPE_NAME	271:36	271:36	5	uint32
LEAF_NODE	271:36	271:36	6	uint32
NAME	271:43	271:43	4	rowsize
LEAF_NODE	271:43	271:43	5	rowsize
LEAF_NODE	271:50	271:50	3	)
LEAF_NODE	272:0	272:0	2	{
STATEMENTS	273:1	279:1	2	
SIMPLE_DECL	273:1	273:10	3	uint32 cc ;
VAR_DECL	273:1	273:8	4	uint32 cc
TYPE	273:1	273:1	5	uint32
TYPE_NAME	273:1	273:1	6	uint32
LEAF_NODE	273:1	273:1	7	uint32
NAME	273:8	273:8	5	cc
LEAF_NODE	273:8	273:8	6	cc
LEAF_NODE	273:10	273:10	4	;
EXPR_STATEMENT	275:1	275:66	3	printf ( "Tile (%lu,%lu" , ( unsigned long ) row , ( unsigned long ) col ) ;
EXPR	275:1	275:1	4	printf ( "Tile (%lu,%lu" , ( unsigned long ) row , ( unsigned long ) col )
FUNCTION_CALL	275:1	275:65	5	printf ( "Tile (%lu,%lu" , ( unsigned long ) row , ( unsigned long ) col )
CALLEE	275:1	275:1	6	printf
LEAF_NODE	275:1	275:1	7	printf
LEAF_NODE	275:7	275:7	6	(
ARGUMENT	275:8	275:8	6	"Tile (%lu,%lu"
FIELD	275:8	275:8	7	"Tile (%lu,%lu"
LEAF_NODE	275:8	275:8	8	"Tile (%lu,%lu"
LEAF_NODE	275:23	275:23	6	,
ARGUMENT	275:25	275:41	6	( unsigned long ) row
LEAF_NODE	275:25	275:25	7	(
TYPE_NAME	275:26	275:35	7	unsigned long
LEAF_NODE	275:26	275:26	8	unsigned
LEAF_NODE	275:35	275:35	8	long
LEAF_NODE	275:39	275:39	7	)
FIELD	275:41	275:41	7	row
LEAF_NODE	275:41	275:41	8	row
LEAF_NODE	275:44	275:44	6	,
ARGUMENT	275:46	275:62	6	( unsigned long ) col
LEAF_NODE	275:46	275:46	7	(
TYPE_NAME	275:47	275:56	7	unsigned long
LEAF_NODE	275:47	275:47	8	unsigned
LEAF_NODE	275:56	275:56	8	long
LEAF_NODE	275:60	275:60	7	)
FIELD	275:62	275:62	7	col
LEAF_NODE	275:62	275:62	8	col
LEAF_NODE	275:65	275:65	6	)
LEAF_NODE	275:66	275:66	4	;
SELECTION	276:1	277:2	3	
KEYWORD	276:1	276:1	4	if
LEAF_NODE	276:1	276:1	5	if
LEAF_NODE	276:4	276:4	4	(
CONDITION	276:5	276:5	4	sample != ( tsample_t ) - 1
EXPR	276:5	276:27	5	sample != ( tsample_t ) - 1
FIELD	276:5	276:5	6	sample
LEAF_NODE	276:5	276:5	7	sample
EQ_OPERATOR	276:12	276:12	6	!=
LEAF_NODE	276:12	276:12	7	!=
LEAF_NODE	276:15	276:15	6	(
TYPE_NAME	276:16	276:16	6	tsample_t
LEAF_NODE	276:16	276:16	7	tsample_t
LEAF_NODE	276:25	276:25	6	)
UNARY_EXPR	276:27	276:28	6	- 1
UNARY_OPERATOR	276:27	276:27	7	-
LEAF_NODE	276:27	276:27	8	-
FIELD	276:28	276:28	7	1
LEAF_NODE	276:28	276:28	8	1
LEAF_NODE	276:29	276:29	4	)
STATEMENTS	277:2	277:2	4	
EXPR_STATEMENT	277:2	277:23	5	printf ( ",%u" , sample ) ;
EXPR	277:2	277:2	6	printf ( ",%u" , sample )
FUNCTION_CALL	277:2	277:22	7	printf ( ",%u" , sample )
CALLEE	277:2	277:2	8	printf
LEAF_NODE	277:2	277:2	9	printf
LEAF_NODE	277:8	277:8	8	(
ARGUMENT	277:9	277:9	8	",%u"
FIELD	277:9	277:9	9	",%u"
LEAF_NODE	277:9	277:9	10	",%u"
LEAF_NODE	277:14	277:14	8	,
ARGUMENT	277:16	277:16	8	sample
FIELD	277:16	277:16	9	sample
LEAF_NODE	277:16	277:16	10	sample
LEAF_NODE	277:22	277:22	8	)
LEAF_NODE	277:23	277:23	6	;
EXPR_STATEMENT	278:1	278:15	3	printf ( "):\n" ) ;
EXPR	278:1	278:1	4	printf ( "):\n" )
FUNCTION_CALL	278:1	278:14	5	printf ( "):\n" )
CALLEE	278:1	278:1	6	printf
LEAF_NODE	278:1	278:1	7	printf
LEAF_NODE	278:7	278:7	6	(
ARGUMENT	278:8	278:8	6	"):\n"
FIELD	278:8	278:8	7	"):\n"
LEAF_NODE	278:8	278:8	8	"):\n"
LEAF_NODE	278:14	278:14	6	)
LEAF_NODE	278:15	278:15	4	;
ITERATION	279:1	279:20	3	
KEYWORD	279:1	279:1	4	while
LEAF_NODE	279:1	279:1	5	while
LEAF_NODE	279:7	279:7	4	(
CONDITION	279:8	279:8	4	nrow -- > 0
EXPR	279:8	279:17	5	nrow -- > 0
FIELD	279:8	279:12	6	nrow --
LEAF_NODE	279:8	279:8	7	nrow
LEAF_NODE	279:12	279:12	7	--
REL_OPERATOR	279:15	279:15	6	>
LEAF_NODE	279:15	279:15	7	>
FIELD	279:17	279:17	6	0
LEAF_NODE	279:17	279:17	7	0
LEAF_NODE	279:18	279:18	4	)
STATEMENTS	279:20	286:1	4	
LEAF_NODE	279:20	279:20	5	{
STATEMENTS	280:2	285:2	5	
ITERATION	280:2	280:35	6	
KEYWORD	280:2	280:2	7	for
LEAF_NODE	280:2	280:2	8	for
LEAF_NODE	280:6	280:6	7	(
FOR_INIT	280:7	280:13	7	cc = 0 ;
EXPR	280:7	280:7	8	cc = 0
ASSIGN	280:7	280:12	9	cc = 0
LVAL	280:7	280:7	10	cc
FIELD	280:7	280:7	11	cc
LEAF_NODE	280:7	280:7	12	cc
ASSIGN_OP	280:10	280:10	10	=
LEAF_NODE	280:10	280:10	11	=
RVAL	280:12	280:12	10	0
FIELD	280:12	280:12	11	0
LEAF_NODE	280:12	280:12	12	0
LEAF_NODE	280:13	280:13	8	;
CONDITION	280:15	280:15	7	cc < rowsize
EXPR	280:15	280:20	8	cc < rowsize
FIELD	280:15	280:15	9	cc
LEAF_NODE	280:15	280:15	10	cc
REL_OPERATOR	280:18	280:18	9	<
LEAF_NODE	280:18	280:18	10	<
FIELD	280:20	280:20	9	rowsize
LEAF_NODE	280:20	280:20	10	rowsize
LEAF_NODE	280:27	280:27	7	;
FOR_EXPR	280:29	280:29	7	cc ++
EXPR	280:29	280:29	8	cc ++
FIELD	280:29	280:31	9	cc ++
LEAF_NODE	280:29	280:29	10	cc
LEAF_NODE	280:31	280:31	10	++
LEAF_NODE	280:33	280:33	7	)
STATEMENTS	280:35	284:2	7	
LEAF_NODE	280:35	280:35	8	{
STATEMENTS	281:3	282:3	8	
EXPR_STATEMENT	281:3	281:25	9	printf ( " %02x" , * pp ++ ) ;
EXPR	281:3	281:3	10	printf ( " %02x" , * pp ++ )
FUNCTION_CALL	281:3	281:24	11	printf ( " %02x" , * pp ++ )
CALLEE	281:3	281:3	12	printf
LEAF_NODE	281:3	281:3	13	printf
LEAF_NODE	281:9	281:9	12	(
ARGUMENT	281:10	281:10	12	" %02x"
FIELD	281:10	281:10	13	" %02x"
LEAF_NODE	281:10	281:10	14	" %02x"
LEAF_NODE	281:17	281:17	12	,
ARGUMENT	281:19	281:19	12	* pp ++
UNARY_EXPR	281:19	281:20	13	* pp ++
UNARY_OPERATOR	281:19	281:19	14	*
LEAF_NODE	281:19	281:19	15	*
FIELD	281:20	281:22	14	pp ++
LEAF_NODE	281:20	281:20	15	pp
LEAF_NODE	281:22	281:22	15	++
LEAF_NODE	281:24	281:24	12	)
LEAF_NODE	281:25	281:25	10	;
SELECTION	282:3	283:4	9	
KEYWORD	282:3	282:3	10	if
LEAF_NODE	282:3	282:3	11	if
LEAF_NODE	282:6	282:6	10	(
CONDITION	282:7	282:7	10	( ( cc + 1 ) % 24 ) == 0
EXPR	282:7	282:24	11	( ( cc + 1 ) % 24 ) == 0
LEAF_NODE	282:7	282:7	12	(
LEAF_NODE	282:8	282:8	12	(
FIELD	282:9	282:9	12	cc
LEAF_NODE	282:9	282:9	13	cc
LEAF_NODE	282:11	282:11	12	+
FIELD	282:12	282:12	12	1
LEAF_NODE	282:12	282:12	13	1
LEAF_NODE	282:13	282:13	12	)
LEAF_NODE	282:15	282:15	12	%
FIELD	282:17	282:17	12	24
LEAF_NODE	282:17	282:17	13	24
LEAF_NODE	282:19	282:19	12	)
EQ_OPERATOR	282:21	282:21	12	==
LEAF_NODE	282:21	282:21	13	==
FIELD	282:24	282:24	12	0
LEAF_NODE	282:24	282:24	13	0
LEAF_NODE	282:25	282:25	10	)
STATEMENTS	283:4	283:4	10	
EXPR_STATEMENT	283:4	283:17	11	putchar ( '\n' ) ;
EXPR	283:4	283:4	12	putchar ( '\n' )
FUNCTION_CALL	283:4	283:16	13	putchar ( '\n' )
CALLEE	283:4	283:4	14	putchar
LEAF_NODE	283:4	283:4	15	putchar
LEAF_NODE	283:11	283:11	14	(
ARGUMENT	283:12	283:12	14	'\n'
FIELD	283:12	283:12	15	'\n'
LEAF_NODE	283:12	283:12	16	'\n'
LEAF_NODE	283:16	283:16	14	)
LEAF_NODE	283:17	283:17	12	;
LEAF_NODE	284:2	284:2	8	}
EXPR_STATEMENT	285:2	285:15	6	putchar ( '\n' ) ;
EXPR	285:2	285:2	7	putchar ( '\n' )
FUNCTION_CALL	285:2	285:14	8	putchar ( '\n' )
CALLEE	285:2	285:2	9	putchar
LEAF_NODE	285:2	285:2	10	putchar
LEAF_NODE	285:9	285:9	9	(
ARGUMENT	285:10	285:10	9	'\n'
FIELD	285:10	285:10	10	'\n'
LEAF_NODE	285:10	285:10	11	'\n'
LEAF_NODE	285:14	285:14	9	)
LEAF_NODE	285:15	285:15	7	;
LEAF_NODE	286:1	286:1	5	}
LEAF_NODE	287:0	287:0	2	}
FUNCTION_DEF	289:0	322:0	1	
RETURN_TYPE	289:0	289:0	2	void
TYPE_NAME	289:0	289:0	3	void
LEAF_NODE	289:0	289:0	4	void
FUNCTION_NAME	290:0	290:0	2	TIFFReadContigTileData
LEAF_NODE	290:0	290:0	3	TIFFReadContigTileData
PARAMETER_LIST	290:22	290:32	2	( TIFF * tif )
LEAF_NODE	290:22	290:22	3	(
PARAMETER_DECL	290:23	290:29	3	TIFF * tif
TYPE	290:23	290:27	4	TIFF *
TYPE_NAME	290:23	290:23	5	TIFF
LEAF_NODE	290:23	290:23	6	TIFF
POINTER	290:27	290:27	5	*
LEAF_NODE	290:27	290:27	6	*
NAME	290:29	290:29	4	tif
LEAF_NODE	290:29	290:29	5	tif
LEAF_NODE	290:32	290:32	3	)
LEAF_NODE	291:0	291:0	2	{
STATEMENTS	292:1	297:1	2	
SIMPLE_DECL	292:1	292:19	3	unsigned char * buf ;
VAR_DECL	292:1	292:16	4	unsigned char * buf
TYPE	292:1	292:15	5	unsigned char *
TYPE_NAME	292:1	292:10	6	unsigned char
LEAF_NODE	292:1	292:1	7	unsigned
LEAF_NODE	292:10	292:10	7	char
POINTER	292:15	292:15	6	*
LEAF_NODE	292:15	292:15	7	*
NAME	292:16	292:16	5	buf
LEAF_NODE	292:16	292:16	6	buf
LEAF_NODE	292:19	292:19	4	;
SIMPLE_DECL	293:8	293:47	3	tmsize_t rowsize ; rowsize = TIFFTileRowSize ( tif ) ;
VAR_DECL	293:8	293:17	4	tmsize_t rowsize ; rowsize = TIFFTileRowSize ( tif )
TYPE	293:8	293:8	5	tmsize_t
TYPE_NAME	293:8	293:8	6	tmsize_t
LEAF_NODE	293:8	293:8	7	tmsize_t
NAME	293:17	293:17	5	rowsize
LEAF_NODE	293:17	293:17	6	rowsize
LEAF_NODE	0:0	0:0	5	;
INIT	293:17	293:17	5	rowsize = TIFFTileRowSize ( tif )
ASSIGN	293:17	293:27	6	rowsize = TIFFTileRowSize ( tif )
LVAL	293:17	293:17	7	rowsize
NAME	293:17	293:17	8	rowsize
LEAF_NODE	293:17	293:17	9	rowsize
ASSIGN_OP	293:25	293:25	7	=
LEAF_NODE	293:25	293:25	8	=
RVAL	293:27	293:27	7	TIFFTileRowSize ( tif )
FUNCTION_CALL	293:27	293:46	8	TIFFTileRowSize ( tif )
CALLEE	293:27	293:27	9	TIFFTileRowSize
LEAF_NODE	293:27	293:27	10	TIFFTileRowSize
LEAF_NODE	293:42	293:42	9	(
ARGUMENT	293:43	293:43	9	tif
FIELD	293:43	293:43	10	tif
LEAF_NODE	293:43	293:43	11	tif
LEAF_NODE	293:46	293:46	9	)
LEAF_NODE	293:47	293:47	4	;
SIMPLE_DECL	294:8	294:45	3	tmsize_t tilesize ; tilesize = TIFFTileSize ( tif ) ;
VAR_DECL	294:8	294:17	4	tmsize_t tilesize ; tilesize = TIFFTileSize ( tif )
TYPE	294:8	294:8	5	tmsize_t
TYPE_NAME	294:8	294:8	6	tmsize_t
LEAF_NODE	294:8	294:8	7	tmsize_t
NAME	294:17	294:17	5	tilesize
LEAF_NODE	294:17	294:17	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	294:17	294:17	5	tilesize = TIFFTileSize ( tif )
ASSIGN	294:17	294:28	6	tilesize = TIFFTileSize ( tif )
LVAL	294:17	294:17	7	tilesize
NAME	294:17	294:17	8	tilesize
LEAF_NODE	294:17	294:17	9	tilesize
ASSIGN_OP	294:26	294:26	7	=
LEAF_NODE	294:26	294:26	8	=
RVAL	294:28	294:28	7	TIFFTileSize ( tif )
FUNCTION_CALL	294:28	294:44	8	TIFFTileSize ( tif )
CALLEE	294:28	294:28	9	TIFFTileSize
LEAF_NODE	294:28	294:28	10	TIFFTileSize
LEAF_NODE	294:40	294:40	9	(
ARGUMENT	294:41	294:41	9	tif
FIELD	294:41	294:41	10	tif
LEAF_NODE	294:41	294:41	11	tif
LEAF_NODE	294:44	294:44	9	)
LEAF_NODE	294:45	294:45	4	;
EXPR_STATEMENT	296:8	296:52	3	buf = ( unsigned char * ) _TIFFmalloc ( tilesize ) ;
EXPR	296:8	296:8	4	buf = ( unsigned char * ) _TIFFmalloc ( tilesize )
ASSIGN	296:8	296:14	5	buf = ( unsigned char * ) _TIFFmalloc ( tilesize )
LVAL	296:8	296:8	6	buf
FIELD	296:8	296:8	7	buf
LEAF_NODE	296:8	296:8	8	buf
ASSIGN_OP	296:12	296:12	6	=
LEAF_NODE	296:12	296:12	7	=
RVAL	296:14	296:31	6	( unsigned char * ) _TIFFmalloc ( tilesize )
LEAF_NODE	296:14	296:14	7	(
TYPE_NAME	296:15	296:24	7	unsigned char
LEAF_NODE	296:15	296:15	8	unsigned
LEAF_NODE	296:24	296:24	8	char
LEAF_NODE	296:29	296:29	7	*
LEAF_NODE	296:30	296:30	7	)
FUNCTION_CALL	296:31	296:51	7	_TIFFmalloc ( tilesize )
CALLEE	296:31	296:31	8	_TIFFmalloc
LEAF_NODE	296:31	296:31	9	_TIFFmalloc
LEAF_NODE	296:42	296:42	8	(
ARGUMENT	296:43	296:43	8	tilesize
FIELD	296:43	296:43	9	tilesize
LEAF_NODE	296:43	296:43	10	tilesize
LEAF_NODE	296:51	296:51	8	)
LEAF_NODE	296:52	296:52	4	;
SELECTION	297:1	297:10	3	
KEYWORD	297:1	297:1	4	if
LEAF_NODE	297:1	297:1	5	if
LEAF_NODE	297:4	297:4	4	(
CONDITION	297:5	297:5	4	buf
EXPR	297:5	297:5	5	buf
FIELD	297:5	297:5	6	buf
LEAF_NODE	297:5	297:5	7	buf
LEAF_NODE	297:8	297:8	4	)
STATEMENTS	297:10	321:1	4	
LEAF_NODE	297:10	297:10	5	{
STATEMENTS	298:2	320:2	5	
SIMPLE_DECL	298:2	298:29	6	uint32 tw ; tw = 0 , uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0 ;
INIT_DECL_LIST	298:2	298:2	7	uint32 tw ; tw = 0 , uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	298:2	298:9	8	uint32 tw ; tw = 0
TYPE	298:2	298:2	9	uint32
TYPE_NAME	298:2	298:2	10	uint32
LEAF_NODE	298:2	298:2	11	uint32
NAME	298:9	298:9	9	tw
LEAF_NODE	298:9	298:9	10	tw
LEAF_NODE	0:0	0:0	9	;
INIT	298:9	298:9	9	tw = 0
ASSIGN	298:9	298:12	10	tw = 0
LVAL	298:9	298:9	11	tw
NAME	298:9	298:9	12	tw
LEAF_NODE	298:9	298:9	13	tw
ASSIGN_OP	298:11	298:11	11	=
LEAF_NODE	298:11	298:11	12	=
RVAL	298:12	298:12	11	0
FIELD	298:12	298:12	12	0
LEAF_NODE	298:12	298:12	13	0
LEAF_NODE	298:13	298:13	8	,
INIT_DECL_LIST	298:2	298:2	8	uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	298:2	298:15	9	uint32 th ; th = 0
TYPE	298:2	298:2	10	uint32
TYPE_NAME	298:2	298:2	11	uint32
LEAF_NODE	298:2	298:2	12	uint32
NAME	298:15	298:15	10	th
LEAF_NODE	298:15	298:15	11	th
LEAF_NODE	0:0	0:0	10	;
INIT	298:15	298:15	10	th = 0
ASSIGN	298:15	298:18	11	th = 0
LVAL	298:15	298:15	12	th
NAME	298:15	298:15	13	th
LEAF_NODE	298:15	298:15	14	th
ASSIGN_OP	298:17	298:17	12	=
LEAF_NODE	298:17	298:17	13	=
RVAL	298:18	298:18	12	0
FIELD	298:18	298:18	13	0
LEAF_NODE	298:18	298:18	14	0
LEAF_NODE	298:19	298:19	9	,
INIT_DECL_LIST	298:2	298:2	9	uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	298:2	298:21	10	uint32 w ; w = 0
TYPE	298:2	298:2	11	uint32
TYPE_NAME	298:2	298:2	12	uint32
LEAF_NODE	298:2	298:2	13	uint32
NAME	298:21	298:21	11	w
LEAF_NODE	298:21	298:21	12	w
LEAF_NODE	0:0	0:0	11	;
INIT	298:21	298:21	11	w = 0
ASSIGN	298:21	298:23	12	w = 0
LVAL	298:21	298:21	13	w
NAME	298:21	298:21	14	w
LEAF_NODE	298:21	298:21	15	w
ASSIGN_OP	298:22	298:22	13	=
LEAF_NODE	298:22	298:22	14	=
RVAL	298:23	298:23	13	0
FIELD	298:23	298:23	14	0
LEAF_NODE	298:23	298:23	15	0
LEAF_NODE	298:24	298:24	10	,
VAR_DECL	298:2	298:26	10	uint32 h ; h = 0
TYPE	298:2	298:2	11	uint32
TYPE_NAME	298:2	298:2	12	uint32
LEAF_NODE	298:2	298:2	13	uint32
NAME	298:26	298:26	11	h
LEAF_NODE	298:26	298:26	12	h
LEAF_NODE	0:0	0:0	11	;
INIT	298:26	298:26	11	h = 0
ASSIGN	298:26	298:28	12	h = 0
LVAL	298:26	298:26	13	h
NAME	298:26	298:26	14	h
LEAF_NODE	298:26	298:26	15	h
ASSIGN_OP	298:27	298:27	13	=
LEAF_NODE	298:27	298:27	14	=
RVAL	298:28	298:28	13	0
FIELD	298:28	298:28	14	0
LEAF_NODE	298:28	298:28	15	0
LEAF_NODE	298:29	298:29	7	;
SIMPLE_DECL	299:2	299:17	6	uint32 row , uint32 col ;
INIT_DECL_LIST	299:2	299:2	7	uint32 row , uint32 col
VAR_DECL	299:2	299:9	8	uint32 row
TYPE	299:2	299:2	9	uint32
TYPE_NAME	299:2	299:2	10	uint32
LEAF_NODE	299:2	299:2	11	uint32
NAME	299:9	299:9	9	row
LEAF_NODE	299:9	299:9	10	row
LEAF_NODE	299:12	299:12	8	,
VAR_DECL	299:2	299:14	8	uint32 col
TYPE	299:2	299:2	9	uint32
TYPE_NAME	299:2	299:2	10	uint32
LEAF_NODE	299:2	299:2	11	uint32
NAME	299:14	299:14	9	col
LEAF_NODE	299:14	299:14	10	col
LEAF_NODE	299:17	299:17	7	;
EXPR_STATEMENT	301:2	301:43	6	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w ) ;
EXPR	301:2	301:2	7	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
FUNCTION_CALL	301:2	301:42	8	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
CALLEE	301:2	301:2	9	TIFFGetField
LEAF_NODE	301:2	301:2	10	TIFFGetField
LEAF_NODE	301:14	301:14	9	(
ARGUMENT	301:15	301:15	9	tif
FIELD	301:15	301:15	10	tif
LEAF_NODE	301:15	301:15	11	tif
LEAF_NODE	301:18	301:18	9	,
ARGUMENT	301:20	301:20	9	TIFFTAG_IMAGEWIDTH
FIELD	301:20	301:20	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	301:20	301:20	11	TIFFTAG_IMAGEWIDTH
LEAF_NODE	301:38	301:38	9	,
ARGUMENT	301:40	301:40	9	& w
UNARY_EXPR	301:40	301:41	10	& w
UNARY_OPERATOR	301:40	301:40	11	&
LEAF_NODE	301:40	301:40	12	&
FIELD	301:41	301:41	11	w
LEAF_NODE	301:41	301:41	12	w
LEAF_NODE	301:42	301:42	9	)
LEAF_NODE	301:43	301:43	7	;
EXPR_STATEMENT	302:2	302:44	6	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	302:2	302:2	7	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	302:2	302:43	8	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
CALLEE	302:2	302:2	9	TIFFGetField
LEAF_NODE	302:2	302:2	10	TIFFGetField
LEAF_NODE	302:14	302:14	9	(
ARGUMENT	302:15	302:15	9	tif
FIELD	302:15	302:15	10	tif
LEAF_NODE	302:15	302:15	11	tif
LEAF_NODE	302:18	302:18	9	,
ARGUMENT	302:20	302:20	9	TIFFTAG_IMAGELENGTH
FIELD	302:20	302:20	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	302:20	302:20	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	302:39	302:39	9	,
ARGUMENT	302:41	302:41	9	& h
UNARY_EXPR	302:41	302:42	10	& h
UNARY_OPERATOR	302:41	302:41	11	&
LEAF_NODE	302:41	302:41	12	&
FIELD	302:42	302:42	11	h
LEAF_NODE	302:42	302:42	12	h
LEAF_NODE	302:43	302:43	9	)
LEAF_NODE	302:44	302:44	7	;
EXPR_STATEMENT	303:2	303:43	6	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	303:2	303:2	7	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
FUNCTION_CALL	303:2	303:42	8	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
CALLEE	303:2	303:2	9	TIFFGetField
LEAF_NODE	303:2	303:2	10	TIFFGetField
LEAF_NODE	303:14	303:14	9	(
ARGUMENT	303:15	303:15	9	tif
FIELD	303:15	303:15	10	tif
LEAF_NODE	303:15	303:15	11	tif
LEAF_NODE	303:18	303:18	9	,
ARGUMENT	303:20	303:20	9	TIFFTAG_TILEWIDTH
FIELD	303:20	303:20	10	TIFFTAG_TILEWIDTH
LEAF_NODE	303:20	303:20	11	TIFFTAG_TILEWIDTH
LEAF_NODE	303:37	303:37	9	,
ARGUMENT	303:39	303:39	9	& tw
UNARY_EXPR	303:39	303:40	10	& tw
UNARY_OPERATOR	303:39	303:39	11	&
LEAF_NODE	303:39	303:39	12	&
FIELD	303:40	303:40	11	tw
LEAF_NODE	303:40	303:40	12	tw
LEAF_NODE	303:42	303:42	9	)
LEAF_NODE	303:43	303:43	7	;
EXPR_STATEMENT	304:2	304:44	6	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th ) ;
EXPR	304:2	304:2	7	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
FUNCTION_CALL	304:2	304:43	8	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
CALLEE	304:2	304:2	9	TIFFGetField
LEAF_NODE	304:2	304:2	10	TIFFGetField
LEAF_NODE	304:14	304:14	9	(
ARGUMENT	304:15	304:15	9	tif
FIELD	304:15	304:15	10	tif
LEAF_NODE	304:15	304:15	11	tif
LEAF_NODE	304:18	304:18	9	,
ARGUMENT	304:20	304:20	9	TIFFTAG_TILELENGTH
FIELD	304:20	304:20	10	TIFFTAG_TILELENGTH
LEAF_NODE	304:20	304:20	11	TIFFTAG_TILELENGTH
LEAF_NODE	304:38	304:38	9	,
ARGUMENT	304:40	304:40	9	& th
UNARY_EXPR	304:40	304:41	10	& th
UNARY_OPERATOR	304:40	304:40	11	&
LEAF_NODE	304:40	304:40	12	&
FIELD	304:41	304:41	11	th
LEAF_NODE	304:41	304:41	12	th
LEAF_NODE	304:43	304:43	9	)
LEAF_NODE	304:44	304:44	7	;
SELECTION	305:16	306:16	6	
KEYWORD	305:16	305:16	7	if
LEAF_NODE	305:16	305:16	8	if
LEAF_NODE	305:18	305:18	7	(
CONDITION	305:20	305:20	7	rowsize == 0 || th > tilesize / rowsize
EXPR	305:20	305:20	8	rowsize == 0 || th > tilesize / rowsize
OR	305:20	305:36	9	rowsize == 0 || th > tilesize / rowsize
EXPR	305:20	305:31	10	rowsize == 0
FIELD	305:20	305:20	11	rowsize
LEAF_NODE	305:20	305:20	12	rowsize
EQ_OPERATOR	305:28	305:28	11	==
LEAF_NODE	305:28	305:28	12	==
FIELD	305:31	305:31	11	0
LEAF_NODE	305:31	305:31	12	0
LEAF_NODE	305:33	305:33	10	||
EXPR	305:36	305:52	10	th > tilesize / rowsize
FIELD	305:36	305:36	11	th
LEAF_NODE	305:36	305:36	12	th
REL_OPERATOR	305:39	305:39	11	>
LEAF_NODE	305:39	305:39	12	>
FIELD	305:41	305:41	11	tilesize
LEAF_NODE	305:41	305:41	12	tilesize
LEAF_NODE	305:50	305:50	11	/
FIELD	305:52	305:52	11	rowsize
LEAF_NODE	305:52	305:52	12	rowsize
LEAF_NODE	305:60	305:60	7	)
STATEMENTS	306:16	310:16	7	
LEAF_NODE	306:16	306:16	8	{
STATEMENTS	307:24	309:24	8	
EXPR_STATEMENT	307:24	307:89	9	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" ) ;
EXPR	307:24	307:24	10	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" )
FUNCTION_CALL	307:24	307:88	11	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" )
CALLEE	307:24	307:24	12	fprintf
LEAF_NODE	307:24	307:24	13	fprintf
LEAF_NODE	307:31	307:31	12	(
ARGUMENT	307:32	307:32	12	stderr
FIELD	307:32	307:32	13	stderr
LEAF_NODE	307:32	307:32	14	stderr
LEAF_NODE	307:38	307:38	12	,
ARGUMENT	307:40	307:40	12	"Cannot display data: th * rowsize > tilesize\n"
FIELD	307:40	307:40	13	"Cannot display data: th * rowsize > tilesize\n"
LEAF_NODE	307:40	307:40	14	"Cannot display data: th * rowsize > tilesize\n"
LEAF_NODE	307:88	307:88	12	)
LEAF_NODE	307:89	307:89	10	;
EXPR_STATEMENT	308:24	308:38	9	_TIFFfree ( buf ) ;
EXPR	308:24	308:24	10	_TIFFfree ( buf )
FUNCTION_CALL	308:24	308:37	11	_TIFFfree ( buf )
CALLEE	308:24	308:24	12	_TIFFfree
LEAF_NODE	308:24	308:24	13	_TIFFfree
LEAF_NODE	308:33	308:33	12	(
ARGUMENT	308:34	308:34	12	buf
FIELD	308:34	308:34	13	buf
LEAF_NODE	308:34	308:34	14	buf
LEAF_NODE	308:37	308:37	12	)
LEAF_NODE	308:38	308:38	10	;
JUMP_STATEMENT	309:24	309:30	9	return DESTINATION ;
KEYWORD	309:24	309:24	10	return
LEAF_NODE	309:24	309:24	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	309:30	309:30	10	;
LEAF_NODE	310:16	310:16	8	}
ITERATION	311:2	311:36	6	
KEYWORD	311:2	311:2	7	for
LEAF_NODE	311:2	311:2	8	for
LEAF_NODE	311:6	311:6	7	(
FOR_INIT	311:7	311:14	7	row = 0 ;
EXPR	311:7	311:7	8	row = 0
ASSIGN	311:7	311:13	9	row = 0
LVAL	311:7	311:7	10	row
FIELD	311:7	311:7	11	row
LEAF_NODE	311:7	311:7	12	row
ASSIGN_OP	311:11	311:11	10	=
LEAF_NODE	311:11	311:11	11	=
RVAL	311:13	311:13	10	0
FIELD	311:13	311:13	11	0
LEAF_NODE	311:13	311:13	12	0
LEAF_NODE	311:14	311:14	8	;
CONDITION	311:16	311:16	7	row < h
EXPR	311:16	311:22	8	row < h
FIELD	311:16	311:16	9	row
LEAF_NODE	311:16	311:16	10	row
REL_OPERATOR	311:20	311:20	9	<
LEAF_NODE	311:20	311:20	10	<
FIELD	311:22	311:22	9	h
LEAF_NODE	311:22	311:22	10	h
LEAF_NODE	311:23	311:23	7	;
FOR_EXPR	311:25	311:25	7	row += th
EXPR	311:25	311:25	8	row += th
ASSIGN	311:25	311:32	9	row += th
LVAL	311:25	311:25	10	row
FIELD	311:25	311:25	11	row
LEAF_NODE	311:25	311:25	12	row
ASSIGN_OP	311:29	311:29	10	+=
LEAF_NODE	311:29	311:29	11	+=
RVAL	311:32	311:32	10	th
FIELD	311:32	311:32	11	th
LEAF_NODE	311:32	311:32	12	th
LEAF_NODE	311:34	311:34	7	)
STATEMENTS	311:36	319:2	7	
LEAF_NODE	311:36	311:36	8	{
STATEMENTS	312:3	312:3	8	
ITERATION	312:3	312:37	9	
KEYWORD	312:3	312:3	10	for
LEAF_NODE	312:3	312:3	11	for
LEAF_NODE	312:7	312:7	10	(
FOR_INIT	312:8	312:15	10	col = 0 ;
EXPR	312:8	312:8	11	col = 0
ASSIGN	312:8	312:14	12	col = 0
LVAL	312:8	312:8	13	col
FIELD	312:8	312:8	14	col
LEAF_NODE	312:8	312:8	15	col
ASSIGN_OP	312:12	312:12	13	=
LEAF_NODE	312:12	312:12	14	=
RVAL	312:14	312:14	13	0
FIELD	312:14	312:14	14	0
LEAF_NODE	312:14	312:14	15	0
LEAF_NODE	312:15	312:15	11	;
CONDITION	312:17	312:17	10	col < w
EXPR	312:17	312:23	11	col < w
FIELD	312:17	312:17	12	col
LEAF_NODE	312:17	312:17	13	col
REL_OPERATOR	312:21	312:21	12	<
LEAF_NODE	312:21	312:21	13	<
FIELD	312:23	312:23	12	w
LEAF_NODE	312:23	312:23	13	w
LEAF_NODE	312:24	312:24	10	;
FOR_EXPR	312:26	312:26	10	col += tw
EXPR	312:26	312:26	11	col += tw
ASSIGN	312:26	312:33	12	col += tw
LVAL	312:26	312:26	13	col
FIELD	312:26	312:26	14	col
LEAF_NODE	312:26	312:26	15	col
ASSIGN_OP	312:30	312:30	13	+=
LEAF_NODE	312:30	312:30	14	+=
RVAL	312:33	312:33	13	tw
FIELD	312:33	312:33	14	tw
LEAF_NODE	312:33	312:33	15	tw
LEAF_NODE	312:35	312:35	10	)
STATEMENTS	312:37	318:3	10	
LEAF_NODE	312:37	312:37	11	{
STATEMENTS	313:4	316:6	11	
SELECTION	313:4	313:52	12	
KEYWORD	313:4	313:4	13	if
LEAF_NODE	313:4	313:4	14	if
LEAF_NODE	313:7	313:7	13	(
CONDITION	313:8	313:8	13	TIFFReadTile ( tif , buf , col , row , 0 , 0 ) < 0
EXPR	313:8	313:49	14	TIFFReadTile ( tif , buf , col , row , 0 , 0 ) < 0
FUNCTION_CALL	313:8	313:45	15	TIFFReadTile ( tif , buf , col , row , 0 , 0 )
CALLEE	313:8	313:8	16	TIFFReadTile
LEAF_NODE	313:8	313:8	17	TIFFReadTile
LEAF_NODE	313:20	313:20	16	(
ARGUMENT	313:21	313:21	16	tif
FIELD	313:21	313:21	17	tif
LEAF_NODE	313:21	313:21	18	tif
LEAF_NODE	313:24	313:24	16	,
ARGUMENT	313:26	313:26	16	buf
FIELD	313:26	313:26	17	buf
LEAF_NODE	313:26	313:26	18	buf
LEAF_NODE	313:29	313:29	16	,
ARGUMENT	313:31	313:31	16	col
FIELD	313:31	313:31	17	col
LEAF_NODE	313:31	313:31	18	col
LEAF_NODE	313:34	313:34	16	,
ARGUMENT	313:36	313:36	16	row
FIELD	313:36	313:36	17	row
LEAF_NODE	313:36	313:36	18	row
LEAF_NODE	313:39	313:39	16	,
ARGUMENT	313:41	313:41	16	0
FIELD	313:41	313:41	17	0
LEAF_NODE	313:41	313:41	18	0
LEAF_NODE	313:42	313:42	16	,
ARGUMENT	313:44	313:44	16	0
FIELD	313:44	313:44	17	0
LEAF_NODE	313:44	313:44	18	0
LEAF_NODE	313:45	313:45	16	)
REL_OPERATOR	313:47	313:47	15	<
LEAF_NODE	313:47	313:47	16	<
FIELD	313:49	313:49	15	0
LEAF_NODE	313:49	313:49	16	0
LEAF_NODE	313:50	313:50	13	)
STATEMENTS	313:52	316:4	13	
LEAF_NODE	313:52	313:52	14	{
STATEMENTS	314:5	314:5	14	
SELECTION	314:5	315:6	15	
KEYWORD	314:5	314:5	16	if
LEAF_NODE	314:5	314:5	17	if
LEAF_NODE	314:8	314:8	16	(
CONDITION	314:9	314:9	16	stoponerr
EXPR	314:9	314:9	17	stoponerr
FIELD	314:9	314:9	18	stoponerr
LEAF_NODE	314:9	314:9	19	stoponerr
LEAF_NODE	314:18	314:18	16	)
STATEMENTS	315:6	315:6	16	
JUMP_STATEMENT	315:6	315:11	17	break DESTINATION ;
KEYWORD	315:6	315:6	18	break
LEAF_NODE	315:6	315:6	19	break
LEAF_NODE	0:0	0:0	18	DESTINATION
LEAF_NODE	315:11	315:11	18	;
LEAF_NODE	316:4	316:4	14	}
SELECTION	316:6	316:11	12	
KEYWORD	316:6	316:6	13	else
LEAF_NODE	316:6	316:6	14	else
STATEMENTS	316:11	316:11	13	
SELECTION	316:11	317:5	14	
KEYWORD	316:11	316:11	15	if
LEAF_NODE	316:11	316:11	16	if
LEAF_NODE	316:14	316:14	15	(
CONDITION	316:15	316:15	15	showdata
EXPR	316:15	316:15	16	showdata
FIELD	316:15	316:15	17	showdata
LEAF_NODE	316:15	316:15	18	showdata
LEAF_NODE	316:23	316:23	15	)
STATEMENTS	317:5	317:5	15	
EXPR_STATEMENT	317:5	317:57	16	ShowTile ( row , col , ( tsample_t ) - 1 , buf , th , rowsize ) ;
EXPR	317:5	317:5	17	ShowTile ( row , col , ( tsample_t ) - 1 , buf , th , rowsize )
FUNCTION_CALL	317:5	317:56	18	ShowTile ( row , col , ( tsample_t ) - 1 , buf , th , rowsize )
CALLEE	317:5	317:5	19	ShowTile
LEAF_NODE	317:5	317:5	20	ShowTile
LEAF_NODE	317:13	317:13	19	(
ARGUMENT	317:14	317:14	19	row
FIELD	317:14	317:14	20	row
LEAF_NODE	317:14	317:14	21	row
LEAF_NODE	317:17	317:17	19	,
ARGUMENT	317:19	317:19	19	col
FIELD	317:19	317:19	20	col
LEAF_NODE	317:19	317:19	21	col
LEAF_NODE	317:22	317:22	19	,
ARGUMENT	317:24	317:36	19	( tsample_t ) - 1
LEAF_NODE	317:24	317:24	20	(
TYPE_NAME	317:25	317:25	20	tsample_t
LEAF_NODE	317:25	317:25	21	tsample_t
LEAF_NODE	317:34	317:34	20	)
UNARY_EXPR	317:36	317:37	20	- 1
UNARY_OPERATOR	317:36	317:36	21	-
LEAF_NODE	317:36	317:36	22	-
FIELD	317:37	317:37	21	1
LEAF_NODE	317:37	317:37	22	1
LEAF_NODE	317:38	317:38	19	,
ARGUMENT	317:40	317:40	19	buf
FIELD	317:40	317:40	20	buf
LEAF_NODE	317:40	317:40	21	buf
LEAF_NODE	317:43	317:43	19	,
ARGUMENT	317:45	317:45	19	th
FIELD	317:45	317:45	20	th
LEAF_NODE	317:45	317:45	21	th
LEAF_NODE	317:47	317:47	19	,
ARGUMENT	317:49	317:49	19	rowsize
FIELD	317:49	317:49	20	rowsize
LEAF_NODE	317:49	317:49	21	rowsize
LEAF_NODE	317:56	317:56	19	)
LEAF_NODE	317:57	317:57	17	;
LEAF_NODE	318:3	318:3	11	}
LEAF_NODE	319:2	319:2	8	}
EXPR_STATEMENT	320:2	320:16	6	_TIFFfree ( buf ) ;
EXPR	320:2	320:2	7	_TIFFfree ( buf )
FUNCTION_CALL	320:2	320:15	8	_TIFFfree ( buf )
CALLEE	320:2	320:2	9	_TIFFfree
LEAF_NODE	320:2	320:2	10	_TIFFfree
LEAF_NODE	320:11	320:11	9	(
ARGUMENT	320:12	320:12	9	buf
FIELD	320:12	320:12	10	buf
LEAF_NODE	320:12	320:12	11	buf
LEAF_NODE	320:15	320:15	9	)
LEAF_NODE	320:16	320:16	7	;
LEAF_NODE	321:1	321:1	5	}
LEAF_NODE	322:0	322:0	2	}
FUNCTION_DEF	324:0	361:0	1	
RETURN_TYPE	324:0	324:0	2	void
TYPE_NAME	324:0	324:0	3	void
LEAF_NODE	324:0	324:0	4	void
FUNCTION_NAME	325:0	325:0	2	TIFFReadSeparateTileData
LEAF_NODE	325:0	325:0	3	TIFFReadSeparateTileData
PARAMETER_LIST	325:24	325:34	2	( TIFF * tif )
LEAF_NODE	325:24	325:24	3	(
PARAMETER_DECL	325:25	325:31	3	TIFF * tif
TYPE	325:25	325:29	4	TIFF *
TYPE_NAME	325:25	325:25	5	TIFF
LEAF_NODE	325:25	325:25	6	TIFF
POINTER	325:29	325:29	5	*
LEAF_NODE	325:29	325:29	6	*
NAME	325:31	325:31	4	tif
LEAF_NODE	325:31	325:31	5	tif
LEAF_NODE	325:34	325:34	3	)
LEAF_NODE	326:0	326:0	2	{
STATEMENTS	327:1	332:1	2	
SIMPLE_DECL	327:1	327:19	3	unsigned char * buf ;
VAR_DECL	327:1	327:16	4	unsigned char * buf
TYPE	327:1	327:15	5	unsigned char *
TYPE_NAME	327:1	327:10	6	unsigned char
LEAF_NODE	327:1	327:1	7	unsigned
LEAF_NODE	327:10	327:10	7	char
POINTER	327:15	327:15	6	*
LEAF_NODE	327:15	327:15	7	*
NAME	327:16	327:16	5	buf
LEAF_NODE	327:16	327:16	6	buf
LEAF_NODE	327:19	327:19	4	;
SIMPLE_DECL	328:1	328:40	3	tmsize_t rowsize ; rowsize = TIFFTileRowSize ( tif ) ;
VAR_DECL	328:1	328:10	4	tmsize_t rowsize ; rowsize = TIFFTileRowSize ( tif )
TYPE	328:1	328:1	5	tmsize_t
TYPE_NAME	328:1	328:1	6	tmsize_t
LEAF_NODE	328:1	328:1	7	tmsize_t
NAME	328:10	328:10	5	rowsize
LEAF_NODE	328:10	328:10	6	rowsize
LEAF_NODE	0:0	0:0	5	;
INIT	328:10	328:10	5	rowsize = TIFFTileRowSize ( tif )
ASSIGN	328:10	328:20	6	rowsize = TIFFTileRowSize ( tif )
LVAL	328:10	328:10	7	rowsize
NAME	328:10	328:10	8	rowsize
LEAF_NODE	328:10	328:10	9	rowsize
ASSIGN_OP	328:18	328:18	7	=
LEAF_NODE	328:18	328:18	8	=
RVAL	328:20	328:20	7	TIFFTileRowSize ( tif )
FUNCTION_CALL	328:20	328:39	8	TIFFTileRowSize ( tif )
CALLEE	328:20	328:20	9	TIFFTileRowSize
LEAF_NODE	328:20	328:20	10	TIFFTileRowSize
LEAF_NODE	328:35	328:35	9	(
ARGUMENT	328:36	328:36	9	tif
FIELD	328:36	328:36	10	tif
LEAF_NODE	328:36	328:36	11	tif
LEAF_NODE	328:39	328:39	9	)
LEAF_NODE	328:40	328:40	4	;
SIMPLE_DECL	329:1	329:38	3	tmsize_t tilesize ; tilesize = TIFFTileSize ( tif ) ;
VAR_DECL	329:1	329:10	4	tmsize_t tilesize ; tilesize = TIFFTileSize ( tif )
TYPE	329:1	329:1	5	tmsize_t
TYPE_NAME	329:1	329:1	6	tmsize_t
LEAF_NODE	329:1	329:1	7	tmsize_t
NAME	329:10	329:10	5	tilesize
LEAF_NODE	329:10	329:10	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	329:10	329:10	5	tilesize = TIFFTileSize ( tif )
ASSIGN	329:10	329:21	6	tilesize = TIFFTileSize ( tif )
LVAL	329:10	329:10	7	tilesize
NAME	329:10	329:10	8	tilesize
LEAF_NODE	329:10	329:10	9	tilesize
ASSIGN_OP	329:19	329:19	7	=
LEAF_NODE	329:19	329:19	8	=
RVAL	329:21	329:21	7	TIFFTileSize ( tif )
FUNCTION_CALL	329:21	329:37	8	TIFFTileSize ( tif )
CALLEE	329:21	329:21	9	TIFFTileSize
LEAF_NODE	329:21	329:21	10	TIFFTileSize
LEAF_NODE	329:33	329:33	9	(
ARGUMENT	329:34	329:34	9	tif
FIELD	329:34	329:34	10	tif
LEAF_NODE	329:34	329:34	11	tif
LEAF_NODE	329:37	329:37	9	)
LEAF_NODE	329:38	329:38	4	;
EXPR_STATEMENT	331:1	331:45	3	buf = ( unsigned char * ) _TIFFmalloc ( tilesize ) ;
EXPR	331:1	331:1	4	buf = ( unsigned char * ) _TIFFmalloc ( tilesize )
ASSIGN	331:1	331:7	5	buf = ( unsigned char * ) _TIFFmalloc ( tilesize )
LVAL	331:1	331:1	6	buf
FIELD	331:1	331:1	7	buf
LEAF_NODE	331:1	331:1	8	buf
ASSIGN_OP	331:5	331:5	6	=
LEAF_NODE	331:5	331:5	7	=
RVAL	331:7	331:24	6	( unsigned char * ) _TIFFmalloc ( tilesize )
LEAF_NODE	331:7	331:7	7	(
TYPE_NAME	331:8	331:17	7	unsigned char
LEAF_NODE	331:8	331:8	8	unsigned
LEAF_NODE	331:17	331:17	8	char
LEAF_NODE	331:22	331:22	7	*
LEAF_NODE	331:23	331:23	7	)
FUNCTION_CALL	331:24	331:44	7	_TIFFmalloc ( tilesize )
CALLEE	331:24	331:24	8	_TIFFmalloc
LEAF_NODE	331:24	331:24	9	_TIFFmalloc
LEAF_NODE	331:35	331:35	8	(
ARGUMENT	331:36	331:36	8	tilesize
FIELD	331:36	331:36	9	tilesize
LEAF_NODE	331:36	331:36	10	tilesize
LEAF_NODE	331:44	331:44	8	)
LEAF_NODE	331:45	331:45	4	;
SELECTION	332:1	332:10	3	
KEYWORD	332:1	332:1	4	if
LEAF_NODE	332:1	332:1	5	if
LEAF_NODE	332:4	332:4	4	(
CONDITION	332:5	332:5	4	buf
EXPR	332:5	332:5	5	buf
FIELD	332:5	332:5	6	buf
LEAF_NODE	332:5	332:5	7	buf
LEAF_NODE	332:8	332:8	4	)
STATEMENTS	332:10	360:1	4	
LEAF_NODE	332:10	332:10	5	{
STATEMENTS	333:2	359:2	5	
SIMPLE_DECL	333:2	333:29	6	uint32 tw ; tw = 0 , uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0 ;
INIT_DECL_LIST	333:2	333:2	7	uint32 tw ; tw = 0 , uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	333:2	333:9	8	uint32 tw ; tw = 0
TYPE	333:2	333:2	9	uint32
TYPE_NAME	333:2	333:2	10	uint32
LEAF_NODE	333:2	333:2	11	uint32
NAME	333:9	333:9	9	tw
LEAF_NODE	333:9	333:9	10	tw
LEAF_NODE	0:0	0:0	9	;
INIT	333:9	333:9	9	tw = 0
ASSIGN	333:9	333:12	10	tw = 0
LVAL	333:9	333:9	11	tw
NAME	333:9	333:9	12	tw
LEAF_NODE	333:9	333:9	13	tw
ASSIGN_OP	333:11	333:11	11	=
LEAF_NODE	333:11	333:11	12	=
RVAL	333:12	333:12	11	0
FIELD	333:12	333:12	12	0
LEAF_NODE	333:12	333:12	13	0
LEAF_NODE	333:13	333:13	8	,
INIT_DECL_LIST	333:2	333:2	8	uint32 th ; th = 0 , uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	333:2	333:15	9	uint32 th ; th = 0
TYPE	333:2	333:2	10	uint32
TYPE_NAME	333:2	333:2	11	uint32
LEAF_NODE	333:2	333:2	12	uint32
NAME	333:15	333:15	10	th
LEAF_NODE	333:15	333:15	11	th
LEAF_NODE	0:0	0:0	10	;
INIT	333:15	333:15	10	th = 0
ASSIGN	333:15	333:18	11	th = 0
LVAL	333:15	333:15	12	th
NAME	333:15	333:15	13	th
LEAF_NODE	333:15	333:15	14	th
ASSIGN_OP	333:17	333:17	12	=
LEAF_NODE	333:17	333:17	13	=
RVAL	333:18	333:18	12	0
FIELD	333:18	333:18	13	0
LEAF_NODE	333:18	333:18	14	0
LEAF_NODE	333:19	333:19	9	,
INIT_DECL_LIST	333:2	333:2	9	uint32 w ; w = 0 , uint32 h ; h = 0
VAR_DECL	333:2	333:21	10	uint32 w ; w = 0
TYPE	333:2	333:2	11	uint32
TYPE_NAME	333:2	333:2	12	uint32
LEAF_NODE	333:2	333:2	13	uint32
NAME	333:21	333:21	11	w
LEAF_NODE	333:21	333:21	12	w
LEAF_NODE	0:0	0:0	11	;
INIT	333:21	333:21	11	w = 0
ASSIGN	333:21	333:23	12	w = 0
LVAL	333:21	333:21	13	w
NAME	333:21	333:21	14	w
LEAF_NODE	333:21	333:21	15	w
ASSIGN_OP	333:22	333:22	13	=
LEAF_NODE	333:22	333:22	14	=
RVAL	333:23	333:23	13	0
FIELD	333:23	333:23	14	0
LEAF_NODE	333:23	333:23	15	0
LEAF_NODE	333:24	333:24	10	,
VAR_DECL	333:2	333:26	10	uint32 h ; h = 0
TYPE	333:2	333:2	11	uint32
TYPE_NAME	333:2	333:2	12	uint32
LEAF_NODE	333:2	333:2	13	uint32
NAME	333:26	333:26	11	h
LEAF_NODE	333:26	333:26	12	h
LEAF_NODE	0:0	0:0	11	;
INIT	333:26	333:26	11	h = 0
ASSIGN	333:26	333:28	12	h = 0
LVAL	333:26	333:26	13	h
NAME	333:26	333:26	14	h
LEAF_NODE	333:26	333:26	15	h
ASSIGN_OP	333:27	333:27	13	=
LEAF_NODE	333:27	333:27	14	=
RVAL	333:28	333:28	13	0
FIELD	333:28	333:28	14	0
LEAF_NODE	333:28	333:28	15	0
LEAF_NODE	333:29	333:29	7	;
SIMPLE_DECL	334:2	334:17	6	uint32 row , uint32 col ;
INIT_DECL_LIST	334:2	334:2	7	uint32 row , uint32 col
VAR_DECL	334:2	334:9	8	uint32 row
TYPE	334:2	334:2	9	uint32
TYPE_NAME	334:2	334:2	10	uint32
LEAF_NODE	334:2	334:2	11	uint32
NAME	334:9	334:9	9	row
LEAF_NODE	334:9	334:9	10	row
LEAF_NODE	334:12	334:12	8	,
VAR_DECL	334:2	334:14	8	uint32 col
TYPE	334:2	334:2	9	uint32
TYPE_NAME	334:2	334:2	10	uint32
LEAF_NODE	334:2	334:2	11	uint32
NAME	334:14	334:14	9	col
LEAF_NODE	334:14	334:14	10	col
LEAF_NODE	334:17	334:17	7	;
SIMPLE_DECL	335:2	335:30	6	tsample_t s , tsample_t samplesperpixel ;
INIT_DECL_LIST	335:2	335:2	7	tsample_t s , tsample_t samplesperpixel
VAR_DECL	335:2	335:12	8	tsample_t s
TYPE	335:2	335:2	9	tsample_t
TYPE_NAME	335:2	335:2	10	tsample_t
LEAF_NODE	335:2	335:2	11	tsample_t
NAME	335:12	335:12	9	s
LEAF_NODE	335:12	335:12	10	s
LEAF_NODE	335:13	335:13	8	,
VAR_DECL	335:2	335:15	8	tsample_t samplesperpixel
TYPE	335:2	335:2	9	tsample_t
TYPE_NAME	335:2	335:2	10	tsample_t
LEAF_NODE	335:2	335:2	11	tsample_t
NAME	335:15	335:15	9	samplesperpixel
LEAF_NODE	335:15	335:15	10	samplesperpixel
LEAF_NODE	335:30	335:30	7	;
EXPR_STATEMENT	337:2	337:43	6	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w ) ;
EXPR	337:2	337:2	7	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
FUNCTION_CALL	337:2	337:42	8	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & w )
CALLEE	337:2	337:2	9	TIFFGetField
LEAF_NODE	337:2	337:2	10	TIFFGetField
LEAF_NODE	337:14	337:14	9	(
ARGUMENT	337:15	337:15	9	tif
FIELD	337:15	337:15	10	tif
LEAF_NODE	337:15	337:15	11	tif
LEAF_NODE	337:18	337:18	9	,
ARGUMENT	337:20	337:20	9	TIFFTAG_IMAGEWIDTH
FIELD	337:20	337:20	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	337:20	337:20	11	TIFFTAG_IMAGEWIDTH
LEAF_NODE	337:38	337:38	9	,
ARGUMENT	337:40	337:40	9	& w
UNARY_EXPR	337:40	337:41	10	& w
UNARY_OPERATOR	337:40	337:40	11	&
LEAF_NODE	337:40	337:40	12	&
FIELD	337:41	337:41	11	w
LEAF_NODE	337:41	337:41	12	w
LEAF_NODE	337:42	337:42	9	)
LEAF_NODE	337:43	337:43	7	;
EXPR_STATEMENT	338:2	338:44	6	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	338:2	338:2	7	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	338:2	338:43	8	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & h )
CALLEE	338:2	338:2	9	TIFFGetField
LEAF_NODE	338:2	338:2	10	TIFFGetField
LEAF_NODE	338:14	338:14	9	(
ARGUMENT	338:15	338:15	9	tif
FIELD	338:15	338:15	10	tif
LEAF_NODE	338:15	338:15	11	tif
LEAF_NODE	338:18	338:18	9	,
ARGUMENT	338:20	338:20	9	TIFFTAG_IMAGELENGTH
FIELD	338:20	338:20	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	338:20	338:20	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	338:39	338:39	9	,
ARGUMENT	338:41	338:41	9	& h
UNARY_EXPR	338:41	338:42	10	& h
UNARY_OPERATOR	338:41	338:41	11	&
LEAF_NODE	338:41	338:41	12	&
FIELD	338:42	338:42	11	h
LEAF_NODE	338:42	338:42	12	h
LEAF_NODE	338:43	338:43	9	)
LEAF_NODE	338:44	338:44	7	;
EXPR_STATEMENT	339:2	339:43	6	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	339:2	339:2	7	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
FUNCTION_CALL	339:2	339:42	8	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
CALLEE	339:2	339:2	9	TIFFGetField
LEAF_NODE	339:2	339:2	10	TIFFGetField
LEAF_NODE	339:14	339:14	9	(
ARGUMENT	339:15	339:15	9	tif
FIELD	339:15	339:15	10	tif
LEAF_NODE	339:15	339:15	11	tif
LEAF_NODE	339:18	339:18	9	,
ARGUMENT	339:20	339:20	9	TIFFTAG_TILEWIDTH
FIELD	339:20	339:20	10	TIFFTAG_TILEWIDTH
LEAF_NODE	339:20	339:20	11	TIFFTAG_TILEWIDTH
LEAF_NODE	339:37	339:37	9	,
ARGUMENT	339:39	339:39	9	& tw
UNARY_EXPR	339:39	339:40	10	& tw
UNARY_OPERATOR	339:39	339:39	11	&
LEAF_NODE	339:39	339:39	12	&
FIELD	339:40	339:40	11	tw
LEAF_NODE	339:40	339:40	12	tw
LEAF_NODE	339:42	339:42	9	)
LEAF_NODE	339:43	339:43	7	;
EXPR_STATEMENT	340:2	340:44	6	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th ) ;
EXPR	340:2	340:2	7	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
FUNCTION_CALL	340:2	340:43	8	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
CALLEE	340:2	340:2	9	TIFFGetField
LEAF_NODE	340:2	340:2	10	TIFFGetField
LEAF_NODE	340:14	340:14	9	(
ARGUMENT	340:15	340:15	9	tif
FIELD	340:15	340:15	10	tif
LEAF_NODE	340:15	340:15	11	tif
LEAF_NODE	340:18	340:18	9	,
ARGUMENT	340:20	340:20	9	TIFFTAG_TILELENGTH
FIELD	340:20	340:20	10	TIFFTAG_TILELENGTH
LEAF_NODE	340:20	340:20	11	TIFFTAG_TILELENGTH
LEAF_NODE	340:38	340:38	9	,
ARGUMENT	340:40	340:40	9	& th
UNARY_EXPR	340:40	340:41	10	& th
UNARY_OPERATOR	340:40	340:40	11	&
LEAF_NODE	340:40	340:40	12	&
FIELD	340:41	340:41	11	th
LEAF_NODE	340:41	340:41	12	th
LEAF_NODE	340:43	340:43	9	)
LEAF_NODE	340:44	340:44	7	;
EXPR_STATEMENT	341:2	341:62	6	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel ) ;
EXPR	341:2	341:2	7	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
FUNCTION_CALL	341:2	341:61	8	TIFFGetField ( tif , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
CALLEE	341:2	341:2	9	TIFFGetField
LEAF_NODE	341:2	341:2	10	TIFFGetField
LEAF_NODE	341:14	341:14	9	(
ARGUMENT	341:15	341:15	9	tif
FIELD	341:15	341:15	10	tif
LEAF_NODE	341:15	341:15	11	tif
LEAF_NODE	341:18	341:18	9	,
ARGUMENT	341:20	341:20	9	TIFFTAG_SAMPLESPERPIXEL
FIELD	341:20	341:20	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	341:20	341:20	11	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	341:43	341:43	9	,
ARGUMENT	341:45	341:45	9	& samplesperpixel
UNARY_EXPR	341:45	341:46	10	& samplesperpixel
UNARY_OPERATOR	341:45	341:45	11	&
LEAF_NODE	341:45	341:45	12	&
FIELD	341:46	341:46	11	samplesperpixel
LEAF_NODE	341:46	341:46	12	samplesperpixel
LEAF_NODE	341:61	341:61	9	)
LEAF_NODE	341:62	341:62	7	;
SELECTION	342:2	343:2	6	
KEYWORD	342:2	342:2	7	if
LEAF_NODE	342:2	342:2	8	if
LEAF_NODE	342:4	342:4	7	(
CONDITION	342:6	342:6	7	rowsize == 0 || th > tilesize / rowsize
EXPR	342:6	342:6	8	rowsize == 0 || th > tilesize / rowsize
OR	342:6	342:22	9	rowsize == 0 || th > tilesize / rowsize
EXPR	342:6	342:17	10	rowsize == 0
FIELD	342:6	342:6	11	rowsize
LEAF_NODE	342:6	342:6	12	rowsize
EQ_OPERATOR	342:14	342:14	11	==
LEAF_NODE	342:14	342:14	12	==
FIELD	342:17	342:17	11	0
LEAF_NODE	342:17	342:17	12	0
LEAF_NODE	342:19	342:19	10	||
EXPR	342:22	342:38	10	th > tilesize / rowsize
FIELD	342:22	342:22	11	th
LEAF_NODE	342:22	342:22	12	th
REL_OPERATOR	342:25	342:25	11	>
LEAF_NODE	342:25	342:25	12	>
FIELD	342:27	342:27	11	tilesize
LEAF_NODE	342:27	342:27	12	tilesize
LEAF_NODE	342:36	342:36	11	/
FIELD	342:38	342:38	11	rowsize
LEAF_NODE	342:38	342:38	12	rowsize
LEAF_NODE	342:46	342:46	7	)
STATEMENTS	343:2	347:2	7	
LEAF_NODE	343:2	343:2	8	{
STATEMENTS	344:3	346:3	8	
EXPR_STATEMENT	344:3	344:68	9	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" ) ;
EXPR	344:3	344:3	10	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" )
FUNCTION_CALL	344:3	344:67	11	fprintf ( stderr , "Cannot display data: th * rowsize > tilesize\n" )
CALLEE	344:3	344:3	12	fprintf
LEAF_NODE	344:3	344:3	13	fprintf
LEAF_NODE	344:10	344:10	12	(
ARGUMENT	344:11	344:11	12	stderr
FIELD	344:11	344:11	13	stderr
LEAF_NODE	344:11	344:11	14	stderr
LEAF_NODE	344:17	344:17	12	,
ARGUMENT	344:19	344:19	12	"Cannot display data: th * rowsize > tilesize\n"
FIELD	344:19	344:19	13	"Cannot display data: th * rowsize > tilesize\n"
LEAF_NODE	344:19	344:19	14	"Cannot display data: th * rowsize > tilesize\n"
LEAF_NODE	344:67	344:67	12	)
LEAF_NODE	344:68	344:68	10	;
EXPR_STATEMENT	345:3	345:17	9	_TIFFfree ( buf ) ;
EXPR	345:3	345:3	10	_TIFFfree ( buf )
FUNCTION_CALL	345:3	345:16	11	_TIFFfree ( buf )
CALLEE	345:3	345:3	12	_TIFFfree
LEAF_NODE	345:3	345:3	13	_TIFFfree
LEAF_NODE	345:12	345:12	12	(
ARGUMENT	345:13	345:13	12	buf
FIELD	345:13	345:13	13	buf
LEAF_NODE	345:13	345:13	14	buf
LEAF_NODE	345:16	345:16	12	)
LEAF_NODE	345:17	345:17	10	;
JUMP_STATEMENT	346:3	346:9	9	return DESTINATION ;
KEYWORD	346:3	346:3	10	return
LEAF_NODE	346:3	346:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	346:9	346:9	10	;
LEAF_NODE	347:2	347:2	8	}
ITERATION	348:2	348:36	6	
KEYWORD	348:2	348:2	7	for
LEAF_NODE	348:2	348:2	8	for
LEAF_NODE	348:6	348:6	7	(
FOR_INIT	348:7	348:14	7	row = 0 ;
EXPR	348:7	348:7	8	row = 0
ASSIGN	348:7	348:13	9	row = 0
LVAL	348:7	348:7	10	row
FIELD	348:7	348:7	11	row
LEAF_NODE	348:7	348:7	12	row
ASSIGN_OP	348:11	348:11	10	=
LEAF_NODE	348:11	348:11	11	=
RVAL	348:13	348:13	10	0
FIELD	348:13	348:13	11	0
LEAF_NODE	348:13	348:13	12	0
LEAF_NODE	348:14	348:14	8	;
CONDITION	348:16	348:16	7	row < h
EXPR	348:16	348:22	8	row < h
FIELD	348:16	348:16	9	row
LEAF_NODE	348:16	348:16	10	row
REL_OPERATOR	348:20	348:20	9	<
LEAF_NODE	348:20	348:20	10	<
FIELD	348:22	348:22	9	h
LEAF_NODE	348:22	348:22	10	h
LEAF_NODE	348:23	348:23	7	;
FOR_EXPR	348:25	348:25	7	row += th
EXPR	348:25	348:25	8	row += th
ASSIGN	348:25	348:32	9	row += th
LVAL	348:25	348:25	10	row
FIELD	348:25	348:25	11	row
LEAF_NODE	348:25	348:25	12	row
ASSIGN_OP	348:29	348:29	10	+=
LEAF_NODE	348:29	348:29	11	+=
RVAL	348:32	348:32	10	th
FIELD	348:32	348:32	11	th
LEAF_NODE	348:32	348:32	12	th
LEAF_NODE	348:34	348:34	7	)
STATEMENTS	348:36	358:2	7	
LEAF_NODE	348:36	348:36	8	{
STATEMENTS	349:3	349:3	8	
ITERATION	349:3	349:37	9	
KEYWORD	349:3	349:3	10	for
LEAF_NODE	349:3	349:3	11	for
LEAF_NODE	349:7	349:7	10	(
FOR_INIT	349:8	349:15	10	col = 0 ;
EXPR	349:8	349:8	11	col = 0
ASSIGN	349:8	349:14	12	col = 0
LVAL	349:8	349:8	13	col
FIELD	349:8	349:8	14	col
LEAF_NODE	349:8	349:8	15	col
ASSIGN_OP	349:12	349:12	13	=
LEAF_NODE	349:12	349:12	14	=
RVAL	349:14	349:14	13	0
FIELD	349:14	349:14	14	0
LEAF_NODE	349:14	349:14	15	0
LEAF_NODE	349:15	349:15	11	;
CONDITION	349:17	349:17	10	col < w
EXPR	349:17	349:23	11	col < w
FIELD	349:17	349:17	12	col
LEAF_NODE	349:17	349:17	13	col
REL_OPERATOR	349:21	349:21	12	<
LEAF_NODE	349:21	349:21	13	<
FIELD	349:23	349:23	12	w
LEAF_NODE	349:23	349:23	13	w
LEAF_NODE	349:24	349:24	10	;
FOR_EXPR	349:26	349:26	10	col += tw
EXPR	349:26	349:26	11	col += tw
ASSIGN	349:26	349:33	12	col += tw
LVAL	349:26	349:26	13	col
FIELD	349:26	349:26	14	col
LEAF_NODE	349:26	349:26	15	col
ASSIGN_OP	349:30	349:30	13	+=
LEAF_NODE	349:30	349:30	14	+=
RVAL	349:33	349:33	13	tw
FIELD	349:33	349:33	14	tw
LEAF_NODE	349:33	349:33	15	tw
LEAF_NODE	349:35	349:35	10	)
STATEMENTS	349:37	357:3	10	
LEAF_NODE	349:37	349:37	11	{
STATEMENTS	350:4	350:4	11	
ITERATION	350:4	350:42	12	
KEYWORD	350:4	350:4	13	for
LEAF_NODE	350:4	350:4	14	for
LEAF_NODE	350:8	350:8	13	(
FOR_INIT	350:9	350:14	13	s = 0 ;
EXPR	350:9	350:9	14	s = 0
ASSIGN	350:9	350:13	15	s = 0
LVAL	350:9	350:9	16	s
FIELD	350:9	350:9	17	s
LEAF_NODE	350:9	350:9	18	s
ASSIGN_OP	350:11	350:11	16	=
LEAF_NODE	350:11	350:11	17	=
RVAL	350:13	350:13	16	0
FIELD	350:13	350:13	17	0
LEAF_NODE	350:13	350:13	18	0
LEAF_NODE	350:14	350:14	14	;
CONDITION	350:16	350:16	13	s < samplesperpixel
EXPR	350:16	350:20	14	s < samplesperpixel
FIELD	350:16	350:16	15	s
LEAF_NODE	350:16	350:16	16	s
REL_OPERATOR	350:18	350:18	15	<
LEAF_NODE	350:18	350:18	16	<
FIELD	350:20	350:20	15	samplesperpixel
LEAF_NODE	350:20	350:20	16	samplesperpixel
LEAF_NODE	350:35	350:35	13	;
FOR_EXPR	350:37	350:37	13	s ++
EXPR	350:37	350:37	14	s ++
FIELD	350:37	350:38	15	s ++
LEAF_NODE	350:37	350:37	16	s
LEAF_NODE	350:38	350:38	16	++
LEAF_NODE	350:40	350:40	13	)
STATEMENTS	350:42	356:4	13	
LEAF_NODE	350:42	350:42	14	{
STATEMENTS	351:5	354:7	14	
SELECTION	351:5	351:53	15	
KEYWORD	351:5	351:5	16	if
LEAF_NODE	351:5	351:5	17	if
LEAF_NODE	351:8	351:8	16	(
CONDITION	351:9	351:9	16	TIFFReadTile ( tif , buf , col , row , 0 , s ) < 0
EXPR	351:9	351:50	17	TIFFReadTile ( tif , buf , col , row , 0 , s ) < 0
FUNCTION_CALL	351:9	351:46	18	TIFFReadTile ( tif , buf , col , row , 0 , s )
CALLEE	351:9	351:9	19	TIFFReadTile
LEAF_NODE	351:9	351:9	20	TIFFReadTile
LEAF_NODE	351:21	351:21	19	(
ARGUMENT	351:22	351:22	19	tif
FIELD	351:22	351:22	20	tif
LEAF_NODE	351:22	351:22	21	tif
LEAF_NODE	351:25	351:25	19	,
ARGUMENT	351:27	351:27	19	buf
FIELD	351:27	351:27	20	buf
LEAF_NODE	351:27	351:27	21	buf
LEAF_NODE	351:30	351:30	19	,
ARGUMENT	351:32	351:32	19	col
FIELD	351:32	351:32	20	col
LEAF_NODE	351:32	351:32	21	col
LEAF_NODE	351:35	351:35	19	,
ARGUMENT	351:37	351:37	19	row
FIELD	351:37	351:37	20	row
LEAF_NODE	351:37	351:37	21	row
LEAF_NODE	351:40	351:40	19	,
ARGUMENT	351:42	351:42	19	0
FIELD	351:42	351:42	20	0
LEAF_NODE	351:42	351:42	21	0
LEAF_NODE	351:43	351:43	19	,
ARGUMENT	351:45	351:45	19	s
FIELD	351:45	351:45	20	s
LEAF_NODE	351:45	351:45	21	s
LEAF_NODE	351:46	351:46	19	)
REL_OPERATOR	351:48	351:48	18	<
LEAF_NODE	351:48	351:48	19	<
FIELD	351:50	351:50	18	0
LEAF_NODE	351:50	351:50	19	0
LEAF_NODE	351:51	351:51	16	)
STATEMENTS	351:53	354:5	16	
LEAF_NODE	351:53	351:53	17	{
STATEMENTS	352:6	352:6	17	
SELECTION	352:6	353:7	18	
KEYWORD	352:6	352:6	19	if
LEAF_NODE	352:6	352:6	20	if
LEAF_NODE	352:9	352:9	19	(
CONDITION	352:10	352:10	19	stoponerr
EXPR	352:10	352:10	20	stoponerr
FIELD	352:10	352:10	21	stoponerr
LEAF_NODE	352:10	352:10	22	stoponerr
LEAF_NODE	352:19	352:19	19	)
STATEMENTS	353:7	353:7	19	
JUMP_STATEMENT	353:7	353:12	20	break DESTINATION ;
KEYWORD	353:7	353:7	21	break
LEAF_NODE	353:7	353:7	22	break
LEAF_NODE	0:0	0:0	21	DESTINATION
LEAF_NODE	353:12	353:12	21	;
LEAF_NODE	354:5	354:5	17	}
SELECTION	354:7	354:12	15	
KEYWORD	354:7	354:7	16	else
LEAF_NODE	354:7	354:7	17	else
STATEMENTS	354:12	354:12	16	
SELECTION	354:12	355:6	17	
KEYWORD	354:12	354:12	18	if
LEAF_NODE	354:12	354:12	19	if
LEAF_NODE	354:15	354:15	18	(
CONDITION	354:16	354:16	18	showdata
EXPR	354:16	354:16	19	showdata
FIELD	354:16	354:16	20	showdata
LEAF_NODE	354:16	354:16	21	showdata
LEAF_NODE	354:24	354:24	18	)
STATEMENTS	355:6	355:6	18	
EXPR_STATEMENT	355:6	355:45	19	ShowTile ( row , col , s , buf , th , rowsize ) ;
EXPR	355:6	355:6	20	ShowTile ( row , col , s , buf , th , rowsize )
FUNCTION_CALL	355:6	355:44	21	ShowTile ( row , col , s , buf , th , rowsize )
CALLEE	355:6	355:6	22	ShowTile
LEAF_NODE	355:6	355:6	23	ShowTile
LEAF_NODE	355:14	355:14	22	(
ARGUMENT	355:15	355:15	22	row
FIELD	355:15	355:15	23	row
LEAF_NODE	355:15	355:15	24	row
LEAF_NODE	355:18	355:18	22	,
ARGUMENT	355:20	355:20	22	col
FIELD	355:20	355:20	23	col
LEAF_NODE	355:20	355:20	24	col
LEAF_NODE	355:23	355:23	22	,
ARGUMENT	355:25	355:25	22	s
FIELD	355:25	355:25	23	s
LEAF_NODE	355:25	355:25	24	s
LEAF_NODE	355:26	355:26	22	,
ARGUMENT	355:28	355:28	22	buf
FIELD	355:28	355:28	23	buf
LEAF_NODE	355:28	355:28	24	buf
LEAF_NODE	355:31	355:31	22	,
ARGUMENT	355:33	355:33	22	th
FIELD	355:33	355:33	23	th
LEAF_NODE	355:33	355:33	24	th
LEAF_NODE	355:35	355:35	22	,
ARGUMENT	355:37	355:37	22	rowsize
FIELD	355:37	355:37	23	rowsize
LEAF_NODE	355:37	355:37	24	rowsize
LEAF_NODE	355:44	355:44	22	)
LEAF_NODE	355:45	355:45	20	;
LEAF_NODE	356:4	356:4	14	}
LEAF_NODE	357:3	357:3	11	}
LEAF_NODE	358:2	358:2	8	}
EXPR_STATEMENT	359:2	359:16	6	_TIFFfree ( buf ) ;
EXPR	359:2	359:2	7	_TIFFfree ( buf )
FUNCTION_CALL	359:2	359:15	8	_TIFFfree ( buf )
CALLEE	359:2	359:2	9	_TIFFfree
LEAF_NODE	359:2	359:2	10	_TIFFfree
LEAF_NODE	359:11	359:11	9	(
ARGUMENT	359:12	359:12	9	buf
FIELD	359:12	359:12	10	buf
LEAF_NODE	359:12	359:12	11	buf
LEAF_NODE	359:15	359:15	9	)
LEAF_NODE	359:16	359:16	7	;
LEAF_NODE	360:1	360:1	5	}
LEAF_NODE	361:0	361:0	2	}
FUNCTION_DEF	363:0	380:0	1	
RETURN_TYPE	363:0	363:0	2	void
TYPE_NAME	363:0	363:0	3	void
LEAF_NODE	363:0	363:0	4	void
FUNCTION_NAME	364:0	364:0	2	TIFFReadData
LEAF_NODE	364:0	364:0	3	TIFFReadData
PARAMETER_LIST	364:12	364:22	2	( TIFF * tif )
LEAF_NODE	364:12	364:12	3	(
PARAMETER_DECL	364:13	364:19	3	TIFF * tif
TYPE	364:13	364:17	4	TIFF *
TYPE_NAME	364:13	364:13	5	TIFF
LEAF_NODE	364:13	364:13	6	TIFF
POINTER	364:17	364:17	5	*
LEAF_NODE	364:17	364:17	6	*
NAME	364:19	364:19	4	tif
LEAF_NODE	364:19	364:19	5	tif
LEAF_NODE	364:22	364:22	3	)
LEAF_NODE	365:0	365:0	2	{
STATEMENTS	366:1	374:3	2	
SIMPLE_DECL	366:1	366:14	3	uint16 config ;
VAR_DECL	366:1	366:8	4	uint16 config
TYPE	366:1	366:1	5	uint16
TYPE_NAME	366:1	366:1	6	uint16
LEAF_NODE	366:1	366:1	7	uint16
NAME	366:8	366:8	5	config
LEAF_NODE	366:8	366:8	6	config
LEAF_NODE	366:14	366:14	4	;
EXPR_STATEMENT	368:1	368:49	3	TIFFGetField ( tif , TIFFTAG_PLANARCONFIG , & config ) ;
EXPR	368:1	368:1	4	TIFFGetField ( tif , TIFFTAG_PLANARCONFIG , & config )
FUNCTION_CALL	368:1	368:48	5	TIFFGetField ( tif , TIFFTAG_PLANARCONFIG , & config )
CALLEE	368:1	368:1	6	TIFFGetField
LEAF_NODE	368:1	368:1	7	TIFFGetField
LEAF_NODE	368:13	368:13	6	(
ARGUMENT	368:14	368:14	6	tif
FIELD	368:14	368:14	7	tif
LEAF_NODE	368:14	368:14	8	tif
LEAF_NODE	368:17	368:17	6	,
ARGUMENT	368:19	368:19	6	TIFFTAG_PLANARCONFIG
FIELD	368:19	368:19	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	368:19	368:19	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	368:39	368:39	6	,
ARGUMENT	368:41	368:41	6	& config
UNARY_EXPR	368:41	368:42	7	& config
UNARY_OPERATOR	368:41	368:41	8	&
LEAF_NODE	368:41	368:41	9	&
FIELD	368:42	368:42	8	config
LEAF_NODE	368:42	368:42	9	config
LEAF_NODE	368:48	368:48	6	)
LEAF_NODE	368:49	368:49	4	;
SELECTION	369:1	369:23	3	
KEYWORD	369:1	369:1	4	if
LEAF_NODE	369:1	369:1	5	if
LEAF_NODE	369:4	369:4	4	(
CONDITION	369:5	369:5	4	TIFFIsTiled ( tif )
EXPR	369:5	369:5	5	TIFFIsTiled ( tif )
FUNCTION_CALL	369:5	369:20	6	TIFFIsTiled ( tif )
CALLEE	369:5	369:5	7	TIFFIsTiled
LEAF_NODE	369:5	369:5	8	TIFFIsTiled
LEAF_NODE	369:16	369:16	7	(
ARGUMENT	369:17	369:17	7	tif
FIELD	369:17	369:17	8	tif
LEAF_NODE	369:17	369:17	9	tif
LEAF_NODE	369:20	369:20	7	)
LEAF_NODE	369:21	369:21	4	)
STATEMENTS	369:23	374:1	4	
LEAF_NODE	369:23	369:23	5	{
STATEMENTS	370:2	372:2	5	
SELECTION	370:2	371:3	6	
KEYWORD	370:2	370:2	7	if
LEAF_NODE	370:2	370:2	8	if
LEAF_NODE	370:5	370:5	7	(
CONDITION	370:6	370:6	7	config == PLANARCONFIG_CONTIG
EXPR	370:6	370:16	8	config == PLANARCONFIG_CONTIG
FIELD	370:6	370:6	9	config
LEAF_NODE	370:6	370:6	10	config
EQ_OPERATOR	370:13	370:13	9	==
LEAF_NODE	370:13	370:13	10	==
FIELD	370:16	370:16	9	PLANARCONFIG_CONTIG
LEAF_NODE	370:16	370:16	10	PLANARCONFIG_CONTIG
LEAF_NODE	370:35	370:35	7	)
STATEMENTS	371:3	371:3	7	
EXPR_STATEMENT	371:3	371:30	8	TIFFReadContigTileData ( tif ) ;
EXPR	371:3	371:3	9	TIFFReadContigTileData ( tif )
FUNCTION_CALL	371:3	371:29	10	TIFFReadContigTileData ( tif )
CALLEE	371:3	371:3	11	TIFFReadContigTileData
LEAF_NODE	371:3	371:3	12	TIFFReadContigTileData
LEAF_NODE	371:25	371:25	11	(
ARGUMENT	371:26	371:26	11	tif
FIELD	371:26	371:26	12	tif
LEAF_NODE	371:26	371:26	13	tif
LEAF_NODE	371:29	371:29	11	)
LEAF_NODE	371:30	371:30	9	;
SELECTION	372:2	373:3	6	
KEYWORD	372:2	372:2	7	else
LEAF_NODE	372:2	372:2	8	else
STATEMENTS	373:3	373:3	7	
EXPR_STATEMENT	373:3	373:32	8	TIFFReadSeparateTileData ( tif ) ;
EXPR	373:3	373:3	9	TIFFReadSeparateTileData ( tif )
FUNCTION_CALL	373:3	373:31	10	TIFFReadSeparateTileData ( tif )
CALLEE	373:3	373:3	11	TIFFReadSeparateTileData
LEAF_NODE	373:3	373:3	12	TIFFReadSeparateTileData
LEAF_NODE	373:27	373:27	11	(
ARGUMENT	373:28	373:28	11	tif
FIELD	373:28	373:28	12	tif
LEAF_NODE	373:28	373:28	13	tif
LEAF_NODE	373:31	373:31	11	)
LEAF_NODE	373:32	373:32	9	;
LEAF_NODE	374:1	374:1	5	}
SELECTION	374:3	374:8	3	
KEYWORD	374:3	374:3	4	else
LEAF_NODE	374:3	374:3	5	else
STATEMENTS	374:8	379:1	4	
LEAF_NODE	374:8	374:8	5	{
STATEMENTS	375:2	377:2	5	
SELECTION	375:2	376:3	6	
KEYWORD	375:2	375:2	7	if
LEAF_NODE	375:2	375:2	8	if
LEAF_NODE	375:5	375:5	7	(
CONDITION	375:6	375:6	7	config == PLANARCONFIG_CONTIG
EXPR	375:6	375:16	8	config == PLANARCONFIG_CONTIG
FIELD	375:6	375:6	9	config
LEAF_NODE	375:6	375:6	10	config
EQ_OPERATOR	375:13	375:13	9	==
LEAF_NODE	375:13	375:13	10	==
FIELD	375:16	375:16	9	PLANARCONFIG_CONTIG
LEAF_NODE	375:16	375:16	10	PLANARCONFIG_CONTIG
LEAF_NODE	375:35	375:35	7	)
STATEMENTS	376:3	376:3	7	
EXPR_STATEMENT	376:3	376:31	8	TIFFReadContigStripData ( tif ) ;
EXPR	376:3	376:3	9	TIFFReadContigStripData ( tif )
FUNCTION_CALL	376:3	376:30	10	TIFFReadContigStripData ( tif )
CALLEE	376:3	376:3	11	TIFFReadContigStripData
LEAF_NODE	376:3	376:3	12	TIFFReadContigStripData
LEAF_NODE	376:26	376:26	11	(
ARGUMENT	376:27	376:27	11	tif
FIELD	376:27	376:27	12	tif
LEAF_NODE	376:27	376:27	13	tif
LEAF_NODE	376:30	376:30	11	)
LEAF_NODE	376:31	376:31	9	;
SELECTION	377:2	378:3	6	
KEYWORD	377:2	377:2	7	else
LEAF_NODE	377:2	377:2	8	else
STATEMENTS	378:3	378:3	7	
EXPR_STATEMENT	378:3	378:33	8	TIFFReadSeparateStripData ( tif ) ;
EXPR	378:3	378:3	9	TIFFReadSeparateStripData ( tif )
FUNCTION_CALL	378:3	378:32	10	TIFFReadSeparateStripData ( tif )
CALLEE	378:3	378:3	11	TIFFReadSeparateStripData
LEAF_NODE	378:3	378:3	12	TIFFReadSeparateStripData
LEAF_NODE	378:28	378:28	11	(
ARGUMENT	378:29	378:29	11	tif
FIELD	378:29	378:29	12	tif
LEAF_NODE	378:29	378:29	13	tif
LEAF_NODE	378:32	378:32	11	)
LEAF_NODE	378:33	378:33	9	;
LEAF_NODE	379:1	379:1	5	}
LEAF_NODE	380:0	380:0	2	}
FUNCTION_DEF	382:0	393:0	1	
RETURN_TYPE	382:0	382:7	2	static void
LEAF_NODE	382:0	382:0	3	static
TYPE_NAME	382:7	382:7	3	void
LEAF_NODE	382:7	382:7	4	void
FUNCTION_NAME	383:0	383:0	2	ShowRawBytes
LEAF_NODE	383:0	383:0	3	ShowRawBytes
PARAMETER_LIST	383:12	383:40	2	( unsigned char * pp , uint32 n )
LEAF_NODE	383:12	383:12	3	(
PARAMETER_DECL	383:13	383:28	3	unsigned char * pp
TYPE	383:13	383:26	4	unsigned char *
TYPE_NAME	383:13	383:22	5	unsigned char
LEAF_NODE	383:13	383:13	6	unsigned
LEAF_NODE	383:22	383:22	6	char
POINTER	383:26	383:26	5	*
LEAF_NODE	383:26	383:26	6	*
NAME	383:28	383:28	4	pp
LEAF_NODE	383:28	383:28	5	pp
LEAF_NODE	383:30	383:30	3	,
PARAMETER_DECL	383:32	383:39	3	uint32 n
TYPE	383:32	383:32	4	uint32
TYPE_NAME	383:32	383:32	5	uint32
LEAF_NODE	383:32	383:32	6	uint32
NAME	383:39	383:39	4	n
LEAF_NODE	383:39	383:39	5	n
LEAF_NODE	383:40	383:40	3	)
LEAF_NODE	384:0	384:0	2	{
STATEMENTS	385:1	392:1	2	
SIMPLE_DECL	385:1	385:9	3	uint32 i ;
VAR_DECL	385:1	385:8	4	uint32 i
TYPE	385:1	385:1	5	uint32
TYPE_NAME	385:1	385:1	6	uint32
LEAF_NODE	385:1	385:1	7	uint32
NAME	385:8	385:8	5	i
LEAF_NODE	385:8	385:8	6	i
LEAF_NODE	385:9	385:9	4	;
ITERATION	387:1	387:25	3	
KEYWORD	387:1	387:1	4	for
LEAF_NODE	387:1	387:1	5	for
LEAF_NODE	387:5	387:5	4	(
FOR_INIT	387:6	387:11	4	i = 0 ;
EXPR	387:6	387:6	5	i = 0
ASSIGN	387:6	387:10	6	i = 0
LVAL	387:6	387:6	7	i
FIELD	387:6	387:6	8	i
LEAF_NODE	387:6	387:6	9	i
ASSIGN_OP	387:8	387:8	7	=
LEAF_NODE	387:8	387:8	8	=
RVAL	387:10	387:10	7	0
FIELD	387:10	387:10	8	0
LEAF_NODE	387:10	387:10	9	0
LEAF_NODE	387:11	387:11	5	;
CONDITION	387:13	387:13	4	i < n
EXPR	387:13	387:17	5	i < n
FIELD	387:13	387:13	6	i
LEAF_NODE	387:13	387:13	7	i
REL_OPERATOR	387:15	387:15	6	<
LEAF_NODE	387:15	387:15	7	<
FIELD	387:17	387:17	6	n
LEAF_NODE	387:17	387:17	7	n
LEAF_NODE	387:18	387:18	4	;
FOR_EXPR	387:20	387:20	4	i ++
EXPR	387:20	387:20	5	i ++
FIELD	387:20	387:21	6	i ++
LEAF_NODE	387:20	387:20	7	i
LEAF_NODE	387:21	387:21	7	++
LEAF_NODE	387:23	387:23	4	)
STATEMENTS	387:25	391:1	4	
LEAF_NODE	387:25	387:25	5	{
STATEMENTS	388:2	389:2	5	
EXPR_STATEMENT	388:2	388:24	6	printf ( " %02x" , * pp ++ ) ;
EXPR	388:2	388:2	7	printf ( " %02x" , * pp ++ )
FUNCTION_CALL	388:2	388:23	8	printf ( " %02x" , * pp ++ )
CALLEE	388:2	388:2	9	printf
LEAF_NODE	388:2	388:2	10	printf
LEAF_NODE	388:8	388:8	9	(
ARGUMENT	388:9	388:9	9	" %02x"
FIELD	388:9	388:9	10	" %02x"
LEAF_NODE	388:9	388:9	11	" %02x"
LEAF_NODE	388:16	388:16	9	,
ARGUMENT	388:18	388:18	9	* pp ++
UNARY_EXPR	388:18	388:19	10	* pp ++
UNARY_OPERATOR	388:18	388:18	11	*
LEAF_NODE	388:18	388:18	12	*
FIELD	388:19	388:21	11	pp ++
LEAF_NODE	388:19	388:19	12	pp
LEAF_NODE	388:21	388:21	12	++
LEAF_NODE	388:23	388:23	9	)
LEAF_NODE	388:24	388:24	7	;
SELECTION	389:2	390:3	6	
KEYWORD	389:2	389:2	7	if
LEAF_NODE	389:2	389:2	8	if
LEAF_NODE	389:5	389:5	7	(
CONDITION	389:6	389:6	7	( ( i + 1 ) % 24 ) == 0
EXPR	389:6	389:22	8	( ( i + 1 ) % 24 ) == 0
LEAF_NODE	389:6	389:6	9	(
LEAF_NODE	389:7	389:7	9	(
FIELD	389:8	389:8	9	i
LEAF_NODE	389:8	389:8	10	i
LEAF_NODE	389:9	389:9	9	+
FIELD	389:10	389:10	9	1
LEAF_NODE	389:10	389:10	10	1
LEAF_NODE	389:11	389:11	9	)
LEAF_NODE	389:13	389:13	9	%
FIELD	389:15	389:15	9	24
LEAF_NODE	389:15	389:15	10	24
LEAF_NODE	389:17	389:17	9	)
EQ_OPERATOR	389:19	389:19	9	==
LEAF_NODE	389:19	389:19	10	==
FIELD	389:22	389:22	9	0
LEAF_NODE	389:22	389:22	10	0
LEAF_NODE	389:23	389:23	7	)
STATEMENTS	390:3	390:3	7	
EXPR_STATEMENT	390:3	390:16	8	printf ( "\n " ) ;
EXPR	390:3	390:3	9	printf ( "\n " )
FUNCTION_CALL	390:3	390:15	10	printf ( "\n " )
CALLEE	390:3	390:3	11	printf
LEAF_NODE	390:3	390:3	12	printf
LEAF_NODE	390:9	390:9	11	(
ARGUMENT	390:10	390:10	11	"\n "
FIELD	390:10	390:10	12	"\n "
LEAF_NODE	390:10	390:10	13	"\n "
LEAF_NODE	390:15	390:15	11	)
LEAF_NODE	390:16	390:16	9	;
LEAF_NODE	391:1	391:1	5	}
EXPR_STATEMENT	392:1	392:14	3	putchar ( '\n' ) ;
EXPR	392:1	392:1	4	putchar ( '\n' )
FUNCTION_CALL	392:1	392:13	5	putchar ( '\n' )
CALLEE	392:1	392:1	6	putchar
LEAF_NODE	392:1	392:1	7	putchar
LEAF_NODE	392:8	392:8	6	(
ARGUMENT	392:9	392:9	6	'\n'
FIELD	392:9	392:9	7	'\n'
LEAF_NODE	392:9	392:9	8	'\n'
LEAF_NODE	392:13	392:13	6	)
LEAF_NODE	392:14	392:14	4	;
LEAF_NODE	393:0	393:0	2	}
FUNCTION_DEF	395:0	406:0	1	
RETURN_TYPE	395:0	395:7	2	static void
LEAF_NODE	395:0	395:0	3	static
TYPE_NAME	395:7	395:7	3	void
LEAF_NODE	395:7	395:7	4	void
FUNCTION_NAME	396:0	396:0	2	ShowRawWords
LEAF_NODE	396:0	396:0	3	ShowRawWords
PARAMETER_LIST	396:12	396:33	2	( uint16 * pp , uint32 n )
LEAF_NODE	396:12	396:12	3	(
PARAMETER_DECL	396:13	396:21	3	uint16 * pp
TYPE	396:13	396:19	4	uint16 *
TYPE_NAME	396:13	396:13	5	uint16
LEAF_NODE	396:13	396:13	6	uint16
POINTER	396:19	396:19	5	*
LEAF_NODE	396:19	396:19	6	*
NAME	396:21	396:21	4	pp
LEAF_NODE	396:21	396:21	5	pp
LEAF_NODE	396:23	396:23	3	,
PARAMETER_DECL	396:25	396:32	3	uint32 n
TYPE	396:25	396:25	4	uint32
TYPE_NAME	396:25	396:25	5	uint32
LEAF_NODE	396:25	396:25	6	uint32
NAME	396:32	396:32	4	n
LEAF_NODE	396:32	396:32	5	n
LEAF_NODE	396:33	396:33	3	)
LEAF_NODE	397:0	397:0	2	{
STATEMENTS	398:1	405:1	2	
SIMPLE_DECL	398:1	398:9	3	uint32 i ;
VAR_DECL	398:1	398:8	4	uint32 i
TYPE	398:1	398:1	5	uint32
TYPE_NAME	398:1	398:1	6	uint32
LEAF_NODE	398:1	398:1	7	uint32
NAME	398:8	398:8	5	i
LEAF_NODE	398:8	398:8	6	i
LEAF_NODE	398:9	398:9	4	;
ITERATION	400:1	400:25	3	
KEYWORD	400:1	400:1	4	for
LEAF_NODE	400:1	400:1	5	for
LEAF_NODE	400:5	400:5	4	(
FOR_INIT	400:6	400:11	4	i = 0 ;
EXPR	400:6	400:6	5	i = 0
ASSIGN	400:6	400:10	6	i = 0
LVAL	400:6	400:6	7	i
FIELD	400:6	400:6	8	i
LEAF_NODE	400:6	400:6	9	i
ASSIGN_OP	400:8	400:8	7	=
LEAF_NODE	400:8	400:8	8	=
RVAL	400:10	400:10	7	0
FIELD	400:10	400:10	8	0
LEAF_NODE	400:10	400:10	9	0
LEAF_NODE	400:11	400:11	5	;
CONDITION	400:13	400:13	4	i < n
EXPR	400:13	400:17	5	i < n
FIELD	400:13	400:13	6	i
LEAF_NODE	400:13	400:13	7	i
REL_OPERATOR	400:15	400:15	6	<
LEAF_NODE	400:15	400:15	7	<
FIELD	400:17	400:17	6	n
LEAF_NODE	400:17	400:17	7	n
LEAF_NODE	400:18	400:18	4	;
FOR_EXPR	400:20	400:20	4	i ++
EXPR	400:20	400:20	5	i ++
FIELD	400:20	400:21	6	i ++
LEAF_NODE	400:20	400:20	7	i
LEAF_NODE	400:21	400:21	7	++
LEAF_NODE	400:23	400:23	4	)
STATEMENTS	400:25	404:1	4	
LEAF_NODE	400:25	400:25	5	{
STATEMENTS	401:2	402:2	5	
EXPR_STATEMENT	401:2	401:24	6	printf ( " %04x" , * pp ++ ) ;
EXPR	401:2	401:2	7	printf ( " %04x" , * pp ++ )
FUNCTION_CALL	401:2	401:23	8	printf ( " %04x" , * pp ++ )
CALLEE	401:2	401:2	9	printf
LEAF_NODE	401:2	401:2	10	printf
LEAF_NODE	401:8	401:8	9	(
ARGUMENT	401:9	401:9	9	" %04x"
FIELD	401:9	401:9	10	" %04x"
LEAF_NODE	401:9	401:9	11	" %04x"
LEAF_NODE	401:16	401:16	9	,
ARGUMENT	401:18	401:18	9	* pp ++
UNARY_EXPR	401:18	401:19	10	* pp ++
UNARY_OPERATOR	401:18	401:18	11	*
LEAF_NODE	401:18	401:18	12	*
FIELD	401:19	401:21	11	pp ++
LEAF_NODE	401:19	401:19	12	pp
LEAF_NODE	401:21	401:21	12	++
LEAF_NODE	401:23	401:23	9	)
LEAF_NODE	401:24	401:24	7	;
SELECTION	402:2	403:3	6	
KEYWORD	402:2	402:2	7	if
LEAF_NODE	402:2	402:2	8	if
LEAF_NODE	402:5	402:5	7	(
CONDITION	402:6	402:6	7	( ( i + 1 ) % 15 ) == 0
EXPR	402:6	402:22	8	( ( i + 1 ) % 15 ) == 0
LEAF_NODE	402:6	402:6	9	(
LEAF_NODE	402:7	402:7	9	(
FIELD	402:8	402:8	9	i
LEAF_NODE	402:8	402:8	10	i
LEAF_NODE	402:9	402:9	9	+
FIELD	402:10	402:10	9	1
LEAF_NODE	402:10	402:10	10	1
LEAF_NODE	402:11	402:11	9	)
LEAF_NODE	402:13	402:13	9	%
FIELD	402:15	402:15	9	15
LEAF_NODE	402:15	402:15	10	15
LEAF_NODE	402:17	402:17	9	)
EQ_OPERATOR	402:19	402:19	9	==
LEAF_NODE	402:19	402:19	10	==
FIELD	402:22	402:22	9	0
LEAF_NODE	402:22	402:22	10	0
LEAF_NODE	402:23	402:23	7	)
STATEMENTS	403:3	403:3	7	
EXPR_STATEMENT	403:3	403:16	8	printf ( "\n " ) ;
EXPR	403:3	403:3	9	printf ( "\n " )
FUNCTION_CALL	403:3	403:15	10	printf ( "\n " )
CALLEE	403:3	403:3	11	printf
LEAF_NODE	403:3	403:3	12	printf
LEAF_NODE	403:9	403:9	11	(
ARGUMENT	403:10	403:10	11	"\n "
FIELD	403:10	403:10	12	"\n "
LEAF_NODE	403:10	403:10	13	"\n "
LEAF_NODE	403:15	403:15	11	)
LEAF_NODE	403:16	403:16	9	;
LEAF_NODE	404:1	404:1	5	}
EXPR_STATEMENT	405:1	405:14	3	putchar ( '\n' ) ;
EXPR	405:1	405:1	4	putchar ( '\n' )
FUNCTION_CALL	405:1	405:13	5	putchar ( '\n' )
CALLEE	405:1	405:1	6	putchar
LEAF_NODE	405:1	405:1	7	putchar
LEAF_NODE	405:8	405:8	6	(
ARGUMENT	405:9	405:9	6	'\n'
FIELD	405:9	405:9	7	'\n'
LEAF_NODE	405:9	405:9	8	'\n'
LEAF_NODE	405:13	405:13	6	)
LEAF_NODE	405:14	405:14	4	;
LEAF_NODE	406:0	406:0	2	}
FUNCTION_DEF	408:0	454:0	1	
RETURN_TYPE	408:0	408:0	2	void
TYPE_NAME	408:0	408:0	3	void
LEAF_NODE	408:0	408:0	4	void
FUNCTION_NAME	409:0	409:0	2	TIFFReadRawData
LEAF_NODE	409:0	409:0	3	TIFFReadRawData
PARAMETER_LIST	409:15	409:37	2	( TIFF * tif , int bitrev )
LEAF_NODE	409:15	409:15	3	(
PARAMETER_DECL	409:16	409:22	3	TIFF * tif
TYPE	409:16	409:20	4	TIFF *
TYPE_NAME	409:16	409:16	5	TIFF
LEAF_NODE	409:16	409:16	6	TIFF
POINTER	409:20	409:20	5	*
LEAF_NODE	409:20	409:20	6	*
NAME	409:22	409:22	4	tif
LEAF_NODE	409:22	409:22	5	tif
LEAF_NODE	409:25	409:25	3	,
PARAMETER_DECL	409:27	409:31	3	int bitrev
TYPE	409:27	409:27	4	int
TYPE_NAME	409:27	409:27	5	int
LEAF_NODE	409:27	409:27	6	int
NAME	409:31	409:31	4	bitrev
LEAF_NODE	409:31	409:31	5	bitrev
LEAF_NODE	409:37	409:37	3	)
LEAF_NODE	410:0	410:0	2	{
STATEMENTS	411:1	416:1	2	
SIMPLE_DECL	411:1	411:43	3	tstrip_t nstrips ; nstrips = TIFFNumberOfStrips ( tif ) ;
VAR_DECL	411:1	411:10	4	tstrip_t nstrips ; nstrips = TIFFNumberOfStrips ( tif )
TYPE	411:1	411:1	5	tstrip_t
TYPE_NAME	411:1	411:1	6	tstrip_t
LEAF_NODE	411:1	411:1	7	tstrip_t
NAME	411:10	411:10	5	nstrips
LEAF_NODE	411:10	411:10	6	nstrips
LEAF_NODE	0:0	0:0	5	;
INIT	411:10	411:10	5	nstrips = TIFFNumberOfStrips ( tif )
ASSIGN	411:10	411:20	6	nstrips = TIFFNumberOfStrips ( tif )
LVAL	411:10	411:10	7	nstrips
NAME	411:10	411:10	8	nstrips
LEAF_NODE	411:10	411:10	9	nstrips
ASSIGN_OP	411:18	411:18	7	=
LEAF_NODE	411:18	411:18	8	=
RVAL	411:20	411:20	7	TIFFNumberOfStrips ( tif )
FUNCTION_CALL	411:20	411:42	8	TIFFNumberOfStrips ( tif )
CALLEE	411:20	411:20	9	TIFFNumberOfStrips
LEAF_NODE	411:20	411:20	10	TIFFNumberOfStrips
LEAF_NODE	411:38	411:38	9	(
ARGUMENT	411:39	411:39	9	tif
FIELD	411:39	411:39	10	tif
LEAF_NODE	411:39	411:39	11	tif
LEAF_NODE	411:42	411:42	9	)
LEAF_NODE	411:43	411:43	4	;
SIMPLE_DECL	412:1	412:55	3	const char * what ; what = TIFFIsTiled ( tif ) ? "Tile" : "Strip" ;
VAR_DECL	412:1	412:13	4	const char * what ; what = TIFFIsTiled ( tif ) ? "Tile" : "Strip"
TYPE	412:1	412:11	5	const char *
TYPE_NAME	412:1	412:7	6	const char
LEAF_NODE	412:1	412:1	7	const
LEAF_NODE	412:7	412:7	7	char
POINTER	412:11	412:11	6	*
LEAF_NODE	412:11	412:11	7	*
NAME	412:13	412:13	5	what
LEAF_NODE	412:13	412:13	6	what
LEAF_NODE	0:0	0:0	5	;
INIT	412:13	412:13	5	what = TIFFIsTiled ( tif ) ? "Tile" : "Strip"
ASSIGN	412:13	412:20	6	what = TIFFIsTiled ( tif ) ? "Tile" : "Strip"
LVAL	412:13	412:13	7	what
NAME	412:13	412:13	8	what
LEAF_NODE	412:13	412:13	9	what
ASSIGN_OP	412:18	412:18	7	=
LEAF_NODE	412:18	412:18	8	=
RVAL	412:20	412:20	7	TIFFIsTiled ( tif ) ? "Tile" : "Strip"
COND_EXPR	412:20	412:48	8	TIFFIsTiled ( tif ) ? "Tile" : "Strip"
CONDITION	412:20	412:20	9	TIFFIsTiled ( tif )
FUNCTION_CALL	412:20	412:35	10	TIFFIsTiled ( tif )
CALLEE	412:20	412:20	11	TIFFIsTiled
LEAF_NODE	412:20	412:20	12	TIFFIsTiled
LEAF_NODE	412:31	412:31	11	(
ARGUMENT	412:32	412:32	11	tif
FIELD	412:32	412:32	12	tif
LEAF_NODE	412:32	412:32	13	tif
LEAF_NODE	412:35	412:35	11	)
LEAF_NODE	412:37	412:37	9	?
EXPR	412:39	412:39	9	"Tile"
FIELD	412:39	412:39	10	"Tile"
LEAF_NODE	412:39	412:39	11	"Tile"
LEAF_NODE	412:46	412:46	9	:
FIELD	412:48	412:48	9	"Strip"
LEAF_NODE	412:48	412:48	10	"Strip"
LEAF_NODE	412:55	412:55	4	;
SIMPLE_DECL	413:1	413:16	3	uint64 * stripbc ;
VAR_DECL	413:1	413:9	4	uint64 * stripbc
TYPE	413:1	413:7	5	uint64 *
TYPE_NAME	413:1	413:1	6	uint64
LEAF_NODE	413:1	413:1	7	uint64
POINTER	413:7	413:7	6	*
LEAF_NODE	413:7	413:7	7	*
NAME	413:9	413:9	5	stripbc
LEAF_NODE	413:9	413:9	6	stripbc
LEAF_NODE	413:16	413:16	4	;
EXPR_STATEMENT	415:1	415:53	3	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & stripbc ) ;
EXPR	415:1	415:1	4	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & stripbc )
FUNCTION_CALL	415:1	415:52	5	TIFFGetField ( tif , TIFFTAG_STRIPBYTECOUNTS , & stripbc )
CALLEE	415:1	415:1	6	TIFFGetField
LEAF_NODE	415:1	415:1	7	TIFFGetField
LEAF_NODE	415:13	415:13	6	(
ARGUMENT	415:14	415:14	6	tif
FIELD	415:14	415:14	7	tif
LEAF_NODE	415:14	415:14	8	tif
LEAF_NODE	415:17	415:17	6	,
ARGUMENT	415:19	415:19	6	TIFFTAG_STRIPBYTECOUNTS
FIELD	415:19	415:19	7	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	415:19	415:19	8	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	415:42	415:42	6	,
ARGUMENT	415:44	415:44	6	& stripbc
UNARY_EXPR	415:44	415:45	7	& stripbc
UNARY_OPERATOR	415:44	415:44	8	&
LEAF_NODE	415:44	415:44	9	&
FIELD	415:45	415:45	8	stripbc
LEAF_NODE	415:45	415:45	9	stripbc
LEAF_NODE	415:52	415:52	6	)
LEAF_NODE	415:53	415:53	4	;
SELECTION	416:1	416:18	3	
KEYWORD	416:1	416:1	4	if
LEAF_NODE	416:1	416:1	5	if
LEAF_NODE	416:4	416:4	4	(
CONDITION	416:5	416:5	4	nstrips > 0
EXPR	416:5	416:15	5	nstrips > 0
FIELD	416:5	416:5	6	nstrips
LEAF_NODE	416:5	416:5	7	nstrips
REL_OPERATOR	416:13	416:13	6	>
LEAF_NODE	416:13	416:13	7	>
FIELD	416:15	416:15	6	0
LEAF_NODE	416:15	416:15	7	0
LEAF_NODE	416:16	416:16	4	)
STATEMENTS	416:18	453:1	4	
LEAF_NODE	416:18	416:18	5	{
STATEMENTS	417:2	451:2	5	
SIMPLE_DECL	417:2	417:29	6	uint32 bufsize ; bufsize = stripbc [ 0 ] ;
VAR_DECL	417:2	417:9	7	uint32 bufsize ; bufsize = stripbc [ 0 ]
TYPE	417:2	417:2	8	uint32
TYPE_NAME	417:2	417:2	9	uint32
LEAF_NODE	417:2	417:2	10	uint32
NAME	417:9	417:9	8	bufsize
LEAF_NODE	417:9	417:9	9	bufsize
LEAF_NODE	0:0	0:0	8	;
INIT	417:9	417:9	8	bufsize = stripbc [ 0 ]
ASSIGN	417:9	417:19	9	bufsize = stripbc [ 0 ]
LVAL	417:9	417:9	10	bufsize
NAME	417:9	417:9	11	bufsize
LEAF_NODE	417:9	417:9	12	bufsize
ASSIGN_OP	417:17	417:17	10	=
LEAF_NODE	417:17	417:17	11	=
RVAL	417:19	417:19	10	stripbc [ 0 ]
FIELD	417:19	417:28	11	stripbc [ 0 ]
LEAF_NODE	417:19	417:19	12	stripbc
LEAF_NODE	417:26	417:26	12	[
EXPR	417:27	417:27	12	0
FIELD	417:27	417:27	13	0
LEAF_NODE	417:27	417:27	14	0
LEAF_NODE	417:28	417:28	12	]
LEAF_NODE	417:29	417:29	7	;
SIMPLE_DECL	418:2	418:36	6	tdata_t buf ; buf = _TIFFmalloc ( bufsize ) ;
VAR_DECL	418:2	418:10	7	tdata_t buf ; buf = _TIFFmalloc ( bufsize )
TYPE	418:2	418:2	8	tdata_t
TYPE_NAME	418:2	418:2	9	tdata_t
LEAF_NODE	418:2	418:2	10	tdata_t
NAME	418:10	418:10	8	buf
LEAF_NODE	418:10	418:10	9	buf
LEAF_NODE	0:0	0:0	8	;
INIT	418:10	418:10	8	buf = _TIFFmalloc ( bufsize )
ASSIGN	418:10	418:16	9	buf = _TIFFmalloc ( bufsize )
LVAL	418:10	418:10	10	buf
NAME	418:10	418:10	11	buf
LEAF_NODE	418:10	418:10	12	buf
ASSIGN_OP	418:14	418:14	10	=
LEAF_NODE	418:14	418:14	11	=
RVAL	418:16	418:16	10	_TIFFmalloc ( bufsize )
FUNCTION_CALL	418:16	418:35	11	_TIFFmalloc ( bufsize )
CALLEE	418:16	418:16	12	_TIFFmalloc
LEAF_NODE	418:16	418:16	13	_TIFFmalloc
LEAF_NODE	418:27	418:27	12	(
ARGUMENT	418:28	418:28	12	bufsize
FIELD	418:28	418:28	13	bufsize
LEAF_NODE	418:28	418:28	14	bufsize
LEAF_NODE	418:35	418:35	12	)
LEAF_NODE	418:36	418:36	7	;
SIMPLE_DECL	419:2	419:12	6	tstrip_t s ;
VAR_DECL	419:2	419:11	7	tstrip_t s
TYPE	419:2	419:2	8	tstrip_t
TYPE_NAME	419:2	419:2	9	tstrip_t
LEAF_NODE	419:2	419:2	10	tstrip_t
NAME	419:11	419:11	8	s
LEAF_NODE	419:11	419:11	9	s
LEAF_NODE	419:12	419:12	7	;
ITERATION	421:2	421:32	6	
KEYWORD	421:2	421:2	7	for
LEAF_NODE	421:2	421:2	8	for
LEAF_NODE	421:6	421:6	7	(
FOR_INIT	421:7	421:12	7	s = 0 ;
EXPR	421:7	421:7	8	s = 0
ASSIGN	421:7	421:11	9	s = 0
LVAL	421:7	421:7	10	s
FIELD	421:7	421:7	11	s
LEAF_NODE	421:7	421:7	12	s
ASSIGN_OP	421:9	421:9	10	=
LEAF_NODE	421:9	421:9	11	=
RVAL	421:11	421:11	10	0
FIELD	421:11	421:11	11	0
LEAF_NODE	421:11	421:11	12	0
LEAF_NODE	421:12	421:12	8	;
CONDITION	421:14	421:14	7	s < nstrips
EXPR	421:14	421:18	8	s < nstrips
FIELD	421:14	421:14	9	s
LEAF_NODE	421:14	421:14	10	s
REL_OPERATOR	421:16	421:16	9	<
LEAF_NODE	421:16	421:16	10	<
FIELD	421:18	421:18	9	nstrips
LEAF_NODE	421:18	421:18	10	nstrips
LEAF_NODE	421:25	421:25	7	;
FOR_EXPR	421:27	421:27	7	s ++
EXPR	421:27	421:27	8	s ++
FIELD	421:27	421:28	9	s ++
LEAF_NODE	421:27	421:27	10	s
LEAF_NODE	421:28	421:28	10	++
LEAF_NODE	421:30	421:30	7	)
STATEMENTS	421:32	450:2	7	
LEAF_NODE	421:32	421:32	8	{
STATEMENTS	422:3	437:5	8	
SELECTION	422:3	422:29	9	
KEYWORD	422:3	422:3	10	if
LEAF_NODE	422:3	422:3	11	if
LEAF_NODE	422:6	422:6	10	(
CONDITION	422:7	422:7	10	stripbc [ s ] > bufsize
EXPR	422:7	422:20	11	stripbc [ s ] > bufsize
FIELD	422:7	422:16	12	stripbc [ s ]
LEAF_NODE	422:7	422:7	13	stripbc
LEAF_NODE	422:14	422:14	13	[
EXPR	422:15	422:15	13	s
FIELD	422:15	422:15	14	s
LEAF_NODE	422:15	422:15	15	s
LEAF_NODE	422:16	422:16	13	]
REL_OPERATOR	422:18	422:18	12	>
LEAF_NODE	422:18	422:18	13	>
FIELD	422:20	422:20	12	bufsize
LEAF_NODE	422:20	422:20	13	bufsize
LEAF_NODE	422:27	422:27	10	)
STATEMENTS	422:29	425:3	10	
LEAF_NODE	422:29	422:29	11	{
STATEMENTS	423:4	424:4	11	
EXPR_STATEMENT	423:4	423:39	12	buf = _TIFFrealloc ( buf , stripbc [ s ] ) ;
EXPR	423:4	423:4	13	buf = _TIFFrealloc ( buf , stripbc [ s ] )
ASSIGN	423:4	423:10	14	buf = _TIFFrealloc ( buf , stripbc [ s ] )
LVAL	423:4	423:4	15	buf
FIELD	423:4	423:4	16	buf
LEAF_NODE	423:4	423:4	17	buf
ASSIGN_OP	423:8	423:8	15	=
LEAF_NODE	423:8	423:8	16	=
RVAL	423:10	423:10	15	_TIFFrealloc ( buf , stripbc [ s ] )
FUNCTION_CALL	423:10	423:38	16	_TIFFrealloc ( buf , stripbc [ s ] )
CALLEE	423:10	423:10	17	_TIFFrealloc
LEAF_NODE	423:10	423:10	18	_TIFFrealloc
LEAF_NODE	423:22	423:22	17	(
ARGUMENT	423:23	423:23	17	buf
FIELD	423:23	423:23	18	buf
LEAF_NODE	423:23	423:23	19	buf
LEAF_NODE	423:26	423:26	17	,
ARGUMENT	423:28	423:28	17	stripbc [ s ]
FIELD	423:28	423:37	18	stripbc [ s ]
LEAF_NODE	423:28	423:28	19	stripbc
LEAF_NODE	423:35	423:35	19	[
EXPR	423:36	423:36	19	s
FIELD	423:36	423:36	20	s
LEAF_NODE	423:36	423:36	21	s
LEAF_NODE	423:37	423:37	19	]
LEAF_NODE	423:38	423:38	17	)
LEAF_NODE	423:39	423:39	13	;
EXPR_STATEMENT	424:4	424:24	12	bufsize = stripbc [ s ] ;
EXPR	424:4	424:4	13	bufsize = stripbc [ s ]
ASSIGN	424:4	424:14	14	bufsize = stripbc [ s ]
LVAL	424:4	424:4	15	bufsize
FIELD	424:4	424:4	16	bufsize
LEAF_NODE	424:4	424:4	17	bufsize
ASSIGN_OP	424:12	424:12	15	=
LEAF_NODE	424:12	424:12	16	=
RVAL	424:14	424:14	15	stripbc [ s ]
FIELD	424:14	424:23	16	stripbc [ s ]
LEAF_NODE	424:14	424:14	17	stripbc
LEAF_NODE	424:21	424:21	17	[
EXPR	424:22	424:22	17	s
FIELD	424:22	424:22	18	s
LEAF_NODE	424:22	424:22	19	s
LEAF_NODE	424:23	424:23	17	]
LEAF_NODE	424:24	424:24	13	;
LEAF_NODE	425:3	425:3	11	}
SELECTION	426:3	426:20	9	
KEYWORD	426:3	426:3	10	if
LEAF_NODE	426:3	426:3	11	if
LEAF_NODE	426:6	426:6	10	(
CONDITION	426:7	426:7	10	buf == NULL
EXPR	426:7	426:14	11	buf == NULL
FIELD	426:7	426:7	12	buf
LEAF_NODE	426:7	426:7	13	buf
EQ_OPERATOR	426:11	426:11	12	==
LEAF_NODE	426:11	426:11	13	==
FIELD	426:14	426:14	12	NULL
LEAF_NODE	426:14	426:14	13	NULL
LEAF_NODE	426:18	426:18	10	)
STATEMENTS	426:20	431:3	10	
LEAF_NODE	426:20	426:20	11	{
STATEMENTS	427:4	430:4	11	
EXPR_STATEMENT	427:4	429:26	12	fprintf ( stderr , "Cannot allocate buffer to read strip %lu\n" , ( unsigned long ) s ) ;
EXPR	427:4	427:4	13	fprintf ( stderr , "Cannot allocate buffer to read strip %lu\n" , ( unsigned long ) s )
FUNCTION_CALL	427:4	429:25	14	fprintf ( stderr , "Cannot allocate buffer to read strip %lu\n" , ( unsigned long ) s )
CALLEE	427:4	427:4	15	fprintf
LEAF_NODE	427:4	427:4	16	fprintf
LEAF_NODE	427:11	427:11	15	(
ARGUMENT	427:12	427:12	15	stderr
FIELD	427:12	427:12	16	stderr
LEAF_NODE	427:12	427:12	17	stderr
LEAF_NODE	427:18	427:18	15	,
ARGUMENT	428:7	428:7	15	"Cannot allocate buffer to read strip %lu\n"
FIELD	428:7	428:7	16	"Cannot allocate buffer to read strip %lu\n"
LEAF_NODE	428:7	428:7	17	"Cannot allocate buffer to read strip %lu\n"
LEAF_NODE	428:51	428:51	15	,
ARGUMENT	429:8	429:24	15	( unsigned long ) s
LEAF_NODE	429:8	429:8	16	(
TYPE_NAME	429:9	429:18	16	unsigned long
LEAF_NODE	429:9	429:9	17	unsigned
LEAF_NODE	429:18	429:18	17	long
LEAF_NODE	429:22	429:22	16	)
FIELD	429:24	429:24	16	s
LEAF_NODE	429:24	429:24	17	s
LEAF_NODE	429:25	429:25	15	)
LEAF_NODE	429:26	429:26	13	;
JUMP_STATEMENT	430:4	430:9	12	break DESTINATION ;
KEYWORD	430:4	430:4	13	break
LEAF_NODE	430:4	430:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	430:9	430:9	13	;
LEAF_NODE	431:3	431:3	11	}
SELECTION	432:3	432:54	9	
KEYWORD	432:3	432:3	10	if
LEAF_NODE	432:3	432:3	11	if
LEAF_NODE	432:6	432:6	10	(
CONDITION	432:7	432:7	10	TIFFReadRawStrip ( tif , s , buf , stripbc [ s ] ) < 0
EXPR	432:7	432:51	11	TIFFReadRawStrip ( tif , s , buf , stripbc [ s ] ) < 0
FUNCTION_CALL	432:7	432:47	12	TIFFReadRawStrip ( tif , s , buf , stripbc [ s ] )
CALLEE	432:7	432:7	13	TIFFReadRawStrip
LEAF_NODE	432:7	432:7	14	TIFFReadRawStrip
LEAF_NODE	432:23	432:23	13	(
ARGUMENT	432:24	432:24	13	tif
FIELD	432:24	432:24	14	tif
LEAF_NODE	432:24	432:24	15	tif
LEAF_NODE	432:27	432:27	13	,
ARGUMENT	432:29	432:29	13	s
FIELD	432:29	432:29	14	s
LEAF_NODE	432:29	432:29	15	s
LEAF_NODE	432:30	432:30	13	,
ARGUMENT	432:32	432:32	13	buf
FIELD	432:32	432:32	14	buf
LEAF_NODE	432:32	432:32	15	buf
LEAF_NODE	432:35	432:35	13	,
ARGUMENT	432:37	432:37	13	stripbc [ s ]
FIELD	432:37	432:46	14	stripbc [ s ]
LEAF_NODE	432:37	432:37	15	stripbc
LEAF_NODE	432:44	432:44	15	[
EXPR	432:45	432:45	15	s
FIELD	432:45	432:45	16	s
LEAF_NODE	432:45	432:45	17	s
LEAF_NODE	432:46	432:46	15	]
LEAF_NODE	432:47	432:47	13	)
REL_OPERATOR	432:49	432:49	12	<
LEAF_NODE	432:49	432:49	13	<
FIELD	432:51	432:51	12	0
LEAF_NODE	432:51	432:51	13	0
LEAF_NODE	432:52	432:52	10	)
STATEMENTS	432:54	437:3	10	
LEAF_NODE	432:54	432:54	11	{
STATEMENTS	433:4	435:4	11	
EXPR_STATEMENT	433:4	434:26	12	fprintf ( stderr , "Error reading strip %lu\n" , ( unsigned long ) s ) ;
EXPR	433:4	433:4	13	fprintf ( stderr , "Error reading strip %lu\n" , ( unsigned long ) s )
FUNCTION_CALL	433:4	434:25	14	fprintf ( stderr , "Error reading strip %lu\n" , ( unsigned long ) s )
CALLEE	433:4	433:4	15	fprintf
LEAF_NODE	433:4	433:4	16	fprintf
LEAF_NODE	433:11	433:11	15	(
ARGUMENT	433:12	433:12	15	stderr
FIELD	433:12	433:12	16	stderr
LEAF_NODE	433:12	433:12	17	stderr
LEAF_NODE	433:18	433:18	15	,
ARGUMENT	433:20	433:20	15	"Error reading strip %lu\n"
FIELD	433:20	433:20	16	"Error reading strip %lu\n"
LEAF_NODE	433:20	433:20	17	"Error reading strip %lu\n"
LEAF_NODE	433:47	433:47	15	,
ARGUMENT	434:8	434:24	15	( unsigned long ) s
LEAF_NODE	434:8	434:8	16	(
TYPE_NAME	434:9	434:18	16	unsigned long
LEAF_NODE	434:9	434:9	17	unsigned
LEAF_NODE	434:18	434:18	17	long
LEAF_NODE	434:22	434:22	16	)
FIELD	434:24	434:24	16	s
LEAF_NODE	434:24	434:24	17	s
LEAF_NODE	434:25	434:25	15	)
LEAF_NODE	434:26	434:26	13	;
SELECTION	435:4	436:5	12	
KEYWORD	435:4	435:4	13	if
LEAF_NODE	435:4	435:4	14	if
LEAF_NODE	435:7	435:7	13	(
CONDITION	435:8	435:8	13	stoponerr
EXPR	435:8	435:8	14	stoponerr
FIELD	435:8	435:8	15	stoponerr
LEAF_NODE	435:8	435:8	16	stoponerr
LEAF_NODE	435:17	435:17	13	)
STATEMENTS	436:5	436:5	13	
JUMP_STATEMENT	436:5	436:10	14	break DESTINATION ;
KEYWORD	436:5	436:5	15	break
LEAF_NODE	436:5	436:5	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	436:10	436:10	15	;
LEAF_NODE	437:3	437:3	11	}
SELECTION	437:5	437:10	9	
KEYWORD	437:5	437:5	10	else
LEAF_NODE	437:5	437:5	11	else
STATEMENTS	437:10	437:10	10	
SELECTION	437:10	437:24	11	
KEYWORD	437:10	437:10	12	if
LEAF_NODE	437:10	437:10	13	if
LEAF_NODE	437:13	437:13	12	(
CONDITION	437:14	437:14	12	showdata
EXPR	437:14	437:14	13	showdata
FIELD	437:14	437:14	14	showdata
LEAF_NODE	437:14	437:14	15	showdata
LEAF_NODE	437:22	437:22	12	)
STATEMENTS	437:24	449:3	12	
LEAF_NODE	437:24	437:24	13	{
STATEMENTS	438:4	447:4	13	
SELECTION	438:4	438:16	14	
KEYWORD	438:4	438:4	15	if
LEAF_NODE	438:4	438:4	16	if
LEAF_NODE	438:7	438:7	15	(
CONDITION	438:8	438:8	15	bitrev
EXPR	438:8	438:8	16	bitrev
FIELD	438:8	438:8	17	bitrev
LEAF_NODE	438:8	438:8	18	bitrev
LEAF_NODE	438:14	438:14	15	)
STATEMENTS	438:16	442:4	15	
LEAF_NODE	438:16	438:16	16	{
STATEMENTS	439:5	440:5	16	
EXPR_STATEMENT	439:5	439:37	17	TIFFReverseBits ( buf , stripbc [ s ] ) ;
EXPR	439:5	439:5	18	TIFFReverseBits ( buf , stripbc [ s ] )
FUNCTION_CALL	439:5	439:36	19	TIFFReverseBits ( buf , stripbc [ s ] )
CALLEE	439:5	439:5	20	TIFFReverseBits
LEAF_NODE	439:5	439:5	21	TIFFReverseBits
LEAF_NODE	439:20	439:20	20	(
ARGUMENT	439:21	439:21	20	buf
FIELD	439:21	439:21	21	buf
LEAF_NODE	439:21	439:21	22	buf
LEAF_NODE	439:24	439:24	20	,
ARGUMENT	439:26	439:26	20	stripbc [ s ]
FIELD	439:26	439:35	21	stripbc [ s ]
LEAF_NODE	439:26	439:26	22	stripbc
LEAF_NODE	439:33	439:33	22	[
EXPR	439:34	439:34	22	s
FIELD	439:34	439:34	23	s
LEAF_NODE	439:34	439:34	24	s
LEAF_NODE	439:35	439:35	22	]
LEAF_NODE	439:36	439:36	20	)
LEAF_NODE	439:37	439:37	18	;
EXPR_STATEMENT	440:5	441:33	17	printf ( "%s %lu: (bit reversed)\n " , what , ( unsigned long ) s ) ;
EXPR	440:5	440:5	18	printf ( "%s %lu: (bit reversed)\n " , what , ( unsigned long ) s )
FUNCTION_CALL	440:5	441:32	19	printf ( "%s %lu: (bit reversed)\n " , what , ( unsigned long ) s )
CALLEE	440:5	440:5	20	printf
LEAF_NODE	440:5	440:5	21	printf
LEAF_NODE	440:11	440:11	20	(
ARGUMENT	440:12	440:12	20	"%s %lu: (bit reversed)\n "
FIELD	440:12	440:12	21	"%s %lu: (bit reversed)\n "
LEAF_NODE	440:12	440:12	22	"%s %lu: (bit reversed)\n "
LEAF_NODE	440:39	440:39	20	,
ARGUMENT	441:9	441:9	20	what
FIELD	441:9	441:9	21	what
LEAF_NODE	441:9	441:9	22	what
LEAF_NODE	441:13	441:13	20	,
ARGUMENT	441:15	441:31	20	( unsigned long ) s
LEAF_NODE	441:15	441:15	21	(
TYPE_NAME	441:16	441:25	21	unsigned long
LEAF_NODE	441:16	441:16	22	unsigned
LEAF_NODE	441:25	441:25	22	long
LEAF_NODE	441:29	441:29	21	)
FIELD	441:31	441:31	21	s
LEAF_NODE	441:31	441:31	22	s
LEAF_NODE	441:32	441:32	20	)
LEAF_NODE	441:33	441:33	18	;
LEAF_NODE	442:4	442:4	16	}
SELECTION	442:6	443:5	14	
KEYWORD	442:6	442:6	15	else
LEAF_NODE	442:6	442:6	16	else
STATEMENTS	443:5	443:5	15	
EXPR_STATEMENT	443:5	444:27	16	printf ( "%s %lu:\n " , what , ( unsigned long ) s ) ;
EXPR	443:5	443:5	17	printf ( "%s %lu:\n " , what , ( unsigned long ) s )
FUNCTION_CALL	443:5	444:26	18	printf ( "%s %lu:\n " , what , ( unsigned long ) s )
CALLEE	443:5	443:5	19	printf
LEAF_NODE	443:5	443:5	20	printf
LEAF_NODE	443:11	443:11	19	(
ARGUMENT	443:12	443:12	19	"%s %lu:\n "
FIELD	443:12	443:12	20	"%s %lu:\n "
LEAF_NODE	443:12	443:12	21	"%s %lu:\n "
LEAF_NODE	443:24	443:24	19	,
ARGUMENT	443:26	443:26	19	what
FIELD	443:26	443:26	20	what
LEAF_NODE	443:26	443:26	21	what
LEAF_NODE	443:30	443:30	19	,
ARGUMENT	444:9	444:25	19	( unsigned long ) s
LEAF_NODE	444:9	444:9	20	(
TYPE_NAME	444:10	444:19	20	unsigned long
LEAF_NODE	444:10	444:10	21	unsigned
LEAF_NODE	444:19	444:19	21	long
LEAF_NODE	444:23	444:23	20	)
FIELD	444:25	444:25	20	s
LEAF_NODE	444:25	444:25	21	s
LEAF_NODE	444:26	444:26	19	)
LEAF_NODE	444:27	444:27	17	;
SELECTION	445:4	446:5	14	
KEYWORD	445:4	445:4	15	if
LEAF_NODE	445:4	445:4	16	if
LEAF_NODE	445:7	445:7	15	(
CONDITION	445:8	445:8	15	showwords
EXPR	445:8	445:8	16	showwords
FIELD	445:8	445:8	17	showwords
LEAF_NODE	445:8	445:8	18	showwords
LEAF_NODE	445:17	445:17	15	)
STATEMENTS	446:5	446:5	15	
EXPR_STATEMENT	446:5	446:47	16	ShowRawWords ( ( uint16 * ) buf , stripbc [ s ] >> 1 ) ;
EXPR	446:5	446:5	17	ShowRawWords ( ( uint16 * ) buf , stripbc [ s ] >> 1 )
FUNCTION_CALL	446:5	446:46	18	ShowRawWords ( ( uint16 * ) buf , stripbc [ s ] >> 1 )
CALLEE	446:5	446:5	19	ShowRawWords
LEAF_NODE	446:5	446:5	20	ShowRawWords
LEAF_NODE	446:17	446:17	19	(
ARGUMENT	446:18	446:28	19	( uint16 * ) buf
LEAF_NODE	446:18	446:18	20	(
TYPE_NAME	446:19	446:19	20	uint16
LEAF_NODE	446:19	446:19	21	uint16
LEAF_NODE	446:25	446:25	20	*
LEAF_NODE	446:26	446:26	20	)
FIELD	446:28	446:28	20	buf
LEAF_NODE	446:28	446:28	21	buf
LEAF_NODE	446:31	446:31	19	,
ARGUMENT	446:33	446:45	19	stripbc [ s ] >> 1
FIELD	446:33	446:42	20	stripbc [ s ]
LEAF_NODE	446:33	446:33	21	stripbc
LEAF_NODE	446:40	446:40	21	[
EXPR	446:41	446:41	21	s
FIELD	446:41	446:41	22	s
LEAF_NODE	446:41	446:41	23	s
LEAF_NODE	446:42	446:42	21	]
LEAF_NODE	446:43	446:43	20	>>
FIELD	446:45	446:45	20	1
LEAF_NODE	446:45	446:45	21	1
LEAF_NODE	446:46	446:46	19	)
LEAF_NODE	446:47	446:47	17	;
SELECTION	447:4	448:5	14	
KEYWORD	447:4	447:4	15	else
LEAF_NODE	447:4	447:4	16	else
STATEMENTS	448:5	448:5	15	
EXPR_STATEMENT	448:5	448:51	16	ShowRawBytes ( ( unsigned char * ) buf , stripbc [ s ] ) ;
EXPR	448:5	448:5	17	ShowRawBytes ( ( unsigned char * ) buf , stripbc [ s ] )
FUNCTION_CALL	448:5	448:50	18	ShowRawBytes ( ( unsigned char * ) buf , stripbc [ s ] )
CALLEE	448:5	448:5	19	ShowRawBytes
LEAF_NODE	448:5	448:5	20	ShowRawBytes
LEAF_NODE	448:17	448:17	19	(
ARGUMENT	448:18	448:35	19	( unsigned char * ) buf
LEAF_NODE	448:18	448:18	20	(
TYPE_NAME	448:19	448:28	20	unsigned char
LEAF_NODE	448:19	448:19	21	unsigned
LEAF_NODE	448:28	448:28	21	char
LEAF_NODE	448:32	448:32	20	*
LEAF_NODE	448:33	448:33	20	)
FIELD	448:35	448:35	20	buf
LEAF_NODE	448:35	448:35	21	buf
LEAF_NODE	448:38	448:38	19	,
ARGUMENT	448:40	448:40	19	stripbc [ s ]
FIELD	448:40	448:49	20	stripbc [ s ]
LEAF_NODE	448:40	448:40	21	stripbc
LEAF_NODE	448:47	448:47	21	[
EXPR	448:48	448:48	21	s
FIELD	448:48	448:48	22	s
LEAF_NODE	448:48	448:48	23	s
LEAF_NODE	448:49	448:49	21	]
LEAF_NODE	448:50	448:50	19	)
LEAF_NODE	448:51	448:51	17	;
LEAF_NODE	449:3	449:3	13	}
LEAF_NODE	450:2	450:2	8	}
SELECTION	451:2	452:3	6	
KEYWORD	451:2	451:2	7	if
LEAF_NODE	451:2	451:2	8	if
LEAF_NODE	451:5	451:5	7	(
CONDITION	451:6	451:6	7	buf != NULL
EXPR	451:6	451:13	8	buf != NULL
FIELD	451:6	451:6	9	buf
LEAF_NODE	451:6	451:6	10	buf
EQ_OPERATOR	451:10	451:10	9	!=
LEAF_NODE	451:10	451:10	10	!=
FIELD	451:13	451:13	9	NULL
LEAF_NODE	451:13	451:13	10	NULL
LEAF_NODE	451:17	451:17	7	)
STATEMENTS	452:3	452:3	7	
EXPR_STATEMENT	452:3	452:17	8	_TIFFfree ( buf ) ;
EXPR	452:3	452:3	9	_TIFFfree ( buf )
FUNCTION_CALL	452:3	452:16	10	_TIFFfree ( buf )
CALLEE	452:3	452:3	11	_TIFFfree
LEAF_NODE	452:3	452:3	12	_TIFFfree
LEAF_NODE	452:12	452:12	11	(
ARGUMENT	452:13	452:13	11	buf
FIELD	452:13	452:13	12	buf
LEAF_NODE	452:13	452:13	13	buf
LEAF_NODE	452:16	452:16	11	)
LEAF_NODE	452:17	452:17	9	;
LEAF_NODE	453:1	453:1	5	}
LEAF_NODE	454:0	454:0	2	}
FUNCTION_DEF	456:0	475:0	1	
RETURN_TYPE	456:0	456:7	2	static void
LEAF_NODE	456:0	456:0	3	static
TYPE_NAME	456:7	456:7	3	void
LEAF_NODE	456:7	456:7	4	void
FUNCTION_NAME	457:0	457:0	2	tiffinfo
LEAF_NODE	457:0	457:0	3	tiffinfo
PARAMETER_LIST	457:8	457:44	2	( TIFF * tif , uint16 order , long flags )
LEAF_NODE	457:8	457:8	3	(
PARAMETER_DECL	457:9	457:15	3	TIFF * tif
TYPE	457:9	457:13	4	TIFF *
TYPE_NAME	457:9	457:9	5	TIFF
LEAF_NODE	457:9	457:9	6	TIFF
POINTER	457:13	457:13	5	*
LEAF_NODE	457:13	457:13	6	*
NAME	457:15	457:15	4	tif
LEAF_NODE	457:15	457:15	5	tif
LEAF_NODE	457:18	457:18	3	,
PARAMETER_DECL	457:20	457:27	3	uint16 order
TYPE	457:20	457:20	4	uint16
TYPE_NAME	457:20	457:20	5	uint16
LEAF_NODE	457:20	457:20	6	uint16
NAME	457:27	457:27	4	order
LEAF_NODE	457:27	457:27	5	order
LEAF_NODE	457:32	457:32	3	,
PARAMETER_DECL	457:34	457:39	3	long flags
TYPE	457:34	457:34	4	long
TYPE_NAME	457:34	457:34	5	long
LEAF_NODE	457:34	457:34	6	long
NAME	457:39	457:39	4	flags
LEAF_NODE	457:39	457:39	5	flags
LEAF_NODE	457:44	457:44	3	)
LEAF_NODE	458:0	458:0	2	{
STATEMENTS	459:1	470:3	2	
EXPR_STATEMENT	459:1	459:39	3	TIFFPrintDirectory ( tif , stdout , flags ) ;
EXPR	459:1	459:1	4	TIFFPrintDirectory ( tif , stdout , flags )
FUNCTION_CALL	459:1	459:38	5	TIFFPrintDirectory ( tif , stdout , flags )
CALLEE	459:1	459:1	6	TIFFPrintDirectory
LEAF_NODE	459:1	459:1	7	TIFFPrintDirectory
LEAF_NODE	459:19	459:19	6	(
ARGUMENT	459:20	459:20	6	tif
FIELD	459:20	459:20	7	tif
LEAF_NODE	459:20	459:20	8	tif
LEAF_NODE	459:23	459:23	6	,
ARGUMENT	459:25	459:25	6	stdout
FIELD	459:25	459:25	7	stdout
LEAF_NODE	459:25	459:25	8	stdout
LEAF_NODE	459:31	459:31	6	,
ARGUMENT	459:33	459:33	6	flags
FIELD	459:33	459:33	7	flags
LEAF_NODE	459:33	459:33	8	flags
LEAF_NODE	459:38	459:38	6	)
LEAF_NODE	459:39	459:39	4	;
SELECTION	460:1	461:2	3	
KEYWORD	460:1	460:1	4	if
LEAF_NODE	460:1	460:1	5	if
LEAF_NODE	460:4	460:4	4	(
CONDITION	460:5	460:5	4	! readdata
EXPR	460:5	460:5	5	! readdata
UNARY_EXPR	460:5	460:6	6	! readdata
UNARY_OPERATOR	460:5	460:5	7	!
LEAF_NODE	460:5	460:5	8	!
FIELD	460:6	460:6	7	readdata
LEAF_NODE	460:6	460:6	8	readdata
LEAF_NODE	460:14	460:14	4	)
STATEMENTS	461:2	461:2	4	
JUMP_STATEMENT	461:2	461:8	5	return DESTINATION ;
KEYWORD	461:2	461:2	6	return
LEAF_NODE	461:2	461:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	461:8	461:8	6	;
SELECTION	462:1	462:14	3	
KEYWORD	462:1	462:1	4	if
LEAF_NODE	462:1	462:1	5	if
LEAF_NODE	462:4	462:4	4	(
CONDITION	462:5	462:5	4	rawdata
EXPR	462:5	462:5	5	rawdata
FIELD	462:5	462:5	6	rawdata
LEAF_NODE	462:5	462:5	7	rawdata
LEAF_NODE	462:12	462:12	4	)
STATEMENTS	462:14	470:1	4	
LEAF_NODE	462:14	462:14	5	{
STATEMENTS	463:2	468:4	5	
SELECTION	463:2	463:13	6	
KEYWORD	463:2	463:2	7	if
LEAF_NODE	463:2	463:2	8	if
LEAF_NODE	463:5	463:5	7	(
CONDITION	463:6	463:6	7	order
EXPR	463:6	463:6	8	order
FIELD	463:6	463:6	9	order
LEAF_NODE	463:6	463:6	10	order
LEAF_NODE	463:11	463:11	7	)
STATEMENTS	463:13	468:2	7	
LEAF_NODE	463:13	463:13	8	{
STATEMENTS	464:3	467:3	8	
SIMPLE_DECL	464:3	464:11	9	uint16 o ;
VAR_DECL	464:3	464:10	10	uint16 o
TYPE	464:3	464:3	11	uint16
TYPE_NAME	464:3	464:3	12	uint16
LEAF_NODE	464:3	464:3	13	uint16
NAME	464:10	464:10	11	o
LEAF_NODE	464:10	464:10	12	o
LEAF_NODE	464:11	464:11	10	;
EXPR_STATEMENT	465:3	466:29	9	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & o ) ;
EXPR	465:3	465:3	10	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & o )
FUNCTION_CALL	465:3	466:28	11	TIFFGetFieldDefaulted ( tif , TIFFTAG_FILLORDER , & o )
CALLEE	465:3	465:3	12	TIFFGetFieldDefaulted
LEAF_NODE	465:3	465:3	13	TIFFGetFieldDefaulted
LEAF_NODE	465:24	465:24	12	(
ARGUMENT	465:25	465:25	12	tif
FIELD	465:25	465:25	13	tif
LEAF_NODE	465:25	465:25	14	tif
LEAF_NODE	465:28	465:28	12	,
ARGUMENT	466:7	466:7	12	TIFFTAG_FILLORDER
FIELD	466:7	466:7	13	TIFFTAG_FILLORDER
LEAF_NODE	466:7	466:7	14	TIFFTAG_FILLORDER
LEAF_NODE	466:24	466:24	12	,
ARGUMENT	466:26	466:26	12	& o
UNARY_EXPR	466:26	466:27	13	& o
UNARY_OPERATOR	466:26	466:26	14	&
LEAF_NODE	466:26	466:26	15	&
FIELD	466:27	466:27	14	o
LEAF_NODE	466:27	466:27	15	o
LEAF_NODE	466:28	466:28	12	)
LEAF_NODE	466:29	466:29	10	;
EXPR_STATEMENT	467:3	467:35	9	TIFFReadRawData ( tif , o != order ) ;
EXPR	467:3	467:3	10	TIFFReadRawData ( tif , o != order )
FUNCTION_CALL	467:3	467:34	11	TIFFReadRawData ( tif , o != order )
CALLEE	467:3	467:3	12	TIFFReadRawData
LEAF_NODE	467:3	467:3	13	TIFFReadRawData
LEAF_NODE	467:18	467:18	12	(
ARGUMENT	467:19	467:19	12	tif
FIELD	467:19	467:19	13	tif
LEAF_NODE	467:19	467:19	14	tif
LEAF_NODE	467:22	467:22	12	,
ARGUMENT	467:24	467:29	12	o != order
FIELD	467:24	467:24	13	o
LEAF_NODE	467:24	467:24	14	o
EQ_OPERATOR	467:26	467:26	13	!=
LEAF_NODE	467:26	467:26	14	!=
FIELD	467:29	467:29	13	order
LEAF_NODE	467:29	467:29	14	order
LEAF_NODE	467:34	467:34	12	)
LEAF_NODE	467:35	467:35	10	;
LEAF_NODE	468:2	468:2	8	}
SELECTION	468:4	469:3	6	
KEYWORD	468:4	468:4	7	else
LEAF_NODE	468:4	468:4	8	else
STATEMENTS	469:3	469:3	7	
EXPR_STATEMENT	469:3	469:26	8	TIFFReadRawData ( tif , 0 ) ;
EXPR	469:3	469:3	9	TIFFReadRawData ( tif , 0 )
FUNCTION_CALL	469:3	469:25	10	TIFFReadRawData ( tif , 0 )
CALLEE	469:3	469:3	11	TIFFReadRawData
LEAF_NODE	469:3	469:3	12	TIFFReadRawData
LEAF_NODE	469:18	469:18	11	(
ARGUMENT	469:19	469:19	11	tif
FIELD	469:19	469:19	12	tif
LEAF_NODE	469:19	469:19	13	tif
LEAF_NODE	469:22	469:22	11	,
ARGUMENT	469:24	469:24	11	0
FIELD	469:24	469:24	12	0
LEAF_NODE	469:24	469:24	13	0
LEAF_NODE	469:25	469:25	11	)
LEAF_NODE	469:26	469:26	9	;
LEAF_NODE	470:1	470:1	5	}
SELECTION	470:3	470:8	3	
KEYWORD	470:3	470:3	4	else
LEAF_NODE	470:3	470:3	5	else
STATEMENTS	470:8	474:1	4	
LEAF_NODE	470:8	470:8	5	{
STATEMENTS	471:2	473:2	5	
SELECTION	471:2	472:3	6	
KEYWORD	471:2	471:2	7	if
LEAF_NODE	471:2	471:2	8	if
LEAF_NODE	471:5	471:5	7	(
CONDITION	471:6	471:6	7	order
EXPR	471:6	471:6	8	order
FIELD	471:6	471:6	9	order
LEAF_NODE	471:6	471:6	10	order
LEAF_NODE	471:11	471:11	7	)
STATEMENTS	472:3	472:3	7	
EXPR_STATEMENT	472:3	472:46	8	TIFFSetField ( tif , TIFFTAG_FILLORDER , order ) ;
EXPR	472:3	472:3	9	TIFFSetField ( tif , TIFFTAG_FILLORDER , order )
FUNCTION_CALL	472:3	472:45	10	TIFFSetField ( tif , TIFFTAG_FILLORDER , order )
CALLEE	472:3	472:3	11	TIFFSetField
LEAF_NODE	472:3	472:3	12	TIFFSetField
LEAF_NODE	472:15	472:15	11	(
ARGUMENT	472:16	472:16	11	tif
FIELD	472:16	472:16	12	tif
LEAF_NODE	472:16	472:16	13	tif
LEAF_NODE	472:19	472:19	11	,
ARGUMENT	472:21	472:21	11	TIFFTAG_FILLORDER
FIELD	472:21	472:21	12	TIFFTAG_FILLORDER
LEAF_NODE	472:21	472:21	13	TIFFTAG_FILLORDER
LEAF_NODE	472:38	472:38	11	,
ARGUMENT	472:40	472:40	11	order
FIELD	472:40	472:40	12	order
LEAF_NODE	472:40	472:40	13	order
LEAF_NODE	472:45	472:45	11	)
LEAF_NODE	472:46	472:46	9	;
EXPR_STATEMENT	473:2	473:19	6	TIFFReadData ( tif ) ;
EXPR	473:2	473:2	7	TIFFReadData ( tif )
FUNCTION_CALL	473:2	473:18	8	TIFFReadData ( tif )
CALLEE	473:2	473:2	9	TIFFReadData
LEAF_NODE	473:2	473:2	10	TIFFReadData
LEAF_NODE	473:14	473:14	9	(
ARGUMENT	473:15	473:15	9	tif
FIELD	473:15	473:15	10	tif
LEAF_NODE	473:15	473:15	11	tif
LEAF_NODE	473:18	473:18	9	)
LEAF_NODE	473:19	473:19	7	;
LEAF_NODE	474:1	474:1	5	}
LEAF_NODE	475:0	475:0	2	}
