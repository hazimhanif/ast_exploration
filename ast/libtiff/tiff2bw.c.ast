SOURCE_FILE	45:0	517:0	0	
SIMPLE_DECL	45:0	45:17	1	int RED ; RED = PCT ( 30 ) ;
VAR_DECL	45:0	45:4	2	int RED ; RED = PCT ( 30 )
TYPE	45:0	45:0	3	int
TYPE_NAME	45:0	45:0	4	int
LEAF_NODE	45:0	45:0	5	int
NAME	45:4	45:4	3	RED
LEAF_NODE	45:4	45:4	4	RED
LEAF_NODE	0:0	0:0	3	;
INIT	45:4	45:4	3	RED = PCT ( 30 )
ASSIGN	45:4	45:10	4	RED = PCT ( 30 )
LVAL	45:4	45:4	5	RED
NAME	45:4	45:4	6	RED
LEAF_NODE	45:4	45:4	7	RED
ASSIGN_OP	45:8	45:8	5	=
LEAF_NODE	45:8	45:8	6	=
RVAL	45:10	45:10	5	PCT ( 30 )
FUNCTION_CALL	45:10	45:16	6	PCT ( 30 )
CALLEE	45:10	45:10	7	PCT
LEAF_NODE	45:10	45:10	8	PCT
LEAF_NODE	45:13	45:13	7	(
ARGUMENT	45:14	45:14	7	30
FIELD	45:14	45:14	8	30
LEAF_NODE	45:14	45:14	9	30
LEAF_NODE	45:16	45:16	7	)
LEAF_NODE	45:17	45:17	2	;
SIMPLE_DECL	46:0	46:19	1	int GREEN ; GREEN = PCT ( 59 ) ;
VAR_DECL	46:0	46:4	2	int GREEN ; GREEN = PCT ( 59 )
TYPE	46:0	46:0	3	int
TYPE_NAME	46:0	46:0	4	int
LEAF_NODE	46:0	46:0	5	int
NAME	46:4	46:4	3	GREEN
LEAF_NODE	46:4	46:4	4	GREEN
LEAF_NODE	0:0	0:0	3	;
INIT	46:4	46:4	3	GREEN = PCT ( 59 )
ASSIGN	46:4	46:12	4	GREEN = PCT ( 59 )
LVAL	46:4	46:4	5	GREEN
NAME	46:4	46:4	6	GREEN
LEAF_NODE	46:4	46:4	7	GREEN
ASSIGN_OP	46:10	46:10	5	=
LEAF_NODE	46:10	46:10	6	=
RVAL	46:12	46:12	5	PCT ( 59 )
FUNCTION_CALL	46:12	46:18	6	PCT ( 59 )
CALLEE	46:12	46:12	7	PCT
LEAF_NODE	46:12	46:12	8	PCT
LEAF_NODE	46:15	46:15	7	(
ARGUMENT	46:16	46:16	7	59
FIELD	46:16	46:16	8	59
LEAF_NODE	46:16	46:16	9	59
LEAF_NODE	46:18	46:18	7	)
LEAF_NODE	46:19	46:19	2	;
SIMPLE_DECL	47:0	47:18	1	int BLUE ; BLUE = PCT ( 11 ) ;
VAR_DECL	47:0	47:4	2	int BLUE ; BLUE = PCT ( 11 )
TYPE	47:0	47:0	3	int
TYPE_NAME	47:0	47:0	4	int
LEAF_NODE	47:0	47:0	5	int
NAME	47:4	47:4	3	BLUE
LEAF_NODE	47:4	47:4	4	BLUE
LEAF_NODE	0:0	0:0	3	;
INIT	47:4	47:4	3	BLUE = PCT ( 11 )
ASSIGN	47:4	47:11	4	BLUE = PCT ( 11 )
LVAL	47:4	47:4	5	BLUE
NAME	47:4	47:4	6	BLUE
LEAF_NODE	47:4	47:4	7	BLUE
ASSIGN_OP	47:9	47:9	5	=
LEAF_NODE	47:9	47:9	6	=
RVAL	47:11	47:11	5	PCT ( 11 )
FUNCTION_CALL	47:11	47:17	6	PCT ( 11 )
CALLEE	47:11	47:11	7	PCT
LEAF_NODE	47:11	47:11	8	PCT
LEAF_NODE	47:14	47:14	7	(
ARGUMENT	47:15	47:15	7	11
FIELD	47:15	47:15	8	11
LEAF_NODE	47:15	47:15	9	11
LEAF_NODE	47:17	47:17	7	)
LEAF_NODE	47:18	47:18	2	;
SIMPLE_DECL	49:7	49:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	49:7	49:12	2	void usage ; usage usage ( void )
TYPE	49:7	49:7	3	void
TYPE_NAME	49:7	49:7	4	void
LEAF_NODE	49:7	49:7	5	void
NAME	49:12	49:12	3	usage
LEAF_NODE	49:12	49:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	49:12	49:12	3	usage usage ( void )
ASSIGN	49:12	49:17	4	usage usage ( void )
LVAL	49:12	49:12	5	usage
NAME	49:12	49:12	6	usage
LEAF_NODE	49:12	49:12	7	usage
ASSIGN_OP	49:12	49:12	5	usage
NAME	49:12	49:12	6	usage
LEAF_NODE	49:12	49:12	7	usage
RVAL	49:17	49:22	5	( void )
LEAF_NODE	49:17	49:17	6	(
EXPR	49:18	49:18	6	void
FIELD	49:18	49:18	7	void
LEAF_NODE	49:18	49:18	8	void
LEAF_NODE	49:22	49:22	6	)
LEAF_NODE	49:23	49:23	2	;
FUNCTION_DEF	52:0	63:0	1	
RETURN_TYPE	52:0	52:7	2	static void
LEAF_NODE	52:0	52:0	3	static
TYPE_NAME	52:7	52:7	3	void
LEAF_NODE	52:7	52:7	4	void
FUNCTION_NAME	53:0	53:0	2	compresscontig
LEAF_NODE	53:0	53:0	3	compresscontig
PARAMETER_LIST	53:14	53:63	2	( unsigned char * out , unsigned char * rgb , uint32 n )
LEAF_NODE	53:14	53:14	3	(
PARAMETER_DECL	53:15	53:30	3	unsigned char * out
TYPE	53:15	53:28	4	unsigned char *
TYPE_NAME	53:15	53:24	5	unsigned char
LEAF_NODE	53:15	53:15	6	unsigned
LEAF_NODE	53:24	53:24	6	char
POINTER	53:28	53:28	5	*
LEAF_NODE	53:28	53:28	6	*
NAME	53:30	53:30	4	out
LEAF_NODE	53:30	53:30	5	out
LEAF_NODE	53:33	53:33	3	,
PARAMETER_DECL	53:35	53:50	3	unsigned char * rgb
TYPE	53:35	53:48	4	unsigned char *
TYPE_NAME	53:35	53:44	5	unsigned char
LEAF_NODE	53:35	53:35	6	unsigned
LEAF_NODE	53:44	53:44	6	char
POINTER	53:48	53:48	5	*
LEAF_NODE	53:48	53:48	6	*
NAME	53:50	53:50	4	rgb
LEAF_NODE	53:50	53:50	5	rgb
LEAF_NODE	53:53	53:53	3	,
PARAMETER_DECL	53:55	53:62	3	uint32 n
TYPE	53:55	53:55	4	uint32
TYPE_NAME	53:55	53:55	5	uint32
LEAF_NODE	53:55	53:55	6	uint32
NAME	53:62	53:62	4	n
LEAF_NODE	53:62	53:62	5	n
LEAF_NODE	53:63	53:63	3	)
LEAF_NODE	54:0	54:0	2	{
STATEMENTS	55:1	57:1	2	
LEAF_NODE	55:1	55:1	3	register
SIMPLE_DECL	55:10	55:54	3	int v , int red ; red = RED , int green ; green = GREEN , int blue ; blue = BLUE ;
INIT_DECL_LIST	55:10	55:10	4	int v , int red ; red = RED , int green ; green = GREEN , int blue ; blue = BLUE
VAR_DECL	55:10	55:14	5	int v
TYPE	55:10	55:10	6	int
TYPE_NAME	55:10	55:10	7	int
LEAF_NODE	55:10	55:10	8	int
NAME	55:14	55:14	6	v
LEAF_NODE	55:14	55:14	7	v
LEAF_NODE	55:15	55:15	5	,
INIT_DECL_LIST	55:10	55:10	5	int red ; red = RED , int green ; green = GREEN , int blue ; blue = BLUE
VAR_DECL	55:10	55:17	6	int red ; red = RED
TYPE	55:10	55:10	7	int
TYPE_NAME	55:10	55:10	8	int
LEAF_NODE	55:10	55:10	9	int
NAME	55:17	55:17	7	red
LEAF_NODE	55:17	55:17	8	red
LEAF_NODE	0:0	0:0	7	;
INIT	55:17	55:17	7	red = RED
ASSIGN	55:17	55:23	8	red = RED
LVAL	55:17	55:17	9	red
NAME	55:17	55:17	10	red
LEAF_NODE	55:17	55:17	11	red
ASSIGN_OP	55:21	55:21	9	=
LEAF_NODE	55:21	55:21	10	=
RVAL	55:23	55:23	9	RED
FIELD	55:23	55:23	10	RED
LEAF_NODE	55:23	55:23	11	RED
LEAF_NODE	55:26	55:26	6	,
INIT_DECL_LIST	55:10	55:10	6	int green ; green = GREEN , int blue ; blue = BLUE
VAR_DECL	55:10	55:28	7	int green ; green = GREEN
TYPE	55:10	55:10	8	int
TYPE_NAME	55:10	55:10	9	int
LEAF_NODE	55:10	55:10	10	int
NAME	55:28	55:28	8	green
LEAF_NODE	55:28	55:28	9	green
LEAF_NODE	0:0	0:0	8	;
INIT	55:28	55:28	8	green = GREEN
ASSIGN	55:28	55:36	9	green = GREEN
LVAL	55:28	55:28	10	green
NAME	55:28	55:28	11	green
LEAF_NODE	55:28	55:28	12	green
ASSIGN_OP	55:34	55:34	10	=
LEAF_NODE	55:34	55:34	11	=
RVAL	55:36	55:36	10	GREEN
FIELD	55:36	55:36	11	GREEN
LEAF_NODE	55:36	55:36	12	GREEN
LEAF_NODE	55:41	55:41	7	,
VAR_DECL	55:10	55:43	7	int blue ; blue = BLUE
TYPE	55:10	55:10	8	int
TYPE_NAME	55:10	55:10	9	int
LEAF_NODE	55:10	55:10	10	int
NAME	55:43	55:43	8	blue
LEAF_NODE	55:43	55:43	9	blue
LEAF_NODE	0:0	0:0	8	;
INIT	55:43	55:43	8	blue = BLUE
ASSIGN	55:43	55:50	9	blue = BLUE
LVAL	55:43	55:43	10	blue
NAME	55:43	55:43	11	blue
LEAF_NODE	55:43	55:43	12	blue
ASSIGN_OP	55:48	55:48	10	=
LEAF_NODE	55:48	55:48	11	=
RVAL	55:50	55:50	10	BLUE
FIELD	55:50	55:50	11	BLUE
LEAF_NODE	55:50	55:50	12	BLUE
LEAF_NODE	55:54	55:54	4	;
ITERATION	57:1	57:17	3	
KEYWORD	57:1	57:1	4	while
LEAF_NODE	57:1	57:1	5	while
LEAF_NODE	57:7	57:7	4	(
CONDITION	57:8	57:8	4	n -- > 0
EXPR	57:8	57:14	5	n -- > 0
FIELD	57:8	57:9	6	n --
LEAF_NODE	57:8	57:8	7	n
LEAF_NODE	57:9	57:9	7	--
REL_OPERATOR	57:12	57:12	6	>
LEAF_NODE	57:12	57:12	7	>
FIELD	57:14	57:14	6	0
LEAF_NODE	57:14	57:14	7	0
LEAF_NODE	57:15	57:15	4	)
STATEMENTS	57:17	62:1	4	
LEAF_NODE	57:17	57:17	5	{
STATEMENTS	58:2	61:2	5	
EXPR_STATEMENT	58:2	58:18	6	v = red * ( * rgb ++ ) ;
EXPR	58:2	58:2	7	v = red * ( * rgb ++ )
ASSIGN	58:2	58:6	8	v = red * ( * rgb ++ )
LVAL	58:2	58:2	9	v
FIELD	58:2	58:2	10	v
LEAF_NODE	58:2	58:2	11	v
ASSIGN_OP	58:4	58:4	9	=
LEAF_NODE	58:4	58:4	10	=
RVAL	58:6	58:17	9	red * ( * rgb ++ )
FIELD	58:6	58:6	10	red
LEAF_NODE	58:6	58:6	11	red
LEAF_NODE	58:9	58:9	10	*
LEAF_NODE	58:10	58:10	10	(
UNARY_EXPR	58:11	58:12	10	* rgb ++
UNARY_OPERATOR	58:11	58:11	11	*
LEAF_NODE	58:11	58:11	12	*
FIELD	58:12	58:15	11	rgb ++
LEAF_NODE	58:12	58:12	12	rgb
LEAF_NODE	58:15	58:15	12	++
LEAF_NODE	58:17	58:17	10	)
LEAF_NODE	58:18	58:18	7	;
EXPR_STATEMENT	59:2	59:21	6	v += green * ( * rgb ++ ) ;
EXPR	59:2	59:2	7	v += green * ( * rgb ++ )
ASSIGN	59:2	59:7	8	v += green * ( * rgb ++ )
LVAL	59:2	59:2	9	v
FIELD	59:2	59:2	10	v
LEAF_NODE	59:2	59:2	11	v
ASSIGN_OP	59:4	59:4	9	+=
LEAF_NODE	59:4	59:4	10	+=
RVAL	59:7	59:20	9	green * ( * rgb ++ )
FIELD	59:7	59:7	10	green
LEAF_NODE	59:7	59:7	11	green
LEAF_NODE	59:12	59:12	10	*
LEAF_NODE	59:13	59:13	10	(
UNARY_EXPR	59:14	59:15	10	* rgb ++
UNARY_OPERATOR	59:14	59:14	11	*
LEAF_NODE	59:14	59:14	12	*
FIELD	59:15	59:18	11	rgb ++
LEAF_NODE	59:15	59:15	12	rgb
LEAF_NODE	59:18	59:18	12	++
LEAF_NODE	59:20	59:20	10	)
LEAF_NODE	59:21	59:21	7	;
EXPR_STATEMENT	60:2	60:20	6	v += blue * ( * rgb ++ ) ;
EXPR	60:2	60:2	7	v += blue * ( * rgb ++ )
ASSIGN	60:2	60:7	8	v += blue * ( * rgb ++ )
LVAL	60:2	60:2	9	v
FIELD	60:2	60:2	10	v
LEAF_NODE	60:2	60:2	11	v
ASSIGN_OP	60:4	60:4	9	+=
LEAF_NODE	60:4	60:4	10	+=
RVAL	60:7	60:19	9	blue * ( * rgb ++ )
FIELD	60:7	60:7	10	blue
LEAF_NODE	60:7	60:7	11	blue
LEAF_NODE	60:11	60:11	10	*
LEAF_NODE	60:12	60:12	10	(
UNARY_EXPR	60:13	60:14	10	* rgb ++
UNARY_OPERATOR	60:13	60:13	11	*
LEAF_NODE	60:13	60:13	12	*
FIELD	60:14	60:17	11	rgb ++
LEAF_NODE	60:14	60:14	12	rgb
LEAF_NODE	60:17	60:17	12	++
LEAF_NODE	60:19	60:19	10	)
LEAF_NODE	60:20	60:20	7	;
EXPR_STATEMENT	61:2	61:15	6	* out ++ = v >> 8 ;
EXPR	61:2	61:2	7	* out ++ = v >> 8
ASSIGN	61:2	61:11	8	* out ++ = v >> 8
LVAL	61:2	61:2	9	* out ++
UNARY_EXPR	61:2	61:3	10	* out ++
UNARY_OPERATOR	61:2	61:2	11	*
LEAF_NODE	61:2	61:2	12	*
FIELD	61:3	61:6	11	out ++
LEAF_NODE	61:3	61:3	12	out
LEAF_NODE	61:6	61:6	12	++
ASSIGN_OP	61:9	61:9	9	=
LEAF_NODE	61:9	61:9	10	=
RVAL	61:11	61:14	9	v >> 8
FIELD	61:11	61:11	10	v
LEAF_NODE	61:11	61:11	11	v
LEAF_NODE	61:12	61:12	10	>>
FIELD	61:14	61:14	10	8
LEAF_NODE	61:14	61:14	11	8
LEAF_NODE	61:15	61:15	7	;
LEAF_NODE	62:1	62:1	5	}
LEAF_NODE	63:0	63:0	2	}
FUNCTION_DEF	65:0	74:0	1	
RETURN_TYPE	65:0	65:7	2	static void
LEAF_NODE	65:0	65:0	3	static
TYPE_NAME	65:7	65:7	3	void
LEAF_NODE	65:7	65:7	4	void
FUNCTION_NAME	66:0	66:0	2	compresssep
LEAF_NODE	66:0	66:0	3	compresssep
PARAMETER_LIST	66:11	67:67	2	( unsigned char * out , unsigned char * r , unsigned char * g , unsigned char * b , uint32 n )
LEAF_NODE	66:11	66:11	3	(
PARAMETER_DECL	66:12	66:27	3	unsigned char * out
TYPE	66:12	66:25	4	unsigned char *
TYPE_NAME	66:12	66:21	5	unsigned char
LEAF_NODE	66:12	66:12	6	unsigned
LEAF_NODE	66:21	66:21	6	char
POINTER	66:25	66:25	5	*
LEAF_NODE	66:25	66:25	6	*
NAME	66:27	66:27	4	out
LEAF_NODE	66:27	66:27	5	out
LEAF_NODE	66:30	66:30	3	,
PARAMETER_DECL	67:5	67:20	3	unsigned char * r
TYPE	67:5	67:18	4	unsigned char *
TYPE_NAME	67:5	67:14	5	unsigned char
LEAF_NODE	67:5	67:5	6	unsigned
LEAF_NODE	67:14	67:14	6	char
POINTER	67:18	67:18	5	*
LEAF_NODE	67:18	67:18	6	*
NAME	67:20	67:20	4	r
LEAF_NODE	67:20	67:20	5	r
LEAF_NODE	67:21	67:21	3	,
PARAMETER_DECL	67:23	67:38	3	unsigned char * g
TYPE	67:23	67:36	4	unsigned char *
TYPE_NAME	67:23	67:32	5	unsigned char
LEAF_NODE	67:23	67:23	6	unsigned
LEAF_NODE	67:32	67:32	6	char
POINTER	67:36	67:36	5	*
LEAF_NODE	67:36	67:36	6	*
NAME	67:38	67:38	4	g
LEAF_NODE	67:38	67:38	5	g
LEAF_NODE	67:39	67:39	3	,
PARAMETER_DECL	67:41	67:56	3	unsigned char * b
TYPE	67:41	67:54	4	unsigned char *
TYPE_NAME	67:41	67:50	5	unsigned char
LEAF_NODE	67:41	67:41	6	unsigned
LEAF_NODE	67:50	67:50	6	char
POINTER	67:54	67:54	5	*
LEAF_NODE	67:54	67:54	6	*
NAME	67:56	67:56	4	b
LEAF_NODE	67:56	67:56	5	b
LEAF_NODE	67:57	67:57	3	,
PARAMETER_DECL	67:59	67:66	3	uint32 n
TYPE	67:59	67:59	4	uint32
TYPE_NAME	67:59	67:59	5	uint32
LEAF_NODE	67:59	67:59	6	uint32
NAME	67:66	67:66	4	n
LEAF_NODE	67:66	67:66	5	n
LEAF_NODE	67:67	67:67	3	)
LEAF_NODE	68:0	68:0	2	{
STATEMENTS	69:1	71:1	2	
LEAF_NODE	69:1	69:1	3	register
SIMPLE_DECL	69:10	69:54	3	uint32 red ; red = RED , uint32 green ; green = GREEN , uint32 blue ; blue = BLUE ;
INIT_DECL_LIST	69:10	69:10	4	uint32 red ; red = RED , uint32 green ; green = GREEN , uint32 blue ; blue = BLUE
VAR_DECL	69:10	69:17	5	uint32 red ; red = RED
TYPE	69:10	69:10	6	uint32
TYPE_NAME	69:10	69:10	7	uint32
LEAF_NODE	69:10	69:10	8	uint32
NAME	69:17	69:17	6	red
LEAF_NODE	69:17	69:17	7	red
LEAF_NODE	0:0	0:0	6	;
INIT	69:17	69:17	6	red = RED
ASSIGN	69:17	69:23	7	red = RED
LVAL	69:17	69:17	8	red
NAME	69:17	69:17	9	red
LEAF_NODE	69:17	69:17	10	red
ASSIGN_OP	69:21	69:21	8	=
LEAF_NODE	69:21	69:21	9	=
RVAL	69:23	69:23	8	RED
FIELD	69:23	69:23	9	RED
LEAF_NODE	69:23	69:23	10	RED
LEAF_NODE	69:26	69:26	5	,
INIT_DECL_LIST	69:10	69:10	5	uint32 green ; green = GREEN , uint32 blue ; blue = BLUE
VAR_DECL	69:10	69:28	6	uint32 green ; green = GREEN
TYPE	69:10	69:10	7	uint32
TYPE_NAME	69:10	69:10	8	uint32
LEAF_NODE	69:10	69:10	9	uint32
NAME	69:28	69:28	7	green
LEAF_NODE	69:28	69:28	8	green
LEAF_NODE	0:0	0:0	7	;
INIT	69:28	69:28	7	green = GREEN
ASSIGN	69:28	69:36	8	green = GREEN
LVAL	69:28	69:28	9	green
NAME	69:28	69:28	10	green
LEAF_NODE	69:28	69:28	11	green
ASSIGN_OP	69:34	69:34	9	=
LEAF_NODE	69:34	69:34	10	=
RVAL	69:36	69:36	9	GREEN
FIELD	69:36	69:36	10	GREEN
LEAF_NODE	69:36	69:36	11	GREEN
LEAF_NODE	69:41	69:41	6	,
VAR_DECL	69:10	69:43	6	uint32 blue ; blue = BLUE
TYPE	69:10	69:10	7	uint32
TYPE_NAME	69:10	69:10	8	uint32
LEAF_NODE	69:10	69:10	9	uint32
NAME	69:43	69:43	7	blue
LEAF_NODE	69:43	69:43	8	blue
LEAF_NODE	0:0	0:0	7	;
INIT	69:43	69:43	7	blue = BLUE
ASSIGN	69:43	69:50	8	blue = BLUE
LVAL	69:43	69:43	9	blue
NAME	69:43	69:43	10	blue
LEAF_NODE	69:43	69:43	11	blue
ASSIGN_OP	69:48	69:48	9	=
LEAF_NODE	69:48	69:48	10	=
RVAL	69:50	69:50	9	BLUE
FIELD	69:50	69:50	10	BLUE
LEAF_NODE	69:50	69:50	11	BLUE
LEAF_NODE	69:54	69:54	4	;
ITERATION	71:1	72:2	3	
KEYWORD	71:1	71:1	4	while
LEAF_NODE	71:1	71:1	5	while
LEAF_NODE	71:7	71:7	4	(
CONDITION	71:8	71:8	4	n -- > 0
EXPR	71:8	71:14	5	n -- > 0
FIELD	71:8	71:9	6	n --
LEAF_NODE	71:8	71:8	7	n
LEAF_NODE	71:9	71:9	7	--
REL_OPERATOR	71:12	71:12	6	>
LEAF_NODE	71:12	71:12	7	>
FIELD	71:14	71:14	6	0
LEAF_NODE	71:14	71:14	7	0
LEAF_NODE	71:15	71:15	4	)
STATEMENTS	72:2	72:2	4	
EXPR_STATEMENT	72:2	73:51	5	* out ++ = ( unsigned char ) ( ( red * ( * r ++ ) + green * ( * g ++ ) + blue * ( * b ++ ) ) >> 8 ) ;
EXPR	72:2	72:2	6	* out ++ = ( unsigned char ) ( ( red * ( * r ++ ) + green * ( * g ++ ) + blue * ( * b ++ ) ) >> 8 )
ASSIGN	72:2	72:11	7	* out ++ = ( unsigned char ) ( ( red * ( * r ++ ) + green * ( * g ++ ) + blue * ( * b ++ ) ) >> 8 )
LVAL	72:2	72:2	8	* out ++
UNARY_EXPR	72:2	72:3	9	* out ++
UNARY_OPERATOR	72:2	72:2	10	*
LEAF_NODE	72:2	72:2	11	*
FIELD	72:3	72:6	10	out ++
LEAF_NODE	72:3	72:3	11	out
LEAF_NODE	72:6	72:6	11	++
ASSIGN_OP	72:9	72:9	8	=
LEAF_NODE	72:9	72:9	9	=
RVAL	72:11	73:50	8	( unsigned char ) ( ( red * ( * r ++ ) + green * ( * g ++ ) + blue * ( * b ++ ) ) >> 8 )
LEAF_NODE	72:11	72:11	9	(
TYPE_NAME	72:12	72:21	9	unsigned char
LEAF_NODE	72:12	72:12	10	unsigned
LEAF_NODE	72:21	72:21	10	char
LEAF_NODE	72:25	72:25	9	)
LEAF_NODE	73:3	73:3	9	(
LEAF_NODE	73:4	73:4	9	(
FIELD	73:5	73:5	9	red
LEAF_NODE	73:5	73:5	10	red
LEAF_NODE	73:8	73:8	9	*
LEAF_NODE	73:9	73:9	9	(
UNARY_EXPR	73:10	73:11	9	* r ++
UNARY_OPERATOR	73:10	73:10	10	*
LEAF_NODE	73:10	73:10	11	*
FIELD	73:11	73:12	10	r ++
LEAF_NODE	73:11	73:11	11	r
LEAF_NODE	73:12	73:12	11	++
LEAF_NODE	73:14	73:14	9	)
LEAF_NODE	73:16	73:16	9	+
FIELD	73:18	73:18	9	green
LEAF_NODE	73:18	73:18	10	green
LEAF_NODE	73:23	73:23	9	*
LEAF_NODE	73:24	73:24	9	(
UNARY_EXPR	73:25	73:26	9	* g ++
UNARY_OPERATOR	73:25	73:25	10	*
LEAF_NODE	73:25	73:25	11	*
FIELD	73:26	73:27	10	g ++
LEAF_NODE	73:26	73:26	11	g
LEAF_NODE	73:27	73:27	11	++
LEAF_NODE	73:29	73:29	9	)
LEAF_NODE	73:31	73:31	9	+
FIELD	73:33	73:33	9	blue
LEAF_NODE	73:33	73:33	10	blue
LEAF_NODE	73:37	73:37	9	*
LEAF_NODE	73:38	73:38	9	(
UNARY_EXPR	73:39	73:40	9	* b ++
UNARY_OPERATOR	73:39	73:39	10	*
LEAF_NODE	73:39	73:39	11	*
FIELD	73:40	73:41	10	b ++
LEAF_NODE	73:40	73:40	11	b
LEAF_NODE	73:41	73:41	11	++
LEAF_NODE	73:43	73:43	9	)
LEAF_NODE	73:44	73:44	9	)
LEAF_NODE	73:46	73:46	9	>>
FIELD	73:49	73:49	9	8
LEAF_NODE	73:49	73:49	10	8
LEAF_NODE	73:50	73:50	9	)
LEAF_NODE	73:51	73:51	6	;
LEAF_NODE	74:0	74:0	2	}
FUNCTION_DEF	76:0	84:0	1	
RETURN_TYPE	76:0	76:7	2	static int
LEAF_NODE	76:0	76:0	3	static
TYPE_NAME	76:7	76:7	3	int
LEAF_NODE	76:7	76:7	4	int
FUNCTION_NAME	77:0	77:0	2	checkcmap
LEAF_NODE	77:0	77:0	3	checkcmap
PARAMETER_LIST	77:9	77:59	2	( TIFF * tif , int n , uint16 * r , uint16 * g , uint16 * b )
LEAF_NODE	77:9	77:9	3	(
PARAMETER_DECL	77:10	77:16	3	TIFF * tif
TYPE	77:10	77:14	4	TIFF *
TYPE_NAME	77:10	77:10	5	TIFF
LEAF_NODE	77:10	77:10	6	TIFF
POINTER	77:14	77:14	5	*
LEAF_NODE	77:14	77:14	6	*
NAME	77:16	77:16	4	tif
LEAF_NODE	77:16	77:16	5	tif
LEAF_NODE	77:19	77:19	3	,
PARAMETER_DECL	77:21	77:25	3	int n
TYPE	77:21	77:21	4	int
TYPE_NAME	77:21	77:21	5	int
LEAF_NODE	77:21	77:21	6	int
NAME	77:25	77:25	4	n
LEAF_NODE	77:25	77:25	5	n
LEAF_NODE	77:26	77:26	3	,
PARAMETER_DECL	77:28	77:36	3	uint16 * r
TYPE	77:28	77:34	4	uint16 *
TYPE_NAME	77:28	77:28	5	uint16
LEAF_NODE	77:28	77:28	6	uint16
POINTER	77:34	77:34	5	*
LEAF_NODE	77:34	77:34	6	*
NAME	77:36	77:36	4	r
LEAF_NODE	77:36	77:36	5	r
LEAF_NODE	77:37	77:37	3	,
PARAMETER_DECL	77:39	77:47	3	uint16 * g
TYPE	77:39	77:45	4	uint16 *
TYPE_NAME	77:39	77:39	5	uint16
LEAF_NODE	77:39	77:39	6	uint16
POINTER	77:45	77:45	5	*
LEAF_NODE	77:45	77:45	6	*
NAME	77:47	77:47	4	g
LEAF_NODE	77:47	77:47	5	g
LEAF_NODE	77:48	77:48	3	,
PARAMETER_DECL	77:50	77:58	3	uint16 * b
TYPE	77:50	77:56	4	uint16 *
TYPE_NAME	77:50	77:50	5	uint16
LEAF_NODE	77:50	77:50	6	uint16
POINTER	77:56	77:56	5	*
LEAF_NODE	77:56	77:56	6	*
NAME	77:58	77:58	4	b
LEAF_NODE	77:58	77:58	5	b
LEAF_NODE	77:59	77:59	3	)
LEAF_NODE	78:0	78:0	2	{
STATEMENTS	79:1	83:1	2	
ITERATION	79:1	80:2	3	
KEYWORD	79:1	79:1	4	while
LEAF_NODE	79:1	79:1	5	while
LEAF_NODE	79:7	79:7	4	(
CONDITION	79:8	79:8	4	n -- > 0
EXPR	79:8	79:14	5	n -- > 0
FIELD	79:8	79:9	6	n --
LEAF_NODE	79:8	79:8	7	n
LEAF_NODE	79:9	79:9	7	--
REL_OPERATOR	79:12	79:12	6	>
LEAF_NODE	79:12	79:12	7	>
FIELD	79:14	79:14	6	0
LEAF_NODE	79:14	79:14	7	0
LEAF_NODE	79:15	79:15	4	)
STATEMENTS	80:2	80:2	4	
SELECTION	80:2	81:3	5	
KEYWORD	80:2	80:2	6	if
LEAF_NODE	80:2	80:2	7	if
LEAF_NODE	80:5	80:5	6	(
CONDITION	80:6	80:6	6	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
EXPR	80:6	80:6	7	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
OR	80:6	80:21	8	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
EXPR	80:6	80:14	9	* r ++ >= 256
UNARY_EXPR	80:6	80:7	10	* r ++
UNARY_OPERATOR	80:6	80:6	11	*
LEAF_NODE	80:6	80:6	12	*
FIELD	80:7	80:8	11	r ++
LEAF_NODE	80:7	80:7	12	r
LEAF_NODE	80:8	80:8	12	++
REL_OPERATOR	80:11	80:11	10	>=
LEAF_NODE	80:11	80:11	11	>=
FIELD	80:14	80:14	10	256
LEAF_NODE	80:14	80:14	11	256
LEAF_NODE	80:18	80:18	9	||
EXPR	80:21	80:21	9	* g ++ >= 256 || * b ++ >= 256
OR	80:21	80:36	10	* g ++ >= 256 || * b ++ >= 256
EXPR	80:21	80:29	11	* g ++ >= 256
UNARY_EXPR	80:21	80:22	12	* g ++
UNARY_OPERATOR	80:21	80:21	13	*
LEAF_NODE	80:21	80:21	14	*
FIELD	80:22	80:23	13	g ++
LEAF_NODE	80:22	80:22	14	g
LEAF_NODE	80:23	80:23	14	++
REL_OPERATOR	80:26	80:26	12	>=
LEAF_NODE	80:26	80:26	13	>=
FIELD	80:29	80:29	12	256
LEAF_NODE	80:29	80:29	13	256
LEAF_NODE	80:33	80:33	11	||
EXPR	80:36	80:44	11	* b ++ >= 256
UNARY_EXPR	80:36	80:37	12	* b ++
UNARY_OPERATOR	80:36	80:36	13	*
LEAF_NODE	80:36	80:36	14	*
FIELD	80:37	80:38	13	b ++
LEAF_NODE	80:37	80:37	14	b
LEAF_NODE	80:38	80:38	14	++
REL_OPERATOR	80:41	80:41	12	>=
LEAF_NODE	80:41	80:41	13	>=
FIELD	80:44	80:44	12	256
LEAF_NODE	80:44	80:44	13	256
LEAF_NODE	80:47	80:47	6	)
STATEMENTS	81:3	81:3	6	
JUMP_STATEMENT	81:3	81:14	7	return ( 16 ) ;
KEYWORD	81:3	81:3	8	return
LEAF_NODE	81:3	81:3	9	return
DESTINATION	81:10	81:10	8	( 16 )
EXPR	81:10	81:13	9	( 16 )
LEAF_NODE	81:10	81:10	10	(
FIELD	81:11	81:11	10	16
LEAF_NODE	81:11	81:11	11	16
LEAF_NODE	81:13	81:13	10	)
LEAF_NODE	81:14	81:14	8	;
EXPR_STATEMENT	82:1	82:58	3	TIFFWarning ( TIFFFileName ( tif ) , "Assuming 8-bit colormap" ) ;
EXPR	82:1	82:1	4	TIFFWarning ( TIFFFileName ( tif ) , "Assuming 8-bit colormap" )
FUNCTION_CALL	82:1	82:57	5	TIFFWarning ( TIFFFileName ( tif ) , "Assuming 8-bit colormap" )
CALLEE	82:1	82:1	6	TIFFWarning
LEAF_NODE	82:1	82:1	7	TIFFWarning
LEAF_NODE	82:12	82:12	6	(
ARGUMENT	82:13	82:13	6	TIFFFileName ( tif )
FUNCTION_CALL	82:13	82:29	7	TIFFFileName ( tif )
CALLEE	82:13	82:13	8	TIFFFileName
LEAF_NODE	82:13	82:13	9	TIFFFileName
LEAF_NODE	82:25	82:25	8	(
ARGUMENT	82:26	82:26	8	tif
FIELD	82:26	82:26	9	tif
LEAF_NODE	82:26	82:26	10	tif
LEAF_NODE	82:29	82:29	8	)
LEAF_NODE	82:30	82:30	6	,
ARGUMENT	82:32	82:32	6	"Assuming 8-bit colormap"
FIELD	82:32	82:32	7	"Assuming 8-bit colormap"
LEAF_NODE	82:32	82:32	8	"Assuming 8-bit colormap"
LEAF_NODE	82:57	82:57	6	)
LEAF_NODE	82:58	82:58	4	;
JUMP_STATEMENT	83:1	83:11	3	return ( 8 ) ;
KEYWORD	83:1	83:1	4	return
LEAF_NODE	83:1	83:1	5	return
DESTINATION	83:8	83:8	4	( 8 )
EXPR	83:8	83:10	5	( 8 )
LEAF_NODE	83:8	83:8	6	(
FIELD	83:9	83:9	6	8
LEAF_NODE	83:9	83:9	7	8
LEAF_NODE	83:10	83:10	6	)
LEAF_NODE	83:11	83:11	4	;
LEAF_NODE	84:0	84:0	2	}
FUNCTION_DEF	86:0	98:0	1	
RETURN_TYPE	86:0	86:7	2	static void
LEAF_NODE	86:0	86:0	3	static
TYPE_NAME	86:7	86:7	3	void
LEAF_NODE	86:7	86:7	4	void
FUNCTION_NAME	87:0	87:0	2	compresspalette
LEAF_NODE	87:0	87:0	3	compresspalette
PARAMETER_LIST	87:15	87:107	2	( unsigned char * out , unsigned char * data , uint32 n , uint16 * rmap , uint16 * gmap , uint16 * bmap )
LEAF_NODE	87:15	87:15	3	(
PARAMETER_DECL	87:16	87:31	3	unsigned char * out
TYPE	87:16	87:29	4	unsigned char *
TYPE_NAME	87:16	87:25	5	unsigned char
LEAF_NODE	87:16	87:16	6	unsigned
LEAF_NODE	87:25	87:25	6	char
POINTER	87:29	87:29	5	*
LEAF_NODE	87:29	87:29	6	*
NAME	87:31	87:31	4	out
LEAF_NODE	87:31	87:31	5	out
LEAF_NODE	87:34	87:34	3	,
PARAMETER_DECL	87:36	87:51	3	unsigned char * data
TYPE	87:36	87:49	4	unsigned char *
TYPE_NAME	87:36	87:45	5	unsigned char
LEAF_NODE	87:36	87:36	6	unsigned
LEAF_NODE	87:45	87:45	6	char
POINTER	87:49	87:49	5	*
LEAF_NODE	87:49	87:49	6	*
NAME	87:51	87:51	4	data
LEAF_NODE	87:51	87:51	5	data
LEAF_NODE	87:55	87:55	3	,
PARAMETER_DECL	87:57	87:64	3	uint32 n
TYPE	87:57	87:57	4	uint32
TYPE_NAME	87:57	87:57	5	uint32
LEAF_NODE	87:57	87:57	6	uint32
NAME	87:64	87:64	4	n
LEAF_NODE	87:64	87:64	5	n
LEAF_NODE	87:65	87:65	3	,
PARAMETER_DECL	87:67	87:75	3	uint16 * rmap
TYPE	87:67	87:73	4	uint16 *
TYPE_NAME	87:67	87:67	5	uint16
LEAF_NODE	87:67	87:67	6	uint16
POINTER	87:73	87:73	5	*
LEAF_NODE	87:73	87:73	6	*
NAME	87:75	87:75	4	rmap
LEAF_NODE	87:75	87:75	5	rmap
LEAF_NODE	87:79	87:79	3	,
PARAMETER_DECL	87:81	87:89	3	uint16 * gmap
TYPE	87:81	87:87	4	uint16 *
TYPE_NAME	87:81	87:81	5	uint16
LEAF_NODE	87:81	87:81	6	uint16
POINTER	87:87	87:87	5	*
LEAF_NODE	87:87	87:87	6	*
NAME	87:89	87:89	4	gmap
LEAF_NODE	87:89	87:89	5	gmap
LEAF_NODE	87:93	87:93	3	,
PARAMETER_DECL	87:95	87:103	3	uint16 * bmap
TYPE	87:95	87:101	4	uint16 *
TYPE_NAME	87:95	87:95	5	uint16
LEAF_NODE	87:95	87:95	6	uint16
POINTER	87:101	87:101	5	*
LEAF_NODE	87:101	87:101	6	*
NAME	87:103	87:103	4	bmap
LEAF_NODE	87:103	87:103	5	bmap
LEAF_NODE	87:107	87:107	3	)
LEAF_NODE	88:0	88:0	2	{
STATEMENTS	89:1	91:1	2	
LEAF_NODE	89:1	89:1	3	register
SIMPLE_DECL	89:10	89:54	3	int v , int red ; red = RED , int green ; green = GREEN , int blue ; blue = BLUE ;
INIT_DECL_LIST	89:10	89:10	4	int v , int red ; red = RED , int green ; green = GREEN , int blue ; blue = BLUE
VAR_DECL	89:10	89:14	5	int v
TYPE	89:10	89:10	6	int
TYPE_NAME	89:10	89:10	7	int
LEAF_NODE	89:10	89:10	8	int
NAME	89:14	89:14	6	v
LEAF_NODE	89:14	89:14	7	v
LEAF_NODE	89:15	89:15	5	,
INIT_DECL_LIST	89:10	89:10	5	int red ; red = RED , int green ; green = GREEN , int blue ; blue = BLUE
VAR_DECL	89:10	89:17	6	int red ; red = RED
TYPE	89:10	89:10	7	int
TYPE_NAME	89:10	89:10	8	int
LEAF_NODE	89:10	89:10	9	int
NAME	89:17	89:17	7	red
LEAF_NODE	89:17	89:17	8	red
LEAF_NODE	0:0	0:0	7	;
INIT	89:17	89:17	7	red = RED
ASSIGN	89:17	89:23	8	red = RED
LVAL	89:17	89:17	9	red
NAME	89:17	89:17	10	red
LEAF_NODE	89:17	89:17	11	red
ASSIGN_OP	89:21	89:21	9	=
LEAF_NODE	89:21	89:21	10	=
RVAL	89:23	89:23	9	RED
FIELD	89:23	89:23	10	RED
LEAF_NODE	89:23	89:23	11	RED
LEAF_NODE	89:26	89:26	6	,
INIT_DECL_LIST	89:10	89:10	6	int green ; green = GREEN , int blue ; blue = BLUE
VAR_DECL	89:10	89:28	7	int green ; green = GREEN
TYPE	89:10	89:10	8	int
TYPE_NAME	89:10	89:10	9	int
LEAF_NODE	89:10	89:10	10	int
NAME	89:28	89:28	8	green
LEAF_NODE	89:28	89:28	9	green
LEAF_NODE	0:0	0:0	8	;
INIT	89:28	89:28	8	green = GREEN
ASSIGN	89:28	89:36	9	green = GREEN
LVAL	89:28	89:28	10	green
NAME	89:28	89:28	11	green
LEAF_NODE	89:28	89:28	12	green
ASSIGN_OP	89:34	89:34	10	=
LEAF_NODE	89:34	89:34	11	=
RVAL	89:36	89:36	10	GREEN
FIELD	89:36	89:36	11	GREEN
LEAF_NODE	89:36	89:36	12	GREEN
LEAF_NODE	89:41	89:41	7	,
VAR_DECL	89:10	89:43	7	int blue ; blue = BLUE
TYPE	89:10	89:10	8	int
TYPE_NAME	89:10	89:10	9	int
LEAF_NODE	89:10	89:10	10	int
NAME	89:43	89:43	8	blue
LEAF_NODE	89:43	89:43	9	blue
LEAF_NODE	0:0	0:0	8	;
INIT	89:43	89:43	8	blue = BLUE
ASSIGN	89:43	89:50	9	blue = BLUE
LVAL	89:43	89:43	10	blue
NAME	89:43	89:43	11	blue
LEAF_NODE	89:43	89:43	12	blue
ASSIGN_OP	89:48	89:48	10	=
LEAF_NODE	89:48	89:48	11	=
RVAL	89:50	89:50	10	BLUE
FIELD	89:50	89:50	11	BLUE
LEAF_NODE	89:50	89:50	12	BLUE
LEAF_NODE	89:54	89:54	4	;
ITERATION	91:1	91:17	3	
KEYWORD	91:1	91:1	4	while
LEAF_NODE	91:1	91:1	5	while
LEAF_NODE	91:7	91:7	4	(
CONDITION	91:8	91:8	4	n -- > 0
EXPR	91:8	91:14	5	n -- > 0
FIELD	91:8	91:9	6	n --
LEAF_NODE	91:8	91:8	7	n
LEAF_NODE	91:9	91:9	7	--
REL_OPERATOR	91:12	91:12	6	>
LEAF_NODE	91:12	91:12	7	>
FIELD	91:14	91:14	6	0
LEAF_NODE	91:14	91:14	7	0
LEAF_NODE	91:15	91:15	4	)
STATEMENTS	91:17	97:1	4	
LEAF_NODE	91:17	91:17	5	{
STATEMENTS	92:2	96:2	5	
SIMPLE_DECL	92:2	92:27	6	unsigned int ix ; ix = * data ++ ;
VAR_DECL	92:2	92:15	7	unsigned int ix ; ix = * data ++
TYPE	92:2	92:2	8	unsigned int
TYPE_NAME	92:2	92:11	9	unsigned int
LEAF_NODE	92:2	92:2	10	unsigned
LEAF_NODE	92:11	92:11	10	int
NAME	92:15	92:15	8	ix
LEAF_NODE	92:15	92:15	9	ix
LEAF_NODE	0:0	0:0	8	;
INIT	92:15	92:15	8	ix = * data ++
ASSIGN	92:15	92:20	9	ix = * data ++
LVAL	92:15	92:15	10	ix
NAME	92:15	92:15	11	ix
LEAF_NODE	92:15	92:15	12	ix
ASSIGN_OP	92:18	92:18	10	=
LEAF_NODE	92:18	92:18	11	=
RVAL	92:20	92:20	10	* data ++
UNARY_EXPR	92:20	92:21	11	* data ++
UNARY_OPERATOR	92:20	92:20	12	*
LEAF_NODE	92:20	92:20	13	*
FIELD	92:21	92:25	12	data ++
LEAF_NODE	92:21	92:21	13	data
LEAF_NODE	92:25	92:25	13	++
LEAF_NODE	92:27	92:27	7	;
EXPR_STATEMENT	93:2	93:18	6	v = red * rmap [ ix ] ;
EXPR	93:2	93:2	7	v = red * rmap [ ix ]
ASSIGN	93:2	93:6	8	v = red * rmap [ ix ]
LVAL	93:2	93:2	9	v
FIELD	93:2	93:2	10	v
LEAF_NODE	93:2	93:2	11	v
ASSIGN_OP	93:4	93:4	9	=
LEAF_NODE	93:4	93:4	10	=
RVAL	93:6	93:10	9	red * rmap [ ix ]
FIELD	93:6	93:6	10	red
LEAF_NODE	93:6	93:6	11	red
LEAF_NODE	93:9	93:9	10	*
FIELD	93:10	93:17	10	rmap [ ix ]
LEAF_NODE	93:10	93:10	11	rmap
LEAF_NODE	93:14	93:14	11	[
EXPR	93:15	93:15	11	ix
FIELD	93:15	93:15	12	ix
LEAF_NODE	93:15	93:15	13	ix
LEAF_NODE	93:17	93:17	11	]
LEAF_NODE	93:18	93:18	7	;
EXPR_STATEMENT	94:2	94:21	6	v += green * gmap [ ix ] ;
EXPR	94:2	94:2	7	v += green * gmap [ ix ]
ASSIGN	94:2	94:7	8	v += green * gmap [ ix ]
LVAL	94:2	94:2	9	v
FIELD	94:2	94:2	10	v
LEAF_NODE	94:2	94:2	11	v
ASSIGN_OP	94:4	94:4	9	+=
LEAF_NODE	94:4	94:4	10	+=
RVAL	94:7	94:13	9	green * gmap [ ix ]
FIELD	94:7	94:7	10	green
LEAF_NODE	94:7	94:7	11	green
LEAF_NODE	94:12	94:12	10	*
FIELD	94:13	94:20	10	gmap [ ix ]
LEAF_NODE	94:13	94:13	11	gmap
LEAF_NODE	94:17	94:17	11	[
EXPR	94:18	94:18	11	ix
FIELD	94:18	94:18	12	ix
LEAF_NODE	94:18	94:18	13	ix
LEAF_NODE	94:20	94:20	11	]
LEAF_NODE	94:21	94:21	7	;
EXPR_STATEMENT	95:2	95:20	6	v += blue * bmap [ ix ] ;
EXPR	95:2	95:2	7	v += blue * bmap [ ix ]
ASSIGN	95:2	95:7	8	v += blue * bmap [ ix ]
LVAL	95:2	95:2	9	v
FIELD	95:2	95:2	10	v
LEAF_NODE	95:2	95:2	11	v
ASSIGN_OP	95:4	95:4	9	+=
LEAF_NODE	95:4	95:4	10	+=
RVAL	95:7	95:12	9	blue * bmap [ ix ]
FIELD	95:7	95:7	10	blue
LEAF_NODE	95:7	95:7	11	blue
LEAF_NODE	95:11	95:11	10	*
FIELD	95:12	95:19	10	bmap [ ix ]
LEAF_NODE	95:12	95:12	11	bmap
LEAF_NODE	95:16	95:16	11	[
EXPR	95:17	95:17	11	ix
FIELD	95:17	95:17	12	ix
LEAF_NODE	95:17	95:17	13	ix
LEAF_NODE	95:19	95:19	11	]
LEAF_NODE	95:20	95:20	7	;
EXPR_STATEMENT	96:2	96:15	6	* out ++ = v >> 8 ;
EXPR	96:2	96:2	7	* out ++ = v >> 8
ASSIGN	96:2	96:11	8	* out ++ = v >> 8
LVAL	96:2	96:2	9	* out ++
UNARY_EXPR	96:2	96:3	10	* out ++
UNARY_OPERATOR	96:2	96:2	11	*
LEAF_NODE	96:2	96:2	12	*
FIELD	96:3	96:6	11	out ++
LEAF_NODE	96:3	96:3	12	out
LEAF_NODE	96:6	96:6	12	++
ASSIGN_OP	96:9	96:9	9	=
LEAF_NODE	96:9	96:9	10	=
RVAL	96:11	96:14	9	v >> 8
FIELD	96:11	96:11	10	v
LEAF_NODE	96:11	96:11	11	v
LEAF_NODE	96:12	96:12	10	>>
FIELD	96:14	96:14	10	8
LEAF_NODE	96:14	96:14	11	8
LEAF_NODE	96:15	96:15	7	;
LEAF_NODE	97:1	97:1	5	}
LEAF_NODE	98:0	98:0	2	}
SIMPLE_DECL	100:7	100:39	1	uint16 compression ; compression = ( uint16 ) - 1 ;
VAR_DECL	100:7	100:14	2	uint16 compression ; compression = ( uint16 ) - 1
TYPE	100:7	100:7	3	uint16
TYPE_NAME	100:7	100:7	4	uint16
LEAF_NODE	100:7	100:7	5	uint16
NAME	100:14	100:14	3	compression
LEAF_NODE	100:14	100:14	4	compression
LEAF_NODE	0:0	0:0	3	;
INIT	100:14	100:14	3	compression = ( uint16 ) - 1
ASSIGN	100:14	100:28	4	compression = ( uint16 ) - 1
LVAL	100:14	100:14	5	compression
NAME	100:14	100:14	6	compression
LEAF_NODE	100:14	100:14	7	compression
ASSIGN_OP	100:26	100:26	5	=
LEAF_NODE	100:26	100:26	6	=
RVAL	100:28	100:37	5	( uint16 ) - 1
LEAF_NODE	100:28	100:28	6	(
TYPE_NAME	100:29	100:29	6	uint16
LEAF_NODE	100:29	100:29	7	uint16
LEAF_NODE	100:35	100:35	6	)
UNARY_EXPR	100:37	100:38	6	- 1
UNARY_OPERATOR	100:37	100:37	7	-
LEAF_NODE	100:37	100:37	8	-
FIELD	100:38	100:38	7	1
LEAF_NODE	100:38	100:38	8	1
LEAF_NODE	100:39	100:39	2	;
SIMPLE_DECL	101:7	101:27	1	uint16 predictor ; predictor = 0 ;
VAR_DECL	101:7	101:14	2	uint16 predictor ; predictor = 0
TYPE	101:7	101:7	3	uint16
TYPE_NAME	101:7	101:7	4	uint16
LEAF_NODE	101:7	101:7	5	uint16
NAME	101:14	101:14	3	predictor
LEAF_NODE	101:14	101:14	4	predictor
LEAF_NODE	0:0	0:0	3	;
INIT	101:14	101:14	3	predictor = 0
ASSIGN	101:14	101:26	4	predictor = 0
LVAL	101:14	101:14	5	predictor
NAME	101:14	101:14	6	predictor
LEAF_NODE	101:14	101:14	7	predictor
ASSIGN_OP	101:24	101:24	5	=
LEAF_NODE	101:24	101:24	6	=
RVAL	101:26	101:26	5	0
FIELD	101:26	101:26	6	0
LEAF_NODE	101:26	101:26	7	0
LEAF_NODE	101:27	101:27	2	;
SIMPLE_DECL	102:7	102:44	1	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB ;
VAR_DECL	102:7	102:11	2	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB
TYPE	102:7	102:7	3	int
TYPE_NAME	102:7	102:7	4	int
LEAF_NODE	102:7	102:7	5	int
NAME	102:11	102:11	3	jpegcolormode
LEAF_NODE	102:11	102:11	4	jpegcolormode
LEAF_NODE	0:0	0:0	3	;
INIT	102:11	102:11	3	jpegcolormode = JPEGCOLORMODE_RGB
ASSIGN	102:11	102:27	4	jpegcolormode = JPEGCOLORMODE_RGB
LVAL	102:11	102:11	5	jpegcolormode
NAME	102:11	102:11	6	jpegcolormode
LEAF_NODE	102:11	102:11	7	jpegcolormode
ASSIGN_OP	102:25	102:25	5	=
LEAF_NODE	102:25	102:25	6	=
RVAL	102:27	102:27	5	JPEGCOLORMODE_RGB
FIELD	102:27	102:27	6	JPEGCOLORMODE_RGB
LEAF_NODE	102:27	102:27	7	JPEGCOLORMODE_RGB
LEAF_NODE	102:44	102:44	2	;
SIMPLE_DECL	103:7	103:23	1	int quality ; quality = 75 ;
VAR_DECL	103:7	103:11	2	int quality ; quality = 75
TYPE	103:7	103:7	3	int
TYPE_NAME	103:7	103:7	4	int
LEAF_NODE	103:7	103:7	5	int
NAME	103:11	103:11	3	quality
LEAF_NODE	103:11	103:11	4	quality
LEAF_NODE	0:0	0:0	3	;
INIT	103:11	103:11	3	quality = 75
ASSIGN	103:11	103:21	4	quality = 75
LVAL	103:11	103:11	5	quality
NAME	103:11	103:11	6	quality
LEAF_NODE	103:11	103:11	7	quality
ASSIGN_OP	103:19	103:19	5	=
LEAF_NODE	103:19	103:19	6	=
RVAL	103:21	103:21	5	75
FIELD	103:21	103:21	6	75
LEAF_NODE	103:21	103:21	7	75
LEAF_NODE	103:23	103:23	2	;
SIMPLE_DECL	105:7	105:39	1	void cpTags ; cpTags cpTags ( TIFF * in , TIFF * out ) ;
VAR_DECL	105:7	105:12	2	void cpTags ; cpTags cpTags ( TIFF * in , TIFF * out )
TYPE	105:7	105:7	3	void
TYPE_NAME	105:7	105:7	4	void
LEAF_NODE	105:7	105:7	5	void
NAME	105:12	105:12	3	cpTags
LEAF_NODE	105:12	105:12	4	cpTags
LEAF_NODE	0:0	0:0	3	;
INIT	105:12	105:12	3	cpTags cpTags ( TIFF * in , TIFF * out )
ASSIGN	105:12	105:18	4	cpTags cpTags ( TIFF * in , TIFF * out )
LVAL	105:12	105:12	5	cpTags
NAME	105:12	105:12	6	cpTags
LEAF_NODE	105:12	105:12	7	cpTags
ASSIGN_OP	105:12	105:12	5	cpTags
NAME	105:12	105:12	6	cpTags
LEAF_NODE	105:12	105:12	7	cpTags
RVAL	105:18	105:38	5	( TIFF * in , TIFF * out )
LEAF_NODE	105:18	105:18	6	(
EXPR	105:19	105:35	6	TIFF * in , TIFF * out
FIELD	105:19	105:19	7	TIFF
LEAF_NODE	105:19	105:19	8	TIFF
LEAF_NODE	105:23	105:23	7	*
FIELD	105:25	105:25	7	in
LEAF_NODE	105:25	105:25	8	in
LEAF_NODE	105:27	105:27	7	,
FIELD	105:29	105:29	7	TIFF
LEAF_NODE	105:29	105:29	8	TIFF
LEAF_NODE	105:33	105:33	7	*
FIELD	105:35	105:35	7	out
LEAF_NODE	105:35	105:35	8	out
LEAF_NODE	105:38	105:38	6	)
LEAF_NODE	105:39	105:39	2	;
FUNCTION_DEF	107:0	321:0	1	
RETURN_TYPE	107:0	107:0	2	int
TYPE_NAME	107:0	107:0	3	int
LEAF_NODE	107:0	107:0	4	int
FUNCTION_NAME	108:0	108:0	2	main
LEAF_NODE	108:0	108:0	3	main
PARAMETER_LIST	108:4	108:27	2	( int argc , char * [ ] argv )
LEAF_NODE	108:4	108:4	3	(
PARAMETER_DECL	108:5	108:9	3	int argc
TYPE	108:5	108:5	4	int
TYPE_NAME	108:5	108:5	5	int
LEAF_NODE	108:5	108:5	6	int
NAME	108:9	108:9	4	argc
LEAF_NODE	108:9	108:9	5	argc
LEAF_NODE	108:13	108:13	3	,
PARAMETER_DECL	108:15	108:21	3	char * [ ] argv
TYPE	108:15	108:25	4	char * [ ]
TYPE_NAME	108:15	108:15	5	char
LEAF_NODE	108:15	108:15	6	char
POINTER	108:19	108:19	5	*
LEAF_NODE	108:19	108:19	6	*
TYPE_SUFFIX	108:25	108:26	5	[ ]
LEAF_NODE	108:25	108:25	6	[
LEAF_NODE	108:26	108:26	6	]
NAME	108:21	108:21	4	argv
LEAF_NODE	108:21	108:21	5	argv
LEAF_NODE	108:27	108:27	3	)
LEAF_NODE	109:0	109:0	2	{
STATEMENTS	110:1	320:8	2	
SIMPLE_DECL	110:1	110:34	3	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	110:1	110:8	4	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	110:1	110:1	5	uint32
TYPE_NAME	110:1	110:1	6	uint32
LEAF_NODE	110:1	110:1	7	uint32
NAME	110:8	110:8	5	rowsperstrip
LEAF_NODE	110:8	110:8	6	rowsperstrip
LEAF_NODE	0:0	0:0	5	;
INIT	110:8	110:8	5	rowsperstrip = ( uint32 ) - 1
ASSIGN	110:8	110:23	6	rowsperstrip = ( uint32 ) - 1
LVAL	110:8	110:8	7	rowsperstrip
NAME	110:8	110:8	8	rowsperstrip
LEAF_NODE	110:8	110:8	9	rowsperstrip
ASSIGN_OP	110:21	110:21	7	=
LEAF_NODE	110:21	110:21	8	=
RVAL	110:23	110:32	7	( uint32 ) - 1
LEAF_NODE	110:23	110:23	8	(
TYPE_NAME	110:24	110:24	8	uint32
LEAF_NODE	110:24	110:24	9	uint32
LEAF_NODE	110:30	110:30	8	)
UNARY_EXPR	110:32	110:33	8	- 1
UNARY_OPERATOR	110:32	110:32	9	-
LEAF_NODE	110:32	110:32	10	-
FIELD	110:33	110:33	9	1
LEAF_NODE	110:33	110:33	10	1
LEAF_NODE	110:34	110:34	4	;
SIMPLE_DECL	111:1	111:15	3	TIFF * in , TIFF * out ;
INIT_DECL_LIST	111:1	111:1	4	TIFF * in , TIFF * out
VAR_DECL	111:1	111:7	5	TIFF * in
TYPE	111:1	111:6	6	TIFF *
TYPE_NAME	111:1	111:1	7	TIFF
LEAF_NODE	111:1	111:1	8	TIFF
POINTER	111:6	111:6	7	*
LEAF_NODE	111:6	111:6	8	*
NAME	111:7	111:7	6	in
LEAF_NODE	111:7	111:7	7	in
LEAF_NODE	111:9	111:9	5	,
VAR_DECL	111:1	111:12	5	TIFF * out
TYPE	111:1	111:11	6	TIFF *
TYPE_NAME	111:1	111:1	7	TIFF
LEAF_NODE	111:1	111:1	8	TIFF
POINTER	111:11	111:11	7	*
LEAF_NODE	111:11	111:11	8	*
NAME	111:12	111:12	6	out
LEAF_NODE	111:12	111:12	7	out
LEAF_NODE	111:15	111:15	4	;
SIMPLE_DECL	112:1	112:12	3	uint32 w , uint32 h ;
INIT_DECL_LIST	112:1	112:1	4	uint32 w , uint32 h
VAR_DECL	112:1	112:8	5	uint32 w
TYPE	112:1	112:1	6	uint32
TYPE_NAME	112:1	112:1	7	uint32
LEAF_NODE	112:1	112:1	8	uint32
NAME	112:8	112:8	6	w
LEAF_NODE	112:8	112:8	7	w
LEAF_NODE	112:9	112:9	5	,
VAR_DECL	112:1	112:11	5	uint32 h
TYPE	112:1	112:1	6	uint32
TYPE_NAME	112:1	112:1	7	uint32
LEAF_NODE	112:1	112:1	8	uint32
NAME	112:11	112:11	6	h
LEAF_NODE	112:11	112:11	7	h
LEAF_NODE	112:12	112:12	4	;
SIMPLE_DECL	113:1	113:23	3	uint16 samplesperpixel ;
VAR_DECL	113:1	113:8	4	uint16 samplesperpixel
TYPE	113:1	113:1	5	uint16
TYPE_NAME	113:1	113:1	6	uint16
LEAF_NODE	113:1	113:1	7	uint16
NAME	113:8	113:8	5	samplesperpixel
LEAF_NODE	113:8	113:8	6	samplesperpixel
LEAF_NODE	113:23	113:23	4	;
SIMPLE_DECL	114:1	114:21	3	uint16 bitspersample ;
VAR_DECL	114:1	114:8	4	uint16 bitspersample
TYPE	114:1	114:1	5	uint16
TYPE_NAME	114:1	114:1	6	uint16
LEAF_NODE	114:1	114:1	7	uint16
NAME	114:8	114:8	5	bitspersample
LEAF_NODE	114:8	114:8	6	bitspersample
LEAF_NODE	114:21	114:21	4	;
SIMPLE_DECL	115:1	115:14	3	uint16 config ;
VAR_DECL	115:1	115:8	4	uint16 config
TYPE	115:1	115:1	5	uint16
TYPE_NAME	115:1	115:1	6	uint16
LEAF_NODE	115:1	115:1	7	uint16
NAME	115:8	115:8	5	config
LEAF_NODE	115:8	115:8	6	config
LEAF_NODE	115:14	115:14	4	;
SIMPLE_DECL	116:1	116:19	3	uint16 photometric ;
VAR_DECL	116:1	116:8	4	uint16 photometric
TYPE	116:1	116:1	5	uint16
TYPE_NAME	116:1	116:1	6	uint16
LEAF_NODE	116:1	116:1	7	uint16
NAME	116:8	116:8	5	photometric
LEAF_NODE	116:8	116:8	6	photometric
LEAF_NODE	116:19	116:19	4	;
SIMPLE_DECL	117:1	117:12	3	uint16 * red ;
VAR_DECL	117:1	117:9	4	uint16 * red
TYPE	117:1	117:7	5	uint16 *
TYPE_NAME	117:1	117:1	6	uint16
LEAF_NODE	117:1	117:1	7	uint16
POINTER	117:7	117:7	6	*
LEAF_NODE	117:7	117:7	7	*
NAME	117:9	117:9	5	red
LEAF_NODE	117:9	117:9	6	red
LEAF_NODE	117:12	117:12	4	;
SIMPLE_DECL	118:1	118:14	3	uint16 * green ;
VAR_DECL	118:1	118:9	4	uint16 * green
TYPE	118:1	118:7	5	uint16 *
TYPE_NAME	118:1	118:1	6	uint16
LEAF_NODE	118:1	118:1	7	uint16
POINTER	118:7	118:7	6	*
LEAF_NODE	118:7	118:7	7	*
NAME	118:9	118:9	5	green
LEAF_NODE	118:9	118:9	6	green
LEAF_NODE	118:14	118:14	4	;
SIMPLE_DECL	119:1	119:13	3	uint16 * blue ;
VAR_DECL	119:1	119:9	4	uint16 * blue
TYPE	119:1	119:7	5	uint16 *
TYPE_NAME	119:1	119:1	6	uint16
LEAF_NODE	119:1	119:1	7	uint16
POINTER	119:7	119:7	6	*
LEAF_NODE	119:7	119:7	7	*
NAME	119:9	119:9	5	blue
LEAF_NODE	119:9	119:9	6	blue
LEAF_NODE	119:13	119:13	4	;
SIMPLE_DECL	120:1	120:16	3	tsize_t rowsize ;
VAR_DECL	120:1	120:9	4	tsize_t rowsize
TYPE	120:1	120:1	5	tsize_t
TYPE_NAME	120:1	120:1	6	tsize_t
LEAF_NODE	120:1	120:1	7	tsize_t
NAME	120:9	120:9	5	rowsize
LEAF_NODE	120:9	120:9	6	rowsize
LEAF_NODE	120:16	120:16	4	;
LEAF_NODE	121:1	121:1	3	register
SIMPLE_DECL	121:10	121:20	3	uint32 row ;
VAR_DECL	121:10	121:17	4	uint32 row
TYPE	121:10	121:10	5	uint32
TYPE_NAME	121:10	121:10	6	uint32
LEAF_NODE	121:10	121:10	7	uint32
NAME	121:17	121:17	5	row
LEAF_NODE	121:17	121:17	6	row
LEAF_NODE	121:20	121:20	4	;
LEAF_NODE	122:1	122:1	3	register
SIMPLE_DECL	122:10	122:21	3	tsample_t s ;
VAR_DECL	122:10	122:20	4	tsample_t s
TYPE	122:10	122:10	5	tsample_t
TYPE_NAME	122:10	122:10	6	tsample_t
LEAF_NODE	122:10	122:10	7	tsample_t
NAME	122:20	122:20	5	s
LEAF_NODE	122:20	122:20	6	s
LEAF_NODE	122:21	122:21	4	;
SIMPLE_DECL	123:1	123:30	3	unsigned char * inbuf , unsigned char * outbuf ;
INIT_DECL_LIST	123:1	123:1	4	unsigned char * inbuf , unsigned char * outbuf
VAR_DECL	123:1	123:16	5	unsigned char * inbuf
TYPE	123:1	123:15	6	unsigned char *
TYPE_NAME	123:1	123:10	7	unsigned char
LEAF_NODE	123:1	123:1	8	unsigned
LEAF_NODE	123:10	123:10	8	char
POINTER	123:15	123:15	7	*
LEAF_NODE	123:15	123:15	8	*
NAME	123:16	123:16	6	inbuf
LEAF_NODE	123:16	123:16	7	inbuf
LEAF_NODE	123:21	123:21	5	,
VAR_DECL	123:1	123:24	5	unsigned char * outbuf
TYPE	123:1	123:23	6	unsigned char *
TYPE_NAME	123:1	123:10	7	unsigned char
LEAF_NODE	123:1	123:1	8	unsigned
LEAF_NODE	123:10	123:10	8	char
POINTER	123:23	123:23	7	*
LEAF_NODE	123:23	123:23	8	*
NAME	123:24	123:24	6	outbuf
LEAF_NODE	123:24	123:24	7	outbuf
LEAF_NODE	123:30	123:30	4	;
SIMPLE_DECL	124:1	124:17	3	char [ 1024 ] thing ;
VAR_DECL	124:1	124:6	4	char [ 1024 ] thing
TYPE	124:1	124:11	5	char [ 1024 ]
TYPE_NAME	124:1	124:1	6	char
LEAF_NODE	124:1	124:1	7	char
TYPE_SUFFIX	124:11	124:16	6	[ 1024 ]
LEAF_NODE	124:11	124:11	7	[
FIELD	124:12	124:12	7	1024
LEAF_NODE	124:12	124:12	8	1024
LEAF_NODE	124:16	124:16	7	]
NAME	124:6	124:6	5	thing
LEAF_NODE	124:6	124:6	6	thing
LEAF_NODE	124:17	124:17	4	;
SIMPLE_DECL	125:1	125:6	3	int c ;
VAR_DECL	125:1	125:5	4	int c
TYPE	125:1	125:1	5	int
TYPE_NAME	125:1	125:1	6	int
LEAF_NODE	125:1	125:1	7	int
NAME	125:5	125:5	5	c
LEAF_NODE	125:5	125:5	6	c
LEAF_NODE	125:6	125:6	4	;
LEAF_NODE	127:1	127:1	3	extern
SIMPLE_DECL	127:8	127:18	3	int optind ;
VAR_DECL	127:8	127:12	4	int optind
TYPE	127:8	127:8	5	int
TYPE_NAME	127:8	127:8	6	int
LEAF_NODE	127:8	127:8	7	int
NAME	127:12	127:12	5	optind
LEAF_NODE	127:12	127:12	6	optind
LEAF_NODE	127:18	127:18	4	;
LEAF_NODE	128:1	128:1	3	extern
SIMPLE_DECL	128:8	128:20	3	char * optarg ;
VAR_DECL	128:8	128:14	4	char * optarg
TYPE	128:8	128:13	5	char *
TYPE_NAME	128:8	128:8	6	char
LEAF_NODE	128:8	128:8	7	char
POINTER	128:13	128:13	6	*
LEAF_NODE	128:13	128:13	7	*
NAME	128:14	128:14	5	optarg
LEAF_NODE	128:14	128:14	6	optarg
LEAF_NODE	128:20	128:20	4	;
EXPR_STATEMENT	131:8	131:26	3	in = ( TIFF * ) NULL ;
EXPR	131:8	131:8	4	in = ( TIFF * ) NULL
ASSIGN	131:8	131:13	5	in = ( TIFF * ) NULL
LVAL	131:8	131:8	6	in
FIELD	131:8	131:8	7	in
LEAF_NODE	131:8	131:8	8	in
ASSIGN_OP	131:11	131:11	6	=
LEAF_NODE	131:11	131:11	7	=
RVAL	131:13	131:22	6	( TIFF * ) NULL
LEAF_NODE	131:13	131:13	7	(
TYPE_NAME	131:14	131:14	7	TIFF
LEAF_NODE	131:14	131:14	8	TIFF
LEAF_NODE	131:19	131:19	7	*
LEAF_NODE	131:20	131:20	7	)
FIELD	131:22	131:22	7	NULL
LEAF_NODE	131:22	131:22	8	NULL
LEAF_NODE	131:26	131:26	4	;
EXPR_STATEMENT	132:8	132:27	3	out = ( TIFF * ) NULL ;
EXPR	132:8	132:8	4	out = ( TIFF * ) NULL
ASSIGN	132:8	132:14	5	out = ( TIFF * ) NULL
LVAL	132:8	132:8	6	out
FIELD	132:8	132:8	7	out
LEAF_NODE	132:8	132:8	8	out
ASSIGN_OP	132:12	132:12	6	=
LEAF_NODE	132:12	132:12	7	=
RVAL	132:14	132:23	6	( TIFF * ) NULL
LEAF_NODE	132:14	132:14	7	(
TYPE_NAME	132:15	132:15	7	TIFF
LEAF_NODE	132:15	132:15	8	TIFF
LEAF_NODE	132:20	132:20	7	*
LEAF_NODE	132:21	132:21	7	)
FIELD	132:23	132:23	7	NULL
LEAF_NODE	132:23	132:23	8	NULL
LEAF_NODE	132:27	132:27	4	;
EXPR_STATEMENT	133:8	133:38	3	inbuf = ( unsigned char * ) NULL ;
EXPR	133:8	133:8	4	inbuf = ( unsigned char * ) NULL
ASSIGN	133:8	133:16	5	inbuf = ( unsigned char * ) NULL
LVAL	133:8	133:8	6	inbuf
FIELD	133:8	133:8	7	inbuf
LEAF_NODE	133:8	133:8	8	inbuf
ASSIGN_OP	133:14	133:14	6	=
LEAF_NODE	133:14	133:14	7	=
RVAL	133:16	133:34	6	( unsigned char * ) NULL
LEAF_NODE	133:16	133:16	7	(
TYPE_NAME	133:17	133:26	7	unsigned char
LEAF_NODE	133:17	133:17	8	unsigned
LEAF_NODE	133:26	133:26	8	char
LEAF_NODE	133:31	133:31	7	*
LEAF_NODE	133:32	133:32	7	)
FIELD	133:34	133:34	7	NULL
LEAF_NODE	133:34	133:34	8	NULL
LEAF_NODE	133:38	133:38	4	;
EXPR_STATEMENT	134:8	134:39	3	outbuf = ( unsigned char * ) NULL ;
EXPR	134:8	134:8	4	outbuf = ( unsigned char * ) NULL
ASSIGN	134:8	134:17	5	outbuf = ( unsigned char * ) NULL
LVAL	134:8	134:8	6	outbuf
FIELD	134:8	134:8	7	outbuf
LEAF_NODE	134:8	134:8	8	outbuf
ASSIGN_OP	134:15	134:15	6	=
LEAF_NODE	134:15	134:15	7	=
RVAL	134:17	134:35	6	( unsigned char * ) NULL
LEAF_NODE	134:17	134:17	7	(
TYPE_NAME	134:18	134:27	7	unsigned char
LEAF_NODE	134:18	134:18	8	unsigned
LEAF_NODE	134:27	134:27	8	char
LEAF_NODE	134:32	134:32	7	*
LEAF_NODE	134:33	134:33	7	)
FIELD	134:35	134:35	7	NULL
LEAF_NODE	134:35	134:35	8	NULL
LEAF_NODE	134:39	134:39	4	;
ITERATION	136:1	137:2	3	
KEYWORD	136:1	136:1	4	while
LEAF_NODE	136:1	136:1	5	while
LEAF_NODE	136:7	136:7	4	(
CONDITION	136:8	136:8	4	( c = getopt ( argc , argv , "c:r:R:G:B:" ) ) != - 1
EXPR	136:8	136:50	5	( c = getopt ( argc , argv , "c:r:R:G:B:" ) ) != - 1
LEAF_NODE	136:8	136:8	6	(
ASSIGN	136:9	136:13	6	c = getopt ( argc , argv , "c:r:R:G:B:" )
LVAL	136:9	136:9	7	c
FIELD	136:9	136:9	8	c
LEAF_NODE	136:9	136:9	9	c
ASSIGN_OP	136:11	136:11	7	=
LEAF_NODE	136:11	136:11	8	=
RVAL	136:13	136:13	7	getopt ( argc , argv , "c:r:R:G:B:" )
FUNCTION_CALL	136:13	136:44	8	getopt ( argc , argv , "c:r:R:G:B:" )
CALLEE	136:13	136:13	9	getopt
LEAF_NODE	136:13	136:13	10	getopt
LEAF_NODE	136:19	136:19	9	(
ARGUMENT	136:20	136:20	9	argc
FIELD	136:20	136:20	10	argc
LEAF_NODE	136:20	136:20	11	argc
LEAF_NODE	136:24	136:24	9	,
ARGUMENT	136:26	136:26	9	argv
FIELD	136:26	136:26	10	argv
LEAF_NODE	136:26	136:26	11	argv
LEAF_NODE	136:30	136:30	9	,
ARGUMENT	136:32	136:32	9	"c:r:R:G:B:"
FIELD	136:32	136:32	10	"c:r:R:G:B:"
LEAF_NODE	136:32	136:32	11	"c:r:R:G:B:"
LEAF_NODE	136:44	136:44	9	)
LEAF_NODE	136:45	136:45	6	)
EQ_OPERATOR	136:47	136:47	6	!=
LEAF_NODE	136:47	136:47	7	!=
UNARY_EXPR	136:50	136:51	6	- 1
UNARY_OPERATOR	136:50	136:50	7	-
LEAF_NODE	136:50	136:50	8	-
FIELD	136:51	136:51	7	1
LEAF_NODE	136:51	136:51	8	1
LEAF_NODE	136:52	136:52	4	)
STATEMENTS	137:2	137:2	4	
SELECTION	137:2	137:13	5	
KEYWORD	137:2	137:2	6	switch
LEAF_NODE	137:2	137:2	7	switch
LEAF_NODE	137:9	137:9	6	(
CONDITION	137:10	137:10	6	c
EXPR	137:10	137:10	7	c
FIELD	137:10	137:10	8	c
LEAF_NODE	137:10	137:10	9	c
LEAF_NODE	137:11	137:11	6	)
STATEMENTS	137:13	157:2	6	
LEAF_NODE	137:13	137:13	7	{
STATEMENTS	138:2	155:3	7	
LEAF_NODE	138:2	138:2	8	case
LEAF_NODE	138:7	138:7	8	'c'
LEAF_NODE	138:10	138:10	8	:
SELECTION	139:3	140:4	8	
KEYWORD	139:3	139:3	9	if
LEAF_NODE	139:3	139:3	10	if
LEAF_NODE	139:6	139:6	9	(
CONDITION	139:7	139:7	9	! processCompressOptions ( optarg )
EXPR	139:7	139:7	10	! processCompressOptions ( optarg )
UNARY_EXPR	139:7	139:8	11	! processCompressOptions ( optarg )
UNARY_OPERATOR	139:7	139:7	12	!
LEAF_NODE	139:7	139:7	13	!
FUNCTION_CALL	139:8	139:37	12	processCompressOptions ( optarg )
CALLEE	139:8	139:8	13	processCompressOptions
LEAF_NODE	139:8	139:8	14	processCompressOptions
LEAF_NODE	139:30	139:30	13	(
ARGUMENT	139:31	139:31	13	optarg
FIELD	139:31	139:31	14	optarg
LEAF_NODE	139:31	139:31	15	optarg
LEAF_NODE	139:37	139:37	13	)
LEAF_NODE	139:38	139:38	9	)
STATEMENTS	140:4	140:4	9	
EXPR_STATEMENT	140:4	140:11	10	usage ( ) ;
EXPR	140:4	140:4	11	usage ( )
FUNCTION_CALL	140:4	140:10	12	usage ( )
CALLEE	140:4	140:4	13	usage
LEAF_NODE	140:4	140:4	14	usage
LEAF_NODE	140:9	140:9	13	(
LEAF_NODE	140:10	140:10	13	)
LEAF_NODE	140:11	140:11	11	;
JUMP_STATEMENT	141:3	141:8	8	break DESTINATION ;
KEYWORD	141:3	141:3	9	break
LEAF_NODE	141:3	141:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	141:8	141:8	9	;
LEAF_NODE	142:2	142:2	8	case
LEAF_NODE	142:7	142:7	8	'r'
LEAF_NODE	142:10	142:10	8	:
EXPR_STATEMENT	143:3	143:30	8	rowsperstrip = atoi ( optarg ) ;
EXPR	143:3	143:3	9	rowsperstrip = atoi ( optarg )
ASSIGN	143:3	143:18	10	rowsperstrip = atoi ( optarg )
LVAL	143:3	143:3	11	rowsperstrip
FIELD	143:3	143:3	12	rowsperstrip
LEAF_NODE	143:3	143:3	13	rowsperstrip
ASSIGN_OP	143:16	143:16	11	=
LEAF_NODE	143:16	143:16	12	=
RVAL	143:18	143:18	11	atoi ( optarg )
FUNCTION_CALL	143:18	143:29	12	atoi ( optarg )
CALLEE	143:18	143:18	13	atoi
LEAF_NODE	143:18	143:18	14	atoi
LEAF_NODE	143:22	143:22	13	(
ARGUMENT	143:23	143:23	13	optarg
FIELD	143:23	143:23	14	optarg
LEAF_NODE	143:23	143:23	15	optarg
LEAF_NODE	143:29	143:29	13	)
LEAF_NODE	143:30	143:30	9	;
JUMP_STATEMENT	144:3	144:8	8	break DESTINATION ;
KEYWORD	144:3	144:3	9	break
LEAF_NODE	144:3	144:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	144:8	144:8	9	;
LEAF_NODE	145:2	145:2	8	case
LEAF_NODE	145:7	145:7	8	'R'
LEAF_NODE	145:10	145:10	8	:
EXPR_STATEMENT	146:3	146:26	8	RED = PCT ( atoi ( optarg ) ) ;
EXPR	146:3	146:3	9	RED = PCT ( atoi ( optarg ) )
ASSIGN	146:3	146:9	10	RED = PCT ( atoi ( optarg ) )
LVAL	146:3	146:3	11	RED
FIELD	146:3	146:3	12	RED
LEAF_NODE	146:3	146:3	13	RED
ASSIGN_OP	146:7	146:7	11	=
LEAF_NODE	146:7	146:7	12	=
RVAL	146:9	146:9	11	PCT ( atoi ( optarg ) )
FUNCTION_CALL	146:9	146:25	12	PCT ( atoi ( optarg ) )
CALLEE	146:9	146:9	13	PCT
LEAF_NODE	146:9	146:9	14	PCT
LEAF_NODE	146:12	146:12	13	(
ARGUMENT	146:13	146:13	13	atoi ( optarg )
FUNCTION_CALL	146:13	146:24	14	atoi ( optarg )
CALLEE	146:13	146:13	15	atoi
LEAF_NODE	146:13	146:13	16	atoi
LEAF_NODE	146:17	146:17	15	(
ARGUMENT	146:18	146:18	15	optarg
FIELD	146:18	146:18	16	optarg
LEAF_NODE	146:18	146:18	17	optarg
LEAF_NODE	146:24	146:24	15	)
LEAF_NODE	146:25	146:25	13	)
LEAF_NODE	146:26	146:26	9	;
JUMP_STATEMENT	147:3	147:8	8	break DESTINATION ;
KEYWORD	147:3	147:3	9	break
LEAF_NODE	147:3	147:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	147:8	147:8	9	;
LEAF_NODE	148:2	148:2	8	case
LEAF_NODE	148:7	148:7	8	'G'
LEAF_NODE	148:10	148:10	8	:
EXPR_STATEMENT	149:3	149:28	8	GREEN = PCT ( atoi ( optarg ) ) ;
EXPR	149:3	149:3	9	GREEN = PCT ( atoi ( optarg ) )
ASSIGN	149:3	149:11	10	GREEN = PCT ( atoi ( optarg ) )
LVAL	149:3	149:3	11	GREEN
FIELD	149:3	149:3	12	GREEN
LEAF_NODE	149:3	149:3	13	GREEN
ASSIGN_OP	149:9	149:9	11	=
LEAF_NODE	149:9	149:9	12	=
RVAL	149:11	149:11	11	PCT ( atoi ( optarg ) )
FUNCTION_CALL	149:11	149:27	12	PCT ( atoi ( optarg ) )
CALLEE	149:11	149:11	13	PCT
LEAF_NODE	149:11	149:11	14	PCT
LEAF_NODE	149:14	149:14	13	(
ARGUMENT	149:15	149:15	13	atoi ( optarg )
FUNCTION_CALL	149:15	149:26	14	atoi ( optarg )
CALLEE	149:15	149:15	15	atoi
LEAF_NODE	149:15	149:15	16	atoi
LEAF_NODE	149:19	149:19	15	(
ARGUMENT	149:20	149:20	15	optarg
FIELD	149:20	149:20	16	optarg
LEAF_NODE	149:20	149:20	17	optarg
LEAF_NODE	149:26	149:26	15	)
LEAF_NODE	149:27	149:27	13	)
LEAF_NODE	149:28	149:28	9	;
JUMP_STATEMENT	150:3	150:8	8	break DESTINATION ;
KEYWORD	150:3	150:3	9	break
LEAF_NODE	150:3	150:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	150:8	150:8	9	;
LEAF_NODE	151:2	151:2	8	case
LEAF_NODE	151:7	151:7	8	'B'
LEAF_NODE	151:10	151:10	8	:
EXPR_STATEMENT	152:3	152:27	8	BLUE = PCT ( atoi ( optarg ) ) ;
EXPR	152:3	152:3	9	BLUE = PCT ( atoi ( optarg ) )
ASSIGN	152:3	152:10	10	BLUE = PCT ( atoi ( optarg ) )
LVAL	152:3	152:3	11	BLUE
FIELD	152:3	152:3	12	BLUE
LEAF_NODE	152:3	152:3	13	BLUE
ASSIGN_OP	152:8	152:8	11	=
LEAF_NODE	152:8	152:8	12	=
RVAL	152:10	152:10	11	PCT ( atoi ( optarg ) )
FUNCTION_CALL	152:10	152:26	12	PCT ( atoi ( optarg ) )
CALLEE	152:10	152:10	13	PCT
LEAF_NODE	152:10	152:10	14	PCT
LEAF_NODE	152:13	152:13	13	(
ARGUMENT	152:14	152:14	13	atoi ( optarg )
FUNCTION_CALL	152:14	152:25	14	atoi ( optarg )
CALLEE	152:14	152:14	15	atoi
LEAF_NODE	152:14	152:14	16	atoi
LEAF_NODE	152:18	152:18	15	(
ARGUMENT	152:19	152:19	15	optarg
FIELD	152:19	152:19	16	optarg
LEAF_NODE	152:19	152:19	17	optarg
LEAF_NODE	152:25	152:25	15	)
LEAF_NODE	152:26	152:26	13	)
LEAF_NODE	152:27	152:27	9	;
JUMP_STATEMENT	153:3	153:8	8	break DESTINATION ;
KEYWORD	153:3	153:3	9	break
LEAF_NODE	153:3	153:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	153:8	153:8	9	;
LEAF_NODE	154:2	154:2	8	case
LEAF_NODE	154:7	154:7	8	'?'
LEAF_NODE	154:10	154:10	8	:
EXPR_STATEMENT	155:3	155:10	8	usage ( ) ;
EXPR	155:3	155:3	9	usage ( )
FUNCTION_CALL	155:3	155:9	10	usage ( )
CALLEE	155:3	155:3	11	usage
LEAF_NODE	155:3	155:3	12	usage
LEAF_NODE	155:8	155:8	11	(
LEAF_NODE	155:9	155:9	11	)
LEAF_NODE	155:10	155:10	9	;
LEAF_NODE	157:2	157:2	7	}
SELECTION	158:1	159:2	3	
KEYWORD	158:1	158:1	4	if
LEAF_NODE	158:1	158:1	5	if
LEAF_NODE	158:4	158:4	4	(
CONDITION	158:5	158:5	4	argc - optind < 2
EXPR	158:5	158:21	5	argc - optind < 2
FIELD	158:5	158:5	6	argc
LEAF_NODE	158:5	158:5	7	argc
LEAF_NODE	158:10	158:10	6	-
FIELD	158:12	158:12	6	optind
LEAF_NODE	158:12	158:12	7	optind
REL_OPERATOR	158:19	158:19	6	<
LEAF_NODE	158:19	158:19	7	<
FIELD	158:21	158:21	6	2
LEAF_NODE	158:21	158:21	7	2
LEAF_NODE	158:22	158:22	4	)
STATEMENTS	159:2	159:2	4	
EXPR_STATEMENT	159:2	159:9	5	usage ( ) ;
EXPR	159:2	159:2	6	usage ( )
FUNCTION_CALL	159:2	159:8	7	usage ( )
CALLEE	159:2	159:2	8	usage
LEAF_NODE	159:2	159:2	9	usage
LEAF_NODE	159:7	159:7	8	(
LEAF_NODE	159:8	159:8	8	)
LEAF_NODE	159:9	159:9	6	;
EXPR_STATEMENT	160:1	160:33	3	in = TIFFOpen ( argv [ optind ] , "r" ) ;
EXPR	160:1	160:1	4	in = TIFFOpen ( argv [ optind ] , "r" )
ASSIGN	160:1	160:6	5	in = TIFFOpen ( argv [ optind ] , "r" )
LVAL	160:1	160:1	6	in
FIELD	160:1	160:1	7	in
LEAF_NODE	160:1	160:1	8	in
ASSIGN_OP	160:4	160:4	6	=
LEAF_NODE	160:4	160:4	7	=
RVAL	160:6	160:6	6	TIFFOpen ( argv [ optind ] , "r" )
FUNCTION_CALL	160:6	160:32	7	TIFFOpen ( argv [ optind ] , "r" )
CALLEE	160:6	160:6	8	TIFFOpen
LEAF_NODE	160:6	160:6	9	TIFFOpen
LEAF_NODE	160:14	160:14	8	(
ARGUMENT	160:15	160:15	8	argv [ optind ]
FIELD	160:15	160:26	9	argv [ optind ]
LEAF_NODE	160:15	160:15	10	argv
LEAF_NODE	160:19	160:19	10	[
EXPR	160:20	160:20	10	optind
FIELD	160:20	160:20	11	optind
LEAF_NODE	160:20	160:20	12	optind
LEAF_NODE	160:26	160:26	10	]
LEAF_NODE	160:27	160:27	8	,
ARGUMENT	160:29	160:29	8	"r"
FIELD	160:29	160:29	9	"r"
LEAF_NODE	160:29	160:29	10	"r"
LEAF_NODE	160:32	160:32	8	)
LEAF_NODE	160:33	160:33	4	;
SELECTION	161:1	162:2	3	
KEYWORD	161:1	161:1	4	if
LEAF_NODE	161:1	161:1	5	if
LEAF_NODE	161:4	161:4	4	(
CONDITION	161:5	161:5	4	in == NULL
EXPR	161:5	161:11	5	in == NULL
FIELD	161:5	161:5	6	in
LEAF_NODE	161:5	161:5	7	in
EQ_OPERATOR	161:8	161:8	6	==
LEAF_NODE	161:8	161:8	7	==
FIELD	161:11	161:11	6	NULL
LEAF_NODE	161:11	161:11	7	NULL
LEAF_NODE	161:15	161:15	4	)
STATEMENTS	162:2	162:2	4	
JUMP_STATEMENT	162:2	162:13	5	return ( - 1 ) ;
KEYWORD	162:2	162:2	6	return
LEAF_NODE	162:2	162:2	7	return
DESTINATION	162:9	162:9	6	( - 1 )
EXPR	162:9	162:12	7	( - 1 )
LEAF_NODE	162:9	162:9	8	(
UNARY_EXPR	162:10	162:11	8	- 1
UNARY_OPERATOR	162:10	162:10	9	-
LEAF_NODE	162:10	162:10	10	-
FIELD	162:11	162:11	9	1
LEAF_NODE	162:11	162:11	10	1
LEAF_NODE	162:12	162:12	8	)
LEAF_NODE	162:13	162:13	6	;
EXPR_STATEMENT	163:1	163:16	3	photometric = 0 ;
EXPR	163:1	163:1	4	photometric = 0
ASSIGN	163:1	163:15	5	photometric = 0
LVAL	163:1	163:1	6	photometric
FIELD	163:1	163:1	7	photometric
LEAF_NODE	163:1	163:1	8	photometric
ASSIGN_OP	163:13	163:13	6	=
LEAF_NODE	163:13	163:13	7	=
RVAL	163:15	163:15	6	0
FIELD	163:15	163:15	7	0
LEAF_NODE	163:15	163:15	8	0
LEAF_NODE	163:16	163:16	4	;
EXPR_STATEMENT	164:1	164:52	3	TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric ) ;
EXPR	164:1	164:1	4	TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric )
FUNCTION_CALL	164:1	164:51	5	TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric )
CALLEE	164:1	164:1	6	TIFFGetField
LEAF_NODE	164:1	164:1	7	TIFFGetField
LEAF_NODE	164:13	164:13	6	(
ARGUMENT	164:14	164:14	6	in
FIELD	164:14	164:14	7	in
LEAF_NODE	164:14	164:14	8	in
LEAF_NODE	164:16	164:16	6	,
ARGUMENT	164:18	164:18	6	TIFFTAG_PHOTOMETRIC
FIELD	164:18	164:18	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	164:18	164:18	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	164:37	164:37	6	,
ARGUMENT	164:39	164:39	6	& photometric
UNARY_EXPR	164:39	164:40	7	& photometric
UNARY_OPERATOR	164:39	164:39	8	&
LEAF_NODE	164:39	164:39	9	&
FIELD	164:40	164:40	8	photometric
LEAF_NODE	164:40	164:40	9	photometric
LEAF_NODE	164:51	164:51	6	)
LEAF_NODE	164:52	164:52	4	;
SELECTION	165:1	165:76	3	
KEYWORD	165:1	165:1	4	if
LEAF_NODE	165:1	165:1	5	if
LEAF_NODE	165:4	165:4	4	(
CONDITION	165:5	165:5	4	photometric != PHOTOMETRIC_RGB && photometric != PHOTOMETRIC_PALETTE
EXPR	165:5	165:5	5	photometric != PHOTOMETRIC_RGB && photometric != PHOTOMETRIC_PALETTE
AND	165:5	165:39	6	photometric != PHOTOMETRIC_RGB && photometric != PHOTOMETRIC_PALETTE
EXPR	165:5	165:20	7	photometric != PHOTOMETRIC_RGB
FIELD	165:5	165:5	8	photometric
LEAF_NODE	165:5	165:5	9	photometric
EQ_OPERATOR	165:17	165:17	8	!=
LEAF_NODE	165:17	165:17	9	!=
FIELD	165:20	165:20	8	PHOTOMETRIC_RGB
LEAF_NODE	165:20	165:20	9	PHOTOMETRIC_RGB
LEAF_NODE	165:36	165:36	7	&&
EXPR	165:39	165:54	7	photometric != PHOTOMETRIC_PALETTE
FIELD	165:39	165:39	8	photometric
LEAF_NODE	165:39	165:39	9	photometric
EQ_OPERATOR	165:51	165:51	8	!=
LEAF_NODE	165:51	165:51	9	!=
FIELD	165:54	165:54	8	PHOTOMETRIC_PALETTE
LEAF_NODE	165:54	165:54	9	PHOTOMETRIC_PALETTE
LEAF_NODE	165:74	165:74	4	)
STATEMENTS	165:76	170:1	4	
LEAF_NODE	165:76	165:76	5	{
STATEMENTS	166:2	169:16	5	
EXPR_STATEMENT	166:2	168:19	6	fprintf ( stderr , "%s: Bad photometric; can only handle RGB and Palette images.\n" , argv [ optind ] ) ;
EXPR	166:2	166:2	7	fprintf ( stderr , "%s: Bad photometric; can only handle RGB and Palette images.\n" , argv [ optind ] )
FUNCTION_CALL	166:2	168:18	8	fprintf ( stderr , "%s: Bad photometric; can only handle RGB and Palette images.\n" , argv [ optind ] )
CALLEE	166:2	166:2	9	fprintf
LEAF_NODE	166:2	166:2	10	fprintf
LEAF_NODE	166:9	166:9	9	(
ARGUMENT	166:10	166:10	9	stderr
FIELD	166:10	166:10	10	stderr
LEAF_NODE	166:10	166:10	11	stderr
LEAF_NODE	166:16	166:16	9	,
ARGUMENT	167:5	167:5	9	"%s: Bad photometric; can only handle RGB and Palette images.\n"
FIELD	167:5	167:5	10	"%s: Bad photometric; can only handle RGB and Palette images.\n"
LEAF_NODE	167:5	167:5	11	"%s: Bad photometric; can only handle RGB and Palette images.\n"
LEAF_NODE	167:69	167:69	9	,
ARGUMENT	168:6	168:6	9	argv [ optind ]
FIELD	168:6	168:17	10	argv [ optind ]
LEAF_NODE	168:6	168:6	11	argv
LEAF_NODE	168:10	168:10	11	[
EXPR	168:11	168:11	11	optind
FIELD	168:11	168:11	12	optind
LEAF_NODE	168:11	168:11	13	optind
LEAF_NODE	168:17	168:17	11	]
LEAF_NODE	168:18	168:18	9	)
LEAF_NODE	168:19	168:19	7	;
JUMP_STATEMENT	169:16	169:34	6	goto tiff2bw_error ;
KEYWORD	169:16	169:16	7	goto
LEAF_NODE	169:16	169:16	8	goto
DESTINATION	169:21	169:21	7	tiff2bw_error
LEAF_NODE	169:21	169:21	8	tiff2bw_error
LEAF_NODE	169:34	169:34	7	;
LEAF_NODE	170:1	170:1	5	}
EXPR_STATEMENT	171:1	171:60	3	TIFFGetField ( in , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel ) ;
EXPR	171:1	171:1	4	TIFFGetField ( in , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
FUNCTION_CALL	171:1	171:59	5	TIFFGetField ( in , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
CALLEE	171:1	171:1	6	TIFFGetField
LEAF_NODE	171:1	171:1	7	TIFFGetField
LEAF_NODE	171:13	171:13	6	(
ARGUMENT	171:14	171:14	6	in
FIELD	171:14	171:14	7	in
LEAF_NODE	171:14	171:14	8	in
LEAF_NODE	171:16	171:16	6	,
ARGUMENT	171:18	171:18	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	171:18	171:18	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	171:18	171:18	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	171:41	171:41	6	,
ARGUMENT	171:43	171:43	6	& samplesperpixel
UNARY_EXPR	171:43	171:44	7	& samplesperpixel
UNARY_OPERATOR	171:43	171:43	8	&
LEAF_NODE	171:43	171:43	9	&
FIELD	171:44	171:44	8	samplesperpixel
LEAF_NODE	171:44	171:44	9	samplesperpixel
LEAF_NODE	171:59	171:59	6	)
LEAF_NODE	171:60	171:60	4	;
SELECTION	172:1	172:51	3	
KEYWORD	172:1	172:1	4	if
LEAF_NODE	172:1	172:1	5	if
LEAF_NODE	172:4	172:4	4	(
CONDITION	172:5	172:5	4	samplesperpixel != 1 && samplesperpixel != 3
EXPR	172:5	172:5	5	samplesperpixel != 1 && samplesperpixel != 3
AND	172:5	172:29	6	samplesperpixel != 1 && samplesperpixel != 3
EXPR	172:5	172:24	7	samplesperpixel != 1
FIELD	172:5	172:5	8	samplesperpixel
LEAF_NODE	172:5	172:5	9	samplesperpixel
EQ_OPERATOR	172:21	172:21	8	!=
LEAF_NODE	172:21	172:21	9	!=
FIELD	172:24	172:24	8	1
LEAF_NODE	172:24	172:24	9	1
LEAF_NODE	172:26	172:26	7	&&
EXPR	172:29	172:48	7	samplesperpixel != 3
FIELD	172:29	172:29	8	samplesperpixel
LEAF_NODE	172:29	172:29	9	samplesperpixel
EQ_OPERATOR	172:45	172:45	8	!=
LEAF_NODE	172:45	172:45	9	!=
FIELD	172:48	172:48	8	3
LEAF_NODE	172:48	172:48	9	3
LEAF_NODE	172:49	172:49	4	)
STATEMENTS	172:51	176:1	4	
LEAF_NODE	172:51	172:51	5	{
STATEMENTS	173:2	175:16	5	
EXPR_STATEMENT	173:2	174:36	6	fprintf ( stderr , "%s: Bad samples/pixel %u.\n" , argv [ optind ] , samplesperpixel ) ;
EXPR	173:2	173:2	7	fprintf ( stderr , "%s: Bad samples/pixel %u.\n" , argv [ optind ] , samplesperpixel )
FUNCTION_CALL	173:2	174:35	8	fprintf ( stderr , "%s: Bad samples/pixel %u.\n" , argv [ optind ] , samplesperpixel )
CALLEE	173:2	173:2	9	fprintf
LEAF_NODE	173:2	173:2	10	fprintf
LEAF_NODE	173:9	173:9	9	(
ARGUMENT	173:10	173:10	9	stderr
FIELD	173:10	173:10	10	stderr
LEAF_NODE	173:10	173:10	11	stderr
LEAF_NODE	173:16	173:16	9	,
ARGUMENT	173:18	173:18	9	"%s: Bad samples/pixel %u.\n"
FIELD	173:18	173:18	10	"%s: Bad samples/pixel %u.\n"
LEAF_NODE	173:18	173:18	11	"%s: Bad samples/pixel %u.\n"
LEAF_NODE	173:47	173:47	9	,
ARGUMENT	174:6	174:6	9	argv [ optind ]
FIELD	174:6	174:17	10	argv [ optind ]
LEAF_NODE	174:6	174:6	11	argv
LEAF_NODE	174:10	174:10	11	[
EXPR	174:11	174:11	11	optind
FIELD	174:11	174:11	12	optind
LEAF_NODE	174:11	174:11	13	optind
LEAF_NODE	174:17	174:17	11	]
LEAF_NODE	174:18	174:18	9	,
ARGUMENT	174:20	174:20	9	samplesperpixel
FIELD	174:20	174:20	10	samplesperpixel
LEAF_NODE	174:20	174:20	11	samplesperpixel
LEAF_NODE	174:35	174:35	9	)
LEAF_NODE	174:36	174:36	7	;
JUMP_STATEMENT	175:16	175:34	6	goto tiff2bw_error ;
KEYWORD	175:16	175:16	7	goto
LEAF_NODE	175:16	175:16	8	goto
DESTINATION	175:21	175:21	7	tiff2bw_error
LEAF_NODE	175:21	175:21	8	tiff2bw_error
LEAF_NODE	175:34	175:34	7	;
LEAF_NODE	176:1	176:1	5	}
SELECTION	177:1	177:61	3	
KEYWORD	177:1	177:1	4	if
LEAF_NODE	177:1	177:1	5	if
LEAF_NODE	177:3	177:3	4	(
CONDITION	177:5	177:5	4	photometric == PHOTOMETRIC_RGB && samplesperpixel != 3
EXPR	177:5	177:5	5	photometric == PHOTOMETRIC_RGB && samplesperpixel != 3
AND	177:5	177:39	6	photometric == PHOTOMETRIC_RGB && samplesperpixel != 3
EXPR	177:5	177:20	7	photometric == PHOTOMETRIC_RGB
FIELD	177:5	177:5	8	photometric
LEAF_NODE	177:5	177:5	9	photometric
EQ_OPERATOR	177:17	177:17	8	==
LEAF_NODE	177:17	177:17	9	==
FIELD	177:20	177:20	8	PHOTOMETRIC_RGB
LEAF_NODE	177:20	177:20	9	PHOTOMETRIC_RGB
LEAF_NODE	177:36	177:36	7	&&
EXPR	177:39	177:58	7	samplesperpixel != 3
FIELD	177:39	177:39	8	samplesperpixel
LEAF_NODE	177:39	177:39	9	samplesperpixel
EQ_OPERATOR	177:55	177:55	8	!=
LEAF_NODE	177:55	177:55	9	!=
FIELD	177:58	177:58	8	3
LEAF_NODE	177:58	177:58	9	3
LEAF_NODE	177:59	177:59	4	)
STATEMENTS	177:61	181:1	4	
LEAF_NODE	177:61	177:61	5	{
STATEMENTS	178:2	180:16	5	
EXPR_STATEMENT	178:2	179:36	6	fprintf ( stderr , "%s: Bad samples/pixel %u for PHOTOMETRIC_RGB.\n" , argv [ optind ] , samplesperpixel ) ;
EXPR	178:2	178:2	7	fprintf ( stderr , "%s: Bad samples/pixel %u for PHOTOMETRIC_RGB.\n" , argv [ optind ] , samplesperpixel )
FUNCTION_CALL	178:2	179:35	8	fprintf ( stderr , "%s: Bad samples/pixel %u for PHOTOMETRIC_RGB.\n" , argv [ optind ] , samplesperpixel )
CALLEE	178:2	178:2	9	fprintf
LEAF_NODE	178:2	178:2	10	fprintf
LEAF_NODE	178:9	178:9	9	(
ARGUMENT	178:10	178:10	9	stderr
FIELD	178:10	178:10	10	stderr
LEAF_NODE	178:10	178:10	11	stderr
LEAF_NODE	178:16	178:16	9	,
ARGUMENT	178:18	178:18	9	"%s: Bad samples/pixel %u for PHOTOMETRIC_RGB.\n"
FIELD	178:18	178:18	10	"%s: Bad samples/pixel %u for PHOTOMETRIC_RGB.\n"
LEAF_NODE	178:18	178:18	11	"%s: Bad samples/pixel %u for PHOTOMETRIC_RGB.\n"
LEAF_NODE	178:67	178:67	9	,
ARGUMENT	179:6	179:6	9	argv [ optind ]
FIELD	179:6	179:17	10	argv [ optind ]
LEAF_NODE	179:6	179:6	11	argv
LEAF_NODE	179:10	179:10	11	[
EXPR	179:11	179:11	11	optind
FIELD	179:11	179:11	12	optind
LEAF_NODE	179:11	179:11	13	optind
LEAF_NODE	179:17	179:17	11	]
LEAF_NODE	179:18	179:18	9	,
ARGUMENT	179:20	179:20	9	samplesperpixel
FIELD	179:20	179:20	10	samplesperpixel
LEAF_NODE	179:20	179:20	11	samplesperpixel
LEAF_NODE	179:35	179:35	9	)
LEAF_NODE	179:36	179:36	7	;
JUMP_STATEMENT	180:16	180:34	6	goto tiff2bw_error ;
KEYWORD	180:16	180:16	7	goto
LEAF_NODE	180:16	180:16	8	goto
DESTINATION	180:21	180:21	7	tiff2bw_error
LEAF_NODE	180:21	180:21	8	tiff2bw_error
LEAF_NODE	180:34	180:34	7	;
LEAF_NODE	181:1	181:1	5	}
EXPR_STATEMENT	182:1	182:56	3	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample ) ;
EXPR	182:1	182:1	4	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample )
FUNCTION_CALL	182:1	182:55	5	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample )
CALLEE	182:1	182:1	6	TIFFGetField
LEAF_NODE	182:1	182:1	7	TIFFGetField
LEAF_NODE	182:13	182:13	6	(
ARGUMENT	182:14	182:14	6	in
FIELD	182:14	182:14	7	in
LEAF_NODE	182:14	182:14	8	in
LEAF_NODE	182:16	182:16	6	,
ARGUMENT	182:18	182:18	6	TIFFTAG_BITSPERSAMPLE
FIELD	182:18	182:18	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	182:18	182:18	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	182:39	182:39	6	,
ARGUMENT	182:41	182:41	6	& bitspersample
UNARY_EXPR	182:41	182:42	7	& bitspersample
UNARY_OPERATOR	182:41	182:41	8	&
LEAF_NODE	182:41	182:41	9	&
FIELD	182:42	182:42	8	bitspersample
LEAF_NODE	182:42	182:42	9	bitspersample
LEAF_NODE	182:55	182:55	6	)
LEAF_NODE	182:56	182:56	4	;
SELECTION	183:1	183:25	3	
KEYWORD	183:1	183:1	4	if
LEAF_NODE	183:1	183:1	5	if
LEAF_NODE	183:4	183:4	4	(
CONDITION	183:5	183:5	4	bitspersample != 8
EXPR	183:5	183:22	5	bitspersample != 8
FIELD	183:5	183:5	6	bitspersample
LEAF_NODE	183:5	183:5	7	bitspersample
EQ_OPERATOR	183:19	183:19	6	!=
LEAF_NODE	183:19	183:19	7	!=
FIELD	183:22	183:22	6	8
LEAF_NODE	183:22	183:22	7	8
LEAF_NODE	183:23	183:23	4	)
STATEMENTS	183:25	187:1	4	
LEAF_NODE	183:25	183:25	5	{
STATEMENTS	184:2	186:16	5	
EXPR_STATEMENT	184:2	185:63	6	fprintf ( stderr , " %s: Sorry, only handle 8-bit samples.\n" , argv [ optind ] ) ;
EXPR	184:2	184:2	7	fprintf ( stderr , " %s: Sorry, only handle 8-bit samples.\n" , argv [ optind ] )
FUNCTION_CALL	184:2	185:62	8	fprintf ( stderr , " %s: Sorry, only handle 8-bit samples.\n" , argv [ optind ] )
CALLEE	184:2	184:2	9	fprintf
LEAF_NODE	184:2	184:2	10	fprintf
LEAF_NODE	184:9	184:9	9	(
ARGUMENT	184:10	184:10	9	stderr
FIELD	184:10	184:10	10	stderr
LEAF_NODE	184:10	184:10	11	stderr
LEAF_NODE	184:16	184:16	9	,
ARGUMENT	185:6	185:6	9	" %s: Sorry, only handle 8-bit samples.\n"
FIELD	185:6	185:6	10	" %s: Sorry, only handle 8-bit samples.\n"
LEAF_NODE	185:6	185:6	11	" %s: Sorry, only handle 8-bit samples.\n"
LEAF_NODE	185:48	185:48	9	,
ARGUMENT	185:50	185:50	9	argv [ optind ]
FIELD	185:50	185:61	10	argv [ optind ]
LEAF_NODE	185:50	185:50	11	argv
LEAF_NODE	185:54	185:54	11	[
EXPR	185:55	185:55	11	optind
FIELD	185:55	185:55	12	optind
LEAF_NODE	185:55	185:55	13	optind
LEAF_NODE	185:61	185:61	11	]
LEAF_NODE	185:62	185:62	9	)
LEAF_NODE	185:63	185:63	7	;
JUMP_STATEMENT	186:16	186:34	6	goto tiff2bw_error ;
KEYWORD	186:16	186:16	7	goto
LEAF_NODE	186:16	186:16	8	goto
DESTINATION	186:21	186:21	7	tiff2bw_error
LEAF_NODE	186:21	186:21	8	tiff2bw_error
LEAF_NODE	186:34	186:34	7	;
LEAF_NODE	187:1	187:1	5	}
EXPR_STATEMENT	188:1	188:41	3	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & w ) ;
EXPR	188:1	188:1	4	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & w )
FUNCTION_CALL	188:1	188:40	5	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & w )
CALLEE	188:1	188:1	6	TIFFGetField
LEAF_NODE	188:1	188:1	7	TIFFGetField
LEAF_NODE	188:13	188:13	6	(
ARGUMENT	188:14	188:14	6	in
FIELD	188:14	188:14	7	in
LEAF_NODE	188:14	188:14	8	in
LEAF_NODE	188:16	188:16	6	,
ARGUMENT	188:18	188:18	6	TIFFTAG_IMAGEWIDTH
FIELD	188:18	188:18	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	188:18	188:18	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	188:36	188:36	6	,
ARGUMENT	188:38	188:38	6	& w
UNARY_EXPR	188:38	188:39	7	& w
UNARY_OPERATOR	188:38	188:38	8	&
LEAF_NODE	188:38	188:38	9	&
FIELD	188:39	188:39	8	w
LEAF_NODE	188:39	188:39	9	w
LEAF_NODE	188:40	188:40	6	)
LEAF_NODE	188:41	188:41	4	;
EXPR_STATEMENT	189:1	189:42	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & h ) ;
EXPR	189:1	189:1	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & h )
FUNCTION_CALL	189:1	189:41	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & h )
CALLEE	189:1	189:1	6	TIFFGetField
LEAF_NODE	189:1	189:1	7	TIFFGetField
LEAF_NODE	189:13	189:13	6	(
ARGUMENT	189:14	189:14	6	in
FIELD	189:14	189:14	7	in
LEAF_NODE	189:14	189:14	8	in
LEAF_NODE	189:16	189:16	6	,
ARGUMENT	189:18	189:18	6	TIFFTAG_IMAGELENGTH
FIELD	189:18	189:18	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	189:18	189:18	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	189:37	189:37	6	,
ARGUMENT	189:39	189:39	6	& h
UNARY_EXPR	189:39	189:40	7	& h
UNARY_OPERATOR	189:39	189:39	8	&
LEAF_NODE	189:39	189:39	9	&
FIELD	189:40	189:40	8	h
LEAF_NODE	189:40	189:40	9	h
LEAF_NODE	189:41	189:41	6	)
LEAF_NODE	189:42	189:42	4	;
EXPR_STATEMENT	190:1	190:48	3	TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & config ) ;
EXPR	190:1	190:1	4	TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & config )
FUNCTION_CALL	190:1	190:47	5	TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & config )
CALLEE	190:1	190:1	6	TIFFGetField
LEAF_NODE	190:1	190:1	7	TIFFGetField
LEAF_NODE	190:13	190:13	6	(
ARGUMENT	190:14	190:14	6	in
FIELD	190:14	190:14	7	in
LEAF_NODE	190:14	190:14	8	in
LEAF_NODE	190:16	190:16	6	,
ARGUMENT	190:18	190:18	6	TIFFTAG_PLANARCONFIG
FIELD	190:18	190:18	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	190:18	190:18	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	190:38	190:38	6	,
ARGUMENT	190:40	190:40	6	& config
UNARY_EXPR	190:40	190:41	7	& config
UNARY_OPERATOR	190:40	190:40	8	&
LEAF_NODE	190:40	190:40	9	&
FIELD	190:41	190:41	8	config
LEAF_NODE	190:41	190:41	9	config
LEAF_NODE	190:47	190:47	6	)
LEAF_NODE	190:48	190:48	4	;
EXPR_STATEMENT	192:1	192:36	3	out = TIFFOpen ( argv [ optind + 1 ] , "w" ) ;
EXPR	192:1	192:1	4	out = TIFFOpen ( argv [ optind + 1 ] , "w" )
ASSIGN	192:1	192:7	5	out = TIFFOpen ( argv [ optind + 1 ] , "w" )
LVAL	192:1	192:1	6	out
FIELD	192:1	192:1	7	out
LEAF_NODE	192:1	192:1	8	out
ASSIGN_OP	192:5	192:5	6	=
LEAF_NODE	192:5	192:5	7	=
RVAL	192:7	192:7	6	TIFFOpen ( argv [ optind + 1 ] , "w" )
FUNCTION_CALL	192:7	192:35	7	TIFFOpen ( argv [ optind + 1 ] , "w" )
CALLEE	192:7	192:7	8	TIFFOpen
LEAF_NODE	192:7	192:7	9	TIFFOpen
LEAF_NODE	192:15	192:15	8	(
ARGUMENT	192:16	192:16	8	argv [ optind + 1 ]
FIELD	192:16	192:29	9	argv [ optind + 1 ]
LEAF_NODE	192:16	192:16	10	argv
LEAF_NODE	192:20	192:20	10	[
EXPR	192:21	192:28	10	optind + 1
FIELD	192:21	192:21	11	optind
LEAF_NODE	192:21	192:21	12	optind
LEAF_NODE	192:27	192:27	11	+
FIELD	192:28	192:28	11	1
LEAF_NODE	192:28	192:28	12	1
LEAF_NODE	192:29	192:29	10	]
LEAF_NODE	192:30	192:30	8	,
ARGUMENT	192:32	192:32	8	"w"
FIELD	192:32	192:32	9	"w"
LEAF_NODE	192:32	192:32	10	"w"
LEAF_NODE	192:35	192:35	8	)
LEAF_NODE	192:36	192:36	4	;
SELECTION	193:1	194:1	3	
KEYWORD	193:1	193:1	4	if
LEAF_NODE	193:1	193:1	5	if
LEAF_NODE	193:4	193:4	4	(
CONDITION	193:5	193:5	4	out == NULL
EXPR	193:5	193:12	5	out == NULL
FIELD	193:5	193:5	6	out
LEAF_NODE	193:5	193:5	7	out
EQ_OPERATOR	193:9	193:9	6	==
LEAF_NODE	193:9	193:9	7	==
FIELD	193:12	193:12	6	NULL
LEAF_NODE	193:12	193:12	7	NULL
LEAF_NODE	193:16	193:16	4	)
STATEMENTS	194:1	196:1	4	
LEAF_NODE	194:1	194:1	5	{
STATEMENTS	195:16	195:16	5	
JUMP_STATEMENT	195:16	195:34	6	goto tiff2bw_error ;
KEYWORD	195:16	195:16	7	goto
LEAF_NODE	195:16	195:16	8	goto
DESTINATION	195:21	195:21	7	tiff2bw_error
LEAF_NODE	195:21	195:21	8	tiff2bw_error
LEAF_NODE	195:34	195:34	7	;
LEAF_NODE	196:1	196:1	5	}
EXPR_STATEMENT	197:1	197:41	3	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , w ) ;
EXPR	197:1	197:1	4	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , w )
FUNCTION_CALL	197:1	197:40	5	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , w )
CALLEE	197:1	197:1	6	TIFFSetField
LEAF_NODE	197:1	197:1	7	TIFFSetField
LEAF_NODE	197:13	197:13	6	(
ARGUMENT	197:14	197:14	6	out
FIELD	197:14	197:14	7	out
LEAF_NODE	197:14	197:14	8	out
LEAF_NODE	197:17	197:17	6	,
ARGUMENT	197:19	197:19	6	TIFFTAG_IMAGEWIDTH
FIELD	197:19	197:19	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	197:19	197:19	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	197:37	197:37	6	,
ARGUMENT	197:39	197:39	6	w
FIELD	197:39	197:39	7	w
LEAF_NODE	197:39	197:39	8	w
LEAF_NODE	197:40	197:40	6	)
LEAF_NODE	197:41	197:41	4	;
EXPR_STATEMENT	198:1	198:42	3	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , h ) ;
EXPR	198:1	198:1	4	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , h )
FUNCTION_CALL	198:1	198:41	5	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , h )
CALLEE	198:1	198:1	6	TIFFSetField
LEAF_NODE	198:1	198:1	7	TIFFSetField
LEAF_NODE	198:13	198:13	6	(
ARGUMENT	198:14	198:14	6	out
FIELD	198:14	198:14	7	out
LEAF_NODE	198:14	198:14	8	out
LEAF_NODE	198:17	198:17	6	,
ARGUMENT	198:19	198:19	6	TIFFTAG_IMAGELENGTH
FIELD	198:19	198:19	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	198:19	198:19	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	198:38	198:38	6	,
ARGUMENT	198:40	198:40	6	h
FIELD	198:40	198:40	7	h
LEAF_NODE	198:40	198:40	8	h
LEAF_NODE	198:41	198:41	6	)
LEAF_NODE	198:42	198:42	4	;
EXPR_STATEMENT	199:1	199:44	3	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 8 ) ;
EXPR	199:1	199:1	4	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 8 )
FUNCTION_CALL	199:1	199:43	5	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 8 )
CALLEE	199:1	199:1	6	TIFFSetField
LEAF_NODE	199:1	199:1	7	TIFFSetField
LEAF_NODE	199:13	199:13	6	(
ARGUMENT	199:14	199:14	6	out
FIELD	199:14	199:14	7	out
LEAF_NODE	199:14	199:14	8	out
LEAF_NODE	199:17	199:17	6	,
ARGUMENT	199:19	199:19	6	TIFFTAG_BITSPERSAMPLE
FIELD	199:19	199:19	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	199:19	199:19	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	199:40	199:40	6	,
ARGUMENT	199:42	199:42	6	8
FIELD	199:42	199:42	7	8
LEAF_NODE	199:42	199:42	8	8
LEAF_NODE	199:43	199:43	6	)
LEAF_NODE	199:44	199:44	4	;
EXPR_STATEMENT	200:1	200:46	3	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 1 ) ;
EXPR	200:1	200:1	4	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 1 )
FUNCTION_CALL	200:1	200:45	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	200:1	200:1	6	TIFFSetField
LEAF_NODE	200:1	200:1	7	TIFFSetField
LEAF_NODE	200:13	200:13	6	(
ARGUMENT	200:14	200:14	6	out
FIELD	200:14	200:14	7	out
LEAF_NODE	200:14	200:14	8	out
LEAF_NODE	200:17	200:17	6	,
ARGUMENT	200:19	200:19	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	200:19	200:19	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	200:19	200:19	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	200:42	200:42	6	,
ARGUMENT	200:44	200:44	6	1
FIELD	200:44	200:44	7	1
LEAF_NODE	200:44	200:44	8	1
LEAF_NODE	200:45	200:45	6	)
LEAF_NODE	200:46	200:46	4	;
EXPR_STATEMENT	201:1	201:61	3	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	201:1	201:1	4	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	201:1	201:60	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	201:1	201:1	6	TIFFSetField
LEAF_NODE	201:1	201:1	7	TIFFSetField
LEAF_NODE	201:13	201:13	6	(
ARGUMENT	201:14	201:14	6	out
FIELD	201:14	201:14	7	out
LEAF_NODE	201:14	201:14	8	out
LEAF_NODE	201:17	201:17	6	,
ARGUMENT	201:19	201:19	6	TIFFTAG_PLANARCONFIG
FIELD	201:19	201:19	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	201:19	201:19	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	201:39	201:39	6	,
ARGUMENT	201:41	201:41	6	PLANARCONFIG_CONTIG
FIELD	201:41	201:41	7	PLANARCONFIG_CONTIG
LEAF_NODE	201:41	201:41	8	PLANARCONFIG_CONTIG
LEAF_NODE	201:60	201:60	6	)
LEAF_NODE	201:61	201:61	4	;
EXPR_STATEMENT	202:1	202:16	3	cpTags ( in , out ) ;
EXPR	202:1	202:1	4	cpTags ( in , out )
FUNCTION_CALL	202:1	202:15	5	cpTags ( in , out )
CALLEE	202:1	202:1	6	cpTags
LEAF_NODE	202:1	202:1	7	cpTags
LEAF_NODE	202:7	202:7	6	(
ARGUMENT	202:8	202:8	6	in
FIELD	202:8	202:8	7	in
LEAF_NODE	202:8	202:8	8	in
LEAF_NODE	202:10	202:10	6	,
ARGUMENT	202:12	202:12	6	out
FIELD	202:12	202:12	7	out
LEAF_NODE	202:12	202:12	8	out
LEAF_NODE	202:15	202:15	6	)
LEAF_NODE	202:16	202:16	4	;
SELECTION	203:1	203:33	3	
KEYWORD	203:1	203:1	4	if
LEAF_NODE	203:1	203:1	5	if
LEAF_NODE	203:4	203:4	4	(
CONDITION	203:5	203:5	4	compression != ( uint16 ) - 1
EXPR	203:5	203:29	5	compression != ( uint16 ) - 1
FIELD	203:5	203:5	6	compression
LEAF_NODE	203:5	203:5	7	compression
EQ_OPERATOR	203:17	203:17	6	!=
LEAF_NODE	203:17	203:17	7	!=
LEAF_NODE	203:20	203:20	6	(
TYPE_NAME	203:21	203:21	6	uint16
LEAF_NODE	203:21	203:21	7	uint16
LEAF_NODE	203:27	203:27	6	)
UNARY_EXPR	203:29	203:30	6	- 1
UNARY_OPERATOR	203:29	203:29	7	-
LEAF_NODE	203:29	203:29	8	-
FIELD	203:30	203:30	7	1
LEAF_NODE	203:30	203:30	8	1
LEAF_NODE	203:31	203:31	4	)
STATEMENTS	203:33	216:1	4	
LEAF_NODE	203:33	203:33	5	{
STATEMENTS	204:2	205:2	5	
EXPR_STATEMENT	204:2	204:53	6	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	204:2	204:2	7	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	204:2	204:52	8	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	204:2	204:2	9	TIFFSetField
LEAF_NODE	204:2	204:2	10	TIFFSetField
LEAF_NODE	204:14	204:14	9	(
ARGUMENT	204:15	204:15	9	out
FIELD	204:15	204:15	10	out
LEAF_NODE	204:15	204:15	11	out
LEAF_NODE	204:18	204:18	9	,
ARGUMENT	204:20	204:20	9	TIFFTAG_COMPRESSION
FIELD	204:20	204:20	10	TIFFTAG_COMPRESSION
LEAF_NODE	204:20	204:20	11	TIFFTAG_COMPRESSION
LEAF_NODE	204:39	204:39	9	,
ARGUMENT	204:41	204:41	9	compression
FIELD	204:41	204:41	10	compression
LEAF_NODE	204:41	204:41	11	compression
LEAF_NODE	204:52	204:52	9	)
LEAF_NODE	204:53	204:53	7	;
SELECTION	205:2	205:23	6	
KEYWORD	205:2	205:2	7	switch
LEAF_NODE	205:2	205:2	8	switch
LEAF_NODE	205:9	205:9	7	(
CONDITION	205:10	205:10	7	compression
EXPR	205:10	205:10	8	compression
FIELD	205:10	205:10	9	compression
LEAF_NODE	205:10	205:10	10	compression
LEAF_NODE	205:21	205:21	7	)
STATEMENTS	205:23	215:2	7	
LEAF_NODE	205:23	205:23	8	{
STATEMENTS	206:2	214:3	8	
LABEL	206:2	206:23	9	case COMPRESSION_JPEG :
LEAF_NODE	206:2	206:2	10	case
LEAF_NODE	206:7	206:7	10	COMPRESSION_JPEG
LEAF_NODE	206:23	206:23	10	:
EXPR_STATEMENT	207:3	207:50	9	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality ) ;
EXPR	207:3	207:3	10	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
FUNCTION_CALL	207:3	207:49	11	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
CALLEE	207:3	207:3	12	TIFFSetField
LEAF_NODE	207:3	207:3	13	TIFFSetField
LEAF_NODE	207:15	207:15	12	(
ARGUMENT	207:16	207:16	12	out
FIELD	207:16	207:16	13	out
LEAF_NODE	207:16	207:16	14	out
LEAF_NODE	207:19	207:19	12	,
ARGUMENT	207:21	207:21	12	TIFFTAG_JPEGQUALITY
FIELD	207:21	207:21	13	TIFFTAG_JPEGQUALITY
LEAF_NODE	207:21	207:21	14	TIFFTAG_JPEGQUALITY
LEAF_NODE	207:40	207:40	12	,
ARGUMENT	207:42	207:42	12	quality
FIELD	207:42	207:42	13	quality
LEAF_NODE	207:42	207:42	14	quality
LEAF_NODE	207:49	207:49	12	)
LEAF_NODE	207:50	207:50	10	;
EXPR_STATEMENT	208:3	208:58	9	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode ) ;
EXPR	208:3	208:3	10	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode )
FUNCTION_CALL	208:3	208:57	11	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode )
CALLEE	208:3	208:3	12	TIFFSetField
LEAF_NODE	208:3	208:3	13	TIFFSetField
LEAF_NODE	208:15	208:15	12	(
ARGUMENT	208:16	208:16	12	out
FIELD	208:16	208:16	13	out
LEAF_NODE	208:16	208:16	14	out
LEAF_NODE	208:19	208:19	12	,
ARGUMENT	208:21	208:21	12	TIFFTAG_JPEGCOLORMODE
FIELD	208:21	208:21	13	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	208:21	208:21	14	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	208:42	208:42	12	,
ARGUMENT	208:44	208:44	12	jpegcolormode
FIELD	208:44	208:44	13	jpegcolormode
LEAF_NODE	208:44	208:44	14	jpegcolormode
LEAF_NODE	208:57	208:57	12	)
LEAF_NODE	208:58	208:58	10	;
JUMP_STATEMENT	209:3	209:8	9	break DESTINATION ;
KEYWORD	209:3	209:3	10	break
LEAF_NODE	209:3	209:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	209:8	209:8	10	;
LABEL	210:2	210:22	9	case COMPRESSION_LZW :
LEAF_NODE	210:2	210:2	10	case
LEAF_NODE	210:7	210:7	10	COMPRESSION_LZW
LEAF_NODE	210:22	210:22	10	:
LABEL	211:2	211:26	9	case COMPRESSION_DEFLATE :
LEAF_NODE	211:2	211:2	10	case
LEAF_NODE	211:7	211:7	10	COMPRESSION_DEFLATE
LEAF_NODE	211:26	211:26	10	:
SELECTION	212:3	213:4	9	
KEYWORD	212:3	212:3	10	if
LEAF_NODE	212:3	212:3	11	if
LEAF_NODE	212:6	212:6	10	(
CONDITION	212:7	212:7	10	predictor != 0
EXPR	212:7	212:20	11	predictor != 0
FIELD	212:7	212:7	12	predictor
LEAF_NODE	212:7	212:7	13	predictor
EQ_OPERATOR	212:17	212:17	12	!=
LEAF_NODE	212:17	212:17	13	!=
FIELD	212:20	212:20	12	0
LEAF_NODE	212:20	212:20	13	0
LEAF_NODE	212:21	212:21	10	)
STATEMENTS	213:4	213:4	10	
EXPR_STATEMENT	213:4	213:51	11	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor ) ;
EXPR	213:4	213:4	12	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	213:4	213:50	13	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
CALLEE	213:4	213:4	14	TIFFSetField
LEAF_NODE	213:4	213:4	15	TIFFSetField
LEAF_NODE	213:16	213:16	14	(
ARGUMENT	213:17	213:17	14	out
FIELD	213:17	213:17	15	out
LEAF_NODE	213:17	213:17	16	out
LEAF_NODE	213:20	213:20	14	,
ARGUMENT	213:22	213:22	14	TIFFTAG_PREDICTOR
FIELD	213:22	213:22	15	TIFFTAG_PREDICTOR
LEAF_NODE	213:22	213:22	16	TIFFTAG_PREDICTOR
LEAF_NODE	213:39	213:39	14	,
ARGUMENT	213:41	213:41	14	predictor
FIELD	213:41	213:41	15	predictor
LEAF_NODE	213:41	213:41	16	predictor
LEAF_NODE	213:50	213:50	14	)
LEAF_NODE	213:51	213:51	12	;
JUMP_STATEMENT	214:3	214:8	9	break DESTINATION ;
KEYWORD	214:3	214:3	10	break
LEAF_NODE	214:3	214:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	214:8	214:8	10	;
LEAF_NODE	215:2	215:2	8	}
LEAF_NODE	216:1	216:1	5	}
EXPR_STATEMENT	217:1	217:63	3	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_MINISBLACK ) ;
EXPR	217:1	217:1	4	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_MINISBLACK )
FUNCTION_CALL	217:1	217:62	5	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_MINISBLACK )
CALLEE	217:1	217:1	6	TIFFSetField
LEAF_NODE	217:1	217:1	7	TIFFSetField
LEAF_NODE	217:13	217:13	6	(
ARGUMENT	217:14	217:14	6	out
FIELD	217:14	217:14	7	out
LEAF_NODE	217:14	217:14	8	out
LEAF_NODE	217:17	217:17	6	,
ARGUMENT	217:19	217:19	6	TIFFTAG_PHOTOMETRIC
FIELD	217:19	217:19	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	217:19	217:19	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	217:38	217:38	6	,
ARGUMENT	217:40	217:40	6	PHOTOMETRIC_MINISBLACK
FIELD	217:40	217:40	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	217:40	217:40	8	PHOTOMETRIC_MINISBLACK
LEAF_NODE	217:62	217:62	6	)
LEAF_NODE	217:63	217:63	4	;
EXPR_STATEMENT	218:1	218:66	3	snprintf ( thing , sizeof ( thing ) , "B&W version of %s" , argv [ optind ] ) ;
EXPR	218:1	218:1	4	snprintf ( thing , sizeof ( thing ) , "B&W version of %s" , argv [ optind ] )
FUNCTION_CALL	218:1	218:65	5	snprintf ( thing , sizeof ( thing ) , "B&W version of %s" , argv [ optind ] )
CALLEE	218:1	218:1	6	snprintf
LEAF_NODE	218:1	218:1	7	snprintf
LEAF_NODE	218:9	218:9	6	(
ARGUMENT	218:10	218:10	6	thing
FIELD	218:10	218:10	7	thing
LEAF_NODE	218:10	218:10	8	thing
LEAF_NODE	218:15	218:15	6	,
ARGUMENT	218:17	218:17	6	sizeof ( thing )
FUNCTION_CALL	218:17	218:29	7	sizeof ( thing )
CALLEE	218:17	218:17	8	sizeof
LEAF_NODE	218:17	218:17	9	sizeof
LEAF_NODE	218:23	218:23	8	(
ARGUMENT	218:24	218:24	8	thing
FIELD	218:24	218:24	9	thing
LEAF_NODE	218:24	218:24	10	thing
LEAF_NODE	218:29	218:29	8	)
LEAF_NODE	218:30	218:30	6	,
ARGUMENT	218:32	218:32	6	"B&W version of %s"
FIELD	218:32	218:32	7	"B&W version of %s"
LEAF_NODE	218:32	218:32	8	"B&W version of %s"
LEAF_NODE	218:51	218:51	6	,
ARGUMENT	218:53	218:53	6	argv [ optind ]
FIELD	218:53	218:64	7	argv [ optind ]
LEAF_NODE	218:53	218:53	8	argv
LEAF_NODE	218:57	218:57	8	[
EXPR	218:58	218:58	8	optind
FIELD	218:58	218:58	9	optind
LEAF_NODE	218:58	218:58	10	optind
LEAF_NODE	218:64	218:64	8	]
LEAF_NODE	218:65	218:65	6	)
LEAF_NODE	218:66	218:66	4	;
EXPR_STATEMENT	219:1	219:51	3	TIFFSetField ( out , TIFFTAG_IMAGEDESCRIPTION , thing ) ;
EXPR	219:1	219:1	4	TIFFSetField ( out , TIFFTAG_IMAGEDESCRIPTION , thing )
FUNCTION_CALL	219:1	219:50	5	TIFFSetField ( out , TIFFTAG_IMAGEDESCRIPTION , thing )
CALLEE	219:1	219:1	6	TIFFSetField
LEAF_NODE	219:1	219:1	7	TIFFSetField
LEAF_NODE	219:13	219:13	6	(
ARGUMENT	219:14	219:14	6	out
FIELD	219:14	219:14	7	out
LEAF_NODE	219:14	219:14	8	out
LEAF_NODE	219:17	219:17	6	,
ARGUMENT	219:19	219:19	6	TIFFTAG_IMAGEDESCRIPTION
FIELD	219:19	219:19	7	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	219:19	219:19	8	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	219:43	219:43	6	,
ARGUMENT	219:45	219:45	6	thing
FIELD	219:45	219:45	7	thing
LEAF_NODE	219:45	219:45	8	thing
LEAF_NODE	219:50	219:50	6	)
LEAF_NODE	219:51	219:51	4	;
EXPR_STATEMENT	220:1	220:47	3	TIFFSetField ( out , TIFFTAG_SOFTWARE , "tiff2bw" ) ;
EXPR	220:1	220:1	4	TIFFSetField ( out , TIFFTAG_SOFTWARE , "tiff2bw" )
FUNCTION_CALL	220:1	220:46	5	TIFFSetField ( out , TIFFTAG_SOFTWARE , "tiff2bw" )
CALLEE	220:1	220:1	6	TIFFSetField
LEAF_NODE	220:1	220:1	7	TIFFSetField
LEAF_NODE	220:13	220:13	6	(
ARGUMENT	220:14	220:14	6	out
FIELD	220:14	220:14	7	out
LEAF_NODE	220:14	220:14	8	out
LEAF_NODE	220:17	220:17	6	,
ARGUMENT	220:19	220:19	6	TIFFTAG_SOFTWARE
FIELD	220:19	220:19	7	TIFFTAG_SOFTWARE
LEAF_NODE	220:19	220:19	8	TIFFTAG_SOFTWARE
LEAF_NODE	220:35	220:35	6	,
ARGUMENT	220:37	220:37	6	"tiff2bw"
FIELD	220:37	220:37	7	"tiff2bw"
LEAF_NODE	220:37	220:37	8	"tiff2bw"
LEAF_NODE	220:46	220:46	6	)
LEAF_NODE	220:47	220:47	4	;
EXPR_STATEMENT	221:1	221:61	3	outbuf = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( out ) ) ;
EXPR	221:1	221:1	4	outbuf = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( out ) )
ASSIGN	221:1	221:10	5	outbuf = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( out ) )
LVAL	221:1	221:1	6	outbuf
FIELD	221:1	221:1	7	outbuf
LEAF_NODE	221:1	221:1	8	outbuf
ASSIGN_OP	221:8	221:8	6	=
LEAF_NODE	221:8	221:8	7	=
RVAL	221:10	221:27	6	( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( out ) )
LEAF_NODE	221:10	221:10	7	(
TYPE_NAME	221:11	221:20	7	unsigned char
LEAF_NODE	221:11	221:11	8	unsigned
LEAF_NODE	221:20	221:20	8	char
LEAF_NODE	221:25	221:25	7	*
LEAF_NODE	221:26	221:26	7	)
FUNCTION_CALL	221:27	221:60	7	_TIFFmalloc ( TIFFScanlineSize ( out ) )
CALLEE	221:27	221:27	8	_TIFFmalloc
LEAF_NODE	221:27	221:27	9	_TIFFmalloc
LEAF_NODE	221:38	221:38	8	(
ARGUMENT	221:39	221:39	8	TIFFScanlineSize ( out )
FUNCTION_CALL	221:39	221:59	9	TIFFScanlineSize ( out )
CALLEE	221:39	221:39	10	TIFFScanlineSize
LEAF_NODE	221:39	221:39	11	TIFFScanlineSize
LEAF_NODE	221:55	221:55	10	(
ARGUMENT	221:56	221:56	10	out
FIELD	221:56	221:56	11	out
LEAF_NODE	221:56	221:56	12	out
LEAF_NODE	221:59	221:59	10	)
LEAF_NODE	221:60	221:60	8	)
LEAF_NODE	221:61	221:61	4	;
SELECTION	222:8	223:8	3	
KEYWORD	222:8	222:8	4	if
LEAF_NODE	222:8	222:8	5	if
LEAF_NODE	222:10	222:10	4	(
CONDITION	222:12	222:12	4	! outbuf
EXPR	222:12	222:12	5	! outbuf
UNARY_EXPR	222:12	222:13	6	! outbuf
UNARY_OPERATOR	222:12	222:12	7	!
LEAF_NODE	222:12	222:12	8	!
FIELD	222:13	222:13	7	outbuf
LEAF_NODE	222:13	222:13	8	outbuf
LEAF_NODE	222:20	222:20	4	)
STATEMENTS	223:8	226:8	4	
LEAF_NODE	223:8	223:8	5	{
STATEMENTS	224:12	225:12	5	
EXPR_STATEMENT	224:12	224:46	6	fprintf ( stderr , "Out of memory\n" ) ;
EXPR	224:12	224:12	7	fprintf ( stderr , "Out of memory\n" )
FUNCTION_CALL	224:12	224:45	8	fprintf ( stderr , "Out of memory\n" )
CALLEE	224:12	224:12	9	fprintf
LEAF_NODE	224:12	224:12	10	fprintf
LEAF_NODE	224:19	224:19	9	(
ARGUMENT	224:20	224:20	9	stderr
FIELD	224:20	224:20	10	stderr
LEAF_NODE	224:20	224:20	11	stderr
LEAF_NODE	224:26	224:26	9	,
ARGUMENT	224:28	224:28	9	"Out of memory\n"
FIELD	224:28	224:28	10	"Out of memory\n"
LEAF_NODE	224:28	224:28	11	"Out of memory\n"
LEAF_NODE	224:45	224:45	9	)
LEAF_NODE	224:46	224:46	7	;
JUMP_STATEMENT	225:12	225:30	6	goto tiff2bw_error ;
KEYWORD	225:12	225:12	7	goto
LEAF_NODE	225:12	225:12	8	goto
DESTINATION	225:17	225:17	7	tiff2bw_error
LEAF_NODE	225:17	225:17	8	tiff2bw_error
LEAF_NODE	225:30	225:30	7	;
LEAF_NODE	226:8	226:8	5	}
EXPR_STATEMENT	227:1	228:45	3	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) ) ;
EXPR	227:1	227:1	4	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) )
FUNCTION_CALL	227:1	228:44	5	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) )
CALLEE	227:1	227:1	6	TIFFSetField
LEAF_NODE	227:1	227:1	7	TIFFSetField
LEAF_NODE	227:13	227:13	6	(
ARGUMENT	227:14	227:14	6	out
FIELD	227:14	227:14	7	out
LEAF_NODE	227:14	227:14	8	out
LEAF_NODE	227:17	227:17	6	,
ARGUMENT	227:19	227:19	6	TIFFTAG_ROWSPERSTRIP
FIELD	227:19	227:19	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	227:19	227:19	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	227:39	227:39	6	,
ARGUMENT	228:5	228:5	6	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	228:5	228:43	7	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	228:5	228:5	8	TIFFDefaultStripSize
LEAF_NODE	228:5	228:5	9	TIFFDefaultStripSize
LEAF_NODE	228:25	228:25	8	(
ARGUMENT	228:26	228:26	8	out
FIELD	228:26	228:26	9	out
LEAF_NODE	228:26	228:26	10	out
LEAF_NODE	228:29	228:29	8	,
ARGUMENT	228:31	228:31	8	rowsperstrip
FIELD	228:31	228:31	9	rowsperstrip
LEAF_NODE	228:31	228:31	10	rowsperstrip
LEAF_NODE	228:43	228:43	8	)
LEAF_NODE	228:44	228:44	6	)
LEAF_NODE	228:45	228:45	4	;
SELECTION	231:1	231:36	3	
KEYWORD	231:1	231:1	4	switch
LEAF_NODE	231:1	231:1	5	switch
LEAF_NODE	231:8	231:8	4	(
CONDITION	231:9	231:9	4	pack ( photometric , config )
EXPR	231:9	231:9	5	pack ( photometric , config )
FUNCTION_CALL	231:9	231:33	6	pack ( photometric , config )
CALLEE	231:9	231:9	7	pack
LEAF_NODE	231:9	231:9	8	pack
LEAF_NODE	231:13	231:13	7	(
ARGUMENT	231:14	231:14	7	photometric
FIELD	231:14	231:14	8	photometric
LEAF_NODE	231:14	231:14	9	photometric
LEAF_NODE	231:25	231:25	7	,
ARGUMENT	231:27	231:27	7	config
FIELD	231:27	231:27	8	config
LEAF_NODE	231:27	231:27	9	config
LEAF_NODE	231:33	231:33	7	)
LEAF_NODE	231:34	231:34	4	)
STATEMENTS	231:36	301:1	4	
LEAF_NODE	231:36	231:36	5	{
STATEMENTS	232:1	300:8	5	
LEAF_NODE	232:1	232:1	6	case
LEAF_NODE	232:6	232:6	6	pack
LEAF_NODE	232:10	232:10	6	(
LEAF_NODE	232:11	232:11	6	PHOTOMETRIC_PALETTE
LEAF_NODE	232:30	232:30	6	,
LEAF_NODE	232:32	232:32	6	PLANARCONFIG_CONTIG
LEAF_NODE	232:51	232:51	6	)
LEAF_NODE	232:52	232:52	6	:
LEAF_NODE	233:1	233:1	6	case
LEAF_NODE	233:6	233:6	6	pack
LEAF_NODE	233:10	233:10	6	(
LEAF_NODE	233:11	233:11	6	PHOTOMETRIC_PALETTE
LEAF_NODE	233:30	233:30	6	,
LEAF_NODE	233:32	233:32	6	PLANARCONFIG_SEPARATE
LEAF_NODE	233:53	233:53	6	)
LEAF_NODE	233:54	233:54	6	:
EXPR_STATEMENT	234:2	234:57	6	TIFFGetField ( in , TIFFTAG_COLORMAP , & red , & green , & blue ) ;
EXPR	234:2	234:2	7	TIFFGetField ( in , TIFFTAG_COLORMAP , & red , & green , & blue )
FUNCTION_CALL	234:2	234:56	8	TIFFGetField ( in , TIFFTAG_COLORMAP , & red , & green , & blue )
CALLEE	234:2	234:2	9	TIFFGetField
LEAF_NODE	234:2	234:2	10	TIFFGetField
LEAF_NODE	234:14	234:14	9	(
ARGUMENT	234:15	234:15	9	in
FIELD	234:15	234:15	10	in
LEAF_NODE	234:15	234:15	11	in
LEAF_NODE	234:17	234:17	9	,
ARGUMENT	234:19	234:19	9	TIFFTAG_COLORMAP
FIELD	234:19	234:19	10	TIFFTAG_COLORMAP
LEAF_NODE	234:19	234:19	11	TIFFTAG_COLORMAP
LEAF_NODE	234:35	234:35	9	,
ARGUMENT	234:37	234:37	9	& red
UNARY_EXPR	234:37	234:38	10	& red
UNARY_OPERATOR	234:37	234:37	11	&
LEAF_NODE	234:37	234:37	12	&
FIELD	234:38	234:38	11	red
LEAF_NODE	234:38	234:38	12	red
LEAF_NODE	234:41	234:41	9	,
ARGUMENT	234:43	234:43	9	& green
UNARY_EXPR	234:43	234:44	10	& green
UNARY_OPERATOR	234:43	234:43	11	&
LEAF_NODE	234:43	234:43	12	&
FIELD	234:44	234:44	11	green
LEAF_NODE	234:44	234:44	12	green
LEAF_NODE	234:49	234:49	9	,
ARGUMENT	234:51	234:51	9	& blue
UNARY_EXPR	234:51	234:52	10	& blue
UNARY_OPERATOR	234:51	234:51	11	&
LEAF_NODE	234:51	234:51	12	&
FIELD	234:52	234:52	11	blue
LEAF_NODE	234:52	234:52	12	blue
LEAF_NODE	234:56	234:56	9	)
LEAF_NODE	234:57	234:57	7	;
SELECTION	239:2	239:63	6	
KEYWORD	239:2	239:2	7	if
LEAF_NODE	239:2	239:2	8	if
LEAF_NODE	239:5	239:5	7	(
CONDITION	239:6	239:6	7	checkcmap ( in , 1 << bitspersample , red , green , blue ) == 16
EXPR	239:6	239:59	8	checkcmap ( in , 1 << bitspersample , red , green , blue ) == 16
FUNCTION_CALL	239:6	239:54	9	checkcmap ( in , 1 << bitspersample , red , green , blue )
CALLEE	239:6	239:6	10	checkcmap
LEAF_NODE	239:6	239:6	11	checkcmap
LEAF_NODE	239:15	239:15	10	(
ARGUMENT	239:16	239:16	10	in
FIELD	239:16	239:16	11	in
LEAF_NODE	239:16	239:16	12	in
LEAF_NODE	239:18	239:18	10	,
ARGUMENT	239:20	239:23	10	1 << bitspersample
FIELD	239:20	239:20	11	1
LEAF_NODE	239:20	239:20	12	1
LEAF_NODE	239:21	239:21	11	<<
FIELD	239:23	239:23	11	bitspersample
LEAF_NODE	239:23	239:23	12	bitspersample
LEAF_NODE	239:36	239:36	10	,
ARGUMENT	239:38	239:38	10	red
FIELD	239:38	239:38	11	red
LEAF_NODE	239:38	239:38	12	red
LEAF_NODE	239:41	239:41	10	,
ARGUMENT	239:43	239:43	10	green
FIELD	239:43	239:43	11	green
LEAF_NODE	239:43	239:43	12	green
LEAF_NODE	239:48	239:48	10	,
ARGUMENT	239:50	239:50	10	blue
FIELD	239:50	239:50	11	blue
LEAF_NODE	239:50	239:50	12	blue
LEAF_NODE	239:54	239:54	10	)
EQ_OPERATOR	239:56	239:56	9	==
LEAF_NODE	239:56	239:56	10	==
FIELD	239:59	239:59	9	16
LEAF_NODE	239:59	239:59	10	16
LEAF_NODE	239:61	239:61	7	)
STATEMENTS	239:63	248:2	7	
LEAF_NODE	239:63	239:63	8	{
STATEMENTS	240:3	242:3	8	
SIMPLE_DECL	240:3	240:8	9	int i ;
VAR_DECL	240:3	240:7	10	int i
TYPE	240:3	240:3	11	int
TYPE_NAME	240:3	240:3	12	int
LEAF_NODE	240:3	240:3	13	int
NAME	240:7	240:7	11	i
LEAF_NODE	240:7	240:7	12	i
LEAF_NODE	240:8	240:8	10	;
ITERATION	242:3	242:47	9	
KEYWORD	242:3	242:3	10	for
LEAF_NODE	242:3	242:3	11	for
LEAF_NODE	242:7	242:7	10	(
FOR_INIT	242:8	242:32	10	i = ( 1 << bitspersample ) - 1 ;
EXPR	242:8	242:8	11	i = ( 1 << bitspersample ) - 1
ASSIGN	242:8	242:12	12	i = ( 1 << bitspersample ) - 1
LVAL	242:8	242:8	13	i
FIELD	242:8	242:8	14	i
LEAF_NODE	242:8	242:8	15	i
ASSIGN_OP	242:10	242:10	13	=
LEAF_NODE	242:10	242:10	14	=
RVAL	242:12	242:31	13	( 1 << bitspersample ) - 1
LEAF_NODE	242:12	242:12	14	(
FIELD	242:13	242:13	14	1
LEAF_NODE	242:13	242:13	15	1
LEAF_NODE	242:14	242:14	14	<<
FIELD	242:16	242:16	14	bitspersample
LEAF_NODE	242:16	242:16	15	bitspersample
LEAF_NODE	242:29	242:29	14	)
LEAF_NODE	242:30	242:30	14	-
FIELD	242:31	242:31	14	1
LEAF_NODE	242:31	242:31	15	1
LEAF_NODE	242:32	242:32	11	;
CONDITION	242:34	242:34	10	i >= 0
EXPR	242:34	242:39	11	i >= 0
FIELD	242:34	242:34	12	i
LEAF_NODE	242:34	242:34	13	i
REL_OPERATOR	242:36	242:36	12	>=
LEAF_NODE	242:36	242:36	13	>=
FIELD	242:39	242:39	12	0
LEAF_NODE	242:39	242:39	13	0
LEAF_NODE	242:40	242:40	10	;
FOR_EXPR	242:42	242:42	10	i --
EXPR	242:42	242:42	11	i --
FIELD	242:42	242:43	12	i --
LEAF_NODE	242:42	242:42	13	i
LEAF_NODE	242:43	242:43	13	--
LEAF_NODE	242:45	242:45	10	)
STATEMENTS	242:47	246:3	10	
LEAF_NODE	242:47	242:47	11	{
STATEMENTS	243:4	245:4	11	
EXPR_STATEMENT	243:4	243:24	12	red [ i ] = CVT ( red [ i ] ) ;
EXPR	243:4	243:4	13	red [ i ] = CVT ( red [ i ] )
ASSIGN	243:4	243:13	14	red [ i ] = CVT ( red [ i ] )
LVAL	243:4	243:4	15	red [ i ]
FIELD	243:4	243:9	16	red [ i ]
LEAF_NODE	243:4	243:4	17	red
LEAF_NODE	243:7	243:7	17	[
EXPR	243:8	243:8	17	i
FIELD	243:8	243:8	18	i
LEAF_NODE	243:8	243:8	19	i
LEAF_NODE	243:9	243:9	17	]
ASSIGN_OP	243:11	243:11	15	=
LEAF_NODE	243:11	243:11	16	=
RVAL	243:13	243:13	15	CVT ( red [ i ] )
FUNCTION_CALL	243:13	243:23	16	CVT ( red [ i ] )
CALLEE	243:13	243:13	17	CVT
LEAF_NODE	243:13	243:13	18	CVT
LEAF_NODE	243:16	243:16	17	(
ARGUMENT	243:17	243:17	17	red [ i ]
FIELD	243:17	243:22	18	red [ i ]
LEAF_NODE	243:17	243:17	19	red
LEAF_NODE	243:20	243:20	19	[
EXPR	243:21	243:21	19	i
FIELD	243:21	243:21	20	i
LEAF_NODE	243:21	243:21	21	i
LEAF_NODE	243:22	243:22	19	]
LEAF_NODE	243:23	243:23	17	)
LEAF_NODE	243:24	243:24	13	;
EXPR_STATEMENT	244:4	244:28	12	green [ i ] = CVT ( green [ i ] ) ;
EXPR	244:4	244:4	13	green [ i ] = CVT ( green [ i ] )
ASSIGN	244:4	244:15	14	green [ i ] = CVT ( green [ i ] )
LVAL	244:4	244:4	15	green [ i ]
FIELD	244:4	244:11	16	green [ i ]
LEAF_NODE	244:4	244:4	17	green
LEAF_NODE	244:9	244:9	17	[
EXPR	244:10	244:10	17	i
FIELD	244:10	244:10	18	i
LEAF_NODE	244:10	244:10	19	i
LEAF_NODE	244:11	244:11	17	]
ASSIGN_OP	244:13	244:13	15	=
LEAF_NODE	244:13	244:13	16	=
RVAL	244:15	244:15	15	CVT ( green [ i ] )
FUNCTION_CALL	244:15	244:27	16	CVT ( green [ i ] )
CALLEE	244:15	244:15	17	CVT
LEAF_NODE	244:15	244:15	18	CVT
LEAF_NODE	244:18	244:18	17	(
ARGUMENT	244:19	244:19	17	green [ i ]
FIELD	244:19	244:26	18	green [ i ]
LEAF_NODE	244:19	244:19	19	green
LEAF_NODE	244:24	244:24	19	[
EXPR	244:25	244:25	19	i
FIELD	244:25	244:25	20	i
LEAF_NODE	244:25	244:25	21	i
LEAF_NODE	244:26	244:26	19	]
LEAF_NODE	244:27	244:27	17	)
LEAF_NODE	244:28	244:28	13	;
EXPR_STATEMENT	245:4	245:26	12	blue [ i ] = CVT ( blue [ i ] ) ;
EXPR	245:4	245:4	13	blue [ i ] = CVT ( blue [ i ] )
ASSIGN	245:4	245:14	14	blue [ i ] = CVT ( blue [ i ] )
LVAL	245:4	245:4	15	blue [ i ]
FIELD	245:4	245:10	16	blue [ i ]
LEAF_NODE	245:4	245:4	17	blue
LEAF_NODE	245:8	245:8	17	[
EXPR	245:9	245:9	17	i
FIELD	245:9	245:9	18	i
LEAF_NODE	245:9	245:9	19	i
LEAF_NODE	245:10	245:10	17	]
ASSIGN_OP	245:12	245:12	15	=
LEAF_NODE	245:12	245:12	16	=
RVAL	245:14	245:14	15	CVT ( blue [ i ] )
FUNCTION_CALL	245:14	245:25	16	CVT ( blue [ i ] )
CALLEE	245:14	245:14	17	CVT
LEAF_NODE	245:14	245:14	18	CVT
LEAF_NODE	245:17	245:17	17	(
ARGUMENT	245:18	245:18	17	blue [ i ]
FIELD	245:18	245:24	18	blue [ i ]
LEAF_NODE	245:18	245:18	19	blue
LEAF_NODE	245:22	245:22	19	[
EXPR	245:23	245:23	19	i
FIELD	245:23	245:23	20	i
LEAF_NODE	245:23	245:23	21	i
LEAF_NODE	245:24	245:24	19	]
LEAF_NODE	245:25	245:25	17	)
LEAF_NODE	245:26	245:26	13	;
LEAF_NODE	246:3	246:3	11	}
LEAF_NODE	248:2	248:2	8	}
EXPR_STATEMENT	249:2	249:60	6	inbuf = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) ) ;
EXPR	249:2	249:2	7	inbuf = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
ASSIGN	249:2	249:10	8	inbuf = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LVAL	249:2	249:2	9	inbuf
FIELD	249:2	249:2	10	inbuf
LEAF_NODE	249:2	249:2	11	inbuf
ASSIGN_OP	249:8	249:8	9	=
LEAF_NODE	249:8	249:8	10	=
RVAL	249:10	249:27	9	( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LEAF_NODE	249:10	249:10	10	(
TYPE_NAME	249:11	249:20	10	unsigned char
LEAF_NODE	249:11	249:11	11	unsigned
LEAF_NODE	249:20	249:20	11	char
LEAF_NODE	249:25	249:25	10	*
LEAF_NODE	249:26	249:26	10	)
FUNCTION_CALL	249:27	249:59	10	_TIFFmalloc ( TIFFScanlineSize ( in ) )
CALLEE	249:27	249:27	11	_TIFFmalloc
LEAF_NODE	249:27	249:27	12	_TIFFmalloc
LEAF_NODE	249:38	249:38	11	(
ARGUMENT	249:39	249:39	11	TIFFScanlineSize ( in )
FUNCTION_CALL	249:39	249:58	12	TIFFScanlineSize ( in )
CALLEE	249:39	249:39	13	TIFFScanlineSize
LEAF_NODE	249:39	249:39	14	TIFFScanlineSize
LEAF_NODE	249:55	249:55	13	(
ARGUMENT	249:56	249:56	13	in
FIELD	249:56	249:56	14	in
LEAF_NODE	249:56	249:56	15	in
LEAF_NODE	249:58	249:58	13	)
LEAF_NODE	249:59	249:59	11	)
LEAF_NODE	249:60	249:60	7	;
SELECTION	250:16	251:16	6	
KEYWORD	250:16	250:16	7	if
LEAF_NODE	250:16	250:16	8	if
LEAF_NODE	250:18	250:18	7	(
CONDITION	250:20	250:20	7	! inbuf
EXPR	250:20	250:20	8	! inbuf
UNARY_EXPR	250:20	250:21	9	! inbuf
UNARY_OPERATOR	250:20	250:20	10	!
LEAF_NODE	250:20	250:20	11	!
FIELD	250:21	250:21	10	inbuf
LEAF_NODE	250:21	250:21	11	inbuf
LEAF_NODE	250:27	250:27	7	)
STATEMENTS	251:16	254:16	7	
LEAF_NODE	251:16	251:16	8	{
STATEMENTS	252:20	253:20	8	
EXPR_STATEMENT	252:20	252:54	9	fprintf ( stderr , "Out of memory\n" ) ;
EXPR	252:20	252:20	10	fprintf ( stderr , "Out of memory\n" )
FUNCTION_CALL	252:20	252:53	11	fprintf ( stderr , "Out of memory\n" )
CALLEE	252:20	252:20	12	fprintf
LEAF_NODE	252:20	252:20	13	fprintf
LEAF_NODE	252:27	252:27	12	(
ARGUMENT	252:28	252:28	12	stderr
FIELD	252:28	252:28	13	stderr
LEAF_NODE	252:28	252:28	14	stderr
LEAF_NODE	252:34	252:34	12	,
ARGUMENT	252:36	252:36	12	"Out of memory\n"
FIELD	252:36	252:36	13	"Out of memory\n"
LEAF_NODE	252:36	252:36	14	"Out of memory\n"
LEAF_NODE	252:53	252:53	12	)
LEAF_NODE	252:54	252:54	10	;
JUMP_STATEMENT	253:20	253:38	9	goto tiff2bw_error ;
KEYWORD	253:20	253:20	10	goto
LEAF_NODE	253:20	253:20	11	goto
DESTINATION	253:25	253:25	10	tiff2bw_error
LEAF_NODE	253:25	253:25	11	tiff2bw_error
LEAF_NODE	253:38	253:38	10	;
LEAF_NODE	254:16	254:16	8	}
ITERATION	255:2	255:32	6	
KEYWORD	255:2	255:2	7	for
LEAF_NODE	255:2	255:2	8	for
LEAF_NODE	255:6	255:6	7	(
FOR_INIT	255:7	255:14	7	row = 0 ;
EXPR	255:7	255:7	8	row = 0
ASSIGN	255:7	255:13	9	row = 0
LVAL	255:7	255:7	10	row
FIELD	255:7	255:7	11	row
LEAF_NODE	255:7	255:7	12	row
ASSIGN_OP	255:11	255:11	10	=
LEAF_NODE	255:11	255:11	11	=
RVAL	255:13	255:13	10	0
FIELD	255:13	255:13	11	0
LEAF_NODE	255:13	255:13	12	0
LEAF_NODE	255:14	255:14	8	;
CONDITION	255:16	255:16	7	row < h
EXPR	255:16	255:22	8	row < h
FIELD	255:16	255:16	9	row
LEAF_NODE	255:16	255:16	10	row
REL_OPERATOR	255:20	255:20	9	<
LEAF_NODE	255:20	255:20	10	<
FIELD	255:22	255:22	9	h
LEAF_NODE	255:22	255:22	10	h
LEAF_NODE	255:23	255:23	7	;
FOR_EXPR	255:25	255:25	7	row ++
EXPR	255:25	255:25	8	row ++
FIELD	255:25	255:28	9	row ++
LEAF_NODE	255:25	255:25	10	row
LEAF_NODE	255:28	255:28	10	++
LEAF_NODE	255:30	255:30	7	)
STATEMENTS	255:32	261:2	7	
LEAF_NODE	255:32	255:32	8	{
STATEMENTS	256:3	259:3	8	
SELECTION	256:3	257:4	9	
KEYWORD	256:3	256:3	10	if
LEAF_NODE	256:3	256:3	11	if
LEAF_NODE	256:6	256:6	10	(
CONDITION	256:7	256:7	10	TIFFReadScanline ( in , inbuf , row , 0 ) < 0
EXPR	256:7	256:45	11	TIFFReadScanline ( in , inbuf , row , 0 ) < 0
FUNCTION_CALL	256:7	256:41	12	TIFFReadScanline ( in , inbuf , row , 0 )
CALLEE	256:7	256:7	13	TIFFReadScanline
LEAF_NODE	256:7	256:7	14	TIFFReadScanline
LEAF_NODE	256:23	256:23	13	(
ARGUMENT	256:24	256:24	13	in
FIELD	256:24	256:24	14	in
LEAF_NODE	256:24	256:24	15	in
LEAF_NODE	256:26	256:26	13	,
ARGUMENT	256:28	256:28	13	inbuf
FIELD	256:28	256:28	14	inbuf
LEAF_NODE	256:28	256:28	15	inbuf
LEAF_NODE	256:33	256:33	13	,
ARGUMENT	256:35	256:35	13	row
FIELD	256:35	256:35	14	row
LEAF_NODE	256:35	256:35	15	row
LEAF_NODE	256:38	256:38	13	,
ARGUMENT	256:40	256:40	13	0
FIELD	256:40	256:40	14	0
LEAF_NODE	256:40	256:40	15	0
LEAF_NODE	256:41	256:41	13	)
REL_OPERATOR	256:43	256:43	12	<
LEAF_NODE	256:43	256:43	13	<
FIELD	256:45	256:45	12	0
LEAF_NODE	256:45	256:45	13	0
LEAF_NODE	256:46	256:46	10	)
STATEMENTS	257:4	257:4	10	
JUMP_STATEMENT	257:4	257:9	11	break DESTINATION ;
KEYWORD	257:4	257:4	12	break
LEAF_NODE	257:4	257:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	257:9	257:9	12	;
EXPR_STATEMENT	258:3	258:54	9	compresspalette ( outbuf , inbuf , w , red , green , blue ) ;
EXPR	258:3	258:3	10	compresspalette ( outbuf , inbuf , w , red , green , blue )
FUNCTION_CALL	258:3	258:53	11	compresspalette ( outbuf , inbuf , w , red , green , blue )
CALLEE	258:3	258:3	12	compresspalette
LEAF_NODE	258:3	258:3	13	compresspalette
LEAF_NODE	258:18	258:18	12	(
ARGUMENT	258:19	258:19	12	outbuf
FIELD	258:19	258:19	13	outbuf
LEAF_NODE	258:19	258:19	14	outbuf
LEAF_NODE	258:25	258:25	12	,
ARGUMENT	258:27	258:27	12	inbuf
FIELD	258:27	258:27	13	inbuf
LEAF_NODE	258:27	258:27	14	inbuf
LEAF_NODE	258:32	258:32	12	,
ARGUMENT	258:34	258:34	12	w
FIELD	258:34	258:34	13	w
LEAF_NODE	258:34	258:34	14	w
LEAF_NODE	258:35	258:35	12	,
ARGUMENT	258:37	258:37	12	red
FIELD	258:37	258:37	13	red
LEAF_NODE	258:37	258:37	14	red
LEAF_NODE	258:40	258:40	12	,
ARGUMENT	258:42	258:42	12	green
FIELD	258:42	258:42	13	green
LEAF_NODE	258:42	258:42	14	green
LEAF_NODE	258:47	258:47	12	,
ARGUMENT	258:49	258:49	12	blue
FIELD	258:49	258:49	13	blue
LEAF_NODE	258:49	258:49	14	blue
LEAF_NODE	258:53	258:53	12	)
LEAF_NODE	258:54	258:54	10	;
SELECTION	259:3	260:4	9	
KEYWORD	259:3	259:3	10	if
LEAF_NODE	259:3	259:3	11	if
LEAF_NODE	259:6	259:6	10	(
CONDITION	259:7	259:7	10	TIFFWriteScanline ( out , outbuf , row , 0 ) < 0
EXPR	259:7	259:48	11	TIFFWriteScanline ( out , outbuf , row , 0 ) < 0
FUNCTION_CALL	259:7	259:44	12	TIFFWriteScanline ( out , outbuf , row , 0 )
CALLEE	259:7	259:7	13	TIFFWriteScanline
LEAF_NODE	259:7	259:7	14	TIFFWriteScanline
LEAF_NODE	259:24	259:24	13	(
ARGUMENT	259:25	259:25	13	out
FIELD	259:25	259:25	14	out
LEAF_NODE	259:25	259:25	15	out
LEAF_NODE	259:28	259:28	13	,
ARGUMENT	259:30	259:30	13	outbuf
FIELD	259:30	259:30	14	outbuf
LEAF_NODE	259:30	259:30	15	outbuf
LEAF_NODE	259:36	259:36	13	,
ARGUMENT	259:38	259:38	13	row
FIELD	259:38	259:38	14	row
LEAF_NODE	259:38	259:38	15	row
LEAF_NODE	259:41	259:41	13	,
ARGUMENT	259:43	259:43	13	0
FIELD	259:43	259:43	14	0
LEAF_NODE	259:43	259:43	15	0
LEAF_NODE	259:44	259:44	13	)
REL_OPERATOR	259:46	259:46	12	<
LEAF_NODE	259:46	259:46	13	<
FIELD	259:48	259:48	12	0
LEAF_NODE	259:48	259:48	13	0
LEAF_NODE	259:49	259:49	10	)
STATEMENTS	260:4	260:4	10	
JUMP_STATEMENT	260:4	260:9	11	break DESTINATION ;
KEYWORD	260:4	260:4	12	break
LEAF_NODE	260:4	260:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	260:9	260:9	12	;
LEAF_NODE	261:2	261:2	8	}
JUMP_STATEMENT	262:2	262:7	6	break DESTINATION ;
KEYWORD	262:2	262:2	7	break
LEAF_NODE	262:2	262:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	262:7	262:7	7	;
LEAF_NODE	263:1	263:1	6	case
LEAF_NODE	263:6	263:6	6	pack
LEAF_NODE	263:10	263:10	6	(
LEAF_NODE	263:11	263:11	6	PHOTOMETRIC_RGB
LEAF_NODE	263:26	263:26	6	,
LEAF_NODE	263:28	263:28	6	PLANARCONFIG_CONTIG
LEAF_NODE	263:47	263:47	6	)
LEAF_NODE	263:48	263:48	6	:
EXPR_STATEMENT	264:2	264:60	6	inbuf = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) ) ;
EXPR	264:2	264:2	7	inbuf = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
ASSIGN	264:2	264:10	8	inbuf = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LVAL	264:2	264:2	9	inbuf
FIELD	264:2	264:2	10	inbuf
LEAF_NODE	264:2	264:2	11	inbuf
ASSIGN_OP	264:8	264:8	9	=
LEAF_NODE	264:8	264:8	10	=
RVAL	264:10	264:27	9	( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LEAF_NODE	264:10	264:10	10	(
TYPE_NAME	264:11	264:20	10	unsigned char
LEAF_NODE	264:11	264:11	11	unsigned
LEAF_NODE	264:20	264:20	11	char
LEAF_NODE	264:25	264:25	10	*
LEAF_NODE	264:26	264:26	10	)
FUNCTION_CALL	264:27	264:59	10	_TIFFmalloc ( TIFFScanlineSize ( in ) )
CALLEE	264:27	264:27	11	_TIFFmalloc
LEAF_NODE	264:27	264:27	12	_TIFFmalloc
LEAF_NODE	264:38	264:38	11	(
ARGUMENT	264:39	264:39	11	TIFFScanlineSize ( in )
FUNCTION_CALL	264:39	264:58	12	TIFFScanlineSize ( in )
CALLEE	264:39	264:39	13	TIFFScanlineSize
LEAF_NODE	264:39	264:39	14	TIFFScanlineSize
LEAF_NODE	264:55	264:55	13	(
ARGUMENT	264:56	264:56	13	in
FIELD	264:56	264:56	14	in
LEAF_NODE	264:56	264:56	15	in
LEAF_NODE	264:58	264:58	13	)
LEAF_NODE	264:59	264:59	11	)
LEAF_NODE	264:60	264:60	7	;
SELECTION	265:16	266:16	6	
KEYWORD	265:16	265:16	7	if
LEAF_NODE	265:16	265:16	8	if
LEAF_NODE	265:18	265:18	7	(
CONDITION	265:20	265:20	7	! inbuf
EXPR	265:20	265:20	8	! inbuf
UNARY_EXPR	265:20	265:21	9	! inbuf
UNARY_OPERATOR	265:20	265:20	10	!
LEAF_NODE	265:20	265:20	11	!
FIELD	265:21	265:21	10	inbuf
LEAF_NODE	265:21	265:21	11	inbuf
LEAF_NODE	265:27	265:27	7	)
STATEMENTS	266:16	269:16	7	
LEAF_NODE	266:16	266:16	8	{
STATEMENTS	267:20	268:20	8	
EXPR_STATEMENT	267:20	267:54	9	fprintf ( stderr , "Out of memory\n" ) ;
EXPR	267:20	267:20	10	fprintf ( stderr , "Out of memory\n" )
FUNCTION_CALL	267:20	267:53	11	fprintf ( stderr , "Out of memory\n" )
CALLEE	267:20	267:20	12	fprintf
LEAF_NODE	267:20	267:20	13	fprintf
LEAF_NODE	267:27	267:27	12	(
ARGUMENT	267:28	267:28	12	stderr
FIELD	267:28	267:28	13	stderr
LEAF_NODE	267:28	267:28	14	stderr
LEAF_NODE	267:34	267:34	12	,
ARGUMENT	267:36	267:36	12	"Out of memory\n"
FIELD	267:36	267:36	13	"Out of memory\n"
LEAF_NODE	267:36	267:36	14	"Out of memory\n"
LEAF_NODE	267:53	267:53	12	)
LEAF_NODE	267:54	267:54	10	;
JUMP_STATEMENT	268:20	268:38	9	goto tiff2bw_error ;
KEYWORD	268:20	268:20	10	goto
LEAF_NODE	268:20	268:20	11	goto
DESTINATION	268:25	268:25	10	tiff2bw_error
LEAF_NODE	268:25	268:25	11	tiff2bw_error
LEAF_NODE	268:38	268:38	10	;
LEAF_NODE	269:16	269:16	8	}
ITERATION	270:2	270:32	6	
KEYWORD	270:2	270:2	7	for
LEAF_NODE	270:2	270:2	8	for
LEAF_NODE	270:6	270:6	7	(
FOR_INIT	270:7	270:14	7	row = 0 ;
EXPR	270:7	270:7	8	row = 0
ASSIGN	270:7	270:13	9	row = 0
LVAL	270:7	270:7	10	row
FIELD	270:7	270:7	11	row
LEAF_NODE	270:7	270:7	12	row
ASSIGN_OP	270:11	270:11	10	=
LEAF_NODE	270:11	270:11	11	=
RVAL	270:13	270:13	10	0
FIELD	270:13	270:13	11	0
LEAF_NODE	270:13	270:13	12	0
LEAF_NODE	270:14	270:14	8	;
CONDITION	270:16	270:16	7	row < h
EXPR	270:16	270:22	8	row < h
FIELD	270:16	270:16	9	row
LEAF_NODE	270:16	270:16	10	row
REL_OPERATOR	270:20	270:20	9	<
LEAF_NODE	270:20	270:20	10	<
FIELD	270:22	270:22	9	h
LEAF_NODE	270:22	270:22	10	h
LEAF_NODE	270:23	270:23	7	;
FOR_EXPR	270:25	270:25	7	row ++
EXPR	270:25	270:25	8	row ++
FIELD	270:25	270:28	9	row ++
LEAF_NODE	270:25	270:25	10	row
LEAF_NODE	270:28	270:28	10	++
LEAF_NODE	270:30	270:30	7	)
STATEMENTS	270:32	276:2	7	
LEAF_NODE	270:32	270:32	8	{
STATEMENTS	271:3	274:3	8	
SELECTION	271:3	272:4	9	
KEYWORD	271:3	271:3	10	if
LEAF_NODE	271:3	271:3	11	if
LEAF_NODE	271:6	271:6	10	(
CONDITION	271:7	271:7	10	TIFFReadScanline ( in , inbuf , row , 0 ) < 0
EXPR	271:7	271:45	11	TIFFReadScanline ( in , inbuf , row , 0 ) < 0
FUNCTION_CALL	271:7	271:41	12	TIFFReadScanline ( in , inbuf , row , 0 )
CALLEE	271:7	271:7	13	TIFFReadScanline
LEAF_NODE	271:7	271:7	14	TIFFReadScanline
LEAF_NODE	271:23	271:23	13	(
ARGUMENT	271:24	271:24	13	in
FIELD	271:24	271:24	14	in
LEAF_NODE	271:24	271:24	15	in
LEAF_NODE	271:26	271:26	13	,
ARGUMENT	271:28	271:28	13	inbuf
FIELD	271:28	271:28	14	inbuf
LEAF_NODE	271:28	271:28	15	inbuf
LEAF_NODE	271:33	271:33	13	,
ARGUMENT	271:35	271:35	13	row
FIELD	271:35	271:35	14	row
LEAF_NODE	271:35	271:35	15	row
LEAF_NODE	271:38	271:38	13	,
ARGUMENT	271:40	271:40	13	0
FIELD	271:40	271:40	14	0
LEAF_NODE	271:40	271:40	15	0
LEAF_NODE	271:41	271:41	13	)
REL_OPERATOR	271:43	271:43	12	<
LEAF_NODE	271:43	271:43	13	<
FIELD	271:45	271:45	12	0
LEAF_NODE	271:45	271:45	13	0
LEAF_NODE	271:46	271:46	10	)
STATEMENTS	272:4	272:4	10	
JUMP_STATEMENT	272:4	272:9	11	break DESTINATION ;
KEYWORD	272:4	272:4	12	break
LEAF_NODE	272:4	272:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	272:9	272:9	12	;
EXPR_STATEMENT	273:3	273:35	9	compresscontig ( outbuf , inbuf , w ) ;
EXPR	273:3	273:3	10	compresscontig ( outbuf , inbuf , w )
FUNCTION_CALL	273:3	273:34	11	compresscontig ( outbuf , inbuf , w )
CALLEE	273:3	273:3	12	compresscontig
LEAF_NODE	273:3	273:3	13	compresscontig
LEAF_NODE	273:17	273:17	12	(
ARGUMENT	273:18	273:18	12	outbuf
FIELD	273:18	273:18	13	outbuf
LEAF_NODE	273:18	273:18	14	outbuf
LEAF_NODE	273:24	273:24	12	,
ARGUMENT	273:26	273:26	12	inbuf
FIELD	273:26	273:26	13	inbuf
LEAF_NODE	273:26	273:26	14	inbuf
LEAF_NODE	273:31	273:31	12	,
ARGUMENT	273:33	273:33	12	w
FIELD	273:33	273:33	13	w
LEAF_NODE	273:33	273:33	14	w
LEAF_NODE	273:34	273:34	12	)
LEAF_NODE	273:35	273:35	10	;
SELECTION	274:3	275:4	9	
KEYWORD	274:3	274:3	10	if
LEAF_NODE	274:3	274:3	11	if
LEAF_NODE	274:6	274:6	10	(
CONDITION	274:7	274:7	10	TIFFWriteScanline ( out , outbuf , row , 0 ) < 0
EXPR	274:7	274:48	11	TIFFWriteScanline ( out , outbuf , row , 0 ) < 0
FUNCTION_CALL	274:7	274:44	12	TIFFWriteScanline ( out , outbuf , row , 0 )
CALLEE	274:7	274:7	13	TIFFWriteScanline
LEAF_NODE	274:7	274:7	14	TIFFWriteScanline
LEAF_NODE	274:24	274:24	13	(
ARGUMENT	274:25	274:25	13	out
FIELD	274:25	274:25	14	out
LEAF_NODE	274:25	274:25	15	out
LEAF_NODE	274:28	274:28	13	,
ARGUMENT	274:30	274:30	13	outbuf
FIELD	274:30	274:30	14	outbuf
LEAF_NODE	274:30	274:30	15	outbuf
LEAF_NODE	274:36	274:36	13	,
ARGUMENT	274:38	274:38	13	row
FIELD	274:38	274:38	14	row
LEAF_NODE	274:38	274:38	15	row
LEAF_NODE	274:41	274:41	13	,
ARGUMENT	274:43	274:43	13	0
FIELD	274:43	274:43	14	0
LEAF_NODE	274:43	274:43	15	0
LEAF_NODE	274:44	274:44	13	)
REL_OPERATOR	274:46	274:46	12	<
LEAF_NODE	274:46	274:46	13	<
FIELD	274:48	274:48	12	0
LEAF_NODE	274:48	274:48	13	0
LEAF_NODE	274:49	274:49	10	)
STATEMENTS	275:4	275:4	10	
JUMP_STATEMENT	275:4	275:9	11	break DESTINATION ;
KEYWORD	275:4	275:4	12	break
LEAF_NODE	275:4	275:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	275:9	275:9	12	;
LEAF_NODE	276:2	276:2	8	}
JUMP_STATEMENT	277:2	277:7	6	break DESTINATION ;
KEYWORD	277:2	277:2	7	break
LEAF_NODE	277:2	277:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	277:7	277:7	7	;
LEAF_NODE	278:1	278:1	6	case
LEAF_NODE	278:6	278:6	6	pack
LEAF_NODE	278:10	278:10	6	(
LEAF_NODE	278:11	278:11	6	PHOTOMETRIC_RGB
LEAF_NODE	278:26	278:26	6	,
LEAF_NODE	278:28	278:28	6	PLANARCONFIG_SEPARATE
LEAF_NODE	278:49	278:49	6	)
LEAF_NODE	278:50	278:50	6	:
LEAF_NODE	279:8	279:8	6	{
STATEMENTS	280:16	299:2	6	
SIMPLE_DECL	280:16	280:34	7	tmsize_t inbufsize ;
VAR_DECL	280:16	280:25	8	tmsize_t inbufsize
TYPE	280:16	280:16	9	tmsize_t
TYPE_NAME	280:16	280:16	10	tmsize_t
LEAF_NODE	280:16	280:16	11	tmsize_t
NAME	280:25	280:25	9	inbufsize
LEAF_NODE	280:25	280:25	10	inbufsize
LEAF_NODE	280:34	280:34	8	;
EXPR_STATEMENT	281:2	281:32	7	rowsize = TIFFScanlineSize ( in ) ;
EXPR	281:2	281:2	8	rowsize = TIFFScanlineSize ( in )
ASSIGN	281:2	281:12	9	rowsize = TIFFScanlineSize ( in )
LVAL	281:2	281:2	10	rowsize
FIELD	281:2	281:2	11	rowsize
LEAF_NODE	281:2	281:2	12	rowsize
ASSIGN_OP	281:10	281:10	10	=
LEAF_NODE	281:10	281:10	11	=
RVAL	281:12	281:12	10	TIFFScanlineSize ( in )
FUNCTION_CALL	281:12	281:31	11	TIFFScanlineSize ( in )
CALLEE	281:12	281:12	12	TIFFScanlineSize
LEAF_NODE	281:12	281:12	13	TIFFScanlineSize
LEAF_NODE	281:28	281:28	12	(
ARGUMENT	281:29	281:29	12	in
FIELD	281:29	281:29	13	in
LEAF_NODE	281:29	281:29	14	in
LEAF_NODE	281:31	281:31	12	)
LEAF_NODE	281:32	281:32	8	;
EXPR_STATEMENT	282:16	282:66	7	inbufsize = TIFFSafeMultiply ( tmsize_t , 3 , rowsize ) ;
EXPR	282:16	282:16	8	inbufsize = TIFFSafeMultiply ( tmsize_t , 3 , rowsize )
ASSIGN	282:16	282:28	9	inbufsize = TIFFSafeMultiply ( tmsize_t , 3 , rowsize )
LVAL	282:16	282:16	10	inbufsize
FIELD	282:16	282:16	11	inbufsize
LEAF_NODE	282:16	282:16	12	inbufsize
ASSIGN_OP	282:26	282:26	10	=
LEAF_NODE	282:26	282:26	11	=
RVAL	282:28	282:28	10	TIFFSafeMultiply ( tmsize_t , 3 , rowsize )
FUNCTION_CALL	282:28	282:65	11	TIFFSafeMultiply ( tmsize_t , 3 , rowsize )
CALLEE	282:28	282:28	12	TIFFSafeMultiply
LEAF_NODE	282:28	282:28	13	TIFFSafeMultiply
LEAF_NODE	282:44	282:44	12	(
ARGUMENT	282:45	282:45	12	tmsize_t
FIELD	282:45	282:45	13	tmsize_t
LEAF_NODE	282:45	282:45	14	tmsize_t
LEAF_NODE	282:53	282:53	12	,
ARGUMENT	282:55	282:55	12	3
FIELD	282:55	282:55	13	3
LEAF_NODE	282:55	282:55	14	3
LEAF_NODE	282:56	282:56	12	,
ARGUMENT	282:58	282:58	12	rowsize
FIELD	282:58	282:58	13	rowsize
LEAF_NODE	282:58	282:58	14	rowsize
LEAF_NODE	282:65	282:65	12	)
LEAF_NODE	282:66	282:66	8	;
EXPR_STATEMENT	283:2	283:49	7	inbuf = ( unsigned char * ) _TIFFmalloc ( inbufsize ) ;
EXPR	283:2	283:2	8	inbuf = ( unsigned char * ) _TIFFmalloc ( inbufsize )
ASSIGN	283:2	283:10	9	inbuf = ( unsigned char * ) _TIFFmalloc ( inbufsize )
LVAL	283:2	283:2	10	inbuf
FIELD	283:2	283:2	11	inbuf
LEAF_NODE	283:2	283:2	12	inbuf
ASSIGN_OP	283:8	283:8	10	=
LEAF_NODE	283:8	283:8	11	=
RVAL	283:10	283:27	10	( unsigned char * ) _TIFFmalloc ( inbufsize )
LEAF_NODE	283:10	283:10	11	(
TYPE_NAME	283:11	283:20	11	unsigned char
LEAF_NODE	283:11	283:11	12	unsigned
LEAF_NODE	283:20	283:20	12	char
LEAF_NODE	283:25	283:25	11	*
LEAF_NODE	283:26	283:26	11	)
FUNCTION_CALL	283:27	283:48	11	_TIFFmalloc ( inbufsize )
CALLEE	283:27	283:27	12	_TIFFmalloc
LEAF_NODE	283:27	283:27	13	_TIFFmalloc
LEAF_NODE	283:38	283:38	12	(
ARGUMENT	283:39	283:39	12	inbufsize
FIELD	283:39	283:39	13	inbufsize
LEAF_NODE	283:39	283:39	14	inbufsize
LEAF_NODE	283:48	283:48	12	)
LEAF_NODE	283:49	283:49	8	;
SELECTION	284:16	285:16	7	
KEYWORD	284:16	284:16	8	if
LEAF_NODE	284:16	284:16	9	if
LEAF_NODE	284:18	284:18	8	(
CONDITION	284:20	284:20	8	! inbuf
EXPR	284:20	284:20	9	! inbuf
UNARY_EXPR	284:20	284:21	10	! inbuf
UNARY_OPERATOR	284:20	284:20	11	!
LEAF_NODE	284:20	284:20	12	!
FIELD	284:21	284:21	11	inbuf
LEAF_NODE	284:21	284:21	12	inbuf
LEAF_NODE	284:27	284:27	8	)
STATEMENTS	285:16	288:16	8	
LEAF_NODE	285:16	285:16	9	{
STATEMENTS	286:20	287:20	9	
EXPR_STATEMENT	286:20	286:54	10	fprintf ( stderr , "Out of memory\n" ) ;
EXPR	286:20	286:20	11	fprintf ( stderr , "Out of memory\n" )
FUNCTION_CALL	286:20	286:53	12	fprintf ( stderr , "Out of memory\n" )
CALLEE	286:20	286:20	13	fprintf
LEAF_NODE	286:20	286:20	14	fprintf
LEAF_NODE	286:27	286:27	13	(
ARGUMENT	286:28	286:28	13	stderr
FIELD	286:28	286:28	14	stderr
LEAF_NODE	286:28	286:28	15	stderr
LEAF_NODE	286:34	286:34	13	,
ARGUMENT	286:36	286:36	13	"Out of memory\n"
FIELD	286:36	286:36	14	"Out of memory\n"
LEAF_NODE	286:36	286:36	15	"Out of memory\n"
LEAF_NODE	286:53	286:53	13	)
LEAF_NODE	286:54	286:54	11	;
JUMP_STATEMENT	287:20	287:38	10	goto tiff2bw_error ;
KEYWORD	287:20	287:20	11	goto
LEAF_NODE	287:20	287:20	12	goto
DESTINATION	287:25	287:25	11	tiff2bw_error
LEAF_NODE	287:25	287:25	12	tiff2bw_error
LEAF_NODE	287:38	287:38	11	;
LEAF_NODE	288:16	288:16	9	}
ITERATION	289:2	289:32	7	
KEYWORD	289:2	289:2	8	for
LEAF_NODE	289:2	289:2	9	for
LEAF_NODE	289:6	289:6	8	(
FOR_INIT	289:7	289:14	8	row = 0 ;
EXPR	289:7	289:7	9	row = 0
ASSIGN	289:7	289:13	10	row = 0
LVAL	289:7	289:7	11	row
FIELD	289:7	289:7	12	row
LEAF_NODE	289:7	289:7	13	row
ASSIGN_OP	289:11	289:11	11	=
LEAF_NODE	289:11	289:11	12	=
RVAL	289:13	289:13	11	0
FIELD	289:13	289:13	12	0
LEAF_NODE	289:13	289:13	13	0
LEAF_NODE	289:14	289:14	9	;
CONDITION	289:16	289:16	8	row < h
EXPR	289:16	289:22	9	row < h
FIELD	289:16	289:16	10	row
LEAF_NODE	289:16	289:16	11	row
REL_OPERATOR	289:20	289:20	10	<
LEAF_NODE	289:20	289:20	11	<
FIELD	289:22	289:22	10	h
LEAF_NODE	289:22	289:22	11	h
LEAF_NODE	289:23	289:23	8	;
FOR_EXPR	289:25	289:25	8	row ++
EXPR	289:25	289:25	9	row ++
FIELD	289:25	289:28	10	row ++
LEAF_NODE	289:25	289:25	11	row
LEAF_NODE	289:28	289:28	11	++
LEAF_NODE	289:30	289:30	8	)
STATEMENTS	289:32	298:2	8	
LEAF_NODE	289:32	289:32	9	{
STATEMENTS	290:3	296:3	9	
ITERATION	290:3	291:4	10	
KEYWORD	290:3	290:3	11	for
LEAF_NODE	290:3	290:3	12	for
LEAF_NODE	290:7	290:7	11	(
FOR_INIT	290:8	290:13	11	s = 0 ;
EXPR	290:8	290:8	12	s = 0
ASSIGN	290:8	290:12	13	s = 0
LVAL	290:8	290:8	14	s
FIELD	290:8	290:8	15	s
LEAF_NODE	290:8	290:8	16	s
ASSIGN_OP	290:10	290:10	14	=
LEAF_NODE	290:10	290:10	15	=
RVAL	290:12	290:12	14	0
FIELD	290:12	290:12	15	0
LEAF_NODE	290:12	290:12	16	0
LEAF_NODE	290:13	290:13	12	;
CONDITION	290:15	290:15	11	s < 3
EXPR	290:15	290:19	12	s < 3
FIELD	290:15	290:15	13	s
LEAF_NODE	290:15	290:15	14	s
REL_OPERATOR	290:17	290:17	13	<
LEAF_NODE	290:17	290:17	14	<
FIELD	290:19	290:19	13	3
LEAF_NODE	290:19	290:19	14	3
LEAF_NODE	290:20	290:20	11	;
FOR_EXPR	290:22	290:22	11	s ++
EXPR	290:22	290:22	12	s ++
FIELD	290:22	290:23	13	s ++
LEAF_NODE	290:22	290:22	14	s
LEAF_NODE	290:23	290:23	14	++
LEAF_NODE	290:25	290:25	11	)
STATEMENTS	291:4	291:4	11	
SELECTION	291:4	293:40	12	
KEYWORD	291:4	291:4	13	if
LEAF_NODE	291:4	291:4	14	if
LEAF_NODE	291:7	291:7	13	(
CONDITION	291:8	291:8	13	TIFFReadScanline ( in , inbuf + s * rowsize , row , s ) < 0
EXPR	291:8	292:35	14	TIFFReadScanline ( in , inbuf + s * rowsize , row , s ) < 0
FUNCTION_CALL	291:8	292:31	15	TIFFReadScanline ( in , inbuf + s * rowsize , row , s )
CALLEE	291:8	291:8	16	TIFFReadScanline
LEAF_NODE	291:8	291:8	17	TIFFReadScanline
LEAF_NODE	291:24	291:24	16	(
ARGUMENT	291:25	291:25	16	in
FIELD	291:25	291:25	17	in
LEAF_NODE	291:25	291:25	18	in
LEAF_NODE	291:27	291:27	16	,
ARGUMENT	292:8	292:16	16	inbuf + s * rowsize
FIELD	292:8	292:8	17	inbuf
LEAF_NODE	292:8	292:8	18	inbuf
LEAF_NODE	292:13	292:13	17	+
FIELD	292:14	292:14	17	s
LEAF_NODE	292:14	292:14	18	s
LEAF_NODE	292:15	292:15	17	*
FIELD	292:16	292:16	17	rowsize
LEAF_NODE	292:16	292:16	18	rowsize
LEAF_NODE	292:23	292:23	16	,
ARGUMENT	292:25	292:25	16	row
FIELD	292:25	292:25	17	row
LEAF_NODE	292:25	292:25	18	row
LEAF_NODE	292:28	292:28	16	,
ARGUMENT	292:30	292:30	16	s
FIELD	292:30	292:30	17	s
LEAF_NODE	292:30	292:30	18	s
LEAF_NODE	292:31	292:31	16	)
REL_OPERATOR	292:33	292:33	15	<
LEAF_NODE	292:33	292:33	16	<
FIELD	292:35	292:35	15	0
LEAF_NODE	292:35	292:35	16	0
LEAF_NODE	292:36	292:36	13	)
STATEMENTS	293:40	293:40	13	
JUMP_STATEMENT	293:40	293:58	14	goto tiff2bw_error ;
KEYWORD	293:40	293:40	15	goto
LEAF_NODE	293:40	293:40	16	goto
DESTINATION	293:45	293:45	15	tiff2bw_error
LEAF_NODE	293:45	293:45	16	tiff2bw_error
LEAF_NODE	293:58	293:58	15	;
EXPR_STATEMENT	294:3	295:48	10	compresssep ( outbuf , inbuf , inbuf + rowsize , inbuf + 2 * rowsize , w ) ;
EXPR	294:3	294:3	11	compresssep ( outbuf , inbuf , inbuf + rowsize , inbuf + 2 * rowsize , w )
FUNCTION_CALL	294:3	295:47	12	compresssep ( outbuf , inbuf , inbuf + rowsize , inbuf + 2 * rowsize , w )
CALLEE	294:3	294:3	13	compresssep
LEAF_NODE	294:3	294:3	14	compresssep
LEAF_NODE	294:14	294:14	13	(
ARGUMENT	294:15	294:15	13	outbuf
FIELD	294:15	294:15	14	outbuf
LEAF_NODE	294:15	294:15	15	outbuf
LEAF_NODE	294:21	294:21	13	,
ARGUMENT	295:7	295:7	13	inbuf
FIELD	295:7	295:7	14	inbuf
LEAF_NODE	295:7	295:7	15	inbuf
LEAF_NODE	295:12	295:12	13	,
ARGUMENT	295:14	295:20	13	inbuf + rowsize
FIELD	295:14	295:14	14	inbuf
LEAF_NODE	295:14	295:14	15	inbuf
LEAF_NODE	295:19	295:19	14	+
FIELD	295:20	295:20	14	rowsize
LEAF_NODE	295:20	295:20	15	rowsize
LEAF_NODE	295:27	295:27	13	,
ARGUMENT	295:29	295:37	13	inbuf + 2 * rowsize
FIELD	295:29	295:29	14	inbuf
LEAF_NODE	295:29	295:29	15	inbuf
LEAF_NODE	295:34	295:34	14	+
FIELD	295:35	295:35	14	2
LEAF_NODE	295:35	295:35	15	2
LEAF_NODE	295:36	295:36	14	*
FIELD	295:37	295:37	14	rowsize
LEAF_NODE	295:37	295:37	15	rowsize
LEAF_NODE	295:44	295:44	13	,
ARGUMENT	295:46	295:46	13	w
FIELD	295:46	295:46	14	w
LEAF_NODE	295:46	295:46	15	w
LEAF_NODE	295:47	295:47	13	)
LEAF_NODE	295:48	295:48	11	;
SELECTION	296:3	297:4	10	
KEYWORD	296:3	296:3	11	if
LEAF_NODE	296:3	296:3	12	if
LEAF_NODE	296:6	296:6	11	(
CONDITION	296:7	296:7	11	TIFFWriteScanline ( out , outbuf , row , 0 ) < 0
EXPR	296:7	296:48	12	TIFFWriteScanline ( out , outbuf , row , 0 ) < 0
FUNCTION_CALL	296:7	296:44	13	TIFFWriteScanline ( out , outbuf , row , 0 )
CALLEE	296:7	296:7	14	TIFFWriteScanline
LEAF_NODE	296:7	296:7	15	TIFFWriteScanline
LEAF_NODE	296:24	296:24	14	(
ARGUMENT	296:25	296:25	14	out
FIELD	296:25	296:25	15	out
LEAF_NODE	296:25	296:25	16	out
LEAF_NODE	296:28	296:28	14	,
ARGUMENT	296:30	296:30	14	outbuf
FIELD	296:30	296:30	15	outbuf
LEAF_NODE	296:30	296:30	16	outbuf
LEAF_NODE	296:36	296:36	14	,
ARGUMENT	296:38	296:38	14	row
FIELD	296:38	296:38	15	row
LEAF_NODE	296:38	296:38	16	row
LEAF_NODE	296:41	296:41	14	,
ARGUMENT	296:43	296:43	14	0
FIELD	296:43	296:43	15	0
LEAF_NODE	296:43	296:43	16	0
LEAF_NODE	296:44	296:44	14	)
REL_OPERATOR	296:46	296:46	13	<
LEAF_NODE	296:46	296:46	14	<
FIELD	296:48	296:48	13	0
LEAF_NODE	296:48	296:48	14	0
LEAF_NODE	296:49	296:49	11	)
STATEMENTS	297:4	297:4	11	
JUMP_STATEMENT	297:4	297:9	12	break DESTINATION ;
KEYWORD	297:4	297:4	13	break
LEAF_NODE	297:4	297:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	297:9	297:9	13	;
LEAF_NODE	298:2	298:2	9	}
JUMP_STATEMENT	299:2	299:7	7	break DESTINATION ;
KEYWORD	299:2	299:2	8	break
LEAF_NODE	299:2	299:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	299:7	299:7	8	;
LEAF_NODE	300:8	300:8	6	}
LEAF_NODE	301:1	301:1	5	}
SELECTION	303:8	304:16	3	
KEYWORD	303:8	303:8	4	if
LEAF_NODE	303:8	303:8	5	if
LEAF_NODE	303:11	303:11	4	(
CONDITION	303:12	303:12	4	inbuf
EXPR	303:12	303:12	5	inbuf
FIELD	303:12	303:12	6	inbuf
LEAF_NODE	303:12	303:12	7	inbuf
LEAF_NODE	303:17	303:17	4	)
STATEMENTS	304:16	304:16	4	
EXPR_STATEMENT	304:16	304:32	5	_TIFFfree ( inbuf ) ;
EXPR	304:16	304:16	6	_TIFFfree ( inbuf )
FUNCTION_CALL	304:16	304:31	7	_TIFFfree ( inbuf )
CALLEE	304:16	304:16	8	_TIFFfree
LEAF_NODE	304:16	304:16	9	_TIFFfree
LEAF_NODE	304:25	304:25	8	(
ARGUMENT	304:26	304:26	8	inbuf
FIELD	304:26	304:26	9	inbuf
LEAF_NODE	304:26	304:26	10	inbuf
LEAF_NODE	304:31	304:31	8	)
LEAF_NODE	304:32	304:32	6	;
SELECTION	305:8	306:16	3	
KEYWORD	305:8	305:8	4	if
LEAF_NODE	305:8	305:8	5	if
LEAF_NODE	305:11	305:11	4	(
CONDITION	305:12	305:12	4	outbuf
EXPR	305:12	305:12	5	outbuf
FIELD	305:12	305:12	6	outbuf
LEAF_NODE	305:12	305:12	7	outbuf
LEAF_NODE	305:18	305:18	4	)
STATEMENTS	306:16	306:16	4	
EXPR_STATEMENT	306:16	306:33	5	_TIFFfree ( outbuf ) ;
EXPR	306:16	306:16	6	_TIFFfree ( outbuf )
FUNCTION_CALL	306:16	306:32	7	_TIFFfree ( outbuf )
CALLEE	306:16	306:16	8	_TIFFfree
LEAF_NODE	306:16	306:16	9	_TIFFfree
LEAF_NODE	306:25	306:25	8	(
ARGUMENT	306:26	306:26	8	outbuf
FIELD	306:26	306:26	9	outbuf
LEAF_NODE	306:26	306:26	10	outbuf
LEAF_NODE	306:32	306:32	8	)
LEAF_NODE	306:33	306:33	6	;
EXPR_STATEMENT	307:8	307:21	3	TIFFClose ( in ) ;
EXPR	307:8	307:8	4	TIFFClose ( in )
FUNCTION_CALL	307:8	307:20	5	TIFFClose ( in )
CALLEE	307:8	307:8	6	TIFFClose
LEAF_NODE	307:8	307:8	7	TIFFClose
LEAF_NODE	307:17	307:17	6	(
ARGUMENT	307:18	307:18	6	in
FIELD	307:18	307:18	7	in
LEAF_NODE	307:18	307:18	8	in
LEAF_NODE	307:20	307:20	6	)
LEAF_NODE	307:21	307:21	4	;
EXPR_STATEMENT	308:1	308:15	3	TIFFClose ( out ) ;
EXPR	308:1	308:1	4	TIFFClose ( out )
FUNCTION_CALL	308:1	308:14	5	TIFFClose ( out )
CALLEE	308:1	308:1	6	TIFFClose
LEAF_NODE	308:1	308:1	7	TIFFClose
LEAF_NODE	308:10	308:10	6	(
ARGUMENT	308:11	308:11	6	out
FIELD	308:11	308:11	7	out
LEAF_NODE	308:11	308:11	8	out
LEAF_NODE	308:14	308:14	6	)
LEAF_NODE	308:15	308:15	4	;
JUMP_STATEMENT	309:1	309:11	3	return ( 0 ) ;
KEYWORD	309:1	309:1	4	return
LEAF_NODE	309:1	309:1	5	return
DESTINATION	309:8	309:8	4	( 0 )
EXPR	309:8	309:10	5	( 0 )
LEAF_NODE	309:8	309:8	6	(
FIELD	309:9	309:9	6	0
LEAF_NODE	309:9	309:9	7	0
LEAF_NODE	309:10	309:10	6	)
LEAF_NODE	309:11	309:11	4	;
LABEL	311:1	311:14	3	tiff2bw_error :
LEAF_NODE	311:1	311:1	4	tiff2bw_error
LEAF_NODE	311:14	311:14	4	:
SELECTION	312:8	313:16	3	
KEYWORD	312:8	312:8	4	if
LEAF_NODE	312:8	312:8	5	if
LEAF_NODE	312:11	312:11	4	(
CONDITION	312:12	312:12	4	inbuf
EXPR	312:12	312:12	5	inbuf
FIELD	312:12	312:12	6	inbuf
LEAF_NODE	312:12	312:12	7	inbuf
LEAF_NODE	312:17	312:17	4	)
STATEMENTS	313:16	313:16	4	
EXPR_STATEMENT	313:16	313:32	5	_TIFFfree ( inbuf ) ;
EXPR	313:16	313:16	6	_TIFFfree ( inbuf )
FUNCTION_CALL	313:16	313:31	7	_TIFFfree ( inbuf )
CALLEE	313:16	313:16	8	_TIFFfree
LEAF_NODE	313:16	313:16	9	_TIFFfree
LEAF_NODE	313:25	313:25	8	(
ARGUMENT	313:26	313:26	8	inbuf
FIELD	313:26	313:26	9	inbuf
LEAF_NODE	313:26	313:26	10	inbuf
LEAF_NODE	313:31	313:31	8	)
LEAF_NODE	313:32	313:32	6	;
SELECTION	314:8	315:16	3	
KEYWORD	314:8	314:8	4	if
LEAF_NODE	314:8	314:8	5	if
LEAF_NODE	314:11	314:11	4	(
CONDITION	314:12	314:12	4	outbuf
EXPR	314:12	314:12	5	outbuf
FIELD	314:12	314:12	6	outbuf
LEAF_NODE	314:12	314:12	7	outbuf
LEAF_NODE	314:18	314:18	4	)
STATEMENTS	315:16	315:16	4	
EXPR_STATEMENT	315:16	315:33	5	_TIFFfree ( outbuf ) ;
EXPR	315:16	315:16	6	_TIFFfree ( outbuf )
FUNCTION_CALL	315:16	315:32	7	_TIFFfree ( outbuf )
CALLEE	315:16	315:16	8	_TIFFfree
LEAF_NODE	315:16	315:16	9	_TIFFfree
LEAF_NODE	315:25	315:25	8	(
ARGUMENT	315:26	315:26	8	outbuf
FIELD	315:26	315:26	9	outbuf
LEAF_NODE	315:26	315:26	10	outbuf
LEAF_NODE	315:32	315:32	8	)
LEAF_NODE	315:33	315:33	6	;
SELECTION	316:8	317:16	3	
KEYWORD	316:8	316:8	4	if
LEAF_NODE	316:8	316:8	5	if
LEAF_NODE	316:11	316:11	4	(
CONDITION	316:12	316:12	4	out
EXPR	316:12	316:12	5	out
FIELD	316:12	316:12	6	out
LEAF_NODE	316:12	316:12	7	out
LEAF_NODE	316:15	316:15	4	)
STATEMENTS	317:16	317:16	4	
EXPR_STATEMENT	317:16	317:30	5	TIFFClose ( out ) ;
EXPR	317:16	317:16	6	TIFFClose ( out )
FUNCTION_CALL	317:16	317:29	7	TIFFClose ( out )
CALLEE	317:16	317:16	8	TIFFClose
LEAF_NODE	317:16	317:16	9	TIFFClose
LEAF_NODE	317:25	317:25	8	(
ARGUMENT	317:26	317:26	8	out
FIELD	317:26	317:26	9	out
LEAF_NODE	317:26	317:26	10	out
LEAF_NODE	317:29	317:29	8	)
LEAF_NODE	317:30	317:30	6	;
SELECTION	318:8	319:16	3	
KEYWORD	318:8	318:8	4	if
LEAF_NODE	318:8	318:8	5	if
LEAF_NODE	318:11	318:11	4	(
CONDITION	318:12	318:12	4	in
EXPR	318:12	318:12	5	in
FIELD	318:12	318:12	6	in
LEAF_NODE	318:12	318:12	7	in
LEAF_NODE	318:14	318:14	4	)
STATEMENTS	319:16	319:16	4	
EXPR_STATEMENT	319:16	319:29	5	TIFFClose ( in ) ;
EXPR	319:16	319:16	6	TIFFClose ( in )
FUNCTION_CALL	319:16	319:28	7	TIFFClose ( in )
CALLEE	319:16	319:16	8	TIFFClose
LEAF_NODE	319:16	319:16	9	TIFFClose
LEAF_NODE	319:25	319:25	8	(
ARGUMENT	319:26	319:26	8	in
FIELD	319:26	319:26	9	in
LEAF_NODE	319:26	319:26	10	in
LEAF_NODE	319:28	319:28	8	)
LEAF_NODE	319:29	319:29	6	;
JUMP_STATEMENT	320:8	320:19	3	return ( - 1 ) ;
KEYWORD	320:8	320:8	4	return
LEAF_NODE	320:8	320:8	5	return
DESTINATION	320:15	320:15	4	( - 1 )
EXPR	320:15	320:18	5	( - 1 )
LEAF_NODE	320:15	320:15	6	(
UNARY_EXPR	320:16	320:17	6	- 1
UNARY_OPERATOR	320:16	320:16	7	-
LEAF_NODE	320:16	320:16	8	-
FIELD	320:17	320:17	7	1
LEAF_NODE	320:17	320:17	8	1
LEAF_NODE	320:18	320:18	6	)
LEAF_NODE	320:19	320:19	4	;
LEAF_NODE	321:0	321:0	2	}
FUNCTION_DEF	323:0	358:0	1	
RETURN_TYPE	323:0	323:7	2	static int
LEAF_NODE	323:0	323:0	3	static
TYPE_NAME	323:7	323:7	3	int
LEAF_NODE	323:7	323:7	4	int
FUNCTION_NAME	324:0	324:0	2	processCompressOptions
LEAF_NODE	324:0	324:0	3	processCompressOptions
PARAMETER_LIST	324:22	324:32	2	( char * opt )
LEAF_NODE	324:22	324:22	3	(
PARAMETER_DECL	324:23	324:29	3	char * opt
TYPE	324:23	324:27	4	char *
TYPE_NAME	324:23	324:23	5	char
LEAF_NODE	324:23	324:23	6	char
POINTER	324:27	324:27	5	*
LEAF_NODE	324:27	324:27	6	*
NAME	324:29	324:29	4	opt
LEAF_NODE	324:29	324:29	5	opt
LEAF_NODE	324:32	324:32	3	)
LEAF_NODE	325:0	325:0	2	{
STATEMENTS	326:1	357:1	2	
SELECTION	326:1	327:2	3	
KEYWORD	326:1	326:1	4	if
LEAF_NODE	326:1	326:1	5	if
LEAF_NODE	326:4	326:4	4	(
CONDITION	326:5	326:5	4	streq ( opt , "none" )
EXPR	326:5	326:5	5	streq ( opt , "none" )
FUNCTION_CALL	326:5	326:22	6	streq ( opt , "none" )
CALLEE	326:5	326:5	7	streq
LEAF_NODE	326:5	326:5	8	streq
LEAF_NODE	326:10	326:10	7	(
ARGUMENT	326:11	326:11	7	opt
FIELD	326:11	326:11	8	opt
LEAF_NODE	326:11	326:11	9	opt
LEAF_NODE	326:14	326:14	7	,
ARGUMENT	326:16	326:16	7	"none"
FIELD	326:16	326:16	8	"none"
LEAF_NODE	326:16	326:16	9	"none"
LEAF_NODE	326:22	326:22	7	)
LEAF_NODE	326:23	326:23	4	)
STATEMENTS	327:2	327:2	4	
EXPR_STATEMENT	327:2	327:32	5	compression = COMPRESSION_NONE ;
EXPR	327:2	327:2	6	compression = COMPRESSION_NONE
ASSIGN	327:2	327:16	7	compression = COMPRESSION_NONE
LVAL	327:2	327:2	8	compression
FIELD	327:2	327:2	9	compression
LEAF_NODE	327:2	327:2	10	compression
ASSIGN_OP	327:14	327:14	8	=
LEAF_NODE	327:14	327:14	9	=
RVAL	327:16	327:16	8	COMPRESSION_NONE
FIELD	327:16	327:16	9	COMPRESSION_NONE
LEAF_NODE	327:16	327:16	10	COMPRESSION_NONE
LEAF_NODE	327:32	327:32	6	;
SELECTION	328:1	328:6	3	
KEYWORD	328:1	328:1	4	else
LEAF_NODE	328:1	328:1	5	else
STATEMENTS	328:6	328:6	4	
SELECTION	328:6	329:2	5	
KEYWORD	328:6	328:6	6	if
LEAF_NODE	328:6	328:6	7	if
LEAF_NODE	328:9	328:9	6	(
CONDITION	328:10	328:10	6	streq ( opt , "packbits" )
EXPR	328:10	328:10	7	streq ( opt , "packbits" )
FUNCTION_CALL	328:10	328:31	8	streq ( opt , "packbits" )
CALLEE	328:10	328:10	9	streq
LEAF_NODE	328:10	328:10	10	streq
LEAF_NODE	328:15	328:15	9	(
ARGUMENT	328:16	328:16	9	opt
FIELD	328:16	328:16	10	opt
LEAF_NODE	328:16	328:16	11	opt
LEAF_NODE	328:19	328:19	9	,
ARGUMENT	328:21	328:21	9	"packbits"
FIELD	328:21	328:21	10	"packbits"
LEAF_NODE	328:21	328:21	11	"packbits"
LEAF_NODE	328:31	328:31	9	)
LEAF_NODE	328:32	328:32	6	)
STATEMENTS	329:2	329:2	6	
EXPR_STATEMENT	329:2	329:36	7	compression = COMPRESSION_PACKBITS ;
EXPR	329:2	329:2	8	compression = COMPRESSION_PACKBITS
ASSIGN	329:2	329:16	9	compression = COMPRESSION_PACKBITS
LVAL	329:2	329:2	10	compression
FIELD	329:2	329:2	11	compression
LEAF_NODE	329:2	329:2	12	compression
ASSIGN_OP	329:14	329:14	10	=
LEAF_NODE	329:14	329:14	11	=
RVAL	329:16	329:16	10	COMPRESSION_PACKBITS
FIELD	329:16	329:16	11	COMPRESSION_PACKBITS
LEAF_NODE	329:16	329:16	12	COMPRESSION_PACKBITS
LEAF_NODE	329:36	329:36	8	;
SELECTION	330:1	330:6	3	
KEYWORD	330:1	330:1	4	else
LEAF_NODE	330:1	330:1	5	else
STATEMENTS	330:6	330:6	4	
SELECTION	330:6	330:34	5	
KEYWORD	330:6	330:6	6	if
LEAF_NODE	330:6	330:6	7	if
LEAF_NODE	330:9	330:9	6	(
CONDITION	330:10	330:10	6	strneq ( opt , "jpeg" , 4 )
EXPR	330:10	330:10	7	strneq ( opt , "jpeg" , 4 )
FUNCTION_CALL	330:10	330:31	8	strneq ( opt , "jpeg" , 4 )
CALLEE	330:10	330:10	9	strneq
LEAF_NODE	330:10	330:10	10	strneq
LEAF_NODE	330:16	330:16	9	(
ARGUMENT	330:17	330:17	9	opt
FIELD	330:17	330:17	10	opt
LEAF_NODE	330:17	330:17	11	opt
LEAF_NODE	330:20	330:20	9	,
ARGUMENT	330:22	330:22	9	"jpeg"
FIELD	330:22	330:22	10	"jpeg"
LEAF_NODE	330:22	330:22	11	"jpeg"
LEAF_NODE	330:28	330:28	9	,
ARGUMENT	330:30	330:30	9	4
FIELD	330:30	330:30	10	4
LEAF_NODE	330:30	330:30	11	4
LEAF_NODE	330:31	330:31	9	)
LEAF_NODE	330:32	330:32	6	)
STATEMENTS	330:34	345:1	6	
LEAF_NODE	330:34	330:34	7	{
STATEMENTS	331:2	334:16	7	
SIMPLE_DECL	331:2	331:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	331:2	331:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	331:2	331:6	10	char *
TYPE_NAME	331:2	331:2	11	char
LEAF_NODE	331:2	331:2	12	char
POINTER	331:6	331:6	11	*
LEAF_NODE	331:6	331:6	12	*
NAME	331:8	331:8	10	cp
LEAF_NODE	331:8	331:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	331:8	331:8	10	cp = strchr ( opt , ':' )
ASSIGN	331:8	331:13	11	cp = strchr ( opt , ':' )
LVAL	331:8	331:8	12	cp
NAME	331:8	331:8	13	cp
LEAF_NODE	331:8	331:8	14	cp
ASSIGN_OP	331:11	331:11	12	=
LEAF_NODE	331:11	331:11	13	=
RVAL	331:13	331:13	12	strchr ( opt , ':' )
FUNCTION_CALL	331:13	331:28	13	strchr ( opt , ':' )
CALLEE	331:13	331:13	14	strchr
LEAF_NODE	331:13	331:13	15	strchr
LEAF_NODE	331:19	331:19	14	(
ARGUMENT	331:20	331:20	14	opt
FIELD	331:20	331:20	15	opt
LEAF_NODE	331:20	331:20	16	opt
LEAF_NODE	331:23	331:23	14	,
ARGUMENT	331:25	331:25	14	':'
FIELD	331:25	331:25	15	':'
LEAF_NODE	331:25	331:25	16	':'
LEAF_NODE	331:28	331:28	14	)
LEAF_NODE	331:29	331:29	9	;
EXPR_STATEMENT	333:16	333:46	8	compression = COMPRESSION_JPEG ;
EXPR	333:16	333:16	9	compression = COMPRESSION_JPEG
ASSIGN	333:16	333:30	10	compression = COMPRESSION_JPEG
LVAL	333:16	333:16	11	compression
FIELD	333:16	333:16	12	compression
LEAF_NODE	333:16	333:16	13	compression
ASSIGN_OP	333:28	333:28	11	=
LEAF_NODE	333:28	333:28	12	=
RVAL	333:30	333:30	11	COMPRESSION_JPEG
FIELD	333:30	333:30	12	COMPRESSION_JPEG
LEAF_NODE	333:30	333:30	13	COMPRESSION_JPEG
LEAF_NODE	333:46	333:46	9	;
ITERATION	334:16	335:16	8	
KEYWORD	334:16	334:16	9	while
LEAF_NODE	334:16	334:16	10	while
LEAF_NODE	334:21	334:21	9	(
CONDITION	334:23	334:23	9	cp
EXPR	334:23	334:23	10	cp
FIELD	334:23	334:23	11	cp
LEAF_NODE	334:23	334:23	12	cp
LEAF_NODE	334:26	334:26	9	)
STATEMENTS	335:16	344:16	9	
LEAF_NODE	335:16	335:16	10	{
STATEMENTS	336:20	343:20	10	
SELECTION	336:20	337:3	11	
KEYWORD	336:20	336:20	12	if
LEAF_NODE	336:20	336:20	13	if
LEAF_NODE	336:23	336:23	12	(
CONDITION	336:24	336:24	12	isdigit ( ( int ) cp [ 1 ] )
EXPR	336:24	336:24	13	isdigit ( ( int ) cp [ 1 ] )
FUNCTION_CALL	336:24	336:42	14	isdigit ( ( int ) cp [ 1 ] )
CALLEE	336:24	336:24	15	isdigit
LEAF_NODE	336:24	336:24	16	isdigit
LEAF_NODE	336:31	336:31	15	(
ARGUMENT	336:32	336:37	15	( int ) cp [ 1 ]
LEAF_NODE	336:32	336:32	16	(
TYPE_NAME	336:33	336:33	16	int
LEAF_NODE	336:33	336:33	17	int
LEAF_NODE	336:36	336:36	16	)
FIELD	336:37	336:41	16	cp [ 1 ]
LEAF_NODE	336:37	336:37	17	cp
LEAF_NODE	336:39	336:39	17	[
EXPR	336:40	336:40	17	1
FIELD	336:40	336:40	18	1
LEAF_NODE	336:40	336:40	19	1
LEAF_NODE	336:41	336:41	17	]
LEAF_NODE	336:42	336:42	15	)
LEAF_NODE	336:43	336:43	12	)
STATEMENTS	337:3	337:3	12	
EXPR_STATEMENT	337:3	337:23	13	quality = atoi ( cp + 1 ) ;
EXPR	337:3	337:3	14	quality = atoi ( cp + 1 )
ASSIGN	337:3	337:13	15	quality = atoi ( cp + 1 )
LVAL	337:3	337:3	16	quality
FIELD	337:3	337:3	17	quality
LEAF_NODE	337:3	337:3	18	quality
ASSIGN_OP	337:11	337:11	16	=
LEAF_NODE	337:11	337:11	17	=
RVAL	337:13	337:13	16	atoi ( cp + 1 )
FUNCTION_CALL	337:13	337:22	17	atoi ( cp + 1 )
CALLEE	337:13	337:13	18	atoi
LEAF_NODE	337:13	337:13	19	atoi
LEAF_NODE	337:17	337:17	18	(
ARGUMENT	337:18	337:21	18	cp + 1
FIELD	337:18	337:18	19	cp
LEAF_NODE	337:18	337:18	20	cp
LEAF_NODE	337:20	337:20	19	+
FIELD	337:21	337:21	19	1
LEAF_NODE	337:21	337:21	20	1
LEAF_NODE	337:22	337:22	18	)
LEAF_NODE	337:23	337:23	14	;
SELECTION	338:20	338:25	11	
KEYWORD	338:20	338:20	12	else
LEAF_NODE	338:20	338:20	13	else
STATEMENTS	338:25	338:25	12	
SELECTION	338:25	339:3	13	
KEYWORD	338:25	338:25	14	if
LEAF_NODE	338:25	338:25	15	if
LEAF_NODE	338:28	338:28	14	(
CONDITION	338:29	338:29	14	cp [ 1 ] == 'r'
EXPR	338:29	338:38	15	cp [ 1 ] == 'r'
FIELD	338:29	338:33	16	cp [ 1 ]
LEAF_NODE	338:29	338:29	17	cp
LEAF_NODE	338:31	338:31	17	[
EXPR	338:32	338:32	17	1
FIELD	338:32	338:32	18	1
LEAF_NODE	338:32	338:32	19	1
LEAF_NODE	338:33	338:33	17	]
EQ_OPERATOR	338:35	338:35	16	==
LEAF_NODE	338:35	338:35	17	==
FIELD	338:38	338:38	16	'r'
LEAF_NODE	338:38	338:38	17	'r'
LEAF_NODE	338:42	338:42	14	)
STATEMENTS	339:3	339:3	14	
EXPR_STATEMENT	339:3	339:36	15	jpegcolormode = JPEGCOLORMODE_RAW ;
EXPR	339:3	339:3	16	jpegcolormode = JPEGCOLORMODE_RAW
ASSIGN	339:3	339:19	17	jpegcolormode = JPEGCOLORMODE_RAW
LVAL	339:3	339:3	18	jpegcolormode
FIELD	339:3	339:3	19	jpegcolormode
LEAF_NODE	339:3	339:3	20	jpegcolormode
ASSIGN_OP	339:17	339:17	18	=
LEAF_NODE	339:17	339:17	19	=
RVAL	339:19	339:19	18	JPEGCOLORMODE_RAW
FIELD	339:19	339:19	19	JPEGCOLORMODE_RAW
LEAF_NODE	339:19	339:19	20	JPEGCOLORMODE_RAW
LEAF_NODE	339:36	339:36	16	;
SELECTION	340:20	341:24	11	
KEYWORD	340:20	340:20	12	else
LEAF_NODE	340:20	340:20	13	else
STATEMENTS	341:24	341:24	12	
EXPR_STATEMENT	341:24	341:31	13	usage ( ) ;
EXPR	341:24	341:24	14	usage ( )
FUNCTION_CALL	341:24	341:30	15	usage ( )
CALLEE	341:24	341:24	16	usage
LEAF_NODE	341:24	341:24	17	usage
LEAF_NODE	341:29	341:29	16	(
LEAF_NODE	341:30	341:30	16	)
LEAF_NODE	341:31	341:31	14	;
EXPR_STATEMENT	343:20	343:41	11	cp = strchr ( cp + 1 , ':' ) ;
EXPR	343:20	343:20	12	cp = strchr ( cp + 1 , ':' )
ASSIGN	343:20	343:25	13	cp = strchr ( cp + 1 , ':' )
LVAL	343:20	343:20	14	cp
FIELD	343:20	343:20	15	cp
LEAF_NODE	343:20	343:20	16	cp
ASSIGN_OP	343:23	343:23	14	=
LEAF_NODE	343:23	343:23	15	=
RVAL	343:25	343:25	14	strchr ( cp + 1 , ':' )
FUNCTION_CALL	343:25	343:40	15	strchr ( cp + 1 , ':' )
CALLEE	343:25	343:25	16	strchr
LEAF_NODE	343:25	343:25	17	strchr
LEAF_NODE	343:31	343:31	16	(
ARGUMENT	343:32	343:35	16	cp + 1
FIELD	343:32	343:32	17	cp
LEAF_NODE	343:32	343:32	18	cp
LEAF_NODE	343:34	343:34	17	+
FIELD	343:35	343:35	17	1
LEAF_NODE	343:35	343:35	18	1
LEAF_NODE	343:36	343:36	16	,
ARGUMENT	343:37	343:37	16	':'
FIELD	343:37	343:37	17	':'
LEAF_NODE	343:37	343:37	18	':'
LEAF_NODE	343:40	343:40	16	)
LEAF_NODE	343:41	343:41	12	;
LEAF_NODE	344:16	344:16	10	}
LEAF_NODE	345:1	345:1	7	}
SELECTION	345:3	345:8	3	
KEYWORD	345:3	345:3	4	else
LEAF_NODE	345:3	345:3	5	else
STATEMENTS	345:8	345:8	4	
SELECTION	345:8	345:35	5	
KEYWORD	345:8	345:8	6	if
LEAF_NODE	345:8	345:8	7	if
LEAF_NODE	345:11	345:11	6	(
CONDITION	345:12	345:12	6	strneq ( opt , "lzw" , 3 )
EXPR	345:12	345:12	7	strneq ( opt , "lzw" , 3 )
FUNCTION_CALL	345:12	345:32	8	strneq ( opt , "lzw" , 3 )
CALLEE	345:12	345:12	9	strneq
LEAF_NODE	345:12	345:12	10	strneq
LEAF_NODE	345:18	345:18	9	(
ARGUMENT	345:19	345:19	9	opt
FIELD	345:19	345:19	10	opt
LEAF_NODE	345:19	345:19	11	opt
LEAF_NODE	345:22	345:22	9	,
ARGUMENT	345:24	345:24	9	"lzw"
FIELD	345:24	345:24	10	"lzw"
LEAF_NODE	345:24	345:24	11	"lzw"
LEAF_NODE	345:29	345:29	9	,
ARGUMENT	345:31	345:31	9	3
FIELD	345:31	345:31	10	3
LEAF_NODE	345:31	345:31	11	3
LEAF_NODE	345:32	345:32	9	)
LEAF_NODE	345:33	345:33	6	)
STATEMENTS	345:35	350:1	6	
LEAF_NODE	345:35	345:35	7	{
STATEMENTS	346:2	349:2	7	
SIMPLE_DECL	346:2	346:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	346:2	346:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	346:2	346:6	10	char *
TYPE_NAME	346:2	346:2	11	char
LEAF_NODE	346:2	346:2	12	char
POINTER	346:6	346:6	11	*
LEAF_NODE	346:6	346:6	12	*
NAME	346:8	346:8	10	cp
LEAF_NODE	346:8	346:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	346:8	346:8	10	cp = strchr ( opt , ':' )
ASSIGN	346:8	346:13	11	cp = strchr ( opt , ':' )
LVAL	346:8	346:8	12	cp
NAME	346:8	346:8	13	cp
LEAF_NODE	346:8	346:8	14	cp
ASSIGN_OP	346:11	346:11	12	=
LEAF_NODE	346:11	346:11	13	=
RVAL	346:13	346:13	12	strchr ( opt , ':' )
FUNCTION_CALL	346:13	346:28	13	strchr ( opt , ':' )
CALLEE	346:13	346:13	14	strchr
LEAF_NODE	346:13	346:13	15	strchr
LEAF_NODE	346:19	346:19	14	(
ARGUMENT	346:20	346:20	14	opt
FIELD	346:20	346:20	15	opt
LEAF_NODE	346:20	346:20	16	opt
LEAF_NODE	346:23	346:23	14	,
ARGUMENT	346:25	346:25	14	':'
FIELD	346:25	346:25	15	':'
LEAF_NODE	346:25	346:25	16	':'
LEAF_NODE	346:28	346:28	14	)
LEAF_NODE	346:29	346:29	9	;
SELECTION	347:2	348:3	8	
KEYWORD	347:2	347:2	9	if
LEAF_NODE	347:2	347:2	10	if
LEAF_NODE	347:5	347:5	9	(
CONDITION	347:6	347:6	9	cp
EXPR	347:6	347:6	10	cp
FIELD	347:6	347:6	11	cp
LEAF_NODE	347:6	347:6	12	cp
LEAF_NODE	347:8	347:8	9	)
STATEMENTS	348:3	348:3	9	
EXPR_STATEMENT	348:3	348:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	348:3	348:3	11	predictor = atoi ( cp + 1 )
ASSIGN	348:3	348:15	12	predictor = atoi ( cp + 1 )
LVAL	348:3	348:3	13	predictor
FIELD	348:3	348:3	14	predictor
LEAF_NODE	348:3	348:3	15	predictor
ASSIGN_OP	348:13	348:13	13	=
LEAF_NODE	348:13	348:13	14	=
RVAL	348:15	348:15	13	atoi ( cp + 1 )
FUNCTION_CALL	348:15	348:24	14	atoi ( cp + 1 )
CALLEE	348:15	348:15	15	atoi
LEAF_NODE	348:15	348:15	16	atoi
LEAF_NODE	348:19	348:19	15	(
ARGUMENT	348:20	348:23	15	cp + 1
FIELD	348:20	348:20	16	cp
LEAF_NODE	348:20	348:20	17	cp
LEAF_NODE	348:22	348:22	16	+
FIELD	348:23	348:23	16	1
LEAF_NODE	348:23	348:23	17	1
LEAF_NODE	348:24	348:24	15	)
LEAF_NODE	348:25	348:25	11	;
EXPR_STATEMENT	349:2	349:31	8	compression = COMPRESSION_LZW ;
EXPR	349:2	349:2	9	compression = COMPRESSION_LZW
ASSIGN	349:2	349:16	10	compression = COMPRESSION_LZW
LVAL	349:2	349:2	11	compression
FIELD	349:2	349:2	12	compression
LEAF_NODE	349:2	349:2	13	compression
ASSIGN_OP	349:14	349:14	11	=
LEAF_NODE	349:14	349:14	12	=
RVAL	349:16	349:16	11	COMPRESSION_LZW
FIELD	349:16	349:16	12	COMPRESSION_LZW
LEAF_NODE	349:16	349:16	13	COMPRESSION_LZW
LEAF_NODE	349:31	349:31	9	;
LEAF_NODE	350:1	350:1	7	}
SELECTION	350:3	350:8	3	
KEYWORD	350:3	350:3	4	else
LEAF_NODE	350:3	350:3	5	else
STATEMENTS	350:8	350:8	4	
SELECTION	350:8	350:35	5	
KEYWORD	350:8	350:8	6	if
LEAF_NODE	350:8	350:8	7	if
LEAF_NODE	350:11	350:11	6	(
CONDITION	350:12	350:12	6	strneq ( opt , "zip" , 3 )
EXPR	350:12	350:12	7	strneq ( opt , "zip" , 3 )
FUNCTION_CALL	350:12	350:32	8	strneq ( opt , "zip" , 3 )
CALLEE	350:12	350:12	9	strneq
LEAF_NODE	350:12	350:12	10	strneq
LEAF_NODE	350:18	350:18	9	(
ARGUMENT	350:19	350:19	9	opt
FIELD	350:19	350:19	10	opt
LEAF_NODE	350:19	350:19	11	opt
LEAF_NODE	350:22	350:22	9	,
ARGUMENT	350:24	350:24	9	"zip"
FIELD	350:24	350:24	10	"zip"
LEAF_NODE	350:24	350:24	11	"zip"
LEAF_NODE	350:29	350:29	9	,
ARGUMENT	350:31	350:31	9	3
FIELD	350:31	350:31	10	3
LEAF_NODE	350:31	350:31	11	3
LEAF_NODE	350:32	350:32	9	)
LEAF_NODE	350:33	350:33	6	)
STATEMENTS	350:35	355:1	6	
LEAF_NODE	350:35	350:35	7	{
STATEMENTS	351:2	354:2	7	
SIMPLE_DECL	351:2	351:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	351:2	351:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	351:2	351:6	10	char *
TYPE_NAME	351:2	351:2	11	char
LEAF_NODE	351:2	351:2	12	char
POINTER	351:6	351:6	11	*
LEAF_NODE	351:6	351:6	12	*
NAME	351:8	351:8	10	cp
LEAF_NODE	351:8	351:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	351:8	351:8	10	cp = strchr ( opt , ':' )
ASSIGN	351:8	351:13	11	cp = strchr ( opt , ':' )
LVAL	351:8	351:8	12	cp
NAME	351:8	351:8	13	cp
LEAF_NODE	351:8	351:8	14	cp
ASSIGN_OP	351:11	351:11	12	=
LEAF_NODE	351:11	351:11	13	=
RVAL	351:13	351:13	12	strchr ( opt , ':' )
FUNCTION_CALL	351:13	351:28	13	strchr ( opt , ':' )
CALLEE	351:13	351:13	14	strchr
LEAF_NODE	351:13	351:13	15	strchr
LEAF_NODE	351:19	351:19	14	(
ARGUMENT	351:20	351:20	14	opt
FIELD	351:20	351:20	15	opt
LEAF_NODE	351:20	351:20	16	opt
LEAF_NODE	351:23	351:23	14	,
ARGUMENT	351:25	351:25	14	':'
FIELD	351:25	351:25	15	':'
LEAF_NODE	351:25	351:25	16	':'
LEAF_NODE	351:28	351:28	14	)
LEAF_NODE	351:29	351:29	9	;
SELECTION	352:2	353:3	8	
KEYWORD	352:2	352:2	9	if
LEAF_NODE	352:2	352:2	10	if
LEAF_NODE	352:5	352:5	9	(
CONDITION	352:6	352:6	9	cp
EXPR	352:6	352:6	10	cp
FIELD	352:6	352:6	11	cp
LEAF_NODE	352:6	352:6	12	cp
LEAF_NODE	352:8	352:8	9	)
STATEMENTS	353:3	353:3	9	
EXPR_STATEMENT	353:3	353:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	353:3	353:3	11	predictor = atoi ( cp + 1 )
ASSIGN	353:3	353:15	12	predictor = atoi ( cp + 1 )
LVAL	353:3	353:3	13	predictor
FIELD	353:3	353:3	14	predictor
LEAF_NODE	353:3	353:3	15	predictor
ASSIGN_OP	353:13	353:13	13	=
LEAF_NODE	353:13	353:13	14	=
RVAL	353:15	353:15	13	atoi ( cp + 1 )
FUNCTION_CALL	353:15	353:24	14	atoi ( cp + 1 )
CALLEE	353:15	353:15	15	atoi
LEAF_NODE	353:15	353:15	16	atoi
LEAF_NODE	353:19	353:19	15	(
ARGUMENT	353:20	353:23	15	cp + 1
FIELD	353:20	353:20	16	cp
LEAF_NODE	353:20	353:20	17	cp
LEAF_NODE	353:22	353:22	16	+
FIELD	353:23	353:23	16	1
LEAF_NODE	353:23	353:23	17	1
LEAF_NODE	353:24	353:24	15	)
LEAF_NODE	353:25	353:25	11	;
EXPR_STATEMENT	354:2	354:35	8	compression = COMPRESSION_DEFLATE ;
EXPR	354:2	354:2	9	compression = COMPRESSION_DEFLATE
ASSIGN	354:2	354:16	10	compression = COMPRESSION_DEFLATE
LVAL	354:2	354:2	11	compression
FIELD	354:2	354:2	12	compression
LEAF_NODE	354:2	354:2	13	compression
ASSIGN_OP	354:14	354:14	11	=
LEAF_NODE	354:14	354:14	12	=
RVAL	354:16	354:16	11	COMPRESSION_DEFLATE
FIELD	354:16	354:16	12	COMPRESSION_DEFLATE
LEAF_NODE	354:16	354:16	13	COMPRESSION_DEFLATE
LEAF_NODE	354:35	354:35	9	;
LEAF_NODE	355:1	355:1	7	}
SELECTION	355:3	356:2	3	
KEYWORD	355:3	355:3	4	else
LEAF_NODE	355:3	355:3	5	else
STATEMENTS	356:2	356:2	4	
JUMP_STATEMENT	356:2	356:12	5	return ( 0 ) ;
KEYWORD	356:2	356:2	6	return
LEAF_NODE	356:2	356:2	7	return
DESTINATION	356:9	356:9	6	( 0 )
EXPR	356:9	356:11	7	( 0 )
LEAF_NODE	356:9	356:9	8	(
FIELD	356:10	356:10	8	0
LEAF_NODE	356:10	356:10	9	0
LEAF_NODE	356:11	356:11	8	)
LEAF_NODE	356:12	356:12	6	;
JUMP_STATEMENT	357:1	357:11	3	return ( 1 ) ;
KEYWORD	357:1	357:1	4	return
LEAF_NODE	357:1	357:1	5	return
DESTINATION	357:8	357:8	4	( 1 )
EXPR	357:8	357:10	5	( 1 )
LEAF_NODE	357:8	357:8	6	(
FIELD	357:9	357:9	6	1
LEAF_NODE	357:9	357:9	7	1
LEAF_NODE	357:10	357:10	6	)
LEAF_NODE	357:11	357:11	4	;
LEAF_NODE	358:0	358:0	2	}
FUNCTION_DEF	369:0	422:0	1	
RETURN_TYPE	369:0	369:7	2	static void
LEAF_NODE	369:0	369:0	3	static
TYPE_NAME	369:7	369:7	3	void
LEAF_NODE	369:7	369:7	4	void
FUNCTION_NAME	370:0	370:0	2	cpTag
LEAF_NODE	370:0	370:0	3	cpTag
PARAMETER_LIST	370:5	370:70	2	( TIFF * in , TIFF * out , uint16 tag , uint16 count , TIFFDataType type )
LEAF_NODE	370:5	370:5	3	(
PARAMETER_DECL	370:6	370:12	3	TIFF * in
TYPE	370:6	370:10	4	TIFF *
TYPE_NAME	370:6	370:6	5	TIFF
LEAF_NODE	370:6	370:6	6	TIFF
POINTER	370:10	370:10	5	*
LEAF_NODE	370:10	370:10	6	*
NAME	370:12	370:12	4	in
LEAF_NODE	370:12	370:12	5	in
LEAF_NODE	370:14	370:14	3	,
PARAMETER_DECL	370:16	370:22	3	TIFF * out
TYPE	370:16	370:20	4	TIFF *
TYPE_NAME	370:16	370:16	5	TIFF
LEAF_NODE	370:16	370:16	6	TIFF
POINTER	370:20	370:20	5	*
LEAF_NODE	370:20	370:20	6	*
NAME	370:22	370:22	4	out
LEAF_NODE	370:22	370:22	5	out
LEAF_NODE	370:25	370:25	3	,
PARAMETER_DECL	370:27	370:34	3	uint16 tag
TYPE	370:27	370:27	4	uint16
TYPE_NAME	370:27	370:27	5	uint16
LEAF_NODE	370:27	370:27	6	uint16
NAME	370:34	370:34	4	tag
LEAF_NODE	370:34	370:34	5	tag
LEAF_NODE	370:37	370:37	3	,
PARAMETER_DECL	370:39	370:46	3	uint16 count
TYPE	370:39	370:39	4	uint16
TYPE_NAME	370:39	370:39	5	uint16
LEAF_NODE	370:39	370:39	6	uint16
NAME	370:46	370:46	4	count
LEAF_NODE	370:46	370:46	5	count
LEAF_NODE	370:51	370:51	3	,
PARAMETER_DECL	370:53	370:66	3	TIFFDataType type
TYPE	370:53	370:53	4	TIFFDataType
TYPE_NAME	370:53	370:53	5	TIFFDataType
LEAF_NODE	370:53	370:53	6	TIFFDataType
NAME	370:66	370:66	4	type
LEAF_NODE	370:66	370:66	5	type
LEAF_NODE	370:70	370:70	3	)
LEAF_NODE	371:0	371:0	2	{
STATEMENTS	372:1	372:1	2	
SELECTION	372:1	372:15	3	
KEYWORD	372:1	372:1	4	switch
LEAF_NODE	372:1	372:1	5	switch
LEAF_NODE	372:8	372:8	4	(
CONDITION	372:9	372:9	4	type
EXPR	372:9	372:9	5	type
FIELD	372:9	372:9	6	type
LEAF_NODE	372:9	372:9	7	type
LEAF_NODE	372:13	372:13	4	)
STATEMENTS	372:15	421:1	4	
LEAF_NODE	372:15	372:15	5	{
STATEMENTS	373:1	418:16	5	
LABEL	373:1	373:16	6	case TIFF_SHORT :
LEAF_NODE	373:1	373:1	7	case
LEAF_NODE	373:6	373:6	7	TIFF_SHORT
LEAF_NODE	373:16	373:16	7	:
SELECTION	374:2	374:18	6	
KEYWORD	374:2	374:2	7	if
LEAF_NODE	374:2	374:2	8	if
LEAF_NODE	374:5	374:5	7	(
CONDITION	374:6	374:6	7	count == 1
EXPR	374:6	374:15	8	count == 1
FIELD	374:6	374:6	9	count
LEAF_NODE	374:6	374:6	10	count
EQ_OPERATOR	374:12	374:12	9	==
LEAF_NODE	374:12	374:12	10	==
FIELD	374:15	374:15	9	1
LEAF_NODE	374:15	374:15	10	1
LEAF_NODE	374:16	374:16	7	)
STATEMENTS	374:18	377:2	7	
LEAF_NODE	374:18	374:18	8	{
STATEMENTS	375:3	376:3	8	
SIMPLE_DECL	375:3	375:16	9	uint16 shortv ;
VAR_DECL	375:3	375:10	10	uint16 shortv
TYPE	375:3	375:3	11	uint16
TYPE_NAME	375:3	375:3	12	uint16
LEAF_NODE	375:3	375:3	13	uint16
NAME	375:10	375:10	11	shortv
LEAF_NODE	375:10	375:10	12	shortv
LEAF_NODE	375:16	375:16	10	;
EXPR_STATEMENT	376:3	376:25	9	CopyField ( tag , shortv ) ;
EXPR	376:3	376:3	10	CopyField ( tag , shortv )
FUNCTION_CALL	376:3	376:24	11	CopyField ( tag , shortv )
CALLEE	376:3	376:3	12	CopyField
LEAF_NODE	376:3	376:3	13	CopyField
LEAF_NODE	376:12	376:12	12	(
ARGUMENT	376:13	376:13	12	tag
FIELD	376:13	376:13	13	tag
LEAF_NODE	376:13	376:13	14	tag
LEAF_NODE	376:16	376:16	12	,
ARGUMENT	376:18	376:18	12	shortv
FIELD	376:18	376:18	13	shortv
LEAF_NODE	376:18	376:18	14	shortv
LEAF_NODE	376:24	376:24	12	)
LEAF_NODE	376:25	376:25	10	;
LEAF_NODE	377:2	377:2	8	}
SELECTION	377:4	377:9	6	
KEYWORD	377:4	377:4	7	else
LEAF_NODE	377:4	377:4	8	else
STATEMENTS	377:9	377:9	7	
SELECTION	377:9	377:25	8	
KEYWORD	377:9	377:9	9	if
LEAF_NODE	377:9	377:9	10	if
LEAF_NODE	377:12	377:12	9	(
CONDITION	377:13	377:13	9	count == 2
EXPR	377:13	377:22	10	count == 2
FIELD	377:13	377:13	11	count
LEAF_NODE	377:13	377:13	12	count
EQ_OPERATOR	377:19	377:19	11	==
LEAF_NODE	377:19	377:19	12	==
FIELD	377:22	377:22	11	2
LEAF_NODE	377:22	377:22	12	2
LEAF_NODE	377:23	377:23	9	)
STATEMENTS	377:25	380:2	9	
LEAF_NODE	377:25	377:25	10	{
STATEMENTS	378:3	379:3	10	
SIMPLE_DECL	378:3	378:26	11	uint16 shortv1 , uint16 shortv2 ;
INIT_DECL_LIST	378:3	378:3	12	uint16 shortv1 , uint16 shortv2
VAR_DECL	378:3	378:10	13	uint16 shortv1
TYPE	378:3	378:3	14	uint16
TYPE_NAME	378:3	378:3	15	uint16
LEAF_NODE	378:3	378:3	16	uint16
NAME	378:10	378:10	14	shortv1
LEAF_NODE	378:10	378:10	15	shortv1
LEAF_NODE	378:17	378:17	13	,
VAR_DECL	378:3	378:19	13	uint16 shortv2
TYPE	378:3	378:3	14	uint16
TYPE_NAME	378:3	378:3	15	uint16
LEAF_NODE	378:3	378:3	16	uint16
NAME	378:19	378:19	14	shortv2
LEAF_NODE	378:19	378:19	15	shortv2
LEAF_NODE	378:26	378:26	12	;
EXPR_STATEMENT	379:3	379:36	11	CopyField2 ( tag , shortv1 , shortv2 ) ;
EXPR	379:3	379:3	12	CopyField2 ( tag , shortv1 , shortv2 )
FUNCTION_CALL	379:3	379:35	13	CopyField2 ( tag , shortv1 , shortv2 )
CALLEE	379:3	379:3	14	CopyField2
LEAF_NODE	379:3	379:3	15	CopyField2
LEAF_NODE	379:13	379:13	14	(
ARGUMENT	379:14	379:14	14	tag
FIELD	379:14	379:14	15	tag
LEAF_NODE	379:14	379:14	16	tag
LEAF_NODE	379:17	379:17	14	,
ARGUMENT	379:19	379:19	14	shortv1
FIELD	379:19	379:19	15	shortv1
LEAF_NODE	379:19	379:19	16	shortv1
LEAF_NODE	379:26	379:26	14	,
ARGUMENT	379:28	379:28	14	shortv2
FIELD	379:28	379:28	15	shortv2
LEAF_NODE	379:28	379:28	16	shortv2
LEAF_NODE	379:35	379:35	14	)
LEAF_NODE	379:36	379:36	12	;
LEAF_NODE	380:2	380:2	10	}
SELECTION	380:4	380:9	6	
KEYWORD	380:4	380:4	7	else
LEAF_NODE	380:4	380:4	8	else
STATEMENTS	380:9	380:9	7	
SELECTION	380:9	380:25	8	
KEYWORD	380:9	380:9	9	if
LEAF_NODE	380:9	380:9	10	if
LEAF_NODE	380:12	380:12	9	(
CONDITION	380:13	380:13	9	count == 4
EXPR	380:13	380:22	10	count == 4
FIELD	380:13	380:13	11	count
LEAF_NODE	380:13	380:13	12	count
EQ_OPERATOR	380:19	380:19	11	==
LEAF_NODE	380:19	380:19	12	==
FIELD	380:22	380:22	11	4
LEAF_NODE	380:22	380:22	12	4
LEAF_NODE	380:23	380:23	9	)
STATEMENTS	380:25	383:2	9	
LEAF_NODE	380:25	380:25	10	{
STATEMENTS	381:3	382:3	10	
SIMPLE_DECL	381:3	381:28	11	uint16 * tr , uint16 * tg , uint16 * tb , uint16 * ta ;
INIT_DECL_LIST	381:3	381:3	12	uint16 * tr , uint16 * tg , uint16 * tb , uint16 * ta
VAR_DECL	381:3	381:11	13	uint16 * tr
TYPE	381:3	381:10	14	uint16 *
TYPE_NAME	381:3	381:3	15	uint16
LEAF_NODE	381:3	381:3	16	uint16
POINTER	381:10	381:10	15	*
LEAF_NODE	381:10	381:10	16	*
NAME	381:11	381:11	14	tr
LEAF_NODE	381:11	381:11	15	tr
LEAF_NODE	381:13	381:13	13	,
INIT_DECL_LIST	381:3	381:3	13	uint16 * tg , uint16 * tb , uint16 * ta
VAR_DECL	381:3	381:16	14	uint16 * tg
TYPE	381:3	381:15	15	uint16 *
TYPE_NAME	381:3	381:3	16	uint16
LEAF_NODE	381:3	381:3	17	uint16
POINTER	381:15	381:15	16	*
LEAF_NODE	381:15	381:15	17	*
NAME	381:16	381:16	15	tg
LEAF_NODE	381:16	381:16	16	tg
LEAF_NODE	381:18	381:18	14	,
INIT_DECL_LIST	381:3	381:3	14	uint16 * tb , uint16 * ta
VAR_DECL	381:3	381:21	15	uint16 * tb
TYPE	381:3	381:20	16	uint16 *
TYPE_NAME	381:3	381:3	17	uint16
LEAF_NODE	381:3	381:3	18	uint16
POINTER	381:20	381:20	17	*
LEAF_NODE	381:20	381:20	18	*
NAME	381:21	381:21	16	tb
LEAF_NODE	381:21	381:21	17	tb
LEAF_NODE	381:23	381:23	15	,
VAR_DECL	381:3	381:26	15	uint16 * ta
TYPE	381:3	381:25	16	uint16 *
TYPE_NAME	381:3	381:3	17	uint16
LEAF_NODE	381:3	381:3	18	uint16
POINTER	381:25	381:25	17	*
LEAF_NODE	381:25	381:25	18	*
NAME	381:26	381:26	16	ta
LEAF_NODE	381:26	381:26	17	ta
LEAF_NODE	381:28	381:28	12	;
EXPR_STATEMENT	382:3	382:34	11	CopyField4 ( tag , tr , tg , tb , ta ) ;
EXPR	382:3	382:3	12	CopyField4 ( tag , tr , tg , tb , ta )
FUNCTION_CALL	382:3	382:33	13	CopyField4 ( tag , tr , tg , tb , ta )
CALLEE	382:3	382:3	14	CopyField4
LEAF_NODE	382:3	382:3	15	CopyField4
LEAF_NODE	382:13	382:13	14	(
ARGUMENT	382:14	382:14	14	tag
FIELD	382:14	382:14	15	tag
LEAF_NODE	382:14	382:14	16	tag
LEAF_NODE	382:17	382:17	14	,
ARGUMENT	382:19	382:19	14	tr
FIELD	382:19	382:19	15	tr
LEAF_NODE	382:19	382:19	16	tr
LEAF_NODE	382:21	382:21	14	,
ARGUMENT	382:23	382:23	14	tg
FIELD	382:23	382:23	15	tg
LEAF_NODE	382:23	382:23	16	tg
LEAF_NODE	382:25	382:25	14	,
ARGUMENT	382:27	382:27	14	tb
FIELD	382:27	382:27	15	tb
LEAF_NODE	382:27	382:27	16	tb
LEAF_NODE	382:29	382:29	14	,
ARGUMENT	382:31	382:31	14	ta
FIELD	382:31	382:31	15	ta
LEAF_NODE	382:31	382:31	16	ta
LEAF_NODE	382:33	382:33	14	)
LEAF_NODE	382:34	382:34	12	;
LEAF_NODE	383:2	383:2	10	}
SELECTION	383:4	383:9	6	
KEYWORD	383:4	383:4	7	else
LEAF_NODE	383:4	383:4	8	else
STATEMENTS	383:9	383:9	7	
SELECTION	383:9	383:35	8	
KEYWORD	383:9	383:9	9	if
LEAF_NODE	383:9	383:9	10	if
LEAF_NODE	383:12	383:12	9	(
CONDITION	383:13	383:13	9	count == ( uint16 ) - 1
EXPR	383:13	383:31	10	count == ( uint16 ) - 1
FIELD	383:13	383:13	11	count
LEAF_NODE	383:13	383:13	12	count
EQ_OPERATOR	383:19	383:19	11	==
LEAF_NODE	383:19	383:19	12	==
LEAF_NODE	383:22	383:22	11	(
TYPE_NAME	383:23	383:23	11	uint16
LEAF_NODE	383:23	383:23	12	uint16
LEAF_NODE	383:29	383:29	11	)
UNARY_EXPR	383:31	383:32	11	- 1
UNARY_OPERATOR	383:31	383:31	12	-
LEAF_NODE	383:31	383:31	13	-
FIELD	383:32	383:32	12	1
LEAF_NODE	383:32	383:32	13	1
LEAF_NODE	383:33	383:33	9	)
STATEMENTS	383:35	387:2	9	
LEAF_NODE	383:35	383:35	10	{
STATEMENTS	384:3	386:3	10	
SIMPLE_DECL	384:3	384:17	11	uint16 shortv1 ;
VAR_DECL	384:3	384:10	12	uint16 shortv1
TYPE	384:3	384:3	13	uint16
TYPE_NAME	384:3	384:3	14	uint16
LEAF_NODE	384:3	384:3	15	uint16
NAME	384:10	384:10	13	shortv1
LEAF_NODE	384:10	384:10	14	shortv1
LEAF_NODE	384:17	384:17	12	;
SIMPLE_DECL	385:3	385:18	11	uint16 * shortav ;
VAR_DECL	385:3	385:11	12	uint16 * shortav
TYPE	385:3	385:9	13	uint16 *
TYPE_NAME	385:3	385:3	14	uint16
LEAF_NODE	385:3	385:3	15	uint16
POINTER	385:9	385:9	14	*
LEAF_NODE	385:9	385:9	15	*
NAME	385:11	385:11	13	shortav
LEAF_NODE	385:11	385:11	14	shortav
LEAF_NODE	385:18	385:18	12	;
EXPR_STATEMENT	386:3	386:36	11	CopyField2 ( tag , shortv1 , shortav ) ;
EXPR	386:3	386:3	12	CopyField2 ( tag , shortv1 , shortav )
FUNCTION_CALL	386:3	386:35	13	CopyField2 ( tag , shortv1 , shortav )
CALLEE	386:3	386:3	14	CopyField2
LEAF_NODE	386:3	386:3	15	CopyField2
LEAF_NODE	386:13	386:13	14	(
ARGUMENT	386:14	386:14	14	tag
FIELD	386:14	386:14	15	tag
LEAF_NODE	386:14	386:14	16	tag
LEAF_NODE	386:17	386:17	14	,
ARGUMENT	386:19	386:19	14	shortv1
FIELD	386:19	386:19	15	shortv1
LEAF_NODE	386:19	386:19	16	shortv1
LEAF_NODE	386:26	386:26	14	,
ARGUMENT	386:28	386:28	14	shortav
FIELD	386:28	386:28	15	shortav
LEAF_NODE	386:28	386:28	16	shortav
LEAF_NODE	386:35	386:35	14	)
LEAF_NODE	386:36	386:36	12	;
LEAF_NODE	387:2	387:2	10	}
JUMP_STATEMENT	388:2	388:7	6	break DESTINATION ;
KEYWORD	388:2	388:2	7	break
LEAF_NODE	388:2	388:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	388:7	388:7	7	;
LABEL	389:1	389:15	6	case TIFF_LONG :
LEAF_NODE	389:1	389:1	7	case
LEAF_NODE	389:6	389:6	7	TIFF_LONG
LEAF_NODE	389:15	389:15	7	:
LEAF_NODE	390:2	390:2	6	{
STATEMENTS	390:4	391:4	6	
SIMPLE_DECL	390:4	390:16	7	uint32 longv ;
VAR_DECL	390:4	390:11	8	uint32 longv
TYPE	390:4	390:4	9	uint32
TYPE_NAME	390:4	390:4	10	uint32
LEAF_NODE	390:4	390:4	11	uint32
NAME	390:11	390:11	9	longv
LEAF_NODE	390:11	390:11	10	longv
LEAF_NODE	390:16	390:16	8	;
EXPR_STATEMENT	391:4	391:25	7	CopyField ( tag , longv ) ;
EXPR	391:4	391:4	8	CopyField ( tag , longv )
FUNCTION_CALL	391:4	391:24	9	CopyField ( tag , longv )
CALLEE	391:4	391:4	10	CopyField
LEAF_NODE	391:4	391:4	11	CopyField
LEAF_NODE	391:13	391:13	10	(
ARGUMENT	391:14	391:14	10	tag
FIELD	391:14	391:14	11	tag
LEAF_NODE	391:14	391:14	12	tag
LEAF_NODE	391:17	391:17	10	,
ARGUMENT	391:19	391:19	10	longv
FIELD	391:19	391:19	11	longv
LEAF_NODE	391:19	391:19	12	longv
LEAF_NODE	391:24	391:24	10	)
LEAF_NODE	391:25	391:25	8	;
LEAF_NODE	392:2	392:2	6	}
JUMP_STATEMENT	393:2	393:7	6	break DESTINATION ;
KEYWORD	393:2	393:2	7	break
LEAF_NODE	393:2	393:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	393:7	393:7	7	;
LABEL	394:1	394:19	6	case TIFF_RATIONAL :
LEAF_NODE	394:1	394:1	7	case
LEAF_NODE	394:6	394:6	7	TIFF_RATIONAL
LEAF_NODE	394:19	394:19	7	:
SELECTION	395:2	395:18	6	
KEYWORD	395:2	395:2	7	if
LEAF_NODE	395:2	395:2	8	if
LEAF_NODE	395:5	395:5	7	(
CONDITION	395:6	395:6	7	count == 1
EXPR	395:6	395:15	8	count == 1
FIELD	395:6	395:6	9	count
LEAF_NODE	395:6	395:6	10	count
EQ_OPERATOR	395:12	395:12	9	==
LEAF_NODE	395:12	395:12	10	==
FIELD	395:15	395:15	9	1
LEAF_NODE	395:15	395:15	10	1
LEAF_NODE	395:16	395:16	7	)
STATEMENTS	395:18	398:2	7	
LEAF_NODE	395:18	395:18	8	{
STATEMENTS	396:3	397:3	8	
SIMPLE_DECL	396:3	396:15	9	float floatv ;
VAR_DECL	396:3	396:9	10	float floatv
TYPE	396:3	396:3	11	float
TYPE_NAME	396:3	396:3	12	float
LEAF_NODE	396:3	396:3	13	float
NAME	396:9	396:9	11	floatv
LEAF_NODE	396:9	396:9	12	floatv
LEAF_NODE	396:15	396:15	10	;
EXPR_STATEMENT	397:3	397:25	9	CopyField ( tag , floatv ) ;
EXPR	397:3	397:3	10	CopyField ( tag , floatv )
FUNCTION_CALL	397:3	397:24	11	CopyField ( tag , floatv )
CALLEE	397:3	397:3	12	CopyField
LEAF_NODE	397:3	397:3	13	CopyField
LEAF_NODE	397:12	397:12	12	(
ARGUMENT	397:13	397:13	12	tag
FIELD	397:13	397:13	13	tag
LEAF_NODE	397:13	397:13	14	tag
LEAF_NODE	397:16	397:16	12	,
ARGUMENT	397:18	397:18	12	floatv
FIELD	397:18	397:18	13	floatv
LEAF_NODE	397:18	397:18	14	floatv
LEAF_NODE	397:24	397:24	12	)
LEAF_NODE	397:25	397:25	10	;
LEAF_NODE	398:2	398:2	8	}
SELECTION	398:4	398:9	6	
KEYWORD	398:4	398:4	7	else
LEAF_NODE	398:4	398:4	8	else
STATEMENTS	398:9	398:9	7	
SELECTION	398:9	398:35	8	
KEYWORD	398:9	398:9	9	if
LEAF_NODE	398:9	398:9	10	if
LEAF_NODE	398:12	398:12	9	(
CONDITION	398:13	398:13	9	count == ( uint16 ) - 1
EXPR	398:13	398:31	10	count == ( uint16 ) - 1
FIELD	398:13	398:13	11	count
LEAF_NODE	398:13	398:13	12	count
EQ_OPERATOR	398:19	398:19	11	==
LEAF_NODE	398:19	398:19	12	==
LEAF_NODE	398:22	398:22	11	(
TYPE_NAME	398:23	398:23	11	uint16
LEAF_NODE	398:23	398:23	12	uint16
LEAF_NODE	398:29	398:29	11	)
UNARY_EXPR	398:31	398:32	11	- 1
UNARY_OPERATOR	398:31	398:31	12	-
LEAF_NODE	398:31	398:31	13	-
FIELD	398:32	398:32	12	1
LEAF_NODE	398:32	398:32	13	1
LEAF_NODE	398:33	398:33	9	)
STATEMENTS	398:35	401:2	9	
LEAF_NODE	398:35	398:35	10	{
STATEMENTS	399:3	400:3	10	
SIMPLE_DECL	399:3	399:17	11	float * floatav ;
VAR_DECL	399:3	399:10	12	float * floatav
TYPE	399:3	399:8	13	float *
TYPE_NAME	399:3	399:3	14	float
LEAF_NODE	399:3	399:3	15	float
POINTER	399:8	399:8	14	*
LEAF_NODE	399:8	399:8	15	*
NAME	399:10	399:10	13	floatav
LEAF_NODE	399:10	399:10	14	floatav
LEAF_NODE	399:17	399:17	12	;
EXPR_STATEMENT	400:3	400:26	11	CopyField ( tag , floatav ) ;
EXPR	400:3	400:3	12	CopyField ( tag , floatav )
FUNCTION_CALL	400:3	400:25	13	CopyField ( tag , floatav )
CALLEE	400:3	400:3	14	CopyField
LEAF_NODE	400:3	400:3	15	CopyField
LEAF_NODE	400:12	400:12	14	(
ARGUMENT	400:13	400:13	14	tag
FIELD	400:13	400:13	15	tag
LEAF_NODE	400:13	400:13	16	tag
LEAF_NODE	400:16	400:16	14	,
ARGUMENT	400:18	400:18	14	floatav
FIELD	400:18	400:18	15	floatav
LEAF_NODE	400:18	400:18	16	floatav
LEAF_NODE	400:25	400:25	14	)
LEAF_NODE	400:26	400:26	12	;
LEAF_NODE	401:2	401:2	10	}
JUMP_STATEMENT	402:2	402:7	6	break DESTINATION ;
KEYWORD	402:2	402:2	7	break
LEAF_NODE	402:2	402:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	402:7	402:7	7	;
LABEL	403:1	403:16	6	case TIFF_ASCII :
LEAF_NODE	403:1	403:1	7	case
LEAF_NODE	403:6	403:6	7	TIFF_ASCII
LEAF_NODE	403:16	403:16	7	:
LEAF_NODE	404:2	404:2	6	{
STATEMENTS	404:4	405:4	6	
SIMPLE_DECL	404:4	404:17	7	char * stringv ;
VAR_DECL	404:4	404:10	8	char * stringv
TYPE	404:4	404:8	9	char *
TYPE_NAME	404:4	404:4	10	char
LEAF_NODE	404:4	404:4	11	char
POINTER	404:8	404:8	10	*
LEAF_NODE	404:8	404:8	11	*
NAME	404:10	404:10	9	stringv
LEAF_NODE	404:10	404:10	10	stringv
LEAF_NODE	404:17	404:17	8	;
EXPR_STATEMENT	405:4	405:27	7	CopyField ( tag , stringv ) ;
EXPR	405:4	405:4	8	CopyField ( tag , stringv )
FUNCTION_CALL	405:4	405:26	9	CopyField ( tag , stringv )
CALLEE	405:4	405:4	10	CopyField
LEAF_NODE	405:4	405:4	11	CopyField
LEAF_NODE	405:13	405:13	10	(
ARGUMENT	405:14	405:14	10	tag
FIELD	405:14	405:14	11	tag
LEAF_NODE	405:14	405:14	12	tag
LEAF_NODE	405:17	405:17	10	,
ARGUMENT	405:19	405:19	10	stringv
FIELD	405:19	405:19	11	stringv
LEAF_NODE	405:19	405:19	12	stringv
LEAF_NODE	405:26	405:26	10	)
LEAF_NODE	405:27	405:27	8	;
LEAF_NODE	406:2	406:2	6	}
JUMP_STATEMENT	407:2	407:7	6	break DESTINATION ;
KEYWORD	407:2	407:2	7	break
LEAF_NODE	407:2	407:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	407:7	407:7	7	;
LABEL	408:1	408:17	6	case TIFF_DOUBLE :
LEAF_NODE	408:1	408:1	7	case
LEAF_NODE	408:6	408:6	7	TIFF_DOUBLE
LEAF_NODE	408:17	408:17	7	:
SELECTION	409:2	409:18	6	
KEYWORD	409:2	409:2	7	if
LEAF_NODE	409:2	409:2	8	if
LEAF_NODE	409:5	409:5	7	(
CONDITION	409:6	409:6	7	count == 1
EXPR	409:6	409:15	8	count == 1
FIELD	409:6	409:6	9	count
LEAF_NODE	409:6	409:6	10	count
EQ_OPERATOR	409:12	409:12	9	==
LEAF_NODE	409:12	409:12	10	==
FIELD	409:15	409:15	9	1
LEAF_NODE	409:15	409:15	10	1
LEAF_NODE	409:16	409:16	7	)
STATEMENTS	409:18	412:2	7	
LEAF_NODE	409:18	409:18	8	{
STATEMENTS	410:3	411:3	8	
SIMPLE_DECL	410:3	410:17	9	double doublev ;
VAR_DECL	410:3	410:10	10	double doublev
TYPE	410:3	410:3	11	double
TYPE_NAME	410:3	410:3	12	double
LEAF_NODE	410:3	410:3	13	double
NAME	410:10	410:10	11	doublev
LEAF_NODE	410:10	410:10	12	doublev
LEAF_NODE	410:17	410:17	10	;
EXPR_STATEMENT	411:3	411:26	9	CopyField ( tag , doublev ) ;
EXPR	411:3	411:3	10	CopyField ( tag , doublev )
FUNCTION_CALL	411:3	411:25	11	CopyField ( tag , doublev )
CALLEE	411:3	411:3	12	CopyField
LEAF_NODE	411:3	411:3	13	CopyField
LEAF_NODE	411:12	411:12	12	(
ARGUMENT	411:13	411:13	12	tag
FIELD	411:13	411:13	13	tag
LEAF_NODE	411:13	411:13	14	tag
LEAF_NODE	411:16	411:16	12	,
ARGUMENT	411:18	411:18	12	doublev
FIELD	411:18	411:18	13	doublev
LEAF_NODE	411:18	411:18	14	doublev
LEAF_NODE	411:25	411:25	12	)
LEAF_NODE	411:26	411:26	10	;
LEAF_NODE	412:2	412:2	8	}
SELECTION	412:4	412:9	6	
KEYWORD	412:4	412:4	7	else
LEAF_NODE	412:4	412:4	8	else
STATEMENTS	412:9	412:9	7	
SELECTION	412:9	412:35	8	
KEYWORD	412:9	412:9	9	if
LEAF_NODE	412:9	412:9	10	if
LEAF_NODE	412:12	412:12	9	(
CONDITION	412:13	412:13	9	count == ( uint16 ) - 1
EXPR	412:13	412:31	10	count == ( uint16 ) - 1
FIELD	412:13	412:13	11	count
LEAF_NODE	412:13	412:13	12	count
EQ_OPERATOR	412:19	412:19	11	==
LEAF_NODE	412:19	412:19	12	==
LEAF_NODE	412:22	412:22	11	(
TYPE_NAME	412:23	412:23	11	uint16
LEAF_NODE	412:23	412:23	12	uint16
LEAF_NODE	412:29	412:29	11	)
UNARY_EXPR	412:31	412:32	11	- 1
UNARY_OPERATOR	412:31	412:31	12	-
LEAF_NODE	412:31	412:31	13	-
FIELD	412:32	412:32	12	1
LEAF_NODE	412:32	412:32	13	1
LEAF_NODE	412:33	412:33	9	)
STATEMENTS	412:35	415:2	9	
LEAF_NODE	412:35	412:35	10	{
STATEMENTS	413:3	414:3	10	
SIMPLE_DECL	413:3	413:19	11	double * doubleav ;
VAR_DECL	413:3	413:11	12	double * doubleav
TYPE	413:3	413:9	13	double *
TYPE_NAME	413:3	413:3	14	double
LEAF_NODE	413:3	413:3	15	double
POINTER	413:9	413:9	14	*
LEAF_NODE	413:9	413:9	15	*
NAME	413:11	413:11	13	doubleav
LEAF_NODE	413:11	413:11	14	doubleav
LEAF_NODE	413:19	413:19	12	;
EXPR_STATEMENT	414:3	414:27	11	CopyField ( tag , doubleav ) ;
EXPR	414:3	414:3	12	CopyField ( tag , doubleav )
FUNCTION_CALL	414:3	414:26	13	CopyField ( tag , doubleav )
CALLEE	414:3	414:3	14	CopyField
LEAF_NODE	414:3	414:3	15	CopyField
LEAF_NODE	414:12	414:12	14	(
ARGUMENT	414:13	414:13	14	tag
FIELD	414:13	414:13	15	tag
LEAF_NODE	414:13	414:13	16	tag
LEAF_NODE	414:16	414:16	14	,
ARGUMENT	414:18	414:18	14	doubleav
FIELD	414:18	414:18	15	doubleav
LEAF_NODE	414:18	414:18	16	doubleav
LEAF_NODE	414:26	414:26	14	)
LEAF_NODE	414:27	414:27	12	;
LEAF_NODE	415:2	415:2	10	}
JUMP_STATEMENT	416:2	416:7	6	break DESTINATION ;
KEYWORD	416:2	416:2	7	break
LEAF_NODE	416:2	416:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	416:7	416:7	7	;
LABEL	417:10	417:17	6	default :
LEAF_NODE	417:10	417:10	7	default
LEAF_NODE	417:17	417:17	7	:
EXPR_STATEMENT	418:16	420:36	6	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type ) ;
EXPR	418:16	418:16	7	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type )
FUNCTION_CALL	418:16	420:35	8	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type )
CALLEE	418:16	418:16	9	TIFFError
LEAF_NODE	418:16	418:16	10	TIFFError
LEAF_NODE	418:25	418:25	9	(
ARGUMENT	418:26	418:26	9	TIFFFileName ( in )
FUNCTION_CALL	418:26	418:41	10	TIFFFileName ( in )
CALLEE	418:26	418:26	11	TIFFFileName
LEAF_NODE	418:26	418:26	12	TIFFFileName
LEAF_NODE	418:38	418:38	11	(
ARGUMENT	418:39	418:39	11	in
FIELD	418:39	418:39	12	in
LEAF_NODE	418:39	418:39	13	in
LEAF_NODE	418:41	418:41	11	)
LEAF_NODE	418:42	418:42	9	,
ARGUMENT	419:26	419:26	9	"Data type %d is not supported, tag %d skipped."
FIELD	419:26	419:26	10	"Data type %d is not supported, tag %d skipped."
LEAF_NODE	419:26	419:26	11	"Data type %d is not supported, tag %d skipped."
LEAF_NODE	419:74	419:74	9	,
ARGUMENT	420:26	420:26	9	tag
FIELD	420:26	420:26	10	tag
LEAF_NODE	420:26	420:26	11	tag
LEAF_NODE	420:29	420:29	9	,
ARGUMENT	420:31	420:31	9	type
FIELD	420:31	420:31	10	type
LEAF_NODE	420:31	420:31	11	type
LEAF_NODE	420:35	420:35	9	)
LEAF_NODE	420:36	420:36	7	;
LEAF_NODE	421:1	421:1	5	}
LEAF_NODE	422:0	422:0	2	}
SIMPLE_DECL	430:1	430:11	1	uint16 tag ;
VAR_DECL	430:1	430:8	2	uint16 tag
TYPE	430:1	430:1	3	uint16
TYPE_NAME	430:1	430:1	4	uint16
LEAF_NODE	430:1	430:1	5	uint16
NAME	430:8	430:8	3	tag
LEAF_NODE	430:8	430:8	4	tag
LEAF_NODE	430:11	430:11	2	;
SIMPLE_DECL	431:1	431:13	1	uint16 count ;
VAR_DECL	431:1	431:8	2	uint16 count
TYPE	431:1	431:1	3	uint16
TYPE_NAME	431:1	431:1	4	uint16
LEAF_NODE	431:1	431:1	5	uint16
NAME	431:8	431:8	3	count
LEAF_NODE	431:8	431:8	4	count
LEAF_NODE	431:13	431:13	2	;
SIMPLE_DECL	432:1	432:18	1	TIFFDataType type ;
VAR_DECL	432:1	432:14	2	TIFFDataType type
TYPE	432:1	432:1	3	TIFFDataType
TYPE_NAME	432:1	432:1	4	TIFFDataType
LEAF_NODE	432:1	432:1	5	TIFFDataType
NAME	432:14	432:14	3	type
LEAF_NODE	432:14	432:14	4	type
LEAF_NODE	432:18	432:18	2	;
FUNCTION_DEF	470:0	492:0	1	
RETURN_TYPE	470:0	470:7	2	static void
LEAF_NODE	470:0	470:0	3	static
TYPE_NAME	470:7	470:7	3	void
LEAF_NODE	470:7	470:7	4	void
FUNCTION_NAME	471:0	471:0	2	cpTags
LEAF_NODE	471:0	471:0	3	cpTags
PARAMETER_LIST	471:6	471:26	2	( TIFF * in , TIFF * out )
LEAF_NODE	471:6	471:6	3	(
PARAMETER_DECL	471:7	471:13	3	TIFF * in
TYPE	471:7	471:11	4	TIFF *
TYPE_NAME	471:7	471:7	5	TIFF
LEAF_NODE	471:7	471:7	6	TIFF
POINTER	471:11	471:11	5	*
LEAF_NODE	471:11	471:11	6	*
NAME	471:13	471:13	4	in
LEAF_NODE	471:13	471:13	5	in
LEAF_NODE	471:15	471:15	3	,
PARAMETER_DECL	471:17	471:23	3	TIFF * out
TYPE	471:17	471:21	4	TIFF *
TYPE_NAME	471:17	471:17	5	TIFF
LEAF_NODE	471:17	471:17	6	TIFF
POINTER	471:21	471:21	5	*
LEAF_NODE	471:21	471:21	6	*
NAME	471:23	471:23	4	out
LEAF_NODE	471:23	471:23	5	out
LEAF_NODE	471:26	471:26	3	)
LEAF_NODE	472:0	472:0	2	{
STATEMENTS	473:4	474:4	2	
SIMPLE_DECL	473:4	473:19	3	struct cpTag * p ;
VAR_DECL	473:4	473:18	4	struct cpTag * p
TYPE	473:4	473:17	5	struct cpTag *
TYPE_NAME	473:4	473:11	6	struct cpTag
LEAF_NODE	473:4	473:4	7	struct
LEAF_NODE	473:11	473:11	7	cpTag
POINTER	473:17	473:17	6	*
LEAF_NODE	473:17	473:17	7	*
NAME	473:18	473:18	5	p
LEAF_NODE	473:18	473:18	6	p
LEAF_NODE	473:19	473:19	4	;
ITERATION	474:4	475:4	3	
KEYWORD	474:4	474:4	4	for
LEAF_NODE	474:4	474:4	5	for
LEAF_NODE	474:8	474:8	4	(
FOR_INIT	474:9	474:17	4	p = tags ;
EXPR	474:9	474:9	5	p = tags
ASSIGN	474:9	474:13	6	p = tags
LVAL	474:9	474:9	7	p
FIELD	474:9	474:9	8	p
LEAF_NODE	474:9	474:9	9	p
ASSIGN_OP	474:11	474:11	7	=
LEAF_NODE	474:11	474:11	8	=
RVAL	474:13	474:13	7	tags
FIELD	474:13	474:13	8	tags
LEAF_NODE	474:13	474:13	9	tags
LEAF_NODE	474:17	474:17	5	;
CONDITION	474:19	474:19	4	p < & tags [ NTAGS ]
EXPR	474:19	474:23	5	p < & tags [ NTAGS ]
FIELD	474:19	474:19	6	p
LEAF_NODE	474:19	474:19	7	p
REL_OPERATOR	474:21	474:21	6	<
LEAF_NODE	474:21	474:21	7	<
UNARY_EXPR	474:23	474:24	6	& tags [ NTAGS ]
UNARY_OPERATOR	474:23	474:23	7	&
LEAF_NODE	474:23	474:23	8	&
FIELD	474:24	474:34	7	tags [ NTAGS ]
LEAF_NODE	474:24	474:24	8	tags
LEAF_NODE	474:28	474:28	8	[
EXPR	474:29	474:29	8	NTAGS
FIELD	474:29	474:29	9	NTAGS
LEAF_NODE	474:29	474:29	10	NTAGS
LEAF_NODE	474:34	474:34	8	]
LEAF_NODE	474:35	474:35	4	;
FOR_EXPR	474:37	474:37	4	p ++
EXPR	474:37	474:37	5	p ++
FIELD	474:37	474:38	6	p ++
LEAF_NODE	474:37	474:37	7	p
LEAF_NODE	474:38	474:38	7	++
LEAF_NODE	474:40	474:40	4	)
STATEMENTS	475:4	491:4	4	
LEAF_NODE	475:4	475:4	5	{
STATEMENTS	476:8	490:8	5	
SELECTION	476:8	477:8	6	
KEYWORD	476:8	476:8	7	if
LEAF_NODE	476:8	476:8	8	if
LEAF_NODE	476:10	476:10	7	(
CONDITION	476:12	476:12	7	p -> tag == TIFFTAG_GROUP3OPTIONS
EXPR	476:12	476:22	8	p -> tag == TIFFTAG_GROUP3OPTIONS
FIELD	476:12	476:15	9	p -> tag
LEAF_NODE	476:12	476:12	10	p
LEAF_NODE	476:13	476:13	10	->
LEAF_NODE	476:15	476:15	10	tag
EQ_OPERATOR	476:19	476:19	9	==
LEAF_NODE	476:19	476:19	10	==
FIELD	476:22	476:22	9	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	476:22	476:22	10	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	476:44	476:44	7	)
STATEMENTS	477:8	482:8	7	
LEAF_NODE	477:8	477:8	8	{
STATEMENTS	478:12	479:12	8	
SIMPLE_DECL	478:12	478:30	9	uint16 compression ;
VAR_DECL	478:12	478:19	10	uint16 compression
TYPE	478:12	478:12	11	uint16
TYPE_NAME	478:12	478:12	12	uint16
LEAF_NODE	478:12	478:12	13	uint16
NAME	478:19	478:19	11	compression
LEAF_NODE	478:19	478:19	12	compression
LEAF_NODE	478:30	478:30	10	;
SELECTION	479:12	481:16	9	
KEYWORD	479:12	479:12	10	if
LEAF_NODE	479:12	479:12	11	if
LEAF_NODE	479:14	479:14	10	(
CONDITION	479:16	479:16	10	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX3
EXPR	479:16	479:16	11	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX3
OR	479:16	480:20	12	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX3
EXPR	479:16	479:16	13	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_EXPR	479:16	479:17	14	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_OPERATOR	479:16	479:16	15	!
LEAF_NODE	479:16	479:16	16	!
FUNCTION_CALL	479:17	479:67	15	TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
CALLEE	479:17	479:17	16	TIFFGetField
LEAF_NODE	479:17	479:17	17	TIFFGetField
LEAF_NODE	479:29	479:29	16	(
ARGUMENT	479:30	479:30	16	in
FIELD	479:30	479:30	17	in
LEAF_NODE	479:30	479:30	18	in
LEAF_NODE	479:32	479:32	16	,
ARGUMENT	479:34	479:34	16	TIFFTAG_COMPRESSION
FIELD	479:34	479:34	17	TIFFTAG_COMPRESSION
LEAF_NODE	479:34	479:34	18	TIFFTAG_COMPRESSION
LEAF_NODE	479:53	479:53	16	,
ARGUMENT	479:55	479:55	16	& compression
UNARY_EXPR	479:55	479:56	17	& compression
UNARY_OPERATOR	479:55	479:55	18	&
LEAF_NODE	479:55	479:55	19	&
FIELD	479:56	479:56	18	compression
LEAF_NODE	479:56	479:56	19	compression
LEAF_NODE	479:67	479:67	16	)
LEAF_NODE	479:69	479:69	13	||
EXPR	480:20	480:35	13	compression != COMPRESSION_CCITTFAX3
FIELD	480:20	480:20	14	compression
LEAF_NODE	480:20	480:20	15	compression
EQ_OPERATOR	480:32	480:32	14	!=
LEAF_NODE	480:32	480:32	15	!=
FIELD	480:35	480:35	14	COMPRESSION_CCITTFAX3
LEAF_NODE	480:35	480:35	15	COMPRESSION_CCITTFAX3
LEAF_NODE	480:57	480:57	10	)
STATEMENTS	481:16	481:16	10	
JUMP_STATEMENT	481:16	481:24	11	continue DESTINATION ;
KEYWORD	481:16	481:16	12	continue
LEAF_NODE	481:16	481:16	13	continue
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	481:24	481:24	12	;
LEAF_NODE	482:8	482:8	8	}
SELECTION	483:8	484:8	6	
KEYWORD	483:8	483:8	7	if
LEAF_NODE	483:8	483:8	8	if
LEAF_NODE	483:10	483:10	7	(
CONDITION	483:12	483:12	7	p -> tag == TIFFTAG_GROUP4OPTIONS
EXPR	483:12	483:22	8	p -> tag == TIFFTAG_GROUP4OPTIONS
FIELD	483:12	483:15	9	p -> tag
LEAF_NODE	483:12	483:12	10	p
LEAF_NODE	483:13	483:13	10	->
LEAF_NODE	483:15	483:15	10	tag
EQ_OPERATOR	483:19	483:19	9	==
LEAF_NODE	483:19	483:19	10	==
FIELD	483:22	483:22	9	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	483:22	483:22	10	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	483:44	483:44	7	)
STATEMENTS	484:8	489:8	7	
LEAF_NODE	484:8	484:8	8	{
STATEMENTS	485:12	486:12	8	
SIMPLE_DECL	485:12	485:30	9	uint16 compression ;
VAR_DECL	485:12	485:19	10	uint16 compression
TYPE	485:12	485:12	11	uint16
TYPE_NAME	485:12	485:12	12	uint16
LEAF_NODE	485:12	485:12	13	uint16
NAME	485:19	485:19	11	compression
LEAF_NODE	485:19	485:19	12	compression
LEAF_NODE	485:30	485:30	10	;
SELECTION	486:12	488:16	9	
KEYWORD	486:12	486:12	10	if
LEAF_NODE	486:12	486:12	11	if
LEAF_NODE	486:14	486:14	10	(
CONDITION	486:16	486:16	10	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX4
EXPR	486:16	486:16	11	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX4
OR	486:16	487:20	12	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX4
EXPR	486:16	486:16	13	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_EXPR	486:16	486:17	14	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_OPERATOR	486:16	486:16	15	!
LEAF_NODE	486:16	486:16	16	!
FUNCTION_CALL	486:17	486:67	15	TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
CALLEE	486:17	486:17	16	TIFFGetField
LEAF_NODE	486:17	486:17	17	TIFFGetField
LEAF_NODE	486:29	486:29	16	(
ARGUMENT	486:30	486:30	16	in
FIELD	486:30	486:30	17	in
LEAF_NODE	486:30	486:30	18	in
LEAF_NODE	486:32	486:32	16	,
ARGUMENT	486:34	486:34	16	TIFFTAG_COMPRESSION
FIELD	486:34	486:34	17	TIFFTAG_COMPRESSION
LEAF_NODE	486:34	486:34	18	TIFFTAG_COMPRESSION
LEAF_NODE	486:53	486:53	16	,
ARGUMENT	486:55	486:55	16	& compression
UNARY_EXPR	486:55	486:56	17	& compression
UNARY_OPERATOR	486:55	486:55	18	&
LEAF_NODE	486:55	486:55	19	&
FIELD	486:56	486:56	18	compression
LEAF_NODE	486:56	486:56	19	compression
LEAF_NODE	486:67	486:67	16	)
LEAF_NODE	486:69	486:69	13	||
EXPR	487:20	487:35	13	compression != COMPRESSION_CCITTFAX4
FIELD	487:20	487:20	14	compression
LEAF_NODE	487:20	487:20	15	compression
EQ_OPERATOR	487:32	487:32	14	!=
LEAF_NODE	487:32	487:32	15	!=
FIELD	487:35	487:35	14	COMPRESSION_CCITTFAX4
LEAF_NODE	487:35	487:35	15	COMPRESSION_CCITTFAX4
LEAF_NODE	487:57	487:57	10	)
STATEMENTS	488:16	488:16	10	
JUMP_STATEMENT	488:16	488:24	11	continue DESTINATION ;
KEYWORD	488:16	488:16	12	continue
LEAF_NODE	488:16	488:16	13	continue
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	488:24	488:24	12	;
LEAF_NODE	489:8	489:8	8	}
EXPR_STATEMENT	490:8	490:49	6	cpTag ( in , out , p -> tag , p -> count , p -> type ) ;
EXPR	490:8	490:8	7	cpTag ( in , out , p -> tag , p -> count , p -> type )
FUNCTION_CALL	490:8	490:48	8	cpTag ( in , out , p -> tag , p -> count , p -> type )
CALLEE	490:8	490:8	9	cpTag
LEAF_NODE	490:8	490:8	10	cpTag
LEAF_NODE	490:13	490:13	9	(
ARGUMENT	490:14	490:14	9	in
FIELD	490:14	490:14	10	in
LEAF_NODE	490:14	490:14	11	in
LEAF_NODE	490:16	490:16	9	,
ARGUMENT	490:18	490:18	9	out
FIELD	490:18	490:18	10	out
LEAF_NODE	490:18	490:18	11	out
LEAF_NODE	490:21	490:21	9	,
ARGUMENT	490:23	490:23	9	p -> tag
FIELD	490:23	490:26	10	p -> tag
LEAF_NODE	490:23	490:23	11	p
LEAF_NODE	490:24	490:24	11	->
LEAF_NODE	490:26	490:26	11	tag
LEAF_NODE	490:29	490:29	9	,
ARGUMENT	490:31	490:31	9	p -> count
FIELD	490:31	490:34	10	p -> count
LEAF_NODE	490:31	490:31	11	p
LEAF_NODE	490:32	490:32	11	->
LEAF_NODE	490:34	490:34	11	count
LEAF_NODE	490:39	490:39	9	,
ARGUMENT	490:41	490:41	9	p -> type
FIELD	490:41	490:44	10	p -> type
LEAF_NODE	490:41	490:41	11	p
LEAF_NODE	490:42	490:42	11	->
LEAF_NODE	490:44	490:44	11	type
LEAF_NODE	490:48	490:48	9	)
LEAF_NODE	490:49	490:49	7	;
LEAF_NODE	491:4	491:4	5	}
LEAF_NODE	492:0	492:0	2	}
FUNCTION_DEF	517:0	528:0	1	
RETURN_TYPE	517:0	517:7	2	static void
LEAF_NODE	517:0	517:0	3	static
TYPE_NAME	517:7	517:7	3	void
LEAF_NODE	517:7	517:7	4	void
FUNCTION_NAME	518:0	518:0	2	usage
LEAF_NODE	518:0	518:0	3	usage
PARAMETER_LIST	518:5	518:10	2	( void )
LEAF_NODE	518:5	518:5	3	(
PARAMETER_DECL	518:6	518:6	3	void
LEAF_NODE	518:6	518:6	4	void
LEAF_NODE	518:10	518:10	3	)
LEAF_NODE	519:0	519:0	2	{
STATEMENTS	520:1	527:1	2	
SIMPLE_DECL	520:1	520:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	520:1	520:6	4	char [ BUFSIZ ] buf
TYPE	520:1	520:9	5	char [ BUFSIZ ]
TYPE_NAME	520:1	520:1	6	char
LEAF_NODE	520:1	520:1	7	char
TYPE_SUFFIX	520:9	520:16	6	[ BUFSIZ ]
LEAF_NODE	520:9	520:9	7	[
FIELD	520:10	520:10	7	BUFSIZ
LEAF_NODE	520:10	520:10	8	BUFSIZ
LEAF_NODE	520:16	520:16	7	]
NAME	520:6	520:6	5	buf
LEAF_NODE	520:6	520:6	6	buf
LEAF_NODE	520:17	520:17	4	;
SIMPLE_DECL	521:1	521:6	3	int i ;
VAR_DECL	521:1	521:5	4	int i
TYPE	521:1	521:1	5	int
TYPE_NAME	521:1	521:1	6	int
LEAF_NODE	521:1	521:1	7	int
NAME	521:5	521:5	5	i
LEAF_NODE	521:5	521:5	6	i
LEAF_NODE	521:6	521:6	4	;
EXPR_STATEMENT	523:1	523:20	3	setbuf ( stderr , buf ) ;
EXPR	523:1	523:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	523:1	523:19	5	setbuf ( stderr , buf )
CALLEE	523:1	523:1	6	setbuf
LEAF_NODE	523:1	523:1	7	setbuf
LEAF_NODE	523:7	523:7	6	(
ARGUMENT	523:8	523:8	6	stderr
FIELD	523:8	523:8	7	stderr
LEAF_NODE	523:8	523:8	8	stderr
LEAF_NODE	523:14	523:14	6	,
ARGUMENT	523:16	523:16	6	buf
FIELD	523:16	523:16	7	buf
LEAF_NODE	523:16	523:16	8	buf
LEAF_NODE	523:19	523:19	6	)
LEAF_NODE	523:20	523:20	4	;
EXPR_STATEMENT	524:8	524:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	524:8	524:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	524:8	524:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	524:8	524:8	6	fprintf
LEAF_NODE	524:8	524:8	7	fprintf
LEAF_NODE	524:15	524:15	6	(
ARGUMENT	524:16	524:16	6	stderr
FIELD	524:16	524:16	7	stderr
LEAF_NODE	524:16	524:16	8	stderr
LEAF_NODE	524:22	524:22	6	,
ARGUMENT	524:24	524:24	6	"%s\n\n"
FIELD	524:24	524:24	7	"%s\n\n"
LEAF_NODE	524:24	524:24	8	"%s\n\n"
LEAF_NODE	524:32	524:32	6	,
ARGUMENT	524:34	524:34	6	TIFFGetVersion ( )
FUNCTION_CALL	524:34	524:49	7	TIFFGetVersion ( )
CALLEE	524:34	524:34	8	TIFFGetVersion
LEAF_NODE	524:34	524:34	9	TIFFGetVersion
LEAF_NODE	524:48	524:48	8	(
LEAF_NODE	524:49	524:49	8	)
LEAF_NODE	524:50	524:50	6	)
LEAF_NODE	524:51	524:51	4	;
ITERATION	525:1	526:2	3	
KEYWORD	525:1	525:1	4	for
LEAF_NODE	525:1	525:1	5	for
LEAF_NODE	525:5	525:5	4	(
FOR_INIT	525:6	525:11	4	i = 0 ;
EXPR	525:6	525:6	5	i = 0
ASSIGN	525:6	525:10	6	i = 0
LVAL	525:6	525:6	7	i
FIELD	525:6	525:6	8	i
LEAF_NODE	525:6	525:6	9	i
ASSIGN_OP	525:8	525:8	7	=
LEAF_NODE	525:8	525:8	8	=
RVAL	525:10	525:10	7	0
FIELD	525:10	525:10	8	0
LEAF_NODE	525:10	525:10	9	0
LEAF_NODE	525:11	525:11	5	;
CONDITION	525:13	525:13	4	stuff [ i ] != NULL
EXPR	525:13	525:25	5	stuff [ i ] != NULL
FIELD	525:13	525:20	6	stuff [ i ]
LEAF_NODE	525:13	525:13	7	stuff
LEAF_NODE	525:18	525:18	7	[
EXPR	525:19	525:19	7	i
FIELD	525:19	525:19	8	i
LEAF_NODE	525:19	525:19	9	i
LEAF_NODE	525:20	525:20	7	]
EQ_OPERATOR	525:22	525:22	6	!=
LEAF_NODE	525:22	525:22	7	!=
FIELD	525:25	525:25	6	NULL
LEAF_NODE	525:25	525:25	7	NULL
LEAF_NODE	525:29	525:29	4	;
FOR_EXPR	525:31	525:31	4	i ++
EXPR	525:31	525:31	5	i ++
FIELD	525:31	525:32	6	i ++
LEAF_NODE	525:31	525:31	7	i
LEAF_NODE	525:32	525:32	7	++
LEAF_NODE	525:34	525:34	4	)
STATEMENTS	526:2	526:2	4	
EXPR_STATEMENT	526:2	526:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	526:2	526:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	526:2	526:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	526:2	526:2	8	fprintf
LEAF_NODE	526:2	526:2	9	fprintf
LEAF_NODE	526:9	526:9	8	(
ARGUMENT	526:10	526:10	8	stderr
FIELD	526:10	526:10	9	stderr
LEAF_NODE	526:10	526:10	10	stderr
LEAF_NODE	526:16	526:16	8	,
ARGUMENT	526:18	526:18	8	"%s\n"
FIELD	526:18	526:18	9	"%s\n"
LEAF_NODE	526:18	526:18	10	"%s\n"
LEAF_NODE	526:24	526:24	8	,
ARGUMENT	526:26	526:26	8	stuff [ i ]
FIELD	526:26	526:33	9	stuff [ i ]
LEAF_NODE	526:26	526:26	10	stuff
LEAF_NODE	526:31	526:31	10	[
EXPR	526:32	526:32	10	i
FIELD	526:32	526:32	11	i
LEAF_NODE	526:32	526:32	12	i
LEAF_NODE	526:33	526:33	10	]
LEAF_NODE	526:34	526:34	8	)
LEAF_NODE	526:35	526:35	6	;
EXPR_STATEMENT	527:1	527:9	3	exit ( - 1 ) ;
EXPR	527:1	527:1	4	exit ( - 1 )
FUNCTION_CALL	527:1	527:8	5	exit ( - 1 )
CALLEE	527:1	527:1	6	exit
LEAF_NODE	527:1	527:1	7	exit
LEAF_NODE	527:5	527:5	6	(
ARGUMENT	527:6	527:6	6	- 1
UNARY_EXPR	527:6	527:7	7	- 1
UNARY_OPERATOR	527:6	527:6	8	-
LEAF_NODE	527:6	527:6	9	-
FIELD	527:7	527:7	8	1
LEAF_NODE	527:7	527:7	9	1
LEAF_NODE	527:8	527:8	6	)
LEAF_NODE	527:9	527:9	4	;
LEAF_NODE	528:0	528:0	2	}
