SOURCE_FILE	43:0	293:0	0	
FUNCTION_DEF	43:0	291:0	1	
RETURN_TYPE	43:0	43:0	2	int
TYPE_NAME	43:0	43:0	3	int
LEAF_NODE	43:0	43:0	4	int
FUNCTION_NAME	43:4	43:4	2	test
LEAF_NODE	43:4	43:4	3	test
PARAMETER_LIST	43:8	43:46	2	( int classictif , int height , int tiled )
LEAF_NODE	43:8	43:8	3	(
PARAMETER_DECL	43:9	43:13	3	int classictif
TYPE	43:9	43:9	4	int
TYPE_NAME	43:9	43:9	5	int
LEAF_NODE	43:9	43:9	6	int
NAME	43:13	43:13	4	classictif
LEAF_NODE	43:13	43:13	5	classictif
LEAF_NODE	43:23	43:23	3	,
PARAMETER_DECL	43:25	43:29	3	int height
TYPE	43:25	43:25	4	int
TYPE_NAME	43:25	43:25	5	int
LEAF_NODE	43:25	43:25	6	int
NAME	43:29	43:29	4	height
LEAF_NODE	43:29	43:29	5	height
LEAF_NODE	43:35	43:35	3	,
PARAMETER_DECL	43:37	43:41	3	int tiled
TYPE	43:37	43:37	4	int
TYPE_NAME	43:37	43:37	5	int
LEAF_NODE	43:37	43:37	6	int
NAME	43:41	43:41	4	tiled
LEAF_NODE	43:41	43:41	5	tiled
LEAF_NODE	43:46	43:46	3	)
LEAF_NODE	44:0	44:0	2	{
STATEMENTS	45:4	290:4	2	
SIMPLE_DECL	45:4	45:53	3	const char * filename ; filename = "defer_strile_loading.tif" ;
VAR_DECL	45:4	45:16	4	const char * filename ; filename = "defer_strile_loading.tif"
TYPE	45:4	45:14	5	const char *
TYPE_NAME	45:4	45:10	6	const char
LEAF_NODE	45:4	45:4	7	const
LEAF_NODE	45:10	45:10	7	char
POINTER	45:14	45:14	6	*
LEAF_NODE	45:14	45:14	7	*
NAME	45:16	45:16	5	filename
LEAF_NODE	45:16	45:16	6	filename
LEAF_NODE	0:0	0:0	5	;
INIT	45:16	45:16	5	filename = "defer_strile_loading.tif"
ASSIGN	45:16	45:27	6	filename = "defer_strile_loading.tif"
LVAL	45:16	45:16	7	filename
NAME	45:16	45:16	8	filename
LEAF_NODE	45:16	45:16	9	filename
ASSIGN_OP	45:25	45:25	7	=
LEAF_NODE	45:25	45:25	8	=
RVAL	45:27	45:27	7	"defer_strile_loading.tif"
FIELD	45:27	45:27	8	"defer_strile_loading.tif"
LEAF_NODE	45:27	45:27	9	"defer_strile_loading.tif"
LEAF_NODE	45:53	45:53	4	;
SIMPLE_DECL	46:4	46:13	3	TIFF * tif ;
VAR_DECL	46:4	46:10	4	TIFF * tif
TYPE	46:4	46:8	5	TIFF *
TYPE_NAME	46:4	46:4	6	TIFF
LEAF_NODE	46:4	46:4	7	TIFF
POINTER	46:8	46:8	6	*
LEAF_NODE	46:8	46:8	7	*
NAME	46:10	46:10	5	tif
LEAF_NODE	46:10	46:10	6	tif
LEAF_NODE	46:13	46:13	4	;
SIMPLE_DECL	47:4	47:9	3	int i ;
VAR_DECL	47:4	47:8	4	int i
TYPE	47:4	47:4	5	int
TYPE_NAME	47:4	47:4	6	int
LEAF_NODE	47:4	47:4	7	int
NAME	47:8	47:8	5	i
LEAF_NODE	47:8	47:8	6	i
LEAF_NODE	47:9	47:9	4	;
SIMPLE_DECL	48:4	48:15	3	int ret ; ret = 0 ;
VAR_DECL	48:4	48:8	4	int ret ; ret = 0
TYPE	48:4	48:4	5	int
TYPE_NAME	48:4	48:4	6	int
LEAF_NODE	48:4	48:4	7	int
NAME	48:8	48:8	5	ret
LEAF_NODE	48:8	48:8	6	ret
LEAF_NODE	0:0	0:0	5	;
INIT	48:8	48:8	5	ret = 0
ASSIGN	48:8	48:14	6	ret = 0
LVAL	48:8	48:8	7	ret
NAME	48:8	48:8	8	ret
LEAF_NODE	48:8	48:8	9	ret
ASSIGN_OP	48:12	48:12	7	=
LEAF_NODE	48:12	48:12	8	=
RVAL	48:14	48:14	7	0
FIELD	48:14	48:14	8	0
LEAF_NODE	48:14	48:14	9	0
LEAF_NODE	48:15	48:15	4	;
SIMPLE_DECL	49:4	49:11	3	FILE * f ;
VAR_DECL	49:4	49:10	4	FILE * f
TYPE	49:4	49:8	5	FILE *
TYPE_NAME	49:4	49:4	6	FILE
LEAF_NODE	49:4	49:4	7	FILE
POINTER	49:8	49:8	6	*
LEAF_NODE	49:8	49:8	7	*
NAME	49:10	49:10	5	f
LEAF_NODE	49:10	49:10	6	f
LEAF_NODE	49:11	49:11	4	;
EXPR_STATEMENT	51:4	51:13	3	( void ) ret ;
EXPR	51:4	51:10	4	( void ) ret
LEAF_NODE	51:4	51:4	5	(
TYPE_NAME	51:5	51:5	5	void
LEAF_NODE	51:5	51:5	6	void
LEAF_NODE	51:9	51:9	5	)
FIELD	51:10	51:10	5	ret
LEAF_NODE	51:10	51:10	6	ret
LEAF_NODE	51:13	51:13	4	;
EXPR_STATEMENT	53:4	53:57	3	tif = TIFFOpen ( filename , classictif ? "wDO" : "w8DO" ) ;
EXPR	53:4	53:4	4	tif = TIFFOpen ( filename , classictif ? "wDO" : "w8DO" )
ASSIGN	53:4	53:10	5	tif = TIFFOpen ( filename , classictif ? "wDO" : "w8DO" )
LVAL	53:4	53:4	6	tif
FIELD	53:4	53:4	7	tif
LEAF_NODE	53:4	53:4	8	tif
ASSIGN_OP	53:8	53:8	6	=
LEAF_NODE	53:8	53:8	7	=
RVAL	53:10	53:10	6	TIFFOpen ( filename , classictif ? "wDO" : "w8DO" )
FUNCTION_CALL	53:10	53:56	7	TIFFOpen ( filename , classictif ? "wDO" : "w8DO" )
CALLEE	53:10	53:10	8	TIFFOpen
LEAF_NODE	53:10	53:10	9	TIFFOpen
LEAF_NODE	53:18	53:18	8	(
ARGUMENT	53:19	53:19	8	filename
FIELD	53:19	53:19	9	filename
LEAF_NODE	53:19	53:19	10	filename
LEAF_NODE	53:27	53:27	8	,
ARGUMENT	53:29	53:29	8	classictif ? "wDO" : "w8DO"
COND_EXPR	53:29	53:50	9	classictif ? "wDO" : "w8DO"
CONDITION	53:29	53:29	10	classictif
FIELD	53:29	53:29	11	classictif
LEAF_NODE	53:29	53:29	12	classictif
LEAF_NODE	53:40	53:40	10	?
EXPR	53:42	53:42	10	"wDO"
FIELD	53:42	53:42	11	"wDO"
LEAF_NODE	53:42	53:42	12	"wDO"
LEAF_NODE	53:48	53:48	10	:
FIELD	53:50	53:50	10	"w8DO"
LEAF_NODE	53:50	53:50	11	"w8DO"
LEAF_NODE	53:56	53:56	8	)
LEAF_NODE	53:57	53:57	4	;
SELECTION	54:4	55:4	3	
KEYWORD	54:4	54:4	4	if
LEAF_NODE	54:4	54:4	5	if
LEAF_NODE	54:6	54:6	4	(
CONDITION	54:7	54:7	4	! tif
EXPR	54:7	54:7	5	! tif
UNARY_EXPR	54:7	54:8	6	! tif
UNARY_OPERATOR	54:7	54:7	7	!
LEAF_NODE	54:7	54:7	8	!
FIELD	54:8	54:8	7	tif
LEAF_NODE	54:8	54:8	8	tif
LEAF_NODE	54:11	54:11	4	)
STATEMENTS	55:4	58:4	4	
LEAF_NODE	55:4	55:4	5	{
STATEMENTS	56:8	57:8	5	
EXPR_STATEMENT	56:8	56:55	6	fprintf ( stderr , "cannot create %s\n" , filename ) ;
EXPR	56:8	56:8	7	fprintf ( stderr , "cannot create %s\n" , filename )
FUNCTION_CALL	56:8	56:54	8	fprintf ( stderr , "cannot create %s\n" , filename )
CALLEE	56:8	56:8	9	fprintf
LEAF_NODE	56:8	56:8	10	fprintf
LEAF_NODE	56:15	56:15	9	(
ARGUMENT	56:16	56:16	9	stderr
FIELD	56:16	56:16	10	stderr
LEAF_NODE	56:16	56:16	11	stderr
LEAF_NODE	56:22	56:22	9	,
ARGUMENT	56:24	56:24	9	"cannot create %s\n"
FIELD	56:24	56:24	10	"cannot create %s\n"
LEAF_NODE	56:24	56:24	11	"cannot create %s\n"
LEAF_NODE	56:44	56:44	9	,
ARGUMENT	56:46	56:46	9	filename
FIELD	56:46	56:46	10	filename
LEAF_NODE	56:46	56:46	11	filename
LEAF_NODE	56:54	56:54	9	)
LEAF_NODE	56:55	56:55	7	;
JUMP_STATEMENT	57:8	57:16	6	return 1 ;
KEYWORD	57:8	57:8	7	return
LEAF_NODE	57:8	57:8	8	return
DESTINATION	57:15	57:15	7	1
EXPR	57:15	57:15	8	1
FIELD	57:15	57:15	9	1
LEAF_NODE	57:15	57:15	10	1
LEAF_NODE	57:16	57:16	7	;
LEAF_NODE	58:4	58:4	5	}
EXPR_STATEMENT	59:4	59:66	3	ret = TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE ) ;
EXPR	59:4	59:4	4	ret = TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
ASSIGN	59:4	59:10	5	ret = TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
LVAL	59:4	59:4	6	ret
FIELD	59:4	59:4	7	ret
LEAF_NODE	59:4	59:4	8	ret
ASSIGN_OP	59:8	59:8	6	=
LEAF_NODE	59:8	59:8	7	=
RVAL	59:10	59:10	6	TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
FUNCTION_CALL	59:10	59:65	7	TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
CALLEE	59:10	59:10	8	TIFFSetField
LEAF_NODE	59:10	59:10	9	TIFFSetField
LEAF_NODE	59:22	59:22	8	(
ARGUMENT	59:23	59:23	8	tif
FIELD	59:23	59:23	9	tif
LEAF_NODE	59:23	59:23	10	tif
LEAF_NODE	59:26	59:26	8	,
ARGUMENT	59:28	59:28	8	TIFFTAG_COMPRESSION
FIELD	59:28	59:28	9	TIFFTAG_COMPRESSION
LEAF_NODE	59:28	59:28	10	TIFFTAG_COMPRESSION
LEAF_NODE	59:47	59:47	8	,
ARGUMENT	59:49	59:49	8	COMPRESSION_NONE
FIELD	59:49	59:49	9	COMPRESSION_NONE
LEAF_NODE	59:49	59:49	10	COMPRESSION_NONE
LEAF_NODE	59:65	59:65	8	)
LEAF_NODE	59:66	59:66	4	;
EXPR_STATEMENT	60:4	60:15	3	assert ( ret ) ;
EXPR	60:4	60:4	4	assert ( ret )
FUNCTION_CALL	60:4	60:14	5	assert ( ret )
CALLEE	60:4	60:4	6	assert
LEAF_NODE	60:4	60:4	7	assert
LEAF_NODE	60:10	60:10	6	(
ARGUMENT	60:11	60:11	6	ret
FIELD	60:11	60:11	7	ret
LEAF_NODE	60:11	60:11	8	ret
LEAF_NODE	60:14	60:14	6	)
LEAF_NODE	60:15	60:15	4	;
EXPR_STATEMENT	61:4	61:50	3	ret = TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 ) ;
EXPR	61:4	61:4	4	ret = TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
ASSIGN	61:4	61:10	5	ret = TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
LVAL	61:4	61:4	6	ret
FIELD	61:4	61:4	7	ret
LEAF_NODE	61:4	61:4	8	ret
ASSIGN_OP	61:8	61:8	6	=
LEAF_NODE	61:8	61:8	7	=
RVAL	61:10	61:10	6	TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
FUNCTION_CALL	61:10	61:49	7	TIFFSetField ( tif , TIFFTAG_IMAGEWIDTH , 1 )
CALLEE	61:10	61:10	8	TIFFSetField
LEAF_NODE	61:10	61:10	9	TIFFSetField
LEAF_NODE	61:22	61:22	8	(
ARGUMENT	61:23	61:23	8	tif
FIELD	61:23	61:23	9	tif
LEAF_NODE	61:23	61:23	10	tif
LEAF_NODE	61:26	61:26	8	,
ARGUMENT	61:28	61:28	8	TIFFTAG_IMAGEWIDTH
FIELD	61:28	61:28	9	TIFFTAG_IMAGEWIDTH
LEAF_NODE	61:28	61:28	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	61:46	61:46	8	,
ARGUMENT	61:48	61:48	8	1
FIELD	61:48	61:48	9	1
LEAF_NODE	61:48	61:48	10	1
LEAF_NODE	61:49	61:49	8	)
LEAF_NODE	61:50	61:50	4	;
EXPR_STATEMENT	62:4	62:15	3	assert ( ret ) ;
EXPR	62:4	62:4	4	assert ( ret )
FUNCTION_CALL	62:4	62:14	5	assert ( ret )
CALLEE	62:4	62:4	6	assert
LEAF_NODE	62:4	62:4	7	assert
LEAF_NODE	62:10	62:10	6	(
ARGUMENT	62:11	62:11	6	ret
FIELD	62:11	62:11	7	ret
LEAF_NODE	62:11	62:11	8	ret
LEAF_NODE	62:14	62:14	6	)
LEAF_NODE	62:15	62:15	4	;
EXPR_STATEMENT	63:4	63:56	3	ret = TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , height ) ;
EXPR	63:4	63:4	4	ret = TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , height )
ASSIGN	63:4	63:10	5	ret = TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , height )
LVAL	63:4	63:4	6	ret
FIELD	63:4	63:4	7	ret
LEAF_NODE	63:4	63:4	8	ret
ASSIGN_OP	63:8	63:8	6	=
LEAF_NODE	63:8	63:8	7	=
RVAL	63:10	63:10	6	TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , height )
FUNCTION_CALL	63:10	63:55	7	TIFFSetField ( tif , TIFFTAG_IMAGELENGTH , height )
CALLEE	63:10	63:10	8	TIFFSetField
LEAF_NODE	63:10	63:10	9	TIFFSetField
LEAF_NODE	63:22	63:22	8	(
ARGUMENT	63:23	63:23	8	tif
FIELD	63:23	63:23	9	tif
LEAF_NODE	63:23	63:23	10	tif
LEAF_NODE	63:26	63:26	8	,
ARGUMENT	63:28	63:28	8	TIFFTAG_IMAGELENGTH
FIELD	63:28	63:28	9	TIFFTAG_IMAGELENGTH
LEAF_NODE	63:28	63:28	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	63:47	63:47	8	,
ARGUMENT	63:49	63:49	8	height
FIELD	63:49	63:49	9	height
LEAF_NODE	63:49	63:49	10	height
LEAF_NODE	63:55	63:55	8	)
LEAF_NODE	63:56	63:56	4	;
EXPR_STATEMENT	64:4	64:15	3	assert ( ret ) ;
EXPR	64:4	64:4	4	assert ( ret )
FUNCTION_CALL	64:4	64:14	5	assert ( ret )
CALLEE	64:4	64:4	6	assert
LEAF_NODE	64:4	64:4	7	assert
LEAF_NODE	64:10	64:10	6	(
ARGUMENT	64:11	64:11	6	ret
FIELD	64:11	64:11	7	ret
LEAF_NODE	64:11	64:11	8	ret
LEAF_NODE	64:14	64:14	6	)
LEAF_NODE	64:15	64:15	4	;
EXPR_STATEMENT	65:4	65:53	3	ret = TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 ) ;
EXPR	65:4	65:4	4	ret = TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
ASSIGN	65:4	65:10	5	ret = TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
LVAL	65:4	65:4	6	ret
FIELD	65:4	65:4	7	ret
LEAF_NODE	65:4	65:4	8	ret
ASSIGN_OP	65:8	65:8	6	=
LEAF_NODE	65:8	65:8	7	=
RVAL	65:10	65:10	6	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
FUNCTION_CALL	65:10	65:52	7	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
CALLEE	65:10	65:10	8	TIFFSetField
LEAF_NODE	65:10	65:10	9	TIFFSetField
LEAF_NODE	65:22	65:22	8	(
ARGUMENT	65:23	65:23	8	tif
FIELD	65:23	65:23	9	tif
LEAF_NODE	65:23	65:23	10	tif
LEAF_NODE	65:26	65:26	8	,
ARGUMENT	65:28	65:28	8	TIFFTAG_BITSPERSAMPLE
FIELD	65:28	65:28	9	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	65:28	65:28	10	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	65:49	65:49	8	,
ARGUMENT	65:51	65:51	8	8
FIELD	65:51	65:51	9	8
LEAF_NODE	65:51	65:51	10	8
LEAF_NODE	65:52	65:52	8	)
LEAF_NODE	65:53	65:53	4	;
EXPR_STATEMENT	66:4	66:15	3	assert ( ret ) ;
EXPR	66:4	66:4	4	assert ( ret )
FUNCTION_CALL	66:4	66:14	5	assert ( ret )
CALLEE	66:4	66:4	6	assert
LEAF_NODE	66:4	66:4	7	assert
LEAF_NODE	66:10	66:10	6	(
ARGUMENT	66:11	66:11	6	ret
FIELD	66:11	66:11	7	ret
LEAF_NODE	66:11	66:11	8	ret
LEAF_NODE	66:14	66:14	6	)
LEAF_NODE	66:15	66:15	4	;
EXPR_STATEMENT	67:4	67:55	3	ret = TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 ) ;
EXPR	67:4	67:4	4	ret = TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
ASSIGN	67:4	67:10	5	ret = TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
LVAL	67:4	67:4	6	ret
FIELD	67:4	67:4	7	ret
LEAF_NODE	67:4	67:4	8	ret
ASSIGN_OP	67:8	67:8	6	=
LEAF_NODE	67:8	67:8	7	=
RVAL	67:10	67:10	6	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
FUNCTION_CALL	67:10	67:54	7	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	67:10	67:10	8	TIFFSetField
LEAF_NODE	67:10	67:10	9	TIFFSetField
LEAF_NODE	67:22	67:22	8	(
ARGUMENT	67:23	67:23	8	tif
FIELD	67:23	67:23	9	tif
LEAF_NODE	67:23	67:23	10	tif
LEAF_NODE	67:26	67:26	8	,
ARGUMENT	67:28	67:28	8	TIFFTAG_SAMPLESPERPIXEL
FIELD	67:28	67:28	9	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	67:28	67:28	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	67:51	67:51	8	,
ARGUMENT	67:53	67:53	8	1
FIELD	67:53	67:53	9	1
LEAF_NODE	67:53	67:53	10	1
LEAF_NODE	67:54	67:54	8	)
LEAF_NODE	67:55	67:55	4	;
EXPR_STATEMENT	68:4	68:15	3	assert ( ret ) ;
EXPR	68:4	68:4	4	assert ( ret )
FUNCTION_CALL	68:4	68:14	5	assert ( ret )
CALLEE	68:4	68:4	6	assert
LEAF_NODE	68:4	68:4	7	assert
LEAF_NODE	68:10	68:10	6	(
ARGUMENT	68:11	68:11	6	ret
FIELD	68:11	68:11	7	ret
LEAF_NODE	68:11	68:11	8	ret
LEAF_NODE	68:14	68:14	6	)
LEAF_NODE	68:15	68:15	4	;
EXPR_STATEMENT	69:4	69:70	3	ret = TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	69:4	69:4	4	ret = TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
ASSIGN	69:4	69:10	5	ret = TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
LVAL	69:4	69:4	6	ret
FIELD	69:4	69:4	7	ret
LEAF_NODE	69:4	69:4	8	ret
ASSIGN_OP	69:8	69:8	6	=
LEAF_NODE	69:8	69:8	7	=
RVAL	69:10	69:10	6	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	69:10	69:69	7	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	69:10	69:10	8	TIFFSetField
LEAF_NODE	69:10	69:10	9	TIFFSetField
LEAF_NODE	69:22	69:22	8	(
ARGUMENT	69:23	69:23	8	tif
FIELD	69:23	69:23	9	tif
LEAF_NODE	69:23	69:23	10	tif
LEAF_NODE	69:26	69:26	8	,
ARGUMENT	69:28	69:28	8	TIFFTAG_PLANARCONFIG
FIELD	69:28	69:28	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	69:28	69:28	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	69:48	69:48	8	,
ARGUMENT	69:50	69:50	8	PLANARCONFIG_CONTIG
FIELD	69:50	69:50	9	PLANARCONFIG_CONTIG
LEAF_NODE	69:50	69:50	10	PLANARCONFIG_CONTIG
LEAF_NODE	69:69	69:69	8	)
LEAF_NODE	69:70	69:70	4	;
EXPR_STATEMENT	70:4	70:15	3	assert ( ret ) ;
EXPR	70:4	70:4	4	assert ( ret )
FUNCTION_CALL	70:4	70:14	5	assert ( ret )
CALLEE	70:4	70:4	6	assert
LEAF_NODE	70:4	70:4	7	assert
LEAF_NODE	70:10	70:10	6	(
ARGUMENT	70:11	70:11	6	ret
FIELD	70:11	70:11	7	ret
LEAF_NODE	70:11	70:11	8	ret
LEAF_NODE	70:14	70:14	6	)
LEAF_NODE	70:15	70:15	4	;
SELECTION	71:4	72:4	3	
KEYWORD	71:4	71:4	4	if
LEAF_NODE	71:4	71:4	5	if
LEAF_NODE	71:6	71:6	4	(
CONDITION	71:8	71:8	4	tiled
EXPR	71:8	71:8	5	tiled
FIELD	71:8	71:8	6	tiled
LEAF_NODE	71:8	71:8	7	tiled
LEAF_NODE	71:14	71:14	4	)
STATEMENTS	72:4	85:4	4	
LEAF_NODE	72:4	72:4	5	{
STATEMENTS	73:8	78:8	5	
SIMPLE_DECL	73:8	73:13	6	int j ;
VAR_DECL	73:8	73:12	7	int j
TYPE	73:8	73:8	8	int
TYPE_NAME	73:8	73:8	9	int
LEAF_NODE	73:8	73:8	10	int
NAME	73:12	73:12	8	j
LEAF_NODE	73:12	73:12	9	j
LEAF_NODE	73:13	73:13	7	;
EXPR_STATEMENT	74:8	74:54	6	ret = TIFFSetField ( tif , TIFFTAG_TILEWIDTH , 16 ) ;
EXPR	74:8	74:8	7	ret = TIFFSetField ( tif , TIFFTAG_TILEWIDTH , 16 )
ASSIGN	74:8	74:14	8	ret = TIFFSetField ( tif , TIFFTAG_TILEWIDTH , 16 )
LVAL	74:8	74:8	9	ret
FIELD	74:8	74:8	10	ret
LEAF_NODE	74:8	74:8	11	ret
ASSIGN_OP	74:12	74:12	9	=
LEAF_NODE	74:12	74:12	10	=
RVAL	74:14	74:14	9	TIFFSetField ( tif , TIFFTAG_TILEWIDTH , 16 )
FUNCTION_CALL	74:14	74:53	10	TIFFSetField ( tif , TIFFTAG_TILEWIDTH , 16 )
CALLEE	74:14	74:14	11	TIFFSetField
LEAF_NODE	74:14	74:14	12	TIFFSetField
LEAF_NODE	74:26	74:26	11	(
ARGUMENT	74:27	74:27	11	tif
FIELD	74:27	74:27	12	tif
LEAF_NODE	74:27	74:27	13	tif
LEAF_NODE	74:30	74:30	11	,
ARGUMENT	74:32	74:32	11	TIFFTAG_TILEWIDTH
FIELD	74:32	74:32	12	TIFFTAG_TILEWIDTH
LEAF_NODE	74:32	74:32	13	TIFFTAG_TILEWIDTH
LEAF_NODE	74:49	74:49	11	,
ARGUMENT	74:51	74:51	11	16
FIELD	74:51	74:51	12	16
LEAF_NODE	74:51	74:51	13	16
LEAF_NODE	74:53	74:53	11	)
LEAF_NODE	74:54	74:54	7	;
EXPR_STATEMENT	75:8	75:21	6	assert ( ret ) ;
EXPR	75:8	75:8	7	assert ( ret )
FUNCTION_CALL	75:8	75:20	8	assert ( ret )
CALLEE	75:8	75:8	9	assert
LEAF_NODE	75:8	75:8	10	assert
LEAF_NODE	75:14	75:14	9	(
ARGUMENT	75:16	75:16	9	ret
FIELD	75:16	75:16	10	ret
LEAF_NODE	75:16	75:16	11	ret
LEAF_NODE	75:20	75:20	9	)
LEAF_NODE	75:21	75:21	7	;
EXPR_STATEMENT	76:8	76:55	6	ret = TIFFSetField ( tif , TIFFTAG_TILELENGTH , 16 ) ;
EXPR	76:8	76:8	7	ret = TIFFSetField ( tif , TIFFTAG_TILELENGTH , 16 )
ASSIGN	76:8	76:14	8	ret = TIFFSetField ( tif , TIFFTAG_TILELENGTH , 16 )
LVAL	76:8	76:8	9	ret
FIELD	76:8	76:8	10	ret
LEAF_NODE	76:8	76:8	11	ret
ASSIGN_OP	76:12	76:12	9	=
LEAF_NODE	76:12	76:12	10	=
RVAL	76:14	76:14	9	TIFFSetField ( tif , TIFFTAG_TILELENGTH , 16 )
FUNCTION_CALL	76:14	76:54	10	TIFFSetField ( tif , TIFFTAG_TILELENGTH , 16 )
CALLEE	76:14	76:14	11	TIFFSetField
LEAF_NODE	76:14	76:14	12	TIFFSetField
LEAF_NODE	76:26	76:26	11	(
ARGUMENT	76:27	76:27	11	tif
FIELD	76:27	76:27	12	tif
LEAF_NODE	76:27	76:27	13	tif
LEAF_NODE	76:30	76:30	11	,
ARGUMENT	76:32	76:32	11	TIFFTAG_TILELENGTH
FIELD	76:32	76:32	12	TIFFTAG_TILELENGTH
LEAF_NODE	76:32	76:32	13	TIFFTAG_TILELENGTH
LEAF_NODE	76:50	76:50	11	,
ARGUMENT	76:52	76:52	11	16
FIELD	76:52	76:52	12	16
LEAF_NODE	76:52	76:52	13	16
LEAF_NODE	76:54	76:54	11	)
LEAF_NODE	76:55	76:55	7	;
EXPR_STATEMENT	77:8	77:21	6	assert ( ret ) ;
EXPR	77:8	77:8	7	assert ( ret )
FUNCTION_CALL	77:8	77:20	8	assert ( ret )
CALLEE	77:8	77:8	9	assert
LEAF_NODE	77:8	77:8	10	assert
LEAF_NODE	77:14	77:14	9	(
ARGUMENT	77:16	77:16	9	ret
FIELD	77:16	77:16	10	ret
LEAF_NODE	77:16	77:16	11	ret
LEAF_NODE	77:20	77:20	9	)
LEAF_NODE	77:21	77:21	7	;
ITERATION	78:8	79:8	6	
KEYWORD	78:8	78:8	7	for
LEAF_NODE	78:8	78:8	8	for
LEAF_NODE	78:11	78:11	7	(
FOR_INIT	78:13	78:18	7	j = 0 ;
EXPR	78:13	78:13	8	j = 0
ASSIGN	78:13	78:17	9	j = 0
LVAL	78:13	78:13	10	j
FIELD	78:13	78:13	11	j
LEAF_NODE	78:13	78:13	12	j
ASSIGN_OP	78:15	78:15	10	=
LEAF_NODE	78:15	78:15	11	=
RVAL	78:17	78:17	10	0
FIELD	78:17	78:17	11	0
LEAF_NODE	78:17	78:17	12	0
LEAF_NODE	78:18	78:18	8	;
CONDITION	78:20	78:20	7	j < ( height + 15 ) / 16
EXPR	78:20	78:38	8	j < ( height + 15 ) / 16
FIELD	78:20	78:20	9	j
LEAF_NODE	78:20	78:20	10	j
REL_OPERATOR	78:22	78:22	9	<
LEAF_NODE	78:22	78:22	10	<
LEAF_NODE	78:24	78:24	9	(
FIELD	78:25	78:25	9	height
LEAF_NODE	78:25	78:25	10	height
LEAF_NODE	78:31	78:31	9	+
FIELD	78:32	78:32	9	15
LEAF_NODE	78:32	78:32	10	15
LEAF_NODE	78:34	78:34	9	)
LEAF_NODE	78:36	78:36	9	/
FIELD	78:38	78:38	9	16
LEAF_NODE	78:38	78:38	10	16
LEAF_NODE	78:40	78:40	7	;
FOR_EXPR	78:42	78:42	7	j ++
EXPR	78:42	78:42	8	j ++
FIELD	78:42	78:43	9	j ++
LEAF_NODE	78:42	78:42	10	j
LEAF_NODE	78:43	78:43	10	++
LEAF_NODE	78:46	78:46	7	)
STATEMENTS	79:8	84:8	7	
LEAF_NODE	79:8	79:8	8	{
STATEMENTS	80:12	83:12	8	
SIMPLE_DECL	80:12	80:41	9	unsigned char [ 256 ] tilebuffer ;
VAR_DECL	80:12	80:26	10	unsigned char [ 256 ] tilebuffer
TYPE	80:12	80:36	11	unsigned char [ 256 ]
TYPE_NAME	80:12	80:21	12	unsigned char
LEAF_NODE	80:12	80:12	13	unsigned
LEAF_NODE	80:21	80:21	13	char
TYPE_SUFFIX	80:36	80:40	12	[ 256 ]
LEAF_NODE	80:36	80:36	13	[
FIELD	80:37	80:37	13	256
LEAF_NODE	80:37	80:37	14	256
LEAF_NODE	80:40	80:40	13	]
NAME	80:26	80:26	11	tilebuffer
LEAF_NODE	80:26	80:26	12	tilebuffer
LEAF_NODE	80:41	80:41	10	;
EXPR_STATEMENT	81:12	81:53	9	memset ( tilebuffer , ( unsigned char ) j , 256 ) ;
EXPR	81:12	81:12	10	memset ( tilebuffer , ( unsigned char ) j , 256 )
FUNCTION_CALL	81:12	81:52	11	memset ( tilebuffer , ( unsigned char ) j , 256 )
CALLEE	81:12	81:12	12	memset
LEAF_NODE	81:12	81:12	13	memset
LEAF_NODE	81:18	81:18	12	(
ARGUMENT	81:19	81:19	12	tilebuffer
FIELD	81:19	81:19	13	tilebuffer
LEAF_NODE	81:19	81:19	14	tilebuffer
LEAF_NODE	81:29	81:29	12	,
ARGUMENT	81:31	81:46	12	( unsigned char ) j
LEAF_NODE	81:31	81:31	13	(
TYPE_NAME	81:32	81:41	13	unsigned char
LEAF_NODE	81:32	81:32	14	unsigned
LEAF_NODE	81:41	81:41	14	char
LEAF_NODE	81:45	81:45	13	)
FIELD	81:46	81:46	13	j
LEAF_NODE	81:46	81:46	14	j
LEAF_NODE	81:47	81:47	12	,
ARGUMENT	81:49	81:49	12	256
FIELD	81:49	81:49	13	256
LEAF_NODE	81:49	81:49	14	256
LEAF_NODE	81:52	81:52	12	)
LEAF_NODE	81:53	81:53	10	;
EXPR_STATEMENT	82:12	82:65	9	ret = TIFFWriteEncodedTile ( tif , j , tilebuffer , 256 ) ;
EXPR	82:12	82:12	10	ret = TIFFWriteEncodedTile ( tif , j , tilebuffer , 256 )
ASSIGN	82:12	82:18	11	ret = TIFFWriteEncodedTile ( tif , j , tilebuffer , 256 )
LVAL	82:12	82:12	12	ret
FIELD	82:12	82:12	13	ret
LEAF_NODE	82:12	82:12	14	ret
ASSIGN_OP	82:16	82:16	12	=
LEAF_NODE	82:16	82:16	13	=
RVAL	82:18	82:18	12	TIFFWriteEncodedTile ( tif , j , tilebuffer , 256 )
FUNCTION_CALL	82:18	82:64	13	TIFFWriteEncodedTile ( tif , j , tilebuffer , 256 )
CALLEE	82:18	82:18	14	TIFFWriteEncodedTile
LEAF_NODE	82:18	82:18	15	TIFFWriteEncodedTile
LEAF_NODE	82:38	82:38	14	(
ARGUMENT	82:40	82:40	14	tif
FIELD	82:40	82:40	15	tif
LEAF_NODE	82:40	82:40	16	tif
LEAF_NODE	82:43	82:43	14	,
ARGUMENT	82:45	82:45	14	j
FIELD	82:45	82:45	15	j
LEAF_NODE	82:45	82:45	16	j
LEAF_NODE	82:46	82:46	14	,
ARGUMENT	82:48	82:48	14	tilebuffer
FIELD	82:48	82:48	15	tilebuffer
LEAF_NODE	82:48	82:48	16	tilebuffer
LEAF_NODE	82:58	82:58	14	,
ARGUMENT	82:60	82:60	14	256
FIELD	82:60	82:60	15	256
LEAF_NODE	82:60	82:60	16	256
LEAF_NODE	82:64	82:64	14	)
LEAF_NODE	82:65	82:65	10	;
EXPR_STATEMENT	83:12	83:30	9	assert ( ret == 256 ) ;
EXPR	83:12	83:12	10	assert ( ret == 256 )
FUNCTION_CALL	83:12	83:29	11	assert ( ret == 256 )
CALLEE	83:12	83:12	12	assert
LEAF_NODE	83:12	83:12	13	assert
LEAF_NODE	83:18	83:18	12	(
ARGUMENT	83:19	83:26	12	ret == 256
FIELD	83:19	83:19	13	ret
LEAF_NODE	83:19	83:19	14	ret
EQ_OPERATOR	83:23	83:23	13	==
LEAF_NODE	83:23	83:23	14	==
FIELD	83:26	83:26	13	256
LEAF_NODE	83:26	83:26	14	256
LEAF_NODE	83:29	83:29	12	)
LEAF_NODE	83:30	83:30	10	;
LEAF_NODE	84:8	84:8	8	}
LEAF_NODE	85:4	85:4	5	}
SELECTION	86:4	87:4	3	
KEYWORD	86:4	86:4	4	else
LEAF_NODE	86:4	86:4	5	else
STATEMENTS	87:4	99:4	4	
LEAF_NODE	87:4	87:4	5	{
STATEMENTS	88:8	90:8	5	
EXPR_STATEMENT	88:8	88:56	6	ret = TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 ) ;
EXPR	88:8	88:8	7	ret = TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
ASSIGN	88:8	88:14	8	ret = TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
LVAL	88:8	88:8	9	ret
FIELD	88:8	88:8	10	ret
LEAF_NODE	88:8	88:8	11	ret
ASSIGN_OP	88:12	88:12	9	=
LEAF_NODE	88:12	88:12	10	=
RVAL	88:14	88:14	9	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
FUNCTION_CALL	88:14	88:55	10	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , 1 )
CALLEE	88:14	88:14	11	TIFFSetField
LEAF_NODE	88:14	88:14	12	TIFFSetField
LEAF_NODE	88:26	88:26	11	(
ARGUMENT	88:27	88:27	11	tif
FIELD	88:27	88:27	12	tif
LEAF_NODE	88:27	88:27	13	tif
LEAF_NODE	88:30	88:30	11	,
ARGUMENT	88:32	88:32	11	TIFFTAG_ROWSPERSTRIP
FIELD	88:32	88:32	12	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	88:32	88:32	13	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	88:52	88:52	11	,
ARGUMENT	88:54	88:54	11	1
FIELD	88:54	88:54	12	1
LEAF_NODE	88:54	88:54	13	1
LEAF_NODE	88:55	88:55	11	)
LEAF_NODE	88:56	88:56	7	;
EXPR_STATEMENT	89:8	89:19	6	assert ( ret ) ;
EXPR	89:8	89:8	7	assert ( ret )
FUNCTION_CALL	89:8	89:18	8	assert ( ret )
CALLEE	89:8	89:8	9	assert
LEAF_NODE	89:8	89:8	10	assert
LEAF_NODE	89:14	89:14	9	(
ARGUMENT	89:15	89:15	9	ret
FIELD	89:15	89:15	10	ret
LEAF_NODE	89:15	89:15	11	ret
LEAF_NODE	89:18	89:18	9	)
LEAF_NODE	89:19	89:19	7	;
ITERATION	90:8	91:8	6	
KEYWORD	90:8	90:8	7	for
LEAF_NODE	90:8	90:8	8	for
LEAF_NODE	90:11	90:11	7	(
FOR_INIT	90:13	90:18	7	i = 0 ;
EXPR	90:13	90:13	8	i = 0
ASSIGN	90:13	90:17	9	i = 0
LVAL	90:13	90:13	10	i
FIELD	90:13	90:13	11	i
LEAF_NODE	90:13	90:13	12	i
ASSIGN_OP	90:15	90:15	10	=
LEAF_NODE	90:15	90:15	11	=
RVAL	90:17	90:17	10	0
FIELD	90:17	90:17	11	0
LEAF_NODE	90:17	90:17	12	0
LEAF_NODE	90:18	90:18	8	;
CONDITION	90:20	90:20	7	i < height
EXPR	90:20	90:24	8	i < height
FIELD	90:20	90:20	9	i
LEAF_NODE	90:20	90:20	10	i
REL_OPERATOR	90:22	90:22	9	<
LEAF_NODE	90:22	90:22	10	<
FIELD	90:24	90:24	9	height
LEAF_NODE	90:24	90:24	10	height
LEAF_NODE	90:30	90:30	7	;
FOR_EXPR	90:32	90:32	7	i ++
EXPR	90:32	90:32	8	i ++
FIELD	90:32	90:33	9	i ++
LEAF_NODE	90:32	90:32	10	i
LEAF_NODE	90:33	90:33	10	++
LEAF_NODE	90:36	90:36	7	)
STATEMENTS	91:8	98:8	7	
LEAF_NODE	91:8	91:8	8	{
STATEMENTS	92:12	96:12	8	
SIMPLE_DECL	92:12	92:46	9	unsigned char c ; c = ( unsigned char ) i ;
VAR_DECL	92:12	92:26	10	unsigned char c ; c = ( unsigned char ) i
TYPE	92:12	92:12	11	unsigned char
TYPE_NAME	92:12	92:21	12	unsigned char
LEAF_NODE	92:12	92:12	13	unsigned
LEAF_NODE	92:21	92:21	13	char
NAME	92:26	92:26	11	c
LEAF_NODE	92:26	92:26	12	c
LEAF_NODE	0:0	0:0	11	;
INIT	92:26	92:26	11	c = ( unsigned char ) i
ASSIGN	92:26	92:30	12	c = ( unsigned char ) i
LVAL	92:26	92:26	13	c
NAME	92:26	92:26	14	c
LEAF_NODE	92:26	92:26	15	c
ASSIGN_OP	92:28	92:28	13	=
LEAF_NODE	92:28	92:28	14	=
RVAL	92:30	92:45	13	( unsigned char ) i
LEAF_NODE	92:30	92:30	14	(
TYPE_NAME	92:31	92:40	14	unsigned char
LEAF_NODE	92:31	92:31	15	unsigned
LEAF_NODE	92:40	92:40	15	char
LEAF_NODE	92:44	92:44	14	)
FIELD	92:45	92:45	14	i
LEAF_NODE	92:45	92:45	15	i
LEAF_NODE	92:46	92:46	10	;
EXPR_STATEMENT	93:12	93:56	9	ret = TIFFWriteEncodedStrip ( tif , i , & c , 1 ) ;
EXPR	93:12	93:12	10	ret = TIFFWriteEncodedStrip ( tif , i , & c , 1 )
ASSIGN	93:12	93:18	11	ret = TIFFWriteEncodedStrip ( tif , i , & c , 1 )
LVAL	93:12	93:12	12	ret
FIELD	93:12	93:12	13	ret
LEAF_NODE	93:12	93:12	14	ret
ASSIGN_OP	93:16	93:16	12	=
LEAF_NODE	93:16	93:16	13	=
RVAL	93:18	93:18	12	TIFFWriteEncodedStrip ( tif , i , & c , 1 )
FUNCTION_CALL	93:18	93:55	13	TIFFWriteEncodedStrip ( tif , i , & c , 1 )
CALLEE	93:18	93:18	14	TIFFWriteEncodedStrip
LEAF_NODE	93:18	93:18	15	TIFFWriteEncodedStrip
LEAF_NODE	93:39	93:39	14	(
ARGUMENT	93:41	93:41	14	tif
FIELD	93:41	93:41	15	tif
LEAF_NODE	93:41	93:41	16	tif
LEAF_NODE	93:44	93:44	14	,
ARGUMENT	93:46	93:46	14	i
FIELD	93:46	93:46	15	i
LEAF_NODE	93:46	93:46	16	i
LEAF_NODE	93:47	93:47	14	,
ARGUMENT	93:49	93:49	14	& c
UNARY_EXPR	93:49	93:50	15	& c
UNARY_OPERATOR	93:49	93:49	16	&
LEAF_NODE	93:49	93:49	17	&
FIELD	93:50	93:50	16	c
LEAF_NODE	93:50	93:50	17	c
LEAF_NODE	93:51	93:51	14	,
ARGUMENT	93:53	93:53	14	1
FIELD	93:53	93:53	15	1
LEAF_NODE	93:53	93:53	16	1
LEAF_NODE	93:55	93:55	14	)
LEAF_NODE	93:56	93:56	10	;
EXPR_STATEMENT	94:12	94:28	9	assert ( ret == 1 ) ;
EXPR	94:12	94:12	10	assert ( ret == 1 )
FUNCTION_CALL	94:12	94:27	11	assert ( ret == 1 )
CALLEE	94:12	94:12	12	assert
LEAF_NODE	94:12	94:12	13	assert
LEAF_NODE	94:18	94:18	12	(
ARGUMENT	94:19	94:26	12	ret == 1
FIELD	94:19	94:19	13	ret
LEAF_NODE	94:19	94:19	14	ret
EQ_OPERATOR	94:23	94:23	13	==
LEAF_NODE	94:23	94:23	14	==
FIELD	94:26	94:26	13	1
LEAF_NODE	94:26	94:26	14	1
LEAF_NODE	94:27	94:27	12	)
LEAF_NODE	94:28	94:28	10	;
SELECTION	96:12	97:16	9	
KEYWORD	96:12	96:12	10	if
LEAF_NODE	96:12	96:12	11	if
LEAF_NODE	96:14	96:14	10	(
CONDITION	96:16	96:16	10	i == 1 && height > 100000
EXPR	96:16	96:16	11	i == 1 && height > 100000
AND	96:16	96:26	12	i == 1 && height > 100000
EXPR	96:16	96:21	13	i == 1
FIELD	96:16	96:16	14	i
LEAF_NODE	96:16	96:16	15	i
EQ_OPERATOR	96:18	96:18	14	==
LEAF_NODE	96:18	96:18	15	==
FIELD	96:21	96:21	14	1
LEAF_NODE	96:21	96:21	15	1
LEAF_NODE	96:23	96:23	13	&&
EXPR	96:26	96:35	13	height > 100000
FIELD	96:26	96:26	14	height
LEAF_NODE	96:26	96:26	15	height
REL_OPERATOR	96:33	96:33	14	>
LEAF_NODE	96:33	96:33	15	>
FIELD	96:35	96:35	14	100000
LEAF_NODE	96:35	96:35	15	100000
LEAF_NODE	96:42	96:42	10	)
STATEMENTS	97:16	97:16	10	
EXPR_STATEMENT	97:16	97:31	11	i = height - 2 ;
EXPR	97:16	97:16	12	i = height - 2
ASSIGN	97:16	97:20	13	i = height - 2
LVAL	97:16	97:16	14	i
FIELD	97:16	97:16	15	i
LEAF_NODE	97:16	97:16	16	i
ASSIGN_OP	97:18	97:18	14	=
LEAF_NODE	97:18	97:18	15	=
RVAL	97:20	97:30	14	height - 2
FIELD	97:20	97:20	15	height
LEAF_NODE	97:20	97:20	16	height
LEAF_NODE	97:27	97:27	15	-
FIELD	97:30	97:30	15	2
LEAF_NODE	97:30	97:30	16	2
LEAF_NODE	97:31	97:31	12	;
LEAF_NODE	98:8	98:8	8	}
LEAF_NODE	99:4	99:4	5	}
EXPR_STATEMENT	100:4	100:18	3	TIFFClose ( tif ) ;
EXPR	100:4	100:4	4	TIFFClose ( tif )
FUNCTION_CALL	100:4	100:17	5	TIFFClose ( tif )
CALLEE	100:4	100:4	6	TIFFClose
LEAF_NODE	100:4	100:4	7	TIFFClose
LEAF_NODE	100:13	100:13	6	(
ARGUMENT	100:14	100:14	6	tif
FIELD	100:14	100:14	7	tif
LEAF_NODE	100:14	100:14	8	tif
LEAF_NODE	100:17	100:17	6	)
LEAF_NODE	100:18	100:18	4	;
EXPR_STATEMENT	102:4	102:29	3	f = fopen ( filename , "rb" ) ;
EXPR	102:4	102:4	4	f = fopen ( filename , "rb" )
ASSIGN	102:4	102:8	5	f = fopen ( filename , "rb" )
LVAL	102:4	102:4	6	f
FIELD	102:4	102:4	7	f
LEAF_NODE	102:4	102:4	8	f
ASSIGN_OP	102:6	102:6	6	=
LEAF_NODE	102:6	102:6	7	=
RVAL	102:8	102:8	6	fopen ( filename , "rb" )
FUNCTION_CALL	102:8	102:28	7	fopen ( filename , "rb" )
CALLEE	102:8	102:8	8	fopen
LEAF_NODE	102:8	102:8	9	fopen
LEAF_NODE	102:13	102:13	8	(
ARGUMENT	102:14	102:14	8	filename
FIELD	102:14	102:14	9	filename
LEAF_NODE	102:14	102:14	10	filename
LEAF_NODE	102:22	102:22	8	,
ARGUMENT	102:24	102:24	8	"rb"
FIELD	102:24	102:24	9	"rb"
LEAF_NODE	102:24	102:24	10	"rb"
LEAF_NODE	102:28	102:28	8	)
LEAF_NODE	102:29	102:29	4	;
SELECTION	103:4	104:8	3	
KEYWORD	103:4	103:4	4	if
LEAF_NODE	103:4	103:4	5	if
LEAF_NODE	103:6	103:6	4	(
CONDITION	103:8	103:8	4	! f
EXPR	103:8	103:8	5	! f
UNARY_EXPR	103:8	103:9	6	! f
UNARY_OPERATOR	103:8	103:8	7	!
LEAF_NODE	103:8	103:8	8	!
FIELD	103:9	103:9	7	f
LEAF_NODE	103:9	103:9	8	f
LEAF_NODE	103:11	103:11	4	)
STATEMENTS	104:8	104:8	4	
JUMP_STATEMENT	104:8	104:16	5	return 1 ;
KEYWORD	104:8	104:8	6	return
LEAF_NODE	104:8	104:8	7	return
DESTINATION	104:15	104:15	6	1
EXPR	104:15	104:15	7	1
FIELD	104:15	104:15	8	1
LEAF_NODE	104:15	104:15	9	1
LEAF_NODE	104:16	104:16	6	;
ITERATION	106:4	107:4	3	
KEYWORD	106:4	106:4	4	for
LEAF_NODE	106:4	106:4	5	for
LEAF_NODE	106:7	106:7	4	(
FOR_INIT	106:9	106:14	4	i = 0 ;
EXPR	106:9	106:9	5	i = 0
ASSIGN	106:9	106:13	6	i = 0
LVAL	106:9	106:9	7	i
FIELD	106:9	106:9	8	i
LEAF_NODE	106:9	106:9	9	i
ASSIGN_OP	106:11	106:11	7	=
LEAF_NODE	106:11	106:11	8	=
RVAL	106:13	106:13	7	0
FIELD	106:13	106:13	8	0
LEAF_NODE	106:13	106:13	9	0
LEAF_NODE	106:14	106:14	5	;
CONDITION	106:16	106:16	4	i < 2
EXPR	106:16	106:20	5	i < 2
FIELD	106:16	106:16	6	i
LEAF_NODE	106:16	106:16	7	i
REL_OPERATOR	106:18	106:18	6	<
LEAF_NODE	106:18	106:18	7	<
FIELD	106:20	106:20	6	2
LEAF_NODE	106:20	106:20	7	2
LEAF_NODE	106:21	106:21	4	;
FOR_EXPR	106:23	106:23	4	i ++
EXPR	106:23	106:23	5	i ++
FIELD	106:23	106:24	6	i ++
LEAF_NODE	106:23	106:23	7	i
LEAF_NODE	106:24	106:24	7	++
LEAF_NODE	106:27	106:27	4	)
STATEMENTS	107:4	286:4	4	
LEAF_NODE	107:4	107:4	5	{
STATEMENTS	108:8	285:8	5	
EXPR_STATEMENT	108:8	108:54	6	tif = TIFFOpen ( filename , i == 0 ? "rD" : "rO" ) ;
EXPR	108:8	108:8	7	tif = TIFFOpen ( filename , i == 0 ? "rD" : "rO" )
ASSIGN	108:8	108:14	8	tif = TIFFOpen ( filename , i == 0 ? "rD" : "rO" )
LVAL	108:8	108:8	9	tif
FIELD	108:8	108:8	10	tif
LEAF_NODE	108:8	108:8	11	tif
ASSIGN_OP	108:12	108:12	9	=
LEAF_NODE	108:12	108:12	10	=
RVAL	108:14	108:14	9	TIFFOpen ( filename , i == 0 ? "rD" : "rO" )
FUNCTION_CALL	108:14	108:53	10	TIFFOpen ( filename , i == 0 ? "rD" : "rO" )
CALLEE	108:14	108:14	11	TIFFOpen
LEAF_NODE	108:14	108:14	12	TIFFOpen
LEAF_NODE	108:22	108:22	11	(
ARGUMENT	108:23	108:23	11	filename
FIELD	108:23	108:23	12	filename
LEAF_NODE	108:23	108:23	13	filename
LEAF_NODE	108:31	108:31	11	,
ARGUMENT	108:33	108:33	11	i == 0 ? "rD" : "rO"
COND_EXPR	108:33	108:49	12	i == 0 ? "rD" : "rO"
CONDITION	108:33	108:38	13	i == 0
FIELD	108:33	108:33	14	i
LEAF_NODE	108:33	108:33	15	i
EQ_OPERATOR	108:35	108:35	14	==
LEAF_NODE	108:35	108:35	15	==
FIELD	108:38	108:38	14	0
LEAF_NODE	108:38	108:38	15	0
LEAF_NODE	108:40	108:40	13	?
EXPR	108:42	108:42	13	"rD"
FIELD	108:42	108:42	14	"rD"
LEAF_NODE	108:42	108:42	15	"rD"
LEAF_NODE	108:47	108:47	13	:
FIELD	108:49	108:49	13	"rO"
LEAF_NODE	108:49	108:49	14	"rO"
LEAF_NODE	108:53	108:53	11	)
LEAF_NODE	108:54	108:54	7	;
SELECTION	109:8	110:8	6	
KEYWORD	109:8	109:8	7	if
LEAF_NODE	109:8	109:8	8	if
LEAF_NODE	109:10	109:10	7	(
CONDITION	109:11	109:11	7	! tif
EXPR	109:11	109:11	8	! tif
UNARY_EXPR	109:11	109:12	9	! tif
UNARY_OPERATOR	109:11	109:11	10	!
LEAF_NODE	109:11	109:11	11	!
FIELD	109:12	109:12	10	tif
LEAF_NODE	109:12	109:12	11	tif
LEAF_NODE	109:15	109:15	7	)
STATEMENTS	110:8	114:8	7	
LEAF_NODE	110:8	110:8	8	{
STATEMENTS	111:12	113:12	8	
EXPR_STATEMENT	111:12	111:57	9	fprintf ( stderr , "cannot open %s\n" , filename ) ;
EXPR	111:12	111:12	10	fprintf ( stderr , "cannot open %s\n" , filename )
FUNCTION_CALL	111:12	111:56	11	fprintf ( stderr , "cannot open %s\n" , filename )
CALLEE	111:12	111:12	12	fprintf
LEAF_NODE	111:12	111:12	13	fprintf
LEAF_NODE	111:19	111:19	12	(
ARGUMENT	111:20	111:20	12	stderr
FIELD	111:20	111:20	13	stderr
LEAF_NODE	111:20	111:20	14	stderr
LEAF_NODE	111:26	111:26	12	,
ARGUMENT	111:28	111:28	12	"cannot open %s\n"
FIELD	111:28	111:28	13	"cannot open %s\n"
LEAF_NODE	111:28	111:28	14	"cannot open %s\n"
LEAF_NODE	111:46	111:46	12	,
ARGUMENT	111:48	111:48	12	filename
FIELD	111:48	111:48	13	filename
LEAF_NODE	111:48	111:48	14	filename
LEAF_NODE	111:56	111:56	12	)
LEAF_NODE	111:57	111:57	10	;
EXPR_STATEMENT	112:12	112:21	9	fclose ( f ) ;
EXPR	112:12	112:12	10	fclose ( f )
FUNCTION_CALL	112:12	112:20	11	fclose ( f )
CALLEE	112:12	112:12	12	fclose
LEAF_NODE	112:12	112:12	13	fclose
LEAF_NODE	112:18	112:18	12	(
ARGUMENT	112:19	112:19	12	f
FIELD	112:19	112:19	13	f
LEAF_NODE	112:19	112:19	14	f
LEAF_NODE	112:20	112:20	12	)
LEAF_NODE	112:21	112:21	10	;
JUMP_STATEMENT	113:12	113:20	9	return 1 ;
KEYWORD	113:12	113:12	10	return
LEAF_NODE	113:12	113:12	11	return
DESTINATION	113:19	113:19	10	1
EXPR	113:19	113:19	11	1
FIELD	113:19	113:19	12	1
LEAF_NODE	113:19	113:19	13	1
LEAF_NODE	113:20	113:20	10	;
LEAF_NODE	114:8	114:8	8	}
SELECTION	115:8	116:8	6	
KEYWORD	115:8	115:8	7	if
LEAF_NODE	115:8	115:8	8	if
LEAF_NODE	115:10	115:10	7	(
CONDITION	115:12	115:12	7	tiled
EXPR	115:12	115:12	8	tiled
FIELD	115:12	115:12	9	tiled
LEAF_NODE	115:12	115:12	10	tiled
LEAF_NODE	115:18	115:18	7	)
STATEMENTS	116:8	173:8	7	
LEAF_NODE	116:8	116:8	8	{
STATEMENTS	117:12	118:12	8	
SIMPLE_DECL	117:12	117:17	9	int j ;
VAR_DECL	117:12	117:16	10	int j
TYPE	117:12	117:12	11	int
TYPE_NAME	117:12	117:12	12	int
LEAF_NODE	117:12	117:12	13	int
NAME	117:16	117:16	11	j
LEAF_NODE	117:16	117:16	12	j
LEAF_NODE	117:17	117:17	10	;
ITERATION	118:12	119:12	9	
KEYWORD	118:12	118:12	10	for
LEAF_NODE	118:12	118:12	11	for
LEAF_NODE	118:15	118:15	10	(
FOR_INIT	118:17	118:22	10	j = 0 ;
EXPR	118:17	118:17	11	j = 0
ASSIGN	118:17	118:21	12	j = 0
LVAL	118:17	118:17	13	j
FIELD	118:17	118:17	14	j
LEAF_NODE	118:17	118:17	15	j
ASSIGN_OP	118:19	118:19	13	=
LEAF_NODE	118:19	118:19	14	=
RVAL	118:21	118:21	13	0
FIELD	118:21	118:21	14	0
LEAF_NODE	118:21	118:21	15	0
LEAF_NODE	118:22	118:22	11	;
CONDITION	118:24	118:24	10	j < ( height + 15 ) / 16
EXPR	118:24	118:42	11	j < ( height + 15 ) / 16
FIELD	118:24	118:24	12	j
LEAF_NODE	118:24	118:24	13	j
REL_OPERATOR	118:26	118:26	12	<
LEAF_NODE	118:26	118:26	13	<
LEAF_NODE	118:28	118:28	12	(
FIELD	118:29	118:29	12	height
LEAF_NODE	118:29	118:29	13	height
LEAF_NODE	118:35	118:35	12	+
FIELD	118:36	118:36	12	15
LEAF_NODE	118:36	118:36	13	15
LEAF_NODE	118:38	118:38	12	)
LEAF_NODE	118:40	118:40	12	/
FIELD	118:42	118:42	12	16
LEAF_NODE	118:42	118:42	13	16
LEAF_NODE	118:44	118:44	10	;
FOR_EXPR	118:46	118:46	10	j ++
EXPR	118:46	118:46	11	j ++
FIELD	118:46	118:47	12	j ++
LEAF_NODE	118:46	118:46	13	j
LEAF_NODE	118:47	118:47	13	++
LEAF_NODE	118:50	118:50	10	)
STATEMENTS	119:12	172:12	10	
LEAF_NODE	119:12	119:12	11	{
STATEMENTS	120:16	171:16	11	
SIMPLE_DECL	120:16	120:25	12	int retry ;
VAR_DECL	120:16	120:20	13	int retry
TYPE	120:16	120:16	14	int
TYPE_NAME	120:16	120:16	15	int
LEAF_NODE	120:16	120:16	16	int
NAME	120:20	120:20	14	retry
LEAF_NODE	120:20	120:20	15	retry
LEAF_NODE	120:25	120:25	13	;
SIMPLE_DECL	121:16	121:59	12	unsigned char expected_c ; expected_c = ( unsigned char ) j ;
VAR_DECL	121:16	121:30	13	unsigned char expected_c ; expected_c = ( unsigned char ) j
TYPE	121:16	121:16	14	unsigned char
TYPE_NAME	121:16	121:25	15	unsigned char
LEAF_NODE	121:16	121:16	16	unsigned
LEAF_NODE	121:25	121:25	16	char
NAME	121:30	121:30	14	expected_c
LEAF_NODE	121:30	121:30	15	expected_c
LEAF_NODE	0:0	0:0	14	;
INIT	121:30	121:30	14	expected_c = ( unsigned char ) j
ASSIGN	121:30	121:43	15	expected_c = ( unsigned char ) j
LVAL	121:30	121:30	16	expected_c
NAME	121:30	121:30	17	expected_c
LEAF_NODE	121:30	121:30	18	expected_c
ASSIGN_OP	121:41	121:41	16	=
LEAF_NODE	121:41	121:41	17	=
RVAL	121:43	121:58	16	( unsigned char ) j
LEAF_NODE	121:43	121:43	17	(
TYPE_NAME	121:44	121:53	17	unsigned char
LEAF_NODE	121:44	121:44	18	unsigned
LEAF_NODE	121:53	121:53	18	char
LEAF_NODE	121:57	121:57	17	)
FIELD	121:58	121:58	17	j
LEAF_NODE	121:58	121:58	18	j
LEAF_NODE	121:59	121:59	13	;
ITERATION	123:16	124:16	12	
KEYWORD	123:16	123:16	13	for
LEAF_NODE	123:16	123:16	14	for
LEAF_NODE	123:19	123:19	13	(
FOR_INIT	123:21	123:30	13	retry = 0 ;
EXPR	123:21	123:21	14	retry = 0
ASSIGN	123:21	123:29	15	retry = 0
LVAL	123:21	123:21	16	retry
FIELD	123:21	123:21	17	retry
LEAF_NODE	123:21	123:21	18	retry
ASSIGN_OP	123:27	123:27	16	=
LEAF_NODE	123:27	123:27	17	=
RVAL	123:29	123:29	16	0
FIELD	123:29	123:29	17	0
LEAF_NODE	123:29	123:29	18	0
LEAF_NODE	123:30	123:30	14	;
CONDITION	123:32	123:32	13	retry < 2
EXPR	123:32	123:40	14	retry < 2
FIELD	123:32	123:32	15	retry
LEAF_NODE	123:32	123:32	16	retry
REL_OPERATOR	123:38	123:38	15	<
LEAF_NODE	123:38	123:38	16	<
FIELD	123:40	123:40	15	2
LEAF_NODE	123:40	123:40	16	2
LEAF_NODE	123:41	123:41	13	;
FOR_EXPR	123:43	123:43	13	retry ++
EXPR	123:43	123:43	14	retry ++
FIELD	123:43	123:48	15	retry ++
LEAF_NODE	123:43	123:43	16	retry
LEAF_NODE	123:48	123:48	16	++
LEAF_NODE	123:51	123:51	13	)
STATEMENTS	124:16	138:16	13	
LEAF_NODE	124:16	124:16	14	{
STATEMENTS	125:20	129:20	14	
SIMPLE_DECL	125:20	125:49	15	unsigned char [ 256 ] tilebuffer ;
VAR_DECL	125:20	125:34	16	unsigned char [ 256 ] tilebuffer
TYPE	125:20	125:44	17	unsigned char [ 256 ]
TYPE_NAME	125:20	125:29	18	unsigned char
LEAF_NODE	125:20	125:20	19	unsigned
LEAF_NODE	125:29	125:29	19	char
TYPE_SUFFIX	125:44	125:48	18	[ 256 ]
LEAF_NODE	125:44	125:44	19	[
FIELD	125:45	125:45	19	256
LEAF_NODE	125:45	125:45	20	256
LEAF_NODE	125:48	125:48	19	]
NAME	125:34	125:34	17	tilebuffer
LEAF_NODE	125:34	125:34	18	tilebuffer
LEAF_NODE	125:49	125:49	16	;
EXPR_STATEMENT	126:20	126:45	15	memset ( tilebuffer , 0 , 256 ) ;
EXPR	126:20	126:20	16	memset ( tilebuffer , 0 , 256 )
FUNCTION_CALL	126:20	126:44	17	memset ( tilebuffer , 0 , 256 )
CALLEE	126:20	126:20	18	memset
LEAF_NODE	126:20	126:20	19	memset
LEAF_NODE	126:26	126:26	18	(
ARGUMENT	126:27	126:27	18	tilebuffer
FIELD	126:27	126:27	19	tilebuffer
LEAF_NODE	126:27	126:27	20	tilebuffer
LEAF_NODE	126:37	126:37	18	,
ARGUMENT	126:38	126:38	18	0
FIELD	126:38	126:38	19	0
LEAF_NODE	126:38	126:38	20	0
LEAF_NODE	126:39	126:39	18	,
ARGUMENT	126:41	126:41	18	256
FIELD	126:41	126:41	19	256
LEAF_NODE	126:41	126:41	20	256
LEAF_NODE	126:44	126:44	18	)
LEAF_NODE	126:45	126:45	16	;
EXPR_STATEMENT	127:20	127:72	15	ret = TIFFReadEncodedTile ( tif , j , tilebuffer , 256 ) ;
EXPR	127:20	127:20	16	ret = TIFFReadEncodedTile ( tif , j , tilebuffer , 256 )
ASSIGN	127:20	127:26	17	ret = TIFFReadEncodedTile ( tif , j , tilebuffer , 256 )
LVAL	127:20	127:20	18	ret
FIELD	127:20	127:20	19	ret
LEAF_NODE	127:20	127:20	20	ret
ASSIGN_OP	127:24	127:24	18	=
LEAF_NODE	127:24	127:24	19	=
RVAL	127:26	127:26	18	TIFFReadEncodedTile ( tif , j , tilebuffer , 256 )
FUNCTION_CALL	127:26	127:71	19	TIFFReadEncodedTile ( tif , j , tilebuffer , 256 )
CALLEE	127:26	127:26	20	TIFFReadEncodedTile
LEAF_NODE	127:26	127:26	21	TIFFReadEncodedTile
LEAF_NODE	127:45	127:45	20	(
ARGUMENT	127:47	127:47	20	tif
FIELD	127:47	127:47	21	tif
LEAF_NODE	127:47	127:47	22	tif
LEAF_NODE	127:50	127:50	20	,
ARGUMENT	127:52	127:52	20	j
FIELD	127:52	127:52	21	j
LEAF_NODE	127:52	127:52	22	j
LEAF_NODE	127:53	127:53	20	,
ARGUMENT	127:55	127:55	20	tilebuffer
FIELD	127:55	127:55	21	tilebuffer
LEAF_NODE	127:55	127:55	22	tilebuffer
LEAF_NODE	127:65	127:65	20	,
ARGUMENT	127:67	127:67	20	256
FIELD	127:67	127:67	21	256
LEAF_NODE	127:67	127:67	22	256
LEAF_NODE	127:71	127:71	20	)
LEAF_NODE	127:72	127:72	16	;
EXPR_STATEMENT	128:20	128:38	15	assert ( ret == 256 ) ;
EXPR	128:20	128:20	16	assert ( ret == 256 )
FUNCTION_CALL	128:20	128:37	17	assert ( ret == 256 )
CALLEE	128:20	128:20	18	assert
LEAF_NODE	128:20	128:20	19	assert
LEAF_NODE	128:26	128:26	18	(
ARGUMENT	128:27	128:34	18	ret == 256
FIELD	128:27	128:27	19	ret
LEAF_NODE	128:27	128:27	20	ret
EQ_OPERATOR	128:31	128:31	19	==
LEAF_NODE	128:31	128:31	20	==
FIELD	128:34	128:34	19	256
LEAF_NODE	128:34	128:34	20	256
LEAF_NODE	128:37	128:37	18	)
LEAF_NODE	128:38	128:38	16	;
SELECTION	129:20	131:20	15	
KEYWORD	129:20	129:20	16	if
LEAF_NODE	129:20	129:20	17	if
LEAF_NODE	129:22	129:22	16	(
CONDITION	129:24	129:24	16	tilebuffer [ 0 ] != expected_c || tilebuffer [ 255 ] != expected_c
EXPR	129:24	129:24	17	tilebuffer [ 0 ] != expected_c || tilebuffer [ 255 ] != expected_c
OR	129:24	130:24	18	tilebuffer [ 0 ] != expected_c || tilebuffer [ 255 ] != expected_c
EXPR	129:24	129:41	19	tilebuffer [ 0 ] != expected_c
FIELD	129:24	129:36	20	tilebuffer [ 0 ]
LEAF_NODE	129:24	129:24	21	tilebuffer
LEAF_NODE	129:34	129:34	21	[
EXPR	129:35	129:35	21	0
FIELD	129:35	129:35	22	0
LEAF_NODE	129:35	129:35	23	0
LEAF_NODE	129:36	129:36	21	]
EQ_OPERATOR	129:38	129:38	20	!=
LEAF_NODE	129:38	129:38	21	!=
FIELD	129:41	129:41	20	expected_c
LEAF_NODE	129:41	129:41	21	expected_c
LEAF_NODE	129:52	129:52	19	||
EXPR	130:24	130:43	19	tilebuffer [ 255 ] != expected_c
FIELD	130:24	130:38	20	tilebuffer [ 255 ]
LEAF_NODE	130:24	130:24	21	tilebuffer
LEAF_NODE	130:34	130:34	21	[
EXPR	130:35	130:35	21	255
FIELD	130:35	130:35	22	255
LEAF_NODE	130:35	130:35	23	255
LEAF_NODE	130:38	130:38	21	]
EQ_OPERATOR	130:40	130:40	20	!=
LEAF_NODE	130:40	130:40	21	!=
FIELD	130:43	130:43	20	expected_c
LEAF_NODE	130:43	130:43	21	expected_c
LEAF_NODE	130:54	130:54	16	)
STATEMENTS	131:20	137:20	16	
LEAF_NODE	131:20	131:20	17	{
STATEMENTS	132:24	136:24	17	
EXPR_STATEMENT	132:24	133:66	18	fprintf ( stderr , "unexpected value at tile %d: %d %d\n" , j , tilebuffer [ 0 ] , tilebuffer [ 255 ] ) ;
EXPR	132:24	132:24	19	fprintf ( stderr , "unexpected value at tile %d: %d %d\n" , j , tilebuffer [ 0 ] , tilebuffer [ 255 ] )
FUNCTION_CALL	132:24	133:65	20	fprintf ( stderr , "unexpected value at tile %d: %d %d\n" , j , tilebuffer [ 0 ] , tilebuffer [ 255 ] )
CALLEE	132:24	132:24	21	fprintf
LEAF_NODE	132:24	132:24	22	fprintf
LEAF_NODE	132:31	132:31	21	(
ARGUMENT	132:32	132:32	21	stderr
FIELD	132:32	132:32	22	stderr
LEAF_NODE	132:32	132:32	23	stderr
LEAF_NODE	132:38	132:38	21	,
ARGUMENT	132:40	132:40	21	"unexpected value at tile %d: %d %d\n"
FIELD	132:40	132:40	22	"unexpected value at tile %d: %d %d\n"
LEAF_NODE	132:40	132:40	23	"unexpected value at tile %d: %d %d\n"
LEAF_NODE	132:78	132:78	21	,
ARGUMENT	133:32	133:32	21	j
FIELD	133:32	133:32	22	j
LEAF_NODE	133:32	133:32	23	j
LEAF_NODE	133:33	133:33	21	,
ARGUMENT	133:35	133:35	21	tilebuffer [ 0 ]
FIELD	133:35	133:47	22	tilebuffer [ 0 ]
LEAF_NODE	133:35	133:35	23	tilebuffer
LEAF_NODE	133:45	133:45	23	[
EXPR	133:46	133:46	23	0
FIELD	133:46	133:46	24	0
LEAF_NODE	133:46	133:46	25	0
LEAF_NODE	133:47	133:47	23	]
LEAF_NODE	133:48	133:48	21	,
ARGUMENT	133:50	133:50	21	tilebuffer [ 255 ]
FIELD	133:50	133:64	22	tilebuffer [ 255 ]
LEAF_NODE	133:50	133:50	23	tilebuffer
LEAF_NODE	133:60	133:60	23	[
EXPR	133:61	133:61	23	255
FIELD	133:61	133:61	24	255
LEAF_NODE	133:61	133:61	25	255
LEAF_NODE	133:64	133:64	23	]
LEAF_NODE	133:65	133:65	21	)
LEAF_NODE	133:66	133:66	19	;
EXPR_STATEMENT	134:24	134:38	18	TIFFClose ( tif ) ;
EXPR	134:24	134:24	19	TIFFClose ( tif )
FUNCTION_CALL	134:24	134:37	20	TIFFClose ( tif )
CALLEE	134:24	134:24	21	TIFFClose
LEAF_NODE	134:24	134:24	22	TIFFClose
LEAF_NODE	134:33	134:33	21	(
ARGUMENT	134:34	134:34	21	tif
FIELD	134:34	134:34	22	tif
LEAF_NODE	134:34	134:34	23	tif
LEAF_NODE	134:37	134:37	21	)
LEAF_NODE	134:38	134:38	19	;
EXPR_STATEMENT	135:24	135:33	18	fclose ( f ) ;
EXPR	135:24	135:24	19	fclose ( f )
FUNCTION_CALL	135:24	135:32	20	fclose ( f )
CALLEE	135:24	135:24	21	fclose
LEAF_NODE	135:24	135:24	22	fclose
LEAF_NODE	135:30	135:30	21	(
ARGUMENT	135:31	135:31	21	f
FIELD	135:31	135:31	22	f
LEAF_NODE	135:31	135:31	23	f
LEAF_NODE	135:32	135:32	21	)
LEAF_NODE	135:33	135:33	19	;
JUMP_STATEMENT	136:24	136:32	18	return 1 ;
KEYWORD	136:24	136:24	19	return
LEAF_NODE	136:24	136:24	20	return
DESTINATION	136:31	136:31	19	1
EXPR	136:31	136:31	20	1
FIELD	136:31	136:31	21	1
LEAF_NODE	136:31	136:31	22	1
LEAF_NODE	136:32	136:32	19	;
LEAF_NODE	137:20	137:20	17	}
LEAF_NODE	138:16	138:16	14	}
LEAF_NODE	140:16	140:16	12	{
STATEMENTS	141:20	162:20	12	
SIMPLE_DECL	141:20	141:31	13	int err ; err = 0 ;
VAR_DECL	141:20	141:24	14	int err ; err = 0
TYPE	141:20	141:20	15	int
TYPE_NAME	141:20	141:20	16	int
LEAF_NODE	141:20	141:20	17	int
NAME	141:24	141:24	15	err
LEAF_NODE	141:24	141:24	16	err
LEAF_NODE	0:0	0:0	15	;
INIT	141:24	141:24	15	err = 0
ASSIGN	141:24	141:30	16	err = 0
LVAL	141:24	141:24	17	err
NAME	141:24	141:24	18	err
LEAF_NODE	141:24	141:24	19	err
ASSIGN_OP	141:28	141:28	17	=
LEAF_NODE	141:28	141:28	18	=
RVAL	141:30	141:30	17	0
FIELD	141:30	141:30	18	0
LEAF_NODE	141:30	141:30	19	0
LEAF_NODE	141:31	141:31	14	;
SIMPLE_DECL	142:20	142:36	13	int offset , int size ;
INIT_DECL_LIST	142:20	142:20	14	int offset , int size
VAR_DECL	142:20	142:24	15	int offset
TYPE	142:20	142:20	16	int
TYPE_NAME	142:20	142:20	17	int
LEAF_NODE	142:20	142:20	18	int
NAME	142:24	142:24	16	offset
LEAF_NODE	142:24	142:24	17	offset
LEAF_NODE	142:30	142:30	15	,
VAR_DECL	142:20	142:32	15	int size
TYPE	142:20	142:20	16	int
TYPE_NAME	142:20	142:20	17	int
LEAF_NODE	142:20	142:20	18	int
NAME	142:32	142:32	16	size
LEAF_NODE	142:32	142:32	17	size
LEAF_NODE	142:36	142:36	14	;
SIMPLE_DECL	143:20	143:50	13	unsigned char [ 256 ] inputbuffer ;
VAR_DECL	143:20	143:34	14	unsigned char [ 256 ] inputbuffer
TYPE	143:20	143:45	15	unsigned char [ 256 ]
TYPE_NAME	143:20	143:29	16	unsigned char
LEAF_NODE	143:20	143:20	17	unsigned
LEAF_NODE	143:29	143:29	17	char
TYPE_SUFFIX	143:45	143:49	16	[ 256 ]
LEAF_NODE	143:45	143:45	17	[
FIELD	143:46	143:46	17	256
LEAF_NODE	143:46	143:46	18	256
LEAF_NODE	143:49	143:49	17	]
NAME	143:34	143:34	15	inputbuffer
LEAF_NODE	143:34	143:34	16	inputbuffer
LEAF_NODE	143:50	143:50	14	;
SIMPLE_DECL	144:20	144:49	13	unsigned char [ 256 ] tilebuffer ;
VAR_DECL	144:20	144:34	14	unsigned char [ 256 ] tilebuffer
TYPE	144:20	144:44	15	unsigned char [ 256 ]
TYPE_NAME	144:20	144:29	16	unsigned char
LEAF_NODE	144:20	144:20	17	unsigned
LEAF_NODE	144:29	144:29	17	char
TYPE_SUFFIX	144:44	144:48	16	[ 256 ]
LEAF_NODE	144:44	144:44	17	[
FIELD	144:45	144:45	17	256
LEAF_NODE	144:45	144:45	18	256
LEAF_NODE	144:48	144:48	17	]
NAME	144:34	144:34	15	tilebuffer
LEAF_NODE	144:34	144:34	16	tilebuffer
LEAF_NODE	144:49	144:49	14	;
EXPR_STATEMENT	146:20	146:69	13	offset = TIFFGetStrileOffsetWithErr ( tif , j , & err ) ;
EXPR	146:20	146:20	14	offset = TIFFGetStrileOffsetWithErr ( tif , j , & err )
ASSIGN	146:20	146:29	15	offset = TIFFGetStrileOffsetWithErr ( tif , j , & err )
LVAL	146:20	146:20	16	offset
FIELD	146:20	146:20	17	offset
LEAF_NODE	146:20	146:20	18	offset
ASSIGN_OP	146:27	146:27	16	=
LEAF_NODE	146:27	146:27	17	=
RVAL	146:29	146:29	16	TIFFGetStrileOffsetWithErr ( tif , j , & err )
FUNCTION_CALL	146:29	146:68	17	TIFFGetStrileOffsetWithErr ( tif , j , & err )
CALLEE	146:29	146:29	18	TIFFGetStrileOffsetWithErr
LEAF_NODE	146:29	146:29	19	TIFFGetStrileOffsetWithErr
LEAF_NODE	146:55	146:55	18	(
ARGUMENT	146:56	146:56	18	tif
FIELD	146:56	146:56	19	tif
LEAF_NODE	146:56	146:56	20	tif
LEAF_NODE	146:59	146:59	18	,
ARGUMENT	146:61	146:61	18	j
FIELD	146:61	146:61	19	j
LEAF_NODE	146:61	146:61	20	j
LEAF_NODE	146:62	146:62	18	,
ARGUMENT	146:64	146:64	18	& err
UNARY_EXPR	146:64	146:65	19	& err
UNARY_OPERATOR	146:64	146:64	20	&
LEAF_NODE	146:64	146:64	21	&
FIELD	146:65	146:65	20	err
LEAF_NODE	146:65	146:65	21	err
LEAF_NODE	146:68	146:68	18	)
LEAF_NODE	146:69	146:69	14	;
EXPR_STATEMENT	147:20	147:39	13	assert ( offset != 0 ) ;
EXPR	147:20	147:20	14	assert ( offset != 0 )
FUNCTION_CALL	147:20	147:38	15	assert ( offset != 0 )
CALLEE	147:20	147:20	16	assert
LEAF_NODE	147:20	147:20	17	assert
LEAF_NODE	147:26	147:26	16	(
ARGUMENT	147:27	147:37	16	offset != 0
FIELD	147:27	147:27	17	offset
LEAF_NODE	147:27	147:27	18	offset
EQ_OPERATOR	147:34	147:34	17	!=
LEAF_NODE	147:34	147:34	18	!=
FIELD	147:37	147:37	17	0
LEAF_NODE	147:37	147:37	18	0
LEAF_NODE	147:38	147:38	16	)
LEAF_NODE	147:39	147:39	14	;
EXPR_STATEMENT	148:20	148:36	13	assert ( err == 0 ) ;
EXPR	148:20	148:20	14	assert ( err == 0 )
FUNCTION_CALL	148:20	148:35	15	assert ( err == 0 )
CALLEE	148:20	148:20	16	assert
LEAF_NODE	148:20	148:20	17	assert
LEAF_NODE	148:26	148:26	16	(
ARGUMENT	148:27	148:34	16	err == 0
FIELD	148:27	148:27	17	err
LEAF_NODE	148:27	148:27	18	err
EQ_OPERATOR	148:31	148:31	17	==
LEAF_NODE	148:31	148:31	18	==
FIELD	148:34	148:34	17	0
LEAF_NODE	148:34	148:34	18	0
LEAF_NODE	148:35	148:35	16	)
LEAF_NODE	148:36	148:36	14	;
EXPR_STATEMENT	150:20	150:70	13	size = TIFFGetStrileByteCountWithErr ( tif , j , & err ) ;
EXPR	150:20	150:20	14	size = TIFFGetStrileByteCountWithErr ( tif , j , & err )
ASSIGN	150:20	150:27	15	size = TIFFGetStrileByteCountWithErr ( tif , j , & err )
LVAL	150:20	150:20	16	size
FIELD	150:20	150:20	17	size
LEAF_NODE	150:20	150:20	18	size
ASSIGN_OP	150:25	150:25	16	=
LEAF_NODE	150:25	150:25	17	=
RVAL	150:27	150:27	16	TIFFGetStrileByteCountWithErr ( tif , j , & err )
FUNCTION_CALL	150:27	150:69	17	TIFFGetStrileByteCountWithErr ( tif , j , & err )
CALLEE	150:27	150:27	18	TIFFGetStrileByteCountWithErr
LEAF_NODE	150:27	150:27	19	TIFFGetStrileByteCountWithErr
LEAF_NODE	150:56	150:56	18	(
ARGUMENT	150:57	150:57	18	tif
FIELD	150:57	150:57	19	tif
LEAF_NODE	150:57	150:57	20	tif
LEAF_NODE	150:60	150:60	18	,
ARGUMENT	150:62	150:62	18	j
FIELD	150:62	150:62	19	j
LEAF_NODE	150:62	150:62	20	j
LEAF_NODE	150:63	150:63	18	,
ARGUMENT	150:65	150:65	18	& err
UNARY_EXPR	150:65	150:66	19	& err
UNARY_OPERATOR	150:65	150:65	20	&
LEAF_NODE	150:65	150:65	21	&
FIELD	150:66	150:66	20	err
LEAF_NODE	150:66	150:66	21	err
LEAF_NODE	150:69	150:69	18	)
LEAF_NODE	150:70	150:70	14	;
EXPR_STATEMENT	151:20	151:39	13	assert ( size == 256 ) ;
EXPR	151:20	151:20	14	assert ( size == 256 )
FUNCTION_CALL	151:20	151:38	15	assert ( size == 256 )
CALLEE	151:20	151:20	16	assert
LEAF_NODE	151:20	151:20	17	assert
LEAF_NODE	151:26	151:26	16	(
ARGUMENT	151:27	151:35	16	size == 256
FIELD	151:27	151:27	17	size
LEAF_NODE	151:27	151:27	18	size
EQ_OPERATOR	151:32	151:32	17	==
LEAF_NODE	151:32	151:32	18	==
FIELD	151:35	151:35	17	256
LEAF_NODE	151:35	151:35	18	256
LEAF_NODE	151:38	151:38	16	)
LEAF_NODE	151:39	151:39	14	;
EXPR_STATEMENT	152:20	152:36	13	assert ( err == 0 ) ;
EXPR	152:20	152:20	14	assert ( err == 0 )
FUNCTION_CALL	152:20	152:35	15	assert ( err == 0 )
CALLEE	152:20	152:20	16	assert
LEAF_NODE	152:20	152:20	17	assert
LEAF_NODE	152:26	152:26	16	(
ARGUMENT	152:27	152:34	16	err == 0
FIELD	152:27	152:27	17	err
LEAF_NODE	152:27	152:27	18	err
EQ_OPERATOR	152:31	152:31	17	==
LEAF_NODE	152:31	152:31	18	==
FIELD	152:34	152:34	17	0
LEAF_NODE	152:34	152:34	18	0
LEAF_NODE	152:35	152:35	16	)
LEAF_NODE	152:36	152:36	14	;
EXPR_STATEMENT	154:20	154:46	13	fseek ( f , offset , SEEK_SET ) ;
EXPR	154:20	154:20	14	fseek ( f , offset , SEEK_SET )
FUNCTION_CALL	154:20	154:45	15	fseek ( f , offset , SEEK_SET )
CALLEE	154:20	154:20	16	fseek
LEAF_NODE	154:20	154:20	17	fseek
LEAF_NODE	154:25	154:25	16	(
ARGUMENT	154:26	154:26	16	f
FIELD	154:26	154:26	17	f
LEAF_NODE	154:26	154:26	18	f
LEAF_NODE	154:27	154:27	16	,
ARGUMENT	154:29	154:29	16	offset
FIELD	154:29	154:29	17	offset
LEAF_NODE	154:29	154:29	18	offset
LEAF_NODE	154:35	154:35	16	,
ARGUMENT	154:37	154:37	16	SEEK_SET
FIELD	154:37	154:37	17	SEEK_SET
LEAF_NODE	154:37	154:37	18	SEEK_SET
LEAF_NODE	154:45	154:45	16	)
LEAF_NODE	154:46	154:46	14	;
EXPR_STATEMENT	155:20	155:49	13	fread ( inputbuffer , 256 , 1 , f ) ;
EXPR	155:20	155:20	14	fread ( inputbuffer , 256 , 1 , f )
FUNCTION_CALL	155:20	155:48	15	fread ( inputbuffer , 256 , 1 , f )
CALLEE	155:20	155:20	16	fread
LEAF_NODE	155:20	155:20	17	fread
LEAF_NODE	155:25	155:25	16	(
ARGUMENT	155:26	155:26	16	inputbuffer
FIELD	155:26	155:26	17	inputbuffer
LEAF_NODE	155:26	155:26	18	inputbuffer
LEAF_NODE	155:37	155:37	16	,
ARGUMENT	155:39	155:39	16	256
FIELD	155:39	155:39	17	256
LEAF_NODE	155:39	155:39	18	256
LEAF_NODE	155:42	155:42	16	,
ARGUMENT	155:44	155:44	16	1
FIELD	155:44	155:44	17	1
LEAF_NODE	155:44	155:44	18	1
LEAF_NODE	155:45	155:45	16	,
ARGUMENT	155:47	155:47	16	f
FIELD	155:47	155:47	17	f
LEAF_NODE	155:47	155:47	18	f
LEAF_NODE	155:48	155:48	16	)
LEAF_NODE	155:49	155:49	14	;
EXPR_STATEMENT	157:20	157:45	13	memset ( tilebuffer , 0 , 256 ) ;
EXPR	157:20	157:20	14	memset ( tilebuffer , 0 , 256 )
FUNCTION_CALL	157:20	157:44	15	memset ( tilebuffer , 0 , 256 )
CALLEE	157:20	157:20	16	memset
LEAF_NODE	157:20	157:20	17	memset
LEAF_NODE	157:26	157:26	16	(
ARGUMENT	157:27	157:27	16	tilebuffer
FIELD	157:27	157:27	17	tilebuffer
LEAF_NODE	157:27	157:27	18	tilebuffer
LEAF_NODE	157:37	157:37	16	,
ARGUMENT	157:38	157:38	16	0
FIELD	157:38	157:38	17	0
LEAF_NODE	157:38	157:38	18	0
LEAF_NODE	157:39	157:39	16	,
ARGUMENT	157:41	157:41	16	256
FIELD	157:41	157:41	17	256
LEAF_NODE	157:41	157:41	18	256
LEAF_NODE	157:44	157:44	16	)
LEAF_NODE	157:45	157:45	14	;
EXPR_STATEMENT	158:20	160:69	13	ret = TIFFReadFromUserBuffer ( tif , j , inputbuffer , 256 , tilebuffer , 256 ) ;
EXPR	158:20	158:20	14	ret = TIFFReadFromUserBuffer ( tif , j , inputbuffer , 256 , tilebuffer , 256 )
ASSIGN	158:20	158:26	15	ret = TIFFReadFromUserBuffer ( tif , j , inputbuffer , 256 , tilebuffer , 256 )
LVAL	158:20	158:20	16	ret
FIELD	158:20	158:20	17	ret
LEAF_NODE	158:20	158:20	18	ret
ASSIGN_OP	158:24	158:24	16	=
LEAF_NODE	158:24	158:24	17	=
RVAL	158:26	158:26	16	TIFFReadFromUserBuffer ( tif , j , inputbuffer , 256 , tilebuffer , 256 )
FUNCTION_CALL	158:26	160:68	17	TIFFReadFromUserBuffer ( tif , j , inputbuffer , 256 , tilebuffer , 256 )
CALLEE	158:26	158:26	18	TIFFReadFromUserBuffer
LEAF_NODE	158:26	158:26	19	TIFFReadFromUserBuffer
LEAF_NODE	158:48	158:48	18	(
ARGUMENT	158:49	158:49	18	tif
FIELD	158:49	158:49	19	tif
LEAF_NODE	158:49	158:49	20	tif
LEAF_NODE	158:52	158:52	18	,
ARGUMENT	158:54	158:54	18	j
FIELD	158:54	158:54	19	j
LEAF_NODE	158:54	158:54	20	j
LEAF_NODE	158:55	158:55	18	,
ARGUMENT	159:52	159:52	18	inputbuffer
FIELD	159:52	159:52	19	inputbuffer
LEAF_NODE	159:52	159:52	20	inputbuffer
LEAF_NODE	159:63	159:63	18	,
ARGUMENT	159:65	159:65	18	256
FIELD	159:65	159:65	19	256
LEAF_NODE	159:65	159:65	20	256
LEAF_NODE	159:68	159:68	18	,
ARGUMENT	160:52	160:52	18	tilebuffer
FIELD	160:52	160:52	19	tilebuffer
LEAF_NODE	160:52	160:52	20	tilebuffer
LEAF_NODE	160:62	160:62	18	,
ARGUMENT	160:64	160:64	18	256
FIELD	160:64	160:64	19	256
LEAF_NODE	160:64	160:64	20	256
LEAF_NODE	160:68	160:68	18	)
LEAF_NODE	160:69	160:69	14	;
EXPR_STATEMENT	161:20	161:36	13	assert ( ret == 1 ) ;
EXPR	161:20	161:20	14	assert ( ret == 1 )
FUNCTION_CALL	161:20	161:35	15	assert ( ret == 1 )
CALLEE	161:20	161:20	16	assert
LEAF_NODE	161:20	161:20	17	assert
LEAF_NODE	161:26	161:26	16	(
ARGUMENT	161:27	161:34	16	ret == 1
FIELD	161:27	161:27	17	ret
LEAF_NODE	161:27	161:27	18	ret
EQ_OPERATOR	161:31	161:31	17	==
LEAF_NODE	161:31	161:31	18	==
FIELD	161:34	161:34	17	1
LEAF_NODE	161:34	161:34	18	1
LEAF_NODE	161:35	161:35	16	)
LEAF_NODE	161:36	161:36	14	;
SELECTION	162:20	164:20	13	
KEYWORD	162:20	162:20	14	if
LEAF_NODE	162:20	162:20	15	if
LEAF_NODE	162:22	162:22	14	(
CONDITION	162:24	162:24	14	tilebuffer [ 0 ] != expected_c || tilebuffer [ 255 ] != expected_c
EXPR	162:24	162:24	15	tilebuffer [ 0 ] != expected_c || tilebuffer [ 255 ] != expected_c
OR	162:24	163:24	16	tilebuffer [ 0 ] != expected_c || tilebuffer [ 255 ] != expected_c
EXPR	162:24	162:41	17	tilebuffer [ 0 ] != expected_c
FIELD	162:24	162:36	18	tilebuffer [ 0 ]
LEAF_NODE	162:24	162:24	19	tilebuffer
LEAF_NODE	162:34	162:34	19	[
EXPR	162:35	162:35	19	0
FIELD	162:35	162:35	20	0
LEAF_NODE	162:35	162:35	21	0
LEAF_NODE	162:36	162:36	19	]
EQ_OPERATOR	162:38	162:38	18	!=
LEAF_NODE	162:38	162:38	19	!=
FIELD	162:41	162:41	18	expected_c
LEAF_NODE	162:41	162:41	19	expected_c
LEAF_NODE	162:52	162:52	17	||
EXPR	163:24	163:43	17	tilebuffer [ 255 ] != expected_c
FIELD	163:24	163:38	18	tilebuffer [ 255 ]
LEAF_NODE	163:24	163:24	19	tilebuffer
LEAF_NODE	163:34	163:34	19	[
EXPR	163:35	163:35	19	255
FIELD	163:35	163:35	20	255
LEAF_NODE	163:35	163:35	21	255
LEAF_NODE	163:38	163:38	19	]
EQ_OPERATOR	163:40	163:40	18	!=
LEAF_NODE	163:40	163:40	19	!=
FIELD	163:43	163:43	18	expected_c
LEAF_NODE	163:43	163:43	19	expected_c
LEAF_NODE	163:54	163:54	14	)
STATEMENTS	164:20	170:20	14	
LEAF_NODE	164:20	164:20	15	{
STATEMENTS	165:24	169:24	15	
EXPR_STATEMENT	165:24	166:66	16	fprintf ( stderr , "unexpected value at tile %d: %d %d\n" , j , tilebuffer [ 0 ] , tilebuffer [ 255 ] ) ;
EXPR	165:24	165:24	17	fprintf ( stderr , "unexpected value at tile %d: %d %d\n" , j , tilebuffer [ 0 ] , tilebuffer [ 255 ] )
FUNCTION_CALL	165:24	166:65	18	fprintf ( stderr , "unexpected value at tile %d: %d %d\n" , j , tilebuffer [ 0 ] , tilebuffer [ 255 ] )
CALLEE	165:24	165:24	19	fprintf
LEAF_NODE	165:24	165:24	20	fprintf
LEAF_NODE	165:31	165:31	19	(
ARGUMENT	165:32	165:32	19	stderr
FIELD	165:32	165:32	20	stderr
LEAF_NODE	165:32	165:32	21	stderr
LEAF_NODE	165:38	165:38	19	,
ARGUMENT	165:40	165:40	19	"unexpected value at tile %d: %d %d\n"
FIELD	165:40	165:40	20	"unexpected value at tile %d: %d %d\n"
LEAF_NODE	165:40	165:40	21	"unexpected value at tile %d: %d %d\n"
LEAF_NODE	165:78	165:78	19	,
ARGUMENT	166:32	166:32	19	j
FIELD	166:32	166:32	20	j
LEAF_NODE	166:32	166:32	21	j
LEAF_NODE	166:33	166:33	19	,
ARGUMENT	166:35	166:35	19	tilebuffer [ 0 ]
FIELD	166:35	166:47	20	tilebuffer [ 0 ]
LEAF_NODE	166:35	166:35	21	tilebuffer
LEAF_NODE	166:45	166:45	21	[
EXPR	166:46	166:46	21	0
FIELD	166:46	166:46	22	0
LEAF_NODE	166:46	166:46	23	0
LEAF_NODE	166:47	166:47	21	]
LEAF_NODE	166:48	166:48	19	,
ARGUMENT	166:50	166:50	19	tilebuffer [ 255 ]
FIELD	166:50	166:64	20	tilebuffer [ 255 ]
LEAF_NODE	166:50	166:50	21	tilebuffer
LEAF_NODE	166:60	166:60	21	[
EXPR	166:61	166:61	21	255
FIELD	166:61	166:61	22	255
LEAF_NODE	166:61	166:61	23	255
LEAF_NODE	166:64	166:64	21	]
LEAF_NODE	166:65	166:65	19	)
LEAF_NODE	166:66	166:66	17	;
EXPR_STATEMENT	167:24	167:38	16	TIFFClose ( tif ) ;
EXPR	167:24	167:24	17	TIFFClose ( tif )
FUNCTION_CALL	167:24	167:37	18	TIFFClose ( tif )
CALLEE	167:24	167:24	19	TIFFClose
LEAF_NODE	167:24	167:24	20	TIFFClose
LEAF_NODE	167:33	167:33	19	(
ARGUMENT	167:34	167:34	19	tif
FIELD	167:34	167:34	20	tif
LEAF_NODE	167:34	167:34	21	tif
LEAF_NODE	167:37	167:37	19	)
LEAF_NODE	167:38	167:38	17	;
EXPR_STATEMENT	168:24	168:33	16	fclose ( f ) ;
EXPR	168:24	168:24	17	fclose ( f )
FUNCTION_CALL	168:24	168:32	18	fclose ( f )
CALLEE	168:24	168:24	19	fclose
LEAF_NODE	168:24	168:24	20	fclose
LEAF_NODE	168:30	168:30	19	(
ARGUMENT	168:31	168:31	19	f
FIELD	168:31	168:31	20	f
LEAF_NODE	168:31	168:31	21	f
LEAF_NODE	168:32	168:32	19	)
LEAF_NODE	168:33	168:33	17	;
JUMP_STATEMENT	169:24	169:32	16	return 1 ;
KEYWORD	169:24	169:24	17	return
LEAF_NODE	169:24	169:24	18	return
DESTINATION	169:31	169:31	17	1
EXPR	169:31	169:31	18	1
FIELD	169:31	169:31	19	1
LEAF_NODE	169:31	169:31	20	1
LEAF_NODE	169:32	169:32	17	;
LEAF_NODE	170:20	170:20	15	}
LEAF_NODE	171:16	171:16	12	}
LEAF_NODE	172:12	172:12	11	}
LEAF_NODE	173:8	173:8	8	}
SELECTION	174:8	175:8	6	
KEYWORD	174:8	174:8	7	else
LEAF_NODE	174:8	174:8	8	else
STATEMENTS	175:8	245:8	7	
LEAF_NODE	175:8	175:8	8	{
STATEMENTS	176:12	232:12	8	
SIMPLE_DECL	176:12	176:17	9	int j ;
VAR_DECL	176:12	176:16	10	int j
TYPE	176:12	176:12	11	int
TYPE_NAME	176:12	176:12	12	int
LEAF_NODE	176:12	176:12	13	int
NAME	176:16	176:16	11	j
LEAF_NODE	176:16	176:16	12	j
LEAF_NODE	176:17	176:17	10	;
ITERATION	177:12	178:12	9	
KEYWORD	177:12	177:12	10	for
LEAF_NODE	177:12	177:12	11	for
LEAF_NODE	177:15	177:15	10	(
FOR_INIT	177:17	177:22	10	j = 0 ;
EXPR	177:17	177:17	11	j = 0
ASSIGN	177:17	177:21	12	j = 0
LVAL	177:17	177:17	13	j
FIELD	177:17	177:17	14	j
LEAF_NODE	177:17	177:17	15	j
ASSIGN_OP	177:19	177:19	13	=
LEAF_NODE	177:19	177:19	14	=
RVAL	177:21	177:21	13	0
FIELD	177:21	177:21	14	0
LEAF_NODE	177:21	177:21	15	0
LEAF_NODE	177:22	177:22	11	;
CONDITION	177:24	177:24	10	j < height
EXPR	177:24	177:28	11	j < height
FIELD	177:24	177:24	12	j
LEAF_NODE	177:24	177:24	13	j
REL_OPERATOR	177:26	177:26	12	<
LEAF_NODE	177:26	177:26	13	<
FIELD	177:28	177:28	12	height
LEAF_NODE	177:28	177:28	13	height
LEAF_NODE	177:34	177:34	10	;
FOR_EXPR	177:36	177:36	10	j ++
EXPR	177:36	177:36	11	j ++
FIELD	177:36	177:37	12	j ++
LEAF_NODE	177:36	177:36	13	j
LEAF_NODE	177:37	177:37	13	++
LEAF_NODE	177:40	177:40	10	)
STATEMENTS	178:12	230:12	10	
LEAF_NODE	178:12	178:12	11	{
STATEMENTS	179:16	228:16	11	
SIMPLE_DECL	179:16	179:25	12	int retry ;
VAR_DECL	179:16	179:20	13	int retry
TYPE	179:16	179:16	14	int
TYPE_NAME	179:16	179:16	15	int
LEAF_NODE	179:16	179:16	16	int
NAME	179:20	179:20	14	retry
LEAF_NODE	179:20	179:20	15	retry
LEAF_NODE	179:25	179:25	13	;
SIMPLE_DECL	180:16	180:59	12	unsigned char expected_c ; expected_c = ( unsigned char ) j ;
VAR_DECL	180:16	180:30	13	unsigned char expected_c ; expected_c = ( unsigned char ) j
TYPE	180:16	180:16	14	unsigned char
TYPE_NAME	180:16	180:25	15	unsigned char
LEAF_NODE	180:16	180:16	16	unsigned
LEAF_NODE	180:25	180:25	16	char
NAME	180:30	180:30	14	expected_c
LEAF_NODE	180:30	180:30	15	expected_c
LEAF_NODE	0:0	0:0	14	;
INIT	180:30	180:30	14	expected_c = ( unsigned char ) j
ASSIGN	180:30	180:43	15	expected_c = ( unsigned char ) j
LVAL	180:30	180:30	16	expected_c
NAME	180:30	180:30	17	expected_c
LEAF_NODE	180:30	180:30	18	expected_c
ASSIGN_OP	180:41	180:41	16	=
LEAF_NODE	180:41	180:41	17	=
RVAL	180:43	180:58	16	( unsigned char ) j
LEAF_NODE	180:43	180:43	17	(
TYPE_NAME	180:44	180:53	17	unsigned char
LEAF_NODE	180:44	180:44	18	unsigned
LEAF_NODE	180:53	180:53	18	char
LEAF_NODE	180:57	180:57	17	)
FIELD	180:58	180:58	17	j
LEAF_NODE	180:58	180:58	18	j
LEAF_NODE	180:59	180:59	13	;
ITERATION	181:16	182:16	12	
KEYWORD	181:16	181:16	13	for
LEAF_NODE	181:16	181:16	14	for
LEAF_NODE	181:19	181:19	13	(
FOR_INIT	181:21	181:30	13	retry = 0 ;
EXPR	181:21	181:21	14	retry = 0
ASSIGN	181:21	181:29	15	retry = 0
LVAL	181:21	181:21	16	retry
FIELD	181:21	181:21	17	retry
LEAF_NODE	181:21	181:21	18	retry
ASSIGN_OP	181:27	181:27	16	=
LEAF_NODE	181:27	181:27	17	=
RVAL	181:29	181:29	16	0
FIELD	181:29	181:29	17	0
LEAF_NODE	181:29	181:29	18	0
LEAF_NODE	181:30	181:30	14	;
CONDITION	181:32	181:32	13	retry < 2
EXPR	181:32	181:40	14	retry < 2
FIELD	181:32	181:32	15	retry
LEAF_NODE	181:32	181:32	16	retry
REL_OPERATOR	181:38	181:38	15	<
LEAF_NODE	181:38	181:38	16	<
FIELD	181:40	181:40	15	2
LEAF_NODE	181:40	181:40	16	2
LEAF_NODE	181:41	181:41	13	;
FOR_EXPR	181:43	181:43	13	retry ++
EXPR	181:43	181:43	14	retry ++
FIELD	181:43	181:48	15	retry ++
LEAF_NODE	181:43	181:43	16	retry
LEAF_NODE	181:48	181:48	16	++
LEAF_NODE	181:51	181:51	13	)
STATEMENTS	182:16	194:16	13	
LEAF_NODE	182:16	182:16	14	{
STATEMENTS	183:20	186:20	14	
SIMPLE_DECL	183:20	183:39	15	unsigned char c ; c = 0 ;
VAR_DECL	183:20	183:34	16	unsigned char c ; c = 0
TYPE	183:20	183:20	17	unsigned char
TYPE_NAME	183:20	183:29	18	unsigned char
LEAF_NODE	183:20	183:20	19	unsigned
LEAF_NODE	183:29	183:29	19	char
NAME	183:34	183:34	17	c
LEAF_NODE	183:34	183:34	18	c
LEAF_NODE	0:0	0:0	17	;
INIT	183:34	183:34	17	c = 0
ASSIGN	183:34	183:38	18	c = 0
LVAL	183:34	183:34	19	c
NAME	183:34	183:34	20	c
LEAF_NODE	183:34	183:34	21	c
ASSIGN_OP	183:36	183:36	19	=
LEAF_NODE	183:36	183:36	20	=
RVAL	183:38	183:38	19	0
FIELD	183:38	183:38	20	0
LEAF_NODE	183:38	183:38	21	0
LEAF_NODE	183:39	183:39	16	;
EXPR_STATEMENT	184:20	184:63	15	ret = TIFFReadEncodedStrip ( tif , j , & c , 1 ) ;
EXPR	184:20	184:20	16	ret = TIFFReadEncodedStrip ( tif , j , & c , 1 )
ASSIGN	184:20	184:26	17	ret = TIFFReadEncodedStrip ( tif , j , & c , 1 )
LVAL	184:20	184:20	18	ret
FIELD	184:20	184:20	19	ret
LEAF_NODE	184:20	184:20	20	ret
ASSIGN_OP	184:24	184:24	18	=
LEAF_NODE	184:24	184:24	19	=
RVAL	184:26	184:26	18	TIFFReadEncodedStrip ( tif , j , & c , 1 )
FUNCTION_CALL	184:26	184:62	19	TIFFReadEncodedStrip ( tif , j , & c , 1 )
CALLEE	184:26	184:26	20	TIFFReadEncodedStrip
LEAF_NODE	184:26	184:26	21	TIFFReadEncodedStrip
LEAF_NODE	184:46	184:46	20	(
ARGUMENT	184:48	184:48	20	tif
FIELD	184:48	184:48	21	tif
LEAF_NODE	184:48	184:48	22	tif
LEAF_NODE	184:51	184:51	20	,
ARGUMENT	184:53	184:53	20	j
FIELD	184:53	184:53	21	j
LEAF_NODE	184:53	184:53	22	j
LEAF_NODE	184:54	184:54	20	,
ARGUMENT	184:56	184:56	20	& c
UNARY_EXPR	184:56	184:57	21	& c
UNARY_OPERATOR	184:56	184:56	22	&
LEAF_NODE	184:56	184:56	23	&
FIELD	184:57	184:57	22	c
LEAF_NODE	184:57	184:57	23	c
LEAF_NODE	184:58	184:58	20	,
ARGUMENT	184:60	184:60	20	1
FIELD	184:60	184:60	21	1
LEAF_NODE	184:60	184:60	22	1
LEAF_NODE	184:62	184:62	20	)
LEAF_NODE	184:63	184:63	16	;
EXPR_STATEMENT	185:20	185:36	15	assert ( ret == 1 ) ;
EXPR	185:20	185:20	16	assert ( ret == 1 )
FUNCTION_CALL	185:20	185:35	17	assert ( ret == 1 )
CALLEE	185:20	185:20	18	assert
LEAF_NODE	185:20	185:20	19	assert
LEAF_NODE	185:26	185:26	18	(
ARGUMENT	185:27	185:34	18	ret == 1
FIELD	185:27	185:27	19	ret
LEAF_NODE	185:27	185:27	20	ret
EQ_OPERATOR	185:31	185:31	19	==
LEAF_NODE	185:31	185:31	20	==
FIELD	185:34	185:34	19	1
LEAF_NODE	185:34	185:34	20	1
LEAF_NODE	185:35	185:35	18	)
LEAF_NODE	185:36	185:36	16	;
SELECTION	186:20	187:20	15	
KEYWORD	186:20	186:20	16	if
LEAF_NODE	186:20	186:20	17	if
LEAF_NODE	186:22	186:22	16	(
CONDITION	186:24	186:24	16	c != expected_c
EXPR	186:24	186:29	17	c != expected_c
FIELD	186:24	186:24	18	c
LEAF_NODE	186:24	186:24	19	c
EQ_OPERATOR	186:26	186:26	18	!=
LEAF_NODE	186:26	186:26	19	!=
FIELD	186:29	186:29	18	expected_c
LEAF_NODE	186:29	186:29	19	expected_c
LEAF_NODE	186:40	186:40	16	)
STATEMENTS	187:20	193:20	16	
LEAF_NODE	187:20	187:20	17	{
STATEMENTS	188:24	192:24	17	
EXPR_STATEMENT	188:24	189:37	18	fprintf ( stderr , "unexpected value at line %d: %d\n" , j , c ) ;
EXPR	188:24	188:24	19	fprintf ( stderr , "unexpected value at line %d: %d\n" , j , c )
FUNCTION_CALL	188:24	189:36	20	fprintf ( stderr , "unexpected value at line %d: %d\n" , j , c )
CALLEE	188:24	188:24	21	fprintf
LEAF_NODE	188:24	188:24	22	fprintf
LEAF_NODE	188:31	188:31	21	(
ARGUMENT	188:32	188:32	21	stderr
FIELD	188:32	188:32	22	stderr
LEAF_NODE	188:32	188:32	23	stderr
LEAF_NODE	188:38	188:38	21	,
ARGUMENT	188:40	188:40	21	"unexpected value at line %d: %d\n"
FIELD	188:40	188:40	22	"unexpected value at line %d: %d\n"
LEAF_NODE	188:40	188:40	23	"unexpected value at line %d: %d\n"
LEAF_NODE	188:75	188:75	21	,
ARGUMENT	189:32	189:32	21	j
FIELD	189:32	189:32	22	j
LEAF_NODE	189:32	189:32	23	j
LEAF_NODE	189:33	189:33	21	,
ARGUMENT	189:35	189:35	21	c
FIELD	189:35	189:35	22	c
LEAF_NODE	189:35	189:35	23	c
LEAF_NODE	189:36	189:36	21	)
LEAF_NODE	189:37	189:37	19	;
EXPR_STATEMENT	190:24	190:38	18	TIFFClose ( tif ) ;
EXPR	190:24	190:24	19	TIFFClose ( tif )
FUNCTION_CALL	190:24	190:37	20	TIFFClose ( tif )
CALLEE	190:24	190:24	21	TIFFClose
LEAF_NODE	190:24	190:24	22	TIFFClose
LEAF_NODE	190:33	190:33	21	(
ARGUMENT	190:34	190:34	21	tif
FIELD	190:34	190:34	22	tif
LEAF_NODE	190:34	190:34	23	tif
LEAF_NODE	190:37	190:37	21	)
LEAF_NODE	190:38	190:38	19	;
EXPR_STATEMENT	191:24	191:33	18	fclose ( f ) ;
EXPR	191:24	191:24	19	fclose ( f )
FUNCTION_CALL	191:24	191:32	20	fclose ( f )
CALLEE	191:24	191:24	21	fclose
LEAF_NODE	191:24	191:24	22	fclose
LEAF_NODE	191:30	191:30	21	(
ARGUMENT	191:31	191:31	21	f
FIELD	191:31	191:31	22	f
LEAF_NODE	191:31	191:31	23	f
LEAF_NODE	191:32	191:32	21	)
LEAF_NODE	191:33	191:33	19	;
JUMP_STATEMENT	192:24	192:32	18	return 1 ;
KEYWORD	192:24	192:24	19	return
LEAF_NODE	192:24	192:24	20	return
DESTINATION	192:31	192:31	19	1
EXPR	192:31	192:31	20	1
FIELD	192:31	192:31	21	1
LEAF_NODE	192:31	192:31	22	1
LEAF_NODE	192:32	192:32	19	;
LEAF_NODE	193:20	193:20	17	}
LEAF_NODE	194:16	194:16	14	}
LEAF_NODE	196:16	196:16	12	{
STATEMENTS	197:20	218:20	12	
SIMPLE_DECL	197:20	197:31	13	int err ; err = 0 ;
VAR_DECL	197:20	197:24	14	int err ; err = 0
TYPE	197:20	197:20	15	int
TYPE_NAME	197:20	197:20	16	int
LEAF_NODE	197:20	197:20	17	int
NAME	197:24	197:24	15	err
LEAF_NODE	197:24	197:24	16	err
LEAF_NODE	0:0	0:0	15	;
INIT	197:24	197:24	15	err = 0
ASSIGN	197:24	197:30	16	err = 0
LVAL	197:24	197:24	17	err
NAME	197:24	197:24	18	err
LEAF_NODE	197:24	197:24	19	err
ASSIGN_OP	197:28	197:28	17	=
LEAF_NODE	197:28	197:28	18	=
RVAL	197:30	197:30	17	0
FIELD	197:30	197:30	18	0
LEAF_NODE	197:30	197:30	19	0
LEAF_NODE	197:31	197:31	14	;
SIMPLE_DECL	198:20	198:36	13	int offset , int size ;
INIT_DECL_LIST	198:20	198:20	14	int offset , int size
VAR_DECL	198:20	198:24	15	int offset
TYPE	198:20	198:20	16	int
TYPE_NAME	198:20	198:20	17	int
LEAF_NODE	198:20	198:20	18	int
NAME	198:24	198:24	16	offset
LEAF_NODE	198:24	198:24	17	offset
LEAF_NODE	198:30	198:30	15	,
VAR_DECL	198:20	198:32	15	int size
TYPE	198:20	198:20	16	int
TYPE_NAME	198:20	198:20	17	int
LEAF_NODE	198:20	198:20	18	int
NAME	198:32	198:32	16	size
LEAF_NODE	198:32	198:32	17	size
LEAF_NODE	198:36	198:36	14	;
SIMPLE_DECL	199:20	199:48	13	unsigned char [ 1 ] inputbuffer ;
VAR_DECL	199:20	199:34	14	unsigned char [ 1 ] inputbuffer
TYPE	199:20	199:45	15	unsigned char [ 1 ]
TYPE_NAME	199:20	199:29	16	unsigned char
LEAF_NODE	199:20	199:20	17	unsigned
LEAF_NODE	199:29	199:29	17	char
TYPE_SUFFIX	199:45	199:47	16	[ 1 ]
LEAF_NODE	199:45	199:45	17	[
FIELD	199:46	199:46	17	1
LEAF_NODE	199:46	199:46	18	1
LEAF_NODE	199:47	199:47	17	]
NAME	199:34	199:34	15	inputbuffer
LEAF_NODE	199:34	199:34	16	inputbuffer
LEAF_NODE	199:48	199:48	14	;
SIMPLE_DECL	200:20	200:47	13	unsigned char [ 1 ] tilebuffer ;
VAR_DECL	200:20	200:34	14	unsigned char [ 1 ] tilebuffer
TYPE	200:20	200:44	15	unsigned char [ 1 ]
TYPE_NAME	200:20	200:29	16	unsigned char
LEAF_NODE	200:20	200:20	17	unsigned
LEAF_NODE	200:29	200:29	17	char
TYPE_SUFFIX	200:44	200:46	16	[ 1 ]
LEAF_NODE	200:44	200:44	17	[
FIELD	200:45	200:45	17	1
LEAF_NODE	200:45	200:45	18	1
LEAF_NODE	200:46	200:46	17	]
NAME	200:34	200:34	15	tilebuffer
LEAF_NODE	200:34	200:34	16	tilebuffer
LEAF_NODE	200:47	200:47	14	;
EXPR_STATEMENT	202:20	202:69	13	offset = TIFFGetStrileOffsetWithErr ( tif , j , & err ) ;
EXPR	202:20	202:20	14	offset = TIFFGetStrileOffsetWithErr ( tif , j , & err )
ASSIGN	202:20	202:29	15	offset = TIFFGetStrileOffsetWithErr ( tif , j , & err )
LVAL	202:20	202:20	16	offset
FIELD	202:20	202:20	17	offset
LEAF_NODE	202:20	202:20	18	offset
ASSIGN_OP	202:27	202:27	16	=
LEAF_NODE	202:27	202:27	17	=
RVAL	202:29	202:29	16	TIFFGetStrileOffsetWithErr ( tif , j , & err )
FUNCTION_CALL	202:29	202:68	17	TIFFGetStrileOffsetWithErr ( tif , j , & err )
CALLEE	202:29	202:29	18	TIFFGetStrileOffsetWithErr
LEAF_NODE	202:29	202:29	19	TIFFGetStrileOffsetWithErr
LEAF_NODE	202:55	202:55	18	(
ARGUMENT	202:56	202:56	18	tif
FIELD	202:56	202:56	19	tif
LEAF_NODE	202:56	202:56	20	tif
LEAF_NODE	202:59	202:59	18	,
ARGUMENT	202:61	202:61	18	j
FIELD	202:61	202:61	19	j
LEAF_NODE	202:61	202:61	20	j
LEAF_NODE	202:62	202:62	18	,
ARGUMENT	202:64	202:64	18	& err
UNARY_EXPR	202:64	202:65	19	& err
UNARY_OPERATOR	202:64	202:64	20	&
LEAF_NODE	202:64	202:64	21	&
FIELD	202:65	202:65	20	err
LEAF_NODE	202:65	202:65	21	err
LEAF_NODE	202:68	202:68	18	)
LEAF_NODE	202:69	202:69	14	;
EXPR_STATEMENT	203:20	203:39	13	assert ( offset != 0 ) ;
EXPR	203:20	203:20	14	assert ( offset != 0 )
FUNCTION_CALL	203:20	203:38	15	assert ( offset != 0 )
CALLEE	203:20	203:20	16	assert
LEAF_NODE	203:20	203:20	17	assert
LEAF_NODE	203:26	203:26	16	(
ARGUMENT	203:27	203:37	16	offset != 0
FIELD	203:27	203:27	17	offset
LEAF_NODE	203:27	203:27	18	offset
EQ_OPERATOR	203:34	203:34	17	!=
LEAF_NODE	203:34	203:34	18	!=
FIELD	203:37	203:37	17	0
LEAF_NODE	203:37	203:37	18	0
LEAF_NODE	203:38	203:38	16	)
LEAF_NODE	203:39	203:39	14	;
EXPR_STATEMENT	204:20	204:36	13	assert ( err == 0 ) ;
EXPR	204:20	204:20	14	assert ( err == 0 )
FUNCTION_CALL	204:20	204:35	15	assert ( err == 0 )
CALLEE	204:20	204:20	16	assert
LEAF_NODE	204:20	204:20	17	assert
LEAF_NODE	204:26	204:26	16	(
ARGUMENT	204:27	204:34	16	err == 0
FIELD	204:27	204:27	17	err
LEAF_NODE	204:27	204:27	18	err
EQ_OPERATOR	204:31	204:31	17	==
LEAF_NODE	204:31	204:31	18	==
FIELD	204:34	204:34	17	0
LEAF_NODE	204:34	204:34	18	0
LEAF_NODE	204:35	204:35	16	)
LEAF_NODE	204:36	204:36	14	;
EXPR_STATEMENT	206:20	206:70	13	size = TIFFGetStrileByteCountWithErr ( tif , j , & err ) ;
EXPR	206:20	206:20	14	size = TIFFGetStrileByteCountWithErr ( tif , j , & err )
ASSIGN	206:20	206:27	15	size = TIFFGetStrileByteCountWithErr ( tif , j , & err )
LVAL	206:20	206:20	16	size
FIELD	206:20	206:20	17	size
LEAF_NODE	206:20	206:20	18	size
ASSIGN_OP	206:25	206:25	16	=
LEAF_NODE	206:25	206:25	17	=
RVAL	206:27	206:27	16	TIFFGetStrileByteCountWithErr ( tif , j , & err )
FUNCTION_CALL	206:27	206:69	17	TIFFGetStrileByteCountWithErr ( tif , j , & err )
CALLEE	206:27	206:27	18	TIFFGetStrileByteCountWithErr
LEAF_NODE	206:27	206:27	19	TIFFGetStrileByteCountWithErr
LEAF_NODE	206:56	206:56	18	(
ARGUMENT	206:57	206:57	18	tif
FIELD	206:57	206:57	19	tif
LEAF_NODE	206:57	206:57	20	tif
LEAF_NODE	206:60	206:60	18	,
ARGUMENT	206:62	206:62	18	j
FIELD	206:62	206:62	19	j
LEAF_NODE	206:62	206:62	20	j
LEAF_NODE	206:63	206:63	18	,
ARGUMENT	206:65	206:65	18	& err
UNARY_EXPR	206:65	206:66	19	& err
UNARY_OPERATOR	206:65	206:65	20	&
LEAF_NODE	206:65	206:65	21	&
FIELD	206:66	206:66	20	err
LEAF_NODE	206:66	206:66	21	err
LEAF_NODE	206:69	206:69	18	)
LEAF_NODE	206:70	206:70	14	;
EXPR_STATEMENT	207:20	207:37	13	assert ( size == 1 ) ;
EXPR	207:20	207:20	14	assert ( size == 1 )
FUNCTION_CALL	207:20	207:36	15	assert ( size == 1 )
CALLEE	207:20	207:20	16	assert
LEAF_NODE	207:20	207:20	17	assert
LEAF_NODE	207:26	207:26	16	(
ARGUMENT	207:27	207:35	16	size == 1
FIELD	207:27	207:27	17	size
LEAF_NODE	207:27	207:27	18	size
EQ_OPERATOR	207:32	207:32	17	==
LEAF_NODE	207:32	207:32	18	==
FIELD	207:35	207:35	17	1
LEAF_NODE	207:35	207:35	18	1
LEAF_NODE	207:36	207:36	16	)
LEAF_NODE	207:37	207:37	14	;
EXPR_STATEMENT	208:20	208:36	13	assert ( err == 0 ) ;
EXPR	208:20	208:20	14	assert ( err == 0 )
FUNCTION_CALL	208:20	208:35	15	assert ( err == 0 )
CALLEE	208:20	208:20	16	assert
LEAF_NODE	208:20	208:20	17	assert
LEAF_NODE	208:26	208:26	16	(
ARGUMENT	208:27	208:34	16	err == 0
FIELD	208:27	208:27	17	err
LEAF_NODE	208:27	208:27	18	err
EQ_OPERATOR	208:31	208:31	17	==
LEAF_NODE	208:31	208:31	18	==
FIELD	208:34	208:34	17	0
LEAF_NODE	208:34	208:34	18	0
LEAF_NODE	208:35	208:35	16	)
LEAF_NODE	208:36	208:36	14	;
EXPR_STATEMENT	210:20	210:46	13	fseek ( f , offset , SEEK_SET ) ;
EXPR	210:20	210:20	14	fseek ( f , offset , SEEK_SET )
FUNCTION_CALL	210:20	210:45	15	fseek ( f , offset , SEEK_SET )
CALLEE	210:20	210:20	16	fseek
LEAF_NODE	210:20	210:20	17	fseek
LEAF_NODE	210:25	210:25	16	(
ARGUMENT	210:26	210:26	16	f
FIELD	210:26	210:26	17	f
LEAF_NODE	210:26	210:26	18	f
LEAF_NODE	210:27	210:27	16	,
ARGUMENT	210:29	210:29	16	offset
FIELD	210:29	210:29	17	offset
LEAF_NODE	210:29	210:29	18	offset
LEAF_NODE	210:35	210:35	16	,
ARGUMENT	210:37	210:37	16	SEEK_SET
FIELD	210:37	210:37	17	SEEK_SET
LEAF_NODE	210:37	210:37	18	SEEK_SET
LEAF_NODE	210:45	210:45	16	)
LEAF_NODE	210:46	210:46	14	;
EXPR_STATEMENT	211:20	211:47	13	fread ( inputbuffer , 1 , 1 , f ) ;
EXPR	211:20	211:20	14	fread ( inputbuffer , 1 , 1 , f )
FUNCTION_CALL	211:20	211:46	15	fread ( inputbuffer , 1 , 1 , f )
CALLEE	211:20	211:20	16	fread
LEAF_NODE	211:20	211:20	17	fread
LEAF_NODE	211:25	211:25	16	(
ARGUMENT	211:26	211:26	16	inputbuffer
FIELD	211:26	211:26	17	inputbuffer
LEAF_NODE	211:26	211:26	18	inputbuffer
LEAF_NODE	211:37	211:37	16	,
ARGUMENT	211:39	211:39	16	1
FIELD	211:39	211:39	17	1
LEAF_NODE	211:39	211:39	18	1
LEAF_NODE	211:40	211:40	16	,
ARGUMENT	211:42	211:42	16	1
FIELD	211:42	211:42	17	1
LEAF_NODE	211:42	211:42	18	1
LEAF_NODE	211:43	211:43	16	,
ARGUMENT	211:45	211:45	16	f
FIELD	211:45	211:45	17	f
LEAF_NODE	211:45	211:45	18	f
LEAF_NODE	211:46	211:46	16	)
LEAF_NODE	211:47	211:47	14	;
EXPR_STATEMENT	213:20	213:43	13	memset ( tilebuffer , 0 , 1 ) ;
EXPR	213:20	213:20	14	memset ( tilebuffer , 0 , 1 )
FUNCTION_CALL	213:20	213:42	15	memset ( tilebuffer , 0 , 1 )
CALLEE	213:20	213:20	16	memset
LEAF_NODE	213:20	213:20	17	memset
LEAF_NODE	213:26	213:26	16	(
ARGUMENT	213:27	213:27	16	tilebuffer
FIELD	213:27	213:27	17	tilebuffer
LEAF_NODE	213:27	213:27	18	tilebuffer
LEAF_NODE	213:37	213:37	16	,
ARGUMENT	213:38	213:38	16	0
FIELD	213:38	213:38	17	0
LEAF_NODE	213:38	213:38	18	0
LEAF_NODE	213:39	213:39	16	,
ARGUMENT	213:41	213:41	16	1
FIELD	213:41	213:41	17	1
LEAF_NODE	213:41	213:41	18	1
LEAF_NODE	213:42	213:42	16	)
LEAF_NODE	213:43	213:43	14	;
EXPR_STATEMENT	214:20	216:67	13	ret = TIFFReadFromUserBuffer ( tif , j , inputbuffer , 1 , tilebuffer , 1 ) ;
EXPR	214:20	214:20	14	ret = TIFFReadFromUserBuffer ( tif , j , inputbuffer , 1 , tilebuffer , 1 )
ASSIGN	214:20	214:26	15	ret = TIFFReadFromUserBuffer ( tif , j , inputbuffer , 1 , tilebuffer , 1 )
LVAL	214:20	214:20	16	ret
FIELD	214:20	214:20	17	ret
LEAF_NODE	214:20	214:20	18	ret
ASSIGN_OP	214:24	214:24	16	=
LEAF_NODE	214:24	214:24	17	=
RVAL	214:26	214:26	16	TIFFReadFromUserBuffer ( tif , j , inputbuffer , 1 , tilebuffer , 1 )
FUNCTION_CALL	214:26	216:66	17	TIFFReadFromUserBuffer ( tif , j , inputbuffer , 1 , tilebuffer , 1 )
CALLEE	214:26	214:26	18	TIFFReadFromUserBuffer
LEAF_NODE	214:26	214:26	19	TIFFReadFromUserBuffer
LEAF_NODE	214:48	214:48	18	(
ARGUMENT	214:49	214:49	18	tif
FIELD	214:49	214:49	19	tif
LEAF_NODE	214:49	214:49	20	tif
LEAF_NODE	214:52	214:52	18	,
ARGUMENT	214:54	214:54	18	j
FIELD	214:54	214:54	19	j
LEAF_NODE	214:54	214:54	20	j
LEAF_NODE	214:55	214:55	18	,
ARGUMENT	215:52	215:52	18	inputbuffer
FIELD	215:52	215:52	19	inputbuffer
LEAF_NODE	215:52	215:52	20	inputbuffer
LEAF_NODE	215:63	215:63	18	,
ARGUMENT	215:65	215:65	18	1
FIELD	215:65	215:65	19	1
LEAF_NODE	215:65	215:65	20	1
LEAF_NODE	215:66	215:66	18	,
ARGUMENT	216:52	216:52	18	tilebuffer
FIELD	216:52	216:52	19	tilebuffer
LEAF_NODE	216:52	216:52	20	tilebuffer
LEAF_NODE	216:62	216:62	18	,
ARGUMENT	216:64	216:64	18	1
FIELD	216:64	216:64	19	1
LEAF_NODE	216:64	216:64	20	1
LEAF_NODE	216:66	216:66	18	)
LEAF_NODE	216:67	216:67	14	;
EXPR_STATEMENT	217:20	217:36	13	assert ( ret == 1 ) ;
EXPR	217:20	217:20	14	assert ( ret == 1 )
FUNCTION_CALL	217:20	217:35	15	assert ( ret == 1 )
CALLEE	217:20	217:20	16	assert
LEAF_NODE	217:20	217:20	17	assert
LEAF_NODE	217:26	217:26	16	(
ARGUMENT	217:27	217:34	16	ret == 1
FIELD	217:27	217:27	17	ret
LEAF_NODE	217:27	217:27	18	ret
EQ_OPERATOR	217:31	217:31	17	==
LEAF_NODE	217:31	217:31	18	==
FIELD	217:34	217:34	17	1
LEAF_NODE	217:34	217:34	18	1
LEAF_NODE	217:35	217:35	16	)
LEAF_NODE	217:36	217:36	14	;
SELECTION	218:20	219:20	13	
KEYWORD	218:20	218:20	14	if
LEAF_NODE	218:20	218:20	15	if
LEAF_NODE	218:22	218:22	14	(
CONDITION	218:24	218:24	14	tilebuffer [ 0 ] != expected_c
EXPR	218:24	218:41	15	tilebuffer [ 0 ] != expected_c
FIELD	218:24	218:36	16	tilebuffer [ 0 ]
LEAF_NODE	218:24	218:24	17	tilebuffer
LEAF_NODE	218:34	218:34	17	[
EXPR	218:35	218:35	17	0
FIELD	218:35	218:35	18	0
LEAF_NODE	218:35	218:35	19	0
LEAF_NODE	218:36	218:36	17	]
EQ_OPERATOR	218:38	218:38	16	!=
LEAF_NODE	218:38	218:38	17	!=
FIELD	218:41	218:41	16	expected_c
LEAF_NODE	218:41	218:41	17	expected_c
LEAF_NODE	218:52	218:52	14	)
STATEMENTS	219:20	225:20	14	
LEAF_NODE	219:20	219:20	15	{
STATEMENTS	220:24	224:24	15	
EXPR_STATEMENT	220:24	221:49	16	fprintf ( stderr , "unexpected value at line %d: %d\n" , j , tilebuffer [ 0 ] ) ;
EXPR	220:24	220:24	17	fprintf ( stderr , "unexpected value at line %d: %d\n" , j , tilebuffer [ 0 ] )
FUNCTION_CALL	220:24	221:48	18	fprintf ( stderr , "unexpected value at line %d: %d\n" , j , tilebuffer [ 0 ] )
CALLEE	220:24	220:24	19	fprintf
LEAF_NODE	220:24	220:24	20	fprintf
LEAF_NODE	220:31	220:31	19	(
ARGUMENT	220:32	220:32	19	stderr
FIELD	220:32	220:32	20	stderr
LEAF_NODE	220:32	220:32	21	stderr
LEAF_NODE	220:38	220:38	19	,
ARGUMENT	220:40	220:40	19	"unexpected value at line %d: %d\n"
FIELD	220:40	220:40	20	"unexpected value at line %d: %d\n"
LEAF_NODE	220:40	220:40	21	"unexpected value at line %d: %d\n"
LEAF_NODE	220:75	220:75	19	,
ARGUMENT	221:32	221:32	19	j
FIELD	221:32	221:32	20	j
LEAF_NODE	221:32	221:32	21	j
LEAF_NODE	221:33	221:33	19	,
ARGUMENT	221:35	221:35	19	tilebuffer [ 0 ]
FIELD	221:35	221:47	20	tilebuffer [ 0 ]
LEAF_NODE	221:35	221:35	21	tilebuffer
LEAF_NODE	221:45	221:45	21	[
EXPR	221:46	221:46	21	0
FIELD	221:46	221:46	22	0
LEAF_NODE	221:46	221:46	23	0
LEAF_NODE	221:47	221:47	21	]
LEAF_NODE	221:48	221:48	19	)
LEAF_NODE	221:49	221:49	17	;
EXPR_STATEMENT	222:24	222:38	16	TIFFClose ( tif ) ;
EXPR	222:24	222:24	17	TIFFClose ( tif )
FUNCTION_CALL	222:24	222:37	18	TIFFClose ( tif )
CALLEE	222:24	222:24	19	TIFFClose
LEAF_NODE	222:24	222:24	20	TIFFClose
LEAF_NODE	222:33	222:33	19	(
ARGUMENT	222:34	222:34	19	tif
FIELD	222:34	222:34	20	tif
LEAF_NODE	222:34	222:34	21	tif
LEAF_NODE	222:37	222:37	19	)
LEAF_NODE	222:38	222:38	17	;
EXPR_STATEMENT	223:24	223:33	16	fclose ( f ) ;
EXPR	223:24	223:24	17	fclose ( f )
FUNCTION_CALL	223:24	223:32	18	fclose ( f )
CALLEE	223:24	223:24	19	fclose
LEAF_NODE	223:24	223:24	20	fclose
LEAF_NODE	223:30	223:30	19	(
ARGUMENT	223:31	223:31	19	f
FIELD	223:31	223:31	20	f
LEAF_NODE	223:31	223:31	21	f
LEAF_NODE	223:32	223:32	19	)
LEAF_NODE	223:33	223:33	17	;
JUMP_STATEMENT	224:24	224:32	16	return 1 ;
KEYWORD	224:24	224:24	17	return
LEAF_NODE	224:24	224:24	18	return
DESTINATION	224:31	224:31	17	1
EXPR	224:31	224:31	18	1
FIELD	224:31	224:31	19	1
LEAF_NODE	224:31	224:31	20	1
LEAF_NODE	224:32	224:32	17	;
LEAF_NODE	225:20	225:20	15	}
LEAF_NODE	226:16	226:16	12	}
SELECTION	228:16	229:20	12	
KEYWORD	228:16	228:16	13	if
LEAF_NODE	228:16	228:16	14	if
LEAF_NODE	228:18	228:18	13	(
CONDITION	228:20	228:20	13	j == 1 && height > 100000
EXPR	228:20	228:20	14	j == 1 && height > 100000
AND	228:20	228:30	15	j == 1 && height > 100000
EXPR	228:20	228:25	16	j == 1
FIELD	228:20	228:20	17	j
LEAF_NODE	228:20	228:20	18	j
EQ_OPERATOR	228:22	228:22	17	==
LEAF_NODE	228:22	228:22	18	==
FIELD	228:25	228:25	17	1
LEAF_NODE	228:25	228:25	18	1
LEAF_NODE	228:27	228:27	16	&&
EXPR	228:30	228:39	16	height > 100000
FIELD	228:30	228:30	17	height
LEAF_NODE	228:30	228:30	18	height
REL_OPERATOR	228:37	228:37	17	>
LEAF_NODE	228:37	228:37	18	>
FIELD	228:39	228:39	17	100000
LEAF_NODE	228:39	228:39	18	100000
LEAF_NODE	228:46	228:46	13	)
STATEMENTS	229:20	229:20	13	
EXPR_STATEMENT	229:20	229:35	14	j = height - 2 ;
EXPR	229:20	229:20	15	j = height - 2
ASSIGN	229:20	229:24	16	j = height - 2
LVAL	229:20	229:20	17	j
FIELD	229:20	229:20	18	j
LEAF_NODE	229:20	229:20	19	j
ASSIGN_OP	229:22	229:22	17	=
LEAF_NODE	229:22	229:22	18	=
RVAL	229:24	229:34	17	height - 2
FIELD	229:24	229:24	18	height
LEAF_NODE	229:24	229:24	19	height
LEAF_NODE	229:31	229:31	18	-
FIELD	229:34	229:34	18	2
LEAF_NODE	229:34	229:34	19	2
LEAF_NODE	229:35	229:35	15	;
LEAF_NODE	230:12	230:12	11	}
SELECTION	232:12	233:12	9	
KEYWORD	232:12	232:12	10	if
LEAF_NODE	232:12	232:12	11	if
LEAF_NODE	232:14	232:14	10	(
CONDITION	232:16	232:16	10	height > 100000
EXPR	232:16	232:25	11	height > 100000
FIELD	232:16	232:16	12	height
LEAF_NODE	232:16	232:16	13	height
REL_OPERATOR	232:23	232:23	12	>
LEAF_NODE	232:23	232:23	13	>
FIELD	232:25	232:25	12	100000
LEAF_NODE	232:25	232:25	13	100000
LEAF_NODE	232:32	232:32	10	)
STATEMENTS	233:12	244:12	10	
LEAF_NODE	233:12	233:12	11	{
STATEMENTS	235:16	242:16	11	
SIMPLE_DECL	235:16	235:27	12	int err ; err = 0 ;
VAR_DECL	235:16	235:20	13	int err ; err = 0
TYPE	235:16	235:16	14	int
TYPE_NAME	235:16	235:16	15	int
LEAF_NODE	235:16	235:16	16	int
NAME	235:20	235:20	14	err
LEAF_NODE	235:20	235:20	15	err
LEAF_NODE	0:0	0:0	14	;
INIT	235:20	235:20	14	err = 0
ASSIGN	235:20	235:26	15	err = 0
LVAL	235:20	235:20	16	err
NAME	235:20	235:20	17	err
LEAF_NODE	235:20	235:20	18	err
ASSIGN_OP	235:24	235:24	16	=
LEAF_NODE	235:24	235:24	17	=
RVAL	235:26	235:26	16	0
FIELD	235:26	235:26	17	0
LEAF_NODE	235:26	235:26	18	0
LEAF_NODE	235:27	235:27	13	;
EXPR_STATEMENT	236:16	236:62	12	ret = TIFFGetStrileOffsetWithErr ( tif , 2 , & err ) ;
EXPR	236:16	236:16	13	ret = TIFFGetStrileOffsetWithErr ( tif , 2 , & err )
ASSIGN	236:16	236:22	14	ret = TIFFGetStrileOffsetWithErr ( tif , 2 , & err )
LVAL	236:16	236:16	15	ret
FIELD	236:16	236:16	16	ret
LEAF_NODE	236:16	236:16	17	ret
ASSIGN_OP	236:20	236:20	15	=
LEAF_NODE	236:20	236:20	16	=
RVAL	236:22	236:22	15	TIFFGetStrileOffsetWithErr ( tif , 2 , & err )
FUNCTION_CALL	236:22	236:61	16	TIFFGetStrileOffsetWithErr ( tif , 2 , & err )
CALLEE	236:22	236:22	17	TIFFGetStrileOffsetWithErr
LEAF_NODE	236:22	236:22	18	TIFFGetStrileOffsetWithErr
LEAF_NODE	236:48	236:48	17	(
ARGUMENT	236:49	236:49	17	tif
FIELD	236:49	236:49	18	tif
LEAF_NODE	236:49	236:49	19	tif
LEAF_NODE	236:52	236:52	17	,
ARGUMENT	236:54	236:54	17	2
FIELD	236:54	236:54	18	2
LEAF_NODE	236:54	236:54	19	2
LEAF_NODE	236:55	236:55	17	,
ARGUMENT	236:57	236:57	17	& err
UNARY_EXPR	236:57	236:58	18	& err
UNARY_OPERATOR	236:57	236:57	19	&
LEAF_NODE	236:57	236:57	20	&
FIELD	236:58	236:58	19	err
LEAF_NODE	236:58	236:58	20	err
LEAF_NODE	236:61	236:61	17	)
LEAF_NODE	236:62	236:62	13	;
EXPR_STATEMENT	237:16	237:32	12	assert ( ret == 0 ) ;
EXPR	237:16	237:16	13	assert ( ret == 0 )
FUNCTION_CALL	237:16	237:31	14	assert ( ret == 0 )
CALLEE	237:16	237:16	15	assert
LEAF_NODE	237:16	237:16	16	assert
LEAF_NODE	237:22	237:22	15	(
ARGUMENT	237:23	237:30	15	ret == 0
FIELD	237:23	237:23	16	ret
LEAF_NODE	237:23	237:23	17	ret
EQ_OPERATOR	237:27	237:27	16	==
LEAF_NODE	237:27	237:27	17	==
FIELD	237:30	237:30	16	0
LEAF_NODE	237:30	237:30	17	0
LEAF_NODE	237:31	237:31	15	)
LEAF_NODE	237:32	237:32	13	;
EXPR_STATEMENT	238:16	238:32	12	assert ( err == 0 ) ;
EXPR	238:16	238:16	13	assert ( err == 0 )
FUNCTION_CALL	238:16	238:31	14	assert ( err == 0 )
CALLEE	238:16	238:16	15	assert
LEAF_NODE	238:16	238:16	16	assert
LEAF_NODE	238:22	238:22	15	(
ARGUMENT	238:23	238:30	15	err == 0
FIELD	238:23	238:23	16	err
LEAF_NODE	238:23	238:23	17	err
EQ_OPERATOR	238:27	238:27	16	==
LEAF_NODE	238:27	238:27	17	==
FIELD	238:30	238:30	16	0
LEAF_NODE	238:30	238:30	17	0
LEAF_NODE	238:31	238:31	15	)
LEAF_NODE	238:32	238:32	13	;
EXPR_STATEMENT	240:16	240:65	12	ret = TIFFGetStrileByteCountWithErr ( tif , 2 , & err ) ;
EXPR	240:16	240:16	13	ret = TIFFGetStrileByteCountWithErr ( tif , 2 , & err )
ASSIGN	240:16	240:22	14	ret = TIFFGetStrileByteCountWithErr ( tif , 2 , & err )
LVAL	240:16	240:16	15	ret
FIELD	240:16	240:16	16	ret
LEAF_NODE	240:16	240:16	17	ret
ASSIGN_OP	240:20	240:20	15	=
LEAF_NODE	240:20	240:20	16	=
RVAL	240:22	240:22	15	TIFFGetStrileByteCountWithErr ( tif , 2 , & err )
FUNCTION_CALL	240:22	240:64	16	TIFFGetStrileByteCountWithErr ( tif , 2 , & err )
CALLEE	240:22	240:22	17	TIFFGetStrileByteCountWithErr
LEAF_NODE	240:22	240:22	18	TIFFGetStrileByteCountWithErr
LEAF_NODE	240:51	240:51	17	(
ARGUMENT	240:52	240:52	17	tif
FIELD	240:52	240:52	18	tif
LEAF_NODE	240:52	240:52	19	tif
LEAF_NODE	240:55	240:55	17	,
ARGUMENT	240:57	240:57	17	2
FIELD	240:57	240:57	18	2
LEAF_NODE	240:57	240:57	19	2
LEAF_NODE	240:58	240:58	17	,
ARGUMENT	240:60	240:60	17	& err
UNARY_EXPR	240:60	240:61	18	& err
UNARY_OPERATOR	240:60	240:60	19	&
LEAF_NODE	240:60	240:60	20	&
FIELD	240:61	240:61	19	err
LEAF_NODE	240:61	240:61	20	err
LEAF_NODE	240:64	240:64	17	)
LEAF_NODE	240:65	240:65	13	;
EXPR_STATEMENT	241:16	241:32	12	assert ( ret == 0 ) ;
EXPR	241:16	241:16	13	assert ( ret == 0 )
FUNCTION_CALL	241:16	241:31	14	assert ( ret == 0 )
CALLEE	241:16	241:16	15	assert
LEAF_NODE	241:16	241:16	16	assert
LEAF_NODE	241:22	241:22	15	(
ARGUMENT	241:23	241:30	15	ret == 0
FIELD	241:23	241:23	16	ret
LEAF_NODE	241:23	241:23	17	ret
EQ_OPERATOR	241:27	241:27	16	==
LEAF_NODE	241:27	241:27	17	==
FIELD	241:30	241:30	16	0
LEAF_NODE	241:30	241:30	17	0
LEAF_NODE	241:31	241:31	15	)
LEAF_NODE	241:32	241:32	13	;
EXPR_STATEMENT	242:16	242:32	12	assert ( err == 0 ) ;
EXPR	242:16	242:16	13	assert ( err == 0 )
FUNCTION_CALL	242:16	242:31	14	assert ( err == 0 )
CALLEE	242:16	242:16	15	assert
LEAF_NODE	242:16	242:16	16	assert
LEAF_NODE	242:22	242:22	15	(
ARGUMENT	242:23	242:30	15	err == 0
FIELD	242:23	242:23	16	err
LEAF_NODE	242:23	242:23	17	err
EQ_OPERATOR	242:27	242:27	16	==
LEAF_NODE	242:27	242:27	17	==
FIELD	242:30	242:30	16	0
LEAF_NODE	242:30	242:30	17	0
LEAF_NODE	242:31	242:31	15	)
LEAF_NODE	242:32	242:32	13	;
LEAF_NODE	244:12	244:12	11	}
LEAF_NODE	245:8	245:8	8	}
LEAF_NODE	247:8	247:8	6	{
STATEMENTS	248:12	255:12	6	
SIMPLE_DECL	248:12	248:23	7	int err ; err = 0 ;
VAR_DECL	248:12	248:16	8	int err ; err = 0
TYPE	248:12	248:12	9	int
TYPE_NAME	248:12	248:12	10	int
LEAF_NODE	248:12	248:12	11	int
NAME	248:16	248:16	9	err
LEAF_NODE	248:16	248:16	10	err
LEAF_NODE	0:0	0:0	9	;
INIT	248:16	248:16	9	err = 0
ASSIGN	248:16	248:22	10	err = 0
LVAL	248:16	248:16	11	err
NAME	248:16	248:16	12	err
LEAF_NODE	248:16	248:16	13	err
ASSIGN_OP	248:20	248:20	11	=
LEAF_NODE	248:20	248:20	12	=
RVAL	248:22	248:22	11	0
FIELD	248:22	248:22	12	0
LEAF_NODE	248:22	248:22	13	0
LEAF_NODE	248:23	248:23	8	;
EXPR_STATEMENT	249:12	249:68	7	ret = TIFFGetStrileOffsetWithErr ( tif , 0xFFFFFFFFU , & err ) ;
EXPR	249:12	249:12	8	ret = TIFFGetStrileOffsetWithErr ( tif , 0xFFFFFFFFU , & err )
ASSIGN	249:12	249:18	9	ret = TIFFGetStrileOffsetWithErr ( tif , 0xFFFFFFFFU , & err )
LVAL	249:12	249:12	10	ret
FIELD	249:12	249:12	11	ret
LEAF_NODE	249:12	249:12	12	ret
ASSIGN_OP	249:16	249:16	10	=
LEAF_NODE	249:16	249:16	11	=
RVAL	249:18	249:18	10	TIFFGetStrileOffsetWithErr ( tif , 0xFFFFFFFFU , & err )
FUNCTION_CALL	249:18	249:67	11	TIFFGetStrileOffsetWithErr ( tif , 0xFFFFFFFFU , & err )
CALLEE	249:18	249:18	12	TIFFGetStrileOffsetWithErr
LEAF_NODE	249:18	249:18	13	TIFFGetStrileOffsetWithErr
LEAF_NODE	249:44	249:44	12	(
ARGUMENT	249:45	249:45	12	tif
FIELD	249:45	249:45	13	tif
LEAF_NODE	249:45	249:45	14	tif
LEAF_NODE	249:48	249:48	12	,
ARGUMENT	249:50	249:50	12	0xFFFFFFFFU
FIELD	249:50	249:50	13	0xFFFFFFFFU
LEAF_NODE	249:50	249:50	14	0xFFFFFFFFU
LEAF_NODE	249:61	249:61	12	,
ARGUMENT	249:63	249:63	12	& err
UNARY_EXPR	249:63	249:64	13	& err
UNARY_OPERATOR	249:63	249:63	14	&
LEAF_NODE	249:63	249:63	15	&
FIELD	249:64	249:64	14	err
LEAF_NODE	249:64	249:64	15	err
LEAF_NODE	249:67	249:67	12	)
LEAF_NODE	249:68	249:68	8	;
EXPR_STATEMENT	250:12	250:28	7	assert ( ret == 0 ) ;
EXPR	250:12	250:12	8	assert ( ret == 0 )
FUNCTION_CALL	250:12	250:27	9	assert ( ret == 0 )
CALLEE	250:12	250:12	10	assert
LEAF_NODE	250:12	250:12	11	assert
LEAF_NODE	250:18	250:18	10	(
ARGUMENT	250:19	250:26	10	ret == 0
FIELD	250:19	250:19	11	ret
LEAF_NODE	250:19	250:19	12	ret
EQ_OPERATOR	250:23	250:23	11	==
LEAF_NODE	250:23	250:23	12	==
FIELD	250:26	250:26	11	0
LEAF_NODE	250:26	250:26	12	0
LEAF_NODE	250:27	250:27	10	)
LEAF_NODE	250:28	250:28	8	;
EXPR_STATEMENT	251:12	251:28	7	assert ( err == 1 ) ;
EXPR	251:12	251:12	8	assert ( err == 1 )
FUNCTION_CALL	251:12	251:27	9	assert ( err == 1 )
CALLEE	251:12	251:12	10	assert
LEAF_NODE	251:12	251:12	11	assert
LEAF_NODE	251:18	251:18	10	(
ARGUMENT	251:19	251:26	10	err == 1
FIELD	251:19	251:19	11	err
LEAF_NODE	251:19	251:19	12	err
EQ_OPERATOR	251:23	251:23	11	==
LEAF_NODE	251:23	251:23	12	==
FIELD	251:26	251:26	11	1
LEAF_NODE	251:26	251:26	12	1
LEAF_NODE	251:27	251:27	10	)
LEAF_NODE	251:28	251:28	8	;
EXPR_STATEMENT	253:12	253:71	7	ret = TIFFGetStrileByteCountWithErr ( tif , 0xFFFFFFFFU , & err ) ;
EXPR	253:12	253:12	8	ret = TIFFGetStrileByteCountWithErr ( tif , 0xFFFFFFFFU , & err )
ASSIGN	253:12	253:18	9	ret = TIFFGetStrileByteCountWithErr ( tif , 0xFFFFFFFFU , & err )
LVAL	253:12	253:12	10	ret
FIELD	253:12	253:12	11	ret
LEAF_NODE	253:12	253:12	12	ret
ASSIGN_OP	253:16	253:16	10	=
LEAF_NODE	253:16	253:16	11	=
RVAL	253:18	253:18	10	TIFFGetStrileByteCountWithErr ( tif , 0xFFFFFFFFU , & err )
FUNCTION_CALL	253:18	253:70	11	TIFFGetStrileByteCountWithErr ( tif , 0xFFFFFFFFU , & err )
CALLEE	253:18	253:18	12	TIFFGetStrileByteCountWithErr
LEAF_NODE	253:18	253:18	13	TIFFGetStrileByteCountWithErr
LEAF_NODE	253:47	253:47	12	(
ARGUMENT	253:48	253:48	12	tif
FIELD	253:48	253:48	13	tif
LEAF_NODE	253:48	253:48	14	tif
LEAF_NODE	253:51	253:51	12	,
ARGUMENT	253:53	253:53	12	0xFFFFFFFFU
FIELD	253:53	253:53	13	0xFFFFFFFFU
LEAF_NODE	253:53	253:53	14	0xFFFFFFFFU
LEAF_NODE	253:64	253:64	12	,
ARGUMENT	253:66	253:66	12	& err
UNARY_EXPR	253:66	253:67	13	& err
UNARY_OPERATOR	253:66	253:66	14	&
LEAF_NODE	253:66	253:66	15	&
FIELD	253:67	253:67	14	err
LEAF_NODE	253:67	253:67	15	err
LEAF_NODE	253:70	253:70	12	)
LEAF_NODE	253:71	253:71	8	;
EXPR_STATEMENT	254:12	254:28	7	assert ( ret == 0 ) ;
EXPR	254:12	254:12	8	assert ( ret == 0 )
FUNCTION_CALL	254:12	254:27	9	assert ( ret == 0 )
CALLEE	254:12	254:12	10	assert
LEAF_NODE	254:12	254:12	11	assert
LEAF_NODE	254:18	254:18	10	(
ARGUMENT	254:19	254:26	10	ret == 0
FIELD	254:19	254:19	11	ret
LEAF_NODE	254:19	254:19	12	ret
EQ_OPERATOR	254:23	254:23	11	==
LEAF_NODE	254:23	254:23	12	==
FIELD	254:26	254:26	11	0
LEAF_NODE	254:26	254:26	12	0
LEAF_NODE	254:27	254:27	10	)
LEAF_NODE	254:28	254:28	8	;
EXPR_STATEMENT	255:12	255:28	7	assert ( err == 1 ) ;
EXPR	255:12	255:12	8	assert ( err == 1 )
FUNCTION_CALL	255:12	255:27	9	assert ( err == 1 )
CALLEE	255:12	255:12	10	assert
LEAF_NODE	255:12	255:12	11	assert
LEAF_NODE	255:18	255:18	10	(
ARGUMENT	255:19	255:26	10	err == 1
FIELD	255:19	255:19	11	err
LEAF_NODE	255:19	255:19	12	err
EQ_OPERATOR	255:23	255:23	11	==
LEAF_NODE	255:23	255:23	12	==
FIELD	255:26	255:26	11	1
LEAF_NODE	255:26	255:26	12	1
LEAF_NODE	255:27	255:27	10	)
LEAF_NODE	255:28	255:28	8	;
LEAF_NODE	256:8	256:8	6	}
LEAF_NODE	258:8	258:8	6	{
STATEMENTS	259:12	273:12	6	
SIMPLE_DECL	259:12	259:34	7	toff_t * offsets ; offsets = NULL ;
VAR_DECL	259:12	259:20	8	toff_t * offsets ; offsets = NULL
TYPE	259:12	259:18	9	toff_t *
TYPE_NAME	259:12	259:12	10	toff_t
LEAF_NODE	259:12	259:12	11	toff_t
POINTER	259:18	259:18	10	*
LEAF_NODE	259:18	259:18	11	*
NAME	259:20	259:20	9	offsets
LEAF_NODE	259:20	259:20	10	offsets
LEAF_NODE	0:0	0:0	9	;
INIT	259:20	259:20	9	offsets = NULL
ASSIGN	259:20	259:30	10	offsets = NULL
LVAL	259:20	259:20	11	offsets
NAME	259:20	259:20	12	offsets
LEAF_NODE	259:20	259:20	13	offsets
ASSIGN_OP	259:28	259:28	11	=
LEAF_NODE	259:28	259:28	12	=
RVAL	259:30	259:30	11	NULL
FIELD	259:30	259:30	12	NULL
LEAF_NODE	259:30	259:30	13	NULL
LEAF_NODE	259:34	259:34	8	;
SIMPLE_DECL	260:12	260:37	7	toff_t * bytecounts ; bytecounts = NULL ;
VAR_DECL	260:12	260:20	8	toff_t * bytecounts ; bytecounts = NULL
TYPE	260:12	260:18	9	toff_t *
TYPE_NAME	260:12	260:12	10	toff_t
LEAF_NODE	260:12	260:12	11	toff_t
POINTER	260:18	260:18	10	*
LEAF_NODE	260:18	260:18	11	*
NAME	260:20	260:20	9	bytecounts
LEAF_NODE	260:20	260:20	10	bytecounts
LEAF_NODE	0:0	0:0	9	;
INIT	260:20	260:20	9	bytecounts = NULL
ASSIGN	260:20	260:33	10	bytecounts = NULL
LVAL	260:20	260:20	11	bytecounts
NAME	260:20	260:20	12	bytecounts
LEAF_NODE	260:20	260:20	13	bytecounts
ASSIGN_OP	260:31	260:31	11	=
LEAF_NODE	260:31	260:31	12	=
RVAL	260:33	260:33	11	NULL
FIELD	260:33	260:33	12	NULL
LEAF_NODE	260:33	260:33	13	NULL
LEAF_NODE	260:37	260:37	8	;
EXPR_STATEMENT	261:12	262:78	7	ret = TIFFGetField ( tif , tiled ? TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS , & offsets ) ;
EXPR	261:12	261:12	8	ret = TIFFGetField ( tif , tiled ? TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS , & offsets )
ASSIGN	261:12	261:18	9	ret = TIFFGetField ( tif , tiled ? TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS , & offsets )
LVAL	261:12	261:12	10	ret
FIELD	261:12	261:12	11	ret
LEAF_NODE	261:12	261:12	12	ret
ASSIGN_OP	261:16	261:16	10	=
LEAF_NODE	261:16	261:16	11	=
RVAL	261:18	261:18	10	TIFFGetField ( tif , tiled ? TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS , & offsets )
FUNCTION_CALL	261:18	262:77	11	TIFFGetField ( tif , tiled ? TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS , & offsets )
CALLEE	261:18	261:18	12	TIFFGetField
LEAF_NODE	261:18	261:18	13	TIFFGetField
LEAF_NODE	261:30	261:30	12	(
ARGUMENT	261:32	261:32	12	tif
FIELD	261:32	261:32	13	tif
LEAF_NODE	261:32	261:32	14	tif
LEAF_NODE	261:35	261:35	12	,
ARGUMENT	262:16	262:16	12	tiled ? TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS
COND_EXPR	262:16	262:46	13	tiled ? TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS
CONDITION	262:16	262:16	14	tiled
FIELD	262:16	262:16	15	tiled
LEAF_NODE	262:16	262:16	16	tiled
LEAF_NODE	262:22	262:22	14	?
EXPR	262:24	262:24	14	TIFFTAG_TILEOFFSETS
FIELD	262:24	262:24	15	TIFFTAG_TILEOFFSETS
LEAF_NODE	262:24	262:24	16	TIFFTAG_TILEOFFSETS
LEAF_NODE	262:44	262:44	14	:
FIELD	262:46	262:46	14	TIFFTAG_STRIPOFFSETS
LEAF_NODE	262:46	262:46	15	TIFFTAG_STRIPOFFSETS
LEAF_NODE	262:66	262:66	12	,
ARGUMENT	262:68	262:68	12	& offsets
UNARY_EXPR	262:68	262:69	13	& offsets
UNARY_OPERATOR	262:68	262:68	14	&
LEAF_NODE	262:68	262:68	15	&
FIELD	262:69	262:69	14	offsets
LEAF_NODE	262:69	262:69	15	offsets
LEAF_NODE	262:77	262:77	12	)
LEAF_NODE	262:78	262:78	8	;
EXPR_STATEMENT	263:12	263:23	7	assert ( ret ) ;
EXPR	263:12	263:12	8	assert ( ret )
FUNCTION_CALL	263:12	263:22	9	assert ( ret )
CALLEE	263:12	263:12	10	assert
LEAF_NODE	263:12	263:12	11	assert
LEAF_NODE	263:18	263:18	10	(
ARGUMENT	263:19	263:19	10	ret
FIELD	263:19	263:19	11	ret
LEAF_NODE	263:19	263:19	12	ret
LEAF_NODE	263:22	263:22	10	)
LEAF_NODE	263:23	263:23	8	;
EXPR_STATEMENT	264:12	264:27	7	assert ( offsets ) ;
EXPR	264:12	264:12	8	assert ( offsets )
FUNCTION_CALL	264:12	264:26	9	assert ( offsets )
CALLEE	264:12	264:12	10	assert
LEAF_NODE	264:12	264:12	11	assert
LEAF_NODE	264:18	264:18	10	(
ARGUMENT	264:19	264:19	10	offsets
FIELD	264:19	264:19	11	offsets
LEAF_NODE	264:19	264:19	12	offsets
LEAF_NODE	264:26	264:26	10	)
LEAF_NODE	264:27	264:27	8	;
EXPR_STATEMENT	265:12	266:87	7	ret = TIFFGetField ( tif , tiled ? TIFFTAG_TILEBYTECOUNTS : TIFFTAG_STRIPBYTECOUNTS , & bytecounts ) ;
EXPR	265:12	265:12	8	ret = TIFFGetField ( tif , tiled ? TIFFTAG_TILEBYTECOUNTS : TIFFTAG_STRIPBYTECOUNTS , & bytecounts )
ASSIGN	265:12	265:18	9	ret = TIFFGetField ( tif , tiled ? TIFFTAG_TILEBYTECOUNTS : TIFFTAG_STRIPBYTECOUNTS , & bytecounts )
LVAL	265:12	265:12	10	ret
FIELD	265:12	265:12	11	ret
LEAF_NODE	265:12	265:12	12	ret
ASSIGN_OP	265:16	265:16	10	=
LEAF_NODE	265:16	265:16	11	=
RVAL	265:18	265:18	10	TIFFGetField ( tif , tiled ? TIFFTAG_TILEBYTECOUNTS : TIFFTAG_STRIPBYTECOUNTS , & bytecounts )
FUNCTION_CALL	265:18	266:86	11	TIFFGetField ( tif , tiled ? TIFFTAG_TILEBYTECOUNTS : TIFFTAG_STRIPBYTECOUNTS , & bytecounts )
CALLEE	265:18	265:18	12	TIFFGetField
LEAF_NODE	265:18	265:18	13	TIFFGetField
LEAF_NODE	265:30	265:30	12	(
ARGUMENT	265:32	265:32	12	tif
FIELD	265:32	265:32	13	tif
LEAF_NODE	265:32	265:32	14	tif
LEAF_NODE	265:35	265:35	12	,
ARGUMENT	266:16	266:16	12	tiled ? TIFFTAG_TILEBYTECOUNTS : TIFFTAG_STRIPBYTECOUNTS
COND_EXPR	266:16	266:49	13	tiled ? TIFFTAG_TILEBYTECOUNTS : TIFFTAG_STRIPBYTECOUNTS
CONDITION	266:16	266:16	14	tiled
FIELD	266:16	266:16	15	tiled
LEAF_NODE	266:16	266:16	16	tiled
LEAF_NODE	266:22	266:22	14	?
EXPR	266:24	266:24	14	TIFFTAG_TILEBYTECOUNTS
FIELD	266:24	266:24	15	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	266:24	266:24	16	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	266:47	266:47	14	:
FIELD	266:49	266:49	14	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	266:49	266:49	15	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	266:72	266:72	12	,
ARGUMENT	266:74	266:74	12	& bytecounts
UNARY_EXPR	266:74	266:75	13	& bytecounts
UNARY_OPERATOR	266:74	266:74	14	&
LEAF_NODE	266:74	266:74	15	&
FIELD	266:75	266:75	14	bytecounts
LEAF_NODE	266:75	266:75	15	bytecounts
LEAF_NODE	266:86	266:86	12	)
LEAF_NODE	266:87	266:87	8	;
EXPR_STATEMENT	267:12	267:23	7	assert ( ret ) ;
EXPR	267:12	267:12	8	assert ( ret )
FUNCTION_CALL	267:12	267:22	9	assert ( ret )
CALLEE	267:12	267:12	10	assert
LEAF_NODE	267:12	267:12	11	assert
LEAF_NODE	267:18	267:18	10	(
ARGUMENT	267:19	267:19	10	ret
FIELD	267:19	267:19	11	ret
LEAF_NODE	267:19	267:19	12	ret
LEAF_NODE	267:22	267:22	10	)
LEAF_NODE	267:23	267:23	8	;
EXPR_STATEMENT	268:12	268:30	7	assert ( bytecounts ) ;
EXPR	268:12	268:12	8	assert ( bytecounts )
FUNCTION_CALL	268:12	268:29	9	assert ( bytecounts )
CALLEE	268:12	268:12	10	assert
LEAF_NODE	268:12	268:12	11	assert
LEAF_NODE	268:18	268:18	10	(
ARGUMENT	268:19	268:19	10	bytecounts
FIELD	268:19	268:19	11	bytecounts
LEAF_NODE	268:19	268:19	12	bytecounts
LEAF_NODE	268:29	268:29	10	)
LEAF_NODE	268:30	268:30	8	;
SELECTION	269:12	270:12	7	
KEYWORD	269:12	269:12	8	if
LEAF_NODE	269:12	269:12	9	if
LEAF_NODE	269:14	269:14	8	(
CONDITION	269:16	269:16	8	tiled
EXPR	269:16	269:16	9	tiled
FIELD	269:16	269:16	10	tiled
LEAF_NODE	269:16	269:16	11	tiled
LEAF_NODE	269:22	269:22	8	)
STATEMENTS	270:12	272:12	8	
LEAF_NODE	270:12	270:12	9	{
STATEMENTS	271:16	271:16	9	
EXPR_STATEMENT	271:16	271:44	10	assert ( bytecounts [ 0 ] == 256 ) ;
EXPR	271:16	271:16	11	assert ( bytecounts [ 0 ] == 256 )
FUNCTION_CALL	271:16	271:43	12	assert ( bytecounts [ 0 ] == 256 )
CALLEE	271:16	271:16	13	assert
LEAF_NODE	271:16	271:16	14	assert
LEAF_NODE	271:22	271:22	13	(
ARGUMENT	271:23	271:40	13	bytecounts [ 0 ] == 256
FIELD	271:23	271:35	14	bytecounts [ 0 ]
LEAF_NODE	271:23	271:23	15	bytecounts
LEAF_NODE	271:33	271:33	15	[
EXPR	271:34	271:34	15	0
FIELD	271:34	271:34	16	0
LEAF_NODE	271:34	271:34	17	0
LEAF_NODE	271:35	271:35	15	]
EQ_OPERATOR	271:37	271:37	14	==
LEAF_NODE	271:37	271:37	15	==
FIELD	271:40	271:40	14	256
LEAF_NODE	271:40	271:40	15	256
LEAF_NODE	271:43	271:43	13	)
LEAF_NODE	271:44	271:44	11	;
LEAF_NODE	272:12	272:12	9	}
SELECTION	273:12	274:12	7	
KEYWORD	273:12	273:12	8	else
LEAF_NODE	273:12	273:12	9	else
STATEMENTS	274:12	282:12	8	
LEAF_NODE	274:12	274:12	9	{
STATEMENTS	275:16	281:16	9	
EXPR_STATEMENT	275:16	275:42	10	assert ( bytecounts [ 0 ] == 1 ) ;
EXPR	275:16	275:16	11	assert ( bytecounts [ 0 ] == 1 )
FUNCTION_CALL	275:16	275:41	12	assert ( bytecounts [ 0 ] == 1 )
CALLEE	275:16	275:16	13	assert
LEAF_NODE	275:16	275:16	14	assert
LEAF_NODE	275:22	275:22	13	(
ARGUMENT	275:23	275:40	13	bytecounts [ 0 ] == 1
FIELD	275:23	275:35	14	bytecounts [ 0 ]
LEAF_NODE	275:23	275:23	15	bytecounts
LEAF_NODE	275:33	275:33	15	[
EXPR	275:34	275:34	15	0
FIELD	275:34	275:34	16	0
LEAF_NODE	275:34	275:34	17	0
LEAF_NODE	275:35	275:35	15	]
EQ_OPERATOR	275:37	275:37	14	==
LEAF_NODE	275:37	275:37	15	==
FIELD	275:40	275:40	14	1
LEAF_NODE	275:40	275:40	15	1
LEAF_NODE	275:41	275:41	13	)
LEAF_NODE	275:42	275:42	11	;
SELECTION	276:16	277:16	10	
KEYWORD	276:16	276:16	11	if
LEAF_NODE	276:16	276:16	12	if
LEAF_NODE	276:18	276:18	11	(
CONDITION	276:20	276:20	11	height > 1 && height <= 100000
EXPR	276:20	276:20	12	height > 1 && height <= 100000
AND	276:20	276:34	13	height > 1 && height <= 100000
EXPR	276:20	276:29	14	height > 1
FIELD	276:20	276:20	15	height
LEAF_NODE	276:20	276:20	16	height
REL_OPERATOR	276:27	276:27	15	>
LEAF_NODE	276:27	276:27	16	>
FIELD	276:29	276:29	15	1
LEAF_NODE	276:29	276:29	16	1
LEAF_NODE	276:31	276:31	14	&&
EXPR	276:34	276:44	14	height <= 100000
FIELD	276:34	276:34	15	height
LEAF_NODE	276:34	276:34	16	height
REL_OPERATOR	276:41	276:41	15	<=
LEAF_NODE	276:41	276:41	16	<=
FIELD	276:44	276:44	15	100000
LEAF_NODE	276:44	276:44	16	100000
LEAF_NODE	276:50	276:50	11	)
STATEMENTS	277:16	280:16	11	
LEAF_NODE	277:16	277:16	12	{
STATEMENTS	278:20	279:20	12	
EXPR_STATEMENT	278:20	278:56	13	assert ( offsets [ 1 ] == offsets [ 0 ] + 1 ) ;
EXPR	278:20	278:20	14	assert ( offsets [ 1 ] == offsets [ 0 ] + 1 )
FUNCTION_CALL	278:20	278:55	15	assert ( offsets [ 1 ] == offsets [ 0 ] + 1 )
CALLEE	278:20	278:20	16	assert
LEAF_NODE	278:20	278:20	17	assert
LEAF_NODE	278:26	278:26	16	(
ARGUMENT	278:27	278:54	16	offsets [ 1 ] == offsets [ 0 ] + 1
FIELD	278:27	278:36	17	offsets [ 1 ]
LEAF_NODE	278:27	278:27	18	offsets
LEAF_NODE	278:34	278:34	18	[
EXPR	278:35	278:35	18	1
FIELD	278:35	278:35	19	1
LEAF_NODE	278:35	278:35	20	1
LEAF_NODE	278:36	278:36	18	]
EQ_OPERATOR	278:38	278:38	17	==
LEAF_NODE	278:38	278:38	18	==
FIELD	278:41	278:50	17	offsets [ 0 ]
LEAF_NODE	278:41	278:41	18	offsets
LEAF_NODE	278:48	278:48	18	[
EXPR	278:49	278:49	18	0
FIELD	278:49	278:49	19	0
LEAF_NODE	278:49	278:49	20	0
LEAF_NODE	278:50	278:50	18	]
LEAF_NODE	278:52	278:52	17	+
FIELD	278:54	278:54	17	1
LEAF_NODE	278:54	278:54	18	1
LEAF_NODE	278:55	278:55	16	)
LEAF_NODE	278:56	278:56	14	;
EXPR_STATEMENT	279:20	279:74	13	assert ( offsets [ height - 1 ] == offsets [ 0 ] + height - 1 ) ;
EXPR	279:20	279:20	14	assert ( offsets [ height - 1 ] == offsets [ 0 ] + height - 1 )
FUNCTION_CALL	279:20	279:73	15	assert ( offsets [ height - 1 ] == offsets [ 0 ] + height - 1 )
CALLEE	279:20	279:20	16	assert
LEAF_NODE	279:20	279:20	17	assert
LEAF_NODE	279:26	279:26	16	(
ARGUMENT	279:27	279:72	16	offsets [ height - 1 ] == offsets [ 0 ] + height - 1
FIELD	279:27	279:45	17	offsets [ height - 1 ]
LEAF_NODE	279:27	279:27	18	offsets
LEAF_NODE	279:34	279:34	18	[
EXPR	279:35	279:44	18	height - 1
FIELD	279:35	279:35	19	height
LEAF_NODE	279:35	279:35	20	height
LEAF_NODE	279:42	279:42	19	-
FIELD	279:44	279:44	19	1
LEAF_NODE	279:44	279:44	20	1
LEAF_NODE	279:45	279:45	18	]
EQ_OPERATOR	279:47	279:47	17	==
LEAF_NODE	279:47	279:47	18	==
FIELD	279:50	279:59	17	offsets [ 0 ]
LEAF_NODE	279:50	279:50	18	offsets
LEAF_NODE	279:57	279:57	18	[
EXPR	279:58	279:58	18	0
FIELD	279:58	279:58	19	0
LEAF_NODE	279:58	279:58	20	0
LEAF_NODE	279:59	279:59	18	]
LEAF_NODE	279:61	279:61	17	+
FIELD	279:63	279:63	17	height
LEAF_NODE	279:63	279:63	18	height
LEAF_NODE	279:70	279:70	17	-
FIELD	279:72	279:72	17	1
LEAF_NODE	279:72	279:72	18	1
LEAF_NODE	279:73	279:73	16	)
LEAF_NODE	279:74	279:74	14	;
LEAF_NODE	280:16	280:16	12	}
EXPR_STATEMENT	281:16	281:51	10	assert ( bytecounts [ height - 1 ] == 1 ) ;
EXPR	281:16	281:16	11	assert ( bytecounts [ height - 1 ] == 1 )
FUNCTION_CALL	281:16	281:50	12	assert ( bytecounts [ height - 1 ] == 1 )
CALLEE	281:16	281:16	13	assert
LEAF_NODE	281:16	281:16	14	assert
LEAF_NODE	281:22	281:22	13	(
ARGUMENT	281:23	281:49	13	bytecounts [ height - 1 ] == 1
FIELD	281:23	281:44	14	bytecounts [ height - 1 ]
LEAF_NODE	281:23	281:23	15	bytecounts
LEAF_NODE	281:33	281:33	15	[
EXPR	281:34	281:43	15	height - 1
FIELD	281:34	281:34	16	height
LEAF_NODE	281:34	281:34	17	height
LEAF_NODE	281:41	281:41	16	-
FIELD	281:43	281:43	16	1
LEAF_NODE	281:43	281:43	17	1
LEAF_NODE	281:44	281:44	15	]
EQ_OPERATOR	281:46	281:46	14	==
LEAF_NODE	281:46	281:46	15	==
FIELD	281:49	281:49	14	1
LEAF_NODE	281:49	281:49	15	1
LEAF_NODE	281:50	281:50	13	)
LEAF_NODE	281:51	281:51	11	;
LEAF_NODE	282:12	282:12	9	}
LEAF_NODE	283:8	283:8	6	}
EXPR_STATEMENT	285:8	285:22	6	TIFFClose ( tif ) ;
EXPR	285:8	285:8	7	TIFFClose ( tif )
FUNCTION_CALL	285:8	285:21	8	TIFFClose ( tif )
CALLEE	285:8	285:8	9	TIFFClose
LEAF_NODE	285:8	285:8	10	TIFFClose
LEAF_NODE	285:17	285:17	9	(
ARGUMENT	285:18	285:18	9	tif
FIELD	285:18	285:18	10	tif
LEAF_NODE	285:18	285:18	11	tif
LEAF_NODE	285:21	285:21	9	)
LEAF_NODE	285:22	285:22	7	;
LEAF_NODE	286:4	286:4	5	}
EXPR_STATEMENT	287:4	287:13	3	fclose ( f ) ;
EXPR	287:4	287:4	4	fclose ( f )
FUNCTION_CALL	287:4	287:12	5	fclose ( f )
CALLEE	287:4	287:4	6	fclose
LEAF_NODE	287:4	287:4	7	fclose
LEAF_NODE	287:10	287:10	6	(
ARGUMENT	287:11	287:11	6	f
FIELD	287:11	287:11	7	f
LEAF_NODE	287:11	287:11	8	f
LEAF_NODE	287:12	287:12	6	)
LEAF_NODE	287:13	287:13	4	;
EXPR_STATEMENT	289:4	289:20	3	unlink ( filename ) ;
EXPR	289:4	289:4	4	unlink ( filename )
FUNCTION_CALL	289:4	289:19	5	unlink ( filename )
CALLEE	289:4	289:4	6	unlink
LEAF_NODE	289:4	289:4	7	unlink
LEAF_NODE	289:10	289:10	6	(
ARGUMENT	289:11	289:11	6	filename
FIELD	289:11	289:11	7	filename
LEAF_NODE	289:11	289:11	8	filename
LEAF_NODE	289:19	289:19	6	)
LEAF_NODE	289:20	289:20	4	;
JUMP_STATEMENT	290:4	290:12	3	return 0 ;
KEYWORD	290:4	290:4	4	return
LEAF_NODE	290:4	290:4	5	return
DESTINATION	290:11	290:11	4	0
EXPR	290:11	290:11	5	0
FIELD	290:11	290:11	6	0
LEAF_NODE	290:11	290:11	7	0
LEAF_NODE	290:12	290:12	4	;
LEAF_NODE	291:0	291:0	2	}
FUNCTION_DEF	293:0	311:0	1	
RETURN_TYPE	293:0	293:0	2	int
TYPE_NAME	293:0	293:0	3	int
LEAF_NODE	293:0	293:0	4	int
FUNCTION_NAME	294:0	294:0	2	main
LEAF_NODE	294:0	294:0	3	main
PARAMETER_LIST	294:4	294:5	2	( )
LEAF_NODE	294:4	294:4	3	(
LEAF_NODE	294:5	294:5	3	)
LEAF_NODE	295:0	295:0	2	{
STATEMENTS	296:4	310:4	2	
SIMPLE_DECL	296:4	296:18	3	int is_classic ;
VAR_DECL	296:4	296:8	4	int is_classic
TYPE	296:4	296:4	5	int
TYPE_NAME	296:4	296:4	6	int
LEAF_NODE	296:4	296:4	7	int
NAME	296:8	296:8	5	is_classic
LEAF_NODE	296:8	296:8	6	is_classic
LEAF_NODE	296:18	296:18	4	;
ITERATION	297:4	298:4	3	
KEYWORD	297:4	297:4	4	for
LEAF_NODE	297:4	297:4	5	for
LEAF_NODE	297:7	297:7	4	(
FOR_INIT	297:9	297:23	4	is_classic = 1 ;
EXPR	297:9	297:9	5	is_classic = 1
ASSIGN	297:9	297:22	6	is_classic = 1
LVAL	297:9	297:9	7	is_classic
FIELD	297:9	297:9	8	is_classic
LEAF_NODE	297:9	297:9	9	is_classic
ASSIGN_OP	297:20	297:20	7	=
LEAF_NODE	297:20	297:20	8	=
RVAL	297:22	297:22	7	1
FIELD	297:22	297:22	8	1
LEAF_NODE	297:22	297:22	9	1
LEAF_NODE	297:23	297:23	5	;
CONDITION	297:25	297:25	4	is_classic >= 0
EXPR	297:25	297:39	5	is_classic >= 0
FIELD	297:25	297:25	6	is_classic
LEAF_NODE	297:25	297:25	7	is_classic
REL_OPERATOR	297:36	297:36	6	>=
LEAF_NODE	297:36	297:36	7	>=
FIELD	297:39	297:39	6	0
LEAF_NODE	297:39	297:39	7	0
LEAF_NODE	297:40	297:40	4	;
FOR_EXPR	297:42	297:42	4	is_classic --
EXPR	297:42	297:42	5	is_classic --
FIELD	297:42	297:52	6	is_classic --
LEAF_NODE	297:42	297:42	7	is_classic
LEAF_NODE	297:52	297:52	7	--
LEAF_NODE	297:55	297:55	4	)
STATEMENTS	298:4	309:4	4	
LEAF_NODE	298:4	298:4	5	{
STATEMENTS	299:8	307:8	5	
SIMPLE_DECL	299:8	299:17	6	int tiled ;
VAR_DECL	299:8	299:12	7	int tiled
TYPE	299:8	299:8	8	int
TYPE_NAME	299:8	299:8	9	int
LEAF_NODE	299:8	299:8	10	int
NAME	299:12	299:12	8	tiled
LEAF_NODE	299:12	299:12	9	tiled
LEAF_NODE	299:17	299:17	7	;
ITERATION	300:8	301:8	6	
KEYWORD	300:8	300:8	7	for
LEAF_NODE	300:8	300:8	8	for
LEAF_NODE	300:11	300:11	7	(
FOR_INIT	300:13	300:22	7	tiled = 0 ;
EXPR	300:13	300:13	8	tiled = 0
ASSIGN	300:13	300:21	9	tiled = 0
LVAL	300:13	300:13	10	tiled
FIELD	300:13	300:13	11	tiled
LEAF_NODE	300:13	300:13	12	tiled
ASSIGN_OP	300:19	300:19	10	=
LEAF_NODE	300:19	300:19	11	=
RVAL	300:21	300:21	10	0
FIELD	300:21	300:21	11	0
LEAF_NODE	300:21	300:21	12	0
LEAF_NODE	300:22	300:22	8	;
CONDITION	300:24	300:24	7	tiled <= 1
EXPR	300:24	300:33	8	tiled <= 1
FIELD	300:24	300:24	9	tiled
LEAF_NODE	300:24	300:24	10	tiled
REL_OPERATOR	300:30	300:30	9	<=
LEAF_NODE	300:30	300:30	10	<=
FIELD	300:33	300:33	9	1
LEAF_NODE	300:33	300:33	10	1
LEAF_NODE	300:34	300:34	7	;
FOR_EXPR	300:36	300:36	7	tiled ++
EXPR	300:36	300:36	8	tiled ++
FIELD	300:36	300:42	9	tiled ++
LEAF_NODE	300:36	300:36	10	tiled
LEAF_NODE	300:42	300:42	10	++
LEAF_NODE	300:45	300:45	7	)
STATEMENTS	301:8	306:8	7	
LEAF_NODE	301:8	301:8	8	{
STATEMENTS	302:12	304:12	8	
SELECTION	302:12	303:16	9	
KEYWORD	302:12	302:12	10	if
LEAF_NODE	302:12	302:12	11	if
LEAF_NODE	302:14	302:14	10	(
CONDITION	302:16	302:16	10	test ( is_classic , 1 , tiled )
EXPR	302:16	302:16	11	test ( is_classic , 1 , tiled )
FUNCTION_CALL	302:16	302:41	12	test ( is_classic , 1 , tiled )
CALLEE	302:16	302:16	13	test
LEAF_NODE	302:16	302:16	14	test
LEAF_NODE	302:20	302:20	13	(
ARGUMENT	302:21	302:21	13	is_classic
FIELD	302:21	302:21	14	is_classic
LEAF_NODE	302:21	302:21	15	is_classic
LEAF_NODE	302:31	302:31	13	,
ARGUMENT	302:33	302:33	13	1
FIELD	302:33	302:33	14	1
LEAF_NODE	302:33	302:33	15	1
LEAF_NODE	302:34	302:34	13	,
ARGUMENT	302:36	302:36	13	tiled
FIELD	302:36	302:36	14	tiled
LEAF_NODE	302:36	302:36	15	tiled
LEAF_NODE	302:41	302:41	13	)
LEAF_NODE	302:43	302:43	10	)
STATEMENTS	303:16	303:16	10	
JUMP_STATEMENT	303:16	303:24	11	return 1 ;
KEYWORD	303:16	303:16	12	return
LEAF_NODE	303:16	303:16	13	return
DESTINATION	303:23	303:23	12	1
EXPR	303:23	303:23	13	1
FIELD	303:23	303:23	14	1
LEAF_NODE	303:23	303:23	15	1
LEAF_NODE	303:24	303:24	12	;
SELECTION	304:12	305:16	9	
KEYWORD	304:12	304:12	10	if
LEAF_NODE	304:12	304:12	11	if
LEAF_NODE	304:14	304:14	10	(
CONDITION	304:16	304:16	10	test ( is_classic , 8192 , tiled )
EXPR	304:16	304:16	11	test ( is_classic , 8192 , tiled )
FUNCTION_CALL	304:16	304:44	12	test ( is_classic , 8192 , tiled )
CALLEE	304:16	304:16	13	test
LEAF_NODE	304:16	304:16	14	test
LEAF_NODE	304:20	304:20	13	(
ARGUMENT	304:21	304:21	13	is_classic
FIELD	304:21	304:21	14	is_classic
LEAF_NODE	304:21	304:21	15	is_classic
LEAF_NODE	304:31	304:31	13	,
ARGUMENT	304:33	304:33	13	8192
FIELD	304:33	304:33	14	8192
LEAF_NODE	304:33	304:33	15	8192
LEAF_NODE	304:37	304:37	13	,
ARGUMENT	304:39	304:39	13	tiled
FIELD	304:39	304:39	14	tiled
LEAF_NODE	304:39	304:39	15	tiled
LEAF_NODE	304:44	304:44	13	)
LEAF_NODE	304:46	304:46	10	)
STATEMENTS	305:16	305:16	10	
JUMP_STATEMENT	305:16	305:24	11	return 1 ;
KEYWORD	305:16	305:16	12	return
LEAF_NODE	305:16	305:16	13	return
DESTINATION	305:23	305:23	12	1
EXPR	305:23	305:23	13	1
FIELD	305:23	305:23	14	1
LEAF_NODE	305:23	305:23	15	1
LEAF_NODE	305:24	305:24	12	;
LEAF_NODE	306:8	306:8	8	}
SELECTION	307:8	308:12	6	
KEYWORD	307:8	307:8	7	if
LEAF_NODE	307:8	307:8	8	if
LEAF_NODE	307:10	307:10	7	(
CONDITION	307:12	307:12	7	test ( is_classic , 2000000 , 0 )
EXPR	307:12	307:12	8	test ( is_classic , 2000000 , 0 )
FUNCTION_CALL	307:12	307:39	9	test ( is_classic , 2000000 , 0 )
CALLEE	307:12	307:12	10	test
LEAF_NODE	307:12	307:12	11	test
LEAF_NODE	307:16	307:16	10	(
ARGUMENT	307:17	307:17	10	is_classic
FIELD	307:17	307:17	11	is_classic
LEAF_NODE	307:17	307:17	12	is_classic
LEAF_NODE	307:27	307:27	10	,
ARGUMENT	307:29	307:29	10	2000000
FIELD	307:29	307:29	11	2000000
LEAF_NODE	307:29	307:29	12	2000000
LEAF_NODE	307:36	307:36	10	,
ARGUMENT	307:38	307:38	10	0
FIELD	307:38	307:38	11	0
LEAF_NODE	307:38	307:38	12	0
LEAF_NODE	307:39	307:39	10	)
LEAF_NODE	307:41	307:41	7	)
STATEMENTS	308:12	308:12	7	
JUMP_STATEMENT	308:12	308:20	8	return 1 ;
KEYWORD	308:12	308:12	9	return
LEAF_NODE	308:12	308:12	10	return
DESTINATION	308:19	308:19	9	1
EXPR	308:19	308:19	10	1
FIELD	308:19	308:19	11	1
LEAF_NODE	308:19	308:19	12	1
LEAF_NODE	308:20	308:20	9	;
LEAF_NODE	309:4	309:4	5	}
JUMP_STATEMENT	310:4	310:12	3	return 0 ;
KEYWORD	310:4	310:4	4	return
LEAF_NODE	310:4	310:4	5	return
DESTINATION	310:11	310:11	4	0
EXPR	310:11	310:11	5	0
FIELD	310:11	310:11	6	0
LEAF_NODE	310:11	310:11	7	0
LEAF_NODE	310:12	310:12	4	;
LEAF_NODE	311:0	311:0	2	}
