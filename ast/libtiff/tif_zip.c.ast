SOURCE_FILE	68:8	379:0	0	
SIMPLE_DECL	68:8	78:10	1	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; z_stream stream ; int zipquality ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; } ZIPState ;
VAR_DECL	68:8	78:2	2	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; z_stream stream ; int zipquality ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; } ZIPState
TYPE	68:8	68:8	3	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; z_stream stream ; int zipquality ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; }
CLASS_DEF	68:8	78:0	4	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; z_stream stream ; int zipquality ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; }
LEAF_NODE	68:8	68:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	68:15	68:15	5	{
CLASS_CONTENT	69:1	77:1	5	TIFFPredictorState predict ; z_stream stream ; int zipquality ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ;
SIMPLE_DECL	69:1	69:27	6	TIFFPredictorState predict ;
VAR_DECL	69:1	69:20	7	TIFFPredictorState predict
TYPE	69:1	69:1	8	TIFFPredictorState
TYPE_NAME	69:1	69:1	9	TIFFPredictorState
LEAF_NODE	69:1	69:1	10	TIFFPredictorState
NAME	69:20	69:20	8	predict
LEAF_NODE	69:20	69:20	9	predict
LEAF_NODE	69:27	69:27	7	;
SIMPLE_DECL	70:8	70:30	6	z_stream stream ;
VAR_DECL	70:8	70:24	7	z_stream stream
TYPE	70:8	70:8	8	z_stream
TYPE_NAME	70:8	70:8	9	z_stream
LEAF_NODE	70:8	70:8	10	z_stream
NAME	70:24	70:24	8	stream
LEAF_NODE	70:24	70:24	9	stream
LEAF_NODE	70:30	70:30	7	;
SIMPLE_DECL	71:1	71:27	6	int zipquality ;
VAR_DECL	71:1	71:17	7	int zipquality
TYPE	71:1	71:1	8	int
TYPE_NAME	71:1	71:1	9	int
LEAF_NODE	71:1	71:1	10	int
NAME	71:17	71:17	8	zipquality
LEAF_NODE	71:17	71:17	9	zipquality
LEAF_NODE	71:27	71:27	7	;
SIMPLE_DECL	72:1	72:22	6	int state ;
VAR_DECL	72:1	72:17	7	int state
TYPE	72:1	72:1	8	int
TYPE_NAME	72:1	72:1	9	int
LEAF_NODE	72:1	72:1	10	int
NAME	72:17	72:17	8	state
LEAF_NODE	72:17	72:17	9	state
LEAF_NODE	72:22	72:22	7	;
SIMPLE_DECL	76:1	76:27	6	TIFFVGetMethod vgetparent ;
VAR_DECL	76:1	76:17	7	TIFFVGetMethod vgetparent
TYPE	76:1	76:1	8	TIFFVGetMethod
TYPE_NAME	76:1	76:1	9	TIFFVGetMethod
LEAF_NODE	76:1	76:1	10	TIFFVGetMethod
NAME	76:17	76:17	8	vgetparent
LEAF_NODE	76:17	76:17	9	vgetparent
LEAF_NODE	76:27	76:27	7	;
SIMPLE_DECL	77:1	77:27	6	TIFFVSetMethod vsetparent ;
VAR_DECL	77:1	77:17	7	TIFFVSetMethod vsetparent
TYPE	77:1	77:1	8	TIFFVSetMethod
TYPE_NAME	77:1	77:1	9	TIFFVSetMethod
LEAF_NODE	77:1	77:1	10	TIFFVSetMethod
NAME	77:17	77:17	8	vsetparent
LEAF_NODE	77:17	77:17	9	vsetparent
LEAF_NODE	77:27	77:27	7	;
LEAF_NODE	78:0	78:0	5	}
NAME	78:2	78:2	3	ZIPState
LEAF_NODE	78:2	78:2	4	ZIPState
LEAF_NODE	78:10	78:10	2	;
FUNCTION_DEF	87:0	92:0	1	
RETURN_TYPE	87:0	87:7	2	static int
LEAF_NODE	87:0	87:0	3	static
TYPE_NAME	87:7	87:7	3	int
LEAF_NODE	87:7	87:7	4	int
FUNCTION_NAME	88:0	88:0	2	ZIPFixupTags
LEAF_NODE	88:0	88:0	3	ZIPFixupTags
PARAMETER_LIST	88:12	88:22	2	( TIFF * tif )
LEAF_NODE	88:12	88:12	3	(
PARAMETER_DECL	88:13	88:19	3	TIFF * tif
TYPE	88:13	88:17	4	TIFF *
TYPE_NAME	88:13	88:13	5	TIFF
LEAF_NODE	88:13	88:13	6	TIFF
POINTER	88:17	88:17	5	*
LEAF_NODE	88:17	88:17	6	*
NAME	88:19	88:19	4	tif
LEAF_NODE	88:19	88:19	5	tif
LEAF_NODE	88:22	88:22	3	)
LEAF_NODE	89:0	89:0	2	{
STATEMENTS	90:1	91:1	2	
EXPR_STATEMENT	90:1	90:11	3	( void ) tif ;
EXPR	90:1	90:8	4	( void ) tif
LEAF_NODE	90:1	90:1	5	(
TYPE_NAME	90:2	90:2	5	void
LEAF_NODE	90:2	90:2	6	void
LEAF_NODE	90:6	90:6	5	)
FIELD	90:8	90:8	5	tif
LEAF_NODE	90:8	90:8	6	tif
LEAF_NODE	90:11	90:11	4	;
JUMP_STATEMENT	91:1	91:11	3	return ( 1 ) ;
KEYWORD	91:1	91:1	4	return
LEAF_NODE	91:1	91:1	5	return
DESTINATION	91:8	91:8	4	( 1 )
EXPR	91:8	91:10	5	( 1 )
LEAF_NODE	91:8	91:8	6	(
FIELD	91:9	91:9	6	1
LEAF_NODE	91:9	91:9	7	1
LEAF_NODE	91:10	91:10	6	)
LEAF_NODE	91:11	91:11	4	;
LEAF_NODE	92:0	92:0	2	}
FUNCTION_DEF	94:0	119:0	1	
RETURN_TYPE	94:0	94:7	2	static int
LEAF_NODE	94:0	94:0	3	static
TYPE_NAME	94:7	94:7	3	int
LEAF_NODE	94:7	94:7	4	int
FUNCTION_NAME	95:0	95:0	2	ZIPSetupDecode
LEAF_NODE	95:0	95:0	3	ZIPSetupDecode
PARAMETER_LIST	95:14	95:24	2	( TIFF * tif )
LEAF_NODE	95:14	95:14	3	(
PARAMETER_DECL	95:15	95:21	3	TIFF * tif
TYPE	95:15	95:19	4	TIFF *
TYPE_NAME	95:15	95:15	5	TIFF
LEAF_NODE	95:15	95:15	6	TIFF
POINTER	95:19	95:19	5	*
LEAF_NODE	95:19	95:19	6	*
NAME	95:21	95:21	4	tif
LEAF_NODE	95:21	95:21	5	tif
LEAF_NODE	95:24	95:24	3	)
LEAF_NODE	96:0	96:0	2	{
STATEMENTS	97:1	115:3	2	
LEAF_NODE	97:1	97:1	3	static
SIMPLE_DECL	97:8	97:46	3	const char [ ] module ; module = "ZIPSetupDecode" ;
VAR_DECL	97:8	97:19	4	const char [ ] module ; module = "ZIPSetupDecode"
TYPE	97:8	97:25	5	const char [ ]
TYPE_NAME	97:8	97:14	6	const char
LEAF_NODE	97:8	97:8	7	const
LEAF_NODE	97:14	97:14	7	char
TYPE_SUFFIX	97:25	97:26	6	[ ]
LEAF_NODE	97:25	97:25	7	[
LEAF_NODE	97:26	97:26	7	]
NAME	97:19	97:19	5	module
LEAF_NODE	97:19	97:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	97:19	97:19	5	module = "ZIPSetupDecode"
ASSIGN	97:19	97:30	6	module = "ZIPSetupDecode"
LVAL	97:19	97:19	7	module
NAME	97:19	97:19	8	module
LEAF_NODE	97:19	97:19	9	module
ASSIGN_OP	97:28	97:28	7	=
LEAF_NODE	97:28	97:28	8	=
RVAL	97:30	97:30	7	"ZIPSetupDecode"
FIELD	97:30	97:30	8	"ZIPSetupDecode"
LEAF_NODE	97:30	97:30	9	"ZIPSetupDecode"
LEAF_NODE	97:46	97:46	4	;
SIMPLE_DECL	98:1	98:33	3	ZIPState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	98:1	98:11	4	ZIPState * sp ; sp = DecoderState ( tif )
TYPE	98:1	98:9	5	ZIPState *
TYPE_NAME	98:1	98:1	6	ZIPState
LEAF_NODE	98:1	98:1	7	ZIPState
POINTER	98:9	98:9	6	*
LEAF_NODE	98:9	98:9	7	*
NAME	98:11	98:11	5	sp
LEAF_NODE	98:11	98:11	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	98:11	98:11	5	sp = DecoderState ( tif )
ASSIGN	98:11	98:16	6	sp = DecoderState ( tif )
LVAL	98:11	98:11	7	sp
NAME	98:11	98:11	8	sp
LEAF_NODE	98:11	98:11	9	sp
ASSIGN_OP	98:14	98:14	7	=
LEAF_NODE	98:14	98:14	8	=
RVAL	98:16	98:16	7	DecoderState ( tif )
FUNCTION_CALL	98:16	98:32	8	DecoderState ( tif )
CALLEE	98:16	98:16	9	DecoderState
LEAF_NODE	98:16	98:16	10	DecoderState
LEAF_NODE	98:28	98:28	9	(
ARGUMENT	98:29	98:29	9	tif
FIELD	98:29	98:29	10	tif
LEAF_NODE	98:29	98:29	11	tif
LEAF_NODE	98:32	98:32	9	)
LEAF_NODE	98:33	98:33	4	;
EXPR_STATEMENT	100:1	100:19	3	assert ( sp != NULL ) ;
EXPR	100:1	100:1	4	assert ( sp != NULL )
FUNCTION_CALL	100:1	100:18	5	assert ( sp != NULL )
CALLEE	100:1	100:1	6	assert
LEAF_NODE	100:1	100:1	7	assert
LEAF_NODE	100:7	100:7	6	(
ARGUMENT	100:8	100:14	6	sp != NULL
FIELD	100:8	100:8	7	sp
LEAF_NODE	100:8	100:8	8	sp
EQ_OPERATOR	100:11	100:11	7	!=
LEAF_NODE	100:11	100:11	8	!=
FIELD	100:14	100:14	7	NULL
LEAF_NODE	100:14	100:14	8	NULL
LEAF_NODE	100:18	100:18	6	)
LEAF_NODE	100:19	100:19	4	;
SELECTION	103:1	103:37	3	
KEYWORD	103:1	103:1	4	if
LEAF_NODE	103:1	103:1	5	if
LEAF_NODE	103:4	103:4	4	(
CONDITION	103:5	103:5	4	sp -> state & ZSTATE_INIT_ENCODE
EXPR	103:5	103:17	5	sp -> state & ZSTATE_INIT_ENCODE
FIELD	103:5	103:9	6	sp -> state
LEAF_NODE	103:5	103:5	7	sp
LEAF_NODE	103:7	103:7	7	->
LEAF_NODE	103:9	103:9	7	state
LEAF_NODE	103:15	103:15	6	&
FIELD	103:17	103:17	6	ZSTATE_INIT_ENCODE
LEAF_NODE	103:17	103:17	7	ZSTATE_INIT_ENCODE
LEAF_NODE	103:35	103:35	4	)
STATEMENTS	103:37	106:1	4	
LEAF_NODE	103:37	103:37	5	{
STATEMENTS	104:5	105:5	5	
EXPR_STATEMENT	104:5	104:28	6	deflateEnd ( & sp -> stream ) ;
EXPR	104:5	104:5	7	deflateEnd ( & sp -> stream )
FUNCTION_CALL	104:5	104:27	8	deflateEnd ( & sp -> stream )
CALLEE	104:5	104:5	9	deflateEnd
LEAF_NODE	104:5	104:5	10	deflateEnd
LEAF_NODE	104:15	104:15	9	(
ARGUMENT	104:16	104:16	9	& sp -> stream
UNARY_EXPR	104:16	104:17	10	& sp -> stream
UNARY_OPERATOR	104:16	104:16	11	&
LEAF_NODE	104:16	104:16	12	&
FIELD	104:17	104:21	11	sp -> stream
LEAF_NODE	104:17	104:17	12	sp
LEAF_NODE	104:19	104:19	12	->
LEAF_NODE	104:21	104:21	12	stream
LEAF_NODE	104:27	104:27	9	)
LEAF_NODE	104:28	104:28	7	;
EXPR_STATEMENT	105:5	105:18	6	sp -> state = 0 ;
EXPR	105:5	105:5	7	sp -> state = 0
ASSIGN	105:5	105:17	8	sp -> state = 0
LVAL	105:5	105:5	9	sp -> state
FIELD	105:5	105:9	10	sp -> state
LEAF_NODE	105:5	105:5	11	sp
LEAF_NODE	105:7	105:7	11	->
LEAF_NODE	105:9	105:9	11	state
ASSIGN_OP	105:15	105:15	9	=
LEAF_NODE	105:15	105:15	10	=
RVAL	105:17	105:17	9	0
FIELD	105:17	105:17	10	0
LEAF_NODE	105:17	105:17	11	0
LEAF_NODE	105:18	105:18	7	;
LEAF_NODE	106:1	106:1	5	}
SELECTION	111:1	112:39	3	
KEYWORD	111:1	111:1	4	if
LEAF_NODE	111:1	111:1	5	if
LEAF_NODE	111:4	111:4	4	(
CONDITION	111:5	111:5	4	( sp -> state & ZSTATE_INIT_DECODE ) == 0 && inflateInit ( & sp -> stream ) != Z_OK
EXPR	111:5	111:5	5	( sp -> state & ZSTATE_INIT_DECODE ) == 0 && inflateInit ( & sp -> stream ) != Z_OK
AND	111:5	112:5	6	( sp -> state & ZSTATE_INIT_DECODE ) == 0 && inflateInit ( & sp -> stream ) != Z_OK
EXPR	111:5	111:41	7	( sp -> state & ZSTATE_INIT_DECODE ) == 0
LEAF_NODE	111:5	111:5	8	(
FIELD	111:6	111:10	8	sp -> state
LEAF_NODE	111:6	111:6	9	sp
LEAF_NODE	111:8	111:8	9	->
LEAF_NODE	111:10	111:10	9	state
LEAF_NODE	111:16	111:16	8	&
FIELD	111:18	111:18	8	ZSTATE_INIT_DECODE
LEAF_NODE	111:18	111:18	9	ZSTATE_INIT_DECODE
LEAF_NODE	111:36	111:36	8	)
EQ_OPERATOR	111:38	111:38	8	==
LEAF_NODE	111:38	111:38	9	==
FIELD	111:41	111:41	8	0
LEAF_NODE	111:41	111:41	9	0
LEAF_NODE	111:43	111:43	7	&&
EXPR	112:5	112:33	7	inflateInit ( & sp -> stream ) != Z_OK
FUNCTION_CALL	112:5	112:28	8	inflateInit ( & sp -> stream )
CALLEE	112:5	112:5	9	inflateInit
LEAF_NODE	112:5	112:5	10	inflateInit
LEAF_NODE	112:16	112:16	9	(
ARGUMENT	112:17	112:17	9	& sp -> stream
UNARY_EXPR	112:17	112:18	10	& sp -> stream
UNARY_OPERATOR	112:17	112:17	11	&
LEAF_NODE	112:17	112:17	12	&
FIELD	112:18	112:22	11	sp -> stream
LEAF_NODE	112:18	112:18	12	sp
LEAF_NODE	112:20	112:20	12	->
LEAF_NODE	112:22	112:22	12	stream
LEAF_NODE	112:28	112:28	9	)
EQ_OPERATOR	112:30	112:30	8	!=
LEAF_NODE	112:30	112:30	9	!=
FIELD	112:33	112:33	8	Z_OK
LEAF_NODE	112:33	112:33	9	Z_OK
LEAF_NODE	112:37	112:37	4	)
STATEMENTS	112:39	115:1	4	
LEAF_NODE	112:39	112:39	5	{
STATEMENTS	113:2	114:2	5	
EXPR_STATEMENT	113:2	113:63	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , SAFE_MSG ( sp ) ) ;
EXPR	113:2	113:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , SAFE_MSG ( sp ) )
FUNCTION_CALL	113:2	113:62	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , SAFE_MSG ( sp ) )
CALLEE	113:2	113:2	9	TIFFErrorExt
LEAF_NODE	113:2	113:2	10	TIFFErrorExt
LEAF_NODE	113:14	113:14	9	(
ARGUMENT	113:15	113:15	9	tif -> tif_clientdata
FIELD	113:15	113:20	10	tif -> tif_clientdata
LEAF_NODE	113:15	113:15	11	tif
LEAF_NODE	113:18	113:18	11	->
LEAF_NODE	113:20	113:20	11	tif_clientdata
LEAF_NODE	113:34	113:34	9	,
ARGUMENT	113:36	113:36	9	module
FIELD	113:36	113:36	10	module
LEAF_NODE	113:36	113:36	11	module
LEAF_NODE	113:42	113:42	9	,
ARGUMENT	113:44	113:44	9	"%s"
FIELD	113:44	113:44	10	"%s"
LEAF_NODE	113:44	113:44	11	"%s"
LEAF_NODE	113:48	113:48	9	,
ARGUMENT	113:50	113:50	9	SAFE_MSG ( sp )
FUNCTION_CALL	113:50	113:61	10	SAFE_MSG ( sp )
CALLEE	113:50	113:50	11	SAFE_MSG
LEAF_NODE	113:50	113:50	12	SAFE_MSG
LEAF_NODE	113:58	113:58	11	(
ARGUMENT	113:59	113:59	11	sp
FIELD	113:59	113:59	12	sp
LEAF_NODE	113:59	113:59	13	sp
LEAF_NODE	113:61	113:61	11	)
LEAF_NODE	113:62	113:62	9	)
LEAF_NODE	113:63	113:63	7	;
JUMP_STATEMENT	114:2	114:12	6	return ( 0 ) ;
KEYWORD	114:2	114:2	7	return
LEAF_NODE	114:2	114:2	8	return
DESTINATION	114:9	114:9	7	( 0 )
EXPR	114:9	114:11	8	( 0 )
LEAF_NODE	114:9	114:9	9	(
FIELD	114:10	114:10	9	0
LEAF_NODE	114:10	114:10	10	0
LEAF_NODE	114:11	114:11	9	)
LEAF_NODE	114:12	114:12	7	;
LEAF_NODE	115:1	115:1	5	}
SELECTION	115:3	115:8	3	
KEYWORD	115:3	115:3	4	else
LEAF_NODE	115:3	115:3	5	else
STATEMENTS	115:8	118:1	4	
LEAF_NODE	115:8	115:8	5	{
STATEMENTS	116:2	117:2	5	
EXPR_STATEMENT	116:2	116:33	6	sp -> state |= ZSTATE_INIT_DECODE ;
EXPR	116:2	116:2	7	sp -> state |= ZSTATE_INIT_DECODE
ASSIGN	116:2	116:15	8	sp -> state |= ZSTATE_INIT_DECODE
LVAL	116:2	116:2	9	sp -> state
FIELD	116:2	116:6	10	sp -> state
LEAF_NODE	116:2	116:2	11	sp
LEAF_NODE	116:4	116:4	11	->
LEAF_NODE	116:6	116:6	11	state
ASSIGN_OP	116:12	116:12	9	|=
LEAF_NODE	116:12	116:12	10	|=
RVAL	116:15	116:15	9	ZSTATE_INIT_DECODE
FIELD	116:15	116:15	10	ZSTATE_INIT_DECODE
LEAF_NODE	116:15	116:15	11	ZSTATE_INIT_DECODE
LEAF_NODE	116:33	116:33	7	;
JUMP_STATEMENT	117:2	117:12	6	return ( 1 ) ;
KEYWORD	117:2	117:2	7	return
LEAF_NODE	117:2	117:2	8	return
DESTINATION	117:9	117:9	7	( 1 )
EXPR	117:9	117:11	8	( 1 )
LEAF_NODE	117:9	117:9	9	(
FIELD	117:10	117:10	9	1
LEAF_NODE	117:10	117:10	10	1
LEAF_NODE	117:11	117:11	9	)
LEAF_NODE	117:12	117:12	7	;
LEAF_NODE	118:1	118:1	5	}
LEAF_NODE	119:0	119:0	2	}
FUNCTION_DEF	124:0	142:0	1	
RETURN_TYPE	124:0	124:7	2	static int
LEAF_NODE	124:0	124:0	3	static
TYPE_NAME	124:7	124:7	3	int
LEAF_NODE	124:7	124:7	4	int
FUNCTION_NAME	125:0	125:0	2	ZIPPreDecode
LEAF_NODE	125:0	125:0	3	ZIPPreDecode
PARAMETER_LIST	125:12	125:32	2	( TIFF * tif , uint16 s )
LEAF_NODE	125:12	125:12	3	(
PARAMETER_DECL	125:13	125:19	3	TIFF * tif
TYPE	125:13	125:17	4	TIFF *
TYPE_NAME	125:13	125:13	5	TIFF
LEAF_NODE	125:13	125:13	6	TIFF
POINTER	125:17	125:17	5	*
LEAF_NODE	125:17	125:17	6	*
NAME	125:19	125:19	4	tif
LEAF_NODE	125:19	125:19	5	tif
LEAF_NODE	125:22	125:22	3	,
PARAMETER_DECL	125:24	125:31	3	uint16 s
TYPE	125:24	125:24	4	uint16
TYPE_NAME	125:24	125:24	5	uint16
LEAF_NODE	125:24	125:24	6	uint16
NAME	125:31	125:31	4	s
LEAF_NODE	125:31	125:31	5	s
LEAF_NODE	125:32	125:32	3	)
LEAF_NODE	126:0	126:0	2	{
STATEMENTS	127:1	141:1	2	
SIMPLE_DECL	127:1	127:33	3	ZIPState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	127:1	127:11	4	ZIPState * sp ; sp = DecoderState ( tif )
TYPE	127:1	127:9	5	ZIPState *
TYPE_NAME	127:1	127:1	6	ZIPState
LEAF_NODE	127:1	127:1	7	ZIPState
POINTER	127:9	127:9	6	*
LEAF_NODE	127:9	127:9	7	*
NAME	127:11	127:11	5	sp
LEAF_NODE	127:11	127:11	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	127:11	127:11	5	sp = DecoderState ( tif )
ASSIGN	127:11	127:16	6	sp = DecoderState ( tif )
LVAL	127:11	127:11	7	sp
NAME	127:11	127:11	8	sp
LEAF_NODE	127:11	127:11	9	sp
ASSIGN_OP	127:14	127:14	7	=
LEAF_NODE	127:14	127:14	8	=
RVAL	127:16	127:16	7	DecoderState ( tif )
FUNCTION_CALL	127:16	127:32	8	DecoderState ( tif )
CALLEE	127:16	127:16	9	DecoderState
LEAF_NODE	127:16	127:16	10	DecoderState
LEAF_NODE	127:28	127:28	9	(
ARGUMENT	127:29	127:29	9	tif
FIELD	127:29	127:29	10	tif
LEAF_NODE	127:29	127:29	11	tif
LEAF_NODE	127:32	127:32	9	)
LEAF_NODE	127:33	127:33	4	;
EXPR_STATEMENT	129:1	129:9	3	( void ) s ;
EXPR	129:1	129:8	4	( void ) s
LEAF_NODE	129:1	129:1	5	(
TYPE_NAME	129:2	129:2	5	void
LEAF_NODE	129:2	129:2	6	void
LEAF_NODE	129:6	129:6	5	)
FIELD	129:8	129:8	5	s
LEAF_NODE	129:8	129:8	6	s
LEAF_NODE	129:9	129:9	4	;
EXPR_STATEMENT	130:1	130:19	3	assert ( sp != NULL ) ;
EXPR	130:1	130:1	4	assert ( sp != NULL )
FUNCTION_CALL	130:1	130:18	5	assert ( sp != NULL )
CALLEE	130:1	130:1	6	assert
LEAF_NODE	130:1	130:1	7	assert
LEAF_NODE	130:7	130:7	6	(
ARGUMENT	130:8	130:14	6	sp != NULL
FIELD	130:8	130:8	7	sp
LEAF_NODE	130:8	130:8	8	sp
EQ_OPERATOR	130:11	130:11	7	!=
LEAF_NODE	130:11	130:11	8	!=
FIELD	130:14	130:14	7	NULL
LEAF_NODE	130:14	130:14	8	NULL
LEAF_NODE	130:18	130:18	6	)
LEAF_NODE	130:19	130:19	4	;
SELECTION	132:1	133:12	3	
KEYWORD	132:1	132:1	4	if
LEAF_NODE	132:1	132:1	5	if
LEAF_NODE	132:3	132:3	4	(
CONDITION	132:5	132:5	4	( sp -> state & ZSTATE_INIT_DECODE ) == 0
EXPR	132:5	132:41	5	( sp -> state & ZSTATE_INIT_DECODE ) == 0
LEAF_NODE	132:5	132:5	6	(
FIELD	132:6	132:10	6	sp -> state
LEAF_NODE	132:6	132:6	7	sp
LEAF_NODE	132:8	132:8	7	->
LEAF_NODE	132:10	132:10	7	state
LEAF_NODE	132:16	132:16	6	&
FIELD	132:18	132:18	6	ZSTATE_INIT_DECODE
LEAF_NODE	132:18	132:18	7	ZSTATE_INIT_DECODE
LEAF_NODE	132:36	132:36	6	)
EQ_OPERATOR	132:38	132:38	6	==
LEAF_NODE	132:38	132:38	7	==
FIELD	132:41	132:41	6	0
LEAF_NODE	132:41	132:41	7	0
LEAF_NODE	132:43	132:43	4	)
STATEMENTS	133:12	133:12	4	
EXPR_STATEMENT	133:12	133:39	5	tif -> tif_setupdecode ( tif ) ;
EXPR	133:12	133:12	6	tif -> tif_setupdecode ( tif )
FUNCTION_CALL	133:12	133:38	7	tif -> tif_setupdecode ( tif )
CALLEE	133:12	133:17	8	tif -> tif_setupdecode
LEAF_NODE	133:12	133:12	9	tif
LEAF_NODE	133:15	133:15	9	->
LEAF_NODE	133:17	133:17	9	tif_setupdecode
LEAF_NODE	133:32	133:32	8	(
ARGUMENT	133:34	133:34	8	tif
FIELD	133:34	133:34	9	tif
LEAF_NODE	133:34	133:34	10	tif
LEAF_NODE	133:38	133:38	8	)
LEAF_NODE	133:39	133:39	6	;
EXPR_STATEMENT	135:1	135:38	3	sp -> stream . next_in = tif -> tif_rawdata ;
EXPR	135:1	135:1	4	sp -> stream . next_in = tif -> tif_rawdata
ASSIGN	135:1	135:22	5	sp -> stream . next_in = tif -> tif_rawdata
LVAL	135:1	135:1	6	sp -> stream . next_in
FIELD	135:1	135:12	7	sp -> stream . next_in
LEAF_NODE	135:1	135:1	8	sp
LEAF_NODE	135:3	135:3	8	->
LEAF_NODE	135:5	135:5	8	stream
LEAF_NODE	135:11	135:11	8	.
LEAF_NODE	135:12	135:12	8	next_in
ASSIGN_OP	135:20	135:20	6	=
LEAF_NODE	135:20	135:20	7	=
RVAL	135:22	135:22	6	tif -> tif_rawdata
FIELD	135:22	135:27	7	tif -> tif_rawdata
LEAF_NODE	135:22	135:22	8	tif
LEAF_NODE	135:25	135:25	8	->
LEAF_NODE	135:27	135:27	8	tif_rawdata
LEAF_NODE	135:38	135:38	4	;
EXPR_STATEMENT	136:1	136:39	3	assert ( sizeof ( sp -> stream . avail_in ) == 4 ) ;
EXPR	136:1	136:1	4	assert ( sizeof ( sp -> stream . avail_in ) == 4 )
FUNCTION_CALL	136:1	136:38	5	assert ( sizeof ( sp -> stream . avail_in ) == 4 )
CALLEE	136:1	136:1	6	assert
LEAF_NODE	136:1	136:1	7	assert
LEAF_NODE	136:7	136:7	6	(
ARGUMENT	136:8	136:37	6	sizeof ( sp -> stream . avail_in ) == 4
FUNCTION_CALL	136:8	136:34	7	sizeof ( sp -> stream . avail_in )
CALLEE	136:8	136:8	8	sizeof
LEAF_NODE	136:8	136:8	9	sizeof
LEAF_NODE	136:14	136:14	8	(
ARGUMENT	136:15	136:15	8	sp -> stream . avail_in
FIELD	136:15	136:26	9	sp -> stream . avail_in
LEAF_NODE	136:15	136:15	10	sp
LEAF_NODE	136:17	136:17	10	->
LEAF_NODE	136:19	136:19	10	stream
LEAF_NODE	136:25	136:25	10	.
LEAF_NODE	136:26	136:26	10	avail_in
LEAF_NODE	136:34	136:34	8	)
EQ_OPERATOR	136:35	136:35	7	==
LEAF_NODE	136:35	136:35	8	==
FIELD	136:37	136:37	7	4
LEAF_NODE	136:37	136:37	8	4
LEAF_NODE	136:38	136:38	6	)
LEAF_NODE	136:39	136:39	4	;
EXPR_STATEMENT	140:1	140:97	3	sp -> stream . avail_in = ( uint64 ) tif -> tif_rawcc < 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU ;
EXPR	140:1	140:1	4	sp -> stream . avail_in = ( uint64 ) tif -> tif_rawcc < 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU
ASSIGN	140:1	140:23	5	sp -> stream . avail_in = ( uint64 ) tif -> tif_rawcc < 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU
LVAL	140:1	140:1	6	sp -> stream . avail_in
FIELD	140:1	140:12	7	sp -> stream . avail_in
LEAF_NODE	140:1	140:1	8	sp
LEAF_NODE	140:3	140:3	8	->
LEAF_NODE	140:5	140:5	8	stream
LEAF_NODE	140:11	140:11	8	.
LEAF_NODE	140:12	140:12	8	avail_in
ASSIGN_OP	140:21	140:21	6	=
LEAF_NODE	140:21	140:21	7	=
RVAL	140:23	140:23	6	( uint64 ) tif -> tif_rawcc < 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU
COND_EXPR	140:23	140:86	7	( uint64 ) tif -> tif_rawcc < 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU
CONDITION	140:23	140:48	8	( uint64 ) tif -> tif_rawcc < 0xFFFFFFFFU
LEAF_NODE	140:23	140:23	9	(
TYPE_NAME	140:24	140:24	9	uint64
LEAF_NODE	140:24	140:24	10	uint64
LEAF_NODE	140:30	140:30	9	)
FIELD	140:31	140:36	9	tif -> tif_rawcc
LEAF_NODE	140:31	140:31	10	tif
LEAF_NODE	140:34	140:34	10	->
LEAF_NODE	140:36	140:36	10	tif_rawcc
REL_OPERATOR	140:46	140:46	9	<
LEAF_NODE	140:46	140:46	10	<
FIELD	140:48	140:48	9	0xFFFFFFFFU
LEAF_NODE	140:48	140:48	10	0xFFFFFFFFU
LEAF_NODE	140:60	140:60	8	?
EXPR	140:62	140:69	8	( uInt ) tif -> tif_rawcc
LEAF_NODE	140:62	140:62	9	(
TYPE_NAME	140:63	140:63	9	uInt
LEAF_NODE	140:63	140:63	10	uInt
LEAF_NODE	140:67	140:67	9	)
FIELD	140:69	140:74	9	tif -> tif_rawcc
LEAF_NODE	140:69	140:69	10	tif
LEAF_NODE	140:72	140:72	10	->
LEAF_NODE	140:74	140:74	10	tif_rawcc
LEAF_NODE	140:84	140:84	8	:
FIELD	140:86	140:86	8	0xFFFFFFFFU
LEAF_NODE	140:86	140:86	9	0xFFFFFFFFU
LEAF_NODE	140:97	140:97	4	;
JUMP_STATEMENT	141:1	141:43	3	return ( inflateReset ( & sp -> stream ) == Z_OK ) ;
KEYWORD	141:1	141:1	4	return
LEAF_NODE	141:1	141:1	5	return
DESTINATION	141:8	141:8	4	( inflateReset ( & sp -> stream ) == Z_OK )
EXPR	141:8	141:42	5	( inflateReset ( & sp -> stream ) == Z_OK )
LEAF_NODE	141:8	141:8	6	(
FUNCTION_CALL	141:9	141:33	6	inflateReset ( & sp -> stream )
CALLEE	141:9	141:9	7	inflateReset
LEAF_NODE	141:9	141:9	8	inflateReset
LEAF_NODE	141:21	141:21	7	(
ARGUMENT	141:22	141:22	7	& sp -> stream
UNARY_EXPR	141:22	141:23	8	& sp -> stream
UNARY_OPERATOR	141:22	141:22	9	&
LEAF_NODE	141:22	141:22	10	&
FIELD	141:23	141:27	9	sp -> stream
LEAF_NODE	141:23	141:23	10	sp
LEAF_NODE	141:25	141:25	10	->
LEAF_NODE	141:27	141:27	10	stream
LEAF_NODE	141:33	141:33	7	)
EQ_OPERATOR	141:35	141:35	6	==
LEAF_NODE	141:35	141:35	7	==
FIELD	141:38	141:38	6	Z_OK
LEAF_NODE	141:38	141:38	7	Z_OK
LEAF_NODE	141:42	141:42	6	)
LEAF_NODE	141:43	141:43	4	;
LEAF_NODE	142:0	142:0	2	}
FUNCTION_DEF	144:0	194:0	1	
RETURN_TYPE	144:0	144:7	2	static int
LEAF_NODE	144:0	144:0	3	static
TYPE_NAME	144:7	144:7	3	int
LEAF_NODE	144:7	144:7	4	int
FUNCTION_NAME	145:0	145:0	2	ZIPDecode
LEAF_NODE	145:0	145:0	3	ZIPDecode
PARAMETER_LIST	145:9	145:54	2	( TIFF * tif , uint8 * op , tmsize_t occ , uint16 s )
LEAF_NODE	145:9	145:9	3	(
PARAMETER_DECL	145:10	145:16	3	TIFF * tif
TYPE	145:10	145:14	4	TIFF *
TYPE_NAME	145:10	145:10	5	TIFF
LEAF_NODE	145:10	145:10	6	TIFF
POINTER	145:14	145:14	5	*
LEAF_NODE	145:14	145:14	6	*
NAME	145:16	145:16	4	tif
LEAF_NODE	145:16	145:16	5	tif
LEAF_NODE	145:19	145:19	3	,
PARAMETER_DECL	145:21	145:28	3	uint8 * op
TYPE	145:21	145:26	4	uint8 *
TYPE_NAME	145:21	145:21	5	uint8
LEAF_NODE	145:21	145:21	6	uint8
POINTER	145:26	145:26	5	*
LEAF_NODE	145:26	145:26	6	*
NAME	145:28	145:28	4	op
LEAF_NODE	145:28	145:28	5	op
LEAF_NODE	145:30	145:30	3	,
PARAMETER_DECL	145:32	145:41	3	tmsize_t occ
TYPE	145:32	145:32	4	tmsize_t
TYPE_NAME	145:32	145:32	5	tmsize_t
LEAF_NODE	145:32	145:32	6	tmsize_t
NAME	145:41	145:41	4	occ
LEAF_NODE	145:41	145:41	5	occ
LEAF_NODE	145:44	145:44	3	,
PARAMETER_DECL	145:46	145:53	3	uint16 s
TYPE	145:46	145:46	4	uint16
TYPE_NAME	145:46	145:46	5	uint16
LEAF_NODE	145:46	145:46	6	uint16
NAME	145:53	145:53	4	s
LEAF_NODE	145:53	145:53	5	s
LEAF_NODE	145:54	145:54	3	)
LEAF_NODE	146:0	146:0	2	{
STATEMENTS	147:1	193:1	2	
LEAF_NODE	147:1	147:1	3	static
SIMPLE_DECL	147:8	147:41	3	const char [ ] module ; module = "ZIPDecode" ;
VAR_DECL	147:8	147:19	4	const char [ ] module ; module = "ZIPDecode"
TYPE	147:8	147:25	5	const char [ ]
TYPE_NAME	147:8	147:14	6	const char
LEAF_NODE	147:8	147:8	7	const
LEAF_NODE	147:14	147:14	7	char
TYPE_SUFFIX	147:25	147:26	6	[ ]
LEAF_NODE	147:25	147:25	7	[
LEAF_NODE	147:26	147:26	7	]
NAME	147:19	147:19	5	module
LEAF_NODE	147:19	147:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	147:19	147:19	5	module = "ZIPDecode"
ASSIGN	147:19	147:30	6	module = "ZIPDecode"
LVAL	147:19	147:19	7	module
NAME	147:19	147:19	8	module
LEAF_NODE	147:19	147:19	9	module
ASSIGN_OP	147:28	147:28	7	=
LEAF_NODE	147:28	147:28	8	=
RVAL	147:30	147:30	7	"ZIPDecode"
FIELD	147:30	147:30	8	"ZIPDecode"
LEAF_NODE	147:30	147:30	9	"ZIPDecode"
LEAF_NODE	147:41	147:41	4	;
SIMPLE_DECL	148:1	148:33	3	ZIPState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	148:1	148:11	4	ZIPState * sp ; sp = DecoderState ( tif )
TYPE	148:1	148:9	5	ZIPState *
TYPE_NAME	148:1	148:1	6	ZIPState
LEAF_NODE	148:1	148:1	7	ZIPState
POINTER	148:9	148:9	6	*
LEAF_NODE	148:9	148:9	7	*
NAME	148:11	148:11	5	sp
LEAF_NODE	148:11	148:11	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	148:11	148:11	5	sp = DecoderState ( tif )
ASSIGN	148:11	148:16	6	sp = DecoderState ( tif )
LVAL	148:11	148:11	7	sp
NAME	148:11	148:11	8	sp
LEAF_NODE	148:11	148:11	9	sp
ASSIGN_OP	148:14	148:14	7	=
LEAF_NODE	148:14	148:14	8	=
RVAL	148:16	148:16	7	DecoderState ( tif )
FUNCTION_CALL	148:16	148:32	8	DecoderState ( tif )
CALLEE	148:16	148:16	9	DecoderState
LEAF_NODE	148:16	148:16	10	DecoderState
LEAF_NODE	148:28	148:28	9	(
ARGUMENT	148:29	148:29	9	tif
FIELD	148:29	148:29	10	tif
LEAF_NODE	148:29	148:29	11	tif
LEAF_NODE	148:32	148:32	9	)
LEAF_NODE	148:33	148:33	4	;
EXPR_STATEMENT	150:1	150:9	3	( void ) s ;
EXPR	150:1	150:8	4	( void ) s
LEAF_NODE	150:1	150:1	5	(
TYPE_NAME	150:2	150:2	5	void
LEAF_NODE	150:2	150:2	6	void
LEAF_NODE	150:6	150:6	5	)
FIELD	150:8	150:8	5	s
LEAF_NODE	150:8	150:8	6	s
LEAF_NODE	150:9	150:9	4	;
EXPR_STATEMENT	151:1	151:19	3	assert ( sp != NULL ) ;
EXPR	151:1	151:1	4	assert ( sp != NULL )
FUNCTION_CALL	151:1	151:18	5	assert ( sp != NULL )
CALLEE	151:1	151:1	6	assert
LEAF_NODE	151:1	151:1	7	assert
LEAF_NODE	151:7	151:7	6	(
ARGUMENT	151:8	151:14	6	sp != NULL
FIELD	151:8	151:8	7	sp
LEAF_NODE	151:8	151:8	8	sp
EQ_OPERATOR	151:11	151:11	7	!=
LEAF_NODE	151:11	151:11	8	!=
FIELD	151:14	151:14	7	NULL
LEAF_NODE	151:14	151:14	8	NULL
LEAF_NODE	151:18	151:18	6	)
LEAF_NODE	151:19	151:19	4	;
EXPR_STATEMENT	152:1	152:40	3	assert ( sp -> state == ZSTATE_INIT_DECODE ) ;
EXPR	152:1	152:1	4	assert ( sp -> state == ZSTATE_INIT_DECODE )
FUNCTION_CALL	152:1	152:39	5	assert ( sp -> state == ZSTATE_INIT_DECODE )
CALLEE	152:1	152:1	6	assert
LEAF_NODE	152:1	152:1	7	assert
LEAF_NODE	152:7	152:7	6	(
ARGUMENT	152:8	152:21	6	sp -> state == ZSTATE_INIT_DECODE
FIELD	152:8	152:12	7	sp -> state
LEAF_NODE	152:8	152:8	8	sp
LEAF_NODE	152:10	152:10	8	->
LEAF_NODE	152:12	152:12	8	state
EQ_OPERATOR	152:18	152:18	7	==
LEAF_NODE	152:18	152:18	8	==
FIELD	152:21	152:21	7	ZSTATE_INIT_DECODE
LEAF_NODE	152:21	152:21	8	ZSTATE_INIT_DECODE
LEAF_NODE	152:39	152:39	6	)
LEAF_NODE	152:40	152:40	4	;
EXPR_STATEMENT	154:8	154:43	3	sp -> stream . next_in = tif -> tif_rawcp ;
EXPR	154:8	154:8	4	sp -> stream . next_in = tif -> tif_rawcp
ASSIGN	154:8	154:29	5	sp -> stream . next_in = tif -> tif_rawcp
LVAL	154:8	154:8	6	sp -> stream . next_in
FIELD	154:8	154:19	7	sp -> stream . next_in
LEAF_NODE	154:8	154:8	8	sp
LEAF_NODE	154:10	154:10	8	->
LEAF_NODE	154:12	154:12	8	stream
LEAF_NODE	154:18	154:18	8	.
LEAF_NODE	154:19	154:19	8	next_in
ASSIGN_OP	154:27	154:27	6	=
LEAF_NODE	154:27	154:27	7	=
RVAL	154:29	154:29	6	tif -> tif_rawcp
FIELD	154:29	154:34	7	tif -> tif_rawcp
LEAF_NODE	154:29	154:29	8	tif
LEAF_NODE	154:32	154:32	8	->
LEAF_NODE	154:34	154:34	8	tif_rawcp
LEAF_NODE	154:43	154:43	4	;
EXPR_STATEMENT	156:1	156:25	3	sp -> stream . next_out = op ;
EXPR	156:1	156:1	4	sp -> stream . next_out = op
ASSIGN	156:1	156:23	5	sp -> stream . next_out = op
LVAL	156:1	156:1	6	sp -> stream . next_out
FIELD	156:1	156:12	7	sp -> stream . next_out
LEAF_NODE	156:1	156:1	8	sp
LEAF_NODE	156:3	156:3	8	->
LEAF_NODE	156:5	156:5	8	stream
LEAF_NODE	156:11	156:11	8	.
LEAF_NODE	156:12	156:12	8	next_out
ASSIGN_OP	156:21	156:21	6	=
LEAF_NODE	156:21	156:21	7	=
RVAL	156:23	156:23	6	op
FIELD	156:23	156:23	7	op
LEAF_NODE	156:23	156:23	8	op
LEAF_NODE	156:25	156:25	4	;
EXPR_STATEMENT	157:1	157:40	3	assert ( sizeof ( sp -> stream . avail_out ) == 4 ) ;
EXPR	157:1	157:1	4	assert ( sizeof ( sp -> stream . avail_out ) == 4 )
FUNCTION_CALL	157:1	157:39	5	assert ( sizeof ( sp -> stream . avail_out ) == 4 )
CALLEE	157:1	157:1	6	assert
LEAF_NODE	157:1	157:1	7	assert
LEAF_NODE	157:7	157:7	6	(
ARGUMENT	157:8	157:38	6	sizeof ( sp -> stream . avail_out ) == 4
FUNCTION_CALL	157:8	157:35	7	sizeof ( sp -> stream . avail_out )
CALLEE	157:8	157:8	8	sizeof
LEAF_NODE	157:8	157:8	9	sizeof
LEAF_NODE	157:14	157:14	8	(
ARGUMENT	157:15	157:15	8	sp -> stream . avail_out
FIELD	157:15	157:26	9	sp -> stream . avail_out
LEAF_NODE	157:15	157:15	10	sp
LEAF_NODE	157:17	157:17	10	->
LEAF_NODE	157:19	157:19	10	stream
LEAF_NODE	157:25	157:25	10	.
LEAF_NODE	157:26	157:26	10	avail_out
LEAF_NODE	157:35	157:35	8	)
EQ_OPERATOR	157:36	157:36	7	==
LEAF_NODE	157:36	157:36	8	==
FIELD	157:38	157:38	7	4
LEAF_NODE	157:38	157:38	8	4
LEAF_NODE	157:39	157:39	6	)
LEAF_NODE	157:40	157:40	4	;
ITERATION	161:1	161:4	3	
KEYWORD	161:1	161:1	4	do
LEAF_NODE	161:1	161:1	5	do
LEAF_NODE	183:9	183:9	4	(
CONDITION	183:10	183:10	4	occ > 0
EXPR	183:10	183:16	5	occ > 0
FIELD	183:10	183:10	6	occ
LEAF_NODE	183:10	183:10	7	occ
REL_OPERATOR	183:14	183:14	6	>
LEAF_NODE	183:14	183:14	7	>
FIELD	183:16	183:16	6	0
LEAF_NODE	183:16	183:16	7	0
LEAF_NODE	183:17	183:17	4	)
STATEMENTS	161:4	183:1	4	
LEAF_NODE	161:4	161:4	5	{
STATEMENTS	162:16	178:2	5	
SIMPLE_DECL	162:16	162:25	6	int state ;
VAR_DECL	162:16	162:20	7	int state
TYPE	162:16	162:16	8	int
TYPE_NAME	162:16	162:16	9	int
LEAF_NODE	162:16	162:16	10	int
NAME	162:20	162:20	8	state
LEAF_NODE	162:20	162:20	9	state
LEAF_NODE	162:25	162:25	7	;
SIMPLE_DECL	163:16	163:113	6	uInt avail_in_before ; avail_in_before = ( uint64 ) tif -> tif_rawcc <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU ;
VAR_DECL	163:16	163:21	7	uInt avail_in_before ; avail_in_before = ( uint64 ) tif -> tif_rawcc <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU
TYPE	163:16	163:16	8	uInt
TYPE_NAME	163:16	163:16	9	uInt
LEAF_NODE	163:16	163:16	10	uInt
NAME	163:21	163:21	8	avail_in_before
LEAF_NODE	163:21	163:21	9	avail_in_before
LEAF_NODE	0:0	0:0	8	;
INIT	163:21	163:21	8	avail_in_before = ( uint64 ) tif -> tif_rawcc <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU
ASSIGN	163:21	163:39	9	avail_in_before = ( uint64 ) tif -> tif_rawcc <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU
LVAL	163:21	163:21	10	avail_in_before
NAME	163:21	163:21	11	avail_in_before
LEAF_NODE	163:21	163:21	12	avail_in_before
ASSIGN_OP	163:37	163:37	10	=
LEAF_NODE	163:37	163:37	11	=
RVAL	163:39	163:39	10	( uint64 ) tif -> tif_rawcc <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU
COND_EXPR	163:39	163:102	11	( uint64 ) tif -> tif_rawcc <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawcc : 0xFFFFFFFFU
CONDITION	163:39	163:65	12	( uint64 ) tif -> tif_rawcc <= 0xFFFFFFFFU
LEAF_NODE	163:39	163:39	13	(
TYPE_NAME	163:40	163:40	13	uint64
LEAF_NODE	163:40	163:40	14	uint64
LEAF_NODE	163:46	163:46	13	)
FIELD	163:47	163:52	13	tif -> tif_rawcc
LEAF_NODE	163:47	163:47	14	tif
LEAF_NODE	163:50	163:50	14	->
LEAF_NODE	163:52	163:52	14	tif_rawcc
REL_OPERATOR	163:62	163:62	13	<=
LEAF_NODE	163:62	163:62	14	<=
FIELD	163:65	163:65	13	0xFFFFFFFFU
LEAF_NODE	163:65	163:65	14	0xFFFFFFFFU
LEAF_NODE	163:77	163:77	12	?
EXPR	163:79	163:85	12	( uInt ) tif -> tif_rawcc
LEAF_NODE	163:79	163:79	13	(
TYPE_NAME	163:80	163:80	13	uInt
LEAF_NODE	163:80	163:80	14	uInt
LEAF_NODE	163:84	163:84	13	)
FIELD	163:85	163:90	13	tif -> tif_rawcc
LEAF_NODE	163:85	163:85	14	tif
LEAF_NODE	163:88	163:88	14	->
LEAF_NODE	163:90	163:90	14	tif_rawcc
LEAF_NODE	163:100	163:100	12	:
FIELD	163:102	163:102	12	0xFFFFFFFFU
LEAF_NODE	163:102	163:102	13	0xFFFFFFFFU
LEAF_NODE	163:113	163:113	7	;
SIMPLE_DECL	164:16	164:92	6	uInt avail_out_before ; avail_out_before = ( uint64 ) occ < 0xFFFFFFFFU ? ( uInt ) occ : 0xFFFFFFFFU ;
VAR_DECL	164:16	164:21	7	uInt avail_out_before ; avail_out_before = ( uint64 ) occ < 0xFFFFFFFFU ? ( uInt ) occ : 0xFFFFFFFFU
TYPE	164:16	164:16	8	uInt
TYPE_NAME	164:16	164:16	9	uInt
LEAF_NODE	164:16	164:16	10	uInt
NAME	164:21	164:21	8	avail_out_before
LEAF_NODE	164:21	164:21	9	avail_out_before
LEAF_NODE	0:0	0:0	8	;
INIT	164:21	164:21	8	avail_out_before = ( uint64 ) occ < 0xFFFFFFFFU ? ( uInt ) occ : 0xFFFFFFFFU
ASSIGN	164:21	164:40	9	avail_out_before = ( uint64 ) occ < 0xFFFFFFFFU ? ( uInt ) occ : 0xFFFFFFFFU
LVAL	164:21	164:21	10	avail_out_before
NAME	164:21	164:21	11	avail_out_before
LEAF_NODE	164:21	164:21	12	avail_out_before
ASSIGN_OP	164:38	164:38	10	=
LEAF_NODE	164:38	164:38	11	=
RVAL	164:40	164:40	10	( uint64 ) occ < 0xFFFFFFFFU ? ( uInt ) occ : 0xFFFFFFFFU
COND_EXPR	164:40	164:81	11	( uint64 ) occ < 0xFFFFFFFFU ? ( uInt ) occ : 0xFFFFFFFFU
CONDITION	164:40	164:54	12	( uint64 ) occ < 0xFFFFFFFFU
LEAF_NODE	164:40	164:40	13	(
TYPE_NAME	164:41	164:41	13	uint64
LEAF_NODE	164:41	164:41	14	uint64
LEAF_NODE	164:47	164:47	13	)
FIELD	164:48	164:48	13	occ
LEAF_NODE	164:48	164:48	14	occ
REL_OPERATOR	164:52	164:52	13	<
LEAF_NODE	164:52	164:52	14	<
FIELD	164:54	164:54	13	0xFFFFFFFFU
LEAF_NODE	164:54	164:54	14	0xFFFFFFFFU
LEAF_NODE	164:66	164:66	12	?
EXPR	164:68	164:75	12	( uInt ) occ
LEAF_NODE	164:68	164:68	13	(
TYPE_NAME	164:69	164:69	13	uInt
LEAF_NODE	164:69	164:69	14	uInt
LEAF_NODE	164:73	164:73	13	)
FIELD	164:75	164:75	13	occ
LEAF_NODE	164:75	164:75	14	occ
LEAF_NODE	164:79	164:79	12	:
FIELD	164:81	164:81	12	0xFFFFFFFFU
LEAF_NODE	164:81	164:81	13	0xFFFFFFFFU
LEAF_NODE	164:92	164:92	7	;
EXPR_STATEMENT	165:16	165:53	6	sp -> stream . avail_in = avail_in_before ;
EXPR	165:16	165:16	7	sp -> stream . avail_in = avail_in_before
ASSIGN	165:16	165:38	8	sp -> stream . avail_in = avail_in_before
LVAL	165:16	165:16	9	sp -> stream . avail_in
FIELD	165:16	165:27	10	sp -> stream . avail_in
LEAF_NODE	165:16	165:16	11	sp
LEAF_NODE	165:18	165:18	11	->
LEAF_NODE	165:20	165:20	11	stream
LEAF_NODE	165:26	165:26	11	.
LEAF_NODE	165:27	165:27	11	avail_in
ASSIGN_OP	165:36	165:36	9	=
LEAF_NODE	165:36	165:36	10	=
RVAL	165:38	165:38	9	avail_in_before
FIELD	165:38	165:38	10	avail_in_before
LEAF_NODE	165:38	165:38	11	avail_in_before
LEAF_NODE	165:53	165:53	7	;
EXPR_STATEMENT	166:16	166:55	6	sp -> stream . avail_out = avail_out_before ;
EXPR	166:16	166:16	7	sp -> stream . avail_out = avail_out_before
ASSIGN	166:16	166:39	8	sp -> stream . avail_out = avail_out_before
LVAL	166:16	166:16	9	sp -> stream . avail_out
FIELD	166:16	166:27	10	sp -> stream . avail_out
LEAF_NODE	166:16	166:16	11	sp
LEAF_NODE	166:18	166:18	11	->
LEAF_NODE	166:20	166:20	11	stream
LEAF_NODE	166:26	166:26	11	.
LEAF_NODE	166:27	166:27	11	avail_out
ASSIGN_OP	166:37	166:37	9	=
LEAF_NODE	166:37	166:37	10	=
RVAL	166:39	166:39	9	avail_out_before
FIELD	166:39	166:39	10	avail_out_before
LEAF_NODE	166:39	166:39	11	avail_out_before
LEAF_NODE	166:55	166:55	7	;
EXPR_STATEMENT	167:2	167:47	6	state = inflate ( & sp -> stream , Z_PARTIAL_FLUSH ) ;
EXPR	167:2	167:2	7	state = inflate ( & sp -> stream , Z_PARTIAL_FLUSH )
ASSIGN	167:2	167:10	8	state = inflate ( & sp -> stream , Z_PARTIAL_FLUSH )
LVAL	167:2	167:2	9	state
FIELD	167:2	167:2	10	state
LEAF_NODE	167:2	167:2	11	state
ASSIGN_OP	167:8	167:8	9	=
LEAF_NODE	167:8	167:8	10	=
RVAL	167:10	167:10	9	inflate ( & sp -> stream , Z_PARTIAL_FLUSH )
FUNCTION_CALL	167:10	167:46	10	inflate ( & sp -> stream , Z_PARTIAL_FLUSH )
CALLEE	167:10	167:10	11	inflate
LEAF_NODE	167:10	167:10	12	inflate
LEAF_NODE	167:17	167:17	11	(
ARGUMENT	167:18	167:18	11	& sp -> stream
UNARY_EXPR	167:18	167:19	12	& sp -> stream
UNARY_OPERATOR	167:18	167:18	13	&
LEAF_NODE	167:18	167:18	14	&
FIELD	167:19	167:23	13	sp -> stream
LEAF_NODE	167:19	167:19	14	sp
LEAF_NODE	167:21	167:21	14	->
LEAF_NODE	167:23	167:23	14	stream
LEAF_NODE	167:29	167:29	11	,
ARGUMENT	167:31	167:31	11	Z_PARTIAL_FLUSH
FIELD	167:31	167:31	12	Z_PARTIAL_FLUSH
LEAF_NODE	167:31	167:31	13	Z_PARTIAL_FLUSH
LEAF_NODE	167:46	167:46	11	)
LEAF_NODE	167:47	167:47	7	;
EXPR_STATEMENT	168:2	168:59	6	tif -> tif_rawcc -= ( avail_in_before - sp -> stream . avail_in ) ;
EXPR	168:2	168:2	7	tif -> tif_rawcc -= ( avail_in_before - sp -> stream . avail_in )
ASSIGN	168:2	168:20	8	tif -> tif_rawcc -= ( avail_in_before - sp -> stream . avail_in )
LVAL	168:2	168:2	9	tif -> tif_rawcc
FIELD	168:2	168:7	10	tif -> tif_rawcc
LEAF_NODE	168:2	168:2	11	tif
LEAF_NODE	168:5	168:5	11	->
LEAF_NODE	168:7	168:7	11	tif_rawcc
ASSIGN_OP	168:17	168:17	9	-=
LEAF_NODE	168:17	168:17	10	-=
RVAL	168:20	168:58	9	( avail_in_before - sp -> stream . avail_in )
LEAF_NODE	168:20	168:20	10	(
FIELD	168:21	168:21	10	avail_in_before
LEAF_NODE	168:21	168:21	11	avail_in_before
LEAF_NODE	168:37	168:37	10	-
FIELD	168:39	168:50	10	sp -> stream . avail_in
LEAF_NODE	168:39	168:39	11	sp
LEAF_NODE	168:41	168:41	11	->
LEAF_NODE	168:43	168:43	11	stream
LEAF_NODE	168:49	168:49	11	.
LEAF_NODE	168:50	168:50	11	avail_in
LEAF_NODE	168:58	168:58	10	)
LEAF_NODE	168:59	168:59	7	;
EXPR_STATEMENT	169:16	169:64	6	occ -= ( avail_out_before - sp -> stream . avail_out ) ;
EXPR	169:16	169:16	7	occ -= ( avail_out_before - sp -> stream . avail_out )
ASSIGN	169:16	169:23	8	occ -= ( avail_out_before - sp -> stream . avail_out )
LVAL	169:16	169:16	9	occ
FIELD	169:16	169:16	10	occ
LEAF_NODE	169:16	169:16	11	occ
ASSIGN_OP	169:20	169:20	9	-=
LEAF_NODE	169:20	169:20	10	-=
RVAL	169:23	169:63	9	( avail_out_before - sp -> stream . avail_out )
LEAF_NODE	169:23	169:23	10	(
FIELD	169:24	169:24	10	avail_out_before
LEAF_NODE	169:24	169:24	11	avail_out_before
LEAF_NODE	169:41	169:41	10	-
FIELD	169:43	169:54	10	sp -> stream . avail_out
LEAF_NODE	169:43	169:43	11	sp
LEAF_NODE	169:45	169:45	11	->
LEAF_NODE	169:47	169:47	11	stream
LEAF_NODE	169:53	169:53	11	.
LEAF_NODE	169:54	169:54	11	avail_out
LEAF_NODE	169:63	169:63	10	)
LEAF_NODE	169:64	169:64	7	;
SELECTION	170:2	171:3	6	
KEYWORD	170:2	170:2	7	if
LEAF_NODE	170:2	170:2	8	if
LEAF_NODE	170:5	170:5	7	(
CONDITION	170:6	170:6	7	state == Z_STREAM_END
EXPR	170:6	170:15	8	state == Z_STREAM_END
FIELD	170:6	170:6	9	state
LEAF_NODE	170:6	170:6	10	state
EQ_OPERATOR	170:12	170:12	9	==
LEAF_NODE	170:12	170:12	10	==
FIELD	170:15	170:15	9	Z_STREAM_END
LEAF_NODE	170:15	170:15	10	Z_STREAM_END
LEAF_NODE	170:27	170:27	7	)
STATEMENTS	171:3	171:3	7	
JUMP_STATEMENT	171:3	171:8	8	break DESTINATION ;
KEYWORD	171:3	171:3	9	break
LEAF_NODE	171:3	171:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	171:8	171:8	9	;
SELECTION	172:2	172:29	6	
KEYWORD	172:2	172:2	7	if
LEAF_NODE	172:2	172:2	8	if
LEAF_NODE	172:5	172:5	7	(
CONDITION	172:6	172:6	7	state == Z_DATA_ERROR
EXPR	172:6	172:15	8	state == Z_DATA_ERROR
FIELD	172:6	172:6	9	state
LEAF_NODE	172:6	172:6	10	state
EQ_OPERATOR	172:12	172:12	9	==
LEAF_NODE	172:12	172:12	10	==
FIELD	172:15	172:15	9	Z_DATA_ERROR
LEAF_NODE	172:15	172:15	10	Z_DATA_ERROR
LEAF_NODE	172:27	172:27	7	)
STATEMENTS	172:29	177:2	7	
LEAF_NODE	172:29	172:29	8	{
STATEMENTS	173:3	176:3	8	
EXPR_STATEMENT	173:3	175:51	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Decoding error at scanline %lu, %s" , ( unsigned long ) tif -> tif_row , SAFE_MSG ( sp ) ) ;
EXPR	173:3	173:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Decoding error at scanline %lu, %s" , ( unsigned long ) tif -> tif_row , SAFE_MSG ( sp ) )
FUNCTION_CALL	173:3	175:50	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Decoding error at scanline %lu, %s" , ( unsigned long ) tif -> tif_row , SAFE_MSG ( sp ) )
CALLEE	173:3	173:3	12	TIFFErrorExt
LEAF_NODE	173:3	173:3	13	TIFFErrorExt
LEAF_NODE	173:15	173:15	12	(
ARGUMENT	173:16	173:16	12	tif -> tif_clientdata
FIELD	173:16	173:21	13	tif -> tif_clientdata
LEAF_NODE	173:16	173:16	14	tif
LEAF_NODE	173:19	173:19	14	->
LEAF_NODE	173:21	173:21	14	tif_clientdata
LEAF_NODE	173:35	173:35	12	,
ARGUMENT	173:37	173:37	12	module
FIELD	173:37	173:37	13	module
LEAF_NODE	173:37	173:37	14	module
LEAF_NODE	173:43	173:43	12	,
ARGUMENT	174:7	174:7	12	"Decoding error at scanline %lu, %s"
FIELD	174:7	174:7	13	"Decoding error at scanline %lu, %s"
LEAF_NODE	174:7	174:7	14	"Decoding error at scanline %lu, %s"
LEAF_NODE	174:43	174:43	12	,
ARGUMENT	175:8	175:24	12	( unsigned long ) tif -> tif_row
LEAF_NODE	175:8	175:8	13	(
TYPE_NAME	175:9	175:18	13	unsigned long
LEAF_NODE	175:9	175:9	14	unsigned
LEAF_NODE	175:18	175:18	14	long
LEAF_NODE	175:22	175:22	13	)
FIELD	175:24	175:29	13	tif -> tif_row
LEAF_NODE	175:24	175:24	14	tif
LEAF_NODE	175:27	175:27	14	->
LEAF_NODE	175:29	175:29	14	tif_row
LEAF_NODE	175:36	175:36	12	,
ARGUMENT	175:38	175:38	12	SAFE_MSG ( sp )
FUNCTION_CALL	175:38	175:49	13	SAFE_MSG ( sp )
CALLEE	175:38	175:38	14	SAFE_MSG
LEAF_NODE	175:38	175:38	15	SAFE_MSG
LEAF_NODE	175:46	175:46	14	(
ARGUMENT	175:47	175:47	14	sp
FIELD	175:47	175:47	15	sp
LEAF_NODE	175:47	175:47	16	sp
LEAF_NODE	175:49	175:49	14	)
LEAF_NODE	175:50	175:50	12	)
LEAF_NODE	175:51	175:51	10	;
JUMP_STATEMENT	176:3	176:13	9	return ( 0 ) ;
KEYWORD	176:3	176:3	10	return
LEAF_NODE	176:3	176:3	11	return
DESTINATION	176:10	176:10	10	( 0 )
EXPR	176:10	176:12	11	( 0 )
LEAF_NODE	176:10	176:10	12	(
FIELD	176:11	176:11	12	0
LEAF_NODE	176:11	176:11	13	0
LEAF_NODE	176:12	176:12	12	)
LEAF_NODE	176:13	176:13	10	;
LEAF_NODE	177:2	177:2	8	}
SELECTION	178:2	178:21	6	
KEYWORD	178:2	178:2	7	if
LEAF_NODE	178:2	178:2	8	if
LEAF_NODE	178:5	178:5	7	(
CONDITION	178:6	178:6	7	state != Z_OK
EXPR	178:6	178:15	8	state != Z_OK
FIELD	178:6	178:6	9	state
LEAF_NODE	178:6	178:6	10	state
EQ_OPERATOR	178:12	178:12	9	!=
LEAF_NODE	178:12	178:12	10	!=
FIELD	178:15	178:15	9	Z_OK
LEAF_NODE	178:15	178:15	10	Z_OK
LEAF_NODE	178:19	178:19	7	)
STATEMENTS	178:21	182:2	7	
LEAF_NODE	178:21	178:21	8	{
STATEMENTS	179:3	181:3	8	
EXPR_STATEMENT	179:3	180:40	9	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , SAFE_MSG ( sp ) ) ;
EXPR	179:3	179:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , SAFE_MSG ( sp ) )
FUNCTION_CALL	179:3	180:39	11	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , SAFE_MSG ( sp ) )
CALLEE	179:3	179:3	12	TIFFErrorExt
LEAF_NODE	179:3	179:3	13	TIFFErrorExt
LEAF_NODE	179:15	179:15	12	(
ARGUMENT	179:16	179:16	12	tif -> tif_clientdata
FIELD	179:16	179:21	13	tif -> tif_clientdata
LEAF_NODE	179:16	179:16	14	tif
LEAF_NODE	179:19	179:19	14	->
LEAF_NODE	179:21	179:21	14	tif_clientdata
LEAF_NODE	179:35	179:35	12	,
ARGUMENT	179:37	179:37	12	module
FIELD	179:37	179:37	13	module
LEAF_NODE	179:37	179:37	14	module
LEAF_NODE	179:43	179:43	12	,
ARGUMENT	180:9	180:9	12	"ZLib error: %s"
FIELD	180:9	180:9	13	"ZLib error: %s"
LEAF_NODE	180:9	180:9	14	"ZLib error: %s"
LEAF_NODE	180:25	180:25	12	,
ARGUMENT	180:27	180:27	12	SAFE_MSG ( sp )
FUNCTION_CALL	180:27	180:38	13	SAFE_MSG ( sp )
CALLEE	180:27	180:27	14	SAFE_MSG
LEAF_NODE	180:27	180:27	15	SAFE_MSG
LEAF_NODE	180:35	180:35	14	(
ARGUMENT	180:36	180:36	14	sp
FIELD	180:36	180:36	15	sp
LEAF_NODE	180:36	180:36	16	sp
LEAF_NODE	180:38	180:38	14	)
LEAF_NODE	180:39	180:39	12	)
LEAF_NODE	180:40	180:40	10	;
JUMP_STATEMENT	181:3	181:13	9	return ( 0 ) ;
KEYWORD	181:3	181:3	10	return
LEAF_NODE	181:3	181:3	11	return
DESTINATION	181:10	181:10	10	( 0 )
EXPR	181:10	181:12	11	( 0 )
LEAF_NODE	181:10	181:10	12	(
FIELD	181:11	181:11	12	0
LEAF_NODE	181:11	181:11	13	0
LEAF_NODE	181:12	181:12	12	)
LEAF_NODE	181:13	181:13	10	;
LEAF_NODE	182:2	182:2	8	}
LEAF_NODE	183:1	183:1	5	}
LEAF_NODE	183:18	183:18	3	;
SELECTION	184:1	184:15	3	
KEYWORD	184:1	184:1	4	if
LEAF_NODE	184:1	184:1	5	if
LEAF_NODE	184:4	184:4	4	(
CONDITION	184:5	184:5	4	occ != 0
EXPR	184:5	184:12	5	occ != 0
FIELD	184:5	184:5	6	occ
LEAF_NODE	184:5	184:5	7	occ
EQ_OPERATOR	184:9	184:9	6	!=
LEAF_NODE	184:9	184:9	7	!=
FIELD	184:12	184:12	6	0
LEAF_NODE	184:12	184:12	7	0
LEAF_NODE	184:13	184:13	4	)
STATEMENTS	184:15	189:1	4	
LEAF_NODE	184:15	184:15	5	{
STATEMENTS	185:2	188:2	5	
LEAF_NODE	185:2	185:2	6	TIFFErrorExt
LEAF_NODE	185:14	185:14	6	(
LEAF_NODE	185:15	185:15	6	tif
LEAF_NODE	185:18	185:18	6	->
LEAF_NODE	185:20	185:20	6	tif_clientdata
LEAF_NODE	185:34	185:34	6	,
LEAF_NODE	185:36	185:36	6	module
LEAF_NODE	185:42	185:42	6	,
LEAF_NODE	186:6	186:6	6	"Not enough data at scanline %lu (short "
LEAF_NODE	186:48	186:48	6	TIFF_UINT64_FORMAT
LEAF_NODE	186:67	186:67	6	" bytes)"
LEAF_NODE	186:76	186:76	6	,
LEAF_NODE	187:6	187:6	6	(
LEAF_NODE	187:7	187:7	6	unsigned
LEAF_NODE	187:16	187:16	6	long
LEAF_NODE	187:20	187:20	6	)
LEAF_NODE	187:22	187:22	6	tif
LEAF_NODE	187:25	187:25	6	->
LEAF_NODE	187:27	187:27	6	tif_row
LEAF_NODE	187:34	187:34	6	,
LEAF_NODE	187:36	187:36	6	(
LEAF_NODE	187:37	187:37	6	TIFF_UINT64_T
LEAF_NODE	187:50	187:50	6	)
LEAF_NODE	187:52	187:52	6	occ
LEAF_NODE	187:55	187:55	6	)
LEAF_NODE	187:56	187:56	6	;
JUMP_STATEMENT	188:2	188:12	6	return ( 0 ) ;
KEYWORD	188:2	188:2	7	return
LEAF_NODE	188:2	188:2	8	return
DESTINATION	188:9	188:9	7	( 0 )
EXPR	188:9	188:11	8	( 0 )
LEAF_NODE	188:9	188:9	9	(
FIELD	188:10	188:10	9	0
LEAF_NODE	188:10	188:10	10	0
LEAF_NODE	188:11	188:11	9	)
LEAF_NODE	188:12	188:12	7	;
LEAF_NODE	189:1	189:1	5	}
EXPR_STATEMENT	191:8	191:43	3	tif -> tif_rawcp = sp -> stream . next_in ;
EXPR	191:8	191:8	4	tif -> tif_rawcp = sp -> stream . next_in
ASSIGN	191:8	191:25	5	tif -> tif_rawcp = sp -> stream . next_in
LVAL	191:8	191:8	6	tif -> tif_rawcp
FIELD	191:8	191:13	7	tif -> tif_rawcp
LEAF_NODE	191:8	191:8	8	tif
LEAF_NODE	191:11	191:11	8	->
LEAF_NODE	191:13	191:13	8	tif_rawcp
ASSIGN_OP	191:23	191:23	6	=
LEAF_NODE	191:23	191:23	7	=
RVAL	191:25	191:25	6	sp -> stream . next_in
FIELD	191:25	191:36	7	sp -> stream . next_in
LEAF_NODE	191:25	191:25	8	sp
LEAF_NODE	191:27	191:27	8	->
LEAF_NODE	191:29	191:29	8	stream
LEAF_NODE	191:35	191:35	8	.
LEAF_NODE	191:36	191:36	8	next_in
LEAF_NODE	191:43	191:43	4	;
JUMP_STATEMENT	193:1	193:11	3	return ( 1 ) ;
KEYWORD	193:1	193:1	4	return
LEAF_NODE	193:1	193:1	5	return
DESTINATION	193:8	193:8	4	( 1 )
EXPR	193:8	193:10	5	( 1 )
LEAF_NODE	193:8	193:8	6	(
FIELD	193:9	193:9	6	1
LEAF_NODE	193:9	193:9	7	1
LEAF_NODE	193:10	193:10	6	)
LEAF_NODE	193:11	193:11	4	;
LEAF_NODE	194:0	194:0	2	}
FUNCTION_DEF	196:0	215:0	1	
RETURN_TYPE	196:0	196:7	2	static int
LEAF_NODE	196:0	196:0	3	static
TYPE_NAME	196:7	196:7	3	int
LEAF_NODE	196:7	196:7	4	int
FUNCTION_NAME	197:0	197:0	2	ZIPSetupEncode
LEAF_NODE	197:0	197:0	3	ZIPSetupEncode
PARAMETER_LIST	197:14	197:24	2	( TIFF * tif )
LEAF_NODE	197:14	197:14	3	(
PARAMETER_DECL	197:15	197:21	3	TIFF * tif
TYPE	197:15	197:19	4	TIFF *
TYPE_NAME	197:15	197:15	5	TIFF
LEAF_NODE	197:15	197:15	6	TIFF
POINTER	197:19	197:19	5	*
LEAF_NODE	197:19	197:19	6	*
NAME	197:21	197:21	4	tif
LEAF_NODE	197:21	197:21	5	tif
LEAF_NODE	197:24	197:24	3	)
LEAF_NODE	198:0	198:0	2	{
STATEMENTS	199:1	211:3	2	
LEAF_NODE	199:1	199:1	3	static
SIMPLE_DECL	199:8	199:46	3	const char [ ] module ; module = "ZIPSetupEncode" ;
VAR_DECL	199:8	199:19	4	const char [ ] module ; module = "ZIPSetupEncode"
TYPE	199:8	199:25	5	const char [ ]
TYPE_NAME	199:8	199:14	6	const char
LEAF_NODE	199:8	199:8	7	const
LEAF_NODE	199:14	199:14	7	char
TYPE_SUFFIX	199:25	199:26	6	[ ]
LEAF_NODE	199:25	199:25	7	[
LEAF_NODE	199:26	199:26	7	]
NAME	199:19	199:19	5	module
LEAF_NODE	199:19	199:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	199:19	199:19	5	module = "ZIPSetupEncode"
ASSIGN	199:19	199:30	6	module = "ZIPSetupEncode"
LVAL	199:19	199:19	7	module
NAME	199:19	199:19	8	module
LEAF_NODE	199:19	199:19	9	module
ASSIGN_OP	199:28	199:28	7	=
LEAF_NODE	199:28	199:28	8	=
RVAL	199:30	199:30	7	"ZIPSetupEncode"
FIELD	199:30	199:30	8	"ZIPSetupEncode"
LEAF_NODE	199:30	199:30	9	"ZIPSetupEncode"
LEAF_NODE	199:46	199:46	4	;
SIMPLE_DECL	200:1	200:33	3	ZIPState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	200:1	200:11	4	ZIPState * sp ; sp = EncoderState ( tif )
TYPE	200:1	200:9	5	ZIPState *
TYPE_NAME	200:1	200:1	6	ZIPState
LEAF_NODE	200:1	200:1	7	ZIPState
POINTER	200:9	200:9	6	*
LEAF_NODE	200:9	200:9	7	*
NAME	200:11	200:11	5	sp
LEAF_NODE	200:11	200:11	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	200:11	200:11	5	sp = EncoderState ( tif )
ASSIGN	200:11	200:16	6	sp = EncoderState ( tif )
LVAL	200:11	200:11	7	sp
NAME	200:11	200:11	8	sp
LEAF_NODE	200:11	200:11	9	sp
ASSIGN_OP	200:14	200:14	7	=
LEAF_NODE	200:14	200:14	8	=
RVAL	200:16	200:16	7	EncoderState ( tif )
FUNCTION_CALL	200:16	200:32	8	EncoderState ( tif )
CALLEE	200:16	200:16	9	EncoderState
LEAF_NODE	200:16	200:16	10	EncoderState
LEAF_NODE	200:28	200:28	9	(
ARGUMENT	200:29	200:29	9	tif
FIELD	200:29	200:29	10	tif
LEAF_NODE	200:29	200:29	11	tif
LEAF_NODE	200:32	200:32	9	)
LEAF_NODE	200:33	200:33	4	;
EXPR_STATEMENT	202:1	202:19	3	assert ( sp != NULL ) ;
EXPR	202:1	202:1	4	assert ( sp != NULL )
FUNCTION_CALL	202:1	202:18	5	assert ( sp != NULL )
CALLEE	202:1	202:1	6	assert
LEAF_NODE	202:1	202:1	7	assert
LEAF_NODE	202:7	202:7	6	(
ARGUMENT	202:8	202:14	6	sp != NULL
FIELD	202:8	202:8	7	sp
LEAF_NODE	202:8	202:8	8	sp
EQ_OPERATOR	202:11	202:11	7	!=
LEAF_NODE	202:11	202:11	8	!=
FIELD	202:14	202:14	7	NULL
LEAF_NODE	202:14	202:14	8	NULL
LEAF_NODE	202:18	202:18	6	)
LEAF_NODE	202:19	202:19	4	;
SELECTION	203:1	203:37	3	
KEYWORD	203:1	203:1	4	if
LEAF_NODE	203:1	203:1	5	if
LEAF_NODE	203:4	203:4	4	(
CONDITION	203:5	203:5	4	sp -> state & ZSTATE_INIT_DECODE
EXPR	203:5	203:17	5	sp -> state & ZSTATE_INIT_DECODE
FIELD	203:5	203:9	6	sp -> state
LEAF_NODE	203:5	203:5	7	sp
LEAF_NODE	203:7	203:7	7	->
LEAF_NODE	203:9	203:9	7	state
LEAF_NODE	203:15	203:15	6	&
FIELD	203:17	203:17	6	ZSTATE_INIT_DECODE
LEAF_NODE	203:17	203:17	7	ZSTATE_INIT_DECODE
LEAF_NODE	203:35	203:35	4	)
STATEMENTS	203:37	206:1	4	
LEAF_NODE	203:37	203:37	5	{
STATEMENTS	204:2	205:2	5	
EXPR_STATEMENT	204:2	204:25	6	inflateEnd ( & sp -> stream ) ;
EXPR	204:2	204:2	7	inflateEnd ( & sp -> stream )
FUNCTION_CALL	204:2	204:24	8	inflateEnd ( & sp -> stream )
CALLEE	204:2	204:2	9	inflateEnd
LEAF_NODE	204:2	204:2	10	inflateEnd
LEAF_NODE	204:12	204:12	9	(
ARGUMENT	204:13	204:13	9	& sp -> stream
UNARY_EXPR	204:13	204:14	10	& sp -> stream
UNARY_OPERATOR	204:13	204:13	11	&
LEAF_NODE	204:13	204:13	12	&
FIELD	204:14	204:18	11	sp -> stream
LEAF_NODE	204:14	204:14	12	sp
LEAF_NODE	204:16	204:16	12	->
LEAF_NODE	204:18	204:18	12	stream
LEAF_NODE	204:24	204:24	9	)
LEAF_NODE	204:25	204:25	7	;
EXPR_STATEMENT	205:2	205:15	6	sp -> state = 0 ;
EXPR	205:2	205:2	7	sp -> state = 0
ASSIGN	205:2	205:14	8	sp -> state = 0
LVAL	205:2	205:2	9	sp -> state
FIELD	205:2	205:6	10	sp -> state
LEAF_NODE	205:2	205:2	11	sp
LEAF_NODE	205:4	205:4	11	->
LEAF_NODE	205:6	205:6	11	state
ASSIGN_OP	205:12	205:12	9	=
LEAF_NODE	205:12	205:12	10	=
RVAL	205:14	205:14	9	0
FIELD	205:14	205:14	10	0
LEAF_NODE	205:14	205:14	11	0
LEAF_NODE	205:15	205:15	7	;
LEAF_NODE	206:1	206:1	5	}
SELECTION	208:1	208:55	3	
KEYWORD	208:1	208:1	4	if
LEAF_NODE	208:1	208:1	5	if
LEAF_NODE	208:4	208:4	4	(
CONDITION	208:5	208:5	4	deflateInit ( & sp -> stream , sp -> zipquality ) != Z_OK
EXPR	208:5	208:49	5	deflateInit ( & sp -> stream , sp -> zipquality ) != Z_OK
FUNCTION_CALL	208:5	208:44	6	deflateInit ( & sp -> stream , sp -> zipquality )
CALLEE	208:5	208:5	7	deflateInit
LEAF_NODE	208:5	208:5	8	deflateInit
LEAF_NODE	208:16	208:16	7	(
ARGUMENT	208:17	208:17	7	& sp -> stream
UNARY_EXPR	208:17	208:18	8	& sp -> stream
UNARY_OPERATOR	208:17	208:17	9	&
LEAF_NODE	208:17	208:17	10	&
FIELD	208:18	208:22	9	sp -> stream
LEAF_NODE	208:18	208:18	10	sp
LEAF_NODE	208:20	208:20	10	->
LEAF_NODE	208:22	208:22	10	stream
LEAF_NODE	208:28	208:28	7	,
ARGUMENT	208:30	208:30	7	sp -> zipquality
FIELD	208:30	208:34	8	sp -> zipquality
LEAF_NODE	208:30	208:30	9	sp
LEAF_NODE	208:32	208:32	9	->
LEAF_NODE	208:34	208:34	9	zipquality
LEAF_NODE	208:44	208:44	7	)
EQ_OPERATOR	208:46	208:46	6	!=
LEAF_NODE	208:46	208:46	7	!=
FIELD	208:49	208:49	6	Z_OK
LEAF_NODE	208:49	208:49	7	Z_OK
LEAF_NODE	208:53	208:53	4	)
STATEMENTS	208:55	211:1	4	
LEAF_NODE	208:55	208:55	5	{
STATEMENTS	209:2	210:2	5	
EXPR_STATEMENT	209:2	209:63	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , SAFE_MSG ( sp ) ) ;
EXPR	209:2	209:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , SAFE_MSG ( sp ) )
FUNCTION_CALL	209:2	209:62	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%s" , SAFE_MSG ( sp ) )
CALLEE	209:2	209:2	9	TIFFErrorExt
LEAF_NODE	209:2	209:2	10	TIFFErrorExt
LEAF_NODE	209:14	209:14	9	(
ARGUMENT	209:15	209:15	9	tif -> tif_clientdata
FIELD	209:15	209:20	10	tif -> tif_clientdata
LEAF_NODE	209:15	209:15	11	tif
LEAF_NODE	209:18	209:18	11	->
LEAF_NODE	209:20	209:20	11	tif_clientdata
LEAF_NODE	209:34	209:34	9	,
ARGUMENT	209:36	209:36	9	module
FIELD	209:36	209:36	10	module
LEAF_NODE	209:36	209:36	11	module
LEAF_NODE	209:42	209:42	9	,
ARGUMENT	209:44	209:44	9	"%s"
FIELD	209:44	209:44	10	"%s"
LEAF_NODE	209:44	209:44	11	"%s"
LEAF_NODE	209:48	209:48	9	,
ARGUMENT	209:50	209:50	9	SAFE_MSG ( sp )
FUNCTION_CALL	209:50	209:61	10	SAFE_MSG ( sp )
CALLEE	209:50	209:50	11	SAFE_MSG
LEAF_NODE	209:50	209:50	12	SAFE_MSG
LEAF_NODE	209:58	209:58	11	(
ARGUMENT	209:59	209:59	11	sp
FIELD	209:59	209:59	12	sp
LEAF_NODE	209:59	209:59	13	sp
LEAF_NODE	209:61	209:61	11	)
LEAF_NODE	209:62	209:62	9	)
LEAF_NODE	209:63	209:63	7	;
JUMP_STATEMENT	210:2	210:12	6	return ( 0 ) ;
KEYWORD	210:2	210:2	7	return
LEAF_NODE	210:2	210:2	8	return
DESTINATION	210:9	210:9	7	( 0 )
EXPR	210:9	210:11	8	( 0 )
LEAF_NODE	210:9	210:9	9	(
FIELD	210:10	210:10	9	0
LEAF_NODE	210:10	210:10	10	0
LEAF_NODE	210:11	210:11	9	)
LEAF_NODE	210:12	210:12	7	;
LEAF_NODE	211:1	211:1	5	}
SELECTION	211:3	211:8	3	
KEYWORD	211:3	211:3	4	else
LEAF_NODE	211:3	211:3	5	else
STATEMENTS	211:8	214:1	4	
LEAF_NODE	211:8	211:8	5	{
STATEMENTS	212:2	213:2	5	
EXPR_STATEMENT	212:2	212:33	6	sp -> state |= ZSTATE_INIT_ENCODE ;
EXPR	212:2	212:2	7	sp -> state |= ZSTATE_INIT_ENCODE
ASSIGN	212:2	212:15	8	sp -> state |= ZSTATE_INIT_ENCODE
LVAL	212:2	212:2	9	sp -> state
FIELD	212:2	212:6	10	sp -> state
LEAF_NODE	212:2	212:2	11	sp
LEAF_NODE	212:4	212:4	11	->
LEAF_NODE	212:6	212:6	11	state
ASSIGN_OP	212:12	212:12	9	|=
LEAF_NODE	212:12	212:12	10	|=
RVAL	212:15	212:15	9	ZSTATE_INIT_ENCODE
FIELD	212:15	212:15	10	ZSTATE_INIT_ENCODE
LEAF_NODE	212:15	212:15	11	ZSTATE_INIT_ENCODE
LEAF_NODE	212:33	212:33	7	;
JUMP_STATEMENT	213:2	213:12	6	return ( 1 ) ;
KEYWORD	213:2	213:2	7	return
LEAF_NODE	213:2	213:2	8	return
DESTINATION	213:9	213:9	7	( 1 )
EXPR	213:9	213:11	8	( 1 )
LEAF_NODE	213:9	213:9	9	(
FIELD	213:10	213:10	9	1
LEAF_NODE	213:10	213:10	10	1
LEAF_NODE	213:11	213:11	9	)
LEAF_NODE	213:12	213:12	7	;
LEAF_NODE	214:1	214:1	5	}
LEAF_NODE	215:0	215:0	2	}
FUNCTION_DEF	220:0	237:0	1	
RETURN_TYPE	220:0	220:7	2	static int
LEAF_NODE	220:0	220:0	3	static
TYPE_NAME	220:7	220:7	3	int
LEAF_NODE	220:7	220:7	4	int
FUNCTION_NAME	221:0	221:0	2	ZIPPreEncode
LEAF_NODE	221:0	221:0	3	ZIPPreEncode
PARAMETER_LIST	221:12	221:32	2	( TIFF * tif , uint16 s )
LEAF_NODE	221:12	221:12	3	(
PARAMETER_DECL	221:13	221:19	3	TIFF * tif
TYPE	221:13	221:17	4	TIFF *
TYPE_NAME	221:13	221:13	5	TIFF
LEAF_NODE	221:13	221:13	6	TIFF
POINTER	221:17	221:17	5	*
LEAF_NODE	221:17	221:17	6	*
NAME	221:19	221:19	4	tif
LEAF_NODE	221:19	221:19	5	tif
LEAF_NODE	221:22	221:22	3	,
PARAMETER_DECL	221:24	221:31	3	uint16 s
TYPE	221:24	221:24	4	uint16
TYPE_NAME	221:24	221:24	5	uint16
LEAF_NODE	221:24	221:24	6	uint16
NAME	221:31	221:31	4	s
LEAF_NODE	221:31	221:31	5	s
LEAF_NODE	221:32	221:32	3	)
LEAF_NODE	222:0	222:0	2	{
STATEMENTS	223:1	236:1	2	
SIMPLE_DECL	223:1	223:33	3	ZIPState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	223:1	223:11	4	ZIPState * sp ; sp = EncoderState ( tif )
TYPE	223:1	223:10	5	ZIPState *
TYPE_NAME	223:1	223:1	6	ZIPState
LEAF_NODE	223:1	223:1	7	ZIPState
POINTER	223:10	223:10	6	*
LEAF_NODE	223:10	223:10	7	*
NAME	223:11	223:11	5	sp
LEAF_NODE	223:11	223:11	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	223:11	223:11	5	sp = EncoderState ( tif )
ASSIGN	223:11	223:16	6	sp = EncoderState ( tif )
LVAL	223:11	223:11	7	sp
NAME	223:11	223:11	8	sp
LEAF_NODE	223:11	223:11	9	sp
ASSIGN_OP	223:14	223:14	7	=
LEAF_NODE	223:14	223:14	8	=
RVAL	223:16	223:16	7	EncoderState ( tif )
FUNCTION_CALL	223:16	223:32	8	EncoderState ( tif )
CALLEE	223:16	223:16	9	EncoderState
LEAF_NODE	223:16	223:16	10	EncoderState
LEAF_NODE	223:28	223:28	9	(
ARGUMENT	223:29	223:29	9	tif
FIELD	223:29	223:29	10	tif
LEAF_NODE	223:29	223:29	11	tif
LEAF_NODE	223:32	223:32	9	)
LEAF_NODE	223:33	223:33	4	;
EXPR_STATEMENT	225:1	225:9	3	( void ) s ;
EXPR	225:1	225:8	4	( void ) s
LEAF_NODE	225:1	225:1	5	(
TYPE_NAME	225:2	225:2	5	void
LEAF_NODE	225:2	225:2	6	void
LEAF_NODE	225:6	225:6	5	)
FIELD	225:8	225:8	5	s
LEAF_NODE	225:8	225:8	6	s
LEAF_NODE	225:9	225:9	4	;
EXPR_STATEMENT	226:1	226:19	3	assert ( sp != NULL ) ;
EXPR	226:1	226:1	4	assert ( sp != NULL )
FUNCTION_CALL	226:1	226:18	5	assert ( sp != NULL )
CALLEE	226:1	226:1	6	assert
LEAF_NODE	226:1	226:1	7	assert
LEAF_NODE	226:7	226:7	6	(
ARGUMENT	226:8	226:14	6	sp != NULL
FIELD	226:8	226:8	7	sp
LEAF_NODE	226:8	226:8	8	sp
EQ_OPERATOR	226:11	226:11	7	!=
LEAF_NODE	226:11	226:11	8	!=
FIELD	226:14	226:14	7	NULL
LEAF_NODE	226:14	226:14	8	NULL
LEAF_NODE	226:18	226:18	6	)
LEAF_NODE	226:19	226:19	4	;
SELECTION	227:1	228:12	3	
KEYWORD	227:1	227:1	4	if
LEAF_NODE	227:1	227:1	5	if
LEAF_NODE	227:3	227:3	4	(
CONDITION	227:5	227:5	4	sp -> state != ZSTATE_INIT_ENCODE
EXPR	227:5	227:18	5	sp -> state != ZSTATE_INIT_ENCODE
FIELD	227:5	227:9	6	sp -> state
LEAF_NODE	227:5	227:5	7	sp
LEAF_NODE	227:7	227:7	7	->
LEAF_NODE	227:9	227:9	7	state
EQ_OPERATOR	227:15	227:15	6	!=
LEAF_NODE	227:15	227:15	7	!=
FIELD	227:18	227:18	6	ZSTATE_INIT_ENCODE
LEAF_NODE	227:18	227:18	7	ZSTATE_INIT_ENCODE
LEAF_NODE	227:37	227:37	4	)
STATEMENTS	228:12	228:12	4	
EXPR_STATEMENT	228:12	228:39	5	tif -> tif_setupencode ( tif ) ;
EXPR	228:12	228:12	6	tif -> tif_setupencode ( tif )
FUNCTION_CALL	228:12	228:38	7	tif -> tif_setupencode ( tif )
CALLEE	228:12	228:17	8	tif -> tif_setupencode
LEAF_NODE	228:12	228:12	9	tif
LEAF_NODE	228:15	228:15	9	->
LEAF_NODE	228:17	228:17	9	tif_setupencode
LEAF_NODE	228:32	228:32	8	(
ARGUMENT	228:34	228:34	8	tif
FIELD	228:34	228:34	9	tif
LEAF_NODE	228:34	228:34	10	tif
LEAF_NODE	228:38	228:38	8	)
LEAF_NODE	228:39	228:39	6	;
EXPR_STATEMENT	230:1	230:39	3	sp -> stream . next_out = tif -> tif_rawdata ;
EXPR	230:1	230:1	4	sp -> stream . next_out = tif -> tif_rawdata
ASSIGN	230:1	230:23	5	sp -> stream . next_out = tif -> tif_rawdata
LVAL	230:1	230:1	6	sp -> stream . next_out
FIELD	230:1	230:12	7	sp -> stream . next_out
LEAF_NODE	230:1	230:1	8	sp
LEAF_NODE	230:3	230:3	8	->
LEAF_NODE	230:5	230:5	8	stream
LEAF_NODE	230:11	230:11	8	.
LEAF_NODE	230:12	230:12	8	next_out
ASSIGN_OP	230:21	230:21	6	=
LEAF_NODE	230:21	230:21	7	=
RVAL	230:23	230:23	6	tif -> tif_rawdata
FIELD	230:23	230:28	7	tif -> tif_rawdata
LEAF_NODE	230:23	230:23	8	tif
LEAF_NODE	230:26	230:26	8	->
LEAF_NODE	230:28	230:28	8	tif_rawdata
LEAF_NODE	230:39	230:39	4	;
EXPR_STATEMENT	231:1	231:40	3	assert ( sizeof ( sp -> stream . avail_out ) == 4 ) ;
EXPR	231:1	231:1	4	assert ( sizeof ( sp -> stream . avail_out ) == 4 )
FUNCTION_CALL	231:1	231:39	5	assert ( sizeof ( sp -> stream . avail_out ) == 4 )
CALLEE	231:1	231:1	6	assert
LEAF_NODE	231:1	231:1	7	assert
LEAF_NODE	231:7	231:7	6	(
ARGUMENT	231:8	231:38	6	sizeof ( sp -> stream . avail_out ) == 4
FUNCTION_CALL	231:8	231:35	7	sizeof ( sp -> stream . avail_out )
CALLEE	231:8	231:8	8	sizeof
LEAF_NODE	231:8	231:8	9	sizeof
LEAF_NODE	231:14	231:14	8	(
ARGUMENT	231:15	231:15	8	sp -> stream . avail_out
FIELD	231:15	231:26	9	sp -> stream . avail_out
LEAF_NODE	231:15	231:15	10	sp
LEAF_NODE	231:17	231:17	10	->
LEAF_NODE	231:19	231:19	10	stream
LEAF_NODE	231:25	231:25	10	.
LEAF_NODE	231:26	231:26	10	avail_out
LEAF_NODE	231:35	231:35	8	)
EQ_OPERATOR	231:36	231:36	7	==
LEAF_NODE	231:36	231:36	8	==
FIELD	231:38	231:38	7	4
LEAF_NODE	231:38	231:38	8	4
LEAF_NODE	231:39	231:39	6	)
LEAF_NODE	231:40	231:40	4	;
EXPR_STATEMENT	235:1	235:110	3	sp -> stream . avail_out = ( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU ;
EXPR	235:1	235:1	4	sp -> stream . avail_out = ( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
ASSIGN	235:1	235:24	5	sp -> stream . avail_out = ( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
LVAL	235:1	235:1	6	sp -> stream . avail_out
FIELD	235:1	235:12	7	sp -> stream . avail_out
LEAF_NODE	235:1	235:1	8	sp
LEAF_NODE	235:3	235:3	8	->
LEAF_NODE	235:5	235:5	8	stream
LEAF_NODE	235:11	235:11	8	.
LEAF_NODE	235:12	235:12	8	avail_out
ASSIGN_OP	235:22	235:22	6	=
LEAF_NODE	235:22	235:22	7	=
RVAL	235:24	235:24	6	( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
COND_EXPR	235:24	235:99	7	( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
CONDITION	235:24	235:56	8	( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU
LEAF_NODE	235:24	235:24	9	(
TYPE_NAME	235:25	235:25	9	uint64
LEAF_NODE	235:25	235:25	10	uint64
LEAF_NODE	235:31	235:31	9	)
FIELD	235:32	235:37	9	tif -> tif_rawdatasize
LEAF_NODE	235:32	235:32	10	tif
LEAF_NODE	235:35	235:35	10	->
LEAF_NODE	235:37	235:37	10	tif_rawdatasize
REL_OPERATOR	235:53	235:53	9	<=
LEAF_NODE	235:53	235:53	10	<=
FIELD	235:56	235:56	9	0xFFFFFFFFU
LEAF_NODE	235:56	235:56	10	0xFFFFFFFFU
LEAF_NODE	235:68	235:68	8	?
EXPR	235:70	235:76	8	( uInt ) tif -> tif_rawdatasize
LEAF_NODE	235:70	235:70	9	(
TYPE_NAME	235:71	235:71	9	uInt
LEAF_NODE	235:71	235:71	10	uInt
LEAF_NODE	235:75	235:75	9	)
FIELD	235:76	235:81	9	tif -> tif_rawdatasize
LEAF_NODE	235:76	235:76	10	tif
LEAF_NODE	235:79	235:79	10	->
LEAF_NODE	235:81	235:81	10	tif_rawdatasize
LEAF_NODE	235:97	235:97	8	:
FIELD	235:99	235:99	8	0xFFFFFFFFU
LEAF_NODE	235:99	235:99	9	0xFFFFFFFFU
LEAF_NODE	235:110	235:110	4	;
JUMP_STATEMENT	236:1	236:43	3	return ( deflateReset ( & sp -> stream ) == Z_OK ) ;
KEYWORD	236:1	236:1	4	return
LEAF_NODE	236:1	236:1	5	return
DESTINATION	236:8	236:8	4	( deflateReset ( & sp -> stream ) == Z_OK )
EXPR	236:8	236:42	5	( deflateReset ( & sp -> stream ) == Z_OK )
LEAF_NODE	236:8	236:8	6	(
FUNCTION_CALL	236:9	236:33	6	deflateReset ( & sp -> stream )
CALLEE	236:9	236:9	7	deflateReset
LEAF_NODE	236:9	236:9	8	deflateReset
LEAF_NODE	236:21	236:21	7	(
ARGUMENT	236:22	236:22	7	& sp -> stream
UNARY_EXPR	236:22	236:23	8	& sp -> stream
UNARY_OPERATOR	236:22	236:22	9	&
LEAF_NODE	236:22	236:22	10	&
FIELD	236:23	236:27	9	sp -> stream
LEAF_NODE	236:23	236:23	10	sp
LEAF_NODE	236:25	236:25	10	->
LEAF_NODE	236:27	236:27	10	stream
LEAF_NODE	236:33	236:33	7	)
EQ_OPERATOR	236:35	236:35	6	==
LEAF_NODE	236:35	236:35	7	==
FIELD	236:38	236:38	6	Z_OK
LEAF_NODE	236:38	236:38	7	Z_OK
LEAF_NODE	236:42	236:42	6	)
LEAF_NODE	236:43	236:43	4	;
LEAF_NODE	237:0	237:0	2	}
FUNCTION_DEF	242:0	275:0	1	
RETURN_TYPE	242:0	242:7	2	static int
LEAF_NODE	242:0	242:0	3	static
TYPE_NAME	242:7	242:7	3	int
LEAF_NODE	242:7	242:7	4	int
FUNCTION_NAME	243:0	243:0	2	ZIPEncode
LEAF_NODE	243:0	243:0	3	ZIPEncode
PARAMETER_LIST	243:9	243:53	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	243:9	243:9	3	(
PARAMETER_DECL	243:10	243:16	3	TIFF * tif
TYPE	243:10	243:14	4	TIFF *
TYPE_NAME	243:10	243:10	5	TIFF
LEAF_NODE	243:10	243:10	6	TIFF
POINTER	243:14	243:14	5	*
LEAF_NODE	243:14	243:14	6	*
NAME	243:16	243:16	4	tif
LEAF_NODE	243:16	243:16	5	tif
LEAF_NODE	243:19	243:19	3	,
PARAMETER_DECL	243:21	243:28	3	uint8 * bp
TYPE	243:21	243:26	4	uint8 *
TYPE_NAME	243:21	243:21	5	uint8
LEAF_NODE	243:21	243:21	6	uint8
POINTER	243:26	243:26	5	*
LEAF_NODE	243:26	243:26	6	*
NAME	243:28	243:28	4	bp
LEAF_NODE	243:28	243:28	5	bp
LEAF_NODE	243:30	243:30	3	,
PARAMETER_DECL	243:32	243:41	3	tmsize_t cc
TYPE	243:32	243:32	4	tmsize_t
TYPE_NAME	243:32	243:32	5	tmsize_t
LEAF_NODE	243:32	243:32	6	tmsize_t
NAME	243:41	243:41	4	cc
LEAF_NODE	243:41	243:41	5	cc
LEAF_NODE	243:43	243:43	3	,
PARAMETER_DECL	243:45	243:52	3	uint16 s
TYPE	243:45	243:45	4	uint16
TYPE_NAME	243:45	243:45	5	uint16
LEAF_NODE	243:45	243:45	6	uint16
NAME	243:52	243:52	4	s
LEAF_NODE	243:52	243:52	5	s
LEAF_NODE	243:53	243:53	3	)
LEAF_NODE	244:0	244:0	2	{
STATEMENTS	245:1	274:1	2	
LEAF_NODE	245:1	245:1	3	static
SIMPLE_DECL	245:8	245:41	3	const char [ ] module ; module = "ZIPEncode" ;
VAR_DECL	245:8	245:19	4	const char [ ] module ; module = "ZIPEncode"
TYPE	245:8	245:25	5	const char [ ]
TYPE_NAME	245:8	245:14	6	const char
LEAF_NODE	245:8	245:8	7	const
LEAF_NODE	245:14	245:14	7	char
TYPE_SUFFIX	245:25	245:26	6	[ ]
LEAF_NODE	245:25	245:25	7	[
LEAF_NODE	245:26	245:26	7	]
NAME	245:19	245:19	5	module
LEAF_NODE	245:19	245:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	245:19	245:19	5	module = "ZIPEncode"
ASSIGN	245:19	245:30	6	module = "ZIPEncode"
LVAL	245:19	245:19	7	module
NAME	245:19	245:19	8	module
LEAF_NODE	245:19	245:19	9	module
ASSIGN_OP	245:28	245:28	7	=
LEAF_NODE	245:28	245:28	8	=
RVAL	245:30	245:30	7	"ZIPEncode"
FIELD	245:30	245:30	8	"ZIPEncode"
LEAF_NODE	245:30	245:30	9	"ZIPEncode"
LEAF_NODE	245:41	245:41	4	;
SIMPLE_DECL	246:1	246:33	3	ZIPState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	246:1	246:11	4	ZIPState * sp ; sp = EncoderState ( tif )
TYPE	246:1	246:10	5	ZIPState *
TYPE_NAME	246:1	246:1	6	ZIPState
LEAF_NODE	246:1	246:1	7	ZIPState
POINTER	246:10	246:10	6	*
LEAF_NODE	246:10	246:10	7	*
NAME	246:11	246:11	5	sp
LEAF_NODE	246:11	246:11	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	246:11	246:11	5	sp = EncoderState ( tif )
ASSIGN	246:11	246:16	6	sp = EncoderState ( tif )
LVAL	246:11	246:11	7	sp
NAME	246:11	246:11	8	sp
LEAF_NODE	246:11	246:11	9	sp
ASSIGN_OP	246:14	246:14	7	=
LEAF_NODE	246:14	246:14	8	=
RVAL	246:16	246:16	7	EncoderState ( tif )
FUNCTION_CALL	246:16	246:32	8	EncoderState ( tif )
CALLEE	246:16	246:16	9	EncoderState
LEAF_NODE	246:16	246:16	10	EncoderState
LEAF_NODE	246:28	246:28	9	(
ARGUMENT	246:29	246:29	9	tif
FIELD	246:29	246:29	10	tif
LEAF_NODE	246:29	246:29	11	tif
LEAF_NODE	246:32	246:32	9	)
LEAF_NODE	246:33	246:33	4	;
EXPR_STATEMENT	248:1	248:19	3	assert ( sp != NULL ) ;
EXPR	248:1	248:1	4	assert ( sp != NULL )
FUNCTION_CALL	248:1	248:18	5	assert ( sp != NULL )
CALLEE	248:1	248:1	6	assert
LEAF_NODE	248:1	248:1	7	assert
LEAF_NODE	248:7	248:7	6	(
ARGUMENT	248:8	248:14	6	sp != NULL
FIELD	248:8	248:8	7	sp
LEAF_NODE	248:8	248:8	8	sp
EQ_OPERATOR	248:11	248:11	7	!=
LEAF_NODE	248:11	248:11	8	!=
FIELD	248:14	248:14	7	NULL
LEAF_NODE	248:14	248:14	8	NULL
LEAF_NODE	248:18	248:18	6	)
LEAF_NODE	248:19	248:19	4	;
EXPR_STATEMENT	249:1	249:40	3	assert ( sp -> state == ZSTATE_INIT_ENCODE ) ;
EXPR	249:1	249:1	4	assert ( sp -> state == ZSTATE_INIT_ENCODE )
FUNCTION_CALL	249:1	249:39	5	assert ( sp -> state == ZSTATE_INIT_ENCODE )
CALLEE	249:1	249:1	6	assert
LEAF_NODE	249:1	249:1	7	assert
LEAF_NODE	249:7	249:7	6	(
ARGUMENT	249:8	249:21	6	sp -> state == ZSTATE_INIT_ENCODE
FIELD	249:8	249:12	7	sp -> state
LEAF_NODE	249:8	249:8	8	sp
LEAF_NODE	249:10	249:10	8	->
LEAF_NODE	249:12	249:12	8	state
EQ_OPERATOR	249:18	249:18	7	==
LEAF_NODE	249:18	249:18	8	==
FIELD	249:21	249:21	7	ZSTATE_INIT_ENCODE
LEAF_NODE	249:21	249:21	8	ZSTATE_INIT_ENCODE
LEAF_NODE	249:39	249:39	6	)
LEAF_NODE	249:40	249:40	4	;
EXPR_STATEMENT	251:1	251:9	3	( void ) s ;
EXPR	251:1	251:8	4	( void ) s
LEAF_NODE	251:1	251:1	5	(
TYPE_NAME	251:2	251:2	5	void
LEAF_NODE	251:2	251:2	6	void
LEAF_NODE	251:6	251:6	5	)
FIELD	251:8	251:8	5	s
LEAF_NODE	251:8	251:8	6	s
LEAF_NODE	251:9	251:9	4	;
EXPR_STATEMENT	252:1	252:24	3	sp -> stream . next_in = bp ;
EXPR	252:1	252:1	4	sp -> stream . next_in = bp
ASSIGN	252:1	252:22	5	sp -> stream . next_in = bp
LVAL	252:1	252:1	6	sp -> stream . next_in
FIELD	252:1	252:12	7	sp -> stream . next_in
LEAF_NODE	252:1	252:1	8	sp
LEAF_NODE	252:3	252:3	8	->
LEAF_NODE	252:5	252:5	8	stream
LEAF_NODE	252:11	252:11	8	.
LEAF_NODE	252:12	252:12	8	next_in
ASSIGN_OP	252:20	252:20	6	=
LEAF_NODE	252:20	252:20	7	=
RVAL	252:22	252:22	6	bp
FIELD	252:22	252:22	7	bp
LEAF_NODE	252:22	252:22	8	bp
LEAF_NODE	252:24	252:24	4	;
EXPR_STATEMENT	253:1	253:39	3	assert ( sizeof ( sp -> stream . avail_in ) == 4 ) ;
EXPR	253:1	253:1	4	assert ( sizeof ( sp -> stream . avail_in ) == 4 )
FUNCTION_CALL	253:1	253:38	5	assert ( sizeof ( sp -> stream . avail_in ) == 4 )
CALLEE	253:1	253:1	6	assert
LEAF_NODE	253:1	253:1	7	assert
LEAF_NODE	253:7	253:7	6	(
ARGUMENT	253:8	253:37	6	sizeof ( sp -> stream . avail_in ) == 4
FUNCTION_CALL	253:8	253:34	7	sizeof ( sp -> stream . avail_in )
CALLEE	253:8	253:8	8	sizeof
LEAF_NODE	253:8	253:8	9	sizeof
LEAF_NODE	253:14	253:14	8	(
ARGUMENT	253:15	253:15	8	sp -> stream . avail_in
FIELD	253:15	253:26	9	sp -> stream . avail_in
LEAF_NODE	253:15	253:15	10	sp
LEAF_NODE	253:17	253:17	10	->
LEAF_NODE	253:19	253:19	10	stream
LEAF_NODE	253:25	253:25	10	.
LEAF_NODE	253:26	253:26	10	avail_in
LEAF_NODE	253:34	253:34	8	)
EQ_OPERATOR	253:35	253:35	7	==
LEAF_NODE	253:35	253:35	8	==
FIELD	253:37	253:37	7	4
LEAF_NODE	253:37	253:37	8	4
LEAF_NODE	253:38	253:38	6	)
LEAF_NODE	253:39	253:39	4	;
ITERATION	257:1	257:4	3	
KEYWORD	257:1	257:1	4	do
LEAF_NODE	257:1	257:1	5	do
LEAF_NODE	273:9	273:9	4	(
CONDITION	273:10	273:10	4	cc > 0
EXPR	273:10	273:15	5	cc > 0
FIELD	273:10	273:10	6	cc
LEAF_NODE	273:10	273:10	7	cc
REL_OPERATOR	273:13	273:13	6	>
LEAF_NODE	273:13	273:13	7	>
FIELD	273:15	273:15	6	0
LEAF_NODE	273:15	273:15	7	0
LEAF_NODE	273:16	273:16	4	)
STATEMENTS	257:4	273:1	4	
LEAF_NODE	257:4	257:4	5	{
STATEMENTS	258:16	272:2	5	
SIMPLE_DECL	258:16	258:89	6	uInt avail_in_before ; avail_in_before = ( uint64 ) cc <= 0xFFFFFFFFU ? ( uInt ) cc : 0xFFFFFFFFU ;
VAR_DECL	258:16	258:21	7	uInt avail_in_before ; avail_in_before = ( uint64 ) cc <= 0xFFFFFFFFU ? ( uInt ) cc : 0xFFFFFFFFU
TYPE	258:16	258:16	8	uInt
TYPE_NAME	258:16	258:16	9	uInt
LEAF_NODE	258:16	258:16	10	uInt
NAME	258:21	258:21	8	avail_in_before
LEAF_NODE	258:21	258:21	9	avail_in_before
LEAF_NODE	0:0	0:0	8	;
INIT	258:21	258:21	8	avail_in_before = ( uint64 ) cc <= 0xFFFFFFFFU ? ( uInt ) cc : 0xFFFFFFFFU
ASSIGN	258:21	258:39	9	avail_in_before = ( uint64 ) cc <= 0xFFFFFFFFU ? ( uInt ) cc : 0xFFFFFFFFU
LVAL	258:21	258:21	10	avail_in_before
NAME	258:21	258:21	11	avail_in_before
LEAF_NODE	258:21	258:21	12	avail_in_before
ASSIGN_OP	258:37	258:37	10	=
LEAF_NODE	258:37	258:37	11	=
RVAL	258:39	258:39	10	( uint64 ) cc <= 0xFFFFFFFFU ? ( uInt ) cc : 0xFFFFFFFFU
COND_EXPR	258:39	258:78	11	( uint64 ) cc <= 0xFFFFFFFFU ? ( uInt ) cc : 0xFFFFFFFFU
CONDITION	258:39	258:53	12	( uint64 ) cc <= 0xFFFFFFFFU
LEAF_NODE	258:39	258:39	13	(
TYPE_NAME	258:40	258:40	13	uint64
LEAF_NODE	258:40	258:40	14	uint64
LEAF_NODE	258:46	258:46	13	)
FIELD	258:47	258:47	13	cc
LEAF_NODE	258:47	258:47	14	cc
REL_OPERATOR	258:50	258:50	13	<=
LEAF_NODE	258:50	258:50	14	<=
FIELD	258:53	258:53	13	0xFFFFFFFFU
LEAF_NODE	258:53	258:53	14	0xFFFFFFFFU
LEAF_NODE	258:65	258:65	12	?
EXPR	258:67	258:73	12	( uInt ) cc
LEAF_NODE	258:67	258:67	13	(
TYPE_NAME	258:68	258:68	13	uInt
LEAF_NODE	258:68	258:68	14	uInt
LEAF_NODE	258:72	258:72	13	)
FIELD	258:73	258:73	13	cc
LEAF_NODE	258:73	258:73	14	cc
LEAF_NODE	258:76	258:76	12	:
FIELD	258:78	258:78	12	0xFFFFFFFFU
LEAF_NODE	258:78	258:78	13	0xFFFFFFFFU
LEAF_NODE	258:89	258:89	7	;
EXPR_STATEMENT	259:16	259:53	6	sp -> stream . avail_in = avail_in_before ;
EXPR	259:16	259:16	7	sp -> stream . avail_in = avail_in_before
ASSIGN	259:16	259:38	8	sp -> stream . avail_in = avail_in_before
LVAL	259:16	259:16	9	sp -> stream . avail_in
FIELD	259:16	259:27	10	sp -> stream . avail_in
LEAF_NODE	259:16	259:16	11	sp
LEAF_NODE	259:18	259:18	11	->
LEAF_NODE	259:20	259:20	11	stream
LEAF_NODE	259:26	259:26	11	.
LEAF_NODE	259:27	259:27	11	avail_in
ASSIGN_OP	259:36	259:36	9	=
LEAF_NODE	259:36	259:36	10	=
RVAL	259:38	259:38	9	avail_in_before
FIELD	259:38	259:38	10	avail_in_before
LEAF_NODE	259:38	259:38	11	avail_in_before
LEAF_NODE	259:53	259:53	7	;
SELECTION	260:2	260:48	6	
KEYWORD	260:2	260:2	7	if
LEAF_NODE	260:2	260:2	8	if
LEAF_NODE	260:5	260:5	7	(
CONDITION	260:6	260:6	7	deflate ( & sp -> stream , Z_NO_FLUSH ) != Z_OK
EXPR	260:6	260:42	8	deflate ( & sp -> stream , Z_NO_FLUSH ) != Z_OK
FUNCTION_CALL	260:6	260:37	9	deflate ( & sp -> stream , Z_NO_FLUSH )
CALLEE	260:6	260:6	10	deflate
LEAF_NODE	260:6	260:6	11	deflate
LEAF_NODE	260:13	260:13	10	(
ARGUMENT	260:14	260:14	10	& sp -> stream
UNARY_EXPR	260:14	260:15	11	& sp -> stream
UNARY_OPERATOR	260:14	260:14	12	&
LEAF_NODE	260:14	260:14	13	&
FIELD	260:15	260:19	12	sp -> stream
LEAF_NODE	260:15	260:15	13	sp
LEAF_NODE	260:17	260:17	13	->
LEAF_NODE	260:19	260:19	13	stream
LEAF_NODE	260:25	260:25	10	,
ARGUMENT	260:27	260:27	10	Z_NO_FLUSH
FIELD	260:27	260:27	11	Z_NO_FLUSH
LEAF_NODE	260:27	260:27	12	Z_NO_FLUSH
LEAF_NODE	260:37	260:37	10	)
EQ_OPERATOR	260:39	260:39	9	!=
LEAF_NODE	260:39	260:39	10	!=
FIELD	260:42	260:42	9	Z_OK
LEAF_NODE	260:42	260:42	10	Z_OK
LEAF_NODE	260:46	260:46	7	)
STATEMENTS	260:48	265:2	7	
LEAF_NODE	260:48	260:48	8	{
STATEMENTS	261:3	264:3	8	
EXPR_STATEMENT	261:3	263:22	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Encoder error: %s" , SAFE_MSG ( sp ) ) ;
EXPR	261:3	261:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Encoder error: %s" , SAFE_MSG ( sp ) )
FUNCTION_CALL	261:3	263:21	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Encoder error: %s" , SAFE_MSG ( sp ) )
CALLEE	261:3	261:3	12	TIFFErrorExt
LEAF_NODE	261:3	261:3	13	TIFFErrorExt
LEAF_NODE	261:15	261:15	12	(
ARGUMENT	261:16	261:16	12	tif -> tif_clientdata
FIELD	261:16	261:21	13	tif -> tif_clientdata
LEAF_NODE	261:16	261:16	14	tif
LEAF_NODE	261:19	261:19	14	->
LEAF_NODE	261:21	261:21	14	tif_clientdata
LEAF_NODE	261:35	261:35	12	,
ARGUMENT	261:37	261:37	12	module
FIELD	261:37	261:37	13	module
LEAF_NODE	261:37	261:37	14	module
LEAF_NODE	261:43	261:43	12	,
ARGUMENT	262:9	262:9	12	"Encoder error: %s"
FIELD	262:9	262:9	13	"Encoder error: %s"
LEAF_NODE	262:9	262:9	14	"Encoder error: %s"
LEAF_NODE	262:28	262:28	12	,
ARGUMENT	263:9	263:9	12	SAFE_MSG ( sp )
FUNCTION_CALL	263:9	263:20	13	SAFE_MSG ( sp )
CALLEE	263:9	263:9	14	SAFE_MSG
LEAF_NODE	263:9	263:9	15	SAFE_MSG
LEAF_NODE	263:17	263:17	14	(
ARGUMENT	263:18	263:18	14	sp
FIELD	263:18	263:18	15	sp
LEAF_NODE	263:18	263:18	16	sp
LEAF_NODE	263:20	263:20	14	)
LEAF_NODE	263:21	263:21	12	)
LEAF_NODE	263:22	263:22	10	;
JUMP_STATEMENT	264:3	264:13	9	return ( 0 ) ;
KEYWORD	264:3	264:3	10	return
LEAF_NODE	264:3	264:3	11	return
DESTINATION	264:10	264:10	10	( 0 )
EXPR	264:10	264:12	11	( 0 )
LEAF_NODE	264:10	264:10	12	(
FIELD	264:11	264:11	12	0
LEAF_NODE	264:11	264:11	13	0
LEAF_NODE	264:12	264:12	12	)
LEAF_NODE	264:13	264:13	10	;
LEAF_NODE	265:2	265:2	8	}
SELECTION	266:2	266:33	6	
KEYWORD	266:2	266:2	7	if
LEAF_NODE	266:2	266:2	8	if
LEAF_NODE	266:5	266:5	7	(
CONDITION	266:6	266:6	7	sp -> stream . avail_out == 0
EXPR	266:6	266:30	8	sp -> stream . avail_out == 0
FIELD	266:6	266:17	9	sp -> stream . avail_out
LEAF_NODE	266:6	266:6	10	sp
LEAF_NODE	266:8	266:8	10	->
LEAF_NODE	266:10	266:10	10	stream
LEAF_NODE	266:16	266:16	10	.
LEAF_NODE	266:17	266:17	10	avail_out
EQ_OPERATOR	266:27	266:27	9	==
LEAF_NODE	266:27	266:27	10	==
FIELD	266:30	266:30	9	0
LEAF_NODE	266:30	266:30	10	0
LEAF_NODE	266:31	266:31	7	)
STATEMENTS	266:33	271:2	7	
LEAF_NODE	266:33	266:33	8	{
STATEMENTS	267:3	270:3	8	
EXPR_STATEMENT	267:3	267:40	9	tif -> tif_rawcc = tif -> tif_rawdatasize ;
EXPR	267:3	267:3	10	tif -> tif_rawcc = tif -> tif_rawdatasize
ASSIGN	267:3	267:20	11	tif -> tif_rawcc = tif -> tif_rawdatasize
LVAL	267:3	267:3	12	tif -> tif_rawcc
FIELD	267:3	267:8	13	tif -> tif_rawcc
LEAF_NODE	267:3	267:3	14	tif
LEAF_NODE	267:6	267:6	14	->
LEAF_NODE	267:8	267:8	14	tif_rawcc
ASSIGN_OP	267:18	267:18	12	=
LEAF_NODE	267:18	267:18	13	=
RVAL	267:20	267:20	12	tif -> tif_rawdatasize
FIELD	267:20	267:25	13	tif -> tif_rawdatasize
LEAF_NODE	267:20	267:20	14	tif
LEAF_NODE	267:23	267:23	14	->
LEAF_NODE	267:25	267:25	14	tif_rawdatasize
LEAF_NODE	267:40	267:40	10	;
EXPR_STATEMENT	268:3	268:22	9	TIFFFlushData1 ( tif ) ;
EXPR	268:3	268:3	10	TIFFFlushData1 ( tif )
FUNCTION_CALL	268:3	268:21	11	TIFFFlushData1 ( tif )
CALLEE	268:3	268:3	12	TIFFFlushData1
LEAF_NODE	268:3	268:3	13	TIFFFlushData1
LEAF_NODE	268:17	268:17	12	(
ARGUMENT	268:18	268:18	12	tif
FIELD	268:18	268:18	13	tif
LEAF_NODE	268:18	268:18	14	tif
LEAF_NODE	268:21	268:21	12	)
LEAF_NODE	268:22	268:22	10	;
EXPR_STATEMENT	269:3	269:41	9	sp -> stream . next_out = tif -> tif_rawdata ;
EXPR	269:3	269:3	10	sp -> stream . next_out = tif -> tif_rawdata
ASSIGN	269:3	269:25	11	sp -> stream . next_out = tif -> tif_rawdata
LVAL	269:3	269:3	12	sp -> stream . next_out
FIELD	269:3	269:14	13	sp -> stream . next_out
LEAF_NODE	269:3	269:3	14	sp
LEAF_NODE	269:5	269:5	14	->
LEAF_NODE	269:7	269:7	14	stream
LEAF_NODE	269:13	269:13	14	.
LEAF_NODE	269:14	269:14	14	next_out
ASSIGN_OP	269:23	269:23	12	=
LEAF_NODE	269:23	269:23	13	=
RVAL	269:25	269:25	12	tif -> tif_rawdata
FIELD	269:25	269:30	13	tif -> tif_rawdata
LEAF_NODE	269:25	269:25	14	tif
LEAF_NODE	269:28	269:28	14	->
LEAF_NODE	269:30	269:30	14	tif_rawdata
LEAF_NODE	269:41	269:41	10	;
EXPR_STATEMENT	270:3	270:112	9	sp -> stream . avail_out = ( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU ;
EXPR	270:3	270:3	10	sp -> stream . avail_out = ( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
ASSIGN	270:3	270:26	11	sp -> stream . avail_out = ( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
LVAL	270:3	270:3	12	sp -> stream . avail_out
FIELD	270:3	270:14	13	sp -> stream . avail_out
LEAF_NODE	270:3	270:3	14	sp
LEAF_NODE	270:5	270:5	14	->
LEAF_NODE	270:7	270:7	14	stream
LEAF_NODE	270:13	270:13	14	.
LEAF_NODE	270:14	270:14	14	avail_out
ASSIGN_OP	270:24	270:24	12	=
LEAF_NODE	270:24	270:24	13	=
RVAL	270:26	270:26	12	( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
COND_EXPR	270:26	270:101	13	( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
CONDITION	270:26	270:58	14	( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU
LEAF_NODE	270:26	270:26	15	(
TYPE_NAME	270:27	270:27	15	uint64
LEAF_NODE	270:27	270:27	16	uint64
LEAF_NODE	270:33	270:33	15	)
FIELD	270:34	270:39	15	tif -> tif_rawdatasize
LEAF_NODE	270:34	270:34	16	tif
LEAF_NODE	270:37	270:37	16	->
LEAF_NODE	270:39	270:39	16	tif_rawdatasize
REL_OPERATOR	270:55	270:55	15	<=
LEAF_NODE	270:55	270:55	16	<=
FIELD	270:58	270:58	15	0xFFFFFFFFU
LEAF_NODE	270:58	270:58	16	0xFFFFFFFFU
LEAF_NODE	270:70	270:70	14	?
EXPR	270:72	270:78	14	( uInt ) tif -> tif_rawdatasize
LEAF_NODE	270:72	270:72	15	(
TYPE_NAME	270:73	270:73	15	uInt
LEAF_NODE	270:73	270:73	16	uInt
LEAF_NODE	270:77	270:77	15	)
FIELD	270:78	270:83	15	tif -> tif_rawdatasize
LEAF_NODE	270:78	270:78	16	tif
LEAF_NODE	270:81	270:81	16	->
LEAF_NODE	270:83	270:83	16	tif_rawdatasize
LEAF_NODE	270:99	270:99	14	:
FIELD	270:101	270:101	14	0xFFFFFFFFU
LEAF_NODE	270:101	270:101	15	0xFFFFFFFFU
LEAF_NODE	270:112	270:112	10	;
LEAF_NODE	271:2	271:2	8	}
EXPR_STATEMENT	272:2	272:47	6	cc -= ( avail_in_before - sp -> stream . avail_in ) ;
EXPR	272:2	272:2	7	cc -= ( avail_in_before - sp -> stream . avail_in )
ASSIGN	272:2	272:8	8	cc -= ( avail_in_before - sp -> stream . avail_in )
LVAL	272:2	272:2	9	cc
FIELD	272:2	272:2	10	cc
LEAF_NODE	272:2	272:2	11	cc
ASSIGN_OP	272:5	272:5	9	-=
LEAF_NODE	272:5	272:5	10	-=
RVAL	272:8	272:46	9	( avail_in_before - sp -> stream . avail_in )
LEAF_NODE	272:8	272:8	10	(
FIELD	272:9	272:9	10	avail_in_before
LEAF_NODE	272:9	272:9	11	avail_in_before
LEAF_NODE	272:25	272:25	10	-
FIELD	272:27	272:38	10	sp -> stream . avail_in
LEAF_NODE	272:27	272:27	11	sp
LEAF_NODE	272:29	272:29	11	->
LEAF_NODE	272:31	272:31	11	stream
LEAF_NODE	272:37	272:37	11	.
LEAF_NODE	272:38	272:38	11	avail_in
LEAF_NODE	272:46	272:46	10	)
LEAF_NODE	272:47	272:47	7	;
LEAF_NODE	273:1	273:1	5	}
LEAF_NODE	273:17	273:17	3	;
JUMP_STATEMENT	274:1	274:11	3	return ( 1 ) ;
KEYWORD	274:1	274:1	4	return
LEAF_NODE	274:1	274:1	5	return
DESTINATION	274:8	274:8	4	( 1 )
EXPR	274:8	274:10	5	( 1 )
LEAF_NODE	274:8	274:8	6	(
FIELD	274:9	274:9	6	1
LEAF_NODE	274:9	274:9	7	1
LEAF_NODE	274:10	274:10	6	)
LEAF_NODE	274:11	274:11	4	;
LEAF_NODE	275:0	275:0	2	}
FUNCTION_DEF	281:0	309:0	1	
RETURN_TYPE	281:0	281:7	2	static int
LEAF_NODE	281:0	281:0	3	static
TYPE_NAME	281:7	281:7	3	int
LEAF_NODE	281:7	281:7	4	int
FUNCTION_NAME	282:0	282:0	2	ZIPPostEncode
LEAF_NODE	282:0	282:0	3	ZIPPostEncode
PARAMETER_LIST	282:13	282:23	2	( TIFF * tif )
LEAF_NODE	282:13	282:13	3	(
PARAMETER_DECL	282:14	282:20	3	TIFF * tif
TYPE	282:14	282:18	4	TIFF *
TYPE_NAME	282:14	282:14	5	TIFF
LEAF_NODE	282:14	282:14	6	TIFF
POINTER	282:18	282:18	5	*
LEAF_NODE	282:18	282:18	6	*
NAME	282:20	282:20	4	tif
LEAF_NODE	282:20	282:20	5	tif
LEAF_NODE	282:23	282:23	3	)
LEAF_NODE	283:0	283:0	2	{
STATEMENTS	284:1	308:1	2	
LEAF_NODE	284:1	284:1	3	static
SIMPLE_DECL	284:8	284:45	3	const char [ ] module ; module = "ZIPPostEncode" ;
VAR_DECL	284:8	284:19	4	const char [ ] module ; module = "ZIPPostEncode"
TYPE	284:8	284:25	5	const char [ ]
TYPE_NAME	284:8	284:14	6	const char
LEAF_NODE	284:8	284:8	7	const
LEAF_NODE	284:14	284:14	7	char
TYPE_SUFFIX	284:25	284:26	6	[ ]
LEAF_NODE	284:25	284:25	7	[
LEAF_NODE	284:26	284:26	7	]
NAME	284:19	284:19	5	module
LEAF_NODE	284:19	284:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	284:19	284:19	5	module = "ZIPPostEncode"
ASSIGN	284:19	284:30	6	module = "ZIPPostEncode"
LVAL	284:19	284:19	7	module
NAME	284:19	284:19	8	module
LEAF_NODE	284:19	284:19	9	module
ASSIGN_OP	284:28	284:28	7	=
LEAF_NODE	284:28	284:28	8	=
RVAL	284:30	284:30	7	"ZIPPostEncode"
FIELD	284:30	284:30	8	"ZIPPostEncode"
LEAF_NODE	284:30	284:30	9	"ZIPPostEncode"
LEAF_NODE	284:45	284:45	4	;
SIMPLE_DECL	285:1	285:33	3	ZIPState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	285:1	285:11	4	ZIPState * sp ; sp = EncoderState ( tif )
TYPE	285:1	285:10	5	ZIPState *
TYPE_NAME	285:1	285:1	6	ZIPState
LEAF_NODE	285:1	285:1	7	ZIPState
POINTER	285:10	285:10	6	*
LEAF_NODE	285:10	285:10	7	*
NAME	285:11	285:11	5	sp
LEAF_NODE	285:11	285:11	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	285:11	285:11	5	sp = EncoderState ( tif )
ASSIGN	285:11	285:16	6	sp = EncoderState ( tif )
LVAL	285:11	285:11	7	sp
NAME	285:11	285:11	8	sp
LEAF_NODE	285:11	285:11	9	sp
ASSIGN_OP	285:14	285:14	7	=
LEAF_NODE	285:14	285:14	8	=
RVAL	285:16	285:16	7	EncoderState ( tif )
FUNCTION_CALL	285:16	285:32	8	EncoderState ( tif )
CALLEE	285:16	285:16	9	EncoderState
LEAF_NODE	285:16	285:16	10	EncoderState
LEAF_NODE	285:28	285:28	9	(
ARGUMENT	285:29	285:29	9	tif
FIELD	285:29	285:29	10	tif
LEAF_NODE	285:29	285:29	11	tif
LEAF_NODE	285:32	285:32	9	)
LEAF_NODE	285:33	285:33	4	;
SIMPLE_DECL	286:1	286:10	3	int state ;
VAR_DECL	286:1	286:5	4	int state
TYPE	286:1	286:1	5	int
TYPE_NAME	286:1	286:1	6	int
LEAF_NODE	286:1	286:1	7	int
NAME	286:5	286:5	5	state
LEAF_NODE	286:5	286:5	6	state
LEAF_NODE	286:10	286:10	4	;
EXPR_STATEMENT	288:1	288:24	3	sp -> stream . avail_in = 0 ;
EXPR	288:1	288:1	4	sp -> stream . avail_in = 0
ASSIGN	288:1	288:23	5	sp -> stream . avail_in = 0
LVAL	288:1	288:1	6	sp -> stream . avail_in
FIELD	288:1	288:12	7	sp -> stream . avail_in
LEAF_NODE	288:1	288:1	8	sp
LEAF_NODE	288:3	288:3	8	->
LEAF_NODE	288:5	288:5	8	stream
LEAF_NODE	288:11	288:11	8	.
LEAF_NODE	288:12	288:12	8	avail_in
ASSIGN_OP	288:21	288:21	6	=
LEAF_NODE	288:21	288:21	7	=
RVAL	288:23	288:23	6	0
FIELD	288:23	288:23	7	0
LEAF_NODE	288:23	288:23	8	0
LEAF_NODE	288:24	288:24	4	;
ITERATION	289:1	289:4	3	
KEYWORD	289:1	289:1	4	do
LEAF_NODE	289:1	289:1	5	do
LEAF_NODE	307:9	307:9	4	(
CONDITION	307:10	307:10	4	state != Z_STREAM_END
EXPR	307:10	307:19	5	state != Z_STREAM_END
FIELD	307:10	307:10	6	state
LEAF_NODE	307:10	307:10	7	state
EQ_OPERATOR	307:16	307:16	6	!=
LEAF_NODE	307:16	307:16	7	!=
FIELD	307:19	307:19	6	Z_STREAM_END
LEAF_NODE	307:19	307:19	7	Z_STREAM_END
LEAF_NODE	307:31	307:31	4	)
STATEMENTS	289:4	307:1	4	
LEAF_NODE	289:4	289:4	5	{
STATEMENTS	290:2	291:2	5	
EXPR_STATEMENT	290:2	290:40	6	state = deflate ( & sp -> stream , Z_FINISH ) ;
EXPR	290:2	290:2	7	state = deflate ( & sp -> stream , Z_FINISH )
ASSIGN	290:2	290:10	8	state = deflate ( & sp -> stream , Z_FINISH )
LVAL	290:2	290:2	9	state
FIELD	290:2	290:2	10	state
LEAF_NODE	290:2	290:2	11	state
ASSIGN_OP	290:8	290:8	9	=
LEAF_NODE	290:8	290:8	10	=
RVAL	290:10	290:10	9	deflate ( & sp -> stream , Z_FINISH )
FUNCTION_CALL	290:10	290:39	10	deflate ( & sp -> stream , Z_FINISH )
CALLEE	290:10	290:10	11	deflate
LEAF_NODE	290:10	290:10	12	deflate
LEAF_NODE	290:17	290:17	11	(
ARGUMENT	290:18	290:18	11	& sp -> stream
UNARY_EXPR	290:18	290:19	12	& sp -> stream
UNARY_OPERATOR	290:18	290:18	13	&
LEAF_NODE	290:18	290:18	14	&
FIELD	290:19	290:23	13	sp -> stream
LEAF_NODE	290:19	290:19	14	sp
LEAF_NODE	290:21	290:21	14	->
LEAF_NODE	290:23	290:23	14	stream
LEAF_NODE	290:29	290:29	11	,
ARGUMENT	290:31	290:31	11	Z_FINISH
FIELD	290:31	290:31	12	Z_FINISH
LEAF_NODE	290:31	290:31	13	Z_FINISH
LEAF_NODE	290:39	290:39	11	)
LEAF_NODE	290:40	290:40	7	;
SELECTION	291:2	291:17	6	
KEYWORD	291:2	291:2	7	switch
LEAF_NODE	291:2	291:2	8	switch
LEAF_NODE	291:9	291:9	7	(
CONDITION	291:10	291:10	7	state
EXPR	291:10	291:10	8	state
FIELD	291:10	291:10	9	state
LEAF_NODE	291:10	291:10	10	state
LEAF_NODE	291:15	291:15	7	)
STATEMENTS	291:17	306:2	7	
LEAF_NODE	291:17	291:17	8	{
STATEMENTS	292:2	305:3	8	
LABEL	292:2	292:19	9	case Z_STREAM_END :
LEAF_NODE	292:2	292:2	10	case
LEAF_NODE	292:7	292:7	10	Z_STREAM_END
LEAF_NODE	292:19	292:19	10	:
LABEL	293:2	293:11	9	case Z_OK :
LEAF_NODE	293:2	293:2	10	case
LEAF_NODE	293:7	293:7	10	Z_OK
LEAF_NODE	293:11	293:11	10	:
SELECTION	294:3	295:3	9	
KEYWORD	294:3	294:3	10	if
LEAF_NODE	294:3	294:3	11	if
LEAF_NODE	294:6	294:6	10	(
CONDITION	294:7	294:7	10	( tmsize_t ) sp -> stream . avail_out != tif -> tif_rawdatasize
EXPR	294:7	294:41	11	( tmsize_t ) sp -> stream . avail_out != tif -> tif_rawdatasize
LEAF_NODE	294:7	294:7	12	(
TYPE_NAME	294:8	294:8	12	tmsize_t
LEAF_NODE	294:8	294:8	13	tmsize_t
LEAF_NODE	294:16	294:16	12	)
FIELD	294:17	294:28	12	sp -> stream . avail_out
LEAF_NODE	294:17	294:17	13	sp
LEAF_NODE	294:19	294:19	13	->
LEAF_NODE	294:21	294:21	13	stream
LEAF_NODE	294:27	294:27	13	.
LEAF_NODE	294:28	294:28	13	avail_out
EQ_OPERATOR	294:38	294:38	12	!=
LEAF_NODE	294:38	294:38	13	!=
FIELD	294:41	294:46	12	tif -> tif_rawdatasize
LEAF_NODE	294:41	294:41	13	tif
LEAF_NODE	294:44	294:44	13	->
LEAF_NODE	294:46	294:46	13	tif_rawdatasize
LEAF_NODE	294:61	294:61	10	)
STATEMENTS	295:3	300:3	10	
LEAF_NODE	295:3	295:3	11	{
STATEMENTS	296:4	299:4	11	
EXPR_STATEMENT	296:4	296:65	12	tif -> tif_rawcc = tif -> tif_rawdatasize - sp -> stream . avail_out ;
EXPR	296:4	296:4	13	tif -> tif_rawcc = tif -> tif_rawdatasize - sp -> stream . avail_out
ASSIGN	296:4	296:22	14	tif -> tif_rawcc = tif -> tif_rawdatasize - sp -> stream . avail_out
LVAL	296:4	296:4	15	tif -> tif_rawcc
FIELD	296:4	296:9	16	tif -> tif_rawcc
LEAF_NODE	296:4	296:4	17	tif
LEAF_NODE	296:7	296:7	17	->
LEAF_NODE	296:9	296:9	17	tif_rawcc
ASSIGN_OP	296:19	296:19	15	=
LEAF_NODE	296:19	296:19	16	=
RVAL	296:22	296:45	15	tif -> tif_rawdatasize - sp -> stream . avail_out
FIELD	296:22	296:27	16	tif -> tif_rawdatasize
LEAF_NODE	296:22	296:22	17	tif
LEAF_NODE	296:25	296:25	17	->
LEAF_NODE	296:27	296:27	17	tif_rawdatasize
LEAF_NODE	296:43	296:43	16	-
FIELD	296:45	296:56	16	sp -> stream . avail_out
LEAF_NODE	296:45	296:45	17	sp
LEAF_NODE	296:47	296:47	17	->
LEAF_NODE	296:49	296:49	17	stream
LEAF_NODE	296:55	296:55	17	.
LEAF_NODE	296:56	296:56	17	avail_out
LEAF_NODE	296:65	296:65	13	;
EXPR_STATEMENT	297:4	297:23	12	TIFFFlushData1 ( tif ) ;
EXPR	297:4	297:4	13	TIFFFlushData1 ( tif )
FUNCTION_CALL	297:4	297:22	14	TIFFFlushData1 ( tif )
CALLEE	297:4	297:4	15	TIFFFlushData1
LEAF_NODE	297:4	297:4	16	TIFFFlushData1
LEAF_NODE	297:18	297:18	15	(
ARGUMENT	297:19	297:19	15	tif
FIELD	297:19	297:19	16	tif
LEAF_NODE	297:19	297:19	17	tif
LEAF_NODE	297:22	297:22	15	)
LEAF_NODE	297:23	297:23	13	;
EXPR_STATEMENT	298:4	298:42	12	sp -> stream . next_out = tif -> tif_rawdata ;
EXPR	298:4	298:4	13	sp -> stream . next_out = tif -> tif_rawdata
ASSIGN	298:4	298:26	14	sp -> stream . next_out = tif -> tif_rawdata
LVAL	298:4	298:4	15	sp -> stream . next_out
FIELD	298:4	298:15	16	sp -> stream . next_out
LEAF_NODE	298:4	298:4	17	sp
LEAF_NODE	298:6	298:6	17	->
LEAF_NODE	298:8	298:8	17	stream
LEAF_NODE	298:14	298:14	17	.
LEAF_NODE	298:15	298:15	17	next_out
ASSIGN_OP	298:24	298:24	15	=
LEAF_NODE	298:24	298:24	16	=
RVAL	298:26	298:26	15	tif -> tif_rawdata
FIELD	298:26	298:31	16	tif -> tif_rawdata
LEAF_NODE	298:26	298:26	17	tif
LEAF_NODE	298:29	298:29	17	->
LEAF_NODE	298:31	298:31	17	tif_rawdata
LEAF_NODE	298:42	298:42	13	;
EXPR_STATEMENT	299:4	299:113	12	sp -> stream . avail_out = ( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU ;
EXPR	299:4	299:4	13	sp -> stream . avail_out = ( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
ASSIGN	299:4	299:27	14	sp -> stream . avail_out = ( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
LVAL	299:4	299:4	15	sp -> stream . avail_out
FIELD	299:4	299:15	16	sp -> stream . avail_out
LEAF_NODE	299:4	299:4	17	sp
LEAF_NODE	299:6	299:6	17	->
LEAF_NODE	299:8	299:8	17	stream
LEAF_NODE	299:14	299:14	17	.
LEAF_NODE	299:15	299:15	17	avail_out
ASSIGN_OP	299:25	299:25	15	=
LEAF_NODE	299:25	299:25	16	=
RVAL	299:27	299:27	15	( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
COND_EXPR	299:27	299:102	16	( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU ? ( uInt ) tif -> tif_rawdatasize : 0xFFFFFFFFU
CONDITION	299:27	299:59	17	( uint64 ) tif -> tif_rawdatasize <= 0xFFFFFFFFU
LEAF_NODE	299:27	299:27	18	(
TYPE_NAME	299:28	299:28	18	uint64
LEAF_NODE	299:28	299:28	19	uint64
LEAF_NODE	299:34	299:34	18	)
FIELD	299:35	299:40	18	tif -> tif_rawdatasize
LEAF_NODE	299:35	299:35	19	tif
LEAF_NODE	299:38	299:38	19	->
LEAF_NODE	299:40	299:40	19	tif_rawdatasize
REL_OPERATOR	299:56	299:56	18	<=
LEAF_NODE	299:56	299:56	19	<=
FIELD	299:59	299:59	18	0xFFFFFFFFU
LEAF_NODE	299:59	299:59	19	0xFFFFFFFFU
LEAF_NODE	299:71	299:71	17	?
EXPR	299:73	299:79	17	( uInt ) tif -> tif_rawdatasize
LEAF_NODE	299:73	299:73	18	(
TYPE_NAME	299:74	299:74	18	uInt
LEAF_NODE	299:74	299:74	19	uInt
LEAF_NODE	299:78	299:78	18	)
FIELD	299:79	299:84	18	tif -> tif_rawdatasize
LEAF_NODE	299:79	299:79	19	tif
LEAF_NODE	299:82	299:82	19	->
LEAF_NODE	299:84	299:84	19	tif_rawdatasize
LEAF_NODE	299:100	299:100	17	:
FIELD	299:102	299:102	17	0xFFFFFFFFU
LEAF_NODE	299:102	299:102	18	0xFFFFFFFFU
LEAF_NODE	299:113	299:113	13	;
LEAF_NODE	300:3	300:3	11	}
JUMP_STATEMENT	301:3	301:8	9	break DESTINATION ;
KEYWORD	301:3	301:3	10	break
LEAF_NODE	301:3	301:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	301:8	301:8	10	;
LABEL	302:2	302:9	9	default :
LEAF_NODE	302:2	302:2	10	default
LEAF_NODE	302:9	302:9	10	:
EXPR_STATEMENT	303:3	304:40	9	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , SAFE_MSG ( sp ) ) ;
EXPR	303:3	303:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , SAFE_MSG ( sp ) )
FUNCTION_CALL	303:3	304:39	11	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , SAFE_MSG ( sp ) )
CALLEE	303:3	303:3	12	TIFFErrorExt
LEAF_NODE	303:3	303:3	13	TIFFErrorExt
LEAF_NODE	303:15	303:15	12	(
ARGUMENT	303:16	303:16	12	tif -> tif_clientdata
FIELD	303:16	303:21	13	tif -> tif_clientdata
LEAF_NODE	303:16	303:16	14	tif
LEAF_NODE	303:19	303:19	14	->
LEAF_NODE	303:21	303:21	14	tif_clientdata
LEAF_NODE	303:35	303:35	12	,
ARGUMENT	303:37	303:37	12	module
FIELD	303:37	303:37	13	module
LEAF_NODE	303:37	303:37	14	module
LEAF_NODE	303:43	303:43	12	,
ARGUMENT	304:9	304:9	12	"ZLib error: %s"
FIELD	304:9	304:9	13	"ZLib error: %s"
LEAF_NODE	304:9	304:9	14	"ZLib error: %s"
LEAF_NODE	304:25	304:25	12	,
ARGUMENT	304:27	304:27	12	SAFE_MSG ( sp )
FUNCTION_CALL	304:27	304:38	13	SAFE_MSG ( sp )
CALLEE	304:27	304:27	14	SAFE_MSG
LEAF_NODE	304:27	304:27	15	SAFE_MSG
LEAF_NODE	304:35	304:35	14	(
ARGUMENT	304:36	304:36	14	sp
FIELD	304:36	304:36	15	sp
LEAF_NODE	304:36	304:36	16	sp
LEAF_NODE	304:38	304:38	14	)
LEAF_NODE	304:39	304:39	12	)
LEAF_NODE	304:40	304:40	10	;
JUMP_STATEMENT	305:3	305:13	9	return ( 0 ) ;
KEYWORD	305:3	305:3	10	return
LEAF_NODE	305:3	305:3	11	return
DESTINATION	305:10	305:10	10	( 0 )
EXPR	305:10	305:12	11	( 0 )
LEAF_NODE	305:10	305:10	12	(
FIELD	305:11	305:11	12	0
LEAF_NODE	305:11	305:11	13	0
LEAF_NODE	305:12	305:12	12	)
LEAF_NODE	305:13	305:13	10	;
LEAF_NODE	306:2	306:2	8	}
LEAF_NODE	307:1	307:1	5	}
LEAF_NODE	307:32	307:32	3	;
JUMP_STATEMENT	308:1	308:11	3	return ( 1 ) ;
KEYWORD	308:1	308:1	4	return
LEAF_NODE	308:1	308:1	5	return
DESTINATION	308:8	308:8	4	( 1 )
EXPR	308:8	308:10	5	( 1 )
LEAF_NODE	308:8	308:8	6	(
FIELD	308:9	308:9	6	1
LEAF_NODE	308:9	308:9	7	1
LEAF_NODE	308:10	308:10	6	)
LEAF_NODE	308:11	308:11	4	;
LEAF_NODE	309:0	309:0	2	}
FUNCTION_DEF	311:0	334:0	1	
RETURN_TYPE	311:0	311:7	2	static void
LEAF_NODE	311:0	311:0	3	static
TYPE_NAME	311:7	311:7	3	void
LEAF_NODE	311:7	311:7	4	void
FUNCTION_NAME	312:0	312:0	2	ZIPCleanup
LEAF_NODE	312:0	312:0	3	ZIPCleanup
PARAMETER_LIST	312:10	312:20	2	( TIFF * tif )
LEAF_NODE	312:10	312:10	3	(
PARAMETER_DECL	312:11	312:17	3	TIFF * tif
TYPE	312:11	312:15	4	TIFF *
TYPE_NAME	312:11	312:11	5	TIFF
LEAF_NODE	312:11	312:11	6	TIFF
POINTER	312:15	312:15	5	*
LEAF_NODE	312:15	312:15	6	*
NAME	312:17	312:17	4	tif
LEAF_NODE	312:17	312:17	5	tif
LEAF_NODE	312:20	312:20	3	)
LEAF_NODE	313:0	313:0	2	{
STATEMENTS	314:1	333:1	2	
SIMPLE_DECL	314:1	314:27	3	ZIPState * sp ; sp = ZState ( tif ) ;
VAR_DECL	314:1	314:11	4	ZIPState * sp ; sp = ZState ( tif )
TYPE	314:1	314:9	5	ZIPState *
TYPE_NAME	314:1	314:1	6	ZIPState
LEAF_NODE	314:1	314:1	7	ZIPState
POINTER	314:9	314:9	6	*
LEAF_NODE	314:9	314:9	7	*
NAME	314:11	314:11	5	sp
LEAF_NODE	314:11	314:11	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	314:11	314:11	5	sp = ZState ( tif )
ASSIGN	314:11	314:16	6	sp = ZState ( tif )
LVAL	314:11	314:11	7	sp
NAME	314:11	314:11	8	sp
LEAF_NODE	314:11	314:11	9	sp
ASSIGN_OP	314:14	314:14	7	=
LEAF_NODE	314:14	314:14	8	=
RVAL	314:16	314:16	7	ZState ( tif )
FUNCTION_CALL	314:16	314:26	8	ZState ( tif )
CALLEE	314:16	314:16	9	ZState
LEAF_NODE	314:16	314:16	10	ZState
LEAF_NODE	314:22	314:22	9	(
ARGUMENT	314:23	314:23	9	tif
FIELD	314:23	314:23	10	tif
LEAF_NODE	314:23	314:23	11	tif
LEAF_NODE	314:26	314:26	9	)
LEAF_NODE	314:27	314:27	4	;
EXPR_STATEMENT	316:1	316:16	3	assert ( sp != 0 ) ;
EXPR	316:1	316:1	4	assert ( sp != 0 )
FUNCTION_CALL	316:1	316:15	5	assert ( sp != 0 )
CALLEE	316:1	316:1	6	assert
LEAF_NODE	316:1	316:1	7	assert
LEAF_NODE	316:7	316:7	6	(
ARGUMENT	316:8	316:14	6	sp != 0
FIELD	316:8	316:8	7	sp
LEAF_NODE	316:8	316:8	8	sp
EQ_OPERATOR	316:11	316:11	7	!=
LEAF_NODE	316:11	316:11	8	!=
FIELD	316:14	316:14	7	0
LEAF_NODE	316:14	316:14	8	0
LEAF_NODE	316:15	316:15	6	)
LEAF_NODE	316:16	316:16	4	;
EXPR_STATEMENT	318:1	318:32	3	( void ) TIFFPredictorCleanup ( tif ) ;
EXPR	318:1	318:7	4	( void ) TIFFPredictorCleanup ( tif )
LEAF_NODE	318:1	318:1	5	(
TYPE_NAME	318:2	318:2	5	void
LEAF_NODE	318:2	318:2	6	void
LEAF_NODE	318:6	318:6	5	)
FUNCTION_CALL	318:7	318:31	5	TIFFPredictorCleanup ( tif )
CALLEE	318:7	318:7	6	TIFFPredictorCleanup
LEAF_NODE	318:7	318:7	7	TIFFPredictorCleanup
LEAF_NODE	318:27	318:27	6	(
ARGUMENT	318:28	318:28	6	tif
FIELD	318:28	318:28	7	tif
LEAF_NODE	318:28	318:28	8	tif
LEAF_NODE	318:31	318:31	6	)
LEAF_NODE	318:32	318:32	4	;
EXPR_STATEMENT	320:1	320:47	3	tif -> tif_tagmethods . vgetfield = sp -> vgetparent ;
EXPR	320:1	320:1	4	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
ASSIGN	320:1	320:33	5	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
LVAL	320:1	320:1	6	tif -> tif_tagmethods . vgetfield
FIELD	320:1	320:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	320:1	320:1	8	tif
LEAF_NODE	320:4	320:4	8	->
LEAF_NODE	320:6	320:6	8	tif_tagmethods
LEAF_NODE	320:20	320:20	8	.
LEAF_NODE	320:21	320:21	8	vgetfield
ASSIGN_OP	320:31	320:31	6	=
LEAF_NODE	320:31	320:31	7	=
RVAL	320:33	320:33	6	sp -> vgetparent
FIELD	320:33	320:37	7	sp -> vgetparent
LEAF_NODE	320:33	320:33	8	sp
LEAF_NODE	320:35	320:35	8	->
LEAF_NODE	320:37	320:37	8	vgetparent
LEAF_NODE	320:47	320:47	4	;
EXPR_STATEMENT	321:1	321:47	3	tif -> tif_tagmethods . vsetfield = sp -> vsetparent ;
EXPR	321:1	321:1	4	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
ASSIGN	321:1	321:33	5	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
LVAL	321:1	321:1	6	tif -> tif_tagmethods . vsetfield
FIELD	321:1	321:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	321:1	321:1	8	tif
LEAF_NODE	321:4	321:4	8	->
LEAF_NODE	321:6	321:6	8	tif_tagmethods
LEAF_NODE	321:20	321:20	8	.
LEAF_NODE	321:21	321:21	8	vsetfield
ASSIGN_OP	321:31	321:31	6	=
LEAF_NODE	321:31	321:31	7	=
RVAL	321:33	321:33	6	sp -> vsetparent
FIELD	321:33	321:37	7	sp -> vsetparent
LEAF_NODE	321:33	321:33	8	sp
LEAF_NODE	321:35	321:35	8	->
LEAF_NODE	321:37	321:37	8	vsetparent
LEAF_NODE	321:47	321:47	4	;
SELECTION	323:1	323:37	3	
KEYWORD	323:1	323:1	4	if
LEAF_NODE	323:1	323:1	5	if
LEAF_NODE	323:4	323:4	4	(
CONDITION	323:5	323:5	4	sp -> state & ZSTATE_INIT_ENCODE
EXPR	323:5	323:17	5	sp -> state & ZSTATE_INIT_ENCODE
FIELD	323:5	323:9	6	sp -> state
LEAF_NODE	323:5	323:5	7	sp
LEAF_NODE	323:7	323:7	7	->
LEAF_NODE	323:9	323:9	7	state
LEAF_NODE	323:15	323:15	6	&
FIELD	323:17	323:17	6	ZSTATE_INIT_ENCODE
LEAF_NODE	323:17	323:17	7	ZSTATE_INIT_ENCODE
LEAF_NODE	323:35	323:35	4	)
STATEMENTS	323:37	326:1	4	
LEAF_NODE	323:37	323:37	5	{
STATEMENTS	324:2	325:2	5	
EXPR_STATEMENT	324:2	324:25	6	deflateEnd ( & sp -> stream ) ;
EXPR	324:2	324:2	7	deflateEnd ( & sp -> stream )
FUNCTION_CALL	324:2	324:24	8	deflateEnd ( & sp -> stream )
CALLEE	324:2	324:2	9	deflateEnd
LEAF_NODE	324:2	324:2	10	deflateEnd
LEAF_NODE	324:12	324:12	9	(
ARGUMENT	324:13	324:13	9	& sp -> stream
UNARY_EXPR	324:13	324:14	10	& sp -> stream
UNARY_OPERATOR	324:13	324:13	11	&
LEAF_NODE	324:13	324:13	12	&
FIELD	324:14	324:18	11	sp -> stream
LEAF_NODE	324:14	324:14	12	sp
LEAF_NODE	324:16	324:16	12	->
LEAF_NODE	324:18	324:18	12	stream
LEAF_NODE	324:24	324:24	9	)
LEAF_NODE	324:25	324:25	7	;
EXPR_STATEMENT	325:2	325:15	6	sp -> state = 0 ;
EXPR	325:2	325:2	7	sp -> state = 0
ASSIGN	325:2	325:14	8	sp -> state = 0
LVAL	325:2	325:2	9	sp -> state
FIELD	325:2	325:6	10	sp -> state
LEAF_NODE	325:2	325:2	11	sp
LEAF_NODE	325:4	325:4	11	->
LEAF_NODE	325:6	325:6	11	state
ASSIGN_OP	325:12	325:12	9	=
LEAF_NODE	325:12	325:12	10	=
RVAL	325:14	325:14	9	0
FIELD	325:14	325:14	10	0
LEAF_NODE	325:14	325:14	11	0
LEAF_NODE	325:15	325:15	7	;
LEAF_NODE	326:1	326:1	5	}
SELECTION	326:3	326:8	3	
KEYWORD	326:3	326:3	4	else
LEAF_NODE	326:3	326:3	5	else
STATEMENTS	326:8	326:8	4	
SELECTION	326:8	326:44	5	
KEYWORD	326:8	326:8	6	if
LEAF_NODE	326:8	326:8	7	if
LEAF_NODE	326:10	326:10	6	(
CONDITION	326:12	326:12	6	sp -> state & ZSTATE_INIT_DECODE
EXPR	326:12	326:24	7	sp -> state & ZSTATE_INIT_DECODE
FIELD	326:12	326:16	8	sp -> state
LEAF_NODE	326:12	326:12	9	sp
LEAF_NODE	326:14	326:14	9	->
LEAF_NODE	326:16	326:16	9	state
LEAF_NODE	326:22	326:22	8	&
FIELD	326:24	326:24	8	ZSTATE_INIT_DECODE
LEAF_NODE	326:24	326:24	9	ZSTATE_INIT_DECODE
LEAF_NODE	326:42	326:42	6	)
STATEMENTS	326:44	329:1	6	
LEAF_NODE	326:44	326:44	7	{
STATEMENTS	327:2	328:2	7	
EXPR_STATEMENT	327:2	327:25	8	inflateEnd ( & sp -> stream ) ;
EXPR	327:2	327:2	9	inflateEnd ( & sp -> stream )
FUNCTION_CALL	327:2	327:24	10	inflateEnd ( & sp -> stream )
CALLEE	327:2	327:2	11	inflateEnd
LEAF_NODE	327:2	327:2	12	inflateEnd
LEAF_NODE	327:12	327:12	11	(
ARGUMENT	327:13	327:13	11	& sp -> stream
UNARY_EXPR	327:13	327:14	12	& sp -> stream
UNARY_OPERATOR	327:13	327:13	13	&
LEAF_NODE	327:13	327:13	14	&
FIELD	327:14	327:18	13	sp -> stream
LEAF_NODE	327:14	327:14	14	sp
LEAF_NODE	327:16	327:16	14	->
LEAF_NODE	327:18	327:18	14	stream
LEAF_NODE	327:24	327:24	11	)
LEAF_NODE	327:25	327:25	9	;
EXPR_STATEMENT	328:2	328:15	8	sp -> state = 0 ;
EXPR	328:2	328:2	9	sp -> state = 0
ASSIGN	328:2	328:14	10	sp -> state = 0
LVAL	328:2	328:2	11	sp -> state
FIELD	328:2	328:6	12	sp -> state
LEAF_NODE	328:2	328:2	13	sp
LEAF_NODE	328:4	328:4	13	->
LEAF_NODE	328:6	328:6	13	state
ASSIGN_OP	328:12	328:12	11	=
LEAF_NODE	328:12	328:12	12	=
RVAL	328:14	328:14	11	0
FIELD	328:14	328:14	12	0
LEAF_NODE	328:14	328:14	13	0
LEAF_NODE	328:15	328:15	9	;
LEAF_NODE	329:1	329:1	7	}
EXPR_STATEMENT	330:1	330:14	3	_TIFFfree ( sp ) ;
EXPR	330:1	330:1	4	_TIFFfree ( sp )
FUNCTION_CALL	330:1	330:13	5	_TIFFfree ( sp )
CALLEE	330:1	330:1	6	_TIFFfree
LEAF_NODE	330:1	330:1	7	_TIFFfree
LEAF_NODE	330:10	330:10	6	(
ARGUMENT	330:11	330:11	6	sp
FIELD	330:11	330:11	7	sp
LEAF_NODE	330:11	330:11	8	sp
LEAF_NODE	330:13	330:13	6	)
LEAF_NODE	330:14	330:14	4	;
EXPR_STATEMENT	331:1	331:21	3	tif -> tif_data = NULL ;
EXPR	331:1	331:1	4	tif -> tif_data = NULL
ASSIGN	331:1	331:17	5	tif -> tif_data = NULL
LVAL	331:1	331:1	6	tif -> tif_data
FIELD	331:1	331:6	7	tif -> tif_data
LEAF_NODE	331:1	331:1	8	tif
LEAF_NODE	331:4	331:4	8	->
LEAF_NODE	331:6	331:6	8	tif_data
ASSIGN_OP	331:15	331:15	6	=
LEAF_NODE	331:15	331:15	7	=
RVAL	331:17	331:17	6	NULL
FIELD	331:17	331:17	7	NULL
LEAF_NODE	331:17	331:17	8	NULL
LEAF_NODE	331:21	331:21	4	;
EXPR_STATEMENT	333:1	333:37	3	_TIFFSetDefaultCompressionState ( tif ) ;
EXPR	333:1	333:1	4	_TIFFSetDefaultCompressionState ( tif )
FUNCTION_CALL	333:1	333:36	5	_TIFFSetDefaultCompressionState ( tif )
CALLEE	333:1	333:1	6	_TIFFSetDefaultCompressionState
LEAF_NODE	333:1	333:1	7	_TIFFSetDefaultCompressionState
LEAF_NODE	333:32	333:32	6	(
ARGUMENT	333:33	333:33	6	tif
FIELD	333:33	333:33	7	tif
LEAF_NODE	333:33	333:33	8	tif
LEAF_NODE	333:36	333:36	6	)
LEAF_NODE	333:37	333:37	4	;
LEAF_NODE	334:0	334:0	2	}
FUNCTION_DEF	336:0	358:0	1	
RETURN_TYPE	336:0	336:7	2	static int
LEAF_NODE	336:0	336:0	3	static
TYPE_NAME	336:7	336:7	3	int
LEAF_NODE	336:7	336:7	4	int
FUNCTION_NAME	337:0	337:0	2	ZIPVSetField
LEAF_NODE	337:0	337:0	3	ZIPVSetField
PARAMETER_LIST	337:12	337:46	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	337:12	337:12	3	(
PARAMETER_DECL	337:13	337:19	3	TIFF * tif
TYPE	337:13	337:17	4	TIFF *
TYPE_NAME	337:13	337:13	5	TIFF
LEAF_NODE	337:13	337:13	6	TIFF
POINTER	337:17	337:17	5	*
LEAF_NODE	337:17	337:17	6	*
NAME	337:19	337:19	4	tif
LEAF_NODE	337:19	337:19	5	tif
LEAF_NODE	337:22	337:22	3	,
PARAMETER_DECL	337:24	337:31	3	uint32 tag
TYPE	337:24	337:24	4	uint32
TYPE_NAME	337:24	337:24	5	uint32
LEAF_NODE	337:24	337:24	6	uint32
NAME	337:31	337:31	4	tag
LEAF_NODE	337:31	337:31	5	tag
LEAF_NODE	337:34	337:34	3	,
PARAMETER_DECL	337:36	337:44	3	va_list ap
TYPE	337:36	337:36	4	va_list
TYPE_NAME	337:36	337:36	5	va_list
LEAF_NODE	337:36	337:36	6	va_list
NAME	337:44	337:44	4	ap
LEAF_NODE	337:44	337:44	5	ap
LEAF_NODE	337:46	337:46	3	)
LEAF_NODE	338:0	338:0	2	{
STATEMENTS	339:1	342:1	2	
LEAF_NODE	339:1	339:1	3	static
SIMPLE_DECL	339:8	339:44	3	const char [ ] module ; module = "ZIPVSetField" ;
VAR_DECL	339:8	339:19	4	const char [ ] module ; module = "ZIPVSetField"
TYPE	339:8	339:25	5	const char [ ]
TYPE_NAME	339:8	339:14	6	const char
LEAF_NODE	339:8	339:8	7	const
LEAF_NODE	339:14	339:14	7	char
TYPE_SUFFIX	339:25	339:26	6	[ ]
LEAF_NODE	339:25	339:25	7	[
LEAF_NODE	339:26	339:26	7	]
NAME	339:19	339:19	5	module
LEAF_NODE	339:19	339:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	339:19	339:19	5	module = "ZIPVSetField"
ASSIGN	339:19	339:30	6	module = "ZIPVSetField"
LVAL	339:19	339:19	7	module
NAME	339:19	339:19	8	module
LEAF_NODE	339:19	339:19	9	module
ASSIGN_OP	339:28	339:28	7	=
LEAF_NODE	339:28	339:28	8	=
RVAL	339:30	339:30	7	"ZIPVSetField"
FIELD	339:30	339:30	8	"ZIPVSetField"
LEAF_NODE	339:30	339:30	9	"ZIPVSetField"
LEAF_NODE	339:44	339:44	4	;
SIMPLE_DECL	340:1	340:27	3	ZIPState * sp ; sp = ZState ( tif ) ;
VAR_DECL	340:1	340:11	4	ZIPState * sp ; sp = ZState ( tif )
TYPE	340:1	340:9	5	ZIPState *
TYPE_NAME	340:1	340:1	6	ZIPState
LEAF_NODE	340:1	340:1	7	ZIPState
POINTER	340:9	340:9	6	*
LEAF_NODE	340:9	340:9	7	*
NAME	340:11	340:11	5	sp
LEAF_NODE	340:11	340:11	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	340:11	340:11	5	sp = ZState ( tif )
ASSIGN	340:11	340:16	6	sp = ZState ( tif )
LVAL	340:11	340:11	7	sp
NAME	340:11	340:11	8	sp
LEAF_NODE	340:11	340:11	9	sp
ASSIGN_OP	340:14	340:14	7	=
LEAF_NODE	340:14	340:14	8	=
RVAL	340:16	340:16	7	ZState ( tif )
FUNCTION_CALL	340:16	340:26	8	ZState ( tif )
CALLEE	340:16	340:16	9	ZState
LEAF_NODE	340:16	340:16	10	ZState
LEAF_NODE	340:22	340:22	9	(
ARGUMENT	340:23	340:23	9	tif
FIELD	340:23	340:23	10	tif
LEAF_NODE	340:23	340:23	11	tif
LEAF_NODE	340:26	340:26	9	)
LEAF_NODE	340:27	340:27	4	;
SELECTION	342:1	342:14	3	
KEYWORD	342:1	342:1	4	switch
LEAF_NODE	342:1	342:1	5	switch
LEAF_NODE	342:8	342:8	4	(
CONDITION	342:9	342:9	4	tag
EXPR	342:9	342:9	5	tag
FIELD	342:9	342:9	6	tag
LEAF_NODE	342:9	342:9	7	tag
LEAF_NODE	342:12	342:12	4	)
STATEMENTS	342:14	356:1	4	
LEAF_NODE	342:14	342:14	5	{
STATEMENTS	343:1	355:2	5	
LABEL	343:1	343:24	6	case TIFFTAG_ZIPQUALITY :
LEAF_NODE	343:1	343:1	7	case
LEAF_NODE	343:6	343:6	7	TIFFTAG_ZIPQUALITY
LEAF_NODE	343:24	343:24	7	:
EXPR_STATEMENT	344:2	344:40	6	sp -> zipquality = ( int ) va_arg ( ap , int ) ;
EXPR	344:2	344:2	7	sp -> zipquality = ( int ) va_arg ( ap , int )
ASSIGN	344:2	344:19	8	sp -> zipquality = ( int ) va_arg ( ap , int )
LVAL	344:2	344:2	9	sp -> zipquality
FIELD	344:2	344:6	10	sp -> zipquality
LEAF_NODE	344:2	344:2	11	sp
LEAF_NODE	344:4	344:4	11	->
LEAF_NODE	344:6	344:6	11	zipquality
ASSIGN_OP	344:17	344:17	9	=
LEAF_NODE	344:17	344:17	10	=
RVAL	344:19	344:25	9	( int ) va_arg ( ap , int )
LEAF_NODE	344:19	344:19	10	(
TYPE_NAME	344:20	344:20	10	int
LEAF_NODE	344:20	344:20	11	int
LEAF_NODE	344:23	344:23	10	)
FUNCTION_CALL	344:25	344:39	10	va_arg ( ap , int )
CALLEE	344:25	344:25	11	va_arg
LEAF_NODE	344:25	344:25	12	va_arg
LEAF_NODE	344:31	344:31	11	(
ARGUMENT	344:32	344:32	11	ap
FIELD	344:32	344:32	12	ap
LEAF_NODE	344:32	344:32	13	ap
LEAF_NODE	344:34	344:34	11	,
ARGUMENT	344:36	344:36	11	int
FIELD	344:36	344:36	12	int
LEAF_NODE	344:36	344:36	13	int
LEAF_NODE	344:39	344:39	11	)
LEAF_NODE	344:40	344:40	7	;
SELECTION	345:2	345:38	6	
KEYWORD	345:2	345:2	7	if
LEAF_NODE	345:2	345:2	8	if
LEAF_NODE	345:5	345:5	7	(
CONDITION	345:7	345:7	7	sp -> state & ZSTATE_INIT_ENCODE
EXPR	345:7	345:17	8	sp -> state & ZSTATE_INIT_ENCODE
FIELD	345:7	345:11	9	sp -> state
LEAF_NODE	345:7	345:7	10	sp
LEAF_NODE	345:9	345:9	10	->
LEAF_NODE	345:11	345:11	10	state
LEAF_NODE	345:16	345:16	9	&
FIELD	345:17	345:17	9	ZSTATE_INIT_ENCODE
LEAF_NODE	345:17	345:17	10	ZSTATE_INIT_ENCODE
LEAF_NODE	345:36	345:36	7	)
STATEMENTS	345:38	352:2	7	
LEAF_NODE	345:38	345:38	8	{
STATEMENTS	346:3	346:3	8	
SELECTION	346:3	347:52	9	
KEYWORD	346:3	346:3	10	if
LEAF_NODE	346:3	346:3	11	if
LEAF_NODE	346:6	346:6	10	(
CONDITION	346:7	346:7	10	deflateParams ( & sp -> stream , sp -> zipquality , Z_DEFAULT_STRATEGY ) != Z_OK
EXPR	346:7	347:46	11	deflateParams ( & sp -> stream , sp -> zipquality , Z_DEFAULT_STRATEGY ) != Z_OK
FUNCTION_CALL	346:7	347:41	12	deflateParams ( & sp -> stream , sp -> zipquality , Z_DEFAULT_STRATEGY )
CALLEE	346:7	346:7	13	deflateParams
LEAF_NODE	346:7	346:7	14	deflateParams
LEAF_NODE	346:20	346:20	13	(
ARGUMENT	346:21	346:21	13	& sp -> stream
UNARY_EXPR	346:21	346:22	14	& sp -> stream
UNARY_OPERATOR	346:21	346:21	15	&
LEAF_NODE	346:21	346:21	16	&
FIELD	346:22	346:26	15	sp -> stream
LEAF_NODE	346:22	346:22	16	sp
LEAF_NODE	346:24	346:24	16	->
LEAF_NODE	346:26	346:26	16	stream
LEAF_NODE	346:32	346:32	13	,
ARGUMENT	347:7	347:7	13	sp -> zipquality
FIELD	347:7	347:11	14	sp -> zipquality
LEAF_NODE	347:7	347:7	15	sp
LEAF_NODE	347:9	347:9	15	->
LEAF_NODE	347:11	347:11	15	zipquality
LEAF_NODE	347:21	347:21	13	,
ARGUMENT	347:23	347:23	13	Z_DEFAULT_STRATEGY
FIELD	347:23	347:23	14	Z_DEFAULT_STRATEGY
LEAF_NODE	347:23	347:23	15	Z_DEFAULT_STRATEGY
LEAF_NODE	347:41	347:41	13	)
EQ_OPERATOR	347:43	347:43	12	!=
LEAF_NODE	347:43	347:43	13	!=
FIELD	347:46	347:46	12	Z_OK
LEAF_NODE	347:46	347:46	13	Z_OK
LEAF_NODE	347:50	347:50	10	)
STATEMENTS	347:52	351:3	10	
LEAF_NODE	347:52	347:52	11	{
STATEMENTS	348:4	350:4	11	
EXPR_STATEMENT	348:4	349:23	12	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , SAFE_MSG ( sp ) ) ;
EXPR	348:4	348:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , SAFE_MSG ( sp ) )
FUNCTION_CALL	348:4	349:22	14	TIFFErrorExt ( tif -> tif_clientdata , module , "ZLib error: %s" , SAFE_MSG ( sp ) )
CALLEE	348:4	348:4	15	TIFFErrorExt
LEAF_NODE	348:4	348:4	16	TIFFErrorExt
LEAF_NODE	348:16	348:16	15	(
ARGUMENT	348:17	348:17	15	tif -> tif_clientdata
FIELD	348:17	348:22	16	tif -> tif_clientdata
LEAF_NODE	348:17	348:17	17	tif
LEAF_NODE	348:20	348:20	17	->
LEAF_NODE	348:22	348:22	17	tif_clientdata
LEAF_NODE	348:36	348:36	15	,
ARGUMENT	348:38	348:38	15	module
FIELD	348:38	348:38	16	module
LEAF_NODE	348:38	348:38	17	module
LEAF_NODE	348:44	348:44	15	,
ARGUMENT	348:46	348:46	15	"ZLib error: %s"
FIELD	348:46	348:46	16	"ZLib error: %s"
LEAF_NODE	348:46	348:46	17	"ZLib error: %s"
LEAF_NODE	348:62	348:62	15	,
ARGUMENT	349:10	349:10	15	SAFE_MSG ( sp )
FUNCTION_CALL	349:10	349:21	16	SAFE_MSG ( sp )
CALLEE	349:10	349:10	17	SAFE_MSG
LEAF_NODE	349:10	349:10	18	SAFE_MSG
LEAF_NODE	349:18	349:18	17	(
ARGUMENT	349:19	349:19	17	sp
FIELD	349:19	349:19	18	sp
LEAF_NODE	349:19	349:19	19	sp
LEAF_NODE	349:21	349:21	17	)
LEAF_NODE	349:22	349:22	15	)
LEAF_NODE	349:23	349:23	13	;
JUMP_STATEMENT	350:4	350:14	12	return ( 0 ) ;
KEYWORD	350:4	350:4	13	return
LEAF_NODE	350:4	350:4	14	return
DESTINATION	350:11	350:11	13	( 0 )
EXPR	350:11	350:13	14	( 0 )
LEAF_NODE	350:11	350:11	15	(
FIELD	350:12	350:12	15	0
LEAF_NODE	350:12	350:12	16	0
LEAF_NODE	350:13	350:13	15	)
LEAF_NODE	350:14	350:14	13	;
LEAF_NODE	351:3	351:3	11	}
LEAF_NODE	352:2	352:2	8	}
JUMP_STATEMENT	353:2	353:12	6	return ( 1 ) ;
KEYWORD	353:2	353:2	7	return
LEAF_NODE	353:2	353:2	8	return
DESTINATION	353:9	353:9	7	( 1 )
EXPR	353:9	353:11	8	( 1 )
LEAF_NODE	353:9	353:9	9	(
FIELD	353:10	353:10	9	1
LEAF_NODE	353:10	353:10	10	1
LEAF_NODE	353:11	353:11	9	)
LEAF_NODE	353:12	353:12	7	;
LABEL	354:1	354:8	6	default :
LEAF_NODE	354:1	354:1	7	default
LEAF_NODE	354:8	354:8	7	:
JUMP_STATEMENT	355:2	355:40	6	return ( * sp -> vsetparent ) ( tif , tag , ap ) ;
KEYWORD	355:2	355:2	7	return
LEAF_NODE	355:2	355:2	8	return
DESTINATION	355:9	355:9	7	( * sp -> vsetparent ) ( tif , tag , ap )
EXPR	355:9	355:9	8	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	355:9	355:39	9	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	355:9	355:25	10	( * sp -> vsetparent )
LEAF_NODE	355:9	355:9	11	(
UNARY_EXPR	355:10	355:11	11	* sp -> vsetparent
UNARY_OPERATOR	355:10	355:10	12	*
LEAF_NODE	355:10	355:10	13	*
FIELD	355:11	355:15	12	sp -> vsetparent
LEAF_NODE	355:11	355:11	13	sp
LEAF_NODE	355:13	355:13	13	->
LEAF_NODE	355:15	355:15	13	vsetparent
LEAF_NODE	355:25	355:25	11	)
LEAF_NODE	355:26	355:26	10	(
ARGUMENT	355:27	355:27	10	tif
FIELD	355:27	355:27	11	tif
LEAF_NODE	355:27	355:27	12	tif
LEAF_NODE	355:30	355:30	10	,
ARGUMENT	355:32	355:32	10	tag
FIELD	355:32	355:32	11	tag
LEAF_NODE	355:32	355:32	12	tag
LEAF_NODE	355:35	355:35	10	,
ARGUMENT	355:37	355:37	10	ap
FIELD	355:37	355:37	11	ap
LEAF_NODE	355:37	355:37	12	ap
LEAF_NODE	355:39	355:39	10	)
LEAF_NODE	355:40	355:40	7	;
LEAF_NODE	356:1	356:1	5	}
LEAF_NODE	358:0	358:0	2	}
FUNCTION_DEF	360:0	373:0	1	
RETURN_TYPE	360:0	360:7	2	static int
LEAF_NODE	360:0	360:0	3	static
TYPE_NAME	360:7	360:7	3	int
LEAF_NODE	360:7	360:7	4	int
FUNCTION_NAME	361:0	361:0	2	ZIPVGetField
LEAF_NODE	361:0	361:0	3	ZIPVGetField
PARAMETER_LIST	361:12	361:46	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	361:12	361:12	3	(
PARAMETER_DECL	361:13	361:19	3	TIFF * tif
TYPE	361:13	361:17	4	TIFF *
TYPE_NAME	361:13	361:13	5	TIFF
LEAF_NODE	361:13	361:13	6	TIFF
POINTER	361:17	361:17	5	*
LEAF_NODE	361:17	361:17	6	*
NAME	361:19	361:19	4	tif
LEAF_NODE	361:19	361:19	5	tif
LEAF_NODE	361:22	361:22	3	,
PARAMETER_DECL	361:24	361:31	3	uint32 tag
TYPE	361:24	361:24	4	uint32
TYPE_NAME	361:24	361:24	5	uint32
LEAF_NODE	361:24	361:24	6	uint32
NAME	361:31	361:31	4	tag
LEAF_NODE	361:31	361:31	5	tag
LEAF_NODE	361:34	361:34	3	,
PARAMETER_DECL	361:36	361:44	3	va_list ap
TYPE	361:36	361:36	4	va_list
TYPE_NAME	361:36	361:36	5	va_list
LEAF_NODE	361:36	361:36	6	va_list
NAME	361:44	361:44	4	ap
LEAF_NODE	361:44	361:44	5	ap
LEAF_NODE	361:46	361:46	3	)
LEAF_NODE	362:0	362:0	2	{
STATEMENTS	363:1	372:1	2	
SIMPLE_DECL	363:1	363:27	3	ZIPState * sp ; sp = ZState ( tif ) ;
VAR_DECL	363:1	363:11	4	ZIPState * sp ; sp = ZState ( tif )
TYPE	363:1	363:9	5	ZIPState *
TYPE_NAME	363:1	363:1	6	ZIPState
LEAF_NODE	363:1	363:1	7	ZIPState
POINTER	363:9	363:9	6	*
LEAF_NODE	363:9	363:9	7	*
NAME	363:11	363:11	5	sp
LEAF_NODE	363:11	363:11	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	363:11	363:11	5	sp = ZState ( tif )
ASSIGN	363:11	363:16	6	sp = ZState ( tif )
LVAL	363:11	363:11	7	sp
NAME	363:11	363:11	8	sp
LEAF_NODE	363:11	363:11	9	sp
ASSIGN_OP	363:14	363:14	7	=
LEAF_NODE	363:14	363:14	8	=
RVAL	363:16	363:16	7	ZState ( tif )
FUNCTION_CALL	363:16	363:26	8	ZState ( tif )
CALLEE	363:16	363:16	9	ZState
LEAF_NODE	363:16	363:16	10	ZState
LEAF_NODE	363:22	363:22	9	(
ARGUMENT	363:23	363:23	9	tif
FIELD	363:23	363:23	10	tif
LEAF_NODE	363:23	363:23	11	tif
LEAF_NODE	363:26	363:26	9	)
LEAF_NODE	363:27	363:27	4	;
SELECTION	365:1	365:14	3	
KEYWORD	365:1	365:1	4	switch
LEAF_NODE	365:1	365:1	5	switch
LEAF_NODE	365:8	365:8	4	(
CONDITION	365:9	365:9	4	tag
EXPR	365:9	365:9	5	tag
FIELD	365:9	365:9	6	tag
LEAF_NODE	365:9	365:9	7	tag
LEAF_NODE	365:12	365:12	4	)
STATEMENTS	365:14	371:1	4	
LEAF_NODE	365:14	365:14	5	{
STATEMENTS	366:1	370:2	5	
LABEL	366:1	366:24	6	case TIFFTAG_ZIPQUALITY :
LEAF_NODE	366:1	366:1	7	case
LEAF_NODE	366:6	366:6	7	TIFFTAG_ZIPQUALITY
LEAF_NODE	366:24	366:24	7	:
LEAF_NODE	367:2	367:2	6	*
LEAF_NODE	367:3	367:3	6	va_arg
LEAF_NODE	367:9	367:9	6	(
LEAF_NODE	367:10	367:10	6	ap
LEAF_NODE	367:12	367:12	6	,
LEAF_NODE	367:14	367:14	6	int
LEAF_NODE	367:17	367:17	6	*
LEAF_NODE	367:18	367:18	6	)
LEAF_NODE	367:20	367:20	6	=
EXPR_STATEMENT	367:22	367:36	6	sp -> zipquality ;
EXPR	367:22	367:22	7	sp -> zipquality
FIELD	367:22	367:26	8	sp -> zipquality
LEAF_NODE	367:22	367:22	9	sp
LEAF_NODE	367:24	367:24	9	->
LEAF_NODE	367:26	367:26	9	zipquality
LEAF_NODE	367:36	367:36	7	;
JUMP_STATEMENT	368:2	368:7	6	break DESTINATION ;
KEYWORD	368:2	368:2	7	break
LEAF_NODE	368:2	368:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	368:7	368:7	7	;
LABEL	369:1	369:8	6	default :
LEAF_NODE	369:1	369:1	7	default
LEAF_NODE	369:8	369:8	7	:
JUMP_STATEMENT	370:2	370:40	6	return ( * sp -> vgetparent ) ( tif , tag , ap ) ;
KEYWORD	370:2	370:2	7	return
LEAF_NODE	370:2	370:2	8	return
DESTINATION	370:9	370:9	7	( * sp -> vgetparent ) ( tif , tag , ap )
EXPR	370:9	370:9	8	( * sp -> vgetparent ) ( tif , tag , ap )
FUNCTION_CALL	370:9	370:39	9	( * sp -> vgetparent ) ( tif , tag , ap )
CALLEE	370:9	370:25	10	( * sp -> vgetparent )
LEAF_NODE	370:9	370:9	11	(
UNARY_EXPR	370:10	370:11	11	* sp -> vgetparent
UNARY_OPERATOR	370:10	370:10	12	*
LEAF_NODE	370:10	370:10	13	*
FIELD	370:11	370:15	12	sp -> vgetparent
LEAF_NODE	370:11	370:11	13	sp
LEAF_NODE	370:13	370:13	13	->
LEAF_NODE	370:15	370:15	13	vgetparent
LEAF_NODE	370:25	370:25	11	)
LEAF_NODE	370:26	370:26	10	(
ARGUMENT	370:27	370:27	10	tif
FIELD	370:27	370:27	11	tif
LEAF_NODE	370:27	370:27	12	tif
LEAF_NODE	370:30	370:30	10	,
ARGUMENT	370:32	370:32	10	tag
FIELD	370:32	370:32	11	tag
LEAF_NODE	370:32	370:32	12	tag
LEAF_NODE	370:35	370:35	10	,
ARGUMENT	370:37	370:37	10	ap
FIELD	370:37	370:37	11	ap
LEAF_NODE	370:37	370:37	12	ap
LEAF_NODE	370:39	370:39	10	)
LEAF_NODE	370:40	370:40	7	;
LEAF_NODE	371:1	371:1	5	}
JUMP_STATEMENT	372:1	372:11	3	return ( 1 ) ;
KEYWORD	372:1	372:1	4	return
LEAF_NODE	372:1	372:1	5	return
DESTINATION	372:8	372:8	4	( 1 )
EXPR	372:8	372:10	5	( 1 )
LEAF_NODE	372:8	372:8	6	(
FIELD	372:9	372:9	6	1
LEAF_NODE	372:9	372:9	7	1
LEAF_NODE	372:10	372:10	6	)
LEAF_NODE	372:11	372:11	4	;
LEAF_NODE	373:0	373:0	2	}
FUNCTION_DEF	379:0	446:0	1	
RETURN_TYPE	379:0	379:0	2	int
TYPE_NAME	379:0	379:0	3	int
LEAF_NODE	379:0	379:0	4	int
FUNCTION_NAME	380:0	380:0	2	TIFFInitZIP
LEAF_NODE	380:0	380:0	3	TIFFInitZIP
PARAMETER_LIST	380:11	380:33	2	( TIFF * tif , int scheme )
LEAF_NODE	380:11	380:11	3	(
PARAMETER_DECL	380:12	380:18	3	TIFF * tif
TYPE	380:12	380:16	4	TIFF *
TYPE_NAME	380:12	380:12	5	TIFF
LEAF_NODE	380:12	380:12	6	TIFF
POINTER	380:16	380:16	5	*
LEAF_NODE	380:16	380:16	6	*
NAME	380:18	380:18	4	tif
LEAF_NODE	380:18	380:18	5	tif
LEAF_NODE	380:21	380:21	3	,
PARAMETER_DECL	380:23	380:27	3	int scheme
TYPE	380:23	380:23	4	int
TYPE_NAME	380:23	380:23	5	int
LEAF_NODE	380:23	380:23	6	int
NAME	380:27	380:27	4	scheme
LEAF_NODE	380:27	380:27	5	scheme
LEAF_NODE	380:33	380:33	3	)
LEAF_NODE	381:0	381:0	2	{
STATEMENTS	382:1	445:1	2	
LEAF_NODE	382:1	382:1	3	static
SIMPLE_DECL	382:8	382:43	3	const char [ ] module ; module = "TIFFInitZIP" ;
VAR_DECL	382:8	382:19	4	const char [ ] module ; module = "TIFFInitZIP"
TYPE	382:8	382:25	5	const char [ ]
TYPE_NAME	382:8	382:14	6	const char
LEAF_NODE	382:8	382:8	7	const
LEAF_NODE	382:14	382:14	7	char
TYPE_SUFFIX	382:25	382:26	6	[ ]
LEAF_NODE	382:25	382:25	7	[
LEAF_NODE	382:26	382:26	7	]
NAME	382:19	382:19	5	module
LEAF_NODE	382:19	382:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	382:19	382:19	5	module = "TIFFInitZIP"
ASSIGN	382:19	382:30	6	module = "TIFFInitZIP"
LVAL	382:19	382:19	7	module
NAME	382:19	382:19	8	module
LEAF_NODE	382:19	382:19	9	module
ASSIGN_OP	382:28	382:28	7	=
LEAF_NODE	382:28	382:28	8	=
RVAL	382:30	382:30	7	"TIFFInitZIP"
FIELD	382:30	382:30	8	"TIFFInitZIP"
LEAF_NODE	382:30	382:30	9	"TIFFInitZIP"
LEAF_NODE	382:43	382:43	4	;
SIMPLE_DECL	383:1	383:13	3	ZIPState * sp ;
VAR_DECL	383:1	383:11	4	ZIPState * sp
TYPE	383:1	383:9	5	ZIPState *
TYPE_NAME	383:1	383:1	6	ZIPState
LEAF_NODE	383:1	383:1	7	ZIPState
POINTER	383:9	383:9	6	*
LEAF_NODE	383:9	383:9	7	*
NAME	383:11	383:11	5	sp
LEAF_NODE	383:11	383:11	6	sp
LEAF_NODE	383:13	383:13	4	;
EXPR_STATEMENT	385:1	386:43	3	assert ( ( scheme == COMPRESSION_DEFLATE ) || ( scheme == COMPRESSION_ADOBE_DEFLATE ) ) ;
EXPR	385:1	385:1	4	assert ( ( scheme == COMPRESSION_DEFLATE ) || ( scheme == COMPRESSION_ADOBE_DEFLATE ) )
FUNCTION_CALL	385:1	386:42	5	assert ( ( scheme == COMPRESSION_DEFLATE ) || ( scheme == COMPRESSION_ADOBE_DEFLATE ) )
CALLEE	385:1	385:1	6	assert
LEAF_NODE	385:1	385:1	7	assert
LEAF_NODE	385:7	385:7	6	(
ARGUMENT	385:9	385:9	6	( scheme == COMPRESSION_DEFLATE ) || ( scheme == COMPRESSION_ADOBE_DEFLATE )
OR	385:9	386:5	7	( scheme == COMPRESSION_DEFLATE ) || ( scheme == COMPRESSION_ADOBE_DEFLATE )
EXPR	385:9	385:39	8	( scheme == COMPRESSION_DEFLATE )
LEAF_NODE	385:9	385:9	9	(
FIELD	385:10	385:10	9	scheme
LEAF_NODE	385:10	385:10	10	scheme
EQ_OPERATOR	385:17	385:17	9	==
LEAF_NODE	385:17	385:17	10	==
FIELD	385:20	385:20	9	COMPRESSION_DEFLATE
LEAF_NODE	385:20	385:20	10	COMPRESSION_DEFLATE
LEAF_NODE	385:39	385:39	9	)
LEAF_NODE	386:2	386:2	8	||
EXPR	386:5	386:41	8	( scheme == COMPRESSION_ADOBE_DEFLATE )
LEAF_NODE	386:5	386:5	9	(
FIELD	386:6	386:6	9	scheme
LEAF_NODE	386:6	386:6	10	scheme
EQ_OPERATOR	386:13	386:13	9	==
LEAF_NODE	386:13	386:13	10	==
FIELD	386:16	386:16	9	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	386:16	386:16	10	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	386:41	386:41	9	)
LEAF_NODE	386:42	386:42	6	)
LEAF_NODE	386:43	386:43	4	;
SELECTION	391:1	391:67	3	
KEYWORD	391:1	391:1	4	if
LEAF_NODE	391:1	391:1	5	if
LEAF_NODE	391:4	391:4	4	(
CONDITION	391:5	391:5	4	! _TIFFMergeFields ( tif , zipFields , TIFFArrayCount ( zipFields ) )
EXPR	391:5	391:5	5	! _TIFFMergeFields ( tif , zipFields , TIFFArrayCount ( zipFields ) )
UNARY_EXPR	391:5	391:6	6	! _TIFFMergeFields ( tif , zipFields , TIFFArrayCount ( zipFields ) )
UNARY_OPERATOR	391:5	391:5	7	!
LEAF_NODE	391:5	391:5	8	!
FUNCTION_CALL	391:6	391:64	7	_TIFFMergeFields ( tif , zipFields , TIFFArrayCount ( zipFields ) )
CALLEE	391:6	391:6	8	_TIFFMergeFields
LEAF_NODE	391:6	391:6	9	_TIFFMergeFields
LEAF_NODE	391:22	391:22	8	(
ARGUMENT	391:23	391:23	8	tif
FIELD	391:23	391:23	9	tif
LEAF_NODE	391:23	391:23	10	tif
LEAF_NODE	391:26	391:26	8	,
ARGUMENT	391:28	391:28	8	zipFields
FIELD	391:28	391:28	9	zipFields
LEAF_NODE	391:28	391:28	10	zipFields
LEAF_NODE	391:37	391:37	8	,
ARGUMENT	391:39	391:39	8	TIFFArrayCount ( zipFields )
FUNCTION_CALL	391:39	391:63	9	TIFFArrayCount ( zipFields )
CALLEE	391:39	391:39	10	TIFFArrayCount
LEAF_NODE	391:39	391:39	11	TIFFArrayCount
LEAF_NODE	391:53	391:53	10	(
ARGUMENT	391:54	391:54	10	zipFields
FIELD	391:54	391:54	11	zipFields
LEAF_NODE	391:54	391:54	12	zipFields
LEAF_NODE	391:63	391:63	10	)
LEAF_NODE	391:64	391:64	8	)
LEAF_NODE	391:65	391:65	4	)
STATEMENTS	391:67	395:1	4	
LEAF_NODE	391:67	391:67	5	{
STATEMENTS	392:2	394:2	5	
EXPR_STATEMENT	392:2	393:53	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging Deflate codec-specific tags failed" ) ;
EXPR	392:2	392:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging Deflate codec-specific tags failed" )
FUNCTION_CALL	392:2	393:52	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging Deflate codec-specific tags failed" )
CALLEE	392:2	392:2	9	TIFFErrorExt
LEAF_NODE	392:2	392:2	10	TIFFErrorExt
LEAF_NODE	392:14	392:14	9	(
ARGUMENT	392:15	392:15	9	tif -> tif_clientdata
FIELD	392:15	392:20	10	tif -> tif_clientdata
LEAF_NODE	392:15	392:15	11	tif
LEAF_NODE	392:18	392:18	11	->
LEAF_NODE	392:20	392:20	11	tif_clientdata
LEAF_NODE	392:34	392:34	9	,
ARGUMENT	392:36	392:36	9	module
FIELD	392:36	392:36	10	module
LEAF_NODE	392:36	392:36	11	module
LEAF_NODE	392:42	392:42	9	,
ARGUMENT	393:8	393:8	9	"Merging Deflate codec-specific tags failed"
FIELD	393:8	393:8	10	"Merging Deflate codec-specific tags failed"
LEAF_NODE	393:8	393:8	11	"Merging Deflate codec-specific tags failed"
LEAF_NODE	393:52	393:52	9	)
LEAF_NODE	393:53	393:53	7	;
JUMP_STATEMENT	394:2	394:10	6	return 0 ;
KEYWORD	394:2	394:2	7	return
LEAF_NODE	394:2	394:2	8	return
DESTINATION	394:9	394:9	7	0
EXPR	394:9	394:9	8	0
FIELD	394:9	394:9	9	0
LEAF_NODE	394:9	394:9	10	0
LEAF_NODE	394:10	394:10	7	;
LEAF_NODE	395:1	395:1	5	}
EXPR_STATEMENT	400:1	400:56	3	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( ZIPState ) ) ;
EXPR	400:1	400:1	4	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( ZIPState ) )
ASSIGN	400:1	400:17	5	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( ZIPState ) )
LVAL	400:1	400:1	6	tif -> tif_data
FIELD	400:1	400:6	7	tif -> tif_data
LEAF_NODE	400:1	400:1	8	tif
LEAF_NODE	400:4	400:4	8	->
LEAF_NODE	400:6	400:6	8	tif_data
ASSIGN_OP	400:15	400:15	6	=
LEAF_NODE	400:15	400:15	7	=
RVAL	400:17	400:26	6	( uint8 * ) _TIFFmalloc ( sizeof ( ZIPState ) )
LEAF_NODE	400:17	400:17	7	(
TYPE_NAME	400:18	400:18	7	uint8
LEAF_NODE	400:18	400:18	8	uint8
LEAF_NODE	400:23	400:23	7	*
LEAF_NODE	400:24	400:24	7	)
FUNCTION_CALL	400:26	400:55	7	_TIFFmalloc ( sizeof ( ZIPState ) )
CALLEE	400:26	400:26	8	_TIFFmalloc
LEAF_NODE	400:26	400:26	9	_TIFFmalloc
LEAF_NODE	400:37	400:37	8	(
ARGUMENT	400:38	400:38	8	sizeof ( ZIPState )
FUNCTION_CALL	400:38	400:54	9	sizeof ( ZIPState )
CALLEE	400:38	400:38	10	sizeof
LEAF_NODE	400:38	400:38	11	sizeof
LEAF_NODE	400:45	400:45	10	(
ARGUMENT	400:46	400:46	10	ZIPState
FIELD	400:46	400:46	11	ZIPState
LEAF_NODE	400:46	400:46	12	ZIPState
LEAF_NODE	400:54	400:54	10	)
LEAF_NODE	400:55	400:55	8	)
LEAF_NODE	400:56	400:56	4	;
SELECTION	401:1	402:2	3	
KEYWORD	401:1	401:1	4	if
LEAF_NODE	401:1	401:1	5	if
LEAF_NODE	401:4	401:4	4	(
CONDITION	401:5	401:5	4	tif -> tif_data == NULL
EXPR	401:5	401:22	5	tif -> tif_data == NULL
FIELD	401:5	401:10	6	tif -> tif_data
LEAF_NODE	401:5	401:5	7	tif
LEAF_NODE	401:8	401:8	7	->
LEAF_NODE	401:10	401:10	7	tif_data
EQ_OPERATOR	401:19	401:19	6	==
LEAF_NODE	401:19	401:19	7	==
FIELD	401:22	401:22	6	NULL
LEAF_NODE	401:22	401:22	7	NULL
LEAF_NODE	401:26	401:26	4	)
STATEMENTS	402:2	402:2	4	
JUMP_STATEMENT	402:2	402:10	5	goto bad ;
KEYWORD	402:2	402:2	6	goto
LEAF_NODE	402:2	402:2	7	goto
DESTINATION	402:7	402:7	6	bad
LEAF_NODE	402:7	402:7	7	bad
LEAF_NODE	402:10	402:10	6	;
EXPR_STATEMENT	403:1	403:17	3	sp = ZState ( tif ) ;
EXPR	403:1	403:1	4	sp = ZState ( tif )
ASSIGN	403:1	403:6	5	sp = ZState ( tif )
LVAL	403:1	403:1	6	sp
FIELD	403:1	403:1	7	sp
LEAF_NODE	403:1	403:1	8	sp
ASSIGN_OP	403:4	403:4	6	=
LEAF_NODE	403:4	403:4	7	=
RVAL	403:6	403:6	6	ZState ( tif )
FUNCTION_CALL	403:6	403:16	7	ZState ( tif )
CALLEE	403:6	403:6	8	ZState
LEAF_NODE	403:6	403:6	9	ZState
LEAF_NODE	403:12	403:12	8	(
ARGUMENT	403:13	403:13	8	tif
FIELD	403:13	403:13	9	tif
LEAF_NODE	403:13	403:13	10	tif
LEAF_NODE	403:16	403:16	8	)
LEAF_NODE	403:17	403:17	4	;
EXPR_STATEMENT	404:1	404:25	3	sp -> stream . zalloc = NULL ;
EXPR	404:1	404:1	4	sp -> stream . zalloc = NULL
ASSIGN	404:1	404:21	5	sp -> stream . zalloc = NULL
LVAL	404:1	404:1	6	sp -> stream . zalloc
FIELD	404:1	404:12	7	sp -> stream . zalloc
LEAF_NODE	404:1	404:1	8	sp
LEAF_NODE	404:3	404:3	8	->
LEAF_NODE	404:5	404:5	8	stream
LEAF_NODE	404:11	404:11	8	.
LEAF_NODE	404:12	404:12	8	zalloc
ASSIGN_OP	404:19	404:19	6	=
LEAF_NODE	404:19	404:19	7	=
RVAL	404:21	404:21	6	NULL
FIELD	404:21	404:21	7	NULL
LEAF_NODE	404:21	404:21	8	NULL
LEAF_NODE	404:25	404:25	4	;
EXPR_STATEMENT	405:1	405:24	3	sp -> stream . zfree = NULL ;
EXPR	405:1	405:1	4	sp -> stream . zfree = NULL
ASSIGN	405:1	405:20	5	sp -> stream . zfree = NULL
LVAL	405:1	405:1	6	sp -> stream . zfree
FIELD	405:1	405:12	7	sp -> stream . zfree
LEAF_NODE	405:1	405:1	8	sp
LEAF_NODE	405:3	405:3	8	->
LEAF_NODE	405:5	405:5	8	stream
LEAF_NODE	405:11	405:11	8	.
LEAF_NODE	405:12	405:12	8	zfree
ASSIGN_OP	405:18	405:18	6	=
LEAF_NODE	405:18	405:18	7	=
RVAL	405:20	405:20	6	NULL
FIELD	405:20	405:20	7	NULL
LEAF_NODE	405:20	405:20	8	NULL
LEAF_NODE	405:24	405:24	4	;
EXPR_STATEMENT	406:1	406:25	3	sp -> stream . opaque = NULL ;
EXPR	406:1	406:1	4	sp -> stream . opaque = NULL
ASSIGN	406:1	406:21	5	sp -> stream . opaque = NULL
LVAL	406:1	406:1	6	sp -> stream . opaque
FIELD	406:1	406:12	7	sp -> stream . opaque
LEAF_NODE	406:1	406:1	8	sp
LEAF_NODE	406:3	406:3	8	->
LEAF_NODE	406:5	406:5	8	stream
LEAF_NODE	406:11	406:11	8	.
LEAF_NODE	406:12	406:12	8	opaque
ASSIGN_OP	406:19	406:19	6	=
LEAF_NODE	406:19	406:19	7	=
RVAL	406:21	406:21	6	NULL
FIELD	406:21	406:21	7	NULL
LEAF_NODE	406:21	406:21	8	NULL
LEAF_NODE	406:25	406:25	4	;
EXPR_STATEMENT	407:1	407:32	3	sp -> stream . data_type = Z_BINARY ;
EXPR	407:1	407:1	4	sp -> stream . data_type = Z_BINARY
ASSIGN	407:1	407:24	5	sp -> stream . data_type = Z_BINARY
LVAL	407:1	407:1	6	sp -> stream . data_type
FIELD	407:1	407:12	7	sp -> stream . data_type
LEAF_NODE	407:1	407:1	8	sp
LEAF_NODE	407:3	407:3	8	->
LEAF_NODE	407:5	407:5	8	stream
LEAF_NODE	407:11	407:11	8	.
LEAF_NODE	407:12	407:12	8	data_type
ASSIGN_OP	407:22	407:22	6	=
LEAF_NODE	407:22	407:22	7	=
RVAL	407:24	407:24	6	Z_BINARY
FIELD	407:24	407:24	7	Z_BINARY
LEAF_NODE	407:24	407:24	8	Z_BINARY
LEAF_NODE	407:32	407:32	4	;
EXPR_STATEMENT	412:1	412:47	3	sp -> vgetparent = tif -> tif_tagmethods . vgetfield ;
EXPR	412:1	412:1	4	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
ASSIGN	412:1	412:18	5	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
LVAL	412:1	412:1	6	sp -> vgetparent
FIELD	412:1	412:5	7	sp -> vgetparent
LEAF_NODE	412:1	412:1	8	sp
LEAF_NODE	412:3	412:3	8	->
LEAF_NODE	412:5	412:5	8	vgetparent
ASSIGN_OP	412:16	412:16	6	=
LEAF_NODE	412:16	412:16	7	=
RVAL	412:18	412:18	6	tif -> tif_tagmethods . vgetfield
FIELD	412:18	412:38	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	412:18	412:18	8	tif
LEAF_NODE	412:21	412:21	8	->
LEAF_NODE	412:23	412:23	8	tif_tagmethods
LEAF_NODE	412:37	412:37	8	.
LEAF_NODE	412:38	412:38	8	vgetfield
LEAF_NODE	412:47	412:47	4	;
EXPR_STATEMENT	413:1	413:45	3	tif -> tif_tagmethods . vgetfield = ZIPVGetField ;
EXPR	413:1	413:1	4	tif -> tif_tagmethods . vgetfield = ZIPVGetField
ASSIGN	413:1	413:33	5	tif -> tif_tagmethods . vgetfield = ZIPVGetField
LVAL	413:1	413:1	6	tif -> tif_tagmethods . vgetfield
FIELD	413:1	413:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	413:1	413:1	8	tif
LEAF_NODE	413:4	413:4	8	->
LEAF_NODE	413:6	413:6	8	tif_tagmethods
LEAF_NODE	413:20	413:20	8	.
LEAF_NODE	413:21	413:21	8	vgetfield
ASSIGN_OP	413:31	413:31	6	=
LEAF_NODE	413:31	413:31	7	=
RVAL	413:33	413:33	6	ZIPVGetField
FIELD	413:33	413:33	7	ZIPVGetField
LEAF_NODE	413:33	413:33	8	ZIPVGetField
LEAF_NODE	413:45	413:45	4	;
EXPR_STATEMENT	414:1	414:47	3	sp -> vsetparent = tif -> tif_tagmethods . vsetfield ;
EXPR	414:1	414:1	4	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
ASSIGN	414:1	414:18	5	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
LVAL	414:1	414:1	6	sp -> vsetparent
FIELD	414:1	414:5	7	sp -> vsetparent
LEAF_NODE	414:1	414:1	8	sp
LEAF_NODE	414:3	414:3	8	->
LEAF_NODE	414:5	414:5	8	vsetparent
ASSIGN_OP	414:16	414:16	6	=
LEAF_NODE	414:16	414:16	7	=
RVAL	414:18	414:18	6	tif -> tif_tagmethods . vsetfield
FIELD	414:18	414:38	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	414:18	414:18	8	tif
LEAF_NODE	414:21	414:21	8	->
LEAF_NODE	414:23	414:23	8	tif_tagmethods
LEAF_NODE	414:37	414:37	8	.
LEAF_NODE	414:38	414:38	8	vsetfield
LEAF_NODE	414:47	414:47	4	;
EXPR_STATEMENT	415:1	415:45	3	tif -> tif_tagmethods . vsetfield = ZIPVSetField ;
EXPR	415:1	415:1	4	tif -> tif_tagmethods . vsetfield = ZIPVSetField
ASSIGN	415:1	415:33	5	tif -> tif_tagmethods . vsetfield = ZIPVSetField
LVAL	415:1	415:1	6	tif -> tif_tagmethods . vsetfield
FIELD	415:1	415:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	415:1	415:1	8	tif
LEAF_NODE	415:4	415:4	8	->
LEAF_NODE	415:6	415:6	8	tif_tagmethods
LEAF_NODE	415:20	415:20	8	.
LEAF_NODE	415:21	415:21	8	vsetfield
ASSIGN_OP	415:31	415:31	6	=
LEAF_NODE	415:31	415:31	7	=
RVAL	415:33	415:33	6	ZIPVSetField
FIELD	415:33	415:33	7	ZIPVSetField
LEAF_NODE	415:33	415:33	8	ZIPVSetField
LEAF_NODE	415:45	415:45	4	;
EXPR_STATEMENT	418:1	418:39	3	sp -> zipquality = Z_DEFAULT_COMPRESSION ;
EXPR	418:1	418:1	4	sp -> zipquality = Z_DEFAULT_COMPRESSION
ASSIGN	418:1	418:18	5	sp -> zipquality = Z_DEFAULT_COMPRESSION
LVAL	418:1	418:1	6	sp -> zipquality
FIELD	418:1	418:5	7	sp -> zipquality
LEAF_NODE	418:1	418:1	8	sp
LEAF_NODE	418:3	418:3	8	->
LEAF_NODE	418:5	418:5	8	zipquality
ASSIGN_OP	418:16	418:16	6	=
LEAF_NODE	418:16	418:16	7	=
RVAL	418:18	418:18	6	Z_DEFAULT_COMPRESSION
FIELD	418:18	418:18	7	Z_DEFAULT_COMPRESSION
LEAF_NODE	418:18	418:18	8	Z_DEFAULT_COMPRESSION
LEAF_NODE	418:39	418:39	4	;
EXPR_STATEMENT	419:1	419:14	3	sp -> state = 0 ;
EXPR	419:1	419:1	4	sp -> state = 0
ASSIGN	419:1	419:13	5	sp -> state = 0
LVAL	419:1	419:1	6	sp -> state
FIELD	419:1	419:5	7	sp -> state
LEAF_NODE	419:1	419:1	8	sp
LEAF_NODE	419:3	419:3	8	->
LEAF_NODE	419:5	419:5	8	state
ASSIGN_OP	419:11	419:11	6	=
LEAF_NODE	419:11	419:11	7	=
RVAL	419:13	419:13	6	0
FIELD	419:13	419:13	7	0
LEAF_NODE	419:13	419:13	8	0
LEAF_NODE	419:14	419:14	4	;
EXPR_STATEMENT	424:1	424:34	3	tif -> tif_fixuptags = ZIPFixupTags ;
EXPR	424:1	424:1	4	tif -> tif_fixuptags = ZIPFixupTags
ASSIGN	424:1	424:22	5	tif -> tif_fixuptags = ZIPFixupTags
LVAL	424:1	424:1	6	tif -> tif_fixuptags
FIELD	424:1	424:6	7	tif -> tif_fixuptags
LEAF_NODE	424:1	424:1	8	tif
LEAF_NODE	424:4	424:4	8	->
LEAF_NODE	424:6	424:6	8	tif_fixuptags
ASSIGN_OP	424:20	424:20	6	=
LEAF_NODE	424:20	424:20	7	=
RVAL	424:22	424:22	6	ZIPFixupTags
FIELD	424:22	424:22	7	ZIPFixupTags
LEAF_NODE	424:22	424:22	8	ZIPFixupTags
LEAF_NODE	424:34	424:34	4	;
EXPR_STATEMENT	425:1	425:38	3	tif -> tif_setupdecode = ZIPSetupDecode ;
EXPR	425:1	425:1	4	tif -> tif_setupdecode = ZIPSetupDecode
ASSIGN	425:1	425:24	5	tif -> tif_setupdecode = ZIPSetupDecode
LVAL	425:1	425:1	6	tif -> tif_setupdecode
FIELD	425:1	425:6	7	tif -> tif_setupdecode
LEAF_NODE	425:1	425:1	8	tif
LEAF_NODE	425:4	425:4	8	->
LEAF_NODE	425:6	425:6	8	tif_setupdecode
ASSIGN_OP	425:22	425:22	6	=
LEAF_NODE	425:22	425:22	7	=
RVAL	425:24	425:24	6	ZIPSetupDecode
FIELD	425:24	425:24	7	ZIPSetupDecode
LEAF_NODE	425:24	425:24	8	ZIPSetupDecode
LEAF_NODE	425:38	425:38	4	;
EXPR_STATEMENT	426:1	426:34	3	tif -> tif_predecode = ZIPPreDecode ;
EXPR	426:1	426:1	4	tif -> tif_predecode = ZIPPreDecode
ASSIGN	426:1	426:22	5	tif -> tif_predecode = ZIPPreDecode
LVAL	426:1	426:1	6	tif -> tif_predecode
FIELD	426:1	426:6	7	tif -> tif_predecode
LEAF_NODE	426:1	426:1	8	tif
LEAF_NODE	426:4	426:4	8	->
LEAF_NODE	426:6	426:6	8	tif_predecode
ASSIGN_OP	426:20	426:20	6	=
LEAF_NODE	426:20	426:20	7	=
RVAL	426:22	426:22	6	ZIPPreDecode
FIELD	426:22	426:22	7	ZIPPreDecode
LEAF_NODE	426:22	426:22	8	ZIPPreDecode
LEAF_NODE	426:34	426:34	4	;
EXPR_STATEMENT	427:1	427:31	3	tif -> tif_decoderow = ZIPDecode ;
EXPR	427:1	427:1	4	tif -> tif_decoderow = ZIPDecode
ASSIGN	427:1	427:22	5	tif -> tif_decoderow = ZIPDecode
LVAL	427:1	427:1	6	tif -> tif_decoderow
FIELD	427:1	427:6	7	tif -> tif_decoderow
LEAF_NODE	427:1	427:1	8	tif
LEAF_NODE	427:4	427:4	8	->
LEAF_NODE	427:6	427:6	8	tif_decoderow
ASSIGN_OP	427:20	427:20	6	=
LEAF_NODE	427:20	427:20	7	=
RVAL	427:22	427:22	6	ZIPDecode
FIELD	427:22	427:22	7	ZIPDecode
LEAF_NODE	427:22	427:22	8	ZIPDecode
LEAF_NODE	427:31	427:31	4	;
EXPR_STATEMENT	428:1	428:33	3	tif -> tif_decodestrip = ZIPDecode ;
EXPR	428:1	428:1	4	tif -> tif_decodestrip = ZIPDecode
ASSIGN	428:1	428:24	5	tif -> tif_decodestrip = ZIPDecode
LVAL	428:1	428:1	6	tif -> tif_decodestrip
FIELD	428:1	428:6	7	tif -> tif_decodestrip
LEAF_NODE	428:1	428:1	8	tif
LEAF_NODE	428:4	428:4	8	->
LEAF_NODE	428:6	428:6	8	tif_decodestrip
ASSIGN_OP	428:22	428:22	6	=
LEAF_NODE	428:22	428:22	7	=
RVAL	428:24	428:24	6	ZIPDecode
FIELD	428:24	428:24	7	ZIPDecode
LEAF_NODE	428:24	428:24	8	ZIPDecode
LEAF_NODE	428:33	428:33	4	;
EXPR_STATEMENT	429:1	429:32	3	tif -> tif_decodetile = ZIPDecode ;
EXPR	429:1	429:1	4	tif -> tif_decodetile = ZIPDecode
ASSIGN	429:1	429:23	5	tif -> tif_decodetile = ZIPDecode
LVAL	429:1	429:1	6	tif -> tif_decodetile
FIELD	429:1	429:6	7	tif -> tif_decodetile
LEAF_NODE	429:1	429:1	8	tif
LEAF_NODE	429:4	429:4	8	->
LEAF_NODE	429:6	429:6	8	tif_decodetile
ASSIGN_OP	429:21	429:21	6	=
LEAF_NODE	429:21	429:21	7	=
RVAL	429:23	429:23	6	ZIPDecode
FIELD	429:23	429:23	7	ZIPDecode
LEAF_NODE	429:23	429:23	8	ZIPDecode
LEAF_NODE	429:32	429:32	4	;
EXPR_STATEMENT	430:1	430:38	3	tif -> tif_setupencode = ZIPSetupEncode ;
EXPR	430:1	430:1	4	tif -> tif_setupencode = ZIPSetupEncode
ASSIGN	430:1	430:24	5	tif -> tif_setupencode = ZIPSetupEncode
LVAL	430:1	430:1	6	tif -> tif_setupencode
FIELD	430:1	430:6	7	tif -> tif_setupencode
LEAF_NODE	430:1	430:1	8	tif
LEAF_NODE	430:4	430:4	8	->
LEAF_NODE	430:6	430:6	8	tif_setupencode
ASSIGN_OP	430:22	430:22	6	=
LEAF_NODE	430:22	430:22	7	=
RVAL	430:24	430:24	6	ZIPSetupEncode
FIELD	430:24	430:24	7	ZIPSetupEncode
LEAF_NODE	430:24	430:24	8	ZIPSetupEncode
LEAF_NODE	430:38	430:38	4	;
EXPR_STATEMENT	431:1	431:34	3	tif -> tif_preencode = ZIPPreEncode ;
EXPR	431:1	431:1	4	tif -> tif_preencode = ZIPPreEncode
ASSIGN	431:1	431:22	5	tif -> tif_preencode = ZIPPreEncode
LVAL	431:1	431:1	6	tif -> tif_preencode
FIELD	431:1	431:6	7	tif -> tif_preencode
LEAF_NODE	431:1	431:1	8	tif
LEAF_NODE	431:4	431:4	8	->
LEAF_NODE	431:6	431:6	8	tif_preencode
ASSIGN_OP	431:20	431:20	6	=
LEAF_NODE	431:20	431:20	7	=
RVAL	431:22	431:22	6	ZIPPreEncode
FIELD	431:22	431:22	7	ZIPPreEncode
LEAF_NODE	431:22	431:22	8	ZIPPreEncode
LEAF_NODE	431:34	431:34	4	;
EXPR_STATEMENT	432:1	432:36	3	tif -> tif_postencode = ZIPPostEncode ;
EXPR	432:1	432:1	4	tif -> tif_postencode = ZIPPostEncode
ASSIGN	432:1	432:23	5	tif -> tif_postencode = ZIPPostEncode
LVAL	432:1	432:1	6	tif -> tif_postencode
FIELD	432:1	432:6	7	tif -> tif_postencode
LEAF_NODE	432:1	432:1	8	tif
LEAF_NODE	432:4	432:4	8	->
LEAF_NODE	432:6	432:6	8	tif_postencode
ASSIGN_OP	432:21	432:21	6	=
LEAF_NODE	432:21	432:21	7	=
RVAL	432:23	432:23	6	ZIPPostEncode
FIELD	432:23	432:23	7	ZIPPostEncode
LEAF_NODE	432:23	432:23	8	ZIPPostEncode
LEAF_NODE	432:36	432:36	4	;
EXPR_STATEMENT	433:1	433:31	3	tif -> tif_encoderow = ZIPEncode ;
EXPR	433:1	433:1	4	tif -> tif_encoderow = ZIPEncode
ASSIGN	433:1	433:22	5	tif -> tif_encoderow = ZIPEncode
LVAL	433:1	433:1	6	tif -> tif_encoderow
FIELD	433:1	433:6	7	tif -> tif_encoderow
LEAF_NODE	433:1	433:1	8	tif
LEAF_NODE	433:4	433:4	8	->
LEAF_NODE	433:6	433:6	8	tif_encoderow
ASSIGN_OP	433:20	433:20	6	=
LEAF_NODE	433:20	433:20	7	=
RVAL	433:22	433:22	6	ZIPEncode
FIELD	433:22	433:22	7	ZIPEncode
LEAF_NODE	433:22	433:22	8	ZIPEncode
LEAF_NODE	433:31	433:31	4	;
EXPR_STATEMENT	434:1	434:33	3	tif -> tif_encodestrip = ZIPEncode ;
EXPR	434:1	434:1	4	tif -> tif_encodestrip = ZIPEncode
ASSIGN	434:1	434:24	5	tif -> tif_encodestrip = ZIPEncode
LVAL	434:1	434:1	6	tif -> tif_encodestrip
FIELD	434:1	434:6	7	tif -> tif_encodestrip
LEAF_NODE	434:1	434:1	8	tif
LEAF_NODE	434:4	434:4	8	->
LEAF_NODE	434:6	434:6	8	tif_encodestrip
ASSIGN_OP	434:22	434:22	6	=
LEAF_NODE	434:22	434:22	7	=
RVAL	434:24	434:24	6	ZIPEncode
FIELD	434:24	434:24	7	ZIPEncode
LEAF_NODE	434:24	434:24	8	ZIPEncode
LEAF_NODE	434:33	434:33	4	;
EXPR_STATEMENT	435:1	435:32	3	tif -> tif_encodetile = ZIPEncode ;
EXPR	435:1	435:1	4	tif -> tif_encodetile = ZIPEncode
ASSIGN	435:1	435:23	5	tif -> tif_encodetile = ZIPEncode
LVAL	435:1	435:1	6	tif -> tif_encodetile
FIELD	435:1	435:6	7	tif -> tif_encodetile
LEAF_NODE	435:1	435:1	8	tif
LEAF_NODE	435:4	435:4	8	->
LEAF_NODE	435:6	435:6	8	tif_encodetile
ASSIGN_OP	435:21	435:21	6	=
LEAF_NODE	435:21	435:21	7	=
RVAL	435:23	435:23	6	ZIPEncode
FIELD	435:23	435:23	7	ZIPEncode
LEAF_NODE	435:23	435:23	8	ZIPEncode
LEAF_NODE	435:32	435:32	4	;
EXPR_STATEMENT	436:1	436:30	3	tif -> tif_cleanup = ZIPCleanup ;
EXPR	436:1	436:1	4	tif -> tif_cleanup = ZIPCleanup
ASSIGN	436:1	436:20	5	tif -> tif_cleanup = ZIPCleanup
LVAL	436:1	436:1	6	tif -> tif_cleanup
FIELD	436:1	436:6	7	tif -> tif_cleanup
LEAF_NODE	436:1	436:1	8	tif
LEAF_NODE	436:4	436:4	8	->
LEAF_NODE	436:6	436:6	8	tif_cleanup
ASSIGN_OP	436:18	436:18	6	=
LEAF_NODE	436:18	436:18	7	=
RVAL	436:20	436:20	6	ZIPCleanup
FIELD	436:20	436:20	7	ZIPCleanup
LEAF_NODE	436:20	436:20	8	ZIPCleanup
LEAF_NODE	436:30	436:30	4	;
EXPR_STATEMENT	440:1	440:30	3	( void ) TIFFPredictorInit ( tif ) ;
EXPR	440:1	440:8	4	( void ) TIFFPredictorInit ( tif )
LEAF_NODE	440:1	440:1	5	(
TYPE_NAME	440:2	440:2	5	void
LEAF_NODE	440:2	440:2	6	void
LEAF_NODE	440:6	440:6	5	)
FUNCTION_CALL	440:8	440:29	5	TIFFPredictorInit ( tif )
CALLEE	440:8	440:8	6	TIFFPredictorInit
LEAF_NODE	440:8	440:8	7	TIFFPredictorInit
LEAF_NODE	440:25	440:25	6	(
ARGUMENT	440:26	440:26	6	tif
FIELD	440:26	440:26	7	tif
LEAF_NODE	440:26	440:26	8	tif
LEAF_NODE	440:29	440:29	6	)
LEAF_NODE	440:30	440:30	4	;
JUMP_STATEMENT	441:1	441:11	3	return ( 1 ) ;
KEYWORD	441:1	441:1	4	return
LEAF_NODE	441:1	441:1	5	return
DESTINATION	441:8	441:8	4	( 1 )
EXPR	441:8	441:10	5	( 1 )
LEAF_NODE	441:8	441:8	6	(
FIELD	441:9	441:9	6	1
LEAF_NODE	441:9	441:9	7	1
LEAF_NODE	441:10	441:10	6	)
LEAF_NODE	441:11	441:11	4	;
LABEL	442:0	442:3	3	bad :
LEAF_NODE	442:0	442:0	4	bad
LEAF_NODE	442:3	442:3	4	:
EXPR_STATEMENT	443:1	444:38	3	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for ZIP state block" ) ;
EXPR	443:1	443:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for ZIP state block" )
FUNCTION_CALL	443:1	444:37	5	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for ZIP state block" )
CALLEE	443:1	443:1	6	TIFFErrorExt
LEAF_NODE	443:1	443:1	7	TIFFErrorExt
LEAF_NODE	443:13	443:13	6	(
ARGUMENT	443:14	443:14	6	tif -> tif_clientdata
FIELD	443:14	443:19	7	tif -> tif_clientdata
LEAF_NODE	443:14	443:14	8	tif
LEAF_NODE	443:17	443:17	8	->
LEAF_NODE	443:19	443:19	8	tif_clientdata
LEAF_NODE	443:33	443:33	6	,
ARGUMENT	443:35	443:35	6	module
FIELD	443:35	443:35	7	module
LEAF_NODE	443:35	443:35	8	module
LEAF_NODE	443:41	443:41	6	,
ARGUMENT	444:7	444:7	6	"No space for ZIP state block"
FIELD	444:7	444:7	7	"No space for ZIP state block"
LEAF_NODE	444:7	444:7	8	"No space for ZIP state block"
LEAF_NODE	444:37	444:37	6	)
LEAF_NODE	444:38	444:38	4	;
JUMP_STATEMENT	445:1	445:11	3	return ( 0 ) ;
KEYWORD	445:1	445:1	4	return
LEAF_NODE	445:1	445:1	5	return
DESTINATION	445:8	445:8	4	( 0 )
EXPR	445:8	445:10	5	( 0 )
LEAF_NODE	445:8	445:8	6	(
FIELD	445:9	445:9	6	0
LEAF_NODE	445:9	445:9	7	0
LEAF_NODE	445:10	445:10	6	)
LEAF_NODE	445:11	445:11	4	;
LEAF_NODE	446:0	446:0	2	}
