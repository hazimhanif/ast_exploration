SOURCE_FILE	31:7	39:0	0	
SIMPLE_DECL	31:7	31:63	1	char [ ] sccsid ; sccsid = "@(#)strcasecmp.c\t8.1 (Berkeley) 6/4/93" ;
VAR_DECL	31:7	31:12	2	char [ ] sccsid ; sccsid = "@(#)strcasecmp.c\t8.1 (Berkeley) 6/4/93"
TYPE	31:7	31:18	3	char [ ]
TYPE_NAME	31:7	31:7	4	char
LEAF_NODE	31:7	31:7	5	char
TYPE_SUFFIX	31:18	31:19	4	[ ]
LEAF_NODE	31:18	31:18	5	[
LEAF_NODE	31:19	31:19	5	]
NAME	31:12	31:12	3	sccsid
LEAF_NODE	31:12	31:12	4	sccsid
LEAF_NODE	0:0	0:0	3	;
INIT	31:12	31:12	3	sccsid = "@(#)strcasecmp.c\t8.1 (Berkeley) 6/4/93"
ASSIGN	31:12	31:23	4	sccsid = "@(#)strcasecmp.c\t8.1 (Berkeley) 6/4/93"
LVAL	31:12	31:12	5	sccsid
NAME	31:12	31:12	6	sccsid
LEAF_NODE	31:12	31:12	7	sccsid
ASSIGN_OP	31:21	31:21	5	=
LEAF_NODE	31:21	31:21	6	=
RVAL	31:23	31:23	5	"@(#)strcasecmp.c\t8.1 (Berkeley) 6/4/93"
FIELD	31:23	31:23	6	"@(#)strcasecmp.c\t8.1 (Berkeley) 6/4/93"
LEAF_NODE	31:23	31:23	7	"@(#)strcasecmp.c\t8.1 (Berkeley) 6/4/93"
LEAF_NODE	31:63	31:63	2	;
FUNCTION_DEF	39:0	49:0	1	
RETURN_TYPE	39:0	39:0	2	int
TYPE_NAME	39:0	39:0	3	int
LEAF_NODE	39:0	39:0	4	int
FUNCTION_NAME	40:0	40:0	2	strcasecmp
LEAF_NODE	40:0	40:0	3	strcasecmp
PARAMETER_LIST	40:10	40:41	2	( const char * s1 , const char * s2 )
LEAF_NODE	40:10	40:10	3	(
PARAMETER_DECL	40:11	40:23	3	const char * s1
TYPE	40:11	40:22	4	const char *
TYPE_NAME	40:11	40:17	5	const char
LEAF_NODE	40:11	40:11	6	const
LEAF_NODE	40:17	40:17	6	char
POINTER	40:22	40:22	5	*
LEAF_NODE	40:22	40:22	6	*
NAME	40:23	40:23	4	s1
LEAF_NODE	40:23	40:23	5	s1
LEAF_NODE	40:25	40:25	3	,
PARAMETER_DECL	40:27	40:39	3	const char * s2
TYPE	40:27	40:38	4	const char *
TYPE_NAME	40:27	40:33	5	const char
LEAF_NODE	40:27	40:27	6	const
LEAF_NODE	40:33	40:33	6	char
POINTER	40:38	40:38	5	*
LEAF_NODE	40:38	40:38	6	*
NAME	40:39	40:39	4	s2
LEAF_NODE	40:39	40:39	5	s2
LEAF_NODE	40:41	40:41	3	)
LEAF_NODE	41:0	41:0	2	{
STATEMENTS	42:1	48:53	2	
SIMPLE_DECL	42:1	43:35	3	const unsigned char * us1 ; us1 = ( const unsigned char * ) s1 , const unsigned char * us2 ; us2 = ( const unsigned char * ) s2 ;
INIT_DECL_LIST	42:1	42:1	4	const unsigned char * us1 ; us1 = ( const unsigned char * ) s1 , const unsigned char * us2 ; us2 = ( const unsigned char * ) s2
VAR_DECL	42:1	42:22	5	const unsigned char * us1 ; us1 = ( const unsigned char * ) s1
TYPE	42:1	42:21	6	const unsigned char *
TYPE_NAME	42:1	42:16	7	const unsigned char
LEAF_NODE	42:1	42:1	8	const
LEAF_NODE	42:7	42:7	8	unsigned
LEAF_NODE	42:16	42:16	8	char
POINTER	42:21	42:21	7	*
LEAF_NODE	42:21	42:21	8	*
NAME	42:22	42:22	6	us1
LEAF_NODE	42:22	42:22	7	us1
LEAF_NODE	0:0	0:0	6	;
INIT	42:22	42:22	6	us1 = ( const unsigned char * ) s1
ASSIGN	42:22	42:28	7	us1 = ( const unsigned char * ) s1
LVAL	42:22	42:22	8	us1
NAME	42:22	42:22	9	us1
LEAF_NODE	42:22	42:22	10	us1
ASSIGN_OP	42:26	42:26	8	=
LEAF_NODE	42:26	42:26	9	=
RVAL	42:28	42:51	8	( const unsigned char * ) s1
LEAF_NODE	42:28	42:28	9	(
TYPE_NAME	42:29	42:44	9	const unsigned char
LEAF_NODE	42:29	42:29	10	const
LEAF_NODE	42:35	42:35	10	unsigned
LEAF_NODE	42:44	42:44	10	char
LEAF_NODE	42:49	42:49	9	*
LEAF_NODE	42:50	42:50	9	)
FIELD	42:51	42:51	9	s1
LEAF_NODE	42:51	42:51	10	s1
LEAF_NODE	42:53	42:53	5	,
VAR_DECL	42:1	43:4	5	const unsigned char * us2 ; us2 = ( const unsigned char * ) s2
TYPE	42:1	43:3	6	const unsigned char *
TYPE_NAME	42:1	42:16	7	const unsigned char
LEAF_NODE	42:1	42:1	8	const
LEAF_NODE	42:7	42:7	8	unsigned
LEAF_NODE	42:16	42:16	8	char
POINTER	43:3	43:3	7	*
LEAF_NODE	43:3	43:3	8	*
NAME	43:4	43:4	6	us2
LEAF_NODE	43:4	43:4	7	us2
LEAF_NODE	0:0	0:0	6	;
INIT	43:4	43:4	6	us2 = ( const unsigned char * ) s2
ASSIGN	43:4	43:10	7	us2 = ( const unsigned char * ) s2
LVAL	43:4	43:4	8	us2
NAME	43:4	43:4	9	us2
LEAF_NODE	43:4	43:4	10	us2
ASSIGN_OP	43:8	43:8	8	=
LEAF_NODE	43:8	43:8	9	=
RVAL	43:10	43:33	8	( const unsigned char * ) s2
LEAF_NODE	43:10	43:10	9	(
TYPE_NAME	43:11	43:26	9	const unsigned char
LEAF_NODE	43:11	43:11	10	const
LEAF_NODE	43:17	43:17	10	unsigned
LEAF_NODE	43:26	43:26	10	char
LEAF_NODE	43:31	43:31	9	*
LEAF_NODE	43:32	43:32	9	)
FIELD	43:33	43:33	9	s2
LEAF_NODE	43:33	43:33	10	s2
LEAF_NODE	43:35	43:35	4	;
ITERATION	45:1	46:2	3	
KEYWORD	45:1	45:1	4	while
LEAF_NODE	45:1	45:1	5	while
LEAF_NODE	45:7	45:7	4	(
CONDITION	45:8	45:8	4	tolower ( ( int ) * us1 ) == tolower ( ( int ) * us2 ++ )
EXPR	45:8	45:31	5	tolower ( ( int ) * us1 ) == tolower ( ( int ) * us2 ++ )
FUNCTION_CALL	45:8	45:26	6	tolower ( ( int ) * us1 )
CALLEE	45:8	45:8	7	tolower
LEAF_NODE	45:8	45:8	8	tolower
LEAF_NODE	45:15	45:15	7	(
ARGUMENT	45:16	45:22	7	( int ) * us1
LEAF_NODE	45:16	45:16	8	(
TYPE_NAME	45:17	45:17	8	int
LEAF_NODE	45:17	45:17	9	int
LEAF_NODE	45:20	45:20	8	)
UNARY_EXPR	45:22	45:23	8	* us1
UNARY_OPERATOR	45:22	45:22	9	*
LEAF_NODE	45:22	45:22	10	*
FIELD	45:23	45:23	9	us1
LEAF_NODE	45:23	45:23	10	us1
LEAF_NODE	45:26	45:26	7	)
EQ_OPERATOR	45:28	45:28	6	==
LEAF_NODE	45:28	45:28	7	==
FUNCTION_CALL	45:31	45:51	6	tolower ( ( int ) * us2 ++ )
CALLEE	45:31	45:31	7	tolower
LEAF_NODE	45:31	45:31	8	tolower
LEAF_NODE	45:38	45:38	7	(
ARGUMENT	45:39	45:45	7	( int ) * us2 ++
LEAF_NODE	45:39	45:39	8	(
TYPE_NAME	45:40	45:40	8	int
LEAF_NODE	45:40	45:40	9	int
LEAF_NODE	45:43	45:43	8	)
UNARY_EXPR	45:45	45:46	8	* us2 ++
UNARY_OPERATOR	45:45	45:45	9	*
LEAF_NODE	45:45	45:45	10	*
FIELD	45:46	45:49	9	us2 ++
LEAF_NODE	45:46	45:46	10	us2
LEAF_NODE	45:49	45:49	10	++
LEAF_NODE	45:51	45:51	7	)
LEAF_NODE	45:52	45:52	4	)
STATEMENTS	46:2	46:2	4	
SELECTION	46:2	47:3	5	
KEYWORD	46:2	46:2	6	if
LEAF_NODE	46:2	46:2	7	if
LEAF_NODE	46:5	46:5	6	(
CONDITION	46:6	46:6	6	* us1 ++ == '\0'
EXPR	46:6	46:16	7	* us1 ++ == '\0'
UNARY_EXPR	46:6	46:7	8	* us1 ++
UNARY_OPERATOR	46:6	46:6	9	*
LEAF_NODE	46:6	46:6	10	*
FIELD	46:7	46:10	9	us1 ++
LEAF_NODE	46:7	46:7	10	us1
LEAF_NODE	46:10	46:10	10	++
EQ_OPERATOR	46:13	46:13	8	==
LEAF_NODE	46:13	46:13	9	==
FIELD	46:16	46:16	8	'\0'
LEAF_NODE	46:16	46:16	9	'\0'
LEAF_NODE	46:20	46:20	6	)
STATEMENTS	47:3	47:3	6	
JUMP_STATEMENT	47:3	47:13	7	return ( 0 ) ;
KEYWORD	47:3	47:3	8	return
LEAF_NODE	47:3	47:3	9	return
DESTINATION	47:10	47:10	8	( 0 )
EXPR	47:10	47:12	9	( 0 )
LEAF_NODE	47:10	47:10	10	(
FIELD	47:11	47:11	10	0
LEAF_NODE	47:11	47:11	11	0
LEAF_NODE	47:12	47:12	10	)
LEAF_NODE	47:13	47:13	8	;
LEAF_NODE	48:1	48:1	3	return
LEAF_NODE	48:8	48:8	3	(
LEAF_NODE	48:9	48:9	3	tolower
LEAF_NODE	48:16	48:16	3	(
LEAF_NODE	48:17	48:17	3	(
LEAF_NODE	48:18	48:18	3	int
LEAF_NODE	48:21	48:21	3	)
LEAF_NODE	48:23	48:23	3	*
LEAF_NODE	48:24	48:24	3	us1
LEAF_NODE	48:27	48:27	3	)
LEAF_NODE	48:29	48:29	3	-
LEAF_NODE	48:31	48:31	3	tolower
LEAF_NODE	48:38	48:38	3	(
LEAF_NODE	48:39	48:39	3	(
LEAF_NODE	48:40	48:40	3	int
LEAF_NODE	48:43	48:43	3	)
LEAF_NODE	48:45	48:45	3	*
LEAF_NODE	48:46	48:46	3	--
LEAF_NODE	48:48	48:48	3	us2
LEAF_NODE	48:51	48:51	3	)
LEAF_NODE	48:52	48:52	3	)
LEAF_NODE	48:53	48:53	3	;
LEAF_NODE	49:0	49:0	2	}
