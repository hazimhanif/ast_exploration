SOURCE_FILE	64:7	567:0	0	
SIMPLE_DECL	64:7	64:27	1	char * [ MAX_BUFFS ] buf ;
VAR_DECL	64:7	64:13	2	char * [ MAX_BUFFS ] buf
TYPE	64:7	64:16	3	char * [ MAX_BUFFS ]
TYPE_NAME	64:7	64:7	4	char
LEAF_NODE	64:7	64:7	5	char
POINTER	64:12	64:12	4	*
LEAF_NODE	64:12	64:12	5	*
TYPE_SUFFIX	64:16	64:26	4	[ MAX_BUFFS ]
LEAF_NODE	64:16	64:16	5	[
FIELD	64:17	64:17	5	MAX_BUFFS
LEAF_NODE	64:17	64:17	6	MAX_BUFFS
LEAF_NODE	64:26	64:26	5	]
NAME	64:13	64:13	3	buf
LEAF_NODE	64:13	64:13	4	buf
LEAF_NODE	64:27	64:27	2	;
SIMPLE_DECL	65:7	65:31	1	long [ MAX_BUFFS ] buf_off ;
VAR_DECL	65:7	65:13	2	long [ MAX_BUFFS ] buf_off
TYPE	65:7	65:20	3	long [ MAX_BUFFS ]
TYPE_NAME	65:7	65:7	4	long
LEAF_NODE	65:7	65:7	5	long
TYPE_SUFFIX	65:20	65:30	4	[ MAX_BUFFS ]
LEAF_NODE	65:20	65:20	5	[
FIELD	65:21	65:21	5	MAX_BUFFS
LEAF_NODE	65:21	65:21	6	MAX_BUFFS
LEAF_NODE	65:30	65:30	5	]
NAME	65:13	65:13	3	buf_off
LEAF_NODE	65:13	65:13	4	buf_off
LEAF_NODE	65:31	65:31	2	;
SIMPLE_DECL	66:7	66:32	1	long [ MAX_BUFFS ] buf_size ;
VAR_DECL	66:7	66:13	2	long [ MAX_BUFFS ] buf_size
TYPE	66:7	66:21	3	long [ MAX_BUFFS ]
TYPE_NAME	66:7	66:7	4	long
LEAF_NODE	66:7	66:7	5	long
TYPE_SUFFIX	66:21	66:31	4	[ MAX_BUFFS ]
LEAF_NODE	66:21	66:21	5	[
FIELD	66:22	66:22	5	MAX_BUFFS
LEAF_NODE	66:22	66:22	6	MAX_BUFFS
LEAF_NODE	66:31	66:31	5	]
NAME	66:13	66:13	3	buf_size
LEAF_NODE	66:13	66:13	4	buf_size
LEAF_NODE	66:32	66:32	2	;
SIMPLE_DECL	67:7	67:27	1	long [ MAX_BUFFS ] fds ;
VAR_DECL	67:7	67:13	2	long [ MAX_BUFFS ] fds
TYPE	67:7	67:16	3	long [ MAX_BUFFS ]
TYPE_NAME	67:7	67:7	4	long
LEAF_NODE	67:7	67:7	5	long
TYPE_SUFFIX	67:16	67:26	4	[ MAX_BUFFS ]
LEAF_NODE	67:16	67:16	5	[
FIELD	67:17	67:17	5	MAX_BUFFS
LEAF_NODE	67:17	67:17	6	MAX_BUFFS
LEAF_NODE	67:26	67:26	5	]
NAME	67:13	67:13	3	fds
LEAF_NODE	67:13	67:13	4	fds
LEAF_NODE	67:27	67:27	2	;
SIMPLE_DECL	68:7	68:32	1	int [ MAX_BUFFS ] buf_mode ;
VAR_DECL	68:7	68:13	2	int [ MAX_BUFFS ] buf_mode
TYPE	68:7	68:21	3	int [ MAX_BUFFS ]
TYPE_NAME	68:7	68:7	4	int
LEAF_NODE	68:7	68:7	5	int
TYPE_SUFFIX	68:21	68:31	4	[ MAX_BUFFS ]
LEAF_NODE	68:21	68:21	5	[
FIELD	68:22	68:22	5	MAX_BUFFS
LEAF_NODE	68:22	68:22	6	MAX_BUFFS
LEAF_NODE	68:31	68:31	5	]
NAME	68:13	68:13	3	buf_mode
LEAF_NODE	68:13	68:13	4	buf_mode
LEAF_NODE	68:32	68:32	2	;
SIMPLE_DECL	70:7	70:36	1	int library_init_done ; library_init_done = FALSE ;
VAR_DECL	70:7	70:11	2	int library_init_done ; library_init_done = FALSE
TYPE	70:7	70:7	3	int
TYPE_NAME	70:7	70:7	4	int
LEAF_NODE	70:7	70:7	5	int
NAME	70:11	70:11	3	library_init_done
LEAF_NODE	70:11	70:11	4	library_init_done
LEAF_NODE	0:0	0:0	3	;
INIT	70:11	70:11	3	library_init_done = FALSE
ASSIGN	70:11	70:31	4	library_init_done = FALSE
LVAL	70:11	70:11	5	library_init_done
NAME	70:11	70:11	6	library_init_done
LEAF_NODE	70:11	70:11	7	library_init_done
ASSIGN_OP	70:29	70:29	5	=
LEAF_NODE	70:29	70:29	6	=
RVAL	70:31	70:31	5	FALSE
FIELD	70:31	70:31	6	FALSE
LEAF_NODE	70:31	70:31	7	FALSE
LEAF_NODE	70:36	70:36	2	;
SIMPLE_DECL	88:7	88:23	1	void mem_init ; mem_init mem_init ( ) ;
VAR_DECL	88:7	88:12	2	void mem_init ; mem_init mem_init ( )
TYPE	88:7	88:7	3	void
TYPE_NAME	88:7	88:7	4	void
LEAF_NODE	88:7	88:7	5	void
NAME	88:12	88:12	3	mem_init
LEAF_NODE	88:12	88:12	4	mem_init
LEAF_NODE	0:0	0:0	3	;
INIT	88:12	88:12	3	mem_init mem_init ( )
ASSIGN	88:12	88:21	4	mem_init mem_init ( )
LVAL	88:12	88:12	5	mem_init
NAME	88:12	88:12	6	mem_init
LEAF_NODE	88:12	88:12	7	mem_init
ASSIGN_OP	88:12	88:12	5	mem_init
NAME	88:12	88:12	6	mem_init
LEAF_NODE	88:12	88:12	7	mem_init
RVAL	88:21	88:22	5	( )
LEAF_NODE	88:21	88:21	6	(
LEAF_NODE	88:22	88:22	6	)
LEAF_NODE	88:23	88:23	2	;
FUNCTION_DEF	119:0	225:0	1	
RETURN_TYPE	119:0	119:0	2	int
TYPE_NAME	119:0	119:0	3	int
LEAF_NODE	119:0	119:0	4	int
FUNCTION_NAME	119:4	119:4	2	mfs_open
LEAF_NODE	119:4	119:4	3	mfs_open
PARAMETER_LIST	119:13	119:48	2	( void * buffer , int size , char * mode )
LEAF_NODE	119:13	119:13	3	(
PARAMETER_DECL	119:14	119:20	3	void * buffer
TYPE	119:14	119:19	4	void *
TYPE_NAME	119:14	119:14	5	void
LEAF_NODE	119:14	119:14	6	void
POINTER	119:19	119:19	5	*
LEAF_NODE	119:19	119:19	6	*
NAME	119:20	119:20	4	buffer
LEAF_NODE	119:20	119:20	5	buffer
LEAF_NODE	119:26	119:26	3	,
PARAMETER_DECL	119:28	119:32	3	int size
TYPE	119:28	119:28	4	int
TYPE_NAME	119:28	119:28	5	int
LEAF_NODE	119:28	119:28	6	int
NAME	119:32	119:32	4	size
LEAF_NODE	119:32	119:32	5	size
LEAF_NODE	119:36	119:36	3	,
PARAMETER_DECL	119:38	119:44	3	char * mode
TYPE	119:38	119:43	4	char *
TYPE_NAME	119:38	119:38	5	char
LEAF_NODE	119:38	119:38	6	char
POINTER	119:43	119:43	5	*
LEAF_NODE	119:43	119:43	6	*
NAME	119:44	119:44	4	mode
LEAF_NODE	119:44	119:44	5	mode
LEAF_NODE	119:48	119:48	3	)
LEAF_NODE	120:0	120:0	2	{
STATEMENTS	121:4	224:16	2	
SIMPLE_DECL	121:4	121:14	3	int ret , int i ;
INIT_DECL_LIST	121:4	121:4	4	int ret , int i
VAR_DECL	121:4	121:8	5	int ret
TYPE	121:4	121:4	6	int
TYPE_NAME	121:4	121:4	7	int
LEAF_NODE	121:4	121:4	8	int
NAME	121:8	121:8	6	ret
LEAF_NODE	121:8	121:8	7	ret
LEAF_NODE	121:11	121:11	5	,
VAR_DECL	121:4	121:13	5	int i
TYPE	121:4	121:4	6	int
TYPE_NAME	121:4	121:4	7	int
LEAF_NODE	121:4	121:4	8	int
NAME	121:13	121:13	6	i
LEAF_NODE	121:13	121:13	7	i
LEAF_NODE	121:14	121:14	4	;
SIMPLE_DECL	122:4	122:13	3	void * tmp ;
VAR_DECL	122:4	122:10	4	void * tmp
TYPE	122:4	122:9	5	void *
TYPE_NAME	122:4	122:4	6	void
LEAF_NODE	122:4	122:4	7	void
POINTER	122:9	122:9	6	*
LEAF_NODE	122:9	122:9	7	*
NAME	122:10	122:10	5	tmp
LEAF_NODE	122:10	122:10	6	tmp
LEAF_NODE	122:13	122:13	4	;
SELECTION	124:4	125:4	3	
KEYWORD	124:4	124:4	4	if
LEAF_NODE	124:4	124:4	5	if
LEAF_NODE	124:7	124:7	4	(
CONDITION	124:8	124:8	4	library_init_done == FALSE
EXPR	124:8	124:29	5	library_init_done == FALSE
FIELD	124:8	124:8	6	library_init_done
LEAF_NODE	124:8	124:8	7	library_init_done
EQ_OPERATOR	124:26	124:26	6	==
LEAF_NODE	124:26	124:26	7	==
FIELD	124:29	124:29	6	FALSE
LEAF_NODE	124:29	124:29	7	FALSE
LEAF_NODE	124:34	124:34	4	)
STATEMENTS	125:4	128:4	4	
LEAF_NODE	125:4	125:4	5	{
STATEMENTS	126:8	127:8	5	
EXPR_STATEMENT	126:8	126:19	6	mem_init ( ) ;
EXPR	126:8	126:8	7	mem_init ( )
FUNCTION_CALL	126:8	126:18	8	mem_init ( )
CALLEE	126:8	126:8	9	mem_init
LEAF_NODE	126:8	126:8	10	mem_init
LEAF_NODE	126:17	126:17	9	(
LEAF_NODE	126:18	126:18	9	)
LEAF_NODE	126:19	126:19	7	;
EXPR_STATEMENT	127:8	127:32	6	library_init_done = TRUE ;
EXPR	127:8	127:8	7	library_init_done = TRUE
ASSIGN	127:8	127:28	8	library_init_done = TRUE
LVAL	127:8	127:8	9	library_init_done
FIELD	127:8	127:8	10	library_init_done
LEAF_NODE	127:8	127:8	11	library_init_done
ASSIGN_OP	127:26	127:26	9	=
LEAF_NODE	127:26	127:26	10	=
RVAL	127:28	127:28	9	TRUE
FIELD	127:28	127:28	10	TRUE
LEAF_NODE	127:28	127:28	11	TRUE
LEAF_NODE	127:32	127:32	7	;
LEAF_NODE	128:4	128:4	5	}
EXPR_STATEMENT	130:4	130:12	3	ret = - 1 ;
EXPR	130:4	130:4	4	ret = - 1
ASSIGN	130:4	130:10	5	ret = - 1
LVAL	130:4	130:4	6	ret
FIELD	130:4	130:4	7	ret
LEAF_NODE	130:4	130:4	8	ret
ASSIGN_OP	130:8	130:8	6	=
LEAF_NODE	130:8	130:8	7	=
RVAL	130:10	130:10	6	- 1
UNARY_EXPR	130:10	130:11	7	- 1
UNARY_OPERATOR	130:10	130:10	8	-
LEAF_NODE	130:10	130:10	9	-
FIELD	130:11	130:11	8	1
LEAF_NODE	130:11	130:11	9	1
LEAF_NODE	130:12	130:12	4	;
ITERATION	134:4	135:4	3	
KEYWORD	134:4	134:4	4	for
LEAF_NODE	134:4	134:4	5	for
LEAF_NODE	134:8	134:8	4	(
FOR_INIT	134:9	134:14	4	i = 0 ;
EXPR	134:9	134:9	5	i = 0
ASSIGN	134:9	134:13	6	i = 0
LVAL	134:9	134:9	7	i
FIELD	134:9	134:9	8	i
LEAF_NODE	134:9	134:9	9	i
ASSIGN_OP	134:11	134:11	7	=
LEAF_NODE	134:11	134:11	8	=
RVAL	134:13	134:13	7	0
FIELD	134:13	134:13	8	0
LEAF_NODE	134:13	134:13	9	0
LEAF_NODE	134:14	134:14	5	;
CONDITION	134:16	134:16	4	i < MAX_BUFFS
EXPR	134:16	134:20	5	i < MAX_BUFFS
FIELD	134:16	134:16	6	i
LEAF_NODE	134:16	134:16	7	i
REL_OPERATOR	134:18	134:18	6	<
LEAF_NODE	134:18	134:18	7	<
FIELD	134:20	134:20	6	MAX_BUFFS
LEAF_NODE	134:20	134:20	7	MAX_BUFFS
LEAF_NODE	134:29	134:29	4	;
FOR_EXPR	134:31	134:31	4	i ++
EXPR	134:31	134:31	5	i ++
FIELD	134:31	134:32	6	i ++
LEAF_NODE	134:31	134:31	7	i
LEAF_NODE	134:32	134:32	7	++
LEAF_NODE	134:34	134:34	4	)
STATEMENTS	135:4	141:4	4	
LEAF_NODE	135:4	135:4	5	{
STATEMENTS	136:8	136:8	5	
SELECTION	136:8	137:8	6	
KEYWORD	136:8	136:8	7	if
LEAF_NODE	136:8	136:8	8	if
LEAF_NODE	136:11	136:11	7	(
CONDITION	136:12	136:12	7	fds [ i ] == - 1
EXPR	136:12	136:22	8	fds [ i ] == - 1
FIELD	136:12	136:17	9	fds [ i ]
LEAF_NODE	136:12	136:12	10	fds
LEAF_NODE	136:15	136:15	10	[
EXPR	136:16	136:16	10	i
FIELD	136:16	136:16	11	i
LEAF_NODE	136:16	136:16	12	i
LEAF_NODE	136:17	136:17	10	]
EQ_OPERATOR	136:19	136:19	9	==
LEAF_NODE	136:19	136:19	10	==
UNARY_EXPR	136:22	136:23	9	- 1
UNARY_OPERATOR	136:22	136:22	10	-
LEAF_NODE	136:22	136:22	11	-
FIELD	136:23	136:23	10	1
LEAF_NODE	136:23	136:23	11	1
LEAF_NODE	136:24	136:24	7	)
STATEMENTS	137:8	140:8	7	
LEAF_NODE	137:8	137:8	8	{
STATEMENTS	138:12	139:12	8	
EXPR_STATEMENT	138:12	138:19	9	ret = i ;
EXPR	138:12	138:12	10	ret = i
ASSIGN	138:12	138:18	11	ret = i
LVAL	138:12	138:12	12	ret
FIELD	138:12	138:12	13	ret
LEAF_NODE	138:12	138:12	14	ret
ASSIGN_OP	138:16	138:16	12	=
LEAF_NODE	138:16	138:16	13	=
RVAL	138:18	138:18	12	i
FIELD	138:18	138:18	13	i
LEAF_NODE	138:18	138:18	14	i
LEAF_NODE	138:19	138:19	10	;
JUMP_STATEMENT	139:12	139:17	9	break DESTINATION ;
KEYWORD	139:12	139:12	10	break
LEAF_NODE	139:12	139:12	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	139:17	139:17	10	;
LEAF_NODE	140:8	140:8	8	}
LEAF_NODE	141:4	141:4	5	}
SELECTION	143:4	144:4	3	
KEYWORD	143:4	143:4	4	if
LEAF_NODE	143:4	143:4	5	if
LEAF_NODE	143:7	143:7	4	(
CONDITION	143:8	143:8	4	i == MAX_BUFFS
EXPR	143:8	143:13	5	i == MAX_BUFFS
FIELD	143:8	143:8	6	i
LEAF_NODE	143:8	143:8	7	i
EQ_OPERATOR	143:10	143:10	6	==
LEAF_NODE	143:10	143:10	7	==
FIELD	143:13	143:13	6	MAX_BUFFS
LEAF_NODE	143:13	143:13	7	MAX_BUFFS
LEAF_NODE	143:22	143:22	4	)
STATEMENTS	144:4	147:4	4	
LEAF_NODE	144:4	144:4	5	{
STATEMENTS	145:8	146:8	5	
EXPR_STATEMENT	145:8	145:16	6	ret = - 1 ;
EXPR	145:8	145:8	7	ret = - 1
ASSIGN	145:8	145:14	8	ret = - 1
LVAL	145:8	145:8	9	ret
FIELD	145:8	145:8	10	ret
LEAF_NODE	145:8	145:8	11	ret
ASSIGN_OP	145:12	145:12	9	=
LEAF_NODE	145:12	145:12	10	=
RVAL	145:14	145:14	9	- 1
UNARY_EXPR	145:14	145:15	10	- 1
UNARY_OPERATOR	145:14	145:14	11	-
LEAF_NODE	145:14	145:14	12	-
FIELD	145:15	145:15	11	1
LEAF_NODE	145:15	145:15	12	1
LEAF_NODE	145:16	145:16	7	;
EXPR_STATEMENT	146:8	146:22	6	errno = EMFILE ;
EXPR	146:8	146:8	7	errno = EMFILE
ASSIGN	146:8	146:16	8	errno = EMFILE
LVAL	146:8	146:8	9	errno
FIELD	146:8	146:8	10	errno
LEAF_NODE	146:8	146:8	11	errno
ASSIGN_OP	146:14	146:14	9	=
LEAF_NODE	146:14	146:14	10	=
RVAL	146:16	146:16	9	EMFILE
FIELD	146:16	146:16	10	EMFILE
LEAF_NODE	146:16	146:16	11	EMFILE
LEAF_NODE	146:22	146:22	7	;
LEAF_NODE	147:4	147:4	5	}
SELECTION	149:4	150:4	3	
KEYWORD	149:4	149:4	4	if
LEAF_NODE	149:4	149:4	5	if
LEAF_NODE	149:7	149:7	4	(
CONDITION	149:8	149:8	4	ret >= 0 && * mode == 'r'
EXPR	149:8	149:8	5	ret >= 0 && * mode == 'r'
AND	149:8	149:20	6	ret >= 0 && * mode == 'r'
EXPR	149:8	149:15	7	ret >= 0
FIELD	149:8	149:8	8	ret
LEAF_NODE	149:8	149:8	9	ret
REL_OPERATOR	149:12	149:12	8	>=
LEAF_NODE	149:12	149:12	9	>=
FIELD	149:15	149:15	8	0
LEAF_NODE	149:15	149:15	9	0
LEAF_NODE	149:17	149:17	7	&&
EXPR	149:20	149:29	7	* mode == 'r'
UNARY_EXPR	149:20	149:21	8	* mode
UNARY_OPERATOR	149:20	149:20	9	*
LEAF_NODE	149:20	149:20	10	*
FIELD	149:21	149:21	9	mode
LEAF_NODE	149:21	149:21	10	mode
EQ_OPERATOR	149:26	149:26	8	==
LEAF_NODE	149:26	149:26	9	==
FIELD	149:29	149:29	8	'r'
LEAF_NODE	149:29	149:29	9	'r'
LEAF_NODE	149:32	149:32	4	)
STATEMENTS	150:4	162:4	4	
LEAF_NODE	150:4	150:4	5	{
STATEMENTS	151:8	156:8	5	
SELECTION	151:8	152:8	6	
KEYWORD	151:8	151:8	7	if
LEAF_NODE	151:8	151:8	8	if
LEAF_NODE	151:11	151:11	7	(
CONDITION	151:12	151:12	7	buffer == ( void * ) NULL
EXPR	151:12	151:30	8	buffer == ( void * ) NULL
FIELD	151:12	151:12	9	buffer
LEAF_NODE	151:12	151:12	10	buffer
EQ_OPERATOR	151:19	151:19	9	==
LEAF_NODE	151:19	151:19	10	==
LEAF_NODE	151:22	151:22	9	(
TYPE_NAME	151:23	151:23	9	void
LEAF_NODE	151:23	151:23	10	void
LEAF_NODE	151:28	151:28	9	*
LEAF_NODE	151:29	151:29	9	)
FIELD	151:30	151:30	9	NULL
LEAF_NODE	151:30	151:30	10	NULL
LEAF_NODE	151:34	151:34	7	)
STATEMENTS	152:8	155:8	7	
LEAF_NODE	152:8	152:8	8	{
STATEMENTS	153:12	154:12	8	
EXPR_STATEMENT	153:12	153:20	9	ret = - 1 ;
EXPR	153:12	153:12	10	ret = - 1
ASSIGN	153:12	153:18	11	ret = - 1
LVAL	153:12	153:12	12	ret
FIELD	153:12	153:12	13	ret
LEAF_NODE	153:12	153:12	14	ret
ASSIGN_OP	153:16	153:16	12	=
LEAF_NODE	153:16	153:16	13	=
RVAL	153:18	153:18	12	- 1
UNARY_EXPR	153:18	153:19	13	- 1
UNARY_OPERATOR	153:18	153:18	14	-
LEAF_NODE	153:18	153:18	15	-
FIELD	153:19	153:19	14	1
LEAF_NODE	153:19	153:19	15	1
LEAF_NODE	153:20	153:20	10	;
EXPR_STATEMENT	154:12	154:26	9	errno = EINVAL ;
EXPR	154:12	154:12	10	errno = EINVAL
ASSIGN	154:12	154:20	11	errno = EINVAL
LVAL	154:12	154:12	12	errno
FIELD	154:12	154:12	13	errno
LEAF_NODE	154:12	154:12	14	errno
ASSIGN_OP	154:18	154:18	12	=
LEAF_NODE	154:18	154:18	13	=
RVAL	154:20	154:20	12	EINVAL
FIELD	154:20	154:20	13	EINVAL
LEAF_NODE	154:20	154:20	14	EINVAL
LEAF_NODE	154:26	154:26	10	;
LEAF_NODE	155:8	155:8	8	}
SELECTION	156:8	157:8	6	
KEYWORD	156:8	156:8	7	else
LEAF_NODE	156:8	156:8	8	else
STATEMENTS	157:8	161:8	7	
LEAF_NODE	157:8	157:8	8	{
STATEMENTS	158:12	160:12	8	
EXPR_STATEMENT	158:12	158:37	9	buf [ ret ] = ( char * ) buffer ;
EXPR	158:12	158:12	10	buf [ ret ] = ( char * ) buffer
ASSIGN	158:12	158:23	11	buf [ ret ] = ( char * ) buffer
LVAL	158:12	158:12	12	buf [ ret ]
FIELD	158:12	158:19	13	buf [ ret ]
LEAF_NODE	158:12	158:12	14	buf
LEAF_NODE	158:15	158:15	14	[
EXPR	158:16	158:16	14	ret
FIELD	158:16	158:16	15	ret
LEAF_NODE	158:16	158:16	16	ret
LEAF_NODE	158:19	158:19	14	]
ASSIGN_OP	158:21	158:21	12	=
LEAF_NODE	158:21	158:21	13	=
RVAL	158:23	158:31	12	( char * ) buffer
LEAF_NODE	158:23	158:23	13	(
TYPE_NAME	158:24	158:24	13	char
LEAF_NODE	158:24	158:24	14	char
LEAF_NODE	158:29	158:29	13	*
LEAF_NODE	158:30	158:30	13	)
FIELD	158:31	158:31	13	buffer
LEAF_NODE	158:31	158:31	14	buffer
LEAF_NODE	158:37	158:37	10	;
EXPR_STATEMENT	159:12	159:32	9	buf_size [ ret ] = size ;
EXPR	159:12	159:12	10	buf_size [ ret ] = size
ASSIGN	159:12	159:28	11	buf_size [ ret ] = size
LVAL	159:12	159:12	12	buf_size [ ret ]
FIELD	159:12	159:24	13	buf_size [ ret ]
LEAF_NODE	159:12	159:12	14	buf_size
LEAF_NODE	159:20	159:20	14	[
EXPR	159:21	159:21	14	ret
FIELD	159:21	159:21	15	ret
LEAF_NODE	159:21	159:21	16	ret
LEAF_NODE	159:24	159:24	14	]
ASSIGN_OP	159:26	159:26	12	=
LEAF_NODE	159:26	159:26	13	=
RVAL	159:28	159:28	12	size
FIELD	159:28	159:28	13	size
LEAF_NODE	159:28	159:28	14	size
LEAF_NODE	159:32	159:32	10	;
EXPR_STATEMENT	160:12	160:28	9	buf_off [ ret ] = 0 ;
EXPR	160:12	160:12	10	buf_off [ ret ] = 0
ASSIGN	160:12	160:27	11	buf_off [ ret ] = 0
LVAL	160:12	160:12	12	buf_off [ ret ]
FIELD	160:12	160:23	13	buf_off [ ret ]
LEAF_NODE	160:12	160:12	14	buf_off
LEAF_NODE	160:19	160:19	14	[
EXPR	160:20	160:20	14	ret
FIELD	160:20	160:20	15	ret
LEAF_NODE	160:20	160:20	16	ret
LEAF_NODE	160:23	160:23	14	]
ASSIGN_OP	160:25	160:25	12	=
LEAF_NODE	160:25	160:25	13	=
RVAL	160:27	160:27	12	0
FIELD	160:27	160:27	13	0
LEAF_NODE	160:27	160:27	14	0
LEAF_NODE	160:28	160:28	10	;
LEAF_NODE	161:8	161:8	8	}
LEAF_NODE	162:4	162:4	5	}
SELECTION	163:4	163:9	3	
KEYWORD	163:4	163:4	4	else
LEAF_NODE	163:4	163:4	5	else
STATEMENTS	163:9	163:9	4	
SELECTION	163:9	164:4	5	
KEYWORD	163:9	163:9	6	if
LEAF_NODE	163:9	163:9	7	if
LEAF_NODE	163:12	163:12	6	(
CONDITION	163:13	163:13	6	ret >= 0 && * mode == 'w'
EXPR	163:13	163:13	7	ret >= 0 && * mode == 'w'
AND	163:13	163:25	8	ret >= 0 && * mode == 'w'
EXPR	163:13	163:20	9	ret >= 0
FIELD	163:13	163:13	10	ret
LEAF_NODE	163:13	163:13	11	ret
REL_OPERATOR	163:17	163:17	10	>=
LEAF_NODE	163:17	163:17	11	>=
FIELD	163:20	163:20	10	0
LEAF_NODE	163:20	163:20	11	0
LEAF_NODE	163:22	163:22	9	&&
EXPR	163:25	163:34	9	* mode == 'w'
UNARY_EXPR	163:25	163:26	10	* mode
UNARY_OPERATOR	163:25	163:25	11	*
LEAF_NODE	163:25	163:25	12	*
FIELD	163:26	163:26	11	mode
LEAF_NODE	163:26	163:26	12	mode
EQ_OPERATOR	163:31	163:31	10	==
LEAF_NODE	163:31	163:31	11	==
FIELD	163:34	163:34	10	'w'
LEAF_NODE	163:34	163:34	11	'w'
LEAF_NODE	163:37	163:37	6	)
STATEMENTS	164:4	187:4	6	
LEAF_NODE	164:4	164:4	7	{
STATEMENTS	166:8	172:8	7	
SELECTION	166:8	167:8	8	
KEYWORD	166:8	166:8	9	if
LEAF_NODE	166:8	166:8	10	if
LEAF_NODE	166:11	166:11	9	(
CONDITION	166:12	166:12	9	buffer != ( void * ) NULL
EXPR	166:12	166:30	10	buffer != ( void * ) NULL
FIELD	166:12	166:12	11	buffer
LEAF_NODE	166:12	166:12	12	buffer
EQ_OPERATOR	166:19	166:19	11	!=
LEAF_NODE	166:19	166:19	12	!=
LEAF_NODE	166:22	166:22	11	(
TYPE_NAME	166:23	166:23	11	void
LEAF_NODE	166:23	166:23	12	void
LEAF_NODE	166:28	166:28	11	*
LEAF_NODE	166:29	166:29	11	)
FIELD	166:30	166:30	11	NULL
LEAF_NODE	166:30	166:30	12	NULL
LEAF_NODE	166:34	166:34	9	)
STATEMENTS	167:8	170:8	9	
LEAF_NODE	167:8	167:8	10	{
STATEMENTS	168:12	169:12	10	
EXPR_STATEMENT	168:12	168:20	11	ret = - 1 ;
EXPR	168:12	168:12	12	ret = - 1
ASSIGN	168:12	168:18	13	ret = - 1
LVAL	168:12	168:12	14	ret
FIELD	168:12	168:12	15	ret
LEAF_NODE	168:12	168:12	16	ret
ASSIGN_OP	168:16	168:16	14	=
LEAF_NODE	168:16	168:16	15	=
RVAL	168:18	168:18	14	- 1
UNARY_EXPR	168:18	168:19	15	- 1
UNARY_OPERATOR	168:18	168:18	16	-
LEAF_NODE	168:18	168:18	17	-
FIELD	168:19	168:19	16	1
LEAF_NODE	168:19	168:19	17	1
LEAF_NODE	168:20	168:20	12	;
EXPR_STATEMENT	169:12	169:26	11	errno = EINVAL ;
EXPR	169:12	169:12	12	errno = EINVAL
ASSIGN	169:12	169:20	13	errno = EINVAL
LVAL	169:12	169:12	14	errno
FIELD	169:12	169:12	15	errno
LEAF_NODE	169:12	169:12	16	errno
ASSIGN_OP	169:18	169:18	14	=
LEAF_NODE	169:18	169:18	15	=
RVAL	169:20	169:20	14	EINVAL
FIELD	169:20	169:20	15	EINVAL
LEAF_NODE	169:20	169:20	16	EINVAL
LEAF_NODE	169:26	169:26	12	;
LEAF_NODE	170:8	170:8	10	}
SELECTION	172:8	173:8	8	
KEYWORD	172:8	172:8	9	else
LEAF_NODE	172:8	172:8	10	else
STATEMENTS	173:8	186:8	9	
LEAF_NODE	173:8	173:8	10	{
STATEMENTS	174:12	180:12	10	
EXPR_STATEMENT	174:12	174:28	11	tmp = malloc ( 0 ) ;
EXPR	174:12	174:12	12	tmp = malloc ( 0 )
ASSIGN	174:12	174:18	13	tmp = malloc ( 0 )
LVAL	174:12	174:12	14	tmp
FIELD	174:12	174:12	15	tmp
LEAF_NODE	174:12	174:12	16	tmp
ASSIGN_OP	174:16	174:16	14	=
LEAF_NODE	174:16	174:16	15	=
RVAL	174:18	174:18	14	malloc ( 0 )
FUNCTION_CALL	174:18	174:27	15	malloc ( 0 )
CALLEE	174:18	174:18	16	malloc
LEAF_NODE	174:18	174:18	17	malloc
LEAF_NODE	174:25	174:25	16	(
ARGUMENT	174:26	174:26	16	0
FIELD	174:26	174:26	17	0
LEAF_NODE	174:26	174:26	18	0
LEAF_NODE	174:27	174:27	16	)
LEAF_NODE	174:28	174:28	12	;
SELECTION	175:12	176:12	11	
KEYWORD	175:12	175:12	12	if
LEAF_NODE	175:12	175:12	13	if
LEAF_NODE	175:15	175:15	12	(
CONDITION	175:16	175:16	12	tmp == ( void * ) NULL
EXPR	175:16	175:31	13	tmp == ( void * ) NULL
FIELD	175:16	175:16	14	tmp
LEAF_NODE	175:16	175:16	15	tmp
EQ_OPERATOR	175:20	175:20	14	==
LEAF_NODE	175:20	175:20	15	==
LEAF_NODE	175:23	175:23	14	(
TYPE_NAME	175:24	175:24	14	void
LEAF_NODE	175:24	175:24	15	void
LEAF_NODE	175:29	175:29	14	*
LEAF_NODE	175:30	175:30	14	)
FIELD	175:31	175:31	14	NULL
LEAF_NODE	175:31	175:31	15	NULL
LEAF_NODE	175:35	175:35	12	)
STATEMENTS	176:12	179:12	12	
LEAF_NODE	176:12	176:12	13	{
STATEMENTS	177:16	178:16	13	
EXPR_STATEMENT	177:16	177:24	14	ret = - 1 ;
EXPR	177:16	177:16	15	ret = - 1
ASSIGN	177:16	177:22	16	ret = - 1
LVAL	177:16	177:16	17	ret
FIELD	177:16	177:16	18	ret
LEAF_NODE	177:16	177:16	19	ret
ASSIGN_OP	177:20	177:20	17	=
LEAF_NODE	177:20	177:20	18	=
RVAL	177:22	177:22	17	- 1
UNARY_EXPR	177:22	177:23	18	- 1
UNARY_OPERATOR	177:22	177:22	19	-
LEAF_NODE	177:22	177:22	20	-
FIELD	177:23	177:23	19	1
LEAF_NODE	177:23	177:23	20	1
LEAF_NODE	177:24	177:24	15	;
EXPR_STATEMENT	178:16	178:30	14	errno = EDQUOT ;
EXPR	178:16	178:16	15	errno = EDQUOT
ASSIGN	178:16	178:24	16	errno = EDQUOT
LVAL	178:16	178:16	17	errno
FIELD	178:16	178:16	18	errno
LEAF_NODE	178:16	178:16	19	errno
ASSIGN_OP	178:22	178:22	17	=
LEAF_NODE	178:22	178:22	18	=
RVAL	178:24	178:24	17	EDQUOT
FIELD	178:24	178:24	18	EDQUOT
LEAF_NODE	178:24	178:24	19	EDQUOT
LEAF_NODE	178:30	178:30	15	;
LEAF_NODE	179:12	179:12	13	}
SELECTION	180:12	181:12	11	
KEYWORD	180:12	180:12	12	else
LEAF_NODE	180:12	180:12	13	else
STATEMENTS	181:12	185:12	12	
LEAF_NODE	181:12	181:12	13	{
STATEMENTS	182:16	184:16	13	
EXPR_STATEMENT	182:16	182:38	14	buf [ ret ] = ( char * ) tmp ;
EXPR	182:16	182:16	15	buf [ ret ] = ( char * ) tmp
ASSIGN	182:16	182:27	16	buf [ ret ] = ( char * ) tmp
LVAL	182:16	182:16	17	buf [ ret ]
FIELD	182:16	182:23	18	buf [ ret ]
LEAF_NODE	182:16	182:16	19	buf
LEAF_NODE	182:19	182:19	19	[
EXPR	182:20	182:20	19	ret
FIELD	182:20	182:20	20	ret
LEAF_NODE	182:20	182:20	21	ret
LEAF_NODE	182:23	182:23	19	]
ASSIGN_OP	182:25	182:25	17	=
LEAF_NODE	182:25	182:25	18	=
RVAL	182:27	182:35	17	( char * ) tmp
LEAF_NODE	182:27	182:27	18	(
TYPE_NAME	182:28	182:28	18	char
LEAF_NODE	182:28	182:28	19	char
LEAF_NODE	182:33	182:33	18	*
LEAF_NODE	182:34	182:34	18	)
FIELD	182:35	182:35	18	tmp
LEAF_NODE	182:35	182:35	19	tmp
LEAF_NODE	182:38	182:38	15	;
EXPR_STATEMENT	183:16	183:33	14	buf_size [ ret ] = 0 ;
EXPR	183:16	183:16	15	buf_size [ ret ] = 0
ASSIGN	183:16	183:32	16	buf_size [ ret ] = 0
LVAL	183:16	183:16	17	buf_size [ ret ]
FIELD	183:16	183:28	18	buf_size [ ret ]
LEAF_NODE	183:16	183:16	19	buf_size
LEAF_NODE	183:24	183:24	19	[
EXPR	183:25	183:25	19	ret
FIELD	183:25	183:25	20	ret
LEAF_NODE	183:25	183:25	21	ret
LEAF_NODE	183:28	183:28	19	]
ASSIGN_OP	183:30	183:30	17	=
LEAF_NODE	183:30	183:30	18	=
RVAL	183:32	183:32	17	0
FIELD	183:32	183:32	18	0
LEAF_NODE	183:32	183:32	19	0
LEAF_NODE	183:33	183:33	15	;
EXPR_STATEMENT	184:16	184:32	14	buf_off [ ret ] = 0 ;
EXPR	184:16	184:16	15	buf_off [ ret ] = 0
ASSIGN	184:16	184:31	16	buf_off [ ret ] = 0
LVAL	184:16	184:16	17	buf_off [ ret ]
FIELD	184:16	184:27	18	buf_off [ ret ]
LEAF_NODE	184:16	184:16	19	buf_off
LEAF_NODE	184:23	184:23	19	[
EXPR	184:24	184:24	19	ret
FIELD	184:24	184:24	20	ret
LEAF_NODE	184:24	184:24	21	ret
LEAF_NODE	184:27	184:27	19	]
ASSIGN_OP	184:29	184:29	17	=
LEAF_NODE	184:29	184:29	18	=
RVAL	184:31	184:31	17	0
FIELD	184:31	184:31	18	0
LEAF_NODE	184:31	184:31	19	0
LEAF_NODE	184:32	184:32	15	;
LEAF_NODE	185:12	185:12	13	}
LEAF_NODE	186:8	186:8	10	}
LEAF_NODE	187:4	187:4	7	}
SELECTION	188:4	188:9	3	
KEYWORD	188:4	188:4	4	else
LEAF_NODE	188:4	188:4	5	else
STATEMENTS	188:9	188:9	4	
SELECTION	188:9	189:4	5	
KEYWORD	188:9	188:9	6	if
LEAF_NODE	188:9	188:9	7	if
LEAF_NODE	188:12	188:12	6	(
CONDITION	188:13	188:13	6	ret >= 0 && * mode == 'a'
EXPR	188:13	188:13	7	ret >= 0 && * mode == 'a'
AND	188:13	188:25	8	ret >= 0 && * mode == 'a'
EXPR	188:13	188:20	9	ret >= 0
FIELD	188:13	188:13	10	ret
LEAF_NODE	188:13	188:13	11	ret
REL_OPERATOR	188:17	188:17	10	>=
LEAF_NODE	188:17	188:17	11	>=
FIELD	188:20	188:20	10	0
LEAF_NODE	188:20	188:20	11	0
LEAF_NODE	188:22	188:22	9	&&
EXPR	188:25	188:34	9	* mode == 'a'
UNARY_EXPR	188:25	188:26	10	* mode
UNARY_OPERATOR	188:25	188:25	11	*
LEAF_NODE	188:25	188:25	12	*
FIELD	188:26	188:26	11	mode
LEAF_NODE	188:26	188:26	12	mode
EQ_OPERATOR	188:31	188:31	10	==
LEAF_NODE	188:31	188:31	11	==
FIELD	188:34	188:34	10	'a'
LEAF_NODE	188:34	188:34	11	'a'
LEAF_NODE	188:37	188:37	6	)
STATEMENTS	189:4	211:4	6	
LEAF_NODE	189:4	189:4	7	{
STATEMENTS	190:8	205:8	7	
SELECTION	190:8	191:8	8	
KEYWORD	190:8	190:8	9	if
LEAF_NODE	190:8	190:8	10	if
LEAF_NODE	190:11	190:11	9	(
CONDITION	190:12	190:12	9	buffer == ( void * ) NULL
EXPR	190:12	190:31	10	buffer == ( void * ) NULL
FIELD	190:12	190:12	11	buffer
LEAF_NODE	190:12	190:12	12	buffer
EQ_OPERATOR	190:19	190:19	11	==
LEAF_NODE	190:19	190:19	12	==
LEAF_NODE	190:22	190:22	11	(
TYPE_NAME	190:23	190:23	11	void
LEAF_NODE	190:23	190:23	12	void
LEAF_NODE	190:28	190:28	11	*
LEAF_NODE	190:29	190:29	11	)
FIELD	190:31	190:31	11	NULL
LEAF_NODE	190:31	190:31	12	NULL
LEAF_NODE	190:35	190:35	9	)
STATEMENTS	191:8	204:8	9	
LEAF_NODE	191:8	191:8	10	{
STATEMENTS	192:12	198:12	10	
EXPR_STATEMENT	192:12	192:28	11	tmp = malloc ( 0 ) ;
EXPR	192:12	192:12	12	tmp = malloc ( 0 )
ASSIGN	192:12	192:18	13	tmp = malloc ( 0 )
LVAL	192:12	192:12	14	tmp
FIELD	192:12	192:12	15	tmp
LEAF_NODE	192:12	192:12	16	tmp
ASSIGN_OP	192:16	192:16	14	=
LEAF_NODE	192:16	192:16	15	=
RVAL	192:18	192:18	14	malloc ( 0 )
FUNCTION_CALL	192:18	192:27	15	malloc ( 0 )
CALLEE	192:18	192:18	16	malloc
LEAF_NODE	192:18	192:18	17	malloc
LEAF_NODE	192:25	192:25	16	(
ARGUMENT	192:26	192:26	16	0
FIELD	192:26	192:26	17	0
LEAF_NODE	192:26	192:26	18	0
LEAF_NODE	192:27	192:27	16	)
LEAF_NODE	192:28	192:28	12	;
SELECTION	193:12	194:12	11	
KEYWORD	193:12	193:12	12	if
LEAF_NODE	193:12	193:12	13	if
LEAF_NODE	193:15	193:15	12	(
CONDITION	193:16	193:16	12	tmp == ( void * ) NULL
EXPR	193:16	193:31	13	tmp == ( void * ) NULL
FIELD	193:16	193:16	14	tmp
LEAF_NODE	193:16	193:16	15	tmp
EQ_OPERATOR	193:20	193:20	14	==
LEAF_NODE	193:20	193:20	15	==
LEAF_NODE	193:23	193:23	14	(
TYPE_NAME	193:24	193:24	14	void
LEAF_NODE	193:24	193:24	15	void
LEAF_NODE	193:29	193:29	14	*
LEAF_NODE	193:30	193:30	14	)
FIELD	193:31	193:31	14	NULL
LEAF_NODE	193:31	193:31	15	NULL
LEAF_NODE	193:35	193:35	12	)
STATEMENTS	194:12	197:12	12	
LEAF_NODE	194:12	194:12	13	{
STATEMENTS	195:16	196:16	13	
EXPR_STATEMENT	195:16	195:24	14	ret = - 1 ;
EXPR	195:16	195:16	15	ret = - 1
ASSIGN	195:16	195:22	16	ret = - 1
LVAL	195:16	195:16	17	ret
FIELD	195:16	195:16	18	ret
LEAF_NODE	195:16	195:16	19	ret
ASSIGN_OP	195:20	195:20	17	=
LEAF_NODE	195:20	195:20	18	=
RVAL	195:22	195:22	17	- 1
UNARY_EXPR	195:22	195:23	18	- 1
UNARY_OPERATOR	195:22	195:22	19	-
LEAF_NODE	195:22	195:22	20	-
FIELD	195:23	195:23	19	1
LEAF_NODE	195:23	195:23	20	1
LEAF_NODE	195:24	195:24	15	;
EXPR_STATEMENT	196:16	196:30	14	errno = EDQUOT ;
EXPR	196:16	196:16	15	errno = EDQUOT
ASSIGN	196:16	196:24	16	errno = EDQUOT
LVAL	196:16	196:16	17	errno
FIELD	196:16	196:16	18	errno
LEAF_NODE	196:16	196:16	19	errno
ASSIGN_OP	196:22	196:22	17	=
LEAF_NODE	196:22	196:22	18	=
RVAL	196:24	196:24	17	EDQUOT
FIELD	196:24	196:24	18	EDQUOT
LEAF_NODE	196:24	196:24	19	EDQUOT
LEAF_NODE	196:30	196:30	15	;
LEAF_NODE	197:12	197:12	13	}
SELECTION	198:12	199:12	11	
KEYWORD	198:12	198:12	12	else
LEAF_NODE	198:12	198:12	13	else
STATEMENTS	199:12	203:12	12	
LEAF_NODE	199:12	199:12	13	{
STATEMENTS	200:16	202:16	13	
EXPR_STATEMENT	200:16	200:38	14	buf [ ret ] = ( char * ) tmp ;
EXPR	200:16	200:16	15	buf [ ret ] = ( char * ) tmp
ASSIGN	200:16	200:27	16	buf [ ret ] = ( char * ) tmp
LVAL	200:16	200:16	17	buf [ ret ]
FIELD	200:16	200:23	18	buf [ ret ]
LEAF_NODE	200:16	200:16	19	buf
LEAF_NODE	200:19	200:19	19	[
EXPR	200:20	200:20	19	ret
FIELD	200:20	200:20	20	ret
LEAF_NODE	200:20	200:20	21	ret
LEAF_NODE	200:23	200:23	19	]
ASSIGN_OP	200:25	200:25	17	=
LEAF_NODE	200:25	200:25	18	=
RVAL	200:27	200:35	17	( char * ) tmp
LEAF_NODE	200:27	200:27	18	(
TYPE_NAME	200:28	200:28	18	char
LEAF_NODE	200:28	200:28	19	char
LEAF_NODE	200:33	200:33	18	*
LEAF_NODE	200:34	200:34	18	)
FIELD	200:35	200:35	18	tmp
LEAF_NODE	200:35	200:35	19	tmp
LEAF_NODE	200:38	200:38	15	;
EXPR_STATEMENT	201:16	201:33	14	buf_size [ ret ] = 0 ;
EXPR	201:16	201:16	15	buf_size [ ret ] = 0
ASSIGN	201:16	201:32	16	buf_size [ ret ] = 0
LVAL	201:16	201:16	17	buf_size [ ret ]
FIELD	201:16	201:28	18	buf_size [ ret ]
LEAF_NODE	201:16	201:16	19	buf_size
LEAF_NODE	201:24	201:24	19	[
EXPR	201:25	201:25	19	ret
FIELD	201:25	201:25	20	ret
LEAF_NODE	201:25	201:25	21	ret
LEAF_NODE	201:28	201:28	19	]
ASSIGN_OP	201:30	201:30	17	=
LEAF_NODE	201:30	201:30	18	=
RVAL	201:32	201:32	17	0
FIELD	201:32	201:32	18	0
LEAF_NODE	201:32	201:32	19	0
LEAF_NODE	201:33	201:33	15	;
EXPR_STATEMENT	202:16	202:32	14	buf_off [ ret ] = 0 ;
EXPR	202:16	202:16	15	buf_off [ ret ] = 0
ASSIGN	202:16	202:31	16	buf_off [ ret ] = 0
LVAL	202:16	202:16	17	buf_off [ ret ]
FIELD	202:16	202:27	18	buf_off [ ret ]
LEAF_NODE	202:16	202:16	19	buf_off
LEAF_NODE	202:23	202:23	19	[
EXPR	202:24	202:24	19	ret
FIELD	202:24	202:24	20	ret
LEAF_NODE	202:24	202:24	21	ret
LEAF_NODE	202:27	202:27	19	]
ASSIGN_OP	202:29	202:29	17	=
LEAF_NODE	202:29	202:29	18	=
RVAL	202:31	202:31	17	0
FIELD	202:31	202:31	18	0
LEAF_NODE	202:31	202:31	19	0
LEAF_NODE	202:32	202:32	15	;
LEAF_NODE	203:12	203:12	13	}
LEAF_NODE	204:8	204:8	10	}
SELECTION	205:8	206:8	8	
KEYWORD	205:8	205:8	9	else
LEAF_NODE	205:8	205:8	10	else
STATEMENTS	206:8	210:8	9	
LEAF_NODE	206:8	206:8	10	{
STATEMENTS	207:12	209:12	10	
EXPR_STATEMENT	207:12	207:37	11	buf [ ret ] = ( char * ) buffer ;
EXPR	207:12	207:12	12	buf [ ret ] = ( char * ) buffer
ASSIGN	207:12	207:23	13	buf [ ret ] = ( char * ) buffer
LVAL	207:12	207:12	14	buf [ ret ]
FIELD	207:12	207:19	15	buf [ ret ]
LEAF_NODE	207:12	207:12	16	buf
LEAF_NODE	207:15	207:15	16	[
EXPR	207:16	207:16	16	ret
FIELD	207:16	207:16	17	ret
LEAF_NODE	207:16	207:16	18	ret
LEAF_NODE	207:19	207:19	16	]
ASSIGN_OP	207:21	207:21	14	=
LEAF_NODE	207:21	207:21	15	=
RVAL	207:23	207:31	14	( char * ) buffer
LEAF_NODE	207:23	207:23	15	(
TYPE_NAME	207:24	207:24	15	char
LEAF_NODE	207:24	207:24	16	char
LEAF_NODE	207:29	207:29	15	*
LEAF_NODE	207:30	207:30	15	)
FIELD	207:31	207:31	15	buffer
LEAF_NODE	207:31	207:31	16	buffer
LEAF_NODE	207:37	207:37	12	;
EXPR_STATEMENT	208:12	208:32	11	buf_size [ ret ] = size ;
EXPR	208:12	208:12	12	buf_size [ ret ] = size
ASSIGN	208:12	208:28	13	buf_size [ ret ] = size
LVAL	208:12	208:12	14	buf_size [ ret ]
FIELD	208:12	208:24	15	buf_size [ ret ]
LEAF_NODE	208:12	208:12	16	buf_size
LEAF_NODE	208:20	208:20	16	[
EXPR	208:21	208:21	16	ret
FIELD	208:21	208:21	17	ret
LEAF_NODE	208:21	208:21	18	ret
LEAF_NODE	208:24	208:24	16	]
ASSIGN_OP	208:26	208:26	14	=
LEAF_NODE	208:26	208:26	15	=
RVAL	208:28	208:28	14	size
FIELD	208:28	208:28	15	size
LEAF_NODE	208:28	208:28	16	size
LEAF_NODE	208:32	208:32	12	;
EXPR_STATEMENT	209:12	209:28	11	buf_off [ ret ] = 0 ;
EXPR	209:12	209:12	12	buf_off [ ret ] = 0
ASSIGN	209:12	209:27	13	buf_off [ ret ] = 0
LVAL	209:12	209:12	14	buf_off [ ret ]
FIELD	209:12	209:23	15	buf_off [ ret ]
LEAF_NODE	209:12	209:12	16	buf_off
LEAF_NODE	209:19	209:19	16	[
EXPR	209:20	209:20	16	ret
FIELD	209:20	209:20	17	ret
LEAF_NODE	209:20	209:20	18	ret
LEAF_NODE	209:23	209:23	16	]
ASSIGN_OP	209:25	209:25	14	=
LEAF_NODE	209:25	209:25	15	=
RVAL	209:27	209:27	14	0
FIELD	209:27	209:27	15	0
LEAF_NODE	209:27	209:27	16	0
LEAF_NODE	209:28	209:28	12	;
LEAF_NODE	210:8	210:8	10	}
LEAF_NODE	211:4	211:4	7	}
SELECTION	212:4	213:4	3	
KEYWORD	212:4	212:4	4	else
LEAF_NODE	212:4	212:4	5	else
STATEMENTS	213:4	216:4	4	
LEAF_NODE	213:4	213:4	5	{
STATEMENTS	214:8	215:8	5	
EXPR_STATEMENT	214:8	214:16	6	ret = - 1 ;
EXPR	214:8	214:8	7	ret = - 1
ASSIGN	214:8	214:14	8	ret = - 1
LVAL	214:8	214:8	9	ret
FIELD	214:8	214:8	10	ret
LEAF_NODE	214:8	214:8	11	ret
ASSIGN_OP	214:12	214:12	9	=
LEAF_NODE	214:12	214:12	10	=
RVAL	214:14	214:14	9	- 1
UNARY_EXPR	214:14	214:15	10	- 1
UNARY_OPERATOR	214:14	214:14	11	-
LEAF_NODE	214:14	214:14	12	-
FIELD	214:15	214:15	11	1
LEAF_NODE	214:15	214:15	12	1
LEAF_NODE	214:16	214:16	7	;
EXPR_STATEMENT	215:8	215:22	6	errno = EINVAL ;
EXPR	215:8	215:8	7	errno = EINVAL
ASSIGN	215:8	215:16	8	errno = EINVAL
LVAL	215:8	215:8	9	errno
FIELD	215:8	215:8	10	errno
LEAF_NODE	215:8	215:8	11	errno
ASSIGN_OP	215:14	215:14	9	=
LEAF_NODE	215:14	215:14	10	=
RVAL	215:16	215:16	9	EINVAL
FIELD	215:16	215:16	10	EINVAL
LEAF_NODE	215:16	215:16	11	EINVAL
LEAF_NODE	215:22	215:22	7	;
LEAF_NODE	216:4	216:4	5	}
SELECTION	218:4	219:4	3	
KEYWORD	218:4	218:4	4	if
LEAF_NODE	218:4	218:4	5	if
LEAF_NODE	218:7	218:7	4	(
CONDITION	218:8	218:8	4	ret != - 1
EXPR	218:8	218:15	5	ret != - 1
FIELD	218:8	218:8	6	ret
LEAF_NODE	218:8	218:8	7	ret
EQ_OPERATOR	218:12	218:12	6	!=
LEAF_NODE	218:12	218:12	7	!=
UNARY_EXPR	218:15	218:16	6	- 1
UNARY_OPERATOR	218:15	218:15	7	-
LEAF_NODE	218:15	218:15	8	-
FIELD	218:16	218:16	7	1
LEAF_NODE	218:16	218:16	8	1
LEAF_NODE	218:17	218:17	4	)
STATEMENTS	219:4	222:4	4	
LEAF_NODE	219:4	219:4	5	{
STATEMENTS	220:8	221:8	5	
EXPR_STATEMENT	220:8	220:20	6	fds [ ret ] = 0 ;
EXPR	220:8	220:8	7	fds [ ret ] = 0
ASSIGN	220:8	220:19	8	fds [ ret ] = 0
LVAL	220:8	220:8	9	fds [ ret ]
FIELD	220:8	220:15	10	fds [ ret ]
LEAF_NODE	220:8	220:8	11	fds
LEAF_NODE	220:11	220:11	11	[
EXPR	220:12	220:12	11	ret
FIELD	220:12	220:12	12	ret
LEAF_NODE	220:12	220:12	13	ret
LEAF_NODE	220:15	220:15	11	]
ASSIGN_OP	220:17	220:17	9	=
LEAF_NODE	220:17	220:17	10	=
RVAL	220:19	220:19	9	0
FIELD	220:19	220:19	10	0
LEAF_NODE	220:19	220:19	11	0
LEAF_NODE	220:20	220:20	7	;
EXPR_STATEMENT	221:8	221:29	6	buf_mode [ ret ] = * mode ;
EXPR	221:8	221:8	7	buf_mode [ ret ] = * mode
ASSIGN	221:8	221:24	8	buf_mode [ ret ] = * mode
LVAL	221:8	221:8	9	buf_mode [ ret ]
FIELD	221:8	221:20	10	buf_mode [ ret ]
LEAF_NODE	221:8	221:8	11	buf_mode
LEAF_NODE	221:16	221:16	11	[
EXPR	221:17	221:17	11	ret
FIELD	221:17	221:17	12	ret
LEAF_NODE	221:17	221:17	13	ret
LEAF_NODE	221:20	221:20	11	]
ASSIGN_OP	221:22	221:22	9	=
LEAF_NODE	221:22	221:22	10	=
RVAL	221:24	221:24	9	* mode
UNARY_EXPR	221:24	221:25	10	* mode
UNARY_OPERATOR	221:24	221:24	11	*
LEAF_NODE	221:24	221:24	12	*
FIELD	221:25	221:25	11	mode
LEAF_NODE	221:25	221:25	12	mode
LEAF_NODE	221:29	221:29	7	;
LEAF_NODE	222:4	222:4	5	}
LEAF_NODE	224:4	224:4	3	return
LEAF_NODE	224:11	224:11	3	(
LEAF_NODE	224:12	224:12	3	ret
LEAF_NODE	224:15	224:15	3	)
LEAF_NODE	224:16	224:16	3	;
LEAF_NODE	225:0	225:0	2	}
FUNCTION_DEF	242:0	310:0	1	
RETURN_TYPE	242:0	242:0	2	int
TYPE_NAME	242:0	242:0	3	int
LEAF_NODE	242:0	242:0	4	int
FUNCTION_NAME	242:4	242:4	2	mfs_lseek
LEAF_NODE	242:4	242:4	3	mfs_lseek
PARAMETER_LIST	242:14	242:45	2	( int fd , int offset , int whence )
LEAF_NODE	242:14	242:14	3	(
PARAMETER_DECL	242:15	242:19	3	int fd
TYPE	242:15	242:15	4	int
TYPE_NAME	242:15	242:15	5	int
LEAF_NODE	242:15	242:15	6	int
NAME	242:19	242:19	4	fd
LEAF_NODE	242:19	242:19	5	fd
LEAF_NODE	242:21	242:21	3	,
PARAMETER_DECL	242:23	242:27	3	int offset
TYPE	242:23	242:23	4	int
TYPE_NAME	242:23	242:23	5	int
LEAF_NODE	242:23	242:23	6	int
NAME	242:27	242:27	4	offset
LEAF_NODE	242:27	242:27	5	offset
LEAF_NODE	242:33	242:33	3	,
PARAMETER_DECL	242:35	242:39	3	int whence
TYPE	242:35	242:35	4	int
TYPE_NAME	242:35	242:35	5	int
LEAF_NODE	242:35	242:35	6	int
NAME	242:39	242:39	4	whence
LEAF_NODE	242:39	242:39	5	whence
LEAF_NODE	242:45	242:45	3	)
LEAF_NODE	243:0	243:0	2	{
STATEMENTS	244:4	309:16	2	
SIMPLE_DECL	244:4	244:11	3	int ret ;
VAR_DECL	244:4	244:8	4	int ret
TYPE	244:4	244:4	5	int
TYPE_NAME	244:4	244:4	6	int
LEAF_NODE	244:4	244:4	7	int
NAME	244:8	244:8	5	ret
LEAF_NODE	244:8	244:8	6	ret
LEAF_NODE	244:11	244:11	4	;
SIMPLE_DECL	245:4	245:17	3	long test_off ;
VAR_DECL	245:4	245:9	4	long test_off
TYPE	245:4	245:4	5	long
TYPE_NAME	245:4	245:4	6	long
LEAF_NODE	245:4	245:4	7	long
NAME	245:9	245:9	5	test_off
LEAF_NODE	245:9	245:9	6	test_off
LEAF_NODE	245:17	245:17	4	;
SELECTION	247:4	248:4	3	
KEYWORD	247:4	247:4	4	if
LEAF_NODE	247:4	247:4	5	if
LEAF_NODE	247:7	247:7	4	(
CONDITION	247:8	247:8	4	fds [ fd ] == - 1
EXPR	247:8	247:19	5	fds [ fd ] == - 1
FIELD	247:8	247:14	6	fds [ fd ]
LEAF_NODE	247:8	247:8	7	fds
LEAF_NODE	247:11	247:11	7	[
EXPR	247:12	247:12	7	fd
FIELD	247:12	247:12	8	fd
LEAF_NODE	247:12	247:12	9	fd
LEAF_NODE	247:14	247:14	7	]
EQ_OPERATOR	247:16	247:16	6	==
LEAF_NODE	247:16	247:16	7	==
UNARY_EXPR	247:19	247:20	6	- 1
UNARY_OPERATOR	247:19	247:19	7	-
LEAF_NODE	247:19	247:19	8	-
FIELD	247:20	247:20	7	1
LEAF_NODE	247:20	247:20	8	1
LEAF_NODE	247:21	247:21	4	)
STATEMENTS	248:4	251:4	4	
LEAF_NODE	248:4	248:4	5	{
STATEMENTS	249:8	250:8	5	
EXPR_STATEMENT	249:8	249:16	6	ret = - 1 ;
EXPR	249:8	249:8	7	ret = - 1
ASSIGN	249:8	249:14	8	ret = - 1
LVAL	249:8	249:8	9	ret
FIELD	249:8	249:8	10	ret
LEAF_NODE	249:8	249:8	11	ret
ASSIGN_OP	249:12	249:12	9	=
LEAF_NODE	249:12	249:12	10	=
RVAL	249:14	249:14	9	- 1
UNARY_EXPR	249:14	249:15	10	- 1
UNARY_OPERATOR	249:14	249:14	11	-
LEAF_NODE	249:14	249:14	12	-
FIELD	249:15	249:15	11	1
LEAF_NODE	249:15	249:15	12	1
LEAF_NODE	249:16	249:16	7	;
EXPR_STATEMENT	250:8	250:21	6	errno = EBADF ;
EXPR	250:8	250:8	7	errno = EBADF
ASSIGN	250:8	250:16	8	errno = EBADF
LVAL	250:8	250:8	9	errno
FIELD	250:8	250:8	10	errno
LEAF_NODE	250:8	250:8	11	errno
ASSIGN_OP	250:14	250:14	9	=
LEAF_NODE	250:14	250:14	10	=
RVAL	250:16	250:16	9	EBADF
FIELD	250:16	250:16	10	EBADF
LEAF_NODE	250:16	250:16	11	EBADF
LEAF_NODE	250:21	250:21	7	;
LEAF_NODE	251:4	251:4	5	}
SELECTION	252:4	252:9	3	
KEYWORD	252:4	252:4	4	else
LEAF_NODE	252:4	252:4	5	else
STATEMENTS	252:9	252:9	4	
SELECTION	252:9	253:4	5	
KEYWORD	252:9	252:9	6	if
LEAF_NODE	252:9	252:9	7	if
LEAF_NODE	252:12	252:12	6	(
CONDITION	252:13	252:13	6	offset < 0 && whence == SEEK_SET
EXPR	252:13	252:13	7	offset < 0 && whence == SEEK_SET
AND	252:13	252:27	8	offset < 0 && whence == SEEK_SET
EXPR	252:13	252:22	9	offset < 0
FIELD	252:13	252:13	10	offset
LEAF_NODE	252:13	252:13	11	offset
REL_OPERATOR	252:20	252:20	10	<
LEAF_NODE	252:20	252:20	11	<
FIELD	252:22	252:22	10	0
LEAF_NODE	252:22	252:22	11	0
LEAF_NODE	252:24	252:24	9	&&
EXPR	252:27	252:37	9	whence == SEEK_SET
FIELD	252:27	252:27	10	whence
LEAF_NODE	252:27	252:27	11	whence
EQ_OPERATOR	252:34	252:34	10	==
LEAF_NODE	252:34	252:34	11	==
FIELD	252:37	252:37	10	SEEK_SET
LEAF_NODE	252:37	252:37	11	SEEK_SET
LEAF_NODE	252:45	252:45	6	)
STATEMENTS	253:4	256:4	6	
LEAF_NODE	253:4	253:4	7	{
STATEMENTS	254:8	255:8	7	
EXPR_STATEMENT	254:8	254:16	8	ret = - 1 ;
EXPR	254:8	254:8	9	ret = - 1
ASSIGN	254:8	254:14	10	ret = - 1
LVAL	254:8	254:8	11	ret
FIELD	254:8	254:8	12	ret
LEAF_NODE	254:8	254:8	13	ret
ASSIGN_OP	254:12	254:12	11	=
LEAF_NODE	254:12	254:12	12	=
RVAL	254:14	254:14	11	- 1
UNARY_EXPR	254:14	254:15	12	- 1
UNARY_OPERATOR	254:14	254:14	13	-
LEAF_NODE	254:14	254:14	14	-
FIELD	254:15	254:15	13	1
LEAF_NODE	254:15	254:15	14	1
LEAF_NODE	254:16	254:16	9	;
EXPR_STATEMENT	255:8	255:22	8	errno = EINVAL ;
EXPR	255:8	255:8	9	errno = EINVAL
ASSIGN	255:8	255:16	10	errno = EINVAL
LVAL	255:8	255:8	11	errno
FIELD	255:8	255:8	12	errno
LEAF_NODE	255:8	255:8	13	errno
ASSIGN_OP	255:14	255:14	11	=
LEAF_NODE	255:14	255:14	12	=
RVAL	255:16	255:16	11	EINVAL
FIELD	255:16	255:16	12	EINVAL
LEAF_NODE	255:16	255:16	13	EINVAL
LEAF_NODE	255:22	255:22	9	;
LEAF_NODE	256:4	256:4	7	}
SELECTION	257:4	258:4	3	
KEYWORD	257:4	257:4	4	else
LEAF_NODE	257:4	257:4	5	else
STATEMENTS	258:4	307:4	4	
LEAF_NODE	258:4	258:4	5	{
STATEMENTS	259:8	259:8	5	
SELECTION	259:8	260:8	6	
KEYWORD	259:8	259:8	7	switch
LEAF_NODE	259:8	259:8	8	switch
LEAF_NODE	259:15	259:15	7	(
CONDITION	259:16	259:16	7	whence
EXPR	259:16	259:16	8	whence
FIELD	259:16	259:16	9	whence
LEAF_NODE	259:16	259:16	10	whence
LEAF_NODE	259:22	259:22	7	)
STATEMENTS	260:8	306:8	7	
LEAF_NODE	260:8	260:8	8	{
STATEMENTS	261:12	305:16	8	
LABEL	261:12	261:25	9	case SEEK_SET :
LEAF_NODE	261:12	261:12	10	case
LEAF_NODE	261:17	261:17	10	SEEK_SET
LEAF_NODE	261:25	261:25	10	:
SELECTION	262:16	263:20	9	
KEYWORD	262:16	262:16	10	if
LEAF_NODE	262:16	262:16	11	if
LEAF_NODE	262:19	262:19	10	(
CONDITION	262:20	262:20	10	offset > buf_size [ fd ]
EXPR	262:20	262:29	11	offset > buf_size [ fd ]
FIELD	262:20	262:20	12	offset
LEAF_NODE	262:20	262:20	13	offset
REL_OPERATOR	262:27	262:27	12	>
LEAF_NODE	262:27	262:27	13	>
FIELD	262:29	262:40	12	buf_size [ fd ]
LEAF_NODE	262:29	262:29	13	buf_size
LEAF_NODE	262:37	262:37	13	[
EXPR	262:38	262:38	13	fd
FIELD	262:38	262:38	14	fd
LEAF_NODE	262:38	262:38	15	fd
LEAF_NODE	262:40	262:40	13	]
LEAF_NODE	262:41	262:41	10	)
STATEMENTS	263:20	263:20	10	
EXPR_STATEMENT	263:20	263:48	11	extend_mem_file ( fd , offset ) ;
EXPR	263:20	263:20	12	extend_mem_file ( fd , offset )
FUNCTION_CALL	263:20	263:47	13	extend_mem_file ( fd , offset )
CALLEE	263:20	263:20	14	extend_mem_file
LEAF_NODE	263:20	263:20	15	extend_mem_file
LEAF_NODE	263:36	263:36	14	(
ARGUMENT	263:37	263:37	14	fd
FIELD	263:37	263:37	15	fd
LEAF_NODE	263:37	263:37	16	fd
LEAF_NODE	263:39	263:39	14	,
ARGUMENT	263:41	263:41	14	offset
FIELD	263:41	263:41	15	offset
LEAF_NODE	263:41	263:41	16	offset
LEAF_NODE	263:47	263:47	14	)
LEAF_NODE	263:48	263:48	12	;
EXPR_STATEMENT	264:16	264:36	9	buf_off [ fd ] = offset ;
EXPR	264:16	264:16	10	buf_off [ fd ] = offset
ASSIGN	264:16	264:30	11	buf_off [ fd ] = offset
LVAL	264:16	264:16	12	buf_off [ fd ]
FIELD	264:16	264:26	13	buf_off [ fd ]
LEAF_NODE	264:16	264:16	14	buf_off
LEAF_NODE	264:23	264:23	14	[
EXPR	264:24	264:24	14	fd
FIELD	264:24	264:24	15	fd
LEAF_NODE	264:24	264:24	16	fd
LEAF_NODE	264:26	264:26	14	]
ASSIGN_OP	264:28	264:28	12	=
LEAF_NODE	264:28	264:28	13	=
RVAL	264:30	264:30	12	offset
FIELD	264:30	264:30	13	offset
LEAF_NODE	264:30	264:30	14	offset
LEAF_NODE	264:36	264:36	10	;
EXPR_STATEMENT	265:16	265:28	9	ret = offset ;
EXPR	265:16	265:16	10	ret = offset
ASSIGN	265:16	265:22	11	ret = offset
LVAL	265:16	265:16	12	ret
FIELD	265:16	265:16	13	ret
LEAF_NODE	265:16	265:16	14	ret
ASSIGN_OP	265:20	265:20	12	=
LEAF_NODE	265:20	265:20	13	=
RVAL	265:22	265:22	12	offset
FIELD	265:22	265:22	13	offset
LEAF_NODE	265:22	265:22	14	offset
LEAF_NODE	265:28	265:28	10	;
JUMP_STATEMENT	266:16	266:21	9	break DESTINATION ;
KEYWORD	266:16	266:16	10	break
LEAF_NODE	266:16	266:16	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	266:21	266:21	10	;
LABEL	268:12	268:25	9	case SEEK_CUR :
LEAF_NODE	268:12	268:12	10	case
LEAF_NODE	268:17	268:17	10	SEEK_CUR
LEAF_NODE	268:25	268:25	10	:
EXPR_STATEMENT	269:16	269:47	9	test_off = buf_off [ fd ] + offset ;
EXPR	269:16	269:16	10	test_off = buf_off [ fd ] + offset
ASSIGN	269:16	269:27	11	test_off = buf_off [ fd ] + offset
LVAL	269:16	269:16	12	test_off
FIELD	269:16	269:16	13	test_off
LEAF_NODE	269:16	269:16	14	test_off
ASSIGN_OP	269:25	269:25	12	=
LEAF_NODE	269:25	269:25	13	=
RVAL	269:27	269:41	12	buf_off [ fd ] + offset
FIELD	269:27	269:37	13	buf_off [ fd ]
LEAF_NODE	269:27	269:27	14	buf_off
LEAF_NODE	269:34	269:34	14	[
EXPR	269:35	269:35	14	fd
FIELD	269:35	269:35	15	fd
LEAF_NODE	269:35	269:35	16	fd
LEAF_NODE	269:37	269:37	14	]
LEAF_NODE	269:39	269:39	13	+
FIELD	269:41	269:41	13	offset
LEAF_NODE	269:41	269:41	14	offset
LEAF_NODE	269:47	269:47	10	;
SELECTION	271:16	272:16	9	
KEYWORD	271:16	271:16	10	if
LEAF_NODE	271:16	271:16	11	if
LEAF_NODE	271:19	271:19	10	(
CONDITION	271:20	271:20	10	test_off < 0
EXPR	271:20	271:31	11	test_off < 0
FIELD	271:20	271:20	12	test_off
LEAF_NODE	271:20	271:20	13	test_off
REL_OPERATOR	271:29	271:29	12	<
LEAF_NODE	271:29	271:29	13	<
FIELD	271:31	271:31	12	0
LEAF_NODE	271:31	271:31	13	0
LEAF_NODE	271:32	271:32	10	)
STATEMENTS	272:16	275:16	10	
LEAF_NODE	272:16	272:16	11	{
STATEMENTS	273:20	274:20	11	
EXPR_STATEMENT	273:20	273:28	12	ret = - 1 ;
EXPR	273:20	273:20	13	ret = - 1
ASSIGN	273:20	273:26	14	ret = - 1
LVAL	273:20	273:20	15	ret
FIELD	273:20	273:20	16	ret
LEAF_NODE	273:20	273:20	17	ret
ASSIGN_OP	273:24	273:24	15	=
LEAF_NODE	273:24	273:24	16	=
RVAL	273:26	273:26	15	- 1
UNARY_EXPR	273:26	273:27	16	- 1
UNARY_OPERATOR	273:26	273:26	17	-
LEAF_NODE	273:26	273:26	18	-
FIELD	273:27	273:27	17	1
LEAF_NODE	273:27	273:27	18	1
LEAF_NODE	273:28	273:28	13	;
EXPR_STATEMENT	274:20	274:34	12	errno = EINVAL ;
EXPR	274:20	274:20	13	errno = EINVAL
ASSIGN	274:20	274:28	14	errno = EINVAL
LVAL	274:20	274:20	15	errno
FIELD	274:20	274:20	16	errno
LEAF_NODE	274:20	274:20	17	errno
ASSIGN_OP	274:26	274:26	15	=
LEAF_NODE	274:26	274:26	16	=
RVAL	274:28	274:28	15	EINVAL
FIELD	274:28	274:28	16	EINVAL
LEAF_NODE	274:28	274:28	17	EINVAL
LEAF_NODE	274:34	274:34	13	;
LEAF_NODE	275:16	275:16	11	}
SELECTION	276:16	277:16	9	
KEYWORD	276:16	276:16	10	else
LEAF_NODE	276:16	276:16	11	else
STATEMENTS	277:16	282:16	10	
LEAF_NODE	277:16	277:16	11	{
STATEMENTS	278:20	281:20	11	
SELECTION	278:20	279:24	12	
KEYWORD	278:20	278:20	13	if
LEAF_NODE	278:20	278:20	14	if
LEAF_NODE	278:23	278:23	13	(
CONDITION	278:24	278:24	13	test_off > buf_size [ fd ]
EXPR	278:24	278:35	14	test_off > buf_size [ fd ]
FIELD	278:24	278:24	15	test_off
LEAF_NODE	278:24	278:24	16	test_off
REL_OPERATOR	278:33	278:33	15	>
LEAF_NODE	278:33	278:33	16	>
FIELD	278:35	278:46	15	buf_size [ fd ]
LEAF_NODE	278:35	278:35	16	buf_size
LEAF_NODE	278:43	278:43	16	[
EXPR	278:44	278:44	16	fd
FIELD	278:44	278:44	17	fd
LEAF_NODE	278:44	278:44	18	fd
LEAF_NODE	278:46	278:46	16	]
LEAF_NODE	278:47	278:47	13	)
STATEMENTS	279:24	279:24	13	
EXPR_STATEMENT	279:24	279:54	14	extend_mem_file ( fd , test_off ) ;
EXPR	279:24	279:24	15	extend_mem_file ( fd , test_off )
FUNCTION_CALL	279:24	279:53	16	extend_mem_file ( fd , test_off )
CALLEE	279:24	279:24	17	extend_mem_file
LEAF_NODE	279:24	279:24	18	extend_mem_file
LEAF_NODE	279:40	279:40	17	(
ARGUMENT	279:41	279:41	17	fd
FIELD	279:41	279:41	18	fd
LEAF_NODE	279:41	279:41	19	fd
LEAF_NODE	279:43	279:43	17	,
ARGUMENT	279:45	279:45	17	test_off
FIELD	279:45	279:45	18	test_off
LEAF_NODE	279:45	279:45	19	test_off
LEAF_NODE	279:53	279:53	17	)
LEAF_NODE	279:54	279:54	15	;
EXPR_STATEMENT	280:20	280:42	12	buf_off [ fd ] = test_off ;
EXPR	280:20	280:20	13	buf_off [ fd ] = test_off
ASSIGN	280:20	280:34	14	buf_off [ fd ] = test_off
LVAL	280:20	280:20	15	buf_off [ fd ]
FIELD	280:20	280:30	16	buf_off [ fd ]
LEAF_NODE	280:20	280:20	17	buf_off
LEAF_NODE	280:27	280:27	17	[
EXPR	280:28	280:28	17	fd
FIELD	280:28	280:28	18	fd
LEAF_NODE	280:28	280:28	19	fd
LEAF_NODE	280:30	280:30	17	]
ASSIGN_OP	280:32	280:32	15	=
LEAF_NODE	280:32	280:32	16	=
RVAL	280:34	280:34	15	test_off
FIELD	280:34	280:34	16	test_off
LEAF_NODE	280:34	280:34	17	test_off
LEAF_NODE	280:42	280:42	13	;
EXPR_STATEMENT	281:20	281:34	12	ret = test_off ;
EXPR	281:20	281:20	13	ret = test_off
ASSIGN	281:20	281:26	14	ret = test_off
LVAL	281:20	281:20	15	ret
FIELD	281:20	281:20	16	ret
LEAF_NODE	281:20	281:20	17	ret
ASSIGN_OP	281:24	281:24	15	=
LEAF_NODE	281:24	281:24	16	=
RVAL	281:26	281:26	15	test_off
FIELD	281:26	281:26	16	test_off
LEAF_NODE	281:26	281:26	17	test_off
LEAF_NODE	281:34	281:34	13	;
LEAF_NODE	282:16	282:16	11	}
JUMP_STATEMENT	283:16	283:21	9	break DESTINATION ;
KEYWORD	283:16	283:16	10	break
LEAF_NODE	283:16	283:16	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	283:21	283:21	10	;
LABEL	285:12	285:25	9	case SEEK_END :
LEAF_NODE	285:12	285:12	10	case
LEAF_NODE	285:17	285:17	10	SEEK_END
LEAF_NODE	285:25	285:25	10	:
EXPR_STATEMENT	286:16	286:48	9	test_off = buf_size [ fd ] + offset ;
EXPR	286:16	286:16	10	test_off = buf_size [ fd ] + offset
ASSIGN	286:16	286:27	11	test_off = buf_size [ fd ] + offset
LVAL	286:16	286:16	12	test_off
FIELD	286:16	286:16	13	test_off
LEAF_NODE	286:16	286:16	14	test_off
ASSIGN_OP	286:25	286:25	12	=
LEAF_NODE	286:25	286:25	13	=
RVAL	286:27	286:42	12	buf_size [ fd ] + offset
FIELD	286:27	286:38	13	buf_size [ fd ]
LEAF_NODE	286:27	286:27	14	buf_size
LEAF_NODE	286:35	286:35	14	[
EXPR	286:36	286:36	14	fd
FIELD	286:36	286:36	15	fd
LEAF_NODE	286:36	286:36	16	fd
LEAF_NODE	286:38	286:38	14	]
LEAF_NODE	286:40	286:40	13	+
FIELD	286:42	286:42	13	offset
LEAF_NODE	286:42	286:42	14	offset
LEAF_NODE	286:48	286:48	10	;
SELECTION	288:16	289:16	9	
KEYWORD	288:16	288:16	10	if
LEAF_NODE	288:16	288:16	11	if
LEAF_NODE	288:19	288:19	10	(
CONDITION	288:20	288:20	10	test_off < 0
EXPR	288:20	288:31	11	test_off < 0
FIELD	288:20	288:20	12	test_off
LEAF_NODE	288:20	288:20	13	test_off
REL_OPERATOR	288:29	288:29	12	<
LEAF_NODE	288:29	288:29	13	<
FIELD	288:31	288:31	12	0
LEAF_NODE	288:31	288:31	13	0
LEAF_NODE	288:32	288:32	10	)
STATEMENTS	289:16	292:16	10	
LEAF_NODE	289:16	289:16	11	{
STATEMENTS	290:20	291:20	11	
EXPR_STATEMENT	290:20	290:28	12	ret = - 1 ;
EXPR	290:20	290:20	13	ret = - 1
ASSIGN	290:20	290:26	14	ret = - 1
LVAL	290:20	290:20	15	ret
FIELD	290:20	290:20	16	ret
LEAF_NODE	290:20	290:20	17	ret
ASSIGN_OP	290:24	290:24	15	=
LEAF_NODE	290:24	290:24	16	=
RVAL	290:26	290:26	15	- 1
UNARY_EXPR	290:26	290:27	16	- 1
UNARY_OPERATOR	290:26	290:26	17	-
LEAF_NODE	290:26	290:26	18	-
FIELD	290:27	290:27	17	1
LEAF_NODE	290:27	290:27	18	1
LEAF_NODE	290:28	290:28	13	;
EXPR_STATEMENT	291:20	291:34	12	errno = EINVAL ;
EXPR	291:20	291:20	13	errno = EINVAL
ASSIGN	291:20	291:28	14	errno = EINVAL
LVAL	291:20	291:20	15	errno
FIELD	291:20	291:20	16	errno
LEAF_NODE	291:20	291:20	17	errno
ASSIGN_OP	291:26	291:26	15	=
LEAF_NODE	291:26	291:26	16	=
RVAL	291:28	291:28	15	EINVAL
FIELD	291:28	291:28	16	EINVAL
LEAF_NODE	291:28	291:28	17	EINVAL
LEAF_NODE	291:34	291:34	13	;
LEAF_NODE	292:16	292:16	11	}
SELECTION	293:16	294:16	9	
KEYWORD	293:16	293:16	10	else
LEAF_NODE	293:16	293:16	11	else
STATEMENTS	294:16	299:16	10	
LEAF_NODE	294:16	294:16	11	{
STATEMENTS	295:20	298:20	11	
SELECTION	295:20	296:24	12	
KEYWORD	295:20	295:20	13	if
LEAF_NODE	295:20	295:20	14	if
LEAF_NODE	295:23	295:23	13	(
CONDITION	295:24	295:24	13	test_off > buf_size [ fd ]
EXPR	295:24	295:35	14	test_off > buf_size [ fd ]
FIELD	295:24	295:24	15	test_off
LEAF_NODE	295:24	295:24	16	test_off
REL_OPERATOR	295:33	295:33	15	>
LEAF_NODE	295:33	295:33	16	>
FIELD	295:35	295:46	15	buf_size [ fd ]
LEAF_NODE	295:35	295:35	16	buf_size
LEAF_NODE	295:43	295:43	16	[
EXPR	295:44	295:44	16	fd
FIELD	295:44	295:44	17	fd
LEAF_NODE	295:44	295:44	18	fd
LEAF_NODE	295:46	295:46	16	]
LEAF_NODE	295:47	295:47	13	)
STATEMENTS	296:24	296:24	13	
EXPR_STATEMENT	296:24	296:54	14	extend_mem_file ( fd , test_off ) ;
EXPR	296:24	296:24	15	extend_mem_file ( fd , test_off )
FUNCTION_CALL	296:24	296:53	16	extend_mem_file ( fd , test_off )
CALLEE	296:24	296:24	17	extend_mem_file
LEAF_NODE	296:24	296:24	18	extend_mem_file
LEAF_NODE	296:40	296:40	17	(
ARGUMENT	296:41	296:41	17	fd
FIELD	296:41	296:41	18	fd
LEAF_NODE	296:41	296:41	19	fd
LEAF_NODE	296:43	296:43	17	,
ARGUMENT	296:45	296:45	17	test_off
FIELD	296:45	296:45	18	test_off
LEAF_NODE	296:45	296:45	19	test_off
LEAF_NODE	296:53	296:53	17	)
LEAF_NODE	296:54	296:54	15	;
EXPR_STATEMENT	297:20	297:42	12	buf_off [ fd ] = test_off ;
EXPR	297:20	297:20	13	buf_off [ fd ] = test_off
ASSIGN	297:20	297:34	14	buf_off [ fd ] = test_off
LVAL	297:20	297:20	15	buf_off [ fd ]
FIELD	297:20	297:30	16	buf_off [ fd ]
LEAF_NODE	297:20	297:20	17	buf_off
LEAF_NODE	297:27	297:27	17	[
EXPR	297:28	297:28	17	fd
FIELD	297:28	297:28	18	fd
LEAF_NODE	297:28	297:28	19	fd
LEAF_NODE	297:30	297:30	17	]
ASSIGN_OP	297:32	297:32	15	=
LEAF_NODE	297:32	297:32	16	=
RVAL	297:34	297:34	15	test_off
FIELD	297:34	297:34	16	test_off
LEAF_NODE	297:34	297:34	17	test_off
LEAF_NODE	297:42	297:42	13	;
EXPR_STATEMENT	298:20	298:34	12	ret = test_off ;
EXPR	298:20	298:20	13	ret = test_off
ASSIGN	298:20	298:26	14	ret = test_off
LVAL	298:20	298:20	15	ret
FIELD	298:20	298:20	16	ret
LEAF_NODE	298:20	298:20	17	ret
ASSIGN_OP	298:24	298:24	15	=
LEAF_NODE	298:24	298:24	16	=
RVAL	298:26	298:26	15	test_off
FIELD	298:26	298:26	16	test_off
LEAF_NODE	298:26	298:26	17	test_off
LEAF_NODE	298:34	298:34	13	;
LEAF_NODE	299:16	299:16	11	}
JUMP_STATEMENT	300:16	300:21	9	break DESTINATION ;
KEYWORD	300:16	300:16	10	break
LEAF_NODE	300:16	300:16	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	300:21	300:21	10	;
LABEL	302:12	302:19	9	default :
LEAF_NODE	302:12	302:12	10	default
LEAF_NODE	302:19	302:19	10	:
EXPR_STATEMENT	303:16	303:30	9	errno = EINVAL ;
EXPR	303:16	303:16	10	errno = EINVAL
ASSIGN	303:16	303:24	11	errno = EINVAL
LVAL	303:16	303:16	12	errno
FIELD	303:16	303:16	13	errno
LEAF_NODE	303:16	303:16	14	errno
ASSIGN_OP	303:22	303:22	12	=
LEAF_NODE	303:22	303:22	13	=
RVAL	303:24	303:24	12	EINVAL
FIELD	303:24	303:24	13	EINVAL
LEAF_NODE	303:24	303:24	14	EINVAL
LEAF_NODE	303:30	303:30	10	;
EXPR_STATEMENT	304:16	304:24	9	ret = - 1 ;
EXPR	304:16	304:16	10	ret = - 1
ASSIGN	304:16	304:22	11	ret = - 1
LVAL	304:16	304:16	12	ret
FIELD	304:16	304:16	13	ret
LEAF_NODE	304:16	304:16	14	ret
ASSIGN_OP	304:20	304:20	12	=
LEAF_NODE	304:20	304:20	13	=
RVAL	304:22	304:22	12	- 1
UNARY_EXPR	304:22	304:23	13	- 1
UNARY_OPERATOR	304:22	304:22	14	-
LEAF_NODE	304:22	304:22	15	-
FIELD	304:23	304:23	14	1
LEAF_NODE	304:23	304:23	15	1
LEAF_NODE	304:24	304:24	10	;
JUMP_STATEMENT	305:16	305:21	9	break DESTINATION ;
KEYWORD	305:16	305:16	10	break
LEAF_NODE	305:16	305:16	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	305:21	305:21	10	;
LEAF_NODE	306:8	306:8	8	}
LEAF_NODE	307:4	307:4	5	}
LEAF_NODE	309:4	309:4	3	return
LEAF_NODE	309:11	309:11	3	(
LEAF_NODE	309:12	309:12	3	ret
LEAF_NODE	309:15	309:15	3	)
LEAF_NODE	309:16	309:16	3	;
LEAF_NODE	310:0	310:0	2	}
FUNCTION_DEF	327:0	350:0	1	
RETURN_TYPE	327:0	327:0	2	int
TYPE_NAME	327:0	327:0	3	int
LEAF_NODE	327:0	327:0	4	int
FUNCTION_NAME	327:4	327:4	2	mfs_read
LEAF_NODE	327:4	327:4	3	mfs_read
PARAMETER_LIST	327:13	327:46	2	( int fd , void * clnt_buf , int size )
LEAF_NODE	327:13	327:13	3	(
PARAMETER_DECL	327:14	327:18	3	int fd
TYPE	327:14	327:14	4	int
TYPE_NAME	327:14	327:14	5	int
LEAF_NODE	327:14	327:14	6	int
NAME	327:18	327:18	4	fd
LEAF_NODE	327:18	327:18	5	fd
LEAF_NODE	327:20	327:20	3	,
PARAMETER_DECL	327:22	327:28	3	void * clnt_buf
TYPE	327:22	327:27	4	void *
TYPE_NAME	327:22	327:22	5	void
LEAF_NODE	327:22	327:22	6	void
POINTER	327:27	327:27	5	*
LEAF_NODE	327:27	327:27	6	*
NAME	327:28	327:28	4	clnt_buf
LEAF_NODE	327:28	327:28	5	clnt_buf
LEAF_NODE	327:36	327:36	3	,
PARAMETER_DECL	327:38	327:42	3	int size
TYPE	327:38	327:38	4	int
TYPE_NAME	327:38	327:38	5	int
LEAF_NODE	327:38	327:38	6	int
NAME	327:42	327:42	4	size
LEAF_NODE	327:42	327:42	5	size
LEAF_NODE	327:46	327:46	3	)
LEAF_NODE	328:0	328:0	2	{
STATEMENTS	329:4	349:16	2	
SIMPLE_DECL	329:4	329:11	3	int ret ;
VAR_DECL	329:4	329:8	4	int ret
TYPE	329:4	329:4	5	int
TYPE_NAME	329:4	329:4	6	int
LEAF_NODE	329:4	329:4	7	int
NAME	329:8	329:8	5	ret
LEAF_NODE	329:8	329:8	6	ret
LEAF_NODE	329:11	329:11	4	;
SELECTION	331:4	332:4	3	
KEYWORD	331:4	331:4	4	if
LEAF_NODE	331:4	331:4	5	if
LEAF_NODE	331:7	331:7	4	(
CONDITION	331:8	331:8	4	fds [ fd ] == - 1 || buf_mode [ fd ] != 'r'
EXPR	331:8	331:8	5	fds [ fd ] == - 1 || buf_mode [ fd ] != 'r'
OR	331:8	331:25	6	fds [ fd ] == - 1 || buf_mode [ fd ] != 'r'
EXPR	331:8	331:19	7	fds [ fd ] == - 1
FIELD	331:8	331:14	8	fds [ fd ]
LEAF_NODE	331:8	331:8	9	fds
LEAF_NODE	331:11	331:11	9	[
EXPR	331:12	331:12	9	fd
FIELD	331:12	331:12	10	fd
LEAF_NODE	331:12	331:12	11	fd
LEAF_NODE	331:14	331:14	9	]
EQ_OPERATOR	331:16	331:16	8	==
LEAF_NODE	331:16	331:16	9	==
UNARY_EXPR	331:19	331:20	8	- 1
UNARY_OPERATOR	331:19	331:19	9	-
LEAF_NODE	331:19	331:19	10	-
FIELD	331:20	331:20	9	1
LEAF_NODE	331:20	331:20	10	1
LEAF_NODE	331:22	331:22	7	||
EXPR	331:25	331:41	7	buf_mode [ fd ] != 'r'
FIELD	331:25	331:36	8	buf_mode [ fd ]
LEAF_NODE	331:25	331:25	9	buf_mode
LEAF_NODE	331:33	331:33	9	[
EXPR	331:34	331:34	9	fd
FIELD	331:34	331:34	10	fd
LEAF_NODE	331:34	331:34	11	fd
LEAF_NODE	331:36	331:36	9	]
EQ_OPERATOR	331:38	331:38	8	!=
LEAF_NODE	331:38	331:38	9	!=
FIELD	331:41	331:41	8	'r'
LEAF_NODE	331:41	331:41	9	'r'
LEAF_NODE	331:44	331:44	4	)
STATEMENTS	332:4	337:4	4	
LEAF_NODE	332:4	332:4	5	{
STATEMENTS	335:8	336:8	5	
EXPR_STATEMENT	335:8	335:16	6	ret = - 1 ;
EXPR	335:8	335:8	7	ret = - 1
ASSIGN	335:8	335:14	8	ret = - 1
LVAL	335:8	335:8	9	ret
FIELD	335:8	335:8	10	ret
LEAF_NODE	335:8	335:8	11	ret
ASSIGN_OP	335:12	335:12	9	=
LEAF_NODE	335:12	335:12	10	=
RVAL	335:14	335:14	9	- 1
UNARY_EXPR	335:14	335:15	10	- 1
UNARY_OPERATOR	335:14	335:14	11	-
LEAF_NODE	335:14	335:14	12	-
FIELD	335:15	335:15	11	1
LEAF_NODE	335:15	335:15	12	1
LEAF_NODE	335:16	335:16	7	;
EXPR_STATEMENT	336:8	336:21	6	errno = EBADF ;
EXPR	336:8	336:8	7	errno = EBADF
ASSIGN	336:8	336:16	8	errno = EBADF
LVAL	336:8	336:8	9	errno
FIELD	336:8	336:8	10	errno
LEAF_NODE	336:8	336:8	11	errno
ASSIGN_OP	336:14	336:14	9	=
LEAF_NODE	336:14	336:14	10	=
RVAL	336:16	336:16	9	EBADF
FIELD	336:16	336:16	10	EBADF
LEAF_NODE	336:16	336:16	11	EBADF
LEAF_NODE	336:21	336:21	7	;
LEAF_NODE	337:4	337:4	5	}
SELECTION	338:4	338:9	3	
KEYWORD	338:4	338:4	4	else
LEAF_NODE	338:4	338:4	5	else
STATEMENTS	338:9	338:9	4	
SELECTION	338:9	339:4	5	
KEYWORD	338:9	338:9	6	if
LEAF_NODE	338:9	338:9	7	if
LEAF_NODE	338:12	338:12	6	(
CONDITION	338:13	338:13	6	buf_off [ fd ] + size > buf_size [ fd ]
EXPR	338:13	338:34	7	buf_off [ fd ] + size > buf_size [ fd ]
FIELD	338:13	338:23	8	buf_off [ fd ]
LEAF_NODE	338:13	338:13	9	buf_off
LEAF_NODE	338:20	338:20	9	[
EXPR	338:21	338:21	9	fd
FIELD	338:21	338:21	10	fd
LEAF_NODE	338:21	338:21	11	fd
LEAF_NODE	338:23	338:23	9	]
LEAF_NODE	338:25	338:25	8	+
FIELD	338:27	338:27	8	size
LEAF_NODE	338:27	338:27	9	size
REL_OPERATOR	338:32	338:32	8	>
LEAF_NODE	338:32	338:32	9	>
FIELD	338:34	338:45	8	buf_size [ fd ]
LEAF_NODE	338:34	338:34	9	buf_size
LEAF_NODE	338:42	338:42	9	[
EXPR	338:43	338:43	9	fd
FIELD	338:43	338:43	10	fd
LEAF_NODE	338:43	338:43	11	fd
LEAF_NODE	338:45	338:45	9	]
LEAF_NODE	338:46	338:46	6	)
STATEMENTS	339:4	341:4	6	
LEAF_NODE	339:4	339:4	7	{
STATEMENTS	340:8	340:8	7	
EXPR_STATEMENT	340:8	340:15	8	ret = 0 ;
EXPR	340:8	340:8	9	ret = 0
ASSIGN	340:8	340:14	10	ret = 0
LVAL	340:8	340:8	11	ret
FIELD	340:8	340:8	12	ret
LEAF_NODE	340:8	340:8	13	ret
ASSIGN_OP	340:12	340:12	11	=
LEAF_NODE	340:12	340:12	12	=
RVAL	340:14	340:14	11	0
FIELD	340:14	340:14	12	0
LEAF_NODE	340:14	340:14	13	0
LEAF_NODE	340:15	340:15	9	;
LEAF_NODE	341:4	341:4	7	}
SELECTION	342:4	343:4	3	
KEYWORD	342:4	342:4	4	else
LEAF_NODE	342:4	342:4	5	else
STATEMENTS	343:4	347:4	4	
LEAF_NODE	343:4	343:4	5	{
STATEMENTS	344:8	346:8	5	
EXPR_STATEMENT	344:8	344:65	6	memcpy ( clnt_buf , ( void * ) ( buf [ fd ] + buf_off [ fd ] ) , size ) ;
EXPR	344:8	344:8	7	memcpy ( clnt_buf , ( void * ) ( buf [ fd ] + buf_off [ fd ] ) , size )
FUNCTION_CALL	344:8	344:64	8	memcpy ( clnt_buf , ( void * ) ( buf [ fd ] + buf_off [ fd ] ) , size )
CALLEE	344:8	344:8	9	memcpy
LEAF_NODE	344:8	344:8	10	memcpy
LEAF_NODE	344:15	344:15	9	(
ARGUMENT	344:16	344:16	9	clnt_buf
FIELD	344:16	344:16	10	clnt_buf
LEAF_NODE	344:16	344:16	11	clnt_buf
LEAF_NODE	344:24	344:24	9	,
ARGUMENT	344:26	344:57	9	( void * ) ( buf [ fd ] + buf_off [ fd ] )
LEAF_NODE	344:26	344:26	10	(
TYPE_NAME	344:27	344:27	10	void
LEAF_NODE	344:27	344:27	11	void
LEAF_NODE	344:32	344:32	10	*
LEAF_NODE	344:33	344:33	10	)
LEAF_NODE	344:35	344:35	10	(
FIELD	344:36	344:42	10	buf [ fd ]
LEAF_NODE	344:36	344:36	11	buf
LEAF_NODE	344:39	344:39	11	[
EXPR	344:40	344:40	11	fd
FIELD	344:40	344:40	12	fd
LEAF_NODE	344:40	344:40	13	fd
LEAF_NODE	344:42	344:42	11	]
LEAF_NODE	344:44	344:44	10	+
FIELD	344:46	344:56	10	buf_off [ fd ]
LEAF_NODE	344:46	344:46	11	buf_off
LEAF_NODE	344:53	344:53	11	[
EXPR	344:54	344:54	11	fd
FIELD	344:54	344:54	12	fd
LEAF_NODE	344:54	344:54	13	fd
LEAF_NODE	344:56	344:56	11	]
LEAF_NODE	344:57	344:57	10	)
LEAF_NODE	344:58	344:58	9	,
ARGUMENT	344:60	344:60	9	size
FIELD	344:60	344:60	10	size
LEAF_NODE	344:60	344:60	11	size
LEAF_NODE	344:64	344:64	9	)
LEAF_NODE	344:65	344:65	7	;
EXPR_STATEMENT	345:8	345:40	6	buf_off [ fd ] = buf_off [ fd ] + size ;
EXPR	345:8	345:8	7	buf_off [ fd ] = buf_off [ fd ] + size
ASSIGN	345:8	345:22	8	buf_off [ fd ] = buf_off [ fd ] + size
LVAL	345:8	345:8	9	buf_off [ fd ]
FIELD	345:8	345:18	10	buf_off [ fd ]
LEAF_NODE	345:8	345:8	11	buf_off
LEAF_NODE	345:15	345:15	11	[
EXPR	345:16	345:16	11	fd
FIELD	345:16	345:16	12	fd
LEAF_NODE	345:16	345:16	13	fd
LEAF_NODE	345:18	345:18	11	]
ASSIGN_OP	345:20	345:20	9	=
LEAF_NODE	345:20	345:20	10	=
RVAL	345:22	345:36	9	buf_off [ fd ] + size
FIELD	345:22	345:32	10	buf_off [ fd ]
LEAF_NODE	345:22	345:22	11	buf_off
LEAF_NODE	345:29	345:29	11	[
EXPR	345:30	345:30	11	fd
FIELD	345:30	345:30	12	fd
LEAF_NODE	345:30	345:30	13	fd
LEAF_NODE	345:32	345:32	11	]
LEAF_NODE	345:34	345:34	10	+
FIELD	345:36	345:36	10	size
LEAF_NODE	345:36	345:36	11	size
LEAF_NODE	345:40	345:40	7	;
EXPR_STATEMENT	346:8	346:18	6	ret = size ;
EXPR	346:8	346:8	7	ret = size
ASSIGN	346:8	346:14	8	ret = size
LVAL	346:8	346:8	9	ret
FIELD	346:8	346:8	10	ret
LEAF_NODE	346:8	346:8	11	ret
ASSIGN_OP	346:12	346:12	9	=
LEAF_NODE	346:12	346:12	10	=
RVAL	346:14	346:14	9	size
FIELD	346:14	346:14	10	size
LEAF_NODE	346:14	346:14	11	size
LEAF_NODE	346:18	346:18	7	;
LEAF_NODE	347:4	347:4	5	}
LEAF_NODE	349:4	349:4	3	return
LEAF_NODE	349:11	349:11	3	(
LEAF_NODE	349:12	349:12	3	ret
LEAF_NODE	349:15	349:15	3	)
LEAF_NODE	349:16	349:16	3	;
LEAF_NODE	350:0	350:0	2	}
FUNCTION_DEF	367:0	410:0	1	
RETURN_TYPE	367:0	367:0	2	int
TYPE_NAME	367:0	367:0	3	int
LEAF_NODE	367:0	367:0	4	int
FUNCTION_NAME	367:4	367:4	2	mfs_write
LEAF_NODE	367:4	367:4	3	mfs_write
PARAMETER_LIST	367:14	367:47	2	( int fd , void * clnt_buf , int size )
LEAF_NODE	367:14	367:14	3	(
PARAMETER_DECL	367:15	367:19	3	int fd
TYPE	367:15	367:15	4	int
TYPE_NAME	367:15	367:15	5	int
LEAF_NODE	367:15	367:15	6	int
NAME	367:19	367:19	4	fd
LEAF_NODE	367:19	367:19	5	fd
LEAF_NODE	367:21	367:21	3	,
PARAMETER_DECL	367:23	367:29	3	void * clnt_buf
TYPE	367:23	367:28	4	void *
TYPE_NAME	367:23	367:23	5	void
LEAF_NODE	367:23	367:23	6	void
POINTER	367:28	367:28	5	*
LEAF_NODE	367:28	367:28	6	*
NAME	367:29	367:29	4	clnt_buf
LEAF_NODE	367:29	367:29	5	clnt_buf
LEAF_NODE	367:37	367:37	3	,
PARAMETER_DECL	367:39	367:43	3	int size
TYPE	367:39	367:39	4	int
TYPE_NAME	367:39	367:39	5	int
LEAF_NODE	367:39	367:39	6	int
NAME	367:43	367:43	4	size
LEAF_NODE	367:43	367:43	5	size
LEAF_NODE	367:47	367:47	3	)
LEAF_NODE	368:0	368:0	2	{
STATEMENTS	369:4	409:16	2	
SIMPLE_DECL	369:4	369:11	3	int ret ;
VAR_DECL	369:4	369:8	4	int ret
TYPE	369:4	369:4	5	int
TYPE_NAME	369:4	369:4	6	int
LEAF_NODE	369:4	369:4	7	int
NAME	369:8	369:8	5	ret
LEAF_NODE	369:8	369:8	6	ret
LEAF_NODE	369:11	369:11	4	;
SELECTION	371:4	372:4	3	
KEYWORD	371:4	371:4	4	if
LEAF_NODE	371:4	371:4	5	if
LEAF_NODE	371:7	371:7	4	(
CONDITION	371:8	371:8	4	fds [ fd ] == - 1 || buf_mode [ fd ] == 'r'
EXPR	371:8	371:8	5	fds [ fd ] == - 1 || buf_mode [ fd ] == 'r'
OR	371:8	371:25	6	fds [ fd ] == - 1 || buf_mode [ fd ] == 'r'
EXPR	371:8	371:19	7	fds [ fd ] == - 1
FIELD	371:8	371:14	8	fds [ fd ]
LEAF_NODE	371:8	371:8	9	fds
LEAF_NODE	371:11	371:11	9	[
EXPR	371:12	371:12	9	fd
FIELD	371:12	371:12	10	fd
LEAF_NODE	371:12	371:12	11	fd
LEAF_NODE	371:14	371:14	9	]
EQ_OPERATOR	371:16	371:16	8	==
LEAF_NODE	371:16	371:16	9	==
UNARY_EXPR	371:19	371:20	8	- 1
UNARY_OPERATOR	371:19	371:19	9	-
LEAF_NODE	371:19	371:19	10	-
FIELD	371:20	371:20	9	1
LEAF_NODE	371:20	371:20	10	1
LEAF_NODE	371:22	371:22	7	||
EXPR	371:25	371:41	7	buf_mode [ fd ] == 'r'
FIELD	371:25	371:36	8	buf_mode [ fd ]
LEAF_NODE	371:25	371:25	9	buf_mode
LEAF_NODE	371:33	371:33	9	[
EXPR	371:34	371:34	9	fd
FIELD	371:34	371:34	10	fd
LEAF_NODE	371:34	371:34	11	fd
LEAF_NODE	371:36	371:36	9	]
EQ_OPERATOR	371:38	371:38	8	==
LEAF_NODE	371:38	371:38	9	==
FIELD	371:41	371:41	8	'r'
LEAF_NODE	371:41	371:41	9	'r'
LEAF_NODE	371:44	371:44	4	)
STATEMENTS	372:4	377:4	4	
LEAF_NODE	372:4	372:4	5	{
STATEMENTS	375:8	376:8	5	
EXPR_STATEMENT	375:8	375:16	6	ret = - 1 ;
EXPR	375:8	375:8	7	ret = - 1
ASSIGN	375:8	375:14	8	ret = - 1
LVAL	375:8	375:8	9	ret
FIELD	375:8	375:8	10	ret
LEAF_NODE	375:8	375:8	11	ret
ASSIGN_OP	375:12	375:12	9	=
LEAF_NODE	375:12	375:12	10	=
RVAL	375:14	375:14	9	- 1
UNARY_EXPR	375:14	375:15	10	- 1
UNARY_OPERATOR	375:14	375:14	11	-
LEAF_NODE	375:14	375:14	12	-
FIELD	375:15	375:15	11	1
LEAF_NODE	375:15	375:15	12	1
LEAF_NODE	375:16	375:16	7	;
EXPR_STATEMENT	376:8	376:21	6	errno = EBADF ;
EXPR	376:8	376:8	7	errno = EBADF
ASSIGN	376:8	376:16	8	errno = EBADF
LVAL	376:8	376:8	9	errno
FIELD	376:8	376:8	10	errno
LEAF_NODE	376:8	376:8	11	errno
ASSIGN_OP	376:14	376:14	9	=
LEAF_NODE	376:14	376:14	10	=
RVAL	376:16	376:16	9	EBADF
FIELD	376:16	376:16	10	EBADF
LEAF_NODE	376:16	376:16	11	EBADF
LEAF_NODE	376:21	376:21	7	;
LEAF_NODE	377:4	377:4	5	}
SELECTION	378:4	378:9	3	
KEYWORD	378:4	378:4	4	else
LEAF_NODE	378:4	378:4	5	else
STATEMENTS	378:9	378:9	4	
SELECTION	378:9	379:4	5	
KEYWORD	378:9	378:9	6	if
LEAF_NODE	378:9	378:9	7	if
LEAF_NODE	378:12	378:12	6	(
CONDITION	378:13	378:13	6	buf_mode [ fd ] == 'w'
EXPR	378:13	378:29	7	buf_mode [ fd ] == 'w'
FIELD	378:13	378:24	8	buf_mode [ fd ]
LEAF_NODE	378:13	378:13	9	buf_mode
LEAF_NODE	378:21	378:21	9	[
EXPR	378:22	378:22	9	fd
FIELD	378:22	378:22	10	fd
LEAF_NODE	378:22	378:22	11	fd
LEAF_NODE	378:24	378:24	9	]
EQ_OPERATOR	378:26	378:26	8	==
LEAF_NODE	378:26	378:26	9	==
FIELD	378:29	378:29	8	'w'
LEAF_NODE	378:29	378:29	9	'w'
LEAF_NODE	378:32	378:32	6	)
STATEMENTS	379:4	392:4	6	
LEAF_NODE	379:4	379:4	7	{
STATEMENTS	382:8	391:8	7	
SELECTION	382:8	383:8	8	
KEYWORD	382:8	382:8	9	if
LEAF_NODE	382:8	382:8	10	if
LEAF_NODE	382:11	382:11	9	(
CONDITION	382:12	382:12	9	buf_off [ fd ] + size > buf_size [ fd ]
EXPR	382:12	382:33	10	buf_off [ fd ] + size > buf_size [ fd ]
FIELD	382:12	382:22	11	buf_off [ fd ]
LEAF_NODE	382:12	382:12	12	buf_off
LEAF_NODE	382:19	382:19	12	[
EXPR	382:20	382:20	12	fd
FIELD	382:20	382:20	13	fd
LEAF_NODE	382:20	382:20	14	fd
LEAF_NODE	382:22	382:22	12	]
LEAF_NODE	382:24	382:24	11	+
FIELD	382:26	382:26	11	size
LEAF_NODE	382:26	382:26	12	size
REL_OPERATOR	382:31	382:31	11	>
LEAF_NODE	382:31	382:31	12	>
FIELD	382:33	382:44	11	buf_size [ fd ]
LEAF_NODE	382:33	382:33	12	buf_size
LEAF_NODE	382:41	382:41	12	[
EXPR	382:42	382:42	12	fd
FIELD	382:42	382:42	13	fd
LEAF_NODE	382:42	382:42	14	fd
LEAF_NODE	382:44	382:44	12	]
LEAF_NODE	382:45	382:45	9	)
STATEMENTS	383:8	386:8	9	
LEAF_NODE	383:8	383:8	10	{
STATEMENTS	384:12	385:12	10	
EXPR_STATEMENT	384:12	384:52	11	extend_mem_file ( fd , buf_off [ fd ] + size ) ;
EXPR	384:12	384:12	12	extend_mem_file ( fd , buf_off [ fd ] + size )
FUNCTION_CALL	384:12	384:51	13	extend_mem_file ( fd , buf_off [ fd ] + size )
CALLEE	384:12	384:12	14	extend_mem_file
LEAF_NODE	384:12	384:12	15	extend_mem_file
LEAF_NODE	384:28	384:28	14	(
ARGUMENT	384:29	384:29	14	fd
FIELD	384:29	384:29	15	fd
LEAF_NODE	384:29	384:29	16	fd
LEAF_NODE	384:31	384:31	14	,
ARGUMENT	384:33	384:47	14	buf_off [ fd ] + size
FIELD	384:33	384:43	15	buf_off [ fd ]
LEAF_NODE	384:33	384:33	16	buf_off
LEAF_NODE	384:40	384:40	16	[
EXPR	384:41	384:41	16	fd
FIELD	384:41	384:41	17	fd
LEAF_NODE	384:41	384:41	18	fd
LEAF_NODE	384:43	384:43	16	]
LEAF_NODE	384:45	384:45	15	+
FIELD	384:47	384:47	15	size
LEAF_NODE	384:47	384:47	16	size
LEAF_NODE	384:51	384:51	14	)
LEAF_NODE	384:52	384:52	12	;
EXPR_STATEMENT	385:12	385:47	11	buf_size [ fd ] = ( buf_off [ fd ] + size ) ;
EXPR	385:12	385:12	12	buf_size [ fd ] = ( buf_off [ fd ] + size )
ASSIGN	385:12	385:27	13	buf_size [ fd ] = ( buf_off [ fd ] + size )
LVAL	385:12	385:12	14	buf_size [ fd ]
FIELD	385:12	385:23	15	buf_size [ fd ]
LEAF_NODE	385:12	385:12	16	buf_size
LEAF_NODE	385:20	385:20	16	[
EXPR	385:21	385:21	16	fd
FIELD	385:21	385:21	17	fd
LEAF_NODE	385:21	385:21	18	fd
LEAF_NODE	385:23	385:23	16	]
ASSIGN_OP	385:25	385:25	14	=
LEAF_NODE	385:25	385:25	15	=
RVAL	385:27	385:46	14	( buf_off [ fd ] + size )
LEAF_NODE	385:27	385:27	15	(
FIELD	385:28	385:38	15	buf_off [ fd ]
LEAF_NODE	385:28	385:28	16	buf_off
LEAF_NODE	385:35	385:35	16	[
EXPR	385:36	385:36	16	fd
FIELD	385:36	385:36	17	fd
LEAF_NODE	385:36	385:36	18	fd
LEAF_NODE	385:38	385:38	16	]
LEAF_NODE	385:40	385:40	15	+
FIELD	385:42	385:42	15	size
LEAF_NODE	385:42	385:42	16	size
LEAF_NODE	385:46	385:46	15	)
LEAF_NODE	385:47	385:47	12	;
LEAF_NODE	386:8	386:8	10	}
EXPR_STATEMENT	388:8	388:56	8	memcpy ( ( buf [ fd ] + buf_off [ fd ] ) , clnt_buf , size ) ;
EXPR	388:8	388:8	9	memcpy ( ( buf [ fd ] + buf_off [ fd ] ) , clnt_buf , size )
FUNCTION_CALL	388:8	388:55	10	memcpy ( ( buf [ fd ] + buf_off [ fd ] ) , clnt_buf , size )
CALLEE	388:8	388:8	11	memcpy
LEAF_NODE	388:8	388:8	12	memcpy
LEAF_NODE	388:15	388:15	11	(
ARGUMENT	388:16	388:38	11	( buf [ fd ] + buf_off [ fd ] )
LEAF_NODE	388:16	388:16	12	(
FIELD	388:17	388:23	12	buf [ fd ]
LEAF_NODE	388:17	388:17	13	buf
LEAF_NODE	388:20	388:20	13	[
EXPR	388:21	388:21	13	fd
FIELD	388:21	388:21	14	fd
LEAF_NODE	388:21	388:21	15	fd
LEAF_NODE	388:23	388:23	13	]
LEAF_NODE	388:25	388:25	12	+
FIELD	388:27	388:37	12	buf_off [ fd ]
LEAF_NODE	388:27	388:27	13	buf_off
LEAF_NODE	388:34	388:34	13	[
EXPR	388:35	388:35	13	fd
FIELD	388:35	388:35	14	fd
LEAF_NODE	388:35	388:35	15	fd
LEAF_NODE	388:37	388:37	13	]
LEAF_NODE	388:38	388:38	12	)
LEAF_NODE	388:39	388:39	11	,
ARGUMENT	388:41	388:41	11	clnt_buf
FIELD	388:41	388:41	12	clnt_buf
LEAF_NODE	388:41	388:41	13	clnt_buf
LEAF_NODE	388:49	388:49	11	,
ARGUMENT	388:51	388:51	11	size
FIELD	388:51	388:51	12	size
LEAF_NODE	388:51	388:51	13	size
LEAF_NODE	388:55	388:55	11	)
LEAF_NODE	388:56	388:56	9	;
EXPR_STATEMENT	389:8	389:40	8	buf_off [ fd ] = buf_off [ fd ] + size ;
EXPR	389:8	389:8	9	buf_off [ fd ] = buf_off [ fd ] + size
ASSIGN	389:8	389:22	10	buf_off [ fd ] = buf_off [ fd ] + size
LVAL	389:8	389:8	11	buf_off [ fd ]
FIELD	389:8	389:18	12	buf_off [ fd ]
LEAF_NODE	389:8	389:8	13	buf_off
LEAF_NODE	389:15	389:15	13	[
EXPR	389:16	389:16	13	fd
FIELD	389:16	389:16	14	fd
LEAF_NODE	389:16	389:16	15	fd
LEAF_NODE	389:18	389:18	13	]
ASSIGN_OP	389:20	389:20	11	=
LEAF_NODE	389:20	389:20	12	=
RVAL	389:22	389:36	11	buf_off [ fd ] + size
FIELD	389:22	389:32	12	buf_off [ fd ]
LEAF_NODE	389:22	389:22	13	buf_off
LEAF_NODE	389:29	389:29	13	[
EXPR	389:30	389:30	13	fd
FIELD	389:30	389:30	14	fd
LEAF_NODE	389:30	389:30	15	fd
LEAF_NODE	389:32	389:32	13	]
LEAF_NODE	389:34	389:34	12	+
FIELD	389:36	389:36	12	size
LEAF_NODE	389:36	389:36	13	size
LEAF_NODE	389:40	389:40	9	;
EXPR_STATEMENT	391:8	391:18	8	ret = size ;
EXPR	391:8	391:8	9	ret = size
ASSIGN	391:8	391:14	10	ret = size
LVAL	391:8	391:8	11	ret
FIELD	391:8	391:8	12	ret
LEAF_NODE	391:8	391:8	13	ret
ASSIGN_OP	391:12	391:12	11	=
LEAF_NODE	391:12	391:12	12	=
RVAL	391:14	391:14	11	size
FIELD	391:14	391:14	12	size
LEAF_NODE	391:14	391:14	13	size
LEAF_NODE	391:18	391:18	9	;
LEAF_NODE	392:4	392:4	7	}
SELECTION	393:4	394:4	3	
KEYWORD	393:4	393:4	4	else
LEAF_NODE	393:4	393:4	5	else
STATEMENTS	394:4	407:4	4	
LEAF_NODE	394:4	394:4	5	{
STATEMENTS	397:8	406:8	5	
SELECTION	397:8	398:12	6	
KEYWORD	397:8	397:8	7	if
LEAF_NODE	397:8	397:8	8	if
LEAF_NODE	397:11	397:11	7	(
CONDITION	397:12	397:12	7	buf_off [ fd ] != buf_size [ fd ]
EXPR	397:12	397:27	8	buf_off [ fd ] != buf_size [ fd ]
FIELD	397:12	397:22	9	buf_off [ fd ]
LEAF_NODE	397:12	397:12	10	buf_off
LEAF_NODE	397:19	397:19	10	[
EXPR	397:20	397:20	10	fd
FIELD	397:20	397:20	11	fd
LEAF_NODE	397:20	397:20	12	fd
LEAF_NODE	397:22	397:22	10	]
EQ_OPERATOR	397:24	397:24	9	!=
LEAF_NODE	397:24	397:24	10	!=
FIELD	397:27	397:38	9	buf_size [ fd ]
LEAF_NODE	397:27	397:27	10	buf_size
LEAF_NODE	397:35	397:35	10	[
EXPR	397:36	397:36	10	fd
FIELD	397:36	397:36	11	fd
LEAF_NODE	397:36	397:36	12	fd
LEAF_NODE	397:38	397:38	10	]
LEAF_NODE	397:39	397:39	7	)
STATEMENTS	398:12	398:12	7	
EXPR_STATEMENT	398:12	398:38	8	buf_off [ fd ] = buf_size [ fd ] ;
EXPR	398:12	398:12	9	buf_off [ fd ] = buf_size [ fd ]
ASSIGN	398:12	398:26	10	buf_off [ fd ] = buf_size [ fd ]
LVAL	398:12	398:12	11	buf_off [ fd ]
FIELD	398:12	398:22	12	buf_off [ fd ]
LEAF_NODE	398:12	398:12	13	buf_off
LEAF_NODE	398:19	398:19	13	[
EXPR	398:20	398:20	13	fd
FIELD	398:20	398:20	14	fd
LEAF_NODE	398:20	398:20	15	fd
LEAF_NODE	398:22	398:22	13	]
ASSIGN_OP	398:24	398:24	11	=
LEAF_NODE	398:24	398:24	12	=
RVAL	398:26	398:26	11	buf_size [ fd ]
FIELD	398:26	398:37	12	buf_size [ fd ]
LEAF_NODE	398:26	398:26	13	buf_size
LEAF_NODE	398:34	398:34	13	[
EXPR	398:35	398:35	13	fd
FIELD	398:35	398:35	14	fd
LEAF_NODE	398:35	398:35	15	fd
LEAF_NODE	398:37	398:37	13	]
LEAF_NODE	398:38	398:38	9	;
EXPR_STATEMENT	400:8	400:48	6	extend_mem_file ( fd , buf_off [ fd ] + size ) ;
EXPR	400:8	400:8	7	extend_mem_file ( fd , buf_off [ fd ] + size )
FUNCTION_CALL	400:8	400:47	8	extend_mem_file ( fd , buf_off [ fd ] + size )
CALLEE	400:8	400:8	9	extend_mem_file
LEAF_NODE	400:8	400:8	10	extend_mem_file
LEAF_NODE	400:24	400:24	9	(
ARGUMENT	400:25	400:25	9	fd
FIELD	400:25	400:25	10	fd
LEAF_NODE	400:25	400:25	11	fd
LEAF_NODE	400:27	400:27	9	,
ARGUMENT	400:29	400:43	9	buf_off [ fd ] + size
FIELD	400:29	400:39	10	buf_off [ fd ]
LEAF_NODE	400:29	400:29	11	buf_off
LEAF_NODE	400:36	400:36	11	[
EXPR	400:37	400:37	11	fd
FIELD	400:37	400:37	12	fd
LEAF_NODE	400:37	400:37	13	fd
LEAF_NODE	400:39	400:39	11	]
LEAF_NODE	400:41	400:41	10	+
FIELD	400:43	400:43	10	size
LEAF_NODE	400:43	400:43	11	size
LEAF_NODE	400:47	400:47	9	)
LEAF_NODE	400:48	400:48	7	;
EXPR_STATEMENT	401:8	401:28	6	buf_size [ fd ] += size ;
EXPR	401:8	401:8	7	buf_size [ fd ] += size
ASSIGN	401:8	401:24	8	buf_size [ fd ] += size
LVAL	401:8	401:8	9	buf_size [ fd ]
FIELD	401:8	401:19	10	buf_size [ fd ]
LEAF_NODE	401:8	401:8	11	buf_size
LEAF_NODE	401:16	401:16	11	[
EXPR	401:17	401:17	11	fd
FIELD	401:17	401:17	12	fd
LEAF_NODE	401:17	401:17	13	fd
LEAF_NODE	401:19	401:19	11	]
ASSIGN_OP	401:21	401:21	9	+=
LEAF_NODE	401:21	401:21	10	+=
RVAL	401:24	401:24	9	size
FIELD	401:24	401:24	10	size
LEAF_NODE	401:24	401:24	11	size
LEAF_NODE	401:28	401:28	7	;
EXPR_STATEMENT	403:8	403:56	6	memcpy ( ( buf [ fd ] + buf_off [ fd ] ) , clnt_buf , size ) ;
EXPR	403:8	403:8	7	memcpy ( ( buf [ fd ] + buf_off [ fd ] ) , clnt_buf , size )
FUNCTION_CALL	403:8	403:55	8	memcpy ( ( buf [ fd ] + buf_off [ fd ] ) , clnt_buf , size )
CALLEE	403:8	403:8	9	memcpy
LEAF_NODE	403:8	403:8	10	memcpy
LEAF_NODE	403:15	403:15	9	(
ARGUMENT	403:16	403:38	9	( buf [ fd ] + buf_off [ fd ] )
LEAF_NODE	403:16	403:16	10	(
FIELD	403:17	403:23	10	buf [ fd ]
LEAF_NODE	403:17	403:17	11	buf
LEAF_NODE	403:20	403:20	11	[
EXPR	403:21	403:21	11	fd
FIELD	403:21	403:21	12	fd
LEAF_NODE	403:21	403:21	13	fd
LEAF_NODE	403:23	403:23	11	]
LEAF_NODE	403:25	403:25	10	+
FIELD	403:27	403:37	10	buf_off [ fd ]
LEAF_NODE	403:27	403:27	11	buf_off
LEAF_NODE	403:34	403:34	11	[
EXPR	403:35	403:35	11	fd
FIELD	403:35	403:35	12	fd
LEAF_NODE	403:35	403:35	13	fd
LEAF_NODE	403:37	403:37	11	]
LEAF_NODE	403:38	403:38	10	)
LEAF_NODE	403:39	403:39	9	,
ARGUMENT	403:41	403:41	9	clnt_buf
FIELD	403:41	403:41	10	clnt_buf
LEAF_NODE	403:41	403:41	11	clnt_buf
LEAF_NODE	403:49	403:49	9	,
ARGUMENT	403:51	403:51	9	size
FIELD	403:51	403:51	10	size
LEAF_NODE	403:51	403:51	11	size
LEAF_NODE	403:55	403:55	9	)
LEAF_NODE	403:56	403:56	7	;
EXPR_STATEMENT	404:8	404:40	6	buf_off [ fd ] = buf_off [ fd ] + size ;
EXPR	404:8	404:8	7	buf_off [ fd ] = buf_off [ fd ] + size
ASSIGN	404:8	404:22	8	buf_off [ fd ] = buf_off [ fd ] + size
LVAL	404:8	404:8	9	buf_off [ fd ]
FIELD	404:8	404:18	10	buf_off [ fd ]
LEAF_NODE	404:8	404:8	11	buf_off
LEAF_NODE	404:15	404:15	11	[
EXPR	404:16	404:16	11	fd
FIELD	404:16	404:16	12	fd
LEAF_NODE	404:16	404:16	13	fd
LEAF_NODE	404:18	404:18	11	]
ASSIGN_OP	404:20	404:20	9	=
LEAF_NODE	404:20	404:20	10	=
RVAL	404:22	404:36	9	buf_off [ fd ] + size
FIELD	404:22	404:32	10	buf_off [ fd ]
LEAF_NODE	404:22	404:22	11	buf_off
LEAF_NODE	404:29	404:29	11	[
EXPR	404:30	404:30	11	fd
FIELD	404:30	404:30	12	fd
LEAF_NODE	404:30	404:30	13	fd
LEAF_NODE	404:32	404:32	11	]
LEAF_NODE	404:34	404:34	10	+
FIELD	404:36	404:36	10	size
LEAF_NODE	404:36	404:36	11	size
LEAF_NODE	404:40	404:40	7	;
EXPR_STATEMENT	406:8	406:18	6	ret = size ;
EXPR	406:8	406:8	7	ret = size
ASSIGN	406:8	406:14	8	ret = size
LVAL	406:8	406:8	9	ret
FIELD	406:8	406:8	10	ret
LEAF_NODE	406:8	406:8	11	ret
ASSIGN_OP	406:12	406:12	9	=
LEAF_NODE	406:12	406:12	10	=
RVAL	406:14	406:14	9	size
FIELD	406:14	406:14	10	size
LEAF_NODE	406:14	406:14	11	size
LEAF_NODE	406:18	406:18	7	;
LEAF_NODE	407:4	407:4	5	}
LEAF_NODE	409:4	409:4	3	return
LEAF_NODE	409:11	409:11	3	(
LEAF_NODE	409:12	409:12	3	ret
LEAF_NODE	409:15	409:15	3	)
LEAF_NODE	409:16	409:16	3	;
LEAF_NODE	410:0	410:0	2	}
FUNCTION_DEF	425:0	438:0	1	
RETURN_TYPE	425:0	425:0	2	int
TYPE_NAME	425:0	425:0	3	int
LEAF_NODE	425:0	425:0	4	int
FUNCTION_NAME	425:4	425:4	2	mfs_size
LEAF_NODE	425:4	425:4	3	mfs_size
PARAMETER_LIST	425:13	425:20	2	( int fd )
LEAF_NODE	425:13	425:13	3	(
PARAMETER_DECL	425:14	425:18	3	int fd
TYPE	425:14	425:14	4	int
TYPE_NAME	425:14	425:14	5	int
LEAF_NODE	425:14	425:14	6	int
NAME	425:18	425:18	4	fd
LEAF_NODE	425:18	425:18	5	fd
LEAF_NODE	425:20	425:20	3	)
LEAF_NODE	426:0	426:0	2	{
STATEMENTS	427:4	437:16	2	
SIMPLE_DECL	427:4	427:11	3	int ret ;
VAR_DECL	427:4	427:8	4	int ret
TYPE	427:4	427:4	5	int
TYPE_NAME	427:4	427:4	6	int
LEAF_NODE	427:4	427:4	7	int
NAME	427:8	427:8	5	ret
LEAF_NODE	427:8	427:8	6	ret
LEAF_NODE	427:11	427:11	4	;
SELECTION	429:4	430:4	3	
KEYWORD	429:4	429:4	4	if
LEAF_NODE	429:4	429:4	5	if
LEAF_NODE	429:7	429:7	4	(
CONDITION	429:8	429:8	4	fds [ fd ] == - 1
EXPR	429:8	429:19	5	fds [ fd ] == - 1
FIELD	429:8	429:14	6	fds [ fd ]
LEAF_NODE	429:8	429:8	7	fds
LEAF_NODE	429:11	429:11	7	[
EXPR	429:12	429:12	7	fd
FIELD	429:12	429:12	8	fd
LEAF_NODE	429:12	429:12	9	fd
LEAF_NODE	429:14	429:14	7	]
EQ_OPERATOR	429:16	429:16	6	==
LEAF_NODE	429:16	429:16	7	==
UNARY_EXPR	429:19	429:20	6	- 1
UNARY_OPERATOR	429:19	429:19	7	-
LEAF_NODE	429:19	429:19	8	-
FIELD	429:20	429:20	7	1
LEAF_NODE	429:20	429:20	8	1
LEAF_NODE	429:21	429:21	4	)
STATEMENTS	430:4	433:4	4	
LEAF_NODE	430:4	430:4	5	{
STATEMENTS	431:8	432:8	5	
EXPR_STATEMENT	431:8	431:16	6	ret = - 1 ;
EXPR	431:8	431:8	7	ret = - 1
ASSIGN	431:8	431:14	8	ret = - 1
LVAL	431:8	431:8	9	ret
FIELD	431:8	431:8	10	ret
LEAF_NODE	431:8	431:8	11	ret
ASSIGN_OP	431:12	431:12	9	=
LEAF_NODE	431:12	431:12	10	=
RVAL	431:14	431:14	9	- 1
UNARY_EXPR	431:14	431:15	10	- 1
UNARY_OPERATOR	431:14	431:14	11	-
LEAF_NODE	431:14	431:14	12	-
FIELD	431:15	431:15	11	1
LEAF_NODE	431:15	431:15	12	1
LEAF_NODE	431:16	431:16	7	;
EXPR_STATEMENT	432:8	432:21	6	errno = EBADF ;
EXPR	432:8	432:8	7	errno = EBADF
ASSIGN	432:8	432:16	8	errno = EBADF
LVAL	432:8	432:8	9	errno
FIELD	432:8	432:8	10	errno
LEAF_NODE	432:8	432:8	11	errno
ASSIGN_OP	432:14	432:14	9	=
LEAF_NODE	432:14	432:14	10	=
RVAL	432:16	432:16	9	EBADF
FIELD	432:16	432:16	10	EBADF
LEAF_NODE	432:16	432:16	11	EBADF
LEAF_NODE	432:21	432:21	7	;
LEAF_NODE	433:4	433:4	5	}
SELECTION	434:4	435:8	3	
KEYWORD	434:4	434:4	4	else
LEAF_NODE	434:4	434:4	5	else
STATEMENTS	435:8	435:8	4	
EXPR_STATEMENT	435:8	435:26	5	ret = buf_size [ fd ] ;
EXPR	435:8	435:8	6	ret = buf_size [ fd ]
ASSIGN	435:8	435:14	7	ret = buf_size [ fd ]
LVAL	435:8	435:8	8	ret
FIELD	435:8	435:8	9	ret
LEAF_NODE	435:8	435:8	10	ret
ASSIGN_OP	435:12	435:12	8	=
LEAF_NODE	435:12	435:12	9	=
RVAL	435:14	435:14	8	buf_size [ fd ]
FIELD	435:14	435:25	9	buf_size [ fd ]
LEAF_NODE	435:14	435:14	10	buf_size
LEAF_NODE	435:22	435:22	10	[
EXPR	435:23	435:23	10	fd
FIELD	435:23	435:23	11	fd
LEAF_NODE	435:23	435:23	12	fd
LEAF_NODE	435:25	435:25	10	]
LEAF_NODE	435:26	435:26	6	;
LEAF_NODE	437:4	437:4	3	return
LEAF_NODE	437:11	437:11	3	(
LEAF_NODE	437:12	437:12	3	ret
LEAF_NODE	437:15	437:15	3	)
LEAF_NODE	437:16	437:16	3	;
LEAF_NODE	438:0	438:0	2	}
FUNCTION_DEF	456:0	473:0	1	
RETURN_TYPE	456:0	456:0	2	int
TYPE_NAME	456:0	456:0	3	int
LEAF_NODE	456:0	456:0	4	int
FUNCTION_NAME	456:4	456:4	2	mfs_map
LEAF_NODE	456:4	456:4	3	mfs_map
PARAMETER_LIST	456:12	456:45	2	( int fd , char * * addr , size_t * len )
LEAF_NODE	456:12	456:12	3	(
PARAMETER_DECL	456:13	456:17	3	int fd
TYPE	456:13	456:13	4	int
TYPE_NAME	456:13	456:13	5	int
LEAF_NODE	456:13	456:13	6	int
NAME	456:17	456:17	4	fd
LEAF_NODE	456:17	456:17	5	fd
LEAF_NODE	456:19	456:19	3	,
PARAMETER_DECL	456:21	456:28	3	char * * addr
TYPE	456:21	456:26	4	char * *
TYPE_NAME	456:21	456:21	5	char
LEAF_NODE	456:21	456:21	6	char
POINTER	456:26	456:27	5	* *
LEAF_NODE	456:26	456:26	6	*
LEAF_NODE	456:27	456:27	6	*
NAME	456:28	456:28	4	addr
LEAF_NODE	456:28	456:28	5	addr
LEAF_NODE	456:32	456:32	3	,
PARAMETER_DECL	456:34	456:42	3	size_t * len
TYPE	456:34	456:41	4	size_t *
TYPE_NAME	456:34	456:34	5	size_t
LEAF_NODE	456:34	456:34	6	size_t
POINTER	456:41	456:41	5	*
LEAF_NODE	456:41	456:41	6	*
NAME	456:42	456:42	4	len
LEAF_NODE	456:42	456:42	5	len
LEAF_NODE	456:45	456:45	3	)
LEAF_NODE	457:0	457:0	2	{
STATEMENTS	458:4	472:16	2	
SIMPLE_DECL	458:4	458:11	3	int ret ;
VAR_DECL	458:4	458:8	4	int ret
TYPE	458:4	458:4	5	int
TYPE_NAME	458:4	458:4	6	int
LEAF_NODE	458:4	458:4	7	int
NAME	458:8	458:8	5	ret
LEAF_NODE	458:8	458:8	6	ret
LEAF_NODE	458:11	458:11	4	;
SELECTION	460:4	461:4	3	
KEYWORD	460:4	460:4	4	if
LEAF_NODE	460:4	460:4	5	if
LEAF_NODE	460:7	460:7	4	(
CONDITION	460:8	460:8	4	fds [ fd ] == - 1
EXPR	460:8	460:19	5	fds [ fd ] == - 1
FIELD	460:8	460:14	6	fds [ fd ]
LEAF_NODE	460:8	460:8	7	fds
LEAF_NODE	460:11	460:11	7	[
EXPR	460:12	460:12	7	fd
FIELD	460:12	460:12	8	fd
LEAF_NODE	460:12	460:12	9	fd
LEAF_NODE	460:14	460:14	7	]
EQ_OPERATOR	460:16	460:16	6	==
LEAF_NODE	460:16	460:16	7	==
UNARY_EXPR	460:19	460:20	6	- 1
UNARY_OPERATOR	460:19	460:19	7	-
LEAF_NODE	460:19	460:19	8	-
FIELD	460:20	460:20	7	1
LEAF_NODE	460:20	460:20	8	1
LEAF_NODE	460:21	460:21	4	)
STATEMENTS	461:4	464:4	4	
LEAF_NODE	461:4	461:4	5	{
STATEMENTS	462:8	463:8	5	
EXPR_STATEMENT	462:8	462:16	6	ret = - 1 ;
EXPR	462:8	462:8	7	ret = - 1
ASSIGN	462:8	462:14	8	ret = - 1
LVAL	462:8	462:8	9	ret
FIELD	462:8	462:8	10	ret
LEAF_NODE	462:8	462:8	11	ret
ASSIGN_OP	462:12	462:12	9	=
LEAF_NODE	462:12	462:12	10	=
RVAL	462:14	462:14	9	- 1
UNARY_EXPR	462:14	462:15	10	- 1
UNARY_OPERATOR	462:14	462:14	11	-
LEAF_NODE	462:14	462:14	12	-
FIELD	462:15	462:15	11	1
LEAF_NODE	462:15	462:15	12	1
LEAF_NODE	462:16	462:16	7	;
EXPR_STATEMENT	463:8	463:21	6	errno = EBADF ;
EXPR	463:8	463:8	7	errno = EBADF
ASSIGN	463:8	463:16	8	errno = EBADF
LVAL	463:8	463:8	9	errno
FIELD	463:8	463:8	10	errno
LEAF_NODE	463:8	463:8	11	errno
ASSIGN_OP	463:14	463:14	9	=
LEAF_NODE	463:14	463:14	10	=
RVAL	463:16	463:16	9	EBADF
FIELD	463:16	463:16	10	EBADF
LEAF_NODE	463:16	463:16	11	EBADF
LEAF_NODE	463:21	463:21	7	;
LEAF_NODE	464:4	464:4	5	}
SELECTION	465:4	466:4	3	
KEYWORD	465:4	465:4	4	else
LEAF_NODE	465:4	465:4	5	else
STATEMENTS	466:4	470:4	4	
LEAF_NODE	466:4	466:4	5	{
STATEMENTS	467:8	469:8	5	
EXPR_STATEMENT	467:8	467:23	6	* addr = buf [ fd ] ;
EXPR	467:8	467:8	7	* addr = buf [ fd ]
ASSIGN	467:8	467:16	8	* addr = buf [ fd ]
LVAL	467:8	467:8	9	* addr
UNARY_EXPR	467:8	467:9	10	* addr
UNARY_OPERATOR	467:8	467:8	11	*
LEAF_NODE	467:8	467:8	12	*
FIELD	467:9	467:9	11	addr
LEAF_NODE	467:9	467:9	12	addr
ASSIGN_OP	467:14	467:14	9	=
LEAF_NODE	467:14	467:14	10	=
RVAL	467:16	467:16	9	buf [ fd ]
FIELD	467:16	467:22	10	buf [ fd ]
LEAF_NODE	467:16	467:16	11	buf
LEAF_NODE	467:19	467:19	11	[
EXPR	467:20	467:20	11	fd
FIELD	467:20	467:20	12	fd
LEAF_NODE	467:20	467:20	13	fd
LEAF_NODE	467:22	467:22	11	]
LEAF_NODE	467:23	467:23	7	;
EXPR_STATEMENT	468:8	468:27	6	* len = buf_size [ fd ] ;
EXPR	468:8	468:8	7	* len = buf_size [ fd ]
ASSIGN	468:8	468:15	8	* len = buf_size [ fd ]
LVAL	468:8	468:8	9	* len
UNARY_EXPR	468:8	468:9	10	* len
UNARY_OPERATOR	468:8	468:8	11	*
LEAF_NODE	468:8	468:8	12	*
FIELD	468:9	468:9	11	len
LEAF_NODE	468:9	468:9	12	len
ASSIGN_OP	468:13	468:13	9	=
LEAF_NODE	468:13	468:13	10	=
RVAL	468:15	468:15	9	buf_size [ fd ]
FIELD	468:15	468:26	10	buf_size [ fd ]
LEAF_NODE	468:15	468:15	11	buf_size
LEAF_NODE	468:23	468:23	11	[
EXPR	468:24	468:24	11	fd
FIELD	468:24	468:24	12	fd
LEAF_NODE	468:24	468:24	13	fd
LEAF_NODE	468:26	468:26	11	]
LEAF_NODE	468:27	468:27	7	;
EXPR_STATEMENT	469:8	469:15	6	ret = 0 ;
EXPR	469:8	469:8	7	ret = 0
ASSIGN	469:8	469:14	8	ret = 0
LVAL	469:8	469:8	9	ret
FIELD	469:8	469:8	10	ret
LEAF_NODE	469:8	469:8	11	ret
ASSIGN_OP	469:12	469:12	9	=
LEAF_NODE	469:12	469:12	10	=
RVAL	469:14	469:14	9	0
FIELD	469:14	469:14	10	0
LEAF_NODE	469:14	469:14	11	0
LEAF_NODE	469:15	469:15	7	;
LEAF_NODE	470:4	470:4	5	}
LEAF_NODE	472:4	472:4	3	return
LEAF_NODE	472:11	472:11	3	(
LEAF_NODE	472:12	472:12	3	ret
LEAF_NODE	472:15	472:15	3	)
LEAF_NODE	472:16	472:16	3	;
LEAF_NODE	473:0	473:0	2	}
FUNCTION_DEF	489:0	492:0	1	
RETURN_TYPE	489:0	489:0	2	int
TYPE_NAME	489:0	489:0	3	int
LEAF_NODE	489:0	489:0	4	int
FUNCTION_NAME	489:4	489:4	2	mfs_unmap
LEAF_NODE	489:4	489:4	3	mfs_unmap
PARAMETER_LIST	489:14	489:21	2	( int fd )
LEAF_NODE	489:14	489:14	3	(
PARAMETER_DECL	489:15	489:19	3	int fd
TYPE	489:15	489:15	4	int
TYPE_NAME	489:15	489:15	5	int
LEAF_NODE	489:15	489:15	6	int
NAME	489:19	489:19	4	fd
LEAF_NODE	489:19	489:19	5	fd
LEAF_NODE	489:21	489:21	3	)
LEAF_NODE	490:0	490:0	2	{
STATEMENTS	491:4	491:4	2	
JUMP_STATEMENT	491:4	491:14	3	return ( 0 ) ;
KEYWORD	491:4	491:4	4	return
LEAF_NODE	491:4	491:4	5	return
DESTINATION	491:11	491:11	4	( 0 )
EXPR	491:11	491:13	5	( 0 )
LEAF_NODE	491:11	491:11	6	(
FIELD	491:12	491:12	6	0
LEAF_NODE	491:12	491:12	7	0
LEAF_NODE	491:13	491:13	6	)
LEAF_NODE	491:14	491:14	4	;
LEAF_NODE	492:0	492:0	2	}
FUNCTION_DEF	507:0	523:0	1	
RETURN_TYPE	507:0	507:0	2	int
TYPE_NAME	507:0	507:0	3	int
LEAF_NODE	507:0	507:0	4	int
FUNCTION_NAME	507:4	507:4	2	mfs_close
LEAF_NODE	507:4	507:4	3	mfs_close
PARAMETER_LIST	507:14	507:21	2	( int fd )
LEAF_NODE	507:14	507:14	3	(
PARAMETER_DECL	507:15	507:19	3	int fd
TYPE	507:15	507:15	4	int
TYPE_NAME	507:15	507:15	5	int
LEAF_NODE	507:15	507:15	6	int
NAME	507:19	507:19	4	fd
LEAF_NODE	507:19	507:19	5	fd
LEAF_NODE	507:21	507:21	3	)
LEAF_NODE	508:0	508:0	2	{
STATEMENTS	509:4	522:16	2	
SIMPLE_DECL	509:4	509:11	3	int ret ;
VAR_DECL	509:4	509:8	4	int ret
TYPE	509:4	509:4	5	int
TYPE_NAME	509:4	509:4	6	int
LEAF_NODE	509:4	509:4	7	int
NAME	509:8	509:8	5	ret
LEAF_NODE	509:8	509:8	6	ret
LEAF_NODE	509:11	509:11	4	;
SELECTION	511:4	512:4	3	
KEYWORD	511:4	511:4	4	if
LEAF_NODE	511:4	511:4	5	if
LEAF_NODE	511:7	511:7	4	(
CONDITION	511:8	511:8	4	fds [ fd ] == - 1
EXPR	511:8	511:19	5	fds [ fd ] == - 1
FIELD	511:8	511:14	6	fds [ fd ]
LEAF_NODE	511:8	511:8	7	fds
LEAF_NODE	511:11	511:11	7	[
EXPR	511:12	511:12	7	fd
FIELD	511:12	511:12	8	fd
LEAF_NODE	511:12	511:12	9	fd
LEAF_NODE	511:14	511:14	7	]
EQ_OPERATOR	511:16	511:16	6	==
LEAF_NODE	511:16	511:16	7	==
UNARY_EXPR	511:19	511:20	6	- 1
UNARY_OPERATOR	511:19	511:19	7	-
LEAF_NODE	511:19	511:19	8	-
FIELD	511:20	511:20	7	1
LEAF_NODE	511:20	511:20	8	1
LEAF_NODE	511:21	511:21	4	)
STATEMENTS	512:4	515:4	4	
LEAF_NODE	512:4	512:4	5	{
STATEMENTS	513:8	514:8	5	
EXPR_STATEMENT	513:8	513:16	6	ret = - 1 ;
EXPR	513:8	513:8	7	ret = - 1
ASSIGN	513:8	513:14	8	ret = - 1
LVAL	513:8	513:8	9	ret
FIELD	513:8	513:8	10	ret
LEAF_NODE	513:8	513:8	11	ret
ASSIGN_OP	513:12	513:12	9	=
LEAF_NODE	513:12	513:12	10	=
RVAL	513:14	513:14	9	- 1
UNARY_EXPR	513:14	513:15	10	- 1
UNARY_OPERATOR	513:14	513:14	11	-
LEAF_NODE	513:14	513:14	12	-
FIELD	513:15	513:15	11	1
LEAF_NODE	513:15	513:15	12	1
LEAF_NODE	513:16	513:16	7	;
EXPR_STATEMENT	514:8	514:21	6	errno = EBADF ;
EXPR	514:8	514:8	7	errno = EBADF
ASSIGN	514:8	514:16	8	errno = EBADF
LVAL	514:8	514:8	9	errno
FIELD	514:8	514:8	10	errno
LEAF_NODE	514:8	514:8	11	errno
ASSIGN_OP	514:14	514:14	9	=
LEAF_NODE	514:14	514:14	10	=
RVAL	514:16	514:16	9	EBADF
FIELD	514:16	514:16	10	EBADF
LEAF_NODE	514:16	514:16	11	EBADF
LEAF_NODE	514:21	514:21	7	;
LEAF_NODE	515:4	515:4	5	}
SELECTION	516:4	517:4	3	
KEYWORD	516:4	516:4	4	else
LEAF_NODE	516:4	516:4	5	else
STATEMENTS	517:4	520:4	4	
LEAF_NODE	517:4	517:4	5	{
STATEMENTS	518:8	519:8	5	
EXPR_STATEMENT	518:8	518:20	6	fds [ fd ] = - 1 ;
EXPR	518:8	518:8	7	fds [ fd ] = - 1
ASSIGN	518:8	518:18	8	fds [ fd ] = - 1
LVAL	518:8	518:8	9	fds [ fd ]
FIELD	518:8	518:14	10	fds [ fd ]
LEAF_NODE	518:8	518:8	11	fds
LEAF_NODE	518:11	518:11	11	[
EXPR	518:12	518:12	11	fd
FIELD	518:12	518:12	12	fd
LEAF_NODE	518:12	518:12	13	fd
LEAF_NODE	518:14	518:14	11	]
ASSIGN_OP	518:16	518:16	9	=
LEAF_NODE	518:16	518:16	10	=
RVAL	518:18	518:18	9	- 1
UNARY_EXPR	518:18	518:19	10	- 1
UNARY_OPERATOR	518:18	518:18	11	-
LEAF_NODE	518:18	518:18	12	-
FIELD	518:19	518:19	11	1
LEAF_NODE	518:19	518:19	12	1
LEAF_NODE	518:20	518:20	7	;
EXPR_STATEMENT	519:8	519:15	6	ret = 0 ;
EXPR	519:8	519:8	7	ret = 0
ASSIGN	519:8	519:14	8	ret = 0
LVAL	519:8	519:8	9	ret
FIELD	519:8	519:8	10	ret
LEAF_NODE	519:8	519:8	11	ret
ASSIGN_OP	519:12	519:12	9	=
LEAF_NODE	519:12	519:12	10	=
RVAL	519:14	519:14	9	0
FIELD	519:14	519:14	10	0
LEAF_NODE	519:14	519:14	11	0
LEAF_NODE	519:15	519:15	7	;
LEAF_NODE	520:4	520:4	5	}
LEAF_NODE	522:4	522:4	3	return
LEAF_NODE	522:11	522:11	3	(
LEAF_NODE	522:12	522:12	3	ret
LEAF_NODE	522:15	522:15	3	)
LEAF_NODE	522:16	522:16	3	;
LEAF_NODE	523:0	523:0	2	}
FUNCTION_DEF	538:0	552:0	1	
RETURN_TYPE	538:0	538:7	2	static int
LEAF_NODE	538:0	538:0	3	static
TYPE_NAME	538:7	538:7	3	int
LEAF_NODE	538:7	538:7	4	int
FUNCTION_NAME	538:11	538:11	2	extend_mem_file
LEAF_NODE	538:11	538:11	3	extend_mem_file
PARAMETER_LIST	538:27	538:44	2	( int fd , int size )
LEAF_NODE	538:27	538:27	3	(
PARAMETER_DECL	538:28	538:32	3	int fd
TYPE	538:28	538:28	4	int
TYPE_NAME	538:28	538:28	5	int
LEAF_NODE	538:28	538:28	6	int
NAME	538:32	538:32	4	fd
LEAF_NODE	538:32	538:32	5	fd
LEAF_NODE	538:34	538:34	3	,
PARAMETER_DECL	538:36	538:40	3	int size
TYPE	538:36	538:36	4	int
TYPE_NAME	538:36	538:36	5	int
LEAF_NODE	538:36	538:36	6	int
NAME	538:40	538:40	4	size
LEAF_NODE	538:40	538:40	5	size
LEAF_NODE	538:44	538:44	3	)
LEAF_NODE	539:0	539:0	2	{
STATEMENTS	540:4	551:16	2	
SIMPLE_DECL	540:4	540:17	3	void * new_mem ;
VAR_DECL	540:4	540:10	4	void * new_mem
TYPE	540:4	540:9	5	void *
TYPE_NAME	540:4	540:4	6	void
LEAF_NODE	540:4	540:4	7	void
POINTER	540:9	540:9	6	*
LEAF_NODE	540:9	540:9	7	*
NAME	540:10	540:10	5	new_mem
LEAF_NODE	540:10	540:10	6	new_mem
LEAF_NODE	540:17	540:17	4	;
SIMPLE_DECL	541:4	541:11	3	int ret ;
VAR_DECL	541:4	541:8	4	int ret
TYPE	541:4	541:4	5	int
TYPE_NAME	541:4	541:4	6	int
LEAF_NODE	541:4	541:4	7	int
NAME	541:8	541:8	5	ret
LEAF_NODE	541:8	541:8	6	ret
LEAF_NODE	541:11	541:11	4	;
SELECTION	543:4	544:8	3	
KEYWORD	543:4	543:4	4	if
LEAF_NODE	543:4	543:4	5	if
LEAF_NODE	543:7	543:7	4	(
CONDITION	543:8	543:8	4	( new_mem = realloc ( buf [ fd ] , size ) ) == ( void * ) NULL
EXPR	543:8	543:56	5	( new_mem = realloc ( buf [ fd ] , size ) ) == ( void * ) NULL
LEAF_NODE	543:8	543:8	6	(
ASSIGN	543:9	543:19	6	new_mem = realloc ( buf [ fd ] , size )
LVAL	543:9	543:9	7	new_mem
FIELD	543:9	543:9	8	new_mem
LEAF_NODE	543:9	543:9	9	new_mem
ASSIGN_OP	543:17	543:17	7	=
LEAF_NODE	543:17	543:17	8	=
RVAL	543:19	543:19	7	realloc ( buf [ fd ] , size )
FUNCTION_CALL	543:19	543:41	8	realloc ( buf [ fd ] , size )
CALLEE	543:19	543:19	9	realloc
LEAF_NODE	543:19	543:19	10	realloc
LEAF_NODE	543:27	543:27	9	(
ARGUMENT	543:28	543:28	9	buf [ fd ]
FIELD	543:28	543:34	10	buf [ fd ]
LEAF_NODE	543:28	543:28	11	buf
LEAF_NODE	543:31	543:31	11	[
EXPR	543:32	543:32	11	fd
FIELD	543:32	543:32	12	fd
LEAF_NODE	543:32	543:32	13	fd
LEAF_NODE	543:34	543:34	11	]
LEAF_NODE	543:35	543:35	9	,
ARGUMENT	543:37	543:37	9	size
FIELD	543:37	543:37	10	size
LEAF_NODE	543:37	543:37	11	size
LEAF_NODE	543:41	543:41	9	)
LEAF_NODE	543:42	543:42	6	)
EQ_OPERATOR	543:44	543:44	6	==
LEAF_NODE	543:44	543:44	7	==
LEAF_NODE	543:47	543:47	6	(
TYPE_NAME	543:48	543:48	6	void
LEAF_NODE	543:48	543:48	7	void
LEAF_NODE	543:53	543:53	6	*
LEAF_NODE	543:54	543:54	6	)
FIELD	543:56	543:56	6	NULL
LEAF_NODE	543:56	543:56	7	NULL
LEAF_NODE	543:60	543:60	4	)
STATEMENTS	544:8	544:8	4	
EXPR_STATEMENT	544:8	544:16	5	ret = - 1 ;
EXPR	544:8	544:8	6	ret = - 1
ASSIGN	544:8	544:14	7	ret = - 1
LVAL	544:8	544:8	8	ret
FIELD	544:8	544:8	9	ret
LEAF_NODE	544:8	544:8	10	ret
ASSIGN_OP	544:12	544:12	8	=
LEAF_NODE	544:12	544:12	9	=
RVAL	544:14	544:14	8	- 1
UNARY_EXPR	544:14	544:15	9	- 1
UNARY_OPERATOR	544:14	544:14	10	-
LEAF_NODE	544:14	544:14	11	-
FIELD	544:15	544:15	10	1
LEAF_NODE	544:15	544:15	11	1
LEAF_NODE	544:16	544:16	6	;
SELECTION	545:4	546:4	3	
KEYWORD	545:4	545:4	4	else
LEAF_NODE	545:4	545:4	5	else
STATEMENTS	546:4	549:4	4	
LEAF_NODE	546:4	546:4	5	{
STATEMENTS	547:8	548:8	5	
EXPR_STATEMENT	547:8	547:34	6	buf [ fd ] = ( char * ) new_mem ;
EXPR	547:8	547:8	7	buf [ fd ] = ( char * ) new_mem
ASSIGN	547:8	547:18	8	buf [ fd ] = ( char * ) new_mem
LVAL	547:8	547:8	9	buf [ fd ]
FIELD	547:8	547:14	10	buf [ fd ]
LEAF_NODE	547:8	547:8	11	buf
LEAF_NODE	547:11	547:11	11	[
EXPR	547:12	547:12	11	fd
FIELD	547:12	547:12	12	fd
LEAF_NODE	547:12	547:12	13	fd
LEAF_NODE	547:14	547:14	11	]
ASSIGN_OP	547:16	547:16	9	=
LEAF_NODE	547:16	547:16	10	=
RVAL	547:18	547:27	9	( char * ) new_mem
LEAF_NODE	547:18	547:18	10	(
TYPE_NAME	547:19	547:19	10	char
LEAF_NODE	547:19	547:19	11	char
LEAF_NODE	547:24	547:24	10	*
LEAF_NODE	547:25	547:25	10	)
FIELD	547:27	547:27	10	new_mem
LEAF_NODE	547:27	547:27	11	new_mem
LEAF_NODE	547:34	547:34	7	;
EXPR_STATEMENT	548:8	548:15	6	ret = 0 ;
EXPR	548:8	548:8	7	ret = 0
ASSIGN	548:8	548:14	8	ret = 0
LVAL	548:8	548:8	9	ret
FIELD	548:8	548:8	10	ret
LEAF_NODE	548:8	548:8	11	ret
ASSIGN_OP	548:12	548:12	9	=
LEAF_NODE	548:12	548:12	10	=
RVAL	548:14	548:14	9	0
FIELD	548:14	548:14	10	0
LEAF_NODE	548:14	548:14	11	0
LEAF_NODE	548:15	548:15	7	;
LEAF_NODE	549:4	549:4	5	}
LEAF_NODE	551:4	551:4	3	return
LEAF_NODE	551:11	551:11	3	(
LEAF_NODE	551:12	551:12	3	ret
LEAF_NODE	551:15	551:15	3	)
LEAF_NODE	551:16	551:16	3	;
LEAF_NODE	552:0	552:0	2	}
FUNCTION_DEF	567:0	578:0	1	
RETURN_TYPE	567:0	567:7	2	static void
LEAF_NODE	567:0	567:0	3	static
TYPE_NAME	567:7	567:7	3	void
LEAF_NODE	567:7	567:7	4	void
FUNCTION_NAME	567:12	567:12	2	mem_init
LEAF_NODE	567:12	567:12	3	mem_init
PARAMETER_LIST	567:21	567:22	2	( )
LEAF_NODE	567:21	567:21	3	(
LEAF_NODE	567:22	567:22	3	)
LEAF_NODE	568:0	568:0	2	{
STATEMENTS	569:4	571:4	2	
SIMPLE_DECL	569:4	569:9	3	int i ;
VAR_DECL	569:4	569:8	4	int i
TYPE	569:4	569:4	5	int
TYPE_NAME	569:4	569:4	6	int
LEAF_NODE	569:4	569:4	7	int
NAME	569:8	569:8	5	i
LEAF_NODE	569:8	569:8	6	i
LEAF_NODE	569:9	569:9	4	;
ITERATION	571:4	572:4	3	
KEYWORD	571:4	571:4	4	for
LEAF_NODE	571:4	571:4	5	for
LEAF_NODE	571:8	571:8	4	(
FOR_INIT	571:9	571:14	4	i = 0 ;
EXPR	571:9	571:9	5	i = 0
ASSIGN	571:9	571:13	6	i = 0
LVAL	571:9	571:9	7	i
FIELD	571:9	571:9	8	i
LEAF_NODE	571:9	571:9	9	i
ASSIGN_OP	571:11	571:11	7	=
LEAF_NODE	571:11	571:11	8	=
RVAL	571:13	571:13	7	0
FIELD	571:13	571:13	8	0
LEAF_NODE	571:13	571:13	9	0
LEAF_NODE	571:14	571:14	5	;
CONDITION	571:16	571:16	4	i < MAX_BUFFS
EXPR	571:16	571:20	5	i < MAX_BUFFS
FIELD	571:16	571:16	6	i
LEAF_NODE	571:16	571:16	7	i
REL_OPERATOR	571:18	571:18	6	<
LEAF_NODE	571:18	571:18	7	<
FIELD	571:20	571:20	6	MAX_BUFFS
LEAF_NODE	571:20	571:20	7	MAX_BUFFS
LEAF_NODE	571:29	571:29	4	;
FOR_EXPR	571:31	571:31	4	i ++
EXPR	571:31	571:31	5	i ++
FIELD	571:31	571:32	6	i ++
LEAF_NODE	571:31	571:31	7	i
LEAF_NODE	571:32	571:32	7	++
LEAF_NODE	571:34	571:34	4	)
STATEMENTS	572:4	577:4	4	
LEAF_NODE	572:4	572:4	5	{
STATEMENTS	573:8	576:8	5	
EXPR_STATEMENT	573:8	573:19	6	fds [ i ] = - 1 ;
EXPR	573:8	573:8	7	fds [ i ] = - 1
ASSIGN	573:8	573:17	8	fds [ i ] = - 1
LVAL	573:8	573:8	9	fds [ i ]
FIELD	573:8	573:13	10	fds [ i ]
LEAF_NODE	573:8	573:8	11	fds
LEAF_NODE	573:11	573:11	11	[
EXPR	573:12	573:12	11	i
FIELD	573:12	573:12	12	i
LEAF_NODE	573:12	573:12	13	i
LEAF_NODE	573:13	573:13	11	]
ASSIGN_OP	573:15	573:15	9	=
LEAF_NODE	573:15	573:15	10	=
RVAL	573:17	573:17	9	- 1
UNARY_EXPR	573:17	573:18	10	- 1
UNARY_OPERATOR	573:17	573:17	11	-
LEAF_NODE	573:17	573:17	12	-
FIELD	573:18	573:18	11	1
LEAF_NODE	573:18	573:18	12	1
LEAF_NODE	573:19	573:19	7	;
EXPR_STATEMENT	574:8	574:29	6	buf [ i ] = ( char * ) NULL ;
EXPR	574:8	574:8	7	buf [ i ] = ( char * ) NULL
ASSIGN	574:8	574:17	8	buf [ i ] = ( char * ) NULL
LVAL	574:8	574:8	9	buf [ i ]
FIELD	574:8	574:13	10	buf [ i ]
LEAF_NODE	574:8	574:8	11	buf
LEAF_NODE	574:11	574:11	11	[
EXPR	574:12	574:12	11	i
FIELD	574:12	574:12	12	i
LEAF_NODE	574:12	574:12	13	i
LEAF_NODE	574:13	574:13	11	]
ASSIGN_OP	574:15	574:15	9	=
LEAF_NODE	574:15	574:15	10	=
RVAL	574:17	574:25	9	( char * ) NULL
LEAF_NODE	574:17	574:17	10	(
TYPE_NAME	574:18	574:18	10	char
LEAF_NODE	574:18	574:18	11	char
LEAF_NODE	574:23	574:23	10	*
LEAF_NODE	574:24	574:24	10	)
FIELD	574:25	574:25	10	NULL
LEAF_NODE	574:25	574:25	11	NULL
LEAF_NODE	574:29	574:29	7	;
EXPR_STATEMENT	575:8	575:23	6	buf_size [ i ] = 0 ;
EXPR	575:8	575:8	7	buf_size [ i ] = 0
ASSIGN	575:8	575:22	8	buf_size [ i ] = 0
LVAL	575:8	575:8	9	buf_size [ i ]
FIELD	575:8	575:18	10	buf_size [ i ]
LEAF_NODE	575:8	575:8	11	buf_size
LEAF_NODE	575:16	575:16	11	[
EXPR	575:17	575:17	11	i
FIELD	575:17	575:17	12	i
LEAF_NODE	575:17	575:17	13	i
LEAF_NODE	575:18	575:18	11	]
ASSIGN_OP	575:20	575:20	9	=
LEAF_NODE	575:20	575:20	10	=
RVAL	575:22	575:22	9	0
FIELD	575:22	575:22	10	0
LEAF_NODE	575:22	575:22	11	0
LEAF_NODE	575:23	575:23	7	;
EXPR_STATEMENT	576:8	576:22	6	buf_off [ i ] = 0 ;
EXPR	576:8	576:8	7	buf_off [ i ] = 0
ASSIGN	576:8	576:21	8	buf_off [ i ] = 0
LVAL	576:8	576:8	9	buf_off [ i ]
FIELD	576:8	576:17	10	buf_off [ i ]
LEAF_NODE	576:8	576:8	11	buf_off
LEAF_NODE	576:15	576:15	11	[
EXPR	576:16	576:16	11	i
FIELD	576:16	576:16	12	i
LEAF_NODE	576:16	576:16	13	i
LEAF_NODE	576:17	576:17	11	]
ASSIGN_OP	576:19	576:19	9	=
LEAF_NODE	576:19	576:19	10	=
RVAL	576:21	576:21	9	0
FIELD	576:21	576:21	10	0
LEAF_NODE	576:21	576:21	11	0
LEAF_NODE	576:22	576:22	7	;
LEAF_NODE	577:4	577:4	5	}
LEAF_NODE	578:0	578:0	2	}
