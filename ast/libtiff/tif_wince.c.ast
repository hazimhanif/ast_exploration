SOURCE_FILE	46:0	278:0	0	
FUNCTION_DEF	46:0	119:0	1	
RETURN_TYPE	46:0	46:4	2	TIFF *
TYPE_NAME	46:0	46:0	3	TIFF
LEAF_NODE	46:0	46:0	4	TIFF
LEAF_NODE	46:4	46:4	3	*
FUNCTION_NAME	47:0	47:0	2	TIFFOpen
LEAF_NODE	47:0	47:0	3	TIFFOpen
PARAMETER_LIST	47:8	47:43	2	( const char * name , const char * mode )
LEAF_NODE	47:8	47:8	3	(
PARAMETER_DECL	47:9	47:21	3	const char * name
TYPE	47:9	47:19	4	const char *
TYPE_NAME	47:9	47:15	5	const char
LEAF_NODE	47:9	47:9	6	const
LEAF_NODE	47:15	47:15	6	char
POINTER	47:19	47:19	5	*
LEAF_NODE	47:19	47:19	6	*
NAME	47:21	47:21	4	name
LEAF_NODE	47:21	47:21	5	name
LEAF_NODE	47:25	47:25	3	,
PARAMETER_DECL	47:27	47:39	3	const char * mode
TYPE	47:27	47:37	4	const char *
TYPE_NAME	47:27	47:33	5	const char
LEAF_NODE	47:27	47:27	6	const
LEAF_NODE	47:33	47:33	6	char
POINTER	47:37	47:37	5	*
LEAF_NODE	47:37	47:37	6	*
NAME	47:39	47:39	4	mode
LEAF_NODE	47:39	47:39	5	mode
LEAF_NODE	47:43	47:43	3	)
LEAF_NODE	48:0	48:0	2	{
STATEMENTS	49:1	118:1	2	
LEAF_NODE	49:1	49:1	3	static
SIMPLE_DECL	49:8	49:40	3	const char [ ] module ; module = "TIFFOpen" ;
VAR_DECL	49:8	49:19	4	const char [ ] module ; module = "TIFFOpen"
TYPE	49:8	49:25	5	const char [ ]
TYPE_NAME	49:8	49:14	6	const char
LEAF_NODE	49:8	49:8	7	const
LEAF_NODE	49:14	49:14	7	char
TYPE_SUFFIX	49:25	49:26	6	[ ]
LEAF_NODE	49:25	49:25	7	[
LEAF_NODE	49:26	49:26	7	]
NAME	49:19	49:19	5	module
LEAF_NODE	49:19	49:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	49:19	49:19	5	module = "TIFFOpen"
ASSIGN	49:19	49:30	6	module = "TIFFOpen"
LVAL	49:19	49:19	7	module
NAME	49:19	49:19	8	module
LEAF_NODE	49:19	49:19	9	module
ASSIGN_OP	49:28	49:28	7	=
LEAF_NODE	49:28	49:28	8	=
RVAL	49:30	49:30	7	"TIFFOpen"
FIELD	49:30	49:30	8	"TIFFOpen"
LEAF_NODE	49:30	49:30	9	"TIFFOpen"
LEAF_NODE	49:40	49:40	4	;
SIMPLE_DECL	50:1	50:13	3	thandle_t fd ;
VAR_DECL	50:1	50:11	4	thandle_t fd
TYPE	50:1	50:1	5	thandle_t
TYPE_NAME	50:1	50:1	6	thandle_t
LEAF_NODE	50:1	50:1	7	thandle_t
NAME	50:11	50:11	5	fd
LEAF_NODE	50:11	50:11	6	fd
LEAF_NODE	50:13	50:13	4	;
SIMPLE_DECL	51:1	51:6	3	int m ;
VAR_DECL	51:1	51:5	4	int m
TYPE	51:1	51:1	5	int
TYPE_NAME	51:1	51:1	6	int
LEAF_NODE	51:1	51:1	7	int
NAME	51:5	51:5	5	m
LEAF_NODE	51:5	51:5	6	m
LEAF_NODE	51:6	51:6	4	;
SIMPLE_DECL	52:1	52:13	3	DWORD dwMode ;
VAR_DECL	52:1	52:7	4	DWORD dwMode
TYPE	52:1	52:1	5	DWORD
TYPE_NAME	52:1	52:1	6	DWORD
LEAF_NODE	52:1	52:1	7	DWORD
NAME	52:7	52:7	5	dwMode
LEAF_NODE	52:7	52:7	6	dwMode
LEAF_NODE	52:13	52:13	4	;
SIMPLE_DECL	53:1	53:10	3	TIFF * tif ;
VAR_DECL	53:1	53:7	4	TIFF * tif
TYPE	53:1	53:5	5	TIFF *
TYPE_NAME	53:1	53:1	6	TIFF
LEAF_NODE	53:1	53:1	7	TIFF
POINTER	53:5	53:5	6	*
LEAF_NODE	53:5	53:5	7	*
NAME	53:7	53:7	5	tif
LEAF_NODE	53:7	53:7	6	tif
LEAF_NODE	53:10	53:10	4	;
SIMPLE_DECL	54:4	54:15	3	size_t nLen ;
VAR_DECL	54:4	54:11	4	size_t nLen
TYPE	54:4	54:4	5	size_t
TYPE_NAME	54:4	54:4	6	size_t
LEAF_NODE	54:4	54:4	7	size_t
NAME	54:11	54:11	5	nLen
LEAF_NODE	54:11	54:11	6	nLen
LEAF_NODE	54:15	54:15	4	;
SIMPLE_DECL	55:4	55:19	3	size_t nWideLen ;
VAR_DECL	55:4	55:11	4	size_t nWideLen
TYPE	55:4	55:4	5	size_t
TYPE_NAME	55:4	55:4	6	size_t
LEAF_NODE	55:4	55:4	7	size_t
NAME	55:11	55:11	5	nWideLen
LEAF_NODE	55:11	55:11	6	nWideLen
LEAF_NODE	55:19	55:19	4	;
SIMPLE_DECL	56:4	56:20	3	wchar_t * wchName ;
VAR_DECL	56:4	56:13	4	wchar_t * wchName
TYPE	56:4	56:11	5	wchar_t *
TYPE_NAME	56:4	56:4	6	wchar_t
LEAF_NODE	56:4	56:4	7	wchar_t
POINTER	56:11	56:11	6	*
LEAF_NODE	56:11	56:11	7	*
NAME	56:13	56:13	5	wchName
LEAF_NODE	56:13	56:13	6	wchName
LEAF_NODE	56:20	56:20	4	;
EXPR_STATEMENT	58:1	58:31	3	m = _TIFFgetMode ( mode , module ) ;
EXPR	58:1	58:1	4	m = _TIFFgetMode ( mode , module )
ASSIGN	58:1	58:5	5	m = _TIFFgetMode ( mode , module )
LVAL	58:1	58:1	6	m
FIELD	58:1	58:1	7	m
LEAF_NODE	58:1	58:1	8	m
ASSIGN_OP	58:3	58:3	6	=
LEAF_NODE	58:3	58:3	7	=
RVAL	58:5	58:5	6	_TIFFgetMode ( mode , module )
FUNCTION_CALL	58:5	58:30	7	_TIFFgetMode ( mode , module )
CALLEE	58:5	58:5	8	_TIFFgetMode
LEAF_NODE	58:5	58:5	9	_TIFFgetMode
LEAF_NODE	58:17	58:17	8	(
ARGUMENT	58:18	58:18	8	mode
FIELD	58:18	58:18	9	mode
LEAF_NODE	58:18	58:18	10	mode
LEAF_NODE	58:22	58:22	8	,
ARGUMENT	58:24	58:24	8	module
FIELD	58:24	58:24	9	module
LEAF_NODE	58:24	58:24	10	module
LEAF_NODE	58:30	58:30	8	)
LEAF_NODE	58:31	58:31	4	;
SELECTION	60:1	61:1	3	
KEYWORD	60:1	60:1	4	switch
LEAF_NODE	60:1	60:1	5	switch
LEAF_NODE	60:7	60:7	4	(
CONDITION	60:8	60:8	4	m
EXPR	60:8	60:8	5	m
FIELD	60:8	60:8	6	m
LEAF_NODE	60:8	60:8	7	m
LEAF_NODE	60:9	60:9	4	)
STATEMENTS	61:1	79:1	4	
LEAF_NODE	61:1	61:1	5	{
STATEMENTS	62:1	78:2	5	
LABEL	62:1	62:14	6	case O_RDONLY :
LEAF_NODE	62:1	62:1	7	case
LEAF_NODE	62:6	62:6	7	O_RDONLY
LEAF_NODE	62:14	62:14	7	:
EXPR_STATEMENT	63:2	63:24	6	dwMode = OPEN_EXISTING ;
EXPR	63:2	63:2	7	dwMode = OPEN_EXISTING
ASSIGN	63:2	63:11	8	dwMode = OPEN_EXISTING
LVAL	63:2	63:2	9	dwMode
FIELD	63:2	63:2	10	dwMode
LEAF_NODE	63:2	63:2	11	dwMode
ASSIGN_OP	63:9	63:9	9	=
LEAF_NODE	63:9	63:9	10	=
RVAL	63:11	63:11	9	OPEN_EXISTING
FIELD	63:11	63:11	10	OPEN_EXISTING
LEAF_NODE	63:11	63:11	11	OPEN_EXISTING
LEAF_NODE	63:24	63:24	7	;
JUMP_STATEMENT	64:2	64:7	6	break DESTINATION ;
KEYWORD	64:2	64:2	7	break
LEAF_NODE	64:2	64:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	64:7	64:7	7	;
LABEL	65:1	65:12	6	case O_RDWR :
LEAF_NODE	65:1	65:1	7	case
LEAF_NODE	65:6	65:6	7	O_RDWR
LEAF_NODE	65:12	65:12	7	:
EXPR_STATEMENT	66:2	66:22	6	dwMode = OPEN_ALWAYS ;
EXPR	66:2	66:2	7	dwMode = OPEN_ALWAYS
ASSIGN	66:2	66:11	8	dwMode = OPEN_ALWAYS
LVAL	66:2	66:2	9	dwMode
FIELD	66:2	66:2	10	dwMode
LEAF_NODE	66:2	66:2	11	dwMode
ASSIGN_OP	66:9	66:9	9	=
LEAF_NODE	66:9	66:9	10	=
RVAL	66:11	66:11	9	OPEN_ALWAYS
FIELD	66:11	66:11	10	OPEN_ALWAYS
LEAF_NODE	66:11	66:11	11	OPEN_ALWAYS
LEAF_NODE	66:22	66:22	7	;
JUMP_STATEMENT	67:2	67:7	6	break DESTINATION ;
KEYWORD	67:2	67:2	7	break
LEAF_NODE	67:2	67:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	67:7	67:7	7	;
LEAF_NODE	68:1	68:1	6	case
LEAF_NODE	68:6	68:6	6	O_RDWR
LEAF_NODE	68:12	68:12	6	|
LABEL	68:13	68:20	6	O_CREAT :
LEAF_NODE	68:13	68:13	7	O_CREAT
LEAF_NODE	68:20	68:20	7	:
EXPR_STATEMENT	69:2	69:22	6	dwMode = OPEN_ALWAYS ;
EXPR	69:2	69:2	7	dwMode = OPEN_ALWAYS
ASSIGN	69:2	69:11	8	dwMode = OPEN_ALWAYS
LVAL	69:2	69:2	9	dwMode
FIELD	69:2	69:2	10	dwMode
LEAF_NODE	69:2	69:2	11	dwMode
ASSIGN_OP	69:9	69:9	9	=
LEAF_NODE	69:9	69:9	10	=
RVAL	69:11	69:11	9	OPEN_ALWAYS
FIELD	69:11	69:11	10	OPEN_ALWAYS
LEAF_NODE	69:11	69:11	11	OPEN_ALWAYS
LEAF_NODE	69:22	69:22	7	;
JUMP_STATEMENT	70:2	70:7	6	break DESTINATION ;
KEYWORD	70:2	70:2	7	break
LEAF_NODE	70:2	70:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	70:7	70:7	7	;
LEAF_NODE	71:1	71:1	6	case
LEAF_NODE	71:6	71:6	6	O_RDWR
LEAF_NODE	71:12	71:12	6	|
LABEL	71:13	71:20	6	O_TRUNC :
LEAF_NODE	71:13	71:13	7	O_TRUNC
LEAF_NODE	71:20	71:20	7	:
EXPR_STATEMENT	72:2	72:24	6	dwMode = CREATE_ALWAYS ;
EXPR	72:2	72:2	7	dwMode = CREATE_ALWAYS
ASSIGN	72:2	72:11	8	dwMode = CREATE_ALWAYS
LVAL	72:2	72:2	9	dwMode
FIELD	72:2	72:2	10	dwMode
LEAF_NODE	72:2	72:2	11	dwMode
ASSIGN_OP	72:9	72:9	9	=
LEAF_NODE	72:9	72:9	10	=
RVAL	72:11	72:11	9	CREATE_ALWAYS
FIELD	72:11	72:11	10	CREATE_ALWAYS
LEAF_NODE	72:11	72:11	11	CREATE_ALWAYS
LEAF_NODE	72:24	72:24	7	;
JUMP_STATEMENT	73:2	73:7	6	break DESTINATION ;
KEYWORD	73:2	73:2	7	break
LEAF_NODE	73:2	73:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	73:7	73:7	7	;
LEAF_NODE	74:1	74:1	6	case
LEAF_NODE	74:6	74:6	6	O_RDWR
LEAF_NODE	74:12	74:12	6	|
LEAF_NODE	74:13	74:13	6	O_CREAT
LEAF_NODE	74:20	74:20	6	|
LABEL	74:21	74:28	6	O_TRUNC :
LEAF_NODE	74:21	74:21	7	O_TRUNC
LEAF_NODE	74:28	74:28	7	:
EXPR_STATEMENT	75:2	75:24	6	dwMode = CREATE_ALWAYS ;
EXPR	75:2	75:2	7	dwMode = CREATE_ALWAYS
ASSIGN	75:2	75:11	8	dwMode = CREATE_ALWAYS
LVAL	75:2	75:2	9	dwMode
FIELD	75:2	75:2	10	dwMode
LEAF_NODE	75:2	75:2	11	dwMode
ASSIGN_OP	75:9	75:9	9	=
LEAF_NODE	75:9	75:9	10	=
RVAL	75:11	75:11	9	CREATE_ALWAYS
FIELD	75:11	75:11	10	CREATE_ALWAYS
LEAF_NODE	75:11	75:11	11	CREATE_ALWAYS
LEAF_NODE	75:24	75:24	7	;
JUMP_STATEMENT	76:2	76:7	6	break DESTINATION ;
KEYWORD	76:2	76:2	7	break
LEAF_NODE	76:2	76:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	76:7	76:7	7	;
LABEL	77:1	77:8	6	default :
LEAF_NODE	77:1	77:1	7	default
LEAF_NODE	77:8	77:8	7	:
JUMP_STATEMENT	78:2	78:19	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	78:2	78:2	7	return
LEAF_NODE	78:2	78:2	8	return
DESTINATION	78:9	78:9	7	( ( TIFF * ) 0 )
EXPR	78:9	78:18	8	( ( TIFF * ) 0 )
LEAF_NODE	78:9	78:9	9	(
LEAF_NODE	78:10	78:10	9	(
TYPE_NAME	78:11	78:11	9	TIFF
LEAF_NODE	78:11	78:11	10	TIFF
LEAF_NODE	78:15	78:15	9	*
LEAF_NODE	78:16	78:16	9	)
FIELD	78:17	78:17	9	0
LEAF_NODE	78:17	78:17	10	0
LEAF_NODE	78:18	78:18	9	)
LEAF_NODE	78:19	78:19	7	;
LEAF_NODE	79:1	79:1	5	}
EXPR_STATEMENT	86:4	86:16	3	nWideLen = 0 ;
EXPR	86:4	86:4	4	nWideLen = 0
ASSIGN	86:4	86:15	5	nWideLen = 0
LVAL	86:4	86:4	6	nWideLen
FIELD	86:4	86:4	7	nWideLen
LEAF_NODE	86:4	86:4	8	nWideLen
ASSIGN_OP	86:13	86:13	6	=
LEAF_NODE	86:13	86:13	7	=
RVAL	86:15	86:15	6	0
FIELD	86:15	86:15	7	0
LEAF_NODE	86:15	86:15	8	0
LEAF_NODE	86:16	86:16	4	;
EXPR_STATEMENT	87:4	87:18	3	wchName = NULL ;
EXPR	87:4	87:4	4	wchName = NULL
ASSIGN	87:4	87:14	5	wchName = NULL
LVAL	87:4	87:4	6	wchName
FIELD	87:4	87:4	7	wchName
LEAF_NODE	87:4	87:4	8	wchName
ASSIGN_OP	87:12	87:12	6	=
LEAF_NODE	87:12	87:12	7	=
RVAL	87:14	87:14	6	NULL
FIELD	87:14	87:14	7	NULL
LEAF_NODE	87:14	87:14	8	NULL
LEAF_NODE	87:18	87:18	4	;
EXPR_STATEMENT	88:4	88:27	3	nLen = strlen ( name ) + 1 ;
EXPR	88:4	88:4	4	nLen = strlen ( name ) + 1
ASSIGN	88:4	88:11	5	nLen = strlen ( name ) + 1
LVAL	88:4	88:4	6	nLen
FIELD	88:4	88:4	7	nLen
LEAF_NODE	88:4	88:4	8	nLen
ASSIGN_OP	88:9	88:9	6	=
LEAF_NODE	88:9	88:9	7	=
RVAL	88:11	88:26	6	strlen ( name ) + 1
FUNCTION_CALL	88:11	88:22	7	strlen ( name )
CALLEE	88:11	88:11	8	strlen
LEAF_NODE	88:11	88:11	9	strlen
LEAF_NODE	88:17	88:17	8	(
ARGUMENT	88:18	88:18	8	name
FIELD	88:18	88:18	9	name
LEAF_NODE	88:18	88:18	10	name
LEAF_NODE	88:22	88:22	8	)
LEAF_NODE	88:24	88:24	7	+
FIELD	88:26	88:26	7	1
LEAF_NODE	88:26	88:26	8	1
LEAF_NODE	88:27	88:27	4	;
EXPR_STATEMENT	90:4	90:66	3	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , name , nLen , NULL , 0 ) ;
EXPR	90:4	90:4	4	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , name , nLen , NULL , 0 )
ASSIGN	90:4	90:15	5	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , name , nLen , NULL , 0 )
LVAL	90:4	90:4	6	nWideLen
FIELD	90:4	90:4	7	nWideLen
LEAF_NODE	90:4	90:4	8	nWideLen
ASSIGN_OP	90:13	90:13	6	=
LEAF_NODE	90:13	90:13	7	=
RVAL	90:15	90:15	6	MultiByteToWideChar ( CP_ACP , 0 , name , nLen , NULL , 0 )
FUNCTION_CALL	90:15	90:65	7	MultiByteToWideChar ( CP_ACP , 0 , name , nLen , NULL , 0 )
CALLEE	90:15	90:15	8	MultiByteToWideChar
LEAF_NODE	90:15	90:15	9	MultiByteToWideChar
LEAF_NODE	90:34	90:34	8	(
ARGUMENT	90:35	90:35	8	CP_ACP
FIELD	90:35	90:35	9	CP_ACP
LEAF_NODE	90:35	90:35	10	CP_ACP
LEAF_NODE	90:41	90:41	8	,
ARGUMENT	90:43	90:43	8	0
FIELD	90:43	90:43	9	0
LEAF_NODE	90:43	90:43	10	0
LEAF_NODE	90:44	90:44	8	,
ARGUMENT	90:46	90:46	8	name
FIELD	90:46	90:46	9	name
LEAF_NODE	90:46	90:46	10	name
LEAF_NODE	90:50	90:50	8	,
ARGUMENT	90:52	90:52	8	nLen
FIELD	90:52	90:52	9	nLen
LEAF_NODE	90:52	90:52	10	nLen
LEAF_NODE	90:56	90:56	8	,
ARGUMENT	90:58	90:58	8	NULL
FIELD	90:58	90:58	9	NULL
LEAF_NODE	90:58	90:58	10	NULL
LEAF_NODE	90:62	90:62	8	,
ARGUMENT	90:64	90:64	8	0
FIELD	90:64	90:64	9	0
LEAF_NODE	90:64	90:64	10	0
LEAF_NODE	90:65	90:65	8	)
LEAF_NODE	90:66	90:66	4	;
EXPR_STATEMENT	91:4	91:58	3	wchName = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen ) ;
EXPR	91:4	91:4	4	wchName = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
ASSIGN	91:4	91:14	5	wchName = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
LVAL	91:4	91:4	6	wchName
FIELD	91:4	91:4	7	wchName
LEAF_NODE	91:4	91:4	8	wchName
ASSIGN_OP	91:12	91:12	6	=
LEAF_NODE	91:12	91:12	7	=
RVAL	91:14	91:24	6	( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
LEAF_NODE	91:14	91:14	7	(
TYPE_NAME	91:15	91:15	7	wchar_t
LEAF_NODE	91:15	91:15	8	wchar_t
LEAF_NODE	91:22	91:22	7	*
LEAF_NODE	91:23	91:23	7	)
FUNCTION_CALL	91:24	91:57	7	malloc ( sizeof ( wchar_t ) * nWideLen )
CALLEE	91:24	91:24	8	malloc
LEAF_NODE	91:24	91:24	9	malloc
LEAF_NODE	91:30	91:30	8	(
ARGUMENT	91:31	91:49	8	sizeof ( wchar_t ) * nWideLen
FUNCTION_CALL	91:31	91:45	9	sizeof ( wchar_t )
CALLEE	91:31	91:31	10	sizeof
LEAF_NODE	91:31	91:31	11	sizeof
LEAF_NODE	91:37	91:37	10	(
ARGUMENT	91:38	91:38	10	wchar_t
FIELD	91:38	91:38	11	wchar_t
LEAF_NODE	91:38	91:38	12	wchar_t
LEAF_NODE	91:45	91:45	10	)
LEAF_NODE	91:47	91:47	9	*
FIELD	91:49	91:49	9	nWideLen
LEAF_NODE	91:49	91:49	10	nWideLen
LEAF_NODE	91:57	91:57	8	)
LEAF_NODE	91:58	91:58	4	;
SELECTION	92:4	93:4	3	
KEYWORD	92:4	92:4	4	if
LEAF_NODE	92:4	92:4	5	if
LEAF_NODE	92:7	92:7	4	(
CONDITION	92:8	92:8	4	NULL == wchName
EXPR	92:8	92:16	5	NULL == wchName
FIELD	92:8	92:8	6	NULL
LEAF_NODE	92:8	92:8	7	NULL
EQ_OPERATOR	92:13	92:13	6	==
LEAF_NODE	92:13	92:13	7	==
FIELD	92:16	92:16	6	wchName
LEAF_NODE	92:16	92:16	7	wchName
LEAF_NODE	92:23	92:23	4	)
STATEMENTS	93:4	96:4	4	
LEAF_NODE	93:4	93:4	5	{
STATEMENTS	94:8	95:2	5	
EXPR_STATEMENT	94:8	94:59	6	TIFFErrorExt ( 0 , module , "Memory allocation error!" ) ;
EXPR	94:8	94:8	7	TIFFErrorExt ( 0 , module , "Memory allocation error!" )
FUNCTION_CALL	94:8	94:58	8	TIFFErrorExt ( 0 , module , "Memory allocation error!" )
CALLEE	94:8	94:8	9	TIFFErrorExt
LEAF_NODE	94:8	94:8	10	TIFFErrorExt
LEAF_NODE	94:20	94:20	9	(
ARGUMENT	94:21	94:21	9	0
FIELD	94:21	94:21	10	0
LEAF_NODE	94:21	94:21	11	0
LEAF_NODE	94:22	94:22	9	,
ARGUMENT	94:24	94:24	9	module
FIELD	94:24	94:24	10	module
LEAF_NODE	94:24	94:24	11	module
LEAF_NODE	94:30	94:30	9	,
ARGUMENT	94:32	94:32	9	"Memory allocation error!"
FIELD	94:32	94:32	10	"Memory allocation error!"
LEAF_NODE	94:32	94:32	11	"Memory allocation error!"
LEAF_NODE	94:58	94:58	9	)
LEAF_NODE	94:59	94:59	7	;
JUMP_STATEMENT	95:2	95:20	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	95:2	95:2	7	return
LEAF_NODE	95:2	95:2	8	return
DESTINATION	95:9	95:9	7	( ( TIFF * ) 0 )
EXPR	95:9	95:19	8	( ( TIFF * ) 0 )
LEAF_NODE	95:9	95:9	9	(
LEAF_NODE	95:10	95:10	9	(
TYPE_NAME	95:11	95:11	9	TIFF
LEAF_NODE	95:11	95:11	10	TIFF
LEAF_NODE	95:16	95:16	9	*
LEAF_NODE	95:17	95:17	9	)
FIELD	95:18	95:18	9	0
LEAF_NODE	95:18	95:18	10	0
LEAF_NODE	95:19	95:19	9	)
LEAF_NODE	95:20	95:20	7	;
LEAF_NODE	96:4	96:4	5	}
EXPR_STATEMENT	97:4	97:50	3	memset ( wchName , 0 , sizeof ( wchar_t ) * nWideLen ) ;
EXPR	97:4	97:4	4	memset ( wchName , 0 , sizeof ( wchar_t ) * nWideLen )
FUNCTION_CALL	97:4	97:49	5	memset ( wchName , 0 , sizeof ( wchar_t ) * nWideLen )
CALLEE	97:4	97:4	6	memset
LEAF_NODE	97:4	97:4	7	memset
LEAF_NODE	97:10	97:10	6	(
ARGUMENT	97:11	97:11	6	wchName
FIELD	97:11	97:11	7	wchName
LEAF_NODE	97:11	97:11	8	wchName
LEAF_NODE	97:18	97:18	6	,
ARGUMENT	97:20	97:20	6	0
FIELD	97:20	97:20	7	0
LEAF_NODE	97:20	97:20	8	0
LEAF_NODE	97:21	97:21	6	,
ARGUMENT	97:23	97:41	6	sizeof ( wchar_t ) * nWideLen
FUNCTION_CALL	97:23	97:37	7	sizeof ( wchar_t )
CALLEE	97:23	97:23	8	sizeof
LEAF_NODE	97:23	97:23	9	sizeof
LEAF_NODE	97:29	97:29	8	(
ARGUMENT	97:30	97:30	8	wchar_t
FIELD	97:30	97:30	9	wchar_t
LEAF_NODE	97:30	97:30	10	wchar_t
LEAF_NODE	97:37	97:37	8	)
LEAF_NODE	97:39	97:39	7	*
FIELD	97:41	97:41	7	nWideLen
LEAF_NODE	97:41	97:41	8	nWideLen
LEAF_NODE	97:49	97:49	6	)
LEAF_NODE	97:50	97:50	4	;
EXPR_STATEMENT	98:4	98:65	3	MultiByteToWideChar ( CP_ACP , 0 , name , nLen , wchName , nWideLen ) ;
EXPR	98:4	98:4	4	MultiByteToWideChar ( CP_ACP , 0 , name , nLen , wchName , nWideLen )
FUNCTION_CALL	98:4	98:64	5	MultiByteToWideChar ( CP_ACP , 0 , name , nLen , wchName , nWideLen )
CALLEE	98:4	98:4	6	MultiByteToWideChar
LEAF_NODE	98:4	98:4	7	MultiByteToWideChar
LEAF_NODE	98:23	98:23	6	(
ARGUMENT	98:24	98:24	6	CP_ACP
FIELD	98:24	98:24	7	CP_ACP
LEAF_NODE	98:24	98:24	8	CP_ACP
LEAF_NODE	98:30	98:30	6	,
ARGUMENT	98:32	98:32	6	0
FIELD	98:32	98:32	7	0
LEAF_NODE	98:32	98:32	8	0
LEAF_NODE	98:33	98:33	6	,
ARGUMENT	98:35	98:35	6	name
FIELD	98:35	98:35	7	name
LEAF_NODE	98:35	98:35	8	name
LEAF_NODE	98:39	98:39	6	,
ARGUMENT	98:41	98:41	6	nLen
FIELD	98:41	98:41	7	nLen
LEAF_NODE	98:41	98:41	8	nLen
LEAF_NODE	98:45	98:45	6	,
ARGUMENT	98:47	98:47	6	wchName
FIELD	98:47	98:47	7	wchName
LEAF_NODE	98:47	98:47	8	wchName
LEAF_NODE	98:54	98:54	6	,
ARGUMENT	98:56	98:56	6	nWideLen
FIELD	98:56	98:56	7	nWideLen
LEAF_NODE	98:56	98:56	8	nWideLen
LEAF_NODE	98:64	98:64	6	)
LEAF_NODE	98:65	98:65	4	;
EXPR_STATEMENT	100:1	104:7	3	fd = ( thandle_t ) CreateFile ( wchName , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL ) ;
EXPR	100:1	100:1	4	fd = ( thandle_t ) CreateFile ( wchName , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
ASSIGN	100:1	100:6	5	fd = ( thandle_t ) CreateFile ( wchName , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
LVAL	100:1	100:1	6	fd
FIELD	100:1	100:1	7	fd
LEAF_NODE	100:1	100:1	8	fd
ASSIGN_OP	100:4	100:4	6	=
LEAF_NODE	100:4	100:4	7	=
RVAL	100:6	100:17	6	( thandle_t ) CreateFile ( wchName , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
LEAF_NODE	100:6	100:6	7	(
TYPE_NAME	100:7	100:7	7	thandle_t
LEAF_NODE	100:7	100:7	8	thandle_t
LEAF_NODE	100:16	100:16	7	)
FUNCTION_CALL	100:17	104:6	7	CreateFile ( wchName , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
CALLEE	100:17	100:17	8	CreateFile
LEAF_NODE	100:17	100:17	9	CreateFile
LEAF_NODE	100:27	100:27	8	(
ARGUMENT	100:28	100:28	8	wchName
FIELD	100:28	100:28	9	wchName
LEAF_NODE	100:28	100:28	10	wchName
LEAF_NODE	100:35	100:35	8	,
ARGUMENT	101:2	101:2	8	( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE )
COND_EXPR	101:2	101:60	9	( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE )
CONDITION	101:2	101:16	10	( m == O_RDONLY )
LEAF_NODE	101:2	101:2	11	(
FIELD	101:3	101:3	11	m
LEAF_NODE	101:3	101:3	12	m
EQ_OPERATOR	101:5	101:5	11	==
LEAF_NODE	101:5	101:5	12	==
FIELD	101:8	101:8	11	O_RDONLY
LEAF_NODE	101:8	101:8	12	O_RDONLY
LEAF_NODE	101:16	101:16	11	)
LEAF_NODE	101:17	101:17	10	?
EXPR	101:18	101:18	10	GENERIC_READ
FIELD	101:18	101:18	11	GENERIC_READ
LEAF_NODE	101:18	101:18	12	GENERIC_READ
LEAF_NODE	101:30	101:30	10	:
LEAF_NODE	101:31	101:31	10	(
BIT_OR	101:32	101:47	10	GENERIC_READ | GENERIC_WRITE
BIT_OR_ELEM	101:32	101:32	11	GENERIC_READ
FIELD	101:32	101:32	12	GENERIC_READ
LEAF_NODE	101:32	101:32	13	GENERIC_READ
LEAF_NODE	101:45	101:45	11	|
BIT_OR_ELEM	101:47	101:47	11	GENERIC_WRITE
FIELD	101:47	101:47	12	GENERIC_WRITE
LEAF_NODE	101:47	101:47	13	GENERIC_WRITE
LEAF_NODE	101:60	101:60	10	)
LEAF_NODE	101:61	101:61	8	,
ARGUMENT	102:2	102:2	8	FILE_SHARE_READ | FILE_SHARE_WRITE
BIT_OR	102:2	102:20	9	FILE_SHARE_READ | FILE_SHARE_WRITE
BIT_OR_ELEM	102:2	102:2	10	FILE_SHARE_READ
FIELD	102:2	102:2	11	FILE_SHARE_READ
LEAF_NODE	102:2	102:2	12	FILE_SHARE_READ
LEAF_NODE	102:18	102:18	10	|
BIT_OR_ELEM	102:20	102:20	10	FILE_SHARE_WRITE
FIELD	102:20	102:20	11	FILE_SHARE_WRITE
LEAF_NODE	102:20	102:20	12	FILE_SHARE_WRITE
LEAF_NODE	102:36	102:36	8	,
ARGUMENT	102:38	102:38	8	NULL
FIELD	102:38	102:38	9	NULL
LEAF_NODE	102:38	102:38	10	NULL
LEAF_NODE	102:42	102:42	8	,
ARGUMENT	102:44	102:44	8	dwMode
FIELD	102:44	102:44	9	dwMode
LEAF_NODE	102:44	102:44	10	dwMode
LEAF_NODE	102:50	102:50	8	,
ARGUMENT	103:2	103:2	8	( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL
COND_EXPR	103:2	103:42	9	( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL
CONDITION	103:2	103:16	10	( m == O_RDONLY )
LEAF_NODE	103:2	103:2	11	(
FIELD	103:3	103:3	11	m
LEAF_NODE	103:3	103:3	12	m
EQ_OPERATOR	103:5	103:5	11	==
LEAF_NODE	103:5	103:5	12	==
FIELD	103:8	103:8	11	O_RDONLY
LEAF_NODE	103:8	103:8	12	O_RDONLY
LEAF_NODE	103:16	103:16	11	)
LEAF_NODE	103:17	103:17	10	?
EXPR	103:18	103:18	10	FILE_ATTRIBUTE_READONLY
FIELD	103:18	103:18	11	FILE_ATTRIBUTE_READONLY
LEAF_NODE	103:18	103:18	12	FILE_ATTRIBUTE_READONLY
LEAF_NODE	103:41	103:41	10	:
FIELD	103:42	103:42	10	FILE_ATTRIBUTE_NORMAL
LEAF_NODE	103:42	103:42	11	FILE_ATTRIBUTE_NORMAL
LEAF_NODE	103:63	103:63	8	,
ARGUMENT	104:2	104:2	8	NULL
FIELD	104:2	104:2	9	NULL
LEAF_NODE	104:2	104:2	10	NULL
LEAF_NODE	104:6	104:6	8	)
LEAF_NODE	104:7	104:7	4	;
EXPR_STATEMENT	106:4	106:17	3	free ( wchName ) ;
EXPR	106:4	106:4	4	free ( wchName )
FUNCTION_CALL	106:4	106:16	5	free ( wchName )
CALLEE	106:4	106:4	6	free
LEAF_NODE	106:4	106:4	7	free
LEAF_NODE	106:8	106:8	6	(
ARGUMENT	106:9	106:9	6	wchName
FIELD	106:9	106:9	7	wchName
LEAF_NODE	106:9	106:9	8	wchName
LEAF_NODE	106:16	106:16	6	)
LEAF_NODE	106:17	106:17	4	;
SELECTION	108:4	108:36	3	
KEYWORD	108:4	108:4	4	if
LEAF_NODE	108:4	108:4	5	if
LEAF_NODE	108:7	108:7	4	(
CONDITION	108:8	108:8	4	fd == INVALID_HANDLE_VALUE
EXPR	108:8	108:14	5	fd == INVALID_HANDLE_VALUE
FIELD	108:8	108:8	6	fd
LEAF_NODE	108:8	108:8	7	fd
EQ_OPERATOR	108:11	108:11	6	==
LEAF_NODE	108:11	108:11	7	==
FIELD	108:14	108:14	6	INVALID_HANDLE_VALUE
LEAF_NODE	108:14	108:14	7	INVALID_HANDLE_VALUE
LEAF_NODE	108:34	108:34	4	)
STATEMENTS	108:36	111:1	4	
LEAF_NODE	108:36	108:36	5	{
STATEMENTS	109:2	110:2	5	
EXPR_STATEMENT	109:2	109:50	6	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name ) ;
EXPR	109:2	109:2	7	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name )
FUNCTION_CALL	109:2	109:49	8	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name )
CALLEE	109:2	109:2	9	TIFFErrorExt
LEAF_NODE	109:2	109:2	10	TIFFErrorExt
LEAF_NODE	109:14	109:14	9	(
ARGUMENT	109:15	109:15	9	0
FIELD	109:15	109:15	10	0
LEAF_NODE	109:15	109:15	11	0
LEAF_NODE	109:16	109:16	9	,
ARGUMENT	109:18	109:18	9	module
FIELD	109:18	109:18	10	module
LEAF_NODE	109:18	109:18	11	module
LEAF_NODE	109:24	109:24	9	,
ARGUMENT	109:26	109:26	9	"%s: Cannot open"
FIELD	109:26	109:26	10	"%s: Cannot open"
LEAF_NODE	109:26	109:26	11	"%s: Cannot open"
LEAF_NODE	109:43	109:43	9	,
ARGUMENT	109:45	109:45	9	name
FIELD	109:45	109:45	10	name
LEAF_NODE	109:45	109:45	11	name
LEAF_NODE	109:49	109:49	9	)
LEAF_NODE	109:50	109:50	7	;
JUMP_STATEMENT	110:2	110:20	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	110:2	110:2	7	return
LEAF_NODE	110:2	110:2	8	return
DESTINATION	110:9	110:9	7	( ( TIFF * ) 0 )
EXPR	110:9	110:19	8	( ( TIFF * ) 0 )
LEAF_NODE	110:9	110:9	9	(
LEAF_NODE	110:10	110:10	9	(
TYPE_NAME	110:11	110:11	9	TIFF
LEAF_NODE	110:11	110:11	10	TIFF
LEAF_NODE	110:16	110:16	9	*
LEAF_NODE	110:17	110:17	9	)
FIELD	110:18	110:18	9	0
LEAF_NODE	110:18	110:18	10	0
LEAF_NODE	110:19	110:19	9	)
LEAF_NODE	110:20	110:20	7	;
LEAF_NODE	111:1	111:1	5	}
EXPR_STATEMENT	115:1	115:38	3	tif = TIFFFdOpen ( ( int ) fd , name , mode ) ;
EXPR	115:1	115:1	4	tif = TIFFFdOpen ( ( int ) fd , name , mode )
ASSIGN	115:1	115:7	5	tif = TIFFFdOpen ( ( int ) fd , name , mode )
LVAL	115:1	115:1	6	tif
FIELD	115:1	115:1	7	tif
LEAF_NODE	115:1	115:1	8	tif
ASSIGN_OP	115:5	115:5	6	=
LEAF_NODE	115:5	115:5	7	=
RVAL	115:7	115:7	6	TIFFFdOpen ( ( int ) fd , name , mode )
FUNCTION_CALL	115:7	115:37	7	TIFFFdOpen ( ( int ) fd , name , mode )
CALLEE	115:7	115:7	8	TIFFFdOpen
LEAF_NODE	115:7	115:7	9	TIFFFdOpen
LEAF_NODE	115:17	115:17	8	(
ARGUMENT	115:18	115:23	8	( int ) fd
LEAF_NODE	115:18	115:18	9	(
TYPE_NAME	115:19	115:19	9	int
LEAF_NODE	115:19	115:19	10	int
LEAF_NODE	115:22	115:22	9	)
FIELD	115:23	115:23	9	fd
LEAF_NODE	115:23	115:23	10	fd
LEAF_NODE	115:25	115:25	8	,
ARGUMENT	115:27	115:27	8	name
FIELD	115:27	115:27	9	name
LEAF_NODE	115:27	115:27	10	name
LEAF_NODE	115:31	115:31	8	,
ARGUMENT	115:33	115:33	8	mode
FIELD	115:33	115:33	9	mode
LEAF_NODE	115:33	115:33	10	mode
LEAF_NODE	115:37	115:37	8	)
LEAF_NODE	115:38	115:38	4	;
SELECTION	116:1	117:2	3	
KEYWORD	116:1	116:1	4	if
LEAF_NODE	116:1	116:1	5	if
LEAF_NODE	116:3	116:3	4	(
CONDITION	116:4	116:4	4	! tif
EXPR	116:4	116:4	5	! tif
UNARY_EXPR	116:4	116:5	6	! tif
UNARY_OPERATOR	116:4	116:4	7	!
LEAF_NODE	116:4	116:4	8	!
FIELD	116:5	116:5	7	tif
LEAF_NODE	116:5	116:5	8	tif
LEAF_NODE	116:8	116:8	4	)
STATEMENTS	117:2	117:2	4	
EXPR_STATEMENT	117:2	117:17	5	CloseHandle ( fd ) ;
EXPR	117:2	117:2	6	CloseHandle ( fd )
FUNCTION_CALL	117:2	117:16	7	CloseHandle ( fd )
CALLEE	117:2	117:2	8	CloseHandle
LEAF_NODE	117:2	117:2	9	CloseHandle
LEAF_NODE	117:13	117:13	8	(
ARGUMENT	117:14	117:14	8	fd
FIELD	117:14	117:14	9	fd
LEAF_NODE	117:14	117:14	10	fd
LEAF_NODE	117:16	117:16	8	)
LEAF_NODE	117:17	117:17	6	;
JUMP_STATEMENT	118:1	118:11	3	return tif ;
KEYWORD	118:1	118:1	4	return
LEAF_NODE	118:1	118:1	5	return
DESTINATION	118:8	118:8	4	tif
EXPR	118:8	118:8	5	tif
FIELD	118:8	118:8	6	tif
LEAF_NODE	118:8	118:8	7	tif
LEAF_NODE	118:11	118:11	4	;
LEAF_NODE	119:0	119:0	2	}
FUNCTION_DEF	124:0	182:0	1	
RETURN_TYPE	124:0	124:4	2	TIFF *
TYPE_NAME	124:0	124:0	3	TIFF
LEAF_NODE	124:0	124:0	4	TIFF
LEAF_NODE	124:4	124:4	3	*
FUNCTION_NAME	125:0	125:0	2	TIFFOpenW
LEAF_NODE	125:0	125:0	3	TIFFOpenW
PARAMETER_LIST	125:9	125:47	2	( const wchar_t * name , const char * mode )
LEAF_NODE	125:9	125:9	3	(
PARAMETER_DECL	125:10	125:25	3	const wchar_t * name
TYPE	125:10	125:23	4	const wchar_t *
TYPE_NAME	125:10	125:16	5	const wchar_t
LEAF_NODE	125:10	125:10	6	const
LEAF_NODE	125:16	125:16	6	wchar_t
POINTER	125:23	125:23	5	*
LEAF_NODE	125:23	125:23	6	*
NAME	125:25	125:25	4	name
LEAF_NODE	125:25	125:25	5	name
LEAF_NODE	125:29	125:29	3	,
PARAMETER_DECL	125:31	125:43	3	const char * mode
TYPE	125:31	125:41	4	const char *
TYPE_NAME	125:31	125:37	5	const char
LEAF_NODE	125:31	125:31	6	const
LEAF_NODE	125:37	125:37	6	char
POINTER	125:41	125:41	5	*
LEAF_NODE	125:41	125:41	6	*
NAME	125:43	125:43	4	mode
LEAF_NODE	125:43	125:43	5	mode
LEAF_NODE	125:47	125:47	3	)
LEAF_NODE	126:0	126:0	2	{
STATEMENTS	127:1	181:1	2	
LEAF_NODE	127:1	127:1	3	static
SIMPLE_DECL	127:8	127:41	3	const char [ ] module ; module = "TIFFOpenW" ;
VAR_DECL	127:8	127:19	4	const char [ ] module ; module = "TIFFOpenW"
TYPE	127:8	127:25	5	const char [ ]
TYPE_NAME	127:8	127:14	6	const char
LEAF_NODE	127:8	127:8	7	const
LEAF_NODE	127:14	127:14	7	char
TYPE_SUFFIX	127:25	127:26	6	[ ]
LEAF_NODE	127:25	127:25	7	[
LEAF_NODE	127:26	127:26	7	]
NAME	127:19	127:19	5	module
LEAF_NODE	127:19	127:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	127:19	127:19	5	module = "TIFFOpenW"
ASSIGN	127:19	127:30	6	module = "TIFFOpenW"
LVAL	127:19	127:19	7	module
NAME	127:19	127:19	8	module
LEAF_NODE	127:19	127:19	9	module
ASSIGN_OP	127:28	127:28	7	=
LEAF_NODE	127:28	127:28	8	=
RVAL	127:30	127:30	7	"TIFFOpenW"
FIELD	127:30	127:30	8	"TIFFOpenW"
LEAF_NODE	127:30	127:30	9	"TIFFOpenW"
LEAF_NODE	127:41	127:41	4	;
SIMPLE_DECL	128:1	128:13	3	thandle_t fd ;
VAR_DECL	128:1	128:11	4	thandle_t fd
TYPE	128:1	128:1	5	thandle_t
TYPE_NAME	128:1	128:1	6	thandle_t
LEAF_NODE	128:1	128:1	7	thandle_t
NAME	128:11	128:11	5	fd
LEAF_NODE	128:11	128:11	6	fd
LEAF_NODE	128:13	128:13	4	;
SIMPLE_DECL	129:1	129:6	3	int m ;
VAR_DECL	129:1	129:5	4	int m
TYPE	129:1	129:1	5	int
TYPE_NAME	129:1	129:1	6	int
LEAF_NODE	129:1	129:1	7	int
NAME	129:5	129:5	5	m
LEAF_NODE	129:5	129:5	6	m
LEAF_NODE	129:6	129:6	4	;
SIMPLE_DECL	130:1	130:13	3	DWORD dwMode ;
VAR_DECL	130:1	130:7	4	DWORD dwMode
TYPE	130:1	130:1	5	DWORD
TYPE_NAME	130:1	130:1	6	DWORD
LEAF_NODE	130:1	130:1	7	DWORD
NAME	130:7	130:7	5	dwMode
LEAF_NODE	130:7	130:7	6	dwMode
LEAF_NODE	130:13	130:13	4	;
SIMPLE_DECL	131:1	131:11	3	int mbsize ;
VAR_DECL	131:1	131:5	4	int mbsize
TYPE	131:1	131:1	5	int
TYPE_NAME	131:1	131:1	6	int
LEAF_NODE	131:1	131:1	7	int
NAME	131:5	131:5	5	mbsize
LEAF_NODE	131:5	131:5	6	mbsize
LEAF_NODE	131:11	131:11	4	;
SIMPLE_DECL	132:1	132:13	3	char * mbname ;
VAR_DECL	132:1	132:7	4	char * mbname
TYPE	132:1	132:6	5	char *
TYPE_NAME	132:1	132:1	6	char
LEAF_NODE	132:1	132:1	7	char
POINTER	132:6	132:6	6	*
LEAF_NODE	132:6	132:6	7	*
NAME	132:7	132:7	5	mbname
LEAF_NODE	132:7	132:7	6	mbname
LEAF_NODE	132:13	132:13	4	;
SIMPLE_DECL	133:1	133:10	3	TIFF * tif ;
VAR_DECL	133:1	133:7	4	TIFF * tif
TYPE	133:1	133:6	5	TIFF *
TYPE_NAME	133:1	133:1	6	TIFF
LEAF_NODE	133:1	133:1	7	TIFF
POINTER	133:6	133:6	6	*
LEAF_NODE	133:6	133:6	7	*
NAME	133:7	133:7	5	tif
LEAF_NODE	133:7	133:7	6	tif
LEAF_NODE	133:10	133:10	4	;
EXPR_STATEMENT	135:1	135:31	3	m = _TIFFgetMode ( mode , module ) ;
EXPR	135:1	135:1	4	m = _TIFFgetMode ( mode , module )
ASSIGN	135:1	135:5	5	m = _TIFFgetMode ( mode , module )
LVAL	135:1	135:1	6	m
FIELD	135:1	135:1	7	m
LEAF_NODE	135:1	135:1	8	m
ASSIGN_OP	135:3	135:3	6	=
LEAF_NODE	135:3	135:3	7	=
RVAL	135:5	135:5	6	_TIFFgetMode ( mode , module )
FUNCTION_CALL	135:5	135:30	7	_TIFFgetMode ( mode , module )
CALLEE	135:5	135:5	8	_TIFFgetMode
LEAF_NODE	135:5	135:5	9	_TIFFgetMode
LEAF_NODE	135:17	135:17	8	(
ARGUMENT	135:18	135:18	8	mode
FIELD	135:18	135:18	9	mode
LEAF_NODE	135:18	135:18	10	mode
LEAF_NODE	135:22	135:22	8	,
ARGUMENT	135:24	135:24	8	module
FIELD	135:24	135:24	9	module
LEAF_NODE	135:24	135:24	10	module
LEAF_NODE	135:30	135:30	8	)
LEAF_NODE	135:31	135:31	4	;
SELECTION	137:1	137:11	3	
KEYWORD	137:1	137:1	4	switch
LEAF_NODE	137:1	137:1	5	switch
LEAF_NODE	137:7	137:7	4	(
CONDITION	137:8	137:8	4	m
EXPR	137:8	137:8	5	m
FIELD	137:8	137:8	6	m
LEAF_NODE	137:8	137:8	7	m
LEAF_NODE	137:9	137:9	4	)
STATEMENTS	137:11	144:1	4	
LEAF_NODE	137:11	137:11	5	{
STATEMENTS	138:2	143:13	5	
LABEL	138:2	138:15	6	case O_RDONLY :
LEAF_NODE	138:2	138:2	7	case
LEAF_NODE	138:7	138:7	7	O_RDONLY
LEAF_NODE	138:15	138:15	7	:
EXPR_STATEMENT	138:19	138:41	6	dwMode = OPEN_EXISTING ;
EXPR	138:19	138:19	7	dwMode = OPEN_EXISTING
ASSIGN	138:19	138:28	8	dwMode = OPEN_EXISTING
LVAL	138:19	138:19	9	dwMode
FIELD	138:19	138:19	10	dwMode
LEAF_NODE	138:19	138:19	11	dwMode
ASSIGN_OP	138:26	138:26	9	=
LEAF_NODE	138:26	138:26	10	=
RVAL	138:28	138:28	9	OPEN_EXISTING
FIELD	138:28	138:28	10	OPEN_EXISTING
LEAF_NODE	138:28	138:28	11	OPEN_EXISTING
LEAF_NODE	138:41	138:41	7	;
JUMP_STATEMENT	138:43	138:48	6	break DESTINATION ;
KEYWORD	138:43	138:43	7	break
LEAF_NODE	138:43	138:43	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	138:48	138:48	7	;
LABEL	139:2	139:13	6	case O_RDWR :
LEAF_NODE	139:2	139:2	7	case
LEAF_NODE	139:7	139:7	7	O_RDWR
LEAF_NODE	139:13	139:13	7	:
EXPR_STATEMENT	139:17	139:37	6	dwMode = OPEN_ALWAYS ;
EXPR	139:17	139:17	7	dwMode = OPEN_ALWAYS
ASSIGN	139:17	139:26	8	dwMode = OPEN_ALWAYS
LVAL	139:17	139:17	9	dwMode
FIELD	139:17	139:17	10	dwMode
LEAF_NODE	139:17	139:17	11	dwMode
ASSIGN_OP	139:24	139:24	9	=
LEAF_NODE	139:24	139:24	10	=
RVAL	139:26	139:26	9	OPEN_ALWAYS
FIELD	139:26	139:26	10	OPEN_ALWAYS
LEAF_NODE	139:26	139:26	11	OPEN_ALWAYS
LEAF_NODE	139:37	139:37	7	;
JUMP_STATEMENT	139:41	139:46	6	break DESTINATION ;
KEYWORD	139:41	139:41	7	break
LEAF_NODE	139:41	139:41	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	139:46	139:46	7	;
LEAF_NODE	140:2	140:2	6	case
LEAF_NODE	140:7	140:7	6	O_RDWR
LEAF_NODE	140:13	140:13	6	|
LABEL	140:14	140:21	6	O_CREAT :
LEAF_NODE	140:14	140:14	7	O_CREAT
LEAF_NODE	140:21	140:21	7	:
EXPR_STATEMENT	140:24	140:44	6	dwMode = OPEN_ALWAYS ;
EXPR	140:24	140:24	7	dwMode = OPEN_ALWAYS
ASSIGN	140:24	140:33	8	dwMode = OPEN_ALWAYS
LVAL	140:24	140:24	9	dwMode
FIELD	140:24	140:24	10	dwMode
LEAF_NODE	140:24	140:24	11	dwMode
ASSIGN_OP	140:31	140:31	9	=
LEAF_NODE	140:31	140:31	10	=
RVAL	140:33	140:33	9	OPEN_ALWAYS
FIELD	140:33	140:33	10	OPEN_ALWAYS
LEAF_NODE	140:33	140:33	11	OPEN_ALWAYS
LEAF_NODE	140:44	140:44	7	;
JUMP_STATEMENT	140:48	140:53	6	break DESTINATION ;
KEYWORD	140:48	140:48	7	break
LEAF_NODE	140:48	140:48	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	140:53	140:53	7	;
LEAF_NODE	141:2	141:2	6	case
LEAF_NODE	141:7	141:7	6	O_RDWR
LEAF_NODE	141:13	141:13	6	|
LABEL	141:14	141:21	6	O_TRUNC :
LEAF_NODE	141:14	141:14	7	O_TRUNC
LEAF_NODE	141:21	141:21	7	:
EXPR_STATEMENT	141:24	141:46	6	dwMode = CREATE_ALWAYS ;
EXPR	141:24	141:24	7	dwMode = CREATE_ALWAYS
ASSIGN	141:24	141:33	8	dwMode = CREATE_ALWAYS
LVAL	141:24	141:24	9	dwMode
FIELD	141:24	141:24	10	dwMode
LEAF_NODE	141:24	141:24	11	dwMode
ASSIGN_OP	141:31	141:31	9	=
LEAF_NODE	141:31	141:31	10	=
RVAL	141:33	141:33	9	CREATE_ALWAYS
FIELD	141:33	141:33	10	CREATE_ALWAYS
LEAF_NODE	141:33	141:33	11	CREATE_ALWAYS
LEAF_NODE	141:46	141:46	7	;
JUMP_STATEMENT	141:48	141:53	6	break DESTINATION ;
KEYWORD	141:48	141:48	7	break
LEAF_NODE	141:48	141:48	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	141:53	141:53	7	;
LEAF_NODE	142:2	142:2	6	case
LEAF_NODE	142:7	142:7	6	O_RDWR
LEAF_NODE	142:13	142:13	6	|
LEAF_NODE	142:14	142:14	6	O_CREAT
LEAF_NODE	142:21	142:21	6	|
LABEL	142:22	142:29	6	O_TRUNC :
LEAF_NODE	142:22	142:22	7	O_TRUNC
LEAF_NODE	142:29	142:29	7	:
EXPR_STATEMENT	142:31	142:53	6	dwMode = CREATE_ALWAYS ;
EXPR	142:31	142:31	7	dwMode = CREATE_ALWAYS
ASSIGN	142:31	142:40	8	dwMode = CREATE_ALWAYS
LVAL	142:31	142:31	9	dwMode
FIELD	142:31	142:31	10	dwMode
LEAF_NODE	142:31	142:31	11	dwMode
ASSIGN_OP	142:38	142:38	9	=
LEAF_NODE	142:38	142:38	10	=
RVAL	142:40	142:40	9	CREATE_ALWAYS
FIELD	142:40	142:40	10	CREATE_ALWAYS
LEAF_NODE	142:40	142:40	11	CREATE_ALWAYS
LEAF_NODE	142:53	142:53	7	;
JUMP_STATEMENT	142:55	142:60	6	break DESTINATION ;
KEYWORD	142:55	142:55	7	break
LEAF_NODE	142:55	142:55	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	142:60	142:60	7	;
LABEL	143:2	143:9	6	default :
LEAF_NODE	143:2	143:2	7	default
LEAF_NODE	143:9	143:9	7	:
JUMP_STATEMENT	143:13	143:30	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	143:13	143:13	7	return
LEAF_NODE	143:13	143:13	8	return
DESTINATION	143:20	143:20	7	( ( TIFF * ) 0 )
EXPR	143:20	143:29	8	( ( TIFF * ) 0 )
LEAF_NODE	143:20	143:20	9	(
LEAF_NODE	143:21	143:21	9	(
TYPE_NAME	143:22	143:22	9	TIFF
LEAF_NODE	143:22	143:22	10	TIFF
LEAF_NODE	143:26	143:26	9	*
LEAF_NODE	143:27	143:27	9	)
FIELD	143:28	143:28	9	0
LEAF_NODE	143:28	143:28	10	0
LEAF_NODE	143:29	143:29	9	)
LEAF_NODE	143:30	143:30	7	;
LEAF_NODE	144:1	144:1	5	}
EXPR_STATEMENT	150:1	154:7	3	fd = ( thandle_t ) CreateFile ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL ) ;
EXPR	150:1	150:1	4	fd = ( thandle_t ) CreateFile ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
ASSIGN	150:1	150:6	5	fd = ( thandle_t ) CreateFile ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
LVAL	150:1	150:1	6	fd
FIELD	150:1	150:1	7	fd
LEAF_NODE	150:1	150:1	8	fd
ASSIGN_OP	150:4	150:4	6	=
LEAF_NODE	150:4	150:4	7	=
RVAL	150:6	150:17	6	( thandle_t ) CreateFile ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
LEAF_NODE	150:6	150:6	7	(
TYPE_NAME	150:7	150:7	7	thandle_t
LEAF_NODE	150:7	150:7	8	thandle_t
LEAF_NODE	150:16	150:16	7	)
FUNCTION_CALL	150:17	154:6	7	CreateFile ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
CALLEE	150:17	150:17	8	CreateFile
LEAF_NODE	150:17	150:17	9	CreateFile
LEAF_NODE	150:27	150:27	8	(
ARGUMENT	150:28	150:28	8	name
FIELD	150:28	150:28	9	name
LEAF_NODE	150:28	150:28	10	name
LEAF_NODE	150:32	150:32	8	,
ARGUMENT	151:2	151:2	8	( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE )
COND_EXPR	151:2	151:58	9	( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE )
CONDITION	151:2	151:16	10	( m == O_RDONLY )
LEAF_NODE	151:2	151:2	11	(
FIELD	151:3	151:3	11	m
LEAF_NODE	151:3	151:3	12	m
EQ_OPERATOR	151:5	151:5	11	==
LEAF_NODE	151:5	151:5	12	==
FIELD	151:8	151:8	11	O_RDONLY
LEAF_NODE	151:8	151:8	12	O_RDONLY
LEAF_NODE	151:16	151:16	11	)
LEAF_NODE	151:17	151:17	10	?
EXPR	151:18	151:18	10	GENERIC_READ
FIELD	151:18	151:18	11	GENERIC_READ
LEAF_NODE	151:18	151:18	12	GENERIC_READ
LEAF_NODE	151:30	151:30	10	:
LEAF_NODE	151:31	151:31	10	(
BIT_OR	151:32	151:45	10	GENERIC_READ | GENERIC_WRITE
BIT_OR_ELEM	151:32	151:32	11	GENERIC_READ
FIELD	151:32	151:32	12	GENERIC_READ
LEAF_NODE	151:32	151:32	13	GENERIC_READ
LEAF_NODE	151:44	151:44	11	|
BIT_OR_ELEM	151:45	151:45	11	GENERIC_WRITE
FIELD	151:45	151:45	12	GENERIC_WRITE
LEAF_NODE	151:45	151:45	13	GENERIC_WRITE
LEAF_NODE	151:58	151:58	10	)
LEAF_NODE	151:59	151:59	8	,
ARGUMENT	152:2	152:2	8	FILE_SHARE_READ
FIELD	152:2	152:2	9	FILE_SHARE_READ
LEAF_NODE	152:2	152:2	10	FILE_SHARE_READ
LEAF_NODE	152:17	152:17	8	,
ARGUMENT	152:19	152:19	8	NULL
FIELD	152:19	152:19	9	NULL
LEAF_NODE	152:19	152:19	10	NULL
LEAF_NODE	152:23	152:23	8	,
ARGUMENT	152:25	152:25	8	dwMode
FIELD	152:25	152:25	9	dwMode
LEAF_NODE	152:25	152:25	10	dwMode
LEAF_NODE	152:31	152:31	8	,
ARGUMENT	153:2	153:2	8	( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL
COND_EXPR	153:2	153:42	9	( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL
CONDITION	153:2	153:16	10	( m == O_RDONLY )
LEAF_NODE	153:2	153:2	11	(
FIELD	153:3	153:3	11	m
LEAF_NODE	153:3	153:3	12	m
EQ_OPERATOR	153:5	153:5	11	==
LEAF_NODE	153:5	153:5	12	==
FIELD	153:8	153:8	11	O_RDONLY
LEAF_NODE	153:8	153:8	12	O_RDONLY
LEAF_NODE	153:16	153:16	11	)
LEAF_NODE	153:17	153:17	10	?
EXPR	153:18	153:18	10	FILE_ATTRIBUTE_READONLY
FIELD	153:18	153:18	11	FILE_ATTRIBUTE_READONLY
LEAF_NODE	153:18	153:18	12	FILE_ATTRIBUTE_READONLY
LEAF_NODE	153:41	153:41	10	:
FIELD	153:42	153:42	10	FILE_ATTRIBUTE_NORMAL
LEAF_NODE	153:42	153:42	11	FILE_ATTRIBUTE_NORMAL
LEAF_NODE	153:63	153:63	8	,
ARGUMENT	154:2	154:2	8	NULL
FIELD	154:2	154:2	9	NULL
LEAF_NODE	154:2	154:2	10	NULL
LEAF_NODE	154:6	154:6	8	)
LEAF_NODE	154:7	154:7	4	;
SELECTION	155:1	155:33	3	
KEYWORD	155:1	155:1	4	if
LEAF_NODE	155:1	155:1	5	if
LEAF_NODE	155:4	155:4	4	(
CONDITION	155:5	155:5	4	fd == INVALID_HANDLE_VALUE
EXPR	155:5	155:11	5	fd == INVALID_HANDLE_VALUE
FIELD	155:5	155:5	6	fd
LEAF_NODE	155:5	155:5	7	fd
EQ_OPERATOR	155:8	155:8	6	==
LEAF_NODE	155:8	155:8	7	==
FIELD	155:11	155:11	6	INVALID_HANDLE_VALUE
LEAF_NODE	155:11	155:11	7	INVALID_HANDLE_VALUE
LEAF_NODE	155:31	155:31	4	)
STATEMENTS	155:33	158:1	4	
LEAF_NODE	155:33	155:33	5	{
STATEMENTS	156:2	157:2	5	
EXPR_STATEMENT	156:2	156:50	6	TIFFErrorExt ( 0 , module , "%S: Cannot open" , name ) ;
EXPR	156:2	156:2	7	TIFFErrorExt ( 0 , module , "%S: Cannot open" , name )
FUNCTION_CALL	156:2	156:49	8	TIFFErrorExt ( 0 , module , "%S: Cannot open" , name )
CALLEE	156:2	156:2	9	TIFFErrorExt
LEAF_NODE	156:2	156:2	10	TIFFErrorExt
LEAF_NODE	156:14	156:14	9	(
ARGUMENT	156:15	156:15	9	0
FIELD	156:15	156:15	10	0
LEAF_NODE	156:15	156:15	11	0
LEAF_NODE	156:16	156:16	9	,
ARGUMENT	156:18	156:18	9	module
FIELD	156:18	156:18	10	module
LEAF_NODE	156:18	156:18	11	module
LEAF_NODE	156:24	156:24	9	,
ARGUMENT	156:26	156:26	9	"%S: Cannot open"
FIELD	156:26	156:26	10	"%S: Cannot open"
LEAF_NODE	156:26	156:26	11	"%S: Cannot open"
LEAF_NODE	156:43	156:43	9	,
ARGUMENT	156:45	156:45	9	name
FIELD	156:45	156:45	10	name
LEAF_NODE	156:45	156:45	11	name
LEAF_NODE	156:49	156:49	9	)
LEAF_NODE	156:50	156:50	7	;
JUMP_STATEMENT	157:2	157:20	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	157:2	157:2	7	return
LEAF_NODE	157:2	157:2	8	return
DESTINATION	157:9	157:9	7	( ( TIFF * ) 0 )
EXPR	157:9	157:19	8	( ( TIFF * ) 0 )
LEAF_NODE	157:9	157:9	9	(
LEAF_NODE	157:10	157:10	9	(
TYPE_NAME	157:11	157:11	9	TIFF
LEAF_NODE	157:11	157:11	10	TIFF
LEAF_NODE	157:16	157:16	9	*
LEAF_NODE	157:17	157:17	9	)
FIELD	157:18	157:18	9	0
LEAF_NODE	157:18	157:18	10	0
LEAF_NODE	157:19	157:19	9	)
LEAF_NODE	157:20	157:20	7	;
LEAF_NODE	158:1	158:1	5	}
EXPR_STATEMENT	160:1	160:14	3	mbname = NULL ;
EXPR	160:1	160:1	4	mbname = NULL
ASSIGN	160:1	160:10	5	mbname = NULL
LVAL	160:1	160:1	6	mbname
FIELD	160:1	160:1	7	mbname
LEAF_NODE	160:1	160:1	8	mbname
ASSIGN_OP	160:8	160:8	6	=
LEAF_NODE	160:8	160:8	7	=
RVAL	160:10	160:10	6	NULL
FIELD	160:10	160:10	7	NULL
LEAF_NODE	160:10	160:10	8	NULL
LEAF_NODE	160:14	160:14	4	;
EXPR_STATEMENT	161:1	161:71	3	mbsize = WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL ) ;
EXPR	161:1	161:1	4	mbsize = WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
ASSIGN	161:1	161:10	5	mbsize = WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
LVAL	161:1	161:1	6	mbsize
FIELD	161:1	161:1	7	mbsize
LEAF_NODE	161:1	161:1	8	mbsize
ASSIGN_OP	161:8	161:8	6	=
LEAF_NODE	161:8	161:8	7	=
RVAL	161:10	161:10	6	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
FUNCTION_CALL	161:10	161:70	7	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
CALLEE	161:10	161:10	8	WideCharToMultiByte
LEAF_NODE	161:10	161:10	9	WideCharToMultiByte
LEAF_NODE	161:29	161:29	8	(
ARGUMENT	161:30	161:30	8	CP_ACP
FIELD	161:30	161:30	9	CP_ACP
LEAF_NODE	161:30	161:30	10	CP_ACP
LEAF_NODE	161:36	161:36	8	,
ARGUMENT	161:38	161:38	8	0
FIELD	161:38	161:38	9	0
LEAF_NODE	161:38	161:38	10	0
LEAF_NODE	161:39	161:39	8	,
ARGUMENT	161:41	161:41	8	name
FIELD	161:41	161:41	9	name
LEAF_NODE	161:41	161:41	10	name
LEAF_NODE	161:45	161:45	8	,
ARGUMENT	161:47	161:47	8	- 1
UNARY_EXPR	161:47	161:48	9	- 1
UNARY_OPERATOR	161:47	161:47	10	-
LEAF_NODE	161:47	161:47	11	-
FIELD	161:48	161:48	10	1
LEAF_NODE	161:48	161:48	11	1
LEAF_NODE	161:49	161:49	8	,
ARGUMENT	161:51	161:51	8	NULL
FIELD	161:51	161:51	9	NULL
LEAF_NODE	161:51	161:51	10	NULL
LEAF_NODE	161:55	161:55	8	,
ARGUMENT	161:57	161:57	8	0
FIELD	161:57	161:57	9	0
LEAF_NODE	161:57	161:57	10	0
LEAF_NODE	161:58	161:58	8	,
ARGUMENT	161:60	161:60	8	NULL
FIELD	161:60	161:60	9	NULL
LEAF_NODE	161:60	161:60	10	NULL
LEAF_NODE	161:64	161:64	8	,
ARGUMENT	161:66	161:66	8	NULL
FIELD	161:66	161:66	9	NULL
LEAF_NODE	161:66	161:66	10	NULL
LEAF_NODE	161:70	161:70	8	)
LEAF_NODE	161:71	161:71	4	;
SELECTION	162:1	162:17	3	
KEYWORD	162:1	162:1	4	if
LEAF_NODE	162:1	162:1	5	if
LEAF_NODE	162:4	162:4	4	(
CONDITION	162:5	162:5	4	mbsize > 0
EXPR	162:5	162:14	5	mbsize > 0
FIELD	162:5	162:5	6	mbsize
LEAF_NODE	162:5	162:5	7	mbsize
REL_OPERATOR	162:12	162:12	6	>
LEAF_NODE	162:12	162:12	7	>
FIELD	162:14	162:14	6	0
LEAF_NODE	162:14	162:14	7	0
LEAF_NODE	162:15	162:15	4	)
STATEMENTS	162:17	172:1	4	
LEAF_NODE	162:17	162:17	5	{
STATEMENTS	163:2	170:2	5	
EXPR_STATEMENT	163:2	163:38	6	mbname = ( char * ) _TIFFmalloc ( mbsize ) ;
EXPR	163:2	163:2	7	mbname = ( char * ) _TIFFmalloc ( mbsize )
ASSIGN	163:2	163:11	8	mbname = ( char * ) _TIFFmalloc ( mbsize )
LVAL	163:2	163:2	9	mbname
FIELD	163:2	163:2	10	mbname
LEAF_NODE	163:2	163:2	11	mbname
ASSIGN_OP	163:9	163:9	9	=
LEAF_NODE	163:9	163:9	10	=
RVAL	163:11	163:19	9	( char * ) _TIFFmalloc ( mbsize )
LEAF_NODE	163:11	163:11	10	(
TYPE_NAME	163:12	163:12	10	char
LEAF_NODE	163:12	163:12	11	char
LEAF_NODE	163:17	163:17	10	*
LEAF_NODE	163:18	163:18	10	)
FUNCTION_CALL	163:19	163:37	10	_TIFFmalloc ( mbsize )
CALLEE	163:19	163:19	11	_TIFFmalloc
LEAF_NODE	163:19	163:19	12	_TIFFmalloc
LEAF_NODE	163:30	163:30	11	(
ARGUMENT	163:31	163:31	11	mbsize
FIELD	163:31	163:31	12	mbsize
LEAF_NODE	163:31	163:31	13	mbsize
LEAF_NODE	163:37	163:37	11	)
LEAF_NODE	163:38	163:38	7	;
SELECTION	164:2	164:15	6	
KEYWORD	164:2	164:2	7	if
LEAF_NODE	164:2	164:2	8	if
LEAF_NODE	164:5	164:5	7	(
CONDITION	164:6	164:6	7	! mbname
EXPR	164:6	164:6	8	! mbname
UNARY_EXPR	164:6	164:7	9	! mbname
UNARY_OPERATOR	164:6	164:6	10	!
LEAF_NODE	164:6	164:6	11	!
FIELD	164:7	164:7	10	mbname
LEAF_NODE	164:7	164:7	11	mbname
LEAF_NODE	164:13	164:13	7	)
STATEMENTS	164:15	168:2	7	
LEAF_NODE	164:15	164:15	8	{
STATEMENTS	165:3	167:3	8	
EXPR_STATEMENT	165:3	166:57	9	TIFFErrorExt ( 0 , module , "Can't allocate space for filename conversion buffer" ) ;
EXPR	165:3	165:3	10	TIFFErrorExt ( 0 , module , "Can't allocate space for filename conversion buffer" )
FUNCTION_CALL	165:3	166:56	11	TIFFErrorExt ( 0 , module , "Can't allocate space for filename conversion buffer" )
CALLEE	165:3	165:3	12	TIFFErrorExt
LEAF_NODE	165:3	165:3	13	TIFFErrorExt
LEAF_NODE	165:15	165:15	12	(
ARGUMENT	165:16	165:16	12	0
FIELD	165:16	165:16	13	0
LEAF_NODE	165:16	165:16	14	0
LEAF_NODE	165:17	165:17	12	,
ARGUMENT	165:19	165:19	12	module
FIELD	165:19	165:19	13	module
LEAF_NODE	165:19	165:19	14	module
LEAF_NODE	165:25	165:25	12	,
ARGUMENT	166:3	166:3	12	"Can't allocate space for filename conversion buffer"
FIELD	166:3	166:3	13	"Can't allocate space for filename conversion buffer"
LEAF_NODE	166:3	166:3	14	"Can't allocate space for filename conversion buffer"
LEAF_NODE	166:56	166:56	12	)
LEAF_NODE	166:57	166:57	10	;
JUMP_STATEMENT	167:3	167:20	9	return ( ( TIFF * ) 0 ) ;
KEYWORD	167:3	167:3	10	return
LEAF_NODE	167:3	167:3	11	return
DESTINATION	167:10	167:10	10	( ( TIFF * ) 0 )
EXPR	167:10	167:19	11	( ( TIFF * ) 0 )
LEAF_NODE	167:10	167:10	12	(
LEAF_NODE	167:11	167:11	12	(
TYPE_NAME	167:12	167:12	12	TIFF
LEAF_NODE	167:12	167:12	13	TIFF
LEAF_NODE	167:16	167:16	12	*
LEAF_NODE	167:17	167:17	12	)
FIELD	167:18	167:18	12	0
LEAF_NODE	167:18	167:18	13	0
LEAF_NODE	167:19	167:19	12	)
LEAF_NODE	167:20	167:20	10	;
LEAF_NODE	168:2	168:2	8	}
EXPR_STATEMENT	170:2	171:19	6	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , mbname , mbsize , NULL , NULL ) ;
EXPR	170:2	170:2	7	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , mbname , mbsize , NULL , NULL )
FUNCTION_CALL	170:2	171:18	8	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , mbname , mbsize , NULL , NULL )
CALLEE	170:2	170:2	9	WideCharToMultiByte
LEAF_NODE	170:2	170:2	10	WideCharToMultiByte
LEAF_NODE	170:21	170:21	9	(
ARGUMENT	170:22	170:22	9	CP_ACP
FIELD	170:22	170:22	10	CP_ACP
LEAF_NODE	170:22	170:22	11	CP_ACP
LEAF_NODE	170:28	170:28	9	,
ARGUMENT	170:30	170:30	9	0
FIELD	170:30	170:30	10	0
LEAF_NODE	170:30	170:30	11	0
LEAF_NODE	170:31	170:31	9	,
ARGUMENT	170:33	170:33	9	name
FIELD	170:33	170:33	10	name
LEAF_NODE	170:33	170:33	11	name
LEAF_NODE	170:37	170:37	9	,
ARGUMENT	170:39	170:39	9	- 1
UNARY_EXPR	170:39	170:40	10	- 1
UNARY_OPERATOR	170:39	170:39	11	-
LEAF_NODE	170:39	170:39	12	-
FIELD	170:40	170:40	11	1
LEAF_NODE	170:40	170:40	12	1
LEAF_NODE	170:41	170:41	9	,
ARGUMENT	170:43	170:43	9	mbname
FIELD	170:43	170:43	10	mbname
LEAF_NODE	170:43	170:43	11	mbname
LEAF_NODE	170:49	170:49	9	,
ARGUMENT	170:51	170:51	9	mbsize
FIELD	170:51	170:51	10	mbsize
LEAF_NODE	170:51	170:51	11	mbsize
LEAF_NODE	170:57	170:57	9	,
ARGUMENT	171:8	171:8	9	NULL
FIELD	171:8	171:8	10	NULL
LEAF_NODE	171:8	171:8	11	NULL
LEAF_NODE	171:12	171:12	9	,
ARGUMENT	171:14	171:14	9	NULL
FIELD	171:14	171:14	10	NULL
LEAF_NODE	171:14	171:14	11	NULL
LEAF_NODE	171:18	171:18	9	)
LEAF_NODE	171:19	171:19	7	;
LEAF_NODE	172:1	172:1	5	}
EXPR_STATEMENT	174:1	175:50	3	tif = TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode ) ;
EXPR	174:1	174:1	4	tif = TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
ASSIGN	174:1	174:7	5	tif = TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
LVAL	174:1	174:1	6	tif
FIELD	174:1	174:1	7	tif
LEAF_NODE	174:1	174:1	8	tif
ASSIGN_OP	174:5	174:5	6	=
LEAF_NODE	174:5	174:5	7	=
RVAL	174:7	174:7	6	TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
FUNCTION_CALL	174:7	175:49	7	TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
CALLEE	174:7	174:7	8	TIFFFdOpen
LEAF_NODE	174:7	174:7	9	TIFFFdOpen
LEAF_NODE	174:17	174:17	8	(
ARGUMENT	174:18	174:23	8	( int ) fd
LEAF_NODE	174:18	174:18	9	(
TYPE_NAME	174:19	174:19	9	int
LEAF_NODE	174:19	174:19	10	int
LEAF_NODE	174:22	174:22	9	)
FIELD	174:23	174:23	9	fd
LEAF_NODE	174:23	174:23	10	fd
LEAF_NODE	174:25	174:25	8	,
ARGUMENT	175:4	175:4	8	( mbname != NULL ) ? mbname : "<unknown>"
COND_EXPR	175:4	175:32	9	( mbname != NULL ) ? mbname : "<unknown>"
CONDITION	175:4	175:19	10	( mbname != NULL )
LEAF_NODE	175:4	175:4	11	(
FIELD	175:5	175:5	11	mbname
LEAF_NODE	175:5	175:5	12	mbname
EQ_OPERATOR	175:12	175:12	11	!=
LEAF_NODE	175:12	175:12	12	!=
FIELD	175:15	175:15	11	NULL
LEAF_NODE	175:15	175:15	12	NULL
LEAF_NODE	175:19	175:19	11	)
LEAF_NODE	175:21	175:21	10	?
EXPR	175:23	175:23	10	mbname
FIELD	175:23	175:23	11	mbname
LEAF_NODE	175:23	175:23	12	mbname
LEAF_NODE	175:30	175:30	10	:
FIELD	175:32	175:32	10	"<unknown>"
LEAF_NODE	175:32	175:32	11	"<unknown>"
LEAF_NODE	175:43	175:43	8	,
ARGUMENT	175:45	175:45	8	mode
FIELD	175:45	175:45	9	mode
LEAF_NODE	175:45	175:45	10	mode
LEAF_NODE	175:49	175:49	8	)
LEAF_NODE	175:50	175:50	4	;
SELECTION	176:1	177:2	3	
KEYWORD	176:1	176:1	4	if
LEAF_NODE	176:1	176:1	5	if
LEAF_NODE	176:3	176:3	4	(
CONDITION	176:4	176:4	4	! tif
EXPR	176:4	176:4	5	! tif
UNARY_EXPR	176:4	176:5	6	! tif
UNARY_OPERATOR	176:4	176:4	7	!
LEAF_NODE	176:4	176:4	8	!
FIELD	176:5	176:5	7	tif
LEAF_NODE	176:5	176:5	8	tif
LEAF_NODE	176:8	176:8	4	)
STATEMENTS	177:2	177:2	4	
EXPR_STATEMENT	177:2	177:17	5	CloseHandle ( fd ) ;
EXPR	177:2	177:2	6	CloseHandle ( fd )
FUNCTION_CALL	177:2	177:16	7	CloseHandle ( fd )
CALLEE	177:2	177:2	8	CloseHandle
LEAF_NODE	177:2	177:2	9	CloseHandle
LEAF_NODE	177:13	177:13	8	(
ARGUMENT	177:14	177:14	8	fd
FIELD	177:14	177:14	9	fd
LEAF_NODE	177:14	177:14	10	fd
LEAF_NODE	177:16	177:16	8	)
LEAF_NODE	177:17	177:17	6	;
EXPR_STATEMENT	179:1	179:18	3	_TIFFfree ( mbname ) ;
EXPR	179:1	179:1	4	_TIFFfree ( mbname )
FUNCTION_CALL	179:1	179:17	5	_TIFFfree ( mbname )
CALLEE	179:1	179:1	6	_TIFFfree
LEAF_NODE	179:1	179:1	7	_TIFFfree
LEAF_NODE	179:10	179:10	6	(
ARGUMENT	179:11	179:11	6	mbname
FIELD	179:11	179:11	7	mbname
LEAF_NODE	179:11	179:11	8	mbname
LEAF_NODE	179:17	179:17	6	)
LEAF_NODE	179:18	179:18	4	;
JUMP_STATEMENT	181:1	181:11	3	return tif ;
KEYWORD	181:1	181:1	4	return
LEAF_NODE	181:1	181:1	5	return
DESTINATION	181:8	181:8	4	tif
EXPR	181:8	181:8	5	tif
FIELD	181:8	181:8	6	tif
LEAF_NODE	181:8	181:8	7	tif
LEAF_NODE	181:11	181:11	4	;
LEAF_NODE	182:0	182:0	2	}
FUNCTION_DEF	184:0	228:0	1	
RETURN_TYPE	184:0	184:7	2	static void
LEAF_NODE	184:0	184:0	3	static
TYPE_NAME	184:7	184:7	3	void
LEAF_NODE	184:7	184:7	4	void
FUNCTION_NAME	185:0	185:0	2	Win32WarningHandler
LEAF_NODE	185:0	185:0	3	Win32WarningHandler
PARAMETER_LIST	185:19	185:67	2	( const char * module , const char * fmt , va_list ap )
LEAF_NODE	185:19	185:19	3	(
PARAMETER_DECL	185:20	185:32	3	const char * module
TYPE	185:20	185:30	4	const char *
TYPE_NAME	185:20	185:26	5	const char
LEAF_NODE	185:20	185:20	6	const
LEAF_NODE	185:26	185:26	6	char
POINTER	185:30	185:30	5	*
LEAF_NODE	185:30	185:30	6	*
NAME	185:32	185:32	4	module
LEAF_NODE	185:32	185:32	5	module
LEAF_NODE	185:38	185:38	3	,
PARAMETER_DECL	185:40	185:52	3	const char * fmt
TYPE	185:40	185:50	4	const char *
TYPE_NAME	185:40	185:46	5	const char
LEAF_NODE	185:40	185:40	6	const
LEAF_NODE	185:46	185:46	6	char
POINTER	185:50	185:50	5	*
LEAF_NODE	185:50	185:50	6	*
NAME	185:52	185:52	4	fmt
LEAF_NODE	185:52	185:52	5	fmt
LEAF_NODE	185:55	185:55	3	,
PARAMETER_DECL	185:57	185:65	3	va_list ap
TYPE	185:57	185:57	4	va_list
TYPE_NAME	185:57	185:57	5	va_list
LEAF_NODE	185:57	185:57	6	va_list
NAME	185:65	185:65	4	ap
LEAF_NODE	185:65	185:65	5	ap
LEAF_NODE	185:67	185:67	3	)
LEAF_NODE	186:0	186:0	2	{
STATEMENTS	189:4	227:4	2	
SIMPLE_DECL	189:4	189:23	3	size_t nWideLen ; nWideLen = 0 ;
VAR_DECL	189:4	189:11	4	size_t nWideLen ; nWideLen = 0
TYPE	189:4	189:4	5	size_t
TYPE_NAME	189:4	189:4	6	size_t
LEAF_NODE	189:4	189:4	7	size_t
NAME	189:11	189:11	5	nWideLen
LEAF_NODE	189:11	189:11	6	nWideLen
LEAF_NODE	0:0	0:0	5	;
INIT	189:11	189:11	5	nWideLen = 0
ASSIGN	189:11	189:22	6	nWideLen = 0
LVAL	189:11	189:11	7	nWideLen
NAME	189:11	189:11	8	nWideLen
LEAF_NODE	189:11	189:11	9	nWideLen
ASSIGN_OP	189:20	189:20	7	=
LEAF_NODE	189:20	189:20	8	=
RVAL	189:22	189:22	7	0
FIELD	189:22	189:22	8	0
LEAF_NODE	189:22	189:22	9	0
LEAF_NODE	189:23	189:23	4	;
SIMPLE_DECL	190:4	190:29	3	LPTSTR szWideTitle ; szWideTitle = NULL ;
VAR_DECL	190:4	190:11	4	LPTSTR szWideTitle ; szWideTitle = NULL
TYPE	190:4	190:4	5	LPTSTR
TYPE_NAME	190:4	190:4	6	LPTSTR
LEAF_NODE	190:4	190:4	7	LPTSTR
NAME	190:11	190:11	5	szWideTitle
LEAF_NODE	190:11	190:11	6	szWideTitle
LEAF_NODE	0:0	0:0	5	;
INIT	190:11	190:11	5	szWideTitle = NULL
ASSIGN	190:11	190:25	6	szWideTitle = NULL
LVAL	190:11	190:11	7	szWideTitle
NAME	190:11	190:11	8	szWideTitle
LEAF_NODE	190:11	190:11	9	szWideTitle
ASSIGN_OP	190:23	190:23	7	=
LEAF_NODE	190:23	190:23	8	=
RVAL	190:25	190:25	7	NULL
FIELD	190:25	190:25	8	NULL
LEAF_NODE	190:25	190:25	9	NULL
LEAF_NODE	190:29	190:29	4	;
SIMPLE_DECL	191:4	191:27	3	LPTSTR szWideMsg ; szWideMsg = NULL ;
VAR_DECL	191:4	191:11	4	LPTSTR szWideMsg ; szWideMsg = NULL
TYPE	191:4	191:4	5	LPTSTR
TYPE_NAME	191:4	191:4	6	LPTSTR
LEAF_NODE	191:4	191:4	7	LPTSTR
NAME	191:11	191:11	5	szWideMsg
LEAF_NODE	191:11	191:11	6	szWideMsg
LEAF_NODE	0:0	0:0	5	;
INIT	191:11	191:11	5	szWideMsg = NULL
ASSIGN	191:11	191:23	6	szWideMsg = NULL
LVAL	191:11	191:11	7	szWideMsg
NAME	191:11	191:11	8	szWideMsg
LEAF_NODE	191:11	191:11	9	szWideMsg
ASSIGN_OP	191:21	191:21	7	=
LEAF_NODE	191:21	191:21	8	=
RVAL	191:23	191:23	7	NULL
FIELD	191:23	191:23	8	NULL
LEAF_NODE	191:23	191:23	9	NULL
LEAF_NODE	191:27	191:27	4	;
SIMPLE_DECL	193:1	193:14	3	LPSTR szTitle ;
VAR_DECL	193:1	193:7	4	LPSTR szTitle
TYPE	193:1	193:1	5	LPSTR
TYPE_NAME	193:1	193:1	6	LPSTR
LEAF_NODE	193:1	193:1	7	LPSTR
NAME	193:7	193:7	5	szTitle
LEAF_NODE	193:7	193:7	6	szTitle
LEAF_NODE	193:14	193:14	4	;
SIMPLE_DECL	194:1	194:12	3	LPSTR szTmp ;
VAR_DECL	194:1	194:7	4	LPSTR szTmp
TYPE	194:1	194:1	5	LPSTR
TYPE_NAME	194:1	194:1	6	LPSTR
LEAF_NODE	194:1	194:1	7	LPSTR
NAME	194:7	194:7	5	szTmp
LEAF_NODE	194:7	194:7	6	szTmp
LEAF_NODE	194:12	194:12	4	;
SIMPLE_DECL	195:1	195:34	3	LPCSTR szTitleText ; szTitleText = "%s Warning" ;
VAR_DECL	195:1	195:8	4	LPCSTR szTitleText ; szTitleText = "%s Warning"
TYPE	195:1	195:1	5	LPCSTR
TYPE_NAME	195:1	195:1	6	LPCSTR
LEAF_NODE	195:1	195:1	7	LPCSTR
NAME	195:8	195:8	5	szTitleText
LEAF_NODE	195:8	195:8	6	szTitleText
LEAF_NODE	0:0	0:0	5	;
INIT	195:8	195:8	5	szTitleText = "%s Warning"
ASSIGN	195:8	195:22	6	szTitleText = "%s Warning"
LVAL	195:8	195:8	7	szTitleText
NAME	195:8	195:8	8	szTitleText
LEAF_NODE	195:8	195:8	9	szTitleText
ASSIGN_OP	195:20	195:20	7	=
LEAF_NODE	195:20	195:20	8	=
RVAL	195:22	195:22	7	"%s Warning"
FIELD	195:22	195:22	8	"%s Warning"
LEAF_NODE	195:22	195:22	9	"%s Warning"
LEAF_NODE	195:34	195:34	4	;
SIMPLE_DECL	196:1	196:35	3	LPCSTR szDefaultModule ; szDefaultModule = "LIBTIFF" ;
VAR_DECL	196:1	196:8	4	LPCSTR szDefaultModule ; szDefaultModule = "LIBTIFF"
TYPE	196:1	196:1	5	LPCSTR
TYPE_NAME	196:1	196:1	6	LPCSTR
LEAF_NODE	196:1	196:1	7	LPCSTR
NAME	196:8	196:8	5	szDefaultModule
LEAF_NODE	196:8	196:8	6	szDefaultModule
LEAF_NODE	0:0	0:0	5	;
INIT	196:8	196:8	5	szDefaultModule = "LIBTIFF"
ASSIGN	196:8	196:26	6	szDefaultModule = "LIBTIFF"
LVAL	196:8	196:8	7	szDefaultModule
NAME	196:8	196:8	8	szDefaultModule
LEAF_NODE	196:8	196:8	9	szDefaultModule
ASSIGN_OP	196:24	196:24	7	=
LEAF_NODE	196:24	196:24	8	=
RVAL	196:26	196:26	7	"LIBTIFF"
FIELD	196:26	196:26	8	"LIBTIFF"
LEAF_NODE	196:26	196:26	9	"LIBTIFF"
LEAF_NODE	196:35	196:35	4	;
SIMPLE_DECL	197:1	197:19	3	LPCSTR szTmpModule ;
VAR_DECL	197:1	197:8	4	LPCSTR szTmpModule
TYPE	197:1	197:1	5	LPCSTR
TYPE_NAME	197:1	197:1	6	LPCSTR
LEAF_NODE	197:1	197:1	7	LPCSTR
NAME	197:8	197:8	5	szTmpModule
LEAF_NODE	197:8	197:8	6	szTmpModule
LEAF_NODE	197:19	197:19	4	;
EXPR_STATEMENT	199:1	199:58	3	szTmpModule = ( module == NULL ) ? szDefaultModule : module ;
EXPR	199:1	199:1	4	szTmpModule = ( module == NULL ) ? szDefaultModule : module
ASSIGN	199:1	199:15	5	szTmpModule = ( module == NULL ) ? szDefaultModule : module
LVAL	199:1	199:1	6	szTmpModule
FIELD	199:1	199:1	7	szTmpModule
LEAF_NODE	199:1	199:1	8	szTmpModule
ASSIGN_OP	199:13	199:13	6	=
LEAF_NODE	199:13	199:13	7	=
RVAL	199:15	199:15	6	( module == NULL ) ? szDefaultModule : module
COND_EXPR	199:15	199:52	7	( module == NULL ) ? szDefaultModule : module
CONDITION	199:15	199:30	8	( module == NULL )
LEAF_NODE	199:15	199:15	9	(
FIELD	199:16	199:16	9	module
LEAF_NODE	199:16	199:16	10	module
EQ_OPERATOR	199:23	199:23	9	==
LEAF_NODE	199:23	199:23	10	==
FIELD	199:26	199:26	9	NULL
LEAF_NODE	199:26	199:26	10	NULL
LEAF_NODE	199:30	199:30	9	)
LEAF_NODE	199:32	199:32	8	?
EXPR	199:34	199:34	8	szDefaultModule
FIELD	199:34	199:34	9	szDefaultModule
LEAF_NODE	199:34	199:34	10	szDefaultModule
LEAF_NODE	199:50	199:50	8	:
FIELD	199:52	199:52	8	module
LEAF_NODE	199:52	199:52	9	module
LEAF_NODE	199:58	199:58	4	;
SELECTION	200:1	203:2	3	
KEYWORD	200:1	200:1	4	if
LEAF_NODE	200:1	200:1	5	if
LEAF_NODE	200:4	200:4	4	(
CONDITION	200:5	200:5	4	( szTitle = ( LPSTR ) LocalAlloc ( LMEM_FIXED , ( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char ) ) ) == NULL
EXPR	200:5	202:49	5	( szTitle = ( LPSTR ) LocalAlloc ( LMEM_FIXED , ( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char ) ) ) == NULL
LEAF_NODE	200:5	200:5	6	(
ASSIGN	200:6	200:16	6	szTitle = ( LPSTR ) LocalAlloc ( LMEM_FIXED , ( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char ) )
LVAL	200:6	200:6	7	szTitle
FIELD	200:6	200:6	8	szTitle
LEAF_NODE	200:6	200:6	9	szTitle
ASSIGN_OP	200:14	200:14	7	=
LEAF_NODE	200:14	200:14	8	=
RVAL	200:16	200:23	7	( LPSTR ) LocalAlloc ( LMEM_FIXED , ( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char ) )
LEAF_NODE	200:16	200:16	8	(
TYPE_NAME	200:17	200:17	8	LPSTR
LEAF_NODE	200:17	200:17	9	LPSTR
LEAF_NODE	200:22	200:22	8	)
FUNCTION_CALL	200:23	202:43	8	LocalAlloc ( LMEM_FIXED , ( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char ) )
CALLEE	200:23	200:23	9	LocalAlloc
LEAF_NODE	200:23	200:23	10	LocalAlloc
LEAF_NODE	200:33	200:33	9	(
ARGUMENT	200:34	200:34	9	LMEM_FIXED
FIELD	200:34	200:34	10	LMEM_FIXED
LEAF_NODE	200:34	200:34	11	LMEM_FIXED
LEAF_NODE	200:44	200:44	9	,
ARGUMENT	201:8	202:31	9	( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char )
LEAF_NODE	201:8	201:8	10	(
FUNCTION_CALL	201:9	201:27	10	strlen ( szTmpModule )
CALLEE	201:9	201:9	11	strlen
LEAF_NODE	201:9	201:9	12	strlen
LEAF_NODE	201:15	201:15	11	(
ARGUMENT	201:16	201:16	11	szTmpModule
FIELD	201:16	201:16	12	szTmpModule
LEAF_NODE	201:16	201:16	13	szTmpModule
LEAF_NODE	201:27	201:27	11	)
LEAF_NODE	201:29	201:29	10	+
FUNCTION_CALL	201:31	201:49	10	strlen ( szTitleText )
CALLEE	201:31	201:31	11	strlen
LEAF_NODE	201:31	201:31	12	strlen
LEAF_NODE	201:37	201:37	11	(
ARGUMENT	201:38	201:38	11	szTitleText
FIELD	201:38	201:38	12	szTitleText
LEAF_NODE	201:38	201:38	13	szTitleText
LEAF_NODE	201:49	201:49	11	)
LEAF_NODE	202:8	202:8	10	+
FUNCTION_CALL	202:10	202:20	10	strlen ( fmt )
CALLEE	202:10	202:10	11	strlen
LEAF_NODE	202:10	202:10	12	strlen
LEAF_NODE	202:16	202:16	11	(
ARGUMENT	202:17	202:17	11	fmt
FIELD	202:17	202:17	12	fmt
LEAF_NODE	202:17	202:17	13	fmt
LEAF_NODE	202:20	202:20	11	)
LEAF_NODE	202:22	202:22	10	+
FIELD	202:24	202:24	10	128
LEAF_NODE	202:24	202:24	11	128
LEAF_NODE	202:27	202:27	10	)
LEAF_NODE	202:29	202:29	10	*
FUNCTION_CALL	202:31	202:42	10	sizeof ( char )
CALLEE	202:31	202:31	11	sizeof
LEAF_NODE	202:31	202:31	12	sizeof
LEAF_NODE	202:37	202:37	11	(
ARGUMENT	202:38	202:38	11	char
FIELD	202:38	202:38	12	char
LEAF_NODE	202:38	202:38	13	char
LEAF_NODE	202:42	202:42	11	)
LEAF_NODE	202:43	202:43	9	)
LEAF_NODE	202:44	202:44	6	)
EQ_OPERATOR	202:46	202:46	6	==
LEAF_NODE	202:46	202:46	7	==
FIELD	202:49	202:49	6	NULL
LEAF_NODE	202:49	202:49	7	NULL
LEAF_NODE	202:53	202:53	4	)
STATEMENTS	203:2	203:2	4	
JUMP_STATEMENT	203:2	203:8	5	return DESTINATION ;
KEYWORD	203:2	203:2	6	return
LEAF_NODE	203:2	203:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	203:8	203:8	6	;
EXPR_STATEMENT	205:1	205:43	3	sprintf ( szTitle , szTitleText , szTmpModule ) ;
EXPR	205:1	205:1	4	sprintf ( szTitle , szTitleText , szTmpModule )
FUNCTION_CALL	205:1	205:42	5	sprintf ( szTitle , szTitleText , szTmpModule )
CALLEE	205:1	205:1	6	sprintf
LEAF_NODE	205:1	205:1	7	sprintf
LEAF_NODE	205:8	205:8	6	(
ARGUMENT	205:9	205:9	6	szTitle
FIELD	205:9	205:9	7	szTitle
LEAF_NODE	205:9	205:9	8	szTitle
LEAF_NODE	205:16	205:16	6	,
ARGUMENT	205:18	205:18	6	szTitleText
FIELD	205:18	205:18	7	szTitleText
LEAF_NODE	205:18	205:18	8	szTitleText
LEAF_NODE	205:29	205:29	6	,
ARGUMENT	205:31	205:31	6	szTmpModule
FIELD	205:31	205:31	7	szTmpModule
LEAF_NODE	205:31	205:31	8	szTmpModule
LEAF_NODE	205:42	205:42	6	)
LEAF_NODE	205:43	205:43	4	;
EXPR_STATEMENT	206:1	206:55	3	szTmp = szTitle + ( strlen ( szTitle ) + 2 ) * sizeof ( char ) ;
EXPR	206:1	206:1	4	szTmp = szTitle + ( strlen ( szTitle ) + 2 ) * sizeof ( char )
ASSIGN	206:1	206:9	5	szTmp = szTitle + ( strlen ( szTitle ) + 2 ) * sizeof ( char )
LVAL	206:1	206:1	6	szTmp
FIELD	206:1	206:1	7	szTmp
LEAF_NODE	206:1	206:1	8	szTmp
ASSIGN_OP	206:7	206:7	6	=
LEAF_NODE	206:7	206:7	7	=
RVAL	206:9	206:43	6	szTitle + ( strlen ( szTitle ) + 2 ) * sizeof ( char )
FIELD	206:9	206:9	7	szTitle
LEAF_NODE	206:9	206:9	8	szTitle
LEAF_NODE	206:17	206:17	7	+
LEAF_NODE	206:19	206:19	7	(
FUNCTION_CALL	206:20	206:34	7	strlen ( szTitle )
CALLEE	206:20	206:20	8	strlen
LEAF_NODE	206:20	206:20	9	strlen
LEAF_NODE	206:26	206:26	8	(
ARGUMENT	206:27	206:27	8	szTitle
FIELD	206:27	206:27	9	szTitle
LEAF_NODE	206:27	206:27	10	szTitle
LEAF_NODE	206:34	206:34	8	)
LEAF_NODE	206:36	206:36	7	+
FIELD	206:38	206:38	7	2
LEAF_NODE	206:38	206:38	8	2
LEAF_NODE	206:39	206:39	7	)
LEAF_NODE	206:41	206:41	7	*
FUNCTION_CALL	206:43	206:54	7	sizeof ( char )
CALLEE	206:43	206:43	8	sizeof
LEAF_NODE	206:43	206:43	9	sizeof
LEAF_NODE	206:49	206:49	8	(
ARGUMENT	206:50	206:50	8	char
FIELD	206:50	206:50	9	char
LEAF_NODE	206:50	206:50	10	char
LEAF_NODE	206:54	206:54	8	)
LEAF_NODE	206:55	206:55	4	;
EXPR_STATEMENT	207:1	207:25	3	vsprintf ( szTmp , fmt , ap ) ;
EXPR	207:1	207:1	4	vsprintf ( szTmp , fmt , ap )
FUNCTION_CALL	207:1	207:24	5	vsprintf ( szTmp , fmt , ap )
CALLEE	207:1	207:1	6	vsprintf
LEAF_NODE	207:1	207:1	7	vsprintf
LEAF_NODE	207:9	207:9	6	(
ARGUMENT	207:10	207:10	6	szTmp
FIELD	207:10	207:10	7	szTmp
LEAF_NODE	207:10	207:10	8	szTmp
LEAF_NODE	207:15	207:15	6	,
ARGUMENT	207:17	207:17	6	fmt
FIELD	207:17	207:17	7	fmt
LEAF_NODE	207:17	207:17	8	fmt
LEAF_NODE	207:20	207:20	6	,
ARGUMENT	207:22	207:22	6	ap
FIELD	207:22	207:22	7	ap
LEAF_NODE	207:22	207:22	8	ap
LEAF_NODE	207:24	207:24	6	)
LEAF_NODE	207:25	207:25	4	;
EXPR_STATEMENT	211:4	211:67	3	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , NULL , 0 ) ;
EXPR	211:4	211:4	4	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , NULL , 0 )
ASSIGN	211:4	211:15	5	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , NULL , 0 )
LVAL	211:4	211:4	6	nWideLen
FIELD	211:4	211:4	7	nWideLen
LEAF_NODE	211:4	211:4	8	nWideLen
ASSIGN_OP	211:13	211:13	6	=
LEAF_NODE	211:13	211:13	7	=
RVAL	211:15	211:15	6	MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , NULL , 0 )
FUNCTION_CALL	211:15	211:66	7	MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , NULL , 0 )
CALLEE	211:15	211:15	8	MultiByteToWideChar
LEAF_NODE	211:15	211:15	9	MultiByteToWideChar
LEAF_NODE	211:34	211:34	8	(
ARGUMENT	211:35	211:35	8	CP_ACP
FIELD	211:35	211:35	9	CP_ACP
LEAF_NODE	211:35	211:35	10	CP_ACP
LEAF_NODE	211:41	211:41	8	,
ARGUMENT	211:43	211:43	8	0
FIELD	211:43	211:43	9	0
LEAF_NODE	211:43	211:43	10	0
LEAF_NODE	211:44	211:44	8	,
ARGUMENT	211:46	211:46	8	szTitle
FIELD	211:46	211:46	9	szTitle
LEAF_NODE	211:46	211:46	10	szTitle
LEAF_NODE	211:53	211:53	8	,
ARGUMENT	211:55	211:55	8	- 1
UNARY_EXPR	211:55	211:56	9	- 1
UNARY_OPERATOR	211:55	211:55	10	-
LEAF_NODE	211:55	211:55	11	-
FIELD	211:56	211:56	10	1
LEAF_NODE	211:56	211:56	11	1
LEAF_NODE	211:57	211:57	8	,
ARGUMENT	211:59	211:59	8	NULL
FIELD	211:59	211:59	9	NULL
LEAF_NODE	211:59	211:59	10	NULL
LEAF_NODE	211:63	211:63	8	,
ARGUMENT	211:65	211:65	8	0
FIELD	211:65	211:65	9	0
LEAF_NODE	211:65	211:65	10	0
LEAF_NODE	211:66	211:66	8	)
LEAF_NODE	211:67	211:67	4	;
EXPR_STATEMENT	212:4	212:62	3	szWideTitle = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen ) ;
EXPR	212:4	212:4	4	szWideTitle = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
ASSIGN	212:4	212:18	5	szWideTitle = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
LVAL	212:4	212:4	6	szWideTitle
FIELD	212:4	212:4	7	szWideTitle
LEAF_NODE	212:4	212:4	8	szWideTitle
ASSIGN_OP	212:16	212:16	6	=
LEAF_NODE	212:16	212:16	7	=
RVAL	212:18	212:28	6	( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
LEAF_NODE	212:18	212:18	7	(
TYPE_NAME	212:19	212:19	7	wchar_t
LEAF_NODE	212:19	212:19	8	wchar_t
LEAF_NODE	212:26	212:26	7	*
LEAF_NODE	212:27	212:27	7	)
FUNCTION_CALL	212:28	212:61	7	malloc ( sizeof ( wchar_t ) * nWideLen )
CALLEE	212:28	212:28	8	malloc
LEAF_NODE	212:28	212:28	9	malloc
LEAF_NODE	212:34	212:34	8	(
ARGUMENT	212:35	212:53	8	sizeof ( wchar_t ) * nWideLen
FUNCTION_CALL	212:35	212:49	9	sizeof ( wchar_t )
CALLEE	212:35	212:35	10	sizeof
LEAF_NODE	212:35	212:35	11	sizeof
LEAF_NODE	212:41	212:41	10	(
ARGUMENT	212:42	212:42	10	wchar_t
FIELD	212:42	212:42	11	wchar_t
LEAF_NODE	212:42	212:42	12	wchar_t
LEAF_NODE	212:49	212:49	10	)
LEAF_NODE	212:51	212:51	9	*
FIELD	212:53	212:53	9	nWideLen
LEAF_NODE	212:53	212:53	10	nWideLen
LEAF_NODE	212:61	212:61	8	)
LEAF_NODE	212:62	212:62	4	;
EXPR_STATEMENT	213:4	213:70	3	MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , szWideTitle , nWideLen ) ;
EXPR	213:4	213:4	4	MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , szWideTitle , nWideLen )
FUNCTION_CALL	213:4	213:69	5	MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , szWideTitle , nWideLen )
CALLEE	213:4	213:4	6	MultiByteToWideChar
LEAF_NODE	213:4	213:4	7	MultiByteToWideChar
LEAF_NODE	213:23	213:23	6	(
ARGUMENT	213:24	213:24	6	CP_ACP
FIELD	213:24	213:24	7	CP_ACP
LEAF_NODE	213:24	213:24	8	CP_ACP
LEAF_NODE	213:30	213:30	6	,
ARGUMENT	213:32	213:32	6	0
FIELD	213:32	213:32	7	0
LEAF_NODE	213:32	213:32	8	0
LEAF_NODE	213:33	213:33	6	,
ARGUMENT	213:35	213:35	6	szTitle
FIELD	213:35	213:35	7	szTitle
LEAF_NODE	213:35	213:35	8	szTitle
LEAF_NODE	213:42	213:42	6	,
ARGUMENT	213:44	213:44	6	- 1
UNARY_EXPR	213:44	213:45	7	- 1
UNARY_OPERATOR	213:44	213:44	8	-
LEAF_NODE	213:44	213:44	9	-
FIELD	213:45	213:45	8	1
LEAF_NODE	213:45	213:45	9	1
LEAF_NODE	213:46	213:46	6	,
ARGUMENT	213:48	213:48	6	szWideTitle
FIELD	213:48	213:48	7	szWideTitle
LEAF_NODE	213:48	213:48	8	szWideTitle
LEAF_NODE	213:59	213:59	6	,
ARGUMENT	213:61	213:61	6	nWideLen
FIELD	213:61	213:61	7	nWideLen
LEAF_NODE	213:61	213:61	8	nWideLen
LEAF_NODE	213:69	213:69	6	)
LEAF_NODE	213:70	213:70	4	;
EXPR_STATEMENT	215:4	215:65	3	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , NULL , 0 ) ;
EXPR	215:4	215:4	4	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , NULL , 0 )
ASSIGN	215:4	215:15	5	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , NULL , 0 )
LVAL	215:4	215:4	6	nWideLen
FIELD	215:4	215:4	7	nWideLen
LEAF_NODE	215:4	215:4	8	nWideLen
ASSIGN_OP	215:13	215:13	6	=
LEAF_NODE	215:13	215:13	7	=
RVAL	215:15	215:15	6	MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , NULL , 0 )
FUNCTION_CALL	215:15	215:64	7	MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , NULL , 0 )
CALLEE	215:15	215:15	8	MultiByteToWideChar
LEAF_NODE	215:15	215:15	9	MultiByteToWideChar
LEAF_NODE	215:34	215:34	8	(
ARGUMENT	215:35	215:35	8	CP_ACP
FIELD	215:35	215:35	9	CP_ACP
LEAF_NODE	215:35	215:35	10	CP_ACP
LEAF_NODE	215:41	215:41	8	,
ARGUMENT	215:43	215:43	8	0
FIELD	215:43	215:43	9	0
LEAF_NODE	215:43	215:43	10	0
LEAF_NODE	215:44	215:44	8	,
ARGUMENT	215:46	215:46	8	szTmp
FIELD	215:46	215:46	9	szTmp
LEAF_NODE	215:46	215:46	10	szTmp
LEAF_NODE	215:51	215:51	8	,
ARGUMENT	215:53	215:53	8	- 1
UNARY_EXPR	215:53	215:54	9	- 1
UNARY_OPERATOR	215:53	215:53	10	-
LEAF_NODE	215:53	215:53	11	-
FIELD	215:54	215:54	10	1
LEAF_NODE	215:54	215:54	11	1
LEAF_NODE	215:55	215:55	8	,
ARGUMENT	215:57	215:57	8	NULL
FIELD	215:57	215:57	9	NULL
LEAF_NODE	215:57	215:57	10	NULL
LEAF_NODE	215:61	215:61	8	,
ARGUMENT	215:63	215:63	8	0
FIELD	215:63	215:63	9	0
LEAF_NODE	215:63	215:63	10	0
LEAF_NODE	215:64	215:64	8	)
LEAF_NODE	215:65	215:65	4	;
EXPR_STATEMENT	216:4	216:60	3	szWideMsg = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen ) ;
EXPR	216:4	216:4	4	szWideMsg = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
ASSIGN	216:4	216:16	5	szWideMsg = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
LVAL	216:4	216:4	6	szWideMsg
FIELD	216:4	216:4	7	szWideMsg
LEAF_NODE	216:4	216:4	8	szWideMsg
ASSIGN_OP	216:14	216:14	6	=
LEAF_NODE	216:14	216:14	7	=
RVAL	216:16	216:26	6	( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
LEAF_NODE	216:16	216:16	7	(
TYPE_NAME	216:17	216:17	7	wchar_t
LEAF_NODE	216:17	216:17	8	wchar_t
LEAF_NODE	216:24	216:24	7	*
LEAF_NODE	216:25	216:25	7	)
FUNCTION_CALL	216:26	216:59	7	malloc ( sizeof ( wchar_t ) * nWideLen )
CALLEE	216:26	216:26	8	malloc
LEAF_NODE	216:26	216:26	9	malloc
LEAF_NODE	216:32	216:32	8	(
ARGUMENT	216:33	216:51	8	sizeof ( wchar_t ) * nWideLen
FUNCTION_CALL	216:33	216:47	9	sizeof ( wchar_t )
CALLEE	216:33	216:33	10	sizeof
LEAF_NODE	216:33	216:33	11	sizeof
LEAF_NODE	216:39	216:39	10	(
ARGUMENT	216:40	216:40	10	wchar_t
FIELD	216:40	216:40	11	wchar_t
LEAF_NODE	216:40	216:40	12	wchar_t
LEAF_NODE	216:47	216:47	10	)
LEAF_NODE	216:49	216:49	9	*
FIELD	216:51	216:51	9	nWideLen
LEAF_NODE	216:51	216:51	10	nWideLen
LEAF_NODE	216:59	216:59	8	)
LEAF_NODE	216:60	216:60	4	;
EXPR_STATEMENT	217:4	217:66	3	MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , szWideMsg , nWideLen ) ;
EXPR	217:4	217:4	4	MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , szWideMsg , nWideLen )
FUNCTION_CALL	217:4	217:65	5	MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , szWideMsg , nWideLen )
CALLEE	217:4	217:4	6	MultiByteToWideChar
LEAF_NODE	217:4	217:4	7	MultiByteToWideChar
LEAF_NODE	217:23	217:23	6	(
ARGUMENT	217:24	217:24	6	CP_ACP
FIELD	217:24	217:24	7	CP_ACP
LEAF_NODE	217:24	217:24	8	CP_ACP
LEAF_NODE	217:30	217:30	6	,
ARGUMENT	217:32	217:32	6	0
FIELD	217:32	217:32	7	0
LEAF_NODE	217:32	217:32	8	0
LEAF_NODE	217:33	217:33	6	,
ARGUMENT	217:35	217:35	6	szTmp
FIELD	217:35	217:35	7	szTmp
LEAF_NODE	217:35	217:35	8	szTmp
LEAF_NODE	217:40	217:40	6	,
ARGUMENT	217:42	217:42	6	- 1
UNARY_EXPR	217:42	217:43	7	- 1
UNARY_OPERATOR	217:42	217:42	8	-
LEAF_NODE	217:42	217:42	9	-
FIELD	217:43	217:43	8	1
LEAF_NODE	217:43	217:43	9	1
LEAF_NODE	217:44	217:44	6	,
ARGUMENT	217:46	217:46	6	szWideMsg
FIELD	217:46	217:46	7	szWideMsg
LEAF_NODE	217:46	217:46	8	szWideMsg
LEAF_NODE	217:55	217:55	6	,
ARGUMENT	217:57	217:57	6	nWideLen
FIELD	217:57	217:57	7	nWideLen
LEAF_NODE	217:57	217:57	8	nWideLen
LEAF_NODE	217:65	217:65	6	)
LEAF_NODE	217:66	217:66	4	;
EXPR_STATEMENT	221:4	221:78	3	MessageBox ( GetFocus ( ) , szWideMsg , szWideTitle , MB_OK | MB_ICONEXCLAMATION ) ;
EXPR	221:4	221:4	4	MessageBox ( GetFocus ( ) , szWideMsg , szWideTitle , MB_OK | MB_ICONEXCLAMATION )
FUNCTION_CALL	221:4	221:77	5	MessageBox ( GetFocus ( ) , szWideMsg , szWideTitle , MB_OK | MB_ICONEXCLAMATION )
CALLEE	221:4	221:4	6	MessageBox
LEAF_NODE	221:4	221:4	7	MessageBox
LEAF_NODE	221:14	221:14	6	(
ARGUMENT	221:15	221:15	6	GetFocus ( )
FUNCTION_CALL	221:15	221:24	7	GetFocus ( )
CALLEE	221:15	221:15	8	GetFocus
LEAF_NODE	221:15	221:15	9	GetFocus
LEAF_NODE	221:23	221:23	8	(
LEAF_NODE	221:24	221:24	8	)
LEAF_NODE	221:25	221:25	6	,
ARGUMENT	221:27	221:27	6	szWideMsg
FIELD	221:27	221:27	7	szWideMsg
LEAF_NODE	221:27	221:27	8	szWideMsg
LEAF_NODE	221:36	221:36	6	,
ARGUMENT	221:38	221:38	6	szWideTitle
FIELD	221:38	221:38	7	szWideTitle
LEAF_NODE	221:38	221:38	8	szWideTitle
LEAF_NODE	221:49	221:49	6	,
ARGUMENT	221:51	221:51	6	MB_OK | MB_ICONEXCLAMATION
BIT_OR	221:51	221:59	7	MB_OK | MB_ICONEXCLAMATION
BIT_OR_ELEM	221:51	221:51	8	MB_OK
FIELD	221:51	221:51	9	MB_OK
LEAF_NODE	221:51	221:51	10	MB_OK
LEAF_NODE	221:57	221:57	8	|
BIT_OR_ELEM	221:59	221:59	8	MB_ICONEXCLAMATION
FIELD	221:59	221:59	9	MB_ICONEXCLAMATION
LEAF_NODE	221:59	221:59	10	MB_ICONEXCLAMATION
LEAF_NODE	221:77	221:77	6	)
LEAF_NODE	221:78	221:78	4	;
EXPR_STATEMENT	225:4	225:22	3	LocalFree ( szTitle ) ;
EXPR	225:4	225:4	4	LocalFree ( szTitle )
FUNCTION_CALL	225:4	225:21	5	LocalFree ( szTitle )
CALLEE	225:4	225:4	6	LocalFree
LEAF_NODE	225:4	225:4	7	LocalFree
LEAF_NODE	225:13	225:13	6	(
ARGUMENT	225:14	225:14	6	szTitle
FIELD	225:14	225:14	7	szTitle
LEAF_NODE	225:14	225:14	8	szTitle
LEAF_NODE	225:21	225:21	6	)
LEAF_NODE	225:22	225:22	4	;
EXPR_STATEMENT	226:4	226:19	3	free ( szWideMsg ) ;
EXPR	226:4	226:4	4	free ( szWideMsg )
FUNCTION_CALL	226:4	226:18	5	free ( szWideMsg )
CALLEE	226:4	226:4	6	free
LEAF_NODE	226:4	226:4	7	free
LEAF_NODE	226:8	226:8	6	(
ARGUMENT	226:9	226:9	6	szWideMsg
FIELD	226:9	226:9	7	szWideMsg
LEAF_NODE	226:9	226:9	8	szWideMsg
LEAF_NODE	226:18	226:18	6	)
LEAF_NODE	226:19	226:19	4	;
EXPR_STATEMENT	227:4	227:21	3	free ( szWideTitle ) ;
EXPR	227:4	227:4	4	free ( szWideTitle )
FUNCTION_CALL	227:4	227:20	5	free ( szWideTitle )
CALLEE	227:4	227:4	6	free
LEAF_NODE	227:4	227:4	7	free
LEAF_NODE	227:8	227:8	6	(
ARGUMENT	227:9	227:9	6	szWideTitle
FIELD	227:9	227:9	7	szWideTitle
LEAF_NODE	227:9	227:9	8	szWideTitle
LEAF_NODE	227:20	227:20	6	)
LEAF_NODE	227:21	227:21	4	;
LEAF_NODE	228:0	228:0	2	}
SIMPLE_DECL	230:0	230:58	1	TIFFErrorHandler _TIFFwarningHandler ; _TIFFwarningHandler = Win32WarningHandler ;
VAR_DECL	230:0	230:17	2	TIFFErrorHandler _TIFFwarningHandler ; _TIFFwarningHandler = Win32WarningHandler
TYPE	230:0	230:0	3	TIFFErrorHandler
TYPE_NAME	230:0	230:0	4	TIFFErrorHandler
LEAF_NODE	230:0	230:0	5	TIFFErrorHandler
NAME	230:17	230:17	3	_TIFFwarningHandler
LEAF_NODE	230:17	230:17	4	_TIFFwarningHandler
LEAF_NODE	0:0	0:0	3	;
INIT	230:17	230:17	3	_TIFFwarningHandler = Win32WarningHandler
ASSIGN	230:17	230:39	4	_TIFFwarningHandler = Win32WarningHandler
LVAL	230:17	230:17	5	_TIFFwarningHandler
NAME	230:17	230:17	6	_TIFFwarningHandler
LEAF_NODE	230:17	230:17	7	_TIFFwarningHandler
ASSIGN_OP	230:37	230:37	5	=
LEAF_NODE	230:37	230:37	6	=
RVAL	230:39	230:39	5	Win32WarningHandler
FIELD	230:39	230:39	6	Win32WarningHandler
LEAF_NODE	230:39	230:39	7	Win32WarningHandler
LEAF_NODE	230:58	230:58	2	;
FUNCTION_DEF	232:0	276:0	1	
RETURN_TYPE	232:0	232:7	2	static void
LEAF_NODE	232:0	232:0	3	static
TYPE_NAME	232:7	232:7	3	void
LEAF_NODE	232:7	232:7	4	void
FUNCTION_NAME	233:0	233:0	2	Win32ErrorHandler
LEAF_NODE	233:0	233:0	3	Win32ErrorHandler
PARAMETER_LIST	233:17	233:65	2	( const char * module , const char * fmt , va_list ap )
LEAF_NODE	233:17	233:17	3	(
PARAMETER_DECL	233:18	233:30	3	const char * module
TYPE	233:18	233:28	4	const char *
TYPE_NAME	233:18	233:24	5	const char
LEAF_NODE	233:18	233:18	6	const
LEAF_NODE	233:24	233:24	6	char
POINTER	233:28	233:28	5	*
LEAF_NODE	233:28	233:28	6	*
NAME	233:30	233:30	4	module
LEAF_NODE	233:30	233:30	5	module
LEAF_NODE	233:36	233:36	3	,
PARAMETER_DECL	233:38	233:50	3	const char * fmt
TYPE	233:38	233:48	4	const char *
TYPE_NAME	233:38	233:44	5	const char
LEAF_NODE	233:38	233:38	6	const
LEAF_NODE	233:44	233:44	6	char
POINTER	233:48	233:48	5	*
LEAF_NODE	233:48	233:48	6	*
NAME	233:50	233:50	4	fmt
LEAF_NODE	233:50	233:50	5	fmt
LEAF_NODE	233:53	233:53	3	,
PARAMETER_DECL	233:55	233:63	3	va_list ap
TYPE	233:55	233:55	4	va_list
TYPE_NAME	233:55	233:55	5	va_list
LEAF_NODE	233:55	233:55	6	va_list
NAME	233:63	233:63	4	ap
LEAF_NODE	233:63	233:63	5	ap
LEAF_NODE	233:65	233:65	3	)
LEAF_NODE	234:0	234:0	2	{
STATEMENTS	237:4	275:4	2	
SIMPLE_DECL	237:4	237:23	3	size_t nWideLen ; nWideLen = 0 ;
VAR_DECL	237:4	237:11	4	size_t nWideLen ; nWideLen = 0
TYPE	237:4	237:4	5	size_t
TYPE_NAME	237:4	237:4	6	size_t
LEAF_NODE	237:4	237:4	7	size_t
NAME	237:11	237:11	5	nWideLen
LEAF_NODE	237:11	237:11	6	nWideLen
LEAF_NODE	0:0	0:0	5	;
INIT	237:11	237:11	5	nWideLen = 0
ASSIGN	237:11	237:22	6	nWideLen = 0
LVAL	237:11	237:11	7	nWideLen
NAME	237:11	237:11	8	nWideLen
LEAF_NODE	237:11	237:11	9	nWideLen
ASSIGN_OP	237:20	237:20	7	=
LEAF_NODE	237:20	237:20	8	=
RVAL	237:22	237:22	7	0
FIELD	237:22	237:22	8	0
LEAF_NODE	237:22	237:22	9	0
LEAF_NODE	237:23	237:23	4	;
SIMPLE_DECL	238:4	238:29	3	LPTSTR szWideTitle ; szWideTitle = NULL ;
VAR_DECL	238:4	238:11	4	LPTSTR szWideTitle ; szWideTitle = NULL
TYPE	238:4	238:4	5	LPTSTR
TYPE_NAME	238:4	238:4	6	LPTSTR
LEAF_NODE	238:4	238:4	7	LPTSTR
NAME	238:11	238:11	5	szWideTitle
LEAF_NODE	238:11	238:11	6	szWideTitle
LEAF_NODE	0:0	0:0	5	;
INIT	238:11	238:11	5	szWideTitle = NULL
ASSIGN	238:11	238:25	6	szWideTitle = NULL
LVAL	238:11	238:11	7	szWideTitle
NAME	238:11	238:11	8	szWideTitle
LEAF_NODE	238:11	238:11	9	szWideTitle
ASSIGN_OP	238:23	238:23	7	=
LEAF_NODE	238:23	238:23	8	=
RVAL	238:25	238:25	7	NULL
FIELD	238:25	238:25	8	NULL
LEAF_NODE	238:25	238:25	9	NULL
LEAF_NODE	238:29	238:29	4	;
SIMPLE_DECL	239:4	239:27	3	LPTSTR szWideMsg ; szWideMsg = NULL ;
VAR_DECL	239:4	239:11	4	LPTSTR szWideMsg ; szWideMsg = NULL
TYPE	239:4	239:4	5	LPTSTR
TYPE_NAME	239:4	239:4	6	LPTSTR
LEAF_NODE	239:4	239:4	7	LPTSTR
NAME	239:11	239:11	5	szWideMsg
LEAF_NODE	239:11	239:11	6	szWideMsg
LEAF_NODE	0:0	0:0	5	;
INIT	239:11	239:11	5	szWideMsg = NULL
ASSIGN	239:11	239:23	6	szWideMsg = NULL
LVAL	239:11	239:11	7	szWideMsg
NAME	239:11	239:11	8	szWideMsg
LEAF_NODE	239:11	239:11	9	szWideMsg
ASSIGN_OP	239:21	239:21	7	=
LEAF_NODE	239:21	239:21	8	=
RVAL	239:23	239:23	7	NULL
FIELD	239:23	239:23	8	NULL
LEAF_NODE	239:23	239:23	9	NULL
LEAF_NODE	239:27	239:27	4	;
SIMPLE_DECL	241:4	241:17	3	LPSTR szTitle ;
VAR_DECL	241:4	241:10	4	LPSTR szTitle
TYPE	241:4	241:4	5	LPSTR
TYPE_NAME	241:4	241:4	6	LPSTR
LEAF_NODE	241:4	241:4	7	LPSTR
NAME	241:10	241:10	5	szTitle
LEAF_NODE	241:10	241:10	6	szTitle
LEAF_NODE	241:17	241:17	4	;
SIMPLE_DECL	242:1	242:12	3	LPSTR szTmp ;
VAR_DECL	242:1	242:7	4	LPSTR szTmp
TYPE	242:1	242:1	5	LPSTR
TYPE_NAME	242:1	242:1	6	LPSTR
LEAF_NODE	242:1	242:1	7	LPSTR
NAME	242:7	242:7	5	szTmp
LEAF_NODE	242:7	242:7	6	szTmp
LEAF_NODE	242:12	242:12	4	;
SIMPLE_DECL	243:1	243:32	3	LPCSTR szTitleText ; szTitleText = "%s Error" ;
VAR_DECL	243:1	243:8	4	LPCSTR szTitleText ; szTitleText = "%s Error"
TYPE	243:1	243:1	5	LPCSTR
TYPE_NAME	243:1	243:1	6	LPCSTR
LEAF_NODE	243:1	243:1	7	LPCSTR
NAME	243:8	243:8	5	szTitleText
LEAF_NODE	243:8	243:8	6	szTitleText
LEAF_NODE	0:0	0:0	5	;
INIT	243:8	243:8	5	szTitleText = "%s Error"
ASSIGN	243:8	243:22	6	szTitleText = "%s Error"
LVAL	243:8	243:8	7	szTitleText
NAME	243:8	243:8	8	szTitleText
LEAF_NODE	243:8	243:8	9	szTitleText
ASSIGN_OP	243:20	243:20	7	=
LEAF_NODE	243:20	243:20	8	=
RVAL	243:22	243:22	7	"%s Error"
FIELD	243:22	243:22	8	"%s Error"
LEAF_NODE	243:22	243:22	9	"%s Error"
LEAF_NODE	243:32	243:32	4	;
SIMPLE_DECL	244:1	244:35	3	LPCSTR szDefaultModule ; szDefaultModule = "LIBTIFF" ;
VAR_DECL	244:1	244:8	4	LPCSTR szDefaultModule ; szDefaultModule = "LIBTIFF"
TYPE	244:1	244:1	5	LPCSTR
TYPE_NAME	244:1	244:1	6	LPCSTR
LEAF_NODE	244:1	244:1	7	LPCSTR
NAME	244:8	244:8	5	szDefaultModule
LEAF_NODE	244:8	244:8	6	szDefaultModule
LEAF_NODE	0:0	0:0	5	;
INIT	244:8	244:8	5	szDefaultModule = "LIBTIFF"
ASSIGN	244:8	244:26	6	szDefaultModule = "LIBTIFF"
LVAL	244:8	244:8	7	szDefaultModule
NAME	244:8	244:8	8	szDefaultModule
LEAF_NODE	244:8	244:8	9	szDefaultModule
ASSIGN_OP	244:24	244:24	7	=
LEAF_NODE	244:24	244:24	8	=
RVAL	244:26	244:26	7	"LIBTIFF"
FIELD	244:26	244:26	8	"LIBTIFF"
LEAF_NODE	244:26	244:26	9	"LIBTIFF"
LEAF_NODE	244:35	244:35	4	;
SIMPLE_DECL	245:1	245:19	3	LPCSTR szTmpModule ;
VAR_DECL	245:1	245:8	4	LPCSTR szTmpModule
TYPE	245:1	245:1	5	LPCSTR
TYPE_NAME	245:1	245:1	6	LPCSTR
LEAF_NODE	245:1	245:1	7	LPCSTR
NAME	245:8	245:8	5	szTmpModule
LEAF_NODE	245:8	245:8	6	szTmpModule
LEAF_NODE	245:19	245:19	4	;
EXPR_STATEMENT	247:1	247:58	3	szTmpModule = ( module == NULL ) ? szDefaultModule : module ;
EXPR	247:1	247:1	4	szTmpModule = ( module == NULL ) ? szDefaultModule : module
ASSIGN	247:1	247:15	5	szTmpModule = ( module == NULL ) ? szDefaultModule : module
LVAL	247:1	247:1	6	szTmpModule
FIELD	247:1	247:1	7	szTmpModule
LEAF_NODE	247:1	247:1	8	szTmpModule
ASSIGN_OP	247:13	247:13	6	=
LEAF_NODE	247:13	247:13	7	=
RVAL	247:15	247:15	6	( module == NULL ) ? szDefaultModule : module
COND_EXPR	247:15	247:52	7	( module == NULL ) ? szDefaultModule : module
CONDITION	247:15	247:30	8	( module == NULL )
LEAF_NODE	247:15	247:15	9	(
FIELD	247:16	247:16	9	module
LEAF_NODE	247:16	247:16	10	module
EQ_OPERATOR	247:23	247:23	9	==
LEAF_NODE	247:23	247:23	10	==
FIELD	247:26	247:26	9	NULL
LEAF_NODE	247:26	247:26	10	NULL
LEAF_NODE	247:30	247:30	9	)
LEAF_NODE	247:32	247:32	8	?
EXPR	247:34	247:34	8	szDefaultModule
FIELD	247:34	247:34	9	szDefaultModule
LEAF_NODE	247:34	247:34	10	szDefaultModule
LEAF_NODE	247:50	247:50	8	:
FIELD	247:52	247:52	8	module
LEAF_NODE	247:52	247:52	9	module
LEAF_NODE	247:58	247:58	4	;
SELECTION	248:1	251:2	3	
KEYWORD	248:1	248:1	4	if
LEAF_NODE	248:1	248:1	5	if
LEAF_NODE	248:4	248:4	4	(
CONDITION	248:5	248:5	4	( szTitle = ( LPSTR ) LocalAlloc ( LMEM_FIXED , ( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char ) ) ) == NULL
EXPR	248:5	250:49	5	( szTitle = ( LPSTR ) LocalAlloc ( LMEM_FIXED , ( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char ) ) ) == NULL
LEAF_NODE	248:5	248:5	6	(
ASSIGN	248:6	248:16	6	szTitle = ( LPSTR ) LocalAlloc ( LMEM_FIXED , ( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char ) )
LVAL	248:6	248:6	7	szTitle
FIELD	248:6	248:6	8	szTitle
LEAF_NODE	248:6	248:6	9	szTitle
ASSIGN_OP	248:14	248:14	7	=
LEAF_NODE	248:14	248:14	8	=
RVAL	248:16	248:23	7	( LPSTR ) LocalAlloc ( LMEM_FIXED , ( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char ) )
LEAF_NODE	248:16	248:16	8	(
TYPE_NAME	248:17	248:17	8	LPSTR
LEAF_NODE	248:17	248:17	9	LPSTR
LEAF_NODE	248:22	248:22	8	)
FUNCTION_CALL	248:23	250:43	8	LocalAlloc ( LMEM_FIXED , ( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char ) )
CALLEE	248:23	248:23	9	LocalAlloc
LEAF_NODE	248:23	248:23	10	LocalAlloc
LEAF_NODE	248:33	248:33	9	(
ARGUMENT	248:34	248:34	9	LMEM_FIXED
FIELD	248:34	248:34	10	LMEM_FIXED
LEAF_NODE	248:34	248:34	11	LMEM_FIXED
LEAF_NODE	248:44	248:44	9	,
ARGUMENT	249:8	250:31	9	( strlen ( szTmpModule ) + strlen ( szTitleText ) + strlen ( fmt ) + 128 ) * sizeof ( char )
LEAF_NODE	249:8	249:8	10	(
FUNCTION_CALL	249:9	249:27	10	strlen ( szTmpModule )
CALLEE	249:9	249:9	11	strlen
LEAF_NODE	249:9	249:9	12	strlen
LEAF_NODE	249:15	249:15	11	(
ARGUMENT	249:16	249:16	11	szTmpModule
FIELD	249:16	249:16	12	szTmpModule
LEAF_NODE	249:16	249:16	13	szTmpModule
LEAF_NODE	249:27	249:27	11	)
LEAF_NODE	249:29	249:29	10	+
FUNCTION_CALL	249:31	249:49	10	strlen ( szTitleText )
CALLEE	249:31	249:31	11	strlen
LEAF_NODE	249:31	249:31	12	strlen
LEAF_NODE	249:37	249:37	11	(
ARGUMENT	249:38	249:38	11	szTitleText
FIELD	249:38	249:38	12	szTitleText
LEAF_NODE	249:38	249:38	13	szTitleText
LEAF_NODE	249:49	249:49	11	)
LEAF_NODE	250:8	250:8	10	+
FUNCTION_CALL	250:10	250:20	10	strlen ( fmt )
CALLEE	250:10	250:10	11	strlen
LEAF_NODE	250:10	250:10	12	strlen
LEAF_NODE	250:16	250:16	11	(
ARGUMENT	250:17	250:17	11	fmt
FIELD	250:17	250:17	12	fmt
LEAF_NODE	250:17	250:17	13	fmt
LEAF_NODE	250:20	250:20	11	)
LEAF_NODE	250:22	250:22	10	+
FIELD	250:24	250:24	10	128
LEAF_NODE	250:24	250:24	11	128
LEAF_NODE	250:27	250:27	10	)
LEAF_NODE	250:29	250:29	10	*
FUNCTION_CALL	250:31	250:42	10	sizeof ( char )
CALLEE	250:31	250:31	11	sizeof
LEAF_NODE	250:31	250:31	12	sizeof
LEAF_NODE	250:37	250:37	11	(
ARGUMENT	250:38	250:38	11	char
FIELD	250:38	250:38	12	char
LEAF_NODE	250:38	250:38	13	char
LEAF_NODE	250:42	250:42	11	)
LEAF_NODE	250:43	250:43	9	)
LEAF_NODE	250:44	250:44	6	)
EQ_OPERATOR	250:46	250:46	6	==
LEAF_NODE	250:46	250:46	7	==
FIELD	250:49	250:49	6	NULL
LEAF_NODE	250:49	250:49	7	NULL
LEAF_NODE	250:53	250:53	4	)
STATEMENTS	251:2	251:2	4	
JUMP_STATEMENT	251:2	251:8	5	return DESTINATION ;
KEYWORD	251:2	251:2	6	return
LEAF_NODE	251:2	251:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	251:8	251:8	6	;
EXPR_STATEMENT	253:1	253:43	3	sprintf ( szTitle , szTitleText , szTmpModule ) ;
EXPR	253:1	253:1	4	sprintf ( szTitle , szTitleText , szTmpModule )
FUNCTION_CALL	253:1	253:42	5	sprintf ( szTitle , szTitleText , szTmpModule )
CALLEE	253:1	253:1	6	sprintf
LEAF_NODE	253:1	253:1	7	sprintf
LEAF_NODE	253:8	253:8	6	(
ARGUMENT	253:9	253:9	6	szTitle
FIELD	253:9	253:9	7	szTitle
LEAF_NODE	253:9	253:9	8	szTitle
LEAF_NODE	253:16	253:16	6	,
ARGUMENT	253:18	253:18	6	szTitleText
FIELD	253:18	253:18	7	szTitleText
LEAF_NODE	253:18	253:18	8	szTitleText
LEAF_NODE	253:29	253:29	6	,
ARGUMENT	253:31	253:31	6	szTmpModule
FIELD	253:31	253:31	7	szTmpModule
LEAF_NODE	253:31	253:31	8	szTmpModule
LEAF_NODE	253:42	253:42	6	)
LEAF_NODE	253:43	253:43	4	;
EXPR_STATEMENT	254:1	254:55	3	szTmp = szTitle + ( strlen ( szTitle ) + 2 ) * sizeof ( char ) ;
EXPR	254:1	254:1	4	szTmp = szTitle + ( strlen ( szTitle ) + 2 ) * sizeof ( char )
ASSIGN	254:1	254:9	5	szTmp = szTitle + ( strlen ( szTitle ) + 2 ) * sizeof ( char )
LVAL	254:1	254:1	6	szTmp
FIELD	254:1	254:1	7	szTmp
LEAF_NODE	254:1	254:1	8	szTmp
ASSIGN_OP	254:7	254:7	6	=
LEAF_NODE	254:7	254:7	7	=
RVAL	254:9	254:43	6	szTitle + ( strlen ( szTitle ) + 2 ) * sizeof ( char )
FIELD	254:9	254:9	7	szTitle
LEAF_NODE	254:9	254:9	8	szTitle
LEAF_NODE	254:17	254:17	7	+
LEAF_NODE	254:19	254:19	7	(
FUNCTION_CALL	254:20	254:34	7	strlen ( szTitle )
CALLEE	254:20	254:20	8	strlen
LEAF_NODE	254:20	254:20	9	strlen
LEAF_NODE	254:26	254:26	8	(
ARGUMENT	254:27	254:27	8	szTitle
FIELD	254:27	254:27	9	szTitle
LEAF_NODE	254:27	254:27	10	szTitle
LEAF_NODE	254:34	254:34	8	)
LEAF_NODE	254:36	254:36	7	+
FIELD	254:38	254:38	7	2
LEAF_NODE	254:38	254:38	8	2
LEAF_NODE	254:39	254:39	7	)
LEAF_NODE	254:41	254:41	7	*
FUNCTION_CALL	254:43	254:54	7	sizeof ( char )
CALLEE	254:43	254:43	8	sizeof
LEAF_NODE	254:43	254:43	9	sizeof
LEAF_NODE	254:49	254:49	8	(
ARGUMENT	254:50	254:50	8	char
FIELD	254:50	254:50	9	char
LEAF_NODE	254:50	254:50	10	char
LEAF_NODE	254:54	254:54	8	)
LEAF_NODE	254:55	254:55	4	;
EXPR_STATEMENT	255:1	255:25	3	vsprintf ( szTmp , fmt , ap ) ;
EXPR	255:1	255:1	4	vsprintf ( szTmp , fmt , ap )
FUNCTION_CALL	255:1	255:24	5	vsprintf ( szTmp , fmt , ap )
CALLEE	255:1	255:1	6	vsprintf
LEAF_NODE	255:1	255:1	7	vsprintf
LEAF_NODE	255:9	255:9	6	(
ARGUMENT	255:10	255:10	6	szTmp
FIELD	255:10	255:10	7	szTmp
LEAF_NODE	255:10	255:10	8	szTmp
LEAF_NODE	255:15	255:15	6	,
ARGUMENT	255:17	255:17	6	fmt
FIELD	255:17	255:17	7	fmt
LEAF_NODE	255:17	255:17	8	fmt
LEAF_NODE	255:20	255:20	6	,
ARGUMENT	255:22	255:22	6	ap
FIELD	255:22	255:22	7	ap
LEAF_NODE	255:22	255:22	8	ap
LEAF_NODE	255:24	255:24	6	)
LEAF_NODE	255:25	255:25	4	;
EXPR_STATEMENT	259:4	259:67	3	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , NULL , 0 ) ;
EXPR	259:4	259:4	4	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , NULL , 0 )
ASSIGN	259:4	259:15	5	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , NULL , 0 )
LVAL	259:4	259:4	6	nWideLen
FIELD	259:4	259:4	7	nWideLen
LEAF_NODE	259:4	259:4	8	nWideLen
ASSIGN_OP	259:13	259:13	6	=
LEAF_NODE	259:13	259:13	7	=
RVAL	259:15	259:15	6	MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , NULL , 0 )
FUNCTION_CALL	259:15	259:66	7	MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , NULL , 0 )
CALLEE	259:15	259:15	8	MultiByteToWideChar
LEAF_NODE	259:15	259:15	9	MultiByteToWideChar
LEAF_NODE	259:34	259:34	8	(
ARGUMENT	259:35	259:35	8	CP_ACP
FIELD	259:35	259:35	9	CP_ACP
LEAF_NODE	259:35	259:35	10	CP_ACP
LEAF_NODE	259:41	259:41	8	,
ARGUMENT	259:43	259:43	8	0
FIELD	259:43	259:43	9	0
LEAF_NODE	259:43	259:43	10	0
LEAF_NODE	259:44	259:44	8	,
ARGUMENT	259:46	259:46	8	szTitle
FIELD	259:46	259:46	9	szTitle
LEAF_NODE	259:46	259:46	10	szTitle
LEAF_NODE	259:53	259:53	8	,
ARGUMENT	259:55	259:55	8	- 1
UNARY_EXPR	259:55	259:56	9	- 1
UNARY_OPERATOR	259:55	259:55	10	-
LEAF_NODE	259:55	259:55	11	-
FIELD	259:56	259:56	10	1
LEAF_NODE	259:56	259:56	11	1
LEAF_NODE	259:57	259:57	8	,
ARGUMENT	259:59	259:59	8	NULL
FIELD	259:59	259:59	9	NULL
LEAF_NODE	259:59	259:59	10	NULL
LEAF_NODE	259:63	259:63	8	,
ARGUMENT	259:65	259:65	8	0
FIELD	259:65	259:65	9	0
LEAF_NODE	259:65	259:65	10	0
LEAF_NODE	259:66	259:66	8	)
LEAF_NODE	259:67	259:67	4	;
EXPR_STATEMENT	260:4	260:62	3	szWideTitle = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen ) ;
EXPR	260:4	260:4	4	szWideTitle = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
ASSIGN	260:4	260:18	5	szWideTitle = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
LVAL	260:4	260:4	6	szWideTitle
FIELD	260:4	260:4	7	szWideTitle
LEAF_NODE	260:4	260:4	8	szWideTitle
ASSIGN_OP	260:16	260:16	6	=
LEAF_NODE	260:16	260:16	7	=
RVAL	260:18	260:28	6	( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
LEAF_NODE	260:18	260:18	7	(
TYPE_NAME	260:19	260:19	7	wchar_t
LEAF_NODE	260:19	260:19	8	wchar_t
LEAF_NODE	260:26	260:26	7	*
LEAF_NODE	260:27	260:27	7	)
FUNCTION_CALL	260:28	260:61	7	malloc ( sizeof ( wchar_t ) * nWideLen )
CALLEE	260:28	260:28	8	malloc
LEAF_NODE	260:28	260:28	9	malloc
LEAF_NODE	260:34	260:34	8	(
ARGUMENT	260:35	260:53	8	sizeof ( wchar_t ) * nWideLen
FUNCTION_CALL	260:35	260:49	9	sizeof ( wchar_t )
CALLEE	260:35	260:35	10	sizeof
LEAF_NODE	260:35	260:35	11	sizeof
LEAF_NODE	260:41	260:41	10	(
ARGUMENT	260:42	260:42	10	wchar_t
FIELD	260:42	260:42	11	wchar_t
LEAF_NODE	260:42	260:42	12	wchar_t
LEAF_NODE	260:49	260:49	10	)
LEAF_NODE	260:51	260:51	9	*
FIELD	260:53	260:53	9	nWideLen
LEAF_NODE	260:53	260:53	10	nWideLen
LEAF_NODE	260:61	260:61	8	)
LEAF_NODE	260:62	260:62	4	;
EXPR_STATEMENT	261:4	261:70	3	MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , szWideTitle , nWideLen ) ;
EXPR	261:4	261:4	4	MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , szWideTitle , nWideLen )
FUNCTION_CALL	261:4	261:69	5	MultiByteToWideChar ( CP_ACP , 0 , szTitle , - 1 , szWideTitle , nWideLen )
CALLEE	261:4	261:4	6	MultiByteToWideChar
LEAF_NODE	261:4	261:4	7	MultiByteToWideChar
LEAF_NODE	261:23	261:23	6	(
ARGUMENT	261:24	261:24	6	CP_ACP
FIELD	261:24	261:24	7	CP_ACP
LEAF_NODE	261:24	261:24	8	CP_ACP
LEAF_NODE	261:30	261:30	6	,
ARGUMENT	261:32	261:32	6	0
FIELD	261:32	261:32	7	0
LEAF_NODE	261:32	261:32	8	0
LEAF_NODE	261:33	261:33	6	,
ARGUMENT	261:35	261:35	6	szTitle
FIELD	261:35	261:35	7	szTitle
LEAF_NODE	261:35	261:35	8	szTitle
LEAF_NODE	261:42	261:42	6	,
ARGUMENT	261:44	261:44	6	- 1
UNARY_EXPR	261:44	261:45	7	- 1
UNARY_OPERATOR	261:44	261:44	8	-
LEAF_NODE	261:44	261:44	9	-
FIELD	261:45	261:45	8	1
LEAF_NODE	261:45	261:45	9	1
LEAF_NODE	261:46	261:46	6	,
ARGUMENT	261:48	261:48	6	szWideTitle
FIELD	261:48	261:48	7	szWideTitle
LEAF_NODE	261:48	261:48	8	szWideTitle
LEAF_NODE	261:59	261:59	6	,
ARGUMENT	261:61	261:61	6	nWideLen
FIELD	261:61	261:61	7	nWideLen
LEAF_NODE	261:61	261:61	8	nWideLen
LEAF_NODE	261:69	261:69	6	)
LEAF_NODE	261:70	261:70	4	;
EXPR_STATEMENT	263:4	263:65	3	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , NULL , 0 ) ;
EXPR	263:4	263:4	4	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , NULL , 0 )
ASSIGN	263:4	263:15	5	nWideLen = MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , NULL , 0 )
LVAL	263:4	263:4	6	nWideLen
FIELD	263:4	263:4	7	nWideLen
LEAF_NODE	263:4	263:4	8	nWideLen
ASSIGN_OP	263:13	263:13	6	=
LEAF_NODE	263:13	263:13	7	=
RVAL	263:15	263:15	6	MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , NULL , 0 )
FUNCTION_CALL	263:15	263:64	7	MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , NULL , 0 )
CALLEE	263:15	263:15	8	MultiByteToWideChar
LEAF_NODE	263:15	263:15	9	MultiByteToWideChar
LEAF_NODE	263:34	263:34	8	(
ARGUMENT	263:35	263:35	8	CP_ACP
FIELD	263:35	263:35	9	CP_ACP
LEAF_NODE	263:35	263:35	10	CP_ACP
LEAF_NODE	263:41	263:41	8	,
ARGUMENT	263:43	263:43	8	0
FIELD	263:43	263:43	9	0
LEAF_NODE	263:43	263:43	10	0
LEAF_NODE	263:44	263:44	8	,
ARGUMENT	263:46	263:46	8	szTmp
FIELD	263:46	263:46	9	szTmp
LEAF_NODE	263:46	263:46	10	szTmp
LEAF_NODE	263:51	263:51	8	,
ARGUMENT	263:53	263:53	8	- 1
UNARY_EXPR	263:53	263:54	9	- 1
UNARY_OPERATOR	263:53	263:53	10	-
LEAF_NODE	263:53	263:53	11	-
FIELD	263:54	263:54	10	1
LEAF_NODE	263:54	263:54	11	1
LEAF_NODE	263:55	263:55	8	,
ARGUMENT	263:57	263:57	8	NULL
FIELD	263:57	263:57	9	NULL
LEAF_NODE	263:57	263:57	10	NULL
LEAF_NODE	263:61	263:61	8	,
ARGUMENT	263:63	263:63	8	0
FIELD	263:63	263:63	9	0
LEAF_NODE	263:63	263:63	10	0
LEAF_NODE	263:64	263:64	8	)
LEAF_NODE	263:65	263:65	4	;
EXPR_STATEMENT	264:4	264:60	3	szWideMsg = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen ) ;
EXPR	264:4	264:4	4	szWideMsg = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
ASSIGN	264:4	264:16	5	szWideMsg = ( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
LVAL	264:4	264:4	6	szWideMsg
FIELD	264:4	264:4	7	szWideMsg
LEAF_NODE	264:4	264:4	8	szWideMsg
ASSIGN_OP	264:14	264:14	6	=
LEAF_NODE	264:14	264:14	7	=
RVAL	264:16	264:26	6	( wchar_t * ) malloc ( sizeof ( wchar_t ) * nWideLen )
LEAF_NODE	264:16	264:16	7	(
TYPE_NAME	264:17	264:17	7	wchar_t
LEAF_NODE	264:17	264:17	8	wchar_t
LEAF_NODE	264:24	264:24	7	*
LEAF_NODE	264:25	264:25	7	)
FUNCTION_CALL	264:26	264:59	7	malloc ( sizeof ( wchar_t ) * nWideLen )
CALLEE	264:26	264:26	8	malloc
LEAF_NODE	264:26	264:26	9	malloc
LEAF_NODE	264:32	264:32	8	(
ARGUMENT	264:33	264:51	8	sizeof ( wchar_t ) * nWideLen
FUNCTION_CALL	264:33	264:47	9	sizeof ( wchar_t )
CALLEE	264:33	264:33	10	sizeof
LEAF_NODE	264:33	264:33	11	sizeof
LEAF_NODE	264:39	264:39	10	(
ARGUMENT	264:40	264:40	10	wchar_t
FIELD	264:40	264:40	11	wchar_t
LEAF_NODE	264:40	264:40	12	wchar_t
LEAF_NODE	264:47	264:47	10	)
LEAF_NODE	264:49	264:49	9	*
FIELD	264:51	264:51	9	nWideLen
LEAF_NODE	264:51	264:51	10	nWideLen
LEAF_NODE	264:59	264:59	8	)
LEAF_NODE	264:60	264:60	4	;
EXPR_STATEMENT	265:4	265:66	3	MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , szWideMsg , nWideLen ) ;
EXPR	265:4	265:4	4	MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , szWideMsg , nWideLen )
FUNCTION_CALL	265:4	265:65	5	MultiByteToWideChar ( CP_ACP , 0 , szTmp , - 1 , szWideMsg , nWideLen )
CALLEE	265:4	265:4	6	MultiByteToWideChar
LEAF_NODE	265:4	265:4	7	MultiByteToWideChar
LEAF_NODE	265:23	265:23	6	(
ARGUMENT	265:24	265:24	6	CP_ACP
FIELD	265:24	265:24	7	CP_ACP
LEAF_NODE	265:24	265:24	8	CP_ACP
LEAF_NODE	265:30	265:30	6	,
ARGUMENT	265:32	265:32	6	0
FIELD	265:32	265:32	7	0
LEAF_NODE	265:32	265:32	8	0
LEAF_NODE	265:33	265:33	6	,
ARGUMENT	265:35	265:35	6	szTmp
FIELD	265:35	265:35	7	szTmp
LEAF_NODE	265:35	265:35	8	szTmp
LEAF_NODE	265:40	265:40	6	,
ARGUMENT	265:42	265:42	6	- 1
UNARY_EXPR	265:42	265:43	7	- 1
UNARY_OPERATOR	265:42	265:42	8	-
LEAF_NODE	265:42	265:42	9	-
FIELD	265:43	265:43	8	1
LEAF_NODE	265:43	265:43	9	1
LEAF_NODE	265:44	265:44	6	,
ARGUMENT	265:46	265:46	6	szWideMsg
FIELD	265:46	265:46	7	szWideMsg
LEAF_NODE	265:46	265:46	8	szWideMsg
LEAF_NODE	265:55	265:55	6	,
ARGUMENT	265:57	265:57	6	nWideLen
FIELD	265:57	265:57	7	nWideLen
LEAF_NODE	265:57	265:57	8	nWideLen
LEAF_NODE	265:65	265:65	6	)
LEAF_NODE	265:66	265:66	4	;
EXPR_STATEMENT	269:1	269:75	3	MessageBox ( GetFocus ( ) , szWideMsg , szWideTitle , MB_OK | MB_ICONEXCLAMATION ) ;
EXPR	269:1	269:1	4	MessageBox ( GetFocus ( ) , szWideMsg , szWideTitle , MB_OK | MB_ICONEXCLAMATION )
FUNCTION_CALL	269:1	269:74	5	MessageBox ( GetFocus ( ) , szWideMsg , szWideTitle , MB_OK | MB_ICONEXCLAMATION )
CALLEE	269:1	269:1	6	MessageBox
LEAF_NODE	269:1	269:1	7	MessageBox
LEAF_NODE	269:11	269:11	6	(
ARGUMENT	269:12	269:12	6	GetFocus ( )
FUNCTION_CALL	269:12	269:21	7	GetFocus ( )
CALLEE	269:12	269:12	8	GetFocus
LEAF_NODE	269:12	269:12	9	GetFocus
LEAF_NODE	269:20	269:20	8	(
LEAF_NODE	269:21	269:21	8	)
LEAF_NODE	269:22	269:22	6	,
ARGUMENT	269:24	269:24	6	szWideMsg
FIELD	269:24	269:24	7	szWideMsg
LEAF_NODE	269:24	269:24	8	szWideMsg
LEAF_NODE	269:33	269:33	6	,
ARGUMENT	269:35	269:35	6	szWideTitle
FIELD	269:35	269:35	7	szWideTitle
LEAF_NODE	269:35	269:35	8	szWideTitle
LEAF_NODE	269:46	269:46	6	,
ARGUMENT	269:48	269:48	6	MB_OK | MB_ICONEXCLAMATION
BIT_OR	269:48	269:56	7	MB_OK | MB_ICONEXCLAMATION
BIT_OR_ELEM	269:48	269:48	8	MB_OK
FIELD	269:48	269:48	9	MB_OK
LEAF_NODE	269:48	269:48	10	MB_OK
LEAF_NODE	269:54	269:54	8	|
BIT_OR_ELEM	269:56	269:56	8	MB_ICONEXCLAMATION
FIELD	269:56	269:56	9	MB_ICONEXCLAMATION
LEAF_NODE	269:56	269:56	10	MB_ICONEXCLAMATION
LEAF_NODE	269:74	269:74	6	)
LEAF_NODE	269:75	269:75	4	;
EXPR_STATEMENT	273:4	273:22	3	LocalFree ( szTitle ) ;
EXPR	273:4	273:4	4	LocalFree ( szTitle )
FUNCTION_CALL	273:4	273:21	5	LocalFree ( szTitle )
CALLEE	273:4	273:4	6	LocalFree
LEAF_NODE	273:4	273:4	7	LocalFree
LEAF_NODE	273:13	273:13	6	(
ARGUMENT	273:14	273:14	6	szTitle
FIELD	273:14	273:14	7	szTitle
LEAF_NODE	273:14	273:14	8	szTitle
LEAF_NODE	273:21	273:21	6	)
LEAF_NODE	273:22	273:22	4	;
EXPR_STATEMENT	274:4	274:19	3	free ( szWideMsg ) ;
EXPR	274:4	274:4	4	free ( szWideMsg )
FUNCTION_CALL	274:4	274:18	5	free ( szWideMsg )
CALLEE	274:4	274:4	6	free
LEAF_NODE	274:4	274:4	7	free
LEAF_NODE	274:8	274:8	6	(
ARGUMENT	274:9	274:9	6	szWideMsg
FIELD	274:9	274:9	7	szWideMsg
LEAF_NODE	274:9	274:9	8	szWideMsg
LEAF_NODE	274:18	274:18	6	)
LEAF_NODE	274:19	274:19	4	;
EXPR_STATEMENT	275:4	275:21	3	free ( szWideTitle ) ;
EXPR	275:4	275:4	4	free ( szWideTitle )
FUNCTION_CALL	275:4	275:20	5	free ( szWideTitle )
CALLEE	275:4	275:4	6	free
LEAF_NODE	275:4	275:4	7	free
LEAF_NODE	275:8	275:8	6	(
ARGUMENT	275:9	275:9	6	szWideTitle
FIELD	275:9	275:9	7	szWideTitle
LEAF_NODE	275:9	275:9	8	szWideTitle
LEAF_NODE	275:20	275:20	6	)
LEAF_NODE	275:21	275:21	4	;
LEAF_NODE	276:0	276:0	2	}
SIMPLE_DECL	278:0	278:54	1	TIFFErrorHandler _TIFFerrorHandler ; _TIFFerrorHandler = Win32ErrorHandler ;
VAR_DECL	278:0	278:17	2	TIFFErrorHandler _TIFFerrorHandler ; _TIFFerrorHandler = Win32ErrorHandler
TYPE	278:0	278:0	3	TIFFErrorHandler
TYPE_NAME	278:0	278:0	4	TIFFErrorHandler
LEAF_NODE	278:0	278:0	5	TIFFErrorHandler
NAME	278:17	278:17	3	_TIFFerrorHandler
LEAF_NODE	278:17	278:17	4	_TIFFerrorHandler
LEAF_NODE	0:0	0:0	3	;
INIT	278:17	278:17	3	_TIFFerrorHandler = Win32ErrorHandler
ASSIGN	278:17	278:37	4	_TIFFerrorHandler = Win32ErrorHandler
LVAL	278:17	278:17	5	_TIFFerrorHandler
NAME	278:17	278:17	6	_TIFFerrorHandler
LEAF_NODE	278:17	278:17	7	_TIFFerrorHandler
ASSIGN_OP	278:35	278:35	5	=
LEAF_NODE	278:35	278:35	6	=
RVAL	278:37	278:37	5	Win32ErrorHandler
FIELD	278:37	278:37	6	Win32ErrorHandler
LEAF_NODE	278:37	278:37	7	Win32ErrorHandler
LEAF_NODE	278:54	278:54	2	;
