SOURCE_FILE	60:0	465:0	0	
SIMPLE_DECL	60:0	60:13	1	TIFF * faxTIFF ;
VAR_DECL	60:0	60:6	2	TIFF * faxTIFF
TYPE	60:0	60:5	3	TIFF *
TYPE_NAME	60:0	60:0	4	TIFF
LEAF_NODE	60:0	60:0	5	TIFF
POINTER	60:5	60:5	4	*
LEAF_NODE	60:5	60:5	5	*
NAME	60:6	60:6	3	faxTIFF
LEAF_NODE	60:6	60:6	4	faxTIFF
LEAF_NODE	60:13	60:13	2	;
SIMPLE_DECL	61:0	61:12	1	char * rowbuf ;
VAR_DECL	61:0	61:6	2	char * rowbuf
TYPE	61:0	61:5	3	char *
TYPE_NAME	61:0	61:0	4	char
LEAF_NODE	61:0	61:0	5	char
POINTER	61:5	61:5	4	*
LEAF_NODE	61:5	61:5	5	*
NAME	61:6	61:6	3	rowbuf
LEAF_NODE	61:6	61:6	4	rowbuf
LEAF_NODE	61:12	61:12	2	;
SIMPLE_DECL	62:0	62:12	1	char * refbuf ;
VAR_DECL	62:0	62:6	2	char * refbuf
TYPE	62:0	62:5	3	char *
TYPE_NAME	62:0	62:0	4	char
LEAF_NODE	62:0	62:0	5	char
POINTER	62:5	62:5	4	*
LEAF_NODE	62:5	62:5	5	*
NAME	62:6	62:6	3	refbuf
LEAF_NODE	62:6	62:6	4	refbuf
LEAF_NODE	62:12	62:12	2	;
SIMPLE_DECL	64:0	64:19	1	uint32 xsize ; xsize = 1728 ;
VAR_DECL	64:0	64:7	2	uint32 xsize ; xsize = 1728
TYPE	64:0	64:0	3	uint32
TYPE_NAME	64:0	64:0	4	uint32
LEAF_NODE	64:0	64:0	5	uint32
NAME	64:7	64:7	3	xsize
LEAF_NODE	64:7	64:7	4	xsize
LEAF_NODE	0:0	0:0	3	;
INIT	64:7	64:7	3	xsize = 1728
ASSIGN	64:7	64:15	4	xsize = 1728
LVAL	64:7	64:7	5	xsize
NAME	64:7	64:7	6	xsize
LEAF_NODE	64:7	64:7	7	xsize
ASSIGN_OP	64:13	64:13	5	=
LEAF_NODE	64:13	64:13	6	=
RVAL	64:15	64:15	5	1728
FIELD	64:15	64:15	6	1728
LEAF_NODE	64:15	64:15	7	1728
LEAF_NODE	64:19	64:19	2	;
SIMPLE_DECL	65:0	65:11	1	int verbose ;
VAR_DECL	65:0	65:4	2	int verbose
TYPE	65:0	65:0	3	int
TYPE_NAME	65:0	65:0	4	int
LEAF_NODE	65:0	65:0	5	int
NAME	65:4	65:4	3	verbose
LEAF_NODE	65:4	65:4	4	verbose
LEAF_NODE	65:11	65:11	2	;
SIMPLE_DECL	66:0	66:11	1	int stretch ;
VAR_DECL	66:0	66:4	2	int stretch
TYPE	66:0	66:0	3	int
TYPE_NAME	66:0	66:0	4	int
LEAF_NODE	66:0	66:0	5	int
NAME	66:4	66:4	3	stretch
LEAF_NODE	66:4	66:4	4	stretch
LEAF_NODE	66:11	66:11	2	;
SIMPLE_DECL	67:0	67:16	1	uint16 badfaxrun ;
VAR_DECL	67:0	67:7	2	uint16 badfaxrun
TYPE	67:0	67:0	3	uint16
TYPE_NAME	67:0	67:0	4	uint16
LEAF_NODE	67:0	67:0	5	uint16
NAME	67:7	67:7	3	badfaxrun
LEAF_NODE	67:7	67:7	4	badfaxrun
LEAF_NODE	67:16	67:16	2	;
SIMPLE_DECL	68:0	68:18	1	uint32 badfaxlines ;
VAR_DECL	68:0	68:7	2	uint32 badfaxlines
TYPE	68:0	68:0	3	uint32
TYPE_NAME	68:0	68:0	4	uint32
LEAF_NODE	68:0	68:0	5	uint32
NAME	68:7	68:7	3	badfaxlines
LEAF_NODE	68:7	68:7	4	badfaxlines
LEAF_NODE	68:18	68:18	2	;
SIMPLE_DECL	70:0	70:42	1	int copyFaxFile ; copyFaxFile copyFaxFile ( TIFF * tifin , TIFF * tifout ) ;
VAR_DECL	70:0	70:4	2	int copyFaxFile ; copyFaxFile copyFaxFile ( TIFF * tifin , TIFF * tifout )
TYPE	70:0	70:0	3	int
TYPE_NAME	70:0	70:0	4	int
LEAF_NODE	70:0	70:0	5	int
NAME	70:4	70:4	3	copyFaxFile
LEAF_NODE	70:4	70:4	4	copyFaxFile
LEAF_NODE	0:0	0:0	3	;
INIT	70:4	70:4	3	copyFaxFile copyFaxFile ( TIFF * tifin , TIFF * tifout )
ASSIGN	70:4	70:15	4	copyFaxFile copyFaxFile ( TIFF * tifin , TIFF * tifout )
LVAL	70:4	70:4	5	copyFaxFile
NAME	70:4	70:4	6	copyFaxFile
LEAF_NODE	70:4	70:4	7	copyFaxFile
ASSIGN_OP	70:4	70:4	5	copyFaxFile
NAME	70:4	70:4	6	copyFaxFile
LEAF_NODE	70:4	70:4	7	copyFaxFile
RVAL	70:15	70:41	5	( TIFF * tifin , TIFF * tifout )
LEAF_NODE	70:15	70:15	6	(
EXPR	70:16	70:35	6	TIFF * tifin , TIFF * tifout
FIELD	70:16	70:16	7	TIFF
LEAF_NODE	70:16	70:16	8	TIFF
LEAF_NODE	70:20	70:20	7	*
FIELD	70:22	70:22	7	tifin
LEAF_NODE	70:22	70:22	8	tifin
LEAF_NODE	70:27	70:27	7	,
FIELD	70:29	70:29	7	TIFF
LEAF_NODE	70:29	70:29	8	TIFF
LEAF_NODE	70:33	70:33	7	*
FIELD	70:35	70:35	7	tifout
LEAF_NODE	70:35	70:35	8	tifout
LEAF_NODE	70:41	70:41	6	)
LEAF_NODE	70:42	70:42	2	;
SIMPLE_DECL	71:7	71:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	71:7	71:12	2	void usage ; usage usage ( void )
TYPE	71:7	71:7	3	void
TYPE_NAME	71:7	71:7	4	void
LEAF_NODE	71:7	71:7	5	void
NAME	71:12	71:12	3	usage
LEAF_NODE	71:12	71:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	71:12	71:12	3	usage usage ( void )
ASSIGN	71:12	71:17	4	usage usage ( void )
LVAL	71:12	71:12	5	usage
NAME	71:12	71:12	6	usage
LEAF_NODE	71:12	71:12	7	usage
ASSIGN_OP	71:12	71:12	5	usage
NAME	71:12	71:12	6	usage
LEAF_NODE	71:12	71:12	7	usage
RVAL	71:17	71:22	5	( void )
LEAF_NODE	71:17	71:17	6	(
EXPR	71:18	71:18	6	void
FIELD	71:18	71:18	7	void
LEAF_NODE	71:18	71:18	8	void
LEAF_NODE	71:22	71:22	6	)
LEAF_NODE	71:23	71:23	2	;
SIMPLE_DECL	77:8	81:17	1	union _FAX_Client_Data BASE_CLASSES { thandle_t fh ; int fd ; } FAX_Client_Data ;
VAR_DECL	77:8	81:2	2	union _FAX_Client_Data BASE_CLASSES { thandle_t fh ; int fd ; } FAX_Client_Data
TYPE	77:8	77:8	3	union _FAX_Client_Data BASE_CLASSES { thandle_t fh ; int fd ; }
CLASS_DEF	77:8	81:0	4	union _FAX_Client_Data BASE_CLASSES { thandle_t fh ; int fd ; }
LEAF_NODE	77:8	77:8	5	union
CLASS_NAME	77:14	77:14	5	_FAX_Client_Data
LEAF_NODE	77:14	77:14	6	_FAX_Client_Data
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	78:0	78:0	5	{
CLASS_CONTENT	79:1	80:1	5	thandle_t fh ; int fd ;
SIMPLE_DECL	79:1	79:13	6	thandle_t fh ;
VAR_DECL	79:1	79:11	7	thandle_t fh
TYPE	79:1	79:1	8	thandle_t
TYPE_NAME	79:1	79:1	9	thandle_t
LEAF_NODE	79:1	79:1	10	thandle_t
NAME	79:11	79:11	8	fh
LEAF_NODE	79:11	79:11	9	fh
LEAF_NODE	79:13	79:13	7	;
SIMPLE_DECL	80:1	80:7	6	int fd ;
VAR_DECL	80:1	80:5	7	int fd
TYPE	80:1	80:1	8	int
TYPE_NAME	80:1	80:1	9	int
LEAF_NODE	80:1	80:1	10	int
NAME	80:5	80:5	8	fd
LEAF_NODE	80:5	80:5	9	fd
LEAF_NODE	80:7	80:7	7	;
LEAF_NODE	81:0	81:0	5	}
NAME	81:2	81:2	3	FAX_Client_Data
LEAF_NODE	81:2	81:2	4	FAX_Client_Data
LEAF_NODE	81:17	81:17	2	;
FUNCTION_DEF	83:0	356:0	1	
RETURN_TYPE	83:0	83:0	2	int
TYPE_NAME	83:0	83:0	3	int
LEAF_NODE	83:0	83:0	4	int
FUNCTION_NAME	84:0	84:0	2	main
LEAF_NODE	84:0	84:0	3	main
PARAMETER_LIST	84:4	84:27	2	( int argc , char * [ ] argv )
LEAF_NODE	84:4	84:4	3	(
PARAMETER_DECL	84:5	84:9	3	int argc
TYPE	84:5	84:5	4	int
TYPE_NAME	84:5	84:5	5	int
LEAF_NODE	84:5	84:5	6	int
NAME	84:9	84:9	4	argc
LEAF_NODE	84:9	84:9	5	argc
LEAF_NODE	84:13	84:13	3	,
PARAMETER_DECL	84:15	84:21	3	char * [ ] argv
TYPE	84:15	84:25	4	char * [ ]
TYPE_NAME	84:15	84:15	5	char
LEAF_NODE	84:15	84:15	6	char
POINTER	84:19	84:19	5	*
LEAF_NODE	84:19	84:19	6	*
TYPE_SUFFIX	84:25	84:26	5	[ ]
LEAF_NODE	84:25	84:25	6	[
LEAF_NODE	84:26	84:26	6	]
NAME	84:21	84:21	4	argv
LEAF_NODE	84:21	84:21	5	argv
LEAF_NODE	84:27	84:27	3	)
LEAF_NODE	85:0	85:0	2	{
STATEMENTS	86:1	355:22	2	
SIMPLE_DECL	86:1	86:9	3	FILE * in ;
VAR_DECL	86:1	86:7	4	FILE * in
TYPE	86:1	86:6	5	FILE *
TYPE_NAME	86:1	86:1	6	FILE
LEAF_NODE	86:1	86:1	7	FILE
POINTER	86:6	86:6	6	*
LEAF_NODE	86:6	86:6	7	*
NAME	86:7	86:7	5	in
LEAF_NODE	86:7	86:7	6	in
LEAF_NODE	86:9	86:9	4	;
SIMPLE_DECL	87:1	87:17	3	TIFF * out ; out = NULL ;
VAR_DECL	87:1	87:7	4	TIFF * out ; out = NULL
TYPE	87:1	87:6	5	TIFF *
TYPE_NAME	87:1	87:1	6	TIFF
LEAF_NODE	87:1	87:1	7	TIFF
POINTER	87:6	87:6	6	*
LEAF_NODE	87:6	87:6	7	*
NAME	87:7	87:7	5	out
LEAF_NODE	87:7	87:7	6	out
LEAF_NODE	0:0	0:0	5	;
INIT	87:7	87:7	5	out = NULL
ASSIGN	87:7	87:13	6	out = NULL
LVAL	87:7	87:7	7	out
NAME	87:7	87:7	8	out
LEAF_NODE	87:7	87:7	9	out
ASSIGN_OP	87:11	87:11	7	=
LEAF_NODE	87:11	87:11	8	=
RVAL	87:13	87:13	7	NULL
FIELD	87:13	87:13	8	NULL
LEAF_NODE	87:13	87:13	9	NULL
LEAF_NODE	87:17	87:17	4	;
SIMPLE_DECL	88:1	88:28	3	FAX_Client_Data client_data ;
VAR_DECL	88:1	88:17	4	FAX_Client_Data client_data
TYPE	88:1	88:1	5	FAX_Client_Data
TYPE_NAME	88:1	88:1	6	FAX_Client_Data
LEAF_NODE	88:1	88:1	7	FAX_Client_Data
NAME	88:17	88:17	5	client_data
LEAF_NODE	88:17	88:17	6	client_data
LEAF_NODE	88:28	88:28	4	;
SIMPLE_DECL	89:1	89:33	3	TIFFErrorHandler whandler ; whandler = NULL ;
VAR_DECL	89:1	89:18	4	TIFFErrorHandler whandler ; whandler = NULL
TYPE	89:1	89:1	5	TIFFErrorHandler
TYPE_NAME	89:1	89:1	6	TIFFErrorHandler
LEAF_NODE	89:1	89:1	7	TIFFErrorHandler
NAME	89:18	89:18	5	whandler
LEAF_NODE	89:18	89:18	6	whandler
LEAF_NODE	0:0	0:0	5	;
INIT	89:18	89:18	5	whandler = NULL
ASSIGN	89:18	89:29	6	whandler = NULL
LVAL	89:18	89:18	7	whandler
NAME	89:18	89:18	8	whandler
LEAF_NODE	89:18	89:18	9	whandler
ASSIGN_OP	89:27	89:27	7	=
LEAF_NODE	89:27	89:27	8	=
RVAL	89:29	89:29	7	NULL
FIELD	89:29	89:29	8	NULL
LEAF_NODE	89:29	89:29	9	NULL
LEAF_NODE	89:33	89:33	4	;
SIMPLE_DECL	90:1	90:43	3	int compression_in ; compression_in = COMPRESSION_CCITTFAX3 ;
VAR_DECL	90:1	90:5	4	int compression_in ; compression_in = COMPRESSION_CCITTFAX3
TYPE	90:1	90:1	5	int
TYPE_NAME	90:1	90:1	6	int
LEAF_NODE	90:1	90:1	7	int
NAME	90:5	90:5	5	compression_in
LEAF_NODE	90:5	90:5	6	compression_in
LEAF_NODE	0:0	0:0	5	;
INIT	90:5	90:5	5	compression_in = COMPRESSION_CCITTFAX3
ASSIGN	90:5	90:22	6	compression_in = COMPRESSION_CCITTFAX3
LVAL	90:5	90:5	7	compression_in
NAME	90:5	90:5	8	compression_in
LEAF_NODE	90:5	90:5	9	compression_in
ASSIGN_OP	90:20	90:20	7	=
LEAF_NODE	90:20	90:20	8	=
RVAL	90:22	90:22	7	COMPRESSION_CCITTFAX3
FIELD	90:22	90:22	8	COMPRESSION_CCITTFAX3
LEAF_NODE	90:22	90:22	9	COMPRESSION_CCITTFAX3
LEAF_NODE	90:43	90:43	4	;
SIMPLE_DECL	91:1	91:44	3	int compression_out ; compression_out = COMPRESSION_CCITTFAX3 ;
VAR_DECL	91:1	91:5	4	int compression_out ; compression_out = COMPRESSION_CCITTFAX3
TYPE	91:1	91:1	5	int
TYPE_NAME	91:1	91:1	6	int
LEAF_NODE	91:1	91:1	7	int
NAME	91:5	91:5	5	compression_out
LEAF_NODE	91:5	91:5	6	compression_out
LEAF_NODE	0:0	0:0	5	;
INIT	91:5	91:5	5	compression_out = COMPRESSION_CCITTFAX3
ASSIGN	91:5	91:23	6	compression_out = COMPRESSION_CCITTFAX3
LVAL	91:5	91:5	7	compression_out
NAME	91:5	91:5	8	compression_out
LEAF_NODE	91:5	91:5	9	compression_out
ASSIGN_OP	91:21	91:21	7	=
LEAF_NODE	91:21	91:21	8	=
RVAL	91:23	91:23	7	COMPRESSION_CCITTFAX3
FIELD	91:23	91:23	8	COMPRESSION_CCITTFAX3
LEAF_NODE	91:23	91:23	9	COMPRESSION_CCITTFAX3
LEAF_NODE	91:44	91:44	4	;
SIMPLE_DECL	92:1	92:37	3	int fillorder_in ; fillorder_in = FILLORDER_LSB2MSB ;
VAR_DECL	92:1	92:5	4	int fillorder_in ; fillorder_in = FILLORDER_LSB2MSB
TYPE	92:1	92:1	5	int
TYPE_NAME	92:1	92:1	6	int
LEAF_NODE	92:1	92:1	7	int
NAME	92:5	92:5	5	fillorder_in
LEAF_NODE	92:5	92:5	6	fillorder_in
LEAF_NODE	0:0	0:0	5	;
INIT	92:5	92:5	5	fillorder_in = FILLORDER_LSB2MSB
ASSIGN	92:5	92:20	6	fillorder_in = FILLORDER_LSB2MSB
LVAL	92:5	92:5	7	fillorder_in
NAME	92:5	92:5	8	fillorder_in
LEAF_NODE	92:5	92:5	9	fillorder_in
ASSIGN_OP	92:18	92:18	7	=
LEAF_NODE	92:18	92:18	8	=
RVAL	92:20	92:20	7	FILLORDER_LSB2MSB
FIELD	92:20	92:20	8	FILLORDER_LSB2MSB
LEAF_NODE	92:20	92:20	9	FILLORDER_LSB2MSB
LEAF_NODE	92:37	92:37	4	;
SIMPLE_DECL	93:1	93:38	3	int fillorder_out ; fillorder_out = FILLORDER_LSB2MSB ;
VAR_DECL	93:1	93:5	4	int fillorder_out ; fillorder_out = FILLORDER_LSB2MSB
TYPE	93:1	93:1	5	int
TYPE_NAME	93:1	93:1	6	int
LEAF_NODE	93:1	93:1	7	int
NAME	93:5	93:5	5	fillorder_out
LEAF_NODE	93:5	93:5	6	fillorder_out
LEAF_NODE	0:0	0:0	5	;
INIT	93:5	93:5	5	fillorder_out = FILLORDER_LSB2MSB
ASSIGN	93:5	93:21	6	fillorder_out = FILLORDER_LSB2MSB
LVAL	93:5	93:5	7	fillorder_out
NAME	93:5	93:5	8	fillorder_out
LEAF_NODE	93:5	93:5	9	fillorder_out
ASSIGN_OP	93:19	93:19	7	=
LEAF_NODE	93:19	93:19	8	=
RVAL	93:21	93:21	7	FILLORDER_LSB2MSB
FIELD	93:21	93:21	8	FILLORDER_LSB2MSB
LEAF_NODE	93:21	93:21	9	FILLORDER_LSB2MSB
LEAF_NODE	93:38	93:38	4	;
SIMPLE_DECL	94:1	94:28	3	uint32 group3options_in ; group3options_in = 0 ;
VAR_DECL	94:1	94:8	4	uint32 group3options_in ; group3options_in = 0
TYPE	94:1	94:1	5	uint32
TYPE_NAME	94:1	94:1	6	uint32
LEAF_NODE	94:1	94:1	7	uint32
NAME	94:8	94:8	5	group3options_in
LEAF_NODE	94:8	94:8	6	group3options_in
LEAF_NODE	0:0	0:0	5	;
INIT	94:8	94:8	5	group3options_in = 0
ASSIGN	94:8	94:27	6	group3options_in = 0
LVAL	94:8	94:8	7	group3options_in
NAME	94:8	94:8	8	group3options_in
LEAF_NODE	94:8	94:8	9	group3options_in
ASSIGN_OP	94:25	94:25	7	=
LEAF_NODE	94:25	94:25	8	=
RVAL	94:27	94:27	7	0
FIELD	94:27	94:27	8	0
LEAF_NODE	94:27	94:27	9	0
LEAF_NODE	94:28	94:28	4	;
SIMPLE_DECL	95:1	95:29	3	uint32 group3options_out ; group3options_out = 0 ;
VAR_DECL	95:1	95:8	4	uint32 group3options_out ; group3options_out = 0
TYPE	95:1	95:1	5	uint32
TYPE_NAME	95:1	95:1	6	uint32
LEAF_NODE	95:1	95:1	7	uint32
NAME	95:8	95:8	5	group3options_out
LEAF_NODE	95:8	95:8	6	group3options_out
LEAF_NODE	0:0	0:0	5	;
INIT	95:8	95:8	5	group3options_out = 0
ASSIGN	95:8	95:28	6	group3options_out = 0
LVAL	95:8	95:8	7	group3options_out
NAME	95:8	95:8	8	group3options_out
LEAF_NODE	95:8	95:8	9	group3options_out
ASSIGN_OP	95:26	95:26	7	=
LEAF_NODE	95:26	95:26	8	=
RVAL	95:28	95:28	7	0
FIELD	95:28	95:28	8	0
LEAF_NODE	95:28	95:28	9	0
LEAF_NODE	95:29	95:29	4	;
SIMPLE_DECL	96:1	96:28	3	uint32 group4options_in ; group4options_in = 0 ;
VAR_DECL	96:1	96:8	4	uint32 group4options_in ; group4options_in = 0
TYPE	96:1	96:1	5	uint32
TYPE_NAME	96:1	96:1	6	uint32
LEAF_NODE	96:1	96:1	7	uint32
NAME	96:8	96:8	5	group4options_in
LEAF_NODE	96:8	96:8	6	group4options_in
LEAF_NODE	0:0	0:0	5	;
INIT	96:8	96:8	5	group4options_in = 0
ASSIGN	96:8	96:27	6	group4options_in = 0
LVAL	96:8	96:8	7	group4options_in
NAME	96:8	96:8	8	group4options_in
LEAF_NODE	96:8	96:8	9	group4options_in
ASSIGN_OP	96:25	96:25	7	=
LEAF_NODE	96:25	96:25	8	=
RVAL	96:27	96:27	7	0
FIELD	96:27	96:27	8	0
LEAF_NODE	96:27	96:27	9	0
LEAF_NODE	96:28	96:28	4	;
SIMPLE_DECL	97:1	97:29	3	uint32 group4options_out ; group4options_out = 0 ;
VAR_DECL	97:1	97:8	4	uint32 group4options_out ; group4options_out = 0
TYPE	97:1	97:1	5	uint32
TYPE_NAME	97:1	97:1	6	uint32
LEAF_NODE	97:1	97:1	7	uint32
NAME	97:8	97:8	5	group4options_out
LEAF_NODE	97:8	97:8	6	group4options_out
LEAF_NODE	0:0	0:0	5	;
INIT	97:8	97:8	5	group4options_out = 0
ASSIGN	97:8	97:28	6	group4options_out = 0
LVAL	97:8	97:8	7	group4options_out
NAME	97:8	97:8	8	group4options_out
LEAF_NODE	97:8	97:8	9	group4options_out
ASSIGN_OP	97:26	97:26	7	=
LEAF_NODE	97:26	97:26	8	=
RVAL	97:28	97:28	7	0
FIELD	97:28	97:28	8	0
LEAF_NODE	97:28	97:28	9	0
LEAF_NODE	97:29	97:29	4	;
SIMPLE_DECL	98:1	98:36	3	uint32 defrowsperstrip ; defrowsperstrip = ( uint32 ) 0 ;
VAR_DECL	98:1	98:8	4	uint32 defrowsperstrip ; defrowsperstrip = ( uint32 ) 0
TYPE	98:1	98:1	5	uint32
TYPE_NAME	98:1	98:1	6	uint32
LEAF_NODE	98:1	98:1	7	uint32
NAME	98:8	98:8	5	defrowsperstrip
LEAF_NODE	98:8	98:8	6	defrowsperstrip
LEAF_NODE	0:0	0:0	5	;
INIT	98:8	98:8	5	defrowsperstrip = ( uint32 ) 0
ASSIGN	98:8	98:26	6	defrowsperstrip = ( uint32 ) 0
LVAL	98:8	98:8	7	defrowsperstrip
NAME	98:8	98:8	8	defrowsperstrip
LEAF_NODE	98:8	98:8	9	defrowsperstrip
ASSIGN_OP	98:24	98:24	7	=
LEAF_NODE	98:24	98:24	8	=
RVAL	98:26	98:35	7	( uint32 ) 0
LEAF_NODE	98:26	98:26	8	(
TYPE_NAME	98:27	98:27	8	uint32
LEAF_NODE	98:27	98:27	9	uint32
LEAF_NODE	98:33	98:33	8	)
FIELD	98:35	98:35	8	0
LEAF_NODE	98:35	98:35	9	0
LEAF_NODE	98:36	98:36	4	;
SIMPLE_DECL	99:1	99:20	3	uint32 rowsperstrip ;
VAR_DECL	99:1	99:8	4	uint32 rowsperstrip
TYPE	99:1	99:1	5	uint32
TYPE_NAME	99:1	99:1	6	uint32
LEAF_NODE	99:1	99:1	7	uint32
NAME	99:8	99:8	5	rowsperstrip
LEAF_NODE	99:8	99:8	6	rowsperstrip
LEAF_NODE	99:20	99:20	4	;
SIMPLE_DECL	100:1	100:44	3	int photometric_in ; photometric_in = PHOTOMETRIC_MINISWHITE ;
VAR_DECL	100:1	100:5	4	int photometric_in ; photometric_in = PHOTOMETRIC_MINISWHITE
TYPE	100:1	100:1	5	int
TYPE_NAME	100:1	100:1	6	int
LEAF_NODE	100:1	100:1	7	int
NAME	100:5	100:5	5	photometric_in
LEAF_NODE	100:5	100:5	6	photometric_in
LEAF_NODE	0:0	0:0	5	;
INIT	100:5	100:5	5	photometric_in = PHOTOMETRIC_MINISWHITE
ASSIGN	100:5	100:22	6	photometric_in = PHOTOMETRIC_MINISWHITE
LVAL	100:5	100:5	7	photometric_in
NAME	100:5	100:5	8	photometric_in
LEAF_NODE	100:5	100:5	9	photometric_in
ASSIGN_OP	100:20	100:20	7	=
LEAF_NODE	100:20	100:20	8	=
RVAL	100:22	100:22	7	PHOTOMETRIC_MINISWHITE
FIELD	100:22	100:22	8	PHOTOMETRIC_MINISWHITE
LEAF_NODE	100:22	100:22	9	PHOTOMETRIC_MINISWHITE
LEAF_NODE	100:44	100:44	4	;
SIMPLE_DECL	101:1	101:45	3	int photometric_out ; photometric_out = PHOTOMETRIC_MINISWHITE ;
VAR_DECL	101:1	101:5	4	int photometric_out ; photometric_out = PHOTOMETRIC_MINISWHITE
TYPE	101:1	101:1	5	int
TYPE_NAME	101:1	101:1	6	int
LEAF_NODE	101:1	101:1	7	int
NAME	101:5	101:5	5	photometric_out
LEAF_NODE	101:5	101:5	6	photometric_out
LEAF_NODE	0:0	0:0	5	;
INIT	101:5	101:5	5	photometric_out = PHOTOMETRIC_MINISWHITE
ASSIGN	101:5	101:23	6	photometric_out = PHOTOMETRIC_MINISWHITE
LVAL	101:5	101:5	7	photometric_out
NAME	101:5	101:5	8	photometric_out
LEAF_NODE	101:5	101:5	9	photometric_out
ASSIGN_OP	101:21	101:21	7	=
LEAF_NODE	101:21	101:21	8	=
RVAL	101:23	101:23	7	PHOTOMETRIC_MINISWHITE
FIELD	101:23	101:23	8	PHOTOMETRIC_MINISWHITE
LEAF_NODE	101:23	101:23	9	PHOTOMETRIC_MINISWHITE
LEAF_NODE	101:45	101:45	4	;
SIMPLE_DECL	102:1	102:26	3	int mode ; mode = FAXMODE_CLASSF ;
VAR_DECL	102:1	102:5	4	int mode ; mode = FAXMODE_CLASSF
TYPE	102:1	102:1	5	int
TYPE_NAME	102:1	102:1	6	int
LEAF_NODE	102:1	102:1	7	int
NAME	102:5	102:5	5	mode
LEAF_NODE	102:5	102:5	6	mode
LEAF_NODE	0:0	0:0	5	;
INIT	102:5	102:5	5	mode = FAXMODE_CLASSF
ASSIGN	102:5	102:12	6	mode = FAXMODE_CLASSF
LVAL	102:5	102:5	7	mode
NAME	102:5	102:5	8	mode
LEAF_NODE	102:5	102:5	9	mode
ASSIGN_OP	102:10	102:10	7	=
LEAF_NODE	102:10	102:10	8	=
RVAL	102:12	102:12	7	FAXMODE_CLASSF
FIELD	102:12	102:12	8	FAXMODE_CLASSF
LEAF_NODE	102:12	102:12	9	FAXMODE_CLASSF
LEAF_NODE	102:26	102:26	4	;
SIMPLE_DECL	103:1	103:9	3	int rows ;
VAR_DECL	103:1	103:5	4	int rows
TYPE	103:1	103:1	5	int
TYPE_NAME	103:1	103:1	6	int
LEAF_NODE	103:1	103:1	7	int
NAME	103:5	103:5	5	rows
LEAF_NODE	103:5	103:5	6	rows
LEAF_NODE	103:9	103:9	4	;
SIMPLE_DECL	104:1	104:6	3	int c ;
VAR_DECL	104:1	104:5	4	int c
TYPE	104:1	104:1	5	int
TYPE_NAME	104:1	104:1	6	int
LEAF_NODE	104:1	104:1	7	int
NAME	104:5	104:5	5	c
LEAF_NODE	104:5	104:5	6	c
LEAF_NODE	104:6	104:6	4	;
SIMPLE_DECL	105:1	105:15	3	int pn , int npages ;
INIT_DECL_LIST	105:1	105:1	4	int pn , int npages
VAR_DECL	105:1	105:5	5	int pn
TYPE	105:1	105:1	6	int
TYPE_NAME	105:1	105:1	7	int
LEAF_NODE	105:1	105:1	8	int
NAME	105:5	105:5	6	pn
LEAF_NODE	105:5	105:5	7	pn
LEAF_NODE	105:7	105:7	5	,
VAR_DECL	105:1	105:9	5	int npages
TYPE	105:1	105:1	6	int
TYPE_NAME	105:1	105:1	7	int
LEAF_NODE	105:1	105:1	8	int
NAME	105:9	105:9	6	npages
LEAF_NODE	105:9	105:9	7	npages
LEAF_NODE	105:15	105:15	4	;
SIMPLE_DECL	106:1	106:19	3	float resY ; resY = 196.0 ;
VAR_DECL	106:1	106:7	4	float resY ; resY = 196.0
TYPE	106:1	106:1	5	float
TYPE_NAME	106:1	106:1	6	float
LEAF_NODE	106:1	106:1	7	float
NAME	106:7	106:7	5	resY
LEAF_NODE	106:7	106:7	6	resY
LEAF_NODE	0:0	0:0	5	;
INIT	106:7	106:7	5	resY = 196.0
ASSIGN	106:7	106:14	6	resY = 196.0
LVAL	106:7	106:7	7	resY
NAME	106:7	106:7	8	resY
LEAF_NODE	106:7	106:7	9	resY
ASSIGN_OP	106:12	106:12	7	=
LEAF_NODE	106:12	106:12	8	=
RVAL	106:14	106:14	7	196.0
FIELD	106:14	106:14	8	196.0
LEAF_NODE	106:14	106:14	9	196.0
LEAF_NODE	106:19	106:19	4	;
LEAF_NODE	109:1	109:1	3	extern
SIMPLE_DECL	109:8	109:18	3	int optind ;
VAR_DECL	109:8	109:12	4	int optind
TYPE	109:8	109:8	5	int
TYPE_NAME	109:8	109:8	6	int
LEAF_NODE	109:8	109:8	7	int
NAME	109:12	109:12	5	optind
LEAF_NODE	109:12	109:12	6	optind
LEAF_NODE	109:18	109:18	4	;
LEAF_NODE	110:1	110:1	3	extern
SIMPLE_DECL	110:8	110:20	3	char * optarg ;
VAR_DECL	110:8	110:14	4	char * optarg
TYPE	110:8	110:12	5	char *
TYPE_NAME	110:8	110:8	6	char
LEAF_NODE	110:8	110:8	7	char
POINTER	110:12	110:12	6	*
LEAF_NODE	110:12	110:12	7	*
NAME	110:14	110:14	5	optarg
LEAF_NODE	110:14	110:14	6	optarg
LEAF_NODE	110:20	110:20	4	;
ITERATION	113:1	114:2	3	
KEYWORD	113:1	113:1	4	while
LEAF_NODE	113:1	113:1	5	while
LEAF_NODE	113:7	113:7	4	(
CONDITION	113:8	113:8	4	( c = getopt ( argc , argv , "R:X:o:r:1234ABLMPUW5678abcflmprsuvwz?" ) ) != - 1
EXPR	113:8	113:77	5	( c = getopt ( argc , argv , "R:X:o:r:1234ABLMPUW5678abcflmprsuvwz?" ) ) != - 1
LEAF_NODE	113:8	113:8	6	(
ASSIGN	113:9	113:13	6	c = getopt ( argc , argv , "R:X:o:r:1234ABLMPUW5678abcflmprsuvwz?" )
LVAL	113:9	113:9	7	c
FIELD	113:9	113:9	8	c
LEAF_NODE	113:9	113:9	9	c
ASSIGN_OP	113:11	113:11	7	=
LEAF_NODE	113:11	113:11	8	=
RVAL	113:13	113:13	7	getopt ( argc , argv , "R:X:o:r:1234ABLMPUW5678abcflmprsuvwz?" )
FUNCTION_CALL	113:13	113:71	8	getopt ( argc , argv , "R:X:o:r:1234ABLMPUW5678abcflmprsuvwz?" )
CALLEE	113:13	113:13	9	getopt
LEAF_NODE	113:13	113:13	10	getopt
LEAF_NODE	113:19	113:19	9	(
ARGUMENT	113:20	113:20	9	argc
FIELD	113:20	113:20	10	argc
LEAF_NODE	113:20	113:20	11	argc
LEAF_NODE	113:24	113:24	9	,
ARGUMENT	113:26	113:26	9	argv
FIELD	113:26	113:26	10	argv
LEAF_NODE	113:26	113:26	11	argv
LEAF_NODE	113:30	113:30	9	,
ARGUMENT	113:32	113:32	9	"R:X:o:r:1234ABLMPUW5678abcflmprsuvwz?"
FIELD	113:32	113:32	10	"R:X:o:r:1234ABLMPUW5678abcflmprsuvwz?"
LEAF_NODE	113:32	113:32	11	"R:X:o:r:1234ABLMPUW5678abcflmprsuvwz?"
LEAF_NODE	113:71	113:71	9	)
LEAF_NODE	113:72	113:72	6	)
EQ_OPERATOR	113:74	113:74	6	!=
LEAF_NODE	113:74	113:74	7	!=
UNARY_EXPR	113:77	113:78	6	- 1
UNARY_OPERATOR	113:77	113:77	7	-
LEAF_NODE	113:77	113:77	8	-
FIELD	113:78	113:78	7	1
LEAF_NODE	113:78	113:78	8	1
LEAF_NODE	113:79	113:79	4	)
STATEMENTS	114:2	114:2	4	
SELECTION	114:2	114:13	5	
KEYWORD	114:2	114:2	6	switch
LEAF_NODE	114:2	114:2	7	switch
LEAF_NODE	114:9	114:9	6	(
CONDITION	114:10	114:10	6	c
EXPR	114:10	114:10	7	c
FIELD	114:10	114:10	8	c
LEAF_NODE	114:10	114:10	9	c
LEAF_NODE	114:11	114:11	6	)
STATEMENTS	114:13	222:2	6	
LEAF_NODE	114:13	114:13	7	{
STATEMENTS	116:2	220:3	7	
LEAF_NODE	116:2	116:2	8	case
LEAF_NODE	116:7	116:7	8	'3'
LEAF_NODE	116:10	116:10	8	:
EXPR_STATEMENT	117:3	117:41	8	compression_in = COMPRESSION_CCITTFAX3 ;
EXPR	117:3	117:3	9	compression_in = COMPRESSION_CCITTFAX3
ASSIGN	117:3	117:20	10	compression_in = COMPRESSION_CCITTFAX3
LVAL	117:3	117:3	11	compression_in
FIELD	117:3	117:3	12	compression_in
LEAF_NODE	117:3	117:3	13	compression_in
ASSIGN_OP	117:18	117:18	11	=
LEAF_NODE	117:18	117:18	12	=
RVAL	117:20	117:20	11	COMPRESSION_CCITTFAX3
FIELD	117:20	117:20	12	COMPRESSION_CCITTFAX3
LEAF_NODE	117:20	117:20	13	COMPRESSION_CCITTFAX3
LEAF_NODE	117:41	117:41	9	;
JUMP_STATEMENT	118:3	118:8	8	break DESTINATION ;
KEYWORD	118:3	118:3	9	break
LEAF_NODE	118:3	118:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	118:8	118:8	9	;
LEAF_NODE	119:2	119:2	8	case
LEAF_NODE	119:7	119:7	8	'4'
LEAF_NODE	119:10	119:10	8	:
EXPR_STATEMENT	120:3	120:41	8	compression_in = COMPRESSION_CCITTFAX4 ;
EXPR	120:3	120:3	9	compression_in = COMPRESSION_CCITTFAX4
ASSIGN	120:3	120:20	10	compression_in = COMPRESSION_CCITTFAX4
LVAL	120:3	120:3	11	compression_in
FIELD	120:3	120:3	12	compression_in
LEAF_NODE	120:3	120:3	13	compression_in
ASSIGN_OP	120:18	120:18	11	=
LEAF_NODE	120:18	120:18	12	=
RVAL	120:20	120:20	11	COMPRESSION_CCITTFAX4
FIELD	120:20	120:20	12	COMPRESSION_CCITTFAX4
LEAF_NODE	120:20	120:20	13	COMPRESSION_CCITTFAX4
LEAF_NODE	120:41	120:41	9	;
JUMP_STATEMENT	121:3	121:8	8	break DESTINATION ;
KEYWORD	121:3	121:3	9	break
LEAF_NODE	121:3	121:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	121:8	121:8	9	;
LEAF_NODE	122:2	122:2	8	case
LEAF_NODE	122:7	122:7	8	'U'
LEAF_NODE	122:10	122:10	8	:
EXPR_STATEMENT	123:3	123:45	8	group3options_in |= GROUP3OPT_UNCOMPRESSED ;
EXPR	123:3	123:3	9	group3options_in |= GROUP3OPT_UNCOMPRESSED
ASSIGN	123:3	123:23	10	group3options_in |= GROUP3OPT_UNCOMPRESSED
LVAL	123:3	123:3	11	group3options_in
FIELD	123:3	123:3	12	group3options_in
LEAF_NODE	123:3	123:3	13	group3options_in
ASSIGN_OP	123:20	123:20	11	|=
LEAF_NODE	123:20	123:20	12	|=
RVAL	123:23	123:23	11	GROUP3OPT_UNCOMPRESSED
FIELD	123:23	123:23	12	GROUP3OPT_UNCOMPRESSED
LEAF_NODE	123:23	123:23	13	GROUP3OPT_UNCOMPRESSED
LEAF_NODE	123:45	123:45	9	;
EXPR_STATEMENT	124:3	124:45	8	group4options_in |= GROUP4OPT_UNCOMPRESSED ;
EXPR	124:3	124:3	9	group4options_in |= GROUP4OPT_UNCOMPRESSED
ASSIGN	124:3	124:23	10	group4options_in |= GROUP4OPT_UNCOMPRESSED
LVAL	124:3	124:3	11	group4options_in
FIELD	124:3	124:3	12	group4options_in
LEAF_NODE	124:3	124:3	13	group4options_in
ASSIGN_OP	124:20	124:20	11	|=
LEAF_NODE	124:20	124:20	12	|=
RVAL	124:23	124:23	11	GROUP4OPT_UNCOMPRESSED
FIELD	124:23	124:23	12	GROUP4OPT_UNCOMPRESSED
LEAF_NODE	124:23	124:23	13	GROUP4OPT_UNCOMPRESSED
LEAF_NODE	124:45	124:45	9	;
JUMP_STATEMENT	125:3	125:8	8	break DESTINATION ;
KEYWORD	125:3	125:3	9	break
LEAF_NODE	125:3	125:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	125:8	125:8	9	;
LEAF_NODE	126:2	126:2	8	case
LEAF_NODE	126:7	126:7	8	'1'
LEAF_NODE	126:10	126:10	8	:
EXPR_STATEMENT	127:3	127:44	8	group3options_in &= ~GROUP3OPT_2DENCODING ;
EXPR	127:3	127:3	9	group3options_in &= ~GROUP3OPT_2DENCODING
ASSIGN	127:3	127:23	10	group3options_in &= ~GROUP3OPT_2DENCODING
LVAL	127:3	127:3	11	group3options_in
FIELD	127:3	127:3	12	group3options_in
LEAF_NODE	127:3	127:3	13	group3options_in
ASSIGN_OP	127:20	127:20	11	&=
LEAF_NODE	127:20	127:20	12	&=
RVAL	127:23	127:23	11	~GROUP3OPT_2DENCODING
FIELD	127:23	127:23	12	~GROUP3OPT_2DENCODING
LEAF_NODE	127:23	127:23	13	~GROUP3OPT_2DENCODING
LEAF_NODE	127:44	127:44	9	;
JUMP_STATEMENT	128:3	128:8	8	break DESTINATION ;
KEYWORD	128:3	128:3	9	break
LEAF_NODE	128:3	128:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	128:8	128:8	9	;
LEAF_NODE	129:2	129:2	8	case
LEAF_NODE	129:7	129:7	8	'2'
LEAF_NODE	129:10	129:10	8	:
EXPR_STATEMENT	130:3	130:43	8	group3options_in |= GROUP3OPT_2DENCODING ;
EXPR	130:3	130:3	9	group3options_in |= GROUP3OPT_2DENCODING
ASSIGN	130:3	130:23	10	group3options_in |= GROUP3OPT_2DENCODING
LVAL	130:3	130:3	11	group3options_in
FIELD	130:3	130:3	12	group3options_in
LEAF_NODE	130:3	130:3	13	group3options_in
ASSIGN_OP	130:20	130:20	11	|=
LEAF_NODE	130:20	130:20	12	|=
RVAL	130:23	130:23	11	GROUP3OPT_2DENCODING
FIELD	130:23	130:23	12	GROUP3OPT_2DENCODING
LEAF_NODE	130:23	130:23	13	GROUP3OPT_2DENCODING
LEAF_NODE	130:43	130:43	9	;
JUMP_STATEMENT	131:3	131:8	8	break DESTINATION ;
KEYWORD	131:3	131:3	9	break
LEAF_NODE	131:3	131:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	131:8	131:8	9	;
LEAF_NODE	132:2	132:2	8	case
LEAF_NODE	132:7	132:7	8	'P'
LEAF_NODE	132:10	132:10	8	:
EXPR_STATEMENT	133:3	133:42	8	group3options_in &= ~GROUP3OPT_FILLBITS ;
EXPR	133:3	133:3	9	group3options_in &= ~GROUP3OPT_FILLBITS
ASSIGN	133:3	133:23	10	group3options_in &= ~GROUP3OPT_FILLBITS
LVAL	133:3	133:3	11	group3options_in
FIELD	133:3	133:3	12	group3options_in
LEAF_NODE	133:3	133:3	13	group3options_in
ASSIGN_OP	133:20	133:20	11	&=
LEAF_NODE	133:20	133:20	12	&=
RVAL	133:23	133:23	11	~GROUP3OPT_FILLBITS
FIELD	133:23	133:23	12	~GROUP3OPT_FILLBITS
LEAF_NODE	133:23	133:23	13	~GROUP3OPT_FILLBITS
LEAF_NODE	133:42	133:42	9	;
JUMP_STATEMENT	134:3	134:8	8	break DESTINATION ;
KEYWORD	134:3	134:3	9	break
LEAF_NODE	134:3	134:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	134:8	134:8	9	;
LEAF_NODE	135:2	135:2	8	case
LEAF_NODE	135:7	135:7	8	'A'
LEAF_NODE	135:10	135:10	8	:
EXPR_STATEMENT	136:3	136:41	8	group3options_in |= GROUP3OPT_FILLBITS ;
EXPR	136:3	136:3	9	group3options_in |= GROUP3OPT_FILLBITS
ASSIGN	136:3	136:23	10	group3options_in |= GROUP3OPT_FILLBITS
LVAL	136:3	136:3	11	group3options_in
FIELD	136:3	136:3	12	group3options_in
LEAF_NODE	136:3	136:3	13	group3options_in
ASSIGN_OP	136:20	136:20	11	|=
LEAF_NODE	136:20	136:20	12	|=
RVAL	136:23	136:23	11	GROUP3OPT_FILLBITS
FIELD	136:23	136:23	12	GROUP3OPT_FILLBITS
LEAF_NODE	136:23	136:23	13	GROUP3OPT_FILLBITS
LEAF_NODE	136:41	136:41	9	;
JUMP_STATEMENT	137:3	137:8	8	break DESTINATION ;
KEYWORD	137:3	137:3	9	break
LEAF_NODE	137:3	137:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	137:8	137:8	9	;
LEAF_NODE	138:2	138:2	8	case
LEAF_NODE	138:7	138:7	8	'W'
LEAF_NODE	138:10	138:10	8	:
EXPR_STATEMENT	139:3	139:42	8	photometric_in = PHOTOMETRIC_MINISWHITE ;
EXPR	139:3	139:3	9	photometric_in = PHOTOMETRIC_MINISWHITE
ASSIGN	139:3	139:20	10	photometric_in = PHOTOMETRIC_MINISWHITE
LVAL	139:3	139:3	11	photometric_in
FIELD	139:3	139:3	12	photometric_in
LEAF_NODE	139:3	139:3	13	photometric_in
ASSIGN_OP	139:18	139:18	11	=
LEAF_NODE	139:18	139:18	12	=
RVAL	139:20	139:20	11	PHOTOMETRIC_MINISWHITE
FIELD	139:20	139:20	12	PHOTOMETRIC_MINISWHITE
LEAF_NODE	139:20	139:20	13	PHOTOMETRIC_MINISWHITE
LEAF_NODE	139:42	139:42	9	;
JUMP_STATEMENT	140:3	140:8	8	break DESTINATION ;
KEYWORD	140:3	140:3	9	break
LEAF_NODE	140:3	140:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	140:8	140:8	9	;
LEAF_NODE	141:2	141:2	8	case
LEAF_NODE	141:7	141:7	8	'B'
LEAF_NODE	141:10	141:10	8	:
EXPR_STATEMENT	142:3	142:42	8	photometric_in = PHOTOMETRIC_MINISBLACK ;
EXPR	142:3	142:3	9	photometric_in = PHOTOMETRIC_MINISBLACK
ASSIGN	142:3	142:20	10	photometric_in = PHOTOMETRIC_MINISBLACK
LVAL	142:3	142:3	11	photometric_in
FIELD	142:3	142:3	12	photometric_in
LEAF_NODE	142:3	142:3	13	photometric_in
ASSIGN_OP	142:18	142:18	11	=
LEAF_NODE	142:18	142:18	12	=
RVAL	142:20	142:20	11	PHOTOMETRIC_MINISBLACK
FIELD	142:20	142:20	12	PHOTOMETRIC_MINISBLACK
LEAF_NODE	142:20	142:20	13	PHOTOMETRIC_MINISBLACK
LEAF_NODE	142:42	142:42	9	;
JUMP_STATEMENT	143:3	143:8	8	break DESTINATION ;
KEYWORD	143:3	143:3	9	break
LEAF_NODE	143:3	143:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	143:8	143:8	9	;
LEAF_NODE	144:2	144:2	8	case
LEAF_NODE	144:7	144:7	8	'L'
LEAF_NODE	144:10	144:10	8	:
EXPR_STATEMENT	145:3	145:35	8	fillorder_in = FILLORDER_LSB2MSB ;
EXPR	145:3	145:3	9	fillorder_in = FILLORDER_LSB2MSB
ASSIGN	145:3	145:18	10	fillorder_in = FILLORDER_LSB2MSB
LVAL	145:3	145:3	11	fillorder_in
FIELD	145:3	145:3	12	fillorder_in
LEAF_NODE	145:3	145:3	13	fillorder_in
ASSIGN_OP	145:16	145:16	11	=
LEAF_NODE	145:16	145:16	12	=
RVAL	145:18	145:18	11	FILLORDER_LSB2MSB
FIELD	145:18	145:18	12	FILLORDER_LSB2MSB
LEAF_NODE	145:18	145:18	13	FILLORDER_LSB2MSB
LEAF_NODE	145:35	145:35	9	;
JUMP_STATEMENT	146:3	146:8	8	break DESTINATION ;
KEYWORD	146:3	146:3	9	break
LEAF_NODE	146:3	146:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	146:8	146:8	9	;
LEAF_NODE	147:2	147:2	8	case
LEAF_NODE	147:7	147:7	8	'M'
LEAF_NODE	147:10	147:10	8	:
EXPR_STATEMENT	148:3	148:35	8	fillorder_in = FILLORDER_MSB2LSB ;
EXPR	148:3	148:3	9	fillorder_in = FILLORDER_MSB2LSB
ASSIGN	148:3	148:18	10	fillorder_in = FILLORDER_MSB2LSB
LVAL	148:3	148:3	11	fillorder_in
FIELD	148:3	148:3	12	fillorder_in
LEAF_NODE	148:3	148:3	13	fillorder_in
ASSIGN_OP	148:16	148:16	11	=
LEAF_NODE	148:16	148:16	12	=
RVAL	148:18	148:18	11	FILLORDER_MSB2LSB
FIELD	148:18	148:18	12	FILLORDER_MSB2LSB
LEAF_NODE	148:18	148:18	13	FILLORDER_MSB2LSB
LEAF_NODE	148:35	148:35	9	;
JUMP_STATEMENT	149:3	149:8	8	break DESTINATION ;
KEYWORD	149:3	149:3	9	break
LEAF_NODE	149:3	149:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	149:8	149:8	9	;
LEAF_NODE	150:2	150:2	8	case
LEAF_NODE	150:7	150:7	8	'R'
LEAF_NODE	150:10	150:10	8	:
EXPR_STATEMENT	151:3	151:30	8	resY = ( float ) atof ( optarg ) ;
EXPR	151:3	151:3	9	resY = ( float ) atof ( optarg )
ASSIGN	151:3	151:10	10	resY = ( float ) atof ( optarg )
LVAL	151:3	151:3	11	resY
FIELD	151:3	151:3	12	resY
LEAF_NODE	151:3	151:3	13	resY
ASSIGN_OP	151:8	151:8	11	=
LEAF_NODE	151:8	151:8	12	=
RVAL	151:10	151:18	11	( float ) atof ( optarg )
LEAF_NODE	151:10	151:10	12	(
TYPE_NAME	151:11	151:11	12	float
LEAF_NODE	151:11	151:11	13	float
LEAF_NODE	151:16	151:16	12	)
FUNCTION_CALL	151:18	151:29	12	atof ( optarg )
CALLEE	151:18	151:18	13	atof
LEAF_NODE	151:18	151:18	14	atof
LEAF_NODE	151:22	151:22	13	(
ARGUMENT	151:23	151:23	13	optarg
FIELD	151:23	151:23	14	optarg
LEAF_NODE	151:23	151:23	15	optarg
LEAF_NODE	151:29	151:29	13	)
LEAF_NODE	151:30	151:30	9	;
JUMP_STATEMENT	152:3	152:8	8	break DESTINATION ;
KEYWORD	152:3	152:3	9	break
LEAF_NODE	152:3	152:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	152:8	152:8	9	;
LEAF_NODE	153:2	153:2	8	case
LEAF_NODE	153:7	153:7	8	'X'
LEAF_NODE	153:10	153:10	8	:
EXPR_STATEMENT	154:3	154:32	8	xsize = ( uint32 ) atoi ( optarg ) ;
EXPR	154:3	154:3	9	xsize = ( uint32 ) atoi ( optarg )
ASSIGN	154:3	154:11	10	xsize = ( uint32 ) atoi ( optarg )
LVAL	154:3	154:3	11	xsize
FIELD	154:3	154:3	12	xsize
LEAF_NODE	154:3	154:3	13	xsize
ASSIGN_OP	154:9	154:9	11	=
LEAF_NODE	154:9	154:9	12	=
RVAL	154:11	154:20	11	( uint32 ) atoi ( optarg )
LEAF_NODE	154:11	154:11	12	(
TYPE_NAME	154:12	154:12	12	uint32
LEAF_NODE	154:12	154:12	13	uint32
LEAF_NODE	154:18	154:18	12	)
FUNCTION_CALL	154:20	154:31	12	atoi ( optarg )
CALLEE	154:20	154:20	13	atoi
LEAF_NODE	154:20	154:20	14	atoi
LEAF_NODE	154:24	154:24	13	(
ARGUMENT	154:25	154:25	13	optarg
FIELD	154:25	154:25	14	optarg
LEAF_NODE	154:25	154:25	15	optarg
LEAF_NODE	154:31	154:31	13	)
LEAF_NODE	154:32	154:32	9	;
JUMP_STATEMENT	155:3	155:8	8	break DESTINATION ;
KEYWORD	155:3	155:3	9	break
LEAF_NODE	155:3	155:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	155:8	155:8	9	;
LEAF_NODE	158:2	158:2	8	case
LEAF_NODE	158:7	158:7	8	'7'
LEAF_NODE	158:10	158:10	8	:
EXPR_STATEMENT	159:3	159:42	8	compression_out = COMPRESSION_CCITTFAX3 ;
EXPR	159:3	159:3	9	compression_out = COMPRESSION_CCITTFAX3
ASSIGN	159:3	159:21	10	compression_out = COMPRESSION_CCITTFAX3
LVAL	159:3	159:3	11	compression_out
FIELD	159:3	159:3	12	compression_out
LEAF_NODE	159:3	159:3	13	compression_out
ASSIGN_OP	159:19	159:19	11	=
LEAF_NODE	159:19	159:19	12	=
RVAL	159:21	159:21	11	COMPRESSION_CCITTFAX3
FIELD	159:21	159:21	12	COMPRESSION_CCITTFAX3
LEAF_NODE	159:21	159:21	13	COMPRESSION_CCITTFAX3
LEAF_NODE	159:42	159:42	9	;
JUMP_STATEMENT	160:3	160:8	8	break DESTINATION ;
KEYWORD	160:3	160:3	9	break
LEAF_NODE	160:3	160:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	160:8	160:8	9	;
LEAF_NODE	161:2	161:2	8	case
LEAF_NODE	161:7	161:7	8	'8'
LEAF_NODE	161:10	161:10	8	:
EXPR_STATEMENT	162:3	162:42	8	compression_out = COMPRESSION_CCITTFAX4 ;
EXPR	162:3	162:3	9	compression_out = COMPRESSION_CCITTFAX4
ASSIGN	162:3	162:21	10	compression_out = COMPRESSION_CCITTFAX4
LVAL	162:3	162:3	11	compression_out
FIELD	162:3	162:3	12	compression_out
LEAF_NODE	162:3	162:3	13	compression_out
ASSIGN_OP	162:19	162:19	11	=
LEAF_NODE	162:19	162:19	12	=
RVAL	162:21	162:21	11	COMPRESSION_CCITTFAX4
FIELD	162:21	162:21	12	COMPRESSION_CCITTFAX4
LEAF_NODE	162:21	162:21	13	COMPRESSION_CCITTFAX4
LEAF_NODE	162:42	162:42	9	;
JUMP_STATEMENT	163:3	163:8	8	break DESTINATION ;
KEYWORD	163:3	163:3	9	break
LEAF_NODE	163:3	163:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	163:8	163:8	9	;
LEAF_NODE	164:2	164:2	8	case
LEAF_NODE	164:7	164:7	8	'u'
LEAF_NODE	164:10	164:10	8	:
EXPR_STATEMENT	165:3	165:46	8	group3options_out |= GROUP3OPT_UNCOMPRESSED ;
EXPR	165:3	165:3	9	group3options_out |= GROUP3OPT_UNCOMPRESSED
ASSIGN	165:3	165:24	10	group3options_out |= GROUP3OPT_UNCOMPRESSED
LVAL	165:3	165:3	11	group3options_out
FIELD	165:3	165:3	12	group3options_out
LEAF_NODE	165:3	165:3	13	group3options_out
ASSIGN_OP	165:21	165:21	11	|=
LEAF_NODE	165:21	165:21	12	|=
RVAL	165:24	165:24	11	GROUP3OPT_UNCOMPRESSED
FIELD	165:24	165:24	12	GROUP3OPT_UNCOMPRESSED
LEAF_NODE	165:24	165:24	13	GROUP3OPT_UNCOMPRESSED
LEAF_NODE	165:46	165:46	9	;
EXPR_STATEMENT	166:3	166:46	8	group4options_out |= GROUP4OPT_UNCOMPRESSED ;
EXPR	166:3	166:3	9	group4options_out |= GROUP4OPT_UNCOMPRESSED
ASSIGN	166:3	166:24	10	group4options_out |= GROUP4OPT_UNCOMPRESSED
LVAL	166:3	166:3	11	group4options_out
FIELD	166:3	166:3	12	group4options_out
LEAF_NODE	166:3	166:3	13	group4options_out
ASSIGN_OP	166:21	166:21	11	|=
LEAF_NODE	166:21	166:21	12	|=
RVAL	166:24	166:24	11	GROUP4OPT_UNCOMPRESSED
FIELD	166:24	166:24	12	GROUP4OPT_UNCOMPRESSED
LEAF_NODE	166:24	166:24	13	GROUP4OPT_UNCOMPRESSED
LEAF_NODE	166:46	166:46	9	;
JUMP_STATEMENT	167:3	167:8	8	break DESTINATION ;
KEYWORD	167:3	167:3	9	break
LEAF_NODE	167:3	167:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	167:8	167:8	9	;
LEAF_NODE	168:2	168:2	8	case
LEAF_NODE	168:7	168:7	8	'5'
LEAF_NODE	168:10	168:10	8	:
EXPR_STATEMENT	169:3	169:45	8	group3options_out &= ~GROUP3OPT_2DENCODING ;
EXPR	169:3	169:3	9	group3options_out &= ~GROUP3OPT_2DENCODING
ASSIGN	169:3	169:24	10	group3options_out &= ~GROUP3OPT_2DENCODING
LVAL	169:3	169:3	11	group3options_out
FIELD	169:3	169:3	12	group3options_out
LEAF_NODE	169:3	169:3	13	group3options_out
ASSIGN_OP	169:21	169:21	11	&=
LEAF_NODE	169:21	169:21	12	&=
RVAL	169:24	169:24	11	~GROUP3OPT_2DENCODING
FIELD	169:24	169:24	12	~GROUP3OPT_2DENCODING
LEAF_NODE	169:24	169:24	13	~GROUP3OPT_2DENCODING
LEAF_NODE	169:45	169:45	9	;
JUMP_STATEMENT	170:3	170:8	8	break DESTINATION ;
KEYWORD	170:3	170:3	9	break
LEAF_NODE	170:3	170:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	170:8	170:8	9	;
LEAF_NODE	171:2	171:2	8	case
LEAF_NODE	171:7	171:7	8	'6'
LEAF_NODE	171:10	171:10	8	:
EXPR_STATEMENT	172:3	172:44	8	group3options_out |= GROUP3OPT_2DENCODING ;
EXPR	172:3	172:3	9	group3options_out |= GROUP3OPT_2DENCODING
ASSIGN	172:3	172:24	10	group3options_out |= GROUP3OPT_2DENCODING
LVAL	172:3	172:3	11	group3options_out
FIELD	172:3	172:3	12	group3options_out
LEAF_NODE	172:3	172:3	13	group3options_out
ASSIGN_OP	172:21	172:21	11	|=
LEAF_NODE	172:21	172:21	12	|=
RVAL	172:24	172:24	11	GROUP3OPT_2DENCODING
FIELD	172:24	172:24	12	GROUP3OPT_2DENCODING
LEAF_NODE	172:24	172:24	13	GROUP3OPT_2DENCODING
LEAF_NODE	172:44	172:44	9	;
JUMP_STATEMENT	173:3	173:8	8	break DESTINATION ;
KEYWORD	173:3	173:3	9	break
LEAF_NODE	173:3	173:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	173:8	173:8	9	;
LEAF_NODE	174:2	174:2	8	case
LEAF_NODE	174:7	174:7	8	'c'
LEAF_NODE	174:10	174:10	8	:
EXPR_STATEMENT	175:3	175:25	8	mode = FAXMODE_CLASSIC ;
EXPR	175:3	175:3	9	mode = FAXMODE_CLASSIC
ASSIGN	175:3	175:10	10	mode = FAXMODE_CLASSIC
LVAL	175:3	175:3	11	mode
FIELD	175:3	175:3	12	mode
LEAF_NODE	175:3	175:3	13	mode
ASSIGN_OP	175:8	175:8	11	=
LEAF_NODE	175:8	175:8	12	=
RVAL	175:10	175:10	11	FAXMODE_CLASSIC
FIELD	175:10	175:10	12	FAXMODE_CLASSIC
LEAF_NODE	175:10	175:10	13	FAXMODE_CLASSIC
LEAF_NODE	175:25	175:25	9	;
JUMP_STATEMENT	176:3	176:8	8	break DESTINATION ;
KEYWORD	176:3	176:3	9	break
LEAF_NODE	176:3	176:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	176:8	176:8	9	;
LEAF_NODE	177:2	177:2	8	case
LEAF_NODE	177:7	177:7	8	'f'
LEAF_NODE	177:10	177:10	8	:
EXPR_STATEMENT	178:3	178:24	8	mode = FAXMODE_CLASSF ;
EXPR	178:3	178:3	9	mode = FAXMODE_CLASSF
ASSIGN	178:3	178:10	10	mode = FAXMODE_CLASSF
LVAL	178:3	178:3	11	mode
FIELD	178:3	178:3	12	mode
LEAF_NODE	178:3	178:3	13	mode
ASSIGN_OP	178:8	178:8	11	=
LEAF_NODE	178:8	178:8	12	=
RVAL	178:10	178:10	11	FAXMODE_CLASSF
FIELD	178:10	178:10	12	FAXMODE_CLASSF
LEAF_NODE	178:10	178:10	13	FAXMODE_CLASSF
LEAF_NODE	178:24	178:24	9	;
JUMP_STATEMENT	179:3	179:8	8	break DESTINATION ;
KEYWORD	179:3	179:3	9	break
LEAF_NODE	179:3	179:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	179:8	179:8	9	;
LEAF_NODE	180:2	180:2	8	case
LEAF_NODE	180:7	180:7	8	'm'
LEAF_NODE	180:10	180:10	8	:
EXPR_STATEMENT	181:3	181:36	8	fillorder_out = FILLORDER_MSB2LSB ;
EXPR	181:3	181:3	9	fillorder_out = FILLORDER_MSB2LSB
ASSIGN	181:3	181:19	10	fillorder_out = FILLORDER_MSB2LSB
LVAL	181:3	181:3	11	fillorder_out
FIELD	181:3	181:3	12	fillorder_out
LEAF_NODE	181:3	181:3	13	fillorder_out
ASSIGN_OP	181:17	181:17	11	=
LEAF_NODE	181:17	181:17	12	=
RVAL	181:19	181:19	11	FILLORDER_MSB2LSB
FIELD	181:19	181:19	12	FILLORDER_MSB2LSB
LEAF_NODE	181:19	181:19	13	FILLORDER_MSB2LSB
LEAF_NODE	181:36	181:36	9	;
JUMP_STATEMENT	182:3	182:8	8	break DESTINATION ;
KEYWORD	182:3	182:3	9	break
LEAF_NODE	182:3	182:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	182:8	182:8	9	;
LEAF_NODE	183:2	183:2	8	case
LEAF_NODE	183:7	183:7	8	'l'
LEAF_NODE	183:10	183:10	8	:
EXPR_STATEMENT	184:3	184:36	8	fillorder_out = FILLORDER_LSB2MSB ;
EXPR	184:3	184:3	9	fillorder_out = FILLORDER_LSB2MSB
ASSIGN	184:3	184:19	10	fillorder_out = FILLORDER_LSB2MSB
LVAL	184:3	184:3	11	fillorder_out
FIELD	184:3	184:3	12	fillorder_out
LEAF_NODE	184:3	184:3	13	fillorder_out
ASSIGN_OP	184:17	184:17	11	=
LEAF_NODE	184:17	184:17	12	=
RVAL	184:19	184:19	11	FILLORDER_LSB2MSB
FIELD	184:19	184:19	12	FILLORDER_LSB2MSB
LEAF_NODE	184:19	184:19	13	FILLORDER_LSB2MSB
LEAF_NODE	184:36	184:36	9	;
JUMP_STATEMENT	185:3	185:8	8	break DESTINATION ;
KEYWORD	185:3	185:3	9	break
LEAF_NODE	185:3	185:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	185:8	185:8	9	;
LEAF_NODE	186:2	186:2	8	case
LEAF_NODE	186:7	186:7	8	'o'
LEAF_NODE	186:10	186:10	8	:
EXPR_STATEMENT	187:3	187:30	8	out = TIFFOpen ( optarg , "w" ) ;
EXPR	187:3	187:3	9	out = TIFFOpen ( optarg , "w" )
ASSIGN	187:3	187:9	10	out = TIFFOpen ( optarg , "w" )
LVAL	187:3	187:3	11	out
FIELD	187:3	187:3	12	out
LEAF_NODE	187:3	187:3	13	out
ASSIGN_OP	187:7	187:7	11	=
LEAF_NODE	187:7	187:7	12	=
RVAL	187:9	187:9	11	TIFFOpen ( optarg , "w" )
FUNCTION_CALL	187:9	187:29	12	TIFFOpen ( optarg , "w" )
CALLEE	187:9	187:9	13	TIFFOpen
LEAF_NODE	187:9	187:9	14	TIFFOpen
LEAF_NODE	187:17	187:17	13	(
ARGUMENT	187:18	187:18	13	optarg
FIELD	187:18	187:18	14	optarg
LEAF_NODE	187:18	187:18	15	optarg
LEAF_NODE	187:24	187:24	13	,
ARGUMENT	187:26	187:26	13	"w"
FIELD	187:26	187:26	14	"w"
LEAF_NODE	187:26	187:26	15	"w"
LEAF_NODE	187:29	187:29	13	)
LEAF_NODE	187:30	187:30	9	;
SELECTION	188:3	188:20	8	
KEYWORD	188:3	188:3	9	if
LEAF_NODE	188:3	188:3	10	if
LEAF_NODE	188:6	188:6	9	(
CONDITION	188:7	188:7	9	out == NULL
EXPR	188:7	188:14	10	out == NULL
FIELD	188:7	188:7	11	out
LEAF_NODE	188:7	188:7	12	out
EQ_OPERATOR	188:11	188:11	11	==
LEAF_NODE	188:11	188:11	12	==
FIELD	188:14	188:14	11	NULL
LEAF_NODE	188:14	188:14	12	NULL
LEAF_NODE	188:18	188:18	9	)
STATEMENTS	188:20	193:3	9	
LEAF_NODE	188:20	188:20	10	{
STATEMENTS	189:4	192:4	10	
EXPR_STATEMENT	189:4	191:24	11	fprintf ( stderr , "%s: Can not create or open %s\n" , argv [ 0 ] , optarg ) ;
EXPR	189:4	189:4	12	fprintf ( stderr , "%s: Can not create or open %s\n" , argv [ 0 ] , optarg )
FUNCTION_CALL	189:4	191:23	13	fprintf ( stderr , "%s: Can not create or open %s\n" , argv [ 0 ] , optarg )
CALLEE	189:4	189:4	14	fprintf
LEAF_NODE	189:4	189:4	15	fprintf
LEAF_NODE	189:11	189:11	14	(
ARGUMENT	189:12	189:12	14	stderr
FIELD	189:12	189:12	15	stderr
LEAF_NODE	189:12	189:12	16	stderr
LEAF_NODE	189:18	189:18	14	,
ARGUMENT	190:8	190:8	14	"%s: Can not create or open %s\n"
FIELD	190:8	190:8	15	"%s: Can not create or open %s\n"
LEAF_NODE	190:8	190:8	16	"%s: Can not create or open %s\n"
LEAF_NODE	190:41	190:41	14	,
ARGUMENT	191:8	191:8	14	argv [ 0 ]
FIELD	191:8	191:14	15	argv [ 0 ]
LEAF_NODE	191:8	191:8	16	argv
LEAF_NODE	191:12	191:12	16	[
EXPR	191:13	191:13	16	0
FIELD	191:13	191:13	17	0
LEAF_NODE	191:13	191:13	18	0
LEAF_NODE	191:14	191:14	16	]
LEAF_NODE	191:15	191:15	14	,
ARGUMENT	191:17	191:17	14	optarg
FIELD	191:17	191:17	15	optarg
LEAF_NODE	191:17	191:17	16	optarg
LEAF_NODE	191:23	191:23	14	)
LEAF_NODE	191:24	191:24	12	;
JUMP_STATEMENT	192:4	192:23	11	return EXIT_FAILURE ;
KEYWORD	192:4	192:4	12	return
LEAF_NODE	192:4	192:4	13	return
DESTINATION	192:11	192:11	12	EXIT_FAILURE
EXPR	192:11	192:11	13	EXIT_FAILURE
FIELD	192:11	192:11	14	EXIT_FAILURE
LEAF_NODE	192:11	192:11	15	EXIT_FAILURE
LEAF_NODE	192:23	192:23	12	;
LEAF_NODE	193:3	193:3	10	}
JUMP_STATEMENT	194:3	194:8	8	break DESTINATION ;
KEYWORD	194:3	194:3	9	break
LEAF_NODE	194:3	194:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	194:8	194:8	9	;
LEAF_NODE	195:2	195:2	8	case
LEAF_NODE	195:7	195:7	8	'a'
LEAF_NODE	195:10	195:10	8	:
EXPR_STATEMENT	196:3	196:42	8	group3options_out |= GROUP3OPT_FILLBITS ;
EXPR	196:3	196:3	9	group3options_out |= GROUP3OPT_FILLBITS
ASSIGN	196:3	196:24	10	group3options_out |= GROUP3OPT_FILLBITS
LVAL	196:3	196:3	11	group3options_out
FIELD	196:3	196:3	12	group3options_out
LEAF_NODE	196:3	196:3	13	group3options_out
ASSIGN_OP	196:21	196:21	11	|=
LEAF_NODE	196:21	196:21	12	|=
RVAL	196:24	196:24	11	GROUP3OPT_FILLBITS
FIELD	196:24	196:24	12	GROUP3OPT_FILLBITS
LEAF_NODE	196:24	196:24	13	GROUP3OPT_FILLBITS
LEAF_NODE	196:42	196:42	9	;
JUMP_STATEMENT	197:3	197:8	8	break DESTINATION ;
KEYWORD	197:3	197:3	9	break
LEAF_NODE	197:3	197:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	197:8	197:8	9	;
LEAF_NODE	198:2	198:2	8	case
LEAF_NODE	198:7	198:7	8	'p'
LEAF_NODE	198:10	198:10	8	:
EXPR_STATEMENT	199:3	199:43	8	group3options_out &= ~GROUP3OPT_FILLBITS ;
EXPR	199:3	199:3	9	group3options_out &= ~GROUP3OPT_FILLBITS
ASSIGN	199:3	199:24	10	group3options_out &= ~GROUP3OPT_FILLBITS
LVAL	199:3	199:3	11	group3options_out
FIELD	199:3	199:3	12	group3options_out
LEAF_NODE	199:3	199:3	13	group3options_out
ASSIGN_OP	199:21	199:21	11	&=
LEAF_NODE	199:21	199:21	12	&=
RVAL	199:24	199:24	11	~GROUP3OPT_FILLBITS
FIELD	199:24	199:24	12	~GROUP3OPT_FILLBITS
LEAF_NODE	199:24	199:24	13	~GROUP3OPT_FILLBITS
LEAF_NODE	199:43	199:43	9	;
JUMP_STATEMENT	200:3	200:8	8	break DESTINATION ;
KEYWORD	200:3	200:3	9	break
LEAF_NODE	200:3	200:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	200:8	200:8	9	;
LEAF_NODE	201:2	201:2	8	case
LEAF_NODE	201:7	201:7	8	'r'
LEAF_NODE	201:10	201:10	8	:
EXPR_STATEMENT	202:3	202:33	8	defrowsperstrip = atol ( optarg ) ;
EXPR	202:3	202:3	9	defrowsperstrip = atol ( optarg )
ASSIGN	202:3	202:21	10	defrowsperstrip = atol ( optarg )
LVAL	202:3	202:3	11	defrowsperstrip
FIELD	202:3	202:3	12	defrowsperstrip
LEAF_NODE	202:3	202:3	13	defrowsperstrip
ASSIGN_OP	202:19	202:19	11	=
LEAF_NODE	202:19	202:19	12	=
RVAL	202:21	202:21	11	atol ( optarg )
FUNCTION_CALL	202:21	202:32	12	atol ( optarg )
CALLEE	202:21	202:21	13	atol
LEAF_NODE	202:21	202:21	14	atol
LEAF_NODE	202:25	202:25	13	(
ARGUMENT	202:26	202:26	13	optarg
FIELD	202:26	202:26	14	optarg
LEAF_NODE	202:26	202:26	15	optarg
LEAF_NODE	202:32	202:32	13	)
LEAF_NODE	202:33	202:33	9	;
JUMP_STATEMENT	203:3	203:8	8	break DESTINATION ;
KEYWORD	203:3	203:3	9	break
LEAF_NODE	203:3	203:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	203:8	203:8	9	;
LEAF_NODE	204:2	204:2	8	case
LEAF_NODE	204:7	204:7	8	's'
LEAF_NODE	204:10	204:10	8	:
EXPR_STATEMENT	205:3	205:14	8	stretch = 1 ;
EXPR	205:3	205:3	9	stretch = 1
ASSIGN	205:3	205:13	10	stretch = 1
LVAL	205:3	205:3	11	stretch
FIELD	205:3	205:3	12	stretch
LEAF_NODE	205:3	205:3	13	stretch
ASSIGN_OP	205:11	205:11	11	=
LEAF_NODE	205:11	205:11	12	=
RVAL	205:13	205:13	11	1
FIELD	205:13	205:13	12	1
LEAF_NODE	205:13	205:13	13	1
LEAF_NODE	205:14	205:14	9	;
JUMP_STATEMENT	206:3	206:8	8	break DESTINATION ;
KEYWORD	206:3	206:3	9	break
LEAF_NODE	206:3	206:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	206:8	206:8	9	;
LEAF_NODE	207:2	207:2	8	case
LEAF_NODE	207:7	207:7	8	'w'
LEAF_NODE	207:10	207:10	8	:
EXPR_STATEMENT	208:3	208:43	8	photometric_out = PHOTOMETRIC_MINISWHITE ;
EXPR	208:3	208:3	9	photometric_out = PHOTOMETRIC_MINISWHITE
ASSIGN	208:3	208:21	10	photometric_out = PHOTOMETRIC_MINISWHITE
LVAL	208:3	208:3	11	photometric_out
FIELD	208:3	208:3	12	photometric_out
LEAF_NODE	208:3	208:3	13	photometric_out
ASSIGN_OP	208:19	208:19	11	=
LEAF_NODE	208:19	208:19	12	=
RVAL	208:21	208:21	11	PHOTOMETRIC_MINISWHITE
FIELD	208:21	208:21	12	PHOTOMETRIC_MINISWHITE
LEAF_NODE	208:21	208:21	13	PHOTOMETRIC_MINISWHITE
LEAF_NODE	208:43	208:43	9	;
JUMP_STATEMENT	209:3	209:8	8	break DESTINATION ;
KEYWORD	209:3	209:3	9	break
LEAF_NODE	209:3	209:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	209:8	209:8	9	;
LEAF_NODE	210:2	210:2	8	case
LEAF_NODE	210:7	210:7	8	'b'
LEAF_NODE	210:10	210:10	8	:
EXPR_STATEMENT	211:3	211:43	8	photometric_out = PHOTOMETRIC_MINISBLACK ;
EXPR	211:3	211:3	9	photometric_out = PHOTOMETRIC_MINISBLACK
ASSIGN	211:3	211:21	10	photometric_out = PHOTOMETRIC_MINISBLACK
LVAL	211:3	211:3	11	photometric_out
FIELD	211:3	211:3	12	photometric_out
LEAF_NODE	211:3	211:3	13	photometric_out
ASSIGN_OP	211:19	211:19	11	=
LEAF_NODE	211:19	211:19	12	=
RVAL	211:21	211:21	11	PHOTOMETRIC_MINISBLACK
FIELD	211:21	211:21	12	PHOTOMETRIC_MINISBLACK
LEAF_NODE	211:21	211:21	13	PHOTOMETRIC_MINISBLACK
LEAF_NODE	211:43	211:43	9	;
JUMP_STATEMENT	212:3	212:8	8	break DESTINATION ;
KEYWORD	212:3	212:3	9	break
LEAF_NODE	212:3	212:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	212:8	212:8	9	;
LEAF_NODE	213:2	213:2	8	case
LEAF_NODE	213:7	213:7	8	'z'
LEAF_NODE	213:10	213:10	8	:
EXPR_STATEMENT	214:3	214:36	8	compression_out = COMPRESSION_LZW ;
EXPR	214:3	214:3	9	compression_out = COMPRESSION_LZW
ASSIGN	214:3	214:21	10	compression_out = COMPRESSION_LZW
LVAL	214:3	214:3	11	compression_out
FIELD	214:3	214:3	12	compression_out
LEAF_NODE	214:3	214:3	13	compression_out
ASSIGN_OP	214:19	214:19	11	=
LEAF_NODE	214:19	214:19	12	=
RVAL	214:21	214:21	11	COMPRESSION_LZW
FIELD	214:21	214:21	12	COMPRESSION_LZW
LEAF_NODE	214:21	214:21	13	COMPRESSION_LZW
LEAF_NODE	214:36	214:36	9	;
JUMP_STATEMENT	215:3	215:8	8	break DESTINATION ;
KEYWORD	215:3	215:3	9	break
LEAF_NODE	215:3	215:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	215:8	215:8	9	;
LEAF_NODE	216:2	216:2	8	case
LEAF_NODE	216:7	216:7	8	'v'
LEAF_NODE	216:10	216:10	8	:
EXPR_STATEMENT	217:3	217:12	8	verbose ++ ;
EXPR	217:3	217:3	9	verbose ++
FIELD	217:3	217:10	10	verbose ++
LEAF_NODE	217:3	217:3	11	verbose
LEAF_NODE	217:10	217:10	11	++
LEAF_NODE	217:12	217:12	9	;
JUMP_STATEMENT	218:3	218:8	8	break DESTINATION ;
KEYWORD	218:3	218:3	9	break
LEAF_NODE	218:3	218:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	218:8	218:8	9	;
LEAF_NODE	219:2	219:2	8	case
LEAF_NODE	219:7	219:7	8	'?'
LEAF_NODE	219:10	219:10	8	:
EXPR_STATEMENT	220:3	220:10	8	usage ( ) ;
EXPR	220:3	220:3	9	usage ( )
FUNCTION_CALL	220:3	220:9	10	usage ( )
CALLEE	220:3	220:3	11	usage
LEAF_NODE	220:3	220:3	12	usage
LEAF_NODE	220:8	220:8	11	(
LEAF_NODE	220:9	220:9	11	)
LEAF_NODE	220:10	220:10	9	;
LEAF_NODE	222:2	222:2	7	}
EXPR_STATEMENT	223:1	223:23	3	npages = argc - optind ;
EXPR	223:1	223:1	4	npages = argc - optind
ASSIGN	223:1	223:10	5	npages = argc - optind
LVAL	223:1	223:1	6	npages
FIELD	223:1	223:1	7	npages
LEAF_NODE	223:1	223:1	8	npages
ASSIGN_OP	223:8	223:8	6	=
LEAF_NODE	223:8	223:8	7	=
RVAL	223:10	223:17	6	argc - optind
FIELD	223:10	223:10	7	argc
LEAF_NODE	223:10	223:10	8	argc
LEAF_NODE	223:15	223:15	7	-
FIELD	223:17	223:17	7	optind
LEAF_NODE	223:17	223:17	8	optind
LEAF_NODE	223:23	223:23	4	;
SELECTION	224:1	225:2	3	
KEYWORD	224:1	224:1	4	if
LEAF_NODE	224:1	224:1	5	if
LEAF_NODE	224:4	224:4	4	(
CONDITION	224:5	224:5	4	npages < 1
EXPR	224:5	224:14	5	npages < 1
FIELD	224:5	224:5	6	npages
LEAF_NODE	224:5	224:5	7	npages
REL_OPERATOR	224:12	224:12	6	<
LEAF_NODE	224:12	224:12	7	<
FIELD	224:14	224:14	6	1
LEAF_NODE	224:14	224:14	7	1
LEAF_NODE	224:15	224:15	4	)
STATEMENTS	225:2	225:2	4	
EXPR_STATEMENT	225:2	225:9	5	usage ( ) ;
EXPR	225:2	225:2	6	usage ( )
FUNCTION_CALL	225:2	225:8	7	usage ( )
CALLEE	225:2	225:2	8	usage
LEAF_NODE	225:2	225:2	9	usage
LEAF_NODE	225:7	225:7	8	(
LEAF_NODE	225:8	225:8	8	)
LEAF_NODE	225:9	225:9	6	;
EXPR_STATEMENT	227:1	227:42	3	rowbuf = _TIFFmalloc ( TIFFhowmany8 ( xsize ) ) ;
EXPR	227:1	227:1	4	rowbuf = _TIFFmalloc ( TIFFhowmany8 ( xsize ) )
ASSIGN	227:1	227:10	5	rowbuf = _TIFFmalloc ( TIFFhowmany8 ( xsize ) )
LVAL	227:1	227:1	6	rowbuf
FIELD	227:1	227:1	7	rowbuf
LEAF_NODE	227:1	227:1	8	rowbuf
ASSIGN_OP	227:8	227:8	6	=
LEAF_NODE	227:8	227:8	7	=
RVAL	227:10	227:10	6	_TIFFmalloc ( TIFFhowmany8 ( xsize ) )
FUNCTION_CALL	227:10	227:41	7	_TIFFmalloc ( TIFFhowmany8 ( xsize ) )
CALLEE	227:10	227:10	8	_TIFFmalloc
LEAF_NODE	227:10	227:10	9	_TIFFmalloc
LEAF_NODE	227:21	227:21	8	(
ARGUMENT	227:22	227:22	8	TIFFhowmany8 ( xsize )
FUNCTION_CALL	227:22	227:40	9	TIFFhowmany8 ( xsize )
CALLEE	227:22	227:22	10	TIFFhowmany8
LEAF_NODE	227:22	227:22	11	TIFFhowmany8
LEAF_NODE	227:34	227:34	10	(
ARGUMENT	227:35	227:35	10	xsize
FIELD	227:35	227:35	11	xsize
LEAF_NODE	227:35	227:35	12	xsize
LEAF_NODE	227:40	227:40	10	)
LEAF_NODE	227:41	227:41	8	)
LEAF_NODE	227:42	227:42	4	;
EXPR_STATEMENT	228:1	228:42	3	refbuf = _TIFFmalloc ( TIFFhowmany8 ( xsize ) ) ;
EXPR	228:1	228:1	4	refbuf = _TIFFmalloc ( TIFFhowmany8 ( xsize ) )
ASSIGN	228:1	228:10	5	refbuf = _TIFFmalloc ( TIFFhowmany8 ( xsize ) )
LVAL	228:1	228:1	6	refbuf
FIELD	228:1	228:1	7	refbuf
LEAF_NODE	228:1	228:1	8	refbuf
ASSIGN_OP	228:8	228:8	6	=
LEAF_NODE	228:8	228:8	7	=
RVAL	228:10	228:10	6	_TIFFmalloc ( TIFFhowmany8 ( xsize ) )
FUNCTION_CALL	228:10	228:41	7	_TIFFmalloc ( TIFFhowmany8 ( xsize ) )
CALLEE	228:10	228:10	8	_TIFFmalloc
LEAF_NODE	228:10	228:10	9	_TIFFmalloc
LEAF_NODE	228:21	228:21	8	(
ARGUMENT	228:22	228:22	8	TIFFhowmany8 ( xsize )
FUNCTION_CALL	228:22	228:40	9	TIFFhowmany8 ( xsize )
CALLEE	228:22	228:22	10	TIFFhowmany8
LEAF_NODE	228:22	228:22	11	TIFFhowmany8
LEAF_NODE	228:34	228:34	10	(
ARGUMENT	228:35	228:35	10	xsize
FIELD	228:35	228:35	11	xsize
LEAF_NODE	228:35	228:35	12	xsize
LEAF_NODE	228:40	228:40	10	)
LEAF_NODE	228:41	228:41	8	)
LEAF_NODE	228:42	228:42	4	;
SELECTION	229:1	229:39	3	
KEYWORD	229:1	229:1	4	if
LEAF_NODE	229:1	229:1	5	if
LEAF_NODE	229:4	229:4	4	(
CONDITION	229:5	229:5	4	rowbuf == NULL || refbuf == NULL
EXPR	229:5	229:5	5	rowbuf == NULL || refbuf == NULL
OR	229:5	229:23	6	rowbuf == NULL || refbuf == NULL
EXPR	229:5	229:15	7	rowbuf == NULL
FIELD	229:5	229:5	8	rowbuf
LEAF_NODE	229:5	229:5	9	rowbuf
EQ_OPERATOR	229:12	229:12	8	==
LEAF_NODE	229:12	229:12	9	==
FIELD	229:15	229:15	8	NULL
LEAF_NODE	229:15	229:15	9	NULL
LEAF_NODE	229:20	229:20	7	||
EXPR	229:23	229:33	7	refbuf == NULL
FIELD	229:23	229:23	8	refbuf
LEAF_NODE	229:23	229:23	9	refbuf
EQ_OPERATOR	229:30	229:30	8	==
LEAF_NODE	229:30	229:30	9	==
FIELD	229:33	229:33	8	NULL
LEAF_NODE	229:33	229:33	9	NULL
LEAF_NODE	229:37	229:37	4	)
STATEMENTS	229:39	232:1	4	
LEAF_NODE	229:39	229:39	5	{
STATEMENTS	230:2	231:23	5	
EXPR_STATEMENT	230:2	230:53	6	fprintf ( stderr , "%s: Not enough memory\n" , argv [ 0 ] ) ;
EXPR	230:2	230:2	7	fprintf ( stderr , "%s: Not enough memory\n" , argv [ 0 ] )
FUNCTION_CALL	230:2	230:52	8	fprintf ( stderr , "%s: Not enough memory\n" , argv [ 0 ] )
CALLEE	230:2	230:2	9	fprintf
LEAF_NODE	230:2	230:2	10	fprintf
LEAF_NODE	230:9	230:9	9	(
ARGUMENT	230:10	230:10	9	stderr
FIELD	230:10	230:10	10	stderr
LEAF_NODE	230:10	230:10	11	stderr
LEAF_NODE	230:16	230:16	9	,
ARGUMENT	230:18	230:18	9	"%s: Not enough memory\n"
FIELD	230:18	230:18	10	"%s: Not enough memory\n"
LEAF_NODE	230:18	230:18	11	"%s: Not enough memory\n"
LEAF_NODE	230:43	230:43	9	,
ARGUMENT	230:45	230:45	9	argv [ 0 ]
FIELD	230:45	230:51	10	argv [ 0 ]
LEAF_NODE	230:45	230:45	11	argv
LEAF_NODE	230:49	230:49	11	[
EXPR	230:50	230:50	11	0
FIELD	230:50	230:50	12	0
LEAF_NODE	230:50	230:50	13	0
LEAF_NODE	230:51	230:51	11	]
LEAF_NODE	230:52	230:52	9	)
LEAF_NODE	230:53	230:53	7	;
LEAF_NODE	231:2	231:2	6	return
LEAF_NODE	231:9	231:9	6	(
LEAF_NODE	231:10	231:10	6	EXIT_FAILURE
LEAF_NODE	231:22	231:22	6	)
LEAF_NODE	231:23	231:23	6	;
LEAF_NODE	232:1	232:1	5	}
SELECTION	234:1	234:18	3	
KEYWORD	234:1	234:1	4	if
LEAF_NODE	234:1	234:1	5	if
LEAF_NODE	234:4	234:4	4	(
CONDITION	234:5	234:5	4	out == NULL
EXPR	234:5	234:12	5	out == NULL
FIELD	234:5	234:5	6	out
LEAF_NODE	234:5	234:5	7	out
EQ_OPERATOR	234:9	234:9	6	==
LEAF_NODE	234:9	234:9	7	==
FIELD	234:12	234:12	6	NULL
LEAF_NODE	234:12	234:12	7	NULL
LEAF_NODE	234:16	234:16	4	)
STATEMENTS	234:18	241:1	4	
LEAF_NODE	234:18	234:18	5	{
STATEMENTS	235:2	236:2	5	
EXPR_STATEMENT	235:2	235:32	6	out = TIFFOpen ( "fax.tif" , "w" ) ;
EXPR	235:2	235:2	7	out = TIFFOpen ( "fax.tif" , "w" )
ASSIGN	235:2	235:8	8	out = TIFFOpen ( "fax.tif" , "w" )
LVAL	235:2	235:2	9	out
FIELD	235:2	235:2	10	out
LEAF_NODE	235:2	235:2	11	out
ASSIGN_OP	235:6	235:6	9	=
LEAF_NODE	235:6	235:6	10	=
RVAL	235:8	235:8	9	TIFFOpen ( "fax.tif" , "w" )
FUNCTION_CALL	235:8	235:31	10	TIFFOpen ( "fax.tif" , "w" )
CALLEE	235:8	235:8	11	TIFFOpen
LEAF_NODE	235:8	235:8	12	TIFFOpen
LEAF_NODE	235:16	235:16	11	(
ARGUMENT	235:17	235:17	11	"fax.tif"
FIELD	235:17	235:17	12	"fax.tif"
LEAF_NODE	235:17	235:17	13	"fax.tif"
LEAF_NODE	235:26	235:26	11	,
ARGUMENT	235:28	235:28	11	"w"
FIELD	235:28	235:28	12	"w"
LEAF_NODE	235:28	235:28	13	"w"
LEAF_NODE	235:31	235:31	11	)
LEAF_NODE	235:32	235:32	7	;
SELECTION	236:2	236:19	6	
KEYWORD	236:2	236:2	7	if
LEAF_NODE	236:2	236:2	8	if
LEAF_NODE	236:5	236:5	7	(
CONDITION	236:6	236:6	7	out == NULL
EXPR	236:6	236:13	8	out == NULL
FIELD	236:6	236:6	9	out
LEAF_NODE	236:6	236:6	10	out
EQ_OPERATOR	236:10	236:10	9	==
LEAF_NODE	236:10	236:10	10	==
FIELD	236:13	236:13	9	NULL
LEAF_NODE	236:13	236:13	10	NULL
LEAF_NODE	236:17	236:17	7	)
STATEMENTS	236:19	240:2	7	
LEAF_NODE	236:19	236:19	8	{
STATEMENTS	237:3	239:24	8	
EXPR_STATEMENT	237:3	238:15	9	fprintf ( stderr , "%s: Can not create fax.tif\n" , argv [ 0 ] ) ;
EXPR	237:3	237:3	10	fprintf ( stderr , "%s: Can not create fax.tif\n" , argv [ 0 ] )
FUNCTION_CALL	237:3	238:14	11	fprintf ( stderr , "%s: Can not create fax.tif\n" , argv [ 0 ] )
CALLEE	237:3	237:3	12	fprintf
LEAF_NODE	237:3	237:3	13	fprintf
LEAF_NODE	237:10	237:10	12	(
ARGUMENT	237:11	237:11	12	stderr
FIELD	237:11	237:11	13	stderr
LEAF_NODE	237:11	237:11	14	stderr
LEAF_NODE	237:17	237:17	12	,
ARGUMENT	237:19	237:19	12	"%s: Can not create fax.tif\n"
FIELD	237:19	237:19	13	"%s: Can not create fax.tif\n"
LEAF_NODE	237:19	237:19	14	"%s: Can not create fax.tif\n"
LEAF_NODE	237:49	237:49	12	,
ARGUMENT	238:7	238:7	12	argv [ 0 ]
FIELD	238:7	238:13	13	argv [ 0 ]
LEAF_NODE	238:7	238:7	14	argv
LEAF_NODE	238:11	238:11	14	[
EXPR	238:12	238:12	14	0
FIELD	238:12	238:12	15	0
LEAF_NODE	238:12	238:12	16	0
LEAF_NODE	238:13	238:13	14	]
LEAF_NODE	238:14	238:14	12	)
LEAF_NODE	238:15	238:15	10	;
LEAF_NODE	239:3	239:3	9	return
LEAF_NODE	239:10	239:10	9	(
LEAF_NODE	239:11	239:11	9	EXIT_FAILURE
LEAF_NODE	239:23	239:23	9	)
LEAF_NODE	239:24	239:24	9	;
LEAF_NODE	240:2	240:2	8	}
LEAF_NODE	241:1	241:1	5	}
EXPR_STATEMENT	243:1	249:31	3	faxTIFF = TIFFClientOpen ( "(FakeInput)" , "w" , TIFFClientdata ( out ) , TIFFGetReadProc ( out ) , TIFFGetWriteProc ( out ) , TIFFGetSeekProc ( out ) , TIFFGetCloseProc ( out ) , TIFFGetSizeProc ( out ) , TIFFGetMapFileProc ( out ) , TIFFGetUnmapFileProc ( out ) ) ;
EXPR	243:1	243:1	4	faxTIFF = TIFFClientOpen ( "(FakeInput)" , "w" , TIFFClientdata ( out ) , TIFFGetReadProc ( out ) , TIFFGetWriteProc ( out ) , TIFFGetSeekProc ( out ) , TIFFGetCloseProc ( out ) , TIFFGetSizeProc ( out ) , TIFFGetMapFileProc ( out ) , TIFFGetUnmapFileProc ( out ) )
ASSIGN	243:1	243:11	5	faxTIFF = TIFFClientOpen ( "(FakeInput)" , "w" , TIFFClientdata ( out ) , TIFFGetReadProc ( out ) , TIFFGetWriteProc ( out ) , TIFFGetSeekProc ( out ) , TIFFGetCloseProc ( out ) , TIFFGetSizeProc ( out ) , TIFFGetMapFileProc ( out ) , TIFFGetUnmapFileProc ( out ) )
LVAL	243:1	243:1	6	faxTIFF
FIELD	243:1	243:1	7	faxTIFF
LEAF_NODE	243:1	243:1	8	faxTIFF
ASSIGN_OP	243:9	243:9	6	=
LEAF_NODE	243:9	243:9	7	=
RVAL	243:11	243:11	6	TIFFClientOpen ( "(FakeInput)" , "w" , TIFFClientdata ( out ) , TIFFGetReadProc ( out ) , TIFFGetWriteProc ( out ) , TIFFGetSeekProc ( out ) , TIFFGetCloseProc ( out ) , TIFFGetSizeProc ( out ) , TIFFGetMapFileProc ( out ) , TIFFGetUnmapFileProc ( out ) )
FUNCTION_CALL	243:11	249:30	7	TIFFClientOpen ( "(FakeInput)" , "w" , TIFFClientdata ( out ) , TIFFGetReadProc ( out ) , TIFFGetWriteProc ( out ) , TIFFGetSeekProc ( out ) , TIFFGetCloseProc ( out ) , TIFFGetSizeProc ( out ) , TIFFGetMapFileProc ( out ) , TIFFGetUnmapFileProc ( out ) )
CALLEE	243:11	243:11	8	TIFFClientOpen
LEAF_NODE	243:11	243:11	9	TIFFClientOpen
LEAF_NODE	243:25	243:25	8	(
ARGUMENT	243:26	243:26	8	"(FakeInput)"
FIELD	243:26	243:26	9	"(FakeInput)"
LEAF_NODE	243:26	243:26	10	"(FakeInput)"
LEAF_NODE	243:39	243:39	8	,
ARGUMENT	243:41	243:41	8	"w"
FIELD	243:41	243:41	9	"w"
LEAF_NODE	243:41	243:41	10	"w"
LEAF_NODE	243:44	243:44	8	,
ARGUMENT	245:5	245:5	8	TIFFClientdata ( out )
FUNCTION_CALL	245:5	245:23	9	TIFFClientdata ( out )
CALLEE	245:5	245:5	10	TIFFClientdata
LEAF_NODE	245:5	245:5	11	TIFFClientdata
LEAF_NODE	245:19	245:19	10	(
ARGUMENT	245:20	245:20	10	out
FIELD	245:20	245:20	11	out
LEAF_NODE	245:20	245:20	12	out
LEAF_NODE	245:23	245:23	10	)
LEAF_NODE	245:24	245:24	8	,
ARGUMENT	246:5	246:5	8	TIFFGetReadProc ( out )
FUNCTION_CALL	246:5	246:24	9	TIFFGetReadProc ( out )
CALLEE	246:5	246:5	10	TIFFGetReadProc
LEAF_NODE	246:5	246:5	11	TIFFGetReadProc
LEAF_NODE	246:20	246:20	10	(
ARGUMENT	246:21	246:21	10	out
FIELD	246:21	246:21	11	out
LEAF_NODE	246:21	246:21	12	out
LEAF_NODE	246:24	246:24	10	)
LEAF_NODE	246:25	246:25	8	,
ARGUMENT	246:27	246:27	8	TIFFGetWriteProc ( out )
FUNCTION_CALL	246:27	246:47	9	TIFFGetWriteProc ( out )
CALLEE	246:27	246:27	10	TIFFGetWriteProc
LEAF_NODE	246:27	246:27	11	TIFFGetWriteProc
LEAF_NODE	246:43	246:43	10	(
ARGUMENT	246:44	246:44	10	out
FIELD	246:44	246:44	11	out
LEAF_NODE	246:44	246:44	12	out
LEAF_NODE	246:47	246:47	10	)
LEAF_NODE	246:48	246:48	8	,
ARGUMENT	247:5	247:5	8	TIFFGetSeekProc ( out )
FUNCTION_CALL	247:5	247:24	9	TIFFGetSeekProc ( out )
CALLEE	247:5	247:5	10	TIFFGetSeekProc
LEAF_NODE	247:5	247:5	11	TIFFGetSeekProc
LEAF_NODE	247:20	247:20	10	(
ARGUMENT	247:21	247:21	10	out
FIELD	247:21	247:21	11	out
LEAF_NODE	247:21	247:21	12	out
LEAF_NODE	247:24	247:24	10	)
LEAF_NODE	247:25	247:25	8	,
ARGUMENT	247:27	247:27	8	TIFFGetCloseProc ( out )
FUNCTION_CALL	247:27	247:47	9	TIFFGetCloseProc ( out )
CALLEE	247:27	247:27	10	TIFFGetCloseProc
LEAF_NODE	247:27	247:27	11	TIFFGetCloseProc
LEAF_NODE	247:43	247:43	10	(
ARGUMENT	247:44	247:44	10	out
FIELD	247:44	247:44	11	out
LEAF_NODE	247:44	247:44	12	out
LEAF_NODE	247:47	247:47	10	)
LEAF_NODE	247:48	247:48	8	,
ARGUMENT	248:5	248:5	8	TIFFGetSizeProc ( out )
FUNCTION_CALL	248:5	248:24	9	TIFFGetSizeProc ( out )
CALLEE	248:5	248:5	10	TIFFGetSizeProc
LEAF_NODE	248:5	248:5	11	TIFFGetSizeProc
LEAF_NODE	248:20	248:20	10	(
ARGUMENT	248:21	248:21	10	out
FIELD	248:21	248:21	11	out
LEAF_NODE	248:21	248:21	12	out
LEAF_NODE	248:24	248:24	10	)
LEAF_NODE	248:25	248:25	8	,
ARGUMENT	248:27	248:27	8	TIFFGetMapFileProc ( out )
FUNCTION_CALL	248:27	248:49	9	TIFFGetMapFileProc ( out )
CALLEE	248:27	248:27	10	TIFFGetMapFileProc
LEAF_NODE	248:27	248:27	11	TIFFGetMapFileProc
LEAF_NODE	248:45	248:45	10	(
ARGUMENT	248:46	248:46	10	out
FIELD	248:46	248:46	11	out
LEAF_NODE	248:46	248:46	12	out
LEAF_NODE	248:49	248:49	10	)
LEAF_NODE	248:50	248:50	8	,
ARGUMENT	249:5	249:5	8	TIFFGetUnmapFileProc ( out )
FUNCTION_CALL	249:5	249:29	9	TIFFGetUnmapFileProc ( out )
CALLEE	249:5	249:5	10	TIFFGetUnmapFileProc
LEAF_NODE	249:5	249:5	11	TIFFGetUnmapFileProc
LEAF_NODE	249:25	249:25	10	(
ARGUMENT	249:26	249:26	10	out
FIELD	249:26	249:26	11	out
LEAF_NODE	249:26	249:26	12	out
LEAF_NODE	249:29	249:29	10	)
LEAF_NODE	249:30	249:30	8	)
LEAF_NODE	249:31	249:31	4	;
SELECTION	250:1	250:22	3	
KEYWORD	250:1	250:1	4	if
LEAF_NODE	250:1	250:1	5	if
LEAF_NODE	250:4	250:4	4	(
CONDITION	250:5	250:5	4	faxTIFF == NULL
EXPR	250:5	250:16	5	faxTIFF == NULL
FIELD	250:5	250:5	6	faxTIFF
LEAF_NODE	250:5	250:5	7	faxTIFF
EQ_OPERATOR	250:13	250:13	6	==
LEAF_NODE	250:13	250:13	7	==
FIELD	250:16	250:16	6	NULL
LEAF_NODE	250:16	250:16	7	NULL
LEAF_NODE	250:20	250:20	4	)
STATEMENTS	250:22	254:1	4	
LEAF_NODE	250:22	250:22	5	{
STATEMENTS	251:2	253:23	5	
EXPR_STATEMENT	251:2	252:14	6	fprintf ( stderr , "%s: Can not create fake input file\n" , argv [ 0 ] ) ;
EXPR	251:2	251:2	7	fprintf ( stderr , "%s: Can not create fake input file\n" , argv [ 0 ] )
FUNCTION_CALL	251:2	252:13	8	fprintf ( stderr , "%s: Can not create fake input file\n" , argv [ 0 ] )
CALLEE	251:2	251:2	9	fprintf
LEAF_NODE	251:2	251:2	10	fprintf
LEAF_NODE	251:9	251:9	9	(
ARGUMENT	251:10	251:10	9	stderr
FIELD	251:10	251:10	10	stderr
LEAF_NODE	251:10	251:10	11	stderr
LEAF_NODE	251:16	251:16	9	,
ARGUMENT	251:18	251:18	9	"%s: Can not create fake input file\n"
FIELD	251:18	251:18	10	"%s: Can not create fake input file\n"
LEAF_NODE	251:18	251:18	11	"%s: Can not create fake input file\n"
LEAF_NODE	251:56	251:56	9	,
ARGUMENT	252:6	252:6	9	argv [ 0 ]
FIELD	252:6	252:12	10	argv [ 0 ]
LEAF_NODE	252:6	252:6	11	argv
LEAF_NODE	252:10	252:10	11	[
EXPR	252:11	252:11	11	0
FIELD	252:11	252:11	12	0
LEAF_NODE	252:11	252:11	13	0
LEAF_NODE	252:12	252:12	11	]
LEAF_NODE	252:13	252:13	9	)
LEAF_NODE	252:14	252:14	7	;
LEAF_NODE	253:2	253:2	6	return
LEAF_NODE	253:9	253:9	6	(
LEAF_NODE	253:10	253:10	6	EXIT_FAILURE
LEAF_NODE	253:22	253:22	6	)
LEAF_NODE	253:23	253:23	6	;
LEAF_NODE	254:1	254:1	5	}
EXPR_STATEMENT	255:1	255:31	3	TIFFSetMode ( faxTIFF , O_RDONLY ) ;
EXPR	255:1	255:1	4	TIFFSetMode ( faxTIFF , O_RDONLY )
FUNCTION_CALL	255:1	255:30	5	TIFFSetMode ( faxTIFF , O_RDONLY )
CALLEE	255:1	255:1	6	TIFFSetMode
LEAF_NODE	255:1	255:1	7	TIFFSetMode
LEAF_NODE	255:12	255:12	6	(
ARGUMENT	255:13	255:13	6	faxTIFF
FIELD	255:13	255:13	7	faxTIFF
LEAF_NODE	255:13	255:13	8	faxTIFF
LEAF_NODE	255:20	255:20	6	,
ARGUMENT	255:22	255:22	6	O_RDONLY
FIELD	255:22	255:22	7	O_RDONLY
LEAF_NODE	255:22	255:22	8	O_RDONLY
LEAF_NODE	255:30	255:30	6	)
LEAF_NODE	255:31	255:31	4	;
EXPR_STATEMENT	256:1	256:49	3	TIFFSetField ( faxTIFF , TIFFTAG_IMAGEWIDTH , xsize ) ;
EXPR	256:1	256:1	4	TIFFSetField ( faxTIFF , TIFFTAG_IMAGEWIDTH , xsize )
FUNCTION_CALL	256:1	256:48	5	TIFFSetField ( faxTIFF , TIFFTAG_IMAGEWIDTH , xsize )
CALLEE	256:1	256:1	6	TIFFSetField
LEAF_NODE	256:1	256:1	7	TIFFSetField
LEAF_NODE	256:13	256:13	6	(
ARGUMENT	256:14	256:14	6	faxTIFF
FIELD	256:14	256:14	7	faxTIFF
LEAF_NODE	256:14	256:14	8	faxTIFF
LEAF_NODE	256:21	256:21	6	,
ARGUMENT	256:23	256:23	6	TIFFTAG_IMAGEWIDTH
FIELD	256:23	256:23	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	256:23	256:23	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	256:41	256:41	6	,
ARGUMENT	256:43	256:43	6	xsize
FIELD	256:43	256:43	7	xsize
LEAF_NODE	256:43	256:43	8	xsize
LEAF_NODE	256:48	256:48	6	)
LEAF_NODE	256:49	256:49	4	;
EXPR_STATEMENT	257:1	257:50	3	TIFFSetField ( faxTIFF , TIFFTAG_SAMPLESPERPIXEL , 1 ) ;
EXPR	257:1	257:1	4	TIFFSetField ( faxTIFF , TIFFTAG_SAMPLESPERPIXEL , 1 )
FUNCTION_CALL	257:1	257:49	5	TIFFSetField ( faxTIFF , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	257:1	257:1	6	TIFFSetField
LEAF_NODE	257:1	257:1	7	TIFFSetField
LEAF_NODE	257:13	257:13	6	(
ARGUMENT	257:14	257:14	6	faxTIFF
FIELD	257:14	257:14	7	faxTIFF
LEAF_NODE	257:14	257:14	8	faxTIFF
LEAF_NODE	257:21	257:21	6	,
ARGUMENT	257:23	257:23	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	257:23	257:23	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	257:23	257:23	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	257:46	257:46	6	,
ARGUMENT	257:48	257:48	6	1
FIELD	257:48	257:48	7	1
LEAF_NODE	257:48	257:48	8	1
LEAF_NODE	257:49	257:49	6	)
LEAF_NODE	257:50	257:50	4	;
EXPR_STATEMENT	258:1	258:48	3	TIFFSetField ( faxTIFF , TIFFTAG_BITSPERSAMPLE , 1 ) ;
EXPR	258:1	258:1	4	TIFFSetField ( faxTIFF , TIFFTAG_BITSPERSAMPLE , 1 )
FUNCTION_CALL	258:1	258:47	5	TIFFSetField ( faxTIFF , TIFFTAG_BITSPERSAMPLE , 1 )
CALLEE	258:1	258:1	6	TIFFSetField
LEAF_NODE	258:1	258:1	7	TIFFSetField
LEAF_NODE	258:13	258:13	6	(
ARGUMENT	258:14	258:14	6	faxTIFF
FIELD	258:14	258:14	7	faxTIFF
LEAF_NODE	258:14	258:14	8	faxTIFF
LEAF_NODE	258:21	258:21	6	,
ARGUMENT	258:23	258:23	6	TIFFTAG_BITSPERSAMPLE
FIELD	258:23	258:23	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	258:23	258:23	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	258:44	258:44	6	,
ARGUMENT	258:46	258:46	6	1
FIELD	258:46	258:46	7	1
LEAF_NODE	258:46	258:46	8	1
LEAF_NODE	258:47	258:47	6	)
LEAF_NODE	258:48	258:48	4	;
EXPR_STATEMENT	259:1	259:55	3	TIFFSetField ( faxTIFF , TIFFTAG_FILLORDER , fillorder_in ) ;
EXPR	259:1	259:1	4	TIFFSetField ( faxTIFF , TIFFTAG_FILLORDER , fillorder_in )
FUNCTION_CALL	259:1	259:54	5	TIFFSetField ( faxTIFF , TIFFTAG_FILLORDER , fillorder_in )
CALLEE	259:1	259:1	6	TIFFSetField
LEAF_NODE	259:1	259:1	7	TIFFSetField
LEAF_NODE	259:13	259:13	6	(
ARGUMENT	259:14	259:14	6	faxTIFF
FIELD	259:14	259:14	7	faxTIFF
LEAF_NODE	259:14	259:14	8	faxTIFF
LEAF_NODE	259:21	259:21	6	,
ARGUMENT	259:23	259:23	6	TIFFTAG_FILLORDER
FIELD	259:23	259:23	7	TIFFTAG_FILLORDER
LEAF_NODE	259:23	259:23	8	TIFFTAG_FILLORDER
LEAF_NODE	259:40	259:40	6	,
ARGUMENT	259:42	259:42	6	fillorder_in
FIELD	259:42	259:42	7	fillorder_in
LEAF_NODE	259:42	259:42	8	fillorder_in
LEAF_NODE	259:54	259:54	6	)
LEAF_NODE	259:55	259:55	4	;
EXPR_STATEMENT	260:1	260:65	3	TIFFSetField ( faxTIFF , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	260:1	260:1	4	TIFFSetField ( faxTIFF , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	260:1	260:64	5	TIFFSetField ( faxTIFF , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	260:1	260:1	6	TIFFSetField
LEAF_NODE	260:1	260:1	7	TIFFSetField
LEAF_NODE	260:13	260:13	6	(
ARGUMENT	260:14	260:14	6	faxTIFF
FIELD	260:14	260:14	7	faxTIFF
LEAF_NODE	260:14	260:14	8	faxTIFF
LEAF_NODE	260:21	260:21	6	,
ARGUMENT	260:23	260:23	6	TIFFTAG_PLANARCONFIG
FIELD	260:23	260:23	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	260:23	260:23	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	260:43	260:43	6	,
ARGUMENT	260:45	260:45	6	PLANARCONFIG_CONTIG
FIELD	260:45	260:45	7	PLANARCONFIG_CONTIG
LEAF_NODE	260:45	260:45	8	PLANARCONFIG_CONTIG
LEAF_NODE	260:64	260:64	6	)
LEAF_NODE	260:65	260:65	4	;
EXPR_STATEMENT	261:1	261:59	3	TIFFSetField ( faxTIFF , TIFFTAG_PHOTOMETRIC , photometric_in ) ;
EXPR	261:1	261:1	4	TIFFSetField ( faxTIFF , TIFFTAG_PHOTOMETRIC , photometric_in )
FUNCTION_CALL	261:1	261:58	5	TIFFSetField ( faxTIFF , TIFFTAG_PHOTOMETRIC , photometric_in )
CALLEE	261:1	261:1	6	TIFFSetField
LEAF_NODE	261:1	261:1	7	TIFFSetField
LEAF_NODE	261:13	261:13	6	(
ARGUMENT	261:14	261:14	6	faxTIFF
FIELD	261:14	261:14	7	faxTIFF
LEAF_NODE	261:14	261:14	8	faxTIFF
LEAF_NODE	261:21	261:21	6	,
ARGUMENT	261:23	261:23	6	TIFFTAG_PHOTOMETRIC
FIELD	261:23	261:23	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	261:23	261:23	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	261:42	261:42	6	,
ARGUMENT	261:44	261:44	6	photometric_in
FIELD	261:44	261:44	7	photometric_in
LEAF_NODE	261:44	261:44	8	photometric_in
LEAF_NODE	261:58	261:58	6	)
LEAF_NODE	261:59	261:59	4	;
EXPR_STATEMENT	262:1	262:49	3	TIFFSetField ( faxTIFF , TIFFTAG_YRESOLUTION , resY ) ;
EXPR	262:1	262:1	4	TIFFSetField ( faxTIFF , TIFFTAG_YRESOLUTION , resY )
FUNCTION_CALL	262:1	262:48	5	TIFFSetField ( faxTIFF , TIFFTAG_YRESOLUTION , resY )
CALLEE	262:1	262:1	6	TIFFSetField
LEAF_NODE	262:1	262:1	7	TIFFSetField
LEAF_NODE	262:13	262:13	6	(
ARGUMENT	262:14	262:14	6	faxTIFF
FIELD	262:14	262:14	7	faxTIFF
LEAF_NODE	262:14	262:14	8	faxTIFF
LEAF_NODE	262:21	262:21	6	,
ARGUMENT	262:23	262:23	6	TIFFTAG_YRESOLUTION
FIELD	262:23	262:23	7	TIFFTAG_YRESOLUTION
LEAF_NODE	262:23	262:23	8	TIFFTAG_YRESOLUTION
LEAF_NODE	262:42	262:42	6	,
ARGUMENT	262:44	262:44	6	resY
FIELD	262:44	262:44	7	resY
LEAF_NODE	262:44	262:44	8	resY
LEAF_NODE	262:48	262:48	6	)
LEAF_NODE	262:49	262:49	4	;
EXPR_STATEMENT	263:1	263:60	3	TIFFSetField ( faxTIFF , TIFFTAG_RESOLUTIONUNIT , RESUNIT_INCH ) ;
EXPR	263:1	263:1	4	TIFFSetField ( faxTIFF , TIFFTAG_RESOLUTIONUNIT , RESUNIT_INCH )
FUNCTION_CALL	263:1	263:59	5	TIFFSetField ( faxTIFF , TIFFTAG_RESOLUTIONUNIT , RESUNIT_INCH )
CALLEE	263:1	263:1	6	TIFFSetField
LEAF_NODE	263:1	263:1	7	TIFFSetField
LEAF_NODE	263:13	263:13	6	(
ARGUMENT	263:14	263:14	6	faxTIFF
FIELD	263:14	263:14	7	faxTIFF
LEAF_NODE	263:14	263:14	8	faxTIFF
LEAF_NODE	263:21	263:21	6	,
ARGUMENT	263:23	263:23	6	TIFFTAG_RESOLUTIONUNIT
FIELD	263:23	263:23	7	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	263:23	263:23	8	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	263:45	263:45	6	,
ARGUMENT	263:47	263:47	6	RESUNIT_INCH
FIELD	263:47	263:47	7	RESUNIT_INCH
LEAF_NODE	263:47	263:47	8	RESUNIT_INCH
LEAF_NODE	263:59	263:59	6	)
LEAF_NODE	263:60	263:60	4	;
EXPR_STATEMENT	266:1	266:59	3	TIFFSetField ( faxTIFF , TIFFTAG_COMPRESSION , compression_in ) ;
EXPR	266:1	266:1	4	TIFFSetField ( faxTIFF , TIFFTAG_COMPRESSION , compression_in )
FUNCTION_CALL	266:1	266:58	5	TIFFSetField ( faxTIFF , TIFFTAG_COMPRESSION , compression_in )
CALLEE	266:1	266:1	6	TIFFSetField
LEAF_NODE	266:1	266:1	7	TIFFSetField
LEAF_NODE	266:13	266:13	6	(
ARGUMENT	266:14	266:14	6	faxTIFF
FIELD	266:14	266:14	7	faxTIFF
LEAF_NODE	266:14	266:14	8	faxTIFF
LEAF_NODE	266:21	266:21	6	,
ARGUMENT	266:23	266:23	6	TIFFTAG_COMPRESSION
FIELD	266:23	266:23	7	TIFFTAG_COMPRESSION
LEAF_NODE	266:23	266:23	8	TIFFTAG_COMPRESSION
LEAF_NODE	266:42	266:42	6	,
ARGUMENT	266:44	266:44	6	compression_in
FIELD	266:44	266:44	7	compression_in
LEAF_NODE	266:44	266:44	8	compression_in
LEAF_NODE	266:58	266:58	6	)
LEAF_NODE	266:59	266:59	4	;
SELECTION	267:1	268:2	3	
KEYWORD	267:1	267:1	4	if
LEAF_NODE	267:1	267:1	5	if
LEAF_NODE	267:4	267:4	4	(
CONDITION	267:5	267:5	4	compression_in == COMPRESSION_CCITTFAX3
EXPR	267:5	267:23	5	compression_in == COMPRESSION_CCITTFAX3
FIELD	267:5	267:5	6	compression_in
LEAF_NODE	267:5	267:5	7	compression_in
EQ_OPERATOR	267:20	267:20	6	==
LEAF_NODE	267:20	267:20	7	==
FIELD	267:23	267:23	6	COMPRESSION_CCITTFAX3
LEAF_NODE	267:23	267:23	7	COMPRESSION_CCITTFAX3
LEAF_NODE	267:44	267:44	4	)
STATEMENTS	268:2	268:2	4	
EXPR_STATEMENT	268:2	268:64	5	TIFFSetField ( faxTIFF , TIFFTAG_GROUP3OPTIONS , group3options_in ) ;
EXPR	268:2	268:2	6	TIFFSetField ( faxTIFF , TIFFTAG_GROUP3OPTIONS , group3options_in )
FUNCTION_CALL	268:2	268:63	7	TIFFSetField ( faxTIFF , TIFFTAG_GROUP3OPTIONS , group3options_in )
CALLEE	268:2	268:2	8	TIFFSetField
LEAF_NODE	268:2	268:2	9	TIFFSetField
LEAF_NODE	268:14	268:14	8	(
ARGUMENT	268:15	268:15	8	faxTIFF
FIELD	268:15	268:15	9	faxTIFF
LEAF_NODE	268:15	268:15	10	faxTIFF
LEAF_NODE	268:22	268:22	8	,
ARGUMENT	268:24	268:24	8	TIFFTAG_GROUP3OPTIONS
FIELD	268:24	268:24	9	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	268:24	268:24	10	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	268:45	268:45	8	,
ARGUMENT	268:47	268:47	8	group3options_in
FIELD	268:47	268:47	9	group3options_in
LEAF_NODE	268:47	268:47	10	group3options_in
LEAF_NODE	268:63	268:63	8	)
LEAF_NODE	268:64	268:64	6	;
SELECTION	269:1	269:6	3	
KEYWORD	269:1	269:1	4	else
LEAF_NODE	269:1	269:1	5	else
STATEMENTS	269:6	269:6	4	
SELECTION	269:6	270:2	5	
KEYWORD	269:6	269:6	6	if
LEAF_NODE	269:6	269:6	7	if
LEAF_NODE	269:9	269:9	6	(
CONDITION	269:10	269:10	6	compression_in == COMPRESSION_CCITTFAX4
EXPR	269:10	269:28	7	compression_in == COMPRESSION_CCITTFAX4
FIELD	269:10	269:10	8	compression_in
LEAF_NODE	269:10	269:10	9	compression_in
EQ_OPERATOR	269:25	269:25	8	==
LEAF_NODE	269:25	269:25	9	==
FIELD	269:28	269:28	8	COMPRESSION_CCITTFAX4
LEAF_NODE	269:28	269:28	9	COMPRESSION_CCITTFAX4
LEAF_NODE	269:49	269:49	6	)
STATEMENTS	270:2	270:2	6	
EXPR_STATEMENT	270:2	270:64	7	TIFFSetField ( faxTIFF , TIFFTAG_GROUP4OPTIONS , group4options_in ) ;
EXPR	270:2	270:2	8	TIFFSetField ( faxTIFF , TIFFTAG_GROUP4OPTIONS , group4options_in )
FUNCTION_CALL	270:2	270:63	9	TIFFSetField ( faxTIFF , TIFFTAG_GROUP4OPTIONS , group4options_in )
CALLEE	270:2	270:2	10	TIFFSetField
LEAF_NODE	270:2	270:2	11	TIFFSetField
LEAF_NODE	270:14	270:14	10	(
ARGUMENT	270:15	270:15	10	faxTIFF
FIELD	270:15	270:15	11	faxTIFF
LEAF_NODE	270:15	270:15	12	faxTIFF
LEAF_NODE	270:22	270:22	10	,
ARGUMENT	270:24	270:24	10	TIFFTAG_GROUP4OPTIONS
FIELD	270:24	270:24	11	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	270:24	270:24	12	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	270:45	270:45	10	,
ARGUMENT	270:47	270:47	10	group4options_in
FIELD	270:47	270:47	11	group4options_in
LEAF_NODE	270:47	270:47	12	group4options_in
LEAF_NODE	270:63	270:63	10	)
LEAF_NODE	270:64	270:64	8	;
ITERATION	271:1	271:45	3	
KEYWORD	271:1	271:1	4	for
LEAF_NODE	271:1	271:1	5	for
LEAF_NODE	271:5	271:5	4	(
FOR_INIT	271:6	271:12	4	pn = 0 ;
EXPR	271:6	271:6	5	pn = 0
ASSIGN	271:6	271:11	6	pn = 0
LVAL	271:6	271:6	7	pn
FIELD	271:6	271:6	8	pn
LEAF_NODE	271:6	271:6	9	pn
ASSIGN_OP	271:9	271:9	7	=
LEAF_NODE	271:9	271:9	8	=
RVAL	271:11	271:11	7	0
FIELD	271:11	271:11	8	0
LEAF_NODE	271:11	271:11	9	0
LEAF_NODE	271:12	271:12	5	;
CONDITION	271:14	271:14	4	optind < argc
EXPR	271:14	271:23	5	optind < argc
FIELD	271:14	271:14	6	optind
LEAF_NODE	271:14	271:14	7	optind
REL_OPERATOR	271:21	271:21	6	<
LEAF_NODE	271:21	271:21	7	<
FIELD	271:23	271:23	6	argc
LEAF_NODE	271:23	271:23	7	argc
LEAF_NODE	271:27	271:27	4	;
FOR_EXPR	271:29	271:29	4	pn ++ , optind ++
EXPR	271:29	271:35	5	pn ++ , optind ++
FIELD	271:29	271:31	6	pn ++
LEAF_NODE	271:29	271:29	7	pn
LEAF_NODE	271:31	271:31	7	++
LEAF_NODE	271:33	271:33	6	,
FIELD	271:35	271:41	6	optind ++
LEAF_NODE	271:35	271:35	7	optind
LEAF_NODE	271:41	271:41	7	++
LEAF_NODE	271:43	271:43	4	)
STATEMENTS	271:45	351:1	4	
LEAF_NODE	271:45	271:45	5	{
STATEMENTS	272:2	350:2	5	
EXPR_STATEMENT	272:2	272:32	6	in = fopen ( argv [ optind ] , "rb" ) ;
EXPR	272:2	272:2	7	in = fopen ( argv [ optind ] , "rb" )
ASSIGN	272:2	272:7	8	in = fopen ( argv [ optind ] , "rb" )
LVAL	272:2	272:2	9	in
FIELD	272:2	272:2	10	in
LEAF_NODE	272:2	272:2	11	in
ASSIGN_OP	272:5	272:5	9	=
LEAF_NODE	272:5	272:5	10	=
RVAL	272:7	272:7	9	fopen ( argv [ optind ] , "rb" )
FUNCTION_CALL	272:7	272:31	10	fopen ( argv [ optind ] , "rb" )
CALLEE	272:7	272:7	11	fopen
LEAF_NODE	272:7	272:7	12	fopen
LEAF_NODE	272:12	272:12	11	(
ARGUMENT	272:13	272:13	11	argv [ optind ]
FIELD	272:13	272:24	12	argv [ optind ]
LEAF_NODE	272:13	272:13	13	argv
LEAF_NODE	272:17	272:17	13	[
EXPR	272:18	272:18	13	optind
FIELD	272:18	272:18	14	optind
LEAF_NODE	272:18	272:18	15	optind
LEAF_NODE	272:24	272:24	13	]
LEAF_NODE	272:25	272:25	11	,
ARGUMENT	272:27	272:27	11	"rb"
FIELD	272:27	272:27	12	"rb"
LEAF_NODE	272:27	272:27	13	"rb"
LEAF_NODE	272:31	272:31	11	)
LEAF_NODE	272:32	272:32	7	;
SELECTION	273:2	273:18	6	
KEYWORD	273:2	273:2	7	if
LEAF_NODE	273:2	273:2	8	if
LEAF_NODE	273:5	273:5	7	(
CONDITION	273:6	273:6	7	in == NULL
EXPR	273:6	273:12	8	in == NULL
FIELD	273:6	273:6	9	in
LEAF_NODE	273:6	273:6	10	in
EQ_OPERATOR	273:9	273:9	9	==
LEAF_NODE	273:9	273:9	10	==
FIELD	273:12	273:12	9	NULL
LEAF_NODE	273:12	273:12	10	NULL
LEAF_NODE	273:16	273:16	7	)
STATEMENTS	273:18	277:2	7	
LEAF_NODE	273:18	273:18	8	{
STATEMENTS	274:3	276:3	8	
EXPR_STATEMENT	274:3	275:55	9	fprintf ( stderr , "%s: %s: Can not open\n" , argv [ 0 ] , argv [ optind ] ) ;
EXPR	274:3	274:3	10	fprintf ( stderr , "%s: %s: Can not open\n" , argv [ 0 ] , argv [ optind ] )
FUNCTION_CALL	274:3	275:54	11	fprintf ( stderr , "%s: %s: Can not open\n" , argv [ 0 ] , argv [ optind ] )
CALLEE	274:3	274:3	12	fprintf
LEAF_NODE	274:3	274:3	13	fprintf
LEAF_NODE	274:10	274:10	12	(
ARGUMENT	274:11	274:11	12	stderr
FIELD	274:11	274:11	13	stderr
LEAF_NODE	274:11	274:11	14	stderr
LEAF_NODE	274:17	274:17	12	,
ARGUMENT	275:7	275:7	12	"%s: %s: Can not open\n"
FIELD	275:7	275:7	13	"%s: %s: Can not open\n"
LEAF_NODE	275:7	275:7	14	"%s: %s: Can not open\n"
LEAF_NODE	275:31	275:31	12	,
ARGUMENT	275:33	275:33	12	argv [ 0 ]
FIELD	275:33	275:39	13	argv [ 0 ]
LEAF_NODE	275:33	275:33	14	argv
LEAF_NODE	275:37	275:37	14	[
EXPR	275:38	275:38	14	0
FIELD	275:38	275:38	15	0
LEAF_NODE	275:38	275:38	16	0
LEAF_NODE	275:39	275:39	14	]
LEAF_NODE	275:40	275:40	12	,
ARGUMENT	275:42	275:42	12	argv [ optind ]
FIELD	275:42	275:53	13	argv [ optind ]
LEAF_NODE	275:42	275:42	14	argv
LEAF_NODE	275:46	275:46	14	[
EXPR	275:47	275:47	14	optind
FIELD	275:47	275:47	15	optind
LEAF_NODE	275:47	275:47	16	optind
LEAF_NODE	275:53	275:53	14	]
LEAF_NODE	275:54	275:54	12	)
LEAF_NODE	275:55	275:55	10	;
JUMP_STATEMENT	276:3	276:11	9	continue DESTINATION ;
KEYWORD	276:3	276:3	10	continue
LEAF_NODE	276:3	276:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	276:11	276:11	10	;
LEAF_NODE	277:2	277:2	8	}
EXPR_STATEMENT	279:2	279:56	6	client_data . fh = ( thandle_t ) _get_osfhandle ( fileno ( in ) ) ;
EXPR	279:2	279:2	7	client_data . fh = ( thandle_t ) _get_osfhandle ( fileno ( in ) )
ASSIGN	279:2	279:19	8	client_data . fh = ( thandle_t ) _get_osfhandle ( fileno ( in ) )
LVAL	279:2	279:2	9	client_data . fh
FIELD	279:2	279:14	10	client_data . fh
LEAF_NODE	279:2	279:2	11	client_data
LEAF_NODE	279:13	279:13	11	.
LEAF_NODE	279:14	279:14	11	fh
ASSIGN_OP	279:17	279:17	9	=
LEAF_NODE	279:17	279:17	10	=
RVAL	279:19	279:30	9	( thandle_t ) _get_osfhandle ( fileno ( in ) )
LEAF_NODE	279:19	279:19	10	(
TYPE_NAME	279:20	279:20	10	thandle_t
LEAF_NODE	279:20	279:20	11	thandle_t
LEAF_NODE	279:29	279:29	10	)
FUNCTION_CALL	279:30	279:55	10	_get_osfhandle ( fileno ( in ) )
CALLEE	279:30	279:30	11	_get_osfhandle
LEAF_NODE	279:30	279:30	12	_get_osfhandle
LEAF_NODE	279:44	279:44	11	(
ARGUMENT	279:45	279:45	11	fileno ( in )
FUNCTION_CALL	279:45	279:54	12	fileno ( in )
CALLEE	279:45	279:45	13	fileno
LEAF_NODE	279:45	279:45	14	fileno
LEAF_NODE	279:51	279:51	13	(
ARGUMENT	279:52	279:52	13	in
FIELD	279:52	279:52	14	in
LEAF_NODE	279:52	279:52	15	in
LEAF_NODE	279:54	279:54	13	)
LEAF_NODE	279:55	279:55	11	)
LEAF_NODE	279:56	279:56	7	;
EXPR_STATEMENT	281:2	281:29	6	client_data . fd = fileno ( in ) ;
EXPR	281:2	281:2	7	client_data . fd = fileno ( in )
ASSIGN	281:2	281:19	8	client_data . fd = fileno ( in )
LVAL	281:2	281:2	9	client_data . fd
FIELD	281:2	281:14	10	client_data . fd
LEAF_NODE	281:2	281:2	11	client_data
LEAF_NODE	281:13	281:13	11	.
LEAF_NODE	281:14	281:14	11	fd
ASSIGN_OP	281:17	281:17	9	=
LEAF_NODE	281:17	281:17	10	=
RVAL	281:19	281:19	9	fileno ( in )
FUNCTION_CALL	281:19	281:28	10	fileno ( in )
CALLEE	281:19	281:19	11	fileno
LEAF_NODE	281:19	281:19	12	fileno
LEAF_NODE	281:25	281:25	11	(
ARGUMENT	281:26	281:26	11	in
FIELD	281:26	281:26	12	in
LEAF_NODE	281:26	281:26	13	in
LEAF_NODE	281:28	281:28	11	)
LEAF_NODE	281:29	281:29	7	;
EXPR_STATEMENT	283:2	283:44	6	TIFFSetClientdata ( faxTIFF , client_data . fh ) ;
EXPR	283:2	283:2	7	TIFFSetClientdata ( faxTIFF , client_data . fh )
FUNCTION_CALL	283:2	283:43	8	TIFFSetClientdata ( faxTIFF , client_data . fh )
CALLEE	283:2	283:2	9	TIFFSetClientdata
LEAF_NODE	283:2	283:2	10	TIFFSetClientdata
LEAF_NODE	283:19	283:19	9	(
ARGUMENT	283:20	283:20	9	faxTIFF
FIELD	283:20	283:20	10	faxTIFF
LEAF_NODE	283:20	283:20	11	faxTIFF
LEAF_NODE	283:27	283:27	9	,
ARGUMENT	283:29	283:29	9	client_data . fh
FIELD	283:29	283:41	10	client_data . fh
LEAF_NODE	283:29	283:29	11	client_data
LEAF_NODE	283:40	283:40	11	.
LEAF_NODE	283:41	283:41	11	fh
LEAF_NODE	283:43	283:43	9	)
LEAF_NODE	283:44	283:44	7	;
EXPR_STATEMENT	284:2	284:53	6	TIFFSetFileName ( faxTIFF , ( const char * ) argv [ optind ] ) ;
EXPR	284:2	284:2	7	TIFFSetFileName ( faxTIFF , ( const char * ) argv [ optind ] )
FUNCTION_CALL	284:2	284:52	8	TIFFSetFileName ( faxTIFF , ( const char * ) argv [ optind ] )
CALLEE	284:2	284:2	9	TIFFSetFileName
LEAF_NODE	284:2	284:2	10	TIFFSetFileName
LEAF_NODE	284:17	284:17	9	(
ARGUMENT	284:18	284:18	9	faxTIFF
FIELD	284:18	284:18	10	faxTIFF
LEAF_NODE	284:18	284:18	11	faxTIFF
LEAF_NODE	284:25	284:25	9	,
ARGUMENT	284:27	284:40	9	( const char * ) argv [ optind ]
LEAF_NODE	284:27	284:27	10	(
TYPE_NAME	284:28	284:34	10	const char
LEAF_NODE	284:28	284:28	11	const
LEAF_NODE	284:34	284:34	11	char
LEAF_NODE	284:38	284:38	10	*
LEAF_NODE	284:39	284:39	10	)
FIELD	284:40	284:51	10	argv [ optind ]
LEAF_NODE	284:40	284:40	11	argv
LEAF_NODE	284:44	284:44	11	[
EXPR	284:45	284:45	11	optind
FIELD	284:45	284:45	12	optind
LEAF_NODE	284:45	284:45	13	optind
LEAF_NODE	284:51	284:51	11	]
LEAF_NODE	284:52	284:52	9	)
LEAF_NODE	284:53	284:53	7	;
EXPR_STATEMENT	285:2	285:46	6	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , xsize ) ;
EXPR	285:2	285:2	7	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , xsize )
FUNCTION_CALL	285:2	285:45	8	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , xsize )
CALLEE	285:2	285:2	9	TIFFSetField
LEAF_NODE	285:2	285:2	10	TIFFSetField
LEAF_NODE	285:14	285:14	9	(
ARGUMENT	285:15	285:15	9	out
FIELD	285:15	285:15	10	out
LEAF_NODE	285:15	285:15	11	out
LEAF_NODE	285:18	285:18	9	,
ARGUMENT	285:20	285:20	9	TIFFTAG_IMAGEWIDTH
FIELD	285:20	285:20	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	285:20	285:20	11	TIFFTAG_IMAGEWIDTH
LEAF_NODE	285:38	285:38	9	,
ARGUMENT	285:40	285:40	9	xsize
FIELD	285:40	285:40	10	xsize
LEAF_NODE	285:40	285:40	11	xsize
LEAF_NODE	285:45	285:45	9	)
LEAF_NODE	285:46	285:46	7	;
EXPR_STATEMENT	286:2	286:45	6	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 1 ) ;
EXPR	286:2	286:2	7	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 1 )
FUNCTION_CALL	286:2	286:44	8	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , 1 )
CALLEE	286:2	286:2	9	TIFFSetField
LEAF_NODE	286:2	286:2	10	TIFFSetField
LEAF_NODE	286:14	286:14	9	(
ARGUMENT	286:15	286:15	9	out
FIELD	286:15	286:15	10	out
LEAF_NODE	286:15	286:15	11	out
LEAF_NODE	286:18	286:18	9	,
ARGUMENT	286:20	286:20	9	TIFFTAG_BITSPERSAMPLE
FIELD	286:20	286:20	10	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	286:20	286:20	11	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	286:41	286:41	9	,
ARGUMENT	286:43	286:43	9	1
FIELD	286:43	286:43	10	1
LEAF_NODE	286:43	286:43	11	1
LEAF_NODE	286:44	286:44	9	)
LEAF_NODE	286:45	286:45	7	;
EXPR_STATEMENT	287:2	287:57	6	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression_out ) ;
EXPR	287:2	287:2	7	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression_out )
FUNCTION_CALL	287:2	287:56	8	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression_out )
CALLEE	287:2	287:2	9	TIFFSetField
LEAF_NODE	287:2	287:2	10	TIFFSetField
LEAF_NODE	287:14	287:14	9	(
ARGUMENT	287:15	287:15	9	out
FIELD	287:15	287:15	10	out
LEAF_NODE	287:15	287:15	11	out
LEAF_NODE	287:18	287:18	9	,
ARGUMENT	287:20	287:20	9	TIFFTAG_COMPRESSION
FIELD	287:20	287:20	10	TIFFTAG_COMPRESSION
LEAF_NODE	287:20	287:20	11	TIFFTAG_COMPRESSION
LEAF_NODE	287:39	287:39	9	,
ARGUMENT	287:41	287:41	9	compression_out
FIELD	287:41	287:41	10	compression_out
LEAF_NODE	287:41	287:41	11	compression_out
LEAF_NODE	287:56	287:56	9	)
LEAF_NODE	287:57	287:57	7	;
EXPR_STATEMENT	288:2	288:57	6	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric_out ) ;
EXPR	288:2	288:2	7	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric_out )
FUNCTION_CALL	288:2	288:56	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric_out )
CALLEE	288:2	288:2	9	TIFFSetField
LEAF_NODE	288:2	288:2	10	TIFFSetField
LEAF_NODE	288:14	288:14	9	(
ARGUMENT	288:15	288:15	9	out
FIELD	288:15	288:15	10	out
LEAF_NODE	288:15	288:15	11	out
LEAF_NODE	288:18	288:18	9	,
ARGUMENT	288:20	288:20	9	TIFFTAG_PHOTOMETRIC
FIELD	288:20	288:20	10	TIFFTAG_PHOTOMETRIC
LEAF_NODE	288:20	288:20	11	TIFFTAG_PHOTOMETRIC
LEAF_NODE	288:39	288:39	9	,
ARGUMENT	288:41	288:41	9	photometric_out
FIELD	288:41	288:41	10	photometric_out
LEAF_NODE	288:41	288:41	11	photometric_out
LEAF_NODE	288:56	288:56	9	)
LEAF_NODE	288:57	288:57	7	;
EXPR_STATEMENT	289:2	289:61	6	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT ) ;
EXPR	289:2	289:2	7	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
FUNCTION_CALL	289:2	289:60	8	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
CALLEE	289:2	289:2	9	TIFFSetField
LEAF_NODE	289:2	289:2	10	TIFFSetField
LEAF_NODE	289:14	289:14	9	(
ARGUMENT	289:15	289:15	9	out
FIELD	289:15	289:15	10	out
LEAF_NODE	289:15	289:15	11	out
LEAF_NODE	289:18	289:18	9	,
ARGUMENT	289:20	289:20	9	TIFFTAG_ORIENTATION
FIELD	289:20	289:20	10	TIFFTAG_ORIENTATION
LEAF_NODE	289:20	289:20	11	TIFFTAG_ORIENTATION
LEAF_NODE	289:39	289:39	9	,
ARGUMENT	289:41	289:41	9	ORIENTATION_TOPLEFT
FIELD	289:41	289:41	10	ORIENTATION_TOPLEFT
LEAF_NODE	289:41	289:41	11	ORIENTATION_TOPLEFT
LEAF_NODE	289:60	289:60	9	)
LEAF_NODE	289:61	289:61	7	;
EXPR_STATEMENT	290:2	290:47	6	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 1 ) ;
EXPR	290:2	290:2	7	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 1 )
FUNCTION_CALL	290:2	290:46	8	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	290:2	290:2	9	TIFFSetField
LEAF_NODE	290:2	290:2	10	TIFFSetField
LEAF_NODE	290:14	290:14	9	(
ARGUMENT	290:15	290:15	9	out
FIELD	290:15	290:15	10	out
LEAF_NODE	290:15	290:15	11	out
LEAF_NODE	290:18	290:18	9	,
ARGUMENT	290:20	290:20	9	TIFFTAG_SAMPLESPERPIXEL
FIELD	290:20	290:20	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	290:20	290:20	11	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	290:43	290:43	9	,
ARGUMENT	290:45	290:45	9	1
FIELD	290:45	290:45	10	1
LEAF_NODE	290:45	290:45	11	1
LEAF_NODE	290:46	290:46	9	)
LEAF_NODE	290:47	290:47	7	;
SELECTION	291:2	291:27	6	
KEYWORD	291:2	291:2	7	switch
LEAF_NODE	291:2	291:2	8	switch
LEAF_NODE	291:9	291:9	7	(
CONDITION	291:10	291:10	7	compression_out
EXPR	291:10	291:10	8	compression_out
FIELD	291:10	291:10	9	compression_out
LEAF_NODE	291:10	291:10	10	compression_out
LEAF_NODE	291:25	291:25	7	)
STATEMENTS	291:27	313:2	7	
LEAF_NODE	291:27	291:27	8	{
STATEMENTS	293:3	312:22	8	
LABEL	293:3	293:29	9	case COMPRESSION_CCITTFAX3 :
LEAF_NODE	293:3	293:3	10	case
LEAF_NODE	293:8	293:8	10	COMPRESSION_CCITTFAX3
LEAF_NODE	293:29	293:29	10	:
EXPR_STATEMENT	294:3	295:27	9	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , group3options_out ) ;
EXPR	294:3	294:3	10	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , group3options_out )
FUNCTION_CALL	294:3	295:26	11	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , group3options_out )
CALLEE	294:3	294:3	12	TIFFSetField
LEAF_NODE	294:3	294:3	13	TIFFSetField
LEAF_NODE	294:15	294:15	12	(
ARGUMENT	294:16	294:16	12	out
FIELD	294:16	294:16	13	out
LEAF_NODE	294:16	294:16	14	out
LEAF_NODE	294:19	294:19	12	,
ARGUMENT	294:21	294:21	12	TIFFTAG_GROUP3OPTIONS
FIELD	294:21	294:21	13	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	294:21	294:21	14	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	294:42	294:42	12	,
ARGUMENT	295:9	295:9	12	group3options_out
FIELD	295:9	295:9	13	group3options_out
LEAF_NODE	295:9	295:9	14	group3options_out
LEAF_NODE	295:26	295:26	12	)
LEAF_NODE	295:27	295:27	10	;
EXPR_STATEMENT	296:3	296:43	9	TIFFSetField ( out , TIFFTAG_FAXMODE , mode ) ;
EXPR	296:3	296:3	10	TIFFSetField ( out , TIFFTAG_FAXMODE , mode )
FUNCTION_CALL	296:3	296:42	11	TIFFSetField ( out , TIFFTAG_FAXMODE , mode )
CALLEE	296:3	296:3	12	TIFFSetField
LEAF_NODE	296:3	296:3	13	TIFFSetField
LEAF_NODE	296:15	296:15	12	(
ARGUMENT	296:16	296:16	12	out
FIELD	296:16	296:16	13	out
LEAF_NODE	296:16	296:16	14	out
LEAF_NODE	296:19	296:19	12	,
ARGUMENT	296:21	296:21	12	TIFFTAG_FAXMODE
FIELD	296:21	296:21	13	TIFFTAG_FAXMODE
LEAF_NODE	296:21	296:21	14	TIFFTAG_FAXMODE
LEAF_NODE	296:36	296:36	12	,
ARGUMENT	296:38	296:38	12	mode
FIELD	296:38	296:38	13	mode
LEAF_NODE	296:38	296:38	14	mode
LEAF_NODE	296:42	296:42	12	)
LEAF_NODE	296:43	296:43	10	;
LEAF_NODE	297:3	297:3	9	rowsperstrip
LEAF_NODE	297:16	297:16	9	=
LEAF_NODE	298:4	298:4	9	(
LEAF_NODE	298:5	298:5	9	defrowsperstrip
LEAF_NODE	298:20	298:20	9	)
LEAF_NODE	298:21	298:21	9	?
LABEL	298:22	298:37	9	defrowsperstrip :
LEAF_NODE	298:22	298:22	10	defrowsperstrip
LEAF_NODE	298:37	298:37	10	:
EXPR_STATEMENT	298:38	298:49	9	( uint32 ) - 1L ;
EXPR	298:38	298:46	10	( uint32 ) - 1L
LEAF_NODE	298:38	298:38	11	(
TYPE_NAME	298:39	298:39	11	uint32
LEAF_NODE	298:39	298:39	12	uint32
LEAF_NODE	298:45	298:45	11	)
UNARY_EXPR	298:46	298:47	11	- 1L
UNARY_OPERATOR	298:46	298:46	12	-
LEAF_NODE	298:46	298:46	13	-
FIELD	298:47	298:47	12	1L
LEAF_NODE	298:47	298:47	13	1L
LEAF_NODE	298:49	298:49	10	;
JUMP_STATEMENT	299:3	299:8	9	break DESTINATION ;
KEYWORD	299:3	299:3	10	break
LEAF_NODE	299:3	299:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	299:8	299:8	10	;
LABEL	302:3	302:29	9	case COMPRESSION_CCITTFAX4 :
LEAF_NODE	302:3	302:3	10	case
LEAF_NODE	302:8	302:8	10	COMPRESSION_CCITTFAX4
LEAF_NODE	302:29	302:29	10	:
EXPR_STATEMENT	303:3	304:27	9	TIFFSetField ( out , TIFFTAG_GROUP4OPTIONS , group4options_out ) ;
EXPR	303:3	303:3	10	TIFFSetField ( out , TIFFTAG_GROUP4OPTIONS , group4options_out )
FUNCTION_CALL	303:3	304:26	11	TIFFSetField ( out , TIFFTAG_GROUP4OPTIONS , group4options_out )
CALLEE	303:3	303:3	12	TIFFSetField
LEAF_NODE	303:3	303:3	13	TIFFSetField
LEAF_NODE	303:15	303:15	12	(
ARGUMENT	303:16	303:16	12	out
FIELD	303:16	303:16	13	out
LEAF_NODE	303:16	303:16	14	out
LEAF_NODE	303:19	303:19	12	,
ARGUMENT	303:21	303:21	12	TIFFTAG_GROUP4OPTIONS
FIELD	303:21	303:21	13	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	303:21	303:21	14	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	303:42	303:42	12	,
ARGUMENT	304:9	304:9	12	group4options_out
FIELD	304:9	304:9	13	group4options_out
LEAF_NODE	304:9	304:9	14	group4options_out
LEAF_NODE	304:26	304:26	12	)
LEAF_NODE	304:27	304:27	10	;
EXPR_STATEMENT	305:3	305:43	9	TIFFSetField ( out , TIFFTAG_FAXMODE , mode ) ;
EXPR	305:3	305:3	10	TIFFSetField ( out , TIFFTAG_FAXMODE , mode )
FUNCTION_CALL	305:3	305:42	11	TIFFSetField ( out , TIFFTAG_FAXMODE , mode )
CALLEE	305:3	305:3	12	TIFFSetField
LEAF_NODE	305:3	305:3	13	TIFFSetField
LEAF_NODE	305:15	305:15	12	(
ARGUMENT	305:16	305:16	12	out
FIELD	305:16	305:16	13	out
LEAF_NODE	305:16	305:16	14	out
LEAF_NODE	305:19	305:19	12	,
ARGUMENT	305:21	305:21	12	TIFFTAG_FAXMODE
FIELD	305:21	305:21	13	TIFFTAG_FAXMODE
LEAF_NODE	305:21	305:21	14	TIFFTAG_FAXMODE
LEAF_NODE	305:36	305:36	12	,
ARGUMENT	305:38	305:38	12	mode
FIELD	305:38	305:38	13	mode
LEAF_NODE	305:38	305:38	14	mode
LEAF_NODE	305:42	305:42	12	)
LEAF_NODE	305:43	305:43	10	;
LEAF_NODE	306:3	306:3	9	rowsperstrip
LEAF_NODE	306:16	306:16	9	=
LEAF_NODE	307:4	307:4	9	(
LEAF_NODE	307:5	307:5	9	defrowsperstrip
LEAF_NODE	307:20	307:20	9	)
LEAF_NODE	307:21	307:21	9	?
LABEL	307:22	307:37	9	defrowsperstrip :
LEAF_NODE	307:22	307:22	10	defrowsperstrip
LEAF_NODE	307:37	307:37	10	:
EXPR_STATEMENT	307:38	307:49	9	( uint32 ) - 1L ;
EXPR	307:38	307:46	10	( uint32 ) - 1L
LEAF_NODE	307:38	307:38	11	(
TYPE_NAME	307:39	307:39	11	uint32
LEAF_NODE	307:39	307:39	12	uint32
LEAF_NODE	307:45	307:45	11	)
UNARY_EXPR	307:46	307:47	11	- 1L
UNARY_OPERATOR	307:46	307:46	12	-
LEAF_NODE	307:46	307:46	13	-
FIELD	307:47	307:47	12	1L
LEAF_NODE	307:47	307:47	13	1L
LEAF_NODE	307:49	307:49	10	;
JUMP_STATEMENT	308:3	308:8	9	break DESTINATION ;
KEYWORD	308:3	308:3	10	break
LEAF_NODE	308:3	308:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	308:8	308:8	10	;
LABEL	310:3	310:10	9	default :
LEAF_NODE	310:3	310:3	10	default
LEAF_NODE	310:10	310:10	10	:
LEAF_NODE	311:3	311:3	9	rowsperstrip
LEAF_NODE	311:16	311:16	9	=
LEAF_NODE	311:18	311:18	9	(
LEAF_NODE	311:19	311:19	9	defrowsperstrip
LEAF_NODE	311:34	311:34	9	)
LEAF_NODE	311:36	311:36	9	?
LABEL	312:4	312:20	9	defrowsperstrip :
LEAF_NODE	312:4	312:4	10	defrowsperstrip
LEAF_NODE	312:20	312:20	10	:
EXPR_STATEMENT	312:22	312:50	9	TIFFDefaultStripSize ( out , 0 ) ;
EXPR	312:22	312:22	10	TIFFDefaultStripSize ( out , 0 )
FUNCTION_CALL	312:22	312:49	11	TIFFDefaultStripSize ( out , 0 )
CALLEE	312:22	312:22	12	TIFFDefaultStripSize
LEAF_NODE	312:22	312:22	13	TIFFDefaultStripSize
LEAF_NODE	312:42	312:42	12	(
ARGUMENT	312:43	312:43	12	out
FIELD	312:43	312:43	13	out
LEAF_NODE	312:43	312:43	14	out
LEAF_NODE	312:46	312:46	12	,
ARGUMENT	312:48	312:48	12	0
FIELD	312:48	312:48	13	0
LEAF_NODE	312:48	312:48	14	0
LEAF_NODE	312:49	312:49	12	)
LEAF_NODE	312:50	312:50	10	;
LEAF_NODE	313:2	313:2	8	}
EXPR_STATEMENT	314:2	314:55	6	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ;
EXPR	314:2	314:2	7	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
FUNCTION_CALL	314:2	314:54	8	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
CALLEE	314:2	314:2	9	TIFFSetField
LEAF_NODE	314:2	314:2	10	TIFFSetField
LEAF_NODE	314:14	314:14	9	(
ARGUMENT	314:15	314:15	9	out
FIELD	314:15	314:15	10	out
LEAF_NODE	314:15	314:15	11	out
LEAF_NODE	314:18	314:18	9	,
ARGUMENT	314:20	314:20	9	TIFFTAG_ROWSPERSTRIP
FIELD	314:20	314:20	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	314:20	314:20	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	314:40	314:40	9	,
ARGUMENT	314:42	314:42	9	rowsperstrip
FIELD	314:42	314:42	10	rowsperstrip
LEAF_NODE	314:42	314:42	11	rowsperstrip
LEAF_NODE	314:54	314:54	9	)
LEAF_NODE	314:55	314:55	7	;
EXPR_STATEMENT	315:2	315:62	6	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	315:2	315:2	7	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	315:2	315:61	8	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	315:2	315:2	9	TIFFSetField
LEAF_NODE	315:2	315:2	10	TIFFSetField
LEAF_NODE	315:14	315:14	9	(
ARGUMENT	315:15	315:15	9	out
FIELD	315:15	315:15	10	out
LEAF_NODE	315:15	315:15	11	out
LEAF_NODE	315:18	315:18	9	,
ARGUMENT	315:20	315:20	9	TIFFTAG_PLANARCONFIG
FIELD	315:20	315:20	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	315:20	315:20	11	TIFFTAG_PLANARCONFIG
LEAF_NODE	315:40	315:40	9	,
ARGUMENT	315:42	315:42	9	PLANARCONFIG_CONTIG
FIELD	315:42	315:42	10	PLANARCONFIG_CONTIG
LEAF_NODE	315:42	315:42	11	PLANARCONFIG_CONTIG
LEAF_NODE	315:61	315:61	9	)
LEAF_NODE	315:62	315:62	7	;
EXPR_STATEMENT	316:2	316:53	6	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder_out ) ;
EXPR	316:2	316:2	7	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder_out )
FUNCTION_CALL	316:2	316:52	8	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder_out )
CALLEE	316:2	316:2	9	TIFFSetField
LEAF_NODE	316:2	316:2	10	TIFFSetField
LEAF_NODE	316:14	316:14	9	(
ARGUMENT	316:15	316:15	9	out
FIELD	316:15	316:15	10	out
LEAF_NODE	316:15	316:15	11	out
LEAF_NODE	316:18	316:18	9	,
ARGUMENT	316:20	316:20	9	TIFFTAG_FILLORDER
FIELD	316:20	316:20	10	TIFFTAG_FILLORDER
LEAF_NODE	316:20	316:20	11	TIFFTAG_FILLORDER
LEAF_NODE	316:37	316:37	9	,
ARGUMENT	316:39	316:39	9	fillorder_out
FIELD	316:39	316:39	10	fillorder_out
LEAF_NODE	316:39	316:39	11	fillorder_out
LEAF_NODE	316:52	316:52	9	)
LEAF_NODE	316:53	316:53	7	;
EXPR_STATEMENT	317:2	317:49	6	TIFFSetField ( out , TIFFTAG_SOFTWARE , "fax2tiff" ) ;
EXPR	317:2	317:2	7	TIFFSetField ( out , TIFFTAG_SOFTWARE , "fax2tiff" )
FUNCTION_CALL	317:2	317:48	8	TIFFSetField ( out , TIFFTAG_SOFTWARE , "fax2tiff" )
CALLEE	317:2	317:2	9	TIFFSetField
LEAF_NODE	317:2	317:2	10	TIFFSetField
LEAF_NODE	317:14	317:14	9	(
ARGUMENT	317:15	317:15	9	out
FIELD	317:15	317:15	10	out
LEAF_NODE	317:15	317:15	11	out
LEAF_NODE	317:18	317:18	9	,
ARGUMENT	317:20	317:20	9	TIFFTAG_SOFTWARE
FIELD	317:20	317:20	10	TIFFTAG_SOFTWARE
LEAF_NODE	317:20	317:20	11	TIFFTAG_SOFTWARE
LEAF_NODE	317:36	317:36	9	,
ARGUMENT	317:38	317:38	9	"fax2tiff"
FIELD	317:38	317:38	10	"fax2tiff"
LEAF_NODE	317:38	317:38	11	"fax2tiff"
LEAF_NODE	317:48	317:48	9	)
LEAF_NODE	317:49	317:49	7	;
EXPR_STATEMENT	318:2	318:47	6	TIFFSetField ( out , TIFFTAG_XRESOLUTION , 204.0 ) ;
EXPR	318:2	318:2	7	TIFFSetField ( out , TIFFTAG_XRESOLUTION , 204.0 )
FUNCTION_CALL	318:2	318:46	8	TIFFSetField ( out , TIFFTAG_XRESOLUTION , 204.0 )
CALLEE	318:2	318:2	9	TIFFSetField
LEAF_NODE	318:2	318:2	10	TIFFSetField
LEAF_NODE	318:14	318:14	9	(
ARGUMENT	318:15	318:15	9	out
FIELD	318:15	318:15	10	out
LEAF_NODE	318:15	318:15	11	out
LEAF_NODE	318:18	318:18	9	,
ARGUMENT	318:20	318:20	9	TIFFTAG_XRESOLUTION
FIELD	318:20	318:20	10	TIFFTAG_XRESOLUTION
LEAF_NODE	318:20	318:20	11	TIFFTAG_XRESOLUTION
LEAF_NODE	318:39	318:39	9	,
ARGUMENT	318:41	318:41	9	204.0
FIELD	318:41	318:41	10	204.0
LEAF_NODE	318:41	318:41	11	204.0
LEAF_NODE	318:46	318:46	9	)
LEAF_NODE	318:47	318:47	7	;
SELECTION	319:2	319:16	6	
KEYWORD	319:2	319:2	7	if
LEAF_NODE	319:2	319:2	8	if
LEAF_NODE	319:5	319:5	7	(
CONDITION	319:6	319:6	7	! stretch
EXPR	319:6	319:6	8	! stretch
UNARY_EXPR	319:6	319:7	9	! stretch
UNARY_OPERATOR	319:6	319:6	10	!
LEAF_NODE	319:6	319:6	11	!
FIELD	319:7	319:7	10	stretch
LEAF_NODE	319:7	319:7	11	stretch
LEAF_NODE	319:14	319:14	7	)
STATEMENTS	319:16	322:2	7	
LEAF_NODE	319:16	319:16	8	{
STATEMENTS	320:3	321:3	8	
EXPR_STATEMENT	320:3	320:52	9	TIFFGetField ( faxTIFF , TIFFTAG_YRESOLUTION , & resY ) ;
EXPR	320:3	320:3	10	TIFFGetField ( faxTIFF , TIFFTAG_YRESOLUTION , & resY )
FUNCTION_CALL	320:3	320:51	11	TIFFGetField ( faxTIFF , TIFFTAG_YRESOLUTION , & resY )
CALLEE	320:3	320:3	12	TIFFGetField
LEAF_NODE	320:3	320:3	13	TIFFGetField
LEAF_NODE	320:15	320:15	12	(
ARGUMENT	320:16	320:16	12	faxTIFF
FIELD	320:16	320:16	13	faxTIFF
LEAF_NODE	320:16	320:16	14	faxTIFF
LEAF_NODE	320:23	320:23	12	,
ARGUMENT	320:25	320:25	12	TIFFTAG_YRESOLUTION
FIELD	320:25	320:25	13	TIFFTAG_YRESOLUTION
LEAF_NODE	320:25	320:25	14	TIFFTAG_YRESOLUTION
LEAF_NODE	320:44	320:44	12	,
ARGUMENT	320:46	320:46	12	& resY
UNARY_EXPR	320:46	320:47	13	& resY
UNARY_OPERATOR	320:46	320:46	14	&
LEAF_NODE	320:46	320:46	15	&
FIELD	320:47	320:47	14	resY
LEAF_NODE	320:47	320:47	15	resY
LEAF_NODE	320:51	320:51	12	)
LEAF_NODE	320:52	320:52	10	;
EXPR_STATEMENT	321:3	321:47	9	TIFFSetField ( out , TIFFTAG_YRESOLUTION , resY ) ;
EXPR	321:3	321:3	10	TIFFSetField ( out , TIFFTAG_YRESOLUTION , resY )
FUNCTION_CALL	321:3	321:46	11	TIFFSetField ( out , TIFFTAG_YRESOLUTION , resY )
CALLEE	321:3	321:3	12	TIFFSetField
LEAF_NODE	321:3	321:3	13	TIFFSetField
LEAF_NODE	321:15	321:15	12	(
ARGUMENT	321:16	321:16	12	out
FIELD	321:16	321:16	13	out
LEAF_NODE	321:16	321:16	14	out
LEAF_NODE	321:19	321:19	12	,
ARGUMENT	321:21	321:21	12	TIFFTAG_YRESOLUTION
FIELD	321:21	321:21	13	TIFFTAG_YRESOLUTION
LEAF_NODE	321:21	321:21	14	TIFFTAG_YRESOLUTION
LEAF_NODE	321:40	321:40	12	,
ARGUMENT	321:42	321:42	12	resY
FIELD	321:42	321:42	13	resY
LEAF_NODE	321:42	321:42	14	resY
LEAF_NODE	321:46	321:46	12	)
LEAF_NODE	321:47	321:47	10	;
LEAF_NODE	322:2	322:2	8	}
SELECTION	322:4	323:3	6	
KEYWORD	322:4	322:4	7	else
LEAF_NODE	322:4	322:4	8	else
STATEMENTS	323:3	323:3	7	
EXPR_STATEMENT	323:3	323:47	8	TIFFSetField ( out , TIFFTAG_YRESOLUTION , 196. ) ;
EXPR	323:3	323:3	9	TIFFSetField ( out , TIFFTAG_YRESOLUTION , 196. )
FUNCTION_CALL	323:3	323:46	10	TIFFSetField ( out , TIFFTAG_YRESOLUTION , 196. )
CALLEE	323:3	323:3	11	TIFFSetField
LEAF_NODE	323:3	323:3	12	TIFFSetField
LEAF_NODE	323:15	323:15	11	(
ARGUMENT	323:16	323:16	11	out
FIELD	323:16	323:16	12	out
LEAF_NODE	323:16	323:16	13	out
LEAF_NODE	323:19	323:19	11	,
ARGUMENT	323:21	323:21	11	TIFFTAG_YRESOLUTION
FIELD	323:21	323:21	12	TIFFTAG_YRESOLUTION
LEAF_NODE	323:21	323:21	13	TIFFTAG_YRESOLUTION
LEAF_NODE	323:40	323:40	11	,
ARGUMENT	323:42	323:42	11	196.
FIELD	323:42	323:42	12	196.
LEAF_NODE	323:42	323:42	13	196.
LEAF_NODE	323:46	323:46	11	)
LEAF_NODE	323:47	323:47	9	;
EXPR_STATEMENT	324:2	324:57	6	TIFFSetField ( out , TIFFTAG_RESOLUTIONUNIT , RESUNIT_INCH ) ;
EXPR	324:2	324:2	7	TIFFSetField ( out , TIFFTAG_RESOLUTIONUNIT , RESUNIT_INCH )
FUNCTION_CALL	324:2	324:56	8	TIFFSetField ( out , TIFFTAG_RESOLUTIONUNIT , RESUNIT_INCH )
CALLEE	324:2	324:2	9	TIFFSetField
LEAF_NODE	324:2	324:2	10	TIFFSetField
LEAF_NODE	324:14	324:14	9	(
ARGUMENT	324:15	324:15	9	out
FIELD	324:15	324:15	10	out
LEAF_NODE	324:15	324:15	11	out
LEAF_NODE	324:18	324:18	9	,
ARGUMENT	324:20	324:20	9	TIFFTAG_RESOLUTIONUNIT
FIELD	324:20	324:20	10	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	324:20	324:20	11	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	324:42	324:42	9	,
ARGUMENT	324:44	324:44	9	RESUNIT_INCH
FIELD	324:44	324:44	10	RESUNIT_INCH
LEAF_NODE	324:44	324:44	11	RESUNIT_INCH
LEAF_NODE	324:56	324:56	9	)
LEAF_NODE	324:57	324:57	7	;
EXPR_STATEMENT	325:2	325:51	6	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pn , npages ) ;
EXPR	325:2	325:2	7	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pn , npages )
FUNCTION_CALL	325:2	325:50	8	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pn , npages )
CALLEE	325:2	325:2	9	TIFFSetField
LEAF_NODE	325:2	325:2	10	TIFFSetField
LEAF_NODE	325:14	325:14	9	(
ARGUMENT	325:15	325:15	9	out
FIELD	325:15	325:15	10	out
LEAF_NODE	325:15	325:15	11	out
LEAF_NODE	325:18	325:18	9	,
ARGUMENT	325:20	325:20	9	TIFFTAG_PAGENUMBER
FIELD	325:20	325:20	10	TIFFTAG_PAGENUMBER
LEAF_NODE	325:20	325:20	11	TIFFTAG_PAGENUMBER
LEAF_NODE	325:38	325:38	9	,
ARGUMENT	325:40	325:40	9	pn
FIELD	325:40	325:40	10	pn
LEAF_NODE	325:40	325:40	11	pn
LEAF_NODE	325:42	325:42	9	,
ARGUMENT	325:44	325:44	9	npages
FIELD	325:44	325:44	10	npages
LEAF_NODE	325:44	325:44	11	npages
LEAF_NODE	325:50	325:50	9	)
LEAF_NODE	325:51	325:51	7	;
SELECTION	327:2	328:6	6	
KEYWORD	327:2	327:2	7	if
LEAF_NODE	327:2	327:2	8	if
LEAF_NODE	327:5	327:5	7	(
CONDITION	327:6	327:6	7	! verbose
EXPR	327:6	327:6	8	! verbose
UNARY_EXPR	327:6	327:7	9	! verbose
UNARY_OPERATOR	327:6	327:6	10	!
LEAF_NODE	327:6	327:6	11	!
FIELD	327:7	327:7	10	verbose
LEAF_NODE	327:7	327:7	11	verbose
LEAF_NODE	327:14	327:14	7	)
STATEMENTS	328:6	328:6	7	
EXPR_STATEMENT	328:6	328:44	8	whandler = TIFFSetWarningHandler ( NULL ) ;
EXPR	328:6	328:6	9	whandler = TIFFSetWarningHandler ( NULL )
ASSIGN	328:6	328:17	10	whandler = TIFFSetWarningHandler ( NULL )
LVAL	328:6	328:6	11	whandler
FIELD	328:6	328:6	12	whandler
LEAF_NODE	328:6	328:6	13	whandler
ASSIGN_OP	328:15	328:15	11	=
LEAF_NODE	328:15	328:15	12	=
RVAL	328:17	328:17	11	TIFFSetWarningHandler ( NULL )
FUNCTION_CALL	328:17	328:43	12	TIFFSetWarningHandler ( NULL )
CALLEE	328:17	328:17	13	TIFFSetWarningHandler
LEAF_NODE	328:17	328:17	14	TIFFSetWarningHandler
LEAF_NODE	328:38	328:38	13	(
ARGUMENT	328:39	328:39	13	NULL
FIELD	328:39	328:39	14	NULL
LEAF_NODE	328:39	328:39	15	NULL
LEAF_NODE	328:43	328:43	13	)
LEAF_NODE	328:44	328:44	9	;
EXPR_STATEMENT	329:2	329:34	6	rows = copyFaxFile ( faxTIFF , out ) ;
EXPR	329:2	329:2	7	rows = copyFaxFile ( faxTIFF , out )
ASSIGN	329:2	329:9	8	rows = copyFaxFile ( faxTIFF , out )
LVAL	329:2	329:2	9	rows
FIELD	329:2	329:2	10	rows
LEAF_NODE	329:2	329:2	11	rows
ASSIGN_OP	329:7	329:7	9	=
LEAF_NODE	329:7	329:7	10	=
RVAL	329:9	329:9	9	copyFaxFile ( faxTIFF , out )
FUNCTION_CALL	329:9	329:33	10	copyFaxFile ( faxTIFF , out )
CALLEE	329:9	329:9	11	copyFaxFile
LEAF_NODE	329:9	329:9	12	copyFaxFile
LEAF_NODE	329:20	329:20	11	(
ARGUMENT	329:21	329:21	11	faxTIFF
FIELD	329:21	329:21	12	faxTIFF
LEAF_NODE	329:21	329:21	13	faxTIFF
LEAF_NODE	329:28	329:28	11	,
ARGUMENT	329:30	329:30	11	out
FIELD	329:30	329:30	12	out
LEAF_NODE	329:30	329:30	13	out
LEAF_NODE	329:33	329:33	11	)
LEAF_NODE	329:34	329:34	7	;
EXPR_STATEMENT	330:2	330:12	6	fclose ( in ) ;
EXPR	330:2	330:2	7	fclose ( in )
FUNCTION_CALL	330:2	330:11	8	fclose ( in )
CALLEE	330:2	330:2	9	fclose
LEAF_NODE	330:2	330:2	10	fclose
LEAF_NODE	330:8	330:8	9	(
ARGUMENT	330:9	330:9	9	in
FIELD	330:9	330:9	10	in
LEAF_NODE	330:9	330:9	11	in
LEAF_NODE	330:11	330:11	9	)
LEAF_NODE	330:12	330:12	7	;
SELECTION	331:2	332:6	6	
KEYWORD	331:2	331:2	7	if
LEAF_NODE	331:2	331:2	8	if
LEAF_NODE	331:5	331:5	7	(
CONDITION	331:6	331:6	7	! verbose
EXPR	331:6	331:6	8	! verbose
UNARY_EXPR	331:6	331:7	9	! verbose
UNARY_OPERATOR	331:6	331:6	10	!
LEAF_NODE	331:6	331:6	11	!
FIELD	331:7	331:7	10	verbose
LEAF_NODE	331:7	331:7	11	verbose
LEAF_NODE	331:14	331:14	7	)
STATEMENTS	332:6	332:6	7	
EXPR_STATEMENT	332:6	332:44	8	( void ) TIFFSetWarningHandler ( whandler ) ;
EXPR	332:6	332:13	9	( void ) TIFFSetWarningHandler ( whandler )
LEAF_NODE	332:6	332:6	10	(
TYPE_NAME	332:7	332:7	10	void
LEAF_NODE	332:7	332:7	11	void
LEAF_NODE	332:11	332:11	10	)
FUNCTION_CALL	332:13	332:43	10	TIFFSetWarningHandler ( whandler )
CALLEE	332:13	332:13	11	TIFFSetWarningHandler
LEAF_NODE	332:13	332:13	12	TIFFSetWarningHandler
LEAF_NODE	332:34	332:34	11	(
ARGUMENT	332:35	332:35	11	whandler
FIELD	332:35	332:35	12	whandler
LEAF_NODE	332:35	332:35	13	whandler
LEAF_NODE	332:43	332:43	11	)
LEAF_NODE	332:44	332:44	9	;
EXPR_STATEMENT	334:2	334:46	6	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , rows ) ;
EXPR	334:2	334:2	7	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , rows )
FUNCTION_CALL	334:2	334:45	8	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , rows )
CALLEE	334:2	334:2	9	TIFFSetField
LEAF_NODE	334:2	334:2	10	TIFFSetField
LEAF_NODE	334:14	334:14	9	(
ARGUMENT	334:15	334:15	9	out
FIELD	334:15	334:15	10	out
LEAF_NODE	334:15	334:15	11	out
LEAF_NODE	334:18	334:18	9	,
ARGUMENT	334:20	334:20	9	TIFFTAG_IMAGELENGTH
FIELD	334:20	334:20	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	334:20	334:20	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	334:39	334:39	9	,
ARGUMENT	334:41	334:41	9	rows
FIELD	334:41	334:41	10	rows
LEAF_NODE	334:41	334:41	11	rows
LEAF_NODE	334:45	334:45	9	)
LEAF_NODE	334:46	334:46	7	;
SELECTION	336:2	336:15	6	
KEYWORD	336:2	336:2	7	if
LEAF_NODE	336:2	336:2	8	if
LEAF_NODE	336:5	336:5	7	(
CONDITION	336:6	336:6	7	verbose
EXPR	336:6	336:6	8	verbose
FIELD	336:6	336:6	9	verbose
LEAF_NODE	336:6	336:6	10	verbose
LEAF_NODE	336:13	336:13	7	)
STATEMENTS	336:15	342:2	7	
LEAF_NODE	336:15	336:15	8	{
STATEMENTS	337:3	341:3	8	
EXPR_STATEMENT	337:3	337:41	9	fprintf ( stderr , "%s:\n" , argv [ optind ] ) ;
EXPR	337:3	337:3	10	fprintf ( stderr , "%s:\n" , argv [ optind ] )
FUNCTION_CALL	337:3	337:40	11	fprintf ( stderr , "%s:\n" , argv [ optind ] )
CALLEE	337:3	337:3	12	fprintf
LEAF_NODE	337:3	337:3	13	fprintf
LEAF_NODE	337:10	337:10	12	(
ARGUMENT	337:11	337:11	12	stderr
FIELD	337:11	337:11	13	stderr
LEAF_NODE	337:11	337:11	14	stderr
LEAF_NODE	337:17	337:17	12	,
ARGUMENT	337:19	337:19	12	"%s:\n"
FIELD	337:19	337:19	13	"%s:\n"
LEAF_NODE	337:19	337:19	14	"%s:\n"
LEAF_NODE	337:26	337:26	12	,
ARGUMENT	337:28	337:28	12	argv [ optind ]
FIELD	337:28	337:39	13	argv [ optind ]
LEAF_NODE	337:28	337:28	14	argv
LEAF_NODE	337:32	337:32	14	[
EXPR	337:33	337:33	14	optind
FIELD	337:33	337:33	15	optind
LEAF_NODE	337:33	337:33	16	optind
LEAF_NODE	337:39	337:39	14	]
LEAF_NODE	337:40	337:40	12	)
LEAF_NODE	337:41	337:41	10	;
EXPR_STATEMENT	338:3	338:46	9	fprintf ( stderr , "%d rows in input\n" , rows ) ;
EXPR	338:3	338:3	10	fprintf ( stderr , "%d rows in input\n" , rows )
FUNCTION_CALL	338:3	338:45	11	fprintf ( stderr , "%d rows in input\n" , rows )
CALLEE	338:3	338:3	12	fprintf
LEAF_NODE	338:3	338:3	13	fprintf
LEAF_NODE	338:10	338:10	12	(
ARGUMENT	338:11	338:11	12	stderr
FIELD	338:11	338:11	13	stderr
LEAF_NODE	338:11	338:11	14	stderr
LEAF_NODE	338:17	338:17	12	,
ARGUMENT	338:19	338:19	12	"%d rows in input\n"
FIELD	338:19	338:19	13	"%d rows in input\n"
LEAF_NODE	338:19	338:19	14	"%d rows in input\n"
LEAF_NODE	338:39	338:39	12	,
ARGUMENT	338:41	338:41	12	rows
FIELD	338:41	338:41	13	rows
LEAF_NODE	338:41	338:41	14	rows
LEAF_NODE	338:45	338:45	12	)
LEAF_NODE	338:46	338:46	10	;
EXPR_STATEMENT	339:3	340:26	9	fprintf ( stderr , "%ld total bad rows\n" , ( long ) badfaxlines ) ;
EXPR	339:3	339:3	10	fprintf ( stderr , "%ld total bad rows\n" , ( long ) badfaxlines )
FUNCTION_CALL	339:3	340:25	11	fprintf ( stderr , "%ld total bad rows\n" , ( long ) badfaxlines )
CALLEE	339:3	339:3	12	fprintf
LEAF_NODE	339:3	339:3	13	fprintf
LEAF_NODE	339:10	339:10	12	(
ARGUMENT	339:11	339:11	12	stderr
FIELD	339:11	339:11	13	stderr
LEAF_NODE	339:11	339:11	14	stderr
LEAF_NODE	339:17	339:17	12	,
ARGUMENT	339:19	339:19	12	"%ld total bad rows\n"
FIELD	339:19	339:19	13	"%ld total bad rows\n"
LEAF_NODE	339:19	339:19	14	"%ld total bad rows\n"
LEAF_NODE	339:41	339:41	12	,
ARGUMENT	340:7	340:14	12	( long ) badfaxlines
LEAF_NODE	340:7	340:7	13	(
TYPE_NAME	340:8	340:8	13	long
LEAF_NODE	340:8	340:8	14	long
LEAF_NODE	340:12	340:12	13	)
FIELD	340:14	340:14	13	badfaxlines
LEAF_NODE	340:14	340:14	14	badfaxlines
LEAF_NODE	340:25	340:25	12	)
LEAF_NODE	340:26	340:26	10	;
EXPR_STATEMENT	341:3	341:62	9	fprintf ( stderr , "%d max consecutive bad rows\n" , badfaxrun ) ;
EXPR	341:3	341:3	10	fprintf ( stderr , "%d max consecutive bad rows\n" , badfaxrun )
FUNCTION_CALL	341:3	341:61	11	fprintf ( stderr , "%d max consecutive bad rows\n" , badfaxrun )
CALLEE	341:3	341:3	12	fprintf
LEAF_NODE	341:3	341:3	13	fprintf
LEAF_NODE	341:10	341:10	12	(
ARGUMENT	341:11	341:11	12	stderr
FIELD	341:11	341:11	13	stderr
LEAF_NODE	341:11	341:11	14	stderr
LEAF_NODE	341:17	341:17	12	,
ARGUMENT	341:19	341:19	12	"%d max consecutive bad rows\n"
FIELD	341:19	341:19	13	"%d max consecutive bad rows\n"
LEAF_NODE	341:19	341:19	14	"%d max consecutive bad rows\n"
LEAF_NODE	341:50	341:50	12	,
ARGUMENT	341:52	341:52	12	badfaxrun
FIELD	341:52	341:52	13	badfaxrun
LEAF_NODE	341:52	341:52	14	badfaxrun
LEAF_NODE	341:61	341:61	12	)
LEAF_NODE	341:62	341:62	10	;
LEAF_NODE	342:2	342:2	8	}
SELECTION	343:2	344:30	6	
KEYWORD	343:2	343:2	7	if
LEAF_NODE	343:2	343:2	8	if
LEAF_NODE	343:5	343:5	7	(
CONDITION	343:6	343:6	7	compression_out == COMPRESSION_CCITTFAX3 && mode == FAXMODE_CLASSF
EXPR	343:6	343:6	8	compression_out == COMPRESSION_CCITTFAX3 && mode == FAXMODE_CLASSF
AND	343:6	344:6	9	compression_out == COMPRESSION_CCITTFAX3 && mode == FAXMODE_CLASSF
EXPR	343:6	343:25	10	compression_out == COMPRESSION_CCITTFAX3
FIELD	343:6	343:6	11	compression_out
LEAF_NODE	343:6	343:6	12	compression_out
EQ_OPERATOR	343:22	343:22	11	==
LEAF_NODE	343:22	343:22	12	==
FIELD	343:25	343:25	11	COMPRESSION_CCITTFAX3
LEAF_NODE	343:25	343:25	12	COMPRESSION_CCITTFAX3
LEAF_NODE	343:47	343:47	10	&&
EXPR	344:6	344:14	10	mode == FAXMODE_CLASSF
FIELD	344:6	344:6	11	mode
LEAF_NODE	344:6	344:6	12	mode
EQ_OPERATOR	344:11	344:11	11	==
LEAF_NODE	344:11	344:11	12	==
FIELD	344:14	344:14	11	FAXMODE_CLASSF
LEAF_NODE	344:14	344:14	12	FAXMODE_CLASSF
LEAF_NODE	344:28	344:28	7	)
STATEMENTS	344:30	349:2	7	
LEAF_NODE	344:30	344:30	8	{
STATEMENTS	345:3	348:3	8	
EXPR_STATEMENT	345:3	345:54	9	TIFFSetField ( out , TIFFTAG_BADFAXLINES , badfaxlines ) ;
EXPR	345:3	345:3	10	TIFFSetField ( out , TIFFTAG_BADFAXLINES , badfaxlines )
FUNCTION_CALL	345:3	345:53	11	TIFFSetField ( out , TIFFTAG_BADFAXLINES , badfaxlines )
CALLEE	345:3	345:3	12	TIFFSetField
LEAF_NODE	345:3	345:3	13	TIFFSetField
LEAF_NODE	345:15	345:15	12	(
ARGUMENT	345:16	345:16	12	out
FIELD	345:16	345:16	13	out
LEAF_NODE	345:16	345:16	14	out
LEAF_NODE	345:19	345:19	12	,
ARGUMENT	345:21	345:21	12	TIFFTAG_BADFAXLINES
FIELD	345:21	345:21	13	TIFFTAG_BADFAXLINES
LEAF_NODE	345:21	345:21	14	TIFFTAG_BADFAXLINES
LEAF_NODE	345:40	345:40	12	,
ARGUMENT	345:42	345:42	12	badfaxlines
FIELD	345:42	345:42	13	badfaxlines
LEAF_NODE	345:42	345:42	14	badfaxlines
LEAF_NODE	345:53	345:53	12	)
LEAF_NODE	345:54	345:54	10	;
EXPR_STATEMENT	346:3	347:53	9	TIFFSetField ( out , TIFFTAG_CLEANFAXDATA , badfaxlines ? CLEANFAXDATA_REGENERATED : CLEANFAXDATA_CLEAN ) ;
EXPR	346:3	346:3	10	TIFFSetField ( out , TIFFTAG_CLEANFAXDATA , badfaxlines ? CLEANFAXDATA_REGENERATED : CLEANFAXDATA_CLEAN )
FUNCTION_CALL	346:3	347:52	11	TIFFSetField ( out , TIFFTAG_CLEANFAXDATA , badfaxlines ? CLEANFAXDATA_REGENERATED : CLEANFAXDATA_CLEAN )
CALLEE	346:3	346:3	12	TIFFSetField
LEAF_NODE	346:3	346:3	13	TIFFSetField
LEAF_NODE	346:15	346:15	12	(
ARGUMENT	346:16	346:16	12	out
FIELD	346:16	346:16	13	out
LEAF_NODE	346:16	346:16	14	out
LEAF_NODE	346:19	346:19	12	,
ARGUMENT	346:21	346:21	12	TIFFTAG_CLEANFAXDATA
FIELD	346:21	346:21	13	TIFFTAG_CLEANFAXDATA
LEAF_NODE	346:21	346:21	14	TIFFTAG_CLEANFAXDATA
LEAF_NODE	346:41	346:41	12	,
ARGUMENT	346:43	346:43	12	badfaxlines ? CLEANFAXDATA_REGENERATED : CLEANFAXDATA_CLEAN
COND_EXPR	346:43	347:34	13	badfaxlines ? CLEANFAXDATA_REGENERATED : CLEANFAXDATA_CLEAN
CONDITION	346:43	346:43	14	badfaxlines
FIELD	346:43	346:43	15	badfaxlines
LEAF_NODE	346:43	346:43	16	badfaxlines
LEAF_NODE	346:55	346:55	14	?
EXPR	347:7	347:7	14	CLEANFAXDATA_REGENERATED
FIELD	347:7	347:7	15	CLEANFAXDATA_REGENERATED
LEAF_NODE	347:7	347:7	16	CLEANFAXDATA_REGENERATED
LEAF_NODE	347:32	347:32	14	:
FIELD	347:34	347:34	14	CLEANFAXDATA_CLEAN
LEAF_NODE	347:34	347:34	15	CLEANFAXDATA_CLEAN
LEAF_NODE	347:52	347:52	12	)
LEAF_NODE	347:53	347:53	10	;
EXPR_STATEMENT	348:3	348:63	9	TIFFSetField ( out , TIFFTAG_CONSECUTIVEBADFAXLINES , badfaxrun ) ;
EXPR	348:3	348:3	10	TIFFSetField ( out , TIFFTAG_CONSECUTIVEBADFAXLINES , badfaxrun )
FUNCTION_CALL	348:3	348:62	11	TIFFSetField ( out , TIFFTAG_CONSECUTIVEBADFAXLINES , badfaxrun )
CALLEE	348:3	348:3	12	TIFFSetField
LEAF_NODE	348:3	348:3	13	TIFFSetField
LEAF_NODE	348:15	348:15	12	(
ARGUMENT	348:16	348:16	12	out
FIELD	348:16	348:16	13	out
LEAF_NODE	348:16	348:16	14	out
LEAF_NODE	348:19	348:19	12	,
ARGUMENT	348:21	348:21	12	TIFFTAG_CONSECUTIVEBADFAXLINES
FIELD	348:21	348:21	13	TIFFTAG_CONSECUTIVEBADFAXLINES
LEAF_NODE	348:21	348:21	14	TIFFTAG_CONSECUTIVEBADFAXLINES
LEAF_NODE	348:51	348:51	12	,
ARGUMENT	348:53	348:53	12	badfaxrun
FIELD	348:53	348:53	13	badfaxrun
LEAF_NODE	348:53	348:53	14	badfaxrun
LEAF_NODE	348:62	348:62	12	)
LEAF_NODE	348:63	348:63	10	;
LEAF_NODE	349:2	349:2	8	}
EXPR_STATEMENT	350:2	350:25	6	TIFFWriteDirectory ( out ) ;
EXPR	350:2	350:2	7	TIFFWriteDirectory ( out )
FUNCTION_CALL	350:2	350:24	8	TIFFWriteDirectory ( out )
CALLEE	350:2	350:2	9	TIFFWriteDirectory
LEAF_NODE	350:2	350:2	10	TIFFWriteDirectory
LEAF_NODE	350:20	350:20	9	(
ARGUMENT	350:21	350:21	9	out
FIELD	350:21	350:21	10	out
LEAF_NODE	350:21	350:21	11	out
LEAF_NODE	350:24	350:24	9	)
LEAF_NODE	350:25	350:25	7	;
LEAF_NODE	351:1	351:1	5	}
EXPR_STATEMENT	352:1	352:15	3	TIFFClose ( out ) ;
EXPR	352:1	352:1	4	TIFFClose ( out )
FUNCTION_CALL	352:1	352:14	5	TIFFClose ( out )
CALLEE	352:1	352:1	6	TIFFClose
LEAF_NODE	352:1	352:1	7	TIFFClose
LEAF_NODE	352:10	352:10	6	(
ARGUMENT	352:11	352:11	6	out
FIELD	352:11	352:11	7	out
LEAF_NODE	352:11	352:11	8	out
LEAF_NODE	352:14	352:14	6	)
LEAF_NODE	352:15	352:15	4	;
EXPR_STATEMENT	353:1	353:18	3	_TIFFfree ( rowbuf ) ;
EXPR	353:1	353:1	4	_TIFFfree ( rowbuf )
FUNCTION_CALL	353:1	353:17	5	_TIFFfree ( rowbuf )
CALLEE	353:1	353:1	6	_TIFFfree
LEAF_NODE	353:1	353:1	7	_TIFFfree
LEAF_NODE	353:10	353:10	6	(
ARGUMENT	353:11	353:11	6	rowbuf
FIELD	353:11	353:11	7	rowbuf
LEAF_NODE	353:11	353:11	8	rowbuf
LEAF_NODE	353:17	353:17	6	)
LEAF_NODE	353:18	353:18	4	;
EXPR_STATEMENT	354:1	354:18	3	_TIFFfree ( refbuf ) ;
EXPR	354:1	354:1	4	_TIFFfree ( refbuf )
FUNCTION_CALL	354:1	354:17	5	_TIFFfree ( refbuf )
CALLEE	354:1	354:1	6	_TIFFfree
LEAF_NODE	354:1	354:1	7	_TIFFfree
LEAF_NODE	354:10	354:10	6	(
ARGUMENT	354:11	354:11	6	refbuf
FIELD	354:11	354:11	7	refbuf
LEAF_NODE	354:11	354:11	8	refbuf
LEAF_NODE	354:17	354:17	6	)
LEAF_NODE	354:18	354:18	4	;
LEAF_NODE	355:1	355:1	3	return
LEAF_NODE	355:8	355:8	3	(
LEAF_NODE	355:9	355:9	3	EXIT_SUCCESS
LEAF_NODE	355:21	355:21	3	)
LEAF_NODE	355:22	355:22	3	;
LEAF_NODE	356:0	356:0	2	}
FUNCTION_DEF	358:0	427:0	1	
RETURN_TYPE	358:0	358:0	2	int
TYPE_NAME	358:0	358:0	3	int
LEAF_NODE	358:0	358:0	4	int
FUNCTION_NAME	359:0	359:0	2	copyFaxFile
LEAF_NODE	359:0	359:0	3	copyFaxFile
PARAMETER_LIST	359:11	359:37	2	( TIFF * tifin , TIFF * tifout )
LEAF_NODE	359:11	359:11	3	(
PARAMETER_DECL	359:12	359:18	3	TIFF * tifin
TYPE	359:12	359:16	4	TIFF *
TYPE_NAME	359:12	359:12	5	TIFF
LEAF_NODE	359:12	359:12	6	TIFF
POINTER	359:16	359:16	5	*
LEAF_NODE	359:16	359:16	6	*
NAME	359:18	359:18	4	tifin
LEAF_NODE	359:18	359:18	5	tifin
LEAF_NODE	359:23	359:23	3	,
PARAMETER_DECL	359:25	359:31	3	TIFF * tifout
TYPE	359:25	359:29	4	TIFF *
TYPE_NAME	359:25	359:25	5	TIFF
LEAF_NODE	359:25	359:25	6	TIFF
POINTER	359:29	359:29	5	*
LEAF_NODE	359:29	359:29	6	*
NAME	359:31	359:31	4	tifout
LEAF_NODE	359:31	359:31	5	tifout
LEAF_NODE	359:37	359:37	3	)
LEAF_NODE	360:0	360:0	2	{
STATEMENTS	361:1	426:13	2	
SIMPLE_DECL	361:1	361:11	3	uint32 row ;
VAR_DECL	361:1	361:8	4	uint32 row
TYPE	361:1	361:1	5	uint32
TYPE_NAME	361:1	361:1	6	uint32
LEAF_NODE	361:1	361:1	7	uint32
NAME	361:8	361:8	5	row
LEAF_NODE	361:8	361:8	6	row
LEAF_NODE	361:11	361:11	4	;
SIMPLE_DECL	362:1	362:38	3	uint32 linesize ; linesize = TIFFhowmany8 ( xsize ) ;
VAR_DECL	362:1	362:8	4	uint32 linesize ; linesize = TIFFhowmany8 ( xsize )
TYPE	362:1	362:1	5	uint32
TYPE_NAME	362:1	362:1	6	uint32
LEAF_NODE	362:1	362:1	7	uint32
NAME	362:8	362:8	5	linesize
LEAF_NODE	362:8	362:8	6	linesize
LEAF_NODE	0:0	0:0	5	;
INIT	362:8	362:8	5	linesize = TIFFhowmany8 ( xsize )
ASSIGN	362:8	362:19	6	linesize = TIFFhowmany8 ( xsize )
LVAL	362:8	362:8	7	linesize
NAME	362:8	362:8	8	linesize
LEAF_NODE	362:8	362:8	9	linesize
ASSIGN_OP	362:17	362:17	7	=
LEAF_NODE	362:17	362:17	8	=
RVAL	362:19	362:19	7	TIFFhowmany8 ( xsize )
FUNCTION_CALL	362:19	362:37	8	TIFFhowmany8 ( xsize )
CALLEE	362:19	362:19	9	TIFFhowmany8
LEAF_NODE	362:19	362:19	10	TIFFhowmany8
LEAF_NODE	362:31	362:31	9	(
ARGUMENT	362:32	362:32	9	xsize
FIELD	362:32	362:32	10	xsize
LEAF_NODE	362:32	362:32	11	xsize
LEAF_NODE	362:37	362:37	9	)
LEAF_NODE	362:38	362:38	4	;
SIMPLE_DECL	363:1	363:14	3	uint16 badrun ;
VAR_DECL	363:1	363:8	4	uint16 badrun
TYPE	363:1	363:1	5	uint16
TYPE_NAME	363:1	363:1	6	uint16
LEAF_NODE	363:1	363:1	7	uint16
NAME	363:8	363:8	5	badrun
LEAF_NODE	363:8	363:8	6	badrun
LEAF_NODE	363:14	363:14	4	;
SIMPLE_DECL	364:1	364:7	3	int ok ;
VAR_DECL	364:1	364:5	4	int ok
TYPE	364:1	364:1	5	int
TYPE_NAME	364:1	364:1	6	int
LEAF_NODE	364:1	364:1	7	int
NAME	364:5	364:5	5	ok
LEAF_NODE	364:5	364:5	6	ok
LEAF_NODE	364:7	364:7	4	;
EXPR_STATEMENT	366:1	366:58	3	tifin -> tif_rawdatasize = ( tmsize_t ) TIFFGetFileSize ( tifin ) ;
EXPR	366:1	366:1	4	tifin -> tif_rawdatasize = ( tmsize_t ) TIFFGetFileSize ( tifin )
ASSIGN	366:1	366:26	5	tifin -> tif_rawdatasize = ( tmsize_t ) TIFFGetFileSize ( tifin )
LVAL	366:1	366:1	6	tifin -> tif_rawdatasize
FIELD	366:1	366:8	7	tifin -> tif_rawdatasize
LEAF_NODE	366:1	366:1	8	tifin
LEAF_NODE	366:6	366:6	8	->
LEAF_NODE	366:8	366:8	8	tif_rawdatasize
ASSIGN_OP	366:24	366:24	6	=
LEAF_NODE	366:24	366:24	7	=
RVAL	366:26	366:36	6	( tmsize_t ) TIFFGetFileSize ( tifin )
LEAF_NODE	366:26	366:26	7	(
TYPE_NAME	366:27	366:27	7	tmsize_t
LEAF_NODE	366:27	366:27	8	tmsize_t
LEAF_NODE	366:35	366:35	7	)
FUNCTION_CALL	366:36	366:57	7	TIFFGetFileSize ( tifin )
CALLEE	366:36	366:36	8	TIFFGetFileSize
LEAF_NODE	366:36	366:36	9	TIFFGetFileSize
LEAF_NODE	366:51	366:51	8	(
ARGUMENT	366:52	366:52	8	tifin
FIELD	366:52	366:52	9	tifin
LEAF_NODE	366:52	366:52	10	tifin
LEAF_NODE	366:57	366:57	8	)
LEAF_NODE	366:58	366:58	4	;
SELECTION	367:1	367:34	3	
KEYWORD	367:1	367:1	4	if
LEAF_NODE	367:1	367:1	5	if
LEAF_NODE	367:4	367:4	4	(
CONDITION	367:5	367:5	4	tifin -> tif_rawdatasize == 0
EXPR	367:5	367:31	5	tifin -> tif_rawdatasize == 0
FIELD	367:5	367:12	6	tifin -> tif_rawdatasize
LEAF_NODE	367:5	367:5	7	tifin
LEAF_NODE	367:10	367:10	7	->
LEAF_NODE	367:12	367:12	7	tif_rawdatasize
EQ_OPERATOR	367:28	367:28	6	==
LEAF_NODE	367:28	367:28	7	==
FIELD	367:31	367:31	6	0
LEAF_NODE	367:31	367:31	7	0
LEAF_NODE	367:32	367:32	4	)
STATEMENTS	367:34	370:1	4	
LEAF_NODE	367:34	367:34	5	{
STATEMENTS	368:2	369:2	5	
EXPR_STATEMENT	368:2	368:48	6	TIFFError ( tifin -> tif_name , "Empty input file" ) ;
EXPR	368:2	368:2	7	TIFFError ( tifin -> tif_name , "Empty input file" )
FUNCTION_CALL	368:2	368:47	8	TIFFError ( tifin -> tif_name , "Empty input file" )
CALLEE	368:2	368:2	9	TIFFError
LEAF_NODE	368:2	368:2	10	TIFFError
LEAF_NODE	368:11	368:11	9	(
ARGUMENT	368:12	368:12	9	tifin -> tif_name
FIELD	368:12	368:19	10	tifin -> tif_name
LEAF_NODE	368:12	368:12	11	tifin
LEAF_NODE	368:17	368:17	11	->
LEAF_NODE	368:19	368:19	11	tif_name
LEAF_NODE	368:27	368:27	9	,
ARGUMENT	368:29	368:29	9	"Empty input file"
FIELD	368:29	368:29	10	"Empty input file"
LEAF_NODE	368:29	368:29	11	"Empty input file"
LEAF_NODE	368:47	368:47	9	)
LEAF_NODE	368:48	368:48	7	;
JUMP_STATEMENT	369:2	369:12	6	return ( 0 ) ;
KEYWORD	369:2	369:2	7	return
LEAF_NODE	369:2	369:2	8	return
DESTINATION	369:9	369:9	7	( 0 )
EXPR	369:9	369:11	8	( 0 )
LEAF_NODE	369:9	369:9	9	(
FIELD	369:10	369:10	9	0
LEAF_NODE	369:10	369:10	10	0
LEAF_NODE	369:11	369:11	9	)
LEAF_NODE	369:12	369:12	7	;
LEAF_NODE	370:1	370:1	5	}
EXPR_STATEMENT	371:1	371:57	3	tifin -> tif_rawdata = _TIFFmalloc ( tifin -> tif_rawdatasize ) ;
EXPR	371:1	371:1	4	tifin -> tif_rawdata = _TIFFmalloc ( tifin -> tif_rawdatasize )
ASSIGN	371:1	371:22	5	tifin -> tif_rawdata = _TIFFmalloc ( tifin -> tif_rawdatasize )
LVAL	371:1	371:1	6	tifin -> tif_rawdata
FIELD	371:1	371:8	7	tifin -> tif_rawdata
LEAF_NODE	371:1	371:1	8	tifin
LEAF_NODE	371:6	371:6	8	->
LEAF_NODE	371:8	371:8	8	tif_rawdata
ASSIGN_OP	371:20	371:20	6	=
LEAF_NODE	371:20	371:20	7	=
RVAL	371:22	371:22	6	_TIFFmalloc ( tifin -> tif_rawdatasize )
FUNCTION_CALL	371:22	371:56	7	_TIFFmalloc ( tifin -> tif_rawdatasize )
CALLEE	371:22	371:22	8	_TIFFmalloc
LEAF_NODE	371:22	371:22	9	_TIFFmalloc
LEAF_NODE	371:33	371:33	8	(
ARGUMENT	371:34	371:34	8	tifin -> tif_rawdatasize
FIELD	371:34	371:41	9	tifin -> tif_rawdatasize
LEAF_NODE	371:34	371:34	10	tifin
LEAF_NODE	371:39	371:39	10	->
LEAF_NODE	371:41	371:41	10	tif_rawdatasize
LEAF_NODE	371:56	371:56	8	)
LEAF_NODE	371:57	371:57	4	;
SELECTION	372:1	372:33	3	
KEYWORD	372:1	372:1	4	if
LEAF_NODE	372:1	372:1	5	if
LEAF_NODE	372:4	372:4	4	(
CONDITION	372:5	372:5	4	tifin -> tif_rawdata == NULL
EXPR	372:5	372:27	5	tifin -> tif_rawdata == NULL
FIELD	372:5	372:12	6	tifin -> tif_rawdata
LEAF_NODE	372:5	372:5	7	tifin
LEAF_NODE	372:10	372:10	7	->
LEAF_NODE	372:12	372:12	7	tif_rawdata
EQ_OPERATOR	372:24	372:24	6	==
LEAF_NODE	372:24	372:24	7	==
FIELD	372:27	372:27	6	NULL
LEAF_NODE	372:27	372:27	7	NULL
LEAF_NODE	372:31	372:31	4	)
STATEMENTS	372:33	375:1	4	
LEAF_NODE	372:33	372:33	5	{
STATEMENTS	373:2	374:2	5	
EXPR_STATEMENT	373:2	373:49	6	TIFFError ( tifin -> tif_name , "Not enough memory" ) ;
EXPR	373:2	373:2	7	TIFFError ( tifin -> tif_name , "Not enough memory" )
FUNCTION_CALL	373:2	373:48	8	TIFFError ( tifin -> tif_name , "Not enough memory" )
CALLEE	373:2	373:2	9	TIFFError
LEAF_NODE	373:2	373:2	10	TIFFError
LEAF_NODE	373:11	373:11	9	(
ARGUMENT	373:12	373:12	9	tifin -> tif_name
FIELD	373:12	373:19	10	tifin -> tif_name
LEAF_NODE	373:12	373:12	11	tifin
LEAF_NODE	373:17	373:17	11	->
LEAF_NODE	373:19	373:19	11	tif_name
LEAF_NODE	373:27	373:27	9	,
ARGUMENT	373:29	373:29	9	"Not enough memory"
FIELD	373:29	373:29	10	"Not enough memory"
LEAF_NODE	373:29	373:29	11	"Not enough memory"
LEAF_NODE	373:48	373:48	9	)
LEAF_NODE	373:49	373:49	7	;
JUMP_STATEMENT	374:2	374:12	6	return ( 0 ) ;
KEYWORD	374:2	374:2	7	return
LEAF_NODE	374:2	374:2	8	return
DESTINATION	374:9	374:9	7	( 0 )
EXPR	374:9	374:11	8	( 0 )
LEAF_NODE	374:9	374:9	9	(
FIELD	374:10	374:10	9	0
LEAF_NODE	374:10	374:10	10	0
LEAF_NODE	374:11	374:11	9	)
LEAF_NODE	374:12	374:12	7	;
LEAF_NODE	375:1	375:1	5	}
SELECTION	376:1	376:65	3	
KEYWORD	376:1	376:1	4	if
LEAF_NODE	376:1	376:1	5	if
LEAF_NODE	376:4	376:4	4	(
CONDITION	376:5	376:5	4	! ReadOK ( tifin , tifin -> tif_rawdata , tifin -> tif_rawdatasize )
EXPR	376:5	376:5	5	! ReadOK ( tifin , tifin -> tif_rawdata , tifin -> tif_rawdatasize )
UNARY_EXPR	376:5	376:6	6	! ReadOK ( tifin , tifin -> tif_rawdata , tifin -> tif_rawdatasize )
UNARY_OPERATOR	376:5	376:5	7	!
LEAF_NODE	376:5	376:5	8	!
FUNCTION_CALL	376:6	376:62	7	ReadOK ( tifin , tifin -> tif_rawdata , tifin -> tif_rawdatasize )
CALLEE	376:6	376:6	8	ReadOK
LEAF_NODE	376:6	376:6	9	ReadOK
LEAF_NODE	376:12	376:12	8	(
ARGUMENT	376:13	376:13	8	tifin
FIELD	376:13	376:13	9	tifin
LEAF_NODE	376:13	376:13	10	tifin
LEAF_NODE	376:18	376:18	8	,
ARGUMENT	376:20	376:20	8	tifin -> tif_rawdata
FIELD	376:20	376:27	9	tifin -> tif_rawdata
LEAF_NODE	376:20	376:20	10	tifin
LEAF_NODE	376:25	376:25	10	->
LEAF_NODE	376:27	376:27	10	tif_rawdata
LEAF_NODE	376:38	376:38	8	,
ARGUMENT	376:40	376:40	8	tifin -> tif_rawdatasize
FIELD	376:40	376:47	9	tifin -> tif_rawdatasize
LEAF_NODE	376:40	376:40	10	tifin
LEAF_NODE	376:45	376:45	10	->
LEAF_NODE	376:47	376:47	10	tif_rawdatasize
LEAF_NODE	376:62	376:62	8	)
LEAF_NODE	376:63	376:63	4	)
STATEMENTS	376:65	379:1	4	
LEAF_NODE	376:65	376:65	5	{
STATEMENTS	377:2	378:2	5	
EXPR_STATEMENT	377:2	377:56	6	TIFFError ( tifin -> tif_name , "Read error at scanline 0" ) ;
EXPR	377:2	377:2	7	TIFFError ( tifin -> tif_name , "Read error at scanline 0" )
FUNCTION_CALL	377:2	377:55	8	TIFFError ( tifin -> tif_name , "Read error at scanline 0" )
CALLEE	377:2	377:2	9	TIFFError
LEAF_NODE	377:2	377:2	10	TIFFError
LEAF_NODE	377:11	377:11	9	(
ARGUMENT	377:12	377:12	9	tifin -> tif_name
FIELD	377:12	377:19	10	tifin -> tif_name
LEAF_NODE	377:12	377:12	11	tifin
LEAF_NODE	377:17	377:17	11	->
LEAF_NODE	377:19	377:19	11	tif_name
LEAF_NODE	377:27	377:27	9	,
ARGUMENT	377:29	377:29	9	"Read error at scanline 0"
FIELD	377:29	377:29	10	"Read error at scanline 0"
LEAF_NODE	377:29	377:29	11	"Read error at scanline 0"
LEAF_NODE	377:55	377:55	9	)
LEAF_NODE	377:56	377:56	7	;
JUMP_STATEMENT	378:2	378:12	6	return ( 0 ) ;
KEYWORD	378:2	378:2	7	return
LEAF_NODE	378:2	378:2	8	return
DESTINATION	378:9	378:9	7	( 0 )
EXPR	378:9	378:11	8	( 0 )
LEAF_NODE	378:9	378:9	9	(
FIELD	378:10	378:10	9	0
LEAF_NODE	378:10	378:10	10	0
LEAF_NODE	378:11	378:11	9	)
LEAF_NODE	378:12	378:12	7	;
LEAF_NODE	379:1	379:1	5	}
EXPR_STATEMENT	380:1	380:38	3	tifin -> tif_rawcp = tifin -> tif_rawdata ;
EXPR	380:1	380:1	4	tifin -> tif_rawcp = tifin -> tif_rawdata
ASSIGN	380:1	380:20	5	tifin -> tif_rawcp = tifin -> tif_rawdata
LVAL	380:1	380:1	6	tifin -> tif_rawcp
FIELD	380:1	380:8	7	tifin -> tif_rawcp
LEAF_NODE	380:1	380:1	8	tifin
LEAF_NODE	380:6	380:6	8	->
LEAF_NODE	380:8	380:8	8	tif_rawcp
ASSIGN_OP	380:18	380:18	6	=
LEAF_NODE	380:18	380:18	7	=
RVAL	380:20	380:20	6	tifin -> tif_rawdata
FIELD	380:20	380:27	7	tifin -> tif_rawdata
LEAF_NODE	380:20	380:20	8	tifin
LEAF_NODE	380:25	380:25	8	->
LEAF_NODE	380:27	380:27	8	tif_rawdata
LEAF_NODE	380:38	380:38	4	;
EXPR_STATEMENT	381:1	381:42	3	tifin -> tif_rawcc = tifin -> tif_rawdatasize ;
EXPR	381:1	381:1	4	tifin -> tif_rawcc = tifin -> tif_rawdatasize
ASSIGN	381:1	381:20	5	tifin -> tif_rawcc = tifin -> tif_rawdatasize
LVAL	381:1	381:1	6	tifin -> tif_rawcc
FIELD	381:1	381:8	7	tifin -> tif_rawcc
LEAF_NODE	381:1	381:1	8	tifin
LEAF_NODE	381:6	381:6	8	->
LEAF_NODE	381:8	381:8	8	tif_rawcc
ASSIGN_OP	381:18	381:18	6	=
LEAF_NODE	381:18	381:18	7	=
RVAL	381:20	381:20	6	tifin -> tif_rawdatasize
FIELD	381:20	381:27	7	tifin -> tif_rawdatasize
LEAF_NODE	381:20	381:20	8	tifin
LEAF_NODE	381:25	381:25	8	->
LEAF_NODE	381:27	381:27	8	tif_rawdatasize
LEAF_NODE	381:42	381:42	4	;
EXPR_STATEMENT	383:1	383:33	3	( * tifin -> tif_setupdecode ) ( tifin ) ;
EXPR	383:1	383:1	4	( * tifin -> tif_setupdecode ) ( tifin )
FUNCTION_CALL	383:1	383:32	5	( * tifin -> tif_setupdecode ) ( tifin )
CALLEE	383:1	383:25	6	( * tifin -> tif_setupdecode )
LEAF_NODE	383:1	383:1	7	(
UNARY_EXPR	383:2	383:3	7	* tifin -> tif_setupdecode
UNARY_OPERATOR	383:2	383:2	8	*
LEAF_NODE	383:2	383:2	9	*
FIELD	383:3	383:10	8	tifin -> tif_setupdecode
LEAF_NODE	383:3	383:3	9	tifin
LEAF_NODE	383:8	383:8	9	->
LEAF_NODE	383:10	383:10	9	tif_setupdecode
LEAF_NODE	383:25	383:25	7	)
LEAF_NODE	383:26	383:26	6	(
ARGUMENT	383:27	383:27	6	tifin
FIELD	383:27	383:27	7	tifin
LEAF_NODE	383:27	383:27	8	tifin
LEAF_NODE	383:32	383:32	6	)
LEAF_NODE	383:33	383:33	4	;
EXPR_STATEMENT	384:1	384:46	3	( * tifin -> tif_predecode ) ( tifin , ( tsample_t ) 0 ) ;
EXPR	384:1	384:1	4	( * tifin -> tif_predecode ) ( tifin , ( tsample_t ) 0 )
FUNCTION_CALL	384:1	384:45	5	( * tifin -> tif_predecode ) ( tifin , ( tsample_t ) 0 )
CALLEE	384:1	384:23	6	( * tifin -> tif_predecode )
LEAF_NODE	384:1	384:1	7	(
UNARY_EXPR	384:2	384:3	7	* tifin -> tif_predecode
UNARY_OPERATOR	384:2	384:2	8	*
LEAF_NODE	384:2	384:2	9	*
FIELD	384:3	384:10	8	tifin -> tif_predecode
LEAF_NODE	384:3	384:3	9	tifin
LEAF_NODE	384:8	384:8	9	->
LEAF_NODE	384:10	384:10	9	tif_predecode
LEAF_NODE	384:23	384:23	7	)
LEAF_NODE	384:24	384:24	6	(
ARGUMENT	384:25	384:25	6	tifin
FIELD	384:25	384:25	7	tifin
LEAF_NODE	384:25	384:25	8	tifin
LEAF_NODE	384:30	384:30	6	,
ARGUMENT	384:32	384:44	6	( tsample_t ) 0
LEAF_NODE	384:32	384:32	7	(
TYPE_NAME	384:33	384:33	7	tsample_t
LEAF_NODE	384:33	384:33	8	tsample_t
LEAF_NODE	384:42	384:42	7	)
FIELD	384:44	384:44	7	0
LEAF_NODE	384:44	384:44	8	0
LEAF_NODE	384:45	384:45	6	)
LEAF_NODE	384:46	384:46	4	;
EXPR_STATEMENT	385:1	385:19	3	tifin -> tif_row = 0 ;
EXPR	385:1	385:1	4	tifin -> tif_row = 0
ASSIGN	385:1	385:18	5	tifin -> tif_row = 0
LVAL	385:1	385:1	6	tifin -> tif_row
FIELD	385:1	385:8	7	tifin -> tif_row
LEAF_NODE	385:1	385:1	8	tifin
LEAF_NODE	385:6	385:6	8	->
LEAF_NODE	385:8	385:8	8	tif_row
ASSIGN_OP	385:16	385:16	6	=
LEAF_NODE	385:16	385:16	7	=
RVAL	385:18	385:18	6	0
FIELD	385:18	385:18	7	0
LEAF_NODE	385:18	385:18	8	0
LEAF_NODE	385:19	385:19	4	;
EXPR_STATEMENT	386:1	386:16	3	badfaxlines = 0 ;
EXPR	386:1	386:1	4	badfaxlines = 0
ASSIGN	386:1	386:15	5	badfaxlines = 0
LVAL	386:1	386:1	6	badfaxlines
FIELD	386:1	386:1	7	badfaxlines
LEAF_NODE	386:1	386:1	8	badfaxlines
ASSIGN_OP	386:13	386:13	6	=
LEAF_NODE	386:13	386:13	7	=
RVAL	386:15	386:15	6	0
FIELD	386:15	386:15	7	0
LEAF_NODE	386:15	386:15	8	0
LEAF_NODE	386:16	386:16	4	;
EXPR_STATEMENT	387:1	387:14	3	badfaxrun = 0 ;
EXPR	387:1	387:1	4	badfaxrun = 0
ASSIGN	387:1	387:13	5	badfaxrun = 0
LVAL	387:1	387:1	6	badfaxrun
FIELD	387:1	387:1	7	badfaxrun
LEAF_NODE	387:1	387:1	8	badfaxrun
ASSIGN_OP	387:11	387:11	6	=
LEAF_NODE	387:11	387:11	7	=
RVAL	387:13	387:13	6	0
FIELD	387:13	387:13	7	0
LEAF_NODE	387:13	387:13	8	0
LEAF_NODE	387:14	387:14	4	;
EXPR_STATEMENT	389:1	389:33	3	_TIFFmemset ( refbuf , 0 , linesize ) ;
EXPR	389:1	389:1	4	_TIFFmemset ( refbuf , 0 , linesize )
FUNCTION_CALL	389:1	389:32	5	_TIFFmemset ( refbuf , 0 , linesize )
CALLEE	389:1	389:1	6	_TIFFmemset
LEAF_NODE	389:1	389:1	7	_TIFFmemset
LEAF_NODE	389:12	389:12	6	(
ARGUMENT	389:13	389:13	6	refbuf
FIELD	389:13	389:13	7	refbuf
LEAF_NODE	389:13	389:13	8	refbuf
LEAF_NODE	389:19	389:19	6	,
ARGUMENT	389:21	389:21	6	0
FIELD	389:21	389:21	7	0
LEAF_NODE	389:21	389:21	8	0
LEAF_NODE	389:22	389:22	6	,
ARGUMENT	389:24	389:24	6	linesize
FIELD	389:24	389:24	7	linesize
LEAF_NODE	389:24	389:24	8	linesize
LEAF_NODE	389:32	389:32	6	)
LEAF_NODE	389:33	389:33	4	;
EXPR_STATEMENT	390:1	390:8	3	row = 0 ;
EXPR	390:1	390:1	4	row = 0
ASSIGN	390:1	390:7	5	row = 0
LVAL	390:1	390:1	6	row
FIELD	390:1	390:1	7	row
LEAF_NODE	390:1	390:1	8	row
ASSIGN_OP	390:5	390:5	6	=
LEAF_NODE	390:5	390:5	7	=
RVAL	390:7	390:7	6	0
FIELD	390:7	390:7	7	0
LEAF_NODE	390:7	390:7	8	0
LEAF_NODE	390:8	390:8	4	;
EXPR_STATEMENT	391:1	391:11	3	badrun = 0 ;
EXPR	391:1	391:1	4	badrun = 0
ASSIGN	391:1	391:10	5	badrun = 0
LVAL	391:1	391:1	6	badrun
FIELD	391:1	391:1	7	badrun
LEAF_NODE	391:1	391:1	8	badrun
ASSIGN_OP	391:8	391:8	6	=
LEAF_NODE	391:8	391:8	7	=
RVAL	391:10	391:10	6	0
FIELD	391:10	391:10	7	0
LEAF_NODE	391:10	391:10	8	0
LEAF_NODE	391:11	391:11	4	;
ITERATION	392:1	392:30	3	
KEYWORD	392:1	392:1	4	while
LEAF_NODE	392:1	392:1	5	while
LEAF_NODE	392:7	392:7	4	(
CONDITION	392:8	392:8	4	tifin -> tif_rawcc > 0
EXPR	392:8	392:27	5	tifin -> tif_rawcc > 0
FIELD	392:8	392:15	6	tifin -> tif_rawcc
LEAF_NODE	392:8	392:8	7	tifin
LEAF_NODE	392:13	392:13	7	->
LEAF_NODE	392:15	392:15	7	tif_rawcc
REL_OPERATOR	392:25	392:25	6	>
LEAF_NODE	392:25	392:25	7	>
FIELD	392:27	392:27	6	0
LEAF_NODE	392:27	392:27	7	0
LEAF_NODE	392:28	392:28	4	)
STATEMENTS	392:30	422:1	4	
LEAF_NODE	392:30	392:30	5	{
STATEMENTS	393:2	414:2	5	
EXPR_STATEMENT	393:2	394:22	6	ok = ( * tifin -> tif_decoderow ) ( tifin , ( tdata_t ) rowbuf , linesize , 0 ) ;
EXPR	393:2	393:2	7	ok = ( * tifin -> tif_decoderow ) ( tifin , ( tdata_t ) rowbuf , linesize , 0 )
ASSIGN	393:2	393:7	8	ok = ( * tifin -> tif_decoderow ) ( tifin , ( tdata_t ) rowbuf , linesize , 0 )
LVAL	393:2	393:2	9	ok
FIELD	393:2	393:2	10	ok
LEAF_NODE	393:2	393:2	11	ok
ASSIGN_OP	393:5	393:5	9	=
LEAF_NODE	393:5	393:5	10	=
RVAL	393:7	393:7	9	( * tifin -> tif_decoderow ) ( tifin , ( tdata_t ) rowbuf , linesize , 0 )
FUNCTION_CALL	393:7	394:21	10	( * tifin -> tif_decoderow ) ( tifin , ( tdata_t ) rowbuf , linesize , 0 )
CALLEE	393:7	393:29	11	( * tifin -> tif_decoderow )
LEAF_NODE	393:7	393:7	12	(
UNARY_EXPR	393:8	393:9	12	* tifin -> tif_decoderow
UNARY_OPERATOR	393:8	393:8	13	*
LEAF_NODE	393:8	393:8	14	*
FIELD	393:9	393:16	13	tifin -> tif_decoderow
LEAF_NODE	393:9	393:9	14	tifin
LEAF_NODE	393:14	393:14	14	->
LEAF_NODE	393:16	393:16	14	tif_decoderow
LEAF_NODE	393:29	393:29	12	)
LEAF_NODE	393:30	393:30	11	(
ARGUMENT	393:31	393:31	11	tifin
FIELD	393:31	393:31	12	tifin
LEAF_NODE	393:31	393:31	13	tifin
LEAF_NODE	393:36	393:36	11	,
ARGUMENT	393:38	393:48	11	( tdata_t ) rowbuf
LEAF_NODE	393:38	393:38	12	(
TYPE_NAME	393:39	393:39	12	tdata_t
LEAF_NODE	393:39	393:39	13	tdata_t
LEAF_NODE	393:46	393:46	12	)
FIELD	393:48	393:48	12	rowbuf
LEAF_NODE	393:48	393:48	13	rowbuf
LEAF_NODE	393:54	393:54	11	,
ARGUMENT	394:10	394:10	11	linesize
FIELD	394:10	394:10	12	linesize
LEAF_NODE	394:10	394:10	13	linesize
LEAF_NODE	394:18	394:18	11	,
ARGUMENT	394:20	394:20	11	0
FIELD	394:20	394:20	12	0
LEAF_NODE	394:20	394:20	13	0
LEAF_NODE	394:21	394:21	11	)
LEAF_NODE	394:22	394:22	7	;
SELECTION	395:2	395:11	6	
KEYWORD	395:2	395:2	7	if
LEAF_NODE	395:2	395:2	8	if
LEAF_NODE	395:5	395:5	7	(
CONDITION	395:6	395:6	7	! ok
EXPR	395:6	395:6	8	! ok
UNARY_EXPR	395:6	395:7	9	! ok
UNARY_OPERATOR	395:6	395:6	10	!
LEAF_NODE	395:6	395:6	11	!
FIELD	395:7	395:7	10	ok
LEAF_NODE	395:7	395:7	11	ok
LEAF_NODE	395:9	395:9	7	)
STATEMENTS	395:11	400:2	7	
LEAF_NODE	395:11	395:11	8	{
STATEMENTS	396:3	399:3	8	
EXPR_STATEMENT	396:3	396:16	9	badfaxlines ++ ;
EXPR	396:3	396:3	10	badfaxlines ++
FIELD	396:3	396:14	11	badfaxlines ++
LEAF_NODE	396:3	396:3	12	badfaxlines
LEAF_NODE	396:14	396:14	12	++
LEAF_NODE	396:16	396:16	10	;
EXPR_STATEMENT	397:3	397:11	9	badrun ++ ;
EXPR	397:3	397:3	10	badrun ++
FIELD	397:3	397:9	11	badrun ++
LEAF_NODE	397:3	397:3	12	badrun
LEAF_NODE	397:9	397:9	12	++
LEAF_NODE	397:11	397:11	10	;
EXPR_STATEMENT	399:3	399:40	9	_TIFFmemcpy ( rowbuf , refbuf , linesize ) ;
EXPR	399:3	399:3	10	_TIFFmemcpy ( rowbuf , refbuf , linesize )
FUNCTION_CALL	399:3	399:39	11	_TIFFmemcpy ( rowbuf , refbuf , linesize )
CALLEE	399:3	399:3	12	_TIFFmemcpy
LEAF_NODE	399:3	399:3	13	_TIFFmemcpy
LEAF_NODE	399:14	399:14	12	(
ARGUMENT	399:15	399:15	12	rowbuf
FIELD	399:15	399:15	13	rowbuf
LEAF_NODE	399:15	399:15	14	rowbuf
LEAF_NODE	399:21	399:21	12	,
ARGUMENT	399:23	399:23	12	refbuf
FIELD	399:23	399:23	13	refbuf
LEAF_NODE	399:23	399:23	14	refbuf
LEAF_NODE	399:29	399:29	12	,
ARGUMENT	399:31	399:31	12	linesize
FIELD	399:31	399:31	13	linesize
LEAF_NODE	399:31	399:31	14	linesize
LEAF_NODE	399:39	399:39	12	)
LEAF_NODE	399:40	399:40	10	;
LEAF_NODE	400:2	400:2	8	}
SELECTION	400:4	400:9	6	
KEYWORD	400:4	400:4	7	else
LEAF_NODE	400:4	400:4	8	else
STATEMENTS	400:9	405:2	7	
LEAF_NODE	400:9	400:9	8	{
STATEMENTS	401:3	404:3	8	
SELECTION	401:3	402:4	9	
KEYWORD	401:3	401:3	10	if
LEAF_NODE	401:3	401:3	11	if
LEAF_NODE	401:6	401:6	10	(
CONDITION	401:7	401:7	10	badrun > badfaxrun
EXPR	401:7	401:16	11	badrun > badfaxrun
FIELD	401:7	401:7	12	badrun
LEAF_NODE	401:7	401:7	13	badrun
REL_OPERATOR	401:14	401:14	12	>
LEAF_NODE	401:14	401:14	13	>
FIELD	401:16	401:16	12	badfaxrun
LEAF_NODE	401:16	401:16	13	badfaxrun
LEAF_NODE	401:25	401:25	10	)
STATEMENTS	402:4	402:4	10	
EXPR_STATEMENT	402:4	402:22	11	badfaxrun = badrun ;
EXPR	402:4	402:4	12	badfaxrun = badrun
ASSIGN	402:4	402:16	13	badfaxrun = badrun
LVAL	402:4	402:4	14	badfaxrun
FIELD	402:4	402:4	15	badfaxrun
LEAF_NODE	402:4	402:4	16	badfaxrun
ASSIGN_OP	402:14	402:14	14	=
LEAF_NODE	402:14	402:14	15	=
RVAL	402:16	402:16	14	badrun
FIELD	402:16	402:16	15	badrun
LEAF_NODE	402:16	402:16	16	badrun
LEAF_NODE	402:22	402:22	12	;
EXPR_STATEMENT	403:3	403:13	9	badrun = 0 ;
EXPR	403:3	403:3	10	badrun = 0
ASSIGN	403:3	403:12	11	badrun = 0
LVAL	403:3	403:3	12	badrun
FIELD	403:3	403:3	13	badrun
LEAF_NODE	403:3	403:3	14	badrun
ASSIGN_OP	403:10	403:10	12	=
LEAF_NODE	403:10	403:10	13	=
RVAL	403:12	403:12	12	0
FIELD	403:12	403:12	13	0
LEAF_NODE	403:12	403:12	14	0
LEAF_NODE	403:13	403:13	10	;
EXPR_STATEMENT	404:3	404:40	9	_TIFFmemcpy ( refbuf , rowbuf , linesize ) ;
EXPR	404:3	404:3	10	_TIFFmemcpy ( refbuf , rowbuf , linesize )
FUNCTION_CALL	404:3	404:39	11	_TIFFmemcpy ( refbuf , rowbuf , linesize )
CALLEE	404:3	404:3	12	_TIFFmemcpy
LEAF_NODE	404:3	404:3	13	_TIFFmemcpy
LEAF_NODE	404:14	404:14	12	(
ARGUMENT	404:15	404:15	12	refbuf
FIELD	404:15	404:15	13	refbuf
LEAF_NODE	404:15	404:15	14	refbuf
LEAF_NODE	404:21	404:21	12	,
ARGUMENT	404:23	404:23	12	rowbuf
FIELD	404:23	404:23	13	rowbuf
LEAF_NODE	404:23	404:23	14	rowbuf
LEAF_NODE	404:29	404:29	12	,
ARGUMENT	404:31	404:31	12	linesize
FIELD	404:31	404:31	13	linesize
LEAF_NODE	404:31	404:31	14	linesize
LEAF_NODE	404:39	404:39	12	)
LEAF_NODE	404:40	404:40	10	;
LEAF_NODE	405:2	405:2	8	}
EXPR_STATEMENT	406:2	406:18	6	tifin -> tif_row ++ ;
EXPR	406:2	406:2	7	tifin -> tif_row ++
FIELD	406:2	406:16	8	tifin -> tif_row ++
LEAF_NODE	406:2	406:2	9	tifin
LEAF_NODE	406:7	406:7	9	->
LEAF_NODE	406:9	406:9	9	tif_row
LEAF_NODE	406:16	406:16	9	++
LEAF_NODE	406:18	406:18	7	;
SELECTION	408:2	408:53	6	
KEYWORD	408:2	408:2	7	if
LEAF_NODE	408:2	408:2	8	if
LEAF_NODE	408:5	408:5	7	(
CONDITION	408:6	408:6	7	TIFFWriteScanline ( tifout , rowbuf , row , 0 ) < 0
EXPR	408:6	408:50	8	TIFFWriteScanline ( tifout , rowbuf , row , 0 ) < 0
FUNCTION_CALL	408:6	408:46	9	TIFFWriteScanline ( tifout , rowbuf , row , 0 )
CALLEE	408:6	408:6	10	TIFFWriteScanline
LEAF_NODE	408:6	408:6	11	TIFFWriteScanline
LEAF_NODE	408:23	408:23	10	(
ARGUMENT	408:24	408:24	10	tifout
FIELD	408:24	408:24	11	tifout
LEAF_NODE	408:24	408:24	12	tifout
LEAF_NODE	408:30	408:30	10	,
ARGUMENT	408:32	408:32	10	rowbuf
FIELD	408:32	408:32	11	rowbuf
LEAF_NODE	408:32	408:32	12	rowbuf
LEAF_NODE	408:38	408:38	10	,
ARGUMENT	408:40	408:40	10	row
FIELD	408:40	408:40	11	row
LEAF_NODE	408:40	408:40	12	row
LEAF_NODE	408:43	408:43	10	,
ARGUMENT	408:45	408:45	10	0
FIELD	408:45	408:45	11	0
LEAF_NODE	408:45	408:45	12	0
LEAF_NODE	408:46	408:46	10	)
REL_OPERATOR	408:48	408:48	9	<
LEAF_NODE	408:48	408:48	10	<
FIELD	408:50	408:50	9	0
LEAF_NODE	408:50	408:50	10	0
LEAF_NODE	408:51	408:51	7	)
STATEMENTS	408:53	412:2	7	
LEAF_NODE	408:53	408:53	8	{
STATEMENTS	409:3	411:3	8	
EXPR_STATEMENT	409:3	410:36	9	fprintf ( stderr , "%s: Write error at row %ld.\n" , tifout -> tif_name , ( long ) row ) ;
EXPR	409:3	409:3	10	fprintf ( stderr , "%s: Write error at row %ld.\n" , tifout -> tif_name , ( long ) row )
FUNCTION_CALL	409:3	410:35	11	fprintf ( stderr , "%s: Write error at row %ld.\n" , tifout -> tif_name , ( long ) row )
CALLEE	409:3	409:3	12	fprintf
LEAF_NODE	409:3	409:3	13	fprintf
LEAF_NODE	409:10	409:10	12	(
ARGUMENT	409:11	409:11	12	stderr
FIELD	409:11	409:11	13	stderr
LEAF_NODE	409:11	409:11	14	stderr
LEAF_NODE	409:17	409:17	12	,
ARGUMENT	409:19	409:19	12	"%s: Write error at row %ld.\n"
FIELD	409:19	409:19	13	"%s: Write error at row %ld.\n"
LEAF_NODE	409:19	409:19	14	"%s: Write error at row %ld.\n"
LEAF_NODE	409:50	409:50	12	,
ARGUMENT	410:7	410:7	12	tifout -> tif_name
FIELD	410:7	410:15	13	tifout -> tif_name
LEAF_NODE	410:7	410:7	14	tifout
LEAF_NODE	410:13	410:13	14	->
LEAF_NODE	410:15	410:15	14	tif_name
LEAF_NODE	410:23	410:23	12	,
ARGUMENT	410:25	410:32	12	( long ) row
LEAF_NODE	410:25	410:25	13	(
TYPE_NAME	410:26	410:26	13	long
LEAF_NODE	410:26	410:26	14	long
LEAF_NODE	410:30	410:30	13	)
FIELD	410:32	410:32	13	row
LEAF_NODE	410:32	410:32	14	row
LEAF_NODE	410:35	410:35	12	)
LEAF_NODE	410:36	410:36	10	;
JUMP_STATEMENT	411:3	411:8	9	break DESTINATION ;
KEYWORD	411:3	411:3	10	break
LEAF_NODE	411:3	411:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	411:8	411:8	10	;
LEAF_NODE	412:2	412:2	8	}
EXPR_STATEMENT	413:2	413:7	6	row ++ ;
EXPR	413:2	413:2	7	row ++
FIELD	413:2	413:5	8	row ++
LEAF_NODE	413:2	413:2	9	row
LEAF_NODE	413:5	413:5	9	++
LEAF_NODE	413:7	413:7	7	;
SELECTION	414:2	414:15	6	
KEYWORD	414:2	414:2	7	if
LEAF_NODE	414:2	414:2	8	if
LEAF_NODE	414:5	414:5	7	(
CONDITION	414:6	414:6	7	stretch
EXPR	414:6	414:6	8	stretch
FIELD	414:6	414:6	9	stretch
LEAF_NODE	414:6	414:6	10	stretch
LEAF_NODE	414:13	414:13	7	)
STATEMENTS	414:15	421:2	7	
LEAF_NODE	414:15	414:15	8	{
STATEMENTS	415:3	420:3	8	
SELECTION	415:3	415:54	9	
KEYWORD	415:3	415:3	10	if
LEAF_NODE	415:3	415:3	11	if
LEAF_NODE	415:6	415:6	10	(
CONDITION	415:7	415:7	10	TIFFWriteScanline ( tifout , rowbuf , row , 0 ) < 0
EXPR	415:7	415:51	11	TIFFWriteScanline ( tifout , rowbuf , row , 0 ) < 0
FUNCTION_CALL	415:7	415:47	12	TIFFWriteScanline ( tifout , rowbuf , row , 0 )
CALLEE	415:7	415:7	13	TIFFWriteScanline
LEAF_NODE	415:7	415:7	14	TIFFWriteScanline
LEAF_NODE	415:24	415:24	13	(
ARGUMENT	415:25	415:25	13	tifout
FIELD	415:25	415:25	14	tifout
LEAF_NODE	415:25	415:25	15	tifout
LEAF_NODE	415:31	415:31	13	,
ARGUMENT	415:33	415:33	13	rowbuf
FIELD	415:33	415:33	14	rowbuf
LEAF_NODE	415:33	415:33	15	rowbuf
LEAF_NODE	415:39	415:39	13	,
ARGUMENT	415:41	415:41	13	row
FIELD	415:41	415:41	14	row
LEAF_NODE	415:41	415:41	15	row
LEAF_NODE	415:44	415:44	13	,
ARGUMENT	415:46	415:46	13	0
FIELD	415:46	415:46	14	0
LEAF_NODE	415:46	415:46	15	0
LEAF_NODE	415:47	415:47	13	)
REL_OPERATOR	415:49	415:49	12	<
LEAF_NODE	415:49	415:49	13	<
FIELD	415:51	415:51	12	0
LEAF_NODE	415:51	415:51	13	0
LEAF_NODE	415:52	415:52	10	)
STATEMENTS	415:54	419:3	10	
LEAF_NODE	415:54	415:54	11	{
STATEMENTS	416:4	418:4	11	
EXPR_STATEMENT	416:4	417:37	12	fprintf ( stderr , "%s: Write error at row %ld.\n" , tifout -> tif_name , ( long ) row ) ;
EXPR	416:4	416:4	13	fprintf ( stderr , "%s: Write error at row %ld.\n" , tifout -> tif_name , ( long ) row )
FUNCTION_CALL	416:4	417:36	14	fprintf ( stderr , "%s: Write error at row %ld.\n" , tifout -> tif_name , ( long ) row )
CALLEE	416:4	416:4	15	fprintf
LEAF_NODE	416:4	416:4	16	fprintf
LEAF_NODE	416:11	416:11	15	(
ARGUMENT	416:12	416:12	15	stderr
FIELD	416:12	416:12	16	stderr
LEAF_NODE	416:12	416:12	17	stderr
LEAF_NODE	416:18	416:18	15	,
ARGUMENT	416:20	416:20	15	"%s: Write error at row %ld.\n"
FIELD	416:20	416:20	16	"%s: Write error at row %ld.\n"
LEAF_NODE	416:20	416:20	17	"%s: Write error at row %ld.\n"
LEAF_NODE	416:51	416:51	15	,
ARGUMENT	417:8	417:8	15	tifout -> tif_name
FIELD	417:8	417:16	16	tifout -> tif_name
LEAF_NODE	417:8	417:8	17	tifout
LEAF_NODE	417:14	417:14	17	->
LEAF_NODE	417:16	417:16	17	tif_name
LEAF_NODE	417:24	417:24	15	,
ARGUMENT	417:26	417:33	15	( long ) row
LEAF_NODE	417:26	417:26	16	(
TYPE_NAME	417:27	417:27	16	long
LEAF_NODE	417:27	417:27	17	long
LEAF_NODE	417:31	417:31	16	)
FIELD	417:33	417:33	16	row
LEAF_NODE	417:33	417:33	17	row
LEAF_NODE	417:36	417:36	15	)
LEAF_NODE	417:37	417:37	13	;
JUMP_STATEMENT	418:4	418:9	12	break DESTINATION ;
KEYWORD	418:4	418:4	13	break
LEAF_NODE	418:4	418:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	418:9	418:9	13	;
LEAF_NODE	419:3	419:3	11	}
EXPR_STATEMENT	420:3	420:8	9	row ++ ;
EXPR	420:3	420:3	10	row ++
FIELD	420:3	420:6	11	row ++
LEAF_NODE	420:3	420:3	12	row
LEAF_NODE	420:6	420:6	12	++
LEAF_NODE	420:8	420:8	10	;
LEAF_NODE	421:2	421:2	8	}
LEAF_NODE	422:1	422:1	5	}
SELECTION	423:1	424:2	3	
KEYWORD	423:1	423:1	4	if
LEAF_NODE	423:1	423:1	5	if
LEAF_NODE	423:4	423:4	4	(
CONDITION	423:5	423:5	4	badrun > badfaxrun
EXPR	423:5	423:14	5	badrun > badfaxrun
FIELD	423:5	423:5	6	badrun
LEAF_NODE	423:5	423:5	7	badrun
REL_OPERATOR	423:12	423:12	6	>
LEAF_NODE	423:12	423:12	7	>
FIELD	423:14	423:14	6	badfaxrun
LEAF_NODE	423:14	423:14	7	badfaxrun
LEAF_NODE	423:23	423:23	4	)
STATEMENTS	424:2	424:2	4	
EXPR_STATEMENT	424:2	424:20	5	badfaxrun = badrun ;
EXPR	424:2	424:2	6	badfaxrun = badrun
ASSIGN	424:2	424:14	7	badfaxrun = badrun
LVAL	424:2	424:2	8	badfaxrun
FIELD	424:2	424:2	9	badfaxrun
LEAF_NODE	424:2	424:2	10	badfaxrun
ASSIGN_OP	424:12	424:12	8	=
LEAF_NODE	424:12	424:12	9	=
RVAL	424:14	424:14	8	badrun
FIELD	424:14	424:14	9	badrun
LEAF_NODE	424:14	424:14	10	badrun
LEAF_NODE	424:20	424:20	6	;
EXPR_STATEMENT	425:1	425:30	3	_TIFFfree ( tifin -> tif_rawdata ) ;
EXPR	425:1	425:1	4	_TIFFfree ( tifin -> tif_rawdata )
FUNCTION_CALL	425:1	425:29	5	_TIFFfree ( tifin -> tif_rawdata )
CALLEE	425:1	425:1	6	_TIFFfree
LEAF_NODE	425:1	425:1	7	_TIFFfree
LEAF_NODE	425:10	425:10	6	(
ARGUMENT	425:11	425:11	6	tifin -> tif_rawdata
FIELD	425:11	425:18	7	tifin -> tif_rawdata
LEAF_NODE	425:11	425:11	8	tifin
LEAF_NODE	425:16	425:16	8	->
LEAF_NODE	425:18	425:18	8	tif_rawdata
LEAF_NODE	425:29	425:29	6	)
LEAF_NODE	425:30	425:30	4	;
LEAF_NODE	426:1	426:1	3	return
LEAF_NODE	426:8	426:8	3	(
LEAF_NODE	426:9	426:9	3	row
LEAF_NODE	426:12	426:12	3	)
LEAF_NODE	426:13	426:13	3	;
LEAF_NODE	427:0	427:0	2	}
FUNCTION_DEF	465:0	476:0	1	
RETURN_TYPE	465:0	465:7	2	static void
LEAF_NODE	465:0	465:0	3	static
TYPE_NAME	465:7	465:7	3	void
LEAF_NODE	465:7	465:7	4	void
FUNCTION_NAME	466:0	466:0	2	usage
LEAF_NODE	466:0	466:0	3	usage
PARAMETER_LIST	466:5	466:10	2	( void )
LEAF_NODE	466:5	466:5	3	(
PARAMETER_DECL	466:6	466:6	3	void
LEAF_NODE	466:6	466:6	4	void
LEAF_NODE	466:10	466:10	3	)
LEAF_NODE	467:0	467:0	2	{
STATEMENTS	468:1	475:1	2	
SIMPLE_DECL	468:1	468:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	468:1	468:6	4	char [ BUFSIZ ] buf
TYPE	468:1	468:9	5	char [ BUFSIZ ]
TYPE_NAME	468:1	468:1	6	char
LEAF_NODE	468:1	468:1	7	char
TYPE_SUFFIX	468:9	468:16	6	[ BUFSIZ ]
LEAF_NODE	468:9	468:9	7	[
FIELD	468:10	468:10	7	BUFSIZ
LEAF_NODE	468:10	468:10	8	BUFSIZ
LEAF_NODE	468:16	468:16	7	]
NAME	468:6	468:6	5	buf
LEAF_NODE	468:6	468:6	6	buf
LEAF_NODE	468:17	468:17	4	;
SIMPLE_DECL	469:1	469:6	3	int i ;
VAR_DECL	469:1	469:5	4	int i
TYPE	469:1	469:1	5	int
TYPE_NAME	469:1	469:1	6	int
LEAF_NODE	469:1	469:1	7	int
NAME	469:5	469:5	5	i
LEAF_NODE	469:5	469:5	6	i
LEAF_NODE	469:6	469:6	4	;
EXPR_STATEMENT	471:1	471:20	3	setbuf ( stderr , buf ) ;
EXPR	471:1	471:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	471:1	471:19	5	setbuf ( stderr , buf )
CALLEE	471:1	471:1	6	setbuf
LEAF_NODE	471:1	471:1	7	setbuf
LEAF_NODE	471:7	471:7	6	(
ARGUMENT	471:8	471:8	6	stderr
FIELD	471:8	471:8	7	stderr
LEAF_NODE	471:8	471:8	8	stderr
LEAF_NODE	471:14	471:14	6	,
ARGUMENT	471:16	471:16	6	buf
FIELD	471:16	471:16	7	buf
LEAF_NODE	471:16	471:16	8	buf
LEAF_NODE	471:19	471:19	6	)
LEAF_NODE	471:20	471:20	4	;
EXPR_STATEMENT	472:8	472:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	472:8	472:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	472:8	472:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	472:8	472:8	6	fprintf
LEAF_NODE	472:8	472:8	7	fprintf
LEAF_NODE	472:15	472:15	6	(
ARGUMENT	472:16	472:16	6	stderr
FIELD	472:16	472:16	7	stderr
LEAF_NODE	472:16	472:16	8	stderr
LEAF_NODE	472:22	472:22	6	,
ARGUMENT	472:24	472:24	6	"%s\n\n"
FIELD	472:24	472:24	7	"%s\n\n"
LEAF_NODE	472:24	472:24	8	"%s\n\n"
LEAF_NODE	472:32	472:32	6	,
ARGUMENT	472:34	472:34	6	TIFFGetVersion ( )
FUNCTION_CALL	472:34	472:49	7	TIFFGetVersion ( )
CALLEE	472:34	472:34	8	TIFFGetVersion
LEAF_NODE	472:34	472:34	9	TIFFGetVersion
LEAF_NODE	472:48	472:48	8	(
LEAF_NODE	472:49	472:49	8	)
LEAF_NODE	472:50	472:50	6	)
LEAF_NODE	472:51	472:51	4	;
ITERATION	473:1	474:2	3	
KEYWORD	473:1	473:1	4	for
LEAF_NODE	473:1	473:1	5	for
LEAF_NODE	473:5	473:5	4	(
FOR_INIT	473:6	473:11	4	i = 0 ;
EXPR	473:6	473:6	5	i = 0
ASSIGN	473:6	473:10	6	i = 0
LVAL	473:6	473:6	7	i
FIELD	473:6	473:6	8	i
LEAF_NODE	473:6	473:6	9	i
ASSIGN_OP	473:8	473:8	7	=
LEAF_NODE	473:8	473:8	8	=
RVAL	473:10	473:10	7	0
FIELD	473:10	473:10	8	0
LEAF_NODE	473:10	473:10	9	0
LEAF_NODE	473:11	473:11	5	;
CONDITION	473:13	473:13	4	stuff [ i ] != NULL
EXPR	473:13	473:25	5	stuff [ i ] != NULL
FIELD	473:13	473:20	6	stuff [ i ]
LEAF_NODE	473:13	473:13	7	stuff
LEAF_NODE	473:18	473:18	7	[
EXPR	473:19	473:19	7	i
FIELD	473:19	473:19	8	i
LEAF_NODE	473:19	473:19	9	i
LEAF_NODE	473:20	473:20	7	]
EQ_OPERATOR	473:22	473:22	6	!=
LEAF_NODE	473:22	473:22	7	!=
FIELD	473:25	473:25	6	NULL
LEAF_NODE	473:25	473:25	7	NULL
LEAF_NODE	473:29	473:29	4	;
FOR_EXPR	473:31	473:31	4	i ++
EXPR	473:31	473:31	5	i ++
FIELD	473:31	473:32	6	i ++
LEAF_NODE	473:31	473:31	7	i
LEAF_NODE	473:32	473:32	7	++
LEAF_NODE	473:34	473:34	4	)
STATEMENTS	474:2	474:2	4	
EXPR_STATEMENT	474:2	474:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	474:2	474:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	474:2	474:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	474:2	474:2	8	fprintf
LEAF_NODE	474:2	474:2	9	fprintf
LEAF_NODE	474:9	474:9	8	(
ARGUMENT	474:10	474:10	8	stderr
FIELD	474:10	474:10	9	stderr
LEAF_NODE	474:10	474:10	10	stderr
LEAF_NODE	474:16	474:16	8	,
ARGUMENT	474:18	474:18	8	"%s\n"
FIELD	474:18	474:18	9	"%s\n"
LEAF_NODE	474:18	474:18	10	"%s\n"
LEAF_NODE	474:24	474:24	8	,
ARGUMENT	474:26	474:26	8	stuff [ i ]
FIELD	474:26	474:33	9	stuff [ i ]
LEAF_NODE	474:26	474:26	10	stuff
LEAF_NODE	474:31	474:31	10	[
EXPR	474:32	474:32	10	i
FIELD	474:32	474:32	11	i
LEAF_NODE	474:32	474:32	12	i
LEAF_NODE	474:33	474:33	10	]
LEAF_NODE	474:34	474:34	8	)
LEAF_NODE	474:35	474:35	6	;
EXPR_STATEMENT	475:1	475:19	3	exit ( EXIT_FAILURE ) ;
EXPR	475:1	475:1	4	exit ( EXIT_FAILURE )
FUNCTION_CALL	475:1	475:18	5	exit ( EXIT_FAILURE )
CALLEE	475:1	475:1	6	exit
LEAF_NODE	475:1	475:1	7	exit
LEAF_NODE	475:5	475:5	6	(
ARGUMENT	475:6	475:6	6	EXIT_FAILURE
FIELD	475:6	475:6	7	EXIT_FAILURE
LEAF_NODE	475:6	475:6	8	EXIT_FAILURE
LEAF_NODE	475:18	475:18	6	)
LEAF_NODE	475:19	475:19	4	;
LEAF_NODE	476:0	476:0	2	}
