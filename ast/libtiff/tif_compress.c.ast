SOURCE_FILE	32:0	250:0	0	
FUNCTION_DEF	32:0	47:0	1	
RETURN_TYPE	32:0	32:7	2	static int
LEAF_NODE	32:0	32:0	3	static
TYPE_NAME	32:7	32:7	3	int
LEAF_NODE	32:7	32:7	4	int
FUNCTION_NAME	33:0	33:0	2	TIFFNoEncode
LEAF_NODE	33:0	33:0	3	TIFFNoEncode
PARAMETER_LIST	33:12	33:42	2	( TIFF * tif , const char * method )
LEAF_NODE	33:12	33:12	3	(
PARAMETER_DECL	33:13	33:19	3	TIFF * tif
TYPE	33:13	33:17	4	TIFF *
TYPE_NAME	33:13	33:13	5	TIFF
LEAF_NODE	33:13	33:13	6	TIFF
POINTER	33:17	33:17	5	*
LEAF_NODE	33:17	33:17	6	*
NAME	33:19	33:19	4	tif
LEAF_NODE	33:19	33:19	5	tif
LEAF_NODE	33:22	33:22	3	,
PARAMETER_DECL	33:24	33:36	3	const char * method
TYPE	33:24	33:34	4	const char *
TYPE_NAME	33:24	33:30	5	const char
LEAF_NODE	33:24	33:24	6	const
LEAF_NODE	33:30	33:30	6	char
POINTER	33:34	33:34	5	*
LEAF_NODE	33:34	33:34	6	*
NAME	33:36	33:36	4	method
LEAF_NODE	33:36	33:36	5	method
LEAF_NODE	33:42	33:42	3	)
LEAF_NODE	34:0	34:0	2	{
STATEMENTS	35:1	46:1	2	
SIMPLE_DECL	35:1	35:64	3	const TIFFCodec * c ; c = TIFFFindCODEC ( tif -> tif_dir . td_compression ) ;
VAR_DECL	35:1	35:18	4	const TIFFCodec * c ; c = TIFFFindCODEC ( tif -> tif_dir . td_compression )
TYPE	35:1	35:16	5	const TIFFCodec *
TYPE_NAME	35:1	35:7	6	const TIFFCodec
LEAF_NODE	35:1	35:1	7	const
LEAF_NODE	35:7	35:7	7	TIFFCodec
POINTER	35:16	35:16	6	*
LEAF_NODE	35:16	35:16	7	*
NAME	35:18	35:18	5	c
LEAF_NODE	35:18	35:18	6	c
LEAF_NODE	0:0	0:0	5	;
INIT	35:18	35:18	5	c = TIFFFindCODEC ( tif -> tif_dir . td_compression )
ASSIGN	35:18	35:22	6	c = TIFFFindCODEC ( tif -> tif_dir . td_compression )
LVAL	35:18	35:18	7	c
NAME	35:18	35:18	8	c
LEAF_NODE	35:18	35:18	9	c
ASSIGN_OP	35:20	35:20	7	=
LEAF_NODE	35:20	35:20	8	=
RVAL	35:22	35:22	7	TIFFFindCODEC ( tif -> tif_dir . td_compression )
FUNCTION_CALL	35:22	35:63	8	TIFFFindCODEC ( tif -> tif_dir . td_compression )
CALLEE	35:22	35:22	9	TIFFFindCODEC
LEAF_NODE	35:22	35:22	10	TIFFFindCODEC
LEAF_NODE	35:35	35:35	9	(
ARGUMENT	35:36	35:36	9	tif -> tif_dir . td_compression
FIELD	35:36	35:49	10	tif -> tif_dir . td_compression
LEAF_NODE	35:36	35:36	11	tif
LEAF_NODE	35:39	35:39	11	->
LEAF_NODE	35:41	35:41	11	tif_dir
LEAF_NODE	35:48	35:48	11	.
LEAF_NODE	35:49	35:49	11	td_compression
LEAF_NODE	35:63	35:63	9	)
LEAF_NODE	35:64	35:64	4	;
SELECTION	37:1	37:8	3	
KEYWORD	37:1	37:1	4	if
LEAF_NODE	37:1	37:1	5	if
LEAF_NODE	37:4	37:4	4	(
CONDITION	37:5	37:5	4	c
EXPR	37:5	37:5	5	c
FIELD	37:5	37:5	6	c
LEAF_NODE	37:5	37:5	7	c
LEAF_NODE	37:6	37:6	4	)
STATEMENTS	37:8	41:1	4	
LEAF_NODE	37:8	37:8	5	{
STATEMENTS	38:2	38:2	5	
EXPR_STATEMENT	38:2	40:24	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%s %s encoding is not implemented" , c -> name , method ) ;
EXPR	38:2	38:2	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%s %s encoding is not implemented" , c -> name , method )
FUNCTION_CALL	38:2	40:23	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%s %s encoding is not implemented" , c -> name , method )
CALLEE	38:2	38:2	9	TIFFErrorExt
LEAF_NODE	38:2	38:2	10	TIFFErrorExt
LEAF_NODE	38:14	38:14	9	(
ARGUMENT	38:15	38:15	9	tif -> tif_clientdata
FIELD	38:15	38:20	10	tif -> tif_clientdata
LEAF_NODE	38:15	38:15	11	tif
LEAF_NODE	38:18	38:18	11	->
LEAF_NODE	38:20	38:20	11	tif_clientdata
LEAF_NODE	38:34	38:34	9	,
ARGUMENT	38:36	38:36	9	tif -> tif_name
FIELD	38:36	38:41	10	tif -> tif_name
LEAF_NODE	38:36	38:36	11	tif
LEAF_NODE	38:39	38:39	11	->
LEAF_NODE	38:41	38:41	11	tif_name
LEAF_NODE	38:49	38:49	9	,
ARGUMENT	39:8	39:8	9	"%s %s encoding is not implemented"
FIELD	39:8	39:8	10	"%s %s encoding is not implemented"
LEAF_NODE	39:8	39:8	11	"%s %s encoding is not implemented"
LEAF_NODE	39:43	39:43	9	,
ARGUMENT	40:8	40:8	9	c -> name
FIELD	40:8	40:11	10	c -> name
LEAF_NODE	40:8	40:8	11	c
LEAF_NODE	40:9	40:9	11	->
LEAF_NODE	40:11	40:11	11	name
LEAF_NODE	40:15	40:15	9	,
ARGUMENT	40:17	40:17	9	method
FIELD	40:17	40:17	10	method
LEAF_NODE	40:17	40:17	11	method
LEAF_NODE	40:23	40:23	9	)
LEAF_NODE	40:24	40:24	7	;
LEAF_NODE	41:1	41:1	5	}
SELECTION	41:3	41:8	3	
KEYWORD	41:3	41:3	4	else
LEAF_NODE	41:3	41:3	5	else
STATEMENTS	41:8	45:1	4	
LEAF_NODE	41:8	41:8	5	{
STATEMENTS	42:2	42:2	5	
EXPR_STATEMENT	42:2	44:44	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Compression scheme %u %s encoding is not implemented" , tif -> tif_dir . td_compression , method ) ;
EXPR	42:2	42:2	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Compression scheme %u %s encoding is not implemented" , tif -> tif_dir . td_compression , method )
FUNCTION_CALL	42:2	44:43	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Compression scheme %u %s encoding is not implemented" , tif -> tif_dir . td_compression , method )
CALLEE	42:2	42:2	9	TIFFErrorExt
LEAF_NODE	42:2	42:2	10	TIFFErrorExt
LEAF_NODE	42:14	42:14	9	(
ARGUMENT	42:15	42:15	9	tif -> tif_clientdata
FIELD	42:15	42:20	10	tif -> tif_clientdata
LEAF_NODE	42:15	42:15	11	tif
LEAF_NODE	42:18	42:18	11	->
LEAF_NODE	42:20	42:20	11	tif_clientdata
LEAF_NODE	42:34	42:34	9	,
ARGUMENT	42:36	42:36	9	tif -> tif_name
FIELD	42:36	42:41	10	tif -> tif_name
LEAF_NODE	42:36	42:36	11	tif
LEAF_NODE	42:39	42:39	11	->
LEAF_NODE	42:41	42:41	11	tif_name
LEAF_NODE	42:49	42:49	9	,
ARGUMENT	43:3	43:3	9	"Compression scheme %u %s encoding is not implemented"
FIELD	43:3	43:3	10	"Compression scheme %u %s encoding is not implemented"
LEAF_NODE	43:3	43:3	11	"Compression scheme %u %s encoding is not implemented"
LEAF_NODE	43:57	43:57	9	,
ARGUMENT	44:8	44:8	9	tif -> tif_dir . td_compression
FIELD	44:8	44:21	10	tif -> tif_dir . td_compression
LEAF_NODE	44:8	44:8	11	tif
LEAF_NODE	44:11	44:11	11	->
LEAF_NODE	44:13	44:13	11	tif_dir
LEAF_NODE	44:20	44:20	11	.
LEAF_NODE	44:21	44:21	11	td_compression
LEAF_NODE	44:35	44:35	9	,
ARGUMENT	44:37	44:37	9	method
FIELD	44:37	44:37	10	method
LEAF_NODE	44:37	44:37	11	method
LEAF_NODE	44:43	44:43	9	)
LEAF_NODE	44:44	44:44	7	;
LEAF_NODE	45:1	45:1	5	}
JUMP_STATEMENT	46:1	46:12	3	return ( - 1 ) ;
KEYWORD	46:1	46:1	4	return
LEAF_NODE	46:1	46:1	5	return
DESTINATION	46:8	46:8	4	( - 1 )
EXPR	46:8	46:11	5	( - 1 )
LEAF_NODE	46:8	46:8	6	(
UNARY_EXPR	46:9	46:10	6	- 1
UNARY_OPERATOR	46:9	46:9	7	-
LEAF_NODE	46:9	46:9	8	-
FIELD	46:10	46:10	7	1
LEAF_NODE	46:10	46:10	8	1
LEAF_NODE	46:11	46:11	6	)
LEAF_NODE	46:12	46:12	4	;
LEAF_NODE	47:0	47:0	2	}
FUNCTION_DEF	49:0	54:0	1	
RETURN_TYPE	49:0	49:0	2	int
TYPE_NAME	49:0	49:0	3	int
LEAF_NODE	49:0	49:0	4	int
FUNCTION_NAME	50:0	50:0	2	_TIFFNoRowEncode
LEAF_NODE	50:0	50:0	3	_TIFFNoRowEncode
PARAMETER_LIST	50:16	50:60	2	( TIFF * tif , uint8 * pp , tmsize_t cc , uint16 s )
LEAF_NODE	50:16	50:16	3	(
PARAMETER_DECL	50:17	50:23	3	TIFF * tif
TYPE	50:17	50:21	4	TIFF *
TYPE_NAME	50:17	50:17	5	TIFF
LEAF_NODE	50:17	50:17	6	TIFF
POINTER	50:21	50:21	5	*
LEAF_NODE	50:21	50:21	6	*
NAME	50:23	50:23	4	tif
LEAF_NODE	50:23	50:23	5	tif
LEAF_NODE	50:26	50:26	3	,
PARAMETER_DECL	50:28	50:35	3	uint8 * pp
TYPE	50:28	50:33	4	uint8 *
TYPE_NAME	50:28	50:28	5	uint8
LEAF_NODE	50:28	50:28	6	uint8
POINTER	50:33	50:33	5	*
LEAF_NODE	50:33	50:33	6	*
NAME	50:35	50:35	4	pp
LEAF_NODE	50:35	50:35	5	pp
LEAF_NODE	50:37	50:37	3	,
PARAMETER_DECL	50:39	50:48	3	tmsize_t cc
TYPE	50:39	50:39	4	tmsize_t
TYPE_NAME	50:39	50:39	5	tmsize_t
LEAF_NODE	50:39	50:39	6	tmsize_t
NAME	50:48	50:48	4	cc
LEAF_NODE	50:48	50:48	5	cc
LEAF_NODE	50:50	50:50	3	,
PARAMETER_DECL	50:52	50:59	3	uint16 s
TYPE	50:52	50:52	4	uint16
TYPE_NAME	50:52	50:52	5	uint16
LEAF_NODE	50:52	50:52	6	uint16
NAME	50:59	50:59	4	s
LEAF_NODE	50:59	50:59	5	s
LEAF_NODE	50:60	50:60	3	)
LEAF_NODE	51:0	51:0	2	{
STATEMENTS	52:1	53:1	2	
EXPR_STATEMENT	52:1	52:10	3	( void ) pp ;
EXPR	52:1	52:8	4	( void ) pp
LEAF_NODE	52:1	52:1	5	(
TYPE_NAME	52:2	52:2	5	void
LEAF_NODE	52:2	52:2	6	void
LEAF_NODE	52:6	52:6	5	)
FIELD	52:8	52:8	5	pp
LEAF_NODE	52:8	52:8	6	pp
LEAF_NODE	52:10	52:10	4	;
EXPR_STATEMENT	52:12	52:21	3	( void ) cc ;
EXPR	52:12	52:19	4	( void ) cc
LEAF_NODE	52:12	52:12	5	(
TYPE_NAME	52:13	52:13	5	void
LEAF_NODE	52:13	52:13	6	void
LEAF_NODE	52:17	52:17	5	)
FIELD	52:19	52:19	5	cc
LEAF_NODE	52:19	52:19	6	cc
LEAF_NODE	52:21	52:21	4	;
EXPR_STATEMENT	52:23	52:31	3	( void ) s ;
EXPR	52:23	52:30	4	( void ) s
LEAF_NODE	52:23	52:23	5	(
TYPE_NAME	52:24	52:24	5	void
LEAF_NODE	52:24	52:24	6	void
LEAF_NODE	52:28	52:28	5	)
FIELD	52:30	52:30	5	s
LEAF_NODE	52:30	52:30	6	s
LEAF_NODE	52:31	52:31	4	;
JUMP_STATEMENT	53:1	53:39	3	return ( TIFFNoEncode ( tif , "scanline" ) ) ;
KEYWORD	53:1	53:1	4	return
LEAF_NODE	53:1	53:1	5	return
DESTINATION	53:8	53:8	4	( TIFFNoEncode ( tif , "scanline" ) )
EXPR	53:8	53:38	5	( TIFFNoEncode ( tif , "scanline" ) )
LEAF_NODE	53:8	53:8	6	(
FUNCTION_CALL	53:9	53:37	6	TIFFNoEncode ( tif , "scanline" )
CALLEE	53:9	53:9	7	TIFFNoEncode
LEAF_NODE	53:9	53:9	8	TIFFNoEncode
LEAF_NODE	53:21	53:21	7	(
ARGUMENT	53:22	53:22	7	tif
FIELD	53:22	53:22	8	tif
LEAF_NODE	53:22	53:22	9	tif
LEAF_NODE	53:25	53:25	7	,
ARGUMENT	53:27	53:27	7	"scanline"
FIELD	53:27	53:27	8	"scanline"
LEAF_NODE	53:27	53:27	9	"scanline"
LEAF_NODE	53:37	53:37	7	)
LEAF_NODE	53:38	53:38	6	)
LEAF_NODE	53:39	53:39	4	;
LEAF_NODE	54:0	54:0	2	}
FUNCTION_DEF	56:0	61:0	1	
RETURN_TYPE	56:0	56:0	2	int
TYPE_NAME	56:0	56:0	3	int
LEAF_NODE	56:0	56:0	4	int
FUNCTION_NAME	57:0	57:0	2	_TIFFNoStripEncode
LEAF_NODE	57:0	57:0	3	_TIFFNoStripEncode
PARAMETER_LIST	57:18	57:62	2	( TIFF * tif , uint8 * pp , tmsize_t cc , uint16 s )
LEAF_NODE	57:18	57:18	3	(
PARAMETER_DECL	57:19	57:25	3	TIFF * tif
TYPE	57:19	57:23	4	TIFF *
TYPE_NAME	57:19	57:19	5	TIFF
LEAF_NODE	57:19	57:19	6	TIFF
POINTER	57:23	57:23	5	*
LEAF_NODE	57:23	57:23	6	*
NAME	57:25	57:25	4	tif
LEAF_NODE	57:25	57:25	5	tif
LEAF_NODE	57:28	57:28	3	,
PARAMETER_DECL	57:30	57:37	3	uint8 * pp
TYPE	57:30	57:35	4	uint8 *
TYPE_NAME	57:30	57:30	5	uint8
LEAF_NODE	57:30	57:30	6	uint8
POINTER	57:35	57:35	5	*
LEAF_NODE	57:35	57:35	6	*
NAME	57:37	57:37	4	pp
LEAF_NODE	57:37	57:37	5	pp
LEAF_NODE	57:39	57:39	3	,
PARAMETER_DECL	57:41	57:50	3	tmsize_t cc
TYPE	57:41	57:41	4	tmsize_t
TYPE_NAME	57:41	57:41	5	tmsize_t
LEAF_NODE	57:41	57:41	6	tmsize_t
NAME	57:50	57:50	4	cc
LEAF_NODE	57:50	57:50	5	cc
LEAF_NODE	57:52	57:52	3	,
PARAMETER_DECL	57:54	57:61	3	uint16 s
TYPE	57:54	57:54	4	uint16
TYPE_NAME	57:54	57:54	5	uint16
LEAF_NODE	57:54	57:54	6	uint16
NAME	57:61	57:61	4	s
LEAF_NODE	57:61	57:61	5	s
LEAF_NODE	57:62	57:62	3	)
LEAF_NODE	58:0	58:0	2	{
STATEMENTS	59:1	60:1	2	
EXPR_STATEMENT	59:1	59:10	3	( void ) pp ;
EXPR	59:1	59:8	4	( void ) pp
LEAF_NODE	59:1	59:1	5	(
TYPE_NAME	59:2	59:2	5	void
LEAF_NODE	59:2	59:2	6	void
LEAF_NODE	59:6	59:6	5	)
FIELD	59:8	59:8	5	pp
LEAF_NODE	59:8	59:8	6	pp
LEAF_NODE	59:10	59:10	4	;
EXPR_STATEMENT	59:12	59:21	3	( void ) cc ;
EXPR	59:12	59:19	4	( void ) cc
LEAF_NODE	59:12	59:12	5	(
TYPE_NAME	59:13	59:13	5	void
LEAF_NODE	59:13	59:13	6	void
LEAF_NODE	59:17	59:17	5	)
FIELD	59:19	59:19	5	cc
LEAF_NODE	59:19	59:19	6	cc
LEAF_NODE	59:21	59:21	4	;
EXPR_STATEMENT	59:23	59:31	3	( void ) s ;
EXPR	59:23	59:30	4	( void ) s
LEAF_NODE	59:23	59:23	5	(
TYPE_NAME	59:24	59:24	5	void
LEAF_NODE	59:24	59:24	6	void
LEAF_NODE	59:28	59:28	5	)
FIELD	59:30	59:30	5	s
LEAF_NODE	59:30	59:30	6	s
LEAF_NODE	59:31	59:31	4	;
JUMP_STATEMENT	60:1	60:36	3	return ( TIFFNoEncode ( tif , "strip" ) ) ;
KEYWORD	60:1	60:1	4	return
LEAF_NODE	60:1	60:1	5	return
DESTINATION	60:8	60:8	4	( TIFFNoEncode ( tif , "strip" ) )
EXPR	60:8	60:35	5	( TIFFNoEncode ( tif , "strip" ) )
LEAF_NODE	60:8	60:8	6	(
FUNCTION_CALL	60:9	60:34	6	TIFFNoEncode ( tif , "strip" )
CALLEE	60:9	60:9	7	TIFFNoEncode
LEAF_NODE	60:9	60:9	8	TIFFNoEncode
LEAF_NODE	60:21	60:21	7	(
ARGUMENT	60:22	60:22	7	tif
FIELD	60:22	60:22	8	tif
LEAF_NODE	60:22	60:22	9	tif
LEAF_NODE	60:25	60:25	7	,
ARGUMENT	60:27	60:27	7	"strip"
FIELD	60:27	60:27	8	"strip"
LEAF_NODE	60:27	60:27	9	"strip"
LEAF_NODE	60:34	60:34	7	)
LEAF_NODE	60:35	60:35	6	)
LEAF_NODE	60:36	60:36	4	;
LEAF_NODE	61:0	61:0	2	}
FUNCTION_DEF	63:0	68:0	1	
RETURN_TYPE	63:0	63:0	2	int
TYPE_NAME	63:0	63:0	3	int
LEAF_NODE	63:0	63:0	4	int
FUNCTION_NAME	64:0	64:0	2	_TIFFNoTileEncode
LEAF_NODE	64:0	64:0	3	_TIFFNoTileEncode
PARAMETER_LIST	64:17	64:61	2	( TIFF * tif , uint8 * pp , tmsize_t cc , uint16 s )
LEAF_NODE	64:17	64:17	3	(
PARAMETER_DECL	64:18	64:24	3	TIFF * tif
TYPE	64:18	64:22	4	TIFF *
TYPE_NAME	64:18	64:18	5	TIFF
LEAF_NODE	64:18	64:18	6	TIFF
POINTER	64:22	64:22	5	*
LEAF_NODE	64:22	64:22	6	*
NAME	64:24	64:24	4	tif
LEAF_NODE	64:24	64:24	5	tif
LEAF_NODE	64:27	64:27	3	,
PARAMETER_DECL	64:29	64:36	3	uint8 * pp
TYPE	64:29	64:34	4	uint8 *
TYPE_NAME	64:29	64:29	5	uint8
LEAF_NODE	64:29	64:29	6	uint8
POINTER	64:34	64:34	5	*
LEAF_NODE	64:34	64:34	6	*
NAME	64:36	64:36	4	pp
LEAF_NODE	64:36	64:36	5	pp
LEAF_NODE	64:38	64:38	3	,
PARAMETER_DECL	64:40	64:49	3	tmsize_t cc
TYPE	64:40	64:40	4	tmsize_t
TYPE_NAME	64:40	64:40	5	tmsize_t
LEAF_NODE	64:40	64:40	6	tmsize_t
NAME	64:49	64:49	4	cc
LEAF_NODE	64:49	64:49	5	cc
LEAF_NODE	64:51	64:51	3	,
PARAMETER_DECL	64:53	64:60	3	uint16 s
TYPE	64:53	64:53	4	uint16
TYPE_NAME	64:53	64:53	5	uint16
LEAF_NODE	64:53	64:53	6	uint16
NAME	64:60	64:60	4	s
LEAF_NODE	64:60	64:60	5	s
LEAF_NODE	64:61	64:61	3	)
LEAF_NODE	65:0	65:0	2	{
STATEMENTS	66:1	67:1	2	
EXPR_STATEMENT	66:1	66:10	3	( void ) pp ;
EXPR	66:1	66:8	4	( void ) pp
LEAF_NODE	66:1	66:1	5	(
TYPE_NAME	66:2	66:2	5	void
LEAF_NODE	66:2	66:2	6	void
LEAF_NODE	66:6	66:6	5	)
FIELD	66:8	66:8	5	pp
LEAF_NODE	66:8	66:8	6	pp
LEAF_NODE	66:10	66:10	4	;
EXPR_STATEMENT	66:12	66:21	3	( void ) cc ;
EXPR	66:12	66:19	4	( void ) cc
LEAF_NODE	66:12	66:12	5	(
TYPE_NAME	66:13	66:13	5	void
LEAF_NODE	66:13	66:13	6	void
LEAF_NODE	66:17	66:17	5	)
FIELD	66:19	66:19	5	cc
LEAF_NODE	66:19	66:19	6	cc
LEAF_NODE	66:21	66:21	4	;
EXPR_STATEMENT	66:23	66:31	3	( void ) s ;
EXPR	66:23	66:30	4	( void ) s
LEAF_NODE	66:23	66:23	5	(
TYPE_NAME	66:24	66:24	5	void
LEAF_NODE	66:24	66:24	6	void
LEAF_NODE	66:28	66:28	5	)
FIELD	66:30	66:30	5	s
LEAF_NODE	66:30	66:30	6	s
LEAF_NODE	66:31	66:31	4	;
JUMP_STATEMENT	67:1	67:35	3	return ( TIFFNoEncode ( tif , "tile" ) ) ;
KEYWORD	67:1	67:1	4	return
LEAF_NODE	67:1	67:1	5	return
DESTINATION	67:8	67:8	4	( TIFFNoEncode ( tif , "tile" ) )
EXPR	67:8	67:34	5	( TIFFNoEncode ( tif , "tile" ) )
LEAF_NODE	67:8	67:8	6	(
FUNCTION_CALL	67:9	67:33	6	TIFFNoEncode ( tif , "tile" )
CALLEE	67:9	67:9	7	TIFFNoEncode
LEAF_NODE	67:9	67:9	8	TIFFNoEncode
LEAF_NODE	67:21	67:21	7	(
ARGUMENT	67:22	67:22	7	tif
FIELD	67:22	67:22	8	tif
LEAF_NODE	67:22	67:22	9	tif
LEAF_NODE	67:25	67:25	7	,
ARGUMENT	67:27	67:27	7	"tile"
FIELD	67:27	67:27	8	"tile"
LEAF_NODE	67:27	67:27	9	"tile"
LEAF_NODE	67:33	67:33	7	)
LEAF_NODE	67:34	67:34	6	)
LEAF_NODE	67:35	67:35	4	;
LEAF_NODE	68:0	68:0	2	}
FUNCTION_DEF	70:0	84:0	1	
RETURN_TYPE	70:0	70:7	2	static int
LEAF_NODE	70:0	70:0	3	static
TYPE_NAME	70:7	70:7	3	int
LEAF_NODE	70:7	70:7	4	int
FUNCTION_NAME	71:0	71:0	2	TIFFNoDecode
LEAF_NODE	71:0	71:0	3	TIFFNoDecode
PARAMETER_LIST	71:12	71:42	2	( TIFF * tif , const char * method )
LEAF_NODE	71:12	71:12	3	(
PARAMETER_DECL	71:13	71:19	3	TIFF * tif
TYPE	71:13	71:17	4	TIFF *
TYPE_NAME	71:13	71:13	5	TIFF
LEAF_NODE	71:13	71:13	6	TIFF
POINTER	71:17	71:17	5	*
LEAF_NODE	71:17	71:17	6	*
NAME	71:19	71:19	4	tif
LEAF_NODE	71:19	71:19	5	tif
LEAF_NODE	71:22	71:22	3	,
PARAMETER_DECL	71:24	71:36	3	const char * method
TYPE	71:24	71:34	4	const char *
TYPE_NAME	71:24	71:30	5	const char
LEAF_NODE	71:24	71:24	6	const
LEAF_NODE	71:30	71:30	6	char
POINTER	71:34	71:34	5	*
LEAF_NODE	71:34	71:34	6	*
NAME	71:36	71:36	4	method
LEAF_NODE	71:36	71:36	5	method
LEAF_NODE	71:42	71:42	3	)
LEAF_NODE	72:0	72:0	2	{
STATEMENTS	73:1	83:1	2	
SIMPLE_DECL	73:1	73:64	3	const TIFFCodec * c ; c = TIFFFindCODEC ( tif -> tif_dir . td_compression ) ;
VAR_DECL	73:1	73:18	4	const TIFFCodec * c ; c = TIFFFindCODEC ( tif -> tif_dir . td_compression )
TYPE	73:1	73:16	5	const TIFFCodec *
TYPE_NAME	73:1	73:7	6	const TIFFCodec
LEAF_NODE	73:1	73:1	7	const
LEAF_NODE	73:7	73:7	7	TIFFCodec
POINTER	73:16	73:16	6	*
LEAF_NODE	73:16	73:16	7	*
NAME	73:18	73:18	5	c
LEAF_NODE	73:18	73:18	6	c
LEAF_NODE	0:0	0:0	5	;
INIT	73:18	73:18	5	c = TIFFFindCODEC ( tif -> tif_dir . td_compression )
ASSIGN	73:18	73:22	6	c = TIFFFindCODEC ( tif -> tif_dir . td_compression )
LVAL	73:18	73:18	7	c
NAME	73:18	73:18	8	c
LEAF_NODE	73:18	73:18	9	c
ASSIGN_OP	73:20	73:20	7	=
LEAF_NODE	73:20	73:20	8	=
RVAL	73:22	73:22	7	TIFFFindCODEC ( tif -> tif_dir . td_compression )
FUNCTION_CALL	73:22	73:63	8	TIFFFindCODEC ( tif -> tif_dir . td_compression )
CALLEE	73:22	73:22	9	TIFFFindCODEC
LEAF_NODE	73:22	73:22	10	TIFFFindCODEC
LEAF_NODE	73:35	73:35	9	(
ARGUMENT	73:36	73:36	9	tif -> tif_dir . td_compression
FIELD	73:36	73:49	10	tif -> tif_dir . td_compression
LEAF_NODE	73:36	73:36	11	tif
LEAF_NODE	73:39	73:39	11	->
LEAF_NODE	73:41	73:41	11	tif_dir
LEAF_NODE	73:48	73:48	11	.
LEAF_NODE	73:49	73:49	11	td_compression
LEAF_NODE	73:63	73:63	9	)
LEAF_NODE	73:64	73:64	4	;
SELECTION	75:1	76:2	3	
KEYWORD	75:1	75:1	4	if
LEAF_NODE	75:1	75:1	5	if
LEAF_NODE	75:4	75:4	4	(
CONDITION	75:5	75:5	4	c
EXPR	75:5	75:5	5	c
FIELD	75:5	75:5	6	c
LEAF_NODE	75:5	75:5	7	c
LEAF_NODE	75:6	75:6	4	)
STATEMENTS	76:2	76:2	4	
EXPR_STATEMENT	76:2	78:24	5	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%s %s decoding is not implemented" , c -> name , method ) ;
EXPR	76:2	76:2	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%s %s decoding is not implemented" , c -> name , method )
FUNCTION_CALL	76:2	78:23	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%s %s decoding is not implemented" , c -> name , method )
CALLEE	76:2	76:2	8	TIFFErrorExt
LEAF_NODE	76:2	76:2	9	TIFFErrorExt
LEAF_NODE	76:14	76:14	8	(
ARGUMENT	76:15	76:15	8	tif -> tif_clientdata
FIELD	76:15	76:20	9	tif -> tif_clientdata
LEAF_NODE	76:15	76:15	10	tif
LEAF_NODE	76:18	76:18	10	->
LEAF_NODE	76:20	76:20	10	tif_clientdata
LEAF_NODE	76:34	76:34	8	,
ARGUMENT	76:36	76:36	8	tif -> tif_name
FIELD	76:36	76:41	9	tif -> tif_name
LEAF_NODE	76:36	76:36	10	tif
LEAF_NODE	76:39	76:39	10	->
LEAF_NODE	76:41	76:41	10	tif_name
LEAF_NODE	76:49	76:49	8	,
ARGUMENT	77:8	77:8	8	"%s %s decoding is not implemented"
FIELD	77:8	77:8	9	"%s %s decoding is not implemented"
LEAF_NODE	77:8	77:8	10	"%s %s decoding is not implemented"
LEAF_NODE	77:43	77:43	8	,
ARGUMENT	78:8	78:8	8	c -> name
FIELD	78:8	78:11	9	c -> name
LEAF_NODE	78:8	78:8	10	c
LEAF_NODE	78:9	78:9	10	->
LEAF_NODE	78:11	78:11	10	name
LEAF_NODE	78:15	78:15	8	,
ARGUMENT	78:17	78:17	8	method
FIELD	78:17	78:17	9	method
LEAF_NODE	78:17	78:17	10	method
LEAF_NODE	78:23	78:23	8	)
LEAF_NODE	78:24	78:24	6	;
SELECTION	79:1	80:2	3	
KEYWORD	79:1	79:1	4	else
LEAF_NODE	79:1	79:1	5	else
STATEMENTS	80:2	80:2	4	
EXPR_STATEMENT	80:2	82:44	5	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Compression scheme %u %s decoding is not implemented" , tif -> tif_dir . td_compression , method ) ;
EXPR	80:2	80:2	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Compression scheme %u %s decoding is not implemented" , tif -> tif_dir . td_compression , method )
FUNCTION_CALL	80:2	82:43	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Compression scheme %u %s decoding is not implemented" , tif -> tif_dir . td_compression , method )
CALLEE	80:2	80:2	8	TIFFErrorExt
LEAF_NODE	80:2	80:2	9	TIFFErrorExt
LEAF_NODE	80:14	80:14	8	(
ARGUMENT	80:15	80:15	8	tif -> tif_clientdata
FIELD	80:15	80:20	9	tif -> tif_clientdata
LEAF_NODE	80:15	80:15	10	tif
LEAF_NODE	80:18	80:18	10	->
LEAF_NODE	80:20	80:20	10	tif_clientdata
LEAF_NODE	80:34	80:34	8	,
ARGUMENT	80:36	80:36	8	tif -> tif_name
FIELD	80:36	80:41	9	tif -> tif_name
LEAF_NODE	80:36	80:36	10	tif
LEAF_NODE	80:39	80:39	10	->
LEAF_NODE	80:41	80:41	10	tif_name
LEAF_NODE	80:49	80:49	8	,
ARGUMENT	81:8	81:8	8	"Compression scheme %u %s decoding is not implemented"
FIELD	81:8	81:8	9	"Compression scheme %u %s decoding is not implemented"
LEAF_NODE	81:8	81:8	10	"Compression scheme %u %s decoding is not implemented"
LEAF_NODE	81:62	81:62	8	,
ARGUMENT	82:8	82:8	8	tif -> tif_dir . td_compression
FIELD	82:8	82:21	9	tif -> tif_dir . td_compression
LEAF_NODE	82:8	82:8	10	tif
LEAF_NODE	82:11	82:11	10	->
LEAF_NODE	82:13	82:13	10	tif_dir
LEAF_NODE	82:20	82:20	10	.
LEAF_NODE	82:21	82:21	10	td_compression
LEAF_NODE	82:35	82:35	8	,
ARGUMENT	82:37	82:37	8	method
FIELD	82:37	82:37	9	method
LEAF_NODE	82:37	82:37	10	method
LEAF_NODE	82:43	82:43	8	)
LEAF_NODE	82:44	82:44	6	;
JUMP_STATEMENT	83:1	83:11	3	return ( 0 ) ;
KEYWORD	83:1	83:1	4	return
LEAF_NODE	83:1	83:1	5	return
DESTINATION	83:8	83:8	4	( 0 )
EXPR	83:8	83:10	5	( 0 )
LEAF_NODE	83:8	83:8	6	(
FIELD	83:9	83:9	6	0
LEAF_NODE	83:9	83:9	7	0
LEAF_NODE	83:10	83:10	6	)
LEAF_NODE	83:11	83:11	4	;
LEAF_NODE	84:0	84:0	2	}
FUNCTION_DEF	86:0	91:0	1	
RETURN_TYPE	86:0	86:7	2	static int
LEAF_NODE	86:0	86:0	3	static
TYPE_NAME	86:7	86:7	3	int
LEAF_NODE	86:7	86:7	4	int
FUNCTION_NAME	87:0	87:0	2	_TIFFNoFixupTags
LEAF_NODE	87:0	87:0	3	_TIFFNoFixupTags
PARAMETER_LIST	87:16	87:26	2	( TIFF * tif )
LEAF_NODE	87:16	87:16	3	(
PARAMETER_DECL	87:17	87:23	3	TIFF * tif
TYPE	87:17	87:21	4	TIFF *
TYPE_NAME	87:17	87:17	5	TIFF
LEAF_NODE	87:17	87:17	6	TIFF
POINTER	87:21	87:21	5	*
LEAF_NODE	87:21	87:21	6	*
NAME	87:23	87:23	4	tif
LEAF_NODE	87:23	87:23	5	tif
LEAF_NODE	87:26	87:26	3	)
LEAF_NODE	88:0	88:0	2	{
STATEMENTS	89:1	90:1	2	
EXPR_STATEMENT	89:1	89:11	3	( void ) tif ;
EXPR	89:1	89:8	4	( void ) tif
LEAF_NODE	89:1	89:1	5	(
TYPE_NAME	89:2	89:2	5	void
LEAF_NODE	89:2	89:2	6	void
LEAF_NODE	89:6	89:6	5	)
FIELD	89:8	89:8	5	tif
LEAF_NODE	89:8	89:8	6	tif
LEAF_NODE	89:11	89:11	4	;
JUMP_STATEMENT	90:1	90:11	3	return ( 1 ) ;
KEYWORD	90:1	90:1	4	return
LEAF_NODE	90:1	90:1	5	return
DESTINATION	90:8	90:8	4	( 1 )
EXPR	90:8	90:10	5	( 1 )
LEAF_NODE	90:8	90:8	6	(
FIELD	90:9	90:9	6	1
LEAF_NODE	90:9	90:9	7	1
LEAF_NODE	90:10	90:10	6	)
LEAF_NODE	90:11	90:11	4	;
LEAF_NODE	91:0	91:0	2	}
FUNCTION_DEF	93:0	98:0	1	
RETURN_TYPE	93:0	93:0	2	int
TYPE_NAME	93:0	93:0	3	int
LEAF_NODE	93:0	93:0	4	int
FUNCTION_NAME	94:0	94:0	2	_TIFFNoRowDecode
LEAF_NODE	94:0	94:0	3	_TIFFNoRowDecode
PARAMETER_LIST	94:16	94:60	2	( TIFF * tif , uint8 * pp , tmsize_t cc , uint16 s )
LEAF_NODE	94:16	94:16	3	(
PARAMETER_DECL	94:17	94:23	3	TIFF * tif
TYPE	94:17	94:21	4	TIFF *
TYPE_NAME	94:17	94:17	5	TIFF
LEAF_NODE	94:17	94:17	6	TIFF
POINTER	94:21	94:21	5	*
LEAF_NODE	94:21	94:21	6	*
NAME	94:23	94:23	4	tif
LEAF_NODE	94:23	94:23	5	tif
LEAF_NODE	94:26	94:26	3	,
PARAMETER_DECL	94:28	94:35	3	uint8 * pp
TYPE	94:28	94:33	4	uint8 *
TYPE_NAME	94:28	94:28	5	uint8
LEAF_NODE	94:28	94:28	6	uint8
POINTER	94:33	94:33	5	*
LEAF_NODE	94:33	94:33	6	*
NAME	94:35	94:35	4	pp
LEAF_NODE	94:35	94:35	5	pp
LEAF_NODE	94:37	94:37	3	,
PARAMETER_DECL	94:39	94:48	3	tmsize_t cc
TYPE	94:39	94:39	4	tmsize_t
TYPE_NAME	94:39	94:39	5	tmsize_t
LEAF_NODE	94:39	94:39	6	tmsize_t
NAME	94:48	94:48	4	cc
LEAF_NODE	94:48	94:48	5	cc
LEAF_NODE	94:50	94:50	3	,
PARAMETER_DECL	94:52	94:59	3	uint16 s
TYPE	94:52	94:52	4	uint16
TYPE_NAME	94:52	94:52	5	uint16
LEAF_NODE	94:52	94:52	6	uint16
NAME	94:59	94:59	4	s
LEAF_NODE	94:59	94:59	5	s
LEAF_NODE	94:60	94:60	3	)
LEAF_NODE	95:0	95:0	2	{
STATEMENTS	96:1	97:1	2	
EXPR_STATEMENT	96:1	96:10	3	( void ) pp ;
EXPR	96:1	96:8	4	( void ) pp
LEAF_NODE	96:1	96:1	5	(
TYPE_NAME	96:2	96:2	5	void
LEAF_NODE	96:2	96:2	6	void
LEAF_NODE	96:6	96:6	5	)
FIELD	96:8	96:8	5	pp
LEAF_NODE	96:8	96:8	6	pp
LEAF_NODE	96:10	96:10	4	;
EXPR_STATEMENT	96:12	96:21	3	( void ) cc ;
EXPR	96:12	96:19	4	( void ) cc
LEAF_NODE	96:12	96:12	5	(
TYPE_NAME	96:13	96:13	5	void
LEAF_NODE	96:13	96:13	6	void
LEAF_NODE	96:17	96:17	5	)
FIELD	96:19	96:19	5	cc
LEAF_NODE	96:19	96:19	6	cc
LEAF_NODE	96:21	96:21	4	;
EXPR_STATEMENT	96:23	96:31	3	( void ) s ;
EXPR	96:23	96:30	4	( void ) s
LEAF_NODE	96:23	96:23	5	(
TYPE_NAME	96:24	96:24	5	void
LEAF_NODE	96:24	96:24	6	void
LEAF_NODE	96:28	96:28	5	)
FIELD	96:30	96:30	5	s
LEAF_NODE	96:30	96:30	6	s
LEAF_NODE	96:31	96:31	4	;
JUMP_STATEMENT	97:1	97:39	3	return ( TIFFNoDecode ( tif , "scanline" ) ) ;
KEYWORD	97:1	97:1	4	return
LEAF_NODE	97:1	97:1	5	return
DESTINATION	97:8	97:8	4	( TIFFNoDecode ( tif , "scanline" ) )
EXPR	97:8	97:38	5	( TIFFNoDecode ( tif , "scanline" ) )
LEAF_NODE	97:8	97:8	6	(
FUNCTION_CALL	97:9	97:37	6	TIFFNoDecode ( tif , "scanline" )
CALLEE	97:9	97:9	7	TIFFNoDecode
LEAF_NODE	97:9	97:9	8	TIFFNoDecode
LEAF_NODE	97:21	97:21	7	(
ARGUMENT	97:22	97:22	7	tif
FIELD	97:22	97:22	8	tif
LEAF_NODE	97:22	97:22	9	tif
LEAF_NODE	97:25	97:25	7	,
ARGUMENT	97:27	97:27	7	"scanline"
FIELD	97:27	97:27	8	"scanline"
LEAF_NODE	97:27	97:27	9	"scanline"
LEAF_NODE	97:37	97:37	7	)
LEAF_NODE	97:38	97:38	6	)
LEAF_NODE	97:39	97:39	4	;
LEAF_NODE	98:0	98:0	2	}
FUNCTION_DEF	100:0	105:0	1	
RETURN_TYPE	100:0	100:0	2	int
TYPE_NAME	100:0	100:0	3	int
LEAF_NODE	100:0	100:0	4	int
FUNCTION_NAME	101:0	101:0	2	_TIFFNoStripDecode
LEAF_NODE	101:0	101:0	3	_TIFFNoStripDecode
PARAMETER_LIST	101:18	101:62	2	( TIFF * tif , uint8 * pp , tmsize_t cc , uint16 s )
LEAF_NODE	101:18	101:18	3	(
PARAMETER_DECL	101:19	101:25	3	TIFF * tif
TYPE	101:19	101:23	4	TIFF *
TYPE_NAME	101:19	101:19	5	TIFF
LEAF_NODE	101:19	101:19	6	TIFF
POINTER	101:23	101:23	5	*
LEAF_NODE	101:23	101:23	6	*
NAME	101:25	101:25	4	tif
LEAF_NODE	101:25	101:25	5	tif
LEAF_NODE	101:28	101:28	3	,
PARAMETER_DECL	101:30	101:37	3	uint8 * pp
TYPE	101:30	101:35	4	uint8 *
TYPE_NAME	101:30	101:30	5	uint8
LEAF_NODE	101:30	101:30	6	uint8
POINTER	101:35	101:35	5	*
LEAF_NODE	101:35	101:35	6	*
NAME	101:37	101:37	4	pp
LEAF_NODE	101:37	101:37	5	pp
LEAF_NODE	101:39	101:39	3	,
PARAMETER_DECL	101:41	101:50	3	tmsize_t cc
TYPE	101:41	101:41	4	tmsize_t
TYPE_NAME	101:41	101:41	5	tmsize_t
LEAF_NODE	101:41	101:41	6	tmsize_t
NAME	101:50	101:50	4	cc
LEAF_NODE	101:50	101:50	5	cc
LEAF_NODE	101:52	101:52	3	,
PARAMETER_DECL	101:54	101:61	3	uint16 s
TYPE	101:54	101:54	4	uint16
TYPE_NAME	101:54	101:54	5	uint16
LEAF_NODE	101:54	101:54	6	uint16
NAME	101:61	101:61	4	s
LEAF_NODE	101:61	101:61	5	s
LEAF_NODE	101:62	101:62	3	)
LEAF_NODE	102:0	102:0	2	{
STATEMENTS	103:1	104:1	2	
EXPR_STATEMENT	103:1	103:10	3	( void ) pp ;
EXPR	103:1	103:8	4	( void ) pp
LEAF_NODE	103:1	103:1	5	(
TYPE_NAME	103:2	103:2	5	void
LEAF_NODE	103:2	103:2	6	void
LEAF_NODE	103:6	103:6	5	)
FIELD	103:8	103:8	5	pp
LEAF_NODE	103:8	103:8	6	pp
LEAF_NODE	103:10	103:10	4	;
EXPR_STATEMENT	103:12	103:21	3	( void ) cc ;
EXPR	103:12	103:19	4	( void ) cc
LEAF_NODE	103:12	103:12	5	(
TYPE_NAME	103:13	103:13	5	void
LEAF_NODE	103:13	103:13	6	void
LEAF_NODE	103:17	103:17	5	)
FIELD	103:19	103:19	5	cc
LEAF_NODE	103:19	103:19	6	cc
LEAF_NODE	103:21	103:21	4	;
EXPR_STATEMENT	103:23	103:31	3	( void ) s ;
EXPR	103:23	103:30	4	( void ) s
LEAF_NODE	103:23	103:23	5	(
TYPE_NAME	103:24	103:24	5	void
LEAF_NODE	103:24	103:24	6	void
LEAF_NODE	103:28	103:28	5	)
FIELD	103:30	103:30	5	s
LEAF_NODE	103:30	103:30	6	s
LEAF_NODE	103:31	103:31	4	;
JUMP_STATEMENT	104:1	104:36	3	return ( TIFFNoDecode ( tif , "strip" ) ) ;
KEYWORD	104:1	104:1	4	return
LEAF_NODE	104:1	104:1	5	return
DESTINATION	104:8	104:8	4	( TIFFNoDecode ( tif , "strip" ) )
EXPR	104:8	104:35	5	( TIFFNoDecode ( tif , "strip" ) )
LEAF_NODE	104:8	104:8	6	(
FUNCTION_CALL	104:9	104:34	6	TIFFNoDecode ( tif , "strip" )
CALLEE	104:9	104:9	7	TIFFNoDecode
LEAF_NODE	104:9	104:9	8	TIFFNoDecode
LEAF_NODE	104:21	104:21	7	(
ARGUMENT	104:22	104:22	7	tif
FIELD	104:22	104:22	8	tif
LEAF_NODE	104:22	104:22	9	tif
LEAF_NODE	104:25	104:25	7	,
ARGUMENT	104:27	104:27	7	"strip"
FIELD	104:27	104:27	8	"strip"
LEAF_NODE	104:27	104:27	9	"strip"
LEAF_NODE	104:34	104:34	7	)
LEAF_NODE	104:35	104:35	6	)
LEAF_NODE	104:36	104:36	4	;
LEAF_NODE	105:0	105:0	2	}
FUNCTION_DEF	107:0	112:0	1	
RETURN_TYPE	107:0	107:0	2	int
TYPE_NAME	107:0	107:0	3	int
LEAF_NODE	107:0	107:0	4	int
FUNCTION_NAME	108:0	108:0	2	_TIFFNoTileDecode
LEAF_NODE	108:0	108:0	3	_TIFFNoTileDecode
PARAMETER_LIST	108:17	108:61	2	( TIFF * tif , uint8 * pp , tmsize_t cc , uint16 s )
LEAF_NODE	108:17	108:17	3	(
PARAMETER_DECL	108:18	108:24	3	TIFF * tif
TYPE	108:18	108:22	4	TIFF *
TYPE_NAME	108:18	108:18	5	TIFF
LEAF_NODE	108:18	108:18	6	TIFF
POINTER	108:22	108:22	5	*
LEAF_NODE	108:22	108:22	6	*
NAME	108:24	108:24	4	tif
LEAF_NODE	108:24	108:24	5	tif
LEAF_NODE	108:27	108:27	3	,
PARAMETER_DECL	108:29	108:36	3	uint8 * pp
TYPE	108:29	108:34	4	uint8 *
TYPE_NAME	108:29	108:29	5	uint8
LEAF_NODE	108:29	108:29	6	uint8
POINTER	108:34	108:34	5	*
LEAF_NODE	108:34	108:34	6	*
NAME	108:36	108:36	4	pp
LEAF_NODE	108:36	108:36	5	pp
LEAF_NODE	108:38	108:38	3	,
PARAMETER_DECL	108:40	108:49	3	tmsize_t cc
TYPE	108:40	108:40	4	tmsize_t
TYPE_NAME	108:40	108:40	5	tmsize_t
LEAF_NODE	108:40	108:40	6	tmsize_t
NAME	108:49	108:49	4	cc
LEAF_NODE	108:49	108:49	5	cc
LEAF_NODE	108:51	108:51	3	,
PARAMETER_DECL	108:53	108:60	3	uint16 s
TYPE	108:53	108:53	4	uint16
TYPE_NAME	108:53	108:53	5	uint16
LEAF_NODE	108:53	108:53	6	uint16
NAME	108:60	108:60	4	s
LEAF_NODE	108:60	108:60	5	s
LEAF_NODE	108:61	108:61	3	)
LEAF_NODE	109:0	109:0	2	{
STATEMENTS	110:1	111:1	2	
EXPR_STATEMENT	110:1	110:10	3	( void ) pp ;
EXPR	110:1	110:8	4	( void ) pp
LEAF_NODE	110:1	110:1	5	(
TYPE_NAME	110:2	110:2	5	void
LEAF_NODE	110:2	110:2	6	void
LEAF_NODE	110:6	110:6	5	)
FIELD	110:8	110:8	5	pp
LEAF_NODE	110:8	110:8	6	pp
LEAF_NODE	110:10	110:10	4	;
EXPR_STATEMENT	110:12	110:21	3	( void ) cc ;
EXPR	110:12	110:19	4	( void ) cc
LEAF_NODE	110:12	110:12	5	(
TYPE_NAME	110:13	110:13	5	void
LEAF_NODE	110:13	110:13	6	void
LEAF_NODE	110:17	110:17	5	)
FIELD	110:19	110:19	5	cc
LEAF_NODE	110:19	110:19	6	cc
LEAF_NODE	110:21	110:21	4	;
EXPR_STATEMENT	110:23	110:31	3	( void ) s ;
EXPR	110:23	110:30	4	( void ) s
LEAF_NODE	110:23	110:23	5	(
TYPE_NAME	110:24	110:24	5	void
LEAF_NODE	110:24	110:24	6	void
LEAF_NODE	110:28	110:28	5	)
FIELD	110:30	110:30	5	s
LEAF_NODE	110:30	110:30	6	s
LEAF_NODE	110:31	110:31	4	;
JUMP_STATEMENT	111:1	111:35	3	return ( TIFFNoDecode ( tif , "tile" ) ) ;
KEYWORD	111:1	111:1	4	return
LEAF_NODE	111:1	111:1	5	return
DESTINATION	111:8	111:8	4	( TIFFNoDecode ( tif , "tile" ) )
EXPR	111:8	111:34	5	( TIFFNoDecode ( tif , "tile" ) )
LEAF_NODE	111:8	111:8	6	(
FUNCTION_CALL	111:9	111:33	6	TIFFNoDecode ( tif , "tile" )
CALLEE	111:9	111:9	7	TIFFNoDecode
LEAF_NODE	111:9	111:9	8	TIFFNoDecode
LEAF_NODE	111:21	111:21	7	(
ARGUMENT	111:22	111:22	7	tif
FIELD	111:22	111:22	8	tif
LEAF_NODE	111:22	111:22	9	tif
LEAF_NODE	111:25	111:25	7	,
ARGUMENT	111:27	111:27	7	"tile"
FIELD	111:27	111:27	8	"tile"
LEAF_NODE	111:27	111:27	9	"tile"
LEAF_NODE	111:33	111:33	7	)
LEAF_NODE	111:34	111:34	6	)
LEAF_NODE	111:35	111:35	4	;
LEAF_NODE	112:0	112:0	2	}
FUNCTION_DEF	114:0	121:0	1	
RETURN_TYPE	114:0	114:0	2	int
TYPE_NAME	114:0	114:0	3	int
LEAF_NODE	114:0	114:0	4	int
FUNCTION_NAME	115:0	115:0	2	_TIFFNoSeek
LEAF_NODE	115:0	115:0	3	_TIFFNoSeek
PARAMETER_LIST	115:11	115:33	2	( TIFF * tif , uint32 off )
LEAF_NODE	115:11	115:11	3	(
PARAMETER_DECL	115:12	115:18	3	TIFF * tif
TYPE	115:12	115:16	4	TIFF *
TYPE_NAME	115:12	115:12	5	TIFF
LEAF_NODE	115:12	115:12	6	TIFF
POINTER	115:16	115:16	5	*
LEAF_NODE	115:16	115:16	6	*
NAME	115:18	115:18	4	tif
LEAF_NODE	115:18	115:18	5	tif
LEAF_NODE	115:21	115:21	3	,
PARAMETER_DECL	115:23	115:30	3	uint32 off
TYPE	115:23	115:23	4	uint32
TYPE_NAME	115:23	115:23	5	uint32
LEAF_NODE	115:23	115:23	6	uint32
NAME	115:30	115:30	4	off
LEAF_NODE	115:30	115:30	5	off
LEAF_NODE	115:33	115:33	3	)
LEAF_NODE	116:0	116:0	2	{
STATEMENTS	117:1	120:1	2	
EXPR_STATEMENT	117:1	117:11	3	( void ) off ;
EXPR	117:1	117:8	4	( void ) off
LEAF_NODE	117:1	117:1	5	(
TYPE_NAME	117:2	117:2	5	void
LEAF_NODE	117:2	117:2	6	void
LEAF_NODE	117:6	117:6	5	)
FIELD	117:8	117:8	5	off
LEAF_NODE	117:8	117:8	6	off
LEAF_NODE	117:11	117:11	4	;
EXPR_STATEMENT	118:1	119:62	3	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Compression algorithm does not support random access" ) ;
EXPR	118:1	118:1	4	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Compression algorithm does not support random access" )
FUNCTION_CALL	118:1	119:61	5	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Compression algorithm does not support random access" )
CALLEE	118:1	118:1	6	TIFFErrorExt
LEAF_NODE	118:1	118:1	7	TIFFErrorExt
LEAF_NODE	118:13	118:13	6	(
ARGUMENT	118:14	118:14	6	tif -> tif_clientdata
FIELD	118:14	118:19	7	tif -> tif_clientdata
LEAF_NODE	118:14	118:14	8	tif
LEAF_NODE	118:17	118:17	8	->
LEAF_NODE	118:19	118:19	8	tif_clientdata
LEAF_NODE	118:33	118:33	6	,
ARGUMENT	118:35	118:35	6	tif -> tif_name
FIELD	118:35	118:40	7	tif -> tif_name
LEAF_NODE	118:35	118:35	8	tif
LEAF_NODE	118:38	118:38	8	->
LEAF_NODE	118:40	118:40	8	tif_name
LEAF_NODE	118:48	118:48	6	,
ARGUMENT	119:7	119:7	6	"Compression algorithm does not support random access"
FIELD	119:7	119:7	7	"Compression algorithm does not support random access"
LEAF_NODE	119:7	119:7	8	"Compression algorithm does not support random access"
LEAF_NODE	119:61	119:61	6	)
LEAF_NODE	119:62	119:62	4	;
JUMP_STATEMENT	120:1	120:11	3	return ( 0 ) ;
KEYWORD	120:1	120:1	4	return
LEAF_NODE	120:1	120:1	5	return
DESTINATION	120:8	120:8	4	( 0 )
EXPR	120:8	120:10	5	( 0 )
LEAF_NODE	120:8	120:8	6	(
FIELD	120:9	120:9	6	0
LEAF_NODE	120:9	120:9	7	0
LEAF_NODE	120:10	120:10	6	)
LEAF_NODE	120:11	120:11	4	;
LEAF_NODE	121:0	121:0	2	}
FUNCTION_DEF	123:0	128:0	1	
RETURN_TYPE	123:0	123:0	2	int
TYPE_NAME	123:0	123:0	3	int
LEAF_NODE	123:0	123:0	4	int
FUNCTION_NAME	124:0	124:0	2	_TIFFNoPreCode
LEAF_NODE	124:0	124:0	3	_TIFFNoPreCode
PARAMETER_LIST	124:14	124:34	2	( TIFF * tif , uint16 s )
LEAF_NODE	124:14	124:14	3	(
PARAMETER_DECL	124:15	124:21	3	TIFF * tif
TYPE	124:15	124:19	4	TIFF *
TYPE_NAME	124:15	124:15	5	TIFF
LEAF_NODE	124:15	124:15	6	TIFF
POINTER	124:19	124:19	5	*
LEAF_NODE	124:19	124:19	6	*
NAME	124:21	124:21	4	tif
LEAF_NODE	124:21	124:21	5	tif
LEAF_NODE	124:24	124:24	3	,
PARAMETER_DECL	124:26	124:33	3	uint16 s
TYPE	124:26	124:26	4	uint16
TYPE_NAME	124:26	124:26	5	uint16
LEAF_NODE	124:26	124:26	6	uint16
NAME	124:33	124:33	4	s
LEAF_NODE	124:33	124:33	5	s
LEAF_NODE	124:34	124:34	3	)
LEAF_NODE	125:0	125:0	2	{
STATEMENTS	126:1	127:1	2	
EXPR_STATEMENT	126:1	126:11	3	( void ) tif ;
EXPR	126:1	126:8	4	( void ) tif
LEAF_NODE	126:1	126:1	5	(
TYPE_NAME	126:2	126:2	5	void
LEAF_NODE	126:2	126:2	6	void
LEAF_NODE	126:6	126:6	5	)
FIELD	126:8	126:8	5	tif
LEAF_NODE	126:8	126:8	6	tif
LEAF_NODE	126:11	126:11	4	;
EXPR_STATEMENT	126:13	126:21	3	( void ) s ;
EXPR	126:13	126:20	4	( void ) s
LEAF_NODE	126:13	126:13	5	(
TYPE_NAME	126:14	126:14	5	void
LEAF_NODE	126:14	126:14	6	void
LEAF_NODE	126:18	126:18	5	)
FIELD	126:20	126:20	5	s
LEAF_NODE	126:20	126:20	6	s
LEAF_NODE	126:21	126:21	4	;
JUMP_STATEMENT	127:1	127:11	3	return ( 1 ) ;
KEYWORD	127:1	127:1	4	return
LEAF_NODE	127:1	127:1	5	return
DESTINATION	127:8	127:8	4	( 1 )
EXPR	127:8	127:10	5	( 1 )
LEAF_NODE	127:8	127:8	6	(
FIELD	127:9	127:9	6	1
LEAF_NODE	127:9	127:9	7	1
LEAF_NODE	127:10	127:10	6	)
LEAF_NODE	127:11	127:11	4	;
LEAF_NODE	128:0	128:0	2	}
FUNCTION_DEF	130:0	130:58	1	
RETURN_TYPE	130:0	130:7	2	static int
LEAF_NODE	130:0	130:0	3	static
TYPE_NAME	130:7	130:7	3	int
LEAF_NODE	130:7	130:7	4	int
FUNCTION_NAME	130:11	130:11	2	_TIFFtrue
LEAF_NODE	130:11	130:11	3	_TIFFtrue
PARAMETER_LIST	130:20	130:30	2	( TIFF * tif )
LEAF_NODE	130:20	130:20	3	(
PARAMETER_DECL	130:21	130:27	3	TIFF * tif
TYPE	130:21	130:25	4	TIFF *
TYPE_NAME	130:21	130:21	5	TIFF
LEAF_NODE	130:21	130:21	6	TIFF
POINTER	130:25	130:25	5	*
LEAF_NODE	130:25	130:25	6	*
NAME	130:27	130:27	4	tif
LEAF_NODE	130:27	130:27	5	tif
LEAF_NODE	130:30	130:30	3	)
LEAF_NODE	130:32	130:32	2	{
STATEMENTS	130:34	130:46	2	
EXPR_STATEMENT	130:34	130:44	3	( void ) tif ;
EXPR	130:34	130:41	4	( void ) tif
LEAF_NODE	130:34	130:34	5	(
TYPE_NAME	130:35	130:35	5	void
LEAF_NODE	130:35	130:35	6	void
LEAF_NODE	130:39	130:39	5	)
FIELD	130:41	130:41	5	tif
LEAF_NODE	130:41	130:41	6	tif
LEAF_NODE	130:44	130:44	4	;
JUMP_STATEMENT	130:46	130:56	3	return ( 1 ) ;
KEYWORD	130:46	130:46	4	return
LEAF_NODE	130:46	130:46	5	return
DESTINATION	130:53	130:53	4	( 1 )
EXPR	130:53	130:55	5	( 1 )
LEAF_NODE	130:53	130:53	6	(
FIELD	130:54	130:54	6	1
LEAF_NODE	130:54	130:54	7	1
LEAF_NODE	130:55	130:55	6	)
LEAF_NODE	130:56	130:56	4	;
LEAF_NODE	130:58	130:58	2	}
FUNCTION_DEF	131:0	131:47	1	
RETURN_TYPE	131:0	131:7	2	static void
LEAF_NODE	131:0	131:0	3	static
TYPE_NAME	131:7	131:7	3	void
LEAF_NODE	131:7	131:7	4	void
FUNCTION_NAME	131:12	131:12	2	_TIFFvoid
LEAF_NODE	131:12	131:12	3	_TIFFvoid
PARAMETER_LIST	131:21	131:31	2	( TIFF * tif )
LEAF_NODE	131:21	131:21	3	(
PARAMETER_DECL	131:22	131:28	3	TIFF * tif
TYPE	131:22	131:26	4	TIFF *
TYPE_NAME	131:22	131:22	5	TIFF
LEAF_NODE	131:22	131:22	6	TIFF
POINTER	131:26	131:26	5	*
LEAF_NODE	131:26	131:26	6	*
NAME	131:28	131:28	4	tif
LEAF_NODE	131:28	131:28	5	tif
LEAF_NODE	131:31	131:31	3	)
LEAF_NODE	131:33	131:33	2	{
STATEMENTS	131:35	131:35	2	
EXPR_STATEMENT	131:35	131:45	3	( void ) tif ;
EXPR	131:35	131:42	4	( void ) tif
LEAF_NODE	131:35	131:35	5	(
TYPE_NAME	131:36	131:36	5	void
LEAF_NODE	131:36	131:36	6	void
LEAF_NODE	131:40	131:40	5	)
FIELD	131:42	131:42	5	tif
LEAF_NODE	131:42	131:42	6	tif
LEAF_NODE	131:45	131:45	4	;
LEAF_NODE	131:47	131:47	2	}
FUNCTION_DEF	133:0	156:0	1	
RETURN_TYPE	133:0	133:0	2	void
TYPE_NAME	133:0	133:0	3	void
LEAF_NODE	133:0	133:0	4	void
FUNCTION_NAME	134:0	134:0	2	_TIFFSetDefaultCompressionState
LEAF_NODE	134:0	134:0	3	_TIFFSetDefaultCompressionState
PARAMETER_LIST	134:31	134:41	2	( TIFF * tif )
LEAF_NODE	134:31	134:31	3	(
PARAMETER_DECL	134:32	134:38	3	TIFF * tif
TYPE	134:32	134:36	4	TIFF *
TYPE_NAME	134:32	134:32	5	TIFF
LEAF_NODE	134:32	134:32	6	TIFF
POINTER	134:36	134:36	5	*
LEAF_NODE	134:36	134:36	6	*
NAME	134:38	134:38	4	tif
LEAF_NODE	134:38	134:38	5	tif
LEAF_NODE	134:41	134:41	3	)
LEAF_NODE	135:0	135:0	2	{
STATEMENTS	136:1	155:1	2	
EXPR_STATEMENT	136:1	136:38	3	tif -> tif_fixuptags = _TIFFNoFixupTags ;
EXPR	136:1	136:1	4	tif -> tif_fixuptags = _TIFFNoFixupTags
ASSIGN	136:1	136:22	5	tif -> tif_fixuptags = _TIFFNoFixupTags
LVAL	136:1	136:1	6	tif -> tif_fixuptags
FIELD	136:1	136:6	7	tif -> tif_fixuptags
LEAF_NODE	136:1	136:1	8	tif
LEAF_NODE	136:4	136:4	8	->
LEAF_NODE	136:6	136:6	8	tif_fixuptags
ASSIGN_OP	136:20	136:20	6	=
LEAF_NODE	136:20	136:20	7	=
RVAL	136:22	136:22	6	_TIFFNoFixupTags
FIELD	136:22	136:22	7	_TIFFNoFixupTags
LEAF_NODE	136:22	136:22	8	_TIFFNoFixupTags
LEAF_NODE	136:38	136:38	4	;
EXPR_STATEMENT	137:1	137:29	3	tif -> tif_decodestatus = TRUE ;
EXPR	137:1	137:1	4	tif -> tif_decodestatus = TRUE
ASSIGN	137:1	137:25	5	tif -> tif_decodestatus = TRUE
LVAL	137:1	137:1	6	tif -> tif_decodestatus
FIELD	137:1	137:6	7	tif -> tif_decodestatus
LEAF_NODE	137:1	137:1	8	tif
LEAF_NODE	137:4	137:4	8	->
LEAF_NODE	137:6	137:6	8	tif_decodestatus
ASSIGN_OP	137:23	137:23	6	=
LEAF_NODE	137:23	137:23	7	=
RVAL	137:25	137:25	6	TRUE
FIELD	137:25	137:25	7	TRUE
LEAF_NODE	137:25	137:25	8	TRUE
LEAF_NODE	137:29	137:29	4	;
EXPR_STATEMENT	138:1	138:33	3	tif -> tif_setupdecode = _TIFFtrue ;
EXPR	138:1	138:1	4	tif -> tif_setupdecode = _TIFFtrue
ASSIGN	138:1	138:24	5	tif -> tif_setupdecode = _TIFFtrue
LVAL	138:1	138:1	6	tif -> tif_setupdecode
FIELD	138:1	138:6	7	tif -> tif_setupdecode
LEAF_NODE	138:1	138:1	8	tif
LEAF_NODE	138:4	138:4	8	->
LEAF_NODE	138:6	138:6	8	tif_setupdecode
ASSIGN_OP	138:22	138:22	6	=
LEAF_NODE	138:22	138:22	7	=
RVAL	138:24	138:24	6	_TIFFtrue
FIELD	138:24	138:24	7	_TIFFtrue
LEAF_NODE	138:24	138:24	8	_TIFFtrue
LEAF_NODE	138:33	138:33	4	;
EXPR_STATEMENT	139:1	139:36	3	tif -> tif_predecode = _TIFFNoPreCode ;
EXPR	139:1	139:1	4	tif -> tif_predecode = _TIFFNoPreCode
ASSIGN	139:1	139:22	5	tif -> tif_predecode = _TIFFNoPreCode
LVAL	139:1	139:1	6	tif -> tif_predecode
FIELD	139:1	139:6	7	tif -> tif_predecode
LEAF_NODE	139:1	139:1	8	tif
LEAF_NODE	139:4	139:4	8	->
LEAF_NODE	139:6	139:6	8	tif_predecode
ASSIGN_OP	139:20	139:20	6	=
LEAF_NODE	139:20	139:20	7	=
RVAL	139:22	139:22	6	_TIFFNoPreCode
FIELD	139:22	139:22	7	_TIFFNoPreCode
LEAF_NODE	139:22	139:22	8	_TIFFNoPreCode
LEAF_NODE	139:36	139:36	4	;
EXPR_STATEMENT	140:1	140:38	3	tif -> tif_decoderow = _TIFFNoRowDecode ;
EXPR	140:1	140:1	4	tif -> tif_decoderow = _TIFFNoRowDecode
ASSIGN	140:1	140:22	5	tif -> tif_decoderow = _TIFFNoRowDecode
LVAL	140:1	140:1	6	tif -> tif_decoderow
FIELD	140:1	140:6	7	tif -> tif_decoderow
LEAF_NODE	140:1	140:1	8	tif
LEAF_NODE	140:4	140:4	8	->
LEAF_NODE	140:6	140:6	8	tif_decoderow
ASSIGN_OP	140:20	140:20	6	=
LEAF_NODE	140:20	140:20	7	=
RVAL	140:22	140:22	6	_TIFFNoRowDecode
FIELD	140:22	140:22	7	_TIFFNoRowDecode
LEAF_NODE	140:22	140:22	8	_TIFFNoRowDecode
LEAF_NODE	140:38	140:38	4	;
EXPR_STATEMENT	141:1	141:42	3	tif -> tif_decodestrip = _TIFFNoStripDecode ;
EXPR	141:1	141:1	4	tif -> tif_decodestrip = _TIFFNoStripDecode
ASSIGN	141:1	141:24	5	tif -> tif_decodestrip = _TIFFNoStripDecode
LVAL	141:1	141:1	6	tif -> tif_decodestrip
FIELD	141:1	141:6	7	tif -> tif_decodestrip
LEAF_NODE	141:1	141:1	8	tif
LEAF_NODE	141:4	141:4	8	->
LEAF_NODE	141:6	141:6	8	tif_decodestrip
ASSIGN_OP	141:22	141:22	6	=
LEAF_NODE	141:22	141:22	7	=
RVAL	141:24	141:24	6	_TIFFNoStripDecode
FIELD	141:24	141:24	7	_TIFFNoStripDecode
LEAF_NODE	141:24	141:24	8	_TIFFNoStripDecode
LEAF_NODE	141:42	141:42	4	;
EXPR_STATEMENT	142:1	142:40	3	tif -> tif_decodetile = _TIFFNoTileDecode ;
EXPR	142:1	142:1	4	tif -> tif_decodetile = _TIFFNoTileDecode
ASSIGN	142:1	142:23	5	tif -> tif_decodetile = _TIFFNoTileDecode
LVAL	142:1	142:1	6	tif -> tif_decodetile
FIELD	142:1	142:6	7	tif -> tif_decodetile
LEAF_NODE	142:1	142:1	8	tif
LEAF_NODE	142:4	142:4	8	->
LEAF_NODE	142:6	142:6	8	tif_decodetile
ASSIGN_OP	142:21	142:21	6	=
LEAF_NODE	142:21	142:21	7	=
RVAL	142:23	142:23	6	_TIFFNoTileDecode
FIELD	142:23	142:23	7	_TIFFNoTileDecode
LEAF_NODE	142:23	142:23	8	_TIFFNoTileDecode
LEAF_NODE	142:40	142:40	4	;
EXPR_STATEMENT	143:1	143:29	3	tif -> tif_encodestatus = TRUE ;
EXPR	143:1	143:1	4	tif -> tif_encodestatus = TRUE
ASSIGN	143:1	143:25	5	tif -> tif_encodestatus = TRUE
LVAL	143:1	143:1	6	tif -> tif_encodestatus
FIELD	143:1	143:6	7	tif -> tif_encodestatus
LEAF_NODE	143:1	143:1	8	tif
LEAF_NODE	143:4	143:4	8	->
LEAF_NODE	143:6	143:6	8	tif_encodestatus
ASSIGN_OP	143:23	143:23	6	=
LEAF_NODE	143:23	143:23	7	=
RVAL	143:25	143:25	6	TRUE
FIELD	143:25	143:25	7	TRUE
LEAF_NODE	143:25	143:25	8	TRUE
LEAF_NODE	143:29	143:29	4	;
EXPR_STATEMENT	144:1	144:33	3	tif -> tif_setupencode = _TIFFtrue ;
EXPR	144:1	144:1	4	tif -> tif_setupencode = _TIFFtrue
ASSIGN	144:1	144:24	5	tif -> tif_setupencode = _TIFFtrue
LVAL	144:1	144:1	6	tif -> tif_setupencode
FIELD	144:1	144:6	7	tif -> tif_setupencode
LEAF_NODE	144:1	144:1	8	tif
LEAF_NODE	144:4	144:4	8	->
LEAF_NODE	144:6	144:6	8	tif_setupencode
ASSIGN_OP	144:22	144:22	6	=
LEAF_NODE	144:22	144:22	7	=
RVAL	144:24	144:24	6	_TIFFtrue
FIELD	144:24	144:24	7	_TIFFtrue
LEAF_NODE	144:24	144:24	8	_TIFFtrue
LEAF_NODE	144:33	144:33	4	;
EXPR_STATEMENT	145:1	145:36	3	tif -> tif_preencode = _TIFFNoPreCode ;
EXPR	145:1	145:1	4	tif -> tif_preencode = _TIFFNoPreCode
ASSIGN	145:1	145:22	5	tif -> tif_preencode = _TIFFNoPreCode
LVAL	145:1	145:1	6	tif -> tif_preencode
FIELD	145:1	145:6	7	tif -> tif_preencode
LEAF_NODE	145:1	145:1	8	tif
LEAF_NODE	145:4	145:4	8	->
LEAF_NODE	145:6	145:6	8	tif_preencode
ASSIGN_OP	145:20	145:20	6	=
LEAF_NODE	145:20	145:20	7	=
RVAL	145:22	145:22	6	_TIFFNoPreCode
FIELD	145:22	145:22	7	_TIFFNoPreCode
LEAF_NODE	145:22	145:22	8	_TIFFNoPreCode
LEAF_NODE	145:36	145:36	4	;
EXPR_STATEMENT	146:1	146:32	3	tif -> tif_postencode = _TIFFtrue ;
EXPR	146:1	146:1	4	tif -> tif_postencode = _TIFFtrue
ASSIGN	146:1	146:23	5	tif -> tif_postencode = _TIFFtrue
LVAL	146:1	146:1	6	tif -> tif_postencode
FIELD	146:1	146:6	7	tif -> tif_postencode
LEAF_NODE	146:1	146:1	8	tif
LEAF_NODE	146:4	146:4	8	->
LEAF_NODE	146:6	146:6	8	tif_postencode
ASSIGN_OP	146:21	146:21	6	=
LEAF_NODE	146:21	146:21	7	=
RVAL	146:23	146:23	6	_TIFFtrue
FIELD	146:23	146:23	7	_TIFFtrue
LEAF_NODE	146:23	146:23	8	_TIFFtrue
LEAF_NODE	146:32	146:32	4	;
EXPR_STATEMENT	147:1	147:38	3	tif -> tif_encoderow = _TIFFNoRowEncode ;
EXPR	147:1	147:1	4	tif -> tif_encoderow = _TIFFNoRowEncode
ASSIGN	147:1	147:22	5	tif -> tif_encoderow = _TIFFNoRowEncode
LVAL	147:1	147:1	6	tif -> tif_encoderow
FIELD	147:1	147:6	7	tif -> tif_encoderow
LEAF_NODE	147:1	147:1	8	tif
LEAF_NODE	147:4	147:4	8	->
LEAF_NODE	147:6	147:6	8	tif_encoderow
ASSIGN_OP	147:20	147:20	6	=
LEAF_NODE	147:20	147:20	7	=
RVAL	147:22	147:22	6	_TIFFNoRowEncode
FIELD	147:22	147:22	7	_TIFFNoRowEncode
LEAF_NODE	147:22	147:22	8	_TIFFNoRowEncode
LEAF_NODE	147:38	147:38	4	;
EXPR_STATEMENT	148:1	148:42	3	tif -> tif_encodestrip = _TIFFNoStripEncode ;
EXPR	148:1	148:1	4	tif -> tif_encodestrip = _TIFFNoStripEncode
ASSIGN	148:1	148:24	5	tif -> tif_encodestrip = _TIFFNoStripEncode
LVAL	148:1	148:1	6	tif -> tif_encodestrip
FIELD	148:1	148:6	7	tif -> tif_encodestrip
LEAF_NODE	148:1	148:1	8	tif
LEAF_NODE	148:4	148:4	8	->
LEAF_NODE	148:6	148:6	8	tif_encodestrip
ASSIGN_OP	148:22	148:22	6	=
LEAF_NODE	148:22	148:22	7	=
RVAL	148:24	148:24	6	_TIFFNoStripEncode
FIELD	148:24	148:24	7	_TIFFNoStripEncode
LEAF_NODE	148:24	148:24	8	_TIFFNoStripEncode
LEAF_NODE	148:42	148:42	4	;
EXPR_STATEMENT	149:1	149:40	3	tif -> tif_encodetile = _TIFFNoTileEncode ;
EXPR	149:1	149:1	4	tif -> tif_encodetile = _TIFFNoTileEncode
ASSIGN	149:1	149:23	5	tif -> tif_encodetile = _TIFFNoTileEncode
LVAL	149:1	149:1	6	tif -> tif_encodetile
FIELD	149:1	149:6	7	tif -> tif_encodetile
LEAF_NODE	149:1	149:1	8	tif
LEAF_NODE	149:4	149:4	8	->
LEAF_NODE	149:6	149:6	8	tif_encodetile
ASSIGN_OP	149:21	149:21	6	=
LEAF_NODE	149:21	149:21	7	=
RVAL	149:23	149:23	6	_TIFFNoTileEncode
FIELD	149:23	149:23	7	_TIFFNoTileEncode
LEAF_NODE	149:23	149:23	8	_TIFFNoTileEncode
LEAF_NODE	149:40	149:40	4	;
EXPR_STATEMENT	150:1	150:27	3	tif -> tif_close = _TIFFvoid ;
EXPR	150:1	150:1	4	tif -> tif_close = _TIFFvoid
ASSIGN	150:1	150:18	5	tif -> tif_close = _TIFFvoid
LVAL	150:1	150:1	6	tif -> tif_close
FIELD	150:1	150:6	7	tif -> tif_close
LEAF_NODE	150:1	150:1	8	tif
LEAF_NODE	150:4	150:4	8	->
LEAF_NODE	150:6	150:6	8	tif_close
ASSIGN_OP	150:16	150:16	6	=
LEAF_NODE	150:16	150:16	7	=
RVAL	150:18	150:18	6	_TIFFvoid
FIELD	150:18	150:18	7	_TIFFvoid
LEAF_NODE	150:18	150:18	8	_TIFFvoid
LEAF_NODE	150:27	150:27	4	;
EXPR_STATEMENT	151:1	151:28	3	tif -> tif_seek = _TIFFNoSeek ;
EXPR	151:1	151:1	4	tif -> tif_seek = _TIFFNoSeek
ASSIGN	151:1	151:17	5	tif -> tif_seek = _TIFFNoSeek
LVAL	151:1	151:1	6	tif -> tif_seek
FIELD	151:1	151:6	7	tif -> tif_seek
LEAF_NODE	151:1	151:1	8	tif
LEAF_NODE	151:4	151:4	8	->
LEAF_NODE	151:6	151:6	8	tif_seek
ASSIGN_OP	151:15	151:15	6	=
LEAF_NODE	151:15	151:15	7	=
RVAL	151:17	151:17	6	_TIFFNoSeek
FIELD	151:17	151:17	7	_TIFFNoSeek
LEAF_NODE	151:17	151:17	8	_TIFFNoSeek
LEAF_NODE	151:28	151:28	4	;
EXPR_STATEMENT	152:1	152:29	3	tif -> tif_cleanup = _TIFFvoid ;
EXPR	152:1	152:1	4	tif -> tif_cleanup = _TIFFvoid
ASSIGN	152:1	152:20	5	tif -> tif_cleanup = _TIFFvoid
LVAL	152:1	152:1	6	tif -> tif_cleanup
FIELD	152:1	152:6	7	tif -> tif_cleanup
LEAF_NODE	152:1	152:1	8	tif
LEAF_NODE	152:4	152:4	8	->
LEAF_NODE	152:6	152:6	8	tif_cleanup
ASSIGN_OP	152:18	152:18	6	=
LEAF_NODE	152:18	152:18	7	=
RVAL	152:20	152:20	6	_TIFFvoid
FIELD	152:20	152:20	7	_TIFFvoid
LEAF_NODE	152:20	152:20	8	_TIFFvoid
LEAF_NODE	152:29	152:29	4	;
EXPR_STATEMENT	153:1	153:46	3	tif -> tif_defstripsize = _TIFFDefaultStripSize ;
EXPR	153:1	153:1	4	tif -> tif_defstripsize = _TIFFDefaultStripSize
ASSIGN	153:1	153:25	5	tif -> tif_defstripsize = _TIFFDefaultStripSize
LVAL	153:1	153:1	6	tif -> tif_defstripsize
FIELD	153:1	153:6	7	tif -> tif_defstripsize
LEAF_NODE	153:1	153:1	8	tif
LEAF_NODE	153:4	153:4	8	->
LEAF_NODE	153:6	153:6	8	tif_defstripsize
ASSIGN_OP	153:23	153:23	6	=
LEAF_NODE	153:23	153:23	7	=
RVAL	153:25	153:25	6	_TIFFDefaultStripSize
FIELD	153:25	153:25	7	_TIFFDefaultStripSize
LEAF_NODE	153:25	153:25	8	_TIFFDefaultStripSize
LEAF_NODE	153:46	153:46	4	;
EXPR_STATEMENT	154:1	154:44	3	tif -> tif_deftilesize = _TIFFDefaultTileSize ;
EXPR	154:1	154:1	4	tif -> tif_deftilesize = _TIFFDefaultTileSize
ASSIGN	154:1	154:24	5	tif -> tif_deftilesize = _TIFFDefaultTileSize
LVAL	154:1	154:1	6	tif -> tif_deftilesize
FIELD	154:1	154:6	7	tif -> tif_deftilesize
LEAF_NODE	154:1	154:1	8	tif
LEAF_NODE	154:4	154:4	8	->
LEAF_NODE	154:6	154:6	8	tif_deftilesize
ASSIGN_OP	154:22	154:22	6	=
LEAF_NODE	154:22	154:22	7	=
RVAL	154:24	154:24	6	_TIFFDefaultTileSize
FIELD	154:24	154:24	7	_TIFFDefaultTileSize
LEAF_NODE	154:24	154:24	8	_TIFFDefaultTileSize
LEAF_NODE	154:44	154:44	4	;
EXPR_STATEMENT	155:1	155:50	3	tif -> tif_flags &= ~ ( TIFF_NOBITREV | TIFF_NOREADRAW ) ;
EXPR	155:1	155:1	4	tif -> tif_flags &= ~ ( TIFF_NOBITREV | TIFF_NOREADRAW )
ASSIGN	155:1	155:19	5	tif -> tif_flags &= ~ ( TIFF_NOBITREV | TIFF_NOREADRAW )
LVAL	155:1	155:1	6	tif -> tif_flags
FIELD	155:1	155:6	7	tif -> tif_flags
LEAF_NODE	155:1	155:1	8	tif
LEAF_NODE	155:4	155:4	8	->
LEAF_NODE	155:6	155:6	8	tif_flags
ASSIGN_OP	155:16	155:16	6	&=
LEAF_NODE	155:16	155:16	7	&=
RVAL	155:19	155:19	6	~ ( TIFF_NOBITREV | TIFF_NOREADRAW )
UNARY_EXPR	155:19	155:49	7	~ ( TIFF_NOBITREV | TIFF_NOREADRAW )
UNARY_OPERATOR	155:19	155:19	8	~
LEAF_NODE	155:19	155:19	9	~
LEAF_NODE	155:20	155:20	8	(
BIT_OR	155:21	155:35	8	TIFF_NOBITREV | TIFF_NOREADRAW
BIT_OR_ELEM	155:21	155:21	9	TIFF_NOBITREV
FIELD	155:21	155:21	10	TIFF_NOBITREV
LEAF_NODE	155:21	155:21	11	TIFF_NOBITREV
LEAF_NODE	155:34	155:34	9	|
BIT_OR_ELEM	155:35	155:35	9	TIFF_NOREADRAW
FIELD	155:35	155:35	10	TIFF_NOREADRAW
LEAF_NODE	155:35	155:35	11	TIFF_NOREADRAW
LEAF_NODE	155:49	155:49	8	)
LEAF_NODE	155:50	155:50	4	;
LEAF_NODE	156:0	156:0	2	}
FUNCTION_DEF	158:0	171:0	1	
RETURN_TYPE	158:0	158:0	2	int
TYPE_NAME	158:0	158:0	3	int
LEAF_NODE	158:0	158:0	4	int
FUNCTION_NAME	159:0	159:0	2	TIFFSetCompressionScheme
LEAF_NODE	159:0	159:0	3	TIFFSetCompressionScheme
PARAMETER_LIST	159:24	159:46	2	( TIFF * tif , int scheme )
LEAF_NODE	159:24	159:24	3	(
PARAMETER_DECL	159:25	159:31	3	TIFF * tif
TYPE	159:25	159:29	4	TIFF *
TYPE_NAME	159:25	159:25	5	TIFF
LEAF_NODE	159:25	159:25	6	TIFF
POINTER	159:29	159:29	5	*
LEAF_NODE	159:29	159:29	6	*
NAME	159:31	159:31	4	tif
LEAF_NODE	159:31	159:31	5	tif
LEAF_NODE	159:34	159:34	3	,
PARAMETER_DECL	159:36	159:40	3	int scheme
TYPE	159:36	159:36	4	int
TYPE_NAME	159:36	159:36	5	int
LEAF_NODE	159:36	159:36	6	int
NAME	159:40	159:40	4	scheme
LEAF_NODE	159:40	159:40	5	scheme
LEAF_NODE	159:46	159:46	3	)
LEAF_NODE	160:0	160:0	2	{
STATEMENTS	161:1	170:1	2	
SIMPLE_DECL	161:1	161:52	3	const TIFFCodec * c ; c = TIFFFindCODEC ( ( uint16 ) scheme ) ;
VAR_DECL	161:1	161:18	4	const TIFFCodec * c ; c = TIFFFindCODEC ( ( uint16 ) scheme )
TYPE	161:1	161:17	5	const TIFFCodec *
TYPE_NAME	161:1	161:7	6	const TIFFCodec
LEAF_NODE	161:1	161:1	7	const
LEAF_NODE	161:7	161:7	7	TIFFCodec
POINTER	161:17	161:17	6	*
LEAF_NODE	161:17	161:17	7	*
NAME	161:18	161:18	5	c
LEAF_NODE	161:18	161:18	6	c
LEAF_NODE	0:0	0:0	5	;
INIT	161:18	161:18	5	c = TIFFFindCODEC ( ( uint16 ) scheme )
ASSIGN	161:18	161:22	6	c = TIFFFindCODEC ( ( uint16 ) scheme )
LVAL	161:18	161:18	7	c
NAME	161:18	161:18	8	c
LEAF_NODE	161:18	161:18	9	c
ASSIGN_OP	161:20	161:20	7	=
LEAF_NODE	161:20	161:20	8	=
RVAL	161:22	161:22	7	TIFFFindCODEC ( ( uint16 ) scheme )
FUNCTION_CALL	161:22	161:51	8	TIFFFindCODEC ( ( uint16 ) scheme )
CALLEE	161:22	161:22	9	TIFFFindCODEC
LEAF_NODE	161:22	161:22	10	TIFFFindCODEC
LEAF_NODE	161:35	161:35	9	(
ARGUMENT	161:36	161:45	9	( uint16 ) scheme
LEAF_NODE	161:36	161:36	10	(
TYPE_NAME	161:37	161:37	10	uint16
LEAF_NODE	161:37	161:37	11	uint16
LEAF_NODE	161:43	161:43	10	)
FIELD	161:45	161:45	10	scheme
LEAF_NODE	161:45	161:45	11	scheme
LEAF_NODE	161:51	161:51	9	)
LEAF_NODE	161:52	161:52	4	;
EXPR_STATEMENT	163:1	163:37	3	_TIFFSetDefaultCompressionState ( tif ) ;
EXPR	163:1	163:1	4	_TIFFSetDefaultCompressionState ( tif )
FUNCTION_CALL	163:1	163:36	5	_TIFFSetDefaultCompressionState ( tif )
CALLEE	163:1	163:1	6	_TIFFSetDefaultCompressionState
LEAF_NODE	163:1	163:1	7	_TIFFSetDefaultCompressionState
LEAF_NODE	163:32	163:32	6	(
ARGUMENT	163:33	163:33	6	tif
FIELD	163:33	163:33	7	tif
LEAF_NODE	163:33	163:33	8	tif
LEAF_NODE	163:36	163:36	6	)
LEAF_NODE	163:37	163:37	4	;
JUMP_STATEMENT	170:1	170:41	3	return ( c ? ( * c -> init ) ( tif , scheme ) : 1 ) ;
KEYWORD	170:1	170:1	4	return
LEAF_NODE	170:1	170:1	5	return
DESTINATION	170:8	170:8	4	( c ? ( * c -> init ) ( tif , scheme ) : 1 )
EXPR	170:8	170:40	5	( c ? ( * c -> init ) ( tif , scheme ) : 1 )
LEAF_NODE	170:8	170:8	6	(
COND_EXPR	170:9	170:39	6	c ? ( * c -> init ) ( tif , scheme ) : 1
CONDITION	170:9	170:9	7	c
FIELD	170:9	170:9	8	c
LEAF_NODE	170:9	170:9	9	c
LEAF_NODE	170:11	170:11	7	?
EXPR	170:13	170:13	7	( * c -> init ) ( tif , scheme )
FUNCTION_CALL	170:13	170:35	8	( * c -> init ) ( tif , scheme )
CALLEE	170:13	170:22	9	( * c -> init )
LEAF_NODE	170:13	170:13	10	(
UNARY_EXPR	170:14	170:15	10	* c -> init
UNARY_OPERATOR	170:14	170:14	11	*
LEAF_NODE	170:14	170:14	12	*
FIELD	170:15	170:18	11	c -> init
LEAF_NODE	170:15	170:15	12	c
LEAF_NODE	170:16	170:16	12	->
LEAF_NODE	170:18	170:18	12	init
LEAF_NODE	170:22	170:22	10	)
LEAF_NODE	170:23	170:23	9	(
ARGUMENT	170:24	170:24	9	tif
FIELD	170:24	170:24	10	tif
LEAF_NODE	170:24	170:24	11	tif
LEAF_NODE	170:27	170:27	9	,
ARGUMENT	170:29	170:29	9	scheme
FIELD	170:29	170:29	10	scheme
LEAF_NODE	170:29	170:29	11	scheme
LEAF_NODE	170:35	170:35	9	)
LEAF_NODE	170:37	170:37	7	:
FIELD	170:39	170:39	7	1
LEAF_NODE	170:39	170:39	8	1
LEAF_NODE	170:40	170:40	6	)
LEAF_NODE	170:41	170:41	4	;
LEAF_NODE	171:0	171:0	2	}
SIMPLE_DECL	178:8	181:9	1	struct _codec BASE_CLASSES { struct _codec * next ; TIFFCodec * info ; } codec_t ;
VAR_DECL	178:8	181:2	2	struct _codec BASE_CLASSES { struct _codec * next ; TIFFCodec * info ; } codec_t
TYPE	178:8	178:8	3	struct _codec BASE_CLASSES { struct _codec * next ; TIFFCodec * info ; }
CLASS_DEF	178:8	181:0	4	struct _codec BASE_CLASSES { struct _codec * next ; TIFFCodec * info ; }
LEAF_NODE	178:8	178:8	5	struct
CLASS_NAME	178:15	178:15	5	_codec
LEAF_NODE	178:15	178:15	6	_codec
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	178:22	178:22	5	{
CLASS_CONTENT	179:1	180:1	5	struct _codec * next ; TIFFCodec * info ;
SIMPLE_DECL	179:1	179:20	6	struct _codec * next ;
VAR_DECL	179:1	179:16	7	struct _codec * next
TYPE	179:1	179:14	8	struct _codec *
TYPE_NAME	179:1	179:8	9	struct _codec
LEAF_NODE	179:1	179:1	10	struct
LEAF_NODE	179:8	179:8	10	_codec
POINTER	179:14	179:14	9	*
LEAF_NODE	179:14	179:14	10	*
NAME	179:16	179:16	8	next
LEAF_NODE	179:16	179:16	9	next
LEAF_NODE	179:20	179:20	7	;
SIMPLE_DECL	180:1	180:16	6	TIFFCodec * info ;
VAR_DECL	180:1	180:12	7	TIFFCodec * info
TYPE	180:1	180:10	8	TIFFCodec *
TYPE_NAME	180:1	180:1	9	TIFFCodec
LEAF_NODE	180:1	180:1	10	TIFFCodec
POINTER	180:10	180:10	9	*
LEAF_NODE	180:10	180:10	10	*
NAME	180:12	180:12	8	info
LEAF_NODE	180:12	180:12	9	info
LEAF_NODE	180:16	180:16	7	;
LEAF_NODE	181:0	181:0	5	}
NAME	181:2	181:2	3	codec_t
LEAF_NODE	181:2	181:2	4	codec_t
LEAF_NODE	181:9	181:9	2	;
SIMPLE_DECL	182:7	182:39	1	codec_t * registeredCODECS ; registeredCODECS = NULL ;
VAR_DECL	182:7	182:16	2	codec_t * registeredCODECS ; registeredCODECS = NULL
TYPE	182:7	182:14	3	codec_t *
TYPE_NAME	182:7	182:7	4	codec_t
LEAF_NODE	182:7	182:7	5	codec_t
POINTER	182:14	182:14	4	*
LEAF_NODE	182:14	182:14	5	*
NAME	182:16	182:16	3	registeredCODECS
LEAF_NODE	182:16	182:16	4	registeredCODECS
LEAF_NODE	0:0	0:0	3	;
INIT	182:16	182:16	3	registeredCODECS = NULL
ASSIGN	182:16	182:35	4	registeredCODECS = NULL
LVAL	182:16	182:16	5	registeredCODECS
NAME	182:16	182:16	6	registeredCODECS
LEAF_NODE	182:16	182:16	7	registeredCODECS
ASSIGN_OP	182:33	182:33	5	=
LEAF_NODE	182:33	182:33	6	=
RVAL	182:35	182:35	5	NULL
FIELD	182:35	182:35	6	NULL
LEAF_NODE	182:35	182:35	7	NULL
LEAF_NODE	182:39	182:39	2	;
FUNCTION_DEF	184:0	197:0	1	
RETURN_TYPE	184:0	184:15	2	const TIFFCodec *
TYPE_NAME	184:0	184:6	3	const TIFFCodec
LEAF_NODE	184:0	184:0	4	const
LEAF_NODE	184:6	184:6	4	TIFFCodec
LEAF_NODE	184:15	184:15	3	*
FUNCTION_NAME	185:0	185:0	2	TIFFFindCODEC
LEAF_NODE	185:0	185:0	3	TIFFFindCODEC
PARAMETER_LIST	185:13	185:27	2	( uint16 scheme )
LEAF_NODE	185:13	185:13	3	(
PARAMETER_DECL	185:14	185:21	3	uint16 scheme
TYPE	185:14	185:14	4	uint16
TYPE_NAME	185:14	185:14	5	uint16
LEAF_NODE	185:14	185:14	6	uint16
NAME	185:21	185:21	4	scheme
LEAF_NODE	185:21	185:21	5	scheme
LEAF_NODE	185:27	185:27	3	)
LEAF_NODE	186:0	186:0	2	{
STATEMENTS	187:1	196:1	2	
SIMPLE_DECL	187:1	187:19	3	const TIFFCodec * c ;
VAR_DECL	187:1	187:18	4	const TIFFCodec * c
TYPE	187:1	187:16	5	const TIFFCodec *
TYPE_NAME	187:1	187:7	6	const TIFFCodec
LEAF_NODE	187:1	187:1	7	const
LEAF_NODE	187:7	187:7	7	TIFFCodec
POINTER	187:16	187:16	6	*
LEAF_NODE	187:16	187:16	7	*
NAME	187:18	187:18	5	c
LEAF_NODE	187:18	187:18	6	c
LEAF_NODE	187:19	187:19	4	;
SIMPLE_DECL	188:1	188:12	3	codec_t * cd ;
VAR_DECL	188:1	188:10	4	codec_t * cd
TYPE	188:1	188:8	5	codec_t *
TYPE_NAME	188:1	188:1	6	codec_t
LEAF_NODE	188:1	188:1	7	codec_t
POINTER	188:8	188:8	6	*
LEAF_NODE	188:8	188:8	7	*
NAME	188:10	188:10	5	cd
LEAF_NODE	188:10	188:10	6	cd
LEAF_NODE	188:12	188:12	4	;
ITERATION	190:1	191:2	3	
KEYWORD	190:1	190:1	4	for
LEAF_NODE	190:1	190:1	5	for
LEAF_NODE	190:5	190:5	4	(
FOR_INIT	190:6	190:27	4	cd = registeredCODECS ;
EXPR	190:6	190:6	5	cd = registeredCODECS
ASSIGN	190:6	190:11	6	cd = registeredCODECS
LVAL	190:6	190:6	7	cd
FIELD	190:6	190:6	8	cd
LEAF_NODE	190:6	190:6	9	cd
ASSIGN_OP	190:9	190:9	7	=
LEAF_NODE	190:9	190:9	8	=
RVAL	190:11	190:11	7	registeredCODECS
FIELD	190:11	190:11	8	registeredCODECS
LEAF_NODE	190:11	190:11	9	registeredCODECS
LEAF_NODE	190:27	190:27	5	;
CONDITION	190:29	190:29	4	cd
EXPR	190:29	190:29	5	cd
FIELD	190:29	190:29	6	cd
LEAF_NODE	190:29	190:29	7	cd
LEAF_NODE	190:31	190:31	4	;
FOR_EXPR	190:33	190:33	4	cd = cd -> next
EXPR	190:33	190:33	5	cd = cd -> next
ASSIGN	190:33	190:38	6	cd = cd -> next
LVAL	190:33	190:33	7	cd
FIELD	190:33	190:33	8	cd
LEAF_NODE	190:33	190:33	9	cd
ASSIGN_OP	190:36	190:36	7	=
LEAF_NODE	190:36	190:36	8	=
RVAL	190:38	190:38	7	cd -> next
FIELD	190:38	190:42	8	cd -> next
LEAF_NODE	190:38	190:38	9	cd
LEAF_NODE	190:40	190:40	9	->
LEAF_NODE	190:42	190:42	9	next
LEAF_NODE	190:46	190:46	4	)
STATEMENTS	191:2	191:2	4	
SELECTION	191:2	192:3	5	
KEYWORD	191:2	191:2	6	if
LEAF_NODE	191:2	191:2	7	if
LEAF_NODE	191:5	191:5	6	(
CONDITION	191:6	191:6	6	cd -> info -> scheme == scheme
EXPR	191:6	191:26	7	cd -> info -> scheme == scheme
FIELD	191:6	191:16	8	cd -> info -> scheme
LEAF_NODE	191:6	191:6	9	cd
LEAF_NODE	191:8	191:8	9	->
LEAF_NODE	191:10	191:10	9	info
LEAF_NODE	191:14	191:14	9	->
LEAF_NODE	191:16	191:16	9	scheme
EQ_OPERATOR	191:23	191:23	8	==
LEAF_NODE	191:23	191:23	9	==
FIELD	191:26	191:26	8	scheme
LEAF_NODE	191:26	191:26	9	scheme
LEAF_NODE	191:32	191:32	6	)
STATEMENTS	192:3	192:3	6	
JUMP_STATEMENT	192:3	192:39	7	return ( ( const TIFFCodec * ) cd -> info ) ;
KEYWORD	192:3	192:3	8	return
LEAF_NODE	192:3	192:3	9	return
DESTINATION	192:10	192:10	8	( ( const TIFFCodec * ) cd -> info )
EXPR	192:10	192:38	9	( ( const TIFFCodec * ) cd -> info )
LEAF_NODE	192:10	192:10	10	(
LEAF_NODE	192:11	192:11	10	(
TYPE_NAME	192:12	192:18	10	const TIFFCodec
LEAF_NODE	192:12	192:12	11	const
LEAF_NODE	192:18	192:18	11	TIFFCodec
LEAF_NODE	192:27	192:27	10	*
LEAF_NODE	192:28	192:28	10	)
FIELD	192:30	192:34	10	cd -> info
LEAF_NODE	192:30	192:30	11	cd
LEAF_NODE	192:32	192:32	11	->
LEAF_NODE	192:34	192:34	11	info
LEAF_NODE	192:38	192:38	10	)
LEAF_NODE	192:39	192:39	8	;
ITERATION	193:1	194:2	3	
KEYWORD	193:1	193:1	4	for
LEAF_NODE	193:1	193:1	5	for
LEAF_NODE	193:5	193:5	4	(
FOR_INIT	193:6	193:28	4	c = _TIFFBuiltinCODECS ;
EXPR	193:6	193:6	5	c = _TIFFBuiltinCODECS
ASSIGN	193:6	193:10	6	c = _TIFFBuiltinCODECS
LVAL	193:6	193:6	7	c
FIELD	193:6	193:6	8	c
LEAF_NODE	193:6	193:6	9	c
ASSIGN_OP	193:8	193:8	7	=
LEAF_NODE	193:8	193:8	8	=
RVAL	193:10	193:10	7	_TIFFBuiltinCODECS
FIELD	193:10	193:10	8	_TIFFBuiltinCODECS
LEAF_NODE	193:10	193:10	9	_TIFFBuiltinCODECS
LEAF_NODE	193:28	193:28	5	;
CONDITION	193:30	193:30	4	c -> name
EXPR	193:30	193:30	5	c -> name
FIELD	193:30	193:33	6	c -> name
LEAF_NODE	193:30	193:30	7	c
LEAF_NODE	193:31	193:31	7	->
LEAF_NODE	193:33	193:33	7	name
LEAF_NODE	193:37	193:37	4	;
FOR_EXPR	193:39	193:39	4	c ++
EXPR	193:39	193:39	5	c ++
FIELD	193:39	193:40	6	c ++
LEAF_NODE	193:39	193:39	7	c
LEAF_NODE	193:40	193:40	7	++
LEAF_NODE	193:42	193:42	4	)
STATEMENTS	194:2	194:2	4	
SELECTION	194:2	195:3	5	
KEYWORD	194:2	194:2	6	if
LEAF_NODE	194:2	194:2	7	if
LEAF_NODE	194:5	194:5	6	(
CONDITION	194:6	194:6	6	c -> scheme == scheme
EXPR	194:6	194:19	7	c -> scheme == scheme
FIELD	194:6	194:9	8	c -> scheme
LEAF_NODE	194:6	194:6	9	c
LEAF_NODE	194:7	194:7	9	->
LEAF_NODE	194:9	194:9	9	scheme
EQ_OPERATOR	194:16	194:16	8	==
LEAF_NODE	194:16	194:16	9	==
FIELD	194:19	194:19	8	scheme
LEAF_NODE	194:19	194:19	9	scheme
LEAF_NODE	194:25	194:25	6	)
STATEMENTS	195:3	195:3	6	
LEAF_NODE	195:3	195:3	7	return
LEAF_NODE	195:10	195:10	3	(
LEAF_NODE	195:11	195:11	3	c
LEAF_NODE	195:12	195:12	3	)
LEAF_NODE	195:13	195:13	3	;
JUMP_STATEMENT	196:1	196:30	3	return ( ( const TIFFCodec * ) 0 ) ;
KEYWORD	196:1	196:1	4	return
LEAF_NODE	196:1	196:1	5	return
DESTINATION	196:8	196:8	4	( ( const TIFFCodec * ) 0 )
EXPR	196:8	196:29	5	( ( const TIFFCodec * ) 0 )
LEAF_NODE	196:8	196:8	6	(
LEAF_NODE	196:9	196:9	6	(
TYPE_NAME	196:10	196:16	6	const TIFFCodec
LEAF_NODE	196:10	196:10	7	const
LEAF_NODE	196:16	196:16	7	TIFFCodec
LEAF_NODE	196:25	196:25	6	*
LEAF_NODE	196:26	196:26	6	)
FIELD	196:28	196:28	6	0
LEAF_NODE	196:28	196:28	7	0
LEAF_NODE	196:29	196:29	6	)
LEAF_NODE	196:30	196:30	4	;
LEAF_NODE	197:0	197:0	2	}
FUNCTION_DEF	199:0	220:0	1	
RETURN_TYPE	199:0	199:9	2	TIFFCodec *
TYPE_NAME	199:0	199:0	3	TIFFCodec
LEAF_NODE	199:0	199:0	4	TIFFCodec
LEAF_NODE	199:9	199:9	3	*
FUNCTION_NAME	200:0	200:0	2	TIFFRegisterCODEC
LEAF_NODE	200:0	200:0	3	TIFFRegisterCODEC
PARAMETER_LIST	200:17	200:70	2	( uint16 scheme , const char * name , TIFFInitMethod init )
LEAF_NODE	200:17	200:17	3	(
PARAMETER_DECL	200:18	200:25	3	uint16 scheme
TYPE	200:18	200:18	4	uint16
TYPE_NAME	200:18	200:18	5	uint16
LEAF_NODE	200:18	200:18	6	uint16
NAME	200:25	200:25	4	scheme
LEAF_NODE	200:25	200:25	5	scheme
LEAF_NODE	200:31	200:31	3	,
PARAMETER_DECL	200:33	200:45	3	const char * name
TYPE	200:33	200:43	4	const char *
TYPE_NAME	200:33	200:39	5	const char
LEAF_NODE	200:33	200:33	6	const
LEAF_NODE	200:39	200:39	6	char
POINTER	200:43	200:43	5	*
LEAF_NODE	200:43	200:43	6	*
NAME	200:45	200:45	4	name
LEAF_NODE	200:45	200:45	5	name
LEAF_NODE	200:49	200:49	3	,
PARAMETER_DECL	200:51	200:66	3	TIFFInitMethod init
TYPE	200:51	200:51	4	TIFFInitMethod
TYPE_NAME	200:51	200:51	5	TIFFInitMethod
LEAF_NODE	200:51	200:51	6	TIFFInitMethod
NAME	200:66	200:66	4	init
LEAF_NODE	200:66	200:66	5	init
LEAF_NODE	200:70	200:70	3	)
LEAF_NODE	201:0	201:0	2	{
STATEMENTS	202:1	219:1	2	
SIMPLE_DECL	202:1	203:84	3	codec_t * cd ; cd = ( codec_t * ) _TIFFmalloc ( ( tmsize_t ) ( sizeof ( codec_t ) + sizeof ( TIFFCodec ) + strlen ( name ) + 1 ) ) ;
VAR_DECL	202:1	202:10	4	codec_t * cd ; cd = ( codec_t * ) _TIFFmalloc ( ( tmsize_t ) ( sizeof ( codec_t ) + sizeof ( TIFFCodec ) + strlen ( name ) + 1 ) )
TYPE	202:1	202:8	5	codec_t *
TYPE_NAME	202:1	202:1	6	codec_t
LEAF_NODE	202:1	202:1	7	codec_t
POINTER	202:8	202:8	6	*
LEAF_NODE	202:8	202:8	7	*
NAME	202:10	202:10	5	cd
LEAF_NODE	202:10	202:10	6	cd
LEAF_NODE	0:0	0:0	5	;
INIT	202:10	202:10	5	cd = ( codec_t * ) _TIFFmalloc ( ( tmsize_t ) ( sizeof ( codec_t ) + sizeof ( TIFFCodec ) + strlen ( name ) + 1 ) )
ASSIGN	202:10	202:15	6	cd = ( codec_t * ) _TIFFmalloc ( ( tmsize_t ) ( sizeof ( codec_t ) + sizeof ( TIFFCodec ) + strlen ( name ) + 1 ) )
LVAL	202:10	202:10	7	cd
NAME	202:10	202:10	8	cd
LEAF_NODE	202:10	202:10	9	cd
ASSIGN_OP	202:13	202:13	7	=
LEAF_NODE	202:13	202:13	8	=
RVAL	202:15	203:5	7	( codec_t * ) _TIFFmalloc ( ( tmsize_t ) ( sizeof ( codec_t ) + sizeof ( TIFFCodec ) + strlen ( name ) + 1 ) )
LEAF_NODE	202:15	202:15	8	(
TYPE_NAME	202:16	202:16	8	codec_t
LEAF_NODE	202:16	202:16	9	codec_t
LEAF_NODE	202:23	202:23	8	*
LEAF_NODE	202:24	202:24	8	)
FUNCTION_CALL	203:5	203:83	8	_TIFFmalloc ( ( tmsize_t ) ( sizeof ( codec_t ) + sizeof ( TIFFCodec ) + strlen ( name ) + 1 ) )
CALLEE	203:5	203:5	9	_TIFFmalloc
LEAF_NODE	203:5	203:5	10	_TIFFmalloc
LEAF_NODE	203:16	203:16	9	(
ARGUMENT	203:17	203:82	9	( tmsize_t ) ( sizeof ( codec_t ) + sizeof ( TIFFCodec ) + strlen ( name ) + 1 )
LEAF_NODE	203:17	203:17	10	(
TYPE_NAME	203:18	203:18	10	tmsize_t
LEAF_NODE	203:18	203:18	11	tmsize_t
LEAF_NODE	203:26	203:26	10	)
LEAF_NODE	203:27	203:27	10	(
FUNCTION_CALL	203:28	203:43	10	sizeof ( codec_t )
CALLEE	203:28	203:28	11	sizeof
LEAF_NODE	203:28	203:28	12	sizeof
LEAF_NODE	203:35	203:35	11	(
ARGUMENT	203:36	203:36	11	codec_t
FIELD	203:36	203:36	12	codec_t
LEAF_NODE	203:36	203:36	13	codec_t
LEAF_NODE	203:43	203:43	11	)
LEAF_NODE	203:45	203:45	10	+
FUNCTION_CALL	203:47	203:64	10	sizeof ( TIFFCodec )
CALLEE	203:47	203:47	11	sizeof
LEAF_NODE	203:47	203:47	12	sizeof
LEAF_NODE	203:54	203:54	11	(
ARGUMENT	203:55	203:55	11	TIFFCodec
FIELD	203:55	203:55	12	TIFFCodec
LEAF_NODE	203:55	203:55	13	TIFFCodec
LEAF_NODE	203:64	203:64	11	)
LEAF_NODE	203:66	203:66	10	+
FUNCTION_CALL	203:68	203:79	10	strlen ( name )
CALLEE	203:68	203:68	11	strlen
LEAF_NODE	203:68	203:68	12	strlen
LEAF_NODE	203:74	203:74	11	(
ARGUMENT	203:75	203:75	11	name
FIELD	203:75	203:75	12	name
LEAF_NODE	203:75	203:75	13	name
LEAF_NODE	203:79	203:79	11	)
LEAF_NODE	203:80	203:80	10	+
FIELD	203:81	203:81	10	1
LEAF_NODE	203:81	203:81	11	1
LEAF_NODE	203:82	203:82	10	)
LEAF_NODE	203:83	203:83	9	)
LEAF_NODE	203:84	203:84	4	;
SELECTION	205:1	205:17	3	
KEYWORD	205:1	205:1	4	if
LEAF_NODE	205:1	205:1	5	if
LEAF_NODE	205:4	205:4	4	(
CONDITION	205:5	205:5	4	cd != NULL
EXPR	205:5	205:11	5	cd != NULL
FIELD	205:5	205:5	6	cd
LEAF_NODE	205:5	205:5	7	cd
EQ_OPERATOR	205:8	205:8	6	!=
LEAF_NODE	205:8	205:8	7	!=
FIELD	205:11	205:11	6	NULL
LEAF_NODE	205:11	205:11	7	NULL
LEAF_NODE	205:15	205:15	4	)
STATEMENTS	205:17	214:1	4	
LEAF_NODE	205:17	205:17	5	{
STATEMENTS	206:2	213:2	5	
EXPR_STATEMENT	206:2	206:58	6	cd -> info = ( TIFFCodec * ) ( ( uint8 * ) cd + sizeof ( codec_t ) ) ;
EXPR	206:2	206:2	7	cd -> info = ( TIFFCodec * ) ( ( uint8 * ) cd + sizeof ( codec_t ) )
ASSIGN	206:2	206:13	8	cd -> info = ( TIFFCodec * ) ( ( uint8 * ) cd + sizeof ( codec_t ) )
LVAL	206:2	206:2	9	cd -> info
FIELD	206:2	206:6	10	cd -> info
LEAF_NODE	206:2	206:2	11	cd
LEAF_NODE	206:4	206:4	11	->
LEAF_NODE	206:6	206:6	11	info
ASSIGN_OP	206:11	206:11	9	=
LEAF_NODE	206:11	206:11	10	=
RVAL	206:13	206:57	9	( TIFFCodec * ) ( ( uint8 * ) cd + sizeof ( codec_t ) )
LEAF_NODE	206:13	206:13	10	(
TYPE_NAME	206:14	206:14	10	TIFFCodec
LEAF_NODE	206:14	206:14	11	TIFFCodec
LEAF_NODE	206:23	206:23	10	*
LEAF_NODE	206:24	206:24	10	)
LEAF_NODE	206:26	206:26	10	(
LEAF_NODE	206:27	206:27	10	(
TYPE_NAME	206:28	206:28	10	uint8
LEAF_NODE	206:28	206:28	11	uint8
LEAF_NODE	206:33	206:33	10	*
LEAF_NODE	206:34	206:34	10	)
FIELD	206:36	206:36	10	cd
LEAF_NODE	206:36	206:36	11	cd
LEAF_NODE	206:39	206:39	10	+
FUNCTION_CALL	206:41	206:56	10	sizeof ( codec_t )
CALLEE	206:41	206:41	11	sizeof
LEAF_NODE	206:41	206:41	12	sizeof
LEAF_NODE	206:48	206:48	11	(
ARGUMENT	206:49	206:49	11	codec_t
FIELD	206:49	206:49	12	codec_t
LEAF_NODE	206:49	206:49	13	codec_t
LEAF_NODE	206:56	206:56	11	)
LEAF_NODE	206:57	206:57	10	)
LEAF_NODE	206:58	206:58	7	;
EXPR_STATEMENT	207:2	208:46	6	cd -> info -> name = ( char * ) ( ( uint8 * ) cd -> info + sizeof ( TIFFCodec ) ) ;
EXPR	207:2	207:2	7	cd -> info -> name = ( char * ) ( ( uint8 * ) cd -> info + sizeof ( TIFFCodec ) )
ASSIGN	207:2	207:19	8	cd -> info -> name = ( char * ) ( ( uint8 * ) cd -> info + sizeof ( TIFFCodec ) )
LVAL	207:2	207:2	9	cd -> info -> name
FIELD	207:2	207:12	10	cd -> info -> name
LEAF_NODE	207:2	207:2	11	cd
LEAF_NODE	207:4	207:4	11	->
LEAF_NODE	207:6	207:6	11	info
LEAF_NODE	207:10	207:10	11	->
LEAF_NODE	207:12	207:12	11	name
ASSIGN_OP	207:17	207:17	9	=
LEAF_NODE	207:17	207:17	10	=
RVAL	207:19	208:45	9	( char * ) ( ( uint8 * ) cd -> info + sizeof ( TIFFCodec ) )
LEAF_NODE	207:19	207:19	10	(
TYPE_NAME	207:20	207:20	10	char
LEAF_NODE	207:20	207:20	11	char
LEAF_NODE	207:24	207:24	10	*
LEAF_NODE	207:25	207:25	10	)
LEAF_NODE	208:6	208:6	10	(
LEAF_NODE	208:7	208:7	10	(
TYPE_NAME	208:8	208:8	10	uint8
LEAF_NODE	208:8	208:8	11	uint8
LEAF_NODE	208:13	208:13	10	*
LEAF_NODE	208:14	208:14	10	)
FIELD	208:16	208:20	10	cd -> info
LEAF_NODE	208:16	208:16	11	cd
LEAF_NODE	208:18	208:18	11	->
LEAF_NODE	208:20	208:20	11	info
LEAF_NODE	208:25	208:25	10	+
FUNCTION_CALL	208:27	208:44	10	sizeof ( TIFFCodec )
CALLEE	208:27	208:27	11	sizeof
LEAF_NODE	208:27	208:27	12	sizeof
LEAF_NODE	208:34	208:34	11	(
ARGUMENT	208:35	208:35	11	TIFFCodec
FIELD	208:35	208:35	12	TIFFCodec
LEAF_NODE	208:35	208:35	13	TIFFCodec
LEAF_NODE	208:44	208:44	11	)
LEAF_NODE	208:45	208:45	10	)
LEAF_NODE	208:46	208:46	7	;
EXPR_STATEMENT	209:2	209:30	6	strcpy ( cd -> info -> name , name ) ;
EXPR	209:2	209:2	7	strcpy ( cd -> info -> name , name )
FUNCTION_CALL	209:2	209:29	8	strcpy ( cd -> info -> name , name )
CALLEE	209:2	209:2	9	strcpy
LEAF_NODE	209:2	209:2	10	strcpy
LEAF_NODE	209:8	209:8	9	(
ARGUMENT	209:9	209:9	9	cd -> info -> name
FIELD	209:9	209:19	10	cd -> info -> name
LEAF_NODE	209:9	209:9	11	cd
LEAF_NODE	209:11	209:11	11	->
LEAF_NODE	209:13	209:13	11	info
LEAF_NODE	209:17	209:17	11	->
LEAF_NODE	209:19	209:19	11	name
LEAF_NODE	209:23	209:23	9	,
ARGUMENT	209:25	209:25	9	name
FIELD	209:25	209:25	10	name
LEAF_NODE	209:25	209:25	11	name
LEAF_NODE	209:29	209:29	9	)
LEAF_NODE	209:30	209:30	7	;
EXPR_STATEMENT	210:2	210:27	6	cd -> info -> scheme = scheme ;
EXPR	210:2	210:2	7	cd -> info -> scheme = scheme
ASSIGN	210:2	210:21	8	cd -> info -> scheme = scheme
LVAL	210:2	210:2	9	cd -> info -> scheme
FIELD	210:2	210:12	10	cd -> info -> scheme
LEAF_NODE	210:2	210:2	11	cd
LEAF_NODE	210:4	210:4	11	->
LEAF_NODE	210:6	210:6	11	info
LEAF_NODE	210:10	210:10	11	->
LEAF_NODE	210:12	210:12	11	scheme
ASSIGN_OP	210:19	210:19	9	=
LEAF_NODE	210:19	210:19	10	=
RVAL	210:21	210:21	9	scheme
FIELD	210:21	210:21	10	scheme
LEAF_NODE	210:21	210:21	11	scheme
LEAF_NODE	210:27	210:27	7	;
EXPR_STATEMENT	211:2	211:23	6	cd -> info -> init = init ;
EXPR	211:2	211:2	7	cd -> info -> init = init
ASSIGN	211:2	211:19	8	cd -> info -> init = init
LVAL	211:2	211:2	9	cd -> info -> init
FIELD	211:2	211:12	10	cd -> info -> init
LEAF_NODE	211:2	211:2	11	cd
LEAF_NODE	211:4	211:4	11	->
LEAF_NODE	211:6	211:6	11	info
LEAF_NODE	211:10	211:10	11	->
LEAF_NODE	211:12	211:12	11	init
ASSIGN_OP	211:17	211:17	9	=
LEAF_NODE	211:17	211:17	10	=
RVAL	211:19	211:19	9	init
FIELD	211:19	211:19	10	init
LEAF_NODE	211:19	211:19	11	init
LEAF_NODE	211:23	211:23	7	;
EXPR_STATEMENT	212:2	212:29	6	cd -> next = registeredCODECS ;
EXPR	212:2	212:2	7	cd -> next = registeredCODECS
ASSIGN	212:2	212:13	8	cd -> next = registeredCODECS
LVAL	212:2	212:2	9	cd -> next
FIELD	212:2	212:6	10	cd -> next
LEAF_NODE	212:2	212:2	11	cd
LEAF_NODE	212:4	212:4	11	->
LEAF_NODE	212:6	212:6	11	next
ASSIGN_OP	212:11	212:11	9	=
LEAF_NODE	212:11	212:11	10	=
RVAL	212:13	212:13	9	registeredCODECS
FIELD	212:13	212:13	10	registeredCODECS
LEAF_NODE	212:13	212:13	11	registeredCODECS
LEAF_NODE	212:29	212:29	7	;
EXPR_STATEMENT	213:2	213:23	6	registeredCODECS = cd ;
EXPR	213:2	213:2	7	registeredCODECS = cd
ASSIGN	213:2	213:21	8	registeredCODECS = cd
LVAL	213:2	213:2	9	registeredCODECS
FIELD	213:2	213:2	10	registeredCODECS
LEAF_NODE	213:2	213:2	11	registeredCODECS
ASSIGN_OP	213:19	213:19	9	=
LEAF_NODE	213:19	213:19	10	=
RVAL	213:21	213:21	9	cd
FIELD	213:21	213:21	10	cd
LEAF_NODE	213:21	213:21	11	cd
LEAF_NODE	213:23	213:23	7	;
LEAF_NODE	214:1	214:1	5	}
SELECTION	214:3	214:8	3	
KEYWORD	214:3	214:3	4	else
LEAF_NODE	214:3	214:3	5	else
STATEMENTS	214:8	218:1	4	
LEAF_NODE	214:8	214:8	5	{
STATEMENTS	215:2	217:2	5	
EXPR_STATEMENT	215:2	216:57	6	TIFFErrorExt ( 0 , "TIFFRegisterCODEC" , "No space to register compression scheme %s" , name ) ;
EXPR	215:2	215:2	7	TIFFErrorExt ( 0 , "TIFFRegisterCODEC" , "No space to register compression scheme %s" , name )
FUNCTION_CALL	215:2	216:56	8	TIFFErrorExt ( 0 , "TIFFRegisterCODEC" , "No space to register compression scheme %s" , name )
CALLEE	215:2	215:2	9	TIFFErrorExt
LEAF_NODE	215:2	215:2	10	TIFFErrorExt
LEAF_NODE	215:14	215:14	9	(
ARGUMENT	215:15	215:15	9	0
FIELD	215:15	215:15	10	0
LEAF_NODE	215:15	215:15	11	0
LEAF_NODE	215:16	215:16	9	,
ARGUMENT	215:18	215:18	9	"TIFFRegisterCODEC"
FIELD	215:18	215:18	10	"TIFFRegisterCODEC"
LEAF_NODE	215:18	215:18	11	"TIFFRegisterCODEC"
LEAF_NODE	215:37	215:37	9	,
ARGUMENT	216:6	216:6	9	"No space to register compression scheme %s"
FIELD	216:6	216:6	10	"No space to register compression scheme %s"
LEAF_NODE	216:6	216:6	11	"No space to register compression scheme %s"
LEAF_NODE	216:50	216:50	9	,
ARGUMENT	216:52	216:52	9	name
FIELD	216:52	216:52	10	name
LEAF_NODE	216:52	216:52	11	name
LEAF_NODE	216:56	216:56	9	)
LEAF_NODE	216:57	216:57	7	;
JUMP_STATEMENT	217:2	217:13	6	return NULL ;
KEYWORD	217:2	217:2	7	return
LEAF_NODE	217:2	217:2	8	return
DESTINATION	217:9	217:9	7	NULL
EXPR	217:9	217:9	8	NULL
FIELD	217:9	217:9	9	NULL
LEAF_NODE	217:9	217:9	10	NULL
LEAF_NODE	217:13	217:13	7	;
LEAF_NODE	218:1	218:1	5	}
JUMP_STATEMENT	219:1	219:18	3	return ( cd -> info ) ;
KEYWORD	219:1	219:1	4	return
LEAF_NODE	219:1	219:1	5	return
DESTINATION	219:8	219:8	4	( cd -> info )
EXPR	219:8	219:17	5	( cd -> info )
LEAF_NODE	219:8	219:8	6	(
FIELD	219:9	219:13	6	cd -> info
LEAF_NODE	219:9	219:9	7	cd
LEAF_NODE	219:11	219:11	7	->
LEAF_NODE	219:13	219:13	7	info
LEAF_NODE	219:17	219:17	6	)
LEAF_NODE	219:18	219:18	4	;
LEAF_NODE	220:0	220:0	2	}
FUNCTION_DEF	222:0	236:0	1	
RETURN_TYPE	222:0	222:0	2	void
TYPE_NAME	222:0	222:0	3	void
LEAF_NODE	222:0	222:0	4	void
FUNCTION_NAME	223:0	223:0	2	TIFFUnRegisterCODEC
LEAF_NODE	223:0	223:0	3	TIFFUnRegisterCODEC
PARAMETER_LIST	223:19	223:32	2	( TIFFCodec * c )
LEAF_NODE	223:19	223:19	3	(
PARAMETER_DECL	223:20	223:31	3	TIFFCodec * c
TYPE	223:20	223:29	4	TIFFCodec *
TYPE_NAME	223:20	223:20	5	TIFFCodec
LEAF_NODE	223:20	223:20	6	TIFFCodec
POINTER	223:29	223:29	5	*
LEAF_NODE	223:29	223:29	6	*
NAME	223:31	223:31	4	c
LEAF_NODE	223:31	223:31	5	c
LEAF_NODE	223:32	223:32	3	)
LEAF_NODE	224:0	224:0	2	{
STATEMENTS	225:1	234:1	2	
SIMPLE_DECL	225:1	225:12	3	codec_t * cd ;
VAR_DECL	225:1	225:10	4	codec_t * cd
TYPE	225:1	225:8	5	codec_t *
TYPE_NAME	225:1	225:1	6	codec_t
LEAF_NODE	225:1	225:1	7	codec_t
POINTER	225:8	225:8	6	*
LEAF_NODE	225:8	225:8	7	*
NAME	225:10	225:10	5	cd
LEAF_NODE	225:10	225:10	6	cd
LEAF_NODE	225:12	225:12	4	;
SIMPLE_DECL	226:1	226:14	3	codec_t * pcd ;
VAR_DECL	226:1	226:11	4	codec_t * pcd
TYPE	226:1	226:9	5	codec_t *
TYPE_NAME	226:1	226:1	6	codec_t
LEAF_NODE	226:1	226:1	7	codec_t
POINTER	226:9	226:9	6	*
LEAF_NODE	226:9	226:9	7	*
NAME	226:11	226:11	5	pcd
LEAF_NODE	226:11	226:11	6	pcd
LEAF_NODE	226:14	226:14	4	;
ITERATION	228:1	229:2	3	
KEYWORD	228:1	228:1	4	for
LEAF_NODE	228:1	228:1	5	for
LEAF_NODE	228:5	228:5	4	(
FOR_INIT	228:6	228:29	4	pcd = & registeredCODECS ;
EXPR	228:6	228:6	5	pcd = & registeredCODECS
ASSIGN	228:6	228:12	6	pcd = & registeredCODECS
LVAL	228:6	228:6	7	pcd
FIELD	228:6	228:6	8	pcd
LEAF_NODE	228:6	228:6	9	pcd
ASSIGN_OP	228:10	228:10	7	=
LEAF_NODE	228:10	228:10	8	=
RVAL	228:12	228:12	7	& registeredCODECS
UNARY_EXPR	228:12	228:13	8	& registeredCODECS
UNARY_OPERATOR	228:12	228:12	9	&
LEAF_NODE	228:12	228:12	10	&
FIELD	228:13	228:13	9	registeredCODECS
LEAF_NODE	228:13	228:13	10	registeredCODECS
LEAF_NODE	228:29	228:29	5	;
CONDITION	228:31	228:31	4	( cd = * pcd ) != NULL
EXPR	228:31	228:46	5	( cd = * pcd ) != NULL
LEAF_NODE	228:31	228:31	6	(
ASSIGN	228:32	228:37	6	cd = * pcd
LVAL	228:32	228:32	7	cd
FIELD	228:32	228:32	8	cd
LEAF_NODE	228:32	228:32	9	cd
ASSIGN_OP	228:35	228:35	7	=
LEAF_NODE	228:35	228:35	8	=
RVAL	228:37	228:37	7	* pcd
UNARY_EXPR	228:37	228:38	8	* pcd
UNARY_OPERATOR	228:37	228:37	9	*
LEAF_NODE	228:37	228:37	10	*
FIELD	228:38	228:38	9	pcd
LEAF_NODE	228:38	228:38	10	pcd
LEAF_NODE	228:41	228:41	6	)
EQ_OPERATOR	228:43	228:43	6	!=
LEAF_NODE	228:43	228:43	7	!=
FIELD	228:46	228:46	6	NULL
LEAF_NODE	228:46	228:46	7	NULL
LEAF_NODE	228:50	228:50	4	;
FOR_EXPR	228:52	228:52	4	pcd = & cd -> next
EXPR	228:52	228:52	5	pcd = & cd -> next
ASSIGN	228:52	228:58	6	pcd = & cd -> next
LVAL	228:52	228:52	7	pcd
FIELD	228:52	228:52	8	pcd
LEAF_NODE	228:52	228:52	9	pcd
ASSIGN_OP	228:56	228:56	7	=
LEAF_NODE	228:56	228:56	8	=
RVAL	228:58	228:58	7	& cd -> next
UNARY_EXPR	228:58	228:59	8	& cd -> next
UNARY_OPERATOR	228:58	228:58	9	&
LEAF_NODE	228:58	228:58	10	&
FIELD	228:59	228:63	9	cd -> next
LEAF_NODE	228:59	228:59	10	cd
LEAF_NODE	228:61	228:61	10	->
LEAF_NODE	228:63	228:63	10	next
LEAF_NODE	228:67	228:67	4	)
STATEMENTS	229:2	229:2	4	
SELECTION	229:2	229:21	5	
KEYWORD	229:2	229:2	6	if
LEAF_NODE	229:2	229:2	7	if
LEAF_NODE	229:5	229:5	6	(
CONDITION	229:6	229:6	6	cd -> info == c
EXPR	229:6	229:18	7	cd -> info == c
FIELD	229:6	229:10	8	cd -> info
LEAF_NODE	229:6	229:6	9	cd
LEAF_NODE	229:8	229:8	9	->
LEAF_NODE	229:10	229:10	9	info
EQ_OPERATOR	229:15	229:15	8	==
LEAF_NODE	229:15	229:15	9	==
FIELD	229:18	229:18	8	c
LEAF_NODE	229:18	229:18	9	c
LEAF_NODE	229:19	229:19	6	)
STATEMENTS	229:21	233:2	6	
LEAF_NODE	229:21	229:21	7	{
STATEMENTS	230:3	232:3	7	
EXPR_STATEMENT	230:3	230:18	8	* pcd = cd -> next ;
EXPR	230:3	230:3	9	* pcd = cd -> next
ASSIGN	230:3	230:10	10	* pcd = cd -> next
LVAL	230:3	230:3	11	* pcd
UNARY_EXPR	230:3	230:4	12	* pcd
UNARY_OPERATOR	230:3	230:3	13	*
LEAF_NODE	230:3	230:3	14	*
FIELD	230:4	230:4	13	pcd
LEAF_NODE	230:4	230:4	14	pcd
ASSIGN_OP	230:8	230:8	11	=
LEAF_NODE	230:8	230:8	12	=
RVAL	230:10	230:10	11	cd -> next
FIELD	230:10	230:14	12	cd -> next
LEAF_NODE	230:10	230:10	13	cd
LEAF_NODE	230:12	230:12	13	->
LEAF_NODE	230:14	230:14	13	next
LEAF_NODE	230:18	230:18	9	;
EXPR_STATEMENT	231:3	231:16	8	_TIFFfree ( cd ) ;
EXPR	231:3	231:3	9	_TIFFfree ( cd )
FUNCTION_CALL	231:3	231:15	10	_TIFFfree ( cd )
CALLEE	231:3	231:3	11	_TIFFfree
LEAF_NODE	231:3	231:3	12	_TIFFfree
LEAF_NODE	231:12	231:12	11	(
ARGUMENT	231:13	231:13	11	cd
FIELD	231:13	231:13	12	cd
LEAF_NODE	231:13	231:13	13	cd
LEAF_NODE	231:15	231:15	11	)
LEAF_NODE	231:16	231:16	9	;
JUMP_STATEMENT	232:3	232:9	8	return DESTINATION ;
KEYWORD	232:3	232:3	9	return
LEAF_NODE	232:3	232:3	10	return
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	232:9	232:9	9	;
LEAF_NODE	233:2	233:2	7	}
EXPR_STATEMENT	234:1	235:68	3	TIFFErrorExt ( 0 , "TIFFUnRegisterCODEC" , "Cannot remove compression scheme %s; not registered" , c -> name ) ;
EXPR	234:1	234:1	4	TIFFErrorExt ( 0 , "TIFFUnRegisterCODEC" , "Cannot remove compression scheme %s; not registered" , c -> name )
FUNCTION_CALL	234:1	235:67	5	TIFFErrorExt ( 0 , "TIFFUnRegisterCODEC" , "Cannot remove compression scheme %s; not registered" , c -> name )
CALLEE	234:1	234:1	6	TIFFErrorExt
LEAF_NODE	234:1	234:1	7	TIFFErrorExt
LEAF_NODE	234:13	234:13	6	(
ARGUMENT	234:14	234:14	6	0
FIELD	234:14	234:14	7	0
LEAF_NODE	234:14	234:14	8	0
LEAF_NODE	234:15	234:15	6	,
ARGUMENT	234:17	234:17	6	"TIFFUnRegisterCODEC"
FIELD	234:17	234:17	7	"TIFFUnRegisterCODEC"
LEAF_NODE	234:17	234:17	8	"TIFFUnRegisterCODEC"
LEAF_NODE	234:38	234:38	6	,
ARGUMENT	235:5	235:5	6	"Cannot remove compression scheme %s; not registered"
FIELD	235:5	235:5	7	"Cannot remove compression scheme %s; not registered"
LEAF_NODE	235:5	235:5	8	"Cannot remove compression scheme %s; not registered"
LEAF_NODE	235:58	235:58	6	,
ARGUMENT	235:60	235:60	6	c -> name
FIELD	235:60	235:63	7	c -> name
LEAF_NODE	235:60	235:60	8	c
LEAF_NODE	235:61	235:61	8	->
LEAF_NODE	235:63	235:63	8	name
LEAF_NODE	235:67	235:67	6	)
LEAF_NODE	235:68	235:68	4	;
LEAF_NODE	236:0	236:0	2	}
FUNCTION_DEF	250:0	293:0	1	
RETURN_TYPE	250:0	250:9	2	TIFFCodec *
TYPE_NAME	250:0	250:0	3	TIFFCodec
LEAF_NODE	250:0	250:0	4	TIFFCodec
LEAF_NODE	250:9	250:9	3	*
FUNCTION_NAME	251:0	251:0	2	TIFFGetConfiguredCODECs
LEAF_NODE	251:0	251:0	3	TIFFGetConfiguredCODECs
PARAMETER_LIST	251:23	251:24	2	( )
LEAF_NODE	251:23	251:23	3	(
LEAF_NODE	251:24	251:24	3	)
LEAF_NODE	252:0	252:0	2	{
STATEMENTS	253:1	292:1	2	
SIMPLE_DECL	253:1	253:10	3	int i ; i = 1 ;
VAR_DECL	253:1	253:5	4	int i ; i = 1
TYPE	253:1	253:1	5	int
TYPE_NAME	253:1	253:1	6	int
LEAF_NODE	253:1	253:1	7	int
NAME	253:5	253:5	5	i
LEAF_NODE	253:5	253:5	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	253:5	253:5	5	i = 1
ASSIGN	253:5	253:9	6	i = 1
LVAL	253:5	253:5	7	i
NAME	253:5	253:5	8	i
LEAF_NODE	253:5	253:5	9	i
ASSIGN_OP	253:7	253:7	7	=
LEAF_NODE	253:7	253:7	8	=
RVAL	253:9	253:9	7	1
FIELD	253:9	253:9	8	1
LEAF_NODE	253:9	253:9	9	1
LEAF_NODE	253:10	253:10	4	;
SIMPLE_DECL	254:1	254:12	3	codec_t * cd ;
VAR_DECL	254:1	254:10	4	codec_t * cd
TYPE	254:1	254:9	5	codec_t *
TYPE_NAME	254:1	254:1	6	codec_t
LEAF_NODE	254:1	254:1	7	codec_t
POINTER	254:9	254:9	6	*
LEAF_NODE	254:9	254:9	7	*
NAME	254:10	254:10	5	cd
LEAF_NODE	254:10	254:10	6	cd
LEAF_NODE	254:12	254:12	4	;
SIMPLE_DECL	255:1	255:19	3	const TIFFCodec * c ;
VAR_DECL	255:1	255:18	4	const TIFFCodec * c
TYPE	255:1	255:16	5	const TIFFCodec *
TYPE_NAME	255:1	255:7	6	const TIFFCodec
LEAF_NODE	255:1	255:1	7	const
LEAF_NODE	255:7	255:7	7	TIFFCodec
POINTER	255:16	255:16	6	*
LEAF_NODE	255:16	255:16	7	*
NAME	255:18	255:18	5	c
LEAF_NODE	255:18	255:18	6	c
LEAF_NODE	255:19	255:19	4	;
SIMPLE_DECL	256:1	256:25	3	TIFFCodec * codecs ; codecs = NULL ;
VAR_DECL	256:1	256:12	4	TIFFCodec * codecs ; codecs = NULL
TYPE	256:1	256:10	5	TIFFCodec *
TYPE_NAME	256:1	256:1	6	TIFFCodec
LEAF_NODE	256:1	256:1	7	TIFFCodec
POINTER	256:10	256:10	6	*
LEAF_NODE	256:10	256:10	7	*
NAME	256:12	256:12	5	codecs
LEAF_NODE	256:12	256:12	6	codecs
LEAF_NODE	0:0	0:0	5	;
INIT	256:12	256:12	5	codecs = NULL
ASSIGN	256:12	256:21	6	codecs = NULL
LVAL	256:12	256:12	7	codecs
NAME	256:12	256:12	8	codecs
LEAF_NODE	256:12	256:12	9	codecs
ASSIGN_OP	256:19	256:19	7	=
LEAF_NODE	256:19	256:19	8	=
RVAL	256:21	256:21	7	NULL
FIELD	256:21	256:21	8	NULL
LEAF_NODE	256:21	256:21	9	NULL
LEAF_NODE	256:25	256:25	4	;
SIMPLE_DECL	257:1	257:22	3	TIFFCodec * new_codecs ;
VAR_DECL	257:1	257:12	4	TIFFCodec * new_codecs
TYPE	257:1	257:10	5	TIFFCodec *
TYPE_NAME	257:1	257:1	6	TIFFCodec
LEAF_NODE	257:1	257:1	7	TIFFCodec
POINTER	257:10	257:10	6	*
LEAF_NODE	257:10	257:10	7	*
NAME	257:12	257:12	5	new_codecs
LEAF_NODE	257:12	257:12	6	new_codecs
LEAF_NODE	257:22	257:22	4	;
ITERATION	259:1	259:48	3	
KEYWORD	259:1	259:1	4	for
LEAF_NODE	259:1	259:1	5	for
LEAF_NODE	259:5	259:5	4	(
FOR_INIT	259:6	259:27	4	cd = registeredCODECS ;
EXPR	259:6	259:6	5	cd = registeredCODECS
ASSIGN	259:6	259:11	6	cd = registeredCODECS
LVAL	259:6	259:6	7	cd
FIELD	259:6	259:6	8	cd
LEAF_NODE	259:6	259:6	9	cd
ASSIGN_OP	259:9	259:9	7	=
LEAF_NODE	259:9	259:9	8	=
RVAL	259:11	259:11	7	registeredCODECS
FIELD	259:11	259:11	8	registeredCODECS
LEAF_NODE	259:11	259:11	9	registeredCODECS
LEAF_NODE	259:27	259:27	5	;
CONDITION	259:29	259:29	4	cd
EXPR	259:29	259:29	5	cd
FIELD	259:29	259:29	6	cd
LEAF_NODE	259:29	259:29	7	cd
LEAF_NODE	259:31	259:31	4	;
FOR_EXPR	259:33	259:33	4	cd = cd -> next
EXPR	259:33	259:33	5	cd = cd -> next
ASSIGN	259:33	259:38	6	cd = cd -> next
LVAL	259:33	259:33	7	cd
FIELD	259:33	259:33	8	cd
LEAF_NODE	259:33	259:33	9	cd
ASSIGN_OP	259:36	259:36	7	=
LEAF_NODE	259:36	259:36	8	=
RVAL	259:38	259:38	7	cd -> next
FIELD	259:38	259:42	8	cd -> next
LEAF_NODE	259:38	259:38	9	cd
LEAF_NODE	259:40	259:40	9	->
LEAF_NODE	259:42	259:42	9	next
LEAF_NODE	259:46	259:46	4	)
STATEMENTS	259:48	269:1	4	
LEAF_NODE	259:48	259:48	5	{
STATEMENTS	260:2	268:2	5	
EXPR_STATEMENT	260:2	261:46	6	new_codecs = ( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) ) ;
EXPR	260:2	260:2	7	new_codecs = ( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
ASSIGN	260:2	260:15	8	new_codecs = ( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
LVAL	260:2	260:2	9	new_codecs
FIELD	260:2	260:2	10	new_codecs
LEAF_NODE	260:2	260:2	11	new_codecs
ASSIGN_OP	260:13	260:13	9	=
LEAF_NODE	260:13	260:13	10	=
RVAL	260:15	261:3	9	( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
LEAF_NODE	260:15	260:15	10	(
TYPE_NAME	260:16	260:16	10	TIFFCodec
LEAF_NODE	260:16	260:16	11	TIFFCodec
LEAF_NODE	260:26	260:26	10	*
LEAF_NODE	260:27	260:27	10	)
FUNCTION_CALL	261:3	261:45	10	_TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
CALLEE	261:3	261:3	11	_TIFFrealloc
LEAF_NODE	261:3	261:3	12	_TIFFrealloc
LEAF_NODE	261:15	261:15	11	(
ARGUMENT	261:16	261:16	11	codecs
FIELD	261:16	261:16	12	codecs
LEAF_NODE	261:16	261:16	13	codecs
LEAF_NODE	261:22	261:22	11	,
ARGUMENT	261:24	261:28	11	i * sizeof ( TIFFCodec )
FIELD	261:24	261:24	12	i
LEAF_NODE	261:24	261:24	13	i
LEAF_NODE	261:26	261:26	12	*
FUNCTION_CALL	261:28	261:44	12	sizeof ( TIFFCodec )
CALLEE	261:28	261:28	13	sizeof
LEAF_NODE	261:28	261:28	14	sizeof
LEAF_NODE	261:34	261:34	13	(
ARGUMENT	261:35	261:35	13	TIFFCodec
FIELD	261:35	261:35	14	TIFFCodec
LEAF_NODE	261:35	261:35	15	TIFFCodec
LEAF_NODE	261:44	261:44	13	)
LEAF_NODE	261:45	261:45	11	)
LEAF_NODE	261:46	261:46	7	;
SELECTION	262:2	262:19	6	
KEYWORD	262:2	262:2	7	if
LEAF_NODE	262:2	262:2	8	if
LEAF_NODE	262:5	262:5	7	(
CONDITION	262:6	262:6	7	! new_codecs
EXPR	262:6	262:6	8	! new_codecs
UNARY_EXPR	262:6	262:7	9	! new_codecs
UNARY_OPERATOR	262:6	262:6	10	!
LEAF_NODE	262:6	262:6	11	!
FIELD	262:7	262:7	10	new_codecs
LEAF_NODE	262:7	262:7	11	new_codecs
LEAF_NODE	262:17	262:17	7	)
STATEMENTS	262:19	265:2	7	
LEAF_NODE	262:19	262:19	8	{
STATEMENTS	263:3	264:3	8	
EXPR_STATEMENT	263:3	263:21	9	_TIFFfree ( codecs ) ;
EXPR	263:3	263:3	10	_TIFFfree ( codecs )
FUNCTION_CALL	263:3	263:20	11	_TIFFfree ( codecs )
CALLEE	263:3	263:3	12	_TIFFfree
LEAF_NODE	263:3	263:3	13	_TIFFfree
LEAF_NODE	263:13	263:13	12	(
ARGUMENT	263:14	263:14	12	codecs
FIELD	263:14	263:14	13	codecs
LEAF_NODE	263:14	263:14	14	codecs
LEAF_NODE	263:20	263:20	12	)
LEAF_NODE	263:21	263:21	10	;
JUMP_STATEMENT	264:3	264:14	9	return NULL ;
KEYWORD	264:3	264:3	10	return
LEAF_NODE	264:3	264:3	11	return
DESTINATION	264:10	264:10	10	NULL
EXPR	264:10	264:10	11	NULL
FIELD	264:10	264:10	12	NULL
LEAF_NODE	264:10	264:10	13	NULL
LEAF_NODE	264:14	264:14	10	;
LEAF_NODE	265:2	265:2	8	}
EXPR_STATEMENT	266:2	266:21	6	codecs = new_codecs ;
EXPR	266:2	266:2	7	codecs = new_codecs
ASSIGN	266:2	266:11	8	codecs = new_codecs
LVAL	266:2	266:2	9	codecs
FIELD	266:2	266:2	10	codecs
LEAF_NODE	266:2	266:2	11	codecs
ASSIGN_OP	266:9	266:9	9	=
LEAF_NODE	266:9	266:9	10	=
RVAL	266:11	266:11	9	new_codecs
FIELD	266:11	266:11	10	new_codecs
LEAF_NODE	266:11	266:11	11	new_codecs
LEAF_NODE	266:21	266:21	7	;
EXPR_STATEMENT	267:2	267:52	6	_TIFFmemcpy ( codecs + i - 1 , cd , sizeof ( TIFFCodec ) ) ;
EXPR	267:2	267:2	7	_TIFFmemcpy ( codecs + i - 1 , cd , sizeof ( TIFFCodec ) )
FUNCTION_CALL	267:2	267:51	8	_TIFFmemcpy ( codecs + i - 1 , cd , sizeof ( TIFFCodec ) )
CALLEE	267:2	267:2	9	_TIFFmemcpy
LEAF_NODE	267:2	267:2	10	_TIFFmemcpy
LEAF_NODE	267:13	267:13	9	(
ARGUMENT	267:14	267:27	9	codecs + i - 1
FIELD	267:14	267:14	10	codecs
LEAF_NODE	267:14	267:14	11	codecs
LEAF_NODE	267:21	267:21	10	+
FIELD	267:23	267:23	10	i
LEAF_NODE	267:23	267:23	11	i
LEAF_NODE	267:25	267:25	10	-
FIELD	267:27	267:27	10	1
LEAF_NODE	267:27	267:27	11	1
LEAF_NODE	267:28	267:28	9	,
ARGUMENT	267:30	267:30	9	cd
FIELD	267:30	267:30	10	cd
LEAF_NODE	267:30	267:30	11	cd
LEAF_NODE	267:32	267:32	9	,
ARGUMENT	267:34	267:34	9	sizeof ( TIFFCodec )
FUNCTION_CALL	267:34	267:50	10	sizeof ( TIFFCodec )
CALLEE	267:34	267:34	11	sizeof
LEAF_NODE	267:34	267:34	12	sizeof
LEAF_NODE	267:40	267:40	11	(
ARGUMENT	267:41	267:41	11	TIFFCodec
FIELD	267:41	267:41	12	TIFFCodec
LEAF_NODE	267:41	267:41	13	TIFFCodec
LEAF_NODE	267:50	267:50	11	)
LEAF_NODE	267:51	267:51	9	)
LEAF_NODE	267:52	267:52	7	;
EXPR_STATEMENT	268:2	268:5	6	i ++ ;
EXPR	268:2	268:2	7	i ++
FIELD	268:2	268:3	8	i ++
LEAF_NODE	268:2	268:2	9	i
LEAF_NODE	268:3	268:3	9	++
LEAF_NODE	268:5	268:5	7	;
LEAF_NODE	269:1	269:1	5	}
ITERATION	270:1	270:44	3	
KEYWORD	270:1	270:1	4	for
LEAF_NODE	270:1	270:1	5	for
LEAF_NODE	270:5	270:5	4	(
FOR_INIT	270:6	270:28	4	c = _TIFFBuiltinCODECS ;
EXPR	270:6	270:6	5	c = _TIFFBuiltinCODECS
ASSIGN	270:6	270:10	6	c = _TIFFBuiltinCODECS
LVAL	270:6	270:6	7	c
FIELD	270:6	270:6	8	c
LEAF_NODE	270:6	270:6	9	c
ASSIGN_OP	270:8	270:8	7	=
LEAF_NODE	270:8	270:8	8	=
RVAL	270:10	270:10	7	_TIFFBuiltinCODECS
FIELD	270:10	270:10	8	_TIFFBuiltinCODECS
LEAF_NODE	270:10	270:10	9	_TIFFBuiltinCODECS
LEAF_NODE	270:28	270:28	5	;
CONDITION	270:30	270:30	4	c -> name
EXPR	270:30	270:30	5	c -> name
FIELD	270:30	270:33	6	c -> name
LEAF_NODE	270:30	270:30	7	c
LEAF_NODE	270:31	270:31	7	->
LEAF_NODE	270:33	270:33	7	name
LEAF_NODE	270:37	270:37	4	;
FOR_EXPR	270:39	270:39	4	c ++
EXPR	270:39	270:39	5	c ++
FIELD	270:39	270:40	6	c ++
LEAF_NODE	270:39	270:39	7	c
LEAF_NODE	270:40	270:40	7	++
LEAF_NODE	270:42	270:42	4	)
STATEMENTS	270:44	282:1	4	
LEAF_NODE	270:44	270:44	5	{
STATEMENTS	271:2	271:2	5	
SELECTION	271:2	271:40	6	
KEYWORD	271:2	271:2	7	if
LEAF_NODE	271:2	271:2	8	if
LEAF_NODE	271:5	271:5	7	(
CONDITION	271:6	271:6	7	TIFFIsCODECConfigured ( c -> scheme )
EXPR	271:6	271:6	8	TIFFIsCODECConfigured ( c -> scheme )
FUNCTION_CALL	271:6	271:37	9	TIFFIsCODECConfigured ( c -> scheme )
CALLEE	271:6	271:6	10	TIFFIsCODECConfigured
LEAF_NODE	271:6	271:6	11	TIFFIsCODECConfigured
LEAF_NODE	271:27	271:27	10	(
ARGUMENT	271:28	271:28	10	c -> scheme
FIELD	271:28	271:31	11	c -> scheme
LEAF_NODE	271:28	271:28	12	c
LEAF_NODE	271:29	271:29	12	->
LEAF_NODE	271:31	271:31	12	scheme
LEAF_NODE	271:37	271:37	10	)
LEAF_NODE	271:38	271:38	7	)
STATEMENTS	271:40	281:2	7	
LEAF_NODE	271:40	271:40	8	{
STATEMENTS	272:3	280:3	8	
EXPR_STATEMENT	272:3	273:47	9	new_codecs = ( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) ) ;
EXPR	272:3	272:3	10	new_codecs = ( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
ASSIGN	272:3	272:16	11	new_codecs = ( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
LVAL	272:3	272:3	12	new_codecs
FIELD	272:3	272:3	13	new_codecs
LEAF_NODE	272:3	272:3	14	new_codecs
ASSIGN_OP	272:14	272:14	12	=
LEAF_NODE	272:14	272:14	13	=
RVAL	272:16	273:4	12	( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
LEAF_NODE	272:16	272:16	13	(
TYPE_NAME	272:17	272:17	13	TIFFCodec
LEAF_NODE	272:17	272:17	14	TIFFCodec
LEAF_NODE	272:27	272:27	13	*
LEAF_NODE	272:28	272:28	13	)
FUNCTION_CALL	273:4	273:46	13	_TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
CALLEE	273:4	273:4	14	_TIFFrealloc
LEAF_NODE	273:4	273:4	15	_TIFFrealloc
LEAF_NODE	273:16	273:16	14	(
ARGUMENT	273:17	273:17	14	codecs
FIELD	273:17	273:17	15	codecs
LEAF_NODE	273:17	273:17	16	codecs
LEAF_NODE	273:23	273:23	14	,
ARGUMENT	273:25	273:29	14	i * sizeof ( TIFFCodec )
FIELD	273:25	273:25	15	i
LEAF_NODE	273:25	273:25	16	i
LEAF_NODE	273:27	273:27	15	*
FUNCTION_CALL	273:29	273:45	15	sizeof ( TIFFCodec )
CALLEE	273:29	273:29	16	sizeof
LEAF_NODE	273:29	273:29	17	sizeof
LEAF_NODE	273:35	273:35	16	(
ARGUMENT	273:36	273:36	16	TIFFCodec
FIELD	273:36	273:36	17	TIFFCodec
LEAF_NODE	273:36	273:36	18	TIFFCodec
LEAF_NODE	273:45	273:45	16	)
LEAF_NODE	273:46	273:46	14	)
LEAF_NODE	273:47	273:47	10	;
SELECTION	274:3	274:20	9	
KEYWORD	274:3	274:3	10	if
LEAF_NODE	274:3	274:3	11	if
LEAF_NODE	274:6	274:6	10	(
CONDITION	274:7	274:7	10	! new_codecs
EXPR	274:7	274:7	11	! new_codecs
UNARY_EXPR	274:7	274:8	12	! new_codecs
UNARY_OPERATOR	274:7	274:7	13	!
LEAF_NODE	274:7	274:7	14	!
FIELD	274:8	274:8	13	new_codecs
LEAF_NODE	274:8	274:8	14	new_codecs
LEAF_NODE	274:18	274:18	10	)
STATEMENTS	274:20	277:3	10	
LEAF_NODE	274:20	274:20	11	{
STATEMENTS	275:4	276:4	11	
EXPR_STATEMENT	275:4	275:22	12	_TIFFfree ( codecs ) ;
EXPR	275:4	275:4	13	_TIFFfree ( codecs )
FUNCTION_CALL	275:4	275:21	14	_TIFFfree ( codecs )
CALLEE	275:4	275:4	15	_TIFFfree
LEAF_NODE	275:4	275:4	16	_TIFFfree
LEAF_NODE	275:14	275:14	15	(
ARGUMENT	275:15	275:15	15	codecs
FIELD	275:15	275:15	16	codecs
LEAF_NODE	275:15	275:15	17	codecs
LEAF_NODE	275:21	275:21	15	)
LEAF_NODE	275:22	275:22	13	;
JUMP_STATEMENT	276:4	276:15	12	return NULL ;
KEYWORD	276:4	276:4	13	return
LEAF_NODE	276:4	276:4	14	return
DESTINATION	276:11	276:11	13	NULL
EXPR	276:11	276:11	14	NULL
FIELD	276:11	276:11	15	NULL
LEAF_NODE	276:11	276:11	16	NULL
LEAF_NODE	276:15	276:15	13	;
LEAF_NODE	277:3	277:3	11	}
EXPR_STATEMENT	278:3	278:22	9	codecs = new_codecs ;
EXPR	278:3	278:3	10	codecs = new_codecs
ASSIGN	278:3	278:12	11	codecs = new_codecs
LVAL	278:3	278:3	12	codecs
FIELD	278:3	278:3	13	codecs
LEAF_NODE	278:3	278:3	14	codecs
ASSIGN_OP	278:10	278:10	12	=
LEAF_NODE	278:10	278:10	13	=
RVAL	278:12	278:12	12	new_codecs
FIELD	278:12	278:12	13	new_codecs
LEAF_NODE	278:12	278:12	14	new_codecs
LEAF_NODE	278:22	278:22	10	;
EXPR_STATEMENT	279:3	279:65	9	_TIFFmemcpy ( codecs + i - 1 , ( const void * ) c , sizeof ( TIFFCodec ) ) ;
EXPR	279:3	279:3	10	_TIFFmemcpy ( codecs + i - 1 , ( const void * ) c , sizeof ( TIFFCodec ) )
FUNCTION_CALL	279:3	279:64	11	_TIFFmemcpy ( codecs + i - 1 , ( const void * ) c , sizeof ( TIFFCodec ) )
CALLEE	279:3	279:3	12	_TIFFmemcpy
LEAF_NODE	279:3	279:3	13	_TIFFmemcpy
LEAF_NODE	279:14	279:14	12	(
ARGUMENT	279:15	279:28	12	codecs + i - 1
FIELD	279:15	279:15	13	codecs
LEAF_NODE	279:15	279:15	14	codecs
LEAF_NODE	279:22	279:22	13	+
FIELD	279:24	279:24	13	i
LEAF_NODE	279:24	279:24	14	i
LEAF_NODE	279:26	279:26	13	-
FIELD	279:28	279:28	13	1
LEAF_NODE	279:28	279:28	14	1
LEAF_NODE	279:29	279:29	12	,
ARGUMENT	279:31	279:44	12	( const void * ) c
LEAF_NODE	279:31	279:31	13	(
TYPE_NAME	279:32	279:38	13	const void
LEAF_NODE	279:32	279:32	14	const
LEAF_NODE	279:38	279:38	14	void
LEAF_NODE	279:42	279:42	13	*
LEAF_NODE	279:43	279:43	13	)
FIELD	279:44	279:44	13	c
LEAF_NODE	279:44	279:44	14	c
LEAF_NODE	279:45	279:45	12	,
ARGUMENT	279:47	279:47	12	sizeof ( TIFFCodec )
FUNCTION_CALL	279:47	279:63	13	sizeof ( TIFFCodec )
CALLEE	279:47	279:47	14	sizeof
LEAF_NODE	279:47	279:47	15	sizeof
LEAF_NODE	279:53	279:53	14	(
ARGUMENT	279:54	279:54	14	TIFFCodec
FIELD	279:54	279:54	15	TIFFCodec
LEAF_NODE	279:54	279:54	16	TIFFCodec
LEAF_NODE	279:63	279:63	14	)
LEAF_NODE	279:64	279:64	12	)
LEAF_NODE	279:65	279:65	10	;
EXPR_STATEMENT	280:3	280:6	9	i ++ ;
EXPR	280:3	280:3	10	i ++
FIELD	280:3	280:4	11	i ++
LEAF_NODE	280:3	280:3	12	i
LEAF_NODE	280:4	280:4	12	++
LEAF_NODE	280:6	280:6	10	;
LEAF_NODE	281:2	281:2	8	}
LEAF_NODE	282:1	282:1	5	}
EXPR_STATEMENT	284:1	284:71	3	new_codecs = ( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) ) ;
EXPR	284:1	284:1	4	new_codecs = ( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
ASSIGN	284:1	284:14	5	new_codecs = ( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
LVAL	284:1	284:1	6	new_codecs
FIELD	284:1	284:1	7	new_codecs
LEAF_NODE	284:1	284:1	8	new_codecs
ASSIGN_OP	284:12	284:12	6	=
LEAF_NODE	284:12	284:12	7	=
RVAL	284:14	284:28	6	( TIFFCodec * ) _TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
LEAF_NODE	284:14	284:14	7	(
TYPE_NAME	284:15	284:15	7	TIFFCodec
LEAF_NODE	284:15	284:15	8	TIFFCodec
LEAF_NODE	284:25	284:25	7	*
LEAF_NODE	284:26	284:26	7	)
FUNCTION_CALL	284:28	284:70	7	_TIFFrealloc ( codecs , i * sizeof ( TIFFCodec ) )
CALLEE	284:28	284:28	8	_TIFFrealloc
LEAF_NODE	284:28	284:28	9	_TIFFrealloc
LEAF_NODE	284:40	284:40	8	(
ARGUMENT	284:41	284:41	8	codecs
FIELD	284:41	284:41	9	codecs
LEAF_NODE	284:41	284:41	10	codecs
LEAF_NODE	284:47	284:47	8	,
ARGUMENT	284:49	284:53	8	i * sizeof ( TIFFCodec )
FIELD	284:49	284:49	9	i
LEAF_NODE	284:49	284:49	10	i
LEAF_NODE	284:51	284:51	9	*
FUNCTION_CALL	284:53	284:69	9	sizeof ( TIFFCodec )
CALLEE	284:53	284:53	10	sizeof
LEAF_NODE	284:53	284:53	11	sizeof
LEAF_NODE	284:59	284:59	10	(
ARGUMENT	284:60	284:60	10	TIFFCodec
FIELD	284:60	284:60	11	TIFFCodec
LEAF_NODE	284:60	284:60	12	TIFFCodec
LEAF_NODE	284:69	284:69	10	)
LEAF_NODE	284:70	284:70	8	)
LEAF_NODE	284:71	284:71	4	;
SELECTION	285:1	285:18	3	
KEYWORD	285:1	285:1	4	if
LEAF_NODE	285:1	285:1	5	if
LEAF_NODE	285:4	285:4	4	(
CONDITION	285:5	285:5	4	! new_codecs
EXPR	285:5	285:5	5	! new_codecs
UNARY_EXPR	285:5	285:6	6	! new_codecs
UNARY_OPERATOR	285:5	285:5	7	!
LEAF_NODE	285:5	285:5	8	!
FIELD	285:6	285:6	7	new_codecs
LEAF_NODE	285:6	285:6	8	new_codecs
LEAF_NODE	285:16	285:16	4	)
STATEMENTS	285:18	288:1	4	
LEAF_NODE	285:18	285:18	5	{
STATEMENTS	286:2	287:2	5	
EXPR_STATEMENT	286:2	286:20	6	_TIFFfree ( codecs ) ;
EXPR	286:2	286:2	7	_TIFFfree ( codecs )
FUNCTION_CALL	286:2	286:19	8	_TIFFfree ( codecs )
CALLEE	286:2	286:2	9	_TIFFfree
LEAF_NODE	286:2	286:2	10	_TIFFfree
LEAF_NODE	286:12	286:12	9	(
ARGUMENT	286:13	286:13	9	codecs
FIELD	286:13	286:13	10	codecs
LEAF_NODE	286:13	286:13	11	codecs
LEAF_NODE	286:19	286:19	9	)
LEAF_NODE	286:20	286:20	7	;
JUMP_STATEMENT	287:2	287:13	6	return NULL ;
KEYWORD	287:2	287:2	7	return
LEAF_NODE	287:2	287:2	8	return
DESTINATION	287:9	287:9	7	NULL
EXPR	287:9	287:9	8	NULL
FIELD	287:9	287:9	9	NULL
LEAF_NODE	287:9	287:9	10	NULL
LEAF_NODE	287:13	287:13	7	;
LEAF_NODE	288:1	288:1	5	}
EXPR_STATEMENT	289:1	289:20	3	codecs = new_codecs ;
EXPR	289:1	289:1	4	codecs = new_codecs
ASSIGN	289:1	289:10	5	codecs = new_codecs
LVAL	289:1	289:1	6	codecs
FIELD	289:1	289:1	7	codecs
LEAF_NODE	289:1	289:1	8	codecs
ASSIGN_OP	289:8	289:8	6	=
LEAF_NODE	289:8	289:8	7	=
RVAL	289:10	289:10	6	new_codecs
FIELD	289:10	289:10	7	new_codecs
LEAF_NODE	289:10	289:10	8	new_codecs
LEAF_NODE	289:20	289:20	4	;
EXPR_STATEMENT	290:1	290:50	3	_TIFFmemset ( codecs + i - 1 , 0 , sizeof ( TIFFCodec ) ) ;
EXPR	290:1	290:1	4	_TIFFmemset ( codecs + i - 1 , 0 , sizeof ( TIFFCodec ) )
FUNCTION_CALL	290:1	290:49	5	_TIFFmemset ( codecs + i - 1 , 0 , sizeof ( TIFFCodec ) )
CALLEE	290:1	290:1	6	_TIFFmemset
LEAF_NODE	290:1	290:1	7	_TIFFmemset
LEAF_NODE	290:12	290:12	6	(
ARGUMENT	290:13	290:26	6	codecs + i - 1
FIELD	290:13	290:13	7	codecs
LEAF_NODE	290:13	290:13	8	codecs
LEAF_NODE	290:20	290:20	7	+
FIELD	290:22	290:22	7	i
LEAF_NODE	290:22	290:22	8	i
LEAF_NODE	290:24	290:24	7	-
FIELD	290:26	290:26	7	1
LEAF_NODE	290:26	290:26	8	1
LEAF_NODE	290:27	290:27	6	,
ARGUMENT	290:29	290:29	6	0
FIELD	290:29	290:29	7	0
LEAF_NODE	290:29	290:29	8	0
LEAF_NODE	290:30	290:30	6	,
ARGUMENT	290:32	290:32	6	sizeof ( TIFFCodec )
FUNCTION_CALL	290:32	290:48	7	sizeof ( TIFFCodec )
CALLEE	290:32	290:32	8	sizeof
LEAF_NODE	290:32	290:32	9	sizeof
LEAF_NODE	290:38	290:38	8	(
ARGUMENT	290:39	290:39	8	TIFFCodec
FIELD	290:39	290:39	9	TIFFCodec
LEAF_NODE	290:39	290:39	10	TIFFCodec
LEAF_NODE	290:48	290:48	8	)
LEAF_NODE	290:49	290:49	6	)
LEAF_NODE	290:50	290:50	4	;
JUMP_STATEMENT	292:1	292:14	3	return codecs ;
KEYWORD	292:1	292:1	4	return
LEAF_NODE	292:1	292:1	5	return
DESTINATION	292:8	292:8	4	codecs
EXPR	292:8	292:8	5	codecs
FIELD	292:8	292:8	6	codecs
LEAF_NODE	292:8	292:8	7	codecs
LEAF_NODE	292:14	292:14	4	;
LEAF_NODE	293:0	293:0	2	}
