SOURCE_FILE	68:0	187:0	0	
FUNCTION_DEF	68:0	83:0	1	
RETURN_TYPE	68:0	68:7	2	static int
LEAF_NODE	68:0	68:0	3	static
TYPE_NAME	68:7	68:7	3	int
LEAF_NODE	68:7	68:7	4	int
FUNCTION_NAME	69:0	69:0	2	ThunderSetupDecode
LEAF_NODE	69:0	69:0	3	ThunderSetupDecode
PARAMETER_LIST	69:18	69:28	2	( TIFF * tif )
LEAF_NODE	69:18	69:18	3	(
PARAMETER_DECL	69:19	69:25	3	TIFF * tif
TYPE	69:19	69:23	4	TIFF *
TYPE_NAME	69:19	69:19	5	TIFF
LEAF_NODE	69:19	69:19	6	TIFF
POINTER	69:23	69:23	5	*
LEAF_NODE	69:23	69:23	6	*
NAME	69:25	69:25	4	tif
LEAF_NODE	69:25	69:25	5	tif
LEAF_NODE	69:28	69:28	3	)
LEAF_NODE	70:0	70:0	2	{
STATEMENTS	71:1	82:1	2	
LEAF_NODE	71:1	71:1	3	static
SIMPLE_DECL	71:8	71:50	3	const char [ ] module ; module = "ThunderSetupDecode" ;
VAR_DECL	71:8	71:19	4	const char [ ] module ; module = "ThunderSetupDecode"
TYPE	71:8	71:25	5	const char [ ]
TYPE_NAME	71:8	71:14	6	const char
LEAF_NODE	71:8	71:8	7	const
LEAF_NODE	71:14	71:14	7	char
TYPE_SUFFIX	71:25	71:26	6	[ ]
LEAF_NODE	71:25	71:25	7	[
LEAF_NODE	71:26	71:26	7	]
NAME	71:19	71:19	5	module
LEAF_NODE	71:19	71:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	71:19	71:19	5	module = "ThunderSetupDecode"
ASSIGN	71:19	71:30	6	module = "ThunderSetupDecode"
LVAL	71:19	71:19	7	module
NAME	71:19	71:19	8	module
LEAF_NODE	71:19	71:19	9	module
ASSIGN_OP	71:28	71:28	7	=
LEAF_NODE	71:28	71:28	8	=
RVAL	71:30	71:30	7	"ThunderSetupDecode"
FIELD	71:30	71:30	8	"ThunderSetupDecode"
LEAF_NODE	71:30	71:30	9	"ThunderSetupDecode"
LEAF_NODE	71:50	71:50	4	;
SELECTION	73:8	74:8	3	
KEYWORD	73:8	73:8	4	if
LEAF_NODE	73:8	73:8	5	if
LEAF_NODE	73:10	73:10	4	(
CONDITION	73:12	73:12	4	tif -> tif_dir . td_bitspersample != 4
EXPR	73:12	73:45	5	tif -> tif_dir . td_bitspersample != 4
FIELD	73:12	73:25	6	tif -> tif_dir . td_bitspersample
LEAF_NODE	73:12	73:12	7	tif
LEAF_NODE	73:15	73:15	7	->
LEAF_NODE	73:17	73:17	7	tif_dir
LEAF_NODE	73:24	73:24	7	.
LEAF_NODE	73:25	73:25	7	td_bitspersample
EQ_OPERATOR	73:42	73:42	6	!=
LEAF_NODE	73:42	73:42	7	!=
FIELD	73:45	73:45	6	4
LEAF_NODE	73:45	73:45	7	4
LEAF_NODE	73:47	73:47	4	)
STATEMENTS	74:8	79:8	4	
LEAF_NODE	74:8	74:8	5	{
STATEMENTS	75:16	78:16	5	
EXPR_STATEMENT	75:16	77:66	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample." , ( int ) tif -> tif_dir . td_bitspersample ) ;
EXPR	75:16	75:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample." , ( int ) tif -> tif_dir . td_bitspersample )
FUNCTION_CALL	75:16	77:65	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample." , ( int ) tif -> tif_dir . td_bitspersample )
CALLEE	75:16	75:16	9	TIFFErrorExt
LEAF_NODE	75:16	75:16	10	TIFFErrorExt
LEAF_NODE	75:28	75:28	9	(
ARGUMENT	75:29	75:29	9	tif -> tif_clientdata
FIELD	75:29	75:34	10	tif -> tif_clientdata
LEAF_NODE	75:29	75:29	11	tif
LEAF_NODE	75:32	75:32	11	->
LEAF_NODE	75:34	75:34	11	tif_clientdata
LEAF_NODE	75:48	75:48	9	,
ARGUMENT	75:50	75:50	9	module
FIELD	75:50	75:50	10	module
LEAF_NODE	75:50	75:50	11	module
LEAF_NODE	75:56	75:56	9	,
ARGUMENT	76:29	76:29	9	"Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample."
FIELD	76:29	76:29	10	"Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample."
LEAF_NODE	76:29	76:29	11	"Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample."
LEAF_NODE	76:110	76:110	9	,
ARGUMENT	77:29	77:35	9	( int ) tif -> tif_dir . td_bitspersample
LEAF_NODE	77:29	77:29	10	(
TYPE_NAME	77:30	77:30	10	int
LEAF_NODE	77:30	77:30	11	int
LEAF_NODE	77:33	77:33	10	)
FIELD	77:35	77:48	10	tif -> tif_dir . td_bitspersample
LEAF_NODE	77:35	77:35	11	tif
LEAF_NODE	77:38	77:38	11	->
LEAF_NODE	77:40	77:40	11	tif_dir
LEAF_NODE	77:47	77:47	11	.
LEAF_NODE	77:48	77:48	11	td_bitspersample
LEAF_NODE	77:65	77:65	9	)
LEAF_NODE	77:66	77:66	7	;
JUMP_STATEMENT	78:16	78:24	6	return 0 ;
KEYWORD	78:16	78:16	7	return
LEAF_NODE	78:16	78:16	8	return
DESTINATION	78:23	78:23	7	0
EXPR	78:23	78:23	8	0
FIELD	78:23	78:23	9	0
LEAF_NODE	78:23	78:23	10	0
LEAF_NODE	78:24	78:24	7	;
LEAF_NODE	79:8	79:8	5	}
JUMP_STATEMENT	82:1	82:11	3	return ( 1 ) ;
KEYWORD	82:1	82:1	4	return
LEAF_NODE	82:1	82:1	5	return
DESTINATION	82:8	82:8	4	( 1 )
EXPR	82:8	82:10	5	( 1 )
LEAF_NODE	82:8	82:8	6	(
FIELD	82:9	82:9	6	1
LEAF_NODE	82:9	82:9	7	1
LEAF_NODE	82:10	82:10	6	)
LEAF_NODE	82:11	82:11	4	;
LEAF_NODE	83:0	83:0	2	}
FUNCTION_DEF	85:0	164:0	1	
RETURN_TYPE	85:0	85:7	2	static int
LEAF_NODE	85:0	85:0	3	static
TYPE_NAME	85:7	85:7	3	int
LEAF_NODE	85:7	85:7	4	int
FUNCTION_NAME	86:0	86:0	2	ThunderDecode
LEAF_NODE	86:0	86:0	3	ThunderDecode
PARAMETER_LIST	86:13	86:54	2	( TIFF * tif , uint8 * op , tmsize_t maxpixels )
LEAF_NODE	86:13	86:13	3	(
PARAMETER_DECL	86:14	86:20	3	TIFF * tif
TYPE	86:14	86:18	4	TIFF *
TYPE_NAME	86:14	86:14	5	TIFF
LEAF_NODE	86:14	86:14	6	TIFF
POINTER	86:18	86:18	5	*
LEAF_NODE	86:18	86:18	6	*
NAME	86:20	86:20	4	tif
LEAF_NODE	86:20	86:20	5	tif
LEAF_NODE	86:23	86:23	3	,
PARAMETER_DECL	86:25	86:32	3	uint8 * op
TYPE	86:25	86:30	4	uint8 *
TYPE_NAME	86:25	86:25	5	uint8
LEAF_NODE	86:25	86:25	6	uint8
POINTER	86:30	86:30	5	*
LEAF_NODE	86:30	86:30	6	*
NAME	86:32	86:32	4	op
LEAF_NODE	86:32	86:32	5	op
LEAF_NODE	86:34	86:34	3	,
PARAMETER_DECL	86:36	86:45	3	tmsize_t maxpixels
TYPE	86:36	86:36	4	tmsize_t
TYPE_NAME	86:36	86:36	5	tmsize_t
LEAF_NODE	86:36	86:36	6	tmsize_t
NAME	86:45	86:45	4	maxpixels
LEAF_NODE	86:45	86:45	5	maxpixels
LEAF_NODE	86:54	86:54	3	)
LEAF_NODE	87:0	87:0	2	{
STATEMENTS	88:1	163:8	2	
LEAF_NODE	88:1	88:1	3	static
SIMPLE_DECL	88:8	88:45	3	const char [ ] module ; module = "ThunderDecode" ;
VAR_DECL	88:8	88:19	4	const char [ ] module ; module = "ThunderDecode"
TYPE	88:8	88:25	5	const char [ ]
TYPE_NAME	88:8	88:14	6	const char
LEAF_NODE	88:8	88:8	7	const
LEAF_NODE	88:14	88:14	7	char
TYPE_SUFFIX	88:25	88:26	6	[ ]
LEAF_NODE	88:25	88:25	7	[
LEAF_NODE	88:26	88:26	7	]
NAME	88:19	88:19	5	module
LEAF_NODE	88:19	88:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	88:19	88:19	5	module = "ThunderDecode"
ASSIGN	88:19	88:30	6	module = "ThunderDecode"
LVAL	88:19	88:19	7	module
NAME	88:19	88:19	8	module
LEAF_NODE	88:19	88:19	9	module
ASSIGN_OP	88:28	88:28	7	=
LEAF_NODE	88:28	88:28	8	=
RVAL	88:30	88:30	7	"ThunderDecode"
FIELD	88:30	88:30	8	"ThunderDecode"
LEAF_NODE	88:30	88:30	9	"ThunderDecode"
LEAF_NODE	88:45	88:45	4	;
LEAF_NODE	89:1	89:1	3	register
SIMPLE_DECL	89:10	89:27	3	unsigned char * bp ;
VAR_DECL	89:10	89:25	4	unsigned char * bp
TYPE	89:10	89:24	5	unsigned char *
TYPE_NAME	89:10	89:19	6	unsigned char
LEAF_NODE	89:10	89:10	7	unsigned
LEAF_NODE	89:19	89:19	7	char
POINTER	89:24	89:24	6	*
LEAF_NODE	89:24	89:24	7	*
NAME	89:25	89:25	5	bp
LEAF_NODE	89:25	89:25	6	bp
LEAF_NODE	89:27	89:27	4	;
LEAF_NODE	90:1	90:1	3	register
SIMPLE_DECL	90:10	90:21	3	tmsize_t cc ;
VAR_DECL	90:10	90:19	4	tmsize_t cc
TYPE	90:10	90:10	5	tmsize_t
TYPE_NAME	90:10	90:10	6	tmsize_t
LEAF_NODE	90:10	90:10	7	tmsize_t
NAME	90:19	90:19	5	cc
LEAF_NODE	90:19	90:19	6	cc
LEAF_NODE	90:21	90:21	4	;
SIMPLE_DECL	91:1	91:23	3	unsigned int lastpixel ;
VAR_DECL	91:1	91:14	4	unsigned int lastpixel
TYPE	91:1	91:1	5	unsigned int
TYPE_NAME	91:1	91:10	6	unsigned int
LEAF_NODE	91:1	91:1	7	unsigned
LEAF_NODE	91:10	91:10	7	int
NAME	91:14	91:14	5	lastpixel
LEAF_NODE	91:14	91:14	6	lastpixel
LEAF_NODE	91:23	91:23	4	;
SIMPLE_DECL	92:1	92:17	3	tmsize_t npixels ;
VAR_DECL	92:1	92:10	4	tmsize_t npixels
TYPE	92:1	92:1	5	tmsize_t
TYPE_NAME	92:1	92:1	6	tmsize_t
LEAF_NODE	92:1	92:1	7	tmsize_t
NAME	92:10	92:10	5	npixels
LEAF_NODE	92:10	92:10	6	npixels
LEAF_NODE	92:17	92:17	4	;
EXPR_STATEMENT	94:1	94:37	3	bp = ( unsigned char * ) tif -> tif_rawcp ;
EXPR	94:1	94:1	4	bp = ( unsigned char * ) tif -> tif_rawcp
ASSIGN	94:1	94:6	5	bp = ( unsigned char * ) tif -> tif_rawcp
LVAL	94:1	94:1	6	bp
FIELD	94:1	94:1	7	bp
LEAF_NODE	94:1	94:1	8	bp
ASSIGN_OP	94:4	94:4	6	=
LEAF_NODE	94:4	94:4	7	=
RVAL	94:6	94:23	6	( unsigned char * ) tif -> tif_rawcp
LEAF_NODE	94:6	94:6	7	(
TYPE_NAME	94:7	94:16	7	unsigned char
LEAF_NODE	94:7	94:7	8	unsigned
LEAF_NODE	94:16	94:16	8	char
LEAF_NODE	94:21	94:21	7	*
LEAF_NODE	94:22	94:22	7	)
FIELD	94:23	94:28	7	tif -> tif_rawcp
LEAF_NODE	94:23	94:23	8	tif
LEAF_NODE	94:26	94:26	8	->
LEAF_NODE	94:28	94:28	8	tif_rawcp
LEAF_NODE	94:37	94:37	4	;
EXPR_STATEMENT	95:1	95:20	3	cc = tif -> tif_rawcc ;
EXPR	95:1	95:1	4	cc = tif -> tif_rawcc
ASSIGN	95:1	95:6	5	cc = tif -> tif_rawcc
LVAL	95:1	95:1	6	cc
FIELD	95:1	95:1	7	cc
LEAF_NODE	95:1	95:1	8	cc
ASSIGN_OP	95:4	95:4	6	=
LEAF_NODE	95:4	95:4	7	=
RVAL	95:6	95:6	6	tif -> tif_rawcc
FIELD	95:6	95:11	7	tif -> tif_rawcc
LEAF_NODE	95:6	95:6	8	tif
LEAF_NODE	95:9	95:9	8	->
LEAF_NODE	95:11	95:11	8	tif_rawcc
LEAF_NODE	95:20	95:20	4	;
EXPR_STATEMENT	96:1	96:14	3	lastpixel = 0 ;
EXPR	96:1	96:1	4	lastpixel = 0
ASSIGN	96:1	96:13	5	lastpixel = 0
LVAL	96:1	96:1	6	lastpixel
FIELD	96:1	96:1	7	lastpixel
LEAF_NODE	96:1	96:1	8	lastpixel
ASSIGN_OP	96:11	96:11	6	=
LEAF_NODE	96:11	96:11	7	=
RVAL	96:13	96:13	6	0
FIELD	96:13	96:13	7	0
LEAF_NODE	96:13	96:13	8	0
LEAF_NODE	96:14	96:14	4	;
EXPR_STATEMENT	97:1	97:12	3	npixels = 0 ;
EXPR	97:1	97:1	4	npixels = 0
ASSIGN	97:1	97:11	5	npixels = 0
LVAL	97:1	97:1	6	npixels
FIELD	97:1	97:1	7	npixels
LEAF_NODE	97:1	97:1	8	npixels
ASSIGN_OP	97:9	97:9	6	=
LEAF_NODE	97:9	97:9	7	=
RVAL	97:11	97:11	6	0
FIELD	97:11	97:11	7	0
LEAF_NODE	97:11	97:11	8	0
LEAF_NODE	97:12	97:12	4	;
ITERATION	98:1	98:39	3	
KEYWORD	98:1	98:1	4	while
LEAF_NODE	98:1	98:1	5	while
LEAF_NODE	98:7	98:7	4	(
CONDITION	98:8	98:8	4	cc > 0 && npixels < maxpixels
EXPR	98:8	98:8	5	cc > 0 && npixels < maxpixels
AND	98:8	98:18	6	cc > 0 && npixels < maxpixels
EXPR	98:8	98:13	7	cc > 0
FIELD	98:8	98:8	8	cc
LEAF_NODE	98:8	98:8	9	cc
REL_OPERATOR	98:11	98:11	8	>
LEAF_NODE	98:11	98:11	9	>
FIELD	98:13	98:13	8	0
LEAF_NODE	98:13	98:13	9	0
LEAF_NODE	98:15	98:15	7	&&
EXPR	98:18	98:28	7	npixels < maxpixels
FIELD	98:18	98:18	8	npixels
LEAF_NODE	98:18	98:18	9	npixels
REL_OPERATOR	98:26	98:26	8	<
LEAF_NODE	98:26	98:26	9	<
FIELD	98:28	98:28	8	maxpixels
LEAF_NODE	98:28	98:28	9	maxpixels
LEAF_NODE	98:37	98:37	4	)
STATEMENTS	98:39	141:1	4	
LEAF_NODE	98:39	98:39	5	{
STATEMENTS	99:2	103:2	5	
SIMPLE_DECL	99:2	99:14	6	int n , int delta ;
INIT_DECL_LIST	99:2	99:2	7	int n , int delta
VAR_DECL	99:2	99:6	8	int n
TYPE	99:2	99:2	9	int
TYPE_NAME	99:2	99:2	10	int
LEAF_NODE	99:2	99:2	11	int
NAME	99:6	99:6	9	n
LEAF_NODE	99:6	99:6	10	n
LEAF_NODE	99:7	99:7	8	,
VAR_DECL	99:2	99:9	8	int delta
TYPE	99:2	99:2	9	int
TYPE_NAME	99:2	99:2	10	int
LEAF_NODE	99:2	99:2	11	int
NAME	99:9	99:9	9	delta
LEAF_NODE	99:9	99:9	10	delta
LEAF_NODE	99:14	99:14	7	;
EXPR_STATEMENT	101:2	101:11	6	n = * bp ++ ;
EXPR	101:2	101:2	7	n = * bp ++
ASSIGN	101:2	101:6	8	n = * bp ++
LVAL	101:2	101:2	9	n
FIELD	101:2	101:2	10	n
LEAF_NODE	101:2	101:2	11	n
ASSIGN_OP	101:4	101:4	9	=
LEAF_NODE	101:4	101:4	10	=
RVAL	101:6	101:6	9	* bp ++
UNARY_EXPR	101:6	101:7	10	* bp ++
UNARY_OPERATOR	101:6	101:6	11	*
LEAF_NODE	101:6	101:6	12	*
FIELD	101:7	101:9	11	bp ++
LEAF_NODE	101:7	101:7	12	bp
LEAF_NODE	101:9	101:9	12	++
LEAF_NODE	101:11	101:11	7	;
EXPR_STATEMENT	102:2	102:6	6	cc -- ;
EXPR	102:2	102:2	7	cc --
FIELD	102:2	102:4	8	cc --
LEAF_NODE	102:2	102:2	9	cc
LEAF_NODE	102:4	102:4	9	--
LEAF_NODE	102:6	102:6	7	;
SELECTION	103:2	103:28	6	
KEYWORD	103:2	103:2	7	switch
LEAF_NODE	103:2	103:2	8	switch
LEAF_NODE	103:9	103:9	7	(
CONDITION	103:10	103:10	7	n & THUNDER_CODE
EXPR	103:10	103:14	8	n & THUNDER_CODE
FIELD	103:10	103:10	9	n
LEAF_NODE	103:10	103:10	10	n
LEAF_NODE	103:12	103:12	9	&
FIELD	103:14	103:14	9	THUNDER_CODE
LEAF_NODE	103:14	103:14	10	THUNDER_CODE
LEAF_NODE	103:26	103:26	7	)
STATEMENTS	103:28	140:2	7	
LEAF_NODE	103:28	103:28	8	{
STATEMENTS	104:2	139:3	8	
LABEL	104:2	104:18	9	case THUNDER_RUN :
LEAF_NODE	104:2	104:2	10	case
LEAF_NODE	104:7	104:7	10	THUNDER_RUN
LEAF_NODE	104:18	104:18	10	:
SELECTION	109:3	109:20	9	
KEYWORD	109:3	109:3	10	if
LEAF_NODE	109:3	109:3	11	if
LEAF_NODE	109:6	109:6	10	(
CONDITION	109:7	109:7	10	npixels & 1
EXPR	109:7	109:17	11	npixels & 1
FIELD	109:7	109:7	12	npixels
LEAF_NODE	109:7	109:7	13	npixels
LEAF_NODE	109:15	109:15	12	&
FIELD	109:17	109:17	12	1
LEAF_NODE	109:17	109:17	13	1
LEAF_NODE	109:18	109:18	10	)
STATEMENTS	109:20	112:3	10	
LEAF_NODE	109:20	109:20	11	{
STATEMENTS	110:4	111:34	11	
EXPR_STATEMENT	110:4	110:22	12	op [ 0 ] |= lastpixel ;
EXPR	110:4	110:4	13	op [ 0 ] |= lastpixel
ASSIGN	110:4	110:13	14	op [ 0 ] |= lastpixel
LVAL	110:4	110:4	15	op [ 0 ]
FIELD	110:4	110:8	16	op [ 0 ]
LEAF_NODE	110:4	110:4	17	op
LEAF_NODE	110:6	110:6	17	[
EXPR	110:7	110:7	17	0
FIELD	110:7	110:7	18	0
LEAF_NODE	110:7	110:7	19	0
LEAF_NODE	110:8	110:8	17	]
ASSIGN_OP	110:10	110:10	15	|=
LEAF_NODE	110:10	110:10	16	|=
RVAL	110:13	110:13	15	lastpixel
FIELD	110:13	110:13	16	lastpixel
LEAF_NODE	110:13	110:13	17	lastpixel
LEAF_NODE	110:22	110:22	13	;
EXPR_STATEMENT	111:4	111:21	12	lastpixel = * op ++ ;
EXPR	111:4	111:4	13	lastpixel = * op ++
ASSIGN	111:4	111:16	14	lastpixel = * op ++
LVAL	111:4	111:4	15	lastpixel
FIELD	111:4	111:4	16	lastpixel
LEAF_NODE	111:4	111:4	17	lastpixel
ASSIGN_OP	111:14	111:14	15	=
LEAF_NODE	111:14	111:14	16	=
RVAL	111:16	111:16	15	* op ++
UNARY_EXPR	111:16	111:17	16	* op ++
UNARY_OPERATOR	111:16	111:16	17	*
LEAF_NODE	111:16	111:16	18	*
FIELD	111:17	111:19	17	op ++
LEAF_NODE	111:17	111:17	18	op
LEAF_NODE	111:19	111:19	18	++
LEAF_NODE	111:21	111:21	13	;
EXPR_STATEMENT	111:23	111:32	12	npixels ++ ;
EXPR	111:23	111:23	13	npixels ++
FIELD	111:23	111:30	14	npixels ++
LEAF_NODE	111:23	111:23	15	npixels
LEAF_NODE	111:30	111:30	15	++
LEAF_NODE	111:32	111:32	13	;
EXPR_STATEMENT	111:34	111:37	12	n -- ;
EXPR	111:34	111:34	13	n --
FIELD	111:34	111:35	14	n --
LEAF_NODE	111:34	111:34	15	n
LEAF_NODE	111:35	111:35	15	--
LEAF_NODE	111:37	111:37	13	;
LEAF_NODE	112:3	112:3	11	}
SELECTION	112:5	113:4	9	
KEYWORD	112:5	112:5	10	else
LEAF_NODE	112:5	112:5	11	else
STATEMENTS	113:4	113:4	10	
EXPR_STATEMENT	113:4	113:31	11	lastpixel |= lastpixel << 4 ;
EXPR	113:4	113:4	12	lastpixel |= lastpixel << 4
ASSIGN	113:4	113:17	13	lastpixel |= lastpixel << 4
LVAL	113:4	113:4	14	lastpixel
FIELD	113:4	113:4	15	lastpixel
LEAF_NODE	113:4	113:4	16	lastpixel
ASSIGN_OP	113:14	113:14	14	|=
LEAF_NODE	113:14	113:14	15	|=
RVAL	113:17	113:30	14	lastpixel << 4
FIELD	113:17	113:17	15	lastpixel
LEAF_NODE	113:17	113:17	16	lastpixel
LEAF_NODE	113:27	113:27	15	<<
FIELD	113:30	113:30	15	4
LEAF_NODE	113:30	113:30	16	4
LEAF_NODE	113:31	113:31	12	;
EXPR_STATEMENT	114:3	114:15	9	npixels += n ;
EXPR	114:3	114:3	10	npixels += n
ASSIGN	114:3	114:14	11	npixels += n
LVAL	114:3	114:3	12	npixels
FIELD	114:3	114:3	13	npixels
LEAF_NODE	114:3	114:3	14	npixels
ASSIGN_OP	114:11	114:11	12	+=
LEAF_NODE	114:11	114:11	13	+=
RVAL	114:14	114:14	12	n
FIELD	114:14	114:14	13	n
LEAF_NODE	114:14	114:14	14	n
LEAF_NODE	114:15	114:15	10	;
SELECTION	115:3	115:28	9	
KEYWORD	115:3	115:3	10	if
LEAF_NODE	115:3	115:3	11	if
LEAF_NODE	115:6	115:6	10	(
CONDITION	115:7	115:7	10	npixels < maxpixels
EXPR	115:7	115:17	11	npixels < maxpixels
FIELD	115:7	115:7	12	npixels
LEAF_NODE	115:7	115:7	13	npixels
REL_OPERATOR	115:15	115:15	12	<
LEAF_NODE	115:15	115:15	13	<
FIELD	115:17	115:17	12	maxpixels
LEAF_NODE	115:17	115:17	13	maxpixels
LEAF_NODE	115:26	115:26	10	)
STATEMENTS	115:28	118:3	10	
LEAF_NODE	115:28	115:28	11	{
STATEMENTS	116:4	116:4	11	
ITERATION	116:4	117:5	12	
KEYWORD	116:4	116:4	13	for
LEAF_NODE	116:4	116:4	14	for
LEAF_NODE	116:8	116:8	13	(
FOR_INIT	116:9	116:9	13	;
LEAF_NODE	116:9	116:9	14	;
CONDITION	116:11	116:11	13	n > 0
EXPR	116:11	116:15	14	n > 0
FIELD	116:11	116:11	15	n
LEAF_NODE	116:11	116:11	16	n
REL_OPERATOR	116:13	116:13	15	>
LEAF_NODE	116:13	116:13	16	>
FIELD	116:15	116:15	15	0
LEAF_NODE	116:15	116:15	16	0
LEAF_NODE	116:16	116:16	13	;
FOR_EXPR	116:18	116:18	13	n -= 2
EXPR	116:18	116:18	14	n -= 2
ASSIGN	116:18	116:23	15	n -= 2
LVAL	116:18	116:18	16	n
FIELD	116:18	116:18	17	n
LEAF_NODE	116:18	116:18	18	n
ASSIGN_OP	116:20	116:20	16	-=
LEAF_NODE	116:20	116:20	17	-=
RVAL	116:23	116:23	16	2
FIELD	116:23	116:23	17	2
LEAF_NODE	116:23	116:23	18	2
LEAF_NODE	116:24	116:24	13	)
STATEMENTS	117:5	117:5	13	
EXPR_STATEMENT	117:5	117:30	14	* op ++ = ( uint8 ) lastpixel ;
EXPR	117:5	117:5	15	* op ++ = ( uint8 ) lastpixel
ASSIGN	117:5	117:13	16	* op ++ = ( uint8 ) lastpixel
LVAL	117:5	117:5	17	* op ++
UNARY_EXPR	117:5	117:6	18	* op ++
UNARY_OPERATOR	117:5	117:5	19	*
LEAF_NODE	117:5	117:5	20	*
FIELD	117:6	117:8	19	op ++
LEAF_NODE	117:6	117:6	20	op
LEAF_NODE	117:8	117:8	20	++
ASSIGN_OP	117:11	117:11	17	=
LEAF_NODE	117:11	117:11	18	=
RVAL	117:13	117:21	17	( uint8 ) lastpixel
LEAF_NODE	117:13	117:13	18	(
TYPE_NAME	117:14	117:14	18	uint8
LEAF_NODE	117:14	117:14	19	uint8
LEAF_NODE	117:19	117:19	18	)
FIELD	117:21	117:21	18	lastpixel
LEAF_NODE	117:21	117:21	19	lastpixel
LEAF_NODE	117:30	117:30	15	;
LEAF_NODE	118:3	118:3	11	}
SELECTION	119:3	120:4	9	
KEYWORD	119:3	119:3	10	if
LEAF_NODE	119:3	119:3	11	if
LEAF_NODE	119:6	119:6	10	(
CONDITION	119:7	119:7	10	n == - 1
EXPR	119:7	119:12	11	n == - 1
FIELD	119:7	119:7	12	n
LEAF_NODE	119:7	119:7	13	n
EQ_OPERATOR	119:9	119:9	12	==
LEAF_NODE	119:9	119:9	13	==
UNARY_EXPR	119:12	119:13	12	- 1
UNARY_OPERATOR	119:12	119:12	13	-
LEAF_NODE	119:12	119:12	14	-
FIELD	119:13	119:13	13	1
LEAF_NODE	119:13	119:13	14	1
LEAF_NODE	119:14	119:14	10	)
STATEMENTS	120:4	120:4	10	
LEAF_NODE	120:4	120:4	11	*
EXPR_STATEMENT	120:5	120:17	9	-- op &= 0xf0 ;
EXPR	120:5	120:5	10	-- op &= 0xf0
ASSIGN	120:5	120:13	11	-- op &= 0xf0
LVAL	120:5	120:7	12	-- op
LEAF_NODE	120:5	120:5	13	--
FIELD	120:7	120:7	13	op
LEAF_NODE	120:7	120:7	14	op
ASSIGN_OP	120:10	120:10	12	&=
LEAF_NODE	120:10	120:10	13	&=
RVAL	120:13	120:13	12	0xf0
FIELD	120:13	120:13	13	0xf0
LEAF_NODE	120:13	120:13	14	0xf0
LEAF_NODE	120:17	120:17	10	;
EXPR_STATEMENT	121:3	121:19	9	lastpixel &= 0xf ;
EXPR	121:3	121:3	10	lastpixel &= 0xf
ASSIGN	121:3	121:16	11	lastpixel &= 0xf
LVAL	121:3	121:3	12	lastpixel
FIELD	121:3	121:3	13	lastpixel
LEAF_NODE	121:3	121:3	14	lastpixel
ASSIGN_OP	121:13	121:13	12	&=
LEAF_NODE	121:13	121:13	13	&=
RVAL	121:16	121:16	12	0xf
FIELD	121:16	121:16	13	0xf
LEAF_NODE	121:16	121:16	14	0xf
LEAF_NODE	121:19	121:19	10	;
JUMP_STATEMENT	122:3	122:8	9	break DESTINATION ;
KEYWORD	122:3	122:3	10	break
LEAF_NODE	122:3	122:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	122:8	122:8	10	;
LABEL	123:2	123:25	9	case THUNDER_2BITDELTAS :
LEAF_NODE	123:2	123:2	10	case
LEAF_NODE	123:7	123:7	10	THUNDER_2BITDELTAS
LEAF_NODE	123:25	123:25	10	:
SELECTION	124:3	125:4	9	
KEYWORD	124:3	124:3	10	if
LEAF_NODE	124:3	124:3	11	if
LEAF_NODE	124:6	124:6	10	(
CONDITION	124:7	124:7	10	( delta = ( ( n >> 4 ) & 3 ) ) != DELTA2_SKIP
EXPR	124:7	124:35	11	( delta = ( ( n >> 4 ) & 3 ) ) != DELTA2_SKIP
LEAF_NODE	124:7	124:7	12	(
ASSIGN	124:8	124:16	12	delta = ( ( n >> 4 ) & 3 )
LVAL	124:8	124:8	13	delta
FIELD	124:8	124:8	14	delta
LEAF_NODE	124:8	124:8	15	delta
ASSIGN_OP	124:14	124:14	13	=
LEAF_NODE	124:14	124:14	14	=
RVAL	124:16	124:29	13	( ( n >> 4 ) & 3 )
LEAF_NODE	124:16	124:16	14	(
LEAF_NODE	124:17	124:17	14	(
FIELD	124:18	124:18	14	n
LEAF_NODE	124:18	124:18	15	n
LEAF_NODE	124:20	124:20	14	>>
FIELD	124:23	124:23	14	4
LEAF_NODE	124:23	124:23	15	4
LEAF_NODE	124:24	124:24	14	)
LEAF_NODE	124:26	124:26	14	&
FIELD	124:28	124:28	14	3
LEAF_NODE	124:28	124:28	15	3
LEAF_NODE	124:29	124:29	14	)
LEAF_NODE	124:30	124:30	12	)
EQ_OPERATOR	124:32	124:32	12	!=
LEAF_NODE	124:32	124:32	13	!=
FIELD	124:35	124:35	12	DELTA2_SKIP
LEAF_NODE	124:35	124:35	13	DELTA2_SKIP
LEAF_NODE	124:46	124:46	10	)
STATEMENTS	125:4	125:4	10	
LEAF_NODE	125:4	125:4	11	SETPIXEL
LEAF_NODE	125:12	125:12	9	(
LEAF_NODE	125:13	125:13	9	op
LEAF_NODE	125:15	125:15	9	,
LEAF_NODE	125:17	125:17	9	(
LEAF_NODE	125:18	125:18	9	unsigned
LEAF_NODE	125:26	125:26	9	)
LEAF_NODE	125:27	125:27	9	(
LEAF_NODE	125:28	125:28	9	(
LEAF_NODE	125:29	125:29	9	int
LEAF_NODE	125:32	125:32	9	)
LEAF_NODE	125:33	125:33	9	lastpixel
LEAF_NODE	125:43	125:43	9	+
LEAF_NODE	125:45	125:45	9	twobitdeltas
LEAF_NODE	125:57	125:57	9	[
LEAF_NODE	125:58	125:58	9	delta
LEAF_NODE	125:63	125:63	9	]
LEAF_NODE	125:64	125:64	9	)
LEAF_NODE	125:65	125:65	9	)
LEAF_NODE	125:66	125:66	9	;
SELECTION	126:3	127:4	9	
KEYWORD	126:3	126:3	10	if
LEAF_NODE	126:3	126:3	11	if
LEAF_NODE	126:6	126:6	10	(
CONDITION	126:7	126:7	10	( delta = ( ( n >> 2 ) & 3 ) ) != DELTA2_SKIP
EXPR	126:7	126:35	11	( delta = ( ( n >> 2 ) & 3 ) ) != DELTA2_SKIP
LEAF_NODE	126:7	126:7	12	(
ASSIGN	126:8	126:16	12	delta = ( ( n >> 2 ) & 3 )
LVAL	126:8	126:8	13	delta
FIELD	126:8	126:8	14	delta
LEAF_NODE	126:8	126:8	15	delta
ASSIGN_OP	126:14	126:14	13	=
LEAF_NODE	126:14	126:14	14	=
RVAL	126:16	126:29	13	( ( n >> 2 ) & 3 )
LEAF_NODE	126:16	126:16	14	(
LEAF_NODE	126:17	126:17	14	(
FIELD	126:18	126:18	14	n
LEAF_NODE	126:18	126:18	15	n
LEAF_NODE	126:20	126:20	14	>>
FIELD	126:23	126:23	14	2
LEAF_NODE	126:23	126:23	15	2
LEAF_NODE	126:24	126:24	14	)
LEAF_NODE	126:26	126:26	14	&
FIELD	126:28	126:28	14	3
LEAF_NODE	126:28	126:28	15	3
LEAF_NODE	126:29	126:29	14	)
LEAF_NODE	126:30	126:30	12	)
EQ_OPERATOR	126:32	126:32	12	!=
LEAF_NODE	126:32	126:32	13	!=
FIELD	126:35	126:35	12	DELTA2_SKIP
LEAF_NODE	126:35	126:35	13	DELTA2_SKIP
LEAF_NODE	126:46	126:46	10	)
STATEMENTS	127:4	127:4	10	
LEAF_NODE	127:4	127:4	11	SETPIXEL
LEAF_NODE	127:12	127:12	9	(
LEAF_NODE	127:13	127:13	9	op
LEAF_NODE	127:15	127:15	9	,
LEAF_NODE	127:17	127:17	9	(
LEAF_NODE	127:18	127:18	9	unsigned
LEAF_NODE	127:26	127:26	9	)
LEAF_NODE	127:27	127:27	9	(
LEAF_NODE	127:28	127:28	9	(
LEAF_NODE	127:29	127:29	9	int
LEAF_NODE	127:32	127:32	9	)
LEAF_NODE	127:33	127:33	9	lastpixel
LEAF_NODE	127:43	127:43	9	+
LEAF_NODE	127:45	127:45	9	twobitdeltas
LEAF_NODE	127:57	127:57	9	[
LEAF_NODE	127:58	127:58	9	delta
LEAF_NODE	127:63	127:63	9	]
LEAF_NODE	127:64	127:64	9	)
LEAF_NODE	127:65	127:65	9	)
LEAF_NODE	127:66	127:66	9	;
SELECTION	128:3	129:4	9	
KEYWORD	128:3	128:3	10	if
LEAF_NODE	128:3	128:3	11	if
LEAF_NODE	128:6	128:6	10	(
CONDITION	128:7	128:7	10	( delta = ( n & 3 ) ) != DELTA2_SKIP
EXPR	128:7	128:28	11	( delta = ( n & 3 ) ) != DELTA2_SKIP
LEAF_NODE	128:7	128:7	12	(
ASSIGN	128:8	128:16	12	delta = ( n & 3 )
LVAL	128:8	128:8	13	delta
FIELD	128:8	128:8	14	delta
LEAF_NODE	128:8	128:8	15	delta
ASSIGN_OP	128:14	128:14	13	=
LEAF_NODE	128:14	128:14	14	=
RVAL	128:16	128:22	13	( n & 3 )
LEAF_NODE	128:16	128:16	14	(
FIELD	128:17	128:17	14	n
LEAF_NODE	128:17	128:17	15	n
LEAF_NODE	128:19	128:19	14	&
FIELD	128:21	128:21	14	3
LEAF_NODE	128:21	128:21	15	3
LEAF_NODE	128:22	128:22	14	)
LEAF_NODE	128:23	128:23	12	)
EQ_OPERATOR	128:25	128:25	12	!=
LEAF_NODE	128:25	128:25	13	!=
FIELD	128:28	128:28	12	DELTA2_SKIP
LEAF_NODE	128:28	128:28	13	DELTA2_SKIP
LEAF_NODE	128:39	128:39	10	)
STATEMENTS	129:4	129:4	10	
LEAF_NODE	129:4	129:4	11	SETPIXEL
LEAF_NODE	129:12	129:12	9	(
LEAF_NODE	129:13	129:13	9	op
LEAF_NODE	129:15	129:15	9	,
LEAF_NODE	129:17	129:17	9	(
LEAF_NODE	129:18	129:18	9	unsigned
LEAF_NODE	129:26	129:26	9	)
LEAF_NODE	129:27	129:27	9	(
LEAF_NODE	129:28	129:28	9	(
LEAF_NODE	129:29	129:29	9	int
LEAF_NODE	129:32	129:32	9	)
LEAF_NODE	129:33	129:33	9	lastpixel
LEAF_NODE	129:43	129:43	9	+
LEAF_NODE	129:45	129:45	9	twobitdeltas
LEAF_NODE	129:57	129:57	9	[
LEAF_NODE	129:58	129:58	9	delta
LEAF_NODE	129:63	129:63	9	]
LEAF_NODE	129:64	129:64	9	)
LEAF_NODE	129:65	129:65	9	)
LEAF_NODE	129:66	129:66	9	;
JUMP_STATEMENT	130:3	130:8	9	break DESTINATION ;
KEYWORD	130:3	130:3	10	break
LEAF_NODE	130:3	130:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	130:8	130:8	10	;
LABEL	131:2	131:25	9	case THUNDER_3BITDELTAS :
LEAF_NODE	131:2	131:2	10	case
LEAF_NODE	131:7	131:7	10	THUNDER_3BITDELTAS
LEAF_NODE	131:25	131:25	10	:
SELECTION	132:3	133:4	9	
KEYWORD	132:3	132:3	10	if
LEAF_NODE	132:3	132:3	11	if
LEAF_NODE	132:6	132:6	10	(
CONDITION	132:7	132:7	10	( delta = ( ( n >> 3 ) & 7 ) ) != DELTA3_SKIP
EXPR	132:7	132:35	11	( delta = ( ( n >> 3 ) & 7 ) ) != DELTA3_SKIP
LEAF_NODE	132:7	132:7	12	(
ASSIGN	132:8	132:16	12	delta = ( ( n >> 3 ) & 7 )
LVAL	132:8	132:8	13	delta
FIELD	132:8	132:8	14	delta
LEAF_NODE	132:8	132:8	15	delta
ASSIGN_OP	132:14	132:14	13	=
LEAF_NODE	132:14	132:14	14	=
RVAL	132:16	132:29	13	( ( n >> 3 ) & 7 )
LEAF_NODE	132:16	132:16	14	(
LEAF_NODE	132:17	132:17	14	(
FIELD	132:18	132:18	14	n
LEAF_NODE	132:18	132:18	15	n
LEAF_NODE	132:20	132:20	14	>>
FIELD	132:23	132:23	14	3
LEAF_NODE	132:23	132:23	15	3
LEAF_NODE	132:24	132:24	14	)
LEAF_NODE	132:26	132:26	14	&
FIELD	132:28	132:28	14	7
LEAF_NODE	132:28	132:28	15	7
LEAF_NODE	132:29	132:29	14	)
LEAF_NODE	132:30	132:30	12	)
EQ_OPERATOR	132:32	132:32	12	!=
LEAF_NODE	132:32	132:32	13	!=
FIELD	132:35	132:35	12	DELTA3_SKIP
LEAF_NODE	132:35	132:35	13	DELTA3_SKIP
LEAF_NODE	132:46	132:46	10	)
STATEMENTS	133:4	133:4	10	
LEAF_NODE	133:4	133:4	11	SETPIXEL
LEAF_NODE	133:12	133:12	9	(
LEAF_NODE	133:13	133:13	9	op
LEAF_NODE	133:15	133:15	9	,
LEAF_NODE	133:17	133:17	9	(
LEAF_NODE	133:18	133:18	9	unsigned
LEAF_NODE	133:26	133:26	9	)
LEAF_NODE	133:27	133:27	9	(
LEAF_NODE	133:28	133:28	9	(
LEAF_NODE	133:29	133:29	9	int
LEAF_NODE	133:32	133:32	9	)
LEAF_NODE	133:33	133:33	9	lastpixel
LEAF_NODE	133:43	133:43	9	+
LEAF_NODE	133:45	133:45	9	threebitdeltas
LEAF_NODE	133:59	133:59	9	[
LEAF_NODE	133:60	133:60	9	delta
LEAF_NODE	133:65	133:65	9	]
LEAF_NODE	133:66	133:66	9	)
LEAF_NODE	133:67	133:67	9	)
LEAF_NODE	133:68	133:68	9	;
SELECTION	134:3	135:4	9	
KEYWORD	134:3	134:3	10	if
LEAF_NODE	134:3	134:3	11	if
LEAF_NODE	134:6	134:6	10	(
CONDITION	134:7	134:7	10	( delta = ( n & 7 ) ) != DELTA3_SKIP
EXPR	134:7	134:28	11	( delta = ( n & 7 ) ) != DELTA3_SKIP
LEAF_NODE	134:7	134:7	12	(
ASSIGN	134:8	134:16	12	delta = ( n & 7 )
LVAL	134:8	134:8	13	delta
FIELD	134:8	134:8	14	delta
LEAF_NODE	134:8	134:8	15	delta
ASSIGN_OP	134:14	134:14	13	=
LEAF_NODE	134:14	134:14	14	=
RVAL	134:16	134:22	13	( n & 7 )
LEAF_NODE	134:16	134:16	14	(
FIELD	134:17	134:17	14	n
LEAF_NODE	134:17	134:17	15	n
LEAF_NODE	134:19	134:19	14	&
FIELD	134:21	134:21	14	7
LEAF_NODE	134:21	134:21	15	7
LEAF_NODE	134:22	134:22	14	)
LEAF_NODE	134:23	134:23	12	)
EQ_OPERATOR	134:25	134:25	12	!=
LEAF_NODE	134:25	134:25	13	!=
FIELD	134:28	134:28	12	DELTA3_SKIP
LEAF_NODE	134:28	134:28	13	DELTA3_SKIP
LEAF_NODE	134:39	134:39	10	)
STATEMENTS	135:4	135:4	10	
LEAF_NODE	135:4	135:4	11	SETPIXEL
LEAF_NODE	135:12	135:12	9	(
LEAF_NODE	135:13	135:13	9	op
LEAF_NODE	135:15	135:15	9	,
LEAF_NODE	135:17	135:17	9	(
LEAF_NODE	135:18	135:18	9	unsigned
LEAF_NODE	135:26	135:26	9	)
LEAF_NODE	135:27	135:27	9	(
LEAF_NODE	135:28	135:28	9	(
LEAF_NODE	135:29	135:29	9	int
LEAF_NODE	135:32	135:32	9	)
LEAF_NODE	135:33	135:33	9	lastpixel
LEAF_NODE	135:43	135:43	9	+
LEAF_NODE	135:45	135:45	9	threebitdeltas
LEAF_NODE	135:59	135:59	9	[
LEAF_NODE	135:60	135:60	9	delta
LEAF_NODE	135:65	135:65	9	]
LEAF_NODE	135:66	135:66	9	)
LEAF_NODE	135:67	135:67	9	)
LEAF_NODE	135:68	135:68	9	;
JUMP_STATEMENT	136:3	136:8	9	break DESTINATION ;
KEYWORD	136:3	136:3	10	break
LEAF_NODE	136:3	136:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	136:8	136:8	10	;
LABEL	137:2	137:18	9	case THUNDER_RAW :
LEAF_NODE	137:2	137:2	10	case
LEAF_NODE	137:7	137:7	10	THUNDER_RAW
LEAF_NODE	137:18	137:18	10	:
EXPR_STATEMENT	138:3	138:18	9	SETPIXEL ( op , n ) ;
EXPR	138:3	138:3	10	SETPIXEL ( op , n )
FUNCTION_CALL	138:3	138:17	11	SETPIXEL ( op , n )
CALLEE	138:3	138:3	12	SETPIXEL
LEAF_NODE	138:3	138:3	13	SETPIXEL
LEAF_NODE	138:11	138:11	12	(
ARGUMENT	138:12	138:12	12	op
FIELD	138:12	138:12	13	op
LEAF_NODE	138:12	138:12	14	op
LEAF_NODE	138:14	138:14	12	,
ARGUMENT	138:16	138:16	12	n
FIELD	138:16	138:16	13	n
LEAF_NODE	138:16	138:16	14	n
LEAF_NODE	138:17	138:17	12	)
LEAF_NODE	138:18	138:18	10	;
JUMP_STATEMENT	139:3	139:8	9	break DESTINATION ;
KEYWORD	139:3	139:3	10	break
LEAF_NODE	139:3	139:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	139:8	139:8	10	;
LEAF_NODE	140:2	140:2	8	}
LEAF_NODE	141:1	141:1	5	}
EXPR_STATEMENT	142:1	142:29	3	tif -> tif_rawcp = ( uint8 * ) bp ;
EXPR	142:1	142:1	4	tif -> tif_rawcp = ( uint8 * ) bp
ASSIGN	142:1	142:18	5	tif -> tif_rawcp = ( uint8 * ) bp
LVAL	142:1	142:1	6	tif -> tif_rawcp
FIELD	142:1	142:6	7	tif -> tif_rawcp
LEAF_NODE	142:1	142:1	8	tif
LEAF_NODE	142:4	142:4	8	->
LEAF_NODE	142:6	142:6	8	tif_rawcp
ASSIGN_OP	142:16	142:16	6	=
LEAF_NODE	142:16	142:16	7	=
RVAL	142:18	142:27	6	( uint8 * ) bp
LEAF_NODE	142:18	142:18	7	(
TYPE_NAME	142:19	142:19	7	uint8
LEAF_NODE	142:19	142:19	8	uint8
LEAF_NODE	142:24	142:24	7	*
LEAF_NODE	142:25	142:25	7	)
FIELD	142:27	142:27	7	bp
LEAF_NODE	142:27	142:27	8	bp
LEAF_NODE	142:29	142:29	4	;
EXPR_STATEMENT	143:1	143:20	3	tif -> tif_rawcc = cc ;
EXPR	143:1	143:1	4	tif -> tif_rawcc = cc
ASSIGN	143:1	143:18	5	tif -> tif_rawcc = cc
LVAL	143:1	143:1	6	tif -> tif_rawcc
FIELD	143:1	143:6	7	tif -> tif_rawcc
LEAF_NODE	143:1	143:1	8	tif
LEAF_NODE	143:4	143:4	8	->
LEAF_NODE	143:6	143:6	8	tif_rawcc
ASSIGN_OP	143:16	143:16	6	=
LEAF_NODE	143:16	143:16	7	=
RVAL	143:18	143:18	6	cc
FIELD	143:18	143:18	7	cc
LEAF_NODE	143:18	143:18	8	cc
LEAF_NODE	143:20	143:20	4	;
SELECTION	144:1	144:27	3	
KEYWORD	144:1	144:1	4	if
LEAF_NODE	144:1	144:1	5	if
LEAF_NODE	144:4	144:4	4	(
CONDITION	144:5	144:5	4	npixels != maxpixels
EXPR	144:5	144:16	5	npixels != maxpixels
FIELD	144:5	144:5	6	npixels
LEAF_NODE	144:5	144:5	7	npixels
EQ_OPERATOR	144:13	144:13	6	!=
LEAF_NODE	144:13	144:13	7	!=
FIELD	144:16	144:16	6	maxpixels
LEAF_NODE	144:16	144:16	7	maxpixels
LEAF_NODE	144:25	144:25	4	)
STATEMENTS	144:27	161:1	4	
LEAF_NODE	144:27	144:27	5	{
STATEMENTS	146:2	160:2	5	
EXPR_STATEMENT	146:2	151:37	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%s data at scanline %lu (%I64u != %I64u)" , npixels < maxpixels ? "Not enough" : "Too much" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) npixels , ( unsigned __int64 ) maxpixels ) ;
EXPR	146:2	146:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%s data at scanline %lu (%I64u != %I64u)" , npixels < maxpixels ? "Not enough" : "Too much" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) npixels , ( unsigned __int64 ) maxpixels )
FUNCTION_CALL	146:2	151:36	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%s data at scanline %lu (%I64u != %I64u)" , npixels < maxpixels ? "Not enough" : "Too much" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) npixels , ( unsigned __int64 ) maxpixels )
CALLEE	146:2	146:2	9	TIFFErrorExt
LEAF_NODE	146:2	146:2	10	TIFFErrorExt
LEAF_NODE	146:14	146:14	9	(
ARGUMENT	146:15	146:15	9	tif -> tif_clientdata
FIELD	146:15	146:20	10	tif -> tif_clientdata
LEAF_NODE	146:15	146:15	11	tif
LEAF_NODE	146:18	146:18	11	->
LEAF_NODE	146:20	146:20	11	tif_clientdata
LEAF_NODE	146:34	146:34	9	,
ARGUMENT	146:36	146:36	9	module
FIELD	146:36	146:36	10	module
LEAF_NODE	146:36	146:36	11	module
LEAF_NODE	146:42	146:42	9	,
ARGUMENT	147:8	147:8	9	"%s data at scanline %lu (%I64u != %I64u)"
FIELD	147:8	147:8	10	"%s data at scanline %lu (%I64u != %I64u)"
LEAF_NODE	147:8	147:8	11	"%s data at scanline %lu (%I64u != %I64u)"
LEAF_NODE	147:50	147:50	9	,
ARGUMENT	148:8	148:8	9	npixels < maxpixels ? "Not enough" : "Too much"
COND_EXPR	148:8	148:45	10	npixels < maxpixels ? "Not enough" : "Too much"
CONDITION	148:8	148:18	11	npixels < maxpixels
FIELD	148:8	148:8	12	npixels
LEAF_NODE	148:8	148:8	13	npixels
REL_OPERATOR	148:16	148:16	12	<
LEAF_NODE	148:16	148:16	13	<
FIELD	148:18	148:18	12	maxpixels
LEAF_NODE	148:18	148:18	13	maxpixels
LEAF_NODE	148:28	148:28	11	?
EXPR	148:30	148:30	11	"Not enough"
FIELD	148:30	148:30	12	"Not enough"
LEAF_NODE	148:30	148:30	13	"Not enough"
LEAF_NODE	148:43	148:43	11	:
FIELD	148:45	148:45	11	"Too much"
LEAF_NODE	148:45	148:45	12	"Too much"
LEAF_NODE	148:55	148:55	9	,
ARGUMENT	149:8	149:24	9	( unsigned long ) tif -> tif_row
LEAF_NODE	149:8	149:8	10	(
TYPE_NAME	149:9	149:18	10	unsigned long
LEAF_NODE	149:9	149:9	11	unsigned
LEAF_NODE	149:18	149:18	11	long
LEAF_NODE	149:22	149:22	10	)
FIELD	149:24	149:29	10	tif -> tif_row
LEAF_NODE	149:24	149:24	11	tif
LEAF_NODE	149:27	149:27	11	->
LEAF_NODE	149:29	149:29	11	tif_row
LEAF_NODE	149:36	149:36	9	,
ARGUMENT	150:8	150:27	9	( unsigned __int64 ) npixels
LEAF_NODE	150:8	150:8	10	(
TYPE_NAME	150:9	150:18	10	unsigned __int64
LEAF_NODE	150:9	150:9	11	unsigned
LEAF_NODE	150:18	150:18	11	__int64
LEAF_NODE	150:25	150:25	10	)
FIELD	150:27	150:27	10	npixels
LEAF_NODE	150:27	150:27	11	npixels
LEAF_NODE	150:34	150:34	9	,
ARGUMENT	151:8	151:27	9	( unsigned __int64 ) maxpixels
LEAF_NODE	151:8	151:8	10	(
TYPE_NAME	151:9	151:18	10	unsigned __int64
LEAF_NODE	151:9	151:9	11	unsigned
LEAF_NODE	151:18	151:18	11	__int64
LEAF_NODE	151:25	151:25	10	)
FIELD	151:27	151:27	10	maxpixels
LEAF_NODE	151:27	151:27	11	maxpixels
LEAF_NODE	151:36	151:36	9	)
LEAF_NODE	151:37	151:37	7	;
LEAF_NODE	153:2	153:2	6	TIFFErrorExt
LEAF_NODE	153:14	153:14	6	(
LEAF_NODE	153:15	153:15	6	tif
LEAF_NODE	153:18	153:18	6	->
LEAF_NODE	153:20	153:20	6	tif_clientdata
LEAF_NODE	153:34	153:34	6	,
LEAF_NODE	153:36	153:36	6	module
LEAF_NODE	153:42	153:42	6	,
LEAF_NODE	154:8	154:8	6	"%s data at scanline %lu (%llu != %llu)"
LEAF_NODE	154:48	154:48	6	,
LEAF_NODE	155:8	155:8	6	npixels
LEAF_NODE	155:16	155:16	6	<
LEAF_NODE	155:18	155:18	6	maxpixels
LEAF_NODE	155:28	155:28	6	?
LEAF_NODE	155:30	155:30	6	"Not enough"
LEAF_NODE	155:43	155:43	6	:
LEAF_NODE	155:45	155:45	6	"Too much"
LEAF_NODE	155:55	155:55	6	,
LEAF_NODE	156:8	156:8	6	(
LEAF_NODE	156:9	156:9	6	unsigned
LEAF_NODE	156:18	156:18	6	long
LEAF_NODE	156:22	156:22	6	)
LEAF_NODE	156:24	156:24	6	tif
LEAF_NODE	156:27	156:27	6	->
LEAF_NODE	156:29	156:29	6	tif_row
LEAF_NODE	156:36	156:36	6	,
LEAF_NODE	157:8	157:8	6	(
LEAF_NODE	157:9	157:9	6	unsigned
LEAF_NODE	157:18	157:18	6	long
LEAF_NODE	157:23	157:23	6	long
LEAF_NODE	157:27	157:27	6	)
LEAF_NODE	157:29	157:29	6	npixels
LEAF_NODE	157:36	157:36	6	,
LEAF_NODE	158:8	158:8	6	(
LEAF_NODE	158:9	158:9	6	unsigned
LEAF_NODE	158:18	158:18	6	long
LEAF_NODE	158:23	158:23	6	long
LEAF_NODE	158:27	158:27	6	)
LEAF_NODE	158:29	158:29	6	maxpixels
LEAF_NODE	158:38	158:38	6	)
LEAF_NODE	158:39	158:39	6	;
JUMP_STATEMENT	160:2	160:12	6	return ( 0 ) ;
KEYWORD	160:2	160:2	7	return
LEAF_NODE	160:2	160:2	8	return
DESTINATION	160:9	160:9	7	( 0 )
EXPR	160:9	160:11	8	( 0 )
LEAF_NODE	160:9	160:9	9	(
FIELD	160:10	160:10	9	0
LEAF_NODE	160:10	160:10	10	0
LEAF_NODE	160:11	160:11	9	)
LEAF_NODE	160:12	160:12	7	;
LEAF_NODE	161:1	161:1	5	}
JUMP_STATEMENT	163:8	163:18	3	return ( 1 ) ;
KEYWORD	163:8	163:8	4	return
LEAF_NODE	163:8	163:8	5	return
DESTINATION	163:15	163:15	4	( 1 )
EXPR	163:15	163:17	5	( 1 )
LEAF_NODE	163:15	163:15	6	(
FIELD	163:16	163:16	6	1
LEAF_NODE	163:16	163:16	7	1
LEAF_NODE	163:17	163:17	6	)
LEAF_NODE	163:18	163:18	4	;
LEAF_NODE	164:0	164:0	2	}
FUNCTION_DEF	166:0	185:0	1	
RETURN_TYPE	166:0	166:7	2	static int
LEAF_NODE	166:0	166:0	3	static
TYPE_NAME	166:7	166:7	3	int
LEAF_NODE	166:7	166:7	4	int
FUNCTION_NAME	167:0	167:0	2	ThunderDecodeRow
LEAF_NODE	167:0	167:0	3	ThunderDecodeRow
PARAMETER_LIST	167:16	167:62	2	( TIFF * tif , uint8 * buf , tmsize_t occ , uint16 s )
LEAF_NODE	167:16	167:16	3	(
PARAMETER_DECL	167:17	167:23	3	TIFF * tif
TYPE	167:17	167:21	4	TIFF *
TYPE_NAME	167:17	167:17	5	TIFF
LEAF_NODE	167:17	167:17	6	TIFF
POINTER	167:21	167:21	5	*
LEAF_NODE	167:21	167:21	6	*
NAME	167:23	167:23	4	tif
LEAF_NODE	167:23	167:23	5	tif
LEAF_NODE	167:26	167:26	3	,
PARAMETER_DECL	167:28	167:35	3	uint8 * buf
TYPE	167:28	167:33	4	uint8 *
TYPE_NAME	167:28	167:28	5	uint8
LEAF_NODE	167:28	167:28	6	uint8
POINTER	167:33	167:33	5	*
LEAF_NODE	167:33	167:33	6	*
NAME	167:35	167:35	4	buf
LEAF_NODE	167:35	167:35	5	buf
LEAF_NODE	167:38	167:38	3	,
PARAMETER_DECL	167:40	167:49	3	tmsize_t occ
TYPE	167:40	167:40	4	tmsize_t
TYPE_NAME	167:40	167:40	5	tmsize_t
LEAF_NODE	167:40	167:40	6	tmsize_t
NAME	167:49	167:49	4	occ
LEAF_NODE	167:49	167:49	5	occ
LEAF_NODE	167:52	167:52	3	,
PARAMETER_DECL	167:54	167:61	3	uint16 s
TYPE	167:54	167:54	4	uint16
TYPE_NAME	167:54	167:54	5	uint16
LEAF_NODE	167:54	167:54	6	uint16
NAME	167:61	167:61	4	s
LEAF_NODE	167:61	167:61	5	s
LEAF_NODE	167:62	167:62	3	)
LEAF_NODE	168:0	168:0	2	{
STATEMENTS	169:1	184:1	2	
LEAF_NODE	169:1	169:1	3	static
SIMPLE_DECL	169:8	169:48	3	const char [ ] module ; module = "ThunderDecodeRow" ;
VAR_DECL	169:8	169:19	4	const char [ ] module ; module = "ThunderDecodeRow"
TYPE	169:8	169:25	5	const char [ ]
TYPE_NAME	169:8	169:14	6	const char
LEAF_NODE	169:8	169:8	7	const
LEAF_NODE	169:14	169:14	7	char
TYPE_SUFFIX	169:25	169:26	6	[ ]
LEAF_NODE	169:25	169:25	7	[
LEAF_NODE	169:26	169:26	7	]
NAME	169:19	169:19	5	module
LEAF_NODE	169:19	169:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	169:19	169:19	5	module = "ThunderDecodeRow"
ASSIGN	169:19	169:30	6	module = "ThunderDecodeRow"
LVAL	169:19	169:19	7	module
NAME	169:19	169:19	8	module
LEAF_NODE	169:19	169:19	9	module
ASSIGN_OP	169:28	169:28	7	=
LEAF_NODE	169:28	169:28	8	=
RVAL	169:30	169:30	7	"ThunderDecodeRow"
FIELD	169:30	169:30	8	"ThunderDecodeRow"
LEAF_NODE	169:30	169:30	9	"ThunderDecodeRow"
LEAF_NODE	169:48	169:48	4	;
SIMPLE_DECL	170:1	170:17	3	uint8 * row ; row = buf ;
VAR_DECL	170:1	170:8	4	uint8 * row ; row = buf
TYPE	170:1	170:6	5	uint8 *
TYPE_NAME	170:1	170:1	6	uint8
LEAF_NODE	170:1	170:1	7	uint8
POINTER	170:6	170:6	6	*
LEAF_NODE	170:6	170:6	7	*
NAME	170:8	170:8	5	row
LEAF_NODE	170:8	170:8	6	row
LEAF_NODE	0:0	0:0	5	;
INIT	170:8	170:8	5	row = buf
ASSIGN	170:8	170:14	6	row = buf
LVAL	170:8	170:8	7	row
NAME	170:8	170:8	8	row
LEAF_NODE	170:8	170:8	9	row
ASSIGN_OP	170:12	170:12	7	=
LEAF_NODE	170:12	170:12	8	=
RVAL	170:14	170:14	7	buf
FIELD	170:14	170:14	8	buf
LEAF_NODE	170:14	170:14	9	buf
LEAF_NODE	170:17	170:17	4	;
EXPR_STATEMENT	172:1	172:9	3	( void ) s ;
EXPR	172:1	172:8	4	( void ) s
LEAF_NODE	172:1	172:1	5	(
TYPE_NAME	172:2	172:2	5	void
LEAF_NODE	172:2	172:2	6	void
LEAF_NODE	172:6	172:6	5	)
FIELD	172:8	172:8	5	s
LEAF_NODE	172:8	172:8	6	s
LEAF_NODE	172:9	172:9	4	;
SELECTION	173:1	174:1	3	
KEYWORD	173:1	173:1	4	if
LEAF_NODE	173:1	173:1	5	if
LEAF_NODE	173:4	173:4	4	(
CONDITION	173:5	173:5	4	occ % tif -> tif_scanlinesize
EXPR	173:5	173:11	5	occ % tif -> tif_scanlinesize
FIELD	173:5	173:5	6	occ
LEAF_NODE	173:5	173:5	7	occ
LEAF_NODE	173:9	173:9	6	%
FIELD	173:11	173:16	6	tif -> tif_scanlinesize
LEAF_NODE	173:11	173:11	7	tif
LEAF_NODE	173:14	173:14	7	->
LEAF_NODE	173:16	173:16	7	tif_scanlinesize
LEAF_NODE	173:32	173:32	4	)
STATEMENTS	174:1	177:1	4	
LEAF_NODE	174:1	174:1	5	{
STATEMENTS	175:2	176:2	5	
EXPR_STATEMENT	175:2	175:82	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" ) ;
EXPR	175:2	175:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
FUNCTION_CALL	175:2	175:81	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
CALLEE	175:2	175:2	9	TIFFErrorExt
LEAF_NODE	175:2	175:2	10	TIFFErrorExt
LEAF_NODE	175:14	175:14	9	(
ARGUMENT	175:15	175:15	9	tif -> tif_clientdata
FIELD	175:15	175:20	10	tif -> tif_clientdata
LEAF_NODE	175:15	175:15	11	tif
LEAF_NODE	175:18	175:18	11	->
LEAF_NODE	175:20	175:20	11	tif_clientdata
LEAF_NODE	175:34	175:34	9	,
ARGUMENT	175:36	175:36	9	module
FIELD	175:36	175:36	10	module
LEAF_NODE	175:36	175:36	11	module
LEAF_NODE	175:42	175:42	9	,
ARGUMENT	175:44	175:44	9	"Fractional scanlines cannot be read"
FIELD	175:44	175:44	10	"Fractional scanlines cannot be read"
LEAF_NODE	175:44	175:44	11	"Fractional scanlines cannot be read"
LEAF_NODE	175:81	175:81	9	)
LEAF_NODE	175:82	175:82	7	;
JUMP_STATEMENT	176:2	176:12	6	return ( 0 ) ;
KEYWORD	176:2	176:2	7	return
LEAF_NODE	176:2	176:2	8	return
DESTINATION	176:9	176:9	7	( 0 )
EXPR	176:9	176:11	8	( 0 )
LEAF_NODE	176:9	176:9	9	(
FIELD	176:10	176:10	9	0
LEAF_NODE	176:10	176:10	10	0
LEAF_NODE	176:11	176:11	9	)
LEAF_NODE	176:12	176:12	7	;
LEAF_NODE	177:1	177:1	5	}
ITERATION	178:1	178:17	3	
KEYWORD	178:1	178:1	4	while
LEAF_NODE	178:1	178:1	5	while
LEAF_NODE	178:7	178:7	4	(
CONDITION	178:8	178:8	4	occ > 0
EXPR	178:8	178:14	5	occ > 0
FIELD	178:8	178:8	6	occ
LEAF_NODE	178:8	178:8	7	occ
REL_OPERATOR	178:12	178:12	6	>
LEAF_NODE	178:12	178:12	7	>
FIELD	178:14	178:14	6	0
LEAF_NODE	178:14	178:14	7	0
LEAF_NODE	178:15	178:15	4	)
STATEMENTS	178:17	183:1	4	
LEAF_NODE	178:17	178:17	5	{
STATEMENTS	179:2	182:2	5	
SELECTION	179:2	180:3	6	
KEYWORD	179:2	179:2	7	if
LEAF_NODE	179:2	179:2	8	if
LEAF_NODE	179:5	179:5	7	(
CONDITION	179:6	179:6	7	! ThunderDecode ( tif , row , tif -> tif_dir . td_imagewidth )
EXPR	179:6	179:6	8	! ThunderDecode ( tif , row , tif -> tif_dir . td_imagewidth )
UNARY_EXPR	179:6	179:7	9	! ThunderDecode ( tif , row , tif -> tif_dir . td_imagewidth )
UNARY_OPERATOR	179:6	179:6	10	!
LEAF_NODE	179:6	179:6	11	!
FUNCTION_CALL	179:7	179:57	10	ThunderDecode ( tif , row , tif -> tif_dir . td_imagewidth )
CALLEE	179:7	179:7	11	ThunderDecode
LEAF_NODE	179:7	179:7	12	ThunderDecode
LEAF_NODE	179:20	179:20	11	(
ARGUMENT	179:21	179:21	11	tif
FIELD	179:21	179:21	12	tif
LEAF_NODE	179:21	179:21	13	tif
LEAF_NODE	179:24	179:24	11	,
ARGUMENT	179:26	179:26	11	row
FIELD	179:26	179:26	12	row
LEAF_NODE	179:26	179:26	13	row
LEAF_NODE	179:29	179:29	11	,
ARGUMENT	179:31	179:31	11	tif -> tif_dir . td_imagewidth
FIELD	179:31	179:44	12	tif -> tif_dir . td_imagewidth
LEAF_NODE	179:31	179:31	13	tif
LEAF_NODE	179:34	179:34	13	->
LEAF_NODE	179:36	179:36	13	tif_dir
LEAF_NODE	179:43	179:43	13	.
LEAF_NODE	179:44	179:44	13	td_imagewidth
LEAF_NODE	179:57	179:57	11	)
LEAF_NODE	179:58	179:58	7	)
STATEMENTS	180:3	180:3	7	
JUMP_STATEMENT	180:3	180:13	8	return ( 0 ) ;
KEYWORD	180:3	180:3	9	return
LEAF_NODE	180:3	180:3	10	return
DESTINATION	180:10	180:10	9	( 0 )
EXPR	180:10	180:12	10	( 0 )
LEAF_NODE	180:10	180:10	11	(
FIELD	180:11	180:11	11	0
LEAF_NODE	180:11	180:11	12	0
LEAF_NODE	180:12	180:12	11	)
LEAF_NODE	180:13	180:13	9	;
EXPR_STATEMENT	181:2	181:30	6	occ -= tif -> tif_scanlinesize ;
EXPR	181:2	181:2	7	occ -= tif -> tif_scanlinesize
ASSIGN	181:2	181:9	8	occ -= tif -> tif_scanlinesize
LVAL	181:2	181:2	9	occ
FIELD	181:2	181:2	10	occ
LEAF_NODE	181:2	181:2	11	occ
ASSIGN_OP	181:6	181:6	9	-=
LEAF_NODE	181:6	181:6	10	-=
RVAL	181:9	181:9	9	tif -> tif_scanlinesize
FIELD	181:9	181:14	10	tif -> tif_scanlinesize
LEAF_NODE	181:9	181:9	11	tif
LEAF_NODE	181:12	181:12	11	->
LEAF_NODE	181:14	181:14	11	tif_scanlinesize
LEAF_NODE	181:30	181:30	7	;
EXPR_STATEMENT	182:2	182:30	6	row += tif -> tif_scanlinesize ;
EXPR	182:2	182:2	7	row += tif -> tif_scanlinesize
ASSIGN	182:2	182:9	8	row += tif -> tif_scanlinesize
LVAL	182:2	182:2	9	row
FIELD	182:2	182:2	10	row
LEAF_NODE	182:2	182:2	11	row
ASSIGN_OP	182:6	182:6	9	+=
LEAF_NODE	182:6	182:6	10	+=
RVAL	182:9	182:9	9	tif -> tif_scanlinesize
FIELD	182:9	182:14	10	tif -> tif_scanlinesize
LEAF_NODE	182:9	182:9	11	tif
LEAF_NODE	182:12	182:12	11	->
LEAF_NODE	182:14	182:14	11	tif_scanlinesize
LEAF_NODE	182:30	182:30	7	;
LEAF_NODE	183:1	183:1	5	}
JUMP_STATEMENT	184:1	184:11	3	return ( 1 ) ;
KEYWORD	184:1	184:1	4	return
LEAF_NODE	184:1	184:1	5	return
DESTINATION	184:8	184:8	4	( 1 )
EXPR	184:8	184:10	5	( 1 )
LEAF_NODE	184:8	184:8	6	(
FIELD	184:9	184:9	6	1
LEAF_NODE	184:9	184:9	7	1
LEAF_NODE	184:10	184:10	6	)
LEAF_NODE	184:11	184:11	4	;
LEAF_NODE	185:0	185:0	2	}
FUNCTION_DEF	187:0	196:0	1	
RETURN_TYPE	187:0	187:0	2	int
TYPE_NAME	187:0	187:0	3	int
LEAF_NODE	187:0	187:0	4	int
FUNCTION_NAME	188:0	188:0	2	TIFFInitThunderScan
LEAF_NODE	188:0	188:0	3	TIFFInitThunderScan
PARAMETER_LIST	188:19	188:41	2	( TIFF * tif , int scheme )
LEAF_NODE	188:19	188:19	3	(
PARAMETER_DECL	188:20	188:26	3	TIFF * tif
TYPE	188:20	188:24	4	TIFF *
TYPE_NAME	188:20	188:20	5	TIFF
LEAF_NODE	188:20	188:20	6	TIFF
POINTER	188:24	188:24	5	*
LEAF_NODE	188:24	188:24	6	*
NAME	188:26	188:26	4	tif
LEAF_NODE	188:26	188:26	5	tif
LEAF_NODE	188:29	188:29	3	,
PARAMETER_DECL	188:31	188:35	3	int scheme
TYPE	188:31	188:31	4	int
TYPE_NAME	188:31	188:31	5	int
LEAF_NODE	188:31	188:31	6	int
NAME	188:35	188:35	4	scheme
LEAF_NODE	188:35	188:35	5	scheme
LEAF_NODE	188:41	188:41	3	)
LEAF_NODE	189:0	189:0	2	{
STATEMENTS	190:1	195:1	2	
EXPR_STATEMENT	190:1	190:14	3	( void ) scheme ;
EXPR	190:1	190:8	4	( void ) scheme
LEAF_NODE	190:1	190:1	5	(
TYPE_NAME	190:2	190:2	5	void
LEAF_NODE	190:2	190:2	6	void
LEAF_NODE	190:6	190:6	5	)
FIELD	190:8	190:8	5	scheme
LEAF_NODE	190:8	190:8	6	scheme
LEAF_NODE	190:14	190:14	4	;
EXPR_STATEMENT	192:8	192:49	3	tif -> tif_setupdecode = ThunderSetupDecode ;
EXPR	192:8	192:8	4	tif -> tif_setupdecode = ThunderSetupDecode
ASSIGN	192:8	192:31	5	tif -> tif_setupdecode = ThunderSetupDecode
LVAL	192:8	192:8	6	tif -> tif_setupdecode
FIELD	192:8	192:13	7	tif -> tif_setupdecode
LEAF_NODE	192:8	192:8	8	tif
LEAF_NODE	192:11	192:11	8	->
LEAF_NODE	192:13	192:13	8	tif_setupdecode
ASSIGN_OP	192:29	192:29	6	=
LEAF_NODE	192:29	192:29	7	=
RVAL	192:31	192:31	6	ThunderSetupDecode
FIELD	192:31	192:31	7	ThunderSetupDecode
LEAF_NODE	192:31	192:31	8	ThunderSetupDecode
LEAF_NODE	192:49	192:49	4	;
EXPR_STATEMENT	193:1	193:38	3	tif -> tif_decoderow = ThunderDecodeRow ;
EXPR	193:1	193:1	4	tif -> tif_decoderow = ThunderDecodeRow
ASSIGN	193:1	193:22	5	tif -> tif_decoderow = ThunderDecodeRow
LVAL	193:1	193:1	6	tif -> tif_decoderow
FIELD	193:1	193:6	7	tif -> tif_decoderow
LEAF_NODE	193:1	193:1	8	tif
LEAF_NODE	193:4	193:4	8	->
LEAF_NODE	193:6	193:6	8	tif_decoderow
ASSIGN_OP	193:20	193:20	6	=
LEAF_NODE	193:20	193:20	7	=
RVAL	193:22	193:22	6	ThunderDecodeRow
FIELD	193:22	193:22	7	ThunderDecodeRow
LEAF_NODE	193:22	193:22	8	ThunderDecodeRow
LEAF_NODE	193:38	193:38	4	;
EXPR_STATEMENT	194:1	194:40	3	tif -> tif_decodestrip = ThunderDecodeRow ;
EXPR	194:1	194:1	4	tif -> tif_decodestrip = ThunderDecodeRow
ASSIGN	194:1	194:24	5	tif -> tif_decodestrip = ThunderDecodeRow
LVAL	194:1	194:1	6	tif -> tif_decodestrip
FIELD	194:1	194:6	7	tif -> tif_decodestrip
LEAF_NODE	194:1	194:1	8	tif
LEAF_NODE	194:4	194:4	8	->
LEAF_NODE	194:6	194:6	8	tif_decodestrip
ASSIGN_OP	194:22	194:22	6	=
LEAF_NODE	194:22	194:22	7	=
RVAL	194:24	194:24	6	ThunderDecodeRow
FIELD	194:24	194:24	7	ThunderDecodeRow
LEAF_NODE	194:24	194:24	8	ThunderDecodeRow
LEAF_NODE	194:40	194:40	4	;
JUMP_STATEMENT	195:1	195:11	3	return ( 1 ) ;
KEYWORD	195:1	195:1	4	return
LEAF_NODE	195:1	195:1	5	return
DESTINATION	195:8	195:8	4	( 1 )
EXPR	195:8	195:10	5	( 1 )
LEAF_NODE	195:8	195:8	6	(
FIELD	195:9	195:9	6	1
LEAF_NODE	195:9	195:9	7	1
LEAF_NODE	195:10	195:10	6	)
LEAF_NODE	195:11	195:11	4	;
LEAF_NODE	196:0	196:0	2	}
