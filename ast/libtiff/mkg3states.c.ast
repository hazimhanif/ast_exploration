SOURCE_FILE	49:0	378:0	0	
SIMPLE_DECL	49:0	49:28	1	TIFFFaxTabEnt [ 128 ] MainTable ;
VAR_DECL	49:0	49:14	2	TIFFFaxTabEnt [ 128 ] MainTable
TYPE	49:0	49:23	3	TIFFFaxTabEnt [ 128 ]
TYPE_NAME	49:0	49:0	4	TIFFFaxTabEnt
LEAF_NODE	49:0	49:0	5	TIFFFaxTabEnt
TYPE_SUFFIX	49:23	49:27	4	[ 128 ]
LEAF_NODE	49:23	49:23	5	[
FIELD	49:24	49:24	5	128
LEAF_NODE	49:24	49:24	6	128
LEAF_NODE	49:27	49:27	5	]
NAME	49:14	49:14	3	MainTable
LEAF_NODE	49:14	49:14	4	MainTable
LEAF_NODE	49:28	49:28	2	;
SIMPLE_DECL	50:0	50:30	1	TIFFFaxTabEnt [ 4096 ] WhiteTable ;
VAR_DECL	50:0	50:14	2	TIFFFaxTabEnt [ 4096 ] WhiteTable
TYPE	50:0	50:24	3	TIFFFaxTabEnt [ 4096 ]
TYPE_NAME	50:0	50:0	4	TIFFFaxTabEnt
LEAF_NODE	50:0	50:0	5	TIFFFaxTabEnt
TYPE_SUFFIX	50:24	50:29	4	[ 4096 ]
LEAF_NODE	50:24	50:24	5	[
FIELD	50:25	50:25	5	4096
LEAF_NODE	50:25	50:25	6	4096
LEAF_NODE	50:29	50:29	5	]
NAME	50:14	50:14	3	WhiteTable
LEAF_NODE	50:14	50:14	4	WhiteTable
LEAF_NODE	50:30	50:30	2	;
SIMPLE_DECL	51:0	51:30	1	TIFFFaxTabEnt [ 8192 ] BlackTable ;
VAR_DECL	51:0	51:14	2	TIFFFaxTabEnt [ 8192 ] BlackTable
TYPE	51:0	51:24	3	TIFFFaxTabEnt [ 8192 ]
TYPE_NAME	51:0	51:0	4	TIFFFaxTabEnt
LEAF_NODE	51:0	51:0	5	TIFFFaxTabEnt
TYPE_SUFFIX	51:24	51:29	4	[ 8192 ]
LEAF_NODE	51:24	51:24	5	[
FIELD	51:25	51:25	5	8192
LEAF_NODE	51:25	51:25	6	8192
LEAF_NODE	51:29	51:29	5	]
NAME	51:14	51:14	3	BlackTable
LEAF_NODE	51:14	51:14	4	BlackTable
LEAF_NODE	51:30	51:30	2	;
SIMPLE_DECL	53:0	56:1	1	struct proto BASE_CLASSES { uint16 code ; uint16 val ; } ;
CLASS_DEF	53:0	53:0	2	struct proto BASE_CLASSES { uint16 code ; uint16 val ; }
CLASS_DEF	53:0	56:0	3	struct proto BASE_CLASSES { uint16 code ; uint16 val ; }
LEAF_NODE	53:0	53:0	4	struct
CLASS_NAME	53:7	53:7	4	proto
LEAF_NODE	53:7	53:7	5	proto
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	53:13	53:13	4	{
CLASS_CONTENT	54:4	55:4	4	uint16 code ; uint16 val ;
SIMPLE_DECL	54:4	54:15	5	uint16 code ;
VAR_DECL	54:4	54:11	6	uint16 code
TYPE	54:4	54:4	7	uint16
TYPE_NAME	54:4	54:4	8	uint16
LEAF_NODE	54:4	54:4	9	uint16
NAME	54:11	54:11	7	code
LEAF_NODE	54:11	54:11	8	code
LEAF_NODE	54:15	54:15	6	;
SIMPLE_DECL	55:4	55:14	5	uint16 val ;
VAR_DECL	55:4	55:11	6	uint16 val
TYPE	55:4	55:4	7	uint16
TYPE_NAME	55:4	55:4	8	uint16
LEAF_NODE	55:4	55:4	9	uint16
NAME	55:11	55:11	7	val
LEAF_NODE	55:11	55:11	8	val
LEAF_NODE	55:14	55:14	6	;
LEAF_NODE	56:0	56:0	4	}
LEAF_NODE	56:1	56:1	2	;
FUNCTION_DEF	317:0	335:0	1	
RETURN_TYPE	317:0	317:7	2	static void
LEAF_NODE	317:0	317:0	3	static
TYPE_NAME	317:7	317:7	3	void
LEAF_NODE	317:7	317:7	4	void
FUNCTION_NAME	318:0	318:0	2	FillTable
LEAF_NODE	318:0	318:0	3	FillTable
PARAMETER_LIST	318:9	318:64	2	( TIFFFaxTabEnt * T , int Size , struct proto * P , int State )
LEAF_NODE	318:9	318:9	3	(
PARAMETER_DECL	318:10	318:25	3	TIFFFaxTabEnt * T
TYPE	318:10	318:24	4	TIFFFaxTabEnt *
TYPE_NAME	318:10	318:10	5	TIFFFaxTabEnt
LEAF_NODE	318:10	318:10	6	TIFFFaxTabEnt
POINTER	318:24	318:24	5	*
LEAF_NODE	318:24	318:24	6	*
NAME	318:25	318:25	4	T
LEAF_NODE	318:25	318:25	5	T
LEAF_NODE	318:26	318:26	3	,
PARAMETER_DECL	318:28	318:32	3	int Size
TYPE	318:28	318:28	4	int
TYPE_NAME	318:28	318:28	5	int
LEAF_NODE	318:28	318:28	6	int
NAME	318:32	318:32	4	Size
LEAF_NODE	318:32	318:32	5	Size
LEAF_NODE	318:36	318:36	3	,
PARAMETER_DECL	318:38	318:52	3	struct proto * P
TYPE	318:38	318:51	4	struct proto *
TYPE_NAME	318:38	318:45	5	struct proto
LEAF_NODE	318:38	318:38	6	struct
LEAF_NODE	318:45	318:45	6	proto
POINTER	318:51	318:51	5	*
LEAF_NODE	318:51	318:51	6	*
NAME	318:52	318:52	4	P
LEAF_NODE	318:52	318:52	5	P
LEAF_NODE	318:53	318:53	3	,
PARAMETER_DECL	318:55	318:59	3	int State
TYPE	318:55	318:55	4	int
TYPE_NAME	318:55	318:55	5	int
LEAF_NODE	318:55	318:55	6	int
NAME	318:59	318:59	4	State
LEAF_NODE	318:59	318:59	5	State
LEAF_NODE	318:64	318:64	3	)
LEAF_NODE	319:0	319:0	2	{
STATEMENTS	320:4	322:4	2	
SIMPLE_DECL	320:4	320:25	3	int limit ; limit = 1 << Size ;
VAR_DECL	320:4	320:8	4	int limit ; limit = 1 << Size
TYPE	320:4	320:4	5	int
TYPE_NAME	320:4	320:4	6	int
LEAF_NODE	320:4	320:4	7	int
NAME	320:8	320:8	5	limit
LEAF_NODE	320:8	320:8	6	limit
LEAF_NODE	0:0	0:0	5	;
INIT	320:8	320:8	5	limit = 1 << Size
ASSIGN	320:8	320:16	6	limit = 1 << Size
LVAL	320:8	320:8	7	limit
NAME	320:8	320:8	8	limit
LEAF_NODE	320:8	320:8	9	limit
ASSIGN_OP	320:14	320:14	7	=
LEAF_NODE	320:14	320:14	8	=
RVAL	320:16	320:21	7	1 << Size
FIELD	320:16	320:16	8	1
LEAF_NODE	320:16	320:16	9	1
LEAF_NODE	320:18	320:18	8	<<
FIELD	320:21	320:21	8	Size
LEAF_NODE	320:21	320:21	9	Size
LEAF_NODE	320:25	320:25	4	;
ITERATION	322:4	322:19	3	
KEYWORD	322:4	322:4	4	while
LEAF_NODE	322:4	322:4	5	while
LEAF_NODE	322:10	322:10	4	(
CONDITION	322:11	322:11	4	P -> val
EXPR	322:11	322:11	5	P -> val
FIELD	322:11	322:14	6	P -> val
LEAF_NODE	322:11	322:11	7	P
LEAF_NODE	322:12	322:12	7	->
LEAF_NODE	322:14	322:14	7	val
LEAF_NODE	322:17	322:17	4	)
STATEMENTS	322:19	334:4	4	
LEAF_NODE	322:19	322:19	5	{
STATEMENTS	323:1	333:1	5	
SIMPLE_DECL	323:1	323:24	6	int width ; width = P -> val & 15 ;
VAR_DECL	323:1	323:5	7	int width ; width = P -> val & 15
TYPE	323:1	323:1	8	int
TYPE_NAME	323:1	323:1	9	int
LEAF_NODE	323:1	323:1	10	int
NAME	323:5	323:5	8	width
LEAF_NODE	323:5	323:5	9	width
LEAF_NODE	0:0	0:0	8	;
INIT	323:5	323:5	8	width = P -> val & 15
ASSIGN	323:5	323:13	9	width = P -> val & 15
LVAL	323:5	323:5	10	width
NAME	323:5	323:5	11	width
LEAF_NODE	323:5	323:5	12	width
ASSIGN_OP	323:11	323:11	10	=
LEAF_NODE	323:11	323:11	11	=
RVAL	323:13	323:22	10	P -> val & 15
FIELD	323:13	323:16	11	P -> val
LEAF_NODE	323:13	323:13	12	P
LEAF_NODE	323:14	323:14	12	->
LEAF_NODE	323:16	323:16	12	val
LEAF_NODE	323:20	323:20	11	&
FIELD	323:22	323:22	11	15
LEAF_NODE	323:22	323:22	12	15
LEAF_NODE	323:24	323:24	7	;
SIMPLE_DECL	324:1	324:24	6	int param ; param = P -> val >> 4 ;
VAR_DECL	324:1	324:5	7	int param ; param = P -> val >> 4
TYPE	324:1	324:1	8	int
TYPE_NAME	324:1	324:1	9	int
LEAF_NODE	324:1	324:1	10	int
NAME	324:5	324:5	8	param
LEAF_NODE	324:5	324:5	9	param
LEAF_NODE	0:0	0:0	8	;
INIT	324:5	324:5	8	param = P -> val >> 4
ASSIGN	324:5	324:13	9	param = P -> val >> 4
LVAL	324:5	324:5	10	param
NAME	324:5	324:5	11	param
LEAF_NODE	324:5	324:5	12	param
ASSIGN_OP	324:11	324:11	10	=
LEAF_NODE	324:11	324:11	11	=
RVAL	324:13	324:23	10	P -> val >> 4
FIELD	324:13	324:16	11	P -> val
LEAF_NODE	324:13	324:13	12	P
LEAF_NODE	324:14	324:14	12	->
LEAF_NODE	324:16	324:16	12	val
LEAF_NODE	324:20	324:20	11	>>
FIELD	324:23	324:23	11	4
LEAF_NODE	324:23	324:23	12	4
LEAF_NODE	324:24	324:24	7	;
SIMPLE_DECL	325:1	325:22	6	int incr ; incr = 1 << width ;
VAR_DECL	325:1	325:5	7	int incr ; incr = 1 << width
TYPE	325:1	325:1	8	int
TYPE_NAME	325:1	325:1	9	int
LEAF_NODE	325:1	325:1	10	int
NAME	325:5	325:5	8	incr
LEAF_NODE	325:5	325:5	9	incr
LEAF_NODE	0:0	0:0	8	;
INIT	325:5	325:5	8	incr = 1 << width
ASSIGN	325:5	325:12	9	incr = 1 << width
LVAL	325:5	325:5	10	incr
NAME	325:5	325:5	11	incr
LEAF_NODE	325:5	325:5	12	incr
ASSIGN_OP	325:10	325:10	10	=
LEAF_NODE	325:10	325:10	11	=
RVAL	325:12	325:17	10	1 << width
FIELD	325:12	325:12	11	1
LEAF_NODE	325:12	325:12	12	1
LEAF_NODE	325:14	325:14	11	<<
FIELD	325:17	325:17	11	width
LEAF_NODE	325:17	325:17	12	width
LEAF_NODE	325:22	325:22	7	;
SIMPLE_DECL	326:1	326:9	6	int code ;
VAR_DECL	326:1	326:5	7	int code
TYPE	326:1	326:1	8	int
TYPE_NAME	326:1	326:1	9	int
LEAF_NODE	326:1	326:1	10	int
NAME	326:5	326:5	8	code
LEAF_NODE	326:5	326:5	9	code
LEAF_NODE	326:9	326:9	7	;
ITERATION	327:1	327:50	6	
KEYWORD	327:1	327:1	7	for
LEAF_NODE	327:1	327:1	8	for
LEAF_NODE	327:5	327:5	7	(
FOR_INIT	327:6	327:20	7	code = P -> code ;
EXPR	327:6	327:6	8	code = P -> code
ASSIGN	327:6	327:13	9	code = P -> code
LVAL	327:6	327:6	10	code
FIELD	327:6	327:6	11	code
LEAF_NODE	327:6	327:6	12	code
ASSIGN_OP	327:11	327:11	10	=
LEAF_NODE	327:11	327:11	11	=
RVAL	327:13	327:13	10	P -> code
FIELD	327:13	327:16	11	P -> code
LEAF_NODE	327:13	327:13	12	P
LEAF_NODE	327:14	327:14	12	->
LEAF_NODE	327:16	327:16	12	code
LEAF_NODE	327:20	327:20	8	;
CONDITION	327:22	327:22	7	code < limit
EXPR	327:22	327:29	8	code < limit
FIELD	327:22	327:22	9	code
LEAF_NODE	327:22	327:22	10	code
REL_OPERATOR	327:27	327:27	9	<
LEAF_NODE	327:27	327:27	10	<
FIELD	327:29	327:29	9	limit
LEAF_NODE	327:29	327:29	10	limit
LEAF_NODE	327:34	327:34	7	;
FOR_EXPR	327:36	327:36	7	code += incr
EXPR	327:36	327:36	8	code += incr
ASSIGN	327:36	327:44	9	code += incr
LVAL	327:36	327:36	10	code
FIELD	327:36	327:36	11	code
LEAF_NODE	327:36	327:36	12	code
ASSIGN_OP	327:41	327:41	10	+=
LEAF_NODE	327:41	327:41	11	+=
RVAL	327:44	327:44	10	incr
FIELD	327:44	327:44	11	incr
LEAF_NODE	327:44	327:44	12	incr
LEAF_NODE	327:48	327:48	7	)
STATEMENTS	327:50	332:1	7	
LEAF_NODE	327:50	327:50	8	{
STATEMENTS	328:5	331:5	8	
SIMPLE_DECL	328:5	328:30	9	TIFFFaxTabEnt * E ; E = T + code ;
VAR_DECL	328:5	328:20	10	TIFFFaxTabEnt * E ; E = T + code
TYPE	328:5	328:19	11	TIFFFaxTabEnt *
TYPE_NAME	328:5	328:5	12	TIFFFaxTabEnt
LEAF_NODE	328:5	328:5	13	TIFFFaxTabEnt
POINTER	328:19	328:19	12	*
LEAF_NODE	328:19	328:19	13	*
NAME	328:20	328:20	11	E
LEAF_NODE	328:20	328:20	12	E
LEAF_NODE	0:0	0:0	11	;
INIT	328:20	328:20	11	E = T + code
ASSIGN	328:20	328:24	12	E = T + code
LVAL	328:20	328:20	13	E
NAME	328:20	328:20	14	E
LEAF_NODE	328:20	328:20	15	E
ASSIGN_OP	328:22	328:22	13	=
LEAF_NODE	328:22	328:22	14	=
RVAL	328:24	328:26	13	T + code
FIELD	328:24	328:24	14	T
LEAF_NODE	328:24	328:24	15	T
LEAF_NODE	328:25	328:25	14	+
FIELD	328:26	328:26	14	code
LEAF_NODE	328:26	328:26	15	code
LEAF_NODE	328:30	328:30	10	;
EXPR_STATEMENT	329:5	329:21	9	E -> State = State ;
EXPR	329:5	329:5	10	E -> State = State
ASSIGN	329:5	329:16	11	E -> State = State
LVAL	329:5	329:5	12	E -> State
FIELD	329:5	329:8	13	E -> State
LEAF_NODE	329:5	329:5	14	E
LEAF_NODE	329:6	329:6	14	->
LEAF_NODE	329:8	329:8	14	State
ASSIGN_OP	329:14	329:14	12	=
LEAF_NODE	329:14	329:14	13	=
RVAL	329:16	329:16	12	State
FIELD	329:16	329:16	13	State
LEAF_NODE	329:16	329:16	14	State
LEAF_NODE	329:21	329:21	10	;
EXPR_STATEMENT	330:5	330:21	9	E -> Width = width ;
EXPR	330:5	330:5	10	E -> Width = width
ASSIGN	330:5	330:16	11	E -> Width = width
LVAL	330:5	330:5	12	E -> Width
FIELD	330:5	330:8	13	E -> Width
LEAF_NODE	330:5	330:5	14	E
LEAF_NODE	330:6	330:6	14	->
LEAF_NODE	330:8	330:8	14	Width
ASSIGN_OP	330:14	330:14	12	=
LEAF_NODE	330:14	330:14	13	=
RVAL	330:16	330:16	12	width
FIELD	330:16	330:16	13	width
LEAF_NODE	330:16	330:16	14	width
LEAF_NODE	330:21	330:21	10	;
EXPR_STATEMENT	331:5	331:21	9	E -> Param = param ;
EXPR	331:5	331:5	10	E -> Param = param
ASSIGN	331:5	331:16	11	E -> Param = param
LVAL	331:5	331:5	12	E -> Param
FIELD	331:5	331:8	13	E -> Param
LEAF_NODE	331:5	331:5	14	E
LEAF_NODE	331:6	331:6	14	->
LEAF_NODE	331:8	331:8	14	Param
ASSIGN_OP	331:14	331:14	12	=
LEAF_NODE	331:14	331:14	13	=
RVAL	331:16	331:16	12	param
FIELD	331:16	331:16	13	param
LEAF_NODE	331:16	331:16	14	param
LEAF_NODE	331:21	331:21	10	;
LEAF_NODE	332:1	332:1	8	}
EXPR_STATEMENT	333:1	333:4	6	P ++ ;
EXPR	333:1	333:1	7	P ++
FIELD	333:1	333:2	8	P ++
LEAF_NODE	333:1	333:1	9	P
LEAF_NODE	333:2	333:2	9	++
LEAF_NODE	333:4	333:4	7	;
LEAF_NODE	334:4	334:4	5	}
LEAF_NODE	335:0	335:0	2	}
SIMPLE_DECL	337:7	337:31	1	char * storage_class ; storage_class = "" ;
VAR_DECL	337:7	337:13	2	char * storage_class ; storage_class = ""
TYPE	337:7	337:11	3	char *
TYPE_NAME	337:7	337:7	4	char
LEAF_NODE	337:7	337:7	5	char
POINTER	337:11	337:11	4	*
LEAF_NODE	337:11	337:11	5	*
NAME	337:13	337:13	3	storage_class
LEAF_NODE	337:13	337:13	4	storage_class
LEAF_NODE	0:0	0:0	3	;
INIT	337:13	337:13	3	storage_class = ""
ASSIGN	337:13	337:29	4	storage_class = ""
LVAL	337:13	337:13	5	storage_class
NAME	337:13	337:13	6	storage_class
LEAF_NODE	337:13	337:13	7	storage_class
ASSIGN_OP	337:27	337:27	5	=
LEAF_NODE	337:27	337:27	6	=
RVAL	337:29	337:29	5	""
FIELD	337:29	337:29	6	""
LEAF_NODE	337:29	337:29	7	""
LEAF_NODE	337:31	337:31	2	;
SIMPLE_DECL	338:7	338:29	1	char * const_class ; const_class = "" ;
VAR_DECL	338:7	338:13	2	char * const_class ; const_class = ""
TYPE	338:7	338:11	3	char *
TYPE_NAME	338:7	338:7	4	char
LEAF_NODE	338:7	338:7	5	char
POINTER	338:11	338:11	4	*
LEAF_NODE	338:11	338:11	5	*
NAME	338:13	338:13	3	const_class
LEAF_NODE	338:13	338:13	4	const_class
LEAF_NODE	0:0	0:0	3	;
INIT	338:13	338:13	3	const_class = ""
ASSIGN	338:13	338:27	4	const_class = ""
LVAL	338:13	338:13	5	const_class
NAME	338:13	338:13	6	const_class
LEAF_NODE	338:13	338:13	7	const_class
ASSIGN_OP	338:25	338:25	5	=
LEAF_NODE	338:25	338:25	6	=
RVAL	338:27	338:27	5	""
FIELD	338:27	338:27	6	""
LEAF_NODE	338:27	338:27	7	""
LEAF_NODE	338:29	338:29	2	;
SIMPLE_DECL	339:7	339:25	1	int packoutput ; packoutput = 1 ;
VAR_DECL	339:7	339:11	2	int packoutput ; packoutput = 1
TYPE	339:7	339:7	3	int
TYPE_NAME	339:7	339:7	4	int
LEAF_NODE	339:7	339:7	5	int
NAME	339:11	339:11	3	packoutput
LEAF_NODE	339:11	339:11	4	packoutput
LEAF_NODE	0:0	0:0	3	;
INIT	339:11	339:11	3	packoutput = 1
ASSIGN	339:11	339:24	4	packoutput = 1
LVAL	339:11	339:11	5	packoutput
NAME	339:11	339:11	6	packoutput
LEAF_NODE	339:11	339:11	7	packoutput
ASSIGN_OP	339:22	339:22	5	=
LEAF_NODE	339:22	339:22	6	=
RVAL	339:24	339:24	5	1
FIELD	339:24	339:24	6	1
LEAF_NODE	339:24	339:24	7	1
LEAF_NODE	339:25	339:25	2	;
SIMPLE_DECL	340:7	340:26	1	char * prebrace ; prebrace = "" ;
VAR_DECL	340:7	340:13	2	char * prebrace ; prebrace = ""
TYPE	340:7	340:11	3	char *
TYPE_NAME	340:7	340:7	4	char
LEAF_NODE	340:7	340:7	5	char
POINTER	340:11	340:11	4	*
LEAF_NODE	340:11	340:11	5	*
NAME	340:13	340:13	3	prebrace
LEAF_NODE	340:13	340:13	4	prebrace
LEAF_NODE	0:0	0:0	3	;
INIT	340:13	340:13	3	prebrace = ""
ASSIGN	340:13	340:24	4	prebrace = ""
LVAL	340:13	340:13	5	prebrace
NAME	340:13	340:13	6	prebrace
LEAF_NODE	340:13	340:13	7	prebrace
ASSIGN_OP	340:22	340:22	5	=
LEAF_NODE	340:22	340:22	6	=
RVAL	340:24	340:24	5	""
FIELD	340:24	340:24	6	""
LEAF_NODE	340:24	340:24	7	""
LEAF_NODE	340:26	340:26	2	;
SIMPLE_DECL	341:7	341:27	1	char * postbrace ; postbrace = "" ;
VAR_DECL	341:7	341:13	2	char * postbrace ; postbrace = ""
TYPE	341:7	341:11	3	char *
TYPE_NAME	341:7	341:7	4	char
LEAF_NODE	341:7	341:7	5	char
POINTER	341:11	341:11	4	*
LEAF_NODE	341:11	341:11	5	*
NAME	341:13	341:13	3	postbrace
LEAF_NODE	341:13	341:13	4	postbrace
LEAF_NODE	0:0	0:0	3	;
INIT	341:13	341:13	3	postbrace = ""
ASSIGN	341:13	341:25	4	postbrace = ""
LVAL	341:13	341:13	5	postbrace
NAME	341:13	341:13	6	postbrace
LEAF_NODE	341:13	341:13	7	postbrace
ASSIGN_OP	341:23	341:23	5	=
LEAF_NODE	341:23	341:23	6	=
RVAL	341:25	341:25	5	""
FIELD	341:25	341:25	6	""
LEAF_NODE	341:25	341:25	7	""
LEAF_NODE	341:27	341:27	2	;
FUNCTION_DEF	343:0	375:0	1	
RETURN_TYPE	343:0	343:0	2	void
TYPE_NAME	343:0	343:0	3	void
LEAF_NODE	343:0	343:0	4	void
FUNCTION_NAME	344:0	344:0	2	WriteTable
LEAF_NODE	344:0	344:0	3	WriteTable
PARAMETER_LIST	344:10	344:71	2	( FILE * fd , const TIFFFaxTabEnt * T , int Size , const char * name )
LEAF_NODE	344:10	344:10	3	(
PARAMETER_DECL	344:11	344:17	3	FILE * fd
TYPE	344:11	344:15	4	FILE *
TYPE_NAME	344:11	344:11	5	FILE
LEAF_NODE	344:11	344:11	6	FILE
POINTER	344:15	344:15	5	*
LEAF_NODE	344:15	344:15	6	*
NAME	344:17	344:17	4	fd
LEAF_NODE	344:17	344:17	5	fd
LEAF_NODE	344:19	344:19	3	,
PARAMETER_DECL	344:21	344:42	3	const TIFFFaxTabEnt * T
TYPE	344:21	344:40	4	const TIFFFaxTabEnt *
TYPE_NAME	344:21	344:27	5	const TIFFFaxTabEnt
LEAF_NODE	344:21	344:21	6	const
LEAF_NODE	344:27	344:27	6	TIFFFaxTabEnt
POINTER	344:40	344:40	5	*
LEAF_NODE	344:40	344:40	6	*
NAME	344:42	344:42	4	T
LEAF_NODE	344:42	344:42	5	T
LEAF_NODE	344:43	344:43	3	,
PARAMETER_DECL	344:45	344:49	3	int Size
TYPE	344:45	344:45	4	int
TYPE_NAME	344:45	344:45	5	int
LEAF_NODE	344:45	344:45	6	int
NAME	344:49	344:49	4	Size
LEAF_NODE	344:49	344:49	5	Size
LEAF_NODE	344:53	344:53	3	,
PARAMETER_DECL	344:55	344:67	3	const char * name
TYPE	344:55	344:65	4	const char *
TYPE_NAME	344:55	344:61	5	const char
LEAF_NODE	344:55	344:55	6	const
LEAF_NODE	344:61	344:61	6	char
POINTER	344:65	344:65	5	*
LEAF_NODE	344:65	344:65	6	*
NAME	344:67	344:67	4	name
LEAF_NODE	344:67	344:67	5	name
LEAF_NODE	344:71	344:71	3	)
LEAF_NODE	345:0	345:0	2	{
STATEMENTS	346:4	374:4	2	
SIMPLE_DECL	346:4	346:9	3	int i ;
VAR_DECL	346:4	346:8	4	int i
TYPE	346:4	346:4	5	int
TYPE_NAME	346:4	346:4	6	int
LEAF_NODE	346:4	346:4	7	int
NAME	346:8	346:8	5	i
LEAF_NODE	346:8	346:8	6	i
LEAF_NODE	346:9	346:9	4	;
SIMPLE_DECL	347:4	347:13	3	char * sep ;
VAR_DECL	347:4	347:10	4	char * sep
TYPE	347:4	347:8	5	char *
TYPE_NAME	347:4	347:4	6	char
LEAF_NODE	347:4	347:4	7	char
POINTER	347:8	347:8	6	*
LEAF_NODE	347:8	347:8	7	*
NAME	347:10	347:10	5	sep
LEAF_NODE	347:10	347:10	6	sep
LEAF_NODE	347:13	347:13	4	;
EXPR_STATEMENT	349:4	350:40	3	fprintf ( fd , "%s %s TIFFFaxTabEnt %s[%d] = {" , storage_class , const_class , name , Size ) ;
EXPR	349:4	349:4	4	fprintf ( fd , "%s %s TIFFFaxTabEnt %s[%d] = {" , storage_class , const_class , name , Size )
FUNCTION_CALL	349:4	350:39	5	fprintf ( fd , "%s %s TIFFFaxTabEnt %s[%d] = {" , storage_class , const_class , name , Size )
CALLEE	349:4	349:4	6	fprintf
LEAF_NODE	349:4	349:4	7	fprintf
LEAF_NODE	349:11	349:11	6	(
ARGUMENT	349:12	349:12	6	fd
FIELD	349:12	349:12	7	fd
LEAF_NODE	349:12	349:12	8	fd
LEAF_NODE	349:14	349:14	6	,
ARGUMENT	349:16	349:16	6	"%s %s TIFFFaxTabEnt %s[%d] = {"
FIELD	349:16	349:16	7	"%s %s TIFFFaxTabEnt %s[%d] = {"
LEAF_NODE	349:16	349:16	8	"%s %s TIFFFaxTabEnt %s[%d] = {"
LEAF_NODE	349:48	349:48	6	,
ARGUMENT	350:1	350:1	6	storage_class
FIELD	350:1	350:1	7	storage_class
LEAF_NODE	350:1	350:1	8	storage_class
LEAF_NODE	350:14	350:14	6	,
ARGUMENT	350:16	350:16	6	const_class
FIELD	350:16	350:16	7	const_class
LEAF_NODE	350:16	350:16	8	const_class
LEAF_NODE	350:27	350:27	6	,
ARGUMENT	350:29	350:29	6	name
FIELD	350:29	350:29	7	name
LEAF_NODE	350:29	350:29	8	name
LEAF_NODE	350:33	350:33	6	,
ARGUMENT	350:35	350:35	6	Size
FIELD	350:35	350:35	7	Size
LEAF_NODE	350:35	350:35	8	Size
LEAF_NODE	350:39	350:39	6	)
LEAF_NODE	350:40	350:40	4	;
SELECTION	351:4	351:20	3	
KEYWORD	351:4	351:4	4	if
LEAF_NODE	351:4	351:4	5	if
LEAF_NODE	351:7	351:7	4	(
CONDITION	351:8	351:8	4	packoutput
EXPR	351:8	351:8	5	packoutput
FIELD	351:8	351:8	6	packoutput
LEAF_NODE	351:8	351:8	7	packoutput
LEAF_NODE	351:18	351:18	4	)
STATEMENTS	351:20	362:4	4	
LEAF_NODE	351:20	351:20	5	{
STATEMENTS	352:1	353:1	5	
EXPR_STATEMENT	352:1	352:11	6	sep = "\n" ;
EXPR	352:1	352:1	7	sep = "\n"
ASSIGN	352:1	352:7	8	sep = "\n"
LVAL	352:1	352:1	9	sep
FIELD	352:1	352:1	10	sep
LEAF_NODE	352:1	352:1	11	sep
ASSIGN_OP	352:5	352:5	9	=
LEAF_NODE	352:5	352:5	10	=
RVAL	352:7	352:7	9	"\n"
FIELD	352:7	352:7	10	"\n"
LEAF_NODE	352:7	352:7	11	"\n"
LEAF_NODE	352:11	352:11	7	;
ITERATION	353:1	353:28	6	
KEYWORD	353:1	353:1	7	for
LEAF_NODE	353:1	353:1	8	for
LEAF_NODE	353:5	353:5	7	(
FOR_INIT	353:6	353:11	7	i = 0 ;
EXPR	353:6	353:6	8	i = 0
ASSIGN	353:6	353:10	9	i = 0
LVAL	353:6	353:6	10	i
FIELD	353:6	353:6	11	i
LEAF_NODE	353:6	353:6	12	i
ASSIGN_OP	353:8	353:8	10	=
LEAF_NODE	353:8	353:8	11	=
RVAL	353:10	353:10	10	0
FIELD	353:10	353:10	11	0
LEAF_NODE	353:10	353:10	12	0
LEAF_NODE	353:11	353:11	8	;
CONDITION	353:13	353:13	7	i < Size
EXPR	353:13	353:17	8	i < Size
FIELD	353:13	353:13	9	i
LEAF_NODE	353:13	353:13	10	i
REL_OPERATOR	353:15	353:15	9	<
LEAF_NODE	353:15	353:15	10	<
FIELD	353:17	353:17	9	Size
LEAF_NODE	353:17	353:17	10	Size
LEAF_NODE	353:21	353:21	7	;
FOR_EXPR	353:23	353:23	7	i ++
EXPR	353:23	353:23	8	i ++
FIELD	353:23	353:24	9	i ++
LEAF_NODE	353:23	353:23	10	i
LEAF_NODE	353:24	353:24	10	++
LEAF_NODE	353:26	353:26	7	)
STATEMENTS	353:28	361:1	7	
LEAF_NODE	353:28	353:28	8	{
STATEMENTS	354:5	360:5	8	
EXPR_STATEMENT	354:5	355:63	9	fprintf ( fd , "%s%s%d,%d,%d%s" , sep , prebrace , T -> State , T -> Width , ( int ) T -> Param , postbrace ) ;
EXPR	354:5	354:5	10	fprintf ( fd , "%s%s%d,%d,%d%s" , sep , prebrace , T -> State , T -> Width , ( int ) T -> Param , postbrace )
FUNCTION_CALL	354:5	355:62	11	fprintf ( fd , "%s%s%d,%d,%d%s" , sep , prebrace , T -> State , T -> Width , ( int ) T -> Param , postbrace )
CALLEE	354:5	354:5	12	fprintf
LEAF_NODE	354:5	354:5	13	fprintf
LEAF_NODE	354:12	354:12	12	(
ARGUMENT	354:13	354:13	12	fd
FIELD	354:13	354:13	13	fd
LEAF_NODE	354:13	354:13	14	fd
LEAF_NODE	354:15	354:15	12	,
ARGUMENT	354:17	354:17	12	"%s%s%d,%d,%d%s"
FIELD	354:17	354:17	13	"%s%s%d,%d,%d%s"
LEAF_NODE	354:17	354:17	14	"%s%s%d,%d,%d%s"
LEAF_NODE	354:33	354:33	12	,
ARGUMENT	355:2	355:2	12	sep
FIELD	355:2	355:2	13	sep
LEAF_NODE	355:2	355:2	14	sep
LEAF_NODE	355:5	355:5	12	,
ARGUMENT	355:7	355:7	12	prebrace
FIELD	355:7	355:7	13	prebrace
LEAF_NODE	355:7	355:7	14	prebrace
LEAF_NODE	355:15	355:15	12	,
ARGUMENT	355:17	355:17	12	T -> State
FIELD	355:17	355:20	13	T -> State
LEAF_NODE	355:17	355:17	14	T
LEAF_NODE	355:18	355:18	14	->
LEAF_NODE	355:20	355:20	14	State
LEAF_NODE	355:25	355:25	12	,
ARGUMENT	355:27	355:27	12	T -> Width
FIELD	355:27	355:30	13	T -> Width
LEAF_NODE	355:27	355:27	14	T
LEAF_NODE	355:28	355:28	14	->
LEAF_NODE	355:30	355:30	14	Width
LEAF_NODE	355:35	355:35	12	,
ARGUMENT	355:37	355:43	12	( int ) T -> Param
LEAF_NODE	355:37	355:37	13	(
TYPE_NAME	355:38	355:38	13	int
LEAF_NODE	355:38	355:38	14	int
LEAF_NODE	355:41	355:41	13	)
FIELD	355:43	355:46	13	T -> Param
LEAF_NODE	355:43	355:43	14	T
LEAF_NODE	355:44	355:44	14	->
LEAF_NODE	355:46	355:46	14	Param
LEAF_NODE	355:51	355:51	12	,
ARGUMENT	355:53	355:53	12	postbrace
FIELD	355:53	355:53	13	postbrace
LEAF_NODE	355:53	355:53	14	postbrace
LEAF_NODE	355:62	355:62	12	)
LEAF_NODE	355:63	355:63	10	;
SELECTION	356:5	357:6	9	
KEYWORD	356:5	356:5	10	if
LEAF_NODE	356:5	356:5	11	if
LEAF_NODE	356:8	356:8	10	(
CONDITION	356:9	356:9	10	( ( i + 1 ) % 10 ) == 0
EXPR	356:9	356:25	11	( ( i + 1 ) % 10 ) == 0
LEAF_NODE	356:9	356:9	12	(
LEAF_NODE	356:10	356:10	12	(
FIELD	356:11	356:11	12	i
LEAF_NODE	356:11	356:11	13	i
LEAF_NODE	356:12	356:12	12	+
FIELD	356:13	356:13	12	1
LEAF_NODE	356:13	356:13	13	1
LEAF_NODE	356:14	356:14	12	)
LEAF_NODE	356:16	356:16	12	%
FIELD	356:18	356:18	12	10
LEAF_NODE	356:18	356:18	13	10
LEAF_NODE	356:20	356:20	12	)
EQ_OPERATOR	356:22	356:22	12	==
LEAF_NODE	356:22	356:22	13	==
FIELD	356:25	356:25	12	0
LEAF_NODE	356:25	356:25	13	0
LEAF_NODE	356:26	356:26	10	)
STATEMENTS	357:6	357:6	10	
EXPR_STATEMENT	357:6	357:17	11	sep = ",\n" ;
EXPR	357:6	357:6	12	sep = ",\n"
ASSIGN	357:6	357:12	13	sep = ",\n"
LVAL	357:6	357:6	14	sep
FIELD	357:6	357:6	15	sep
LEAF_NODE	357:6	357:6	16	sep
ASSIGN_OP	357:10	357:10	14	=
LEAF_NODE	357:10	357:10	15	=
RVAL	357:12	357:12	14	",\n"
FIELD	357:12	357:12	15	",\n"
LEAF_NODE	357:12	357:12	16	",\n"
LEAF_NODE	357:17	357:17	12	;
SELECTION	358:5	359:6	9	
KEYWORD	358:5	358:5	10	else
LEAF_NODE	358:5	358:5	11	else
STATEMENTS	359:6	359:6	10	
EXPR_STATEMENT	359:6	359:15	11	sep = "," ;
EXPR	359:6	359:6	12	sep = ","
ASSIGN	359:6	359:12	13	sep = ","
LVAL	359:6	359:6	14	sep
FIELD	359:6	359:6	15	sep
LEAF_NODE	359:6	359:6	16	sep
ASSIGN_OP	359:10	359:10	14	=
LEAF_NODE	359:10	359:10	15	=
RVAL	359:12	359:12	14	","
FIELD	359:12	359:12	15	","
LEAF_NODE	359:12	359:12	16	","
LEAF_NODE	359:15	359:15	12	;
EXPR_STATEMENT	360:5	360:8	9	T ++ ;
EXPR	360:5	360:5	10	T ++
FIELD	360:5	360:6	11	T ++
LEAF_NODE	360:5	360:5	12	T
LEAF_NODE	360:6	360:6	12	++
LEAF_NODE	360:8	360:8	10	;
LEAF_NODE	361:1	361:1	8	}
LEAF_NODE	362:4	362:4	5	}
SELECTION	362:6	362:11	3	
KEYWORD	362:6	362:6	4	else
LEAF_NODE	362:6	362:6	5	else
STATEMENTS	362:11	373:4	4	
LEAF_NODE	362:11	362:11	5	{
STATEMENTS	363:1	364:1	5	
EXPR_STATEMENT	363:1	363:12	6	sep = "\n " ;
EXPR	363:1	363:1	7	sep = "\n "
ASSIGN	363:1	363:7	8	sep = "\n "
LVAL	363:1	363:1	9	sep
FIELD	363:1	363:1	10	sep
LEAF_NODE	363:1	363:1	11	sep
ASSIGN_OP	363:5	363:5	9	=
LEAF_NODE	363:5	363:5	10	=
RVAL	363:7	363:7	9	"\n "
FIELD	363:7	363:7	10	"\n "
LEAF_NODE	363:7	363:7	11	"\n "
LEAF_NODE	363:12	363:12	7	;
ITERATION	364:1	364:28	6	
KEYWORD	364:1	364:1	7	for
LEAF_NODE	364:1	364:1	8	for
LEAF_NODE	364:5	364:5	7	(
FOR_INIT	364:6	364:11	7	i = 0 ;
EXPR	364:6	364:6	8	i = 0
ASSIGN	364:6	364:10	9	i = 0
LVAL	364:6	364:6	10	i
FIELD	364:6	364:6	11	i
LEAF_NODE	364:6	364:6	12	i
ASSIGN_OP	364:8	364:8	10	=
LEAF_NODE	364:8	364:8	11	=
RVAL	364:10	364:10	10	0
FIELD	364:10	364:10	11	0
LEAF_NODE	364:10	364:10	12	0
LEAF_NODE	364:11	364:11	8	;
CONDITION	364:13	364:13	7	i < Size
EXPR	364:13	364:17	8	i < Size
FIELD	364:13	364:13	9	i
LEAF_NODE	364:13	364:13	10	i
REL_OPERATOR	364:15	364:15	9	<
LEAF_NODE	364:15	364:15	10	<
FIELD	364:17	364:17	9	Size
LEAF_NODE	364:17	364:17	10	Size
LEAF_NODE	364:21	364:21	7	;
FOR_EXPR	364:23	364:23	7	i ++
EXPR	364:23	364:23	8	i ++
FIELD	364:23	364:24	9	i ++
LEAF_NODE	364:23	364:23	10	i
LEAF_NODE	364:24	364:24	10	++
LEAF_NODE	364:26	364:26	7	)
STATEMENTS	364:28	372:1	7	
LEAF_NODE	364:28	364:28	8	{
STATEMENTS	365:5	371:5	8	
EXPR_STATEMENT	365:5	366:63	9	fprintf ( fd , "%s%s%3d,%3d,%4d%s" , sep , prebrace , T -> State , T -> Width , ( int ) T -> Param , postbrace ) ;
EXPR	365:5	365:5	10	fprintf ( fd , "%s%s%3d,%3d,%4d%s" , sep , prebrace , T -> State , T -> Width , ( int ) T -> Param , postbrace )
FUNCTION_CALL	365:5	366:62	11	fprintf ( fd , "%s%s%3d,%3d,%4d%s" , sep , prebrace , T -> State , T -> Width , ( int ) T -> Param , postbrace )
CALLEE	365:5	365:5	12	fprintf
LEAF_NODE	365:5	365:5	13	fprintf
LEAF_NODE	365:12	365:12	12	(
ARGUMENT	365:13	365:13	12	fd
FIELD	365:13	365:13	13	fd
LEAF_NODE	365:13	365:13	14	fd
LEAF_NODE	365:15	365:15	12	,
ARGUMENT	365:17	365:17	12	"%s%s%3d,%3d,%4d%s"
FIELD	365:17	365:17	13	"%s%s%3d,%3d,%4d%s"
LEAF_NODE	365:17	365:17	14	"%s%s%3d,%3d,%4d%s"
LEAF_NODE	365:36	365:36	12	,
ARGUMENT	366:2	366:2	12	sep
FIELD	366:2	366:2	13	sep
LEAF_NODE	366:2	366:2	14	sep
LEAF_NODE	366:5	366:5	12	,
ARGUMENT	366:7	366:7	12	prebrace
FIELD	366:7	366:7	13	prebrace
LEAF_NODE	366:7	366:7	14	prebrace
LEAF_NODE	366:15	366:15	12	,
ARGUMENT	366:17	366:17	12	T -> State
FIELD	366:17	366:20	13	T -> State
LEAF_NODE	366:17	366:17	14	T
LEAF_NODE	366:18	366:18	14	->
LEAF_NODE	366:20	366:20	14	State
LEAF_NODE	366:25	366:25	12	,
ARGUMENT	366:27	366:27	12	T -> Width
FIELD	366:27	366:30	13	T -> Width
LEAF_NODE	366:27	366:27	14	T
LEAF_NODE	366:28	366:28	14	->
LEAF_NODE	366:30	366:30	14	Width
LEAF_NODE	366:35	366:35	12	,
ARGUMENT	366:37	366:43	12	( int ) T -> Param
LEAF_NODE	366:37	366:37	13	(
TYPE_NAME	366:38	366:38	13	int
LEAF_NODE	366:38	366:38	14	int
LEAF_NODE	366:41	366:41	13	)
FIELD	366:43	366:46	13	T -> Param
LEAF_NODE	366:43	366:43	14	T
LEAF_NODE	366:44	366:44	14	->
LEAF_NODE	366:46	366:46	14	Param
LEAF_NODE	366:51	366:51	12	,
ARGUMENT	366:53	366:53	12	postbrace
FIELD	366:53	366:53	13	postbrace
LEAF_NODE	366:53	366:53	14	postbrace
LEAF_NODE	366:62	366:62	12	)
LEAF_NODE	366:63	366:63	10	;
SELECTION	367:5	368:6	9	
KEYWORD	367:5	367:5	10	if
LEAF_NODE	367:5	367:5	11	if
LEAF_NODE	367:8	367:8	10	(
CONDITION	367:9	367:9	10	( ( i + 1 ) % 6 ) == 0
EXPR	367:9	367:24	11	( ( i + 1 ) % 6 ) == 0
LEAF_NODE	367:9	367:9	12	(
LEAF_NODE	367:10	367:10	12	(
FIELD	367:11	367:11	12	i
LEAF_NODE	367:11	367:11	13	i
LEAF_NODE	367:12	367:12	12	+
FIELD	367:13	367:13	12	1
LEAF_NODE	367:13	367:13	13	1
LEAF_NODE	367:14	367:14	12	)
LEAF_NODE	367:16	367:16	12	%
FIELD	367:18	367:18	12	6
LEAF_NODE	367:18	367:18	13	6
LEAF_NODE	367:19	367:19	12	)
EQ_OPERATOR	367:21	367:21	12	==
LEAF_NODE	367:21	367:21	13	==
FIELD	367:24	367:24	12	0
LEAF_NODE	367:24	367:24	13	0
LEAF_NODE	367:25	367:25	10	)
STATEMENTS	368:6	368:6	10	
EXPR_STATEMENT	368:6	368:18	11	sep = ",\n " ;
EXPR	368:6	368:6	12	sep = ",\n "
ASSIGN	368:6	368:12	13	sep = ",\n "
LVAL	368:6	368:6	14	sep
FIELD	368:6	368:6	15	sep
LEAF_NODE	368:6	368:6	16	sep
ASSIGN_OP	368:10	368:10	14	=
LEAF_NODE	368:10	368:10	15	=
RVAL	368:12	368:12	14	",\n "
FIELD	368:12	368:12	15	",\n "
LEAF_NODE	368:12	368:12	16	",\n "
LEAF_NODE	368:18	368:18	12	;
SELECTION	369:5	370:6	9	
KEYWORD	369:5	369:5	10	else
LEAF_NODE	369:5	369:5	11	else
STATEMENTS	370:6	370:6	10	
EXPR_STATEMENT	370:6	370:15	11	sep = "," ;
EXPR	370:6	370:6	12	sep = ","
ASSIGN	370:6	370:12	13	sep = ","
LVAL	370:6	370:6	14	sep
FIELD	370:6	370:6	15	sep
LEAF_NODE	370:6	370:6	16	sep
ASSIGN_OP	370:10	370:10	14	=
LEAF_NODE	370:10	370:10	15	=
RVAL	370:12	370:12	14	","
FIELD	370:12	370:12	15	","
LEAF_NODE	370:12	370:12	16	","
LEAF_NODE	370:15	370:15	12	;
EXPR_STATEMENT	371:5	371:8	9	T ++ ;
EXPR	371:5	371:5	10	T ++
FIELD	371:5	371:6	11	T ++
LEAF_NODE	371:5	371:5	12	T
LEAF_NODE	371:6	371:6	12	++
LEAF_NODE	371:8	371:8	10	;
LEAF_NODE	372:1	372:1	8	}
LEAF_NODE	373:4	373:4	5	}
EXPR_STATEMENT	374:4	374:25	3	fprintf ( fd , "\n};\n" ) ;
EXPR	374:4	374:4	4	fprintf ( fd , "\n};\n" )
FUNCTION_CALL	374:4	374:24	5	fprintf ( fd , "\n};\n" )
CALLEE	374:4	374:4	6	fprintf
LEAF_NODE	374:4	374:4	7	fprintf
LEAF_NODE	374:11	374:11	6	(
ARGUMENT	374:12	374:12	6	fd
FIELD	374:12	374:12	7	fd
LEAF_NODE	374:12	374:12	8	fd
LEAF_NODE	374:14	374:14	6	,
ARGUMENT	374:16	374:16	6	"\n};\n"
FIELD	374:16	374:16	7	"\n};\n"
LEAF_NODE	374:16	374:16	8	"\n};\n"
LEAF_NODE	374:24	374:24	6	)
LEAF_NODE	374:25	374:25	4	;
LEAF_NODE	375:0	375:0	2	}
FUNCTION_DEF	378:0	443:0	1	
RETURN_TYPE	378:0	378:0	2	int
TYPE_NAME	378:0	378:0	3	int
LEAF_NODE	378:0	378:0	4	int
FUNCTION_NAME	379:0	379:0	2	main
LEAF_NODE	379:0	379:0	3	main
PARAMETER_LIST	379:4	379:27	2	( int argc , char * [ ] argv )
LEAF_NODE	379:4	379:4	3	(
PARAMETER_DECL	379:5	379:9	3	int argc
TYPE	379:5	379:5	4	int
TYPE_NAME	379:5	379:5	5	int
LEAF_NODE	379:5	379:5	6	int
NAME	379:9	379:9	4	argc
LEAF_NODE	379:9	379:9	5	argc
LEAF_NODE	379:13	379:13	3	,
PARAMETER_DECL	379:15	379:21	3	char * [ ] argv
TYPE	379:15	379:25	4	char * [ ]
TYPE_NAME	379:15	379:15	5	char
LEAF_NODE	379:15	379:15	6	char
POINTER	379:19	379:19	5	*
LEAF_NODE	379:19	379:19	6	*
TYPE_SUFFIX	379:25	379:26	5	[ ]
LEAF_NODE	379:25	379:25	6	[
LEAF_NODE	379:26	379:26	6	]
NAME	379:21	379:21	4	argv
LEAF_NODE	379:21	379:21	5	argv
LEAF_NODE	379:27	379:27	3	)
LEAF_NODE	380:0	380:0	2	{
STATEMENTS	381:4	442:4	2	
SIMPLE_DECL	381:4	381:12	3	FILE * fd ;
VAR_DECL	381:4	381:10	4	FILE * fd
TYPE	381:4	381:8	5	FILE *
TYPE_NAME	381:4	381:4	6	FILE
LEAF_NODE	381:4	381:4	7	FILE
POINTER	381:8	381:8	6	*
LEAF_NODE	381:8	381:8	7	*
NAME	381:10	381:10	5	fd
LEAF_NODE	381:10	381:10	6	fd
LEAF_NODE	381:12	381:12	4	;
SIMPLE_DECL	382:4	382:20	3	char * outputfile ;
VAR_DECL	382:4	382:10	4	char * outputfile
TYPE	382:4	382:8	5	char *
TYPE_NAME	382:4	382:4	6	char
LEAF_NODE	382:4	382:4	7	char
POINTER	382:8	382:8	6	*
LEAF_NODE	382:8	382:8	7	*
NAME	382:10	382:10	5	outputfile
LEAF_NODE	382:10	382:10	6	outputfile
LEAF_NODE	382:20	382:20	4	;
SIMPLE_DECL	383:4	383:9	3	int c ;
VAR_DECL	383:4	383:8	4	int c
TYPE	383:4	383:4	5	int
TYPE_NAME	383:4	383:4	6	int
LEAF_NODE	383:4	383:4	7	int
NAME	383:8	383:8	5	c
LEAF_NODE	383:8	383:8	6	c
LEAF_NODE	383:9	383:9	4	;
LEAF_NODE	386:4	386:4	3	extern
SIMPLE_DECL	386:11	386:21	3	int optind ;
VAR_DECL	386:11	386:15	4	int optind
TYPE	386:11	386:11	5	int
TYPE_NAME	386:11	386:11	6	int
LEAF_NODE	386:11	386:11	7	int
NAME	386:15	386:15	5	optind
LEAF_NODE	386:15	386:15	6	optind
LEAF_NODE	386:21	386:21	4	;
LEAF_NODE	387:4	387:4	3	extern
SIMPLE_DECL	387:11	387:23	3	char * optarg ;
VAR_DECL	387:11	387:17	4	char * optarg
TYPE	387:11	387:15	5	char *
TYPE_NAME	387:11	387:11	6	char
LEAF_NODE	387:11	387:11	7	char
POINTER	387:15	387:15	6	*
LEAF_NODE	387:15	387:15	7	*
NAME	387:17	387:17	5	optarg
LEAF_NODE	387:17	387:17	6	optarg
LEAF_NODE	387:23	387:23	4	;
ITERATION	390:4	391:1	3	
KEYWORD	390:4	390:4	4	while
LEAF_NODE	390:4	390:4	5	while
LEAF_NODE	390:10	390:10	4	(
CONDITION	390:11	390:11	4	( c = getopt ( argc , argv , "c:s:bp" ) ) != - 1
EXPR	390:11	390:49	5	( c = getopt ( argc , argv , "c:s:bp" ) ) != - 1
LEAF_NODE	390:11	390:11	6	(
ASSIGN	390:12	390:16	6	c = getopt ( argc , argv , "c:s:bp" )
LVAL	390:12	390:12	7	c
FIELD	390:12	390:12	8	c
LEAF_NODE	390:12	390:12	9	c
ASSIGN_OP	390:14	390:14	7	=
LEAF_NODE	390:14	390:14	8	=
RVAL	390:16	390:16	7	getopt ( argc , argv , "c:s:bp" )
FUNCTION_CALL	390:16	390:43	8	getopt ( argc , argv , "c:s:bp" )
CALLEE	390:16	390:16	9	getopt
LEAF_NODE	390:16	390:16	10	getopt
LEAF_NODE	390:22	390:22	9	(
ARGUMENT	390:23	390:23	9	argc
FIELD	390:23	390:23	10	argc
LEAF_NODE	390:23	390:23	11	argc
LEAF_NODE	390:27	390:27	9	,
ARGUMENT	390:29	390:29	9	argv
FIELD	390:29	390:29	10	argv
LEAF_NODE	390:29	390:29	11	argv
LEAF_NODE	390:33	390:33	9	,
ARGUMENT	390:35	390:35	9	"c:s:bp"
FIELD	390:35	390:35	10	"c:s:bp"
LEAF_NODE	390:35	390:35	11	"c:s:bp"
LEAF_NODE	390:43	390:43	9	)
LEAF_NODE	390:44	390:44	6	)
EQ_OPERATOR	390:46	390:46	6	!=
LEAF_NODE	390:46	390:46	7	!=
UNARY_EXPR	390:49	390:50	6	- 1
UNARY_OPERATOR	390:49	390:49	7	-
LEAF_NODE	390:49	390:49	8	-
FIELD	390:50	390:50	7	1
LEAF_NODE	390:50	390:50	8	1
LEAF_NODE	390:51	390:51	4	)
STATEMENTS	391:1	391:1	4	
SELECTION	391:1	391:12	5	
KEYWORD	391:1	391:1	6	switch
LEAF_NODE	391:1	391:1	7	switch
LEAF_NODE	391:8	391:8	6	(
CONDITION	391:9	391:9	6	c
EXPR	391:9	391:9	7	c
FIELD	391:9	391:9	8	c
LEAF_NODE	391:9	391:9	9	c
LEAF_NODE	391:10	391:10	6	)
STATEMENTS	391:12	410:1	6	
LEAF_NODE	391:12	391:12	7	{
STATEMENTS	392:1	409:5	7	
LEAF_NODE	392:1	392:1	8	case
LEAF_NODE	392:6	392:6	8	'c'
LEAF_NODE	392:9	392:9	8	:
EXPR_STATEMENT	393:5	393:25	8	const_class = optarg ;
EXPR	393:5	393:5	9	const_class = optarg
ASSIGN	393:5	393:19	10	const_class = optarg
LVAL	393:5	393:5	11	const_class
FIELD	393:5	393:5	12	const_class
LEAF_NODE	393:5	393:5	13	const_class
ASSIGN_OP	393:17	393:17	11	=
LEAF_NODE	393:17	393:17	12	=
RVAL	393:19	393:19	11	optarg
FIELD	393:19	393:19	12	optarg
LEAF_NODE	393:19	393:19	13	optarg
LEAF_NODE	393:25	393:25	9	;
JUMP_STATEMENT	394:5	394:10	8	break DESTINATION ;
KEYWORD	394:5	394:5	9	break
LEAF_NODE	394:5	394:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	394:10	394:10	9	;
LEAF_NODE	395:1	395:1	8	case
LEAF_NODE	395:6	395:6	8	's'
LEAF_NODE	395:9	395:9	8	:
EXPR_STATEMENT	396:5	396:27	8	storage_class = optarg ;
EXPR	396:5	396:5	9	storage_class = optarg
ASSIGN	396:5	396:21	10	storage_class = optarg
LVAL	396:5	396:5	11	storage_class
FIELD	396:5	396:5	12	storage_class
LEAF_NODE	396:5	396:5	13	storage_class
ASSIGN_OP	396:19	396:19	11	=
LEAF_NODE	396:19	396:19	12	=
RVAL	396:21	396:21	11	optarg
FIELD	396:21	396:21	12	optarg
LEAF_NODE	396:21	396:21	13	optarg
LEAF_NODE	396:27	396:27	9	;
JUMP_STATEMENT	397:5	397:10	8	break DESTINATION ;
KEYWORD	397:5	397:5	9	break
LEAF_NODE	397:5	397:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	397:10	397:10	9	;
LEAF_NODE	398:1	398:1	8	case
LEAF_NODE	398:6	398:6	8	'p'
LEAF_NODE	398:9	398:9	8	:
EXPR_STATEMENT	399:5	399:19	8	packoutput = 0 ;
EXPR	399:5	399:5	9	packoutput = 0
ASSIGN	399:5	399:18	10	packoutput = 0
LVAL	399:5	399:5	11	packoutput
FIELD	399:5	399:5	12	packoutput
LEAF_NODE	399:5	399:5	13	packoutput
ASSIGN_OP	399:16	399:16	11	=
LEAF_NODE	399:16	399:16	12	=
RVAL	399:18	399:18	11	0
FIELD	399:18	399:18	12	0
LEAF_NODE	399:18	399:18	13	0
LEAF_NODE	399:19	399:19	9	;
JUMP_STATEMENT	400:5	400:10	8	break DESTINATION ;
KEYWORD	400:5	400:5	9	break
LEAF_NODE	400:5	400:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	400:10	400:10	9	;
LEAF_NODE	401:1	401:1	8	case
LEAF_NODE	401:6	401:6	8	'b'
LEAF_NODE	401:9	401:9	8	:
EXPR_STATEMENT	402:5	402:19	8	prebrace = "{" ;
EXPR	402:5	402:5	9	prebrace = "{"
ASSIGN	402:5	402:16	10	prebrace = "{"
LVAL	402:5	402:5	11	prebrace
FIELD	402:5	402:5	12	prebrace
LEAF_NODE	402:5	402:5	13	prebrace
ASSIGN_OP	402:14	402:14	11	=
LEAF_NODE	402:14	402:14	12	=
RVAL	402:16	402:16	11	"{"
FIELD	402:16	402:16	12	"{"
LEAF_NODE	402:16	402:16	13	"{"
LEAF_NODE	402:19	402:19	9	;
EXPR_STATEMENT	403:5	403:20	8	postbrace = "}" ;
EXPR	403:5	403:5	9	postbrace = "}"
ASSIGN	403:5	403:17	10	postbrace = "}"
LVAL	403:5	403:5	11	postbrace
FIELD	403:5	403:5	12	postbrace
LEAF_NODE	403:5	403:5	13	postbrace
ASSIGN_OP	403:15	403:15	11	=
LEAF_NODE	403:15	403:15	12	=
RVAL	403:17	403:17	11	"}"
FIELD	403:17	403:17	12	"}"
LEAF_NODE	403:17	403:17	13	"}"
LEAF_NODE	403:20	403:20	9	;
JUMP_STATEMENT	404:5	404:10	8	break DESTINATION ;
KEYWORD	404:5	404:5	9	break
LEAF_NODE	404:5	404:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	404:10	404:10	9	;
LEAF_NODE	405:1	405:1	8	case
LEAF_NODE	405:6	405:6	8	'?'
LEAF_NODE	405:9	405:9	8	:
EXPR_STATEMENT	406:5	408:10	8	fprintf ( stderr , "usage: %s [-c const] [-s storage] [-p] [-b] file\n" , argv [ 0 ] ) ;
EXPR	406:5	406:5	9	fprintf ( stderr , "usage: %s [-c const] [-s storage] [-p] [-b] file\n" , argv [ 0 ] )
FUNCTION_CALL	406:5	408:9	10	fprintf ( stderr , "usage: %s [-c const] [-s storage] [-p] [-b] file\n" , argv [ 0 ] )
CALLEE	406:5	406:5	11	fprintf
LEAF_NODE	406:5	406:5	12	fprintf
LEAF_NODE	406:12	406:12	11	(
ARGUMENT	406:13	406:13	11	stderr
FIELD	406:13	406:13	12	stderr
LEAF_NODE	406:13	406:13	13	stderr
LEAF_NODE	406:19	406:19	11	,
ARGUMENT	407:2	407:2	11	"usage: %s [-c const] [-s storage] [-p] [-b] file\n"
FIELD	407:2	407:2	12	"usage: %s [-c const] [-s storage] [-p] [-b] file\n"
LEAF_NODE	407:2	407:2	13	"usage: %s [-c const] [-s storage] [-p] [-b] file\n"
LEAF_NODE	407:54	407:54	11	,
ARGUMENT	408:2	408:2	11	argv [ 0 ]
FIELD	408:2	408:8	12	argv [ 0 ]
LEAF_NODE	408:2	408:2	13	argv
LEAF_NODE	408:6	408:6	13	[
EXPR	408:7	408:7	13	0
FIELD	408:7	408:7	14	0
LEAF_NODE	408:7	408:7	15	0
LEAF_NODE	408:8	408:8	13	]
LEAF_NODE	408:9	408:9	11	)
LEAF_NODE	408:10	408:10	9	;
JUMP_STATEMENT	409:5	409:16	8	return ( - 1 ) ;
KEYWORD	409:5	409:5	9	return
LEAF_NODE	409:5	409:5	10	return
DESTINATION	409:12	409:12	9	( - 1 )
EXPR	409:12	409:15	10	( - 1 )
LEAF_NODE	409:12	409:12	11	(
UNARY_EXPR	409:13	409:14	11	- 1
UNARY_OPERATOR	409:13	409:13	12	-
LEAF_NODE	409:13	409:13	13	-
FIELD	409:14	409:14	12	1
LEAF_NODE	409:14	409:14	13	1
LEAF_NODE	409:15	409:15	11	)
LEAF_NODE	409:16	409:16	9	;
LEAF_NODE	410:1	410:1	7	}
EXPR_STATEMENT	411:4	411:60	3	outputfile = optind < argc ? argv [ optind ] : "g3states.h" ;
EXPR	411:4	411:4	4	outputfile = optind < argc ? argv [ optind ] : "g3states.h"
ASSIGN	411:4	411:17	5	outputfile = optind < argc ? argv [ optind ] : "g3states.h"
LVAL	411:4	411:4	6	outputfile
FIELD	411:4	411:4	7	outputfile
LEAF_NODE	411:4	411:4	8	outputfile
ASSIGN_OP	411:15	411:15	6	=
LEAF_NODE	411:15	411:15	7	=
RVAL	411:17	411:17	6	optind < argc ? argv [ optind ] : "g3states.h"
COND_EXPR	411:17	411:48	7	optind < argc ? argv [ optind ] : "g3states.h"
CONDITION	411:17	411:26	8	optind < argc
FIELD	411:17	411:17	9	optind
LEAF_NODE	411:17	411:17	10	optind
REL_OPERATOR	411:24	411:24	9	<
LEAF_NODE	411:24	411:24	10	<
FIELD	411:26	411:26	9	argc
LEAF_NODE	411:26	411:26	10	argc
LEAF_NODE	411:31	411:31	8	?
EXPR	411:33	411:33	8	argv [ optind ]
FIELD	411:33	411:44	9	argv [ optind ]
LEAF_NODE	411:33	411:33	10	argv
LEAF_NODE	411:37	411:37	10	[
EXPR	411:38	411:38	10	optind
FIELD	411:38	411:38	11	optind
LEAF_NODE	411:38	411:38	12	optind
LEAF_NODE	411:44	411:44	10	]
LEAF_NODE	411:46	411:46	8	:
FIELD	411:48	411:48	8	"g3states.h"
LEAF_NODE	411:48	411:48	9	"g3states.h"
LEAF_NODE	411:60	411:60	4	;
EXPR_STATEMENT	412:4	412:31	3	fd = fopen ( outputfile , "w" ) ;
EXPR	412:4	412:4	4	fd = fopen ( outputfile , "w" )
ASSIGN	412:4	412:9	5	fd = fopen ( outputfile , "w" )
LVAL	412:4	412:4	6	fd
FIELD	412:4	412:4	7	fd
LEAF_NODE	412:4	412:4	8	fd
ASSIGN_OP	412:7	412:7	6	=
LEAF_NODE	412:7	412:7	7	=
RVAL	412:9	412:9	6	fopen ( outputfile , "w" )
FUNCTION_CALL	412:9	412:30	7	fopen ( outputfile , "w" )
CALLEE	412:9	412:9	8	fopen
LEAF_NODE	412:9	412:9	9	fopen
LEAF_NODE	412:14	412:14	8	(
ARGUMENT	412:15	412:15	8	outputfile
FIELD	412:15	412:15	9	outputfile
LEAF_NODE	412:15	412:15	10	outputfile
LEAF_NODE	412:25	412:25	8	,
ARGUMENT	412:27	412:27	8	"w"
FIELD	412:27	412:27	9	"w"
LEAF_NODE	412:27	412:27	10	"w"
LEAF_NODE	412:30	412:30	8	)
LEAF_NODE	412:31	412:31	4	;
SELECTION	413:4	413:20	3	
KEYWORD	413:4	413:4	4	if
LEAF_NODE	413:4	413:4	5	if
LEAF_NODE	413:7	413:7	4	(
CONDITION	413:8	413:8	4	fd == NULL
EXPR	413:8	413:14	5	fd == NULL
FIELD	413:8	413:8	6	fd
LEAF_NODE	413:8	413:8	7	fd
EQ_OPERATOR	413:11	413:11	6	==
LEAF_NODE	413:11	413:11	7	==
FIELD	413:14	413:14	6	NULL
LEAF_NODE	413:14	413:14	7	NULL
LEAF_NODE	413:18	413:18	4	)
STATEMENTS	413:20	417:4	4	
LEAF_NODE	413:20	413:20	5	{
STATEMENTS	414:1	416:1	5	
EXPR_STATEMENT	414:1	415:25	6	fprintf ( stderr , "%s: %s: Cannot create output file.\n" , argv [ 0 ] , outputfile ) ;
EXPR	414:1	414:1	7	fprintf ( stderr , "%s: %s: Cannot create output file.\n" , argv [ 0 ] , outputfile )
FUNCTION_CALL	414:1	415:24	8	fprintf ( stderr , "%s: %s: Cannot create output file.\n" , argv [ 0 ] , outputfile )
CALLEE	414:1	414:1	9	fprintf
LEAF_NODE	414:1	414:1	10	fprintf
LEAF_NODE	414:8	414:8	9	(
ARGUMENT	414:9	414:9	9	stderr
FIELD	414:9	414:9	10	stderr
LEAF_NODE	414:9	414:9	11	stderr
LEAF_NODE	414:15	414:15	9	,
ARGUMENT	414:17	414:17	9	"%s: %s: Cannot create output file.\n"
FIELD	414:17	414:17	10	"%s: %s: Cannot create output file.\n"
LEAF_NODE	414:17	414:17	11	"%s: %s: Cannot create output file.\n"
LEAF_NODE	414:55	414:55	9	,
ARGUMENT	415:5	415:5	9	argv [ 0 ]
FIELD	415:5	415:11	10	argv [ 0 ]
LEAF_NODE	415:5	415:5	11	argv
LEAF_NODE	415:9	415:9	11	[
EXPR	415:10	415:10	11	0
FIELD	415:10	415:10	12	0
LEAF_NODE	415:10	415:10	13	0
LEAF_NODE	415:11	415:11	11	]
LEAF_NODE	415:12	415:12	9	,
ARGUMENT	415:14	415:14	9	outputfile
FIELD	415:14	415:14	10	outputfile
LEAF_NODE	415:14	415:14	11	outputfile
LEAF_NODE	415:24	415:24	9	)
LEAF_NODE	415:25	415:25	7	;
JUMP_STATEMENT	416:1	416:12	6	return ( - 2 ) ;
KEYWORD	416:1	416:1	7	return
LEAF_NODE	416:1	416:1	8	return
DESTINATION	416:8	416:8	7	( - 2 )
EXPR	416:8	416:11	8	( - 2 )
LEAF_NODE	416:8	416:8	9	(
UNARY_EXPR	416:9	416:10	9	- 2
UNARY_OPERATOR	416:9	416:9	10	-
LEAF_NODE	416:9	416:9	11	-
FIELD	416:10	416:10	10	2
LEAF_NODE	416:10	416:10	11	2
LEAF_NODE	416:11	416:11	9	)
LEAF_NODE	416:12	416:12	7	;
LEAF_NODE	417:4	417:4	5	}
EXPR_STATEMENT	418:4	418:41	3	FillTable ( MainTable , 7 , Pass , S_Pass ) ;
EXPR	418:4	418:4	4	FillTable ( MainTable , 7 , Pass , S_Pass )
FUNCTION_CALL	418:4	418:40	5	FillTable ( MainTable , 7 , Pass , S_Pass )
CALLEE	418:4	418:4	6	FillTable
LEAF_NODE	418:4	418:4	7	FillTable
LEAF_NODE	418:13	418:13	6	(
ARGUMENT	418:14	418:14	6	MainTable
FIELD	418:14	418:14	7	MainTable
LEAF_NODE	418:14	418:14	8	MainTable
LEAF_NODE	418:23	418:23	6	,
ARGUMENT	418:25	418:25	6	7
FIELD	418:25	418:25	7	7
LEAF_NODE	418:25	418:25	8	7
LEAF_NODE	418:26	418:26	6	,
ARGUMENT	418:28	418:28	6	Pass
FIELD	418:28	418:28	7	Pass
LEAF_NODE	418:28	418:28	8	Pass
LEAF_NODE	418:32	418:32	6	,
ARGUMENT	418:34	418:34	6	S_Pass
FIELD	418:34	418:34	7	S_Pass
LEAF_NODE	418:34	418:34	8	S_Pass
LEAF_NODE	418:40	418:40	6	)
LEAF_NODE	418:41	418:41	4	;
EXPR_STATEMENT	419:4	419:43	3	FillTable ( MainTable , 7 , Horiz , S_Horiz ) ;
EXPR	419:4	419:4	4	FillTable ( MainTable , 7 , Horiz , S_Horiz )
FUNCTION_CALL	419:4	419:42	5	FillTable ( MainTable , 7 , Horiz , S_Horiz )
CALLEE	419:4	419:4	6	FillTable
LEAF_NODE	419:4	419:4	7	FillTable
LEAF_NODE	419:13	419:13	6	(
ARGUMENT	419:14	419:14	6	MainTable
FIELD	419:14	419:14	7	MainTable
LEAF_NODE	419:14	419:14	8	MainTable
LEAF_NODE	419:23	419:23	6	,
ARGUMENT	419:25	419:25	6	7
FIELD	419:25	419:25	7	7
LEAF_NODE	419:25	419:25	8	7
LEAF_NODE	419:26	419:26	6	,
ARGUMENT	419:28	419:28	6	Horiz
FIELD	419:28	419:28	7	Horiz
LEAF_NODE	419:28	419:28	8	Horiz
LEAF_NODE	419:33	419:33	6	,
ARGUMENT	419:35	419:35	6	S_Horiz
FIELD	419:35	419:35	7	S_Horiz
LEAF_NODE	419:35	419:35	8	S_Horiz
LEAF_NODE	419:42	419:42	6	)
LEAF_NODE	419:43	419:43	4	;
EXPR_STATEMENT	420:4	420:37	3	FillTable ( MainTable , 7 , V0 , S_V0 ) ;
EXPR	420:4	420:4	4	FillTable ( MainTable , 7 , V0 , S_V0 )
FUNCTION_CALL	420:4	420:36	5	FillTable ( MainTable , 7 , V0 , S_V0 )
CALLEE	420:4	420:4	6	FillTable
LEAF_NODE	420:4	420:4	7	FillTable
LEAF_NODE	420:13	420:13	6	(
ARGUMENT	420:14	420:14	6	MainTable
FIELD	420:14	420:14	7	MainTable
LEAF_NODE	420:14	420:14	8	MainTable
LEAF_NODE	420:23	420:23	6	,
ARGUMENT	420:25	420:25	6	7
FIELD	420:25	420:25	7	7
LEAF_NODE	420:25	420:25	8	7
LEAF_NODE	420:26	420:26	6	,
ARGUMENT	420:28	420:28	6	V0
FIELD	420:28	420:28	7	V0
LEAF_NODE	420:28	420:28	8	V0
LEAF_NODE	420:30	420:30	6	,
ARGUMENT	420:32	420:32	6	S_V0
FIELD	420:32	420:32	7	S_V0
LEAF_NODE	420:32	420:32	8	S_V0
LEAF_NODE	420:36	420:36	6	)
LEAF_NODE	420:37	420:37	4	;
EXPR_STATEMENT	421:4	421:37	3	FillTable ( MainTable , 7 , VR , S_VR ) ;
EXPR	421:4	421:4	4	FillTable ( MainTable , 7 , VR , S_VR )
FUNCTION_CALL	421:4	421:36	5	FillTable ( MainTable , 7 , VR , S_VR )
CALLEE	421:4	421:4	6	FillTable
LEAF_NODE	421:4	421:4	7	FillTable
LEAF_NODE	421:13	421:13	6	(
ARGUMENT	421:14	421:14	6	MainTable
FIELD	421:14	421:14	7	MainTable
LEAF_NODE	421:14	421:14	8	MainTable
LEAF_NODE	421:23	421:23	6	,
ARGUMENT	421:25	421:25	6	7
FIELD	421:25	421:25	7	7
LEAF_NODE	421:25	421:25	8	7
LEAF_NODE	421:26	421:26	6	,
ARGUMENT	421:28	421:28	6	VR
FIELD	421:28	421:28	7	VR
LEAF_NODE	421:28	421:28	8	VR
LEAF_NODE	421:30	421:30	6	,
ARGUMENT	421:32	421:32	6	S_VR
FIELD	421:32	421:32	7	S_VR
LEAF_NODE	421:32	421:32	8	S_VR
LEAF_NODE	421:36	421:36	6	)
LEAF_NODE	421:37	421:37	4	;
EXPR_STATEMENT	422:4	422:37	3	FillTable ( MainTable , 7 , VL , S_VL ) ;
EXPR	422:4	422:4	4	FillTable ( MainTable , 7 , VL , S_VL )
FUNCTION_CALL	422:4	422:36	5	FillTable ( MainTable , 7 , VL , S_VL )
CALLEE	422:4	422:4	6	FillTable
LEAF_NODE	422:4	422:4	7	FillTable
LEAF_NODE	422:13	422:13	6	(
ARGUMENT	422:14	422:14	6	MainTable
FIELD	422:14	422:14	7	MainTable
LEAF_NODE	422:14	422:14	8	MainTable
LEAF_NODE	422:23	422:23	6	,
ARGUMENT	422:25	422:25	6	7
FIELD	422:25	422:25	7	7
LEAF_NODE	422:25	422:25	8	7
LEAF_NODE	422:26	422:26	6	,
ARGUMENT	422:28	422:28	6	VL
FIELD	422:28	422:28	7	VL
LEAF_NODE	422:28	422:28	8	VL
LEAF_NODE	422:30	422:30	6	,
ARGUMENT	422:32	422:32	6	S_VL
FIELD	422:32	422:32	7	S_VL
LEAF_NODE	422:32	422:32	8	S_VL
LEAF_NODE	422:36	422:36	6	)
LEAF_NODE	422:37	422:37	4	;
EXPR_STATEMENT	423:4	423:39	3	FillTable ( MainTable , 7 , Ext , S_Ext ) ;
EXPR	423:4	423:4	4	FillTable ( MainTable , 7 , Ext , S_Ext )
FUNCTION_CALL	423:4	423:38	5	FillTable ( MainTable , 7 , Ext , S_Ext )
CALLEE	423:4	423:4	6	FillTable
LEAF_NODE	423:4	423:4	7	FillTable
LEAF_NODE	423:13	423:13	6	(
ARGUMENT	423:14	423:14	6	MainTable
FIELD	423:14	423:14	7	MainTable
LEAF_NODE	423:14	423:14	8	MainTable
LEAF_NODE	423:23	423:23	6	,
ARGUMENT	423:25	423:25	6	7
FIELD	423:25	423:25	7	7
LEAF_NODE	423:25	423:25	8	7
LEAF_NODE	423:26	423:26	6	,
ARGUMENT	423:28	423:28	6	Ext
FIELD	423:28	423:28	7	Ext
LEAF_NODE	423:28	423:28	8	Ext
LEAF_NODE	423:31	423:31	6	,
ARGUMENT	423:33	423:33	6	S_Ext
FIELD	423:33	423:33	7	S_Ext
LEAF_NODE	423:33	423:33	8	S_Ext
LEAF_NODE	423:38	423:38	6	)
LEAF_NODE	423:39	423:39	4	;
EXPR_STATEMENT	424:4	424:40	3	FillTable ( MainTable , 7 , EOLV , S_EOL ) ;
EXPR	424:4	424:4	4	FillTable ( MainTable , 7 , EOLV , S_EOL )
FUNCTION_CALL	424:4	424:39	5	FillTable ( MainTable , 7 , EOLV , S_EOL )
CALLEE	424:4	424:4	6	FillTable
LEAF_NODE	424:4	424:4	7	FillTable
LEAF_NODE	424:13	424:13	6	(
ARGUMENT	424:14	424:14	6	MainTable
FIELD	424:14	424:14	7	MainTable
LEAF_NODE	424:14	424:14	8	MainTable
LEAF_NODE	424:23	424:23	6	,
ARGUMENT	424:25	424:25	6	7
FIELD	424:25	424:25	7	7
LEAF_NODE	424:25	424:25	8	7
LEAF_NODE	424:26	424:26	6	,
ARGUMENT	424:28	424:28	6	EOLV
FIELD	424:28	424:28	7	EOLV
LEAF_NODE	424:28	424:28	8	EOLV
LEAF_NODE	424:32	424:32	6	,
ARGUMENT	424:34	424:34	6	S_EOL
FIELD	424:34	424:34	7	S_EOL
LEAF_NODE	424:34	424:34	8	S_EOL
LEAF_NODE	424:39	424:39	6	)
LEAF_NODE	424:40	424:40	4	;
EXPR_STATEMENT	425:4	425:49	3	FillTable ( WhiteTable , 12 , MakeUpW , S_MakeUpW ) ;
EXPR	425:4	425:4	4	FillTable ( WhiteTable , 12 , MakeUpW , S_MakeUpW )
FUNCTION_CALL	425:4	425:48	5	FillTable ( WhiteTable , 12 , MakeUpW , S_MakeUpW )
CALLEE	425:4	425:4	6	FillTable
LEAF_NODE	425:4	425:4	7	FillTable
LEAF_NODE	425:13	425:13	6	(
ARGUMENT	425:14	425:14	6	WhiteTable
FIELD	425:14	425:14	7	WhiteTable
LEAF_NODE	425:14	425:14	8	WhiteTable
LEAF_NODE	425:24	425:24	6	,
ARGUMENT	425:26	425:26	6	12
FIELD	425:26	425:26	7	12
LEAF_NODE	425:26	425:26	8	12
LEAF_NODE	425:28	425:28	6	,
ARGUMENT	425:30	425:30	6	MakeUpW
FIELD	425:30	425:30	7	MakeUpW
LEAF_NODE	425:30	425:30	8	MakeUpW
LEAF_NODE	425:37	425:37	6	,
ARGUMENT	425:39	425:39	6	S_MakeUpW
FIELD	425:39	425:39	7	S_MakeUpW
LEAF_NODE	425:39	425:39	8	S_MakeUpW
LEAF_NODE	425:48	425:48	6	)
LEAF_NODE	425:49	425:49	4	;
EXPR_STATEMENT	426:4	426:47	3	FillTable ( WhiteTable , 12 , MakeUp , S_MakeUp ) ;
EXPR	426:4	426:4	4	FillTable ( WhiteTable , 12 , MakeUp , S_MakeUp )
FUNCTION_CALL	426:4	426:46	5	FillTable ( WhiteTable , 12 , MakeUp , S_MakeUp )
CALLEE	426:4	426:4	6	FillTable
LEAF_NODE	426:4	426:4	7	FillTable
LEAF_NODE	426:13	426:13	6	(
ARGUMENT	426:14	426:14	6	WhiteTable
FIELD	426:14	426:14	7	WhiteTable
LEAF_NODE	426:14	426:14	8	WhiteTable
LEAF_NODE	426:24	426:24	6	,
ARGUMENT	426:26	426:26	6	12
FIELD	426:26	426:26	7	12
LEAF_NODE	426:26	426:26	8	12
LEAF_NODE	426:28	426:28	6	,
ARGUMENT	426:30	426:30	6	MakeUp
FIELD	426:30	426:30	7	MakeUp
LEAF_NODE	426:30	426:30	8	MakeUp
LEAF_NODE	426:36	426:36	6	,
ARGUMENT	426:38	426:38	6	S_MakeUp
FIELD	426:38	426:38	7	S_MakeUp
LEAF_NODE	426:38	426:38	8	S_MakeUp
LEAF_NODE	426:46	426:46	6	)
LEAF_NODE	426:47	426:47	4	;
EXPR_STATEMENT	427:4	427:45	3	FillTable ( WhiteTable , 12 , TermW , S_TermW ) ;
EXPR	427:4	427:4	4	FillTable ( WhiteTable , 12 , TermW , S_TermW )
FUNCTION_CALL	427:4	427:44	5	FillTable ( WhiteTable , 12 , TermW , S_TermW )
CALLEE	427:4	427:4	6	FillTable
LEAF_NODE	427:4	427:4	7	FillTable
LEAF_NODE	427:13	427:13	6	(
ARGUMENT	427:14	427:14	6	WhiteTable
FIELD	427:14	427:14	7	WhiteTable
LEAF_NODE	427:14	427:14	8	WhiteTable
LEAF_NODE	427:24	427:24	6	,
ARGUMENT	427:26	427:26	6	12
FIELD	427:26	427:26	7	12
LEAF_NODE	427:26	427:26	8	12
LEAF_NODE	427:28	427:28	6	,
ARGUMENT	427:30	427:30	6	TermW
FIELD	427:30	427:30	7	TermW
LEAF_NODE	427:30	427:30	8	TermW
LEAF_NODE	427:35	427:35	6	,
ARGUMENT	427:37	427:37	6	S_TermW
FIELD	427:37	427:37	7	S_TermW
LEAF_NODE	427:37	427:37	8	S_TermW
LEAF_NODE	427:44	427:44	6	)
LEAF_NODE	427:45	427:45	4	;
EXPR_STATEMENT	428:4	428:42	3	FillTable ( WhiteTable , 12 , EOLH , S_EOL ) ;
EXPR	428:4	428:4	4	FillTable ( WhiteTable , 12 , EOLH , S_EOL )
FUNCTION_CALL	428:4	428:41	5	FillTable ( WhiteTable , 12 , EOLH , S_EOL )
CALLEE	428:4	428:4	6	FillTable
LEAF_NODE	428:4	428:4	7	FillTable
LEAF_NODE	428:13	428:13	6	(
ARGUMENT	428:14	428:14	6	WhiteTable
FIELD	428:14	428:14	7	WhiteTable
LEAF_NODE	428:14	428:14	8	WhiteTable
LEAF_NODE	428:24	428:24	6	,
ARGUMENT	428:26	428:26	6	12
FIELD	428:26	428:26	7	12
LEAF_NODE	428:26	428:26	8	12
LEAF_NODE	428:28	428:28	6	,
ARGUMENT	428:30	428:30	6	EOLH
FIELD	428:30	428:30	7	EOLH
LEAF_NODE	428:30	428:30	8	EOLH
LEAF_NODE	428:34	428:34	6	,
ARGUMENT	428:36	428:36	6	S_EOL
FIELD	428:36	428:36	7	S_EOL
LEAF_NODE	428:36	428:36	8	S_EOL
LEAF_NODE	428:41	428:41	6	)
LEAF_NODE	428:42	428:42	4	;
EXPR_STATEMENT	429:4	429:49	3	FillTable ( BlackTable , 13 , MakeUpB , S_MakeUpB ) ;
EXPR	429:4	429:4	4	FillTable ( BlackTable , 13 , MakeUpB , S_MakeUpB )
FUNCTION_CALL	429:4	429:48	5	FillTable ( BlackTable , 13 , MakeUpB , S_MakeUpB )
CALLEE	429:4	429:4	6	FillTable
LEAF_NODE	429:4	429:4	7	FillTable
LEAF_NODE	429:13	429:13	6	(
ARGUMENT	429:14	429:14	6	BlackTable
FIELD	429:14	429:14	7	BlackTable
LEAF_NODE	429:14	429:14	8	BlackTable
LEAF_NODE	429:24	429:24	6	,
ARGUMENT	429:26	429:26	6	13
FIELD	429:26	429:26	7	13
LEAF_NODE	429:26	429:26	8	13
LEAF_NODE	429:28	429:28	6	,
ARGUMENT	429:30	429:30	6	MakeUpB
FIELD	429:30	429:30	7	MakeUpB
LEAF_NODE	429:30	429:30	8	MakeUpB
LEAF_NODE	429:37	429:37	6	,
ARGUMENT	429:39	429:39	6	S_MakeUpB
FIELD	429:39	429:39	7	S_MakeUpB
LEAF_NODE	429:39	429:39	8	S_MakeUpB
LEAF_NODE	429:48	429:48	6	)
LEAF_NODE	429:49	429:49	4	;
EXPR_STATEMENT	430:4	430:47	3	FillTable ( BlackTable , 13 , MakeUp , S_MakeUp ) ;
EXPR	430:4	430:4	4	FillTable ( BlackTable , 13 , MakeUp , S_MakeUp )
FUNCTION_CALL	430:4	430:46	5	FillTable ( BlackTable , 13 , MakeUp , S_MakeUp )
CALLEE	430:4	430:4	6	FillTable
LEAF_NODE	430:4	430:4	7	FillTable
LEAF_NODE	430:13	430:13	6	(
ARGUMENT	430:14	430:14	6	BlackTable
FIELD	430:14	430:14	7	BlackTable
LEAF_NODE	430:14	430:14	8	BlackTable
LEAF_NODE	430:24	430:24	6	,
ARGUMENT	430:26	430:26	6	13
FIELD	430:26	430:26	7	13
LEAF_NODE	430:26	430:26	8	13
LEAF_NODE	430:28	430:28	6	,
ARGUMENT	430:30	430:30	6	MakeUp
FIELD	430:30	430:30	7	MakeUp
LEAF_NODE	430:30	430:30	8	MakeUp
LEAF_NODE	430:36	430:36	6	,
ARGUMENT	430:38	430:38	6	S_MakeUp
FIELD	430:38	430:38	7	S_MakeUp
LEAF_NODE	430:38	430:38	8	S_MakeUp
LEAF_NODE	430:46	430:46	6	)
LEAF_NODE	430:47	430:47	4	;
EXPR_STATEMENT	431:4	431:45	3	FillTable ( BlackTable , 13 , TermB , S_TermB ) ;
EXPR	431:4	431:4	4	FillTable ( BlackTable , 13 , TermB , S_TermB )
FUNCTION_CALL	431:4	431:44	5	FillTable ( BlackTable , 13 , TermB , S_TermB )
CALLEE	431:4	431:4	6	FillTable
LEAF_NODE	431:4	431:4	7	FillTable
LEAF_NODE	431:13	431:13	6	(
ARGUMENT	431:14	431:14	6	BlackTable
FIELD	431:14	431:14	7	BlackTable
LEAF_NODE	431:14	431:14	8	BlackTable
LEAF_NODE	431:24	431:24	6	,
ARGUMENT	431:26	431:26	6	13
FIELD	431:26	431:26	7	13
LEAF_NODE	431:26	431:26	8	13
LEAF_NODE	431:28	431:28	6	,
ARGUMENT	431:30	431:30	6	TermB
FIELD	431:30	431:30	7	TermB
LEAF_NODE	431:30	431:30	8	TermB
LEAF_NODE	431:35	431:35	6	,
ARGUMENT	431:37	431:37	6	S_TermB
FIELD	431:37	431:37	7	S_TermB
LEAF_NODE	431:37	431:37	8	S_TermB
LEAF_NODE	431:44	431:44	6	)
LEAF_NODE	431:45	431:45	4	;
EXPR_STATEMENT	432:4	432:42	3	FillTable ( BlackTable , 13 , EOLH , S_EOL ) ;
EXPR	432:4	432:4	4	FillTable ( BlackTable , 13 , EOLH , S_EOL )
FUNCTION_CALL	432:4	432:41	5	FillTable ( BlackTable , 13 , EOLH , S_EOL )
CALLEE	432:4	432:4	6	FillTable
LEAF_NODE	432:4	432:4	7	FillTable
LEAF_NODE	432:13	432:13	6	(
ARGUMENT	432:14	432:14	6	BlackTable
FIELD	432:14	432:14	7	BlackTable
LEAF_NODE	432:14	432:14	8	BlackTable
LEAF_NODE	432:24	432:24	6	,
ARGUMENT	432:26	432:26	6	13
FIELD	432:26	432:26	7	13
LEAF_NODE	432:26	432:26	8	13
LEAF_NODE	432:28	432:28	6	,
ARGUMENT	432:30	432:30	6	EOLH
FIELD	432:30	432:30	7	EOLH
LEAF_NODE	432:30	432:30	8	EOLH
LEAF_NODE	432:34	432:34	6	,
ARGUMENT	432:36	432:36	6	S_EOL
FIELD	432:36	432:36	7	S_EOL
LEAF_NODE	432:36	432:36	8	S_EOL
LEAF_NODE	432:41	432:41	6	)
LEAF_NODE	432:42	432:42	4	;
EXPR_STATEMENT	434:4	434:77	3	fprintf ( fd , "/* WARNING, this file was automatically generated by the\n" ) ;
EXPR	434:4	434:4	4	fprintf ( fd , "/* WARNING, this file was automatically generated by the\n" )
FUNCTION_CALL	434:4	434:76	5	fprintf ( fd , "/* WARNING, this file was automatically generated by the\n" )
CALLEE	434:4	434:4	6	fprintf
LEAF_NODE	434:4	434:4	7	fprintf
LEAF_NODE	434:11	434:11	6	(
ARGUMENT	434:12	434:12	6	fd
FIELD	434:12	434:12	7	fd
LEAF_NODE	434:12	434:12	8	fd
LEAF_NODE	434:14	434:14	6	,
ARGUMENT	434:16	434:16	6	"/* WARNING, this file was automatically generated by the\n"
FIELD	434:16	434:16	7	"/* WARNING, this file was automatically generated by the\n"
LEAF_NODE	434:16	434:16	8	"/* WARNING, this file was automatically generated by the\n"
LEAF_NODE	434:76	434:76	6	)
LEAF_NODE	434:77	434:77	4	;
EXPR_STATEMENT	435:4	435:46	3	fprintf ( fd , "    mkg3states program */\n" ) ;
EXPR	435:4	435:4	4	fprintf ( fd , "    mkg3states program */\n" )
FUNCTION_CALL	435:4	435:45	5	fprintf ( fd , "    mkg3states program */\n" )
CALLEE	435:4	435:4	6	fprintf
LEAF_NODE	435:4	435:4	7	fprintf
LEAF_NODE	435:11	435:11	6	(
ARGUMENT	435:12	435:12	6	fd
FIELD	435:12	435:12	7	fd
LEAF_NODE	435:12	435:12	8	fd
LEAF_NODE	435:14	435:14	6	,
ARGUMENT	435:16	435:16	6	"    mkg3states program */\n"
FIELD	435:16	435:16	7	"    mkg3states program */\n"
LEAF_NODE	435:16	435:16	8	"    mkg3states program */\n"
LEAF_NODE	435:45	435:45	6	)
LEAF_NODE	435:46	435:46	4	;
EXPR_STATEMENT	436:4	436:40	3	fprintf ( fd , "#include \"tiff.h\"\n" ) ;
EXPR	436:4	436:4	4	fprintf ( fd , "#include \"tiff.h\"\n" )
FUNCTION_CALL	436:4	436:39	5	fprintf ( fd , "#include \"tiff.h\"\n" )
CALLEE	436:4	436:4	6	fprintf
LEAF_NODE	436:4	436:4	7	fprintf
LEAF_NODE	436:11	436:11	6	(
ARGUMENT	436:12	436:12	6	fd
FIELD	436:12	436:12	7	fd
LEAF_NODE	436:12	436:12	8	fd
LEAF_NODE	436:14	436:14	6	,
ARGUMENT	436:16	436:16	6	"#include \"tiff.h\"\n"
FIELD	436:16	436:16	7	"#include \"tiff.h\"\n"
LEAF_NODE	436:16	436:16	8	"#include \"tiff.h\"\n"
LEAF_NODE	436:39	436:39	6	)
LEAF_NODE	436:40	436:40	4	;
EXPR_STATEMENT	437:4	437:44	3	fprintf ( fd , "#include \"tif_fax3.h\"\n" ) ;
EXPR	437:4	437:4	4	fprintf ( fd , "#include \"tif_fax3.h\"\n" )
FUNCTION_CALL	437:4	437:43	5	fprintf ( fd , "#include \"tif_fax3.h\"\n" )
CALLEE	437:4	437:4	6	fprintf
LEAF_NODE	437:4	437:4	7	fprintf
LEAF_NODE	437:11	437:11	6	(
ARGUMENT	437:12	437:12	6	fd
FIELD	437:12	437:12	7	fd
LEAF_NODE	437:12	437:12	8	fd
LEAF_NODE	437:14	437:14	6	,
ARGUMENT	437:16	437:16	6	"#include \"tif_fax3.h\"\n"
FIELD	437:16	437:16	7	"#include \"tif_fax3.h\"\n"
LEAF_NODE	437:16	437:16	8	"#include \"tif_fax3.h\"\n"
LEAF_NODE	437:43	437:43	6	)
LEAF_NODE	437:44	437:44	4	;
EXPR_STATEMENT	438:4	438:54	3	WriteTable ( fd , MainTable , 128 , "TIFFFaxMainTable" ) ;
EXPR	438:4	438:4	4	WriteTable ( fd , MainTable , 128 , "TIFFFaxMainTable" )
FUNCTION_CALL	438:4	438:53	5	WriteTable ( fd , MainTable , 128 , "TIFFFaxMainTable" )
CALLEE	438:4	438:4	6	WriteTable
LEAF_NODE	438:4	438:4	7	WriteTable
LEAF_NODE	438:14	438:14	6	(
ARGUMENT	438:15	438:15	6	fd
FIELD	438:15	438:15	7	fd
LEAF_NODE	438:15	438:15	8	fd
LEAF_NODE	438:17	438:17	6	,
ARGUMENT	438:19	438:19	6	MainTable
FIELD	438:19	438:19	7	MainTable
LEAF_NODE	438:19	438:19	8	MainTable
LEAF_NODE	438:28	438:28	6	,
ARGUMENT	438:30	438:30	6	128
FIELD	438:30	438:30	7	128
LEAF_NODE	438:30	438:30	8	128
LEAF_NODE	438:33	438:33	6	,
ARGUMENT	438:35	438:35	6	"TIFFFaxMainTable"
FIELD	438:35	438:35	7	"TIFFFaxMainTable"
LEAF_NODE	438:35	438:35	8	"TIFFFaxMainTable"
LEAF_NODE	438:53	438:53	6	)
LEAF_NODE	438:54	438:54	4	;
EXPR_STATEMENT	439:4	439:57	3	WriteTable ( fd , WhiteTable , 4096 , "TIFFFaxWhiteTable" ) ;
EXPR	439:4	439:4	4	WriteTable ( fd , WhiteTable , 4096 , "TIFFFaxWhiteTable" )
FUNCTION_CALL	439:4	439:56	5	WriteTable ( fd , WhiteTable , 4096 , "TIFFFaxWhiteTable" )
CALLEE	439:4	439:4	6	WriteTable
LEAF_NODE	439:4	439:4	7	WriteTable
LEAF_NODE	439:14	439:14	6	(
ARGUMENT	439:15	439:15	6	fd
FIELD	439:15	439:15	7	fd
LEAF_NODE	439:15	439:15	8	fd
LEAF_NODE	439:17	439:17	6	,
ARGUMENT	439:19	439:19	6	WhiteTable
FIELD	439:19	439:19	7	WhiteTable
LEAF_NODE	439:19	439:19	8	WhiteTable
LEAF_NODE	439:29	439:29	6	,
ARGUMENT	439:31	439:31	6	4096
FIELD	439:31	439:31	7	4096
LEAF_NODE	439:31	439:31	8	4096
LEAF_NODE	439:35	439:35	6	,
ARGUMENT	439:37	439:37	6	"TIFFFaxWhiteTable"
FIELD	439:37	439:37	7	"TIFFFaxWhiteTable"
LEAF_NODE	439:37	439:37	8	"TIFFFaxWhiteTable"
LEAF_NODE	439:56	439:56	6	)
LEAF_NODE	439:57	439:57	4	;
EXPR_STATEMENT	440:4	440:57	3	WriteTable ( fd , BlackTable , 8192 , "TIFFFaxBlackTable" ) ;
EXPR	440:4	440:4	4	WriteTable ( fd , BlackTable , 8192 , "TIFFFaxBlackTable" )
FUNCTION_CALL	440:4	440:56	5	WriteTable ( fd , BlackTable , 8192 , "TIFFFaxBlackTable" )
CALLEE	440:4	440:4	6	WriteTable
LEAF_NODE	440:4	440:4	7	WriteTable
LEAF_NODE	440:14	440:14	6	(
ARGUMENT	440:15	440:15	6	fd
FIELD	440:15	440:15	7	fd
LEAF_NODE	440:15	440:15	8	fd
LEAF_NODE	440:17	440:17	6	,
ARGUMENT	440:19	440:19	6	BlackTable
FIELD	440:19	440:19	7	BlackTable
LEAF_NODE	440:19	440:19	8	BlackTable
LEAF_NODE	440:29	440:29	6	,
ARGUMENT	440:31	440:31	6	8192
FIELD	440:31	440:31	7	8192
LEAF_NODE	440:31	440:31	8	8192
LEAF_NODE	440:35	440:35	6	,
ARGUMENT	440:37	440:37	6	"TIFFFaxBlackTable"
FIELD	440:37	440:37	7	"TIFFFaxBlackTable"
LEAF_NODE	440:37	440:37	8	"TIFFFaxBlackTable"
LEAF_NODE	440:56	440:56	6	)
LEAF_NODE	440:57	440:57	4	;
EXPR_STATEMENT	441:4	441:14	3	fclose ( fd ) ;
EXPR	441:4	441:4	4	fclose ( fd )
FUNCTION_CALL	441:4	441:13	5	fclose ( fd )
CALLEE	441:4	441:4	6	fclose
LEAF_NODE	441:4	441:4	7	fclose
LEAF_NODE	441:10	441:10	6	(
ARGUMENT	441:11	441:11	6	fd
FIELD	441:11	441:11	7	fd
LEAF_NODE	441:11	441:11	8	fd
LEAF_NODE	441:13	441:13	6	)
LEAF_NODE	441:14	441:14	4	;
JUMP_STATEMENT	442:4	442:14	3	return ( 0 ) ;
KEYWORD	442:4	442:4	4	return
LEAF_NODE	442:4	442:4	5	return
DESTINATION	442:11	442:11	4	( 0 )
EXPR	442:11	442:13	5	( 0 )
LEAF_NODE	442:11	442:11	6	(
FIELD	442:12	442:12	6	0
LEAF_NODE	442:12	442:12	7	0
LEAF_NODE	442:13	442:13	6	)
LEAF_NODE	442:14	442:14	4	;
LEAF_NODE	443:0	443:0	2	}
