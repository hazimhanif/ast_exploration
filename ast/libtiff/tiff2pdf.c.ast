SOURCE_FILE	74:8	5480:0	0	
SIMPLE_DECL	74:8	84:10	1	enum CLASS_NAME BASE_CLASSES { T2P_CS_BILEVEL = 0x01 , T2P_CS_GRAY = 0x02 , T2P_CS_RGB = 0x04 , T2P_CS_CMYK = 0x08 , T2P_CS_LAB = 0x10 , T2P_CS_PALETTE = 0x1000 , T2P_CS_CALGRAY = 0x20 , T2P_CS_CALRGB = 0x40 , T2P_CS_ICCBASED = 0x80 } t2p_cs_t ;
VAR_DECL	74:8	84:2	2	enum CLASS_NAME BASE_CLASSES { T2P_CS_BILEVEL = 0x01 , T2P_CS_GRAY = 0x02 , T2P_CS_RGB = 0x04 , T2P_CS_CMYK = 0x08 , T2P_CS_LAB = 0x10 , T2P_CS_PALETTE = 0x1000 , T2P_CS_CALGRAY = 0x20 , T2P_CS_CALRGB = 0x40 , T2P_CS_ICCBASED = 0x80 } t2p_cs_t
TYPE	74:8	74:8	3	enum CLASS_NAME BASE_CLASSES { T2P_CS_BILEVEL = 0x01 , T2P_CS_GRAY = 0x02 , T2P_CS_RGB = 0x04 , T2P_CS_CMYK = 0x08 , T2P_CS_LAB = 0x10 , T2P_CS_PALETTE = 0x1000 , T2P_CS_CALGRAY = 0x20 , T2P_CS_CALRGB = 0x40 , T2P_CS_ICCBASED = 0x80 }
CLASS_DEF	74:8	84:0	4	enum CLASS_NAME BASE_CLASSES { T2P_CS_BILEVEL = 0x01 , T2P_CS_GRAY = 0x02 , T2P_CS_RGB = 0x04 , T2P_CS_CMYK = 0x08 , T2P_CS_LAB = 0x10 , T2P_CS_PALETTE = 0x1000 , T2P_CS_CALGRAY = 0x20 , T2P_CS_CALRGB = 0x40 , T2P_CS_ICCBASED = 0x80 }
LEAF_NODE	74:8	74:8	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	74:13	74:13	5	{
CLASS_CONTENT	75:1	83:19	5	T2P_CS_BILEVEL = 0x01 , T2P_CS_GRAY = 0x02 , T2P_CS_RGB = 0x04 , T2P_CS_CMYK = 0x08 , T2P_CS_LAB = 0x10 , T2P_CS_PALETTE = 0x1000 , T2P_CS_CALGRAY = 0x20 , T2P_CS_CALRGB = 0x40 , T2P_CS_ICCBASED = 0x80
LEAF_NODE	75:1	75:1	6	T2P_CS_BILEVEL
LEAF_NODE	75:16	75:16	6	=
LEAF_NODE	75:18	75:18	6	0x01
LEAF_NODE	75:22	75:22	6	,
LEAF_NODE	76:1	76:1	6	T2P_CS_GRAY
LEAF_NODE	76:13	76:13	6	=
LEAF_NODE	76:15	76:15	6	0x02
LEAF_NODE	76:19	76:19	6	,
LEAF_NODE	77:1	77:1	6	T2P_CS_RGB
LEAF_NODE	77:12	77:12	6	=
LEAF_NODE	77:14	77:14	6	0x04
LEAF_NODE	77:18	77:18	6	,
LEAF_NODE	78:1	78:1	6	T2P_CS_CMYK
LEAF_NODE	78:13	78:13	6	=
LEAF_NODE	78:15	78:15	6	0x08
LEAF_NODE	78:19	78:19	6	,
LEAF_NODE	79:1	79:1	6	T2P_CS_LAB
LEAF_NODE	79:12	79:12	6	=
LEAF_NODE	79:14	79:14	6	0x10
LEAF_NODE	79:18	79:18	6	,
LEAF_NODE	80:1	80:1	6	T2P_CS_PALETTE
LEAF_NODE	80:16	80:16	6	=
LEAF_NODE	80:18	80:18	6	0x1000
LEAF_NODE	80:24	80:24	6	,
LEAF_NODE	81:1	81:1	6	T2P_CS_CALGRAY
LEAF_NODE	81:16	81:16	6	=
LEAF_NODE	81:18	81:18	6	0x20
LEAF_NODE	81:22	81:22	6	,
LEAF_NODE	82:1	82:1	6	T2P_CS_CALRGB
LEAF_NODE	82:15	82:15	6	=
LEAF_NODE	82:17	82:17	6	0x40
LEAF_NODE	82:21	82:21	6	,
LEAF_NODE	83:1	83:1	6	T2P_CS_ICCBASED
LEAF_NODE	83:17	83:17	6	=
LEAF_NODE	83:19	83:19	6	0x80
LEAF_NODE	84:0	84:0	5	}
NAME	84:2	84:2	3	t2p_cs_t
LEAF_NODE	84:2	84:2	4	t2p_cs_t
LEAF_NODE	84:10	84:10	2	;
SIMPLE_DECL	87:8	98:16	1	enum CLASS_NAME BASE_CLASSES { T2P_COMPRESS_NONE = 0x00 , T2P_COMPRESS_G4 = 0x01 , T2P_COMPRESS_JPEG = 0x02 , T2P_COMPRESS_ZIP = 0x04 } t2p_compress_t ;
VAR_DECL	87:8	98:2	2	enum CLASS_NAME BASE_CLASSES { T2P_COMPRESS_NONE = 0x00 , T2P_COMPRESS_G4 = 0x01 , T2P_COMPRESS_JPEG = 0x02 , T2P_COMPRESS_ZIP = 0x04 } t2p_compress_t
TYPE	87:8	87:8	3	enum CLASS_NAME BASE_CLASSES { T2P_COMPRESS_NONE = 0x00 , T2P_COMPRESS_G4 = 0x01 , T2P_COMPRESS_JPEG = 0x02 , T2P_COMPRESS_ZIP = 0x04 }
CLASS_DEF	87:8	98:0	4	enum CLASS_NAME BASE_CLASSES { T2P_COMPRESS_NONE = 0x00 , T2P_COMPRESS_G4 = 0x01 , T2P_COMPRESS_JPEG = 0x02 , T2P_COMPRESS_ZIP = 0x04 }
LEAF_NODE	87:8	87:8	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	87:12	87:12	5	{
CLASS_CONTENT	88:1	96:20	5	T2P_COMPRESS_NONE = 0x00 , T2P_COMPRESS_G4 = 0x01 , T2P_COMPRESS_JPEG = 0x02 , T2P_COMPRESS_ZIP = 0x04
LEAF_NODE	88:1	88:1	6	T2P_COMPRESS_NONE
LEAF_NODE	88:18	88:18	6	=
LEAF_NODE	88:19	88:19	6	0x00
LEAF_NODE	90:1	90:1	6	,
LEAF_NODE	90:3	90:3	6	T2P_COMPRESS_G4
LEAF_NODE	90:18	90:18	6	=
LEAF_NODE	90:19	90:19	6	0x01
LEAF_NODE	93:1	93:1	6	,
LEAF_NODE	93:3	93:3	6	T2P_COMPRESS_JPEG
LEAF_NODE	93:20	93:20	6	=
LEAF_NODE	93:21	93:21	6	0x02
LEAF_NODE	96:1	96:1	6	,
LEAF_NODE	96:3	96:3	6	T2P_COMPRESS_ZIP
LEAF_NODE	96:19	96:19	6	=
LEAF_NODE	96:20	96:20	6	0x04
LEAF_NODE	98:0	98:0	5	}
NAME	98:2	98:2	3	t2p_compress_t
LEAF_NODE	98:2	98:2	4	t2p_compress_t
LEAF_NODE	98:16	98:16	2	;
SIMPLE_DECL	101:8	104:17	1	enum CLASS_NAME BASE_CLASSES { T2P_TRANSCODE_RAW = 0x01 , T2P_TRANSCODE_ENCODE = 0x02 } t2p_transcode_t ;
VAR_DECL	101:8	104:2	2	enum CLASS_NAME BASE_CLASSES { T2P_TRANSCODE_RAW = 0x01 , T2P_TRANSCODE_ENCODE = 0x02 } t2p_transcode_t
TYPE	101:8	101:8	3	enum CLASS_NAME BASE_CLASSES { T2P_TRANSCODE_RAW = 0x01 , T2P_TRANSCODE_ENCODE = 0x02 }
CLASS_DEF	101:8	104:0	4	enum CLASS_NAME BASE_CLASSES { T2P_TRANSCODE_RAW = 0x01 , T2P_TRANSCODE_ENCODE = 0x02 }
LEAF_NODE	101:8	101:8	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	101:12	101:12	5	{
CLASS_CONTENT	102:1	103:22	5	T2P_TRANSCODE_RAW = 0x01 , T2P_TRANSCODE_ENCODE = 0x02
LEAF_NODE	102:1	102:1	6	T2P_TRANSCODE_RAW
LEAF_NODE	102:18	102:18	6	=
LEAF_NODE	102:19	102:19	6	0x01
LEAF_NODE	102:23	102:23	6	,
LEAF_NODE	103:1	103:1	6	T2P_TRANSCODE_ENCODE
LEAF_NODE	103:21	103:21	6	=
LEAF_NODE	103:22	103:22	6	0x02
LEAF_NODE	104:0	104:0	5	}
NAME	104:2	104:2	3	t2p_transcode_t
LEAF_NODE	104:2	104:2	4	t2p_transcode_t
LEAF_NODE	104:17	104:17	2	;
SIMPLE_DECL	107:8	118:14	1	enum CLASS_NAME BASE_CLASSES { T2P_SAMPLE_NOTHING = 0x0000 , T2P_SAMPLE_ABGR_TO_RGB = 0x0001 , T2P_SAMPLE_RGBA_TO_RGB = 0x0002 , T2P_SAMPLE_RGBAA_TO_RGB = 0x0004 , T2P_SAMPLE_YCBCR_TO_RGB = 0x0008 , T2P_SAMPLE_YCBCR_TO_LAB = 0x0010 , T2P_SAMPLE_REALIZE_PALETTE = 0x0020 , T2P_SAMPLE_SIGNED_TO_UNSIGNED = 0x0040 , T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED = 0x0040 , T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG = 0x0100 } t2p_sample_t ;
VAR_DECL	107:8	118:2	2	enum CLASS_NAME BASE_CLASSES { T2P_SAMPLE_NOTHING = 0x0000 , T2P_SAMPLE_ABGR_TO_RGB = 0x0001 , T2P_SAMPLE_RGBA_TO_RGB = 0x0002 , T2P_SAMPLE_RGBAA_TO_RGB = 0x0004 , T2P_SAMPLE_YCBCR_TO_RGB = 0x0008 , T2P_SAMPLE_YCBCR_TO_LAB = 0x0010 , T2P_SAMPLE_REALIZE_PALETTE = 0x0020 , T2P_SAMPLE_SIGNED_TO_UNSIGNED = 0x0040 , T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED = 0x0040 , T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG = 0x0100 } t2p_sample_t
TYPE	107:8	107:8	3	enum CLASS_NAME BASE_CLASSES { T2P_SAMPLE_NOTHING = 0x0000 , T2P_SAMPLE_ABGR_TO_RGB = 0x0001 , T2P_SAMPLE_RGBA_TO_RGB = 0x0002 , T2P_SAMPLE_RGBAA_TO_RGB = 0x0004 , T2P_SAMPLE_YCBCR_TO_RGB = 0x0008 , T2P_SAMPLE_YCBCR_TO_LAB = 0x0010 , T2P_SAMPLE_REALIZE_PALETTE = 0x0020 , T2P_SAMPLE_SIGNED_TO_UNSIGNED = 0x0040 , T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED = 0x0040 , T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG = 0x0100 }
CLASS_DEF	107:8	118:0	4	enum CLASS_NAME BASE_CLASSES { T2P_SAMPLE_NOTHING = 0x0000 , T2P_SAMPLE_ABGR_TO_RGB = 0x0001 , T2P_SAMPLE_RGBA_TO_RGB = 0x0002 , T2P_SAMPLE_RGBAA_TO_RGB = 0x0004 , T2P_SAMPLE_YCBCR_TO_RGB = 0x0008 , T2P_SAMPLE_YCBCR_TO_LAB = 0x0010 , T2P_SAMPLE_REALIZE_PALETTE = 0x0020 , T2P_SAMPLE_SIGNED_TO_UNSIGNED = 0x0040 , T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED = 0x0040 , T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG = 0x0100 }
LEAF_NODE	107:8	107:8	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	107:12	107:12	5	{
CLASS_CONTENT	108:1	117:38	5	T2P_SAMPLE_NOTHING = 0x0000 , T2P_SAMPLE_ABGR_TO_RGB = 0x0001 , T2P_SAMPLE_RGBA_TO_RGB = 0x0002 , T2P_SAMPLE_RGBAA_TO_RGB = 0x0004 , T2P_SAMPLE_YCBCR_TO_RGB = 0x0008 , T2P_SAMPLE_YCBCR_TO_LAB = 0x0010 , T2P_SAMPLE_REALIZE_PALETTE = 0x0020 , T2P_SAMPLE_SIGNED_TO_UNSIGNED = 0x0040 , T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED = 0x0040 , T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG = 0x0100
LEAF_NODE	108:1	108:1	6	T2P_SAMPLE_NOTHING
LEAF_NODE	108:19	108:19	6	=
LEAF_NODE	108:20	108:20	6	0x0000
LEAF_NODE	108:26	108:26	6	,
LEAF_NODE	109:1	109:1	6	T2P_SAMPLE_ABGR_TO_RGB
LEAF_NODE	109:23	109:23	6	=
LEAF_NODE	109:24	109:24	6	0x0001
LEAF_NODE	109:30	109:30	6	,
LEAF_NODE	110:1	110:1	6	T2P_SAMPLE_RGBA_TO_RGB
LEAF_NODE	110:23	110:23	6	=
LEAF_NODE	110:24	110:24	6	0x0002
LEAF_NODE	110:30	110:30	6	,
LEAF_NODE	111:1	111:1	6	T2P_SAMPLE_RGBAA_TO_RGB
LEAF_NODE	111:24	111:24	6	=
LEAF_NODE	111:25	111:25	6	0x0004
LEAF_NODE	111:31	111:31	6	,
LEAF_NODE	112:1	112:1	6	T2P_SAMPLE_YCBCR_TO_RGB
LEAF_NODE	112:24	112:24	6	=
LEAF_NODE	112:25	112:25	6	0x0008
LEAF_NODE	112:31	112:31	6	,
LEAF_NODE	113:1	113:1	6	T2P_SAMPLE_YCBCR_TO_LAB
LEAF_NODE	113:24	113:24	6	=
LEAF_NODE	113:25	113:25	6	0x0010
LEAF_NODE	113:31	113:31	6	,
LEAF_NODE	114:1	114:1	6	T2P_SAMPLE_REALIZE_PALETTE
LEAF_NODE	114:27	114:27	6	=
LEAF_NODE	114:28	114:28	6	0x0020
LEAF_NODE	114:34	114:34	6	,
LEAF_NODE	115:1	115:1	6	T2P_SAMPLE_SIGNED_TO_UNSIGNED
LEAF_NODE	115:30	115:30	6	=
LEAF_NODE	115:31	115:31	6	0x0040
LEAF_NODE	115:37	115:37	6	,
LEAF_NODE	116:1	116:1	6	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LEAF_NODE	116:34	116:34	6	=
LEAF_NODE	116:35	116:35	6	0x0040
LEAF_NODE	116:41	116:41	6	,
LEAF_NODE	117:1	117:1	6	T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
LEAF_NODE	117:37	117:37	6	=
LEAF_NODE	117:38	117:38	6	0x0100
LEAF_NODE	118:0	118:0	5	}
NAME	118:2	118:2	3	t2p_sample_t
LEAF_NODE	118:2	118:2	4	t2p_sample_t
LEAF_NODE	118:14	118:14	2	;
SIMPLE_DECL	121:8	124:11	1	enum CLASS_NAME BASE_CLASSES { T2P_ERR_OK = 0 , T2P_ERR_ERROR = 1 } t2p_err_t ;
VAR_DECL	121:8	124:2	2	enum CLASS_NAME BASE_CLASSES { T2P_ERR_OK = 0 , T2P_ERR_ERROR = 1 } t2p_err_t
TYPE	121:8	121:8	3	enum CLASS_NAME BASE_CLASSES { T2P_ERR_OK = 0 , T2P_ERR_ERROR = 1 }
CLASS_DEF	121:8	124:0	4	enum CLASS_NAME BASE_CLASSES { T2P_ERR_OK = 0 , T2P_ERR_ERROR = 1 }
LEAF_NODE	121:8	121:8	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	121:12	121:12	5	{
CLASS_CONTENT	122:1	123:17	5	T2P_ERR_OK = 0 , T2P_ERR_ERROR = 1
LEAF_NODE	122:1	122:1	6	T2P_ERR_OK
LEAF_NODE	122:12	122:12	6	=
LEAF_NODE	122:14	122:14	6	0
LEAF_NODE	122:15	122:15	6	,
LEAF_NODE	123:1	123:1	6	T2P_ERR_ERROR
LEAF_NODE	123:15	123:15	6	=
LEAF_NODE	123:17	123:17	6	1
LEAF_NODE	124:0	124:0	5	}
NAME	124:2	124:2	3	t2p_err_t
LEAF_NODE	124:2	124:2	4	t2p_err_t
LEAF_NODE	124:11	124:11	2	;
SIMPLE_DECL	127:8	132:10	1	struct CLASS_NAME BASE_CLASSES { tdir_t page_directory ; uint32 page_number ; ttile_t page_tilecount ; uint32 page_extra ; } T2P_PAGE ;
VAR_DECL	127:8	132:2	2	struct CLASS_NAME BASE_CLASSES { tdir_t page_directory ; uint32 page_number ; ttile_t page_tilecount ; uint32 page_extra ; } T2P_PAGE
TYPE	127:8	127:8	3	struct CLASS_NAME BASE_CLASSES { tdir_t page_directory ; uint32 page_number ; ttile_t page_tilecount ; uint32 page_extra ; }
CLASS_DEF	127:8	132:0	4	struct CLASS_NAME BASE_CLASSES { tdir_t page_directory ; uint32 page_number ; ttile_t page_tilecount ; uint32 page_extra ; }
LEAF_NODE	127:8	127:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	127:15	127:15	5	{
CLASS_CONTENT	128:1	131:1	5	tdir_t page_directory ; uint32 page_number ; ttile_t page_tilecount ; uint32 page_extra ;
SIMPLE_DECL	128:1	128:22	6	tdir_t page_directory ;
VAR_DECL	128:1	128:8	7	tdir_t page_directory
TYPE	128:1	128:1	8	tdir_t
TYPE_NAME	128:1	128:1	9	tdir_t
LEAF_NODE	128:1	128:1	10	tdir_t
NAME	128:8	128:8	8	page_directory
LEAF_NODE	128:8	128:8	9	page_directory
LEAF_NODE	128:22	128:22	7	;
SIMPLE_DECL	129:1	129:19	6	uint32 page_number ;
VAR_DECL	129:1	129:8	7	uint32 page_number
TYPE	129:1	129:1	8	uint32
TYPE_NAME	129:1	129:1	9	uint32
LEAF_NODE	129:1	129:1	10	uint32
NAME	129:8	129:8	8	page_number
LEAF_NODE	129:8	129:8	9	page_number
LEAF_NODE	129:19	129:19	7	;
SIMPLE_DECL	130:1	130:23	6	ttile_t page_tilecount ;
VAR_DECL	130:1	130:9	7	ttile_t page_tilecount
TYPE	130:1	130:1	8	ttile_t
TYPE_NAME	130:1	130:1	9	ttile_t
LEAF_NODE	130:1	130:1	10	ttile_t
NAME	130:9	130:9	8	page_tilecount
LEAF_NODE	130:9	130:9	9	page_tilecount
LEAF_NODE	130:23	130:23	7	;
SIMPLE_DECL	131:1	131:18	6	uint32 page_extra ;
VAR_DECL	131:1	131:8	7	uint32 page_extra
TYPE	131:1	131:1	8	uint32
TYPE_NAME	131:1	131:1	9	uint32
LEAF_NODE	131:1	131:1	10	uint32
NAME	131:8	131:8	8	page_extra
LEAF_NODE	131:8	131:8	9	page_extra
LEAF_NODE	131:18	131:18	7	;
LEAF_NODE	132:0	132:0	5	}
NAME	132:2	132:2	3	T2P_PAGE
LEAF_NODE	132:2	132:2	4	T2P_PAGE
LEAF_NODE	132:10	132:10	2	;
SIMPLE_DECL	135:8	141:9	1	struct CLASS_NAME BASE_CLASSES { float x1 ; float y1 ; float x2 ; float y2 ; float [ 9 ] mat ; } T2P_BOX ;
VAR_DECL	135:8	141:2	2	struct CLASS_NAME BASE_CLASSES { float x1 ; float y1 ; float x2 ; float y2 ; float [ 9 ] mat ; } T2P_BOX
TYPE	135:8	135:8	3	struct CLASS_NAME BASE_CLASSES { float x1 ; float y1 ; float x2 ; float y2 ; float [ 9 ] mat ; }
CLASS_DEF	135:8	141:0	4	struct CLASS_NAME BASE_CLASSES { float x1 ; float y1 ; float x2 ; float y2 ; float [ 9 ] mat ; }
LEAF_NODE	135:8	135:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	135:15	135:15	5	{
CLASS_CONTENT	136:1	140:1	5	float x1 ; float y1 ; float x2 ; float y2 ; float [ 9 ] mat ;
SIMPLE_DECL	136:1	136:9	6	float x1 ;
VAR_DECL	136:1	136:7	7	float x1
TYPE	136:1	136:1	8	float
TYPE_NAME	136:1	136:1	9	float
LEAF_NODE	136:1	136:1	10	float
NAME	136:7	136:7	8	x1
LEAF_NODE	136:7	136:7	9	x1
LEAF_NODE	136:9	136:9	7	;
SIMPLE_DECL	137:1	137:9	6	float y1 ;
VAR_DECL	137:1	137:7	7	float y1
TYPE	137:1	137:1	8	float
TYPE_NAME	137:1	137:1	9	float
LEAF_NODE	137:1	137:1	10	float
NAME	137:7	137:7	8	y1
LEAF_NODE	137:7	137:7	9	y1
LEAF_NODE	137:9	137:9	7	;
SIMPLE_DECL	138:1	138:9	6	float x2 ;
VAR_DECL	138:1	138:7	7	float x2
TYPE	138:1	138:1	8	float
TYPE_NAME	138:1	138:1	9	float
LEAF_NODE	138:1	138:1	10	float
NAME	138:7	138:7	8	x2
LEAF_NODE	138:7	138:7	9	x2
LEAF_NODE	138:9	138:9	7	;
SIMPLE_DECL	139:1	139:9	6	float y2 ;
VAR_DECL	139:1	139:7	7	float y2
TYPE	139:1	139:1	8	float
TYPE_NAME	139:1	139:1	9	float
LEAF_NODE	139:1	139:1	10	float
NAME	139:7	139:7	8	y2
LEAF_NODE	139:7	139:7	9	y2
LEAF_NODE	139:9	139:9	7	;
SIMPLE_DECL	140:1	140:13	6	float [ 9 ] mat ;
VAR_DECL	140:1	140:7	7	float [ 9 ] mat
TYPE	140:1	140:10	8	float [ 9 ]
TYPE_NAME	140:1	140:1	9	float
LEAF_NODE	140:1	140:1	10	float
TYPE_SUFFIX	140:10	140:12	9	[ 9 ]
LEAF_NODE	140:10	140:10	10	[
FIELD	140:11	140:11	10	9
LEAF_NODE	140:11	140:11	11	9
LEAF_NODE	140:12	140:12	10	]
NAME	140:7	140:7	8	mat
LEAF_NODE	140:7	140:7	9	mat
LEAF_NODE	140:13	140:13	7	;
LEAF_NODE	141:0	141:0	5	}
NAME	141:2	141:2	3	T2P_BOX
LEAF_NODE	141:2	141:2	4	T2P_BOX
LEAF_NODE	141:9	141:9	2	;
SIMPLE_DECL	144:8	146:10	1	struct CLASS_NAME BASE_CLASSES { T2P_BOX tile_box ; } T2P_TILE ;
VAR_DECL	144:8	146:2	2	struct CLASS_NAME BASE_CLASSES { T2P_BOX tile_box ; } T2P_TILE
TYPE	144:8	144:8	3	struct CLASS_NAME BASE_CLASSES { T2P_BOX tile_box ; }
CLASS_DEF	144:8	146:0	4	struct CLASS_NAME BASE_CLASSES { T2P_BOX tile_box ; }
LEAF_NODE	144:8	144:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	144:15	144:15	5	{
CLASS_CONTENT	145:1	145:1	5	T2P_BOX tile_box ;
SIMPLE_DECL	145:1	145:17	6	T2P_BOX tile_box ;
VAR_DECL	145:1	145:9	7	T2P_BOX tile_box
TYPE	145:1	145:1	8	T2P_BOX
TYPE_NAME	145:1	145:1	9	T2P_BOX
LEAF_NODE	145:1	145:1	10	T2P_BOX
NAME	145:9	145:9	8	tile_box
LEAF_NODE	145:9	145:9	9	tile_box
LEAF_NODE	145:17	145:17	7	;
LEAF_NODE	146:0	146:0	5	}
NAME	146:2	146:2	3	T2P_TILE
LEAF_NODE	146:2	146:2	4	T2P_TILE
LEAF_NODE	146:10	146:10	2	;
SIMPLE_DECL	149:8	158:11	1	struct CLASS_NAME BASE_CLASSES { ttile_t tiles_tilecount ; uint32 tiles_tilewidth ; uint32 tiles_tilelength ; uint32 tiles_tilecountx ; uint32 tiles_tilecounty ; uint32 tiles_edgetilewidth ; uint32 tiles_edgetilelength ; T2P_TILE * tiles_tiles ; } T2P_TILES ;
VAR_DECL	149:8	158:2	2	struct CLASS_NAME BASE_CLASSES { ttile_t tiles_tilecount ; uint32 tiles_tilewidth ; uint32 tiles_tilelength ; uint32 tiles_tilecountx ; uint32 tiles_tilecounty ; uint32 tiles_edgetilewidth ; uint32 tiles_edgetilelength ; T2P_TILE * tiles_tiles ; } T2P_TILES
TYPE	149:8	149:8	3	struct CLASS_NAME BASE_CLASSES { ttile_t tiles_tilecount ; uint32 tiles_tilewidth ; uint32 tiles_tilelength ; uint32 tiles_tilecountx ; uint32 tiles_tilecounty ; uint32 tiles_edgetilewidth ; uint32 tiles_edgetilelength ; T2P_TILE * tiles_tiles ; }
CLASS_DEF	149:8	158:0	4	struct CLASS_NAME BASE_CLASSES { ttile_t tiles_tilecount ; uint32 tiles_tilewidth ; uint32 tiles_tilelength ; uint32 tiles_tilecountx ; uint32 tiles_tilecounty ; uint32 tiles_edgetilewidth ; uint32 tiles_edgetilelength ; T2P_TILE * tiles_tiles ; }
LEAF_NODE	149:8	149:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	149:15	149:15	5	{
CLASS_CONTENT	150:1	157:1	5	ttile_t tiles_tilecount ; uint32 tiles_tilewidth ; uint32 tiles_tilelength ; uint32 tiles_tilecountx ; uint32 tiles_tilecounty ; uint32 tiles_edgetilewidth ; uint32 tiles_edgetilelength ; T2P_TILE * tiles_tiles ;
SIMPLE_DECL	150:1	150:24	6	ttile_t tiles_tilecount ;
VAR_DECL	150:1	150:9	7	ttile_t tiles_tilecount
TYPE	150:1	150:1	8	ttile_t
TYPE_NAME	150:1	150:1	9	ttile_t
LEAF_NODE	150:1	150:1	10	ttile_t
NAME	150:9	150:9	8	tiles_tilecount
LEAF_NODE	150:9	150:9	9	tiles_tilecount
LEAF_NODE	150:24	150:24	7	;
SIMPLE_DECL	151:1	151:23	6	uint32 tiles_tilewidth ;
VAR_DECL	151:1	151:8	7	uint32 tiles_tilewidth
TYPE	151:1	151:1	8	uint32
TYPE_NAME	151:1	151:1	9	uint32
LEAF_NODE	151:1	151:1	10	uint32
NAME	151:8	151:8	8	tiles_tilewidth
LEAF_NODE	151:8	151:8	9	tiles_tilewidth
LEAF_NODE	151:23	151:23	7	;
SIMPLE_DECL	152:1	152:24	6	uint32 tiles_tilelength ;
VAR_DECL	152:1	152:8	7	uint32 tiles_tilelength
TYPE	152:1	152:1	8	uint32
TYPE_NAME	152:1	152:1	9	uint32
LEAF_NODE	152:1	152:1	10	uint32
NAME	152:8	152:8	8	tiles_tilelength
LEAF_NODE	152:8	152:8	9	tiles_tilelength
LEAF_NODE	152:24	152:24	7	;
SIMPLE_DECL	153:1	153:24	6	uint32 tiles_tilecountx ;
VAR_DECL	153:1	153:8	7	uint32 tiles_tilecountx
TYPE	153:1	153:1	8	uint32
TYPE_NAME	153:1	153:1	9	uint32
LEAF_NODE	153:1	153:1	10	uint32
NAME	153:8	153:8	8	tiles_tilecountx
LEAF_NODE	153:8	153:8	9	tiles_tilecountx
LEAF_NODE	153:24	153:24	7	;
SIMPLE_DECL	154:1	154:24	6	uint32 tiles_tilecounty ;
VAR_DECL	154:1	154:8	7	uint32 tiles_tilecounty
TYPE	154:1	154:1	8	uint32
TYPE_NAME	154:1	154:1	9	uint32
LEAF_NODE	154:1	154:1	10	uint32
NAME	154:8	154:8	8	tiles_tilecounty
LEAF_NODE	154:8	154:8	9	tiles_tilecounty
LEAF_NODE	154:24	154:24	7	;
SIMPLE_DECL	155:1	155:27	6	uint32 tiles_edgetilewidth ;
VAR_DECL	155:1	155:8	7	uint32 tiles_edgetilewidth
TYPE	155:1	155:1	8	uint32
TYPE_NAME	155:1	155:1	9	uint32
LEAF_NODE	155:1	155:1	10	uint32
NAME	155:8	155:8	8	tiles_edgetilewidth
LEAF_NODE	155:8	155:8	9	tiles_edgetilewidth
LEAF_NODE	155:27	155:27	7	;
SIMPLE_DECL	156:1	156:28	6	uint32 tiles_edgetilelength ;
VAR_DECL	156:1	156:8	7	uint32 tiles_edgetilelength
TYPE	156:1	156:1	8	uint32
TYPE_NAME	156:1	156:1	9	uint32
LEAF_NODE	156:1	156:1	10	uint32
NAME	156:8	156:8	8	tiles_edgetilelength
LEAF_NODE	156:8	156:8	9	tiles_edgetilelength
LEAF_NODE	156:28	156:28	7	;
SIMPLE_DECL	157:1	157:22	6	T2P_TILE * tiles_tiles ;
VAR_DECL	157:1	157:11	7	T2P_TILE * tiles_tiles
TYPE	157:1	157:9	8	T2P_TILE *
TYPE_NAME	157:1	157:1	9	T2P_TILE
LEAF_NODE	157:1	157:1	10	T2P_TILE
POINTER	157:9	157:9	9	*
LEAF_NODE	157:9	157:9	10	*
NAME	157:11	157:11	8	tiles_tiles
LEAF_NODE	157:11	157:11	9	tiles_tiles
LEAF_NODE	157:22	157:22	7	;
LEAF_NODE	158:0	158:0	5	}
NAME	158:2	158:2	3	T2P_TILES
LEAF_NODE	158:2	158:2	4	T2P_TILES
LEAF_NODE	158:11	158:11	2	;
SIMPLE_DECL	161:8	254:5	1	struct CLASS_NAME BASE_CLASSES { t2p_err_t t2p_error ; T2P_PAGE * tiff_pages ; T2P_TILES * tiff_tiles ; tdir_t tiff_pagecount ; uint16 tiff_compression ; uint16 tiff_photometric ; uint16 tiff_fillorder ; uint16 tiff_bitspersample ; uint16 tiff_samplesperpixel ; uint16 tiff_planar ; uint32 tiff_width ; uint32 tiff_length ; float tiff_xres ; float tiff_yres ; uint16 tiff_orientation ; toff_t tiff_dataoffset ; tsize_t tiff_datasize ; uint16 tiff_resunit ; uint16 pdf_centimeters ; uint16 pdf_overrideres ; uint16 pdf_overridepagesize ; float pdf_defaultxres ; float pdf_defaultyres ; float pdf_xres ; float pdf_yres ; float pdf_defaultpagewidth ; float pdf_defaultpagelength ; float pdf_pagewidth ; float pdf_pagelength ; float pdf_imagewidth ; float pdf_imagelength ; int pdf_image_fillpage ; T2P_BOX pdf_mediabox ; T2P_BOX pdf_imagebox ; uint16 pdf_majorversion ; uint16 pdf_minorversion ; uint32 pdf_catalog ; uint32 pdf_pages ; uint32 pdf_info ; uint32 pdf_palettecs ; uint16 pdf_fitwindow ; uint32 pdf_startxref ; char [ TIFF2PDF_FILEID_SIZE ] pdf_fileid ; char [ TIFF2PDF_DATETIME_SIZE ] pdf_datetime ; char [ TIFF2PDF_CREATOR_SIZE ] pdf_creator ; char [ TIFF2PDF_AUTHOR_SIZE ] pdf_author ; char [ TIFF2PDF_TITLE_SIZE ] pdf_title ; char [ TIFF2PDF_SUBJECT_SIZE ] pdf_subject ; char [ TIFF2PDF_KEYWORDS_SIZE ] pdf_keywords ; t2p_cs_t pdf_colorspace ; uint16 pdf_colorspace_invert ; uint16 pdf_switchdecode ; uint16 pdf_palettesize ; unsigned char * pdf_palette ; int [ 4 ] pdf_labrange ; t2p_compress_t pdf_defaultcompression ; uint16 pdf_defaultcompressionquality ; t2p_compress_t pdf_compression ; uint16 pdf_compressionquality ; uint16 pdf_nopassthrough ; t2p_transcode_t pdf_transcode ; t2p_sample_t pdf_sample ; uint32 * pdf_xrefoffsets ; uint32 pdf_xrefcount ; tdir_t pdf_page ; tdata_t pdf_ojpegdata ; uint32 pdf_ojpegdatalength ; uint32 pdf_ojpegiflength ; float [ 2 ] tiff_whitechromaticities ; float [ 6 ] tiff_primarychromaticities ; float [ 2 ] tiff_referenceblackwhite ; uint16 * [ 3 ] tiff_transferfunction ; int pdf_image_interpolate ; uint16 tiff_transferfunctioncount ; uint32 pdf_icccs ; uint32 tiff_iccprofilelength ; tdata_t tiff_iccprofile ; FILE * outputfile ; int outputdisable ; tsize_t outputwritten ; } T2P ;
VAR_DECL	161:8	254:2	2	struct CLASS_NAME BASE_CLASSES { t2p_err_t t2p_error ; T2P_PAGE * tiff_pages ; T2P_TILES * tiff_tiles ; tdir_t tiff_pagecount ; uint16 tiff_compression ; uint16 tiff_photometric ; uint16 tiff_fillorder ; uint16 tiff_bitspersample ; uint16 tiff_samplesperpixel ; uint16 tiff_planar ; uint32 tiff_width ; uint32 tiff_length ; float tiff_xres ; float tiff_yres ; uint16 tiff_orientation ; toff_t tiff_dataoffset ; tsize_t tiff_datasize ; uint16 tiff_resunit ; uint16 pdf_centimeters ; uint16 pdf_overrideres ; uint16 pdf_overridepagesize ; float pdf_defaultxres ; float pdf_defaultyres ; float pdf_xres ; float pdf_yres ; float pdf_defaultpagewidth ; float pdf_defaultpagelength ; float pdf_pagewidth ; float pdf_pagelength ; float pdf_imagewidth ; float pdf_imagelength ; int pdf_image_fillpage ; T2P_BOX pdf_mediabox ; T2P_BOX pdf_imagebox ; uint16 pdf_majorversion ; uint16 pdf_minorversion ; uint32 pdf_catalog ; uint32 pdf_pages ; uint32 pdf_info ; uint32 pdf_palettecs ; uint16 pdf_fitwindow ; uint32 pdf_startxref ; char [ TIFF2PDF_FILEID_SIZE ] pdf_fileid ; char [ TIFF2PDF_DATETIME_SIZE ] pdf_datetime ; char [ TIFF2PDF_CREATOR_SIZE ] pdf_creator ; char [ TIFF2PDF_AUTHOR_SIZE ] pdf_author ; char [ TIFF2PDF_TITLE_SIZE ] pdf_title ; char [ TIFF2PDF_SUBJECT_SIZE ] pdf_subject ; char [ TIFF2PDF_KEYWORDS_SIZE ] pdf_keywords ; t2p_cs_t pdf_colorspace ; uint16 pdf_colorspace_invert ; uint16 pdf_switchdecode ; uint16 pdf_palettesize ; unsigned char * pdf_palette ; int [ 4 ] pdf_labrange ; t2p_compress_t pdf_defaultcompression ; uint16 pdf_defaultcompressionquality ; t2p_compress_t pdf_compression ; uint16 pdf_compressionquality ; uint16 pdf_nopassthrough ; t2p_transcode_t pdf_transcode ; t2p_sample_t pdf_sample ; uint32 * pdf_xrefoffsets ; uint32 pdf_xrefcount ; tdir_t pdf_page ; tdata_t pdf_ojpegdata ; uint32 pdf_ojpegdatalength ; uint32 pdf_ojpegiflength ; float [ 2 ] tiff_whitechromaticities ; float [ 6 ] tiff_primarychromaticities ; float [ 2 ] tiff_referenceblackwhite ; uint16 * [ 3 ] tiff_transferfunction ; int pdf_image_interpolate ; uint16 tiff_transferfunctioncount ; uint32 pdf_icccs ; uint32 tiff_iccprofilelength ; tdata_t tiff_iccprofile ; FILE * outputfile ; int outputdisable ; tsize_t outputwritten ; } T2P
TYPE	161:8	161:8	3	struct CLASS_NAME BASE_CLASSES { t2p_err_t t2p_error ; T2P_PAGE * tiff_pages ; T2P_TILES * tiff_tiles ; tdir_t tiff_pagecount ; uint16 tiff_compression ; uint16 tiff_photometric ; uint16 tiff_fillorder ; uint16 tiff_bitspersample ; uint16 tiff_samplesperpixel ; uint16 tiff_planar ; uint32 tiff_width ; uint32 tiff_length ; float tiff_xres ; float tiff_yres ; uint16 tiff_orientation ; toff_t tiff_dataoffset ; tsize_t tiff_datasize ; uint16 tiff_resunit ; uint16 pdf_centimeters ; uint16 pdf_overrideres ; uint16 pdf_overridepagesize ; float pdf_defaultxres ; float pdf_defaultyres ; float pdf_xres ; float pdf_yres ; float pdf_defaultpagewidth ; float pdf_defaultpagelength ; float pdf_pagewidth ; float pdf_pagelength ; float pdf_imagewidth ; float pdf_imagelength ; int pdf_image_fillpage ; T2P_BOX pdf_mediabox ; T2P_BOX pdf_imagebox ; uint16 pdf_majorversion ; uint16 pdf_minorversion ; uint32 pdf_catalog ; uint32 pdf_pages ; uint32 pdf_info ; uint32 pdf_palettecs ; uint16 pdf_fitwindow ; uint32 pdf_startxref ; char [ TIFF2PDF_FILEID_SIZE ] pdf_fileid ; char [ TIFF2PDF_DATETIME_SIZE ] pdf_datetime ; char [ TIFF2PDF_CREATOR_SIZE ] pdf_creator ; char [ TIFF2PDF_AUTHOR_SIZE ] pdf_author ; char [ TIFF2PDF_TITLE_SIZE ] pdf_title ; char [ TIFF2PDF_SUBJECT_SIZE ] pdf_subject ; char [ TIFF2PDF_KEYWORDS_SIZE ] pdf_keywords ; t2p_cs_t pdf_colorspace ; uint16 pdf_colorspace_invert ; uint16 pdf_switchdecode ; uint16 pdf_palettesize ; unsigned char * pdf_palette ; int [ 4 ] pdf_labrange ; t2p_compress_t pdf_defaultcompression ; uint16 pdf_defaultcompressionquality ; t2p_compress_t pdf_compression ; uint16 pdf_compressionquality ; uint16 pdf_nopassthrough ; t2p_transcode_t pdf_transcode ; t2p_sample_t pdf_sample ; uint32 * pdf_xrefoffsets ; uint32 pdf_xrefcount ; tdir_t pdf_page ; tdata_t pdf_ojpegdata ; uint32 pdf_ojpegdatalength ; uint32 pdf_ojpegiflength ; float [ 2 ] tiff_whitechromaticities ; float [ 6 ] tiff_primarychromaticities ; float [ 2 ] tiff_referenceblackwhite ; uint16 * [ 3 ] tiff_transferfunction ; int pdf_image_interpolate ; uint16 tiff_transferfunctioncount ; uint32 pdf_icccs ; uint32 tiff_iccprofilelength ; tdata_t tiff_iccprofile ; FILE * outputfile ; int outputdisable ; tsize_t outputwritten ; }
CLASS_DEF	161:8	254:0	4	struct CLASS_NAME BASE_CLASSES { t2p_err_t t2p_error ; T2P_PAGE * tiff_pages ; T2P_TILES * tiff_tiles ; tdir_t tiff_pagecount ; uint16 tiff_compression ; uint16 tiff_photometric ; uint16 tiff_fillorder ; uint16 tiff_bitspersample ; uint16 tiff_samplesperpixel ; uint16 tiff_planar ; uint32 tiff_width ; uint32 tiff_length ; float tiff_xres ; float tiff_yres ; uint16 tiff_orientation ; toff_t tiff_dataoffset ; tsize_t tiff_datasize ; uint16 tiff_resunit ; uint16 pdf_centimeters ; uint16 pdf_overrideres ; uint16 pdf_overridepagesize ; float pdf_defaultxres ; float pdf_defaultyres ; float pdf_xres ; float pdf_yres ; float pdf_defaultpagewidth ; float pdf_defaultpagelength ; float pdf_pagewidth ; float pdf_pagelength ; float pdf_imagewidth ; float pdf_imagelength ; int pdf_image_fillpage ; T2P_BOX pdf_mediabox ; T2P_BOX pdf_imagebox ; uint16 pdf_majorversion ; uint16 pdf_minorversion ; uint32 pdf_catalog ; uint32 pdf_pages ; uint32 pdf_info ; uint32 pdf_palettecs ; uint16 pdf_fitwindow ; uint32 pdf_startxref ; char [ TIFF2PDF_FILEID_SIZE ] pdf_fileid ; char [ TIFF2PDF_DATETIME_SIZE ] pdf_datetime ; char [ TIFF2PDF_CREATOR_SIZE ] pdf_creator ; char [ TIFF2PDF_AUTHOR_SIZE ] pdf_author ; char [ TIFF2PDF_TITLE_SIZE ] pdf_title ; char [ TIFF2PDF_SUBJECT_SIZE ] pdf_subject ; char [ TIFF2PDF_KEYWORDS_SIZE ] pdf_keywords ; t2p_cs_t pdf_colorspace ; uint16 pdf_colorspace_invert ; uint16 pdf_switchdecode ; uint16 pdf_palettesize ; unsigned char * pdf_palette ; int [ 4 ] pdf_labrange ; t2p_compress_t pdf_defaultcompression ; uint16 pdf_defaultcompressionquality ; t2p_compress_t pdf_compression ; uint16 pdf_compressionquality ; uint16 pdf_nopassthrough ; t2p_transcode_t pdf_transcode ; t2p_sample_t pdf_sample ; uint32 * pdf_xrefoffsets ; uint32 pdf_xrefcount ; tdir_t pdf_page ; tdata_t pdf_ojpegdata ; uint32 pdf_ojpegdatalength ; uint32 pdf_ojpegiflength ; float [ 2 ] tiff_whitechromaticities ; float [ 6 ] tiff_primarychromaticities ; float [ 2 ] tiff_referenceblackwhite ; uint16 * [ 3 ] tiff_transferfunction ; int pdf_image_interpolate ; uint16 tiff_transferfunctioncount ; uint32 pdf_icccs ; uint32 tiff_iccprofilelength ; tdata_t tiff_iccprofile ; FILE * outputfile ; int outputdisable ; tsize_t outputwritten ; }
LEAF_NODE	161:8	161:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	161:15	161:15	5	{
CLASS_CONTENT	162:1	253:1	5	t2p_err_t t2p_error ; T2P_PAGE * tiff_pages ; T2P_TILES * tiff_tiles ; tdir_t tiff_pagecount ; uint16 tiff_compression ; uint16 tiff_photometric ; uint16 tiff_fillorder ; uint16 tiff_bitspersample ; uint16 tiff_samplesperpixel ; uint16 tiff_planar ; uint32 tiff_width ; uint32 tiff_length ; float tiff_xres ; float tiff_yres ; uint16 tiff_orientation ; toff_t tiff_dataoffset ; tsize_t tiff_datasize ; uint16 tiff_resunit ; uint16 pdf_centimeters ; uint16 pdf_overrideres ; uint16 pdf_overridepagesize ; float pdf_defaultxres ; float pdf_defaultyres ; float pdf_xres ; float pdf_yres ; float pdf_defaultpagewidth ; float pdf_defaultpagelength ; float pdf_pagewidth ; float pdf_pagelength ; float pdf_imagewidth ; float pdf_imagelength ; int pdf_image_fillpage ; T2P_BOX pdf_mediabox ; T2P_BOX pdf_imagebox ; uint16 pdf_majorversion ; uint16 pdf_minorversion ; uint32 pdf_catalog ; uint32 pdf_pages ; uint32 pdf_info ; uint32 pdf_palettecs ; uint16 pdf_fitwindow ; uint32 pdf_startxref ; char [ TIFF2PDF_FILEID_SIZE ] pdf_fileid ; char [ TIFF2PDF_DATETIME_SIZE ] pdf_datetime ; char [ TIFF2PDF_CREATOR_SIZE ] pdf_creator ; char [ TIFF2PDF_AUTHOR_SIZE ] pdf_author ; char [ TIFF2PDF_TITLE_SIZE ] pdf_title ; char [ TIFF2PDF_SUBJECT_SIZE ] pdf_subject ; char [ TIFF2PDF_KEYWORDS_SIZE ] pdf_keywords ; t2p_cs_t pdf_colorspace ; uint16 pdf_colorspace_invert ; uint16 pdf_switchdecode ; uint16 pdf_palettesize ; unsigned char * pdf_palette ; int [ 4 ] pdf_labrange ; t2p_compress_t pdf_defaultcompression ; uint16 pdf_defaultcompressionquality ; t2p_compress_t pdf_compression ; uint16 pdf_compressionquality ; uint16 pdf_nopassthrough ; t2p_transcode_t pdf_transcode ; t2p_sample_t pdf_sample ; uint32 * pdf_xrefoffsets ; uint32 pdf_xrefcount ; tdir_t pdf_page ; tdata_t pdf_ojpegdata ; uint32 pdf_ojpegdatalength ; uint32 pdf_ojpegiflength ; float [ 2 ] tiff_whitechromaticities ; float [ 6 ] tiff_primarychromaticities ; float [ 2 ] tiff_referenceblackwhite ; uint16 * [ 3 ] tiff_transferfunction ; int pdf_image_interpolate ; uint16 tiff_transferfunctioncount ; uint32 pdf_icccs ; uint32 tiff_iccprofilelength ; tdata_t tiff_iccprofile ; FILE * outputfile ; int outputdisable ; tsize_t outputwritten ;
SIMPLE_DECL	162:1	162:20	6	t2p_err_t t2p_error ;
VAR_DECL	162:1	162:11	7	t2p_err_t t2p_error
TYPE	162:1	162:1	8	t2p_err_t
TYPE_NAME	162:1	162:1	9	t2p_err_t
LEAF_NODE	162:1	162:1	10	t2p_err_t
NAME	162:11	162:11	8	t2p_error
LEAF_NODE	162:11	162:11	9	t2p_error
LEAF_NODE	162:20	162:20	7	;
SIMPLE_DECL	163:1	163:21	6	T2P_PAGE * tiff_pages ;
VAR_DECL	163:1	163:11	7	T2P_PAGE * tiff_pages
TYPE	163:1	163:9	8	T2P_PAGE *
TYPE_NAME	163:1	163:1	9	T2P_PAGE
LEAF_NODE	163:1	163:1	10	T2P_PAGE
POINTER	163:9	163:9	9	*
LEAF_NODE	163:9	163:9	10	*
NAME	163:11	163:11	8	tiff_pages
LEAF_NODE	163:11	163:11	9	tiff_pages
LEAF_NODE	163:21	163:21	7	;
SIMPLE_DECL	164:1	164:22	6	T2P_TILES * tiff_tiles ;
VAR_DECL	164:1	164:12	7	T2P_TILES * tiff_tiles
TYPE	164:1	164:10	8	T2P_TILES *
TYPE_NAME	164:1	164:1	9	T2P_TILES
LEAF_NODE	164:1	164:1	10	T2P_TILES
POINTER	164:10	164:10	9	*
LEAF_NODE	164:10	164:10	10	*
NAME	164:12	164:12	8	tiff_tiles
LEAF_NODE	164:12	164:12	9	tiff_tiles
LEAF_NODE	164:22	164:22	7	;
SIMPLE_DECL	165:1	165:22	6	tdir_t tiff_pagecount ;
VAR_DECL	165:1	165:8	7	tdir_t tiff_pagecount
TYPE	165:1	165:1	8	tdir_t
TYPE_NAME	165:1	165:1	9	tdir_t
LEAF_NODE	165:1	165:1	10	tdir_t
NAME	165:8	165:8	8	tiff_pagecount
LEAF_NODE	165:8	165:8	9	tiff_pagecount
LEAF_NODE	165:22	165:22	7	;
SIMPLE_DECL	166:1	166:24	6	uint16 tiff_compression ;
VAR_DECL	166:1	166:8	7	uint16 tiff_compression
TYPE	166:1	166:1	8	uint16
TYPE_NAME	166:1	166:1	9	uint16
LEAF_NODE	166:1	166:1	10	uint16
NAME	166:8	166:8	8	tiff_compression
LEAF_NODE	166:8	166:8	9	tiff_compression
LEAF_NODE	166:24	166:24	7	;
SIMPLE_DECL	167:1	167:24	6	uint16 tiff_photometric ;
VAR_DECL	167:1	167:8	7	uint16 tiff_photometric
TYPE	167:1	167:1	8	uint16
TYPE_NAME	167:1	167:1	9	uint16
LEAF_NODE	167:1	167:1	10	uint16
NAME	167:8	167:8	8	tiff_photometric
LEAF_NODE	167:8	167:8	9	tiff_photometric
LEAF_NODE	167:24	167:24	7	;
SIMPLE_DECL	168:1	168:22	6	uint16 tiff_fillorder ;
VAR_DECL	168:1	168:8	7	uint16 tiff_fillorder
TYPE	168:1	168:1	8	uint16
TYPE_NAME	168:1	168:1	9	uint16
LEAF_NODE	168:1	168:1	10	uint16
NAME	168:8	168:8	8	tiff_fillorder
LEAF_NODE	168:8	168:8	9	tiff_fillorder
LEAF_NODE	168:22	168:22	7	;
SIMPLE_DECL	169:1	169:26	6	uint16 tiff_bitspersample ;
VAR_DECL	169:1	169:8	7	uint16 tiff_bitspersample
TYPE	169:1	169:1	8	uint16
TYPE_NAME	169:1	169:1	9	uint16
LEAF_NODE	169:1	169:1	10	uint16
NAME	169:8	169:8	8	tiff_bitspersample
LEAF_NODE	169:8	169:8	9	tiff_bitspersample
LEAF_NODE	169:26	169:26	7	;
SIMPLE_DECL	170:1	170:28	6	uint16 tiff_samplesperpixel ;
VAR_DECL	170:1	170:8	7	uint16 tiff_samplesperpixel
TYPE	170:1	170:1	8	uint16
TYPE_NAME	170:1	170:1	9	uint16
LEAF_NODE	170:1	170:1	10	uint16
NAME	170:8	170:8	8	tiff_samplesperpixel
LEAF_NODE	170:8	170:8	9	tiff_samplesperpixel
LEAF_NODE	170:28	170:28	7	;
SIMPLE_DECL	171:1	171:19	6	uint16 tiff_planar ;
VAR_DECL	171:1	171:8	7	uint16 tiff_planar
TYPE	171:1	171:1	8	uint16
TYPE_NAME	171:1	171:1	9	uint16
LEAF_NODE	171:1	171:1	10	uint16
NAME	171:8	171:8	8	tiff_planar
LEAF_NODE	171:8	171:8	9	tiff_planar
LEAF_NODE	171:19	171:19	7	;
SIMPLE_DECL	172:1	172:18	6	uint32 tiff_width ;
VAR_DECL	172:1	172:8	7	uint32 tiff_width
TYPE	172:1	172:1	8	uint32
TYPE_NAME	172:1	172:1	9	uint32
LEAF_NODE	172:1	172:1	10	uint32
NAME	172:8	172:8	8	tiff_width
LEAF_NODE	172:8	172:8	9	tiff_width
LEAF_NODE	172:18	172:18	7	;
SIMPLE_DECL	173:1	173:19	6	uint32 tiff_length ;
VAR_DECL	173:1	173:8	7	uint32 tiff_length
TYPE	173:1	173:1	8	uint32
TYPE_NAME	173:1	173:1	9	uint32
LEAF_NODE	173:1	173:1	10	uint32
NAME	173:8	173:8	8	tiff_length
LEAF_NODE	173:8	173:8	9	tiff_length
LEAF_NODE	173:19	173:19	7	;
SIMPLE_DECL	174:1	174:16	6	float tiff_xres ;
VAR_DECL	174:1	174:7	7	float tiff_xres
TYPE	174:1	174:1	8	float
TYPE_NAME	174:1	174:1	9	float
LEAF_NODE	174:1	174:1	10	float
NAME	174:7	174:7	8	tiff_xres
LEAF_NODE	174:7	174:7	9	tiff_xres
LEAF_NODE	174:16	174:16	7	;
SIMPLE_DECL	175:1	175:16	6	float tiff_yres ;
VAR_DECL	175:1	175:7	7	float tiff_yres
TYPE	175:1	175:1	8	float
TYPE_NAME	175:1	175:1	9	float
LEAF_NODE	175:1	175:1	10	float
NAME	175:7	175:7	8	tiff_yres
LEAF_NODE	175:7	175:7	9	tiff_yres
LEAF_NODE	175:16	175:16	7	;
SIMPLE_DECL	176:1	176:24	6	uint16 tiff_orientation ;
VAR_DECL	176:1	176:8	7	uint16 tiff_orientation
TYPE	176:1	176:1	8	uint16
TYPE_NAME	176:1	176:1	9	uint16
LEAF_NODE	176:1	176:1	10	uint16
NAME	176:8	176:8	8	tiff_orientation
LEAF_NODE	176:8	176:8	9	tiff_orientation
LEAF_NODE	176:24	176:24	7	;
SIMPLE_DECL	177:1	177:23	6	toff_t tiff_dataoffset ;
VAR_DECL	177:1	177:8	7	toff_t tiff_dataoffset
TYPE	177:1	177:1	8	toff_t
TYPE_NAME	177:1	177:1	9	toff_t
LEAF_NODE	177:1	177:1	10	toff_t
NAME	177:8	177:8	8	tiff_dataoffset
LEAF_NODE	177:8	177:8	9	tiff_dataoffset
LEAF_NODE	177:23	177:23	7	;
SIMPLE_DECL	178:1	178:22	6	tsize_t tiff_datasize ;
VAR_DECL	178:1	178:9	7	tsize_t tiff_datasize
TYPE	178:1	178:1	8	tsize_t
TYPE_NAME	178:1	178:1	9	tsize_t
LEAF_NODE	178:1	178:1	10	tsize_t
NAME	178:9	178:9	8	tiff_datasize
LEAF_NODE	178:9	178:9	9	tiff_datasize
LEAF_NODE	178:22	178:22	7	;
SIMPLE_DECL	179:1	179:20	6	uint16 tiff_resunit ;
VAR_DECL	179:1	179:8	7	uint16 tiff_resunit
TYPE	179:1	179:1	8	uint16
TYPE_NAME	179:1	179:1	9	uint16
LEAF_NODE	179:1	179:1	10	uint16
NAME	179:8	179:8	8	tiff_resunit
LEAF_NODE	179:8	179:8	9	tiff_resunit
LEAF_NODE	179:20	179:20	7	;
SIMPLE_DECL	180:1	180:23	6	uint16 pdf_centimeters ;
VAR_DECL	180:1	180:8	7	uint16 pdf_centimeters
TYPE	180:1	180:1	8	uint16
TYPE_NAME	180:1	180:1	9	uint16
LEAF_NODE	180:1	180:1	10	uint16
NAME	180:8	180:8	8	pdf_centimeters
LEAF_NODE	180:8	180:8	9	pdf_centimeters
LEAF_NODE	180:23	180:23	7	;
SIMPLE_DECL	181:1	181:23	6	uint16 pdf_overrideres ;
VAR_DECL	181:1	181:8	7	uint16 pdf_overrideres
TYPE	181:1	181:1	8	uint16
TYPE_NAME	181:1	181:1	9	uint16
LEAF_NODE	181:1	181:1	10	uint16
NAME	181:8	181:8	8	pdf_overrideres
LEAF_NODE	181:8	181:8	9	pdf_overrideres
LEAF_NODE	181:23	181:23	7	;
SIMPLE_DECL	182:1	182:28	6	uint16 pdf_overridepagesize ;
VAR_DECL	182:1	182:8	7	uint16 pdf_overridepagesize
TYPE	182:1	182:1	8	uint16
TYPE_NAME	182:1	182:1	9	uint16
LEAF_NODE	182:1	182:1	10	uint16
NAME	182:8	182:8	8	pdf_overridepagesize
LEAF_NODE	182:8	182:8	9	pdf_overridepagesize
LEAF_NODE	182:28	182:28	7	;
SIMPLE_DECL	183:1	183:22	6	float pdf_defaultxres ;
VAR_DECL	183:1	183:7	7	float pdf_defaultxres
TYPE	183:1	183:1	8	float
TYPE_NAME	183:1	183:1	9	float
LEAF_NODE	183:1	183:1	10	float
NAME	183:7	183:7	8	pdf_defaultxres
LEAF_NODE	183:7	183:7	9	pdf_defaultxres
LEAF_NODE	183:22	183:22	7	;
SIMPLE_DECL	184:1	184:22	6	float pdf_defaultyres ;
VAR_DECL	184:1	184:7	7	float pdf_defaultyres
TYPE	184:1	184:1	8	float
TYPE_NAME	184:1	184:1	9	float
LEAF_NODE	184:1	184:1	10	float
NAME	184:7	184:7	8	pdf_defaultyres
LEAF_NODE	184:7	184:7	9	pdf_defaultyres
LEAF_NODE	184:22	184:22	7	;
SIMPLE_DECL	185:1	185:15	6	float pdf_xres ;
VAR_DECL	185:1	185:7	7	float pdf_xres
TYPE	185:1	185:1	8	float
TYPE_NAME	185:1	185:1	9	float
LEAF_NODE	185:1	185:1	10	float
NAME	185:7	185:7	8	pdf_xres
LEAF_NODE	185:7	185:7	9	pdf_xres
LEAF_NODE	185:15	185:15	7	;
SIMPLE_DECL	186:1	186:15	6	float pdf_yres ;
VAR_DECL	186:1	186:7	7	float pdf_yres
TYPE	186:1	186:1	8	float
TYPE_NAME	186:1	186:1	9	float
LEAF_NODE	186:1	186:1	10	float
NAME	186:7	186:7	8	pdf_yres
LEAF_NODE	186:7	186:7	9	pdf_yres
LEAF_NODE	186:15	186:15	7	;
SIMPLE_DECL	187:1	187:27	6	float pdf_defaultpagewidth ;
VAR_DECL	187:1	187:7	7	float pdf_defaultpagewidth
TYPE	187:1	187:1	8	float
TYPE_NAME	187:1	187:1	9	float
LEAF_NODE	187:1	187:1	10	float
NAME	187:7	187:7	8	pdf_defaultpagewidth
LEAF_NODE	187:7	187:7	9	pdf_defaultpagewidth
LEAF_NODE	187:27	187:27	7	;
SIMPLE_DECL	188:1	188:28	6	float pdf_defaultpagelength ;
VAR_DECL	188:1	188:7	7	float pdf_defaultpagelength
TYPE	188:1	188:1	8	float
TYPE_NAME	188:1	188:1	9	float
LEAF_NODE	188:1	188:1	10	float
NAME	188:7	188:7	8	pdf_defaultpagelength
LEAF_NODE	188:7	188:7	9	pdf_defaultpagelength
LEAF_NODE	188:28	188:28	7	;
SIMPLE_DECL	189:1	189:20	6	float pdf_pagewidth ;
VAR_DECL	189:1	189:7	7	float pdf_pagewidth
TYPE	189:1	189:1	8	float
TYPE_NAME	189:1	189:1	9	float
LEAF_NODE	189:1	189:1	10	float
NAME	189:7	189:7	8	pdf_pagewidth
LEAF_NODE	189:7	189:7	9	pdf_pagewidth
LEAF_NODE	189:20	189:20	7	;
SIMPLE_DECL	190:1	190:21	6	float pdf_pagelength ;
VAR_DECL	190:1	190:7	7	float pdf_pagelength
TYPE	190:1	190:1	8	float
TYPE_NAME	190:1	190:1	9	float
LEAF_NODE	190:1	190:1	10	float
NAME	190:7	190:7	8	pdf_pagelength
LEAF_NODE	190:7	190:7	9	pdf_pagelength
LEAF_NODE	190:21	190:21	7	;
SIMPLE_DECL	191:1	191:21	6	float pdf_imagewidth ;
VAR_DECL	191:1	191:7	7	float pdf_imagewidth
TYPE	191:1	191:1	8	float
TYPE_NAME	191:1	191:1	9	float
LEAF_NODE	191:1	191:1	10	float
NAME	191:7	191:7	8	pdf_imagewidth
LEAF_NODE	191:7	191:7	9	pdf_imagewidth
LEAF_NODE	191:21	191:21	7	;
SIMPLE_DECL	192:1	192:22	6	float pdf_imagelength ;
VAR_DECL	192:1	192:7	7	float pdf_imagelength
TYPE	192:1	192:1	8	float
TYPE_NAME	192:1	192:1	9	float
LEAF_NODE	192:1	192:1	10	float
NAME	192:7	192:7	8	pdf_imagelength
LEAF_NODE	192:7	192:7	9	pdf_imagelength
LEAF_NODE	192:22	192:22	7	;
SIMPLE_DECL	193:1	193:23	6	int pdf_image_fillpage ;
VAR_DECL	193:1	193:5	7	int pdf_image_fillpage
TYPE	193:1	193:1	8	int
TYPE_NAME	193:1	193:1	9	int
LEAF_NODE	193:1	193:1	10	int
NAME	193:5	193:5	8	pdf_image_fillpage
LEAF_NODE	193:5	193:5	9	pdf_image_fillpage
LEAF_NODE	193:23	193:23	7	;
SIMPLE_DECL	194:1	194:21	6	T2P_BOX pdf_mediabox ;
VAR_DECL	194:1	194:9	7	T2P_BOX pdf_mediabox
TYPE	194:1	194:1	8	T2P_BOX
TYPE_NAME	194:1	194:1	9	T2P_BOX
LEAF_NODE	194:1	194:1	10	T2P_BOX
NAME	194:9	194:9	8	pdf_mediabox
LEAF_NODE	194:9	194:9	9	pdf_mediabox
LEAF_NODE	194:21	194:21	7	;
SIMPLE_DECL	195:1	195:21	6	T2P_BOX pdf_imagebox ;
VAR_DECL	195:1	195:9	7	T2P_BOX pdf_imagebox
TYPE	195:1	195:1	8	T2P_BOX
TYPE_NAME	195:1	195:1	9	T2P_BOX
LEAF_NODE	195:1	195:1	10	T2P_BOX
NAME	195:9	195:9	8	pdf_imagebox
LEAF_NODE	195:9	195:9	9	pdf_imagebox
LEAF_NODE	195:21	195:21	7	;
SIMPLE_DECL	196:1	196:24	6	uint16 pdf_majorversion ;
VAR_DECL	196:1	196:8	7	uint16 pdf_majorversion
TYPE	196:1	196:1	8	uint16
TYPE_NAME	196:1	196:1	9	uint16
LEAF_NODE	196:1	196:1	10	uint16
NAME	196:8	196:8	8	pdf_majorversion
LEAF_NODE	196:8	196:8	9	pdf_majorversion
LEAF_NODE	196:24	196:24	7	;
SIMPLE_DECL	197:1	197:24	6	uint16 pdf_minorversion ;
VAR_DECL	197:1	197:8	7	uint16 pdf_minorversion
TYPE	197:1	197:1	8	uint16
TYPE_NAME	197:1	197:1	9	uint16
LEAF_NODE	197:1	197:1	10	uint16
NAME	197:8	197:8	8	pdf_minorversion
LEAF_NODE	197:8	197:8	9	pdf_minorversion
LEAF_NODE	197:24	197:24	7	;
SIMPLE_DECL	198:1	198:19	6	uint32 pdf_catalog ;
VAR_DECL	198:1	198:8	7	uint32 pdf_catalog
TYPE	198:1	198:1	8	uint32
TYPE_NAME	198:1	198:1	9	uint32
LEAF_NODE	198:1	198:1	10	uint32
NAME	198:8	198:8	8	pdf_catalog
LEAF_NODE	198:8	198:8	9	pdf_catalog
LEAF_NODE	198:19	198:19	7	;
SIMPLE_DECL	199:1	199:17	6	uint32 pdf_pages ;
VAR_DECL	199:1	199:8	7	uint32 pdf_pages
TYPE	199:1	199:1	8	uint32
TYPE_NAME	199:1	199:1	9	uint32
LEAF_NODE	199:1	199:1	10	uint32
NAME	199:8	199:8	8	pdf_pages
LEAF_NODE	199:8	199:8	9	pdf_pages
LEAF_NODE	199:17	199:17	7	;
SIMPLE_DECL	200:1	200:16	6	uint32 pdf_info ;
VAR_DECL	200:1	200:8	7	uint32 pdf_info
TYPE	200:1	200:1	8	uint32
TYPE_NAME	200:1	200:1	9	uint32
LEAF_NODE	200:1	200:1	10	uint32
NAME	200:8	200:8	8	pdf_info
LEAF_NODE	200:8	200:8	9	pdf_info
LEAF_NODE	200:16	200:16	7	;
SIMPLE_DECL	201:1	201:21	6	uint32 pdf_palettecs ;
VAR_DECL	201:1	201:8	7	uint32 pdf_palettecs
TYPE	201:1	201:1	8	uint32
TYPE_NAME	201:1	201:1	9	uint32
LEAF_NODE	201:1	201:1	10	uint32
NAME	201:8	201:8	8	pdf_palettecs
LEAF_NODE	201:8	201:8	9	pdf_palettecs
LEAF_NODE	201:21	201:21	7	;
SIMPLE_DECL	202:1	202:21	6	uint16 pdf_fitwindow ;
VAR_DECL	202:1	202:8	7	uint16 pdf_fitwindow
TYPE	202:1	202:1	8	uint16
TYPE_NAME	202:1	202:1	9	uint16
LEAF_NODE	202:1	202:1	10	uint16
NAME	202:8	202:8	8	pdf_fitwindow
LEAF_NODE	202:8	202:8	9	pdf_fitwindow
LEAF_NODE	202:21	202:21	7	;
SIMPLE_DECL	203:1	203:21	6	uint32 pdf_startxref ;
VAR_DECL	203:1	203:8	7	uint32 pdf_startxref
TYPE	203:1	203:1	8	uint32
TYPE_NAME	203:1	203:1	9	uint32
LEAF_NODE	203:1	203:1	10	uint32
NAME	203:8	203:8	8	pdf_startxref
LEAF_NODE	203:8	203:8	9	pdf_startxref
LEAF_NODE	203:21	203:21	7	;
SIMPLE_DECL	205:1	205:38	6	char [ TIFF2PDF_FILEID_SIZE ] pdf_fileid ;
VAR_DECL	205:1	205:6	7	char [ TIFF2PDF_FILEID_SIZE ] pdf_fileid
TYPE	205:1	205:16	8	char [ TIFF2PDF_FILEID_SIZE ]
TYPE_NAME	205:1	205:1	9	char
LEAF_NODE	205:1	205:1	10	char
TYPE_SUFFIX	205:16	205:37	9	[ TIFF2PDF_FILEID_SIZE ]
LEAF_NODE	205:16	205:16	10	[
FIELD	205:17	205:17	10	TIFF2PDF_FILEID_SIZE
LEAF_NODE	205:17	205:17	11	TIFF2PDF_FILEID_SIZE
LEAF_NODE	205:37	205:37	10	]
NAME	205:6	205:6	8	pdf_fileid
LEAF_NODE	205:6	205:6	9	pdf_fileid
LEAF_NODE	205:38	205:38	7	;
SIMPLE_DECL	207:1	207:42	6	char [ TIFF2PDF_DATETIME_SIZE ] pdf_datetime ;
VAR_DECL	207:1	207:6	7	char [ TIFF2PDF_DATETIME_SIZE ] pdf_datetime
TYPE	207:1	207:18	8	char [ TIFF2PDF_DATETIME_SIZE ]
TYPE_NAME	207:1	207:1	9	char
LEAF_NODE	207:1	207:1	10	char
TYPE_SUFFIX	207:18	207:41	9	[ TIFF2PDF_DATETIME_SIZE ]
LEAF_NODE	207:18	207:18	10	[
FIELD	207:19	207:19	10	TIFF2PDF_DATETIME_SIZE
LEAF_NODE	207:19	207:19	11	TIFF2PDF_DATETIME_SIZE
LEAF_NODE	207:41	207:41	10	]
NAME	207:6	207:6	8	pdf_datetime
LEAF_NODE	207:6	207:6	9	pdf_datetime
LEAF_NODE	207:42	207:42	7	;
SIMPLE_DECL	209:1	209:40	6	char [ TIFF2PDF_CREATOR_SIZE ] pdf_creator ;
VAR_DECL	209:1	209:6	7	char [ TIFF2PDF_CREATOR_SIZE ] pdf_creator
TYPE	209:1	209:17	8	char [ TIFF2PDF_CREATOR_SIZE ]
TYPE_NAME	209:1	209:1	9	char
LEAF_NODE	209:1	209:1	10	char
TYPE_SUFFIX	209:17	209:39	9	[ TIFF2PDF_CREATOR_SIZE ]
LEAF_NODE	209:17	209:17	10	[
FIELD	209:18	209:18	10	TIFF2PDF_CREATOR_SIZE
LEAF_NODE	209:18	209:18	11	TIFF2PDF_CREATOR_SIZE
LEAF_NODE	209:39	209:39	10	]
NAME	209:6	209:6	8	pdf_creator
LEAF_NODE	209:6	209:6	9	pdf_creator
LEAF_NODE	209:40	209:40	7	;
SIMPLE_DECL	211:1	211:38	6	char [ TIFF2PDF_AUTHOR_SIZE ] pdf_author ;
VAR_DECL	211:1	211:6	7	char [ TIFF2PDF_AUTHOR_SIZE ] pdf_author
TYPE	211:1	211:16	8	char [ TIFF2PDF_AUTHOR_SIZE ]
TYPE_NAME	211:1	211:1	9	char
LEAF_NODE	211:1	211:1	10	char
TYPE_SUFFIX	211:16	211:37	9	[ TIFF2PDF_AUTHOR_SIZE ]
LEAF_NODE	211:16	211:16	10	[
FIELD	211:17	211:17	10	TIFF2PDF_AUTHOR_SIZE
LEAF_NODE	211:17	211:17	11	TIFF2PDF_AUTHOR_SIZE
LEAF_NODE	211:37	211:37	10	]
NAME	211:6	211:6	8	pdf_author
LEAF_NODE	211:6	211:6	9	pdf_author
LEAF_NODE	211:38	211:38	7	;
SIMPLE_DECL	213:1	213:36	6	char [ TIFF2PDF_TITLE_SIZE ] pdf_title ;
VAR_DECL	213:1	213:6	7	char [ TIFF2PDF_TITLE_SIZE ] pdf_title
TYPE	213:1	213:15	8	char [ TIFF2PDF_TITLE_SIZE ]
TYPE_NAME	213:1	213:1	9	char
LEAF_NODE	213:1	213:1	10	char
TYPE_SUFFIX	213:15	213:35	9	[ TIFF2PDF_TITLE_SIZE ]
LEAF_NODE	213:15	213:15	10	[
FIELD	213:16	213:16	10	TIFF2PDF_TITLE_SIZE
LEAF_NODE	213:16	213:16	11	TIFF2PDF_TITLE_SIZE
LEAF_NODE	213:35	213:35	10	]
NAME	213:6	213:6	8	pdf_title
LEAF_NODE	213:6	213:6	9	pdf_title
LEAF_NODE	213:36	213:36	7	;
SIMPLE_DECL	215:1	215:40	6	char [ TIFF2PDF_SUBJECT_SIZE ] pdf_subject ;
VAR_DECL	215:1	215:6	7	char [ TIFF2PDF_SUBJECT_SIZE ] pdf_subject
TYPE	215:1	215:17	8	char [ TIFF2PDF_SUBJECT_SIZE ]
TYPE_NAME	215:1	215:1	9	char
LEAF_NODE	215:1	215:1	10	char
TYPE_SUFFIX	215:17	215:39	9	[ TIFF2PDF_SUBJECT_SIZE ]
LEAF_NODE	215:17	215:17	10	[
FIELD	215:18	215:18	10	TIFF2PDF_SUBJECT_SIZE
LEAF_NODE	215:18	215:18	11	TIFF2PDF_SUBJECT_SIZE
LEAF_NODE	215:39	215:39	10	]
NAME	215:6	215:6	8	pdf_subject
LEAF_NODE	215:6	215:6	9	pdf_subject
LEAF_NODE	215:40	215:40	7	;
SIMPLE_DECL	217:1	217:42	6	char [ TIFF2PDF_KEYWORDS_SIZE ] pdf_keywords ;
VAR_DECL	217:1	217:6	7	char [ TIFF2PDF_KEYWORDS_SIZE ] pdf_keywords
TYPE	217:1	217:18	8	char [ TIFF2PDF_KEYWORDS_SIZE ]
TYPE_NAME	217:1	217:1	9	char
LEAF_NODE	217:1	217:1	10	char
TYPE_SUFFIX	217:18	217:41	9	[ TIFF2PDF_KEYWORDS_SIZE ]
LEAF_NODE	217:18	217:18	10	[
FIELD	217:19	217:19	10	TIFF2PDF_KEYWORDS_SIZE
LEAF_NODE	217:19	217:19	11	TIFF2PDF_KEYWORDS_SIZE
LEAF_NODE	217:41	217:41	10	]
NAME	217:6	217:6	8	pdf_keywords
LEAF_NODE	217:6	217:6	9	pdf_keywords
LEAF_NODE	217:42	217:42	7	;
SIMPLE_DECL	218:1	218:24	6	t2p_cs_t pdf_colorspace ;
VAR_DECL	218:1	218:10	7	t2p_cs_t pdf_colorspace
TYPE	218:1	218:1	8	t2p_cs_t
TYPE_NAME	218:1	218:1	9	t2p_cs_t
LEAF_NODE	218:1	218:1	10	t2p_cs_t
NAME	218:10	218:10	8	pdf_colorspace
LEAF_NODE	218:10	218:10	9	pdf_colorspace
LEAF_NODE	218:24	218:24	7	;
SIMPLE_DECL	219:1	219:29	6	uint16 pdf_colorspace_invert ;
VAR_DECL	219:1	219:8	7	uint16 pdf_colorspace_invert
TYPE	219:1	219:1	8	uint16
TYPE_NAME	219:1	219:1	9	uint16
LEAF_NODE	219:1	219:1	10	uint16
NAME	219:8	219:8	8	pdf_colorspace_invert
LEAF_NODE	219:8	219:8	9	pdf_colorspace_invert
LEAF_NODE	219:29	219:29	7	;
SIMPLE_DECL	220:1	220:24	6	uint16 pdf_switchdecode ;
VAR_DECL	220:1	220:8	7	uint16 pdf_switchdecode
TYPE	220:1	220:1	8	uint16
TYPE_NAME	220:1	220:1	9	uint16
LEAF_NODE	220:1	220:1	10	uint16
NAME	220:8	220:8	8	pdf_switchdecode
LEAF_NODE	220:8	220:8	9	pdf_switchdecode
LEAF_NODE	220:24	220:24	7	;
SIMPLE_DECL	221:1	221:23	6	uint16 pdf_palettesize ;
VAR_DECL	221:1	221:8	7	uint16 pdf_palettesize
TYPE	221:1	221:1	8	uint16
TYPE_NAME	221:1	221:1	9	uint16
LEAF_NODE	221:1	221:1	10	uint16
NAME	221:8	221:8	8	pdf_palettesize
LEAF_NODE	221:8	221:8	9	pdf_palettesize
LEAF_NODE	221:23	221:23	7	;
SIMPLE_DECL	222:1	222:27	6	unsigned char * pdf_palette ;
VAR_DECL	222:1	222:16	7	unsigned char * pdf_palette
TYPE	222:1	222:14	8	unsigned char *
TYPE_NAME	222:1	222:10	9	unsigned char
LEAF_NODE	222:1	222:1	10	unsigned
LEAF_NODE	222:10	222:10	10	char
POINTER	222:14	222:14	9	*
LEAF_NODE	222:14	222:14	10	*
NAME	222:16	222:16	8	pdf_palette
LEAF_NODE	222:16	222:16	9	pdf_palette
LEAF_NODE	222:27	222:27	7	;
SIMPLE_DECL	223:1	223:20	6	int [ 4 ] pdf_labrange ;
VAR_DECL	223:1	223:5	7	int [ 4 ] pdf_labrange
TYPE	223:1	223:17	8	int [ 4 ]
TYPE_NAME	223:1	223:1	9	int
LEAF_NODE	223:1	223:1	10	int
TYPE_SUFFIX	223:17	223:19	9	[ 4 ]
LEAF_NODE	223:17	223:17	10	[
FIELD	223:18	223:18	10	4
LEAF_NODE	223:18	223:18	11	4
LEAF_NODE	223:19	223:19	10	]
NAME	223:5	223:5	8	pdf_labrange
LEAF_NODE	223:5	223:5	9	pdf_labrange
LEAF_NODE	223:20	223:20	7	;
SIMPLE_DECL	224:1	224:38	6	t2p_compress_t pdf_defaultcompression ;
VAR_DECL	224:1	224:16	7	t2p_compress_t pdf_defaultcompression
TYPE	224:1	224:1	8	t2p_compress_t
TYPE_NAME	224:1	224:1	9	t2p_compress_t
LEAF_NODE	224:1	224:1	10	t2p_compress_t
NAME	224:16	224:16	8	pdf_defaultcompression
LEAF_NODE	224:16	224:16	9	pdf_defaultcompression
LEAF_NODE	224:38	224:38	7	;
SIMPLE_DECL	225:1	225:37	6	uint16 pdf_defaultcompressionquality ;
VAR_DECL	225:1	225:8	7	uint16 pdf_defaultcompressionquality
TYPE	225:1	225:1	8	uint16
TYPE_NAME	225:1	225:1	9	uint16
LEAF_NODE	225:1	225:1	10	uint16
NAME	225:8	225:8	8	pdf_defaultcompressionquality
LEAF_NODE	225:8	225:8	9	pdf_defaultcompressionquality
LEAF_NODE	225:37	225:37	7	;
SIMPLE_DECL	226:1	226:31	6	t2p_compress_t pdf_compression ;
VAR_DECL	226:1	226:16	7	t2p_compress_t pdf_compression
TYPE	226:1	226:1	8	t2p_compress_t
TYPE_NAME	226:1	226:1	9	t2p_compress_t
LEAF_NODE	226:1	226:1	10	t2p_compress_t
NAME	226:16	226:16	8	pdf_compression
LEAF_NODE	226:16	226:16	9	pdf_compression
LEAF_NODE	226:31	226:31	7	;
SIMPLE_DECL	227:1	227:30	6	uint16 pdf_compressionquality ;
VAR_DECL	227:1	227:8	7	uint16 pdf_compressionquality
TYPE	227:1	227:1	8	uint16
TYPE_NAME	227:1	227:1	9	uint16
LEAF_NODE	227:1	227:1	10	uint16
NAME	227:8	227:8	8	pdf_compressionquality
LEAF_NODE	227:8	227:8	9	pdf_compressionquality
LEAF_NODE	227:30	227:30	7	;
SIMPLE_DECL	228:1	228:25	6	uint16 pdf_nopassthrough ;
VAR_DECL	228:1	228:8	7	uint16 pdf_nopassthrough
TYPE	228:1	228:1	8	uint16
TYPE_NAME	228:1	228:1	9	uint16
LEAF_NODE	228:1	228:1	10	uint16
NAME	228:8	228:8	8	pdf_nopassthrough
LEAF_NODE	228:8	228:8	9	pdf_nopassthrough
LEAF_NODE	228:25	228:25	7	;
SIMPLE_DECL	229:1	229:30	6	t2p_transcode_t pdf_transcode ;
VAR_DECL	229:1	229:17	7	t2p_transcode_t pdf_transcode
TYPE	229:1	229:1	8	t2p_transcode_t
TYPE_NAME	229:1	229:1	9	t2p_transcode_t
LEAF_NODE	229:1	229:1	10	t2p_transcode_t
NAME	229:17	229:17	8	pdf_transcode
LEAF_NODE	229:17	229:17	9	pdf_transcode
LEAF_NODE	229:30	229:30	7	;
SIMPLE_DECL	230:1	230:24	6	t2p_sample_t pdf_sample ;
VAR_DECL	230:1	230:14	7	t2p_sample_t pdf_sample
TYPE	230:1	230:1	8	t2p_sample_t
TYPE_NAME	230:1	230:1	9	t2p_sample_t
LEAF_NODE	230:1	230:1	10	t2p_sample_t
NAME	230:14	230:14	8	pdf_sample
LEAF_NODE	230:14	230:14	9	pdf_sample
LEAF_NODE	230:24	230:24	7	;
SIMPLE_DECL	231:1	231:24	6	uint32 * pdf_xrefoffsets ;
VAR_DECL	231:1	231:9	7	uint32 * pdf_xrefoffsets
TYPE	231:1	231:7	8	uint32 *
TYPE_NAME	231:1	231:1	9	uint32
LEAF_NODE	231:1	231:1	10	uint32
POINTER	231:7	231:7	9	*
LEAF_NODE	231:7	231:7	10	*
NAME	231:9	231:9	8	pdf_xrefoffsets
LEAF_NODE	231:9	231:9	9	pdf_xrefoffsets
LEAF_NODE	231:24	231:24	7	;
SIMPLE_DECL	232:1	232:21	6	uint32 pdf_xrefcount ;
VAR_DECL	232:1	232:8	7	uint32 pdf_xrefcount
TYPE	232:1	232:1	8	uint32
TYPE_NAME	232:1	232:1	9	uint32
LEAF_NODE	232:1	232:1	10	uint32
NAME	232:8	232:8	8	pdf_xrefcount
LEAF_NODE	232:8	232:8	9	pdf_xrefcount
LEAF_NODE	232:21	232:21	7	;
SIMPLE_DECL	233:1	233:16	6	tdir_t pdf_page ;
VAR_DECL	233:1	233:8	7	tdir_t pdf_page
TYPE	233:1	233:1	8	tdir_t
TYPE_NAME	233:1	233:1	9	tdir_t
LEAF_NODE	233:1	233:1	10	tdir_t
NAME	233:8	233:8	8	pdf_page
LEAF_NODE	233:8	233:8	9	pdf_page
LEAF_NODE	233:16	233:16	7	;
SIMPLE_DECL	235:1	235:22	6	tdata_t pdf_ojpegdata ;
VAR_DECL	235:1	235:9	7	tdata_t pdf_ojpegdata
TYPE	235:1	235:1	8	tdata_t
TYPE_NAME	235:1	235:1	9	tdata_t
LEAF_NODE	235:1	235:1	10	tdata_t
NAME	235:9	235:9	8	pdf_ojpegdata
LEAF_NODE	235:9	235:9	9	pdf_ojpegdata
LEAF_NODE	235:22	235:22	7	;
SIMPLE_DECL	236:1	236:27	6	uint32 pdf_ojpegdatalength ;
VAR_DECL	236:1	236:8	7	uint32 pdf_ojpegdatalength
TYPE	236:1	236:1	8	uint32
TYPE_NAME	236:1	236:1	9	uint32
LEAF_NODE	236:1	236:1	10	uint32
NAME	236:8	236:8	8	pdf_ojpegdatalength
LEAF_NODE	236:8	236:8	9	pdf_ojpegdatalength
LEAF_NODE	236:27	236:27	7	;
SIMPLE_DECL	237:1	237:25	6	uint32 pdf_ojpegiflength ;
VAR_DECL	237:1	237:8	7	uint32 pdf_ojpegiflength
TYPE	237:1	237:1	8	uint32
TYPE_NAME	237:1	237:1	9	uint32
LEAF_NODE	237:1	237:1	10	uint32
NAME	237:8	237:8	8	pdf_ojpegiflength
LEAF_NODE	237:8	237:8	9	pdf_ojpegiflength
LEAF_NODE	237:25	237:25	7	;
SIMPLE_DECL	239:1	239:34	6	float [ 2 ] tiff_whitechromaticities ;
VAR_DECL	239:1	239:7	7	float [ 2 ] tiff_whitechromaticities
TYPE	239:1	239:31	8	float [ 2 ]
TYPE_NAME	239:1	239:1	9	float
LEAF_NODE	239:1	239:1	10	float
TYPE_SUFFIX	239:31	239:33	9	[ 2 ]
LEAF_NODE	239:31	239:31	10	[
FIELD	239:32	239:32	10	2
LEAF_NODE	239:32	239:32	11	2
LEAF_NODE	239:33	239:33	10	]
NAME	239:7	239:7	8	tiff_whitechromaticities
LEAF_NODE	239:7	239:7	9	tiff_whitechromaticities
LEAF_NODE	239:34	239:34	7	;
SIMPLE_DECL	240:1	240:36	6	float [ 6 ] tiff_primarychromaticities ;
VAR_DECL	240:1	240:7	7	float [ 6 ] tiff_primarychromaticities
TYPE	240:1	240:33	8	float [ 6 ]
TYPE_NAME	240:1	240:1	9	float
LEAF_NODE	240:1	240:1	10	float
TYPE_SUFFIX	240:33	240:35	9	[ 6 ]
LEAF_NODE	240:33	240:33	10	[
FIELD	240:34	240:34	10	6
LEAF_NODE	240:34	240:34	11	6
LEAF_NODE	240:35	240:35	10	]
NAME	240:7	240:7	8	tiff_primarychromaticities
LEAF_NODE	240:7	240:7	9	tiff_primarychromaticities
LEAF_NODE	240:36	240:36	7	;
SIMPLE_DECL	241:1	241:34	6	float [ 2 ] tiff_referenceblackwhite ;
VAR_DECL	241:1	241:7	7	float [ 2 ] tiff_referenceblackwhite
TYPE	241:1	241:31	8	float [ 2 ]
TYPE_NAME	241:1	241:1	9	float
LEAF_NODE	241:1	241:1	10	float
TYPE_SUFFIX	241:31	241:33	9	[ 2 ]
LEAF_NODE	241:31	241:31	10	[
FIELD	241:32	241:32	10	2
LEAF_NODE	241:32	241:32	11	2
LEAF_NODE	241:33	241:33	10	]
NAME	241:7	241:7	8	tiff_referenceblackwhite
LEAF_NODE	241:7	241:7	9	tiff_referenceblackwhite
LEAF_NODE	241:34	241:34	7	;
SIMPLE_DECL	242:1	242:33	6	uint16 * [ 3 ] tiff_transferfunction ;
VAR_DECL	242:1	242:9	7	uint16 * [ 3 ] tiff_transferfunction
TYPE	242:1	242:30	8	uint16 * [ 3 ]
TYPE_NAME	242:1	242:1	9	uint16
LEAF_NODE	242:1	242:1	10	uint16
POINTER	242:7	242:7	9	*
LEAF_NODE	242:7	242:7	10	*
TYPE_SUFFIX	242:30	242:32	9	[ 3 ]
LEAF_NODE	242:30	242:30	10	[
FIELD	242:31	242:31	10	3
LEAF_NODE	242:31	242:31	11	3
LEAF_NODE	242:32	242:32	10	]
NAME	242:9	242:9	8	tiff_transferfunction
LEAF_NODE	242:9	242:9	9	tiff_transferfunction
LEAF_NODE	242:33	242:33	7	;
SIMPLE_DECL	243:1	243:26	6	int pdf_image_interpolate ;
VAR_DECL	243:1	243:5	7	int pdf_image_interpolate
TYPE	243:1	243:1	8	int
TYPE_NAME	243:1	243:1	9	int
LEAF_NODE	243:1	243:1	10	int
NAME	243:5	243:5	8	pdf_image_interpolate
LEAF_NODE	243:5	243:5	9	pdf_image_interpolate
LEAF_NODE	243:26	243:26	7	;
SIMPLE_DECL	245:1	245:34	6	uint16 tiff_transferfunctioncount ;
VAR_DECL	245:1	245:8	7	uint16 tiff_transferfunctioncount
TYPE	245:1	245:1	8	uint16
TYPE_NAME	245:1	245:1	9	uint16
LEAF_NODE	245:1	245:1	10	uint16
NAME	245:8	245:8	8	tiff_transferfunctioncount
LEAF_NODE	245:8	245:8	9	tiff_transferfunctioncount
LEAF_NODE	245:34	245:34	7	;
SIMPLE_DECL	246:1	246:17	6	uint32 pdf_icccs ;
VAR_DECL	246:1	246:8	7	uint32 pdf_icccs
TYPE	246:1	246:1	8	uint32
TYPE_NAME	246:1	246:1	9	uint32
LEAF_NODE	246:1	246:1	10	uint32
NAME	246:8	246:8	8	pdf_icccs
LEAF_NODE	246:8	246:8	9	pdf_icccs
LEAF_NODE	246:17	246:17	7	;
SIMPLE_DECL	247:1	247:29	6	uint32 tiff_iccprofilelength ;
VAR_DECL	247:1	247:8	7	uint32 tiff_iccprofilelength
TYPE	247:1	247:1	8	uint32
TYPE_NAME	247:1	247:1	9	uint32
LEAF_NODE	247:1	247:1	10	uint32
NAME	247:8	247:8	8	tiff_iccprofilelength
LEAF_NODE	247:8	247:8	9	tiff_iccprofilelength
LEAF_NODE	247:29	247:29	7	;
SIMPLE_DECL	248:1	248:24	6	tdata_t tiff_iccprofile ;
VAR_DECL	248:1	248:9	7	tdata_t tiff_iccprofile
TYPE	248:1	248:1	8	tdata_t
TYPE_NAME	248:1	248:1	9	tdata_t
LEAF_NODE	248:1	248:1	10	tdata_t
NAME	248:9	248:9	8	tiff_iccprofile
LEAF_NODE	248:9	248:9	9	tiff_iccprofile
LEAF_NODE	248:24	248:24	7	;
SIMPLE_DECL	251:1	251:17	6	FILE * outputfile ;
VAR_DECL	251:1	251:7	7	FILE * outputfile
TYPE	251:1	251:6	8	FILE *
TYPE_NAME	251:1	251:1	9	FILE
LEAF_NODE	251:1	251:1	10	FILE
POINTER	251:6	251:6	9	*
LEAF_NODE	251:6	251:6	10	*
NAME	251:7	251:7	8	outputfile
LEAF_NODE	251:7	251:7	9	outputfile
LEAF_NODE	251:17	251:17	7	;
SIMPLE_DECL	252:1	252:18	6	int outputdisable ;
VAR_DECL	252:1	252:5	7	int outputdisable
TYPE	252:1	252:1	8	int
TYPE_NAME	252:1	252:1	9	int
LEAF_NODE	252:1	252:1	10	int
NAME	252:5	252:5	8	outputdisable
LEAF_NODE	252:5	252:5	9	outputdisable
LEAF_NODE	252:18	252:18	7	;
SIMPLE_DECL	253:1	253:22	6	tsize_t outputwritten ;
VAR_DECL	253:1	253:9	7	tsize_t outputwritten
TYPE	253:1	253:1	8	tsize_t
TYPE_NAME	253:1	253:1	9	tsize_t
LEAF_NODE	253:1	253:1	10	tsize_t
NAME	253:9	253:9	8	outputwritten
LEAF_NODE	253:9	253:9	9	outputwritten
LEAF_NODE	253:22	253:22	7	;
LEAF_NODE	254:0	254:0	5	}
NAME	254:2	254:2	3	T2P
LEAF_NODE	254:2	254:2	4	T2P
LEAF_NODE	254:5	254:5	2	;
SIMPLE_DECL	258:0	258:25	1	void tiff2pdf_usage ; tiff2pdf_usage tiff2pdf_usage ( void ) ;
VAR_DECL	258:0	258:5	2	void tiff2pdf_usage ; tiff2pdf_usage tiff2pdf_usage ( void )
TYPE	258:0	258:0	3	void
TYPE_NAME	258:0	258:0	4	void
LEAF_NODE	258:0	258:0	5	void
NAME	258:5	258:5	3	tiff2pdf_usage
LEAF_NODE	258:5	258:5	4	tiff2pdf_usage
LEAF_NODE	0:0	0:0	3	;
INIT	258:5	258:5	3	tiff2pdf_usage tiff2pdf_usage ( void )
ASSIGN	258:5	258:19	4	tiff2pdf_usage tiff2pdf_usage ( void )
LVAL	258:5	258:5	5	tiff2pdf_usage
NAME	258:5	258:5	6	tiff2pdf_usage
LEAF_NODE	258:5	258:5	7	tiff2pdf_usage
ASSIGN_OP	258:5	258:5	5	tiff2pdf_usage
NAME	258:5	258:5	6	tiff2pdf_usage
LEAF_NODE	258:5	258:5	7	tiff2pdf_usage
RVAL	258:19	258:24	5	( void )
LEAF_NODE	258:19	258:19	6	(
EXPR	258:20	258:20	6	void
FIELD	258:20	258:20	7	void
LEAF_NODE	258:20	258:20	8	void
LEAF_NODE	258:24	258:24	6	)
LEAF_NODE	258:25	258:25	2	;
SIMPLE_DECL	267:0	267:19	1	T2P * t2p_init ; t2p_init t2p_init ( void ) ;
VAR_DECL	267:0	267:5	2	T2P * t2p_init ; t2p_init t2p_init ( void )
TYPE	267:0	267:3	3	T2P *
TYPE_NAME	267:0	267:0	4	T2P
LEAF_NODE	267:0	267:0	5	T2P
POINTER	267:3	267:3	4	*
LEAF_NODE	267:3	267:3	5	*
NAME	267:5	267:5	3	t2p_init
LEAF_NODE	267:5	267:5	4	t2p_init
LEAF_NODE	0:0	0:0	3	;
INIT	267:5	267:5	3	t2p_init t2p_init ( void )
ASSIGN	267:5	267:13	4	t2p_init t2p_init ( void )
LVAL	267:5	267:5	5	t2p_init
NAME	267:5	267:5	6	t2p_init
LEAF_NODE	267:5	267:5	7	t2p_init
ASSIGN_OP	267:5	267:5	5	t2p_init
NAME	267:5	267:5	6	t2p_init
LEAF_NODE	267:5	267:5	7	t2p_init
RVAL	267:13	267:18	5	( void )
LEAF_NODE	267:13	267:13	6	(
EXPR	267:14	267:14	6	void
FIELD	267:14	267:14	7	void
LEAF_NODE	267:14	267:14	8	void
LEAF_NODE	267:18	267:18	6	)
LEAF_NODE	267:19	267:19	2	;
SIMPLE_DECL	281:0	281:46	1	int t2p_tile_is_right_edge ; t2p_tile_is_right_edge t2p_tile_is_right_edge ( T2P_TILES , ttile_t ) ;
VAR_DECL	281:0	281:4	2	int t2p_tile_is_right_edge ; t2p_tile_is_right_edge t2p_tile_is_right_edge ( T2P_TILES , ttile_t )
TYPE	281:0	281:0	3	int
TYPE_NAME	281:0	281:0	4	int
LEAF_NODE	281:0	281:0	5	int
NAME	281:4	281:4	3	t2p_tile_is_right_edge
LEAF_NODE	281:4	281:4	4	t2p_tile_is_right_edge
LEAF_NODE	0:0	0:0	3	;
INIT	281:4	281:4	3	t2p_tile_is_right_edge t2p_tile_is_right_edge ( T2P_TILES , ttile_t )
ASSIGN	281:4	281:26	4	t2p_tile_is_right_edge t2p_tile_is_right_edge ( T2P_TILES , ttile_t )
LVAL	281:4	281:4	5	t2p_tile_is_right_edge
NAME	281:4	281:4	6	t2p_tile_is_right_edge
LEAF_NODE	281:4	281:4	7	t2p_tile_is_right_edge
ASSIGN_OP	281:4	281:4	5	t2p_tile_is_right_edge
NAME	281:4	281:4	6	t2p_tile_is_right_edge
LEAF_NODE	281:4	281:4	7	t2p_tile_is_right_edge
RVAL	281:26	281:45	5	( T2P_TILES , ttile_t )
LEAF_NODE	281:26	281:26	6	(
EXPR	281:27	281:38	6	T2P_TILES , ttile_t
FIELD	281:27	281:27	7	T2P_TILES
LEAF_NODE	281:27	281:27	8	T2P_TILES
LEAF_NODE	281:36	281:36	7	,
FIELD	281:38	281:38	7	ttile_t
LEAF_NODE	281:38	281:38	8	ttile_t
LEAF_NODE	281:45	281:45	6	)
LEAF_NODE	281:46	281:46	2	;
SIMPLE_DECL	282:0	282:47	1	int t2p_tile_is_bottom_edge ; t2p_tile_is_bottom_edge t2p_tile_is_bottom_edge ( T2P_TILES , ttile_t ) ;
VAR_DECL	282:0	282:4	2	int t2p_tile_is_bottom_edge ; t2p_tile_is_bottom_edge t2p_tile_is_bottom_edge ( T2P_TILES , ttile_t )
TYPE	282:0	282:0	3	int
TYPE_NAME	282:0	282:0	4	int
LEAF_NODE	282:0	282:0	5	int
NAME	282:4	282:4	3	t2p_tile_is_bottom_edge
LEAF_NODE	282:4	282:4	4	t2p_tile_is_bottom_edge
LEAF_NODE	0:0	0:0	3	;
INIT	282:4	282:4	3	t2p_tile_is_bottom_edge t2p_tile_is_bottom_edge ( T2P_TILES , ttile_t )
ASSIGN	282:4	282:27	4	t2p_tile_is_bottom_edge t2p_tile_is_bottom_edge ( T2P_TILES , ttile_t )
LVAL	282:4	282:4	5	t2p_tile_is_bottom_edge
NAME	282:4	282:4	6	t2p_tile_is_bottom_edge
LEAF_NODE	282:4	282:4	7	t2p_tile_is_bottom_edge
ASSIGN_OP	282:4	282:4	5	t2p_tile_is_bottom_edge
NAME	282:4	282:4	6	t2p_tile_is_bottom_edge
LEAF_NODE	282:4	282:4	7	t2p_tile_is_bottom_edge
RVAL	282:27	282:46	5	( T2P_TILES , ttile_t )
LEAF_NODE	282:27	282:27	6	(
EXPR	282:28	282:39	6	T2P_TILES , ttile_t
FIELD	282:28	282:28	7	T2P_TILES
LEAF_NODE	282:28	282:28	8	T2P_TILES
LEAF_NODE	282:37	282:37	7	,
FIELD	282:39	282:39	7	ttile_t
LEAF_NODE	282:39	282:39	8	ttile_t
LEAF_NODE	282:46	282:46	6	)
LEAF_NODE	282:47	282:47	2	;
SIMPLE_DECL	283:0	283:40	1	int t2p_tile_is_edge ; t2p_tile_is_edge t2p_tile_is_edge ( T2P_TILES , ttile_t ) ;
VAR_DECL	283:0	283:4	2	int t2p_tile_is_edge ; t2p_tile_is_edge t2p_tile_is_edge ( T2P_TILES , ttile_t )
TYPE	283:0	283:0	3	int
TYPE_NAME	283:0	283:0	4	int
LEAF_NODE	283:0	283:0	5	int
NAME	283:4	283:4	3	t2p_tile_is_edge
LEAF_NODE	283:4	283:4	4	t2p_tile_is_edge
LEAF_NODE	0:0	0:0	3	;
INIT	283:4	283:4	3	t2p_tile_is_edge t2p_tile_is_edge ( T2P_TILES , ttile_t )
ASSIGN	283:4	283:20	4	t2p_tile_is_edge t2p_tile_is_edge ( T2P_TILES , ttile_t )
LVAL	283:4	283:4	5	t2p_tile_is_edge
NAME	283:4	283:4	6	t2p_tile_is_edge
LEAF_NODE	283:4	283:4	7	t2p_tile_is_edge
ASSIGN_OP	283:4	283:4	5	t2p_tile_is_edge
NAME	283:4	283:4	6	t2p_tile_is_edge
LEAF_NODE	283:4	283:4	7	t2p_tile_is_edge
RVAL	283:20	283:39	5	( T2P_TILES , ttile_t )
LEAF_NODE	283:20	283:20	6	(
EXPR	283:21	283:32	6	T2P_TILES , ttile_t
FIELD	283:21	283:21	7	T2P_TILES
LEAF_NODE	283:21	283:21	8	T2P_TILES
LEAF_NODE	283:30	283:30	7	,
FIELD	283:32	283:32	7	ttile_t
LEAF_NODE	283:32	283:32	8	ttile_t
LEAF_NODE	283:39	283:39	6	)
LEAF_NODE	283:40	283:40	2	;
SIMPLE_DECL	284:0	284:47	1	int t2p_tile_is_corner_edge ; t2p_tile_is_corner_edge t2p_tile_is_corner_edge ( T2P_TILES , ttile_t ) ;
VAR_DECL	284:0	284:4	2	int t2p_tile_is_corner_edge ; t2p_tile_is_corner_edge t2p_tile_is_corner_edge ( T2P_TILES , ttile_t )
TYPE	284:0	284:0	3	int
TYPE_NAME	284:0	284:0	4	int
LEAF_NODE	284:0	284:0	5	int
NAME	284:4	284:4	3	t2p_tile_is_corner_edge
LEAF_NODE	284:4	284:4	4	t2p_tile_is_corner_edge
LEAF_NODE	0:0	0:0	3	;
INIT	284:4	284:4	3	t2p_tile_is_corner_edge t2p_tile_is_corner_edge ( T2P_TILES , ttile_t )
ASSIGN	284:4	284:27	4	t2p_tile_is_corner_edge t2p_tile_is_corner_edge ( T2P_TILES , ttile_t )
LVAL	284:4	284:4	5	t2p_tile_is_corner_edge
NAME	284:4	284:4	6	t2p_tile_is_corner_edge
LEAF_NODE	284:4	284:4	7	t2p_tile_is_corner_edge
ASSIGN_OP	284:4	284:4	5	t2p_tile_is_corner_edge
NAME	284:4	284:4	6	t2p_tile_is_corner_edge
LEAF_NODE	284:4	284:4	7	t2p_tile_is_corner_edge
RVAL	284:27	284:46	5	( T2P_TILES , ttile_t )
LEAF_NODE	284:27	284:27	6	(
EXPR	284:28	284:39	6	T2P_TILES , ttile_t
FIELD	284:28	284:28	7	T2P_TILES
LEAF_NODE	284:28	284:28	8	T2P_TILES
LEAF_NODE	284:37	284:37	7	,
FIELD	284:39	284:39	7	ttile_t
LEAF_NODE	284:39	284:39	8	ttile_t
LEAF_NODE	284:46	284:46	6	)
LEAF_NODE	284:47	284:47	2	;
SIMPLE_DECL	297:0	297:47	1	tsize_t t2p_sample_abgr_to_rgb ; t2p_sample_abgr_to_rgb t2p_sample_abgr_to_rgb ( tdata_t , uint32 ) ;
VAR_DECL	297:0	297:8	2	tsize_t t2p_sample_abgr_to_rgb ; t2p_sample_abgr_to_rgb t2p_sample_abgr_to_rgb ( tdata_t , uint32 )
TYPE	297:0	297:0	3	tsize_t
TYPE_NAME	297:0	297:0	4	tsize_t
LEAF_NODE	297:0	297:0	5	tsize_t
NAME	297:8	297:8	3	t2p_sample_abgr_to_rgb
LEAF_NODE	297:8	297:8	4	t2p_sample_abgr_to_rgb
LEAF_NODE	0:0	0:0	3	;
INIT	297:8	297:8	3	t2p_sample_abgr_to_rgb t2p_sample_abgr_to_rgb ( tdata_t , uint32 )
ASSIGN	297:8	297:30	4	t2p_sample_abgr_to_rgb t2p_sample_abgr_to_rgb ( tdata_t , uint32 )
LVAL	297:8	297:8	5	t2p_sample_abgr_to_rgb
NAME	297:8	297:8	6	t2p_sample_abgr_to_rgb
LEAF_NODE	297:8	297:8	7	t2p_sample_abgr_to_rgb
ASSIGN_OP	297:8	297:8	5	t2p_sample_abgr_to_rgb
NAME	297:8	297:8	6	t2p_sample_abgr_to_rgb
LEAF_NODE	297:8	297:8	7	t2p_sample_abgr_to_rgb
RVAL	297:30	297:46	5	( tdata_t , uint32 )
LEAF_NODE	297:30	297:30	6	(
EXPR	297:31	297:40	6	tdata_t , uint32
FIELD	297:31	297:31	7	tdata_t
LEAF_NODE	297:31	297:31	8	tdata_t
LEAF_NODE	297:38	297:38	7	,
FIELD	297:40	297:40	7	uint32
LEAF_NODE	297:40	297:40	8	uint32
LEAF_NODE	297:46	297:46	6	)
LEAF_NODE	297:47	297:47	2	;
SIMPLE_DECL	298:0	298:47	1	tsize_t t2p_sample_rgba_to_rgb ; t2p_sample_rgba_to_rgb t2p_sample_rgba_to_rgb ( tdata_t , uint32 ) ;
VAR_DECL	298:0	298:8	2	tsize_t t2p_sample_rgba_to_rgb ; t2p_sample_rgba_to_rgb t2p_sample_rgba_to_rgb ( tdata_t , uint32 )
TYPE	298:0	298:0	3	tsize_t
TYPE_NAME	298:0	298:0	4	tsize_t
LEAF_NODE	298:0	298:0	5	tsize_t
NAME	298:8	298:8	3	t2p_sample_rgba_to_rgb
LEAF_NODE	298:8	298:8	4	t2p_sample_rgba_to_rgb
LEAF_NODE	0:0	0:0	3	;
INIT	298:8	298:8	3	t2p_sample_rgba_to_rgb t2p_sample_rgba_to_rgb ( tdata_t , uint32 )
ASSIGN	298:8	298:30	4	t2p_sample_rgba_to_rgb t2p_sample_rgba_to_rgb ( tdata_t , uint32 )
LVAL	298:8	298:8	5	t2p_sample_rgba_to_rgb
NAME	298:8	298:8	6	t2p_sample_rgba_to_rgb
LEAF_NODE	298:8	298:8	7	t2p_sample_rgba_to_rgb
ASSIGN_OP	298:8	298:8	5	t2p_sample_rgba_to_rgb
NAME	298:8	298:8	6	t2p_sample_rgba_to_rgb
LEAF_NODE	298:8	298:8	7	t2p_sample_rgba_to_rgb
RVAL	298:30	298:46	5	( tdata_t , uint32 )
LEAF_NODE	298:30	298:30	6	(
EXPR	298:31	298:40	6	tdata_t , uint32
FIELD	298:31	298:31	7	tdata_t
LEAF_NODE	298:31	298:31	8	tdata_t
LEAF_NODE	298:38	298:38	7	,
FIELD	298:40	298:40	7	uint32
LEAF_NODE	298:40	298:40	8	uint32
LEAF_NODE	298:46	298:46	6	)
LEAF_NODE	298:47	298:47	2	;
SIMPLE_DECL	299:0	299:48	1	tsize_t t2p_sample_rgbaa_to_rgb ; t2p_sample_rgbaa_to_rgb t2p_sample_rgbaa_to_rgb ( tdata_t , uint32 ) ;
VAR_DECL	299:0	299:8	2	tsize_t t2p_sample_rgbaa_to_rgb ; t2p_sample_rgbaa_to_rgb t2p_sample_rgbaa_to_rgb ( tdata_t , uint32 )
TYPE	299:0	299:0	3	tsize_t
TYPE_NAME	299:0	299:0	4	tsize_t
LEAF_NODE	299:0	299:0	5	tsize_t
NAME	299:8	299:8	3	t2p_sample_rgbaa_to_rgb
LEAF_NODE	299:8	299:8	4	t2p_sample_rgbaa_to_rgb
LEAF_NODE	0:0	0:0	3	;
INIT	299:8	299:8	3	t2p_sample_rgbaa_to_rgb t2p_sample_rgbaa_to_rgb ( tdata_t , uint32 )
ASSIGN	299:8	299:31	4	t2p_sample_rgbaa_to_rgb t2p_sample_rgbaa_to_rgb ( tdata_t , uint32 )
LVAL	299:8	299:8	5	t2p_sample_rgbaa_to_rgb
NAME	299:8	299:8	6	t2p_sample_rgbaa_to_rgb
LEAF_NODE	299:8	299:8	7	t2p_sample_rgbaa_to_rgb
ASSIGN_OP	299:8	299:8	5	t2p_sample_rgbaa_to_rgb
NAME	299:8	299:8	6	t2p_sample_rgbaa_to_rgb
LEAF_NODE	299:8	299:8	7	t2p_sample_rgbaa_to_rgb
RVAL	299:31	299:47	5	( tdata_t , uint32 )
LEAF_NODE	299:31	299:31	6	(
EXPR	299:32	299:41	6	tdata_t , uint32
FIELD	299:32	299:32	7	tdata_t
LEAF_NODE	299:32	299:32	8	tdata_t
LEAF_NODE	299:39	299:39	7	,
FIELD	299:41	299:41	7	uint32
LEAF_NODE	299:41	299:41	8	uint32
LEAF_NODE	299:47	299:47	6	)
LEAF_NODE	299:48	299:48	2	;
SIMPLE_DECL	300:0	300:58	1	tsize_t t2p_sample_lab_signed_to_unsigned ; t2p_sample_lab_signed_to_unsigned t2p_sample_lab_signed_to_unsigned ( tdata_t , uint32 ) ;
VAR_DECL	300:0	300:8	2	tsize_t t2p_sample_lab_signed_to_unsigned ; t2p_sample_lab_signed_to_unsigned t2p_sample_lab_signed_to_unsigned ( tdata_t , uint32 )
TYPE	300:0	300:0	3	tsize_t
TYPE_NAME	300:0	300:0	4	tsize_t
LEAF_NODE	300:0	300:0	5	tsize_t
NAME	300:8	300:8	3	t2p_sample_lab_signed_to_unsigned
LEAF_NODE	300:8	300:8	4	t2p_sample_lab_signed_to_unsigned
LEAF_NODE	0:0	0:0	3	;
INIT	300:8	300:8	3	t2p_sample_lab_signed_to_unsigned t2p_sample_lab_signed_to_unsigned ( tdata_t , uint32 )
ASSIGN	300:8	300:41	4	t2p_sample_lab_signed_to_unsigned t2p_sample_lab_signed_to_unsigned ( tdata_t , uint32 )
LVAL	300:8	300:8	5	t2p_sample_lab_signed_to_unsigned
NAME	300:8	300:8	6	t2p_sample_lab_signed_to_unsigned
LEAF_NODE	300:8	300:8	7	t2p_sample_lab_signed_to_unsigned
ASSIGN_OP	300:8	300:8	5	t2p_sample_lab_signed_to_unsigned
NAME	300:8	300:8	6	t2p_sample_lab_signed_to_unsigned
LEAF_NODE	300:8	300:8	7	t2p_sample_lab_signed_to_unsigned
RVAL	300:41	300:57	5	( tdata_t , uint32 )
LEAF_NODE	300:41	300:41	6	(
EXPR	300:42	300:51	6	tdata_t , uint32
FIELD	300:42	300:42	7	tdata_t
LEAF_NODE	300:42	300:42	8	tdata_t
LEAF_NODE	300:49	300:49	7	,
FIELD	300:51	300:51	7	uint32
LEAF_NODE	300:51	300:51	8	uint32
LEAF_NODE	300:57	300:57	6	)
LEAF_NODE	300:58	300:58	2	;
FUNCTION_DEF	345:0	350:0	1	
RETURN_TYPE	345:0	345:7	2	static void
LEAF_NODE	345:0	345:0	3	static
TYPE_NAME	345:7	345:7	3	void
LEAF_NODE	345:7	345:7	4	void
FUNCTION_NAME	346:0	346:0	2	t2p_disable
LEAF_NODE	346:0	346:0	3	t2p_disable
PARAMETER_LIST	346:11	346:21	2	( TIFF * tif )
LEAF_NODE	346:11	346:11	3	(
PARAMETER_DECL	346:12	346:18	3	TIFF * tif
TYPE	346:12	346:17	4	TIFF *
TYPE_NAME	346:12	346:12	5	TIFF
LEAF_NODE	346:12	346:12	6	TIFF
POINTER	346:17	346:17	5	*
LEAF_NODE	346:17	346:17	6	*
NAME	346:18	346:18	4	tif
LEAF_NODE	346:18	346:18	5	tif
LEAF_NODE	346:21	346:21	3	)
LEAF_NODE	347:0	347:0	2	{
STATEMENTS	348:1	349:1	2	
SIMPLE_DECL	348:1	348:38	3	T2P * t2p ; t2p = ( T2P * ) TIFFClientdata ( tif ) ;
VAR_DECL	348:1	348:6	4	T2P * t2p ; t2p = ( T2P * ) TIFFClientdata ( tif )
TYPE	348:1	348:5	5	T2P *
TYPE_NAME	348:1	348:1	6	T2P
LEAF_NODE	348:1	348:1	7	T2P
POINTER	348:5	348:5	6	*
LEAF_NODE	348:5	348:5	7	*
NAME	348:6	348:6	5	t2p
LEAF_NODE	348:6	348:6	6	t2p
LEAF_NODE	0:0	0:0	5	;
INIT	348:6	348:6	5	t2p = ( T2P * ) TIFFClientdata ( tif )
ASSIGN	348:6	348:12	6	t2p = ( T2P * ) TIFFClientdata ( tif )
LVAL	348:6	348:6	7	t2p
NAME	348:6	348:6	8	t2p
LEAF_NODE	348:6	348:6	9	t2p
ASSIGN_OP	348:10	348:10	7	=
LEAF_NODE	348:10	348:10	8	=
RVAL	348:12	348:19	7	( T2P * ) TIFFClientdata ( tif )
LEAF_NODE	348:12	348:12	8	(
TYPE_NAME	348:13	348:13	8	T2P
LEAF_NODE	348:13	348:13	9	T2P
LEAF_NODE	348:16	348:16	8	*
LEAF_NODE	348:17	348:17	8	)
FUNCTION_CALL	348:19	348:37	8	TIFFClientdata ( tif )
CALLEE	348:19	348:19	9	TIFFClientdata
LEAF_NODE	348:19	348:19	10	TIFFClientdata
LEAF_NODE	348:33	348:33	9	(
ARGUMENT	348:34	348:34	9	tif
FIELD	348:34	348:34	10	tif
LEAF_NODE	348:34	348:34	11	tif
LEAF_NODE	348:37	348:37	9	)
LEAF_NODE	348:38	348:38	4	;
EXPR_STATEMENT	349:1	349:23	3	t2p -> outputdisable = 1 ;
EXPR	349:1	349:1	4	t2p -> outputdisable = 1
ASSIGN	349:1	349:22	5	t2p -> outputdisable = 1
LVAL	349:1	349:1	6	t2p -> outputdisable
FIELD	349:1	349:6	7	t2p -> outputdisable
LEAF_NODE	349:1	349:1	8	t2p
LEAF_NODE	349:4	349:4	8	->
LEAF_NODE	349:6	349:6	8	outputdisable
ASSIGN_OP	349:20	349:20	6	=
LEAF_NODE	349:20	349:20	7	=
RVAL	349:22	349:22	6	1
FIELD	349:22	349:22	7	1
LEAF_NODE	349:22	349:22	8	1
LEAF_NODE	349:23	349:23	4	;
LEAF_NODE	350:0	350:0	2	}
FUNCTION_DEF	352:0	357:0	1	
RETURN_TYPE	352:0	352:7	2	static void
LEAF_NODE	352:0	352:0	3	static
TYPE_NAME	352:7	352:7	3	void
LEAF_NODE	352:7	352:7	4	void
FUNCTION_NAME	353:0	353:0	2	t2p_enable
LEAF_NODE	353:0	353:0	3	t2p_enable
PARAMETER_LIST	353:10	353:20	2	( TIFF * tif )
LEAF_NODE	353:10	353:10	3	(
PARAMETER_DECL	353:11	353:17	3	TIFF * tif
TYPE	353:11	353:16	4	TIFF *
TYPE_NAME	353:11	353:11	5	TIFF
LEAF_NODE	353:11	353:11	6	TIFF
POINTER	353:16	353:16	5	*
LEAF_NODE	353:16	353:16	6	*
NAME	353:17	353:17	4	tif
LEAF_NODE	353:17	353:17	5	tif
LEAF_NODE	353:20	353:20	3	)
LEAF_NODE	354:0	354:0	2	{
STATEMENTS	355:1	356:1	2	
SIMPLE_DECL	355:1	355:38	3	T2P * t2p ; t2p = ( T2P * ) TIFFClientdata ( tif ) ;
VAR_DECL	355:1	355:6	4	T2P * t2p ; t2p = ( T2P * ) TIFFClientdata ( tif )
TYPE	355:1	355:5	5	T2P *
TYPE_NAME	355:1	355:1	6	T2P
LEAF_NODE	355:1	355:1	7	T2P
POINTER	355:5	355:5	6	*
LEAF_NODE	355:5	355:5	7	*
NAME	355:6	355:6	5	t2p
LEAF_NODE	355:6	355:6	6	t2p
LEAF_NODE	0:0	0:0	5	;
INIT	355:6	355:6	5	t2p = ( T2P * ) TIFFClientdata ( tif )
ASSIGN	355:6	355:12	6	t2p = ( T2P * ) TIFFClientdata ( tif )
LVAL	355:6	355:6	7	t2p
NAME	355:6	355:6	8	t2p
LEAF_NODE	355:6	355:6	9	t2p
ASSIGN_OP	355:10	355:10	7	=
LEAF_NODE	355:10	355:10	8	=
RVAL	355:12	355:19	7	( T2P * ) TIFFClientdata ( tif )
LEAF_NODE	355:12	355:12	8	(
TYPE_NAME	355:13	355:13	8	T2P
LEAF_NODE	355:13	355:13	9	T2P
LEAF_NODE	355:16	355:16	8	*
LEAF_NODE	355:17	355:17	8	)
FUNCTION_CALL	355:19	355:37	8	TIFFClientdata ( tif )
CALLEE	355:19	355:19	9	TIFFClientdata
LEAF_NODE	355:19	355:19	10	TIFFClientdata
LEAF_NODE	355:33	355:33	9	(
ARGUMENT	355:34	355:34	9	tif
FIELD	355:34	355:34	10	tif
LEAF_NODE	355:34	355:34	11	tif
LEAF_NODE	355:37	355:37	9	)
LEAF_NODE	355:38	355:38	4	;
EXPR_STATEMENT	356:1	356:23	3	t2p -> outputdisable = 0 ;
EXPR	356:1	356:1	4	t2p -> outputdisable = 0
ASSIGN	356:1	356:22	5	t2p -> outputdisable = 0
LVAL	356:1	356:1	6	t2p -> outputdisable
FIELD	356:1	356:6	7	t2p -> outputdisable
LEAF_NODE	356:1	356:1	8	t2p
LEAF_NODE	356:4	356:4	8	->
LEAF_NODE	356:6	356:6	8	outputdisable
ASSIGN_OP	356:20	356:20	6	=
LEAF_NODE	356:20	356:20	7	=
RVAL	356:22	356:22	6	0
FIELD	356:22	356:22	7	0
LEAF_NODE	356:22	356:22	8	0
LEAF_NODE	356:23	356:23	4	;
LEAF_NODE	357:0	357:0	2	}
FUNCTION_DEF	364:0	372:0	1	
RETURN_TYPE	364:0	364:7	2	static tmsize_t
LEAF_NODE	364:0	364:0	3	static
TYPE_NAME	364:7	364:7	3	tmsize_t
LEAF_NODE	364:7	364:7	4	tmsize_t
FUNCTION_NAME	365:0	365:0	2	t2pReadFile
LEAF_NODE	365:0	365:0	3	t2pReadFile
PARAMETER_LIST	365:11	365:50	2	( TIFF * tif , tdata_t data , tmsize_t size )
LEAF_NODE	365:11	365:11	3	(
PARAMETER_DECL	365:12	365:18	3	TIFF * tif
TYPE	365:12	365:17	4	TIFF *
TYPE_NAME	365:12	365:12	5	TIFF
LEAF_NODE	365:12	365:12	6	TIFF
POINTER	365:17	365:17	5	*
LEAF_NODE	365:17	365:17	6	*
NAME	365:18	365:18	4	tif
LEAF_NODE	365:18	365:18	5	tif
LEAF_NODE	365:21	365:21	3	,
PARAMETER_DECL	365:23	365:31	3	tdata_t data
TYPE	365:23	365:23	4	tdata_t
TYPE_NAME	365:23	365:23	5	tdata_t
LEAF_NODE	365:23	365:23	6	tdata_t
NAME	365:31	365:31	4	data
LEAF_NODE	365:31	365:31	5	data
LEAF_NODE	365:35	365:35	3	,
PARAMETER_DECL	365:37	365:46	3	tmsize_t size
TYPE	365:37	365:37	4	tmsize_t
TYPE_NAME	365:37	365:37	5	tmsize_t
LEAF_NODE	365:37	365:37	6	tmsize_t
NAME	365:46	365:46	4	size
LEAF_NODE	365:46	365:46	5	size
LEAF_NODE	365:50	365:50	3	)
LEAF_NODE	366:0	366:0	2	{
STATEMENTS	367:1	371:1	2	
SIMPLE_DECL	367:1	367:39	3	thandle_t client ; client = TIFFClientdata ( tif ) ;
VAR_DECL	367:1	367:11	4	thandle_t client ; client = TIFFClientdata ( tif )
TYPE	367:1	367:1	5	thandle_t
TYPE_NAME	367:1	367:1	6	thandle_t
LEAF_NODE	367:1	367:1	7	thandle_t
NAME	367:11	367:11	5	client
LEAF_NODE	367:11	367:11	6	client
LEAF_NODE	0:0	0:0	5	;
INIT	367:11	367:11	5	client = TIFFClientdata ( tif )
ASSIGN	367:11	367:20	6	client = TIFFClientdata ( tif )
LVAL	367:11	367:11	7	client
NAME	367:11	367:11	8	client
LEAF_NODE	367:11	367:11	9	client
ASSIGN_OP	367:18	367:18	7	=
LEAF_NODE	367:18	367:18	8	=
RVAL	367:20	367:20	7	TIFFClientdata ( tif )
FUNCTION_CALL	367:20	367:38	8	TIFFClientdata ( tif )
CALLEE	367:20	367:20	9	TIFFClientdata
LEAF_NODE	367:20	367:20	10	TIFFClientdata
LEAF_NODE	367:34	367:34	9	(
ARGUMENT	367:35	367:35	9	tif
FIELD	367:35	367:35	10	tif
LEAF_NODE	367:35	367:35	11	tif
LEAF_NODE	367:38	367:38	9	)
LEAF_NODE	367:39	367:39	4	;
SIMPLE_DECL	368:1	368:46	3	TIFFReadWriteProc proc ; proc = TIFFGetReadProc ( tif ) ;
VAR_DECL	368:1	368:19	4	TIFFReadWriteProc proc ; proc = TIFFGetReadProc ( tif )
TYPE	368:1	368:1	5	TIFFReadWriteProc
TYPE_NAME	368:1	368:1	6	TIFFReadWriteProc
LEAF_NODE	368:1	368:1	7	TIFFReadWriteProc
NAME	368:19	368:19	5	proc
LEAF_NODE	368:19	368:19	6	proc
LEAF_NODE	0:0	0:0	5	;
INIT	368:19	368:19	5	proc = TIFFGetReadProc ( tif )
ASSIGN	368:19	368:26	6	proc = TIFFGetReadProc ( tif )
LVAL	368:19	368:19	7	proc
NAME	368:19	368:19	8	proc
LEAF_NODE	368:19	368:19	9	proc
ASSIGN_OP	368:24	368:24	7	=
LEAF_NODE	368:24	368:24	8	=
RVAL	368:26	368:26	7	TIFFGetReadProc ( tif )
FUNCTION_CALL	368:26	368:45	8	TIFFGetReadProc ( tif )
CALLEE	368:26	368:26	9	TIFFGetReadProc
LEAF_NODE	368:26	368:26	10	TIFFGetReadProc
LEAF_NODE	368:41	368:41	9	(
ARGUMENT	368:42	368:42	9	tif
FIELD	368:42	368:42	10	tif
LEAF_NODE	368:42	368:42	11	tif
LEAF_NODE	368:45	368:45	9	)
LEAF_NODE	368:46	368:46	4	;
SELECTION	369:1	370:2	3	
KEYWORD	369:1	369:1	4	if
LEAF_NODE	369:1	369:1	5	if
LEAF_NODE	369:4	369:4	4	(
CONDITION	369:5	369:5	4	proc
EXPR	369:5	369:5	5	proc
FIELD	369:5	369:5	6	proc
LEAF_NODE	369:5	369:5	7	proc
LEAF_NODE	369:9	369:9	4	)
STATEMENTS	370:2	370:2	4	
JUMP_STATEMENT	370:2	370:33	5	return proc ( client , data , size ) ;
KEYWORD	370:2	370:2	6	return
LEAF_NODE	370:2	370:2	7	return
DESTINATION	370:9	370:9	6	proc ( client , data , size )
EXPR	370:9	370:9	7	proc ( client , data , size )
FUNCTION_CALL	370:9	370:32	8	proc ( client , data , size )
CALLEE	370:9	370:9	9	proc
LEAF_NODE	370:9	370:9	10	proc
LEAF_NODE	370:13	370:13	9	(
ARGUMENT	370:14	370:14	9	client
FIELD	370:14	370:14	10	client
LEAF_NODE	370:14	370:14	11	client
LEAF_NODE	370:20	370:20	9	,
ARGUMENT	370:22	370:22	9	data
FIELD	370:22	370:22	10	data
LEAF_NODE	370:22	370:22	11	data
LEAF_NODE	370:26	370:26	9	,
ARGUMENT	370:28	370:28	9	size
FIELD	370:28	370:28	10	size
LEAF_NODE	370:28	370:28	11	size
LEAF_NODE	370:32	370:32	9	)
LEAF_NODE	370:33	370:33	6	;
JUMP_STATEMENT	371:1	371:10	3	return - 1 ;
KEYWORD	371:1	371:1	4	return
LEAF_NODE	371:1	371:1	5	return
DESTINATION	371:8	371:8	4	- 1
EXPR	371:8	371:8	5	- 1
UNARY_EXPR	371:8	371:9	6	- 1
UNARY_OPERATOR	371:8	371:8	7	-
LEAF_NODE	371:8	371:8	8	-
FIELD	371:9	371:9	7	1
LEAF_NODE	371:9	371:9	8	1
LEAF_NODE	371:10	371:10	4	;
LEAF_NODE	372:0	372:0	2	}
FUNCTION_DEF	375:0	383:0	1	
RETURN_TYPE	375:0	375:7	2	static tmsize_t
LEAF_NODE	375:0	375:0	3	static
TYPE_NAME	375:7	375:7	3	tmsize_t
LEAF_NODE	375:7	375:7	4	tmsize_t
FUNCTION_NAME	376:0	376:0	2	t2pWriteFile
LEAF_NODE	376:0	376:0	3	t2pWriteFile
PARAMETER_LIST	376:12	376:51	2	( TIFF * tif , tdata_t data , tmsize_t size )
LEAF_NODE	376:12	376:12	3	(
PARAMETER_DECL	376:13	376:19	3	TIFF * tif
TYPE	376:13	376:18	4	TIFF *
TYPE_NAME	376:13	376:13	5	TIFF
LEAF_NODE	376:13	376:13	6	TIFF
POINTER	376:18	376:18	5	*
LEAF_NODE	376:18	376:18	6	*
NAME	376:19	376:19	4	tif
LEAF_NODE	376:19	376:19	5	tif
LEAF_NODE	376:22	376:22	3	,
PARAMETER_DECL	376:24	376:32	3	tdata_t data
TYPE	376:24	376:24	4	tdata_t
TYPE_NAME	376:24	376:24	5	tdata_t
LEAF_NODE	376:24	376:24	6	tdata_t
NAME	376:32	376:32	4	data
LEAF_NODE	376:32	376:32	5	data
LEAF_NODE	376:36	376:36	3	,
PARAMETER_DECL	376:38	376:47	3	tmsize_t size
TYPE	376:38	376:38	4	tmsize_t
TYPE_NAME	376:38	376:38	5	tmsize_t
LEAF_NODE	376:38	376:38	6	tmsize_t
NAME	376:47	376:47	4	size
LEAF_NODE	376:47	376:47	5	size
LEAF_NODE	376:51	376:51	3	)
LEAF_NODE	377:0	377:0	2	{
STATEMENTS	378:1	382:1	2	
SIMPLE_DECL	378:1	378:39	3	thandle_t client ; client = TIFFClientdata ( tif ) ;
VAR_DECL	378:1	378:11	4	thandle_t client ; client = TIFFClientdata ( tif )
TYPE	378:1	378:1	5	thandle_t
TYPE_NAME	378:1	378:1	6	thandle_t
LEAF_NODE	378:1	378:1	7	thandle_t
NAME	378:11	378:11	5	client
LEAF_NODE	378:11	378:11	6	client
LEAF_NODE	0:0	0:0	5	;
INIT	378:11	378:11	5	client = TIFFClientdata ( tif )
ASSIGN	378:11	378:20	6	client = TIFFClientdata ( tif )
LVAL	378:11	378:11	7	client
NAME	378:11	378:11	8	client
LEAF_NODE	378:11	378:11	9	client
ASSIGN_OP	378:18	378:18	7	=
LEAF_NODE	378:18	378:18	8	=
RVAL	378:20	378:20	7	TIFFClientdata ( tif )
FUNCTION_CALL	378:20	378:38	8	TIFFClientdata ( tif )
CALLEE	378:20	378:20	9	TIFFClientdata
LEAF_NODE	378:20	378:20	10	TIFFClientdata
LEAF_NODE	378:34	378:34	9	(
ARGUMENT	378:35	378:35	9	tif
FIELD	378:35	378:35	10	tif
LEAF_NODE	378:35	378:35	11	tif
LEAF_NODE	378:38	378:38	9	)
LEAF_NODE	378:39	378:39	4	;
SIMPLE_DECL	379:1	379:47	3	TIFFReadWriteProc proc ; proc = TIFFGetWriteProc ( tif ) ;
VAR_DECL	379:1	379:19	4	TIFFReadWriteProc proc ; proc = TIFFGetWriteProc ( tif )
TYPE	379:1	379:1	5	TIFFReadWriteProc
TYPE_NAME	379:1	379:1	6	TIFFReadWriteProc
LEAF_NODE	379:1	379:1	7	TIFFReadWriteProc
NAME	379:19	379:19	5	proc
LEAF_NODE	379:19	379:19	6	proc
LEAF_NODE	0:0	0:0	5	;
INIT	379:19	379:19	5	proc = TIFFGetWriteProc ( tif )
ASSIGN	379:19	379:26	6	proc = TIFFGetWriteProc ( tif )
LVAL	379:19	379:19	7	proc
NAME	379:19	379:19	8	proc
LEAF_NODE	379:19	379:19	9	proc
ASSIGN_OP	379:24	379:24	7	=
LEAF_NODE	379:24	379:24	8	=
RVAL	379:26	379:26	7	TIFFGetWriteProc ( tif )
FUNCTION_CALL	379:26	379:46	8	TIFFGetWriteProc ( tif )
CALLEE	379:26	379:26	9	TIFFGetWriteProc
LEAF_NODE	379:26	379:26	10	TIFFGetWriteProc
LEAF_NODE	379:42	379:42	9	(
ARGUMENT	379:43	379:43	9	tif
FIELD	379:43	379:43	10	tif
LEAF_NODE	379:43	379:43	11	tif
LEAF_NODE	379:46	379:46	9	)
LEAF_NODE	379:47	379:47	4	;
SELECTION	380:1	381:2	3	
KEYWORD	380:1	380:1	4	if
LEAF_NODE	380:1	380:1	5	if
LEAF_NODE	380:4	380:4	4	(
CONDITION	380:5	380:5	4	proc
EXPR	380:5	380:5	5	proc
FIELD	380:5	380:5	6	proc
LEAF_NODE	380:5	380:5	7	proc
LEAF_NODE	380:9	380:9	4	)
STATEMENTS	381:2	381:2	4	
JUMP_STATEMENT	381:2	381:33	5	return proc ( client , data , size ) ;
KEYWORD	381:2	381:2	6	return
LEAF_NODE	381:2	381:2	7	return
DESTINATION	381:9	381:9	6	proc ( client , data , size )
EXPR	381:9	381:9	7	proc ( client , data , size )
FUNCTION_CALL	381:9	381:32	8	proc ( client , data , size )
CALLEE	381:9	381:9	9	proc
LEAF_NODE	381:9	381:9	10	proc
LEAF_NODE	381:13	381:13	9	(
ARGUMENT	381:14	381:14	9	client
FIELD	381:14	381:14	10	client
LEAF_NODE	381:14	381:14	11	client
LEAF_NODE	381:20	381:20	9	,
ARGUMENT	381:22	381:22	9	data
FIELD	381:22	381:22	10	data
LEAF_NODE	381:22	381:22	11	data
LEAF_NODE	381:26	381:26	9	,
ARGUMENT	381:28	381:28	9	size
FIELD	381:28	381:28	10	size
LEAF_NODE	381:28	381:28	11	size
LEAF_NODE	381:32	381:32	9	)
LEAF_NODE	381:33	381:33	6	;
JUMP_STATEMENT	382:1	382:10	3	return - 1 ;
KEYWORD	382:1	382:1	4	return
LEAF_NODE	382:1	382:1	5	return
DESTINATION	382:8	382:8	4	- 1
EXPR	382:8	382:8	5	- 1
UNARY_EXPR	382:8	382:9	6	- 1
UNARY_OPERATOR	382:8	382:8	7	-
LEAF_NODE	382:8	382:8	8	-
FIELD	382:9	382:9	7	1
LEAF_NODE	382:9	382:9	8	1
LEAF_NODE	382:10	382:10	4	;
LEAF_NODE	383:0	383:0	2	}
FUNCTION_DEF	385:0	393:0	1	
RETURN_TYPE	385:0	385:7	2	static uint64
LEAF_NODE	385:0	385:0	3	static
TYPE_NAME	385:7	385:7	3	uint64
LEAF_NODE	385:7	385:7	4	uint64
FUNCTION_NAME	386:0	386:0	2	t2pSeekFile
LEAF_NODE	386:0	386:0	3	t2pSeekFile
PARAMETER_LIST	386:11	386:48	2	( TIFF * tif , toff_t offset , int whence )
LEAF_NODE	386:11	386:11	3	(
PARAMETER_DECL	386:12	386:18	3	TIFF * tif
TYPE	386:12	386:17	4	TIFF *
TYPE_NAME	386:12	386:12	5	TIFF
LEAF_NODE	386:12	386:12	6	TIFF
POINTER	386:17	386:17	5	*
LEAF_NODE	386:17	386:17	6	*
NAME	386:18	386:18	4	tif
LEAF_NODE	386:18	386:18	5	tif
LEAF_NODE	386:21	386:21	3	,
PARAMETER_DECL	386:23	386:30	3	toff_t offset
TYPE	386:23	386:23	4	toff_t
TYPE_NAME	386:23	386:23	5	toff_t
LEAF_NODE	386:23	386:23	6	toff_t
NAME	386:30	386:30	4	offset
LEAF_NODE	386:30	386:30	5	offset
LEAF_NODE	386:36	386:36	3	,
PARAMETER_DECL	386:38	386:42	3	int whence
TYPE	386:38	386:38	4	int
TYPE_NAME	386:38	386:38	5	int
LEAF_NODE	386:38	386:38	6	int
NAME	386:42	386:42	4	whence
LEAF_NODE	386:42	386:42	5	whence
LEAF_NODE	386:48	386:48	3	)
LEAF_NODE	387:0	387:0	2	{
STATEMENTS	388:1	392:1	2	
SIMPLE_DECL	388:1	388:39	3	thandle_t client ; client = TIFFClientdata ( tif ) ;
VAR_DECL	388:1	388:11	4	thandle_t client ; client = TIFFClientdata ( tif )
TYPE	388:1	388:1	5	thandle_t
TYPE_NAME	388:1	388:1	6	thandle_t
LEAF_NODE	388:1	388:1	7	thandle_t
NAME	388:11	388:11	5	client
LEAF_NODE	388:11	388:11	6	client
LEAF_NODE	0:0	0:0	5	;
INIT	388:11	388:11	5	client = TIFFClientdata ( tif )
ASSIGN	388:11	388:20	6	client = TIFFClientdata ( tif )
LVAL	388:11	388:11	7	client
NAME	388:11	388:11	8	client
LEAF_NODE	388:11	388:11	9	client
ASSIGN_OP	388:18	388:18	7	=
LEAF_NODE	388:18	388:18	8	=
RVAL	388:20	388:20	7	TIFFClientdata ( tif )
FUNCTION_CALL	388:20	388:38	8	TIFFClientdata ( tif )
CALLEE	388:20	388:20	9	TIFFClientdata
LEAF_NODE	388:20	388:20	10	TIFFClientdata
LEAF_NODE	388:34	388:34	9	(
ARGUMENT	388:35	388:35	9	tif
FIELD	388:35	388:35	10	tif
LEAF_NODE	388:35	388:35	11	tif
LEAF_NODE	388:38	388:38	9	)
LEAF_NODE	388:39	388:39	4	;
SIMPLE_DECL	389:1	389:41	3	TIFFSeekProc proc ; proc = TIFFGetSeekProc ( tif ) ;
VAR_DECL	389:1	389:14	4	TIFFSeekProc proc ; proc = TIFFGetSeekProc ( tif )
TYPE	389:1	389:1	5	TIFFSeekProc
TYPE_NAME	389:1	389:1	6	TIFFSeekProc
LEAF_NODE	389:1	389:1	7	TIFFSeekProc
NAME	389:14	389:14	5	proc
LEAF_NODE	389:14	389:14	6	proc
LEAF_NODE	0:0	0:0	5	;
INIT	389:14	389:14	5	proc = TIFFGetSeekProc ( tif )
ASSIGN	389:14	389:21	6	proc = TIFFGetSeekProc ( tif )
LVAL	389:14	389:14	7	proc
NAME	389:14	389:14	8	proc
LEAF_NODE	389:14	389:14	9	proc
ASSIGN_OP	389:19	389:19	7	=
LEAF_NODE	389:19	389:19	8	=
RVAL	389:21	389:21	7	TIFFGetSeekProc ( tif )
FUNCTION_CALL	389:21	389:40	8	TIFFGetSeekProc ( tif )
CALLEE	389:21	389:21	9	TIFFGetSeekProc
LEAF_NODE	389:21	389:21	10	TIFFGetSeekProc
LEAF_NODE	389:36	389:36	9	(
ARGUMENT	389:37	389:37	9	tif
FIELD	389:37	389:37	10	tif
LEAF_NODE	389:37	389:37	11	tif
LEAF_NODE	389:40	389:40	9	)
LEAF_NODE	389:41	389:41	4	;
SELECTION	390:1	391:2	3	
KEYWORD	390:1	390:1	4	if
LEAF_NODE	390:1	390:1	5	if
LEAF_NODE	390:4	390:4	4	(
CONDITION	390:5	390:5	4	proc
EXPR	390:5	390:5	5	proc
FIELD	390:5	390:5	6	proc
LEAF_NODE	390:5	390:5	7	proc
LEAF_NODE	390:9	390:9	4	)
STATEMENTS	391:2	391:2	4	
JUMP_STATEMENT	391:2	391:37	5	return proc ( client , offset , whence ) ;
KEYWORD	391:2	391:2	6	return
LEAF_NODE	391:2	391:2	7	return
DESTINATION	391:9	391:9	6	proc ( client , offset , whence )
EXPR	391:9	391:9	7	proc ( client , offset , whence )
FUNCTION_CALL	391:9	391:36	8	proc ( client , offset , whence )
CALLEE	391:9	391:9	9	proc
LEAF_NODE	391:9	391:9	10	proc
LEAF_NODE	391:13	391:13	9	(
ARGUMENT	391:14	391:14	9	client
FIELD	391:14	391:14	10	client
LEAF_NODE	391:14	391:14	11	client
LEAF_NODE	391:20	391:20	9	,
ARGUMENT	391:22	391:22	9	offset
FIELD	391:22	391:22	10	offset
LEAF_NODE	391:22	391:22	11	offset
LEAF_NODE	391:28	391:28	9	,
ARGUMENT	391:30	391:30	9	whence
FIELD	391:30	391:30	10	whence
LEAF_NODE	391:30	391:30	11	whence
LEAF_NODE	391:36	391:36	9	)
LEAF_NODE	391:37	391:37	6	;
JUMP_STATEMENT	392:1	392:10	3	return - 1 ;
KEYWORD	392:1	392:1	4	return
LEAF_NODE	392:1	392:1	5	return
DESTINATION	392:8	392:8	4	- 1
EXPR	392:8	392:8	5	- 1
UNARY_EXPR	392:8	392:9	6	- 1
UNARY_OPERATOR	392:8	392:8	7	-
LEAF_NODE	392:8	392:8	8	-
FIELD	392:9	392:9	7	1
LEAF_NODE	392:9	392:9	8	1
LEAF_NODE	392:10	392:10	4	;
LEAF_NODE	393:0	393:0	2	}
FUNCTION_DEF	395:0	400:0	1	
RETURN_TYPE	395:0	395:7	2	static tmsize_t
LEAF_NODE	395:0	395:0	3	static
TYPE_NAME	395:7	395:7	3	tmsize_t
LEAF_NODE	395:7	395:7	4	tmsize_t
FUNCTION_NAME	396:0	396:0	2	t2p_readproc
LEAF_NODE	396:0	396:0	3	t2p_readproc
PARAMETER_LIST	396:12	396:58	2	( thandle_t handle , tdata_t data , tmsize_t size )
LEAF_NODE	396:12	396:12	3	(
PARAMETER_DECL	396:13	396:23	3	thandle_t handle
TYPE	396:13	396:13	4	thandle_t
TYPE_NAME	396:13	396:13	5	thandle_t
LEAF_NODE	396:13	396:13	6	thandle_t
NAME	396:23	396:23	4	handle
LEAF_NODE	396:23	396:23	5	handle
LEAF_NODE	396:29	396:29	3	,
PARAMETER_DECL	396:31	396:39	3	tdata_t data
TYPE	396:31	396:31	4	tdata_t
TYPE_NAME	396:31	396:31	5	tdata_t
LEAF_NODE	396:31	396:31	6	tdata_t
NAME	396:39	396:39	4	data
LEAF_NODE	396:39	396:39	5	data
LEAF_NODE	396:43	396:43	3	,
PARAMETER_DECL	396:45	396:54	3	tmsize_t size
TYPE	396:45	396:45	4	tmsize_t
TYPE_NAME	396:45	396:45	5	tmsize_t
LEAF_NODE	396:45	396:45	6	tmsize_t
NAME	396:54	396:54	4	size
LEAF_NODE	396:54	396:54	5	size
LEAF_NODE	396:58	396:58	3	)
LEAF_NODE	397:0	397:0	2	{
STATEMENTS	398:1	399:1	2	
LEAF_NODE	398:1	398:1	3	(
LEAF_NODE	398:2	398:2	3	void
LEAF_NODE	398:6	398:6	3	)
LEAF_NODE	398:8	398:8	3	handle
LEAF_NODE	398:14	398:14	3	,
EXPR_STATEMENT	398:16	398:40	3	( void ) data , ( void ) size ;
EXPR	398:16	398:36	4	( void ) data , ( void ) size
LEAF_NODE	398:16	398:16	5	(
TYPE_NAME	398:17	398:17	5	void
LEAF_NODE	398:17	398:17	6	void
LEAF_NODE	398:21	398:21	5	)
FIELD	398:23	398:23	5	data
LEAF_NODE	398:23	398:23	6	data
LEAF_NODE	398:27	398:27	5	,
LEAF_NODE	398:29	398:29	5	(
TYPE_NAME	398:30	398:30	5	void
LEAF_NODE	398:30	398:30	6	void
LEAF_NODE	398:34	398:34	5	)
FIELD	398:36	398:36	5	size
LEAF_NODE	398:36	398:36	6	size
LEAF_NODE	398:40	398:40	4	;
JUMP_STATEMENT	399:1	399:10	3	return - 1 ;
KEYWORD	399:1	399:1	4	return
LEAF_NODE	399:1	399:1	5	return
DESTINATION	399:8	399:8	4	- 1
EXPR	399:8	399:8	5	- 1
UNARY_EXPR	399:8	399:9	6	- 1
UNARY_OPERATOR	399:8	399:8	7	-
LEAF_NODE	399:8	399:8	8	-
FIELD	399:9	399:9	7	1
LEAF_NODE	399:9	399:9	8	1
LEAF_NODE	399:10	399:10	4	;
LEAF_NODE	400:0	400:0	2	}
FUNCTION_DEF	402:0	412:0	1	
RETURN_TYPE	402:0	402:7	2	static tmsize_t
LEAF_NODE	402:0	402:0	3	static
TYPE_NAME	402:7	402:7	3	tmsize_t
LEAF_NODE	402:7	402:7	4	tmsize_t
FUNCTION_NAME	403:0	403:0	2	t2p_writeproc
LEAF_NODE	403:0	403:0	3	t2p_writeproc
PARAMETER_LIST	403:13	403:59	2	( thandle_t handle , tdata_t data , tmsize_t size )
LEAF_NODE	403:13	403:13	3	(
PARAMETER_DECL	403:14	403:24	3	thandle_t handle
TYPE	403:14	403:14	4	thandle_t
TYPE_NAME	403:14	403:14	5	thandle_t
LEAF_NODE	403:14	403:14	6	thandle_t
NAME	403:24	403:24	4	handle
LEAF_NODE	403:24	403:24	5	handle
LEAF_NODE	403:30	403:30	3	,
PARAMETER_DECL	403:32	403:40	3	tdata_t data
TYPE	403:32	403:32	4	tdata_t
TYPE_NAME	403:32	403:32	5	tdata_t
LEAF_NODE	403:32	403:32	6	tdata_t
NAME	403:40	403:40	4	data
LEAF_NODE	403:40	403:40	5	data
LEAF_NODE	403:44	403:44	3	,
PARAMETER_DECL	403:46	403:55	3	tmsize_t size
TYPE	403:46	403:46	4	tmsize_t
TYPE_NAME	403:46	403:46	5	tmsize_t
LEAF_NODE	403:46	403:46	6	tmsize_t
NAME	403:55	403:55	4	size
LEAF_NODE	403:55	403:55	5	size
LEAF_NODE	403:59	403:59	3	)
LEAF_NODE	404:0	404:0	2	{
STATEMENTS	405:1	411:1	2	
SIMPLE_DECL	405:1	405:25	3	T2P * t2p ; t2p = ( T2P * ) handle ;
VAR_DECL	405:1	405:6	4	T2P * t2p ; t2p = ( T2P * ) handle
TYPE	405:1	405:5	5	T2P *
TYPE_NAME	405:1	405:1	6	T2P
LEAF_NODE	405:1	405:1	7	T2P
POINTER	405:5	405:5	6	*
LEAF_NODE	405:5	405:5	7	*
NAME	405:6	405:6	5	t2p
LEAF_NODE	405:6	405:6	6	t2p
LEAF_NODE	0:0	0:0	5	;
INIT	405:6	405:6	5	t2p = ( T2P * ) handle
ASSIGN	405:6	405:12	6	t2p = ( T2P * ) handle
LVAL	405:6	405:6	7	t2p
NAME	405:6	405:6	8	t2p
LEAF_NODE	405:6	405:6	9	t2p
ASSIGN_OP	405:10	405:10	7	=
LEAF_NODE	405:10	405:10	8	=
RVAL	405:12	405:19	7	( T2P * ) handle
LEAF_NODE	405:12	405:12	8	(
TYPE_NAME	405:13	405:13	8	T2P
LEAF_NODE	405:13	405:13	9	T2P
LEAF_NODE	405:16	405:16	8	*
LEAF_NODE	405:17	405:17	8	)
FIELD	405:19	405:19	8	handle
LEAF_NODE	405:19	405:19	9	handle
LEAF_NODE	405:25	405:25	4	;
SELECTION	406:1	406:49	3	
KEYWORD	406:1	406:1	4	if
LEAF_NODE	406:1	406:1	5	if
LEAF_NODE	406:4	406:4	4	(
CONDITION	406:5	406:5	4	t2p -> outputdisable <= 0 && t2p -> outputfile
EXPR	406:5	406:5	5	t2p -> outputdisable <= 0 && t2p -> outputfile
AND	406:5	406:32	6	t2p -> outputdisable <= 0 && t2p -> outputfile
EXPR	406:5	406:27	7	t2p -> outputdisable <= 0
FIELD	406:5	406:10	8	t2p -> outputdisable
LEAF_NODE	406:5	406:5	9	t2p
LEAF_NODE	406:8	406:8	9	->
LEAF_NODE	406:10	406:10	9	outputdisable
REL_OPERATOR	406:24	406:24	8	<=
LEAF_NODE	406:24	406:24	9	<=
FIELD	406:27	406:27	8	0
LEAF_NODE	406:27	406:27	9	0
LEAF_NODE	406:29	406:29	7	&&
EXPR	406:32	406:32	7	t2p -> outputfile
FIELD	406:32	406:37	8	t2p -> outputfile
LEAF_NODE	406:32	406:32	9	t2p
LEAF_NODE	406:35	406:35	9	->
LEAF_NODE	406:37	406:37	9	outputfile
LEAF_NODE	406:47	406:47	4	)
STATEMENTS	406:49	410:1	4	
LEAF_NODE	406:49	406:49	5	{
STATEMENTS	407:2	409:2	5	
SIMPLE_DECL	407:2	407:58	6	tsize_t written ; written = fwrite ( data , 1 , size , t2p -> outputfile ) ;
VAR_DECL	407:2	407:10	7	tsize_t written ; written = fwrite ( data , 1 , size , t2p -> outputfile )
TYPE	407:2	407:2	8	tsize_t
TYPE_NAME	407:2	407:2	9	tsize_t
LEAF_NODE	407:2	407:2	10	tsize_t
NAME	407:10	407:10	8	written
LEAF_NODE	407:10	407:10	9	written
LEAF_NODE	0:0	0:0	8	;
INIT	407:10	407:10	8	written = fwrite ( data , 1 , size , t2p -> outputfile )
ASSIGN	407:10	407:20	9	written = fwrite ( data , 1 , size , t2p -> outputfile )
LVAL	407:10	407:10	10	written
NAME	407:10	407:10	11	written
LEAF_NODE	407:10	407:10	12	written
ASSIGN_OP	407:18	407:18	10	=
LEAF_NODE	407:18	407:18	11	=
RVAL	407:20	407:20	10	fwrite ( data , 1 , size , t2p -> outputfile )
FUNCTION_CALL	407:20	407:57	11	fwrite ( data , 1 , size , t2p -> outputfile )
CALLEE	407:20	407:20	12	fwrite
LEAF_NODE	407:20	407:20	13	fwrite
LEAF_NODE	407:26	407:26	12	(
ARGUMENT	407:27	407:27	12	data
FIELD	407:27	407:27	13	data
LEAF_NODE	407:27	407:27	14	data
LEAF_NODE	407:31	407:31	12	,
ARGUMENT	407:33	407:33	12	1
FIELD	407:33	407:33	13	1
LEAF_NODE	407:33	407:33	14	1
LEAF_NODE	407:34	407:34	12	,
ARGUMENT	407:36	407:36	12	size
FIELD	407:36	407:36	13	size
LEAF_NODE	407:36	407:36	14	size
LEAF_NODE	407:40	407:40	12	,
ARGUMENT	407:42	407:42	12	t2p -> outputfile
FIELD	407:42	407:47	13	t2p -> outputfile
LEAF_NODE	407:42	407:42	14	t2p
LEAF_NODE	407:45	407:45	14	->
LEAF_NODE	407:47	407:47	14	outputfile
LEAF_NODE	407:57	407:57	12	)
LEAF_NODE	407:58	407:58	7	;
EXPR_STATEMENT	408:2	408:31	6	t2p -> outputwritten += written ;
EXPR	408:2	408:2	7	t2p -> outputwritten += written
ASSIGN	408:2	408:24	8	t2p -> outputwritten += written
LVAL	408:2	408:2	9	t2p -> outputwritten
FIELD	408:2	408:7	10	t2p -> outputwritten
LEAF_NODE	408:2	408:2	11	t2p
LEAF_NODE	408:5	408:5	11	->
LEAF_NODE	408:7	408:7	11	outputwritten
ASSIGN_OP	408:21	408:21	9	+=
LEAF_NODE	408:21	408:21	10	+=
RVAL	408:24	408:24	9	written
FIELD	408:24	408:24	10	written
LEAF_NODE	408:24	408:24	11	written
LEAF_NODE	408:31	408:31	7	;
JUMP_STATEMENT	409:2	409:16	6	return written ;
KEYWORD	409:2	409:2	7	return
LEAF_NODE	409:2	409:2	8	return
DESTINATION	409:9	409:9	7	written
EXPR	409:9	409:9	8	written
FIELD	409:9	409:9	9	written
LEAF_NODE	409:9	409:9	10	written
LEAF_NODE	409:16	409:16	7	;
LEAF_NODE	410:1	410:1	5	}
JUMP_STATEMENT	411:1	411:12	3	return size ;
KEYWORD	411:1	411:1	4	return
LEAF_NODE	411:1	411:1	5	return
DESTINATION	411:8	411:8	4	size
EXPR	411:8	411:8	5	size
FIELD	411:8	411:8	6	size
LEAF_NODE	411:8	411:8	7	size
LEAF_NODE	411:12	411:12	4	;
LEAF_NODE	412:0	412:0	2	}
FUNCTION_DEF	414:0	421:0	1	
RETURN_TYPE	414:0	414:7	2	static uint64
LEAF_NODE	414:0	414:0	3	static
TYPE_NAME	414:7	414:7	3	uint64
LEAF_NODE	414:7	414:7	4	uint64
FUNCTION_NAME	415:0	415:0	2	t2p_seekproc
LEAF_NODE	415:0	415:0	3	t2p_seekproc
PARAMETER_LIST	415:12	415:56	2	( thandle_t handle , uint64 offset , int whence )
LEAF_NODE	415:12	415:12	3	(
PARAMETER_DECL	415:13	415:23	3	thandle_t handle
TYPE	415:13	415:13	4	thandle_t
TYPE_NAME	415:13	415:13	5	thandle_t
LEAF_NODE	415:13	415:13	6	thandle_t
NAME	415:23	415:23	4	handle
LEAF_NODE	415:23	415:23	5	handle
LEAF_NODE	415:29	415:29	3	,
PARAMETER_DECL	415:31	415:38	3	uint64 offset
TYPE	415:31	415:31	4	uint64
TYPE_NAME	415:31	415:31	5	uint64
LEAF_NODE	415:31	415:31	6	uint64
NAME	415:38	415:38	4	offset
LEAF_NODE	415:38	415:38	5	offset
LEAF_NODE	415:44	415:44	3	,
PARAMETER_DECL	415:46	415:50	3	int whence
TYPE	415:46	415:46	4	int
TYPE_NAME	415:46	415:46	5	int
LEAF_NODE	415:46	415:46	6	int
NAME	415:50	415:50	4	whence
LEAF_NODE	415:50	415:50	5	whence
LEAF_NODE	415:56	415:56	3	)
LEAF_NODE	416:0	416:0	2	{
STATEMENTS	417:1	420:1	2	
SIMPLE_DECL	417:1	417:25	3	T2P * t2p ; t2p = ( T2P * ) handle ;
VAR_DECL	417:1	417:6	4	T2P * t2p ; t2p = ( T2P * ) handle
TYPE	417:1	417:5	5	T2P *
TYPE_NAME	417:1	417:1	6	T2P
LEAF_NODE	417:1	417:1	7	T2P
POINTER	417:5	417:5	6	*
LEAF_NODE	417:5	417:5	7	*
NAME	417:6	417:6	5	t2p
LEAF_NODE	417:6	417:6	6	t2p
LEAF_NODE	0:0	0:0	5	;
INIT	417:6	417:6	5	t2p = ( T2P * ) handle
ASSIGN	417:6	417:12	6	t2p = ( T2P * ) handle
LVAL	417:6	417:6	7	t2p
NAME	417:6	417:6	8	t2p
LEAF_NODE	417:6	417:6	9	t2p
ASSIGN_OP	417:10	417:10	7	=
LEAF_NODE	417:10	417:10	8	=
RVAL	417:12	417:19	7	( T2P * ) handle
LEAF_NODE	417:12	417:12	8	(
TYPE_NAME	417:13	417:13	8	T2P
LEAF_NODE	417:13	417:13	9	T2P
LEAF_NODE	417:16	417:16	8	*
LEAF_NODE	417:17	417:17	8	)
FIELD	417:19	417:19	8	handle
LEAF_NODE	417:19	417:19	9	handle
LEAF_NODE	417:25	417:25	4	;
SELECTION	418:1	419:2	3	
KEYWORD	418:1	418:1	4	if
LEAF_NODE	418:1	418:1	5	if
LEAF_NODE	418:4	418:4	4	(
CONDITION	418:5	418:5	4	t2p -> outputdisable <= 0 && t2p -> outputfile
EXPR	418:5	418:5	5	t2p -> outputdisable <= 0 && t2p -> outputfile
AND	418:5	418:32	6	t2p -> outputdisable <= 0 && t2p -> outputfile
EXPR	418:5	418:27	7	t2p -> outputdisable <= 0
FIELD	418:5	418:10	8	t2p -> outputdisable
LEAF_NODE	418:5	418:5	9	t2p
LEAF_NODE	418:8	418:8	9	->
LEAF_NODE	418:10	418:10	9	outputdisable
REL_OPERATOR	418:24	418:24	8	<=
LEAF_NODE	418:24	418:24	9	<=
FIELD	418:27	418:27	8	0
LEAF_NODE	418:27	418:27	9	0
LEAF_NODE	418:29	418:29	7	&&
EXPR	418:32	418:32	7	t2p -> outputfile
FIELD	418:32	418:37	8	t2p -> outputfile
LEAF_NODE	418:32	418:32	9	t2p
LEAF_NODE	418:35	418:35	9	->
LEAF_NODE	418:37	418:37	9	outputfile
LEAF_NODE	418:47	418:47	4	)
STATEMENTS	419:2	419:2	4	
JUMP_STATEMENT	419:2	419:69	5	return _TIFF_fseek_f ( t2p -> outputfile , ( _TIFF_off_t ) offset , whence ) ;
KEYWORD	419:2	419:2	6	return
LEAF_NODE	419:2	419:2	7	return
DESTINATION	419:9	419:9	6	_TIFF_fseek_f ( t2p -> outputfile , ( _TIFF_off_t ) offset , whence )
EXPR	419:9	419:9	7	_TIFF_fseek_f ( t2p -> outputfile , ( _TIFF_off_t ) offset , whence )
FUNCTION_CALL	419:9	419:68	8	_TIFF_fseek_f ( t2p -> outputfile , ( _TIFF_off_t ) offset , whence )
CALLEE	419:9	419:9	9	_TIFF_fseek_f
LEAF_NODE	419:9	419:9	10	_TIFF_fseek_f
LEAF_NODE	419:22	419:22	9	(
ARGUMENT	419:23	419:23	9	t2p -> outputfile
FIELD	419:23	419:28	10	t2p -> outputfile
LEAF_NODE	419:23	419:23	11	t2p
LEAF_NODE	419:26	419:26	11	->
LEAF_NODE	419:28	419:28	11	outputfile
LEAF_NODE	419:38	419:38	9	,
ARGUMENT	419:40	419:54	9	( _TIFF_off_t ) offset
LEAF_NODE	419:40	419:40	10	(
TYPE_NAME	419:41	419:41	10	_TIFF_off_t
LEAF_NODE	419:41	419:41	11	_TIFF_off_t
LEAF_NODE	419:52	419:52	10	)
FIELD	419:54	419:54	10	offset
LEAF_NODE	419:54	419:54	11	offset
LEAF_NODE	419:60	419:60	9	,
ARGUMENT	419:62	419:62	9	whence
FIELD	419:62	419:62	10	whence
LEAF_NODE	419:62	419:62	11	whence
LEAF_NODE	419:68	419:68	9	)
LEAF_NODE	419:69	419:69	6	;
JUMP_STATEMENT	420:1	420:14	3	return offset ;
KEYWORD	420:1	420:1	4	return
LEAF_NODE	420:1	420:1	5	return
DESTINATION	420:8	420:8	4	offset
EXPR	420:8	420:8	5	offset
FIELD	420:8	420:8	6	offset
LEAF_NODE	420:8	420:8	7	offset
LEAF_NODE	420:14	420:14	4	;
LEAF_NODE	421:0	421:0	2	}
FUNCTION_DEF	423:0	428:0	1	
RETURN_TYPE	423:0	423:7	2	static int
LEAF_NODE	423:0	423:0	3	static
TYPE_NAME	423:7	423:7	3	int
LEAF_NODE	423:7	423:7	4	int
FUNCTION_NAME	424:0	424:0	2	t2p_closeproc
LEAF_NODE	424:0	424:0	3	t2p_closeproc
PARAMETER_LIST	424:13	424:30	2	( thandle_t handle )
LEAF_NODE	424:13	424:13	3	(
PARAMETER_DECL	424:14	424:24	3	thandle_t handle
TYPE	424:14	424:14	4	thandle_t
TYPE_NAME	424:14	424:14	5	thandle_t
LEAF_NODE	424:14	424:14	6	thandle_t
NAME	424:24	424:24	4	handle
LEAF_NODE	424:24	424:24	5	handle
LEAF_NODE	424:30	424:30	3	)
LEAF_NODE	425:0	425:0	2	{
STATEMENTS	426:1	427:1	2	
SIMPLE_DECL	426:1	426:25	3	T2P * t2p ; t2p = ( T2P * ) handle ;
VAR_DECL	426:1	426:6	4	T2P * t2p ; t2p = ( T2P * ) handle
TYPE	426:1	426:5	5	T2P *
TYPE_NAME	426:1	426:1	6	T2P
LEAF_NODE	426:1	426:1	7	T2P
POINTER	426:5	426:5	6	*
LEAF_NODE	426:5	426:5	7	*
NAME	426:6	426:6	5	t2p
LEAF_NODE	426:6	426:6	6	t2p
LEAF_NODE	0:0	0:0	5	;
INIT	426:6	426:6	5	t2p = ( T2P * ) handle
ASSIGN	426:6	426:12	6	t2p = ( T2P * ) handle
LVAL	426:6	426:6	7	t2p
NAME	426:6	426:6	8	t2p
LEAF_NODE	426:6	426:6	9	t2p
ASSIGN_OP	426:10	426:10	7	=
LEAF_NODE	426:10	426:10	8	=
RVAL	426:12	426:19	7	( T2P * ) handle
LEAF_NODE	426:12	426:12	8	(
TYPE_NAME	426:13	426:13	8	T2P
LEAF_NODE	426:13	426:13	9	T2P
LEAF_NODE	426:16	426:16	8	*
LEAF_NODE	426:17	426:17	8	)
FIELD	426:19	426:19	8	handle
LEAF_NODE	426:19	426:19	9	handle
LEAF_NODE	426:25	426:25	4	;
JUMP_STATEMENT	427:1	427:31	3	return fclose ( t2p -> outputfile ) ;
KEYWORD	427:1	427:1	4	return
LEAF_NODE	427:1	427:1	5	return
DESTINATION	427:8	427:8	4	fclose ( t2p -> outputfile )
EXPR	427:8	427:8	5	fclose ( t2p -> outputfile )
FUNCTION_CALL	427:8	427:30	6	fclose ( t2p -> outputfile )
CALLEE	427:8	427:8	7	fclose
LEAF_NODE	427:8	427:8	8	fclose
LEAF_NODE	427:14	427:14	7	(
ARGUMENT	427:15	427:15	7	t2p -> outputfile
FIELD	427:15	427:20	8	t2p -> outputfile
LEAF_NODE	427:15	427:15	9	t2p
LEAF_NODE	427:18	427:18	9	->
LEAF_NODE	427:20	427:20	9	outputfile
LEAF_NODE	427:30	427:30	7	)
LEAF_NODE	427:31	427:31	4	;
LEAF_NODE	428:0	428:0	2	}
FUNCTION_DEF	430:0	435:0	1	
RETURN_TYPE	430:0	430:7	2	static uint64
LEAF_NODE	430:0	430:0	3	static
TYPE_NAME	430:7	430:7	3	uint64
LEAF_NODE	430:7	430:7	4	uint64
FUNCTION_NAME	431:0	431:0	2	t2p_sizeproc
LEAF_NODE	431:0	431:0	3	t2p_sizeproc
PARAMETER_LIST	431:12	431:29	2	( thandle_t handle )
LEAF_NODE	431:12	431:12	3	(
PARAMETER_DECL	431:13	431:23	3	thandle_t handle
TYPE	431:13	431:13	4	thandle_t
TYPE_NAME	431:13	431:13	5	thandle_t
LEAF_NODE	431:13	431:13	6	thandle_t
NAME	431:23	431:23	4	handle
LEAF_NODE	431:23	431:23	5	handle
LEAF_NODE	431:29	431:29	3	)
LEAF_NODE	432:0	432:0	2	{
STATEMENTS	433:1	434:1	2	
EXPR_STATEMENT	433:1	433:14	3	( void ) handle ;
EXPR	433:1	433:8	4	( void ) handle
LEAF_NODE	433:1	433:1	5	(
TYPE_NAME	433:2	433:2	5	void
LEAF_NODE	433:2	433:2	6	void
LEAF_NODE	433:6	433:6	5	)
FIELD	433:8	433:8	5	handle
LEAF_NODE	433:8	433:8	6	handle
LEAF_NODE	433:14	433:14	4	;
JUMP_STATEMENT	434:1	434:10	3	return - 1 ;
KEYWORD	434:1	434:1	4	return
LEAF_NODE	434:1	434:1	5	return
DESTINATION	434:8	434:8	4	- 1
EXPR	434:8	434:8	5	- 1
UNARY_EXPR	434:8	434:9	6	- 1
UNARY_OPERATOR	434:8	434:8	7	-
LEAF_NODE	434:8	434:8	8	-
FIELD	434:9	434:9	7	1
LEAF_NODE	434:9	434:9	8	1
LEAF_NODE	434:10	434:10	4	;
LEAF_NODE	435:0	435:0	2	}
FUNCTION_DEF	437:0	442:0	1	
RETURN_TYPE	437:0	437:7	2	static int
LEAF_NODE	437:0	437:0	3	static
TYPE_NAME	437:7	437:7	3	int
LEAF_NODE	437:7	437:7	4	int
FUNCTION_NAME	438:0	438:0	2	t2p_mapproc
LEAF_NODE	438:0	438:0	3	t2p_mapproc
PARAMETER_LIST	438:11	438:57	2	( thandle_t handle , void * * data , toff_t * offset )
LEAF_NODE	438:11	438:11	3	(
PARAMETER_DECL	438:12	438:22	3	thandle_t handle
TYPE	438:12	438:12	4	thandle_t
TYPE_NAME	438:12	438:12	5	thandle_t
LEAF_NODE	438:12	438:12	6	thandle_t
NAME	438:22	438:22	4	handle
LEAF_NODE	438:22	438:22	5	handle
LEAF_NODE	438:28	438:28	3	,
PARAMETER_DECL	438:30	438:37	3	void * * data
TYPE	438:30	438:35	4	void * *
TYPE_NAME	438:30	438:30	5	void
LEAF_NODE	438:30	438:30	6	void
POINTER	438:35	438:36	5	* *
LEAF_NODE	438:35	438:35	6	*
LEAF_NODE	438:36	438:36	6	*
NAME	438:37	438:37	4	data
LEAF_NODE	438:37	438:37	5	data
LEAF_NODE	438:41	438:41	3	,
PARAMETER_DECL	438:43	438:51	3	toff_t * offset
TYPE	438:43	438:50	4	toff_t *
TYPE_NAME	438:43	438:43	5	toff_t
LEAF_NODE	438:43	438:43	6	toff_t
POINTER	438:50	438:50	5	*
LEAF_NODE	438:50	438:50	6	*
NAME	438:51	438:51	4	offset
LEAF_NODE	438:51	438:51	5	offset
LEAF_NODE	438:57	438:57	3	)
LEAF_NODE	439:0	439:0	2	{
STATEMENTS	440:1	441:1	2	
LEAF_NODE	440:1	440:1	3	(
LEAF_NODE	440:2	440:2	3	void
LEAF_NODE	440:6	440:6	3	)
LEAF_NODE	440:8	440:8	3	handle
LEAF_NODE	440:14	440:14	3	,
EXPR_STATEMENT	440:16	440:42	3	( void ) data , ( void ) offset ;
EXPR	440:16	440:36	4	( void ) data , ( void ) offset
LEAF_NODE	440:16	440:16	5	(
TYPE_NAME	440:17	440:17	5	void
LEAF_NODE	440:17	440:17	6	void
LEAF_NODE	440:21	440:21	5	)
FIELD	440:23	440:23	5	data
LEAF_NODE	440:23	440:23	6	data
LEAF_NODE	440:27	440:27	5	,
LEAF_NODE	440:29	440:29	5	(
TYPE_NAME	440:30	440:30	5	void
LEAF_NODE	440:30	440:30	6	void
LEAF_NODE	440:34	440:34	5	)
FIELD	440:36	440:36	5	offset
LEAF_NODE	440:36	440:36	6	offset
LEAF_NODE	440:42	440:42	4	;
JUMP_STATEMENT	441:1	441:10	3	return - 1 ;
KEYWORD	441:1	441:1	4	return
LEAF_NODE	441:1	441:1	5	return
DESTINATION	441:8	441:8	4	- 1
EXPR	441:8	441:8	5	- 1
UNARY_EXPR	441:8	441:9	6	- 1
UNARY_OPERATOR	441:8	441:8	7	-
LEAF_NODE	441:8	441:8	8	-
FIELD	441:9	441:9	7	1
LEAF_NODE	441:9	441:9	8	1
LEAF_NODE	441:10	441:10	4	;
LEAF_NODE	442:0	442:0	2	}
FUNCTION_DEF	444:0	448:0	1	
RETURN_TYPE	444:0	444:7	2	static void
LEAF_NODE	444:0	444:0	3	static
TYPE_NAME	444:7	444:7	3	void
LEAF_NODE	444:7	444:7	4	void
FUNCTION_NAME	445:0	445:0	2	t2p_unmapproc
LEAF_NODE	445:0	445:0	3	t2p_unmapproc
PARAMETER_LIST	445:13	445:57	2	( thandle_t handle , void * data , toff_t offset )
LEAF_NODE	445:13	445:13	3	(
PARAMETER_DECL	445:14	445:24	3	thandle_t handle
TYPE	445:14	445:14	4	thandle_t
TYPE_NAME	445:14	445:14	5	thandle_t
LEAF_NODE	445:14	445:14	6	thandle_t
NAME	445:24	445:24	4	handle
LEAF_NODE	445:24	445:24	5	handle
LEAF_NODE	445:30	445:30	3	,
PARAMETER_DECL	445:32	445:38	3	void * data
TYPE	445:32	445:37	4	void *
TYPE_NAME	445:32	445:32	5	void
LEAF_NODE	445:32	445:32	6	void
POINTER	445:37	445:37	5	*
LEAF_NODE	445:37	445:37	6	*
NAME	445:38	445:38	4	data
LEAF_NODE	445:38	445:38	5	data
LEAF_NODE	445:42	445:42	3	,
PARAMETER_DECL	445:44	445:51	3	toff_t offset
TYPE	445:44	445:44	4	toff_t
TYPE_NAME	445:44	445:44	5	toff_t
LEAF_NODE	445:44	445:44	6	toff_t
NAME	445:51	445:51	4	offset
LEAF_NODE	445:51	445:51	5	offset
LEAF_NODE	445:57	445:57	3	)
LEAF_NODE	446:0	446:0	2	{
STATEMENTS	447:1	447:16	2	
LEAF_NODE	447:1	447:1	3	(
LEAF_NODE	447:2	447:2	3	void
LEAF_NODE	447:6	447:6	3	)
LEAF_NODE	447:8	447:8	3	handle
LEAF_NODE	447:14	447:14	3	,
EXPR_STATEMENT	447:16	447:42	3	( void ) data , ( void ) offset ;
EXPR	447:16	447:36	4	( void ) data , ( void ) offset
LEAF_NODE	447:16	447:16	5	(
TYPE_NAME	447:17	447:17	5	void
LEAF_NODE	447:17	447:17	6	void
LEAF_NODE	447:21	447:21	5	)
FIELD	447:23	447:23	5	data
LEAF_NODE	447:23	447:23	6	data
LEAF_NODE	447:27	447:27	5	,
LEAF_NODE	447:29	447:29	5	(
TYPE_NAME	447:30	447:30	5	void
LEAF_NODE	447:30	447:30	6	void
LEAF_NODE	447:34	447:34	5	)
FIELD	447:36	447:36	5	offset
LEAF_NODE	447:36	447:36	6	offset
LEAF_NODE	447:42	447:42	4	;
LEAF_NODE	448:0	448:0	2	}
FUNCTION_DEF	451:0	463:0	1	
RETURN_TYPE	451:0	451:7	2	static uint64
LEAF_NODE	451:0	451:0	3	static
TYPE_NAME	451:7	451:7	3	uint64
LEAF_NODE	451:7	451:7	4	uint64
FUNCTION_NAME	452:0	452:0	2	checkAdd64
LEAF_NODE	452:0	452:0	3	checkAdd64
PARAMETER_LIST	452:10	452:53	2	( uint64 summand1 , uint64 summand2 , T2P * t2p )
LEAF_NODE	452:10	452:10	3	(
PARAMETER_DECL	452:11	452:18	3	uint64 summand1
TYPE	452:11	452:11	4	uint64
TYPE_NAME	452:11	452:11	5	uint64
LEAF_NODE	452:11	452:11	6	uint64
NAME	452:18	452:18	4	summand1
LEAF_NODE	452:18	452:18	5	summand1
LEAF_NODE	452:26	452:26	3	,
PARAMETER_DECL	452:28	452:35	3	uint64 summand2
TYPE	452:28	452:28	4	uint64
TYPE_NAME	452:28	452:28	5	uint64
LEAF_NODE	452:28	452:28	6	uint64
NAME	452:35	452:35	4	summand2
LEAF_NODE	452:35	452:35	5	summand2
LEAF_NODE	452:43	452:43	3	,
PARAMETER_DECL	452:45	452:50	3	T2P * t2p
TYPE	452:45	452:48	4	T2P *
TYPE_NAME	452:45	452:45	5	T2P
LEAF_NODE	452:45	452:45	6	T2P
POINTER	452:48	452:48	5	*
LEAF_NODE	452:48	452:48	6	*
NAME	452:50	452:50	4	t2p
LEAF_NODE	452:50	452:50	5	t2p
LEAF_NODE	452:53	452:53	3	)
LEAF_NODE	453:0	453:0	2	{
STATEMENTS	454:1	462:1	2	
SIMPLE_DECL	454:1	454:35	3	uint64 bytes ; bytes = summand1 + summand2 ;
VAR_DECL	454:1	454:8	4	uint64 bytes ; bytes = summand1 + summand2
TYPE	454:1	454:1	5	uint64
TYPE_NAME	454:1	454:1	6	uint64
LEAF_NODE	454:1	454:1	7	uint64
NAME	454:8	454:8	5	bytes
LEAF_NODE	454:8	454:8	6	bytes
LEAF_NODE	0:0	0:0	5	;
INIT	454:8	454:8	5	bytes = summand1 + summand2
ASSIGN	454:8	454:16	6	bytes = summand1 + summand2
LVAL	454:8	454:8	7	bytes
NAME	454:8	454:8	8	bytes
LEAF_NODE	454:8	454:8	9	bytes
ASSIGN_OP	454:14	454:14	7	=
LEAF_NODE	454:14	454:14	8	=
RVAL	454:16	454:27	7	summand1 + summand2
FIELD	454:16	454:16	8	summand1
LEAF_NODE	454:16	454:16	9	summand1
LEAF_NODE	454:25	454:25	8	+
FIELD	454:27	454:27	8	summand2
LEAF_NODE	454:27	454:27	9	summand2
LEAF_NODE	454:35	454:35	4	;
SELECTION	456:1	456:23	3	
KEYWORD	456:1	456:1	4	if
LEAF_NODE	456:1	456:1	5	if
LEAF_NODE	456:4	456:4	4	(
CONDITION	456:5	456:5	4	bytes < summand1
EXPR	456:5	456:13	5	bytes < summand1
FIELD	456:5	456:5	6	bytes
LEAF_NODE	456:5	456:5	7	bytes
REL_OPERATOR	456:11	456:11	6	<
LEAF_NODE	456:11	456:11	7	<
FIELD	456:13	456:13	6	summand1
LEAF_NODE	456:13	456:13	7	summand1
LEAF_NODE	456:21	456:21	4	)
STATEMENTS	456:23	460:1	4	
LEAF_NODE	456:23	456:23	5	{
STATEMENTS	457:2	459:2	5	
EXPR_STATEMENT	457:2	457:48	6	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	457:2	457:2	7	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	457:2	457:47	8	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	457:2	457:2	9	TIFFError
LEAF_NODE	457:2	457:2	10	TIFFError
LEAF_NODE	457:11	457:11	9	(
ARGUMENT	457:12	457:12	9	TIFF2PDF_MODULE
FIELD	457:12	457:12	10	TIFF2PDF_MODULE
LEAF_NODE	457:12	457:12	11	TIFF2PDF_MODULE
LEAF_NODE	457:27	457:27	9	,
ARGUMENT	457:29	457:29	9	"Integer overflow"
FIELD	457:29	457:29	10	"Integer overflow"
LEAF_NODE	457:29	457:29	11	"Integer overflow"
LEAF_NODE	457:47	457:47	9	)
LEAF_NODE	457:48	457:48	7	;
EXPR_STATEMENT	458:2	458:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	458:2	458:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	458:2	458:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	458:2	458:2	9	t2p -> t2p_error
FIELD	458:2	458:7	10	t2p -> t2p_error
LEAF_NODE	458:2	458:2	11	t2p
LEAF_NODE	458:5	458:5	11	->
LEAF_NODE	458:7	458:7	11	t2p_error
ASSIGN_OP	458:17	458:17	9	=
LEAF_NODE	458:17	458:17	10	=
RVAL	458:19	458:19	9	T2P_ERR_ERROR
FIELD	458:19	458:19	10	T2P_ERR_ERROR
LEAF_NODE	458:19	458:19	11	T2P_ERR_ERROR
LEAF_NODE	458:32	458:32	7	;
EXPR_STATEMENT	459:2	459:11	6	bytes = 0 ;
EXPR	459:2	459:2	7	bytes = 0
ASSIGN	459:2	459:10	8	bytes = 0
LVAL	459:2	459:2	9	bytes
FIELD	459:2	459:2	10	bytes
LEAF_NODE	459:2	459:2	11	bytes
ASSIGN_OP	459:8	459:8	9	=
LEAF_NODE	459:8	459:8	10	=
RVAL	459:10	459:10	9	0
FIELD	459:10	459:10	10	0
LEAF_NODE	459:10	459:10	11	0
LEAF_NODE	459:11	459:11	7	;
LEAF_NODE	460:1	460:1	5	}
JUMP_STATEMENT	462:1	462:13	3	return bytes ;
KEYWORD	462:1	462:1	4	return
LEAF_NODE	462:1	462:1	5	return
DESTINATION	462:8	462:8	4	bytes
EXPR	462:8	462:8	5	bytes
FIELD	462:8	462:8	6	bytes
LEAF_NODE	462:8	462:8	7	bytes
LEAF_NODE	462:13	462:13	4	;
LEAF_NODE	463:0	463:0	2	}
FUNCTION_DEF	466:0	478:0	1	
RETURN_TYPE	466:0	466:7	2	static uint64
LEAF_NODE	466:0	466:0	3	static
TYPE_NAME	466:7	466:7	3	uint64
LEAF_NODE	466:7	466:7	4	uint64
FUNCTION_NAME	467:0	467:0	2	checkMultiply64
LEAF_NODE	467:0	467:0	3	checkMultiply64
PARAMETER_LIST	467:15	467:53	2	( uint64 first , uint64 second , T2P * t2p )
LEAF_NODE	467:15	467:15	3	(
PARAMETER_DECL	467:16	467:23	3	uint64 first
TYPE	467:16	467:16	4	uint64
TYPE_NAME	467:16	467:16	5	uint64
LEAF_NODE	467:16	467:16	6	uint64
NAME	467:23	467:23	4	first
LEAF_NODE	467:23	467:23	5	first
LEAF_NODE	467:28	467:28	3	,
PARAMETER_DECL	467:30	467:37	3	uint64 second
TYPE	467:30	467:30	4	uint64
TYPE_NAME	467:30	467:30	5	uint64
LEAF_NODE	467:30	467:30	6	uint64
NAME	467:37	467:37	4	second
LEAF_NODE	467:37	467:37	5	second
LEAF_NODE	467:43	467:43	3	,
PARAMETER_DECL	467:45	467:50	3	T2P * t2p
TYPE	467:45	467:48	4	T2P *
TYPE_NAME	467:45	467:45	5	T2P
LEAF_NODE	467:45	467:45	6	T2P
POINTER	467:48	467:48	5	*
LEAF_NODE	467:48	467:48	6	*
NAME	467:50	467:50	4	t2p
LEAF_NODE	467:50	467:50	5	t2p
LEAF_NODE	467:53	467:53	3	)
LEAF_NODE	468:0	468:0	2	{
STATEMENTS	469:1	477:1	2	
SIMPLE_DECL	469:1	469:30	3	uint64 bytes ; bytes = first * second ;
VAR_DECL	469:1	469:8	4	uint64 bytes ; bytes = first * second
TYPE	469:1	469:1	5	uint64
TYPE_NAME	469:1	469:1	6	uint64
LEAF_NODE	469:1	469:1	7	uint64
NAME	469:8	469:8	5	bytes
LEAF_NODE	469:8	469:8	6	bytes
LEAF_NODE	0:0	0:0	5	;
INIT	469:8	469:8	5	bytes = first * second
ASSIGN	469:8	469:16	6	bytes = first * second
LVAL	469:8	469:8	7	bytes
NAME	469:8	469:8	8	bytes
LEAF_NODE	469:8	469:8	9	bytes
ASSIGN_OP	469:14	469:14	7	=
LEAF_NODE	469:14	469:14	8	=
RVAL	469:16	469:24	7	first * second
FIELD	469:16	469:16	8	first
LEAF_NODE	469:16	469:16	9	first
LEAF_NODE	469:22	469:22	8	*
FIELD	469:24	469:24	8	second
LEAF_NODE	469:24	469:24	9	second
LEAF_NODE	469:30	469:30	4	;
SELECTION	471:1	471:40	3	
KEYWORD	471:1	471:1	4	if
LEAF_NODE	471:1	471:1	5	if
LEAF_NODE	471:4	471:4	4	(
CONDITION	471:5	471:5	4	second && bytes / second != first
EXPR	471:5	471:5	5	second && bytes / second != first
AND	471:5	471:15	6	second && bytes / second != first
EXPR	471:5	471:5	7	second
FIELD	471:5	471:5	8	second
LEAF_NODE	471:5	471:5	9	second
LEAF_NODE	471:12	471:12	7	&&
EXPR	471:15	471:33	7	bytes / second != first
FIELD	471:15	471:15	8	bytes
LEAF_NODE	471:15	471:15	9	bytes
LEAF_NODE	471:21	471:21	8	/
FIELD	471:23	471:23	8	second
LEAF_NODE	471:23	471:23	9	second
EQ_OPERATOR	471:30	471:30	8	!=
LEAF_NODE	471:30	471:30	9	!=
FIELD	471:33	471:33	8	first
LEAF_NODE	471:33	471:33	9	first
LEAF_NODE	471:38	471:38	4	)
STATEMENTS	471:40	475:1	4	
LEAF_NODE	471:40	471:40	5	{
STATEMENTS	472:2	474:2	5	
EXPR_STATEMENT	472:2	472:48	6	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	472:2	472:2	7	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	472:2	472:47	8	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	472:2	472:2	9	TIFFError
LEAF_NODE	472:2	472:2	10	TIFFError
LEAF_NODE	472:11	472:11	9	(
ARGUMENT	472:12	472:12	9	TIFF2PDF_MODULE
FIELD	472:12	472:12	10	TIFF2PDF_MODULE
LEAF_NODE	472:12	472:12	11	TIFF2PDF_MODULE
LEAF_NODE	472:27	472:27	9	,
ARGUMENT	472:29	472:29	9	"Integer overflow"
FIELD	472:29	472:29	10	"Integer overflow"
LEAF_NODE	472:29	472:29	11	"Integer overflow"
LEAF_NODE	472:47	472:47	9	)
LEAF_NODE	472:48	472:48	7	;
EXPR_STATEMENT	473:2	473:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	473:2	473:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	473:2	473:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	473:2	473:2	9	t2p -> t2p_error
FIELD	473:2	473:7	10	t2p -> t2p_error
LEAF_NODE	473:2	473:2	11	t2p
LEAF_NODE	473:5	473:5	11	->
LEAF_NODE	473:7	473:7	11	t2p_error
ASSIGN_OP	473:17	473:17	9	=
LEAF_NODE	473:17	473:17	10	=
RVAL	473:19	473:19	9	T2P_ERR_ERROR
FIELD	473:19	473:19	10	T2P_ERR_ERROR
LEAF_NODE	473:19	473:19	11	T2P_ERR_ERROR
LEAF_NODE	473:32	473:32	7	;
EXPR_STATEMENT	474:2	474:11	6	bytes = 0 ;
EXPR	474:2	474:2	7	bytes = 0
ASSIGN	474:2	474:10	8	bytes = 0
LVAL	474:2	474:2	9	bytes
FIELD	474:2	474:2	10	bytes
LEAF_NODE	474:2	474:2	11	bytes
ASSIGN_OP	474:8	474:8	9	=
LEAF_NODE	474:8	474:8	10	=
RVAL	474:10	474:10	9	0
FIELD	474:10	474:10	10	0
LEAF_NODE	474:10	474:10	11	0
LEAF_NODE	474:11	474:11	7	;
LEAF_NODE	475:1	475:1	5	}
JUMP_STATEMENT	477:1	477:13	3	return bytes ;
KEYWORD	477:1	477:1	4	return
LEAF_NODE	477:1	477:1	5	return
DESTINATION	477:8	477:8	4	bytes
EXPR	477:8	477:8	5	bytes
FIELD	477:8	477:8	6	bytes
LEAF_NODE	477:8	477:8	7	bytes
LEAF_NODE	477:13	477:13	4	;
LEAF_NODE	478:0	478:0	2	}
FUNCTION_DEF	601:0	829:0	1	
RETURN_TYPE	601:0	601:0	2	int
TYPE_NAME	601:0	601:0	3	int
LEAF_NODE	601:0	601:0	4	int
FUNCTION_NAME	601:4	601:4	2	main
LEAF_NODE	601:4	601:4	3	main
PARAMETER_LIST	601:8	601:30	2	( int argc , char * * argv )
LEAF_NODE	601:8	601:8	3	(
PARAMETER_DECL	601:9	601:13	3	int argc
TYPE	601:9	601:9	4	int
TYPE_NAME	601:9	601:9	5	int
LEAF_NODE	601:9	601:9	6	int
NAME	601:13	601:13	4	argc
LEAF_NODE	601:13	601:13	5	argc
LEAF_NODE	601:17	601:17	3	,
PARAMETER_DECL	601:19	601:26	3	char * * argv
TYPE	601:19	601:23	4	char * *
TYPE_NAME	601:19	601:19	5	char
LEAF_NODE	601:19	601:19	6	char
POINTER	601:23	601:24	5	* *
LEAF_NODE	601:23	601:23	6	*
LEAF_NODE	601:24	601:24	6	*
NAME	601:26	601:26	4	argv
LEAF_NODE	601:26	601:26	5	argv
LEAF_NODE	601:30	601:30	3	)
LEAF_NODE	601:31	601:31	2	{
STATEMENTS	603:1	827:1	2	
LEAF_NODE	603:1	603:1	3	extern
SIMPLE_DECL	603:8	603:20	3	char * optarg ;
VAR_DECL	603:8	603:14	4	char * optarg
TYPE	603:8	603:13	5	char *
TYPE_NAME	603:8	603:8	6	char
LEAF_NODE	603:8	603:8	7	char
POINTER	603:13	603:13	6	*
LEAF_NODE	603:13	603:13	7	*
NAME	603:14	603:14	5	optarg
LEAF_NODE	603:14	603:14	6	optarg
LEAF_NODE	603:20	603:20	4	;
LEAF_NODE	604:1	604:1	3	extern
SIMPLE_DECL	604:8	604:18	3	int optind ;
VAR_DECL	604:8	604:12	4	int optind
TYPE	604:8	604:8	5	int
TYPE_NAME	604:8	604:8	6	int
LEAF_NODE	604:8	604:8	7	int
NAME	604:12	604:12	5	optind
LEAF_NODE	604:12	604:12	6	optind
LEAF_NODE	604:18	604:18	4	;
SIMPLE_DECL	606:1	606:31	3	const char * outfilename ; outfilename = NULL ;
VAR_DECL	606:1	606:13	4	const char * outfilename ; outfilename = NULL
TYPE	606:1	606:12	5	const char *
TYPE_NAME	606:1	606:7	6	const char
LEAF_NODE	606:1	606:1	7	const
LEAF_NODE	606:7	606:7	7	char
POINTER	606:12	606:12	6	*
LEAF_NODE	606:12	606:12	7	*
NAME	606:13	606:13	5	outfilename
LEAF_NODE	606:13	606:13	6	outfilename
LEAF_NODE	0:0	0:0	5	;
INIT	606:13	606:13	5	outfilename = NULL
ASSIGN	606:13	606:27	6	outfilename = NULL
LVAL	606:13	606:13	7	outfilename
NAME	606:13	606:13	8	outfilename
LEAF_NODE	606:13	606:13	9	outfilename
ASSIGN_OP	606:25	606:25	7	=
LEAF_NODE	606:25	606:25	8	=
RVAL	606:27	606:27	7	NULL
FIELD	606:27	606:27	8	NULL
LEAF_NODE	606:27	606:27	9	NULL
LEAF_NODE	606:31	606:31	4	;
SIMPLE_DECL	607:1	607:16	3	T2P * t2p ; t2p = NULL ;
VAR_DECL	607:1	607:6	4	T2P * t2p ; t2p = NULL
TYPE	607:1	607:5	5	T2P *
TYPE_NAME	607:1	607:1	6	T2P
LEAF_NODE	607:1	607:1	7	T2P
POINTER	607:5	607:5	6	*
LEAF_NODE	607:5	607:5	7	*
NAME	607:6	607:6	5	t2p
LEAF_NODE	607:6	607:6	6	t2p
LEAF_NODE	0:0	0:0	5	;
INIT	607:6	607:6	5	t2p = NULL
ASSIGN	607:6	607:12	6	t2p = NULL
LVAL	607:6	607:6	7	t2p
NAME	607:6	607:6	8	t2p
LEAF_NODE	607:6	607:6	9	t2p
ASSIGN_OP	607:10	607:10	7	=
LEAF_NODE	607:10	607:10	8	=
RVAL	607:12	607:12	7	NULL
FIELD	607:12	607:12	8	NULL
LEAF_NODE	607:12	607:12	9	NULL
LEAF_NODE	607:16	607:16	4	;
SIMPLE_DECL	608:1	608:35	3	TIFF * input ; input = NULL , TIFF * output ; output = NULL ;
INIT_DECL_LIST	608:1	608:1	4	TIFF * input ; input = NULL , TIFF * output ; output = NULL
VAR_DECL	608:1	608:7	5	TIFF * input ; input = NULL
TYPE	608:1	608:6	6	TIFF *
TYPE_NAME	608:1	608:1	7	TIFF
LEAF_NODE	608:1	608:1	8	TIFF
POINTER	608:6	608:6	7	*
LEAF_NODE	608:6	608:6	8	*
NAME	608:7	608:7	6	input
LEAF_NODE	608:7	608:7	7	input
LEAF_NODE	0:0	0:0	6	;
INIT	608:7	608:7	6	input = NULL
ASSIGN	608:7	608:15	7	input = NULL
LVAL	608:7	608:7	8	input
NAME	608:7	608:7	9	input
LEAF_NODE	608:7	608:7	10	input
ASSIGN_OP	608:13	608:13	8	=
LEAF_NODE	608:13	608:13	9	=
RVAL	608:15	608:15	8	NULL
FIELD	608:15	608:15	9	NULL
LEAF_NODE	608:15	608:15	10	NULL
LEAF_NODE	608:19	608:19	5	,
VAR_DECL	608:1	608:22	5	TIFF * output ; output = NULL
TYPE	608:1	608:21	6	TIFF *
TYPE_NAME	608:1	608:1	7	TIFF
LEAF_NODE	608:1	608:1	8	TIFF
POINTER	608:21	608:21	7	*
LEAF_NODE	608:21	608:21	8	*
NAME	608:22	608:22	6	output
LEAF_NODE	608:22	608:22	7	output
LEAF_NODE	0:0	0:0	6	;
INIT	608:22	608:22	6	output = NULL
ASSIGN	608:22	608:31	7	output = NULL
LVAL	608:22	608:22	8	output
NAME	608:22	608:22	9	output
LEAF_NODE	608:22	608:22	10	output
ASSIGN_OP	608:29	608:29	8	=
LEAF_NODE	608:29	608:29	9	=
RVAL	608:31	608:31	8	NULL
FIELD	608:31	608:31	9	NULL
LEAF_NODE	608:31	608:31	10	NULL
LEAF_NODE	608:35	608:35	4	;
SIMPLE_DECL	609:1	609:26	3	int c , int ret ; ret = EXIT_SUCCESS ;
INIT_DECL_LIST	609:1	609:1	4	int c , int ret ; ret = EXIT_SUCCESS
VAR_DECL	609:1	609:5	5	int c
TYPE	609:1	609:1	6	int
TYPE_NAME	609:1	609:1	7	int
LEAF_NODE	609:1	609:1	8	int
NAME	609:5	609:5	6	c
LEAF_NODE	609:5	609:5	7	c
LEAF_NODE	609:6	609:6	5	,
VAR_DECL	609:1	609:8	5	int ret ; ret = EXIT_SUCCESS
TYPE	609:1	609:1	6	int
TYPE_NAME	609:1	609:1	7	int
LEAF_NODE	609:1	609:1	8	int
NAME	609:8	609:8	6	ret
LEAF_NODE	609:8	609:8	7	ret
LEAF_NODE	0:0	0:0	6	;
INIT	609:8	609:8	6	ret = EXIT_SUCCESS
ASSIGN	609:8	609:14	7	ret = EXIT_SUCCESS
LVAL	609:8	609:8	8	ret
NAME	609:8	609:8	9	ret
LEAF_NODE	609:8	609:8	10	ret
ASSIGN_OP	609:12	609:12	8	=
LEAF_NODE	609:12	609:12	9	=
RVAL	609:14	609:14	8	EXIT_SUCCESS
FIELD	609:14	609:14	9	EXIT_SUCCESS
LEAF_NODE	609:14	609:14	10	EXIT_SUCCESS
LEAF_NODE	609:26	609:26	4	;
EXPR_STATEMENT	611:1	611:17	3	t2p = t2p_init ( ) ;
EXPR	611:1	611:1	4	t2p = t2p_init ( )
ASSIGN	611:1	611:7	5	t2p = t2p_init ( )
LVAL	611:1	611:1	6	t2p
FIELD	611:1	611:1	7	t2p
LEAF_NODE	611:1	611:1	8	t2p
ASSIGN_OP	611:5	611:5	6	=
LEAF_NODE	611:5	611:5	7	=
RVAL	611:7	611:7	6	t2p_init ( )
FUNCTION_CALL	611:7	611:16	7	t2p_init ( )
CALLEE	611:7	611:7	8	t2p_init
LEAF_NODE	611:7	611:7	9	t2p_init
LEAF_NODE	611:15	611:15	8	(
LEAF_NODE	611:16	611:16	8	)
LEAF_NODE	611:17	611:17	4	;
SELECTION	613:1	613:17	3	
KEYWORD	613:1	613:1	4	if
LEAF_NODE	613:1	613:1	5	if
LEAF_NODE	613:4	613:4	4	(
CONDITION	613:5	613:5	4	t2p == NULL
EXPR	613:5	613:12	5	t2p == NULL
FIELD	613:5	613:5	6	t2p
LEAF_NODE	613:5	613:5	7	t2p
EQ_OPERATOR	613:9	613:9	6	==
LEAF_NODE	613:9	613:9	7	==
FIELD	613:12	613:12	6	NULL
LEAF_NODE	613:12	613:12	7	NULL
LEAF_NODE	613:16	613:16	4	)
STATEMENTS	613:17	616:1	4	
LEAF_NODE	613:17	613:17	5	{
STATEMENTS	614:2	615:2	5	
EXPR_STATEMENT	614:2	614:56	6	TIFFError ( TIFF2PDF_MODULE , "Can't initialize context" ) ;
EXPR	614:2	614:2	7	TIFFError ( TIFF2PDF_MODULE , "Can't initialize context" )
FUNCTION_CALL	614:2	614:55	8	TIFFError ( TIFF2PDF_MODULE , "Can't initialize context" )
CALLEE	614:2	614:2	9	TIFFError
LEAF_NODE	614:2	614:2	10	TIFFError
LEAF_NODE	614:11	614:11	9	(
ARGUMENT	614:12	614:12	9	TIFF2PDF_MODULE
FIELD	614:12	614:12	10	TIFF2PDF_MODULE
LEAF_NODE	614:12	614:12	11	TIFF2PDF_MODULE
LEAF_NODE	614:27	614:27	9	,
ARGUMENT	614:29	614:29	9	"Can't initialize context"
FIELD	614:29	614:29	10	"Can't initialize context"
LEAF_NODE	614:29	614:29	11	"Can't initialize context"
LEAF_NODE	614:55	614:55	9	)
LEAF_NODE	614:56	614:56	7	;
JUMP_STATEMENT	615:2	615:11	6	goto fail ;
KEYWORD	615:2	615:2	7	goto
LEAF_NODE	615:2	615:2	8	goto
DESTINATION	615:7	615:7	7	fail
LEAF_NODE	615:7	615:7	8	fail
LEAF_NODE	615:11	615:11	7	;
LEAF_NODE	616:1	616:1	5	}
ITERATION	618:1	620:56	3	
KEYWORD	618:1	618:1	4	while
LEAF_NODE	618:1	618:1	5	while
LEAF_NODE	618:7	618:7	4	(
CONDITION	618:8	618:8	4	argv && ( c = getopt ( argc , argv , "o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF" ) ) != - 1
EXPR	618:8	618:8	5	argv && ( c = getopt ( argc , argv , "o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF" ) ) != - 1
AND	618:8	619:8	6	argv && ( c = getopt ( argc , argv , "o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF" ) ) != - 1
EXPR	618:8	618:8	7	argv
FIELD	618:8	618:8	8	argv
LEAF_NODE	618:8	618:8	9	argv
LEAF_NODE	618:13	618:13	7	&&
EXPR	619:8	620:53	7	( c = getopt ( argc , argv , "o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF" ) ) != - 1
LEAF_NODE	619:8	619:8	8	(
ASSIGN	619:9	619:13	8	c = getopt ( argc , argv , "o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF" )
LVAL	619:9	619:9	9	c
FIELD	619:9	619:9	10	c
LEAF_NODE	619:9	619:9	11	c
ASSIGN_OP	619:11	619:11	9	=
LEAF_NODE	619:11	619:11	10	=
RVAL	619:13	619:13	9	getopt ( argc , argv , "o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF" )
FUNCTION_CALL	619:13	620:47	10	getopt ( argc , argv , "o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF" )
CALLEE	619:13	619:13	11	getopt
LEAF_NODE	619:13	619:13	12	getopt
LEAF_NODE	619:19	619:19	11	(
ARGUMENT	619:20	619:20	11	argc
FIELD	619:20	619:20	12	argc
LEAF_NODE	619:20	619:20	13	argc
LEAF_NODE	619:24	619:24	11	,
ARGUMENT	619:26	619:26	11	argv
FIELD	619:26	619:26	12	argv
LEAF_NODE	619:26	619:26	13	argv
LEAF_NODE	619:30	619:30	11	,
ARGUMENT	620:6	620:6	11	"o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF"
FIELD	620:6	620:6	12	"o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF"
LEAF_NODE	620:6	620:6	13	"o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbhF"
LEAF_NODE	620:47	620:47	11	)
LEAF_NODE	620:48	620:48	8	)
EQ_OPERATOR	620:50	620:50	8	!=
LEAF_NODE	620:50	620:50	9	!=
UNARY_EXPR	620:53	620:54	8	- 1
UNARY_OPERATOR	620:53	620:53	9	-
LEAF_NODE	620:53	620:53	10	-
FIELD	620:54	620:54	9	1
LEAF_NODE	620:54	620:54	10	1
LEAF_NODE	620:55	620:55	4	)
STATEMENTS	620:56	747:1	4	
LEAF_NODE	620:56	620:56	5	{
STATEMENTS	621:2	621:2	5	
SELECTION	621:2	621:13	6	
KEYWORD	621:2	621:2	7	switch
LEAF_NODE	621:2	621:2	8	switch
LEAF_NODE	621:9	621:9	7	(
CONDITION	621:10	621:10	7	c
EXPR	621:10	621:10	8	c
FIELD	621:10	621:10	9	c
LEAF_NODE	621:10	621:10	10	c
LEAF_NODE	621:11	621:11	7	)
STATEMENTS	621:13	746:2	7	
LEAF_NODE	621:13	621:13	8	{
STATEMENTS	622:3	745:4	8	
LEAF_NODE	622:3	622:3	9	case
LEAF_NODE	622:8	622:8	9	'o'
LEAF_NODE	622:11	622:11	9	:
EXPR_STATEMENT	623:4	623:24	9	outfilename = optarg ;
EXPR	623:4	623:4	10	outfilename = optarg
ASSIGN	623:4	623:18	11	outfilename = optarg
LVAL	623:4	623:4	12	outfilename
FIELD	623:4	623:4	13	outfilename
LEAF_NODE	623:4	623:4	14	outfilename
ASSIGN_OP	623:16	623:16	12	=
LEAF_NODE	623:16	623:16	13	=
RVAL	623:18	623:18	12	optarg
FIELD	623:18	623:18	13	optarg
LEAF_NODE	623:18	623:18	14	optarg
LEAF_NODE	623:24	623:24	10	;
JUMP_STATEMENT	624:4	624:9	9	break DESTINATION ;
KEYWORD	624:4	624:4	10	break
LEAF_NODE	624:4	624:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	624:9	624:9	10	;
LEAF_NODE	626:3	626:3	9	case
LEAF_NODE	626:8	626:8	9	'j'
LEAF_NODE	626:11	626:11	9	:
EXPR_STATEMENT	627:4	627:49	9	t2p -> pdf_defaultcompression = T2P_COMPRESS_JPEG ;
EXPR	627:4	627:4	10	t2p -> pdf_defaultcompression = T2P_COMPRESS_JPEG
ASSIGN	627:4	627:32	11	t2p -> pdf_defaultcompression = T2P_COMPRESS_JPEG
LVAL	627:4	627:4	12	t2p -> pdf_defaultcompression
FIELD	627:4	627:9	13	t2p -> pdf_defaultcompression
LEAF_NODE	627:4	627:4	14	t2p
LEAF_NODE	627:7	627:7	14	->
LEAF_NODE	627:9	627:9	14	pdf_defaultcompression
ASSIGN_OP	627:31	627:31	12	=
LEAF_NODE	627:31	627:31	13	=
RVAL	627:32	627:32	12	T2P_COMPRESS_JPEG
FIELD	627:32	627:32	13	T2P_COMPRESS_JPEG
LEAF_NODE	627:32	627:32	14	T2P_COMPRESS_JPEG
LEAF_NODE	627:49	627:49	10	;
JUMP_STATEMENT	628:4	628:9	9	break DESTINATION ;
KEYWORD	628:4	628:4	10	break
LEAF_NODE	628:4	628:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	628:9	628:9	10	;
LEAF_NODE	631:3	631:3	9	case
LEAF_NODE	631:8	631:8	9	'j'
LEAF_NODE	631:11	631:11	9	:
EXPR_STATEMENT	632:4	634:78	9	TIFFWarning ( TIFF2PDF_MODULE , "JPEG support in libtiff required for JPEG compression, ignoring option" ) ;
EXPR	632:4	632:4	10	TIFFWarning ( TIFF2PDF_MODULE , "JPEG support in libtiff required for JPEG compression, ignoring option" )
FUNCTION_CALL	632:4	634:77	11	TIFFWarning ( TIFF2PDF_MODULE , "JPEG support in libtiff required for JPEG compression, ignoring option" )
CALLEE	632:4	632:4	12	TIFFWarning
LEAF_NODE	632:4	632:4	13	TIFFWarning
LEAF_NODE	632:15	632:15	12	(
ARGUMENT	633:5	633:5	12	TIFF2PDF_MODULE
FIELD	633:5	633:5	13	TIFF2PDF_MODULE
LEAF_NODE	633:5	633:5	14	TIFF2PDF_MODULE
LEAF_NODE	633:20	633:20	12	,
ARGUMENT	634:5	634:5	12	"JPEG support in libtiff required for JPEG compression, ignoring option"
FIELD	634:5	634:5	13	"JPEG support in libtiff required for JPEG compression, ignoring option"
LEAF_NODE	634:5	634:5	14	"JPEG support in libtiff required for JPEG compression, ignoring option"
LEAF_NODE	634:77	634:77	12	)
LEAF_NODE	634:78	634:78	10	;
JUMP_STATEMENT	635:4	635:9	9	break DESTINATION ;
KEYWORD	635:4	635:4	10	break
LEAF_NODE	635:4	635:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	635:9	635:9	10	;
LEAF_NODE	638:3	638:3	9	case
LEAF_NODE	638:8	638:8	9	'z'
LEAF_NODE	638:11	638:11	9	:
EXPR_STATEMENT	639:4	639:48	9	t2p -> pdf_defaultcompression = T2P_COMPRESS_ZIP ;
EXPR	639:4	639:4	10	t2p -> pdf_defaultcompression = T2P_COMPRESS_ZIP
ASSIGN	639:4	639:32	11	t2p -> pdf_defaultcompression = T2P_COMPRESS_ZIP
LVAL	639:4	639:4	12	t2p -> pdf_defaultcompression
FIELD	639:4	639:9	13	t2p -> pdf_defaultcompression
LEAF_NODE	639:4	639:4	14	t2p
LEAF_NODE	639:7	639:7	14	->
LEAF_NODE	639:9	639:9	14	pdf_defaultcompression
ASSIGN_OP	639:31	639:31	12	=
LEAF_NODE	639:31	639:31	13	=
RVAL	639:32	639:32	12	T2P_COMPRESS_ZIP
FIELD	639:32	639:32	13	T2P_COMPRESS_ZIP
LEAF_NODE	639:32	639:32	14	T2P_COMPRESS_ZIP
LEAF_NODE	639:48	639:48	10	;
JUMP_STATEMENT	640:4	640:9	9	break DESTINATION ;
KEYWORD	640:4	640:4	10	break
LEAF_NODE	640:4	640:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	640:9	640:9	10	;
LEAF_NODE	643:3	643:3	9	case
LEAF_NODE	643:8	643:8	9	'z'
LEAF_NODE	643:11	643:11	9	:
EXPR_STATEMENT	644:4	646:76	9	TIFFWarning ( TIFF2PDF_MODULE , "Zip support in libtiff required for Zip compression, ignoring option" ) ;
EXPR	644:4	644:4	10	TIFFWarning ( TIFF2PDF_MODULE , "Zip support in libtiff required for Zip compression, ignoring option" )
FUNCTION_CALL	644:4	646:75	11	TIFFWarning ( TIFF2PDF_MODULE , "Zip support in libtiff required for Zip compression, ignoring option" )
CALLEE	644:4	644:4	12	TIFFWarning
LEAF_NODE	644:4	644:4	13	TIFFWarning
LEAF_NODE	644:15	644:15	12	(
ARGUMENT	645:5	645:5	12	TIFF2PDF_MODULE
FIELD	645:5	645:5	13	TIFF2PDF_MODULE
LEAF_NODE	645:5	645:5	14	TIFF2PDF_MODULE
LEAF_NODE	645:20	645:20	12	,
ARGUMENT	646:5	646:5	12	"Zip support in libtiff required for Zip compression, ignoring option"
FIELD	646:5	646:5	13	"Zip support in libtiff required for Zip compression, ignoring option"
LEAF_NODE	646:5	646:5	14	"Zip support in libtiff required for Zip compression, ignoring option"
LEAF_NODE	646:75	646:75	12	)
LEAF_NODE	646:76	646:76	10	;
JUMP_STATEMENT	647:4	647:9	9	break DESTINATION ;
KEYWORD	647:4	647:4	10	break
LEAF_NODE	647:4	647:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	647:9	647:9	10	;
LEAF_NODE	649:3	649:3	9	case
LEAF_NODE	649:8	649:8	9	'q'
LEAF_NODE	649:11	649:11	9	:
EXPR_STATEMENT	650:4	650:51	9	t2p -> pdf_defaultcompressionquality = atoi ( optarg ) ;
EXPR	650:4	650:4	10	t2p -> pdf_defaultcompressionquality = atoi ( optarg )
ASSIGN	650:4	650:39	11	t2p -> pdf_defaultcompressionquality = atoi ( optarg )
LVAL	650:4	650:4	12	t2p -> pdf_defaultcompressionquality
FIELD	650:4	650:9	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	650:4	650:4	14	t2p
LEAF_NODE	650:7	650:7	14	->
LEAF_NODE	650:9	650:9	14	pdf_defaultcompressionquality
ASSIGN_OP	650:38	650:38	12	=
LEAF_NODE	650:38	650:38	13	=
RVAL	650:39	650:39	12	atoi ( optarg )
FUNCTION_CALL	650:39	650:50	13	atoi ( optarg )
CALLEE	650:39	650:39	14	atoi
LEAF_NODE	650:39	650:39	15	atoi
LEAF_NODE	650:43	650:43	14	(
ARGUMENT	650:44	650:44	14	optarg
FIELD	650:44	650:44	15	optarg
LEAF_NODE	650:44	650:44	16	optarg
LEAF_NODE	650:50	650:50	14	)
LEAF_NODE	650:51	650:51	10	;
JUMP_STATEMENT	651:4	651:9	9	break DESTINATION ;
KEYWORD	651:4	651:4	10	break
LEAF_NODE	651:4	651:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	651:9	651:9	10	;
LEAF_NODE	652:3	652:3	9	case
LEAF_NODE	652:8	652:8	9	'n'
LEAF_NODE	652:11	652:11	9	:
EXPR_STATEMENT	653:4	653:28	9	t2p -> pdf_nopassthrough = 1 ;
EXPR	653:4	653:4	10	t2p -> pdf_nopassthrough = 1
ASSIGN	653:4	653:27	11	t2p -> pdf_nopassthrough = 1
LVAL	653:4	653:4	12	t2p -> pdf_nopassthrough
FIELD	653:4	653:9	13	t2p -> pdf_nopassthrough
LEAF_NODE	653:4	653:4	14	t2p
LEAF_NODE	653:7	653:7	14	->
LEAF_NODE	653:9	653:9	14	pdf_nopassthrough
ASSIGN_OP	653:26	653:26	12	=
LEAF_NODE	653:26	653:26	13	=
RVAL	653:27	653:27	12	1
FIELD	653:27	653:27	13	1
LEAF_NODE	653:27	653:27	14	1
LEAF_NODE	653:28	653:28	10	;
JUMP_STATEMENT	654:4	654:9	9	break DESTINATION ;
KEYWORD	654:4	654:4	10	break
LEAF_NODE	654:4	654:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	654:9	654:9	10	;
LEAF_NODE	655:3	655:3	9	case
LEAF_NODE	655:8	655:8	9	'd'
LEAF_NODE	655:11	655:11	9	:
EXPR_STATEMENT	656:4	656:49	9	t2p -> pdf_defaultcompression = T2P_COMPRESS_NONE ;
EXPR	656:4	656:4	10	t2p -> pdf_defaultcompression = T2P_COMPRESS_NONE
ASSIGN	656:4	656:32	11	t2p -> pdf_defaultcompression = T2P_COMPRESS_NONE
LVAL	656:4	656:4	12	t2p -> pdf_defaultcompression
FIELD	656:4	656:9	13	t2p -> pdf_defaultcompression
LEAF_NODE	656:4	656:4	14	t2p
LEAF_NODE	656:7	656:7	14	->
LEAF_NODE	656:9	656:9	14	pdf_defaultcompression
ASSIGN_OP	656:31	656:31	12	=
LEAF_NODE	656:31	656:31	13	=
RVAL	656:32	656:32	12	T2P_COMPRESS_NONE
FIELD	656:32	656:32	13	T2P_COMPRESS_NONE
LEAF_NODE	656:32	656:32	14	T2P_COMPRESS_NONE
LEAF_NODE	656:49	656:49	10	;
JUMP_STATEMENT	657:4	657:9	9	break DESTINATION ;
KEYWORD	657:4	657:4	10	break
LEAF_NODE	657:4	657:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	657:9	657:9	10	;
LEAF_NODE	658:3	658:3	9	case
LEAF_NODE	658:8	658:8	9	'u'
LEAF_NODE	658:11	658:11	9	:
SELECTION	659:4	659:22	9	
KEYWORD	659:4	659:4	10	if
LEAF_NODE	659:4	659:4	11	if
LEAF_NODE	659:6	659:6	10	(
CONDITION	659:7	659:7	10	optarg [ 0 ] == 'm'
EXPR	659:7	659:18	11	optarg [ 0 ] == 'm'
FIELD	659:7	659:15	12	optarg [ 0 ]
LEAF_NODE	659:7	659:7	13	optarg
LEAF_NODE	659:13	659:13	13	[
EXPR	659:14	659:14	13	0
FIELD	659:14	659:14	14	0
LEAF_NODE	659:14	659:14	15	0
LEAF_NODE	659:15	659:15	13	]
EQ_OPERATOR	659:16	659:16	12	==
LEAF_NODE	659:16	659:16	13	==
FIELD	659:18	659:18	12	'm'
LEAF_NODE	659:18	659:18	13	'm'
LEAF_NODE	659:21	659:21	10	)
STATEMENTS	659:22	661:4	10	
LEAF_NODE	659:22	659:22	11	{
STATEMENTS	660:5	660:5	11	
EXPR_STATEMENT	660:5	660:27	12	t2p -> pdf_centimeters = 1 ;
EXPR	660:5	660:5	13	t2p -> pdf_centimeters = 1
ASSIGN	660:5	660:26	14	t2p -> pdf_centimeters = 1
LVAL	660:5	660:5	15	t2p -> pdf_centimeters
FIELD	660:5	660:10	16	t2p -> pdf_centimeters
LEAF_NODE	660:5	660:5	17	t2p
LEAF_NODE	660:8	660:8	17	->
LEAF_NODE	660:10	660:10	17	pdf_centimeters
ASSIGN_OP	660:25	660:25	15	=
LEAF_NODE	660:25	660:25	16	=
RVAL	660:26	660:26	15	1
FIELD	660:26	660:26	16	1
LEAF_NODE	660:26	660:26	17	1
LEAF_NODE	660:27	660:27	13	;
LEAF_NODE	661:4	661:4	11	}
JUMP_STATEMENT	662:4	662:9	9	break DESTINATION ;
KEYWORD	662:4	662:4	10	break
LEAF_NODE	662:4	662:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	662:9	662:9	10	;
LEAF_NODE	663:3	663:3	9	case
LEAF_NODE	663:8	663:8	9	'x'
LEAF_NODE	663:11	663:11	9	:
EXPR_STATEMENT	664:4	665:60	9	t2p -> pdf_defaultxres = ( float ) atof ( optarg ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F ) ;
EXPR	664:4	664:4	10	t2p -> pdf_defaultxres = ( float ) atof ( optarg ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
ASSIGN	664:4	665:5	11	t2p -> pdf_defaultxres = ( float ) atof ( optarg ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
LVAL	664:4	664:4	12	t2p -> pdf_defaultxres
FIELD	664:4	664:9	13	t2p -> pdf_defaultxres
LEAF_NODE	664:4	664:4	14	t2p
LEAF_NODE	664:7	664:7	14	->
LEAF_NODE	664:9	664:9	14	pdf_defaultxres
ASSIGN_OP	664:25	664:25	12	=
LEAF_NODE	664:25	664:25	13	=
RVAL	665:5	665:59	12	( float ) atof ( optarg ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
LEAF_NODE	665:5	665:5	13	(
TYPE_NAME	665:6	665:6	13	float
LEAF_NODE	665:6	665:6	14	float
LEAF_NODE	665:11	665:11	13	)
FUNCTION_CALL	665:12	665:23	13	atof ( optarg )
CALLEE	665:12	665:12	14	atof
LEAF_NODE	665:12	665:12	15	atof
LEAF_NODE	665:16	665:16	14	(
ARGUMENT	665:17	665:17	14	optarg
FIELD	665:17	665:17	15	optarg
LEAF_NODE	665:17	665:17	16	optarg
LEAF_NODE	665:23	665:23	14	)
LEAF_NODE	665:25	665:25	13	/
LEAF_NODE	665:27	665:27	13	(
COND_EXPR	665:28	665:55	13	t2p -> pdf_centimeters ? 2.54F : 1.0F
CONDITION	665:28	665:28	14	t2p -> pdf_centimeters
FIELD	665:28	665:33	15	t2p -> pdf_centimeters
LEAF_NODE	665:28	665:28	16	t2p
LEAF_NODE	665:31	665:31	16	->
LEAF_NODE	665:33	665:33	16	pdf_centimeters
LEAF_NODE	665:48	665:48	14	?
EXPR	665:49	665:49	14	2.54F
FIELD	665:49	665:49	15	2.54F
LEAF_NODE	665:49	665:49	16	2.54F
LEAF_NODE	665:54	665:54	14	:
FIELD	665:55	665:55	14	1.0F
LEAF_NODE	665:55	665:55	15	1.0F
LEAF_NODE	665:59	665:59	13	)
LEAF_NODE	665:60	665:60	10	;
JUMP_STATEMENT	666:4	666:9	9	break DESTINATION ;
KEYWORD	666:4	666:4	10	break
LEAF_NODE	666:4	666:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	666:9	666:9	10	;
LEAF_NODE	667:3	667:3	9	case
LEAF_NODE	667:8	667:8	9	'y'
LEAF_NODE	667:11	667:11	9	:
EXPR_STATEMENT	668:4	669:60	9	t2p -> pdf_defaultyres = ( float ) atof ( optarg ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F ) ;
EXPR	668:4	668:4	10	t2p -> pdf_defaultyres = ( float ) atof ( optarg ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
ASSIGN	668:4	669:5	11	t2p -> pdf_defaultyres = ( float ) atof ( optarg ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
LVAL	668:4	668:4	12	t2p -> pdf_defaultyres
FIELD	668:4	668:9	13	t2p -> pdf_defaultyres
LEAF_NODE	668:4	668:4	14	t2p
LEAF_NODE	668:7	668:7	14	->
LEAF_NODE	668:9	668:9	14	pdf_defaultyres
ASSIGN_OP	668:25	668:25	12	=
LEAF_NODE	668:25	668:25	13	=
RVAL	669:5	669:59	12	( float ) atof ( optarg ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
LEAF_NODE	669:5	669:5	13	(
TYPE_NAME	669:6	669:6	13	float
LEAF_NODE	669:6	669:6	14	float
LEAF_NODE	669:11	669:11	13	)
FUNCTION_CALL	669:12	669:23	13	atof ( optarg )
CALLEE	669:12	669:12	14	atof
LEAF_NODE	669:12	669:12	15	atof
LEAF_NODE	669:16	669:16	14	(
ARGUMENT	669:17	669:17	14	optarg
FIELD	669:17	669:17	15	optarg
LEAF_NODE	669:17	669:17	16	optarg
LEAF_NODE	669:23	669:23	14	)
LEAF_NODE	669:25	669:25	13	/
LEAF_NODE	669:27	669:27	13	(
COND_EXPR	669:28	669:55	13	t2p -> pdf_centimeters ? 2.54F : 1.0F
CONDITION	669:28	669:28	14	t2p -> pdf_centimeters
FIELD	669:28	669:33	15	t2p -> pdf_centimeters
LEAF_NODE	669:28	669:28	16	t2p
LEAF_NODE	669:31	669:31	16	->
LEAF_NODE	669:33	669:33	16	pdf_centimeters
LEAF_NODE	669:48	669:48	14	?
EXPR	669:49	669:49	14	2.54F
FIELD	669:49	669:49	15	2.54F
LEAF_NODE	669:49	669:49	16	2.54F
LEAF_NODE	669:54	669:54	14	:
FIELD	669:55	669:55	14	1.0F
LEAF_NODE	669:55	669:55	15	1.0F
LEAF_NODE	669:59	669:59	13	)
LEAF_NODE	669:60	669:60	10	;
JUMP_STATEMENT	670:4	670:9	9	break DESTINATION ;
KEYWORD	670:4	670:4	10	break
LEAF_NODE	670:4	670:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	670:9	670:9	10	;
LEAF_NODE	671:3	671:3	9	case
LEAF_NODE	671:8	671:8	9	'w'
LEAF_NODE	671:11	671:11	9	:
EXPR_STATEMENT	672:4	672:31	9	t2p -> pdf_overridepagesize = 1 ;
EXPR	672:4	672:4	10	t2p -> pdf_overridepagesize = 1
ASSIGN	672:4	672:30	11	t2p -> pdf_overridepagesize = 1
LVAL	672:4	672:4	12	t2p -> pdf_overridepagesize
FIELD	672:4	672:9	13	t2p -> pdf_overridepagesize
LEAF_NODE	672:4	672:4	14	t2p
LEAF_NODE	672:7	672:7	14	->
LEAF_NODE	672:9	672:9	14	pdf_overridepagesize
ASSIGN_OP	672:29	672:29	12	=
LEAF_NODE	672:29	672:29	13	=
RVAL	672:30	672:30	12	1
FIELD	672:30	672:30	13	1
LEAF_NODE	672:30	672:30	14	1
LEAF_NODE	672:31	672:31	10	;
EXPR_STATEMENT	673:4	674:77	9	t2p -> pdf_defaultpagewidth = ( ( float ) atof ( optarg ) * PS_UNIT_SIZE ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F ) ;
EXPR	673:4	673:4	10	t2p -> pdf_defaultpagewidth = ( ( float ) atof ( optarg ) * PS_UNIT_SIZE ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
ASSIGN	673:4	674:5	11	t2p -> pdf_defaultpagewidth = ( ( float ) atof ( optarg ) * PS_UNIT_SIZE ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
LVAL	673:4	673:4	12	t2p -> pdf_defaultpagewidth
FIELD	673:4	673:9	13	t2p -> pdf_defaultpagewidth
LEAF_NODE	673:4	673:4	14	t2p
LEAF_NODE	673:7	673:7	14	->
LEAF_NODE	673:9	673:9	14	pdf_defaultpagewidth
ASSIGN_OP	673:30	673:30	12	=
LEAF_NODE	673:30	673:30	13	=
RVAL	674:5	674:76	12	( ( float ) atof ( optarg ) * PS_UNIT_SIZE ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
LEAF_NODE	674:5	674:5	13	(
LEAF_NODE	674:6	674:6	13	(
TYPE_NAME	674:7	674:7	13	float
LEAF_NODE	674:7	674:7	14	float
LEAF_NODE	674:12	674:12	13	)
FUNCTION_CALL	674:13	674:24	13	atof ( optarg )
CALLEE	674:13	674:13	14	atof
LEAF_NODE	674:13	674:13	15	atof
LEAF_NODE	674:17	674:17	14	(
ARGUMENT	674:18	674:18	14	optarg
FIELD	674:18	674:18	15	optarg
LEAF_NODE	674:18	674:18	16	optarg
LEAF_NODE	674:24	674:24	14	)
LEAF_NODE	674:26	674:26	13	*
FIELD	674:28	674:28	13	PS_UNIT_SIZE
LEAF_NODE	674:28	674:28	14	PS_UNIT_SIZE
LEAF_NODE	674:40	674:40	13	)
LEAF_NODE	674:42	674:42	13	/
LEAF_NODE	674:44	674:44	13	(
COND_EXPR	674:45	674:72	13	t2p -> pdf_centimeters ? 2.54F : 1.0F
CONDITION	674:45	674:45	14	t2p -> pdf_centimeters
FIELD	674:45	674:50	15	t2p -> pdf_centimeters
LEAF_NODE	674:45	674:45	16	t2p
LEAF_NODE	674:48	674:48	16	->
LEAF_NODE	674:50	674:50	16	pdf_centimeters
LEAF_NODE	674:65	674:65	14	?
EXPR	674:66	674:66	14	2.54F
FIELD	674:66	674:66	15	2.54F
LEAF_NODE	674:66	674:66	16	2.54F
LEAF_NODE	674:71	674:71	14	:
FIELD	674:72	674:72	14	1.0F
LEAF_NODE	674:72	674:72	15	1.0F
LEAF_NODE	674:76	674:76	13	)
LEAF_NODE	674:77	674:77	10	;
JUMP_STATEMENT	675:4	675:9	9	break DESTINATION ;
KEYWORD	675:4	675:4	10	break
LEAF_NODE	675:4	675:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	675:9	675:9	10	;
LEAF_NODE	676:3	676:3	9	case
LEAF_NODE	676:8	676:8	9	'l'
LEAF_NODE	676:11	676:11	9	:
EXPR_STATEMENT	677:4	677:31	9	t2p -> pdf_overridepagesize = 1 ;
EXPR	677:4	677:4	10	t2p -> pdf_overridepagesize = 1
ASSIGN	677:4	677:30	11	t2p -> pdf_overridepagesize = 1
LVAL	677:4	677:4	12	t2p -> pdf_overridepagesize
FIELD	677:4	677:9	13	t2p -> pdf_overridepagesize
LEAF_NODE	677:4	677:4	14	t2p
LEAF_NODE	677:7	677:7	14	->
LEAF_NODE	677:9	677:9	14	pdf_overridepagesize
ASSIGN_OP	677:29	677:29	12	=
LEAF_NODE	677:29	677:29	13	=
RVAL	677:30	677:30	12	1
FIELD	677:30	677:30	13	1
LEAF_NODE	677:30	677:30	14	1
LEAF_NODE	677:31	677:31	10	;
EXPR_STATEMENT	678:4	679:77	9	t2p -> pdf_defaultpagelength = ( ( float ) atof ( optarg ) * PS_UNIT_SIZE ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F ) ;
EXPR	678:4	678:4	10	t2p -> pdf_defaultpagelength = ( ( float ) atof ( optarg ) * PS_UNIT_SIZE ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
ASSIGN	678:4	679:5	11	t2p -> pdf_defaultpagelength = ( ( float ) atof ( optarg ) * PS_UNIT_SIZE ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
LVAL	678:4	678:4	12	t2p -> pdf_defaultpagelength
FIELD	678:4	678:9	13	t2p -> pdf_defaultpagelength
LEAF_NODE	678:4	678:4	14	t2p
LEAF_NODE	678:7	678:7	14	->
LEAF_NODE	678:9	678:9	14	pdf_defaultpagelength
ASSIGN_OP	678:31	678:31	12	=
LEAF_NODE	678:31	678:31	13	=
RVAL	679:5	679:76	12	( ( float ) atof ( optarg ) * PS_UNIT_SIZE ) / ( t2p -> pdf_centimeters ? 2.54F : 1.0F )
LEAF_NODE	679:5	679:5	13	(
LEAF_NODE	679:6	679:6	13	(
TYPE_NAME	679:7	679:7	13	float
LEAF_NODE	679:7	679:7	14	float
LEAF_NODE	679:12	679:12	13	)
FUNCTION_CALL	679:13	679:24	13	atof ( optarg )
CALLEE	679:13	679:13	14	atof
LEAF_NODE	679:13	679:13	15	atof
LEAF_NODE	679:17	679:17	14	(
ARGUMENT	679:18	679:18	14	optarg
FIELD	679:18	679:18	15	optarg
LEAF_NODE	679:18	679:18	16	optarg
LEAF_NODE	679:24	679:24	14	)
LEAF_NODE	679:26	679:26	13	*
FIELD	679:28	679:28	13	PS_UNIT_SIZE
LEAF_NODE	679:28	679:28	14	PS_UNIT_SIZE
LEAF_NODE	679:40	679:40	13	)
LEAF_NODE	679:42	679:42	13	/
LEAF_NODE	679:44	679:44	13	(
COND_EXPR	679:45	679:72	13	t2p -> pdf_centimeters ? 2.54F : 1.0F
CONDITION	679:45	679:45	14	t2p -> pdf_centimeters
FIELD	679:45	679:50	15	t2p -> pdf_centimeters
LEAF_NODE	679:45	679:45	16	t2p
LEAF_NODE	679:48	679:48	16	->
LEAF_NODE	679:50	679:50	16	pdf_centimeters
LEAF_NODE	679:65	679:65	14	?
EXPR	679:66	679:66	14	2.54F
FIELD	679:66	679:66	15	2.54F
LEAF_NODE	679:66	679:66	16	2.54F
LEAF_NODE	679:71	679:71	14	:
FIELD	679:72	679:72	14	1.0F
LEAF_NODE	679:72	679:72	15	1.0F
LEAF_NODE	679:76	679:76	13	)
LEAF_NODE	679:77	679:77	10	;
JUMP_STATEMENT	680:4	680:9	9	break DESTINATION ;
KEYWORD	680:4	680:4	10	break
LEAF_NODE	680:4	680:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	680:9	680:9	10	;
LEAF_NODE	681:3	681:3	9	case
LEAF_NODE	681:8	681:8	9	'r'
LEAF_NODE	681:11	681:11	9	:
SELECTION	682:4	682:22	9	
KEYWORD	682:4	682:4	10	if
LEAF_NODE	682:4	682:4	11	if
LEAF_NODE	682:6	682:6	10	(
CONDITION	682:7	682:7	10	optarg [ 0 ] == 'o'
EXPR	682:7	682:18	11	optarg [ 0 ] == 'o'
FIELD	682:7	682:15	12	optarg [ 0 ]
LEAF_NODE	682:7	682:7	13	optarg
LEAF_NODE	682:13	682:13	13	[
EXPR	682:14	682:14	13	0
FIELD	682:14	682:14	14	0
LEAF_NODE	682:14	682:14	15	0
LEAF_NODE	682:15	682:15	13	]
EQ_OPERATOR	682:16	682:16	12	==
LEAF_NODE	682:16	682:16	13	==
FIELD	682:18	682:18	12	'o'
LEAF_NODE	682:18	682:18	13	'o'
LEAF_NODE	682:21	682:21	10	)
STATEMENTS	682:22	684:4	10	
LEAF_NODE	682:22	682:22	11	{
STATEMENTS	683:5	683:5	11	
EXPR_STATEMENT	683:5	683:27	12	t2p -> pdf_overrideres = 1 ;
EXPR	683:5	683:5	13	t2p -> pdf_overrideres = 1
ASSIGN	683:5	683:26	14	t2p -> pdf_overrideres = 1
LVAL	683:5	683:5	15	t2p -> pdf_overrideres
FIELD	683:5	683:10	16	t2p -> pdf_overrideres
LEAF_NODE	683:5	683:5	17	t2p
LEAF_NODE	683:8	683:8	17	->
LEAF_NODE	683:10	683:10	17	pdf_overrideres
ASSIGN_OP	683:25	683:25	15	=
LEAF_NODE	683:25	683:25	16	=
RVAL	683:26	683:26	15	1
FIELD	683:26	683:26	16	1
LEAF_NODE	683:26	683:26	17	1
LEAF_NODE	683:27	683:27	13	;
LEAF_NODE	684:4	684:4	11	}
JUMP_STATEMENT	685:4	685:9	9	break DESTINATION ;
KEYWORD	685:4	685:4	10	break
LEAF_NODE	685:4	685:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	685:9	685:9	10	;
LEAF_NODE	686:3	686:3	9	case
LEAF_NODE	686:8	686:8	9	'p'
LEAF_NODE	686:11	686:11	9	:
SELECTION	687:4	690:13	9	
KEYWORD	687:4	687:4	10	if
LEAF_NODE	687:4	687:4	11	if
LEAF_NODE	687:6	687:6	10	(
CONDITION	687:7	687:7	10	tiff2pdf_match_paper_size ( & ( t2p -> pdf_defaultpagewidth ) , & ( t2p -> pdf_defaultpagelength ) , optarg )
EXPR	687:7	687:7	11	tiff2pdf_match_paper_size ( & ( t2p -> pdf_defaultpagewidth ) , & ( t2p -> pdf_defaultpagelength ) , optarg )
FUNCTION_CALL	687:7	690:11	12	tiff2pdf_match_paper_size ( & ( t2p -> pdf_defaultpagewidth ) , & ( t2p -> pdf_defaultpagelength ) , optarg )
CALLEE	687:7	687:7	13	tiff2pdf_match_paper_size
LEAF_NODE	687:7	687:7	14	tiff2pdf_match_paper_size
LEAF_NODE	687:32	687:32	13	(
ARGUMENT	688:5	688:5	13	& ( t2p -> pdf_defaultpagewidth )
UNARY_EXPR	688:5	688:32	14	& ( t2p -> pdf_defaultpagewidth )
UNARY_OPERATOR	688:5	688:5	15	&
LEAF_NODE	688:5	688:5	16	&
LEAF_NODE	688:6	688:6	15	(
FIELD	688:7	688:12	15	t2p -> pdf_defaultpagewidth
LEAF_NODE	688:7	688:7	16	t2p
LEAF_NODE	688:10	688:10	16	->
LEAF_NODE	688:12	688:12	16	pdf_defaultpagewidth
LEAF_NODE	688:32	688:32	15	)
LEAF_NODE	688:33	688:33	13	,
ARGUMENT	689:5	689:5	13	& ( t2p -> pdf_defaultpagelength )
UNARY_EXPR	689:5	689:33	14	& ( t2p -> pdf_defaultpagelength )
UNARY_OPERATOR	689:5	689:5	15	&
LEAF_NODE	689:5	689:5	16	&
LEAF_NODE	689:6	689:6	15	(
FIELD	689:7	689:12	15	t2p -> pdf_defaultpagelength
LEAF_NODE	689:7	689:7	16	t2p
LEAF_NODE	689:10	689:10	16	->
LEAF_NODE	689:12	689:12	16	pdf_defaultpagelength
LEAF_NODE	689:33	689:33	15	)
LEAF_NODE	689:34	689:34	13	,
ARGUMENT	690:5	690:5	13	optarg
FIELD	690:5	690:5	14	optarg
LEAF_NODE	690:5	690:5	15	optarg
LEAF_NODE	690:11	690:11	13	)
LEAF_NODE	690:12	690:12	10	)
STATEMENTS	690:13	692:4	10	
LEAF_NODE	690:13	690:13	11	{
STATEMENTS	691:5	691:5	11	
EXPR_STATEMENT	691:5	691:32	12	t2p -> pdf_overridepagesize = 1 ;
EXPR	691:5	691:5	13	t2p -> pdf_overridepagesize = 1
ASSIGN	691:5	691:31	14	t2p -> pdf_overridepagesize = 1
LVAL	691:5	691:5	15	t2p -> pdf_overridepagesize
FIELD	691:5	691:10	16	t2p -> pdf_overridepagesize
LEAF_NODE	691:5	691:5	17	t2p
LEAF_NODE	691:8	691:8	17	->
LEAF_NODE	691:10	691:10	17	pdf_overridepagesize
ASSIGN_OP	691:30	691:30	15	=
LEAF_NODE	691:30	691:30	16	=
RVAL	691:31	691:31	15	1
FIELD	691:31	691:31	16	1
LEAF_NODE	691:31	691:31	17	1
LEAF_NODE	691:32	691:32	13	;
LEAF_NODE	692:4	692:4	11	}
SELECTION	692:6	692:11	9	
KEYWORD	692:6	692:6	10	else
LEAF_NODE	692:6	692:6	11	else
STATEMENTS	692:11	696:4	10	
LEAF_NODE	692:11	692:11	11	{
STATEMENTS	693:5	693:5	11	
EXPR_STATEMENT	693:5	695:13	12	TIFFWarning ( TIFF2PDF_MODULE , "Unknown paper size %s, ignoring option" , optarg ) ;
EXPR	693:5	693:5	13	TIFFWarning ( TIFF2PDF_MODULE , "Unknown paper size %s, ignoring option" , optarg )
FUNCTION_CALL	693:5	695:12	14	TIFFWarning ( TIFF2PDF_MODULE , "Unknown paper size %s, ignoring option" , optarg )
CALLEE	693:5	693:5	15	TIFFWarning
LEAF_NODE	693:5	693:5	16	TIFFWarning
LEAF_NODE	693:16	693:16	15	(
ARGUMENT	693:17	693:17	15	TIFF2PDF_MODULE
FIELD	693:17	693:17	16	TIFF2PDF_MODULE
LEAF_NODE	693:17	693:17	17	TIFF2PDF_MODULE
LEAF_NODE	693:32	693:32	15	,
ARGUMENT	694:5	694:5	15	"Unknown paper size %s, ignoring option"
FIELD	694:5	694:5	16	"Unknown paper size %s, ignoring option"
LEAF_NODE	694:5	694:5	17	"Unknown paper size %s, ignoring option"
LEAF_NODE	694:45	694:45	15	,
ARGUMENT	695:6	695:6	15	optarg
FIELD	695:6	695:6	16	optarg
LEAF_NODE	695:6	695:6	17	optarg
LEAF_NODE	695:12	695:12	15	)
LEAF_NODE	695:13	695:13	13	;
LEAF_NODE	696:4	696:4	11	}
JUMP_STATEMENT	697:4	697:9	9	break DESTINATION ;
KEYWORD	697:4	697:4	10	break
LEAF_NODE	697:4	697:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	697:9	697:9	10	;
LEAF_NODE	698:3	698:3	9	case
LEAF_NODE	698:8	698:8	9	'i'
LEAF_NODE	698:11	698:11	9	:
EXPR_STATEMENT	699:4	699:32	9	t2p -> pdf_colorspace_invert = 1 ;
EXPR	699:4	699:4	10	t2p -> pdf_colorspace_invert = 1
ASSIGN	699:4	699:31	11	t2p -> pdf_colorspace_invert = 1
LVAL	699:4	699:4	12	t2p -> pdf_colorspace_invert
FIELD	699:4	699:9	13	t2p -> pdf_colorspace_invert
LEAF_NODE	699:4	699:4	14	t2p
LEAF_NODE	699:7	699:7	14	->
LEAF_NODE	699:9	699:9	14	pdf_colorspace_invert
ASSIGN_OP	699:30	699:30	12	=
LEAF_NODE	699:30	699:30	13	=
RVAL	699:31	699:31	12	1
FIELD	699:31	699:31	13	1
LEAF_NODE	699:31	699:31	14	1
LEAF_NODE	699:32	699:32	10	;
JUMP_STATEMENT	700:4	700:9	9	break DESTINATION ;
KEYWORD	700:4	700:4	10	break
LEAF_NODE	700:4	700:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	700:9	700:9	10	;
LEAF_NODE	701:3	701:3	9	case
LEAF_NODE	701:8	701:8	9	'F'
LEAF_NODE	701:11	701:11	9	:
EXPR_STATEMENT	702:4	702:31	9	t2p -> pdf_image_fillpage = 1 ;
EXPR	702:4	702:4	10	t2p -> pdf_image_fillpage = 1
ASSIGN	702:4	702:30	11	t2p -> pdf_image_fillpage = 1
LVAL	702:4	702:4	12	t2p -> pdf_image_fillpage
FIELD	702:4	702:9	13	t2p -> pdf_image_fillpage
LEAF_NODE	702:4	702:4	14	t2p
LEAF_NODE	702:7	702:7	14	->
LEAF_NODE	702:9	702:9	14	pdf_image_fillpage
ASSIGN_OP	702:28	702:28	12	=
LEAF_NODE	702:28	702:28	13	=
RVAL	702:30	702:30	12	1
FIELD	702:30	702:30	13	1
LEAF_NODE	702:30	702:30	14	1
LEAF_NODE	702:31	702:31	10	;
JUMP_STATEMENT	703:4	703:9	9	break DESTINATION ;
KEYWORD	703:4	703:4	10	break
LEAF_NODE	703:4	703:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	703:9	703:9	10	;
LEAF_NODE	704:3	704:3	9	case
LEAF_NODE	704:8	704:8	9	'f'
LEAF_NODE	704:11	704:11	9	:
EXPR_STATEMENT	705:4	705:24	9	t2p -> pdf_fitwindow = 1 ;
EXPR	705:4	705:4	10	t2p -> pdf_fitwindow = 1
ASSIGN	705:4	705:23	11	t2p -> pdf_fitwindow = 1
LVAL	705:4	705:4	12	t2p -> pdf_fitwindow
FIELD	705:4	705:9	13	t2p -> pdf_fitwindow
LEAF_NODE	705:4	705:4	14	t2p
LEAF_NODE	705:7	705:7	14	->
LEAF_NODE	705:9	705:9	14	pdf_fitwindow
ASSIGN_OP	705:22	705:22	12	=
LEAF_NODE	705:22	705:22	13	=
RVAL	705:23	705:23	12	1
FIELD	705:23	705:23	13	1
LEAF_NODE	705:23	705:23	14	1
LEAF_NODE	705:24	705:24	10	;
JUMP_STATEMENT	706:4	706:9	9	break DESTINATION ;
KEYWORD	706:4	706:4	10	break
LEAF_NODE	706:4	706:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	706:9	706:9	10	;
LEAF_NODE	707:3	707:3	9	case
LEAF_NODE	707:8	707:8	9	'e'
LEAF_NODE	707:11	707:11	9	:
SELECTION	708:4	708:29	9	
KEYWORD	708:4	708:4	10	if
LEAF_NODE	708:4	708:4	11	if
LEAF_NODE	708:7	708:7	10	(
CONDITION	708:8	708:8	10	strlen ( optarg ) == 0
EXPR	708:8	708:26	11	strlen ( optarg ) == 0
FUNCTION_CALL	708:8	708:21	12	strlen ( optarg )
CALLEE	708:8	708:8	13	strlen
LEAF_NODE	708:8	708:8	14	strlen
LEAF_NODE	708:14	708:14	13	(
ARGUMENT	708:15	708:15	13	optarg
FIELD	708:15	708:15	14	optarg
LEAF_NODE	708:15	708:15	15	optarg
LEAF_NODE	708:21	708:21	13	)
EQ_OPERATOR	708:23	708:23	12	==
LEAF_NODE	708:23	708:23	13	==
FIELD	708:26	708:26	12	0
LEAF_NODE	708:26	708:26	13	0
LEAF_NODE	708:27	708:27	10	)
STATEMENTS	708:29	710:4	10	
LEAF_NODE	708:29	708:29	11	{
STATEMENTS	709:5	709:5	11	
EXPR_STATEMENT	709:5	709:32	12	t2p -> pdf_datetime [ 0 ] = '\0' ;
EXPR	709:5	709:5	13	t2p -> pdf_datetime [ 0 ] = '\0'
ASSIGN	709:5	709:28	14	t2p -> pdf_datetime [ 0 ] = '\0'
LVAL	709:5	709:5	15	t2p -> pdf_datetime [ 0 ]
FIELD	709:5	709:24	16	t2p -> pdf_datetime [ 0 ]
LEAF_NODE	709:5	709:5	17	t2p
LEAF_NODE	709:8	709:8	17	->
LEAF_NODE	709:10	709:10	17	pdf_datetime
LEAF_NODE	709:22	709:22	17	[
EXPR	709:23	709:23	17	0
FIELD	709:23	709:23	18	0
LEAF_NODE	709:23	709:23	19	0
LEAF_NODE	709:24	709:24	17	]
ASSIGN_OP	709:26	709:26	15	=
LEAF_NODE	709:26	709:26	16	=
RVAL	709:28	709:28	15	'\0'
FIELD	709:28	709:28	16	'\0'
LEAF_NODE	709:28	709:28	17	'\0'
LEAF_NODE	709:32	709:32	13	;
LEAF_NODE	710:4	710:4	11	}
SELECTION	710:6	710:11	9	
KEYWORD	710:6	710:6	10	else
LEAF_NODE	710:6	710:6	11	else
STATEMENTS	710:11	716:4	10	
LEAF_NODE	710:11	710:11	11	{
STATEMENTS	711:5	715:5	11	
EXPR_STATEMENT	711:5	711:31	12	t2p -> pdf_datetime [ 0 ] = 'D' ;
EXPR	711:5	711:5	13	t2p -> pdf_datetime [ 0 ] = 'D'
ASSIGN	711:5	711:28	14	t2p -> pdf_datetime [ 0 ] = 'D'
LVAL	711:5	711:5	15	t2p -> pdf_datetime [ 0 ]
FIELD	711:5	711:24	16	t2p -> pdf_datetime [ 0 ]
LEAF_NODE	711:5	711:5	17	t2p
LEAF_NODE	711:8	711:8	17	->
LEAF_NODE	711:10	711:10	17	pdf_datetime
LEAF_NODE	711:22	711:22	17	[
EXPR	711:23	711:23	17	0
FIELD	711:23	711:23	18	0
LEAF_NODE	711:23	711:23	19	0
LEAF_NODE	711:24	711:24	17	]
ASSIGN_OP	711:26	711:26	15	=
LEAF_NODE	711:26	711:26	16	=
RVAL	711:28	711:28	15	'D'
FIELD	711:28	711:28	16	'D'
LEAF_NODE	711:28	711:28	17	'D'
LEAF_NODE	711:31	711:31	13	;
EXPR_STATEMENT	712:5	712:31	12	t2p -> pdf_datetime [ 1 ] = ':' ;
EXPR	712:5	712:5	13	t2p -> pdf_datetime [ 1 ] = ':'
ASSIGN	712:5	712:28	14	t2p -> pdf_datetime [ 1 ] = ':'
LVAL	712:5	712:5	15	t2p -> pdf_datetime [ 1 ]
FIELD	712:5	712:24	16	t2p -> pdf_datetime [ 1 ]
LEAF_NODE	712:5	712:5	17	t2p
LEAF_NODE	712:8	712:8	17	->
LEAF_NODE	712:10	712:10	17	pdf_datetime
LEAF_NODE	712:22	712:22	17	[
EXPR	712:23	712:23	17	1
FIELD	712:23	712:23	18	1
LEAF_NODE	712:23	712:23	19	1
LEAF_NODE	712:24	712:24	17	]
ASSIGN_OP	712:26	712:26	15	=
LEAF_NODE	712:26	712:26	16	=
RVAL	712:28	712:28	15	':'
FIELD	712:28	712:28	16	':'
LEAF_NODE	712:28	712:28	17	':'
LEAF_NODE	712:31	712:31	13	;
EXPR_STATEMENT	713:5	714:36	12	strncpy ( t2p -> pdf_datetime + 2 , optarg , sizeof ( t2p -> pdf_datetime ) - 3 ) ;
EXPR	713:5	713:5	13	strncpy ( t2p -> pdf_datetime + 2 , optarg , sizeof ( t2p -> pdf_datetime ) - 3 )
FUNCTION_CALL	713:5	714:35	14	strncpy ( t2p -> pdf_datetime + 2 , optarg , sizeof ( t2p -> pdf_datetime ) - 3 )
CALLEE	713:5	713:5	15	strncpy
LEAF_NODE	713:5	713:5	16	strncpy
LEAF_NODE	713:12	713:12	15	(
ARGUMENT	713:13	713:33	15	t2p -> pdf_datetime + 2
FIELD	713:13	713:18	16	t2p -> pdf_datetime
LEAF_NODE	713:13	713:13	17	t2p
LEAF_NODE	713:16	713:16	17	->
LEAF_NODE	713:18	713:18	17	pdf_datetime
LEAF_NODE	713:31	713:31	16	+
FIELD	713:33	713:33	16	2
LEAF_NODE	713:33	713:33	17	2
LEAF_NODE	713:34	713:34	15	,
ARGUMENT	713:36	713:36	15	optarg
FIELD	713:36	713:36	16	optarg
LEAF_NODE	713:36	713:36	17	optarg
LEAF_NODE	713:42	713:42	15	,
ARGUMENT	714:6	714:34	15	sizeof ( t2p -> pdf_datetime ) - 3
FUNCTION_CALL	714:6	714:30	16	sizeof ( t2p -> pdf_datetime )
CALLEE	714:6	714:6	17	sizeof
LEAF_NODE	714:6	714:6	18	sizeof
LEAF_NODE	714:12	714:12	17	(
ARGUMENT	714:13	714:13	17	t2p -> pdf_datetime
FIELD	714:13	714:18	18	t2p -> pdf_datetime
LEAF_NODE	714:13	714:13	19	t2p
LEAF_NODE	714:16	714:16	19	->
LEAF_NODE	714:18	714:18	19	pdf_datetime
LEAF_NODE	714:30	714:30	17	)
LEAF_NODE	714:32	714:32	16	-
FIELD	714:34	714:34	16	3
LEAF_NODE	714:34	714:34	17	3
LEAF_NODE	714:35	714:35	15	)
LEAF_NODE	714:36	714:36	13	;
EXPR_STATEMENT	715:5	715:60	12	t2p -> pdf_datetime [ sizeof ( t2p -> pdf_datetime ) - 1 ] = '\0' ;
EXPR	715:5	715:5	13	t2p -> pdf_datetime [ sizeof ( t2p -> pdf_datetime ) - 1 ] = '\0'
ASSIGN	715:5	715:56	14	t2p -> pdf_datetime [ sizeof ( t2p -> pdf_datetime ) - 1 ] = '\0'
LVAL	715:5	715:5	15	t2p -> pdf_datetime [ sizeof ( t2p -> pdf_datetime ) - 1 ]
FIELD	715:5	715:52	16	t2p -> pdf_datetime [ sizeof ( t2p -> pdf_datetime ) - 1 ]
LEAF_NODE	715:5	715:5	17	t2p
LEAF_NODE	715:8	715:8	17	->
LEAF_NODE	715:10	715:10	17	pdf_datetime
LEAF_NODE	715:22	715:22	17	[
EXPR	715:23	715:51	17	sizeof ( t2p -> pdf_datetime ) - 1
FUNCTION_CALL	715:23	715:47	18	sizeof ( t2p -> pdf_datetime )
CALLEE	715:23	715:23	19	sizeof
LEAF_NODE	715:23	715:23	20	sizeof
LEAF_NODE	715:29	715:29	19	(
ARGUMENT	715:30	715:30	19	t2p -> pdf_datetime
FIELD	715:30	715:35	20	t2p -> pdf_datetime
LEAF_NODE	715:30	715:30	21	t2p
LEAF_NODE	715:33	715:33	21	->
LEAF_NODE	715:35	715:35	21	pdf_datetime
LEAF_NODE	715:47	715:47	19	)
LEAF_NODE	715:49	715:49	18	-
FIELD	715:51	715:51	18	1
LEAF_NODE	715:51	715:51	19	1
LEAF_NODE	715:52	715:52	17	]
ASSIGN_OP	715:54	715:54	15	=
LEAF_NODE	715:54	715:54	16	=
RVAL	715:56	715:56	15	'\0'
FIELD	715:56	715:56	16	'\0'
LEAF_NODE	715:56	715:56	17	'\0'
LEAF_NODE	715:60	715:60	13	;
LEAF_NODE	716:4	716:4	11	}
JUMP_STATEMENT	717:4	717:9	9	break DESTINATION ;
KEYWORD	717:4	717:4	10	break
LEAF_NODE	717:4	717:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	717:9	717:9	10	;
LEAF_NODE	718:3	718:3	9	case
LEAF_NODE	718:8	718:8	9	'c'
LEAF_NODE	718:11	718:11	9	:
EXPR_STATEMENT	719:4	719:67	9	strncpy ( t2p -> pdf_creator , optarg , sizeof ( t2p -> pdf_creator ) - 1 ) ;
EXPR	719:4	719:4	10	strncpy ( t2p -> pdf_creator , optarg , sizeof ( t2p -> pdf_creator ) - 1 )
FUNCTION_CALL	719:4	719:66	11	strncpy ( t2p -> pdf_creator , optarg , sizeof ( t2p -> pdf_creator ) - 1 )
CALLEE	719:4	719:4	12	strncpy
LEAF_NODE	719:4	719:4	13	strncpy
LEAF_NODE	719:11	719:11	12	(
ARGUMENT	719:12	719:12	12	t2p -> pdf_creator
FIELD	719:12	719:17	13	t2p -> pdf_creator
LEAF_NODE	719:12	719:12	14	t2p
LEAF_NODE	719:15	719:15	14	->
LEAF_NODE	719:17	719:17	14	pdf_creator
LEAF_NODE	719:28	719:28	12	,
ARGUMENT	719:30	719:30	12	optarg
FIELD	719:30	719:30	13	optarg
LEAF_NODE	719:30	719:30	14	optarg
LEAF_NODE	719:36	719:36	12	,
ARGUMENT	719:38	719:65	12	sizeof ( t2p -> pdf_creator ) - 1
FUNCTION_CALL	719:38	719:61	13	sizeof ( t2p -> pdf_creator )
CALLEE	719:38	719:38	14	sizeof
LEAF_NODE	719:38	719:38	15	sizeof
LEAF_NODE	719:44	719:44	14	(
ARGUMENT	719:45	719:45	14	t2p -> pdf_creator
FIELD	719:45	719:50	15	t2p -> pdf_creator
LEAF_NODE	719:45	719:45	16	t2p
LEAF_NODE	719:48	719:48	16	->
LEAF_NODE	719:50	719:50	16	pdf_creator
LEAF_NODE	719:61	719:61	14	)
LEAF_NODE	719:63	719:63	13	-
FIELD	719:65	719:65	13	1
LEAF_NODE	719:65	719:65	14	1
LEAF_NODE	719:66	719:66	12	)
LEAF_NODE	719:67	719:67	10	;
EXPR_STATEMENT	720:4	720:57	9	t2p -> pdf_creator [ sizeof ( t2p -> pdf_creator ) - 1 ] = '\0' ;
EXPR	720:4	720:4	10	t2p -> pdf_creator [ sizeof ( t2p -> pdf_creator ) - 1 ] = '\0'
ASSIGN	720:4	720:53	11	t2p -> pdf_creator [ sizeof ( t2p -> pdf_creator ) - 1 ] = '\0'
LVAL	720:4	720:4	12	t2p -> pdf_creator [ sizeof ( t2p -> pdf_creator ) - 1 ]
FIELD	720:4	720:49	13	t2p -> pdf_creator [ sizeof ( t2p -> pdf_creator ) - 1 ]
LEAF_NODE	720:4	720:4	14	t2p
LEAF_NODE	720:7	720:7	14	->
LEAF_NODE	720:9	720:9	14	pdf_creator
LEAF_NODE	720:20	720:20	14	[
EXPR	720:21	720:48	14	sizeof ( t2p -> pdf_creator ) - 1
FUNCTION_CALL	720:21	720:44	15	sizeof ( t2p -> pdf_creator )
CALLEE	720:21	720:21	16	sizeof
LEAF_NODE	720:21	720:21	17	sizeof
LEAF_NODE	720:27	720:27	16	(
ARGUMENT	720:28	720:28	16	t2p -> pdf_creator
FIELD	720:28	720:33	17	t2p -> pdf_creator
LEAF_NODE	720:28	720:28	18	t2p
LEAF_NODE	720:31	720:31	18	->
LEAF_NODE	720:33	720:33	18	pdf_creator
LEAF_NODE	720:44	720:44	16	)
LEAF_NODE	720:46	720:46	15	-
FIELD	720:48	720:48	15	1
LEAF_NODE	720:48	720:48	16	1
LEAF_NODE	720:49	720:49	14	]
ASSIGN_OP	720:51	720:51	12	=
LEAF_NODE	720:51	720:51	13	=
RVAL	720:53	720:53	12	'\0'
FIELD	720:53	720:53	13	'\0'
LEAF_NODE	720:53	720:53	14	'\0'
LEAF_NODE	720:57	720:57	10	;
JUMP_STATEMENT	721:4	721:9	9	break DESTINATION ;
KEYWORD	721:4	721:4	10	break
LEAF_NODE	721:4	721:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	721:9	721:9	10	;
LEAF_NODE	722:3	722:3	9	case
LEAF_NODE	722:8	722:8	9	'a'
LEAF_NODE	722:11	722:11	9	:
EXPR_STATEMENT	723:4	723:65	9	strncpy ( t2p -> pdf_author , optarg , sizeof ( t2p -> pdf_author ) - 1 ) ;
EXPR	723:4	723:4	10	strncpy ( t2p -> pdf_author , optarg , sizeof ( t2p -> pdf_author ) - 1 )
FUNCTION_CALL	723:4	723:64	11	strncpy ( t2p -> pdf_author , optarg , sizeof ( t2p -> pdf_author ) - 1 )
CALLEE	723:4	723:4	12	strncpy
LEAF_NODE	723:4	723:4	13	strncpy
LEAF_NODE	723:11	723:11	12	(
ARGUMENT	723:12	723:12	12	t2p -> pdf_author
FIELD	723:12	723:17	13	t2p -> pdf_author
LEAF_NODE	723:12	723:12	14	t2p
LEAF_NODE	723:15	723:15	14	->
LEAF_NODE	723:17	723:17	14	pdf_author
LEAF_NODE	723:27	723:27	12	,
ARGUMENT	723:29	723:29	12	optarg
FIELD	723:29	723:29	13	optarg
LEAF_NODE	723:29	723:29	14	optarg
LEAF_NODE	723:35	723:35	12	,
ARGUMENT	723:37	723:63	12	sizeof ( t2p -> pdf_author ) - 1
FUNCTION_CALL	723:37	723:59	13	sizeof ( t2p -> pdf_author )
CALLEE	723:37	723:37	14	sizeof
LEAF_NODE	723:37	723:37	15	sizeof
LEAF_NODE	723:43	723:43	14	(
ARGUMENT	723:44	723:44	14	t2p -> pdf_author
FIELD	723:44	723:49	15	t2p -> pdf_author
LEAF_NODE	723:44	723:44	16	t2p
LEAF_NODE	723:47	723:47	16	->
LEAF_NODE	723:49	723:49	16	pdf_author
LEAF_NODE	723:59	723:59	14	)
LEAF_NODE	723:61	723:61	13	-
FIELD	723:63	723:63	13	1
LEAF_NODE	723:63	723:63	14	1
LEAF_NODE	723:64	723:64	12	)
LEAF_NODE	723:65	723:65	10	;
EXPR_STATEMENT	724:4	724:55	9	t2p -> pdf_author [ sizeof ( t2p -> pdf_author ) - 1 ] = '\0' ;
EXPR	724:4	724:4	10	t2p -> pdf_author [ sizeof ( t2p -> pdf_author ) - 1 ] = '\0'
ASSIGN	724:4	724:51	11	t2p -> pdf_author [ sizeof ( t2p -> pdf_author ) - 1 ] = '\0'
LVAL	724:4	724:4	12	t2p -> pdf_author [ sizeof ( t2p -> pdf_author ) - 1 ]
FIELD	724:4	724:47	13	t2p -> pdf_author [ sizeof ( t2p -> pdf_author ) - 1 ]
LEAF_NODE	724:4	724:4	14	t2p
LEAF_NODE	724:7	724:7	14	->
LEAF_NODE	724:9	724:9	14	pdf_author
LEAF_NODE	724:19	724:19	14	[
EXPR	724:20	724:46	14	sizeof ( t2p -> pdf_author ) - 1
FUNCTION_CALL	724:20	724:42	15	sizeof ( t2p -> pdf_author )
CALLEE	724:20	724:20	16	sizeof
LEAF_NODE	724:20	724:20	17	sizeof
LEAF_NODE	724:26	724:26	16	(
ARGUMENT	724:27	724:27	16	t2p -> pdf_author
FIELD	724:27	724:32	17	t2p -> pdf_author
LEAF_NODE	724:27	724:27	18	t2p
LEAF_NODE	724:30	724:30	18	->
LEAF_NODE	724:32	724:32	18	pdf_author
LEAF_NODE	724:42	724:42	16	)
LEAF_NODE	724:44	724:44	15	-
FIELD	724:46	724:46	15	1
LEAF_NODE	724:46	724:46	16	1
LEAF_NODE	724:47	724:47	14	]
ASSIGN_OP	724:49	724:49	12	=
LEAF_NODE	724:49	724:49	13	=
RVAL	724:51	724:51	12	'\0'
FIELD	724:51	724:51	13	'\0'
LEAF_NODE	724:51	724:51	14	'\0'
LEAF_NODE	724:55	724:55	10	;
JUMP_STATEMENT	725:4	725:9	9	break DESTINATION ;
KEYWORD	725:4	725:4	10	break
LEAF_NODE	725:4	725:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	725:9	725:9	10	;
LEAF_NODE	726:3	726:3	9	case
LEAF_NODE	726:8	726:8	9	't'
LEAF_NODE	726:11	726:11	9	:
EXPR_STATEMENT	727:4	727:63	9	strncpy ( t2p -> pdf_title , optarg , sizeof ( t2p -> pdf_title ) - 1 ) ;
EXPR	727:4	727:4	10	strncpy ( t2p -> pdf_title , optarg , sizeof ( t2p -> pdf_title ) - 1 )
FUNCTION_CALL	727:4	727:62	11	strncpy ( t2p -> pdf_title , optarg , sizeof ( t2p -> pdf_title ) - 1 )
CALLEE	727:4	727:4	12	strncpy
LEAF_NODE	727:4	727:4	13	strncpy
LEAF_NODE	727:11	727:11	12	(
ARGUMENT	727:12	727:12	12	t2p -> pdf_title
FIELD	727:12	727:17	13	t2p -> pdf_title
LEAF_NODE	727:12	727:12	14	t2p
LEAF_NODE	727:15	727:15	14	->
LEAF_NODE	727:17	727:17	14	pdf_title
LEAF_NODE	727:26	727:26	12	,
ARGUMENT	727:28	727:28	12	optarg
FIELD	727:28	727:28	13	optarg
LEAF_NODE	727:28	727:28	14	optarg
LEAF_NODE	727:34	727:34	12	,
ARGUMENT	727:36	727:61	12	sizeof ( t2p -> pdf_title ) - 1
FUNCTION_CALL	727:36	727:57	13	sizeof ( t2p -> pdf_title )
CALLEE	727:36	727:36	14	sizeof
LEAF_NODE	727:36	727:36	15	sizeof
LEAF_NODE	727:42	727:42	14	(
ARGUMENT	727:43	727:43	14	t2p -> pdf_title
FIELD	727:43	727:48	15	t2p -> pdf_title
LEAF_NODE	727:43	727:43	16	t2p
LEAF_NODE	727:46	727:46	16	->
LEAF_NODE	727:48	727:48	16	pdf_title
LEAF_NODE	727:57	727:57	14	)
LEAF_NODE	727:59	727:59	13	-
FIELD	727:61	727:61	13	1
LEAF_NODE	727:61	727:61	14	1
LEAF_NODE	727:62	727:62	12	)
LEAF_NODE	727:63	727:63	10	;
EXPR_STATEMENT	728:4	728:53	9	t2p -> pdf_title [ sizeof ( t2p -> pdf_title ) - 1 ] = '\0' ;
EXPR	728:4	728:4	10	t2p -> pdf_title [ sizeof ( t2p -> pdf_title ) - 1 ] = '\0'
ASSIGN	728:4	728:49	11	t2p -> pdf_title [ sizeof ( t2p -> pdf_title ) - 1 ] = '\0'
LVAL	728:4	728:4	12	t2p -> pdf_title [ sizeof ( t2p -> pdf_title ) - 1 ]
FIELD	728:4	728:45	13	t2p -> pdf_title [ sizeof ( t2p -> pdf_title ) - 1 ]
LEAF_NODE	728:4	728:4	14	t2p
LEAF_NODE	728:7	728:7	14	->
LEAF_NODE	728:9	728:9	14	pdf_title
LEAF_NODE	728:18	728:18	14	[
EXPR	728:19	728:44	14	sizeof ( t2p -> pdf_title ) - 1
FUNCTION_CALL	728:19	728:40	15	sizeof ( t2p -> pdf_title )
CALLEE	728:19	728:19	16	sizeof
LEAF_NODE	728:19	728:19	17	sizeof
LEAF_NODE	728:25	728:25	16	(
ARGUMENT	728:26	728:26	16	t2p -> pdf_title
FIELD	728:26	728:31	17	t2p -> pdf_title
LEAF_NODE	728:26	728:26	18	t2p
LEAF_NODE	728:29	728:29	18	->
LEAF_NODE	728:31	728:31	18	pdf_title
LEAF_NODE	728:40	728:40	16	)
LEAF_NODE	728:42	728:42	15	-
FIELD	728:44	728:44	15	1
LEAF_NODE	728:44	728:44	16	1
LEAF_NODE	728:45	728:45	14	]
ASSIGN_OP	728:47	728:47	12	=
LEAF_NODE	728:47	728:47	13	=
RVAL	728:49	728:49	12	'\0'
FIELD	728:49	728:49	13	'\0'
LEAF_NODE	728:49	728:49	14	'\0'
LEAF_NODE	728:53	728:53	10	;
JUMP_STATEMENT	729:4	729:9	9	break DESTINATION ;
KEYWORD	729:4	729:4	10	break
LEAF_NODE	729:4	729:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	729:9	729:9	10	;
LEAF_NODE	730:3	730:3	9	case
LEAF_NODE	730:8	730:8	9	's'
LEAF_NODE	730:11	730:11	9	:
EXPR_STATEMENT	731:4	731:67	9	strncpy ( t2p -> pdf_subject , optarg , sizeof ( t2p -> pdf_subject ) - 1 ) ;
EXPR	731:4	731:4	10	strncpy ( t2p -> pdf_subject , optarg , sizeof ( t2p -> pdf_subject ) - 1 )
FUNCTION_CALL	731:4	731:66	11	strncpy ( t2p -> pdf_subject , optarg , sizeof ( t2p -> pdf_subject ) - 1 )
CALLEE	731:4	731:4	12	strncpy
LEAF_NODE	731:4	731:4	13	strncpy
LEAF_NODE	731:11	731:11	12	(
ARGUMENT	731:12	731:12	12	t2p -> pdf_subject
FIELD	731:12	731:17	13	t2p -> pdf_subject
LEAF_NODE	731:12	731:12	14	t2p
LEAF_NODE	731:15	731:15	14	->
LEAF_NODE	731:17	731:17	14	pdf_subject
LEAF_NODE	731:28	731:28	12	,
ARGUMENT	731:30	731:30	12	optarg
FIELD	731:30	731:30	13	optarg
LEAF_NODE	731:30	731:30	14	optarg
LEAF_NODE	731:36	731:36	12	,
ARGUMENT	731:38	731:65	12	sizeof ( t2p -> pdf_subject ) - 1
FUNCTION_CALL	731:38	731:61	13	sizeof ( t2p -> pdf_subject )
CALLEE	731:38	731:38	14	sizeof
LEAF_NODE	731:38	731:38	15	sizeof
LEAF_NODE	731:44	731:44	14	(
ARGUMENT	731:45	731:45	14	t2p -> pdf_subject
FIELD	731:45	731:50	15	t2p -> pdf_subject
LEAF_NODE	731:45	731:45	16	t2p
LEAF_NODE	731:48	731:48	16	->
LEAF_NODE	731:50	731:50	16	pdf_subject
LEAF_NODE	731:61	731:61	14	)
LEAF_NODE	731:63	731:63	13	-
FIELD	731:65	731:65	13	1
LEAF_NODE	731:65	731:65	14	1
LEAF_NODE	731:66	731:66	12	)
LEAF_NODE	731:67	731:67	10	;
EXPR_STATEMENT	732:4	732:57	9	t2p -> pdf_subject [ sizeof ( t2p -> pdf_subject ) - 1 ] = '\0' ;
EXPR	732:4	732:4	10	t2p -> pdf_subject [ sizeof ( t2p -> pdf_subject ) - 1 ] = '\0'
ASSIGN	732:4	732:53	11	t2p -> pdf_subject [ sizeof ( t2p -> pdf_subject ) - 1 ] = '\0'
LVAL	732:4	732:4	12	t2p -> pdf_subject [ sizeof ( t2p -> pdf_subject ) - 1 ]
FIELD	732:4	732:49	13	t2p -> pdf_subject [ sizeof ( t2p -> pdf_subject ) - 1 ]
LEAF_NODE	732:4	732:4	14	t2p
LEAF_NODE	732:7	732:7	14	->
LEAF_NODE	732:9	732:9	14	pdf_subject
LEAF_NODE	732:20	732:20	14	[
EXPR	732:21	732:48	14	sizeof ( t2p -> pdf_subject ) - 1
FUNCTION_CALL	732:21	732:44	15	sizeof ( t2p -> pdf_subject )
CALLEE	732:21	732:21	16	sizeof
LEAF_NODE	732:21	732:21	17	sizeof
LEAF_NODE	732:27	732:27	16	(
ARGUMENT	732:28	732:28	16	t2p -> pdf_subject
FIELD	732:28	732:33	17	t2p -> pdf_subject
LEAF_NODE	732:28	732:28	18	t2p
LEAF_NODE	732:31	732:31	18	->
LEAF_NODE	732:33	732:33	18	pdf_subject
LEAF_NODE	732:44	732:44	16	)
LEAF_NODE	732:46	732:46	15	-
FIELD	732:48	732:48	15	1
LEAF_NODE	732:48	732:48	16	1
LEAF_NODE	732:49	732:49	14	]
ASSIGN_OP	732:51	732:51	12	=
LEAF_NODE	732:51	732:51	13	=
RVAL	732:53	732:53	12	'\0'
FIELD	732:53	732:53	13	'\0'
LEAF_NODE	732:53	732:53	14	'\0'
LEAF_NODE	732:57	732:57	10	;
JUMP_STATEMENT	733:4	733:9	9	break DESTINATION ;
KEYWORD	733:4	733:4	10	break
LEAF_NODE	733:4	733:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	733:9	733:9	10	;
LEAF_NODE	734:3	734:3	9	case
LEAF_NODE	734:8	734:8	9	'k'
LEAF_NODE	734:11	734:11	9	:
EXPR_STATEMENT	735:4	735:69	9	strncpy ( t2p -> pdf_keywords , optarg , sizeof ( t2p -> pdf_keywords ) - 1 ) ;
EXPR	735:4	735:4	10	strncpy ( t2p -> pdf_keywords , optarg , sizeof ( t2p -> pdf_keywords ) - 1 )
FUNCTION_CALL	735:4	735:68	11	strncpy ( t2p -> pdf_keywords , optarg , sizeof ( t2p -> pdf_keywords ) - 1 )
CALLEE	735:4	735:4	12	strncpy
LEAF_NODE	735:4	735:4	13	strncpy
LEAF_NODE	735:11	735:11	12	(
ARGUMENT	735:12	735:12	12	t2p -> pdf_keywords
FIELD	735:12	735:17	13	t2p -> pdf_keywords
LEAF_NODE	735:12	735:12	14	t2p
LEAF_NODE	735:15	735:15	14	->
LEAF_NODE	735:17	735:17	14	pdf_keywords
LEAF_NODE	735:29	735:29	12	,
ARGUMENT	735:31	735:31	12	optarg
FIELD	735:31	735:31	13	optarg
LEAF_NODE	735:31	735:31	14	optarg
LEAF_NODE	735:37	735:37	12	,
ARGUMENT	735:39	735:67	12	sizeof ( t2p -> pdf_keywords ) - 1
FUNCTION_CALL	735:39	735:63	13	sizeof ( t2p -> pdf_keywords )
CALLEE	735:39	735:39	14	sizeof
LEAF_NODE	735:39	735:39	15	sizeof
LEAF_NODE	735:45	735:45	14	(
ARGUMENT	735:46	735:46	14	t2p -> pdf_keywords
FIELD	735:46	735:51	15	t2p -> pdf_keywords
LEAF_NODE	735:46	735:46	16	t2p
LEAF_NODE	735:49	735:49	16	->
LEAF_NODE	735:51	735:51	16	pdf_keywords
LEAF_NODE	735:63	735:63	14	)
LEAF_NODE	735:65	735:65	13	-
FIELD	735:67	735:67	13	1
LEAF_NODE	735:67	735:67	14	1
LEAF_NODE	735:68	735:68	12	)
LEAF_NODE	735:69	735:69	10	;
EXPR_STATEMENT	736:4	736:59	9	t2p -> pdf_keywords [ sizeof ( t2p -> pdf_keywords ) - 1 ] = '\0' ;
EXPR	736:4	736:4	10	t2p -> pdf_keywords [ sizeof ( t2p -> pdf_keywords ) - 1 ] = '\0'
ASSIGN	736:4	736:55	11	t2p -> pdf_keywords [ sizeof ( t2p -> pdf_keywords ) - 1 ] = '\0'
LVAL	736:4	736:4	12	t2p -> pdf_keywords [ sizeof ( t2p -> pdf_keywords ) - 1 ]
FIELD	736:4	736:51	13	t2p -> pdf_keywords [ sizeof ( t2p -> pdf_keywords ) - 1 ]
LEAF_NODE	736:4	736:4	14	t2p
LEAF_NODE	736:7	736:7	14	->
LEAF_NODE	736:9	736:9	14	pdf_keywords
LEAF_NODE	736:21	736:21	14	[
EXPR	736:22	736:50	14	sizeof ( t2p -> pdf_keywords ) - 1
FUNCTION_CALL	736:22	736:46	15	sizeof ( t2p -> pdf_keywords )
CALLEE	736:22	736:22	16	sizeof
LEAF_NODE	736:22	736:22	17	sizeof
LEAF_NODE	736:28	736:28	16	(
ARGUMENT	736:29	736:29	16	t2p -> pdf_keywords
FIELD	736:29	736:34	17	t2p -> pdf_keywords
LEAF_NODE	736:29	736:29	18	t2p
LEAF_NODE	736:32	736:32	18	->
LEAF_NODE	736:34	736:34	18	pdf_keywords
LEAF_NODE	736:46	736:46	16	)
LEAF_NODE	736:48	736:48	15	-
FIELD	736:50	736:50	15	1
LEAF_NODE	736:50	736:50	16	1
LEAF_NODE	736:51	736:51	14	]
ASSIGN_OP	736:53	736:53	12	=
LEAF_NODE	736:53	736:53	13	=
RVAL	736:55	736:55	12	'\0'
FIELD	736:55	736:55	13	'\0'
LEAF_NODE	736:55	736:55	14	'\0'
LEAF_NODE	736:59	736:59	10	;
JUMP_STATEMENT	737:4	737:9	9	break DESTINATION ;
KEYWORD	737:4	737:4	10	break
LEAF_NODE	737:4	737:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	737:9	737:9	10	;
LEAF_NODE	738:3	738:3	9	case
LEAF_NODE	738:8	738:8	9	'b'
LEAF_NODE	738:11	738:11	9	:
EXPR_STATEMENT	739:4	739:34	9	t2p -> pdf_image_interpolate = 1 ;
EXPR	739:4	739:4	10	t2p -> pdf_image_interpolate = 1
ASSIGN	739:4	739:33	11	t2p -> pdf_image_interpolate = 1
LVAL	739:4	739:4	12	t2p -> pdf_image_interpolate
FIELD	739:4	739:9	13	t2p -> pdf_image_interpolate
LEAF_NODE	739:4	739:4	14	t2p
LEAF_NODE	739:7	739:7	14	->
LEAF_NODE	739:9	739:9	14	pdf_image_interpolate
ASSIGN_OP	739:31	739:31	12	=
LEAF_NODE	739:31	739:31	13	=
RVAL	739:33	739:33	12	1
FIELD	739:33	739:33	13	1
LEAF_NODE	739:33	739:33	14	1
LEAF_NODE	739:34	739:34	10	;
JUMP_STATEMENT	740:4	740:9	9	break DESTINATION ;
KEYWORD	740:4	740:4	10	break
LEAF_NODE	740:4	740:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	740:9	740:9	10	;
LEAF_NODE	741:3	741:3	9	case
LEAF_NODE	741:8	741:8	9	'h'
LEAF_NODE	741:11	741:11	9	:
LEAF_NODE	742:3	742:3	9	case
LEAF_NODE	742:8	742:8	9	'?'
LEAF_NODE	742:11	742:11	9	:
EXPR_STATEMENT	743:4	743:20	9	tiff2pdf_usage ( ) ;
EXPR	743:4	743:4	10	tiff2pdf_usage ( )
FUNCTION_CALL	743:4	743:19	11	tiff2pdf_usage ( )
CALLEE	743:4	743:4	12	tiff2pdf_usage
LEAF_NODE	743:4	743:4	13	tiff2pdf_usage
LEAF_NODE	743:18	743:18	12	(
LEAF_NODE	743:19	743:19	12	)
LEAF_NODE	743:20	743:20	10	;
JUMP_STATEMENT	744:4	744:16	9	goto success ;
KEYWORD	744:4	744:4	10	goto
LEAF_NODE	744:4	744:4	11	goto
DESTINATION	744:9	744:9	10	success
LEAF_NODE	744:9	744:9	11	success
LEAF_NODE	744:16	744:16	10	;
JUMP_STATEMENT	745:4	745:9	9	break DESTINATION ;
KEYWORD	745:4	745:4	10	break
LEAF_NODE	745:4	745:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	745:9	745:9	10	;
LEAF_NODE	746:2	746:2	8	}
LEAF_NODE	747:1	747:1	5	}
SELECTION	752:1	752:19	3	
KEYWORD	752:1	752:1	4	if
LEAF_NODE	752:1	752:1	5	if
LEAF_NODE	752:3	752:3	4	(
CONDITION	752:4	752:4	4	argc > optind
EXPR	752:4	752:11	5	argc > optind
FIELD	752:4	752:4	6	argc
LEAF_NODE	752:4	752:4	7	argc
REL_OPERATOR	752:9	752:9	6	>
LEAF_NODE	752:9	752:9	7	>
FIELD	752:11	752:11	6	optind
LEAF_NODE	752:11	752:11	7	optind
LEAF_NODE	752:17	752:17	4	)
STATEMENTS	752:19	760:1	4	
LEAF_NODE	752:19	752:19	5	{
STATEMENTS	753:2	754:2	5	
EXPR_STATEMENT	753:2	753:39	6	input = TIFFOpen ( argv [ optind ++ ] , "r" ) ;
EXPR	753:2	753:2	7	input = TIFFOpen ( argv [ optind ++ ] , "r" )
ASSIGN	753:2	753:10	8	input = TIFFOpen ( argv [ optind ++ ] , "r" )
LVAL	753:2	753:2	9	input
FIELD	753:2	753:2	10	input
LEAF_NODE	753:2	753:2	11	input
ASSIGN_OP	753:8	753:8	9	=
LEAF_NODE	753:8	753:8	10	=
RVAL	753:10	753:10	9	TIFFOpen ( argv [ optind ++ ] , "r" )
FUNCTION_CALL	753:10	753:38	10	TIFFOpen ( argv [ optind ++ ] , "r" )
CALLEE	753:10	753:10	11	TIFFOpen
LEAF_NODE	753:10	753:10	12	TIFFOpen
LEAF_NODE	753:18	753:18	11	(
ARGUMENT	753:19	753:19	11	argv [ optind ++ ]
FIELD	753:19	753:32	12	argv [ optind ++ ]
LEAF_NODE	753:19	753:19	13	argv
LEAF_NODE	753:23	753:23	13	[
EXPR	753:24	753:24	13	optind ++
FIELD	753:24	753:30	14	optind ++
LEAF_NODE	753:24	753:24	15	optind
LEAF_NODE	753:30	753:30	15	++
LEAF_NODE	753:32	753:32	13	]
LEAF_NODE	753:33	753:33	11	,
ARGUMENT	753:35	753:35	11	"r"
FIELD	753:35	753:35	12	"r"
LEAF_NODE	753:35	753:35	13	"r"
LEAF_NODE	753:38	753:38	11	)
LEAF_NODE	753:39	753:39	7	;
SELECTION	754:2	754:19	6	
KEYWORD	754:2	754:2	7	if
LEAF_NODE	754:2	754:2	8	if
LEAF_NODE	754:5	754:5	7	(
CONDITION	754:6	754:6	7	input == NULL
EXPR	754:6	754:13	8	input == NULL
FIELD	754:6	754:6	9	input
LEAF_NODE	754:6	754:6	10	input
EQ_OPERATOR	754:11	754:11	9	==
LEAF_NODE	754:11	754:11	10	==
FIELD	754:13	754:13	9	NULL
LEAF_NODE	754:13	754:13	10	NULL
LEAF_NODE	754:17	754:17	7	)
STATEMENTS	754:19	759:2	7	
LEAF_NODE	754:19	754:19	8	{
STATEMENTS	755:3	758:3	8	
EXPR_STATEMENT	755:3	757:21	9	TIFFError ( TIFF2PDF_MODULE , "Can't open input file %s for reading" , argv [ optind - 1 ] ) ;
EXPR	755:3	755:3	10	TIFFError ( TIFF2PDF_MODULE , "Can't open input file %s for reading" , argv [ optind - 1 ] )
FUNCTION_CALL	755:3	757:20	11	TIFFError ( TIFF2PDF_MODULE , "Can't open input file %s for reading" , argv [ optind - 1 ] )
CALLEE	755:3	755:3	12	TIFFError
LEAF_NODE	755:3	755:3	13	TIFFError
LEAF_NODE	755:12	755:12	12	(
ARGUMENT	755:13	755:13	12	TIFF2PDF_MODULE
FIELD	755:13	755:13	13	TIFF2PDF_MODULE
LEAF_NODE	755:13	755:13	14	TIFF2PDF_MODULE
LEAF_NODE	755:28	755:28	12	,
ARGUMENT	756:6	756:6	12	"Can't open input file %s for reading"
FIELD	756:6	756:6	13	"Can't open input file %s for reading"
LEAF_NODE	756:6	756:6	14	"Can't open input file %s for reading"
LEAF_NODE	756:44	756:44	12	,
ARGUMENT	757:6	757:6	12	argv [ optind - 1 ]
FIELD	757:6	757:19	13	argv [ optind - 1 ]
LEAF_NODE	757:6	757:6	14	argv
LEAF_NODE	757:10	757:10	14	[
EXPR	757:11	757:18	14	optind - 1
FIELD	757:11	757:11	15	optind
LEAF_NODE	757:11	757:11	16	optind
LEAF_NODE	757:17	757:17	15	-
FIELD	757:18	757:18	15	1
LEAF_NODE	757:18	757:18	16	1
LEAF_NODE	757:19	757:19	14	]
LEAF_NODE	757:20	757:20	12	)
LEAF_NODE	757:21	757:21	10	;
JUMP_STATEMENT	758:3	758:12	9	goto fail ;
KEYWORD	758:3	758:3	10	goto
LEAF_NODE	758:3	758:3	11	goto
DESTINATION	758:8	758:8	10	fail
LEAF_NODE	758:8	758:8	11	fail
LEAF_NODE	758:12	758:12	10	;
LEAF_NODE	759:2	759:2	8	}
LEAF_NODE	760:1	760:1	5	}
SELECTION	760:3	760:8	3	
KEYWORD	760:3	760:3	4	else
LEAF_NODE	760:3	760:3	5	else
STATEMENTS	760:8	764:1	4	
LEAF_NODE	760:8	760:8	5	{
STATEMENTS	761:2	763:2	5	
EXPR_STATEMENT	761:2	761:55	6	TIFFError ( TIFF2PDF_MODULE , "No input file specified" ) ;
EXPR	761:2	761:2	7	TIFFError ( TIFF2PDF_MODULE , "No input file specified" )
FUNCTION_CALL	761:2	761:54	8	TIFFError ( TIFF2PDF_MODULE , "No input file specified" )
CALLEE	761:2	761:2	9	TIFFError
LEAF_NODE	761:2	761:2	10	TIFFError
LEAF_NODE	761:11	761:11	9	(
ARGUMENT	761:12	761:12	9	TIFF2PDF_MODULE
FIELD	761:12	761:12	10	TIFF2PDF_MODULE
LEAF_NODE	761:12	761:12	11	TIFF2PDF_MODULE
LEAF_NODE	761:27	761:27	9	,
ARGUMENT	761:29	761:29	9	"No input file specified"
FIELD	761:29	761:29	10	"No input file specified"
LEAF_NODE	761:29	761:29	11	"No input file specified"
LEAF_NODE	761:54	761:54	9	)
LEAF_NODE	761:55	761:55	7	;
EXPR_STATEMENT	762:2	762:18	6	tiff2pdf_usage ( ) ;
EXPR	762:2	762:2	7	tiff2pdf_usage ( )
FUNCTION_CALL	762:2	762:17	8	tiff2pdf_usage ( )
CALLEE	762:2	762:2	9	tiff2pdf_usage
LEAF_NODE	762:2	762:2	10	tiff2pdf_usage
LEAF_NODE	762:16	762:16	9	(
LEAF_NODE	762:17	762:17	9	)
LEAF_NODE	762:18	762:18	7	;
JUMP_STATEMENT	763:2	763:11	6	goto fail ;
KEYWORD	763:2	763:2	7	goto
LEAF_NODE	763:2	763:2	8	goto
DESTINATION	763:7	763:7	7	fail
LEAF_NODE	763:7	763:7	8	fail
LEAF_NODE	763:11	763:11	7	;
LEAF_NODE	764:1	764:1	5	}
SELECTION	766:1	766:19	3	
KEYWORD	766:1	766:1	4	if
LEAF_NODE	766:1	766:1	5	if
LEAF_NODE	766:3	766:3	4	(
CONDITION	766:4	766:4	4	argc > optind
EXPR	766:4	766:11	5	argc > optind
FIELD	766:4	766:4	6	argc
LEAF_NODE	766:4	766:4	7	argc
REL_OPERATOR	766:9	766:9	6	>
LEAF_NODE	766:9	766:9	7	>
FIELD	766:11	766:11	6	optind
LEAF_NODE	766:11	766:11	7	optind
LEAF_NODE	766:17	766:17	4	)
STATEMENTS	766:19	771:1	4	
LEAF_NODE	766:19	766:19	5	{
STATEMENTS	767:2	770:2	5	
EXPR_STATEMENT	767:2	768:43	6	TIFFError ( TIFF2PDF_MODULE , "No support for multiple input files" ) ;
EXPR	767:2	767:2	7	TIFFError ( TIFF2PDF_MODULE , "No support for multiple input files" )
FUNCTION_CALL	767:2	768:42	8	TIFFError ( TIFF2PDF_MODULE , "No support for multiple input files" )
CALLEE	767:2	767:2	9	TIFFError
LEAF_NODE	767:2	767:2	10	TIFFError
LEAF_NODE	767:11	767:11	9	(
ARGUMENT	767:12	767:12	9	TIFF2PDF_MODULE
FIELD	767:12	767:12	10	TIFF2PDF_MODULE
LEAF_NODE	767:12	767:12	11	TIFF2PDF_MODULE
LEAF_NODE	767:27	767:27	9	,
ARGUMENT	768:5	768:5	9	"No support for multiple input files"
FIELD	768:5	768:5	10	"No support for multiple input files"
LEAF_NODE	768:5	768:5	11	"No support for multiple input files"
LEAF_NODE	768:42	768:42	9	)
LEAF_NODE	768:43	768:43	7	;
EXPR_STATEMENT	769:2	769:18	6	tiff2pdf_usage ( ) ;
EXPR	769:2	769:2	7	tiff2pdf_usage ( )
FUNCTION_CALL	769:2	769:17	8	tiff2pdf_usage ( )
CALLEE	769:2	769:2	9	tiff2pdf_usage
LEAF_NODE	769:2	769:2	10	tiff2pdf_usage
LEAF_NODE	769:16	769:16	9	(
LEAF_NODE	769:17	769:17	9	)
LEAF_NODE	769:18	769:18	7	;
JUMP_STATEMENT	770:2	770:11	6	goto fail ;
KEYWORD	770:2	770:2	7	goto
LEAF_NODE	770:2	770:2	8	goto
DESTINATION	770:7	770:7	7	fail
LEAF_NODE	770:7	770:7	8	fail
LEAF_NODE	770:11	770:11	7	;
LEAF_NODE	771:1	771:1	5	}
EXPR_STATEMENT	776:1	776:23	3	t2p -> outputdisable = 1 ;
EXPR	776:1	776:1	4	t2p -> outputdisable = 1
ASSIGN	776:1	776:22	5	t2p -> outputdisable = 1
LVAL	776:1	776:1	6	t2p -> outputdisable
FIELD	776:1	776:6	7	t2p -> outputdisable
LEAF_NODE	776:1	776:1	8	t2p
LEAF_NODE	776:4	776:4	8	->
LEAF_NODE	776:6	776:6	8	outputdisable
ASSIGN_OP	776:20	776:20	6	=
LEAF_NODE	776:20	776:20	7	=
RVAL	776:22	776:22	6	1
FIELD	776:22	776:22	7	1
LEAF_NODE	776:22	776:22	8	1
LEAF_NODE	776:23	776:23	4	;
SELECTION	777:1	777:18	3	
KEYWORD	777:1	777:1	4	if
LEAF_NODE	777:1	777:1	5	if
LEAF_NODE	777:4	777:4	4	(
CONDITION	777:5	777:5	4	outfilename
EXPR	777:5	777:5	5	outfilename
FIELD	777:5	777:5	6	outfilename
LEAF_NODE	777:5	777:5	7	outfilename
LEAF_NODE	777:16	777:16	4	)
STATEMENTS	777:18	785:1	4	
LEAF_NODE	777:18	777:18	5	{
STATEMENTS	778:2	779:2	5	
EXPR_STATEMENT	778:2	778:44	6	t2p -> outputfile = fopen ( outfilename , "wb" ) ;
EXPR	778:2	778:2	7	t2p -> outputfile = fopen ( outfilename , "wb" )
ASSIGN	778:2	778:20	8	t2p -> outputfile = fopen ( outfilename , "wb" )
LVAL	778:2	778:2	9	t2p -> outputfile
FIELD	778:2	778:7	10	t2p -> outputfile
LEAF_NODE	778:2	778:2	11	t2p
LEAF_NODE	778:5	778:5	11	->
LEAF_NODE	778:7	778:7	11	outputfile
ASSIGN_OP	778:18	778:18	9	=
LEAF_NODE	778:18	778:18	10	=
RVAL	778:20	778:20	9	fopen ( outfilename , "wb" )
FUNCTION_CALL	778:20	778:43	10	fopen ( outfilename , "wb" )
CALLEE	778:20	778:20	11	fopen
LEAF_NODE	778:20	778:20	12	fopen
LEAF_NODE	778:25	778:25	11	(
ARGUMENT	778:26	778:26	11	outfilename
FIELD	778:26	778:26	12	outfilename
LEAF_NODE	778:26	778:26	13	outfilename
LEAF_NODE	778:37	778:37	11	,
ARGUMENT	778:39	778:39	11	"wb"
FIELD	778:39	778:39	12	"wb"
LEAF_NODE	778:39	778:39	13	"wb"
LEAF_NODE	778:43	778:43	11	)
LEAF_NODE	778:44	778:44	7	;
SELECTION	779:2	779:31	6	
KEYWORD	779:2	779:2	7	if
LEAF_NODE	779:2	779:2	8	if
LEAF_NODE	779:5	779:5	7	(
CONDITION	779:6	779:6	7	t2p -> outputfile == NULL
EXPR	779:6	779:25	8	t2p -> outputfile == NULL
FIELD	779:6	779:11	9	t2p -> outputfile
LEAF_NODE	779:6	779:6	10	t2p
LEAF_NODE	779:9	779:9	10	->
LEAF_NODE	779:11	779:11	10	outputfile
EQ_OPERATOR	779:22	779:22	9	==
LEAF_NODE	779:22	779:22	10	==
FIELD	779:25	779:25	9	NULL
LEAF_NODE	779:25	779:25	10	NULL
LEAF_NODE	779:29	779:29	7	)
STATEMENTS	779:31	784:2	7	
LEAF_NODE	779:31	779:31	8	{
STATEMENTS	780:3	783:3	8	
EXPR_STATEMENT	780:3	782:18	9	TIFFError ( TIFF2PDF_MODULE , "Can't open output file %s for writing" , outfilename ) ;
EXPR	780:3	780:3	10	TIFFError ( TIFF2PDF_MODULE , "Can't open output file %s for writing" , outfilename )
FUNCTION_CALL	780:3	782:17	11	TIFFError ( TIFF2PDF_MODULE , "Can't open output file %s for writing" , outfilename )
CALLEE	780:3	780:3	12	TIFFError
LEAF_NODE	780:3	780:3	13	TIFFError
LEAF_NODE	780:12	780:12	12	(
ARGUMENT	780:13	780:13	12	TIFF2PDF_MODULE
FIELD	780:13	780:13	13	TIFF2PDF_MODULE
LEAF_NODE	780:13	780:13	14	TIFF2PDF_MODULE
LEAF_NODE	780:28	780:28	12	,
ARGUMENT	781:6	781:6	12	"Can't open output file %s for writing"
FIELD	781:6	781:6	13	"Can't open output file %s for writing"
LEAF_NODE	781:6	781:6	14	"Can't open output file %s for writing"
LEAF_NODE	781:45	781:45	12	,
ARGUMENT	782:6	782:6	12	outfilename
FIELD	782:6	782:6	13	outfilename
LEAF_NODE	782:6	782:6	14	outfilename
LEAF_NODE	782:17	782:17	12	)
LEAF_NODE	782:18	782:18	10	;
JUMP_STATEMENT	783:3	783:12	9	goto fail ;
KEYWORD	783:3	783:3	10	goto
LEAF_NODE	783:3	783:3	11	goto
DESTINATION	783:8	783:8	10	fail
LEAF_NODE	783:8	783:8	11	fail
LEAF_NODE	783:12	783:12	10	;
LEAF_NODE	784:2	784:2	8	}
LEAF_NODE	785:1	785:1	5	}
SELECTION	785:3	785:8	3	
KEYWORD	785:3	785:3	4	else
LEAF_NODE	785:3	785:3	5	else
STATEMENTS	785:8	788:1	4	
LEAF_NODE	785:8	785:8	5	{
STATEMENTS	786:2	787:2	5	
EXPR_STATEMENT	786:2	786:19	6	outfilename = "-" ;
EXPR	786:2	786:2	7	outfilename = "-"
ASSIGN	786:2	786:16	8	outfilename = "-"
LVAL	786:2	786:2	9	outfilename
FIELD	786:2	786:2	10	outfilename
LEAF_NODE	786:2	786:2	11	outfilename
ASSIGN_OP	786:14	786:14	9	=
LEAF_NODE	786:14	786:14	10	=
RVAL	786:16	786:16	9	"-"
FIELD	786:16	786:16	10	"-"
LEAF_NODE	786:16	786:16	11	"-"
LEAF_NODE	786:19	786:19	7	;
EXPR_STATEMENT	787:2	787:26	6	t2p -> outputfile = stdout ;
EXPR	787:2	787:2	7	t2p -> outputfile = stdout
ASSIGN	787:2	787:20	8	t2p -> outputfile = stdout
LVAL	787:2	787:2	9	t2p -> outputfile
FIELD	787:2	787:7	10	t2p -> outputfile
LEAF_NODE	787:2	787:2	11	t2p
LEAF_NODE	787:5	787:5	11	->
LEAF_NODE	787:7	787:7	11	outputfile
ASSIGN_OP	787:18	787:18	9	=
LEAF_NODE	787:18	787:18	10	=
RVAL	787:20	787:20	9	stdout
FIELD	787:20	787:20	10	stdout
LEAF_NODE	787:20	787:20	11	stdout
LEAF_NODE	787:26	787:26	7	;
LEAF_NODE	788:1	788:1	5	}
EXPR_STATEMENT	790:1	793:31	3	output = TIFFClientOpen ( outfilename , "w" , ( thandle_t ) t2p , t2p_readproc , t2p_writeproc , t2p_seekproc , t2p_closeproc , t2p_sizeproc , t2p_mapproc , t2p_unmapproc ) ;
EXPR	790:1	790:1	4	output = TIFFClientOpen ( outfilename , "w" , ( thandle_t ) t2p , t2p_readproc , t2p_writeproc , t2p_seekproc , t2p_closeproc , t2p_sizeproc , t2p_mapproc , t2p_unmapproc )
ASSIGN	790:1	790:10	5	output = TIFFClientOpen ( outfilename , "w" , ( thandle_t ) t2p , t2p_readproc , t2p_writeproc , t2p_seekproc , t2p_closeproc , t2p_sizeproc , t2p_mapproc , t2p_unmapproc )
LVAL	790:1	790:1	6	output
FIELD	790:1	790:1	7	output
LEAF_NODE	790:1	790:1	8	output
ASSIGN_OP	790:8	790:8	6	=
LEAF_NODE	790:8	790:8	7	=
RVAL	790:10	790:10	6	TIFFClientOpen ( outfilename , "w" , ( thandle_t ) t2p , t2p_readproc , t2p_writeproc , t2p_seekproc , t2p_closeproc , t2p_sizeproc , t2p_mapproc , t2p_unmapproc )
FUNCTION_CALL	790:10	793:30	7	TIFFClientOpen ( outfilename , "w" , ( thandle_t ) t2p , t2p_readproc , t2p_writeproc , t2p_seekproc , t2p_closeproc , t2p_sizeproc , t2p_mapproc , t2p_unmapproc )
CALLEE	790:10	790:10	8	TIFFClientOpen
LEAF_NODE	790:10	790:10	9	TIFFClientOpen
LEAF_NODE	790:24	790:24	8	(
ARGUMENT	790:25	790:25	8	outfilename
FIELD	790:25	790:25	9	outfilename
LEAF_NODE	790:25	790:25	10	outfilename
LEAF_NODE	790:36	790:36	8	,
ARGUMENT	790:38	790:38	8	"w"
FIELD	790:38	790:38	9	"w"
LEAF_NODE	790:38	790:38	10	"w"
LEAF_NODE	790:41	790:41	8	,
ARGUMENT	790:43	790:55	8	( thandle_t ) t2p
LEAF_NODE	790:43	790:43	9	(
TYPE_NAME	790:44	790:44	9	thandle_t
LEAF_NODE	790:44	790:44	10	thandle_t
LEAF_NODE	790:53	790:53	9	)
FIELD	790:55	790:55	9	t2p
LEAF_NODE	790:55	790:55	10	t2p
LEAF_NODE	790:58	790:58	8	,
ARGUMENT	791:4	791:4	8	t2p_readproc
FIELD	791:4	791:4	9	t2p_readproc
LEAF_NODE	791:4	791:4	10	t2p_readproc
LEAF_NODE	791:16	791:16	8	,
ARGUMENT	791:18	791:18	8	t2p_writeproc
FIELD	791:18	791:18	9	t2p_writeproc
LEAF_NODE	791:18	791:18	10	t2p_writeproc
LEAF_NODE	791:31	791:31	8	,
ARGUMENT	791:33	791:33	8	t2p_seekproc
FIELD	791:33	791:33	9	t2p_seekproc
LEAF_NODE	791:33	791:33	10	t2p_seekproc
LEAF_NODE	791:45	791:45	8	,
ARGUMENT	792:4	792:4	8	t2p_closeproc
FIELD	792:4	792:4	9	t2p_closeproc
LEAF_NODE	792:4	792:4	10	t2p_closeproc
LEAF_NODE	792:17	792:17	8	,
ARGUMENT	792:19	792:19	8	t2p_sizeproc
FIELD	792:19	792:19	9	t2p_sizeproc
LEAF_NODE	792:19	792:19	10	t2p_sizeproc
LEAF_NODE	792:31	792:31	8	,
ARGUMENT	793:4	793:4	8	t2p_mapproc
FIELD	793:4	793:4	9	t2p_mapproc
LEAF_NODE	793:4	793:4	10	t2p_mapproc
LEAF_NODE	793:15	793:15	8	,
ARGUMENT	793:17	793:17	8	t2p_unmapproc
FIELD	793:17	793:17	9	t2p_unmapproc
LEAF_NODE	793:17	793:17	10	t2p_unmapproc
LEAF_NODE	793:30	793:30	8	)
LEAF_NODE	793:31	793:31	4	;
EXPR_STATEMENT	794:1	794:23	3	t2p -> outputdisable = 0 ;
EXPR	794:1	794:1	4	t2p -> outputdisable = 0
ASSIGN	794:1	794:22	5	t2p -> outputdisable = 0
LVAL	794:1	794:1	6	t2p -> outputdisable
FIELD	794:1	794:6	7	t2p -> outputdisable
LEAF_NODE	794:1	794:1	8	t2p
LEAF_NODE	794:4	794:4	8	->
LEAF_NODE	794:6	794:6	8	outputdisable
ASSIGN_OP	794:20	794:20	6	=
LEAF_NODE	794:20	794:20	7	=
RVAL	794:22	794:22	6	0
FIELD	794:22	794:22	7	0
LEAF_NODE	794:22	794:22	8	0
LEAF_NODE	794:23	794:23	4	;
SELECTION	795:1	795:21	3	
KEYWORD	795:1	795:1	4	if
LEAF_NODE	795:1	795:1	5	if
LEAF_NODE	795:4	795:4	4	(
CONDITION	795:5	795:5	4	output == NULL
EXPR	795:5	795:15	5	output == NULL
FIELD	795:5	795:5	6	output
LEAF_NODE	795:5	795:5	7	output
EQ_OPERATOR	795:12	795:12	6	==
LEAF_NODE	795:12	795:12	7	==
FIELD	795:15	795:15	6	NULL
LEAF_NODE	795:15	795:15	7	NULL
LEAF_NODE	795:19	795:19	4	)
STATEMENTS	795:21	799:1	4	
LEAF_NODE	795:21	795:21	5	{
STATEMENTS	796:2	798:2	5	
EXPR_STATEMENT	796:2	797:42	6	TIFFError ( TIFF2PDF_MODULE , "Can't initialize output descriptor" ) ;
EXPR	796:2	796:2	7	TIFFError ( TIFF2PDF_MODULE , "Can't initialize output descriptor" )
FUNCTION_CALL	796:2	797:41	8	TIFFError ( TIFF2PDF_MODULE , "Can't initialize output descriptor" )
CALLEE	796:2	796:2	9	TIFFError
LEAF_NODE	796:2	796:2	10	TIFFError
LEAF_NODE	796:11	796:11	9	(
ARGUMENT	796:12	796:12	9	TIFF2PDF_MODULE
FIELD	796:12	796:12	10	TIFF2PDF_MODULE
LEAF_NODE	796:12	796:12	11	TIFF2PDF_MODULE
LEAF_NODE	796:27	796:27	9	,
ARGUMENT	797:5	797:5	9	"Can't initialize output descriptor"
FIELD	797:5	797:5	10	"Can't initialize output descriptor"
LEAF_NODE	797:5	797:5	11	"Can't initialize output descriptor"
LEAF_NODE	797:41	797:41	9	)
LEAF_NODE	797:42	797:42	7	;
JUMP_STATEMENT	798:2	798:11	6	goto fail ;
KEYWORD	798:2	798:2	7	goto
LEAF_NODE	798:2	798:2	8	goto
DESTINATION	798:7	798:7	7	fail
LEAF_NODE	798:7	798:7	8	fail
LEAF_NODE	798:11	798:11	7	;
LEAF_NODE	799:1	799:1	5	}
EXPR_STATEMENT	804:1	804:18	3	t2p_validate ( t2p ) ;
EXPR	804:1	804:1	4	t2p_validate ( t2p )
FUNCTION_CALL	804:1	804:17	5	t2p_validate ( t2p )
CALLEE	804:1	804:1	6	t2p_validate
LEAF_NODE	804:1	804:1	7	t2p_validate
LEAF_NODE	804:13	804:13	6	(
ARGUMENT	804:14	804:14	6	t2p
FIELD	804:14	804:14	7	t2p
LEAF_NODE	804:14	804:14	8	t2p
LEAF_NODE	804:17	804:17	6	)
LEAF_NODE	804:18	804:18	4	;
EXPR_STATEMENT	805:1	805:42	3	t2pSeekFile ( output , ( toff_t ) 0 , SEEK_SET ) ;
EXPR	805:1	805:1	4	t2pSeekFile ( output , ( toff_t ) 0 , SEEK_SET )
FUNCTION_CALL	805:1	805:41	5	t2pSeekFile ( output , ( toff_t ) 0 , SEEK_SET )
CALLEE	805:1	805:1	6	t2pSeekFile
LEAF_NODE	805:1	805:1	7	t2pSeekFile
LEAF_NODE	805:12	805:12	6	(
ARGUMENT	805:13	805:13	6	output
FIELD	805:13	805:13	7	output
LEAF_NODE	805:13	805:13	8	output
LEAF_NODE	805:19	805:19	6	,
ARGUMENT	805:21	805:30	6	( toff_t ) 0
LEAF_NODE	805:21	805:21	7	(
TYPE_NAME	805:22	805:22	7	toff_t
LEAF_NODE	805:22	805:22	8	toff_t
LEAF_NODE	805:28	805:28	7	)
FIELD	805:30	805:30	7	0
LEAF_NODE	805:30	805:30	8	0
LEAF_NODE	805:31	805:31	6	,
ARGUMENT	805:33	805:33	6	SEEK_SET
FIELD	805:33	805:33	7	SEEK_SET
LEAF_NODE	805:33	805:33	8	SEEK_SET
LEAF_NODE	805:41	805:41	6	)
LEAF_NODE	805:42	805:42	4	;
EXPR_STATEMENT	810:1	810:34	3	t2p_write_pdf ( t2p , input , output ) ;
EXPR	810:1	810:1	4	t2p_write_pdf ( t2p , input , output )
FUNCTION_CALL	810:1	810:33	5	t2p_write_pdf ( t2p , input , output )
CALLEE	810:1	810:1	6	t2p_write_pdf
LEAF_NODE	810:1	810:1	7	t2p_write_pdf
LEAF_NODE	810:14	810:14	6	(
ARGUMENT	810:15	810:15	6	t2p
FIELD	810:15	810:15	7	t2p
LEAF_NODE	810:15	810:15	8	t2p
LEAF_NODE	810:18	810:18	6	,
ARGUMENT	810:20	810:20	6	input
FIELD	810:20	810:20	7	input
LEAF_NODE	810:20	810:20	8	input
LEAF_NODE	810:25	810:25	6	,
ARGUMENT	810:27	810:27	6	output
FIELD	810:27	810:27	7	output
LEAF_NODE	810:27	810:27	8	output
LEAF_NODE	810:33	810:33	6	)
LEAF_NODE	810:34	810:34	4	;
SELECTION	811:1	811:26	3	
KEYWORD	811:1	811:1	4	if
LEAF_NODE	811:1	811:1	5	if
LEAF_NODE	811:4	811:4	4	(
CONDITION	811:5	811:5	4	t2p -> t2p_error != 0
EXPR	811:5	811:23	5	t2p -> t2p_error != 0
FIELD	811:5	811:10	6	t2p -> t2p_error
LEAF_NODE	811:5	811:5	7	t2p
LEAF_NODE	811:8	811:8	7	->
LEAF_NODE	811:10	811:10	7	t2p_error
EQ_OPERATOR	811:20	811:20	6	!=
LEAF_NODE	811:20	811:20	7	!=
FIELD	811:23	811:23	6	0
LEAF_NODE	811:23	811:23	7	0
LEAF_NODE	811:24	811:24	4	)
STATEMENTS	811:26	815:1	4	
LEAF_NODE	811:26	811:26	5	{
STATEMENTS	812:2	814:2	5	
EXPR_STATEMENT	812:2	813:50	6	TIFFError ( TIFF2PDF_MODULE , "An error occurred creating output PDF file" ) ;
EXPR	812:2	812:2	7	TIFFError ( TIFF2PDF_MODULE , "An error occurred creating output PDF file" )
FUNCTION_CALL	812:2	813:49	8	TIFFError ( TIFF2PDF_MODULE , "An error occurred creating output PDF file" )
CALLEE	812:2	812:2	9	TIFFError
LEAF_NODE	812:2	812:2	10	TIFFError
LEAF_NODE	812:11	812:11	9	(
ARGUMENT	812:12	812:12	9	TIFF2PDF_MODULE
FIELD	812:12	812:12	10	TIFF2PDF_MODULE
LEAF_NODE	812:12	812:12	11	TIFF2PDF_MODULE
LEAF_NODE	812:27	812:27	9	,
ARGUMENT	813:5	813:5	9	"An error occurred creating output PDF file"
FIELD	813:5	813:5	10	"An error occurred creating output PDF file"
LEAF_NODE	813:5	813:5	11	"An error occurred creating output PDF file"
LEAF_NODE	813:49	813:49	9	)
LEAF_NODE	813:50	813:50	7	;
JUMP_STATEMENT	814:2	814:11	6	goto fail ;
KEYWORD	814:2	814:2	7	goto
LEAF_NODE	814:2	814:2	8	goto
DESTINATION	814:7	814:7	7	fail
LEAF_NODE	814:7	814:7	8	fail
LEAF_NODE	814:11	814:11	7	;
LEAF_NODE	815:1	815:1	5	}
JUMP_STATEMENT	817:1	817:13	3	goto success ;
KEYWORD	817:1	817:1	4	goto
LEAF_NODE	817:1	817:1	5	goto
DESTINATION	817:6	817:6	4	success
LEAF_NODE	817:6	817:6	5	success
LEAF_NODE	817:13	817:13	4	;
LABEL	818:0	818:4	3	fail :
LEAF_NODE	818:0	818:0	4	fail
LEAF_NODE	818:4	818:4	4	:
EXPR_STATEMENT	819:1	819:19	3	ret = EXIT_FAILURE ;
EXPR	819:1	819:1	4	ret = EXIT_FAILURE
ASSIGN	819:1	819:7	5	ret = EXIT_FAILURE
LVAL	819:1	819:1	6	ret
FIELD	819:1	819:1	7	ret
LEAF_NODE	819:1	819:1	8	ret
ASSIGN_OP	819:5	819:5	6	=
LEAF_NODE	819:5	819:5	7	=
RVAL	819:7	819:7	6	EXIT_FAILURE
FIELD	819:7	819:7	7	EXIT_FAILURE
LEAF_NODE	819:7	819:7	8	EXIT_FAILURE
LEAF_NODE	819:19	819:19	4	;
LABEL	820:0	820:7	3	success :
LEAF_NODE	820:0	820:0	4	success
LEAF_NODE	820:7	820:7	4	:
SELECTION	821:1	822:2	3	
KEYWORD	821:1	821:1	4	if
LEAF_NODE	821:1	821:1	5	if
LEAF_NODE	821:3	821:3	4	(
CONDITION	821:4	821:4	4	input != NULL
EXPR	821:4	821:13	5	input != NULL
FIELD	821:4	821:4	6	input
LEAF_NODE	821:4	821:4	7	input
EQ_OPERATOR	821:10	821:10	6	!=
LEAF_NODE	821:10	821:10	7	!=
FIELD	821:13	821:13	6	NULL
LEAF_NODE	821:13	821:13	7	NULL
LEAF_NODE	821:17	821:17	4	)
STATEMENTS	822:2	822:2	4	
EXPR_STATEMENT	822:2	822:18	5	TIFFClose ( input ) ;
EXPR	822:2	822:2	6	TIFFClose ( input )
FUNCTION_CALL	822:2	822:17	7	TIFFClose ( input )
CALLEE	822:2	822:2	8	TIFFClose
LEAF_NODE	822:2	822:2	9	TIFFClose
LEAF_NODE	822:11	822:11	8	(
ARGUMENT	822:12	822:12	8	input
FIELD	822:12	822:12	9	input
LEAF_NODE	822:12	822:12	10	input
LEAF_NODE	822:17	822:17	8	)
LEAF_NODE	822:18	822:18	6	;
SELECTION	823:1	824:2	3	
KEYWORD	823:1	823:1	4	if
LEAF_NODE	823:1	823:1	5	if
LEAF_NODE	823:4	823:4	4	(
CONDITION	823:5	823:5	4	output != NULL
EXPR	823:5	823:15	5	output != NULL
FIELD	823:5	823:5	6	output
LEAF_NODE	823:5	823:5	7	output
EQ_OPERATOR	823:12	823:12	6	!=
LEAF_NODE	823:12	823:12	7	!=
FIELD	823:15	823:15	6	NULL
LEAF_NODE	823:15	823:15	7	NULL
LEAF_NODE	823:19	823:19	4	)
STATEMENTS	824:2	824:2	4	
EXPR_STATEMENT	824:2	824:19	5	TIFFClose ( output ) ;
EXPR	824:2	824:2	6	TIFFClose ( output )
FUNCTION_CALL	824:2	824:18	7	TIFFClose ( output )
CALLEE	824:2	824:2	8	TIFFClose
LEAF_NODE	824:2	824:2	9	TIFFClose
LEAF_NODE	824:11	824:11	8	(
ARGUMENT	824:12	824:12	8	output
FIELD	824:12	824:12	9	output
LEAF_NODE	824:12	824:12	10	output
LEAF_NODE	824:18	824:18	8	)
LEAF_NODE	824:19	824:19	6	;
SELECTION	825:1	826:2	3	
KEYWORD	825:1	825:1	4	if
LEAF_NODE	825:1	825:1	5	if
LEAF_NODE	825:4	825:4	4	(
CONDITION	825:5	825:5	4	t2p != NULL
EXPR	825:5	825:12	5	t2p != NULL
FIELD	825:5	825:5	6	t2p
LEAF_NODE	825:5	825:5	7	t2p
EQ_OPERATOR	825:9	825:9	6	!=
LEAF_NODE	825:9	825:9	7	!=
FIELD	825:12	825:12	6	NULL
LEAF_NODE	825:12	825:12	7	NULL
LEAF_NODE	825:16	825:16	4	)
STATEMENTS	826:2	826:2	4	
EXPR_STATEMENT	826:2	826:15	5	t2p_free ( t2p ) ;
EXPR	826:2	826:2	6	t2p_free ( t2p )
FUNCTION_CALL	826:2	826:14	7	t2p_free ( t2p )
CALLEE	826:2	826:2	8	t2p_free
LEAF_NODE	826:2	826:2	9	t2p_free
LEAF_NODE	826:10	826:10	8	(
ARGUMENT	826:11	826:11	8	t2p
FIELD	826:11	826:11	9	t2p
LEAF_NODE	826:11	826:11	10	t2p
LEAF_NODE	826:14	826:14	8	)
LEAF_NODE	826:15	826:15	6	;
JUMP_STATEMENT	827:1	827:11	3	return ret ;
KEYWORD	827:1	827:1	4	return
LEAF_NODE	827:1	827:1	5	return
DESTINATION	827:8	827:8	4	ret
EXPR	827:8	827:8	5	ret
FIELD	827:8	827:8	6	ret
LEAF_NODE	827:8	827:8	7	ret
LEAF_NODE	827:11	827:11	4	;
LEAF_NODE	829:0	829:0	2	}
FUNCTION_DEF	831:0	873:0	1	
RETURN_TYPE	831:0	831:0	2	void
TYPE_NAME	831:0	831:0	3	void
LEAF_NODE	831:0	831:0	4	void
FUNCTION_NAME	831:5	831:5	2	tiff2pdf_usage
LEAF_NODE	831:5	831:5	3	tiff2pdf_usage
PARAMETER_LIST	831:19	831:20	2	( )
LEAF_NODE	831:19	831:19	3	(
LEAF_NODE	831:20	831:20	3	)
LEAF_NODE	831:21	831:21	2	{
STATEMENTS	832:1	872:1	2	
LEAF_NODE	832:1	832:1	3	char
LEAF_NODE	832:5	832:5	3	*
LEAF_NODE	832:7	832:7	3	lines
LEAF_NODE	832:12	832:12	3	[
LEAF_NODE	832:13	832:13	3	]
LEAF_NODE	832:14	832:14	3	=
LEAF_NODE	832:15	832:15	3	{
STATEMENTS	833:1	863:1	3	
LEAF_NODE	833:1	833:1	4	"usage:  tiff2pdf [options] input.tiff"
LEAF_NODE	833:40	833:40	4	,
LEAF_NODE	834:1	834:1	4	"options:"
LEAF_NODE	834:11	834:11	4	,
LEAF_NODE	835:1	835:1	4	" -o: output to file name"
LEAF_NODE	835:27	835:27	4	,
LEAF_NODE	837:1	837:1	4	" -j: compress with JPEG"
LEAF_NODE	837:26	837:26	4	,
LEAF_NODE	840:1	840:1	4	" -z: compress with Zip/Deflate"
LEAF_NODE	840:33	840:33	4	,
LEAF_NODE	842:1	842:1	4	" -q: compression quality"
LEAF_NODE	842:27	842:27	4	,
LEAF_NODE	843:1	843:1	4	" -n: no compressed data passthrough"
LEAF_NODE	843:38	843:38	4	,
LEAF_NODE	844:1	844:1	4	" -d: do not compress (decompress)"
LEAF_NODE	844:36	844:36	4	,
LEAF_NODE	845:1	845:1	4	" -i: invert colors"
LEAF_NODE	845:21	845:21	4	,
LEAF_NODE	846:1	846:1	4	" -u: set distance unit, 'i' for inch, 'm' for centimeter"
LEAF_NODE	846:59	846:59	4	,
LEAF_NODE	847:1	847:1	4	" -x: set x resolution default in dots per unit"
LEAF_NODE	847:49	847:49	4	,
LEAF_NODE	848:1	848:1	4	" -y: set y resolution default in dots per unit"
LEAF_NODE	848:49	848:49	4	,
LEAF_NODE	849:1	849:1	4	" -w: width in units"
LEAF_NODE	849:22	849:22	4	,
LEAF_NODE	850:1	850:1	4	" -l: length in units"
LEAF_NODE	850:23	850:23	4	,
LEAF_NODE	851:1	851:1	4	" -r: 'd' for resolution default, 'o' for resolution override"
LEAF_NODE	851:63	851:63	4	,
LEAF_NODE	852:1	852:1	4	" -p: paper size, eg \"letter\", \"legal\", \"A4\""
LEAF_NODE	852:52	852:52	4	,
LEAF_NODE	853:2	853:2	4	" -F: make the tiff fill the PDF page"
LEAF_NODE	853:40	853:40	4	,
LEAF_NODE	854:1	854:1	4	" -f: set PDF \"Fit Window\" user preference"
LEAF_NODE	854:46	854:46	4	,
LEAF_NODE	855:1	855:1	4	" -e: date, overrides image or current date/time default, YYYYMMDDHHMMSS"
LEAF_NODE	855:74	855:74	4	,
LEAF_NODE	856:1	856:1	4	" -c: sets document creator, overrides image software default"
LEAF_NODE	856:63	856:63	4	,
LEAF_NODE	857:1	857:1	4	" -a: sets document author, overrides image artist default"
LEAF_NODE	857:60	857:60	4	,
LEAF_NODE	858:1	858:1	4	" -t: sets document title, overrides image document name default"
LEAF_NODE	858:66	858:66	4	,
LEAF_NODE	859:1	859:1	4	" -s: sets document subject, overrides image image description default"
LEAF_NODE	859:72	859:72	4	,
LEAF_NODE	860:1	860:1	4	" -k: sets document keywords"
LEAF_NODE	860:30	860:30	4	,
LEAF_NODE	861:1	861:1	4	" -b: set PDF \"Interpolate\" user preference"
LEAF_NODE	861:47	861:47	4	,
LEAF_NODE	862:1	862:1	4	" -h: usage"
LEAF_NODE	862:13	862:13	4	,
LEAF_NODE	863:1	863:1	4	NULL
LEAF_NODE	864:1	864:1	3	}
LEAF_NODE	864:2	864:2	3	;
SIMPLE_DECL	865:1	865:8	3	int i ; i = 0 ;
VAR_DECL	865:1	865:5	4	int i ; i = 0
TYPE	865:1	865:1	5	int
TYPE_NAME	865:1	865:1	6	int
LEAF_NODE	865:1	865:1	7	int
NAME	865:5	865:5	5	i
LEAF_NODE	865:5	865:5	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	865:5	865:5	5	i = 0
ASSIGN	865:5	865:7	6	i = 0
LVAL	865:5	865:5	7	i
NAME	865:5	865:5	8	i
LEAF_NODE	865:5	865:5	9	i
ASSIGN_OP	865:6	865:6	7	=
LEAF_NODE	865:6	865:6	8	=
RVAL	865:7	865:7	7	0
FIELD	865:7	865:7	8	0
LEAF_NODE	865:7	865:7	9	0
LEAF_NODE	865:8	865:8	4	;
EXPR_STATEMENT	867:1	867:44	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	867:1	867:1	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	867:1	867:43	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	867:1	867:1	6	fprintf
LEAF_NODE	867:1	867:1	7	fprintf
LEAF_NODE	867:8	867:8	6	(
ARGUMENT	867:9	867:9	6	stderr
FIELD	867:9	867:9	7	stderr
LEAF_NODE	867:9	867:9	8	stderr
LEAF_NODE	867:15	867:15	6	,
ARGUMENT	867:17	867:17	6	"%s\n\n"
FIELD	867:17	867:17	7	"%s\n\n"
LEAF_NODE	867:17	867:17	8	"%s\n\n"
LEAF_NODE	867:25	867:25	6	,
ARGUMENT	867:27	867:27	6	TIFFGetVersion ( )
FUNCTION_CALL	867:27	867:42	7	TIFFGetVersion ( )
CALLEE	867:27	867:27	8	TIFFGetVersion
LEAF_NODE	867:27	867:27	9	TIFFGetVersion
LEAF_NODE	867:41	867:41	8	(
LEAF_NODE	867:42	867:42	8	)
LEAF_NODE	867:43	867:43	6	)
LEAF_NODE	867:44	867:44	4	;
ITERATION	868:1	868:29	3	
KEYWORD	868:1	868:1	4	for
LEAF_NODE	868:1	868:1	5	for
LEAF_NODE	868:5	868:5	4	(
FOR_INIT	868:6	868:9	4	i = 0 ;
EXPR	868:6	868:6	5	i = 0
ASSIGN	868:6	868:8	6	i = 0
LVAL	868:6	868:6	7	i
FIELD	868:6	868:6	8	i
LEAF_NODE	868:6	868:6	9	i
ASSIGN_OP	868:7	868:7	7	=
LEAF_NODE	868:7	868:7	8	=
RVAL	868:8	868:8	7	0
FIELD	868:8	868:8	8	0
LEAF_NODE	868:8	868:8	9	0
LEAF_NODE	868:9	868:9	5	;
CONDITION	868:10	868:10	4	lines [ i ] != NULL
EXPR	868:10	868:20	5	lines [ i ] != NULL
FIELD	868:10	868:17	6	lines [ i ]
LEAF_NODE	868:10	868:10	7	lines
LEAF_NODE	868:15	868:15	7	[
EXPR	868:16	868:16	7	i
FIELD	868:16	868:16	8	i
LEAF_NODE	868:16	868:16	9	i
LEAF_NODE	868:17	868:17	7	]
EQ_OPERATOR	868:18	868:18	6	!=
LEAF_NODE	868:18	868:18	7	!=
FIELD	868:20	868:20	6	NULL
LEAF_NODE	868:20	868:20	7	NULL
LEAF_NODE	868:24	868:24	4	;
FOR_EXPR	868:25	868:25	4	i ++
EXPR	868:25	868:25	5	i ++
FIELD	868:25	868:26	6	i ++
LEAF_NODE	868:25	868:25	7	i
LEAF_NODE	868:26	868:26	7	++
LEAF_NODE	868:28	868:28	4	)
STATEMENTS	868:29	870:1	4	
LEAF_NODE	868:29	868:29	5	{
STATEMENTS	869:2	869:2	5	
EXPR_STATEMENT	869:2	869:35	6	fprintf ( stderr , "%s\n" , lines [ i ] ) ;
EXPR	869:2	869:2	7	fprintf ( stderr , "%s\n" , lines [ i ] )
FUNCTION_CALL	869:2	869:34	8	fprintf ( stderr , "%s\n" , lines [ i ] )
CALLEE	869:2	869:2	9	fprintf
LEAF_NODE	869:2	869:2	10	fprintf
LEAF_NODE	869:9	869:9	9	(
ARGUMENT	869:10	869:10	9	stderr
FIELD	869:10	869:10	10	stderr
LEAF_NODE	869:10	869:10	11	stderr
LEAF_NODE	869:16	869:16	9	,
ARGUMENT	869:18	869:18	9	"%s\n"
FIELD	869:18	869:18	10	"%s\n"
LEAF_NODE	869:18	869:18	11	"%s\n"
LEAF_NODE	869:24	869:24	9	,
ARGUMENT	869:26	869:26	9	lines [ i ]
FIELD	869:26	869:33	10	lines [ i ]
LEAF_NODE	869:26	869:26	11	lines
LEAF_NODE	869:31	869:31	11	[
EXPR	869:32	869:32	11	i
FIELD	869:32	869:32	12	i
LEAF_NODE	869:32	869:32	13	i
LEAF_NODE	869:33	869:33	11	]
LEAF_NODE	869:34	869:34	9	)
LEAF_NODE	869:35	869:35	7	;
LEAF_NODE	870:1	870:1	5	}
JUMP_STATEMENT	872:1	872:7	3	return DESTINATION ;
KEYWORD	872:1	872:1	4	return
LEAF_NODE	872:1	872:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	872:7	872:7	4	;
LEAF_NODE	873:0	873:0	2	}
FUNCTION_DEF	875:0	933:0	1	
RETURN_TYPE	875:0	875:0	2	int
TYPE_NAME	875:0	875:0	3	int
LEAF_NODE	875:0	875:0	4	int
FUNCTION_NAME	875:4	875:4	2	tiff2pdf_match_paper_size
LEAF_NODE	875:4	875:4	3	tiff2pdf_match_paper_size
PARAMETER_LIST	875:29	875:74	2	( float * width , float * length , char * papersize )
LEAF_NODE	875:29	875:29	3	(
PARAMETER_DECL	875:30	875:37	3	float * width
TYPE	875:30	875:35	4	float *
TYPE_NAME	875:30	875:30	5	float
LEAF_NODE	875:30	875:30	6	float
POINTER	875:35	875:35	5	*
LEAF_NODE	875:35	875:35	6	*
NAME	875:37	875:37	4	width
LEAF_NODE	875:37	875:37	5	width
LEAF_NODE	875:42	875:42	3	,
PARAMETER_DECL	875:44	875:51	3	float * length
TYPE	875:44	875:49	4	float *
TYPE_NAME	875:44	875:44	5	float
LEAF_NODE	875:44	875:44	6	float
POINTER	875:49	875:49	5	*
LEAF_NODE	875:49	875:49	6	*
NAME	875:51	875:51	4	length
LEAF_NODE	875:51	875:51	5	length
LEAF_NODE	875:57	875:57	3	,
PARAMETER_DECL	875:59	875:65	3	char * papersize
TYPE	875:59	875:63	4	char *
TYPE_NAME	875:59	875:59	5	char
LEAF_NODE	875:59	875:59	6	char
POINTER	875:63	875:63	5	*
LEAF_NODE	875:63	875:63	6	*
NAME	875:65	875:65	4	papersize
LEAF_NODE	875:65	875:65	5	papersize
LEAF_NODE	875:74	875:74	3	)
LEAF_NODE	875:75	875:75	2	{
STATEMENTS	877:1	932:1	2	
SIMPLE_DECL	877:1	877:14	3	size_t i , size_t len ;
INIT_DECL_LIST	877:1	877:1	4	size_t i , size_t len
VAR_DECL	877:1	877:8	5	size_t i
TYPE	877:1	877:1	6	size_t
TYPE_NAME	877:1	877:1	7	size_t
LEAF_NODE	877:1	877:1	8	size_t
NAME	877:8	877:8	6	i
LEAF_NODE	877:8	877:8	7	i
LEAF_NODE	877:9	877:9	5	,
VAR_DECL	877:1	877:11	5	size_t len
TYPE	877:1	877:1	6	size_t
TYPE_NAME	877:1	877:1	7	size_t
LEAF_NODE	877:1	877:1	8	size_t
NAME	877:11	877:11	6	len
LEAF_NODE	877:11	877:11	7	len
LEAF_NODE	877:14	877:14	4	;
LEAF_NODE	878:1	878:1	3	const
LEAF_NODE	878:7	878:7	3	char
LEAF_NODE	878:11	878:11	3	*
LEAF_NODE	878:13	878:13	3	sizes
LEAF_NODE	878:18	878:18	3	[
LEAF_NODE	878:19	878:19	3	]
LEAF_NODE	878:20	878:20	3	=
LEAF_NODE	878:21	878:21	3	{
STATEMENTS	879:2	891:2	3	
LEAF_NODE	879:2	879:2	4	"LETTER"
LEAF_NODE	879:10	879:10	4	,
LEAF_NODE	879:12	879:12	4	"A4"
LEAF_NODE	879:16	879:16	4	,
LEAF_NODE	879:18	879:18	4	"LEGAL"
LEAF_NODE	879:25	879:25	4	,
LEAF_NODE	880:2	880:2	4	"EXECUTIVE"
LEAF_NODE	880:13	880:13	4	,
LEAF_NODE	880:15	880:15	4	"LETTER"
LEAF_NODE	880:23	880:23	4	,
LEAF_NODE	880:25	880:25	4	"LEGAL"
LEAF_NODE	880:32	880:32	4	,
LEAF_NODE	880:34	880:34	4	"LEDGER"
LEAF_NODE	880:42	880:42	4	,
LEAF_NODE	880:44	880:44	4	"TABLOID"
LEAF_NODE	880:53	880:53	4	,
LEAF_NODE	881:2	881:2	4	"A"
LEAF_NODE	881:5	881:5	4	,
LEAF_NODE	881:7	881:7	4	"B"
LEAF_NODE	881:10	881:10	4	,
LEAF_NODE	881:12	881:12	4	"C"
LEAF_NODE	881:15	881:15	4	,
LEAF_NODE	881:17	881:17	4	"D"
LEAF_NODE	881:20	881:20	4	,
LEAF_NODE	881:22	881:22	4	"E"
LEAF_NODE	881:25	881:25	4	,
LEAF_NODE	881:27	881:27	4	"F"
LEAF_NODE	881:30	881:30	4	,
LEAF_NODE	881:32	881:32	4	"G"
LEAF_NODE	881:35	881:35	4	,
LEAF_NODE	881:37	881:37	4	"H"
LEAF_NODE	881:40	881:40	4	,
LEAF_NODE	881:42	881:42	4	"J"
LEAF_NODE	881:45	881:45	4	,
LEAF_NODE	881:47	881:47	4	"K"
LEAF_NODE	881:50	881:50	4	,
LEAF_NODE	882:2	882:2	4	"A10"
LEAF_NODE	882:7	882:7	4	,
LEAF_NODE	882:9	882:9	4	"A9"
LEAF_NODE	882:13	882:13	4	,
LEAF_NODE	882:15	882:15	4	"A8"
LEAF_NODE	882:19	882:19	4	,
LEAF_NODE	882:21	882:21	4	"A7"
LEAF_NODE	882:25	882:25	4	,
LEAF_NODE	882:27	882:27	4	"A6"
LEAF_NODE	882:31	882:31	4	,
LEAF_NODE	882:33	882:33	4	"A5"
LEAF_NODE	882:37	882:37	4	,
LEAF_NODE	882:39	882:39	4	"A4"
LEAF_NODE	882:43	882:43	4	,
LEAF_NODE	882:45	882:45	4	"A3"
LEAF_NODE	882:49	882:49	4	,
LEAF_NODE	882:51	882:51	4	"A2"
LEAF_NODE	882:55	882:55	4	,
LEAF_NODE	882:57	882:57	4	"A1"
LEAF_NODE	882:61	882:61	4	,
LEAF_NODE	882:63	882:63	4	"A0"
LEAF_NODE	882:67	882:67	4	,
LEAF_NODE	883:2	883:2	4	"2A0"
LEAF_NODE	883:7	883:7	4	,
LEAF_NODE	883:9	883:9	4	"4A0"
LEAF_NODE	883:14	883:14	4	,
LEAF_NODE	883:16	883:16	4	"2A"
LEAF_NODE	883:20	883:20	4	,
LEAF_NODE	883:22	883:22	4	"4A"
LEAF_NODE	883:26	883:26	4	,
LEAF_NODE	884:2	884:2	4	"B10"
LEAF_NODE	884:7	884:7	4	,
LEAF_NODE	884:9	884:9	4	"B9"
LEAF_NODE	884:13	884:13	4	,
LEAF_NODE	884:15	884:15	4	"B8"
LEAF_NODE	884:19	884:19	4	,
LEAF_NODE	884:21	884:21	4	"B7"
LEAF_NODE	884:25	884:25	4	,
LEAF_NODE	884:27	884:27	4	"B6"
LEAF_NODE	884:31	884:31	4	,
LEAF_NODE	884:33	884:33	4	"B5"
LEAF_NODE	884:37	884:37	4	,
LEAF_NODE	884:39	884:39	4	"B4"
LEAF_NODE	884:43	884:43	4	,
LEAF_NODE	884:45	884:45	4	"B3"
LEAF_NODE	884:49	884:49	4	,
LEAF_NODE	884:51	884:51	4	"B2"
LEAF_NODE	884:55	884:55	4	,
LEAF_NODE	884:57	884:57	4	"B1"
LEAF_NODE	884:61	884:61	4	,
LEAF_NODE	884:63	884:63	4	"B0"
LEAF_NODE	884:67	884:67	4	,
LEAF_NODE	885:2	885:2	4	"JISB10"
LEAF_NODE	885:10	885:10	4	,
LEAF_NODE	885:12	885:12	4	"JISB9"
LEAF_NODE	885:19	885:19	4	,
LEAF_NODE	885:21	885:21	4	"JISB8"
LEAF_NODE	885:28	885:28	4	,
LEAF_NODE	885:30	885:30	4	"JISB7"
LEAF_NODE	885:37	885:37	4	,
LEAF_NODE	885:39	885:39	4	"JISB6"
LEAF_NODE	885:46	885:46	4	,
LEAF_NODE	885:48	885:48	4	"JISB5"
LEAF_NODE	885:55	885:55	4	,
LEAF_NODE	885:57	885:57	4	"JISB4"
LEAF_NODE	885:64	885:64	4	,
LEAF_NODE	886:2	886:2	4	"JISB3"
LEAF_NODE	886:9	886:9	4	,
LEAF_NODE	886:11	886:11	4	"JISB2"
LEAF_NODE	886:18	886:18	4	,
LEAF_NODE	886:20	886:20	4	"JISB1"
LEAF_NODE	886:27	886:27	4	,
LEAF_NODE	886:29	886:29	4	"JISB0"
LEAF_NODE	886:36	886:36	4	,
LEAF_NODE	887:2	887:2	4	"C10"
LEAF_NODE	887:7	887:7	4	,
LEAF_NODE	887:9	887:9	4	"C9"
LEAF_NODE	887:13	887:13	4	,
LEAF_NODE	887:15	887:15	4	"C8"
LEAF_NODE	887:19	887:19	4	,
LEAF_NODE	887:21	887:21	4	"C7"
LEAF_NODE	887:25	887:25	4	,
LEAF_NODE	887:27	887:27	4	"C6"
LEAF_NODE	887:31	887:31	4	,
LEAF_NODE	887:33	887:33	4	"C5"
LEAF_NODE	887:37	887:37	4	,
LEAF_NODE	887:39	887:39	4	"C4"
LEAF_NODE	887:43	887:43	4	,
LEAF_NODE	887:45	887:45	4	"C3"
LEAF_NODE	887:49	887:49	4	,
LEAF_NODE	887:51	887:51	4	"C2"
LEAF_NODE	887:55	887:55	4	,
LEAF_NODE	887:57	887:57	4	"C1"
LEAF_NODE	887:61	887:61	4	,
LEAF_NODE	887:63	887:63	4	"C0"
LEAF_NODE	887:67	887:67	4	,
LEAF_NODE	888:2	888:2	4	"RA2"
LEAF_NODE	888:7	888:7	4	,
LEAF_NODE	888:9	888:9	4	"RA1"
LEAF_NODE	888:14	888:14	4	,
LEAF_NODE	888:16	888:16	4	"RA0"
LEAF_NODE	888:21	888:21	4	,
LEAF_NODE	888:23	888:23	4	"SRA4"
LEAF_NODE	888:29	888:29	4	,
LEAF_NODE	888:31	888:31	4	"SRA3"
LEAF_NODE	888:37	888:37	4	,
LEAF_NODE	888:39	888:39	4	"SRA2"
LEAF_NODE	888:45	888:45	4	,
LEAF_NODE	888:47	888:47	4	"SRA1"
LEAF_NODE	888:53	888:53	4	,
LEAF_NODE	888:55	888:55	4	"SRA0"
LEAF_NODE	888:61	888:61	4	,
LEAF_NODE	889:2	889:2	4	"A3EXTRA"
LEAF_NODE	889:11	889:11	4	,
LEAF_NODE	889:13	889:13	4	"A4EXTRA"
LEAF_NODE	889:22	889:22	4	,
LEAF_NODE	890:2	890:2	4	"STATEMENT"
LEAF_NODE	890:13	890:13	4	,
LEAF_NODE	890:15	890:15	4	"FOLIO"
LEAF_NODE	890:22	890:22	4	,
LEAF_NODE	890:24	890:24	4	"QUARTO"
LEAF_NODE	890:32	890:32	4	,
LEAF_NODE	891:2	891:2	4	NULL
LEAF_NODE	892:1	892:1	3	}
LEAF_NODE	892:3	892:3	3	;
LEAF_NODE	893:1	893:1	3	const
LEAF_NODE	893:7	893:7	3	int
LEAF_NODE	893:11	893:11	3	widths
LEAF_NODE	893:17	893:17	3	[
LEAF_NODE	893:18	893:18	3	]
LEAF_NODE	893:19	893:19	3	=
LEAF_NODE	893:20	893:20	3	{
STATEMENTS	894:2	904:2	3	
LEAF_NODE	894:2	894:2	4	612
LEAF_NODE	894:5	894:5	4	,
LEAF_NODE	894:7	894:7	4	595
LEAF_NODE	894:10	894:10	4	,
LEAF_NODE	894:12	894:12	4	612
LEAF_NODE	894:15	894:15	4	,
LEAF_NODE	895:2	895:2	4	522
LEAF_NODE	895:5	895:5	4	,
LEAF_NODE	895:7	895:7	4	612
LEAF_NODE	895:10	895:10	4	,
LEAF_NODE	895:11	895:11	4	612
LEAF_NODE	895:14	895:14	4	,
LEAF_NODE	895:15	895:15	4	792
LEAF_NODE	895:18	895:18	4	,
LEAF_NODE	895:19	895:19	4	792
LEAF_NODE	895:22	895:22	4	,
LEAF_NODE	896:2	896:2	4	612
LEAF_NODE	896:5	896:5	4	,
LEAF_NODE	896:6	896:6	4	792
LEAF_NODE	896:9	896:9	4	,
LEAF_NODE	896:10	896:10	4	1224
LEAF_NODE	896:14	896:14	4	,
LEAF_NODE	896:15	896:15	4	1584
LEAF_NODE	896:19	896:19	4	,
LEAF_NODE	896:20	896:20	4	2448
LEAF_NODE	896:24	896:24	4	,
LEAF_NODE	896:25	896:25	4	2016
LEAF_NODE	896:29	896:29	4	,
LEAF_NODE	896:30	896:30	4	792
LEAF_NODE	896:33	896:33	4	,
LEAF_NODE	896:34	896:34	4	2016
LEAF_NODE	896:38	896:38	4	,
LEAF_NODE	896:39	896:39	4	2448
LEAF_NODE	896:43	896:43	4	,
LEAF_NODE	896:44	896:44	4	2880
LEAF_NODE	896:48	896:48	4	,
LEAF_NODE	897:2	897:2	4	74
LEAF_NODE	897:4	897:4	4	,
LEAF_NODE	897:5	897:5	4	105
LEAF_NODE	897:8	897:8	4	,
LEAF_NODE	897:9	897:9	4	147
LEAF_NODE	897:12	897:12	4	,
LEAF_NODE	897:13	897:13	4	210
LEAF_NODE	897:16	897:16	4	,
LEAF_NODE	897:17	897:17	4	298
LEAF_NODE	897:20	897:20	4	,
LEAF_NODE	897:21	897:21	4	420
LEAF_NODE	897:24	897:24	4	,
LEAF_NODE	897:25	897:25	4	595
LEAF_NODE	897:28	897:28	4	,
LEAF_NODE	897:29	897:29	4	842
LEAF_NODE	897:32	897:32	4	,
LEAF_NODE	897:33	897:33	4	1191
LEAF_NODE	897:37	897:37	4	,
LEAF_NODE	897:38	897:38	4	1684
LEAF_NODE	897:42	897:42	4	,
LEAF_NODE	897:43	897:43	4	2384
LEAF_NODE	897:47	897:47	4	,
LEAF_NODE	897:48	897:48	4	3370
LEAF_NODE	897:52	897:52	4	,
LEAF_NODE	897:53	897:53	4	4768
LEAF_NODE	897:57	897:57	4	,
LEAF_NODE	897:58	897:58	4	3370
LEAF_NODE	897:62	897:62	4	,
LEAF_NODE	897:63	897:63	4	4768
LEAF_NODE	897:67	897:67	4	,
LEAF_NODE	898:2	898:2	4	88
LEAF_NODE	898:4	898:4	4	,
LEAF_NODE	898:5	898:5	4	125
LEAF_NODE	898:8	898:8	4	,
LEAF_NODE	898:9	898:9	4	176
LEAF_NODE	898:12	898:12	4	,
LEAF_NODE	898:13	898:13	4	249
LEAF_NODE	898:16	898:16	4	,
LEAF_NODE	898:17	898:17	4	354
LEAF_NODE	898:20	898:20	4	,
LEAF_NODE	898:21	898:21	4	499
LEAF_NODE	898:24	898:24	4	,
LEAF_NODE	898:25	898:25	4	709
LEAF_NODE	898:28	898:28	4	,
LEAF_NODE	898:29	898:29	4	1001
LEAF_NODE	898:33	898:33	4	,
LEAF_NODE	898:34	898:34	4	1417
LEAF_NODE	898:38	898:38	4	,
LEAF_NODE	898:39	898:39	4	2004
LEAF_NODE	898:43	898:43	4	,
LEAF_NODE	898:44	898:44	4	2835
LEAF_NODE	898:48	898:48	4	,
LEAF_NODE	899:2	899:2	4	91
LEAF_NODE	899:4	899:4	4	,
LEAF_NODE	899:5	899:5	4	128
LEAF_NODE	899:8	899:8	4	,
LEAF_NODE	899:9	899:9	4	181
LEAF_NODE	899:12	899:12	4	,
LEAF_NODE	899:13	899:13	4	258
LEAF_NODE	899:16	899:16	4	,
LEAF_NODE	899:17	899:17	4	363
LEAF_NODE	899:20	899:20	4	,
LEAF_NODE	899:21	899:21	4	516
LEAF_NODE	899:24	899:24	4	,
LEAF_NODE	899:25	899:25	4	729
LEAF_NODE	899:28	899:28	4	,
LEAF_NODE	899:29	899:29	4	1032
LEAF_NODE	899:33	899:33	4	,
LEAF_NODE	899:34	899:34	4	1460
LEAF_NODE	899:38	899:38	4	,
LEAF_NODE	899:39	899:39	4	2064
LEAF_NODE	899:43	899:43	4	,
LEAF_NODE	899:44	899:44	4	2920
LEAF_NODE	899:48	899:48	4	,
LEAF_NODE	900:2	900:2	4	79
LEAF_NODE	900:4	900:4	4	,
LEAF_NODE	900:5	900:5	4	113
LEAF_NODE	900:8	900:8	4	,
LEAF_NODE	900:9	900:9	4	162
LEAF_NODE	900:12	900:12	4	,
LEAF_NODE	900:13	900:13	4	230
LEAF_NODE	900:16	900:16	4	,
LEAF_NODE	900:17	900:17	4	323
LEAF_NODE	900:20	900:20	4	,
LEAF_NODE	900:21	900:21	4	459
LEAF_NODE	900:24	900:24	4	,
LEAF_NODE	900:25	900:25	4	649
LEAF_NODE	900:28	900:28	4	,
LEAF_NODE	900:29	900:29	4	918
LEAF_NODE	900:32	900:32	4	,
LEAF_NODE	900:33	900:33	4	1298
LEAF_NODE	900:37	900:37	4	,
LEAF_NODE	900:38	900:38	4	1298
LEAF_NODE	900:42	900:42	4	,
LEAF_NODE	900:43	900:43	4	2599
LEAF_NODE	900:47	900:47	4	,
LEAF_NODE	901:2	901:2	4	1219
LEAF_NODE	901:6	901:6	4	,
LEAF_NODE	901:7	901:7	4	1729
LEAF_NODE	901:11	901:11	4	,
LEAF_NODE	901:12	901:12	4	2438
LEAF_NODE	901:16	901:16	4	,
LEAF_NODE	901:17	901:17	4	638
LEAF_NODE	901:20	901:20	4	,
LEAF_NODE	901:21	901:21	4	907
LEAF_NODE	901:24	901:24	4	,
LEAF_NODE	901:25	901:25	4	1276
LEAF_NODE	901:29	901:29	4	,
LEAF_NODE	901:30	901:30	4	1814
LEAF_NODE	901:34	901:34	4	,
LEAF_NODE	901:35	901:35	4	2551
LEAF_NODE	901:39	901:39	4	,
LEAF_NODE	902:2	902:2	4	914
LEAF_NODE	902:5	902:5	4	,
LEAF_NODE	902:6	902:6	4	667
LEAF_NODE	902:9	902:9	4	,
LEAF_NODE	903:2	903:2	4	396
LEAF_NODE	903:5	903:5	4	,
LEAF_NODE	903:7	903:7	4	612
LEAF_NODE	903:10	903:10	4	,
LEAF_NODE	903:12	903:12	4	609
LEAF_NODE	903:15	903:15	4	,
LEAF_NODE	904:2	904:2	4	0
LEAF_NODE	905:1	905:1	3	}
LEAF_NODE	905:2	905:2	3	;
LEAF_NODE	906:1	906:1	3	const
LEAF_NODE	906:7	906:7	3	int
LEAF_NODE	906:11	906:11	3	lengths
LEAF_NODE	906:18	906:18	3	[
LEAF_NODE	906:19	906:19	3	]
LEAF_NODE	906:20	906:20	3	=
LEAF_NODE	906:21	906:21	3	{
STATEMENTS	907:2	917:2	3	
LEAF_NODE	907:2	907:2	4	792
LEAF_NODE	907:5	907:5	4	,
LEAF_NODE	907:6	907:6	4	842
LEAF_NODE	907:9	907:9	4	,
LEAF_NODE	907:10	907:10	4	1008
LEAF_NODE	907:14	907:14	4	,
LEAF_NODE	908:2	908:2	4	756
LEAF_NODE	908:5	908:5	4	,
LEAF_NODE	908:6	908:6	4	792
LEAF_NODE	908:9	908:9	4	,
LEAF_NODE	908:10	908:10	4	1008
LEAF_NODE	908:14	908:14	4	,
LEAF_NODE	908:15	908:15	4	1224
LEAF_NODE	908:19	908:19	4	,
LEAF_NODE	908:20	908:20	4	1224
LEAF_NODE	908:24	908:24	4	,
LEAF_NODE	909:2	909:2	4	792
LEAF_NODE	909:5	909:5	4	,
LEAF_NODE	909:6	909:6	4	1224
LEAF_NODE	909:10	909:10	4	,
LEAF_NODE	909:11	909:11	4	1584
LEAF_NODE	909:15	909:15	4	,
LEAF_NODE	909:16	909:16	4	2448
LEAF_NODE	909:20	909:20	4	,
LEAF_NODE	909:21	909:21	4	3168
LEAF_NODE	909:25	909:25	4	,
LEAF_NODE	909:26	909:26	4	2880
LEAF_NODE	909:30	909:30	4	,
LEAF_NODE	909:31	909:31	4	6480
LEAF_NODE	909:35	909:35	4	,
LEAF_NODE	909:36	909:36	4	10296
LEAF_NODE	909:41	909:41	4	,
LEAF_NODE	909:42	909:42	4	12672
LEAF_NODE	909:47	909:47	4	,
LEAF_NODE	909:48	909:48	4	10296
LEAF_NODE	909:53	909:53	4	,
LEAF_NODE	910:2	910:2	4	105
LEAF_NODE	910:5	910:5	4	,
LEAF_NODE	910:6	910:6	4	147
LEAF_NODE	910:9	910:9	4	,
LEAF_NODE	910:10	910:10	4	210
LEAF_NODE	910:13	910:13	4	,
LEAF_NODE	910:14	910:14	4	298
LEAF_NODE	910:17	910:17	4	,
LEAF_NODE	910:18	910:18	4	420
LEAF_NODE	910:21	910:21	4	,
LEAF_NODE	910:22	910:22	4	595
LEAF_NODE	910:25	910:25	4	,
LEAF_NODE	910:26	910:26	4	842
LEAF_NODE	910:29	910:29	4	,
LEAF_NODE	910:30	910:30	4	1191
LEAF_NODE	910:34	910:34	4	,
LEAF_NODE	910:35	910:35	4	1684
LEAF_NODE	910:39	910:39	4	,
LEAF_NODE	910:40	910:40	4	2384
LEAF_NODE	910:44	910:44	4	,
LEAF_NODE	910:45	910:45	4	3370
LEAF_NODE	910:49	910:49	4	,
LEAF_NODE	910:50	910:50	4	4768
LEAF_NODE	910:54	910:54	4	,
LEAF_NODE	910:55	910:55	4	6741
LEAF_NODE	910:59	910:59	4	,
LEAF_NODE	910:60	910:60	4	4768
LEAF_NODE	910:64	910:64	4	,
LEAF_NODE	910:65	910:65	4	6741
LEAF_NODE	910:69	910:69	4	,
LEAF_NODE	911:2	911:2	4	125
LEAF_NODE	911:5	911:5	4	,
LEAF_NODE	911:6	911:6	4	176
LEAF_NODE	911:9	911:9	4	,
LEAF_NODE	911:10	911:10	4	249
LEAF_NODE	911:13	911:13	4	,
LEAF_NODE	911:14	911:14	4	354
LEAF_NODE	911:17	911:17	4	,
LEAF_NODE	911:18	911:18	4	499
LEAF_NODE	911:21	911:21	4	,
LEAF_NODE	911:22	911:22	4	709
LEAF_NODE	911:25	911:25	4	,
LEAF_NODE	911:26	911:26	4	1001
LEAF_NODE	911:30	911:30	4	,
LEAF_NODE	911:31	911:31	4	1417
LEAF_NODE	911:35	911:35	4	,
LEAF_NODE	911:36	911:36	4	2004
LEAF_NODE	911:40	911:40	4	,
LEAF_NODE	911:41	911:41	4	2835
LEAF_NODE	911:45	911:45	4	,
LEAF_NODE	911:46	911:46	4	4008
LEAF_NODE	911:50	911:50	4	,
LEAF_NODE	912:2	912:2	4	128
LEAF_NODE	912:5	912:5	4	,
LEAF_NODE	912:6	912:6	4	181
LEAF_NODE	912:9	912:9	4	,
LEAF_NODE	912:10	912:10	4	258
LEAF_NODE	912:13	912:13	4	,
LEAF_NODE	912:14	912:14	4	363
LEAF_NODE	912:17	912:17	4	,
LEAF_NODE	912:18	912:18	4	516
LEAF_NODE	912:21	912:21	4	,
LEAF_NODE	912:22	912:22	4	729
LEAF_NODE	912:25	912:25	4	,
LEAF_NODE	912:26	912:26	4	1032
LEAF_NODE	912:30	912:30	4	,
LEAF_NODE	912:31	912:31	4	1460
LEAF_NODE	912:35	912:35	4	,
LEAF_NODE	912:36	912:36	4	2064
LEAF_NODE	912:40	912:40	4	,
LEAF_NODE	912:41	912:41	4	2920
LEAF_NODE	912:45	912:45	4	,
LEAF_NODE	912:46	912:46	4	4127
LEAF_NODE	912:50	912:50	4	,
LEAF_NODE	913:2	913:2	4	113
LEAF_NODE	913:5	913:5	4	,
LEAF_NODE	913:6	913:6	4	162
LEAF_NODE	913:9	913:9	4	,
LEAF_NODE	913:10	913:10	4	230
LEAF_NODE	913:13	913:13	4	,
LEAF_NODE	913:14	913:14	4	323
LEAF_NODE	913:17	913:17	4	,
LEAF_NODE	913:18	913:18	4	459
LEAF_NODE	913:21	913:21	4	,
LEAF_NODE	913:22	913:22	4	649
LEAF_NODE	913:25	913:25	4	,
LEAF_NODE	913:26	913:26	4	918
LEAF_NODE	913:29	913:29	4	,
LEAF_NODE	913:30	913:30	4	1298
LEAF_NODE	913:34	913:34	4	,
LEAF_NODE	913:35	913:35	4	1837
LEAF_NODE	913:39	913:39	4	,
LEAF_NODE	913:40	913:40	4	1837
LEAF_NODE	913:44	913:44	4	,
LEAF_NODE	913:45	913:45	4	3677
LEAF_NODE	913:49	913:49	4	,
LEAF_NODE	914:2	914:2	4	1729
LEAF_NODE	914:6	914:6	4	,
LEAF_NODE	914:7	914:7	4	2438
LEAF_NODE	914:11	914:11	4	,
LEAF_NODE	914:12	914:12	4	3458
LEAF_NODE	914:16	914:16	4	,
LEAF_NODE	914:17	914:17	4	907
LEAF_NODE	914:20	914:20	4	,
LEAF_NODE	914:21	914:21	4	1276
LEAF_NODE	914:25	914:25	4	,
LEAF_NODE	914:26	914:26	4	1814
LEAF_NODE	914:30	914:30	4	,
LEAF_NODE	914:31	914:31	4	2551
LEAF_NODE	914:35	914:35	4	,
LEAF_NODE	914:36	914:36	4	3628
LEAF_NODE	914:40	914:40	4	,
LEAF_NODE	915:2	915:2	4	1262
LEAF_NODE	915:6	915:6	4	,
LEAF_NODE	915:7	915:7	4	914
LEAF_NODE	915:10	915:10	4	,
LEAF_NODE	916:2	916:2	4	612
LEAF_NODE	916:5	916:5	4	,
LEAF_NODE	916:7	916:7	4	936
LEAF_NODE	916:10	916:10	4	,
LEAF_NODE	916:12	916:12	4	780
LEAF_NODE	916:15	916:15	4	,
LEAF_NODE	917:2	917:2	4	0
LEAF_NODE	918:1	918:1	3	}
LEAF_NODE	918:2	918:2	3	;
EXPR_STATEMENT	920:1	920:22	3	len = strlen ( papersize ) ;
EXPR	920:1	920:1	4	len = strlen ( papersize )
ASSIGN	920:1	920:5	5	len = strlen ( papersize )
LVAL	920:1	920:1	6	len
FIELD	920:1	920:1	7	len
LEAF_NODE	920:1	920:1	8	len
ASSIGN_OP	920:4	920:4	6	=
LEAF_NODE	920:4	920:4	7	=
RVAL	920:5	920:5	6	strlen ( papersize )
FUNCTION_CALL	920:5	920:21	7	strlen ( papersize )
CALLEE	920:5	920:5	8	strlen
LEAF_NODE	920:5	920:5	9	strlen
LEAF_NODE	920:11	920:11	8	(
ARGUMENT	920:12	920:12	8	papersize
FIELD	920:12	920:12	9	papersize
LEAF_NODE	920:12	920:12	10	papersize
LEAF_NODE	920:21	920:21	8	)
LEAF_NODE	920:22	920:22	4	;
ITERATION	921:1	921:19	3	
KEYWORD	921:1	921:1	4	for
LEAF_NODE	921:1	921:1	5	for
LEAF_NODE	921:4	921:4	4	(
FOR_INIT	921:5	921:8	4	i = 0 ;
EXPR	921:5	921:5	5	i = 0
ASSIGN	921:5	921:7	6	i = 0
LVAL	921:5	921:5	7	i
FIELD	921:5	921:5	8	i
LEAF_NODE	921:5	921:5	9	i
ASSIGN_OP	921:6	921:6	7	=
LEAF_NODE	921:6	921:6	8	=
RVAL	921:7	921:7	7	0
FIELD	921:7	921:7	8	0
LEAF_NODE	921:7	921:7	9	0
LEAF_NODE	921:8	921:8	5	;
CONDITION	921:9	921:9	4	i < len
EXPR	921:9	921:11	5	i < len
FIELD	921:9	921:9	6	i
LEAF_NODE	921:9	921:9	7	i
REL_OPERATOR	921:10	921:10	6	<
LEAF_NODE	921:10	921:10	7	<
FIELD	921:11	921:11	6	len
LEAF_NODE	921:11	921:11	7	len
LEAF_NODE	921:14	921:14	4	;
FOR_EXPR	921:15	921:15	4	i ++
EXPR	921:15	921:15	5	i ++
FIELD	921:15	921:16	6	i ++
LEAF_NODE	921:15	921:15	7	i
LEAF_NODE	921:16	921:16	7	++
LEAF_NODE	921:18	921:18	4	)
STATEMENTS	921:19	923:1	4	
LEAF_NODE	921:19	921:19	5	{
STATEMENTS	922:2	922:2	5	
EXPR_STATEMENT	922:2	922:42	6	papersize [ i ] = toupper ( ( int ) papersize [ i ] ) ;
EXPR	922:2	922:2	7	papersize [ i ] = toupper ( ( int ) papersize [ i ] )
ASSIGN	922:2	922:15	8	papersize [ i ] = toupper ( ( int ) papersize [ i ] )
LVAL	922:2	922:2	9	papersize [ i ]
FIELD	922:2	922:13	10	papersize [ i ]
LEAF_NODE	922:2	922:2	11	papersize
LEAF_NODE	922:11	922:11	11	[
EXPR	922:12	922:12	11	i
FIELD	922:12	922:12	12	i
LEAF_NODE	922:12	922:12	13	i
LEAF_NODE	922:13	922:13	11	]
ASSIGN_OP	922:14	922:14	9	=
LEAF_NODE	922:14	922:14	10	=
RVAL	922:15	922:15	9	toupper ( ( int ) papersize [ i ] )
FUNCTION_CALL	922:15	922:41	10	toupper ( ( int ) papersize [ i ] )
CALLEE	922:15	922:15	11	toupper
LEAF_NODE	922:15	922:15	12	toupper
LEAF_NODE	922:22	922:22	11	(
ARGUMENT	922:23	922:29	11	( int ) papersize [ i ]
LEAF_NODE	922:23	922:23	12	(
TYPE_NAME	922:24	922:24	12	int
LEAF_NODE	922:24	922:24	13	int
LEAF_NODE	922:27	922:27	12	)
FIELD	922:29	922:40	12	papersize [ i ]
LEAF_NODE	922:29	922:29	13	papersize
LEAF_NODE	922:38	922:38	13	[
EXPR	922:39	922:39	13	i
FIELD	922:39	922:39	14	i
LEAF_NODE	922:39	922:39	15	i
LEAF_NODE	922:40	922:40	13	]
LEAF_NODE	922:41	922:41	11	)
LEAF_NODE	922:42	922:42	7	;
LEAF_NODE	923:1	923:1	5	}
ITERATION	924:1	924:29	3	
KEYWORD	924:1	924:1	4	for
LEAF_NODE	924:1	924:1	5	for
LEAF_NODE	924:4	924:4	4	(
FOR_INIT	924:5	924:8	4	i = 0 ;
EXPR	924:5	924:5	5	i = 0
ASSIGN	924:5	924:7	6	i = 0
LVAL	924:5	924:5	7	i
FIELD	924:5	924:5	8	i
LEAF_NODE	924:5	924:5	9	i
ASSIGN_OP	924:6	924:6	7	=
LEAF_NODE	924:6	924:6	8	=
RVAL	924:7	924:7	7	0
FIELD	924:7	924:7	8	0
LEAF_NODE	924:7	924:7	9	0
LEAF_NODE	924:8	924:8	5	;
CONDITION	924:9	924:9	4	sizes [ i ] != NULL
EXPR	924:9	924:19	5	sizes [ i ] != NULL
FIELD	924:9	924:16	6	sizes [ i ]
LEAF_NODE	924:9	924:9	7	sizes
LEAF_NODE	924:14	924:14	7	[
EXPR	924:15	924:15	7	i
FIELD	924:15	924:15	8	i
LEAF_NODE	924:15	924:15	9	i
LEAF_NODE	924:16	924:16	7	]
EQ_OPERATOR	924:17	924:17	6	!=
LEAF_NODE	924:17	924:17	7	!=
FIELD	924:19	924:19	6	NULL
LEAF_NODE	924:19	924:19	7	NULL
LEAF_NODE	924:23	924:23	4	;
FOR_EXPR	924:25	924:25	4	i ++
EXPR	924:25	924:25	5	i ++
FIELD	924:25	924:26	6	i ++
LEAF_NODE	924:25	924:25	7	i
LEAF_NODE	924:26	924:26	7	++
LEAF_NODE	924:28	924:28	4	)
STATEMENTS	924:29	930:1	4	
LEAF_NODE	924:29	924:29	5	{
STATEMENTS	925:2	925:2	5	
SELECTION	925:2	925:51	6	
KEYWORD	925:2	925:2	7	if
LEAF_NODE	925:2	925:2	8	if
LEAF_NODE	925:5	925:5	7	(
CONDITION	925:6	925:6	7	strcmp ( ( const char * ) papersize , sizes [ i ] ) == 0
EXPR	925:6	925:49	8	strcmp ( ( const char * ) papersize , sizes [ i ] ) == 0
FUNCTION_CALL	925:6	925:46	9	strcmp ( ( const char * ) papersize , sizes [ i ] )
CALLEE	925:6	925:6	10	strcmp
LEAF_NODE	925:6	925:6	11	strcmp
LEAF_NODE	925:12	925:12	10	(
ARGUMENT	925:14	925:27	10	( const char * ) papersize
LEAF_NODE	925:14	925:14	11	(
TYPE_NAME	925:15	925:21	11	const char
LEAF_NODE	925:15	925:15	12	const
LEAF_NODE	925:21	925:21	12	char
LEAF_NODE	925:25	925:25	11	*
LEAF_NODE	925:26	925:26	11	)
FIELD	925:27	925:27	11	papersize
LEAF_NODE	925:27	925:27	12	papersize
LEAF_NODE	925:36	925:36	10	,
ARGUMENT	925:38	925:38	10	sizes [ i ]
FIELD	925:38	925:45	11	sizes [ i ]
LEAF_NODE	925:38	925:38	12	sizes
LEAF_NODE	925:43	925:43	12	[
EXPR	925:44	925:44	12	i
FIELD	925:44	925:44	13	i
LEAF_NODE	925:44	925:44	14	i
LEAF_NODE	925:45	925:45	12	]
LEAF_NODE	925:46	925:46	10	)
EQ_OPERATOR	925:47	925:47	9	==
LEAF_NODE	925:47	925:47	10	==
FIELD	925:49	925:49	9	0
LEAF_NODE	925:49	925:49	10	0
LEAF_NODE	925:50	925:50	7	)
STATEMENTS	925:51	929:2	7	
LEAF_NODE	925:51	925:51	8	{
STATEMENTS	926:3	928:3	8	
EXPR_STATEMENT	926:3	926:26	9	* width = ( float ) widths [ i ] ;
EXPR	926:3	926:3	10	* width = ( float ) widths [ i ]
ASSIGN	926:3	926:10	11	* width = ( float ) widths [ i ]
LVAL	926:3	926:3	12	* width
UNARY_EXPR	926:3	926:4	13	* width
UNARY_OPERATOR	926:3	926:3	14	*
LEAF_NODE	926:3	926:3	15	*
FIELD	926:4	926:4	14	width
LEAF_NODE	926:4	926:4	15	width
ASSIGN_OP	926:9	926:9	12	=
LEAF_NODE	926:9	926:9	13	=
RVAL	926:10	926:17	12	( float ) widths [ i ]
LEAF_NODE	926:10	926:10	13	(
TYPE_NAME	926:11	926:11	13	float
LEAF_NODE	926:11	926:11	14	float
LEAF_NODE	926:16	926:16	13	)
FIELD	926:17	926:25	13	widths [ i ]
LEAF_NODE	926:17	926:17	14	widths
LEAF_NODE	926:23	926:23	14	[
EXPR	926:24	926:24	14	i
FIELD	926:24	926:24	15	i
LEAF_NODE	926:24	926:24	16	i
LEAF_NODE	926:25	926:25	14	]
LEAF_NODE	926:26	926:26	10	;
EXPR_STATEMENT	927:3	927:28	9	* length = ( float ) lengths [ i ] ;
EXPR	927:3	927:3	10	* length = ( float ) lengths [ i ]
ASSIGN	927:3	927:11	11	* length = ( float ) lengths [ i ]
LVAL	927:3	927:3	12	* length
UNARY_EXPR	927:3	927:4	13	* length
UNARY_OPERATOR	927:3	927:3	14	*
LEAF_NODE	927:3	927:3	15	*
FIELD	927:4	927:4	14	length
LEAF_NODE	927:4	927:4	15	length
ASSIGN_OP	927:10	927:10	12	=
LEAF_NODE	927:10	927:10	13	=
RVAL	927:11	927:18	12	( float ) lengths [ i ]
LEAF_NODE	927:11	927:11	13	(
TYPE_NAME	927:12	927:12	13	float
LEAF_NODE	927:12	927:12	14	float
LEAF_NODE	927:17	927:17	13	)
FIELD	927:18	927:27	13	lengths [ i ]
LEAF_NODE	927:18	927:18	14	lengths
LEAF_NODE	927:25	927:25	14	[
EXPR	927:26	927:26	14	i
FIELD	927:26	927:26	15	i
LEAF_NODE	927:26	927:26	16	i
LEAF_NODE	927:27	927:27	14	]
LEAF_NODE	927:28	927:28	10	;
JUMP_STATEMENT	928:3	928:12	9	return ( 1 ) ;
KEYWORD	928:3	928:3	10	return
LEAF_NODE	928:3	928:3	11	return
DESTINATION	928:9	928:9	10	( 1 )
EXPR	928:9	928:11	11	( 1 )
LEAF_NODE	928:9	928:9	12	(
FIELD	928:10	928:10	12	1
LEAF_NODE	928:10	928:10	13	1
LEAF_NODE	928:11	928:11	12	)
LEAF_NODE	928:12	928:12	10	;
LEAF_NODE	929:2	929:2	8	}
LEAF_NODE	930:1	930:1	5	}
JUMP_STATEMENT	932:1	932:10	3	return ( 0 ) ;
KEYWORD	932:1	932:1	4	return
LEAF_NODE	932:1	932:1	5	return
DESTINATION	932:7	932:7	4	( 0 )
EXPR	932:7	932:9	5	( 0 )
LEAF_NODE	932:7	932:7	6	(
FIELD	932:8	932:8	6	0
LEAF_NODE	932:8	932:8	7	0
LEAF_NODE	932:9	932:9	6	)
LEAF_NODE	932:10	932:10	4	;
LEAF_NODE	933:0	933:0	2	}
FUNCTION_DEF	939:0	959:0	1	
RETURN_TYPE	939:0	939:3	2	T2P *
TYPE_NAME	939:0	939:0	3	T2P
LEAF_NODE	939:0	939:0	4	T2P
LEAF_NODE	939:3	939:3	3	*
FUNCTION_NAME	939:5	939:5	2	t2p_init
LEAF_NODE	939:5	939:5	3	t2p_init
PARAMETER_LIST	939:13	939:14	2	( )
LEAF_NODE	939:13	939:13	3	(
LEAF_NODE	939:14	939:14	3	)
LEAF_NODE	940:0	940:0	2	{
STATEMENTS	941:1	958:12	2	
SIMPLE_DECL	941:1	941:43	3	T2P * t2p ; t2p = ( T2P * ) _TIFFmalloc ( sizeof ( T2P ) ) ;
VAR_DECL	941:1	941:6	4	T2P * t2p ; t2p = ( T2P * ) _TIFFmalloc ( sizeof ( T2P ) )
TYPE	941:1	941:4	5	T2P *
TYPE_NAME	941:1	941:1	6	T2P
LEAF_NODE	941:1	941:1	7	T2P
POINTER	941:4	941:4	6	*
LEAF_NODE	941:4	941:4	7	*
NAME	941:6	941:6	5	t2p
LEAF_NODE	941:6	941:6	6	t2p
LEAF_NODE	0:0	0:0	5	;
INIT	941:6	941:6	5	t2p = ( T2P * ) _TIFFmalloc ( sizeof ( T2P ) )
ASSIGN	941:6	941:12	6	t2p = ( T2P * ) _TIFFmalloc ( sizeof ( T2P ) )
LVAL	941:6	941:6	7	t2p
NAME	941:6	941:6	8	t2p
LEAF_NODE	941:6	941:6	9	t2p
ASSIGN_OP	941:10	941:10	7	=
LEAF_NODE	941:10	941:10	8	=
RVAL	941:12	941:19	7	( T2P * ) _TIFFmalloc ( sizeof ( T2P ) )
LEAF_NODE	941:12	941:12	8	(
TYPE_NAME	941:13	941:13	8	T2P
LEAF_NODE	941:13	941:13	9	T2P
LEAF_NODE	941:16	941:16	8	*
LEAF_NODE	941:17	941:17	8	)
FUNCTION_CALL	941:19	941:42	8	_TIFFmalloc ( sizeof ( T2P ) )
CALLEE	941:19	941:19	9	_TIFFmalloc
LEAF_NODE	941:19	941:19	10	_TIFFmalloc
LEAF_NODE	941:30	941:30	9	(
ARGUMENT	941:31	941:31	9	sizeof ( T2P )
FUNCTION_CALL	941:31	941:41	10	sizeof ( T2P )
CALLEE	941:31	941:31	11	sizeof
LEAF_NODE	941:31	941:31	12	sizeof
LEAF_NODE	941:37	941:37	11	(
ARGUMENT	941:38	941:38	11	T2P
FIELD	941:38	941:38	12	T2P
LEAF_NODE	941:38	941:38	13	T2P
LEAF_NODE	941:41	941:41	11	)
LEAF_NODE	941:42	941:42	9	)
LEAF_NODE	941:43	941:43	4	;
SELECTION	942:1	942:14	3	
KEYWORD	942:1	942:1	4	if
LEAF_NODE	942:1	942:1	5	if
LEAF_NODE	942:3	942:3	4	(
CONDITION	942:4	942:4	4	t2p == NULL
EXPR	942:4	942:9	5	t2p == NULL
FIELD	942:4	942:4	6	t2p
LEAF_NODE	942:4	942:4	7	t2p
EQ_OPERATOR	942:7	942:7	6	==
LEAF_NODE	942:7	942:7	7	==
FIELD	942:9	942:9	6	NULL
LEAF_NODE	942:9	942:9	7	NULL
LEAF_NODE	942:13	942:13	4	)
STATEMENTS	942:14	948:1	4	
LEAF_NODE	942:14	942:14	5	{
STATEMENTS	943:2	947:2	5	
EXPR_STATEMENT	943:2	946:31	6	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_init" , ( unsigned long ) sizeof ( T2P ) ) ;
EXPR	943:2	943:2	7	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_init" , ( unsigned long ) sizeof ( T2P ) )
FUNCTION_CALL	943:2	946:30	8	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_init" , ( unsigned long ) sizeof ( T2P ) )
CALLEE	943:2	943:2	9	TIFFError
LEAF_NODE	943:2	943:2	10	TIFFError
LEAF_NODE	943:11	943:11	9	(
ARGUMENT	944:3	944:3	9	TIFF2PDF_MODULE
FIELD	944:3	944:3	10	TIFF2PDF_MODULE
LEAF_NODE	944:3	944:3	11	TIFF2PDF_MODULE
LEAF_NODE	944:18	944:18	9	,
ARGUMENT	945:3	945:3	9	"Can't allocate %lu bytes of memory for t2p_init"
FIELD	945:3	945:3	10	"Can't allocate %lu bytes of memory for t2p_init"
LEAF_NODE	945:3	945:3	11	"Can't allocate %lu bytes of memory for t2p_init"
LEAF_NODE	945:52	945:52	9	,
ARGUMENT	946:3	946:19	9	( unsigned long ) sizeof ( T2P )
LEAF_NODE	946:3	946:3	10	(
TYPE_NAME	946:4	946:13	10	unsigned long
LEAF_NODE	946:4	946:4	11	unsigned
LEAF_NODE	946:13	946:13	11	long
LEAF_NODE	946:17	946:17	10	)
FUNCTION_CALL	946:19	946:29	10	sizeof ( T2P )
CALLEE	946:19	946:19	11	sizeof
LEAF_NODE	946:19	946:19	12	sizeof
LEAF_NODE	946:25	946:25	11	(
ARGUMENT	946:26	946:26	11	T2P
FIELD	946:26	946:26	12	T2P
LEAF_NODE	946:26	946:26	13	T2P
LEAF_NODE	946:29	946:29	11	)
LEAF_NODE	946:30	946:30	9	)
LEAF_NODE	946:31	946:31	7	;
JUMP_STATEMENT	947:2	947:23	6	return ( ( T2P * ) NULL ) ;
KEYWORD	947:2	947:2	7	return
LEAF_NODE	947:2	947:2	8	return
DESTINATION	947:8	947:8	7	( ( T2P * ) NULL )
EXPR	947:8	947:22	8	( ( T2P * ) NULL )
LEAF_NODE	947:8	947:8	9	(
LEAF_NODE	947:10	947:10	9	(
TYPE_NAME	947:11	947:11	9	T2P
LEAF_NODE	947:11	947:11	10	T2P
LEAF_NODE	947:14	947:14	9	*
LEAF_NODE	947:15	947:15	9	)
FIELD	947:17	947:17	9	NULL
LEAF_NODE	947:17	947:17	10	NULL
LEAF_NODE	947:22	947:22	9	)
LEAF_NODE	947:23	947:23	7	;
LEAF_NODE	948:1	948:1	5	}
EXPR_STATEMENT	949:1	949:36	3	_TIFFmemset ( t2p , 0x00 , sizeof ( T2P ) ) ;
EXPR	949:1	949:1	4	_TIFFmemset ( t2p , 0x00 , sizeof ( T2P ) )
FUNCTION_CALL	949:1	949:35	5	_TIFFmemset ( t2p , 0x00 , sizeof ( T2P ) )
CALLEE	949:1	949:1	6	_TIFFmemset
LEAF_NODE	949:1	949:1	7	_TIFFmemset
LEAF_NODE	949:12	949:12	6	(
ARGUMENT	949:13	949:13	6	t2p
FIELD	949:13	949:13	7	t2p
LEAF_NODE	949:13	949:13	8	t2p
LEAF_NODE	949:16	949:16	6	,
ARGUMENT	949:18	949:18	6	0x00
FIELD	949:18	949:18	7	0x00
LEAF_NODE	949:18	949:18	8	0x00
LEAF_NODE	949:22	949:22	6	,
ARGUMENT	949:24	949:24	6	sizeof ( T2P )
FUNCTION_CALL	949:24	949:34	7	sizeof ( T2P )
CALLEE	949:24	949:24	8	sizeof
LEAF_NODE	949:24	949:24	9	sizeof
LEAF_NODE	949:30	949:30	8	(
ARGUMENT	949:31	949:31	8	T2P
FIELD	949:31	949:31	9	T2P
LEAF_NODE	949:31	949:31	10	T2P
LEAF_NODE	949:34	949:34	8	)
LEAF_NODE	949:35	949:35	6	)
LEAF_NODE	949:36	949:36	4	;
EXPR_STATEMENT	950:1	950:24	3	t2p -> pdf_majorversion = 1 ;
EXPR	950:1	950:1	4	t2p -> pdf_majorversion = 1
ASSIGN	950:1	950:23	5	t2p -> pdf_majorversion = 1
LVAL	950:1	950:1	6	t2p -> pdf_majorversion
FIELD	950:1	950:6	7	t2p -> pdf_majorversion
LEAF_NODE	950:1	950:1	8	t2p
LEAF_NODE	950:4	950:4	8	->
LEAF_NODE	950:6	950:6	8	pdf_majorversion
ASSIGN_OP	950:22	950:22	6	=
LEAF_NODE	950:22	950:22	7	=
RVAL	950:23	950:23	6	1
FIELD	950:23	950:23	7	1
LEAF_NODE	950:23	950:23	8	1
LEAF_NODE	950:24	950:24	4	;
EXPR_STATEMENT	951:1	951:24	3	t2p -> pdf_minorversion = 1 ;
EXPR	951:1	951:1	4	t2p -> pdf_minorversion = 1
ASSIGN	951:1	951:23	5	t2p -> pdf_minorversion = 1
LVAL	951:1	951:1	6	t2p -> pdf_minorversion
FIELD	951:1	951:6	7	t2p -> pdf_minorversion
LEAF_NODE	951:1	951:1	8	t2p
LEAF_NODE	951:4	951:4	8	->
LEAF_NODE	951:6	951:6	8	pdf_minorversion
ASSIGN_OP	951:22	951:22	6	=
LEAF_NODE	951:22	951:22	7	=
RVAL	951:23	951:23	6	1
FIELD	951:23	951:23	7	1
LEAF_NODE	951:23	951:23	8	1
LEAF_NODE	951:24	951:24	4	;
EXPR_STATEMENT	952:1	952:27	3	t2p -> pdf_defaultxres = 300.0 ;
EXPR	952:1	952:1	4	t2p -> pdf_defaultxres = 300.0
ASSIGN	952:1	952:22	5	t2p -> pdf_defaultxres = 300.0
LVAL	952:1	952:1	6	t2p -> pdf_defaultxres
FIELD	952:1	952:6	7	t2p -> pdf_defaultxres
LEAF_NODE	952:1	952:1	8	t2p
LEAF_NODE	952:4	952:4	8	->
LEAF_NODE	952:6	952:6	8	pdf_defaultxres
ASSIGN_OP	952:21	952:21	6	=
LEAF_NODE	952:21	952:21	7	=
RVAL	952:22	952:22	6	300.0
FIELD	952:22	952:22	7	300.0
LEAF_NODE	952:22	952:22	8	300.0
LEAF_NODE	952:27	952:27	4	;
EXPR_STATEMENT	953:1	953:27	3	t2p -> pdf_defaultyres = 300.0 ;
EXPR	953:1	953:1	4	t2p -> pdf_defaultyres = 300.0
ASSIGN	953:1	953:22	5	t2p -> pdf_defaultyres = 300.0
LVAL	953:1	953:1	6	t2p -> pdf_defaultyres
FIELD	953:1	953:6	7	t2p -> pdf_defaultyres
LEAF_NODE	953:1	953:1	8	t2p
LEAF_NODE	953:4	953:4	8	->
LEAF_NODE	953:6	953:6	8	pdf_defaultyres
ASSIGN_OP	953:21	953:21	6	=
LEAF_NODE	953:21	953:21	7	=
RVAL	953:22	953:22	6	300.0
FIELD	953:22	953:22	7	300.0
LEAF_NODE	953:22	953:22	8	300.0
LEAF_NODE	953:27	953:27	4	;
EXPR_STATEMENT	954:1	954:32	3	t2p -> pdf_defaultpagewidth = 612.0 ;
EXPR	954:1	954:1	4	t2p -> pdf_defaultpagewidth = 612.0
ASSIGN	954:1	954:27	5	t2p -> pdf_defaultpagewidth = 612.0
LVAL	954:1	954:1	6	t2p -> pdf_defaultpagewidth
FIELD	954:1	954:6	7	t2p -> pdf_defaultpagewidth
LEAF_NODE	954:1	954:1	8	t2p
LEAF_NODE	954:4	954:4	8	->
LEAF_NODE	954:6	954:6	8	pdf_defaultpagewidth
ASSIGN_OP	954:26	954:26	6	=
LEAF_NODE	954:26	954:26	7	=
RVAL	954:27	954:27	6	612.0
FIELD	954:27	954:27	7	612.0
LEAF_NODE	954:27	954:27	8	612.0
LEAF_NODE	954:32	954:32	4	;
EXPR_STATEMENT	955:1	955:33	3	t2p -> pdf_defaultpagelength = 792.0 ;
EXPR	955:1	955:1	4	t2p -> pdf_defaultpagelength = 792.0
ASSIGN	955:1	955:28	5	t2p -> pdf_defaultpagelength = 792.0
LVAL	955:1	955:1	6	t2p -> pdf_defaultpagelength
FIELD	955:1	955:6	7	t2p -> pdf_defaultpagelength
LEAF_NODE	955:1	955:1	8	t2p
LEAF_NODE	955:4	955:4	8	->
LEAF_NODE	955:6	955:6	8	pdf_defaultpagelength
ASSIGN_OP	955:27	955:27	6	=
LEAF_NODE	955:27	955:27	7	=
RVAL	955:28	955:28	6	792.0
FIELD	955:28	955:28	7	792.0
LEAF_NODE	955:28	955:28	8	792.0
LEAF_NODE	955:33	955:33	4	;
EXPR_STATEMENT	956:1	956:21	3	t2p -> pdf_xrefcount = 3 ;
EXPR	956:1	956:1	4	t2p -> pdf_xrefcount = 3
ASSIGN	956:1	956:20	5	t2p -> pdf_xrefcount = 3
LVAL	956:1	956:1	6	t2p -> pdf_xrefcount
FIELD	956:1	956:6	7	t2p -> pdf_xrefcount
LEAF_NODE	956:1	956:1	8	t2p
LEAF_NODE	956:4	956:4	8	->
LEAF_NODE	956:6	956:6	8	pdf_xrefcount
ASSIGN_OP	956:19	956:19	6	=
LEAF_NODE	956:19	956:19	7	=
RVAL	956:20	956:20	6	3
FIELD	956:20	956:20	7	3
LEAF_NODE	956:20	956:20	8	3
LEAF_NODE	956:21	956:21	4	;
LEAF_NODE	958:1	958:1	3	return
LEAF_NODE	958:7	958:7	3	(
LEAF_NODE	958:8	958:8	3	t2p
LEAF_NODE	958:11	958:11	3	)
LEAF_NODE	958:12	958:12	3	;
LEAF_NODE	959:0	959:0	2	}
FUNCTION_DEF	965:0	996:0	1	
RETURN_TYPE	965:0	965:0	2	void
TYPE_NAME	965:0	965:0	3	void
LEAF_NODE	965:0	965:0	4	void
FUNCTION_NAME	965:5	965:5	2	t2p_free
LEAF_NODE	965:5	965:5	3	t2p_free
PARAMETER_LIST	965:13	965:22	2	( T2P * t2p )
LEAF_NODE	965:13	965:13	3	(
PARAMETER_DECL	965:14	965:19	3	T2P * t2p
TYPE	965:14	965:17	4	T2P *
TYPE_NAME	965:14	965:14	5	T2P
LEAF_NODE	965:14	965:14	6	T2P
POINTER	965:17	965:17	5	*
LEAF_NODE	965:17	965:17	6	*
NAME	965:19	965:19	4	t2p
LEAF_NODE	965:19	965:19	5	t2p
LEAF_NODE	965:22	965:22	3	)
LEAF_NODE	966:0	966:0	2	{
STATEMENTS	967:1	995:1	2	
SIMPLE_DECL	967:1	967:10	3	int i ; i = 0 ;
VAR_DECL	967:1	967:5	4	int i ; i = 0
TYPE	967:1	967:1	5	int
TYPE_NAME	967:1	967:1	6	int
LEAF_NODE	967:1	967:1	7	int
NAME	967:5	967:5	5	i
LEAF_NODE	967:5	967:5	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	967:5	967:5	5	i = 0
ASSIGN	967:5	967:9	6	i = 0
LVAL	967:5	967:5	7	i
NAME	967:5	967:5	8	i
LEAF_NODE	967:5	967:5	9	i
ASSIGN_OP	967:7	967:7	7	=
LEAF_NODE	967:7	967:7	8	=
RVAL	967:9	967:9	7	0
FIELD	967:9	967:9	8	0
LEAF_NODE	967:9	967:9	9	0
LEAF_NODE	967:10	967:10	4	;
SELECTION	969:1	969:18	3	
KEYWORD	969:1	969:1	4	if
LEAF_NODE	969:1	969:1	5	if
LEAF_NODE	969:4	969:4	4	(
CONDITION	969:5	969:5	4	t2p != NULL
EXPR	969:5	969:12	5	t2p != NULL
FIELD	969:5	969:5	6	t2p
LEAF_NODE	969:5	969:5	7	t2p
EQ_OPERATOR	969:9	969:9	6	!=
LEAF_NODE	969:9	969:9	7	!=
FIELD	969:12	969:12	6	NULL
LEAF_NODE	969:12	969:12	7	NULL
LEAF_NODE	969:16	969:16	4	)
STATEMENTS	969:18	993:1	4	
LEAF_NODE	969:18	969:18	5	{
STATEMENTS	970:2	992:2	5	
SELECTION	970:2	970:34	6	
KEYWORD	970:2	970:2	7	if
LEAF_NODE	970:2	970:2	8	if
LEAF_NODE	970:4	970:4	7	(
CONDITION	970:5	970:5	7	t2p -> pdf_xrefoffsets != NULL
EXPR	970:5	970:29	8	t2p -> pdf_xrefoffsets != NULL
FIELD	970:5	970:10	9	t2p -> pdf_xrefoffsets
LEAF_NODE	970:5	970:5	10	t2p
LEAF_NODE	970:8	970:8	10	->
LEAF_NODE	970:10	970:10	10	pdf_xrefoffsets
EQ_OPERATOR	970:26	970:26	9	!=
LEAF_NODE	970:26	970:26	10	!=
FIELD	970:29	970:29	9	NULL
LEAF_NODE	970:29	970:29	10	NULL
LEAF_NODE	970:33	970:33	7	)
STATEMENTS	970:34	972:2	7	
LEAF_NODE	970:34	970:34	8	{
STATEMENTS	971:3	971:3	8	
EXPR_STATEMENT	971:3	971:45	9	_TIFFfree ( ( tdata_t ) t2p -> pdf_xrefoffsets ) ;
EXPR	971:3	971:3	10	_TIFFfree ( ( tdata_t ) t2p -> pdf_xrefoffsets )
FUNCTION_CALL	971:3	971:44	11	_TIFFfree ( ( tdata_t ) t2p -> pdf_xrefoffsets )
CALLEE	971:3	971:3	12	_TIFFfree
LEAF_NODE	971:3	971:3	13	_TIFFfree
LEAF_NODE	971:12	971:12	12	(
ARGUMENT	971:14	971:24	12	( tdata_t ) t2p -> pdf_xrefoffsets
LEAF_NODE	971:14	971:14	13	(
TYPE_NAME	971:15	971:15	13	tdata_t
LEAF_NODE	971:15	971:15	14	tdata_t
LEAF_NODE	971:22	971:22	13	)
FIELD	971:24	971:29	13	t2p -> pdf_xrefoffsets
LEAF_NODE	971:24	971:24	14	t2p
LEAF_NODE	971:27	971:27	14	->
LEAF_NODE	971:29	971:29	14	pdf_xrefoffsets
LEAF_NODE	971:44	971:44	12	)
LEAF_NODE	971:45	971:45	10	;
LEAF_NODE	972:2	972:2	8	}
SELECTION	973:2	973:29	6	
KEYWORD	973:2	973:2	7	if
LEAF_NODE	973:2	973:2	8	if
LEAF_NODE	973:4	973:4	7	(
CONDITION	973:5	973:5	7	t2p -> tiff_pages != NULL
EXPR	973:5	973:24	8	t2p -> tiff_pages != NULL
FIELD	973:5	973:10	9	t2p -> tiff_pages
LEAF_NODE	973:5	973:5	10	t2p
LEAF_NODE	973:8	973:8	10	->
LEAF_NODE	973:10	973:10	10	tiff_pages
EQ_OPERATOR	973:21	973:21	9	!=
LEAF_NODE	973:21	973:21	10	!=
FIELD	973:24	973:24	9	NULL
LEAF_NODE	973:24	973:24	10	NULL
LEAF_NODE	973:28	973:28	7	)
STATEMENTS	973:29	975:2	7	
LEAF_NODE	973:29	973:29	8	{
STATEMENTS	974:3	974:3	8	
EXPR_STATEMENT	974:3	974:40	9	_TIFFfree ( ( tdata_t ) t2p -> tiff_pages ) ;
EXPR	974:3	974:3	10	_TIFFfree ( ( tdata_t ) t2p -> tiff_pages )
FUNCTION_CALL	974:3	974:39	11	_TIFFfree ( ( tdata_t ) t2p -> tiff_pages )
CALLEE	974:3	974:3	12	_TIFFfree
LEAF_NODE	974:3	974:3	13	_TIFFfree
LEAF_NODE	974:12	974:12	12	(
ARGUMENT	974:14	974:24	12	( tdata_t ) t2p -> tiff_pages
LEAF_NODE	974:14	974:14	13	(
TYPE_NAME	974:15	974:15	13	tdata_t
LEAF_NODE	974:15	974:15	14	tdata_t
LEAF_NODE	974:22	974:22	13	)
FIELD	974:24	974:29	13	t2p -> tiff_pages
LEAF_NODE	974:24	974:24	14	t2p
LEAF_NODE	974:27	974:27	14	->
LEAF_NODE	974:29	974:29	14	tiff_pages
LEAF_NODE	974:39	974:39	12	)
LEAF_NODE	974:40	974:40	10	;
LEAF_NODE	975:2	975:2	8	}
ITERATION	976:2	976:36	6	
KEYWORD	976:2	976:2	7	for
LEAF_NODE	976:2	976:2	8	for
LEAF_NODE	976:5	976:5	7	(
FOR_INIT	976:6	976:9	7	i = 0 ;
EXPR	976:6	976:6	8	i = 0
ASSIGN	976:6	976:8	9	i = 0
LVAL	976:6	976:6	10	i
FIELD	976:6	976:6	11	i
LEAF_NODE	976:6	976:6	12	i
ASSIGN_OP	976:7	976:7	10	=
LEAF_NODE	976:7	976:7	11	=
RVAL	976:8	976:8	10	0
FIELD	976:8	976:8	11	0
LEAF_NODE	976:8	976:8	12	0
LEAF_NODE	976:9	976:9	8	;
CONDITION	976:10	976:10	7	i < t2p -> tiff_pagecount
EXPR	976:10	976:12	8	i < t2p -> tiff_pagecount
FIELD	976:10	976:10	9	i
LEAF_NODE	976:10	976:10	10	i
REL_OPERATOR	976:11	976:11	9	<
LEAF_NODE	976:11	976:11	10	<
FIELD	976:12	976:17	9	t2p -> tiff_pagecount
LEAF_NODE	976:12	976:12	10	t2p
LEAF_NODE	976:15	976:15	10	->
LEAF_NODE	976:17	976:17	10	tiff_pagecount
LEAF_NODE	976:31	976:31	7	;
FOR_EXPR	976:32	976:32	7	i ++
EXPR	976:32	976:32	8	i ++
FIELD	976:32	976:33	9	i ++
LEAF_NODE	976:32	976:32	10	i
LEAF_NODE	976:33	976:33	10	++
LEAF_NODE	976:35	976:35	7	)
STATEMENTS	976:36	980:2	7	
LEAF_NODE	976:36	976:36	8	{
STATEMENTS	977:3	977:3	8	
SELECTION	977:3	977:45	9	
KEYWORD	977:3	977:3	10	if
LEAF_NODE	977:3	977:3	11	if
LEAF_NODE	977:5	977:5	10	(
CONDITION	977:6	977:6	10	t2p -> tiff_tiles [ i ] . tiles_tiles != NULL
EXPR	977:6	977:40	11	t2p -> tiff_tiles [ i ] . tiles_tiles != NULL
FIELD	977:6	977:25	12	t2p -> tiff_tiles [ i ] . tiles_tiles
LEAF_NODE	977:6	977:6	13	t2p
LEAF_NODE	977:9	977:9	13	->
LEAF_NODE	977:11	977:11	13	tiff_tiles
LEAF_NODE	977:21	977:21	13	[
EXPR	977:22	977:22	13	i
FIELD	977:22	977:22	14	i
LEAF_NODE	977:22	977:22	15	i
LEAF_NODE	977:23	977:23	13	]
LEAF_NODE	977:24	977:24	13	.
LEAF_NODE	977:25	977:25	13	tiles_tiles
EQ_OPERATOR	977:37	977:37	12	!=
LEAF_NODE	977:37	977:37	13	!=
FIELD	977:40	977:40	12	NULL
LEAF_NODE	977:40	977:40	13	NULL
LEAF_NODE	977:44	977:44	10	)
STATEMENTS	977:45	979:3	10	
LEAF_NODE	977:45	977:45	11	{
STATEMENTS	978:4	978:4	11	
EXPR_STATEMENT	978:4	978:56	12	_TIFFfree ( ( tdata_t ) t2p -> tiff_tiles [ i ] . tiles_tiles ) ;
EXPR	978:4	978:4	13	_TIFFfree ( ( tdata_t ) t2p -> tiff_tiles [ i ] . tiles_tiles )
FUNCTION_CALL	978:4	978:55	14	_TIFFfree ( ( tdata_t ) t2p -> tiff_tiles [ i ] . tiles_tiles )
CALLEE	978:4	978:4	15	_TIFFfree
LEAF_NODE	978:4	978:4	16	_TIFFfree
LEAF_NODE	978:13	978:13	15	(
ARGUMENT	978:15	978:25	15	( tdata_t ) t2p -> tiff_tiles [ i ] . tiles_tiles
LEAF_NODE	978:15	978:15	16	(
TYPE_NAME	978:16	978:16	16	tdata_t
LEAF_NODE	978:16	978:16	17	tdata_t
LEAF_NODE	978:23	978:23	16	)
FIELD	978:25	978:44	16	t2p -> tiff_tiles [ i ] . tiles_tiles
LEAF_NODE	978:25	978:25	17	t2p
LEAF_NODE	978:28	978:28	17	->
LEAF_NODE	978:30	978:30	17	tiff_tiles
LEAF_NODE	978:40	978:40	17	[
EXPR	978:41	978:41	17	i
FIELD	978:41	978:41	18	i
LEAF_NODE	978:41	978:41	19	i
LEAF_NODE	978:42	978:42	17	]
LEAF_NODE	978:43	978:43	17	.
LEAF_NODE	978:44	978:44	17	tiles_tiles
LEAF_NODE	978:55	978:55	15	)
LEAF_NODE	978:56	978:56	13	;
LEAF_NODE	979:3	979:3	11	}
LEAF_NODE	980:2	980:2	8	}
SELECTION	981:2	981:29	6	
KEYWORD	981:2	981:2	7	if
LEAF_NODE	981:2	981:2	8	if
LEAF_NODE	981:4	981:4	7	(
CONDITION	981:5	981:5	7	t2p -> tiff_tiles != NULL
EXPR	981:5	981:24	8	t2p -> tiff_tiles != NULL
FIELD	981:5	981:10	9	t2p -> tiff_tiles
LEAF_NODE	981:5	981:5	10	t2p
LEAF_NODE	981:8	981:8	10	->
LEAF_NODE	981:10	981:10	10	tiff_tiles
EQ_OPERATOR	981:21	981:21	9	!=
LEAF_NODE	981:21	981:21	10	!=
FIELD	981:24	981:24	9	NULL
LEAF_NODE	981:24	981:24	10	NULL
LEAF_NODE	981:28	981:28	7	)
STATEMENTS	981:29	983:2	7	
LEAF_NODE	981:29	981:29	8	{
STATEMENTS	982:3	982:3	8	
EXPR_STATEMENT	982:3	982:40	9	_TIFFfree ( ( tdata_t ) t2p -> tiff_tiles ) ;
EXPR	982:3	982:3	10	_TIFFfree ( ( tdata_t ) t2p -> tiff_tiles )
FUNCTION_CALL	982:3	982:39	11	_TIFFfree ( ( tdata_t ) t2p -> tiff_tiles )
CALLEE	982:3	982:3	12	_TIFFfree
LEAF_NODE	982:3	982:3	13	_TIFFfree
LEAF_NODE	982:12	982:12	12	(
ARGUMENT	982:14	982:24	12	( tdata_t ) t2p -> tiff_tiles
LEAF_NODE	982:14	982:14	13	(
TYPE_NAME	982:15	982:15	13	tdata_t
LEAF_NODE	982:15	982:15	14	tdata_t
LEAF_NODE	982:22	982:22	13	)
FIELD	982:24	982:29	13	t2p -> tiff_tiles
LEAF_NODE	982:24	982:24	14	t2p
LEAF_NODE	982:27	982:27	14	->
LEAF_NODE	982:29	982:29	14	tiff_tiles
LEAF_NODE	982:39	982:39	12	)
LEAF_NODE	982:40	982:40	10	;
LEAF_NODE	983:2	983:2	8	}
SELECTION	984:2	984:30	6	
KEYWORD	984:2	984:2	7	if
LEAF_NODE	984:2	984:2	8	if
LEAF_NODE	984:4	984:4	7	(
CONDITION	984:5	984:5	7	t2p -> pdf_palette != NULL
EXPR	984:5	984:25	8	t2p -> pdf_palette != NULL
FIELD	984:5	984:10	9	t2p -> pdf_palette
LEAF_NODE	984:5	984:5	10	t2p
LEAF_NODE	984:8	984:8	10	->
LEAF_NODE	984:10	984:10	10	pdf_palette
EQ_OPERATOR	984:22	984:22	9	!=
LEAF_NODE	984:22	984:22	10	!=
FIELD	984:25	984:25	9	NULL
LEAF_NODE	984:25	984:25	10	NULL
LEAF_NODE	984:29	984:29	7	)
STATEMENTS	984:30	986:2	7	
LEAF_NODE	984:30	984:30	8	{
STATEMENTS	985:3	985:3	8	
EXPR_STATEMENT	985:3	985:41	9	_TIFFfree ( ( tdata_t ) t2p -> pdf_palette ) ;
EXPR	985:3	985:3	10	_TIFFfree ( ( tdata_t ) t2p -> pdf_palette )
FUNCTION_CALL	985:3	985:40	11	_TIFFfree ( ( tdata_t ) t2p -> pdf_palette )
CALLEE	985:3	985:3	12	_TIFFfree
LEAF_NODE	985:3	985:3	13	_TIFFfree
LEAF_NODE	985:12	985:12	12	(
ARGUMENT	985:14	985:24	12	( tdata_t ) t2p -> pdf_palette
LEAF_NODE	985:14	985:14	13	(
TYPE_NAME	985:15	985:15	13	tdata_t
LEAF_NODE	985:15	985:15	14	tdata_t
LEAF_NODE	985:22	985:22	13	)
FIELD	985:24	985:29	13	t2p -> pdf_palette
LEAF_NODE	985:24	985:24	14	t2p
LEAF_NODE	985:27	985:27	14	->
LEAF_NODE	985:29	985:29	14	pdf_palette
LEAF_NODE	985:40	985:40	12	)
LEAF_NODE	985:41	985:41	10	;
LEAF_NODE	986:2	986:2	8	}
SELECTION	988:2	988:32	6	
KEYWORD	988:2	988:2	7	if
LEAF_NODE	988:2	988:2	8	if
LEAF_NODE	988:4	988:4	7	(
CONDITION	988:5	988:5	7	t2p -> pdf_ojpegdata != NULL
EXPR	988:5	988:27	8	t2p -> pdf_ojpegdata != NULL
FIELD	988:5	988:10	9	t2p -> pdf_ojpegdata
LEAF_NODE	988:5	988:5	10	t2p
LEAF_NODE	988:8	988:8	10	->
LEAF_NODE	988:10	988:10	10	pdf_ojpegdata
EQ_OPERATOR	988:24	988:24	9	!=
LEAF_NODE	988:24	988:24	10	!=
FIELD	988:27	988:27	9	NULL
LEAF_NODE	988:27	988:27	10	NULL
LEAF_NODE	988:31	988:31	7	)
STATEMENTS	988:32	990:2	7	
LEAF_NODE	988:32	988:32	8	{
STATEMENTS	989:3	989:3	8	
EXPR_STATEMENT	989:3	989:43	9	_TIFFfree ( ( tdata_t ) t2p -> pdf_ojpegdata ) ;
EXPR	989:3	989:3	10	_TIFFfree ( ( tdata_t ) t2p -> pdf_ojpegdata )
FUNCTION_CALL	989:3	989:42	11	_TIFFfree ( ( tdata_t ) t2p -> pdf_ojpegdata )
CALLEE	989:3	989:3	12	_TIFFfree
LEAF_NODE	989:3	989:3	13	_TIFFfree
LEAF_NODE	989:12	989:12	12	(
ARGUMENT	989:14	989:24	12	( tdata_t ) t2p -> pdf_ojpegdata
LEAF_NODE	989:14	989:14	13	(
TYPE_NAME	989:15	989:15	13	tdata_t
LEAF_NODE	989:15	989:15	14	tdata_t
LEAF_NODE	989:22	989:22	13	)
FIELD	989:24	989:29	13	t2p -> pdf_ojpegdata
LEAF_NODE	989:24	989:24	14	t2p
LEAF_NODE	989:27	989:27	14	->
LEAF_NODE	989:29	989:29	14	pdf_ojpegdata
LEAF_NODE	989:42	989:42	12	)
LEAF_NODE	989:43	989:43	10	;
LEAF_NODE	990:2	990:2	8	}
EXPR_STATEMENT	992:2	992:28	6	_TIFFfree ( ( tdata_t ) t2p ) ;
EXPR	992:2	992:2	7	_TIFFfree ( ( tdata_t ) t2p )
FUNCTION_CALL	992:2	992:27	8	_TIFFfree ( ( tdata_t ) t2p )
CALLEE	992:2	992:2	9	_TIFFfree
LEAF_NODE	992:2	992:2	10	_TIFFfree
LEAF_NODE	992:11	992:11	9	(
ARGUMENT	992:13	992:23	9	( tdata_t ) t2p
LEAF_NODE	992:13	992:13	10	(
TYPE_NAME	992:14	992:14	10	tdata_t
LEAF_NODE	992:14	992:14	11	tdata_t
LEAF_NODE	992:21	992:21	10	)
FIELD	992:23	992:23	10	t2p
LEAF_NODE	992:23	992:23	11	t2p
LEAF_NODE	992:27	992:27	9	)
LEAF_NODE	992:28	992:28	7	;
LEAF_NODE	993:1	993:1	5	}
JUMP_STATEMENT	995:1	995:7	3	return DESTINATION ;
KEYWORD	995:1	995:1	4	return
LEAF_NODE	995:1	995:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	995:7	995:7	4	;
LEAF_NODE	996:0	996:0	2	}
FUNCTION_DEF	1003:0	1035:0	1	
RETURN_TYPE	1003:0	1003:0	2	void
TYPE_NAME	1003:0	1003:0	3	void
LEAF_NODE	1003:0	1003:0	4	void
FUNCTION_NAME	1003:5	1003:5	2	t2p_validate
LEAF_NODE	1003:5	1003:5	3	t2p_validate
PARAMETER_LIST	1003:17	1003:26	2	( T2P * t2p )
LEAF_NODE	1003:17	1003:17	3	(
PARAMETER_DECL	1003:18	1003:23	3	T2P * t2p
TYPE	1003:18	1003:21	4	T2P *
TYPE_NAME	1003:18	1003:18	5	T2P
LEAF_NODE	1003:18	1003:18	6	T2P
POINTER	1003:21	1003:21	5	*
LEAF_NODE	1003:21	1003:21	6	*
NAME	1003:23	1003:23	4	t2p
LEAF_NODE	1003:23	1003:23	5	t2p
LEAF_NODE	1003:26	1003:26	3	)
LEAF_NODE	1003:27	1003:27	2	{
STATEMENTS	1006:1	1034:1	2	
SELECTION	1006:1	1006:51	3	
KEYWORD	1006:1	1006:1	4	if
LEAF_NODE	1006:1	1006:1	5	if
LEAF_NODE	1006:3	1006:3	4	(
CONDITION	1006:4	1006:4	4	t2p -> pdf_defaultcompression == T2P_COMPRESS_JPEG
EXPR	1006:4	1006:33	5	t2p -> pdf_defaultcompression == T2P_COMPRESS_JPEG
FIELD	1006:4	1006:9	6	t2p -> pdf_defaultcompression
LEAF_NODE	1006:4	1006:4	7	t2p
LEAF_NODE	1006:7	1006:7	7	->
LEAF_NODE	1006:9	1006:9	7	pdf_defaultcompression
EQ_OPERATOR	1006:31	1006:31	6	==
LEAF_NODE	1006:31	1006:31	7	==
FIELD	1006:33	1006:33	6	T2P_COMPRESS_JPEG
LEAF_NODE	1006:33	1006:33	7	T2P_COMPRESS_JPEG
LEAF_NODE	1006:50	1006:50	4	)
STATEMENTS	1006:51	1011:1	4	
LEAF_NODE	1006:51	1006:51	5	{
STATEMENTS	1007:2	1007:2	5	
SELECTION	1007:2	1008:40	6	
KEYWORD	1007:2	1007:2	7	if
LEAF_NODE	1007:2	1007:2	8	if
LEAF_NODE	1007:4	1007:4	7	(
CONDITION	1007:5	1007:5	7	t2p -> pdf_defaultcompressionquality > 100 || t2p -> pdf_defaultcompressionquality < 1
EXPR	1007:5	1007:5	8	t2p -> pdf_defaultcompressionquality > 100 || t2p -> pdf_defaultcompressionquality < 1
OR	1007:5	1008:3	9	t2p -> pdf_defaultcompressionquality > 100 || t2p -> pdf_defaultcompressionquality < 1
EXPR	1007:5	1007:40	10	t2p -> pdf_defaultcompressionquality > 100
FIELD	1007:5	1007:10	11	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1007:5	1007:5	12	t2p
LEAF_NODE	1007:8	1007:8	12	->
LEAF_NODE	1007:10	1007:10	12	pdf_defaultcompressionquality
REL_OPERATOR	1007:39	1007:39	11	>
LEAF_NODE	1007:39	1007:39	12	>
FIELD	1007:40	1007:40	11	100
LEAF_NODE	1007:40	1007:40	12	100
LEAF_NODE	1007:44	1007:44	10	||
EXPR	1008:3	1008:38	10	t2p -> pdf_defaultcompressionquality < 1
FIELD	1008:3	1008:8	11	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1008:3	1008:3	12	t2p
LEAF_NODE	1008:6	1008:6	12	->
LEAF_NODE	1008:8	1008:8	12	pdf_defaultcompressionquality
REL_OPERATOR	1008:37	1008:37	11	<
LEAF_NODE	1008:37	1008:37	12	<
FIELD	1008:38	1008:38	11	1
LEAF_NODE	1008:38	1008:38	12	1
LEAF_NODE	1008:39	1008:39	7	)
STATEMENTS	1008:40	1010:2	7	
LEAF_NODE	1008:40	1008:40	8	{
STATEMENTS	1009:3	1009:3	8	
EXPR_STATEMENT	1009:3	1009:39	9	t2p -> pdf_defaultcompressionquality = 0 ;
EXPR	1009:3	1009:3	10	t2p -> pdf_defaultcompressionquality = 0
ASSIGN	1009:3	1009:38	11	t2p -> pdf_defaultcompressionquality = 0
LVAL	1009:3	1009:3	12	t2p -> pdf_defaultcompressionquality
FIELD	1009:3	1009:8	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1009:3	1009:3	14	t2p
LEAF_NODE	1009:6	1009:6	14	->
LEAF_NODE	1009:8	1009:8	14	pdf_defaultcompressionquality
ASSIGN_OP	1009:37	1009:37	12	=
LEAF_NODE	1009:37	1009:37	13	=
RVAL	1009:38	1009:38	12	0
FIELD	1009:38	1009:38	13	0
LEAF_NODE	1009:38	1009:38	14	0
LEAF_NODE	1009:39	1009:39	10	;
LEAF_NODE	1010:2	1010:2	8	}
LEAF_NODE	1011:1	1011:1	5	}
SELECTION	1014:1	1014:50	3	
KEYWORD	1014:1	1014:1	4	if
LEAF_NODE	1014:1	1014:1	5	if
LEAF_NODE	1014:3	1014:3	4	(
CONDITION	1014:4	1014:4	4	t2p -> pdf_defaultcompression == T2P_COMPRESS_ZIP
EXPR	1014:4	1014:33	5	t2p -> pdf_defaultcompression == T2P_COMPRESS_ZIP
FIELD	1014:4	1014:9	6	t2p -> pdf_defaultcompression
LEAF_NODE	1014:4	1014:4	7	t2p
LEAF_NODE	1014:7	1014:7	7	->
LEAF_NODE	1014:9	1014:9	7	pdf_defaultcompression
EQ_OPERATOR	1014:31	1014:31	6	==
LEAF_NODE	1014:31	1014:31	7	==
FIELD	1014:33	1014:33	6	T2P_COMPRESS_ZIP
LEAF_NODE	1014:33	1014:33	7	T2P_COMPRESS_ZIP
LEAF_NODE	1014:49	1014:49	4	)
STATEMENTS	1014:50	1030:1	4	
LEAF_NODE	1014:50	1014:50	5	{
STATEMENTS	1015:3	1029:2	5	
SIMPLE_DECL	1015:3	1015:50	6	uint16 m ; m = t2p -> pdf_defaultcompressionquality % 100 ;
VAR_DECL	1015:3	1015:10	7	uint16 m ; m = t2p -> pdf_defaultcompressionquality % 100
TYPE	1015:3	1015:3	8	uint16
TYPE_NAME	1015:3	1015:3	9	uint16
LEAF_NODE	1015:3	1015:3	10	uint16
NAME	1015:10	1015:10	8	m
LEAF_NODE	1015:10	1015:10	9	m
LEAF_NODE	0:0	0:0	8	;
INIT	1015:10	1015:10	8	m = t2p -> pdf_defaultcompressionquality % 100
ASSIGN	1015:10	1015:12	9	m = t2p -> pdf_defaultcompressionquality % 100
LVAL	1015:10	1015:10	10	m
NAME	1015:10	1015:10	11	m
LEAF_NODE	1015:10	1015:10	12	m
ASSIGN_OP	1015:11	1015:11	10	=
LEAF_NODE	1015:11	1015:11	11	=
RVAL	1015:12	1015:47	10	t2p -> pdf_defaultcompressionquality % 100
FIELD	1015:12	1015:17	11	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1015:12	1015:12	12	t2p
LEAF_NODE	1015:15	1015:15	12	->
LEAF_NODE	1015:17	1015:17	12	pdf_defaultcompressionquality
LEAF_NODE	1015:46	1015:46	11	%
FIELD	1015:47	1015:47	11	100
LEAF_NODE	1015:47	1015:47	12	100
LEAF_NODE	1015:50	1015:50	7	;
SELECTION	1016:3	1017:26	6	
KEYWORD	1016:3	1016:3	7	if
LEAF_NODE	1016:3	1016:3	8	if
LEAF_NODE	1016:5	1016:5	7	(
CONDITION	1016:6	1016:6	7	t2p -> pdf_defaultcompressionquality / 100 > 9 || ( m > 1 && m < 10 ) || m > 15
EXPR	1016:6	1016:6	8	t2p -> pdf_defaultcompressionquality / 100 > 9 || ( m > 1 && m < 10 ) || m > 15
OR	1016:6	1017:4	9	t2p -> pdf_defaultcompressionquality / 100 > 9 || ( m > 1 && m < 10 ) || m > 15
EXPR	1016:6	1016:47	10	t2p -> pdf_defaultcompressionquality / 100 > 9
FIELD	1016:6	1016:11	11	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1016:6	1016:6	12	t2p
LEAF_NODE	1016:9	1016:9	12	->
LEAF_NODE	1016:11	1016:11	12	pdf_defaultcompressionquality
LEAF_NODE	1016:40	1016:40	11	/
FIELD	1016:41	1016:41	11	100
LEAF_NODE	1016:41	1016:41	12	100
REL_OPERATOR	1016:45	1016:45	11	>
LEAF_NODE	1016:45	1016:45	12	>
FIELD	1016:47	1016:47	11	9
LEAF_NODE	1016:47	1016:47	12	9
LEAF_NODE	1016:49	1016:49	10	||
EXPR	1017:4	1017:4	10	( m > 1 && m < 10 ) || m > 15
OR	1017:4	1017:21	11	( m > 1 && m < 10 ) || m > 15
EXPR	1017:4	1017:16	12	( m > 1 && m < 10 )
LEAF_NODE	1017:4	1017:4	13	(
AND	1017:5	1017:12	13	m > 1 && m < 10
EXPR	1017:5	1017:7	14	m > 1
FIELD	1017:5	1017:5	15	m
LEAF_NODE	1017:5	1017:5	16	m
REL_OPERATOR	1017:6	1017:6	15	>
LEAF_NODE	1017:6	1017:6	16	>
FIELD	1017:7	1017:7	15	1
LEAF_NODE	1017:7	1017:7	16	1
LEAF_NODE	1017:9	1017:9	14	&&
EXPR	1017:12	1017:14	14	m < 10
FIELD	1017:12	1017:12	15	m
LEAF_NODE	1017:12	1017:12	16	m
REL_OPERATOR	1017:13	1017:13	15	<
LEAF_NODE	1017:13	1017:13	16	<
FIELD	1017:14	1017:14	15	10
LEAF_NODE	1017:14	1017:14	16	10
LEAF_NODE	1017:16	1017:16	13	)
LEAF_NODE	1017:18	1017:18	12	||
EXPR	1017:21	1017:23	12	m > 15
FIELD	1017:21	1017:21	13	m
LEAF_NODE	1017:21	1017:21	14	m
REL_OPERATOR	1017:22	1017:22	13	>
LEAF_NODE	1017:22	1017:22	14	>
FIELD	1017:23	1017:23	13	15
LEAF_NODE	1017:23	1017:23	14	15
LEAF_NODE	1017:25	1017:25	7	)
STATEMENTS	1017:26	1019:2	7	
LEAF_NODE	1017:26	1017:26	8	{
STATEMENTS	1018:4	1018:4	8	
EXPR_STATEMENT	1018:4	1018:40	9	t2p -> pdf_defaultcompressionquality = 0 ;
EXPR	1018:4	1018:4	10	t2p -> pdf_defaultcompressionquality = 0
ASSIGN	1018:4	1018:39	11	t2p -> pdf_defaultcompressionquality = 0
LVAL	1018:4	1018:4	12	t2p -> pdf_defaultcompressionquality
FIELD	1018:4	1018:9	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1018:4	1018:4	14	t2p
LEAF_NODE	1018:7	1018:7	14	->
LEAF_NODE	1018:9	1018:9	14	pdf_defaultcompressionquality
ASSIGN_OP	1018:38	1018:38	12	=
LEAF_NODE	1018:38	1018:38	13	=
RVAL	1018:39	1018:39	12	0
FIELD	1018:39	1018:39	13	0
LEAF_NODE	1018:39	1018:39	14	0
LEAF_NODE	1018:40	1018:40	10	;
LEAF_NODE	1019:2	1019:2	8	}
SELECTION	1020:2	1020:48	6	
KEYWORD	1020:2	1020:2	7	if
LEAF_NODE	1020:2	1020:2	8	if
LEAF_NODE	1020:4	1020:4	7	(
CONDITION	1020:5	1020:5	7	t2p -> pdf_defaultcompressionquality % 100 != 0
EXPR	1020:5	1020:46	8	t2p -> pdf_defaultcompressionquality % 100 != 0
FIELD	1020:5	1020:10	9	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1020:5	1020:5	10	t2p
LEAF_NODE	1020:8	1020:8	10	->
LEAF_NODE	1020:10	1020:10	10	pdf_defaultcompressionquality
LEAF_NODE	1020:39	1020:39	9	%
FIELD	1020:40	1020:40	9	100
LEAF_NODE	1020:40	1020:40	10	100
EQ_OPERATOR	1020:44	1020:44	9	!=
LEAF_NODE	1020:44	1020:44	10	!=
FIELD	1020:46	1020:46	9	0
LEAF_NODE	1020:46	1020:46	10	0
LEAF_NODE	1020:47	1020:47	7	)
STATEMENTS	1020:48	1027:2	7	
LEAF_NODE	1020:48	1020:48	8	{
STATEMENTS	1021:4	1023:3	8	
EXPR_STATEMENT	1021:4	1021:43	9	t2p -> pdf_defaultcompressionquality /= 100 ;
EXPR	1021:4	1021:4	10	t2p -> pdf_defaultcompressionquality /= 100
ASSIGN	1021:4	1021:40	11	t2p -> pdf_defaultcompressionquality /= 100
LVAL	1021:4	1021:4	12	t2p -> pdf_defaultcompressionquality
FIELD	1021:4	1021:9	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1021:4	1021:4	14	t2p
LEAF_NODE	1021:7	1021:7	14	->
LEAF_NODE	1021:9	1021:9	14	pdf_defaultcompressionquality
ASSIGN_OP	1021:38	1021:38	12	/=
LEAF_NODE	1021:38	1021:38	13	/=
RVAL	1021:40	1021:40	12	100
FIELD	1021:40	1021:40	13	100
LEAF_NODE	1021:40	1021:40	14	100
LEAF_NODE	1021:43	1021:43	10	;
EXPR_STATEMENT	1022:4	1022:43	9	t2p -> pdf_defaultcompressionquality *= 100 ;
EXPR	1022:4	1022:4	10	t2p -> pdf_defaultcompressionquality *= 100
ASSIGN	1022:4	1022:40	11	t2p -> pdf_defaultcompressionquality *= 100
LVAL	1022:4	1022:4	12	t2p -> pdf_defaultcompressionquality
FIELD	1022:4	1022:9	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1022:4	1022:4	14	t2p
LEAF_NODE	1022:7	1022:7	14	->
LEAF_NODE	1022:9	1022:9	14	pdf_defaultcompressionquality
ASSIGN_OP	1022:38	1022:38	12	*=
LEAF_NODE	1022:38	1022:38	13	*=
RVAL	1022:40	1022:40	12	100
FIELD	1022:40	1022:40	13	100
LEAF_NODE	1022:40	1022:40	14	100
LEAF_NODE	1022:43	1022:43	10	;
EXPR_STATEMENT	1023:3	1026:39	9	TIFFError ( TIFF2PDF_MODULE , "PNG Group predictor differencing not implemented, assuming compression quality %u" , t2p -> pdf_defaultcompressionquality ) ;
EXPR	1023:3	1023:3	10	TIFFError ( TIFF2PDF_MODULE , "PNG Group predictor differencing not implemented, assuming compression quality %u" , t2p -> pdf_defaultcompressionquality )
FUNCTION_CALL	1023:3	1026:38	11	TIFFError ( TIFF2PDF_MODULE , "PNG Group predictor differencing not implemented, assuming compression quality %u" , t2p -> pdf_defaultcompressionquality )
CALLEE	1023:3	1023:3	12	TIFFError
LEAF_NODE	1023:3	1023:3	13	TIFFError
LEAF_NODE	1023:12	1023:12	12	(
ARGUMENT	1024:4	1024:4	12	TIFF2PDF_MODULE
FIELD	1024:4	1024:4	13	TIFF2PDF_MODULE
LEAF_NODE	1024:4	1024:4	14	TIFF2PDF_MODULE
LEAF_NODE	1024:19	1024:19	12	,
ARGUMENT	1025:4	1025:4	12	"PNG Group predictor differencing not implemented, assuming compression quality %u"
FIELD	1025:4	1025:4	13	"PNG Group predictor differencing not implemented, assuming compression quality %u"
LEAF_NODE	1025:4	1025:4	14	"PNG Group predictor differencing not implemented, assuming compression quality %u"
LEAF_NODE	1025:87	1025:87	12	,
ARGUMENT	1026:4	1026:4	12	t2p -> pdf_defaultcompressionquality
FIELD	1026:4	1026:9	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1026:4	1026:4	14	t2p
LEAF_NODE	1026:7	1026:7	14	->
LEAF_NODE	1026:9	1026:9	14	pdf_defaultcompressionquality
LEAF_NODE	1026:38	1026:38	12	)
LEAF_NODE	1026:39	1026:39	10	;
LEAF_NODE	1027:2	1027:2	8	}
EXPR_STATEMENT	1028:2	1028:41	6	t2p -> pdf_defaultcompressionquality %= 100 ;
EXPR	1028:2	1028:2	7	t2p -> pdf_defaultcompressionquality %= 100
ASSIGN	1028:2	1028:38	8	t2p -> pdf_defaultcompressionquality %= 100
LVAL	1028:2	1028:2	9	t2p -> pdf_defaultcompressionquality
FIELD	1028:2	1028:7	10	t2p -> pdf_defaultcompressionquality
LEAF_NODE	1028:2	1028:2	11	t2p
LEAF_NODE	1028:5	1028:5	11	->
LEAF_NODE	1028:7	1028:7	11	pdf_defaultcompressionquality
ASSIGN_OP	1028:36	1028:36	9	%=
LEAF_NODE	1028:36	1028:36	10	%=
RVAL	1028:38	1028:38	9	100
FIELD	1028:38	1028:38	10	100
LEAF_NODE	1028:38	1028:38	11	100
LEAF_NODE	1028:41	1028:41	7	;
SELECTION	1029:2	1029:29	6	
KEYWORD	1029:2	1029:2	7	if
LEAF_NODE	1029:2	1029:2	8	if
LEAF_NODE	1029:4	1029:4	7	(
CONDITION	1029:5	1029:5	7	t2p -> pdf_minorversion < 2
EXPR	1029:5	1029:27	8	t2p -> pdf_minorversion < 2
FIELD	1029:5	1029:10	9	t2p -> pdf_minorversion
LEAF_NODE	1029:5	1029:5	10	t2p
LEAF_NODE	1029:8	1029:8	10	->
LEAF_NODE	1029:10	1029:10	10	pdf_minorversion
REL_OPERATOR	1029:26	1029:26	9	<
LEAF_NODE	1029:26	1029:26	10	<
FIELD	1029:27	1029:27	9	2
LEAF_NODE	1029:27	1029:27	10	2
LEAF_NODE	1029:28	1029:28	7	)
STATEMENTS	1029:29	1029:54	7	
LEAF_NODE	1029:29	1029:29	8	{
STATEMENTS	1029:30	1029:30	8	
EXPR_STATEMENT	1029:30	1029:53	9	t2p -> pdf_minorversion = 2 ;
EXPR	1029:30	1029:30	10	t2p -> pdf_minorversion = 2
ASSIGN	1029:30	1029:52	11	t2p -> pdf_minorversion = 2
LVAL	1029:30	1029:30	12	t2p -> pdf_minorversion
FIELD	1029:30	1029:35	13	t2p -> pdf_minorversion
LEAF_NODE	1029:30	1029:30	14	t2p
LEAF_NODE	1029:33	1029:33	14	->
LEAF_NODE	1029:35	1029:35	14	pdf_minorversion
ASSIGN_OP	1029:51	1029:51	12	=
LEAF_NODE	1029:51	1029:51	13	=
RVAL	1029:52	1029:52	12	2
FIELD	1029:52	1029:52	13	2
LEAF_NODE	1029:52	1029:52	14	2
LEAF_NODE	1029:53	1029:53	10	;
LEAF_NODE	1029:54	1029:54	8	}
LEAF_NODE	1030:1	1030:1	5	}
EXPR_STATEMENT	1032:1	1032:8	3	( void ) 0 ;
EXPR	1032:1	1032:7	4	( void ) 0
LEAF_NODE	1032:1	1032:1	5	(
TYPE_NAME	1032:2	1032:2	5	void
LEAF_NODE	1032:2	1032:2	6	void
LEAF_NODE	1032:6	1032:6	5	)
FIELD	1032:7	1032:7	5	0
LEAF_NODE	1032:7	1032:7	6	0
LEAF_NODE	1032:8	1032:8	4	;
JUMP_STATEMENT	1034:1	1034:7	3	return DESTINATION ;
KEYWORD	1034:1	1034:1	4	return
LEAF_NODE	1034:1	1034:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	1034:7	1034:7	4	;
LEAF_NODE	1035:0	1035:0	2	}
FUNCTION_DEF	1045:0	1262:0	1	
RETURN_TYPE	1045:0	1045:0	2	void
TYPE_NAME	1045:0	1045:0	3	void
LEAF_NODE	1045:0	1045:0	4	void
FUNCTION_NAME	1045:5	1045:5	2	t2p_read_tiff_init
LEAF_NODE	1045:5	1045:5	3	t2p_read_tiff_init
PARAMETER_LIST	1045:23	1045:45	2	( T2P * t2p , TIFF * input )
LEAF_NODE	1045:23	1045:23	3	(
PARAMETER_DECL	1045:24	1045:29	3	T2P * t2p
TYPE	1045:24	1045:27	4	T2P *
TYPE_NAME	1045:24	1045:24	5	T2P
LEAF_NODE	1045:24	1045:24	6	T2P
POINTER	1045:27	1045:27	5	*
LEAF_NODE	1045:27	1045:27	6	*
NAME	1045:29	1045:29	4	t2p
LEAF_NODE	1045:29	1045:29	5	t2p
LEAF_NODE	1045:32	1045:32	3	,
PARAMETER_DECL	1045:34	1045:40	3	TIFF * input
TYPE	1045:34	1045:38	4	TIFF *
TYPE_NAME	1045:34	1045:34	5	TIFF
LEAF_NODE	1045:34	1045:34	6	TIFF
POINTER	1045:38	1045:38	5	*
LEAF_NODE	1045:38	1045:38	6	*
NAME	1045:40	1045:40	4	input
LEAF_NODE	1045:40	1045:40	5	input
LEAF_NODE	1045:45	1045:45	3	)
LEAF_NODE	1045:46	1045:46	2	{
STATEMENTS	1047:1	1261:1	2	
SIMPLE_DECL	1047:1	1047:24	3	tdir_t directorycount ; directorycount = 0 ;
VAR_DECL	1047:1	1047:8	4	tdir_t directorycount ; directorycount = 0
TYPE	1047:1	1047:1	5	tdir_t
TYPE_NAME	1047:1	1047:1	6	tdir_t
LEAF_NODE	1047:1	1047:1	7	tdir_t
NAME	1047:8	1047:8	5	directorycount
LEAF_NODE	1047:8	1047:8	6	directorycount
LEAF_NODE	0:0	0:0	5	;
INIT	1047:8	1047:8	5	directorycount = 0
ASSIGN	1047:8	1047:23	6	directorycount = 0
LVAL	1047:8	1047:8	7	directorycount
NAME	1047:8	1047:8	8	directorycount
LEAF_NODE	1047:8	1047:8	9	directorycount
ASSIGN_OP	1047:22	1047:22	7	=
LEAF_NODE	1047:22	1047:22	8	=
RVAL	1047:23	1047:23	7	0
FIELD	1047:23	1047:23	8	0
LEAF_NODE	1047:23	1047:23	9	0
LEAF_NODE	1047:24	1047:24	4	;
SIMPLE_DECL	1048:1	1048:11	3	tdir_t i ; i = 0 ;
VAR_DECL	1048:1	1048:8	4	tdir_t i ; i = 0
TYPE	1048:1	1048:1	5	tdir_t
TYPE_NAME	1048:1	1048:1	6	tdir_t
LEAF_NODE	1048:1	1048:1	7	tdir_t
NAME	1048:8	1048:8	5	i
LEAF_NODE	1048:8	1048:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	1048:8	1048:8	5	i = 0
ASSIGN	1048:8	1048:10	6	i = 0
LVAL	1048:8	1048:8	7	i
NAME	1048:8	1048:8	8	i
LEAF_NODE	1048:8	1048:8	9	i
ASSIGN_OP	1048:9	1048:9	7	=
LEAF_NODE	1048:9	1048:9	8	=
RVAL	1048:10	1048:10	7	0
FIELD	1048:10	1048:10	8	0
LEAF_NODE	1048:10	1048:10	9	0
LEAF_NODE	1048:11	1048:11	4	;
SIMPLE_DECL	1049:1	1049:15	3	uint16 pagen ; pagen = 0 ;
VAR_DECL	1049:1	1049:8	4	uint16 pagen ; pagen = 0
TYPE	1049:1	1049:1	5	uint16
TYPE_NAME	1049:1	1049:1	6	uint16
LEAF_NODE	1049:1	1049:1	7	uint16
NAME	1049:8	1049:8	5	pagen
LEAF_NODE	1049:8	1049:8	6	pagen
LEAF_NODE	0:0	0:0	5	;
INIT	1049:8	1049:8	5	pagen = 0
ASSIGN	1049:8	1049:14	6	pagen = 0
LVAL	1049:8	1049:8	7	pagen
NAME	1049:8	1049:8	8	pagen
LEAF_NODE	1049:8	1049:8	9	pagen
ASSIGN_OP	1049:13	1049:13	7	=
LEAF_NODE	1049:13	1049:13	8	=
RVAL	1049:14	1049:14	7	0
FIELD	1049:14	1049:14	8	0
LEAF_NODE	1049:14	1049:14	9	0
LEAF_NODE	1049:15	1049:15	4	;
SIMPLE_DECL	1050:1	1050:15	3	uint16 paged ; paged = 0 ;
VAR_DECL	1050:1	1050:8	4	uint16 paged ; paged = 0
TYPE	1050:1	1050:1	5	uint16
TYPE_NAME	1050:1	1050:1	6	uint16
LEAF_NODE	1050:1	1050:1	7	uint16
NAME	1050:8	1050:8	5	paged
LEAF_NODE	1050:8	1050:8	6	paged
LEAF_NODE	0:0	0:0	5	;
INIT	1050:8	1050:8	5	paged = 0
ASSIGN	1050:8	1050:14	6	paged = 0
LVAL	1050:8	1050:8	7	paged
NAME	1050:8	1050:8	8	paged
LEAF_NODE	1050:8	1050:8	9	paged
ASSIGN_OP	1050:13	1050:13	7	=
LEAF_NODE	1050:13	1050:13	8	=
RVAL	1050:14	1050:14	7	0
FIELD	1050:14	1050:14	8	0
LEAF_NODE	1050:14	1050:14	9	0
LEAF_NODE	1050:15	1050:15	4	;
SIMPLE_DECL	1051:1	1051:17	3	uint16 xuint16 ; xuint16 = 0 ;
VAR_DECL	1051:1	1051:8	4	uint16 xuint16 ; xuint16 = 0
TYPE	1051:1	1051:1	5	uint16
TYPE_NAME	1051:1	1051:1	6	uint16
LEAF_NODE	1051:1	1051:1	7	uint16
NAME	1051:8	1051:8	5	xuint16
LEAF_NODE	1051:8	1051:8	6	xuint16
LEAF_NODE	0:0	0:0	5	;
INIT	1051:8	1051:8	5	xuint16 = 0
ASSIGN	1051:8	1051:16	6	xuint16 = 0
LVAL	1051:8	1051:8	7	xuint16
NAME	1051:8	1051:8	8	xuint16
LEAF_NODE	1051:8	1051:8	9	xuint16
ASSIGN_OP	1051:15	1051:15	7	=
LEAF_NODE	1051:15	1051:15	8	=
RVAL	1051:16	1051:16	7	0
FIELD	1051:16	1051:16	8	0
LEAF_NODE	1051:16	1051:16	9	0
LEAF_NODE	1051:17	1051:17	4	;
SIMPLE_DECL	1052:1	1052:36	3	uint16 tiff_transferfunctioncount ; tiff_transferfunctioncount = 0 ;
VAR_DECL	1052:1	1052:8	4	uint16 tiff_transferfunctioncount ; tiff_transferfunctioncount = 0
TYPE	1052:1	1052:1	5	uint16
TYPE_NAME	1052:1	1052:1	6	uint16
LEAF_NODE	1052:1	1052:1	7	uint16
NAME	1052:8	1052:8	5	tiff_transferfunctioncount
LEAF_NODE	1052:8	1052:8	6	tiff_transferfunctioncount
LEAF_NODE	0:0	0:0	5	;
INIT	1052:8	1052:8	5	tiff_transferfunctioncount = 0
ASSIGN	1052:8	1052:35	6	tiff_transferfunctioncount = 0
LVAL	1052:8	1052:8	7	tiff_transferfunctioncount
NAME	1052:8	1052:8	8	tiff_transferfunctioncount
LEAF_NODE	1052:8	1052:8	9	tiff_transferfunctioncount
ASSIGN_OP	1052:34	1052:34	7	=
LEAF_NODE	1052:34	1052:34	8	=
RVAL	1052:35	1052:35	7	0
FIELD	1052:35	1052:35	8	0
LEAF_NODE	1052:35	1052:35	9	0
LEAF_NODE	1052:36	1052:36	4	;
SIMPLE_DECL	1053:1	1053:33	3	uint16 * [ 3 ] tiff_transferfunction ;
VAR_DECL	1053:1	1053:9	4	uint16 * [ 3 ] tiff_transferfunction
TYPE	1053:1	1053:30	5	uint16 * [ 3 ]
TYPE_NAME	1053:1	1053:1	6	uint16
LEAF_NODE	1053:1	1053:1	7	uint16
POINTER	1053:7	1053:7	6	*
LEAF_NODE	1053:7	1053:7	7	*
TYPE_SUFFIX	1053:30	1053:32	6	[ 3 ]
LEAF_NODE	1053:30	1053:30	7	[
FIELD	1053:31	1053:31	7	3
LEAF_NODE	1053:31	1053:31	8	3
LEAF_NODE	1053:32	1053:32	7	]
NAME	1053:9	1053:9	5	tiff_transferfunction
LEAF_NODE	1053:9	1053:9	6	tiff_transferfunction
LEAF_NODE	1053:33	1053:33	4	;
EXPR_STATEMENT	1055:1	1055:46	3	directorycount = TIFFNumberOfDirectories ( input ) ;
EXPR	1055:1	1055:1	4	directorycount = TIFFNumberOfDirectories ( input )
ASSIGN	1055:1	1055:16	5	directorycount = TIFFNumberOfDirectories ( input )
LVAL	1055:1	1055:1	6	directorycount
FIELD	1055:1	1055:1	7	directorycount
LEAF_NODE	1055:1	1055:1	8	directorycount
ASSIGN_OP	1055:15	1055:15	6	=
LEAF_NODE	1055:15	1055:15	7	=
RVAL	1055:16	1055:16	6	TIFFNumberOfDirectories ( input )
FUNCTION_CALL	1055:16	1055:45	7	TIFFNumberOfDirectories ( input )
CALLEE	1055:16	1055:16	8	TIFFNumberOfDirectories
LEAF_NODE	1055:16	1055:16	9	TIFFNumberOfDirectories
LEAF_NODE	1055:39	1055:39	8	(
ARGUMENT	1055:40	1055:40	8	input
FIELD	1055:40	1055:40	9	input
LEAF_NODE	1055:40	1055:40	10	input
LEAF_NODE	1055:45	1055:45	8	)
LEAF_NODE	1055:46	1055:46	4	;
SELECTION	1056:1	1056:35	3	
KEYWORD	1056:1	1056:1	4	if
LEAF_NODE	1056:1	1056:1	5	if
LEAF_NODE	1056:3	1056:3	4	(
CONDITION	1056:4	1056:4	4	directorycount > TIFF_DIR_MAX
EXPR	1056:4	1056:21	5	directorycount > TIFF_DIR_MAX
FIELD	1056:4	1056:4	6	directorycount
LEAF_NODE	1056:4	1056:4	7	directorycount
REL_OPERATOR	1056:19	1056:19	6	>
LEAF_NODE	1056:19	1056:19	7	>
FIELD	1056:21	1056:21	6	TIFF_DIR_MAX
LEAF_NODE	1056:21	1056:21	7	TIFF_DIR_MAX
LEAF_NODE	1056:33	1056:33	4	)
STATEMENTS	1056:35	1063:1	4	
LEAF_NODE	1056:35	1056:35	5	{
STATEMENTS	1057:2	1062:2	5	
EXPR_STATEMENT	1057:2	1060:23	6	TIFFError ( TIFF2PDF_MODULE , "TIFF contains too many directories, %s" , TIFFFileName ( input ) ) ;
EXPR	1057:2	1057:2	7	TIFFError ( TIFF2PDF_MODULE , "TIFF contains too many directories, %s" , TIFFFileName ( input ) )
FUNCTION_CALL	1057:2	1060:22	8	TIFFError ( TIFF2PDF_MODULE , "TIFF contains too many directories, %s" , TIFFFileName ( input ) )
CALLEE	1057:2	1057:2	9	TIFFError
LEAF_NODE	1057:2	1057:2	10	TIFFError
LEAF_NODE	1057:11	1057:11	9	(
ARGUMENT	1058:3	1058:3	9	TIFF2PDF_MODULE
FIELD	1058:3	1058:3	10	TIFF2PDF_MODULE
LEAF_NODE	1058:3	1058:3	11	TIFF2PDF_MODULE
LEAF_NODE	1058:18	1058:18	9	,
ARGUMENT	1059:3	1059:3	9	"TIFF contains too many directories, %s"
FIELD	1059:3	1059:3	10	"TIFF contains too many directories, %s"
LEAF_NODE	1059:3	1059:3	11	"TIFF contains too many directories, %s"
LEAF_NODE	1059:43	1059:43	9	,
ARGUMENT	1060:3	1060:3	9	TIFFFileName ( input )
FUNCTION_CALL	1060:3	1060:21	10	TIFFFileName ( input )
CALLEE	1060:3	1060:3	11	TIFFFileName
LEAF_NODE	1060:3	1060:3	12	TIFFFileName
LEAF_NODE	1060:15	1060:15	11	(
ARGUMENT	1060:16	1060:16	11	input
FIELD	1060:16	1060:16	12	input
LEAF_NODE	1060:16	1060:16	13	input
LEAF_NODE	1060:21	1060:21	11	)
LEAF_NODE	1060:22	1060:22	9	)
LEAF_NODE	1060:23	1060:23	7	;
EXPR_STATEMENT	1061:2	1061:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1061:2	1061:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1061:2	1061:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1061:2	1061:2	9	t2p -> t2p_error
FIELD	1061:2	1061:7	10	t2p -> t2p_error
LEAF_NODE	1061:2	1061:2	11	t2p
LEAF_NODE	1061:5	1061:5	11	->
LEAF_NODE	1061:7	1061:7	11	t2p_error
ASSIGN_OP	1061:17	1061:17	9	=
LEAF_NODE	1061:17	1061:17	10	=
RVAL	1061:19	1061:19	9	T2P_ERR_ERROR
FIELD	1061:19	1061:19	10	T2P_ERR_ERROR
LEAF_NODE	1061:19	1061:19	11	T2P_ERR_ERROR
LEAF_NODE	1061:32	1061:32	7	;
JUMP_STATEMENT	1062:2	1062:8	6	return DESTINATION ;
KEYWORD	1062:2	1062:2	7	return
LEAF_NODE	1062:2	1062:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1062:8	1062:8	7	;
LEAF_NODE	1063:1	1063:1	5	}
EXPR_STATEMENT	1064:1	1064:102	3	t2p -> tiff_pages = ( T2P_PAGE * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_PAGE ) ) ) ;
EXPR	1064:1	1064:1	4	t2p -> tiff_pages = ( T2P_PAGE * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_PAGE ) ) )
ASSIGN	1064:1	1064:19	5	t2p -> tiff_pages = ( T2P_PAGE * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_PAGE ) ) )
LVAL	1064:1	1064:1	6	t2p -> tiff_pages
FIELD	1064:1	1064:6	7	t2p -> tiff_pages
LEAF_NODE	1064:1	1064:1	8	t2p
LEAF_NODE	1064:4	1064:4	8	->
LEAF_NODE	1064:6	1064:6	8	tiff_pages
ASSIGN_OP	1064:17	1064:17	6	=
LEAF_NODE	1064:17	1064:17	7	=
RVAL	1064:19	1064:31	6	( T2P_PAGE * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_PAGE ) ) )
LEAF_NODE	1064:19	1064:19	7	(
TYPE_NAME	1064:20	1064:20	7	T2P_PAGE
LEAF_NODE	1064:20	1064:20	8	T2P_PAGE
LEAF_NODE	1064:28	1064:28	7	*
LEAF_NODE	1064:29	1064:29	7	)
FUNCTION_CALL	1064:31	1064:101	7	_TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_PAGE ) ) )
CALLEE	1064:31	1064:31	8	_TIFFmalloc
LEAF_NODE	1064:31	1064:31	9	_TIFFmalloc
LEAF_NODE	1064:42	1064:42	8	(
ARGUMENT	1064:43	1064:43	8	TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_PAGE ) )
FUNCTION_CALL	1064:43	1064:100	9	TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_PAGE ) )
CALLEE	1064:43	1064:43	10	TIFFSafeMultiply
LEAF_NODE	1064:43	1064:43	11	TIFFSafeMultiply
LEAF_NODE	1064:59	1064:59	10	(
ARGUMENT	1064:60	1064:60	10	tmsize_t
FIELD	1064:60	1064:60	11	tmsize_t
LEAF_NODE	1064:60	1064:60	12	tmsize_t
LEAF_NODE	1064:68	1064:68	10	,
ARGUMENT	1064:69	1064:69	10	directorycount
FIELD	1064:69	1064:69	11	directorycount
LEAF_NODE	1064:69	1064:69	12	directorycount
LEAF_NODE	1064:83	1064:83	10	,
ARGUMENT	1064:84	1064:84	10	sizeof ( T2P_PAGE )
FUNCTION_CALL	1064:84	1064:99	11	sizeof ( T2P_PAGE )
CALLEE	1064:84	1064:84	12	sizeof
LEAF_NODE	1064:84	1064:84	13	sizeof
LEAF_NODE	1064:90	1064:90	12	(
ARGUMENT	1064:91	1064:91	12	T2P_PAGE
FIELD	1064:91	1064:91	13	T2P_PAGE
LEAF_NODE	1064:91	1064:91	14	T2P_PAGE
LEAF_NODE	1064:99	1064:99	12	)
LEAF_NODE	1064:100	1064:100	10	)
LEAF_NODE	1064:101	1064:101	8	)
LEAF_NODE	1064:102	1064:102	4	;
SELECTION	1065:1	1065:26	3	
KEYWORD	1065:1	1065:1	4	if
LEAF_NODE	1065:1	1065:1	5	if
LEAF_NODE	1065:3	1065:3	4	(
CONDITION	1065:4	1065:4	4	t2p -> tiff_pages == NULL
EXPR	1065:4	1065:21	5	t2p -> tiff_pages == NULL
FIELD	1065:4	1065:9	6	t2p -> tiff_pages
LEAF_NODE	1065:4	1065:4	7	t2p
LEAF_NODE	1065:7	1065:7	7	->
LEAF_NODE	1065:9	1065:9	7	tiff_pages
EQ_OPERATOR	1065:19	1065:19	6	==
LEAF_NODE	1065:19	1065:19	7	==
FIELD	1065:21	1065:21	6	NULL
LEAF_NODE	1065:21	1065:21	7	NULL
LEAF_NODE	1065:25	1065:25	4	)
STATEMENTS	1065:26	1073:1	4	
LEAF_NODE	1065:26	1065:26	5	{
STATEMENTS	1066:2	1072:2	5	
LEAF_NODE	1066:2	1066:2	6	TIFFError
LEAF_NODE	1066:11	1066:11	6	(
LEAF_NODE	1067:3	1067:3	6	TIFF2PDF_MODULE
LEAF_NODE	1067:18	1067:18	6	,
LEAF_NODE	1068:3	1068:3	6	"Can't allocate "
LEAF_NODE	1068:21	1068:21	6	TIFF_SIZE_FORMAT
LEAF_NODE	1068:38	1068:38	6	" bytes of memory for tiff_pages array, %s"
LEAF_NODE	1068:81	1068:81	6	,
LEAF_NODE	1069:3	1069:3	6	(
LEAF_NODE	1069:4	1069:4	6	TIFF_SIZE_T
LEAF_NODE	1069:15	1069:15	6	)
LEAF_NODE	1069:17	1069:17	6	directorycount
LEAF_NODE	1069:32	1069:32	6	*
LEAF_NODE	1069:34	1069:34	6	sizeof
LEAF_NODE	1069:40	1069:40	6	(
LEAF_NODE	1069:41	1069:41	6	T2P_PAGE
LEAF_NODE	1069:49	1069:49	6	)
LEAF_NODE	1069:50	1069:50	6	,
LEAF_NODE	1070:3	1070:3	6	TIFFFileName
LEAF_NODE	1070:15	1070:15	6	(
LEAF_NODE	1070:16	1070:16	6	input
LEAF_NODE	1070:21	1070:21	6	)
LEAF_NODE	1070:22	1070:22	6	)
LEAF_NODE	1070:23	1070:23	6	;
EXPR_STATEMENT	1071:2	1071:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1071:2	1071:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1071:2	1071:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1071:2	1071:2	9	t2p -> t2p_error
FIELD	1071:2	1071:7	10	t2p -> t2p_error
LEAF_NODE	1071:2	1071:2	11	t2p
LEAF_NODE	1071:5	1071:5	11	->
LEAF_NODE	1071:7	1071:7	11	t2p_error
ASSIGN_OP	1071:17	1071:17	9	=
LEAF_NODE	1071:17	1071:17	10	=
RVAL	1071:19	1071:19	9	T2P_ERR_ERROR
FIELD	1071:19	1071:19	10	T2P_ERR_ERROR
LEAF_NODE	1071:19	1071:19	11	T2P_ERR_ERROR
LEAF_NODE	1071:32	1071:32	7	;
JUMP_STATEMENT	1072:2	1072:8	6	return DESTINATION ;
KEYWORD	1072:2	1072:2	7	return
LEAF_NODE	1072:2	1072:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1072:8	1072:8	7	;
LEAF_NODE	1073:1	1073:1	5	}
EXPR_STATEMENT	1074:1	1074:71	3	_TIFFmemset ( t2p -> tiff_pages , 0x00 , directorycount * sizeof ( T2P_PAGE ) ) ;
EXPR	1074:1	1074:1	4	_TIFFmemset ( t2p -> tiff_pages , 0x00 , directorycount * sizeof ( T2P_PAGE ) )
FUNCTION_CALL	1074:1	1074:70	5	_TIFFmemset ( t2p -> tiff_pages , 0x00 , directorycount * sizeof ( T2P_PAGE ) )
CALLEE	1074:1	1074:1	6	_TIFFmemset
LEAF_NODE	1074:1	1074:1	7	_TIFFmemset
LEAF_NODE	1074:12	1074:12	6	(
ARGUMENT	1074:14	1074:14	6	t2p -> tiff_pages
FIELD	1074:14	1074:19	7	t2p -> tiff_pages
LEAF_NODE	1074:14	1074:14	8	t2p
LEAF_NODE	1074:17	1074:17	8	->
LEAF_NODE	1074:19	1074:19	8	tiff_pages
LEAF_NODE	1074:29	1074:29	6	,
ARGUMENT	1074:31	1074:31	6	0x00
FIELD	1074:31	1074:31	7	0x00
LEAF_NODE	1074:31	1074:31	8	0x00
LEAF_NODE	1074:35	1074:35	6	,
ARGUMENT	1074:37	1074:54	6	directorycount * sizeof ( T2P_PAGE )
FIELD	1074:37	1074:37	7	directorycount
LEAF_NODE	1074:37	1074:37	8	directorycount
LEAF_NODE	1074:52	1074:52	7	*
FUNCTION_CALL	1074:54	1074:69	7	sizeof ( T2P_PAGE )
CALLEE	1074:54	1074:54	8	sizeof
LEAF_NODE	1074:54	1074:54	9	sizeof
LEAF_NODE	1074:60	1074:60	8	(
ARGUMENT	1074:61	1074:61	8	T2P_PAGE
FIELD	1074:61	1074:61	9	T2P_PAGE
LEAF_NODE	1074:61	1074:61	10	T2P_PAGE
LEAF_NODE	1074:69	1074:69	8	)
LEAF_NODE	1074:70	1074:70	6	)
LEAF_NODE	1074:71	1074:71	4	;
EXPR_STATEMENT	1075:1	1075:104	3	t2p -> tiff_tiles = ( T2P_TILES * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_TILES ) ) ) ;
EXPR	1075:1	1075:1	4	t2p -> tiff_tiles = ( T2P_TILES * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_TILES ) ) )
ASSIGN	1075:1	1075:19	5	t2p -> tiff_tiles = ( T2P_TILES * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_TILES ) ) )
LVAL	1075:1	1075:1	6	t2p -> tiff_tiles
FIELD	1075:1	1075:6	7	t2p -> tiff_tiles
LEAF_NODE	1075:1	1075:1	8	t2p
LEAF_NODE	1075:4	1075:4	8	->
LEAF_NODE	1075:6	1075:6	8	tiff_tiles
ASSIGN_OP	1075:17	1075:17	6	=
LEAF_NODE	1075:17	1075:17	7	=
RVAL	1075:19	1075:32	6	( T2P_TILES * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_TILES ) ) )
LEAF_NODE	1075:19	1075:19	7	(
TYPE_NAME	1075:20	1075:20	7	T2P_TILES
LEAF_NODE	1075:20	1075:20	8	T2P_TILES
LEAF_NODE	1075:29	1075:29	7	*
LEAF_NODE	1075:30	1075:30	7	)
FUNCTION_CALL	1075:32	1075:103	7	_TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_TILES ) ) )
CALLEE	1075:32	1075:32	8	_TIFFmalloc
LEAF_NODE	1075:32	1075:32	9	_TIFFmalloc
LEAF_NODE	1075:43	1075:43	8	(
ARGUMENT	1075:44	1075:44	8	TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_TILES ) )
FUNCTION_CALL	1075:44	1075:102	9	TIFFSafeMultiply ( tmsize_t , directorycount , sizeof ( T2P_TILES ) )
CALLEE	1075:44	1075:44	10	TIFFSafeMultiply
LEAF_NODE	1075:44	1075:44	11	TIFFSafeMultiply
LEAF_NODE	1075:60	1075:60	10	(
ARGUMENT	1075:61	1075:61	10	tmsize_t
FIELD	1075:61	1075:61	11	tmsize_t
LEAF_NODE	1075:61	1075:61	12	tmsize_t
LEAF_NODE	1075:69	1075:69	10	,
ARGUMENT	1075:70	1075:70	10	directorycount
FIELD	1075:70	1075:70	11	directorycount
LEAF_NODE	1075:70	1075:70	12	directorycount
LEAF_NODE	1075:84	1075:84	10	,
ARGUMENT	1075:85	1075:85	10	sizeof ( T2P_TILES )
FUNCTION_CALL	1075:85	1075:101	11	sizeof ( T2P_TILES )
CALLEE	1075:85	1075:85	12	sizeof
LEAF_NODE	1075:85	1075:85	13	sizeof
LEAF_NODE	1075:91	1075:91	12	(
ARGUMENT	1075:92	1075:92	12	T2P_TILES
FIELD	1075:92	1075:92	13	T2P_TILES
LEAF_NODE	1075:92	1075:92	14	T2P_TILES
LEAF_NODE	1075:101	1075:101	12	)
LEAF_NODE	1075:102	1075:102	10	)
LEAF_NODE	1075:103	1075:103	8	)
LEAF_NODE	1075:104	1075:104	4	;
SELECTION	1076:1	1076:26	3	
KEYWORD	1076:1	1076:1	4	if
LEAF_NODE	1076:1	1076:1	5	if
LEAF_NODE	1076:3	1076:3	4	(
CONDITION	1076:4	1076:4	4	t2p -> tiff_tiles == NULL
EXPR	1076:4	1076:21	5	t2p -> tiff_tiles == NULL
FIELD	1076:4	1076:9	6	t2p -> tiff_tiles
LEAF_NODE	1076:4	1076:4	7	t2p
LEAF_NODE	1076:7	1076:7	7	->
LEAF_NODE	1076:9	1076:9	7	tiff_tiles
EQ_OPERATOR	1076:19	1076:19	6	==
LEAF_NODE	1076:19	1076:19	7	==
FIELD	1076:21	1076:21	6	NULL
LEAF_NODE	1076:21	1076:21	7	NULL
LEAF_NODE	1076:25	1076:25	4	)
STATEMENTS	1076:26	1084:1	4	
LEAF_NODE	1076:26	1076:26	5	{
STATEMENTS	1077:2	1083:2	5	
LEAF_NODE	1077:2	1077:2	6	TIFFError
LEAF_NODE	1077:11	1077:11	6	(
LEAF_NODE	1078:3	1078:3	6	TIFF2PDF_MODULE
LEAF_NODE	1078:18	1078:18	6	,
LEAF_NODE	1079:3	1079:3	6	"Can't allocate "
LEAF_NODE	1079:21	1079:21	6	TIFF_SIZE_FORMAT
LEAF_NODE	1079:38	1079:38	6	" bytes of memory for tiff_tiles array, %s"
LEAF_NODE	1079:81	1079:81	6	,
LEAF_NODE	1080:3	1080:3	6	(
LEAF_NODE	1080:4	1080:4	6	TIFF_SIZE_T
LEAF_NODE	1080:15	1080:15	6	)
LEAF_NODE	1080:17	1080:17	6	directorycount
LEAF_NODE	1080:32	1080:32	6	*
LEAF_NODE	1080:34	1080:34	6	sizeof
LEAF_NODE	1080:40	1080:40	6	(
LEAF_NODE	1080:41	1080:41	6	T2P_TILES
LEAF_NODE	1080:50	1080:50	6	)
LEAF_NODE	1080:51	1080:51	6	,
LEAF_NODE	1081:3	1081:3	6	TIFFFileName
LEAF_NODE	1081:15	1081:15	6	(
LEAF_NODE	1081:16	1081:16	6	input
LEAF_NODE	1081:21	1081:21	6	)
LEAF_NODE	1081:22	1081:22	6	)
LEAF_NODE	1081:23	1081:23	6	;
EXPR_STATEMENT	1082:2	1082:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1082:2	1082:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1082:2	1082:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1082:2	1082:2	9	t2p -> t2p_error
FIELD	1082:2	1082:7	10	t2p -> t2p_error
LEAF_NODE	1082:2	1082:2	11	t2p
LEAF_NODE	1082:5	1082:5	11	->
LEAF_NODE	1082:7	1082:7	11	t2p_error
ASSIGN_OP	1082:17	1082:17	9	=
LEAF_NODE	1082:17	1082:17	10	=
RVAL	1082:19	1082:19	9	T2P_ERR_ERROR
FIELD	1082:19	1082:19	10	T2P_ERR_ERROR
LEAF_NODE	1082:19	1082:19	11	T2P_ERR_ERROR
LEAF_NODE	1082:32	1082:32	7	;
JUMP_STATEMENT	1083:2	1083:8	6	return DESTINATION ;
KEYWORD	1083:2	1083:2	7	return
LEAF_NODE	1083:2	1083:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1083:8	1083:8	7	;
LEAF_NODE	1084:1	1084:1	5	}
EXPR_STATEMENT	1085:1	1085:72	3	_TIFFmemset ( t2p -> tiff_tiles , 0x00 , directorycount * sizeof ( T2P_TILES ) ) ;
EXPR	1085:1	1085:1	4	_TIFFmemset ( t2p -> tiff_tiles , 0x00 , directorycount * sizeof ( T2P_TILES ) )
FUNCTION_CALL	1085:1	1085:71	5	_TIFFmemset ( t2p -> tiff_tiles , 0x00 , directorycount * sizeof ( T2P_TILES ) )
CALLEE	1085:1	1085:1	6	_TIFFmemset
LEAF_NODE	1085:1	1085:1	7	_TIFFmemset
LEAF_NODE	1085:12	1085:12	6	(
ARGUMENT	1085:14	1085:14	6	t2p -> tiff_tiles
FIELD	1085:14	1085:19	7	t2p -> tiff_tiles
LEAF_NODE	1085:14	1085:14	8	t2p
LEAF_NODE	1085:17	1085:17	8	->
LEAF_NODE	1085:19	1085:19	8	tiff_tiles
LEAF_NODE	1085:29	1085:29	6	,
ARGUMENT	1085:31	1085:31	6	0x00
FIELD	1085:31	1085:31	7	0x00
LEAF_NODE	1085:31	1085:31	8	0x00
LEAF_NODE	1085:35	1085:35	6	,
ARGUMENT	1085:37	1085:54	6	directorycount * sizeof ( T2P_TILES )
FIELD	1085:37	1085:37	7	directorycount
LEAF_NODE	1085:37	1085:37	8	directorycount
LEAF_NODE	1085:52	1085:52	7	*
FUNCTION_CALL	1085:54	1085:70	7	sizeof ( T2P_TILES )
CALLEE	1085:54	1085:54	8	sizeof
LEAF_NODE	1085:54	1085:54	9	sizeof
LEAF_NODE	1085:60	1085:60	8	(
ARGUMENT	1085:61	1085:61	8	T2P_TILES
FIELD	1085:61	1085:61	9	T2P_TILES
LEAF_NODE	1085:61	1085:61	10	T2P_TILES
LEAF_NODE	1085:70	1085:70	8	)
LEAF_NODE	1085:71	1085:71	6	)
LEAF_NODE	1085:72	1085:72	4	;
ITERATION	1086:1	1086:30	3	
KEYWORD	1086:1	1086:1	4	for
LEAF_NODE	1086:1	1086:1	5	for
LEAF_NODE	1086:4	1086:4	4	(
FOR_INIT	1086:5	1086:8	4	i = 0 ;
EXPR	1086:5	1086:5	5	i = 0
ASSIGN	1086:5	1086:7	6	i = 0
LVAL	1086:5	1086:5	7	i
FIELD	1086:5	1086:5	8	i
LEAF_NODE	1086:5	1086:5	9	i
ASSIGN_OP	1086:6	1086:6	7	=
LEAF_NODE	1086:6	1086:6	8	=
RVAL	1086:7	1086:7	7	0
FIELD	1086:7	1086:7	8	0
LEAF_NODE	1086:7	1086:7	9	0
LEAF_NODE	1086:8	1086:8	5	;
CONDITION	1086:9	1086:9	4	i < directorycount
EXPR	1086:9	1086:11	5	i < directorycount
FIELD	1086:9	1086:9	6	i
LEAF_NODE	1086:9	1086:9	7	i
REL_OPERATOR	1086:10	1086:10	6	<
LEAF_NODE	1086:10	1086:10	7	<
FIELD	1086:11	1086:11	6	directorycount
LEAF_NODE	1086:11	1086:11	7	directorycount
LEAF_NODE	1086:25	1086:25	4	;
FOR_EXPR	1086:26	1086:26	4	i ++
EXPR	1086:26	1086:26	5	i ++
FIELD	1086:26	1086:27	6	i ++
LEAF_NODE	1086:26	1086:26	7	i
LEAF_NODE	1086:27	1086:27	7	++
LEAF_NODE	1086:29	1086:29	4	)
STATEMENTS	1086:30	1136:1	4	
LEAF_NODE	1086:30	1086:30	5	{
STATEMENTS	1087:2	1135:2	5	
SIMPLE_DECL	1087:2	1087:24	6	uint32 subfiletype ; subfiletype = 0 ;
VAR_DECL	1087:2	1087:9	7	uint32 subfiletype ; subfiletype = 0
TYPE	1087:2	1087:2	8	uint32
TYPE_NAME	1087:2	1087:2	9	uint32
LEAF_NODE	1087:2	1087:2	10	uint32
NAME	1087:9	1087:9	8	subfiletype
LEAF_NODE	1087:9	1087:9	9	subfiletype
LEAF_NODE	0:0	0:0	8	;
INIT	1087:9	1087:9	8	subfiletype = 0
ASSIGN	1087:9	1087:23	9	subfiletype = 0
LVAL	1087:9	1087:9	10	subfiletype
NAME	1087:9	1087:9	11	subfiletype
LEAF_NODE	1087:9	1087:9	12	subfiletype
ASSIGN_OP	1087:21	1087:21	10	=
LEAF_NODE	1087:21	1087:21	11	=
RVAL	1087:23	1087:23	10	0
FIELD	1087:23	1087:23	11	0
LEAF_NODE	1087:23	1087:23	12	0
LEAF_NODE	1087:24	1087:24	7	;
SELECTION	1089:2	1089:33	6	
KEYWORD	1089:2	1089:2	7	if
LEAF_NODE	1089:2	1089:2	8	if
LEAF_NODE	1089:4	1089:4	7	(
CONDITION	1089:5	1089:5	7	! TIFFSetDirectory ( input , i )
EXPR	1089:5	1089:5	8	! TIFFSetDirectory ( input , i )
UNARY_EXPR	1089:5	1089:6	9	! TIFFSetDirectory ( input , i )
UNARY_OPERATOR	1089:5	1089:5	10	!
LEAF_NODE	1089:5	1089:5	11	!
FUNCTION_CALL	1089:6	1089:31	10	TIFFSetDirectory ( input , i )
CALLEE	1089:6	1089:6	11	TIFFSetDirectory
LEAF_NODE	1089:6	1089:6	12	TIFFSetDirectory
LEAF_NODE	1089:22	1089:22	11	(
ARGUMENT	1089:23	1089:23	11	input
FIELD	1089:23	1089:23	12	input
LEAF_NODE	1089:23	1089:23	13	input
LEAF_NODE	1089:28	1089:28	11	,
ARGUMENT	1089:30	1089:30	11	i
FIELD	1089:30	1089:30	12	i
LEAF_NODE	1089:30	1089:30	13	i
LEAF_NODE	1089:31	1089:31	11	)
LEAF_NODE	1089:32	1089:32	7	)
STATEMENTS	1089:33	1097:2	7	
LEAF_NODE	1089:33	1089:33	8	{
STATEMENTS	1090:3	1096:3	8	
EXPR_STATEMENT	1090:3	1094:24	9	TIFFError ( TIFF2PDF_MODULE , "Can't set directory %u of input file %s" , i , TIFFFileName ( input ) ) ;
EXPR	1090:3	1090:3	10	TIFFError ( TIFF2PDF_MODULE , "Can't set directory %u of input file %s" , i , TIFFFileName ( input ) )
FUNCTION_CALL	1090:3	1094:23	11	TIFFError ( TIFF2PDF_MODULE , "Can't set directory %u of input file %s" , i , TIFFFileName ( input ) )
CALLEE	1090:3	1090:3	12	TIFFError
LEAF_NODE	1090:3	1090:3	13	TIFFError
LEAF_NODE	1090:12	1090:12	12	(
ARGUMENT	1091:4	1091:4	12	TIFF2PDF_MODULE
FIELD	1091:4	1091:4	13	TIFF2PDF_MODULE
LEAF_NODE	1091:4	1091:4	14	TIFF2PDF_MODULE
LEAF_NODE	1091:19	1091:19	12	,
ARGUMENT	1092:4	1092:4	12	"Can't set directory %u of input file %s"
FIELD	1092:4	1092:4	13	"Can't set directory %u of input file %s"
LEAF_NODE	1092:4	1092:4	14	"Can't set directory %u of input file %s"
LEAF_NODE	1092:45	1092:45	12	,
ARGUMENT	1093:4	1093:4	12	i
FIELD	1093:4	1093:4	13	i
LEAF_NODE	1093:4	1093:4	14	i
LEAF_NODE	1093:5	1093:5	12	,
ARGUMENT	1094:4	1094:4	12	TIFFFileName ( input )
FUNCTION_CALL	1094:4	1094:22	13	TIFFFileName ( input )
CALLEE	1094:4	1094:4	14	TIFFFileName
LEAF_NODE	1094:4	1094:4	15	TIFFFileName
LEAF_NODE	1094:16	1094:16	14	(
ARGUMENT	1094:17	1094:17	14	input
FIELD	1094:17	1094:17	15	input
LEAF_NODE	1094:17	1094:17	16	input
LEAF_NODE	1094:22	1094:22	14	)
LEAF_NODE	1094:23	1094:23	12	)
LEAF_NODE	1094:24	1094:24	10	;
EXPR_STATEMENT	1095:3	1095:33	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1095:3	1095:3	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1095:3	1095:20	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1095:3	1095:3	12	t2p -> t2p_error
FIELD	1095:3	1095:8	13	t2p -> t2p_error
LEAF_NODE	1095:3	1095:3	14	t2p
LEAF_NODE	1095:6	1095:6	14	->
LEAF_NODE	1095:8	1095:8	14	t2p_error
ASSIGN_OP	1095:18	1095:18	12	=
LEAF_NODE	1095:18	1095:18	13	=
RVAL	1095:20	1095:20	12	T2P_ERR_ERROR
FIELD	1095:20	1095:20	13	T2P_ERR_ERROR
LEAF_NODE	1095:20	1095:20	14	T2P_ERR_ERROR
LEAF_NODE	1095:33	1095:33	10	;
JUMP_STATEMENT	1096:3	1096:9	9	return DESTINATION ;
KEYWORD	1096:3	1096:3	10	return
LEAF_NODE	1096:3	1096:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1096:9	1096:9	10	;
LEAF_NODE	1097:2	1097:2	8	}
SELECTION	1098:2	1098:61	6	
KEYWORD	1098:2	1098:2	7	if
LEAF_NODE	1098:2	1098:2	8	if
LEAF_NODE	1098:4	1098:4	7	(
CONDITION	1098:5	1098:5	7	TIFFGetField ( input , TIFFTAG_PAGENUMBER , & pagen , & paged )
EXPR	1098:5	1098:5	8	TIFFGetField ( input , TIFFTAG_PAGENUMBER , & pagen , & paged )
FUNCTION_CALL	1098:5	1098:59	9	TIFFGetField ( input , TIFFTAG_PAGENUMBER , & pagen , & paged )
CALLEE	1098:5	1098:5	10	TIFFGetField
LEAF_NODE	1098:5	1098:5	11	TIFFGetField
LEAF_NODE	1098:17	1098:17	10	(
ARGUMENT	1098:18	1098:18	10	input
FIELD	1098:18	1098:18	11	input
LEAF_NODE	1098:18	1098:18	12	input
LEAF_NODE	1098:23	1098:23	10	,
ARGUMENT	1098:25	1098:25	10	TIFFTAG_PAGENUMBER
FIELD	1098:25	1098:25	11	TIFFTAG_PAGENUMBER
LEAF_NODE	1098:25	1098:25	12	TIFFTAG_PAGENUMBER
LEAF_NODE	1098:43	1098:43	10	,
ARGUMENT	1098:45	1098:45	10	& pagen
UNARY_EXPR	1098:45	1098:46	11	& pagen
UNARY_OPERATOR	1098:45	1098:45	12	&
LEAF_NODE	1098:45	1098:45	13	&
FIELD	1098:46	1098:46	12	pagen
LEAF_NODE	1098:46	1098:46	13	pagen
LEAF_NODE	1098:51	1098:51	10	,
ARGUMENT	1098:53	1098:53	10	& paged
UNARY_EXPR	1098:53	1098:54	11	& paged
UNARY_OPERATOR	1098:53	1098:53	12	&
LEAF_NODE	1098:53	1098:53	13	&
FIELD	1098:54	1098:54	12	paged
LEAF_NODE	1098:54	1098:54	13	paged
LEAF_NODE	1098:59	1098:59	10	)
LEAF_NODE	1098:60	1098:60	7	)
STATEMENTS	1098:61	1107:2	7	
LEAF_NODE	1098:61	1098:61	8	{
STATEMENTS	1099:3	1106:3	8	
SELECTION	1099:3	1099:36	9	
KEYWORD	1099:3	1099:3	10	if
LEAF_NODE	1099:3	1099:3	11	if
LEAF_NODE	1099:5	1099:5	10	(
CONDITION	1099:6	1099:6	10	( pagen > paged ) && ( paged != 0 )
EXPR	1099:6	1099:6	11	( pagen > paged ) && ( paged != 0 )
AND	1099:6	1099:23	12	( pagen > paged ) && ( paged != 0 )
EXPR	1099:6	1099:18	13	( pagen > paged )
LEAF_NODE	1099:6	1099:6	14	(
FIELD	1099:7	1099:7	14	pagen
LEAF_NODE	1099:7	1099:7	15	pagen
REL_OPERATOR	1099:12	1099:12	14	>
LEAF_NODE	1099:12	1099:12	15	>
FIELD	1099:13	1099:13	14	paged
LEAF_NODE	1099:13	1099:13	15	paged
LEAF_NODE	1099:18	1099:18	14	)
LEAF_NODE	1099:20	1099:20	13	&&
EXPR	1099:23	1099:34	13	( paged != 0 )
LEAF_NODE	1099:23	1099:23	14	(
FIELD	1099:24	1099:24	14	paged
LEAF_NODE	1099:24	1099:24	15	paged
EQ_OPERATOR	1099:30	1099:30	14	!=
LEAF_NODE	1099:30	1099:30	15	!=
FIELD	1099:33	1099:33	14	0
LEAF_NODE	1099:33	1099:33	15	0
LEAF_NODE	1099:34	1099:34	14	)
LEAF_NODE	1099:35	1099:35	10	)
STATEMENTS	1099:36	1102:3	10	
LEAF_NODE	1099:36	1099:36	11	{
STATEMENTS	1100:4	1100:4	11	
EXPR_STATEMENT	1100:4	1101:10	12	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number = paged ;
EXPR	1100:4	1100:4	13	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number = paged
ASSIGN	1100:4	1101:5	14	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number = paged
LVAL	1100:4	1100:4	15	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number
FIELD	1100:4	1100:41	16	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number
LEAF_NODE	1100:4	1100:4	17	t2p
LEAF_NODE	1100:7	1100:7	17	->
LEAF_NODE	1100:9	1100:9	17	tiff_pages
LEAF_NODE	1100:19	1100:19	17	[
EXPR	1100:20	1100:20	17	t2p -> tiff_pagecount
FIELD	1100:20	1100:25	18	t2p -> tiff_pagecount
LEAF_NODE	1100:20	1100:20	19	t2p
LEAF_NODE	1100:23	1100:23	19	->
LEAF_NODE	1100:25	1100:25	19	tiff_pagecount
LEAF_NODE	1100:39	1100:39	17	]
LEAF_NODE	1100:40	1100:40	17	.
LEAF_NODE	1100:41	1100:41	17	page_number
ASSIGN_OP	1100:53	1100:53	15	=
LEAF_NODE	1100:53	1100:53	16	=
RVAL	1101:5	1101:5	15	paged
FIELD	1101:5	1101:5	16	paged
LEAF_NODE	1101:5	1101:5	17	paged
LEAF_NODE	1101:10	1101:10	13	;
LEAF_NODE	1102:3	1102:3	11	}
SELECTION	1102:5	1102:10	9	
KEYWORD	1102:5	1102:5	10	else
LEAF_NODE	1102:5	1102:5	11	else
STATEMENTS	1102:10	1105:3	10	
LEAF_NODE	1102:10	1102:10	11	{
STATEMENTS	1103:4	1103:4	11	
EXPR_STATEMENT	1103:4	1104:10	12	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number = pagen ;
EXPR	1103:4	1103:4	13	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number = pagen
ASSIGN	1103:4	1104:5	14	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number = pagen
LVAL	1103:4	1103:4	15	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number
FIELD	1103:4	1103:41	16	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number
LEAF_NODE	1103:4	1103:4	17	t2p
LEAF_NODE	1103:7	1103:7	17	->
LEAF_NODE	1103:9	1103:9	17	tiff_pages
LEAF_NODE	1103:19	1103:19	17	[
EXPR	1103:20	1103:20	17	t2p -> tiff_pagecount
FIELD	1103:20	1103:25	18	t2p -> tiff_pagecount
LEAF_NODE	1103:20	1103:20	19	t2p
LEAF_NODE	1103:23	1103:23	19	->
LEAF_NODE	1103:25	1103:25	19	tiff_pagecount
LEAF_NODE	1103:39	1103:39	17	]
LEAF_NODE	1103:40	1103:40	17	.
LEAF_NODE	1103:41	1103:41	17	page_number
ASSIGN_OP	1103:53	1103:53	15	=
LEAF_NODE	1103:53	1103:53	16	=
RVAL	1104:5	1104:5	15	pagen
FIELD	1104:5	1104:5	16	pagen
LEAF_NODE	1104:5	1104:5	17	pagen
LEAF_NODE	1104:10	1104:10	13	;
LEAF_NODE	1105:3	1105:3	11	}
JUMP_STATEMENT	1106:3	1106:15	9	goto ispage2 ;
KEYWORD	1106:3	1106:3	10	goto
LEAF_NODE	1106:3	1106:3	11	goto
DESTINATION	1106:8	1106:8	10	ispage2
LEAF_NODE	1106:8	1106:8	11	ispage2
LEAF_NODE	1106:15	1106:15	10	;
LEAF_NODE	1107:2	1107:2	8	}
SELECTION	1108:2	1108:60	6	
KEYWORD	1108:2	1108:2	7	if
LEAF_NODE	1108:2	1108:2	8	if
LEAF_NODE	1108:4	1108:4	7	(
CONDITION	1108:5	1108:5	7	TIFFGetField ( input , TIFFTAG_SUBFILETYPE , & subfiletype )
EXPR	1108:5	1108:5	8	TIFFGetField ( input , TIFFTAG_SUBFILETYPE , & subfiletype )
FUNCTION_CALL	1108:5	1108:58	9	TIFFGetField ( input , TIFFTAG_SUBFILETYPE , & subfiletype )
CALLEE	1108:5	1108:5	10	TIFFGetField
LEAF_NODE	1108:5	1108:5	11	TIFFGetField
LEAF_NODE	1108:17	1108:17	10	(
ARGUMENT	1108:18	1108:18	10	input
FIELD	1108:18	1108:18	11	input
LEAF_NODE	1108:18	1108:18	12	input
LEAF_NODE	1108:23	1108:23	10	,
ARGUMENT	1108:25	1108:25	10	TIFFTAG_SUBFILETYPE
FIELD	1108:25	1108:25	11	TIFFTAG_SUBFILETYPE
LEAF_NODE	1108:25	1108:25	12	TIFFTAG_SUBFILETYPE
LEAF_NODE	1108:44	1108:44	10	,
ARGUMENT	1108:46	1108:46	10	& subfiletype
UNARY_EXPR	1108:46	1108:47	11	& subfiletype
UNARY_OPERATOR	1108:46	1108:46	12	&
LEAF_NODE	1108:46	1108:46	13	&
FIELD	1108:47	1108:47	12	subfiletype
LEAF_NODE	1108:47	1108:47	13	subfiletype
LEAF_NODE	1108:58	1108:58	10	)
LEAF_NODE	1108:59	1108:59	7	)
STATEMENTS	1108:60	1115:2	7	
LEAF_NODE	1108:60	1108:60	8	{
STATEMENTS	1109:3	1112:5	8	
SELECTION	1109:3	1110:51	9	
KEYWORD	1109:3	1109:3	10	if
LEAF_NODE	1109:3	1109:3	11	if
LEAF_NODE	1109:6	1109:6	10	(
CONDITION	1109:8	1109:8	10	( ( subfiletype & FILETYPE_PAGE ) != 0 ) || ( subfiletype == 0 )
EXPR	1109:8	1109:8	11	( ( subfiletype & FILETYPE_PAGE ) != 0 ) || ( subfiletype == 0 )
OR	1109:8	1110:32	12	( ( subfiletype & FILETYPE_PAGE ) != 0 ) || ( subfiletype == 0 )
EXPR	1109:8	1109:43	13	( ( subfiletype & FILETYPE_PAGE ) != 0 )
LEAF_NODE	1109:8	1109:8	14	(
LEAF_NODE	1109:9	1109:9	14	(
FIELD	1109:10	1109:10	14	subfiletype
LEAF_NODE	1109:10	1109:10	15	subfiletype
LEAF_NODE	1109:22	1109:22	14	&
FIELD	1109:24	1109:24	14	FILETYPE_PAGE
LEAF_NODE	1109:24	1109:24	15	FILETYPE_PAGE
LEAF_NODE	1109:37	1109:37	14	)
EQ_OPERATOR	1109:39	1109:39	14	!=
LEAF_NODE	1109:39	1109:39	15	!=
FIELD	1109:42	1109:42	14	0
LEAF_NODE	1109:42	1109:42	15	0
LEAF_NODE	1109:43	1109:43	14	)
LEAF_NODE	1110:29	1110:29	13	||
EXPR	1110:32	1110:49	13	( subfiletype == 0 )
LEAF_NODE	1110:32	1110:32	14	(
FIELD	1110:33	1110:33	14	subfiletype
LEAF_NODE	1110:33	1110:33	15	subfiletype
EQ_OPERATOR	1110:45	1110:45	14	==
LEAF_NODE	1110:45	1110:45	15	==
FIELD	1110:48	1110:48	14	0
LEAF_NODE	1110:48	1110:48	15	0
LEAF_NODE	1110:49	1110:49	14	)
LEAF_NODE	1110:50	1110:50	10	)
STATEMENTS	1110:51	1112:3	10	
LEAF_NODE	1110:51	1110:51	11	{
STATEMENTS	1111:4	1111:4	11	
JUMP_STATEMENT	1111:4	1111:15	12	goto ispage ;
KEYWORD	1111:4	1111:4	13	goto
LEAF_NODE	1111:4	1111:4	14	goto
DESTINATION	1111:9	1111:9	13	ispage
LEAF_NODE	1111:9	1111:9	14	ispage
LEAF_NODE	1111:15	1111:15	13	;
LEAF_NODE	1112:3	1112:3	11	}
SELECTION	1112:5	1112:10	9	
KEYWORD	1112:5	1112:5	10	else
LEAF_NODE	1112:5	1112:5	11	else
STATEMENTS	1112:10	1114:3	10	
LEAF_NODE	1112:10	1112:10	11	{
STATEMENTS	1113:4	1113:4	11	
JUMP_STATEMENT	1113:4	1113:18	12	goto isnotpage ;
KEYWORD	1113:4	1113:4	13	goto
LEAF_NODE	1113:4	1113:4	14	goto
DESTINATION	1113:9	1113:9	13	isnotpage
LEAF_NODE	1113:9	1113:9	14	isnotpage
LEAF_NODE	1113:18	1113:18	13	;
LEAF_NODE	1114:3	1114:3	11	}
LEAF_NODE	1115:2	1115:2	8	}
SELECTION	1116:2	1116:61	6	
KEYWORD	1116:2	1116:2	7	if
LEAF_NODE	1116:2	1116:2	8	if
LEAF_NODE	1116:4	1116:4	7	(
CONDITION	1116:5	1116:5	7	TIFFGetField ( input , TIFFTAG_OSUBFILETYPE , & subfiletype )
EXPR	1116:5	1116:5	8	TIFFGetField ( input , TIFFTAG_OSUBFILETYPE , & subfiletype )
FUNCTION_CALL	1116:5	1116:59	9	TIFFGetField ( input , TIFFTAG_OSUBFILETYPE , & subfiletype )
CALLEE	1116:5	1116:5	10	TIFFGetField
LEAF_NODE	1116:5	1116:5	11	TIFFGetField
LEAF_NODE	1116:17	1116:17	10	(
ARGUMENT	1116:18	1116:18	10	input
FIELD	1116:18	1116:18	11	input
LEAF_NODE	1116:18	1116:18	12	input
LEAF_NODE	1116:23	1116:23	10	,
ARGUMENT	1116:25	1116:25	10	TIFFTAG_OSUBFILETYPE
FIELD	1116:25	1116:25	11	TIFFTAG_OSUBFILETYPE
LEAF_NODE	1116:25	1116:25	12	TIFFTAG_OSUBFILETYPE
LEAF_NODE	1116:45	1116:45	10	,
ARGUMENT	1116:47	1116:47	10	& subfiletype
UNARY_EXPR	1116:47	1116:48	11	& subfiletype
UNARY_OPERATOR	1116:47	1116:47	12	&
LEAF_NODE	1116:47	1116:47	13	&
FIELD	1116:48	1116:48	12	subfiletype
LEAF_NODE	1116:48	1116:48	13	subfiletype
LEAF_NODE	1116:59	1116:59	10	)
LEAF_NODE	1116:60	1116:60	7	)
STATEMENTS	1116:61	1124:2	7	
LEAF_NODE	1116:61	1116:61	8	{
STATEMENTS	1117:3	1121:5	8	
SELECTION	1117:3	1119:27	9	
KEYWORD	1117:3	1117:3	10	if
LEAF_NODE	1117:3	1117:3	11	if
LEAF_NODE	1117:6	1117:6	10	(
CONDITION	1117:7	1117:7	10	( subfiletype == OFILETYPE_IMAGE ) || ( subfiletype == OFILETYPE_PAGE ) || ( subfiletype == 0 )
EXPR	1117:7	1117:7	11	( subfiletype == OFILETYPE_IMAGE ) || ( subfiletype == OFILETYPE_PAGE ) || ( subfiletype == 0 )
OR	1117:7	1118:7	12	( subfiletype == OFILETYPE_IMAGE ) || ( subfiletype == OFILETYPE_PAGE ) || ( subfiletype == 0 )
EXPR	1117:7	1117:38	13	( subfiletype == OFILETYPE_IMAGE )
LEAF_NODE	1117:7	1117:7	14	(
FIELD	1117:8	1117:8	14	subfiletype
LEAF_NODE	1117:8	1117:8	15	subfiletype
EQ_OPERATOR	1117:20	1117:20	14	==
LEAF_NODE	1117:20	1117:20	15	==
FIELD	1117:23	1117:23	14	OFILETYPE_IMAGE
LEAF_NODE	1117:23	1117:23	15	OFILETYPE_IMAGE
LEAF_NODE	1117:38	1117:38	14	)
LEAF_NODE	1118:4	1118:4	13	||
EXPR	1118:7	1118:7	13	( subfiletype == OFILETYPE_PAGE ) || ( subfiletype == 0 )
OR	1118:7	1119:7	14	( subfiletype == OFILETYPE_PAGE ) || ( subfiletype == 0 )
EXPR	1118:7	1118:37	15	( subfiletype == OFILETYPE_PAGE )
LEAF_NODE	1118:7	1118:7	16	(
FIELD	1118:8	1118:8	16	subfiletype
LEAF_NODE	1118:8	1118:8	17	subfiletype
EQ_OPERATOR	1118:20	1118:20	16	==
LEAF_NODE	1118:20	1118:20	17	==
FIELD	1118:23	1118:23	16	OFILETYPE_PAGE
LEAF_NODE	1118:23	1118:23	17	OFILETYPE_PAGE
LEAF_NODE	1118:37	1118:37	16	)
LEAF_NODE	1119:4	1119:4	15	||
EXPR	1119:7	1119:24	15	( subfiletype == 0 )
LEAF_NODE	1119:7	1119:7	16	(
FIELD	1119:8	1119:8	16	subfiletype
LEAF_NODE	1119:8	1119:8	17	subfiletype
EQ_OPERATOR	1119:20	1119:20	16	==
LEAF_NODE	1119:20	1119:20	17	==
FIELD	1119:23	1119:23	16	0
LEAF_NODE	1119:23	1119:23	17	0
LEAF_NODE	1119:24	1119:24	16	)
LEAF_NODE	1119:26	1119:26	10	)
STATEMENTS	1119:27	1121:3	10	
LEAF_NODE	1119:27	1119:27	11	{
STATEMENTS	1120:4	1120:4	11	
JUMP_STATEMENT	1120:4	1120:15	12	goto ispage ;
KEYWORD	1120:4	1120:4	13	goto
LEAF_NODE	1120:4	1120:4	14	goto
DESTINATION	1120:9	1120:9	13	ispage
LEAF_NODE	1120:9	1120:9	14	ispage
LEAF_NODE	1120:15	1120:15	13	;
LEAF_NODE	1121:3	1121:3	11	}
SELECTION	1121:5	1121:10	9	
KEYWORD	1121:5	1121:5	10	else
LEAF_NODE	1121:5	1121:5	11	else
STATEMENTS	1121:10	1123:3	10	
LEAF_NODE	1121:10	1121:10	11	{
STATEMENTS	1122:4	1122:4	11	
JUMP_STATEMENT	1122:4	1122:18	12	goto isnotpage ;
KEYWORD	1122:4	1122:4	13	goto
LEAF_NODE	1122:4	1122:4	14	goto
DESTINATION	1122:9	1122:9	13	isnotpage
LEAF_NODE	1122:9	1122:9	14	isnotpage
LEAF_NODE	1122:18	1122:18	13	;
LEAF_NODE	1123:3	1123:3	11	}
LEAF_NODE	1124:2	1124:2	8	}
LABEL	1125:2	1125:8	6	ispage :
LEAF_NODE	1125:2	1125:2	7	ispage
LEAF_NODE	1125:8	1125:8	7	:
EXPR_STATEMENT	1126:2	1126:70	6	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number = t2p -> tiff_pagecount ;
EXPR	1126:2	1126:2	7	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number = t2p -> tiff_pagecount
ASSIGN	1126:2	1126:51	8	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number = t2p -> tiff_pagecount
LVAL	1126:2	1126:2	9	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number
FIELD	1126:2	1126:39	10	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_number
LEAF_NODE	1126:2	1126:2	11	t2p
LEAF_NODE	1126:5	1126:5	11	->
LEAF_NODE	1126:7	1126:7	11	tiff_pages
LEAF_NODE	1126:17	1126:17	11	[
EXPR	1126:18	1126:18	11	t2p -> tiff_pagecount
FIELD	1126:18	1126:23	12	t2p -> tiff_pagecount
LEAF_NODE	1126:18	1126:18	13	t2p
LEAF_NODE	1126:21	1126:21	13	->
LEAF_NODE	1126:23	1126:23	13	tiff_pagecount
LEAF_NODE	1126:37	1126:37	11	]
LEAF_NODE	1126:38	1126:38	11	.
LEAF_NODE	1126:39	1126:39	11	page_number
ASSIGN_OP	1126:50	1126:50	9	=
LEAF_NODE	1126:50	1126:50	10	=
RVAL	1126:51	1126:51	9	t2p -> tiff_pagecount
FIELD	1126:51	1126:56	10	t2p -> tiff_pagecount
LEAF_NODE	1126:51	1126:51	11	t2p
LEAF_NODE	1126:54	1126:54	11	->
LEAF_NODE	1126:56	1126:56	11	tiff_pagecount
LEAF_NODE	1126:70	1126:70	7	;
LABEL	1127:2	1127:9	6	ispage2 :
LEAF_NODE	1127:2	1127:2	7	ispage2
LEAF_NODE	1127:9	1127:9	7	:
EXPR_STATEMENT	1128:2	1128:55	6	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_directory = i ;
EXPR	1128:2	1128:2	7	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_directory = i
ASSIGN	1128:2	1128:54	8	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_directory = i
LVAL	1128:2	1128:2	9	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_directory
FIELD	1128:2	1128:39	10	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_directory
LEAF_NODE	1128:2	1128:2	11	t2p
LEAF_NODE	1128:5	1128:5	11	->
LEAF_NODE	1128:7	1128:7	11	tiff_pages
LEAF_NODE	1128:17	1128:17	11	[
EXPR	1128:18	1128:18	11	t2p -> tiff_pagecount
FIELD	1128:18	1128:23	12	t2p -> tiff_pagecount
LEAF_NODE	1128:18	1128:18	13	t2p
LEAF_NODE	1128:21	1128:21	13	->
LEAF_NODE	1128:23	1128:23	13	tiff_pagecount
LEAF_NODE	1128:37	1128:37	11	]
LEAF_NODE	1128:38	1128:38	11	.
LEAF_NODE	1128:39	1128:39	11	page_directory
ASSIGN_OP	1128:53	1128:53	9	=
LEAF_NODE	1128:53	1128:53	10	=
RVAL	1128:54	1128:54	9	i
FIELD	1128:54	1128:54	10	i
LEAF_NODE	1128:54	1128:54	11	i
LEAF_NODE	1128:55	1128:55	7	;
SELECTION	1129:2	1129:24	6	
KEYWORD	1129:2	1129:2	7	if
LEAF_NODE	1129:2	1129:2	8	if
LEAF_NODE	1129:4	1129:4	7	(
CONDITION	1129:5	1129:5	7	TIFFIsTiled ( input )
EXPR	1129:5	1129:5	8	TIFFIsTiled ( input )
FUNCTION_CALL	1129:5	1129:22	9	TIFFIsTiled ( input )
CALLEE	1129:5	1129:5	10	TIFFIsTiled
LEAF_NODE	1129:5	1129:5	11	TIFFIsTiled
LEAF_NODE	1129:16	1129:16	10	(
ARGUMENT	1129:17	1129:17	10	input
FIELD	1129:17	1129:17	11	input
LEAF_NODE	1129:17	1129:17	12	input
LEAF_NODE	1129:22	1129:22	10	)
LEAF_NODE	1129:23	1129:23	7	)
STATEMENTS	1129:24	1132:2	7	
LEAF_NODE	1129:24	1129:24	8	{
STATEMENTS	1130:3	1130:3	8	
EXPR_STATEMENT	1130:3	1131:28	9	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_tilecount = TIFFNumberOfTiles ( input ) ;
EXPR	1130:3	1130:3	10	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_tilecount = TIFFNumberOfTiles ( input )
ASSIGN	1130:3	1131:4	11	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_tilecount = TIFFNumberOfTiles ( input )
LVAL	1130:3	1130:3	12	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_tilecount
FIELD	1130:3	1130:40	13	t2p -> tiff_pages [ t2p -> tiff_pagecount ] . page_tilecount
LEAF_NODE	1130:3	1130:3	14	t2p
LEAF_NODE	1130:6	1130:6	14	->
LEAF_NODE	1130:8	1130:8	14	tiff_pages
LEAF_NODE	1130:18	1130:18	14	[
EXPR	1130:19	1130:19	14	t2p -> tiff_pagecount
FIELD	1130:19	1130:24	15	t2p -> tiff_pagecount
LEAF_NODE	1130:19	1130:19	16	t2p
LEAF_NODE	1130:22	1130:22	16	->
LEAF_NODE	1130:24	1130:24	16	tiff_pagecount
LEAF_NODE	1130:38	1130:38	14	]
LEAF_NODE	1130:39	1130:39	14	.
LEAF_NODE	1130:40	1130:40	14	page_tilecount
ASSIGN_OP	1130:55	1130:55	12	=
LEAF_NODE	1130:55	1130:55	13	=
RVAL	1131:4	1131:4	12	TIFFNumberOfTiles ( input )
FUNCTION_CALL	1131:4	1131:27	13	TIFFNumberOfTiles ( input )
CALLEE	1131:4	1131:4	14	TIFFNumberOfTiles
LEAF_NODE	1131:4	1131:4	15	TIFFNumberOfTiles
LEAF_NODE	1131:21	1131:21	14	(
ARGUMENT	1131:22	1131:22	14	input
FIELD	1131:22	1131:22	15	input
LEAF_NODE	1131:22	1131:22	16	input
LEAF_NODE	1131:27	1131:27	14	)
LEAF_NODE	1131:28	1131:28	10	;
LEAF_NODE	1132:2	1132:2	8	}
EXPR_STATEMENT	1133:2	1133:23	6	t2p -> tiff_pagecount ++ ;
EXPR	1133:2	1133:2	7	t2p -> tiff_pagecount ++
FIELD	1133:2	1133:21	8	t2p -> tiff_pagecount ++
LEAF_NODE	1133:2	1133:2	9	t2p
LEAF_NODE	1133:5	1133:5	9	->
LEAF_NODE	1133:7	1133:7	9	tiff_pagecount
LEAF_NODE	1133:21	1133:21	9	++
LEAF_NODE	1133:23	1133:23	7	;
LABEL	1134:2	1134:11	6	isnotpage :
LEAF_NODE	1134:2	1134:2	7	isnotpage
LEAF_NODE	1134:11	1134:11	7	:
EXPR_STATEMENT	1135:2	1135:9	6	( void ) 0 ;
EXPR	1135:2	1135:8	7	( void ) 0
LEAF_NODE	1135:2	1135:2	8	(
TYPE_NAME	1135:3	1135:3	8	void
LEAF_NODE	1135:3	1135:3	9	void
LEAF_NODE	1135:7	1135:7	8	)
FIELD	1135:8	1135:8	8	0
LEAF_NODE	1135:8	1135:8	9	0
LEAF_NODE	1135:9	1135:9	7	;
LEAF_NODE	1136:1	1136:1	5	}
EXPR_STATEMENT	1138:1	1139:49	3	qsort ( ( void * ) t2p -> tiff_pages , t2p -> tiff_pagecount , sizeof ( T2P_PAGE ) , t2p_cmp_t2p_page ) ;
EXPR	1138:1	1138:1	4	qsort ( ( void * ) t2p -> tiff_pages , t2p -> tiff_pagecount , sizeof ( T2P_PAGE ) , t2p_cmp_t2p_page )
FUNCTION_CALL	1138:1	1139:48	5	qsort ( ( void * ) t2p -> tiff_pages , t2p -> tiff_pagecount , sizeof ( T2P_PAGE ) , t2p_cmp_t2p_page )
CALLEE	1138:1	1138:1	6	qsort
LEAF_NODE	1138:1	1138:1	7	qsort
LEAF_NODE	1138:6	1138:6	6	(
ARGUMENT	1138:7	1138:15	6	( void * ) t2p -> tiff_pages
LEAF_NODE	1138:7	1138:7	7	(
TYPE_NAME	1138:8	1138:8	7	void
LEAF_NODE	1138:8	1138:8	8	void
LEAF_NODE	1138:12	1138:12	7	*
LEAF_NODE	1138:13	1138:13	7	)
FIELD	1138:15	1138:20	7	t2p -> tiff_pages
LEAF_NODE	1138:15	1138:15	8	t2p
LEAF_NODE	1138:18	1138:18	8	->
LEAF_NODE	1138:20	1138:20	8	tiff_pages
LEAF_NODE	1138:30	1138:30	6	,
ARGUMENT	1138:32	1138:32	6	t2p -> tiff_pagecount
FIELD	1138:32	1138:37	7	t2p -> tiff_pagecount
LEAF_NODE	1138:32	1138:32	8	t2p
LEAF_NODE	1138:35	1138:35	8	->
LEAF_NODE	1138:37	1138:37	8	tiff_pagecount
LEAF_NODE	1138:51	1138:51	6	,
ARGUMENT	1139:14	1139:14	6	sizeof ( T2P_PAGE )
FUNCTION_CALL	1139:14	1139:29	7	sizeof ( T2P_PAGE )
CALLEE	1139:14	1139:14	8	sizeof
LEAF_NODE	1139:14	1139:14	9	sizeof
LEAF_NODE	1139:20	1139:20	8	(
ARGUMENT	1139:21	1139:21	8	T2P_PAGE
FIELD	1139:21	1139:21	9	T2P_PAGE
LEAF_NODE	1139:21	1139:21	10	T2P_PAGE
LEAF_NODE	1139:29	1139:29	8	)
LEAF_NODE	1139:30	1139:30	6	,
ARGUMENT	1139:32	1139:32	6	t2p_cmp_t2p_page
FIELD	1139:32	1139:32	7	t2p_cmp_t2p_page
LEAF_NODE	1139:32	1139:32	8	t2p_cmp_t2p_page
LEAF_NODE	1139:48	1139:48	6	)
LEAF_NODE	1139:49	1139:49	4	;
ITERATION	1141:1	1141:35	3	
KEYWORD	1141:1	1141:1	4	for
LEAF_NODE	1141:1	1141:1	5	for
LEAF_NODE	1141:4	1141:4	4	(
FOR_INIT	1141:5	1141:8	4	i = 0 ;
EXPR	1141:5	1141:5	5	i = 0
ASSIGN	1141:5	1141:7	6	i = 0
LVAL	1141:5	1141:5	7	i
FIELD	1141:5	1141:5	8	i
LEAF_NODE	1141:5	1141:5	9	i
ASSIGN_OP	1141:6	1141:6	7	=
LEAF_NODE	1141:6	1141:6	8	=
RVAL	1141:7	1141:7	7	0
FIELD	1141:7	1141:7	8	0
LEAF_NODE	1141:7	1141:7	9	0
LEAF_NODE	1141:8	1141:8	5	;
CONDITION	1141:9	1141:9	4	i < t2p -> tiff_pagecount
EXPR	1141:9	1141:11	5	i < t2p -> tiff_pagecount
FIELD	1141:9	1141:9	6	i
LEAF_NODE	1141:9	1141:9	7	i
REL_OPERATOR	1141:10	1141:10	6	<
LEAF_NODE	1141:10	1141:10	7	<
FIELD	1141:11	1141:16	6	t2p -> tiff_pagecount
LEAF_NODE	1141:11	1141:11	7	t2p
LEAF_NODE	1141:14	1141:14	7	->
LEAF_NODE	1141:16	1141:16	7	tiff_pagecount
LEAF_NODE	1141:30	1141:30	4	;
FOR_EXPR	1141:31	1141:31	4	i ++
EXPR	1141:31	1141:31	5	i ++
FIELD	1141:31	1141:32	6	i ++
LEAF_NODE	1141:31	1141:31	7	i
LEAF_NODE	1141:32	1141:32	7	++
LEAF_NODE	1141:34	1141:34	4	)
STATEMENTS	1141:35	1259:1	4	
LEAF_NODE	1141:35	1141:35	5	{
STATEMENTS	1142:2	1237:2	5	
EXPR_STATEMENT	1142:2	1142:25	6	t2p -> pdf_xrefcount += 5 ;
EXPR	1142:2	1142:2	7	t2p -> pdf_xrefcount += 5
ASSIGN	1142:2	1142:24	8	t2p -> pdf_xrefcount += 5
LVAL	1142:2	1142:2	9	t2p -> pdf_xrefcount
FIELD	1142:2	1142:7	10	t2p -> pdf_xrefcount
LEAF_NODE	1142:2	1142:2	11	t2p
LEAF_NODE	1142:5	1142:5	11	->
LEAF_NODE	1142:7	1142:7	11	pdf_xrefcount
ASSIGN_OP	1142:21	1142:21	9	+=
LEAF_NODE	1142:21	1142:21	10	+=
RVAL	1142:24	1142:24	9	5
FIELD	1142:24	1142:24	10	5
LEAF_NODE	1142:24	1142:24	11	5
LEAF_NODE	1142:25	1142:25	7	;
EXPR_STATEMENT	1143:2	1143:61	6	TIFFSetDirectory ( input , t2p -> tiff_pages [ i ] . page_directory ) ;
EXPR	1143:2	1143:2	7	TIFFSetDirectory ( input , t2p -> tiff_pages [ i ] . page_directory )
FUNCTION_CALL	1143:2	1143:60	8	TIFFSetDirectory ( input , t2p -> tiff_pages [ i ] . page_directory )
CALLEE	1143:2	1143:2	9	TIFFSetDirectory
LEAF_NODE	1143:2	1143:2	10	TIFFSetDirectory
LEAF_NODE	1143:18	1143:18	9	(
ARGUMENT	1143:19	1143:19	9	input
FIELD	1143:19	1143:19	10	input
LEAF_NODE	1143:19	1143:19	11	input
LEAF_NODE	1143:24	1143:24	9	,
ARGUMENT	1143:26	1143:26	9	t2p -> tiff_pages [ i ] . page_directory
FIELD	1143:26	1143:45	10	t2p -> tiff_pages [ i ] . page_directory
LEAF_NODE	1143:26	1143:26	11	t2p
LEAF_NODE	1143:29	1143:29	11	->
LEAF_NODE	1143:31	1143:31	11	tiff_pages
LEAF_NODE	1143:41	1143:41	11	[
EXPR	1143:42	1143:42	11	i
FIELD	1143:42	1143:42	12	i
LEAF_NODE	1143:42	1143:42	13	i
LEAF_NODE	1143:43	1143:43	11	]
LEAF_NODE	1143:44	1143:44	11	.
LEAF_NODE	1143:45	1143:45	11	page_directory
LEAF_NODE	1143:60	1143:60	9	)
LEAF_NODE	1143:61	1143:61	7	;
SELECTION	1144:2	1146:56	6	
KEYWORD	1144:2	1144:2	7	if
LEAF_NODE	1144:2	1144:2	8	if
LEAF_NODE	1144:4	1144:4	7	(
CONDITION	1144:5	1144:5	7	( TIFFGetField ( input , TIFFTAG_PHOTOMETRIC , & xuint16 ) && ( xuint16 == PHOTOMETRIC_PALETTE ) ) || TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
EXPR	1144:5	1144:5	8	( TIFFGetField ( input , TIFFTAG_PHOTOMETRIC , & xuint16 ) && ( xuint16 == PHOTOMETRIC_PALETTE ) ) || TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
OR	1144:5	1146:8	9	( TIFFGetField ( input , TIFFTAG_PHOTOMETRIC , & xuint16 ) && ( xuint16 == PHOTOMETRIC_PALETTE ) ) || TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
EXPR	1144:5	1145:53	10	( TIFFGetField ( input , TIFFTAG_PHOTOMETRIC , & xuint16 ) && ( xuint16 == PHOTOMETRIC_PALETTE ) )
LEAF_NODE	1144:5	1144:5	11	(
AND	1144:6	1145:23	11	TIFFGetField ( input , TIFFTAG_PHOTOMETRIC , & xuint16 ) && ( xuint16 == PHOTOMETRIC_PALETTE )
EXPR	1144:6	1144:6	12	TIFFGetField ( input , TIFFTAG_PHOTOMETRIC , & xuint16 )
FUNCTION_CALL	1144:6	1144:55	13	TIFFGetField ( input , TIFFTAG_PHOTOMETRIC , & xuint16 )
CALLEE	1144:6	1144:6	14	TIFFGetField
LEAF_NODE	1144:6	1144:6	15	TIFFGetField
LEAF_NODE	1144:18	1144:18	14	(
ARGUMENT	1144:19	1144:19	14	input
FIELD	1144:19	1144:19	15	input
LEAF_NODE	1144:19	1144:19	16	input
LEAF_NODE	1144:24	1144:24	14	,
ARGUMENT	1144:26	1144:26	14	TIFFTAG_PHOTOMETRIC
FIELD	1144:26	1144:26	15	TIFFTAG_PHOTOMETRIC
LEAF_NODE	1144:26	1144:26	16	TIFFTAG_PHOTOMETRIC
LEAF_NODE	1144:45	1144:45	14	,
ARGUMENT	1144:47	1144:47	14	& xuint16
UNARY_EXPR	1144:47	1144:48	15	& xuint16
UNARY_OPERATOR	1144:47	1144:47	16	&
LEAF_NODE	1144:47	1144:47	17	&
FIELD	1144:48	1144:48	16	xuint16
LEAF_NODE	1144:48	1144:48	17	xuint16
LEAF_NODE	1144:55	1144:55	14	)
LEAF_NODE	1145:20	1145:20	12	&&
EXPR	1145:23	1145:52	12	( xuint16 == PHOTOMETRIC_PALETTE )
LEAF_NODE	1145:23	1145:23	13	(
FIELD	1145:24	1145:24	13	xuint16
LEAF_NODE	1145:24	1145:24	14	xuint16
EQ_OPERATOR	1145:31	1145:31	13	==
LEAF_NODE	1145:31	1145:31	14	==
FIELD	1145:33	1145:33	13	PHOTOMETRIC_PALETTE
LEAF_NODE	1145:33	1145:33	14	PHOTOMETRIC_PALETTE
LEAF_NODE	1145:52	1145:52	13	)
LEAF_NODE	1145:53	1145:53	11	)
LEAF_NODE	1146:5	1146:5	10	||
EXPR	1146:8	1146:8	10	TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
FUNCTION_CALL	1146:8	1146:53	11	TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
CALLEE	1146:8	1146:8	12	TIFFGetField
LEAF_NODE	1146:8	1146:8	13	TIFFGetField
LEAF_NODE	1146:20	1146:20	12	(
ARGUMENT	1146:21	1146:21	12	input
FIELD	1146:21	1146:21	13	input
LEAF_NODE	1146:21	1146:21	14	input
LEAF_NODE	1146:26	1146:26	12	,
ARGUMENT	1146:28	1146:28	12	TIFFTAG_INDEXED
FIELD	1146:28	1146:28	13	TIFFTAG_INDEXED
LEAF_NODE	1146:28	1146:28	14	TIFFTAG_INDEXED
LEAF_NODE	1146:43	1146:43	12	,
ARGUMENT	1146:45	1146:45	12	& xuint16
UNARY_EXPR	1146:45	1146:46	13	& xuint16
UNARY_OPERATOR	1146:45	1146:45	14	&
LEAF_NODE	1146:45	1146:45	15	&
FIELD	1146:46	1146:46	14	xuint16
LEAF_NODE	1146:46	1146:46	15	xuint16
LEAF_NODE	1146:53	1146:53	12	)
LEAF_NODE	1146:54	1146:54	7	)
STATEMENTS	1146:56	1149:2	7	
LEAF_NODE	1146:56	1146:56	8	{
STATEMENTS	1147:3	1148:3	8	
EXPR_STATEMENT	1147:3	1147:34	9	t2p -> tiff_pages [ i ] . page_extra ++ ;
EXPR	1147:3	1147:3	10	t2p -> tiff_pages [ i ] . page_extra ++
FIELD	1147:3	1147:32	11	t2p -> tiff_pages [ i ] . page_extra ++
LEAF_NODE	1147:3	1147:3	12	t2p
LEAF_NODE	1147:6	1147:6	12	->
LEAF_NODE	1147:8	1147:8	12	tiff_pages
LEAF_NODE	1147:18	1147:18	12	[
EXPR	1147:19	1147:19	12	i
FIELD	1147:19	1147:19	13	i
LEAF_NODE	1147:19	1147:19	14	i
LEAF_NODE	1147:20	1147:20	12	]
LEAF_NODE	1147:21	1147:21	12	.
LEAF_NODE	1147:22	1147:22	12	page_extra
LEAF_NODE	1147:32	1147:32	12	++
LEAF_NODE	1147:34	1147:34	10	;
EXPR_STATEMENT	1148:3	1148:23	9	t2p -> pdf_xrefcount ++ ;
EXPR	1148:3	1148:3	10	t2p -> pdf_xrefcount ++
FIELD	1148:3	1148:21	11	t2p -> pdf_xrefcount ++
LEAF_NODE	1148:3	1148:3	12	t2p
LEAF_NODE	1148:6	1148:6	12	->
LEAF_NODE	1148:8	1148:8	12	pdf_xrefcount
LEAF_NODE	1148:21	1148:21	12	++
LEAF_NODE	1148:23	1148:23	10	;
LEAF_NODE	1149:2	1149:2	8	}
SELECTION	1151:2	1151:58	6	
KEYWORD	1151:2	1151:2	7	if
LEAF_NODE	1151:2	1151:2	8	if
LEAF_NODE	1151:5	1151:5	7	(
CONDITION	1151:6	1151:6	7	TIFFGetField ( input , TIFFTAG_COMPRESSION , & xuint16 )
EXPR	1151:6	1151:6	8	TIFFGetField ( input , TIFFTAG_COMPRESSION , & xuint16 )
FUNCTION_CALL	1151:6	1151:55	9	TIFFGetField ( input , TIFFTAG_COMPRESSION , & xuint16 )
CALLEE	1151:6	1151:6	10	TIFFGetField
LEAF_NODE	1151:6	1151:6	11	TIFFGetField
LEAF_NODE	1151:18	1151:18	10	(
ARGUMENT	1151:19	1151:19	10	input
FIELD	1151:19	1151:19	11	input
LEAF_NODE	1151:19	1151:19	12	input
LEAF_NODE	1151:24	1151:24	10	,
ARGUMENT	1151:26	1151:26	10	TIFFTAG_COMPRESSION
FIELD	1151:26	1151:26	11	TIFFTAG_COMPRESSION
LEAF_NODE	1151:26	1151:26	12	TIFFTAG_COMPRESSION
LEAF_NODE	1151:45	1151:45	10	,
ARGUMENT	1151:47	1151:47	10	& xuint16
UNARY_EXPR	1151:47	1151:48	11	& xuint16
UNARY_OPERATOR	1151:47	1151:47	12	&
LEAF_NODE	1151:47	1151:47	13	&
FIELD	1151:48	1151:48	12	xuint16
LEAF_NODE	1151:48	1151:48	13	xuint16
LEAF_NODE	1151:55	1151:55	10	)
LEAF_NODE	1151:56	1151:56	7	)
STATEMENTS	1151:58	1159:16	7	
LEAF_NODE	1151:58	1151:58	8	{
STATEMENTS	1152:24	1152:24	8	
SELECTION	1152:24	1156:57	9	
KEYWORD	1152:24	1152:24	10	if
LEAF_NODE	1152:24	1152:24	11	if
LEAF_NODE	1152:26	1152:26	10	(
CONDITION	1152:28	1152:28	10	( xuint16 == COMPRESSION_DEFLATE || xuint16 == COMPRESSION_ADOBE_DEFLATE ) && ( ( t2p -> tiff_pages [ i ] . page_tilecount != 0 ) || TIFFNumberOfStrips ( input ) == 1 ) && ( t2p -> pdf_nopassthrough == 0 )
EXPR	1152:28	1152:28	11	( xuint16 == COMPRESSION_DEFLATE || xuint16 == COMPRESSION_ADOBE_DEFLATE ) && ( ( t2p -> tiff_pages [ i ] . page_tilecount != 0 ) || TIFFNumberOfStrips ( input ) == 1 ) && ( t2p -> pdf_nopassthrough == 0 )
AND	1152:28	1154:28	12	( xuint16 == COMPRESSION_DEFLATE || xuint16 == COMPRESSION_ADOBE_DEFLATE ) && ( ( t2p -> tiff_pages [ i ] . page_tilecount != 0 ) || TIFFNumberOfStrips ( input ) == 1 ) && ( t2p -> pdf_nopassthrough == 0 )
EXPR	1152:28	1153:64	13	( xuint16 == COMPRESSION_DEFLATE || xuint16 == COMPRESSION_ADOBE_DEFLATE )
LEAF_NODE	1152:28	1152:28	14	(
OR	1152:29	1153:29	14	xuint16 == COMPRESSION_DEFLATE || xuint16 == COMPRESSION_ADOBE_DEFLATE
EXPR	1152:29	1152:39	15	xuint16 == COMPRESSION_DEFLATE
FIELD	1152:29	1152:29	16	xuint16
LEAF_NODE	1152:29	1152:29	17	xuint16
EQ_OPERATOR	1152:36	1152:36	16	==
LEAF_NODE	1152:36	1152:36	17	==
FIELD	1152:39	1152:39	16	COMPRESSION_DEFLATE
LEAF_NODE	1152:39	1152:39	17	COMPRESSION_DEFLATE
LEAF_NODE	1152:59	1152:59	15	||
EXPR	1153:29	1153:39	15	xuint16 == COMPRESSION_ADOBE_DEFLATE
FIELD	1153:29	1153:29	16	xuint16
LEAF_NODE	1153:29	1153:29	17	xuint16
EQ_OPERATOR	1153:36	1153:36	16	==
LEAF_NODE	1153:36	1153:36	17	==
FIELD	1153:39	1153:39	16	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	1153:39	1153:39	17	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	1153:64	1153:64	14	)
LEAF_NODE	1153:66	1153:66	13	&&
EXPR	1154:28	1154:28	13	( ( t2p -> tiff_pages [ i ] . page_tilecount != 0 ) || TIFFNumberOfStrips ( input ) == 1 ) && ( t2p -> pdf_nopassthrough == 0 )
AND	1154:28	1156:28	14	( ( t2p -> tiff_pages [ i ] . page_tilecount != 0 ) || TIFFNumberOfStrips ( input ) == 1 ) && ( t2p -> pdf_nopassthrough == 0 )
EXPR	1154:28	1155:60	15	( ( t2p -> tiff_pages [ i ] . page_tilecount != 0 ) || TIFFNumberOfStrips ( input ) == 1 )
LEAF_NODE	1154:28	1154:28	16	(
OR	1154:29	1155:32	16	( t2p -> tiff_pages [ i ] . page_tilecount != 0 ) || TIFFNumberOfStrips ( input ) == 1
EXPR	1154:29	1154:68	17	( t2p -> tiff_pages [ i ] . page_tilecount != 0 )
LEAF_NODE	1154:29	1154:29	18	(
FIELD	1154:30	1154:49	18	t2p -> tiff_pages [ i ] . page_tilecount
LEAF_NODE	1154:30	1154:30	19	t2p
LEAF_NODE	1154:33	1154:33	19	->
LEAF_NODE	1154:35	1154:35	19	tiff_pages
LEAF_NODE	1154:45	1154:45	19	[
EXPR	1154:46	1154:46	19	i
FIELD	1154:46	1154:46	20	i
LEAF_NODE	1154:46	1154:46	21	i
LEAF_NODE	1154:47	1154:47	19	]
LEAF_NODE	1154:48	1154:48	19	.
LEAF_NODE	1154:49	1154:49	19	page_tilecount
EQ_OPERATOR	1154:64	1154:64	18	!=
LEAF_NODE	1154:64	1154:64	19	!=
FIELD	1154:67	1154:67	18	0
LEAF_NODE	1154:67	1154:67	19	0
LEAF_NODE	1154:68	1154:68	18	)
LEAF_NODE	1155:29	1155:29	17	||
EXPR	1155:32	1155:59	17	TIFFNumberOfStrips ( input ) == 1
FUNCTION_CALL	1155:32	1155:56	18	TIFFNumberOfStrips ( input )
CALLEE	1155:32	1155:32	19	TIFFNumberOfStrips
LEAF_NODE	1155:32	1155:32	20	TIFFNumberOfStrips
LEAF_NODE	1155:50	1155:50	19	(
ARGUMENT	1155:51	1155:51	19	input
FIELD	1155:51	1155:51	20	input
LEAF_NODE	1155:51	1155:51	21	input
LEAF_NODE	1155:56	1155:56	19	)
EQ_OPERATOR	1155:57	1155:57	18	==
LEAF_NODE	1155:57	1155:57	19	==
FIELD	1155:59	1155:59	18	1
LEAF_NODE	1155:59	1155:59	19	1
LEAF_NODE	1155:60	1155:60	16	)
LEAF_NODE	1155:62	1155:62	15	&&
EXPR	1156:28	1156:54	15	( t2p -> pdf_nopassthrough == 0 )
LEAF_NODE	1156:28	1156:28	16	(
FIELD	1156:29	1156:34	16	t2p -> pdf_nopassthrough
LEAF_NODE	1156:29	1156:29	17	t2p
LEAF_NODE	1156:32	1156:32	17	->
LEAF_NODE	1156:34	1156:34	17	pdf_nopassthrough
EQ_OPERATOR	1156:51	1156:51	16	==
LEAF_NODE	1156:51	1156:51	17	==
FIELD	1156:53	1156:53	16	0
LEAF_NODE	1156:53	1156:53	17	0
LEAF_NODE	1156:54	1156:54	16	)
LEAF_NODE	1156:56	1156:56	10	)
STATEMENTS	1156:57	1158:24	10	
LEAF_NODE	1156:57	1156:57	11	{
STATEMENTS	1157:32	1157:32	11	
SELECTION	1157:32	1157:59	12	
KEYWORD	1157:32	1157:32	13	if
LEAF_NODE	1157:32	1157:32	14	if
LEAF_NODE	1157:34	1157:34	13	(
CONDITION	1157:35	1157:35	13	t2p -> pdf_minorversion < 2
EXPR	1157:35	1157:57	14	t2p -> pdf_minorversion < 2
FIELD	1157:35	1157:40	15	t2p -> pdf_minorversion
LEAF_NODE	1157:35	1157:35	16	t2p
LEAF_NODE	1157:38	1157:38	16	->
LEAF_NODE	1157:40	1157:40	16	pdf_minorversion
REL_OPERATOR	1157:56	1157:56	15	<
LEAF_NODE	1157:56	1157:56	16	<
FIELD	1157:57	1157:57	15	2
LEAF_NODE	1157:57	1157:57	16	2
LEAF_NODE	1157:58	1157:58	13	)
STATEMENTS	1157:59	1157:84	13	
LEAF_NODE	1157:59	1157:59	14	{
STATEMENTS	1157:60	1157:60	14	
EXPR_STATEMENT	1157:60	1157:83	15	t2p -> pdf_minorversion = 2 ;
EXPR	1157:60	1157:60	16	t2p -> pdf_minorversion = 2
ASSIGN	1157:60	1157:82	17	t2p -> pdf_minorversion = 2
LVAL	1157:60	1157:60	18	t2p -> pdf_minorversion
FIELD	1157:60	1157:65	19	t2p -> pdf_minorversion
LEAF_NODE	1157:60	1157:60	20	t2p
LEAF_NODE	1157:63	1157:63	20	->
LEAF_NODE	1157:65	1157:65	20	pdf_minorversion
ASSIGN_OP	1157:81	1157:81	18	=
LEAF_NODE	1157:81	1157:81	19	=
RVAL	1157:82	1157:82	18	2
FIELD	1157:82	1157:82	19	2
LEAF_NODE	1157:82	1157:82	20	2
LEAF_NODE	1157:83	1157:83	16	;
LEAF_NODE	1157:84	1157:84	14	}
LEAF_NODE	1158:24	1158:24	11	}
LEAF_NODE	1159:16	1159:16	8	}
SELECTION	1161:2	1164:63	6	
KEYWORD	1161:2	1161:2	7	if
LEAF_NODE	1161:2	1161:2	8	if
LEAF_NODE	1161:5	1161:5	7	(
CONDITION	1161:6	1161:6	7	TIFFGetField ( input , TIFFTAG_TRANSFERFUNCTION , & ( tiff_transferfunction [ 0 ] ) , & ( tiff_transferfunction [ 1 ] ) , & ( tiff_transferfunction [ 2 ] ) )
EXPR	1161:6	1161:6	8	TIFFGetField ( input , TIFFTAG_TRANSFERFUNCTION , & ( tiff_transferfunction [ 0 ] ) , & ( tiff_transferfunction [ 1 ] ) , & ( tiff_transferfunction [ 2 ] ) )
FUNCTION_CALL	1161:6	1164:60	9	TIFFGetField ( input , TIFFTAG_TRANSFERFUNCTION , & ( tiff_transferfunction [ 0 ] ) , & ( tiff_transferfunction [ 1 ] ) , & ( tiff_transferfunction [ 2 ] ) )
CALLEE	1161:6	1161:6	10	TIFFGetField
LEAF_NODE	1161:6	1161:6	11	TIFFGetField
LEAF_NODE	1161:18	1161:18	10	(
ARGUMENT	1161:19	1161:19	10	input
FIELD	1161:19	1161:19	11	input
LEAF_NODE	1161:19	1161:19	12	input
LEAF_NODE	1161:24	1161:24	10	,
ARGUMENT	1161:26	1161:26	10	TIFFTAG_TRANSFERFUNCTION
FIELD	1161:26	1161:26	11	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	1161:26	1161:26	12	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	1161:50	1161:50	10	,
ARGUMENT	1162:33	1162:33	10	& ( tiff_transferfunction [ 0 ] )
UNARY_EXPR	1162:33	1162:59	11	& ( tiff_transferfunction [ 0 ] )
UNARY_OPERATOR	1162:33	1162:33	12	&
LEAF_NODE	1162:33	1162:33	13	&
LEAF_NODE	1162:34	1162:34	12	(
FIELD	1162:35	1162:58	12	tiff_transferfunction [ 0 ]
LEAF_NODE	1162:35	1162:35	13	tiff_transferfunction
LEAF_NODE	1162:56	1162:56	13	[
EXPR	1162:57	1162:57	13	0
FIELD	1162:57	1162:57	14	0
LEAF_NODE	1162:57	1162:57	15	0
LEAF_NODE	1162:58	1162:58	13	]
LEAF_NODE	1162:59	1162:59	12	)
LEAF_NODE	1162:60	1162:60	10	,
ARGUMENT	1163:33	1163:33	10	& ( tiff_transferfunction [ 1 ] )
UNARY_EXPR	1163:33	1163:59	11	& ( tiff_transferfunction [ 1 ] )
UNARY_OPERATOR	1163:33	1163:33	12	&
LEAF_NODE	1163:33	1163:33	13	&
LEAF_NODE	1163:34	1163:34	12	(
FIELD	1163:35	1163:58	12	tiff_transferfunction [ 1 ]
LEAF_NODE	1163:35	1163:35	13	tiff_transferfunction
LEAF_NODE	1163:56	1163:56	13	[
EXPR	1163:57	1163:57	13	1
FIELD	1163:57	1163:57	14	1
LEAF_NODE	1163:57	1163:57	15	1
LEAF_NODE	1163:58	1163:58	13	]
LEAF_NODE	1163:59	1163:59	12	)
LEAF_NODE	1163:60	1163:60	10	,
ARGUMENT	1164:33	1164:33	10	& ( tiff_transferfunction [ 2 ] )
UNARY_EXPR	1164:33	1164:59	11	& ( tiff_transferfunction [ 2 ] )
UNARY_OPERATOR	1164:33	1164:33	12	&
LEAF_NODE	1164:33	1164:33	13	&
LEAF_NODE	1164:34	1164:34	12	(
FIELD	1164:35	1164:58	12	tiff_transferfunction [ 2 ]
LEAF_NODE	1164:35	1164:35	13	tiff_transferfunction
LEAF_NODE	1164:56	1164:56	13	[
EXPR	1164:57	1164:57	13	2
FIELD	1164:57	1164:57	14	2
LEAF_NODE	1164:57	1164:57	15	2
LEAF_NODE	1164:58	1164:58	13	]
LEAF_NODE	1164:59	1164:59	12	)
LEAF_NODE	1164:60	1164:60	10	)
LEAF_NODE	1164:61	1164:61	7	)
STATEMENTS	1164:63	1173:16	7	
LEAF_NODE	1164:63	1164:63	8	{
STATEMENTS	1166:24	1170:26	8	
SELECTION	1166:24	1168:28	9	
KEYWORD	1166:24	1166:24	10	if
LEAF_NODE	1166:24	1166:24	11	if
LEAF_NODE	1166:26	1166:26	10	(
CONDITION	1166:27	1166:27	10	( tiff_transferfunction [ 1 ] != ( uint16 * ) NULL ) && ( tiff_transferfunction [ 2 ] != ( uint16 * ) NULL )
EXPR	1166:27	1166:27	11	( tiff_transferfunction [ 1 ] != ( uint16 * ) NULL ) && ( tiff_transferfunction [ 2 ] != ( uint16 * ) NULL )
AND	1166:27	1167:27	12	( tiff_transferfunction [ 1 ] != ( uint16 * ) NULL ) && ( tiff_transferfunction [ 2 ] != ( uint16 * ) NULL )
EXPR	1166:27	1166:70	13	( tiff_transferfunction [ 1 ] != ( uint16 * ) NULL )
LEAF_NODE	1166:27	1166:27	14	(
FIELD	1166:28	1166:51	14	tiff_transferfunction [ 1 ]
LEAF_NODE	1166:28	1166:28	15	tiff_transferfunction
LEAF_NODE	1166:49	1166:49	15	[
EXPR	1166:50	1166:50	15	1
FIELD	1166:50	1166:50	16	1
LEAF_NODE	1166:50	1166:50	17	1
LEAF_NODE	1166:51	1166:51	15	]
EQ_OPERATOR	1166:53	1166:53	14	!=
LEAF_NODE	1166:53	1166:53	15	!=
LEAF_NODE	1166:56	1166:56	14	(
TYPE_NAME	1166:57	1166:57	14	uint16
LEAF_NODE	1166:57	1166:57	15	uint16
LEAF_NODE	1166:63	1166:63	14	*
LEAF_NODE	1166:64	1166:64	14	)
FIELD	1166:66	1166:66	14	NULL
LEAF_NODE	1166:66	1166:66	15	NULL
LEAF_NODE	1166:70	1166:70	14	)
LEAF_NODE	1166:72	1166:72	13	&&
EXPR	1167:27	1167:70	13	( tiff_transferfunction [ 2 ] != ( uint16 * ) NULL )
LEAF_NODE	1167:27	1167:27	14	(
FIELD	1167:28	1167:51	14	tiff_transferfunction [ 2 ]
LEAF_NODE	1167:28	1167:28	15	tiff_transferfunction
LEAF_NODE	1167:49	1167:49	15	[
EXPR	1167:50	1167:50	15	2
FIELD	1167:50	1167:50	16	2
LEAF_NODE	1167:50	1167:50	17	2
LEAF_NODE	1167:51	1167:51	15	]
EQ_OPERATOR	1167:53	1167:53	14	!=
LEAF_NODE	1167:53	1167:53	15	!=
LEAF_NODE	1167:56	1167:56	14	(
TYPE_NAME	1167:57	1167:57	14	uint16
LEAF_NODE	1167:57	1167:57	15	uint16
LEAF_NODE	1167:63	1167:63	14	*
LEAF_NODE	1167:64	1167:64	14	)
FIELD	1167:66	1167:66	14	NULL
LEAF_NODE	1167:66	1167:66	15	NULL
LEAF_NODE	1167:70	1167:70	14	)
LEAF_NODE	1168:26	1168:26	10	)
STATEMENTS	1168:28	1170:24	10	
LEAF_NODE	1168:28	1168:28	11	{
STATEMENTS	1169:28	1169:28	11	
EXPR_STATEMENT	1169:28	1169:56	12	tiff_transferfunctioncount = 3 ;
EXPR	1169:28	1169:28	13	tiff_transferfunctioncount = 3
ASSIGN	1169:28	1169:55	14	tiff_transferfunctioncount = 3
LVAL	1169:28	1169:28	15	tiff_transferfunctioncount
FIELD	1169:28	1169:28	16	tiff_transferfunctioncount
LEAF_NODE	1169:28	1169:28	17	tiff_transferfunctioncount
ASSIGN_OP	1169:54	1169:54	15	=
LEAF_NODE	1169:54	1169:54	16	=
RVAL	1169:55	1169:55	15	3
FIELD	1169:55	1169:55	16	3
LEAF_NODE	1169:55	1169:55	17	3
LEAF_NODE	1169:56	1169:56	13	;
LEAF_NODE	1170:24	1170:24	11	}
SELECTION	1170:26	1170:31	9	
KEYWORD	1170:26	1170:26	10	else
LEAF_NODE	1170:26	1170:26	11	else
STATEMENTS	1170:31	1172:24	10	
LEAF_NODE	1170:31	1170:31	11	{
STATEMENTS	1171:28	1171:28	11	
EXPR_STATEMENT	1171:28	1171:56	12	tiff_transferfunctioncount = 1 ;
EXPR	1171:28	1171:28	13	tiff_transferfunctioncount = 1
ASSIGN	1171:28	1171:55	14	tiff_transferfunctioncount = 1
LVAL	1171:28	1171:28	15	tiff_transferfunctioncount
FIELD	1171:28	1171:28	16	tiff_transferfunctioncount
LEAF_NODE	1171:28	1171:28	17	tiff_transferfunctioncount
ASSIGN_OP	1171:54	1171:54	15	=
LEAF_NODE	1171:54	1171:54	16	=
RVAL	1171:55	1171:55	15	1
FIELD	1171:55	1171:55	16	1
LEAF_NODE	1171:55	1171:55	17	1
LEAF_NODE	1171:56	1171:56	13	;
LEAF_NODE	1172:24	1172:24	11	}
LEAF_NODE	1173:16	1173:16	8	}
SELECTION	1173:18	1173:23	6	
KEYWORD	1173:18	1173:18	7	else
LEAF_NODE	1173:18	1173:18	8	else
STATEMENTS	1173:23	1175:2	7	
LEAF_NODE	1173:23	1173:23	8	{
STATEMENTS	1174:3	1174:3	8	
EXPR_STATEMENT	1174:3	1174:31	9	tiff_transferfunctioncount = 0 ;
EXPR	1174:3	1174:3	10	tiff_transferfunctioncount = 0
ASSIGN	1174:3	1174:30	11	tiff_transferfunctioncount = 0
LVAL	1174:3	1174:3	12	tiff_transferfunctioncount
FIELD	1174:3	1174:3	13	tiff_transferfunctioncount
LEAF_NODE	1174:3	1174:3	14	tiff_transferfunctioncount
ASSIGN_OP	1174:29	1174:29	12	=
LEAF_NODE	1174:29	1174:29	13	=
RVAL	1174:30	1174:30	12	0
FIELD	1174:30	1174:30	13	0
LEAF_NODE	1174:30	1174:30	14	0
LEAF_NODE	1174:31	1174:31	10	;
LEAF_NODE	1175:2	1175:2	8	}
SELECTION	1177:16	1177:26	6	
KEYWORD	1177:16	1177:16	7	if
LEAF_NODE	1177:16	1177:16	8	if
LEAF_NODE	1177:19	1177:19	7	(
CONDITION	1177:20	1177:20	7	i > 0
EXPR	1177:20	1177:24	8	i > 0
FIELD	1177:20	1177:20	9	i
LEAF_NODE	1177:20	1177:20	10	i
REL_OPERATOR	1177:22	1177:22	9	>
LEAF_NODE	1177:22	1177:22	10	>
FIELD	1177:24	1177:24	9	0
LEAF_NODE	1177:24	1177:24	10	0
LEAF_NODE	1177:25	1177:25	7	)
STATEMENTS	1177:26	1186:16	7	
LEAF_NODE	1177:26	1177:26	8	{
STATEMENTS	1178:20	1178:20	8	
SELECTION	1178:20	1178:86	9	
KEYWORD	1178:20	1178:20	10	if
LEAF_NODE	1178:20	1178:20	11	if
LEAF_NODE	1178:23	1178:23	10	(
CONDITION	1178:24	1178:24	10	tiff_transferfunctioncount != t2p -> tiff_transferfunctioncount
EXPR	1178:24	1178:54	11	tiff_transferfunctioncount != t2p -> tiff_transferfunctioncount
FIELD	1178:24	1178:24	12	tiff_transferfunctioncount
LEAF_NODE	1178:24	1178:24	13	tiff_transferfunctioncount
EQ_OPERATOR	1178:51	1178:51	12	!=
LEAF_NODE	1178:51	1178:51	13	!=
FIELD	1178:54	1178:59	12	t2p -> tiff_transferfunctioncount
LEAF_NODE	1178:54	1178:54	13	t2p
LEAF_NODE	1178:57	1178:57	13	->
LEAF_NODE	1178:59	1178:59	13	tiff_transferfunctioncount
LEAF_NODE	1178:85	1178:85	10	)
STATEMENTS	1178:86	1185:20	10	
LEAF_NODE	1178:86	1178:86	11	{
STATEMENTS	1179:24	1184:24	11	
EXPR_STATEMENT	1179:24	1182:30	12	TIFFError ( TIFF2PDF_MODULE , "Different transfer function on page %d" , i ) ;
EXPR	1179:24	1179:24	13	TIFFError ( TIFF2PDF_MODULE , "Different transfer function on page %d" , i )
FUNCTION_CALL	1179:24	1182:29	14	TIFFError ( TIFF2PDF_MODULE , "Different transfer function on page %d" , i )
CALLEE	1179:24	1179:24	15	TIFFError
LEAF_NODE	1179:24	1179:24	16	TIFFError
LEAF_NODE	1179:33	1179:33	15	(
ARGUMENT	1180:28	1180:28	15	TIFF2PDF_MODULE
FIELD	1180:28	1180:28	16	TIFF2PDF_MODULE
LEAF_NODE	1180:28	1180:28	17	TIFF2PDF_MODULE
LEAF_NODE	1180:43	1180:43	15	,
ARGUMENT	1181:28	1181:28	15	"Different transfer function on page %d"
FIELD	1181:28	1181:28	16	"Different transfer function on page %d"
LEAF_NODE	1181:28	1181:28	17	"Different transfer function on page %d"
LEAF_NODE	1181:68	1181:68	15	,
ARGUMENT	1182:28	1182:28	15	i
FIELD	1182:28	1182:28	16	i
LEAF_NODE	1182:28	1182:28	17	i
LEAF_NODE	1182:29	1182:29	15	)
LEAF_NODE	1182:30	1182:30	13	;
EXPR_STATEMENT	1183:24	1183:54	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1183:24	1183:24	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1183:24	1183:41	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1183:24	1183:24	15	t2p -> t2p_error
FIELD	1183:24	1183:29	16	t2p -> t2p_error
LEAF_NODE	1183:24	1183:24	17	t2p
LEAF_NODE	1183:27	1183:27	17	->
LEAF_NODE	1183:29	1183:29	17	t2p_error
ASSIGN_OP	1183:39	1183:39	15	=
LEAF_NODE	1183:39	1183:39	16	=
RVAL	1183:41	1183:41	15	T2P_ERR_ERROR
FIELD	1183:41	1183:41	16	T2P_ERR_ERROR
LEAF_NODE	1183:41	1183:41	17	T2P_ERR_ERROR
LEAF_NODE	1183:54	1183:54	13	;
JUMP_STATEMENT	1184:24	1184:30	12	return DESTINATION ;
KEYWORD	1184:24	1184:24	13	return
LEAF_NODE	1184:24	1184:24	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1184:30	1184:30	13	;
LEAF_NODE	1185:20	1185:20	11	}
LEAF_NODE	1186:16	1186:16	8	}
EXPR_STATEMENT	1188:16	1188:76	6	t2p -> tiff_transferfunctioncount = tiff_transferfunctioncount ;
EXPR	1188:16	1188:16	7	t2p -> tiff_transferfunctioncount = tiff_transferfunctioncount
ASSIGN	1188:16	1188:50	8	t2p -> tiff_transferfunctioncount = tiff_transferfunctioncount
LVAL	1188:16	1188:16	9	t2p -> tiff_transferfunctioncount
FIELD	1188:16	1188:21	10	t2p -> tiff_transferfunctioncount
LEAF_NODE	1188:16	1188:16	11	t2p
LEAF_NODE	1188:19	1188:19	11	->
LEAF_NODE	1188:21	1188:21	11	tiff_transferfunctioncount
ASSIGN_OP	1188:48	1188:48	9	=
LEAF_NODE	1188:48	1188:48	10	=
RVAL	1188:50	1188:50	9	tiff_transferfunctioncount
FIELD	1188:50	1188:50	10	tiff_transferfunctioncount
LEAF_NODE	1188:50	1188:50	11	tiff_transferfunctioncount
LEAF_NODE	1188:76	1188:76	7	;
EXPR_STATEMENT	1189:16	1189:72	6	t2p -> tiff_transferfunction [ 0 ] = tiff_transferfunction [ 0 ] ;
EXPR	1189:16	1189:16	7	t2p -> tiff_transferfunction [ 0 ] = tiff_transferfunction [ 0 ]
ASSIGN	1189:16	1189:48	8	t2p -> tiff_transferfunction [ 0 ] = tiff_transferfunction [ 0 ]
LVAL	1189:16	1189:16	9	t2p -> tiff_transferfunction [ 0 ]
FIELD	1189:16	1189:44	10	t2p -> tiff_transferfunction [ 0 ]
LEAF_NODE	1189:16	1189:16	11	t2p
LEAF_NODE	1189:19	1189:19	11	->
LEAF_NODE	1189:21	1189:21	11	tiff_transferfunction
LEAF_NODE	1189:42	1189:42	11	[
EXPR	1189:43	1189:43	11	0
FIELD	1189:43	1189:43	12	0
LEAF_NODE	1189:43	1189:43	13	0
LEAF_NODE	1189:44	1189:44	11	]
ASSIGN_OP	1189:46	1189:46	9	=
LEAF_NODE	1189:46	1189:46	10	=
RVAL	1189:48	1189:48	9	tiff_transferfunction [ 0 ]
FIELD	1189:48	1189:71	10	tiff_transferfunction [ 0 ]
LEAF_NODE	1189:48	1189:48	11	tiff_transferfunction
LEAF_NODE	1189:69	1189:69	11	[
EXPR	1189:70	1189:70	11	0
FIELD	1189:70	1189:70	12	0
LEAF_NODE	1189:70	1189:70	13	0
LEAF_NODE	1189:71	1189:71	11	]
LEAF_NODE	1189:72	1189:72	7	;
EXPR_STATEMENT	1190:16	1190:72	6	t2p -> tiff_transferfunction [ 1 ] = tiff_transferfunction [ 1 ] ;
EXPR	1190:16	1190:16	7	t2p -> tiff_transferfunction [ 1 ] = tiff_transferfunction [ 1 ]
ASSIGN	1190:16	1190:48	8	t2p -> tiff_transferfunction [ 1 ] = tiff_transferfunction [ 1 ]
LVAL	1190:16	1190:16	9	t2p -> tiff_transferfunction [ 1 ]
FIELD	1190:16	1190:44	10	t2p -> tiff_transferfunction [ 1 ]
LEAF_NODE	1190:16	1190:16	11	t2p
LEAF_NODE	1190:19	1190:19	11	->
LEAF_NODE	1190:21	1190:21	11	tiff_transferfunction
LEAF_NODE	1190:42	1190:42	11	[
EXPR	1190:43	1190:43	11	1
FIELD	1190:43	1190:43	12	1
LEAF_NODE	1190:43	1190:43	13	1
LEAF_NODE	1190:44	1190:44	11	]
ASSIGN_OP	1190:46	1190:46	9	=
LEAF_NODE	1190:46	1190:46	10	=
RVAL	1190:48	1190:48	9	tiff_transferfunction [ 1 ]
FIELD	1190:48	1190:71	10	tiff_transferfunction [ 1 ]
LEAF_NODE	1190:48	1190:48	11	tiff_transferfunction
LEAF_NODE	1190:69	1190:69	11	[
EXPR	1190:70	1190:70	11	1
FIELD	1190:70	1190:70	12	1
LEAF_NODE	1190:70	1190:70	13	1
LEAF_NODE	1190:71	1190:71	11	]
LEAF_NODE	1190:72	1190:72	7	;
EXPR_STATEMENT	1191:16	1191:72	6	t2p -> tiff_transferfunction [ 2 ] = tiff_transferfunction [ 2 ] ;
EXPR	1191:16	1191:16	7	t2p -> tiff_transferfunction [ 2 ] = tiff_transferfunction [ 2 ]
ASSIGN	1191:16	1191:48	8	t2p -> tiff_transferfunction [ 2 ] = tiff_transferfunction [ 2 ]
LVAL	1191:16	1191:16	9	t2p -> tiff_transferfunction [ 2 ]
FIELD	1191:16	1191:44	10	t2p -> tiff_transferfunction [ 2 ]
LEAF_NODE	1191:16	1191:16	11	t2p
LEAF_NODE	1191:19	1191:19	11	->
LEAF_NODE	1191:21	1191:21	11	tiff_transferfunction
LEAF_NODE	1191:42	1191:42	11	[
EXPR	1191:43	1191:43	11	2
FIELD	1191:43	1191:43	12	2
LEAF_NODE	1191:43	1191:43	13	2
LEAF_NODE	1191:44	1191:44	11	]
ASSIGN_OP	1191:46	1191:46	9	=
LEAF_NODE	1191:46	1191:46	10	=
RVAL	1191:48	1191:48	9	tiff_transferfunction [ 2 ]
FIELD	1191:48	1191:71	10	tiff_transferfunction [ 2 ]
LEAF_NODE	1191:48	1191:48	11	tiff_transferfunction
LEAF_NODE	1191:69	1191:69	11	[
EXPR	1191:70	1191:70	11	2
FIELD	1191:70	1191:70	12	2
LEAF_NODE	1191:70	1191:70	13	2
LEAF_NODE	1191:71	1191:71	11	]
LEAF_NODE	1191:72	1191:72	7	;
SELECTION	1192:16	1192:51	6	
KEYWORD	1192:16	1192:16	7	if
LEAF_NODE	1192:16	1192:16	8	if
LEAF_NODE	1192:18	1192:18	7	(
CONDITION	1192:19	1192:19	7	tiff_transferfunctioncount == 3
EXPR	1192:19	1192:49	8	tiff_transferfunctioncount == 3
FIELD	1192:19	1192:19	9	tiff_transferfunctioncount
LEAF_NODE	1192:19	1192:19	10	tiff_transferfunctioncount
EQ_OPERATOR	1192:46	1192:46	9	==
LEAF_NODE	1192:46	1192:46	10	==
FIELD	1192:49	1192:49	9	3
LEAF_NODE	1192:49	1192:49	10	3
LEAF_NODE	1192:50	1192:50	7	)
STATEMENTS	1192:51	1197:16	7	
LEAF_NODE	1192:51	1192:51	8	{
STATEMENTS	1193:24	1195:24	8	
EXPR_STATEMENT	1193:24	1193:58	9	t2p -> tiff_pages [ i ] . page_extra += 4 ;
EXPR	1193:24	1193:24	10	t2p -> tiff_pages [ i ] . page_extra += 4
ASSIGN	1193:24	1193:57	11	t2p -> tiff_pages [ i ] . page_extra += 4
LVAL	1193:24	1193:24	12	t2p -> tiff_pages [ i ] . page_extra
FIELD	1193:24	1193:43	13	t2p -> tiff_pages [ i ] . page_extra
LEAF_NODE	1193:24	1193:24	14	t2p
LEAF_NODE	1193:27	1193:27	14	->
LEAF_NODE	1193:29	1193:29	14	tiff_pages
LEAF_NODE	1193:39	1193:39	14	[
EXPR	1193:40	1193:40	14	i
FIELD	1193:40	1193:40	15	i
LEAF_NODE	1193:40	1193:40	16	i
LEAF_NODE	1193:41	1193:41	14	]
LEAF_NODE	1193:42	1193:42	14	.
LEAF_NODE	1193:43	1193:43	14	page_extra
ASSIGN_OP	1193:54	1193:54	12	+=
LEAF_NODE	1193:54	1193:54	13	+=
RVAL	1193:57	1193:57	12	4
FIELD	1193:57	1193:57	13	4
LEAF_NODE	1193:57	1193:57	14	4
LEAF_NODE	1193:58	1193:58	10	;
EXPR_STATEMENT	1194:24	1194:47	9	t2p -> pdf_xrefcount += 4 ;
EXPR	1194:24	1194:24	10	t2p -> pdf_xrefcount += 4
ASSIGN	1194:24	1194:46	11	t2p -> pdf_xrefcount += 4
LVAL	1194:24	1194:24	12	t2p -> pdf_xrefcount
FIELD	1194:24	1194:29	13	t2p -> pdf_xrefcount
LEAF_NODE	1194:24	1194:24	14	t2p
LEAF_NODE	1194:27	1194:27	14	->
LEAF_NODE	1194:29	1194:29	14	pdf_xrefcount
ASSIGN_OP	1194:43	1194:43	12	+=
LEAF_NODE	1194:43	1194:43	13	+=
RVAL	1194:46	1194:46	12	4
FIELD	1194:46	1194:46	13	4
LEAF_NODE	1194:46	1194:46	14	4
LEAF_NODE	1194:47	1194:47	10	;
SELECTION	1195:24	1196:32	9	
KEYWORD	1195:24	1195:24	10	if
LEAF_NODE	1195:24	1195:24	11	if
LEAF_NODE	1195:26	1195:26	10	(
CONDITION	1195:27	1195:27	10	t2p -> pdf_minorversion < 2
EXPR	1195:27	1195:51	11	t2p -> pdf_minorversion < 2
FIELD	1195:27	1195:32	12	t2p -> pdf_minorversion
LEAF_NODE	1195:27	1195:27	13	t2p
LEAF_NODE	1195:30	1195:30	13	->
LEAF_NODE	1195:32	1195:32	13	pdf_minorversion
REL_OPERATOR	1195:49	1195:49	12	<
LEAF_NODE	1195:49	1195:49	13	<
FIELD	1195:51	1195:51	12	2
LEAF_NODE	1195:51	1195:51	13	2
LEAF_NODE	1195:52	1195:52	10	)
STATEMENTS	1196:32	1196:32	10	
EXPR_STATEMENT	1196:32	1196:57	11	t2p -> pdf_minorversion = 2 ;
EXPR	1196:32	1196:32	12	t2p -> pdf_minorversion = 2
ASSIGN	1196:32	1196:56	13	t2p -> pdf_minorversion = 2
LVAL	1196:32	1196:32	14	t2p -> pdf_minorversion
FIELD	1196:32	1196:37	15	t2p -> pdf_minorversion
LEAF_NODE	1196:32	1196:32	16	t2p
LEAF_NODE	1196:35	1196:35	16	->
LEAF_NODE	1196:37	1196:37	16	pdf_minorversion
ASSIGN_OP	1196:54	1196:54	14	=
LEAF_NODE	1196:54	1196:54	15	=
RVAL	1196:56	1196:56	14	2
FIELD	1196:56	1196:56	15	2
LEAF_NODE	1196:56	1196:56	16	2
LEAF_NODE	1196:57	1196:57	12	;
LEAF_NODE	1197:16	1197:16	8	}
SELECTION	1197:18	1197:23	6	
KEYWORD	1197:18	1197:18	7	else
LEAF_NODE	1197:18	1197:18	8	else
STATEMENTS	1197:23	1197:23	7	
SELECTION	1197:23	1197:59	8	
KEYWORD	1197:23	1197:23	9	if
LEAF_NODE	1197:23	1197:23	10	if
LEAF_NODE	1197:26	1197:26	9	(
CONDITION	1197:27	1197:27	9	tiff_transferfunctioncount == 1
EXPR	1197:27	1197:57	10	tiff_transferfunctioncount == 1
FIELD	1197:27	1197:27	11	tiff_transferfunctioncount
LEAF_NODE	1197:27	1197:27	12	tiff_transferfunctioncount
EQ_OPERATOR	1197:54	1197:54	11	==
LEAF_NODE	1197:54	1197:54	12	==
FIELD	1197:57	1197:57	11	1
LEAF_NODE	1197:57	1197:57	12	1
LEAF_NODE	1197:58	1197:58	9	)
STATEMENTS	1197:59	1202:16	9	
LEAF_NODE	1197:59	1197:59	10	{
STATEMENTS	1198:24	1200:24	10	
EXPR_STATEMENT	1198:24	1198:58	11	t2p -> tiff_pages [ i ] . page_extra += 2 ;
EXPR	1198:24	1198:24	12	t2p -> tiff_pages [ i ] . page_extra += 2
ASSIGN	1198:24	1198:57	13	t2p -> tiff_pages [ i ] . page_extra += 2
LVAL	1198:24	1198:24	14	t2p -> tiff_pages [ i ] . page_extra
FIELD	1198:24	1198:43	15	t2p -> tiff_pages [ i ] . page_extra
LEAF_NODE	1198:24	1198:24	16	t2p
LEAF_NODE	1198:27	1198:27	16	->
LEAF_NODE	1198:29	1198:29	16	tiff_pages
LEAF_NODE	1198:39	1198:39	16	[
EXPR	1198:40	1198:40	16	i
FIELD	1198:40	1198:40	17	i
LEAF_NODE	1198:40	1198:40	18	i
LEAF_NODE	1198:41	1198:41	16	]
LEAF_NODE	1198:42	1198:42	16	.
LEAF_NODE	1198:43	1198:43	16	page_extra
ASSIGN_OP	1198:54	1198:54	14	+=
LEAF_NODE	1198:54	1198:54	15	+=
RVAL	1198:57	1198:57	14	2
FIELD	1198:57	1198:57	15	2
LEAF_NODE	1198:57	1198:57	16	2
LEAF_NODE	1198:58	1198:58	12	;
EXPR_STATEMENT	1199:24	1199:47	11	t2p -> pdf_xrefcount += 2 ;
EXPR	1199:24	1199:24	12	t2p -> pdf_xrefcount += 2
ASSIGN	1199:24	1199:46	13	t2p -> pdf_xrefcount += 2
LVAL	1199:24	1199:24	14	t2p -> pdf_xrefcount
FIELD	1199:24	1199:29	15	t2p -> pdf_xrefcount
LEAF_NODE	1199:24	1199:24	16	t2p
LEAF_NODE	1199:27	1199:27	16	->
LEAF_NODE	1199:29	1199:29	16	pdf_xrefcount
ASSIGN_OP	1199:43	1199:43	14	+=
LEAF_NODE	1199:43	1199:43	15	+=
RVAL	1199:46	1199:46	14	2
FIELD	1199:46	1199:46	15	2
LEAF_NODE	1199:46	1199:46	16	2
LEAF_NODE	1199:47	1199:47	12	;
SELECTION	1200:24	1201:32	11	
KEYWORD	1200:24	1200:24	12	if
LEAF_NODE	1200:24	1200:24	13	if
LEAF_NODE	1200:26	1200:26	12	(
CONDITION	1200:27	1200:27	12	t2p -> pdf_minorversion < 2
EXPR	1200:27	1200:51	13	t2p -> pdf_minorversion < 2
FIELD	1200:27	1200:32	14	t2p -> pdf_minorversion
LEAF_NODE	1200:27	1200:27	15	t2p
LEAF_NODE	1200:30	1200:30	15	->
LEAF_NODE	1200:32	1200:32	15	pdf_minorversion
REL_OPERATOR	1200:49	1200:49	14	<
LEAF_NODE	1200:49	1200:49	15	<
FIELD	1200:51	1200:51	14	2
LEAF_NODE	1200:51	1200:51	15	2
LEAF_NODE	1200:52	1200:52	12	)
STATEMENTS	1201:32	1201:32	12	
EXPR_STATEMENT	1201:32	1201:57	13	t2p -> pdf_minorversion = 2 ;
EXPR	1201:32	1201:32	14	t2p -> pdf_minorversion = 2
ASSIGN	1201:32	1201:56	15	t2p -> pdf_minorversion = 2
LVAL	1201:32	1201:32	16	t2p -> pdf_minorversion
FIELD	1201:32	1201:37	17	t2p -> pdf_minorversion
LEAF_NODE	1201:32	1201:32	18	t2p
LEAF_NODE	1201:35	1201:35	18	->
LEAF_NODE	1201:37	1201:37	18	pdf_minorversion
ASSIGN_OP	1201:54	1201:54	16	=
LEAF_NODE	1201:54	1201:54	17	=
RVAL	1201:56	1201:56	16	2
FIELD	1201:56	1201:56	17	2
LEAF_NODE	1201:56	1201:56	18	2
LEAF_NODE	1201:57	1201:57	14	;
LEAF_NODE	1202:16	1202:16	10	}
SELECTION	1204:2	1208:33	6	
KEYWORD	1204:2	1204:2	7	if
LEAF_NODE	1204:2	1204:2	8	if
LEAF_NODE	1204:4	1204:4	7	(
CONDITION	1204:6	1204:6	7	TIFFGetField ( input , TIFFTAG_ICCPROFILE , & ( t2p -> tiff_iccprofilelength ) , & ( t2p -> tiff_iccprofile ) ) != 0
EXPR	1204:6	1208:31	8	TIFFGetField ( input , TIFFTAG_ICCPROFILE , & ( t2p -> tiff_iccprofilelength ) , & ( t2p -> tiff_iccprofile ) ) != 0
FUNCTION_CALL	1204:6	1208:26	9	TIFFGetField ( input , TIFFTAG_ICCPROFILE , & ( t2p -> tiff_iccprofilelength ) , & ( t2p -> tiff_iccprofile ) )
CALLEE	1204:6	1204:6	10	TIFFGetField
LEAF_NODE	1204:6	1204:6	11	TIFFGetField
LEAF_NODE	1204:18	1204:18	10	(
ARGUMENT	1205:3	1205:3	10	input
FIELD	1205:3	1205:3	11	input
LEAF_NODE	1205:3	1205:3	12	input
LEAF_NODE	1205:8	1205:8	10	,
ARGUMENT	1206:3	1206:3	10	TIFFTAG_ICCPROFILE
FIELD	1206:3	1206:3	11	TIFFTAG_ICCPROFILE
LEAF_NODE	1206:3	1206:3	12	TIFFTAG_ICCPROFILE
LEAF_NODE	1206:21	1206:21	10	,
ARGUMENT	1207:3	1207:3	10	& ( t2p -> tiff_iccprofilelength )
UNARY_EXPR	1207:3	1207:31	11	& ( t2p -> tiff_iccprofilelength )
UNARY_OPERATOR	1207:3	1207:3	12	&
LEAF_NODE	1207:3	1207:3	13	&
LEAF_NODE	1207:4	1207:4	12	(
FIELD	1207:5	1207:10	12	t2p -> tiff_iccprofilelength
LEAF_NODE	1207:5	1207:5	13	t2p
LEAF_NODE	1207:8	1207:8	13	->
LEAF_NODE	1207:10	1207:10	13	tiff_iccprofilelength
LEAF_NODE	1207:31	1207:31	12	)
LEAF_NODE	1207:32	1207:32	10	,
ARGUMENT	1208:3	1208:3	10	& ( t2p -> tiff_iccprofile )
UNARY_EXPR	1208:3	1208:25	11	& ( t2p -> tiff_iccprofile )
UNARY_OPERATOR	1208:3	1208:3	12	&
LEAF_NODE	1208:3	1208:3	13	&
LEAF_NODE	1208:4	1208:4	12	(
FIELD	1208:5	1208:10	12	t2p -> tiff_iccprofile
LEAF_NODE	1208:5	1208:5	13	t2p
LEAF_NODE	1208:8	1208:8	13	->
LEAF_NODE	1208:10	1208:10	13	tiff_iccprofile
LEAF_NODE	1208:25	1208:25	12	)
LEAF_NODE	1208:26	1208:26	10	)
EQ_OPERATOR	1208:28	1208:28	9	!=
LEAF_NODE	1208:28	1208:28	10	!=
FIELD	1208:31	1208:31	9	0
LEAF_NODE	1208:31	1208:31	10	0
LEAF_NODE	1208:32	1208:32	7	)
STATEMENTS	1208:33	1212:2	7	
LEAF_NODE	1208:33	1208:33	8	{
STATEMENTS	1209:3	1211:3	8	
EXPR_STATEMENT	1209:3	1209:34	9	t2p -> tiff_pages [ i ] . page_extra ++ ;
EXPR	1209:3	1209:3	10	t2p -> tiff_pages [ i ] . page_extra ++
FIELD	1209:3	1209:32	11	t2p -> tiff_pages [ i ] . page_extra ++
LEAF_NODE	1209:3	1209:3	12	t2p
LEAF_NODE	1209:6	1209:6	12	->
LEAF_NODE	1209:8	1209:8	12	tiff_pages
LEAF_NODE	1209:18	1209:18	12	[
EXPR	1209:19	1209:19	12	i
FIELD	1209:19	1209:19	13	i
LEAF_NODE	1209:19	1209:19	14	i
LEAF_NODE	1209:20	1209:20	12	]
LEAF_NODE	1209:21	1209:21	12	.
LEAF_NODE	1209:22	1209:22	12	page_extra
LEAF_NODE	1209:32	1209:32	12	++
LEAF_NODE	1209:34	1209:34	10	;
EXPR_STATEMENT	1210:3	1210:23	9	t2p -> pdf_xrefcount ++ ;
EXPR	1210:3	1210:3	10	t2p -> pdf_xrefcount ++
FIELD	1210:3	1210:21	11	t2p -> pdf_xrefcount ++
LEAF_NODE	1210:3	1210:3	12	t2p
LEAF_NODE	1210:6	1210:6	12	->
LEAF_NODE	1210:8	1210:8	12	pdf_xrefcount
LEAF_NODE	1210:21	1210:21	12	++
LEAF_NODE	1210:23	1210:23	10	;
SELECTION	1211:3	1211:30	9	
KEYWORD	1211:3	1211:3	10	if
LEAF_NODE	1211:3	1211:3	11	if
LEAF_NODE	1211:5	1211:5	10	(
CONDITION	1211:6	1211:6	10	t2p -> pdf_minorversion < 3
EXPR	1211:6	1211:28	11	t2p -> pdf_minorversion < 3
FIELD	1211:6	1211:11	12	t2p -> pdf_minorversion
LEAF_NODE	1211:6	1211:6	13	t2p
LEAF_NODE	1211:9	1211:9	13	->
LEAF_NODE	1211:11	1211:11	13	pdf_minorversion
REL_OPERATOR	1211:27	1211:27	12	<
LEAF_NODE	1211:27	1211:27	13	<
FIELD	1211:28	1211:28	12	3
LEAF_NODE	1211:28	1211:28	13	3
LEAF_NODE	1211:29	1211:29	10	)
STATEMENTS	1211:30	1211:55	10	
LEAF_NODE	1211:30	1211:30	11	{
STATEMENTS	1211:31	1211:31	11	
EXPR_STATEMENT	1211:31	1211:54	12	t2p -> pdf_minorversion = 3 ;
EXPR	1211:31	1211:31	13	t2p -> pdf_minorversion = 3
ASSIGN	1211:31	1211:53	14	t2p -> pdf_minorversion = 3
LVAL	1211:31	1211:31	15	t2p -> pdf_minorversion
FIELD	1211:31	1211:36	16	t2p -> pdf_minorversion
LEAF_NODE	1211:31	1211:31	17	t2p
LEAF_NODE	1211:34	1211:34	17	->
LEAF_NODE	1211:36	1211:36	17	pdf_minorversion
ASSIGN_OP	1211:52	1211:52	15	=
LEAF_NODE	1211:52	1211:52	16	=
RVAL	1211:53	1211:53	15	3
FIELD	1211:53	1211:53	16	3
LEAF_NODE	1211:53	1211:53	17	3
LEAF_NODE	1211:54	1211:54	13	;
LEAF_NODE	1211:55	1211:55	11	}
LEAF_NODE	1212:2	1212:2	8	}
EXPR_STATEMENT	1213:2	1214:36	6	t2p -> tiff_tiles [ i ] . tiles_tilecount = t2p -> tiff_pages [ i ] . page_tilecount ;
EXPR	1213:2	1213:2	7	t2p -> tiff_tiles [ i ] . tiles_tilecount = t2p -> tiff_pages [ i ] . page_tilecount
ASSIGN	1213:2	1214:3	8	t2p -> tiff_tiles [ i ] . tiles_tilecount = t2p -> tiff_pages [ i ] . page_tilecount
LVAL	1213:2	1213:2	9	t2p -> tiff_tiles [ i ] . tiles_tilecount
FIELD	1213:2	1213:21	10	t2p -> tiff_tiles [ i ] . tiles_tilecount
LEAF_NODE	1213:2	1213:2	11	t2p
LEAF_NODE	1213:5	1213:5	11	->
LEAF_NODE	1213:7	1213:7	11	tiff_tiles
LEAF_NODE	1213:17	1213:17	11	[
EXPR	1213:18	1213:18	11	i
FIELD	1213:18	1213:18	12	i
LEAF_NODE	1213:18	1213:18	13	i
LEAF_NODE	1213:19	1213:19	11	]
LEAF_NODE	1213:20	1213:20	11	.
LEAF_NODE	1213:21	1213:21	11	tiles_tilecount
ASSIGN_OP	1213:36	1213:36	9	=
LEAF_NODE	1213:36	1213:36	10	=
RVAL	1214:3	1214:3	9	t2p -> tiff_pages [ i ] . page_tilecount
FIELD	1214:3	1214:22	10	t2p -> tiff_pages [ i ] . page_tilecount
LEAF_NODE	1214:3	1214:3	11	t2p
LEAF_NODE	1214:6	1214:6	11	->
LEAF_NODE	1214:8	1214:8	11	tiff_pages
LEAF_NODE	1214:18	1214:18	11	[
EXPR	1214:19	1214:19	11	i
FIELD	1214:19	1214:19	12	i
LEAF_NODE	1214:19	1214:19	13	i
LEAF_NODE	1214:20	1214:20	11	]
LEAF_NODE	1214:21	1214:21	11	.
LEAF_NODE	1214:22	1214:22	11	page_tilecount
LEAF_NODE	1214:36	1214:36	7	;
SELECTION	1215:2	1216:43	6	
KEYWORD	1215:2	1215:2	7	if
LEAF_NODE	1215:2	1215:2	8	if
LEAF_NODE	1215:4	1215:4	7	(
CONDITION	1215:6	1215:6	7	( TIFFGetField ( input , TIFFTAG_PLANARCONFIG , & xuint16 ) != 0 ) && ( xuint16 == PLANARCONFIG_SEPARATE )
EXPR	1215:6	1215:6	8	( TIFFGetField ( input , TIFFTAG_PLANARCONFIG , & xuint16 ) != 0 ) && ( xuint16 == PLANARCONFIG_SEPARATE )
AND	1215:6	1216:6	9	( TIFFGetField ( input , TIFFTAG_PLANARCONFIG , & xuint16 ) != 0 ) && ( xuint16 == PLANARCONFIG_SEPARATE )
EXPR	1215:6	1215:63	10	( TIFFGetField ( input , TIFFTAG_PLANARCONFIG , & xuint16 ) != 0 )
LEAF_NODE	1215:6	1215:6	11	(
FUNCTION_CALL	1215:7	1215:57	11	TIFFGetField ( input , TIFFTAG_PLANARCONFIG , & xuint16 )
CALLEE	1215:7	1215:7	12	TIFFGetField
LEAF_NODE	1215:7	1215:7	13	TIFFGetField
LEAF_NODE	1215:19	1215:19	12	(
ARGUMENT	1215:20	1215:20	12	input
FIELD	1215:20	1215:20	13	input
LEAF_NODE	1215:20	1215:20	14	input
LEAF_NODE	1215:25	1215:25	12	,
ARGUMENT	1215:27	1215:27	12	TIFFTAG_PLANARCONFIG
FIELD	1215:27	1215:27	13	TIFFTAG_PLANARCONFIG
LEAF_NODE	1215:27	1215:27	14	TIFFTAG_PLANARCONFIG
LEAF_NODE	1215:47	1215:47	12	,
ARGUMENT	1215:49	1215:49	12	& xuint16
UNARY_EXPR	1215:49	1215:50	13	& xuint16
UNARY_OPERATOR	1215:49	1215:49	14	&
LEAF_NODE	1215:49	1215:49	15	&
FIELD	1215:50	1215:50	14	xuint16
LEAF_NODE	1215:50	1215:50	15	xuint16
LEAF_NODE	1215:57	1215:57	12	)
EQ_OPERATOR	1215:59	1215:59	11	!=
LEAF_NODE	1215:59	1215:59	12	!=
FIELD	1215:62	1215:62	11	0
LEAF_NODE	1215:62	1215:62	12	0
LEAF_NODE	1215:63	1215:63	11	)
LEAF_NODE	1216:3	1216:3	10	&&
EXPR	1216:6	1216:40	10	( xuint16 == PLANARCONFIG_SEPARATE )
LEAF_NODE	1216:6	1216:6	11	(
FIELD	1216:7	1216:7	11	xuint16
LEAF_NODE	1216:7	1216:7	12	xuint16
EQ_OPERATOR	1216:15	1216:15	11	==
LEAF_NODE	1216:15	1216:15	12	==
FIELD	1216:18	1216:18	11	PLANARCONFIG_SEPARATE
LEAF_NODE	1216:18	1216:18	12	PLANARCONFIG_SEPARATE
LEAF_NODE	1216:40	1216:40	11	)
LEAF_NODE	1216:42	1216:42	7	)
STATEMENTS	1216:43	1236:2	7	
LEAF_NODE	1216:43	1216:43	8	{
STATEMENTS	1217:4	1235:4	8	
SELECTION	1217:4	1218:4	9	
KEYWORD	1217:4	1217:4	10	if
LEAF_NODE	1217:4	1217:4	11	if
LEAF_NODE	1217:6	1217:6	10	(
CONDITION	1217:8	1217:8	10	! TIFFGetField ( input , TIFFTAG_SAMPLESPERPIXEL , & xuint16 )
EXPR	1217:8	1217:8	11	! TIFFGetField ( input , TIFFTAG_SAMPLESPERPIXEL , & xuint16 )
UNARY_EXPR	1217:8	1217:9	12	! TIFFGetField ( input , TIFFTAG_SAMPLESPERPIXEL , & xuint16 )
UNARY_OPERATOR	1217:8	1217:8	13	!
LEAF_NODE	1217:8	1217:8	14	!
FUNCTION_CALL	1217:9	1217:62	13	TIFFGetField ( input , TIFFTAG_SAMPLESPERPIXEL , & xuint16 )
CALLEE	1217:9	1217:9	14	TIFFGetField
LEAF_NODE	1217:9	1217:9	15	TIFFGetField
LEAF_NODE	1217:21	1217:21	14	(
ARGUMENT	1217:22	1217:22	14	input
FIELD	1217:22	1217:22	15	input
LEAF_NODE	1217:22	1217:22	16	input
LEAF_NODE	1217:27	1217:27	14	,
ARGUMENT	1217:29	1217:29	14	TIFFTAG_SAMPLESPERPIXEL
FIELD	1217:29	1217:29	15	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	1217:29	1217:29	16	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	1217:52	1217:52	14	,
ARGUMENT	1217:54	1217:54	14	& xuint16
UNARY_EXPR	1217:54	1217:55	15	& xuint16
UNARY_OPERATOR	1217:54	1217:54	16	&
LEAF_NODE	1217:54	1217:54	17	&
FIELD	1217:55	1217:55	16	xuint16
LEAF_NODE	1217:55	1217:55	17	xuint16
LEAF_NODE	1217:62	1217:62	14	)
LEAF_NODE	1217:64	1217:64	10	)
STATEMENTS	1218:4	1225:4	10	
LEAF_NODE	1218:4	1218:4	11	{
STATEMENTS	1219:5	1224:20	11	
EXPR_STATEMENT	1219:5	1222:44	12	TIFFError ( TIFF2PDF_MODULE , "Missing SamplesPerPixel, %s" , TIFFFileName ( input ) ) ;
EXPR	1219:5	1219:5	13	TIFFError ( TIFF2PDF_MODULE , "Missing SamplesPerPixel, %s" , TIFFFileName ( input ) )
FUNCTION_CALL	1219:5	1222:43	14	TIFFError ( TIFF2PDF_MODULE , "Missing SamplesPerPixel, %s" , TIFFFileName ( input ) )
CALLEE	1219:5	1219:5	15	TIFFError
LEAF_NODE	1219:5	1219:5	16	TIFFError
LEAF_NODE	1219:14	1219:14	15	(
ARGUMENT	1220:24	1220:24	15	TIFF2PDF_MODULE
FIELD	1220:24	1220:24	16	TIFF2PDF_MODULE
LEAF_NODE	1220:24	1220:24	17	TIFF2PDF_MODULE
LEAF_NODE	1220:39	1220:39	15	,
ARGUMENT	1221:24	1221:24	15	"Missing SamplesPerPixel, %s"
FIELD	1221:24	1221:24	16	"Missing SamplesPerPixel, %s"
LEAF_NODE	1221:24	1221:24	17	"Missing SamplesPerPixel, %s"
LEAF_NODE	1221:53	1221:53	15	,
ARGUMENT	1222:24	1222:24	15	TIFFFileName ( input )
FUNCTION_CALL	1222:24	1222:42	16	TIFFFileName ( input )
CALLEE	1222:24	1222:24	17	TIFFFileName
LEAF_NODE	1222:24	1222:24	18	TIFFFileName
LEAF_NODE	1222:36	1222:36	17	(
ARGUMENT	1222:37	1222:37	17	input
FIELD	1222:37	1222:37	18	input
LEAF_NODE	1222:37	1222:37	19	input
LEAF_NODE	1222:42	1222:42	17	)
LEAF_NODE	1222:43	1222:43	15	)
LEAF_NODE	1222:44	1222:44	13	;
EXPR_STATEMENT	1223:20	1223:50	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1223:20	1223:20	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1223:20	1223:37	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1223:20	1223:20	15	t2p -> t2p_error
FIELD	1223:20	1223:25	16	t2p -> t2p_error
LEAF_NODE	1223:20	1223:20	17	t2p
LEAF_NODE	1223:23	1223:23	17	->
LEAF_NODE	1223:25	1223:25	17	t2p_error
ASSIGN_OP	1223:35	1223:35	15	=
LEAF_NODE	1223:35	1223:35	16	=
RVAL	1223:37	1223:37	15	T2P_ERR_ERROR
FIELD	1223:37	1223:37	16	T2P_ERR_ERROR
LEAF_NODE	1223:37	1223:37	17	T2P_ERR_ERROR
LEAF_NODE	1223:50	1223:50	13	;
JUMP_STATEMENT	1224:20	1224:26	12	return DESTINATION ;
KEYWORD	1224:20	1224:20	13	return
LEAF_NODE	1224:20	1224:20	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1224:26	1224:26	13	;
LEAF_NODE	1225:4	1225:4	11	}
SELECTION	1226:16	1227:16	9	
KEYWORD	1226:16	1226:16	10	if
LEAF_NODE	1226:16	1226:16	11	if
LEAF_NODE	1226:18	1226:18	10	(
CONDITION	1226:20	1226:20	10	( t2p -> tiff_tiles [ i ] . tiles_tilecount % xuint16 ) != 0
EXPR	1226:20	1226:70	11	( t2p -> tiff_tiles [ i ] . tiles_tilecount % xuint16 ) != 0
LEAF_NODE	1226:20	1226:20	12	(
FIELD	1226:21	1226:40	12	t2p -> tiff_tiles [ i ] . tiles_tilecount
LEAF_NODE	1226:21	1226:21	13	t2p
LEAF_NODE	1226:24	1226:24	13	->
LEAF_NODE	1226:26	1226:26	13	tiff_tiles
LEAF_NODE	1226:36	1226:36	13	[
EXPR	1226:37	1226:37	13	i
FIELD	1226:37	1226:37	14	i
LEAF_NODE	1226:37	1226:37	15	i
LEAF_NODE	1226:38	1226:38	13	]
LEAF_NODE	1226:39	1226:39	13	.
LEAF_NODE	1226:40	1226:40	13	tiles_tilecount
LEAF_NODE	1226:56	1226:56	12	%
FIELD	1226:58	1226:58	12	xuint16
LEAF_NODE	1226:58	1226:58	13	xuint16
LEAF_NODE	1226:65	1226:65	12	)
EQ_OPERATOR	1226:67	1226:67	12	!=
LEAF_NODE	1226:67	1226:67	13	!=
FIELD	1226:70	1226:70	12	0
LEAF_NODE	1226:70	1226:70	13	0
LEAF_NODE	1226:72	1226:72	10	)
STATEMENTS	1227:16	1234:16	10	
LEAF_NODE	1227:16	1227:16	11	{
STATEMENTS	1228:20	1233:20	11	
EXPR_STATEMENT	1228:20	1231:44	12	TIFFError ( TIFF2PDF_MODULE , "Invalid tile count, %s" , TIFFFileName ( input ) ) ;
EXPR	1228:20	1228:20	13	TIFFError ( TIFF2PDF_MODULE , "Invalid tile count, %s" , TIFFFileName ( input ) )
FUNCTION_CALL	1228:20	1231:43	14	TIFFError ( TIFF2PDF_MODULE , "Invalid tile count, %s" , TIFFFileName ( input ) )
CALLEE	1228:20	1228:20	15	TIFFError
LEAF_NODE	1228:20	1228:20	16	TIFFError
LEAF_NODE	1228:29	1228:29	15	(
ARGUMENT	1229:24	1229:24	15	TIFF2PDF_MODULE
FIELD	1229:24	1229:24	16	TIFF2PDF_MODULE
LEAF_NODE	1229:24	1229:24	17	TIFF2PDF_MODULE
LEAF_NODE	1229:39	1229:39	15	,
ARGUMENT	1230:24	1230:24	15	"Invalid tile count, %s"
FIELD	1230:24	1230:24	16	"Invalid tile count, %s"
LEAF_NODE	1230:24	1230:24	17	"Invalid tile count, %s"
LEAF_NODE	1230:48	1230:48	15	,
ARGUMENT	1231:24	1231:24	15	TIFFFileName ( input )
FUNCTION_CALL	1231:24	1231:42	16	TIFFFileName ( input )
CALLEE	1231:24	1231:24	17	TIFFFileName
LEAF_NODE	1231:24	1231:24	18	TIFFFileName
LEAF_NODE	1231:36	1231:36	17	(
ARGUMENT	1231:37	1231:37	17	input
FIELD	1231:37	1231:37	18	input
LEAF_NODE	1231:37	1231:37	19	input
LEAF_NODE	1231:42	1231:42	17	)
LEAF_NODE	1231:43	1231:43	15	)
LEAF_NODE	1231:44	1231:44	13	;
EXPR_STATEMENT	1232:20	1232:50	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1232:20	1232:20	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1232:20	1232:37	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1232:20	1232:20	15	t2p -> t2p_error
FIELD	1232:20	1232:25	16	t2p -> t2p_error
LEAF_NODE	1232:20	1232:20	17	t2p
LEAF_NODE	1232:23	1232:23	17	->
LEAF_NODE	1232:25	1232:25	17	t2p_error
ASSIGN_OP	1232:35	1232:35	15	=
LEAF_NODE	1232:35	1232:35	16	=
RVAL	1232:37	1232:37	15	T2P_ERR_ERROR
FIELD	1232:37	1232:37	16	T2P_ERR_ERROR
LEAF_NODE	1232:37	1232:37	17	T2P_ERR_ERROR
LEAF_NODE	1232:50	1232:50	13	;
JUMP_STATEMENT	1233:20	1233:26	12	return DESTINATION ;
KEYWORD	1233:20	1233:20	13	return
LEAF_NODE	1233:20	1233:20	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1233:26	1233:26	13	;
LEAF_NODE	1234:16	1234:16	11	}
EXPR_STATEMENT	1235:4	1235:48	9	t2p -> tiff_tiles [ i ] . tiles_tilecount /= xuint16 ;
EXPR	1235:4	1235:4	10	t2p -> tiff_tiles [ i ] . tiles_tilecount /= xuint16
ASSIGN	1235:4	1235:41	11	t2p -> tiff_tiles [ i ] . tiles_tilecount /= xuint16
LVAL	1235:4	1235:4	12	t2p -> tiff_tiles [ i ] . tiles_tilecount
FIELD	1235:4	1235:23	13	t2p -> tiff_tiles [ i ] . tiles_tilecount
LEAF_NODE	1235:4	1235:4	14	t2p
LEAF_NODE	1235:7	1235:7	14	->
LEAF_NODE	1235:9	1235:9	14	tiff_tiles
LEAF_NODE	1235:19	1235:19	14	[
EXPR	1235:20	1235:20	14	i
FIELD	1235:20	1235:20	15	i
LEAF_NODE	1235:20	1235:20	16	i
LEAF_NODE	1235:21	1235:21	14	]
LEAF_NODE	1235:22	1235:22	14	.
LEAF_NODE	1235:23	1235:23	14	tiles_tilecount
ASSIGN_OP	1235:38	1235:38	12	/=
LEAF_NODE	1235:38	1235:38	13	/=
RVAL	1235:41	1235:41	12	xuint16
FIELD	1235:41	1235:41	13	xuint16
LEAF_NODE	1235:41	1235:41	14	xuint16
LEAF_NODE	1235:48	1235:48	10	;
LEAF_NODE	1236:2	1236:2	8	}
SELECTION	1237:2	1237:45	6	
KEYWORD	1237:2	1237:2	7	if
LEAF_NODE	1237:2	1237:2	8	if
LEAF_NODE	1237:4	1237:4	7	(
CONDITION	1237:6	1237:6	7	t2p -> tiff_tiles [ i ] . tiles_tilecount > 0
EXPR	1237:6	1237:43	8	t2p -> tiff_tiles [ i ] . tiles_tilecount > 0
FIELD	1237:6	1237:25	9	t2p -> tiff_tiles [ i ] . tiles_tilecount
LEAF_NODE	1237:6	1237:6	10	t2p
LEAF_NODE	1237:9	1237:9	10	->
LEAF_NODE	1237:11	1237:11	10	tiff_tiles
LEAF_NODE	1237:21	1237:21	10	[
EXPR	1237:22	1237:22	10	i
FIELD	1237:22	1237:22	11	i
LEAF_NODE	1237:22	1237:22	12	i
LEAF_NODE	1237:23	1237:23	10	]
LEAF_NODE	1237:24	1237:24	10	.
LEAF_NODE	1237:25	1237:25	10	tiles_tilecount
REL_OPERATOR	1237:41	1237:41	9	>
LEAF_NODE	1237:41	1237:41	10	>
FIELD	1237:43	1237:43	9	0
LEAF_NODE	1237:43	1237:43	10	0
LEAF_NODE	1237:44	1237:44	7	)
STATEMENTS	1237:45	1258:2	7	
LEAF_NODE	1237:45	1237:45	8	{
STATEMENTS	1238:3	1249:3	8	
EXPR_STATEMENT	1238:3	1239:45	9	t2p -> pdf_xrefcount += ( t2p -> tiff_tiles [ i ] . tiles_tilecount - 1 ) * 2 ;
EXPR	1238:3	1238:3	10	t2p -> pdf_xrefcount += ( t2p -> tiff_tiles [ i ] . tiles_tilecount - 1 ) * 2
ASSIGN	1238:3	1239:4	11	t2p -> pdf_xrefcount += ( t2p -> tiff_tiles [ i ] . tiles_tilecount - 1 ) * 2
LVAL	1238:3	1238:3	12	t2p -> pdf_xrefcount
FIELD	1238:3	1238:8	13	t2p -> pdf_xrefcount
LEAF_NODE	1238:3	1238:3	14	t2p
LEAF_NODE	1238:6	1238:6	14	->
LEAF_NODE	1238:8	1238:8	14	pdf_xrefcount
ASSIGN_OP	1238:22	1238:22	12	+=
LEAF_NODE	1238:22	1238:22	13	+=
RVAL	1239:4	1239:44	12	( t2p -> tiff_tiles [ i ] . tiles_tilecount - 1 ) * 2
LEAF_NODE	1239:4	1239:4	13	(
FIELD	1239:5	1239:24	13	t2p -> tiff_tiles [ i ] . tiles_tilecount
LEAF_NODE	1239:5	1239:5	14	t2p
LEAF_NODE	1239:8	1239:8	14	->
LEAF_NODE	1239:10	1239:10	14	tiff_tiles
LEAF_NODE	1239:20	1239:20	14	[
EXPR	1239:21	1239:21	14	i
FIELD	1239:21	1239:21	15	i
LEAF_NODE	1239:21	1239:21	16	i
LEAF_NODE	1239:22	1239:22	14	]
LEAF_NODE	1239:23	1239:23	14	.
LEAF_NODE	1239:24	1239:24	14	tiles_tilecount
LEAF_NODE	1239:40	1239:40	13	-
FIELD	1239:41	1239:41	13	1
LEAF_NODE	1239:41	1239:41	14	1
LEAF_NODE	1239:42	1239:42	13	)
LEAF_NODE	1239:43	1239:43	13	*
FIELD	1239:44	1239:44	13	2
LEAF_NODE	1239:44	1239:44	14	2
LEAF_NODE	1239:45	1239:45	10	;
EXPR_STATEMENT	1240:3	1242:44	9	TIFFGetField ( input , TIFFTAG_TILEWIDTH , & ( t2p -> tiff_tiles [ i ] . tiles_tilewidth ) ) ;
EXPR	1240:3	1240:3	10	TIFFGetField ( input , TIFFTAG_TILEWIDTH , & ( t2p -> tiff_tiles [ i ] . tiles_tilewidth ) )
FUNCTION_CALL	1240:3	1242:43	11	TIFFGetField ( input , TIFFTAG_TILEWIDTH , & ( t2p -> tiff_tiles [ i ] . tiles_tilewidth ) )
CALLEE	1240:3	1240:3	12	TIFFGetField
LEAF_NODE	1240:3	1240:3	13	TIFFGetField
LEAF_NODE	1240:15	1240:15	12	(
ARGUMENT	1240:16	1240:16	12	input
FIELD	1240:16	1240:16	13	input
LEAF_NODE	1240:16	1240:16	14	input
LEAF_NODE	1240:21	1240:21	12	,
ARGUMENT	1241:4	1241:4	12	TIFFTAG_TILEWIDTH
FIELD	1241:4	1241:4	13	TIFFTAG_TILEWIDTH
LEAF_NODE	1241:4	1241:4	14	TIFFTAG_TILEWIDTH
LEAF_NODE	1241:21	1241:21	12	,
ARGUMENT	1242:4	1242:4	12	& ( t2p -> tiff_tiles [ i ] . tiles_tilewidth )
UNARY_EXPR	1242:4	1242:41	13	& ( t2p -> tiff_tiles [ i ] . tiles_tilewidth )
UNARY_OPERATOR	1242:4	1242:4	14	&
LEAF_NODE	1242:4	1242:4	15	&
LEAF_NODE	1242:5	1242:5	14	(
FIELD	1242:7	1242:26	14	t2p -> tiff_tiles [ i ] . tiles_tilewidth
LEAF_NODE	1242:7	1242:7	15	t2p
LEAF_NODE	1242:10	1242:10	15	->
LEAF_NODE	1242:12	1242:12	15	tiff_tiles
LEAF_NODE	1242:22	1242:22	15	[
EXPR	1242:23	1242:23	15	i
FIELD	1242:23	1242:23	16	i
LEAF_NODE	1242:23	1242:23	17	i
LEAF_NODE	1242:24	1242:24	15	]
LEAF_NODE	1242:25	1242:25	15	.
LEAF_NODE	1242:26	1242:26	15	tiles_tilewidth
LEAF_NODE	1242:41	1242:41	14	)
LEAF_NODE	1242:43	1242:43	12	)
LEAF_NODE	1242:44	1242:44	10	;
EXPR_STATEMENT	1243:3	1245:45	9	TIFFGetField ( input , TIFFTAG_TILELENGTH , & ( t2p -> tiff_tiles [ i ] . tiles_tilelength ) ) ;
EXPR	1243:3	1243:3	10	TIFFGetField ( input , TIFFTAG_TILELENGTH , & ( t2p -> tiff_tiles [ i ] . tiles_tilelength ) )
FUNCTION_CALL	1243:3	1245:44	11	TIFFGetField ( input , TIFFTAG_TILELENGTH , & ( t2p -> tiff_tiles [ i ] . tiles_tilelength ) )
CALLEE	1243:3	1243:3	12	TIFFGetField
LEAF_NODE	1243:3	1243:3	13	TIFFGetField
LEAF_NODE	1243:15	1243:15	12	(
ARGUMENT	1243:16	1243:16	12	input
FIELD	1243:16	1243:16	13	input
LEAF_NODE	1243:16	1243:16	14	input
LEAF_NODE	1243:21	1243:21	12	,
ARGUMENT	1244:4	1244:4	12	TIFFTAG_TILELENGTH
FIELD	1244:4	1244:4	13	TIFFTAG_TILELENGTH
LEAF_NODE	1244:4	1244:4	14	TIFFTAG_TILELENGTH
LEAF_NODE	1244:22	1244:22	12	,
ARGUMENT	1245:4	1245:4	12	& ( t2p -> tiff_tiles [ i ] . tiles_tilelength )
UNARY_EXPR	1245:4	1245:42	13	& ( t2p -> tiff_tiles [ i ] . tiles_tilelength )
UNARY_OPERATOR	1245:4	1245:4	14	&
LEAF_NODE	1245:4	1245:4	15	&
LEAF_NODE	1245:5	1245:5	14	(
FIELD	1245:7	1245:26	14	t2p -> tiff_tiles [ i ] . tiles_tilelength
LEAF_NODE	1245:7	1245:7	15	t2p
LEAF_NODE	1245:10	1245:10	15	->
LEAF_NODE	1245:12	1245:12	15	tiff_tiles
LEAF_NODE	1245:22	1245:22	15	[
EXPR	1245:23	1245:23	15	i
FIELD	1245:23	1245:23	16	i
LEAF_NODE	1245:23	1245:23	17	i
LEAF_NODE	1245:24	1245:24	15	]
LEAF_NODE	1245:25	1245:25	15	.
LEAF_NODE	1245:26	1245:26	15	tiles_tilelength
LEAF_NODE	1245:42	1245:42	14	)
LEAF_NODE	1245:44	1245:44	12	)
LEAF_NODE	1245:45	1245:45	10	;
EXPR_STATEMENT	1246:3	1248:84	9	t2p -> tiff_tiles [ i ] . tiles_tiles = ( T2P_TILE * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> tiff_tiles [ i ] . tiles_tilecount , sizeof ( T2P_TILE ) ) ) ;
EXPR	1246:3	1246:3	10	t2p -> tiff_tiles [ i ] . tiles_tiles = ( T2P_TILE * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> tiff_tiles [ i ] . tiles_tilecount , sizeof ( T2P_TILE ) ) )
ASSIGN	1246:3	1247:3	11	t2p -> tiff_tiles [ i ] . tiles_tiles = ( T2P_TILE * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> tiff_tiles [ i ] . tiles_tilecount , sizeof ( T2P_TILE ) ) )
LVAL	1246:3	1246:3	12	t2p -> tiff_tiles [ i ] . tiles_tiles
FIELD	1246:3	1246:22	13	t2p -> tiff_tiles [ i ] . tiles_tiles
LEAF_NODE	1246:3	1246:3	14	t2p
LEAF_NODE	1246:6	1246:6	14	->
LEAF_NODE	1246:8	1246:8	14	tiff_tiles
LEAF_NODE	1246:18	1246:18	14	[
EXPR	1246:19	1246:19	14	i
FIELD	1246:19	1246:19	15	i
LEAF_NODE	1246:19	1246:19	16	i
LEAF_NODE	1246:20	1246:20	14	]
LEAF_NODE	1246:21	1246:21	14	.
LEAF_NODE	1246:22	1246:22	14	tiles_tiles
ASSIGN_OP	1246:34	1246:34	12	=
LEAF_NODE	1246:34	1246:34	13	=
RVAL	1247:3	1247:15	12	( T2P_TILE * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> tiff_tiles [ i ] . tiles_tilecount , sizeof ( T2P_TILE ) ) )
LEAF_NODE	1247:3	1247:3	13	(
TYPE_NAME	1247:4	1247:4	13	T2P_TILE
LEAF_NODE	1247:4	1247:4	14	T2P_TILE
LEAF_NODE	1247:12	1247:12	13	*
LEAF_NODE	1247:13	1247:13	13	)
FUNCTION_CALL	1247:15	1248:83	13	_TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> tiff_tiles [ i ] . tiles_tilecount , sizeof ( T2P_TILE ) ) )
CALLEE	1247:15	1247:15	14	_TIFFmalloc
LEAF_NODE	1247:15	1247:15	15	_TIFFmalloc
LEAF_NODE	1247:26	1247:26	14	(
ARGUMENT	1247:27	1247:27	14	TIFFSafeMultiply ( tmsize_t , t2p -> tiff_tiles [ i ] . tiles_tilecount , sizeof ( T2P_TILE ) )
FUNCTION_CALL	1247:27	1248:81	15	TIFFSafeMultiply ( tmsize_t , t2p -> tiff_tiles [ i ] . tiles_tilecount , sizeof ( T2P_TILE ) )
CALLEE	1247:27	1247:27	16	TIFFSafeMultiply
LEAF_NODE	1247:27	1247:27	17	TIFFSafeMultiply
LEAF_NODE	1247:43	1247:43	16	(
ARGUMENT	1247:44	1247:44	16	tmsize_t
FIELD	1247:44	1247:44	17	tmsize_t
LEAF_NODE	1247:44	1247:44	18	tmsize_t
LEAF_NODE	1247:52	1247:52	16	,
ARGUMENT	1247:53	1247:53	16	t2p -> tiff_tiles [ i ] . tiles_tilecount
FIELD	1247:53	1247:72	17	t2p -> tiff_tiles [ i ] . tiles_tilecount
LEAF_NODE	1247:53	1247:53	18	t2p
LEAF_NODE	1247:56	1247:56	18	->
LEAF_NODE	1247:58	1247:58	18	tiff_tiles
LEAF_NODE	1247:68	1247:68	18	[
EXPR	1247:69	1247:69	18	i
FIELD	1247:69	1247:69	19	i
LEAF_NODE	1247:69	1247:69	20	i
LEAF_NODE	1247:70	1247:70	18	]
LEAF_NODE	1247:71	1247:71	18	.
LEAF_NODE	1247:72	1247:72	18	tiles_tilecount
LEAF_NODE	1247:87	1247:87	16	,
ARGUMENT	1248:65	1248:65	16	sizeof ( T2P_TILE )
FUNCTION_CALL	1248:65	1248:80	17	sizeof ( T2P_TILE )
CALLEE	1248:65	1248:65	18	sizeof
LEAF_NODE	1248:65	1248:65	19	sizeof
LEAF_NODE	1248:71	1248:71	18	(
ARGUMENT	1248:72	1248:72	18	T2P_TILE
FIELD	1248:72	1248:72	19	T2P_TILE
LEAF_NODE	1248:72	1248:72	20	T2P_TILE
LEAF_NODE	1248:80	1248:80	18	)
LEAF_NODE	1248:81	1248:81	16	)
LEAF_NODE	1248:83	1248:83	14	)
LEAF_NODE	1248:84	1248:84	10	;
SELECTION	1249:3	1249:46	9	
KEYWORD	1249:3	1249:3	10	if
LEAF_NODE	1249:3	1249:3	11	if
LEAF_NODE	1249:5	1249:5	10	(
CONDITION	1249:7	1249:7	10	t2p -> tiff_tiles [ i ] . tiles_tiles == NULL
EXPR	1249:7	1249:41	11	t2p -> tiff_tiles [ i ] . tiles_tiles == NULL
FIELD	1249:7	1249:26	12	t2p -> tiff_tiles [ i ] . tiles_tiles
LEAF_NODE	1249:7	1249:7	13	t2p
LEAF_NODE	1249:10	1249:10	13	->
LEAF_NODE	1249:12	1249:12	13	tiff_tiles
LEAF_NODE	1249:22	1249:22	13	[
EXPR	1249:23	1249:23	13	i
FIELD	1249:23	1249:23	14	i
LEAF_NODE	1249:23	1249:23	15	i
LEAF_NODE	1249:24	1249:24	13	]
LEAF_NODE	1249:25	1249:25	13	.
LEAF_NODE	1249:26	1249:26	13	tiles_tiles
EQ_OPERATOR	1249:38	1249:38	12	==
LEAF_NODE	1249:38	1249:38	13	==
FIELD	1249:41	1249:41	12	NULL
LEAF_NODE	1249:41	1249:41	13	NULL
LEAF_NODE	1249:45	1249:45	10	)
STATEMENTS	1249:46	1257:3	10	
LEAF_NODE	1249:46	1249:46	11	{
STATEMENTS	1250:4	1256:4	11	
LEAF_NODE	1250:4	1250:4	12	TIFFError
LEAF_NODE	1250:13	1250:13	12	(
LEAF_NODE	1251:5	1251:5	12	TIFF2PDF_MODULE
LEAF_NODE	1251:20	1251:20	12	,
LEAF_NODE	1252:5	1252:5	12	"Can't allocate "
LEAF_NODE	1252:23	1252:23	12	TIFF_SIZE_FORMAT
LEAF_NODE	1252:40	1252:40	12	" bytes of memory for t2p_read_tiff_init, %s"
LEAF_NODE	1252:85	1252:85	12	,
LEAF_NODE	1253:5	1253:5	12	(
LEAF_NODE	1253:6	1253:6	12	TIFF_SIZE_T
LEAF_NODE	1253:17	1253:17	12	)
LEAF_NODE	1253:19	1253:19	12	t2p
LEAF_NODE	1253:22	1253:22	12	->
LEAF_NODE	1253:24	1253:24	12	tiff_tiles
LEAF_NODE	1253:34	1253:34	12	[
LEAF_NODE	1253:35	1253:35	12	i
LEAF_NODE	1253:36	1253:36	12	]
LEAF_NODE	1253:37	1253:37	12	.
LEAF_NODE	1253:38	1253:38	12	tiles_tilecount
LEAF_NODE	1253:54	1253:54	12	*
LEAF_NODE	1253:56	1253:56	12	sizeof
LEAF_NODE	1253:62	1253:62	12	(
LEAF_NODE	1253:63	1253:63	12	T2P_TILE
LEAF_NODE	1253:71	1253:71	12	)
LEAF_NODE	1253:72	1253:72	12	,
LEAF_NODE	1254:5	1254:5	12	TIFFFileName
LEAF_NODE	1254:17	1254:17	12	(
LEAF_NODE	1254:18	1254:18	12	input
LEAF_NODE	1254:23	1254:23	12	)
LEAF_NODE	1254:24	1254:24	12	)
LEAF_NODE	1254:25	1254:25	12	;
EXPR_STATEMENT	1255:4	1255:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1255:4	1255:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1255:4	1255:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1255:4	1255:4	15	t2p -> t2p_error
FIELD	1255:4	1255:9	16	t2p -> t2p_error
LEAF_NODE	1255:4	1255:4	17	t2p
LEAF_NODE	1255:7	1255:7	17	->
LEAF_NODE	1255:9	1255:9	17	t2p_error
ASSIGN_OP	1255:19	1255:19	15	=
LEAF_NODE	1255:19	1255:19	16	=
RVAL	1255:21	1255:21	15	T2P_ERR_ERROR
FIELD	1255:21	1255:21	16	T2P_ERR_ERROR
LEAF_NODE	1255:21	1255:21	17	T2P_ERR_ERROR
LEAF_NODE	1255:34	1255:34	13	;
JUMP_STATEMENT	1256:4	1256:10	12	return DESTINATION ;
KEYWORD	1256:4	1256:4	13	return
LEAF_NODE	1256:4	1256:4	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1256:10	1256:10	13	;
LEAF_NODE	1257:3	1257:3	11	}
LEAF_NODE	1258:2	1258:2	8	}
LEAF_NODE	1259:1	1259:1	5	}
JUMP_STATEMENT	1261:1	1261:7	3	return DESTINATION ;
KEYWORD	1261:1	1261:1	4	return
LEAF_NODE	1261:1	1261:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	1261:7	1261:7	4	;
LEAF_NODE	1262:0	1262:0	2	}
FUNCTION_DEF	1270:0	1278:0	1	
RETURN_TYPE	1270:0	1270:0	2	int
TYPE_NAME	1270:0	1270:0	3	int
LEAF_NODE	1270:0	1270:0	4	int
FUNCTION_NAME	1270:4	1270:4	2	t2p_cmp_t2p_page
LEAF_NODE	1270:4	1270:4	3	t2p_cmp_t2p_page
PARAMETER_LIST	1270:20	1270:51	2	( const void * e1 , const void * e2 )
LEAF_NODE	1270:20	1270:20	3	(
PARAMETER_DECL	1270:21	1270:33	3	const void * e1
TYPE	1270:21	1270:31	4	const void *
TYPE_NAME	1270:21	1270:27	5	const void
LEAF_NODE	1270:21	1270:21	6	const
LEAF_NODE	1270:27	1270:27	6	void
POINTER	1270:31	1270:31	5	*
LEAF_NODE	1270:31	1270:31	6	*
NAME	1270:33	1270:33	4	e1
LEAF_NODE	1270:33	1270:33	5	e1
LEAF_NODE	1270:35	1270:35	3	,
PARAMETER_DECL	1270:37	1270:49	3	const void * e2
TYPE	1270:37	1270:47	4	const void *
TYPE_NAME	1270:37	1270:43	5	const void
LEAF_NODE	1270:37	1270:37	6	const
LEAF_NODE	1270:43	1270:43	6	void
POINTER	1270:47	1270:47	5	*
LEAF_NODE	1270:47	1270:47	6	*
NAME	1270:49	1270:49	4	e2
LEAF_NODE	1270:49	1270:49	5	e2
LEAF_NODE	1270:51	1270:51	3	)
LEAF_NODE	1270:52	1270:52	2	{
STATEMENTS	1272:1	1277:1	2	
SIMPLE_DECL	1272:1	1272:6	3	int d ;
VAR_DECL	1272:1	1272:5	4	int d
TYPE	1272:1	1272:1	5	int
TYPE_NAME	1272:1	1272:1	6	int
LEAF_NODE	1272:1	1272:1	7	int
NAME	1272:5	1272:5	5	d
LEAF_NODE	1272:5	1272:5	6	d
LEAF_NODE	1272:6	1272:6	4	;
EXPR_STATEMENT	1273:1	1273:82	3	d = ( int32 ) ( ( ( T2P_PAGE * ) e1 ) -> page_number ) - ( int32 ) ( ( ( T2P_PAGE * ) e2 ) -> page_number ) ;
EXPR	1273:1	1273:1	4	d = ( int32 ) ( ( ( T2P_PAGE * ) e1 ) -> page_number ) - ( int32 ) ( ( ( T2P_PAGE * ) e2 ) -> page_number )
ASSIGN	1273:1	1273:5	5	d = ( int32 ) ( ( ( T2P_PAGE * ) e1 ) -> page_number ) - ( int32 ) ( ( ( T2P_PAGE * ) e2 ) -> page_number )
LVAL	1273:1	1273:1	6	d
FIELD	1273:1	1273:1	7	d
LEAF_NODE	1273:1	1273:1	8	d
ASSIGN_OP	1273:3	1273:3	6	=
LEAF_NODE	1273:3	1273:3	7	=
RVAL	1273:5	1273:81	6	( int32 ) ( ( ( T2P_PAGE * ) e1 ) -> page_number ) - ( int32 ) ( ( ( T2P_PAGE * ) e2 ) -> page_number )
LEAF_NODE	1273:5	1273:5	7	(
TYPE_NAME	1273:6	1273:6	7	int32
LEAF_NODE	1273:6	1273:6	8	int32
LEAF_NODE	1273:11	1273:11	7	)
LEAF_NODE	1273:12	1273:12	7	(
LEAF_NODE	1273:13	1273:13	7	(
LEAF_NODE	1273:14	1273:14	7	(
TYPE_NAME	1273:15	1273:15	7	T2P_PAGE
LEAF_NODE	1273:15	1273:15	8	T2P_PAGE
LEAF_NODE	1273:23	1273:23	7	*
LEAF_NODE	1273:24	1273:24	7	)
FIELD	1273:25	1273:25	7	e1
LEAF_NODE	1273:25	1273:25	8	e1
LEAF_NODE	1273:27	1273:27	7	)
LEAF_NODE	1273:28	1273:28	7	->
LEAF_NODE	1273:30	1273:30	7	page_number
LEAF_NODE	1273:41	1273:41	7	)
LEAF_NODE	1273:43	1273:43	7	-
LEAF_NODE	1273:45	1273:45	7	(
TYPE_NAME	1273:46	1273:46	7	int32
LEAF_NODE	1273:46	1273:46	8	int32
LEAF_NODE	1273:51	1273:51	7	)
LEAF_NODE	1273:52	1273:52	7	(
LEAF_NODE	1273:53	1273:53	7	(
LEAF_NODE	1273:54	1273:54	7	(
TYPE_NAME	1273:55	1273:55	7	T2P_PAGE
LEAF_NODE	1273:55	1273:55	8	T2P_PAGE
LEAF_NODE	1273:63	1273:63	7	*
LEAF_NODE	1273:64	1273:64	7	)
FIELD	1273:65	1273:65	7	e2
LEAF_NODE	1273:65	1273:65	8	e2
LEAF_NODE	1273:67	1273:67	7	)
LEAF_NODE	1273:68	1273:68	7	->
LEAF_NODE	1273:70	1273:70	7	page_number
LEAF_NODE	1273:81	1273:81	7	)
LEAF_NODE	1273:82	1273:82	4	;
SELECTION	1274:1	1274:11	3	
KEYWORD	1274:1	1274:1	4	if
LEAF_NODE	1274:1	1274:1	5	if
LEAF_NODE	1274:3	1274:3	4	(
CONDITION	1274:4	1274:4	4	d == 0
EXPR	1274:4	1274:9	5	d == 0
FIELD	1274:4	1274:4	6	d
LEAF_NODE	1274:4	1274:4	7	d
EQ_OPERATOR	1274:6	1274:6	6	==
LEAF_NODE	1274:6	1274:6	7	==
FIELD	1274:9	1274:9	6	0
LEAF_NODE	1274:9	1274:9	7	0
LEAF_NODE	1274:10	1274:10	4	)
STATEMENTS	1274:11	1276:1	4	
LEAF_NODE	1274:11	1274:11	5	{
STATEMENTS	1275:2	1275:2	5	
EXPR_STATEMENT	1275:2	1275:89	6	d = ( int32 ) ( ( ( T2P_PAGE * ) e1 ) -> page_directory ) - ( int32 ) ( ( ( T2P_PAGE * ) e2 ) -> page_directory ) ;
EXPR	1275:2	1275:2	7	d = ( int32 ) ( ( ( T2P_PAGE * ) e1 ) -> page_directory ) - ( int32 ) ( ( ( T2P_PAGE * ) e2 ) -> page_directory )
ASSIGN	1275:2	1275:6	8	d = ( int32 ) ( ( ( T2P_PAGE * ) e1 ) -> page_directory ) - ( int32 ) ( ( ( T2P_PAGE * ) e2 ) -> page_directory )
LVAL	1275:2	1275:2	9	d
FIELD	1275:2	1275:2	10	d
LEAF_NODE	1275:2	1275:2	11	d
ASSIGN_OP	1275:4	1275:4	9	=
LEAF_NODE	1275:4	1275:4	10	=
RVAL	1275:6	1275:88	9	( int32 ) ( ( ( T2P_PAGE * ) e1 ) -> page_directory ) - ( int32 ) ( ( ( T2P_PAGE * ) e2 ) -> page_directory )
LEAF_NODE	1275:6	1275:6	10	(
TYPE_NAME	1275:7	1275:7	10	int32
LEAF_NODE	1275:7	1275:7	11	int32
LEAF_NODE	1275:12	1275:12	10	)
LEAF_NODE	1275:13	1275:13	10	(
LEAF_NODE	1275:14	1275:14	10	(
LEAF_NODE	1275:15	1275:15	10	(
TYPE_NAME	1275:16	1275:16	10	T2P_PAGE
LEAF_NODE	1275:16	1275:16	11	T2P_PAGE
LEAF_NODE	1275:24	1275:24	10	*
LEAF_NODE	1275:25	1275:25	10	)
FIELD	1275:26	1275:26	10	e1
LEAF_NODE	1275:26	1275:26	11	e1
LEAF_NODE	1275:28	1275:28	10	)
LEAF_NODE	1275:29	1275:29	10	->
LEAF_NODE	1275:31	1275:31	10	page_directory
LEAF_NODE	1275:45	1275:45	10	)
LEAF_NODE	1275:47	1275:47	10	-
LEAF_NODE	1275:49	1275:49	10	(
TYPE_NAME	1275:50	1275:50	10	int32
LEAF_NODE	1275:50	1275:50	11	int32
LEAF_NODE	1275:55	1275:55	10	)
LEAF_NODE	1275:56	1275:56	10	(
LEAF_NODE	1275:57	1275:57	10	(
LEAF_NODE	1275:58	1275:58	10	(
TYPE_NAME	1275:59	1275:59	10	T2P_PAGE
LEAF_NODE	1275:59	1275:59	11	T2P_PAGE
LEAF_NODE	1275:67	1275:67	10	*
LEAF_NODE	1275:68	1275:68	10	)
FIELD	1275:69	1275:69	10	e2
LEAF_NODE	1275:69	1275:69	11	e2
LEAF_NODE	1275:71	1275:71	10	)
LEAF_NODE	1275:72	1275:72	10	->
LEAF_NODE	1275:74	1275:74	10	page_directory
LEAF_NODE	1275:88	1275:88	10	)
LEAF_NODE	1275:89	1275:89	7	;
LEAF_NODE	1276:1	1276:1	5	}
JUMP_STATEMENT	1277:1	1277:9	3	return d ;
KEYWORD	1277:1	1277:1	4	return
LEAF_NODE	1277:1	1277:1	5	return
DESTINATION	1277:8	1277:8	4	d
EXPR	1277:8	1277:8	5	d
FIELD	1277:8	1277:8	6	d
LEAF_NODE	1277:8	1277:8	7	d
LEAF_NODE	1277:9	1277:9	4	;
LEAF_NODE	1278:0	1278:0	2	}
FUNCTION_DEF	1292:0	1937:0	1	
RETURN_TYPE	1292:0	1292:0	2	void
TYPE_NAME	1292:0	1292:0	3	void
LEAF_NODE	1292:0	1292:0	4	void
FUNCTION_NAME	1292:5	1292:5	2	t2p_read_tiff_data
LEAF_NODE	1292:5	1292:5	3	t2p_read_tiff_data
PARAMETER_LIST	1292:23	1292:45	2	( T2P * t2p , TIFF * input )
LEAF_NODE	1292:23	1292:23	3	(
PARAMETER_DECL	1292:24	1292:29	3	T2P * t2p
TYPE	1292:24	1292:27	4	T2P *
TYPE_NAME	1292:24	1292:24	5	T2P
LEAF_NODE	1292:24	1292:24	6	T2P
POINTER	1292:27	1292:27	5	*
LEAF_NODE	1292:27	1292:27	6	*
NAME	1292:29	1292:29	4	t2p
LEAF_NODE	1292:29	1292:29	5	t2p
LEAF_NODE	1292:32	1292:32	3	,
PARAMETER_DECL	1292:34	1292:40	3	TIFF * input
TYPE	1292:34	1292:38	4	TIFF *
TYPE_NAME	1292:34	1292:34	5	TIFF
LEAF_NODE	1292:34	1292:34	6	TIFF
POINTER	1292:38	1292:38	5	*
LEAF_NODE	1292:38	1292:38	6	*
NAME	1292:40	1292:40	4	input
LEAF_NODE	1292:40	1292:40	5	input
LEAF_NODE	1292:45	1292:45	3	)
LEAF_NODE	1292:46	1292:46	2	{
STATEMENTS	1294:1	1936:1	2	
SIMPLE_DECL	1294:1	1294:8	3	int i ; i = 0 ;
VAR_DECL	1294:1	1294:5	4	int i ; i = 0
TYPE	1294:1	1294:1	5	int
TYPE_NAME	1294:1	1294:1	6	int
LEAF_NODE	1294:1	1294:1	7	int
NAME	1294:5	1294:5	5	i
LEAF_NODE	1294:5	1294:5	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	1294:5	1294:5	5	i = 0
ASSIGN	1294:5	1294:7	6	i = 0
LVAL	1294:5	1294:5	7	i
NAME	1294:5	1294:5	8	i
LEAF_NODE	1294:5	1294:5	9	i
ASSIGN_OP	1294:6	1294:6	7	=
LEAF_NODE	1294:6	1294:6	8	=
RVAL	1294:7	1294:7	7	0
FIELD	1294:7	1294:7	8	0
LEAF_NODE	1294:7	1294:7	9	0
LEAF_NODE	1294:8	1294:8	4	;
SIMPLE_DECL	1295:1	1295:17	3	uint16 * r ; r = NULL ;
VAR_DECL	1295:1	1295:9	4	uint16 * r ; r = NULL
TYPE	1295:1	1295:7	5	uint16 *
TYPE_NAME	1295:1	1295:1	6	uint16
LEAF_NODE	1295:1	1295:1	7	uint16
POINTER	1295:7	1295:7	6	*
LEAF_NODE	1295:7	1295:7	7	*
NAME	1295:9	1295:9	5	r
LEAF_NODE	1295:9	1295:9	6	r
LEAF_NODE	0:0	0:0	5	;
INIT	1295:9	1295:9	5	r = NULL
ASSIGN	1295:9	1295:13	6	r = NULL
LVAL	1295:9	1295:9	7	r
NAME	1295:9	1295:9	8	r
LEAF_NODE	1295:9	1295:9	9	r
ASSIGN_OP	1295:11	1295:11	7	=
LEAF_NODE	1295:11	1295:11	8	=
RVAL	1295:13	1295:13	7	NULL
FIELD	1295:13	1295:13	8	NULL
LEAF_NODE	1295:13	1295:13	9	NULL
LEAF_NODE	1295:17	1295:17	4	;
SIMPLE_DECL	1296:1	1296:17	3	uint16 * g ; g = NULL ;
VAR_DECL	1296:1	1296:9	4	uint16 * g ; g = NULL
TYPE	1296:1	1296:7	5	uint16 *
TYPE_NAME	1296:1	1296:1	6	uint16
LEAF_NODE	1296:1	1296:1	7	uint16
POINTER	1296:7	1296:7	6	*
LEAF_NODE	1296:7	1296:7	7	*
NAME	1296:9	1296:9	5	g
LEAF_NODE	1296:9	1296:9	6	g
LEAF_NODE	0:0	0:0	5	;
INIT	1296:9	1296:9	5	g = NULL
ASSIGN	1296:9	1296:13	6	g = NULL
LVAL	1296:9	1296:9	7	g
NAME	1296:9	1296:9	8	g
LEAF_NODE	1296:9	1296:9	9	g
ASSIGN_OP	1296:11	1296:11	7	=
LEAF_NODE	1296:11	1296:11	8	=
RVAL	1296:13	1296:13	7	NULL
FIELD	1296:13	1296:13	8	NULL
LEAF_NODE	1296:13	1296:13	9	NULL
LEAF_NODE	1296:17	1296:17	4	;
SIMPLE_DECL	1297:1	1297:17	3	uint16 * b ; b = NULL ;
VAR_DECL	1297:1	1297:9	4	uint16 * b ; b = NULL
TYPE	1297:1	1297:7	5	uint16 *
TYPE_NAME	1297:1	1297:1	6	uint16
LEAF_NODE	1297:1	1297:1	7	uint16
POINTER	1297:7	1297:7	6	*
LEAF_NODE	1297:7	1297:7	7	*
NAME	1297:9	1297:9	5	b
LEAF_NODE	1297:9	1297:9	6	b
LEAF_NODE	0:0	0:0	5	;
INIT	1297:9	1297:9	5	b = NULL
ASSIGN	1297:9	1297:13	6	b = NULL
LVAL	1297:9	1297:9	7	b
NAME	1297:9	1297:9	8	b
LEAF_NODE	1297:9	1297:9	9	b
ASSIGN_OP	1297:11	1297:11	7	=
LEAF_NODE	1297:11	1297:11	8	=
RVAL	1297:13	1297:13	7	NULL
FIELD	1297:13	1297:13	8	NULL
LEAF_NODE	1297:13	1297:13	9	NULL
LEAF_NODE	1297:17	1297:17	4	;
SIMPLE_DECL	1298:1	1298:17	3	uint16 * a ; a = NULL ;
VAR_DECL	1298:1	1298:9	4	uint16 * a ; a = NULL
TYPE	1298:1	1298:7	5	uint16 *
TYPE_NAME	1298:1	1298:1	6	uint16
LEAF_NODE	1298:1	1298:1	7	uint16
POINTER	1298:7	1298:7	6	*
LEAF_NODE	1298:7	1298:7	7	*
NAME	1298:9	1298:9	5	a
LEAF_NODE	1298:9	1298:9	6	a
LEAF_NODE	0:0	0:0	5	;
INIT	1298:9	1298:9	5	a = NULL
ASSIGN	1298:9	1298:13	6	a = NULL
LVAL	1298:9	1298:9	7	a
NAME	1298:9	1298:9	8	a
LEAF_NODE	1298:9	1298:9	9	a
ASSIGN_OP	1298:11	1298:11	7	=
LEAF_NODE	1298:11	1298:11	8	=
RVAL	1298:13	1298:13	7	NULL
FIELD	1298:13	1298:13	8	NULL
LEAF_NODE	1298:13	1298:13	9	NULL
LEAF_NODE	1298:17	1298:17	4	;
SIMPLE_DECL	1299:1	1299:15	3	uint16 xuint16 ;
VAR_DECL	1299:1	1299:8	4	uint16 xuint16
TYPE	1299:1	1299:1	5	uint16
TYPE_NAME	1299:1	1299:1	6	uint16
LEAF_NODE	1299:1	1299:1	7	uint16
NAME	1299:8	1299:8	5	xuint16
LEAF_NODE	1299:8	1299:8	6	xuint16
LEAF_NODE	1299:15	1299:15	4	;
SIMPLE_DECL	1300:1	1300:17	3	uint16 * xuint16p ;
VAR_DECL	1300:1	1300:9	4	uint16 * xuint16p
TYPE	1300:1	1300:7	5	uint16 *
TYPE_NAME	1300:1	1300:1	6	uint16
LEAF_NODE	1300:1	1300:1	7	uint16
POINTER	1300:7	1300:7	6	*
LEAF_NODE	1300:7	1300:7	7	*
NAME	1300:9	1300:9	5	xuint16p
LEAF_NODE	1300:9	1300:9	6	xuint16p
LEAF_NODE	1300:17	1300:17	4	;
SIMPLE_DECL	1301:1	1301:15	3	float * xfloatp ;
VAR_DECL	1301:1	1301:8	4	float * xfloatp
TYPE	1301:1	1301:6	5	float *
TYPE_NAME	1301:1	1301:1	6	float
LEAF_NODE	1301:1	1301:1	7	float
POINTER	1301:6	1301:6	6	*
LEAF_NODE	1301:6	1301:6	7	*
NAME	1301:8	1301:8	5	xfloatp
LEAF_NODE	1301:8	1301:8	6	xfloatp
LEAF_NODE	1301:15	1301:15	4	;
EXPR_STATEMENT	1303:1	1303:42	3	t2p -> pdf_transcode = T2P_TRANSCODE_ENCODE ;
EXPR	1303:1	1303:1	4	t2p -> pdf_transcode = T2P_TRANSCODE_ENCODE
ASSIGN	1303:1	1303:22	5	t2p -> pdf_transcode = T2P_TRANSCODE_ENCODE
LVAL	1303:1	1303:1	6	t2p -> pdf_transcode
FIELD	1303:1	1303:6	7	t2p -> pdf_transcode
LEAF_NODE	1303:1	1303:1	8	t2p
LEAF_NODE	1303:4	1303:4	8	->
LEAF_NODE	1303:6	1303:6	8	pdf_transcode
ASSIGN_OP	1303:20	1303:20	6	=
LEAF_NODE	1303:20	1303:20	7	=
RVAL	1303:22	1303:22	6	T2P_TRANSCODE_ENCODE
FIELD	1303:22	1303:22	7	T2P_TRANSCODE_ENCODE
LEAF_NODE	1303:22	1303:22	8	T2P_TRANSCODE_ENCODE
LEAF_NODE	1303:42	1303:42	4	;
EXPR_STATEMENT	1304:1	1304:37	3	t2p -> pdf_sample = T2P_SAMPLE_NOTHING ;
EXPR	1304:1	1304:1	4	t2p -> pdf_sample = T2P_SAMPLE_NOTHING
ASSIGN	1304:1	1304:19	5	t2p -> pdf_sample = T2P_SAMPLE_NOTHING
LVAL	1304:1	1304:1	6	t2p -> pdf_sample
FIELD	1304:1	1304:6	7	t2p -> pdf_sample
LEAF_NODE	1304:1	1304:1	8	t2p
LEAF_NODE	1304:4	1304:4	8	->
LEAF_NODE	1304:6	1304:6	8	pdf_sample
ASSIGN_OP	1304:17	1304:17	6	=
LEAF_NODE	1304:17	1304:17	7	=
RVAL	1304:19	1304:19	6	T2P_SAMPLE_NOTHING
FIELD	1304:19	1304:19	7	T2P_SAMPLE_NOTHING
LEAF_NODE	1304:19	1304:19	8	T2P_SAMPLE_NOTHING
LEAF_NODE	1304:37	1304:37	4	;
EXPR_STATEMENT	1305:8	1305:58	3	t2p -> pdf_switchdecode = t2p -> pdf_colorspace_invert ;
EXPR	1305:8	1305:8	4	t2p -> pdf_switchdecode = t2p -> pdf_colorspace_invert
ASSIGN	1305:8	1305:32	5	t2p -> pdf_switchdecode = t2p -> pdf_colorspace_invert
LVAL	1305:8	1305:8	6	t2p -> pdf_switchdecode
FIELD	1305:8	1305:13	7	t2p -> pdf_switchdecode
LEAF_NODE	1305:8	1305:8	8	t2p
LEAF_NODE	1305:11	1305:11	8	->
LEAF_NODE	1305:13	1305:13	8	pdf_switchdecode
ASSIGN_OP	1305:30	1305:30	6	=
LEAF_NODE	1305:30	1305:30	7	=
RVAL	1305:32	1305:32	6	t2p -> pdf_colorspace_invert
FIELD	1305:32	1305:37	7	t2p -> pdf_colorspace_invert
LEAF_NODE	1305:32	1305:32	8	t2p
LEAF_NODE	1305:35	1305:35	8	->
LEAF_NODE	1305:37	1305:37	8	pdf_colorspace_invert
LEAF_NODE	1305:58	1305:58	4	;
EXPR_STATEMENT	1308:1	1308:71	3	TIFFSetDirectory ( input , t2p -> tiff_pages [ t2p -> pdf_page ] . page_directory ) ;
EXPR	1308:1	1308:1	4	TIFFSetDirectory ( input , t2p -> tiff_pages [ t2p -> pdf_page ] . page_directory )
FUNCTION_CALL	1308:1	1308:70	5	TIFFSetDirectory ( input , t2p -> tiff_pages [ t2p -> pdf_page ] . page_directory )
CALLEE	1308:1	1308:1	6	TIFFSetDirectory
LEAF_NODE	1308:1	1308:1	7	TIFFSetDirectory
LEAF_NODE	1308:17	1308:17	6	(
ARGUMENT	1308:18	1308:18	6	input
FIELD	1308:18	1308:18	7	input
LEAF_NODE	1308:18	1308:18	8	input
LEAF_NODE	1308:23	1308:23	6	,
ARGUMENT	1308:25	1308:25	6	t2p -> tiff_pages [ t2p -> pdf_page ] . page_directory
FIELD	1308:25	1308:56	7	t2p -> tiff_pages [ t2p -> pdf_page ] . page_directory
LEAF_NODE	1308:25	1308:25	8	t2p
LEAF_NODE	1308:28	1308:28	8	->
LEAF_NODE	1308:30	1308:30	8	tiff_pages
LEAF_NODE	1308:40	1308:40	8	[
EXPR	1308:41	1308:41	8	t2p -> pdf_page
FIELD	1308:41	1308:46	9	t2p -> pdf_page
LEAF_NODE	1308:41	1308:41	10	t2p
LEAF_NODE	1308:44	1308:44	10	->
LEAF_NODE	1308:46	1308:46	10	pdf_page
LEAF_NODE	1308:54	1308:54	8	]
LEAF_NODE	1308:55	1308:55	8	.
LEAF_NODE	1308:56	1308:56	8	page_directory
LEAF_NODE	1308:70	1308:70	6	)
LEAF_NODE	1308:71	1308:71	4	;
EXPR_STATEMENT	1310:1	1310:60	3	TIFFGetField ( input , TIFFTAG_IMAGEWIDTH , & ( t2p -> tiff_width ) ) ;
EXPR	1310:1	1310:1	4	TIFFGetField ( input , TIFFTAG_IMAGEWIDTH , & ( t2p -> tiff_width ) )
FUNCTION_CALL	1310:1	1310:59	5	TIFFGetField ( input , TIFFTAG_IMAGEWIDTH , & ( t2p -> tiff_width ) )
CALLEE	1310:1	1310:1	6	TIFFGetField
LEAF_NODE	1310:1	1310:1	7	TIFFGetField
LEAF_NODE	1310:13	1310:13	6	(
ARGUMENT	1310:14	1310:14	6	input
FIELD	1310:14	1310:14	7	input
LEAF_NODE	1310:14	1310:14	8	input
LEAF_NODE	1310:19	1310:19	6	,
ARGUMENT	1310:21	1310:21	6	TIFFTAG_IMAGEWIDTH
FIELD	1310:21	1310:21	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	1310:21	1310:21	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	1310:39	1310:39	6	,
ARGUMENT	1310:41	1310:41	6	& ( t2p -> tiff_width )
UNARY_EXPR	1310:41	1310:58	7	& ( t2p -> tiff_width )
UNARY_OPERATOR	1310:41	1310:41	8	&
LEAF_NODE	1310:41	1310:41	9	&
LEAF_NODE	1310:42	1310:42	8	(
FIELD	1310:43	1310:48	8	t2p -> tiff_width
LEAF_NODE	1310:43	1310:43	9	t2p
LEAF_NODE	1310:46	1310:46	9	->
LEAF_NODE	1310:48	1310:48	9	tiff_width
LEAF_NODE	1310:58	1310:58	8	)
LEAF_NODE	1310:59	1310:59	6	)
LEAF_NODE	1310:60	1310:60	4	;
SELECTION	1311:1	1311:25	3	
KEYWORD	1311:1	1311:1	4	if
LEAF_NODE	1311:1	1311:1	5	if
LEAF_NODE	1311:3	1311:3	4	(
CONDITION	1311:4	1311:4	4	t2p -> tiff_width == 0
EXPR	1311:4	1311:23	5	t2p -> tiff_width == 0
FIELD	1311:4	1311:9	6	t2p -> tiff_width
LEAF_NODE	1311:4	1311:4	7	t2p
LEAF_NODE	1311:7	1311:7	7	->
LEAF_NODE	1311:9	1311:9	7	tiff_width
EQ_OPERATOR	1311:20	1311:20	6	==
LEAF_NODE	1311:20	1311:20	7	==
FIELD	1311:23	1311:23	6	0
LEAF_NODE	1311:23	1311:23	7	0
LEAF_NODE	1311:24	1311:24	4	)
STATEMENTS	1311:25	1318:1	4	
LEAF_NODE	1311:25	1311:25	5	{
STATEMENTS	1312:2	1317:2	5	
EXPR_STATEMENT	1312:2	1315:24	6	TIFFError ( TIFF2PDF_MODULE , "No support for %s with zero width" , TIFFFileName ( input ) ) ;
EXPR	1312:2	1312:2	7	TIFFError ( TIFF2PDF_MODULE , "No support for %s with zero width" , TIFFFileName ( input ) )
FUNCTION_CALL	1312:2	1315:23	8	TIFFError ( TIFF2PDF_MODULE , "No support for %s with zero width" , TIFFFileName ( input ) )
CALLEE	1312:2	1312:2	9	TIFFError
LEAF_NODE	1312:2	1312:2	10	TIFFError
LEAF_NODE	1312:11	1312:11	9	(
ARGUMENT	1313:3	1313:3	9	TIFF2PDF_MODULE
FIELD	1313:3	1313:3	10	TIFF2PDF_MODULE
LEAF_NODE	1313:3	1313:3	11	TIFF2PDF_MODULE
LEAF_NODE	1313:18	1313:18	9	,
ARGUMENT	1314:3	1314:3	9	"No support for %s with zero width"
FIELD	1314:3	1314:3	10	"No support for %s with zero width"
LEAF_NODE	1314:3	1314:3	11	"No support for %s with zero width"
LEAF_NODE	1314:38	1314:38	9	,
ARGUMENT	1315:3	1315:3	9	TIFFFileName ( input )
FUNCTION_CALL	1315:3	1315:21	10	TIFFFileName ( input )
CALLEE	1315:3	1315:3	11	TIFFFileName
LEAF_NODE	1315:3	1315:3	12	TIFFFileName
LEAF_NODE	1315:15	1315:15	11	(
ARGUMENT	1315:16	1315:16	11	input
FIELD	1315:16	1315:16	12	input
LEAF_NODE	1315:16	1315:16	13	input
LEAF_NODE	1315:21	1315:21	11	)
LEAF_NODE	1315:23	1315:23	9	)
LEAF_NODE	1315:24	1315:24	7	;
EXPR_STATEMENT	1316:2	1316:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1316:2	1316:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1316:2	1316:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1316:2	1316:2	9	t2p -> t2p_error
FIELD	1316:2	1316:7	10	t2p -> t2p_error
LEAF_NODE	1316:2	1316:2	11	t2p
LEAF_NODE	1316:5	1316:5	11	->
LEAF_NODE	1316:7	1316:7	11	t2p_error
ASSIGN_OP	1316:17	1316:17	9	=
LEAF_NODE	1316:17	1316:17	10	=
RVAL	1316:19	1316:19	9	T2P_ERR_ERROR
FIELD	1316:19	1316:19	10	T2P_ERR_ERROR
LEAF_NODE	1316:19	1316:19	11	T2P_ERR_ERROR
LEAF_NODE	1316:32	1316:32	7	;
JUMP_STATEMENT	1317:2	1317:8	6	return DESTINATION ;
KEYWORD	1317:2	1317:2	7	return
LEAF_NODE	1317:2	1317:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1317:8	1317:8	7	;
LEAF_NODE	1318:1	1318:1	5	}
EXPR_STATEMENT	1320:1	1320:62	3	TIFFGetField ( input , TIFFTAG_IMAGELENGTH , & ( t2p -> tiff_length ) ) ;
EXPR	1320:1	1320:1	4	TIFFGetField ( input , TIFFTAG_IMAGELENGTH , & ( t2p -> tiff_length ) )
FUNCTION_CALL	1320:1	1320:61	5	TIFFGetField ( input , TIFFTAG_IMAGELENGTH , & ( t2p -> tiff_length ) )
CALLEE	1320:1	1320:1	6	TIFFGetField
LEAF_NODE	1320:1	1320:1	7	TIFFGetField
LEAF_NODE	1320:13	1320:13	6	(
ARGUMENT	1320:14	1320:14	6	input
FIELD	1320:14	1320:14	7	input
LEAF_NODE	1320:14	1320:14	8	input
LEAF_NODE	1320:19	1320:19	6	,
ARGUMENT	1320:21	1320:21	6	TIFFTAG_IMAGELENGTH
FIELD	1320:21	1320:21	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	1320:21	1320:21	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	1320:40	1320:40	6	,
ARGUMENT	1320:42	1320:42	6	& ( t2p -> tiff_length )
UNARY_EXPR	1320:42	1320:60	7	& ( t2p -> tiff_length )
UNARY_OPERATOR	1320:42	1320:42	8	&
LEAF_NODE	1320:42	1320:42	9	&
LEAF_NODE	1320:43	1320:43	8	(
FIELD	1320:44	1320:49	8	t2p -> tiff_length
LEAF_NODE	1320:44	1320:44	9	t2p
LEAF_NODE	1320:47	1320:47	9	->
LEAF_NODE	1320:49	1320:49	9	tiff_length
LEAF_NODE	1320:60	1320:60	8	)
LEAF_NODE	1320:61	1320:61	6	)
LEAF_NODE	1320:62	1320:62	4	;
SELECTION	1321:1	1321:26	3	
KEYWORD	1321:1	1321:1	4	if
LEAF_NODE	1321:1	1321:1	5	if
LEAF_NODE	1321:3	1321:3	4	(
CONDITION	1321:4	1321:4	4	t2p -> tiff_length == 0
EXPR	1321:4	1321:24	5	t2p -> tiff_length == 0
FIELD	1321:4	1321:9	6	t2p -> tiff_length
LEAF_NODE	1321:4	1321:4	7	t2p
LEAF_NODE	1321:7	1321:7	7	->
LEAF_NODE	1321:9	1321:9	7	tiff_length
EQ_OPERATOR	1321:21	1321:21	6	==
LEAF_NODE	1321:21	1321:21	7	==
FIELD	1321:24	1321:24	6	0
LEAF_NODE	1321:24	1321:24	7	0
LEAF_NODE	1321:25	1321:25	4	)
STATEMENTS	1321:26	1328:1	4	
LEAF_NODE	1321:26	1321:26	5	{
STATEMENTS	1322:2	1327:2	5	
EXPR_STATEMENT	1322:2	1325:24	6	TIFFError ( TIFF2PDF_MODULE , "No support for %s with zero length" , TIFFFileName ( input ) ) ;
EXPR	1322:2	1322:2	7	TIFFError ( TIFF2PDF_MODULE , "No support for %s with zero length" , TIFFFileName ( input ) )
FUNCTION_CALL	1322:2	1325:23	8	TIFFError ( TIFF2PDF_MODULE , "No support for %s with zero length" , TIFFFileName ( input ) )
CALLEE	1322:2	1322:2	9	TIFFError
LEAF_NODE	1322:2	1322:2	10	TIFFError
LEAF_NODE	1322:11	1322:11	9	(
ARGUMENT	1323:3	1323:3	9	TIFF2PDF_MODULE
FIELD	1323:3	1323:3	10	TIFF2PDF_MODULE
LEAF_NODE	1323:3	1323:3	11	TIFF2PDF_MODULE
LEAF_NODE	1323:18	1323:18	9	,
ARGUMENT	1324:3	1324:3	9	"No support for %s with zero length"
FIELD	1324:3	1324:3	10	"No support for %s with zero length"
LEAF_NODE	1324:3	1324:3	11	"No support for %s with zero length"
LEAF_NODE	1324:39	1324:39	9	,
ARGUMENT	1325:3	1325:3	9	TIFFFileName ( input )
FUNCTION_CALL	1325:3	1325:21	10	TIFFFileName ( input )
CALLEE	1325:3	1325:3	11	TIFFFileName
LEAF_NODE	1325:3	1325:3	12	TIFFFileName
LEAF_NODE	1325:15	1325:15	11	(
ARGUMENT	1325:16	1325:16	11	input
FIELD	1325:16	1325:16	12	input
LEAF_NODE	1325:16	1325:16	13	input
LEAF_NODE	1325:21	1325:21	11	)
LEAF_NODE	1325:23	1325:23	9	)
LEAF_NODE	1325:24	1325:24	7	;
EXPR_STATEMENT	1326:2	1326:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1326:2	1326:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1326:2	1326:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1326:2	1326:2	9	t2p -> t2p_error
FIELD	1326:2	1326:7	10	t2p -> t2p_error
LEAF_NODE	1326:2	1326:2	11	t2p
LEAF_NODE	1326:5	1326:5	11	->
LEAF_NODE	1326:7	1326:7	11	t2p_error
ASSIGN_OP	1326:17	1326:17	9	=
LEAF_NODE	1326:17	1326:17	10	=
RVAL	1326:19	1326:19	9	T2P_ERR_ERROR
FIELD	1326:19	1326:19	10	T2P_ERR_ERROR
LEAF_NODE	1326:19	1326:19	11	T2P_ERR_ERROR
LEAF_NODE	1326:32	1326:32	7	;
JUMP_STATEMENT	1327:2	1327:8	6	return DESTINATION ;
KEYWORD	1327:2	1327:2	7	return
LEAF_NODE	1327:2	1327:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1327:8	1327:8	7	;
LEAF_NODE	1328:1	1328:1	5	}
SELECTION	1330:8	1330:83	3	
KEYWORD	1330:8	1330:8	4	if
LEAF_NODE	1330:8	1330:8	5	if
LEAF_NODE	1330:10	1330:10	4	(
CONDITION	1330:11	1330:11	4	TIFFGetField ( input , TIFFTAG_COMPRESSION , & ( t2p -> tiff_compression ) ) == 0
EXPR	1330:11	1330:81	5	TIFFGetField ( input , TIFFTAG_COMPRESSION , & ( t2p -> tiff_compression ) ) == 0
FUNCTION_CALL	1330:11	1330:76	6	TIFFGetField ( input , TIFFTAG_COMPRESSION , & ( t2p -> tiff_compression ) )
CALLEE	1330:11	1330:11	7	TIFFGetField
LEAF_NODE	1330:11	1330:11	8	TIFFGetField
LEAF_NODE	1330:23	1330:23	7	(
ARGUMENT	1330:24	1330:24	7	input
FIELD	1330:24	1330:24	8	input
LEAF_NODE	1330:24	1330:24	9	input
LEAF_NODE	1330:29	1330:29	7	,
ARGUMENT	1330:31	1330:31	7	TIFFTAG_COMPRESSION
FIELD	1330:31	1330:31	8	TIFFTAG_COMPRESSION
LEAF_NODE	1330:31	1330:31	9	TIFFTAG_COMPRESSION
LEAF_NODE	1330:50	1330:50	7	,
ARGUMENT	1330:52	1330:52	7	& ( t2p -> tiff_compression )
UNARY_EXPR	1330:52	1330:75	8	& ( t2p -> tiff_compression )
UNARY_OPERATOR	1330:52	1330:52	9	&
LEAF_NODE	1330:52	1330:52	10	&
LEAF_NODE	1330:53	1330:53	9	(
FIELD	1330:54	1330:59	9	t2p -> tiff_compression
LEAF_NODE	1330:54	1330:54	10	t2p
LEAF_NODE	1330:57	1330:57	10	->
LEAF_NODE	1330:59	1330:59	10	tiff_compression
LEAF_NODE	1330:75	1330:75	9	)
LEAF_NODE	1330:76	1330:76	7	)
EQ_OPERATOR	1330:78	1330:78	6	==
LEAF_NODE	1330:78	1330:78	7	==
FIELD	1330:81	1330:81	6	0
LEAF_NODE	1330:81	1330:81	7	0
LEAF_NODE	1330:82	1330:82	4	)
STATEMENTS	1330:83	1338:8	4	
LEAF_NODE	1330:83	1330:83	5	{
STATEMENTS	1331:16	1336:16	5	
EXPR_STATEMENT	1331:16	1334:49	6	TIFFError ( TIFF2PDF_MODULE , "No support for %s with no compression tag" , TIFFFileName ( input ) ) ;
EXPR	1331:16	1331:16	7	TIFFError ( TIFF2PDF_MODULE , "No support for %s with no compression tag" , TIFFFileName ( input ) )
FUNCTION_CALL	1331:16	1334:48	8	TIFFError ( TIFF2PDF_MODULE , "No support for %s with no compression tag" , TIFFFileName ( input ) )
CALLEE	1331:16	1331:16	9	TIFFError
LEAF_NODE	1331:16	1331:16	10	TIFFError
LEAF_NODE	1331:25	1331:25	9	(
ARGUMENT	1332:24	1332:24	9	TIFF2PDF_MODULE
FIELD	1332:24	1332:24	10	TIFF2PDF_MODULE
LEAF_NODE	1332:24	1332:24	11	TIFF2PDF_MODULE
LEAF_NODE	1332:39	1332:39	9	,
ARGUMENT	1333:24	1333:24	9	"No support for %s with no compression tag"
FIELD	1333:24	1333:24	10	"No support for %s with no compression tag"
LEAF_NODE	1333:24	1333:24	11	"No support for %s with no compression tag"
LEAF_NODE	1333:67	1333:67	9	,
ARGUMENT	1334:24	1334:24	9	TIFFFileName ( input )
FUNCTION_CALL	1334:24	1334:42	10	TIFFFileName ( input )
CALLEE	1334:24	1334:24	11	TIFFFileName
LEAF_NODE	1334:24	1334:24	12	TIFFFileName
LEAF_NODE	1334:36	1334:36	11	(
ARGUMENT	1334:37	1334:37	11	input
FIELD	1334:37	1334:37	12	input
LEAF_NODE	1334:37	1334:37	13	input
LEAF_NODE	1334:42	1334:42	11	)
LEAF_NODE	1334:48	1334:48	9	)
LEAF_NODE	1334:49	1334:49	7	;
EXPR_STATEMENT	1335:16	1335:46	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1335:16	1335:16	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1335:16	1335:33	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1335:16	1335:16	9	t2p -> t2p_error
FIELD	1335:16	1335:21	10	t2p -> t2p_error
LEAF_NODE	1335:16	1335:16	11	t2p
LEAF_NODE	1335:19	1335:19	11	->
LEAF_NODE	1335:21	1335:21	11	t2p_error
ASSIGN_OP	1335:31	1335:31	9	=
LEAF_NODE	1335:31	1335:31	10	=
RVAL	1335:33	1335:33	9	T2P_ERR_ERROR
FIELD	1335:33	1335:33	10	T2P_ERR_ERROR
LEAF_NODE	1335:33	1335:33	11	T2P_ERR_ERROR
LEAF_NODE	1335:46	1335:46	7	;
JUMP_STATEMENT	1336:16	1336:22	6	return DESTINATION ;
KEYWORD	1336:16	1336:16	7	return
LEAF_NODE	1336:16	1336:16	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1336:22	1336:22	7	;
LEAF_NODE	1338:8	1338:8	5	}
SELECTION	1339:8	1339:62	3	
KEYWORD	1339:8	1339:8	4	if
LEAF_NODE	1339:8	1339:8	5	if
LEAF_NODE	1339:10	1339:10	4	(
CONDITION	1339:12	1339:12	4	TIFFIsCODECConfigured ( t2p -> tiff_compression ) == 0
EXPR	1339:12	1339:60	5	TIFFIsCODECConfigured ( t2p -> tiff_compression ) == 0
FUNCTION_CALL	1339:12	1339:55	6	TIFFIsCODECConfigured ( t2p -> tiff_compression )
CALLEE	1339:12	1339:12	7	TIFFIsCODECConfigured
LEAF_NODE	1339:12	1339:12	8	TIFFIsCODECConfigured
LEAF_NODE	1339:33	1339:33	7	(
ARGUMENT	1339:34	1339:34	7	t2p -> tiff_compression
FIELD	1339:34	1339:39	8	t2p -> tiff_compression
LEAF_NODE	1339:34	1339:34	9	t2p
LEAF_NODE	1339:37	1339:37	9	->
LEAF_NODE	1339:39	1339:39	9	tiff_compression
LEAF_NODE	1339:55	1339:55	7	)
EQ_OPERATOR	1339:57	1339:57	6	==
LEAF_NODE	1339:57	1339:57	7	==
FIELD	1339:60	1339:60	6	0
LEAF_NODE	1339:60	1339:60	7	0
LEAF_NODE	1339:61	1339:61	4	)
STATEMENTS	1339:62	1349:1	4	
LEAF_NODE	1339:62	1339:62	5	{
STATEMENTS	1340:2	1347:2	5	
EXPR_STATEMENT	1340:2	1345:4	6	TIFFError ( TIFF2PDF_MODULE , "No support for %s with compression type %u:  not configured" , TIFFFileName ( input ) , t2p -> tiff_compression ) ;
EXPR	1340:2	1340:2	7	TIFFError ( TIFF2PDF_MODULE , "No support for %s with compression type %u:  not configured" , TIFFFileName ( input ) , t2p -> tiff_compression )
FUNCTION_CALL	1340:2	1345:3	8	TIFFError ( TIFF2PDF_MODULE , "No support for %s with compression type %u:  not configured" , TIFFFileName ( input ) , t2p -> tiff_compression )
CALLEE	1340:2	1340:2	9	TIFFError
LEAF_NODE	1340:2	1340:2	10	TIFFError
LEAF_NODE	1340:11	1340:11	9	(
ARGUMENT	1341:3	1341:3	9	TIFF2PDF_MODULE
FIELD	1341:3	1341:3	10	TIFF2PDF_MODULE
LEAF_NODE	1341:3	1341:3	11	TIFF2PDF_MODULE
LEAF_NODE	1341:18	1341:18	9	,
ARGUMENT	1342:3	1342:3	9	"No support for %s with compression type %u:  not configured"
FIELD	1342:3	1342:3	10	"No support for %s with compression type %u:  not configured"
LEAF_NODE	1342:3	1342:3	11	"No support for %s with compression type %u:  not configured"
LEAF_NODE	1342:64	1342:64	9	,
ARGUMENT	1343:3	1343:3	9	TIFFFileName ( input )
FUNCTION_CALL	1343:3	1343:21	10	TIFFFileName ( input )
CALLEE	1343:3	1343:3	11	TIFFFileName
LEAF_NODE	1343:3	1343:3	12	TIFFFileName
LEAF_NODE	1343:15	1343:15	11	(
ARGUMENT	1343:16	1343:16	11	input
FIELD	1343:16	1343:16	12	input
LEAF_NODE	1343:16	1343:16	13	input
LEAF_NODE	1343:21	1343:21	11	)
LEAF_NODE	1343:22	1343:22	9	,
ARGUMENT	1344:3	1344:3	9	t2p -> tiff_compression
FIELD	1344:3	1344:8	10	t2p -> tiff_compression
LEAF_NODE	1344:3	1344:3	11	t2p
LEAF_NODE	1344:6	1344:6	11	->
LEAF_NODE	1344:8	1344:8	11	tiff_compression
LEAF_NODE	1345:3	1345:3	9	)
LEAF_NODE	1345:4	1345:4	7	;
EXPR_STATEMENT	1346:2	1346:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1346:2	1346:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1346:2	1346:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1346:2	1346:2	9	t2p -> t2p_error
FIELD	1346:2	1346:7	10	t2p -> t2p_error
LEAF_NODE	1346:2	1346:2	11	t2p
LEAF_NODE	1346:5	1346:5	11	->
LEAF_NODE	1346:7	1346:7	11	t2p_error
ASSIGN_OP	1346:17	1346:17	9	=
LEAF_NODE	1346:17	1346:17	10	=
RVAL	1346:19	1346:19	9	T2P_ERR_ERROR
FIELD	1346:19	1346:19	10	T2P_ERR_ERROR
LEAF_NODE	1346:19	1346:19	11	T2P_ERR_ERROR
LEAF_NODE	1346:32	1346:32	7	;
JUMP_STATEMENT	1347:2	1347:8	6	return DESTINATION ;
KEYWORD	1347:2	1347:2	7	return
LEAF_NODE	1347:2	1347:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1347:8	1347:8	7	;
LEAF_NODE	1349:1	1349:1	5	}
EXPR_STATEMENT	1351:1	1351:80	3	TIFFGetFieldDefaulted ( input , TIFFTAG_BITSPERSAMPLE , & ( t2p -> tiff_bitspersample ) ) ;
EXPR	1351:1	1351:1	4	TIFFGetFieldDefaulted ( input , TIFFTAG_BITSPERSAMPLE , & ( t2p -> tiff_bitspersample ) )
FUNCTION_CALL	1351:1	1351:79	5	TIFFGetFieldDefaulted ( input , TIFFTAG_BITSPERSAMPLE , & ( t2p -> tiff_bitspersample ) )
CALLEE	1351:1	1351:1	6	TIFFGetFieldDefaulted
LEAF_NODE	1351:1	1351:1	7	TIFFGetFieldDefaulted
LEAF_NODE	1351:22	1351:22	6	(
ARGUMENT	1351:23	1351:23	6	input
FIELD	1351:23	1351:23	7	input
LEAF_NODE	1351:23	1351:23	8	input
LEAF_NODE	1351:28	1351:28	6	,
ARGUMENT	1351:30	1351:30	6	TIFFTAG_BITSPERSAMPLE
FIELD	1351:30	1351:30	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1351:30	1351:30	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1351:51	1351:51	6	,
ARGUMENT	1351:53	1351:53	6	& ( t2p -> tiff_bitspersample )
UNARY_EXPR	1351:53	1351:78	7	& ( t2p -> tiff_bitspersample )
UNARY_OPERATOR	1351:53	1351:53	8	&
LEAF_NODE	1351:53	1351:53	9	&
LEAF_NODE	1351:54	1351:54	8	(
FIELD	1351:55	1351:60	8	t2p -> tiff_bitspersample
LEAF_NODE	1351:55	1351:55	9	t2p
LEAF_NODE	1351:58	1351:58	9	->
LEAF_NODE	1351:60	1351:60	9	tiff_bitspersample
LEAF_NODE	1351:78	1351:78	8	)
LEAF_NODE	1351:79	1351:79	6	)
LEAF_NODE	1351:80	1351:80	4	;
SELECTION	1352:1	1352:32	3	
KEYWORD	1352:1	1352:1	4	switch
LEAF_NODE	1352:1	1352:1	5	switch
LEAF_NODE	1352:7	1352:7	4	(
CONDITION	1352:8	1352:8	4	t2p -> tiff_bitspersample
EXPR	1352:8	1352:8	5	t2p -> tiff_bitspersample
FIELD	1352:8	1352:13	6	t2p -> tiff_bitspersample
LEAF_NODE	1352:8	1352:8	7	t2p
LEAF_NODE	1352:11	1352:11	7	->
LEAF_NODE	1352:13	1352:13	7	tiff_bitspersample
LEAF_NODE	1352:31	1352:31	4	)
STATEMENTS	1352:32	1373:1	4	
LEAF_NODE	1352:32	1352:32	5	{
STATEMENTS	1353:2	1372:3	5	
LABEL	1353:2	1353:8	6	case 1 :
LEAF_NODE	1353:2	1353:2	7	case
LEAF_NODE	1353:7	1353:7	7	1
LEAF_NODE	1353:8	1353:8	7	:
LABEL	1354:2	1354:8	6	case 2 :
LEAF_NODE	1354:2	1354:2	7	case
LEAF_NODE	1354:7	1354:7	7	2
LEAF_NODE	1354:8	1354:8	7	:
LABEL	1355:2	1355:8	6	case 4 :
LEAF_NODE	1355:2	1355:2	7	case
LEAF_NODE	1355:7	1355:7	7	4
LEAF_NODE	1355:8	1355:8	7	:
LABEL	1356:2	1356:8	6	case 8 :
LEAF_NODE	1356:2	1356:2	7	case
LEAF_NODE	1356:7	1356:7	7	8
LEAF_NODE	1356:8	1356:8	7	:
JUMP_STATEMENT	1357:3	1357:8	6	break DESTINATION ;
KEYWORD	1357:3	1357:3	7	break
LEAF_NODE	1357:3	1357:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1357:8	1357:8	7	;
LABEL	1358:2	1358:8	6	case 0 :
LEAF_NODE	1358:2	1358:2	7	case
LEAF_NODE	1358:7	1358:7	7	0
LEAF_NODE	1358:8	1358:8	7	:
EXPR_STATEMENT	1359:3	1362:24	6	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has 0 bits per sample, assuming 1" , TIFFFileName ( input ) ) ;
EXPR	1359:3	1359:3	7	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has 0 bits per sample, assuming 1" , TIFFFileName ( input ) )
FUNCTION_CALL	1359:3	1362:23	8	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has 0 bits per sample, assuming 1" , TIFFFileName ( input ) )
CALLEE	1359:3	1359:3	9	TIFFWarning
LEAF_NODE	1359:3	1359:3	10	TIFFWarning
LEAF_NODE	1359:14	1359:14	9	(
ARGUMENT	1360:4	1360:4	9	TIFF2PDF_MODULE
FIELD	1360:4	1360:4	10	TIFF2PDF_MODULE
LEAF_NODE	1360:4	1360:4	11	TIFF2PDF_MODULE
LEAF_NODE	1360:19	1360:19	9	,
ARGUMENT	1361:4	1361:4	9	"Image %s has 0 bits per sample, assuming 1"
FIELD	1361:4	1361:4	10	"Image %s has 0 bits per sample, assuming 1"
LEAF_NODE	1361:4	1361:4	11	"Image %s has 0 bits per sample, assuming 1"
LEAF_NODE	1361:48	1361:48	9	,
ARGUMENT	1362:4	1362:4	9	TIFFFileName ( input )
FUNCTION_CALL	1362:4	1362:22	10	TIFFFileName ( input )
CALLEE	1362:4	1362:4	11	TIFFFileName
LEAF_NODE	1362:4	1362:4	12	TIFFFileName
LEAF_NODE	1362:16	1362:16	11	(
ARGUMENT	1362:17	1362:17	11	input
FIELD	1362:17	1362:17	12	input
LEAF_NODE	1362:17	1362:17	13	input
LEAF_NODE	1362:22	1362:22	11	)
LEAF_NODE	1362:23	1362:23	9	)
LEAF_NODE	1362:24	1362:24	7	;
EXPR_STATEMENT	1363:3	1363:28	6	t2p -> tiff_bitspersample = 1 ;
EXPR	1363:3	1363:3	7	t2p -> tiff_bitspersample = 1
ASSIGN	1363:3	1363:27	8	t2p -> tiff_bitspersample = 1
LVAL	1363:3	1363:3	9	t2p -> tiff_bitspersample
FIELD	1363:3	1363:8	10	t2p -> tiff_bitspersample
LEAF_NODE	1363:3	1363:3	11	t2p
LEAF_NODE	1363:6	1363:6	11	->
LEAF_NODE	1363:8	1363:8	11	tiff_bitspersample
ASSIGN_OP	1363:26	1363:26	9	=
LEAF_NODE	1363:26	1363:26	10	=
RVAL	1363:27	1363:27	9	1
FIELD	1363:27	1363:27	10	1
LEAF_NODE	1363:27	1363:27	11	1
LEAF_NODE	1363:28	1363:28	7	;
JUMP_STATEMENT	1364:3	1364:8	6	break DESTINATION ;
KEYWORD	1364:3	1364:3	7	break
LEAF_NODE	1364:3	1364:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1364:8	1364:8	7	;
LABEL	1365:2	1365:9	6	default :
LEAF_NODE	1365:2	1365:2	7	default
LEAF_NODE	1365:9	1365:9	7	:
EXPR_STATEMENT	1366:3	1370:28	6	TIFFError ( TIFF2PDF_MODULE , "No support for %s with %u bits per sample" , TIFFFileName ( input ) , t2p -> tiff_bitspersample ) ;
EXPR	1366:3	1366:3	7	TIFFError ( TIFF2PDF_MODULE , "No support for %s with %u bits per sample" , TIFFFileName ( input ) , t2p -> tiff_bitspersample )
FUNCTION_CALL	1366:3	1370:27	8	TIFFError ( TIFF2PDF_MODULE , "No support for %s with %u bits per sample" , TIFFFileName ( input ) , t2p -> tiff_bitspersample )
CALLEE	1366:3	1366:3	9	TIFFError
LEAF_NODE	1366:3	1366:3	10	TIFFError
LEAF_NODE	1366:12	1366:12	9	(
ARGUMENT	1367:4	1367:4	9	TIFF2PDF_MODULE
FIELD	1367:4	1367:4	10	TIFF2PDF_MODULE
LEAF_NODE	1367:4	1367:4	11	TIFF2PDF_MODULE
LEAF_NODE	1367:19	1367:19	9	,
ARGUMENT	1368:4	1368:4	9	"No support for %s with %u bits per sample"
FIELD	1368:4	1368:4	10	"No support for %s with %u bits per sample"
LEAF_NODE	1368:4	1368:4	11	"No support for %s with %u bits per sample"
LEAF_NODE	1368:47	1368:47	9	,
ARGUMENT	1369:4	1369:4	9	TIFFFileName ( input )
FUNCTION_CALL	1369:4	1369:22	10	TIFFFileName ( input )
CALLEE	1369:4	1369:4	11	TIFFFileName
LEAF_NODE	1369:4	1369:4	12	TIFFFileName
LEAF_NODE	1369:16	1369:16	11	(
ARGUMENT	1369:17	1369:17	11	input
FIELD	1369:17	1369:17	12	input
LEAF_NODE	1369:17	1369:17	13	input
LEAF_NODE	1369:22	1369:22	11	)
LEAF_NODE	1369:23	1369:23	9	,
ARGUMENT	1370:4	1370:4	9	t2p -> tiff_bitspersample
FIELD	1370:4	1370:9	10	t2p -> tiff_bitspersample
LEAF_NODE	1370:4	1370:4	11	t2p
LEAF_NODE	1370:7	1370:7	11	->
LEAF_NODE	1370:9	1370:9	11	tiff_bitspersample
LEAF_NODE	1370:27	1370:27	9	)
LEAF_NODE	1370:28	1370:28	7	;
EXPR_STATEMENT	1371:3	1371:33	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1371:3	1371:3	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1371:3	1371:20	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1371:3	1371:3	9	t2p -> t2p_error
FIELD	1371:3	1371:8	10	t2p -> t2p_error
LEAF_NODE	1371:3	1371:3	11	t2p
LEAF_NODE	1371:6	1371:6	11	->
LEAF_NODE	1371:8	1371:8	11	t2p_error
ASSIGN_OP	1371:18	1371:18	9	=
LEAF_NODE	1371:18	1371:18	10	=
RVAL	1371:20	1371:20	9	T2P_ERR_ERROR
FIELD	1371:20	1371:20	10	T2P_ERR_ERROR
LEAF_NODE	1371:20	1371:20	11	T2P_ERR_ERROR
LEAF_NODE	1371:33	1371:33	7	;
JUMP_STATEMENT	1372:3	1372:9	6	return DESTINATION ;
KEYWORD	1372:3	1372:3	7	return
LEAF_NODE	1372:3	1372:3	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1372:9	1372:9	7	;
LEAF_NODE	1373:1	1373:1	5	}
EXPR_STATEMENT	1375:1	1375:84	3	TIFFGetFieldDefaulted ( input , TIFFTAG_SAMPLESPERPIXEL , & ( t2p -> tiff_samplesperpixel ) ) ;
EXPR	1375:1	1375:1	4	TIFFGetFieldDefaulted ( input , TIFFTAG_SAMPLESPERPIXEL , & ( t2p -> tiff_samplesperpixel ) )
FUNCTION_CALL	1375:1	1375:83	5	TIFFGetFieldDefaulted ( input , TIFFTAG_SAMPLESPERPIXEL , & ( t2p -> tiff_samplesperpixel ) )
CALLEE	1375:1	1375:1	6	TIFFGetFieldDefaulted
LEAF_NODE	1375:1	1375:1	7	TIFFGetFieldDefaulted
LEAF_NODE	1375:22	1375:22	6	(
ARGUMENT	1375:23	1375:23	6	input
FIELD	1375:23	1375:23	7	input
LEAF_NODE	1375:23	1375:23	8	input
LEAF_NODE	1375:28	1375:28	6	,
ARGUMENT	1375:30	1375:30	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	1375:30	1375:30	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	1375:30	1375:30	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	1375:53	1375:53	6	,
ARGUMENT	1375:55	1375:55	6	& ( t2p -> tiff_samplesperpixel )
UNARY_EXPR	1375:55	1375:82	7	& ( t2p -> tiff_samplesperpixel )
UNARY_OPERATOR	1375:55	1375:55	8	&
LEAF_NODE	1375:55	1375:55	9	&
LEAF_NODE	1375:56	1375:56	8	(
FIELD	1375:57	1375:62	8	t2p -> tiff_samplesperpixel
LEAF_NODE	1375:57	1375:57	9	t2p
LEAF_NODE	1375:60	1375:60	9	->
LEAF_NODE	1375:62	1375:62	9	tiff_samplesperpixel
LEAF_NODE	1375:82	1375:82	8	)
LEAF_NODE	1375:83	1375:83	6	)
LEAF_NODE	1375:84	1375:84	4	;
SELECTION	1376:1	1376:32	3	
KEYWORD	1376:1	1376:1	4	if
LEAF_NODE	1376:1	1376:1	5	if
LEAF_NODE	1376:3	1376:3	4	(
CONDITION	1376:4	1376:4	4	t2p -> tiff_samplesperpixel > 4
EXPR	1376:4	1376:30	5	t2p -> tiff_samplesperpixel > 4
FIELD	1376:4	1376:9	6	t2p -> tiff_samplesperpixel
LEAF_NODE	1376:4	1376:4	7	t2p
LEAF_NODE	1376:7	1376:7	7	->
LEAF_NODE	1376:9	1376:9	7	tiff_samplesperpixel
REL_OPERATOR	1376:29	1376:29	6	>
LEAF_NODE	1376:29	1376:29	7	>
FIELD	1376:30	1376:30	6	4
LEAF_NODE	1376:30	1376:30	7	4
LEAF_NODE	1376:31	1376:31	4	)
STATEMENTS	1376:32	1384:1	4	
LEAF_NODE	1376:32	1376:32	5	{
STATEMENTS	1377:2	1383:2	5	
EXPR_STATEMENT	1377:2	1381:29	6	TIFFError ( TIFF2PDF_MODULE , "No support for %s with %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel ) ;
EXPR	1377:2	1377:2	7	TIFFError ( TIFF2PDF_MODULE , "No support for %s with %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel )
FUNCTION_CALL	1377:2	1381:28	8	TIFFError ( TIFF2PDF_MODULE , "No support for %s with %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel )
CALLEE	1377:2	1377:2	9	TIFFError
LEAF_NODE	1377:2	1377:2	10	TIFFError
LEAF_NODE	1377:11	1377:11	9	(
ARGUMENT	1378:3	1378:3	9	TIFF2PDF_MODULE
FIELD	1378:3	1378:3	10	TIFF2PDF_MODULE
LEAF_NODE	1378:3	1378:3	11	TIFF2PDF_MODULE
LEAF_NODE	1378:18	1378:18	9	,
ARGUMENT	1379:3	1379:3	9	"No support for %s with %u samples per pixel"
FIELD	1379:3	1379:3	10	"No support for %s with %u samples per pixel"
LEAF_NODE	1379:3	1379:3	11	"No support for %s with %u samples per pixel"
LEAF_NODE	1379:48	1379:48	9	,
ARGUMENT	1380:3	1380:3	9	TIFFFileName ( input )
FUNCTION_CALL	1380:3	1380:21	10	TIFFFileName ( input )
CALLEE	1380:3	1380:3	11	TIFFFileName
LEAF_NODE	1380:3	1380:3	12	TIFFFileName
LEAF_NODE	1380:15	1380:15	11	(
ARGUMENT	1380:16	1380:16	11	input
FIELD	1380:16	1380:16	12	input
LEAF_NODE	1380:16	1380:16	13	input
LEAF_NODE	1380:21	1380:21	11	)
LEAF_NODE	1380:22	1380:22	9	,
ARGUMENT	1381:3	1381:3	9	t2p -> tiff_samplesperpixel
FIELD	1381:3	1381:8	10	t2p -> tiff_samplesperpixel
LEAF_NODE	1381:3	1381:3	11	t2p
LEAF_NODE	1381:6	1381:6	11	->
LEAF_NODE	1381:8	1381:8	11	tiff_samplesperpixel
LEAF_NODE	1381:28	1381:28	9	)
LEAF_NODE	1381:29	1381:29	7	;
EXPR_STATEMENT	1382:2	1382:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1382:2	1382:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1382:2	1382:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1382:2	1382:2	9	t2p -> t2p_error
FIELD	1382:2	1382:7	10	t2p -> t2p_error
LEAF_NODE	1382:2	1382:2	11	t2p
LEAF_NODE	1382:5	1382:5	11	->
LEAF_NODE	1382:7	1382:7	11	t2p_error
ASSIGN_OP	1382:17	1382:17	9	=
LEAF_NODE	1382:17	1382:17	10	=
RVAL	1382:19	1382:19	9	T2P_ERR_ERROR
FIELD	1382:19	1382:19	10	T2P_ERR_ERROR
LEAF_NODE	1382:19	1382:19	11	T2P_ERR_ERROR
LEAF_NODE	1382:32	1382:32	7	;
JUMP_STATEMENT	1383:2	1383:8	6	return DESTINATION ;
KEYWORD	1383:2	1383:2	7	return
LEAF_NODE	1383:2	1383:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1383:8	1383:8	7	;
LEAF_NODE	1384:1	1384:1	5	}
SELECTION	1385:1	1385:33	3	
KEYWORD	1385:1	1385:1	4	if
LEAF_NODE	1385:1	1385:1	5	if
LEAF_NODE	1385:3	1385:3	4	(
CONDITION	1385:4	1385:4	4	t2p -> tiff_samplesperpixel == 0
EXPR	1385:4	1385:31	5	t2p -> tiff_samplesperpixel == 0
FIELD	1385:4	1385:9	6	t2p -> tiff_samplesperpixel
LEAF_NODE	1385:4	1385:4	7	t2p
LEAF_NODE	1385:7	1385:7	7	->
LEAF_NODE	1385:9	1385:9	7	tiff_samplesperpixel
EQ_OPERATOR	1385:29	1385:29	6	==
LEAF_NODE	1385:29	1385:29	7	==
FIELD	1385:31	1385:31	6	0
LEAF_NODE	1385:31	1385:31	7	0
LEAF_NODE	1385:32	1385:32	4	)
STATEMENTS	1385:33	1391:1	4	
LEAF_NODE	1385:33	1385:33	5	{
STATEMENTS	1386:2	1390:2	5	
EXPR_STATEMENT	1386:2	1389:23	6	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has 0 samples per pixel, assuming 1" , TIFFFileName ( input ) ) ;
EXPR	1386:2	1386:2	7	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has 0 samples per pixel, assuming 1" , TIFFFileName ( input ) )
FUNCTION_CALL	1386:2	1389:22	8	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has 0 samples per pixel, assuming 1" , TIFFFileName ( input ) )
CALLEE	1386:2	1386:2	9	TIFFWarning
LEAF_NODE	1386:2	1386:2	10	TIFFWarning
LEAF_NODE	1386:13	1386:13	9	(
ARGUMENT	1387:3	1387:3	9	TIFF2PDF_MODULE
FIELD	1387:3	1387:3	10	TIFF2PDF_MODULE
LEAF_NODE	1387:3	1387:3	11	TIFF2PDF_MODULE
LEAF_NODE	1387:18	1387:18	9	,
ARGUMENT	1388:3	1388:3	9	"Image %s has 0 samples per pixel, assuming 1"
FIELD	1388:3	1388:3	10	"Image %s has 0 samples per pixel, assuming 1"
LEAF_NODE	1388:3	1388:3	11	"Image %s has 0 samples per pixel, assuming 1"
LEAF_NODE	1388:49	1388:49	9	,
ARGUMENT	1389:3	1389:3	9	TIFFFileName ( input )
FUNCTION_CALL	1389:3	1389:21	10	TIFFFileName ( input )
CALLEE	1389:3	1389:3	11	TIFFFileName
LEAF_NODE	1389:3	1389:3	12	TIFFFileName
LEAF_NODE	1389:15	1389:15	11	(
ARGUMENT	1389:16	1389:16	11	input
FIELD	1389:16	1389:16	12	input
LEAF_NODE	1389:16	1389:16	13	input
LEAF_NODE	1389:21	1389:21	11	)
LEAF_NODE	1389:22	1389:22	9	)
LEAF_NODE	1389:23	1389:23	7	;
EXPR_STATEMENT	1390:2	1390:29	6	t2p -> tiff_samplesperpixel = 1 ;
EXPR	1390:2	1390:2	7	t2p -> tiff_samplesperpixel = 1
ASSIGN	1390:2	1390:28	8	t2p -> tiff_samplesperpixel = 1
LVAL	1390:2	1390:2	9	t2p -> tiff_samplesperpixel
FIELD	1390:2	1390:7	10	t2p -> tiff_samplesperpixel
LEAF_NODE	1390:2	1390:2	11	t2p
LEAF_NODE	1390:5	1390:5	11	->
LEAF_NODE	1390:7	1390:7	11	tiff_samplesperpixel
ASSIGN_OP	1390:27	1390:27	9	=
LEAF_NODE	1390:27	1390:27	10	=
RVAL	1390:28	1390:28	9	1
FIELD	1390:28	1390:28	10	1
LEAF_NODE	1390:28	1390:28	11	1
LEAF_NODE	1390:29	1390:29	7	;
LEAF_NODE	1391:1	1391:1	5	}
SELECTION	1393:1	1393:62	3	
KEYWORD	1393:1	1393:1	4	if
LEAF_NODE	1393:1	1393:1	5	if
LEAF_NODE	1393:3	1393:3	4	(
CONDITION	1393:4	1393:4	4	TIFFGetField ( input , TIFFTAG_SAMPLEFORMAT , & xuint16 ) != 0
EXPR	1393:4	1393:59	5	TIFFGetField ( input , TIFFTAG_SAMPLEFORMAT , & xuint16 ) != 0
FUNCTION_CALL	1393:4	1393:54	6	TIFFGetField ( input , TIFFTAG_SAMPLEFORMAT , & xuint16 )
CALLEE	1393:4	1393:4	7	TIFFGetField
LEAF_NODE	1393:4	1393:4	8	TIFFGetField
LEAF_NODE	1393:16	1393:16	7	(
ARGUMENT	1393:17	1393:17	7	input
FIELD	1393:17	1393:17	8	input
LEAF_NODE	1393:17	1393:17	9	input
LEAF_NODE	1393:22	1393:22	7	,
ARGUMENT	1393:24	1393:24	7	TIFFTAG_SAMPLEFORMAT
FIELD	1393:24	1393:24	8	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1393:24	1393:24	9	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1393:44	1393:44	7	,
ARGUMENT	1393:46	1393:46	7	& xuint16
UNARY_EXPR	1393:46	1393:47	8	& xuint16
UNARY_OPERATOR	1393:46	1393:46	9	&
LEAF_NODE	1393:46	1393:46	10	&
FIELD	1393:47	1393:47	9	xuint16
LEAF_NODE	1393:47	1393:47	10	xuint16
LEAF_NODE	1393:54	1393:54	7	)
EQ_OPERATOR	1393:56	1393:56	6	!=
LEAF_NODE	1393:56	1393:56	7	!=
FIELD	1393:59	1393:59	6	0
LEAF_NODE	1393:59	1393:59	7	0
LEAF_NODE	1393:61	1393:61	4	)
STATEMENTS	1393:62	1409:1	4	
LEAF_NODE	1393:62	1393:62	5	{
STATEMENTS	1394:2	1394:2	5	
SELECTION	1394:2	1394:17	6	
KEYWORD	1394:2	1394:2	7	switch
LEAF_NODE	1394:2	1394:2	8	switch
LEAF_NODE	1394:8	1394:8	7	(
CONDITION	1394:9	1394:9	7	xuint16
EXPR	1394:9	1394:9	8	xuint16
FIELD	1394:9	1394:9	9	xuint16
LEAF_NODE	1394:9	1394:9	10	xuint16
LEAF_NODE	1394:16	1394:16	7	)
STATEMENTS	1394:17	1408:2	7	
LEAF_NODE	1394:17	1394:17	8	{
STATEMENTS	1395:3	1407:4	8	
LABEL	1395:3	1395:9	9	case 0 :
LEAF_NODE	1395:3	1395:3	10	case
LEAF_NODE	1395:8	1395:8	10	0
LEAF_NODE	1395:9	1395:9	10	:
LABEL	1396:3	1396:9	9	case 1 :
LEAF_NODE	1396:3	1396:3	10	case
LEAF_NODE	1396:8	1396:8	10	1
LEAF_NODE	1396:9	1396:9	10	:
LABEL	1397:3	1397:9	9	case 4 :
LEAF_NODE	1397:3	1397:3	10	case
LEAF_NODE	1397:8	1397:8	10	4
LEAF_NODE	1397:9	1397:9	10	:
JUMP_STATEMENT	1398:4	1398:9	9	break DESTINATION ;
KEYWORD	1398:4	1398:4	10	break
LEAF_NODE	1398:4	1398:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1398:9	1398:9	10	;
LABEL	1399:3	1399:10	9	default :
LEAF_NODE	1399:3	1399:3	10	default
LEAF_NODE	1399:10	1399:10	10	:
EXPR_STATEMENT	1400:4	1404:13	9	TIFFError ( TIFF2PDF_MODULE , "No support for %s with sample format %u" , TIFFFileName ( input ) , xuint16 ) ;
EXPR	1400:4	1400:4	10	TIFFError ( TIFF2PDF_MODULE , "No support for %s with sample format %u" , TIFFFileName ( input ) , xuint16 )
FUNCTION_CALL	1400:4	1404:12	11	TIFFError ( TIFF2PDF_MODULE , "No support for %s with sample format %u" , TIFFFileName ( input ) , xuint16 )
CALLEE	1400:4	1400:4	12	TIFFError
LEAF_NODE	1400:4	1400:4	13	TIFFError
LEAF_NODE	1400:13	1400:13	12	(
ARGUMENT	1401:5	1401:5	12	TIFF2PDF_MODULE
FIELD	1401:5	1401:5	13	TIFF2PDF_MODULE
LEAF_NODE	1401:5	1401:5	14	TIFF2PDF_MODULE
LEAF_NODE	1401:20	1401:20	12	,
ARGUMENT	1402:5	1402:5	12	"No support for %s with sample format %u"
FIELD	1402:5	1402:5	13	"No support for %s with sample format %u"
LEAF_NODE	1402:5	1402:5	14	"No support for %s with sample format %u"
LEAF_NODE	1402:46	1402:46	12	,
ARGUMENT	1403:5	1403:5	12	TIFFFileName ( input )
FUNCTION_CALL	1403:5	1403:23	13	TIFFFileName ( input )
CALLEE	1403:5	1403:5	14	TIFFFileName
LEAF_NODE	1403:5	1403:5	15	TIFFFileName
LEAF_NODE	1403:17	1403:17	14	(
ARGUMENT	1403:18	1403:18	14	input
FIELD	1403:18	1403:18	15	input
LEAF_NODE	1403:18	1403:18	16	input
LEAF_NODE	1403:23	1403:23	14	)
LEAF_NODE	1403:24	1403:24	12	,
ARGUMENT	1404:5	1404:5	12	xuint16
FIELD	1404:5	1404:5	13	xuint16
LEAF_NODE	1404:5	1404:5	14	xuint16
LEAF_NODE	1404:12	1404:12	12	)
LEAF_NODE	1404:13	1404:13	10	;
EXPR_STATEMENT	1405:4	1405:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1405:4	1405:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1405:4	1405:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1405:4	1405:4	12	t2p -> t2p_error
FIELD	1405:4	1405:9	13	t2p -> t2p_error
LEAF_NODE	1405:4	1405:4	14	t2p
LEAF_NODE	1405:7	1405:7	14	->
LEAF_NODE	1405:9	1405:9	14	t2p_error
ASSIGN_OP	1405:19	1405:19	12	=
LEAF_NODE	1405:19	1405:19	13	=
RVAL	1405:21	1405:21	12	T2P_ERR_ERROR
FIELD	1405:21	1405:21	13	T2P_ERR_ERROR
LEAF_NODE	1405:21	1405:21	14	T2P_ERR_ERROR
LEAF_NODE	1405:34	1405:34	10	;
JUMP_STATEMENT	1406:4	1406:10	9	return DESTINATION ;
KEYWORD	1406:4	1406:4	10	return
LEAF_NODE	1406:4	1406:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1406:10	1406:10	10	;
JUMP_STATEMENT	1407:4	1407:9	9	break DESTINATION ;
KEYWORD	1407:4	1407:4	10	break
LEAF_NODE	1407:4	1407:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1407:9	1407:9	10	;
LEAF_NODE	1408:2	1408:2	8	}
LEAF_NODE	1409:1	1409:1	5	}
EXPR_STATEMENT	1411:1	1411:72	3	TIFFGetFieldDefaulted ( input , TIFFTAG_FILLORDER , & ( t2p -> tiff_fillorder ) ) ;
EXPR	1411:1	1411:1	4	TIFFGetFieldDefaulted ( input , TIFFTAG_FILLORDER , & ( t2p -> tiff_fillorder ) )
FUNCTION_CALL	1411:1	1411:71	5	TIFFGetFieldDefaulted ( input , TIFFTAG_FILLORDER , & ( t2p -> tiff_fillorder ) )
CALLEE	1411:1	1411:1	6	TIFFGetFieldDefaulted
LEAF_NODE	1411:1	1411:1	7	TIFFGetFieldDefaulted
LEAF_NODE	1411:22	1411:22	6	(
ARGUMENT	1411:23	1411:23	6	input
FIELD	1411:23	1411:23	7	input
LEAF_NODE	1411:23	1411:23	8	input
LEAF_NODE	1411:28	1411:28	6	,
ARGUMENT	1411:30	1411:30	6	TIFFTAG_FILLORDER
FIELD	1411:30	1411:30	7	TIFFTAG_FILLORDER
LEAF_NODE	1411:30	1411:30	8	TIFFTAG_FILLORDER
LEAF_NODE	1411:47	1411:47	6	,
ARGUMENT	1411:49	1411:49	6	& ( t2p -> tiff_fillorder )
UNARY_EXPR	1411:49	1411:70	7	& ( t2p -> tiff_fillorder )
UNARY_OPERATOR	1411:49	1411:49	8	&
LEAF_NODE	1411:49	1411:49	9	&
LEAF_NODE	1411:50	1411:50	8	(
FIELD	1411:51	1411:56	8	t2p -> tiff_fillorder
LEAF_NODE	1411:51	1411:51	9	t2p
LEAF_NODE	1411:54	1411:54	9	->
LEAF_NODE	1411:56	1411:56	9	tiff_fillorder
LEAF_NODE	1411:70	1411:70	8	)
LEAF_NODE	1411:71	1411:71	6	)
LEAF_NODE	1411:72	1411:72	4	;
SELECTION	1413:8	1413:83	3	
KEYWORD	1413:8	1413:8	4	if
LEAF_NODE	1413:8	1413:8	5	if
LEAF_NODE	1413:10	1413:10	4	(
CONDITION	1413:11	1413:11	4	TIFFGetField ( input , TIFFTAG_PHOTOMETRIC , & ( t2p -> tiff_photometric ) ) == 0
EXPR	1413:11	1413:81	5	TIFFGetField ( input , TIFFTAG_PHOTOMETRIC , & ( t2p -> tiff_photometric ) ) == 0
FUNCTION_CALL	1413:11	1413:76	6	TIFFGetField ( input , TIFFTAG_PHOTOMETRIC , & ( t2p -> tiff_photometric ) )
CALLEE	1413:11	1413:11	7	TIFFGetField
LEAF_NODE	1413:11	1413:11	8	TIFFGetField
LEAF_NODE	1413:23	1413:23	7	(
ARGUMENT	1413:24	1413:24	7	input
FIELD	1413:24	1413:24	8	input
LEAF_NODE	1413:24	1413:24	9	input
LEAF_NODE	1413:29	1413:29	7	,
ARGUMENT	1413:31	1413:31	7	TIFFTAG_PHOTOMETRIC
FIELD	1413:31	1413:31	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	1413:31	1413:31	9	TIFFTAG_PHOTOMETRIC
LEAF_NODE	1413:50	1413:50	7	,
ARGUMENT	1413:52	1413:52	7	& ( t2p -> tiff_photometric )
UNARY_EXPR	1413:52	1413:75	8	& ( t2p -> tiff_photometric )
UNARY_OPERATOR	1413:52	1413:52	9	&
LEAF_NODE	1413:52	1413:52	10	&
LEAF_NODE	1413:53	1413:53	9	(
FIELD	1413:54	1413:59	9	t2p -> tiff_photometric
LEAF_NODE	1413:54	1413:54	10	t2p
LEAF_NODE	1413:57	1413:57	10	->
LEAF_NODE	1413:59	1413:59	10	tiff_photometric
LEAF_NODE	1413:75	1413:75	9	)
LEAF_NODE	1413:76	1413:76	7	)
EQ_OPERATOR	1413:78	1413:78	6	==
LEAF_NODE	1413:78	1413:78	7	==
FIELD	1413:81	1413:81	6	0
LEAF_NODE	1413:81	1413:81	7	0
LEAF_NODE	1413:82	1413:82	4	)
STATEMENTS	1413:83	1421:8	4	
LEAF_NODE	1413:83	1413:83	5	{
STATEMENTS	1414:16	1419:16	5	
EXPR_STATEMENT	1414:16	1417:49	6	TIFFError ( TIFF2PDF_MODULE , "No support for %s with no photometric interpretation tag" , TIFFFileName ( input ) ) ;
EXPR	1414:16	1414:16	7	TIFFError ( TIFF2PDF_MODULE , "No support for %s with no photometric interpretation tag" , TIFFFileName ( input ) )
FUNCTION_CALL	1414:16	1417:48	8	TIFFError ( TIFF2PDF_MODULE , "No support for %s with no photometric interpretation tag" , TIFFFileName ( input ) )
CALLEE	1414:16	1414:16	9	TIFFError
LEAF_NODE	1414:16	1414:16	10	TIFFError
LEAF_NODE	1414:25	1414:25	9	(
ARGUMENT	1415:24	1415:24	9	TIFF2PDF_MODULE
FIELD	1415:24	1415:24	10	TIFF2PDF_MODULE
LEAF_NODE	1415:24	1415:24	11	TIFF2PDF_MODULE
LEAF_NODE	1415:39	1415:39	9	,
ARGUMENT	1416:24	1416:24	9	"No support for %s with no photometric interpretation tag"
FIELD	1416:24	1416:24	10	"No support for %s with no photometric interpretation tag"
LEAF_NODE	1416:24	1416:24	11	"No support for %s with no photometric interpretation tag"
LEAF_NODE	1416:82	1416:82	9	,
ARGUMENT	1417:24	1417:24	9	TIFFFileName ( input )
FUNCTION_CALL	1417:24	1417:42	10	TIFFFileName ( input )
CALLEE	1417:24	1417:24	11	TIFFFileName
LEAF_NODE	1417:24	1417:24	12	TIFFFileName
LEAF_NODE	1417:36	1417:36	11	(
ARGUMENT	1417:37	1417:37	11	input
FIELD	1417:37	1417:37	12	input
LEAF_NODE	1417:37	1417:37	13	input
LEAF_NODE	1417:42	1417:42	11	)
LEAF_NODE	1417:48	1417:48	9	)
LEAF_NODE	1417:49	1417:49	7	;
EXPR_STATEMENT	1418:16	1418:46	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1418:16	1418:16	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1418:16	1418:33	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1418:16	1418:16	9	t2p -> t2p_error
FIELD	1418:16	1418:21	10	t2p -> t2p_error
LEAF_NODE	1418:16	1418:16	11	t2p
LEAF_NODE	1418:19	1418:19	11	->
LEAF_NODE	1418:21	1418:21	11	t2p_error
ASSIGN_OP	1418:31	1418:31	9	=
LEAF_NODE	1418:31	1418:31	10	=
RVAL	1418:33	1418:33	9	T2P_ERR_ERROR
FIELD	1418:33	1418:33	10	T2P_ERR_ERROR
LEAF_NODE	1418:33	1418:33	11	T2P_ERR_ERROR
LEAF_NODE	1418:46	1418:46	7	;
JUMP_STATEMENT	1419:16	1419:22	6	return DESTINATION ;
KEYWORD	1419:16	1419:16	7	return
LEAF_NODE	1419:16	1419:16	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1419:22	1419:22	7	;
LEAF_NODE	1421:8	1421:8	5	}
SELECTION	1423:1	1423:30	3	
KEYWORD	1423:1	1423:1	4	switch
LEAF_NODE	1423:1	1423:1	5	switch
LEAF_NODE	1423:7	1423:7	4	(
CONDITION	1423:8	1423:8	4	t2p -> tiff_photometric
EXPR	1423:8	1423:8	5	t2p -> tiff_photometric
FIELD	1423:8	1423:13	6	t2p -> tiff_photometric
LEAF_NODE	1423:8	1423:8	7	t2p
LEAF_NODE	1423:11	1423:11	7	->
LEAF_NODE	1423:13	1423:13	7	tiff_photometric
LEAF_NODE	1423:29	1423:29	4	)
STATEMENTS	1423:30	1722:1	4	
LEAF_NODE	1423:30	1423:30	5	{
STATEMENTS	1424:2	1721:3	5	
LABEL	1424:2	1424:29	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	1424:2	1424:2	7	case
LEAF_NODE	1424:7	1424:7	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1424:29	1424:29	7	:
LABEL	1425:2	1425:29	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	1425:2	1425:2	7	case
LEAF_NODE	1425:7	1425:7	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1425:29	1425:29	7	:
SELECTION	1426:3	1426:34	6	
KEYWORD	1426:3	1426:3	7	if
LEAF_NODE	1426:3	1426:3	8	if
LEAF_NODE	1426:6	1426:6	7	(
CONDITION	1426:7	1426:7	7	t2p -> tiff_bitspersample == 1
EXPR	1426:7	1426:32	8	t2p -> tiff_bitspersample == 1
FIELD	1426:7	1426:12	9	t2p -> tiff_bitspersample
LEAF_NODE	1426:7	1426:7	10	t2p
LEAF_NODE	1426:10	1426:10	10	->
LEAF_NODE	1426:12	1426:12	10	tiff_bitspersample
EQ_OPERATOR	1426:30	1426:30	9	==
LEAF_NODE	1426:30	1426:30	10	==
FIELD	1426:32	1426:32	9	1
LEAF_NODE	1426:32	1426:32	10	1
LEAF_NODE	1426:33	1426:33	7	)
STATEMENTS	1426:34	1431:3	7	
LEAF_NODE	1426:34	1426:34	8	{
STATEMENTS	1427:4	1428:4	8	
EXPR_STATEMENT	1427:4	1427:38	9	t2p -> pdf_colorspace = T2P_CS_BILEVEL ;
EXPR	1427:4	1427:4	10	t2p -> pdf_colorspace = T2P_CS_BILEVEL
ASSIGN	1427:4	1427:24	11	t2p -> pdf_colorspace = T2P_CS_BILEVEL
LVAL	1427:4	1427:4	12	t2p -> pdf_colorspace
FIELD	1427:4	1427:9	13	t2p -> pdf_colorspace
LEAF_NODE	1427:4	1427:4	14	t2p
LEAF_NODE	1427:7	1427:7	14	->
LEAF_NODE	1427:9	1427:9	14	pdf_colorspace
ASSIGN_OP	1427:23	1427:23	12	=
LEAF_NODE	1427:23	1427:23	13	=
RVAL	1427:24	1427:24	12	T2P_CS_BILEVEL
FIELD	1427:24	1427:24	13	T2P_CS_BILEVEL
LEAF_NODE	1427:24	1427:24	14	T2P_CS_BILEVEL
LEAF_NODE	1427:38	1427:38	10	;
SELECTION	1428:4	1428:53	9	
KEYWORD	1428:4	1428:4	10	if
LEAF_NODE	1428:4	1428:4	11	if
LEAF_NODE	1428:6	1428:6	10	(
CONDITION	1428:7	1428:7	10	t2p -> tiff_photometric == PHOTOMETRIC_MINISWHITE
EXPR	1428:7	1428:30	11	t2p -> tiff_photometric == PHOTOMETRIC_MINISWHITE
FIELD	1428:7	1428:12	12	t2p -> tiff_photometric
LEAF_NODE	1428:7	1428:7	13	t2p
LEAF_NODE	1428:10	1428:10	13	->
LEAF_NODE	1428:12	1428:12	13	tiff_photometric
EQ_OPERATOR	1428:28	1428:28	12	==
LEAF_NODE	1428:28	1428:28	13	==
FIELD	1428:30	1428:30	12	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1428:30	1428:30	13	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1428:52	1428:52	10	)
STATEMENTS	1428:53	1430:4	10	
LEAF_NODE	1428:53	1428:53	11	{
STATEMENTS	1429:5	1429:5	11	
EXPR_STATEMENT	1429:5	1429:31	12	t2p -> pdf_switchdecode ^= 1 ;
EXPR	1429:5	1429:5	13	t2p -> pdf_switchdecode ^= 1
ASSIGN	1429:5	1429:30	14	t2p -> pdf_switchdecode ^= 1
LVAL	1429:5	1429:5	15	t2p -> pdf_switchdecode
FIELD	1429:5	1429:10	16	t2p -> pdf_switchdecode
LEAF_NODE	1429:5	1429:5	17	t2p
LEAF_NODE	1429:8	1429:8	17	->
LEAF_NODE	1429:10	1429:10	17	pdf_switchdecode
ASSIGN_OP	1429:27	1429:27	15	^=
LEAF_NODE	1429:27	1429:27	16	^=
RVAL	1429:30	1429:30	15	1
FIELD	1429:30	1429:30	16	1
LEAF_NODE	1429:30	1429:30	17	1
LEAF_NODE	1429:31	1429:31	13	;
LEAF_NODE	1430:4	1430:4	11	}
LEAF_NODE	1431:3	1431:3	8	}
SELECTION	1431:5	1431:10	6	
KEYWORD	1431:5	1431:5	7	else
LEAF_NODE	1431:5	1431:5	8	else
STATEMENTS	1431:10	1436:3	7	
LEAF_NODE	1431:10	1431:10	8	{
STATEMENTS	1432:4	1433:4	8	
EXPR_STATEMENT	1432:4	1432:35	9	t2p -> pdf_colorspace = T2P_CS_GRAY ;
EXPR	1432:4	1432:4	10	t2p -> pdf_colorspace = T2P_CS_GRAY
ASSIGN	1432:4	1432:24	11	t2p -> pdf_colorspace = T2P_CS_GRAY
LVAL	1432:4	1432:4	12	t2p -> pdf_colorspace
FIELD	1432:4	1432:9	13	t2p -> pdf_colorspace
LEAF_NODE	1432:4	1432:4	14	t2p
LEAF_NODE	1432:7	1432:7	14	->
LEAF_NODE	1432:9	1432:9	14	pdf_colorspace
ASSIGN_OP	1432:23	1432:23	12	=
LEAF_NODE	1432:23	1432:23	13	=
RVAL	1432:24	1432:24	12	T2P_CS_GRAY
FIELD	1432:24	1432:24	13	T2P_CS_GRAY
LEAF_NODE	1432:24	1432:24	14	T2P_CS_GRAY
LEAF_NODE	1432:35	1432:35	10	;
SELECTION	1433:4	1433:53	9	
KEYWORD	1433:4	1433:4	10	if
LEAF_NODE	1433:4	1433:4	11	if
LEAF_NODE	1433:6	1433:6	10	(
CONDITION	1433:7	1433:7	10	t2p -> tiff_photometric == PHOTOMETRIC_MINISWHITE
EXPR	1433:7	1433:30	11	t2p -> tiff_photometric == PHOTOMETRIC_MINISWHITE
FIELD	1433:7	1433:12	12	t2p -> tiff_photometric
LEAF_NODE	1433:7	1433:7	13	t2p
LEAF_NODE	1433:10	1433:10	13	->
LEAF_NODE	1433:12	1433:12	13	tiff_photometric
EQ_OPERATOR	1433:28	1433:28	12	==
LEAF_NODE	1433:28	1433:28	13	==
FIELD	1433:30	1433:30	12	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1433:30	1433:30	13	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1433:52	1433:52	10	)
STATEMENTS	1433:53	1435:4	10	
LEAF_NODE	1433:53	1433:53	11	{
STATEMENTS	1434:5	1434:5	11	
EXPR_STATEMENT	1434:5	1434:31	12	t2p -> pdf_switchdecode ^= 1 ;
EXPR	1434:5	1434:5	13	t2p -> pdf_switchdecode ^= 1
ASSIGN	1434:5	1434:30	14	t2p -> pdf_switchdecode ^= 1
LVAL	1434:5	1434:5	15	t2p -> pdf_switchdecode
FIELD	1434:5	1434:10	16	t2p -> pdf_switchdecode
LEAF_NODE	1434:5	1434:5	17	t2p
LEAF_NODE	1434:8	1434:8	17	->
LEAF_NODE	1434:10	1434:10	17	pdf_switchdecode
ASSIGN_OP	1434:27	1434:27	15	^=
LEAF_NODE	1434:27	1434:27	16	^=
RVAL	1434:30	1434:30	15	1
FIELD	1434:30	1434:30	16	1
LEAF_NODE	1434:30	1434:30	17	1
LEAF_NODE	1434:31	1434:31	13	;
LEAF_NODE	1435:4	1435:4	11	}
LEAF_NODE	1436:3	1436:3	8	}
JUMP_STATEMENT	1437:3	1437:8	6	break DESTINATION ;
KEYWORD	1437:3	1437:3	7	break
LEAF_NODE	1437:3	1437:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1437:8	1437:8	7	;
LABEL	1438:2	1438:22	6	case PHOTOMETRIC_RGB :
LEAF_NODE	1438:2	1438:2	7	case
LEAF_NODE	1438:7	1438:7	7	PHOTOMETRIC_RGB
LEAF_NODE	1438:22	1438:22	7	:
EXPR_STATEMENT	1439:3	1439:33	6	t2p -> pdf_colorspace = T2P_CS_RGB ;
EXPR	1439:3	1439:3	7	t2p -> pdf_colorspace = T2P_CS_RGB
ASSIGN	1439:3	1439:23	8	t2p -> pdf_colorspace = T2P_CS_RGB
LVAL	1439:3	1439:3	9	t2p -> pdf_colorspace
FIELD	1439:3	1439:8	10	t2p -> pdf_colorspace
LEAF_NODE	1439:3	1439:3	11	t2p
LEAF_NODE	1439:6	1439:6	11	->
LEAF_NODE	1439:8	1439:8	11	pdf_colorspace
ASSIGN_OP	1439:22	1439:22	9	=
LEAF_NODE	1439:22	1439:22	10	=
RVAL	1439:23	1439:23	9	T2P_CS_RGB
FIELD	1439:23	1439:23	10	T2P_CS_RGB
LEAF_NODE	1439:23	1439:23	11	T2P_CS_RGB
LEAF_NODE	1439:33	1439:33	7	;
SELECTION	1440:3	1440:37	6	
KEYWORD	1440:3	1440:3	7	if
LEAF_NODE	1440:3	1440:3	8	if
LEAF_NODE	1440:5	1440:5	7	(
CONDITION	1440:6	1440:6	7	t2p -> tiff_samplesperpixel == 3
EXPR	1440:6	1440:35	8	t2p -> tiff_samplesperpixel == 3
FIELD	1440:6	1440:11	9	t2p -> tiff_samplesperpixel
LEAF_NODE	1440:6	1440:6	10	t2p
LEAF_NODE	1440:9	1440:9	10	->
LEAF_NODE	1440:11	1440:11	10	tiff_samplesperpixel
EQ_OPERATOR	1440:32	1440:32	9	==
LEAF_NODE	1440:32	1440:32	10	==
FIELD	1440:35	1440:35	9	3
LEAF_NODE	1440:35	1440:35	10	3
LEAF_NODE	1440:36	1440:36	7	)
STATEMENTS	1440:37	1442:3	7	
LEAF_NODE	1440:37	1440:37	8	{
STATEMENTS	1441:4	1441:4	8	
JUMP_STATEMENT	1441:4	1441:9	9	break DESTINATION ;
KEYWORD	1441:4	1441:4	10	break
LEAF_NODE	1441:4	1441:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1441:9	1441:9	10	;
LEAF_NODE	1442:3	1442:3	8	}
SELECTION	1443:3	1443:53	6	
KEYWORD	1443:3	1443:3	7	if
LEAF_NODE	1443:3	1443:3	8	if
LEAF_NODE	1443:5	1443:5	7	(
CONDITION	1443:6	1443:6	7	TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
EXPR	1443:6	1443:6	8	TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
FUNCTION_CALL	1443:6	1443:51	9	TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
CALLEE	1443:6	1443:6	10	TIFFGetField
LEAF_NODE	1443:6	1443:6	11	TIFFGetField
LEAF_NODE	1443:18	1443:18	10	(
ARGUMENT	1443:19	1443:19	10	input
FIELD	1443:19	1443:19	11	input
LEAF_NODE	1443:19	1443:19	12	input
LEAF_NODE	1443:24	1443:24	10	,
ARGUMENT	1443:26	1443:26	10	TIFFTAG_INDEXED
FIELD	1443:26	1443:26	11	TIFFTAG_INDEXED
LEAF_NODE	1443:26	1443:26	12	TIFFTAG_INDEXED
LEAF_NODE	1443:41	1443:41	10	,
ARGUMENT	1443:43	1443:43	10	& xuint16
UNARY_EXPR	1443:43	1443:44	11	& xuint16
UNARY_OPERATOR	1443:43	1443:43	12	&
LEAF_NODE	1443:43	1443:43	13	&
FIELD	1443:44	1443:44	12	xuint16
LEAF_NODE	1443:44	1443:44	13	xuint16
LEAF_NODE	1443:51	1443:51	10	)
LEAF_NODE	1443:52	1443:52	7	)
STATEMENTS	1443:53	1446:3	7	
LEAF_NODE	1443:53	1443:53	8	{
STATEMENTS	1444:4	1444:4	8	
SELECTION	1444:4	1445:5	9	
KEYWORD	1444:4	1444:4	10	if
LEAF_NODE	1444:4	1444:4	11	if
LEAF_NODE	1444:6	1444:6	10	(
CONDITION	1444:7	1444:7	10	xuint16 == 1
EXPR	1444:7	1444:16	11	xuint16 == 1
FIELD	1444:7	1444:7	12	xuint16
LEAF_NODE	1444:7	1444:7	13	xuint16
EQ_OPERATOR	1444:14	1444:14	12	==
LEAF_NODE	1444:14	1444:14	13	==
FIELD	1444:16	1444:16	12	1
LEAF_NODE	1444:16	1444:16	13	1
LEAF_NODE	1444:17	1444:17	10	)
STATEMENTS	1445:5	1445:5	10	
JUMP_STATEMENT	1445:5	1445:29	11	goto photometric_palette ;
KEYWORD	1445:5	1445:5	12	goto
LEAF_NODE	1445:5	1445:5	13	goto
DESTINATION	1445:10	1445:10	12	photometric_palette
LEAF_NODE	1445:10	1445:10	13	photometric_palette
LEAF_NODE	1445:29	1445:29	12	;
LEAF_NODE	1446:3	1446:3	8	}
SELECTION	1447:3	1447:37	6	
KEYWORD	1447:3	1447:3	7	if
LEAF_NODE	1447:3	1447:3	8	if
LEAF_NODE	1447:5	1447:5	7	(
CONDITION	1447:6	1447:6	7	t2p -> tiff_samplesperpixel > 3
EXPR	1447:6	1447:34	8	t2p -> tiff_samplesperpixel > 3
FIELD	1447:6	1447:11	9	t2p -> tiff_samplesperpixel
LEAF_NODE	1447:6	1447:6	10	t2p
LEAF_NODE	1447:9	1447:9	10	->
LEAF_NODE	1447:11	1447:11	10	tiff_samplesperpixel
REL_OPERATOR	1447:32	1447:32	9	>
LEAF_NODE	1447:32	1447:32	10	>
FIELD	1447:34	1447:34	9	3
LEAF_NODE	1447:34	1447:34	10	3
LEAF_NODE	1447:35	1447:35	7	)
STATEMENTS	1447:37	1502:3	7	
LEAF_NODE	1447:37	1447:37	8	{
STATEMENTS	1448:4	1493:6	8	
SELECTION	1448:4	1448:39	9	
KEYWORD	1448:4	1448:4	10	if
LEAF_NODE	1448:4	1448:4	11	if
LEAF_NODE	1448:6	1448:6	10	(
CONDITION	1448:7	1448:7	10	t2p -> tiff_samplesperpixel == 4
EXPR	1448:7	1448:36	11	t2p -> tiff_samplesperpixel == 4
FIELD	1448:7	1448:12	12	t2p -> tiff_samplesperpixel
LEAF_NODE	1448:7	1448:7	13	t2p
LEAF_NODE	1448:10	1448:10	13	->
LEAF_NODE	1448:12	1448:12	13	tiff_samplesperpixel
EQ_OPERATOR	1448:33	1448:33	12	==
LEAF_NODE	1448:33	1448:33	13	==
FIELD	1448:36	1448:36	12	4
LEAF_NODE	1448:36	1448:36	13	4
LEAF_NODE	1448:37	1448:37	10	)
STATEMENTS	1448:39	1493:4	10	
LEAF_NODE	1448:39	1448:39	11	{
STATEMENTS	1449:5	1492:5	11	
EXPR_STATEMENT	1449:5	1449:37	12	t2p -> pdf_colorspace = T2P_CS_RGB ;
EXPR	1449:5	1449:5	13	t2p -> pdf_colorspace = T2P_CS_RGB
ASSIGN	1449:5	1449:27	14	t2p -> pdf_colorspace = T2P_CS_RGB
LVAL	1449:5	1449:5	15	t2p -> pdf_colorspace
FIELD	1449:5	1449:10	16	t2p -> pdf_colorspace
LEAF_NODE	1449:5	1449:5	17	t2p
LEAF_NODE	1449:8	1449:8	17	->
LEAF_NODE	1449:10	1449:10	17	pdf_colorspace
ASSIGN_OP	1449:25	1449:25	15	=
LEAF_NODE	1449:25	1449:25	16	=
RVAL	1449:27	1449:27	15	T2P_CS_RGB
FIELD	1449:27	1449:27	16	T2P_CS_RGB
LEAF_NODE	1449:27	1449:27	17	T2P_CS_RGB
LEAF_NODE	1449:37	1449:37	13	;
SELECTION	1450:5	1453:25	12	
KEYWORD	1450:5	1450:5	13	if
LEAF_NODE	1450:5	1450:5	14	if
LEAF_NODE	1450:7	1450:7	13	(
CONDITION	1450:8	1450:8	13	TIFFGetField ( input , TIFFTAG_EXTRASAMPLES , & xuint16 , & xuint16p ) && xuint16 == 1
EXPR	1450:8	1450:8	14	TIFFGetField ( input , TIFFTAG_EXTRASAMPLES , & xuint16 , & xuint16p ) && xuint16 == 1
AND	1450:8	1453:11	15	TIFFGetField ( input , TIFFTAG_EXTRASAMPLES , & xuint16 , & xuint16p ) && xuint16 == 1
EXPR	1450:8	1450:8	16	TIFFGetField ( input , TIFFTAG_EXTRASAMPLES , & xuint16 , & xuint16p )
FUNCTION_CALL	1450:8	1452:26	17	TIFFGetField ( input , TIFFTAG_EXTRASAMPLES , & xuint16 , & xuint16p )
CALLEE	1450:8	1450:8	18	TIFFGetField
LEAF_NODE	1450:8	1450:8	19	TIFFGetField
LEAF_NODE	1450:20	1450:20	18	(
ARGUMENT	1450:21	1450:21	18	input
FIELD	1450:21	1450:21	19	input
LEAF_NODE	1450:21	1450:21	20	input
LEAF_NODE	1450:26	1450:26	18	,
ARGUMENT	1451:7	1451:7	18	TIFFTAG_EXTRASAMPLES
FIELD	1451:7	1451:7	19	TIFFTAG_EXTRASAMPLES
LEAF_NODE	1451:7	1451:7	20	TIFFTAG_EXTRASAMPLES
LEAF_NODE	1451:27	1451:27	18	,
ARGUMENT	1452:7	1452:7	18	& xuint16
UNARY_EXPR	1452:7	1452:8	19	& xuint16
UNARY_OPERATOR	1452:7	1452:7	20	&
LEAF_NODE	1452:7	1452:7	21	&
FIELD	1452:8	1452:8	20	xuint16
LEAF_NODE	1452:8	1452:8	21	xuint16
LEAF_NODE	1452:15	1452:15	18	,
ARGUMENT	1452:17	1452:17	18	& xuint16p
UNARY_EXPR	1452:17	1452:18	19	& xuint16p
UNARY_OPERATOR	1452:17	1452:17	20	&
LEAF_NODE	1452:17	1452:17	21	&
FIELD	1452:18	1452:18	20	xuint16p
LEAF_NODE	1452:18	1452:18	21	xuint16p
LEAF_NODE	1452:26	1452:26	18	)
LEAF_NODE	1453:8	1453:8	16	&&
EXPR	1453:11	1453:22	16	xuint16 == 1
FIELD	1453:11	1453:11	17	xuint16
LEAF_NODE	1453:11	1453:11	18	xuint16
EQ_OPERATOR	1453:19	1453:19	17	==
LEAF_NODE	1453:19	1453:19	18	==
FIELD	1453:22	1453:22	17	1
LEAF_NODE	1453:22	1453:22	18	1
LEAF_NODE	1453:23	1453:23	13	)
STATEMENTS	1453:25	1485:5	13	
LEAF_NODE	1453:25	1453:25	14	{
STATEMENTS	1454:6	1484:7	14	
SELECTION	1454:6	1454:47	15	
KEYWORD	1454:6	1454:6	16	if
LEAF_NODE	1454:6	1454:6	17	if
LEAF_NODE	1454:8	1454:8	16	(
CONDITION	1454:9	1454:9	16	xuint16p [ 0 ] == EXTRASAMPLE_ASSOCALPHA
EXPR	1454:9	1454:24	17	xuint16p [ 0 ] == EXTRASAMPLE_ASSOCALPHA
FIELD	1454:9	1454:19	18	xuint16p [ 0 ]
LEAF_NODE	1454:9	1454:9	19	xuint16p
LEAF_NODE	1454:17	1454:17	19	[
EXPR	1454:18	1454:18	19	0
FIELD	1454:18	1454:18	20	0
LEAF_NODE	1454:18	1454:18	21	0
LEAF_NODE	1454:19	1454:19	19	]
EQ_OPERATOR	1454:21	1454:21	18	==
LEAF_NODE	1454:21	1454:21	19	==
FIELD	1454:24	1454:24	18	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	1454:24	1454:24	19	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	1454:46	1454:46	16	)
STATEMENTS	1454:47	1466:6	16	
LEAF_NODE	1454:47	1454:47	17	{
STATEMENTS	1455:7	1465:7	17	
SELECTION	1455:7	1456:7	18	
KEYWORD	1455:7	1455:7	19	if
LEAF_NODE	1455:7	1455:7	20	if
LEAF_NODE	1455:9	1455:9	19	(
CONDITION	1455:11	1455:11	19	t2p -> tiff_bitspersample != 8
EXPR	1455:11	1455:38	20	t2p -> tiff_bitspersample != 8
FIELD	1455:11	1455:16	21	t2p -> tiff_bitspersample
LEAF_NODE	1455:11	1455:11	22	t2p
LEAF_NODE	1455:14	1455:14	22	->
LEAF_NODE	1455:16	1455:16	22	tiff_bitspersample
EQ_OPERATOR	1455:35	1455:35	21	!=
LEAF_NODE	1455:35	1455:35	22	!=
FIELD	1455:38	1455:38	21	8
LEAF_NODE	1455:38	1455:38	22	8
LEAF_NODE	1455:40	1455:40	19	)
STATEMENTS	1456:7	1463:7	19	
LEAF_NODE	1456:7	1456:7	20	{
STATEMENTS	1457:11	1462:11	20	
EXPR_STATEMENT	1457:11	1460:36	21	TIFFError ( TIFF2PDF_MODULE , "No support for BitsPerSample=%d for RGBA" , t2p -> tiff_bitspersample ) ;
EXPR	1457:11	1457:11	22	TIFFError ( TIFF2PDF_MODULE , "No support for BitsPerSample=%d for RGBA" , t2p -> tiff_bitspersample )
FUNCTION_CALL	1457:11	1460:35	23	TIFFError ( TIFF2PDF_MODULE , "No support for BitsPerSample=%d for RGBA" , t2p -> tiff_bitspersample )
CALLEE	1457:11	1457:11	24	TIFFError
LEAF_NODE	1457:11	1457:11	25	TIFFError
LEAF_NODE	1457:20	1457:20	24	(
ARGUMENT	1458:12	1458:12	24	TIFF2PDF_MODULE
FIELD	1458:12	1458:12	25	TIFF2PDF_MODULE
LEAF_NODE	1458:12	1458:12	26	TIFF2PDF_MODULE
LEAF_NODE	1458:27	1458:27	24	,
ARGUMENT	1459:12	1459:12	24	"No support for BitsPerSample=%d for RGBA"
FIELD	1459:12	1459:12	25	"No support for BitsPerSample=%d for RGBA"
LEAF_NODE	1459:12	1459:12	26	"No support for BitsPerSample=%d for RGBA"
LEAF_NODE	1459:54	1459:54	24	,
ARGUMENT	1460:12	1460:12	24	t2p -> tiff_bitspersample
FIELD	1460:12	1460:17	25	t2p -> tiff_bitspersample
LEAF_NODE	1460:12	1460:12	26	t2p
LEAF_NODE	1460:15	1460:15	26	->
LEAF_NODE	1460:17	1460:17	26	tiff_bitspersample
LEAF_NODE	1460:35	1460:35	24	)
LEAF_NODE	1460:36	1460:36	22	;
EXPR_STATEMENT	1461:11	1461:41	21	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1461:11	1461:11	22	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1461:11	1461:28	23	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1461:11	1461:11	24	t2p -> t2p_error
FIELD	1461:11	1461:16	25	t2p -> t2p_error
LEAF_NODE	1461:11	1461:11	26	t2p
LEAF_NODE	1461:14	1461:14	26	->
LEAF_NODE	1461:16	1461:16	26	t2p_error
ASSIGN_OP	1461:26	1461:26	24	=
LEAF_NODE	1461:26	1461:26	25	=
RVAL	1461:28	1461:28	24	T2P_ERR_ERROR
FIELD	1461:28	1461:28	25	T2P_ERR_ERROR
LEAF_NODE	1461:28	1461:28	26	T2P_ERR_ERROR
LEAF_NODE	1461:41	1461:41	22	;
JUMP_STATEMENT	1462:11	1462:17	21	return DESTINATION ;
KEYWORD	1462:11	1462:11	22	return
LEAF_NODE	1462:11	1462:11	23	return
LEAF_NODE	0:0	0:0	22	DESTINATION
LEAF_NODE	1462:17	1462:17	22	;
LEAF_NODE	1463:7	1463:7	20	}
EXPR_STATEMENT	1464:7	1464:46	18	t2p -> pdf_sample = T2P_SAMPLE_RGBAA_TO_RGB ;
EXPR	1464:7	1464:7	19	t2p -> pdf_sample = T2P_SAMPLE_RGBAA_TO_RGB
ASSIGN	1464:7	1464:23	20	t2p -> pdf_sample = T2P_SAMPLE_RGBAA_TO_RGB
LVAL	1464:7	1464:7	21	t2p -> pdf_sample
FIELD	1464:7	1464:12	22	t2p -> pdf_sample
LEAF_NODE	1464:7	1464:7	23	t2p
LEAF_NODE	1464:10	1464:10	23	->
LEAF_NODE	1464:12	1464:12	23	pdf_sample
ASSIGN_OP	1464:22	1464:22	21	=
LEAF_NODE	1464:22	1464:22	22	=
RVAL	1464:23	1464:23	21	T2P_SAMPLE_RGBAA_TO_RGB
FIELD	1464:23	1464:23	22	T2P_SAMPLE_RGBAA_TO_RGB
LEAF_NODE	1464:23	1464:23	23	T2P_SAMPLE_RGBAA_TO_RGB
LEAF_NODE	1464:46	1464:46	19	;
JUMP_STATEMENT	1465:7	1465:12	18	break DESTINATION ;
KEYWORD	1465:7	1465:7	19	break
LEAF_NODE	1465:7	1465:7	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	1465:12	1465:12	19	;
LEAF_NODE	1466:6	1466:6	17	}
SELECTION	1467:6	1467:47	15	
KEYWORD	1467:6	1467:6	16	if
LEAF_NODE	1467:6	1467:6	17	if
LEAF_NODE	1467:8	1467:8	16	(
CONDITION	1467:9	1467:9	16	xuint16p [ 0 ] == EXTRASAMPLE_UNASSALPHA
EXPR	1467:9	1467:24	17	xuint16p [ 0 ] == EXTRASAMPLE_UNASSALPHA
FIELD	1467:9	1467:19	18	xuint16p [ 0 ]
LEAF_NODE	1467:9	1467:9	19	xuint16p
LEAF_NODE	1467:17	1467:17	19	[
EXPR	1467:18	1467:18	19	0
FIELD	1467:18	1467:18	20	0
LEAF_NODE	1467:18	1467:18	21	0
LEAF_NODE	1467:19	1467:19	19	]
EQ_OPERATOR	1467:21	1467:21	18	==
LEAF_NODE	1467:21	1467:21	19	==
FIELD	1467:24	1467:24	18	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	1467:24	1467:24	19	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	1467:46	1467:46	16	)
STATEMENTS	1467:47	1479:6	16	
LEAF_NODE	1467:47	1467:47	17	{
STATEMENTS	1468:7	1478:7	17	
SELECTION	1468:7	1469:7	18	
KEYWORD	1468:7	1468:7	19	if
LEAF_NODE	1468:7	1468:7	20	if
LEAF_NODE	1468:9	1468:9	19	(
CONDITION	1468:11	1468:11	19	t2p -> tiff_bitspersample != 8
EXPR	1468:11	1468:38	20	t2p -> tiff_bitspersample != 8
FIELD	1468:11	1468:16	21	t2p -> tiff_bitspersample
LEAF_NODE	1468:11	1468:11	22	t2p
LEAF_NODE	1468:14	1468:14	22	->
LEAF_NODE	1468:16	1468:16	22	tiff_bitspersample
EQ_OPERATOR	1468:35	1468:35	21	!=
LEAF_NODE	1468:35	1468:35	22	!=
FIELD	1468:38	1468:38	21	8
LEAF_NODE	1468:38	1468:38	22	8
LEAF_NODE	1468:40	1468:40	19	)
STATEMENTS	1469:7	1476:7	19	
LEAF_NODE	1469:7	1469:7	20	{
STATEMENTS	1470:11	1475:11	20	
EXPR_STATEMENT	1470:11	1473:36	21	TIFFError ( TIFF2PDF_MODULE , "No support for BitsPerSample=%d for RGBA" , t2p -> tiff_bitspersample ) ;
EXPR	1470:11	1470:11	22	TIFFError ( TIFF2PDF_MODULE , "No support for BitsPerSample=%d for RGBA" , t2p -> tiff_bitspersample )
FUNCTION_CALL	1470:11	1473:35	23	TIFFError ( TIFF2PDF_MODULE , "No support for BitsPerSample=%d for RGBA" , t2p -> tiff_bitspersample )
CALLEE	1470:11	1470:11	24	TIFFError
LEAF_NODE	1470:11	1470:11	25	TIFFError
LEAF_NODE	1470:20	1470:20	24	(
ARGUMENT	1471:12	1471:12	24	TIFF2PDF_MODULE
FIELD	1471:12	1471:12	25	TIFF2PDF_MODULE
LEAF_NODE	1471:12	1471:12	26	TIFF2PDF_MODULE
LEAF_NODE	1471:27	1471:27	24	,
ARGUMENT	1472:12	1472:12	24	"No support for BitsPerSample=%d for RGBA"
FIELD	1472:12	1472:12	25	"No support for BitsPerSample=%d for RGBA"
LEAF_NODE	1472:12	1472:12	26	"No support for BitsPerSample=%d for RGBA"
LEAF_NODE	1472:54	1472:54	24	,
ARGUMENT	1473:12	1473:12	24	t2p -> tiff_bitspersample
FIELD	1473:12	1473:17	25	t2p -> tiff_bitspersample
LEAF_NODE	1473:12	1473:12	26	t2p
LEAF_NODE	1473:15	1473:15	26	->
LEAF_NODE	1473:17	1473:17	26	tiff_bitspersample
LEAF_NODE	1473:35	1473:35	24	)
LEAF_NODE	1473:36	1473:36	22	;
EXPR_STATEMENT	1474:11	1474:41	21	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1474:11	1474:11	22	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1474:11	1474:28	23	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1474:11	1474:11	24	t2p -> t2p_error
FIELD	1474:11	1474:16	25	t2p -> t2p_error
LEAF_NODE	1474:11	1474:11	26	t2p
LEAF_NODE	1474:14	1474:14	26	->
LEAF_NODE	1474:16	1474:16	26	t2p_error
ASSIGN_OP	1474:26	1474:26	24	=
LEAF_NODE	1474:26	1474:26	25	=
RVAL	1474:28	1474:28	24	T2P_ERR_ERROR
FIELD	1474:28	1474:28	25	T2P_ERR_ERROR
LEAF_NODE	1474:28	1474:28	26	T2P_ERR_ERROR
LEAF_NODE	1474:41	1474:41	22	;
JUMP_STATEMENT	1475:11	1475:17	21	return DESTINATION ;
KEYWORD	1475:11	1475:11	22	return
LEAF_NODE	1475:11	1475:11	23	return
LEAF_NODE	0:0	0:0	22	DESTINATION
LEAF_NODE	1475:17	1475:17	22	;
LEAF_NODE	1476:7	1476:7	20	}
EXPR_STATEMENT	1477:7	1477:45	18	t2p -> pdf_sample = T2P_SAMPLE_RGBA_TO_RGB ;
EXPR	1477:7	1477:7	19	t2p -> pdf_sample = T2P_SAMPLE_RGBA_TO_RGB
ASSIGN	1477:7	1477:23	20	t2p -> pdf_sample = T2P_SAMPLE_RGBA_TO_RGB
LVAL	1477:7	1477:7	21	t2p -> pdf_sample
FIELD	1477:7	1477:12	22	t2p -> pdf_sample
LEAF_NODE	1477:7	1477:7	23	t2p
LEAF_NODE	1477:10	1477:10	23	->
LEAF_NODE	1477:12	1477:12	23	pdf_sample
ASSIGN_OP	1477:22	1477:22	21	=
LEAF_NODE	1477:22	1477:22	22	=
RVAL	1477:23	1477:23	21	T2P_SAMPLE_RGBA_TO_RGB
FIELD	1477:23	1477:23	22	T2P_SAMPLE_RGBA_TO_RGB
LEAF_NODE	1477:23	1477:23	23	T2P_SAMPLE_RGBA_TO_RGB
LEAF_NODE	1477:45	1477:45	19	;
JUMP_STATEMENT	1478:7	1478:12	18	break DESTINATION ;
KEYWORD	1478:7	1478:7	19	break
LEAF_NODE	1478:7	1478:7	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	1478:12	1478:12	19	;
LEAF_NODE	1479:6	1479:6	17	}
EXPR_STATEMENT	1480:6	1483:27	15	TIFFWarning ( TIFF2PDF_MODULE , "RGB image %s has 4 samples per pixel, assuming RGBA" , TIFFFileName ( input ) ) ;
EXPR	1480:6	1480:6	16	TIFFWarning ( TIFF2PDF_MODULE , "RGB image %s has 4 samples per pixel, assuming RGBA" , TIFFFileName ( input ) )
FUNCTION_CALL	1480:6	1483:26	17	TIFFWarning ( TIFF2PDF_MODULE , "RGB image %s has 4 samples per pixel, assuming RGBA" , TIFFFileName ( input ) )
CALLEE	1480:6	1480:6	18	TIFFWarning
LEAF_NODE	1480:6	1480:6	19	TIFFWarning
LEAF_NODE	1480:17	1480:17	18	(
ARGUMENT	1481:7	1481:7	18	TIFF2PDF_MODULE
FIELD	1481:7	1481:7	19	TIFF2PDF_MODULE
LEAF_NODE	1481:7	1481:7	20	TIFF2PDF_MODULE
LEAF_NODE	1481:22	1481:22	18	,
ARGUMENT	1482:7	1482:7	18	"RGB image %s has 4 samples per pixel, assuming RGBA"
FIELD	1482:7	1482:7	19	"RGB image %s has 4 samples per pixel, assuming RGBA"
LEAF_NODE	1482:7	1482:7	20	"RGB image %s has 4 samples per pixel, assuming RGBA"
LEAF_NODE	1482:60	1482:60	18	,
ARGUMENT	1483:7	1483:7	18	TIFFFileName ( input )
FUNCTION_CALL	1483:7	1483:25	19	TIFFFileName ( input )
CALLEE	1483:7	1483:7	20	TIFFFileName
LEAF_NODE	1483:7	1483:7	21	TIFFFileName
LEAF_NODE	1483:19	1483:19	20	(
ARGUMENT	1483:20	1483:20	20	input
FIELD	1483:20	1483:20	21	input
LEAF_NODE	1483:20	1483:20	22	input
LEAF_NODE	1483:25	1483:25	20	)
LEAF_NODE	1483:26	1483:26	18	)
LEAF_NODE	1483:27	1483:27	16	;
JUMP_STATEMENT	1484:7	1484:12	15	break DESTINATION ;
KEYWORD	1484:7	1484:7	16	break
LEAF_NODE	1484:7	1484:7	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	1484:12	1484:12	16	;
LEAF_NODE	1485:5	1485:5	14	}
EXPR_STATEMENT	1486:5	1486:36	12	t2p -> pdf_colorspace = T2P_CS_CMYK ;
EXPR	1486:5	1486:5	13	t2p -> pdf_colorspace = T2P_CS_CMYK
ASSIGN	1486:5	1486:25	14	t2p -> pdf_colorspace = T2P_CS_CMYK
LVAL	1486:5	1486:5	15	t2p -> pdf_colorspace
FIELD	1486:5	1486:10	16	t2p -> pdf_colorspace
LEAF_NODE	1486:5	1486:5	17	t2p
LEAF_NODE	1486:8	1486:8	17	->
LEAF_NODE	1486:10	1486:10	17	pdf_colorspace
ASSIGN_OP	1486:24	1486:24	15	=
LEAF_NODE	1486:24	1486:24	16	=
RVAL	1486:25	1486:25	15	T2P_CS_CMYK
FIELD	1486:25	1486:25	16	T2P_CS_CMYK
LEAF_NODE	1486:25	1486:25	17	T2P_CS_CMYK
LEAF_NODE	1486:36	1486:36	13	;
EXPR_STATEMENT	1487:5	1487:31	12	t2p -> pdf_switchdecode ^= 1 ;
EXPR	1487:5	1487:5	13	t2p -> pdf_switchdecode ^= 1
ASSIGN	1487:5	1487:30	14	t2p -> pdf_switchdecode ^= 1
LVAL	1487:5	1487:5	15	t2p -> pdf_switchdecode
FIELD	1487:5	1487:10	16	t2p -> pdf_switchdecode
LEAF_NODE	1487:5	1487:5	17	t2p
LEAF_NODE	1487:8	1487:8	17	->
LEAF_NODE	1487:10	1487:10	17	pdf_switchdecode
ASSIGN_OP	1487:27	1487:27	15	^=
LEAF_NODE	1487:27	1487:27	16	^=
RVAL	1487:30	1487:30	15	1
FIELD	1487:30	1487:30	16	1
LEAF_NODE	1487:30	1487:30	17	1
LEAF_NODE	1487:31	1487:31	13	;
EXPR_STATEMENT	1488:5	1491:25	12	TIFFWarning ( TIFF2PDF_MODULE , "RGB image %s has 4 samples per pixel, assuming inverse CMYK" , TIFFFileName ( input ) ) ;
EXPR	1488:5	1488:5	13	TIFFWarning ( TIFF2PDF_MODULE , "RGB image %s has 4 samples per pixel, assuming inverse CMYK" , TIFFFileName ( input ) )
FUNCTION_CALL	1488:5	1491:24	14	TIFFWarning ( TIFF2PDF_MODULE , "RGB image %s has 4 samples per pixel, assuming inverse CMYK" , TIFFFileName ( input ) )
CALLEE	1488:5	1488:5	15	TIFFWarning
LEAF_NODE	1488:5	1488:5	16	TIFFWarning
LEAF_NODE	1488:16	1488:16	15	(
ARGUMENT	1489:6	1489:6	15	TIFF2PDF_MODULE
FIELD	1489:6	1489:6	16	TIFF2PDF_MODULE
LEAF_NODE	1489:6	1489:6	17	TIFF2PDF_MODULE
LEAF_NODE	1489:21	1489:21	15	,
ARGUMENT	1490:6	1490:6	15	"RGB image %s has 4 samples per pixel, assuming inverse CMYK"
FIELD	1490:6	1490:6	16	"RGB image %s has 4 samples per pixel, assuming inverse CMYK"
LEAF_NODE	1490:6	1490:6	17	"RGB image %s has 4 samples per pixel, assuming inverse CMYK"
LEAF_NODE	1490:67	1490:67	15	,
ARGUMENT	1491:5	1491:5	15	TIFFFileName ( input )
FUNCTION_CALL	1491:5	1491:23	16	TIFFFileName ( input )
CALLEE	1491:5	1491:5	17	TIFFFileName
LEAF_NODE	1491:5	1491:5	18	TIFFFileName
LEAF_NODE	1491:17	1491:17	17	(
ARGUMENT	1491:18	1491:18	17	input
FIELD	1491:18	1491:18	18	input
LEAF_NODE	1491:18	1491:18	19	input
LEAF_NODE	1491:23	1491:23	17	)
LEAF_NODE	1491:24	1491:24	15	)
LEAF_NODE	1491:25	1491:25	13	;
JUMP_STATEMENT	1492:5	1492:10	12	break DESTINATION ;
KEYWORD	1492:5	1492:5	13	break
LEAF_NODE	1492:5	1492:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1492:10	1492:10	13	;
LEAF_NODE	1493:4	1493:4	11	}
SELECTION	1493:6	1493:11	9	
KEYWORD	1493:6	1493:6	10	else
LEAF_NODE	1493:6	1493:6	11	else
STATEMENTS	1493:11	1501:4	10	
LEAF_NODE	1493:11	1493:11	11	{
STATEMENTS	1494:5	1500:5	11	
EXPR_STATEMENT	1494:5	1498:32	12	TIFFError ( TIFF2PDF_MODULE , "No support for RGB image %s with %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel ) ;
EXPR	1494:5	1494:5	13	TIFFError ( TIFF2PDF_MODULE , "No support for RGB image %s with %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel )
FUNCTION_CALL	1494:5	1498:31	14	TIFFError ( TIFF2PDF_MODULE , "No support for RGB image %s with %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel )
CALLEE	1494:5	1494:5	15	TIFFError
LEAF_NODE	1494:5	1494:5	16	TIFFError
LEAF_NODE	1494:14	1494:14	15	(
ARGUMENT	1495:6	1495:6	15	TIFF2PDF_MODULE
FIELD	1495:6	1495:6	16	TIFF2PDF_MODULE
LEAF_NODE	1495:6	1495:6	17	TIFF2PDF_MODULE
LEAF_NODE	1495:21	1495:21	15	,
ARGUMENT	1496:6	1496:6	15	"No support for RGB image %s with %u samples per pixel"
FIELD	1496:6	1496:6	16	"No support for RGB image %s with %u samples per pixel"
LEAF_NODE	1496:6	1496:6	17	"No support for RGB image %s with %u samples per pixel"
LEAF_NODE	1496:61	1496:61	15	,
ARGUMENT	1497:6	1497:6	15	TIFFFileName ( input )
FUNCTION_CALL	1497:6	1497:24	16	TIFFFileName ( input )
CALLEE	1497:6	1497:6	17	TIFFFileName
LEAF_NODE	1497:6	1497:6	18	TIFFFileName
LEAF_NODE	1497:18	1497:18	17	(
ARGUMENT	1497:19	1497:19	17	input
FIELD	1497:19	1497:19	18	input
LEAF_NODE	1497:19	1497:19	19	input
LEAF_NODE	1497:24	1497:24	17	)
LEAF_NODE	1497:25	1497:25	15	,
ARGUMENT	1498:6	1498:6	15	t2p -> tiff_samplesperpixel
FIELD	1498:6	1498:11	16	t2p -> tiff_samplesperpixel
LEAF_NODE	1498:6	1498:6	17	t2p
LEAF_NODE	1498:9	1498:9	17	->
LEAF_NODE	1498:11	1498:11	17	tiff_samplesperpixel
LEAF_NODE	1498:31	1498:31	15	)
LEAF_NODE	1498:32	1498:32	13	;
EXPR_STATEMENT	1499:5	1499:35	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1499:5	1499:5	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1499:5	1499:22	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1499:5	1499:5	15	t2p -> t2p_error
FIELD	1499:5	1499:10	16	t2p -> t2p_error
LEAF_NODE	1499:5	1499:5	17	t2p
LEAF_NODE	1499:8	1499:8	17	->
LEAF_NODE	1499:10	1499:10	17	t2p_error
ASSIGN_OP	1499:20	1499:20	15	=
LEAF_NODE	1499:20	1499:20	16	=
RVAL	1499:22	1499:22	15	T2P_ERR_ERROR
FIELD	1499:22	1499:22	16	T2P_ERR_ERROR
LEAF_NODE	1499:22	1499:22	17	T2P_ERR_ERROR
LEAF_NODE	1499:35	1499:35	13	;
JUMP_STATEMENT	1500:5	1500:10	12	break DESTINATION ;
KEYWORD	1500:5	1500:5	13	break
LEAF_NODE	1500:5	1500:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1500:10	1500:10	13	;
LEAF_NODE	1501:4	1501:4	11	}
LEAF_NODE	1502:3	1502:3	8	}
SELECTION	1502:5	1502:10	6	
KEYWORD	1502:5	1502:5	7	else
LEAF_NODE	1502:5	1502:5	8	else
STATEMENTS	1502:10	1510:3	7	
LEAF_NODE	1502:10	1502:10	8	{
STATEMENTS	1503:4	1509:4	8	
EXPR_STATEMENT	1503:4	1507:31	9	TIFFError ( TIFF2PDF_MODULE , "No support for RGB image %s with %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel ) ;
EXPR	1503:4	1503:4	10	TIFFError ( TIFF2PDF_MODULE , "No support for RGB image %s with %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel )
FUNCTION_CALL	1503:4	1507:30	11	TIFFError ( TIFF2PDF_MODULE , "No support for RGB image %s with %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel )
CALLEE	1503:4	1503:4	12	TIFFError
LEAF_NODE	1503:4	1503:4	13	TIFFError
LEAF_NODE	1503:13	1503:13	12	(
ARGUMENT	1504:5	1504:5	12	TIFF2PDF_MODULE
FIELD	1504:5	1504:5	13	TIFF2PDF_MODULE
LEAF_NODE	1504:5	1504:5	14	TIFF2PDF_MODULE
LEAF_NODE	1504:20	1504:20	12	,
ARGUMENT	1505:5	1505:5	12	"No support for RGB image %s with %u samples per pixel"
FIELD	1505:5	1505:5	13	"No support for RGB image %s with %u samples per pixel"
LEAF_NODE	1505:5	1505:5	14	"No support for RGB image %s with %u samples per pixel"
LEAF_NODE	1505:60	1505:60	12	,
ARGUMENT	1506:5	1506:5	12	TIFFFileName ( input )
FUNCTION_CALL	1506:5	1506:23	13	TIFFFileName ( input )
CALLEE	1506:5	1506:5	14	TIFFFileName
LEAF_NODE	1506:5	1506:5	15	TIFFFileName
LEAF_NODE	1506:17	1506:17	14	(
ARGUMENT	1506:18	1506:18	14	input
FIELD	1506:18	1506:18	15	input
LEAF_NODE	1506:18	1506:18	16	input
LEAF_NODE	1506:23	1506:23	14	)
LEAF_NODE	1506:24	1506:24	12	,
ARGUMENT	1507:5	1507:5	12	t2p -> tiff_samplesperpixel
FIELD	1507:5	1507:10	13	t2p -> tiff_samplesperpixel
LEAF_NODE	1507:5	1507:5	14	t2p
LEAF_NODE	1507:8	1507:8	14	->
LEAF_NODE	1507:10	1507:10	14	tiff_samplesperpixel
LEAF_NODE	1507:30	1507:30	12	)
LEAF_NODE	1507:31	1507:31	10	;
EXPR_STATEMENT	1508:4	1508:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1508:4	1508:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1508:4	1508:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1508:4	1508:4	12	t2p -> t2p_error
FIELD	1508:4	1508:9	13	t2p -> t2p_error
LEAF_NODE	1508:4	1508:4	14	t2p
LEAF_NODE	1508:7	1508:7	14	->
LEAF_NODE	1508:9	1508:9	14	t2p_error
ASSIGN_OP	1508:19	1508:19	12	=
LEAF_NODE	1508:19	1508:19	13	=
RVAL	1508:21	1508:21	12	T2P_ERR_ERROR
FIELD	1508:21	1508:21	13	T2P_ERR_ERROR
LEAF_NODE	1508:21	1508:21	14	T2P_ERR_ERROR
LEAF_NODE	1508:34	1508:34	10	;
JUMP_STATEMENT	1509:4	1509:9	9	break DESTINATION ;
KEYWORD	1509:4	1509:4	10	break
LEAF_NODE	1509:4	1509:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1509:9	1509:9	10	;
LEAF_NODE	1510:3	1510:3	8	}
LABEL	1511:2	1511:26	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	1511:2	1511:2	7	case
LEAF_NODE	1511:7	1511:7	7	PHOTOMETRIC_PALETTE
LEAF_NODE	1511:26	1511:26	7	:
LABEL	1512:3	1512:22	6	photometric_palette :
LEAF_NODE	1512:3	1512:3	7	photometric_palette
LEAF_NODE	1512:22	1512:22	7	:
SELECTION	1513:3	1513:35	6	
KEYWORD	1513:3	1513:3	7	if
LEAF_NODE	1513:3	1513:3	8	if
LEAF_NODE	1513:5	1513:5	7	(
CONDITION	1513:6	1513:6	7	t2p -> tiff_samplesperpixel != 1
EXPR	1513:6	1513:33	8	t2p -> tiff_samplesperpixel != 1
FIELD	1513:6	1513:11	9	t2p -> tiff_samplesperpixel
LEAF_NODE	1513:6	1513:6	10	t2p
LEAF_NODE	1513:9	1513:9	10	->
LEAF_NODE	1513:11	1513:11	10	tiff_samplesperpixel
EQ_OPERATOR	1513:31	1513:31	9	!=
LEAF_NODE	1513:31	1513:31	10	!=
FIELD	1513:33	1513:33	9	1
LEAF_NODE	1513:33	1513:33	10	1
LEAF_NODE	1513:34	1513:34	7	)
STATEMENTS	1513:35	1520:3	7	
LEAF_NODE	1513:35	1513:35	8	{
STATEMENTS	1514:4	1519:4	8	
EXPR_STATEMENT	1514:4	1517:25	9	TIFFError ( TIFF2PDF_MODULE , "No support for palettized image %s with not one sample per pixel" , TIFFFileName ( input ) ) ;
EXPR	1514:4	1514:4	10	TIFFError ( TIFF2PDF_MODULE , "No support for palettized image %s with not one sample per pixel" , TIFFFileName ( input ) )
FUNCTION_CALL	1514:4	1517:24	11	TIFFError ( TIFF2PDF_MODULE , "No support for palettized image %s with not one sample per pixel" , TIFFFileName ( input ) )
CALLEE	1514:4	1514:4	12	TIFFError
LEAF_NODE	1514:4	1514:4	13	TIFFError
LEAF_NODE	1514:13	1514:13	12	(
ARGUMENT	1515:5	1515:5	12	TIFF2PDF_MODULE
FIELD	1515:5	1515:5	13	TIFF2PDF_MODULE
LEAF_NODE	1515:5	1515:5	14	TIFF2PDF_MODULE
LEAF_NODE	1515:20	1515:20	12	,
ARGUMENT	1516:5	1516:5	12	"No support for palettized image %s with not one sample per pixel"
FIELD	1516:5	1516:5	13	"No support for palettized image %s with not one sample per pixel"
LEAF_NODE	1516:5	1516:5	14	"No support for palettized image %s with not one sample per pixel"
LEAF_NODE	1516:71	1516:71	12	,
ARGUMENT	1517:5	1517:5	12	TIFFFileName ( input )
FUNCTION_CALL	1517:5	1517:23	13	TIFFFileName ( input )
CALLEE	1517:5	1517:5	14	TIFFFileName
LEAF_NODE	1517:5	1517:5	15	TIFFFileName
LEAF_NODE	1517:17	1517:17	14	(
ARGUMENT	1517:18	1517:18	14	input
FIELD	1517:18	1517:18	15	input
LEAF_NODE	1517:18	1517:18	16	input
LEAF_NODE	1517:23	1517:23	14	)
LEAF_NODE	1517:24	1517:24	12	)
LEAF_NODE	1517:25	1517:25	10	;
EXPR_STATEMENT	1518:4	1518:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1518:4	1518:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1518:4	1518:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1518:4	1518:4	12	t2p -> t2p_error
FIELD	1518:4	1518:9	13	t2p -> t2p_error
LEAF_NODE	1518:4	1518:4	14	t2p
LEAF_NODE	1518:7	1518:7	14	->
LEAF_NODE	1518:9	1518:9	14	t2p_error
ASSIGN_OP	1518:19	1518:19	12	=
LEAF_NODE	1518:19	1518:19	13	=
RVAL	1518:21	1518:21	12	T2P_ERR_ERROR
FIELD	1518:21	1518:21	13	T2P_ERR_ERROR
LEAF_NODE	1518:21	1518:21	14	T2P_ERR_ERROR
LEAF_NODE	1518:34	1518:34	10	;
JUMP_STATEMENT	1519:4	1519:10	9	return DESTINATION ;
KEYWORD	1519:4	1519:4	10	return
LEAF_NODE	1519:4	1519:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1519:10	1519:10	10	;
LEAF_NODE	1520:3	1520:3	8	}
EXPR_STATEMENT	1521:3	1521:50	6	t2p -> pdf_colorspace = T2P_CS_RGB | T2P_CS_PALETTE ;
EXPR	1521:3	1521:3	7	t2p -> pdf_colorspace = T2P_CS_RGB | T2P_CS_PALETTE
ASSIGN	1521:3	1521:23	8	t2p -> pdf_colorspace = T2P_CS_RGB | T2P_CS_PALETTE
LVAL	1521:3	1521:3	9	t2p -> pdf_colorspace
FIELD	1521:3	1521:8	10	t2p -> pdf_colorspace
LEAF_NODE	1521:3	1521:3	11	t2p
LEAF_NODE	1521:6	1521:6	11	->
LEAF_NODE	1521:8	1521:8	11	pdf_colorspace
ASSIGN_OP	1521:22	1521:22	9	=
LEAF_NODE	1521:22	1521:22	10	=
RVAL	1521:23	1521:23	9	T2P_CS_RGB | T2P_CS_PALETTE
BIT_OR	1521:23	1521:36	10	T2P_CS_RGB | T2P_CS_PALETTE
BIT_OR_ELEM	1521:23	1521:23	11	T2P_CS_RGB
FIELD	1521:23	1521:23	12	T2P_CS_RGB
LEAF_NODE	1521:23	1521:23	13	T2P_CS_RGB
LEAF_NODE	1521:34	1521:34	11	|
BIT_OR_ELEM	1521:36	1521:36	11	T2P_CS_PALETTE
FIELD	1521:36	1521:36	12	T2P_CS_PALETTE
LEAF_NODE	1521:36	1521:36	13	T2P_CS_PALETTE
LEAF_NODE	1521:50	1521:50	7	;
EXPR_STATEMENT	1522:3	1522:55	6	t2p -> pdf_palettesize = 0x0001 << t2p -> tiff_bitspersample ;
EXPR	1522:3	1522:3	7	t2p -> pdf_palettesize = 0x0001 << t2p -> tiff_bitspersample
ASSIGN	1522:3	1522:24	8	t2p -> pdf_palettesize = 0x0001 << t2p -> tiff_bitspersample
LVAL	1522:3	1522:3	9	t2p -> pdf_palettesize
FIELD	1522:3	1522:8	10	t2p -> pdf_palettesize
LEAF_NODE	1522:3	1522:3	11	t2p
LEAF_NODE	1522:6	1522:6	11	->
LEAF_NODE	1522:8	1522:8	11	pdf_palettesize
ASSIGN_OP	1522:23	1522:23	9	=
LEAF_NODE	1522:23	1522:23	10	=
RVAL	1522:24	1522:32	9	0x0001 << t2p -> tiff_bitspersample
FIELD	1522:24	1522:24	10	0x0001
LEAF_NODE	1522:24	1522:24	11	0x0001
LEAF_NODE	1522:30	1522:30	10	<<
FIELD	1522:32	1522:37	10	t2p -> tiff_bitspersample
LEAF_NODE	1522:32	1522:32	11	t2p
LEAF_NODE	1522:35	1522:35	11	->
LEAF_NODE	1522:37	1522:37	11	tiff_bitspersample
LEAF_NODE	1522:55	1522:55	7	;
SELECTION	1523:3	1523:57	6	
KEYWORD	1523:3	1523:3	7	if
LEAF_NODE	1523:3	1523:3	8	if
LEAF_NODE	1523:5	1523:5	7	(
CONDITION	1523:6	1523:6	7	! TIFFGetField ( input , TIFFTAG_COLORMAP , & r , & g , & b )
EXPR	1523:6	1523:6	8	! TIFFGetField ( input , TIFFTAG_COLORMAP , & r , & g , & b )
UNARY_EXPR	1523:6	1523:7	9	! TIFFGetField ( input , TIFFTAG_COLORMAP , & r , & g , & b )
UNARY_OPERATOR	1523:6	1523:6	10	!
LEAF_NODE	1523:6	1523:6	11	!
FUNCTION_CALL	1523:7	1523:55	10	TIFFGetField ( input , TIFFTAG_COLORMAP , & r , & g , & b )
CALLEE	1523:7	1523:7	11	TIFFGetField
LEAF_NODE	1523:7	1523:7	12	TIFFGetField
LEAF_NODE	1523:19	1523:19	11	(
ARGUMENT	1523:20	1523:20	11	input
FIELD	1523:20	1523:20	12	input
LEAF_NODE	1523:20	1523:20	13	input
LEAF_NODE	1523:25	1523:25	11	,
ARGUMENT	1523:27	1523:27	11	TIFFTAG_COLORMAP
FIELD	1523:27	1523:27	12	TIFFTAG_COLORMAP
LEAF_NODE	1523:27	1523:27	13	TIFFTAG_COLORMAP
LEAF_NODE	1523:43	1523:43	11	,
ARGUMENT	1523:45	1523:45	11	& r
UNARY_EXPR	1523:45	1523:46	12	& r
UNARY_OPERATOR	1523:45	1523:45	13	&
LEAF_NODE	1523:45	1523:45	14	&
FIELD	1523:46	1523:46	13	r
LEAF_NODE	1523:46	1523:46	14	r
LEAF_NODE	1523:47	1523:47	11	,
ARGUMENT	1523:49	1523:49	11	& g
UNARY_EXPR	1523:49	1523:50	12	& g
UNARY_OPERATOR	1523:49	1523:49	13	&
LEAF_NODE	1523:49	1523:49	14	&
FIELD	1523:50	1523:50	13	g
LEAF_NODE	1523:50	1523:50	14	g
LEAF_NODE	1523:51	1523:51	11	,
ARGUMENT	1523:53	1523:53	11	& b
UNARY_EXPR	1523:53	1523:54	12	& b
UNARY_OPERATOR	1523:53	1523:53	13	&
LEAF_NODE	1523:53	1523:53	14	&
FIELD	1523:54	1523:54	13	b
LEAF_NODE	1523:54	1523:54	14	b
LEAF_NODE	1523:55	1523:55	11	)
LEAF_NODE	1523:56	1523:56	7	)
STATEMENTS	1523:57	1530:3	7	
LEAF_NODE	1523:57	1523:57	8	{
STATEMENTS	1524:4	1529:4	8	
EXPR_STATEMENT	1524:4	1527:25	9	TIFFError ( TIFF2PDF_MODULE , "Palettized image %s has no color map" , TIFFFileName ( input ) ) ;
EXPR	1524:4	1524:4	10	TIFFError ( TIFF2PDF_MODULE , "Palettized image %s has no color map" , TIFFFileName ( input ) )
FUNCTION_CALL	1524:4	1527:24	11	TIFFError ( TIFF2PDF_MODULE , "Palettized image %s has no color map" , TIFFFileName ( input ) )
CALLEE	1524:4	1524:4	12	TIFFError
LEAF_NODE	1524:4	1524:4	13	TIFFError
LEAF_NODE	1524:13	1524:13	12	(
ARGUMENT	1525:5	1525:5	12	TIFF2PDF_MODULE
FIELD	1525:5	1525:5	13	TIFF2PDF_MODULE
LEAF_NODE	1525:5	1525:5	14	TIFF2PDF_MODULE
LEAF_NODE	1525:20	1525:20	12	,
ARGUMENT	1526:5	1526:5	12	"Palettized image %s has no color map"
FIELD	1526:5	1526:5	13	"Palettized image %s has no color map"
LEAF_NODE	1526:5	1526:5	14	"Palettized image %s has no color map"
LEAF_NODE	1526:43	1526:43	12	,
ARGUMENT	1527:5	1527:5	12	TIFFFileName ( input )
FUNCTION_CALL	1527:5	1527:23	13	TIFFFileName ( input )
CALLEE	1527:5	1527:5	14	TIFFFileName
LEAF_NODE	1527:5	1527:5	15	TIFFFileName
LEAF_NODE	1527:17	1527:17	14	(
ARGUMENT	1527:18	1527:18	14	input
FIELD	1527:18	1527:18	15	input
LEAF_NODE	1527:18	1527:18	16	input
LEAF_NODE	1527:23	1527:23	14	)
LEAF_NODE	1527:24	1527:24	12	)
LEAF_NODE	1527:25	1527:25	10	;
EXPR_STATEMENT	1528:4	1528:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1528:4	1528:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1528:4	1528:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1528:4	1528:4	12	t2p -> t2p_error
FIELD	1528:4	1528:9	13	t2p -> t2p_error
LEAF_NODE	1528:4	1528:4	14	t2p
LEAF_NODE	1528:7	1528:7	14	->
LEAF_NODE	1528:9	1528:9	14	t2p_error
ASSIGN_OP	1528:19	1528:19	12	=
LEAF_NODE	1528:19	1528:19	13	=
RVAL	1528:21	1528:21	12	T2P_ERR_ERROR
FIELD	1528:21	1528:21	13	T2P_ERR_ERROR
LEAF_NODE	1528:21	1528:21	14	T2P_ERR_ERROR
LEAF_NODE	1528:34	1528:34	10	;
JUMP_STATEMENT	1529:4	1529:10	9	return DESTINATION ;
KEYWORD	1529:4	1529:4	10	return
LEAF_NODE	1529:4	1529:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1529:10	1529:10	10	;
LEAF_NODE	1530:3	1530:3	8	}
SELECTION	1531:3	1531:42	6	
KEYWORD	1531:3	1531:3	7	if
LEAF_NODE	1531:3	1531:3	8	if
LEAF_NODE	1531:5	1531:5	7	(
CONDITION	1531:6	1531:6	7	r == NULL || g == NULL || b == NULL
EXPR	1531:6	1531:6	8	r == NULL || g == NULL || b == NULL
OR	1531:6	1531:19	9	r == NULL || g == NULL || b == NULL
EXPR	1531:6	1531:11	10	r == NULL
FIELD	1531:6	1531:6	11	r
LEAF_NODE	1531:6	1531:6	12	r
EQ_OPERATOR	1531:8	1531:8	11	==
LEAF_NODE	1531:8	1531:8	12	==
FIELD	1531:11	1531:11	11	NULL
LEAF_NODE	1531:11	1531:11	12	NULL
LEAF_NODE	1531:16	1531:16	10	||
EXPR	1531:19	1531:19	10	g == NULL || b == NULL
OR	1531:19	1531:32	11	g == NULL || b == NULL
EXPR	1531:19	1531:24	12	g == NULL
FIELD	1531:19	1531:19	13	g
LEAF_NODE	1531:19	1531:19	14	g
EQ_OPERATOR	1531:21	1531:21	13	==
LEAF_NODE	1531:21	1531:21	14	==
FIELD	1531:24	1531:24	13	NULL
LEAF_NODE	1531:24	1531:24	14	NULL
LEAF_NODE	1531:29	1531:29	12	||
EXPR	1531:32	1531:37	12	b == NULL
FIELD	1531:32	1531:32	13	b
LEAF_NODE	1531:32	1531:32	14	b
EQ_OPERATOR	1531:34	1531:34	13	==
LEAF_NODE	1531:34	1531:34	14	==
FIELD	1531:37	1531:37	13	NULL
LEAF_NODE	1531:37	1531:37	14	NULL
LEAF_NODE	1531:41	1531:41	7	)
STATEMENTS	1531:42	1537:3	7	
LEAF_NODE	1531:42	1531:42	8	{
STATEMENTS	1532:4	1536:4	8	
EXPR_STATEMENT	1532:4	1534:49	9	TIFFError ( TIFF2PDF_MODULE , "Error getting 3 components from color map" ) ;
EXPR	1532:4	1532:4	10	TIFFError ( TIFF2PDF_MODULE , "Error getting 3 components from color map" )
FUNCTION_CALL	1532:4	1534:48	11	TIFFError ( TIFF2PDF_MODULE , "Error getting 3 components from color map" )
CALLEE	1532:4	1532:4	12	TIFFError
LEAF_NODE	1532:4	1532:4	13	TIFFError
LEAF_NODE	1532:13	1532:13	12	(
ARGUMENT	1533:5	1533:5	12	TIFF2PDF_MODULE
FIELD	1533:5	1533:5	13	TIFF2PDF_MODULE
LEAF_NODE	1533:5	1533:5	14	TIFF2PDF_MODULE
LEAF_NODE	1533:20	1533:20	12	,
ARGUMENT	1534:5	1534:5	12	"Error getting 3 components from color map"
FIELD	1534:5	1534:5	13	"Error getting 3 components from color map"
LEAF_NODE	1534:5	1534:5	14	"Error getting 3 components from color map"
LEAF_NODE	1534:48	1534:48	12	)
LEAF_NODE	1534:49	1534:49	10	;
EXPR_STATEMENT	1535:4	1535:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1535:4	1535:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1535:4	1535:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1535:4	1535:4	12	t2p -> t2p_error
FIELD	1535:4	1535:9	13	t2p -> t2p_error
LEAF_NODE	1535:4	1535:4	14	t2p
LEAF_NODE	1535:7	1535:7	14	->
LEAF_NODE	1535:9	1535:9	14	t2p_error
ASSIGN_OP	1535:19	1535:19	12	=
LEAF_NODE	1535:19	1535:19	13	=
RVAL	1535:21	1535:21	12	T2P_ERR_ERROR
FIELD	1535:21	1535:21	13	T2P_ERR_ERROR
LEAF_NODE	1535:21	1535:21	14	T2P_ERR_ERROR
LEAF_NODE	1535:34	1535:34	10	;
JUMP_STATEMENT	1536:4	1536:10	9	return DESTINATION ;
KEYWORD	1536:4	1536:4	10	return
LEAF_NODE	1536:4	1536:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1536:10	1536:10	10	;
LEAF_NODE	1537:3	1537:3	8	}
SELECTION	1538:3	1538:31	6	
KEYWORD	1538:3	1538:3	7	if
LEAF_NODE	1538:3	1538:3	8	if
LEAF_NODE	1538:5	1538:5	7	(
CONDITION	1538:6	1538:6	7	t2p -> pdf_palette != NULL
EXPR	1538:6	1538:26	8	t2p -> pdf_palette != NULL
FIELD	1538:6	1538:11	9	t2p -> pdf_palette
LEAF_NODE	1538:6	1538:6	10	t2p
LEAF_NODE	1538:9	1538:9	10	->
LEAF_NODE	1538:11	1538:11	10	pdf_palette
EQ_OPERATOR	1538:23	1538:23	9	!=
LEAF_NODE	1538:23	1538:23	10	!=
FIELD	1538:26	1538:26	9	NULL
LEAF_NODE	1538:26	1538:26	10	NULL
LEAF_NODE	1538:30	1538:30	7	)
STATEMENTS	1538:31	1541:3	7	
LEAF_NODE	1538:31	1538:31	8	{
STATEMENTS	1539:4	1540:4	8	
EXPR_STATEMENT	1539:4	1539:31	9	_TIFFfree ( t2p -> pdf_palette ) ;
EXPR	1539:4	1539:4	10	_TIFFfree ( t2p -> pdf_palette )
FUNCTION_CALL	1539:4	1539:30	11	_TIFFfree ( t2p -> pdf_palette )
CALLEE	1539:4	1539:4	12	_TIFFfree
LEAF_NODE	1539:4	1539:4	13	_TIFFfree
LEAF_NODE	1539:13	1539:13	12	(
ARGUMENT	1539:14	1539:14	12	t2p -> pdf_palette
FIELD	1539:14	1539:19	13	t2p -> pdf_palette
LEAF_NODE	1539:14	1539:14	14	t2p
LEAF_NODE	1539:17	1539:17	14	->
LEAF_NODE	1539:19	1539:19	14	pdf_palette
LEAF_NODE	1539:30	1539:30	12	)
LEAF_NODE	1539:31	1539:31	10	;
EXPR_STATEMENT	1540:4	1540:25	9	t2p -> pdf_palette = NULL ;
EXPR	1540:4	1540:4	10	t2p -> pdf_palette = NULL
ASSIGN	1540:4	1540:21	11	t2p -> pdf_palette = NULL
LVAL	1540:4	1540:4	12	t2p -> pdf_palette
FIELD	1540:4	1540:9	13	t2p -> pdf_palette
LEAF_NODE	1540:4	1540:4	14	t2p
LEAF_NODE	1540:7	1540:7	14	->
LEAF_NODE	1540:9	1540:9	14	pdf_palette
ASSIGN_OP	1540:20	1540:20	12	=
LEAF_NODE	1540:20	1540:20	13	=
RVAL	1540:21	1540:21	12	NULL
FIELD	1540:21	1540:21	13	NULL
LEAF_NODE	1540:21	1540:21	14	NULL
LEAF_NODE	1540:25	1540:25	10	;
LEAF_NODE	1541:3	1541:3	8	}
EXPR_STATEMENT	1542:3	1543:66	6	t2p -> pdf_palette = ( unsigned char * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 3 ) ) ;
EXPR	1542:3	1542:3	7	t2p -> pdf_palette = ( unsigned char * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 3 ) )
ASSIGN	1542:3	1542:22	8	t2p -> pdf_palette = ( unsigned char * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 3 ) )
LVAL	1542:3	1542:3	9	t2p -> pdf_palette
FIELD	1542:3	1542:8	10	t2p -> pdf_palette
LEAF_NODE	1542:3	1542:3	11	t2p
LEAF_NODE	1542:6	1542:6	11	->
LEAF_NODE	1542:8	1542:8	11	pdf_palette
ASSIGN_OP	1542:20	1542:20	9	=
LEAF_NODE	1542:20	1542:20	10	=
RVAL	1542:22	1543:4	9	( unsigned char * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 3 ) )
LEAF_NODE	1542:22	1542:22	10	(
TYPE_NAME	1542:23	1542:32	10	unsigned char
LEAF_NODE	1542:23	1542:23	11	unsigned
LEAF_NODE	1542:32	1542:32	11	char
LEAF_NODE	1542:36	1542:36	10	*
LEAF_NODE	1542:37	1542:37	10	)
FUNCTION_CALL	1543:4	1543:65	10	_TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 3 ) )
CALLEE	1543:4	1543:4	11	_TIFFmalloc
LEAF_NODE	1543:4	1543:4	12	_TIFFmalloc
LEAF_NODE	1543:15	1543:15	11	(
ARGUMENT	1543:16	1543:16	11	TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 3 )
FUNCTION_CALL	1543:16	1543:64	12	TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 3 )
CALLEE	1543:16	1543:16	13	TIFFSafeMultiply
LEAF_NODE	1543:16	1543:16	14	TIFFSafeMultiply
LEAF_NODE	1543:32	1543:32	13	(
ARGUMENT	1543:33	1543:33	13	tmsize_t
FIELD	1543:33	1543:33	14	tmsize_t
LEAF_NODE	1543:33	1543:33	15	tmsize_t
LEAF_NODE	1543:41	1543:41	13	,
ARGUMENT	1543:42	1543:42	13	t2p -> pdf_palettesize
FIELD	1543:42	1543:47	14	t2p -> pdf_palettesize
LEAF_NODE	1543:42	1543:42	15	t2p
LEAF_NODE	1543:45	1543:45	15	->
LEAF_NODE	1543:47	1543:47	15	pdf_palettesize
LEAF_NODE	1543:62	1543:62	13	,
ARGUMENT	1543:63	1543:63	13	3
FIELD	1543:63	1543:63	14	3
LEAF_NODE	1543:63	1543:63	15	3
LEAF_NODE	1543:64	1543:64	13	)
LEAF_NODE	1543:65	1543:65	11	)
LEAF_NODE	1543:66	1543:66	7	;
SELECTION	1544:3	1544:29	6	
KEYWORD	1544:3	1544:3	7	if
LEAF_NODE	1544:3	1544:3	8	if
LEAF_NODE	1544:5	1544:5	7	(
CONDITION	1544:6	1544:6	7	t2p -> pdf_palette == NULL
EXPR	1544:6	1544:24	8	t2p -> pdf_palette == NULL
FIELD	1544:6	1544:11	9	t2p -> pdf_palette
LEAF_NODE	1544:6	1544:6	10	t2p
LEAF_NODE	1544:9	1544:9	10	->
LEAF_NODE	1544:11	1544:11	10	pdf_palette
EQ_OPERATOR	1544:22	1544:22	9	==
LEAF_NODE	1544:22	1544:22	10	==
FIELD	1544:24	1544:24	9	NULL
LEAF_NODE	1544:24	1544:24	10	NULL
LEAF_NODE	1544:28	1544:28	7	)
STATEMENTS	1544:29	1552:3	7	
LEAF_NODE	1544:29	1544:29	8	{
STATEMENTS	1545:4	1551:4	8	
EXPR_STATEMENT	1545:4	1549:25	9	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_read_tiff_image, %s" , t2p -> pdf_palettesize , TIFFFileName ( input ) ) ;
EXPR	1545:4	1545:4	10	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_read_tiff_image, %s" , t2p -> pdf_palettesize , TIFFFileName ( input ) )
FUNCTION_CALL	1545:4	1549:24	11	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_read_tiff_image, %s" , t2p -> pdf_palettesize , TIFFFileName ( input ) )
CALLEE	1545:4	1545:4	12	TIFFError
LEAF_NODE	1545:4	1545:4	13	TIFFError
LEAF_NODE	1545:13	1545:13	12	(
ARGUMENT	1546:5	1546:5	12	TIFF2PDF_MODULE
FIELD	1546:5	1546:5	13	TIFF2PDF_MODULE
LEAF_NODE	1546:5	1546:5	14	TIFF2PDF_MODULE
LEAF_NODE	1546:20	1546:20	12	,
ARGUMENT	1547:5	1547:5	12	"Can't allocate %u bytes of memory for t2p_read_tiff_image, %s"
FIELD	1547:5	1547:5	13	"Can't allocate %u bytes of memory for t2p_read_tiff_image, %s"
LEAF_NODE	1547:5	1547:5	14	"Can't allocate %u bytes of memory for t2p_read_tiff_image, %s"
LEAF_NODE	1547:68	1547:68	12	,
ARGUMENT	1548:5	1548:5	12	t2p -> pdf_palettesize
FIELD	1548:5	1548:10	13	t2p -> pdf_palettesize
LEAF_NODE	1548:5	1548:5	14	t2p
LEAF_NODE	1548:8	1548:8	14	->
LEAF_NODE	1548:10	1548:10	14	pdf_palettesize
LEAF_NODE	1548:25	1548:25	12	,
ARGUMENT	1549:5	1549:5	12	TIFFFileName ( input )
FUNCTION_CALL	1549:5	1549:23	13	TIFFFileName ( input )
CALLEE	1549:5	1549:5	14	TIFFFileName
LEAF_NODE	1549:5	1549:5	15	TIFFFileName
LEAF_NODE	1549:17	1549:17	14	(
ARGUMENT	1549:18	1549:18	14	input
FIELD	1549:18	1549:18	15	input
LEAF_NODE	1549:18	1549:18	16	input
LEAF_NODE	1549:23	1549:23	14	)
LEAF_NODE	1549:24	1549:24	12	)
LEAF_NODE	1549:25	1549:25	10	;
EXPR_STATEMENT	1550:4	1550:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1550:4	1550:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1550:4	1550:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1550:4	1550:4	12	t2p -> t2p_error
FIELD	1550:4	1550:9	13	t2p -> t2p_error
LEAF_NODE	1550:4	1550:4	14	t2p
LEAF_NODE	1550:7	1550:7	14	->
LEAF_NODE	1550:9	1550:9	14	t2p_error
ASSIGN_OP	1550:19	1550:19	12	=
LEAF_NODE	1550:19	1550:19	13	=
RVAL	1550:21	1550:21	12	T2P_ERR_ERROR
FIELD	1550:21	1550:21	13	T2P_ERR_ERROR
LEAF_NODE	1550:21	1550:21	14	T2P_ERR_ERROR
LEAF_NODE	1550:34	1550:34	10	;
JUMP_STATEMENT	1551:4	1551:10	9	return DESTINATION ;
KEYWORD	1551:4	1551:4	10	return
LEAF_NODE	1551:4	1551:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1551:10	1551:10	10	;
LEAF_NODE	1552:3	1552:3	8	}
ITERATION	1553:3	1553:38	6	
KEYWORD	1553:3	1553:3	7	for
LEAF_NODE	1553:3	1553:3	8	for
LEAF_NODE	1553:6	1553:6	7	(
FOR_INIT	1553:7	1553:10	7	i = 0 ;
EXPR	1553:7	1553:7	8	i = 0
ASSIGN	1553:7	1553:9	9	i = 0
LVAL	1553:7	1553:7	10	i
FIELD	1553:7	1553:7	11	i
LEAF_NODE	1553:7	1553:7	12	i
ASSIGN_OP	1553:8	1553:8	10	=
LEAF_NODE	1553:8	1553:8	11	=
RVAL	1553:9	1553:9	10	0
FIELD	1553:9	1553:9	11	0
LEAF_NODE	1553:9	1553:9	12	0
LEAF_NODE	1553:10	1553:10	8	;
CONDITION	1553:11	1553:11	7	i < t2p -> pdf_palettesize
EXPR	1553:11	1553:13	8	i < t2p -> pdf_palettesize
FIELD	1553:11	1553:11	9	i
LEAF_NODE	1553:11	1553:11	10	i
REL_OPERATOR	1553:12	1553:12	9	<
LEAF_NODE	1553:12	1553:12	10	<
FIELD	1553:13	1553:18	9	t2p -> pdf_palettesize
LEAF_NODE	1553:13	1553:13	10	t2p
LEAF_NODE	1553:16	1553:16	10	->
LEAF_NODE	1553:18	1553:18	10	pdf_palettesize
LEAF_NODE	1553:33	1553:33	7	;
FOR_EXPR	1553:34	1553:34	7	i ++
EXPR	1553:34	1553:34	8	i ++
FIELD	1553:34	1553:35	9	i ++
LEAF_NODE	1553:34	1553:34	10	i
LEAF_NODE	1553:35	1553:35	10	++
LEAF_NODE	1553:37	1553:37	7	)
STATEMENTS	1553:38	1557:3	7	
LEAF_NODE	1553:38	1553:38	8	{
STATEMENTS	1554:4	1556:4	8	
EXPR_STATEMENT	1554:4	1554:56	9	t2p -> pdf_palette [ ( i * 3 ) ] = ( unsigned char ) ( r [ i ] >> 8 ) ;
EXPR	1554:4	1554:4	10	t2p -> pdf_palette [ ( i * 3 ) ] = ( unsigned char ) ( r [ i ] >> 8 )
ASSIGN	1554:4	1554:31	11	t2p -> pdf_palette [ ( i * 3 ) ] = ( unsigned char ) ( r [ i ] >> 8 )
LVAL	1554:4	1554:4	12	t2p -> pdf_palette [ ( i * 3 ) ]
FIELD	1554:4	1554:26	13	t2p -> pdf_palette [ ( i * 3 ) ]
LEAF_NODE	1554:4	1554:4	14	t2p
LEAF_NODE	1554:7	1554:7	14	->
LEAF_NODE	1554:9	1554:9	14	pdf_palette
LEAF_NODE	1554:20	1554:20	14	[
EXPR	1554:21	1554:25	14	( i * 3 )
LEAF_NODE	1554:21	1554:21	15	(
FIELD	1554:22	1554:22	15	i
LEAF_NODE	1554:22	1554:22	16	i
LEAF_NODE	1554:23	1554:23	15	*
FIELD	1554:24	1554:24	15	3
LEAF_NODE	1554:24	1554:24	16	3
LEAF_NODE	1554:25	1554:25	15	)
LEAF_NODE	1554:26	1554:26	14	]
ASSIGN_OP	1554:29	1554:29	12	=
LEAF_NODE	1554:29	1554:29	13	=
RVAL	1554:31	1554:55	12	( unsigned char ) ( r [ i ] >> 8 )
LEAF_NODE	1554:31	1554:31	13	(
TYPE_NAME	1554:32	1554:41	13	unsigned char
LEAF_NODE	1554:32	1554:32	14	unsigned
LEAF_NODE	1554:41	1554:41	14	char
LEAF_NODE	1554:45	1554:45	13	)
LEAF_NODE	1554:47	1554:47	13	(
FIELD	1554:48	1554:51	13	r [ i ]
LEAF_NODE	1554:48	1554:48	14	r
LEAF_NODE	1554:49	1554:49	14	[
EXPR	1554:50	1554:50	14	i
FIELD	1554:50	1554:50	15	i
LEAF_NODE	1554:50	1554:50	16	i
LEAF_NODE	1554:51	1554:51	14	]
LEAF_NODE	1554:52	1554:52	13	>>
FIELD	1554:54	1554:54	13	8
LEAF_NODE	1554:54	1554:54	14	8
LEAF_NODE	1554:55	1554:55	13	)
LEAF_NODE	1554:56	1554:56	10	;
EXPR_STATEMENT	1555:4	1555:56	9	t2p -> pdf_palette [ ( i * 3 ) + 1 ] = ( unsigned char ) ( g [ i ] >> 8 ) ;
EXPR	1555:4	1555:4	10	t2p -> pdf_palette [ ( i * 3 ) + 1 ] = ( unsigned char ) ( g [ i ] >> 8 )
ASSIGN	1555:4	1555:31	11	t2p -> pdf_palette [ ( i * 3 ) + 1 ] = ( unsigned char ) ( g [ i ] >> 8 )
LVAL	1555:4	1555:4	12	t2p -> pdf_palette [ ( i * 3 ) + 1 ]
FIELD	1555:4	1555:28	13	t2p -> pdf_palette [ ( i * 3 ) + 1 ]
LEAF_NODE	1555:4	1555:4	14	t2p
LEAF_NODE	1555:7	1555:7	14	->
LEAF_NODE	1555:9	1555:9	14	pdf_palette
LEAF_NODE	1555:20	1555:20	14	[
EXPR	1555:21	1555:27	14	( i * 3 ) + 1
LEAF_NODE	1555:21	1555:21	15	(
FIELD	1555:22	1555:22	15	i
LEAF_NODE	1555:22	1555:22	16	i
LEAF_NODE	1555:23	1555:23	15	*
FIELD	1555:24	1555:24	15	3
LEAF_NODE	1555:24	1555:24	16	3
LEAF_NODE	1555:25	1555:25	15	)
LEAF_NODE	1555:26	1555:26	15	+
FIELD	1555:27	1555:27	15	1
LEAF_NODE	1555:27	1555:27	16	1
LEAF_NODE	1555:28	1555:28	14	]
ASSIGN_OP	1555:29	1555:29	12	=
LEAF_NODE	1555:29	1555:29	13	=
RVAL	1555:31	1555:55	12	( unsigned char ) ( g [ i ] >> 8 )
LEAF_NODE	1555:31	1555:31	13	(
TYPE_NAME	1555:32	1555:41	13	unsigned char
LEAF_NODE	1555:32	1555:32	14	unsigned
LEAF_NODE	1555:41	1555:41	14	char
LEAF_NODE	1555:45	1555:45	13	)
LEAF_NODE	1555:47	1555:47	13	(
FIELD	1555:48	1555:51	13	g [ i ]
LEAF_NODE	1555:48	1555:48	14	g
LEAF_NODE	1555:49	1555:49	14	[
EXPR	1555:50	1555:50	14	i
FIELD	1555:50	1555:50	15	i
LEAF_NODE	1555:50	1555:50	16	i
LEAF_NODE	1555:51	1555:51	14	]
LEAF_NODE	1555:52	1555:52	13	>>
FIELD	1555:54	1555:54	13	8
LEAF_NODE	1555:54	1555:54	14	8
LEAF_NODE	1555:55	1555:55	13	)
LEAF_NODE	1555:56	1555:56	10	;
EXPR_STATEMENT	1556:4	1556:56	9	t2p -> pdf_palette [ ( i * 3 ) + 2 ] = ( unsigned char ) ( b [ i ] >> 8 ) ;
EXPR	1556:4	1556:4	10	t2p -> pdf_palette [ ( i * 3 ) + 2 ] = ( unsigned char ) ( b [ i ] >> 8 )
ASSIGN	1556:4	1556:31	11	t2p -> pdf_palette [ ( i * 3 ) + 2 ] = ( unsigned char ) ( b [ i ] >> 8 )
LVAL	1556:4	1556:4	12	t2p -> pdf_palette [ ( i * 3 ) + 2 ]
FIELD	1556:4	1556:28	13	t2p -> pdf_palette [ ( i * 3 ) + 2 ]
LEAF_NODE	1556:4	1556:4	14	t2p
LEAF_NODE	1556:7	1556:7	14	->
LEAF_NODE	1556:9	1556:9	14	pdf_palette
LEAF_NODE	1556:20	1556:20	14	[
EXPR	1556:21	1556:27	14	( i * 3 ) + 2
LEAF_NODE	1556:21	1556:21	15	(
FIELD	1556:22	1556:22	15	i
LEAF_NODE	1556:22	1556:22	16	i
LEAF_NODE	1556:23	1556:23	15	*
FIELD	1556:24	1556:24	15	3
LEAF_NODE	1556:24	1556:24	16	3
LEAF_NODE	1556:25	1556:25	15	)
LEAF_NODE	1556:26	1556:26	15	+
FIELD	1556:27	1556:27	15	2
LEAF_NODE	1556:27	1556:27	16	2
LEAF_NODE	1556:28	1556:28	14	]
ASSIGN_OP	1556:29	1556:29	12	=
LEAF_NODE	1556:29	1556:29	13	=
RVAL	1556:31	1556:55	12	( unsigned char ) ( b [ i ] >> 8 )
LEAF_NODE	1556:31	1556:31	13	(
TYPE_NAME	1556:32	1556:41	13	unsigned char
LEAF_NODE	1556:32	1556:32	14	unsigned
LEAF_NODE	1556:41	1556:41	14	char
LEAF_NODE	1556:45	1556:45	13	)
LEAF_NODE	1556:47	1556:47	13	(
FIELD	1556:48	1556:51	13	b [ i ]
LEAF_NODE	1556:48	1556:48	14	b
LEAF_NODE	1556:49	1556:49	14	[
EXPR	1556:50	1556:50	14	i
FIELD	1556:50	1556:50	15	i
LEAF_NODE	1556:50	1556:50	16	i
LEAF_NODE	1556:51	1556:51	14	]
LEAF_NODE	1556:52	1556:52	13	>>
FIELD	1556:54	1556:54	13	8
LEAF_NODE	1556:54	1556:54	14	8
LEAF_NODE	1556:55	1556:55	13	)
LEAF_NODE	1556:56	1556:56	10	;
LEAF_NODE	1557:3	1557:3	8	}
EXPR_STATEMENT	1558:3	1558:28	6	t2p -> pdf_palettesize *= 3 ;
EXPR	1558:3	1558:3	7	t2p -> pdf_palettesize *= 3
ASSIGN	1558:3	1558:27	8	t2p -> pdf_palettesize *= 3
LVAL	1558:3	1558:3	9	t2p -> pdf_palettesize
FIELD	1558:3	1558:8	10	t2p -> pdf_palettesize
LEAF_NODE	1558:3	1558:3	11	t2p
LEAF_NODE	1558:6	1558:6	11	->
LEAF_NODE	1558:8	1558:8	11	pdf_palettesize
ASSIGN_OP	1558:24	1558:24	9	*=
LEAF_NODE	1558:24	1558:24	10	*=
RVAL	1558:27	1558:27	9	3
FIELD	1558:27	1558:27	10	3
LEAF_NODE	1558:27	1558:27	11	3
LEAF_NODE	1558:28	1558:28	7	;
JUMP_STATEMENT	1559:3	1559:8	6	break DESTINATION ;
KEYWORD	1559:3	1559:3	7	break
LEAF_NODE	1559:3	1559:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1559:8	1559:8	7	;
LABEL	1560:2	1560:28	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	1560:2	1560:2	7	case
LEAF_NODE	1560:7	1560:7	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	1560:28	1560:28	7	:
SELECTION	1561:3	1561:53	6	
KEYWORD	1561:3	1561:3	7	if
LEAF_NODE	1561:3	1561:3	8	if
LEAF_NODE	1561:5	1561:5	7	(
CONDITION	1561:6	1561:6	7	TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
EXPR	1561:6	1561:6	8	TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
FUNCTION_CALL	1561:6	1561:51	9	TIFFGetField ( input , TIFFTAG_INDEXED , & xuint16 )
CALLEE	1561:6	1561:6	10	TIFFGetField
LEAF_NODE	1561:6	1561:6	11	TIFFGetField
LEAF_NODE	1561:18	1561:18	10	(
ARGUMENT	1561:19	1561:19	10	input
FIELD	1561:19	1561:19	11	input
LEAF_NODE	1561:19	1561:19	12	input
LEAF_NODE	1561:24	1561:24	10	,
ARGUMENT	1561:26	1561:26	10	TIFFTAG_INDEXED
FIELD	1561:26	1561:26	11	TIFFTAG_INDEXED
LEAF_NODE	1561:26	1561:26	12	TIFFTAG_INDEXED
LEAF_NODE	1561:41	1561:41	10	,
ARGUMENT	1561:43	1561:43	10	& xuint16
UNARY_EXPR	1561:43	1561:44	11	& xuint16
UNARY_OPERATOR	1561:43	1561:43	12	&
LEAF_NODE	1561:43	1561:43	13	&
FIELD	1561:44	1561:44	12	xuint16
LEAF_NODE	1561:44	1561:44	13	xuint16
LEAF_NODE	1561:51	1561:51	10	)
LEAF_NODE	1561:52	1561:52	7	)
STATEMENTS	1561:53	1565:3	7	
LEAF_NODE	1561:53	1561:53	8	{
STATEMENTS	1562:4	1562:4	8	
SELECTION	1562:4	1562:18	9	
KEYWORD	1562:4	1562:4	10	if
LEAF_NODE	1562:4	1562:4	11	if
LEAF_NODE	1562:6	1562:6	10	(
CONDITION	1562:7	1562:7	10	xuint16 == 1
EXPR	1562:7	1562:16	11	xuint16 == 1
FIELD	1562:7	1562:7	12	xuint16
LEAF_NODE	1562:7	1562:7	13	xuint16
EQ_OPERATOR	1562:14	1562:14	12	==
LEAF_NODE	1562:14	1562:14	13	==
FIELD	1562:16	1562:16	12	1
LEAF_NODE	1562:16	1562:16	13	1
LEAF_NODE	1562:17	1562:17	10	)
STATEMENTS	1562:18	1564:4	10	
LEAF_NODE	1562:18	1562:18	11	{
STATEMENTS	1563:6	1563:6	11	
JUMP_STATEMENT	1563:6	1563:35	12	goto photometric_palette_cmyk ;
KEYWORD	1563:6	1563:6	13	goto
LEAF_NODE	1563:6	1563:6	14	goto
DESTINATION	1563:11	1563:11	13	photometric_palette_cmyk
LEAF_NODE	1563:11	1563:11	14	photometric_palette_cmyk
LEAF_NODE	1563:35	1563:35	13	;
LEAF_NODE	1564:4	1564:4	11	}
LEAF_NODE	1565:3	1565:3	8	}
SELECTION	1566:3	1566:54	6	
KEYWORD	1566:3	1566:3	7	if
LEAF_NODE	1566:3	1566:3	8	if
LEAF_NODE	1566:5	1566:5	7	(
CONDITION	1566:7	1566:7	7	TIFFGetField ( input , TIFFTAG_INKSET , & xuint16 )
EXPR	1566:7	1566:7	8	TIFFGetField ( input , TIFFTAG_INKSET , & xuint16 )
FUNCTION_CALL	1566:7	1566:51	9	TIFFGetField ( input , TIFFTAG_INKSET , & xuint16 )
CALLEE	1566:7	1566:7	10	TIFFGetField
LEAF_NODE	1566:7	1566:7	11	TIFFGetField
LEAF_NODE	1566:19	1566:19	10	(
ARGUMENT	1566:20	1566:20	10	input
FIELD	1566:20	1566:20	11	input
LEAF_NODE	1566:20	1566:20	12	input
LEAF_NODE	1566:25	1566:25	10	,
ARGUMENT	1566:27	1566:27	10	TIFFTAG_INKSET
FIELD	1566:27	1566:27	11	TIFFTAG_INKSET
LEAF_NODE	1566:27	1566:27	12	TIFFTAG_INKSET
LEAF_NODE	1566:41	1566:41	10	,
ARGUMENT	1566:43	1566:43	10	& xuint16
UNARY_EXPR	1566:43	1566:44	11	& xuint16
UNARY_OPERATOR	1566:43	1566:43	12	&
LEAF_NODE	1566:43	1566:43	13	&
FIELD	1566:44	1566:44	12	xuint16
LEAF_NODE	1566:44	1566:44	13	xuint16
LEAF_NODE	1566:51	1566:51	10	)
LEAF_NODE	1566:53	1566:53	7	)
STATEMENTS	1566:54	1575:3	7	
LEAF_NODE	1566:54	1566:54	8	{
STATEMENTS	1567:4	1567:4	8	
SELECTION	1567:4	1567:30	9	
KEYWORD	1567:4	1567:4	10	if
LEAF_NODE	1567:4	1567:4	11	if
LEAF_NODE	1567:6	1567:6	10	(
CONDITION	1567:7	1567:7	10	xuint16 != INKSET_CMYK
EXPR	1567:7	1567:18	11	xuint16 != INKSET_CMYK
FIELD	1567:7	1567:7	12	xuint16
LEAF_NODE	1567:7	1567:7	13	xuint16
EQ_OPERATOR	1567:15	1567:15	12	!=
LEAF_NODE	1567:15	1567:15	13	!=
FIELD	1567:18	1567:18	12	INKSET_CMYK
LEAF_NODE	1567:18	1567:18	13	INKSET_CMYK
LEAF_NODE	1567:29	1567:29	10	)
STATEMENTS	1567:30	1574:4	10	
LEAF_NODE	1567:30	1567:30	11	{
STATEMENTS	1568:5	1573:5	11	
EXPR_STATEMENT	1568:5	1571:27	12	TIFFError ( TIFF2PDF_MODULE , "No support for %s because its inkset is not CMYK" , TIFFFileName ( input ) ) ;
EXPR	1568:5	1568:5	13	TIFFError ( TIFF2PDF_MODULE , "No support for %s because its inkset is not CMYK" , TIFFFileName ( input ) )
FUNCTION_CALL	1568:5	1571:26	14	TIFFError ( TIFF2PDF_MODULE , "No support for %s because its inkset is not CMYK" , TIFFFileName ( input ) )
CALLEE	1568:5	1568:5	15	TIFFError
LEAF_NODE	1568:5	1568:5	16	TIFFError
LEAF_NODE	1568:14	1568:14	15	(
ARGUMENT	1569:6	1569:6	15	TIFF2PDF_MODULE
FIELD	1569:6	1569:6	16	TIFF2PDF_MODULE
LEAF_NODE	1569:6	1569:6	17	TIFF2PDF_MODULE
LEAF_NODE	1569:21	1569:21	15	,
ARGUMENT	1570:6	1570:6	15	"No support for %s because its inkset is not CMYK"
FIELD	1570:6	1570:6	16	"No support for %s because its inkset is not CMYK"
LEAF_NODE	1570:6	1570:6	17	"No support for %s because its inkset is not CMYK"
LEAF_NODE	1570:56	1570:56	15	,
ARGUMENT	1571:6	1571:6	15	TIFFFileName ( input )
FUNCTION_CALL	1571:6	1571:24	16	TIFFFileName ( input )
CALLEE	1571:6	1571:6	17	TIFFFileName
LEAF_NODE	1571:6	1571:6	18	TIFFFileName
LEAF_NODE	1571:18	1571:18	17	(
ARGUMENT	1571:19	1571:19	17	input
FIELD	1571:19	1571:19	18	input
LEAF_NODE	1571:19	1571:19	19	input
LEAF_NODE	1571:24	1571:24	17	)
LEAF_NODE	1571:26	1571:26	15	)
LEAF_NODE	1571:27	1571:27	13	;
EXPR_STATEMENT	1572:5	1572:35	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1572:5	1572:5	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1572:5	1572:22	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1572:5	1572:5	15	t2p -> t2p_error
FIELD	1572:5	1572:10	16	t2p -> t2p_error
LEAF_NODE	1572:5	1572:5	17	t2p
LEAF_NODE	1572:8	1572:8	17	->
LEAF_NODE	1572:10	1572:10	17	t2p_error
ASSIGN_OP	1572:20	1572:20	15	=
LEAF_NODE	1572:20	1572:20	16	=
RVAL	1572:22	1572:22	15	T2P_ERR_ERROR
FIELD	1572:22	1572:22	16	T2P_ERR_ERROR
LEAF_NODE	1572:22	1572:22	17	T2P_ERR_ERROR
LEAF_NODE	1572:35	1572:35	13	;
JUMP_STATEMENT	1573:5	1573:11	12	return DESTINATION ;
KEYWORD	1573:5	1573:5	13	return
LEAF_NODE	1573:5	1573:5	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1573:11	1573:11	13	;
LEAF_NODE	1574:4	1574:4	11	}
LEAF_NODE	1575:3	1575:3	8	}
SELECTION	1576:3	1576:35	6	
KEYWORD	1576:3	1576:3	7	if
LEAF_NODE	1576:3	1576:3	8	if
LEAF_NODE	1576:5	1576:5	7	(
CONDITION	1576:6	1576:6	7	t2p -> tiff_samplesperpixel == 4
EXPR	1576:6	1576:33	8	t2p -> tiff_samplesperpixel == 4
FIELD	1576:6	1576:11	9	t2p -> tiff_samplesperpixel
LEAF_NODE	1576:6	1576:6	10	t2p
LEAF_NODE	1576:9	1576:9	10	->
LEAF_NODE	1576:11	1576:11	10	tiff_samplesperpixel
EQ_OPERATOR	1576:31	1576:31	9	==
LEAF_NODE	1576:31	1576:31	10	==
FIELD	1576:33	1576:33	9	4
LEAF_NODE	1576:33	1576:33	10	4
LEAF_NODE	1576:34	1576:34	7	)
STATEMENTS	1576:35	1578:3	7	
LEAF_NODE	1576:35	1576:35	8	{
STATEMENTS	1577:4	1577:4	8	
EXPR_STATEMENT	1577:4	1577:35	9	t2p -> pdf_colorspace = T2P_CS_CMYK ;
EXPR	1577:4	1577:4	10	t2p -> pdf_colorspace = T2P_CS_CMYK
ASSIGN	1577:4	1577:24	11	t2p -> pdf_colorspace = T2P_CS_CMYK
LVAL	1577:4	1577:4	12	t2p -> pdf_colorspace
FIELD	1577:4	1577:9	13	t2p -> pdf_colorspace
LEAF_NODE	1577:4	1577:4	14	t2p
LEAF_NODE	1577:7	1577:7	14	->
LEAF_NODE	1577:9	1577:9	14	pdf_colorspace
ASSIGN_OP	1577:23	1577:23	12	=
LEAF_NODE	1577:23	1577:23	13	=
RVAL	1577:24	1577:24	12	T2P_CS_CMYK
FIELD	1577:24	1577:24	13	T2P_CS_CMYK
LEAF_NODE	1577:24	1577:24	14	T2P_CS_CMYK
LEAF_NODE	1577:35	1577:35	10	;
LEAF_NODE	1578:3	1578:3	8	}
SELECTION	1578:5	1578:10	6	
KEYWORD	1578:5	1578:5	7	else
LEAF_NODE	1578:5	1578:5	8	else
STATEMENTS	1578:10	1586:3	7	
LEAF_NODE	1578:10	1578:10	8	{
STATEMENTS	1579:4	1585:4	8	
EXPR_STATEMENT	1579:4	1583:31	9	TIFFError ( TIFF2PDF_MODULE , "No support for %s because it has %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel ) ;
EXPR	1579:4	1579:4	10	TIFFError ( TIFF2PDF_MODULE , "No support for %s because it has %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel )
FUNCTION_CALL	1579:4	1583:30	11	TIFFError ( TIFF2PDF_MODULE , "No support for %s because it has %u samples per pixel" , TIFFFileName ( input ) , t2p -> tiff_samplesperpixel )
CALLEE	1579:4	1579:4	12	TIFFError
LEAF_NODE	1579:4	1579:4	13	TIFFError
LEAF_NODE	1579:13	1579:13	12	(
ARGUMENT	1580:5	1580:5	12	TIFF2PDF_MODULE
FIELD	1580:5	1580:5	13	TIFF2PDF_MODULE
LEAF_NODE	1580:5	1580:5	14	TIFF2PDF_MODULE
LEAF_NODE	1580:20	1580:20	12	,
ARGUMENT	1581:5	1581:5	12	"No support for %s because it has %u samples per pixel"
FIELD	1581:5	1581:5	13	"No support for %s because it has %u samples per pixel"
LEAF_NODE	1581:5	1581:5	14	"No support for %s because it has %u samples per pixel"
LEAF_NODE	1581:60	1581:60	12	,
ARGUMENT	1582:5	1582:5	12	TIFFFileName ( input )
FUNCTION_CALL	1582:5	1582:23	13	TIFFFileName ( input )
CALLEE	1582:5	1582:5	14	TIFFFileName
LEAF_NODE	1582:5	1582:5	15	TIFFFileName
LEAF_NODE	1582:17	1582:17	14	(
ARGUMENT	1582:18	1582:18	14	input
FIELD	1582:18	1582:18	15	input
LEAF_NODE	1582:18	1582:18	16	input
LEAF_NODE	1582:23	1582:23	14	)
LEAF_NODE	1582:24	1582:24	12	,
ARGUMENT	1583:5	1583:5	12	t2p -> tiff_samplesperpixel
FIELD	1583:5	1583:10	13	t2p -> tiff_samplesperpixel
LEAF_NODE	1583:5	1583:5	14	t2p
LEAF_NODE	1583:8	1583:8	14	->
LEAF_NODE	1583:10	1583:10	14	tiff_samplesperpixel
LEAF_NODE	1583:30	1583:30	12	)
LEAF_NODE	1583:31	1583:31	10	;
EXPR_STATEMENT	1584:4	1584:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1584:4	1584:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1584:4	1584:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1584:4	1584:4	12	t2p -> t2p_error
FIELD	1584:4	1584:9	13	t2p -> t2p_error
LEAF_NODE	1584:4	1584:4	14	t2p
LEAF_NODE	1584:7	1584:7	14	->
LEAF_NODE	1584:9	1584:9	14	t2p_error
ASSIGN_OP	1584:19	1584:19	12	=
LEAF_NODE	1584:19	1584:19	13	=
RVAL	1584:21	1584:21	12	T2P_ERR_ERROR
FIELD	1584:21	1584:21	13	T2P_ERR_ERROR
LEAF_NODE	1584:21	1584:21	14	T2P_ERR_ERROR
LEAF_NODE	1584:34	1584:34	10	;
JUMP_STATEMENT	1585:4	1585:10	9	return DESTINATION ;
KEYWORD	1585:4	1585:4	10	return
LEAF_NODE	1585:4	1585:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1585:10	1585:10	10	;
LEAF_NODE	1586:3	1586:3	8	}
JUMP_STATEMENT	1587:3	1587:8	6	break DESTINATION ;
KEYWORD	1587:3	1587:3	7	break
LEAF_NODE	1587:3	1587:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1587:8	1587:8	7	;
LABEL	1588:3	1588:27	6	photometric_palette_cmyk :
LEAF_NODE	1588:3	1588:3	7	photometric_palette_cmyk
LEAF_NODE	1588:27	1588:27	7	:
SELECTION	1589:3	1589:35	6	
KEYWORD	1589:3	1589:3	7	if
LEAF_NODE	1589:3	1589:3	8	if
LEAF_NODE	1589:5	1589:5	7	(
CONDITION	1589:6	1589:6	7	t2p -> tiff_samplesperpixel != 1
EXPR	1589:6	1589:33	8	t2p -> tiff_samplesperpixel != 1
FIELD	1589:6	1589:11	9	t2p -> tiff_samplesperpixel
LEAF_NODE	1589:6	1589:6	10	t2p
LEAF_NODE	1589:9	1589:9	10	->
LEAF_NODE	1589:11	1589:11	10	tiff_samplesperpixel
EQ_OPERATOR	1589:31	1589:31	9	!=
LEAF_NODE	1589:31	1589:31	10	!=
FIELD	1589:33	1589:33	9	1
LEAF_NODE	1589:33	1589:33	10	1
LEAF_NODE	1589:34	1589:34	7	)
STATEMENTS	1589:35	1596:3	7	
LEAF_NODE	1589:35	1589:35	8	{
STATEMENTS	1590:4	1595:4	8	
EXPR_STATEMENT	1590:4	1593:25	9	TIFFError ( TIFF2PDF_MODULE , "No support for palettized CMYK image %s with not one sample per pixel" , TIFFFileName ( input ) ) ;
EXPR	1590:4	1590:4	10	TIFFError ( TIFF2PDF_MODULE , "No support for palettized CMYK image %s with not one sample per pixel" , TIFFFileName ( input ) )
FUNCTION_CALL	1590:4	1593:24	11	TIFFError ( TIFF2PDF_MODULE , "No support for palettized CMYK image %s with not one sample per pixel" , TIFFFileName ( input ) )
CALLEE	1590:4	1590:4	12	TIFFError
LEAF_NODE	1590:4	1590:4	13	TIFFError
LEAF_NODE	1590:13	1590:13	12	(
ARGUMENT	1591:5	1591:5	12	TIFF2PDF_MODULE
FIELD	1591:5	1591:5	13	TIFF2PDF_MODULE
LEAF_NODE	1591:5	1591:5	14	TIFF2PDF_MODULE
LEAF_NODE	1591:20	1591:20	12	,
ARGUMENT	1592:5	1592:5	12	"No support for palettized CMYK image %s with not one sample per pixel"
FIELD	1592:5	1592:5	13	"No support for palettized CMYK image %s with not one sample per pixel"
LEAF_NODE	1592:5	1592:5	14	"No support for palettized CMYK image %s with not one sample per pixel"
LEAF_NODE	1592:76	1592:76	12	,
ARGUMENT	1593:5	1593:5	12	TIFFFileName ( input )
FUNCTION_CALL	1593:5	1593:23	13	TIFFFileName ( input )
CALLEE	1593:5	1593:5	14	TIFFFileName
LEAF_NODE	1593:5	1593:5	15	TIFFFileName
LEAF_NODE	1593:17	1593:17	14	(
ARGUMENT	1593:18	1593:18	14	input
FIELD	1593:18	1593:18	15	input
LEAF_NODE	1593:18	1593:18	16	input
LEAF_NODE	1593:23	1593:23	14	)
LEAF_NODE	1593:24	1593:24	12	)
LEAF_NODE	1593:25	1593:25	10	;
EXPR_STATEMENT	1594:4	1594:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1594:4	1594:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1594:4	1594:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1594:4	1594:4	12	t2p -> t2p_error
FIELD	1594:4	1594:9	13	t2p -> t2p_error
LEAF_NODE	1594:4	1594:4	14	t2p
LEAF_NODE	1594:7	1594:7	14	->
LEAF_NODE	1594:9	1594:9	14	t2p_error
ASSIGN_OP	1594:19	1594:19	12	=
LEAF_NODE	1594:19	1594:19	13	=
RVAL	1594:21	1594:21	12	T2P_ERR_ERROR
FIELD	1594:21	1594:21	13	T2P_ERR_ERROR
LEAF_NODE	1594:21	1594:21	14	T2P_ERR_ERROR
LEAF_NODE	1594:34	1594:34	10	;
JUMP_STATEMENT	1595:4	1595:10	9	return DESTINATION ;
KEYWORD	1595:4	1595:4	10	return
LEAF_NODE	1595:4	1595:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1595:10	1595:10	10	;
LEAF_NODE	1596:3	1596:3	8	}
EXPR_STATEMENT	1597:3	1597:51	6	t2p -> pdf_colorspace = T2P_CS_CMYK | T2P_CS_PALETTE ;
EXPR	1597:3	1597:3	7	t2p -> pdf_colorspace = T2P_CS_CMYK | T2P_CS_PALETTE
ASSIGN	1597:3	1597:23	8	t2p -> pdf_colorspace = T2P_CS_CMYK | T2P_CS_PALETTE
LVAL	1597:3	1597:3	9	t2p -> pdf_colorspace
FIELD	1597:3	1597:8	10	t2p -> pdf_colorspace
LEAF_NODE	1597:3	1597:3	11	t2p
LEAF_NODE	1597:6	1597:6	11	->
LEAF_NODE	1597:8	1597:8	11	pdf_colorspace
ASSIGN_OP	1597:22	1597:22	9	=
LEAF_NODE	1597:22	1597:22	10	=
RVAL	1597:23	1597:23	9	T2P_CS_CMYK | T2P_CS_PALETTE
BIT_OR	1597:23	1597:37	10	T2P_CS_CMYK | T2P_CS_PALETTE
BIT_OR_ELEM	1597:23	1597:23	11	T2P_CS_CMYK
FIELD	1597:23	1597:23	12	T2P_CS_CMYK
LEAF_NODE	1597:23	1597:23	13	T2P_CS_CMYK
LEAF_NODE	1597:35	1597:35	11	|
BIT_OR_ELEM	1597:37	1597:37	11	T2P_CS_PALETTE
FIELD	1597:37	1597:37	12	T2P_CS_PALETTE
LEAF_NODE	1597:37	1597:37	13	T2P_CS_PALETTE
LEAF_NODE	1597:51	1597:51	7	;
EXPR_STATEMENT	1598:3	1598:55	6	t2p -> pdf_palettesize = 0x0001 << t2p -> tiff_bitspersample ;
EXPR	1598:3	1598:3	7	t2p -> pdf_palettesize = 0x0001 << t2p -> tiff_bitspersample
ASSIGN	1598:3	1598:24	8	t2p -> pdf_palettesize = 0x0001 << t2p -> tiff_bitspersample
LVAL	1598:3	1598:3	9	t2p -> pdf_palettesize
FIELD	1598:3	1598:8	10	t2p -> pdf_palettesize
LEAF_NODE	1598:3	1598:3	11	t2p
LEAF_NODE	1598:6	1598:6	11	->
LEAF_NODE	1598:8	1598:8	11	pdf_palettesize
ASSIGN_OP	1598:23	1598:23	9	=
LEAF_NODE	1598:23	1598:23	10	=
RVAL	1598:24	1598:32	9	0x0001 << t2p -> tiff_bitspersample
FIELD	1598:24	1598:24	10	0x0001
LEAF_NODE	1598:24	1598:24	11	0x0001
LEAF_NODE	1598:30	1598:30	10	<<
FIELD	1598:32	1598:37	10	t2p -> tiff_bitspersample
LEAF_NODE	1598:32	1598:32	11	t2p
LEAF_NODE	1598:35	1598:35	11	->
LEAF_NODE	1598:37	1598:37	11	tiff_bitspersample
LEAF_NODE	1598:55	1598:55	7	;
SELECTION	1599:3	1599:61	6	
KEYWORD	1599:3	1599:3	7	if
LEAF_NODE	1599:3	1599:3	8	if
LEAF_NODE	1599:5	1599:5	7	(
CONDITION	1599:6	1599:6	7	! TIFFGetField ( input , TIFFTAG_COLORMAP , & r , & g , & b , & a )
EXPR	1599:6	1599:6	8	! TIFFGetField ( input , TIFFTAG_COLORMAP , & r , & g , & b , & a )
UNARY_EXPR	1599:6	1599:7	9	! TIFFGetField ( input , TIFFTAG_COLORMAP , & r , & g , & b , & a )
UNARY_OPERATOR	1599:6	1599:6	10	!
LEAF_NODE	1599:6	1599:6	11	!
FUNCTION_CALL	1599:7	1599:59	10	TIFFGetField ( input , TIFFTAG_COLORMAP , & r , & g , & b , & a )
CALLEE	1599:7	1599:7	11	TIFFGetField
LEAF_NODE	1599:7	1599:7	12	TIFFGetField
LEAF_NODE	1599:19	1599:19	11	(
ARGUMENT	1599:20	1599:20	11	input
FIELD	1599:20	1599:20	12	input
LEAF_NODE	1599:20	1599:20	13	input
LEAF_NODE	1599:25	1599:25	11	,
ARGUMENT	1599:27	1599:27	11	TIFFTAG_COLORMAP
FIELD	1599:27	1599:27	12	TIFFTAG_COLORMAP
LEAF_NODE	1599:27	1599:27	13	TIFFTAG_COLORMAP
LEAF_NODE	1599:43	1599:43	11	,
ARGUMENT	1599:45	1599:45	11	& r
UNARY_EXPR	1599:45	1599:46	12	& r
UNARY_OPERATOR	1599:45	1599:45	13	&
LEAF_NODE	1599:45	1599:45	14	&
FIELD	1599:46	1599:46	13	r
LEAF_NODE	1599:46	1599:46	14	r
LEAF_NODE	1599:47	1599:47	11	,
ARGUMENT	1599:49	1599:49	11	& g
UNARY_EXPR	1599:49	1599:50	12	& g
UNARY_OPERATOR	1599:49	1599:49	13	&
LEAF_NODE	1599:49	1599:49	14	&
FIELD	1599:50	1599:50	13	g
LEAF_NODE	1599:50	1599:50	14	g
LEAF_NODE	1599:51	1599:51	11	,
ARGUMENT	1599:53	1599:53	11	& b
UNARY_EXPR	1599:53	1599:54	12	& b
UNARY_OPERATOR	1599:53	1599:53	13	&
LEAF_NODE	1599:53	1599:53	14	&
FIELD	1599:54	1599:54	13	b
LEAF_NODE	1599:54	1599:54	14	b
LEAF_NODE	1599:55	1599:55	11	,
ARGUMENT	1599:57	1599:57	11	& a
UNARY_EXPR	1599:57	1599:58	12	& a
UNARY_OPERATOR	1599:57	1599:57	13	&
LEAF_NODE	1599:57	1599:57	14	&
FIELD	1599:58	1599:58	13	a
LEAF_NODE	1599:58	1599:58	14	a
LEAF_NODE	1599:59	1599:59	11	)
LEAF_NODE	1599:60	1599:60	7	)
STATEMENTS	1599:61	1606:3	7	
LEAF_NODE	1599:61	1599:61	8	{
STATEMENTS	1600:4	1605:4	8	
EXPR_STATEMENT	1600:4	1603:25	9	TIFFError ( TIFF2PDF_MODULE , "Palettized image %s has no color map" , TIFFFileName ( input ) ) ;
EXPR	1600:4	1600:4	10	TIFFError ( TIFF2PDF_MODULE , "Palettized image %s has no color map" , TIFFFileName ( input ) )
FUNCTION_CALL	1600:4	1603:24	11	TIFFError ( TIFF2PDF_MODULE , "Palettized image %s has no color map" , TIFFFileName ( input ) )
CALLEE	1600:4	1600:4	12	TIFFError
LEAF_NODE	1600:4	1600:4	13	TIFFError
LEAF_NODE	1600:13	1600:13	12	(
ARGUMENT	1601:5	1601:5	12	TIFF2PDF_MODULE
FIELD	1601:5	1601:5	13	TIFF2PDF_MODULE
LEAF_NODE	1601:5	1601:5	14	TIFF2PDF_MODULE
LEAF_NODE	1601:20	1601:20	12	,
ARGUMENT	1602:5	1602:5	12	"Palettized image %s has no color map"
FIELD	1602:5	1602:5	13	"Palettized image %s has no color map"
LEAF_NODE	1602:5	1602:5	14	"Palettized image %s has no color map"
LEAF_NODE	1602:43	1602:43	12	,
ARGUMENT	1603:5	1603:5	12	TIFFFileName ( input )
FUNCTION_CALL	1603:5	1603:23	13	TIFFFileName ( input )
CALLEE	1603:5	1603:5	14	TIFFFileName
LEAF_NODE	1603:5	1603:5	15	TIFFFileName
LEAF_NODE	1603:17	1603:17	14	(
ARGUMENT	1603:18	1603:18	14	input
FIELD	1603:18	1603:18	15	input
LEAF_NODE	1603:18	1603:18	16	input
LEAF_NODE	1603:23	1603:23	14	)
LEAF_NODE	1603:24	1603:24	12	)
LEAF_NODE	1603:25	1603:25	10	;
EXPR_STATEMENT	1604:4	1604:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1604:4	1604:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1604:4	1604:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1604:4	1604:4	12	t2p -> t2p_error
FIELD	1604:4	1604:9	13	t2p -> t2p_error
LEAF_NODE	1604:4	1604:4	14	t2p
LEAF_NODE	1604:7	1604:7	14	->
LEAF_NODE	1604:9	1604:9	14	t2p_error
ASSIGN_OP	1604:19	1604:19	12	=
LEAF_NODE	1604:19	1604:19	13	=
RVAL	1604:21	1604:21	12	T2P_ERR_ERROR
FIELD	1604:21	1604:21	13	T2P_ERR_ERROR
LEAF_NODE	1604:21	1604:21	14	T2P_ERR_ERROR
LEAF_NODE	1604:34	1604:34	10	;
JUMP_STATEMENT	1605:4	1605:10	9	return DESTINATION ;
KEYWORD	1605:4	1605:4	10	return
LEAF_NODE	1605:4	1605:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1605:10	1605:10	10	;
LEAF_NODE	1606:3	1606:3	8	}
SELECTION	1607:3	1607:55	6	
KEYWORD	1607:3	1607:3	7	if
LEAF_NODE	1607:3	1607:3	8	if
LEAF_NODE	1607:5	1607:5	7	(
CONDITION	1607:6	1607:6	7	r == NULL || g == NULL || b == NULL || a == NULL
EXPR	1607:6	1607:6	8	r == NULL || g == NULL || b == NULL || a == NULL
OR	1607:6	1607:19	9	r == NULL || g == NULL || b == NULL || a == NULL
EXPR	1607:6	1607:11	10	r == NULL
FIELD	1607:6	1607:6	11	r
LEAF_NODE	1607:6	1607:6	12	r
EQ_OPERATOR	1607:8	1607:8	11	==
LEAF_NODE	1607:8	1607:8	12	==
FIELD	1607:11	1607:11	11	NULL
LEAF_NODE	1607:11	1607:11	12	NULL
LEAF_NODE	1607:16	1607:16	10	||
EXPR	1607:19	1607:19	10	g == NULL || b == NULL || a == NULL
OR	1607:19	1607:32	11	g == NULL || b == NULL || a == NULL
EXPR	1607:19	1607:24	12	g == NULL
FIELD	1607:19	1607:19	13	g
LEAF_NODE	1607:19	1607:19	14	g
EQ_OPERATOR	1607:21	1607:21	13	==
LEAF_NODE	1607:21	1607:21	14	==
FIELD	1607:24	1607:24	13	NULL
LEAF_NODE	1607:24	1607:24	14	NULL
LEAF_NODE	1607:29	1607:29	12	||
EXPR	1607:32	1607:32	12	b == NULL || a == NULL
OR	1607:32	1607:45	13	b == NULL || a == NULL
EXPR	1607:32	1607:37	14	b == NULL
FIELD	1607:32	1607:32	15	b
LEAF_NODE	1607:32	1607:32	16	b
EQ_OPERATOR	1607:34	1607:34	15	==
LEAF_NODE	1607:34	1607:34	16	==
FIELD	1607:37	1607:37	15	NULL
LEAF_NODE	1607:37	1607:37	16	NULL
LEAF_NODE	1607:42	1607:42	14	||
EXPR	1607:45	1607:50	14	a == NULL
FIELD	1607:45	1607:45	15	a
LEAF_NODE	1607:45	1607:45	16	a
EQ_OPERATOR	1607:47	1607:47	15	==
LEAF_NODE	1607:47	1607:47	16	==
FIELD	1607:50	1607:50	15	NULL
LEAF_NODE	1607:50	1607:50	16	NULL
LEAF_NODE	1607:54	1607:54	7	)
STATEMENTS	1607:55	1613:3	7	
LEAF_NODE	1607:55	1607:55	8	{
STATEMENTS	1608:4	1612:4	8	
EXPR_STATEMENT	1608:4	1610:49	9	TIFFError ( TIFF2PDF_MODULE , "Error getting 4 components from color map" ) ;
EXPR	1608:4	1608:4	10	TIFFError ( TIFF2PDF_MODULE , "Error getting 4 components from color map" )
FUNCTION_CALL	1608:4	1610:48	11	TIFFError ( TIFF2PDF_MODULE , "Error getting 4 components from color map" )
CALLEE	1608:4	1608:4	12	TIFFError
LEAF_NODE	1608:4	1608:4	13	TIFFError
LEAF_NODE	1608:13	1608:13	12	(
ARGUMENT	1609:5	1609:5	12	TIFF2PDF_MODULE
FIELD	1609:5	1609:5	13	TIFF2PDF_MODULE
LEAF_NODE	1609:5	1609:5	14	TIFF2PDF_MODULE
LEAF_NODE	1609:20	1609:20	12	,
ARGUMENT	1610:5	1610:5	12	"Error getting 4 components from color map"
FIELD	1610:5	1610:5	13	"Error getting 4 components from color map"
LEAF_NODE	1610:5	1610:5	14	"Error getting 4 components from color map"
LEAF_NODE	1610:48	1610:48	12	)
LEAF_NODE	1610:49	1610:49	10	;
EXPR_STATEMENT	1611:4	1611:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1611:4	1611:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1611:4	1611:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1611:4	1611:4	12	t2p -> t2p_error
FIELD	1611:4	1611:9	13	t2p -> t2p_error
LEAF_NODE	1611:4	1611:4	14	t2p
LEAF_NODE	1611:7	1611:7	14	->
LEAF_NODE	1611:9	1611:9	14	t2p_error
ASSIGN_OP	1611:19	1611:19	12	=
LEAF_NODE	1611:19	1611:19	13	=
RVAL	1611:21	1611:21	12	T2P_ERR_ERROR
FIELD	1611:21	1611:21	13	T2P_ERR_ERROR
LEAF_NODE	1611:21	1611:21	14	T2P_ERR_ERROR
LEAF_NODE	1611:34	1611:34	10	;
JUMP_STATEMENT	1612:4	1612:10	9	return DESTINATION ;
KEYWORD	1612:4	1612:4	10	return
LEAF_NODE	1612:4	1612:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1612:10	1612:10	10	;
LEAF_NODE	1613:3	1613:3	8	}
SELECTION	1614:3	1614:31	6	
KEYWORD	1614:3	1614:3	7	if
LEAF_NODE	1614:3	1614:3	8	if
LEAF_NODE	1614:5	1614:5	7	(
CONDITION	1614:6	1614:6	7	t2p -> pdf_palette != NULL
EXPR	1614:6	1614:26	8	t2p -> pdf_palette != NULL
FIELD	1614:6	1614:11	9	t2p -> pdf_palette
LEAF_NODE	1614:6	1614:6	10	t2p
LEAF_NODE	1614:9	1614:9	10	->
LEAF_NODE	1614:11	1614:11	10	pdf_palette
EQ_OPERATOR	1614:23	1614:23	9	!=
LEAF_NODE	1614:23	1614:23	10	!=
FIELD	1614:26	1614:26	9	NULL
LEAF_NODE	1614:26	1614:26	10	NULL
LEAF_NODE	1614:30	1614:30	7	)
STATEMENTS	1614:31	1617:3	7	
LEAF_NODE	1614:31	1614:31	8	{
STATEMENTS	1615:4	1616:4	8	
EXPR_STATEMENT	1615:4	1615:31	9	_TIFFfree ( t2p -> pdf_palette ) ;
EXPR	1615:4	1615:4	10	_TIFFfree ( t2p -> pdf_palette )
FUNCTION_CALL	1615:4	1615:30	11	_TIFFfree ( t2p -> pdf_palette )
CALLEE	1615:4	1615:4	12	_TIFFfree
LEAF_NODE	1615:4	1615:4	13	_TIFFfree
LEAF_NODE	1615:13	1615:13	12	(
ARGUMENT	1615:14	1615:14	12	t2p -> pdf_palette
FIELD	1615:14	1615:19	13	t2p -> pdf_palette
LEAF_NODE	1615:14	1615:14	14	t2p
LEAF_NODE	1615:17	1615:17	14	->
LEAF_NODE	1615:19	1615:19	14	pdf_palette
LEAF_NODE	1615:30	1615:30	12	)
LEAF_NODE	1615:31	1615:31	10	;
EXPR_STATEMENT	1616:4	1616:25	9	t2p -> pdf_palette = NULL ;
EXPR	1616:4	1616:4	10	t2p -> pdf_palette = NULL
ASSIGN	1616:4	1616:21	11	t2p -> pdf_palette = NULL
LVAL	1616:4	1616:4	12	t2p -> pdf_palette
FIELD	1616:4	1616:9	13	t2p -> pdf_palette
LEAF_NODE	1616:4	1616:4	14	t2p
LEAF_NODE	1616:7	1616:7	14	->
LEAF_NODE	1616:9	1616:9	14	pdf_palette
ASSIGN_OP	1616:20	1616:20	12	=
LEAF_NODE	1616:20	1616:20	13	=
RVAL	1616:21	1616:21	12	NULL
FIELD	1616:21	1616:21	13	NULL
LEAF_NODE	1616:21	1616:21	14	NULL
LEAF_NODE	1616:25	1616:25	10	;
LEAF_NODE	1617:3	1617:3	8	}
EXPR_STATEMENT	1618:3	1619:66	6	t2p -> pdf_palette = ( unsigned char * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 4 ) ) ;
EXPR	1618:3	1618:3	7	t2p -> pdf_palette = ( unsigned char * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 4 ) )
ASSIGN	1618:3	1618:22	8	t2p -> pdf_palette = ( unsigned char * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 4 ) )
LVAL	1618:3	1618:3	9	t2p -> pdf_palette
FIELD	1618:3	1618:8	10	t2p -> pdf_palette
LEAF_NODE	1618:3	1618:3	11	t2p
LEAF_NODE	1618:6	1618:6	11	->
LEAF_NODE	1618:8	1618:8	11	pdf_palette
ASSIGN_OP	1618:20	1618:20	9	=
LEAF_NODE	1618:20	1618:20	10	=
RVAL	1618:22	1619:4	9	( unsigned char * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 4 ) )
LEAF_NODE	1618:22	1618:22	10	(
TYPE_NAME	1618:23	1618:32	10	unsigned char
LEAF_NODE	1618:23	1618:23	11	unsigned
LEAF_NODE	1618:32	1618:32	11	char
LEAF_NODE	1618:36	1618:36	10	*
LEAF_NODE	1618:37	1618:37	10	)
FUNCTION_CALL	1619:4	1619:65	10	_TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 4 ) )
CALLEE	1619:4	1619:4	11	_TIFFmalloc
LEAF_NODE	1619:4	1619:4	12	_TIFFmalloc
LEAF_NODE	1619:15	1619:15	11	(
ARGUMENT	1619:16	1619:16	11	TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 4 )
FUNCTION_CALL	1619:16	1619:64	12	TIFFSafeMultiply ( tmsize_t , t2p -> pdf_palettesize , 4 )
CALLEE	1619:16	1619:16	13	TIFFSafeMultiply
LEAF_NODE	1619:16	1619:16	14	TIFFSafeMultiply
LEAF_NODE	1619:32	1619:32	13	(
ARGUMENT	1619:33	1619:33	13	tmsize_t
FIELD	1619:33	1619:33	14	tmsize_t
LEAF_NODE	1619:33	1619:33	15	tmsize_t
LEAF_NODE	1619:41	1619:41	13	,
ARGUMENT	1619:42	1619:42	13	t2p -> pdf_palettesize
FIELD	1619:42	1619:47	14	t2p -> pdf_palettesize
LEAF_NODE	1619:42	1619:42	15	t2p
LEAF_NODE	1619:45	1619:45	15	->
LEAF_NODE	1619:47	1619:47	15	pdf_palettesize
LEAF_NODE	1619:62	1619:62	13	,
ARGUMENT	1619:63	1619:63	13	4
FIELD	1619:63	1619:63	14	4
LEAF_NODE	1619:63	1619:63	15	4
LEAF_NODE	1619:64	1619:64	13	)
LEAF_NODE	1619:65	1619:65	11	)
LEAF_NODE	1619:66	1619:66	7	;
SELECTION	1620:3	1620:29	6	
KEYWORD	1620:3	1620:3	7	if
LEAF_NODE	1620:3	1620:3	8	if
LEAF_NODE	1620:5	1620:5	7	(
CONDITION	1620:6	1620:6	7	t2p -> pdf_palette == NULL
EXPR	1620:6	1620:24	8	t2p -> pdf_palette == NULL
FIELD	1620:6	1620:11	9	t2p -> pdf_palette
LEAF_NODE	1620:6	1620:6	10	t2p
LEAF_NODE	1620:9	1620:9	10	->
LEAF_NODE	1620:11	1620:11	10	pdf_palette
EQ_OPERATOR	1620:22	1620:22	9	==
LEAF_NODE	1620:22	1620:22	10	==
FIELD	1620:24	1620:24	9	NULL
LEAF_NODE	1620:24	1620:24	10	NULL
LEAF_NODE	1620:28	1620:28	7	)
STATEMENTS	1620:29	1628:3	7	
LEAF_NODE	1620:29	1620:29	8	{
STATEMENTS	1621:4	1627:4	8	
EXPR_STATEMENT	1621:4	1625:25	9	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_read_tiff_image, %s" , t2p -> pdf_palettesize , TIFFFileName ( input ) ) ;
EXPR	1621:4	1621:4	10	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_read_tiff_image, %s" , t2p -> pdf_palettesize , TIFFFileName ( input ) )
FUNCTION_CALL	1621:4	1625:24	11	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_read_tiff_image, %s" , t2p -> pdf_palettesize , TIFFFileName ( input ) )
CALLEE	1621:4	1621:4	12	TIFFError
LEAF_NODE	1621:4	1621:4	13	TIFFError
LEAF_NODE	1621:13	1621:13	12	(
ARGUMENT	1622:5	1622:5	12	TIFF2PDF_MODULE
FIELD	1622:5	1622:5	13	TIFF2PDF_MODULE
LEAF_NODE	1622:5	1622:5	14	TIFF2PDF_MODULE
LEAF_NODE	1622:20	1622:20	12	,
ARGUMENT	1623:5	1623:5	12	"Can't allocate %u bytes of memory for t2p_read_tiff_image, %s"
FIELD	1623:5	1623:5	13	"Can't allocate %u bytes of memory for t2p_read_tiff_image, %s"
LEAF_NODE	1623:5	1623:5	14	"Can't allocate %u bytes of memory for t2p_read_tiff_image, %s"
LEAF_NODE	1623:68	1623:68	12	,
ARGUMENT	1624:5	1624:5	12	t2p -> pdf_palettesize
FIELD	1624:5	1624:10	13	t2p -> pdf_palettesize
LEAF_NODE	1624:5	1624:5	14	t2p
LEAF_NODE	1624:8	1624:8	14	->
LEAF_NODE	1624:10	1624:10	14	pdf_palettesize
LEAF_NODE	1624:25	1624:25	12	,
ARGUMENT	1625:5	1625:5	12	TIFFFileName ( input )
FUNCTION_CALL	1625:5	1625:23	13	TIFFFileName ( input )
CALLEE	1625:5	1625:5	14	TIFFFileName
LEAF_NODE	1625:5	1625:5	15	TIFFFileName
LEAF_NODE	1625:17	1625:17	14	(
ARGUMENT	1625:18	1625:18	14	input
FIELD	1625:18	1625:18	15	input
LEAF_NODE	1625:18	1625:18	16	input
LEAF_NODE	1625:23	1625:23	14	)
LEAF_NODE	1625:24	1625:24	12	)
LEAF_NODE	1625:25	1625:25	10	;
EXPR_STATEMENT	1626:4	1626:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1626:4	1626:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1626:4	1626:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1626:4	1626:4	12	t2p -> t2p_error
FIELD	1626:4	1626:9	13	t2p -> t2p_error
LEAF_NODE	1626:4	1626:4	14	t2p
LEAF_NODE	1626:7	1626:7	14	->
LEAF_NODE	1626:9	1626:9	14	t2p_error
ASSIGN_OP	1626:19	1626:19	12	=
LEAF_NODE	1626:19	1626:19	13	=
RVAL	1626:21	1626:21	12	T2P_ERR_ERROR
FIELD	1626:21	1626:21	13	T2P_ERR_ERROR
LEAF_NODE	1626:21	1626:21	14	T2P_ERR_ERROR
LEAF_NODE	1626:34	1626:34	10	;
JUMP_STATEMENT	1627:4	1627:10	9	return DESTINATION ;
KEYWORD	1627:4	1627:4	10	return
LEAF_NODE	1627:4	1627:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1627:10	1627:10	10	;
LEAF_NODE	1628:3	1628:3	8	}
ITERATION	1629:3	1629:38	6	
KEYWORD	1629:3	1629:3	7	for
LEAF_NODE	1629:3	1629:3	8	for
LEAF_NODE	1629:6	1629:6	7	(
FOR_INIT	1629:7	1629:10	7	i = 0 ;
EXPR	1629:7	1629:7	8	i = 0
ASSIGN	1629:7	1629:9	9	i = 0
LVAL	1629:7	1629:7	10	i
FIELD	1629:7	1629:7	11	i
LEAF_NODE	1629:7	1629:7	12	i
ASSIGN_OP	1629:8	1629:8	10	=
LEAF_NODE	1629:8	1629:8	11	=
RVAL	1629:9	1629:9	10	0
FIELD	1629:9	1629:9	11	0
LEAF_NODE	1629:9	1629:9	12	0
LEAF_NODE	1629:10	1629:10	8	;
CONDITION	1629:11	1629:11	7	i < t2p -> pdf_palettesize
EXPR	1629:11	1629:13	8	i < t2p -> pdf_palettesize
FIELD	1629:11	1629:11	9	i
LEAF_NODE	1629:11	1629:11	10	i
REL_OPERATOR	1629:12	1629:12	9	<
LEAF_NODE	1629:12	1629:12	10	<
FIELD	1629:13	1629:18	9	t2p -> pdf_palettesize
LEAF_NODE	1629:13	1629:13	10	t2p
LEAF_NODE	1629:16	1629:16	10	->
LEAF_NODE	1629:18	1629:18	10	pdf_palettesize
LEAF_NODE	1629:33	1629:33	7	;
FOR_EXPR	1629:34	1629:34	7	i ++
EXPR	1629:34	1629:34	8	i ++
FIELD	1629:34	1629:35	9	i ++
LEAF_NODE	1629:34	1629:34	10	i
LEAF_NODE	1629:35	1629:35	10	++
LEAF_NODE	1629:37	1629:37	7	)
STATEMENTS	1629:38	1634:3	7	
LEAF_NODE	1629:38	1629:38	8	{
STATEMENTS	1630:4	1633:4	8	
EXPR_STATEMENT	1630:4	1630:56	9	t2p -> pdf_palette [ ( i * 4 ) ] = ( unsigned char ) ( r [ i ] >> 8 ) ;
EXPR	1630:4	1630:4	10	t2p -> pdf_palette [ ( i * 4 ) ] = ( unsigned char ) ( r [ i ] >> 8 )
ASSIGN	1630:4	1630:31	11	t2p -> pdf_palette [ ( i * 4 ) ] = ( unsigned char ) ( r [ i ] >> 8 )
LVAL	1630:4	1630:4	12	t2p -> pdf_palette [ ( i * 4 ) ]
FIELD	1630:4	1630:26	13	t2p -> pdf_palette [ ( i * 4 ) ]
LEAF_NODE	1630:4	1630:4	14	t2p
LEAF_NODE	1630:7	1630:7	14	->
LEAF_NODE	1630:9	1630:9	14	pdf_palette
LEAF_NODE	1630:20	1630:20	14	[
EXPR	1630:21	1630:25	14	( i * 4 )
LEAF_NODE	1630:21	1630:21	15	(
FIELD	1630:22	1630:22	15	i
LEAF_NODE	1630:22	1630:22	16	i
LEAF_NODE	1630:23	1630:23	15	*
FIELD	1630:24	1630:24	15	4
LEAF_NODE	1630:24	1630:24	16	4
LEAF_NODE	1630:25	1630:25	15	)
LEAF_NODE	1630:26	1630:26	14	]
ASSIGN_OP	1630:29	1630:29	12	=
LEAF_NODE	1630:29	1630:29	13	=
RVAL	1630:31	1630:55	12	( unsigned char ) ( r [ i ] >> 8 )
LEAF_NODE	1630:31	1630:31	13	(
TYPE_NAME	1630:32	1630:41	13	unsigned char
LEAF_NODE	1630:32	1630:32	14	unsigned
LEAF_NODE	1630:41	1630:41	14	char
LEAF_NODE	1630:45	1630:45	13	)
LEAF_NODE	1630:47	1630:47	13	(
FIELD	1630:48	1630:51	13	r [ i ]
LEAF_NODE	1630:48	1630:48	14	r
LEAF_NODE	1630:49	1630:49	14	[
EXPR	1630:50	1630:50	14	i
FIELD	1630:50	1630:50	15	i
LEAF_NODE	1630:50	1630:50	16	i
LEAF_NODE	1630:51	1630:51	14	]
LEAF_NODE	1630:52	1630:52	13	>>
FIELD	1630:54	1630:54	13	8
LEAF_NODE	1630:54	1630:54	14	8
LEAF_NODE	1630:55	1630:55	13	)
LEAF_NODE	1630:56	1630:56	10	;
EXPR_STATEMENT	1631:4	1631:56	9	t2p -> pdf_palette [ ( i * 4 ) + 1 ] = ( unsigned char ) ( g [ i ] >> 8 ) ;
EXPR	1631:4	1631:4	10	t2p -> pdf_palette [ ( i * 4 ) + 1 ] = ( unsigned char ) ( g [ i ] >> 8 )
ASSIGN	1631:4	1631:31	11	t2p -> pdf_palette [ ( i * 4 ) + 1 ] = ( unsigned char ) ( g [ i ] >> 8 )
LVAL	1631:4	1631:4	12	t2p -> pdf_palette [ ( i * 4 ) + 1 ]
FIELD	1631:4	1631:28	13	t2p -> pdf_palette [ ( i * 4 ) + 1 ]
LEAF_NODE	1631:4	1631:4	14	t2p
LEAF_NODE	1631:7	1631:7	14	->
LEAF_NODE	1631:9	1631:9	14	pdf_palette
LEAF_NODE	1631:20	1631:20	14	[
EXPR	1631:21	1631:27	14	( i * 4 ) + 1
LEAF_NODE	1631:21	1631:21	15	(
FIELD	1631:22	1631:22	15	i
LEAF_NODE	1631:22	1631:22	16	i
LEAF_NODE	1631:23	1631:23	15	*
FIELD	1631:24	1631:24	15	4
LEAF_NODE	1631:24	1631:24	16	4
LEAF_NODE	1631:25	1631:25	15	)
LEAF_NODE	1631:26	1631:26	15	+
FIELD	1631:27	1631:27	15	1
LEAF_NODE	1631:27	1631:27	16	1
LEAF_NODE	1631:28	1631:28	14	]
ASSIGN_OP	1631:29	1631:29	12	=
LEAF_NODE	1631:29	1631:29	13	=
RVAL	1631:31	1631:55	12	( unsigned char ) ( g [ i ] >> 8 )
LEAF_NODE	1631:31	1631:31	13	(
TYPE_NAME	1631:32	1631:41	13	unsigned char
LEAF_NODE	1631:32	1631:32	14	unsigned
LEAF_NODE	1631:41	1631:41	14	char
LEAF_NODE	1631:45	1631:45	13	)
LEAF_NODE	1631:47	1631:47	13	(
FIELD	1631:48	1631:51	13	g [ i ]
LEAF_NODE	1631:48	1631:48	14	g
LEAF_NODE	1631:49	1631:49	14	[
EXPR	1631:50	1631:50	14	i
FIELD	1631:50	1631:50	15	i
LEAF_NODE	1631:50	1631:50	16	i
LEAF_NODE	1631:51	1631:51	14	]
LEAF_NODE	1631:52	1631:52	13	>>
FIELD	1631:54	1631:54	13	8
LEAF_NODE	1631:54	1631:54	14	8
LEAF_NODE	1631:55	1631:55	13	)
LEAF_NODE	1631:56	1631:56	10	;
EXPR_STATEMENT	1632:4	1632:56	9	t2p -> pdf_palette [ ( i * 4 ) + 2 ] = ( unsigned char ) ( b [ i ] >> 8 ) ;
EXPR	1632:4	1632:4	10	t2p -> pdf_palette [ ( i * 4 ) + 2 ] = ( unsigned char ) ( b [ i ] >> 8 )
ASSIGN	1632:4	1632:31	11	t2p -> pdf_palette [ ( i * 4 ) + 2 ] = ( unsigned char ) ( b [ i ] >> 8 )
LVAL	1632:4	1632:4	12	t2p -> pdf_palette [ ( i * 4 ) + 2 ]
FIELD	1632:4	1632:28	13	t2p -> pdf_palette [ ( i * 4 ) + 2 ]
LEAF_NODE	1632:4	1632:4	14	t2p
LEAF_NODE	1632:7	1632:7	14	->
LEAF_NODE	1632:9	1632:9	14	pdf_palette
LEAF_NODE	1632:20	1632:20	14	[
EXPR	1632:21	1632:27	14	( i * 4 ) + 2
LEAF_NODE	1632:21	1632:21	15	(
FIELD	1632:22	1632:22	15	i
LEAF_NODE	1632:22	1632:22	16	i
LEAF_NODE	1632:23	1632:23	15	*
FIELD	1632:24	1632:24	15	4
LEAF_NODE	1632:24	1632:24	16	4
LEAF_NODE	1632:25	1632:25	15	)
LEAF_NODE	1632:26	1632:26	15	+
FIELD	1632:27	1632:27	15	2
LEAF_NODE	1632:27	1632:27	16	2
LEAF_NODE	1632:28	1632:28	14	]
ASSIGN_OP	1632:29	1632:29	12	=
LEAF_NODE	1632:29	1632:29	13	=
RVAL	1632:31	1632:55	12	( unsigned char ) ( b [ i ] >> 8 )
LEAF_NODE	1632:31	1632:31	13	(
TYPE_NAME	1632:32	1632:41	13	unsigned char
LEAF_NODE	1632:32	1632:32	14	unsigned
LEAF_NODE	1632:41	1632:41	14	char
LEAF_NODE	1632:45	1632:45	13	)
LEAF_NODE	1632:47	1632:47	13	(
FIELD	1632:48	1632:51	13	b [ i ]
LEAF_NODE	1632:48	1632:48	14	b
LEAF_NODE	1632:49	1632:49	14	[
EXPR	1632:50	1632:50	14	i
FIELD	1632:50	1632:50	15	i
LEAF_NODE	1632:50	1632:50	16	i
LEAF_NODE	1632:51	1632:51	14	]
LEAF_NODE	1632:52	1632:52	13	>>
FIELD	1632:54	1632:54	13	8
LEAF_NODE	1632:54	1632:54	14	8
LEAF_NODE	1632:55	1632:55	13	)
LEAF_NODE	1632:56	1632:56	10	;
EXPR_STATEMENT	1633:4	1633:56	9	t2p -> pdf_palette [ ( i * 4 ) + 3 ] = ( unsigned char ) ( a [ i ] >> 8 ) ;
EXPR	1633:4	1633:4	10	t2p -> pdf_palette [ ( i * 4 ) + 3 ] = ( unsigned char ) ( a [ i ] >> 8 )
ASSIGN	1633:4	1633:31	11	t2p -> pdf_palette [ ( i * 4 ) + 3 ] = ( unsigned char ) ( a [ i ] >> 8 )
LVAL	1633:4	1633:4	12	t2p -> pdf_palette [ ( i * 4 ) + 3 ]
FIELD	1633:4	1633:28	13	t2p -> pdf_palette [ ( i * 4 ) + 3 ]
LEAF_NODE	1633:4	1633:4	14	t2p
LEAF_NODE	1633:7	1633:7	14	->
LEAF_NODE	1633:9	1633:9	14	pdf_palette
LEAF_NODE	1633:20	1633:20	14	[
EXPR	1633:21	1633:27	14	( i * 4 ) + 3
LEAF_NODE	1633:21	1633:21	15	(
FIELD	1633:22	1633:22	15	i
LEAF_NODE	1633:22	1633:22	16	i
LEAF_NODE	1633:23	1633:23	15	*
FIELD	1633:24	1633:24	15	4
LEAF_NODE	1633:24	1633:24	16	4
LEAF_NODE	1633:25	1633:25	15	)
LEAF_NODE	1633:26	1633:26	15	+
FIELD	1633:27	1633:27	15	3
LEAF_NODE	1633:27	1633:27	16	3
LEAF_NODE	1633:28	1633:28	14	]
ASSIGN_OP	1633:29	1633:29	12	=
LEAF_NODE	1633:29	1633:29	13	=
RVAL	1633:31	1633:55	12	( unsigned char ) ( a [ i ] >> 8 )
LEAF_NODE	1633:31	1633:31	13	(
TYPE_NAME	1633:32	1633:41	13	unsigned char
LEAF_NODE	1633:32	1633:32	14	unsigned
LEAF_NODE	1633:41	1633:41	14	char
LEAF_NODE	1633:45	1633:45	13	)
LEAF_NODE	1633:47	1633:47	13	(
FIELD	1633:48	1633:51	13	a [ i ]
LEAF_NODE	1633:48	1633:48	14	a
LEAF_NODE	1633:49	1633:49	14	[
EXPR	1633:50	1633:50	14	i
FIELD	1633:50	1633:50	15	i
LEAF_NODE	1633:50	1633:50	16	i
LEAF_NODE	1633:51	1633:51	14	]
LEAF_NODE	1633:52	1633:52	13	>>
FIELD	1633:54	1633:54	13	8
LEAF_NODE	1633:54	1633:54	14	8
LEAF_NODE	1633:55	1633:55	13	)
LEAF_NODE	1633:56	1633:56	10	;
LEAF_NODE	1634:3	1634:3	8	}
EXPR_STATEMENT	1635:3	1635:28	6	t2p -> pdf_palettesize *= 4 ;
EXPR	1635:3	1635:3	7	t2p -> pdf_palettesize *= 4
ASSIGN	1635:3	1635:27	8	t2p -> pdf_palettesize *= 4
LVAL	1635:3	1635:3	9	t2p -> pdf_palettesize
FIELD	1635:3	1635:8	10	t2p -> pdf_palettesize
LEAF_NODE	1635:3	1635:3	11	t2p
LEAF_NODE	1635:6	1635:6	11	->
LEAF_NODE	1635:8	1635:8	11	pdf_palettesize
ASSIGN_OP	1635:24	1635:24	9	*=
LEAF_NODE	1635:24	1635:24	10	*=
RVAL	1635:27	1635:27	9	4
FIELD	1635:27	1635:27	10	4
LEAF_NODE	1635:27	1635:27	11	4
LEAF_NODE	1635:28	1635:28	7	;
JUMP_STATEMENT	1636:3	1636:8	6	break DESTINATION ;
KEYWORD	1636:3	1636:3	7	break
LEAF_NODE	1636:3	1636:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1636:8	1636:8	7	;
LABEL	1637:2	1637:24	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	1637:2	1637:2	7	case
LEAF_NODE	1637:7	1637:7	7	PHOTOMETRIC_YCBCR
LEAF_NODE	1637:24	1637:24	7	:
EXPR_STATEMENT	1638:3	1638:33	6	t2p -> pdf_colorspace = T2P_CS_RGB ;
EXPR	1638:3	1638:3	7	t2p -> pdf_colorspace = T2P_CS_RGB
ASSIGN	1638:3	1638:23	8	t2p -> pdf_colorspace = T2P_CS_RGB
LVAL	1638:3	1638:3	9	t2p -> pdf_colorspace
FIELD	1638:3	1638:8	10	t2p -> pdf_colorspace
LEAF_NODE	1638:3	1638:3	11	t2p
LEAF_NODE	1638:6	1638:6	11	->
LEAF_NODE	1638:8	1638:8	11	pdf_colorspace
ASSIGN_OP	1638:22	1638:22	9	=
LEAF_NODE	1638:22	1638:22	10	=
RVAL	1638:23	1638:23	9	T2P_CS_RGB
FIELD	1638:23	1638:23	10	T2P_CS_RGB
LEAF_NODE	1638:23	1638:23	11	T2P_CS_RGB
LEAF_NODE	1638:33	1638:33	7	;
SELECTION	1639:3	1639:35	6	
KEYWORD	1639:3	1639:3	7	if
LEAF_NODE	1639:3	1639:3	8	if
LEAF_NODE	1639:5	1639:5	7	(
CONDITION	1639:6	1639:6	7	t2p -> tiff_samplesperpixel == 1
EXPR	1639:6	1639:33	8	t2p -> tiff_samplesperpixel == 1
FIELD	1639:6	1639:11	9	t2p -> tiff_samplesperpixel
LEAF_NODE	1639:6	1639:6	10	t2p
LEAF_NODE	1639:9	1639:9	10	->
LEAF_NODE	1639:11	1639:11	10	tiff_samplesperpixel
EQ_OPERATOR	1639:31	1639:31	9	==
LEAF_NODE	1639:31	1639:31	10	==
FIELD	1639:33	1639:33	9	1
LEAF_NODE	1639:33	1639:33	10	1
LEAF_NODE	1639:34	1639:34	7	)
STATEMENTS	1639:35	1643:3	7	
LEAF_NODE	1639:35	1639:35	8	{
STATEMENTS	1640:4	1642:4	8	
EXPR_STATEMENT	1640:4	1640:35	9	t2p -> pdf_colorspace = T2P_CS_GRAY ;
EXPR	1640:4	1640:4	10	t2p -> pdf_colorspace = T2P_CS_GRAY
ASSIGN	1640:4	1640:24	11	t2p -> pdf_colorspace = T2P_CS_GRAY
LVAL	1640:4	1640:4	12	t2p -> pdf_colorspace
FIELD	1640:4	1640:9	13	t2p -> pdf_colorspace
LEAF_NODE	1640:4	1640:4	14	t2p
LEAF_NODE	1640:7	1640:7	14	->
LEAF_NODE	1640:9	1640:9	14	pdf_colorspace
ASSIGN_OP	1640:23	1640:23	12	=
LEAF_NODE	1640:23	1640:23	13	=
RVAL	1640:24	1640:24	12	T2P_CS_GRAY
FIELD	1640:24	1640:24	13	T2P_CS_GRAY
LEAF_NODE	1640:24	1640:24	14	T2P_CS_GRAY
LEAF_NODE	1640:35	1640:35	10	;
EXPR_STATEMENT	1641:4	1641:48	9	t2p -> tiff_photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	1641:4	1641:4	10	t2p -> tiff_photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	1641:4	1641:26	11	t2p -> tiff_photometric = PHOTOMETRIC_MINISBLACK
LVAL	1641:4	1641:4	12	t2p -> tiff_photometric
FIELD	1641:4	1641:9	13	t2p -> tiff_photometric
LEAF_NODE	1641:4	1641:4	14	t2p
LEAF_NODE	1641:7	1641:7	14	->
LEAF_NODE	1641:9	1641:9	14	tiff_photometric
ASSIGN_OP	1641:25	1641:25	12	=
LEAF_NODE	1641:25	1641:25	13	=
RVAL	1641:26	1641:26	12	PHOTOMETRIC_MINISBLACK
FIELD	1641:26	1641:26	13	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1641:26	1641:26	14	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1641:48	1641:48	10	;
JUMP_STATEMENT	1642:4	1642:9	9	break DESTINATION ;
KEYWORD	1642:4	1642:4	10	break
LEAF_NODE	1642:4	1642:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1642:9	1642:9	10	;
LEAF_NODE	1643:3	1643:3	8	}
EXPR_STATEMENT	1644:3	1644:42	6	t2p -> pdf_sample = T2P_SAMPLE_YCBCR_TO_RGB ;
EXPR	1644:3	1644:3	7	t2p -> pdf_sample = T2P_SAMPLE_YCBCR_TO_RGB
ASSIGN	1644:3	1644:19	8	t2p -> pdf_sample = T2P_SAMPLE_YCBCR_TO_RGB
LVAL	1644:3	1644:3	9	t2p -> pdf_sample
FIELD	1644:3	1644:8	10	t2p -> pdf_sample
LEAF_NODE	1644:3	1644:3	11	t2p
LEAF_NODE	1644:6	1644:6	11	->
LEAF_NODE	1644:8	1644:8	11	pdf_sample
ASSIGN_OP	1644:18	1644:18	9	=
LEAF_NODE	1644:18	1644:18	10	=
RVAL	1644:19	1644:19	9	T2P_SAMPLE_YCBCR_TO_RGB
FIELD	1644:19	1644:19	10	T2P_SAMPLE_YCBCR_TO_RGB
LEAF_NODE	1644:19	1644:19	11	T2P_SAMPLE_YCBCR_TO_RGB
LEAF_NODE	1644:42	1644:42	7	;
SELECTION	1646:3	1646:53	6	
KEYWORD	1646:3	1646:3	7	if
LEAF_NODE	1646:3	1646:3	8	if
LEAF_NODE	1646:5	1646:5	7	(
CONDITION	1646:6	1646:6	7	t2p -> pdf_defaultcompression == T2P_COMPRESS_JPEG
EXPR	1646:6	1646:35	8	t2p -> pdf_defaultcompression == T2P_COMPRESS_JPEG
FIELD	1646:6	1646:11	9	t2p -> pdf_defaultcompression
LEAF_NODE	1646:6	1646:6	10	t2p
LEAF_NODE	1646:9	1646:9	10	->
LEAF_NODE	1646:11	1646:11	10	pdf_defaultcompression
EQ_OPERATOR	1646:33	1646:33	9	==
LEAF_NODE	1646:33	1646:33	10	==
FIELD	1646:35	1646:35	9	T2P_COMPRESS_JPEG
LEAF_NODE	1646:35	1646:35	10	T2P_COMPRESS_JPEG
LEAF_NODE	1646:52	1646:52	7	)
STATEMENTS	1646:53	1648:3	7	
LEAF_NODE	1646:53	1646:53	8	{
STATEMENTS	1647:4	1647:4	8	
EXPR_STATEMENT	1647:4	1647:38	9	t2p -> pdf_sample = T2P_SAMPLE_NOTHING ;
EXPR	1647:4	1647:4	10	t2p -> pdf_sample = T2P_SAMPLE_NOTHING
ASSIGN	1647:4	1647:20	11	t2p -> pdf_sample = T2P_SAMPLE_NOTHING
LVAL	1647:4	1647:4	12	t2p -> pdf_sample
FIELD	1647:4	1647:9	13	t2p -> pdf_sample
LEAF_NODE	1647:4	1647:4	14	t2p
LEAF_NODE	1647:7	1647:7	14	->
LEAF_NODE	1647:9	1647:9	14	pdf_sample
ASSIGN_OP	1647:19	1647:19	12	=
LEAF_NODE	1647:19	1647:19	13	=
RVAL	1647:20	1647:20	12	T2P_SAMPLE_NOTHING
FIELD	1647:20	1647:20	13	T2P_SAMPLE_NOTHING
LEAF_NODE	1647:20	1647:20	14	T2P_SAMPLE_NOTHING
LEAF_NODE	1647:38	1647:38	10	;
LEAF_NODE	1648:3	1648:3	8	}
JUMP_STATEMENT	1650:3	1650:8	6	break DESTINATION ;
KEYWORD	1650:3	1650:3	7	break
LEAF_NODE	1650:3	1650:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1650:8	1650:8	7	;
LABEL	1651:2	1651:25	6	case PHOTOMETRIC_CIELAB :
LEAF_NODE	1651:2	1651:2	7	case
LEAF_NODE	1651:7	1651:7	7	PHOTOMETRIC_CIELAB
LEAF_NODE	1651:25	1651:25	7	:
SELECTION	1652:12	1652:47	6	
KEYWORD	1652:12	1652:12	7	if
LEAF_NODE	1652:12	1652:12	8	if
LEAF_NODE	1652:14	1652:14	7	(
CONDITION	1652:16	1652:16	7	t2p -> tiff_samplesperpixel != 3
EXPR	1652:16	1652:45	8	t2p -> tiff_samplesperpixel != 3
FIELD	1652:16	1652:21	9	t2p -> tiff_samplesperpixel
LEAF_NODE	1652:16	1652:16	10	t2p
LEAF_NODE	1652:19	1652:19	10	->
LEAF_NODE	1652:21	1652:21	10	tiff_samplesperpixel
EQ_OPERATOR	1652:42	1652:42	9	!=
LEAF_NODE	1652:42	1652:42	10	!=
FIELD	1652:45	1652:45	9	3
LEAF_NODE	1652:45	1652:45	10	3
LEAF_NODE	1652:46	1652:46	7	)
STATEMENTS	1652:47	1659:12	7	
LEAF_NODE	1652:47	1652:47	8	{
STATEMENTS	1653:16	1658:16	8	
EXPR_STATEMENT	1653:16	1656:46	9	TIFFError ( TIFF2PDF_MODULE , "Unsupported samplesperpixel = %d for CIELAB" , t2p -> tiff_samplesperpixel ) ;
EXPR	1653:16	1653:16	10	TIFFError ( TIFF2PDF_MODULE , "Unsupported samplesperpixel = %d for CIELAB" , t2p -> tiff_samplesperpixel )
FUNCTION_CALL	1653:16	1656:45	11	TIFFError ( TIFF2PDF_MODULE , "Unsupported samplesperpixel = %d for CIELAB" , t2p -> tiff_samplesperpixel )
CALLEE	1653:16	1653:16	12	TIFFError
LEAF_NODE	1653:16	1653:16	13	TIFFError
LEAF_NODE	1653:25	1653:25	12	(
ARGUMENT	1654:20	1654:20	12	TIFF2PDF_MODULE
FIELD	1654:20	1654:20	13	TIFF2PDF_MODULE
LEAF_NODE	1654:20	1654:20	14	TIFF2PDF_MODULE
LEAF_NODE	1654:35	1654:35	12	,
ARGUMENT	1655:20	1655:20	12	"Unsupported samplesperpixel = %d for CIELAB"
FIELD	1655:20	1655:20	13	"Unsupported samplesperpixel = %d for CIELAB"
LEAF_NODE	1655:20	1655:20	14	"Unsupported samplesperpixel = %d for CIELAB"
LEAF_NODE	1655:65	1655:65	12	,
ARGUMENT	1656:20	1656:20	12	t2p -> tiff_samplesperpixel
FIELD	1656:20	1656:25	13	t2p -> tiff_samplesperpixel
LEAF_NODE	1656:20	1656:20	14	t2p
LEAF_NODE	1656:23	1656:23	14	->
LEAF_NODE	1656:25	1656:25	14	tiff_samplesperpixel
LEAF_NODE	1656:45	1656:45	12	)
LEAF_NODE	1656:46	1656:46	10	;
EXPR_STATEMENT	1657:16	1657:46	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1657:16	1657:16	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1657:16	1657:33	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1657:16	1657:16	12	t2p -> t2p_error
FIELD	1657:16	1657:21	13	t2p -> t2p_error
LEAF_NODE	1657:16	1657:16	14	t2p
LEAF_NODE	1657:19	1657:19	14	->
LEAF_NODE	1657:21	1657:21	14	t2p_error
ASSIGN_OP	1657:31	1657:31	12	=
LEAF_NODE	1657:31	1657:31	13	=
RVAL	1657:33	1657:33	12	T2P_ERR_ERROR
FIELD	1657:33	1657:33	13	T2P_ERR_ERROR
LEAF_NODE	1657:33	1657:33	14	T2P_ERR_ERROR
LEAF_NODE	1657:46	1657:46	10	;
JUMP_STATEMENT	1658:16	1658:22	9	return DESTINATION ;
KEYWORD	1658:16	1658:16	10	return
LEAF_NODE	1658:16	1658:16	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1658:22	1658:22	10	;
LEAF_NODE	1659:12	1659:12	8	}
SELECTION	1660:12	1660:45	6	
KEYWORD	1660:12	1660:12	7	if
LEAF_NODE	1660:12	1660:12	8	if
LEAF_NODE	1660:14	1660:14	7	(
CONDITION	1660:16	1660:16	7	t2p -> tiff_bitspersample != 8
EXPR	1660:16	1660:43	8	t2p -> tiff_bitspersample != 8
FIELD	1660:16	1660:21	9	t2p -> tiff_bitspersample
LEAF_NODE	1660:16	1660:16	10	t2p
LEAF_NODE	1660:19	1660:19	10	->
LEAF_NODE	1660:21	1660:21	10	tiff_bitspersample
EQ_OPERATOR	1660:40	1660:40	9	!=
LEAF_NODE	1660:40	1660:40	10	!=
FIELD	1660:43	1660:43	9	8
LEAF_NODE	1660:43	1660:43	10	8
LEAF_NODE	1660:44	1660:44	7	)
STATEMENTS	1660:45	1667:12	7	
LEAF_NODE	1660:45	1660:45	8	{
STATEMENTS	1661:16	1666:16	8	
EXPR_STATEMENT	1661:16	1664:44	9	TIFFError ( TIFF2PDF_MODULE , "Invalid bitspersample = %d for CIELAB" , t2p -> tiff_bitspersample ) ;
EXPR	1661:16	1661:16	10	TIFFError ( TIFF2PDF_MODULE , "Invalid bitspersample = %d for CIELAB" , t2p -> tiff_bitspersample )
FUNCTION_CALL	1661:16	1664:43	11	TIFFError ( TIFF2PDF_MODULE , "Invalid bitspersample = %d for CIELAB" , t2p -> tiff_bitspersample )
CALLEE	1661:16	1661:16	12	TIFFError
LEAF_NODE	1661:16	1661:16	13	TIFFError
LEAF_NODE	1661:25	1661:25	12	(
ARGUMENT	1662:20	1662:20	12	TIFF2PDF_MODULE
FIELD	1662:20	1662:20	13	TIFF2PDF_MODULE
LEAF_NODE	1662:20	1662:20	14	TIFF2PDF_MODULE
LEAF_NODE	1662:35	1662:35	12	,
ARGUMENT	1663:20	1663:20	12	"Invalid bitspersample = %d for CIELAB"
FIELD	1663:20	1663:20	13	"Invalid bitspersample = %d for CIELAB"
LEAF_NODE	1663:20	1663:20	14	"Invalid bitspersample = %d for CIELAB"
LEAF_NODE	1663:59	1663:59	12	,
ARGUMENT	1664:20	1664:20	12	t2p -> tiff_bitspersample
FIELD	1664:20	1664:25	13	t2p -> tiff_bitspersample
LEAF_NODE	1664:20	1664:20	14	t2p
LEAF_NODE	1664:23	1664:23	14	->
LEAF_NODE	1664:25	1664:25	14	tiff_bitspersample
LEAF_NODE	1664:43	1664:43	12	)
LEAF_NODE	1664:44	1664:44	10	;
EXPR_STATEMENT	1665:16	1665:46	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1665:16	1665:16	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1665:16	1665:33	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1665:16	1665:16	12	t2p -> t2p_error
FIELD	1665:16	1665:21	13	t2p -> t2p_error
LEAF_NODE	1665:16	1665:16	14	t2p
LEAF_NODE	1665:19	1665:19	14	->
LEAF_NODE	1665:21	1665:21	14	t2p_error
ASSIGN_OP	1665:31	1665:31	12	=
LEAF_NODE	1665:31	1665:31	13	=
RVAL	1665:33	1665:33	12	T2P_ERR_ERROR
FIELD	1665:33	1665:33	13	T2P_ERR_ERROR
LEAF_NODE	1665:33	1665:33	14	T2P_ERR_ERROR
LEAF_NODE	1665:46	1665:46	10	;
JUMP_STATEMENT	1666:16	1666:22	9	return DESTINATION ;
KEYWORD	1666:16	1666:16	10	return
LEAF_NODE	1666:16	1666:16	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1666:22	1666:22	10	;
LEAF_NODE	1667:12	1667:12	8	}
EXPR_STATEMENT	1668:3	1668:29	6	t2p -> pdf_labrange [ 0 ] = - 127 ;
EXPR	1668:3	1668:3	7	t2p -> pdf_labrange [ 0 ] = - 127
ASSIGN	1668:3	1668:25	8	t2p -> pdf_labrange [ 0 ] = - 127
LVAL	1668:3	1668:3	9	t2p -> pdf_labrange [ 0 ]
FIELD	1668:3	1668:22	10	t2p -> pdf_labrange [ 0 ]
LEAF_NODE	1668:3	1668:3	11	t2p
LEAF_NODE	1668:6	1668:6	11	->
LEAF_NODE	1668:8	1668:8	11	pdf_labrange
LEAF_NODE	1668:20	1668:20	11	[
EXPR	1668:21	1668:21	11	0
FIELD	1668:21	1668:21	12	0
LEAF_NODE	1668:21	1668:21	13	0
LEAF_NODE	1668:22	1668:22	11	]
ASSIGN_OP	1668:23	1668:23	9	=
LEAF_NODE	1668:23	1668:23	10	=
RVAL	1668:25	1668:25	9	- 127
UNARY_EXPR	1668:25	1668:26	10	- 127
UNARY_OPERATOR	1668:25	1668:25	11	-
LEAF_NODE	1668:25	1668:25	12	-
FIELD	1668:26	1668:26	11	127
LEAF_NODE	1668:26	1668:26	12	127
LEAF_NODE	1668:29	1668:29	7	;
EXPR_STATEMENT	1669:3	1669:28	6	t2p -> pdf_labrange [ 1 ] = 127 ;
EXPR	1669:3	1669:3	7	t2p -> pdf_labrange [ 1 ] = 127
ASSIGN	1669:3	1669:25	8	t2p -> pdf_labrange [ 1 ] = 127
LVAL	1669:3	1669:3	9	t2p -> pdf_labrange [ 1 ]
FIELD	1669:3	1669:22	10	t2p -> pdf_labrange [ 1 ]
LEAF_NODE	1669:3	1669:3	11	t2p
LEAF_NODE	1669:6	1669:6	11	->
LEAF_NODE	1669:8	1669:8	11	pdf_labrange
LEAF_NODE	1669:20	1669:20	11	[
EXPR	1669:21	1669:21	11	1
FIELD	1669:21	1669:21	12	1
LEAF_NODE	1669:21	1669:21	13	1
LEAF_NODE	1669:22	1669:22	11	]
ASSIGN_OP	1669:23	1669:23	9	=
LEAF_NODE	1669:23	1669:23	10	=
RVAL	1669:25	1669:25	9	127
FIELD	1669:25	1669:25	10	127
LEAF_NODE	1669:25	1669:25	11	127
LEAF_NODE	1669:28	1669:28	7	;
EXPR_STATEMENT	1670:3	1670:29	6	t2p -> pdf_labrange [ 2 ] = - 127 ;
EXPR	1670:3	1670:3	7	t2p -> pdf_labrange [ 2 ] = - 127
ASSIGN	1670:3	1670:25	8	t2p -> pdf_labrange [ 2 ] = - 127
LVAL	1670:3	1670:3	9	t2p -> pdf_labrange [ 2 ]
FIELD	1670:3	1670:22	10	t2p -> pdf_labrange [ 2 ]
LEAF_NODE	1670:3	1670:3	11	t2p
LEAF_NODE	1670:6	1670:6	11	->
LEAF_NODE	1670:8	1670:8	11	pdf_labrange
LEAF_NODE	1670:20	1670:20	11	[
EXPR	1670:21	1670:21	11	2
FIELD	1670:21	1670:21	12	2
LEAF_NODE	1670:21	1670:21	13	2
LEAF_NODE	1670:22	1670:22	11	]
ASSIGN_OP	1670:23	1670:23	9	=
LEAF_NODE	1670:23	1670:23	10	=
RVAL	1670:25	1670:25	9	- 127
UNARY_EXPR	1670:25	1670:26	10	- 127
UNARY_OPERATOR	1670:25	1670:25	11	-
LEAF_NODE	1670:25	1670:25	12	-
FIELD	1670:26	1670:26	11	127
LEAF_NODE	1670:26	1670:26	12	127
LEAF_NODE	1670:29	1670:29	7	;
EXPR_STATEMENT	1671:3	1671:28	6	t2p -> pdf_labrange [ 3 ] = 127 ;
EXPR	1671:3	1671:3	7	t2p -> pdf_labrange [ 3 ] = 127
ASSIGN	1671:3	1671:25	8	t2p -> pdf_labrange [ 3 ] = 127
LVAL	1671:3	1671:3	9	t2p -> pdf_labrange [ 3 ]
FIELD	1671:3	1671:22	10	t2p -> pdf_labrange [ 3 ]
LEAF_NODE	1671:3	1671:3	11	t2p
LEAF_NODE	1671:6	1671:6	11	->
LEAF_NODE	1671:8	1671:8	11	pdf_labrange
LEAF_NODE	1671:20	1671:20	11	[
EXPR	1671:21	1671:21	11	3
FIELD	1671:21	1671:21	12	3
LEAF_NODE	1671:21	1671:21	13	3
LEAF_NODE	1671:22	1671:22	11	]
ASSIGN_OP	1671:23	1671:23	9	=
LEAF_NODE	1671:23	1671:23	10	=
RVAL	1671:25	1671:25	9	127
FIELD	1671:25	1671:25	10	127
LEAF_NODE	1671:25	1671:25	11	127
LEAF_NODE	1671:28	1671:28	7	;
EXPR_STATEMENT	1672:3	1672:52	6	t2p -> pdf_sample = T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED ;
EXPR	1672:3	1672:3	7	t2p -> pdf_sample = T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
ASSIGN	1672:3	1672:19	8	t2p -> pdf_sample = T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LVAL	1672:3	1672:3	9	t2p -> pdf_sample
FIELD	1672:3	1672:8	10	t2p -> pdf_sample
LEAF_NODE	1672:3	1672:3	11	t2p
LEAF_NODE	1672:6	1672:6	11	->
LEAF_NODE	1672:8	1672:8	11	pdf_sample
ASSIGN_OP	1672:18	1672:18	9	=
LEAF_NODE	1672:18	1672:18	10	=
RVAL	1672:19	1672:19	9	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
FIELD	1672:19	1672:19	10	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LEAF_NODE	1672:19	1672:19	11	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LEAF_NODE	1672:52	1672:52	7	;
EXPR_STATEMENT	1673:3	1673:33	6	t2p -> pdf_colorspace = T2P_CS_LAB ;
EXPR	1673:3	1673:3	7	t2p -> pdf_colorspace = T2P_CS_LAB
ASSIGN	1673:3	1673:23	8	t2p -> pdf_colorspace = T2P_CS_LAB
LVAL	1673:3	1673:3	9	t2p -> pdf_colorspace
FIELD	1673:3	1673:8	10	t2p -> pdf_colorspace
LEAF_NODE	1673:3	1673:3	11	t2p
LEAF_NODE	1673:6	1673:6	11	->
LEAF_NODE	1673:8	1673:8	11	pdf_colorspace
ASSIGN_OP	1673:22	1673:22	9	=
LEAF_NODE	1673:22	1673:22	10	=
RVAL	1673:23	1673:23	9	T2P_CS_LAB
FIELD	1673:23	1673:23	10	T2P_CS_LAB
LEAF_NODE	1673:23	1673:23	11	T2P_CS_LAB
LEAF_NODE	1673:33	1673:33	7	;
JUMP_STATEMENT	1674:3	1674:8	6	break DESTINATION ;
KEYWORD	1674:3	1674:3	7	break
LEAF_NODE	1674:3	1674:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1674:8	1674:8	7	;
LABEL	1675:2	1675:25	6	case PHOTOMETRIC_ICCLAB :
LEAF_NODE	1675:2	1675:2	7	case
LEAF_NODE	1675:7	1675:7	7	PHOTOMETRIC_ICCLAB
LEAF_NODE	1675:25	1675:25	7	:
EXPR_STATEMENT	1676:3	1676:26	6	t2p -> pdf_labrange [ 0 ] = 0 ;
EXPR	1676:3	1676:3	7	t2p -> pdf_labrange [ 0 ] = 0
ASSIGN	1676:3	1676:25	8	t2p -> pdf_labrange [ 0 ] = 0
LVAL	1676:3	1676:3	9	t2p -> pdf_labrange [ 0 ]
FIELD	1676:3	1676:22	10	t2p -> pdf_labrange [ 0 ]
LEAF_NODE	1676:3	1676:3	11	t2p
LEAF_NODE	1676:6	1676:6	11	->
LEAF_NODE	1676:8	1676:8	11	pdf_labrange
LEAF_NODE	1676:20	1676:20	11	[
EXPR	1676:21	1676:21	11	0
FIELD	1676:21	1676:21	12	0
LEAF_NODE	1676:21	1676:21	13	0
LEAF_NODE	1676:22	1676:22	11	]
ASSIGN_OP	1676:23	1676:23	9	=
LEAF_NODE	1676:23	1676:23	10	=
RVAL	1676:25	1676:25	9	0
FIELD	1676:25	1676:25	10	0
LEAF_NODE	1676:25	1676:25	11	0
LEAF_NODE	1676:26	1676:26	7	;
EXPR_STATEMENT	1677:3	1677:28	6	t2p -> pdf_labrange [ 1 ] = 255 ;
EXPR	1677:3	1677:3	7	t2p -> pdf_labrange [ 1 ] = 255
ASSIGN	1677:3	1677:25	8	t2p -> pdf_labrange [ 1 ] = 255
LVAL	1677:3	1677:3	9	t2p -> pdf_labrange [ 1 ]
FIELD	1677:3	1677:22	10	t2p -> pdf_labrange [ 1 ]
LEAF_NODE	1677:3	1677:3	11	t2p
LEAF_NODE	1677:6	1677:6	11	->
LEAF_NODE	1677:8	1677:8	11	pdf_labrange
LEAF_NODE	1677:20	1677:20	11	[
EXPR	1677:21	1677:21	11	1
FIELD	1677:21	1677:21	12	1
LEAF_NODE	1677:21	1677:21	13	1
LEAF_NODE	1677:22	1677:22	11	]
ASSIGN_OP	1677:23	1677:23	9	=
LEAF_NODE	1677:23	1677:23	10	=
RVAL	1677:25	1677:25	9	255
FIELD	1677:25	1677:25	10	255
LEAF_NODE	1677:25	1677:25	11	255
LEAF_NODE	1677:28	1677:28	7	;
EXPR_STATEMENT	1678:3	1678:26	6	t2p -> pdf_labrange [ 2 ] = 0 ;
EXPR	1678:3	1678:3	7	t2p -> pdf_labrange [ 2 ] = 0
ASSIGN	1678:3	1678:25	8	t2p -> pdf_labrange [ 2 ] = 0
LVAL	1678:3	1678:3	9	t2p -> pdf_labrange [ 2 ]
FIELD	1678:3	1678:22	10	t2p -> pdf_labrange [ 2 ]
LEAF_NODE	1678:3	1678:3	11	t2p
LEAF_NODE	1678:6	1678:6	11	->
LEAF_NODE	1678:8	1678:8	11	pdf_labrange
LEAF_NODE	1678:20	1678:20	11	[
EXPR	1678:21	1678:21	11	2
FIELD	1678:21	1678:21	12	2
LEAF_NODE	1678:21	1678:21	13	2
LEAF_NODE	1678:22	1678:22	11	]
ASSIGN_OP	1678:23	1678:23	9	=
LEAF_NODE	1678:23	1678:23	10	=
RVAL	1678:25	1678:25	9	0
FIELD	1678:25	1678:25	10	0
LEAF_NODE	1678:25	1678:25	11	0
LEAF_NODE	1678:26	1678:26	7	;
EXPR_STATEMENT	1679:3	1679:28	6	t2p -> pdf_labrange [ 3 ] = 255 ;
EXPR	1679:3	1679:3	7	t2p -> pdf_labrange [ 3 ] = 255
ASSIGN	1679:3	1679:25	8	t2p -> pdf_labrange [ 3 ] = 255
LVAL	1679:3	1679:3	9	t2p -> pdf_labrange [ 3 ]
FIELD	1679:3	1679:22	10	t2p -> pdf_labrange [ 3 ]
LEAF_NODE	1679:3	1679:3	11	t2p
LEAF_NODE	1679:6	1679:6	11	->
LEAF_NODE	1679:8	1679:8	11	pdf_labrange
LEAF_NODE	1679:20	1679:20	11	[
EXPR	1679:21	1679:21	11	3
FIELD	1679:21	1679:21	12	3
LEAF_NODE	1679:21	1679:21	13	3
LEAF_NODE	1679:22	1679:22	11	]
ASSIGN_OP	1679:23	1679:23	9	=
LEAF_NODE	1679:23	1679:23	10	=
RVAL	1679:25	1679:25	9	255
FIELD	1679:25	1679:25	10	255
LEAF_NODE	1679:25	1679:25	11	255
LEAF_NODE	1679:28	1679:28	7	;
EXPR_STATEMENT	1680:3	1680:33	6	t2p -> pdf_colorspace = T2P_CS_LAB ;
EXPR	1680:3	1680:3	7	t2p -> pdf_colorspace = T2P_CS_LAB
ASSIGN	1680:3	1680:23	8	t2p -> pdf_colorspace = T2P_CS_LAB
LVAL	1680:3	1680:3	9	t2p -> pdf_colorspace
FIELD	1680:3	1680:8	10	t2p -> pdf_colorspace
LEAF_NODE	1680:3	1680:3	11	t2p
LEAF_NODE	1680:6	1680:6	11	->
LEAF_NODE	1680:8	1680:8	11	pdf_colorspace
ASSIGN_OP	1680:22	1680:22	9	=
LEAF_NODE	1680:22	1680:22	10	=
RVAL	1680:23	1680:23	9	T2P_CS_LAB
FIELD	1680:23	1680:23	10	T2P_CS_LAB
LEAF_NODE	1680:23	1680:23	11	T2P_CS_LAB
LEAF_NODE	1680:33	1680:33	7	;
JUMP_STATEMENT	1681:3	1681:8	6	break DESTINATION ;
KEYWORD	1681:3	1681:3	7	break
LEAF_NODE	1681:3	1681:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1681:8	1681:8	7	;
LABEL	1682:2	1682:25	6	case PHOTOMETRIC_ITULAB :
LEAF_NODE	1682:2	1682:2	7	case
LEAF_NODE	1682:7	1682:7	7	PHOTOMETRIC_ITULAB
LEAF_NODE	1682:25	1682:25	7	:
SELECTION	1683:12	1683:47	6	
KEYWORD	1683:12	1683:12	7	if
LEAF_NODE	1683:12	1683:12	8	if
LEAF_NODE	1683:14	1683:14	7	(
CONDITION	1683:16	1683:16	7	t2p -> tiff_samplesperpixel != 3
EXPR	1683:16	1683:45	8	t2p -> tiff_samplesperpixel != 3
FIELD	1683:16	1683:21	9	t2p -> tiff_samplesperpixel
LEAF_NODE	1683:16	1683:16	10	t2p
LEAF_NODE	1683:19	1683:19	10	->
LEAF_NODE	1683:21	1683:21	10	tiff_samplesperpixel
EQ_OPERATOR	1683:42	1683:42	9	!=
LEAF_NODE	1683:42	1683:42	10	!=
FIELD	1683:45	1683:45	9	3
LEAF_NODE	1683:45	1683:45	10	3
LEAF_NODE	1683:46	1683:46	7	)
STATEMENTS	1683:47	1690:12	7	
LEAF_NODE	1683:47	1683:47	8	{
STATEMENTS	1684:16	1689:16	8	
EXPR_STATEMENT	1684:16	1687:46	9	TIFFError ( TIFF2PDF_MODULE , "Unsupported samplesperpixel = %d for ITULAB" , t2p -> tiff_samplesperpixel ) ;
EXPR	1684:16	1684:16	10	TIFFError ( TIFF2PDF_MODULE , "Unsupported samplesperpixel = %d for ITULAB" , t2p -> tiff_samplesperpixel )
FUNCTION_CALL	1684:16	1687:45	11	TIFFError ( TIFF2PDF_MODULE , "Unsupported samplesperpixel = %d for ITULAB" , t2p -> tiff_samplesperpixel )
CALLEE	1684:16	1684:16	12	TIFFError
LEAF_NODE	1684:16	1684:16	13	TIFFError
LEAF_NODE	1684:25	1684:25	12	(
ARGUMENT	1685:20	1685:20	12	TIFF2PDF_MODULE
FIELD	1685:20	1685:20	13	TIFF2PDF_MODULE
LEAF_NODE	1685:20	1685:20	14	TIFF2PDF_MODULE
LEAF_NODE	1685:35	1685:35	12	,
ARGUMENT	1686:20	1686:20	12	"Unsupported samplesperpixel = %d for ITULAB"
FIELD	1686:20	1686:20	13	"Unsupported samplesperpixel = %d for ITULAB"
LEAF_NODE	1686:20	1686:20	14	"Unsupported samplesperpixel = %d for ITULAB"
LEAF_NODE	1686:65	1686:65	12	,
ARGUMENT	1687:20	1687:20	12	t2p -> tiff_samplesperpixel
FIELD	1687:20	1687:25	13	t2p -> tiff_samplesperpixel
LEAF_NODE	1687:20	1687:20	14	t2p
LEAF_NODE	1687:23	1687:23	14	->
LEAF_NODE	1687:25	1687:25	14	tiff_samplesperpixel
LEAF_NODE	1687:45	1687:45	12	)
LEAF_NODE	1687:46	1687:46	10	;
EXPR_STATEMENT	1688:16	1688:46	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1688:16	1688:16	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1688:16	1688:33	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1688:16	1688:16	12	t2p -> t2p_error
FIELD	1688:16	1688:21	13	t2p -> t2p_error
LEAF_NODE	1688:16	1688:16	14	t2p
LEAF_NODE	1688:19	1688:19	14	->
LEAF_NODE	1688:21	1688:21	14	t2p_error
ASSIGN_OP	1688:31	1688:31	12	=
LEAF_NODE	1688:31	1688:31	13	=
RVAL	1688:33	1688:33	12	T2P_ERR_ERROR
FIELD	1688:33	1688:33	13	T2P_ERR_ERROR
LEAF_NODE	1688:33	1688:33	14	T2P_ERR_ERROR
LEAF_NODE	1688:46	1688:46	10	;
JUMP_STATEMENT	1689:16	1689:22	9	return DESTINATION ;
KEYWORD	1689:16	1689:16	10	return
LEAF_NODE	1689:16	1689:16	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1689:22	1689:22	10	;
LEAF_NODE	1690:12	1690:12	8	}
SELECTION	1691:12	1691:45	6	
KEYWORD	1691:12	1691:12	7	if
LEAF_NODE	1691:12	1691:12	8	if
LEAF_NODE	1691:14	1691:14	7	(
CONDITION	1691:16	1691:16	7	t2p -> tiff_bitspersample != 8
EXPR	1691:16	1691:43	8	t2p -> tiff_bitspersample != 8
FIELD	1691:16	1691:21	9	t2p -> tiff_bitspersample
LEAF_NODE	1691:16	1691:16	10	t2p
LEAF_NODE	1691:19	1691:19	10	->
LEAF_NODE	1691:21	1691:21	10	tiff_bitspersample
EQ_OPERATOR	1691:40	1691:40	9	!=
LEAF_NODE	1691:40	1691:40	10	!=
FIELD	1691:43	1691:43	9	8
LEAF_NODE	1691:43	1691:43	10	8
LEAF_NODE	1691:44	1691:44	7	)
STATEMENTS	1691:45	1698:12	7	
LEAF_NODE	1691:45	1691:45	8	{
STATEMENTS	1692:16	1697:16	8	
EXPR_STATEMENT	1692:16	1695:44	9	TIFFError ( TIFF2PDF_MODULE , "Invalid bitspersample = %d for ITULAB" , t2p -> tiff_bitspersample ) ;
EXPR	1692:16	1692:16	10	TIFFError ( TIFF2PDF_MODULE , "Invalid bitspersample = %d for ITULAB" , t2p -> tiff_bitspersample )
FUNCTION_CALL	1692:16	1695:43	11	TIFFError ( TIFF2PDF_MODULE , "Invalid bitspersample = %d for ITULAB" , t2p -> tiff_bitspersample )
CALLEE	1692:16	1692:16	12	TIFFError
LEAF_NODE	1692:16	1692:16	13	TIFFError
LEAF_NODE	1692:25	1692:25	12	(
ARGUMENT	1693:20	1693:20	12	TIFF2PDF_MODULE
FIELD	1693:20	1693:20	13	TIFF2PDF_MODULE
LEAF_NODE	1693:20	1693:20	14	TIFF2PDF_MODULE
LEAF_NODE	1693:35	1693:35	12	,
ARGUMENT	1694:20	1694:20	12	"Invalid bitspersample = %d for ITULAB"
FIELD	1694:20	1694:20	13	"Invalid bitspersample = %d for ITULAB"
LEAF_NODE	1694:20	1694:20	14	"Invalid bitspersample = %d for ITULAB"
LEAF_NODE	1694:59	1694:59	12	,
ARGUMENT	1695:20	1695:20	12	t2p -> tiff_bitspersample
FIELD	1695:20	1695:25	13	t2p -> tiff_bitspersample
LEAF_NODE	1695:20	1695:20	14	t2p
LEAF_NODE	1695:23	1695:23	14	->
LEAF_NODE	1695:25	1695:25	14	tiff_bitspersample
LEAF_NODE	1695:43	1695:43	12	)
LEAF_NODE	1695:44	1695:44	10	;
EXPR_STATEMENT	1696:16	1696:46	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1696:16	1696:16	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1696:16	1696:33	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1696:16	1696:16	12	t2p -> t2p_error
FIELD	1696:16	1696:21	13	t2p -> t2p_error
LEAF_NODE	1696:16	1696:16	14	t2p
LEAF_NODE	1696:19	1696:19	14	->
LEAF_NODE	1696:21	1696:21	14	t2p_error
ASSIGN_OP	1696:31	1696:31	12	=
LEAF_NODE	1696:31	1696:31	13	=
RVAL	1696:33	1696:33	12	T2P_ERR_ERROR
FIELD	1696:33	1696:33	13	T2P_ERR_ERROR
LEAF_NODE	1696:33	1696:33	14	T2P_ERR_ERROR
LEAF_NODE	1696:46	1696:46	10	;
JUMP_STATEMENT	1697:16	1697:22	9	return DESTINATION ;
KEYWORD	1697:16	1697:16	10	return
LEAF_NODE	1697:16	1697:16	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1697:22	1697:22	10	;
LEAF_NODE	1698:12	1698:12	8	}
EXPR_STATEMENT	1699:3	1699:27	6	t2p -> pdf_labrange [ 0 ] = - 85 ;
EXPR	1699:3	1699:3	7	t2p -> pdf_labrange [ 0 ] = - 85
ASSIGN	1699:3	1699:24	8	t2p -> pdf_labrange [ 0 ] = - 85
LVAL	1699:3	1699:3	9	t2p -> pdf_labrange [ 0 ]
FIELD	1699:3	1699:22	10	t2p -> pdf_labrange [ 0 ]
LEAF_NODE	1699:3	1699:3	11	t2p
LEAF_NODE	1699:6	1699:6	11	->
LEAF_NODE	1699:8	1699:8	11	pdf_labrange
LEAF_NODE	1699:20	1699:20	11	[
EXPR	1699:21	1699:21	11	0
FIELD	1699:21	1699:21	12	0
LEAF_NODE	1699:21	1699:21	13	0
LEAF_NODE	1699:22	1699:22	11	]
ASSIGN_OP	1699:23	1699:23	9	=
LEAF_NODE	1699:23	1699:23	10	=
RVAL	1699:24	1699:24	9	- 85
UNARY_EXPR	1699:24	1699:25	10	- 85
UNARY_OPERATOR	1699:24	1699:24	11	-
LEAF_NODE	1699:24	1699:24	12	-
FIELD	1699:25	1699:25	11	85
LEAF_NODE	1699:25	1699:25	12	85
LEAF_NODE	1699:27	1699:27	7	;
EXPR_STATEMENT	1700:3	1700:26	6	t2p -> pdf_labrange [ 1 ] = 85 ;
EXPR	1700:3	1700:3	7	t2p -> pdf_labrange [ 1 ] = 85
ASSIGN	1700:3	1700:24	8	t2p -> pdf_labrange [ 1 ] = 85
LVAL	1700:3	1700:3	9	t2p -> pdf_labrange [ 1 ]
FIELD	1700:3	1700:22	10	t2p -> pdf_labrange [ 1 ]
LEAF_NODE	1700:3	1700:3	11	t2p
LEAF_NODE	1700:6	1700:6	11	->
LEAF_NODE	1700:8	1700:8	11	pdf_labrange
LEAF_NODE	1700:20	1700:20	11	[
EXPR	1700:21	1700:21	11	1
FIELD	1700:21	1700:21	12	1
LEAF_NODE	1700:21	1700:21	13	1
LEAF_NODE	1700:22	1700:22	11	]
ASSIGN_OP	1700:23	1700:23	9	=
LEAF_NODE	1700:23	1700:23	10	=
RVAL	1700:24	1700:24	9	85
FIELD	1700:24	1700:24	10	85
LEAF_NODE	1700:24	1700:24	11	85
LEAF_NODE	1700:26	1700:26	7	;
EXPR_STATEMENT	1701:3	1701:27	6	t2p -> pdf_labrange [ 2 ] = - 75 ;
EXPR	1701:3	1701:3	7	t2p -> pdf_labrange [ 2 ] = - 75
ASSIGN	1701:3	1701:24	8	t2p -> pdf_labrange [ 2 ] = - 75
LVAL	1701:3	1701:3	9	t2p -> pdf_labrange [ 2 ]
FIELD	1701:3	1701:22	10	t2p -> pdf_labrange [ 2 ]
LEAF_NODE	1701:3	1701:3	11	t2p
LEAF_NODE	1701:6	1701:6	11	->
LEAF_NODE	1701:8	1701:8	11	pdf_labrange
LEAF_NODE	1701:20	1701:20	11	[
EXPR	1701:21	1701:21	11	2
FIELD	1701:21	1701:21	12	2
LEAF_NODE	1701:21	1701:21	13	2
LEAF_NODE	1701:22	1701:22	11	]
ASSIGN_OP	1701:23	1701:23	9	=
LEAF_NODE	1701:23	1701:23	10	=
RVAL	1701:24	1701:24	9	- 75
UNARY_EXPR	1701:24	1701:25	10	- 75
UNARY_OPERATOR	1701:24	1701:24	11	-
LEAF_NODE	1701:24	1701:24	12	-
FIELD	1701:25	1701:25	11	75
LEAF_NODE	1701:25	1701:25	12	75
LEAF_NODE	1701:27	1701:27	7	;
EXPR_STATEMENT	1702:3	1702:27	6	t2p -> pdf_labrange [ 3 ] = 124 ;
EXPR	1702:3	1702:3	7	t2p -> pdf_labrange [ 3 ] = 124
ASSIGN	1702:3	1702:24	8	t2p -> pdf_labrange [ 3 ] = 124
LVAL	1702:3	1702:3	9	t2p -> pdf_labrange [ 3 ]
FIELD	1702:3	1702:22	10	t2p -> pdf_labrange [ 3 ]
LEAF_NODE	1702:3	1702:3	11	t2p
LEAF_NODE	1702:6	1702:6	11	->
LEAF_NODE	1702:8	1702:8	11	pdf_labrange
LEAF_NODE	1702:20	1702:20	11	[
EXPR	1702:21	1702:21	11	3
FIELD	1702:21	1702:21	12	3
LEAF_NODE	1702:21	1702:21	13	3
LEAF_NODE	1702:22	1702:22	11	]
ASSIGN_OP	1702:23	1702:23	9	=
LEAF_NODE	1702:23	1702:23	10	=
RVAL	1702:24	1702:24	9	124
FIELD	1702:24	1702:24	10	124
LEAF_NODE	1702:24	1702:24	11	124
LEAF_NODE	1702:27	1702:27	7	;
EXPR_STATEMENT	1703:3	1703:52	6	t2p -> pdf_sample = T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED ;
EXPR	1703:3	1703:3	7	t2p -> pdf_sample = T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
ASSIGN	1703:3	1703:19	8	t2p -> pdf_sample = T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LVAL	1703:3	1703:3	9	t2p -> pdf_sample
FIELD	1703:3	1703:8	10	t2p -> pdf_sample
LEAF_NODE	1703:3	1703:3	11	t2p
LEAF_NODE	1703:6	1703:6	11	->
LEAF_NODE	1703:8	1703:8	11	pdf_sample
ASSIGN_OP	1703:18	1703:18	9	=
LEAF_NODE	1703:18	1703:18	10	=
RVAL	1703:19	1703:19	9	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
FIELD	1703:19	1703:19	10	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LEAF_NODE	1703:19	1703:19	11	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LEAF_NODE	1703:52	1703:52	7	;
EXPR_STATEMENT	1704:3	1704:33	6	t2p -> pdf_colorspace = T2P_CS_LAB ;
EXPR	1704:3	1704:3	7	t2p -> pdf_colorspace = T2P_CS_LAB
ASSIGN	1704:3	1704:23	8	t2p -> pdf_colorspace = T2P_CS_LAB
LVAL	1704:3	1704:3	9	t2p -> pdf_colorspace
FIELD	1704:3	1704:8	10	t2p -> pdf_colorspace
LEAF_NODE	1704:3	1704:3	11	t2p
LEAF_NODE	1704:6	1704:6	11	->
LEAF_NODE	1704:8	1704:8	11	pdf_colorspace
ASSIGN_OP	1704:22	1704:22	9	=
LEAF_NODE	1704:22	1704:22	10	=
RVAL	1704:23	1704:23	9	T2P_CS_LAB
FIELD	1704:23	1704:23	10	T2P_CS_LAB
LEAF_NODE	1704:23	1704:23	11	T2P_CS_LAB
LEAF_NODE	1704:33	1704:33	7	;
JUMP_STATEMENT	1705:3	1705:8	6	break DESTINATION ;
KEYWORD	1705:3	1705:3	7	break
LEAF_NODE	1705:3	1705:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1705:8	1705:8	7	;
LABEL	1706:2	1706:23	6	case PHOTOMETRIC_LOGL :
LEAF_NODE	1706:2	1706:2	7	case
LEAF_NODE	1706:7	1706:7	7	PHOTOMETRIC_LOGL
LEAF_NODE	1706:23	1706:23	7	:
LABEL	1707:2	1707:25	6	case PHOTOMETRIC_LOGLUV :
LEAF_NODE	1707:2	1707:2	7	case
LEAF_NODE	1707:7	1707:7	7	PHOTOMETRIC_LOGLUV
LEAF_NODE	1707:25	1707:25	7	:
EXPR_STATEMENT	1708:3	1711:24	6	TIFFError ( TIFF2PDF_MODULE , "No support for %s with photometric interpretation LogL/LogLuv" , TIFFFileName ( input ) ) ;
EXPR	1708:3	1708:3	7	TIFFError ( TIFF2PDF_MODULE , "No support for %s with photometric interpretation LogL/LogLuv" , TIFFFileName ( input ) )
FUNCTION_CALL	1708:3	1711:23	8	TIFFError ( TIFF2PDF_MODULE , "No support for %s with photometric interpretation LogL/LogLuv" , TIFFFileName ( input ) )
CALLEE	1708:3	1708:3	9	TIFFError
LEAF_NODE	1708:3	1708:3	10	TIFFError
LEAF_NODE	1708:12	1708:12	9	(
ARGUMENT	1709:4	1709:4	9	TIFF2PDF_MODULE
FIELD	1709:4	1709:4	10	TIFF2PDF_MODULE
LEAF_NODE	1709:4	1709:4	11	TIFF2PDF_MODULE
LEAF_NODE	1709:19	1709:19	9	,
ARGUMENT	1710:4	1710:4	9	"No support for %s with photometric interpretation LogL/LogLuv"
FIELD	1710:4	1710:4	10	"No support for %s with photometric interpretation LogL/LogLuv"
LEAF_NODE	1710:4	1710:4	11	"No support for %s with photometric interpretation LogL/LogLuv"
LEAF_NODE	1710:67	1710:67	9	,
ARGUMENT	1711:4	1711:4	9	TIFFFileName ( input )
FUNCTION_CALL	1711:4	1711:22	10	TIFFFileName ( input )
CALLEE	1711:4	1711:4	11	TIFFFileName
LEAF_NODE	1711:4	1711:4	12	TIFFFileName
LEAF_NODE	1711:16	1711:16	11	(
ARGUMENT	1711:17	1711:17	11	input
FIELD	1711:17	1711:17	12	input
LEAF_NODE	1711:17	1711:17	13	input
LEAF_NODE	1711:22	1711:22	11	)
LEAF_NODE	1711:23	1711:23	9	)
LEAF_NODE	1711:24	1711:24	7	;
EXPR_STATEMENT	1712:3	1712:33	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1712:3	1712:3	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1712:3	1712:20	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1712:3	1712:3	9	t2p -> t2p_error
FIELD	1712:3	1712:8	10	t2p -> t2p_error
LEAF_NODE	1712:3	1712:3	11	t2p
LEAF_NODE	1712:6	1712:6	11	->
LEAF_NODE	1712:8	1712:8	11	t2p_error
ASSIGN_OP	1712:18	1712:18	9	=
LEAF_NODE	1712:18	1712:18	10	=
RVAL	1712:20	1712:20	9	T2P_ERR_ERROR
FIELD	1712:20	1712:20	10	T2P_ERR_ERROR
LEAF_NODE	1712:20	1712:20	11	T2P_ERR_ERROR
LEAF_NODE	1712:33	1712:33	7	;
JUMP_STATEMENT	1713:3	1713:9	6	return DESTINATION ;
KEYWORD	1713:3	1713:3	7	return
LEAF_NODE	1713:3	1713:3	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1713:9	1713:9	7	;
LABEL	1714:2	1714:9	6	default :
LEAF_NODE	1714:2	1714:2	7	default
LEAF_NODE	1714:9	1714:9	7	:
EXPR_STATEMENT	1715:3	1719:26	6	TIFFError ( TIFF2PDF_MODULE , "No support for %s with photometric interpretation %u" , TIFFFileName ( input ) , t2p -> tiff_photometric ) ;
EXPR	1715:3	1715:3	7	TIFFError ( TIFF2PDF_MODULE , "No support for %s with photometric interpretation %u" , TIFFFileName ( input ) , t2p -> tiff_photometric )
FUNCTION_CALL	1715:3	1719:25	8	TIFFError ( TIFF2PDF_MODULE , "No support for %s with photometric interpretation %u" , TIFFFileName ( input ) , t2p -> tiff_photometric )
CALLEE	1715:3	1715:3	9	TIFFError
LEAF_NODE	1715:3	1715:3	10	TIFFError
LEAF_NODE	1715:12	1715:12	9	(
ARGUMENT	1716:4	1716:4	9	TIFF2PDF_MODULE
FIELD	1716:4	1716:4	10	TIFF2PDF_MODULE
LEAF_NODE	1716:4	1716:4	11	TIFF2PDF_MODULE
LEAF_NODE	1716:19	1716:19	9	,
ARGUMENT	1717:4	1717:4	9	"No support for %s with photometric interpretation %u"
FIELD	1717:4	1717:4	10	"No support for %s with photometric interpretation %u"
LEAF_NODE	1717:4	1717:4	11	"No support for %s with photometric interpretation %u"
LEAF_NODE	1717:58	1717:58	9	,
ARGUMENT	1718:4	1718:4	9	TIFFFileName ( input )
FUNCTION_CALL	1718:4	1718:22	10	TIFFFileName ( input )
CALLEE	1718:4	1718:4	11	TIFFFileName
LEAF_NODE	1718:4	1718:4	12	TIFFFileName
LEAF_NODE	1718:16	1718:16	11	(
ARGUMENT	1718:17	1718:17	11	input
FIELD	1718:17	1718:17	12	input
LEAF_NODE	1718:17	1718:17	13	input
LEAF_NODE	1718:22	1718:22	11	)
LEAF_NODE	1718:23	1718:23	9	,
ARGUMENT	1719:4	1719:4	9	t2p -> tiff_photometric
FIELD	1719:4	1719:9	10	t2p -> tiff_photometric
LEAF_NODE	1719:4	1719:4	11	t2p
LEAF_NODE	1719:7	1719:7	11	->
LEAF_NODE	1719:9	1719:9	11	tiff_photometric
LEAF_NODE	1719:25	1719:25	9	)
LEAF_NODE	1719:26	1719:26	7	;
EXPR_STATEMENT	1720:3	1720:33	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1720:3	1720:3	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1720:3	1720:20	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1720:3	1720:3	9	t2p -> t2p_error
FIELD	1720:3	1720:8	10	t2p -> t2p_error
LEAF_NODE	1720:3	1720:3	11	t2p
LEAF_NODE	1720:6	1720:6	11	->
LEAF_NODE	1720:8	1720:8	11	t2p_error
ASSIGN_OP	1720:18	1720:18	9	=
LEAF_NODE	1720:18	1720:18	10	=
RVAL	1720:20	1720:20	9	T2P_ERR_ERROR
FIELD	1720:20	1720:20	10	T2P_ERR_ERROR
LEAF_NODE	1720:20	1720:20	11	T2P_ERR_ERROR
LEAF_NODE	1720:33	1720:33	7	;
JUMP_STATEMENT	1721:3	1721:9	6	return DESTINATION ;
KEYWORD	1721:3	1721:3	7	return
LEAF_NODE	1721:3	1721:3	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1721:9	1721:9	7	;
LEAF_NODE	1722:1	1722:1	5	}
SELECTION	1724:1	1724:67	3	
KEYWORD	1724:1	1724:1	4	if
LEAF_NODE	1724:1	1724:1	5	if
LEAF_NODE	1724:3	1724:3	4	(
CONDITION	1724:4	1724:4	4	TIFFGetField ( input , TIFFTAG_PLANARCONFIG , & ( t2p -> tiff_planar ) )
EXPR	1724:4	1724:4	5	TIFFGetField ( input , TIFFTAG_PLANARCONFIG , & ( t2p -> tiff_planar ) )
FUNCTION_CALL	1724:4	1724:65	6	TIFFGetField ( input , TIFFTAG_PLANARCONFIG , & ( t2p -> tiff_planar ) )
CALLEE	1724:4	1724:4	7	TIFFGetField
LEAF_NODE	1724:4	1724:4	8	TIFFGetField
LEAF_NODE	1724:16	1724:16	7	(
ARGUMENT	1724:17	1724:17	7	input
FIELD	1724:17	1724:17	8	input
LEAF_NODE	1724:17	1724:17	9	input
LEAF_NODE	1724:22	1724:22	7	,
ARGUMENT	1724:24	1724:24	7	TIFFTAG_PLANARCONFIG
FIELD	1724:24	1724:24	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	1724:24	1724:24	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	1724:44	1724:44	7	,
ARGUMENT	1724:46	1724:46	7	& ( t2p -> tiff_planar )
UNARY_EXPR	1724:46	1724:64	8	& ( t2p -> tiff_planar )
UNARY_OPERATOR	1724:46	1724:46	9	&
LEAF_NODE	1724:46	1724:46	10	&
LEAF_NODE	1724:47	1724:47	9	(
FIELD	1724:48	1724:53	9	t2p -> tiff_planar
LEAF_NODE	1724:48	1724:48	10	t2p
LEAF_NODE	1724:51	1724:51	10	->
LEAF_NODE	1724:53	1724:53	10	tiff_planar
LEAF_NODE	1724:64	1724:64	9	)
LEAF_NODE	1724:65	1724:65	7	)
LEAF_NODE	1724:66	1724:66	4	)
STATEMENTS	1724:67	1755:1	4	
LEAF_NODE	1724:67	1724:67	5	{
STATEMENTS	1725:2	1725:2	5	
SELECTION	1725:2	1725:26	6	
KEYWORD	1725:2	1725:2	7	switch
LEAF_NODE	1725:2	1725:2	8	switch
LEAF_NODE	1725:8	1725:8	7	(
CONDITION	1725:9	1725:9	7	t2p -> tiff_planar
EXPR	1725:9	1725:9	8	t2p -> tiff_planar
FIELD	1725:9	1725:14	9	t2p -> tiff_planar
LEAF_NODE	1725:9	1725:9	10	t2p
LEAF_NODE	1725:12	1725:12	10	->
LEAF_NODE	1725:14	1725:14	10	tiff_planar
LEAF_NODE	1725:25	1725:25	7	)
STATEMENTS	1725:26	1754:2	7	
LEAF_NODE	1725:26	1725:26	8	{
STATEMENTS	1726:3	1753:4	8	
LABEL	1726:3	1726:9	9	case 0 :
LEAF_NODE	1726:3	1726:3	10	case
LEAF_NODE	1726:8	1726:8	10	0
LEAF_NODE	1726:9	1726:9	10	:
EXPR_STATEMENT	1727:4	1730:25	9	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has planar configuration 0, assuming 1" , TIFFFileName ( input ) ) ;
EXPR	1727:4	1727:4	10	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has planar configuration 0, assuming 1" , TIFFFileName ( input ) )
FUNCTION_CALL	1727:4	1730:24	11	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has planar configuration 0, assuming 1" , TIFFFileName ( input ) )
CALLEE	1727:4	1727:4	12	TIFFWarning
LEAF_NODE	1727:4	1727:4	13	TIFFWarning
LEAF_NODE	1727:15	1727:15	12	(
ARGUMENT	1728:5	1728:5	12	TIFF2PDF_MODULE
FIELD	1728:5	1728:5	13	TIFF2PDF_MODULE
LEAF_NODE	1728:5	1728:5	14	TIFF2PDF_MODULE
LEAF_NODE	1728:20	1728:20	12	,
ARGUMENT	1729:5	1729:5	12	"Image %s has planar configuration 0, assuming 1"
FIELD	1729:5	1729:5	13	"Image %s has planar configuration 0, assuming 1"
LEAF_NODE	1729:5	1729:5	14	"Image %s has planar configuration 0, assuming 1"
LEAF_NODE	1729:54	1729:54	12	,
ARGUMENT	1730:5	1730:5	12	TIFFFileName ( input )
FUNCTION_CALL	1730:5	1730:23	13	TIFFFileName ( input )
CALLEE	1730:5	1730:5	14	TIFFFileName
LEAF_NODE	1730:5	1730:5	15	TIFFFileName
LEAF_NODE	1730:17	1730:17	14	(
ARGUMENT	1730:18	1730:18	14	input
FIELD	1730:18	1730:18	15	input
LEAF_NODE	1730:18	1730:18	16	input
LEAF_NODE	1730:23	1730:23	14	)
LEAF_NODE	1730:24	1730:24	12	)
LEAF_NODE	1730:25	1730:25	10	;
EXPR_STATEMENT	1731:4	1731:40	9	t2p -> tiff_planar = PLANARCONFIG_CONTIG ;
EXPR	1731:4	1731:4	10	t2p -> tiff_planar = PLANARCONFIG_CONTIG
ASSIGN	1731:4	1731:21	11	t2p -> tiff_planar = PLANARCONFIG_CONTIG
LVAL	1731:4	1731:4	12	t2p -> tiff_planar
FIELD	1731:4	1731:9	13	t2p -> tiff_planar
LEAF_NODE	1731:4	1731:4	14	t2p
LEAF_NODE	1731:7	1731:7	14	->
LEAF_NODE	1731:9	1731:9	14	tiff_planar
ASSIGN_OP	1731:20	1731:20	12	=
LEAF_NODE	1731:20	1731:20	13	=
RVAL	1731:21	1731:21	12	PLANARCONFIG_CONTIG
FIELD	1731:21	1731:21	13	PLANARCONFIG_CONTIG
LEAF_NODE	1731:21	1731:21	14	PLANARCONFIG_CONTIG
LEAF_NODE	1731:40	1731:40	10	;
LABEL	1732:3	1732:27	9	case PLANARCONFIG_CONTIG :
LEAF_NODE	1732:3	1732:3	10	case
LEAF_NODE	1732:8	1732:8	10	PLANARCONFIG_CONTIG
LEAF_NODE	1732:27	1732:27	10	:
JUMP_STATEMENT	1733:4	1733:9	9	break DESTINATION ;
KEYWORD	1733:4	1733:4	10	break
LEAF_NODE	1733:4	1733:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1733:9	1733:9	10	;
LABEL	1734:3	1734:29	9	case PLANARCONFIG_SEPARATE :
LEAF_NODE	1734:3	1734:3	10	case
LEAF_NODE	1734:8	1734:8	10	PLANARCONFIG_SEPARATE
LEAF_NODE	1734:29	1734:29	10	:
EXPR_STATEMENT	1735:4	1735:56	9	t2p -> pdf_sample = T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG ;
EXPR	1735:4	1735:4	10	t2p -> pdf_sample = T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
ASSIGN	1735:4	1735:20	11	t2p -> pdf_sample = T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
LVAL	1735:4	1735:4	12	t2p -> pdf_sample
FIELD	1735:4	1735:9	13	t2p -> pdf_sample
LEAF_NODE	1735:4	1735:4	14	t2p
LEAF_NODE	1735:7	1735:7	14	->
LEAF_NODE	1735:9	1735:9	14	pdf_sample
ASSIGN_OP	1735:19	1735:19	12	=
LEAF_NODE	1735:19	1735:19	13	=
RVAL	1735:20	1735:20	12	T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
FIELD	1735:20	1735:20	13	T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
LEAF_NODE	1735:20	1735:20	14	T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
LEAF_NODE	1735:56	1735:56	10	;
SELECTION	1736:4	1736:34	9	
KEYWORD	1736:4	1736:4	10	if
LEAF_NODE	1736:4	1736:4	11	if
LEAF_NODE	1736:6	1736:6	10	(
CONDITION	1736:7	1736:7	10	t2p -> tiff_bitspersample != 8
EXPR	1736:7	1736:32	11	t2p -> tiff_bitspersample != 8
FIELD	1736:7	1736:12	12	t2p -> tiff_bitspersample
LEAF_NODE	1736:7	1736:7	13	t2p
LEAF_NODE	1736:10	1736:10	13	->
LEAF_NODE	1736:12	1736:12	13	tiff_bitspersample
EQ_OPERATOR	1736:30	1736:30	12	!=
LEAF_NODE	1736:30	1736:30	13	!=
FIELD	1736:32	1736:32	12	8
LEAF_NODE	1736:32	1736:32	13	8
LEAF_NODE	1736:33	1736:33	10	)
STATEMENTS	1736:34	1744:4	10	
LEAF_NODE	1736:34	1736:34	11	{
STATEMENTS	1737:5	1743:5	11	
EXPR_STATEMENT	1737:5	1741:30	12	TIFFError ( TIFF2PDF_MODULE , "No support for %s with separated planar configuration and %u bits per sample" , TIFFFileName ( input ) , t2p -> tiff_bitspersample ) ;
EXPR	1737:5	1737:5	13	TIFFError ( TIFF2PDF_MODULE , "No support for %s with separated planar configuration and %u bits per sample" , TIFFFileName ( input ) , t2p -> tiff_bitspersample )
FUNCTION_CALL	1737:5	1741:29	14	TIFFError ( TIFF2PDF_MODULE , "No support for %s with separated planar configuration and %u bits per sample" , TIFFFileName ( input ) , t2p -> tiff_bitspersample )
CALLEE	1737:5	1737:5	15	TIFFError
LEAF_NODE	1737:5	1737:5	16	TIFFError
LEAF_NODE	1737:14	1737:14	15	(
ARGUMENT	1738:6	1738:6	15	TIFF2PDF_MODULE
FIELD	1738:6	1738:6	16	TIFF2PDF_MODULE
LEAF_NODE	1738:6	1738:6	17	TIFF2PDF_MODULE
LEAF_NODE	1738:21	1738:21	15	,
ARGUMENT	1739:6	1739:6	15	"No support for %s with separated planar configuration and %u bits per sample"
FIELD	1739:6	1739:6	16	"No support for %s with separated planar configuration and %u bits per sample"
LEAF_NODE	1739:6	1739:6	17	"No support for %s with separated planar configuration and %u bits per sample"
LEAF_NODE	1739:84	1739:84	15	,
ARGUMENT	1740:6	1740:6	15	TIFFFileName ( input )
FUNCTION_CALL	1740:6	1740:24	16	TIFFFileName ( input )
CALLEE	1740:6	1740:6	17	TIFFFileName
LEAF_NODE	1740:6	1740:6	18	TIFFFileName
LEAF_NODE	1740:18	1740:18	17	(
ARGUMENT	1740:19	1740:19	17	input
FIELD	1740:19	1740:19	18	input
LEAF_NODE	1740:19	1740:19	19	input
LEAF_NODE	1740:24	1740:24	17	)
LEAF_NODE	1740:25	1740:25	15	,
ARGUMENT	1741:6	1741:6	15	t2p -> tiff_bitspersample
FIELD	1741:6	1741:11	16	t2p -> tiff_bitspersample
LEAF_NODE	1741:6	1741:6	17	t2p
LEAF_NODE	1741:9	1741:9	17	->
LEAF_NODE	1741:11	1741:11	17	tiff_bitspersample
LEAF_NODE	1741:29	1741:29	15	)
LEAF_NODE	1741:30	1741:30	13	;
EXPR_STATEMENT	1742:5	1742:35	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1742:5	1742:5	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1742:5	1742:22	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1742:5	1742:5	15	t2p -> t2p_error
FIELD	1742:5	1742:10	16	t2p -> t2p_error
LEAF_NODE	1742:5	1742:5	17	t2p
LEAF_NODE	1742:8	1742:8	17	->
LEAF_NODE	1742:10	1742:10	17	t2p_error
ASSIGN_OP	1742:20	1742:20	15	=
LEAF_NODE	1742:20	1742:20	16	=
RVAL	1742:22	1742:22	15	T2P_ERR_ERROR
FIELD	1742:22	1742:22	16	T2P_ERR_ERROR
LEAF_NODE	1742:22	1742:22	17	T2P_ERR_ERROR
LEAF_NODE	1742:35	1742:35	13	;
JUMP_STATEMENT	1743:5	1743:11	12	return DESTINATION ;
KEYWORD	1743:5	1743:5	13	return
LEAF_NODE	1743:5	1743:5	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1743:11	1743:11	13	;
LEAF_NODE	1744:4	1744:4	11	}
JUMP_STATEMENT	1745:4	1745:9	9	break DESTINATION ;
KEYWORD	1745:4	1745:4	10	break
LEAF_NODE	1745:4	1745:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1745:9	1745:9	10	;
LABEL	1746:3	1746:10	9	default :
LEAF_NODE	1746:3	1746:3	10	default
LEAF_NODE	1746:10	1746:10	10	:
EXPR_STATEMENT	1747:4	1751:22	9	TIFFError ( TIFF2PDF_MODULE , "No support for %s with planar configuration %u" , TIFFFileName ( input ) , t2p -> tiff_planar ) ;
EXPR	1747:4	1747:4	10	TIFFError ( TIFF2PDF_MODULE , "No support for %s with planar configuration %u" , TIFFFileName ( input ) , t2p -> tiff_planar )
FUNCTION_CALL	1747:4	1751:21	11	TIFFError ( TIFF2PDF_MODULE , "No support for %s with planar configuration %u" , TIFFFileName ( input ) , t2p -> tiff_planar )
CALLEE	1747:4	1747:4	12	TIFFError
LEAF_NODE	1747:4	1747:4	13	TIFFError
LEAF_NODE	1747:13	1747:13	12	(
ARGUMENT	1748:5	1748:5	12	TIFF2PDF_MODULE
FIELD	1748:5	1748:5	13	TIFF2PDF_MODULE
LEAF_NODE	1748:5	1748:5	14	TIFF2PDF_MODULE
LEAF_NODE	1748:20	1748:20	12	,
ARGUMENT	1749:5	1749:5	12	"No support for %s with planar configuration %u"
FIELD	1749:5	1749:5	13	"No support for %s with planar configuration %u"
LEAF_NODE	1749:5	1749:5	14	"No support for %s with planar configuration %u"
LEAF_NODE	1749:53	1749:53	12	,
ARGUMENT	1750:5	1750:5	12	TIFFFileName ( input )
FUNCTION_CALL	1750:5	1750:23	13	TIFFFileName ( input )
CALLEE	1750:5	1750:5	14	TIFFFileName
LEAF_NODE	1750:5	1750:5	15	TIFFFileName
LEAF_NODE	1750:17	1750:17	14	(
ARGUMENT	1750:18	1750:18	14	input
FIELD	1750:18	1750:18	15	input
LEAF_NODE	1750:18	1750:18	16	input
LEAF_NODE	1750:23	1750:23	14	)
LEAF_NODE	1750:24	1750:24	12	,
ARGUMENT	1751:5	1751:5	12	t2p -> tiff_planar
FIELD	1751:5	1751:10	13	t2p -> tiff_planar
LEAF_NODE	1751:5	1751:5	14	t2p
LEAF_NODE	1751:8	1751:8	14	->
LEAF_NODE	1751:10	1751:10	14	tiff_planar
LEAF_NODE	1751:21	1751:21	12	)
LEAF_NODE	1751:22	1751:22	10	;
EXPR_STATEMENT	1752:4	1752:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1752:4	1752:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1752:4	1752:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1752:4	1752:4	12	t2p -> t2p_error
FIELD	1752:4	1752:9	13	t2p -> t2p_error
LEAF_NODE	1752:4	1752:4	14	t2p
LEAF_NODE	1752:7	1752:7	14	->
LEAF_NODE	1752:9	1752:9	14	t2p_error
ASSIGN_OP	1752:19	1752:19	12	=
LEAF_NODE	1752:19	1752:19	13	=
RVAL	1752:21	1752:21	12	T2P_ERR_ERROR
FIELD	1752:21	1752:21	13	T2P_ERR_ERROR
LEAF_NODE	1752:21	1752:21	14	T2P_ERR_ERROR
LEAF_NODE	1752:34	1752:34	10	;
JUMP_STATEMENT	1753:4	1753:10	9	return DESTINATION ;
KEYWORD	1753:4	1753:4	10	return
LEAF_NODE	1753:4	1753:4	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1753:10	1753:10	10	;
LEAF_NODE	1754:2	1754:2	8	}
LEAF_NODE	1755:1	1755:1	5	}
EXPR_STATEMENT	1757:8	1758:55	3	TIFFGetFieldDefaulted ( input , TIFFTAG_ORIENTATION , & ( t2p -> tiff_orientation ) ) ;
EXPR	1757:8	1757:8	4	TIFFGetFieldDefaulted ( input , TIFFTAG_ORIENTATION , & ( t2p -> tiff_orientation ) )
FUNCTION_CALL	1757:8	1758:54	5	TIFFGetFieldDefaulted ( input , TIFFTAG_ORIENTATION , & ( t2p -> tiff_orientation ) )
CALLEE	1757:8	1757:8	6	TIFFGetFieldDefaulted
LEAF_NODE	1757:8	1757:8	7	TIFFGetFieldDefaulted
LEAF_NODE	1757:29	1757:29	6	(
ARGUMENT	1757:30	1757:30	6	input
FIELD	1757:30	1757:30	7	input
LEAF_NODE	1757:30	1757:30	8	input
LEAF_NODE	1757:35	1757:35	6	,
ARGUMENT	1757:37	1757:37	6	TIFFTAG_ORIENTATION
FIELD	1757:37	1757:37	7	TIFFTAG_ORIENTATION
LEAF_NODE	1757:37	1757:37	8	TIFFTAG_ORIENTATION
LEAF_NODE	1757:56	1757:56	6	,
ARGUMENT	1758:30	1758:30	6	& ( t2p -> tiff_orientation )
UNARY_EXPR	1758:30	1758:53	7	& ( t2p -> tiff_orientation )
UNARY_OPERATOR	1758:30	1758:30	8	&
LEAF_NODE	1758:30	1758:30	9	&
LEAF_NODE	1758:31	1758:31	8	(
FIELD	1758:32	1758:37	8	t2p -> tiff_orientation
LEAF_NODE	1758:32	1758:32	9	t2p
LEAF_NODE	1758:35	1758:35	9	->
LEAF_NODE	1758:37	1758:37	9	tiff_orientation
LEAF_NODE	1758:53	1758:53	8	)
LEAF_NODE	1758:54	1758:54	6	)
LEAF_NODE	1758:55	1758:55	4	;
SELECTION	1759:8	1759:35	3	
KEYWORD	1759:8	1759:8	4	if
LEAF_NODE	1759:8	1759:8	5	if
LEAF_NODE	1759:10	1759:10	4	(
CONDITION	1759:11	1759:11	4	t2p -> tiff_orientation > 8
EXPR	1759:11	1759:33	5	t2p -> tiff_orientation > 8
FIELD	1759:11	1759:16	6	t2p -> tiff_orientation
LEAF_NODE	1759:11	1759:11	7	t2p
LEAF_NODE	1759:14	1759:14	7	->
LEAF_NODE	1759:16	1759:16	7	tiff_orientation
REL_OPERATOR	1759:32	1759:32	6	>
LEAF_NODE	1759:32	1759:32	7	>
FIELD	1759:33	1759:33	6	8
LEAF_NODE	1759:33	1759:33	7	8
LEAF_NODE	1759:34	1759:34	4	)
STATEMENTS	1759:35	1764:8	4	
LEAF_NODE	1759:35	1759:35	5	{
STATEMENTS	1760:16	1763:16	5	
EXPR_STATEMENT	1760:16	1762:71	6	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has orientation %u, assuming 0" , TIFFFileName ( input ) , t2p -> tiff_orientation ) ;
EXPR	1760:16	1760:16	7	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has orientation %u, assuming 0" , TIFFFileName ( input ) , t2p -> tiff_orientation )
FUNCTION_CALL	1760:16	1762:70	8	TIFFWarning ( TIFF2PDF_MODULE , "Image %s has orientation %u, assuming 0" , TIFFFileName ( input ) , t2p -> tiff_orientation )
CALLEE	1760:16	1760:16	9	TIFFWarning
LEAF_NODE	1760:16	1760:16	10	TIFFWarning
LEAF_NODE	1760:27	1760:27	9	(
ARGUMENT	1760:28	1760:28	9	TIFF2PDF_MODULE
FIELD	1760:28	1760:28	10	TIFF2PDF_MODULE
LEAF_NODE	1760:28	1760:28	11	TIFF2PDF_MODULE
LEAF_NODE	1760:43	1760:43	9	,
ARGUMENT	1761:28	1761:28	9	"Image %s has orientation %u, assuming 0"
FIELD	1761:28	1761:28	10	"Image %s has orientation %u, assuming 0"
LEAF_NODE	1761:28	1761:28	11	"Image %s has orientation %u, assuming 0"
LEAF_NODE	1761:69	1761:69	9	,
ARGUMENT	1762:28	1762:28	9	TIFFFileName ( input )
FUNCTION_CALL	1762:28	1762:46	10	TIFFFileName ( input )
CALLEE	1762:28	1762:28	11	TIFFFileName
LEAF_NODE	1762:28	1762:28	12	TIFFFileName
LEAF_NODE	1762:40	1762:40	11	(
ARGUMENT	1762:41	1762:41	11	input
FIELD	1762:41	1762:41	12	input
LEAF_NODE	1762:41	1762:41	13	input
LEAF_NODE	1762:46	1762:46	11	)
LEAF_NODE	1762:47	1762:47	9	,
ARGUMENT	1762:49	1762:49	9	t2p -> tiff_orientation
FIELD	1762:49	1762:54	10	t2p -> tiff_orientation
LEAF_NODE	1762:49	1762:49	11	t2p
LEAF_NODE	1762:52	1762:52	11	->
LEAF_NODE	1762:54	1762:54	11	tiff_orientation
LEAF_NODE	1762:70	1762:70	9	)
LEAF_NODE	1762:71	1762:71	7	;
EXPR_STATEMENT	1763:16	1763:39	6	t2p -> tiff_orientation = 0 ;
EXPR	1763:16	1763:16	7	t2p -> tiff_orientation = 0
ASSIGN	1763:16	1763:38	8	t2p -> tiff_orientation = 0
LVAL	1763:16	1763:16	9	t2p -> tiff_orientation
FIELD	1763:16	1763:21	10	t2p -> tiff_orientation
LEAF_NODE	1763:16	1763:16	11	t2p
LEAF_NODE	1763:19	1763:19	11	->
LEAF_NODE	1763:21	1763:21	11	tiff_orientation
ASSIGN_OP	1763:37	1763:37	9	=
LEAF_NODE	1763:37	1763:37	10	=
RVAL	1763:38	1763:38	9	0
FIELD	1763:38	1763:38	10	0
LEAF_NODE	1763:38	1763:38	11	0
LEAF_NODE	1763:39	1763:39	7	;
LEAF_NODE	1764:8	1764:8	5	}
SELECTION	1766:8	1766:77	3	
KEYWORD	1766:8	1766:8	4	if
LEAF_NODE	1766:8	1766:8	5	if
LEAF_NODE	1766:10	1766:10	4	(
CONDITION	1766:11	1766:11	4	TIFFGetField ( input , TIFFTAG_XRESOLUTION , & ( t2p -> tiff_xres ) ) == 0
EXPR	1766:11	1766:75	5	TIFFGetField ( input , TIFFTAG_XRESOLUTION , & ( t2p -> tiff_xres ) ) == 0
FUNCTION_CALL	1766:11	1766:70	6	TIFFGetField ( input , TIFFTAG_XRESOLUTION , & ( t2p -> tiff_xres ) )
CALLEE	1766:11	1766:11	7	TIFFGetField
LEAF_NODE	1766:11	1766:11	8	TIFFGetField
LEAF_NODE	1766:23	1766:23	7	(
ARGUMENT	1766:24	1766:24	7	input
FIELD	1766:24	1766:24	8	input
LEAF_NODE	1766:24	1766:24	9	input
LEAF_NODE	1766:29	1766:29	7	,
ARGUMENT	1766:31	1766:31	7	TIFFTAG_XRESOLUTION
FIELD	1766:31	1766:31	8	TIFFTAG_XRESOLUTION
LEAF_NODE	1766:31	1766:31	9	TIFFTAG_XRESOLUTION
LEAF_NODE	1766:50	1766:50	7	,
ARGUMENT	1766:52	1766:52	7	& ( t2p -> tiff_xres )
UNARY_EXPR	1766:52	1766:68	8	& ( t2p -> tiff_xres )
UNARY_OPERATOR	1766:52	1766:52	9	&
LEAF_NODE	1766:52	1766:52	10	&
LEAF_NODE	1766:53	1766:53	9	(
FIELD	1766:54	1766:59	9	t2p -> tiff_xres
LEAF_NODE	1766:54	1766:54	10	t2p
LEAF_NODE	1766:57	1766:57	10	->
LEAF_NODE	1766:59	1766:59	10	tiff_xres
LEAF_NODE	1766:68	1766:68	9	)
LEAF_NODE	1766:70	1766:70	7	)
EQ_OPERATOR	1766:72	1766:72	6	==
LEAF_NODE	1766:72	1766:72	7	==
FIELD	1766:75	1766:75	6	0
LEAF_NODE	1766:75	1766:75	7	0
LEAF_NODE	1766:76	1766:76	4	)
STATEMENTS	1766:77	1768:8	4	
LEAF_NODE	1766:77	1766:77	5	{
STATEMENTS	1767:16	1767:16	5	
EXPR_STATEMENT	1767:16	1767:34	6	t2p -> tiff_xres = 0.0 ;
EXPR	1767:16	1767:16	7	t2p -> tiff_xres = 0.0
ASSIGN	1767:16	1767:31	8	t2p -> tiff_xres = 0.0
LVAL	1767:16	1767:16	9	t2p -> tiff_xres
FIELD	1767:16	1767:21	10	t2p -> tiff_xres
LEAF_NODE	1767:16	1767:16	11	t2p
LEAF_NODE	1767:19	1767:19	11	->
LEAF_NODE	1767:21	1767:21	11	tiff_xres
ASSIGN_OP	1767:30	1767:30	9	=
LEAF_NODE	1767:30	1767:30	10	=
RVAL	1767:31	1767:31	9	0.0
FIELD	1767:31	1767:31	10	0.0
LEAF_NODE	1767:31	1767:31	11	0.0
LEAF_NODE	1767:34	1767:34	7	;
LEAF_NODE	1768:8	1768:8	5	}
SELECTION	1769:8	1769:77	3	
KEYWORD	1769:8	1769:8	4	if
LEAF_NODE	1769:8	1769:8	5	if
LEAF_NODE	1769:10	1769:10	4	(
CONDITION	1769:11	1769:11	4	TIFFGetField ( input , TIFFTAG_YRESOLUTION , & ( t2p -> tiff_yres ) ) == 0
EXPR	1769:11	1769:75	5	TIFFGetField ( input , TIFFTAG_YRESOLUTION , & ( t2p -> tiff_yres ) ) == 0
FUNCTION_CALL	1769:11	1769:70	6	TIFFGetField ( input , TIFFTAG_YRESOLUTION , & ( t2p -> tiff_yres ) )
CALLEE	1769:11	1769:11	7	TIFFGetField
LEAF_NODE	1769:11	1769:11	8	TIFFGetField
LEAF_NODE	1769:23	1769:23	7	(
ARGUMENT	1769:24	1769:24	7	input
FIELD	1769:24	1769:24	8	input
LEAF_NODE	1769:24	1769:24	9	input
LEAF_NODE	1769:29	1769:29	7	,
ARGUMENT	1769:31	1769:31	7	TIFFTAG_YRESOLUTION
FIELD	1769:31	1769:31	8	TIFFTAG_YRESOLUTION
LEAF_NODE	1769:31	1769:31	9	TIFFTAG_YRESOLUTION
LEAF_NODE	1769:50	1769:50	7	,
ARGUMENT	1769:52	1769:52	7	& ( t2p -> tiff_yres )
UNARY_EXPR	1769:52	1769:68	8	& ( t2p -> tiff_yres )
UNARY_OPERATOR	1769:52	1769:52	9	&
LEAF_NODE	1769:52	1769:52	10	&
LEAF_NODE	1769:53	1769:53	9	(
FIELD	1769:54	1769:59	9	t2p -> tiff_yres
LEAF_NODE	1769:54	1769:54	10	t2p
LEAF_NODE	1769:57	1769:57	10	->
LEAF_NODE	1769:59	1769:59	10	tiff_yres
LEAF_NODE	1769:68	1769:68	9	)
LEAF_NODE	1769:70	1769:70	7	)
EQ_OPERATOR	1769:72	1769:72	6	==
LEAF_NODE	1769:72	1769:72	7	==
FIELD	1769:75	1769:75	6	0
LEAF_NODE	1769:75	1769:75	7	0
LEAF_NODE	1769:76	1769:76	4	)
STATEMENTS	1769:77	1771:8	4	
LEAF_NODE	1769:77	1769:77	5	{
STATEMENTS	1770:16	1770:16	5	
EXPR_STATEMENT	1770:16	1770:34	6	t2p -> tiff_yres = 0.0 ;
EXPR	1770:16	1770:16	7	t2p -> tiff_yres = 0.0
ASSIGN	1770:16	1770:31	8	t2p -> tiff_yres = 0.0
LVAL	1770:16	1770:16	9	t2p -> tiff_yres
FIELD	1770:16	1770:21	10	t2p -> tiff_yres
LEAF_NODE	1770:16	1770:16	11	t2p
LEAF_NODE	1770:19	1770:19	11	->
LEAF_NODE	1770:21	1770:21	11	tiff_yres
ASSIGN_OP	1770:30	1770:30	9	=
LEAF_NODE	1770:30	1770:30	10	=
RVAL	1770:31	1770:31	9	0.0
FIELD	1770:31	1770:31	10	0.0
LEAF_NODE	1770:31	1770:31	11	0.0
LEAF_NODE	1770:34	1770:34	7	;
LEAF_NODE	1771:8	1771:8	5	}
EXPR_STATEMENT	1772:1	1773:30	3	TIFFGetFieldDefaulted ( input , TIFFTAG_RESOLUTIONUNIT , & ( t2p -> tiff_resunit ) ) ;
EXPR	1772:1	1772:1	4	TIFFGetFieldDefaulted ( input , TIFFTAG_RESOLUTIONUNIT , & ( t2p -> tiff_resunit ) )
FUNCTION_CALL	1772:1	1773:29	5	TIFFGetFieldDefaulted ( input , TIFFTAG_RESOLUTIONUNIT , & ( t2p -> tiff_resunit ) )
CALLEE	1772:1	1772:1	6	TIFFGetFieldDefaulted
LEAF_NODE	1772:1	1772:1	7	TIFFGetFieldDefaulted
LEAF_NODE	1772:22	1772:22	6	(
ARGUMENT	1772:23	1772:23	6	input
FIELD	1772:23	1772:23	7	input
LEAF_NODE	1772:23	1772:23	8	input
LEAF_NODE	1772:28	1772:28	6	,
ARGUMENT	1772:30	1772:30	6	TIFFTAG_RESOLUTIONUNIT
FIELD	1772:30	1772:30	7	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	1772:30	1772:30	8	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	1772:52	1772:52	6	,
ARGUMENT	1773:9	1773:9	6	& ( t2p -> tiff_resunit )
UNARY_EXPR	1773:9	1773:28	7	& ( t2p -> tiff_resunit )
UNARY_OPERATOR	1773:9	1773:9	8	&
LEAF_NODE	1773:9	1773:9	9	&
LEAF_NODE	1773:10	1773:10	8	(
FIELD	1773:11	1773:16	8	t2p -> tiff_resunit
LEAF_NODE	1773:11	1773:11	9	t2p
LEAF_NODE	1773:14	1773:14	9	->
LEAF_NODE	1773:16	1773:16	9	tiff_resunit
LEAF_NODE	1773:28	1773:28	8	)
LEAF_NODE	1773:29	1773:29	6	)
LEAF_NODE	1773:30	1773:30	4	;
SELECTION	1774:1	1774:45	3	
KEYWORD	1774:1	1774:1	4	if
LEAF_NODE	1774:1	1774:1	5	if
LEAF_NODE	1774:3	1774:3	4	(
CONDITION	1774:4	1774:4	4	t2p -> tiff_resunit == RESUNIT_CENTIMETER
EXPR	1774:4	1774:25	5	t2p -> tiff_resunit == RESUNIT_CENTIMETER
FIELD	1774:4	1774:9	6	t2p -> tiff_resunit
LEAF_NODE	1774:4	1774:4	7	t2p
LEAF_NODE	1774:7	1774:7	7	->
LEAF_NODE	1774:9	1774:9	7	tiff_resunit
EQ_OPERATOR	1774:22	1774:22	6	==
LEAF_NODE	1774:22	1774:22	7	==
FIELD	1774:25	1774:25	6	RESUNIT_CENTIMETER
LEAF_NODE	1774:25	1774:25	7	RESUNIT_CENTIMETER
LEAF_NODE	1774:43	1774:43	4	)
STATEMENTS	1774:45	1777:1	4	
LEAF_NODE	1774:45	1774:45	5	{
STATEMENTS	1775:2	1776:2	5	
EXPR_STATEMENT	1775:2	1775:25	6	t2p -> tiff_xres *= 2.54F ;
EXPR	1775:2	1775:2	7	t2p -> tiff_xres *= 2.54F
ASSIGN	1775:2	1775:20	8	t2p -> tiff_xres *= 2.54F
LVAL	1775:2	1775:2	9	t2p -> tiff_xres
FIELD	1775:2	1775:7	10	t2p -> tiff_xres
LEAF_NODE	1775:2	1775:2	11	t2p
LEAF_NODE	1775:5	1775:5	11	->
LEAF_NODE	1775:7	1775:7	11	tiff_xres
ASSIGN_OP	1775:17	1775:17	9	*=
LEAF_NODE	1775:17	1775:17	10	*=
RVAL	1775:20	1775:20	9	2.54F
FIELD	1775:20	1775:20	10	2.54F
LEAF_NODE	1775:20	1775:20	11	2.54F
LEAF_NODE	1775:25	1775:25	7	;
EXPR_STATEMENT	1776:2	1776:25	6	t2p -> tiff_yres *= 2.54F ;
EXPR	1776:2	1776:2	7	t2p -> tiff_yres *= 2.54F
ASSIGN	1776:2	1776:20	8	t2p -> tiff_yres *= 2.54F
LVAL	1776:2	1776:2	9	t2p -> tiff_yres
FIELD	1776:2	1776:7	10	t2p -> tiff_yres
LEAF_NODE	1776:2	1776:2	11	t2p
LEAF_NODE	1776:5	1776:5	11	->
LEAF_NODE	1776:7	1776:7	11	tiff_yres
ASSIGN_OP	1776:17	1776:17	9	*=
LEAF_NODE	1776:17	1776:17	10	*=
RVAL	1776:20	1776:20	9	2.54F
FIELD	1776:20	1776:20	10	2.54F
LEAF_NODE	1776:20	1776:20	11	2.54F
LEAF_NODE	1776:25	1776:25	7	;
LEAF_NODE	1777:1	1777:1	5	}
SELECTION	1777:3	1777:8	3	
KEYWORD	1777:3	1777:3	4	else
LEAF_NODE	1777:3	1777:3	5	else
STATEMENTS	1777:8	1777:8	4	
SELECTION	1777:8	1778:35	5	
KEYWORD	1777:8	1777:8	6	if
LEAF_NODE	1777:8	1777:8	7	if
LEAF_NODE	1777:11	1777:11	6	(
CONDITION	1777:12	1777:12	6	t2p -> tiff_resunit != RESUNIT_INCH && t2p -> pdf_centimeters != 0
EXPR	1777:12	1777:12	7	t2p -> tiff_resunit != RESUNIT_INCH && t2p -> pdf_centimeters != 0
AND	1777:12	1778:8	8	t2p -> tiff_resunit != RESUNIT_INCH && t2p -> pdf_centimeters != 0
EXPR	1777:12	1777:33	9	t2p -> tiff_resunit != RESUNIT_INCH
FIELD	1777:12	1777:17	10	t2p -> tiff_resunit
LEAF_NODE	1777:12	1777:12	11	t2p
LEAF_NODE	1777:15	1777:15	11	->
LEAF_NODE	1777:17	1777:17	11	tiff_resunit
EQ_OPERATOR	1777:30	1777:30	10	!=
LEAF_NODE	1777:30	1777:30	11	!=
FIELD	1777:33	1777:33	10	RESUNIT_INCH
LEAF_NODE	1777:33	1777:33	11	RESUNIT_INCH
LEAF_NODE	1778:5	1778:5	9	&&
EXPR	1778:8	1778:32	9	t2p -> pdf_centimeters != 0
FIELD	1778:8	1778:13	10	t2p -> pdf_centimeters
LEAF_NODE	1778:8	1778:8	11	t2p
LEAF_NODE	1778:11	1778:11	11	->
LEAF_NODE	1778:13	1778:13	11	pdf_centimeters
EQ_OPERATOR	1778:29	1778:29	10	!=
LEAF_NODE	1778:29	1778:29	11	!=
FIELD	1778:32	1778:32	10	0
LEAF_NODE	1778:32	1778:32	11	0
LEAF_NODE	1778:33	1778:33	6	)
STATEMENTS	1778:35	1781:1	6	
LEAF_NODE	1778:35	1778:35	7	{
STATEMENTS	1779:2	1780:2	7	
EXPR_STATEMENT	1779:2	1779:25	8	t2p -> tiff_xres *= 2.54F ;
EXPR	1779:2	1779:2	9	t2p -> tiff_xres *= 2.54F
ASSIGN	1779:2	1779:20	10	t2p -> tiff_xres *= 2.54F
LVAL	1779:2	1779:2	11	t2p -> tiff_xres
FIELD	1779:2	1779:7	12	t2p -> tiff_xres
LEAF_NODE	1779:2	1779:2	13	t2p
LEAF_NODE	1779:5	1779:5	13	->
LEAF_NODE	1779:7	1779:7	13	tiff_xres
ASSIGN_OP	1779:17	1779:17	11	*=
LEAF_NODE	1779:17	1779:17	12	*=
RVAL	1779:20	1779:20	11	2.54F
FIELD	1779:20	1779:20	12	2.54F
LEAF_NODE	1779:20	1779:20	13	2.54F
LEAF_NODE	1779:25	1779:25	9	;
EXPR_STATEMENT	1780:2	1780:25	8	t2p -> tiff_yres *= 2.54F ;
EXPR	1780:2	1780:2	9	t2p -> tiff_yres *= 2.54F
ASSIGN	1780:2	1780:20	10	t2p -> tiff_yres *= 2.54F
LVAL	1780:2	1780:2	11	t2p -> tiff_yres
FIELD	1780:2	1780:7	12	t2p -> tiff_yres
LEAF_NODE	1780:2	1780:2	13	t2p
LEAF_NODE	1780:5	1780:5	13	->
LEAF_NODE	1780:7	1780:7	13	tiff_yres
ASSIGN_OP	1780:17	1780:17	11	*=
LEAF_NODE	1780:17	1780:17	12	*=
RVAL	1780:20	1780:20	11	2.54F
FIELD	1780:20	1780:20	12	2.54F
LEAF_NODE	1780:20	1780:20	13	2.54F
LEAF_NODE	1780:25	1780:25	9	;
LEAF_NODE	1781:1	1781:1	7	}
EXPR_STATEMENT	1783:1	1783:26	3	t2p_compose_pdf_page ( t2p ) ;
EXPR	1783:1	1783:1	4	t2p_compose_pdf_page ( t2p )
FUNCTION_CALL	1783:1	1783:25	5	t2p_compose_pdf_page ( t2p )
CALLEE	1783:1	1783:1	6	t2p_compose_pdf_page
LEAF_NODE	1783:1	1783:1	7	t2p_compose_pdf_page
LEAF_NODE	1783:21	1783:21	6	(
ARGUMENT	1783:22	1783:22	6	t2p
FIELD	1783:22	1783:22	7	t2p
LEAF_NODE	1783:22	1783:22	8	t2p
LEAF_NODE	1783:25	1783:25	6	)
LEAF_NODE	1783:26	1783:26	4	;
SELECTION	1784:8	1785:5	3	
KEYWORD	1784:8	1784:8	4	if
LEAF_NODE	1784:8	1784:8	5	if
LEAF_NODE	1784:10	1784:10	4	(
CONDITION	1784:12	1784:12	4	t2p -> t2p_error == T2P_ERR_ERROR
EXPR	1784:12	1784:30	5	t2p -> t2p_error == T2P_ERR_ERROR
FIELD	1784:12	1784:17	6	t2p -> t2p_error
LEAF_NODE	1784:12	1784:12	7	t2p
LEAF_NODE	1784:15	1784:15	7	->
LEAF_NODE	1784:17	1784:17	7	t2p_error
EQ_OPERATOR	1784:27	1784:27	6	==
LEAF_NODE	1784:27	1784:27	7	==
FIELD	1784:30	1784:30	6	T2P_ERR_ERROR
LEAF_NODE	1784:30	1784:30	7	T2P_ERR_ERROR
LEAF_NODE	1784:44	1784:44	4	)
STATEMENTS	1785:5	1785:5	4	
JUMP_STATEMENT	1785:5	1785:11	5	return DESTINATION ;
KEYWORD	1785:5	1785:5	6	return
LEAF_NODE	1785:5	1785:5	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	1785:11	1785:11	6	;
EXPR_STATEMENT	1787:1	1787:42	3	t2p -> pdf_transcode = T2P_TRANSCODE_ENCODE ;
EXPR	1787:1	1787:1	4	t2p -> pdf_transcode = T2P_TRANSCODE_ENCODE
ASSIGN	1787:1	1787:22	5	t2p -> pdf_transcode = T2P_TRANSCODE_ENCODE
LVAL	1787:1	1787:1	6	t2p -> pdf_transcode
FIELD	1787:1	1787:6	7	t2p -> pdf_transcode
LEAF_NODE	1787:1	1787:1	8	t2p
LEAF_NODE	1787:4	1787:4	8	->
LEAF_NODE	1787:6	1787:6	8	pdf_transcode
ASSIGN_OP	1787:20	1787:20	6	=
LEAF_NODE	1787:20	1787:20	7	=
RVAL	1787:22	1787:22	6	T2P_TRANSCODE_ENCODE
FIELD	1787:22	1787:22	7	T2P_TRANSCODE_ENCODE
LEAF_NODE	1787:22	1787:22	8	T2P_TRANSCODE_ENCODE
LEAF_NODE	1787:42	1787:42	4	;
SELECTION	1793:1	1793:73	3	
KEYWORD	1793:1	1793:1	4	if
LEAF_NODE	1793:1	1793:1	5	if
LEAF_NODE	1793:3	1793:3	4	(
CONDITION	1793:4	1793:4	4	t2p -> pdf_nopassthrough == 0 && t2p -> tiff_planar != PLANARCONFIG_SEPARATE
EXPR	1793:4	1793:4	5	t2p -> pdf_nopassthrough == 0 && t2p -> tiff_planar != PLANARCONFIG_SEPARATE
AND	1793:4	1793:33	6	t2p -> pdf_nopassthrough == 0 && t2p -> tiff_planar != PLANARCONFIG_SEPARATE
EXPR	1793:4	1793:28	7	t2p -> pdf_nopassthrough == 0
FIELD	1793:4	1793:9	8	t2p -> pdf_nopassthrough
LEAF_NODE	1793:4	1793:4	9	t2p
LEAF_NODE	1793:7	1793:7	9	->
LEAF_NODE	1793:9	1793:9	9	pdf_nopassthrough
EQ_OPERATOR	1793:26	1793:26	8	==
LEAF_NODE	1793:26	1793:26	9	==
FIELD	1793:28	1793:28	8	0
LEAF_NODE	1793:28	1793:28	9	0
LEAF_NODE	1793:30	1793:30	7	&&
EXPR	1793:33	1793:51	7	t2p -> tiff_planar != PLANARCONFIG_SEPARATE
FIELD	1793:33	1793:38	8	t2p -> tiff_planar
LEAF_NODE	1793:33	1793:33	9	t2p
LEAF_NODE	1793:36	1793:36	9	->
LEAF_NODE	1793:38	1793:38	9	tiff_planar
EQ_OPERATOR	1793:49	1793:49	8	!=
LEAF_NODE	1793:49	1793:49	9	!=
FIELD	1793:51	1793:51	8	PLANARCONFIG_SEPARATE
LEAF_NODE	1793:51	1793:51	9	PLANARCONFIG_SEPARATE
LEAF_NODE	1793:72	1793:72	4	)
STATEMENTS	1793:73	1826:1	4	
LEAF_NODE	1793:73	1793:73	5	{
STATEMENTS	1795:2	1825:2	5	
SELECTION	1795:2	1796:4	6	
KEYWORD	1795:2	1795:2	7	if
LEAF_NODE	1795:2	1795:2	8	if
LEAF_NODE	1795:4	1795:4	7	(
CONDITION	1795:5	1795:5	7	t2p -> tiff_compression == COMPRESSION_CCITTFAX4
EXPR	1795:5	1795:28	8	t2p -> tiff_compression == COMPRESSION_CCITTFAX4
FIELD	1795:5	1795:10	9	t2p -> tiff_compression
LEAF_NODE	1795:5	1795:5	10	t2p
LEAF_NODE	1795:8	1795:8	10	->
LEAF_NODE	1795:10	1795:10	10	tiff_compression
EQ_OPERATOR	1795:26	1795:26	9	==
LEAF_NODE	1795:26	1795:26	10	==
FIELD	1795:28	1795:28	9	COMPRESSION_CCITTFAX4
LEAF_NODE	1795:28	1795:28	10	COMPRESSION_CCITTFAX4
LEAF_NODE	1796:3	1796:3	7	)
STATEMENTS	1796:4	1801:2	7	
LEAF_NODE	1796:4	1796:4	8	{
STATEMENTS	1797:3	1797:3	8	
SELECTION	1797:3	1797:60	9	
KEYWORD	1797:3	1797:3	10	if
LEAF_NODE	1797:3	1797:3	11	if
LEAF_NODE	1797:5	1797:5	10	(
CONDITION	1797:6	1797:6	10	TIFFIsTiled ( input ) || ( TIFFNumberOfStrips ( input ) == 1 )
EXPR	1797:6	1797:6	11	TIFFIsTiled ( input ) || ( TIFFNumberOfStrips ( input ) == 1 )
OR	1797:6	1797:28	12	TIFFIsTiled ( input ) || ( TIFFNumberOfStrips ( input ) == 1 )
EXPR	1797:6	1797:6	13	TIFFIsTiled ( input )
FUNCTION_CALL	1797:6	1797:23	14	TIFFIsTiled ( input )
CALLEE	1797:6	1797:6	15	TIFFIsTiled
LEAF_NODE	1797:6	1797:6	16	TIFFIsTiled
LEAF_NODE	1797:17	1797:17	15	(
ARGUMENT	1797:18	1797:18	15	input
FIELD	1797:18	1797:18	16	input
LEAF_NODE	1797:18	1797:18	17	input
LEAF_NODE	1797:23	1797:23	15	)
LEAF_NODE	1797:25	1797:25	13	||
EXPR	1797:28	1797:57	13	( TIFFNumberOfStrips ( input ) == 1 )
LEAF_NODE	1797:28	1797:28	14	(
FUNCTION_CALL	1797:29	1797:53	14	TIFFNumberOfStrips ( input )
CALLEE	1797:29	1797:29	15	TIFFNumberOfStrips
LEAF_NODE	1797:29	1797:29	16	TIFFNumberOfStrips
LEAF_NODE	1797:47	1797:47	15	(
ARGUMENT	1797:48	1797:48	15	input
FIELD	1797:48	1797:48	16	input
LEAF_NODE	1797:48	1797:48	17	input
LEAF_NODE	1797:53	1797:53	15	)
EQ_OPERATOR	1797:54	1797:54	14	==
LEAF_NODE	1797:54	1797:54	15	==
FIELD	1797:56	1797:56	14	1
LEAF_NODE	1797:56	1797:56	15	1
LEAF_NODE	1797:57	1797:57	14	)
LEAF_NODE	1797:59	1797:59	10	)
STATEMENTS	1797:60	1800:3	10	
LEAF_NODE	1797:60	1797:60	11	{
STATEMENTS	1798:4	1799:4	11	
EXPR_STATEMENT	1798:4	1798:42	12	t2p -> pdf_transcode = T2P_TRANSCODE_RAW ;
EXPR	1798:4	1798:4	13	t2p -> pdf_transcode = T2P_TRANSCODE_RAW
ASSIGN	1798:4	1798:25	14	t2p -> pdf_transcode = T2P_TRANSCODE_RAW
LVAL	1798:4	1798:4	15	t2p -> pdf_transcode
FIELD	1798:4	1798:9	16	t2p -> pdf_transcode
LEAF_NODE	1798:4	1798:4	17	t2p
LEAF_NODE	1798:7	1798:7	17	->
LEAF_NODE	1798:9	1798:9	17	pdf_transcode
ASSIGN_OP	1798:23	1798:23	15	=
LEAF_NODE	1798:23	1798:23	16	=
RVAL	1798:25	1798:25	15	T2P_TRANSCODE_RAW
FIELD	1798:25	1798:25	16	T2P_TRANSCODE_RAW
LEAF_NODE	1798:25	1798:25	17	T2P_TRANSCODE_RAW
LEAF_NODE	1798:42	1798:42	13	;
EXPR_STATEMENT	1799:4	1799:40	12	t2p -> pdf_compression = T2P_COMPRESS_G4 ;
EXPR	1799:4	1799:4	13	t2p -> pdf_compression = T2P_COMPRESS_G4
ASSIGN	1799:4	1799:25	14	t2p -> pdf_compression = T2P_COMPRESS_G4
LVAL	1799:4	1799:4	15	t2p -> pdf_compression
FIELD	1799:4	1799:9	16	t2p -> pdf_compression
LEAF_NODE	1799:4	1799:4	17	t2p
LEAF_NODE	1799:7	1799:7	17	->
LEAF_NODE	1799:9	1799:9	17	pdf_compression
ASSIGN_OP	1799:24	1799:24	15	=
LEAF_NODE	1799:24	1799:24	16	=
RVAL	1799:25	1799:25	15	T2P_COMPRESS_G4
FIELD	1799:25	1799:25	16	T2P_COMPRESS_G4
LEAF_NODE	1799:25	1799:25	17	T2P_COMPRESS_G4
LEAF_NODE	1799:40	1799:40	13	;
LEAF_NODE	1800:3	1800:3	11	}
LEAF_NODE	1801:2	1801:2	8	}
SELECTION	1804:2	1805:49	6	
KEYWORD	1804:2	1804:2	7	if
LEAF_NODE	1804:2	1804:2	8	if
LEAF_NODE	1804:4	1804:4	7	(
CONDITION	1804:5	1804:5	7	t2p -> tiff_compression == COMPRESSION_ADOBE_DEFLATE || t2p -> tiff_compression == COMPRESSION_DEFLATE
EXPR	1804:5	1804:5	8	t2p -> tiff_compression == COMPRESSION_ADOBE_DEFLATE || t2p -> tiff_compression == COMPRESSION_DEFLATE
OR	1804:5	1805:6	9	t2p -> tiff_compression == COMPRESSION_ADOBE_DEFLATE || t2p -> tiff_compression == COMPRESSION_DEFLATE
EXPR	1804:5	1804:29	10	t2p -> tiff_compression == COMPRESSION_ADOBE_DEFLATE
FIELD	1804:5	1804:10	11	t2p -> tiff_compression
LEAF_NODE	1804:5	1804:5	12	t2p
LEAF_NODE	1804:8	1804:8	12	->
LEAF_NODE	1804:10	1804:10	12	tiff_compression
EQ_OPERATOR	1804:26	1804:26	11	==
LEAF_NODE	1804:26	1804:26	12	==
FIELD	1804:29	1804:29	11	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	1804:29	1804:29	12	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	1805:3	1805:3	10	||
EXPR	1805:6	1805:29	10	t2p -> tiff_compression == COMPRESSION_DEFLATE
FIELD	1805:6	1805:11	11	t2p -> tiff_compression
LEAF_NODE	1805:6	1805:6	12	t2p
LEAF_NODE	1805:9	1805:9	12	->
LEAF_NODE	1805:11	1805:11	12	tiff_compression
EQ_OPERATOR	1805:27	1805:27	11	==
LEAF_NODE	1805:27	1805:27	12	==
FIELD	1805:29	1805:29	11	COMPRESSION_DEFLATE
LEAF_NODE	1805:29	1805:29	12	COMPRESSION_DEFLATE
LEAF_NODE	1805:48	1805:48	7	)
STATEMENTS	1805:49	1810:2	7	
LEAF_NODE	1805:49	1805:49	8	{
STATEMENTS	1806:3	1806:3	8	
SELECTION	1806:3	1806:60	9	
KEYWORD	1806:3	1806:3	10	if
LEAF_NODE	1806:3	1806:3	11	if
LEAF_NODE	1806:5	1806:5	10	(
CONDITION	1806:6	1806:6	10	TIFFIsTiled ( input ) || ( TIFFNumberOfStrips ( input ) == 1 )
EXPR	1806:6	1806:6	11	TIFFIsTiled ( input ) || ( TIFFNumberOfStrips ( input ) == 1 )
OR	1806:6	1806:28	12	TIFFIsTiled ( input ) || ( TIFFNumberOfStrips ( input ) == 1 )
EXPR	1806:6	1806:6	13	TIFFIsTiled ( input )
FUNCTION_CALL	1806:6	1806:23	14	TIFFIsTiled ( input )
CALLEE	1806:6	1806:6	15	TIFFIsTiled
LEAF_NODE	1806:6	1806:6	16	TIFFIsTiled
LEAF_NODE	1806:17	1806:17	15	(
ARGUMENT	1806:18	1806:18	15	input
FIELD	1806:18	1806:18	16	input
LEAF_NODE	1806:18	1806:18	17	input
LEAF_NODE	1806:23	1806:23	15	)
LEAF_NODE	1806:25	1806:25	13	||
EXPR	1806:28	1806:57	13	( TIFFNumberOfStrips ( input ) == 1 )
LEAF_NODE	1806:28	1806:28	14	(
FUNCTION_CALL	1806:29	1806:53	14	TIFFNumberOfStrips ( input )
CALLEE	1806:29	1806:29	15	TIFFNumberOfStrips
LEAF_NODE	1806:29	1806:29	16	TIFFNumberOfStrips
LEAF_NODE	1806:47	1806:47	15	(
ARGUMENT	1806:48	1806:48	15	input
FIELD	1806:48	1806:48	16	input
LEAF_NODE	1806:48	1806:48	17	input
LEAF_NODE	1806:53	1806:53	15	)
EQ_OPERATOR	1806:54	1806:54	14	==
LEAF_NODE	1806:54	1806:54	15	==
FIELD	1806:56	1806:56	14	1
LEAF_NODE	1806:56	1806:56	15	1
LEAF_NODE	1806:57	1806:57	14	)
LEAF_NODE	1806:59	1806:59	10	)
STATEMENTS	1806:60	1809:3	10	
LEAF_NODE	1806:60	1806:60	11	{
STATEMENTS	1807:4	1808:4	11	
EXPR_STATEMENT	1807:4	1807:42	12	t2p -> pdf_transcode = T2P_TRANSCODE_RAW ;
EXPR	1807:4	1807:4	13	t2p -> pdf_transcode = T2P_TRANSCODE_RAW
ASSIGN	1807:4	1807:25	14	t2p -> pdf_transcode = T2P_TRANSCODE_RAW
LVAL	1807:4	1807:4	15	t2p -> pdf_transcode
FIELD	1807:4	1807:9	16	t2p -> pdf_transcode
LEAF_NODE	1807:4	1807:4	17	t2p
LEAF_NODE	1807:7	1807:7	17	->
LEAF_NODE	1807:9	1807:9	17	pdf_transcode
ASSIGN_OP	1807:23	1807:23	15	=
LEAF_NODE	1807:23	1807:23	16	=
RVAL	1807:25	1807:25	15	T2P_TRANSCODE_RAW
FIELD	1807:25	1807:25	16	T2P_TRANSCODE_RAW
LEAF_NODE	1807:25	1807:25	17	T2P_TRANSCODE_RAW
LEAF_NODE	1807:42	1807:42	13	;
EXPR_STATEMENT	1808:4	1808:41	12	t2p -> pdf_compression = T2P_COMPRESS_ZIP ;
EXPR	1808:4	1808:4	13	t2p -> pdf_compression = T2P_COMPRESS_ZIP
ASSIGN	1808:4	1808:25	14	t2p -> pdf_compression = T2P_COMPRESS_ZIP
LVAL	1808:4	1808:4	15	t2p -> pdf_compression
FIELD	1808:4	1808:9	16	t2p -> pdf_compression
LEAF_NODE	1808:4	1808:4	17	t2p
LEAF_NODE	1808:7	1808:7	17	->
LEAF_NODE	1808:9	1808:9	17	pdf_compression
ASSIGN_OP	1808:24	1808:24	15	=
LEAF_NODE	1808:24	1808:24	16	=
RVAL	1808:25	1808:25	15	T2P_COMPRESS_ZIP
FIELD	1808:25	1808:25	16	T2P_COMPRESS_ZIP
LEAF_NODE	1808:25	1808:25	17	T2P_COMPRESS_ZIP
LEAF_NODE	1808:41	1808:41	13	;
LEAF_NODE	1809:3	1809:3	11	}
LEAF_NODE	1810:2	1810:2	8	}
SELECTION	1813:2	1813:46	6	
KEYWORD	1813:2	1813:2	7	if
LEAF_NODE	1813:2	1813:2	8	if
LEAF_NODE	1813:4	1813:4	7	(
CONDITION	1813:5	1813:5	7	t2p -> tiff_compression == COMPRESSION_OJPEG
EXPR	1813:5	1813:28	8	t2p -> tiff_compression == COMPRESSION_OJPEG
FIELD	1813:5	1813:10	9	t2p -> tiff_compression
LEAF_NODE	1813:5	1813:5	10	t2p
LEAF_NODE	1813:8	1813:8	10	->
LEAF_NODE	1813:10	1813:10	10	tiff_compression
EQ_OPERATOR	1813:26	1813:26	9	==
LEAF_NODE	1813:26	1813:26	10	==
FIELD	1813:28	1813:28	9	COMPRESSION_OJPEG
LEAF_NODE	1813:28	1813:28	10	COMPRESSION_OJPEG
LEAF_NODE	1813:45	1813:45	7	)
STATEMENTS	1813:46	1817:2	7	
LEAF_NODE	1813:46	1813:46	8	{
STATEMENTS	1814:3	1816:3	8	
EXPR_STATEMENT	1814:3	1814:41	9	t2p -> pdf_transcode = T2P_TRANSCODE_RAW ;
EXPR	1814:3	1814:3	10	t2p -> pdf_transcode = T2P_TRANSCODE_RAW
ASSIGN	1814:3	1814:24	11	t2p -> pdf_transcode = T2P_TRANSCODE_RAW
LVAL	1814:3	1814:3	12	t2p -> pdf_transcode
FIELD	1814:3	1814:8	13	t2p -> pdf_transcode
LEAF_NODE	1814:3	1814:3	14	t2p
LEAF_NODE	1814:6	1814:6	14	->
LEAF_NODE	1814:8	1814:8	14	pdf_transcode
ASSIGN_OP	1814:22	1814:22	12	=
LEAF_NODE	1814:22	1814:22	13	=
RVAL	1814:24	1814:24	12	T2P_TRANSCODE_RAW
FIELD	1814:24	1814:24	13	T2P_TRANSCODE_RAW
LEAF_NODE	1814:24	1814:24	14	T2P_TRANSCODE_RAW
LEAF_NODE	1814:41	1814:41	10	;
EXPR_STATEMENT	1815:3	1815:41	9	t2p -> pdf_compression = T2P_COMPRESS_JPEG ;
EXPR	1815:3	1815:3	10	t2p -> pdf_compression = T2P_COMPRESS_JPEG
ASSIGN	1815:3	1815:24	11	t2p -> pdf_compression = T2P_COMPRESS_JPEG
LVAL	1815:3	1815:3	12	t2p -> pdf_compression
FIELD	1815:3	1815:8	13	t2p -> pdf_compression
LEAF_NODE	1815:3	1815:3	14	t2p
LEAF_NODE	1815:6	1815:6	14	->
LEAF_NODE	1815:8	1815:8	14	pdf_compression
ASSIGN_OP	1815:23	1815:23	12	=
LEAF_NODE	1815:23	1815:23	13	=
RVAL	1815:24	1815:24	12	T2P_COMPRESS_JPEG
FIELD	1815:24	1815:24	13	T2P_COMPRESS_JPEG
LEAF_NODE	1815:24	1815:24	14	T2P_COMPRESS_JPEG
LEAF_NODE	1815:41	1815:41	10	;
EXPR_STATEMENT	1816:3	1816:39	9	t2p_process_ojpeg_tables ( t2p , input ) ;
EXPR	1816:3	1816:3	10	t2p_process_ojpeg_tables ( t2p , input )
FUNCTION_CALL	1816:3	1816:38	11	t2p_process_ojpeg_tables ( t2p , input )
CALLEE	1816:3	1816:3	12	t2p_process_ojpeg_tables
LEAF_NODE	1816:3	1816:3	13	t2p_process_ojpeg_tables
LEAF_NODE	1816:27	1816:27	12	(
ARGUMENT	1816:28	1816:28	12	t2p
FIELD	1816:28	1816:28	13	t2p
LEAF_NODE	1816:28	1816:28	14	t2p
LEAF_NODE	1816:31	1816:31	12	,
ARGUMENT	1816:33	1816:33	12	input
FIELD	1816:33	1816:33	13	input
LEAF_NODE	1816:33	1816:33	14	input
LEAF_NODE	1816:38	1816:38	12	)
LEAF_NODE	1816:39	1816:39	10	;
LEAF_NODE	1817:2	1817:2	8	}
SELECTION	1820:2	1820:45	6	
KEYWORD	1820:2	1820:2	7	if
LEAF_NODE	1820:2	1820:2	8	if
LEAF_NODE	1820:4	1820:4	7	(
CONDITION	1820:5	1820:5	7	t2p -> tiff_compression == COMPRESSION_JPEG
EXPR	1820:5	1820:28	8	t2p -> tiff_compression == COMPRESSION_JPEG
FIELD	1820:5	1820:10	9	t2p -> tiff_compression
LEAF_NODE	1820:5	1820:5	10	t2p
LEAF_NODE	1820:8	1820:8	10	->
LEAF_NODE	1820:10	1820:10	10	tiff_compression
EQ_OPERATOR	1820:26	1820:26	9	==
LEAF_NODE	1820:26	1820:26	10	==
FIELD	1820:28	1820:28	9	COMPRESSION_JPEG
LEAF_NODE	1820:28	1820:28	10	COMPRESSION_JPEG
LEAF_NODE	1820:44	1820:44	7	)
STATEMENTS	1820:45	1823:2	7	
LEAF_NODE	1820:45	1820:45	8	{
STATEMENTS	1821:3	1822:3	8	
EXPR_STATEMENT	1821:3	1821:41	9	t2p -> pdf_transcode = T2P_TRANSCODE_RAW ;
EXPR	1821:3	1821:3	10	t2p -> pdf_transcode = T2P_TRANSCODE_RAW
ASSIGN	1821:3	1821:24	11	t2p -> pdf_transcode = T2P_TRANSCODE_RAW
LVAL	1821:3	1821:3	12	t2p -> pdf_transcode
FIELD	1821:3	1821:8	13	t2p -> pdf_transcode
LEAF_NODE	1821:3	1821:3	14	t2p
LEAF_NODE	1821:6	1821:6	14	->
LEAF_NODE	1821:8	1821:8	14	pdf_transcode
ASSIGN_OP	1821:22	1821:22	12	=
LEAF_NODE	1821:22	1821:22	13	=
RVAL	1821:24	1821:24	12	T2P_TRANSCODE_RAW
FIELD	1821:24	1821:24	13	T2P_TRANSCODE_RAW
LEAF_NODE	1821:24	1821:24	14	T2P_TRANSCODE_RAW
LEAF_NODE	1821:41	1821:41	10	;
EXPR_STATEMENT	1822:3	1822:41	9	t2p -> pdf_compression = T2P_COMPRESS_JPEG ;
EXPR	1822:3	1822:3	10	t2p -> pdf_compression = T2P_COMPRESS_JPEG
ASSIGN	1822:3	1822:24	11	t2p -> pdf_compression = T2P_COMPRESS_JPEG
LVAL	1822:3	1822:3	12	t2p -> pdf_compression
FIELD	1822:3	1822:8	13	t2p -> pdf_compression
LEAF_NODE	1822:3	1822:3	14	t2p
LEAF_NODE	1822:6	1822:6	14	->
LEAF_NODE	1822:8	1822:8	14	pdf_compression
ASSIGN_OP	1822:23	1822:23	12	=
LEAF_NODE	1822:23	1822:23	13	=
RVAL	1822:24	1822:24	12	T2P_COMPRESS_JPEG
FIELD	1822:24	1822:24	13	T2P_COMPRESS_JPEG
LEAF_NODE	1822:24	1822:24	14	T2P_COMPRESS_JPEG
LEAF_NODE	1822:41	1822:41	10	;
LEAF_NODE	1823:2	1823:2	8	}
EXPR_STATEMENT	1825:2	1825:9	6	( void ) 0 ;
EXPR	1825:2	1825:8	7	( void ) 0
LEAF_NODE	1825:2	1825:2	8	(
TYPE_NAME	1825:3	1825:3	8	void
LEAF_NODE	1825:3	1825:3	9	void
LEAF_NODE	1825:7	1825:7	8	)
FIELD	1825:8	1825:8	8	0
LEAF_NODE	1825:8	1825:8	9	0
LEAF_NODE	1825:9	1825:9	7	;
LEAF_NODE	1826:1	1826:1	5	}
SELECTION	1828:1	1828:42	3	
KEYWORD	1828:1	1828:1	4	if
LEAF_NODE	1828:1	1828:1	5	if
LEAF_NODE	1828:3	1828:3	4	(
CONDITION	1828:4	1828:4	4	t2p -> pdf_transcode != T2P_TRANSCODE_RAW
EXPR	1828:4	1828:24	5	t2p -> pdf_transcode != T2P_TRANSCODE_RAW
FIELD	1828:4	1828:9	6	t2p -> pdf_transcode
LEAF_NODE	1828:4	1828:4	7	t2p
LEAF_NODE	1828:7	1828:7	7	->
LEAF_NODE	1828:9	1828:9	7	pdf_transcode
EQ_OPERATOR	1828:22	1828:22	6	!=
LEAF_NODE	1828:22	1828:22	7	!=
FIELD	1828:24	1828:24	6	T2P_TRANSCODE_RAW
LEAF_NODE	1828:24	1828:24	7	T2P_TRANSCODE_RAW
LEAF_NODE	1828:41	1828:41	4	)
STATEMENTS	1828:42	1830:1	4	
LEAF_NODE	1828:42	1828:42	5	{
STATEMENTS	1829:2	1829:2	5	
EXPR_STATEMENT	1829:2	1829:52	6	t2p -> pdf_compression = t2p -> pdf_defaultcompression ;
EXPR	1829:2	1829:2	7	t2p -> pdf_compression = t2p -> pdf_defaultcompression
ASSIGN	1829:2	1829:25	8	t2p -> pdf_compression = t2p -> pdf_defaultcompression
LVAL	1829:2	1829:2	9	t2p -> pdf_compression
FIELD	1829:2	1829:7	10	t2p -> pdf_compression
LEAF_NODE	1829:2	1829:2	11	t2p
LEAF_NODE	1829:5	1829:5	11	->
LEAF_NODE	1829:7	1829:7	11	pdf_compression
ASSIGN_OP	1829:23	1829:23	9	=
LEAF_NODE	1829:23	1829:23	10	=
RVAL	1829:25	1829:25	9	t2p -> pdf_defaultcompression
FIELD	1829:25	1829:30	10	t2p -> pdf_defaultcompression
LEAF_NODE	1829:25	1829:25	11	t2p
LEAF_NODE	1829:28	1829:28	11	->
LEAF_NODE	1829:30	1829:30	11	pdf_defaultcompression
LEAF_NODE	1829:52	1829:52	7	;
LEAF_NODE	1830:1	1830:1	5	}
SELECTION	1833:1	1833:51	3	
KEYWORD	1833:1	1833:1	4	if
LEAF_NODE	1833:1	1833:1	5	if
LEAF_NODE	1833:3	1833:3	4	(
CONDITION	1833:4	1833:4	4	t2p -> pdf_defaultcompression == T2P_COMPRESS_JPEG
EXPR	1833:4	1833:33	5	t2p -> pdf_defaultcompression == T2P_COMPRESS_JPEG
FIELD	1833:4	1833:9	6	t2p -> pdf_defaultcompression
LEAF_NODE	1833:4	1833:4	7	t2p
LEAF_NODE	1833:7	1833:7	7	->
LEAF_NODE	1833:9	1833:9	7	pdf_defaultcompression
EQ_OPERATOR	1833:31	1833:31	6	==
LEAF_NODE	1833:31	1833:31	7	==
FIELD	1833:33	1833:33	6	T2P_COMPRESS_JPEG
LEAF_NODE	1833:33	1833:33	7	T2P_COMPRESS_JPEG
LEAF_NODE	1833:50	1833:50	4	)
STATEMENTS	1833:51	1839:1	4	
LEAF_NODE	1833:51	1833:51	5	{
STATEMENTS	1834:2	1834:2	5	
SELECTION	1834:2	1834:42	6	
KEYWORD	1834:2	1834:2	7	if
LEAF_NODE	1834:2	1834:2	8	if
LEAF_NODE	1834:4	1834:4	7	(
CONDITION	1834:5	1834:5	7	t2p -> pdf_colorspace & T2P_CS_PALETTE
EXPR	1834:5	1834:27	8	t2p -> pdf_colorspace & T2P_CS_PALETTE
FIELD	1834:5	1834:10	9	t2p -> pdf_colorspace
LEAF_NODE	1834:5	1834:5	10	t2p
LEAF_NODE	1834:8	1834:8	10	->
LEAF_NODE	1834:10	1834:10	10	pdf_colorspace
LEAF_NODE	1834:25	1834:25	9	&
FIELD	1834:27	1834:27	9	T2P_CS_PALETTE
LEAF_NODE	1834:27	1834:27	10	T2P_CS_PALETTE
LEAF_NODE	1834:41	1834:41	7	)
STATEMENTS	1834:42	1838:2	7	
LEAF_NODE	1834:42	1834:42	8	{
STATEMENTS	1835:3	1837:3	8	
EXPR_STATEMENT	1835:3	1835:46	9	t2p -> pdf_sample |= T2P_SAMPLE_REALIZE_PALETTE ;
EXPR	1835:3	1835:3	10	t2p -> pdf_sample |= T2P_SAMPLE_REALIZE_PALETTE
ASSIGN	1835:3	1835:20	11	t2p -> pdf_sample |= T2P_SAMPLE_REALIZE_PALETTE
LVAL	1835:3	1835:3	12	t2p -> pdf_sample
FIELD	1835:3	1835:8	13	t2p -> pdf_sample
LEAF_NODE	1835:3	1835:3	14	t2p
LEAF_NODE	1835:6	1835:6	14	->
LEAF_NODE	1835:8	1835:8	14	pdf_sample
ASSIGN_OP	1835:18	1835:18	12	|=
LEAF_NODE	1835:18	1835:18	13	|=
RVAL	1835:20	1835:20	12	T2P_SAMPLE_REALIZE_PALETTE
FIELD	1835:20	1835:20	13	T2P_SAMPLE_REALIZE_PALETTE
LEAF_NODE	1835:20	1835:20	14	T2P_SAMPLE_REALIZE_PALETTE
LEAF_NODE	1835:46	1835:46	10	;
EXPR_STATEMENT	1836:3	1836:40	9	t2p -> pdf_colorspace ^= T2P_CS_PALETTE ;
EXPR	1836:3	1836:3	10	t2p -> pdf_colorspace ^= T2P_CS_PALETTE
ASSIGN	1836:3	1836:26	11	t2p -> pdf_colorspace ^= T2P_CS_PALETTE
LVAL	1836:3	1836:3	12	t2p -> pdf_colorspace
FIELD	1836:3	1836:8	13	t2p -> pdf_colorspace
LEAF_NODE	1836:3	1836:3	14	t2p
LEAF_NODE	1836:6	1836:6	14	->
LEAF_NODE	1836:8	1836:8	14	pdf_colorspace
ASSIGN_OP	1836:23	1836:23	12	^=
LEAF_NODE	1836:23	1836:23	13	^=
RVAL	1836:26	1836:26	12	T2P_CS_PALETTE
FIELD	1836:26	1836:26	13	T2P_CS_PALETTE
LEAF_NODE	1836:26	1836:26	14	T2P_CS_PALETTE
LEAF_NODE	1836:40	1836:40	10	;
EXPR_STATEMENT	1837:3	1837:46	9	t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra -- ;
EXPR	1837:3	1837:3	10	t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra --
FIELD	1837:3	1837:44	11	t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra --
LEAF_NODE	1837:3	1837:3	12	t2p
LEAF_NODE	1837:6	1837:6	12	->
LEAF_NODE	1837:8	1837:8	12	tiff_pages
LEAF_NODE	1837:18	1837:18	12	[
EXPR	1837:19	1837:19	12	t2p -> pdf_page
FIELD	1837:19	1837:24	13	t2p -> pdf_page
LEAF_NODE	1837:19	1837:19	14	t2p
LEAF_NODE	1837:22	1837:22	14	->
LEAF_NODE	1837:24	1837:24	14	pdf_page
LEAF_NODE	1837:32	1837:32	12	]
LEAF_NODE	1837:33	1837:33	12	.
LEAF_NODE	1837:34	1837:34	12	page_extra
LEAF_NODE	1837:44	1837:44	12	--
LEAF_NODE	1837:46	1837:46	10	;
LEAF_NODE	1838:2	1838:2	8	}
LEAF_NODE	1839:1	1839:1	5	}
SELECTION	1840:1	1840:44	3	
KEYWORD	1840:1	1840:1	4	if
LEAF_NODE	1840:1	1840:1	5	if
LEAF_NODE	1840:3	1840:3	4	(
CONDITION	1840:4	1840:4	4	t2p -> tiff_compression == COMPRESSION_JPEG
EXPR	1840:4	1840:27	5	t2p -> tiff_compression == COMPRESSION_JPEG
FIELD	1840:4	1840:9	6	t2p -> tiff_compression
LEAF_NODE	1840:4	1840:4	7	t2p
LEAF_NODE	1840:7	1840:7	7	->
LEAF_NODE	1840:9	1840:9	7	tiff_compression
EQ_OPERATOR	1840:25	1840:25	6	==
LEAF_NODE	1840:25	1840:25	7	==
FIELD	1840:27	1840:27	6	COMPRESSION_JPEG
LEAF_NODE	1840:27	1840:27	7	COMPRESSION_JPEG
LEAF_NODE	1840:43	1840:43	4	)
STATEMENTS	1840:44	1849:1	4	
LEAF_NODE	1840:44	1840:44	5	{
STATEMENTS	1841:2	1841:2	5	
SELECTION	1841:2	1841:45	6	
KEYWORD	1841:2	1841:2	7	if
LEAF_NODE	1841:2	1841:2	8	if
LEAF_NODE	1841:4	1841:4	7	(
CONDITION	1841:5	1841:5	7	t2p -> tiff_planar == PLANARCONFIG_SEPARATE
EXPR	1841:5	1841:23	8	t2p -> tiff_planar == PLANARCONFIG_SEPARATE
FIELD	1841:5	1841:10	9	t2p -> tiff_planar
LEAF_NODE	1841:5	1841:5	10	t2p
LEAF_NODE	1841:8	1841:8	10	->
LEAF_NODE	1841:10	1841:10	10	tiff_planar
EQ_OPERATOR	1841:21	1841:21	9	==
LEAF_NODE	1841:21	1841:21	10	==
FIELD	1841:23	1841:23	9	PLANARCONFIG_SEPARATE
LEAF_NODE	1841:23	1841:23	10	PLANARCONFIG_SEPARATE
LEAF_NODE	1841:44	1841:44	7	)
STATEMENTS	1841:45	1848:2	7	
LEAF_NODE	1841:45	1841:45	8	{
STATEMENTS	1842:3	1847:3	8	
EXPR_STATEMENT	1842:3	1845:24	9	TIFFError ( TIFF2PDF_MODULE , "No support for %s with JPEG compression and separated planar configuration" , TIFFFileName ( input ) ) ;
EXPR	1842:3	1842:3	10	TIFFError ( TIFF2PDF_MODULE , "No support for %s with JPEG compression and separated planar configuration" , TIFFFileName ( input ) )
FUNCTION_CALL	1842:3	1845:23	11	TIFFError ( TIFF2PDF_MODULE , "No support for %s with JPEG compression and separated planar configuration" , TIFFFileName ( input ) )
CALLEE	1842:3	1842:3	12	TIFFError
LEAF_NODE	1842:3	1842:3	13	TIFFError
LEAF_NODE	1842:12	1842:12	12	(
ARGUMENT	1843:4	1843:4	12	TIFF2PDF_MODULE
FIELD	1843:4	1843:4	13	TIFF2PDF_MODULE
LEAF_NODE	1843:4	1843:4	14	TIFF2PDF_MODULE
LEAF_NODE	1843:19	1843:19	12	,
ARGUMENT	1844:4	1844:4	12	"No support for %s with JPEG compression and separated planar configuration"
FIELD	1844:4	1844:4	13	"No support for %s with JPEG compression and separated planar configuration"
LEAF_NODE	1844:4	1844:4	14	"No support for %s with JPEG compression and separated planar configuration"
LEAF_NODE	1844:80	1844:80	12	,
ARGUMENT	1845:4	1845:4	12	TIFFFileName ( input )
FUNCTION_CALL	1845:4	1845:22	13	TIFFFileName ( input )
CALLEE	1845:4	1845:4	14	TIFFFileName
LEAF_NODE	1845:4	1845:4	15	TIFFFileName
LEAF_NODE	1845:16	1845:16	14	(
ARGUMENT	1845:17	1845:17	14	input
FIELD	1845:17	1845:17	15	input
LEAF_NODE	1845:17	1845:17	16	input
LEAF_NODE	1845:22	1845:22	14	)
LEAF_NODE	1845:23	1845:23	12	)
LEAF_NODE	1845:24	1845:24	10	;
EXPR_STATEMENT	1846:4	1846:32	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1846:4	1846:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1846:4	1846:19	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1846:4	1846:4	12	t2p -> t2p_error
FIELD	1846:4	1846:9	13	t2p -> t2p_error
LEAF_NODE	1846:4	1846:4	14	t2p
LEAF_NODE	1846:7	1846:7	14	->
LEAF_NODE	1846:9	1846:9	14	t2p_error
ASSIGN_OP	1846:18	1846:18	12	=
LEAF_NODE	1846:18	1846:18	13	=
RVAL	1846:19	1846:19	12	T2P_ERR_ERROR
FIELD	1846:19	1846:19	13	T2P_ERR_ERROR
LEAF_NODE	1846:19	1846:19	14	T2P_ERR_ERROR
LEAF_NODE	1846:32	1846:32	10	;
JUMP_STATEMENT	1847:3	1847:9	9	return DESTINATION ;
KEYWORD	1847:3	1847:3	10	return
LEAF_NODE	1847:3	1847:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1847:9	1847:9	10	;
LEAF_NODE	1848:2	1848:2	8	}
LEAF_NODE	1849:1	1849:1	5	}
SELECTION	1852:1	1852:45	3	
KEYWORD	1852:1	1852:1	4	if
LEAF_NODE	1852:1	1852:1	5	if
LEAF_NODE	1852:3	1852:3	4	(
CONDITION	1852:4	1852:4	4	t2p -> tiff_compression == COMPRESSION_OJPEG
EXPR	1852:4	1852:27	5	t2p -> tiff_compression == COMPRESSION_OJPEG
FIELD	1852:4	1852:9	6	t2p -> tiff_compression
LEAF_NODE	1852:4	1852:4	7	t2p
LEAF_NODE	1852:7	1852:7	7	->
LEAF_NODE	1852:9	1852:9	7	tiff_compression
EQ_OPERATOR	1852:25	1852:25	6	==
LEAF_NODE	1852:25	1852:25	7	==
FIELD	1852:27	1852:27	6	COMPRESSION_OJPEG
LEAF_NODE	1852:27	1852:27	7	COMPRESSION_OJPEG
LEAF_NODE	1852:44	1852:44	4	)
STATEMENTS	1852:45	1861:1	4	
LEAF_NODE	1852:45	1852:45	5	{
STATEMENTS	1853:2	1853:2	5	
SELECTION	1853:2	1853:45	6	
KEYWORD	1853:2	1853:2	7	if
LEAF_NODE	1853:2	1853:2	8	if
LEAF_NODE	1853:4	1853:4	7	(
CONDITION	1853:5	1853:5	7	t2p -> tiff_planar == PLANARCONFIG_SEPARATE
EXPR	1853:5	1853:23	8	t2p -> tiff_planar == PLANARCONFIG_SEPARATE
FIELD	1853:5	1853:10	9	t2p -> tiff_planar
LEAF_NODE	1853:5	1853:5	10	t2p
LEAF_NODE	1853:8	1853:8	10	->
LEAF_NODE	1853:10	1853:10	10	tiff_planar
EQ_OPERATOR	1853:21	1853:21	9	==
LEAF_NODE	1853:21	1853:21	10	==
FIELD	1853:23	1853:23	9	PLANARCONFIG_SEPARATE
LEAF_NODE	1853:23	1853:23	10	PLANARCONFIG_SEPARATE
LEAF_NODE	1853:44	1853:44	7	)
STATEMENTS	1853:45	1860:2	7	
LEAF_NODE	1853:45	1853:45	8	{
STATEMENTS	1854:3	1859:3	8	
EXPR_STATEMENT	1854:3	1857:24	9	TIFFError ( TIFF2PDF_MODULE , "No support for %s with OJPEG compression and separated planar configuration" , TIFFFileName ( input ) ) ;
EXPR	1854:3	1854:3	10	TIFFError ( TIFF2PDF_MODULE , "No support for %s with OJPEG compression and separated planar configuration" , TIFFFileName ( input ) )
FUNCTION_CALL	1854:3	1857:23	11	TIFFError ( TIFF2PDF_MODULE , "No support for %s with OJPEG compression and separated planar configuration" , TIFFFileName ( input ) )
CALLEE	1854:3	1854:3	12	TIFFError
LEAF_NODE	1854:3	1854:3	13	TIFFError
LEAF_NODE	1854:12	1854:12	12	(
ARGUMENT	1855:4	1855:4	12	TIFF2PDF_MODULE
FIELD	1855:4	1855:4	13	TIFF2PDF_MODULE
LEAF_NODE	1855:4	1855:4	14	TIFF2PDF_MODULE
LEAF_NODE	1855:19	1855:19	12	,
ARGUMENT	1856:4	1856:4	12	"No support for %s with OJPEG compression and separated planar configuration"
FIELD	1856:4	1856:4	13	"No support for %s with OJPEG compression and separated planar configuration"
LEAF_NODE	1856:4	1856:4	14	"No support for %s with OJPEG compression and separated planar configuration"
LEAF_NODE	1856:81	1856:81	12	,
ARGUMENT	1857:4	1857:4	12	TIFFFileName ( input )
FUNCTION_CALL	1857:4	1857:22	13	TIFFFileName ( input )
CALLEE	1857:4	1857:4	14	TIFFFileName
LEAF_NODE	1857:4	1857:4	15	TIFFFileName
LEAF_NODE	1857:16	1857:16	14	(
ARGUMENT	1857:17	1857:17	14	input
FIELD	1857:17	1857:17	15	input
LEAF_NODE	1857:17	1857:17	16	input
LEAF_NODE	1857:22	1857:22	14	)
LEAF_NODE	1857:23	1857:23	12	)
LEAF_NODE	1857:24	1857:24	10	;
EXPR_STATEMENT	1858:4	1858:32	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1858:4	1858:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1858:4	1858:19	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1858:4	1858:4	12	t2p -> t2p_error
FIELD	1858:4	1858:9	13	t2p -> t2p_error
LEAF_NODE	1858:4	1858:4	14	t2p
LEAF_NODE	1858:7	1858:7	14	->
LEAF_NODE	1858:9	1858:9	14	t2p_error
ASSIGN_OP	1858:18	1858:18	12	=
LEAF_NODE	1858:18	1858:18	13	=
RVAL	1858:19	1858:19	12	T2P_ERR_ERROR
FIELD	1858:19	1858:19	13	T2P_ERR_ERROR
LEAF_NODE	1858:19	1858:19	14	T2P_ERR_ERROR
LEAF_NODE	1858:32	1858:32	10	;
JUMP_STATEMENT	1859:3	1859:9	9	return DESTINATION ;
KEYWORD	1859:3	1859:3	10	return
LEAF_NODE	1859:3	1859:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1859:9	1859:9	10	;
LEAF_NODE	1860:2	1860:2	8	}
LEAF_NODE	1861:1	1861:1	5	}
SELECTION	1864:1	1864:49	3	
KEYWORD	1864:1	1864:1	4	if
LEAF_NODE	1864:1	1864:1	5	if
LEAF_NODE	1864:3	1864:3	4	(
CONDITION	1864:4	1864:4	4	t2p -> pdf_sample & T2P_SAMPLE_REALIZE_PALETTE
EXPR	1864:4	1864:22	5	t2p -> pdf_sample & T2P_SAMPLE_REALIZE_PALETTE
FIELD	1864:4	1864:9	6	t2p -> pdf_sample
LEAF_NODE	1864:4	1864:4	7	t2p
LEAF_NODE	1864:7	1864:7	7	->
LEAF_NODE	1864:9	1864:9	7	pdf_sample
LEAF_NODE	1864:20	1864:20	6	&
FIELD	1864:22	1864:22	6	T2P_SAMPLE_REALIZE_PALETTE
LEAF_NODE	1864:22	1864:22	7	T2P_SAMPLE_REALIZE_PALETTE
LEAF_NODE	1864:48	1864:48	4	)
STATEMENTS	1864:49	1872:1	4	
LEAF_NODE	1864:49	1864:49	5	{
STATEMENTS	1865:2	1868:4	5	
SELECTION	1865:2	1865:39	6	
KEYWORD	1865:2	1865:2	7	if
LEAF_NODE	1865:2	1865:2	8	if
LEAF_NODE	1865:4	1865:4	7	(
CONDITION	1865:5	1865:5	7	t2p -> pdf_colorspace & T2P_CS_CMYK
EXPR	1865:5	1865:27	8	t2p -> pdf_colorspace & T2P_CS_CMYK
FIELD	1865:5	1865:10	9	t2p -> pdf_colorspace
LEAF_NODE	1865:5	1865:5	10	t2p
LEAF_NODE	1865:8	1865:8	10	->
LEAF_NODE	1865:10	1865:10	10	pdf_colorspace
LEAF_NODE	1865:25	1865:25	9	&
FIELD	1865:27	1865:27	9	T2P_CS_CMYK
LEAF_NODE	1865:27	1865:27	10	T2P_CS_CMYK
LEAF_NODE	1865:38	1865:38	7	)
STATEMENTS	1865:39	1868:2	7	
LEAF_NODE	1865:39	1865:39	8	{
STATEMENTS	1866:3	1867:3	8	
EXPR_STATEMENT	1866:3	1866:30	9	t2p -> tiff_samplesperpixel = 4 ;
EXPR	1866:3	1866:3	10	t2p -> tiff_samplesperpixel = 4
ASSIGN	1866:3	1866:29	11	t2p -> tiff_samplesperpixel = 4
LVAL	1866:3	1866:3	12	t2p -> tiff_samplesperpixel
FIELD	1866:3	1866:8	13	t2p -> tiff_samplesperpixel
LEAF_NODE	1866:3	1866:3	14	t2p
LEAF_NODE	1866:6	1866:6	14	->
LEAF_NODE	1866:8	1866:8	14	tiff_samplesperpixel
ASSIGN_OP	1866:28	1866:28	12	=
LEAF_NODE	1866:28	1866:28	13	=
RVAL	1866:29	1866:29	12	4
FIELD	1866:29	1866:29	13	4
LEAF_NODE	1866:29	1866:29	14	4
LEAF_NODE	1866:30	1866:30	10	;
EXPR_STATEMENT	1867:3	1867:46	9	t2p -> tiff_photometric = PHOTOMETRIC_SEPARATED ;
EXPR	1867:3	1867:3	10	t2p -> tiff_photometric = PHOTOMETRIC_SEPARATED
ASSIGN	1867:3	1867:25	11	t2p -> tiff_photometric = PHOTOMETRIC_SEPARATED
LVAL	1867:3	1867:3	12	t2p -> tiff_photometric
FIELD	1867:3	1867:8	13	t2p -> tiff_photometric
LEAF_NODE	1867:3	1867:3	14	t2p
LEAF_NODE	1867:6	1867:6	14	->
LEAF_NODE	1867:8	1867:8	14	tiff_photometric
ASSIGN_OP	1867:24	1867:24	12	=
LEAF_NODE	1867:24	1867:24	13	=
RVAL	1867:25	1867:25	12	PHOTOMETRIC_SEPARATED
FIELD	1867:25	1867:25	13	PHOTOMETRIC_SEPARATED
LEAF_NODE	1867:25	1867:25	14	PHOTOMETRIC_SEPARATED
LEAF_NODE	1867:46	1867:46	10	;
LEAF_NODE	1868:2	1868:2	8	}
SELECTION	1868:4	1868:9	6	
KEYWORD	1868:4	1868:4	7	else
LEAF_NODE	1868:4	1868:4	8	else
STATEMENTS	1868:9	1871:2	7	
LEAF_NODE	1868:9	1868:9	8	{
STATEMENTS	1869:3	1870:3	8	
EXPR_STATEMENT	1869:3	1869:30	9	t2p -> tiff_samplesperpixel = 3 ;
EXPR	1869:3	1869:3	10	t2p -> tiff_samplesperpixel = 3
ASSIGN	1869:3	1869:29	11	t2p -> tiff_samplesperpixel = 3
LVAL	1869:3	1869:3	12	t2p -> tiff_samplesperpixel
FIELD	1869:3	1869:8	13	t2p -> tiff_samplesperpixel
LEAF_NODE	1869:3	1869:3	14	t2p
LEAF_NODE	1869:6	1869:6	14	->
LEAF_NODE	1869:8	1869:8	14	tiff_samplesperpixel
ASSIGN_OP	1869:28	1869:28	12	=
LEAF_NODE	1869:28	1869:28	13	=
RVAL	1869:29	1869:29	12	3
FIELD	1869:29	1869:29	13	3
LEAF_NODE	1869:29	1869:29	14	3
LEAF_NODE	1869:30	1869:30	10	;
EXPR_STATEMENT	1870:3	1870:40	9	t2p -> tiff_photometric = PHOTOMETRIC_RGB ;
EXPR	1870:3	1870:3	10	t2p -> tiff_photometric = PHOTOMETRIC_RGB
ASSIGN	1870:3	1870:25	11	t2p -> tiff_photometric = PHOTOMETRIC_RGB
LVAL	1870:3	1870:3	12	t2p -> tiff_photometric
FIELD	1870:3	1870:8	13	t2p -> tiff_photometric
LEAF_NODE	1870:3	1870:3	14	t2p
LEAF_NODE	1870:6	1870:6	14	->
LEAF_NODE	1870:8	1870:8	14	tiff_photometric
ASSIGN_OP	1870:24	1870:24	12	=
LEAF_NODE	1870:24	1870:24	13	=
RVAL	1870:25	1870:25	12	PHOTOMETRIC_RGB
FIELD	1870:25	1870:25	13	PHOTOMETRIC_RGB
LEAF_NODE	1870:25	1870:25	14	PHOTOMETRIC_RGB
LEAF_NODE	1870:40	1870:40	10	;
LEAF_NODE	1871:2	1871:2	8	}
LEAF_NODE	1872:1	1872:1	5	}
SELECTION	1874:1	1877:39	3	
KEYWORD	1874:1	1874:1	4	if
LEAF_NODE	1874:1	1874:1	5	if
LEAF_NODE	1874:4	1874:4	4	(
CONDITION	1874:5	1874:5	4	TIFFGetField ( input , TIFFTAG_TRANSFERFUNCTION , & ( t2p -> tiff_transferfunction [ 0 ] ) , & ( t2p -> tiff_transferfunction [ 1 ] ) , & ( t2p -> tiff_transferfunction [ 2 ] ) )
EXPR	1874:5	1874:5	5	TIFFGetField ( input , TIFFTAG_TRANSFERFUNCTION , & ( t2p -> tiff_transferfunction [ 0 ] ) , & ( t2p -> tiff_transferfunction [ 1 ] ) , & ( t2p -> tiff_transferfunction [ 2 ] ) )
FUNCTION_CALL	1874:5	1877:36	6	TIFFGetField ( input , TIFFTAG_TRANSFERFUNCTION , & ( t2p -> tiff_transferfunction [ 0 ] ) , & ( t2p -> tiff_transferfunction [ 1 ] ) , & ( t2p -> tiff_transferfunction [ 2 ] ) )
CALLEE	1874:5	1874:5	7	TIFFGetField
LEAF_NODE	1874:5	1874:5	8	TIFFGetField
LEAF_NODE	1874:17	1874:17	7	(
ARGUMENT	1874:18	1874:18	7	input
FIELD	1874:18	1874:18	8	input
LEAF_NODE	1874:18	1874:18	9	input
LEAF_NODE	1874:23	1874:23	7	,
ARGUMENT	1874:25	1874:25	7	TIFFTAG_TRANSFERFUNCTION
FIELD	1874:25	1874:25	8	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	1874:25	1874:25	9	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	1874:49	1874:49	7	,
ARGUMENT	1875:4	1875:4	7	& ( t2p -> tiff_transferfunction [ 0 ] )
UNARY_EXPR	1875:4	1875:35	8	& ( t2p -> tiff_transferfunction [ 0 ] )
UNARY_OPERATOR	1875:4	1875:4	9	&
LEAF_NODE	1875:4	1875:4	10	&
LEAF_NODE	1875:5	1875:5	9	(
FIELD	1875:6	1875:34	9	t2p -> tiff_transferfunction [ 0 ]
LEAF_NODE	1875:6	1875:6	10	t2p
LEAF_NODE	1875:9	1875:9	10	->
LEAF_NODE	1875:11	1875:11	10	tiff_transferfunction
LEAF_NODE	1875:32	1875:32	10	[
EXPR	1875:33	1875:33	10	0
FIELD	1875:33	1875:33	11	0
LEAF_NODE	1875:33	1875:33	12	0
LEAF_NODE	1875:34	1875:34	10	]
LEAF_NODE	1875:35	1875:35	9	)
LEAF_NODE	1875:36	1875:36	7	,
ARGUMENT	1876:4	1876:4	7	& ( t2p -> tiff_transferfunction [ 1 ] )
UNARY_EXPR	1876:4	1876:35	8	& ( t2p -> tiff_transferfunction [ 1 ] )
UNARY_OPERATOR	1876:4	1876:4	9	&
LEAF_NODE	1876:4	1876:4	10	&
LEAF_NODE	1876:5	1876:5	9	(
FIELD	1876:6	1876:34	9	t2p -> tiff_transferfunction [ 1 ]
LEAF_NODE	1876:6	1876:6	10	t2p
LEAF_NODE	1876:9	1876:9	10	->
LEAF_NODE	1876:11	1876:11	10	tiff_transferfunction
LEAF_NODE	1876:32	1876:32	10	[
EXPR	1876:33	1876:33	10	1
FIELD	1876:33	1876:33	11	1
LEAF_NODE	1876:33	1876:33	12	1
LEAF_NODE	1876:34	1876:34	10	]
LEAF_NODE	1876:35	1876:35	9	)
LEAF_NODE	1876:36	1876:36	7	,
ARGUMENT	1877:4	1877:4	7	& ( t2p -> tiff_transferfunction [ 2 ] )
UNARY_EXPR	1877:4	1877:35	8	& ( t2p -> tiff_transferfunction [ 2 ] )
UNARY_OPERATOR	1877:4	1877:4	9	&
LEAF_NODE	1877:4	1877:4	10	&
LEAF_NODE	1877:5	1877:5	9	(
FIELD	1877:6	1877:34	9	t2p -> tiff_transferfunction [ 2 ]
LEAF_NODE	1877:6	1877:6	10	t2p
LEAF_NODE	1877:9	1877:9	10	->
LEAF_NODE	1877:11	1877:11	10	tiff_transferfunction
LEAF_NODE	1877:32	1877:32	10	[
EXPR	1877:33	1877:33	10	2
FIELD	1877:33	1877:33	11	2
LEAF_NODE	1877:33	1877:33	12	2
LEAF_NODE	1877:34	1877:34	10	]
LEAF_NODE	1877:35	1877:35	9	)
LEAF_NODE	1877:36	1877:36	7	)
LEAF_NODE	1877:37	1877:37	4	)
STATEMENTS	1877:39	1885:1	4	
LEAF_NODE	1877:39	1877:39	5	{
STATEMENTS	1878:2	1882:4	5	
SELECTION	1878:2	1880:20	6	
KEYWORD	1878:2	1878:2	7	if
LEAF_NODE	1878:2	1878:2	8	if
LEAF_NODE	1878:4	1878:4	7	(
CONDITION	1878:5	1878:5	7	( t2p -> tiff_transferfunction [ 1 ] != ( uint16 * ) NULL ) && ( t2p -> tiff_transferfunction [ 2 ] != ( uint16 * ) NULL )
EXPR	1878:5	1878:5	8	( t2p -> tiff_transferfunction [ 1 ] != ( uint16 * ) NULL ) && ( t2p -> tiff_transferfunction [ 2 ] != ( uint16 * ) NULL )
AND	1878:5	1879:19	9	( t2p -> tiff_transferfunction [ 1 ] != ( uint16 * ) NULL ) && ( t2p -> tiff_transferfunction [ 2 ] != ( uint16 * ) NULL )
EXPR	1878:5	1878:53	10	( t2p -> tiff_transferfunction [ 1 ] != ( uint16 * ) NULL )
LEAF_NODE	1878:5	1878:5	11	(
FIELD	1878:6	1878:34	11	t2p -> tiff_transferfunction [ 1 ]
LEAF_NODE	1878:6	1878:6	12	t2p
LEAF_NODE	1878:9	1878:9	12	->
LEAF_NODE	1878:11	1878:11	12	tiff_transferfunction
LEAF_NODE	1878:32	1878:32	12	[
EXPR	1878:33	1878:33	12	1
FIELD	1878:33	1878:33	13	1
LEAF_NODE	1878:33	1878:33	14	1
LEAF_NODE	1878:34	1878:34	12	]
EQ_OPERATOR	1878:36	1878:36	11	!=
LEAF_NODE	1878:36	1878:36	12	!=
LEAF_NODE	1878:39	1878:39	11	(
TYPE_NAME	1878:40	1878:40	11	uint16
LEAF_NODE	1878:40	1878:40	12	uint16
LEAF_NODE	1878:46	1878:46	11	*
LEAF_NODE	1878:47	1878:47	11	)
FIELD	1878:49	1878:49	11	NULL
LEAF_NODE	1878:49	1878:49	12	NULL
LEAF_NODE	1878:53	1878:53	11	)
LEAF_NODE	1878:55	1878:55	10	&&
EXPR	1879:19	1879:67	10	( t2p -> tiff_transferfunction [ 2 ] != ( uint16 * ) NULL )
LEAF_NODE	1879:19	1879:19	11	(
FIELD	1879:20	1879:48	11	t2p -> tiff_transferfunction [ 2 ]
LEAF_NODE	1879:20	1879:20	12	t2p
LEAF_NODE	1879:23	1879:23	12	->
LEAF_NODE	1879:25	1879:25	12	tiff_transferfunction
LEAF_NODE	1879:46	1879:46	12	[
EXPR	1879:47	1879:47	12	2
FIELD	1879:47	1879:47	13	2
LEAF_NODE	1879:47	1879:47	14	2
LEAF_NODE	1879:48	1879:48	12	]
EQ_OPERATOR	1879:50	1879:50	11	!=
LEAF_NODE	1879:50	1879:50	12	!=
LEAF_NODE	1879:53	1879:53	11	(
TYPE_NAME	1879:54	1879:54	11	uint16
LEAF_NODE	1879:54	1879:54	12	uint16
LEAF_NODE	1879:60	1879:60	11	*
LEAF_NODE	1879:61	1879:61	11	)
FIELD	1879:63	1879:63	11	NULL
LEAF_NODE	1879:63	1879:63	12	NULL
LEAF_NODE	1879:67	1879:67	11	)
LEAF_NODE	1880:18	1880:18	7	)
STATEMENTS	1880:20	1882:2	7	
LEAF_NODE	1880:20	1880:20	8	{
STATEMENTS	1881:3	1881:3	8	
EXPR_STATEMENT	1881:3	1881:36	9	t2p -> tiff_transferfunctioncount = 3 ;
EXPR	1881:3	1881:3	10	t2p -> tiff_transferfunctioncount = 3
ASSIGN	1881:3	1881:35	11	t2p -> tiff_transferfunctioncount = 3
LVAL	1881:3	1881:3	12	t2p -> tiff_transferfunctioncount
FIELD	1881:3	1881:8	13	t2p -> tiff_transferfunctioncount
LEAF_NODE	1881:3	1881:3	14	t2p
LEAF_NODE	1881:6	1881:6	14	->
LEAF_NODE	1881:8	1881:8	14	tiff_transferfunctioncount
ASSIGN_OP	1881:34	1881:34	12	=
LEAF_NODE	1881:34	1881:34	13	=
RVAL	1881:35	1881:35	12	3
FIELD	1881:35	1881:35	13	3
LEAF_NODE	1881:35	1881:35	14	3
LEAF_NODE	1881:36	1881:36	10	;
LEAF_NODE	1882:2	1882:2	8	}
SELECTION	1882:4	1882:9	6	
KEYWORD	1882:4	1882:4	7	else
LEAF_NODE	1882:4	1882:4	8	else
STATEMENTS	1882:9	1884:2	7	
LEAF_NODE	1882:9	1882:9	8	{
STATEMENTS	1883:3	1883:3	8	
EXPR_STATEMENT	1883:3	1883:36	9	t2p -> tiff_transferfunctioncount = 1 ;
EXPR	1883:3	1883:3	10	t2p -> tiff_transferfunctioncount = 1
ASSIGN	1883:3	1883:35	11	t2p -> tiff_transferfunctioncount = 1
LVAL	1883:3	1883:3	12	t2p -> tiff_transferfunctioncount
FIELD	1883:3	1883:8	13	t2p -> tiff_transferfunctioncount
LEAF_NODE	1883:3	1883:3	14	t2p
LEAF_NODE	1883:6	1883:6	14	->
LEAF_NODE	1883:8	1883:8	14	tiff_transferfunctioncount
ASSIGN_OP	1883:34	1883:34	12	=
LEAF_NODE	1883:34	1883:34	13	=
RVAL	1883:35	1883:35	12	1
FIELD	1883:35	1883:35	13	1
LEAF_NODE	1883:35	1883:35	14	1
LEAF_NODE	1883:36	1883:36	10	;
LEAF_NODE	1884:2	1884:2	8	}
LEAF_NODE	1885:1	1885:1	5	}
SELECTION	1885:3	1885:8	3	
KEYWORD	1885:3	1885:3	4	else
LEAF_NODE	1885:3	1885:3	5	else
STATEMENTS	1885:8	1887:1	4	
LEAF_NODE	1885:8	1885:8	5	{
STATEMENTS	1886:2	1886:2	5	
EXPR_STATEMENT	1886:2	1886:35	6	t2p -> tiff_transferfunctioncount = 0 ;
EXPR	1886:2	1886:2	7	t2p -> tiff_transferfunctioncount = 0
ASSIGN	1886:2	1886:34	8	t2p -> tiff_transferfunctioncount = 0
LVAL	1886:2	1886:2	9	t2p -> tiff_transferfunctioncount
FIELD	1886:2	1886:7	10	t2p -> tiff_transferfunctioncount
LEAF_NODE	1886:2	1886:2	11	t2p
LEAF_NODE	1886:5	1886:5	11	->
LEAF_NODE	1886:7	1886:7	11	tiff_transferfunctioncount
ASSIGN_OP	1886:33	1886:33	9	=
LEAF_NODE	1886:33	1886:33	10	=
RVAL	1886:34	1886:34	9	0
FIELD	1886:34	1886:34	10	0
LEAF_NODE	1886:34	1886:34	11	0
LEAF_NODE	1886:35	1886:35	7	;
LEAF_NODE	1887:1	1887:1	5	}
SELECTION	1888:1	1888:57	3	
KEYWORD	1888:1	1888:1	4	if
LEAF_NODE	1888:1	1888:1	5	if
LEAF_NODE	1888:3	1888:3	4	(
CONDITION	1888:4	1888:4	4	TIFFGetField ( input , TIFFTAG_WHITEPOINT , & xfloatp ) != 0
EXPR	1888:4	1888:55	5	TIFFGetField ( input , TIFFTAG_WHITEPOINT , & xfloatp ) != 0
FUNCTION_CALL	1888:4	1888:52	6	TIFFGetField ( input , TIFFTAG_WHITEPOINT , & xfloatp )
CALLEE	1888:4	1888:4	7	TIFFGetField
LEAF_NODE	1888:4	1888:4	8	TIFFGetField
LEAF_NODE	1888:16	1888:16	7	(
ARGUMENT	1888:17	1888:17	7	input
FIELD	1888:17	1888:17	8	input
LEAF_NODE	1888:17	1888:17	9	input
LEAF_NODE	1888:22	1888:22	7	,
ARGUMENT	1888:24	1888:24	7	TIFFTAG_WHITEPOINT
FIELD	1888:24	1888:24	8	TIFFTAG_WHITEPOINT
LEAF_NODE	1888:24	1888:24	9	TIFFTAG_WHITEPOINT
LEAF_NODE	1888:42	1888:42	7	,
ARGUMENT	1888:44	1888:44	7	& xfloatp
UNARY_EXPR	1888:44	1888:45	8	& xfloatp
UNARY_OPERATOR	1888:44	1888:44	9	&
LEAF_NODE	1888:44	1888:44	10	&
FIELD	1888:45	1888:45	9	xfloatp
LEAF_NODE	1888:45	1888:45	10	xfloatp
LEAF_NODE	1888:52	1888:52	7	)
EQ_OPERATOR	1888:53	1888:53	6	!=
LEAF_NODE	1888:53	1888:53	7	!=
FIELD	1888:55	1888:55	6	0
LEAF_NODE	1888:55	1888:55	7	0
LEAF_NODE	1888:56	1888:56	4	)
STATEMENTS	1888:57	1897:1	4	
LEAF_NODE	1888:57	1888:57	5	{
STATEMENTS	1889:2	1894:2	5	
EXPR_STATEMENT	1889:2	1889:45	6	t2p -> tiff_whitechromaticities [ 0 ] = xfloatp [ 0 ] ;
EXPR	1889:2	1889:2	7	t2p -> tiff_whitechromaticities [ 0 ] = xfloatp [ 0 ]
ASSIGN	1889:2	1889:35	8	t2p -> tiff_whitechromaticities [ 0 ] = xfloatp [ 0 ]
LVAL	1889:2	1889:2	9	t2p -> tiff_whitechromaticities [ 0 ]
FIELD	1889:2	1889:33	10	t2p -> tiff_whitechromaticities [ 0 ]
LEAF_NODE	1889:2	1889:2	11	t2p
LEAF_NODE	1889:5	1889:5	11	->
LEAF_NODE	1889:7	1889:7	11	tiff_whitechromaticities
LEAF_NODE	1889:31	1889:31	11	[
EXPR	1889:32	1889:32	11	0
FIELD	1889:32	1889:32	12	0
LEAF_NODE	1889:32	1889:32	13	0
LEAF_NODE	1889:33	1889:33	11	]
ASSIGN_OP	1889:34	1889:34	9	=
LEAF_NODE	1889:34	1889:34	10	=
RVAL	1889:35	1889:35	9	xfloatp [ 0 ]
FIELD	1889:35	1889:44	10	xfloatp [ 0 ]
LEAF_NODE	1889:35	1889:35	11	xfloatp
LEAF_NODE	1889:42	1889:42	11	[
EXPR	1889:43	1889:43	11	0
FIELD	1889:43	1889:43	12	0
LEAF_NODE	1889:43	1889:43	13	0
LEAF_NODE	1889:44	1889:44	11	]
LEAF_NODE	1889:45	1889:45	7	;
EXPR_STATEMENT	1890:2	1890:45	6	t2p -> tiff_whitechromaticities [ 1 ] = xfloatp [ 1 ] ;
EXPR	1890:2	1890:2	7	t2p -> tiff_whitechromaticities [ 1 ] = xfloatp [ 1 ]
ASSIGN	1890:2	1890:35	8	t2p -> tiff_whitechromaticities [ 1 ] = xfloatp [ 1 ]
LVAL	1890:2	1890:2	9	t2p -> tiff_whitechromaticities [ 1 ]
FIELD	1890:2	1890:33	10	t2p -> tiff_whitechromaticities [ 1 ]
LEAF_NODE	1890:2	1890:2	11	t2p
LEAF_NODE	1890:5	1890:5	11	->
LEAF_NODE	1890:7	1890:7	11	tiff_whitechromaticities
LEAF_NODE	1890:31	1890:31	11	[
EXPR	1890:32	1890:32	11	1
FIELD	1890:32	1890:32	12	1
LEAF_NODE	1890:32	1890:32	13	1
LEAF_NODE	1890:33	1890:33	11	]
ASSIGN_OP	1890:34	1890:34	9	=
LEAF_NODE	1890:34	1890:34	10	=
RVAL	1890:35	1890:35	9	xfloatp [ 1 ]
FIELD	1890:35	1890:44	10	xfloatp [ 1 ]
LEAF_NODE	1890:35	1890:35	11	xfloatp
LEAF_NODE	1890:42	1890:42	11	[
EXPR	1890:43	1890:43	11	1
FIELD	1890:43	1890:43	12	1
LEAF_NODE	1890:43	1890:43	13	1
LEAF_NODE	1890:44	1890:44	11	]
LEAF_NODE	1890:45	1890:45	7	;
SELECTION	1891:2	1891:39	6	
KEYWORD	1891:2	1891:2	7	if
LEAF_NODE	1891:2	1891:2	8	if
LEAF_NODE	1891:4	1891:4	7	(
CONDITION	1891:5	1891:5	7	t2p -> pdf_colorspace & T2P_CS_GRAY
EXPR	1891:5	1891:27	8	t2p -> pdf_colorspace & T2P_CS_GRAY
FIELD	1891:5	1891:10	9	t2p -> pdf_colorspace
LEAF_NODE	1891:5	1891:5	10	t2p
LEAF_NODE	1891:8	1891:8	10	->
LEAF_NODE	1891:10	1891:10	10	pdf_colorspace
LEAF_NODE	1891:25	1891:25	9	&
FIELD	1891:27	1891:27	9	T2P_CS_GRAY
LEAF_NODE	1891:27	1891:27	10	T2P_CS_GRAY
LEAF_NODE	1891:38	1891:38	7	)
STATEMENTS	1891:39	1893:2	7	
LEAF_NODE	1891:39	1891:39	8	{
STATEMENTS	1892:3	1892:3	8	
EXPR_STATEMENT	1892:3	1892:40	9	t2p -> pdf_colorspace |= T2P_CS_CALGRAY ;
EXPR	1892:3	1892:3	10	t2p -> pdf_colorspace |= T2P_CS_CALGRAY
ASSIGN	1892:3	1892:26	11	t2p -> pdf_colorspace |= T2P_CS_CALGRAY
LVAL	1892:3	1892:3	12	t2p -> pdf_colorspace
FIELD	1892:3	1892:8	13	t2p -> pdf_colorspace
LEAF_NODE	1892:3	1892:3	14	t2p
LEAF_NODE	1892:6	1892:6	14	->
LEAF_NODE	1892:8	1892:8	14	pdf_colorspace
ASSIGN_OP	1892:23	1892:23	12	|=
LEAF_NODE	1892:23	1892:23	13	|=
RVAL	1892:26	1892:26	12	T2P_CS_CALGRAY
FIELD	1892:26	1892:26	13	T2P_CS_CALGRAY
LEAF_NODE	1892:26	1892:26	14	T2P_CS_CALGRAY
LEAF_NODE	1892:40	1892:40	10	;
LEAF_NODE	1893:2	1893:2	8	}
SELECTION	1894:2	1894:38	6	
KEYWORD	1894:2	1894:2	7	if
LEAF_NODE	1894:2	1894:2	8	if
LEAF_NODE	1894:4	1894:4	7	(
CONDITION	1894:5	1894:5	7	t2p -> pdf_colorspace & T2P_CS_RGB
EXPR	1894:5	1894:27	8	t2p -> pdf_colorspace & T2P_CS_RGB
FIELD	1894:5	1894:10	9	t2p -> pdf_colorspace
LEAF_NODE	1894:5	1894:5	10	t2p
LEAF_NODE	1894:8	1894:8	10	->
LEAF_NODE	1894:10	1894:10	10	pdf_colorspace
LEAF_NODE	1894:25	1894:25	9	&
FIELD	1894:27	1894:27	9	T2P_CS_RGB
LEAF_NODE	1894:27	1894:27	10	T2P_CS_RGB
LEAF_NODE	1894:37	1894:37	7	)
STATEMENTS	1894:38	1896:2	7	
LEAF_NODE	1894:38	1894:38	8	{
STATEMENTS	1895:3	1895:3	8	
EXPR_STATEMENT	1895:3	1895:39	9	t2p -> pdf_colorspace |= T2P_CS_CALRGB ;
EXPR	1895:3	1895:3	10	t2p -> pdf_colorspace |= T2P_CS_CALRGB
ASSIGN	1895:3	1895:26	11	t2p -> pdf_colorspace |= T2P_CS_CALRGB
LVAL	1895:3	1895:3	12	t2p -> pdf_colorspace
FIELD	1895:3	1895:8	13	t2p -> pdf_colorspace
LEAF_NODE	1895:3	1895:3	14	t2p
LEAF_NODE	1895:6	1895:6	14	->
LEAF_NODE	1895:8	1895:8	14	pdf_colorspace
ASSIGN_OP	1895:23	1895:23	12	|=
LEAF_NODE	1895:23	1895:23	13	|=
RVAL	1895:26	1895:26	12	T2P_CS_CALRGB
FIELD	1895:26	1895:26	13	T2P_CS_CALRGB
LEAF_NODE	1895:26	1895:26	14	T2P_CS_CALRGB
LEAF_NODE	1895:39	1895:39	10	;
LEAF_NODE	1896:2	1896:2	8	}
LEAF_NODE	1897:1	1897:1	5	}
SELECTION	1898:1	1898:68	3	
KEYWORD	1898:1	1898:1	4	if
LEAF_NODE	1898:1	1898:1	5	if
LEAF_NODE	1898:3	1898:3	4	(
CONDITION	1898:4	1898:4	4	TIFFGetField ( input , TIFFTAG_PRIMARYCHROMATICITIES , & xfloatp ) != 0
EXPR	1898:4	1898:66	5	TIFFGetField ( input , TIFFTAG_PRIMARYCHROMATICITIES , & xfloatp ) != 0
FUNCTION_CALL	1898:4	1898:63	6	TIFFGetField ( input , TIFFTAG_PRIMARYCHROMATICITIES , & xfloatp )
CALLEE	1898:4	1898:4	7	TIFFGetField
LEAF_NODE	1898:4	1898:4	8	TIFFGetField
LEAF_NODE	1898:16	1898:16	7	(
ARGUMENT	1898:17	1898:17	7	input
FIELD	1898:17	1898:17	8	input
LEAF_NODE	1898:17	1898:17	9	input
LEAF_NODE	1898:22	1898:22	7	,
ARGUMENT	1898:24	1898:24	7	TIFFTAG_PRIMARYCHROMATICITIES
FIELD	1898:24	1898:24	8	TIFFTAG_PRIMARYCHROMATICITIES
LEAF_NODE	1898:24	1898:24	9	TIFFTAG_PRIMARYCHROMATICITIES
LEAF_NODE	1898:53	1898:53	7	,
ARGUMENT	1898:55	1898:55	7	& xfloatp
UNARY_EXPR	1898:55	1898:56	8	& xfloatp
UNARY_OPERATOR	1898:55	1898:55	9	&
LEAF_NODE	1898:55	1898:55	10	&
FIELD	1898:56	1898:56	9	xfloatp
LEAF_NODE	1898:56	1898:56	10	xfloatp
LEAF_NODE	1898:63	1898:63	7	)
EQ_OPERATOR	1898:64	1898:64	6	!=
LEAF_NODE	1898:64	1898:64	7	!=
FIELD	1898:66	1898:66	6	0
LEAF_NODE	1898:66	1898:66	7	0
LEAF_NODE	1898:67	1898:67	4	)
STATEMENTS	1898:68	1908:1	4	
LEAF_NODE	1898:68	1898:68	5	{
STATEMENTS	1899:2	1905:2	5	
EXPR_STATEMENT	1899:2	1899:47	6	t2p -> tiff_primarychromaticities [ 0 ] = xfloatp [ 0 ] ;
EXPR	1899:2	1899:2	7	t2p -> tiff_primarychromaticities [ 0 ] = xfloatp [ 0 ]
ASSIGN	1899:2	1899:37	8	t2p -> tiff_primarychromaticities [ 0 ] = xfloatp [ 0 ]
LVAL	1899:2	1899:2	9	t2p -> tiff_primarychromaticities [ 0 ]
FIELD	1899:2	1899:35	10	t2p -> tiff_primarychromaticities [ 0 ]
LEAF_NODE	1899:2	1899:2	11	t2p
LEAF_NODE	1899:5	1899:5	11	->
LEAF_NODE	1899:7	1899:7	11	tiff_primarychromaticities
LEAF_NODE	1899:33	1899:33	11	[
EXPR	1899:34	1899:34	11	0
FIELD	1899:34	1899:34	12	0
LEAF_NODE	1899:34	1899:34	13	0
LEAF_NODE	1899:35	1899:35	11	]
ASSIGN_OP	1899:36	1899:36	9	=
LEAF_NODE	1899:36	1899:36	10	=
RVAL	1899:37	1899:37	9	xfloatp [ 0 ]
FIELD	1899:37	1899:46	10	xfloatp [ 0 ]
LEAF_NODE	1899:37	1899:37	11	xfloatp
LEAF_NODE	1899:44	1899:44	11	[
EXPR	1899:45	1899:45	11	0
FIELD	1899:45	1899:45	12	0
LEAF_NODE	1899:45	1899:45	13	0
LEAF_NODE	1899:46	1899:46	11	]
LEAF_NODE	1899:47	1899:47	7	;
EXPR_STATEMENT	1900:2	1900:47	6	t2p -> tiff_primarychromaticities [ 1 ] = xfloatp [ 1 ] ;
EXPR	1900:2	1900:2	7	t2p -> tiff_primarychromaticities [ 1 ] = xfloatp [ 1 ]
ASSIGN	1900:2	1900:37	8	t2p -> tiff_primarychromaticities [ 1 ] = xfloatp [ 1 ]
LVAL	1900:2	1900:2	9	t2p -> tiff_primarychromaticities [ 1 ]
FIELD	1900:2	1900:35	10	t2p -> tiff_primarychromaticities [ 1 ]
LEAF_NODE	1900:2	1900:2	11	t2p
LEAF_NODE	1900:5	1900:5	11	->
LEAF_NODE	1900:7	1900:7	11	tiff_primarychromaticities
LEAF_NODE	1900:33	1900:33	11	[
EXPR	1900:34	1900:34	11	1
FIELD	1900:34	1900:34	12	1
LEAF_NODE	1900:34	1900:34	13	1
LEAF_NODE	1900:35	1900:35	11	]
ASSIGN_OP	1900:36	1900:36	9	=
LEAF_NODE	1900:36	1900:36	10	=
RVAL	1900:37	1900:37	9	xfloatp [ 1 ]
FIELD	1900:37	1900:46	10	xfloatp [ 1 ]
LEAF_NODE	1900:37	1900:37	11	xfloatp
LEAF_NODE	1900:44	1900:44	11	[
EXPR	1900:45	1900:45	11	1
FIELD	1900:45	1900:45	12	1
LEAF_NODE	1900:45	1900:45	13	1
LEAF_NODE	1900:46	1900:46	11	]
LEAF_NODE	1900:47	1900:47	7	;
EXPR_STATEMENT	1901:2	1901:47	6	t2p -> tiff_primarychromaticities [ 2 ] = xfloatp [ 2 ] ;
EXPR	1901:2	1901:2	7	t2p -> tiff_primarychromaticities [ 2 ] = xfloatp [ 2 ]
ASSIGN	1901:2	1901:37	8	t2p -> tiff_primarychromaticities [ 2 ] = xfloatp [ 2 ]
LVAL	1901:2	1901:2	9	t2p -> tiff_primarychromaticities [ 2 ]
FIELD	1901:2	1901:35	10	t2p -> tiff_primarychromaticities [ 2 ]
LEAF_NODE	1901:2	1901:2	11	t2p
LEAF_NODE	1901:5	1901:5	11	->
LEAF_NODE	1901:7	1901:7	11	tiff_primarychromaticities
LEAF_NODE	1901:33	1901:33	11	[
EXPR	1901:34	1901:34	11	2
FIELD	1901:34	1901:34	12	2
LEAF_NODE	1901:34	1901:34	13	2
LEAF_NODE	1901:35	1901:35	11	]
ASSIGN_OP	1901:36	1901:36	9	=
LEAF_NODE	1901:36	1901:36	10	=
RVAL	1901:37	1901:37	9	xfloatp [ 2 ]
FIELD	1901:37	1901:46	10	xfloatp [ 2 ]
LEAF_NODE	1901:37	1901:37	11	xfloatp
LEAF_NODE	1901:44	1901:44	11	[
EXPR	1901:45	1901:45	11	2
FIELD	1901:45	1901:45	12	2
LEAF_NODE	1901:45	1901:45	13	2
LEAF_NODE	1901:46	1901:46	11	]
LEAF_NODE	1901:47	1901:47	7	;
EXPR_STATEMENT	1902:2	1902:47	6	t2p -> tiff_primarychromaticities [ 3 ] = xfloatp [ 3 ] ;
EXPR	1902:2	1902:2	7	t2p -> tiff_primarychromaticities [ 3 ] = xfloatp [ 3 ]
ASSIGN	1902:2	1902:37	8	t2p -> tiff_primarychromaticities [ 3 ] = xfloatp [ 3 ]
LVAL	1902:2	1902:2	9	t2p -> tiff_primarychromaticities [ 3 ]
FIELD	1902:2	1902:35	10	t2p -> tiff_primarychromaticities [ 3 ]
LEAF_NODE	1902:2	1902:2	11	t2p
LEAF_NODE	1902:5	1902:5	11	->
LEAF_NODE	1902:7	1902:7	11	tiff_primarychromaticities
LEAF_NODE	1902:33	1902:33	11	[
EXPR	1902:34	1902:34	11	3
FIELD	1902:34	1902:34	12	3
LEAF_NODE	1902:34	1902:34	13	3
LEAF_NODE	1902:35	1902:35	11	]
ASSIGN_OP	1902:36	1902:36	9	=
LEAF_NODE	1902:36	1902:36	10	=
RVAL	1902:37	1902:37	9	xfloatp [ 3 ]
FIELD	1902:37	1902:46	10	xfloatp [ 3 ]
LEAF_NODE	1902:37	1902:37	11	xfloatp
LEAF_NODE	1902:44	1902:44	11	[
EXPR	1902:45	1902:45	11	3
FIELD	1902:45	1902:45	12	3
LEAF_NODE	1902:45	1902:45	13	3
LEAF_NODE	1902:46	1902:46	11	]
LEAF_NODE	1902:47	1902:47	7	;
EXPR_STATEMENT	1903:2	1903:47	6	t2p -> tiff_primarychromaticities [ 4 ] = xfloatp [ 4 ] ;
EXPR	1903:2	1903:2	7	t2p -> tiff_primarychromaticities [ 4 ] = xfloatp [ 4 ]
ASSIGN	1903:2	1903:37	8	t2p -> tiff_primarychromaticities [ 4 ] = xfloatp [ 4 ]
LVAL	1903:2	1903:2	9	t2p -> tiff_primarychromaticities [ 4 ]
FIELD	1903:2	1903:35	10	t2p -> tiff_primarychromaticities [ 4 ]
LEAF_NODE	1903:2	1903:2	11	t2p
LEAF_NODE	1903:5	1903:5	11	->
LEAF_NODE	1903:7	1903:7	11	tiff_primarychromaticities
LEAF_NODE	1903:33	1903:33	11	[
EXPR	1903:34	1903:34	11	4
FIELD	1903:34	1903:34	12	4
LEAF_NODE	1903:34	1903:34	13	4
LEAF_NODE	1903:35	1903:35	11	]
ASSIGN_OP	1903:36	1903:36	9	=
LEAF_NODE	1903:36	1903:36	10	=
RVAL	1903:37	1903:37	9	xfloatp [ 4 ]
FIELD	1903:37	1903:46	10	xfloatp [ 4 ]
LEAF_NODE	1903:37	1903:37	11	xfloatp
LEAF_NODE	1903:44	1903:44	11	[
EXPR	1903:45	1903:45	11	4
FIELD	1903:45	1903:45	12	4
LEAF_NODE	1903:45	1903:45	13	4
LEAF_NODE	1903:46	1903:46	11	]
LEAF_NODE	1903:47	1903:47	7	;
EXPR_STATEMENT	1904:2	1904:47	6	t2p -> tiff_primarychromaticities [ 5 ] = xfloatp [ 5 ] ;
EXPR	1904:2	1904:2	7	t2p -> tiff_primarychromaticities [ 5 ] = xfloatp [ 5 ]
ASSIGN	1904:2	1904:37	8	t2p -> tiff_primarychromaticities [ 5 ] = xfloatp [ 5 ]
LVAL	1904:2	1904:2	9	t2p -> tiff_primarychromaticities [ 5 ]
FIELD	1904:2	1904:35	10	t2p -> tiff_primarychromaticities [ 5 ]
LEAF_NODE	1904:2	1904:2	11	t2p
LEAF_NODE	1904:5	1904:5	11	->
LEAF_NODE	1904:7	1904:7	11	tiff_primarychromaticities
LEAF_NODE	1904:33	1904:33	11	[
EXPR	1904:34	1904:34	11	5
FIELD	1904:34	1904:34	12	5
LEAF_NODE	1904:34	1904:34	13	5
LEAF_NODE	1904:35	1904:35	11	]
ASSIGN_OP	1904:36	1904:36	9	=
LEAF_NODE	1904:36	1904:36	10	=
RVAL	1904:37	1904:37	9	xfloatp [ 5 ]
FIELD	1904:37	1904:46	10	xfloatp [ 5 ]
LEAF_NODE	1904:37	1904:37	11	xfloatp
LEAF_NODE	1904:44	1904:44	11	[
EXPR	1904:45	1904:45	11	5
FIELD	1904:45	1904:45	12	5
LEAF_NODE	1904:45	1904:45	13	5
LEAF_NODE	1904:46	1904:46	11	]
LEAF_NODE	1904:47	1904:47	7	;
SELECTION	1905:2	1905:38	6	
KEYWORD	1905:2	1905:2	7	if
LEAF_NODE	1905:2	1905:2	8	if
LEAF_NODE	1905:4	1905:4	7	(
CONDITION	1905:5	1905:5	7	t2p -> pdf_colorspace & T2P_CS_RGB
EXPR	1905:5	1905:27	8	t2p -> pdf_colorspace & T2P_CS_RGB
FIELD	1905:5	1905:10	9	t2p -> pdf_colorspace
LEAF_NODE	1905:5	1905:5	10	t2p
LEAF_NODE	1905:8	1905:8	10	->
LEAF_NODE	1905:10	1905:10	10	pdf_colorspace
LEAF_NODE	1905:25	1905:25	9	&
FIELD	1905:27	1905:27	9	T2P_CS_RGB
LEAF_NODE	1905:27	1905:27	10	T2P_CS_RGB
LEAF_NODE	1905:37	1905:37	7	)
STATEMENTS	1905:38	1907:2	7	
LEAF_NODE	1905:38	1905:38	8	{
STATEMENTS	1906:3	1906:3	8	
EXPR_STATEMENT	1906:3	1906:39	9	t2p -> pdf_colorspace |= T2P_CS_CALRGB ;
EXPR	1906:3	1906:3	10	t2p -> pdf_colorspace |= T2P_CS_CALRGB
ASSIGN	1906:3	1906:26	11	t2p -> pdf_colorspace |= T2P_CS_CALRGB
LVAL	1906:3	1906:3	12	t2p -> pdf_colorspace
FIELD	1906:3	1906:8	13	t2p -> pdf_colorspace
LEAF_NODE	1906:3	1906:3	14	t2p
LEAF_NODE	1906:6	1906:6	14	->
LEAF_NODE	1906:8	1906:8	14	pdf_colorspace
ASSIGN_OP	1906:23	1906:23	12	|=
LEAF_NODE	1906:23	1906:23	13	|=
RVAL	1906:26	1906:26	12	T2P_CS_CALRGB
FIELD	1906:26	1906:26	13	T2P_CS_CALRGB
LEAF_NODE	1906:26	1906:26	14	T2P_CS_CALRGB
LEAF_NODE	1906:39	1906:39	10	;
LEAF_NODE	1907:2	1907:2	8	}
LEAF_NODE	1908:1	1908:1	5	}
SELECTION	1909:1	1909:37	3	
KEYWORD	1909:1	1909:1	4	if
LEAF_NODE	1909:1	1909:1	5	if
LEAF_NODE	1909:3	1909:3	4	(
CONDITION	1909:4	1909:4	4	t2p -> pdf_colorspace & T2P_CS_LAB
EXPR	1909:4	1909:26	5	t2p -> pdf_colorspace & T2P_CS_LAB
FIELD	1909:4	1909:9	6	t2p -> pdf_colorspace
LEAF_NODE	1909:4	1909:4	7	t2p
LEAF_NODE	1909:7	1909:7	7	->
LEAF_NODE	1909:9	1909:9	7	pdf_colorspace
LEAF_NODE	1909:24	1909:24	6	&
FIELD	1909:26	1909:26	6	T2P_CS_LAB
LEAF_NODE	1909:26	1909:26	7	T2P_CS_LAB
LEAF_NODE	1909:36	1909:36	4	)
STATEMENTS	1909:37	1917:1	4	
LEAF_NODE	1909:37	1909:37	5	{
STATEMENTS	1910:2	1913:4	5	
SELECTION	1910:2	1910:60	6	
KEYWORD	1910:2	1910:2	7	if
LEAF_NODE	1910:2	1910:2	8	if
LEAF_NODE	1910:4	1910:4	7	(
CONDITION	1910:5	1910:5	7	TIFFGetField ( input , TIFFTAG_WHITEPOINT , & xfloatp ) != 0
EXPR	1910:5	1910:58	8	TIFFGetField ( input , TIFFTAG_WHITEPOINT , & xfloatp ) != 0
FUNCTION_CALL	1910:5	1910:53	9	TIFFGetField ( input , TIFFTAG_WHITEPOINT , & xfloatp )
CALLEE	1910:5	1910:5	10	TIFFGetField
LEAF_NODE	1910:5	1910:5	11	TIFFGetField
LEAF_NODE	1910:17	1910:17	10	(
ARGUMENT	1910:18	1910:18	10	input
FIELD	1910:18	1910:18	11	input
LEAF_NODE	1910:18	1910:18	12	input
LEAF_NODE	1910:23	1910:23	10	,
ARGUMENT	1910:25	1910:25	10	TIFFTAG_WHITEPOINT
FIELD	1910:25	1910:25	11	TIFFTAG_WHITEPOINT
LEAF_NODE	1910:25	1910:25	12	TIFFTAG_WHITEPOINT
LEAF_NODE	1910:43	1910:43	10	,
ARGUMENT	1910:45	1910:45	10	& xfloatp
UNARY_EXPR	1910:45	1910:46	11	& xfloatp
UNARY_OPERATOR	1910:45	1910:45	12	&
LEAF_NODE	1910:45	1910:45	13	&
FIELD	1910:46	1910:46	12	xfloatp
LEAF_NODE	1910:46	1910:46	13	xfloatp
LEAF_NODE	1910:53	1910:53	10	)
EQ_OPERATOR	1910:55	1910:55	9	!=
LEAF_NODE	1910:55	1910:55	10	!=
FIELD	1910:58	1910:58	9	0
LEAF_NODE	1910:58	1910:58	10	0
LEAF_NODE	1910:59	1910:59	7	)
STATEMENTS	1910:60	1913:2	7	
LEAF_NODE	1910:60	1910:60	8	{
STATEMENTS	1911:3	1912:3	8	
EXPR_STATEMENT	1911:3	1911:46	9	t2p -> tiff_whitechromaticities [ 0 ] = xfloatp [ 0 ] ;
EXPR	1911:3	1911:3	10	t2p -> tiff_whitechromaticities [ 0 ] = xfloatp [ 0 ]
ASSIGN	1911:3	1911:36	11	t2p -> tiff_whitechromaticities [ 0 ] = xfloatp [ 0 ]
LVAL	1911:3	1911:3	12	t2p -> tiff_whitechromaticities [ 0 ]
FIELD	1911:3	1911:34	13	t2p -> tiff_whitechromaticities [ 0 ]
LEAF_NODE	1911:3	1911:3	14	t2p
LEAF_NODE	1911:6	1911:6	14	->
LEAF_NODE	1911:8	1911:8	14	tiff_whitechromaticities
LEAF_NODE	1911:32	1911:32	14	[
EXPR	1911:33	1911:33	14	0
FIELD	1911:33	1911:33	15	0
LEAF_NODE	1911:33	1911:33	16	0
LEAF_NODE	1911:34	1911:34	14	]
ASSIGN_OP	1911:35	1911:35	12	=
LEAF_NODE	1911:35	1911:35	13	=
RVAL	1911:36	1911:36	12	xfloatp [ 0 ]
FIELD	1911:36	1911:45	13	xfloatp [ 0 ]
LEAF_NODE	1911:36	1911:36	14	xfloatp
LEAF_NODE	1911:43	1911:43	14	[
EXPR	1911:44	1911:44	14	0
FIELD	1911:44	1911:44	15	0
LEAF_NODE	1911:44	1911:44	16	0
LEAF_NODE	1911:45	1911:45	14	]
LEAF_NODE	1911:46	1911:46	10	;
EXPR_STATEMENT	1912:3	1912:46	9	t2p -> tiff_whitechromaticities [ 1 ] = xfloatp [ 1 ] ;
EXPR	1912:3	1912:3	10	t2p -> tiff_whitechromaticities [ 1 ] = xfloatp [ 1 ]
ASSIGN	1912:3	1912:36	11	t2p -> tiff_whitechromaticities [ 1 ] = xfloatp [ 1 ]
LVAL	1912:3	1912:3	12	t2p -> tiff_whitechromaticities [ 1 ]
FIELD	1912:3	1912:34	13	t2p -> tiff_whitechromaticities [ 1 ]
LEAF_NODE	1912:3	1912:3	14	t2p
LEAF_NODE	1912:6	1912:6	14	->
LEAF_NODE	1912:8	1912:8	14	tiff_whitechromaticities
LEAF_NODE	1912:32	1912:32	14	[
EXPR	1912:33	1912:33	14	1
FIELD	1912:33	1912:33	15	1
LEAF_NODE	1912:33	1912:33	16	1
LEAF_NODE	1912:34	1912:34	14	]
ASSIGN_OP	1912:35	1912:35	12	=
LEAF_NODE	1912:35	1912:35	13	=
RVAL	1912:36	1912:36	12	xfloatp [ 1 ]
FIELD	1912:36	1912:45	13	xfloatp [ 1 ]
LEAF_NODE	1912:36	1912:36	14	xfloatp
LEAF_NODE	1912:43	1912:43	14	[
EXPR	1912:44	1912:44	14	1
FIELD	1912:44	1912:44	15	1
LEAF_NODE	1912:44	1912:44	16	1
LEAF_NODE	1912:45	1912:45	14	]
LEAF_NODE	1912:46	1912:46	10	;
LEAF_NODE	1913:2	1913:2	8	}
SELECTION	1913:4	1913:9	6	
KEYWORD	1913:4	1913:4	7	else
LEAF_NODE	1913:4	1913:4	8	else
STATEMENTS	1913:9	1916:2	7	
LEAF_NODE	1913:9	1913:9	8	{
STATEMENTS	1914:3	1915:3	8	
EXPR_STATEMENT	1914:3	1914:43	9	t2p -> tiff_whitechromaticities [ 0 ] = 0.3457F ;
EXPR	1914:3	1914:3	10	t2p -> tiff_whitechromaticities [ 0 ] = 0.3457F
ASSIGN	1914:3	1914:36	11	t2p -> tiff_whitechromaticities [ 0 ] = 0.3457F
LVAL	1914:3	1914:3	12	t2p -> tiff_whitechromaticities [ 0 ]
FIELD	1914:3	1914:34	13	t2p -> tiff_whitechromaticities [ 0 ]
LEAF_NODE	1914:3	1914:3	14	t2p
LEAF_NODE	1914:6	1914:6	14	->
LEAF_NODE	1914:8	1914:8	14	tiff_whitechromaticities
LEAF_NODE	1914:32	1914:32	14	[
EXPR	1914:33	1914:33	14	0
FIELD	1914:33	1914:33	15	0
LEAF_NODE	1914:33	1914:33	16	0
LEAF_NODE	1914:34	1914:34	14	]
ASSIGN_OP	1914:35	1914:35	12	=
LEAF_NODE	1914:35	1914:35	13	=
RVAL	1914:36	1914:36	12	0.3457F
FIELD	1914:36	1914:36	13	0.3457F
LEAF_NODE	1914:36	1914:36	14	0.3457F
LEAF_NODE	1914:43	1914:43	10	;
EXPR_STATEMENT	1915:3	1915:43	9	t2p -> tiff_whitechromaticities [ 1 ] = 0.3585F ;
EXPR	1915:3	1915:3	10	t2p -> tiff_whitechromaticities [ 1 ] = 0.3585F
ASSIGN	1915:3	1915:36	11	t2p -> tiff_whitechromaticities [ 1 ] = 0.3585F
LVAL	1915:3	1915:3	12	t2p -> tiff_whitechromaticities [ 1 ]
FIELD	1915:3	1915:34	13	t2p -> tiff_whitechromaticities [ 1 ]
LEAF_NODE	1915:3	1915:3	14	t2p
LEAF_NODE	1915:6	1915:6	14	->
LEAF_NODE	1915:8	1915:8	14	tiff_whitechromaticities
LEAF_NODE	1915:32	1915:32	14	[
EXPR	1915:33	1915:33	14	1
FIELD	1915:33	1915:33	15	1
LEAF_NODE	1915:33	1915:33	16	1
LEAF_NODE	1915:34	1915:34	14	]
ASSIGN_OP	1915:35	1915:35	12	=
LEAF_NODE	1915:35	1915:35	13	=
RVAL	1915:36	1915:36	12	0.3585F
FIELD	1915:36	1915:36	13	0.3585F
LEAF_NODE	1915:36	1915:36	14	0.3585F
LEAF_NODE	1915:43	1915:43	10	;
LEAF_NODE	1916:2	1916:2	8	}
LEAF_NODE	1917:1	1917:1	5	}
SELECTION	1918:1	1921:30	3	
KEYWORD	1918:1	1918:1	4	if
LEAF_NODE	1918:1	1918:1	5	if
LEAF_NODE	1918:3	1918:3	4	(
CONDITION	1918:4	1918:4	4	TIFFGetField ( input , TIFFTAG_ICCPROFILE , & ( t2p -> tiff_iccprofilelength ) , & ( t2p -> tiff_iccprofile ) ) != 0
EXPR	1918:4	1921:28	5	TIFFGetField ( input , TIFFTAG_ICCPROFILE , & ( t2p -> tiff_iccprofilelength ) , & ( t2p -> tiff_iccprofile ) ) != 0
FUNCTION_CALL	1918:4	1921:25	6	TIFFGetField ( input , TIFFTAG_ICCPROFILE , & ( t2p -> tiff_iccprofilelength ) , & ( t2p -> tiff_iccprofile ) )
CALLEE	1918:4	1918:4	7	TIFFGetField
LEAF_NODE	1918:4	1918:4	8	TIFFGetField
LEAF_NODE	1918:16	1918:16	7	(
ARGUMENT	1918:17	1918:17	7	input
FIELD	1918:17	1918:17	8	input
LEAF_NODE	1918:17	1918:17	9	input
LEAF_NODE	1918:22	1918:22	7	,
ARGUMENT	1919:2	1919:2	7	TIFFTAG_ICCPROFILE
FIELD	1919:2	1919:2	8	TIFFTAG_ICCPROFILE
LEAF_NODE	1919:2	1919:2	9	TIFFTAG_ICCPROFILE
LEAF_NODE	1919:20	1919:20	7	,
ARGUMENT	1920:2	1920:2	7	& ( t2p -> tiff_iccprofilelength )
UNARY_EXPR	1920:2	1920:30	8	& ( t2p -> tiff_iccprofilelength )
UNARY_OPERATOR	1920:2	1920:2	9	&
LEAF_NODE	1920:2	1920:2	10	&
LEAF_NODE	1920:3	1920:3	9	(
FIELD	1920:4	1920:9	9	t2p -> tiff_iccprofilelength
LEAF_NODE	1920:4	1920:4	10	t2p
LEAF_NODE	1920:7	1920:7	10	->
LEAF_NODE	1920:9	1920:9	10	tiff_iccprofilelength
LEAF_NODE	1920:30	1920:30	9	)
LEAF_NODE	1920:31	1920:31	7	,
ARGUMENT	1921:2	1921:2	7	& ( t2p -> tiff_iccprofile )
UNARY_EXPR	1921:2	1921:24	8	& ( t2p -> tiff_iccprofile )
UNARY_OPERATOR	1921:2	1921:2	9	&
LEAF_NODE	1921:2	1921:2	10	&
LEAF_NODE	1921:3	1921:3	9	(
FIELD	1921:4	1921:9	9	t2p -> tiff_iccprofile
LEAF_NODE	1921:4	1921:4	10	t2p
LEAF_NODE	1921:7	1921:7	10	->
LEAF_NODE	1921:9	1921:9	10	tiff_iccprofile
LEAF_NODE	1921:24	1921:24	9	)
LEAF_NODE	1921:25	1921:25	7	)
EQ_OPERATOR	1921:26	1921:26	6	!=
LEAF_NODE	1921:26	1921:26	7	!=
FIELD	1921:28	1921:28	6	0
LEAF_NODE	1921:28	1921:28	7	0
LEAF_NODE	1921:29	1921:29	4	)
STATEMENTS	1921:30	1923:1	4	
LEAF_NODE	1921:30	1921:30	5	{
STATEMENTS	1922:2	1922:2	5	
EXPR_STATEMENT	1922:2	1922:40	6	t2p -> pdf_colorspace |= T2P_CS_ICCBASED ;
EXPR	1922:2	1922:2	7	t2p -> pdf_colorspace |= T2P_CS_ICCBASED
ASSIGN	1922:2	1922:25	8	t2p -> pdf_colorspace |= T2P_CS_ICCBASED
LVAL	1922:2	1922:2	9	t2p -> pdf_colorspace
FIELD	1922:2	1922:7	10	t2p -> pdf_colorspace
LEAF_NODE	1922:2	1922:2	11	t2p
LEAF_NODE	1922:5	1922:5	11	->
LEAF_NODE	1922:7	1922:7	11	pdf_colorspace
ASSIGN_OP	1922:22	1922:22	9	|=
LEAF_NODE	1922:22	1922:22	10	|=
RVAL	1922:25	1922:25	9	T2P_CS_ICCBASED
FIELD	1922:25	1922:25	10	T2P_CS_ICCBASED
LEAF_NODE	1922:25	1922:25	11	T2P_CS_ICCBASED
LEAF_NODE	1922:40	1922:40	7	;
LEAF_NODE	1923:1	1923:1	5	}
SELECTION	1923:3	1923:8	3	
KEYWORD	1923:3	1923:3	4	else
LEAF_NODE	1923:3	1923:3	5	else
STATEMENTS	1923:8	1926:1	4	
LEAF_NODE	1923:8	1923:8	5	{
STATEMENTS	1924:2	1925:2	5	
EXPR_STATEMENT	1924:2	1924:30	6	t2p -> tiff_iccprofilelength = 0 ;
EXPR	1924:2	1924:2	7	t2p -> tiff_iccprofilelength = 0
ASSIGN	1924:2	1924:29	8	t2p -> tiff_iccprofilelength = 0
LVAL	1924:2	1924:2	9	t2p -> tiff_iccprofilelength
FIELD	1924:2	1924:7	10	t2p -> tiff_iccprofilelength
LEAF_NODE	1924:2	1924:2	11	t2p
LEAF_NODE	1924:5	1924:5	11	->
LEAF_NODE	1924:7	1924:7	11	tiff_iccprofilelength
ASSIGN_OP	1924:28	1924:28	9	=
LEAF_NODE	1924:28	1924:28	10	=
RVAL	1924:29	1924:29	9	0
FIELD	1924:29	1924:29	10	0
LEAF_NODE	1924:29	1924:29	11	0
LEAF_NODE	1924:30	1924:30	7	;
EXPR_STATEMENT	1925:2	1925:27	6	t2p -> tiff_iccprofile = NULL ;
EXPR	1925:2	1925:2	7	t2p -> tiff_iccprofile = NULL
ASSIGN	1925:2	1925:23	8	t2p -> tiff_iccprofile = NULL
LVAL	1925:2	1925:2	9	t2p -> tiff_iccprofile
FIELD	1925:2	1925:7	10	t2p -> tiff_iccprofile
LEAF_NODE	1925:2	1925:2	11	t2p
LEAF_NODE	1925:5	1925:5	11	->
LEAF_NODE	1925:7	1925:7	11	tiff_iccprofile
ASSIGN_OP	1925:22	1925:22	9	=
LEAF_NODE	1925:22	1925:22	10	=
RVAL	1925:23	1925:23	9	NULL
FIELD	1925:23	1925:23	10	NULL
LEAF_NODE	1925:23	1925:23	11	NULL
LEAF_NODE	1925:27	1925:27	7	;
LEAF_NODE	1926:1	1926:1	5	}
SELECTION	1929:1	1930:31	3	
KEYWORD	1929:1	1929:1	4	if
LEAF_NODE	1929:1	1929:1	5	if
LEAF_NODE	1929:3	1929:3	4	(
CONDITION	1929:5	1929:5	4	t2p -> tiff_bitspersample == 1 && t2p -> tiff_samplesperpixel == 1
EXPR	1929:5	1929:5	5	t2p -> tiff_bitspersample == 1 && t2p -> tiff_samplesperpixel == 1
AND	1929:5	1930:2	6	t2p -> tiff_bitspersample == 1 && t2p -> tiff_samplesperpixel == 1
EXPR	1929:5	1929:30	7	t2p -> tiff_bitspersample == 1
FIELD	1929:5	1929:10	8	t2p -> tiff_bitspersample
LEAF_NODE	1929:5	1929:5	9	t2p
LEAF_NODE	1929:8	1929:8	9	->
LEAF_NODE	1929:10	1929:10	9	tiff_bitspersample
EQ_OPERATOR	1929:28	1929:28	8	==
LEAF_NODE	1929:28	1929:28	9	==
FIELD	1929:30	1929:30	8	1
LEAF_NODE	1929:30	1929:30	9	1
LEAF_NODE	1929:32	1929:32	7	&&
EXPR	1930:2	1930:29	7	t2p -> tiff_samplesperpixel == 1
FIELD	1930:2	1930:7	8	t2p -> tiff_samplesperpixel
LEAF_NODE	1930:2	1930:2	9	t2p
LEAF_NODE	1930:5	1930:5	9	->
LEAF_NODE	1930:7	1930:7	9	tiff_samplesperpixel
EQ_OPERATOR	1930:27	1930:27	8	==
LEAF_NODE	1930:27	1930:27	9	==
FIELD	1930:29	1930:29	8	1
LEAF_NODE	1930:29	1930:29	9	1
LEAF_NODE	1930:30	1930:30	4	)
STATEMENTS	1930:31	1932:1	4	
LEAF_NODE	1930:31	1930:31	5	{
STATEMENTS	1931:2	1931:2	5	
EXPR_STATEMENT	1931:2	1931:40	6	t2p -> pdf_compression = T2P_COMPRESS_G4 ;
EXPR	1931:2	1931:2	7	t2p -> pdf_compression = T2P_COMPRESS_G4
ASSIGN	1931:2	1931:25	8	t2p -> pdf_compression = T2P_COMPRESS_G4
LVAL	1931:2	1931:2	9	t2p -> pdf_compression
FIELD	1931:2	1931:7	10	t2p -> pdf_compression
LEAF_NODE	1931:2	1931:2	11	t2p
LEAF_NODE	1931:5	1931:5	11	->
LEAF_NODE	1931:7	1931:7	11	pdf_compression
ASSIGN_OP	1931:23	1931:23	9	=
LEAF_NODE	1931:23	1931:23	10	=
RVAL	1931:25	1931:25	9	T2P_COMPRESS_G4
FIELD	1931:25	1931:25	10	T2P_COMPRESS_G4
LEAF_NODE	1931:25	1931:25	11	T2P_COMPRESS_G4
LEAF_NODE	1931:40	1931:40	7	;
LEAF_NODE	1932:1	1932:1	5	}
JUMP_STATEMENT	1936:1	1936:7	3	return DESTINATION ;
KEYWORD	1936:1	1936:1	4	return
LEAF_NODE	1936:1	1936:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	1936:7	1936:7	4	;
LEAF_NODE	1937:0	1937:0	2	}
FUNCTION_DEF	1944:0	2082:0	1	
RETURN_TYPE	1944:0	1944:0	2	void
TYPE_NAME	1944:0	1944:0	3	void
LEAF_NODE	1944:0	1944:0	4	void
FUNCTION_NAME	1944:5	1944:5	2	t2p_read_tiff_size
LEAF_NODE	1944:5	1944:5	3	t2p_read_tiff_size
PARAMETER_LIST	1944:23	1944:45	2	( T2P * t2p , TIFF * input )
LEAF_NODE	1944:23	1944:23	3	(
PARAMETER_DECL	1944:24	1944:29	3	T2P * t2p
TYPE	1944:24	1944:27	4	T2P *
TYPE_NAME	1944:24	1944:24	5	T2P
LEAF_NODE	1944:24	1944:24	6	T2P
POINTER	1944:27	1944:27	5	*
LEAF_NODE	1944:27	1944:27	6	*
NAME	1944:29	1944:29	4	t2p
LEAF_NODE	1944:29	1944:29	5	t2p
LEAF_NODE	1944:32	1944:32	3	,
PARAMETER_DECL	1944:34	1944:40	3	TIFF * input
TYPE	1944:34	1944:38	4	TIFF *
TYPE_NAME	1944:34	1944:34	5	TIFF
LEAF_NODE	1944:34	1944:34	6	TIFF
POINTER	1944:38	1944:38	5	*
LEAF_NODE	1944:38	1944:38	6	*
NAME	1944:40	1944:40	4	input
LEAF_NODE	1944:40	1944:40	5	input
LEAF_NODE	1944:45	1944:45	3	)
LEAF_NODE	1944:46	1944:46	2	{
STATEMENTS	1946:1	2081:1	2	
SIMPLE_DECL	1946:1	1946:17	3	uint64 * sbc ; sbc = NULL ;
VAR_DECL	1946:1	1946:9	4	uint64 * sbc ; sbc = NULL
TYPE	1946:1	1946:7	5	uint64 *
TYPE_NAME	1946:1	1946:1	6	uint64
LEAF_NODE	1946:1	1946:1	7	uint64
POINTER	1946:7	1946:7	6	*
LEAF_NODE	1946:7	1946:7	7	*
NAME	1946:9	1946:9	5	sbc
LEAF_NODE	1946:9	1946:9	6	sbc
LEAF_NODE	0:0	0:0	5	;
INIT	1946:9	1946:9	5	sbc = NULL
ASSIGN	1946:9	1946:13	6	sbc = NULL
LVAL	1946:9	1946:9	7	sbc
NAME	1946:9	1946:9	8	sbc
LEAF_NODE	1946:9	1946:9	9	sbc
ASSIGN_OP	1946:12	1946:12	7	=
LEAF_NODE	1946:12	1946:12	8	=
RVAL	1946:13	1946:13	7	NULL
FIELD	1946:13	1946:13	8	NULL
LEAF_NODE	1946:13	1946:13	9	NULL
LEAF_NODE	1946:17	1946:17	4	;
SIMPLE_DECL	1948:1	1948:24	3	unsigned char * jpt ; jpt = NULL ;
VAR_DECL	1948:1	1948:16	4	unsigned char * jpt ; jpt = NULL
TYPE	1948:1	1948:14	5	unsigned char *
TYPE_NAME	1948:1	1948:10	6	unsigned char
LEAF_NODE	1948:1	1948:1	7	unsigned
LEAF_NODE	1948:10	1948:10	7	char
POINTER	1948:14	1948:14	6	*
LEAF_NODE	1948:14	1948:14	7	*
NAME	1948:16	1948:16	5	jpt
LEAF_NODE	1948:16	1948:16	6	jpt
LEAF_NODE	0:0	0:0	5	;
INIT	1948:16	1948:16	5	jpt = NULL
ASSIGN	1948:16	1948:20	6	jpt = NULL
LVAL	1948:16	1948:16	7	jpt
NAME	1948:16	1948:16	8	jpt
LEAF_NODE	1948:16	1948:16	9	jpt
ASSIGN_OP	1948:19	1948:19	7	=
LEAF_NODE	1948:19	1948:19	8	=
RVAL	1948:20	1948:20	7	NULL
FIELD	1948:20	1948:20	8	NULL
LEAF_NODE	1948:20	1948:20	9	NULL
LEAF_NODE	1948:24	1948:24	4	;
SIMPLE_DECL	1949:1	1949:13	3	tstrip_t i ; i = 0 ;
VAR_DECL	1949:1	1949:10	4	tstrip_t i ; i = 0
TYPE	1949:1	1949:1	5	tstrip_t
TYPE_NAME	1949:1	1949:1	6	tstrip_t
LEAF_NODE	1949:1	1949:1	7	tstrip_t
NAME	1949:10	1949:10	5	i
LEAF_NODE	1949:10	1949:10	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	1949:10	1949:10	5	i = 0
ASSIGN	1949:10	1949:12	6	i = 0
LVAL	1949:10	1949:10	7	i
NAME	1949:10	1949:10	8	i
LEAF_NODE	1949:10	1949:10	9	i
ASSIGN_OP	1949:11	1949:11	7	=
LEAF_NODE	1949:11	1949:11	8	=
RVAL	1949:12	1949:12	7	0
FIELD	1949:12	1949:12	8	0
LEAF_NODE	1949:12	1949:12	9	0
LEAF_NODE	1949:13	1949:13	4	;
SIMPLE_DECL	1950:1	1950:22	3	tstrip_t stripcount ; stripcount = 0 ;
VAR_DECL	1950:1	1950:10	4	tstrip_t stripcount ; stripcount = 0
TYPE	1950:1	1950:1	5	tstrip_t
TYPE_NAME	1950:1	1950:1	6	tstrip_t
LEAF_NODE	1950:1	1950:1	7	tstrip_t
NAME	1950:10	1950:10	5	stripcount
LEAF_NODE	1950:10	1950:10	6	stripcount
LEAF_NODE	0:0	0:0	5	;
INIT	1950:10	1950:10	5	stripcount = 0
ASSIGN	1950:10	1950:21	6	stripcount = 0
LVAL	1950:10	1950:10	7	stripcount
NAME	1950:10	1950:10	8	stripcount
LEAF_NODE	1950:10	1950:10	9	stripcount
ASSIGN_OP	1950:20	1950:20	7	=
LEAF_NODE	1950:20	1950:20	8	=
RVAL	1950:21	1950:21	7	0
FIELD	1950:21	1950:21	8	0
LEAF_NODE	1950:21	1950:21	9	0
LEAF_NODE	1950:22	1950:22	4	;
SIMPLE_DECL	1952:8	1952:20	3	uint64 k ; k = 0 ;
VAR_DECL	1952:8	1952:15	4	uint64 k ; k = 0
TYPE	1952:8	1952:8	5	uint64
TYPE_NAME	1952:8	1952:8	6	uint64
LEAF_NODE	1952:8	1952:8	7	uint64
NAME	1952:15	1952:15	5	k
LEAF_NODE	1952:15	1952:15	6	k
LEAF_NODE	0:0	0:0	5	;
INIT	1952:15	1952:15	5	k = 0
ASSIGN	1952:15	1952:19	6	k = 0
LVAL	1952:15	1952:15	7	k
NAME	1952:15	1952:15	8	k
LEAF_NODE	1952:15	1952:15	9	k
ASSIGN_OP	1952:17	1952:17	7	=
LEAF_NODE	1952:17	1952:17	8	=
RVAL	1952:19	1952:19	7	0
FIELD	1952:19	1952:19	8	0
LEAF_NODE	1952:19	1952:19	9	0
LEAF_NODE	1952:20	1952:20	4	;
SELECTION	1954:1	1954:44	3	
KEYWORD	1954:1	1954:1	4	if
LEAF_NODE	1954:1	1954:1	5	if
LEAF_NODE	1954:3	1954:3	4	(
CONDITION	1954:4	1954:4	4	t2p -> pdf_transcode == T2P_TRANSCODE_RAW
EXPR	1954:4	1954:26	5	t2p -> pdf_transcode == T2P_TRANSCODE_RAW
FIELD	1954:4	1954:9	6	t2p -> pdf_transcode
LEAF_NODE	1954:4	1954:4	7	t2p
LEAF_NODE	1954:7	1954:7	7	->
LEAF_NODE	1954:9	1954:9	7	pdf_transcode
EQ_OPERATOR	1954:23	1954:23	6	==
LEAF_NODE	1954:23	1954:23	7	==
FIELD	1954:26	1954:26	6	T2P_TRANSCODE_RAW
LEAF_NODE	1954:26	1954:26	7	T2P_TRANSCODE_RAW
LEAF_NODE	1954:43	1954:43	4	)
STATEMENTS	1954:44	2065:1	4	
LEAF_NODE	1954:44	1954:44	5	{
STATEMENTS	1956:2	2064:2	5	
SELECTION	1956:2	1956:46	6	
KEYWORD	1956:2	1956:2	7	if
LEAF_NODE	1956:2	1956:2	8	if
LEAF_NODE	1956:4	1956:4	7	(
CONDITION	1956:5	1956:5	7	t2p -> pdf_compression == T2P_COMPRESS_G4
EXPR	1956:5	1956:29	8	t2p -> pdf_compression == T2P_COMPRESS_G4
FIELD	1956:5	1956:10	9	t2p -> pdf_compression
LEAF_NODE	1956:5	1956:5	10	t2p
LEAF_NODE	1956:8	1956:8	10	->
LEAF_NODE	1956:10	1956:10	10	pdf_compression
EQ_OPERATOR	1956:26	1956:26	9	==
LEAF_NODE	1956:26	1956:26	10	==
FIELD	1956:29	1956:29	9	T2P_COMPRESS_G4
LEAF_NODE	1956:29	1956:29	10	T2P_COMPRESS_G4
LEAF_NODE	1956:45	1956:45	7	)
STATEMENTS	1956:46	1964:2	7	
LEAF_NODE	1956:46	1956:46	8	{
STATEMENTS	1957:3	1963:3	8	
EXPR_STATEMENT	1957:3	1957:53	9	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc ) ;
EXPR	1957:3	1957:3	10	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
FUNCTION_CALL	1957:3	1957:52	11	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
CALLEE	1957:3	1957:3	12	TIFFGetField
LEAF_NODE	1957:3	1957:3	13	TIFFGetField
LEAF_NODE	1957:15	1957:15	12	(
ARGUMENT	1957:16	1957:16	12	input
FIELD	1957:16	1957:16	13	input
LEAF_NODE	1957:16	1957:16	14	input
LEAF_NODE	1957:21	1957:21	12	,
ARGUMENT	1957:23	1957:23	12	TIFFTAG_STRIPBYTECOUNTS
FIELD	1957:23	1957:23	13	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1957:23	1957:23	14	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1957:46	1957:46	12	,
ARGUMENT	1957:48	1957:48	12	& sbc
UNARY_EXPR	1957:48	1957:49	13	& sbc
UNARY_OPERATOR	1957:48	1957:48	14	&
LEAF_NODE	1957:48	1957:48	15	&
FIELD	1957:49	1957:49	14	sbc
LEAF_NODE	1957:49	1957:49	15	sbc
LEAF_NODE	1957:52	1957:52	12	)
LEAF_NODE	1957:53	1957:53	10	;
SELECTION	1958:12	1958:52	9	
KEYWORD	1958:12	1958:12	10	if
LEAF_NODE	1958:12	1958:12	11	if
LEAF_NODE	1958:15	1958:15	10	(
CONDITION	1958:16	1958:16	10	sbc [ 0 ] != ( uint64 ) ( tmsize_t ) sbc [ 0 ]
EXPR	1958:16	1958:44	11	sbc [ 0 ] != ( uint64 ) ( tmsize_t ) sbc [ 0 ]
FIELD	1958:16	1958:21	12	sbc [ 0 ]
LEAF_NODE	1958:16	1958:16	13	sbc
LEAF_NODE	1958:19	1958:19	13	[
EXPR	1958:20	1958:20	13	0
FIELD	1958:20	1958:20	14	0
LEAF_NODE	1958:20	1958:20	15	0
LEAF_NODE	1958:21	1958:21	13	]
EQ_OPERATOR	1958:23	1958:23	12	!=
LEAF_NODE	1958:23	1958:23	13	!=
LEAF_NODE	1958:26	1958:26	12	(
TYPE_NAME	1958:27	1958:27	12	uint64
LEAF_NODE	1958:27	1958:27	13	uint64
LEAF_NODE	1958:33	1958:33	12	)
LEAF_NODE	1958:34	1958:34	12	(
TYPE_NAME	1958:35	1958:35	12	tmsize_t
LEAF_NODE	1958:35	1958:35	13	tmsize_t
LEAF_NODE	1958:43	1958:43	12	)
FIELD	1958:44	1958:49	12	sbc [ 0 ]
LEAF_NODE	1958:44	1958:44	13	sbc
LEAF_NODE	1958:47	1958:47	13	[
EXPR	1958:48	1958:48	13	0
FIELD	1958:48	1958:48	14	0
LEAF_NODE	1958:48	1958:48	15	0
LEAF_NODE	1958:49	1958:49	13	]
LEAF_NODE	1958:50	1958:50	10	)
STATEMENTS	1958:52	1961:12	10	
LEAF_NODE	1958:52	1958:52	11	{
STATEMENTS	1959:16	1960:16	11	
EXPR_STATEMENT	1959:16	1959:62	12	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	1959:16	1959:16	13	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	1959:16	1959:61	14	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	1959:16	1959:16	15	TIFFError
LEAF_NODE	1959:16	1959:16	16	TIFFError
LEAF_NODE	1959:25	1959:25	15	(
ARGUMENT	1959:26	1959:26	15	TIFF2PDF_MODULE
FIELD	1959:26	1959:26	16	TIFF2PDF_MODULE
LEAF_NODE	1959:26	1959:26	17	TIFF2PDF_MODULE
LEAF_NODE	1959:41	1959:41	15	,
ARGUMENT	1959:43	1959:43	15	"Integer overflow"
FIELD	1959:43	1959:43	16	"Integer overflow"
LEAF_NODE	1959:43	1959:43	17	"Integer overflow"
LEAF_NODE	1959:61	1959:61	15	)
LEAF_NODE	1959:62	1959:62	13	;
EXPR_STATEMENT	1960:16	1960:46	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1960:16	1960:16	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1960:16	1960:33	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1960:16	1960:16	15	t2p -> t2p_error
FIELD	1960:16	1960:21	16	t2p -> t2p_error
LEAF_NODE	1960:16	1960:16	17	t2p
LEAF_NODE	1960:19	1960:19	17	->
LEAF_NODE	1960:21	1960:21	17	t2p_error
ASSIGN_OP	1960:31	1960:31	15	=
LEAF_NODE	1960:31	1960:31	16	=
RVAL	1960:33	1960:33	15	T2P_ERR_ERROR
FIELD	1960:33	1960:33	16	T2P_ERR_ERROR
LEAF_NODE	1960:33	1960:33	17	T2P_ERR_ERROR
LEAF_NODE	1960:46	1960:46	13	;
LEAF_NODE	1961:12	1961:12	11	}
EXPR_STATEMENT	1962:3	1962:38	9	t2p -> tiff_datasize = ( tmsize_t ) sbc [ 0 ] ;
EXPR	1962:3	1962:3	10	t2p -> tiff_datasize = ( tmsize_t ) sbc [ 0 ]
ASSIGN	1962:3	1962:22	11	t2p -> tiff_datasize = ( tmsize_t ) sbc [ 0 ]
LVAL	1962:3	1962:3	12	t2p -> tiff_datasize
FIELD	1962:3	1962:8	13	t2p -> tiff_datasize
LEAF_NODE	1962:3	1962:3	14	t2p
LEAF_NODE	1962:6	1962:6	14	->
LEAF_NODE	1962:8	1962:8	14	tiff_datasize
ASSIGN_OP	1962:21	1962:21	12	=
LEAF_NODE	1962:21	1962:21	13	=
RVAL	1962:22	1962:32	12	( tmsize_t ) sbc [ 0 ]
LEAF_NODE	1962:22	1962:22	13	(
TYPE_NAME	1962:23	1962:23	13	tmsize_t
LEAF_NODE	1962:23	1962:23	14	tmsize_t
LEAF_NODE	1962:31	1962:31	13	)
FIELD	1962:32	1962:37	13	sbc [ 0 ]
LEAF_NODE	1962:32	1962:32	14	sbc
LEAF_NODE	1962:35	1962:35	14	[
EXPR	1962:36	1962:36	14	0
FIELD	1962:36	1962:36	15	0
LEAF_NODE	1962:36	1962:36	16	0
LEAF_NODE	1962:37	1962:37	14	]
LEAF_NODE	1962:38	1962:38	10	;
JUMP_STATEMENT	1963:3	1963:9	9	return DESTINATION ;
KEYWORD	1963:3	1963:3	10	return
LEAF_NODE	1963:3	1963:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1963:9	1963:9	10	;
LEAF_NODE	1964:2	1964:2	8	}
SELECTION	1967:2	1967:46	6	
KEYWORD	1967:2	1967:2	7	if
LEAF_NODE	1967:2	1967:2	8	if
LEAF_NODE	1967:4	1967:4	7	(
CONDITION	1967:5	1967:5	7	t2p -> pdf_compression == T2P_COMPRESS_ZIP
EXPR	1967:5	1967:29	8	t2p -> pdf_compression == T2P_COMPRESS_ZIP
FIELD	1967:5	1967:10	9	t2p -> pdf_compression
LEAF_NODE	1967:5	1967:5	10	t2p
LEAF_NODE	1967:8	1967:8	10	->
LEAF_NODE	1967:10	1967:10	10	pdf_compression
EQ_OPERATOR	1967:26	1967:26	9	==
LEAF_NODE	1967:26	1967:26	10	==
FIELD	1967:29	1967:29	9	T2P_COMPRESS_ZIP
LEAF_NODE	1967:29	1967:29	10	T2P_COMPRESS_ZIP
LEAF_NODE	1967:45	1967:45	7	)
STATEMENTS	1967:46	1975:2	7	
LEAF_NODE	1967:46	1967:46	8	{
STATEMENTS	1968:3	1974:3	8	
EXPR_STATEMENT	1968:3	1968:53	9	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc ) ;
EXPR	1968:3	1968:3	10	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
FUNCTION_CALL	1968:3	1968:52	11	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
CALLEE	1968:3	1968:3	12	TIFFGetField
LEAF_NODE	1968:3	1968:3	13	TIFFGetField
LEAF_NODE	1968:15	1968:15	12	(
ARGUMENT	1968:16	1968:16	12	input
FIELD	1968:16	1968:16	13	input
LEAF_NODE	1968:16	1968:16	14	input
LEAF_NODE	1968:21	1968:21	12	,
ARGUMENT	1968:23	1968:23	12	TIFFTAG_STRIPBYTECOUNTS
FIELD	1968:23	1968:23	13	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1968:23	1968:23	14	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1968:46	1968:46	12	,
ARGUMENT	1968:48	1968:48	12	& sbc
UNARY_EXPR	1968:48	1968:49	13	& sbc
UNARY_OPERATOR	1968:48	1968:48	14	&
LEAF_NODE	1968:48	1968:48	15	&
FIELD	1968:49	1968:49	14	sbc
LEAF_NODE	1968:49	1968:49	15	sbc
LEAF_NODE	1968:52	1968:52	12	)
LEAF_NODE	1968:53	1968:53	10	;
SELECTION	1969:12	1969:52	9	
KEYWORD	1969:12	1969:12	10	if
LEAF_NODE	1969:12	1969:12	11	if
LEAF_NODE	1969:15	1969:15	10	(
CONDITION	1969:16	1969:16	10	sbc [ 0 ] != ( uint64 ) ( tmsize_t ) sbc [ 0 ]
EXPR	1969:16	1969:44	11	sbc [ 0 ] != ( uint64 ) ( tmsize_t ) sbc [ 0 ]
FIELD	1969:16	1969:21	12	sbc [ 0 ]
LEAF_NODE	1969:16	1969:16	13	sbc
LEAF_NODE	1969:19	1969:19	13	[
EXPR	1969:20	1969:20	13	0
FIELD	1969:20	1969:20	14	0
LEAF_NODE	1969:20	1969:20	15	0
LEAF_NODE	1969:21	1969:21	13	]
EQ_OPERATOR	1969:23	1969:23	12	!=
LEAF_NODE	1969:23	1969:23	13	!=
LEAF_NODE	1969:26	1969:26	12	(
TYPE_NAME	1969:27	1969:27	12	uint64
LEAF_NODE	1969:27	1969:27	13	uint64
LEAF_NODE	1969:33	1969:33	12	)
LEAF_NODE	1969:34	1969:34	12	(
TYPE_NAME	1969:35	1969:35	12	tmsize_t
LEAF_NODE	1969:35	1969:35	13	tmsize_t
LEAF_NODE	1969:43	1969:43	12	)
FIELD	1969:44	1969:49	12	sbc [ 0 ]
LEAF_NODE	1969:44	1969:44	13	sbc
LEAF_NODE	1969:47	1969:47	13	[
EXPR	1969:48	1969:48	13	0
FIELD	1969:48	1969:48	14	0
LEAF_NODE	1969:48	1969:48	15	0
LEAF_NODE	1969:49	1969:49	13	]
LEAF_NODE	1969:50	1969:50	10	)
STATEMENTS	1969:52	1972:12	10	
LEAF_NODE	1969:52	1969:52	11	{
STATEMENTS	1970:16	1971:16	11	
EXPR_STATEMENT	1970:16	1970:62	12	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	1970:16	1970:16	13	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	1970:16	1970:61	14	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	1970:16	1970:16	15	TIFFError
LEAF_NODE	1970:16	1970:16	16	TIFFError
LEAF_NODE	1970:25	1970:25	15	(
ARGUMENT	1970:26	1970:26	15	TIFF2PDF_MODULE
FIELD	1970:26	1970:26	16	TIFF2PDF_MODULE
LEAF_NODE	1970:26	1970:26	17	TIFF2PDF_MODULE
LEAF_NODE	1970:41	1970:41	15	,
ARGUMENT	1970:43	1970:43	15	"Integer overflow"
FIELD	1970:43	1970:43	16	"Integer overflow"
LEAF_NODE	1970:43	1970:43	17	"Integer overflow"
LEAF_NODE	1970:61	1970:61	15	)
LEAF_NODE	1970:62	1970:62	13	;
EXPR_STATEMENT	1971:16	1971:46	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1971:16	1971:16	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1971:16	1971:33	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1971:16	1971:16	15	t2p -> t2p_error
FIELD	1971:16	1971:21	16	t2p -> t2p_error
LEAF_NODE	1971:16	1971:16	17	t2p
LEAF_NODE	1971:19	1971:19	17	->
LEAF_NODE	1971:21	1971:21	17	t2p_error
ASSIGN_OP	1971:31	1971:31	15	=
LEAF_NODE	1971:31	1971:31	16	=
RVAL	1971:33	1971:33	15	T2P_ERR_ERROR
FIELD	1971:33	1971:33	16	T2P_ERR_ERROR
LEAF_NODE	1971:33	1971:33	17	T2P_ERR_ERROR
LEAF_NODE	1971:46	1971:46	13	;
LEAF_NODE	1972:12	1972:12	11	}
EXPR_STATEMENT	1973:3	1973:38	9	t2p -> tiff_datasize = ( tmsize_t ) sbc [ 0 ] ;
EXPR	1973:3	1973:3	10	t2p -> tiff_datasize = ( tmsize_t ) sbc [ 0 ]
ASSIGN	1973:3	1973:22	11	t2p -> tiff_datasize = ( tmsize_t ) sbc [ 0 ]
LVAL	1973:3	1973:3	12	t2p -> tiff_datasize
FIELD	1973:3	1973:8	13	t2p -> tiff_datasize
LEAF_NODE	1973:3	1973:3	14	t2p
LEAF_NODE	1973:6	1973:6	14	->
LEAF_NODE	1973:8	1973:8	14	tiff_datasize
ASSIGN_OP	1973:21	1973:21	12	=
LEAF_NODE	1973:21	1973:21	13	=
RVAL	1973:22	1973:32	12	( tmsize_t ) sbc [ 0 ]
LEAF_NODE	1973:22	1973:22	13	(
TYPE_NAME	1973:23	1973:23	13	tmsize_t
LEAF_NODE	1973:23	1973:23	14	tmsize_t
LEAF_NODE	1973:31	1973:31	13	)
FIELD	1973:32	1973:37	13	sbc [ 0 ]
LEAF_NODE	1973:32	1973:32	14	sbc
LEAF_NODE	1973:35	1973:35	14	[
EXPR	1973:36	1973:36	14	0
FIELD	1973:36	1973:36	15	0
LEAF_NODE	1973:36	1973:36	16	0
LEAF_NODE	1973:37	1973:37	14	]
LEAF_NODE	1973:38	1973:38	10	;
JUMP_STATEMENT	1974:3	1974:9	9	return DESTINATION ;
KEYWORD	1974:3	1974:3	10	return
LEAF_NODE	1974:3	1974:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1974:9	1974:9	10	;
LEAF_NODE	1975:2	1975:2	8	}
SELECTION	1978:2	1978:48	6	
KEYWORD	1978:2	1978:2	7	if
LEAF_NODE	1978:2	1978:2	8	if
LEAF_NODE	1978:4	1978:4	7	(
CONDITION	1978:5	1978:5	7	t2p -> tiff_compression == COMPRESSION_OJPEG
EXPR	1978:5	1978:30	8	t2p -> tiff_compression == COMPRESSION_OJPEG
FIELD	1978:5	1978:10	9	t2p -> tiff_compression
LEAF_NODE	1978:5	1978:5	10	t2p
LEAF_NODE	1978:8	1978:8	10	->
LEAF_NODE	1978:10	1978:10	10	tiff_compression
EQ_OPERATOR	1978:27	1978:27	9	==
LEAF_NODE	1978:27	1978:27	10	==
FIELD	1978:30	1978:30	9	COMPRESSION_OJPEG
LEAF_NODE	1978:30	1978:30	10	COMPRESSION_OJPEG
LEAF_NODE	1978:47	1978:47	7	)
STATEMENTS	1978:48	2028:2	7	
LEAF_NODE	1978:48	1978:48	8	{
STATEMENTS	1979:3	2027:3	8	
SELECTION	1979:3	1979:58	9	
KEYWORD	1979:3	1979:3	10	if
LEAF_NODE	1979:3	1979:3	11	if
LEAF_NODE	1979:5	1979:5	10	(
CONDITION	1979:6	1979:6	10	! TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
EXPR	1979:6	1979:6	11	! TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
UNARY_EXPR	1979:6	1979:7	12	! TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
UNARY_OPERATOR	1979:6	1979:6	13	!
LEAF_NODE	1979:6	1979:6	14	!
FUNCTION_CALL	1979:7	1979:56	13	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
CALLEE	1979:7	1979:7	14	TIFFGetField
LEAF_NODE	1979:7	1979:7	15	TIFFGetField
LEAF_NODE	1979:19	1979:19	14	(
ARGUMENT	1979:20	1979:20	14	input
FIELD	1979:20	1979:20	15	input
LEAF_NODE	1979:20	1979:20	16	input
LEAF_NODE	1979:25	1979:25	14	,
ARGUMENT	1979:27	1979:27	14	TIFFTAG_STRIPBYTECOUNTS
FIELD	1979:27	1979:27	15	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1979:27	1979:27	16	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	1979:50	1979:50	14	,
ARGUMENT	1979:52	1979:52	14	& sbc
UNARY_EXPR	1979:52	1979:53	15	& sbc
UNARY_OPERATOR	1979:52	1979:52	16	&
LEAF_NODE	1979:52	1979:52	17	&
FIELD	1979:53	1979:53	16	sbc
LEAF_NODE	1979:53	1979:53	17	sbc
LEAF_NODE	1979:56	1979:56	14	)
LEAF_NODE	1979:57	1979:57	10	)
STATEMENTS	1979:58	1985:3	10	
LEAF_NODE	1979:58	1979:58	11	{
STATEMENTS	1980:4	1984:4	11	
EXPR_STATEMENT	1980:4	1982:25	12	TIFFError ( TIFF2PDF_MODULE , "Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS" , TIFFFileName ( input ) ) ;
EXPR	1980:4	1980:4	13	TIFFError ( TIFF2PDF_MODULE , "Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS" , TIFFFileName ( input ) )
FUNCTION_CALL	1980:4	1982:24	14	TIFFError ( TIFF2PDF_MODULE , "Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS" , TIFFFileName ( input ) )
CALLEE	1980:4	1980:4	15	TIFFError
LEAF_NODE	1980:4	1980:4	16	TIFFError
LEAF_NODE	1980:13	1980:13	15	(
ARGUMENT	1980:14	1980:14	15	TIFF2PDF_MODULE
FIELD	1980:14	1980:14	16	TIFF2PDF_MODULE
LEAF_NODE	1980:14	1980:14	17	TIFF2PDF_MODULE
LEAF_NODE	1980:29	1980:29	15	,
ARGUMENT	1981:5	1981:5	15	"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS"
FIELD	1981:5	1981:5	16	"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS"
LEAF_NODE	1981:5	1981:5	17	"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS"
LEAF_NODE	1981:59	1981:59	15	,
ARGUMENT	1982:5	1982:5	15	TIFFFileName ( input )
FUNCTION_CALL	1982:5	1982:23	16	TIFFFileName ( input )
CALLEE	1982:5	1982:5	17	TIFFFileName
LEAF_NODE	1982:5	1982:5	18	TIFFFileName
LEAF_NODE	1982:17	1982:17	17	(
ARGUMENT	1982:18	1982:18	17	input
FIELD	1982:18	1982:18	18	input
LEAF_NODE	1982:18	1982:18	19	input
LEAF_NODE	1982:23	1982:23	17	)
LEAF_NODE	1982:24	1982:24	15	)
LEAF_NODE	1982:25	1982:25	13	;
EXPR_STATEMENT	1983:4	1983:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	1983:4	1983:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	1983:4	1983:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	1983:4	1983:4	15	t2p -> t2p_error
FIELD	1983:4	1983:9	16	t2p -> t2p_error
LEAF_NODE	1983:4	1983:4	17	t2p
LEAF_NODE	1983:7	1983:7	17	->
LEAF_NODE	1983:9	1983:9	17	t2p_error
ASSIGN_OP	1983:19	1983:19	15	=
LEAF_NODE	1983:19	1983:19	16	=
RVAL	1983:21	1983:21	15	T2P_ERR_ERROR
FIELD	1983:21	1983:21	16	T2P_ERR_ERROR
LEAF_NODE	1983:21	1983:21	17	T2P_ERR_ERROR
LEAF_NODE	1983:34	1983:34	13	;
JUMP_STATEMENT	1984:4	1984:10	12	return DESTINATION ;
KEYWORD	1984:4	1984:4	13	return
LEAF_NODE	1984:4	1984:4	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1984:10	1984:10	13	;
LEAF_NODE	1985:3	1985:3	11	}
EXPR_STATEMENT	1986:3	1986:39	9	stripcount = TIFFNumberOfStrips ( input ) ;
EXPR	1986:3	1986:3	10	stripcount = TIFFNumberOfStrips ( input )
ASSIGN	1986:3	1986:14	11	stripcount = TIFFNumberOfStrips ( input )
LVAL	1986:3	1986:3	12	stripcount
FIELD	1986:3	1986:3	13	stripcount
LEAF_NODE	1986:3	1986:3	14	stripcount
ASSIGN_OP	1986:13	1986:13	12	=
LEAF_NODE	1986:13	1986:13	13	=
RVAL	1986:14	1986:14	12	TIFFNumberOfStrips ( input )
FUNCTION_CALL	1986:14	1986:38	13	TIFFNumberOfStrips ( input )
CALLEE	1986:14	1986:14	14	TIFFNumberOfStrips
LEAF_NODE	1986:14	1986:14	15	TIFFNumberOfStrips
LEAF_NODE	1986:32	1986:32	14	(
ARGUMENT	1986:33	1986:33	14	input
FIELD	1986:33	1986:33	15	input
LEAF_NODE	1986:33	1986:33	16	input
LEAF_NODE	1986:38	1986:38	14	)
LEAF_NODE	1986:39	1986:39	10	;
ITERATION	1987:3	1987:28	9	
KEYWORD	1987:3	1987:3	10	for
LEAF_NODE	1987:3	1987:3	11	for
LEAF_NODE	1987:6	1987:6	10	(
FOR_INIT	1987:7	1987:10	10	i = 0 ;
EXPR	1987:7	1987:7	11	i = 0
ASSIGN	1987:7	1987:9	12	i = 0
LVAL	1987:7	1987:7	13	i
FIELD	1987:7	1987:7	14	i
LEAF_NODE	1987:7	1987:7	15	i
ASSIGN_OP	1987:8	1987:8	13	=
LEAF_NODE	1987:8	1987:8	14	=
RVAL	1987:9	1987:9	13	0
FIELD	1987:9	1987:9	14	0
LEAF_NODE	1987:9	1987:9	15	0
LEAF_NODE	1987:10	1987:10	11	;
CONDITION	1987:11	1987:11	10	i < stripcount
EXPR	1987:11	1987:13	11	i < stripcount
FIELD	1987:11	1987:11	12	i
LEAF_NODE	1987:11	1987:11	13	i
REL_OPERATOR	1987:12	1987:12	12	<
LEAF_NODE	1987:12	1987:12	13	<
FIELD	1987:13	1987:13	12	stripcount
LEAF_NODE	1987:13	1987:13	13	stripcount
LEAF_NODE	1987:23	1987:23	10	;
FOR_EXPR	1987:24	1987:24	10	i ++
EXPR	1987:24	1987:24	11	i ++
FIELD	1987:24	1987:25	12	i ++
LEAF_NODE	1987:24	1987:24	13	i
LEAF_NODE	1987:25	1987:25	13	++
LEAF_NODE	1987:27	1987:27	10	)
STATEMENTS	1987:28	1989:3	10	
LEAF_NODE	1987:28	1987:28	11	{
STATEMENTS	1988:4	1988:4	11	
EXPR_STATEMENT	1988:4	1988:34	12	k = checkAdd64 ( k , sbc [ i ] , t2p ) ;
EXPR	1988:4	1988:4	13	k = checkAdd64 ( k , sbc [ i ] , t2p )
ASSIGN	1988:4	1988:8	14	k = checkAdd64 ( k , sbc [ i ] , t2p )
LVAL	1988:4	1988:4	15	k
FIELD	1988:4	1988:4	16	k
LEAF_NODE	1988:4	1988:4	17	k
ASSIGN_OP	1988:6	1988:6	15	=
LEAF_NODE	1988:6	1988:6	16	=
RVAL	1988:8	1988:8	15	checkAdd64 ( k , sbc [ i ] , t2p )
FUNCTION_CALL	1988:8	1988:33	16	checkAdd64 ( k , sbc [ i ] , t2p )
CALLEE	1988:8	1988:8	17	checkAdd64
LEAF_NODE	1988:8	1988:8	18	checkAdd64
LEAF_NODE	1988:18	1988:18	17	(
ARGUMENT	1988:19	1988:19	17	k
FIELD	1988:19	1988:19	18	k
LEAF_NODE	1988:19	1988:19	19	k
LEAF_NODE	1988:20	1988:20	17	,
ARGUMENT	1988:22	1988:22	17	sbc [ i ]
FIELD	1988:22	1988:27	18	sbc [ i ]
LEAF_NODE	1988:22	1988:22	19	sbc
LEAF_NODE	1988:25	1988:25	19	[
EXPR	1988:26	1988:26	19	i
FIELD	1988:26	1988:26	20	i
LEAF_NODE	1988:26	1988:26	21	i
LEAF_NODE	1988:27	1988:27	19	]
LEAF_NODE	1988:28	1988:28	17	,
ARGUMENT	1988:30	1988:30	17	t2p
FIELD	1988:30	1988:30	18	t2p
LEAF_NODE	1988:30	1988:30	19	t2p
LEAF_NODE	1988:33	1988:33	17	)
LEAF_NODE	1988:34	1988:34	13	;
LEAF_NODE	1989:3	1989:3	11	}
SELECTION	1990:3	1990:73	9	
KEYWORD	1990:3	1990:3	10	if
LEAF_NODE	1990:3	1990:3	11	if
LEAF_NODE	1990:5	1990:5	10	(
CONDITION	1990:6	1990:6	10	TIFFGetField ( input , TIFFTAG_JPEGIFOFFSET , & ( t2p -> tiff_dataoffset ) )
EXPR	1990:6	1990:6	11	TIFFGetField ( input , TIFFTAG_JPEGIFOFFSET , & ( t2p -> tiff_dataoffset ) )
FUNCTION_CALL	1990:6	1990:71	12	TIFFGetField ( input , TIFFTAG_JPEGIFOFFSET , & ( t2p -> tiff_dataoffset ) )
CALLEE	1990:6	1990:6	13	TIFFGetField
LEAF_NODE	1990:6	1990:6	14	TIFFGetField
LEAF_NODE	1990:18	1990:18	13	(
ARGUMENT	1990:19	1990:19	13	input
FIELD	1990:19	1990:19	14	input
LEAF_NODE	1990:19	1990:19	15	input
LEAF_NODE	1990:24	1990:24	13	,
ARGUMENT	1990:26	1990:26	13	TIFFTAG_JPEGIFOFFSET
FIELD	1990:26	1990:26	14	TIFFTAG_JPEGIFOFFSET
LEAF_NODE	1990:26	1990:26	15	TIFFTAG_JPEGIFOFFSET
LEAF_NODE	1990:46	1990:46	13	,
ARGUMENT	1990:48	1990:48	13	& ( t2p -> tiff_dataoffset )
UNARY_EXPR	1990:48	1990:70	14	& ( t2p -> tiff_dataoffset )
UNARY_OPERATOR	1990:48	1990:48	15	&
LEAF_NODE	1990:48	1990:48	16	&
LEAF_NODE	1990:49	1990:49	15	(
FIELD	1990:50	1990:55	15	t2p -> tiff_dataoffset
LEAF_NODE	1990:50	1990:50	16	t2p
LEAF_NODE	1990:53	1990:53	16	->
LEAF_NODE	1990:55	1990:55	16	tiff_dataoffset
LEAF_NODE	1990:70	1990:70	15	)
LEAF_NODE	1990:71	1990:71	13	)
LEAF_NODE	1990:72	1990:72	10	)
STATEMENTS	1990:73	2018:3	10	
LEAF_NODE	1990:73	1990:73	11	{
STATEMENTS	1991:4	1991:4	11	
SELECTION	1991:4	1991:33	12	
KEYWORD	1991:4	1991:4	13	if
LEAF_NODE	1991:4	1991:4	14	if
LEAF_NODE	1991:6	1991:6	13	(
CONDITION	1991:7	1991:7	13	t2p -> tiff_dataoffset != 0
EXPR	1991:7	1991:31	14	t2p -> tiff_dataoffset != 0
FIELD	1991:7	1991:12	15	t2p -> tiff_dataoffset
LEAF_NODE	1991:7	1991:7	16	t2p
LEAF_NODE	1991:10	1991:10	16	->
LEAF_NODE	1991:12	1991:12	16	tiff_dataoffset
EQ_OPERATOR	1991:28	1991:28	15	!=
LEAF_NODE	1991:28	1991:28	16	!=
FIELD	1991:31	1991:31	15	0
LEAF_NODE	1991:31	1991:31	16	0
LEAF_NODE	1991:32	1991:32	13	)
STATEMENTS	1991:33	2017:4	13	
LEAF_NODE	1991:33	1991:33	14	{
STATEMENTS	1992:5	2010:6	14	
SELECTION	1992:5	1992:79	15	
KEYWORD	1992:5	1992:5	16	if
LEAF_NODE	1992:5	1992:5	17	if
LEAF_NODE	1992:7	1992:7	16	(
CONDITION	1992:8	1992:8	16	TIFFGetField ( input , TIFFTAG_JPEGIFBYTECOUNT , & ( t2p -> tiff_datasize ) ) != 0
EXPR	1992:8	1992:77	17	TIFFGetField ( input , TIFFTAG_JPEGIFBYTECOUNT , & ( t2p -> tiff_datasize ) ) != 0
FUNCTION_CALL	1992:8	1992:74	18	TIFFGetField ( input , TIFFTAG_JPEGIFBYTECOUNT , & ( t2p -> tiff_datasize ) )
CALLEE	1992:8	1992:8	19	TIFFGetField
LEAF_NODE	1992:8	1992:8	20	TIFFGetField
LEAF_NODE	1992:20	1992:20	19	(
ARGUMENT	1992:21	1992:21	19	input
FIELD	1992:21	1992:21	20	input
LEAF_NODE	1992:21	1992:21	21	input
LEAF_NODE	1992:26	1992:26	19	,
ARGUMENT	1992:28	1992:28	19	TIFFTAG_JPEGIFBYTECOUNT
FIELD	1992:28	1992:28	20	TIFFTAG_JPEGIFBYTECOUNT
LEAF_NODE	1992:28	1992:28	21	TIFFTAG_JPEGIFBYTECOUNT
LEAF_NODE	1992:51	1992:51	19	,
ARGUMENT	1992:53	1992:53	19	& ( t2p -> tiff_datasize )
UNARY_EXPR	1992:53	1992:73	20	& ( t2p -> tiff_datasize )
UNARY_OPERATOR	1992:53	1992:53	21	&
LEAF_NODE	1992:53	1992:53	22	&
LEAF_NODE	1992:54	1992:54	21	(
FIELD	1992:55	1992:60	21	t2p -> tiff_datasize
LEAF_NODE	1992:55	1992:55	22	t2p
LEAF_NODE	1992:58	1992:58	22	->
LEAF_NODE	1992:60	1992:60	22	tiff_datasize
LEAF_NODE	1992:73	1992:73	21	)
LEAF_NODE	1992:74	1992:74	19	)
EQ_OPERATOR	1992:75	1992:75	18	!=
LEAF_NODE	1992:75	1992:75	19	!=
FIELD	1992:77	1992:77	18	0
LEAF_NODE	1992:77	1992:77	19	0
LEAF_NODE	1992:78	1992:78	16	)
STATEMENTS	1992:79	2010:5	16	
LEAF_NODE	1992:79	1992:79	17	{
STATEMENTS	1993:6	2009:6	17	
SELECTION	1993:6	1993:41	18	
KEYWORD	1993:6	1993:6	19	if
LEAF_NODE	1993:6	1993:6	20	if
LEAF_NODE	1993:8	1993:8	19	(
CONDITION	1993:9	1993:9	19	( uint64 ) t2p -> tiff_datasize < k
EXPR	1993:9	1993:38	20	( uint64 ) t2p -> tiff_datasize < k
LEAF_NODE	1993:9	1993:9	21	(
TYPE_NAME	1993:10	1993:10	21	uint64
LEAF_NODE	1993:10	1993:10	22	uint64
LEAF_NODE	1993:16	1993:16	21	)
FIELD	1993:17	1993:22	21	t2p -> tiff_datasize
LEAF_NODE	1993:17	1993:17	22	t2p
LEAF_NODE	1993:20	1993:20	22	->
LEAF_NODE	1993:22	1993:22	22	tiff_datasize
REL_OPERATOR	1993:36	1993:36	21	<
LEAF_NODE	1993:36	1993:36	22	<
FIELD	1993:38	1993:38	21	k
LEAF_NODE	1993:38	1993:38	22	k
LEAF_NODE	1993:39	1993:39	19	)
STATEMENTS	1993:41	2008:6	19	
LEAF_NODE	1993:41	1993:41	20	{
STATEMENTS	1994:7	2007:7	20	
EXPR_STATEMENT	1994:7	1996:28	21	TIFFWarning ( TIFF2PDF_MODULE , "Input file %s has short JPEG interchange file byte count" , TIFFFileName ( input ) ) ;
EXPR	1994:7	1994:7	22	TIFFWarning ( TIFF2PDF_MODULE , "Input file %s has short JPEG interchange file byte count" , TIFFFileName ( input ) )
FUNCTION_CALL	1994:7	1996:27	23	TIFFWarning ( TIFF2PDF_MODULE , "Input file %s has short JPEG interchange file byte count" , TIFFFileName ( input ) )
CALLEE	1994:7	1994:7	24	TIFFWarning
LEAF_NODE	1994:7	1994:7	25	TIFFWarning
LEAF_NODE	1994:18	1994:18	24	(
ARGUMENT	1994:19	1994:19	24	TIFF2PDF_MODULE
FIELD	1994:19	1994:19	25	TIFF2PDF_MODULE
LEAF_NODE	1994:19	1994:19	26	TIFF2PDF_MODULE
LEAF_NODE	1994:34	1994:34	24	,
ARGUMENT	1995:8	1995:8	24	"Input file %s has short JPEG interchange file byte count"
FIELD	1995:8	1995:8	25	"Input file %s has short JPEG interchange file byte count"
LEAF_NODE	1995:8	1995:8	26	"Input file %s has short JPEG interchange file byte count"
LEAF_NODE	1995:66	1995:66	24	,
ARGUMENT	1996:8	1996:8	24	TIFFFileName ( input )
FUNCTION_CALL	1996:8	1996:26	25	TIFFFileName ( input )
CALLEE	1996:8	1996:8	26	TIFFFileName
LEAF_NODE	1996:8	1996:8	27	TIFFFileName
LEAF_NODE	1996:20	1996:20	26	(
ARGUMENT	1996:21	1996:21	26	input
FIELD	1996:21	1996:21	27	input
LEAF_NODE	1996:21	1996:21	28	input
LEAF_NODE	1996:26	1996:26	26	)
LEAF_NODE	1996:27	1996:27	24	)
LEAF_NODE	1996:28	1996:28	22	;
EXPR_STATEMENT	1997:7	1997:48	21	t2p -> pdf_ojpegiflength = t2p -> tiff_datasize ;
EXPR	1997:7	1997:7	22	t2p -> pdf_ojpegiflength = t2p -> tiff_datasize
ASSIGN	1997:7	1997:30	23	t2p -> pdf_ojpegiflength = t2p -> tiff_datasize
LVAL	1997:7	1997:7	24	t2p -> pdf_ojpegiflength
FIELD	1997:7	1997:12	25	t2p -> pdf_ojpegiflength
LEAF_NODE	1997:7	1997:7	26	t2p
LEAF_NODE	1997:10	1997:10	26	->
LEAF_NODE	1997:12	1997:12	26	pdf_ojpegiflength
ASSIGN_OP	1997:29	1997:29	24	=
LEAF_NODE	1997:29	1997:29	25	=
RVAL	1997:30	1997:30	24	t2p -> tiff_datasize
FIELD	1997:30	1997:35	25	t2p -> tiff_datasize
LEAF_NODE	1997:30	1997:30	26	t2p
LEAF_NODE	1997:33	1997:33	26	->
LEAF_NODE	1997:35	1997:35	26	tiff_datasize
LEAF_NODE	1997:48	1997:48	22	;
EXPR_STATEMENT	1998:7	1998:49	21	k = checkAdd64 ( k , t2p -> tiff_datasize , t2p ) ;
EXPR	1998:7	1998:7	22	k = checkAdd64 ( k , t2p -> tiff_datasize , t2p )
ASSIGN	1998:7	1998:11	23	k = checkAdd64 ( k , t2p -> tiff_datasize , t2p )
LVAL	1998:7	1998:7	24	k
FIELD	1998:7	1998:7	25	k
LEAF_NODE	1998:7	1998:7	26	k
ASSIGN_OP	1998:9	1998:9	24	=
LEAF_NODE	1998:9	1998:9	25	=
RVAL	1998:11	1998:11	24	checkAdd64 ( k , t2p -> tiff_datasize , t2p )
FUNCTION_CALL	1998:11	1998:48	25	checkAdd64 ( k , t2p -> tiff_datasize , t2p )
CALLEE	1998:11	1998:11	26	checkAdd64
LEAF_NODE	1998:11	1998:11	27	checkAdd64
LEAF_NODE	1998:21	1998:21	26	(
ARGUMENT	1998:22	1998:22	26	k
FIELD	1998:22	1998:22	27	k
LEAF_NODE	1998:22	1998:22	28	k
LEAF_NODE	1998:23	1998:23	26	,
ARGUMENT	1998:25	1998:25	26	t2p -> tiff_datasize
FIELD	1998:25	1998:30	27	t2p -> tiff_datasize
LEAF_NODE	1998:25	1998:25	28	t2p
LEAF_NODE	1998:28	1998:28	28	->
LEAF_NODE	1998:30	1998:30	28	tiff_datasize
LEAF_NODE	1998:43	1998:43	26	,
ARGUMENT	1998:45	1998:45	26	t2p
FIELD	1998:45	1998:45	27	t2p
LEAF_NODE	1998:45	1998:45	28	t2p
LEAF_NODE	1998:48	1998:48	26	)
LEAF_NODE	1998:49	1998:49	22	;
EXPR_STATEMENT	1999:7	1999:32	21	k = checkAdd64 ( k , 6 , t2p ) ;
EXPR	1999:7	1999:7	22	k = checkAdd64 ( k , 6 , t2p )
ASSIGN	1999:7	1999:11	23	k = checkAdd64 ( k , 6 , t2p )
LVAL	1999:7	1999:7	24	k
FIELD	1999:7	1999:7	25	k
LEAF_NODE	1999:7	1999:7	26	k
ASSIGN_OP	1999:9	1999:9	24	=
LEAF_NODE	1999:9	1999:9	25	=
RVAL	1999:11	1999:11	24	checkAdd64 ( k , 6 , t2p )
FUNCTION_CALL	1999:11	1999:31	25	checkAdd64 ( k , 6 , t2p )
CALLEE	1999:11	1999:11	26	checkAdd64
LEAF_NODE	1999:11	1999:11	27	checkAdd64
LEAF_NODE	1999:21	1999:21	26	(
ARGUMENT	1999:22	1999:22	26	k
FIELD	1999:22	1999:22	27	k
LEAF_NODE	1999:22	1999:22	28	k
LEAF_NODE	1999:23	1999:23	26	,
ARGUMENT	1999:25	1999:25	26	6
FIELD	1999:25	1999:25	27	6
LEAF_NODE	1999:25	1999:25	28	6
LEAF_NODE	1999:26	1999:26	26	,
ARGUMENT	1999:28	1999:28	26	t2p
FIELD	1999:28	1999:28	27	t2p
LEAF_NODE	1999:28	1999:28	28	t2p
LEAF_NODE	1999:31	1999:31	26	)
LEAF_NODE	1999:32	1999:32	22	;
EXPR_STATEMENT	2000:7	2000:41	21	k = checkAdd64 ( k , stripcount , t2p ) ;
EXPR	2000:7	2000:7	22	k = checkAdd64 ( k , stripcount , t2p )
ASSIGN	2000:7	2000:11	23	k = checkAdd64 ( k , stripcount , t2p )
LVAL	2000:7	2000:7	24	k
FIELD	2000:7	2000:7	25	k
LEAF_NODE	2000:7	2000:7	26	k
ASSIGN_OP	2000:9	2000:9	24	=
LEAF_NODE	2000:9	2000:9	25	=
RVAL	2000:11	2000:11	24	checkAdd64 ( k , stripcount , t2p )
FUNCTION_CALL	2000:11	2000:40	25	checkAdd64 ( k , stripcount , t2p )
CALLEE	2000:11	2000:11	26	checkAdd64
LEAF_NODE	2000:11	2000:11	27	checkAdd64
LEAF_NODE	2000:21	2000:21	26	(
ARGUMENT	2000:22	2000:22	26	k
FIELD	2000:22	2000:22	27	k
LEAF_NODE	2000:22	2000:22	28	k
LEAF_NODE	2000:23	2000:23	26	,
ARGUMENT	2000:25	2000:25	26	stripcount
FIELD	2000:25	2000:25	27	stripcount
LEAF_NODE	2000:25	2000:25	28	stripcount
LEAF_NODE	2000:35	2000:35	26	,
ARGUMENT	2000:37	2000:37	26	t2p
FIELD	2000:37	2000:37	27	t2p
LEAF_NODE	2000:37	2000:37	28	t2p
LEAF_NODE	2000:40	2000:40	26	)
LEAF_NODE	2000:41	2000:41	22	;
EXPR_STATEMENT	2001:7	2001:41	21	k = checkAdd64 ( k , stripcount , t2p ) ;
EXPR	2001:7	2001:7	22	k = checkAdd64 ( k , stripcount , t2p )
ASSIGN	2001:7	2001:11	23	k = checkAdd64 ( k , stripcount , t2p )
LVAL	2001:7	2001:7	24	k
FIELD	2001:7	2001:7	25	k
LEAF_NODE	2001:7	2001:7	26	k
ASSIGN_OP	2001:9	2001:9	24	=
LEAF_NODE	2001:9	2001:9	25	=
RVAL	2001:11	2001:11	24	checkAdd64 ( k , stripcount , t2p )
FUNCTION_CALL	2001:11	2001:40	25	checkAdd64 ( k , stripcount , t2p )
CALLEE	2001:11	2001:11	26	checkAdd64
LEAF_NODE	2001:11	2001:11	27	checkAdd64
LEAF_NODE	2001:21	2001:21	26	(
ARGUMENT	2001:22	2001:22	26	k
FIELD	2001:22	2001:22	27	k
LEAF_NODE	2001:22	2001:22	28	k
LEAF_NODE	2001:23	2001:23	26	,
ARGUMENT	2001:25	2001:25	26	stripcount
FIELD	2001:25	2001:25	27	stripcount
LEAF_NODE	2001:25	2001:25	28	stripcount
LEAF_NODE	2001:35	2001:35	26	,
ARGUMENT	2001:37	2001:37	26	t2p
FIELD	2001:37	2001:37	27	t2p
LEAF_NODE	2001:37	2001:37	28	t2p
LEAF_NODE	2001:40	2001:40	26	)
LEAF_NODE	2001:41	2001:41	22	;
EXPR_STATEMENT	2002:7	2002:39	21	t2p -> tiff_datasize = ( tsize_t ) k ;
EXPR	2002:7	2002:7	22	t2p -> tiff_datasize = ( tsize_t ) k
ASSIGN	2002:7	2002:28	23	t2p -> tiff_datasize = ( tsize_t ) k
LVAL	2002:7	2002:7	24	t2p -> tiff_datasize
FIELD	2002:7	2002:12	25	t2p -> tiff_datasize
LEAF_NODE	2002:7	2002:7	26	t2p
LEAF_NODE	2002:10	2002:10	26	->
LEAF_NODE	2002:12	2002:12	26	tiff_datasize
ASSIGN_OP	2002:26	2002:26	24	=
LEAF_NODE	2002:26	2002:26	25	=
RVAL	2002:28	2002:38	24	( tsize_t ) k
LEAF_NODE	2002:28	2002:28	25	(
TYPE_NAME	2002:29	2002:29	25	tsize_t
LEAF_NODE	2002:29	2002:29	26	tsize_t
LEAF_NODE	2002:36	2002:36	25	)
FIELD	2002:38	2002:38	25	k
LEAF_NODE	2002:38	2002:38	26	k
LEAF_NODE	2002:39	2002:39	22	;
SELECTION	2003:7	2003:45	21	
KEYWORD	2003:7	2003:7	22	if
LEAF_NODE	2003:7	2003:7	23	if
LEAF_NODE	2003:10	2003:10	22	(
CONDITION	2003:11	2003:11	22	( uint64 ) t2p -> tiff_datasize != k
EXPR	2003:11	2003:42	23	( uint64 ) t2p -> tiff_datasize != k
LEAF_NODE	2003:11	2003:11	24	(
TYPE_NAME	2003:12	2003:12	24	uint64
LEAF_NODE	2003:12	2003:12	25	uint64
LEAF_NODE	2003:18	2003:18	24	)
FIELD	2003:20	2003:25	24	t2p -> tiff_datasize
LEAF_NODE	2003:20	2003:20	25	t2p
LEAF_NODE	2003:23	2003:23	25	->
LEAF_NODE	2003:25	2003:25	25	tiff_datasize
EQ_OPERATOR	2003:39	2003:39	24	!=
LEAF_NODE	2003:39	2003:39	25	!=
FIELD	2003:42	2003:42	24	k
LEAF_NODE	2003:42	2003:42	25	k
LEAF_NODE	2003:43	2003:43	22	)
STATEMENTS	2003:45	2006:7	22	
LEAF_NODE	2003:45	2003:45	23	{
STATEMENTS	2004:8	2005:8	23	
EXPR_STATEMENT	2004:8	2004:54	24	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	2004:8	2004:8	25	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	2004:8	2004:53	26	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	2004:8	2004:8	27	TIFFError
LEAF_NODE	2004:8	2004:8	28	TIFFError
LEAF_NODE	2004:17	2004:17	27	(
ARGUMENT	2004:18	2004:18	27	TIFF2PDF_MODULE
FIELD	2004:18	2004:18	28	TIFF2PDF_MODULE
LEAF_NODE	2004:18	2004:18	29	TIFF2PDF_MODULE
LEAF_NODE	2004:33	2004:33	27	,
ARGUMENT	2004:35	2004:35	27	"Integer overflow"
FIELD	2004:35	2004:35	28	"Integer overflow"
LEAF_NODE	2004:35	2004:35	29	"Integer overflow"
LEAF_NODE	2004:53	2004:53	27	)
LEAF_NODE	2004:54	2004:54	25	;
EXPR_STATEMENT	2005:8	2005:38	24	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2005:8	2005:8	25	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2005:8	2005:25	26	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2005:8	2005:8	27	t2p -> t2p_error
FIELD	2005:8	2005:13	28	t2p -> t2p_error
LEAF_NODE	2005:8	2005:8	29	t2p
LEAF_NODE	2005:11	2005:11	29	->
LEAF_NODE	2005:13	2005:13	29	t2p_error
ASSIGN_OP	2005:23	2005:23	27	=
LEAF_NODE	2005:23	2005:23	28	=
RVAL	2005:25	2005:25	27	T2P_ERR_ERROR
FIELD	2005:25	2005:25	28	T2P_ERR_ERROR
LEAF_NODE	2005:25	2005:25	29	T2P_ERR_ERROR
LEAF_NODE	2005:38	2005:38	25	;
LEAF_NODE	2006:7	2006:7	23	}
JUMP_STATEMENT	2007:7	2007:13	21	return DESTINATION ;
KEYWORD	2007:7	2007:7	22	return
LEAF_NODE	2007:7	2007:7	23	return
LEAF_NODE	0:0	0:0	22	DESTINATION
LEAF_NODE	2007:13	2007:13	22	;
LEAF_NODE	2008:6	2008:6	20	}
JUMP_STATEMENT	2009:6	2009:12	18	return DESTINATION ;
KEYWORD	2009:6	2009:6	19	return
LEAF_NODE	2009:6	2009:6	20	return
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	2009:12	2009:12	19	;
LEAF_NODE	2010:5	2010:5	17	}
SELECTION	2010:6	2010:11	15	
KEYWORD	2010:6	2010:6	16	else
LEAF_NODE	2010:6	2010:6	17	else
STATEMENTS	2010:11	2016:5	16	
LEAF_NODE	2010:11	2010:11	17	{
STATEMENTS	2011:6	2015:7	17	
EXPR_STATEMENT	2011:6	2013:27	18	TIFFError ( TIFF2PDF_MODULE , "Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT" , TIFFFileName ( input ) ) ;
EXPR	2011:6	2011:6	19	TIFFError ( TIFF2PDF_MODULE , "Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT" , TIFFFileName ( input ) )
FUNCTION_CALL	2011:6	2013:26	20	TIFFError ( TIFF2PDF_MODULE , "Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT" , TIFFFileName ( input ) )
CALLEE	2011:6	2011:6	21	TIFFError
LEAF_NODE	2011:6	2011:6	22	TIFFError
LEAF_NODE	2011:15	2011:15	21	(
ARGUMENT	2011:16	2011:16	21	TIFF2PDF_MODULE
FIELD	2011:16	2011:16	22	TIFF2PDF_MODULE
LEAF_NODE	2011:16	2011:16	23	TIFF2PDF_MODULE
LEAF_NODE	2011:31	2011:31	21	,
ARGUMENT	2012:7	2012:7	21	"Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT"
FIELD	2012:7	2012:7	22	"Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT"
LEAF_NODE	2012:7	2012:7	23	"Input file %s missing field: TIFFTAG_JPEGIFBYTECOUNT"
LEAF_NODE	2012:61	2012:61	21	,
ARGUMENT	2013:7	2013:7	21	TIFFFileName ( input )
FUNCTION_CALL	2013:7	2013:25	22	TIFFFileName ( input )
CALLEE	2013:7	2013:7	23	TIFFFileName
LEAF_NODE	2013:7	2013:7	24	TIFFFileName
LEAF_NODE	2013:19	2013:19	23	(
ARGUMENT	2013:20	2013:20	23	input
FIELD	2013:20	2013:20	24	input
LEAF_NODE	2013:20	2013:20	25	input
LEAF_NODE	2013:25	2013:25	23	)
LEAF_NODE	2013:26	2013:26	21	)
LEAF_NODE	2013:27	2013:27	19	;
EXPR_STATEMENT	2014:7	2014:37	18	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2014:7	2014:7	19	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2014:7	2014:24	20	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2014:7	2014:7	21	t2p -> t2p_error
FIELD	2014:7	2014:12	22	t2p -> t2p_error
LEAF_NODE	2014:7	2014:7	23	t2p
LEAF_NODE	2014:10	2014:10	23	->
LEAF_NODE	2014:12	2014:12	23	t2p_error
ASSIGN_OP	2014:22	2014:22	21	=
LEAF_NODE	2014:22	2014:22	22	=
RVAL	2014:24	2014:24	21	T2P_ERR_ERROR
FIELD	2014:24	2014:24	22	T2P_ERR_ERROR
LEAF_NODE	2014:24	2014:24	23	T2P_ERR_ERROR
LEAF_NODE	2014:37	2014:37	19	;
JUMP_STATEMENT	2015:7	2015:13	18	return DESTINATION ;
KEYWORD	2015:7	2015:7	19	return
LEAF_NODE	2015:7	2015:7	20	return
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	2015:13	2015:13	19	;
LEAF_NODE	2016:5	2016:5	17	}
LEAF_NODE	2017:4	2017:4	14	}
LEAF_NODE	2018:3	2018:3	11	}
EXPR_STATEMENT	2019:3	2019:37	9	k = checkAdd64 ( k , stripcount , t2p ) ;
EXPR	2019:3	2019:3	10	k = checkAdd64 ( k , stripcount , t2p )
ASSIGN	2019:3	2019:7	11	k = checkAdd64 ( k , stripcount , t2p )
LVAL	2019:3	2019:3	12	k
FIELD	2019:3	2019:3	13	k
LEAF_NODE	2019:3	2019:3	14	k
ASSIGN_OP	2019:5	2019:5	12	=
LEAF_NODE	2019:5	2019:5	13	=
RVAL	2019:7	2019:7	12	checkAdd64 ( k , stripcount , t2p )
FUNCTION_CALL	2019:7	2019:36	13	checkAdd64 ( k , stripcount , t2p )
CALLEE	2019:7	2019:7	14	checkAdd64
LEAF_NODE	2019:7	2019:7	15	checkAdd64
LEAF_NODE	2019:17	2019:17	14	(
ARGUMENT	2019:18	2019:18	14	k
FIELD	2019:18	2019:18	15	k
LEAF_NODE	2019:18	2019:18	16	k
LEAF_NODE	2019:19	2019:19	14	,
ARGUMENT	2019:21	2019:21	14	stripcount
FIELD	2019:21	2019:21	15	stripcount
LEAF_NODE	2019:21	2019:21	16	stripcount
LEAF_NODE	2019:31	2019:31	14	,
ARGUMENT	2019:33	2019:33	14	t2p
FIELD	2019:33	2019:33	15	t2p
LEAF_NODE	2019:33	2019:33	16	t2p
LEAF_NODE	2019:36	2019:36	14	)
LEAF_NODE	2019:37	2019:37	10	;
EXPR_STATEMENT	2020:3	2020:37	9	k = checkAdd64 ( k , stripcount , t2p ) ;
EXPR	2020:3	2020:3	10	k = checkAdd64 ( k , stripcount , t2p )
ASSIGN	2020:3	2020:7	11	k = checkAdd64 ( k , stripcount , t2p )
LVAL	2020:3	2020:3	12	k
FIELD	2020:3	2020:3	13	k
LEAF_NODE	2020:3	2020:3	14	k
ASSIGN_OP	2020:5	2020:5	12	=
LEAF_NODE	2020:5	2020:5	13	=
RVAL	2020:7	2020:7	12	checkAdd64 ( k , stripcount , t2p )
FUNCTION_CALL	2020:7	2020:36	13	checkAdd64 ( k , stripcount , t2p )
CALLEE	2020:7	2020:7	14	checkAdd64
LEAF_NODE	2020:7	2020:7	15	checkAdd64
LEAF_NODE	2020:17	2020:17	14	(
ARGUMENT	2020:18	2020:18	14	k
FIELD	2020:18	2020:18	15	k
LEAF_NODE	2020:18	2020:18	16	k
LEAF_NODE	2020:19	2020:19	14	,
ARGUMENT	2020:21	2020:21	14	stripcount
FIELD	2020:21	2020:21	15	stripcount
LEAF_NODE	2020:21	2020:21	16	stripcount
LEAF_NODE	2020:31	2020:31	14	,
ARGUMENT	2020:33	2020:33	14	t2p
FIELD	2020:33	2020:33	15	t2p
LEAF_NODE	2020:33	2020:33	16	t2p
LEAF_NODE	2020:36	2020:36	14	)
LEAF_NODE	2020:37	2020:37	10	;
EXPR_STATEMENT	2021:3	2021:31	9	k = checkAdd64 ( k , 2048 , t2p ) ;
EXPR	2021:3	2021:3	10	k = checkAdd64 ( k , 2048 , t2p )
ASSIGN	2021:3	2021:7	11	k = checkAdd64 ( k , 2048 , t2p )
LVAL	2021:3	2021:3	12	k
FIELD	2021:3	2021:3	13	k
LEAF_NODE	2021:3	2021:3	14	k
ASSIGN_OP	2021:5	2021:5	12	=
LEAF_NODE	2021:5	2021:5	13	=
RVAL	2021:7	2021:7	12	checkAdd64 ( k , 2048 , t2p )
FUNCTION_CALL	2021:7	2021:30	13	checkAdd64 ( k , 2048 , t2p )
CALLEE	2021:7	2021:7	14	checkAdd64
LEAF_NODE	2021:7	2021:7	15	checkAdd64
LEAF_NODE	2021:17	2021:17	14	(
ARGUMENT	2021:18	2021:18	14	k
FIELD	2021:18	2021:18	15	k
LEAF_NODE	2021:18	2021:18	16	k
LEAF_NODE	2021:19	2021:19	14	,
ARGUMENT	2021:21	2021:21	14	2048
FIELD	2021:21	2021:21	15	2048
LEAF_NODE	2021:21	2021:21	16	2048
LEAF_NODE	2021:25	2021:25	14	,
ARGUMENT	2021:27	2021:27	14	t2p
FIELD	2021:27	2021:27	15	t2p
LEAF_NODE	2021:27	2021:27	16	t2p
LEAF_NODE	2021:30	2021:30	14	)
LEAF_NODE	2021:31	2021:31	10	;
EXPR_STATEMENT	2022:3	2022:35	9	t2p -> tiff_datasize = ( tsize_t ) k ;
EXPR	2022:3	2022:3	10	t2p -> tiff_datasize = ( tsize_t ) k
ASSIGN	2022:3	2022:24	11	t2p -> tiff_datasize = ( tsize_t ) k
LVAL	2022:3	2022:3	12	t2p -> tiff_datasize
FIELD	2022:3	2022:8	13	t2p -> tiff_datasize
LEAF_NODE	2022:3	2022:3	14	t2p
LEAF_NODE	2022:6	2022:6	14	->
LEAF_NODE	2022:8	2022:8	14	tiff_datasize
ASSIGN_OP	2022:22	2022:22	12	=
LEAF_NODE	2022:22	2022:22	13	=
RVAL	2022:24	2022:34	12	( tsize_t ) k
LEAF_NODE	2022:24	2022:24	13	(
TYPE_NAME	2022:25	2022:25	13	tsize_t
LEAF_NODE	2022:25	2022:25	14	tsize_t
LEAF_NODE	2022:32	2022:32	13	)
FIELD	2022:34	2022:34	13	k
LEAF_NODE	2022:34	2022:34	14	k
LEAF_NODE	2022:35	2022:35	10	;
SELECTION	2023:3	2023:41	9	
KEYWORD	2023:3	2023:3	10	if
LEAF_NODE	2023:3	2023:3	11	if
LEAF_NODE	2023:6	2023:6	10	(
CONDITION	2023:7	2023:7	10	( uint64 ) t2p -> tiff_datasize != k
EXPR	2023:7	2023:38	11	( uint64 ) t2p -> tiff_datasize != k
LEAF_NODE	2023:7	2023:7	12	(
TYPE_NAME	2023:8	2023:8	12	uint64
LEAF_NODE	2023:8	2023:8	13	uint64
LEAF_NODE	2023:14	2023:14	12	)
FIELD	2023:16	2023:21	12	t2p -> tiff_datasize
LEAF_NODE	2023:16	2023:16	13	t2p
LEAF_NODE	2023:19	2023:19	13	->
LEAF_NODE	2023:21	2023:21	13	tiff_datasize
EQ_OPERATOR	2023:35	2023:35	12	!=
LEAF_NODE	2023:35	2023:35	13	!=
FIELD	2023:38	2023:38	12	k
LEAF_NODE	2023:38	2023:38	13	k
LEAF_NODE	2023:39	2023:39	10	)
STATEMENTS	2023:41	2026:3	10	
LEAF_NODE	2023:41	2023:41	11	{
STATEMENTS	2024:4	2025:4	11	
EXPR_STATEMENT	2024:4	2024:50	12	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	2024:4	2024:4	13	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	2024:4	2024:49	14	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	2024:4	2024:4	15	TIFFError
LEAF_NODE	2024:4	2024:4	16	TIFFError
LEAF_NODE	2024:13	2024:13	15	(
ARGUMENT	2024:14	2024:14	15	TIFF2PDF_MODULE
FIELD	2024:14	2024:14	16	TIFF2PDF_MODULE
LEAF_NODE	2024:14	2024:14	17	TIFF2PDF_MODULE
LEAF_NODE	2024:29	2024:29	15	,
ARGUMENT	2024:31	2024:31	15	"Integer overflow"
FIELD	2024:31	2024:31	16	"Integer overflow"
LEAF_NODE	2024:31	2024:31	17	"Integer overflow"
LEAF_NODE	2024:49	2024:49	15	)
LEAF_NODE	2024:50	2024:50	13	;
EXPR_STATEMENT	2025:4	2025:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2025:4	2025:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2025:4	2025:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2025:4	2025:4	15	t2p -> t2p_error
FIELD	2025:4	2025:9	16	t2p -> t2p_error
LEAF_NODE	2025:4	2025:4	17	t2p
LEAF_NODE	2025:7	2025:7	17	->
LEAF_NODE	2025:9	2025:9	17	t2p_error
ASSIGN_OP	2025:19	2025:19	15	=
LEAF_NODE	2025:19	2025:19	16	=
RVAL	2025:21	2025:21	15	T2P_ERR_ERROR
FIELD	2025:21	2025:21	16	T2P_ERR_ERROR
LEAF_NODE	2025:21	2025:21	17	T2P_ERR_ERROR
LEAF_NODE	2025:34	2025:34	13	;
LEAF_NODE	2026:3	2026:3	11	}
JUMP_STATEMENT	2027:3	2027:9	9	return DESTINATION ;
KEYWORD	2027:3	2027:3	10	return
LEAF_NODE	2027:3	2027:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2027:9	2027:9	10	;
LEAF_NODE	2028:2	2028:2	8	}
SELECTION	2031:2	2031:48	6	
KEYWORD	2031:2	2031:2	7	if
LEAF_NODE	2031:2	2031:2	8	if
LEAF_NODE	2031:4	2031:4	7	(
CONDITION	2031:5	2031:5	7	t2p -> tiff_compression == COMPRESSION_JPEG
EXPR	2031:5	2031:30	8	t2p -> tiff_compression == COMPRESSION_JPEG
FIELD	2031:5	2031:10	9	t2p -> tiff_compression
LEAF_NODE	2031:5	2031:5	10	t2p
LEAF_NODE	2031:8	2031:8	10	->
LEAF_NODE	2031:10	2031:10	10	tiff_compression
EQ_OPERATOR	2031:27	2031:27	9	==
LEAF_NODE	2031:27	2031:27	10	==
FIELD	2031:30	2031:30	9	COMPRESSION_JPEG
LEAF_NODE	2031:30	2031:30	10	COMPRESSION_JPEG
LEAF_NODE	2031:46	2031:46	7	)
STATEMENTS	2031:48	2062:2	7	
LEAF_NODE	2031:48	2031:48	8	{
STATEMENTS	2032:3	2061:3	8	
SIMPLE_DECL	2032:3	2032:19	9	uint32 count ; count = 0 ;
VAR_DECL	2032:3	2032:10	10	uint32 count ; count = 0
TYPE	2032:3	2032:3	11	uint32
TYPE_NAME	2032:3	2032:3	12	uint32
LEAF_NODE	2032:3	2032:3	13	uint32
NAME	2032:10	2032:10	11	count
LEAF_NODE	2032:10	2032:10	12	count
LEAF_NODE	0:0	0:0	11	;
INIT	2032:10	2032:10	11	count = 0
ASSIGN	2032:10	2032:18	12	count = 0
LVAL	2032:10	2032:10	13	count
NAME	2032:10	2032:10	14	count
LEAF_NODE	2032:10	2032:10	15	count
ASSIGN_OP	2032:16	2032:16	13	=
LEAF_NODE	2032:16	2032:16	14	=
RVAL	2032:18	2032:18	13	0
FIELD	2032:18	2032:18	14	0
LEAF_NODE	2032:18	2032:18	15	0
LEAF_NODE	2032:19	2032:19	10	;
SELECTION	2033:3	2033:66	9	
KEYWORD	2033:3	2033:3	10	if
LEAF_NODE	2033:3	2033:3	11	if
LEAF_NODE	2033:5	2033:5	10	(
CONDITION	2033:6	2033:6	10	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt ) != 0
EXPR	2033:6	2033:63	11	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt ) != 0
FUNCTION_CALL	2033:6	2033:58	12	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt )
CALLEE	2033:6	2033:6	13	TIFFGetField
LEAF_NODE	2033:6	2033:6	14	TIFFGetField
LEAF_NODE	2033:18	2033:18	13	(
ARGUMENT	2033:19	2033:19	13	input
FIELD	2033:19	2033:19	14	input
LEAF_NODE	2033:19	2033:19	15	input
LEAF_NODE	2033:24	2033:24	13	,
ARGUMENT	2033:26	2033:26	13	TIFFTAG_JPEGTABLES
FIELD	2033:26	2033:26	14	TIFFTAG_JPEGTABLES
LEAF_NODE	2033:26	2033:26	15	TIFFTAG_JPEGTABLES
LEAF_NODE	2033:44	2033:44	13	,
ARGUMENT	2033:46	2033:46	13	& count
UNARY_EXPR	2033:46	2033:47	14	& count
UNARY_OPERATOR	2033:46	2033:46	15	&
LEAF_NODE	2033:46	2033:46	16	&
FIELD	2033:47	2033:47	15	count
LEAF_NODE	2033:47	2033:47	16	count
LEAF_NODE	2033:52	2033:52	13	,
ARGUMENT	2033:54	2033:54	13	& jpt
UNARY_EXPR	2033:54	2033:55	14	& jpt
UNARY_OPERATOR	2033:54	2033:54	15	&
LEAF_NODE	2033:54	2033:54	16	&
FIELD	2033:55	2033:55	15	jpt
LEAF_NODE	2033:55	2033:55	16	jpt
LEAF_NODE	2033:58	2033:58	13	)
EQ_OPERATOR	2033:60	2033:60	12	!=
LEAF_NODE	2033:60	2033:60	13	!=
FIELD	2033:63	2033:63	12	0
LEAF_NODE	2033:63	2033:63	13	0
LEAF_NODE	2033:65	2033:65	10	)
STATEMENTS	2033:66	2038:3	10	
LEAF_NODE	2033:66	2033:66	11	{
STATEMENTS	2034:4	2034:4	11	
SELECTION	2034:4	2034:17	12	
KEYWORD	2034:4	2034:4	13	if
LEAF_NODE	2034:4	2034:4	14	if
LEAF_NODE	2034:6	2034:6	13	(
CONDITION	2034:7	2034:7	13	count > 4
EXPR	2034:7	2034:15	14	count > 4
FIELD	2034:7	2034:7	15	count
LEAF_NODE	2034:7	2034:7	16	count
REL_OPERATOR	2034:13	2034:13	15	>
LEAF_NODE	2034:13	2034:13	16	>
FIELD	2034:15	2034:15	15	4
LEAF_NODE	2034:15	2034:15	16	4
LEAF_NODE	2034:16	2034:16	13	)
STATEMENTS	2034:17	2037:4	13	
LEAF_NODE	2034:17	2034:17	14	{
STATEMENTS	2035:5	2036:5	14	
EXPR_STATEMENT	2035:5	2035:15	15	k += count ;
EXPR	2035:5	2035:5	16	k += count
ASSIGN	2035:5	2035:10	17	k += count
LVAL	2035:5	2035:5	18	k
FIELD	2035:5	2035:5	19	k
LEAF_NODE	2035:5	2035:5	20	k
ASSIGN_OP	2035:7	2035:7	18	+=
LEAF_NODE	2035:7	2035:7	19	+=
RVAL	2035:10	2035:10	18	count
FIELD	2035:10	2035:10	19	count
LEAF_NODE	2035:10	2035:10	20	count
LEAF_NODE	2035:15	2035:15	16	;
EXPR_STATEMENT	2036:5	2036:11	15	k -= 2 ;
EXPR	2036:5	2036:5	16	k -= 2
ASSIGN	2036:5	2036:10	17	k -= 2
LVAL	2036:5	2036:5	18	k
FIELD	2036:5	2036:5	19	k
LEAF_NODE	2036:5	2036:5	20	k
ASSIGN_OP	2036:7	2036:7	18	-=
LEAF_NODE	2036:7	2036:7	19	-=
RVAL	2036:10	2036:10	18	2
FIELD	2036:10	2036:10	19	2
LEAF_NODE	2036:10	2036:10	20	2
LEAF_NODE	2036:11	2036:11	16	;
LEAF_NODE	2037:4	2037:4	14	}
LEAF_NODE	2038:3	2038:3	11	}
SELECTION	2038:5	2038:10	9	
KEYWORD	2038:5	2038:5	10	else
LEAF_NODE	2038:5	2038:5	11	else
STATEMENTS	2038:10	2040:3	10	
LEAF_NODE	2038:10	2038:10	11	{
STATEMENTS	2039:4	2039:4	11	
EXPR_STATEMENT	2039:4	2039:9	12	k = 2 ;
EXPR	2039:4	2039:4	13	k = 2
ASSIGN	2039:4	2039:8	14	k = 2
LVAL	2039:4	2039:4	15	k
FIELD	2039:4	2039:4	16	k
LEAF_NODE	2039:4	2039:4	17	k
ASSIGN_OP	2039:6	2039:6	15	=
LEAF_NODE	2039:6	2039:6	16	=
RVAL	2039:8	2039:8	15	2
FIELD	2039:8	2039:8	16	2
LEAF_NODE	2039:8	2039:8	17	2
LEAF_NODE	2039:9	2039:9	13	;
LEAF_NODE	2040:3	2040:3	11	}
EXPR_STATEMENT	2041:3	2041:39	9	stripcount = TIFFNumberOfStrips ( input ) ;
EXPR	2041:3	2041:3	10	stripcount = TIFFNumberOfStrips ( input )
ASSIGN	2041:3	2041:14	11	stripcount = TIFFNumberOfStrips ( input )
LVAL	2041:3	2041:3	12	stripcount
FIELD	2041:3	2041:3	13	stripcount
LEAF_NODE	2041:3	2041:3	14	stripcount
ASSIGN_OP	2041:13	2041:13	12	=
LEAF_NODE	2041:13	2041:13	13	=
RVAL	2041:14	2041:14	12	TIFFNumberOfStrips ( input )
FUNCTION_CALL	2041:14	2041:38	13	TIFFNumberOfStrips ( input )
CALLEE	2041:14	2041:14	14	TIFFNumberOfStrips
LEAF_NODE	2041:14	2041:14	15	TIFFNumberOfStrips
LEAF_NODE	2041:32	2041:32	14	(
ARGUMENT	2041:33	2041:33	14	input
FIELD	2041:33	2041:33	15	input
LEAF_NODE	2041:33	2041:33	16	input
LEAF_NODE	2041:38	2041:38	14	)
LEAF_NODE	2041:39	2041:39	10	;
SELECTION	2042:3	2042:58	9	
KEYWORD	2042:3	2042:3	10	if
LEAF_NODE	2042:3	2042:3	11	if
LEAF_NODE	2042:5	2042:5	10	(
CONDITION	2042:6	2042:6	10	! TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
EXPR	2042:6	2042:6	11	! TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
UNARY_EXPR	2042:6	2042:7	12	! TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
UNARY_OPERATOR	2042:6	2042:6	13	!
LEAF_NODE	2042:6	2042:6	14	!
FUNCTION_CALL	2042:7	2042:56	13	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
CALLEE	2042:7	2042:7	14	TIFFGetField
LEAF_NODE	2042:7	2042:7	15	TIFFGetField
LEAF_NODE	2042:19	2042:19	14	(
ARGUMENT	2042:20	2042:20	14	input
FIELD	2042:20	2042:20	15	input
LEAF_NODE	2042:20	2042:20	16	input
LEAF_NODE	2042:25	2042:25	14	,
ARGUMENT	2042:27	2042:27	14	TIFFTAG_STRIPBYTECOUNTS
FIELD	2042:27	2042:27	15	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2042:27	2042:27	16	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2042:50	2042:50	14	,
ARGUMENT	2042:52	2042:52	14	& sbc
UNARY_EXPR	2042:52	2042:53	15	& sbc
UNARY_OPERATOR	2042:52	2042:52	16	&
LEAF_NODE	2042:52	2042:52	17	&
FIELD	2042:53	2042:53	16	sbc
LEAF_NODE	2042:53	2042:53	17	sbc
LEAF_NODE	2042:56	2042:56	14	)
LEAF_NODE	2042:57	2042:57	10	)
STATEMENTS	2042:58	2048:3	10	
LEAF_NODE	2042:58	2042:58	11	{
STATEMENTS	2043:4	2047:4	11	
EXPR_STATEMENT	2043:4	2045:25	12	TIFFError ( TIFF2PDF_MODULE , "Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS" , TIFFFileName ( input ) ) ;
EXPR	2043:4	2043:4	13	TIFFError ( TIFF2PDF_MODULE , "Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS" , TIFFFileName ( input ) )
FUNCTION_CALL	2043:4	2045:24	14	TIFFError ( TIFF2PDF_MODULE , "Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS" , TIFFFileName ( input ) )
CALLEE	2043:4	2043:4	15	TIFFError
LEAF_NODE	2043:4	2043:4	16	TIFFError
LEAF_NODE	2043:13	2043:13	15	(
ARGUMENT	2043:14	2043:14	15	TIFF2PDF_MODULE
FIELD	2043:14	2043:14	16	TIFF2PDF_MODULE
LEAF_NODE	2043:14	2043:14	17	TIFF2PDF_MODULE
LEAF_NODE	2043:29	2043:29	15	,
ARGUMENT	2044:5	2044:5	15	"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS"
FIELD	2044:5	2044:5	16	"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS"
LEAF_NODE	2044:5	2044:5	17	"Input file %s missing field: TIFFTAG_STRIPBYTECOUNTS"
LEAF_NODE	2044:59	2044:59	15	,
ARGUMENT	2045:5	2045:5	15	TIFFFileName ( input )
FUNCTION_CALL	2045:5	2045:23	16	TIFFFileName ( input )
CALLEE	2045:5	2045:5	17	TIFFFileName
LEAF_NODE	2045:5	2045:5	18	TIFFFileName
LEAF_NODE	2045:17	2045:17	17	(
ARGUMENT	2045:18	2045:18	17	input
FIELD	2045:18	2045:18	18	input
LEAF_NODE	2045:18	2045:18	19	input
LEAF_NODE	2045:23	2045:23	17	)
LEAF_NODE	2045:24	2045:24	15	)
LEAF_NODE	2045:25	2045:25	13	;
EXPR_STATEMENT	2046:4	2046:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2046:4	2046:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2046:4	2046:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2046:4	2046:4	15	t2p -> t2p_error
FIELD	2046:4	2046:9	16	t2p -> t2p_error
LEAF_NODE	2046:4	2046:4	17	t2p
LEAF_NODE	2046:7	2046:7	17	->
LEAF_NODE	2046:9	2046:9	17	t2p_error
ASSIGN_OP	2046:19	2046:19	15	=
LEAF_NODE	2046:19	2046:19	16	=
RVAL	2046:21	2046:21	15	T2P_ERR_ERROR
FIELD	2046:21	2046:21	16	T2P_ERR_ERROR
LEAF_NODE	2046:21	2046:21	17	T2P_ERR_ERROR
LEAF_NODE	2046:34	2046:34	13	;
JUMP_STATEMENT	2047:4	2047:10	12	return DESTINATION ;
KEYWORD	2047:4	2047:4	13	return
LEAF_NODE	2047:4	2047:4	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2047:10	2047:10	13	;
LEAF_NODE	2048:3	2048:3	11	}
ITERATION	2049:3	2049:28	9	
KEYWORD	2049:3	2049:3	10	for
LEAF_NODE	2049:3	2049:3	11	for
LEAF_NODE	2049:6	2049:6	10	(
FOR_INIT	2049:7	2049:10	10	i = 0 ;
EXPR	2049:7	2049:7	11	i = 0
ASSIGN	2049:7	2049:9	12	i = 0
LVAL	2049:7	2049:7	13	i
FIELD	2049:7	2049:7	14	i
LEAF_NODE	2049:7	2049:7	15	i
ASSIGN_OP	2049:8	2049:8	13	=
LEAF_NODE	2049:8	2049:8	14	=
RVAL	2049:9	2049:9	13	0
FIELD	2049:9	2049:9	14	0
LEAF_NODE	2049:9	2049:9	15	0
LEAF_NODE	2049:10	2049:10	11	;
CONDITION	2049:11	2049:11	10	i < stripcount
EXPR	2049:11	2049:13	11	i < stripcount
FIELD	2049:11	2049:11	12	i
LEAF_NODE	2049:11	2049:11	13	i
REL_OPERATOR	2049:12	2049:12	12	<
LEAF_NODE	2049:12	2049:12	13	<
FIELD	2049:13	2049:13	12	stripcount
LEAF_NODE	2049:13	2049:13	13	stripcount
LEAF_NODE	2049:23	2049:23	10	;
FOR_EXPR	2049:24	2049:24	10	i ++
EXPR	2049:24	2049:24	11	i ++
FIELD	2049:24	2049:25	12	i ++
LEAF_NODE	2049:24	2049:24	13	i
LEAF_NODE	2049:25	2049:25	13	++
LEAF_NODE	2049:27	2049:27	10	)
STATEMENTS	2049:28	2053:3	10	
LEAF_NODE	2049:28	2049:28	11	{
STATEMENTS	2050:4	2052:4	11	
EXPR_STATEMENT	2050:4	2050:34	12	k = checkAdd64 ( k , sbc [ i ] , t2p ) ;
EXPR	2050:4	2050:4	13	k = checkAdd64 ( k , sbc [ i ] , t2p )
ASSIGN	2050:4	2050:8	14	k = checkAdd64 ( k , sbc [ i ] , t2p )
LVAL	2050:4	2050:4	15	k
FIELD	2050:4	2050:4	16	k
LEAF_NODE	2050:4	2050:4	17	k
ASSIGN_OP	2050:6	2050:6	15	=
LEAF_NODE	2050:6	2050:6	16	=
RVAL	2050:8	2050:8	15	checkAdd64 ( k , sbc [ i ] , t2p )
FUNCTION_CALL	2050:8	2050:33	16	checkAdd64 ( k , sbc [ i ] , t2p )
CALLEE	2050:8	2050:8	17	checkAdd64
LEAF_NODE	2050:8	2050:8	18	checkAdd64
LEAF_NODE	2050:18	2050:18	17	(
ARGUMENT	2050:19	2050:19	17	k
FIELD	2050:19	2050:19	18	k
LEAF_NODE	2050:19	2050:19	19	k
LEAF_NODE	2050:20	2050:20	17	,
ARGUMENT	2050:22	2050:22	17	sbc [ i ]
FIELD	2050:22	2050:27	18	sbc [ i ]
LEAF_NODE	2050:22	2050:22	19	sbc
LEAF_NODE	2050:25	2050:25	19	[
EXPR	2050:26	2050:26	19	i
FIELD	2050:26	2050:26	20	i
LEAF_NODE	2050:26	2050:26	21	i
LEAF_NODE	2050:27	2050:27	19	]
LEAF_NODE	2050:28	2050:28	17	,
ARGUMENT	2050:30	2050:30	17	t2p
FIELD	2050:30	2050:30	18	t2p
LEAF_NODE	2050:30	2050:30	19	t2p
LEAF_NODE	2050:33	2050:33	17	)
LEAF_NODE	2050:34	2050:34	13	;
EXPR_STATEMENT	2051:4	2051:9	12	k -= 2 ;
EXPR	2051:4	2051:4	13	k -= 2
ASSIGN	2051:4	2051:8	14	k -= 2
LVAL	2051:4	2051:4	15	k
FIELD	2051:4	2051:4	16	k
LEAF_NODE	2051:4	2051:4	17	k
ASSIGN_OP	2051:6	2051:6	15	-=
LEAF_NODE	2051:6	2051:6	16	-=
RVAL	2051:8	2051:8	15	2
FIELD	2051:8	2051:8	16	2
LEAF_NODE	2051:8	2051:8	17	2
LEAF_NODE	2051:9	2051:9	13	;
EXPR_STATEMENT	2052:4	2052:9	12	k += 2 ;
EXPR	2052:4	2052:4	13	k += 2
ASSIGN	2052:4	2052:8	14	k += 2
LVAL	2052:4	2052:4	15	k
FIELD	2052:4	2052:4	16	k
LEAF_NODE	2052:4	2052:4	17	k
ASSIGN_OP	2052:6	2052:6	15	+=
LEAF_NODE	2052:6	2052:6	16	+=
RVAL	2052:8	2052:8	15	2
FIELD	2052:8	2052:8	16	2
LEAF_NODE	2052:8	2052:8	17	2
LEAF_NODE	2052:9	2052:9	13	;
LEAF_NODE	2053:3	2053:3	11	}
EXPR_STATEMENT	2054:3	2054:28	9	k = checkAdd64 ( k , 2 , t2p ) ;
EXPR	2054:3	2054:3	10	k = checkAdd64 ( k , 2 , t2p )
ASSIGN	2054:3	2054:7	11	k = checkAdd64 ( k , 2 , t2p )
LVAL	2054:3	2054:3	12	k
FIELD	2054:3	2054:3	13	k
LEAF_NODE	2054:3	2054:3	14	k
ASSIGN_OP	2054:5	2054:5	12	=
LEAF_NODE	2054:5	2054:5	13	=
RVAL	2054:7	2054:7	12	checkAdd64 ( k , 2 , t2p )
FUNCTION_CALL	2054:7	2054:27	13	checkAdd64 ( k , 2 , t2p )
CALLEE	2054:7	2054:7	14	checkAdd64
LEAF_NODE	2054:7	2054:7	15	checkAdd64
LEAF_NODE	2054:17	2054:17	14	(
ARGUMENT	2054:18	2054:18	14	k
FIELD	2054:18	2054:18	15	k
LEAF_NODE	2054:18	2054:18	16	k
LEAF_NODE	2054:19	2054:19	14	,
ARGUMENT	2054:21	2054:21	14	2
FIELD	2054:21	2054:21	15	2
LEAF_NODE	2054:21	2054:21	16	2
LEAF_NODE	2054:22	2054:22	14	,
ARGUMENT	2054:24	2054:24	14	t2p
FIELD	2054:24	2054:24	15	t2p
LEAF_NODE	2054:24	2054:24	16	t2p
LEAF_NODE	2054:27	2054:27	14	)
LEAF_NODE	2054:28	2054:28	10	;
EXPR_STATEMENT	2055:3	2055:28	9	k = checkAdd64 ( k , 6 , t2p ) ;
EXPR	2055:3	2055:3	10	k = checkAdd64 ( k , 6 , t2p )
ASSIGN	2055:3	2055:7	11	k = checkAdd64 ( k , 6 , t2p )
LVAL	2055:3	2055:3	12	k
FIELD	2055:3	2055:3	13	k
LEAF_NODE	2055:3	2055:3	14	k
ASSIGN_OP	2055:5	2055:5	12	=
LEAF_NODE	2055:5	2055:5	13	=
RVAL	2055:7	2055:7	12	checkAdd64 ( k , 6 , t2p )
FUNCTION_CALL	2055:7	2055:27	13	checkAdd64 ( k , 6 , t2p )
CALLEE	2055:7	2055:7	14	checkAdd64
LEAF_NODE	2055:7	2055:7	15	checkAdd64
LEAF_NODE	2055:17	2055:17	14	(
ARGUMENT	2055:18	2055:18	14	k
FIELD	2055:18	2055:18	15	k
LEAF_NODE	2055:18	2055:18	16	k
LEAF_NODE	2055:19	2055:19	14	,
ARGUMENT	2055:21	2055:21	14	6
FIELD	2055:21	2055:21	15	6
LEAF_NODE	2055:21	2055:21	16	6
LEAF_NODE	2055:22	2055:22	14	,
ARGUMENT	2055:24	2055:24	14	t2p
FIELD	2055:24	2055:24	15	t2p
LEAF_NODE	2055:24	2055:24	16	t2p
LEAF_NODE	2055:27	2055:27	14	)
LEAF_NODE	2055:28	2055:28	10	;
EXPR_STATEMENT	2056:3	2056:35	9	t2p -> tiff_datasize = ( tsize_t ) k ;
EXPR	2056:3	2056:3	10	t2p -> tiff_datasize = ( tsize_t ) k
ASSIGN	2056:3	2056:24	11	t2p -> tiff_datasize = ( tsize_t ) k
LVAL	2056:3	2056:3	12	t2p -> tiff_datasize
FIELD	2056:3	2056:8	13	t2p -> tiff_datasize
LEAF_NODE	2056:3	2056:3	14	t2p
LEAF_NODE	2056:6	2056:6	14	->
LEAF_NODE	2056:8	2056:8	14	tiff_datasize
ASSIGN_OP	2056:22	2056:22	12	=
LEAF_NODE	2056:22	2056:22	13	=
RVAL	2056:24	2056:34	12	( tsize_t ) k
LEAF_NODE	2056:24	2056:24	13	(
TYPE_NAME	2056:25	2056:25	13	tsize_t
LEAF_NODE	2056:25	2056:25	14	tsize_t
LEAF_NODE	2056:32	2056:32	13	)
FIELD	2056:34	2056:34	13	k
LEAF_NODE	2056:34	2056:34	14	k
LEAF_NODE	2056:35	2056:35	10	;
SELECTION	2057:3	2057:41	9	
KEYWORD	2057:3	2057:3	10	if
LEAF_NODE	2057:3	2057:3	11	if
LEAF_NODE	2057:6	2057:6	10	(
CONDITION	2057:7	2057:7	10	( uint64 ) t2p -> tiff_datasize != k
EXPR	2057:7	2057:38	11	( uint64 ) t2p -> tiff_datasize != k
LEAF_NODE	2057:7	2057:7	12	(
TYPE_NAME	2057:8	2057:8	12	uint64
LEAF_NODE	2057:8	2057:8	13	uint64
LEAF_NODE	2057:14	2057:14	12	)
FIELD	2057:16	2057:21	12	t2p -> tiff_datasize
LEAF_NODE	2057:16	2057:16	13	t2p
LEAF_NODE	2057:19	2057:19	13	->
LEAF_NODE	2057:21	2057:21	13	tiff_datasize
EQ_OPERATOR	2057:35	2057:35	12	!=
LEAF_NODE	2057:35	2057:35	13	!=
FIELD	2057:38	2057:38	12	k
LEAF_NODE	2057:38	2057:38	13	k
LEAF_NODE	2057:39	2057:39	10	)
STATEMENTS	2057:41	2060:3	10	
LEAF_NODE	2057:41	2057:41	11	{
STATEMENTS	2058:4	2059:4	11	
EXPR_STATEMENT	2058:4	2058:50	12	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	2058:4	2058:4	13	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	2058:4	2058:49	14	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	2058:4	2058:4	15	TIFFError
LEAF_NODE	2058:4	2058:4	16	TIFFError
LEAF_NODE	2058:13	2058:13	15	(
ARGUMENT	2058:14	2058:14	15	TIFF2PDF_MODULE
FIELD	2058:14	2058:14	16	TIFF2PDF_MODULE
LEAF_NODE	2058:14	2058:14	17	TIFF2PDF_MODULE
LEAF_NODE	2058:29	2058:29	15	,
ARGUMENT	2058:31	2058:31	15	"Integer overflow"
FIELD	2058:31	2058:31	16	"Integer overflow"
LEAF_NODE	2058:31	2058:31	17	"Integer overflow"
LEAF_NODE	2058:49	2058:49	15	)
LEAF_NODE	2058:50	2058:50	13	;
EXPR_STATEMENT	2059:4	2059:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2059:4	2059:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2059:4	2059:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2059:4	2059:4	15	t2p -> t2p_error
FIELD	2059:4	2059:9	16	t2p -> t2p_error
LEAF_NODE	2059:4	2059:4	17	t2p
LEAF_NODE	2059:7	2059:7	17	->
LEAF_NODE	2059:9	2059:9	17	t2p_error
ASSIGN_OP	2059:19	2059:19	15	=
LEAF_NODE	2059:19	2059:19	16	=
RVAL	2059:21	2059:21	15	T2P_ERR_ERROR
FIELD	2059:21	2059:21	16	T2P_ERR_ERROR
LEAF_NODE	2059:21	2059:21	17	T2P_ERR_ERROR
LEAF_NODE	2059:34	2059:34	13	;
LEAF_NODE	2060:3	2060:3	11	}
JUMP_STATEMENT	2061:3	2061:9	9	return DESTINATION ;
KEYWORD	2061:3	2061:3	10	return
LEAF_NODE	2061:3	2061:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2061:9	2061:9	10	;
LEAF_NODE	2062:2	2062:2	8	}
EXPR_STATEMENT	2064:2	2064:10	6	( void ) 0 ;
EXPR	2064:2	2064:9	7	( void ) 0
LEAF_NODE	2064:2	2064:2	8	(
TYPE_NAME	2064:3	2064:3	8	void
LEAF_NODE	2064:3	2064:3	9	void
LEAF_NODE	2064:7	2064:7	8	)
FIELD	2064:9	2064:9	8	0
LEAF_NODE	2064:9	2064:9	9	0
LEAF_NODE	2064:10	2064:10	7	;
LEAF_NODE	2065:1	2065:1	5	}
EXPR_STATEMENT	2066:1	2066:68	3	k = checkMultiply64 ( TIFFScanlineSize ( input ) , t2p -> tiff_length , t2p ) ;
EXPR	2066:1	2066:1	4	k = checkMultiply64 ( TIFFScanlineSize ( input ) , t2p -> tiff_length , t2p )
ASSIGN	2066:1	2066:5	5	k = checkMultiply64 ( TIFFScanlineSize ( input ) , t2p -> tiff_length , t2p )
LVAL	2066:1	2066:1	6	k
FIELD	2066:1	2066:1	7	k
LEAF_NODE	2066:1	2066:1	8	k
ASSIGN_OP	2066:3	2066:3	6	=
LEAF_NODE	2066:3	2066:3	7	=
RVAL	2066:5	2066:5	6	checkMultiply64 ( TIFFScanlineSize ( input ) , t2p -> tiff_length , t2p )
FUNCTION_CALL	2066:5	2066:67	7	checkMultiply64 ( TIFFScanlineSize ( input ) , t2p -> tiff_length , t2p )
CALLEE	2066:5	2066:5	8	checkMultiply64
LEAF_NODE	2066:5	2066:5	9	checkMultiply64
LEAF_NODE	2066:20	2066:20	8	(
ARGUMENT	2066:21	2066:21	8	TIFFScanlineSize ( input )
FUNCTION_CALL	2066:21	2066:43	9	TIFFScanlineSize ( input )
CALLEE	2066:21	2066:21	10	TIFFScanlineSize
LEAF_NODE	2066:21	2066:21	11	TIFFScanlineSize
LEAF_NODE	2066:37	2066:37	10	(
ARGUMENT	2066:38	2066:38	10	input
FIELD	2066:38	2066:38	11	input
LEAF_NODE	2066:38	2066:38	12	input
LEAF_NODE	2066:43	2066:43	10	)
LEAF_NODE	2066:44	2066:44	8	,
ARGUMENT	2066:46	2066:46	8	t2p -> tiff_length
FIELD	2066:46	2066:51	9	t2p -> tiff_length
LEAF_NODE	2066:46	2066:46	10	t2p
LEAF_NODE	2066:49	2066:49	10	->
LEAF_NODE	2066:51	2066:51	10	tiff_length
LEAF_NODE	2066:62	2066:62	8	,
ARGUMENT	2066:64	2066:64	8	t2p
FIELD	2066:64	2066:64	9	t2p
LEAF_NODE	2066:64	2066:64	10	t2p
LEAF_NODE	2066:67	2066:67	8	)
LEAF_NODE	2066:68	2066:68	4	;
SELECTION	2067:1	2067:44	3	
KEYWORD	2067:1	2067:1	4	if
LEAF_NODE	2067:1	2067:1	5	if
LEAF_NODE	2067:3	2067:3	4	(
CONDITION	2067:4	2067:4	4	t2p -> tiff_planar == PLANARCONFIG_SEPARATE
EXPR	2067:4	2067:22	5	t2p -> tiff_planar == PLANARCONFIG_SEPARATE
FIELD	2067:4	2067:9	6	t2p -> tiff_planar
LEAF_NODE	2067:4	2067:4	7	t2p
LEAF_NODE	2067:7	2067:7	7	->
LEAF_NODE	2067:9	2067:9	7	tiff_planar
EQ_OPERATOR	2067:20	2067:20	6	==
LEAF_NODE	2067:20	2067:20	7	==
FIELD	2067:22	2067:22	6	PLANARCONFIG_SEPARATE
LEAF_NODE	2067:22	2067:22	7	PLANARCONFIG_SEPARATE
LEAF_NODE	2067:43	2067:43	4	)
STATEMENTS	2067:44	2069:1	4	
LEAF_NODE	2067:44	2067:44	5	{
STATEMENTS	2068:2	2068:2	5	
EXPR_STATEMENT	2068:2	2068:56	6	k = checkMultiply64 ( k , t2p -> tiff_samplesperpixel , t2p ) ;
EXPR	2068:2	2068:2	7	k = checkMultiply64 ( k , t2p -> tiff_samplesperpixel , t2p )
ASSIGN	2068:2	2068:6	8	k = checkMultiply64 ( k , t2p -> tiff_samplesperpixel , t2p )
LVAL	2068:2	2068:2	9	k
FIELD	2068:2	2068:2	10	k
LEAF_NODE	2068:2	2068:2	11	k
ASSIGN_OP	2068:4	2068:4	9	=
LEAF_NODE	2068:4	2068:4	10	=
RVAL	2068:6	2068:6	9	checkMultiply64 ( k , t2p -> tiff_samplesperpixel , t2p )
FUNCTION_CALL	2068:6	2068:55	10	checkMultiply64 ( k , t2p -> tiff_samplesperpixel , t2p )
CALLEE	2068:6	2068:6	11	checkMultiply64
LEAF_NODE	2068:6	2068:6	12	checkMultiply64
LEAF_NODE	2068:21	2068:21	11	(
ARGUMENT	2068:22	2068:22	11	k
FIELD	2068:22	2068:22	12	k
LEAF_NODE	2068:22	2068:22	13	k
LEAF_NODE	2068:23	2068:23	11	,
ARGUMENT	2068:25	2068:25	11	t2p -> tiff_samplesperpixel
FIELD	2068:25	2068:30	12	t2p -> tiff_samplesperpixel
LEAF_NODE	2068:25	2068:25	13	t2p
LEAF_NODE	2068:28	2068:28	13	->
LEAF_NODE	2068:30	2068:30	13	tiff_samplesperpixel
LEAF_NODE	2068:50	2068:50	11	,
ARGUMENT	2068:52	2068:52	11	t2p
FIELD	2068:52	2068:52	12	t2p
LEAF_NODE	2068:52	2068:52	13	t2p
LEAF_NODE	2068:55	2068:55	11	)
LEAF_NODE	2068:56	2068:56	7	;
LEAF_NODE	2069:1	2069:1	5	}
SELECTION	2070:1	2070:13	3	
KEYWORD	2070:1	2070:1	4	if
LEAF_NODE	2070:1	2070:1	5	if
LEAF_NODE	2070:4	2070:4	4	(
CONDITION	2070:5	2070:5	4	k == 0
EXPR	2070:5	2070:10	5	k == 0
FIELD	2070:5	2070:5	6	k
LEAF_NODE	2070:5	2070:5	7	k
EQ_OPERATOR	2070:7	2070:7	6	==
LEAF_NODE	2070:7	2070:7	7	==
FIELD	2070:10	2070:10	6	0
LEAF_NODE	2070:10	2070:10	7	0
LEAF_NODE	2070:11	2070:11	4	)
STATEMENTS	2070:13	2073:1	4	
LEAF_NODE	2070:13	2070:13	5	{
STATEMENTS	2072:2	2072:2	5	
EXPR_STATEMENT	2072:2	2072:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2072:2	2072:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2072:2	2072:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2072:2	2072:2	9	t2p -> t2p_error
FIELD	2072:2	2072:7	10	t2p -> t2p_error
LEAF_NODE	2072:2	2072:2	11	t2p
LEAF_NODE	2072:5	2072:5	11	->
LEAF_NODE	2072:7	2072:7	11	t2p_error
ASSIGN_OP	2072:17	2072:17	9	=
LEAF_NODE	2072:17	2072:17	10	=
RVAL	2072:19	2072:19	9	T2P_ERR_ERROR
FIELD	2072:19	2072:19	10	T2P_ERR_ERROR
LEAF_NODE	2072:19	2072:19	11	T2P_ERR_ERROR
LEAF_NODE	2072:32	2072:32	7	;
LEAF_NODE	2073:1	2073:1	5	}
EXPR_STATEMENT	2075:1	2075:33	3	t2p -> tiff_datasize = ( tsize_t ) k ;
EXPR	2075:1	2075:1	4	t2p -> tiff_datasize = ( tsize_t ) k
ASSIGN	2075:1	2075:22	5	t2p -> tiff_datasize = ( tsize_t ) k
LVAL	2075:1	2075:1	6	t2p -> tiff_datasize
FIELD	2075:1	2075:6	7	t2p -> tiff_datasize
LEAF_NODE	2075:1	2075:1	8	t2p
LEAF_NODE	2075:4	2075:4	8	->
LEAF_NODE	2075:6	2075:6	8	tiff_datasize
ASSIGN_OP	2075:20	2075:20	6	=
LEAF_NODE	2075:20	2075:20	7	=
RVAL	2075:22	2075:32	6	( tsize_t ) k
LEAF_NODE	2075:22	2075:22	7	(
TYPE_NAME	2075:23	2075:23	7	tsize_t
LEAF_NODE	2075:23	2075:23	8	tsize_t
LEAF_NODE	2075:30	2075:30	7	)
FIELD	2075:32	2075:32	7	k
LEAF_NODE	2075:32	2075:32	8	k
LEAF_NODE	2075:33	2075:33	4	;
SELECTION	2076:1	2076:39	3	
KEYWORD	2076:1	2076:1	4	if
LEAF_NODE	2076:1	2076:1	5	if
LEAF_NODE	2076:4	2076:4	4	(
CONDITION	2076:5	2076:5	4	( uint64 ) t2p -> tiff_datasize != k
EXPR	2076:5	2076:36	5	( uint64 ) t2p -> tiff_datasize != k
LEAF_NODE	2076:5	2076:5	6	(
TYPE_NAME	2076:6	2076:6	6	uint64
LEAF_NODE	2076:6	2076:6	7	uint64
LEAF_NODE	2076:12	2076:12	6	)
FIELD	2076:14	2076:19	6	t2p -> tiff_datasize
LEAF_NODE	2076:14	2076:14	7	t2p
LEAF_NODE	2076:17	2076:17	7	->
LEAF_NODE	2076:19	2076:19	7	tiff_datasize
EQ_OPERATOR	2076:33	2076:33	6	!=
LEAF_NODE	2076:33	2076:33	7	!=
FIELD	2076:36	2076:36	6	k
LEAF_NODE	2076:36	2076:36	7	k
LEAF_NODE	2076:37	2076:37	4	)
STATEMENTS	2076:39	2079:1	4	
LEAF_NODE	2076:39	2076:39	5	{
STATEMENTS	2077:2	2078:2	5	
EXPR_STATEMENT	2077:2	2077:48	6	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	2077:2	2077:2	7	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	2077:2	2077:47	8	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	2077:2	2077:2	9	TIFFError
LEAF_NODE	2077:2	2077:2	10	TIFFError
LEAF_NODE	2077:11	2077:11	9	(
ARGUMENT	2077:12	2077:12	9	TIFF2PDF_MODULE
FIELD	2077:12	2077:12	10	TIFF2PDF_MODULE
LEAF_NODE	2077:12	2077:12	11	TIFF2PDF_MODULE
LEAF_NODE	2077:27	2077:27	9	,
ARGUMENT	2077:29	2077:29	9	"Integer overflow"
FIELD	2077:29	2077:29	10	"Integer overflow"
LEAF_NODE	2077:29	2077:29	11	"Integer overflow"
LEAF_NODE	2077:47	2077:47	9	)
LEAF_NODE	2077:48	2077:48	7	;
EXPR_STATEMENT	2078:2	2078:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2078:2	2078:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2078:2	2078:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2078:2	2078:2	9	t2p -> t2p_error
FIELD	2078:2	2078:7	10	t2p -> t2p_error
LEAF_NODE	2078:2	2078:2	11	t2p
LEAF_NODE	2078:5	2078:5	11	->
LEAF_NODE	2078:7	2078:7	11	t2p_error
ASSIGN_OP	2078:17	2078:17	9	=
LEAF_NODE	2078:17	2078:17	10	=
RVAL	2078:19	2078:19	9	T2P_ERR_ERROR
FIELD	2078:19	2078:19	10	T2P_ERR_ERROR
LEAF_NODE	2078:19	2078:19	11	T2P_ERR_ERROR
LEAF_NODE	2078:32	2078:32	7	;
LEAF_NODE	2079:1	2079:1	5	}
JUMP_STATEMENT	2081:1	2081:7	3	return DESTINATION ;
KEYWORD	2081:1	2081:1	4	return
LEAF_NODE	2081:1	2081:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	2081:7	2081:7	4	;
LEAF_NODE	2082:0	2082:0	2	}
FUNCTION_DEF	2089:0	2156:0	1	
RETURN_TYPE	2089:0	2089:0	2	void
TYPE_NAME	2089:0	2089:0	3	void
LEAF_NODE	2089:0	2089:0	4	void
FUNCTION_NAME	2089:5	2089:5	2	t2p_read_tiff_size_tile
LEAF_NODE	2089:5	2089:5	3	t2p_read_tiff_size_tile
PARAMETER_LIST	2089:28	2089:64	2	( T2P * t2p , TIFF * input , ttile_t tile )
LEAF_NODE	2089:28	2089:28	3	(
PARAMETER_DECL	2089:29	2089:34	3	T2P * t2p
TYPE	2089:29	2089:32	4	T2P *
TYPE_NAME	2089:29	2089:29	5	T2P
LEAF_NODE	2089:29	2089:29	6	T2P
POINTER	2089:32	2089:32	5	*
LEAF_NODE	2089:32	2089:32	6	*
NAME	2089:34	2089:34	4	t2p
LEAF_NODE	2089:34	2089:34	5	t2p
LEAF_NODE	2089:37	2089:37	3	,
PARAMETER_DECL	2089:39	2089:45	3	TIFF * input
TYPE	2089:39	2089:43	4	TIFF *
TYPE_NAME	2089:39	2089:39	5	TIFF
LEAF_NODE	2089:39	2089:39	6	TIFF
POINTER	2089:43	2089:43	5	*
LEAF_NODE	2089:43	2089:43	6	*
NAME	2089:45	2089:45	4	input
LEAF_NODE	2089:45	2089:45	5	input
LEAF_NODE	2089:50	2089:50	3	,
PARAMETER_DECL	2089:52	2089:60	3	ttile_t tile
TYPE	2089:52	2089:52	4	ttile_t
TYPE_NAME	2089:52	2089:52	5	ttile_t
LEAF_NODE	2089:52	2089:52	6	ttile_t
NAME	2089:60	2089:60	4	tile
LEAF_NODE	2089:60	2089:60	5	tile
LEAF_NODE	2089:64	2089:64	3	)
LEAF_NODE	2089:65	2089:65	2	{
STATEMENTS	2091:1	2155:1	2	
SIMPLE_DECL	2091:1	2091:19	3	uint64 * tbc ; tbc = NULL ;
VAR_DECL	2091:1	2091:9	4	uint64 * tbc ; tbc = NULL
TYPE	2091:1	2091:7	5	uint64 *
TYPE_NAME	2091:1	2091:1	6	uint64
LEAF_NODE	2091:1	2091:1	7	uint64
POINTER	2091:7	2091:7	6	*
LEAF_NODE	2091:7	2091:7	7	*
NAME	2091:9	2091:9	5	tbc
LEAF_NODE	2091:9	2091:9	6	tbc
LEAF_NODE	0:0	0:0	5	;
INIT	2091:9	2091:9	5	tbc = NULL
ASSIGN	2091:9	2091:15	6	tbc = NULL
LVAL	2091:9	2091:9	7	tbc
NAME	2091:9	2091:9	8	tbc
LEAF_NODE	2091:9	2091:9	9	tbc
ASSIGN_OP	2091:13	2091:13	7	=
LEAF_NODE	2091:13	2091:13	8	=
RVAL	2091:15	2091:15	7	NULL
FIELD	2091:15	2091:15	8	NULL
LEAF_NODE	2091:15	2091:15	9	NULL
LEAF_NODE	2091:19	2091:19	4	;
SIMPLE_DECL	2092:1	2092:14	3	uint16 edge ; edge = 0 ;
VAR_DECL	2092:1	2092:8	4	uint16 edge ; edge = 0
TYPE	2092:1	2092:1	5	uint16
TYPE_NAME	2092:1	2092:1	6	uint16
LEAF_NODE	2092:1	2092:1	7	uint16
NAME	2092:8	2092:8	5	edge
LEAF_NODE	2092:8	2092:8	6	edge
LEAF_NODE	0:0	0:0	5	;
INIT	2092:8	2092:8	5	edge = 0
ASSIGN	2092:8	2092:13	6	edge = 0
LVAL	2092:8	2092:8	7	edge
NAME	2092:8	2092:8	8	edge
LEAF_NODE	2092:8	2092:8	9	edge
ASSIGN_OP	2092:12	2092:12	7	=
LEAF_NODE	2092:12	2092:12	8	=
RVAL	2092:13	2092:13	7	0
FIELD	2092:13	2092:13	8	0
LEAF_NODE	2092:13	2092:13	9	0
LEAF_NODE	2092:14	2092:14	4	;
SIMPLE_DECL	2094:1	2094:19	3	unsigned char * jpt ;
VAR_DECL	2094:1	2094:16	4	unsigned char * jpt
TYPE	2094:1	2094:14	5	unsigned char *
TYPE_NAME	2094:1	2094:10	6	unsigned char
LEAF_NODE	2094:1	2094:1	7	unsigned
LEAF_NODE	2094:10	2094:10	7	char
POINTER	2094:14	2094:14	6	*
LEAF_NODE	2094:14	2094:14	7	*
NAME	2094:16	2094:16	5	jpt
LEAF_NODE	2094:16	2094:16	6	jpt
LEAF_NODE	2094:19	2094:19	4	;
SIMPLE_DECL	2096:8	2096:16	3	uint64 k ;
VAR_DECL	2096:8	2096:15	4	uint64 k
TYPE	2096:8	2096:8	5	uint64
TYPE_NAME	2096:8	2096:8	6	uint64
LEAF_NODE	2096:8	2096:8	7	uint64
NAME	2096:15	2096:15	5	k
LEAF_NODE	2096:15	2096:15	6	k
LEAF_NODE	2096:16	2096:16	4	;
EXPR_STATEMENT	2098:1	2098:69	3	edge |= t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile ) ;
EXPR	2098:1	2098:1	4	edge |= t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
ASSIGN	2098:1	2098:9	5	edge |= t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
LVAL	2098:1	2098:1	6	edge
FIELD	2098:1	2098:1	7	edge
LEAF_NODE	2098:1	2098:1	8	edge
ASSIGN_OP	2098:6	2098:6	6	|=
LEAF_NODE	2098:6	2098:6	7	|=
RVAL	2098:9	2098:9	6	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
FUNCTION_CALL	2098:9	2098:68	7	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
CALLEE	2098:9	2098:9	8	t2p_tile_is_right_edge
LEAF_NODE	2098:9	2098:9	9	t2p_tile_is_right_edge
LEAF_NODE	2098:31	2098:31	8	(
ARGUMENT	2098:32	2098:32	8	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	2098:32	2098:61	9	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	2098:32	2098:32	10	t2p
LEAF_NODE	2098:35	2098:35	10	->
LEAF_NODE	2098:37	2098:37	10	tiff_tiles
LEAF_NODE	2098:47	2098:47	10	[
EXPR	2098:48	2098:48	10	t2p -> pdf_page
FIELD	2098:48	2098:53	11	t2p -> pdf_page
LEAF_NODE	2098:48	2098:48	12	t2p
LEAF_NODE	2098:51	2098:51	12	->
LEAF_NODE	2098:53	2098:53	12	pdf_page
LEAF_NODE	2098:61	2098:61	10	]
LEAF_NODE	2098:62	2098:62	8	,
ARGUMENT	2098:64	2098:64	8	tile
FIELD	2098:64	2098:64	9	tile
LEAF_NODE	2098:64	2098:64	10	tile
LEAF_NODE	2098:68	2098:68	8	)
LEAF_NODE	2098:69	2098:69	4	;
EXPR_STATEMENT	2099:1	2099:70	3	edge |= t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile ) ;
EXPR	2099:1	2099:1	4	edge |= t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
ASSIGN	2099:1	2099:9	5	edge |= t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
LVAL	2099:1	2099:1	6	edge
FIELD	2099:1	2099:1	7	edge
LEAF_NODE	2099:1	2099:1	8	edge
ASSIGN_OP	2099:6	2099:6	6	|=
LEAF_NODE	2099:6	2099:6	7	|=
RVAL	2099:9	2099:9	6	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
FUNCTION_CALL	2099:9	2099:69	7	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
CALLEE	2099:9	2099:9	8	t2p_tile_is_bottom_edge
LEAF_NODE	2099:9	2099:9	9	t2p_tile_is_bottom_edge
LEAF_NODE	2099:32	2099:32	8	(
ARGUMENT	2099:33	2099:33	8	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	2099:33	2099:62	9	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	2099:33	2099:33	10	t2p
LEAF_NODE	2099:36	2099:36	10	->
LEAF_NODE	2099:38	2099:38	10	tiff_tiles
LEAF_NODE	2099:48	2099:48	10	[
EXPR	2099:49	2099:49	10	t2p -> pdf_page
FIELD	2099:49	2099:54	11	t2p -> pdf_page
LEAF_NODE	2099:49	2099:49	12	t2p
LEAF_NODE	2099:52	2099:52	12	->
LEAF_NODE	2099:54	2099:54	12	pdf_page
LEAF_NODE	2099:62	2099:62	10	]
LEAF_NODE	2099:63	2099:63	8	,
ARGUMENT	2099:65	2099:65	8	tile
FIELD	2099:65	2099:65	9	tile
LEAF_NODE	2099:65	2099:65	10	tile
LEAF_NODE	2099:69	2099:69	8	)
LEAF_NODE	2099:70	2099:70	4	;
SELECTION	2101:1	2101:42	3	
KEYWORD	2101:1	2101:1	4	if
LEAF_NODE	2101:1	2101:1	5	if
LEAF_NODE	2101:3	2101:3	4	(
CONDITION	2101:4	2101:4	4	t2p -> pdf_transcode == T2P_TRANSCODE_RAW
EXPR	2101:4	2101:24	5	t2p -> pdf_transcode == T2P_TRANSCODE_RAW
FIELD	2101:4	2101:9	6	t2p -> pdf_transcode
LEAF_NODE	2101:4	2101:4	7	t2p
LEAF_NODE	2101:7	2101:7	7	->
LEAF_NODE	2101:9	2101:9	7	pdf_transcode
EQ_OPERATOR	2101:22	2101:22	6	==
LEAF_NODE	2101:22	2101:22	7	==
FIELD	2101:24	2101:24	6	T2P_TRANSCODE_RAW
LEAF_NODE	2101:24	2101:24	7	T2P_TRANSCODE_RAW
LEAF_NODE	2101:41	2101:41	4	)
STATEMENTS	2101:42	2139:1	4	
LEAF_NODE	2101:42	2101:42	5	{
STATEMENTS	2102:2	2113:4	5	
SELECTION	2102:2	2106:3	6	
KEYWORD	2102:2	2102:2	7	if
LEAF_NODE	2102:2	2102:2	8	if
LEAF_NODE	2102:4	2102:4	7	(
CONDITION	2102:5	2102:5	7	edge && ! ( t2p -> pdf_compression == T2P_COMPRESS_JPEG )
EXPR	2102:5	2102:5	8	edge && ! ( t2p -> pdf_compression == T2P_COMPRESS_JPEG )
AND	2102:5	2104:5	9	edge && ! ( t2p -> pdf_compression == T2P_COMPRESS_JPEG )
EXPR	2102:5	2102:5	10	edge
FIELD	2102:5	2102:5	11	edge
LEAF_NODE	2102:5	2102:5	12	edge
LEAF_NODE	2104:2	2104:2	10	&&
EXPR	2104:5	2104:5	10	! ( t2p -> pdf_compression == T2P_COMPRESS_JPEG )
UNARY_EXPR	2104:5	2104:46	11	! ( t2p -> pdf_compression == T2P_COMPRESS_JPEG )
UNARY_OPERATOR	2104:5	2104:5	12	!
LEAF_NODE	2104:5	2104:5	13	!
LEAF_NODE	2104:6	2104:6	12	(
FIELD	2104:7	2104:12	12	t2p -> pdf_compression
LEAF_NODE	2104:7	2104:7	13	t2p
LEAF_NODE	2104:10	2104:10	13	->
LEAF_NODE	2104:12	2104:12	13	pdf_compression
EQ_OPERATOR	2104:27	2104:27	12	==
LEAF_NODE	2104:27	2104:27	13	==
FIELD	2104:29	2104:29	12	T2P_COMPRESS_JPEG
LEAF_NODE	2104:29	2104:29	13	T2P_COMPRESS_JPEG
LEAF_NODE	2104:46	2104:46	12	)
LEAF_NODE	2106:2	2106:2	7	)
STATEMENTS	2106:3	2113:2	7	
LEAF_NODE	2106:3	2106:3	8	{
STATEMENTS	2107:3	2112:3	8	
EXPR_STATEMENT	2107:3	2107:41	9	t2p -> tiff_datasize = TIFFTileSize ( input ) ;
EXPR	2107:3	2107:3	10	t2p -> tiff_datasize = TIFFTileSize ( input )
ASSIGN	2107:3	2107:22	11	t2p -> tiff_datasize = TIFFTileSize ( input )
LVAL	2107:3	2107:3	12	t2p -> tiff_datasize
FIELD	2107:3	2107:8	13	t2p -> tiff_datasize
LEAF_NODE	2107:3	2107:3	14	t2p
LEAF_NODE	2107:6	2107:6	14	->
LEAF_NODE	2107:8	2107:8	14	tiff_datasize
ASSIGN_OP	2107:21	2107:21	12	=
LEAF_NODE	2107:21	2107:21	13	=
RVAL	2107:22	2107:22	12	TIFFTileSize ( input )
FUNCTION_CALL	2107:22	2107:40	13	TIFFTileSize ( input )
CALLEE	2107:22	2107:22	14	TIFFTileSize
LEAF_NODE	2107:22	2107:22	15	TIFFTileSize
LEAF_NODE	2107:34	2107:34	14	(
ARGUMENT	2107:35	2107:35	14	input
FIELD	2107:35	2107:35	15	input
LEAF_NODE	2107:35	2107:35	16	input
LEAF_NODE	2107:40	2107:40	14	)
LEAF_NODE	2107:41	2107:41	10	;
SELECTION	2108:3	2108:32	9	
KEYWORD	2108:3	2108:3	10	if
LEAF_NODE	2108:3	2108:3	11	if
LEAF_NODE	2108:6	2108:6	10	(
CONDITION	2108:7	2108:7	10	t2p -> tiff_datasize == 0
EXPR	2108:7	2108:29	11	t2p -> tiff_datasize == 0
FIELD	2108:7	2108:12	12	t2p -> tiff_datasize
LEAF_NODE	2108:7	2108:7	13	t2p
LEAF_NODE	2108:10	2108:10	13	->
LEAF_NODE	2108:12	2108:12	13	tiff_datasize
EQ_OPERATOR	2108:26	2108:26	12	==
LEAF_NODE	2108:26	2108:26	13	==
FIELD	2108:29	2108:29	12	0
LEAF_NODE	2108:29	2108:29	13	0
LEAF_NODE	2108:30	2108:30	10	)
STATEMENTS	2108:32	2111:3	10	
LEAF_NODE	2108:32	2108:32	11	{
STATEMENTS	2110:4	2110:4	11	
EXPR_STATEMENT	2110:4	2110:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2110:4	2110:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2110:4	2110:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2110:4	2110:4	15	t2p -> t2p_error
FIELD	2110:4	2110:9	16	t2p -> t2p_error
LEAF_NODE	2110:4	2110:4	17	t2p
LEAF_NODE	2110:7	2110:7	17	->
LEAF_NODE	2110:9	2110:9	17	t2p_error
ASSIGN_OP	2110:19	2110:19	15	=
LEAF_NODE	2110:19	2110:19	16	=
RVAL	2110:21	2110:21	15	T2P_ERR_ERROR
FIELD	2110:21	2110:21	16	T2P_ERR_ERROR
LEAF_NODE	2110:21	2110:21	17	T2P_ERR_ERROR
LEAF_NODE	2110:34	2110:34	13	;
LEAF_NODE	2111:3	2111:3	11	}
JUMP_STATEMENT	2112:3	2112:9	9	return DESTINATION ;
KEYWORD	2112:3	2112:3	10	return
LEAF_NODE	2112:3	2112:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2112:9	2112:9	10	;
LEAF_NODE	2113:2	2113:2	8	}
SELECTION	2113:4	2113:9	6	
KEYWORD	2113:4	2113:4	7	else
LEAF_NODE	2113:4	2113:4	8	else
STATEMENTS	2113:9	2138:2	7	
LEAF_NODE	2113:9	2113:9	8	{
STATEMENTS	2114:3	2137:3	8	
EXPR_STATEMENT	2114:3	2114:52	9	TIFFGetField ( input , TIFFTAG_TILEBYTECOUNTS , & tbc ) ;
EXPR	2114:3	2114:3	10	TIFFGetField ( input , TIFFTAG_TILEBYTECOUNTS , & tbc )
FUNCTION_CALL	2114:3	2114:51	11	TIFFGetField ( input , TIFFTAG_TILEBYTECOUNTS , & tbc )
CALLEE	2114:3	2114:3	12	TIFFGetField
LEAF_NODE	2114:3	2114:3	13	TIFFGetField
LEAF_NODE	2114:15	2114:15	12	(
ARGUMENT	2114:16	2114:16	12	input
FIELD	2114:16	2114:16	13	input
LEAF_NODE	2114:16	2114:16	14	input
LEAF_NODE	2114:21	2114:21	12	,
ARGUMENT	2114:23	2114:23	12	TIFFTAG_TILEBYTECOUNTS
FIELD	2114:23	2114:23	13	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	2114:23	2114:23	14	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	2114:45	2114:45	12	,
ARGUMENT	2114:47	2114:47	12	& tbc
UNARY_EXPR	2114:47	2114:48	13	& tbc
UNARY_OPERATOR	2114:47	2114:47	14	&
LEAF_NODE	2114:47	2114:47	15	&
FIELD	2114:48	2114:48	14	tbc
LEAF_NODE	2114:48	2114:48	15	tbc
LEAF_NODE	2114:51	2114:51	12	)
LEAF_NODE	2114:52	2114:52	10	;
EXPR_STATEMENT	2115:3	2115:14	9	k = tbc [ tile ] ;
EXPR	2115:3	2115:3	10	k = tbc [ tile ]
ASSIGN	2115:3	2115:5	11	k = tbc [ tile ]
LVAL	2115:3	2115:3	12	k
FIELD	2115:3	2115:3	13	k
LEAF_NODE	2115:3	2115:3	14	k
ASSIGN_OP	2115:4	2115:4	12	=
LEAF_NODE	2115:4	2115:4	13	=
RVAL	2115:5	2115:5	12	tbc [ tile ]
FIELD	2115:5	2115:13	13	tbc [ tile ]
LEAF_NODE	2115:5	2115:5	14	tbc
LEAF_NODE	2115:8	2115:8	14	[
EXPR	2115:9	2115:9	14	tile
FIELD	2115:9	2115:9	15	tile
LEAF_NODE	2115:9	2115:9	16	tile
LEAF_NODE	2115:13	2115:13	14	]
LEAF_NODE	2115:14	2115:14	10	;
SELECTION	2117:3	2117:47	9	
KEYWORD	2117:3	2117:3	10	if
LEAF_NODE	2117:3	2117:3	11	if
LEAF_NODE	2117:5	2117:5	10	(
CONDITION	2117:6	2117:6	10	t2p -> tiff_compression == COMPRESSION_OJPEG
EXPR	2117:6	2117:29	11	t2p -> tiff_compression == COMPRESSION_OJPEG
FIELD	2117:6	2117:11	12	t2p -> tiff_compression
LEAF_NODE	2117:6	2117:6	13	t2p
LEAF_NODE	2117:9	2117:9	13	->
LEAF_NODE	2117:11	2117:11	13	tiff_compression
EQ_OPERATOR	2117:27	2117:27	12	==
LEAF_NODE	2117:27	2117:27	13	==
FIELD	2117:29	2117:29	12	COMPRESSION_OJPEG
LEAF_NODE	2117:29	2117:29	13	COMPRESSION_OJPEG
LEAF_NODE	2117:46	2117:46	10	)
STATEMENTS	2117:47	2119:3	10	
LEAF_NODE	2117:47	2117:47	11	{
STATEMENTS	2118:6	2118:6	11	
EXPR_STATEMENT	2118:6	2118:34	12	k = checkAdd64 ( k , 2048 , t2p ) ;
EXPR	2118:6	2118:6	13	k = checkAdd64 ( k , 2048 , t2p )
ASSIGN	2118:6	2118:10	14	k = checkAdd64 ( k , 2048 , t2p )
LVAL	2118:6	2118:6	15	k
FIELD	2118:6	2118:6	16	k
LEAF_NODE	2118:6	2118:6	17	k
ASSIGN_OP	2118:8	2118:8	15	=
LEAF_NODE	2118:8	2118:8	16	=
RVAL	2118:10	2118:10	15	checkAdd64 ( k , 2048 , t2p )
FUNCTION_CALL	2118:10	2118:33	16	checkAdd64 ( k , 2048 , t2p )
CALLEE	2118:10	2118:10	17	checkAdd64
LEAF_NODE	2118:10	2118:10	18	checkAdd64
LEAF_NODE	2118:20	2118:20	17	(
ARGUMENT	2118:21	2118:21	17	k
FIELD	2118:21	2118:21	18	k
LEAF_NODE	2118:21	2118:21	19	k
LEAF_NODE	2118:22	2118:22	17	,
ARGUMENT	2118:24	2118:24	17	2048
FIELD	2118:24	2118:24	18	2048
LEAF_NODE	2118:24	2118:24	19	2048
LEAF_NODE	2118:28	2118:28	17	,
ARGUMENT	2118:30	2118:30	17	t2p
FIELD	2118:30	2118:30	18	t2p
LEAF_NODE	2118:30	2118:30	19	t2p
LEAF_NODE	2118:33	2118:33	17	)
LEAF_NODE	2118:34	2118:34	13	;
LEAF_NODE	2119:3	2119:3	11	}
SELECTION	2122:3	2122:47	9	
KEYWORD	2122:3	2122:3	10	if
LEAF_NODE	2122:3	2122:3	11	if
LEAF_NODE	2122:5	2122:5	10	(
CONDITION	2122:6	2122:6	10	t2p -> tiff_compression == COMPRESSION_JPEG
EXPR	2122:6	2122:29	11	t2p -> tiff_compression == COMPRESSION_JPEG
FIELD	2122:6	2122:11	12	t2p -> tiff_compression
LEAF_NODE	2122:6	2122:6	13	t2p
LEAF_NODE	2122:9	2122:9	13	->
LEAF_NODE	2122:11	2122:11	13	tiff_compression
EQ_OPERATOR	2122:27	2122:27	12	==
LEAF_NODE	2122:27	2122:27	13	==
FIELD	2122:29	2122:29	12	COMPRESSION_JPEG
LEAF_NODE	2122:29	2122:29	13	COMPRESSION_JPEG
LEAF_NODE	2122:45	2122:45	10	)
STATEMENTS	2122:47	2130:3	10	
LEAF_NODE	2122:47	2122:47	11	{
STATEMENTS	2123:4	2124:4	11	
SIMPLE_DECL	2123:4	2123:20	12	uint32 count ; count = 0 ;
VAR_DECL	2123:4	2123:11	13	uint32 count ; count = 0
TYPE	2123:4	2123:4	14	uint32
TYPE_NAME	2123:4	2123:4	15	uint32
LEAF_NODE	2123:4	2123:4	16	uint32
NAME	2123:11	2123:11	14	count
LEAF_NODE	2123:11	2123:11	15	count
LEAF_NODE	0:0	0:0	14	;
INIT	2123:11	2123:11	14	count = 0
ASSIGN	2123:11	2123:19	15	count = 0
LVAL	2123:11	2123:11	16	count
NAME	2123:11	2123:11	17	count
LEAF_NODE	2123:11	2123:11	18	count
ASSIGN_OP	2123:17	2123:17	16	=
LEAF_NODE	2123:17	2123:17	17	=
RVAL	2123:19	2123:19	16	0
FIELD	2123:19	2123:19	17	0
LEAF_NODE	2123:19	2123:19	18	0
LEAF_NODE	2123:20	2123:20	13	;
SELECTION	2124:4	2124:64	12	
KEYWORD	2124:4	2124:4	13	if
LEAF_NODE	2124:4	2124:4	14	if
LEAF_NODE	2124:6	2124:6	13	(
CONDITION	2124:7	2124:7	13	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt ) != 0
EXPR	2124:7	2124:62	14	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt ) != 0
FUNCTION_CALL	2124:7	2124:59	15	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt )
CALLEE	2124:7	2124:7	16	TIFFGetField
LEAF_NODE	2124:7	2124:7	17	TIFFGetField
LEAF_NODE	2124:19	2124:19	16	(
ARGUMENT	2124:20	2124:20	16	input
FIELD	2124:20	2124:20	17	input
LEAF_NODE	2124:20	2124:20	18	input
LEAF_NODE	2124:25	2124:25	16	,
ARGUMENT	2124:27	2124:27	16	TIFFTAG_JPEGTABLES
FIELD	2124:27	2124:27	17	TIFFTAG_JPEGTABLES
LEAF_NODE	2124:27	2124:27	18	TIFFTAG_JPEGTABLES
LEAF_NODE	2124:45	2124:45	16	,
ARGUMENT	2124:47	2124:47	16	& count
UNARY_EXPR	2124:47	2124:48	17	& count
UNARY_OPERATOR	2124:47	2124:47	18	&
LEAF_NODE	2124:47	2124:47	19	&
FIELD	2124:48	2124:48	18	count
LEAF_NODE	2124:48	2124:48	19	count
LEAF_NODE	2124:53	2124:53	16	,
ARGUMENT	2124:55	2124:55	16	& jpt
UNARY_EXPR	2124:55	2124:56	17	& jpt
UNARY_OPERATOR	2124:55	2124:55	18	&
LEAF_NODE	2124:55	2124:55	19	&
FIELD	2124:56	2124:56	18	jpt
LEAF_NODE	2124:56	2124:56	19	jpt
LEAF_NODE	2124:59	2124:59	16	)
EQ_OPERATOR	2124:60	2124:60	15	!=
LEAF_NODE	2124:60	2124:60	16	!=
FIELD	2124:62	2124:62	15	0
LEAF_NODE	2124:62	2124:62	16	0
LEAF_NODE	2124:63	2124:63	13	)
STATEMENTS	2124:64	2129:4	13	
LEAF_NODE	2124:64	2124:64	14	{
STATEMENTS	2125:5	2125:5	14	
SELECTION	2125:5	2125:18	15	
KEYWORD	2125:5	2125:5	16	if
LEAF_NODE	2125:5	2125:5	17	if
LEAF_NODE	2125:7	2125:7	16	(
CONDITION	2125:8	2125:8	16	count > 4
EXPR	2125:8	2125:16	17	count > 4
FIELD	2125:8	2125:8	18	count
LEAF_NODE	2125:8	2125:8	19	count
REL_OPERATOR	2125:14	2125:14	18	>
LEAF_NODE	2125:14	2125:14	19	>
FIELD	2125:16	2125:16	18	4
LEAF_NODE	2125:16	2125:16	19	4
LEAF_NODE	2125:17	2125:17	16	)
STATEMENTS	2125:18	2128:5	16	
LEAF_NODE	2125:18	2125:18	17	{
STATEMENTS	2126:6	2127:6	17	
EXPR_STATEMENT	2126:6	2126:35	18	k = checkAdd64 ( k , count , t2p ) ;
EXPR	2126:6	2126:6	19	k = checkAdd64 ( k , count , t2p )
ASSIGN	2126:6	2126:10	20	k = checkAdd64 ( k , count , t2p )
LVAL	2126:6	2126:6	21	k
FIELD	2126:6	2126:6	22	k
LEAF_NODE	2126:6	2126:6	23	k
ASSIGN_OP	2126:8	2126:8	21	=
LEAF_NODE	2126:8	2126:8	22	=
RVAL	2126:10	2126:10	21	checkAdd64 ( k , count , t2p )
FUNCTION_CALL	2126:10	2126:34	22	checkAdd64 ( k , count , t2p )
CALLEE	2126:10	2126:10	23	checkAdd64
LEAF_NODE	2126:10	2126:10	24	checkAdd64
LEAF_NODE	2126:20	2126:20	23	(
ARGUMENT	2126:21	2126:21	23	k
FIELD	2126:21	2126:21	24	k
LEAF_NODE	2126:21	2126:21	25	k
LEAF_NODE	2126:22	2126:22	23	,
ARGUMENT	2126:24	2126:24	23	count
FIELD	2126:24	2126:24	24	count
LEAF_NODE	2126:24	2126:24	25	count
LEAF_NODE	2126:29	2126:29	23	,
ARGUMENT	2126:31	2126:31	23	t2p
FIELD	2126:31	2126:31	24	t2p
LEAF_NODE	2126:31	2126:31	25	t2p
LEAF_NODE	2126:34	2126:34	23	)
LEAF_NODE	2126:35	2126:35	19	;
EXPR_STATEMENT	2127:6	2127:12	18	k -= 2 ;
EXPR	2127:6	2127:6	19	k -= 2
ASSIGN	2127:6	2127:11	20	k -= 2
LVAL	2127:6	2127:6	21	k
FIELD	2127:6	2127:6	22	k
LEAF_NODE	2127:6	2127:6	23	k
ASSIGN_OP	2127:8	2127:8	21	-=
LEAF_NODE	2127:8	2127:8	22	-=
RVAL	2127:11	2127:11	21	2
FIELD	2127:11	2127:11	22	2
LEAF_NODE	2127:11	2127:11	23	2
LEAF_NODE	2127:12	2127:12	19	;
LEAF_NODE	2128:5	2128:5	17	}
LEAF_NODE	2129:4	2129:4	14	}
LEAF_NODE	2130:3	2130:3	11	}
EXPR_STATEMENT	2132:3	2132:35	9	t2p -> tiff_datasize = ( tsize_t ) k ;
EXPR	2132:3	2132:3	10	t2p -> tiff_datasize = ( tsize_t ) k
ASSIGN	2132:3	2132:24	11	t2p -> tiff_datasize = ( tsize_t ) k
LVAL	2132:3	2132:3	12	t2p -> tiff_datasize
FIELD	2132:3	2132:8	13	t2p -> tiff_datasize
LEAF_NODE	2132:3	2132:3	14	t2p
LEAF_NODE	2132:6	2132:6	14	->
LEAF_NODE	2132:8	2132:8	14	tiff_datasize
ASSIGN_OP	2132:22	2132:22	12	=
LEAF_NODE	2132:22	2132:22	13	=
RVAL	2132:24	2132:34	12	( tsize_t ) k
LEAF_NODE	2132:24	2132:24	13	(
TYPE_NAME	2132:25	2132:25	13	tsize_t
LEAF_NODE	2132:25	2132:25	14	tsize_t
LEAF_NODE	2132:32	2132:32	13	)
FIELD	2132:34	2132:34	13	k
LEAF_NODE	2132:34	2132:34	14	k
LEAF_NODE	2132:35	2132:35	10	;
SELECTION	2133:3	2133:41	9	
KEYWORD	2133:3	2133:3	10	if
LEAF_NODE	2133:3	2133:3	11	if
LEAF_NODE	2133:6	2133:6	10	(
CONDITION	2133:7	2133:7	10	( uint64 ) t2p -> tiff_datasize != k
EXPR	2133:7	2133:38	11	( uint64 ) t2p -> tiff_datasize != k
LEAF_NODE	2133:7	2133:7	12	(
TYPE_NAME	2133:8	2133:8	12	uint64
LEAF_NODE	2133:8	2133:8	13	uint64
LEAF_NODE	2133:14	2133:14	12	)
FIELD	2133:16	2133:21	12	t2p -> tiff_datasize
LEAF_NODE	2133:16	2133:16	13	t2p
LEAF_NODE	2133:19	2133:19	13	->
LEAF_NODE	2133:21	2133:21	13	tiff_datasize
EQ_OPERATOR	2133:35	2133:35	12	!=
LEAF_NODE	2133:35	2133:35	13	!=
FIELD	2133:38	2133:38	12	k
LEAF_NODE	2133:38	2133:38	13	k
LEAF_NODE	2133:39	2133:39	10	)
STATEMENTS	2133:41	2136:3	10	
LEAF_NODE	2133:41	2133:41	11	{
STATEMENTS	2134:4	2135:4	11	
EXPR_STATEMENT	2134:4	2134:50	12	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	2134:4	2134:4	13	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	2134:4	2134:49	14	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	2134:4	2134:4	15	TIFFError
LEAF_NODE	2134:4	2134:4	16	TIFFError
LEAF_NODE	2134:13	2134:13	15	(
ARGUMENT	2134:14	2134:14	15	TIFF2PDF_MODULE
FIELD	2134:14	2134:14	16	TIFF2PDF_MODULE
LEAF_NODE	2134:14	2134:14	17	TIFF2PDF_MODULE
LEAF_NODE	2134:29	2134:29	15	,
ARGUMENT	2134:31	2134:31	15	"Integer overflow"
FIELD	2134:31	2134:31	16	"Integer overflow"
LEAF_NODE	2134:31	2134:31	17	"Integer overflow"
LEAF_NODE	2134:49	2134:49	15	)
LEAF_NODE	2134:50	2134:50	13	;
EXPR_STATEMENT	2135:4	2135:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2135:4	2135:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2135:4	2135:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2135:4	2135:4	15	t2p -> t2p_error
FIELD	2135:4	2135:9	16	t2p -> t2p_error
LEAF_NODE	2135:4	2135:4	17	t2p
LEAF_NODE	2135:7	2135:7	17	->
LEAF_NODE	2135:9	2135:9	17	t2p_error
ASSIGN_OP	2135:19	2135:19	15	=
LEAF_NODE	2135:19	2135:19	16	=
RVAL	2135:21	2135:21	15	T2P_ERR_ERROR
FIELD	2135:21	2135:21	16	T2P_ERR_ERROR
LEAF_NODE	2135:21	2135:21	17	T2P_ERR_ERROR
LEAF_NODE	2135:34	2135:34	13	;
LEAF_NODE	2136:3	2136:3	11	}
JUMP_STATEMENT	2137:3	2137:9	9	return DESTINATION ;
KEYWORD	2137:3	2137:3	10	return
LEAF_NODE	2137:3	2137:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2137:9	2137:9	10	;
LEAF_NODE	2138:2	2138:2	8	}
LEAF_NODE	2139:1	2139:1	5	}
EXPR_STATEMENT	2140:1	2140:24	3	k = TIFFTileSize ( input ) ;
EXPR	2140:1	2140:1	4	k = TIFFTileSize ( input )
ASSIGN	2140:1	2140:5	5	k = TIFFTileSize ( input )
LVAL	2140:1	2140:1	6	k
FIELD	2140:1	2140:1	7	k
LEAF_NODE	2140:1	2140:1	8	k
ASSIGN_OP	2140:3	2140:3	6	=
LEAF_NODE	2140:3	2140:3	7	=
RVAL	2140:5	2140:5	6	TIFFTileSize ( input )
FUNCTION_CALL	2140:5	2140:23	7	TIFFTileSize ( input )
CALLEE	2140:5	2140:5	8	TIFFTileSize
LEAF_NODE	2140:5	2140:5	9	TIFFTileSize
LEAF_NODE	2140:17	2140:17	8	(
ARGUMENT	2140:18	2140:18	8	input
FIELD	2140:18	2140:18	9	input
LEAF_NODE	2140:18	2140:18	10	input
LEAF_NODE	2140:23	2140:23	8	)
LEAF_NODE	2140:24	2140:24	4	;
SELECTION	2141:1	2141:44	3	
KEYWORD	2141:1	2141:1	4	if
LEAF_NODE	2141:1	2141:1	5	if
LEAF_NODE	2141:3	2141:3	4	(
CONDITION	2141:4	2141:4	4	t2p -> tiff_planar == PLANARCONFIG_SEPARATE
EXPR	2141:4	2141:22	5	t2p -> tiff_planar == PLANARCONFIG_SEPARATE
FIELD	2141:4	2141:9	6	t2p -> tiff_planar
LEAF_NODE	2141:4	2141:4	7	t2p
LEAF_NODE	2141:7	2141:7	7	->
LEAF_NODE	2141:9	2141:9	7	tiff_planar
EQ_OPERATOR	2141:20	2141:20	6	==
LEAF_NODE	2141:20	2141:20	7	==
FIELD	2141:22	2141:22	6	PLANARCONFIG_SEPARATE
LEAF_NODE	2141:22	2141:22	7	PLANARCONFIG_SEPARATE
LEAF_NODE	2141:43	2141:43	4	)
STATEMENTS	2141:44	2143:1	4	
LEAF_NODE	2141:44	2141:44	5	{
STATEMENTS	2142:2	2142:2	5	
EXPR_STATEMENT	2142:2	2142:56	6	k = checkMultiply64 ( k , t2p -> tiff_samplesperpixel , t2p ) ;
EXPR	2142:2	2142:2	7	k = checkMultiply64 ( k , t2p -> tiff_samplesperpixel , t2p )
ASSIGN	2142:2	2142:6	8	k = checkMultiply64 ( k , t2p -> tiff_samplesperpixel , t2p )
LVAL	2142:2	2142:2	9	k
FIELD	2142:2	2142:2	10	k
LEAF_NODE	2142:2	2142:2	11	k
ASSIGN_OP	2142:4	2142:4	9	=
LEAF_NODE	2142:4	2142:4	10	=
RVAL	2142:6	2142:6	9	checkMultiply64 ( k , t2p -> tiff_samplesperpixel , t2p )
FUNCTION_CALL	2142:6	2142:55	10	checkMultiply64 ( k , t2p -> tiff_samplesperpixel , t2p )
CALLEE	2142:6	2142:6	11	checkMultiply64
LEAF_NODE	2142:6	2142:6	12	checkMultiply64
LEAF_NODE	2142:21	2142:21	11	(
ARGUMENT	2142:22	2142:22	11	k
FIELD	2142:22	2142:22	12	k
LEAF_NODE	2142:22	2142:22	13	k
LEAF_NODE	2142:23	2142:23	11	,
ARGUMENT	2142:25	2142:25	11	t2p -> tiff_samplesperpixel
FIELD	2142:25	2142:30	12	t2p -> tiff_samplesperpixel
LEAF_NODE	2142:25	2142:25	13	t2p
LEAF_NODE	2142:28	2142:28	13	->
LEAF_NODE	2142:30	2142:30	13	tiff_samplesperpixel
LEAF_NODE	2142:50	2142:50	11	,
ARGUMENT	2142:52	2142:52	11	t2p
FIELD	2142:52	2142:52	12	t2p
LEAF_NODE	2142:52	2142:52	13	t2p
LEAF_NODE	2142:55	2142:55	11	)
LEAF_NODE	2142:56	2142:56	7	;
LEAF_NODE	2143:1	2143:1	5	}
SELECTION	2144:1	2144:13	3	
KEYWORD	2144:1	2144:1	4	if
LEAF_NODE	2144:1	2144:1	5	if
LEAF_NODE	2144:4	2144:4	4	(
CONDITION	2144:5	2144:5	4	k == 0
EXPR	2144:5	2144:10	5	k == 0
FIELD	2144:5	2144:5	6	k
LEAF_NODE	2144:5	2144:5	7	k
EQ_OPERATOR	2144:7	2144:7	6	==
LEAF_NODE	2144:7	2144:7	7	==
FIELD	2144:10	2144:10	6	0
LEAF_NODE	2144:10	2144:10	7	0
LEAF_NODE	2144:11	2144:11	4	)
STATEMENTS	2144:13	2147:1	4	
LEAF_NODE	2144:13	2144:13	5	{
STATEMENTS	2146:2	2146:2	5	
EXPR_STATEMENT	2146:2	2146:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2146:2	2146:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2146:2	2146:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2146:2	2146:2	9	t2p -> t2p_error
FIELD	2146:2	2146:7	10	t2p -> t2p_error
LEAF_NODE	2146:2	2146:2	11	t2p
LEAF_NODE	2146:5	2146:5	11	->
LEAF_NODE	2146:7	2146:7	11	t2p_error
ASSIGN_OP	2146:17	2146:17	9	=
LEAF_NODE	2146:17	2146:17	10	=
RVAL	2146:19	2146:19	9	T2P_ERR_ERROR
FIELD	2146:19	2146:19	10	T2P_ERR_ERROR
LEAF_NODE	2146:19	2146:19	11	T2P_ERR_ERROR
LEAF_NODE	2146:32	2146:32	7	;
LEAF_NODE	2147:1	2147:1	5	}
EXPR_STATEMENT	2149:1	2149:33	3	t2p -> tiff_datasize = ( tsize_t ) k ;
EXPR	2149:1	2149:1	4	t2p -> tiff_datasize = ( tsize_t ) k
ASSIGN	2149:1	2149:22	5	t2p -> tiff_datasize = ( tsize_t ) k
LVAL	2149:1	2149:1	6	t2p -> tiff_datasize
FIELD	2149:1	2149:6	7	t2p -> tiff_datasize
LEAF_NODE	2149:1	2149:1	8	t2p
LEAF_NODE	2149:4	2149:4	8	->
LEAF_NODE	2149:6	2149:6	8	tiff_datasize
ASSIGN_OP	2149:20	2149:20	6	=
LEAF_NODE	2149:20	2149:20	7	=
RVAL	2149:22	2149:32	6	( tsize_t ) k
LEAF_NODE	2149:22	2149:22	7	(
TYPE_NAME	2149:23	2149:23	7	tsize_t
LEAF_NODE	2149:23	2149:23	8	tsize_t
LEAF_NODE	2149:30	2149:30	7	)
FIELD	2149:32	2149:32	7	k
LEAF_NODE	2149:32	2149:32	8	k
LEAF_NODE	2149:33	2149:33	4	;
SELECTION	2150:1	2150:39	3	
KEYWORD	2150:1	2150:1	4	if
LEAF_NODE	2150:1	2150:1	5	if
LEAF_NODE	2150:4	2150:4	4	(
CONDITION	2150:5	2150:5	4	( uint64 ) t2p -> tiff_datasize != k
EXPR	2150:5	2150:36	5	( uint64 ) t2p -> tiff_datasize != k
LEAF_NODE	2150:5	2150:5	6	(
TYPE_NAME	2150:6	2150:6	6	uint64
LEAF_NODE	2150:6	2150:6	7	uint64
LEAF_NODE	2150:12	2150:12	6	)
FIELD	2150:14	2150:19	6	t2p -> tiff_datasize
LEAF_NODE	2150:14	2150:14	7	t2p
LEAF_NODE	2150:17	2150:17	7	->
LEAF_NODE	2150:19	2150:19	7	tiff_datasize
EQ_OPERATOR	2150:33	2150:33	6	!=
LEAF_NODE	2150:33	2150:33	7	!=
FIELD	2150:36	2150:36	6	k
LEAF_NODE	2150:36	2150:36	7	k
LEAF_NODE	2150:37	2150:37	4	)
STATEMENTS	2150:39	2153:1	4	
LEAF_NODE	2150:39	2150:39	5	{
STATEMENTS	2151:2	2152:2	5	
EXPR_STATEMENT	2151:2	2151:48	6	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	2151:2	2151:2	7	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	2151:2	2151:47	8	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	2151:2	2151:2	9	TIFFError
LEAF_NODE	2151:2	2151:2	10	TIFFError
LEAF_NODE	2151:11	2151:11	9	(
ARGUMENT	2151:12	2151:12	9	TIFF2PDF_MODULE
FIELD	2151:12	2151:12	10	TIFF2PDF_MODULE
LEAF_NODE	2151:12	2151:12	11	TIFF2PDF_MODULE
LEAF_NODE	2151:27	2151:27	9	,
ARGUMENT	2151:29	2151:29	9	"Integer overflow"
FIELD	2151:29	2151:29	10	"Integer overflow"
LEAF_NODE	2151:29	2151:29	11	"Integer overflow"
LEAF_NODE	2151:47	2151:47	9	)
LEAF_NODE	2151:48	2151:48	7	;
EXPR_STATEMENT	2152:2	2152:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2152:2	2152:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2152:2	2152:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2152:2	2152:2	9	t2p -> t2p_error
FIELD	2152:2	2152:7	10	t2p -> t2p_error
LEAF_NODE	2152:2	2152:2	11	t2p
LEAF_NODE	2152:5	2152:5	11	->
LEAF_NODE	2152:7	2152:7	11	t2p_error
ASSIGN_OP	2152:17	2152:17	9	=
LEAF_NODE	2152:17	2152:17	10	=
RVAL	2152:19	2152:19	9	T2P_ERR_ERROR
FIELD	2152:19	2152:19	10	T2P_ERR_ERROR
LEAF_NODE	2152:19	2152:19	11	T2P_ERR_ERROR
LEAF_NODE	2152:32	2152:32	7	;
LEAF_NODE	2153:1	2153:1	5	}
JUMP_STATEMENT	2155:1	2155:7	3	return DESTINATION ;
KEYWORD	2155:1	2155:1	4	return
LEAF_NODE	2155:1	2155:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	2155:7	2155:7	4	;
LEAF_NODE	2156:0	2156:0	2	}
FUNCTION_DEF	2163:0	2171:0	1	
RETURN_TYPE	2163:0	2163:0	2	int
TYPE_NAME	2163:0	2163:0	3	int
LEAF_NODE	2163:0	2163:0	4	int
FUNCTION_NAME	2163:4	2163:4	2	t2p_tile_is_right_edge
LEAF_NODE	2163:4	2163:4	3	t2p_tile_is_right_edge
PARAMETER_LIST	2163:26	2163:56	2	( T2P_TILES tiles , ttile_t tile )
LEAF_NODE	2163:26	2163:26	3	(
PARAMETER_DECL	2163:27	2163:37	3	T2P_TILES tiles
TYPE	2163:27	2163:27	4	T2P_TILES
TYPE_NAME	2163:27	2163:27	5	T2P_TILES
LEAF_NODE	2163:27	2163:27	6	T2P_TILES
NAME	2163:37	2163:37	4	tiles
LEAF_NODE	2163:37	2163:37	5	tiles
LEAF_NODE	2163:42	2163:42	3	,
PARAMETER_DECL	2163:44	2163:52	3	ttile_t tile
TYPE	2163:44	2163:44	4	ttile_t
TYPE_NAME	2163:44	2163:44	5	ttile_t
LEAF_NODE	2163:44	2163:44	6	ttile_t
NAME	2163:52	2163:52	4	tile
LEAF_NODE	2163:52	2163:52	5	tile
LEAF_NODE	2163:56	2163:56	3	)
LEAF_NODE	2163:57	2163:57	2	{
STATEMENTS	2165:1	2168:3	2	
SELECTION	2165:1	2166:39	3	
KEYWORD	2165:1	2165:1	4	if
LEAF_NODE	2165:1	2165:1	5	if
LEAF_NODE	2165:3	2165:3	4	(
CONDITION	2165:5	2165:5	4	( ( tile + 1 ) % tiles . tiles_tilecountx == 0 ) && ( tiles . tiles_edgetilewidth != 0 )
EXPR	2165:5	2165:5	5	( ( tile + 1 ) % tiles . tiles_tilecountx == 0 ) && ( tiles . tiles_edgetilewidth != 0 )
AND	2165:5	2166:5	6	( ( tile + 1 ) % tiles . tiles_tilecountx == 0 ) && ( tiles . tiles_edgetilewidth != 0 )
EXPR	2165:5	2165:44	7	( ( tile + 1 ) % tiles . tiles_tilecountx == 0 )
LEAF_NODE	2165:5	2165:5	8	(
LEAF_NODE	2165:6	2165:6	8	(
FIELD	2165:7	2165:7	8	tile
LEAF_NODE	2165:7	2165:7	9	tile
LEAF_NODE	2165:11	2165:11	8	+
FIELD	2165:12	2165:12	8	1
LEAF_NODE	2165:12	2165:12	9	1
LEAF_NODE	2165:13	2165:13	8	)
LEAF_NODE	2165:15	2165:15	8	%
FIELD	2165:17	2165:23	8	tiles . tiles_tilecountx
LEAF_NODE	2165:17	2165:17	9	tiles
LEAF_NODE	2165:22	2165:22	9	.
LEAF_NODE	2165:23	2165:23	9	tiles_tilecountx
EQ_OPERATOR	2165:40	2165:40	8	==
LEAF_NODE	2165:40	2165:40	9	==
FIELD	2165:43	2165:43	8	0
LEAF_NODE	2165:43	2165:43	9	0
LEAF_NODE	2165:44	2165:44	8	)
LEAF_NODE	2166:2	2166:2	7	&&
EXPR	2166:5	2166:36	7	( tiles . tiles_edgetilewidth != 0 )
LEAF_NODE	2166:5	2166:5	8	(
FIELD	2166:6	2166:12	8	tiles . tiles_edgetilewidth
LEAF_NODE	2166:6	2166:6	9	tiles
LEAF_NODE	2166:11	2166:11	9	.
LEAF_NODE	2166:12	2166:12	9	tiles_edgetilewidth
EQ_OPERATOR	2166:32	2166:32	8	!=
LEAF_NODE	2166:32	2166:32	9	!=
FIELD	2166:35	2166:35	8	0
LEAF_NODE	2166:35	2166:35	9	0
LEAF_NODE	2166:36	2166:36	8	)
LEAF_NODE	2166:38	2166:38	4	)
STATEMENTS	2166:39	2168:1	4	
LEAF_NODE	2166:39	2166:39	5	{
STATEMENTS	2167:2	2167:2	5	
JUMP_STATEMENT	2167:2	2167:11	6	return ( 1 ) ;
KEYWORD	2167:2	2167:2	7	return
LEAF_NODE	2167:2	2167:2	8	return
DESTINATION	2167:8	2167:8	7	( 1 )
EXPR	2167:8	2167:10	8	( 1 )
LEAF_NODE	2167:8	2167:8	9	(
FIELD	2167:9	2167:9	9	1
LEAF_NODE	2167:9	2167:9	10	1
LEAF_NODE	2167:10	2167:10	9	)
LEAF_NODE	2167:11	2167:11	7	;
LEAF_NODE	2168:1	2168:1	5	}
SELECTION	2168:3	2168:8	3	
KEYWORD	2168:3	2168:3	4	else
LEAF_NODE	2168:3	2168:3	5	else
STATEMENTS	2168:8	2170:1	4	
LEAF_NODE	2168:8	2168:8	5	{
STATEMENTS	2169:2	2169:2	5	
JUMP_STATEMENT	2169:2	2169:11	6	return ( 0 ) ;
KEYWORD	2169:2	2169:2	7	return
LEAF_NODE	2169:2	2169:2	8	return
DESTINATION	2169:8	2169:8	7	( 0 )
EXPR	2169:8	2169:10	8	( 0 )
LEAF_NODE	2169:8	2169:8	9	(
FIELD	2169:9	2169:9	9	0
LEAF_NODE	2169:9	2169:9	10	0
LEAF_NODE	2169:10	2169:10	9	)
LEAF_NODE	2169:11	2169:11	7	;
LEAF_NODE	2170:1	2170:1	5	}
LEAF_NODE	2171:0	2171:0	2	}
FUNCTION_DEF	2178:0	2186:0	1	
RETURN_TYPE	2178:0	2178:0	2	int
TYPE_NAME	2178:0	2178:0	3	int
LEAF_NODE	2178:0	2178:0	4	int
FUNCTION_NAME	2178:4	2178:4	2	t2p_tile_is_bottom_edge
LEAF_NODE	2178:4	2178:4	3	t2p_tile_is_bottom_edge
PARAMETER_LIST	2178:27	2178:57	2	( T2P_TILES tiles , ttile_t tile )
LEAF_NODE	2178:27	2178:27	3	(
PARAMETER_DECL	2178:28	2178:38	3	T2P_TILES tiles
TYPE	2178:28	2178:28	4	T2P_TILES
TYPE_NAME	2178:28	2178:28	5	T2P_TILES
LEAF_NODE	2178:28	2178:28	6	T2P_TILES
NAME	2178:38	2178:38	4	tiles
LEAF_NODE	2178:38	2178:38	5	tiles
LEAF_NODE	2178:43	2178:43	3	,
PARAMETER_DECL	2178:45	2178:53	3	ttile_t tile
TYPE	2178:45	2178:45	4	ttile_t
TYPE_NAME	2178:45	2178:45	5	ttile_t
LEAF_NODE	2178:45	2178:45	6	ttile_t
NAME	2178:53	2178:53	4	tile
LEAF_NODE	2178:53	2178:53	5	tile
LEAF_NODE	2178:57	2178:57	3	)
LEAF_NODE	2178:58	2178:58	2	{
STATEMENTS	2180:1	2183:3	2	
SELECTION	2180:1	2181:40	3	
KEYWORD	2180:1	2180:1	4	if
LEAF_NODE	2180:1	2180:1	5	if
LEAF_NODE	2180:3	2180:3	4	(
CONDITION	2180:5	2180:5	4	( ( tile + 1 ) > ( tiles . tiles_tilecount - tiles . tiles_tilecountx ) ) && ( tiles . tiles_edgetilelength != 0 )
EXPR	2180:5	2180:5	5	( ( tile + 1 ) > ( tiles . tiles_tilecount - tiles . tiles_tilecountx ) ) && ( tiles . tiles_edgetilelength != 0 )
AND	2180:5	2181:5	6	( ( tile + 1 ) > ( tiles . tiles_tilecount - tiles . tiles_tilecountx ) ) && ( tiles . tiles_edgetilelength != 0 )
EXPR	2180:5	2180:64	7	( ( tile + 1 ) > ( tiles . tiles_tilecount - tiles . tiles_tilecountx ) )
LEAF_NODE	2180:5	2180:5	8	(
LEAF_NODE	2180:6	2180:6	8	(
FIELD	2180:7	2180:7	8	tile
LEAF_NODE	2180:7	2180:7	9	tile
LEAF_NODE	2180:11	2180:11	8	+
FIELD	2180:12	2180:12	8	1
LEAF_NODE	2180:12	2180:12	9	1
LEAF_NODE	2180:13	2180:13	8	)
REL_OPERATOR	2180:15	2180:15	8	>
LEAF_NODE	2180:15	2180:15	9	>
LEAF_NODE	2180:17	2180:17	8	(
FIELD	2180:18	2180:24	8	tiles . tiles_tilecount
LEAF_NODE	2180:18	2180:18	9	tiles
LEAF_NODE	2180:23	2180:23	9	.
LEAF_NODE	2180:24	2180:24	9	tiles_tilecount
LEAF_NODE	2180:39	2180:39	8	-
FIELD	2180:40	2180:46	8	tiles . tiles_tilecountx
LEAF_NODE	2180:40	2180:40	9	tiles
LEAF_NODE	2180:45	2180:45	9	.
LEAF_NODE	2180:46	2180:46	9	tiles_tilecountx
LEAF_NODE	2180:62	2180:62	8	)
LEAF_NODE	2180:64	2180:64	8	)
LEAF_NODE	2181:2	2181:2	7	&&
EXPR	2181:5	2181:37	7	( tiles . tiles_edgetilelength != 0 )
LEAF_NODE	2181:5	2181:5	8	(
FIELD	2181:6	2181:12	8	tiles . tiles_edgetilelength
LEAF_NODE	2181:6	2181:6	9	tiles
LEAF_NODE	2181:11	2181:11	9	.
LEAF_NODE	2181:12	2181:12	9	tiles_edgetilelength
EQ_OPERATOR	2181:33	2181:33	8	!=
LEAF_NODE	2181:33	2181:33	9	!=
FIELD	2181:36	2181:36	8	0
LEAF_NODE	2181:36	2181:36	9	0
LEAF_NODE	2181:37	2181:37	8	)
LEAF_NODE	2181:39	2181:39	4	)
STATEMENTS	2181:40	2183:1	4	
LEAF_NODE	2181:40	2181:40	5	{
STATEMENTS	2182:2	2182:2	5	
JUMP_STATEMENT	2182:2	2182:11	6	return ( 1 ) ;
KEYWORD	2182:2	2182:2	7	return
LEAF_NODE	2182:2	2182:2	8	return
DESTINATION	2182:8	2182:8	7	( 1 )
EXPR	2182:8	2182:10	8	( 1 )
LEAF_NODE	2182:8	2182:8	9	(
FIELD	2182:9	2182:9	9	1
LEAF_NODE	2182:9	2182:9	10	1
LEAF_NODE	2182:10	2182:10	9	)
LEAF_NODE	2182:11	2182:11	7	;
LEAF_NODE	2183:1	2183:1	5	}
SELECTION	2183:3	2183:8	3	
KEYWORD	2183:3	2183:3	4	else
LEAF_NODE	2183:3	2183:3	5	else
STATEMENTS	2183:8	2185:1	4	
LEAF_NODE	2183:8	2183:8	5	{
STATEMENTS	2184:2	2184:2	5	
JUMP_STATEMENT	2184:2	2184:11	6	return ( 0 ) ;
KEYWORD	2184:2	2184:2	7	return
LEAF_NODE	2184:2	2184:2	8	return
DESTINATION	2184:8	2184:8	7	( 0 )
EXPR	2184:8	2184:10	8	( 0 )
LEAF_NODE	2184:8	2184:8	9	(
FIELD	2184:9	2184:9	9	0
LEAF_NODE	2184:9	2184:9	10	0
LEAF_NODE	2184:10	2184:10	9	)
LEAF_NODE	2184:11	2184:11	7	;
LEAF_NODE	2185:1	2185:1	5	}
LEAF_NODE	2186:0	2186:0	2	}
FUNCTION_DEF	2193:0	2196:0	1	
RETURN_TYPE	2193:0	2193:0	2	int
TYPE_NAME	2193:0	2193:0	3	int
LEAF_NODE	2193:0	2193:0	4	int
FUNCTION_NAME	2193:4	2193:4	2	t2p_tile_is_edge
LEAF_NODE	2193:4	2193:4	3	t2p_tile_is_edge
PARAMETER_LIST	2193:20	2193:50	2	( T2P_TILES tiles , ttile_t tile )
LEAF_NODE	2193:20	2193:20	3	(
PARAMETER_DECL	2193:21	2193:31	3	T2P_TILES tiles
TYPE	2193:21	2193:21	4	T2P_TILES
TYPE_NAME	2193:21	2193:21	5	T2P_TILES
LEAF_NODE	2193:21	2193:21	6	T2P_TILES
NAME	2193:31	2193:31	4	tiles
LEAF_NODE	2193:31	2193:31	5	tiles
LEAF_NODE	2193:36	2193:36	3	,
PARAMETER_DECL	2193:38	2193:46	3	ttile_t tile
TYPE	2193:38	2193:38	4	ttile_t
TYPE_NAME	2193:38	2193:38	5	ttile_t
LEAF_NODE	2193:38	2193:38	6	ttile_t
NAME	2193:46	2193:46	4	tile
LEAF_NODE	2193:46	2193:46	5	tile
LEAF_NODE	2193:50	2193:50	3	)
LEAF_NODE	2193:51	2193:51	2	{
STATEMENTS	2195:1	2195:1	2	
JUMP_STATEMENT	2195:1	2195:84	3	return ( t2p_tile_is_right_edge ( tiles , tile ) | t2p_tile_is_bottom_edge ( tiles , tile ) ) ;
KEYWORD	2195:1	2195:1	4	return
LEAF_NODE	2195:1	2195:1	5	return
DESTINATION	2195:7	2195:7	4	( t2p_tile_is_right_edge ( tiles , tile ) | t2p_tile_is_bottom_edge ( tiles , tile ) )
EXPR	2195:7	2195:83	5	( t2p_tile_is_right_edge ( tiles , tile ) | t2p_tile_is_bottom_edge ( tiles , tile ) )
LEAF_NODE	2195:7	2195:7	6	(
BIT_OR	2195:8	2195:46	6	t2p_tile_is_right_edge ( tiles , tile ) | t2p_tile_is_bottom_edge ( tiles , tile )
BIT_OR_ELEM	2195:8	2195:8	7	t2p_tile_is_right_edge ( tiles , tile )
FUNCTION_CALL	2195:8	2195:42	8	t2p_tile_is_right_edge ( tiles , tile )
CALLEE	2195:8	2195:8	9	t2p_tile_is_right_edge
LEAF_NODE	2195:8	2195:8	10	t2p_tile_is_right_edge
LEAF_NODE	2195:30	2195:30	9	(
ARGUMENT	2195:31	2195:31	9	tiles
FIELD	2195:31	2195:31	10	tiles
LEAF_NODE	2195:31	2195:31	11	tiles
LEAF_NODE	2195:36	2195:36	9	,
ARGUMENT	2195:38	2195:38	9	tile
FIELD	2195:38	2195:38	10	tile
LEAF_NODE	2195:38	2195:38	11	tile
LEAF_NODE	2195:42	2195:42	9	)
LEAF_NODE	2195:44	2195:44	7	|
BIT_OR_ELEM	2195:46	2195:46	7	t2p_tile_is_bottom_edge ( tiles , tile )
FUNCTION_CALL	2195:46	2195:81	8	t2p_tile_is_bottom_edge ( tiles , tile )
CALLEE	2195:46	2195:46	9	t2p_tile_is_bottom_edge
LEAF_NODE	2195:46	2195:46	10	t2p_tile_is_bottom_edge
LEAF_NODE	2195:69	2195:69	9	(
ARGUMENT	2195:70	2195:70	9	tiles
FIELD	2195:70	2195:70	10	tiles
LEAF_NODE	2195:70	2195:70	11	tiles
LEAF_NODE	2195:75	2195:75	9	,
ARGUMENT	2195:77	2195:77	9	tile
FIELD	2195:77	2195:77	10	tile
LEAF_NODE	2195:77	2195:77	11	tile
LEAF_NODE	2195:81	2195:81	9	)
LEAF_NODE	2195:83	2195:83	6	)
LEAF_NODE	2195:84	2195:84	4	;
LEAF_NODE	2196:0	2196:0	2	}
FUNCTION_DEF	2203:0	2206:0	1	
RETURN_TYPE	2203:0	2203:0	2	int
TYPE_NAME	2203:0	2203:0	3	int
LEAF_NODE	2203:0	2203:0	4	int
FUNCTION_NAME	2203:4	2203:4	2	t2p_tile_is_corner_edge
LEAF_NODE	2203:4	2203:4	3	t2p_tile_is_corner_edge
PARAMETER_LIST	2203:27	2203:57	2	( T2P_TILES tiles , ttile_t tile )
LEAF_NODE	2203:27	2203:27	3	(
PARAMETER_DECL	2203:28	2203:38	3	T2P_TILES tiles
TYPE	2203:28	2203:28	4	T2P_TILES
TYPE_NAME	2203:28	2203:28	5	T2P_TILES
LEAF_NODE	2203:28	2203:28	6	T2P_TILES
NAME	2203:38	2203:38	4	tiles
LEAF_NODE	2203:38	2203:38	5	tiles
LEAF_NODE	2203:43	2203:43	3	,
PARAMETER_DECL	2203:45	2203:53	3	ttile_t tile
TYPE	2203:45	2203:45	4	ttile_t
TYPE_NAME	2203:45	2203:45	5	ttile_t
LEAF_NODE	2203:45	2203:45	6	ttile_t
NAME	2203:53	2203:53	4	tile
LEAF_NODE	2203:53	2203:53	5	tile
LEAF_NODE	2203:57	2203:57	3	)
LEAF_NODE	2203:58	2203:58	2	{
STATEMENTS	2205:1	2205:1	2	
JUMP_STATEMENT	2205:1	2205:84	3	return ( t2p_tile_is_right_edge ( tiles , tile ) & t2p_tile_is_bottom_edge ( tiles , tile ) ) ;
KEYWORD	2205:1	2205:1	4	return
LEAF_NODE	2205:1	2205:1	5	return
DESTINATION	2205:7	2205:7	4	( t2p_tile_is_right_edge ( tiles , tile ) & t2p_tile_is_bottom_edge ( tiles , tile ) )
EXPR	2205:7	2205:83	5	( t2p_tile_is_right_edge ( tiles , tile ) & t2p_tile_is_bottom_edge ( tiles , tile ) )
LEAF_NODE	2205:7	2205:7	6	(
FUNCTION_CALL	2205:8	2205:42	6	t2p_tile_is_right_edge ( tiles , tile )
CALLEE	2205:8	2205:8	7	t2p_tile_is_right_edge
LEAF_NODE	2205:8	2205:8	8	t2p_tile_is_right_edge
LEAF_NODE	2205:30	2205:30	7	(
ARGUMENT	2205:31	2205:31	7	tiles
FIELD	2205:31	2205:31	8	tiles
LEAF_NODE	2205:31	2205:31	9	tiles
LEAF_NODE	2205:36	2205:36	7	,
ARGUMENT	2205:38	2205:38	7	tile
FIELD	2205:38	2205:38	8	tile
LEAF_NODE	2205:38	2205:38	9	tile
LEAF_NODE	2205:42	2205:42	7	)
LEAF_NODE	2205:44	2205:44	6	&
FUNCTION_CALL	2205:46	2205:81	6	t2p_tile_is_bottom_edge ( tiles , tile )
CALLEE	2205:46	2205:46	7	t2p_tile_is_bottom_edge
LEAF_NODE	2205:46	2205:46	8	t2p_tile_is_bottom_edge
LEAF_NODE	2205:69	2205:69	7	(
ARGUMENT	2205:70	2205:70	7	tiles
FIELD	2205:70	2205:70	8	tiles
LEAF_NODE	2205:70	2205:70	9	tiles
LEAF_NODE	2205:75	2205:75	7	,
ARGUMENT	2205:77	2205:77	7	tile
FIELD	2205:77	2205:77	8	tile
LEAF_NODE	2205:77	2205:77	9	tile
LEAF_NODE	2205:81	2205:81	7	)
LEAF_NODE	2205:83	2205:83	6	)
LEAF_NODE	2205:84	2205:84	4	;
LEAF_NODE	2206:0	2206:0	2	}
FUNCTION_DEF	2215:0	2805:0	1	
RETURN_TYPE	2215:0	2215:0	2	tsize_t
TYPE_NAME	2215:0	2215:0	3	tsize_t
LEAF_NODE	2215:0	2215:0	4	tsize_t
FUNCTION_NAME	2215:8	2215:8	2	t2p_readwrite_pdf_image
LEAF_NODE	2215:8	2215:8	3	t2p_readwrite_pdf_image
PARAMETER_LIST	2215:31	2215:67	2	( T2P * t2p , TIFF * input , TIFF * output )
LEAF_NODE	2215:31	2215:31	3	(
PARAMETER_DECL	2215:32	2215:37	3	T2P * t2p
TYPE	2215:32	2215:35	4	T2P *
TYPE_NAME	2215:32	2215:32	5	T2P
LEAF_NODE	2215:32	2215:32	6	T2P
POINTER	2215:35	2215:35	5	*
LEAF_NODE	2215:35	2215:35	6	*
NAME	2215:37	2215:37	4	t2p
LEAF_NODE	2215:37	2215:37	5	t2p
LEAF_NODE	2215:40	2215:40	3	,
PARAMETER_DECL	2215:42	2215:48	3	TIFF * input
TYPE	2215:42	2215:46	4	TIFF *
TYPE_NAME	2215:42	2215:42	5	TIFF
LEAF_NODE	2215:42	2215:42	6	TIFF
POINTER	2215:46	2215:46	5	*
LEAF_NODE	2215:46	2215:46	6	*
NAME	2215:48	2215:48	4	input
LEAF_NODE	2215:48	2215:48	5	input
LEAF_NODE	2215:53	2215:53	3	,
PARAMETER_DECL	2215:55	2215:61	3	TIFF * output
TYPE	2215:55	2215:59	4	TIFF *
TYPE_NAME	2215:55	2215:55	5	TIFF
LEAF_NODE	2215:55	2215:55	6	TIFF
POINTER	2215:59	2215:59	5	*
LEAF_NODE	2215:59	2215:59	6	*
NAME	2215:61	2215:61	4	output
LEAF_NODE	2215:61	2215:61	5	output
LEAF_NODE	2215:67	2215:67	3	)
LEAF_NODE	2215:68	2215:68	2	{
STATEMENTS	2217:1	2804:16	2	
SIMPLE_DECL	2217:1	2217:18	3	tsize_t written ; written = 0 ;
VAR_DECL	2217:1	2217:9	4	tsize_t written ; written = 0
TYPE	2217:1	2217:1	5	tsize_t
TYPE_NAME	2217:1	2217:1	6	tsize_t
LEAF_NODE	2217:1	2217:1	7	tsize_t
NAME	2217:9	2217:9	5	written
LEAF_NODE	2217:9	2217:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	2217:9	2217:9	5	written = 0
ASSIGN	2217:9	2217:17	6	written = 0
LVAL	2217:9	2217:9	7	written
NAME	2217:9	2217:9	8	written
LEAF_NODE	2217:9	2217:9	9	written
ASSIGN_OP	2217:16	2217:16	7	=
LEAF_NODE	2217:16	2217:16	8	=
RVAL	2217:17	2217:17	7	0
FIELD	2217:17	2217:17	8	0
LEAF_NODE	2217:17	2217:17	9	0
LEAF_NODE	2217:18	2217:18	4	;
SIMPLE_DECL	2218:1	2218:27	3	unsigned char * buffer ; buffer = NULL ;
VAR_DECL	2218:1	2218:16	4	unsigned char * buffer ; buffer = NULL
TYPE	2218:1	2218:14	5	unsigned char *
TYPE_NAME	2218:1	2218:10	6	unsigned char
LEAF_NODE	2218:1	2218:1	7	unsigned
LEAF_NODE	2218:10	2218:10	7	char
POINTER	2218:14	2218:14	6	*
LEAF_NODE	2218:14	2218:14	7	*
NAME	2218:16	2218:16	5	buffer
LEAF_NODE	2218:16	2218:16	6	buffer
LEAF_NODE	0:0	0:0	5	;
INIT	2218:16	2218:16	5	buffer = NULL
ASSIGN	2218:16	2218:23	6	buffer = NULL
LVAL	2218:16	2218:16	7	buffer
NAME	2218:16	2218:16	8	buffer
LEAF_NODE	2218:16	2218:16	9	buffer
ASSIGN_OP	2218:22	2218:22	7	=
LEAF_NODE	2218:22	2218:22	8	=
RVAL	2218:23	2218:23	7	NULL
FIELD	2218:23	2218:23	8	NULL
LEAF_NODE	2218:23	2218:23	9	NULL
LEAF_NODE	2218:27	2218:27	4	;
SIMPLE_DECL	2219:1	2219:33	3	unsigned char * samplebuffer ; samplebuffer = NULL ;
VAR_DECL	2219:1	2219:16	4	unsigned char * samplebuffer ; samplebuffer = NULL
TYPE	2219:1	2219:14	5	unsigned char *
TYPE_NAME	2219:1	2219:10	6	unsigned char
LEAF_NODE	2219:1	2219:1	7	unsigned
LEAF_NODE	2219:10	2219:10	7	char
POINTER	2219:14	2219:14	6	*
LEAF_NODE	2219:14	2219:14	7	*
NAME	2219:16	2219:16	5	samplebuffer
LEAF_NODE	2219:16	2219:16	6	samplebuffer
LEAF_NODE	0:0	0:0	5	;
INIT	2219:16	2219:16	5	samplebuffer = NULL
ASSIGN	2219:16	2219:29	6	samplebuffer = NULL
LVAL	2219:16	2219:16	7	samplebuffer
NAME	2219:16	2219:16	8	samplebuffer
LEAF_NODE	2219:16	2219:16	9	samplebuffer
ASSIGN_OP	2219:28	2219:28	7	=
LEAF_NODE	2219:28	2219:28	8	=
RVAL	2219:29	2219:29	7	NULL
FIELD	2219:29	2219:29	8	NULL
LEAF_NODE	2219:29	2219:29	9	NULL
LEAF_NODE	2219:33	2219:33	4	;
SIMPLE_DECL	2220:1	2220:23	3	tsize_t bufferoffset ; bufferoffset = 0 ;
VAR_DECL	2220:1	2220:9	4	tsize_t bufferoffset ; bufferoffset = 0
TYPE	2220:1	2220:1	5	tsize_t
TYPE_NAME	2220:1	2220:1	6	tsize_t
LEAF_NODE	2220:1	2220:1	7	tsize_t
NAME	2220:9	2220:9	5	bufferoffset
LEAF_NODE	2220:9	2220:9	6	bufferoffset
LEAF_NODE	0:0	0:0	5	;
INIT	2220:9	2220:9	5	bufferoffset = 0
ASSIGN	2220:9	2220:22	6	bufferoffset = 0
LVAL	2220:9	2220:9	7	bufferoffset
NAME	2220:9	2220:9	8	bufferoffset
LEAF_NODE	2220:9	2220:9	9	bufferoffset
ASSIGN_OP	2220:21	2220:21	7	=
LEAF_NODE	2220:21	2220:21	8	=
RVAL	2220:22	2220:22	7	0
FIELD	2220:22	2220:22	8	0
LEAF_NODE	2220:22	2220:22	9	0
LEAF_NODE	2220:23	2220:23	4	;
SIMPLE_DECL	2221:1	2221:29	3	tsize_t samplebufferoffset ; samplebufferoffset = 0 ;
VAR_DECL	2221:1	2221:9	4	tsize_t samplebufferoffset ; samplebufferoffset = 0
TYPE	2221:1	2221:1	5	tsize_t
TYPE_NAME	2221:1	2221:1	6	tsize_t
LEAF_NODE	2221:1	2221:1	7	tsize_t
NAME	2221:9	2221:9	5	samplebufferoffset
LEAF_NODE	2221:9	2221:9	6	samplebufferoffset
LEAF_NODE	0:0	0:0	5	;
INIT	2221:9	2221:9	5	samplebufferoffset = 0
ASSIGN	2221:9	2221:28	6	samplebufferoffset = 0
LVAL	2221:9	2221:9	7	samplebufferoffset
NAME	2221:9	2221:9	8	samplebufferoffset
LEAF_NODE	2221:9	2221:9	9	samplebufferoffset
ASSIGN_OP	2221:27	2221:27	7	=
LEAF_NODE	2221:27	2221:27	8	=
RVAL	2221:28	2221:28	7	0
FIELD	2221:28	2221:28	8	0
LEAF_NODE	2221:28	2221:28	9	0
LEAF_NODE	2221:29	2221:29	4	;
SIMPLE_DECL	2222:1	2222:15	3	tsize_t read ; read = 0 ;
VAR_DECL	2222:1	2222:9	4	tsize_t read ; read = 0
TYPE	2222:1	2222:1	5	tsize_t
TYPE_NAME	2222:1	2222:1	6	tsize_t
LEAF_NODE	2222:1	2222:1	7	tsize_t
NAME	2222:9	2222:9	5	read
LEAF_NODE	2222:9	2222:9	6	read
LEAF_NODE	0:0	0:0	5	;
INIT	2222:9	2222:9	5	read = 0
ASSIGN	2222:9	2222:14	6	read = 0
LVAL	2222:9	2222:9	7	read
NAME	2222:9	2222:9	8	read
LEAF_NODE	2222:9	2222:9	9	read
ASSIGN_OP	2222:13	2222:13	7	=
LEAF_NODE	2222:13	2222:13	8	=
RVAL	2222:14	2222:14	7	0
FIELD	2222:14	2222:14	8	0
LEAF_NODE	2222:14	2222:14	9	0
LEAF_NODE	2222:15	2222:15	4	;
SIMPLE_DECL	2223:1	2223:13	3	tstrip_t i ; i = 0 ;
VAR_DECL	2223:1	2223:10	4	tstrip_t i ; i = 0
TYPE	2223:1	2223:1	5	tstrip_t
TYPE_NAME	2223:1	2223:1	6	tstrip_t
LEAF_NODE	2223:1	2223:1	7	tstrip_t
NAME	2223:10	2223:10	5	i
LEAF_NODE	2223:10	2223:10	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	2223:10	2223:10	5	i = 0
ASSIGN	2223:10	2223:12	6	i = 0
LVAL	2223:10	2223:10	7	i
NAME	2223:10	2223:10	8	i
LEAF_NODE	2223:10	2223:10	9	i
ASSIGN_OP	2223:11	2223:11	7	=
LEAF_NODE	2223:11	2223:11	8	=
RVAL	2223:12	2223:12	7	0
FIELD	2223:12	2223:12	8	0
LEAF_NODE	2223:12	2223:12	9	0
LEAF_NODE	2223:13	2223:13	4	;
SIMPLE_DECL	2224:1	2224:13	3	tstrip_t j ; j = 0 ;
VAR_DECL	2224:1	2224:10	4	tstrip_t j ; j = 0
TYPE	2224:1	2224:1	5	tstrip_t
TYPE_NAME	2224:1	2224:1	6	tstrip_t
LEAF_NODE	2224:1	2224:1	7	tstrip_t
NAME	2224:10	2224:10	5	j
LEAF_NODE	2224:10	2224:10	6	j
LEAF_NODE	0:0	0:0	5	;
INIT	2224:10	2224:10	5	j = 0
ASSIGN	2224:10	2224:12	6	j = 0
LVAL	2224:10	2224:10	7	j
NAME	2224:10	2224:10	8	j
LEAF_NODE	2224:10	2224:10	9	j
ASSIGN_OP	2224:11	2224:11	7	=
LEAF_NODE	2224:11	2224:11	8	=
RVAL	2224:12	2224:12	7	0
FIELD	2224:12	2224:12	8	0
LEAF_NODE	2224:12	2224:12	9	0
LEAF_NODE	2224:13	2224:13	4	;
SIMPLE_DECL	2225:1	2225:22	3	tstrip_t stripcount ; stripcount = 0 ;
VAR_DECL	2225:1	2225:10	4	tstrip_t stripcount ; stripcount = 0
TYPE	2225:1	2225:1	5	tstrip_t
TYPE_NAME	2225:1	2225:1	6	tstrip_t
LEAF_NODE	2225:1	2225:1	7	tstrip_t
NAME	2225:10	2225:10	5	stripcount
LEAF_NODE	2225:10	2225:10	6	stripcount
LEAF_NODE	0:0	0:0	5	;
INIT	2225:10	2225:10	5	stripcount = 0
ASSIGN	2225:10	2225:21	6	stripcount = 0
LVAL	2225:10	2225:10	7	stripcount
NAME	2225:10	2225:10	8	stripcount
LEAF_NODE	2225:10	2225:10	9	stripcount
ASSIGN_OP	2225:20	2225:20	7	=
LEAF_NODE	2225:20	2225:20	8	=
RVAL	2225:21	2225:21	7	0
FIELD	2225:21	2225:21	8	0
LEAF_NODE	2225:21	2225:21	9	0
LEAF_NODE	2225:22	2225:22	4	;
SIMPLE_DECL	2226:1	2226:20	3	tsize_t stripsize ; stripsize = 0 ;
VAR_DECL	2226:1	2226:9	4	tsize_t stripsize ; stripsize = 0
TYPE	2226:1	2226:1	5	tsize_t
TYPE_NAME	2226:1	2226:1	6	tsize_t
LEAF_NODE	2226:1	2226:1	7	tsize_t
NAME	2226:9	2226:9	5	stripsize
LEAF_NODE	2226:9	2226:9	6	stripsize
LEAF_NODE	0:0	0:0	5	;
INIT	2226:9	2226:9	5	stripsize = 0
ASSIGN	2226:9	2226:19	6	stripsize = 0
LVAL	2226:9	2226:9	7	stripsize
NAME	2226:9	2226:9	8	stripsize
LEAF_NODE	2226:9	2226:9	9	stripsize
ASSIGN_OP	2226:18	2226:18	7	=
LEAF_NODE	2226:18	2226:18	8	=
RVAL	2226:19	2226:19	7	0
FIELD	2226:19	2226:19	8	0
LEAF_NODE	2226:19	2226:19	9	0
LEAF_NODE	2226:20	2226:20	4	;
SIMPLE_DECL	2227:1	2227:24	3	tsize_t sepstripcount ; sepstripcount = 0 ;
VAR_DECL	2227:1	2227:9	4	tsize_t sepstripcount ; sepstripcount = 0
TYPE	2227:1	2227:1	5	tsize_t
TYPE_NAME	2227:1	2227:1	6	tsize_t
LEAF_NODE	2227:1	2227:1	7	tsize_t
NAME	2227:9	2227:9	5	sepstripcount
LEAF_NODE	2227:9	2227:9	6	sepstripcount
LEAF_NODE	0:0	0:0	5	;
INIT	2227:9	2227:9	5	sepstripcount = 0
ASSIGN	2227:9	2227:23	6	sepstripcount = 0
LVAL	2227:9	2227:9	7	sepstripcount
NAME	2227:9	2227:9	8	sepstripcount
LEAF_NODE	2227:9	2227:9	9	sepstripcount
ASSIGN_OP	2227:22	2227:22	7	=
LEAF_NODE	2227:22	2227:22	8	=
RVAL	2227:23	2227:23	7	0
FIELD	2227:23	2227:23	8	0
LEAF_NODE	2227:23	2227:23	9	0
LEAF_NODE	2227:24	2227:24	4	;
SIMPLE_DECL	2228:1	2228:23	3	tsize_t sepstripsize ; sepstripsize = 0 ;
VAR_DECL	2228:1	2228:9	4	tsize_t sepstripsize ; sepstripsize = 0
TYPE	2228:1	2228:1	5	tsize_t
TYPE_NAME	2228:1	2228:1	6	tsize_t
LEAF_NODE	2228:1	2228:1	7	tsize_t
NAME	2228:9	2228:9	5	sepstripsize
LEAF_NODE	2228:9	2228:9	6	sepstripsize
LEAF_NODE	0:0	0:0	5	;
INIT	2228:9	2228:9	5	sepstripsize = 0
ASSIGN	2228:9	2228:22	6	sepstripsize = 0
LVAL	2228:9	2228:9	7	sepstripsize
NAME	2228:9	2228:9	8	sepstripsize
LEAF_NODE	2228:9	2228:9	9	sepstripsize
ASSIGN_OP	2228:21	2228:21	7	=
LEAF_NODE	2228:21	2228:21	8	=
RVAL	2228:22	2228:22	7	0
FIELD	2228:22	2228:22	8	0
LEAF_NODE	2228:22	2228:22	9	0
LEAF_NODE	2228:23	2228:23	4	;
SIMPLE_DECL	2230:1	2230:21	3	toff_t inputoffset ; inputoffset = 0 ;
VAR_DECL	2230:1	2230:8	4	toff_t inputoffset ; inputoffset = 0
TYPE	2230:1	2230:1	5	toff_t
TYPE_NAME	2230:1	2230:1	6	toff_t
LEAF_NODE	2230:1	2230:1	7	toff_t
NAME	2230:8	2230:8	5	inputoffset
LEAF_NODE	2230:8	2230:8	6	inputoffset
LEAF_NODE	0:0	0:0	5	;
INIT	2230:8	2230:8	5	inputoffset = 0
ASSIGN	2230:8	2230:20	6	inputoffset = 0
LVAL	2230:8	2230:8	7	inputoffset
NAME	2230:8	2230:8	8	inputoffset
LEAF_NODE	2230:8	2230:8	9	inputoffset
ASSIGN_OP	2230:19	2230:19	7	=
LEAF_NODE	2230:19	2230:19	8	=
RVAL	2230:20	2230:20	7	0
FIELD	2230:20	2230:20	8	0
LEAF_NODE	2230:20	2230:20	9	0
LEAF_NODE	2230:21	2230:21	4	;
SIMPLE_DECL	2231:1	2231:16	3	uint16 h_samp ; h_samp = 1 ;
VAR_DECL	2231:1	2231:8	4	uint16 h_samp ; h_samp = 1
TYPE	2231:1	2231:1	5	uint16
TYPE_NAME	2231:1	2231:1	6	uint16
LEAF_NODE	2231:1	2231:1	7	uint16
NAME	2231:8	2231:8	5	h_samp
LEAF_NODE	2231:8	2231:8	6	h_samp
LEAF_NODE	0:0	0:0	5	;
INIT	2231:8	2231:8	5	h_samp = 1
ASSIGN	2231:8	2231:15	6	h_samp = 1
LVAL	2231:8	2231:8	7	h_samp
NAME	2231:8	2231:8	8	h_samp
LEAF_NODE	2231:8	2231:8	9	h_samp
ASSIGN_OP	2231:14	2231:14	7	=
LEAF_NODE	2231:14	2231:14	8	=
RVAL	2231:15	2231:15	7	1
FIELD	2231:15	2231:15	8	1
LEAF_NODE	2231:15	2231:15	9	1
LEAF_NODE	2231:16	2231:16	4	;
SIMPLE_DECL	2232:1	2232:16	3	uint16 v_samp ; v_samp = 1 ;
VAR_DECL	2232:1	2232:8	4	uint16 v_samp ; v_samp = 1
TYPE	2232:1	2232:1	5	uint16
TYPE_NAME	2232:1	2232:1	6	uint16
LEAF_NODE	2232:1	2232:1	7	uint16
NAME	2232:8	2232:8	5	v_samp
LEAF_NODE	2232:8	2232:8	6	v_samp
LEAF_NODE	0:0	0:0	5	;
INIT	2232:8	2232:8	5	v_samp = 1
ASSIGN	2232:8	2232:15	6	v_samp = 1
LVAL	2232:8	2232:8	7	v_samp
NAME	2232:8	2232:8	8	v_samp
LEAF_NODE	2232:8	2232:8	9	v_samp
ASSIGN_OP	2232:14	2232:14	7	=
LEAF_NODE	2232:14	2232:14	8	=
RVAL	2232:15	2232:15	7	1
FIELD	2232:15	2232:15	8	1
LEAF_NODE	2232:15	2232:15	9	1
LEAF_NODE	2232:16	2232:16	4	;
SIMPLE_DECL	2233:1	2233:12	3	uint16 ri ; ri = 1 ;
VAR_DECL	2233:1	2233:8	4	uint16 ri ; ri = 1
TYPE	2233:1	2233:1	5	uint16
TYPE_NAME	2233:1	2233:1	6	uint16
LEAF_NODE	2233:1	2233:1	7	uint16
NAME	2233:8	2233:8	5	ri
LEAF_NODE	2233:8	2233:8	6	ri
LEAF_NODE	0:0	0:0	5	;
INIT	2233:8	2233:8	5	ri = 1
ASSIGN	2233:8	2233:11	6	ri = 1
LVAL	2233:8	2233:8	7	ri
NAME	2233:8	2233:8	8	ri
LEAF_NODE	2233:8	2233:8	9	ri
ASSIGN_OP	2233:10	2233:10	7	=
LEAF_NODE	2233:10	2233:10	8	=
RVAL	2233:11	2233:11	7	1
FIELD	2233:11	2233:11	8	1
LEAF_NODE	2233:11	2233:11	9	1
LEAF_NODE	2233:12	2233:12	4	;
SIMPLE_DECL	2234:1	2234:14	3	uint32 rows ; rows = 0 ;
VAR_DECL	2234:1	2234:8	4	uint32 rows ; rows = 0
TYPE	2234:1	2234:1	5	uint32
TYPE_NAME	2234:1	2234:1	6	uint32
LEAF_NODE	2234:1	2234:1	7	uint32
NAME	2234:8	2234:8	5	rows
LEAF_NODE	2234:8	2234:8	6	rows
LEAF_NODE	0:0	0:0	5	;
INIT	2234:8	2234:8	5	rows = 0
ASSIGN	2234:8	2234:13	6	rows = 0
LVAL	2234:8	2234:8	7	rows
NAME	2234:8	2234:8	8	rows
LEAF_NODE	2234:8	2234:8	9	rows
ASSIGN_OP	2234:12	2234:12	7	=
LEAF_NODE	2234:12	2234:12	8	=
RVAL	2234:13	2234:13	7	0
FIELD	2234:13	2234:13	8	0
LEAF_NODE	2234:13	2234:13	9	0
LEAF_NODE	2234:14	2234:14	4	;
SIMPLE_DECL	2237:1	2237:19	3	unsigned char * jpt ;
VAR_DECL	2237:1	2237:16	4	unsigned char * jpt
TYPE	2237:1	2237:14	5	unsigned char *
TYPE_NAME	2237:1	2237:10	6	unsigned char
LEAF_NODE	2237:1	2237:1	7	unsigned
LEAF_NODE	2237:10	2237:10	7	char
POINTER	2237:14	2237:14	6	*
LEAF_NODE	2237:14	2237:14	7	*
NAME	2237:16	2237:16	5	jpt
LEAF_NODE	2237:16	2237:16	6	jpt
LEAF_NODE	2237:19	2237:19	4	;
SIMPLE_DECL	2238:1	2238:15	3	float * xfloatp ;
VAR_DECL	2238:1	2238:8	4	float * xfloatp
TYPE	2238:1	2238:6	5	float *
TYPE_NAME	2238:1	2238:1	6	float
LEAF_NODE	2238:1	2238:1	7	float
POINTER	2238:6	2238:6	6	*
LEAF_NODE	2238:6	2238:6	7	*
NAME	2238:8	2238:8	5	xfloatp
LEAF_NODE	2238:8	2238:8	6	xfloatp
LEAF_NODE	2238:15	2238:15	4	;
SIMPLE_DECL	2239:1	2239:12	3	uint64 * sbc ;
VAR_DECL	2239:1	2239:9	4	uint64 * sbc
TYPE	2239:1	2239:7	5	uint64 *
TYPE_NAME	2239:1	2239:1	6	uint64
LEAF_NODE	2239:1	2239:1	7	uint64
POINTER	2239:7	2239:7	6	*
LEAF_NODE	2239:7	2239:7	7	*
NAME	2239:9	2239:9	5	sbc
LEAF_NODE	2239:9	2239:9	6	sbc
LEAF_NODE	2239:12	2239:12	4	;
SIMPLE_DECL	2240:1	2240:27	3	unsigned char * stripbuffer ;
VAR_DECL	2240:1	2240:16	4	unsigned char * stripbuffer
TYPE	2240:1	2240:14	5	unsigned char *
TYPE_NAME	2240:1	2240:10	6	unsigned char
LEAF_NODE	2240:1	2240:1	7	unsigned
LEAF_NODE	2240:10	2240:10	7	char
POINTER	2240:14	2240:14	6	*
LEAF_NODE	2240:14	2240:14	7	*
NAME	2240:16	2240:16	5	stripbuffer
LEAF_NODE	2240:16	2240:16	6	stripbuffer
LEAF_NODE	2240:27	2240:27	4	;
SIMPLE_DECL	2241:1	2241:22	3	tsize_t striplength ; striplength = 0 ;
VAR_DECL	2241:1	2241:9	4	tsize_t striplength ; striplength = 0
TYPE	2241:1	2241:1	5	tsize_t
TYPE_NAME	2241:1	2241:1	6	tsize_t
LEAF_NODE	2241:1	2241:1	7	tsize_t
NAME	2241:9	2241:9	5	striplength
LEAF_NODE	2241:9	2241:9	6	striplength
LEAF_NODE	0:0	0:0	5	;
INIT	2241:9	2241:9	5	striplength = 0
ASSIGN	2241:9	2241:21	6	striplength = 0
LVAL	2241:9	2241:9	7	striplength
NAME	2241:9	2241:9	8	striplength
LEAF_NODE	2241:9	2241:9	9	striplength
ASSIGN_OP	2241:20	2241:20	7	=
LEAF_NODE	2241:20	2241:20	8	=
RVAL	2241:21	2241:21	7	0
FIELD	2241:21	2241:21	8	0
LEAF_NODE	2241:21	2241:21	9	0
LEAF_NODE	2241:22	2241:22	4	;
SIMPLE_DECL	2242:1	2242:25	3	uint32 max_striplength ; max_striplength = 0 ;
VAR_DECL	2242:1	2242:8	4	uint32 max_striplength ; max_striplength = 0
TYPE	2242:1	2242:1	5	uint32
TYPE_NAME	2242:1	2242:1	6	uint32
LEAF_NODE	2242:1	2242:1	7	uint32
NAME	2242:8	2242:8	5	max_striplength
LEAF_NODE	2242:8	2242:8	6	max_striplength
LEAF_NODE	0:0	0:0	5	;
INIT	2242:8	2242:8	5	max_striplength = 0
ASSIGN	2242:8	2242:24	6	max_striplength = 0
LVAL	2242:8	2242:8	7	max_striplength
NAME	2242:8	2242:8	8	max_striplength
LEAF_NODE	2242:8	2242:8	9	max_striplength
ASSIGN_OP	2242:23	2242:23	7	=
LEAF_NODE	2242:23	2242:23	8	=
RVAL	2242:24	2242:24	7	0
FIELD	2242:24	2242:24	8	0
LEAF_NODE	2242:24	2242:24	9	0
LEAF_NODE	2242:25	2242:25	4	;
SELECTION	2246:1	2247:2	3	
KEYWORD	2246:1	2246:1	4	if
LEAF_NODE	2246:1	2246:1	5	if
LEAF_NODE	2246:4	2246:4	4	(
CONDITION	2246:5	2246:5	4	t2p -> t2p_error != T2P_ERR_OK
EXPR	2246:5	2246:23	5	t2p -> t2p_error != T2P_ERR_OK
FIELD	2246:5	2246:10	6	t2p -> t2p_error
LEAF_NODE	2246:5	2246:5	7	t2p
LEAF_NODE	2246:8	2246:8	7	->
LEAF_NODE	2246:10	2246:10	7	t2p_error
EQ_OPERATOR	2246:20	2246:20	6	!=
LEAF_NODE	2246:20	2246:20	7	!=
FIELD	2246:23	2246:23	6	T2P_ERR_OK
LEAF_NODE	2246:23	2246:23	7	T2P_ERR_OK
LEAF_NODE	2246:33	2246:33	4	)
STATEMENTS	2247:2	2247:2	4	
JUMP_STATEMENT	2247:2	2247:11	5	return ( 0 ) ;
KEYWORD	2247:2	2247:2	6	return
LEAF_NODE	2247:2	2247:2	7	return
DESTINATION	2247:8	2247:8	6	( 0 )
EXPR	2247:8	2247:10	7	( 0 )
LEAF_NODE	2247:8	2247:8	8	(
FIELD	2247:9	2247:9	8	0
LEAF_NODE	2247:9	2247:9	9	0
LEAF_NODE	2247:10	2247:10	8	)
LEAF_NODE	2247:11	2247:11	6	;
SELECTION	2249:1	2249:44	3	
KEYWORD	2249:1	2249:1	4	if
LEAF_NODE	2249:1	2249:1	5	if
LEAF_NODE	2249:3	2249:3	4	(
CONDITION	2249:4	2249:4	4	t2p -> pdf_transcode == T2P_TRANSCODE_RAW
EXPR	2249:4	2249:26	5	t2p -> pdf_transcode == T2P_TRANSCODE_RAW
FIELD	2249:4	2249:9	6	t2p -> pdf_transcode
LEAF_NODE	2249:4	2249:4	7	t2p
LEAF_NODE	2249:7	2249:7	7	->
LEAF_NODE	2249:9	2249:9	7	pdf_transcode
EQ_OPERATOR	2249:23	2249:23	6	==
LEAF_NODE	2249:23	2249:23	7	==
FIELD	2249:26	2249:26	6	T2P_TRANSCODE_RAW
LEAF_NODE	2249:26	2249:26	7	T2P_TRANSCODE_RAW
LEAF_NODE	2249:43	2249:43	4	)
STATEMENTS	2249:44	2494:1	4	
LEAF_NODE	2249:44	2249:44	5	{
STATEMENTS	2251:2	2493:2	5	
SELECTION	2251:2	2251:45	6	
KEYWORD	2251:2	2251:2	7	if
LEAF_NODE	2251:2	2251:2	8	if
LEAF_NODE	2251:4	2251:4	7	(
CONDITION	2251:5	2251:5	7	t2p -> pdf_compression == T2P_COMPRESS_G4
EXPR	2251:5	2251:29	8	t2p -> pdf_compression == T2P_COMPRESS_G4
FIELD	2251:5	2251:10	9	t2p -> pdf_compression
LEAF_NODE	2251:5	2251:5	10	t2p
LEAF_NODE	2251:8	2251:8	10	->
LEAF_NODE	2251:10	2251:10	10	pdf_compression
EQ_OPERATOR	2251:26	2251:26	9	==
LEAF_NODE	2251:26	2251:26	10	==
FIELD	2251:29	2251:29	9	T2P_COMPRESS_G4
LEAF_NODE	2251:29	2251:29	10	T2P_COMPRESS_G4
LEAF_NODE	2251:44	2251:44	7	)
STATEMENTS	2251:45	2277:2	7	
LEAF_NODE	2251:45	2251:45	8	{
STATEMENTS	2252:3	2276:3	8	
EXPR_STATEMENT	2252:3	2253:35	9	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2252:3	2252:3	10	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2252:3	2252:12	11	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2252:3	2252:3	12	buffer
FIELD	2252:3	2252:3	13	buffer
LEAF_NODE	2252:3	2252:3	14	buffer
ASSIGN_OP	2252:10	2252:10	12	=
LEAF_NODE	2252:10	2252:10	13	=
RVAL	2252:12	2253:4	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2252:12	2252:12	13	(
TYPE_NAME	2252:13	2252:22	13	unsigned char
LEAF_NODE	2252:13	2252:13	14	unsigned
LEAF_NODE	2252:22	2252:22	14	char
LEAF_NODE	2252:26	2252:26	13	*
LEAF_NODE	2252:27	2252:27	13	)
FUNCTION_CALL	2253:4	2253:34	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2253:4	2253:4	14	_TIFFmalloc
LEAF_NODE	2253:4	2253:4	15	_TIFFmalloc
LEAF_NODE	2253:15	2253:15	14	(
ARGUMENT	2253:16	2253:16	14	t2p -> tiff_datasize
FIELD	2253:16	2253:21	15	t2p -> tiff_datasize
LEAF_NODE	2253:16	2253:16	16	t2p
LEAF_NODE	2253:19	2253:19	16	->
LEAF_NODE	2253:21	2253:21	16	tiff_datasize
LEAF_NODE	2253:34	2253:34	14	)
LEAF_NODE	2253:35	2253:35	10	;
SELECTION	2254:3	2254:23	9	
KEYWORD	2254:3	2254:3	10	if
LEAF_NODE	2254:3	2254:3	11	if
LEAF_NODE	2254:6	2254:6	10	(
CONDITION	2254:7	2254:7	10	buffer == NULL
EXPR	2254:7	2254:17	11	buffer == NULL
FIELD	2254:7	2254:7	12	buffer
LEAF_NODE	2254:7	2254:7	13	buffer
EQ_OPERATOR	2254:14	2254:14	12	==
LEAF_NODE	2254:14	2254:14	13	==
FIELD	2254:17	2254:17	12	NULL
LEAF_NODE	2254:17	2254:17	13	NULL
LEAF_NODE	2254:21	2254:21	10	)
STATEMENTS	2254:23	2262:3	10	
LEAF_NODE	2254:23	2254:23	11	{
STATEMENTS	2255:4	2261:4	11	
LEAF_NODE	2255:4	2255:4	12	TIFFError
LEAF_NODE	2255:13	2255:13	12	(
LEAF_NODE	2255:14	2255:14	12	TIFF2PDF_MODULE
LEAF_NODE	2255:29	2255:29	12	,
LEAF_NODE	2256:42	2256:42	12	"Can't allocate %lu bytes of memory for "
LEAF_NODE	2257:42	2257:42	12	"t2p_readwrite_pdf_image, %s"
LEAF_NODE	2257:71	2257:71	12	,
LEAF_NODE	2258:5	2258:5	12	(
LEAF_NODE	2258:6	2258:6	12	unsigned
LEAF_NODE	2258:15	2258:15	12	long
LEAF_NODE	2258:19	2258:19	12	)
LEAF_NODE	2258:21	2258:21	12	t2p
LEAF_NODE	2258:24	2258:24	12	->
LEAF_NODE	2258:26	2258:26	12	tiff_datasize
LEAF_NODE	2258:39	2258:39	12	,
LEAF_NODE	2259:5	2259:5	12	TIFFFileName
LEAF_NODE	2259:17	2259:17	12	(
LEAF_NODE	2259:18	2259:18	12	input
LEAF_NODE	2259:23	2259:23	12	)
LEAF_NODE	2259:24	2259:24	12	)
LEAF_NODE	2259:25	2259:25	12	;
EXPR_STATEMENT	2260:4	2260:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2260:4	2260:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2260:4	2260:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2260:4	2260:4	15	t2p -> t2p_error
FIELD	2260:4	2260:9	16	t2p -> t2p_error
LEAF_NODE	2260:4	2260:4	17	t2p
LEAF_NODE	2260:7	2260:7	17	->
LEAF_NODE	2260:9	2260:9	17	t2p_error
ASSIGN_OP	2260:19	2260:19	15	=
LEAF_NODE	2260:19	2260:19	16	=
RVAL	2260:21	2260:21	15	T2P_ERR_ERROR
FIELD	2260:21	2260:21	16	T2P_ERR_ERROR
LEAF_NODE	2260:21	2260:21	17	T2P_ERR_ERROR
LEAF_NODE	2260:34	2260:34	13	;
JUMP_STATEMENT	2261:4	2261:13	12	return ( 0 ) ;
KEYWORD	2261:4	2261:4	13	return
LEAF_NODE	2261:4	2261:4	14	return
DESTINATION	2261:10	2261:10	13	( 0 )
EXPR	2261:10	2261:12	14	( 0 )
LEAF_NODE	2261:10	2261:10	15	(
FIELD	2261:11	2261:11	15	0
LEAF_NODE	2261:11	2261:11	16	0
LEAF_NODE	2261:12	2261:12	15	)
LEAF_NODE	2261:13	2261:13	13	;
LEAF_NODE	2262:3	2262:3	11	}
EXPR_STATEMENT	2263:3	2264:25	9	TIFFReadRawStrip ( input , 0 , ( tdata_t ) buffer , t2p -> tiff_datasize ) ;
EXPR	2263:3	2263:3	10	TIFFReadRawStrip ( input , 0 , ( tdata_t ) buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2263:3	2264:24	11	TIFFReadRawStrip ( input , 0 , ( tdata_t ) buffer , t2p -> tiff_datasize )
CALLEE	2263:3	2263:3	12	TIFFReadRawStrip
LEAF_NODE	2263:3	2263:3	13	TIFFReadRawStrip
LEAF_NODE	2263:19	2263:19	12	(
ARGUMENT	2263:20	2263:20	12	input
FIELD	2263:20	2263:20	13	input
LEAF_NODE	2263:20	2263:20	14	input
LEAF_NODE	2263:25	2263:25	12	,
ARGUMENT	2263:27	2263:27	12	0
FIELD	2263:27	2263:27	13	0
LEAF_NODE	2263:27	2263:27	14	0
LEAF_NODE	2263:28	2263:28	12	,
ARGUMENT	2263:30	2263:40	12	( tdata_t ) buffer
LEAF_NODE	2263:30	2263:30	13	(
TYPE_NAME	2263:31	2263:31	13	tdata_t
LEAF_NODE	2263:31	2263:31	14	tdata_t
LEAF_NODE	2263:38	2263:38	13	)
FIELD	2263:40	2263:40	13	buffer
LEAF_NODE	2263:40	2263:40	14	buffer
LEAF_NODE	2263:46	2263:46	12	,
ARGUMENT	2264:6	2264:6	12	t2p -> tiff_datasize
FIELD	2264:6	2264:11	13	t2p -> tiff_datasize
LEAF_NODE	2264:6	2264:6	14	t2p
LEAF_NODE	2264:9	2264:9	14	->
LEAF_NODE	2264:11	2264:11	14	tiff_datasize
LEAF_NODE	2264:24	2264:24	12	)
LEAF_NODE	2264:25	2264:25	10	;
SELECTION	2265:3	2265:46	9	
KEYWORD	2265:3	2265:3	10	if
LEAF_NODE	2265:3	2265:3	11	if
LEAF_NODE	2265:6	2265:6	10	(
CONDITION	2265:7	2265:7	10	t2p -> tiff_fillorder == FILLORDER_LSB2MSB
EXPR	2265:7	2265:28	11	t2p -> tiff_fillorder == FILLORDER_LSB2MSB
FIELD	2265:7	2265:12	12	t2p -> tiff_fillorder
LEAF_NODE	2265:7	2265:7	13	t2p
LEAF_NODE	2265:10	2265:10	13	->
LEAF_NODE	2265:12	2265:12	13	tiff_fillorder
EQ_OPERATOR	2265:26	2265:26	12	==
LEAF_NODE	2265:26	2265:26	13	==
FIELD	2265:28	2265:28	12	FILLORDER_LSB2MSB
LEAF_NODE	2265:28	2265:28	13	FILLORDER_LSB2MSB
LEAF_NODE	2265:45	2265:45	10	)
STATEMENTS	2265:46	2272:3	10	
LEAF_NODE	2265:46	2265:46	11	{
STATEMENTS	2270:5	2270:5	11	
EXPR_STATEMENT	2270:5	2271:26	12	TIFFReverseBits ( buffer , t2p -> tiff_datasize ) ;
EXPR	2270:5	2270:5	13	TIFFReverseBits ( buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2270:5	2271:25	14	TIFFReverseBits ( buffer , t2p -> tiff_datasize )
CALLEE	2270:5	2270:5	15	TIFFReverseBits
LEAF_NODE	2270:5	2270:5	16	TIFFReverseBits
LEAF_NODE	2270:20	2270:20	15	(
ARGUMENT	2270:21	2270:21	15	buffer
FIELD	2270:21	2270:21	16	buffer
LEAF_NODE	2270:21	2270:21	17	buffer
LEAF_NODE	2270:27	2270:27	15	,
ARGUMENT	2271:7	2271:7	15	t2p -> tiff_datasize
FIELD	2271:7	2271:12	16	t2p -> tiff_datasize
LEAF_NODE	2271:7	2271:7	17	t2p
LEAF_NODE	2271:10	2271:10	17	->
LEAF_NODE	2271:12	2271:12	17	tiff_datasize
LEAF_NODE	2271:25	2271:25	15	)
LEAF_NODE	2271:26	2271:26	13	;
LEAF_NODE	2272:3	2272:3	11	}
EXPR_STATEMENT	2273:3	2274:29	9	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize ) ;
EXPR	2273:3	2273:3	10	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2273:3	2274:28	11	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize )
CALLEE	2273:3	2273:3	12	t2pWriteFile
LEAF_NODE	2273:3	2273:3	13	t2pWriteFile
LEAF_NODE	2273:15	2273:15	12	(
ARGUMENT	2273:16	2273:16	12	output
FIELD	2273:16	2273:16	13	output
LEAF_NODE	2273:16	2273:16	14	output
LEAF_NODE	2273:22	2273:22	12	,
ARGUMENT	2273:24	2273:34	12	( tdata_t ) buffer
LEAF_NODE	2273:24	2273:24	13	(
TYPE_NAME	2273:25	2273:25	13	tdata_t
LEAF_NODE	2273:25	2273:25	14	tdata_t
LEAF_NODE	2273:32	2273:32	13	)
FIELD	2273:34	2273:34	13	buffer
LEAF_NODE	2273:34	2273:34	14	buffer
LEAF_NODE	2273:40	2273:40	12	,
ARGUMENT	2274:10	2274:10	12	t2p -> tiff_datasize
FIELD	2274:10	2274:15	13	t2p -> tiff_datasize
LEAF_NODE	2274:10	2274:10	14	t2p
LEAF_NODE	2274:13	2274:13	14	->
LEAF_NODE	2274:15	2274:15	14	tiff_datasize
LEAF_NODE	2274:28	2274:28	12	)
LEAF_NODE	2274:29	2274:29	10	;
EXPR_STATEMENT	2275:3	2275:20	9	_TIFFfree ( buffer ) ;
EXPR	2275:3	2275:3	10	_TIFFfree ( buffer )
FUNCTION_CALL	2275:3	2275:19	11	_TIFFfree ( buffer )
CALLEE	2275:3	2275:3	12	_TIFFfree
LEAF_NODE	2275:3	2275:3	13	_TIFFfree
LEAF_NODE	2275:12	2275:12	12	(
ARGUMENT	2275:13	2275:13	12	buffer
FIELD	2275:13	2275:13	13	buffer
LEAF_NODE	2275:13	2275:13	14	buffer
LEAF_NODE	2275:19	2275:19	12	)
LEAF_NODE	2275:20	2275:20	10	;
JUMP_STATEMENT	2276:3	2276:29	9	return ( t2p -> tiff_datasize ) ;
KEYWORD	2276:3	2276:3	10	return
LEAF_NODE	2276:3	2276:3	11	return
DESTINATION	2276:9	2276:9	10	( t2p -> tiff_datasize )
EXPR	2276:9	2276:28	11	( t2p -> tiff_datasize )
LEAF_NODE	2276:9	2276:9	12	(
FIELD	2276:10	2276:15	12	t2p -> tiff_datasize
LEAF_NODE	2276:10	2276:10	13	t2p
LEAF_NODE	2276:13	2276:13	13	->
LEAF_NODE	2276:15	2276:15	13	tiff_datasize
LEAF_NODE	2276:28	2276:28	12	)
LEAF_NODE	2276:29	2276:29	10	;
LEAF_NODE	2277:2	2277:2	8	}
SELECTION	2280:2	2280:48	6	
KEYWORD	2280:2	2280:2	7	if
LEAF_NODE	2280:2	2280:2	8	if
LEAF_NODE	2280:5	2280:5	7	(
CONDITION	2280:6	2280:6	7	t2p -> pdf_compression == T2P_COMPRESS_ZIP
EXPR	2280:6	2280:30	8	t2p -> pdf_compression == T2P_COMPRESS_ZIP
FIELD	2280:6	2280:11	9	t2p -> pdf_compression
LEAF_NODE	2280:6	2280:6	10	t2p
LEAF_NODE	2280:9	2280:9	10	->
LEAF_NODE	2280:11	2280:11	10	pdf_compression
EQ_OPERATOR	2280:27	2280:27	9	==
LEAF_NODE	2280:27	2280:27	10	==
FIELD	2280:30	2280:30	9	T2P_COMPRESS_ZIP
LEAF_NODE	2280:30	2280:30	10	T2P_COMPRESS_ZIP
LEAF_NODE	2280:46	2280:46	7	)
STATEMENTS	2280:48	2302:2	7	
LEAF_NODE	2280:48	2280:48	8	{
STATEMENTS	2281:3	2301:3	8	
EXPR_STATEMENT	2281:3	2282:35	9	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2281:3	2281:3	10	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2281:3	2281:12	11	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2281:3	2281:3	12	buffer
FIELD	2281:3	2281:3	13	buffer
LEAF_NODE	2281:3	2281:3	14	buffer
ASSIGN_OP	2281:10	2281:10	12	=
LEAF_NODE	2281:10	2281:10	13	=
RVAL	2281:12	2282:4	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2281:12	2281:12	13	(
TYPE_NAME	2281:13	2281:22	13	unsigned char
LEAF_NODE	2281:13	2281:13	14	unsigned
LEAF_NODE	2281:22	2281:22	14	char
LEAF_NODE	2281:26	2281:26	13	*
LEAF_NODE	2281:27	2281:27	13	)
FUNCTION_CALL	2282:4	2282:34	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2282:4	2282:4	14	_TIFFmalloc
LEAF_NODE	2282:4	2282:4	15	_TIFFmalloc
LEAF_NODE	2282:15	2282:15	14	(
ARGUMENT	2282:16	2282:16	14	t2p -> tiff_datasize
FIELD	2282:16	2282:21	15	t2p -> tiff_datasize
LEAF_NODE	2282:16	2282:16	16	t2p
LEAF_NODE	2282:19	2282:19	16	->
LEAF_NODE	2282:21	2282:21	16	tiff_datasize
LEAF_NODE	2282:34	2282:34	14	)
LEAF_NODE	2282:35	2282:35	10	;
SELECTION	2283:3	2283:21	9	
KEYWORD	2283:3	2283:3	10	if
LEAF_NODE	2283:3	2283:3	11	if
LEAF_NODE	2283:5	2283:5	10	(
CONDITION	2283:6	2283:6	10	buffer == NULL
EXPR	2283:6	2283:16	11	buffer == NULL
FIELD	2283:6	2283:6	12	buffer
LEAF_NODE	2283:6	2283:6	13	buffer
EQ_OPERATOR	2283:13	2283:13	12	==
LEAF_NODE	2283:13	2283:13	13	==
FIELD	2283:16	2283:16	12	NULL
LEAF_NODE	2283:16	2283:16	13	NULL
LEAF_NODE	2283:20	2283:20	10	)
STATEMENTS	2283:21	2290:3	10	
LEAF_NODE	2283:21	2283:21	11	{
STATEMENTS	2284:4	2289:4	11	
EXPR_STATEMENT	2284:4	2287:25	12	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) ) ;
EXPR	2284:4	2284:4	13	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
FUNCTION_CALL	2284:4	2287:24	14	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
CALLEE	2284:4	2284:4	15	TIFFError
LEAF_NODE	2284:4	2284:4	16	TIFFError
LEAF_NODE	2284:13	2284:13	15	(
ARGUMENT	2284:14	2284:14	15	TIFF2PDF_MODULE
FIELD	2284:14	2284:14	16	TIFF2PDF_MODULE
LEAF_NODE	2284:14	2284:14	17	TIFF2PDF_MODULE
LEAF_NODE	2284:29	2284:29	15	,
ARGUMENT	2285:1	2285:1	15	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2285:1	2285:1	16	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2285:1	2285:1	17	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2285:69	2285:69	15	,
ARGUMENT	2286:5	2286:21	15	( unsigned long ) t2p -> tiff_datasize
LEAF_NODE	2286:5	2286:5	16	(
TYPE_NAME	2286:6	2286:15	16	unsigned long
LEAF_NODE	2286:6	2286:6	17	unsigned
LEAF_NODE	2286:15	2286:15	17	long
LEAF_NODE	2286:19	2286:19	16	)
FIELD	2286:21	2286:26	16	t2p -> tiff_datasize
LEAF_NODE	2286:21	2286:21	17	t2p
LEAF_NODE	2286:24	2286:24	17	->
LEAF_NODE	2286:26	2286:26	17	tiff_datasize
LEAF_NODE	2286:39	2286:39	15	,
ARGUMENT	2287:5	2287:5	15	TIFFFileName ( input )
FUNCTION_CALL	2287:5	2287:23	16	TIFFFileName ( input )
CALLEE	2287:5	2287:5	17	TIFFFileName
LEAF_NODE	2287:5	2287:5	18	TIFFFileName
LEAF_NODE	2287:17	2287:17	17	(
ARGUMENT	2287:18	2287:18	17	input
FIELD	2287:18	2287:18	18	input
LEAF_NODE	2287:18	2287:18	19	input
LEAF_NODE	2287:23	2287:23	17	)
LEAF_NODE	2287:24	2287:24	15	)
LEAF_NODE	2287:25	2287:25	13	;
EXPR_STATEMENT	2288:4	2288:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2288:4	2288:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2288:4	2288:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2288:4	2288:4	15	t2p -> t2p_error
FIELD	2288:4	2288:9	16	t2p -> t2p_error
LEAF_NODE	2288:4	2288:4	17	t2p
LEAF_NODE	2288:7	2288:7	17	->
LEAF_NODE	2288:9	2288:9	17	t2p_error
ASSIGN_OP	2288:19	2288:19	15	=
LEAF_NODE	2288:19	2288:19	16	=
RVAL	2288:21	2288:21	15	T2P_ERR_ERROR
FIELD	2288:21	2288:21	16	T2P_ERR_ERROR
LEAF_NODE	2288:21	2288:21	17	T2P_ERR_ERROR
LEAF_NODE	2288:34	2288:34	13	;
JUMP_STATEMENT	2289:4	2289:13	12	return ( 0 ) ;
KEYWORD	2289:4	2289:4	13	return
LEAF_NODE	2289:4	2289:4	14	return
DESTINATION	2289:10	2289:10	13	( 0 )
EXPR	2289:10	2289:12	14	( 0 )
LEAF_NODE	2289:10	2289:10	15	(
FIELD	2289:11	2289:11	15	0
LEAF_NODE	2289:11	2289:11	16	0
LEAF_NODE	2289:12	2289:12	15	)
LEAF_NODE	2289:13	2289:13	13	;
LEAF_NODE	2290:3	2290:3	11	}
EXPR_STATEMENT	2291:24	2291:61	9	memset ( buffer , 0 , t2p -> tiff_datasize ) ;
EXPR	2291:24	2291:24	10	memset ( buffer , 0 , t2p -> tiff_datasize )
FUNCTION_CALL	2291:24	2291:60	11	memset ( buffer , 0 , t2p -> tiff_datasize )
CALLEE	2291:24	2291:24	12	memset
LEAF_NODE	2291:24	2291:24	13	memset
LEAF_NODE	2291:30	2291:30	12	(
ARGUMENT	2291:31	2291:31	12	buffer
FIELD	2291:31	2291:31	13	buffer
LEAF_NODE	2291:31	2291:31	14	buffer
LEAF_NODE	2291:37	2291:37	12	,
ARGUMENT	2291:39	2291:39	12	0
FIELD	2291:39	2291:39	13	0
LEAF_NODE	2291:39	2291:39	14	0
LEAF_NODE	2291:40	2291:40	12	,
ARGUMENT	2291:42	2291:42	12	t2p -> tiff_datasize
FIELD	2291:42	2291:47	13	t2p -> tiff_datasize
LEAF_NODE	2291:42	2291:42	14	t2p
LEAF_NODE	2291:45	2291:45	14	->
LEAF_NODE	2291:47	2291:47	14	tiff_datasize
LEAF_NODE	2291:60	2291:60	12	)
LEAF_NODE	2291:61	2291:61	10	;
EXPR_STATEMENT	2292:3	2293:25	9	TIFFReadRawStrip ( input , 0 , ( tdata_t ) buffer , t2p -> tiff_datasize ) ;
EXPR	2292:3	2292:3	10	TIFFReadRawStrip ( input , 0 , ( tdata_t ) buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2292:3	2293:24	11	TIFFReadRawStrip ( input , 0 , ( tdata_t ) buffer , t2p -> tiff_datasize )
CALLEE	2292:3	2292:3	12	TIFFReadRawStrip
LEAF_NODE	2292:3	2292:3	13	TIFFReadRawStrip
LEAF_NODE	2292:19	2292:19	12	(
ARGUMENT	2292:20	2292:20	12	input
FIELD	2292:20	2292:20	13	input
LEAF_NODE	2292:20	2292:20	14	input
LEAF_NODE	2292:25	2292:25	12	,
ARGUMENT	2292:27	2292:27	12	0
FIELD	2292:27	2292:27	13	0
LEAF_NODE	2292:27	2292:27	14	0
LEAF_NODE	2292:28	2292:28	12	,
ARGUMENT	2292:30	2292:40	12	( tdata_t ) buffer
LEAF_NODE	2292:30	2292:30	13	(
TYPE_NAME	2292:31	2292:31	13	tdata_t
LEAF_NODE	2292:31	2292:31	14	tdata_t
LEAF_NODE	2292:38	2292:38	13	)
FIELD	2292:40	2292:40	13	buffer
LEAF_NODE	2292:40	2292:40	14	buffer
LEAF_NODE	2292:46	2292:46	12	,
ARGUMENT	2293:6	2293:6	12	t2p -> tiff_datasize
FIELD	2293:6	2293:11	13	t2p -> tiff_datasize
LEAF_NODE	2293:6	2293:6	14	t2p
LEAF_NODE	2293:9	2293:9	14	->
LEAF_NODE	2293:11	2293:11	14	tiff_datasize
LEAF_NODE	2293:24	2293:24	12	)
LEAF_NODE	2293:25	2293:25	10	;
SELECTION	2294:3	2294:47	9	
KEYWORD	2294:3	2294:3	10	if
LEAF_NODE	2294:3	2294:3	11	if
LEAF_NODE	2294:6	2294:6	10	(
CONDITION	2294:7	2294:7	10	t2p -> tiff_fillorder == FILLORDER_LSB2MSB
EXPR	2294:7	2294:28	11	t2p -> tiff_fillorder == FILLORDER_LSB2MSB
FIELD	2294:7	2294:12	12	t2p -> tiff_fillorder
LEAF_NODE	2294:7	2294:7	13	t2p
LEAF_NODE	2294:10	2294:10	13	->
LEAF_NODE	2294:12	2294:12	13	tiff_fillorder
EQ_OPERATOR	2294:26	2294:26	12	==
LEAF_NODE	2294:26	2294:26	13	==
FIELD	2294:28	2294:28	12	FILLORDER_LSB2MSB
LEAF_NODE	2294:28	2294:28	13	FILLORDER_LSB2MSB
LEAF_NODE	2294:45	2294:45	10	)
STATEMENTS	2294:47	2297:3	10	
LEAF_NODE	2294:47	2294:47	11	{
STATEMENTS	2295:5	2295:5	11	
EXPR_STATEMENT	2295:5	2296:26	12	TIFFReverseBits ( buffer , t2p -> tiff_datasize ) ;
EXPR	2295:5	2295:5	13	TIFFReverseBits ( buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2295:5	2296:25	14	TIFFReverseBits ( buffer , t2p -> tiff_datasize )
CALLEE	2295:5	2295:5	15	TIFFReverseBits
LEAF_NODE	2295:5	2295:5	16	TIFFReverseBits
LEAF_NODE	2295:20	2295:20	15	(
ARGUMENT	2295:21	2295:21	15	buffer
FIELD	2295:21	2295:21	16	buffer
LEAF_NODE	2295:21	2295:21	17	buffer
LEAF_NODE	2295:27	2295:27	15	,
ARGUMENT	2296:7	2296:7	15	t2p -> tiff_datasize
FIELD	2296:7	2296:12	16	t2p -> tiff_datasize
LEAF_NODE	2296:7	2296:7	17	t2p
LEAF_NODE	2296:10	2296:10	17	->
LEAF_NODE	2296:12	2296:12	17	tiff_datasize
LEAF_NODE	2296:25	2296:25	15	)
LEAF_NODE	2296:26	2296:26	13	;
LEAF_NODE	2297:3	2297:3	11	}
EXPR_STATEMENT	2298:3	2299:29	9	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize ) ;
EXPR	2298:3	2298:3	10	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2298:3	2299:28	11	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize )
CALLEE	2298:3	2298:3	12	t2pWriteFile
LEAF_NODE	2298:3	2298:3	13	t2pWriteFile
LEAF_NODE	2298:15	2298:15	12	(
ARGUMENT	2298:16	2298:16	12	output
FIELD	2298:16	2298:16	13	output
LEAF_NODE	2298:16	2298:16	14	output
LEAF_NODE	2298:22	2298:22	12	,
ARGUMENT	2298:24	2298:34	12	( tdata_t ) buffer
LEAF_NODE	2298:24	2298:24	13	(
TYPE_NAME	2298:25	2298:25	13	tdata_t
LEAF_NODE	2298:25	2298:25	14	tdata_t
LEAF_NODE	2298:32	2298:32	13	)
FIELD	2298:34	2298:34	13	buffer
LEAF_NODE	2298:34	2298:34	14	buffer
LEAF_NODE	2298:40	2298:40	12	,
ARGUMENT	2299:10	2299:10	12	t2p -> tiff_datasize
FIELD	2299:10	2299:15	13	t2p -> tiff_datasize
LEAF_NODE	2299:10	2299:10	14	t2p
LEAF_NODE	2299:13	2299:13	14	->
LEAF_NODE	2299:15	2299:15	14	tiff_datasize
LEAF_NODE	2299:28	2299:28	12	)
LEAF_NODE	2299:29	2299:29	10	;
EXPR_STATEMENT	2300:3	2300:20	9	_TIFFfree ( buffer ) ;
EXPR	2300:3	2300:3	10	_TIFFfree ( buffer )
FUNCTION_CALL	2300:3	2300:19	11	_TIFFfree ( buffer )
CALLEE	2300:3	2300:3	12	_TIFFfree
LEAF_NODE	2300:3	2300:3	13	_TIFFfree
LEAF_NODE	2300:12	2300:12	12	(
ARGUMENT	2300:13	2300:13	12	buffer
FIELD	2300:13	2300:13	13	buffer
LEAF_NODE	2300:13	2300:13	14	buffer
LEAF_NODE	2300:19	2300:19	12	)
LEAF_NODE	2300:20	2300:20	10	;
JUMP_STATEMENT	2301:3	2301:29	9	return ( t2p -> tiff_datasize ) ;
KEYWORD	2301:3	2301:3	10	return
LEAF_NODE	2301:3	2301:3	11	return
DESTINATION	2301:9	2301:9	10	( t2p -> tiff_datasize )
EXPR	2301:9	2301:28	11	( t2p -> tiff_datasize )
LEAF_NODE	2301:9	2301:9	12	(
FIELD	2301:10	2301:15	12	t2p -> tiff_datasize
LEAF_NODE	2301:10	2301:10	13	t2p
LEAF_NODE	2301:13	2301:13	13	->
LEAF_NODE	2301:15	2301:15	13	tiff_datasize
LEAF_NODE	2301:28	2301:28	12	)
LEAF_NODE	2301:29	2301:29	10	;
LEAF_NODE	2302:2	2302:2	8	}
SELECTION	2305:2	2305:49	6	
KEYWORD	2305:2	2305:2	7	if
LEAF_NODE	2305:2	2305:2	8	if
LEAF_NODE	2305:4	2305:4	7	(
CONDITION	2305:5	2305:5	7	t2p -> tiff_compression == COMPRESSION_OJPEG
EXPR	2305:5	2305:30	8	t2p -> tiff_compression == COMPRESSION_OJPEG
FIELD	2305:5	2305:10	9	t2p -> tiff_compression
LEAF_NODE	2305:5	2305:5	10	t2p
LEAF_NODE	2305:8	2305:8	10	->
LEAF_NODE	2305:10	2305:10	10	tiff_compression
EQ_OPERATOR	2305:27	2305:27	9	==
LEAF_NODE	2305:27	2305:27	10	==
FIELD	2305:30	2305:30	9	COMPRESSION_OJPEG
LEAF_NODE	2305:30	2305:30	10	COMPRESSION_OJPEG
LEAF_NODE	2305:47	2305:47	7	)
STATEMENTS	2305:49	2428:2	7	
LEAF_NODE	2305:49	2305:49	8	{
STATEMENTS	2307:3	2376:5	8	
SELECTION	2307:3	2307:33	9	
KEYWORD	2307:3	2307:3	10	if
LEAF_NODE	2307:3	2307:3	11	if
LEAF_NODE	2307:5	2307:5	10	(
CONDITION	2307:6	2307:6	10	t2p -> tiff_dataoffset != 0
EXPR	2307:6	2307:30	11	t2p -> tiff_dataoffset != 0
FIELD	2307:6	2307:11	12	t2p -> tiff_dataoffset
LEAF_NODE	2307:6	2307:6	13	t2p
LEAF_NODE	2307:9	2307:9	13	->
LEAF_NODE	2307:11	2307:11	13	tiff_dataoffset
EQ_OPERATOR	2307:27	2307:27	12	!=
LEAF_NODE	2307:27	2307:27	13	!=
FIELD	2307:30	2307:30	12	0
LEAF_NODE	2307:30	2307:30	13	0
LEAF_NODE	2307:31	2307:31	10	)
STATEMENTS	2307:33	2376:3	10	
LEAF_NODE	2307:33	2307:33	11	{
STATEMENTS	2308:4	2333:6	11	
EXPR_STATEMENT	2308:4	2309:36	12	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2308:4	2308:4	13	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2308:4	2308:13	14	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2308:4	2308:4	15	buffer
FIELD	2308:4	2308:4	16	buffer
LEAF_NODE	2308:4	2308:4	17	buffer
ASSIGN_OP	2308:11	2308:11	15	=
LEAF_NODE	2308:11	2308:11	16	=
RVAL	2308:13	2309:5	15	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2308:13	2308:13	16	(
TYPE_NAME	2308:14	2308:23	16	unsigned char
LEAF_NODE	2308:14	2308:14	17	unsigned
LEAF_NODE	2308:23	2308:23	17	char
LEAF_NODE	2308:27	2308:27	16	*
LEAF_NODE	2308:28	2308:28	16	)
FUNCTION_CALL	2309:5	2309:35	16	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2309:5	2309:5	17	_TIFFmalloc
LEAF_NODE	2309:5	2309:5	18	_TIFFmalloc
LEAF_NODE	2309:16	2309:16	17	(
ARGUMENT	2309:17	2309:17	17	t2p -> tiff_datasize
FIELD	2309:17	2309:22	18	t2p -> tiff_datasize
LEAF_NODE	2309:17	2309:17	19	t2p
LEAF_NODE	2309:20	2309:20	19	->
LEAF_NODE	2309:22	2309:22	19	tiff_datasize
LEAF_NODE	2309:35	2309:35	17	)
LEAF_NODE	2309:36	2309:36	13	;
SELECTION	2310:4	2310:23	12	
KEYWORD	2310:4	2310:4	13	if
LEAF_NODE	2310:4	2310:4	14	if
LEAF_NODE	2310:6	2310:6	13	(
CONDITION	2310:7	2310:7	13	buffer == NULL
EXPR	2310:7	2310:17	14	buffer == NULL
FIELD	2310:7	2310:7	15	buffer
LEAF_NODE	2310:7	2310:7	16	buffer
EQ_OPERATOR	2310:14	2310:14	15	==
LEAF_NODE	2310:14	2310:14	16	==
FIELD	2310:17	2310:17	15	NULL
LEAF_NODE	2310:17	2310:17	16	NULL
LEAF_NODE	2310:21	2310:21	13	)
STATEMENTS	2310:23	2317:4	13	
LEAF_NODE	2310:23	2310:23	14	{
STATEMENTS	2311:5	2316:5	14	
EXPR_STATEMENT	2311:5	2314:26	15	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) ) ;
EXPR	2311:5	2311:5	16	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
FUNCTION_CALL	2311:5	2314:25	17	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
CALLEE	2311:5	2311:5	18	TIFFError
LEAF_NODE	2311:5	2311:5	19	TIFFError
LEAF_NODE	2311:14	2311:14	18	(
ARGUMENT	2311:15	2311:15	18	TIFF2PDF_MODULE
FIELD	2311:15	2311:15	19	TIFF2PDF_MODULE
LEAF_NODE	2311:15	2311:15	20	TIFF2PDF_MODULE
LEAF_NODE	2311:30	2311:30	18	,
ARGUMENT	2312:1	2312:1	18	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2312:1	2312:1	19	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2312:1	2312:1	20	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2312:69	2312:69	18	,
ARGUMENT	2313:6	2313:22	18	( unsigned long ) t2p -> tiff_datasize
LEAF_NODE	2313:6	2313:6	19	(
TYPE_NAME	2313:7	2313:16	19	unsigned long
LEAF_NODE	2313:7	2313:7	20	unsigned
LEAF_NODE	2313:16	2313:16	20	long
LEAF_NODE	2313:20	2313:20	19	)
FIELD	2313:22	2313:27	19	t2p -> tiff_datasize
LEAF_NODE	2313:22	2313:22	20	t2p
LEAF_NODE	2313:25	2313:25	20	->
LEAF_NODE	2313:27	2313:27	20	tiff_datasize
LEAF_NODE	2313:40	2313:40	18	,
ARGUMENT	2314:6	2314:6	18	TIFFFileName ( input )
FUNCTION_CALL	2314:6	2314:24	19	TIFFFileName ( input )
CALLEE	2314:6	2314:6	20	TIFFFileName
LEAF_NODE	2314:6	2314:6	21	TIFFFileName
LEAF_NODE	2314:18	2314:18	20	(
ARGUMENT	2314:19	2314:19	20	input
FIELD	2314:19	2314:19	21	input
LEAF_NODE	2314:19	2314:19	22	input
LEAF_NODE	2314:24	2314:24	20	)
LEAF_NODE	2314:25	2314:25	18	)
LEAF_NODE	2314:26	2314:26	16	;
EXPR_STATEMENT	2315:5	2315:35	15	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2315:5	2315:5	16	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2315:5	2315:22	17	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2315:5	2315:5	18	t2p -> t2p_error
FIELD	2315:5	2315:10	19	t2p -> t2p_error
LEAF_NODE	2315:5	2315:5	20	t2p
LEAF_NODE	2315:8	2315:8	20	->
LEAF_NODE	2315:10	2315:10	20	t2p_error
ASSIGN_OP	2315:20	2315:20	18	=
LEAF_NODE	2315:20	2315:20	19	=
RVAL	2315:22	2315:22	18	T2P_ERR_ERROR
FIELD	2315:22	2315:22	19	T2P_ERR_ERROR
LEAF_NODE	2315:22	2315:22	20	T2P_ERR_ERROR
LEAF_NODE	2315:35	2315:35	16	;
JUMP_STATEMENT	2316:5	2316:14	15	return ( 0 ) ;
KEYWORD	2316:5	2316:5	16	return
LEAF_NODE	2316:5	2316:5	17	return
DESTINATION	2316:11	2316:11	16	( 0 )
EXPR	2316:11	2316:13	17	( 0 )
LEAF_NODE	2316:11	2316:11	18	(
FIELD	2316:12	2316:12	18	0
LEAF_NODE	2316:12	2316:12	19	0
LEAF_NODE	2316:13	2316:13	18	)
LEAF_NODE	2316:14	2316:14	16	;
LEAF_NODE	2317:4	2317:4	14	}
EXPR_STATEMENT	2318:32	2318:69	12	memset ( buffer , 0 , t2p -> tiff_datasize ) ;
EXPR	2318:32	2318:32	13	memset ( buffer , 0 , t2p -> tiff_datasize )
FUNCTION_CALL	2318:32	2318:68	14	memset ( buffer , 0 , t2p -> tiff_datasize )
CALLEE	2318:32	2318:32	15	memset
LEAF_NODE	2318:32	2318:32	16	memset
LEAF_NODE	2318:38	2318:38	15	(
ARGUMENT	2318:39	2318:39	15	buffer
FIELD	2318:39	2318:39	16	buffer
LEAF_NODE	2318:39	2318:39	17	buffer
LEAF_NODE	2318:45	2318:45	15	,
ARGUMENT	2318:47	2318:47	15	0
FIELD	2318:47	2318:47	16	0
LEAF_NODE	2318:47	2318:47	17	0
LEAF_NODE	2318:48	2318:48	15	,
ARGUMENT	2318:50	2318:50	15	t2p -> tiff_datasize
FIELD	2318:50	2318:55	16	t2p -> tiff_datasize
LEAF_NODE	2318:50	2318:50	17	t2p
LEAF_NODE	2318:53	2318:53	17	->
LEAF_NODE	2318:55	2318:55	17	tiff_datasize
LEAF_NODE	2318:68	2318:68	15	)
LEAF_NODE	2318:69	2318:69	13	;
SELECTION	2319:4	2319:33	12	
KEYWORD	2319:4	2319:4	13	if
LEAF_NODE	2319:4	2319:4	14	if
LEAF_NODE	2319:6	2319:6	13	(
CONDITION	2319:7	2319:7	13	t2p -> pdf_ojpegiflength == 0
EXPR	2319:7	2319:31	14	t2p -> pdf_ojpegiflength == 0
FIELD	2319:7	2319:12	15	t2p -> pdf_ojpegiflength
LEAF_NODE	2319:7	2319:7	16	t2p
LEAF_NODE	2319:10	2319:10	16	->
LEAF_NODE	2319:12	2319:12	16	pdf_ojpegiflength
EQ_OPERATOR	2319:29	2319:29	15	==
LEAF_NODE	2319:29	2319:29	16	==
FIELD	2319:31	2319:31	15	0
LEAF_NODE	2319:31	2319:31	16	0
LEAF_NODE	2319:32	2319:32	13	)
STATEMENTS	2319:33	2333:4	13	
LEAF_NODE	2319:33	2319:33	14	{
STATEMENTS	2320:5	2332:5	14	
EXPR_STATEMENT	2320:5	2321:18	15	inputoffset = t2pSeekFile ( input , 0 , SEEK_CUR ) ;
EXPR	2320:5	2320:5	16	inputoffset = t2pSeekFile ( input , 0 , SEEK_CUR )
ASSIGN	2320:5	2320:17	17	inputoffset = t2pSeekFile ( input , 0 , SEEK_CUR )
LVAL	2320:5	2320:5	18	inputoffset
FIELD	2320:5	2320:5	19	inputoffset
LEAF_NODE	2320:5	2320:5	20	inputoffset
ASSIGN_OP	2320:16	2320:16	18	=
LEAF_NODE	2320:16	2320:16	19	=
RVAL	2320:17	2320:17	18	t2pSeekFile ( input , 0 , SEEK_CUR )
FUNCTION_CALL	2320:17	2321:17	19	t2pSeekFile ( input , 0 , SEEK_CUR )
CALLEE	2320:17	2320:17	20	t2pSeekFile
LEAF_NODE	2320:17	2320:17	21	t2pSeekFile
LEAF_NODE	2320:28	2320:28	20	(
ARGUMENT	2320:29	2320:29	20	input
FIELD	2320:29	2320:29	21	input
LEAF_NODE	2320:29	2320:29	22	input
LEAF_NODE	2320:34	2320:34	20	,
ARGUMENT	2320:36	2320:36	20	0
FIELD	2320:36	2320:36	21	0
LEAF_NODE	2320:36	2320:36	22	0
LEAF_NODE	2320:37	2320:37	20	,
ARGUMENT	2321:9	2321:9	20	SEEK_CUR
FIELD	2321:9	2321:9	21	SEEK_CUR
LEAF_NODE	2321:9	2321:9	22	SEEK_CUR
LEAF_NODE	2321:17	2321:17	20	)
LEAF_NODE	2321:18	2321:18	16	;
EXPR_STATEMENT	2322:5	2324:20	15	t2pSeekFile ( input , t2p -> tiff_dataoffset , SEEK_SET ) ;
EXPR	2322:5	2322:5	16	t2pSeekFile ( input , t2p -> tiff_dataoffset , SEEK_SET )
FUNCTION_CALL	2322:5	2324:19	17	t2pSeekFile ( input , t2p -> tiff_dataoffset , SEEK_SET )
CALLEE	2322:5	2322:5	18	t2pSeekFile
LEAF_NODE	2322:5	2322:5	19	t2pSeekFile
LEAF_NODE	2322:16	2322:16	18	(
ARGUMENT	2322:17	2322:17	18	input
FIELD	2322:17	2322:17	19	input
LEAF_NODE	2322:17	2322:17	20	input
LEAF_NODE	2322:22	2322:22	18	,
ARGUMENT	2323:11	2323:11	18	t2p -> tiff_dataoffset
FIELD	2323:11	2323:16	19	t2p -> tiff_dataoffset
LEAF_NODE	2323:11	2323:11	20	t2p
LEAF_NODE	2323:14	2323:14	20	->
LEAF_NODE	2323:16	2323:16	20	tiff_dataoffset
LEAF_NODE	2323:31	2323:31	18	,
ARGUMENT	2324:11	2324:11	18	SEEK_SET
FIELD	2324:11	2324:11	19	SEEK_SET
LEAF_NODE	2324:11	2324:11	20	SEEK_SET
LEAF_NODE	2324:19	2324:19	18	)
LEAF_NODE	2324:20	2324:20	16	;
EXPR_STATEMENT	2325:5	2326:30	15	t2pReadFile ( input , ( tdata_t ) buffer , t2p -> tiff_datasize ) ;
EXPR	2325:5	2325:5	16	t2pReadFile ( input , ( tdata_t ) buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2325:5	2326:29	17	t2pReadFile ( input , ( tdata_t ) buffer , t2p -> tiff_datasize )
CALLEE	2325:5	2325:5	18	t2pReadFile
LEAF_NODE	2325:5	2325:5	19	t2pReadFile
LEAF_NODE	2325:16	2325:16	18	(
ARGUMENT	2325:17	2325:17	18	input
FIELD	2325:17	2325:17	19	input
LEAF_NODE	2325:17	2325:17	20	input
LEAF_NODE	2325:22	2325:22	18	,
ARGUMENT	2325:24	2325:34	18	( tdata_t ) buffer
LEAF_NODE	2325:24	2325:24	19	(
TYPE_NAME	2325:25	2325:25	19	tdata_t
LEAF_NODE	2325:25	2325:25	20	tdata_t
LEAF_NODE	2325:32	2325:32	19	)
FIELD	2325:34	2325:34	19	buffer
LEAF_NODE	2325:34	2325:34	20	buffer
LEAF_NODE	2325:40	2325:40	18	,
ARGUMENT	2326:11	2326:11	18	t2p -> tiff_datasize
FIELD	2326:11	2326:16	19	t2p -> tiff_datasize
LEAF_NODE	2326:11	2326:11	20	t2p
LEAF_NODE	2326:14	2326:14	20	->
LEAF_NODE	2326:16	2326:16	20	tiff_datasize
LEAF_NODE	2326:29	2326:29	18	)
LEAF_NODE	2326:30	2326:30	16	;
EXPR_STATEMENT	2327:5	2328:20	15	t2pSeekFile ( input , inputoffset , SEEK_SET ) ;
EXPR	2327:5	2327:5	16	t2pSeekFile ( input , inputoffset , SEEK_SET )
FUNCTION_CALL	2327:5	2328:19	17	t2pSeekFile ( input , inputoffset , SEEK_SET )
CALLEE	2327:5	2327:5	18	t2pSeekFile
LEAF_NODE	2327:5	2327:5	19	t2pSeekFile
LEAF_NODE	2327:16	2327:16	18	(
ARGUMENT	2327:17	2327:17	18	input
FIELD	2327:17	2327:17	19	input
LEAF_NODE	2327:17	2327:17	20	input
LEAF_NODE	2327:22	2327:22	18	,
ARGUMENT	2327:24	2327:24	18	inputoffset
FIELD	2327:24	2327:24	19	inputoffset
LEAF_NODE	2327:24	2327:24	20	inputoffset
LEAF_NODE	2327:35	2327:35	18	,
ARGUMENT	2328:11	2328:11	18	SEEK_SET
FIELD	2328:11	2328:11	19	SEEK_SET
LEAF_NODE	2328:11	2328:11	20	SEEK_SET
LEAF_NODE	2328:19	2328:19	18	)
LEAF_NODE	2328:20	2328:20	16	;
EXPR_STATEMENT	2329:5	2330:31	15	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize ) ;
EXPR	2329:5	2329:5	16	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2329:5	2330:30	17	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize )
CALLEE	2329:5	2329:5	18	t2pWriteFile
LEAF_NODE	2329:5	2329:5	19	t2pWriteFile
LEAF_NODE	2329:17	2329:17	18	(
ARGUMENT	2329:18	2329:18	18	output
FIELD	2329:18	2329:18	19	output
LEAF_NODE	2329:18	2329:18	20	output
LEAF_NODE	2329:24	2329:24	18	,
ARGUMENT	2329:26	2329:36	18	( tdata_t ) buffer
LEAF_NODE	2329:26	2329:26	19	(
TYPE_NAME	2329:27	2329:27	19	tdata_t
LEAF_NODE	2329:27	2329:27	20	tdata_t
LEAF_NODE	2329:34	2329:34	19	)
FIELD	2329:36	2329:36	19	buffer
LEAF_NODE	2329:36	2329:36	20	buffer
LEAF_NODE	2329:42	2329:42	18	,
ARGUMENT	2330:12	2330:12	18	t2p -> tiff_datasize
FIELD	2330:12	2330:17	19	t2p -> tiff_datasize
LEAF_NODE	2330:12	2330:12	20	t2p
LEAF_NODE	2330:15	2330:15	20	->
LEAF_NODE	2330:17	2330:17	20	tiff_datasize
LEAF_NODE	2330:30	2330:30	18	)
LEAF_NODE	2330:31	2330:31	16	;
EXPR_STATEMENT	2331:5	2331:22	15	_TIFFfree ( buffer ) ;
EXPR	2331:5	2331:5	16	_TIFFfree ( buffer )
FUNCTION_CALL	2331:5	2331:21	17	_TIFFfree ( buffer )
CALLEE	2331:5	2331:5	18	_TIFFfree
LEAF_NODE	2331:5	2331:5	19	_TIFFfree
LEAF_NODE	2331:14	2331:14	18	(
ARGUMENT	2331:15	2331:15	18	buffer
FIELD	2331:15	2331:15	19	buffer
LEAF_NODE	2331:15	2331:15	20	buffer
LEAF_NODE	2331:21	2331:21	18	)
LEAF_NODE	2331:22	2331:22	16	;
JUMP_STATEMENT	2332:5	2332:31	15	return ( t2p -> tiff_datasize ) ;
KEYWORD	2332:5	2332:5	16	return
LEAF_NODE	2332:5	2332:5	17	return
DESTINATION	2332:11	2332:11	16	( t2p -> tiff_datasize )
EXPR	2332:11	2332:30	17	( t2p -> tiff_datasize )
LEAF_NODE	2332:11	2332:11	18	(
FIELD	2332:12	2332:17	18	t2p -> tiff_datasize
LEAF_NODE	2332:12	2332:12	19	t2p
LEAF_NODE	2332:15	2332:15	19	->
LEAF_NODE	2332:17	2332:17	19	tiff_datasize
LEAF_NODE	2332:30	2332:30	18	)
LEAF_NODE	2332:31	2332:31	16	;
LEAF_NODE	2333:4	2333:4	14	}
SELECTION	2333:6	2333:11	12	
KEYWORD	2333:6	2333:6	13	else
LEAF_NODE	2333:6	2333:6	14	else
STATEMENTS	2333:11	2375:4	13	
LEAF_NODE	2333:11	2333:11	14	{
STATEMENTS	2334:5	2374:25	14	
EXPR_STATEMENT	2334:5	2335:18	15	inputoffset = t2pSeekFile ( input , 0 , SEEK_CUR ) ;
EXPR	2334:5	2334:5	16	inputoffset = t2pSeekFile ( input , 0 , SEEK_CUR )
ASSIGN	2334:5	2334:17	17	inputoffset = t2pSeekFile ( input , 0 , SEEK_CUR )
LVAL	2334:5	2334:5	18	inputoffset
FIELD	2334:5	2334:5	19	inputoffset
LEAF_NODE	2334:5	2334:5	20	inputoffset
ASSIGN_OP	2334:16	2334:16	18	=
LEAF_NODE	2334:16	2334:16	19	=
RVAL	2334:17	2334:17	18	t2pSeekFile ( input , 0 , SEEK_CUR )
FUNCTION_CALL	2334:17	2335:17	19	t2pSeekFile ( input , 0 , SEEK_CUR )
CALLEE	2334:17	2334:17	20	t2pSeekFile
LEAF_NODE	2334:17	2334:17	21	t2pSeekFile
LEAF_NODE	2334:28	2334:28	20	(
ARGUMENT	2334:29	2334:29	20	input
FIELD	2334:29	2334:29	21	input
LEAF_NODE	2334:29	2334:29	22	input
LEAF_NODE	2334:34	2334:34	20	,
ARGUMENT	2334:36	2334:36	20	0
FIELD	2334:36	2334:36	21	0
LEAF_NODE	2334:36	2334:36	22	0
LEAF_NODE	2334:37	2334:37	20	,
ARGUMENT	2335:9	2335:9	20	SEEK_CUR
FIELD	2335:9	2335:9	21	SEEK_CUR
LEAF_NODE	2335:9	2335:9	22	SEEK_CUR
LEAF_NODE	2335:17	2335:17	20	)
LEAF_NODE	2335:18	2335:18	16	;
EXPR_STATEMENT	2336:5	2338:20	15	t2pSeekFile ( input , t2p -> tiff_dataoffset , SEEK_SET ) ;
EXPR	2336:5	2336:5	16	t2pSeekFile ( input , t2p -> tiff_dataoffset , SEEK_SET )
FUNCTION_CALL	2336:5	2338:19	17	t2pSeekFile ( input , t2p -> tiff_dataoffset , SEEK_SET )
CALLEE	2336:5	2336:5	18	t2pSeekFile
LEAF_NODE	2336:5	2336:5	19	t2pSeekFile
LEAF_NODE	2336:16	2336:16	18	(
ARGUMENT	2336:17	2336:17	18	input
FIELD	2336:17	2336:17	19	input
LEAF_NODE	2336:17	2336:17	20	input
LEAF_NODE	2336:22	2336:22	18	,
ARGUMENT	2337:11	2337:11	18	t2p -> tiff_dataoffset
FIELD	2337:11	2337:16	19	t2p -> tiff_dataoffset
LEAF_NODE	2337:11	2337:11	20	t2p
LEAF_NODE	2337:14	2337:14	20	->
LEAF_NODE	2337:16	2337:16	20	tiff_dataoffset
LEAF_NODE	2337:31	2337:31	18	,
ARGUMENT	2338:11	2338:11	18	SEEK_SET
FIELD	2338:11	2338:11	19	SEEK_SET
LEAF_NODE	2338:11	2338:11	20	SEEK_SET
LEAF_NODE	2338:19	2338:19	18	)
LEAF_NODE	2338:20	2338:20	16	;
EXPR_STATEMENT	2339:5	2341:29	15	bufferoffset = t2pReadFile ( input , ( tdata_t ) buffer , t2p -> pdf_ojpegiflength ) ;
EXPR	2339:5	2339:5	16	bufferoffset = t2pReadFile ( input , ( tdata_t ) buffer , t2p -> pdf_ojpegiflength )
ASSIGN	2339:5	2339:20	17	bufferoffset = t2pReadFile ( input , ( tdata_t ) buffer , t2p -> pdf_ojpegiflength )
LVAL	2339:5	2339:5	18	bufferoffset
FIELD	2339:5	2339:5	19	bufferoffset
LEAF_NODE	2339:5	2339:5	20	bufferoffset
ASSIGN_OP	2339:18	2339:18	18	=
LEAF_NODE	2339:18	2339:18	19	=
RVAL	2339:20	2339:20	18	t2pReadFile ( input , ( tdata_t ) buffer , t2p -> pdf_ojpegiflength )
FUNCTION_CALL	2339:20	2341:28	19	t2pReadFile ( input , ( tdata_t ) buffer , t2p -> pdf_ojpegiflength )
CALLEE	2339:20	2339:20	20	t2pReadFile
LEAF_NODE	2339:20	2339:20	21	t2pReadFile
LEAF_NODE	2339:31	2339:31	20	(
ARGUMENT	2339:32	2339:32	20	input
FIELD	2339:32	2339:32	21	input
LEAF_NODE	2339:32	2339:32	22	input
LEAF_NODE	2339:37	2339:37	20	,
ARGUMENT	2340:6	2340:16	20	( tdata_t ) buffer
LEAF_NODE	2340:6	2340:6	21	(
TYPE_NAME	2340:7	2340:7	21	tdata_t
LEAF_NODE	2340:7	2340:7	22	tdata_t
LEAF_NODE	2340:14	2340:14	21	)
FIELD	2340:16	2340:16	21	buffer
LEAF_NODE	2340:16	2340:16	22	buffer
LEAF_NODE	2340:22	2340:22	20	,
ARGUMENT	2341:6	2341:6	20	t2p -> pdf_ojpegiflength
FIELD	2341:6	2341:11	21	t2p -> pdf_ojpegiflength
LEAF_NODE	2341:6	2341:6	22	t2p
LEAF_NODE	2341:9	2341:9	22	->
LEAF_NODE	2341:11	2341:11	22	pdf_ojpegiflength
LEAF_NODE	2341:28	2341:28	20	)
LEAF_NODE	2341:29	2341:29	16	;
EXPR_STATEMENT	2342:5	2342:31	15	t2p -> pdf_ojpegiflength = 0 ;
EXPR	2342:5	2342:5	16	t2p -> pdf_ojpegiflength = 0
ASSIGN	2342:5	2342:30	17	t2p -> pdf_ojpegiflength = 0
LVAL	2342:5	2342:5	18	t2p -> pdf_ojpegiflength
FIELD	2342:5	2342:10	19	t2p -> pdf_ojpegiflength
LEAF_NODE	2342:5	2342:5	20	t2p
LEAF_NODE	2342:8	2342:8	20	->
LEAF_NODE	2342:10	2342:10	20	pdf_ojpegiflength
ASSIGN_OP	2342:28	2342:28	18	=
LEAF_NODE	2342:28	2342:28	19	=
RVAL	2342:30	2342:30	18	0
FIELD	2342:30	2342:30	19	0
LEAF_NODE	2342:30	2342:30	20	0
LEAF_NODE	2342:31	2342:31	16	;
EXPR_STATEMENT	2343:5	2344:20	15	t2pSeekFile ( input , inputoffset , SEEK_SET ) ;
EXPR	2343:5	2343:5	16	t2pSeekFile ( input , inputoffset , SEEK_SET )
FUNCTION_CALL	2343:5	2344:19	17	t2pSeekFile ( input , inputoffset , SEEK_SET )
CALLEE	2343:5	2343:5	18	t2pSeekFile
LEAF_NODE	2343:5	2343:5	19	t2pSeekFile
LEAF_NODE	2343:16	2343:16	18	(
ARGUMENT	2343:17	2343:17	18	input
FIELD	2343:17	2343:17	19	input
LEAF_NODE	2343:17	2343:17	20	input
LEAF_NODE	2343:22	2343:22	18	,
ARGUMENT	2343:24	2343:24	18	inputoffset
FIELD	2343:24	2343:24	19	inputoffset
LEAF_NODE	2343:24	2343:24	20	inputoffset
LEAF_NODE	2343:35	2343:35	18	,
ARGUMENT	2344:11	2344:11	18	SEEK_SET
FIELD	2344:11	2344:11	19	SEEK_SET
LEAF_NODE	2344:11	2344:11	20	SEEK_SET
LEAF_NODE	2344:19	2344:19	18	)
LEAF_NODE	2344:20	2344:20	16	;
EXPR_STATEMENT	2345:5	2347:28	15	TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & h_samp , & v_samp ) ;
EXPR	2345:5	2345:5	16	TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & h_samp , & v_samp )
FUNCTION_CALL	2345:5	2347:27	17	TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & h_samp , & v_samp )
CALLEE	2345:5	2345:5	18	TIFFGetField
LEAF_NODE	2345:5	2345:5	19	TIFFGetField
LEAF_NODE	2345:17	2345:17	18	(
ARGUMENT	2345:18	2345:18	18	input
FIELD	2345:18	2345:18	19	input
LEAF_NODE	2345:18	2345:18	20	input
LEAF_NODE	2345:23	2345:23	18	,
ARGUMENT	2346:11	2346:11	18	TIFFTAG_YCBCRSUBSAMPLING
FIELD	2346:11	2346:11	19	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2346:11	2346:11	20	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2346:35	2346:35	18	,
ARGUMENT	2347:11	2347:11	18	& h_samp
UNARY_EXPR	2347:11	2347:12	19	& h_samp
UNARY_OPERATOR	2347:11	2347:11	20	&
LEAF_NODE	2347:11	2347:11	21	&
FIELD	2347:12	2347:12	20	h_samp
LEAF_NODE	2347:12	2347:12	21	h_samp
LEAF_NODE	2347:18	2347:18	18	,
ARGUMENT	2347:20	2347:20	18	& v_samp
UNARY_EXPR	2347:20	2347:21	19	& v_samp
UNARY_OPERATOR	2347:20	2347:20	20	&
LEAF_NODE	2347:20	2347:20	21	&
FIELD	2347:21	2347:21	20	v_samp
LEAF_NODE	2347:21	2347:21	21	v_samp
LEAF_NODE	2347:27	2347:27	18	)
LEAF_NODE	2347:28	2347:28	16	;
EXPR_STATEMENT	2348:5	2348:33	15	buffer [ bufferoffset ++ ] = 0xff ;
EXPR	2348:5	2348:5	16	buffer [ bufferoffset ++ ] = 0xff
ASSIGN	2348:5	2348:29	17	buffer [ bufferoffset ++ ] = 0xff
LVAL	2348:5	2348:5	18	buffer [ bufferoffset ++ ]
FIELD	2348:5	2348:26	19	buffer [ bufferoffset ++ ]
LEAF_NODE	2348:5	2348:5	20	buffer
LEAF_NODE	2348:11	2348:11	20	[
EXPR	2348:12	2348:12	20	bufferoffset ++
FIELD	2348:12	2348:24	21	bufferoffset ++
LEAF_NODE	2348:12	2348:12	22	bufferoffset
LEAF_NODE	2348:24	2348:24	22	++
LEAF_NODE	2348:26	2348:26	20	]
ASSIGN_OP	2348:27	2348:27	18	=
LEAF_NODE	2348:27	2348:27	19	=
RVAL	2348:29	2348:29	18	0xff
FIELD	2348:29	2348:29	19	0xff
LEAF_NODE	2348:29	2348:29	20	0xff
LEAF_NODE	2348:33	2348:33	16	;
EXPR_STATEMENT	2349:5	2349:33	15	buffer [ bufferoffset ++ ] = 0xdd ;
EXPR	2349:5	2349:5	16	buffer [ bufferoffset ++ ] = 0xdd
ASSIGN	2349:5	2349:29	17	buffer [ bufferoffset ++ ] = 0xdd
LVAL	2349:5	2349:5	18	buffer [ bufferoffset ++ ]
FIELD	2349:5	2349:26	19	buffer [ bufferoffset ++ ]
LEAF_NODE	2349:5	2349:5	20	buffer
LEAF_NODE	2349:11	2349:11	20	[
EXPR	2349:12	2349:12	20	bufferoffset ++
FIELD	2349:12	2349:24	21	bufferoffset ++
LEAF_NODE	2349:12	2349:12	22	bufferoffset
LEAF_NODE	2349:24	2349:24	22	++
LEAF_NODE	2349:26	2349:26	20	]
ASSIGN_OP	2349:27	2349:27	18	=
LEAF_NODE	2349:27	2349:27	19	=
RVAL	2349:29	2349:29	18	0xdd
FIELD	2349:29	2349:29	19	0xdd
LEAF_NODE	2349:29	2349:29	20	0xdd
LEAF_NODE	2349:33	2349:33	16	;
EXPR_STATEMENT	2350:5	2350:33	15	buffer [ bufferoffset ++ ] = 0x00 ;
EXPR	2350:5	2350:5	16	buffer [ bufferoffset ++ ] = 0x00
ASSIGN	2350:5	2350:29	17	buffer [ bufferoffset ++ ] = 0x00
LVAL	2350:5	2350:5	18	buffer [ bufferoffset ++ ]
FIELD	2350:5	2350:26	19	buffer [ bufferoffset ++ ]
LEAF_NODE	2350:5	2350:5	20	buffer
LEAF_NODE	2350:11	2350:11	20	[
EXPR	2350:12	2350:12	20	bufferoffset ++
FIELD	2350:12	2350:24	21	bufferoffset ++
LEAF_NODE	2350:12	2350:12	22	bufferoffset
LEAF_NODE	2350:24	2350:24	22	++
LEAF_NODE	2350:26	2350:26	20	]
ASSIGN_OP	2350:27	2350:27	18	=
LEAF_NODE	2350:27	2350:27	19	=
RVAL	2350:29	2350:29	18	0x00
FIELD	2350:29	2350:29	19	0x00
LEAF_NODE	2350:29	2350:29	20	0x00
LEAF_NODE	2350:33	2350:33	16	;
EXPR_STATEMENT	2351:5	2351:33	15	buffer [ bufferoffset ++ ] = 0x04 ;
EXPR	2351:5	2351:5	16	buffer [ bufferoffset ++ ] = 0x04
ASSIGN	2351:5	2351:29	17	buffer [ bufferoffset ++ ] = 0x04
LVAL	2351:5	2351:5	18	buffer [ bufferoffset ++ ]
FIELD	2351:5	2351:26	19	buffer [ bufferoffset ++ ]
LEAF_NODE	2351:5	2351:5	20	buffer
LEAF_NODE	2351:11	2351:11	20	[
EXPR	2351:12	2351:12	20	bufferoffset ++
FIELD	2351:12	2351:24	21	bufferoffset ++
LEAF_NODE	2351:12	2351:12	22	bufferoffset
LEAF_NODE	2351:24	2351:24	22	++
LEAF_NODE	2351:26	2351:26	20	]
ASSIGN_OP	2351:27	2351:27	18	=
LEAF_NODE	2351:27	2351:27	19	=
RVAL	2351:29	2351:29	18	0x04
FIELD	2351:29	2351:29	19	0x04
LEAF_NODE	2351:29	2351:29	20	0x04
LEAF_NODE	2351:33	2351:33	16	;
EXPR_STATEMENT	2352:5	2352:14	15	h_samp *= 8 ;
EXPR	2352:5	2352:5	16	h_samp *= 8
ASSIGN	2352:5	2352:13	17	h_samp *= 8
LVAL	2352:5	2352:5	18	h_samp
FIELD	2352:5	2352:5	19	h_samp
LEAF_NODE	2352:5	2352:5	20	h_samp
ASSIGN_OP	2352:11	2352:11	18	*=
LEAF_NODE	2352:11	2352:11	19	*=
RVAL	2352:13	2352:13	18	8
FIELD	2352:13	2352:13	19	8
LEAF_NODE	2352:13	2352:13	20	8
LEAF_NODE	2352:14	2352:14	16	;
EXPR_STATEMENT	2353:5	2353:14	15	v_samp *= 8 ;
EXPR	2353:5	2353:5	16	v_samp *= 8
ASSIGN	2353:5	2353:13	17	v_samp *= 8
LVAL	2353:5	2353:5	18	v_samp
FIELD	2353:5	2353:5	19	v_samp
LEAF_NODE	2353:5	2353:5	20	v_samp
ASSIGN_OP	2353:11	2353:11	18	*=
LEAF_NODE	2353:11	2353:11	19	*=
RVAL	2353:13	2353:13	18	8
FIELD	2353:13	2353:13	19	8
LEAF_NODE	2353:13	2353:13	20	8
LEAF_NODE	2353:14	2353:14	16	;
EXPR_STATEMENT	2354:5	2354:43	15	ri = ( t2p -> tiff_width + h_samp - 1 ) / h_samp ;
EXPR	2354:5	2354:5	16	ri = ( t2p -> tiff_width + h_samp - 1 ) / h_samp
ASSIGN	2354:5	2354:8	17	ri = ( t2p -> tiff_width + h_samp - 1 ) / h_samp
LVAL	2354:5	2354:5	18	ri
FIELD	2354:5	2354:5	19	ri
LEAF_NODE	2354:5	2354:5	20	ri
ASSIGN_OP	2354:7	2354:7	18	=
LEAF_NODE	2354:7	2354:7	19	=
RVAL	2354:8	2354:37	18	( t2p -> tiff_width + h_samp - 1 ) / h_samp
LEAF_NODE	2354:8	2354:8	19	(
FIELD	2354:9	2354:14	19	t2p -> tiff_width
LEAF_NODE	2354:9	2354:9	20	t2p
LEAF_NODE	2354:12	2354:12	20	->
LEAF_NODE	2354:14	2354:14	20	tiff_width
LEAF_NODE	2354:24	2354:24	19	+
FIELD	2354:25	2354:25	19	h_samp
LEAF_NODE	2354:25	2354:25	20	h_samp
LEAF_NODE	2354:31	2354:31	19	-
FIELD	2354:32	2354:32	19	1
LEAF_NODE	2354:32	2354:32	20	1
LEAF_NODE	2354:33	2354:33	19	)
LEAF_NODE	2354:35	2354:35	19	/
FIELD	2354:37	2354:37	19	h_samp
LEAF_NODE	2354:37	2354:37	20	h_samp
LEAF_NODE	2354:43	2354:43	16	;
EXPR_STATEMENT	2355:5	2357:17	15	TIFFGetField ( input , TIFFTAG_ROWSPERSTRIP , & rows ) ;
EXPR	2355:5	2355:5	16	TIFFGetField ( input , TIFFTAG_ROWSPERSTRIP , & rows )
FUNCTION_CALL	2355:5	2357:16	17	TIFFGetField ( input , TIFFTAG_ROWSPERSTRIP , & rows )
CALLEE	2355:5	2355:5	18	TIFFGetField
LEAF_NODE	2355:5	2355:5	19	TIFFGetField
LEAF_NODE	2355:17	2355:17	18	(
ARGUMENT	2355:18	2355:18	18	input
FIELD	2355:18	2355:18	19	input
LEAF_NODE	2355:18	2355:18	20	input
LEAF_NODE	2355:23	2355:23	18	,
ARGUMENT	2356:11	2356:11	18	TIFFTAG_ROWSPERSTRIP
FIELD	2356:11	2356:11	19	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	2356:11	2356:11	20	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	2356:31	2356:31	18	,
ARGUMENT	2357:11	2357:11	18	& rows
UNARY_EXPR	2357:11	2357:12	19	& rows
UNARY_OPERATOR	2357:11	2357:11	20	&
LEAF_NODE	2357:11	2357:11	21	&
FIELD	2357:12	2357:12	20	rows
LEAF_NODE	2357:12	2357:12	21	rows
LEAF_NODE	2357:16	2357:16	18	)
LEAF_NODE	2357:17	2357:17	16	;
EXPR_STATEMENT	2358:5	2358:31	15	ri *= ( rows + v_samp - 1 ) / v_samp ;
EXPR	2358:5	2358:5	16	ri *= ( rows + v_samp - 1 ) / v_samp
ASSIGN	2358:5	2358:9	17	ri *= ( rows + v_samp - 1 ) / v_samp
LVAL	2358:5	2358:5	18	ri
FIELD	2358:5	2358:5	19	ri
LEAF_NODE	2358:5	2358:5	20	ri
ASSIGN_OP	2358:7	2358:7	18	*=
LEAF_NODE	2358:7	2358:7	19	*=
RVAL	2358:9	2358:25	18	( rows + v_samp - 1 ) / v_samp
LEAF_NODE	2358:9	2358:9	19	(
FIELD	2358:10	2358:10	19	rows
LEAF_NODE	2358:10	2358:10	20	rows
LEAF_NODE	2358:14	2358:14	19	+
FIELD	2358:15	2358:15	19	v_samp
LEAF_NODE	2358:15	2358:15	20	v_samp
LEAF_NODE	2358:21	2358:21	19	-
FIELD	2358:22	2358:22	19	1
LEAF_NODE	2358:22	2358:22	20	1
LEAF_NODE	2358:23	2358:23	19	)
LEAF_NODE	2358:24	2358:24	19	/
FIELD	2358:25	2358:25	19	v_samp
LEAF_NODE	2358:25	2358:25	20	v_samp
LEAF_NODE	2358:31	2358:31	16	;
EXPR_STATEMENT	2359:5	2359:43	15	buffer [ bufferoffset ++ ] = ( ri >> 8 ) & 0xff ;
EXPR	2359:5	2359:5	16	buffer [ bufferoffset ++ ] = ( ri >> 8 ) & 0xff
ASSIGN	2359:5	2359:29	17	buffer [ bufferoffset ++ ] = ( ri >> 8 ) & 0xff
LVAL	2359:5	2359:5	18	buffer [ bufferoffset ++ ]
FIELD	2359:5	2359:26	19	buffer [ bufferoffset ++ ]
LEAF_NODE	2359:5	2359:5	20	buffer
LEAF_NODE	2359:11	2359:11	20	[
EXPR	2359:12	2359:12	20	bufferoffset ++
FIELD	2359:12	2359:24	21	bufferoffset ++
LEAF_NODE	2359:12	2359:12	22	bufferoffset
LEAF_NODE	2359:24	2359:24	22	++
LEAF_NODE	2359:26	2359:26	20	]
ASSIGN_OP	2359:27	2359:27	18	=
LEAF_NODE	2359:27	2359:27	19	=
RVAL	2359:29	2359:39	18	( ri >> 8 ) & 0xff
LEAF_NODE	2359:29	2359:29	19	(
FIELD	2359:30	2359:30	19	ri
LEAF_NODE	2359:30	2359:30	20	ri
LEAF_NODE	2359:32	2359:32	19	>>
FIELD	2359:34	2359:34	19	8
LEAF_NODE	2359:34	2359:34	20	8
LEAF_NODE	2359:35	2359:35	19	)
LEAF_NODE	2359:37	2359:37	19	&
FIELD	2359:39	2359:39	19	0xff
LEAF_NODE	2359:39	2359:39	20	0xff
LEAF_NODE	2359:43	2359:43	16	;
EXPR_STATEMENT	2360:5	2360:38	15	buffer [ bufferoffset ++ ] = ri & 0xff ;
EXPR	2360:5	2360:5	16	buffer [ bufferoffset ++ ] = ri & 0xff
ASSIGN	2360:5	2360:29	17	buffer [ bufferoffset ++ ] = ri & 0xff
LVAL	2360:5	2360:5	18	buffer [ bufferoffset ++ ]
FIELD	2360:5	2360:26	19	buffer [ bufferoffset ++ ]
LEAF_NODE	2360:5	2360:5	20	buffer
LEAF_NODE	2360:11	2360:11	20	[
EXPR	2360:12	2360:12	20	bufferoffset ++
FIELD	2360:12	2360:24	21	bufferoffset ++
LEAF_NODE	2360:12	2360:12	22	bufferoffset
LEAF_NODE	2360:24	2360:24	22	++
LEAF_NODE	2360:26	2360:26	20	]
ASSIGN_OP	2360:27	2360:27	18	=
LEAF_NODE	2360:27	2360:27	19	=
RVAL	2360:29	2360:34	18	ri & 0xff
FIELD	2360:29	2360:29	19	ri
LEAF_NODE	2360:29	2360:29	20	ri
LEAF_NODE	2360:32	2360:32	19	&
FIELD	2360:34	2360:34	19	0xff
LEAF_NODE	2360:34	2360:34	20	0xff
LEAF_NODE	2360:38	2360:38	16	;
EXPR_STATEMENT	2361:5	2361:41	15	stripcount = TIFFNumberOfStrips ( input ) ;
EXPR	2361:5	2361:5	16	stripcount = TIFFNumberOfStrips ( input )
ASSIGN	2361:5	2361:16	17	stripcount = TIFFNumberOfStrips ( input )
LVAL	2361:5	2361:5	18	stripcount
FIELD	2361:5	2361:5	19	stripcount
LEAF_NODE	2361:5	2361:5	20	stripcount
ASSIGN_OP	2361:15	2361:15	18	=
LEAF_NODE	2361:15	2361:15	19	=
RVAL	2361:16	2361:16	18	TIFFNumberOfStrips ( input )
FUNCTION_CALL	2361:16	2361:40	19	TIFFNumberOfStrips ( input )
CALLEE	2361:16	2361:16	20	TIFFNumberOfStrips
LEAF_NODE	2361:16	2361:16	21	TIFFNumberOfStrips
LEAF_NODE	2361:34	2361:34	20	(
ARGUMENT	2361:35	2361:35	20	input
FIELD	2361:35	2361:35	21	input
LEAF_NODE	2361:35	2361:35	22	input
LEAF_NODE	2361:40	2361:40	20	)
LEAF_NODE	2361:41	2361:41	16	;
ITERATION	2362:5	2362:30	15	
KEYWORD	2362:5	2362:5	16	for
LEAF_NODE	2362:5	2362:5	17	for
LEAF_NODE	2362:8	2362:8	16	(
FOR_INIT	2362:9	2362:12	16	i = 0 ;
EXPR	2362:9	2362:9	17	i = 0
ASSIGN	2362:9	2362:11	18	i = 0
LVAL	2362:9	2362:9	19	i
FIELD	2362:9	2362:9	20	i
LEAF_NODE	2362:9	2362:9	21	i
ASSIGN_OP	2362:10	2362:10	19	=
LEAF_NODE	2362:10	2362:10	20	=
RVAL	2362:11	2362:11	19	0
FIELD	2362:11	2362:11	20	0
LEAF_NODE	2362:11	2362:11	21	0
LEAF_NODE	2362:12	2362:12	17	;
CONDITION	2362:13	2362:13	16	i < stripcount
EXPR	2362:13	2362:15	17	i < stripcount
FIELD	2362:13	2362:13	18	i
LEAF_NODE	2362:13	2362:13	19	i
REL_OPERATOR	2362:14	2362:14	18	<
LEAF_NODE	2362:14	2362:14	19	<
FIELD	2362:15	2362:15	18	stripcount
LEAF_NODE	2362:15	2362:15	19	stripcount
LEAF_NODE	2362:25	2362:25	16	;
FOR_EXPR	2362:26	2362:26	16	i ++
EXPR	2362:26	2362:26	17	i ++
FIELD	2362:26	2362:27	18	i ++
LEAF_NODE	2362:26	2362:26	19	i
LEAF_NODE	2362:27	2362:27	19	++
LEAF_NODE	2362:29	2362:29	16	)
STATEMENTS	2362:30	2371:5	16	
LEAF_NODE	2362:30	2362:30	17	{
STATEMENTS	2363:6	2367:6	17	
SELECTION	2363:6	2363:17	18	
KEYWORD	2363:6	2363:6	19	if
LEAF_NODE	2363:6	2363:6	20	if
LEAF_NODE	2363:8	2363:8	19	(
CONDITION	2363:9	2363:9	19	i != 0
EXPR	2363:9	2363:14	20	i != 0
FIELD	2363:9	2363:9	21	i
LEAF_NODE	2363:9	2363:9	22	i
EQ_OPERATOR	2363:11	2363:11	21	!=
LEAF_NODE	2363:11	2363:11	22	!=
FIELD	2363:14	2363:14	21	0
LEAF_NODE	2363:14	2363:14	22	0
LEAF_NODE	2363:16	2363:16	19	)
STATEMENTS	2363:17	2366:6	19	
LEAF_NODE	2363:17	2363:17	20	{
STATEMENTS	2364:7	2365:7	20	
EXPR_STATEMENT	2364:7	2364:34	21	buffer [ bufferoffset ++ ] = 0xff ;
EXPR	2364:7	2364:7	22	buffer [ bufferoffset ++ ] = 0xff
ASSIGN	2364:7	2364:30	23	buffer [ bufferoffset ++ ] = 0xff
LVAL	2364:7	2364:7	24	buffer [ bufferoffset ++ ]
FIELD	2364:7	2364:28	25	buffer [ bufferoffset ++ ]
LEAF_NODE	2364:7	2364:7	26	buffer
LEAF_NODE	2364:13	2364:13	26	[
EXPR	2364:14	2364:14	26	bufferoffset ++
FIELD	2364:14	2364:26	27	bufferoffset ++
LEAF_NODE	2364:14	2364:14	28	bufferoffset
LEAF_NODE	2364:26	2364:26	28	++
LEAF_NODE	2364:28	2364:28	26	]
ASSIGN_OP	2364:29	2364:29	24	=
LEAF_NODE	2364:29	2364:29	25	=
RVAL	2364:30	2364:30	24	0xff
FIELD	2364:30	2364:30	25	0xff
LEAF_NODE	2364:30	2364:30	26	0xff
LEAF_NODE	2364:34	2364:34	22	;
EXPR_STATEMENT	2365:7	2365:48	21	buffer [ bufferoffset ++ ] = ( 0xd0 | ( ( i - 1 ) % 8 ) ) ;
EXPR	2365:7	2365:7	22	buffer [ bufferoffset ++ ] = ( 0xd0 | ( ( i - 1 ) % 8 ) )
ASSIGN	2365:7	2365:30	23	buffer [ bufferoffset ++ ] = ( 0xd0 | ( ( i - 1 ) % 8 ) )
LVAL	2365:7	2365:7	24	buffer [ bufferoffset ++ ]
FIELD	2365:7	2365:28	25	buffer [ bufferoffset ++ ]
LEAF_NODE	2365:7	2365:7	26	buffer
LEAF_NODE	2365:13	2365:13	26	[
EXPR	2365:14	2365:14	26	bufferoffset ++
FIELD	2365:14	2365:26	27	bufferoffset ++
LEAF_NODE	2365:14	2365:14	28	bufferoffset
LEAF_NODE	2365:26	2365:26	28	++
LEAF_NODE	2365:28	2365:28	26	]
ASSIGN_OP	2365:29	2365:29	24	=
LEAF_NODE	2365:29	2365:29	25	=
RVAL	2365:30	2365:47	24	( 0xd0 | ( ( i - 1 ) % 8 ) )
LEAF_NODE	2365:30	2365:30	25	(
BIT_OR	2365:31	2365:38	25	0xd0 | ( ( i - 1 ) % 8 )
BIT_OR_ELEM	2365:31	2365:31	26	0xd0
FIELD	2365:31	2365:31	27	0xd0
LEAF_NODE	2365:31	2365:31	28	0xd0
LEAF_NODE	2365:36	2365:36	26	|
BIT_OR_ELEM	2365:38	2365:46	26	( ( i - 1 ) % 8 )
LEAF_NODE	2365:38	2365:38	27	(
LEAF_NODE	2365:39	2365:39	27	(
FIELD	2365:40	2365:40	27	i
LEAF_NODE	2365:40	2365:40	28	i
LEAF_NODE	2365:41	2365:41	27	-
FIELD	2365:42	2365:42	27	1
LEAF_NODE	2365:42	2365:42	28	1
LEAF_NODE	2365:43	2365:43	27	)
LEAF_NODE	2365:44	2365:44	27	%
FIELD	2365:45	2365:45	27	8
LEAF_NODE	2365:45	2365:45	28	8
LEAF_NODE	2365:46	2365:46	27	)
LEAF_NODE	2365:47	2365:47	25	)
LEAF_NODE	2365:48	2365:48	22	;
LEAF_NODE	2366:6	2366:6	20	}
EXPR_STATEMENT	2367:6	2370:10	18	bufferoffset += TIFFReadRawStrip ( input , i , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 ) ;
EXPR	2367:6	2367:6	19	bufferoffset += TIFFReadRawStrip ( input , i , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
ASSIGN	2367:6	2367:20	20	bufferoffset += TIFFReadRawStrip ( input , i , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
LVAL	2367:6	2367:6	21	bufferoffset
FIELD	2367:6	2367:6	22	bufferoffset
LEAF_NODE	2367:6	2367:6	23	bufferoffset
ASSIGN_OP	2367:18	2367:18	21	+=
LEAF_NODE	2367:18	2367:18	22	+=
RVAL	2367:20	2367:20	21	TIFFReadRawStrip ( input , i , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
FUNCTION_CALL	2367:20	2370:9	22	TIFFReadRawStrip ( input , i , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
CALLEE	2367:20	2367:20	23	TIFFReadRawStrip
LEAF_NODE	2367:20	2367:20	24	TIFFReadRawStrip
LEAF_NODE	2367:36	2367:36	23	(
ARGUMENT	2367:37	2367:37	23	input
FIELD	2367:37	2367:37	24	input
LEAF_NODE	2367:37	2367:37	25	input
LEAF_NODE	2367:42	2367:42	23	,
ARGUMENT	2368:7	2368:7	23	i
FIELD	2368:7	2368:7	24	i
LEAF_NODE	2368:7	2368:7	25	i
LEAF_NODE	2368:8	2368:8	23	,
ARGUMENT	2369:7	2369:17	23	( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] )
LEAF_NODE	2369:7	2369:7	24	(
TYPE_NAME	2369:8	2369:8	24	tdata_t
LEAF_NODE	2369:8	2369:8	25	tdata_t
LEAF_NODE	2369:15	2369:15	24	)
UNARY_EXPR	2369:17	2369:57	24	& ( ( ( unsigned char * ) buffer ) [ bufferoffset ] )
UNARY_OPERATOR	2369:17	2369:17	25	&
LEAF_NODE	2369:17	2369:17	26	&
LEAF_NODE	2369:18	2369:18	25	(
LEAF_NODE	2369:19	2369:19	25	(
LEAF_NODE	2369:20	2369:20	25	(
TYPE_NAME	2369:21	2369:30	25	unsigned char
LEAF_NODE	2369:21	2369:21	26	unsigned
LEAF_NODE	2369:30	2369:30	26	char
LEAF_NODE	2369:34	2369:34	25	*
LEAF_NODE	2369:35	2369:35	25	)
FIELD	2369:36	2369:36	25	buffer
LEAF_NODE	2369:36	2369:36	26	buffer
LEAF_NODE	2369:42	2369:42	25	)
LEAF_NODE	2369:43	2369:43	25	[
EXPR	2369:44	2369:44	25	bufferoffset
FIELD	2369:44	2369:44	26	bufferoffset
LEAF_NODE	2369:44	2369:44	27	bufferoffset
LEAF_NODE	2369:56	2369:56	25	]
LEAF_NODE	2369:57	2369:57	25	)
LEAF_NODE	2369:58	2369:58	23	,
ARGUMENT	2370:7	2370:7	23	- 1
UNARY_EXPR	2370:7	2370:8	24	- 1
UNARY_OPERATOR	2370:7	2370:7	25	-
LEAF_NODE	2370:7	2370:7	26	-
FIELD	2370:8	2370:8	25	1
LEAF_NODE	2370:8	2370:8	26	1
LEAF_NODE	2370:9	2370:9	23	)
LEAF_NODE	2370:10	2370:10	19	;
LEAF_NODE	2371:5	2371:5	17	}
EXPR_STATEMENT	2372:5	2372:57	15	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset ) ;
EXPR	2372:5	2372:5	16	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset )
FUNCTION_CALL	2372:5	2372:56	17	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset )
CALLEE	2372:5	2372:5	18	t2pWriteFile
LEAF_NODE	2372:5	2372:5	19	t2pWriteFile
LEAF_NODE	2372:17	2372:17	18	(
ARGUMENT	2372:18	2372:18	18	output
FIELD	2372:18	2372:18	19	output
LEAF_NODE	2372:18	2372:18	20	output
LEAF_NODE	2372:24	2372:24	18	,
ARGUMENT	2372:26	2372:36	18	( tdata_t ) buffer
LEAF_NODE	2372:26	2372:26	19	(
TYPE_NAME	2372:27	2372:27	19	tdata_t
LEAF_NODE	2372:27	2372:27	20	tdata_t
LEAF_NODE	2372:34	2372:34	19	)
FIELD	2372:36	2372:36	19	buffer
LEAF_NODE	2372:36	2372:36	20	buffer
LEAF_NODE	2372:42	2372:42	18	,
ARGUMENT	2372:44	2372:44	18	bufferoffset
FIELD	2372:44	2372:44	19	bufferoffset
LEAF_NODE	2372:44	2372:44	20	bufferoffset
LEAF_NODE	2372:56	2372:56	18	)
LEAF_NODE	2372:57	2372:57	16	;
EXPR_STATEMENT	2373:5	2373:22	15	_TIFFfree ( buffer ) ;
EXPR	2373:5	2373:5	16	_TIFFfree ( buffer )
FUNCTION_CALL	2373:5	2373:21	17	_TIFFfree ( buffer )
CALLEE	2373:5	2373:5	18	_TIFFfree
LEAF_NODE	2373:5	2373:5	19	_TIFFfree
LEAF_NODE	2373:14	2373:14	18	(
ARGUMENT	2373:15	2373:15	18	buffer
FIELD	2373:15	2373:15	19	buffer
LEAF_NODE	2373:15	2373:15	20	buffer
LEAF_NODE	2373:21	2373:21	18	)
LEAF_NODE	2373:22	2373:22	16	;
LEAF_NODE	2374:5	2374:5	15	return
LEAF_NODE	2374:11	2374:11	15	(
LEAF_NODE	2374:12	2374:12	15	bufferoffset
LEAF_NODE	2374:24	2374:24	15	)
LEAF_NODE	2374:25	2374:25	15	;
LEAF_NODE	2375:4	2375:4	14	}
LEAF_NODE	2376:3	2376:3	11	}
SELECTION	2376:5	2376:10	9	
KEYWORD	2376:5	2376:5	10	else
LEAF_NODE	2376:5	2376:5	11	else
STATEMENTS	2376:10	2427:3	10	
LEAF_NODE	2376:10	2376:10	11	{
STATEMENTS	2377:4	2425:4	11	
SELECTION	2377:4	2377:28	12	
KEYWORD	2377:4	2377:4	13	if
LEAF_NODE	2377:4	2377:4	14	if
LEAF_NODE	2377:6	2377:6	13	(
CONDITION	2377:7	2377:7	13	! t2p -> pdf_ojpegdata
EXPR	2377:7	2377:7	14	! t2p -> pdf_ojpegdata
UNARY_EXPR	2377:7	2377:9	15	! t2p -> pdf_ojpegdata
UNARY_OPERATOR	2377:7	2377:7	16	!
LEAF_NODE	2377:7	2377:7	17	!
FIELD	2377:9	2377:14	16	t2p -> pdf_ojpegdata
LEAF_NODE	2377:9	2377:9	17	t2p
LEAF_NODE	2377:12	2377:12	17	->
LEAF_NODE	2377:14	2377:14	17	pdf_ojpegdata
LEAF_NODE	2377:27	2377:27	13	)
STATEMENTS	2377:28	2383:4	13	
LEAF_NODE	2377:28	2377:28	14	{
STATEMENTS	2378:5	2382:5	14	
EXPR_STATEMENT	2378:5	2380:26	15	TIFFError ( TIFF2PDF_MODULE , "No support for OJPEG image %s with bad tables" , TIFFFileName ( input ) ) ;
EXPR	2378:5	2378:5	16	TIFFError ( TIFF2PDF_MODULE , "No support for OJPEG image %s with bad tables" , TIFFFileName ( input ) )
FUNCTION_CALL	2378:5	2380:25	17	TIFFError ( TIFF2PDF_MODULE , "No support for OJPEG image %s with bad tables" , TIFFFileName ( input ) )
CALLEE	2378:5	2378:5	18	TIFFError
LEAF_NODE	2378:5	2378:5	19	TIFFError
LEAF_NODE	2378:14	2378:14	18	(
ARGUMENT	2378:15	2378:15	18	TIFF2PDF_MODULE
FIELD	2378:15	2378:15	19	TIFF2PDF_MODULE
LEAF_NODE	2378:15	2378:15	20	TIFF2PDF_MODULE
LEAF_NODE	2378:30	2378:30	18	,
ARGUMENT	2379:4	2379:4	18	"No support for OJPEG image %s with bad tables"
FIELD	2379:4	2379:4	19	"No support for OJPEG image %s with bad tables"
LEAF_NODE	2379:4	2379:4	20	"No support for OJPEG image %s with bad tables"
LEAF_NODE	2379:51	2379:51	18	,
ARGUMENT	2380:6	2380:6	18	TIFFFileName ( input )
FUNCTION_CALL	2380:6	2380:24	19	TIFFFileName ( input )
CALLEE	2380:6	2380:6	20	TIFFFileName
LEAF_NODE	2380:6	2380:6	21	TIFFFileName
LEAF_NODE	2380:18	2380:18	20	(
ARGUMENT	2380:19	2380:19	20	input
FIELD	2380:19	2380:19	21	input
LEAF_NODE	2380:19	2380:19	22	input
LEAF_NODE	2380:24	2380:24	20	)
LEAF_NODE	2380:25	2380:25	18	)
LEAF_NODE	2380:26	2380:26	16	;
EXPR_STATEMENT	2381:5	2381:35	15	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2381:5	2381:5	16	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2381:5	2381:22	17	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2381:5	2381:5	18	t2p -> t2p_error
FIELD	2381:5	2381:10	19	t2p -> t2p_error
LEAF_NODE	2381:5	2381:5	20	t2p
LEAF_NODE	2381:8	2381:8	20	->
LEAF_NODE	2381:10	2381:10	20	t2p_error
ASSIGN_OP	2381:20	2381:20	18	=
LEAF_NODE	2381:20	2381:20	19	=
RVAL	2381:22	2381:22	18	T2P_ERR_ERROR
FIELD	2381:22	2381:22	19	T2P_ERR_ERROR
LEAF_NODE	2381:22	2381:22	20	T2P_ERR_ERROR
LEAF_NODE	2381:35	2381:35	16	;
JUMP_STATEMENT	2382:5	2382:14	15	return ( 0 ) ;
KEYWORD	2382:5	2382:5	16	return
LEAF_NODE	2382:5	2382:5	17	return
DESTINATION	2382:11	2382:11	16	( 0 )
EXPR	2382:11	2382:13	17	( 0 )
LEAF_NODE	2382:11	2382:11	18	(
FIELD	2382:12	2382:12	18	0
LEAF_NODE	2382:12	2382:12	19	0
LEAF_NODE	2382:13	2382:13	18	)
LEAF_NODE	2382:14	2382:14	16	;
LEAF_NODE	2383:4	2383:4	14	}
EXPR_STATEMENT	2384:4	2385:36	12	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2384:4	2384:4	13	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2384:4	2384:13	14	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2384:4	2384:4	15	buffer
FIELD	2384:4	2384:4	16	buffer
LEAF_NODE	2384:4	2384:4	17	buffer
ASSIGN_OP	2384:11	2384:11	15	=
LEAF_NODE	2384:11	2384:11	16	=
RVAL	2384:13	2385:5	15	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2384:13	2384:13	16	(
TYPE_NAME	2384:14	2384:23	16	unsigned char
LEAF_NODE	2384:14	2384:14	17	unsigned
LEAF_NODE	2384:23	2384:23	17	char
LEAF_NODE	2384:27	2384:27	16	*
LEAF_NODE	2384:28	2384:28	16	)
FUNCTION_CALL	2385:5	2385:35	16	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2385:5	2385:5	17	_TIFFmalloc
LEAF_NODE	2385:5	2385:5	18	_TIFFmalloc
LEAF_NODE	2385:16	2385:16	17	(
ARGUMENT	2385:17	2385:17	17	t2p -> tiff_datasize
FIELD	2385:17	2385:22	18	t2p -> tiff_datasize
LEAF_NODE	2385:17	2385:17	19	t2p
LEAF_NODE	2385:20	2385:20	19	->
LEAF_NODE	2385:22	2385:22	19	tiff_datasize
LEAF_NODE	2385:35	2385:35	17	)
LEAF_NODE	2385:36	2385:36	13	;
SELECTION	2386:4	2386:20	12	
KEYWORD	2386:4	2386:4	13	if
LEAF_NODE	2386:4	2386:4	14	if
LEAF_NODE	2386:6	2386:6	13	(
CONDITION	2386:7	2386:7	13	buffer == NULL
EXPR	2386:7	2386:15	14	buffer == NULL
FIELD	2386:7	2386:7	15	buffer
LEAF_NODE	2386:7	2386:7	16	buffer
EQ_OPERATOR	2386:13	2386:13	15	==
LEAF_NODE	2386:13	2386:13	16	==
FIELD	2386:15	2386:15	15	NULL
LEAF_NODE	2386:15	2386:15	16	NULL
LEAF_NODE	2386:19	2386:19	13	)
STATEMENTS	2386:20	2393:4	13	
LEAF_NODE	2386:20	2386:20	14	{
STATEMENTS	2387:5	2392:5	14	
EXPR_STATEMENT	2387:5	2390:26	15	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) ) ;
EXPR	2387:5	2387:5	16	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
FUNCTION_CALL	2387:5	2390:25	17	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
CALLEE	2387:5	2387:5	18	TIFFError
LEAF_NODE	2387:5	2387:5	19	TIFFError
LEAF_NODE	2387:14	2387:14	18	(
ARGUMENT	2387:15	2387:15	18	TIFF2PDF_MODULE
FIELD	2387:15	2387:15	19	TIFF2PDF_MODULE
LEAF_NODE	2387:15	2387:15	20	TIFF2PDF_MODULE
LEAF_NODE	2387:30	2387:30	18	,
ARGUMENT	2388:1	2388:1	18	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2388:1	2388:1	19	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2388:1	2388:1	20	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2388:69	2388:69	18	,
ARGUMENT	2389:6	2389:22	18	( unsigned long ) t2p -> tiff_datasize
LEAF_NODE	2389:6	2389:6	19	(
TYPE_NAME	2389:7	2389:16	19	unsigned long
LEAF_NODE	2389:7	2389:7	20	unsigned
LEAF_NODE	2389:16	2389:16	20	long
LEAF_NODE	2389:20	2389:20	19	)
FIELD	2389:22	2389:27	19	t2p -> tiff_datasize
LEAF_NODE	2389:22	2389:22	20	t2p
LEAF_NODE	2389:25	2389:25	20	->
LEAF_NODE	2389:27	2389:27	20	tiff_datasize
LEAF_NODE	2389:40	2389:40	18	,
ARGUMENT	2390:6	2390:6	18	TIFFFileName ( input )
FUNCTION_CALL	2390:6	2390:24	19	TIFFFileName ( input )
CALLEE	2390:6	2390:6	20	TIFFFileName
LEAF_NODE	2390:6	2390:6	21	TIFFFileName
LEAF_NODE	2390:18	2390:18	20	(
ARGUMENT	2390:19	2390:19	20	input
FIELD	2390:19	2390:19	21	input
LEAF_NODE	2390:19	2390:19	22	input
LEAF_NODE	2390:24	2390:24	20	)
LEAF_NODE	2390:25	2390:25	18	)
LEAF_NODE	2390:26	2390:26	16	;
EXPR_STATEMENT	2391:5	2391:35	15	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2391:5	2391:5	16	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2391:5	2391:22	17	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2391:5	2391:5	18	t2p -> t2p_error
FIELD	2391:5	2391:10	19	t2p -> t2p_error
LEAF_NODE	2391:5	2391:5	20	t2p
LEAF_NODE	2391:8	2391:8	20	->
LEAF_NODE	2391:10	2391:10	20	t2p_error
ASSIGN_OP	2391:20	2391:20	18	=
LEAF_NODE	2391:20	2391:20	19	=
RVAL	2391:22	2391:22	18	T2P_ERR_ERROR
FIELD	2391:22	2391:22	19	T2P_ERR_ERROR
LEAF_NODE	2391:22	2391:22	20	T2P_ERR_ERROR
LEAF_NODE	2391:35	2391:35	16	;
JUMP_STATEMENT	2392:5	2392:14	15	return ( 0 ) ;
KEYWORD	2392:5	2392:5	16	return
LEAF_NODE	2392:5	2392:5	17	return
DESTINATION	2392:11	2392:11	16	( 0 )
EXPR	2392:11	2392:13	17	( 0 )
LEAF_NODE	2392:11	2392:11	18	(
FIELD	2392:12	2392:12	18	0
LEAF_NODE	2392:12	2392:12	19	0
LEAF_NODE	2392:13	2392:13	18	)
LEAF_NODE	2392:14	2392:14	16	;
LEAF_NODE	2393:4	2393:4	14	}
EXPR_STATEMENT	2394:32	2394:69	12	memset ( buffer , 0 , t2p -> tiff_datasize ) ;
EXPR	2394:32	2394:32	13	memset ( buffer , 0 , t2p -> tiff_datasize )
FUNCTION_CALL	2394:32	2394:68	14	memset ( buffer , 0 , t2p -> tiff_datasize )
CALLEE	2394:32	2394:32	15	memset
LEAF_NODE	2394:32	2394:32	16	memset
LEAF_NODE	2394:38	2394:38	15	(
ARGUMENT	2394:39	2394:39	15	buffer
FIELD	2394:39	2394:39	16	buffer
LEAF_NODE	2394:39	2394:39	17	buffer
LEAF_NODE	2394:45	2394:45	15	,
ARGUMENT	2394:47	2394:47	15	0
FIELD	2394:47	2394:47	16	0
LEAF_NODE	2394:47	2394:47	17	0
LEAF_NODE	2394:48	2394:48	15	,
ARGUMENT	2394:50	2394:50	15	t2p -> tiff_datasize
FIELD	2394:50	2394:55	16	t2p -> tiff_datasize
LEAF_NODE	2394:50	2394:50	17	t2p
LEAF_NODE	2394:53	2394:53	17	->
LEAF_NODE	2394:55	2394:55	17	tiff_datasize
LEAF_NODE	2394:68	2394:68	15	)
LEAF_NODE	2394:69	2394:69	13	;
EXPR_STATEMENT	2395:4	2395:69	12	_TIFFmemcpy ( buffer , t2p -> pdf_ojpegdata , t2p -> pdf_ojpegdatalength ) ;
EXPR	2395:4	2395:4	13	_TIFFmemcpy ( buffer , t2p -> pdf_ojpegdata , t2p -> pdf_ojpegdatalength )
FUNCTION_CALL	2395:4	2395:68	14	_TIFFmemcpy ( buffer , t2p -> pdf_ojpegdata , t2p -> pdf_ojpegdatalength )
CALLEE	2395:4	2395:4	15	_TIFFmemcpy
LEAF_NODE	2395:4	2395:4	16	_TIFFmemcpy
LEAF_NODE	2395:15	2395:15	15	(
ARGUMENT	2395:16	2395:16	15	buffer
FIELD	2395:16	2395:16	16	buffer
LEAF_NODE	2395:16	2395:16	17	buffer
LEAF_NODE	2395:22	2395:22	15	,
ARGUMENT	2395:24	2395:24	15	t2p -> pdf_ojpegdata
FIELD	2395:24	2395:29	16	t2p -> pdf_ojpegdata
LEAF_NODE	2395:24	2395:24	17	t2p
LEAF_NODE	2395:27	2395:27	17	->
LEAF_NODE	2395:29	2395:29	17	pdf_ojpegdata
LEAF_NODE	2395:42	2395:42	15	,
ARGUMENT	2395:44	2395:44	15	t2p -> pdf_ojpegdatalength
FIELD	2395:44	2395:49	16	t2p -> pdf_ojpegdatalength
LEAF_NODE	2395:44	2395:44	17	t2p
LEAF_NODE	2395:47	2395:47	17	->
LEAF_NODE	2395:49	2395:49	17	pdf_ojpegdatalength
LEAF_NODE	2395:68	2395:68	15	)
LEAF_NODE	2395:69	2395:69	13	;
EXPR_STATEMENT	2396:4	2396:41	12	bufferoffset = t2p -> pdf_ojpegdatalength ;
EXPR	2396:4	2396:4	13	bufferoffset = t2p -> pdf_ojpegdatalength
ASSIGN	2396:4	2396:17	14	bufferoffset = t2p -> pdf_ojpegdatalength
LVAL	2396:4	2396:4	15	bufferoffset
FIELD	2396:4	2396:4	16	bufferoffset
LEAF_NODE	2396:4	2396:4	17	bufferoffset
ASSIGN_OP	2396:16	2396:16	15	=
LEAF_NODE	2396:16	2396:16	16	=
RVAL	2396:17	2396:17	15	t2p -> pdf_ojpegdatalength
FIELD	2396:17	2396:22	16	t2p -> pdf_ojpegdatalength
LEAF_NODE	2396:17	2396:17	17	t2p
LEAF_NODE	2396:20	2396:20	17	->
LEAF_NODE	2396:22	2396:22	17	pdf_ojpegdatalength
LEAF_NODE	2396:41	2396:41	13	;
EXPR_STATEMENT	2397:4	2397:40	12	stripcount = TIFFNumberOfStrips ( input ) ;
EXPR	2397:4	2397:4	13	stripcount = TIFFNumberOfStrips ( input )
ASSIGN	2397:4	2397:15	14	stripcount = TIFFNumberOfStrips ( input )
LVAL	2397:4	2397:4	15	stripcount
FIELD	2397:4	2397:4	16	stripcount
LEAF_NODE	2397:4	2397:4	17	stripcount
ASSIGN_OP	2397:14	2397:14	15	=
LEAF_NODE	2397:14	2397:14	16	=
RVAL	2397:15	2397:15	15	TIFFNumberOfStrips ( input )
FUNCTION_CALL	2397:15	2397:39	16	TIFFNumberOfStrips ( input )
CALLEE	2397:15	2397:15	17	TIFFNumberOfStrips
LEAF_NODE	2397:15	2397:15	18	TIFFNumberOfStrips
LEAF_NODE	2397:33	2397:33	17	(
ARGUMENT	2397:34	2397:34	17	input
FIELD	2397:34	2397:34	18	input
LEAF_NODE	2397:34	2397:34	19	input
LEAF_NODE	2397:39	2397:39	17	)
LEAF_NODE	2397:40	2397:40	13	;
ITERATION	2398:4	2398:29	12	
KEYWORD	2398:4	2398:4	13	for
LEAF_NODE	2398:4	2398:4	14	for
LEAF_NODE	2398:7	2398:7	13	(
FOR_INIT	2398:8	2398:11	13	i = 0 ;
EXPR	2398:8	2398:8	14	i = 0
ASSIGN	2398:8	2398:10	15	i = 0
LVAL	2398:8	2398:8	16	i
FIELD	2398:8	2398:8	17	i
LEAF_NODE	2398:8	2398:8	18	i
ASSIGN_OP	2398:9	2398:9	16	=
LEAF_NODE	2398:9	2398:9	17	=
RVAL	2398:10	2398:10	16	0
FIELD	2398:10	2398:10	17	0
LEAF_NODE	2398:10	2398:10	18	0
LEAF_NODE	2398:11	2398:11	14	;
CONDITION	2398:12	2398:12	13	i < stripcount
EXPR	2398:12	2398:14	14	i < stripcount
FIELD	2398:12	2398:12	15	i
LEAF_NODE	2398:12	2398:12	16	i
REL_OPERATOR	2398:13	2398:13	15	<
LEAF_NODE	2398:13	2398:13	16	<
FIELD	2398:14	2398:14	15	stripcount
LEAF_NODE	2398:14	2398:14	16	stripcount
LEAF_NODE	2398:24	2398:24	13	;
FOR_EXPR	2398:25	2398:25	13	i ++
EXPR	2398:25	2398:25	14	i ++
FIELD	2398:25	2398:26	15	i ++
LEAF_NODE	2398:25	2398:25	16	i
LEAF_NODE	2398:26	2398:26	16	++
LEAF_NODE	2398:28	2398:28	13	)
STATEMENTS	2398:29	2407:4	13	
LEAF_NODE	2398:29	2398:29	14	{
STATEMENTS	2399:5	2403:5	14	
SELECTION	2399:5	2399:15	15	
KEYWORD	2399:5	2399:5	16	if
LEAF_NODE	2399:5	2399:5	17	if
LEAF_NODE	2399:7	2399:7	16	(
CONDITION	2399:8	2399:8	16	i != 0
EXPR	2399:8	2399:13	17	i != 0
FIELD	2399:8	2399:8	18	i
LEAF_NODE	2399:8	2399:8	19	i
EQ_OPERATOR	2399:10	2399:10	18	!=
LEAF_NODE	2399:10	2399:10	19	!=
FIELD	2399:13	2399:13	18	0
LEAF_NODE	2399:13	2399:13	19	0
LEAF_NODE	2399:14	2399:14	16	)
STATEMENTS	2399:15	2402:5	16	
LEAF_NODE	2399:15	2399:15	17	{
STATEMENTS	2400:6	2401:6	17	
EXPR_STATEMENT	2400:6	2400:33	18	buffer [ bufferoffset ++ ] = 0xff ;
EXPR	2400:6	2400:6	19	buffer [ bufferoffset ++ ] = 0xff
ASSIGN	2400:6	2400:29	20	buffer [ bufferoffset ++ ] = 0xff
LVAL	2400:6	2400:6	21	buffer [ bufferoffset ++ ]
FIELD	2400:6	2400:27	22	buffer [ bufferoffset ++ ]
LEAF_NODE	2400:6	2400:6	23	buffer
LEAF_NODE	2400:12	2400:12	23	[
EXPR	2400:13	2400:13	23	bufferoffset ++
FIELD	2400:13	2400:25	24	bufferoffset ++
LEAF_NODE	2400:13	2400:13	25	bufferoffset
LEAF_NODE	2400:25	2400:25	25	++
LEAF_NODE	2400:27	2400:27	23	]
ASSIGN_OP	2400:28	2400:28	21	=
LEAF_NODE	2400:28	2400:28	22	=
RVAL	2400:29	2400:29	21	0xff
FIELD	2400:29	2400:29	22	0xff
LEAF_NODE	2400:29	2400:29	23	0xff
LEAF_NODE	2400:33	2400:33	19	;
EXPR_STATEMENT	2401:6	2401:47	18	buffer [ bufferoffset ++ ] = ( 0xd0 | ( ( i - 1 ) % 8 ) ) ;
EXPR	2401:6	2401:6	19	buffer [ bufferoffset ++ ] = ( 0xd0 | ( ( i - 1 ) % 8 ) )
ASSIGN	2401:6	2401:29	20	buffer [ bufferoffset ++ ] = ( 0xd0 | ( ( i - 1 ) % 8 ) )
LVAL	2401:6	2401:6	21	buffer [ bufferoffset ++ ]
FIELD	2401:6	2401:27	22	buffer [ bufferoffset ++ ]
LEAF_NODE	2401:6	2401:6	23	buffer
LEAF_NODE	2401:12	2401:12	23	[
EXPR	2401:13	2401:13	23	bufferoffset ++
FIELD	2401:13	2401:25	24	bufferoffset ++
LEAF_NODE	2401:13	2401:13	25	bufferoffset
LEAF_NODE	2401:25	2401:25	25	++
LEAF_NODE	2401:27	2401:27	23	]
ASSIGN_OP	2401:28	2401:28	21	=
LEAF_NODE	2401:28	2401:28	22	=
RVAL	2401:29	2401:46	21	( 0xd0 | ( ( i - 1 ) % 8 ) )
LEAF_NODE	2401:29	2401:29	22	(
BIT_OR	2401:30	2401:37	22	0xd0 | ( ( i - 1 ) % 8 )
BIT_OR_ELEM	2401:30	2401:30	23	0xd0
FIELD	2401:30	2401:30	24	0xd0
LEAF_NODE	2401:30	2401:30	25	0xd0
LEAF_NODE	2401:35	2401:35	23	|
BIT_OR_ELEM	2401:37	2401:45	23	( ( i - 1 ) % 8 )
LEAF_NODE	2401:37	2401:37	24	(
LEAF_NODE	2401:38	2401:38	24	(
FIELD	2401:39	2401:39	24	i
LEAF_NODE	2401:39	2401:39	25	i
LEAF_NODE	2401:40	2401:40	24	-
FIELD	2401:41	2401:41	24	1
LEAF_NODE	2401:41	2401:41	25	1
LEAF_NODE	2401:42	2401:42	24	)
LEAF_NODE	2401:43	2401:43	24	%
FIELD	2401:44	2401:44	24	8
LEAF_NODE	2401:44	2401:44	25	8
LEAF_NODE	2401:45	2401:45	24	)
LEAF_NODE	2401:46	2401:46	22	)
LEAF_NODE	2401:47	2401:47	19	;
LEAF_NODE	2402:5	2402:5	17	}
EXPR_STATEMENT	2403:5	2406:9	15	bufferoffset += TIFFReadRawStrip ( input , i , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 ) ;
EXPR	2403:5	2403:5	16	bufferoffset += TIFFReadRawStrip ( input , i , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
ASSIGN	2403:5	2403:19	17	bufferoffset += TIFFReadRawStrip ( input , i , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
LVAL	2403:5	2403:5	18	bufferoffset
FIELD	2403:5	2403:5	19	bufferoffset
LEAF_NODE	2403:5	2403:5	20	bufferoffset
ASSIGN_OP	2403:17	2403:17	18	+=
LEAF_NODE	2403:17	2403:17	19	+=
RVAL	2403:19	2403:19	18	TIFFReadRawStrip ( input , i , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
FUNCTION_CALL	2403:19	2406:8	19	TIFFReadRawStrip ( input , i , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
CALLEE	2403:19	2403:19	20	TIFFReadRawStrip
LEAF_NODE	2403:19	2403:19	21	TIFFReadRawStrip
LEAF_NODE	2403:35	2403:35	20	(
ARGUMENT	2403:36	2403:36	20	input
FIELD	2403:36	2403:36	21	input
LEAF_NODE	2403:36	2403:36	22	input
LEAF_NODE	2403:41	2403:41	20	,
ARGUMENT	2404:6	2404:6	20	i
FIELD	2404:6	2404:6	21	i
LEAF_NODE	2404:6	2404:6	22	i
LEAF_NODE	2404:7	2404:7	20	,
ARGUMENT	2405:6	2405:16	20	( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] )
LEAF_NODE	2405:6	2405:6	21	(
TYPE_NAME	2405:7	2405:7	21	tdata_t
LEAF_NODE	2405:7	2405:7	22	tdata_t
LEAF_NODE	2405:14	2405:14	21	)
UNARY_EXPR	2405:16	2405:56	21	& ( ( ( unsigned char * ) buffer ) [ bufferoffset ] )
UNARY_OPERATOR	2405:16	2405:16	22	&
LEAF_NODE	2405:16	2405:16	23	&
LEAF_NODE	2405:17	2405:17	22	(
LEAF_NODE	2405:18	2405:18	22	(
LEAF_NODE	2405:19	2405:19	22	(
TYPE_NAME	2405:20	2405:29	22	unsigned char
LEAF_NODE	2405:20	2405:20	23	unsigned
LEAF_NODE	2405:29	2405:29	23	char
LEAF_NODE	2405:33	2405:33	22	*
LEAF_NODE	2405:34	2405:34	22	)
FIELD	2405:35	2405:35	22	buffer
LEAF_NODE	2405:35	2405:35	23	buffer
LEAF_NODE	2405:41	2405:41	22	)
LEAF_NODE	2405:42	2405:42	22	[
EXPR	2405:43	2405:43	22	bufferoffset
FIELD	2405:43	2405:43	23	bufferoffset
LEAF_NODE	2405:43	2405:43	24	bufferoffset
LEAF_NODE	2405:55	2405:55	22	]
LEAF_NODE	2405:56	2405:56	22	)
LEAF_NODE	2405:57	2405:57	20	,
ARGUMENT	2406:6	2406:6	20	- 1
UNARY_EXPR	2406:6	2406:7	21	- 1
UNARY_OPERATOR	2406:6	2406:6	22	-
LEAF_NODE	2406:6	2406:6	23	-
FIELD	2406:7	2406:7	22	1
LEAF_NODE	2406:7	2406:7	23	1
LEAF_NODE	2406:8	2406:8	20	)
LEAF_NODE	2406:9	2406:9	16	;
LEAF_NODE	2407:4	2407:4	14	}
SELECTION	2408:4	2408:80	12	
KEYWORD	2408:4	2408:4	13	if
LEAF_NODE	2408:4	2408:4	14	if
LEAF_NODE	2408:6	2408:6	13	(
CONDITION	2408:8	2408:8	13	! ( ( buffer [ bufferoffset - 1 ] == 0xd9 ) && ( buffer [ bufferoffset - 2 ] == 0xff ) )
EXPR	2408:8	2408:8	14	! ( ( buffer [ bufferoffset - 1 ] == 0xd9 ) && ( buffer [ bufferoffset - 2 ] == 0xff ) )
UNARY_EXPR	2408:8	2408:77	15	! ( ( buffer [ bufferoffset - 1 ] == 0xd9 ) && ( buffer [ bufferoffset - 2 ] == 0xff ) )
UNARY_OPERATOR	2408:8	2408:8	16	!
LEAF_NODE	2408:8	2408:8	17	!
LEAF_NODE	2408:10	2408:10	16	(
AND	2408:12	2408:46	16	( buffer [ bufferoffset - 1 ] == 0xd9 ) && ( buffer [ bufferoffset - 2 ] == 0xff )
EXPR	2408:12	2408:41	17	( buffer [ bufferoffset - 1 ] == 0xd9 )
LEAF_NODE	2408:12	2408:12	18	(
FIELD	2408:13	2408:34	18	buffer [ bufferoffset - 1 ]
LEAF_NODE	2408:13	2408:13	19	buffer
LEAF_NODE	2408:19	2408:19	19	[
EXPR	2408:20	2408:33	19	bufferoffset - 1
FIELD	2408:20	2408:20	20	bufferoffset
LEAF_NODE	2408:20	2408:20	21	bufferoffset
LEAF_NODE	2408:32	2408:32	20	-
FIELD	2408:33	2408:33	20	1
LEAF_NODE	2408:33	2408:33	21	1
LEAF_NODE	2408:34	2408:34	19	]
EQ_OPERATOR	2408:35	2408:35	18	==
LEAF_NODE	2408:35	2408:35	19	==
FIELD	2408:37	2408:37	18	0xd9
LEAF_NODE	2408:37	2408:37	19	0xd9
LEAF_NODE	2408:41	2408:41	18	)
LEAF_NODE	2408:43	2408:43	17	&&
EXPR	2408:46	2408:75	17	( buffer [ bufferoffset - 2 ] == 0xff )
LEAF_NODE	2408:46	2408:46	18	(
FIELD	2408:47	2408:68	18	buffer [ bufferoffset - 2 ]
LEAF_NODE	2408:47	2408:47	19	buffer
LEAF_NODE	2408:53	2408:53	19	[
EXPR	2408:54	2408:67	19	bufferoffset - 2
FIELD	2408:54	2408:54	20	bufferoffset
LEAF_NODE	2408:54	2408:54	21	bufferoffset
LEAF_NODE	2408:66	2408:66	20	-
FIELD	2408:67	2408:67	20	2
LEAF_NODE	2408:67	2408:67	21	2
LEAF_NODE	2408:68	2408:68	19	]
EQ_OPERATOR	2408:69	2408:69	18	==
LEAF_NODE	2408:69	2408:69	19	==
FIELD	2408:71	2408:71	18	0xff
LEAF_NODE	2408:71	2408:71	19	0xff
LEAF_NODE	2408:75	2408:75	18	)
LEAF_NODE	2408:77	2408:77	16	)
LEAF_NODE	2408:79	2408:79	13	)
STATEMENTS	2408:80	2411:4	13	
LEAF_NODE	2408:80	2408:80	14	{
STATEMENTS	2409:6	2410:6	14	
EXPR_STATEMENT	2409:6	2409:33	15	buffer [ bufferoffset ++ ] = 0xff ;
EXPR	2409:6	2409:6	16	buffer [ bufferoffset ++ ] = 0xff
ASSIGN	2409:6	2409:29	17	buffer [ bufferoffset ++ ] = 0xff
LVAL	2409:6	2409:6	18	buffer [ bufferoffset ++ ]
FIELD	2409:6	2409:27	19	buffer [ bufferoffset ++ ]
LEAF_NODE	2409:6	2409:6	20	buffer
LEAF_NODE	2409:12	2409:12	20	[
EXPR	2409:13	2409:13	20	bufferoffset ++
FIELD	2409:13	2409:25	21	bufferoffset ++
LEAF_NODE	2409:13	2409:13	22	bufferoffset
LEAF_NODE	2409:25	2409:25	22	++
LEAF_NODE	2409:27	2409:27	20	]
ASSIGN_OP	2409:28	2409:28	18	=
LEAF_NODE	2409:28	2409:28	19	=
RVAL	2409:29	2409:29	18	0xff
FIELD	2409:29	2409:29	19	0xff
LEAF_NODE	2409:29	2409:29	20	0xff
LEAF_NODE	2409:33	2409:33	16	;
EXPR_STATEMENT	2410:6	2410:33	15	buffer [ bufferoffset ++ ] = 0xd9 ;
EXPR	2410:6	2410:6	16	buffer [ bufferoffset ++ ] = 0xd9
ASSIGN	2410:6	2410:29	17	buffer [ bufferoffset ++ ] = 0xd9
LVAL	2410:6	2410:6	18	buffer [ bufferoffset ++ ]
FIELD	2410:6	2410:27	19	buffer [ bufferoffset ++ ]
LEAF_NODE	2410:6	2410:6	20	buffer
LEAF_NODE	2410:12	2410:12	20	[
EXPR	2410:13	2410:13	20	bufferoffset ++
FIELD	2410:13	2410:25	21	bufferoffset ++
LEAF_NODE	2410:13	2410:13	22	bufferoffset
LEAF_NODE	2410:25	2410:25	22	++
LEAF_NODE	2410:27	2410:27	20	]
ASSIGN_OP	2410:28	2410:28	18	=
LEAF_NODE	2410:28	2410:28	19	=
RVAL	2410:29	2410:29	18	0xd9
FIELD	2410:29	2410:29	19	0xd9
LEAF_NODE	2410:29	2410:29	20	0xd9
LEAF_NODE	2410:33	2410:33	16	;
LEAF_NODE	2411:4	2411:4	14	}
EXPR_STATEMENT	2412:4	2412:56	12	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset ) ;
EXPR	2412:4	2412:4	13	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset )
FUNCTION_CALL	2412:4	2412:55	14	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset )
CALLEE	2412:4	2412:4	15	t2pWriteFile
LEAF_NODE	2412:4	2412:4	16	t2pWriteFile
LEAF_NODE	2412:16	2412:16	15	(
ARGUMENT	2412:17	2412:17	15	output
FIELD	2412:17	2412:17	16	output
LEAF_NODE	2412:17	2412:17	17	output
LEAF_NODE	2412:23	2412:23	15	,
ARGUMENT	2412:25	2412:35	15	( tdata_t ) buffer
LEAF_NODE	2412:25	2412:25	16	(
TYPE_NAME	2412:26	2412:26	16	tdata_t
LEAF_NODE	2412:26	2412:26	17	tdata_t
LEAF_NODE	2412:33	2412:33	16	)
FIELD	2412:35	2412:35	16	buffer
LEAF_NODE	2412:35	2412:35	17	buffer
LEAF_NODE	2412:41	2412:41	15	,
ARGUMENT	2412:43	2412:43	15	bufferoffset
FIELD	2412:43	2412:43	16	bufferoffset
LEAF_NODE	2412:43	2412:43	17	bufferoffset
LEAF_NODE	2412:55	2412:55	15	)
LEAF_NODE	2412:56	2412:56	13	;
EXPR_STATEMENT	2413:4	2413:21	12	_TIFFfree ( buffer ) ;
EXPR	2413:4	2413:4	13	_TIFFfree ( buffer )
FUNCTION_CALL	2413:4	2413:20	14	_TIFFfree ( buffer )
CALLEE	2413:4	2413:4	15	_TIFFfree
LEAF_NODE	2413:4	2413:4	16	_TIFFfree
LEAF_NODE	2413:13	2413:13	15	(
ARGUMENT	2413:14	2413:14	15	buffer
FIELD	2413:14	2413:14	16	buffer
LEAF_NODE	2413:14	2413:14	17	buffer
LEAF_NODE	2413:20	2413:20	15	)
LEAF_NODE	2413:21	2413:21	13	;
LEAF_NODE	2414:4	2414:4	12	return
LEAF_NODE	2414:10	2414:10	12	(
LEAF_NODE	2414:11	2414:11	12	bufferoffset
LEAF_NODE	2414:23	2414:23	12	)
LEAF_NODE	2414:24	2414:24	12	;
EXPR_STATEMENT	2421:4	2423:25	12	TIFFError ( TIFF2PDF_MODULE , "No support for OJPEG image %s with no JPEG File Interchange offset" , TIFFFileName ( input ) ) ;
EXPR	2421:4	2421:4	13	TIFFError ( TIFF2PDF_MODULE , "No support for OJPEG image %s with no JPEG File Interchange offset" , TIFFFileName ( input ) )
FUNCTION_CALL	2421:4	2423:24	14	TIFFError ( TIFF2PDF_MODULE , "No support for OJPEG image %s with no JPEG File Interchange offset" , TIFFFileName ( input ) )
CALLEE	2421:4	2421:4	15	TIFFError
LEAF_NODE	2421:4	2421:4	16	TIFFError
LEAF_NODE	2421:13	2421:13	15	(
ARGUMENT	2421:14	2421:14	15	TIFF2PDF_MODULE
FIELD	2421:14	2421:14	16	TIFF2PDF_MODULE
LEAF_NODE	2421:14	2421:14	17	TIFF2PDF_MODULE
LEAF_NODE	2421:29	2421:29	15	,
ARGUMENT	2422:1	2422:1	15	"No support for OJPEG image %s with no JPEG File Interchange offset"
FIELD	2422:1	2422:1	16	"No support for OJPEG image %s with no JPEG File Interchange offset"
LEAF_NODE	2422:1	2422:1	17	"No support for OJPEG image %s with no JPEG File Interchange offset"
LEAF_NODE	2422:69	2422:69	15	,
ARGUMENT	2423:5	2423:5	15	TIFFFileName ( input )
FUNCTION_CALL	2423:5	2423:23	16	TIFFFileName ( input )
CALLEE	2423:5	2423:5	17	TIFFFileName
LEAF_NODE	2423:5	2423:5	18	TIFFFileName
LEAF_NODE	2423:17	2423:17	17	(
ARGUMENT	2423:18	2423:18	17	input
FIELD	2423:18	2423:18	18	input
LEAF_NODE	2423:18	2423:18	19	input
LEAF_NODE	2423:23	2423:23	17	)
LEAF_NODE	2423:24	2423:24	15	)
LEAF_NODE	2423:25	2423:25	13	;
EXPR_STATEMENT	2424:4	2424:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2424:4	2424:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2424:4	2424:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2424:4	2424:4	15	t2p -> t2p_error
FIELD	2424:4	2424:9	16	t2p -> t2p_error
LEAF_NODE	2424:4	2424:4	17	t2p
LEAF_NODE	2424:7	2424:7	17	->
LEAF_NODE	2424:9	2424:9	17	t2p_error
ASSIGN_OP	2424:19	2424:19	15	=
LEAF_NODE	2424:19	2424:19	16	=
RVAL	2424:21	2424:21	15	T2P_ERR_ERROR
FIELD	2424:21	2424:21	16	T2P_ERR_ERROR
LEAF_NODE	2424:21	2424:21	17	T2P_ERR_ERROR
LEAF_NODE	2424:34	2424:34	13	;
JUMP_STATEMENT	2425:4	2425:13	12	return ( 0 ) ;
KEYWORD	2425:4	2425:4	13	return
LEAF_NODE	2425:4	2425:4	14	return
DESTINATION	2425:10	2425:10	13	( 0 )
EXPR	2425:10	2425:12	14	( 0 )
LEAF_NODE	2425:10	2425:10	15	(
FIELD	2425:11	2425:11	15	0
LEAF_NODE	2425:11	2425:11	16	0
LEAF_NODE	2425:12	2425:12	15	)
LEAF_NODE	2425:13	2425:13	13	;
LEAF_NODE	2427:3	2427:3	11	}
LEAF_NODE	2428:2	2428:2	8	}
SELECTION	2431:2	2431:48	6	
KEYWORD	2431:2	2431:2	7	if
LEAF_NODE	2431:2	2431:2	8	if
LEAF_NODE	2431:4	2431:4	7	(
CONDITION	2431:5	2431:5	7	t2p -> tiff_compression == COMPRESSION_JPEG
EXPR	2431:5	2431:30	8	t2p -> tiff_compression == COMPRESSION_JPEG
FIELD	2431:5	2431:10	9	t2p -> tiff_compression
LEAF_NODE	2431:5	2431:5	10	t2p
LEAF_NODE	2431:8	2431:8	10	->
LEAF_NODE	2431:10	2431:10	10	tiff_compression
EQ_OPERATOR	2431:27	2431:27	9	==
LEAF_NODE	2431:27	2431:27	10	==
FIELD	2431:30	2431:30	9	COMPRESSION_JPEG
LEAF_NODE	2431:30	2431:30	10	COMPRESSION_JPEG
LEAF_NODE	2431:46	2431:46	7	)
STATEMENTS	2431:48	2491:2	7	
LEAF_NODE	2431:48	2431:48	8	{
STATEMENTS	2432:3	2490:23	8	
SIMPLE_DECL	2432:3	2432:19	9	uint32 count ; count = 0 ;
VAR_DECL	2432:3	2432:10	10	uint32 count ; count = 0
TYPE	2432:3	2432:3	11	uint32
TYPE_NAME	2432:3	2432:3	12	uint32
LEAF_NODE	2432:3	2432:3	13	uint32
NAME	2432:10	2432:10	11	count
LEAF_NODE	2432:10	2432:10	12	count
LEAF_NODE	0:0	0:0	11	;
INIT	2432:10	2432:10	11	count = 0
ASSIGN	2432:10	2432:18	12	count = 0
LVAL	2432:10	2432:10	13	count
NAME	2432:10	2432:10	14	count
LEAF_NODE	2432:10	2432:10	15	count
ASSIGN_OP	2432:16	2432:16	13	=
LEAF_NODE	2432:16	2432:16	14	=
RVAL	2432:18	2432:18	13	0
FIELD	2432:18	2432:18	14	0
LEAF_NODE	2432:18	2432:18	15	0
LEAF_NODE	2432:19	2432:19	10	;
EXPR_STATEMENT	2433:3	2434:35	9	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2433:3	2433:3	10	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2433:3	2433:12	11	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2433:3	2433:3	12	buffer
FIELD	2433:3	2433:3	13	buffer
LEAF_NODE	2433:3	2433:3	14	buffer
ASSIGN_OP	2433:10	2433:10	12	=
LEAF_NODE	2433:10	2433:10	13	=
RVAL	2433:12	2434:4	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2433:12	2433:12	13	(
TYPE_NAME	2433:13	2433:22	13	unsigned char
LEAF_NODE	2433:13	2433:13	14	unsigned
LEAF_NODE	2433:22	2433:22	14	char
LEAF_NODE	2433:26	2433:26	13	*
LEAF_NODE	2433:27	2433:27	13	)
FUNCTION_CALL	2434:4	2434:34	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2434:4	2434:4	14	_TIFFmalloc
LEAF_NODE	2434:4	2434:4	15	_TIFFmalloc
LEAF_NODE	2434:15	2434:15	14	(
ARGUMENT	2434:16	2434:16	14	t2p -> tiff_datasize
FIELD	2434:16	2434:21	15	t2p -> tiff_datasize
LEAF_NODE	2434:16	2434:16	16	t2p
LEAF_NODE	2434:19	2434:19	16	->
LEAF_NODE	2434:21	2434:21	16	tiff_datasize
LEAF_NODE	2434:34	2434:34	14	)
LEAF_NODE	2434:35	2434:35	10	;
SELECTION	2435:3	2435:19	9	
KEYWORD	2435:3	2435:3	10	if
LEAF_NODE	2435:3	2435:3	11	if
LEAF_NODE	2435:5	2435:5	10	(
CONDITION	2435:6	2435:6	10	buffer == NULL
EXPR	2435:6	2435:14	11	buffer == NULL
FIELD	2435:6	2435:6	12	buffer
LEAF_NODE	2435:6	2435:6	13	buffer
EQ_OPERATOR	2435:12	2435:12	12	==
LEAF_NODE	2435:12	2435:12	13	==
FIELD	2435:14	2435:14	12	NULL
LEAF_NODE	2435:14	2435:14	13	NULL
LEAF_NODE	2435:18	2435:18	10	)
STATEMENTS	2435:19	2442:3	10	
LEAF_NODE	2435:19	2435:19	11	{
STATEMENTS	2436:4	2441:4	11	
EXPR_STATEMENT	2436:4	2439:25	12	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) ) ;
EXPR	2436:4	2436:4	13	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
FUNCTION_CALL	2436:4	2439:24	14	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
CALLEE	2436:4	2436:4	15	TIFFError
LEAF_NODE	2436:4	2436:4	16	TIFFError
LEAF_NODE	2436:13	2436:13	15	(
ARGUMENT	2436:14	2436:14	15	TIFF2PDF_MODULE
FIELD	2436:14	2436:14	16	TIFF2PDF_MODULE
LEAF_NODE	2436:14	2436:14	17	TIFF2PDF_MODULE
LEAF_NODE	2436:29	2436:29	15	,
ARGUMENT	2437:1	2437:1	15	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2437:1	2437:1	16	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2437:1	2437:1	17	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2437:69	2437:69	15	,
ARGUMENT	2438:5	2438:21	15	( unsigned long ) t2p -> tiff_datasize
LEAF_NODE	2438:5	2438:5	16	(
TYPE_NAME	2438:6	2438:15	16	unsigned long
LEAF_NODE	2438:6	2438:6	17	unsigned
LEAF_NODE	2438:15	2438:15	17	long
LEAF_NODE	2438:19	2438:19	16	)
FIELD	2438:21	2438:26	16	t2p -> tiff_datasize
LEAF_NODE	2438:21	2438:21	17	t2p
LEAF_NODE	2438:24	2438:24	17	->
LEAF_NODE	2438:26	2438:26	17	tiff_datasize
LEAF_NODE	2438:39	2438:39	15	,
ARGUMENT	2439:5	2439:5	15	TIFFFileName ( input )
FUNCTION_CALL	2439:5	2439:23	16	TIFFFileName ( input )
CALLEE	2439:5	2439:5	17	TIFFFileName
LEAF_NODE	2439:5	2439:5	18	TIFFFileName
LEAF_NODE	2439:17	2439:17	17	(
ARGUMENT	2439:18	2439:18	17	input
FIELD	2439:18	2439:18	18	input
LEAF_NODE	2439:18	2439:18	19	input
LEAF_NODE	2439:23	2439:23	17	)
LEAF_NODE	2439:24	2439:24	15	)
LEAF_NODE	2439:25	2439:25	13	;
EXPR_STATEMENT	2440:4	2440:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2440:4	2440:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2440:4	2440:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2440:4	2440:4	15	t2p -> t2p_error
FIELD	2440:4	2440:9	16	t2p -> t2p_error
LEAF_NODE	2440:4	2440:4	17	t2p
LEAF_NODE	2440:7	2440:7	17	->
LEAF_NODE	2440:9	2440:9	17	t2p_error
ASSIGN_OP	2440:19	2440:19	15	=
LEAF_NODE	2440:19	2440:19	16	=
RVAL	2440:21	2440:21	15	T2P_ERR_ERROR
FIELD	2440:21	2440:21	16	T2P_ERR_ERROR
LEAF_NODE	2440:21	2440:21	17	T2P_ERR_ERROR
LEAF_NODE	2440:34	2440:34	13	;
JUMP_STATEMENT	2441:4	2441:13	12	return ( 0 ) ;
KEYWORD	2441:4	2441:4	13	return
LEAF_NODE	2441:4	2441:4	14	return
DESTINATION	2441:10	2441:10	13	( 0 )
EXPR	2441:10	2441:12	14	( 0 )
LEAF_NODE	2441:10	2441:10	15	(
FIELD	2441:11	2441:11	15	0
LEAF_NODE	2441:11	2441:11	16	0
LEAF_NODE	2441:12	2441:12	15	)
LEAF_NODE	2441:13	2441:13	13	;
LEAF_NODE	2442:3	2442:3	11	}
EXPR_STATEMENT	2443:24	2443:61	9	memset ( buffer , 0 , t2p -> tiff_datasize ) ;
EXPR	2443:24	2443:24	10	memset ( buffer , 0 , t2p -> tiff_datasize )
FUNCTION_CALL	2443:24	2443:60	11	memset ( buffer , 0 , t2p -> tiff_datasize )
CALLEE	2443:24	2443:24	12	memset
LEAF_NODE	2443:24	2443:24	13	memset
LEAF_NODE	2443:30	2443:30	12	(
ARGUMENT	2443:31	2443:31	12	buffer
FIELD	2443:31	2443:31	13	buffer
LEAF_NODE	2443:31	2443:31	14	buffer
LEAF_NODE	2443:37	2443:37	12	,
ARGUMENT	2443:39	2443:39	12	0
FIELD	2443:39	2443:39	13	0
LEAF_NODE	2443:39	2443:39	14	0
LEAF_NODE	2443:40	2443:40	12	,
ARGUMENT	2443:42	2443:42	12	t2p -> tiff_datasize
FIELD	2443:42	2443:47	13	t2p -> tiff_datasize
LEAF_NODE	2443:42	2443:42	14	t2p
LEAF_NODE	2443:45	2443:45	14	->
LEAF_NODE	2443:47	2443:47	14	tiff_datasize
LEAF_NODE	2443:60	2443:60	12	)
LEAF_NODE	2443:61	2443:61	10	;
SELECTION	2444:3	2444:67	9	
KEYWORD	2444:3	2444:3	10	if
LEAF_NODE	2444:3	2444:3	11	if
LEAF_NODE	2444:6	2444:6	10	(
CONDITION	2444:7	2444:7	10	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt ) != 0
EXPR	2444:7	2444:64	11	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt ) != 0
FUNCTION_CALL	2444:7	2444:59	12	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt )
CALLEE	2444:7	2444:7	13	TIFFGetField
LEAF_NODE	2444:7	2444:7	14	TIFFGetField
LEAF_NODE	2444:19	2444:19	13	(
ARGUMENT	2444:20	2444:20	13	input
FIELD	2444:20	2444:20	14	input
LEAF_NODE	2444:20	2444:20	15	input
LEAF_NODE	2444:25	2444:25	13	,
ARGUMENT	2444:27	2444:27	13	TIFFTAG_JPEGTABLES
FIELD	2444:27	2444:27	14	TIFFTAG_JPEGTABLES
LEAF_NODE	2444:27	2444:27	15	TIFFTAG_JPEGTABLES
LEAF_NODE	2444:45	2444:45	13	,
ARGUMENT	2444:47	2444:47	13	& count
UNARY_EXPR	2444:47	2444:48	14	& count
UNARY_OPERATOR	2444:47	2444:47	15	&
LEAF_NODE	2444:47	2444:47	16	&
FIELD	2444:48	2444:48	15	count
LEAF_NODE	2444:48	2444:48	16	count
LEAF_NODE	2444:53	2444:53	13	,
ARGUMENT	2444:55	2444:55	13	& jpt
UNARY_EXPR	2444:55	2444:56	14	& jpt
UNARY_OPERATOR	2444:55	2444:55	15	&
LEAF_NODE	2444:55	2444:55	16	&
FIELD	2444:56	2444:56	15	jpt
LEAF_NODE	2444:56	2444:56	16	jpt
LEAF_NODE	2444:59	2444:59	13	)
EQ_OPERATOR	2444:61	2444:61	12	!=
LEAF_NODE	2444:61	2444:61	13	!=
FIELD	2444:64	2444:64	12	0
LEAF_NODE	2444:64	2444:64	13	0
LEAF_NODE	2444:65	2444:65	10	)
STATEMENTS	2444:67	2449:3	10	
LEAF_NODE	2444:67	2444:67	11	{
STATEMENTS	2445:4	2445:4	11	
SELECTION	2445:4	2445:18	12	
KEYWORD	2445:4	2445:4	13	if
LEAF_NODE	2445:4	2445:4	14	if
LEAF_NODE	2445:6	2445:6	13	(
CONDITION	2445:7	2445:7	13	count > 4
EXPR	2445:7	2445:15	14	count > 4
FIELD	2445:7	2445:7	15	count
LEAF_NODE	2445:7	2445:7	16	count
REL_OPERATOR	2445:13	2445:13	15	>
LEAF_NODE	2445:13	2445:13	16	>
FIELD	2445:15	2445:15	15	4
LEAF_NODE	2445:15	2445:15	16	4
LEAF_NODE	2445:16	2445:16	13	)
STATEMENTS	2445:18	2448:4	13	
LEAF_NODE	2445:18	2445:18	14	{
STATEMENTS	2446:5	2447:5	14	
EXPR_STATEMENT	2446:5	2446:36	15	_TIFFmemcpy ( buffer , jpt , count ) ;
EXPR	2446:5	2446:5	16	_TIFFmemcpy ( buffer , jpt , count )
FUNCTION_CALL	2446:5	2446:35	17	_TIFFmemcpy ( buffer , jpt , count )
CALLEE	2446:5	2446:5	18	_TIFFmemcpy
LEAF_NODE	2446:5	2446:5	19	_TIFFmemcpy
LEAF_NODE	2446:16	2446:16	18	(
ARGUMENT	2446:17	2446:17	18	buffer
FIELD	2446:17	2446:17	19	buffer
LEAF_NODE	2446:17	2446:17	20	buffer
LEAF_NODE	2446:23	2446:23	18	,
ARGUMENT	2446:25	2446:25	18	jpt
FIELD	2446:25	2446:25	19	jpt
LEAF_NODE	2446:25	2446:25	20	jpt
LEAF_NODE	2446:28	2446:28	18	,
ARGUMENT	2446:30	2446:30	18	count
FIELD	2446:30	2446:30	19	count
LEAF_NODE	2446:30	2446:30	20	count
LEAF_NODE	2446:35	2446:35	18	)
LEAF_NODE	2446:36	2446:36	16	;
EXPR_STATEMENT	2447:5	2447:30	15	bufferoffset += count - 2 ;
EXPR	2447:5	2447:5	16	bufferoffset += count - 2
ASSIGN	2447:5	2447:21	17	bufferoffset += count - 2
LVAL	2447:5	2447:5	18	bufferoffset
FIELD	2447:5	2447:5	19	bufferoffset
LEAF_NODE	2447:5	2447:5	20	bufferoffset
ASSIGN_OP	2447:18	2447:18	18	+=
LEAF_NODE	2447:18	2447:18	19	+=
RVAL	2447:21	2447:29	18	count - 2
FIELD	2447:21	2447:21	19	count
LEAF_NODE	2447:21	2447:21	20	count
LEAF_NODE	2447:27	2447:27	19	-
FIELD	2447:29	2447:29	19	2
LEAF_NODE	2447:29	2447:29	20	2
LEAF_NODE	2447:30	2447:30	16	;
LEAF_NODE	2448:4	2448:4	14	}
LEAF_NODE	2449:3	2449:3	11	}
EXPR_STATEMENT	2450:3	2450:39	9	stripcount = TIFFNumberOfStrips ( input ) ;
EXPR	2450:3	2450:3	10	stripcount = TIFFNumberOfStrips ( input )
ASSIGN	2450:3	2450:14	11	stripcount = TIFFNumberOfStrips ( input )
LVAL	2450:3	2450:3	12	stripcount
FIELD	2450:3	2450:3	13	stripcount
LEAF_NODE	2450:3	2450:3	14	stripcount
ASSIGN_OP	2450:13	2450:13	12	=
LEAF_NODE	2450:13	2450:13	13	=
RVAL	2450:14	2450:14	12	TIFFNumberOfStrips ( input )
FUNCTION_CALL	2450:14	2450:38	13	TIFFNumberOfStrips ( input )
CALLEE	2450:14	2450:14	14	TIFFNumberOfStrips
LEAF_NODE	2450:14	2450:14	15	TIFFNumberOfStrips
LEAF_NODE	2450:32	2450:32	14	(
ARGUMENT	2450:33	2450:33	14	input
FIELD	2450:33	2450:33	15	input
LEAF_NODE	2450:33	2450:33	16	input
LEAF_NODE	2450:38	2450:38	14	)
LEAF_NODE	2450:39	2450:39	10	;
EXPR_STATEMENT	2451:3	2451:53	9	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc ) ;
EXPR	2451:3	2451:3	10	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
FUNCTION_CALL	2451:3	2451:52	11	TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc )
CALLEE	2451:3	2451:3	12	TIFFGetField
LEAF_NODE	2451:3	2451:3	13	TIFFGetField
LEAF_NODE	2451:15	2451:15	12	(
ARGUMENT	2451:16	2451:16	12	input
FIELD	2451:16	2451:16	13	input
LEAF_NODE	2451:16	2451:16	14	input
LEAF_NODE	2451:21	2451:21	12	,
ARGUMENT	2451:23	2451:23	12	TIFFTAG_STRIPBYTECOUNTS
FIELD	2451:23	2451:23	13	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2451:23	2451:23	14	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	2451:46	2451:46	12	,
ARGUMENT	2451:48	2451:48	12	& sbc
UNARY_EXPR	2451:48	2451:49	13	& sbc
UNARY_OPERATOR	2451:48	2451:48	14	&
LEAF_NODE	2451:48	2451:48	15	&
FIELD	2451:49	2451:49	14	sbc
LEAF_NODE	2451:49	2451:49	15	sbc
LEAF_NODE	2451:52	2451:52	12	)
LEAF_NODE	2451:53	2451:53	10	;
ITERATION	2452:3	2452:28	9	
KEYWORD	2452:3	2452:3	10	for
LEAF_NODE	2452:3	2452:3	11	for
LEAF_NODE	2452:6	2452:6	10	(
FOR_INIT	2452:7	2452:10	10	i = 0 ;
EXPR	2452:7	2452:7	11	i = 0
ASSIGN	2452:7	2452:9	12	i = 0
LVAL	2452:7	2452:7	13	i
FIELD	2452:7	2452:7	14	i
LEAF_NODE	2452:7	2452:7	15	i
ASSIGN_OP	2452:8	2452:8	13	=
LEAF_NODE	2452:8	2452:8	14	=
RVAL	2452:9	2452:9	13	0
FIELD	2452:9	2452:9	14	0
LEAF_NODE	2452:9	2452:9	15	0
LEAF_NODE	2452:10	2452:10	11	;
CONDITION	2452:11	2452:11	10	i < stripcount
EXPR	2452:11	2452:13	11	i < stripcount
FIELD	2452:11	2452:11	12	i
LEAF_NODE	2452:11	2452:11	13	i
REL_OPERATOR	2452:12	2452:12	12	<
LEAF_NODE	2452:12	2452:12	13	<
FIELD	2452:13	2452:13	12	stripcount
LEAF_NODE	2452:13	2452:13	13	stripcount
LEAF_NODE	2452:23	2452:23	10	;
FOR_EXPR	2452:24	2452:24	10	i ++
EXPR	2452:24	2452:24	11	i ++
FIELD	2452:24	2452:25	12	i ++
LEAF_NODE	2452:24	2452:24	13	i
LEAF_NODE	2452:25	2452:25	13	++
LEAF_NODE	2452:27	2452:27	10	)
STATEMENTS	2452:28	2454:3	10	
LEAF_NODE	2452:28	2452:28	11	{
STATEMENTS	2453:4	2453:4	11	
SELECTION	2453:4	2453:31	12	
KEYWORD	2453:4	2453:4	13	if
LEAF_NODE	2453:4	2453:4	14	if
LEAF_NODE	2453:6	2453:6	13	(
CONDITION	2453:7	2453:7	13	sbc [ i ] > max_striplength
EXPR	2453:7	2453:14	14	sbc [ i ] > max_striplength
FIELD	2453:7	2453:12	15	sbc [ i ]
LEAF_NODE	2453:7	2453:7	16	sbc
LEAF_NODE	2453:10	2453:10	16	[
EXPR	2453:11	2453:11	16	i
FIELD	2453:11	2453:11	17	i
LEAF_NODE	2453:11	2453:11	18	i
LEAF_NODE	2453:12	2453:12	16	]
REL_OPERATOR	2453:13	2453:13	15	>
LEAF_NODE	2453:13	2453:13	16	>
FIELD	2453:14	2453:14	15	max_striplength
LEAF_NODE	2453:14	2453:14	16	max_striplength
LEAF_NODE	2453:29	2453:29	13	)
STATEMENTS	2453:31	2453:31	13	
EXPR_STATEMENT	2453:31	2453:53	14	max_striplength = sbc [ i ] ;
EXPR	2453:31	2453:31	15	max_striplength = sbc [ i ]
ASSIGN	2453:31	2453:47	16	max_striplength = sbc [ i ]
LVAL	2453:31	2453:31	17	max_striplength
FIELD	2453:31	2453:31	18	max_striplength
LEAF_NODE	2453:31	2453:31	19	max_striplength
ASSIGN_OP	2453:46	2453:46	17	=
LEAF_NODE	2453:46	2453:46	18	=
RVAL	2453:47	2453:47	17	sbc [ i ]
FIELD	2453:47	2453:52	18	sbc [ i ]
LEAF_NODE	2453:47	2453:47	19	sbc
LEAF_NODE	2453:50	2453:50	19	[
EXPR	2453:51	2453:51	19	i
FIELD	2453:51	2453:51	20	i
LEAF_NODE	2453:51	2453:51	21	i
LEAF_NODE	2453:52	2453:52	19	]
LEAF_NODE	2453:53	2453:53	15	;
LEAF_NODE	2454:3	2454:3	11	}
EXPR_STATEMENT	2455:3	2456:32	9	stripbuffer = ( unsigned char * ) _TIFFmalloc ( max_striplength ) ;
EXPR	2455:3	2455:3	10	stripbuffer = ( unsigned char * ) _TIFFmalloc ( max_striplength )
ASSIGN	2455:3	2455:17	11	stripbuffer = ( unsigned char * ) _TIFFmalloc ( max_striplength )
LVAL	2455:3	2455:3	12	stripbuffer
FIELD	2455:3	2455:3	13	stripbuffer
LEAF_NODE	2455:3	2455:3	14	stripbuffer
ASSIGN_OP	2455:15	2455:15	12	=
LEAF_NODE	2455:15	2455:15	13	=
RVAL	2455:17	2456:4	12	( unsigned char * ) _TIFFmalloc ( max_striplength )
LEAF_NODE	2455:17	2455:17	13	(
TYPE_NAME	2455:18	2455:27	13	unsigned char
LEAF_NODE	2455:18	2455:18	14	unsigned
LEAF_NODE	2455:27	2455:27	14	char
LEAF_NODE	2455:31	2455:31	13	*
LEAF_NODE	2455:32	2455:32	13	)
FUNCTION_CALL	2456:4	2456:31	13	_TIFFmalloc ( max_striplength )
CALLEE	2456:4	2456:4	14	_TIFFmalloc
LEAF_NODE	2456:4	2456:4	15	_TIFFmalloc
LEAF_NODE	2456:15	2456:15	14	(
ARGUMENT	2456:16	2456:16	14	max_striplength
FIELD	2456:16	2456:16	15	max_striplength
LEAF_NODE	2456:16	2456:16	16	max_striplength
LEAF_NODE	2456:31	2456:31	14	)
LEAF_NODE	2456:32	2456:32	10	;
SELECTION	2457:3	2457:24	9	
KEYWORD	2457:3	2457:3	10	if
LEAF_NODE	2457:3	2457:3	11	if
LEAF_NODE	2457:5	2457:5	10	(
CONDITION	2457:6	2457:6	10	stripbuffer == NULL
EXPR	2457:6	2457:19	11	stripbuffer == NULL
FIELD	2457:6	2457:6	12	stripbuffer
LEAF_NODE	2457:6	2457:6	13	stripbuffer
EQ_OPERATOR	2457:17	2457:17	12	==
LEAF_NODE	2457:17	2457:17	13	==
FIELD	2457:19	2457:19	12	NULL
LEAF_NODE	2457:19	2457:19	13	NULL
LEAF_NODE	2457:23	2457:23	10	)
STATEMENTS	2457:24	2465:3	10	
LEAF_NODE	2457:24	2457:24	11	{
STATEMENTS	2458:4	2464:4	11	
EXPR_STATEMENT	2458:4	2461:25	12	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s" , max_striplength , TIFFFileName ( input ) ) ;
EXPR	2458:4	2458:4	13	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s" , max_striplength , TIFFFileName ( input ) )
FUNCTION_CALL	2458:4	2461:24	14	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s" , max_striplength , TIFFFileName ( input ) )
CALLEE	2458:4	2458:4	15	TIFFError
LEAF_NODE	2458:4	2458:4	16	TIFFError
LEAF_NODE	2458:13	2458:13	15	(
ARGUMENT	2458:14	2458:14	15	TIFF2PDF_MODULE
FIELD	2458:14	2458:14	16	TIFF2PDF_MODULE
LEAF_NODE	2458:14	2458:14	17	TIFF2PDF_MODULE
LEAF_NODE	2458:29	2458:29	15	,
ARGUMENT	2459:1	2459:1	15	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2459:1	2459:1	16	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2459:1	2459:1	17	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2459:68	2459:68	15	,
ARGUMENT	2460:5	2460:5	15	max_striplength
FIELD	2460:5	2460:5	16	max_striplength
LEAF_NODE	2460:5	2460:5	17	max_striplength
LEAF_NODE	2460:20	2460:20	15	,
ARGUMENT	2461:5	2461:5	15	TIFFFileName ( input )
FUNCTION_CALL	2461:5	2461:23	16	TIFFFileName ( input )
CALLEE	2461:5	2461:5	17	TIFFFileName
LEAF_NODE	2461:5	2461:5	18	TIFFFileName
LEAF_NODE	2461:17	2461:17	17	(
ARGUMENT	2461:18	2461:18	17	input
FIELD	2461:18	2461:18	18	input
LEAF_NODE	2461:18	2461:18	19	input
LEAF_NODE	2461:23	2461:23	17	)
LEAF_NODE	2461:24	2461:24	15	)
LEAF_NODE	2461:25	2461:25	13	;
EXPR_STATEMENT	2462:4	2462:21	12	_TIFFfree ( buffer ) ;
EXPR	2462:4	2462:4	13	_TIFFfree ( buffer )
FUNCTION_CALL	2462:4	2462:20	14	_TIFFfree ( buffer )
CALLEE	2462:4	2462:4	15	_TIFFfree
LEAF_NODE	2462:4	2462:4	16	_TIFFfree
LEAF_NODE	2462:13	2462:13	15	(
ARGUMENT	2462:14	2462:14	15	buffer
FIELD	2462:14	2462:14	16	buffer
LEAF_NODE	2462:14	2462:14	17	buffer
LEAF_NODE	2462:20	2462:20	15	)
LEAF_NODE	2462:21	2462:21	13	;
EXPR_STATEMENT	2463:4	2463:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2463:4	2463:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2463:4	2463:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2463:4	2463:4	15	t2p -> t2p_error
FIELD	2463:4	2463:9	16	t2p -> t2p_error
LEAF_NODE	2463:4	2463:4	17	t2p
LEAF_NODE	2463:7	2463:7	17	->
LEAF_NODE	2463:9	2463:9	17	t2p_error
ASSIGN_OP	2463:19	2463:19	15	=
LEAF_NODE	2463:19	2463:19	16	=
RVAL	2463:21	2463:21	15	T2P_ERR_ERROR
FIELD	2463:21	2463:21	16	T2P_ERR_ERROR
LEAF_NODE	2463:21	2463:21	17	T2P_ERR_ERROR
LEAF_NODE	2463:34	2463:34	13	;
JUMP_STATEMENT	2464:4	2464:13	12	return ( 0 ) ;
KEYWORD	2464:4	2464:4	13	return
LEAF_NODE	2464:4	2464:4	14	return
DESTINATION	2464:10	2464:10	13	( 0 )
EXPR	2464:10	2464:12	14	( 0 )
LEAF_NODE	2464:10	2464:10	15	(
FIELD	2464:11	2464:11	15	0
LEAF_NODE	2464:11	2464:11	16	0
LEAF_NODE	2464:12	2464:12	15	)
LEAF_NODE	2464:13	2464:13	13	;
LEAF_NODE	2465:3	2465:3	11	}
ITERATION	2466:3	2466:28	9	
KEYWORD	2466:3	2466:3	10	for
LEAF_NODE	2466:3	2466:3	11	for
LEAF_NODE	2466:6	2466:6	10	(
FOR_INIT	2466:7	2466:10	10	i = 0 ;
EXPR	2466:7	2466:7	11	i = 0
ASSIGN	2466:7	2466:9	12	i = 0
LVAL	2466:7	2466:7	13	i
FIELD	2466:7	2466:7	14	i
LEAF_NODE	2466:7	2466:7	15	i
ASSIGN_OP	2466:8	2466:8	13	=
LEAF_NODE	2466:8	2466:8	14	=
RVAL	2466:9	2466:9	13	0
FIELD	2466:9	2466:9	14	0
LEAF_NODE	2466:9	2466:9	15	0
LEAF_NODE	2466:10	2466:10	11	;
CONDITION	2466:11	2466:11	10	i < stripcount
EXPR	2466:11	2466:13	11	i < stripcount
FIELD	2466:11	2466:11	12	i
LEAF_NODE	2466:11	2466:11	13	i
REL_OPERATOR	2466:12	2466:12	12	<
LEAF_NODE	2466:12	2466:12	13	<
FIELD	2466:13	2466:13	12	stripcount
LEAF_NODE	2466:13	2466:13	13	stripcount
LEAF_NODE	2466:23	2466:23	10	;
FOR_EXPR	2466:24	2466:24	10	i ++
EXPR	2466:24	2466:24	11	i ++
FIELD	2466:24	2466:25	12	i ++
LEAF_NODE	2466:24	2466:24	13	i
LEAF_NODE	2466:25	2466:25	13	++
LEAF_NODE	2466:27	2466:27	10	)
STATEMENTS	2466:28	2484:3	10	
LEAF_NODE	2466:28	2466:28	11	{
STATEMENTS	2467:4	2468:4	11	
EXPR_STATEMENT	2467:4	2467:69	12	striplength = TIFFReadRawStrip ( input , i , ( tdata_t ) stripbuffer , - 1 ) ;
EXPR	2467:4	2467:4	13	striplength = TIFFReadRawStrip ( input , i , ( tdata_t ) stripbuffer , - 1 )
ASSIGN	2467:4	2467:16	14	striplength = TIFFReadRawStrip ( input , i , ( tdata_t ) stripbuffer , - 1 )
LVAL	2467:4	2467:4	15	striplength
FIELD	2467:4	2467:4	16	striplength
LEAF_NODE	2467:4	2467:4	17	striplength
ASSIGN_OP	2467:15	2467:15	15	=
LEAF_NODE	2467:15	2467:15	16	=
RVAL	2467:16	2467:16	15	TIFFReadRawStrip ( input , i , ( tdata_t ) stripbuffer , - 1 )
FUNCTION_CALL	2467:16	2467:68	16	TIFFReadRawStrip ( input , i , ( tdata_t ) stripbuffer , - 1 )
CALLEE	2467:16	2467:16	17	TIFFReadRawStrip
LEAF_NODE	2467:16	2467:16	18	TIFFReadRawStrip
LEAF_NODE	2467:32	2467:32	17	(
ARGUMENT	2467:33	2467:33	17	input
FIELD	2467:33	2467:33	18	input
LEAF_NODE	2467:33	2467:33	19	input
LEAF_NODE	2467:38	2467:38	17	,
ARGUMENT	2467:40	2467:40	17	i
FIELD	2467:40	2467:40	18	i
LEAF_NODE	2467:40	2467:40	19	i
LEAF_NODE	2467:41	2467:41	17	,
ARGUMENT	2467:43	2467:53	17	( tdata_t ) stripbuffer
LEAF_NODE	2467:43	2467:43	18	(
TYPE_NAME	2467:44	2467:44	18	tdata_t
LEAF_NODE	2467:44	2467:44	19	tdata_t
LEAF_NODE	2467:51	2467:51	18	)
FIELD	2467:53	2467:53	18	stripbuffer
LEAF_NODE	2467:53	2467:53	19	stripbuffer
LEAF_NODE	2467:64	2467:64	17	,
ARGUMENT	2467:66	2467:66	17	- 1
UNARY_EXPR	2467:66	2467:67	18	- 1
UNARY_OPERATOR	2467:66	2467:66	19	-
LEAF_NODE	2467:66	2467:66	20	-
FIELD	2467:67	2467:67	19	1
LEAF_NODE	2467:67	2467:67	20	1
LEAF_NODE	2467:68	2467:68	17	)
LEAF_NODE	2467:69	2467:69	13	;
SELECTION	2468:4	2475:23	12	
KEYWORD	2468:4	2468:4	13	if
LEAF_NODE	2468:4	2468:4	14	if
LEAF_NODE	2468:6	2468:6	13	(
CONDITION	2468:7	2468:7	13	! t2p_process_jpeg_strip ( stripbuffer , & striplength , buffer , t2p -> tiff_datasize , & bufferoffset , i , t2p -> tiff_length )
EXPR	2468:7	2468:7	14	! t2p_process_jpeg_strip ( stripbuffer , & striplength , buffer , t2p -> tiff_datasize , & bufferoffset , i , t2p -> tiff_length )
UNARY_EXPR	2468:7	2468:8	15	! t2p_process_jpeg_strip ( stripbuffer , & striplength , buffer , t2p -> tiff_datasize , & bufferoffset , i , t2p -> tiff_length )
UNARY_OPERATOR	2468:7	2468:7	16	!
LEAF_NODE	2468:7	2468:7	17	!
FUNCTION_CALL	2468:8	2475:21	16	t2p_process_jpeg_strip ( stripbuffer , & striplength , buffer , t2p -> tiff_datasize , & bufferoffset , i , t2p -> tiff_length )
CALLEE	2468:8	2468:8	17	t2p_process_jpeg_strip
LEAF_NODE	2468:8	2468:8	18	t2p_process_jpeg_strip
LEAF_NODE	2468:30	2468:30	17	(
ARGUMENT	2469:5	2469:5	17	stripbuffer
FIELD	2469:5	2469:5	18	stripbuffer
LEAF_NODE	2469:5	2469:5	19	stripbuffer
LEAF_NODE	2469:16	2469:16	17	,
ARGUMENT	2470:5	2470:5	17	& striplength
UNARY_EXPR	2470:5	2470:6	18	& striplength
UNARY_OPERATOR	2470:5	2470:5	19	&
LEAF_NODE	2470:5	2470:5	20	&
FIELD	2470:6	2470:6	19	striplength
LEAF_NODE	2470:6	2470:6	20	striplength
LEAF_NODE	2470:17	2470:17	17	,
ARGUMENT	2471:5	2471:5	17	buffer
FIELD	2471:5	2471:5	18	buffer
LEAF_NODE	2471:5	2471:5	19	buffer
LEAF_NODE	2471:11	2471:11	17	,
ARGUMENT	2472:20	2472:20	17	t2p -> tiff_datasize
FIELD	2472:20	2472:25	18	t2p -> tiff_datasize
LEAF_NODE	2472:20	2472:20	19	t2p
LEAF_NODE	2472:23	2472:23	19	->
LEAF_NODE	2472:25	2472:25	19	tiff_datasize
LEAF_NODE	2472:38	2472:38	17	,
ARGUMENT	2473:5	2473:5	17	& bufferoffset
UNARY_EXPR	2473:5	2473:6	18	& bufferoffset
UNARY_OPERATOR	2473:5	2473:5	19	&
LEAF_NODE	2473:5	2473:5	20	&
FIELD	2473:6	2473:6	19	bufferoffset
LEAF_NODE	2473:6	2473:6	20	bufferoffset
LEAF_NODE	2473:18	2473:18	17	,
ARGUMENT	2474:5	2474:5	17	i
FIELD	2474:5	2474:5	18	i
LEAF_NODE	2474:5	2474:5	19	i
LEAF_NODE	2474:6	2474:6	17	,
ARGUMENT	2475:5	2475:5	17	t2p -> tiff_length
FIELD	2475:5	2475:10	18	t2p -> tiff_length
LEAF_NODE	2475:5	2475:5	19	t2p
LEAF_NODE	2475:8	2475:8	19	->
LEAF_NODE	2475:10	2475:10	19	tiff_length
LEAF_NODE	2475:21	2475:21	17	)
LEAF_NODE	2475:22	2475:22	13	)
STATEMENTS	2475:23	2483:4	13	
LEAF_NODE	2475:23	2475:23	14	{
STATEMENTS	2476:6	2482:6	14	
EXPR_STATEMENT	2476:6	2478:27	15	TIFFError ( TIFF2PDF_MODULE , "Can't process JPEG data in input file %s" , TIFFFileName ( input ) ) ;
EXPR	2476:6	2476:6	16	TIFFError ( TIFF2PDF_MODULE , "Can't process JPEG data in input file %s" , TIFFFileName ( input ) )
FUNCTION_CALL	2476:6	2478:26	17	TIFFError ( TIFF2PDF_MODULE , "Can't process JPEG data in input file %s" , TIFFFileName ( input ) )
CALLEE	2476:6	2476:6	18	TIFFError
LEAF_NODE	2476:6	2476:6	19	TIFFError
LEAF_NODE	2476:15	2476:15	18	(
ARGUMENT	2476:16	2476:16	18	TIFF2PDF_MODULE
FIELD	2476:16	2476:16	19	TIFF2PDF_MODULE
LEAF_NODE	2476:16	2476:16	20	TIFF2PDF_MODULE
LEAF_NODE	2476:31	2476:31	18	,
ARGUMENT	2477:4	2477:4	18	"Can't process JPEG data in input file %s"
FIELD	2477:4	2477:4	19	"Can't process JPEG data in input file %s"
LEAF_NODE	2477:4	2477:4	20	"Can't process JPEG data in input file %s"
LEAF_NODE	2477:46	2477:46	18	,
ARGUMENT	2478:7	2478:7	18	TIFFFileName ( input )
FUNCTION_CALL	2478:7	2478:25	19	TIFFFileName ( input )
CALLEE	2478:7	2478:7	20	TIFFFileName
LEAF_NODE	2478:7	2478:7	21	TIFFFileName
LEAF_NODE	2478:19	2478:19	20	(
ARGUMENT	2478:20	2478:20	20	input
FIELD	2478:20	2478:20	21	input
LEAF_NODE	2478:20	2478:20	22	input
LEAF_NODE	2478:25	2478:25	20	)
LEAF_NODE	2478:26	2478:26	18	)
LEAF_NODE	2478:27	2478:27	16	;
EXPR_STATEMENT	2479:6	2479:29	15	_TIFFfree ( samplebuffer ) ;
EXPR	2479:6	2479:6	16	_TIFFfree ( samplebuffer )
FUNCTION_CALL	2479:6	2479:28	17	_TIFFfree ( samplebuffer )
CALLEE	2479:6	2479:6	18	_TIFFfree
LEAF_NODE	2479:6	2479:6	19	_TIFFfree
LEAF_NODE	2479:15	2479:15	18	(
ARGUMENT	2479:16	2479:16	18	samplebuffer
FIELD	2479:16	2479:16	19	samplebuffer
LEAF_NODE	2479:16	2479:16	20	samplebuffer
LEAF_NODE	2479:28	2479:28	18	)
LEAF_NODE	2479:29	2479:29	16	;
EXPR_STATEMENT	2480:6	2480:23	15	_TIFFfree ( buffer ) ;
EXPR	2480:6	2480:6	16	_TIFFfree ( buffer )
FUNCTION_CALL	2480:6	2480:22	17	_TIFFfree ( buffer )
CALLEE	2480:6	2480:6	18	_TIFFfree
LEAF_NODE	2480:6	2480:6	19	_TIFFfree
LEAF_NODE	2480:15	2480:15	18	(
ARGUMENT	2480:16	2480:16	18	buffer
FIELD	2480:16	2480:16	19	buffer
LEAF_NODE	2480:16	2480:16	20	buffer
LEAF_NODE	2480:22	2480:22	18	)
LEAF_NODE	2480:23	2480:23	16	;
EXPR_STATEMENT	2481:6	2481:36	15	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2481:6	2481:6	16	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2481:6	2481:23	17	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2481:6	2481:6	18	t2p -> t2p_error
FIELD	2481:6	2481:11	19	t2p -> t2p_error
LEAF_NODE	2481:6	2481:6	20	t2p
LEAF_NODE	2481:9	2481:9	20	->
LEAF_NODE	2481:11	2481:11	20	t2p_error
ASSIGN_OP	2481:21	2481:21	18	=
LEAF_NODE	2481:21	2481:21	19	=
RVAL	2481:23	2481:23	18	T2P_ERR_ERROR
FIELD	2481:23	2481:23	19	T2P_ERR_ERROR
LEAF_NODE	2481:23	2481:23	20	T2P_ERR_ERROR
LEAF_NODE	2481:36	2481:36	16	;
JUMP_STATEMENT	2482:6	2482:15	15	return ( 0 ) ;
KEYWORD	2482:6	2482:6	16	return
LEAF_NODE	2482:6	2482:6	17	return
DESTINATION	2482:12	2482:12	16	( 0 )
EXPR	2482:12	2482:14	17	( 0 )
LEAF_NODE	2482:12	2482:12	18	(
FIELD	2482:13	2482:13	18	0
LEAF_NODE	2482:13	2482:13	19	0
LEAF_NODE	2482:14	2482:14	18	)
LEAF_NODE	2482:15	2482:15	16	;
LEAF_NODE	2483:4	2483:4	14	}
LEAF_NODE	2484:3	2484:3	11	}
EXPR_STATEMENT	2485:3	2485:30	9	buffer [ bufferoffset ++ ] = 0xff ;
EXPR	2485:3	2485:3	10	buffer [ bufferoffset ++ ] = 0xff
ASSIGN	2485:3	2485:26	11	buffer [ bufferoffset ++ ] = 0xff
LVAL	2485:3	2485:3	12	buffer [ bufferoffset ++ ]
FIELD	2485:3	2485:24	13	buffer [ bufferoffset ++ ]
LEAF_NODE	2485:3	2485:3	14	buffer
LEAF_NODE	2485:9	2485:9	14	[
EXPR	2485:10	2485:10	14	bufferoffset ++
FIELD	2485:10	2485:22	15	bufferoffset ++
LEAF_NODE	2485:10	2485:10	16	bufferoffset
LEAF_NODE	2485:22	2485:22	16	++
LEAF_NODE	2485:24	2485:24	14	]
ASSIGN_OP	2485:25	2485:25	12	=
LEAF_NODE	2485:25	2485:25	13	=
RVAL	2485:26	2485:26	12	0xff
FIELD	2485:26	2485:26	13	0xff
LEAF_NODE	2485:26	2485:26	14	0xff
LEAF_NODE	2485:30	2485:30	10	;
EXPR_STATEMENT	2486:3	2486:30	9	buffer [ bufferoffset ++ ] = 0xd9 ;
EXPR	2486:3	2486:3	10	buffer [ bufferoffset ++ ] = 0xd9
ASSIGN	2486:3	2486:26	11	buffer [ bufferoffset ++ ] = 0xd9
LVAL	2486:3	2486:3	12	buffer [ bufferoffset ++ ]
FIELD	2486:3	2486:24	13	buffer [ bufferoffset ++ ]
LEAF_NODE	2486:3	2486:3	14	buffer
LEAF_NODE	2486:9	2486:9	14	[
EXPR	2486:10	2486:10	14	bufferoffset ++
FIELD	2486:10	2486:22	15	bufferoffset ++
LEAF_NODE	2486:10	2486:10	16	bufferoffset
LEAF_NODE	2486:22	2486:22	16	++
LEAF_NODE	2486:24	2486:24	14	]
ASSIGN_OP	2486:25	2486:25	12	=
LEAF_NODE	2486:25	2486:25	13	=
RVAL	2486:26	2486:26	12	0xd9
FIELD	2486:26	2486:26	13	0xd9
LEAF_NODE	2486:26	2486:26	14	0xd9
LEAF_NODE	2486:30	2486:30	10	;
EXPR_STATEMENT	2487:3	2487:55	9	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset ) ;
EXPR	2487:3	2487:3	10	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset )
FUNCTION_CALL	2487:3	2487:54	11	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset )
CALLEE	2487:3	2487:3	12	t2pWriteFile
LEAF_NODE	2487:3	2487:3	13	t2pWriteFile
LEAF_NODE	2487:15	2487:15	12	(
ARGUMENT	2487:16	2487:16	12	output
FIELD	2487:16	2487:16	13	output
LEAF_NODE	2487:16	2487:16	14	output
LEAF_NODE	2487:22	2487:22	12	,
ARGUMENT	2487:24	2487:34	12	( tdata_t ) buffer
LEAF_NODE	2487:24	2487:24	13	(
TYPE_NAME	2487:25	2487:25	13	tdata_t
LEAF_NODE	2487:25	2487:25	14	tdata_t
LEAF_NODE	2487:32	2487:32	13	)
FIELD	2487:34	2487:34	13	buffer
LEAF_NODE	2487:34	2487:34	14	buffer
LEAF_NODE	2487:40	2487:40	12	,
ARGUMENT	2487:42	2487:42	12	bufferoffset
FIELD	2487:42	2487:42	13	bufferoffset
LEAF_NODE	2487:42	2487:42	14	bufferoffset
LEAF_NODE	2487:54	2487:54	12	)
LEAF_NODE	2487:55	2487:55	10	;
EXPR_STATEMENT	2488:3	2488:25	9	_TIFFfree ( stripbuffer ) ;
EXPR	2488:3	2488:3	10	_TIFFfree ( stripbuffer )
FUNCTION_CALL	2488:3	2488:24	11	_TIFFfree ( stripbuffer )
CALLEE	2488:3	2488:3	12	_TIFFfree
LEAF_NODE	2488:3	2488:3	13	_TIFFfree
LEAF_NODE	2488:12	2488:12	12	(
ARGUMENT	2488:13	2488:13	12	stripbuffer
FIELD	2488:13	2488:13	13	stripbuffer
LEAF_NODE	2488:13	2488:13	14	stripbuffer
LEAF_NODE	2488:24	2488:24	12	)
LEAF_NODE	2488:25	2488:25	10	;
EXPR_STATEMENT	2489:3	2489:20	9	_TIFFfree ( buffer ) ;
EXPR	2489:3	2489:3	10	_TIFFfree ( buffer )
FUNCTION_CALL	2489:3	2489:19	11	_TIFFfree ( buffer )
CALLEE	2489:3	2489:3	12	_TIFFfree
LEAF_NODE	2489:3	2489:3	13	_TIFFfree
LEAF_NODE	2489:12	2489:12	12	(
ARGUMENT	2489:13	2489:13	12	buffer
FIELD	2489:13	2489:13	13	buffer
LEAF_NODE	2489:13	2489:13	14	buffer
LEAF_NODE	2489:19	2489:19	12	)
LEAF_NODE	2489:20	2489:20	10	;
LEAF_NODE	2490:3	2490:3	9	return
LEAF_NODE	2490:9	2490:9	9	(
LEAF_NODE	2490:10	2490:10	9	bufferoffset
LEAF_NODE	2490:22	2490:22	9	)
LEAF_NODE	2490:23	2490:23	9	;
LEAF_NODE	2491:2	2491:2	8	}
EXPR_STATEMENT	2493:2	2493:9	6	( void ) 0 ;
EXPR	2493:2	2493:8	7	( void ) 0
LEAF_NODE	2493:2	2493:2	8	(
TYPE_NAME	2493:3	2493:3	8	void
LEAF_NODE	2493:3	2493:3	9	void
LEAF_NODE	2493:7	2493:7	8	)
FIELD	2493:8	2493:8	8	0
LEAF_NODE	2493:8	2493:8	9	0
LEAF_NODE	2493:9	2493:9	7	;
LEAF_NODE	2494:1	2494:1	5	}
SELECTION	2496:1	2496:40	3	
KEYWORD	2496:1	2496:1	4	if
LEAF_NODE	2496:1	2496:1	5	if
LEAF_NODE	2496:3	2496:3	4	(
CONDITION	2496:4	2496:4	4	t2p -> pdf_sample == T2P_SAMPLE_NOTHING
EXPR	2496:4	2496:21	5	t2p -> pdf_sample == T2P_SAMPLE_NOTHING
FIELD	2496:4	2496:9	6	t2p -> pdf_sample
LEAF_NODE	2496:4	2496:4	7	t2p
LEAF_NODE	2496:7	2496:7	7	->
LEAF_NODE	2496:9	2496:9	7	pdf_sample
EQ_OPERATOR	2496:19	2496:19	6	==
LEAF_NODE	2496:19	2496:19	7	==
FIELD	2496:21	2496:21	6	T2P_SAMPLE_NOTHING
LEAF_NODE	2496:21	2496:21	7	T2P_SAMPLE_NOTHING
LEAF_NODE	2496:39	2496:39	4	)
STATEMENTS	2496:40	2526:1	4	
LEAF_NODE	2496:40	2496:40	5	{
STATEMENTS	2497:2	2509:2	5	
EXPR_STATEMENT	2497:2	2497:59	6	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2497:2	2497:2	7	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2497:2	2497:11	8	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2497:2	2497:2	9	buffer
FIELD	2497:2	2497:2	10	buffer
LEAF_NODE	2497:2	2497:2	11	buffer
ASSIGN_OP	2497:9	2497:9	9	=
LEAF_NODE	2497:9	2497:9	10	=
RVAL	2497:11	2497:28	9	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2497:11	2497:11	10	(
TYPE_NAME	2497:12	2497:21	10	unsigned char
LEAF_NODE	2497:12	2497:12	11	unsigned
LEAF_NODE	2497:21	2497:21	11	char
LEAF_NODE	2497:25	2497:25	10	*
LEAF_NODE	2497:26	2497:26	10	)
FUNCTION_CALL	2497:28	2497:58	10	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2497:28	2497:28	11	_TIFFmalloc
LEAF_NODE	2497:28	2497:28	12	_TIFFmalloc
LEAF_NODE	2497:39	2497:39	11	(
ARGUMENT	2497:40	2497:40	11	t2p -> tiff_datasize
FIELD	2497:40	2497:45	12	t2p -> tiff_datasize
LEAF_NODE	2497:40	2497:40	13	t2p
LEAF_NODE	2497:43	2497:43	13	->
LEAF_NODE	2497:45	2497:45	13	tiff_datasize
LEAF_NODE	2497:58	2497:58	11	)
LEAF_NODE	2497:59	2497:59	7	;
SELECTION	2498:2	2498:18	6	
KEYWORD	2498:2	2498:2	7	if
LEAF_NODE	2498:2	2498:2	8	if
LEAF_NODE	2498:4	2498:4	7	(
CONDITION	2498:5	2498:5	7	buffer == NULL
EXPR	2498:5	2498:13	8	buffer == NULL
FIELD	2498:5	2498:5	9	buffer
LEAF_NODE	2498:5	2498:5	10	buffer
EQ_OPERATOR	2498:11	2498:11	9	==
LEAF_NODE	2498:11	2498:11	10	==
FIELD	2498:13	2498:13	9	NULL
LEAF_NODE	2498:13	2498:13	10	NULL
LEAF_NODE	2498:17	2498:17	7	)
STATEMENTS	2498:18	2505:2	7	
LEAF_NODE	2498:18	2498:18	8	{
STATEMENTS	2499:3	2504:3	8	
EXPR_STATEMENT	2499:3	2502:24	9	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) ) ;
EXPR	2499:3	2499:3	10	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
FUNCTION_CALL	2499:3	2502:23	11	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
CALLEE	2499:3	2499:3	12	TIFFError
LEAF_NODE	2499:3	2499:3	13	TIFFError
LEAF_NODE	2499:12	2499:12	12	(
ARGUMENT	2499:13	2499:13	12	TIFF2PDF_MODULE
FIELD	2499:13	2499:13	13	TIFF2PDF_MODULE
LEAF_NODE	2499:13	2499:13	14	TIFF2PDF_MODULE
LEAF_NODE	2499:28	2499:28	12	,
ARGUMENT	2500:1	2500:1	12	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2500:1	2500:1	13	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2500:1	2500:1	14	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2500:69	2500:69	12	,
ARGUMENT	2501:4	2501:20	12	( unsigned long ) t2p -> tiff_datasize
LEAF_NODE	2501:4	2501:4	13	(
TYPE_NAME	2501:5	2501:14	13	unsigned long
LEAF_NODE	2501:5	2501:5	14	unsigned
LEAF_NODE	2501:14	2501:14	14	long
LEAF_NODE	2501:18	2501:18	13	)
FIELD	2501:20	2501:25	13	t2p -> tiff_datasize
LEAF_NODE	2501:20	2501:20	14	t2p
LEAF_NODE	2501:23	2501:23	14	->
LEAF_NODE	2501:25	2501:25	14	tiff_datasize
LEAF_NODE	2501:38	2501:38	12	,
ARGUMENT	2502:4	2502:4	12	TIFFFileName ( input )
FUNCTION_CALL	2502:4	2502:22	13	TIFFFileName ( input )
CALLEE	2502:4	2502:4	14	TIFFFileName
LEAF_NODE	2502:4	2502:4	15	TIFFFileName
LEAF_NODE	2502:16	2502:16	14	(
ARGUMENT	2502:17	2502:17	14	input
FIELD	2502:17	2502:17	15	input
LEAF_NODE	2502:17	2502:17	16	input
LEAF_NODE	2502:22	2502:22	14	)
LEAF_NODE	2502:23	2502:23	12	)
LEAF_NODE	2502:24	2502:24	10	;
EXPR_STATEMENT	2503:3	2503:33	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2503:3	2503:3	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2503:3	2503:20	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2503:3	2503:3	12	t2p -> t2p_error
FIELD	2503:3	2503:8	13	t2p -> t2p_error
LEAF_NODE	2503:3	2503:3	14	t2p
LEAF_NODE	2503:6	2503:6	14	->
LEAF_NODE	2503:8	2503:8	14	t2p_error
ASSIGN_OP	2503:18	2503:18	12	=
LEAF_NODE	2503:18	2503:18	13	=
RVAL	2503:20	2503:20	12	T2P_ERR_ERROR
FIELD	2503:20	2503:20	13	T2P_ERR_ERROR
LEAF_NODE	2503:20	2503:20	14	T2P_ERR_ERROR
LEAF_NODE	2503:33	2503:33	10	;
JUMP_STATEMENT	2504:3	2504:12	9	return ( 0 ) ;
KEYWORD	2504:3	2504:3	10	return
LEAF_NODE	2504:3	2504:3	11	return
DESTINATION	2504:9	2504:9	10	( 0 )
EXPR	2504:9	2504:11	11	( 0 )
LEAF_NODE	2504:9	2504:9	12	(
FIELD	2504:10	2504:10	12	0
LEAF_NODE	2504:10	2504:10	13	0
LEAF_NODE	2504:11	2504:11	12	)
LEAF_NODE	2504:12	2504:12	10	;
LEAF_NODE	2505:2	2505:2	8	}
EXPR_STATEMENT	2506:16	2506:53	6	memset ( buffer , 0 , t2p -> tiff_datasize ) ;
EXPR	2506:16	2506:16	7	memset ( buffer , 0 , t2p -> tiff_datasize )
FUNCTION_CALL	2506:16	2506:52	8	memset ( buffer , 0 , t2p -> tiff_datasize )
CALLEE	2506:16	2506:16	9	memset
LEAF_NODE	2506:16	2506:16	10	memset
LEAF_NODE	2506:22	2506:22	9	(
ARGUMENT	2506:23	2506:23	9	buffer
FIELD	2506:23	2506:23	10	buffer
LEAF_NODE	2506:23	2506:23	11	buffer
LEAF_NODE	2506:29	2506:29	9	,
ARGUMENT	2506:31	2506:31	9	0
FIELD	2506:31	2506:31	10	0
LEAF_NODE	2506:31	2506:31	11	0
LEAF_NODE	2506:32	2506:32	9	,
ARGUMENT	2506:34	2506:34	9	t2p -> tiff_datasize
FIELD	2506:34	2506:39	10	t2p -> tiff_datasize
LEAF_NODE	2506:34	2506:34	11	t2p
LEAF_NODE	2506:37	2506:37	11	->
LEAF_NODE	2506:39	2506:39	11	tiff_datasize
LEAF_NODE	2506:52	2506:52	9	)
LEAF_NODE	2506:53	2506:53	7	;
EXPR_STATEMENT	2507:2	2507:32	6	stripsize = TIFFStripSize ( input ) ;
EXPR	2507:2	2507:2	7	stripsize = TIFFStripSize ( input )
ASSIGN	2507:2	2507:12	8	stripsize = TIFFStripSize ( input )
LVAL	2507:2	2507:2	9	stripsize
FIELD	2507:2	2507:2	10	stripsize
LEAF_NODE	2507:2	2507:2	11	stripsize
ASSIGN_OP	2507:11	2507:11	9	=
LEAF_NODE	2507:11	2507:11	10	=
RVAL	2507:12	2507:12	9	TIFFStripSize ( input )
FUNCTION_CALL	2507:12	2507:31	10	TIFFStripSize ( input )
CALLEE	2507:12	2507:12	11	TIFFStripSize
LEAF_NODE	2507:12	2507:12	12	TIFFStripSize
LEAF_NODE	2507:25	2507:25	11	(
ARGUMENT	2507:26	2507:26	11	input
FIELD	2507:26	2507:26	12	input
LEAF_NODE	2507:26	2507:26	13	input
LEAF_NODE	2507:31	2507:31	11	)
LEAF_NODE	2507:32	2507:32	7	;
EXPR_STATEMENT	2508:2	2508:38	6	stripcount = TIFFNumberOfStrips ( input ) ;
EXPR	2508:2	2508:2	7	stripcount = TIFFNumberOfStrips ( input )
ASSIGN	2508:2	2508:13	8	stripcount = TIFFNumberOfStrips ( input )
LVAL	2508:2	2508:2	9	stripcount
FIELD	2508:2	2508:2	10	stripcount
LEAF_NODE	2508:2	2508:2	11	stripcount
ASSIGN_OP	2508:12	2508:12	9	=
LEAF_NODE	2508:12	2508:12	10	=
RVAL	2508:13	2508:13	9	TIFFNumberOfStrips ( input )
FUNCTION_CALL	2508:13	2508:37	10	TIFFNumberOfStrips ( input )
CALLEE	2508:13	2508:13	11	TIFFNumberOfStrips
LEAF_NODE	2508:13	2508:13	12	TIFFNumberOfStrips
LEAF_NODE	2508:31	2508:31	11	(
ARGUMENT	2508:32	2508:32	11	input
FIELD	2508:32	2508:32	12	input
LEAF_NODE	2508:32	2508:32	13	input
LEAF_NODE	2508:37	2508:37	11	)
LEAF_NODE	2508:38	2508:38	7	;
ITERATION	2509:2	2509:27	6	
KEYWORD	2509:2	2509:2	7	for
LEAF_NODE	2509:2	2509:2	8	for
LEAF_NODE	2509:5	2509:5	7	(
FOR_INIT	2509:6	2509:9	7	i = 0 ;
EXPR	2509:6	2509:6	8	i = 0
ASSIGN	2509:6	2509:8	9	i = 0
LVAL	2509:6	2509:6	10	i
FIELD	2509:6	2509:6	11	i
LEAF_NODE	2509:6	2509:6	12	i
ASSIGN_OP	2509:7	2509:7	10	=
LEAF_NODE	2509:7	2509:7	11	=
RVAL	2509:8	2509:8	10	0
FIELD	2509:8	2509:8	11	0
LEAF_NODE	2509:8	2509:8	12	0
LEAF_NODE	2509:9	2509:9	8	;
CONDITION	2509:10	2509:10	7	i < stripcount
EXPR	2509:10	2509:12	8	i < stripcount
FIELD	2509:10	2509:10	9	i
LEAF_NODE	2509:10	2509:10	10	i
REL_OPERATOR	2509:11	2509:11	9	<
LEAF_NODE	2509:11	2509:11	10	<
FIELD	2509:12	2509:12	9	stripcount
LEAF_NODE	2509:12	2509:12	10	stripcount
LEAF_NODE	2509:22	2509:22	7	;
FOR_EXPR	2509:23	2509:23	7	i ++
EXPR	2509:23	2509:23	8	i ++
FIELD	2509:23	2509:24	9	i ++
LEAF_NODE	2509:23	2509:23	10	i
LEAF_NODE	2509:24	2509:24	10	++
LEAF_NODE	2509:26	2509:26	7	)
STATEMENTS	2509:27	2525:2	7	
LEAF_NODE	2509:27	2509:27	8	{
STATEMENTS	2510:3	2524:3	8	
EXPR_STATEMENT	2510:3	2514:58	9	read = TIFFReadEncodedStrip ( input , i , ( tdata_t ) & buffer [ bufferoffset ] , TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) ) ;
EXPR	2510:3	2510:3	10	read = TIFFReadEncodedStrip ( input , i , ( tdata_t ) & buffer [ bufferoffset ] , TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) )
ASSIGN	2510:3	2511:4	11	read = TIFFReadEncodedStrip ( input , i , ( tdata_t ) & buffer [ bufferoffset ] , TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) )
LVAL	2510:3	2510:3	12	read
FIELD	2510:3	2510:3	13	read
LEAF_NODE	2510:3	2510:3	14	read
ASSIGN_OP	2510:8	2510:8	12	=
LEAF_NODE	2510:8	2510:8	13	=
RVAL	2511:4	2511:4	12	TIFFReadEncodedStrip ( input , i , ( tdata_t ) & buffer [ bufferoffset ] , TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) )
FUNCTION_CALL	2511:4	2514:57	13	TIFFReadEncodedStrip ( input , i , ( tdata_t ) & buffer [ bufferoffset ] , TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) )
CALLEE	2511:4	2511:4	14	TIFFReadEncodedStrip
LEAF_NODE	2511:4	2511:4	15	TIFFReadEncodedStrip
LEAF_NODE	2511:24	2511:24	14	(
ARGUMENT	2511:25	2511:25	14	input
FIELD	2511:25	2511:25	15	input
LEAF_NODE	2511:25	2511:25	16	input
LEAF_NODE	2511:30	2511:30	14	,
ARGUMENT	2512:4	2512:4	14	i
FIELD	2512:4	2512:4	15	i
LEAF_NODE	2512:4	2512:4	16	i
LEAF_NODE	2512:5	2512:5	14	,
ARGUMENT	2513:4	2513:14	14	( tdata_t ) & buffer [ bufferoffset ]
LEAF_NODE	2513:4	2513:4	15	(
TYPE_NAME	2513:5	2513:5	15	tdata_t
LEAF_NODE	2513:5	2513:5	16	tdata_t
LEAF_NODE	2513:12	2513:12	15	)
UNARY_EXPR	2513:14	2513:15	15	& buffer [ bufferoffset ]
UNARY_OPERATOR	2513:14	2513:14	16	&
LEAF_NODE	2513:14	2513:14	17	&
FIELD	2513:15	2513:34	16	buffer [ bufferoffset ]
LEAF_NODE	2513:15	2513:15	17	buffer
LEAF_NODE	2513:21	2513:21	17	[
EXPR	2513:22	2513:22	17	bufferoffset
FIELD	2513:22	2513:22	18	bufferoffset
LEAF_NODE	2513:22	2513:22	19	bufferoffset
LEAF_NODE	2513:34	2513:34	17	]
LEAF_NODE	2513:35	2513:35	14	,
ARGUMENT	2514:4	2514:4	14	TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset )
FUNCTION_CALL	2514:4	2514:56	15	TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset )
CALLEE	2514:4	2514:4	16	TIFFmin
LEAF_NODE	2514:4	2514:4	17	TIFFmin
LEAF_NODE	2514:11	2514:11	16	(
ARGUMENT	2514:12	2514:12	16	stripsize
FIELD	2514:12	2514:12	17	stripsize
LEAF_NODE	2514:12	2514:12	18	stripsize
LEAF_NODE	2514:21	2514:21	16	,
ARGUMENT	2514:23	2514:44	16	t2p -> tiff_datasize - bufferoffset
FIELD	2514:23	2514:28	17	t2p -> tiff_datasize
LEAF_NODE	2514:23	2514:23	18	t2p
LEAF_NODE	2514:26	2514:26	18	->
LEAF_NODE	2514:28	2514:28	18	tiff_datasize
LEAF_NODE	2514:42	2514:42	17	-
FIELD	2514:44	2514:44	17	bufferoffset
LEAF_NODE	2514:44	2514:44	18	bufferoffset
LEAF_NODE	2514:56	2514:56	16	)
LEAF_NODE	2514:57	2514:57	14	)
LEAF_NODE	2514:58	2514:58	10	;
SELECTION	2515:3	2515:15	9	
KEYWORD	2515:3	2515:3	10	if
LEAF_NODE	2515:3	2515:3	11	if
LEAF_NODE	2515:5	2515:5	10	(
CONDITION	2515:6	2515:6	10	read == - 1
EXPR	2515:6	2515:12	11	read == - 1
FIELD	2515:6	2515:6	12	read
LEAF_NODE	2515:6	2515:6	13	read
EQ_OPERATOR	2515:10	2515:10	12	==
LEAF_NODE	2515:10	2515:10	13	==
UNARY_EXPR	2515:12	2515:13	12	- 1
UNARY_OPERATOR	2515:12	2515:12	13	-
LEAF_NODE	2515:12	2515:12	14	-
FIELD	2515:13	2515:13	13	1
LEAF_NODE	2515:13	2515:13	14	1
LEAF_NODE	2515:14	2515:14	10	)
STATEMENTS	2515:15	2523:3	10	
LEAF_NODE	2515:15	2515:15	11	{
STATEMENTS	2516:4	2522:4	11	
EXPR_STATEMENT	2516:4	2519:25	12	TIFFError ( TIFF2PDF_MODULE , "Error on decoding strip %u of %s" , i , TIFFFileName ( input ) ) ;
EXPR	2516:4	2516:4	13	TIFFError ( TIFF2PDF_MODULE , "Error on decoding strip %u of %s" , i , TIFFFileName ( input ) )
FUNCTION_CALL	2516:4	2519:24	14	TIFFError ( TIFF2PDF_MODULE , "Error on decoding strip %u of %s" , i , TIFFFileName ( input ) )
CALLEE	2516:4	2516:4	15	TIFFError
LEAF_NODE	2516:4	2516:4	16	TIFFError
LEAF_NODE	2516:13	2516:13	15	(
ARGUMENT	2516:14	2516:14	15	TIFF2PDF_MODULE
FIELD	2516:14	2516:14	16	TIFF2PDF_MODULE
LEAF_NODE	2516:14	2516:14	17	TIFF2PDF_MODULE
LEAF_NODE	2516:29	2516:29	15	,
ARGUMENT	2517:5	2517:5	15	"Error on decoding strip %u of %s"
FIELD	2517:5	2517:5	16	"Error on decoding strip %u of %s"
LEAF_NODE	2517:5	2517:5	17	"Error on decoding strip %u of %s"
LEAF_NODE	2517:39	2517:39	15	,
ARGUMENT	2518:5	2518:5	15	i
FIELD	2518:5	2518:5	16	i
LEAF_NODE	2518:5	2518:5	17	i
LEAF_NODE	2518:6	2518:6	15	,
ARGUMENT	2519:5	2519:5	15	TIFFFileName ( input )
FUNCTION_CALL	2519:5	2519:23	16	TIFFFileName ( input )
CALLEE	2519:5	2519:5	17	TIFFFileName
LEAF_NODE	2519:5	2519:5	18	TIFFFileName
LEAF_NODE	2519:17	2519:17	17	(
ARGUMENT	2519:18	2519:18	17	input
FIELD	2519:18	2519:18	18	input
LEAF_NODE	2519:18	2519:18	19	input
LEAF_NODE	2519:23	2519:23	17	)
LEAF_NODE	2519:24	2519:24	15	)
LEAF_NODE	2519:25	2519:25	13	;
EXPR_STATEMENT	2520:4	2520:21	12	_TIFFfree ( buffer ) ;
EXPR	2520:4	2520:4	13	_TIFFfree ( buffer )
FUNCTION_CALL	2520:4	2520:20	14	_TIFFfree ( buffer )
CALLEE	2520:4	2520:4	15	_TIFFfree
LEAF_NODE	2520:4	2520:4	16	_TIFFfree
LEAF_NODE	2520:13	2520:13	15	(
ARGUMENT	2520:14	2520:14	15	buffer
FIELD	2520:14	2520:14	16	buffer
LEAF_NODE	2520:14	2520:14	17	buffer
LEAF_NODE	2520:20	2520:20	15	)
LEAF_NODE	2520:21	2520:21	13	;
EXPR_STATEMENT	2521:4	2521:32	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2521:4	2521:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2521:4	2521:19	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2521:4	2521:4	15	t2p -> t2p_error
FIELD	2521:4	2521:9	16	t2p -> t2p_error
LEAF_NODE	2521:4	2521:4	17	t2p
LEAF_NODE	2521:7	2521:7	17	->
LEAF_NODE	2521:9	2521:9	17	t2p_error
ASSIGN_OP	2521:18	2521:18	15	=
LEAF_NODE	2521:18	2521:18	16	=
RVAL	2521:19	2521:19	15	T2P_ERR_ERROR
FIELD	2521:19	2521:19	16	T2P_ERR_ERROR
LEAF_NODE	2521:19	2521:19	17	T2P_ERR_ERROR
LEAF_NODE	2521:32	2521:32	13	;
JUMP_STATEMENT	2522:4	2522:13	12	return ( 0 ) ;
KEYWORD	2522:4	2522:4	13	return
LEAF_NODE	2522:4	2522:4	14	return
DESTINATION	2522:10	2522:10	13	( 0 )
EXPR	2522:10	2522:12	14	( 0 )
LEAF_NODE	2522:10	2522:10	15	(
FIELD	2522:11	2522:11	15	0
LEAF_NODE	2522:11	2522:11	16	0
LEAF_NODE	2522:12	2522:12	15	)
LEAF_NODE	2522:13	2522:13	13	;
LEAF_NODE	2523:3	2523:3	11	}
EXPR_STATEMENT	2524:3	2524:21	9	bufferoffset += read ;
EXPR	2524:3	2524:3	10	bufferoffset += read
ASSIGN	2524:3	2524:17	11	bufferoffset += read
LVAL	2524:3	2524:3	12	bufferoffset
FIELD	2524:3	2524:3	13	bufferoffset
LEAF_NODE	2524:3	2524:3	14	bufferoffset
ASSIGN_OP	2524:15	2524:15	12	+=
LEAF_NODE	2524:15	2524:15	13	+=
RVAL	2524:17	2524:17	12	read
FIELD	2524:17	2524:17	13	read
LEAF_NODE	2524:17	2524:17	14	read
LEAF_NODE	2524:21	2524:21	10	;
LEAF_NODE	2525:2	2525:2	8	}
LEAF_NODE	2526:1	2526:1	5	}
SELECTION	2526:3	2526:8	3	
KEYWORD	2526:3	2526:3	4	else
LEAF_NODE	2526:3	2526:3	5	else
STATEMENTS	2526:8	2687:1	4	
LEAF_NODE	2526:8	2526:8	5	{
STATEMENTS	2527:2	2682:2	5	
SELECTION	2527:2	2527:60	6	
KEYWORD	2527:2	2527:2	7	if
LEAF_NODE	2527:2	2527:2	8	if
LEAF_NODE	2527:4	2527:4	7	(
CONDITION	2527:5	2527:5	7	t2p -> pdf_sample & T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
EXPR	2527:5	2527:23	8	t2p -> pdf_sample & T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
FIELD	2527:5	2527:10	9	t2p -> pdf_sample
LEAF_NODE	2527:5	2527:5	10	t2p
LEAF_NODE	2527:8	2527:8	10	->
LEAF_NODE	2527:10	2527:10	10	pdf_sample
LEAF_NODE	2527:21	2527:21	9	&
FIELD	2527:23	2527:23	9	T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
LEAF_NODE	2527:23	2527:23	10	T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
LEAF_NODE	2527:59	2527:59	7	)
STATEMENTS	2527:60	2583:2	7	
LEAF_NODE	2527:60	2527:60	8	{
STATEMENTS	2529:3	2582:3	8	
EXPR_STATEMENT	2529:3	2529:36	9	sepstripsize = TIFFStripSize ( input ) ;
EXPR	2529:3	2529:3	10	sepstripsize = TIFFStripSize ( input )
ASSIGN	2529:3	2529:16	11	sepstripsize = TIFFStripSize ( input )
LVAL	2529:3	2529:3	12	sepstripsize
FIELD	2529:3	2529:3	13	sepstripsize
LEAF_NODE	2529:3	2529:3	14	sepstripsize
ASSIGN_OP	2529:15	2529:15	12	=
LEAF_NODE	2529:15	2529:15	13	=
RVAL	2529:16	2529:16	12	TIFFStripSize ( input )
FUNCTION_CALL	2529:16	2529:35	13	TIFFStripSize ( input )
CALLEE	2529:16	2529:16	14	TIFFStripSize
LEAF_NODE	2529:16	2529:16	15	TIFFStripSize
LEAF_NODE	2529:29	2529:29	14	(
ARGUMENT	2529:30	2529:30	14	input
FIELD	2529:30	2529:30	15	input
LEAF_NODE	2529:30	2529:30	16	input
LEAF_NODE	2529:35	2529:35	14	)
LEAF_NODE	2529:36	2529:36	10	;
EXPR_STATEMENT	2530:3	2530:42	9	sepstripcount = TIFFNumberOfStrips ( input ) ;
EXPR	2530:3	2530:3	10	sepstripcount = TIFFNumberOfStrips ( input )
ASSIGN	2530:3	2530:17	11	sepstripcount = TIFFNumberOfStrips ( input )
LVAL	2530:3	2530:3	12	sepstripcount
FIELD	2530:3	2530:3	13	sepstripcount
LEAF_NODE	2530:3	2530:3	14	sepstripcount
ASSIGN_OP	2530:16	2530:16	12	=
LEAF_NODE	2530:16	2530:16	13	=
RVAL	2530:17	2530:17	12	TIFFNumberOfStrips ( input )
FUNCTION_CALL	2530:17	2530:41	13	TIFFNumberOfStrips ( input )
CALLEE	2530:17	2530:17	14	TIFFNumberOfStrips
LEAF_NODE	2530:17	2530:17	15	TIFFNumberOfStrips
LEAF_NODE	2530:35	2530:35	14	(
ARGUMENT	2530:36	2530:36	14	input
FIELD	2530:36	2530:36	15	input
LEAF_NODE	2530:36	2530:36	16	input
LEAF_NODE	2530:41	2530:41	14	)
LEAF_NODE	2530:42	2530:42	10	;
EXPR_STATEMENT	2532:3	2532:51	9	stripsize = sepstripsize * t2p -> tiff_samplesperpixel ;
EXPR	2532:3	2532:3	10	stripsize = sepstripsize * t2p -> tiff_samplesperpixel
ASSIGN	2532:3	2532:13	11	stripsize = sepstripsize * t2p -> tiff_samplesperpixel
LVAL	2532:3	2532:3	12	stripsize
FIELD	2532:3	2532:3	13	stripsize
LEAF_NODE	2532:3	2532:3	14	stripsize
ASSIGN_OP	2532:12	2532:12	12	=
LEAF_NODE	2532:12	2532:12	13	=
RVAL	2532:13	2532:26	12	sepstripsize * t2p -> tiff_samplesperpixel
FIELD	2532:13	2532:13	13	sepstripsize
LEAF_NODE	2532:13	2532:13	14	sepstripsize
LEAF_NODE	2532:25	2532:25	13	*
FIELD	2532:26	2532:31	13	t2p -> tiff_samplesperpixel
LEAF_NODE	2532:26	2532:26	14	t2p
LEAF_NODE	2532:29	2532:29	14	->
LEAF_NODE	2532:31	2532:31	14	tiff_samplesperpixel
LEAF_NODE	2532:51	2532:51	10	;
EXPR_STATEMENT	2533:3	2533:53	9	stripcount = sepstripcount / t2p -> tiff_samplesperpixel ;
EXPR	2533:3	2533:3	10	stripcount = sepstripcount / t2p -> tiff_samplesperpixel
ASSIGN	2533:3	2533:14	11	stripcount = sepstripcount / t2p -> tiff_samplesperpixel
LVAL	2533:3	2533:3	12	stripcount
FIELD	2533:3	2533:3	13	stripcount
LEAF_NODE	2533:3	2533:3	14	stripcount
ASSIGN_OP	2533:13	2533:13	12	=
LEAF_NODE	2533:13	2533:13	13	=
RVAL	2533:14	2533:28	12	sepstripcount / t2p -> tiff_samplesperpixel
FIELD	2533:14	2533:14	13	sepstripcount
LEAF_NODE	2533:14	2533:14	14	sepstripcount
LEAF_NODE	2533:27	2533:27	13	/
FIELD	2533:28	2533:33	13	t2p -> tiff_samplesperpixel
LEAF_NODE	2533:28	2533:28	14	t2p
LEAF_NODE	2533:31	2533:31	14	->
LEAF_NODE	2533:33	2533:33	14	tiff_samplesperpixel
LEAF_NODE	2533:53	2533:53	10	;
EXPR_STATEMENT	2535:3	2535:60	9	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2535:3	2535:3	10	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2535:3	2535:12	11	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2535:3	2535:3	12	buffer
FIELD	2535:3	2535:3	13	buffer
LEAF_NODE	2535:3	2535:3	14	buffer
ASSIGN_OP	2535:10	2535:10	12	=
LEAF_NODE	2535:10	2535:10	13	=
RVAL	2535:12	2535:29	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2535:12	2535:12	13	(
TYPE_NAME	2535:13	2535:22	13	unsigned char
LEAF_NODE	2535:13	2535:13	14	unsigned
LEAF_NODE	2535:22	2535:22	14	char
LEAF_NODE	2535:26	2535:26	13	*
LEAF_NODE	2535:27	2535:27	13	)
FUNCTION_CALL	2535:29	2535:59	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2535:29	2535:29	14	_TIFFmalloc
LEAF_NODE	2535:29	2535:29	15	_TIFFmalloc
LEAF_NODE	2535:40	2535:40	14	(
ARGUMENT	2535:41	2535:41	14	t2p -> tiff_datasize
FIELD	2535:41	2535:46	15	t2p -> tiff_datasize
LEAF_NODE	2535:41	2535:41	16	t2p
LEAF_NODE	2535:44	2535:44	16	->
LEAF_NODE	2535:46	2535:46	16	tiff_datasize
LEAF_NODE	2535:59	2535:59	14	)
LEAF_NODE	2535:60	2535:60	10	;
SELECTION	2536:3	2536:19	9	
KEYWORD	2536:3	2536:3	10	if
LEAF_NODE	2536:3	2536:3	11	if
LEAF_NODE	2536:5	2536:5	10	(
CONDITION	2536:6	2536:6	10	buffer == NULL
EXPR	2536:6	2536:14	11	buffer == NULL
FIELD	2536:6	2536:6	12	buffer
LEAF_NODE	2536:6	2536:6	13	buffer
EQ_OPERATOR	2536:12	2536:12	12	==
LEAF_NODE	2536:12	2536:12	13	==
FIELD	2536:14	2536:14	12	NULL
LEAF_NODE	2536:14	2536:14	13	NULL
LEAF_NODE	2536:18	2536:18	10	)
STATEMENTS	2536:19	2543:3	10	
LEAF_NODE	2536:19	2536:19	11	{
STATEMENTS	2537:4	2542:4	11	
EXPR_STATEMENT	2537:4	2540:25	12	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) ) ;
EXPR	2537:4	2537:4	13	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
FUNCTION_CALL	2537:4	2540:24	14	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
CALLEE	2537:4	2537:4	15	TIFFError
LEAF_NODE	2537:4	2537:4	16	TIFFError
LEAF_NODE	2537:13	2537:13	15	(
ARGUMENT	2537:14	2537:14	15	TIFF2PDF_MODULE
FIELD	2537:14	2537:14	16	TIFF2PDF_MODULE
LEAF_NODE	2537:14	2537:14	17	TIFF2PDF_MODULE
LEAF_NODE	2537:29	2537:29	15	,
ARGUMENT	2538:1	2538:1	15	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2538:1	2538:1	16	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2538:1	2538:1	17	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2538:69	2538:69	15	,
ARGUMENT	2539:5	2539:21	15	( unsigned long ) t2p -> tiff_datasize
LEAF_NODE	2539:5	2539:5	16	(
TYPE_NAME	2539:6	2539:15	16	unsigned long
LEAF_NODE	2539:6	2539:6	17	unsigned
LEAF_NODE	2539:15	2539:15	17	long
LEAF_NODE	2539:19	2539:19	16	)
FIELD	2539:21	2539:26	16	t2p -> tiff_datasize
LEAF_NODE	2539:21	2539:21	17	t2p
LEAF_NODE	2539:24	2539:24	17	->
LEAF_NODE	2539:26	2539:26	17	tiff_datasize
LEAF_NODE	2539:39	2539:39	15	,
ARGUMENT	2540:5	2540:5	15	TIFFFileName ( input )
FUNCTION_CALL	2540:5	2540:23	16	TIFFFileName ( input )
CALLEE	2540:5	2540:5	17	TIFFFileName
LEAF_NODE	2540:5	2540:5	18	TIFFFileName
LEAF_NODE	2540:17	2540:17	17	(
ARGUMENT	2540:18	2540:18	17	input
FIELD	2540:18	2540:18	18	input
LEAF_NODE	2540:18	2540:18	19	input
LEAF_NODE	2540:23	2540:23	17	)
LEAF_NODE	2540:24	2540:24	15	)
LEAF_NODE	2540:25	2540:25	13	;
EXPR_STATEMENT	2541:4	2541:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2541:4	2541:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2541:4	2541:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2541:4	2541:4	15	t2p -> t2p_error
FIELD	2541:4	2541:9	16	t2p -> t2p_error
LEAF_NODE	2541:4	2541:4	17	t2p
LEAF_NODE	2541:7	2541:7	17	->
LEAF_NODE	2541:9	2541:9	17	t2p_error
ASSIGN_OP	2541:19	2541:19	15	=
LEAF_NODE	2541:19	2541:19	16	=
RVAL	2541:21	2541:21	15	T2P_ERR_ERROR
FIELD	2541:21	2541:21	16	T2P_ERR_ERROR
LEAF_NODE	2541:21	2541:21	17	T2P_ERR_ERROR
LEAF_NODE	2541:34	2541:34	13	;
JUMP_STATEMENT	2542:4	2542:13	12	return ( 0 ) ;
KEYWORD	2542:4	2542:4	13	return
LEAF_NODE	2542:4	2542:4	14	return
DESTINATION	2542:10	2542:10	13	( 0 )
EXPR	2542:10	2542:12	14	( 0 )
LEAF_NODE	2542:10	2542:10	15	(
FIELD	2542:11	2542:11	15	0
LEAF_NODE	2542:11	2542:11	16	0
LEAF_NODE	2542:12	2542:12	15	)
LEAF_NODE	2542:13	2542:13	13	;
LEAF_NODE	2543:3	2543:3	11	}
EXPR_STATEMENT	2544:24	2544:61	9	memset ( buffer , 0 , t2p -> tiff_datasize ) ;
EXPR	2544:24	2544:24	10	memset ( buffer , 0 , t2p -> tiff_datasize )
FUNCTION_CALL	2544:24	2544:60	11	memset ( buffer , 0 , t2p -> tiff_datasize )
CALLEE	2544:24	2544:24	12	memset
LEAF_NODE	2544:24	2544:24	13	memset
LEAF_NODE	2544:30	2544:30	12	(
ARGUMENT	2544:31	2544:31	12	buffer
FIELD	2544:31	2544:31	13	buffer
LEAF_NODE	2544:31	2544:31	14	buffer
LEAF_NODE	2544:37	2544:37	12	,
ARGUMENT	2544:39	2544:39	12	0
FIELD	2544:39	2544:39	13	0
LEAF_NODE	2544:39	2544:39	14	0
LEAF_NODE	2544:40	2544:40	12	,
ARGUMENT	2544:42	2544:42	12	t2p -> tiff_datasize
FIELD	2544:42	2544:47	13	t2p -> tiff_datasize
LEAF_NODE	2544:42	2544:42	14	t2p
LEAF_NODE	2544:45	2544:45	14	->
LEAF_NODE	2544:47	2544:47	14	tiff_datasize
LEAF_NODE	2544:60	2544:60	12	)
LEAF_NODE	2544:61	2544:61	10	;
EXPR_STATEMENT	2545:3	2545:57	9	samplebuffer = ( unsigned char * ) _TIFFmalloc ( stripsize ) ;
EXPR	2545:3	2545:3	10	samplebuffer = ( unsigned char * ) _TIFFmalloc ( stripsize )
ASSIGN	2545:3	2545:18	11	samplebuffer = ( unsigned char * ) _TIFFmalloc ( stripsize )
LVAL	2545:3	2545:3	12	samplebuffer
FIELD	2545:3	2545:3	13	samplebuffer
LEAF_NODE	2545:3	2545:3	14	samplebuffer
ASSIGN_OP	2545:16	2545:16	12	=
LEAF_NODE	2545:16	2545:16	13	=
RVAL	2545:18	2545:35	12	( unsigned char * ) _TIFFmalloc ( stripsize )
LEAF_NODE	2545:18	2545:18	13	(
TYPE_NAME	2545:19	2545:28	13	unsigned char
LEAF_NODE	2545:19	2545:19	14	unsigned
LEAF_NODE	2545:28	2545:28	14	char
LEAF_NODE	2545:32	2545:32	13	*
LEAF_NODE	2545:33	2545:33	13	)
FUNCTION_CALL	2545:35	2545:56	13	_TIFFmalloc ( stripsize )
CALLEE	2545:35	2545:35	14	_TIFFmalloc
LEAF_NODE	2545:35	2545:35	15	_TIFFmalloc
LEAF_NODE	2545:46	2545:46	14	(
ARGUMENT	2545:47	2545:47	14	stripsize
FIELD	2545:47	2545:47	15	stripsize
LEAF_NODE	2545:47	2545:47	16	stripsize
LEAF_NODE	2545:56	2545:56	14	)
LEAF_NODE	2545:57	2545:57	10	;
SELECTION	2546:3	2546:25	9	
KEYWORD	2546:3	2546:3	10	if
LEAF_NODE	2546:3	2546:3	11	if
LEAF_NODE	2546:5	2546:5	10	(
CONDITION	2546:6	2546:6	10	samplebuffer == NULL
EXPR	2546:6	2546:20	11	samplebuffer == NULL
FIELD	2546:6	2546:6	12	samplebuffer
LEAF_NODE	2546:6	2546:6	13	samplebuffer
EQ_OPERATOR	2546:18	2546:18	12	==
LEAF_NODE	2546:18	2546:18	13	==
FIELD	2546:20	2546:20	12	NULL
LEAF_NODE	2546:20	2546:20	13	NULL
LEAF_NODE	2546:24	2546:24	10	)
STATEMENTS	2546:25	2554:3	10	
LEAF_NODE	2546:25	2546:25	11	{
STATEMENTS	2547:4	2553:4	11	
EXPR_STATEMENT	2547:4	2550:25	12	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) ) ;
EXPR	2547:4	2547:4	13	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
FUNCTION_CALL	2547:4	2550:24	14	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
CALLEE	2547:4	2547:4	15	TIFFError
LEAF_NODE	2547:4	2547:4	16	TIFFError
LEAF_NODE	2547:13	2547:13	15	(
ARGUMENT	2547:14	2547:14	15	TIFF2PDF_MODULE
FIELD	2547:14	2547:14	16	TIFF2PDF_MODULE
LEAF_NODE	2547:14	2547:14	17	TIFF2PDF_MODULE
LEAF_NODE	2547:29	2547:29	15	,
ARGUMENT	2548:1	2548:1	15	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2548:1	2548:1	16	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2548:1	2548:1	17	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2548:69	2548:69	15	,
ARGUMENT	2549:5	2549:21	15	( unsigned long ) t2p -> tiff_datasize
LEAF_NODE	2549:5	2549:5	16	(
TYPE_NAME	2549:6	2549:15	16	unsigned long
LEAF_NODE	2549:6	2549:6	17	unsigned
LEAF_NODE	2549:15	2549:15	17	long
LEAF_NODE	2549:19	2549:19	16	)
FIELD	2549:21	2549:26	16	t2p -> tiff_datasize
LEAF_NODE	2549:21	2549:21	17	t2p
LEAF_NODE	2549:24	2549:24	17	->
LEAF_NODE	2549:26	2549:26	17	tiff_datasize
LEAF_NODE	2549:39	2549:39	15	,
ARGUMENT	2550:5	2550:5	15	TIFFFileName ( input )
FUNCTION_CALL	2550:5	2550:23	16	TIFFFileName ( input )
CALLEE	2550:5	2550:5	17	TIFFFileName
LEAF_NODE	2550:5	2550:5	18	TIFFFileName
LEAF_NODE	2550:17	2550:17	17	(
ARGUMENT	2550:18	2550:18	17	input
FIELD	2550:18	2550:18	18	input
LEAF_NODE	2550:18	2550:18	19	input
LEAF_NODE	2550:23	2550:23	17	)
LEAF_NODE	2550:24	2550:24	15	)
LEAF_NODE	2550:25	2550:25	13	;
EXPR_STATEMENT	2551:4	2551:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2551:4	2551:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2551:4	2551:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2551:4	2551:4	15	t2p -> t2p_error
FIELD	2551:4	2551:9	16	t2p -> t2p_error
LEAF_NODE	2551:4	2551:4	17	t2p
LEAF_NODE	2551:7	2551:7	17	->
LEAF_NODE	2551:9	2551:9	17	t2p_error
ASSIGN_OP	2551:19	2551:19	15	=
LEAF_NODE	2551:19	2551:19	16	=
RVAL	2551:21	2551:21	15	T2P_ERR_ERROR
FIELD	2551:21	2551:21	16	T2P_ERR_ERROR
LEAF_NODE	2551:21	2551:21	17	T2P_ERR_ERROR
LEAF_NODE	2551:34	2551:34	13	;
EXPR_STATEMENT	2552:32	2552:49	12	_TIFFfree ( buffer ) ;
EXPR	2552:32	2552:32	13	_TIFFfree ( buffer )
FUNCTION_CALL	2552:32	2552:48	14	_TIFFfree ( buffer )
CALLEE	2552:32	2552:32	15	_TIFFfree
LEAF_NODE	2552:32	2552:32	16	_TIFFfree
LEAF_NODE	2552:41	2552:41	15	(
ARGUMENT	2552:42	2552:42	15	buffer
FIELD	2552:42	2552:42	16	buffer
LEAF_NODE	2552:42	2552:42	17	buffer
LEAF_NODE	2552:48	2552:48	15	)
LEAF_NODE	2552:49	2552:49	13	;
JUMP_STATEMENT	2553:4	2553:13	12	return ( 0 ) ;
KEYWORD	2553:4	2553:4	13	return
LEAF_NODE	2553:4	2553:4	14	return
DESTINATION	2553:10	2553:10	13	( 0 )
EXPR	2553:10	2553:12	14	( 0 )
LEAF_NODE	2553:10	2553:10	15	(
FIELD	2553:11	2553:11	15	0
LEAF_NODE	2553:11	2553:11	16	0
LEAF_NODE	2553:12	2553:12	15	)
LEAF_NODE	2553:13	2553:13	13	;
LEAF_NODE	2554:3	2554:3	11	}
ITERATION	2555:3	2555:28	9	
KEYWORD	2555:3	2555:3	10	for
LEAF_NODE	2555:3	2555:3	11	for
LEAF_NODE	2555:6	2555:6	10	(
FOR_INIT	2555:7	2555:10	10	i = 0 ;
EXPR	2555:7	2555:7	11	i = 0
ASSIGN	2555:7	2555:9	12	i = 0
LVAL	2555:7	2555:7	13	i
FIELD	2555:7	2555:7	14	i
LEAF_NODE	2555:7	2555:7	15	i
ASSIGN_OP	2555:8	2555:8	13	=
LEAF_NODE	2555:8	2555:8	14	=
RVAL	2555:9	2555:9	13	0
FIELD	2555:9	2555:9	14	0
LEAF_NODE	2555:9	2555:9	15	0
LEAF_NODE	2555:10	2555:10	11	;
CONDITION	2555:11	2555:11	10	i < stripcount
EXPR	2555:11	2555:13	11	i < stripcount
FIELD	2555:11	2555:11	12	i
LEAF_NODE	2555:11	2555:11	13	i
REL_OPERATOR	2555:12	2555:12	12	<
LEAF_NODE	2555:12	2555:12	13	<
FIELD	2555:13	2555:13	12	stripcount
LEAF_NODE	2555:13	2555:13	13	stripcount
LEAF_NODE	2555:23	2555:23	10	;
FOR_EXPR	2555:24	2555:24	10	i ++
EXPR	2555:24	2555:24	11	i ++
FIELD	2555:24	2555:25	12	i ++
LEAF_NODE	2555:24	2555:24	13	i
LEAF_NODE	2555:25	2555:25	13	++
LEAF_NODE	2555:27	2555:27	10	)
STATEMENTS	2555:28	2580:3	10	
LEAF_NODE	2555:28	2555:28	11	{
STATEMENTS	2556:4	2579:4	11	
EXPR_STATEMENT	2556:4	2556:24	12	samplebufferoffset = 0 ;
EXPR	2556:4	2556:4	13	samplebufferoffset = 0
ASSIGN	2556:4	2556:23	14	samplebufferoffset = 0
LVAL	2556:4	2556:4	15	samplebufferoffset
FIELD	2556:4	2556:4	16	samplebufferoffset
LEAF_NODE	2556:4	2556:4	17	samplebufferoffset
ASSIGN_OP	2556:22	2556:22	15	=
LEAF_NODE	2556:22	2556:22	16	=
RVAL	2556:23	2556:23	15	0
FIELD	2556:23	2556:23	16	0
LEAF_NODE	2556:23	2556:23	17	0
LEAF_NODE	2556:24	2556:24	13	;
ITERATION	2557:4	2557:44	12	
KEYWORD	2557:4	2557:4	13	for
LEAF_NODE	2557:4	2557:4	14	for
LEAF_NODE	2557:7	2557:7	13	(
FOR_INIT	2557:8	2557:11	13	j = 0 ;
EXPR	2557:8	2557:8	14	j = 0
ASSIGN	2557:8	2557:10	15	j = 0
LVAL	2557:8	2557:8	16	j
FIELD	2557:8	2557:8	17	j
LEAF_NODE	2557:8	2557:8	18	j
ASSIGN_OP	2557:9	2557:9	16	=
LEAF_NODE	2557:9	2557:9	17	=
RVAL	2557:10	2557:10	16	0
FIELD	2557:10	2557:10	17	0
LEAF_NODE	2557:10	2557:10	18	0
LEAF_NODE	2557:11	2557:11	14	;
CONDITION	2557:12	2557:12	13	j < t2p -> tiff_samplesperpixel
EXPR	2557:12	2557:14	14	j < t2p -> tiff_samplesperpixel
FIELD	2557:12	2557:12	15	j
LEAF_NODE	2557:12	2557:12	16	j
REL_OPERATOR	2557:13	2557:13	15	<
LEAF_NODE	2557:13	2557:13	16	<
FIELD	2557:14	2557:19	15	t2p -> tiff_samplesperpixel
LEAF_NODE	2557:14	2557:14	16	t2p
LEAF_NODE	2557:17	2557:17	16	->
LEAF_NODE	2557:19	2557:19	16	tiff_samplesperpixel
LEAF_NODE	2557:39	2557:39	13	;
FOR_EXPR	2557:40	2557:40	13	j ++
EXPR	2557:40	2557:40	14	j ++
FIELD	2557:40	2557:41	15	j ++
LEAF_NODE	2557:40	2557:40	16	j
LEAF_NODE	2557:41	2557:41	16	++
LEAF_NODE	2557:43	2557:43	13	)
STATEMENTS	2557:44	2573:4	13	
LEAF_NODE	2557:44	2557:44	14	{
STATEMENTS	2558:5	2572:5	14	
EXPR_STATEMENT	2558:5	2562:61	15	read = TIFFReadEncodedStrip ( input , i + j * stripcount , ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , TIFFmin ( sepstripsize , stripsize - samplebufferoffset ) ) ;
EXPR	2558:5	2558:5	16	read = TIFFReadEncodedStrip ( input , i + j * stripcount , ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , TIFFmin ( sepstripsize , stripsize - samplebufferoffset ) )
ASSIGN	2558:5	2559:6	17	read = TIFFReadEncodedStrip ( input , i + j * stripcount , ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , TIFFmin ( sepstripsize , stripsize - samplebufferoffset ) )
LVAL	2558:5	2558:5	18	read
FIELD	2558:5	2558:5	19	read
LEAF_NODE	2558:5	2558:5	20	read
ASSIGN_OP	2558:10	2558:10	18	=
LEAF_NODE	2558:10	2558:10	19	=
RVAL	2559:6	2559:6	18	TIFFReadEncodedStrip ( input , i + j * stripcount , ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , TIFFmin ( sepstripsize , stripsize - samplebufferoffset ) )
FUNCTION_CALL	2559:6	2562:60	19	TIFFReadEncodedStrip ( input , i + j * stripcount , ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , TIFFmin ( sepstripsize , stripsize - samplebufferoffset ) )
CALLEE	2559:6	2559:6	20	TIFFReadEncodedStrip
LEAF_NODE	2559:6	2559:6	21	TIFFReadEncodedStrip
LEAF_NODE	2559:26	2559:26	20	(
ARGUMENT	2559:27	2559:27	20	input
FIELD	2559:27	2559:27	21	input
LEAF_NODE	2559:27	2559:27	22	input
LEAF_NODE	2559:32	2559:32	20	,
ARGUMENT	2560:7	2560:13	20	i + j * stripcount
FIELD	2560:7	2560:7	21	i
LEAF_NODE	2560:7	2560:7	22	i
LEAF_NODE	2560:9	2560:9	21	+
FIELD	2560:11	2560:11	21	j
LEAF_NODE	2560:11	2560:11	22	j
LEAF_NODE	2560:12	2560:12	21	*
FIELD	2560:13	2560:13	21	stripcount
LEAF_NODE	2560:13	2560:13	22	stripcount
LEAF_NODE	2560:23	2560:23	20	,
ARGUMENT	2561:7	2561:17	20	( tdata_t ) & ( samplebuffer [ samplebufferoffset ] )
LEAF_NODE	2561:7	2561:7	21	(
TYPE_NAME	2561:8	2561:8	21	tdata_t
LEAF_NODE	2561:8	2561:8	22	tdata_t
LEAF_NODE	2561:15	2561:15	21	)
UNARY_EXPR	2561:17	2561:51	21	& ( samplebuffer [ samplebufferoffset ] )
UNARY_OPERATOR	2561:17	2561:17	22	&
LEAF_NODE	2561:17	2561:17	23	&
LEAF_NODE	2561:18	2561:18	22	(
FIELD	2561:19	2561:50	22	samplebuffer [ samplebufferoffset ]
LEAF_NODE	2561:19	2561:19	23	samplebuffer
LEAF_NODE	2561:31	2561:31	23	[
EXPR	2561:32	2561:32	23	samplebufferoffset
FIELD	2561:32	2561:32	24	samplebufferoffset
LEAF_NODE	2561:32	2561:32	25	samplebufferoffset
LEAF_NODE	2561:50	2561:50	23	]
LEAF_NODE	2561:51	2561:51	22	)
LEAF_NODE	2561:52	2561:52	20	,
ARGUMENT	2562:7	2562:7	20	TIFFmin ( sepstripsize , stripsize - samplebufferoffset )
FUNCTION_CALL	2562:7	2562:59	21	TIFFmin ( sepstripsize , stripsize - samplebufferoffset )
CALLEE	2562:7	2562:7	22	TIFFmin
LEAF_NODE	2562:7	2562:7	23	TIFFmin
LEAF_NODE	2562:14	2562:14	22	(
ARGUMENT	2562:15	2562:15	22	sepstripsize
FIELD	2562:15	2562:15	23	sepstripsize
LEAF_NODE	2562:15	2562:15	24	sepstripsize
LEAF_NODE	2562:27	2562:27	22	,
ARGUMENT	2562:29	2562:41	22	stripsize - samplebufferoffset
FIELD	2562:29	2562:29	23	stripsize
LEAF_NODE	2562:29	2562:29	24	stripsize
LEAF_NODE	2562:39	2562:39	23	-
FIELD	2562:41	2562:41	23	samplebufferoffset
LEAF_NODE	2562:41	2562:41	24	samplebufferoffset
LEAF_NODE	2562:59	2562:59	22	)
LEAF_NODE	2562:60	2562:60	20	)
LEAF_NODE	2562:61	2562:61	16	;
SELECTION	2563:5	2563:17	15	
KEYWORD	2563:5	2563:5	16	if
LEAF_NODE	2563:5	2563:5	17	if
LEAF_NODE	2563:7	2563:7	16	(
CONDITION	2563:8	2563:8	16	read == - 1
EXPR	2563:8	2563:14	17	read == - 1
FIELD	2563:8	2563:8	18	read
LEAF_NODE	2563:8	2563:8	19	read
EQ_OPERATOR	2563:12	2563:12	18	==
LEAF_NODE	2563:12	2563:12	19	==
UNARY_EXPR	2563:14	2563:15	18	- 1
UNARY_OPERATOR	2563:14	2563:14	19	-
LEAF_NODE	2563:14	2563:14	20	-
FIELD	2563:15	2563:15	19	1
LEAF_NODE	2563:15	2563:15	20	1
LEAF_NODE	2563:16	2563:16	16	)
STATEMENTS	2563:17	2571:5	16	
LEAF_NODE	2563:17	2563:17	17	{
STATEMENTS	2564:6	2570:6	17	
EXPR_STATEMENT	2564:6	2567:27	18	TIFFError ( TIFF2PDF_MODULE , "Error on decoding strip %u of %s" , i + j * stripcount , TIFFFileName ( input ) ) ;
EXPR	2564:6	2564:6	19	TIFFError ( TIFF2PDF_MODULE , "Error on decoding strip %u of %s" , i + j * stripcount , TIFFFileName ( input ) )
FUNCTION_CALL	2564:6	2567:26	20	TIFFError ( TIFF2PDF_MODULE , "Error on decoding strip %u of %s" , i + j * stripcount , TIFFFileName ( input ) )
CALLEE	2564:6	2564:6	21	TIFFError
LEAF_NODE	2564:6	2564:6	22	TIFFError
LEAF_NODE	2564:15	2564:15	21	(
ARGUMENT	2564:16	2564:16	21	TIFF2PDF_MODULE
FIELD	2564:16	2564:16	22	TIFF2PDF_MODULE
LEAF_NODE	2564:16	2564:16	23	TIFF2PDF_MODULE
LEAF_NODE	2564:31	2564:31	21	,
ARGUMENT	2565:5	2565:5	21	"Error on decoding strip %u of %s"
FIELD	2565:5	2565:5	22	"Error on decoding strip %u of %s"
LEAF_NODE	2565:5	2565:5	23	"Error on decoding strip %u of %s"
LEAF_NODE	2565:39	2565:39	21	,
ARGUMENT	2566:7	2566:13	21	i + j * stripcount
FIELD	2566:7	2566:7	22	i
LEAF_NODE	2566:7	2566:7	23	i
LEAF_NODE	2566:9	2566:9	22	+
FIELD	2566:11	2566:11	22	j
LEAF_NODE	2566:11	2566:11	23	j
LEAF_NODE	2566:12	2566:12	22	*
FIELD	2566:13	2566:13	22	stripcount
LEAF_NODE	2566:13	2566:13	23	stripcount
LEAF_NODE	2566:23	2566:23	21	,
ARGUMENT	2567:7	2567:7	21	TIFFFileName ( input )
FUNCTION_CALL	2567:7	2567:25	22	TIFFFileName ( input )
CALLEE	2567:7	2567:7	23	TIFFFileName
LEAF_NODE	2567:7	2567:7	24	TIFFFileName
LEAF_NODE	2567:19	2567:19	23	(
ARGUMENT	2567:20	2567:20	23	input
FIELD	2567:20	2567:20	24	input
LEAF_NODE	2567:20	2567:20	25	input
LEAF_NODE	2567:25	2567:25	23	)
LEAF_NODE	2567:26	2567:26	21	)
LEAF_NODE	2567:27	2567:27	19	;
EXPR_STATEMENT	2568:7	2568:24	18	_TIFFfree ( buffer ) ;
EXPR	2568:7	2568:7	19	_TIFFfree ( buffer )
FUNCTION_CALL	2568:7	2568:23	20	_TIFFfree ( buffer )
CALLEE	2568:7	2568:7	21	_TIFFfree
LEAF_NODE	2568:7	2568:7	22	_TIFFfree
LEAF_NODE	2568:16	2568:16	21	(
ARGUMENT	2568:17	2568:17	21	buffer
FIELD	2568:17	2568:17	22	buffer
LEAF_NODE	2568:17	2568:17	23	buffer
LEAF_NODE	2568:23	2568:23	21	)
LEAF_NODE	2568:24	2568:24	19	;
EXPR_STATEMENT	2569:6	2569:34	18	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2569:6	2569:6	19	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2569:6	2569:21	20	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2569:6	2569:6	21	t2p -> t2p_error
FIELD	2569:6	2569:11	22	t2p -> t2p_error
LEAF_NODE	2569:6	2569:6	23	t2p
LEAF_NODE	2569:9	2569:9	23	->
LEAF_NODE	2569:11	2569:11	23	t2p_error
ASSIGN_OP	2569:20	2569:20	21	=
LEAF_NODE	2569:20	2569:20	22	=
RVAL	2569:21	2569:21	21	T2P_ERR_ERROR
FIELD	2569:21	2569:21	22	T2P_ERR_ERROR
LEAF_NODE	2569:21	2569:21	23	T2P_ERR_ERROR
LEAF_NODE	2569:34	2569:34	19	;
JUMP_STATEMENT	2570:6	2570:15	18	return ( 0 ) ;
KEYWORD	2570:6	2570:6	19	return
LEAF_NODE	2570:6	2570:6	20	return
DESTINATION	2570:12	2570:12	19	( 0 )
EXPR	2570:12	2570:14	20	( 0 )
LEAF_NODE	2570:12	2570:12	21	(
FIELD	2570:13	2570:13	21	0
LEAF_NODE	2570:13	2570:13	22	0
LEAF_NODE	2570:14	2570:14	21	)
LEAF_NODE	2570:15	2570:15	19	;
LEAF_NODE	2571:5	2571:5	17	}
EXPR_STATEMENT	2572:5	2572:29	15	samplebufferoffset += read ;
EXPR	2572:5	2572:5	16	samplebufferoffset += read
ASSIGN	2572:5	2572:25	17	samplebufferoffset += read
LVAL	2572:5	2572:5	18	samplebufferoffset
FIELD	2572:5	2572:5	19	samplebufferoffset
LEAF_NODE	2572:5	2572:5	20	samplebufferoffset
ASSIGN_OP	2572:23	2572:23	18	+=
LEAF_NODE	2572:23	2572:23	19	+=
RVAL	2572:25	2572:25	18	read
FIELD	2572:25	2572:25	19	read
LEAF_NODE	2572:25	2572:25	20	read
LEAF_NODE	2572:29	2572:29	16	;
LEAF_NODE	2573:4	2573:4	14	}
EXPR_STATEMENT	2574:4	2578:24	12	t2p_sample_planar_separate_to_contig ( t2p , & ( buffer [ bufferoffset ] ) , samplebuffer , samplebufferoffset ) ;
EXPR	2574:4	2574:4	13	t2p_sample_planar_separate_to_contig ( t2p , & ( buffer [ bufferoffset ] ) , samplebuffer , samplebufferoffset )
FUNCTION_CALL	2574:4	2578:23	14	t2p_sample_planar_separate_to_contig ( t2p , & ( buffer [ bufferoffset ] ) , samplebuffer , samplebufferoffset )
CALLEE	2574:4	2574:4	15	t2p_sample_planar_separate_to_contig
LEAF_NODE	2574:4	2574:4	16	t2p_sample_planar_separate_to_contig
LEAF_NODE	2574:40	2574:40	15	(
ARGUMENT	2575:5	2575:5	15	t2p
FIELD	2575:5	2575:5	16	t2p
LEAF_NODE	2575:5	2575:5	17	t2p
LEAF_NODE	2575:8	2575:8	15	,
ARGUMENT	2576:5	2576:5	15	& ( buffer [ bufferoffset ] )
UNARY_EXPR	2576:5	2576:27	16	& ( buffer [ bufferoffset ] )
UNARY_OPERATOR	2576:5	2576:5	17	&
LEAF_NODE	2576:5	2576:5	18	&
LEAF_NODE	2576:6	2576:6	17	(
FIELD	2576:7	2576:26	17	buffer [ bufferoffset ]
LEAF_NODE	2576:7	2576:7	18	buffer
LEAF_NODE	2576:13	2576:13	18	[
EXPR	2576:14	2576:14	18	bufferoffset
FIELD	2576:14	2576:14	19	bufferoffset
LEAF_NODE	2576:14	2576:14	20	bufferoffset
LEAF_NODE	2576:26	2576:26	18	]
LEAF_NODE	2576:27	2576:27	17	)
LEAF_NODE	2576:28	2576:28	15	,
ARGUMENT	2577:5	2577:5	15	samplebuffer
FIELD	2577:5	2577:5	16	samplebuffer
LEAF_NODE	2577:5	2577:5	17	samplebuffer
LEAF_NODE	2577:17	2577:17	15	,
ARGUMENT	2578:5	2578:5	15	samplebufferoffset
FIELD	2578:5	2578:5	16	samplebufferoffset
LEAF_NODE	2578:5	2578:5	17	samplebufferoffset
LEAF_NODE	2578:23	2578:23	15	)
LEAF_NODE	2578:24	2578:24	13	;
EXPR_STATEMENT	2579:4	2579:36	12	bufferoffset += samplebufferoffset ;
EXPR	2579:4	2579:4	13	bufferoffset += samplebufferoffset
ASSIGN	2579:4	2579:18	14	bufferoffset += samplebufferoffset
LVAL	2579:4	2579:4	15	bufferoffset
FIELD	2579:4	2579:4	16	bufferoffset
LEAF_NODE	2579:4	2579:4	17	bufferoffset
ASSIGN_OP	2579:16	2579:16	15	+=
LEAF_NODE	2579:16	2579:16	16	+=
RVAL	2579:18	2579:18	15	samplebufferoffset
FIELD	2579:18	2579:18	16	samplebufferoffset
LEAF_NODE	2579:18	2579:18	17	samplebufferoffset
LEAF_NODE	2579:36	2579:36	13	;
LEAF_NODE	2580:3	2580:3	11	}
EXPR_STATEMENT	2581:3	2581:26	9	_TIFFfree ( samplebuffer ) ;
EXPR	2581:3	2581:3	10	_TIFFfree ( samplebuffer )
FUNCTION_CALL	2581:3	2581:25	11	_TIFFfree ( samplebuffer )
CALLEE	2581:3	2581:3	12	_TIFFfree
LEAF_NODE	2581:3	2581:3	13	_TIFFfree
LEAF_NODE	2581:12	2581:12	12	(
ARGUMENT	2581:13	2581:13	12	samplebuffer
FIELD	2581:13	2581:13	13	samplebuffer
LEAF_NODE	2581:13	2581:13	14	samplebuffer
LEAF_NODE	2581:25	2581:25	12	)
LEAF_NODE	2581:26	2581:26	10	;
JUMP_STATEMENT	2582:3	2582:17	9	goto dataready ;
KEYWORD	2582:3	2582:3	10	goto
LEAF_NODE	2582:3	2582:3	11	goto
DESTINATION	2582:8	2582:8	10	dataready
LEAF_NODE	2582:8	2582:8	11	dataready
LEAF_NODE	2582:17	2582:17	10	;
LEAF_NODE	2583:2	2583:2	8	}
EXPR_STATEMENT	2585:2	2585:59	6	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2585:2	2585:2	7	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2585:2	2585:11	8	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2585:2	2585:2	9	buffer
FIELD	2585:2	2585:2	10	buffer
LEAF_NODE	2585:2	2585:2	11	buffer
ASSIGN_OP	2585:9	2585:9	9	=
LEAF_NODE	2585:9	2585:9	10	=
RVAL	2585:11	2585:28	9	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2585:11	2585:11	10	(
TYPE_NAME	2585:12	2585:21	10	unsigned char
LEAF_NODE	2585:12	2585:12	11	unsigned
LEAF_NODE	2585:21	2585:21	11	char
LEAF_NODE	2585:25	2585:25	10	*
LEAF_NODE	2585:26	2585:26	10	)
FUNCTION_CALL	2585:28	2585:58	10	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2585:28	2585:28	11	_TIFFmalloc
LEAF_NODE	2585:28	2585:28	12	_TIFFmalloc
LEAF_NODE	2585:39	2585:39	11	(
ARGUMENT	2585:40	2585:40	11	t2p -> tiff_datasize
FIELD	2585:40	2585:45	12	t2p -> tiff_datasize
LEAF_NODE	2585:40	2585:40	13	t2p
LEAF_NODE	2585:43	2585:43	13	->
LEAF_NODE	2585:45	2585:45	13	tiff_datasize
LEAF_NODE	2585:58	2585:58	11	)
LEAF_NODE	2585:59	2585:59	7	;
SELECTION	2586:2	2586:18	6	
KEYWORD	2586:2	2586:2	7	if
LEAF_NODE	2586:2	2586:2	8	if
LEAF_NODE	2586:4	2586:4	7	(
CONDITION	2586:5	2586:5	7	buffer == NULL
EXPR	2586:5	2586:13	8	buffer == NULL
FIELD	2586:5	2586:5	9	buffer
LEAF_NODE	2586:5	2586:5	10	buffer
EQ_OPERATOR	2586:11	2586:11	9	==
LEAF_NODE	2586:11	2586:11	10	==
FIELD	2586:13	2586:13	9	NULL
LEAF_NODE	2586:13	2586:13	10	NULL
LEAF_NODE	2586:17	2586:17	7	)
STATEMENTS	2586:18	2593:2	7	
LEAF_NODE	2586:18	2586:18	8	{
STATEMENTS	2587:3	2592:3	8	
EXPR_STATEMENT	2587:3	2590:24	9	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) ) ;
EXPR	2587:3	2587:3	10	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
FUNCTION_CALL	2587:3	2590:23	11	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
CALLEE	2587:3	2587:3	12	TIFFError
LEAF_NODE	2587:3	2587:3	13	TIFFError
LEAF_NODE	2587:12	2587:12	12	(
ARGUMENT	2587:13	2587:13	12	TIFF2PDF_MODULE
FIELD	2587:13	2587:13	13	TIFF2PDF_MODULE
LEAF_NODE	2587:13	2587:13	14	TIFF2PDF_MODULE
LEAF_NODE	2587:28	2587:28	12	,
ARGUMENT	2588:1	2588:1	12	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2588:1	2588:1	13	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2588:1	2588:1	14	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2588:69	2588:69	12	,
ARGUMENT	2589:4	2589:20	12	( unsigned long ) t2p -> tiff_datasize
LEAF_NODE	2589:4	2589:4	13	(
TYPE_NAME	2589:5	2589:14	13	unsigned long
LEAF_NODE	2589:5	2589:5	14	unsigned
LEAF_NODE	2589:14	2589:14	14	long
LEAF_NODE	2589:18	2589:18	13	)
FIELD	2589:20	2589:25	13	t2p -> tiff_datasize
LEAF_NODE	2589:20	2589:20	14	t2p
LEAF_NODE	2589:23	2589:23	14	->
LEAF_NODE	2589:25	2589:25	14	tiff_datasize
LEAF_NODE	2589:38	2589:38	12	,
ARGUMENT	2590:4	2590:4	12	TIFFFileName ( input )
FUNCTION_CALL	2590:4	2590:22	13	TIFFFileName ( input )
CALLEE	2590:4	2590:4	14	TIFFFileName
LEAF_NODE	2590:4	2590:4	15	TIFFFileName
LEAF_NODE	2590:16	2590:16	14	(
ARGUMENT	2590:17	2590:17	14	input
FIELD	2590:17	2590:17	15	input
LEAF_NODE	2590:17	2590:17	16	input
LEAF_NODE	2590:22	2590:22	14	)
LEAF_NODE	2590:23	2590:23	12	)
LEAF_NODE	2590:24	2590:24	10	;
EXPR_STATEMENT	2591:3	2591:33	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2591:3	2591:3	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2591:3	2591:20	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2591:3	2591:3	12	t2p -> t2p_error
FIELD	2591:3	2591:8	13	t2p -> t2p_error
LEAF_NODE	2591:3	2591:3	14	t2p
LEAF_NODE	2591:6	2591:6	14	->
LEAF_NODE	2591:8	2591:8	14	t2p_error
ASSIGN_OP	2591:18	2591:18	12	=
LEAF_NODE	2591:18	2591:18	13	=
RVAL	2591:20	2591:20	12	T2P_ERR_ERROR
FIELD	2591:20	2591:20	13	T2P_ERR_ERROR
LEAF_NODE	2591:20	2591:20	14	T2P_ERR_ERROR
LEAF_NODE	2591:33	2591:33	10	;
JUMP_STATEMENT	2592:3	2592:12	9	return ( 0 ) ;
KEYWORD	2592:3	2592:3	10	return
LEAF_NODE	2592:3	2592:3	11	return
DESTINATION	2592:9	2592:9	10	( 0 )
EXPR	2592:9	2592:11	11	( 0 )
LEAF_NODE	2592:9	2592:9	12	(
FIELD	2592:10	2592:10	12	0
LEAF_NODE	2592:10	2592:10	13	0
LEAF_NODE	2592:11	2592:11	12	)
LEAF_NODE	2592:12	2592:12	10	;
LEAF_NODE	2593:2	2593:2	8	}
EXPR_STATEMENT	2594:16	2594:53	6	memset ( buffer , 0 , t2p -> tiff_datasize ) ;
EXPR	2594:16	2594:16	7	memset ( buffer , 0 , t2p -> tiff_datasize )
FUNCTION_CALL	2594:16	2594:52	8	memset ( buffer , 0 , t2p -> tiff_datasize )
CALLEE	2594:16	2594:16	9	memset
LEAF_NODE	2594:16	2594:16	10	memset
LEAF_NODE	2594:22	2594:22	9	(
ARGUMENT	2594:23	2594:23	9	buffer
FIELD	2594:23	2594:23	10	buffer
LEAF_NODE	2594:23	2594:23	11	buffer
LEAF_NODE	2594:29	2594:29	9	,
ARGUMENT	2594:31	2594:31	9	0
FIELD	2594:31	2594:31	10	0
LEAF_NODE	2594:31	2594:31	11	0
LEAF_NODE	2594:32	2594:32	9	,
ARGUMENT	2594:34	2594:34	9	t2p -> tiff_datasize
FIELD	2594:34	2594:39	10	t2p -> tiff_datasize
LEAF_NODE	2594:34	2594:34	11	t2p
LEAF_NODE	2594:37	2594:37	11	->
LEAF_NODE	2594:39	2594:39	11	tiff_datasize
LEAF_NODE	2594:52	2594:52	9	)
LEAF_NODE	2594:53	2594:53	7	;
EXPR_STATEMENT	2595:2	2595:32	6	stripsize = TIFFStripSize ( input ) ;
EXPR	2595:2	2595:2	7	stripsize = TIFFStripSize ( input )
ASSIGN	2595:2	2595:12	8	stripsize = TIFFStripSize ( input )
LVAL	2595:2	2595:2	9	stripsize
FIELD	2595:2	2595:2	10	stripsize
LEAF_NODE	2595:2	2595:2	11	stripsize
ASSIGN_OP	2595:11	2595:11	9	=
LEAF_NODE	2595:11	2595:11	10	=
RVAL	2595:12	2595:12	9	TIFFStripSize ( input )
FUNCTION_CALL	2595:12	2595:31	10	TIFFStripSize ( input )
CALLEE	2595:12	2595:12	11	TIFFStripSize
LEAF_NODE	2595:12	2595:12	12	TIFFStripSize
LEAF_NODE	2595:25	2595:25	11	(
ARGUMENT	2595:26	2595:26	11	input
FIELD	2595:26	2595:26	12	input
LEAF_NODE	2595:26	2595:26	13	input
LEAF_NODE	2595:31	2595:31	11	)
LEAF_NODE	2595:32	2595:32	7	;
EXPR_STATEMENT	2596:2	2596:38	6	stripcount = TIFFNumberOfStrips ( input ) ;
EXPR	2596:2	2596:2	7	stripcount = TIFFNumberOfStrips ( input )
ASSIGN	2596:2	2596:13	8	stripcount = TIFFNumberOfStrips ( input )
LVAL	2596:2	2596:2	9	stripcount
FIELD	2596:2	2596:2	10	stripcount
LEAF_NODE	2596:2	2596:2	11	stripcount
ASSIGN_OP	2596:12	2596:12	9	=
LEAF_NODE	2596:12	2596:12	10	=
RVAL	2596:13	2596:13	9	TIFFNumberOfStrips ( input )
FUNCTION_CALL	2596:13	2596:37	10	TIFFNumberOfStrips ( input )
CALLEE	2596:13	2596:13	11	TIFFNumberOfStrips
LEAF_NODE	2596:13	2596:13	12	TIFFNumberOfStrips
LEAF_NODE	2596:31	2596:31	11	(
ARGUMENT	2596:32	2596:32	11	input
FIELD	2596:32	2596:32	12	input
LEAF_NODE	2596:32	2596:32	13	input
LEAF_NODE	2596:37	2596:37	11	)
LEAF_NODE	2596:38	2596:38	7	;
ITERATION	2597:2	2597:27	6	
KEYWORD	2597:2	2597:2	7	for
LEAF_NODE	2597:2	2597:2	8	for
LEAF_NODE	2597:5	2597:5	7	(
FOR_INIT	2597:6	2597:9	7	i = 0 ;
EXPR	2597:6	2597:6	8	i = 0
ASSIGN	2597:6	2597:8	9	i = 0
LVAL	2597:6	2597:6	10	i
FIELD	2597:6	2597:6	11	i
LEAF_NODE	2597:6	2597:6	12	i
ASSIGN_OP	2597:7	2597:7	10	=
LEAF_NODE	2597:7	2597:7	11	=
RVAL	2597:8	2597:8	10	0
FIELD	2597:8	2597:8	11	0
LEAF_NODE	2597:8	2597:8	12	0
LEAF_NODE	2597:9	2597:9	8	;
CONDITION	2597:10	2597:10	7	i < stripcount
EXPR	2597:10	2597:12	8	i < stripcount
FIELD	2597:10	2597:10	9	i
LEAF_NODE	2597:10	2597:10	10	i
REL_OPERATOR	2597:11	2597:11	9	<
LEAF_NODE	2597:11	2597:11	10	<
FIELD	2597:12	2597:12	9	stripcount
LEAF_NODE	2597:12	2597:12	10	stripcount
LEAF_NODE	2597:22	2597:22	7	;
FOR_EXPR	2597:23	2597:23	7	i ++
EXPR	2597:23	2597:23	8	i ++
FIELD	2597:23	2597:24	9	i ++
LEAF_NODE	2597:23	2597:23	10	i
LEAF_NODE	2597:24	2597:24	10	++
LEAF_NODE	2597:26	2597:26	7	)
STATEMENTS	2597:27	2614:2	7	
LEAF_NODE	2597:27	2597:27	8	{
STATEMENTS	2598:3	2613:3	8	
EXPR_STATEMENT	2598:3	2602:58	9	read = TIFFReadEncodedStrip ( input , i , ( tdata_t ) & buffer [ bufferoffset ] , TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) ) ;
EXPR	2598:3	2598:3	10	read = TIFFReadEncodedStrip ( input , i , ( tdata_t ) & buffer [ bufferoffset ] , TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) )
ASSIGN	2598:3	2599:4	11	read = TIFFReadEncodedStrip ( input , i , ( tdata_t ) & buffer [ bufferoffset ] , TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) )
LVAL	2598:3	2598:3	12	read
FIELD	2598:3	2598:3	13	read
LEAF_NODE	2598:3	2598:3	14	read
ASSIGN_OP	2598:8	2598:8	12	=
LEAF_NODE	2598:8	2598:8	13	=
RVAL	2599:4	2599:4	12	TIFFReadEncodedStrip ( input , i , ( tdata_t ) & buffer [ bufferoffset ] , TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) )
FUNCTION_CALL	2599:4	2602:57	13	TIFFReadEncodedStrip ( input , i , ( tdata_t ) & buffer [ bufferoffset ] , TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) )
CALLEE	2599:4	2599:4	14	TIFFReadEncodedStrip
LEAF_NODE	2599:4	2599:4	15	TIFFReadEncodedStrip
LEAF_NODE	2599:24	2599:24	14	(
ARGUMENT	2599:25	2599:25	14	input
FIELD	2599:25	2599:25	15	input
LEAF_NODE	2599:25	2599:25	16	input
LEAF_NODE	2599:30	2599:30	14	,
ARGUMENT	2600:4	2600:4	14	i
FIELD	2600:4	2600:4	15	i
LEAF_NODE	2600:4	2600:4	16	i
LEAF_NODE	2600:5	2600:5	14	,
ARGUMENT	2601:4	2601:14	14	( tdata_t ) & buffer [ bufferoffset ]
LEAF_NODE	2601:4	2601:4	15	(
TYPE_NAME	2601:5	2601:5	15	tdata_t
LEAF_NODE	2601:5	2601:5	16	tdata_t
LEAF_NODE	2601:12	2601:12	15	)
UNARY_EXPR	2601:14	2601:15	15	& buffer [ bufferoffset ]
UNARY_OPERATOR	2601:14	2601:14	16	&
LEAF_NODE	2601:14	2601:14	17	&
FIELD	2601:15	2601:34	16	buffer [ bufferoffset ]
LEAF_NODE	2601:15	2601:15	17	buffer
LEAF_NODE	2601:21	2601:21	17	[
EXPR	2601:22	2601:22	17	bufferoffset
FIELD	2601:22	2601:22	18	bufferoffset
LEAF_NODE	2601:22	2601:22	19	bufferoffset
LEAF_NODE	2601:34	2601:34	17	]
LEAF_NODE	2601:35	2601:35	14	,
ARGUMENT	2602:4	2602:4	14	TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset )
FUNCTION_CALL	2602:4	2602:56	15	TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset )
CALLEE	2602:4	2602:4	16	TIFFmin
LEAF_NODE	2602:4	2602:4	17	TIFFmin
LEAF_NODE	2602:11	2602:11	16	(
ARGUMENT	2602:12	2602:12	16	stripsize
FIELD	2602:12	2602:12	17	stripsize
LEAF_NODE	2602:12	2602:12	18	stripsize
LEAF_NODE	2602:21	2602:21	16	,
ARGUMENT	2602:23	2602:44	16	t2p -> tiff_datasize - bufferoffset
FIELD	2602:23	2602:28	17	t2p -> tiff_datasize
LEAF_NODE	2602:23	2602:23	18	t2p
LEAF_NODE	2602:26	2602:26	18	->
LEAF_NODE	2602:28	2602:28	18	tiff_datasize
LEAF_NODE	2602:42	2602:42	17	-
FIELD	2602:44	2602:44	17	bufferoffset
LEAF_NODE	2602:44	2602:44	18	bufferoffset
LEAF_NODE	2602:56	2602:56	16	)
LEAF_NODE	2602:57	2602:57	14	)
LEAF_NODE	2602:58	2602:58	10	;
SELECTION	2603:3	2603:15	9	
KEYWORD	2603:3	2603:3	10	if
LEAF_NODE	2603:3	2603:3	11	if
LEAF_NODE	2603:5	2603:5	10	(
CONDITION	2603:6	2603:6	10	read == - 1
EXPR	2603:6	2603:12	11	read == - 1
FIELD	2603:6	2603:6	12	read
LEAF_NODE	2603:6	2603:6	13	read
EQ_OPERATOR	2603:10	2603:10	12	==
LEAF_NODE	2603:10	2603:10	13	==
UNARY_EXPR	2603:12	2603:13	12	- 1
UNARY_OPERATOR	2603:12	2603:12	13	-
LEAF_NODE	2603:12	2603:12	14	-
FIELD	2603:13	2603:13	13	1
LEAF_NODE	2603:13	2603:13	14	1
LEAF_NODE	2603:14	2603:14	10	)
STATEMENTS	2603:15	2612:3	10	
LEAF_NODE	2603:15	2603:15	11	{
STATEMENTS	2604:4	2611:4	11	
EXPR_STATEMENT	2604:4	2607:25	12	TIFFError ( TIFF2PDF_MODULE , "Error on decoding strip %u of %s" , i , TIFFFileName ( input ) ) ;
EXPR	2604:4	2604:4	13	TIFFError ( TIFF2PDF_MODULE , "Error on decoding strip %u of %s" , i , TIFFFileName ( input ) )
FUNCTION_CALL	2604:4	2607:24	14	TIFFError ( TIFF2PDF_MODULE , "Error on decoding strip %u of %s" , i , TIFFFileName ( input ) )
CALLEE	2604:4	2604:4	15	TIFFError
LEAF_NODE	2604:4	2604:4	16	TIFFError
LEAF_NODE	2604:13	2604:13	15	(
ARGUMENT	2604:14	2604:14	15	TIFF2PDF_MODULE
FIELD	2604:14	2604:14	16	TIFF2PDF_MODULE
LEAF_NODE	2604:14	2604:14	17	TIFF2PDF_MODULE
LEAF_NODE	2604:29	2604:29	15	,
ARGUMENT	2605:5	2605:5	15	"Error on decoding strip %u of %s"
FIELD	2605:5	2605:5	16	"Error on decoding strip %u of %s"
LEAF_NODE	2605:5	2605:5	17	"Error on decoding strip %u of %s"
LEAF_NODE	2605:39	2605:39	15	,
ARGUMENT	2606:5	2606:5	15	i
FIELD	2606:5	2606:5	16	i
LEAF_NODE	2606:5	2606:5	17	i
LEAF_NODE	2606:6	2606:6	15	,
ARGUMENT	2607:5	2607:5	15	TIFFFileName ( input )
FUNCTION_CALL	2607:5	2607:23	16	TIFFFileName ( input )
CALLEE	2607:5	2607:5	17	TIFFFileName
LEAF_NODE	2607:5	2607:5	18	TIFFFileName
LEAF_NODE	2607:17	2607:17	17	(
ARGUMENT	2607:18	2607:18	17	input
FIELD	2607:18	2607:18	18	input
LEAF_NODE	2607:18	2607:18	19	input
LEAF_NODE	2607:23	2607:23	17	)
LEAF_NODE	2607:24	2607:24	15	)
LEAF_NODE	2607:25	2607:25	13	;
EXPR_STATEMENT	2608:4	2608:27	12	_TIFFfree ( samplebuffer ) ;
EXPR	2608:4	2608:4	13	_TIFFfree ( samplebuffer )
FUNCTION_CALL	2608:4	2608:26	14	_TIFFfree ( samplebuffer )
CALLEE	2608:4	2608:4	15	_TIFFfree
LEAF_NODE	2608:4	2608:4	16	_TIFFfree
LEAF_NODE	2608:13	2608:13	15	(
ARGUMENT	2608:14	2608:14	15	samplebuffer
FIELD	2608:14	2608:14	16	samplebuffer
LEAF_NODE	2608:14	2608:14	17	samplebuffer
LEAF_NODE	2608:26	2608:26	15	)
LEAF_NODE	2608:27	2608:27	13	;
EXPR_STATEMENT	2609:4	2609:21	12	_TIFFfree ( buffer ) ;
EXPR	2609:4	2609:4	13	_TIFFfree ( buffer )
FUNCTION_CALL	2609:4	2609:20	14	_TIFFfree ( buffer )
CALLEE	2609:4	2609:4	15	_TIFFfree
LEAF_NODE	2609:4	2609:4	16	_TIFFfree
LEAF_NODE	2609:13	2609:13	15	(
ARGUMENT	2609:14	2609:14	15	buffer
FIELD	2609:14	2609:14	16	buffer
LEAF_NODE	2609:14	2609:14	17	buffer
LEAF_NODE	2609:20	2609:20	15	)
LEAF_NODE	2609:21	2609:21	13	;
EXPR_STATEMENT	2610:4	2610:32	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2610:4	2610:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2610:4	2610:19	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2610:4	2610:4	15	t2p -> t2p_error
FIELD	2610:4	2610:9	16	t2p -> t2p_error
LEAF_NODE	2610:4	2610:4	17	t2p
LEAF_NODE	2610:7	2610:7	17	->
LEAF_NODE	2610:9	2610:9	17	t2p_error
ASSIGN_OP	2610:18	2610:18	15	=
LEAF_NODE	2610:18	2610:18	16	=
RVAL	2610:19	2610:19	15	T2P_ERR_ERROR
FIELD	2610:19	2610:19	16	T2P_ERR_ERROR
LEAF_NODE	2610:19	2610:19	17	T2P_ERR_ERROR
LEAF_NODE	2610:32	2610:32	13	;
JUMP_STATEMENT	2611:4	2611:13	12	return ( 0 ) ;
KEYWORD	2611:4	2611:4	13	return
LEAF_NODE	2611:4	2611:4	14	return
DESTINATION	2611:10	2611:10	13	( 0 )
EXPR	2611:10	2611:12	14	( 0 )
LEAF_NODE	2611:10	2611:10	15	(
FIELD	2611:11	2611:11	15	0
LEAF_NODE	2611:11	2611:11	16	0
LEAF_NODE	2611:12	2611:12	15	)
LEAF_NODE	2611:13	2611:13	13	;
LEAF_NODE	2612:3	2612:3	11	}
EXPR_STATEMENT	2613:3	2613:21	9	bufferoffset += read ;
EXPR	2613:3	2613:3	10	bufferoffset += read
ASSIGN	2613:3	2613:17	11	bufferoffset += read
LVAL	2613:3	2613:3	12	bufferoffset
FIELD	2613:3	2613:3	13	bufferoffset
LEAF_NODE	2613:3	2613:3	14	bufferoffset
ASSIGN_OP	2613:15	2613:15	12	+=
LEAF_NODE	2613:15	2613:15	13	+=
RVAL	2613:17	2613:17	12	read
FIELD	2613:17	2613:17	13	read
LEAF_NODE	2613:17	2613:17	14	read
LEAF_NODE	2613:21	2613:21	10	;
LEAF_NODE	2614:2	2614:2	8	}
SELECTION	2616:2	2616:50	6	
KEYWORD	2616:2	2616:2	7	if
LEAF_NODE	2616:2	2616:2	8	if
LEAF_NODE	2616:4	2616:4	7	(
CONDITION	2616:5	2616:5	7	t2p -> pdf_sample & T2P_SAMPLE_REALIZE_PALETTE
EXPR	2616:5	2616:23	8	t2p -> pdf_sample & T2P_SAMPLE_REALIZE_PALETTE
FIELD	2616:5	2616:10	9	t2p -> pdf_sample
LEAF_NODE	2616:5	2616:5	10	t2p
LEAF_NODE	2616:8	2616:8	10	->
LEAF_NODE	2616:10	2616:10	10	pdf_sample
LEAF_NODE	2616:21	2616:21	9	&
FIELD	2616:23	2616:23	9	T2P_SAMPLE_REALIZE_PALETTE
LEAF_NODE	2616:23	2616:23	10	T2P_SAMPLE_REALIZE_PALETTE
LEAF_NODE	2616:49	2616:49	7	)
STATEMENTS	2616:50	2634:2	7	
LEAF_NODE	2616:50	2616:50	8	{
STATEMENTS	2618:3	2633:3	8	
EXPR_STATEMENT	2618:3	2620:51	9	samplebuffer = ( unsigned char * ) _TIFFrealloc ( ( tdata_t ) buffer , t2p -> tiff_datasize * t2p -> tiff_samplesperpixel ) ;
EXPR	2618:3	2618:3	10	samplebuffer = ( unsigned char * ) _TIFFrealloc ( ( tdata_t ) buffer , t2p -> tiff_datasize * t2p -> tiff_samplesperpixel )
ASSIGN	2618:3	2618:16	11	samplebuffer = ( unsigned char * ) _TIFFrealloc ( ( tdata_t ) buffer , t2p -> tiff_datasize * t2p -> tiff_samplesperpixel )
LVAL	2618:3	2618:3	12	samplebuffer
FIELD	2618:3	2618:3	13	samplebuffer
LEAF_NODE	2618:3	2618:3	14	samplebuffer
ASSIGN_OP	2618:15	2618:15	12	=
LEAF_NODE	2618:15	2618:15	13	=
RVAL	2618:16	2618:32	12	( unsigned char * ) _TIFFrealloc ( ( tdata_t ) buffer , t2p -> tiff_datasize * t2p -> tiff_samplesperpixel )
LEAF_NODE	2618:16	2618:16	13	(
TYPE_NAME	2618:17	2618:26	13	unsigned char
LEAF_NODE	2618:17	2618:17	14	unsigned
LEAF_NODE	2618:26	2618:26	14	char
LEAF_NODE	2618:30	2618:30	13	*
LEAF_NODE	2618:31	2618:31	13	)
FUNCTION_CALL	2618:32	2620:50	13	_TIFFrealloc ( ( tdata_t ) buffer , t2p -> tiff_datasize * t2p -> tiff_samplesperpixel )
CALLEE	2618:32	2618:32	14	_TIFFrealloc
LEAF_NODE	2618:32	2618:32	15	_TIFFrealloc
LEAF_NODE	2618:44	2618:44	14	(
ARGUMENT	2619:4	2619:14	14	( tdata_t ) buffer
LEAF_NODE	2619:4	2619:4	15	(
TYPE_NAME	2619:5	2619:5	15	tdata_t
LEAF_NODE	2619:5	2619:5	16	tdata_t
LEAF_NODE	2619:12	2619:12	15	)
FIELD	2619:14	2619:14	15	buffer
LEAF_NODE	2619:14	2619:14	16	buffer
LEAF_NODE	2619:20	2619:20	14	,
ARGUMENT	2620:4	2620:25	14	t2p -> tiff_datasize * t2p -> tiff_samplesperpixel
FIELD	2620:4	2620:9	15	t2p -> tiff_datasize
LEAF_NODE	2620:4	2620:4	16	t2p
LEAF_NODE	2620:7	2620:7	16	->
LEAF_NODE	2620:9	2620:9	16	tiff_datasize
LEAF_NODE	2620:23	2620:23	15	*
FIELD	2620:25	2620:30	15	t2p -> tiff_samplesperpixel
LEAF_NODE	2620:25	2620:25	16	t2p
LEAF_NODE	2620:28	2620:28	16	->
LEAF_NODE	2620:30	2620:30	16	tiff_samplesperpixel
LEAF_NODE	2620:50	2620:50	14	)
LEAF_NODE	2620:51	2620:51	10	;
SELECTION	2621:3	2621:25	9	
KEYWORD	2621:3	2621:3	10	if
LEAF_NODE	2621:3	2621:3	11	if
LEAF_NODE	2621:5	2621:5	10	(
CONDITION	2621:6	2621:6	10	samplebuffer == NULL
EXPR	2621:6	2621:20	11	samplebuffer == NULL
FIELD	2621:6	2621:6	12	samplebuffer
LEAF_NODE	2621:6	2621:6	13	samplebuffer
EQ_OPERATOR	2621:18	2621:18	12	==
LEAF_NODE	2621:18	2621:18	13	==
FIELD	2621:20	2621:20	12	NULL
LEAF_NODE	2621:20	2621:20	13	NULL
LEAF_NODE	2621:24	2621:24	10	)
STATEMENTS	2621:25	2629:3	10	
LEAF_NODE	2621:25	2621:25	11	{
STATEMENTS	2622:4	2628:4	11	
EXPR_STATEMENT	2622:4	2625:25	12	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) ) ;
EXPR	2622:4	2622:4	13	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
FUNCTION_CALL	2622:4	2625:24	14	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
CALLEE	2622:4	2622:4	15	TIFFError
LEAF_NODE	2622:4	2622:4	16	TIFFError
LEAF_NODE	2622:13	2622:13	15	(
ARGUMENT	2622:14	2622:14	15	TIFF2PDF_MODULE
FIELD	2622:14	2622:14	16	TIFF2PDF_MODULE
LEAF_NODE	2622:14	2622:14	17	TIFF2PDF_MODULE
LEAF_NODE	2622:29	2622:29	15	,
ARGUMENT	2623:1	2623:1	15	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2623:1	2623:1	16	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2623:1	2623:1	17	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2623:69	2623:69	15	,
ARGUMENT	2624:5	2624:21	15	( unsigned long ) t2p -> tiff_datasize
LEAF_NODE	2624:5	2624:5	16	(
TYPE_NAME	2624:6	2624:15	16	unsigned long
LEAF_NODE	2624:6	2624:6	17	unsigned
LEAF_NODE	2624:15	2624:15	17	long
LEAF_NODE	2624:19	2624:19	16	)
FIELD	2624:21	2624:26	16	t2p -> tiff_datasize
LEAF_NODE	2624:21	2624:21	17	t2p
LEAF_NODE	2624:24	2624:24	17	->
LEAF_NODE	2624:26	2624:26	17	tiff_datasize
LEAF_NODE	2624:39	2624:39	15	,
ARGUMENT	2625:5	2625:5	15	TIFFFileName ( input )
FUNCTION_CALL	2625:5	2625:23	16	TIFFFileName ( input )
CALLEE	2625:5	2625:5	17	TIFFFileName
LEAF_NODE	2625:5	2625:5	18	TIFFFileName
LEAF_NODE	2625:17	2625:17	17	(
ARGUMENT	2625:18	2625:18	17	input
FIELD	2625:18	2625:18	18	input
LEAF_NODE	2625:18	2625:18	19	input
LEAF_NODE	2625:23	2625:23	17	)
LEAF_NODE	2625:24	2625:24	15	)
LEAF_NODE	2625:25	2625:25	13	;
EXPR_STATEMENT	2626:4	2626:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2626:4	2626:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2626:4	2626:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2626:4	2626:4	15	t2p -> t2p_error
FIELD	2626:4	2626:9	16	t2p -> t2p_error
LEAF_NODE	2626:4	2626:4	17	t2p
LEAF_NODE	2626:7	2626:7	17	->
LEAF_NODE	2626:9	2626:9	17	t2p_error
ASSIGN_OP	2626:19	2626:19	15	=
LEAF_NODE	2626:19	2626:19	16	=
RVAL	2626:21	2626:21	15	T2P_ERR_ERROR
FIELD	2626:21	2626:21	16	T2P_ERR_ERROR
LEAF_NODE	2626:21	2626:21	17	T2P_ERR_ERROR
LEAF_NODE	2626:34	2626:34	13	;
EXPR_STATEMENT	2627:4	2627:21	12	_TIFFfree ( buffer ) ;
EXPR	2627:4	2627:4	13	_TIFFfree ( buffer )
FUNCTION_CALL	2627:4	2627:20	14	_TIFFfree ( buffer )
CALLEE	2627:4	2627:4	15	_TIFFfree
LEAF_NODE	2627:4	2627:4	16	_TIFFfree
LEAF_NODE	2627:13	2627:13	15	(
ARGUMENT	2627:14	2627:14	15	buffer
FIELD	2627:14	2627:14	16	buffer
LEAF_NODE	2627:14	2627:14	17	buffer
LEAF_NODE	2627:20	2627:20	15	)
LEAF_NODE	2627:21	2627:21	13	;
JUMP_STATEMENT	2628:4	2628:13	12	return ( 0 ) ;
KEYWORD	2628:4	2628:4	13	return
LEAF_NODE	2628:4	2628:4	14	return
DESTINATION	2628:10	2628:10	13	( 0 )
EXPR	2628:10	2628:12	14	( 0 )
LEAF_NODE	2628:10	2628:10	15	(
FIELD	2628:11	2628:11	15	0
LEAF_NODE	2628:11	2628:11	16	0
LEAF_NODE	2628:12	2628:12	15	)
LEAF_NODE	2628:13	2628:13	13	;
LEAF_NODE	2629:3	2629:3	11	}
SELECTION	2629:5	2629:10	9	
KEYWORD	2629:5	2629:5	10	else
LEAF_NODE	2629:5	2629:5	11	else
STATEMENTS	2629:10	2632:3	10	
LEAF_NODE	2629:10	2629:10	11	{
STATEMENTS	2630:4	2631:4	11	
EXPR_STATEMENT	2630:4	2630:23	12	buffer = samplebuffer ;
EXPR	2630:4	2630:4	13	buffer = samplebuffer
ASSIGN	2630:4	2630:11	14	buffer = samplebuffer
LVAL	2630:4	2630:4	15	buffer
FIELD	2630:4	2630:4	16	buffer
LEAF_NODE	2630:4	2630:4	17	buffer
ASSIGN_OP	2630:10	2630:10	15	=
LEAF_NODE	2630:10	2630:10	16	=
RVAL	2630:11	2630:11	15	samplebuffer
FIELD	2630:11	2630:11	16	samplebuffer
LEAF_NODE	2630:11	2630:11	17	samplebuffer
LEAF_NODE	2630:23	2630:23	13	;
EXPR_STATEMENT	2631:4	2631:51	12	t2p -> tiff_datasize *= t2p -> tiff_samplesperpixel ;
EXPR	2631:4	2631:4	13	t2p -> tiff_datasize *= t2p -> tiff_samplesperpixel
ASSIGN	2631:4	2631:26	14	t2p -> tiff_datasize *= t2p -> tiff_samplesperpixel
LVAL	2631:4	2631:4	15	t2p -> tiff_datasize
FIELD	2631:4	2631:9	16	t2p -> tiff_datasize
LEAF_NODE	2631:4	2631:4	17	t2p
LEAF_NODE	2631:7	2631:7	17	->
LEAF_NODE	2631:9	2631:9	17	tiff_datasize
ASSIGN_OP	2631:23	2631:23	15	*=
LEAF_NODE	2631:23	2631:23	16	*=
RVAL	2631:26	2631:26	15	t2p -> tiff_samplesperpixel
FIELD	2631:26	2631:31	16	t2p -> tiff_samplesperpixel
LEAF_NODE	2631:26	2631:26	17	t2p
LEAF_NODE	2631:29	2631:29	17	->
LEAF_NODE	2631:31	2631:31	17	tiff_samplesperpixel
LEAF_NODE	2631:51	2631:51	13	;
LEAF_NODE	2632:3	2632:3	11	}
EXPR_STATEMENT	2633:3	2633:42	9	t2p_sample_realize_palette ( t2p , buffer ) ;
EXPR	2633:3	2633:3	10	t2p_sample_realize_palette ( t2p , buffer )
FUNCTION_CALL	2633:3	2633:41	11	t2p_sample_realize_palette ( t2p , buffer )
CALLEE	2633:3	2633:3	12	t2p_sample_realize_palette
LEAF_NODE	2633:3	2633:3	13	t2p_sample_realize_palette
LEAF_NODE	2633:29	2633:29	12	(
ARGUMENT	2633:30	2633:30	12	t2p
FIELD	2633:30	2633:30	13	t2p
LEAF_NODE	2633:30	2633:30	14	t2p
LEAF_NODE	2633:33	2633:33	12	,
ARGUMENT	2633:35	2633:35	12	buffer
FIELD	2633:35	2633:35	13	buffer
LEAF_NODE	2633:35	2633:35	14	buffer
LEAF_NODE	2633:41	2633:41	12	)
LEAF_NODE	2633:42	2633:42	10	;
LEAF_NODE	2634:2	2634:2	8	}
SELECTION	2636:2	2636:46	6	
KEYWORD	2636:2	2636:2	7	if
LEAF_NODE	2636:2	2636:2	8	if
LEAF_NODE	2636:4	2636:4	7	(
CONDITION	2636:5	2636:5	7	t2p -> pdf_sample & T2P_SAMPLE_RGBA_TO_RGB
EXPR	2636:5	2636:23	8	t2p -> pdf_sample & T2P_SAMPLE_RGBA_TO_RGB
FIELD	2636:5	2636:10	9	t2p -> pdf_sample
LEAF_NODE	2636:5	2636:5	10	t2p
LEAF_NODE	2636:8	2636:8	10	->
LEAF_NODE	2636:10	2636:10	10	pdf_sample
LEAF_NODE	2636:21	2636:21	9	&
FIELD	2636:23	2636:23	9	T2P_SAMPLE_RGBA_TO_RGB
LEAF_NODE	2636:23	2636:23	10	T2P_SAMPLE_RGBA_TO_RGB
LEAF_NODE	2636:45	2636:45	7	)
STATEMENTS	2636:46	2640:2	7	
LEAF_NODE	2636:46	2636:46	8	{
STATEMENTS	2637:3	2637:3	8	
EXPR_STATEMENT	2637:3	2639:37	9	t2p -> tiff_datasize = t2p_sample_rgba_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length ) ;
EXPR	2637:3	2637:3	10	t2p -> tiff_datasize = t2p_sample_rgba_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
ASSIGN	2637:3	2637:22	11	t2p -> tiff_datasize = t2p_sample_rgba_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
LVAL	2637:3	2637:3	12	t2p -> tiff_datasize
FIELD	2637:3	2637:8	13	t2p -> tiff_datasize
LEAF_NODE	2637:3	2637:3	14	t2p
LEAF_NODE	2637:6	2637:6	14	->
LEAF_NODE	2637:8	2637:8	14	tiff_datasize
ASSIGN_OP	2637:21	2637:21	12	=
LEAF_NODE	2637:21	2637:21	13	=
RVAL	2637:22	2637:22	12	t2p_sample_rgba_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
FUNCTION_CALL	2637:22	2639:36	13	t2p_sample_rgba_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
CALLEE	2637:22	2637:22	14	t2p_sample_rgba_to_rgb
LEAF_NODE	2637:22	2637:22	15	t2p_sample_rgba_to_rgb
LEAF_NODE	2637:44	2637:44	14	(
ARGUMENT	2638:4	2638:13	14	( tdata_t ) buffer
LEAF_NODE	2638:4	2638:4	15	(
TYPE_NAME	2638:5	2638:5	15	tdata_t
LEAF_NODE	2638:5	2638:5	16	tdata_t
LEAF_NODE	2638:12	2638:12	15	)
FIELD	2638:13	2638:13	15	buffer
LEAF_NODE	2638:13	2638:13	16	buffer
LEAF_NODE	2638:19	2638:19	14	,
ARGUMENT	2639:4	2639:20	14	t2p -> tiff_width * t2p -> tiff_length
FIELD	2639:4	2639:9	15	t2p -> tiff_width
LEAF_NODE	2639:4	2639:4	16	t2p
LEAF_NODE	2639:7	2639:7	16	->
LEAF_NODE	2639:9	2639:9	16	tiff_width
LEAF_NODE	2639:19	2639:19	15	*
FIELD	2639:20	2639:25	15	t2p -> tiff_length
LEAF_NODE	2639:20	2639:20	16	t2p
LEAF_NODE	2639:23	2639:23	16	->
LEAF_NODE	2639:25	2639:25	16	tiff_length
LEAF_NODE	2639:36	2639:36	14	)
LEAF_NODE	2639:37	2639:37	10	;
LEAF_NODE	2640:2	2640:2	8	}
SELECTION	2642:2	2642:47	6	
KEYWORD	2642:2	2642:2	7	if
LEAF_NODE	2642:2	2642:2	8	if
LEAF_NODE	2642:4	2642:4	7	(
CONDITION	2642:5	2642:5	7	t2p -> pdf_sample & T2P_SAMPLE_RGBAA_TO_RGB
EXPR	2642:5	2642:23	8	t2p -> pdf_sample & T2P_SAMPLE_RGBAA_TO_RGB
FIELD	2642:5	2642:10	9	t2p -> pdf_sample
LEAF_NODE	2642:5	2642:5	10	t2p
LEAF_NODE	2642:8	2642:8	10	->
LEAF_NODE	2642:10	2642:10	10	pdf_sample
LEAF_NODE	2642:21	2642:21	9	&
FIELD	2642:23	2642:23	9	T2P_SAMPLE_RGBAA_TO_RGB
LEAF_NODE	2642:23	2642:23	10	T2P_SAMPLE_RGBAA_TO_RGB
LEAF_NODE	2642:46	2642:46	7	)
STATEMENTS	2642:47	2646:2	7	
LEAF_NODE	2642:47	2642:47	8	{
STATEMENTS	2643:3	2643:3	8	
EXPR_STATEMENT	2643:3	2645:37	9	t2p -> tiff_datasize = t2p_sample_rgbaa_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length ) ;
EXPR	2643:3	2643:3	10	t2p -> tiff_datasize = t2p_sample_rgbaa_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
ASSIGN	2643:3	2643:22	11	t2p -> tiff_datasize = t2p_sample_rgbaa_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
LVAL	2643:3	2643:3	12	t2p -> tiff_datasize
FIELD	2643:3	2643:8	13	t2p -> tiff_datasize
LEAF_NODE	2643:3	2643:3	14	t2p
LEAF_NODE	2643:6	2643:6	14	->
LEAF_NODE	2643:8	2643:8	14	tiff_datasize
ASSIGN_OP	2643:21	2643:21	12	=
LEAF_NODE	2643:21	2643:21	13	=
RVAL	2643:22	2643:22	12	t2p_sample_rgbaa_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
FUNCTION_CALL	2643:22	2645:36	13	t2p_sample_rgbaa_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
CALLEE	2643:22	2643:22	14	t2p_sample_rgbaa_to_rgb
LEAF_NODE	2643:22	2643:22	15	t2p_sample_rgbaa_to_rgb
LEAF_NODE	2643:45	2643:45	14	(
ARGUMENT	2644:4	2644:13	14	( tdata_t ) buffer
LEAF_NODE	2644:4	2644:4	15	(
TYPE_NAME	2644:5	2644:5	15	tdata_t
LEAF_NODE	2644:5	2644:5	16	tdata_t
LEAF_NODE	2644:12	2644:12	15	)
FIELD	2644:13	2644:13	15	buffer
LEAF_NODE	2644:13	2644:13	16	buffer
LEAF_NODE	2644:19	2644:19	14	,
ARGUMENT	2645:4	2645:20	14	t2p -> tiff_width * t2p -> tiff_length
FIELD	2645:4	2645:9	15	t2p -> tiff_width
LEAF_NODE	2645:4	2645:4	16	t2p
LEAF_NODE	2645:7	2645:7	16	->
LEAF_NODE	2645:9	2645:9	16	tiff_width
LEAF_NODE	2645:19	2645:19	15	*
FIELD	2645:20	2645:25	15	t2p -> tiff_length
LEAF_NODE	2645:20	2645:20	16	t2p
LEAF_NODE	2645:23	2645:23	16	->
LEAF_NODE	2645:25	2645:25	16	tiff_length
LEAF_NODE	2645:36	2645:36	14	)
LEAF_NODE	2645:37	2645:37	10	;
LEAF_NODE	2646:2	2646:2	8	}
SELECTION	2648:2	2648:47	6	
KEYWORD	2648:2	2648:2	7	if
LEAF_NODE	2648:2	2648:2	8	if
LEAF_NODE	2648:4	2648:4	7	(
CONDITION	2648:5	2648:5	7	t2p -> pdf_sample & T2P_SAMPLE_YCBCR_TO_RGB
EXPR	2648:5	2648:23	8	t2p -> pdf_sample & T2P_SAMPLE_YCBCR_TO_RGB
FIELD	2648:5	2648:10	9	t2p -> pdf_sample
LEAF_NODE	2648:5	2648:5	10	t2p
LEAF_NODE	2648:8	2648:8	10	->
LEAF_NODE	2648:10	2648:10	10	pdf_sample
LEAF_NODE	2648:21	2648:21	9	&
FIELD	2648:23	2648:23	9	T2P_SAMPLE_YCBCR_TO_RGB
LEAF_NODE	2648:23	2648:23	10	T2P_SAMPLE_YCBCR_TO_RGB
LEAF_NODE	2648:46	2648:46	7	)
STATEMENTS	2648:47	2680:2	7	
LEAF_NODE	2648:47	2648:47	8	{
STATEMENTS	2649:3	2676:3	8	
LEAF_NODE	2649:3	2649:3	9	samplebuffer
LEAF_NODE	2649:15	2649:15	9	=
LEAF_NODE	2649:16	2649:16	9	(
LEAF_NODE	2649:17	2649:17	9	unsigned
LEAF_NODE	2649:26	2649:26	9	char
LEAF_NODE	2649:30	2649:30	9	*
LEAF_NODE	2649:31	2649:31	9	)
LEAF_NODE	2649:32	2649:32	9	_TIFFrealloc
LEAF_NODE	2649:44	2649:44	9	(
LEAF_NODE	2650:4	2650:4	9	(
LEAF_NODE	2650:5	2650:5	9	tdata_t
LEAF_NODE	2650:12	2650:12	9	)
LEAF_NODE	2650:13	2650:13	9	buffer
LEAF_NODE	2650:19	2650:19	9	,
LEAF_NODE	2651:4	2651:4	9	t2p
LEAF_NODE	2651:7	2651:7	9	->
LEAF_NODE	2651:9	2651:9	9	tiff_width
LEAF_NODE	2651:19	2651:19	9	*
LEAF_NODE	2651:20	2651:20	9	t2p
LEAF_NODE	2651:23	2651:23	9	->
LEAF_NODE	2651:25	2651:25	9	tiff_length
LEAF_NODE	2651:36	2651:36	9	*
LEAF_NODE	2651:37	2651:37	9	4
LEAF_NODE	2651:38	2651:38	9	)
LEAF_NODE	2651:39	2651:39	9	;
SELECTION	2652:3	2652:25	9	
KEYWORD	2652:3	2652:3	10	if
LEAF_NODE	2652:3	2652:3	11	if
LEAF_NODE	2652:5	2652:5	10	(
CONDITION	2652:6	2652:6	10	samplebuffer == NULL
EXPR	2652:6	2652:20	11	samplebuffer == NULL
FIELD	2652:6	2652:6	12	samplebuffer
LEAF_NODE	2652:6	2652:6	13	samplebuffer
EQ_OPERATOR	2652:18	2652:18	12	==
LEAF_NODE	2652:18	2652:18	13	==
FIELD	2652:20	2652:20	12	NULL
LEAF_NODE	2652:20	2652:20	13	NULL
LEAF_NODE	2652:24	2652:24	10	)
STATEMENTS	2652:25	2660:3	10	
LEAF_NODE	2652:25	2652:25	11	{
STATEMENTS	2653:4	2659:4	11	
EXPR_STATEMENT	2653:4	2656:25	12	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) ) ;
EXPR	2653:4	2653:4	13	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
FUNCTION_CALL	2653:4	2656:24	14	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s" , ( unsigned long ) t2p -> tiff_datasize , TIFFFileName ( input ) )
CALLEE	2653:4	2653:4	15	TIFFError
LEAF_NODE	2653:4	2653:4	16	TIFFError
LEAF_NODE	2653:13	2653:13	15	(
ARGUMENT	2653:14	2653:14	15	TIFF2PDF_MODULE
FIELD	2653:14	2653:14	16	TIFF2PDF_MODULE
LEAF_NODE	2653:14	2653:14	17	TIFF2PDF_MODULE
LEAF_NODE	2653:29	2653:29	15	,
ARGUMENT	2654:1	2654:1	15	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
FIELD	2654:1	2654:1	16	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2654:1	2654:1	17	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2654:69	2654:69	15	,
ARGUMENT	2655:5	2655:21	15	( unsigned long ) t2p -> tiff_datasize
LEAF_NODE	2655:5	2655:5	16	(
TYPE_NAME	2655:6	2655:15	16	unsigned long
LEAF_NODE	2655:6	2655:6	17	unsigned
LEAF_NODE	2655:15	2655:15	17	long
LEAF_NODE	2655:19	2655:19	16	)
FIELD	2655:21	2655:26	16	t2p -> tiff_datasize
LEAF_NODE	2655:21	2655:21	17	t2p
LEAF_NODE	2655:24	2655:24	17	->
LEAF_NODE	2655:26	2655:26	17	tiff_datasize
LEAF_NODE	2655:39	2655:39	15	,
ARGUMENT	2656:5	2656:5	15	TIFFFileName ( input )
FUNCTION_CALL	2656:5	2656:23	16	TIFFFileName ( input )
CALLEE	2656:5	2656:5	17	TIFFFileName
LEAF_NODE	2656:5	2656:5	18	TIFFFileName
LEAF_NODE	2656:17	2656:17	17	(
ARGUMENT	2656:18	2656:18	17	input
FIELD	2656:18	2656:18	18	input
LEAF_NODE	2656:18	2656:18	19	input
LEAF_NODE	2656:23	2656:23	17	)
LEAF_NODE	2656:24	2656:24	15	)
LEAF_NODE	2656:25	2656:25	13	;
EXPR_STATEMENT	2657:4	2657:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2657:4	2657:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2657:4	2657:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2657:4	2657:4	15	t2p -> t2p_error
FIELD	2657:4	2657:9	16	t2p -> t2p_error
LEAF_NODE	2657:4	2657:4	17	t2p
LEAF_NODE	2657:7	2657:7	17	->
LEAF_NODE	2657:9	2657:9	17	t2p_error
ASSIGN_OP	2657:19	2657:19	15	=
LEAF_NODE	2657:19	2657:19	16	=
RVAL	2657:21	2657:21	15	T2P_ERR_ERROR
FIELD	2657:21	2657:21	16	T2P_ERR_ERROR
LEAF_NODE	2657:21	2657:21	17	T2P_ERR_ERROR
LEAF_NODE	2657:34	2657:34	13	;
EXPR_STATEMENT	2658:4	2658:21	12	_TIFFfree ( buffer ) ;
EXPR	2658:4	2658:4	13	_TIFFfree ( buffer )
FUNCTION_CALL	2658:4	2658:20	14	_TIFFfree ( buffer )
CALLEE	2658:4	2658:4	15	_TIFFfree
LEAF_NODE	2658:4	2658:4	16	_TIFFfree
LEAF_NODE	2658:13	2658:13	15	(
ARGUMENT	2658:14	2658:14	15	buffer
FIELD	2658:14	2658:14	16	buffer
LEAF_NODE	2658:14	2658:14	17	buffer
LEAF_NODE	2658:20	2658:20	15	)
LEAF_NODE	2658:21	2658:21	13	;
JUMP_STATEMENT	2659:4	2659:13	12	return ( 0 ) ;
KEYWORD	2659:4	2659:4	13	return
LEAF_NODE	2659:4	2659:4	14	return
DESTINATION	2659:10	2659:10	13	( 0 )
EXPR	2659:10	2659:12	14	( 0 )
LEAF_NODE	2659:10	2659:10	15	(
FIELD	2659:11	2659:11	15	0
LEAF_NODE	2659:11	2659:11	16	0
LEAF_NODE	2659:12	2659:12	15	)
LEAF_NODE	2659:13	2659:13	13	;
LEAF_NODE	2660:3	2660:3	11	}
SELECTION	2660:5	2660:10	9	
KEYWORD	2660:5	2660:5	10	else
LEAF_NODE	2660:5	2660:5	11	else
STATEMENTS	2660:10	2662:3	10	
LEAF_NODE	2660:10	2660:10	11	{
STATEMENTS	2661:4	2661:4	11	
EXPR_STATEMENT	2661:4	2661:23	12	buffer = samplebuffer ;
EXPR	2661:4	2661:4	13	buffer = samplebuffer
ASSIGN	2661:4	2661:11	14	buffer = samplebuffer
LVAL	2661:4	2661:4	15	buffer
FIELD	2661:4	2661:4	16	buffer
LEAF_NODE	2661:4	2661:4	17	buffer
ASSIGN_OP	2661:10	2661:10	15	=
LEAF_NODE	2661:10	2661:10	16	=
RVAL	2661:11	2661:11	15	samplebuffer
FIELD	2661:11	2661:11	16	samplebuffer
LEAF_NODE	2661:11	2661:11	17	samplebuffer
LEAF_NODE	2661:23	2661:23	13	;
LEAF_NODE	2662:3	2662:3	11	}
SELECTION	2663:3	2669:7	9	
KEYWORD	2663:3	2663:3	10	if
LEAF_NODE	2663:3	2663:3	11	if
LEAF_NODE	2663:5	2663:5	10	(
CONDITION	2663:6	2663:6	10	! TIFFReadRGBAImageOriented ( input , t2p -> tiff_width , t2p -> tiff_length , ( uint32 * ) buffer , ORIENTATION_TOPLEFT , 0 )
EXPR	2663:6	2663:6	11	! TIFFReadRGBAImageOriented ( input , t2p -> tiff_width , t2p -> tiff_length , ( uint32 * ) buffer , ORIENTATION_TOPLEFT , 0 )
UNARY_EXPR	2663:6	2663:7	12	! TIFFReadRGBAImageOriented ( input , t2p -> tiff_width , t2p -> tiff_length , ( uint32 * ) buffer , ORIENTATION_TOPLEFT , 0 )
UNARY_OPERATOR	2663:6	2663:6	13	!
LEAF_NODE	2663:6	2663:6	14	!
FUNCTION_CALL	2663:7	2669:5	13	TIFFReadRGBAImageOriented ( input , t2p -> tiff_width , t2p -> tiff_length , ( uint32 * ) buffer , ORIENTATION_TOPLEFT , 0 )
CALLEE	2663:7	2663:7	14	TIFFReadRGBAImageOriented
LEAF_NODE	2663:7	2663:7	15	TIFFReadRGBAImageOriented
LEAF_NODE	2663:32	2663:32	14	(
ARGUMENT	2664:4	2664:4	14	input
FIELD	2664:4	2664:4	15	input
LEAF_NODE	2664:4	2664:4	16	input
LEAF_NODE	2664:9	2664:9	14	,
ARGUMENT	2665:4	2665:4	14	t2p -> tiff_width
FIELD	2665:4	2665:9	15	t2p -> tiff_width
LEAF_NODE	2665:4	2665:4	16	t2p
LEAF_NODE	2665:7	2665:7	16	->
LEAF_NODE	2665:9	2665:9	16	tiff_width
LEAF_NODE	2665:19	2665:19	14	,
ARGUMENT	2666:4	2666:4	14	t2p -> tiff_length
FIELD	2666:4	2666:9	15	t2p -> tiff_length
LEAF_NODE	2666:4	2666:4	16	t2p
LEAF_NODE	2666:7	2666:7	16	->
LEAF_NODE	2666:9	2666:9	16	tiff_length
LEAF_NODE	2666:20	2666:20	14	,
ARGUMENT	2667:4	2667:13	14	( uint32 * ) buffer
LEAF_NODE	2667:4	2667:4	15	(
TYPE_NAME	2667:5	2667:5	15	uint32
LEAF_NODE	2667:5	2667:5	16	uint32
LEAF_NODE	2667:11	2667:11	15	*
LEAF_NODE	2667:12	2667:12	15	)
FIELD	2667:13	2667:13	15	buffer
LEAF_NODE	2667:13	2667:13	16	buffer
LEAF_NODE	2667:19	2667:19	14	,
ARGUMENT	2668:4	2668:4	14	ORIENTATION_TOPLEFT
FIELD	2668:4	2668:4	15	ORIENTATION_TOPLEFT
LEAF_NODE	2668:4	2668:4	16	ORIENTATION_TOPLEFT
LEAF_NODE	2668:23	2668:23	14	,
ARGUMENT	2669:4	2669:4	14	0
FIELD	2669:4	2669:4	15	0
LEAF_NODE	2669:4	2669:4	16	0
LEAF_NODE	2669:5	2669:5	14	)
LEAF_NODE	2669:6	2669:6	10	)
STATEMENTS	2669:7	2675:3	10	
LEAF_NODE	2669:7	2669:7	11	{
STATEMENTS	2670:4	2674:4	11	
EXPR_STATEMENT	2670:4	2672:25	12	TIFFError ( TIFF2PDF_MODULE , "Can't use TIFFReadRGBAImageOriented to extract RGB image from %s" , TIFFFileName ( input ) ) ;
EXPR	2670:4	2670:4	13	TIFFError ( TIFF2PDF_MODULE , "Can't use TIFFReadRGBAImageOriented to extract RGB image from %s" , TIFFFileName ( input ) )
FUNCTION_CALL	2670:4	2672:24	14	TIFFError ( TIFF2PDF_MODULE , "Can't use TIFFReadRGBAImageOriented to extract RGB image from %s" , TIFFFileName ( input ) )
CALLEE	2670:4	2670:4	15	TIFFError
LEAF_NODE	2670:4	2670:4	16	TIFFError
LEAF_NODE	2670:13	2670:13	15	(
ARGUMENT	2670:14	2670:14	15	TIFF2PDF_MODULE
FIELD	2670:14	2670:14	16	TIFF2PDF_MODULE
LEAF_NODE	2670:14	2670:14	17	TIFF2PDF_MODULE
LEAF_NODE	2670:29	2670:29	15	,
ARGUMENT	2671:1	2671:1	15	"Can't use TIFFReadRGBAImageOriented to extract RGB image from %s"
FIELD	2671:1	2671:1	16	"Can't use TIFFReadRGBAImageOriented to extract RGB image from %s"
LEAF_NODE	2671:1	2671:1	17	"Can't use TIFFReadRGBAImageOriented to extract RGB image from %s"
LEAF_NODE	2671:67	2671:67	15	,
ARGUMENT	2672:5	2672:5	15	TIFFFileName ( input )
FUNCTION_CALL	2672:5	2672:23	16	TIFFFileName ( input )
CALLEE	2672:5	2672:5	17	TIFFFileName
LEAF_NODE	2672:5	2672:5	18	TIFFFileName
LEAF_NODE	2672:17	2672:17	17	(
ARGUMENT	2672:18	2672:18	17	input
FIELD	2672:18	2672:18	18	input
LEAF_NODE	2672:18	2672:18	19	input
LEAF_NODE	2672:23	2672:23	17	)
LEAF_NODE	2672:24	2672:24	15	)
LEAF_NODE	2672:25	2672:25	13	;
EXPR_STATEMENT	2673:4	2673:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2673:4	2673:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2673:4	2673:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2673:4	2673:4	15	t2p -> t2p_error
FIELD	2673:4	2673:9	16	t2p -> t2p_error
LEAF_NODE	2673:4	2673:4	17	t2p
LEAF_NODE	2673:7	2673:7	17	->
LEAF_NODE	2673:9	2673:9	17	t2p_error
ASSIGN_OP	2673:19	2673:19	15	=
LEAF_NODE	2673:19	2673:19	16	=
RVAL	2673:21	2673:21	15	T2P_ERR_ERROR
FIELD	2673:21	2673:21	16	T2P_ERR_ERROR
LEAF_NODE	2673:21	2673:21	17	T2P_ERR_ERROR
LEAF_NODE	2673:34	2673:34	13	;
JUMP_STATEMENT	2674:4	2674:13	12	return ( 0 ) ;
KEYWORD	2674:4	2674:4	13	return
LEAF_NODE	2674:4	2674:4	14	return
DESTINATION	2674:10	2674:10	13	( 0 )
EXPR	2674:10	2674:12	14	( 0 )
LEAF_NODE	2674:10	2674:10	15	(
FIELD	2674:11	2674:11	15	0
LEAF_NODE	2674:11	2674:11	16	0
LEAF_NODE	2674:12	2674:12	15	)
LEAF_NODE	2674:13	2674:13	13	;
LEAF_NODE	2675:3	2675:3	11	}
EXPR_STATEMENT	2676:3	2678:37	9	t2p -> tiff_datasize = t2p_sample_abgr_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length ) ;
EXPR	2676:3	2676:3	10	t2p -> tiff_datasize = t2p_sample_abgr_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
ASSIGN	2676:3	2676:22	11	t2p -> tiff_datasize = t2p_sample_abgr_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
LVAL	2676:3	2676:3	12	t2p -> tiff_datasize
FIELD	2676:3	2676:8	13	t2p -> tiff_datasize
LEAF_NODE	2676:3	2676:3	14	t2p
LEAF_NODE	2676:6	2676:6	14	->
LEAF_NODE	2676:8	2676:8	14	tiff_datasize
ASSIGN_OP	2676:21	2676:21	12	=
LEAF_NODE	2676:21	2676:21	13	=
RVAL	2676:22	2676:22	12	t2p_sample_abgr_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
FUNCTION_CALL	2676:22	2678:36	13	t2p_sample_abgr_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
CALLEE	2676:22	2676:22	14	t2p_sample_abgr_to_rgb
LEAF_NODE	2676:22	2676:22	15	t2p_sample_abgr_to_rgb
LEAF_NODE	2676:44	2676:44	14	(
ARGUMENT	2677:4	2677:14	14	( tdata_t ) buffer
LEAF_NODE	2677:4	2677:4	15	(
TYPE_NAME	2677:5	2677:5	15	tdata_t
LEAF_NODE	2677:5	2677:5	16	tdata_t
LEAF_NODE	2677:12	2677:12	15	)
FIELD	2677:14	2677:14	15	buffer
LEAF_NODE	2677:14	2677:14	16	buffer
LEAF_NODE	2677:20	2677:20	14	,
ARGUMENT	2678:4	2678:20	14	t2p -> tiff_width * t2p -> tiff_length
FIELD	2678:4	2678:9	15	t2p -> tiff_width
LEAF_NODE	2678:4	2678:4	16	t2p
LEAF_NODE	2678:7	2678:7	16	->
LEAF_NODE	2678:9	2678:9	16	tiff_width
LEAF_NODE	2678:19	2678:19	15	*
FIELD	2678:20	2678:25	15	t2p -> tiff_length
LEAF_NODE	2678:20	2678:20	16	t2p
LEAF_NODE	2678:23	2678:23	16	->
LEAF_NODE	2678:25	2678:25	16	tiff_length
LEAF_NODE	2678:36	2678:36	14	)
LEAF_NODE	2678:37	2678:37	10	;
LEAF_NODE	2680:2	2680:2	8	}
SELECTION	2682:2	2682:57	6	
KEYWORD	2682:2	2682:2	7	if
LEAF_NODE	2682:2	2682:2	8	if
LEAF_NODE	2682:4	2682:4	7	(
CONDITION	2682:5	2682:5	7	t2p -> pdf_sample & T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
EXPR	2682:5	2682:23	8	t2p -> pdf_sample & T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
FIELD	2682:5	2682:10	9	t2p -> pdf_sample
LEAF_NODE	2682:5	2682:5	10	t2p
LEAF_NODE	2682:8	2682:8	10	->
LEAF_NODE	2682:10	2682:10	10	pdf_sample
LEAF_NODE	2682:21	2682:21	9	&
FIELD	2682:23	2682:23	9	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LEAF_NODE	2682:23	2682:23	10	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LEAF_NODE	2682:56	2682:56	7	)
STATEMENTS	2682:57	2686:2	7	
LEAF_NODE	2682:57	2682:57	8	{
STATEMENTS	2683:3	2683:3	8	
EXPR_STATEMENT	2683:3	2685:37	9	t2p -> tiff_datasize = t2p_sample_lab_signed_to_unsigned ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length ) ;
EXPR	2683:3	2683:3	10	t2p -> tiff_datasize = t2p_sample_lab_signed_to_unsigned ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
ASSIGN	2683:3	2683:22	11	t2p -> tiff_datasize = t2p_sample_lab_signed_to_unsigned ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
LVAL	2683:3	2683:3	12	t2p -> tiff_datasize
FIELD	2683:3	2683:8	13	t2p -> tiff_datasize
LEAF_NODE	2683:3	2683:3	14	t2p
LEAF_NODE	2683:6	2683:6	14	->
LEAF_NODE	2683:8	2683:8	14	tiff_datasize
ASSIGN_OP	2683:21	2683:21	12	=
LEAF_NODE	2683:21	2683:21	13	=
RVAL	2683:22	2683:22	12	t2p_sample_lab_signed_to_unsigned ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
FUNCTION_CALL	2683:22	2685:36	13	t2p_sample_lab_signed_to_unsigned ( ( tdata_t ) buffer , t2p -> tiff_width * t2p -> tiff_length )
CALLEE	2683:22	2683:22	14	t2p_sample_lab_signed_to_unsigned
LEAF_NODE	2683:22	2683:22	15	t2p_sample_lab_signed_to_unsigned
LEAF_NODE	2683:55	2683:55	14	(
ARGUMENT	2684:4	2684:13	14	( tdata_t ) buffer
LEAF_NODE	2684:4	2684:4	15	(
TYPE_NAME	2684:5	2684:5	15	tdata_t
LEAF_NODE	2684:5	2684:5	16	tdata_t
LEAF_NODE	2684:12	2684:12	15	)
FIELD	2684:13	2684:13	15	buffer
LEAF_NODE	2684:13	2684:13	16	buffer
LEAF_NODE	2684:19	2684:19	14	,
ARGUMENT	2685:4	2685:20	14	t2p -> tiff_width * t2p -> tiff_length
FIELD	2685:4	2685:9	15	t2p -> tiff_width
LEAF_NODE	2685:4	2685:4	16	t2p
LEAF_NODE	2685:7	2685:7	16	->
LEAF_NODE	2685:9	2685:9	16	tiff_width
LEAF_NODE	2685:19	2685:19	15	*
FIELD	2685:20	2685:25	15	t2p -> tiff_length
LEAF_NODE	2685:20	2685:20	16	t2p
LEAF_NODE	2685:23	2685:23	16	->
LEAF_NODE	2685:25	2685:25	16	tiff_length
LEAF_NODE	2685:36	2685:36	14	)
LEAF_NODE	2685:37	2685:37	10	;
LEAF_NODE	2686:2	2686:2	8	}
LEAF_NODE	2687:1	2687:1	5	}
LABEL	2689:0	2689:9	3	dataready :
LEAF_NODE	2689:0	2689:0	4	dataready
LEAF_NODE	2689:9	2689:9	4	:
EXPR_STATEMENT	2691:1	2691:20	3	t2p_disable ( output ) ;
EXPR	2691:1	2691:1	4	t2p_disable ( output )
FUNCTION_CALL	2691:1	2691:19	5	t2p_disable ( output )
CALLEE	2691:1	2691:1	6	t2p_disable
LEAF_NODE	2691:1	2691:1	7	t2p_disable
LEAF_NODE	2691:12	2691:12	6	(
ARGUMENT	2691:13	2691:13	6	output
FIELD	2691:13	2691:13	7	output
LEAF_NODE	2691:13	2691:13	8	output
LEAF_NODE	2691:19	2691:19	6	)
LEAF_NODE	2691:20	2691:20	4	;
EXPR_STATEMENT	2692:1	2692:65	3	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , t2p -> tiff_photometric ) ;
EXPR	2692:1	2692:1	4	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , t2p -> tiff_photometric )
FUNCTION_CALL	2692:1	2692:64	5	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , t2p -> tiff_photometric )
CALLEE	2692:1	2692:1	6	TIFFSetField
LEAF_NODE	2692:1	2692:1	7	TIFFSetField
LEAF_NODE	2692:13	2692:13	6	(
ARGUMENT	2692:14	2692:14	6	output
FIELD	2692:14	2692:14	7	output
LEAF_NODE	2692:14	2692:14	8	output
LEAF_NODE	2692:20	2692:20	6	,
ARGUMENT	2692:22	2692:22	6	TIFFTAG_PHOTOMETRIC
FIELD	2692:22	2692:22	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	2692:22	2692:22	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	2692:41	2692:41	6	,
ARGUMENT	2692:43	2692:43	6	t2p -> tiff_photometric
FIELD	2692:43	2692:48	7	t2p -> tiff_photometric
LEAF_NODE	2692:43	2692:43	8	t2p
LEAF_NODE	2692:46	2692:46	8	->
LEAF_NODE	2692:48	2692:48	8	tiff_photometric
LEAF_NODE	2692:64	2692:64	6	)
LEAF_NODE	2692:65	2692:65	4	;
EXPR_STATEMENT	2693:1	2693:69	3	TIFFSetField ( output , TIFFTAG_BITSPERSAMPLE , t2p -> tiff_bitspersample ) ;
EXPR	2693:1	2693:1	4	TIFFSetField ( output , TIFFTAG_BITSPERSAMPLE , t2p -> tiff_bitspersample )
FUNCTION_CALL	2693:1	2693:68	5	TIFFSetField ( output , TIFFTAG_BITSPERSAMPLE , t2p -> tiff_bitspersample )
CALLEE	2693:1	2693:1	6	TIFFSetField
LEAF_NODE	2693:1	2693:1	7	TIFFSetField
LEAF_NODE	2693:13	2693:13	6	(
ARGUMENT	2693:14	2693:14	6	output
FIELD	2693:14	2693:14	7	output
LEAF_NODE	2693:14	2693:14	8	output
LEAF_NODE	2693:20	2693:20	6	,
ARGUMENT	2693:22	2693:22	6	TIFFTAG_BITSPERSAMPLE
FIELD	2693:22	2693:22	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	2693:22	2693:22	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	2693:43	2693:43	6	,
ARGUMENT	2693:45	2693:45	6	t2p -> tiff_bitspersample
FIELD	2693:45	2693:50	7	t2p -> tiff_bitspersample
LEAF_NODE	2693:45	2693:45	8	t2p
LEAF_NODE	2693:48	2693:48	8	->
LEAF_NODE	2693:50	2693:50	8	tiff_bitspersample
LEAF_NODE	2693:68	2693:68	6	)
LEAF_NODE	2693:69	2693:69	4	;
EXPR_STATEMENT	2694:1	2694:73	3	TIFFSetField ( output , TIFFTAG_SAMPLESPERPIXEL , t2p -> tiff_samplesperpixel ) ;
EXPR	2694:1	2694:1	4	TIFFSetField ( output , TIFFTAG_SAMPLESPERPIXEL , t2p -> tiff_samplesperpixel )
FUNCTION_CALL	2694:1	2694:72	5	TIFFSetField ( output , TIFFTAG_SAMPLESPERPIXEL , t2p -> tiff_samplesperpixel )
CALLEE	2694:1	2694:1	6	TIFFSetField
LEAF_NODE	2694:1	2694:1	7	TIFFSetField
LEAF_NODE	2694:13	2694:13	6	(
ARGUMENT	2694:14	2694:14	6	output
FIELD	2694:14	2694:14	7	output
LEAF_NODE	2694:14	2694:14	8	output
LEAF_NODE	2694:20	2694:20	6	,
ARGUMENT	2694:22	2694:22	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	2694:22	2694:22	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	2694:22	2694:22	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	2694:45	2694:45	6	,
ARGUMENT	2694:47	2694:47	6	t2p -> tiff_samplesperpixel
FIELD	2694:47	2694:52	7	t2p -> tiff_samplesperpixel
LEAF_NODE	2694:47	2694:47	8	t2p
LEAF_NODE	2694:50	2694:50	8	->
LEAF_NODE	2694:52	2694:52	8	tiff_samplesperpixel
LEAF_NODE	2694:72	2694:72	6	)
LEAF_NODE	2694:73	2694:73	4	;
EXPR_STATEMENT	2695:1	2695:58	3	TIFFSetField ( output , TIFFTAG_IMAGEWIDTH , t2p -> tiff_width ) ;
EXPR	2695:1	2695:1	4	TIFFSetField ( output , TIFFTAG_IMAGEWIDTH , t2p -> tiff_width )
FUNCTION_CALL	2695:1	2695:57	5	TIFFSetField ( output , TIFFTAG_IMAGEWIDTH , t2p -> tiff_width )
CALLEE	2695:1	2695:1	6	TIFFSetField
LEAF_NODE	2695:1	2695:1	7	TIFFSetField
LEAF_NODE	2695:13	2695:13	6	(
ARGUMENT	2695:14	2695:14	6	output
FIELD	2695:14	2695:14	7	output
LEAF_NODE	2695:14	2695:14	8	output
LEAF_NODE	2695:20	2695:20	6	,
ARGUMENT	2695:22	2695:22	6	TIFFTAG_IMAGEWIDTH
FIELD	2695:22	2695:22	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	2695:22	2695:22	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	2695:40	2695:40	6	,
ARGUMENT	2695:42	2695:42	6	t2p -> tiff_width
FIELD	2695:42	2695:47	7	t2p -> tiff_width
LEAF_NODE	2695:42	2695:42	8	t2p
LEAF_NODE	2695:45	2695:45	8	->
LEAF_NODE	2695:47	2695:47	8	tiff_width
LEAF_NODE	2695:57	2695:57	6	)
LEAF_NODE	2695:58	2695:58	4	;
EXPR_STATEMENT	2696:1	2696:60	3	TIFFSetField ( output , TIFFTAG_IMAGELENGTH , t2p -> tiff_length ) ;
EXPR	2696:1	2696:1	4	TIFFSetField ( output , TIFFTAG_IMAGELENGTH , t2p -> tiff_length )
FUNCTION_CALL	2696:1	2696:59	5	TIFFSetField ( output , TIFFTAG_IMAGELENGTH , t2p -> tiff_length )
CALLEE	2696:1	2696:1	6	TIFFSetField
LEAF_NODE	2696:1	2696:1	7	TIFFSetField
LEAF_NODE	2696:13	2696:13	6	(
ARGUMENT	2696:14	2696:14	6	output
FIELD	2696:14	2696:14	7	output
LEAF_NODE	2696:14	2696:14	8	output
LEAF_NODE	2696:20	2696:20	6	,
ARGUMENT	2696:22	2696:22	6	TIFFTAG_IMAGELENGTH
FIELD	2696:22	2696:22	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	2696:22	2696:22	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	2696:41	2696:41	6	,
ARGUMENT	2696:43	2696:43	6	t2p -> tiff_length
FIELD	2696:43	2696:48	7	t2p -> tiff_length
LEAF_NODE	2696:43	2696:43	8	t2p
LEAF_NODE	2696:46	2696:46	8	->
LEAF_NODE	2696:48	2696:48	8	tiff_length
LEAF_NODE	2696:59	2696:59	6	)
LEAF_NODE	2696:60	2696:60	4	;
EXPR_STATEMENT	2697:1	2697:61	3	TIFFSetField ( output , TIFFTAG_ROWSPERSTRIP , t2p -> tiff_length ) ;
EXPR	2697:1	2697:1	4	TIFFSetField ( output , TIFFTAG_ROWSPERSTRIP , t2p -> tiff_length )
FUNCTION_CALL	2697:1	2697:60	5	TIFFSetField ( output , TIFFTAG_ROWSPERSTRIP , t2p -> tiff_length )
CALLEE	2697:1	2697:1	6	TIFFSetField
LEAF_NODE	2697:1	2697:1	7	TIFFSetField
LEAF_NODE	2697:13	2697:13	6	(
ARGUMENT	2697:14	2697:14	6	output
FIELD	2697:14	2697:14	7	output
LEAF_NODE	2697:14	2697:14	8	output
LEAF_NODE	2697:20	2697:20	6	,
ARGUMENT	2697:22	2697:22	6	TIFFTAG_ROWSPERSTRIP
FIELD	2697:22	2697:22	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	2697:22	2697:22	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	2697:42	2697:42	6	,
ARGUMENT	2697:44	2697:44	6	t2p -> tiff_length
FIELD	2697:44	2697:49	7	t2p -> tiff_length
LEAF_NODE	2697:44	2697:44	8	t2p
LEAF_NODE	2697:47	2697:47	8	->
LEAF_NODE	2697:49	2697:49	8	tiff_length
LEAF_NODE	2697:60	2697:60	6	)
LEAF_NODE	2697:61	2697:61	4	;
EXPR_STATEMENT	2698:1	2698:64	3	TIFFSetField ( output , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	2698:1	2698:1	4	TIFFSetField ( output , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	2698:1	2698:63	5	TIFFSetField ( output , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	2698:1	2698:1	6	TIFFSetField
LEAF_NODE	2698:1	2698:1	7	TIFFSetField
LEAF_NODE	2698:13	2698:13	6	(
ARGUMENT	2698:14	2698:14	6	output
FIELD	2698:14	2698:14	7	output
LEAF_NODE	2698:14	2698:14	8	output
LEAF_NODE	2698:20	2698:20	6	,
ARGUMENT	2698:22	2698:22	6	TIFFTAG_PLANARCONFIG
FIELD	2698:22	2698:22	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	2698:22	2698:22	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	2698:42	2698:42	6	,
ARGUMENT	2698:44	2698:44	6	PLANARCONFIG_CONTIG
FIELD	2698:44	2698:44	7	PLANARCONFIG_CONTIG
LEAF_NODE	2698:44	2698:44	8	PLANARCONFIG_CONTIG
LEAF_NODE	2698:63	2698:63	6	)
LEAF_NODE	2698:64	2698:64	4	;
EXPR_STATEMENT	2699:1	2699:59	3	TIFFSetField ( output , TIFFTAG_FILLORDER , FILLORDER_MSB2LSB ) ;
EXPR	2699:1	2699:1	4	TIFFSetField ( output , TIFFTAG_FILLORDER , FILLORDER_MSB2LSB )
FUNCTION_CALL	2699:1	2699:58	5	TIFFSetField ( output , TIFFTAG_FILLORDER , FILLORDER_MSB2LSB )
CALLEE	2699:1	2699:1	6	TIFFSetField
LEAF_NODE	2699:1	2699:1	7	TIFFSetField
LEAF_NODE	2699:13	2699:13	6	(
ARGUMENT	2699:14	2699:14	6	output
FIELD	2699:14	2699:14	7	output
LEAF_NODE	2699:14	2699:14	8	output
LEAF_NODE	2699:20	2699:20	6	,
ARGUMENT	2699:22	2699:22	6	TIFFTAG_FILLORDER
FIELD	2699:22	2699:22	7	TIFFTAG_FILLORDER
LEAF_NODE	2699:22	2699:22	8	TIFFTAG_FILLORDER
LEAF_NODE	2699:39	2699:39	6	,
ARGUMENT	2699:41	2699:41	6	FILLORDER_MSB2LSB
FIELD	2699:41	2699:41	7	FILLORDER_MSB2LSB
LEAF_NODE	2699:41	2699:41	8	FILLORDER_MSB2LSB
LEAF_NODE	2699:58	2699:58	6	)
LEAF_NODE	2699:59	2699:59	4	;
SELECTION	2701:1	2701:29	3	
KEYWORD	2701:1	2701:1	4	switch
LEAF_NODE	2701:1	2701:1	5	switch
LEAF_NODE	2701:7	2701:7	4	(
CONDITION	2701:8	2701:8	4	t2p -> pdf_compression
EXPR	2701:8	2701:8	5	t2p -> pdf_compression
FIELD	2701:8	2701:13	6	t2p -> pdf_compression
LEAF_NODE	2701:8	2701:8	7	t2p
LEAF_NODE	2701:11	2701:11	7	->
LEAF_NODE	2701:13	2701:13	7	pdf_compression
LEAF_NODE	2701:28	2701:28	4	)
STATEMENTS	2701:29	2773:1	4	
LEAF_NODE	2701:29	2701:29	5	{
STATEMENTS	2702:1	2772:2	5	
LABEL	2702:1	2702:23	6	case T2P_COMPRESS_NONE :
LEAF_NODE	2702:1	2702:1	7	case
LEAF_NODE	2702:6	2702:6	7	T2P_COMPRESS_NONE
LEAF_NODE	2702:23	2702:23	7	:
EXPR_STATEMENT	2703:2	2703:61	6	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_NONE ) ;
EXPR	2703:2	2703:2	7	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
FUNCTION_CALL	2703:2	2703:60	8	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
CALLEE	2703:2	2703:2	9	TIFFSetField
LEAF_NODE	2703:2	2703:2	10	TIFFSetField
LEAF_NODE	2703:14	2703:14	9	(
ARGUMENT	2703:15	2703:15	9	output
FIELD	2703:15	2703:15	10	output
LEAF_NODE	2703:15	2703:15	11	output
LEAF_NODE	2703:21	2703:21	9	,
ARGUMENT	2703:23	2703:23	9	TIFFTAG_COMPRESSION
FIELD	2703:23	2703:23	10	TIFFTAG_COMPRESSION
LEAF_NODE	2703:23	2703:23	11	TIFFTAG_COMPRESSION
LEAF_NODE	2703:42	2703:42	9	,
ARGUMENT	2703:44	2703:44	9	COMPRESSION_NONE
FIELD	2703:44	2703:44	10	COMPRESSION_NONE
LEAF_NODE	2703:44	2703:44	11	COMPRESSION_NONE
LEAF_NODE	2703:60	2703:60	9	)
LEAF_NODE	2703:61	2703:61	7	;
JUMP_STATEMENT	2704:2	2704:7	6	break DESTINATION ;
KEYWORD	2704:2	2704:2	7	break
LEAF_NODE	2704:2	2704:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2704:7	2704:7	7	;
LABEL	2706:1	2706:21	6	case T2P_COMPRESS_G4 :
LEAF_NODE	2706:1	2706:1	7	case
LEAF_NODE	2706:6	2706:6	7	T2P_COMPRESS_G4
LEAF_NODE	2706:21	2706:21	7	:
EXPR_STATEMENT	2707:2	2707:66	6	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_CCITTFAX4 ) ;
EXPR	2707:2	2707:2	7	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_CCITTFAX4 )
FUNCTION_CALL	2707:2	2707:65	8	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_CCITTFAX4 )
CALLEE	2707:2	2707:2	9	TIFFSetField
LEAF_NODE	2707:2	2707:2	10	TIFFSetField
LEAF_NODE	2707:14	2707:14	9	(
ARGUMENT	2707:15	2707:15	9	output
FIELD	2707:15	2707:15	10	output
LEAF_NODE	2707:15	2707:15	11	output
LEAF_NODE	2707:21	2707:21	9	,
ARGUMENT	2707:23	2707:23	9	TIFFTAG_COMPRESSION
FIELD	2707:23	2707:23	10	TIFFTAG_COMPRESSION
LEAF_NODE	2707:23	2707:23	11	TIFFTAG_COMPRESSION
LEAF_NODE	2707:42	2707:42	9	,
ARGUMENT	2707:44	2707:44	9	COMPRESSION_CCITTFAX4
FIELD	2707:44	2707:44	10	COMPRESSION_CCITTFAX4
LEAF_NODE	2707:44	2707:44	11	COMPRESSION_CCITTFAX4
LEAF_NODE	2707:65	2707:65	9	)
LEAF_NODE	2707:66	2707:66	7	;
JUMP_STATEMENT	2708:2	2708:7	6	break DESTINATION ;
KEYWORD	2708:2	2708:2	7	break
LEAF_NODE	2708:2	2708:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2708:7	2708:7	7	;
LABEL	2711:1	2711:23	6	case T2P_COMPRESS_JPEG :
LEAF_NODE	2711:1	2711:1	7	case
LEAF_NODE	2711:6	2711:6	7	T2P_COMPRESS_JPEG
LEAF_NODE	2711:23	2711:23	7	:
SELECTION	2712:2	2712:47	6	
KEYWORD	2712:2	2712:2	7	if
LEAF_NODE	2712:2	2712:2	8	if
LEAF_NODE	2712:4	2712:4	7	(
CONDITION	2712:5	2712:5	7	t2p -> tiff_photometric == PHOTOMETRIC_YCBCR
EXPR	2712:5	2712:28	8	t2p -> tiff_photometric == PHOTOMETRIC_YCBCR
FIELD	2712:5	2712:10	9	t2p -> tiff_photometric
LEAF_NODE	2712:5	2712:5	10	t2p
LEAF_NODE	2712:8	2712:8	10	->
LEAF_NODE	2712:10	2712:10	10	tiff_photometric
EQ_OPERATOR	2712:26	2712:26	9	==
LEAF_NODE	2712:26	2712:26	10	==
FIELD	2712:28	2712:28	9	PHOTOMETRIC_YCBCR
LEAF_NODE	2712:28	2712:28	10	PHOTOMETRIC_YCBCR
LEAF_NODE	2712:45	2712:45	7	)
STATEMENTS	2712:47	2722:2	7	
LEAF_NODE	2712:47	2712:47	8	{
STATEMENTS	2713:3	2719:3	8	
SIMPLE_DECL	2713:3	2713:26	9	uint16 hor ; hor = 0 , uint16 ver ; ver = 0 ;
INIT_DECL_LIST	2713:3	2713:3	10	uint16 hor ; hor = 0 , uint16 ver ; ver = 0
VAR_DECL	2713:3	2713:10	11	uint16 hor ; hor = 0
TYPE	2713:3	2713:3	12	uint16
TYPE_NAME	2713:3	2713:3	13	uint16
LEAF_NODE	2713:3	2713:3	14	uint16
NAME	2713:10	2713:10	12	hor
LEAF_NODE	2713:10	2713:10	13	hor
LEAF_NODE	0:0	0:0	12	;
INIT	2713:10	2713:10	12	hor = 0
ASSIGN	2713:10	2713:16	13	hor = 0
LVAL	2713:10	2713:10	14	hor
NAME	2713:10	2713:10	15	hor
LEAF_NODE	2713:10	2713:10	16	hor
ASSIGN_OP	2713:14	2713:14	14	=
LEAF_NODE	2713:14	2713:14	15	=
RVAL	2713:16	2713:16	14	0
FIELD	2713:16	2713:16	15	0
LEAF_NODE	2713:16	2713:16	16	0
LEAF_NODE	2713:17	2713:17	11	,
VAR_DECL	2713:3	2713:19	11	uint16 ver ; ver = 0
TYPE	2713:3	2713:3	12	uint16
TYPE_NAME	2713:3	2713:3	13	uint16
LEAF_NODE	2713:3	2713:3	14	uint16
NAME	2713:19	2713:19	12	ver
LEAF_NODE	2713:19	2713:19	13	ver
LEAF_NODE	0:0	0:0	12	;
INIT	2713:19	2713:19	12	ver = 0
ASSIGN	2713:19	2713:25	13	ver = 0
LVAL	2713:19	2713:19	14	ver
NAME	2713:19	2713:19	15	ver
LEAF_NODE	2713:19	2713:19	16	ver
ASSIGN_OP	2713:23	2713:23	14	=
LEAF_NODE	2713:23	2713:23	15	=
RVAL	2713:25	2713:25	14	0
FIELD	2713:25	2713:25	15	0
LEAF_NODE	2713:25	2713:25	16	0
LEAF_NODE	2713:26	2713:26	10	;
SELECTION	2714:3	2714:71	9	
KEYWORD	2714:3	2714:3	10	if
LEAF_NODE	2714:3	2714:3	11	if
LEAF_NODE	2714:6	2714:6	10	(
CONDITION	2714:7	2714:7	10	TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & hor , & ver ) != 0
EXPR	2714:7	2714:67	11	TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & hor , & ver ) != 0
FUNCTION_CALL	2714:7	2714:63	12	TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & hor , & ver )
CALLEE	2714:7	2714:7	13	TIFFGetField
LEAF_NODE	2714:7	2714:7	14	TIFFGetField
LEAF_NODE	2714:19	2714:19	13	(
ARGUMENT	2714:20	2714:20	13	input
FIELD	2714:20	2714:20	14	input
LEAF_NODE	2714:20	2714:20	15	input
LEAF_NODE	2714:25	2714:25	13	,
ARGUMENT	2714:27	2714:27	13	TIFFTAG_YCBCRSUBSAMPLING
FIELD	2714:27	2714:27	14	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2714:27	2714:27	15	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2714:51	2714:51	13	,
ARGUMENT	2714:53	2714:53	13	& hor
UNARY_EXPR	2714:53	2714:54	14	& hor
UNARY_OPERATOR	2714:53	2714:53	15	&
LEAF_NODE	2714:53	2714:53	16	&
FIELD	2714:54	2714:54	15	hor
LEAF_NODE	2714:54	2714:54	16	hor
LEAF_NODE	2714:57	2714:57	13	,
ARGUMENT	2714:59	2714:59	13	& ver
UNARY_EXPR	2714:59	2714:60	14	& ver
UNARY_OPERATOR	2714:59	2714:59	15	&
LEAF_NODE	2714:59	2714:59	16	&
FIELD	2714:60	2714:60	15	ver
LEAF_NODE	2714:60	2714:60	16	ver
LEAF_NODE	2714:63	2714:63	13	)
EQ_OPERATOR	2714:65	2714:65	12	!=
LEAF_NODE	2714:65	2714:65	13	!=
FIELD	2714:67	2714:67	12	0
LEAF_NODE	2714:67	2714:67	13	0
LEAF_NODE	2714:69	2714:69	10	)
STATEMENTS	2714:71	2718:3	10	
LEAF_NODE	2714:71	2714:71	11	{
STATEMENTS	2715:4	2715:4	11	
SELECTION	2715:4	2715:28	12	
KEYWORD	2715:4	2715:4	13	if
LEAF_NODE	2715:4	2715:4	14	if
LEAF_NODE	2715:6	2715:6	13	(
CONDITION	2715:7	2715:7	13	hor != 0 && ver != 0
EXPR	2715:7	2715:7	14	hor != 0 && ver != 0
AND	2715:7	2715:19	15	hor != 0 && ver != 0
EXPR	2715:7	2715:14	16	hor != 0
FIELD	2715:7	2715:7	17	hor
LEAF_NODE	2715:7	2715:7	18	hor
EQ_OPERATOR	2715:11	2715:11	17	!=
LEAF_NODE	2715:11	2715:11	18	!=
FIELD	2715:14	2715:14	17	0
LEAF_NODE	2715:14	2715:14	18	0
LEAF_NODE	2715:16	2715:16	16	&&
EXPR	2715:19	2715:26	16	ver != 0
FIELD	2715:19	2715:19	17	ver
LEAF_NODE	2715:19	2715:19	18	ver
EQ_OPERATOR	2715:23	2715:23	17	!=
LEAF_NODE	2715:23	2715:23	18	!=
FIELD	2715:26	2715:26	17	0
LEAF_NODE	2715:26	2715:26	18	0
LEAF_NODE	2715:27	2715:27	13	)
STATEMENTS	2715:28	2717:4	13	
LEAF_NODE	2715:28	2715:28	14	{
STATEMENTS	2716:5	2716:5	14	
EXPR_STATEMENT	2716:5	2716:61	15	TIFFSetField ( output , TIFFTAG_YCBCRSUBSAMPLING , hor , ver ) ;
EXPR	2716:5	2716:5	16	TIFFSetField ( output , TIFFTAG_YCBCRSUBSAMPLING , hor , ver )
FUNCTION_CALL	2716:5	2716:60	17	TIFFSetField ( output , TIFFTAG_YCBCRSUBSAMPLING , hor , ver )
CALLEE	2716:5	2716:5	18	TIFFSetField
LEAF_NODE	2716:5	2716:5	19	TIFFSetField
LEAF_NODE	2716:17	2716:17	18	(
ARGUMENT	2716:18	2716:18	18	output
FIELD	2716:18	2716:18	19	output
LEAF_NODE	2716:18	2716:18	20	output
LEAF_NODE	2716:24	2716:24	18	,
ARGUMENT	2716:26	2716:26	18	TIFFTAG_YCBCRSUBSAMPLING
FIELD	2716:26	2716:26	19	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2716:26	2716:26	20	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2716:50	2716:50	18	,
ARGUMENT	2716:52	2716:52	18	hor
FIELD	2716:52	2716:52	19	hor
LEAF_NODE	2716:52	2716:52	20	hor
LEAF_NODE	2716:55	2716:55	18	,
ARGUMENT	2716:57	2716:57	18	ver
FIELD	2716:57	2716:57	19	ver
LEAF_NODE	2716:57	2716:57	20	ver
LEAF_NODE	2716:60	2716:60	18	)
LEAF_NODE	2716:61	2716:61	16	;
LEAF_NODE	2717:4	2717:4	14	}
LEAF_NODE	2718:3	2718:3	11	}
SELECTION	2719:3	2719:68	9	
KEYWORD	2719:3	2719:3	10	if
LEAF_NODE	2719:3	2719:3	11	if
LEAF_NODE	2719:5	2719:5	10	(
CONDITION	2719:6	2719:6	10	TIFFGetField ( input , TIFFTAG_REFERENCEBLACKWHITE , & xfloatp ) != 0
EXPR	2719:6	2719:66	11	TIFFGetField ( input , TIFFTAG_REFERENCEBLACKWHITE , & xfloatp ) != 0
FUNCTION_CALL	2719:6	2719:63	12	TIFFGetField ( input , TIFFTAG_REFERENCEBLACKWHITE , & xfloatp )
CALLEE	2719:6	2719:6	13	TIFFGetField
LEAF_NODE	2719:6	2719:6	14	TIFFGetField
LEAF_NODE	2719:18	2719:18	13	(
ARGUMENT	2719:19	2719:19	13	input
FIELD	2719:19	2719:19	14	input
LEAF_NODE	2719:19	2719:19	15	input
LEAF_NODE	2719:24	2719:24	13	,
ARGUMENT	2719:26	2719:26	13	TIFFTAG_REFERENCEBLACKWHITE
FIELD	2719:26	2719:26	14	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	2719:26	2719:26	15	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	2719:53	2719:53	13	,
ARGUMENT	2719:55	2719:55	13	& xfloatp
UNARY_EXPR	2719:55	2719:56	14	& xfloatp
UNARY_OPERATOR	2719:55	2719:55	15	&
LEAF_NODE	2719:55	2719:55	16	&
FIELD	2719:56	2719:56	15	xfloatp
LEAF_NODE	2719:56	2719:56	16	xfloatp
LEAF_NODE	2719:63	2719:63	13	)
EQ_OPERATOR	2719:64	2719:64	12	!=
LEAF_NODE	2719:64	2719:64	13	!=
FIELD	2719:66	2719:66	12	0
LEAF_NODE	2719:66	2719:66	13	0
LEAF_NODE	2719:67	2719:67	10	)
STATEMENTS	2719:68	2721:3	10	
LEAF_NODE	2719:68	2719:68	11	{
STATEMENTS	2720:4	2720:4	11	
EXPR_STATEMENT	2720:4	2720:62	12	TIFFSetField ( output , TIFFTAG_REFERENCEBLACKWHITE , xfloatp ) ;
EXPR	2720:4	2720:4	13	TIFFSetField ( output , TIFFTAG_REFERENCEBLACKWHITE , xfloatp )
FUNCTION_CALL	2720:4	2720:61	14	TIFFSetField ( output , TIFFTAG_REFERENCEBLACKWHITE , xfloatp )
CALLEE	2720:4	2720:4	15	TIFFSetField
LEAF_NODE	2720:4	2720:4	16	TIFFSetField
LEAF_NODE	2720:16	2720:16	15	(
ARGUMENT	2720:17	2720:17	15	output
FIELD	2720:17	2720:17	16	output
LEAF_NODE	2720:17	2720:17	17	output
LEAF_NODE	2720:23	2720:23	15	,
ARGUMENT	2720:25	2720:25	15	TIFFTAG_REFERENCEBLACKWHITE
FIELD	2720:25	2720:25	16	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	2720:25	2720:25	17	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	2720:52	2720:52	15	,
ARGUMENT	2720:54	2720:54	15	xfloatp
FIELD	2720:54	2720:54	16	xfloatp
LEAF_NODE	2720:54	2720:54	17	xfloatp
LEAF_NODE	2720:61	2720:61	15	)
LEAF_NODE	2720:62	2720:62	13	;
LEAF_NODE	2721:3	2721:3	11	}
LEAF_NODE	2722:2	2722:2	8	}
SELECTION	2723:2	2723:68	6	
KEYWORD	2723:2	2723:2	7	if
LEAF_NODE	2723:2	2723:2	8	if
LEAF_NODE	2723:4	2723:4	7	(
CONDITION	2723:5	2723:5	7	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_JPEG ) == 0
EXPR	2723:5	2723:66	8	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_JPEG ) == 0
FUNCTION_CALL	2723:5	2723:63	9	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_JPEG )
CALLEE	2723:5	2723:5	10	TIFFSetField
LEAF_NODE	2723:5	2723:5	11	TIFFSetField
LEAF_NODE	2723:17	2723:17	10	(
ARGUMENT	2723:18	2723:18	10	output
FIELD	2723:18	2723:18	11	output
LEAF_NODE	2723:18	2723:18	12	output
LEAF_NODE	2723:24	2723:24	10	,
ARGUMENT	2723:26	2723:26	10	TIFFTAG_COMPRESSION
FIELD	2723:26	2723:26	11	TIFFTAG_COMPRESSION
LEAF_NODE	2723:26	2723:26	12	TIFFTAG_COMPRESSION
LEAF_NODE	2723:45	2723:45	10	,
ARGUMENT	2723:47	2723:47	10	COMPRESSION_JPEG
FIELD	2723:47	2723:47	11	COMPRESSION_JPEG
LEAF_NODE	2723:47	2723:47	12	COMPRESSION_JPEG
LEAF_NODE	2723:63	2723:63	10	)
EQ_OPERATOR	2723:64	2723:64	9	==
LEAF_NODE	2723:64	2723:64	10	==
FIELD	2723:66	2723:66	9	0
LEAF_NODE	2723:66	2723:66	10	0
LEAF_NODE	2723:67	2723:67	7	)
STATEMENTS	2723:68	2731:2	7	
LEAF_NODE	2723:68	2723:68	8	{
STATEMENTS	2724:3	2730:3	8	
EXPR_STATEMENT	2724:3	2727:25	9	TIFFError ( TIFF2PDF_MODULE , "Unable to use JPEG compression for input %s and output %s" , TIFFFileName ( input ) , TIFFFileName ( output ) ) ;
EXPR	2724:3	2724:3	10	TIFFError ( TIFF2PDF_MODULE , "Unable to use JPEG compression for input %s and output %s" , TIFFFileName ( input ) , TIFFFileName ( output ) )
FUNCTION_CALL	2724:3	2727:24	11	TIFFError ( TIFF2PDF_MODULE , "Unable to use JPEG compression for input %s and output %s" , TIFFFileName ( input ) , TIFFFileName ( output ) )
CALLEE	2724:3	2724:3	12	TIFFError
LEAF_NODE	2724:3	2724:3	13	TIFFError
LEAF_NODE	2724:12	2724:12	12	(
ARGUMENT	2724:13	2724:13	12	TIFF2PDF_MODULE
FIELD	2724:13	2724:13	13	TIFF2PDF_MODULE
LEAF_NODE	2724:13	2724:13	14	TIFF2PDF_MODULE
LEAF_NODE	2724:28	2724:28	12	,
ARGUMENT	2725:2	2725:2	12	"Unable to use JPEG compression for input %s and output %s"
FIELD	2725:2	2725:2	13	"Unable to use JPEG compression for input %s and output %s"
LEAF_NODE	2725:2	2725:2	14	"Unable to use JPEG compression for input %s and output %s"
LEAF_NODE	2725:61	2725:61	12	,
ARGUMENT	2726:4	2726:4	12	TIFFFileName ( input )
FUNCTION_CALL	2726:4	2726:22	13	TIFFFileName ( input )
CALLEE	2726:4	2726:4	14	TIFFFileName
LEAF_NODE	2726:4	2726:4	15	TIFFFileName
LEAF_NODE	2726:16	2726:16	14	(
ARGUMENT	2726:17	2726:17	14	input
FIELD	2726:17	2726:17	15	input
LEAF_NODE	2726:17	2726:17	16	input
LEAF_NODE	2726:22	2726:22	14	)
LEAF_NODE	2726:23	2726:23	12	,
ARGUMENT	2727:4	2727:4	12	TIFFFileName ( output )
FUNCTION_CALL	2727:4	2727:23	13	TIFFFileName ( output )
CALLEE	2727:4	2727:4	14	TIFFFileName
LEAF_NODE	2727:4	2727:4	15	TIFFFileName
LEAF_NODE	2727:16	2727:16	14	(
ARGUMENT	2727:17	2727:17	14	output
FIELD	2727:17	2727:17	15	output
LEAF_NODE	2727:17	2727:17	16	output
LEAF_NODE	2727:23	2727:23	14	)
LEAF_NODE	2727:24	2727:24	12	)
LEAF_NODE	2727:25	2727:25	10	;
EXPR_STATEMENT	2728:3	2728:20	9	_TIFFfree ( buffer ) ;
EXPR	2728:3	2728:3	10	_TIFFfree ( buffer )
FUNCTION_CALL	2728:3	2728:19	11	_TIFFfree ( buffer )
CALLEE	2728:3	2728:3	12	_TIFFfree
LEAF_NODE	2728:3	2728:3	13	_TIFFfree
LEAF_NODE	2728:12	2728:12	12	(
ARGUMENT	2728:13	2728:13	12	buffer
FIELD	2728:13	2728:13	13	buffer
LEAF_NODE	2728:13	2728:13	14	buffer
LEAF_NODE	2728:19	2728:19	12	)
LEAF_NODE	2728:20	2728:20	10	;
EXPR_STATEMENT	2729:3	2729:33	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2729:3	2729:3	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2729:3	2729:20	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2729:3	2729:3	12	t2p -> t2p_error
FIELD	2729:3	2729:8	13	t2p -> t2p_error
LEAF_NODE	2729:3	2729:3	14	t2p
LEAF_NODE	2729:6	2729:6	14	->
LEAF_NODE	2729:8	2729:8	14	t2p_error
ASSIGN_OP	2729:18	2729:18	12	=
LEAF_NODE	2729:18	2729:18	13	=
RVAL	2729:20	2729:20	12	T2P_ERR_ERROR
FIELD	2729:20	2729:20	13	T2P_ERR_ERROR
LEAF_NODE	2729:20	2729:20	14	T2P_ERR_ERROR
LEAF_NODE	2729:33	2729:33	10	;
JUMP_STATEMENT	2730:3	2730:12	9	return ( 0 ) ;
KEYWORD	2730:3	2730:3	10	return
LEAF_NODE	2730:3	2730:3	11	return
DESTINATION	2730:9	2730:9	10	( 0 )
EXPR	2730:9	2730:11	11	( 0 )
LEAF_NODE	2730:9	2730:9	12	(
FIELD	2730:10	2730:10	12	0
LEAF_NODE	2730:10	2730:10	13	0
LEAF_NODE	2730:11	2730:11	12	)
LEAF_NODE	2730:12	2730:12	10	;
LEAF_NODE	2731:2	2731:2	8	}
EXPR_STATEMENT	2732:2	2732:49	6	TIFFSetField ( output , TIFFTAG_JPEGTABLESMODE , 0 ) ;
EXPR	2732:2	2732:2	7	TIFFSetField ( output , TIFFTAG_JPEGTABLESMODE , 0 )
FUNCTION_CALL	2732:2	2732:48	8	TIFFSetField ( output , TIFFTAG_JPEGTABLESMODE , 0 )
CALLEE	2732:2	2732:2	9	TIFFSetField
LEAF_NODE	2732:2	2732:2	10	TIFFSetField
LEAF_NODE	2732:14	2732:14	9	(
ARGUMENT	2732:15	2732:15	9	output
FIELD	2732:15	2732:15	10	output
LEAF_NODE	2732:15	2732:15	11	output
LEAF_NODE	2732:21	2732:21	9	,
ARGUMENT	2732:23	2732:23	9	TIFFTAG_JPEGTABLESMODE
FIELD	2732:23	2732:23	10	TIFFTAG_JPEGTABLESMODE
LEAF_NODE	2732:23	2732:23	11	TIFFTAG_JPEGTABLESMODE
LEAF_NODE	2732:45	2732:45	9	,
ARGUMENT	2732:47	2732:47	9	0
FIELD	2732:47	2732:47	10	0
LEAF_NODE	2732:47	2732:47	11	0
LEAF_NODE	2732:48	2732:48	9	)
LEAF_NODE	2732:49	2732:49	7	;
SELECTION	2734:2	2734:53	6	
KEYWORD	2734:2	2734:2	7	if
LEAF_NODE	2734:2	2734:2	8	if
LEAF_NODE	2734:4	2734:4	7	(
CONDITION	2734:5	2734:5	7	t2p -> pdf_colorspace & ( T2P_CS_RGB | T2P_CS_LAB )
EXPR	2734:5	2734:51	8	t2p -> pdf_colorspace & ( T2P_CS_RGB | T2P_CS_LAB )
FIELD	2734:5	2734:10	9	t2p -> pdf_colorspace
LEAF_NODE	2734:5	2734:5	10	t2p
LEAF_NODE	2734:8	2734:8	10	->
LEAF_NODE	2734:10	2734:10	10	pdf_colorspace
LEAF_NODE	2734:25	2734:25	9	&
LEAF_NODE	2734:27	2734:27	9	(
BIT_OR	2734:28	2734:41	9	T2P_CS_RGB | T2P_CS_LAB
BIT_OR_ELEM	2734:28	2734:28	10	T2P_CS_RGB
FIELD	2734:28	2734:28	11	T2P_CS_RGB
LEAF_NODE	2734:28	2734:28	12	T2P_CS_RGB
LEAF_NODE	2734:39	2734:39	10	|
BIT_OR_ELEM	2734:41	2734:41	10	T2P_CS_LAB
FIELD	2734:41	2734:41	11	T2P_CS_LAB
LEAF_NODE	2734:41	2734:41	12	T2P_CS_LAB
LEAF_NODE	2734:51	2734:51	9	)
LEAF_NODE	2734:52	2734:52	7	)
STATEMENTS	2734:53	2741:2	7	
LEAF_NODE	2734:53	2734:53	8	{
STATEMENTS	2735:3	2738:5	8	
EXPR_STATEMENT	2735:3	2735:63	9	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR ) ;
EXPR	2735:3	2735:3	10	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
FUNCTION_CALL	2735:3	2735:62	11	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
CALLEE	2735:3	2735:3	12	TIFFSetField
LEAF_NODE	2735:3	2735:3	13	TIFFSetField
LEAF_NODE	2735:15	2735:15	12	(
ARGUMENT	2735:16	2735:16	12	output
FIELD	2735:16	2735:16	13	output
LEAF_NODE	2735:16	2735:16	14	output
LEAF_NODE	2735:22	2735:22	12	,
ARGUMENT	2735:24	2735:24	12	TIFFTAG_PHOTOMETRIC
FIELD	2735:24	2735:24	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	2735:24	2735:24	14	TIFFTAG_PHOTOMETRIC
LEAF_NODE	2735:43	2735:43	12	,
ARGUMENT	2735:45	2735:45	12	PHOTOMETRIC_YCBCR
FIELD	2735:45	2735:45	13	PHOTOMETRIC_YCBCR
LEAF_NODE	2735:45	2735:45	14	PHOTOMETRIC_YCBCR
LEAF_NODE	2735:62	2735:62	12	)
LEAF_NODE	2735:63	2735:63	10	;
SELECTION	2736:3	2736:49	9	
KEYWORD	2736:3	2736:3	10	if
LEAF_NODE	2736:3	2736:3	11	if
LEAF_NODE	2736:5	2736:5	10	(
CONDITION	2736:6	2736:6	10	t2p -> tiff_photometric != PHOTOMETRIC_YCBCR
EXPR	2736:6	2736:31	11	t2p -> tiff_photometric != PHOTOMETRIC_YCBCR
FIELD	2736:6	2736:11	12	t2p -> tiff_photometric
LEAF_NODE	2736:6	2736:6	13	t2p
LEAF_NODE	2736:9	2736:9	13	->
LEAF_NODE	2736:11	2736:11	13	tiff_photometric
EQ_OPERATOR	2736:28	2736:28	12	!=
LEAF_NODE	2736:28	2736:28	13	!=
FIELD	2736:31	2736:31	12	PHOTOMETRIC_YCBCR
LEAF_NODE	2736:31	2736:31	13	PHOTOMETRIC_YCBCR
LEAF_NODE	2736:48	2736:48	10	)
STATEMENTS	2736:49	2738:3	10	
LEAF_NODE	2736:49	2736:49	11	{
STATEMENTS	2737:4	2737:4	11	
EXPR_STATEMENT	2737:4	2737:66	12	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB ) ;
EXPR	2737:4	2737:4	13	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
FUNCTION_CALL	2737:4	2737:65	14	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
CALLEE	2737:4	2737:4	15	TIFFSetField
LEAF_NODE	2737:4	2737:4	16	TIFFSetField
LEAF_NODE	2737:16	2737:16	15	(
ARGUMENT	2737:17	2737:17	15	output
FIELD	2737:17	2737:17	16	output
LEAF_NODE	2737:17	2737:17	17	output
LEAF_NODE	2737:23	2737:23	15	,
ARGUMENT	2737:25	2737:25	15	TIFFTAG_JPEGCOLORMODE
FIELD	2737:25	2737:25	16	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	2737:25	2737:25	17	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	2737:46	2737:46	15	,
ARGUMENT	2737:48	2737:48	15	JPEGCOLORMODE_RGB
FIELD	2737:48	2737:48	16	JPEGCOLORMODE_RGB
LEAF_NODE	2737:48	2737:48	17	JPEGCOLORMODE_RGB
LEAF_NODE	2737:65	2737:65	15	)
LEAF_NODE	2737:66	2737:66	13	;
LEAF_NODE	2738:3	2738:3	11	}
SELECTION	2738:5	2738:10	9	
KEYWORD	2738:5	2738:5	10	else
LEAF_NODE	2738:5	2738:5	11	else
STATEMENTS	2738:10	2740:3	10	
LEAF_NODE	2738:10	2738:10	11	{
STATEMENTS	2739:4	2739:4	11	
EXPR_STATEMENT	2739:4	2739:66	12	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RAW ) ;
EXPR	2739:4	2739:4	13	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RAW )
FUNCTION_CALL	2739:4	2739:65	14	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RAW )
CALLEE	2739:4	2739:4	15	TIFFSetField
LEAF_NODE	2739:4	2739:4	16	TIFFSetField
LEAF_NODE	2739:16	2739:16	15	(
ARGUMENT	2739:17	2739:17	15	output
FIELD	2739:17	2739:17	16	output
LEAF_NODE	2739:17	2739:17	17	output
LEAF_NODE	2739:23	2739:23	15	,
ARGUMENT	2739:25	2739:25	15	TIFFTAG_JPEGCOLORMODE
FIELD	2739:25	2739:25	16	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	2739:25	2739:25	17	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	2739:46	2739:46	15	,
ARGUMENT	2739:48	2739:48	15	JPEGCOLORMODE_RAW
FIELD	2739:48	2739:48	16	JPEGCOLORMODE_RAW
LEAF_NODE	2739:48	2739:48	17	JPEGCOLORMODE_RAW
LEAF_NODE	2739:65	2739:65	15	)
LEAF_NODE	2739:66	2739:66	13	;
LEAF_NODE	2740:3	2740:3	11	}
LEAF_NODE	2741:2	2741:2	8	}
SELECTION	2742:2	2742:39	6	
KEYWORD	2742:2	2742:2	7	if
LEAF_NODE	2742:2	2742:2	8	if
LEAF_NODE	2742:4	2742:4	7	(
CONDITION	2742:5	2742:5	7	t2p -> pdf_colorspace & T2P_CS_GRAY
EXPR	2742:5	2742:27	8	t2p -> pdf_colorspace & T2P_CS_GRAY
FIELD	2742:5	2742:10	9	t2p -> pdf_colorspace
LEAF_NODE	2742:5	2742:5	10	t2p
LEAF_NODE	2742:8	2742:8	10	->
LEAF_NODE	2742:10	2742:10	10	pdf_colorspace
LEAF_NODE	2742:25	2742:25	9	&
FIELD	2742:27	2742:27	9	T2P_CS_GRAY
LEAF_NODE	2742:27	2742:27	10	T2P_CS_GRAY
LEAF_NODE	2742:38	2742:38	7	)
STATEMENTS	2742:39	2744:2	7	
LEAF_NODE	2742:39	2742:39	8	{
STATEMENTS	2743:3	2743:3	8	
EXPR_STATEMENT	2743:3	2743:10	9	( void ) 0 ;
EXPR	2743:3	2743:9	10	( void ) 0
LEAF_NODE	2743:3	2743:3	11	(
TYPE_NAME	2743:4	2743:4	11	void
LEAF_NODE	2743:4	2743:4	12	void
LEAF_NODE	2743:8	2743:8	11	)
FIELD	2743:9	2743:9	11	0
LEAF_NODE	2743:9	2743:9	12	0
LEAF_NODE	2743:10	2743:10	10	;
LEAF_NODE	2744:2	2744:2	8	}
SELECTION	2745:2	2745:39	6	
KEYWORD	2745:2	2745:2	7	if
LEAF_NODE	2745:2	2745:2	8	if
LEAF_NODE	2745:4	2745:4	7	(
CONDITION	2745:5	2745:5	7	t2p -> pdf_colorspace & T2P_CS_CMYK
EXPR	2745:5	2745:27	8	t2p -> pdf_colorspace & T2P_CS_CMYK
FIELD	2745:5	2745:10	9	t2p -> pdf_colorspace
LEAF_NODE	2745:5	2745:5	10	t2p
LEAF_NODE	2745:8	2745:8	10	->
LEAF_NODE	2745:10	2745:10	10	pdf_colorspace
LEAF_NODE	2745:25	2745:25	9	&
FIELD	2745:27	2745:27	9	T2P_CS_CMYK
LEAF_NODE	2745:27	2745:27	10	T2P_CS_CMYK
LEAF_NODE	2745:38	2745:38	7	)
STATEMENTS	2745:39	2747:2	7	
LEAF_NODE	2745:39	2745:39	8	{
STATEMENTS	2746:3	2746:3	8	
EXPR_STATEMENT	2746:3	2746:10	9	( void ) 0 ;
EXPR	2746:3	2746:9	10	( void ) 0
LEAF_NODE	2746:3	2746:3	11	(
TYPE_NAME	2746:4	2746:4	11	void
LEAF_NODE	2746:4	2746:4	12	void
LEAF_NODE	2746:8	2746:8	11	)
FIELD	2746:9	2746:9	11	0
LEAF_NODE	2746:9	2746:9	12	0
LEAF_NODE	2746:10	2746:10	10	;
LEAF_NODE	2747:2	2747:2	8	}
SELECTION	2748:2	2748:45	6	
KEYWORD	2748:2	2748:2	7	if
LEAF_NODE	2748:2	2748:2	8	if
LEAF_NODE	2748:4	2748:4	7	(
CONDITION	2748:5	2748:5	7	t2p -> pdf_defaultcompressionquality != 0
EXPR	2748:5	2748:43	8	t2p -> pdf_defaultcompressionquality != 0
FIELD	2748:5	2748:10	9	t2p -> pdf_defaultcompressionquality
LEAF_NODE	2748:5	2748:5	10	t2p
LEAF_NODE	2748:8	2748:8	10	->
LEAF_NODE	2748:10	2748:10	10	pdf_defaultcompressionquality
EQ_OPERATOR	2748:40	2748:40	9	!=
LEAF_NODE	2748:40	2748:40	10	!=
FIELD	2748:43	2748:43	9	0
LEAF_NODE	2748:43	2748:43	10	0
LEAF_NODE	2748:44	2748:44	7	)
STATEMENTS	2748:45	2752:2	7	
LEAF_NODE	2748:45	2748:45	8	{
STATEMENTS	2749:3	2749:3	8	
EXPR_STATEMENT	2749:3	2751:39	9	TIFFSetField ( output , TIFFTAG_JPEGQUALITY , t2p -> pdf_defaultcompressionquality ) ;
EXPR	2749:3	2749:3	10	TIFFSetField ( output , TIFFTAG_JPEGQUALITY , t2p -> pdf_defaultcompressionquality )
FUNCTION_CALL	2749:3	2751:38	11	TIFFSetField ( output , TIFFTAG_JPEGQUALITY , t2p -> pdf_defaultcompressionquality )
CALLEE	2749:3	2749:3	12	TIFFSetField
LEAF_NODE	2749:3	2749:3	13	TIFFSetField
LEAF_NODE	2749:15	2749:15	12	(
ARGUMENT	2749:16	2749:16	12	output
FIELD	2749:16	2749:16	13	output
LEAF_NODE	2749:16	2749:16	14	output
LEAF_NODE	2749:22	2749:22	12	,
ARGUMENT	2750:4	2750:4	12	TIFFTAG_JPEGQUALITY
FIELD	2750:4	2750:4	13	TIFFTAG_JPEGQUALITY
LEAF_NODE	2750:4	2750:4	14	TIFFTAG_JPEGQUALITY
LEAF_NODE	2750:23	2750:23	12	,
ARGUMENT	2751:4	2751:4	12	t2p -> pdf_defaultcompressionquality
FIELD	2751:4	2751:9	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	2751:4	2751:4	14	t2p
LEAF_NODE	2751:7	2751:7	14	->
LEAF_NODE	2751:9	2751:9	14	pdf_defaultcompressionquality
LEAF_NODE	2751:38	2751:38	12	)
LEAF_NODE	2751:39	2751:39	10	;
LEAF_NODE	2752:2	2752:2	8	}
JUMP_STATEMENT	2754:2	2754:7	6	break DESTINATION ;
KEYWORD	2754:2	2754:2	7	break
LEAF_NODE	2754:2	2754:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2754:7	2754:7	7	;
LABEL	2757:1	2757:22	6	case T2P_COMPRESS_ZIP :
LEAF_NODE	2757:1	2757:1	7	case
LEAF_NODE	2757:6	2757:6	7	T2P_COMPRESS_ZIP
LEAF_NODE	2757:22	2757:22	7	:
EXPR_STATEMENT	2758:2	2758:64	6	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_DEFLATE ) ;
EXPR	2758:2	2758:2	7	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_DEFLATE )
FUNCTION_CALL	2758:2	2758:63	8	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_DEFLATE )
CALLEE	2758:2	2758:2	9	TIFFSetField
LEAF_NODE	2758:2	2758:2	10	TIFFSetField
LEAF_NODE	2758:14	2758:14	9	(
ARGUMENT	2758:15	2758:15	9	output
FIELD	2758:15	2758:15	10	output
LEAF_NODE	2758:15	2758:15	11	output
LEAF_NODE	2758:21	2758:21	9	,
ARGUMENT	2758:23	2758:23	9	TIFFTAG_COMPRESSION
FIELD	2758:23	2758:23	10	TIFFTAG_COMPRESSION
LEAF_NODE	2758:23	2758:23	11	TIFFTAG_COMPRESSION
LEAF_NODE	2758:42	2758:42	9	,
ARGUMENT	2758:44	2758:44	9	COMPRESSION_DEFLATE
FIELD	2758:44	2758:44	10	COMPRESSION_DEFLATE
LEAF_NODE	2758:44	2758:44	11	COMPRESSION_DEFLATE
LEAF_NODE	2758:63	2758:63	9	)
LEAF_NODE	2758:64	2758:64	7	;
SELECTION	2759:2	2759:49	6	
KEYWORD	2759:2	2759:2	7	if
LEAF_NODE	2759:2	2759:2	8	if
LEAF_NODE	2759:4	2759:4	7	(
CONDITION	2759:5	2759:5	7	t2p -> pdf_defaultcompressionquality % 100 != 0
EXPR	2759:5	2759:47	8	t2p -> pdf_defaultcompressionquality % 100 != 0
FIELD	2759:5	2759:10	9	t2p -> pdf_defaultcompressionquality
LEAF_NODE	2759:5	2759:5	10	t2p
LEAF_NODE	2759:8	2759:8	10	->
LEAF_NODE	2759:10	2759:10	10	pdf_defaultcompressionquality
LEAF_NODE	2759:39	2759:39	9	%
FIELD	2759:40	2759:40	9	100
LEAF_NODE	2759:40	2759:40	10	100
EQ_OPERATOR	2759:44	2759:44	9	!=
LEAF_NODE	2759:44	2759:44	10	!=
FIELD	2759:47	2759:47	9	0
LEAF_NODE	2759:47	2759:47	10	0
LEAF_NODE	2759:48	2759:48	7	)
STATEMENTS	2759:49	2763:2	7	
LEAF_NODE	2759:49	2759:49	8	{
STATEMENTS	2760:3	2760:3	8	
EXPR_STATEMENT	2760:3	2762:45	9	TIFFSetField ( output , TIFFTAG_PREDICTOR , t2p -> pdf_defaultcompressionquality % 100 ) ;
EXPR	2760:3	2760:3	10	TIFFSetField ( output , TIFFTAG_PREDICTOR , t2p -> pdf_defaultcompressionquality % 100 )
FUNCTION_CALL	2760:3	2762:44	11	TIFFSetField ( output , TIFFTAG_PREDICTOR , t2p -> pdf_defaultcompressionquality % 100 )
CALLEE	2760:3	2760:3	12	TIFFSetField
LEAF_NODE	2760:3	2760:3	13	TIFFSetField
LEAF_NODE	2760:15	2760:15	12	(
ARGUMENT	2760:16	2760:16	12	output
FIELD	2760:16	2760:16	13	output
LEAF_NODE	2760:16	2760:16	14	output
LEAF_NODE	2760:22	2760:22	12	,
ARGUMENT	2761:4	2761:4	12	TIFFTAG_PREDICTOR
FIELD	2761:4	2761:4	13	TIFFTAG_PREDICTOR
LEAF_NODE	2761:4	2761:4	14	TIFFTAG_PREDICTOR
LEAF_NODE	2761:21	2761:21	12	,
ARGUMENT	2762:4	2762:41	12	t2p -> pdf_defaultcompressionquality % 100
FIELD	2762:4	2762:9	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	2762:4	2762:4	14	t2p
LEAF_NODE	2762:7	2762:7	14	->
LEAF_NODE	2762:9	2762:9	14	pdf_defaultcompressionquality
LEAF_NODE	2762:39	2762:39	13	%
FIELD	2762:41	2762:41	13	100
LEAF_NODE	2762:41	2762:41	14	100
LEAF_NODE	2762:44	2762:44	12	)
LEAF_NODE	2762:45	2762:45	10	;
LEAF_NODE	2763:2	2763:2	8	}
SELECTION	2764:2	2764:49	6	
KEYWORD	2764:2	2764:2	7	if
LEAF_NODE	2764:2	2764:2	8	if
LEAF_NODE	2764:4	2764:4	7	(
CONDITION	2764:5	2764:5	7	t2p -> pdf_defaultcompressionquality / 100 != 0
EXPR	2764:5	2764:47	8	t2p -> pdf_defaultcompressionquality / 100 != 0
FIELD	2764:5	2764:10	9	t2p -> pdf_defaultcompressionquality
LEAF_NODE	2764:5	2764:5	10	t2p
LEAF_NODE	2764:8	2764:8	10	->
LEAF_NODE	2764:10	2764:10	10	pdf_defaultcompressionquality
LEAF_NODE	2764:39	2764:39	9	/
FIELD	2764:40	2764:40	9	100
LEAF_NODE	2764:40	2764:40	10	100
EQ_OPERATOR	2764:44	2764:44	9	!=
LEAF_NODE	2764:44	2764:44	10	!=
FIELD	2764:47	2764:47	9	0
LEAF_NODE	2764:47	2764:47	10	0
LEAF_NODE	2764:48	2764:48	7	)
STATEMENTS	2764:49	2768:2	7	
LEAF_NODE	2764:49	2764:49	8	{
STATEMENTS	2765:3	2765:3	8	
EXPR_STATEMENT	2765:3	2767:47	9	TIFFSetField ( output , TIFFTAG_ZIPQUALITY , ( t2p -> pdf_defaultcompressionquality / 100 ) ) ;
EXPR	2765:3	2765:3	10	TIFFSetField ( output , TIFFTAG_ZIPQUALITY , ( t2p -> pdf_defaultcompressionquality / 100 ) )
FUNCTION_CALL	2765:3	2767:46	11	TIFFSetField ( output , TIFFTAG_ZIPQUALITY , ( t2p -> pdf_defaultcompressionquality / 100 ) )
CALLEE	2765:3	2765:3	12	TIFFSetField
LEAF_NODE	2765:3	2765:3	13	TIFFSetField
LEAF_NODE	2765:15	2765:15	12	(
ARGUMENT	2765:16	2765:16	12	output
FIELD	2765:16	2765:16	13	output
LEAF_NODE	2765:16	2765:16	14	output
LEAF_NODE	2765:22	2765:22	12	,
ARGUMENT	2766:4	2766:4	12	TIFFTAG_ZIPQUALITY
FIELD	2766:4	2766:4	13	TIFFTAG_ZIPQUALITY
LEAF_NODE	2766:4	2766:4	14	TIFFTAG_ZIPQUALITY
LEAF_NODE	2766:22	2766:22	12	,
ARGUMENT	2767:4	2767:45	12	( t2p -> pdf_defaultcompressionquality / 100 )
LEAF_NODE	2767:4	2767:4	13	(
FIELD	2767:5	2767:10	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	2767:5	2767:5	14	t2p
LEAF_NODE	2767:8	2767:8	14	->
LEAF_NODE	2767:10	2767:10	14	pdf_defaultcompressionquality
LEAF_NODE	2767:40	2767:40	13	/
FIELD	2767:42	2767:42	13	100
LEAF_NODE	2767:42	2767:42	14	100
LEAF_NODE	2767:45	2767:45	13	)
LEAF_NODE	2767:46	2767:46	12	)
LEAF_NODE	2767:47	2767:47	10	;
LEAF_NODE	2768:2	2768:2	8	}
JUMP_STATEMENT	2769:2	2769:7	6	break DESTINATION ;
KEYWORD	2769:2	2769:2	7	break
LEAF_NODE	2769:2	2769:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2769:7	2769:7	7	;
LABEL	2771:1	2771:8	6	default :
LEAF_NODE	2771:1	2771:1	7	default
LEAF_NODE	2771:8	2771:8	7	:
JUMP_STATEMENT	2772:2	2772:7	6	break DESTINATION ;
KEYWORD	2772:2	2772:2	7	break
LEAF_NODE	2772:2	2772:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2772:7	2772:7	7	;
LEAF_NODE	2773:1	2773:1	5	}
EXPR_STATEMENT	2775:1	2775:19	3	t2p_enable ( output ) ;
EXPR	2775:1	2775:1	4	t2p_enable ( output )
FUNCTION_CALL	2775:1	2775:18	5	t2p_enable ( output )
CALLEE	2775:1	2775:1	6	t2p_enable
LEAF_NODE	2775:1	2775:1	7	t2p_enable
LEAF_NODE	2775:11	2775:11	6	(
ARGUMENT	2775:12	2775:12	6	output
FIELD	2775:12	2775:12	7	output
LEAF_NODE	2775:12	2775:12	8	output
LEAF_NODE	2775:18	2775:18	6	)
LEAF_NODE	2775:19	2775:19	4	;
EXPR_STATEMENT	2776:1	2776:23	3	t2p -> outputwritten = 0 ;
EXPR	2776:1	2776:1	4	t2p -> outputwritten = 0
ASSIGN	2776:1	2776:22	5	t2p -> outputwritten = 0
LVAL	2776:1	2776:1	6	t2p -> outputwritten
FIELD	2776:1	2776:6	7	t2p -> outputwritten
LEAF_NODE	2776:1	2776:1	8	t2p
LEAF_NODE	2776:4	2776:4	8	->
LEAF_NODE	2776:6	2776:6	8	outputwritten
ASSIGN_OP	2776:20	2776:20	6	=
LEAF_NODE	2776:20	2776:20	7	=
RVAL	2776:22	2776:22	6	0
FIELD	2776:22	2776:22	7	0
LEAF_NODE	2776:22	2776:22	8	0
LEAF_NODE	2776:23	2776:23	4	;
SELECTION	2778:1	2779:50	3	
KEYWORD	2778:1	2778:1	4	if
LEAF_NODE	2778:1	2778:1	5	if
LEAF_NODE	2778:3	2778:3	4	(
CONDITION	2778:4	2778:4	4	t2p -> pdf_compression == T2P_COMPRESS_JPEG && t2p -> tiff_photometric == PHOTOMETRIC_YCBCR
EXPR	2778:4	2778:4	5	t2p -> pdf_compression == T2P_COMPRESS_JPEG && t2p -> tiff_photometric == PHOTOMETRIC_YCBCR
AND	2778:4	2779:7	6	t2p -> pdf_compression == T2P_COMPRESS_JPEG && t2p -> tiff_photometric == PHOTOMETRIC_YCBCR
EXPR	2778:4	2778:28	7	t2p -> pdf_compression == T2P_COMPRESS_JPEG
FIELD	2778:4	2778:9	8	t2p -> pdf_compression
LEAF_NODE	2778:4	2778:4	9	t2p
LEAF_NODE	2778:7	2778:7	9	->
LEAF_NODE	2778:9	2778:9	9	pdf_compression
EQ_OPERATOR	2778:25	2778:25	8	==
LEAF_NODE	2778:25	2778:25	9	==
FIELD	2778:28	2778:28	8	T2P_COMPRESS_JPEG
LEAF_NODE	2778:28	2778:28	9	T2P_COMPRESS_JPEG
LEAF_NODE	2779:4	2779:4	7	&&
EXPR	2779:7	2779:32	7	t2p -> tiff_photometric == PHOTOMETRIC_YCBCR
FIELD	2779:7	2779:12	8	t2p -> tiff_photometric
LEAF_NODE	2779:7	2779:7	9	t2p
LEAF_NODE	2779:10	2779:10	9	->
LEAF_NODE	2779:12	2779:12	9	tiff_photometric
EQ_OPERATOR	2779:29	2779:29	8	==
LEAF_NODE	2779:29	2779:29	9	==
FIELD	2779:32	2779:32	8	PHOTOMETRIC_YCBCR
LEAF_NODE	2779:32	2779:32	9	PHOTOMETRIC_YCBCR
LEAF_NODE	2779:49	2779:49	4	)
STATEMENTS	2779:50	2783:1	4	
LEAF_NODE	2779:50	2779:50	5	{
STATEMENTS	2780:2	2780:2	5	
EXPR_STATEMENT	2780:2	2782:34	6	bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , stripsize * stripcount ) ;
EXPR	2780:2	2780:2	7	bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , stripsize * stripcount )
ASSIGN	2780:2	2780:17	8	bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , stripsize * stripcount )
LVAL	2780:2	2780:2	9	bufferoffset
FIELD	2780:2	2780:2	10	bufferoffset
LEAF_NODE	2780:2	2780:2	11	bufferoffset
ASSIGN_OP	2780:15	2780:15	9	=
LEAF_NODE	2780:15	2780:15	10	=
RVAL	2780:17	2780:17	9	TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , stripsize * stripcount )
FUNCTION_CALL	2780:17	2782:33	10	TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , stripsize * stripcount )
CALLEE	2780:17	2780:17	11	TIFFWriteEncodedStrip
LEAF_NODE	2780:17	2780:17	12	TIFFWriteEncodedStrip
LEAF_NODE	2780:38	2780:38	11	(
ARGUMENT	2780:39	2780:39	11	output
FIELD	2780:39	2780:39	12	output
LEAF_NODE	2780:39	2780:39	13	output
LEAF_NODE	2780:45	2780:45	11	,
ARGUMENT	2780:47	2780:57	11	( tstrip_t ) 0
LEAF_NODE	2780:47	2780:47	12	(
TYPE_NAME	2780:48	2780:48	12	tstrip_t
LEAF_NODE	2780:48	2780:48	13	tstrip_t
LEAF_NODE	2780:56	2780:56	12	)
FIELD	2780:57	2780:57	12	0
LEAF_NODE	2780:57	2780:57	13	0
LEAF_NODE	2780:58	2780:58	11	,
ARGUMENT	2781:11	2781:11	11	buffer
FIELD	2781:11	2781:11	12	buffer
LEAF_NODE	2781:11	2781:11	13	buffer
LEAF_NODE	2781:17	2781:17	11	,
ARGUMENT	2782:11	2782:23	11	stripsize * stripcount
FIELD	2782:11	2782:11	12	stripsize
LEAF_NODE	2782:11	2782:11	13	stripsize
LEAF_NODE	2782:21	2782:21	12	*
FIELD	2782:23	2782:23	12	stripcount
LEAF_NODE	2782:23	2782:23	13	stripcount
LEAF_NODE	2782:33	2782:33	11	)
LEAF_NODE	2782:34	2782:34	7	;
LEAF_NODE	2783:1	2783:1	5	}
SELECTION	2783:3	2785:8	3	
KEYWORD	2783:3	2783:3	4	else
LEAF_NODE	2783:3	2783:3	5	else
STATEMENTS	2785:8	2789:1	4	
LEAF_NODE	2785:8	2785:8	5	{
STATEMENTS	2786:2	2786:2	5	
EXPR_STATEMENT	2786:2	2788:30	6	bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , t2p -> tiff_datasize ) ;
EXPR	2786:2	2786:2	7	bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , t2p -> tiff_datasize )
ASSIGN	2786:2	2786:17	8	bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , t2p -> tiff_datasize )
LVAL	2786:2	2786:2	9	bufferoffset
FIELD	2786:2	2786:2	10	bufferoffset
LEAF_NODE	2786:2	2786:2	11	bufferoffset
ASSIGN_OP	2786:15	2786:15	9	=
LEAF_NODE	2786:15	2786:15	10	=
RVAL	2786:17	2786:17	9	TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2786:17	2788:29	10	TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , t2p -> tiff_datasize )
CALLEE	2786:17	2786:17	11	TIFFWriteEncodedStrip
LEAF_NODE	2786:17	2786:17	12	TIFFWriteEncodedStrip
LEAF_NODE	2786:38	2786:38	11	(
ARGUMENT	2786:39	2786:39	11	output
FIELD	2786:39	2786:39	12	output
LEAF_NODE	2786:39	2786:39	13	output
LEAF_NODE	2786:45	2786:45	11	,
ARGUMENT	2786:47	2786:57	11	( tstrip_t ) 0
LEAF_NODE	2786:47	2786:47	12	(
TYPE_NAME	2786:48	2786:48	12	tstrip_t
LEAF_NODE	2786:48	2786:48	13	tstrip_t
LEAF_NODE	2786:56	2786:56	12	)
FIELD	2786:57	2786:57	12	0
LEAF_NODE	2786:57	2786:57	13	0
LEAF_NODE	2786:58	2786:58	11	,
ARGUMENT	2787:11	2787:11	11	buffer
FIELD	2787:11	2787:11	12	buffer
LEAF_NODE	2787:11	2787:11	13	buffer
LEAF_NODE	2787:17	2787:17	11	,
ARGUMENT	2788:11	2788:11	11	t2p -> tiff_datasize
FIELD	2788:11	2788:16	12	t2p -> tiff_datasize
LEAF_NODE	2788:11	2788:11	13	t2p
LEAF_NODE	2788:14	2788:14	13	->
LEAF_NODE	2788:16	2788:16	13	tiff_datasize
LEAF_NODE	2788:29	2788:29	11	)
LEAF_NODE	2788:30	2788:30	7	;
LEAF_NODE	2789:1	2789:1	5	}
SELECTION	2790:1	2790:21	3	
KEYWORD	2790:1	2790:1	4	if
LEAF_NODE	2790:1	2790:1	5	if
LEAF_NODE	2790:4	2790:4	4	(
CONDITION	2790:5	2790:5	4	buffer != NULL
EXPR	2790:5	2790:15	5	buffer != NULL
FIELD	2790:5	2790:5	6	buffer
LEAF_NODE	2790:5	2790:5	7	buffer
EQ_OPERATOR	2790:12	2790:12	6	!=
LEAF_NODE	2790:12	2790:12	7	!=
FIELD	2790:15	2790:15	6	NULL
LEAF_NODE	2790:15	2790:15	7	NULL
LEAF_NODE	2790:19	2790:19	4	)
STATEMENTS	2790:21	2793:1	4	
LEAF_NODE	2790:21	2790:21	5	{
STATEMENTS	2791:2	2792:2	5	
EXPR_STATEMENT	2791:2	2791:19	6	_TIFFfree ( buffer ) ;
EXPR	2791:2	2791:2	7	_TIFFfree ( buffer )
FUNCTION_CALL	2791:2	2791:18	8	_TIFFfree ( buffer )
CALLEE	2791:2	2791:2	9	_TIFFfree
LEAF_NODE	2791:2	2791:2	10	_TIFFfree
LEAF_NODE	2791:11	2791:11	9	(
ARGUMENT	2791:12	2791:12	9	buffer
FIELD	2791:12	2791:12	10	buffer
LEAF_NODE	2791:12	2791:12	11	buffer
LEAF_NODE	2791:18	2791:18	9	)
LEAF_NODE	2791:19	2791:19	7	;
EXPR_STATEMENT	2792:2	2792:13	6	buffer = NULL ;
EXPR	2792:2	2792:2	7	buffer = NULL
ASSIGN	2792:2	2792:9	8	buffer = NULL
LVAL	2792:2	2792:2	9	buffer
FIELD	2792:2	2792:2	10	buffer
LEAF_NODE	2792:2	2792:2	11	buffer
ASSIGN_OP	2792:8	2792:8	9	=
LEAF_NODE	2792:8	2792:8	10	=
RVAL	2792:9	2792:9	9	NULL
FIELD	2792:9	2792:9	10	NULL
LEAF_NODE	2792:9	2792:9	11	NULL
LEAF_NODE	2792:13	2792:13	7	;
LEAF_NODE	2793:1	2793:1	5	}
SELECTION	2795:1	2795:34	3	
KEYWORD	2795:1	2795:1	4	if
LEAF_NODE	2795:1	2795:1	5	if
LEAF_NODE	2795:4	2795:4	4	(
CONDITION	2795:5	2795:5	4	bufferoffset == ( tsize_t ) - 1
EXPR	2795:5	2795:30	5	bufferoffset == ( tsize_t ) - 1
FIELD	2795:5	2795:5	6	bufferoffset
LEAF_NODE	2795:5	2795:5	7	bufferoffset
EQ_OPERATOR	2795:18	2795:18	6	==
LEAF_NODE	2795:18	2795:18	7	==
LEAF_NODE	2795:21	2795:21	6	(
TYPE_NAME	2795:22	2795:22	6	tsize_t
LEAF_NODE	2795:22	2795:22	7	tsize_t
LEAF_NODE	2795:29	2795:29	6	)
UNARY_EXPR	2795:30	2795:31	6	- 1
UNARY_OPERATOR	2795:30	2795:30	7	-
LEAF_NODE	2795:30	2795:30	8	-
FIELD	2795:31	2795:31	7	1
LEAF_NODE	2795:31	2795:31	8	1
LEAF_NODE	2795:32	2795:32	4	)
STATEMENTS	2795:34	2801:1	4	
LEAF_NODE	2795:34	2795:34	5	{
STATEMENTS	2796:2	2800:2	5	
EXPR_STATEMENT	2796:2	2798:26	6	TIFFError ( TIFF2PDF_MODULE , "Error writing encoded strip to output PDF %s" , TIFFFileName ( output ) ) ;
EXPR	2796:2	2796:2	7	TIFFError ( TIFF2PDF_MODULE , "Error writing encoded strip to output PDF %s" , TIFFFileName ( output ) )
FUNCTION_CALL	2796:2	2798:25	8	TIFFError ( TIFF2PDF_MODULE , "Error writing encoded strip to output PDF %s" , TIFFFileName ( output ) )
CALLEE	2796:2	2796:2	9	TIFFError
LEAF_NODE	2796:2	2796:2	10	TIFFError
LEAF_NODE	2796:11	2796:11	9	(
ARGUMENT	2796:12	2796:12	9	TIFF2PDF_MODULE
FIELD	2796:12	2796:12	10	TIFF2PDF_MODULE
LEAF_NODE	2796:12	2796:12	11	TIFF2PDF_MODULE
LEAF_NODE	2796:27	2796:27	9	,
ARGUMENT	2797:5	2797:5	9	"Error writing encoded strip to output PDF %s"
FIELD	2797:5	2797:5	10	"Error writing encoded strip to output PDF %s"
LEAF_NODE	2797:5	2797:5	11	"Error writing encoded strip to output PDF %s"
LEAF_NODE	2797:51	2797:51	9	,
ARGUMENT	2798:5	2798:5	9	TIFFFileName ( output )
FUNCTION_CALL	2798:5	2798:24	10	TIFFFileName ( output )
CALLEE	2798:5	2798:5	11	TIFFFileName
LEAF_NODE	2798:5	2798:5	12	TIFFFileName
LEAF_NODE	2798:17	2798:17	11	(
ARGUMENT	2798:18	2798:18	11	output
FIELD	2798:18	2798:18	12	output
LEAF_NODE	2798:18	2798:18	13	output
LEAF_NODE	2798:24	2798:24	11	)
LEAF_NODE	2798:25	2798:25	9	)
LEAF_NODE	2798:26	2798:26	7	;
EXPR_STATEMENT	2799:2	2799:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2799:2	2799:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2799:2	2799:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2799:2	2799:2	9	t2p -> t2p_error
FIELD	2799:2	2799:7	10	t2p -> t2p_error
LEAF_NODE	2799:2	2799:2	11	t2p
LEAF_NODE	2799:5	2799:5	11	->
LEAF_NODE	2799:7	2799:7	11	t2p_error
ASSIGN_OP	2799:17	2799:17	9	=
LEAF_NODE	2799:17	2799:17	10	=
RVAL	2799:19	2799:19	9	T2P_ERR_ERROR
FIELD	2799:19	2799:19	10	T2P_ERR_ERROR
LEAF_NODE	2799:19	2799:19	11	T2P_ERR_ERROR
LEAF_NODE	2799:32	2799:32	7	;
JUMP_STATEMENT	2800:2	2800:11	6	return ( 0 ) ;
KEYWORD	2800:2	2800:2	7	return
LEAF_NODE	2800:2	2800:2	8	return
DESTINATION	2800:8	2800:8	7	( 0 )
EXPR	2800:8	2800:10	8	( 0 )
LEAF_NODE	2800:8	2800:8	9	(
FIELD	2800:9	2800:9	9	0
LEAF_NODE	2800:9	2800:9	10	0
LEAF_NODE	2800:10	2800:10	9	)
LEAF_NODE	2800:11	2800:11	7	;
LEAF_NODE	2801:1	2801:1	5	}
EXPR_STATEMENT	2803:1	2803:29	3	written = t2p -> outputwritten ;
EXPR	2803:1	2803:1	4	written = t2p -> outputwritten
ASSIGN	2803:1	2803:11	5	written = t2p -> outputwritten
LVAL	2803:1	2803:1	6	written
FIELD	2803:1	2803:1	7	written
LEAF_NODE	2803:1	2803:1	8	written
ASSIGN_OP	2803:9	2803:9	6	=
LEAF_NODE	2803:9	2803:9	7	=
RVAL	2803:11	2803:11	6	t2p -> outputwritten
FIELD	2803:11	2803:16	7	t2p -> outputwritten
LEAF_NODE	2803:11	2803:11	8	t2p
LEAF_NODE	2803:14	2803:14	8	->
LEAF_NODE	2803:16	2803:16	8	outputwritten
LEAF_NODE	2803:29	2803:29	4	;
LEAF_NODE	2804:1	2804:1	3	return
LEAF_NODE	2804:7	2804:7	3	(
LEAF_NODE	2804:8	2804:8	3	written
LEAF_NODE	2804:15	2804:15	3	)
LEAF_NODE	2804:16	2804:16	3	;
LEAF_NODE	2805:0	2805:0	2	}
FUNCTION_DEF	2813:0	3264:0	1	
RETURN_TYPE	2813:0	2813:0	2	tsize_t
TYPE_NAME	2813:0	2813:0	3	tsize_t
LEAF_NODE	2813:0	2813:0	4	tsize_t
FUNCTION_NAME	2813:8	2813:8	2	t2p_readwrite_pdf_image_tile
LEAF_NODE	2813:8	2813:8	3	t2p_readwrite_pdf_image_tile
PARAMETER_LIST	2813:36	2813:86	2	( T2P * t2p , TIFF * input , TIFF * output , ttile_t tile )
LEAF_NODE	2813:36	2813:36	3	(
PARAMETER_DECL	2813:37	2813:42	3	T2P * t2p
TYPE	2813:37	2813:40	4	T2P *
TYPE_NAME	2813:37	2813:37	5	T2P
LEAF_NODE	2813:37	2813:37	6	T2P
POINTER	2813:40	2813:40	5	*
LEAF_NODE	2813:40	2813:40	6	*
NAME	2813:42	2813:42	4	t2p
LEAF_NODE	2813:42	2813:42	5	t2p
LEAF_NODE	2813:45	2813:45	3	,
PARAMETER_DECL	2813:47	2813:53	3	TIFF * input
TYPE	2813:47	2813:51	4	TIFF *
TYPE_NAME	2813:47	2813:47	5	TIFF
LEAF_NODE	2813:47	2813:47	6	TIFF
POINTER	2813:51	2813:51	5	*
LEAF_NODE	2813:51	2813:51	6	*
NAME	2813:53	2813:53	4	input
LEAF_NODE	2813:53	2813:53	5	input
LEAF_NODE	2813:58	2813:58	3	,
PARAMETER_DECL	2813:60	2813:66	3	TIFF * output
TYPE	2813:60	2813:64	4	TIFF *
TYPE_NAME	2813:60	2813:60	5	TIFF
LEAF_NODE	2813:60	2813:60	6	TIFF
POINTER	2813:64	2813:64	5	*
LEAF_NODE	2813:64	2813:64	6	*
NAME	2813:66	2813:66	4	output
LEAF_NODE	2813:66	2813:66	5	output
LEAF_NODE	2813:72	2813:72	3	,
PARAMETER_DECL	2813:74	2813:82	3	ttile_t tile
TYPE	2813:74	2813:74	4	ttile_t
TYPE_NAME	2813:74	2813:74	5	ttile_t
LEAF_NODE	2813:74	2813:74	6	ttile_t
NAME	2813:82	2813:82	4	tile
LEAF_NODE	2813:82	2813:82	5	tile
LEAF_NODE	2813:86	2813:86	3	)
LEAF_NODE	2813:87	2813:87	2	{
STATEMENTS	2815:1	3263:16	2	
SIMPLE_DECL	2815:1	2815:14	3	uint16 edge ; edge = 0 ;
VAR_DECL	2815:1	2815:8	4	uint16 edge ; edge = 0
TYPE	2815:1	2815:1	5	uint16
TYPE_NAME	2815:1	2815:1	6	uint16
LEAF_NODE	2815:1	2815:1	7	uint16
NAME	2815:8	2815:8	5	edge
LEAF_NODE	2815:8	2815:8	6	edge
LEAF_NODE	0:0	0:0	5	;
INIT	2815:8	2815:8	5	edge = 0
ASSIGN	2815:8	2815:13	6	edge = 0
LVAL	2815:8	2815:8	7	edge
NAME	2815:8	2815:8	8	edge
LEAF_NODE	2815:8	2815:8	9	edge
ASSIGN_OP	2815:12	2815:12	7	=
LEAF_NODE	2815:12	2815:12	8	=
RVAL	2815:13	2815:13	7	0
FIELD	2815:13	2815:13	8	0
LEAF_NODE	2815:13	2815:13	9	0
LEAF_NODE	2815:14	2815:14	4	;
SIMPLE_DECL	2816:1	2816:18	3	tsize_t written ; written = 0 ;
VAR_DECL	2816:1	2816:9	4	tsize_t written ; written = 0
TYPE	2816:1	2816:1	5	tsize_t
TYPE_NAME	2816:1	2816:1	6	tsize_t
LEAF_NODE	2816:1	2816:1	7	tsize_t
NAME	2816:9	2816:9	5	written
LEAF_NODE	2816:9	2816:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	2816:9	2816:9	5	written = 0
ASSIGN	2816:9	2816:17	6	written = 0
LVAL	2816:9	2816:9	7	written
NAME	2816:9	2816:9	8	written
LEAF_NODE	2816:9	2816:9	9	written
ASSIGN_OP	2816:16	2816:16	7	=
LEAF_NODE	2816:16	2816:16	8	=
RVAL	2816:17	2816:17	7	0
FIELD	2816:17	2816:17	8	0
LEAF_NODE	2816:17	2816:17	9	0
LEAF_NODE	2816:18	2816:18	4	;
SIMPLE_DECL	2817:1	2817:27	3	unsigned char * buffer ; buffer = NULL ;
VAR_DECL	2817:1	2817:16	4	unsigned char * buffer ; buffer = NULL
TYPE	2817:1	2817:14	5	unsigned char *
TYPE_NAME	2817:1	2817:10	6	unsigned char
LEAF_NODE	2817:1	2817:1	7	unsigned
LEAF_NODE	2817:10	2817:10	7	char
POINTER	2817:14	2817:14	6	*
LEAF_NODE	2817:14	2817:14	7	*
NAME	2817:16	2817:16	5	buffer
LEAF_NODE	2817:16	2817:16	6	buffer
LEAF_NODE	0:0	0:0	5	;
INIT	2817:16	2817:16	5	buffer = NULL
ASSIGN	2817:16	2817:23	6	buffer = NULL
LVAL	2817:16	2817:16	7	buffer
NAME	2817:16	2817:16	8	buffer
LEAF_NODE	2817:16	2817:16	9	buffer
ASSIGN_OP	2817:22	2817:22	7	=
LEAF_NODE	2817:22	2817:22	8	=
RVAL	2817:23	2817:23	7	NULL
FIELD	2817:23	2817:23	8	NULL
LEAF_NODE	2817:23	2817:23	9	NULL
LEAF_NODE	2817:27	2817:27	4	;
SIMPLE_DECL	2818:1	2818:23	3	tsize_t bufferoffset ; bufferoffset = 0 ;
VAR_DECL	2818:1	2818:9	4	tsize_t bufferoffset ; bufferoffset = 0
TYPE	2818:1	2818:1	5	tsize_t
TYPE_NAME	2818:1	2818:1	6	tsize_t
LEAF_NODE	2818:1	2818:1	7	tsize_t
NAME	2818:9	2818:9	5	bufferoffset
LEAF_NODE	2818:9	2818:9	6	bufferoffset
LEAF_NODE	0:0	0:0	5	;
INIT	2818:9	2818:9	5	bufferoffset = 0
ASSIGN	2818:9	2818:22	6	bufferoffset = 0
LVAL	2818:9	2818:9	7	bufferoffset
NAME	2818:9	2818:9	8	bufferoffset
LEAF_NODE	2818:9	2818:9	9	bufferoffset
ASSIGN_OP	2818:21	2818:21	7	=
LEAF_NODE	2818:21	2818:21	8	=
RVAL	2818:22	2818:22	7	0
FIELD	2818:22	2818:22	8	0
LEAF_NODE	2818:22	2818:22	9	0
LEAF_NODE	2818:23	2818:23	4	;
SIMPLE_DECL	2819:1	2819:33	3	unsigned char * samplebuffer ; samplebuffer = NULL ;
VAR_DECL	2819:1	2819:16	4	unsigned char * samplebuffer ; samplebuffer = NULL
TYPE	2819:1	2819:14	5	unsigned char *
TYPE_NAME	2819:1	2819:10	6	unsigned char
LEAF_NODE	2819:1	2819:1	7	unsigned
LEAF_NODE	2819:10	2819:10	7	char
POINTER	2819:14	2819:14	6	*
LEAF_NODE	2819:14	2819:14	7	*
NAME	2819:16	2819:16	5	samplebuffer
LEAF_NODE	2819:16	2819:16	6	samplebuffer
LEAF_NODE	0:0	0:0	5	;
INIT	2819:16	2819:16	5	samplebuffer = NULL
ASSIGN	2819:16	2819:29	6	samplebuffer = NULL
LVAL	2819:16	2819:16	7	samplebuffer
NAME	2819:16	2819:16	8	samplebuffer
LEAF_NODE	2819:16	2819:16	9	samplebuffer
ASSIGN_OP	2819:28	2819:28	7	=
LEAF_NODE	2819:28	2819:28	8	=
RVAL	2819:29	2819:29	7	NULL
FIELD	2819:29	2819:29	8	NULL
LEAF_NODE	2819:29	2819:29	9	NULL
LEAF_NODE	2819:33	2819:33	4	;
SIMPLE_DECL	2820:1	2820:29	3	tsize_t samplebufferoffset ; samplebufferoffset = 0 ;
VAR_DECL	2820:1	2820:9	4	tsize_t samplebufferoffset ; samplebufferoffset = 0
TYPE	2820:1	2820:1	5	tsize_t
TYPE_NAME	2820:1	2820:1	6	tsize_t
LEAF_NODE	2820:1	2820:1	7	tsize_t
NAME	2820:9	2820:9	5	samplebufferoffset
LEAF_NODE	2820:9	2820:9	6	samplebufferoffset
LEAF_NODE	0:0	0:0	5	;
INIT	2820:9	2820:9	5	samplebufferoffset = 0
ASSIGN	2820:9	2820:28	6	samplebufferoffset = 0
LVAL	2820:9	2820:9	7	samplebufferoffset
NAME	2820:9	2820:9	8	samplebufferoffset
LEAF_NODE	2820:9	2820:9	9	samplebufferoffset
ASSIGN_OP	2820:27	2820:27	7	=
LEAF_NODE	2820:27	2820:27	8	=
RVAL	2820:28	2820:28	7	0
FIELD	2820:28	2820:28	8	0
LEAF_NODE	2820:28	2820:28	9	0
LEAF_NODE	2820:29	2820:29	4	;
SIMPLE_DECL	2821:1	2821:15	3	tsize_t read ; read = 0 ;
VAR_DECL	2821:1	2821:9	4	tsize_t read ; read = 0
TYPE	2821:1	2821:1	5	tsize_t
TYPE_NAME	2821:1	2821:1	6	tsize_t
LEAF_NODE	2821:1	2821:1	7	tsize_t
NAME	2821:9	2821:9	5	read
LEAF_NODE	2821:9	2821:9	6	read
LEAF_NODE	0:0	0:0	5	;
INIT	2821:9	2821:9	5	read = 0
ASSIGN	2821:9	2821:14	6	read = 0
LVAL	2821:9	2821:9	7	read
NAME	2821:9	2821:9	8	read
LEAF_NODE	2821:9	2821:9	9	read
ASSIGN_OP	2821:13	2821:13	7	=
LEAF_NODE	2821:13	2821:13	8	=
RVAL	2821:14	2821:14	7	0
FIELD	2821:14	2821:14	8	0
LEAF_NODE	2821:14	2821:14	9	0
LEAF_NODE	2821:15	2821:15	4	;
SIMPLE_DECL	2822:1	2822:11	3	uint16 i ; i = 0 ;
VAR_DECL	2822:1	2822:8	4	uint16 i ; i = 0
TYPE	2822:1	2822:1	5	uint16
TYPE_NAME	2822:1	2822:1	6	uint16
LEAF_NODE	2822:1	2822:1	7	uint16
NAME	2822:8	2822:8	5	i
LEAF_NODE	2822:8	2822:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	2822:8	2822:8	5	i = 0
ASSIGN	2822:8	2822:10	6	i = 0
LVAL	2822:8	2822:8	7	i
NAME	2822:8	2822:8	8	i
LEAF_NODE	2822:8	2822:8	9	i
ASSIGN_OP	2822:9	2822:9	7	=
LEAF_NODE	2822:9	2822:9	8	=
RVAL	2822:10	2822:10	7	0
FIELD	2822:10	2822:10	8	0
LEAF_NODE	2822:10	2822:10	9	0
LEAF_NODE	2822:11	2822:11	4	;
SIMPLE_DECL	2823:1	2823:20	3	ttile_t tilecount ; tilecount = 0 ;
VAR_DECL	2823:1	2823:9	4	ttile_t tilecount ; tilecount = 0
TYPE	2823:1	2823:1	5	ttile_t
TYPE_NAME	2823:1	2823:1	6	ttile_t
LEAF_NODE	2823:1	2823:1	7	ttile_t
NAME	2823:9	2823:9	5	tilecount
LEAF_NODE	2823:9	2823:9	6	tilecount
LEAF_NODE	0:0	0:0	5	;
INIT	2823:9	2823:9	5	tilecount = 0
ASSIGN	2823:9	2823:19	6	tilecount = 0
LVAL	2823:9	2823:9	7	tilecount
NAME	2823:9	2823:9	8	tilecount
LEAF_NODE	2823:9	2823:9	9	tilecount
ASSIGN_OP	2823:18	2823:18	7	=
LEAF_NODE	2823:18	2823:18	8	=
RVAL	2823:19	2823:19	7	0
FIELD	2823:19	2823:19	8	0
LEAF_NODE	2823:19	2823:19	9	0
LEAF_NODE	2823:20	2823:20	4	;
SIMPLE_DECL	2825:1	2825:23	3	ttile_t septilecount ; septilecount = 0 ;
VAR_DECL	2825:1	2825:9	4	ttile_t septilecount ; septilecount = 0
TYPE	2825:1	2825:1	5	ttile_t
TYPE_NAME	2825:1	2825:1	6	ttile_t
LEAF_NODE	2825:1	2825:1	7	ttile_t
NAME	2825:9	2825:9	5	septilecount
LEAF_NODE	2825:9	2825:9	6	septilecount
LEAF_NODE	0:0	0:0	5	;
INIT	2825:9	2825:9	5	septilecount = 0
ASSIGN	2825:9	2825:22	6	septilecount = 0
LVAL	2825:9	2825:9	7	septilecount
NAME	2825:9	2825:9	8	septilecount
LEAF_NODE	2825:9	2825:9	9	septilecount
ASSIGN_OP	2825:21	2825:21	7	=
LEAF_NODE	2825:21	2825:21	8	=
RVAL	2825:22	2825:22	7	0
FIELD	2825:22	2825:22	8	0
LEAF_NODE	2825:22	2825:22	9	0
LEAF_NODE	2825:23	2825:23	4	;
SIMPLE_DECL	2826:1	2826:22	3	tsize_t septilesize ; septilesize = 0 ;
VAR_DECL	2826:1	2826:9	4	tsize_t septilesize ; septilesize = 0
TYPE	2826:1	2826:1	5	tsize_t
TYPE_NAME	2826:1	2826:1	6	tsize_t
LEAF_NODE	2826:1	2826:1	7	tsize_t
NAME	2826:9	2826:9	5	septilesize
LEAF_NODE	2826:9	2826:9	6	septilesize
LEAF_NODE	0:0	0:0	5	;
INIT	2826:9	2826:9	5	septilesize = 0
ASSIGN	2826:9	2826:21	6	septilesize = 0
LVAL	2826:9	2826:9	7	septilesize
NAME	2826:9	2826:9	8	septilesize
LEAF_NODE	2826:9	2826:9	9	septilesize
ASSIGN_OP	2826:20	2826:20	7	=
LEAF_NODE	2826:20	2826:20	8	=
RVAL	2826:21	2826:21	7	0
FIELD	2826:21	2826:21	8	0
LEAF_NODE	2826:21	2826:21	9	0
LEAF_NODE	2826:22	2826:22	4	;
SIMPLE_DECL	2828:1	2828:19	3	unsigned char * jpt ;
VAR_DECL	2828:1	2828:16	4	unsigned char * jpt
TYPE	2828:1	2828:14	5	unsigned char *
TYPE_NAME	2828:1	2828:10	6	unsigned char
LEAF_NODE	2828:1	2828:1	7	unsigned
LEAF_NODE	2828:10	2828:10	7	char
POINTER	2828:14	2828:14	6	*
LEAF_NODE	2828:14	2828:14	7	*
NAME	2828:16	2828:16	5	jpt
LEAF_NODE	2828:16	2828:16	6	jpt
LEAF_NODE	2828:19	2828:19	4	;
SIMPLE_DECL	2829:1	2829:15	3	float * xfloatp ;
VAR_DECL	2829:1	2829:8	4	float * xfloatp
TYPE	2829:1	2829:6	5	float *
TYPE_NAME	2829:1	2829:1	6	float
LEAF_NODE	2829:1	2829:1	7	float
POINTER	2829:6	2829:6	6	*
LEAF_NODE	2829:6	2829:6	7	*
NAME	2829:8	2829:8	5	xfloatp
LEAF_NODE	2829:8	2829:8	6	xfloatp
LEAF_NODE	2829:15	2829:15	4	;
SIMPLE_DECL	2830:1	2830:17	3	uint32 xuint32 ; xuint32 = 0 ;
VAR_DECL	2830:1	2830:8	4	uint32 xuint32 ; xuint32 = 0
TYPE	2830:1	2830:1	5	uint32
TYPE_NAME	2830:1	2830:1	6	uint32
LEAF_NODE	2830:1	2830:1	7	uint32
NAME	2830:8	2830:8	5	xuint32
LEAF_NODE	2830:8	2830:8	6	xuint32
LEAF_NODE	0:0	0:0	5	;
INIT	2830:8	2830:8	5	xuint32 = 0
ASSIGN	2830:8	2830:16	6	xuint32 = 0
LVAL	2830:8	2830:8	7	xuint32
NAME	2830:8	2830:8	8	xuint32
LEAF_NODE	2830:8	2830:8	9	xuint32
ASSIGN_OP	2830:15	2830:15	7	=
LEAF_NODE	2830:15	2830:15	8	=
RVAL	2830:16	2830:16	7	0
FIELD	2830:16	2830:16	8	0
LEAF_NODE	2830:16	2830:16	9	0
LEAF_NODE	2830:17	2830:17	4	;
SELECTION	2834:1	2835:2	3	
KEYWORD	2834:1	2834:1	4	if
LEAF_NODE	2834:1	2834:1	5	if
LEAF_NODE	2834:4	2834:4	4	(
CONDITION	2834:5	2834:5	4	t2p -> t2p_error != T2P_ERR_OK
EXPR	2834:5	2834:23	5	t2p -> t2p_error != T2P_ERR_OK
FIELD	2834:5	2834:10	6	t2p -> t2p_error
LEAF_NODE	2834:5	2834:5	7	t2p
LEAF_NODE	2834:8	2834:8	7	->
LEAF_NODE	2834:10	2834:10	7	t2p_error
EQ_OPERATOR	2834:20	2834:20	6	!=
LEAF_NODE	2834:20	2834:20	7	!=
FIELD	2834:23	2834:23	6	T2P_ERR_OK
LEAF_NODE	2834:23	2834:23	7	T2P_ERR_OK
LEAF_NODE	2834:33	2834:33	4	)
STATEMENTS	2835:2	2835:2	4	
JUMP_STATEMENT	2835:2	2835:11	5	return ( 0 ) ;
KEYWORD	2835:2	2835:2	6	return
LEAF_NODE	2835:2	2835:2	7	return
DESTINATION	2835:8	2835:8	6	( 0 )
EXPR	2835:8	2835:10	7	( 0 )
LEAF_NODE	2835:8	2835:8	8	(
FIELD	2835:9	2835:9	8	0
LEAF_NODE	2835:9	2835:9	9	0
LEAF_NODE	2835:10	2835:10	8	)
LEAF_NODE	2835:11	2835:11	6	;
EXPR_STATEMENT	2837:1	2837:69	3	edge |= t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile ) ;
EXPR	2837:1	2837:1	4	edge |= t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
ASSIGN	2837:1	2837:9	5	edge |= t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
LVAL	2837:1	2837:1	6	edge
FIELD	2837:1	2837:1	7	edge
LEAF_NODE	2837:1	2837:1	8	edge
ASSIGN_OP	2837:6	2837:6	6	|=
LEAF_NODE	2837:6	2837:6	7	|=
RVAL	2837:9	2837:9	6	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
FUNCTION_CALL	2837:9	2837:68	7	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
CALLEE	2837:9	2837:9	8	t2p_tile_is_right_edge
LEAF_NODE	2837:9	2837:9	9	t2p_tile_is_right_edge
LEAF_NODE	2837:31	2837:31	8	(
ARGUMENT	2837:32	2837:32	8	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	2837:32	2837:61	9	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	2837:32	2837:32	10	t2p
LEAF_NODE	2837:35	2837:35	10	->
LEAF_NODE	2837:37	2837:37	10	tiff_tiles
LEAF_NODE	2837:47	2837:47	10	[
EXPR	2837:48	2837:48	10	t2p -> pdf_page
FIELD	2837:48	2837:53	11	t2p -> pdf_page
LEAF_NODE	2837:48	2837:48	12	t2p
LEAF_NODE	2837:51	2837:51	12	->
LEAF_NODE	2837:53	2837:53	12	pdf_page
LEAF_NODE	2837:61	2837:61	10	]
LEAF_NODE	2837:62	2837:62	8	,
ARGUMENT	2837:64	2837:64	8	tile
FIELD	2837:64	2837:64	9	tile
LEAF_NODE	2837:64	2837:64	10	tile
LEAF_NODE	2837:68	2837:68	8	)
LEAF_NODE	2837:69	2837:69	4	;
EXPR_STATEMENT	2838:1	2838:70	3	edge |= t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile ) ;
EXPR	2838:1	2838:1	4	edge |= t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
ASSIGN	2838:1	2838:9	5	edge |= t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
LVAL	2838:1	2838:1	6	edge
FIELD	2838:1	2838:1	7	edge
LEAF_NODE	2838:1	2838:1	8	edge
ASSIGN_OP	2838:6	2838:6	6	|=
LEAF_NODE	2838:6	2838:6	7	|=
RVAL	2838:9	2838:9	6	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
FUNCTION_CALL	2838:9	2838:69	7	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
CALLEE	2838:9	2838:9	8	t2p_tile_is_bottom_edge
LEAF_NODE	2838:9	2838:9	9	t2p_tile_is_bottom_edge
LEAF_NODE	2838:32	2838:32	8	(
ARGUMENT	2838:33	2838:33	8	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	2838:33	2838:62	9	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	2838:33	2838:33	10	t2p
LEAF_NODE	2838:36	2838:36	10	->
LEAF_NODE	2838:38	2838:38	10	tiff_tiles
LEAF_NODE	2838:48	2838:48	10	[
EXPR	2838:49	2838:49	10	t2p -> pdf_page
FIELD	2838:49	2838:54	11	t2p -> pdf_page
LEAF_NODE	2838:49	2838:49	12	t2p
LEAF_NODE	2838:52	2838:52	12	->
LEAF_NODE	2838:54	2838:54	12	pdf_page
LEAF_NODE	2838:62	2838:62	10	]
LEAF_NODE	2838:63	2838:63	8	,
ARGUMENT	2838:65	2838:65	8	tile
FIELD	2838:65	2838:65	9	tile
LEAF_NODE	2838:65	2838:65	10	tile
LEAF_NODE	2838:69	2838:69	8	)
LEAF_NODE	2838:70	2838:70	4	;
SELECTION	2840:1	2845:2	3	
KEYWORD	2840:1	2840:1	4	if
LEAF_NODE	2840:1	2840:1	5	if
LEAF_NODE	2840:3	2840:3	4	(
CONDITION	2840:5	2840:5	4	( t2p -> pdf_transcode == T2P_TRANSCODE_RAW ) && ( ( edge == 0 ) || ( t2p -> pdf_compression == T2P_COMPRESS_JPEG ) )
EXPR	2840:5	2840:5	5	( t2p -> pdf_transcode == T2P_TRANSCODE_RAW ) && ( ( edge == 0 ) || ( t2p -> pdf_compression == T2P_COMPRESS_JPEG ) )
AND	2840:5	2840:50	6	( t2p -> pdf_transcode == T2P_TRANSCODE_RAW ) && ( ( edge == 0 ) || ( t2p -> pdf_compression == T2P_COMPRESS_JPEG ) )
EXPR	2840:5	2840:45	7	( t2p -> pdf_transcode == T2P_TRANSCODE_RAW )
LEAF_NODE	2840:5	2840:5	8	(
FIELD	2840:6	2840:11	8	t2p -> pdf_transcode
LEAF_NODE	2840:6	2840:6	9	t2p
LEAF_NODE	2840:9	2840:9	9	->
LEAF_NODE	2840:11	2840:11	9	pdf_transcode
EQ_OPERATOR	2840:25	2840:25	8	==
LEAF_NODE	2840:25	2840:25	9	==
FIELD	2840:28	2840:28	8	T2P_TRANSCODE_RAW
LEAF_NODE	2840:28	2840:28	9	T2P_TRANSCODE_RAW
LEAF_NODE	2840:45	2840:45	8	)
LEAF_NODE	2840:47	2840:47	7	&&
EXPR	2840:50	2844:1	7	( ( edge == 0 ) || ( t2p -> pdf_compression == T2P_COMPRESS_JPEG ) )
LEAF_NODE	2840:50	2840:50	8	(
OR	2840:51	2842:5	8	( edge == 0 ) || ( t2p -> pdf_compression == T2P_COMPRESS_JPEG )
EXPR	2840:51	2840:61	9	( edge == 0 )
LEAF_NODE	2840:51	2840:51	10	(
FIELD	2840:52	2840:52	10	edge
LEAF_NODE	2840:52	2840:52	11	edge
EQ_OPERATOR	2840:57	2840:57	10	==
LEAF_NODE	2840:57	2840:57	11	==
FIELD	2840:60	2840:60	10	0
LEAF_NODE	2840:60	2840:60	11	0
LEAF_NODE	2840:61	2840:61	10	)
LEAF_NODE	2842:2	2842:2	9	||
EXPR	2842:5	2842:47	9	( t2p -> pdf_compression == T2P_COMPRESS_JPEG )
LEAF_NODE	2842:5	2842:5	10	(
FIELD	2842:6	2842:11	10	t2p -> pdf_compression
LEAF_NODE	2842:6	2842:6	11	t2p
LEAF_NODE	2842:9	2842:9	11	->
LEAF_NODE	2842:11	2842:11	11	pdf_compression
EQ_OPERATOR	2842:27	2842:27	10	==
LEAF_NODE	2842:27	2842:27	11	==
FIELD	2842:30	2842:30	10	T2P_COMPRESS_JPEG
LEAF_NODE	2842:30	2842:30	11	T2P_COMPRESS_JPEG
LEAF_NODE	2842:47	2842:47	10	)
LEAF_NODE	2844:1	2844:1	8	)
LEAF_NODE	2845:1	2845:1	4	)
STATEMENTS	2845:2	2984:1	4	
LEAF_NODE	2845:2	2845:2	5	{
STATEMENTS	2847:2	2983:2	5	
SELECTION	2847:2	2847:45	6	
KEYWORD	2847:2	2847:2	7	if
LEAF_NODE	2847:2	2847:2	8	if
LEAF_NODE	2847:4	2847:4	7	(
CONDITION	2847:5	2847:5	7	t2p -> pdf_compression == T2P_COMPRESS_G4
EXPR	2847:5	2847:29	8	t2p -> pdf_compression == T2P_COMPRESS_G4
FIELD	2847:5	2847:10	9	t2p -> pdf_compression
LEAF_NODE	2847:5	2847:5	10	t2p
LEAF_NODE	2847:8	2847:8	10	->
LEAF_NODE	2847:10	2847:10	10	pdf_compression
EQ_OPERATOR	2847:26	2847:26	9	==
LEAF_NODE	2847:26	2847:26	10	==
FIELD	2847:29	2847:29	9	T2P_COMPRESS_G4
LEAF_NODE	2847:29	2847:29	10	T2P_COMPRESS_G4
LEAF_NODE	2847:44	2847:44	7	)
STATEMENTS	2847:45	2865:2	7	
LEAF_NODE	2847:45	2847:45	8	{
STATEMENTS	2848:3	2864:3	8	
EXPR_STATEMENT	2848:3	2848:59	9	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2848:3	2848:3	10	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2848:3	2848:11	11	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2848:3	2848:3	12	buffer
FIELD	2848:3	2848:3	13	buffer
LEAF_NODE	2848:3	2848:3	14	buffer
ASSIGN_OP	2848:9	2848:9	12	=
LEAF_NODE	2848:9	2848:9	13	=
RVAL	2848:11	2848:28	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2848:11	2848:11	13	(
TYPE_NAME	2848:12	2848:21	13	unsigned char
LEAF_NODE	2848:12	2848:12	14	unsigned
LEAF_NODE	2848:21	2848:21	14	char
LEAF_NODE	2848:25	2848:25	13	*
LEAF_NODE	2848:26	2848:26	13	)
FUNCTION_CALL	2848:28	2848:58	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2848:28	2848:28	14	_TIFFmalloc
LEAF_NODE	2848:28	2848:28	15	_TIFFmalloc
LEAF_NODE	2848:39	2848:39	14	(
ARGUMENT	2848:40	2848:40	14	t2p -> tiff_datasize
FIELD	2848:40	2848:45	15	t2p -> tiff_datasize
LEAF_NODE	2848:40	2848:40	16	t2p
LEAF_NODE	2848:43	2848:43	16	->
LEAF_NODE	2848:45	2848:45	16	tiff_datasize
LEAF_NODE	2848:58	2848:58	14	)
LEAF_NODE	2848:59	2848:59	10	;
SELECTION	2849:3	2849:19	9	
KEYWORD	2849:3	2849:3	10	if
LEAF_NODE	2849:3	2849:3	11	if
LEAF_NODE	2849:5	2849:5	10	(
CONDITION	2849:6	2849:6	10	buffer == NULL
EXPR	2849:6	2849:14	11	buffer == NULL
FIELD	2849:6	2849:6	12	buffer
LEAF_NODE	2849:6	2849:6	13	buffer
EQ_OPERATOR	2849:12	2849:12	12	==
LEAF_NODE	2849:12	2849:12	13	==
FIELD	2849:14	2849:14	12	NULL
LEAF_NODE	2849:14	2849:14	13	NULL
LEAF_NODE	2849:18	2849:18	10	)
STATEMENTS	2849:19	2857:3	10	
LEAF_NODE	2849:19	2849:19	11	{
STATEMENTS	2850:4	2856:4	11	
LEAF_NODE	2850:4	2850:4	12	TIFFError
LEAF_NODE	2850:13	2850:13	12	(
LEAF_NODE	2850:14	2850:14	12	TIFF2PDF_MODULE
LEAF_NODE	2850:29	2850:29	12	,
LEAF_NODE	2851:5	2851:5	12	"Can't allocate %lu bytes of memory "
LEAF_NODE	2852:40	2852:40	12	"for t2p_readwrite_pdf_image_tile, %s"
LEAF_NODE	2852:78	2852:78	12	,
LEAF_NODE	2853:5	2853:5	12	(
LEAF_NODE	2853:6	2853:6	12	unsigned
LEAF_NODE	2853:15	2853:15	12	long
LEAF_NODE	2853:19	2853:19	12	)
LEAF_NODE	2853:21	2853:21	12	t2p
LEAF_NODE	2853:24	2853:24	12	->
LEAF_NODE	2853:26	2853:26	12	tiff_datasize
LEAF_NODE	2853:39	2853:39	12	,
LEAF_NODE	2854:5	2854:5	12	TIFFFileName
LEAF_NODE	2854:17	2854:17	12	(
LEAF_NODE	2854:18	2854:18	12	input
LEAF_NODE	2854:23	2854:23	12	)
LEAF_NODE	2854:24	2854:24	12	)
LEAF_NODE	2854:25	2854:25	12	;
EXPR_STATEMENT	2855:4	2855:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2855:4	2855:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2855:4	2855:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2855:4	2855:4	15	t2p -> t2p_error
FIELD	2855:4	2855:9	16	t2p -> t2p_error
LEAF_NODE	2855:4	2855:4	17	t2p
LEAF_NODE	2855:7	2855:7	17	->
LEAF_NODE	2855:9	2855:9	17	t2p_error
ASSIGN_OP	2855:19	2855:19	15	=
LEAF_NODE	2855:19	2855:19	16	=
RVAL	2855:21	2855:21	15	T2P_ERR_ERROR
FIELD	2855:21	2855:21	16	T2P_ERR_ERROR
LEAF_NODE	2855:21	2855:21	17	T2P_ERR_ERROR
LEAF_NODE	2855:34	2855:34	13	;
JUMP_STATEMENT	2856:4	2856:13	12	return ( 0 ) ;
KEYWORD	2856:4	2856:4	13	return
LEAF_NODE	2856:4	2856:4	14	return
DESTINATION	2856:10	2856:10	13	( 0 )
EXPR	2856:10	2856:12	14	( 0 )
LEAF_NODE	2856:10	2856:10	15	(
FIELD	2856:11	2856:11	15	0
LEAF_NODE	2856:11	2856:11	16	0
LEAF_NODE	2856:12	2856:12	15	)
LEAF_NODE	2856:13	2856:13	13	;
LEAF_NODE	2857:3	2857:3	11	}
EXPR_STATEMENT	2858:3	2858:69	9	TIFFReadRawTile ( input , tile , ( tdata_t ) buffer , t2p -> tiff_datasize ) ;
EXPR	2858:3	2858:3	10	TIFFReadRawTile ( input , tile , ( tdata_t ) buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2858:3	2858:68	11	TIFFReadRawTile ( input , tile , ( tdata_t ) buffer , t2p -> tiff_datasize )
CALLEE	2858:3	2858:3	12	TIFFReadRawTile
LEAF_NODE	2858:3	2858:3	13	TIFFReadRawTile
LEAF_NODE	2858:18	2858:18	12	(
ARGUMENT	2858:19	2858:19	12	input
FIELD	2858:19	2858:19	13	input
LEAF_NODE	2858:19	2858:19	14	input
LEAF_NODE	2858:24	2858:24	12	,
ARGUMENT	2858:26	2858:26	12	tile
FIELD	2858:26	2858:26	13	tile
LEAF_NODE	2858:26	2858:26	14	tile
LEAF_NODE	2858:30	2858:30	12	,
ARGUMENT	2858:32	2858:42	12	( tdata_t ) buffer
LEAF_NODE	2858:32	2858:32	13	(
TYPE_NAME	2858:33	2858:33	13	tdata_t
LEAF_NODE	2858:33	2858:33	14	tdata_t
LEAF_NODE	2858:40	2858:40	13	)
FIELD	2858:42	2858:42	13	buffer
LEAF_NODE	2858:42	2858:42	14	buffer
LEAF_NODE	2858:48	2858:48	12	,
ARGUMENT	2858:50	2858:50	12	t2p -> tiff_datasize
FIELD	2858:50	2858:55	13	t2p -> tiff_datasize
LEAF_NODE	2858:50	2858:50	14	t2p
LEAF_NODE	2858:53	2858:53	14	->
LEAF_NODE	2858:55	2858:55	14	tiff_datasize
LEAF_NODE	2858:68	2858:68	12	)
LEAF_NODE	2858:69	2858:69	10	;
SELECTION	2859:3	2859:46	9	
KEYWORD	2859:3	2859:3	10	if
LEAF_NODE	2859:3	2859:3	11	if
LEAF_NODE	2859:6	2859:6	10	(
CONDITION	2859:7	2859:7	10	t2p -> tiff_fillorder == FILLORDER_LSB2MSB
EXPR	2859:7	2859:28	11	t2p -> tiff_fillorder == FILLORDER_LSB2MSB
FIELD	2859:7	2859:12	12	t2p -> tiff_fillorder
LEAF_NODE	2859:7	2859:7	13	t2p
LEAF_NODE	2859:10	2859:10	13	->
LEAF_NODE	2859:12	2859:12	13	tiff_fillorder
EQ_OPERATOR	2859:26	2859:26	12	==
LEAF_NODE	2859:26	2859:26	13	==
FIELD	2859:28	2859:28	12	FILLORDER_LSB2MSB
LEAF_NODE	2859:28	2859:28	13	FILLORDER_LSB2MSB
LEAF_NODE	2859:45	2859:45	10	)
STATEMENTS	2859:46	2861:3	10	
LEAF_NODE	2859:46	2859:46	11	{
STATEMENTS	2860:5	2860:5	11	
EXPR_STATEMENT	2860:5	2860:48	12	TIFFReverseBits ( buffer , t2p -> tiff_datasize ) ;
EXPR	2860:5	2860:5	13	TIFFReverseBits ( buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2860:5	2860:47	14	TIFFReverseBits ( buffer , t2p -> tiff_datasize )
CALLEE	2860:5	2860:5	15	TIFFReverseBits
LEAF_NODE	2860:5	2860:5	16	TIFFReverseBits
LEAF_NODE	2860:20	2860:20	15	(
ARGUMENT	2860:21	2860:21	15	buffer
FIELD	2860:21	2860:21	16	buffer
LEAF_NODE	2860:21	2860:21	17	buffer
LEAF_NODE	2860:27	2860:27	15	,
ARGUMENT	2860:29	2860:29	15	t2p -> tiff_datasize
FIELD	2860:29	2860:34	16	t2p -> tiff_datasize
LEAF_NODE	2860:29	2860:29	17	t2p
LEAF_NODE	2860:32	2860:32	17	->
LEAF_NODE	2860:34	2860:34	17	tiff_datasize
LEAF_NODE	2860:47	2860:47	15	)
LEAF_NODE	2860:48	2860:48	13	;
LEAF_NODE	2861:3	2861:3	11	}
EXPR_STATEMENT	2862:3	2862:61	9	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize ) ;
EXPR	2862:3	2862:3	10	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2862:3	2862:60	11	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize )
CALLEE	2862:3	2862:3	12	t2pWriteFile
LEAF_NODE	2862:3	2862:3	13	t2pWriteFile
LEAF_NODE	2862:15	2862:15	12	(
ARGUMENT	2862:16	2862:16	12	output
FIELD	2862:16	2862:16	13	output
LEAF_NODE	2862:16	2862:16	14	output
LEAF_NODE	2862:22	2862:22	12	,
ARGUMENT	2862:24	2862:34	12	( tdata_t ) buffer
LEAF_NODE	2862:24	2862:24	13	(
TYPE_NAME	2862:25	2862:25	13	tdata_t
LEAF_NODE	2862:25	2862:25	14	tdata_t
LEAF_NODE	2862:32	2862:32	13	)
FIELD	2862:34	2862:34	13	buffer
LEAF_NODE	2862:34	2862:34	14	buffer
LEAF_NODE	2862:40	2862:40	12	,
ARGUMENT	2862:42	2862:42	12	t2p -> tiff_datasize
FIELD	2862:42	2862:47	13	t2p -> tiff_datasize
LEAF_NODE	2862:42	2862:42	14	t2p
LEAF_NODE	2862:45	2862:45	14	->
LEAF_NODE	2862:47	2862:47	14	tiff_datasize
LEAF_NODE	2862:60	2862:60	12	)
LEAF_NODE	2862:61	2862:61	10	;
EXPR_STATEMENT	2863:3	2863:20	9	_TIFFfree ( buffer ) ;
EXPR	2863:3	2863:3	10	_TIFFfree ( buffer )
FUNCTION_CALL	2863:3	2863:19	11	_TIFFfree ( buffer )
CALLEE	2863:3	2863:3	12	_TIFFfree
LEAF_NODE	2863:3	2863:3	13	_TIFFfree
LEAF_NODE	2863:12	2863:12	12	(
ARGUMENT	2863:13	2863:13	12	buffer
FIELD	2863:13	2863:13	13	buffer
LEAF_NODE	2863:13	2863:13	14	buffer
LEAF_NODE	2863:19	2863:19	12	)
LEAF_NODE	2863:20	2863:20	10	;
JUMP_STATEMENT	2864:3	2864:29	9	return ( t2p -> tiff_datasize ) ;
KEYWORD	2864:3	2864:3	10	return
LEAF_NODE	2864:3	2864:3	11	return
DESTINATION	2864:9	2864:9	10	( t2p -> tiff_datasize )
EXPR	2864:9	2864:28	11	( t2p -> tiff_datasize )
LEAF_NODE	2864:9	2864:9	12	(
FIELD	2864:10	2864:15	12	t2p -> tiff_datasize
LEAF_NODE	2864:10	2864:10	13	t2p
LEAF_NODE	2864:13	2864:13	13	->
LEAF_NODE	2864:15	2864:15	13	tiff_datasize
LEAF_NODE	2864:28	2864:28	12	)
LEAF_NODE	2864:29	2864:29	10	;
LEAF_NODE	2865:2	2865:2	8	}
SELECTION	2868:2	2868:46	6	
KEYWORD	2868:2	2868:2	7	if
LEAF_NODE	2868:2	2868:2	8	if
LEAF_NODE	2868:4	2868:4	7	(
CONDITION	2868:5	2868:5	7	t2p -> pdf_compression == T2P_COMPRESS_ZIP
EXPR	2868:5	2868:29	8	t2p -> pdf_compression == T2P_COMPRESS_ZIP
FIELD	2868:5	2868:10	9	t2p -> pdf_compression
LEAF_NODE	2868:5	2868:5	10	t2p
LEAF_NODE	2868:8	2868:8	10	->
LEAF_NODE	2868:10	2868:10	10	pdf_compression
EQ_OPERATOR	2868:26	2868:26	9	==
LEAF_NODE	2868:26	2868:26	10	==
FIELD	2868:29	2868:29	9	T2P_COMPRESS_ZIP
LEAF_NODE	2868:29	2868:29	10	T2P_COMPRESS_ZIP
LEAF_NODE	2868:45	2868:45	7	)
STATEMENTS	2868:46	2886:2	7	
LEAF_NODE	2868:46	2868:46	8	{
STATEMENTS	2869:3	2885:3	8	
EXPR_STATEMENT	2869:3	2869:59	9	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2869:3	2869:3	10	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2869:3	2869:11	11	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2869:3	2869:3	12	buffer
FIELD	2869:3	2869:3	13	buffer
LEAF_NODE	2869:3	2869:3	14	buffer
ASSIGN_OP	2869:9	2869:9	12	=
LEAF_NODE	2869:9	2869:9	13	=
RVAL	2869:11	2869:28	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2869:11	2869:11	13	(
TYPE_NAME	2869:12	2869:21	13	unsigned char
LEAF_NODE	2869:12	2869:12	14	unsigned
LEAF_NODE	2869:21	2869:21	14	char
LEAF_NODE	2869:25	2869:25	13	*
LEAF_NODE	2869:26	2869:26	13	)
FUNCTION_CALL	2869:28	2869:58	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2869:28	2869:28	14	_TIFFmalloc
LEAF_NODE	2869:28	2869:28	15	_TIFFmalloc
LEAF_NODE	2869:39	2869:39	14	(
ARGUMENT	2869:40	2869:40	14	t2p -> tiff_datasize
FIELD	2869:40	2869:45	15	t2p -> tiff_datasize
LEAF_NODE	2869:40	2869:40	16	t2p
LEAF_NODE	2869:43	2869:43	16	->
LEAF_NODE	2869:45	2869:45	16	tiff_datasize
LEAF_NODE	2869:58	2869:58	14	)
LEAF_NODE	2869:59	2869:59	10	;
SELECTION	2870:3	2870:19	9	
KEYWORD	2870:3	2870:3	10	if
LEAF_NODE	2870:3	2870:3	11	if
LEAF_NODE	2870:5	2870:5	10	(
CONDITION	2870:6	2870:6	10	buffer == NULL
EXPR	2870:6	2870:14	11	buffer == NULL
FIELD	2870:6	2870:6	12	buffer
LEAF_NODE	2870:6	2870:6	13	buffer
EQ_OPERATOR	2870:12	2870:12	12	==
LEAF_NODE	2870:12	2870:12	13	==
FIELD	2870:14	2870:14	12	NULL
LEAF_NODE	2870:14	2870:14	13	NULL
LEAF_NODE	2870:18	2870:18	10	)
STATEMENTS	2870:19	2878:3	10	
LEAF_NODE	2870:19	2870:19	11	{
STATEMENTS	2871:4	2877:4	11	
LEAF_NODE	2871:4	2871:4	12	TIFFError
LEAF_NODE	2871:13	2871:13	12	(
LEAF_NODE	2871:14	2871:14	12	TIFF2PDF_MODULE
LEAF_NODE	2871:29	2871:29	12	,
LEAF_NODE	2872:5	2872:5	12	"Can't allocate %lu bytes of memory "
LEAF_NODE	2873:40	2873:40	12	"for t2p_readwrite_pdf_image_tile, %s"
LEAF_NODE	2873:78	2873:78	12	,
LEAF_NODE	2874:5	2874:5	12	(
LEAF_NODE	2874:6	2874:6	12	unsigned
LEAF_NODE	2874:15	2874:15	12	long
LEAF_NODE	2874:19	2874:19	12	)
LEAF_NODE	2874:21	2874:21	12	t2p
LEAF_NODE	2874:24	2874:24	12	->
LEAF_NODE	2874:26	2874:26	12	tiff_datasize
LEAF_NODE	2874:39	2874:39	12	,
LEAF_NODE	2875:5	2875:5	12	TIFFFileName
LEAF_NODE	2875:17	2875:17	12	(
LEAF_NODE	2875:18	2875:18	12	input
LEAF_NODE	2875:23	2875:23	12	)
LEAF_NODE	2875:24	2875:24	12	)
LEAF_NODE	2875:25	2875:25	12	;
EXPR_STATEMENT	2876:4	2876:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2876:4	2876:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2876:4	2876:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2876:4	2876:4	15	t2p -> t2p_error
FIELD	2876:4	2876:9	16	t2p -> t2p_error
LEAF_NODE	2876:4	2876:4	17	t2p
LEAF_NODE	2876:7	2876:7	17	->
LEAF_NODE	2876:9	2876:9	17	t2p_error
ASSIGN_OP	2876:19	2876:19	15	=
LEAF_NODE	2876:19	2876:19	16	=
RVAL	2876:21	2876:21	15	T2P_ERR_ERROR
FIELD	2876:21	2876:21	16	T2P_ERR_ERROR
LEAF_NODE	2876:21	2876:21	17	T2P_ERR_ERROR
LEAF_NODE	2876:34	2876:34	13	;
JUMP_STATEMENT	2877:4	2877:13	12	return ( 0 ) ;
KEYWORD	2877:4	2877:4	13	return
LEAF_NODE	2877:4	2877:4	14	return
DESTINATION	2877:10	2877:10	13	( 0 )
EXPR	2877:10	2877:12	14	( 0 )
LEAF_NODE	2877:10	2877:10	15	(
FIELD	2877:11	2877:11	15	0
LEAF_NODE	2877:11	2877:11	16	0
LEAF_NODE	2877:12	2877:12	15	)
LEAF_NODE	2877:13	2877:13	13	;
LEAF_NODE	2878:3	2878:3	11	}
EXPR_STATEMENT	2879:3	2879:69	9	TIFFReadRawTile ( input , tile , ( tdata_t ) buffer , t2p -> tiff_datasize ) ;
EXPR	2879:3	2879:3	10	TIFFReadRawTile ( input , tile , ( tdata_t ) buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2879:3	2879:68	11	TIFFReadRawTile ( input , tile , ( tdata_t ) buffer , t2p -> tiff_datasize )
CALLEE	2879:3	2879:3	12	TIFFReadRawTile
LEAF_NODE	2879:3	2879:3	13	TIFFReadRawTile
LEAF_NODE	2879:18	2879:18	12	(
ARGUMENT	2879:19	2879:19	12	input
FIELD	2879:19	2879:19	13	input
LEAF_NODE	2879:19	2879:19	14	input
LEAF_NODE	2879:24	2879:24	12	,
ARGUMENT	2879:26	2879:26	12	tile
FIELD	2879:26	2879:26	13	tile
LEAF_NODE	2879:26	2879:26	14	tile
LEAF_NODE	2879:30	2879:30	12	,
ARGUMENT	2879:32	2879:42	12	( tdata_t ) buffer
LEAF_NODE	2879:32	2879:32	13	(
TYPE_NAME	2879:33	2879:33	13	tdata_t
LEAF_NODE	2879:33	2879:33	14	tdata_t
LEAF_NODE	2879:40	2879:40	13	)
FIELD	2879:42	2879:42	13	buffer
LEAF_NODE	2879:42	2879:42	14	buffer
LEAF_NODE	2879:48	2879:48	12	,
ARGUMENT	2879:50	2879:50	12	t2p -> tiff_datasize
FIELD	2879:50	2879:55	13	t2p -> tiff_datasize
LEAF_NODE	2879:50	2879:50	14	t2p
LEAF_NODE	2879:53	2879:53	14	->
LEAF_NODE	2879:55	2879:55	14	tiff_datasize
LEAF_NODE	2879:68	2879:68	12	)
LEAF_NODE	2879:69	2879:69	10	;
SELECTION	2880:3	2880:46	9	
KEYWORD	2880:3	2880:3	10	if
LEAF_NODE	2880:3	2880:3	11	if
LEAF_NODE	2880:6	2880:6	10	(
CONDITION	2880:7	2880:7	10	t2p -> tiff_fillorder == FILLORDER_LSB2MSB
EXPR	2880:7	2880:28	11	t2p -> tiff_fillorder == FILLORDER_LSB2MSB
FIELD	2880:7	2880:12	12	t2p -> tiff_fillorder
LEAF_NODE	2880:7	2880:7	13	t2p
LEAF_NODE	2880:10	2880:10	13	->
LEAF_NODE	2880:12	2880:12	13	tiff_fillorder
EQ_OPERATOR	2880:26	2880:26	12	==
LEAF_NODE	2880:26	2880:26	13	==
FIELD	2880:28	2880:28	12	FILLORDER_LSB2MSB
LEAF_NODE	2880:28	2880:28	13	FILLORDER_LSB2MSB
LEAF_NODE	2880:45	2880:45	10	)
STATEMENTS	2880:46	2882:3	10	
LEAF_NODE	2880:46	2880:46	11	{
STATEMENTS	2881:5	2881:5	11	
EXPR_STATEMENT	2881:5	2881:48	12	TIFFReverseBits ( buffer , t2p -> tiff_datasize ) ;
EXPR	2881:5	2881:5	13	TIFFReverseBits ( buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2881:5	2881:47	14	TIFFReverseBits ( buffer , t2p -> tiff_datasize )
CALLEE	2881:5	2881:5	15	TIFFReverseBits
LEAF_NODE	2881:5	2881:5	16	TIFFReverseBits
LEAF_NODE	2881:20	2881:20	15	(
ARGUMENT	2881:21	2881:21	15	buffer
FIELD	2881:21	2881:21	16	buffer
LEAF_NODE	2881:21	2881:21	17	buffer
LEAF_NODE	2881:27	2881:27	15	,
ARGUMENT	2881:29	2881:29	15	t2p -> tiff_datasize
FIELD	2881:29	2881:34	16	t2p -> tiff_datasize
LEAF_NODE	2881:29	2881:29	17	t2p
LEAF_NODE	2881:32	2881:32	17	->
LEAF_NODE	2881:34	2881:34	17	tiff_datasize
LEAF_NODE	2881:47	2881:47	15	)
LEAF_NODE	2881:48	2881:48	13	;
LEAF_NODE	2882:3	2882:3	11	}
EXPR_STATEMENT	2883:3	2883:61	9	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize ) ;
EXPR	2883:3	2883:3	10	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize )
FUNCTION_CALL	2883:3	2883:60	11	t2pWriteFile ( output , ( tdata_t ) buffer , t2p -> tiff_datasize )
CALLEE	2883:3	2883:3	12	t2pWriteFile
LEAF_NODE	2883:3	2883:3	13	t2pWriteFile
LEAF_NODE	2883:15	2883:15	12	(
ARGUMENT	2883:16	2883:16	12	output
FIELD	2883:16	2883:16	13	output
LEAF_NODE	2883:16	2883:16	14	output
LEAF_NODE	2883:22	2883:22	12	,
ARGUMENT	2883:24	2883:34	12	( tdata_t ) buffer
LEAF_NODE	2883:24	2883:24	13	(
TYPE_NAME	2883:25	2883:25	13	tdata_t
LEAF_NODE	2883:25	2883:25	14	tdata_t
LEAF_NODE	2883:32	2883:32	13	)
FIELD	2883:34	2883:34	13	buffer
LEAF_NODE	2883:34	2883:34	14	buffer
LEAF_NODE	2883:40	2883:40	12	,
ARGUMENT	2883:42	2883:42	12	t2p -> tiff_datasize
FIELD	2883:42	2883:47	13	t2p -> tiff_datasize
LEAF_NODE	2883:42	2883:42	14	t2p
LEAF_NODE	2883:45	2883:45	14	->
LEAF_NODE	2883:47	2883:47	14	tiff_datasize
LEAF_NODE	2883:60	2883:60	12	)
LEAF_NODE	2883:61	2883:61	10	;
EXPR_STATEMENT	2884:3	2884:20	9	_TIFFfree ( buffer ) ;
EXPR	2884:3	2884:3	10	_TIFFfree ( buffer )
FUNCTION_CALL	2884:3	2884:19	11	_TIFFfree ( buffer )
CALLEE	2884:3	2884:3	12	_TIFFfree
LEAF_NODE	2884:3	2884:3	13	_TIFFfree
LEAF_NODE	2884:12	2884:12	12	(
ARGUMENT	2884:13	2884:13	12	buffer
FIELD	2884:13	2884:13	13	buffer
LEAF_NODE	2884:13	2884:13	14	buffer
LEAF_NODE	2884:19	2884:19	12	)
LEAF_NODE	2884:20	2884:20	10	;
JUMP_STATEMENT	2885:3	2885:29	9	return ( t2p -> tiff_datasize ) ;
KEYWORD	2885:3	2885:3	10	return
LEAF_NODE	2885:3	2885:3	11	return
DESTINATION	2885:9	2885:9	10	( t2p -> tiff_datasize )
EXPR	2885:9	2885:28	11	( t2p -> tiff_datasize )
LEAF_NODE	2885:9	2885:9	12	(
FIELD	2885:10	2885:15	12	t2p -> tiff_datasize
LEAF_NODE	2885:10	2885:10	13	t2p
LEAF_NODE	2885:13	2885:13	13	->
LEAF_NODE	2885:15	2885:15	13	tiff_datasize
LEAF_NODE	2885:28	2885:28	12	)
LEAF_NODE	2885:29	2885:29	10	;
LEAF_NODE	2886:2	2886:2	8	}
SELECTION	2889:2	2889:48	6	
KEYWORD	2889:2	2889:2	7	if
LEAF_NODE	2889:2	2889:2	8	if
LEAF_NODE	2889:4	2889:4	7	(
CONDITION	2889:5	2889:5	7	t2p -> tiff_compression == COMPRESSION_OJPEG
EXPR	2889:5	2889:30	8	t2p -> tiff_compression == COMPRESSION_OJPEG
FIELD	2889:5	2889:10	9	t2p -> tiff_compression
LEAF_NODE	2889:5	2889:5	10	t2p
LEAF_NODE	2889:8	2889:8	10	->
LEAF_NODE	2889:10	2889:10	10	tiff_compression
EQ_OPERATOR	2889:27	2889:27	9	==
LEAF_NODE	2889:27	2889:27	10	==
FIELD	2889:30	2889:30	9	COMPRESSION_OJPEG
LEAF_NODE	2889:30	2889:30	10	COMPRESSION_OJPEG
LEAF_NODE	2889:47	2889:47	7	)
STATEMENTS	2889:48	2933:2	7	
LEAF_NODE	2889:48	2889:48	8	{
STATEMENTS	2890:3	2932:23	8	
SELECTION	2890:3	2890:27	9	
KEYWORD	2890:3	2890:3	10	if
LEAF_NODE	2890:3	2890:3	11	if
LEAF_NODE	2890:5	2890:5	10	(
CONDITION	2890:6	2890:6	10	! t2p -> pdf_ojpegdata
EXPR	2890:6	2890:6	11	! t2p -> pdf_ojpegdata
UNARY_EXPR	2890:6	2890:8	12	! t2p -> pdf_ojpegdata
UNARY_OPERATOR	2890:6	2890:6	13	!
LEAF_NODE	2890:6	2890:6	14	!
FIELD	2890:8	2890:13	13	t2p -> pdf_ojpegdata
LEAF_NODE	2890:8	2890:8	14	t2p
LEAF_NODE	2890:11	2890:11	14	->
LEAF_NODE	2890:13	2890:13	14	pdf_ojpegdata
LEAF_NODE	2890:26	2890:26	10	)
STATEMENTS	2890:27	2897:3	10	
LEAF_NODE	2890:27	2890:27	11	{
STATEMENTS	2891:4	2896:4	11	
LEAF_NODE	2891:4	2891:4	12	TIFFError
LEAF_NODE	2891:13	2891:13	12	(
LEAF_NODE	2891:14	2891:14	12	TIFF2PDF_MODULE
LEAF_NODE	2891:29	2891:29	12	,
LEAF_NODE	2892:5	2892:5	12	"No support for OJPEG image %s with "
LEAF_NODE	2893:40	2893:40	12	"bad tables"
LEAF_NODE	2893:52	2893:52	12	,
LEAF_NODE	2894:5	2894:5	12	TIFFFileName
LEAF_NODE	2894:17	2894:17	12	(
LEAF_NODE	2894:18	2894:18	12	input
LEAF_NODE	2894:23	2894:23	12	)
LEAF_NODE	2894:24	2894:24	12	)
LEAF_NODE	2894:25	2894:25	12	;
EXPR_STATEMENT	2895:4	2895:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2895:4	2895:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2895:4	2895:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2895:4	2895:4	15	t2p -> t2p_error
FIELD	2895:4	2895:9	16	t2p -> t2p_error
LEAF_NODE	2895:4	2895:4	17	t2p
LEAF_NODE	2895:7	2895:7	17	->
LEAF_NODE	2895:9	2895:9	17	t2p_error
ASSIGN_OP	2895:19	2895:19	15	=
LEAF_NODE	2895:19	2895:19	16	=
RVAL	2895:21	2895:21	15	T2P_ERR_ERROR
FIELD	2895:21	2895:21	16	T2P_ERR_ERROR
LEAF_NODE	2895:21	2895:21	17	T2P_ERR_ERROR
LEAF_NODE	2895:34	2895:34	13	;
JUMP_STATEMENT	2896:4	2896:13	12	return ( 0 ) ;
KEYWORD	2896:4	2896:4	13	return
LEAF_NODE	2896:4	2896:4	14	return
DESTINATION	2896:10	2896:10	13	( 0 )
EXPR	2896:10	2896:12	14	( 0 )
LEAF_NODE	2896:10	2896:10	15	(
FIELD	2896:11	2896:11	15	0
LEAF_NODE	2896:11	2896:11	16	0
LEAF_NODE	2896:12	2896:12	15	)
LEAF_NODE	2896:13	2896:13	13	;
LEAF_NODE	2897:3	2897:3	11	}
EXPR_STATEMENT	2898:3	2898:58	9	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2898:3	2898:3	10	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2898:3	2898:10	11	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2898:3	2898:3	12	buffer
FIELD	2898:3	2898:3	13	buffer
LEAF_NODE	2898:3	2898:3	14	buffer
ASSIGN_OP	2898:9	2898:9	12	=
LEAF_NODE	2898:9	2898:9	13	=
RVAL	2898:10	2898:27	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2898:10	2898:10	13	(
TYPE_NAME	2898:11	2898:20	13	unsigned char
LEAF_NODE	2898:11	2898:11	14	unsigned
LEAF_NODE	2898:20	2898:20	14	char
LEAF_NODE	2898:24	2898:24	13	*
LEAF_NODE	2898:25	2898:25	13	)
FUNCTION_CALL	2898:27	2898:57	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2898:27	2898:27	14	_TIFFmalloc
LEAF_NODE	2898:27	2898:27	15	_TIFFmalloc
LEAF_NODE	2898:38	2898:38	14	(
ARGUMENT	2898:39	2898:39	14	t2p -> tiff_datasize
FIELD	2898:39	2898:44	15	t2p -> tiff_datasize
LEAF_NODE	2898:39	2898:39	16	t2p
LEAF_NODE	2898:42	2898:42	16	->
LEAF_NODE	2898:44	2898:44	16	tiff_datasize
LEAF_NODE	2898:57	2898:57	14	)
LEAF_NODE	2898:58	2898:58	10	;
SELECTION	2899:3	2899:19	9	
KEYWORD	2899:3	2899:3	10	if
LEAF_NODE	2899:3	2899:3	11	if
LEAF_NODE	2899:5	2899:5	10	(
CONDITION	2899:6	2899:6	10	buffer == NULL
EXPR	2899:6	2899:14	11	buffer == NULL
FIELD	2899:6	2899:6	12	buffer
LEAF_NODE	2899:6	2899:6	13	buffer
EQ_OPERATOR	2899:12	2899:12	12	==
LEAF_NODE	2899:12	2899:12	13	==
FIELD	2899:14	2899:14	12	NULL
LEAF_NODE	2899:14	2899:14	13	NULL
LEAF_NODE	2899:18	2899:18	10	)
STATEMENTS	2899:19	2907:3	10	
LEAF_NODE	2899:19	2899:19	11	{
STATEMENTS	2900:4	2906:4	11	
LEAF_NODE	2900:4	2900:4	12	TIFFError
LEAF_NODE	2900:13	2900:13	12	(
LEAF_NODE	2900:14	2900:14	12	TIFF2PDF_MODULE
LEAF_NODE	2900:29	2900:29	12	,
LEAF_NODE	2901:5	2901:5	12	"Can't allocate %lu bytes of memory "
LEAF_NODE	2902:40	2902:40	12	"for t2p_readwrite_pdf_image, %s"
LEAF_NODE	2902:73	2902:73	12	,
LEAF_NODE	2903:5	2903:5	12	(
LEAF_NODE	2903:6	2903:6	12	unsigned
LEAF_NODE	2903:15	2903:15	12	long
LEAF_NODE	2903:19	2903:19	12	)
LEAF_NODE	2903:21	2903:21	12	t2p
LEAF_NODE	2903:24	2903:24	12	->
LEAF_NODE	2903:26	2903:26	12	tiff_datasize
LEAF_NODE	2903:39	2903:39	12	,
LEAF_NODE	2904:5	2904:5	12	TIFFFileName
LEAF_NODE	2904:17	2904:17	12	(
LEAF_NODE	2904:18	2904:18	12	input
LEAF_NODE	2904:23	2904:23	12	)
LEAF_NODE	2904:24	2904:24	12	)
LEAF_NODE	2904:25	2904:25	12	;
EXPR_STATEMENT	2905:4	2905:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2905:4	2905:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2905:4	2905:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2905:4	2905:4	15	t2p -> t2p_error
FIELD	2905:4	2905:9	16	t2p -> t2p_error
LEAF_NODE	2905:4	2905:4	17	t2p
LEAF_NODE	2905:7	2905:7	17	->
LEAF_NODE	2905:9	2905:9	17	t2p_error
ASSIGN_OP	2905:19	2905:19	15	=
LEAF_NODE	2905:19	2905:19	16	=
RVAL	2905:21	2905:21	15	T2P_ERR_ERROR
FIELD	2905:21	2905:21	16	T2P_ERR_ERROR
LEAF_NODE	2905:21	2905:21	17	T2P_ERR_ERROR
LEAF_NODE	2905:34	2905:34	13	;
JUMP_STATEMENT	2906:4	2906:13	12	return ( 0 ) ;
KEYWORD	2906:4	2906:4	13	return
LEAF_NODE	2906:4	2906:4	14	return
DESTINATION	2906:10	2906:10	13	( 0 )
EXPR	2906:10	2906:12	14	( 0 )
LEAF_NODE	2906:10	2906:10	15	(
FIELD	2906:11	2906:11	15	0
LEAF_NODE	2906:11	2906:11	16	0
LEAF_NODE	2906:12	2906:12	15	)
LEAF_NODE	2906:13	2906:13	13	;
LEAF_NODE	2907:3	2907:3	11	}
EXPR_STATEMENT	2908:3	2908:68	9	_TIFFmemcpy ( buffer , t2p -> pdf_ojpegdata , t2p -> pdf_ojpegdatalength ) ;
EXPR	2908:3	2908:3	10	_TIFFmemcpy ( buffer , t2p -> pdf_ojpegdata , t2p -> pdf_ojpegdatalength )
FUNCTION_CALL	2908:3	2908:67	11	_TIFFmemcpy ( buffer , t2p -> pdf_ojpegdata , t2p -> pdf_ojpegdatalength )
CALLEE	2908:3	2908:3	12	_TIFFmemcpy
LEAF_NODE	2908:3	2908:3	13	_TIFFmemcpy
LEAF_NODE	2908:14	2908:14	12	(
ARGUMENT	2908:15	2908:15	12	buffer
FIELD	2908:15	2908:15	13	buffer
LEAF_NODE	2908:15	2908:15	14	buffer
LEAF_NODE	2908:21	2908:21	12	,
ARGUMENT	2908:23	2908:23	12	t2p -> pdf_ojpegdata
FIELD	2908:23	2908:28	13	t2p -> pdf_ojpegdata
LEAF_NODE	2908:23	2908:23	14	t2p
LEAF_NODE	2908:26	2908:26	14	->
LEAF_NODE	2908:28	2908:28	14	pdf_ojpegdata
LEAF_NODE	2908:41	2908:41	12	,
ARGUMENT	2908:43	2908:43	12	t2p -> pdf_ojpegdatalength
FIELD	2908:43	2908:48	13	t2p -> pdf_ojpegdatalength
LEAF_NODE	2908:43	2908:43	14	t2p
LEAF_NODE	2908:46	2908:46	14	->
LEAF_NODE	2908:48	2908:48	14	pdf_ojpegdatalength
LEAF_NODE	2908:67	2908:67	12	)
LEAF_NODE	2908:68	2908:68	10	;
SELECTION	2909:3	2909:14	9	
KEYWORD	2909:3	2909:3	10	if
LEAF_NODE	2909:3	2909:3	11	if
LEAF_NODE	2909:5	2909:5	10	(
CONDITION	2909:6	2909:6	10	edge != 0
EXPR	2909:6	2909:12	11	edge != 0
FIELD	2909:6	2909:6	12	edge
LEAF_NODE	2909:6	2909:6	13	edge
EQ_OPERATOR	2909:10	2909:10	12	!=
LEAF_NODE	2909:10	2909:10	13	!=
FIELD	2909:12	2909:12	12	0
LEAF_NODE	2909:12	2909:12	13	0
LEAF_NODE	2909:13	2909:13	10	)
STATEMENTS	2909:14	2922:3	10	
LEAF_NODE	2909:14	2909:14	11	{
STATEMENTS	2910:4	2916:4	11	
SELECTION	2910:4	2910:69	12	
KEYWORD	2910:4	2910:4	13	if
LEAF_NODE	2910:4	2910:4	14	if
LEAF_NODE	2910:6	2910:6	13	(
CONDITION	2910:7	2910:7	13	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
EXPR	2910:7	2910:7	14	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
FUNCTION_CALL	2910:7	2910:67	15	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
CALLEE	2910:7	2910:7	16	t2p_tile_is_bottom_edge
LEAF_NODE	2910:7	2910:7	17	t2p_tile_is_bottom_edge
LEAF_NODE	2910:30	2910:30	16	(
ARGUMENT	2910:31	2910:31	16	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	2910:31	2910:60	17	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	2910:31	2910:31	18	t2p
LEAF_NODE	2910:34	2910:34	18	->
LEAF_NODE	2910:36	2910:36	18	tiff_tiles
LEAF_NODE	2910:46	2910:46	18	[
EXPR	2910:47	2910:47	18	t2p -> pdf_page
FIELD	2910:47	2910:52	19	t2p -> pdf_page
LEAF_NODE	2910:47	2910:47	20	t2p
LEAF_NODE	2910:50	2910:50	20	->
LEAF_NODE	2910:52	2910:52	20	pdf_page
LEAF_NODE	2910:60	2910:60	18	]
LEAF_NODE	2910:61	2910:61	16	,
ARGUMENT	2910:63	2910:63	16	tile
FIELD	2910:63	2910:63	17	tile
LEAF_NODE	2910:63	2910:63	18	tile
LEAF_NODE	2910:67	2910:67	16	)
LEAF_NODE	2910:68	2910:68	13	)
STATEMENTS	2910:69	2915:4	13	
LEAF_NODE	2910:69	2910:69	14	{
STATEMENTS	2911:5	2913:5	14	
EXPR_STATEMENT	2911:5	2912:71	15	buffer [ 7 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength >> 8 ) & 0xff ;
EXPR	2911:5	2911:5	16	buffer [ 7 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength >> 8 ) & 0xff
ASSIGN	2911:5	2912:6	17	buffer [ 7 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength >> 8 ) & 0xff
LVAL	2911:5	2911:5	18	buffer [ 7 ]
FIELD	2911:5	2911:13	19	buffer [ 7 ]
LEAF_NODE	2911:5	2911:5	20	buffer
LEAF_NODE	2911:11	2911:11	20	[
EXPR	2911:12	2911:12	20	7
FIELD	2911:12	2911:12	21	7
LEAF_NODE	2911:12	2911:12	22	7
LEAF_NODE	2911:13	2911:13	20	]
ASSIGN_OP	2911:14	2911:14	18	=
LEAF_NODE	2911:14	2911:14	19	=
RVAL	2912:6	2912:67	18	( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength >> 8 ) & 0xff
LEAF_NODE	2912:6	2912:6	19	(
FIELD	2912:7	2912:38	19	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength
LEAF_NODE	2912:7	2912:7	20	t2p
LEAF_NODE	2912:10	2912:10	20	->
LEAF_NODE	2912:12	2912:12	20	tiff_tiles
LEAF_NODE	2912:22	2912:22	20	[
EXPR	2912:23	2912:23	20	t2p -> pdf_page
FIELD	2912:23	2912:28	21	t2p -> pdf_page
LEAF_NODE	2912:23	2912:23	22	t2p
LEAF_NODE	2912:26	2912:26	22	->
LEAF_NODE	2912:28	2912:28	22	pdf_page
LEAF_NODE	2912:36	2912:36	20	]
LEAF_NODE	2912:37	2912:37	20	.
LEAF_NODE	2912:38	2912:38	20	tiles_edgetilelength
LEAF_NODE	2912:59	2912:59	19	>>
FIELD	2912:62	2912:62	19	8
LEAF_NODE	2912:62	2912:62	20	8
LEAF_NODE	2912:63	2912:63	19	)
LEAF_NODE	2912:65	2912:65	19	&
FIELD	2912:67	2912:67	19	0xff
LEAF_NODE	2912:67	2912:67	20	0xff
LEAF_NODE	2912:71	2912:71	16	;
EXPR_STATEMENT	2913:5	2914:67	15	buffer [ 8 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength ) & 0xff ;
EXPR	2913:5	2913:5	16	buffer [ 8 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength ) & 0xff
ASSIGN	2913:5	2914:6	17	buffer [ 8 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength ) & 0xff
LVAL	2913:5	2913:5	18	buffer [ 8 ]
FIELD	2913:5	2913:13	19	buffer [ 8 ]
LEAF_NODE	2913:5	2913:5	20	buffer
LEAF_NODE	2913:11	2913:11	20	[
EXPR	2913:12	2913:12	20	8
FIELD	2913:12	2913:12	21	8
LEAF_NODE	2913:12	2913:12	22	8
LEAF_NODE	2913:13	2913:13	20	]
ASSIGN_OP	2913:14	2913:14	18	=
LEAF_NODE	2913:14	2913:14	19	=
RVAL	2914:6	2914:63	18	( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength ) & 0xff
LEAF_NODE	2914:6	2914:6	19	(
FIELD	2914:7	2914:38	19	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength
LEAF_NODE	2914:7	2914:7	20	t2p
LEAF_NODE	2914:10	2914:10	20	->
LEAF_NODE	2914:12	2914:12	20	tiff_tiles
LEAF_NODE	2914:22	2914:22	20	[
EXPR	2914:23	2914:23	20	t2p -> pdf_page
FIELD	2914:23	2914:28	21	t2p -> pdf_page
LEAF_NODE	2914:23	2914:23	22	t2p
LEAF_NODE	2914:26	2914:26	22	->
LEAF_NODE	2914:28	2914:28	22	pdf_page
LEAF_NODE	2914:36	2914:36	20	]
LEAF_NODE	2914:37	2914:37	20	.
LEAF_NODE	2914:38	2914:38	20	tiles_edgetilelength
LEAF_NODE	2914:59	2914:59	19	)
LEAF_NODE	2914:61	2914:61	19	&
FIELD	2914:63	2914:63	19	0xff
LEAF_NODE	2914:63	2914:63	20	0xff
LEAF_NODE	2914:67	2914:67	16	;
LEAF_NODE	2915:4	2915:4	14	}
SELECTION	2916:4	2916:68	12	
KEYWORD	2916:4	2916:4	13	if
LEAF_NODE	2916:4	2916:4	14	if
LEAF_NODE	2916:6	2916:6	13	(
CONDITION	2916:7	2916:7	13	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
EXPR	2916:7	2916:7	14	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
FUNCTION_CALL	2916:7	2916:66	15	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
CALLEE	2916:7	2916:7	16	t2p_tile_is_right_edge
LEAF_NODE	2916:7	2916:7	17	t2p_tile_is_right_edge
LEAF_NODE	2916:29	2916:29	16	(
ARGUMENT	2916:30	2916:30	16	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	2916:30	2916:59	17	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	2916:30	2916:30	18	t2p
LEAF_NODE	2916:33	2916:33	18	->
LEAF_NODE	2916:35	2916:35	18	tiff_tiles
LEAF_NODE	2916:45	2916:45	18	[
EXPR	2916:46	2916:46	18	t2p -> pdf_page
FIELD	2916:46	2916:51	19	t2p -> pdf_page
LEAF_NODE	2916:46	2916:46	20	t2p
LEAF_NODE	2916:49	2916:49	20	->
LEAF_NODE	2916:51	2916:51	20	pdf_page
LEAF_NODE	2916:59	2916:59	18	]
LEAF_NODE	2916:60	2916:60	16	,
ARGUMENT	2916:62	2916:62	16	tile
FIELD	2916:62	2916:62	17	tile
LEAF_NODE	2916:62	2916:62	18	tile
LEAF_NODE	2916:66	2916:66	16	)
LEAF_NODE	2916:67	2916:67	13	)
STATEMENTS	2916:68	2921:4	13	
LEAF_NODE	2916:68	2916:68	14	{
STATEMENTS	2917:5	2919:5	14	
EXPR_STATEMENT	2917:5	2918:70	15	buffer [ 9 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth >> 8 ) & 0xff ;
EXPR	2917:5	2917:5	16	buffer [ 9 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth >> 8 ) & 0xff
ASSIGN	2917:5	2918:6	17	buffer [ 9 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth >> 8 ) & 0xff
LVAL	2917:5	2917:5	18	buffer [ 9 ]
FIELD	2917:5	2917:13	19	buffer [ 9 ]
LEAF_NODE	2917:5	2917:5	20	buffer
LEAF_NODE	2917:11	2917:11	20	[
EXPR	2917:12	2917:12	20	9
FIELD	2917:12	2917:12	21	9
LEAF_NODE	2917:12	2917:12	22	9
LEAF_NODE	2917:13	2917:13	20	]
ASSIGN_OP	2917:14	2917:14	18	=
LEAF_NODE	2917:14	2917:14	19	=
RVAL	2918:6	2918:66	18	( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth >> 8 ) & 0xff
LEAF_NODE	2918:6	2918:6	19	(
FIELD	2918:7	2918:38	19	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth
LEAF_NODE	2918:7	2918:7	20	t2p
LEAF_NODE	2918:10	2918:10	20	->
LEAF_NODE	2918:12	2918:12	20	tiff_tiles
LEAF_NODE	2918:22	2918:22	20	[
EXPR	2918:23	2918:23	20	t2p -> pdf_page
FIELD	2918:23	2918:28	21	t2p -> pdf_page
LEAF_NODE	2918:23	2918:23	22	t2p
LEAF_NODE	2918:26	2918:26	22	->
LEAF_NODE	2918:28	2918:28	22	pdf_page
LEAF_NODE	2918:36	2918:36	20	]
LEAF_NODE	2918:37	2918:37	20	.
LEAF_NODE	2918:38	2918:38	20	tiles_edgetilewidth
LEAF_NODE	2918:58	2918:58	19	>>
FIELD	2918:61	2918:61	19	8
LEAF_NODE	2918:61	2918:61	20	8
LEAF_NODE	2918:62	2918:62	19	)
LEAF_NODE	2918:64	2918:64	19	&
FIELD	2918:66	2918:66	19	0xff
LEAF_NODE	2918:66	2918:66	20	0xff
LEAF_NODE	2918:70	2918:70	16	;
EXPR_STATEMENT	2919:5	2920:66	15	buffer [ 10 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth ) & 0xff ;
EXPR	2919:5	2919:5	16	buffer [ 10 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth ) & 0xff
ASSIGN	2919:5	2920:6	17	buffer [ 10 ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth ) & 0xff
LVAL	2919:5	2919:5	18	buffer [ 10 ]
FIELD	2919:5	2919:14	19	buffer [ 10 ]
LEAF_NODE	2919:5	2919:5	20	buffer
LEAF_NODE	2919:11	2919:11	20	[
EXPR	2919:12	2919:12	20	10
FIELD	2919:12	2919:12	21	10
LEAF_NODE	2919:12	2919:12	22	10
LEAF_NODE	2919:14	2919:14	20	]
ASSIGN_OP	2919:15	2919:15	18	=
LEAF_NODE	2919:15	2919:15	19	=
RVAL	2920:6	2920:62	18	( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth ) & 0xff
LEAF_NODE	2920:6	2920:6	19	(
FIELD	2920:7	2920:38	19	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth
LEAF_NODE	2920:7	2920:7	20	t2p
LEAF_NODE	2920:10	2920:10	20	->
LEAF_NODE	2920:12	2920:12	20	tiff_tiles
LEAF_NODE	2920:22	2920:22	20	[
EXPR	2920:23	2920:23	20	t2p -> pdf_page
FIELD	2920:23	2920:28	21	t2p -> pdf_page
LEAF_NODE	2920:23	2920:23	22	t2p
LEAF_NODE	2920:26	2920:26	22	->
LEAF_NODE	2920:28	2920:28	22	pdf_page
LEAF_NODE	2920:36	2920:36	20	]
LEAF_NODE	2920:37	2920:37	20	.
LEAF_NODE	2920:38	2920:38	20	tiles_edgetilewidth
LEAF_NODE	2920:58	2920:58	19	)
LEAF_NODE	2920:60	2920:60	19	&
FIELD	2920:62	2920:62	19	0xff
LEAF_NODE	2920:62	2920:62	20	0xff
LEAF_NODE	2920:66	2920:66	16	;
LEAF_NODE	2921:4	2921:4	14	}
LEAF_NODE	2922:3	2922:3	11	}
EXPR_STATEMENT	2923:3	2923:40	9	bufferoffset = t2p -> pdf_ojpegdatalength ;
EXPR	2923:3	2923:3	10	bufferoffset = t2p -> pdf_ojpegdatalength
ASSIGN	2923:3	2923:16	11	bufferoffset = t2p -> pdf_ojpegdatalength
LVAL	2923:3	2923:3	12	bufferoffset
FIELD	2923:3	2923:3	13	bufferoffset
LEAF_NODE	2923:3	2923:3	14	bufferoffset
ASSIGN_OP	2923:15	2923:15	12	=
LEAF_NODE	2923:15	2923:15	13	=
RVAL	2923:16	2923:16	12	t2p -> pdf_ojpegdatalength
FIELD	2923:16	2923:21	13	t2p -> pdf_ojpegdatalength
LEAF_NODE	2923:16	2923:16	14	t2p
LEAF_NODE	2923:19	2923:19	14	->
LEAF_NODE	2923:21	2923:21	14	pdf_ojpegdatalength
LEAF_NODE	2923:40	2923:40	10	;
EXPR_STATEMENT	2924:3	2927:8	9	bufferoffset += TIFFReadRawTile ( input , tile , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 ) ;
EXPR	2924:3	2924:3	10	bufferoffset += TIFFReadRawTile ( input , tile , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
ASSIGN	2924:3	2924:17	11	bufferoffset += TIFFReadRawTile ( input , tile , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
LVAL	2924:3	2924:3	12	bufferoffset
FIELD	2924:3	2924:3	13	bufferoffset
LEAF_NODE	2924:3	2924:3	14	bufferoffset
ASSIGN_OP	2924:15	2924:15	12	+=
LEAF_NODE	2924:15	2924:15	13	+=
RVAL	2924:17	2924:17	12	TIFFReadRawTile ( input , tile , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
FUNCTION_CALL	2924:17	2927:7	13	TIFFReadRawTile ( input , tile , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
CALLEE	2924:17	2924:17	14	TIFFReadRawTile
LEAF_NODE	2924:17	2924:17	15	TIFFReadRawTile
LEAF_NODE	2924:32	2924:32	14	(
ARGUMENT	2924:33	2924:33	14	input
FIELD	2924:33	2924:33	15	input
LEAF_NODE	2924:33	2924:33	16	input
LEAF_NODE	2924:38	2924:38	14	,
ARGUMENT	2925:5	2925:5	14	tile
FIELD	2925:5	2925:5	15	tile
LEAF_NODE	2925:5	2925:5	16	tile
LEAF_NODE	2925:9	2925:9	14	,
ARGUMENT	2926:5	2926:15	14	( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] )
LEAF_NODE	2926:5	2926:5	15	(
TYPE_NAME	2926:6	2926:6	15	tdata_t
LEAF_NODE	2926:6	2926:6	16	tdata_t
LEAF_NODE	2926:13	2926:13	15	)
UNARY_EXPR	2926:15	2926:55	15	& ( ( ( unsigned char * ) buffer ) [ bufferoffset ] )
UNARY_OPERATOR	2926:15	2926:15	16	&
LEAF_NODE	2926:15	2926:15	17	&
LEAF_NODE	2926:16	2926:16	16	(
LEAF_NODE	2926:17	2926:17	16	(
LEAF_NODE	2926:18	2926:18	16	(
TYPE_NAME	2926:19	2926:28	16	unsigned char
LEAF_NODE	2926:19	2926:19	17	unsigned
LEAF_NODE	2926:28	2926:28	17	char
LEAF_NODE	2926:32	2926:32	16	*
LEAF_NODE	2926:33	2926:33	16	)
FIELD	2926:34	2926:34	16	buffer
LEAF_NODE	2926:34	2926:34	17	buffer
LEAF_NODE	2926:40	2926:40	16	)
LEAF_NODE	2926:41	2926:41	16	[
EXPR	2926:42	2926:42	16	bufferoffset
FIELD	2926:42	2926:42	17	bufferoffset
LEAF_NODE	2926:42	2926:42	18	bufferoffset
LEAF_NODE	2926:54	2926:54	16	]
LEAF_NODE	2926:55	2926:55	16	)
LEAF_NODE	2926:56	2926:56	14	,
ARGUMENT	2927:5	2927:5	14	- 1
UNARY_EXPR	2927:5	2927:6	15	- 1
UNARY_OPERATOR	2927:5	2927:5	16	-
LEAF_NODE	2927:5	2927:5	17	-
FIELD	2927:6	2927:6	16	1
LEAF_NODE	2927:6	2927:6	17	1
LEAF_NODE	2927:7	2927:7	14	)
LEAF_NODE	2927:8	2927:8	10	;
EXPR_STATEMENT	2928:3	2928:48	9	( ( unsigned char * ) buffer ) [ bufferoffset ++ ] = 0xff ;
EXPR	2928:3	2928:3	10	( ( unsigned char * ) buffer ) [ bufferoffset ++ ] = 0xff
ASSIGN	2928:3	2928:44	11	( ( unsigned char * ) buffer ) [ bufferoffset ++ ] = 0xff
LVAL	2928:3	2928:42	12	( ( unsigned char * ) buffer ) [ bufferoffset ++ ]
LEAF_NODE	2928:3	2928:3	13	(
LEAF_NODE	2928:4	2928:4	13	(
TYPE_NAME	2928:5	2928:14	13	unsigned char
LEAF_NODE	2928:5	2928:5	14	unsigned
LEAF_NODE	2928:14	2928:14	14	char
LEAF_NODE	2928:18	2928:18	13	*
LEAF_NODE	2928:19	2928:19	13	)
FIELD	2928:20	2928:20	13	buffer
LEAF_NODE	2928:20	2928:20	14	buffer
LEAF_NODE	2928:26	2928:26	13	)
LEAF_NODE	2928:27	2928:27	13	[
EXPR	2928:28	2928:28	13	bufferoffset ++
FIELD	2928:28	2928:40	14	bufferoffset ++
LEAF_NODE	2928:28	2928:28	15	bufferoffset
LEAF_NODE	2928:40	2928:40	15	++
LEAF_NODE	2928:42	2928:42	13	]
ASSIGN_OP	2928:43	2928:43	12	=
LEAF_NODE	2928:43	2928:43	13	=
RVAL	2928:44	2928:44	12	0xff
FIELD	2928:44	2928:44	13	0xff
LEAF_NODE	2928:44	2928:44	14	0xff
LEAF_NODE	2928:48	2928:48	10	;
EXPR_STATEMENT	2929:3	2929:48	9	( ( unsigned char * ) buffer ) [ bufferoffset ++ ] = 0xd9 ;
EXPR	2929:3	2929:3	10	( ( unsigned char * ) buffer ) [ bufferoffset ++ ] = 0xd9
ASSIGN	2929:3	2929:44	11	( ( unsigned char * ) buffer ) [ bufferoffset ++ ] = 0xd9
LVAL	2929:3	2929:42	12	( ( unsigned char * ) buffer ) [ bufferoffset ++ ]
LEAF_NODE	2929:3	2929:3	13	(
LEAF_NODE	2929:4	2929:4	13	(
TYPE_NAME	2929:5	2929:14	13	unsigned char
LEAF_NODE	2929:5	2929:5	14	unsigned
LEAF_NODE	2929:14	2929:14	14	char
LEAF_NODE	2929:18	2929:18	13	*
LEAF_NODE	2929:19	2929:19	13	)
FIELD	2929:20	2929:20	13	buffer
LEAF_NODE	2929:20	2929:20	14	buffer
LEAF_NODE	2929:26	2929:26	13	)
LEAF_NODE	2929:27	2929:27	13	[
EXPR	2929:28	2929:28	13	bufferoffset ++
FIELD	2929:28	2929:40	14	bufferoffset ++
LEAF_NODE	2929:28	2929:28	15	bufferoffset
LEAF_NODE	2929:40	2929:40	15	++
LEAF_NODE	2929:42	2929:42	13	]
ASSIGN_OP	2929:43	2929:43	12	=
LEAF_NODE	2929:43	2929:43	13	=
RVAL	2929:44	2929:44	12	0xd9
FIELD	2929:44	2929:44	13	0xd9
LEAF_NODE	2929:44	2929:44	14	0xd9
LEAF_NODE	2929:48	2929:48	10	;
EXPR_STATEMENT	2930:3	2930:55	9	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset ) ;
EXPR	2930:3	2930:3	10	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset )
FUNCTION_CALL	2930:3	2930:54	11	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset )
CALLEE	2930:3	2930:3	12	t2pWriteFile
LEAF_NODE	2930:3	2930:3	13	t2pWriteFile
LEAF_NODE	2930:15	2930:15	12	(
ARGUMENT	2930:16	2930:16	12	output
FIELD	2930:16	2930:16	13	output
LEAF_NODE	2930:16	2930:16	14	output
LEAF_NODE	2930:22	2930:22	12	,
ARGUMENT	2930:24	2930:34	12	( tdata_t ) buffer
LEAF_NODE	2930:24	2930:24	13	(
TYPE_NAME	2930:25	2930:25	13	tdata_t
LEAF_NODE	2930:25	2930:25	14	tdata_t
LEAF_NODE	2930:32	2930:32	13	)
FIELD	2930:34	2930:34	13	buffer
LEAF_NODE	2930:34	2930:34	14	buffer
LEAF_NODE	2930:40	2930:40	12	,
ARGUMENT	2930:42	2930:42	12	bufferoffset
FIELD	2930:42	2930:42	13	bufferoffset
LEAF_NODE	2930:42	2930:42	14	bufferoffset
LEAF_NODE	2930:54	2930:54	12	)
LEAF_NODE	2930:55	2930:55	10	;
EXPR_STATEMENT	2931:3	2931:20	9	_TIFFfree ( buffer ) ;
EXPR	2931:3	2931:3	10	_TIFFfree ( buffer )
FUNCTION_CALL	2931:3	2931:19	11	_TIFFfree ( buffer )
CALLEE	2931:3	2931:3	12	_TIFFfree
LEAF_NODE	2931:3	2931:3	13	_TIFFfree
LEAF_NODE	2931:12	2931:12	12	(
ARGUMENT	2931:13	2931:13	12	buffer
FIELD	2931:13	2931:13	13	buffer
LEAF_NODE	2931:13	2931:13	14	buffer
LEAF_NODE	2931:19	2931:19	12	)
LEAF_NODE	2931:20	2931:20	10	;
LEAF_NODE	2932:3	2932:3	9	return
LEAF_NODE	2932:9	2932:9	9	(
LEAF_NODE	2932:10	2932:10	9	bufferoffset
LEAF_NODE	2932:22	2932:22	9	)
LEAF_NODE	2932:23	2932:23	9	;
LEAF_NODE	2933:2	2933:2	8	}
SELECTION	2936:2	2936:47	6	
KEYWORD	2936:2	2936:2	7	if
LEAF_NODE	2936:2	2936:2	8	if
LEAF_NODE	2936:4	2936:4	7	(
CONDITION	2936:5	2936:5	7	t2p -> tiff_compression == COMPRESSION_JPEG
EXPR	2936:5	2936:30	8	t2p -> tiff_compression == COMPRESSION_JPEG
FIELD	2936:5	2936:10	9	t2p -> tiff_compression
LEAF_NODE	2936:5	2936:5	10	t2p
LEAF_NODE	2936:8	2936:8	10	->
LEAF_NODE	2936:10	2936:10	10	tiff_compression
EQ_OPERATOR	2936:27	2936:27	9	==
LEAF_NODE	2936:27	2936:27	10	==
FIELD	2936:30	2936:30	9	COMPRESSION_JPEG
LEAF_NODE	2936:30	2936:30	10	COMPRESSION_JPEG
LEAF_NODE	2936:46	2936:46	7	)
STATEMENTS	2936:47	2981:2	7	
LEAF_NODE	2936:47	2936:47	8	{
STATEMENTS	2937:3	2980:23	8	
SIMPLE_DECL	2937:3	2937:29	9	unsigned char [ 2 ] table_end ;
VAR_DECL	2937:3	2937:17	10	unsigned char [ 2 ] table_end
TYPE	2937:3	2937:26	11	unsigned char [ 2 ]
TYPE_NAME	2937:3	2937:12	12	unsigned char
LEAF_NODE	2937:3	2937:3	13	unsigned
LEAF_NODE	2937:12	2937:12	13	char
TYPE_SUFFIX	2937:26	2937:28	12	[ 2 ]
LEAF_NODE	2937:26	2937:26	13	[
FIELD	2937:27	2937:27	13	2
LEAF_NODE	2937:27	2937:27	14	2
LEAF_NODE	2937:28	2937:28	13	]
NAME	2937:17	2937:17	11	table_end
LEAF_NODE	2937:17	2937:17	12	table_end
LEAF_NODE	2937:29	2937:29	10	;
SIMPLE_DECL	2938:3	2938:19	9	uint32 count ; count = 0 ;
VAR_DECL	2938:3	2938:10	10	uint32 count ; count = 0
TYPE	2938:3	2938:3	11	uint32
TYPE_NAME	2938:3	2938:3	12	uint32
LEAF_NODE	2938:3	2938:3	13	uint32
NAME	2938:10	2938:10	11	count
LEAF_NODE	2938:10	2938:10	12	count
LEAF_NODE	0:0	0:0	11	;
INIT	2938:10	2938:10	11	count = 0
ASSIGN	2938:10	2938:18	12	count = 0
LVAL	2938:10	2938:10	13	count
NAME	2938:10	2938:10	14	count
LEAF_NODE	2938:10	2938:10	15	count
ASSIGN_OP	2938:16	2938:16	13	=
LEAF_NODE	2938:16	2938:16	14	=
RVAL	2938:18	2938:18	13	0
FIELD	2938:18	2938:18	14	0
LEAF_NODE	2938:18	2938:18	15	0
LEAF_NODE	2938:19	2938:19	10	;
EXPR_STATEMENT	2939:3	2939:59	9	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2939:3	2939:3	10	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2939:3	2939:11	11	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2939:3	2939:3	12	buffer
FIELD	2939:3	2939:3	13	buffer
LEAF_NODE	2939:3	2939:3	14	buffer
ASSIGN_OP	2939:9	2939:9	12	=
LEAF_NODE	2939:9	2939:9	13	=
RVAL	2939:11	2939:28	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2939:11	2939:11	13	(
TYPE_NAME	2939:12	2939:21	13	unsigned char
LEAF_NODE	2939:12	2939:12	14	unsigned
LEAF_NODE	2939:21	2939:21	14	char
LEAF_NODE	2939:25	2939:25	13	*
LEAF_NODE	2939:26	2939:26	13	)
FUNCTION_CALL	2939:28	2939:58	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2939:28	2939:28	14	_TIFFmalloc
LEAF_NODE	2939:28	2939:28	15	_TIFFmalloc
LEAF_NODE	2939:39	2939:39	14	(
ARGUMENT	2939:40	2939:40	14	t2p -> tiff_datasize
FIELD	2939:40	2939:45	15	t2p -> tiff_datasize
LEAF_NODE	2939:40	2939:40	16	t2p
LEAF_NODE	2939:43	2939:43	16	->
LEAF_NODE	2939:45	2939:45	16	tiff_datasize
LEAF_NODE	2939:58	2939:58	14	)
LEAF_NODE	2939:59	2939:59	10	;
SELECTION	2940:3	2940:19	9	
KEYWORD	2940:3	2940:3	10	if
LEAF_NODE	2940:3	2940:3	11	if
LEAF_NODE	2940:5	2940:5	10	(
CONDITION	2940:6	2940:6	10	buffer == NULL
EXPR	2940:6	2940:14	11	buffer == NULL
FIELD	2940:6	2940:6	12	buffer
LEAF_NODE	2940:6	2940:6	13	buffer
EQ_OPERATOR	2940:12	2940:12	12	==
LEAF_NODE	2940:12	2940:12	13	==
FIELD	2940:14	2940:14	12	NULL
LEAF_NODE	2940:14	2940:14	13	NULL
LEAF_NODE	2940:18	2940:18	10	)
STATEMENTS	2940:19	2948:3	10	
LEAF_NODE	2940:19	2940:19	11	{
STATEMENTS	2941:4	2947:4	11	
LEAF_NODE	2941:4	2941:4	12	TIFFError
LEAF_NODE	2941:13	2941:13	12	(
LEAF_NODE	2941:14	2941:14	12	TIFF2PDF_MODULE
LEAF_NODE	2941:29	2941:29	12	,
LEAF_NODE	2942:5	2942:5	12	"Can't allocate "
LEAF_NODE	2942:23	2942:23	12	TIFF_SIZE_FORMAT
LEAF_NODE	2942:40	2942:40	12	" bytes of memory "
LEAF_NODE	2943:40	2943:40	12	"for t2p_readwrite_pdf_image_tile, %s"
LEAF_NODE	2943:78	2943:78	12	,
LEAF_NODE	2944:42	2944:42	12	(
LEAF_NODE	2944:43	2944:43	12	TIFF_SIZE_T
LEAF_NODE	2944:54	2944:54	12	)
LEAF_NODE	2944:56	2944:56	12	t2p
LEAF_NODE	2944:59	2944:59	12	->
LEAF_NODE	2944:61	2944:61	12	tiff_datasize
LEAF_NODE	2944:74	2944:74	12	,
LEAF_NODE	2945:5	2945:5	12	TIFFFileName
LEAF_NODE	2945:17	2945:17	12	(
LEAF_NODE	2945:18	2945:18	12	input
LEAF_NODE	2945:23	2945:23	12	)
LEAF_NODE	2945:24	2945:24	12	)
LEAF_NODE	2945:25	2945:25	12	;
EXPR_STATEMENT	2946:4	2946:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2946:4	2946:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2946:4	2946:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2946:4	2946:4	15	t2p -> t2p_error
FIELD	2946:4	2946:9	16	t2p -> t2p_error
LEAF_NODE	2946:4	2946:4	17	t2p
LEAF_NODE	2946:7	2946:7	17	->
LEAF_NODE	2946:9	2946:9	17	t2p_error
ASSIGN_OP	2946:19	2946:19	15	=
LEAF_NODE	2946:19	2946:19	16	=
RVAL	2946:21	2946:21	15	T2P_ERR_ERROR
FIELD	2946:21	2946:21	16	T2P_ERR_ERROR
LEAF_NODE	2946:21	2946:21	17	T2P_ERR_ERROR
LEAF_NODE	2946:34	2946:34	13	;
JUMP_STATEMENT	2947:4	2947:13	12	return ( 0 ) ;
KEYWORD	2947:4	2947:4	13	return
LEAF_NODE	2947:4	2947:4	14	return
DESTINATION	2947:10	2947:10	13	( 0 )
EXPR	2947:10	2947:12	14	( 0 )
LEAF_NODE	2947:10	2947:10	15	(
FIELD	2947:11	2947:11	15	0
LEAF_NODE	2947:11	2947:11	16	0
LEAF_NODE	2947:12	2947:12	15	)
LEAF_NODE	2947:13	2947:13	13	;
LEAF_NODE	2948:3	2948:3	11	}
SELECTION	2949:3	2949:66	9	
KEYWORD	2949:3	2949:3	10	if
LEAF_NODE	2949:3	2949:3	11	if
LEAF_NODE	2949:5	2949:5	10	(
CONDITION	2949:6	2949:6	10	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt ) != 0
EXPR	2949:6	2949:63	11	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt ) != 0
FUNCTION_CALL	2949:6	2949:58	12	TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt )
CALLEE	2949:6	2949:6	13	TIFFGetField
LEAF_NODE	2949:6	2949:6	14	TIFFGetField
LEAF_NODE	2949:18	2949:18	13	(
ARGUMENT	2949:19	2949:19	13	input
FIELD	2949:19	2949:19	14	input
LEAF_NODE	2949:19	2949:19	15	input
LEAF_NODE	2949:24	2949:24	13	,
ARGUMENT	2949:26	2949:26	13	TIFFTAG_JPEGTABLES
FIELD	2949:26	2949:26	14	TIFFTAG_JPEGTABLES
LEAF_NODE	2949:26	2949:26	15	TIFFTAG_JPEGTABLES
LEAF_NODE	2949:44	2949:44	13	,
ARGUMENT	2949:46	2949:46	13	& count
UNARY_EXPR	2949:46	2949:47	14	& count
UNARY_OPERATOR	2949:46	2949:46	15	&
LEAF_NODE	2949:46	2949:46	16	&
FIELD	2949:47	2949:47	15	count
LEAF_NODE	2949:47	2949:47	16	count
LEAF_NODE	2949:52	2949:52	13	,
ARGUMENT	2949:54	2949:54	13	& jpt
UNARY_EXPR	2949:54	2949:55	14	& jpt
UNARY_OPERATOR	2949:54	2949:54	15	&
LEAF_NODE	2949:54	2949:54	16	&
FIELD	2949:55	2949:55	15	jpt
LEAF_NODE	2949:55	2949:55	16	jpt
LEAF_NODE	2949:58	2949:58	13	)
EQ_OPERATOR	2949:60	2949:60	12	!=
LEAF_NODE	2949:60	2949:60	13	!=
FIELD	2949:63	2949:63	12	0
LEAF_NODE	2949:63	2949:63	13	0
LEAF_NODE	2949:64	2949:64	10	)
STATEMENTS	2949:66	2977:3	10	
LEAF_NODE	2949:66	2949:66	11	{
STATEMENTS	2950:4	2950:4	11	
SELECTION	2950:4	2950:19	12	
KEYWORD	2950:4	2950:4	13	if
LEAF_NODE	2950:4	2950:4	14	if
LEAF_NODE	2950:7	2950:7	13	(
CONDITION	2950:8	2950:8	13	count > 4
EXPR	2950:8	2950:16	14	count > 4
FIELD	2950:8	2950:8	15	count
LEAF_NODE	2950:8	2950:8	16	count
REL_OPERATOR	2950:14	2950:14	15	>
LEAF_NODE	2950:14	2950:14	16	>
FIELD	2950:16	2950:16	15	4
LEAF_NODE	2950:16	2950:16	16	4
LEAF_NODE	2950:17	2950:17	13	)
STATEMENTS	2950:19	2976:4	13	
LEAF_NODE	2950:19	2950:19	14	{
STATEMENTS	2951:40	2975:5	14	
SIMPLE_DECL	2951:40	2951:62	15	int retTIFFReadRawTile ;
VAR_DECL	2951:40	2951:44	16	int retTIFFReadRawTile
TYPE	2951:40	2951:40	17	int
TYPE_NAME	2951:40	2951:40	18	int
LEAF_NODE	2951:40	2951:40	19	int
NAME	2951:44	2951:44	17	retTIFFReadRawTile
LEAF_NODE	2951:44	2951:44	18	retTIFFReadRawTile
LEAF_NODE	2951:62	2951:62	16	;
EXPR_STATEMENT	2953:5	2953:40	15	_TIFFmemcpy ( buffer , jpt , count - 2 ) ;
EXPR	2953:5	2953:5	16	_TIFFmemcpy ( buffer , jpt , count - 2 )
FUNCTION_CALL	2953:5	2953:39	17	_TIFFmemcpy ( buffer , jpt , count - 2 )
CALLEE	2953:5	2953:5	18	_TIFFmemcpy
LEAF_NODE	2953:5	2953:5	19	_TIFFmemcpy
LEAF_NODE	2953:16	2953:16	18	(
ARGUMENT	2953:17	2953:17	18	buffer
FIELD	2953:17	2953:17	19	buffer
LEAF_NODE	2953:17	2953:17	20	buffer
LEAF_NODE	2953:23	2953:23	18	,
ARGUMENT	2953:25	2953:25	18	jpt
FIELD	2953:25	2953:25	19	jpt
LEAF_NODE	2953:25	2953:25	20	jpt
LEAF_NODE	2953:28	2953:28	18	,
ARGUMENT	2953:30	2953:38	18	count - 2
FIELD	2953:30	2953:30	19	count
LEAF_NODE	2953:30	2953:30	20	count
LEAF_NODE	2953:36	2953:36	19	-
FIELD	2953:38	2953:38	19	2
LEAF_NODE	2953:38	2953:38	20	2
LEAF_NODE	2953:39	2953:39	18	)
LEAF_NODE	2953:40	2953:40	16	;
EXPR_STATEMENT	2954:5	2954:30	15	bufferoffset += count - 2 ;
EXPR	2954:5	2954:5	16	bufferoffset += count - 2
ASSIGN	2954:5	2954:21	17	bufferoffset += count - 2
LVAL	2954:5	2954:5	18	bufferoffset
FIELD	2954:5	2954:5	19	bufferoffset
LEAF_NODE	2954:5	2954:5	20	bufferoffset
ASSIGN_OP	2954:18	2954:18	18	+=
LEAF_NODE	2954:18	2954:18	19	+=
RVAL	2954:21	2954:29	18	count - 2
FIELD	2954:21	2954:21	19	count
LEAF_NODE	2954:21	2954:21	20	count
LEAF_NODE	2954:27	2954:27	19	-
FIELD	2954:29	2954:29	19	2
LEAF_NODE	2954:29	2954:29	20	2
LEAF_NODE	2954:30	2954:30	16	;
EXPR_STATEMENT	2956:5	2956:42	15	table_end [ 0 ] = buffer [ bufferoffset - 2 ] ;
EXPR	2956:5	2956:5	16	table_end [ 0 ] = buffer [ bufferoffset - 2 ]
ASSIGN	2956:5	2956:20	17	table_end [ 0 ] = buffer [ bufferoffset - 2 ]
LVAL	2956:5	2956:5	18	table_end [ 0 ]
FIELD	2956:5	2956:16	19	table_end [ 0 ]
LEAF_NODE	2956:5	2956:5	20	table_end
LEAF_NODE	2956:14	2956:14	20	[
EXPR	2956:15	2956:15	20	0
FIELD	2956:15	2956:15	21	0
LEAF_NODE	2956:15	2956:15	22	0
LEAF_NODE	2956:16	2956:16	20	]
ASSIGN_OP	2956:18	2956:18	18	=
LEAF_NODE	2956:18	2956:18	19	=
RVAL	2956:20	2956:20	18	buffer [ bufferoffset - 2 ]
FIELD	2956:20	2956:41	19	buffer [ bufferoffset - 2 ]
LEAF_NODE	2956:20	2956:20	20	buffer
LEAF_NODE	2956:26	2956:26	20	[
EXPR	2956:27	2956:40	20	bufferoffset - 2
FIELD	2956:27	2956:27	21	bufferoffset
LEAF_NODE	2956:27	2956:27	22	bufferoffset
LEAF_NODE	2956:39	2956:39	21	-
FIELD	2956:40	2956:40	21	2
LEAF_NODE	2956:40	2956:40	22	2
LEAF_NODE	2956:41	2956:41	20	]
LEAF_NODE	2956:42	2956:42	16	;
EXPR_STATEMENT	2957:5	2957:42	15	table_end [ 1 ] = buffer [ bufferoffset - 1 ] ;
EXPR	2957:5	2957:5	16	table_end [ 1 ] = buffer [ bufferoffset - 1 ]
ASSIGN	2957:5	2957:20	17	table_end [ 1 ] = buffer [ bufferoffset - 1 ]
LVAL	2957:5	2957:5	18	table_end [ 1 ]
FIELD	2957:5	2957:16	19	table_end [ 1 ]
LEAF_NODE	2957:5	2957:5	20	table_end
LEAF_NODE	2957:14	2957:14	20	[
EXPR	2957:15	2957:15	20	1
FIELD	2957:15	2957:15	21	1
LEAF_NODE	2957:15	2957:15	22	1
LEAF_NODE	2957:16	2957:16	20	]
ASSIGN_OP	2957:18	2957:18	18	=
LEAF_NODE	2957:18	2957:18	19	=
RVAL	2957:20	2957:20	18	buffer [ bufferoffset - 1 ]
FIELD	2957:20	2957:41	19	buffer [ bufferoffset - 1 ]
LEAF_NODE	2957:20	2957:20	20	buffer
LEAF_NODE	2957:26	2957:26	20	[
EXPR	2957:27	2957:40	20	bufferoffset - 1
FIELD	2957:27	2957:27	21	bufferoffset
LEAF_NODE	2957:27	2957:27	22	bufferoffset
LEAF_NODE	2957:39	2957:39	21	-
FIELD	2957:40	2957:40	21	1
LEAF_NODE	2957:40	2957:40	22	1
LEAF_NODE	2957:41	2957:41	20	]
LEAF_NODE	2957:42	2957:42	16	;
EXPR_STATEMENT	2958:5	2958:27	15	xuint32 = bufferoffset ;
EXPR	2958:5	2958:5	16	xuint32 = bufferoffset
ASSIGN	2958:5	2958:15	17	xuint32 = bufferoffset
LVAL	2958:5	2958:5	18	xuint32
FIELD	2958:5	2958:5	19	xuint32
LEAF_NODE	2958:5	2958:5	20	xuint32
ASSIGN_OP	2958:13	2958:13	18	=
LEAF_NODE	2958:13	2958:13	19	=
RVAL	2958:15	2958:15	18	bufferoffset
FIELD	2958:15	2958:15	19	bufferoffset
LEAF_NODE	2958:15	2958:15	20	bufferoffset
LEAF_NODE	2958:27	2958:27	16	;
EXPR_STATEMENT	2959:40	2959:57	15	bufferoffset -= 2 ;
EXPR	2959:40	2959:40	16	bufferoffset -= 2
ASSIGN	2959:40	2959:56	17	bufferoffset -= 2
LVAL	2959:40	2959:40	18	bufferoffset
FIELD	2959:40	2959:40	19	bufferoffset
LEAF_NODE	2959:40	2959:40	20	bufferoffset
ASSIGN_OP	2959:53	2959:53	18	-=
LEAF_NODE	2959:53	2959:53	19	-=
RVAL	2959:56	2959:56	18	2
FIELD	2959:56	2959:56	19	2
LEAF_NODE	2959:56	2959:56	20	2
LEAF_NODE	2959:57	2959:57	16	;
EXPR_STATEMENT	2960:40	2964:9	15	retTIFFReadRawTile = TIFFReadRawTile ( input , tile , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 ) ;
EXPR	2960:40	2960:40	16	retTIFFReadRawTile = TIFFReadRawTile ( input , tile , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
ASSIGN	2960:40	2960:60	17	retTIFFReadRawTile = TIFFReadRawTile ( input , tile , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
LVAL	2960:40	2960:40	18	retTIFFReadRawTile
FIELD	2960:40	2960:40	19	retTIFFReadRawTile
LEAF_NODE	2960:40	2960:40	20	retTIFFReadRawTile
ASSIGN_OP	2960:58	2960:58	18	=
LEAF_NODE	2960:58	2960:58	19	=
RVAL	2960:60	2960:60	18	TIFFReadRawTile ( input , tile , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
FUNCTION_CALL	2960:60	2964:8	19	TIFFReadRawTile ( input , tile , ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , - 1 )
CALLEE	2960:60	2960:60	20	TIFFReadRawTile
LEAF_NODE	2960:60	2960:60	21	TIFFReadRawTile
LEAF_NODE	2960:75	2960:75	20	(
ARGUMENT	2961:6	2961:6	20	input
FIELD	2961:6	2961:6	21	input
LEAF_NODE	2961:6	2961:6	22	input
LEAF_NODE	2961:11	2961:11	20	,
ARGUMENT	2962:6	2962:6	20	tile
FIELD	2962:6	2962:6	21	tile
LEAF_NODE	2962:6	2962:6	22	tile
LEAF_NODE	2962:10	2962:10	20	,
ARGUMENT	2963:6	2963:16	20	( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] )
LEAF_NODE	2963:6	2963:6	21	(
TYPE_NAME	2963:7	2963:7	21	tdata_t
LEAF_NODE	2963:7	2963:7	22	tdata_t
LEAF_NODE	2963:14	2963:14	21	)
UNARY_EXPR	2963:16	2963:56	21	& ( ( ( unsigned char * ) buffer ) [ bufferoffset ] )
UNARY_OPERATOR	2963:16	2963:16	22	&
LEAF_NODE	2963:16	2963:16	23	&
LEAF_NODE	2963:17	2963:17	22	(
LEAF_NODE	2963:18	2963:18	22	(
LEAF_NODE	2963:19	2963:19	22	(
TYPE_NAME	2963:20	2963:29	22	unsigned char
LEAF_NODE	2963:20	2963:20	23	unsigned
LEAF_NODE	2963:29	2963:29	23	char
LEAF_NODE	2963:33	2963:33	22	*
LEAF_NODE	2963:34	2963:34	22	)
FIELD	2963:35	2963:35	22	buffer
LEAF_NODE	2963:35	2963:35	23	buffer
LEAF_NODE	2963:41	2963:41	22	)
LEAF_NODE	2963:42	2963:42	22	[
EXPR	2963:43	2963:43	22	bufferoffset
FIELD	2963:43	2963:43	23	bufferoffset
LEAF_NODE	2963:43	2963:43	24	bufferoffset
LEAF_NODE	2963:55	2963:55	22	]
LEAF_NODE	2963:56	2963:56	22	)
LEAF_NODE	2963:57	2963:57	20	,
ARGUMENT	2964:6	2964:6	20	- 1
UNARY_EXPR	2964:6	2964:7	21	- 1
UNARY_OPERATOR	2964:6	2964:6	22	-
LEAF_NODE	2964:6	2964:6	23	-
FIELD	2964:7	2964:7	22	1
LEAF_NODE	2964:7	2964:7	23	1
LEAF_NODE	2964:8	2964:8	20	)
LEAF_NODE	2964:9	2964:9	16	;
SELECTION	2965:40	2966:40	15	
KEYWORD	2965:40	2965:40	16	if
LEAF_NODE	2965:40	2965:40	17	if
LEAF_NODE	2965:42	2965:42	16	(
CONDITION	2965:44	2965:44	16	retTIFFReadRawTile < 0
EXPR	2965:44	2965:65	17	retTIFFReadRawTile < 0
FIELD	2965:44	2965:44	18	retTIFFReadRawTile
LEAF_NODE	2965:44	2965:44	19	retTIFFReadRawTile
REL_OPERATOR	2965:63	2965:63	18	<
LEAF_NODE	2965:63	2965:63	19	<
FIELD	2965:65	2965:65	18	0
LEAF_NODE	2965:65	2965:65	19	0
LEAF_NODE	2965:67	2965:67	16	)
STATEMENTS	2966:40	2970:40	16	
LEAF_NODE	2966:40	2966:40	17	{
STATEMENTS	2967:44	2969:44	17	
EXPR_STATEMENT	2967:44	2967:61	18	_TIFFfree ( buffer ) ;
EXPR	2967:44	2967:44	19	_TIFFfree ( buffer )
FUNCTION_CALL	2967:44	2967:60	20	_TIFFfree ( buffer )
CALLEE	2967:44	2967:44	21	_TIFFfree
LEAF_NODE	2967:44	2967:44	22	_TIFFfree
LEAF_NODE	2967:53	2967:53	21	(
ARGUMENT	2967:54	2967:54	21	buffer
FIELD	2967:54	2967:54	22	buffer
LEAF_NODE	2967:54	2967:54	23	buffer
LEAF_NODE	2967:60	2967:60	21	)
LEAF_NODE	2967:61	2967:61	19	;
EXPR_STATEMENT	2968:44	2968:74	18	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2968:44	2968:44	19	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2968:44	2968:61	20	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2968:44	2968:44	21	t2p -> t2p_error
FIELD	2968:44	2968:49	22	t2p -> t2p_error
LEAF_NODE	2968:44	2968:44	23	t2p
LEAF_NODE	2968:47	2968:47	23	->
LEAF_NODE	2968:49	2968:49	23	t2p_error
ASSIGN_OP	2968:59	2968:59	21	=
LEAF_NODE	2968:59	2968:59	22	=
RVAL	2968:61	2968:61	21	T2P_ERR_ERROR
FIELD	2968:61	2968:61	22	T2P_ERR_ERROR
LEAF_NODE	2968:61	2968:61	23	T2P_ERR_ERROR
LEAF_NODE	2968:74	2968:74	19	;
JUMP_STATEMENT	2969:44	2969:53	18	return ( 0 ) ;
KEYWORD	2969:44	2969:44	19	return
LEAF_NODE	2969:44	2969:44	20	return
DESTINATION	2969:50	2969:50	19	( 0 )
EXPR	2969:50	2969:52	20	( 0 )
LEAF_NODE	2969:50	2969:50	21	(
FIELD	2969:51	2969:51	21	0
LEAF_NODE	2969:51	2969:51	22	0
LEAF_NODE	2969:52	2969:52	21	)
LEAF_NODE	2969:53	2969:53	19	;
LEAF_NODE	2970:40	2970:40	17	}
EXPR_STATEMENT	2971:5	2971:39	15	bufferoffset += retTIFFReadRawTile ;
EXPR	2971:5	2971:5	16	bufferoffset += retTIFFReadRawTile
ASSIGN	2971:5	2971:21	17	bufferoffset += retTIFFReadRawTile
LVAL	2971:5	2971:5	18	bufferoffset
FIELD	2971:5	2971:5	19	bufferoffset
LEAF_NODE	2971:5	2971:5	20	bufferoffset
ASSIGN_OP	2971:18	2971:18	18	+=
LEAF_NODE	2971:18	2971:18	19	+=
RVAL	2971:21	2971:21	18	retTIFFReadRawTile
FIELD	2971:21	2971:21	19	retTIFFReadRawTile
LEAF_NODE	2971:21	2971:21	20	retTIFFReadRawTile
LEAF_NODE	2971:39	2971:39	16	;
EXPR_STATEMENT	2974:5	2974:35	15	buffer [ xuint32 - 2 ] = table_end [ 0 ] ;
EXPR	2974:5	2974:5	16	buffer [ xuint32 - 2 ] = table_end [ 0 ]
ASSIGN	2974:5	2974:23	17	buffer [ xuint32 - 2 ] = table_end [ 0 ]
LVAL	2974:5	2974:5	18	buffer [ xuint32 - 2 ]
FIELD	2974:5	2974:21	19	buffer [ xuint32 - 2 ]
LEAF_NODE	2974:5	2974:5	20	buffer
LEAF_NODE	2974:11	2974:11	20	[
EXPR	2974:12	2974:20	20	xuint32 - 2
FIELD	2974:12	2974:12	21	xuint32
LEAF_NODE	2974:12	2974:12	22	xuint32
LEAF_NODE	2974:19	2974:19	21	-
FIELD	2974:20	2974:20	21	2
LEAF_NODE	2974:20	2974:20	22	2
LEAF_NODE	2974:21	2974:21	20	]
ASSIGN_OP	2974:22	2974:22	18	=
LEAF_NODE	2974:22	2974:22	19	=
RVAL	2974:23	2974:23	18	table_end [ 0 ]
FIELD	2974:23	2974:34	19	table_end [ 0 ]
LEAF_NODE	2974:23	2974:23	20	table_end
LEAF_NODE	2974:32	2974:32	20	[
EXPR	2974:33	2974:33	20	0
FIELD	2974:33	2974:33	21	0
LEAF_NODE	2974:33	2974:33	22	0
LEAF_NODE	2974:34	2974:34	20	]
LEAF_NODE	2974:35	2974:35	16	;
EXPR_STATEMENT	2975:5	2975:35	15	buffer [ xuint32 - 1 ] = table_end [ 1 ] ;
EXPR	2975:5	2975:5	16	buffer [ xuint32 - 1 ] = table_end [ 1 ]
ASSIGN	2975:5	2975:23	17	buffer [ xuint32 - 1 ] = table_end [ 1 ]
LVAL	2975:5	2975:5	18	buffer [ xuint32 - 1 ]
FIELD	2975:5	2975:21	19	buffer [ xuint32 - 1 ]
LEAF_NODE	2975:5	2975:5	20	buffer
LEAF_NODE	2975:11	2975:11	20	[
EXPR	2975:12	2975:20	20	xuint32 - 1
FIELD	2975:12	2975:12	21	xuint32
LEAF_NODE	2975:12	2975:12	22	xuint32
LEAF_NODE	2975:19	2975:19	21	-
FIELD	2975:20	2975:20	21	1
LEAF_NODE	2975:20	2975:20	22	1
LEAF_NODE	2975:21	2975:21	20	]
ASSIGN_OP	2975:22	2975:22	18	=
LEAF_NODE	2975:22	2975:22	19	=
RVAL	2975:23	2975:23	18	table_end [ 1 ]
FIELD	2975:23	2975:34	19	table_end [ 1 ]
LEAF_NODE	2975:23	2975:23	20	table_end
LEAF_NODE	2975:32	2975:32	20	[
EXPR	2975:33	2975:33	20	1
FIELD	2975:33	2975:33	21	1
LEAF_NODE	2975:33	2975:33	22	1
LEAF_NODE	2975:34	2975:34	20	]
LEAF_NODE	2975:35	2975:35	16	;
LEAF_NODE	2976:4	2976:4	14	}
LEAF_NODE	2977:3	2977:3	11	}
EXPR_STATEMENT	2978:3	2978:55	9	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset ) ;
EXPR	2978:3	2978:3	10	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset )
FUNCTION_CALL	2978:3	2978:54	11	t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset )
CALLEE	2978:3	2978:3	12	t2pWriteFile
LEAF_NODE	2978:3	2978:3	13	t2pWriteFile
LEAF_NODE	2978:15	2978:15	12	(
ARGUMENT	2978:16	2978:16	12	output
FIELD	2978:16	2978:16	13	output
LEAF_NODE	2978:16	2978:16	14	output
LEAF_NODE	2978:22	2978:22	12	,
ARGUMENT	2978:24	2978:34	12	( tdata_t ) buffer
LEAF_NODE	2978:24	2978:24	13	(
TYPE_NAME	2978:25	2978:25	13	tdata_t
LEAF_NODE	2978:25	2978:25	14	tdata_t
LEAF_NODE	2978:32	2978:32	13	)
FIELD	2978:34	2978:34	13	buffer
LEAF_NODE	2978:34	2978:34	14	buffer
LEAF_NODE	2978:40	2978:40	12	,
ARGUMENT	2978:42	2978:42	12	bufferoffset
FIELD	2978:42	2978:42	13	bufferoffset
LEAF_NODE	2978:42	2978:42	14	bufferoffset
LEAF_NODE	2978:54	2978:54	12	)
LEAF_NODE	2978:55	2978:55	10	;
EXPR_STATEMENT	2979:3	2979:20	9	_TIFFfree ( buffer ) ;
EXPR	2979:3	2979:3	10	_TIFFfree ( buffer )
FUNCTION_CALL	2979:3	2979:19	11	_TIFFfree ( buffer )
CALLEE	2979:3	2979:3	12	_TIFFfree
LEAF_NODE	2979:3	2979:3	13	_TIFFfree
LEAF_NODE	2979:12	2979:12	12	(
ARGUMENT	2979:13	2979:13	12	buffer
FIELD	2979:13	2979:13	13	buffer
LEAF_NODE	2979:13	2979:13	14	buffer
LEAF_NODE	2979:19	2979:19	12	)
LEAF_NODE	2979:20	2979:20	10	;
LEAF_NODE	2980:3	2980:3	9	return
LEAF_NODE	2980:9	2980:9	9	(
LEAF_NODE	2980:10	2980:10	9	bufferoffset
LEAF_NODE	2980:22	2980:22	9	)
LEAF_NODE	2980:23	2980:23	9	;
LEAF_NODE	2981:2	2981:2	8	}
EXPR_STATEMENT	2983:2	2983:9	6	( void ) 0 ;
EXPR	2983:2	2983:8	7	( void ) 0
LEAF_NODE	2983:2	2983:2	8	(
TYPE_NAME	2983:3	2983:3	8	void
LEAF_NODE	2983:3	2983:3	9	void
LEAF_NODE	2983:7	2983:7	8	)
FIELD	2983:8	2983:8	8	0
LEAF_NODE	2983:8	2983:8	9	0
LEAF_NODE	2983:9	2983:9	7	;
LEAF_NODE	2984:1	2984:1	5	}
SELECTION	2986:1	2986:40	3	
KEYWORD	2986:1	2986:1	4	if
LEAF_NODE	2986:1	2986:1	5	if
LEAF_NODE	2986:3	2986:3	4	(
CONDITION	2986:4	2986:4	4	t2p -> pdf_sample == T2P_SAMPLE_NOTHING
EXPR	2986:4	2986:21	5	t2p -> pdf_sample == T2P_SAMPLE_NOTHING
FIELD	2986:4	2986:9	6	t2p -> pdf_sample
LEAF_NODE	2986:4	2986:4	7	t2p
LEAF_NODE	2986:7	2986:7	7	->
LEAF_NODE	2986:9	2986:9	7	pdf_sample
EQ_OPERATOR	2986:19	2986:19	6	==
LEAF_NODE	2986:19	2986:19	7	==
FIELD	2986:21	2986:21	6	T2P_SAMPLE_NOTHING
LEAF_NODE	2986:21	2986:21	7	T2P_SAMPLE_NOTHING
LEAF_NODE	2986:39	2986:39	4	)
STATEMENTS	2986:40	3013:1	4	
LEAF_NODE	2986:40	2986:40	5	{
STATEMENTS	2987:2	3003:2	5	
EXPR_STATEMENT	2987:2	2987:59	6	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	2987:2	2987:2	7	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	2987:2	2987:11	8	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	2987:2	2987:2	9	buffer
FIELD	2987:2	2987:2	10	buffer
LEAF_NODE	2987:2	2987:2	11	buffer
ASSIGN_OP	2987:9	2987:9	9	=
LEAF_NODE	2987:9	2987:9	10	=
RVAL	2987:11	2987:28	9	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	2987:11	2987:11	10	(
TYPE_NAME	2987:12	2987:21	10	unsigned char
LEAF_NODE	2987:12	2987:12	11	unsigned
LEAF_NODE	2987:21	2987:21	11	char
LEAF_NODE	2987:25	2987:25	10	*
LEAF_NODE	2987:26	2987:26	10	)
FUNCTION_CALL	2987:28	2987:58	10	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	2987:28	2987:28	11	_TIFFmalloc
LEAF_NODE	2987:28	2987:28	12	_TIFFmalloc
LEAF_NODE	2987:39	2987:39	11	(
ARGUMENT	2987:40	2987:40	11	t2p -> tiff_datasize
FIELD	2987:40	2987:45	12	t2p -> tiff_datasize
LEAF_NODE	2987:40	2987:40	13	t2p
LEAF_NODE	2987:43	2987:43	13	->
LEAF_NODE	2987:45	2987:45	13	tiff_datasize
LEAF_NODE	2987:58	2987:58	11	)
LEAF_NODE	2987:59	2987:59	7	;
SELECTION	2988:2	2988:18	6	
KEYWORD	2988:2	2988:2	7	if
LEAF_NODE	2988:2	2988:2	8	if
LEAF_NODE	2988:4	2988:4	7	(
CONDITION	2988:5	2988:5	7	buffer == NULL
EXPR	2988:5	2988:13	8	buffer == NULL
FIELD	2988:5	2988:5	9	buffer
LEAF_NODE	2988:5	2988:5	10	buffer
EQ_OPERATOR	2988:11	2988:11	9	==
LEAF_NODE	2988:11	2988:11	10	==
FIELD	2988:13	2988:13	9	NULL
LEAF_NODE	2988:13	2988:13	10	NULL
LEAF_NODE	2988:17	2988:17	7	)
STATEMENTS	2988:18	2996:2	7	
LEAF_NODE	2988:18	2988:18	8	{
STATEMENTS	2989:3	2995:3	8	
LEAF_NODE	2989:3	2989:3	9	TIFFError
LEAF_NODE	2989:12	2989:12	9	(
LEAF_NODE	2989:13	2989:13	9	TIFF2PDF_MODULE
LEAF_NODE	2989:28	2989:28	9	,
LEAF_NODE	2990:4	2990:4	9	"Can't allocate %lu bytes of memory for "
LEAF_NODE	2991:32	2991:32	9	"t2p_readwrite_pdf_image_tile, %s"
LEAF_NODE	2991:66	2991:66	9	,
LEAF_NODE	2992:4	2992:4	9	(
LEAF_NODE	2992:5	2992:5	9	unsigned
LEAF_NODE	2992:14	2992:14	9	long
LEAF_NODE	2992:18	2992:18	9	)
LEAF_NODE	2992:20	2992:20	9	t2p
LEAF_NODE	2992:23	2992:23	9	->
LEAF_NODE	2992:25	2992:25	9	tiff_datasize
LEAF_NODE	2992:38	2992:38	9	,
LEAF_NODE	2993:4	2993:4	9	TIFFFileName
LEAF_NODE	2993:16	2993:16	9	(
LEAF_NODE	2993:17	2993:17	9	input
LEAF_NODE	2993:22	2993:22	9	)
LEAF_NODE	2993:23	2993:23	9	)
LEAF_NODE	2993:24	2993:24	9	;
EXPR_STATEMENT	2994:3	2994:33	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	2994:3	2994:3	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	2994:3	2994:20	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	2994:3	2994:3	12	t2p -> t2p_error
FIELD	2994:3	2994:8	13	t2p -> t2p_error
LEAF_NODE	2994:3	2994:3	14	t2p
LEAF_NODE	2994:6	2994:6	14	->
LEAF_NODE	2994:8	2994:8	14	t2p_error
ASSIGN_OP	2994:18	2994:18	12	=
LEAF_NODE	2994:18	2994:18	13	=
RVAL	2994:20	2994:20	12	T2P_ERR_ERROR
FIELD	2994:20	2994:20	13	T2P_ERR_ERROR
LEAF_NODE	2994:20	2994:20	14	T2P_ERR_ERROR
LEAF_NODE	2994:33	2994:33	10	;
JUMP_STATEMENT	2995:3	2995:12	9	return ( 0 ) ;
KEYWORD	2995:3	2995:3	10	return
LEAF_NODE	2995:3	2995:3	11	return
DESTINATION	2995:9	2995:9	10	( 0 )
EXPR	2995:9	2995:11	11	( 0 )
LEAF_NODE	2995:9	2995:9	12	(
FIELD	2995:10	2995:10	12	0
LEAF_NODE	2995:10	2995:10	13	0
LEAF_NODE	2995:11	2995:11	12	)
LEAF_NODE	2995:12	2995:12	10	;
LEAF_NODE	2996:2	2996:2	8	}
EXPR_STATEMENT	2998:2	3002:22	6	read = TIFFReadEncodedTile ( input , tile , ( tdata_t ) & buffer [ bufferoffset ] , t2p -> tiff_datasize ) ;
EXPR	2998:2	2998:2	7	read = TIFFReadEncodedTile ( input , tile , ( tdata_t ) & buffer [ bufferoffset ] , t2p -> tiff_datasize )
ASSIGN	2998:2	2998:9	8	read = TIFFReadEncodedTile ( input , tile , ( tdata_t ) & buffer [ bufferoffset ] , t2p -> tiff_datasize )
LVAL	2998:2	2998:2	9	read
FIELD	2998:2	2998:2	10	read
LEAF_NODE	2998:2	2998:2	11	read
ASSIGN_OP	2998:7	2998:7	9	=
LEAF_NODE	2998:7	2998:7	10	=
RVAL	2998:9	2998:9	9	TIFFReadEncodedTile ( input , tile , ( tdata_t ) & buffer [ bufferoffset ] , t2p -> tiff_datasize )
FUNCTION_CALL	2998:9	3002:21	10	TIFFReadEncodedTile ( input , tile , ( tdata_t ) & buffer [ bufferoffset ] , t2p -> tiff_datasize )
CALLEE	2998:9	2998:9	11	TIFFReadEncodedTile
LEAF_NODE	2998:9	2998:9	12	TIFFReadEncodedTile
LEAF_NODE	2998:28	2998:28	11	(
ARGUMENT	2999:3	2999:3	11	input
FIELD	2999:3	2999:3	12	input
LEAF_NODE	2999:3	2999:3	13	input
LEAF_NODE	2999:8	2999:8	11	,
ARGUMENT	3000:3	3000:3	11	tile
FIELD	3000:3	3000:3	12	tile
LEAF_NODE	3000:3	3000:3	13	tile
LEAF_NODE	3000:7	3000:7	11	,
ARGUMENT	3001:3	3001:13	11	( tdata_t ) & buffer [ bufferoffset ]
LEAF_NODE	3001:3	3001:3	12	(
TYPE_NAME	3001:4	3001:4	12	tdata_t
LEAF_NODE	3001:4	3001:4	13	tdata_t
LEAF_NODE	3001:11	3001:11	12	)
UNARY_EXPR	3001:13	3001:14	12	& buffer [ bufferoffset ]
UNARY_OPERATOR	3001:13	3001:13	13	&
LEAF_NODE	3001:13	3001:13	14	&
FIELD	3001:14	3001:33	13	buffer [ bufferoffset ]
LEAF_NODE	3001:14	3001:14	14	buffer
LEAF_NODE	3001:20	3001:20	14	[
EXPR	3001:21	3001:21	14	bufferoffset
FIELD	3001:21	3001:21	15	bufferoffset
LEAF_NODE	3001:21	3001:21	16	bufferoffset
LEAF_NODE	3001:33	3001:33	14	]
LEAF_NODE	3001:34	3001:34	11	,
ARGUMENT	3002:3	3002:3	11	t2p -> tiff_datasize
FIELD	3002:3	3002:8	12	t2p -> tiff_datasize
LEAF_NODE	3002:3	3002:3	13	t2p
LEAF_NODE	3002:6	3002:6	13	->
LEAF_NODE	3002:8	3002:8	13	tiff_datasize
LEAF_NODE	3002:21	3002:21	11	)
LEAF_NODE	3002:22	3002:22	7	;
SELECTION	3003:2	3003:14	6	
KEYWORD	3003:2	3003:2	7	if
LEAF_NODE	3003:2	3003:2	8	if
LEAF_NODE	3003:4	3003:4	7	(
CONDITION	3003:5	3003:5	7	read == - 1
EXPR	3003:5	3003:11	8	read == - 1
FIELD	3003:5	3003:5	9	read
LEAF_NODE	3003:5	3003:5	10	read
EQ_OPERATOR	3003:9	3003:9	9	==
LEAF_NODE	3003:9	3003:9	10	==
UNARY_EXPR	3003:11	3003:12	9	- 1
UNARY_OPERATOR	3003:11	3003:11	10	-
LEAF_NODE	3003:11	3003:11	11	-
FIELD	3003:12	3003:12	10	1
LEAF_NODE	3003:12	3003:12	11	1
LEAF_NODE	3003:13	3003:13	7	)
STATEMENTS	3003:14	3011:2	7	
LEAF_NODE	3003:14	3003:14	8	{
STATEMENTS	3004:3	3010:3	8	
EXPR_STATEMENT	3004:3	3007:24	9	TIFFError ( TIFF2PDF_MODULE , "Error on decoding tile %u of %s" , tile , TIFFFileName ( input ) ) ;
EXPR	3004:3	3004:3	10	TIFFError ( TIFF2PDF_MODULE , "Error on decoding tile %u of %s" , tile , TIFFFileName ( input ) )
FUNCTION_CALL	3004:3	3007:23	11	TIFFError ( TIFF2PDF_MODULE , "Error on decoding tile %u of %s" , tile , TIFFFileName ( input ) )
CALLEE	3004:3	3004:3	12	TIFFError
LEAF_NODE	3004:3	3004:3	13	TIFFError
LEAF_NODE	3004:12	3004:12	12	(
ARGUMENT	3004:13	3004:13	12	TIFF2PDF_MODULE
FIELD	3004:13	3004:13	13	TIFF2PDF_MODULE
LEAF_NODE	3004:13	3004:13	14	TIFF2PDF_MODULE
LEAF_NODE	3004:28	3004:28	12	,
ARGUMENT	3005:4	3005:4	12	"Error on decoding tile %u of %s"
FIELD	3005:4	3005:4	13	"Error on decoding tile %u of %s"
LEAF_NODE	3005:4	3005:4	14	"Error on decoding tile %u of %s"
LEAF_NODE	3005:37	3005:37	12	,
ARGUMENT	3006:4	3006:4	12	tile
FIELD	3006:4	3006:4	13	tile
LEAF_NODE	3006:4	3006:4	14	tile
LEAF_NODE	3006:8	3006:8	12	,
ARGUMENT	3007:4	3007:4	12	TIFFFileName ( input )
FUNCTION_CALL	3007:4	3007:22	13	TIFFFileName ( input )
CALLEE	3007:4	3007:4	14	TIFFFileName
LEAF_NODE	3007:4	3007:4	15	TIFFFileName
LEAF_NODE	3007:16	3007:16	14	(
ARGUMENT	3007:17	3007:17	14	input
FIELD	3007:17	3007:17	15	input
LEAF_NODE	3007:17	3007:17	16	input
LEAF_NODE	3007:22	3007:22	14	)
LEAF_NODE	3007:23	3007:23	12	)
LEAF_NODE	3007:24	3007:24	10	;
EXPR_STATEMENT	3008:3	3008:20	9	_TIFFfree ( buffer ) ;
EXPR	3008:3	3008:3	10	_TIFFfree ( buffer )
FUNCTION_CALL	3008:3	3008:19	11	_TIFFfree ( buffer )
CALLEE	3008:3	3008:3	12	_TIFFfree
LEAF_NODE	3008:3	3008:3	13	_TIFFfree
LEAF_NODE	3008:12	3008:12	12	(
ARGUMENT	3008:13	3008:13	12	buffer
FIELD	3008:13	3008:13	13	buffer
LEAF_NODE	3008:13	3008:13	14	buffer
LEAF_NODE	3008:19	3008:19	12	)
LEAF_NODE	3008:20	3008:20	10	;
EXPR_STATEMENT	3009:3	3009:31	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3009:3	3009:3	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3009:3	3009:18	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3009:3	3009:3	12	t2p -> t2p_error
FIELD	3009:3	3009:8	13	t2p -> t2p_error
LEAF_NODE	3009:3	3009:3	14	t2p
LEAF_NODE	3009:6	3009:6	14	->
LEAF_NODE	3009:8	3009:8	14	t2p_error
ASSIGN_OP	3009:17	3009:17	12	=
LEAF_NODE	3009:17	3009:17	13	=
RVAL	3009:18	3009:18	12	T2P_ERR_ERROR
FIELD	3009:18	3009:18	13	T2P_ERR_ERROR
LEAF_NODE	3009:18	3009:18	14	T2P_ERR_ERROR
LEAF_NODE	3009:31	3009:31	10	;
JUMP_STATEMENT	3010:3	3010:12	9	return ( 0 ) ;
KEYWORD	3010:3	3010:3	10	return
LEAF_NODE	3010:3	3010:3	11	return
DESTINATION	3010:9	3010:9	10	( 0 )
EXPR	3010:9	3010:11	11	( 0 )
LEAF_NODE	3010:9	3010:9	12	(
FIELD	3010:10	3010:10	12	0
LEAF_NODE	3010:10	3010:10	13	0
LEAF_NODE	3010:11	3010:11	12	)
LEAF_NODE	3010:12	3010:12	10	;
LEAF_NODE	3011:2	3011:2	8	}
LEAF_NODE	3013:1	3013:1	5	}
SELECTION	3013:3	3013:8	3	
KEYWORD	3013:3	3013:3	4	else
LEAF_NODE	3013:3	3013:3	5	else
STATEMENTS	3013:8	3125:1	4	
LEAF_NODE	3013:8	3013:8	5	{
STATEMENTS	3015:2	3119:2	5	
SELECTION	3015:2	3015:61	6	
KEYWORD	3015:2	3015:2	7	if
LEAF_NODE	3015:2	3015:2	8	if
LEAF_NODE	3015:4	3015:4	7	(
CONDITION	3015:5	3015:5	7	t2p -> pdf_sample == T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
EXPR	3015:5	3015:24	8	t2p -> pdf_sample == T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
FIELD	3015:5	3015:10	9	t2p -> pdf_sample
LEAF_NODE	3015:5	3015:5	10	t2p
LEAF_NODE	3015:8	3015:8	10	->
LEAF_NODE	3015:10	3015:10	10	pdf_sample
EQ_OPERATOR	3015:21	3015:21	9	==
LEAF_NODE	3015:21	3015:21	10	==
FIELD	3015:24	3015:24	9	T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
LEAF_NODE	3015:24	3015:24	10	T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
LEAF_NODE	3015:60	3015:60	7	)
STATEMENTS	3015:61	3067:2	7	
LEAF_NODE	3015:61	3015:61	8	{
STATEMENTS	3016:3	3066:3	8	
EXPR_STATEMENT	3016:3	3016:34	9	septilesize = TIFFTileSize ( input ) ;
EXPR	3016:3	3016:3	10	septilesize = TIFFTileSize ( input )
ASSIGN	3016:3	3016:15	11	septilesize = TIFFTileSize ( input )
LVAL	3016:3	3016:3	12	septilesize
FIELD	3016:3	3016:3	13	septilesize
LEAF_NODE	3016:3	3016:3	14	septilesize
ASSIGN_OP	3016:14	3016:14	12	=
LEAF_NODE	3016:14	3016:14	13	=
RVAL	3016:15	3016:15	12	TIFFTileSize ( input )
FUNCTION_CALL	3016:15	3016:33	13	TIFFTileSize ( input )
CALLEE	3016:15	3016:15	14	TIFFTileSize
LEAF_NODE	3016:15	3016:15	15	TIFFTileSize
LEAF_NODE	3016:27	3016:27	14	(
ARGUMENT	3016:28	3016:28	14	input
FIELD	3016:28	3016:28	15	input
LEAF_NODE	3016:28	3016:28	16	input
LEAF_NODE	3016:33	3016:33	14	)
LEAF_NODE	3016:34	3016:34	10	;
EXPR_STATEMENT	3017:3	3017:40	9	septilecount = TIFFNumberOfTiles ( input ) ;
EXPR	3017:3	3017:3	10	septilecount = TIFFNumberOfTiles ( input )
ASSIGN	3017:3	3017:16	11	septilecount = TIFFNumberOfTiles ( input )
LVAL	3017:3	3017:3	12	septilecount
FIELD	3017:3	3017:3	13	septilecount
LEAF_NODE	3017:3	3017:3	14	septilecount
ASSIGN_OP	3017:15	3017:15	12	=
LEAF_NODE	3017:15	3017:15	13	=
RVAL	3017:16	3017:16	12	TIFFNumberOfTiles ( input )
FUNCTION_CALL	3017:16	3017:39	13	TIFFNumberOfTiles ( input )
CALLEE	3017:16	3017:16	14	TIFFNumberOfTiles
LEAF_NODE	3017:16	3017:16	15	TIFFNumberOfTiles
LEAF_NODE	3017:33	3017:33	14	(
ARGUMENT	3017:34	3017:34	14	input
FIELD	3017:34	3017:34	15	input
LEAF_NODE	3017:34	3017:34	16	input
LEAF_NODE	3017:39	3017:39	14	)
LEAF_NODE	3017:40	3017:40	10	;
EXPR_STATEMENT	3019:3	3019:51	9	tilecount = septilecount / t2p -> tiff_samplesperpixel ;
EXPR	3019:3	3019:3	10	tilecount = septilecount / t2p -> tiff_samplesperpixel
ASSIGN	3019:3	3019:13	11	tilecount = septilecount / t2p -> tiff_samplesperpixel
LVAL	3019:3	3019:3	12	tilecount
FIELD	3019:3	3019:3	13	tilecount
LEAF_NODE	3019:3	3019:3	14	tilecount
ASSIGN_OP	3019:12	3019:12	12	=
LEAF_NODE	3019:12	3019:12	13	=
RVAL	3019:13	3019:26	12	septilecount / t2p -> tiff_samplesperpixel
FIELD	3019:13	3019:13	13	septilecount
LEAF_NODE	3019:13	3019:13	14	septilecount
LEAF_NODE	3019:25	3019:25	13	/
FIELD	3019:26	3019:31	13	t2p -> tiff_samplesperpixel
LEAF_NODE	3019:26	3019:26	14	t2p
LEAF_NODE	3019:29	3019:29	14	->
LEAF_NODE	3019:31	3019:31	14	tiff_samplesperpixel
LEAF_NODE	3019:51	3019:51	10	;
EXPR_STATEMENT	3020:3	3020:60	9	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	3020:3	3020:3	10	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	3020:3	3020:12	11	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	3020:3	3020:3	12	buffer
FIELD	3020:3	3020:3	13	buffer
LEAF_NODE	3020:3	3020:3	14	buffer
ASSIGN_OP	3020:10	3020:10	12	=
LEAF_NODE	3020:10	3020:10	13	=
RVAL	3020:12	3020:29	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	3020:12	3020:12	13	(
TYPE_NAME	3020:13	3020:22	13	unsigned char
LEAF_NODE	3020:13	3020:13	14	unsigned
LEAF_NODE	3020:22	3020:22	14	char
LEAF_NODE	3020:26	3020:26	13	*
LEAF_NODE	3020:27	3020:27	13	)
FUNCTION_CALL	3020:29	3020:59	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	3020:29	3020:29	14	_TIFFmalloc
LEAF_NODE	3020:29	3020:29	15	_TIFFmalloc
LEAF_NODE	3020:40	3020:40	14	(
ARGUMENT	3020:41	3020:41	14	t2p -> tiff_datasize
FIELD	3020:41	3020:46	15	t2p -> tiff_datasize
LEAF_NODE	3020:41	3020:41	16	t2p
LEAF_NODE	3020:44	3020:44	16	->
LEAF_NODE	3020:46	3020:46	16	tiff_datasize
LEAF_NODE	3020:59	3020:59	14	)
LEAF_NODE	3020:60	3020:60	10	;
SELECTION	3021:3	3021:19	9	
KEYWORD	3021:3	3021:3	10	if
LEAF_NODE	3021:3	3021:3	11	if
LEAF_NODE	3021:5	3021:5	10	(
CONDITION	3021:6	3021:6	10	buffer == NULL
EXPR	3021:6	3021:14	11	buffer == NULL
FIELD	3021:6	3021:6	12	buffer
LEAF_NODE	3021:6	3021:6	13	buffer
EQ_OPERATOR	3021:12	3021:12	12	==
LEAF_NODE	3021:12	3021:12	13	==
FIELD	3021:14	3021:14	12	NULL
LEAF_NODE	3021:14	3021:14	13	NULL
LEAF_NODE	3021:18	3021:18	10	)
STATEMENTS	3021:19	3029:3	10	
LEAF_NODE	3021:19	3021:19	11	{
STATEMENTS	3022:4	3028:4	11	
LEAF_NODE	3022:4	3022:4	12	TIFFError
LEAF_NODE	3022:13	3022:13	12	(
LEAF_NODE	3022:14	3022:14	12	TIFF2PDF_MODULE
LEAF_NODE	3022:29	3022:29	12	,
LEAF_NODE	3023:5	3023:5	12	"Can't allocate %lu bytes of memory "
LEAF_NODE	3024:40	3024:40	12	"for t2p_readwrite_pdf_image_tile, %s"
LEAF_NODE	3024:78	3024:78	12	,
LEAF_NODE	3025:5	3025:5	12	(
LEAF_NODE	3025:6	3025:6	12	unsigned
LEAF_NODE	3025:15	3025:15	12	long
LEAF_NODE	3025:19	3025:19	12	)
LEAF_NODE	3025:21	3025:21	12	t2p
LEAF_NODE	3025:24	3025:24	12	->
LEAF_NODE	3025:26	3025:26	12	tiff_datasize
LEAF_NODE	3025:39	3025:39	12	,
LEAF_NODE	3026:5	3026:5	12	TIFFFileName
LEAF_NODE	3026:17	3026:17	12	(
LEAF_NODE	3026:18	3026:18	12	input
LEAF_NODE	3026:23	3026:23	12	)
LEAF_NODE	3026:24	3026:24	12	)
LEAF_NODE	3026:25	3026:25	12	;
EXPR_STATEMENT	3027:4	3027:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3027:4	3027:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3027:4	3027:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3027:4	3027:4	15	t2p -> t2p_error
FIELD	3027:4	3027:9	16	t2p -> t2p_error
LEAF_NODE	3027:4	3027:4	17	t2p
LEAF_NODE	3027:7	3027:7	17	->
LEAF_NODE	3027:9	3027:9	17	t2p_error
ASSIGN_OP	3027:19	3027:19	15	=
LEAF_NODE	3027:19	3027:19	16	=
RVAL	3027:21	3027:21	15	T2P_ERR_ERROR
FIELD	3027:21	3027:21	16	T2P_ERR_ERROR
LEAF_NODE	3027:21	3027:21	17	T2P_ERR_ERROR
LEAF_NODE	3027:34	3027:34	13	;
JUMP_STATEMENT	3028:4	3028:13	12	return ( 0 ) ;
KEYWORD	3028:4	3028:4	13	return
LEAF_NODE	3028:4	3028:4	14	return
DESTINATION	3028:10	3028:10	13	( 0 )
EXPR	3028:10	3028:12	14	( 0 )
LEAF_NODE	3028:10	3028:10	15	(
FIELD	3028:11	3028:11	15	0
LEAF_NODE	3028:11	3028:11	16	0
LEAF_NODE	3028:12	3028:12	15	)
LEAF_NODE	3028:13	3028:13	13	;
LEAF_NODE	3029:3	3029:3	11	}
EXPR_STATEMENT	3030:3	3030:66	9	samplebuffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	3030:3	3030:3	10	samplebuffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	3030:3	3030:18	11	samplebuffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	3030:3	3030:3	12	samplebuffer
FIELD	3030:3	3030:3	13	samplebuffer
LEAF_NODE	3030:3	3030:3	14	samplebuffer
ASSIGN_OP	3030:16	3030:16	12	=
LEAF_NODE	3030:16	3030:16	13	=
RVAL	3030:18	3030:35	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	3030:18	3030:18	13	(
TYPE_NAME	3030:19	3030:28	13	unsigned char
LEAF_NODE	3030:19	3030:19	14	unsigned
LEAF_NODE	3030:28	3030:28	14	char
LEAF_NODE	3030:32	3030:32	13	*
LEAF_NODE	3030:33	3030:33	13	)
FUNCTION_CALL	3030:35	3030:65	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	3030:35	3030:35	14	_TIFFmalloc
LEAF_NODE	3030:35	3030:35	15	_TIFFmalloc
LEAF_NODE	3030:46	3030:46	14	(
ARGUMENT	3030:47	3030:47	14	t2p -> tiff_datasize
FIELD	3030:47	3030:52	15	t2p -> tiff_datasize
LEAF_NODE	3030:47	3030:47	16	t2p
LEAF_NODE	3030:50	3030:50	16	->
LEAF_NODE	3030:52	3030:52	16	tiff_datasize
LEAF_NODE	3030:65	3030:65	14	)
LEAF_NODE	3030:66	3030:66	10	;
SELECTION	3031:3	3031:25	9	
KEYWORD	3031:3	3031:3	10	if
LEAF_NODE	3031:3	3031:3	11	if
LEAF_NODE	3031:5	3031:5	10	(
CONDITION	3031:6	3031:6	10	samplebuffer == NULL
EXPR	3031:6	3031:20	11	samplebuffer == NULL
FIELD	3031:6	3031:6	12	samplebuffer
LEAF_NODE	3031:6	3031:6	13	samplebuffer
EQ_OPERATOR	3031:18	3031:18	12	==
LEAF_NODE	3031:18	3031:18	13	==
FIELD	3031:20	3031:20	12	NULL
LEAF_NODE	3031:20	3031:20	13	NULL
LEAF_NODE	3031:24	3031:24	10	)
STATEMENTS	3031:25	3040:3	10	
LEAF_NODE	3031:25	3031:25	11	{
STATEMENTS	3032:4	3039:4	11	
LEAF_NODE	3032:4	3032:4	12	TIFFError
LEAF_NODE	3032:13	3032:13	12	(
LEAF_NODE	3032:14	3032:14	12	TIFF2PDF_MODULE
LEAF_NODE	3032:29	3032:29	12	,
LEAF_NODE	3033:5	3033:5	12	"Can't allocate %lu bytes of memory "
LEAF_NODE	3034:40	3034:40	12	"for t2p_readwrite_pdf_image_tile, %s"
LEAF_NODE	3034:78	3034:78	12	,
LEAF_NODE	3035:5	3035:5	12	(
LEAF_NODE	3035:6	3035:6	12	unsigned
LEAF_NODE	3035:15	3035:15	12	long
LEAF_NODE	3035:19	3035:19	12	)
LEAF_NODE	3035:21	3035:21	12	t2p
LEAF_NODE	3035:24	3035:24	12	->
LEAF_NODE	3035:26	3035:26	12	tiff_datasize
LEAF_NODE	3035:39	3035:39	12	,
LEAF_NODE	3036:5	3036:5	12	TIFFFileName
LEAF_NODE	3036:17	3036:17	12	(
LEAF_NODE	3036:18	3036:18	12	input
LEAF_NODE	3036:23	3036:23	12	)
LEAF_NODE	3036:24	3036:24	12	)
LEAF_NODE	3036:25	3036:25	12	;
EXPR_STATEMENT	3037:4	3037:21	12	_TIFFfree ( buffer ) ;
EXPR	3037:4	3037:4	13	_TIFFfree ( buffer )
FUNCTION_CALL	3037:4	3037:20	14	_TIFFfree ( buffer )
CALLEE	3037:4	3037:4	15	_TIFFfree
LEAF_NODE	3037:4	3037:4	16	_TIFFfree
LEAF_NODE	3037:13	3037:13	15	(
ARGUMENT	3037:14	3037:14	15	buffer
FIELD	3037:14	3037:14	16	buffer
LEAF_NODE	3037:14	3037:14	17	buffer
LEAF_NODE	3037:20	3037:20	15	)
LEAF_NODE	3037:21	3037:21	13	;
EXPR_STATEMENT	3038:4	3038:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3038:4	3038:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3038:4	3038:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3038:4	3038:4	15	t2p -> t2p_error
FIELD	3038:4	3038:9	16	t2p -> t2p_error
LEAF_NODE	3038:4	3038:4	17	t2p
LEAF_NODE	3038:7	3038:7	17	->
LEAF_NODE	3038:9	3038:9	17	t2p_error
ASSIGN_OP	3038:19	3038:19	15	=
LEAF_NODE	3038:19	3038:19	16	=
RVAL	3038:21	3038:21	15	T2P_ERR_ERROR
FIELD	3038:21	3038:21	16	T2P_ERR_ERROR
LEAF_NODE	3038:21	3038:21	17	T2P_ERR_ERROR
LEAF_NODE	3038:34	3038:34	13	;
JUMP_STATEMENT	3039:4	3039:13	12	return ( 0 ) ;
KEYWORD	3039:4	3039:4	13	return
LEAF_NODE	3039:4	3039:4	14	return
DESTINATION	3039:10	3039:10	13	( 0 )
EXPR	3039:10	3039:12	14	( 0 )
LEAF_NODE	3039:10	3039:10	15	(
FIELD	3039:11	3039:11	15	0
LEAF_NODE	3039:11	3039:11	16	0
LEAF_NODE	3039:12	3039:12	15	)
LEAF_NODE	3039:13	3039:13	13	;
LEAF_NODE	3040:3	3040:3	11	}
EXPR_STATEMENT	3041:3	3041:23	9	samplebufferoffset = 0 ;
EXPR	3041:3	3041:3	10	samplebufferoffset = 0
ASSIGN	3041:3	3041:22	11	samplebufferoffset = 0
LVAL	3041:3	3041:3	12	samplebufferoffset
FIELD	3041:3	3041:3	13	samplebufferoffset
LEAF_NODE	3041:3	3041:3	14	samplebufferoffset
ASSIGN_OP	3041:21	3041:21	12	=
LEAF_NODE	3041:21	3041:21	13	=
RVAL	3041:22	3041:22	12	0
FIELD	3041:22	3041:22	13	0
LEAF_NODE	3041:22	3041:22	14	0
LEAF_NODE	3041:23	3041:23	10	;
ITERATION	3042:3	3042:43	9	
KEYWORD	3042:3	3042:3	10	for
LEAF_NODE	3042:3	3042:3	11	for
LEAF_NODE	3042:6	3042:6	10	(
FOR_INIT	3042:7	3042:10	10	i = 0 ;
EXPR	3042:7	3042:7	11	i = 0
ASSIGN	3042:7	3042:9	12	i = 0
LVAL	3042:7	3042:7	13	i
FIELD	3042:7	3042:7	14	i
LEAF_NODE	3042:7	3042:7	15	i
ASSIGN_OP	3042:8	3042:8	13	=
LEAF_NODE	3042:8	3042:8	14	=
RVAL	3042:9	3042:9	13	0
FIELD	3042:9	3042:9	14	0
LEAF_NODE	3042:9	3042:9	15	0
LEAF_NODE	3042:10	3042:10	11	;
CONDITION	3042:11	3042:11	10	i < t2p -> tiff_samplesperpixel
EXPR	3042:11	3042:13	11	i < t2p -> tiff_samplesperpixel
FIELD	3042:11	3042:11	12	i
LEAF_NODE	3042:11	3042:11	13	i
REL_OPERATOR	3042:12	3042:12	12	<
LEAF_NODE	3042:12	3042:12	13	<
FIELD	3042:13	3042:18	12	t2p -> tiff_samplesperpixel
LEAF_NODE	3042:13	3042:13	13	t2p
LEAF_NODE	3042:16	3042:16	13	->
LEAF_NODE	3042:18	3042:18	13	tiff_samplesperpixel
LEAF_NODE	3042:38	3042:38	10	;
FOR_EXPR	3042:39	3042:39	10	i ++
EXPR	3042:39	3042:39	11	i ++
FIELD	3042:39	3042:40	12	i ++
LEAF_NODE	3042:39	3042:39	13	i
LEAF_NODE	3042:40	3042:40	13	++
LEAF_NODE	3042:42	3042:42	10	)
STATEMENTS	3042:43	3059:3	10	
LEAF_NODE	3042:43	3042:43	11	{
STATEMENTS	3043:4	3058:4	11	
EXPR_STATEMENT	3043:4	3047:18	12	read = TIFFReadEncodedTile ( input , tile + i * tilecount , ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , septilesize ) ;
EXPR	3043:4	3043:4	13	read = TIFFReadEncodedTile ( input , tile + i * tilecount , ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , septilesize )
ASSIGN	3043:4	3044:5	14	read = TIFFReadEncodedTile ( input , tile + i * tilecount , ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , septilesize )
LVAL	3043:4	3043:4	15	read
FIELD	3043:4	3043:4	16	read
LEAF_NODE	3043:4	3043:4	17	read
ASSIGN_OP	3043:9	3043:9	15	=
LEAF_NODE	3043:9	3043:9	16	=
RVAL	3044:5	3044:5	15	TIFFReadEncodedTile ( input , tile + i * tilecount , ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , septilesize )
FUNCTION_CALL	3044:5	3047:17	16	TIFFReadEncodedTile ( input , tile + i * tilecount , ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , septilesize )
CALLEE	3044:5	3044:5	17	TIFFReadEncodedTile
LEAF_NODE	3044:5	3044:5	18	TIFFReadEncodedTile
LEAF_NODE	3044:24	3044:24	17	(
ARGUMENT	3044:25	3044:25	17	input
FIELD	3044:25	3044:25	18	input
LEAF_NODE	3044:25	3044:25	19	input
LEAF_NODE	3044:30	3044:30	17	,
ARGUMENT	3045:6	3045:15	17	tile + i * tilecount
FIELD	3045:6	3045:6	18	tile
LEAF_NODE	3045:6	3045:6	19	tile
LEAF_NODE	3045:11	3045:11	18	+
FIELD	3045:13	3045:13	18	i
LEAF_NODE	3045:13	3045:13	19	i
LEAF_NODE	3045:14	3045:14	18	*
FIELD	3045:15	3045:15	18	tilecount
LEAF_NODE	3045:15	3045:15	19	tilecount
LEAF_NODE	3045:24	3045:24	17	,
ARGUMENT	3046:6	3046:16	17	( tdata_t ) & ( samplebuffer [ samplebufferoffset ] )
LEAF_NODE	3046:6	3046:6	18	(
TYPE_NAME	3046:7	3046:7	18	tdata_t
LEAF_NODE	3046:7	3046:7	19	tdata_t
LEAF_NODE	3046:14	3046:14	18	)
UNARY_EXPR	3046:16	3046:50	18	& ( samplebuffer [ samplebufferoffset ] )
UNARY_OPERATOR	3046:16	3046:16	19	&
LEAF_NODE	3046:16	3046:16	20	&
LEAF_NODE	3046:17	3046:17	19	(
FIELD	3046:18	3046:49	19	samplebuffer [ samplebufferoffset ]
LEAF_NODE	3046:18	3046:18	20	samplebuffer
LEAF_NODE	3046:30	3046:30	20	[
EXPR	3046:31	3046:31	20	samplebufferoffset
FIELD	3046:31	3046:31	21	samplebufferoffset
LEAF_NODE	3046:31	3046:31	22	samplebufferoffset
LEAF_NODE	3046:49	3046:49	20	]
LEAF_NODE	3046:50	3046:50	19	)
LEAF_NODE	3046:51	3046:51	17	,
ARGUMENT	3047:6	3047:6	17	septilesize
FIELD	3047:6	3047:6	18	septilesize
LEAF_NODE	3047:6	3047:6	19	septilesize
LEAF_NODE	3047:17	3047:17	17	)
LEAF_NODE	3047:18	3047:18	13	;
SELECTION	3048:4	3048:16	12	
KEYWORD	3048:4	3048:4	13	if
LEAF_NODE	3048:4	3048:4	14	if
LEAF_NODE	3048:6	3048:6	13	(
CONDITION	3048:7	3048:7	13	read == - 1
EXPR	3048:7	3048:13	14	read == - 1
FIELD	3048:7	3048:7	15	read
LEAF_NODE	3048:7	3048:7	16	read
EQ_OPERATOR	3048:11	3048:11	15	==
LEAF_NODE	3048:11	3048:11	16	==
UNARY_EXPR	3048:13	3048:14	15	- 1
UNARY_OPERATOR	3048:13	3048:13	16	-
LEAF_NODE	3048:13	3048:13	17	-
FIELD	3048:14	3048:14	16	1
LEAF_NODE	3048:14	3048:14	17	1
LEAF_NODE	3048:15	3048:15	13	)
STATEMENTS	3048:16	3057:4	13	
LEAF_NODE	3048:16	3048:16	14	{
STATEMENTS	3049:5	3056:5	14	
EXPR_STATEMENT	3049:5	3052:26	15	TIFFError ( TIFF2PDF_MODULE , "Error on decoding tile %u of %s" , tile + i * tilecount , TIFFFileName ( input ) ) ;
EXPR	3049:5	3049:5	16	TIFFError ( TIFF2PDF_MODULE , "Error on decoding tile %u of %s" , tile + i * tilecount , TIFFFileName ( input ) )
FUNCTION_CALL	3049:5	3052:25	17	TIFFError ( TIFF2PDF_MODULE , "Error on decoding tile %u of %s" , tile + i * tilecount , TIFFFileName ( input ) )
CALLEE	3049:5	3049:5	18	TIFFError
LEAF_NODE	3049:5	3049:5	19	TIFFError
LEAF_NODE	3049:14	3049:14	18	(
ARGUMENT	3049:15	3049:15	18	TIFF2PDF_MODULE
FIELD	3049:15	3049:15	19	TIFF2PDF_MODULE
LEAF_NODE	3049:15	3049:15	20	TIFF2PDF_MODULE
LEAF_NODE	3049:30	3049:30	18	,
ARGUMENT	3050:6	3050:6	18	"Error on decoding tile %u of %s"
FIELD	3050:6	3050:6	19	"Error on decoding tile %u of %s"
LEAF_NODE	3050:6	3050:6	20	"Error on decoding tile %u of %s"
LEAF_NODE	3050:39	3050:39	18	,
ARGUMENT	3051:6	3051:15	18	tile + i * tilecount
FIELD	3051:6	3051:6	19	tile
LEAF_NODE	3051:6	3051:6	20	tile
LEAF_NODE	3051:11	3051:11	19	+
FIELD	3051:13	3051:13	19	i
LEAF_NODE	3051:13	3051:13	20	i
LEAF_NODE	3051:14	3051:14	19	*
FIELD	3051:15	3051:15	19	tilecount
LEAF_NODE	3051:15	3051:15	20	tilecount
LEAF_NODE	3051:24	3051:24	18	,
ARGUMENT	3052:6	3052:6	18	TIFFFileName ( input )
FUNCTION_CALL	3052:6	3052:24	19	TIFFFileName ( input )
CALLEE	3052:6	3052:6	20	TIFFFileName
LEAF_NODE	3052:6	3052:6	21	TIFFFileName
LEAF_NODE	3052:18	3052:18	20	(
ARGUMENT	3052:19	3052:19	20	input
FIELD	3052:19	3052:19	21	input
LEAF_NODE	3052:19	3052:19	22	input
LEAF_NODE	3052:24	3052:24	20	)
LEAF_NODE	3052:25	3052:25	18	)
LEAF_NODE	3052:26	3052:26	16	;
EXPR_STATEMENT	3053:6	3053:29	15	_TIFFfree ( samplebuffer ) ;
EXPR	3053:6	3053:6	16	_TIFFfree ( samplebuffer )
FUNCTION_CALL	3053:6	3053:28	17	_TIFFfree ( samplebuffer )
CALLEE	3053:6	3053:6	18	_TIFFfree
LEAF_NODE	3053:6	3053:6	19	_TIFFfree
LEAF_NODE	3053:15	3053:15	18	(
ARGUMENT	3053:16	3053:16	18	samplebuffer
FIELD	3053:16	3053:16	19	samplebuffer
LEAF_NODE	3053:16	3053:16	20	samplebuffer
LEAF_NODE	3053:28	3053:28	18	)
LEAF_NODE	3053:29	3053:29	16	;
EXPR_STATEMENT	3054:6	3054:23	15	_TIFFfree ( buffer ) ;
EXPR	3054:6	3054:6	16	_TIFFfree ( buffer )
FUNCTION_CALL	3054:6	3054:22	17	_TIFFfree ( buffer )
CALLEE	3054:6	3054:6	18	_TIFFfree
LEAF_NODE	3054:6	3054:6	19	_TIFFfree
LEAF_NODE	3054:15	3054:15	18	(
ARGUMENT	3054:16	3054:16	18	buffer
FIELD	3054:16	3054:16	19	buffer
LEAF_NODE	3054:16	3054:16	20	buffer
LEAF_NODE	3054:22	3054:22	18	)
LEAF_NODE	3054:23	3054:23	16	;
EXPR_STATEMENT	3055:5	3055:33	15	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3055:5	3055:5	16	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3055:5	3055:20	17	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3055:5	3055:5	18	t2p -> t2p_error
FIELD	3055:5	3055:10	19	t2p -> t2p_error
LEAF_NODE	3055:5	3055:5	20	t2p
LEAF_NODE	3055:8	3055:8	20	->
LEAF_NODE	3055:10	3055:10	20	t2p_error
ASSIGN_OP	3055:19	3055:19	18	=
LEAF_NODE	3055:19	3055:19	19	=
RVAL	3055:20	3055:20	18	T2P_ERR_ERROR
FIELD	3055:20	3055:20	19	T2P_ERR_ERROR
LEAF_NODE	3055:20	3055:20	20	T2P_ERR_ERROR
LEAF_NODE	3055:33	3055:33	16	;
JUMP_STATEMENT	3056:5	3056:14	15	return ( 0 ) ;
KEYWORD	3056:5	3056:5	16	return
LEAF_NODE	3056:5	3056:5	17	return
DESTINATION	3056:11	3056:11	16	( 0 )
EXPR	3056:11	3056:13	17	( 0 )
LEAF_NODE	3056:11	3056:11	18	(
FIELD	3056:12	3056:12	18	0
LEAF_NODE	3056:12	3056:12	19	0
LEAF_NODE	3056:13	3056:13	18	)
LEAF_NODE	3056:14	3056:14	16	;
LEAF_NODE	3057:4	3057:4	14	}
EXPR_STATEMENT	3058:4	3058:28	12	samplebufferoffset += read ;
EXPR	3058:4	3058:4	13	samplebufferoffset += read
ASSIGN	3058:4	3058:24	14	samplebufferoffset += read
LVAL	3058:4	3058:4	15	samplebufferoffset
FIELD	3058:4	3058:4	16	samplebufferoffset
LEAF_NODE	3058:4	3058:4	17	samplebufferoffset
ASSIGN_OP	3058:22	3058:22	15	+=
LEAF_NODE	3058:22	3058:22	16	+=
RVAL	3058:24	3058:24	15	read
FIELD	3058:24	3058:24	16	read
LEAF_NODE	3058:24	3058:24	17	read
LEAF_NODE	3058:28	3058:28	13	;
LEAF_NODE	3059:3	3059:3	11	}
EXPR_STATEMENT	3060:3	3064:23	9	t2p_sample_planar_separate_to_contig ( t2p , & ( buffer [ bufferoffset ] ) , samplebuffer , samplebufferoffset ) ;
EXPR	3060:3	3060:3	10	t2p_sample_planar_separate_to_contig ( t2p , & ( buffer [ bufferoffset ] ) , samplebuffer , samplebufferoffset )
FUNCTION_CALL	3060:3	3064:22	11	t2p_sample_planar_separate_to_contig ( t2p , & ( buffer [ bufferoffset ] ) , samplebuffer , samplebufferoffset )
CALLEE	3060:3	3060:3	12	t2p_sample_planar_separate_to_contig
LEAF_NODE	3060:3	3060:3	13	t2p_sample_planar_separate_to_contig
LEAF_NODE	3060:39	3060:39	12	(
ARGUMENT	3061:4	3061:4	12	t2p
FIELD	3061:4	3061:4	13	t2p
LEAF_NODE	3061:4	3061:4	14	t2p
LEAF_NODE	3061:7	3061:7	12	,
ARGUMENT	3062:4	3062:4	12	& ( buffer [ bufferoffset ] )
UNARY_EXPR	3062:4	3062:26	13	& ( buffer [ bufferoffset ] )
UNARY_OPERATOR	3062:4	3062:4	14	&
LEAF_NODE	3062:4	3062:4	15	&
LEAF_NODE	3062:5	3062:5	14	(
FIELD	3062:6	3062:25	14	buffer [ bufferoffset ]
LEAF_NODE	3062:6	3062:6	15	buffer
LEAF_NODE	3062:12	3062:12	15	[
EXPR	3062:13	3062:13	15	bufferoffset
FIELD	3062:13	3062:13	16	bufferoffset
LEAF_NODE	3062:13	3062:13	17	bufferoffset
LEAF_NODE	3062:25	3062:25	15	]
LEAF_NODE	3062:26	3062:26	14	)
LEAF_NODE	3062:27	3062:27	12	,
ARGUMENT	3063:4	3063:4	12	samplebuffer
FIELD	3063:4	3063:4	13	samplebuffer
LEAF_NODE	3063:4	3063:4	14	samplebuffer
LEAF_NODE	3063:16	3063:16	12	,
ARGUMENT	3064:4	3064:4	12	samplebufferoffset
FIELD	3064:4	3064:4	13	samplebufferoffset
LEAF_NODE	3064:4	3064:4	14	samplebufferoffset
LEAF_NODE	3064:22	3064:22	12	)
LEAF_NODE	3064:23	3064:23	10	;
EXPR_STATEMENT	3065:3	3065:35	9	bufferoffset += samplebufferoffset ;
EXPR	3065:3	3065:3	10	bufferoffset += samplebufferoffset
ASSIGN	3065:3	3065:17	11	bufferoffset += samplebufferoffset
LVAL	3065:3	3065:3	12	bufferoffset
FIELD	3065:3	3065:3	13	bufferoffset
LEAF_NODE	3065:3	3065:3	14	bufferoffset
ASSIGN_OP	3065:15	3065:15	12	+=
LEAF_NODE	3065:15	3065:15	13	+=
RVAL	3065:17	3065:17	12	samplebufferoffset
FIELD	3065:17	3065:17	13	samplebufferoffset
LEAF_NODE	3065:17	3065:17	14	samplebufferoffset
LEAF_NODE	3065:35	3065:35	10	;
EXPR_STATEMENT	3066:3	3066:26	9	_TIFFfree ( samplebuffer ) ;
EXPR	3066:3	3066:3	10	_TIFFfree ( samplebuffer )
FUNCTION_CALL	3066:3	3066:25	11	_TIFFfree ( samplebuffer )
CALLEE	3066:3	3066:3	12	_TIFFfree
LEAF_NODE	3066:3	3066:3	13	_TIFFfree
LEAF_NODE	3066:12	3066:12	12	(
ARGUMENT	3066:13	3066:13	12	samplebuffer
FIELD	3066:13	3066:13	13	samplebuffer
LEAF_NODE	3066:13	3066:13	14	samplebuffer
LEAF_NODE	3066:25	3066:25	12	)
LEAF_NODE	3066:26	3066:26	10	;
LEAF_NODE	3067:2	3067:2	8	}
SELECTION	3069:2	3069:18	6	
KEYWORD	3069:2	3069:2	7	if
LEAF_NODE	3069:2	3069:2	8	if
LEAF_NODE	3069:4	3069:4	7	(
CONDITION	3069:5	3069:5	7	buffer == NULL
EXPR	3069:5	3069:13	8	buffer == NULL
FIELD	3069:5	3069:5	9	buffer
LEAF_NODE	3069:5	3069:5	10	buffer
EQ_OPERATOR	3069:11	3069:11	9	==
LEAF_NODE	3069:11	3069:11	10	==
FIELD	3069:13	3069:13	9	NULL
LEAF_NODE	3069:13	3069:13	10	NULL
LEAF_NODE	3069:17	3069:17	7	)
STATEMENTS	3069:18	3094:2	7	
LEAF_NODE	3069:18	3069:18	8	{
STATEMENTS	3070:3	3085:3	8	
EXPR_STATEMENT	3070:3	3070:60	9	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ;
EXPR	3070:3	3070:3	10	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
ASSIGN	3070:3	3070:12	11	buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LVAL	3070:3	3070:3	12	buffer
FIELD	3070:3	3070:3	13	buffer
LEAF_NODE	3070:3	3070:3	14	buffer
ASSIGN_OP	3070:10	3070:10	12	=
LEAF_NODE	3070:10	3070:10	13	=
RVAL	3070:12	3070:29	12	( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize )
LEAF_NODE	3070:12	3070:12	13	(
TYPE_NAME	3070:13	3070:22	13	unsigned char
LEAF_NODE	3070:13	3070:13	14	unsigned
LEAF_NODE	3070:22	3070:22	14	char
LEAF_NODE	3070:26	3070:26	13	*
LEAF_NODE	3070:27	3070:27	13	)
FUNCTION_CALL	3070:29	3070:59	13	_TIFFmalloc ( t2p -> tiff_datasize )
CALLEE	3070:29	3070:29	14	_TIFFmalloc
LEAF_NODE	3070:29	3070:29	15	_TIFFmalloc
LEAF_NODE	3070:40	3070:40	14	(
ARGUMENT	3070:41	3070:41	14	t2p -> tiff_datasize
FIELD	3070:41	3070:46	15	t2p -> tiff_datasize
LEAF_NODE	3070:41	3070:41	16	t2p
LEAF_NODE	3070:44	3070:44	16	->
LEAF_NODE	3070:46	3070:46	16	tiff_datasize
LEAF_NODE	3070:59	3070:59	14	)
LEAF_NODE	3070:60	3070:60	10	;
SELECTION	3071:3	3071:19	9	
KEYWORD	3071:3	3071:3	10	if
LEAF_NODE	3071:3	3071:3	11	if
LEAF_NODE	3071:5	3071:5	10	(
CONDITION	3071:6	3071:6	10	buffer == NULL
EXPR	3071:6	3071:14	11	buffer == NULL
FIELD	3071:6	3071:6	12	buffer
LEAF_NODE	3071:6	3071:6	13	buffer
EQ_OPERATOR	3071:12	3071:12	12	==
LEAF_NODE	3071:12	3071:12	13	==
FIELD	3071:14	3071:14	12	NULL
LEAF_NODE	3071:14	3071:14	13	NULL
LEAF_NODE	3071:18	3071:18	10	)
STATEMENTS	3071:19	3079:3	10	
LEAF_NODE	3071:19	3071:19	11	{
STATEMENTS	3072:4	3078:4	11	
LEAF_NODE	3072:4	3072:4	12	TIFFError
LEAF_NODE	3072:13	3072:13	12	(
LEAF_NODE	3072:14	3072:14	12	TIFF2PDF_MODULE
LEAF_NODE	3072:29	3072:29	12	,
LEAF_NODE	3073:5	3073:5	12	"Can't allocate %lu bytes of memory "
LEAF_NODE	3074:40	3074:40	12	"for t2p_readwrite_pdf_image_tile, %s"
LEAF_NODE	3074:78	3074:78	12	,
LEAF_NODE	3075:5	3075:5	12	(
LEAF_NODE	3075:6	3075:6	12	unsigned
LEAF_NODE	3075:15	3075:15	12	long
LEAF_NODE	3075:19	3075:19	12	)
LEAF_NODE	3075:21	3075:21	12	t2p
LEAF_NODE	3075:24	3075:24	12	->
LEAF_NODE	3075:26	3075:26	12	tiff_datasize
LEAF_NODE	3075:39	3075:39	12	,
LEAF_NODE	3076:5	3076:5	12	TIFFFileName
LEAF_NODE	3076:17	3076:17	12	(
LEAF_NODE	3076:18	3076:18	12	input
LEAF_NODE	3076:23	3076:23	12	)
LEAF_NODE	3076:24	3076:24	12	)
LEAF_NODE	3076:25	3076:25	12	;
EXPR_STATEMENT	3077:4	3077:34	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3077:4	3077:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3077:4	3077:21	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3077:4	3077:4	15	t2p -> t2p_error
FIELD	3077:4	3077:9	16	t2p -> t2p_error
LEAF_NODE	3077:4	3077:4	17	t2p
LEAF_NODE	3077:7	3077:7	17	->
LEAF_NODE	3077:9	3077:9	17	t2p_error
ASSIGN_OP	3077:19	3077:19	15	=
LEAF_NODE	3077:19	3077:19	16	=
RVAL	3077:21	3077:21	15	T2P_ERR_ERROR
FIELD	3077:21	3077:21	16	T2P_ERR_ERROR
LEAF_NODE	3077:21	3077:21	17	T2P_ERR_ERROR
LEAF_NODE	3077:34	3077:34	13	;
JUMP_STATEMENT	3078:4	3078:13	12	return ( 0 ) ;
KEYWORD	3078:4	3078:4	13	return
LEAF_NODE	3078:4	3078:4	14	return
DESTINATION	3078:10	3078:10	13	( 0 )
EXPR	3078:10	3078:12	14	( 0 )
LEAF_NODE	3078:10	3078:10	15	(
FIELD	3078:11	3078:11	15	0
LEAF_NODE	3078:11	3078:11	16	0
LEAF_NODE	3078:12	3078:12	15	)
LEAF_NODE	3078:13	3078:13	13	;
LEAF_NODE	3079:3	3079:3	11	}
EXPR_STATEMENT	3080:3	3084:23	9	read = TIFFReadEncodedTile ( input , tile , ( tdata_t ) & buffer [ bufferoffset ] , t2p -> tiff_datasize ) ;
EXPR	3080:3	3080:3	10	read = TIFFReadEncodedTile ( input , tile , ( tdata_t ) & buffer [ bufferoffset ] , t2p -> tiff_datasize )
ASSIGN	3080:3	3080:10	11	read = TIFFReadEncodedTile ( input , tile , ( tdata_t ) & buffer [ bufferoffset ] , t2p -> tiff_datasize )
LVAL	3080:3	3080:3	12	read
FIELD	3080:3	3080:3	13	read
LEAF_NODE	3080:3	3080:3	14	read
ASSIGN_OP	3080:8	3080:8	12	=
LEAF_NODE	3080:8	3080:8	13	=
RVAL	3080:10	3080:10	12	TIFFReadEncodedTile ( input , tile , ( tdata_t ) & buffer [ bufferoffset ] , t2p -> tiff_datasize )
FUNCTION_CALL	3080:10	3084:22	13	TIFFReadEncodedTile ( input , tile , ( tdata_t ) & buffer [ bufferoffset ] , t2p -> tiff_datasize )
CALLEE	3080:10	3080:10	14	TIFFReadEncodedTile
LEAF_NODE	3080:10	3080:10	15	TIFFReadEncodedTile
LEAF_NODE	3080:29	3080:29	14	(
ARGUMENT	3081:4	3081:4	14	input
FIELD	3081:4	3081:4	15	input
LEAF_NODE	3081:4	3081:4	16	input
LEAF_NODE	3081:9	3081:9	14	,
ARGUMENT	3082:4	3082:4	14	tile
FIELD	3082:4	3082:4	15	tile
LEAF_NODE	3082:4	3082:4	16	tile
LEAF_NODE	3082:8	3082:8	14	,
ARGUMENT	3083:4	3083:14	14	( tdata_t ) & buffer [ bufferoffset ]
LEAF_NODE	3083:4	3083:4	15	(
TYPE_NAME	3083:5	3083:5	15	tdata_t
LEAF_NODE	3083:5	3083:5	16	tdata_t
LEAF_NODE	3083:12	3083:12	15	)
UNARY_EXPR	3083:14	3083:15	15	& buffer [ bufferoffset ]
UNARY_OPERATOR	3083:14	3083:14	16	&
LEAF_NODE	3083:14	3083:14	17	&
FIELD	3083:15	3083:34	16	buffer [ bufferoffset ]
LEAF_NODE	3083:15	3083:15	17	buffer
LEAF_NODE	3083:21	3083:21	17	[
EXPR	3083:22	3083:22	17	bufferoffset
FIELD	3083:22	3083:22	18	bufferoffset
LEAF_NODE	3083:22	3083:22	19	bufferoffset
LEAF_NODE	3083:34	3083:34	17	]
LEAF_NODE	3083:35	3083:35	14	,
ARGUMENT	3084:4	3084:4	14	t2p -> tiff_datasize
FIELD	3084:4	3084:9	15	t2p -> tiff_datasize
LEAF_NODE	3084:4	3084:4	16	t2p
LEAF_NODE	3084:7	3084:7	16	->
LEAF_NODE	3084:9	3084:9	16	tiff_datasize
LEAF_NODE	3084:22	3084:22	14	)
LEAF_NODE	3084:23	3084:23	10	;
SELECTION	3085:3	3085:15	9	
KEYWORD	3085:3	3085:3	10	if
LEAF_NODE	3085:3	3085:3	11	if
LEAF_NODE	3085:5	3085:5	10	(
CONDITION	3085:6	3085:6	10	read == - 1
EXPR	3085:6	3085:12	11	read == - 1
FIELD	3085:6	3085:6	12	read
LEAF_NODE	3085:6	3085:6	13	read
EQ_OPERATOR	3085:10	3085:10	12	==
LEAF_NODE	3085:10	3085:10	13	==
UNARY_EXPR	3085:12	3085:13	12	- 1
UNARY_OPERATOR	3085:12	3085:12	13	-
LEAF_NODE	3085:12	3085:12	14	-
FIELD	3085:13	3085:13	13	1
LEAF_NODE	3085:13	3085:13	14	1
LEAF_NODE	3085:14	3085:14	10	)
STATEMENTS	3085:15	3093:3	10	
LEAF_NODE	3085:15	3085:15	11	{
STATEMENTS	3086:4	3092:4	11	
EXPR_STATEMENT	3086:4	3089:25	12	TIFFError ( TIFF2PDF_MODULE , "Error on decoding tile %u of %s" , tile , TIFFFileName ( input ) ) ;
EXPR	3086:4	3086:4	13	TIFFError ( TIFF2PDF_MODULE , "Error on decoding tile %u of %s" , tile , TIFFFileName ( input ) )
FUNCTION_CALL	3086:4	3089:24	14	TIFFError ( TIFF2PDF_MODULE , "Error on decoding tile %u of %s" , tile , TIFFFileName ( input ) )
CALLEE	3086:4	3086:4	15	TIFFError
LEAF_NODE	3086:4	3086:4	16	TIFFError
LEAF_NODE	3086:13	3086:13	15	(
ARGUMENT	3086:14	3086:14	15	TIFF2PDF_MODULE
FIELD	3086:14	3086:14	16	TIFF2PDF_MODULE
LEAF_NODE	3086:14	3086:14	17	TIFF2PDF_MODULE
LEAF_NODE	3086:29	3086:29	15	,
ARGUMENT	3087:5	3087:5	15	"Error on decoding tile %u of %s"
FIELD	3087:5	3087:5	16	"Error on decoding tile %u of %s"
LEAF_NODE	3087:5	3087:5	17	"Error on decoding tile %u of %s"
LEAF_NODE	3087:38	3087:38	15	,
ARGUMENT	3088:5	3088:5	15	tile
FIELD	3088:5	3088:5	16	tile
LEAF_NODE	3088:5	3088:5	17	tile
LEAF_NODE	3088:9	3088:9	15	,
ARGUMENT	3089:5	3089:5	15	TIFFFileName ( input )
FUNCTION_CALL	3089:5	3089:23	16	TIFFFileName ( input )
CALLEE	3089:5	3089:5	17	TIFFFileName
LEAF_NODE	3089:5	3089:5	18	TIFFFileName
LEAF_NODE	3089:17	3089:17	17	(
ARGUMENT	3089:18	3089:18	17	input
FIELD	3089:18	3089:18	18	input
LEAF_NODE	3089:18	3089:18	19	input
LEAF_NODE	3089:23	3089:23	17	)
LEAF_NODE	3089:24	3089:24	15	)
LEAF_NODE	3089:25	3089:25	13	;
EXPR_STATEMENT	3090:4	3090:21	12	_TIFFfree ( buffer ) ;
EXPR	3090:4	3090:4	13	_TIFFfree ( buffer )
FUNCTION_CALL	3090:4	3090:20	14	_TIFFfree ( buffer )
CALLEE	3090:4	3090:4	15	_TIFFfree
LEAF_NODE	3090:4	3090:4	16	_TIFFfree
LEAF_NODE	3090:13	3090:13	15	(
ARGUMENT	3090:14	3090:14	15	buffer
FIELD	3090:14	3090:14	16	buffer
LEAF_NODE	3090:14	3090:14	17	buffer
LEAF_NODE	3090:20	3090:20	15	)
LEAF_NODE	3090:21	3090:21	13	;
EXPR_STATEMENT	3091:4	3091:32	12	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3091:4	3091:4	13	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3091:4	3091:19	14	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3091:4	3091:4	15	t2p -> t2p_error
FIELD	3091:4	3091:9	16	t2p -> t2p_error
LEAF_NODE	3091:4	3091:4	17	t2p
LEAF_NODE	3091:7	3091:7	17	->
LEAF_NODE	3091:9	3091:9	17	t2p_error
ASSIGN_OP	3091:18	3091:18	15	=
LEAF_NODE	3091:18	3091:18	16	=
RVAL	3091:19	3091:19	15	T2P_ERR_ERROR
FIELD	3091:19	3091:19	16	T2P_ERR_ERROR
LEAF_NODE	3091:19	3091:19	17	T2P_ERR_ERROR
LEAF_NODE	3091:32	3091:32	13	;
JUMP_STATEMENT	3092:4	3092:13	12	return ( 0 ) ;
KEYWORD	3092:4	3092:4	13	return
LEAF_NODE	3092:4	3092:4	14	return
DESTINATION	3092:10	3092:10	13	( 0 )
EXPR	3092:10	3092:12	14	( 0 )
LEAF_NODE	3092:10	3092:10	15	(
FIELD	3092:11	3092:11	15	0
LEAF_NODE	3092:11	3092:11	16	0
LEAF_NODE	3092:12	3092:12	15	)
LEAF_NODE	3092:13	3092:13	13	;
LEAF_NODE	3093:3	3093:3	11	}
LEAF_NODE	3094:2	3094:2	8	}
SELECTION	3096:2	3096:46	6	
KEYWORD	3096:2	3096:2	7	if
LEAF_NODE	3096:2	3096:2	8	if
LEAF_NODE	3096:4	3096:4	7	(
CONDITION	3096:5	3096:5	7	t2p -> pdf_sample & T2P_SAMPLE_RGBA_TO_RGB
EXPR	3096:5	3096:23	8	t2p -> pdf_sample & T2P_SAMPLE_RGBA_TO_RGB
FIELD	3096:5	3096:10	9	t2p -> pdf_sample
LEAF_NODE	3096:5	3096:5	10	t2p
LEAF_NODE	3096:8	3096:8	10	->
LEAF_NODE	3096:10	3096:10	10	pdf_sample
LEAF_NODE	3096:21	3096:21	9	&
FIELD	3096:23	3096:23	9	T2P_SAMPLE_RGBA_TO_RGB
LEAF_NODE	3096:23	3096:23	10	T2P_SAMPLE_RGBA_TO_RGB
LEAF_NODE	3096:45	3096:45	7	)
STATEMENTS	3096:46	3101:2	7	
LEAF_NODE	3096:46	3096:46	8	{
STATEMENTS	3097:3	3097:3	8	
EXPR_STATEMENT	3097:3	3100:53	9	t2p -> tiff_datasize = t2p_sample_rgba_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) ;
EXPR	3097:3	3097:3	10	t2p -> tiff_datasize = t2p_sample_rgba_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
ASSIGN	3097:3	3097:22	11	t2p -> tiff_datasize = t2p_sample_rgba_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
LVAL	3097:3	3097:3	12	t2p -> tiff_datasize
FIELD	3097:3	3097:8	13	t2p -> tiff_datasize
LEAF_NODE	3097:3	3097:3	14	t2p
LEAF_NODE	3097:6	3097:6	14	->
LEAF_NODE	3097:8	3097:8	14	tiff_datasize
ASSIGN_OP	3097:21	3097:21	12	=
LEAF_NODE	3097:21	3097:21	13	=
RVAL	3097:22	3097:22	12	t2p_sample_rgba_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
FUNCTION_CALL	3097:22	3100:52	13	t2p_sample_rgba_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
CALLEE	3097:22	3097:22	14	t2p_sample_rgba_to_rgb
LEAF_NODE	3097:22	3097:22	15	t2p_sample_rgba_to_rgb
LEAF_NODE	3097:44	3097:44	14	(
ARGUMENT	3098:4	3098:13	14	( tdata_t ) buffer
LEAF_NODE	3098:4	3098:4	15	(
TYPE_NAME	3098:5	3098:5	15	tdata_t
LEAF_NODE	3098:5	3098:5	16	tdata_t
LEAF_NODE	3098:12	3098:12	15	)
FIELD	3098:13	3098:13	15	buffer
LEAF_NODE	3098:13	3098:13	16	buffer
LEAF_NODE	3098:19	3098:19	14	,
ARGUMENT	3099:4	3100:5	14	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
FIELD	3099:4	3099:35	15	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	3099:4	3099:4	16	t2p
LEAF_NODE	3099:7	3099:7	16	->
LEAF_NODE	3099:9	3099:9	16	tiff_tiles
LEAF_NODE	3099:19	3099:19	16	[
EXPR	3099:20	3099:20	16	t2p -> pdf_page
FIELD	3099:20	3099:25	17	t2p -> pdf_page
LEAF_NODE	3099:20	3099:20	18	t2p
LEAF_NODE	3099:23	3099:23	18	->
LEAF_NODE	3099:25	3099:25	18	pdf_page
LEAF_NODE	3099:33	3099:33	16	]
LEAF_NODE	3099:34	3099:34	16	.
LEAF_NODE	3099:35	3099:35	16	tiles_tilewidth
LEAF_NODE	3100:4	3100:4	15	*
FIELD	3100:5	3100:36	15	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	3100:5	3100:5	16	t2p
LEAF_NODE	3100:8	3100:8	16	->
LEAF_NODE	3100:10	3100:10	16	tiff_tiles
LEAF_NODE	3100:20	3100:20	16	[
EXPR	3100:21	3100:21	16	t2p -> pdf_page
FIELD	3100:21	3100:26	17	t2p -> pdf_page
LEAF_NODE	3100:21	3100:21	18	t2p
LEAF_NODE	3100:24	3100:24	18	->
LEAF_NODE	3100:26	3100:26	18	pdf_page
LEAF_NODE	3100:34	3100:34	16	]
LEAF_NODE	3100:35	3100:35	16	.
LEAF_NODE	3100:36	3100:36	16	tiles_tilelength
LEAF_NODE	3100:52	3100:52	14	)
LEAF_NODE	3100:53	3100:53	10	;
LEAF_NODE	3101:2	3101:2	8	}
SELECTION	3103:2	3103:47	6	
KEYWORD	3103:2	3103:2	7	if
LEAF_NODE	3103:2	3103:2	8	if
LEAF_NODE	3103:4	3103:4	7	(
CONDITION	3103:5	3103:5	7	t2p -> pdf_sample & T2P_SAMPLE_RGBAA_TO_RGB
EXPR	3103:5	3103:23	8	t2p -> pdf_sample & T2P_SAMPLE_RGBAA_TO_RGB
FIELD	3103:5	3103:10	9	t2p -> pdf_sample
LEAF_NODE	3103:5	3103:5	10	t2p
LEAF_NODE	3103:8	3103:8	10	->
LEAF_NODE	3103:10	3103:10	10	pdf_sample
LEAF_NODE	3103:21	3103:21	9	&
FIELD	3103:23	3103:23	9	T2P_SAMPLE_RGBAA_TO_RGB
LEAF_NODE	3103:23	3103:23	10	T2P_SAMPLE_RGBAA_TO_RGB
LEAF_NODE	3103:46	3103:46	7	)
STATEMENTS	3103:47	3108:2	7	
LEAF_NODE	3103:47	3103:47	8	{
STATEMENTS	3104:3	3104:3	8	
EXPR_STATEMENT	3104:3	3107:53	9	t2p -> tiff_datasize = t2p_sample_rgbaa_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) ;
EXPR	3104:3	3104:3	10	t2p -> tiff_datasize = t2p_sample_rgbaa_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
ASSIGN	3104:3	3104:22	11	t2p -> tiff_datasize = t2p_sample_rgbaa_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
LVAL	3104:3	3104:3	12	t2p -> tiff_datasize
FIELD	3104:3	3104:8	13	t2p -> tiff_datasize
LEAF_NODE	3104:3	3104:3	14	t2p
LEAF_NODE	3104:6	3104:6	14	->
LEAF_NODE	3104:8	3104:8	14	tiff_datasize
ASSIGN_OP	3104:21	3104:21	12	=
LEAF_NODE	3104:21	3104:21	13	=
RVAL	3104:22	3104:22	12	t2p_sample_rgbaa_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
FUNCTION_CALL	3104:22	3107:52	13	t2p_sample_rgbaa_to_rgb ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
CALLEE	3104:22	3104:22	14	t2p_sample_rgbaa_to_rgb
LEAF_NODE	3104:22	3104:22	15	t2p_sample_rgbaa_to_rgb
LEAF_NODE	3104:45	3104:45	14	(
ARGUMENT	3105:4	3105:13	14	( tdata_t ) buffer
LEAF_NODE	3105:4	3105:4	15	(
TYPE_NAME	3105:5	3105:5	15	tdata_t
LEAF_NODE	3105:5	3105:5	16	tdata_t
LEAF_NODE	3105:12	3105:12	15	)
FIELD	3105:13	3105:13	15	buffer
LEAF_NODE	3105:13	3105:13	16	buffer
LEAF_NODE	3105:19	3105:19	14	,
ARGUMENT	3106:4	3107:5	14	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
FIELD	3106:4	3106:35	15	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	3106:4	3106:4	16	t2p
LEAF_NODE	3106:7	3106:7	16	->
LEAF_NODE	3106:9	3106:9	16	tiff_tiles
LEAF_NODE	3106:19	3106:19	16	[
EXPR	3106:20	3106:20	16	t2p -> pdf_page
FIELD	3106:20	3106:25	17	t2p -> pdf_page
LEAF_NODE	3106:20	3106:20	18	t2p
LEAF_NODE	3106:23	3106:23	18	->
LEAF_NODE	3106:25	3106:25	18	pdf_page
LEAF_NODE	3106:33	3106:33	16	]
LEAF_NODE	3106:34	3106:34	16	.
LEAF_NODE	3106:35	3106:35	16	tiles_tilewidth
LEAF_NODE	3107:4	3107:4	15	*
FIELD	3107:5	3107:36	15	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	3107:5	3107:5	16	t2p
LEAF_NODE	3107:8	3107:8	16	->
LEAF_NODE	3107:10	3107:10	16	tiff_tiles
LEAF_NODE	3107:20	3107:20	16	[
EXPR	3107:21	3107:21	16	t2p -> pdf_page
FIELD	3107:21	3107:26	17	t2p -> pdf_page
LEAF_NODE	3107:21	3107:21	18	t2p
LEAF_NODE	3107:24	3107:24	18	->
LEAF_NODE	3107:26	3107:26	18	pdf_page
LEAF_NODE	3107:34	3107:34	16	]
LEAF_NODE	3107:35	3107:35	16	.
LEAF_NODE	3107:36	3107:36	16	tiles_tilelength
LEAF_NODE	3107:52	3107:52	14	)
LEAF_NODE	3107:53	3107:53	10	;
LEAF_NODE	3108:2	3108:2	8	}
SELECTION	3110:2	3110:47	6	
KEYWORD	3110:2	3110:2	7	if
LEAF_NODE	3110:2	3110:2	8	if
LEAF_NODE	3110:4	3110:4	7	(
CONDITION	3110:5	3110:5	7	t2p -> pdf_sample & T2P_SAMPLE_YCBCR_TO_RGB
EXPR	3110:5	3110:23	8	t2p -> pdf_sample & T2P_SAMPLE_YCBCR_TO_RGB
FIELD	3110:5	3110:10	9	t2p -> pdf_sample
LEAF_NODE	3110:5	3110:5	10	t2p
LEAF_NODE	3110:8	3110:8	10	->
LEAF_NODE	3110:10	3110:10	10	pdf_sample
LEAF_NODE	3110:21	3110:21	9	&
FIELD	3110:23	3110:23	9	T2P_SAMPLE_YCBCR_TO_RGB
LEAF_NODE	3110:23	3110:23	10	T2P_SAMPLE_YCBCR_TO_RGB
LEAF_NODE	3110:46	3110:46	7	)
STATEMENTS	3110:47	3117:2	7	
LEAF_NODE	3110:47	3110:47	8	{
STATEMENTS	3111:3	3116:3	8	
EXPR_STATEMENT	3111:3	3113:24	9	TIFFError ( TIFF2PDF_MODULE , "No support for YCbCr to RGB in tile for %s" , TIFFFileName ( input ) ) ;
EXPR	3111:3	3111:3	10	TIFFError ( TIFF2PDF_MODULE , "No support for YCbCr to RGB in tile for %s" , TIFFFileName ( input ) )
FUNCTION_CALL	3111:3	3113:23	11	TIFFError ( TIFF2PDF_MODULE , "No support for YCbCr to RGB in tile for %s" , TIFFFileName ( input ) )
CALLEE	3111:3	3111:3	12	TIFFError
LEAF_NODE	3111:3	3111:3	13	TIFFError
LEAF_NODE	3111:12	3111:12	12	(
ARGUMENT	3111:13	3111:13	12	TIFF2PDF_MODULE
FIELD	3111:13	3111:13	13	TIFF2PDF_MODULE
LEAF_NODE	3111:13	3111:13	14	TIFF2PDF_MODULE
LEAF_NODE	3111:28	3111:28	12	,
ARGUMENT	3112:4	3112:4	12	"No support for YCbCr to RGB in tile for %s"
FIELD	3112:4	3112:4	13	"No support for YCbCr to RGB in tile for %s"
LEAF_NODE	3112:4	3112:4	14	"No support for YCbCr to RGB in tile for %s"
LEAF_NODE	3112:48	3112:48	12	,
ARGUMENT	3113:4	3113:4	12	TIFFFileName ( input )
FUNCTION_CALL	3113:4	3113:22	13	TIFFFileName ( input )
CALLEE	3113:4	3113:4	14	TIFFFileName
LEAF_NODE	3113:4	3113:4	15	TIFFFileName
LEAF_NODE	3113:16	3113:16	14	(
ARGUMENT	3113:17	3113:17	14	input
FIELD	3113:17	3113:17	15	input
LEAF_NODE	3113:17	3113:17	16	input
LEAF_NODE	3113:22	3113:22	14	)
LEAF_NODE	3113:23	3113:23	12	)
LEAF_NODE	3113:24	3113:24	10	;
EXPR_STATEMENT	3114:3	3114:20	9	_TIFFfree ( buffer ) ;
EXPR	3114:3	3114:3	10	_TIFFfree ( buffer )
FUNCTION_CALL	3114:3	3114:19	11	_TIFFfree ( buffer )
CALLEE	3114:3	3114:3	12	_TIFFfree
LEAF_NODE	3114:3	3114:3	13	_TIFFfree
LEAF_NODE	3114:12	3114:12	12	(
ARGUMENT	3114:13	3114:13	12	buffer
FIELD	3114:13	3114:13	13	buffer
LEAF_NODE	3114:13	3114:13	14	buffer
LEAF_NODE	3114:19	3114:19	12	)
LEAF_NODE	3114:20	3114:20	10	;
EXPR_STATEMENT	3115:3	3115:33	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3115:3	3115:3	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3115:3	3115:20	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3115:3	3115:3	12	t2p -> t2p_error
FIELD	3115:3	3115:8	13	t2p -> t2p_error
LEAF_NODE	3115:3	3115:3	14	t2p
LEAF_NODE	3115:6	3115:6	14	->
LEAF_NODE	3115:8	3115:8	14	t2p_error
ASSIGN_OP	3115:18	3115:18	12	=
LEAF_NODE	3115:18	3115:18	13	=
RVAL	3115:20	3115:20	12	T2P_ERR_ERROR
FIELD	3115:20	3115:20	13	T2P_ERR_ERROR
LEAF_NODE	3115:20	3115:20	14	T2P_ERR_ERROR
LEAF_NODE	3115:33	3115:33	10	;
JUMP_STATEMENT	3116:3	3116:12	9	return ( 0 ) ;
KEYWORD	3116:3	3116:3	10	return
LEAF_NODE	3116:3	3116:3	11	return
DESTINATION	3116:9	3116:9	10	( 0 )
EXPR	3116:9	3116:11	11	( 0 )
LEAF_NODE	3116:9	3116:9	12	(
FIELD	3116:10	3116:10	12	0
LEAF_NODE	3116:10	3116:10	13	0
LEAF_NODE	3116:11	3116:11	12	)
LEAF_NODE	3116:12	3116:12	10	;
LEAF_NODE	3117:2	3117:2	8	}
SELECTION	3119:2	3119:57	6	
KEYWORD	3119:2	3119:2	7	if
LEAF_NODE	3119:2	3119:2	8	if
LEAF_NODE	3119:4	3119:4	7	(
CONDITION	3119:5	3119:5	7	t2p -> pdf_sample & T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
EXPR	3119:5	3119:23	8	t2p -> pdf_sample & T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
FIELD	3119:5	3119:10	9	t2p -> pdf_sample
LEAF_NODE	3119:5	3119:5	10	t2p
LEAF_NODE	3119:8	3119:8	10	->
LEAF_NODE	3119:10	3119:10	10	pdf_sample
LEAF_NODE	3119:21	3119:21	9	&
FIELD	3119:23	3119:23	9	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LEAF_NODE	3119:23	3119:23	10	T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
LEAF_NODE	3119:56	3119:56	7	)
STATEMENTS	3119:57	3124:2	7	
LEAF_NODE	3119:57	3119:57	8	{
STATEMENTS	3120:3	3120:3	8	
EXPR_STATEMENT	3120:3	3123:53	9	t2p -> tiff_datasize = t2p_sample_lab_signed_to_unsigned ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) ;
EXPR	3120:3	3120:3	10	t2p -> tiff_datasize = t2p_sample_lab_signed_to_unsigned ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
ASSIGN	3120:3	3120:22	11	t2p -> tiff_datasize = t2p_sample_lab_signed_to_unsigned ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
LVAL	3120:3	3120:3	12	t2p -> tiff_datasize
FIELD	3120:3	3120:8	13	t2p -> tiff_datasize
LEAF_NODE	3120:3	3120:3	14	t2p
LEAF_NODE	3120:6	3120:6	14	->
LEAF_NODE	3120:8	3120:8	14	tiff_datasize
ASSIGN_OP	3120:21	3120:21	12	=
LEAF_NODE	3120:21	3120:21	13	=
RVAL	3120:22	3120:22	12	t2p_sample_lab_signed_to_unsigned ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
FUNCTION_CALL	3120:22	3123:52	13	t2p_sample_lab_signed_to_unsigned ( ( tdata_t ) buffer , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
CALLEE	3120:22	3120:22	14	t2p_sample_lab_signed_to_unsigned
LEAF_NODE	3120:22	3120:22	15	t2p_sample_lab_signed_to_unsigned
LEAF_NODE	3120:55	3120:55	14	(
ARGUMENT	3121:4	3121:13	14	( tdata_t ) buffer
LEAF_NODE	3121:4	3121:4	15	(
TYPE_NAME	3121:5	3121:5	15	tdata_t
LEAF_NODE	3121:5	3121:5	16	tdata_t
LEAF_NODE	3121:12	3121:12	15	)
FIELD	3121:13	3121:13	15	buffer
LEAF_NODE	3121:13	3121:13	16	buffer
LEAF_NODE	3121:19	3121:19	14	,
ARGUMENT	3122:4	3123:5	14	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth * t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
FIELD	3122:4	3122:35	15	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	3122:4	3122:4	16	t2p
LEAF_NODE	3122:7	3122:7	16	->
LEAF_NODE	3122:9	3122:9	16	tiff_tiles
LEAF_NODE	3122:19	3122:19	16	[
EXPR	3122:20	3122:20	16	t2p -> pdf_page
FIELD	3122:20	3122:25	17	t2p -> pdf_page
LEAF_NODE	3122:20	3122:20	18	t2p
LEAF_NODE	3122:23	3122:23	18	->
LEAF_NODE	3122:25	3122:25	18	pdf_page
LEAF_NODE	3122:33	3122:33	16	]
LEAF_NODE	3122:34	3122:34	16	.
LEAF_NODE	3122:35	3122:35	16	tiles_tilewidth
LEAF_NODE	3123:4	3123:4	15	*
FIELD	3123:5	3123:36	15	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	3123:5	3123:5	16	t2p
LEAF_NODE	3123:8	3123:8	16	->
LEAF_NODE	3123:10	3123:10	16	tiff_tiles
LEAF_NODE	3123:20	3123:20	16	[
EXPR	3123:21	3123:21	16	t2p -> pdf_page
FIELD	3123:21	3123:26	17	t2p -> pdf_page
LEAF_NODE	3123:21	3123:21	18	t2p
LEAF_NODE	3123:24	3123:24	18	->
LEAF_NODE	3123:26	3123:26	18	pdf_page
LEAF_NODE	3123:34	3123:34	16	]
LEAF_NODE	3123:35	3123:35	16	.
LEAF_NODE	3123:36	3123:36	16	tiles_tilelength
LEAF_NODE	3123:52	3123:52	14	)
LEAF_NODE	3123:53	3123:53	10	;
LEAF_NODE	3124:2	3124:2	8	}
LEAF_NODE	3125:1	3125:1	5	}
SELECTION	3127:1	3127:70	3	
KEYWORD	3127:1	3127:1	4	if
LEAF_NODE	3127:1	3127:1	5	if
LEAF_NODE	3127:3	3127:3	4	(
CONDITION	3127:4	3127:4	4	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile ) != 0
EXPR	3127:4	3127:68	5	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile ) != 0
FUNCTION_CALL	3127:4	3127:63	6	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
CALLEE	3127:4	3127:4	7	t2p_tile_is_right_edge
LEAF_NODE	3127:4	3127:4	8	t2p_tile_is_right_edge
LEAF_NODE	3127:26	3127:26	7	(
ARGUMENT	3127:27	3127:27	7	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	3127:27	3127:56	8	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	3127:27	3127:27	9	t2p
LEAF_NODE	3127:30	3127:30	9	->
LEAF_NODE	3127:32	3127:32	9	tiff_tiles
LEAF_NODE	3127:42	3127:42	9	[
EXPR	3127:43	3127:43	9	t2p -> pdf_page
FIELD	3127:43	3127:48	10	t2p -> pdf_page
LEAF_NODE	3127:43	3127:43	11	t2p
LEAF_NODE	3127:46	3127:46	11	->
LEAF_NODE	3127:48	3127:48	11	pdf_page
LEAF_NODE	3127:56	3127:56	9	]
LEAF_NODE	3127:57	3127:57	7	,
ARGUMENT	3127:59	3127:59	7	tile
FIELD	3127:59	3127:59	8	tile
LEAF_NODE	3127:59	3127:59	9	tile
LEAF_NODE	3127:63	3127:63	7	)
EQ_OPERATOR	3127:65	3127:65	6	!=
LEAF_NODE	3127:65	3127:65	7	!=
FIELD	3127:68	3127:68	6	0
LEAF_NODE	3127:68	3127:68	7	0
LEAF_NODE	3127:69	3127:69	4	)
STATEMENTS	3127:70	3141:1	4	
LEAF_NODE	3127:70	3127:70	5	{
STATEMENTS	3128:2	3133:4	5	
SELECTION	3128:2	3128:125	6	
KEYWORD	3128:2	3128:2	7	if
LEAF_NODE	3128:2	3128:2	8	if
LEAF_NODE	3128:5	3128:5	7	(
CONDITION	3128:6	3128:6	7	( uint64 ) t2p -> tiff_datasize < ( uint64 ) TIFFTileRowSize ( input ) * ( uint64 ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
EXPR	3128:6	3128:76	8	( uint64 ) t2p -> tiff_datasize < ( uint64 ) TIFFTileRowSize ( input ) * ( uint64 ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	3128:6	3128:6	9	(
TYPE_NAME	3128:7	3128:7	9	uint64
LEAF_NODE	3128:7	3128:7	10	uint64
LEAF_NODE	3128:13	3128:13	9	)
FIELD	3128:14	3128:19	9	t2p -> tiff_datasize
LEAF_NODE	3128:14	3128:14	10	t2p
LEAF_NODE	3128:17	3128:17	10	->
LEAF_NODE	3128:19	3128:19	10	tiff_datasize
REL_OPERATOR	3128:33	3128:33	9	<
LEAF_NODE	3128:33	3128:33	10	<
LEAF_NODE	3128:35	3128:35	9	(
TYPE_NAME	3128:36	3128:36	9	uint64
LEAF_NODE	3128:36	3128:36	10	uint64
LEAF_NODE	3128:42	3128:42	9	)
FUNCTION_CALL	3128:43	3128:64	9	TIFFTileRowSize ( input )
CALLEE	3128:43	3128:43	10	TIFFTileRowSize
LEAF_NODE	3128:43	3128:43	11	TIFFTileRowSize
LEAF_NODE	3128:58	3128:58	10	(
ARGUMENT	3128:59	3128:59	10	input
FIELD	3128:59	3128:59	11	input
LEAF_NODE	3128:59	3128:59	12	input
LEAF_NODE	3128:64	3128:64	10	)
LEAF_NODE	3128:66	3128:66	9	*
LEAF_NODE	3128:68	3128:68	9	(
TYPE_NAME	3128:69	3128:69	9	uint64
LEAF_NODE	3128:69	3128:69	10	uint64
LEAF_NODE	3128:75	3128:75	9	)
FIELD	3128:76	3128:107	9	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	3128:76	3128:76	10	t2p
LEAF_NODE	3128:79	3128:79	10	->
LEAF_NODE	3128:81	3128:81	10	tiff_tiles
LEAF_NODE	3128:91	3128:91	10	[
EXPR	3128:92	3128:92	10	t2p -> pdf_page
FIELD	3128:92	3128:97	11	t2p -> pdf_page
LEAF_NODE	3128:92	3128:92	12	t2p
LEAF_NODE	3128:95	3128:95	12	->
LEAF_NODE	3128:97	3128:97	12	pdf_page
LEAF_NODE	3128:105	3128:105	10	]
LEAF_NODE	3128:106	3128:106	10	.
LEAF_NODE	3128:107	3128:107	10	tiles_tilelength
LEAF_NODE	3128:123	3128:123	7	)
STATEMENTS	3128:125	3133:2	7	
LEAF_NODE	3128:125	3128:125	8	{
STATEMENTS	3130:3	3130:3	8	
EXPR_STATEMENT	3130:3	3132:50	9	TIFFWarning ( TIFF2PDF_MODULE , "Don't know how to collapse tile to the left" ) ;
EXPR	3130:3	3130:3	10	TIFFWarning ( TIFF2PDF_MODULE , "Don't know how to collapse tile to the left" )
FUNCTION_CALL	3130:3	3132:49	11	TIFFWarning ( TIFF2PDF_MODULE , "Don't know how to collapse tile to the left" )
CALLEE	3130:3	3130:3	12	TIFFWarning
LEAF_NODE	3130:3	3130:3	13	TIFFWarning
LEAF_NODE	3130:14	3130:14	12	(
ARGUMENT	3131:4	3131:4	12	TIFF2PDF_MODULE
FIELD	3131:4	3131:4	13	TIFF2PDF_MODULE
LEAF_NODE	3131:4	3131:4	14	TIFF2PDF_MODULE
LEAF_NODE	3131:19	3131:19	12	,
ARGUMENT	3132:4	3132:4	12	"Don't know how to collapse tile to the left"
FIELD	3132:4	3132:4	13	"Don't know how to collapse tile to the left"
LEAF_NODE	3132:4	3132:4	14	"Don't know how to collapse tile to the left"
LEAF_NODE	3132:49	3132:49	12	)
LEAF_NODE	3132:50	3132:50	10	;
LEAF_NODE	3133:2	3133:2	8	}
SELECTION	3133:4	3133:9	6	
KEYWORD	3133:4	3133:4	7	else
LEAF_NODE	3133:4	3133:4	8	else
STATEMENTS	3133:9	3140:2	7	
LEAF_NODE	3133:9	3133:9	8	{
STATEMENTS	3134:3	3134:3	8	
EXPR_STATEMENT	3134:3	3139:52	9	t2p_tile_collapse_left ( buffer , TIFFTileRowSize ( input ) , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) ;
EXPR	3134:3	3134:3	10	t2p_tile_collapse_left ( buffer , TIFFTileRowSize ( input ) , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
FUNCTION_CALL	3134:3	3139:51	11	t2p_tile_collapse_left ( buffer , TIFFTileRowSize ( input ) , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
CALLEE	3134:3	3134:3	12	t2p_tile_collapse_left
LEAF_NODE	3134:3	3134:3	13	t2p_tile_collapse_left
LEAF_NODE	3134:25	3134:25	12	(
ARGUMENT	3135:4	3135:4	12	buffer
FIELD	3135:4	3135:4	13	buffer
LEAF_NODE	3135:4	3135:4	14	buffer
LEAF_NODE	3135:10	3135:10	12	,
ARGUMENT	3136:4	3136:4	12	TIFFTileRowSize ( input )
FUNCTION_CALL	3136:4	3136:25	13	TIFFTileRowSize ( input )
CALLEE	3136:4	3136:4	14	TIFFTileRowSize
LEAF_NODE	3136:4	3136:4	15	TIFFTileRowSize
LEAF_NODE	3136:19	3136:19	14	(
ARGUMENT	3136:20	3136:20	14	input
FIELD	3136:20	3136:20	15	input
LEAF_NODE	3136:20	3136:20	16	input
LEAF_NODE	3136:25	3136:25	14	)
LEAF_NODE	3136:26	3136:26	12	,
ARGUMENT	3137:4	3137:4	12	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
FIELD	3137:4	3137:35	13	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	3137:4	3137:4	14	t2p
LEAF_NODE	3137:7	3137:7	14	->
LEAF_NODE	3137:9	3137:9	14	tiff_tiles
LEAF_NODE	3137:19	3137:19	14	[
EXPR	3137:20	3137:20	14	t2p -> pdf_page
FIELD	3137:20	3137:25	15	t2p -> pdf_page
LEAF_NODE	3137:20	3137:20	16	t2p
LEAF_NODE	3137:23	3137:23	16	->
LEAF_NODE	3137:25	3137:25	16	pdf_page
LEAF_NODE	3137:33	3137:33	14	]
LEAF_NODE	3137:34	3137:34	14	.
LEAF_NODE	3137:35	3137:35	14	tiles_tilewidth
LEAF_NODE	3137:50	3137:50	12	,
ARGUMENT	3138:4	3138:4	12	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth
FIELD	3138:4	3138:35	13	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth
LEAF_NODE	3138:4	3138:4	14	t2p
LEAF_NODE	3138:7	3138:7	14	->
LEAF_NODE	3138:9	3138:9	14	tiff_tiles
LEAF_NODE	3138:19	3138:19	14	[
EXPR	3138:20	3138:20	14	t2p -> pdf_page
FIELD	3138:20	3138:25	15	t2p -> pdf_page
LEAF_NODE	3138:20	3138:20	16	t2p
LEAF_NODE	3138:23	3138:23	16	->
LEAF_NODE	3138:25	3138:25	16	pdf_page
LEAF_NODE	3138:33	3138:33	14	]
LEAF_NODE	3138:34	3138:34	14	.
LEAF_NODE	3138:35	3138:35	14	tiles_edgetilewidth
LEAF_NODE	3138:54	3138:54	12	,
ARGUMENT	3139:4	3139:4	12	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
FIELD	3139:4	3139:35	13	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	3139:4	3139:4	14	t2p
LEAF_NODE	3139:7	3139:7	14	->
LEAF_NODE	3139:9	3139:9	14	tiff_tiles
LEAF_NODE	3139:19	3139:19	14	[
EXPR	3139:20	3139:20	14	t2p -> pdf_page
FIELD	3139:20	3139:25	15	t2p -> pdf_page
LEAF_NODE	3139:20	3139:20	16	t2p
LEAF_NODE	3139:23	3139:23	16	->
LEAF_NODE	3139:25	3139:25	16	pdf_page
LEAF_NODE	3139:33	3139:33	14	]
LEAF_NODE	3139:34	3139:34	14	.
LEAF_NODE	3139:35	3139:35	14	tiles_tilelength
LEAF_NODE	3139:51	3139:51	12	)
LEAF_NODE	3139:52	3139:52	10	;
LEAF_NODE	3140:2	3140:2	8	}
LEAF_NODE	3141:1	3141:1	5	}
EXPR_STATEMENT	3144:1	3144:20	3	t2p_disable ( output ) ;
EXPR	3144:1	3144:1	4	t2p_disable ( output )
FUNCTION_CALL	3144:1	3144:19	5	t2p_disable ( output )
CALLEE	3144:1	3144:1	6	t2p_disable
LEAF_NODE	3144:1	3144:1	7	t2p_disable
LEAF_NODE	3144:12	3144:12	6	(
ARGUMENT	3144:13	3144:13	6	output
FIELD	3144:13	3144:13	7	output
LEAF_NODE	3144:13	3144:13	8	output
LEAF_NODE	3144:19	3144:19	6	)
LEAF_NODE	3144:20	3144:20	4	;
EXPR_STATEMENT	3145:1	3145:65	3	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , t2p -> tiff_photometric ) ;
EXPR	3145:1	3145:1	4	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , t2p -> tiff_photometric )
FUNCTION_CALL	3145:1	3145:64	5	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , t2p -> tiff_photometric )
CALLEE	3145:1	3145:1	6	TIFFSetField
LEAF_NODE	3145:1	3145:1	7	TIFFSetField
LEAF_NODE	3145:13	3145:13	6	(
ARGUMENT	3145:14	3145:14	6	output
FIELD	3145:14	3145:14	7	output
LEAF_NODE	3145:14	3145:14	8	output
LEAF_NODE	3145:20	3145:20	6	,
ARGUMENT	3145:22	3145:22	6	TIFFTAG_PHOTOMETRIC
FIELD	3145:22	3145:22	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	3145:22	3145:22	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	3145:41	3145:41	6	,
ARGUMENT	3145:43	3145:43	6	t2p -> tiff_photometric
FIELD	3145:43	3145:48	7	t2p -> tiff_photometric
LEAF_NODE	3145:43	3145:43	8	t2p
LEAF_NODE	3145:46	3145:46	8	->
LEAF_NODE	3145:48	3145:48	8	tiff_photometric
LEAF_NODE	3145:64	3145:64	6	)
LEAF_NODE	3145:65	3145:65	4	;
EXPR_STATEMENT	3146:1	3146:69	3	TIFFSetField ( output , TIFFTAG_BITSPERSAMPLE , t2p -> tiff_bitspersample ) ;
EXPR	3146:1	3146:1	4	TIFFSetField ( output , TIFFTAG_BITSPERSAMPLE , t2p -> tiff_bitspersample )
FUNCTION_CALL	3146:1	3146:68	5	TIFFSetField ( output , TIFFTAG_BITSPERSAMPLE , t2p -> tiff_bitspersample )
CALLEE	3146:1	3146:1	6	TIFFSetField
LEAF_NODE	3146:1	3146:1	7	TIFFSetField
LEAF_NODE	3146:13	3146:13	6	(
ARGUMENT	3146:14	3146:14	6	output
FIELD	3146:14	3146:14	7	output
LEAF_NODE	3146:14	3146:14	8	output
LEAF_NODE	3146:20	3146:20	6	,
ARGUMENT	3146:22	3146:22	6	TIFFTAG_BITSPERSAMPLE
FIELD	3146:22	3146:22	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	3146:22	3146:22	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	3146:43	3146:43	6	,
ARGUMENT	3146:45	3146:45	6	t2p -> tiff_bitspersample
FIELD	3146:45	3146:50	7	t2p -> tiff_bitspersample
LEAF_NODE	3146:45	3146:45	8	t2p
LEAF_NODE	3146:48	3146:48	8	->
LEAF_NODE	3146:50	3146:50	8	tiff_bitspersample
LEAF_NODE	3146:68	3146:68	6	)
LEAF_NODE	3146:69	3146:69	4	;
EXPR_STATEMENT	3147:1	3147:73	3	TIFFSetField ( output , TIFFTAG_SAMPLESPERPIXEL , t2p -> tiff_samplesperpixel ) ;
EXPR	3147:1	3147:1	4	TIFFSetField ( output , TIFFTAG_SAMPLESPERPIXEL , t2p -> tiff_samplesperpixel )
FUNCTION_CALL	3147:1	3147:72	5	TIFFSetField ( output , TIFFTAG_SAMPLESPERPIXEL , t2p -> tiff_samplesperpixel )
CALLEE	3147:1	3147:1	6	TIFFSetField
LEAF_NODE	3147:1	3147:1	7	TIFFSetField
LEAF_NODE	3147:13	3147:13	6	(
ARGUMENT	3147:14	3147:14	6	output
FIELD	3147:14	3147:14	7	output
LEAF_NODE	3147:14	3147:14	8	output
LEAF_NODE	3147:20	3147:20	6	,
ARGUMENT	3147:22	3147:22	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	3147:22	3147:22	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	3147:22	3147:22	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	3147:45	3147:45	6	,
ARGUMENT	3147:47	3147:47	6	t2p -> tiff_samplesperpixel
FIELD	3147:47	3147:52	7	t2p -> tiff_samplesperpixel
LEAF_NODE	3147:47	3147:47	8	t2p
LEAF_NODE	3147:50	3147:50	8	->
LEAF_NODE	3147:52	3147:52	8	tiff_samplesperpixel
LEAF_NODE	3147:72	3147:72	6	)
LEAF_NODE	3147:73	3147:73	4	;
SELECTION	3148:1	3148:70	3	
KEYWORD	3148:1	3148:1	4	if
LEAF_NODE	3148:1	3148:1	5	if
LEAF_NODE	3148:3	3148:3	4	(
CONDITION	3148:4	3148:4	4	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile ) == 0
EXPR	3148:4	3148:68	5	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile ) == 0
FUNCTION_CALL	3148:4	3148:63	6	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
CALLEE	3148:4	3148:4	7	t2p_tile_is_right_edge
LEAF_NODE	3148:4	3148:4	8	t2p_tile_is_right_edge
LEAF_NODE	3148:26	3148:26	7	(
ARGUMENT	3148:27	3148:27	7	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	3148:27	3148:56	8	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	3148:27	3148:27	9	t2p
LEAF_NODE	3148:30	3148:30	9	->
LEAF_NODE	3148:32	3148:32	9	tiff_tiles
LEAF_NODE	3148:42	3148:42	9	[
EXPR	3148:43	3148:43	9	t2p -> pdf_page
FIELD	3148:43	3148:48	10	t2p -> pdf_page
LEAF_NODE	3148:43	3148:43	11	t2p
LEAF_NODE	3148:46	3148:46	11	->
LEAF_NODE	3148:48	3148:48	11	pdf_page
LEAF_NODE	3148:56	3148:56	9	]
LEAF_NODE	3148:57	3148:57	7	,
ARGUMENT	3148:59	3148:59	7	tile
FIELD	3148:59	3148:59	8	tile
LEAF_NODE	3148:59	3148:59	9	tile
LEAF_NODE	3148:63	3148:63	7	)
EQ_OPERATOR	3148:65	3148:65	6	==
LEAF_NODE	3148:65	3148:65	7	==
FIELD	3148:68	3148:68	6	0
LEAF_NODE	3148:68	3148:68	7	0
LEAF_NODE	3148:69	3148:69	4	)
STATEMENTS	3148:70	3153:1	4	
LEAF_NODE	3148:70	3148:70	5	{
STATEMENTS	3149:2	3149:2	5	
EXPR_STATEMENT	3149:2	3152:50	6	TIFFSetField ( output , TIFFTAG_IMAGEWIDTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth ) ;
EXPR	3149:2	3149:2	7	TIFFSetField ( output , TIFFTAG_IMAGEWIDTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth )
FUNCTION_CALL	3149:2	3152:49	8	TIFFSetField ( output , TIFFTAG_IMAGEWIDTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth )
CALLEE	3149:2	3149:2	9	TIFFSetField
LEAF_NODE	3149:2	3149:2	10	TIFFSetField
LEAF_NODE	3149:14	3149:14	9	(
ARGUMENT	3150:3	3150:3	9	output
FIELD	3150:3	3150:3	10	output
LEAF_NODE	3150:3	3150:3	11	output
LEAF_NODE	3150:9	3150:9	9	,
ARGUMENT	3151:3	3151:3	9	TIFFTAG_IMAGEWIDTH
FIELD	3151:3	3151:3	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	3151:3	3151:3	11	TIFFTAG_IMAGEWIDTH
LEAF_NODE	3151:21	3151:21	9	,
ARGUMENT	3152:3	3152:3	9	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
FIELD	3152:3	3152:34	10	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	3152:3	3152:3	11	t2p
LEAF_NODE	3152:6	3152:6	11	->
LEAF_NODE	3152:8	3152:8	11	tiff_tiles
LEAF_NODE	3152:18	3152:18	11	[
EXPR	3152:19	3152:19	11	t2p -> pdf_page
FIELD	3152:19	3152:24	12	t2p -> pdf_page
LEAF_NODE	3152:19	3152:19	13	t2p
LEAF_NODE	3152:22	3152:22	13	->
LEAF_NODE	3152:24	3152:24	13	pdf_page
LEAF_NODE	3152:32	3152:32	11	]
LEAF_NODE	3152:33	3152:33	11	.
LEAF_NODE	3152:34	3152:34	11	tiles_tilewidth
LEAF_NODE	3152:49	3152:49	9	)
LEAF_NODE	3152:50	3152:50	7	;
LEAF_NODE	3153:1	3153:1	5	}
SELECTION	3153:3	3153:8	3	
KEYWORD	3153:3	3153:3	4	else
LEAF_NODE	3153:3	3153:3	5	else
STATEMENTS	3153:8	3158:1	4	
LEAF_NODE	3153:8	3153:8	5	{
STATEMENTS	3154:2	3154:2	5	
EXPR_STATEMENT	3154:2	3157:54	6	TIFFSetField ( output , TIFFTAG_IMAGEWIDTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth ) ;
EXPR	3154:2	3154:2	7	TIFFSetField ( output , TIFFTAG_IMAGEWIDTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth )
FUNCTION_CALL	3154:2	3157:53	8	TIFFSetField ( output , TIFFTAG_IMAGEWIDTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth )
CALLEE	3154:2	3154:2	9	TIFFSetField
LEAF_NODE	3154:2	3154:2	10	TIFFSetField
LEAF_NODE	3154:14	3154:14	9	(
ARGUMENT	3155:3	3155:3	9	output
FIELD	3155:3	3155:3	10	output
LEAF_NODE	3155:3	3155:3	11	output
LEAF_NODE	3155:9	3155:9	9	,
ARGUMENT	3156:3	3156:3	9	TIFFTAG_IMAGEWIDTH
FIELD	3156:3	3156:3	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	3156:3	3156:3	11	TIFFTAG_IMAGEWIDTH
LEAF_NODE	3156:21	3156:21	9	,
ARGUMENT	3157:3	3157:3	9	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth
FIELD	3157:3	3157:34	10	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth
LEAF_NODE	3157:3	3157:3	11	t2p
LEAF_NODE	3157:6	3157:6	11	->
LEAF_NODE	3157:8	3157:8	11	tiff_tiles
LEAF_NODE	3157:18	3157:18	11	[
EXPR	3157:19	3157:19	11	t2p -> pdf_page
FIELD	3157:19	3157:24	12	t2p -> pdf_page
LEAF_NODE	3157:19	3157:19	13	t2p
LEAF_NODE	3157:22	3157:22	13	->
LEAF_NODE	3157:24	3157:24	13	pdf_page
LEAF_NODE	3157:32	3157:32	11	]
LEAF_NODE	3157:33	3157:33	11	.
LEAF_NODE	3157:34	3157:34	11	tiles_edgetilewidth
LEAF_NODE	3157:53	3157:53	9	)
LEAF_NODE	3157:54	3157:54	7	;
LEAF_NODE	3158:1	3158:1	5	}
SELECTION	3159:1	3159:71	3	
KEYWORD	3159:1	3159:1	4	if
LEAF_NODE	3159:1	3159:1	5	if
LEAF_NODE	3159:3	3159:3	4	(
CONDITION	3159:4	3159:4	4	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile ) == 0
EXPR	3159:4	3159:69	5	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile ) == 0
FUNCTION_CALL	3159:4	3159:64	6	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile )
CALLEE	3159:4	3159:4	7	t2p_tile_is_bottom_edge
LEAF_NODE	3159:4	3159:4	8	t2p_tile_is_bottom_edge
LEAF_NODE	3159:27	3159:27	7	(
ARGUMENT	3159:28	3159:28	7	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	3159:28	3159:57	8	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	3159:28	3159:28	9	t2p
LEAF_NODE	3159:31	3159:31	9	->
LEAF_NODE	3159:33	3159:33	9	tiff_tiles
LEAF_NODE	3159:43	3159:43	9	[
EXPR	3159:44	3159:44	9	t2p -> pdf_page
FIELD	3159:44	3159:49	10	t2p -> pdf_page
LEAF_NODE	3159:44	3159:44	11	t2p
LEAF_NODE	3159:47	3159:47	11	->
LEAF_NODE	3159:49	3159:49	11	pdf_page
LEAF_NODE	3159:57	3159:57	9	]
LEAF_NODE	3159:58	3159:58	7	,
ARGUMENT	3159:60	3159:60	7	tile
FIELD	3159:60	3159:60	8	tile
LEAF_NODE	3159:60	3159:60	9	tile
LEAF_NODE	3159:64	3159:64	7	)
EQ_OPERATOR	3159:66	3159:66	6	==
LEAF_NODE	3159:66	3159:66	7	==
FIELD	3159:69	3159:69	6	0
LEAF_NODE	3159:69	3159:69	7	0
LEAF_NODE	3159:70	3159:70	4	)
STATEMENTS	3159:71	3168:1	4	
LEAF_NODE	3159:71	3159:71	5	{
STATEMENTS	3160:2	3164:2	5	
EXPR_STATEMENT	3160:2	3163:51	6	TIFFSetField ( output , TIFFTAG_IMAGELENGTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) ;
EXPR	3160:2	3160:2	7	TIFFSetField ( output , TIFFTAG_IMAGELENGTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
FUNCTION_CALL	3160:2	3163:50	8	TIFFSetField ( output , TIFFTAG_IMAGELENGTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
CALLEE	3160:2	3160:2	9	TIFFSetField
LEAF_NODE	3160:2	3160:2	10	TIFFSetField
LEAF_NODE	3160:14	3160:14	9	(
ARGUMENT	3161:3	3161:3	9	output
FIELD	3161:3	3161:3	10	output
LEAF_NODE	3161:3	3161:3	11	output
LEAF_NODE	3161:9	3161:9	9	,
ARGUMENT	3162:3	3162:3	9	TIFFTAG_IMAGELENGTH
FIELD	3162:3	3162:3	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	3162:3	3162:3	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	3162:22	3162:22	9	,
ARGUMENT	3163:3	3163:3	9	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
FIELD	3163:3	3163:34	10	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	3163:3	3163:3	11	t2p
LEAF_NODE	3163:6	3163:6	11	->
LEAF_NODE	3163:8	3163:8	11	tiff_tiles
LEAF_NODE	3163:18	3163:18	11	[
EXPR	3163:19	3163:19	11	t2p -> pdf_page
FIELD	3163:19	3163:24	12	t2p -> pdf_page
LEAF_NODE	3163:19	3163:19	13	t2p
LEAF_NODE	3163:22	3163:22	13	->
LEAF_NODE	3163:24	3163:24	13	pdf_page
LEAF_NODE	3163:32	3163:32	11	]
LEAF_NODE	3163:33	3163:33	11	.
LEAF_NODE	3163:34	3163:34	11	tiles_tilelength
LEAF_NODE	3163:50	3163:50	9	)
LEAF_NODE	3163:51	3163:51	7	;
EXPR_STATEMENT	3164:2	3167:51	6	TIFFSetField ( output , TIFFTAG_ROWSPERSTRIP , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) ;
EXPR	3164:2	3164:2	7	TIFFSetField ( output , TIFFTAG_ROWSPERSTRIP , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
FUNCTION_CALL	3164:2	3167:50	8	TIFFSetField ( output , TIFFTAG_ROWSPERSTRIP , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
CALLEE	3164:2	3164:2	9	TIFFSetField
LEAF_NODE	3164:2	3164:2	10	TIFFSetField
LEAF_NODE	3164:14	3164:14	9	(
ARGUMENT	3165:3	3165:3	9	output
FIELD	3165:3	3165:3	10	output
LEAF_NODE	3165:3	3165:3	11	output
LEAF_NODE	3165:9	3165:9	9	,
ARGUMENT	3166:3	3166:3	9	TIFFTAG_ROWSPERSTRIP
FIELD	3166:3	3166:3	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	3166:3	3166:3	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	3166:23	3166:23	9	,
ARGUMENT	3167:3	3167:3	9	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
FIELD	3167:3	3167:34	10	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	3167:3	3167:3	11	t2p
LEAF_NODE	3167:6	3167:6	11	->
LEAF_NODE	3167:8	3167:8	11	tiff_tiles
LEAF_NODE	3167:18	3167:18	11	[
EXPR	3167:19	3167:19	11	t2p -> pdf_page
FIELD	3167:19	3167:24	12	t2p -> pdf_page
LEAF_NODE	3167:19	3167:19	13	t2p
LEAF_NODE	3167:22	3167:22	13	->
LEAF_NODE	3167:24	3167:24	13	pdf_page
LEAF_NODE	3167:32	3167:32	11	]
LEAF_NODE	3167:33	3167:33	11	.
LEAF_NODE	3167:34	3167:34	11	tiles_tilelength
LEAF_NODE	3167:50	3167:50	9	)
LEAF_NODE	3167:51	3167:51	7	;
LEAF_NODE	3168:1	3168:1	5	}
SELECTION	3168:3	3168:8	3	
KEYWORD	3168:3	3168:3	4	else
LEAF_NODE	3168:3	3168:3	5	else
STATEMENTS	3168:8	3177:1	4	
LEAF_NODE	3168:8	3168:8	5	{
STATEMENTS	3169:2	3173:2	5	
EXPR_STATEMENT	3169:2	3172:55	6	TIFFSetField ( output , TIFFTAG_IMAGELENGTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength ) ;
EXPR	3169:2	3169:2	7	TIFFSetField ( output , TIFFTAG_IMAGELENGTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
FUNCTION_CALL	3169:2	3172:54	8	TIFFSetField ( output , TIFFTAG_IMAGELENGTH , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
CALLEE	3169:2	3169:2	9	TIFFSetField
LEAF_NODE	3169:2	3169:2	10	TIFFSetField
LEAF_NODE	3169:14	3169:14	9	(
ARGUMENT	3170:3	3170:3	9	output
FIELD	3170:3	3170:3	10	output
LEAF_NODE	3170:3	3170:3	11	output
LEAF_NODE	3170:9	3170:9	9	,
ARGUMENT	3171:3	3171:3	9	TIFFTAG_IMAGELENGTH
FIELD	3171:3	3171:3	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	3171:3	3171:3	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	3171:22	3171:22	9	,
ARGUMENT	3172:3	3172:3	9	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength
FIELD	3172:3	3172:34	10	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength
LEAF_NODE	3172:3	3172:3	11	t2p
LEAF_NODE	3172:6	3172:6	11	->
LEAF_NODE	3172:8	3172:8	11	tiff_tiles
LEAF_NODE	3172:18	3172:18	11	[
EXPR	3172:19	3172:19	11	t2p -> pdf_page
FIELD	3172:19	3172:24	12	t2p -> pdf_page
LEAF_NODE	3172:19	3172:19	13	t2p
LEAF_NODE	3172:22	3172:22	13	->
LEAF_NODE	3172:24	3172:24	13	pdf_page
LEAF_NODE	3172:32	3172:32	11	]
LEAF_NODE	3172:33	3172:33	11	.
LEAF_NODE	3172:34	3172:34	11	tiles_edgetilelength
LEAF_NODE	3172:54	3172:54	9	)
LEAF_NODE	3172:55	3172:55	7	;
EXPR_STATEMENT	3173:2	3176:55	6	TIFFSetField ( output , TIFFTAG_ROWSPERSTRIP , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength ) ;
EXPR	3173:2	3173:2	7	TIFFSetField ( output , TIFFTAG_ROWSPERSTRIP , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
FUNCTION_CALL	3173:2	3176:54	8	TIFFSetField ( output , TIFFTAG_ROWSPERSTRIP , t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
CALLEE	3173:2	3173:2	9	TIFFSetField
LEAF_NODE	3173:2	3173:2	10	TIFFSetField
LEAF_NODE	3173:14	3173:14	9	(
ARGUMENT	3174:3	3174:3	9	output
FIELD	3174:3	3174:3	10	output
LEAF_NODE	3174:3	3174:3	11	output
LEAF_NODE	3174:9	3174:9	9	,
ARGUMENT	3175:3	3175:3	9	TIFFTAG_ROWSPERSTRIP
FIELD	3175:3	3175:3	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	3175:3	3175:3	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	3175:23	3175:23	9	,
ARGUMENT	3176:3	3176:3	9	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength
FIELD	3176:3	3176:34	10	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength
LEAF_NODE	3176:3	3176:3	11	t2p
LEAF_NODE	3176:6	3176:6	11	->
LEAF_NODE	3176:8	3176:8	11	tiff_tiles
LEAF_NODE	3176:18	3176:18	11	[
EXPR	3176:19	3176:19	11	t2p -> pdf_page
FIELD	3176:19	3176:24	12	t2p -> pdf_page
LEAF_NODE	3176:19	3176:19	13	t2p
LEAF_NODE	3176:22	3176:22	13	->
LEAF_NODE	3176:24	3176:24	13	pdf_page
LEAF_NODE	3176:32	3176:32	11	]
LEAF_NODE	3176:33	3176:33	11	.
LEAF_NODE	3176:34	3176:34	11	tiles_edgetilelength
LEAF_NODE	3176:54	3176:54	9	)
LEAF_NODE	3176:55	3176:55	7	;
LEAF_NODE	3177:1	3177:1	5	}
EXPR_STATEMENT	3178:1	3178:64	3	TIFFSetField ( output , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	3178:1	3178:1	4	TIFFSetField ( output , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	3178:1	3178:63	5	TIFFSetField ( output , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	3178:1	3178:1	6	TIFFSetField
LEAF_NODE	3178:1	3178:1	7	TIFFSetField
LEAF_NODE	3178:13	3178:13	6	(
ARGUMENT	3178:14	3178:14	6	output
FIELD	3178:14	3178:14	7	output
LEAF_NODE	3178:14	3178:14	8	output
LEAF_NODE	3178:20	3178:20	6	,
ARGUMENT	3178:22	3178:22	6	TIFFTAG_PLANARCONFIG
FIELD	3178:22	3178:22	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	3178:22	3178:22	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	3178:42	3178:42	6	,
ARGUMENT	3178:44	3178:44	6	PLANARCONFIG_CONTIG
FIELD	3178:44	3178:44	7	PLANARCONFIG_CONTIG
LEAF_NODE	3178:44	3178:44	8	PLANARCONFIG_CONTIG
LEAF_NODE	3178:63	3178:63	6	)
LEAF_NODE	3178:64	3178:64	4	;
EXPR_STATEMENT	3179:1	3179:59	3	TIFFSetField ( output , TIFFTAG_FILLORDER , FILLORDER_MSB2LSB ) ;
EXPR	3179:1	3179:1	4	TIFFSetField ( output , TIFFTAG_FILLORDER , FILLORDER_MSB2LSB )
FUNCTION_CALL	3179:1	3179:58	5	TIFFSetField ( output , TIFFTAG_FILLORDER , FILLORDER_MSB2LSB )
CALLEE	3179:1	3179:1	6	TIFFSetField
LEAF_NODE	3179:1	3179:1	7	TIFFSetField
LEAF_NODE	3179:13	3179:13	6	(
ARGUMENT	3179:14	3179:14	6	output
FIELD	3179:14	3179:14	7	output
LEAF_NODE	3179:14	3179:14	8	output
LEAF_NODE	3179:20	3179:20	6	,
ARGUMENT	3179:22	3179:22	6	TIFFTAG_FILLORDER
FIELD	3179:22	3179:22	7	TIFFTAG_FILLORDER
LEAF_NODE	3179:22	3179:22	8	TIFFTAG_FILLORDER
LEAF_NODE	3179:39	3179:39	6	,
ARGUMENT	3179:41	3179:41	6	FILLORDER_MSB2LSB
FIELD	3179:41	3179:41	7	FILLORDER_MSB2LSB
LEAF_NODE	3179:41	3179:41	8	FILLORDER_MSB2LSB
LEAF_NODE	3179:58	3179:58	6	)
LEAF_NODE	3179:59	3179:59	4	;
SELECTION	3181:1	3181:29	3	
KEYWORD	3181:1	3181:1	4	switch
LEAF_NODE	3181:1	3181:1	5	switch
LEAF_NODE	3181:7	3181:7	4	(
CONDITION	3181:8	3181:8	4	t2p -> pdf_compression
EXPR	3181:8	3181:8	5	t2p -> pdf_compression
FIELD	3181:8	3181:13	6	t2p -> pdf_compression
LEAF_NODE	3181:8	3181:8	7	t2p
LEAF_NODE	3181:11	3181:11	7	->
LEAF_NODE	3181:13	3181:13	7	pdf_compression
LEAF_NODE	3181:28	3181:28	4	)
STATEMENTS	3181:29	3243:1	4	
LEAF_NODE	3181:29	3181:29	5	{
STATEMENTS	3182:1	3242:2	5	
LABEL	3182:1	3182:23	6	case T2P_COMPRESS_NONE :
LEAF_NODE	3182:1	3182:1	7	case
LEAF_NODE	3182:6	3182:6	7	T2P_COMPRESS_NONE
LEAF_NODE	3182:23	3182:23	7	:
EXPR_STATEMENT	3183:2	3183:61	6	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_NONE ) ;
EXPR	3183:2	3183:2	7	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
FUNCTION_CALL	3183:2	3183:60	8	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
CALLEE	3183:2	3183:2	9	TIFFSetField
LEAF_NODE	3183:2	3183:2	10	TIFFSetField
LEAF_NODE	3183:14	3183:14	9	(
ARGUMENT	3183:15	3183:15	9	output
FIELD	3183:15	3183:15	10	output
LEAF_NODE	3183:15	3183:15	11	output
LEAF_NODE	3183:21	3183:21	9	,
ARGUMENT	3183:23	3183:23	9	TIFFTAG_COMPRESSION
FIELD	3183:23	3183:23	10	TIFFTAG_COMPRESSION
LEAF_NODE	3183:23	3183:23	11	TIFFTAG_COMPRESSION
LEAF_NODE	3183:42	3183:42	9	,
ARGUMENT	3183:44	3183:44	9	COMPRESSION_NONE
FIELD	3183:44	3183:44	10	COMPRESSION_NONE
LEAF_NODE	3183:44	3183:44	11	COMPRESSION_NONE
LEAF_NODE	3183:60	3183:60	9	)
LEAF_NODE	3183:61	3183:61	7	;
JUMP_STATEMENT	3184:2	3184:7	6	break DESTINATION ;
KEYWORD	3184:2	3184:2	7	break
LEAF_NODE	3184:2	3184:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	3184:7	3184:7	7	;
LABEL	3186:1	3186:21	6	case T2P_COMPRESS_G4 :
LEAF_NODE	3186:1	3186:1	7	case
LEAF_NODE	3186:6	3186:6	7	T2P_COMPRESS_G4
LEAF_NODE	3186:21	3186:21	7	:
EXPR_STATEMENT	3187:2	3187:66	6	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_CCITTFAX4 ) ;
EXPR	3187:2	3187:2	7	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_CCITTFAX4 )
FUNCTION_CALL	3187:2	3187:65	8	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_CCITTFAX4 )
CALLEE	3187:2	3187:2	9	TIFFSetField
LEAF_NODE	3187:2	3187:2	10	TIFFSetField
LEAF_NODE	3187:14	3187:14	9	(
ARGUMENT	3187:15	3187:15	9	output
FIELD	3187:15	3187:15	10	output
LEAF_NODE	3187:15	3187:15	11	output
LEAF_NODE	3187:21	3187:21	9	,
ARGUMENT	3187:23	3187:23	9	TIFFTAG_COMPRESSION
FIELD	3187:23	3187:23	10	TIFFTAG_COMPRESSION
LEAF_NODE	3187:23	3187:23	11	TIFFTAG_COMPRESSION
LEAF_NODE	3187:42	3187:42	9	,
ARGUMENT	3187:44	3187:44	9	COMPRESSION_CCITTFAX4
FIELD	3187:44	3187:44	10	COMPRESSION_CCITTFAX4
LEAF_NODE	3187:44	3187:44	11	COMPRESSION_CCITTFAX4
LEAF_NODE	3187:65	3187:65	9	)
LEAF_NODE	3187:66	3187:66	7	;
JUMP_STATEMENT	3188:2	3188:7	6	break DESTINATION ;
KEYWORD	3188:2	3188:2	7	break
LEAF_NODE	3188:2	3188:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	3188:7	3188:7	7	;
LABEL	3191:1	3191:23	6	case T2P_COMPRESS_JPEG :
LEAF_NODE	3191:1	3191:1	7	case
LEAF_NODE	3191:6	3191:6	7	T2P_COMPRESS_JPEG
LEAF_NODE	3191:23	3191:23	7	:
SELECTION	3192:2	3192:48	6	
KEYWORD	3192:2	3192:2	7	if
LEAF_NODE	3192:2	3192:2	8	if
LEAF_NODE	3192:5	3192:5	7	(
CONDITION	3192:6	3192:6	7	t2p -> tiff_photometric == PHOTOMETRIC_YCBCR
EXPR	3192:6	3192:29	8	t2p -> tiff_photometric == PHOTOMETRIC_YCBCR
FIELD	3192:6	3192:11	9	t2p -> tiff_photometric
LEAF_NODE	3192:6	3192:6	10	t2p
LEAF_NODE	3192:9	3192:9	10	->
LEAF_NODE	3192:11	3192:11	10	tiff_photometric
EQ_OPERATOR	3192:27	3192:27	9	==
LEAF_NODE	3192:27	3192:27	10	==
FIELD	3192:29	3192:29	9	PHOTOMETRIC_YCBCR
LEAF_NODE	3192:29	3192:29	10	PHOTOMETRIC_YCBCR
LEAF_NODE	3192:46	3192:46	7	)
STATEMENTS	3192:48	3202:2	7	
LEAF_NODE	3192:48	3192:48	8	{
STATEMENTS	3193:3	3199:3	8	
SIMPLE_DECL	3193:3	3193:26	9	uint16 hor ; hor = 0 , uint16 ver ; ver = 0 ;
INIT_DECL_LIST	3193:3	3193:3	10	uint16 hor ; hor = 0 , uint16 ver ; ver = 0
VAR_DECL	3193:3	3193:10	11	uint16 hor ; hor = 0
TYPE	3193:3	3193:3	12	uint16
TYPE_NAME	3193:3	3193:3	13	uint16
LEAF_NODE	3193:3	3193:3	14	uint16
NAME	3193:10	3193:10	12	hor
LEAF_NODE	3193:10	3193:10	13	hor
LEAF_NODE	0:0	0:0	12	;
INIT	3193:10	3193:10	12	hor = 0
ASSIGN	3193:10	3193:16	13	hor = 0
LVAL	3193:10	3193:10	14	hor
NAME	3193:10	3193:10	15	hor
LEAF_NODE	3193:10	3193:10	16	hor
ASSIGN_OP	3193:14	3193:14	14	=
LEAF_NODE	3193:14	3193:14	15	=
RVAL	3193:16	3193:16	14	0
FIELD	3193:16	3193:16	15	0
LEAF_NODE	3193:16	3193:16	16	0
LEAF_NODE	3193:17	3193:17	11	,
VAR_DECL	3193:3	3193:19	11	uint16 ver ; ver = 0
TYPE	3193:3	3193:3	12	uint16
TYPE_NAME	3193:3	3193:3	13	uint16
LEAF_NODE	3193:3	3193:3	14	uint16
NAME	3193:19	3193:19	12	ver
LEAF_NODE	3193:19	3193:19	13	ver
LEAF_NODE	0:0	0:0	12	;
INIT	3193:19	3193:19	12	ver = 0
ASSIGN	3193:19	3193:25	13	ver = 0
LVAL	3193:19	3193:19	14	ver
NAME	3193:19	3193:19	15	ver
LEAF_NODE	3193:19	3193:19	16	ver
ASSIGN_OP	3193:23	3193:23	14	=
LEAF_NODE	3193:23	3193:23	15	=
RVAL	3193:25	3193:25	14	0
FIELD	3193:25	3193:25	15	0
LEAF_NODE	3193:25	3193:25	16	0
LEAF_NODE	3193:26	3193:26	10	;
SELECTION	3194:3	3194:69	9	
KEYWORD	3194:3	3194:3	10	if
LEAF_NODE	3194:3	3194:3	11	if
LEAF_NODE	3194:6	3194:6	10	(
CONDITION	3194:7	3194:7	10	TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & hor , & ver ) != 0
EXPR	3194:7	3194:66	11	TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & hor , & ver ) != 0
FUNCTION_CALL	3194:7	3194:63	12	TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & hor , & ver )
CALLEE	3194:7	3194:7	13	TIFFGetField
LEAF_NODE	3194:7	3194:7	14	TIFFGetField
LEAF_NODE	3194:19	3194:19	13	(
ARGUMENT	3194:20	3194:20	13	input
FIELD	3194:20	3194:20	14	input
LEAF_NODE	3194:20	3194:20	15	input
LEAF_NODE	3194:25	3194:25	13	,
ARGUMENT	3194:27	3194:27	13	TIFFTAG_YCBCRSUBSAMPLING
FIELD	3194:27	3194:27	14	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	3194:27	3194:27	15	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	3194:51	3194:51	13	,
ARGUMENT	3194:53	3194:53	13	& hor
UNARY_EXPR	3194:53	3194:54	14	& hor
UNARY_OPERATOR	3194:53	3194:53	15	&
LEAF_NODE	3194:53	3194:53	16	&
FIELD	3194:54	3194:54	15	hor
LEAF_NODE	3194:54	3194:54	16	hor
LEAF_NODE	3194:57	3194:57	13	,
ARGUMENT	3194:59	3194:59	13	& ver
UNARY_EXPR	3194:59	3194:60	14	& ver
UNARY_OPERATOR	3194:59	3194:59	15	&
LEAF_NODE	3194:59	3194:59	16	&
FIELD	3194:60	3194:60	15	ver
LEAF_NODE	3194:60	3194:60	16	ver
LEAF_NODE	3194:63	3194:63	13	)
EQ_OPERATOR	3194:64	3194:64	12	!=
LEAF_NODE	3194:64	3194:64	13	!=
FIELD	3194:66	3194:66	12	0
LEAF_NODE	3194:66	3194:66	13	0
LEAF_NODE	3194:67	3194:67	10	)
STATEMENTS	3194:69	3198:3	10	
LEAF_NODE	3194:69	3194:69	11	{
STATEMENTS	3195:4	3195:4	11	
SELECTION	3195:4	3195:30	12	
KEYWORD	3195:4	3195:4	13	if
LEAF_NODE	3195:4	3195:4	14	if
LEAF_NODE	3195:7	3195:7	13	(
CONDITION	3195:8	3195:8	13	hor != 0 && ver != 0
EXPR	3195:8	3195:8	14	hor != 0 && ver != 0
AND	3195:8	3195:20	15	hor != 0 && ver != 0
EXPR	3195:8	3195:15	16	hor != 0
FIELD	3195:8	3195:8	17	hor
LEAF_NODE	3195:8	3195:8	18	hor
EQ_OPERATOR	3195:12	3195:12	17	!=
LEAF_NODE	3195:12	3195:12	18	!=
FIELD	3195:15	3195:15	17	0
LEAF_NODE	3195:15	3195:15	18	0
LEAF_NODE	3195:17	3195:17	16	&&
EXPR	3195:20	3195:27	16	ver != 0
FIELD	3195:20	3195:20	17	ver
LEAF_NODE	3195:20	3195:20	18	ver
EQ_OPERATOR	3195:24	3195:24	17	!=
LEAF_NODE	3195:24	3195:24	18	!=
FIELD	3195:27	3195:27	17	0
LEAF_NODE	3195:27	3195:27	18	0
LEAF_NODE	3195:28	3195:28	13	)
STATEMENTS	3195:30	3197:4	13	
LEAF_NODE	3195:30	3195:30	14	{
STATEMENTS	3196:5	3196:5	14	
EXPR_STATEMENT	3196:5	3196:61	15	TIFFSetField ( output , TIFFTAG_YCBCRSUBSAMPLING , hor , ver ) ;
EXPR	3196:5	3196:5	16	TIFFSetField ( output , TIFFTAG_YCBCRSUBSAMPLING , hor , ver )
FUNCTION_CALL	3196:5	3196:60	17	TIFFSetField ( output , TIFFTAG_YCBCRSUBSAMPLING , hor , ver )
CALLEE	3196:5	3196:5	18	TIFFSetField
LEAF_NODE	3196:5	3196:5	19	TIFFSetField
LEAF_NODE	3196:17	3196:17	18	(
ARGUMENT	3196:18	3196:18	18	output
FIELD	3196:18	3196:18	19	output
LEAF_NODE	3196:18	3196:18	20	output
LEAF_NODE	3196:24	3196:24	18	,
ARGUMENT	3196:26	3196:26	18	TIFFTAG_YCBCRSUBSAMPLING
FIELD	3196:26	3196:26	19	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	3196:26	3196:26	20	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	3196:50	3196:50	18	,
ARGUMENT	3196:52	3196:52	18	hor
FIELD	3196:52	3196:52	19	hor
LEAF_NODE	3196:52	3196:52	20	hor
LEAF_NODE	3196:55	3196:55	18	,
ARGUMENT	3196:57	3196:57	18	ver
FIELD	3196:57	3196:57	19	ver
LEAF_NODE	3196:57	3196:57	20	ver
LEAF_NODE	3196:60	3196:60	18	)
LEAF_NODE	3196:61	3196:61	16	;
LEAF_NODE	3197:4	3197:4	14	}
LEAF_NODE	3198:3	3198:3	11	}
SELECTION	3199:3	3199:68	9	
KEYWORD	3199:3	3199:3	10	if
LEAF_NODE	3199:3	3199:3	11	if
LEAF_NODE	3199:5	3199:5	10	(
CONDITION	3199:6	3199:6	10	TIFFGetField ( input , TIFFTAG_REFERENCEBLACKWHITE , & xfloatp ) != 0
EXPR	3199:6	3199:66	11	TIFFGetField ( input , TIFFTAG_REFERENCEBLACKWHITE , & xfloatp ) != 0
FUNCTION_CALL	3199:6	3199:63	12	TIFFGetField ( input , TIFFTAG_REFERENCEBLACKWHITE , & xfloatp )
CALLEE	3199:6	3199:6	13	TIFFGetField
LEAF_NODE	3199:6	3199:6	14	TIFFGetField
LEAF_NODE	3199:18	3199:18	13	(
ARGUMENT	3199:19	3199:19	13	input
FIELD	3199:19	3199:19	14	input
LEAF_NODE	3199:19	3199:19	15	input
LEAF_NODE	3199:24	3199:24	13	,
ARGUMENT	3199:26	3199:26	13	TIFFTAG_REFERENCEBLACKWHITE
FIELD	3199:26	3199:26	14	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	3199:26	3199:26	15	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	3199:53	3199:53	13	,
ARGUMENT	3199:55	3199:55	13	& xfloatp
UNARY_EXPR	3199:55	3199:56	14	& xfloatp
UNARY_OPERATOR	3199:55	3199:55	15	&
LEAF_NODE	3199:55	3199:55	16	&
FIELD	3199:56	3199:56	15	xfloatp
LEAF_NODE	3199:56	3199:56	16	xfloatp
LEAF_NODE	3199:63	3199:63	13	)
EQ_OPERATOR	3199:64	3199:64	12	!=
LEAF_NODE	3199:64	3199:64	13	!=
FIELD	3199:66	3199:66	12	0
LEAF_NODE	3199:66	3199:66	13	0
LEAF_NODE	3199:67	3199:67	10	)
STATEMENTS	3199:68	3201:3	10	
LEAF_NODE	3199:68	3199:68	11	{
STATEMENTS	3200:4	3200:4	11	
EXPR_STATEMENT	3200:4	3200:62	12	TIFFSetField ( output , TIFFTAG_REFERENCEBLACKWHITE , xfloatp ) ;
EXPR	3200:4	3200:4	13	TIFFSetField ( output , TIFFTAG_REFERENCEBLACKWHITE , xfloatp )
FUNCTION_CALL	3200:4	3200:61	14	TIFFSetField ( output , TIFFTAG_REFERENCEBLACKWHITE , xfloatp )
CALLEE	3200:4	3200:4	15	TIFFSetField
LEAF_NODE	3200:4	3200:4	16	TIFFSetField
LEAF_NODE	3200:16	3200:16	15	(
ARGUMENT	3200:17	3200:17	15	output
FIELD	3200:17	3200:17	16	output
LEAF_NODE	3200:17	3200:17	17	output
LEAF_NODE	3200:23	3200:23	15	,
ARGUMENT	3200:25	3200:25	15	TIFFTAG_REFERENCEBLACKWHITE
FIELD	3200:25	3200:25	16	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	3200:25	3200:25	17	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	3200:52	3200:52	15	,
ARGUMENT	3200:54	3200:54	15	xfloatp
FIELD	3200:54	3200:54	16	xfloatp
LEAF_NODE	3200:54	3200:54	17	xfloatp
LEAF_NODE	3200:61	3200:61	15	)
LEAF_NODE	3200:62	3200:62	13	;
LEAF_NODE	3201:3	3201:3	11	}
LEAF_NODE	3202:2	3202:2	8	}
EXPR_STATEMENT	3203:2	3203:61	6	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_JPEG ) ;
EXPR	3203:2	3203:2	7	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_JPEG )
FUNCTION_CALL	3203:2	3203:60	8	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_JPEG )
CALLEE	3203:2	3203:2	9	TIFFSetField
LEAF_NODE	3203:2	3203:2	10	TIFFSetField
LEAF_NODE	3203:14	3203:14	9	(
ARGUMENT	3203:15	3203:15	9	output
FIELD	3203:15	3203:15	10	output
LEAF_NODE	3203:15	3203:15	11	output
LEAF_NODE	3203:21	3203:21	9	,
ARGUMENT	3203:23	3203:23	9	TIFFTAG_COMPRESSION
FIELD	3203:23	3203:23	10	TIFFTAG_COMPRESSION
LEAF_NODE	3203:23	3203:23	11	TIFFTAG_COMPRESSION
LEAF_NODE	3203:42	3203:42	9	,
ARGUMENT	3203:44	3203:44	9	COMPRESSION_JPEG
FIELD	3203:44	3203:44	10	COMPRESSION_JPEG
LEAF_NODE	3203:44	3203:44	11	COMPRESSION_JPEG
LEAF_NODE	3203:60	3203:60	9	)
LEAF_NODE	3203:61	3203:61	7	;
EXPR_STATEMENT	3204:2	3204:49	6	TIFFSetField ( output , TIFFTAG_JPEGTABLESMODE , 0 ) ;
EXPR	3204:2	3204:2	7	TIFFSetField ( output , TIFFTAG_JPEGTABLESMODE , 0 )
FUNCTION_CALL	3204:2	3204:48	8	TIFFSetField ( output , TIFFTAG_JPEGTABLESMODE , 0 )
CALLEE	3204:2	3204:2	9	TIFFSetField
LEAF_NODE	3204:2	3204:2	10	TIFFSetField
LEAF_NODE	3204:14	3204:14	9	(
ARGUMENT	3204:15	3204:15	9	output
FIELD	3204:15	3204:15	10	output
LEAF_NODE	3204:15	3204:15	11	output
LEAF_NODE	3204:21	3204:21	9	,
ARGUMENT	3204:23	3204:23	9	TIFFTAG_JPEGTABLESMODE
FIELD	3204:23	3204:23	10	TIFFTAG_JPEGTABLESMODE
LEAF_NODE	3204:23	3204:23	11	TIFFTAG_JPEGTABLESMODE
LEAF_NODE	3204:45	3204:45	9	,
ARGUMENT	3204:47	3204:47	9	0
FIELD	3204:47	3204:47	10	0
LEAF_NODE	3204:47	3204:47	11	0
LEAF_NODE	3204:48	3204:48	9	)
LEAF_NODE	3204:49	3204:49	7	;
SELECTION	3205:2	3205:53	6	
KEYWORD	3205:2	3205:2	7	if
LEAF_NODE	3205:2	3205:2	8	if
LEAF_NODE	3205:4	3205:4	7	(
CONDITION	3205:5	3205:5	7	t2p -> pdf_colorspace & ( T2P_CS_RGB | T2P_CS_LAB )
EXPR	3205:5	3205:51	8	t2p -> pdf_colorspace & ( T2P_CS_RGB | T2P_CS_LAB )
FIELD	3205:5	3205:10	9	t2p -> pdf_colorspace
LEAF_NODE	3205:5	3205:5	10	t2p
LEAF_NODE	3205:8	3205:8	10	->
LEAF_NODE	3205:10	3205:10	10	pdf_colorspace
LEAF_NODE	3205:25	3205:25	9	&
LEAF_NODE	3205:27	3205:27	9	(
BIT_OR	3205:28	3205:41	9	T2P_CS_RGB | T2P_CS_LAB
BIT_OR_ELEM	3205:28	3205:28	10	T2P_CS_RGB
FIELD	3205:28	3205:28	11	T2P_CS_RGB
LEAF_NODE	3205:28	3205:28	12	T2P_CS_RGB
LEAF_NODE	3205:39	3205:39	10	|
BIT_OR_ELEM	3205:41	3205:41	10	T2P_CS_LAB
FIELD	3205:41	3205:41	11	T2P_CS_LAB
LEAF_NODE	3205:41	3205:41	12	T2P_CS_LAB
LEAF_NODE	3205:51	3205:51	9	)
LEAF_NODE	3205:52	3205:52	7	)
STATEMENTS	3205:53	3212:2	7	
LEAF_NODE	3205:53	3205:53	8	{
STATEMENTS	3206:3	3209:5	8	
EXPR_STATEMENT	3206:3	3206:63	9	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR ) ;
EXPR	3206:3	3206:3	10	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
FUNCTION_CALL	3206:3	3206:62	11	TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
CALLEE	3206:3	3206:3	12	TIFFSetField
LEAF_NODE	3206:3	3206:3	13	TIFFSetField
LEAF_NODE	3206:15	3206:15	12	(
ARGUMENT	3206:16	3206:16	12	output
FIELD	3206:16	3206:16	13	output
LEAF_NODE	3206:16	3206:16	14	output
LEAF_NODE	3206:22	3206:22	12	,
ARGUMENT	3206:24	3206:24	12	TIFFTAG_PHOTOMETRIC
FIELD	3206:24	3206:24	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	3206:24	3206:24	14	TIFFTAG_PHOTOMETRIC
LEAF_NODE	3206:43	3206:43	12	,
ARGUMENT	3206:45	3206:45	12	PHOTOMETRIC_YCBCR
FIELD	3206:45	3206:45	13	PHOTOMETRIC_YCBCR
LEAF_NODE	3206:45	3206:45	14	PHOTOMETRIC_YCBCR
LEAF_NODE	3206:62	3206:62	12	)
LEAF_NODE	3206:63	3206:63	10	;
SELECTION	3207:3	3207:49	9	
KEYWORD	3207:3	3207:3	10	if
LEAF_NODE	3207:3	3207:3	11	if
LEAF_NODE	3207:5	3207:5	10	(
CONDITION	3207:6	3207:6	10	t2p -> tiff_photometric != PHOTOMETRIC_YCBCR
EXPR	3207:6	3207:31	11	t2p -> tiff_photometric != PHOTOMETRIC_YCBCR
FIELD	3207:6	3207:11	12	t2p -> tiff_photometric
LEAF_NODE	3207:6	3207:6	13	t2p
LEAF_NODE	3207:9	3207:9	13	->
LEAF_NODE	3207:11	3207:11	13	tiff_photometric
EQ_OPERATOR	3207:28	3207:28	12	!=
LEAF_NODE	3207:28	3207:28	13	!=
FIELD	3207:31	3207:31	12	PHOTOMETRIC_YCBCR
LEAF_NODE	3207:31	3207:31	13	PHOTOMETRIC_YCBCR
LEAF_NODE	3207:48	3207:48	10	)
STATEMENTS	3207:49	3209:3	10	
LEAF_NODE	3207:49	3207:49	11	{
STATEMENTS	3208:4	3208:4	11	
EXPR_STATEMENT	3208:4	3208:66	12	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB ) ;
EXPR	3208:4	3208:4	13	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
FUNCTION_CALL	3208:4	3208:65	14	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
CALLEE	3208:4	3208:4	15	TIFFSetField
LEAF_NODE	3208:4	3208:4	16	TIFFSetField
LEAF_NODE	3208:16	3208:16	15	(
ARGUMENT	3208:17	3208:17	15	output
FIELD	3208:17	3208:17	16	output
LEAF_NODE	3208:17	3208:17	17	output
LEAF_NODE	3208:23	3208:23	15	,
ARGUMENT	3208:25	3208:25	15	TIFFTAG_JPEGCOLORMODE
FIELD	3208:25	3208:25	16	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	3208:25	3208:25	17	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	3208:46	3208:46	15	,
ARGUMENT	3208:48	3208:48	15	JPEGCOLORMODE_RGB
FIELD	3208:48	3208:48	16	JPEGCOLORMODE_RGB
LEAF_NODE	3208:48	3208:48	17	JPEGCOLORMODE_RGB
LEAF_NODE	3208:65	3208:65	15	)
LEAF_NODE	3208:66	3208:66	13	;
LEAF_NODE	3209:3	3209:3	11	}
SELECTION	3209:5	3209:10	9	
KEYWORD	3209:5	3209:5	10	else
LEAF_NODE	3209:5	3209:5	11	else
STATEMENTS	3209:10	3211:3	10	
LEAF_NODE	3209:10	3209:10	11	{
STATEMENTS	3210:4	3210:4	11	
EXPR_STATEMENT	3210:4	3210:66	12	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RAW ) ;
EXPR	3210:4	3210:4	13	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RAW )
FUNCTION_CALL	3210:4	3210:65	14	TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RAW )
CALLEE	3210:4	3210:4	15	TIFFSetField
LEAF_NODE	3210:4	3210:4	16	TIFFSetField
LEAF_NODE	3210:16	3210:16	15	(
ARGUMENT	3210:17	3210:17	15	output
FIELD	3210:17	3210:17	16	output
LEAF_NODE	3210:17	3210:17	17	output
LEAF_NODE	3210:23	3210:23	15	,
ARGUMENT	3210:25	3210:25	15	TIFFTAG_JPEGCOLORMODE
FIELD	3210:25	3210:25	16	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	3210:25	3210:25	17	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	3210:46	3210:46	15	,
ARGUMENT	3210:48	3210:48	15	JPEGCOLORMODE_RAW
FIELD	3210:48	3210:48	16	JPEGCOLORMODE_RAW
LEAF_NODE	3210:48	3210:48	17	JPEGCOLORMODE_RAW
LEAF_NODE	3210:65	3210:65	15	)
LEAF_NODE	3210:66	3210:66	13	;
LEAF_NODE	3211:3	3211:3	11	}
LEAF_NODE	3212:2	3212:2	8	}
SELECTION	3213:2	3213:39	6	
KEYWORD	3213:2	3213:2	7	if
LEAF_NODE	3213:2	3213:2	8	if
LEAF_NODE	3213:4	3213:4	7	(
CONDITION	3213:5	3213:5	7	t2p -> pdf_colorspace & T2P_CS_GRAY
EXPR	3213:5	3213:27	8	t2p -> pdf_colorspace & T2P_CS_GRAY
FIELD	3213:5	3213:10	9	t2p -> pdf_colorspace
LEAF_NODE	3213:5	3213:5	10	t2p
LEAF_NODE	3213:8	3213:8	10	->
LEAF_NODE	3213:10	3213:10	10	pdf_colorspace
LEAF_NODE	3213:25	3213:25	9	&
FIELD	3213:27	3213:27	9	T2P_CS_GRAY
LEAF_NODE	3213:27	3213:27	10	T2P_CS_GRAY
LEAF_NODE	3213:38	3213:38	7	)
STATEMENTS	3213:39	3215:2	7	
LEAF_NODE	3213:39	3213:39	8	{
STATEMENTS	3214:3	3214:3	8	
EXPR_STATEMENT	3214:3	3214:10	9	( void ) 0 ;
EXPR	3214:3	3214:9	10	( void ) 0
LEAF_NODE	3214:3	3214:3	11	(
TYPE_NAME	3214:4	3214:4	11	void
LEAF_NODE	3214:4	3214:4	12	void
LEAF_NODE	3214:8	3214:8	11	)
FIELD	3214:9	3214:9	11	0
LEAF_NODE	3214:9	3214:9	12	0
LEAF_NODE	3214:10	3214:10	10	;
LEAF_NODE	3215:2	3215:2	8	}
SELECTION	3216:2	3216:39	6	
KEYWORD	3216:2	3216:2	7	if
LEAF_NODE	3216:2	3216:2	8	if
LEAF_NODE	3216:4	3216:4	7	(
CONDITION	3216:5	3216:5	7	t2p -> pdf_colorspace & T2P_CS_CMYK
EXPR	3216:5	3216:27	8	t2p -> pdf_colorspace & T2P_CS_CMYK
FIELD	3216:5	3216:10	9	t2p -> pdf_colorspace
LEAF_NODE	3216:5	3216:5	10	t2p
LEAF_NODE	3216:8	3216:8	10	->
LEAF_NODE	3216:10	3216:10	10	pdf_colorspace
LEAF_NODE	3216:25	3216:25	9	&
FIELD	3216:27	3216:27	9	T2P_CS_CMYK
LEAF_NODE	3216:27	3216:27	10	T2P_CS_CMYK
LEAF_NODE	3216:38	3216:38	7	)
STATEMENTS	3216:39	3218:2	7	
LEAF_NODE	3216:39	3216:39	8	{
STATEMENTS	3217:3	3217:3	8	
EXPR_STATEMENT	3217:3	3217:10	9	( void ) 0 ;
EXPR	3217:3	3217:9	10	( void ) 0
LEAF_NODE	3217:3	3217:3	11	(
TYPE_NAME	3217:4	3217:4	11	void
LEAF_NODE	3217:4	3217:4	12	void
LEAF_NODE	3217:8	3217:8	11	)
FIELD	3217:9	3217:9	11	0
LEAF_NODE	3217:9	3217:9	12	0
LEAF_NODE	3217:10	3217:10	10	;
LEAF_NODE	3218:2	3218:2	8	}
SELECTION	3219:2	3219:45	6	
KEYWORD	3219:2	3219:2	7	if
LEAF_NODE	3219:2	3219:2	8	if
LEAF_NODE	3219:4	3219:4	7	(
CONDITION	3219:5	3219:5	7	t2p -> pdf_defaultcompressionquality != 0
EXPR	3219:5	3219:43	8	t2p -> pdf_defaultcompressionquality != 0
FIELD	3219:5	3219:10	9	t2p -> pdf_defaultcompressionquality
LEAF_NODE	3219:5	3219:5	10	t2p
LEAF_NODE	3219:8	3219:8	10	->
LEAF_NODE	3219:10	3219:10	10	pdf_defaultcompressionquality
EQ_OPERATOR	3219:40	3219:40	9	!=
LEAF_NODE	3219:40	3219:40	10	!=
FIELD	3219:43	3219:43	9	0
LEAF_NODE	3219:43	3219:43	10	0
LEAF_NODE	3219:44	3219:44	7	)
STATEMENTS	3219:45	3223:2	7	
LEAF_NODE	3219:45	3219:45	8	{
STATEMENTS	3220:3	3220:3	8	
EXPR_STATEMENT	3220:3	3222:39	9	TIFFSetField ( output , TIFFTAG_JPEGQUALITY , t2p -> pdf_defaultcompressionquality ) ;
EXPR	3220:3	3220:3	10	TIFFSetField ( output , TIFFTAG_JPEGQUALITY , t2p -> pdf_defaultcompressionquality )
FUNCTION_CALL	3220:3	3222:38	11	TIFFSetField ( output , TIFFTAG_JPEGQUALITY , t2p -> pdf_defaultcompressionquality )
CALLEE	3220:3	3220:3	12	TIFFSetField
LEAF_NODE	3220:3	3220:3	13	TIFFSetField
LEAF_NODE	3220:15	3220:15	12	(
ARGUMENT	3220:16	3220:16	12	output
FIELD	3220:16	3220:16	13	output
LEAF_NODE	3220:16	3220:16	14	output
LEAF_NODE	3220:22	3220:22	12	,
ARGUMENT	3221:4	3221:4	12	TIFFTAG_JPEGQUALITY
FIELD	3221:4	3221:4	13	TIFFTAG_JPEGQUALITY
LEAF_NODE	3221:4	3221:4	14	TIFFTAG_JPEGQUALITY
LEAF_NODE	3221:23	3221:23	12	,
ARGUMENT	3222:4	3222:4	12	t2p -> pdf_defaultcompressionquality
FIELD	3222:4	3222:9	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	3222:4	3222:4	14	t2p
LEAF_NODE	3222:7	3222:7	14	->
LEAF_NODE	3222:9	3222:9	14	pdf_defaultcompressionquality
LEAF_NODE	3222:38	3222:38	12	)
LEAF_NODE	3222:39	3222:39	10	;
LEAF_NODE	3223:2	3223:2	8	}
JUMP_STATEMENT	3224:2	3224:7	6	break DESTINATION ;
KEYWORD	3224:2	3224:2	7	break
LEAF_NODE	3224:2	3224:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	3224:7	3224:7	7	;
LABEL	3227:1	3227:22	6	case T2P_COMPRESS_ZIP :
LEAF_NODE	3227:1	3227:1	7	case
LEAF_NODE	3227:6	3227:6	7	T2P_COMPRESS_ZIP
LEAF_NODE	3227:22	3227:22	7	:
EXPR_STATEMENT	3228:2	3228:64	6	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_DEFLATE ) ;
EXPR	3228:2	3228:2	7	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_DEFLATE )
FUNCTION_CALL	3228:2	3228:63	8	TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_DEFLATE )
CALLEE	3228:2	3228:2	9	TIFFSetField
LEAF_NODE	3228:2	3228:2	10	TIFFSetField
LEAF_NODE	3228:14	3228:14	9	(
ARGUMENT	3228:15	3228:15	9	output
FIELD	3228:15	3228:15	10	output
LEAF_NODE	3228:15	3228:15	11	output
LEAF_NODE	3228:21	3228:21	9	,
ARGUMENT	3228:23	3228:23	9	TIFFTAG_COMPRESSION
FIELD	3228:23	3228:23	10	TIFFTAG_COMPRESSION
LEAF_NODE	3228:23	3228:23	11	TIFFTAG_COMPRESSION
LEAF_NODE	3228:42	3228:42	9	,
ARGUMENT	3228:44	3228:44	9	COMPRESSION_DEFLATE
FIELD	3228:44	3228:44	10	COMPRESSION_DEFLATE
LEAF_NODE	3228:44	3228:44	11	COMPRESSION_DEFLATE
LEAF_NODE	3228:63	3228:63	9	)
LEAF_NODE	3228:64	3228:64	7	;
SELECTION	3229:2	3229:49	6	
KEYWORD	3229:2	3229:2	7	if
LEAF_NODE	3229:2	3229:2	8	if
LEAF_NODE	3229:4	3229:4	7	(
CONDITION	3229:5	3229:5	7	t2p -> pdf_defaultcompressionquality % 100 != 0
EXPR	3229:5	3229:47	8	t2p -> pdf_defaultcompressionquality % 100 != 0
FIELD	3229:5	3229:10	9	t2p -> pdf_defaultcompressionquality
LEAF_NODE	3229:5	3229:5	10	t2p
LEAF_NODE	3229:8	3229:8	10	->
LEAF_NODE	3229:10	3229:10	10	pdf_defaultcompressionquality
LEAF_NODE	3229:39	3229:39	9	%
FIELD	3229:40	3229:40	9	100
LEAF_NODE	3229:40	3229:40	10	100
EQ_OPERATOR	3229:44	3229:44	9	!=
LEAF_NODE	3229:44	3229:44	10	!=
FIELD	3229:47	3229:47	9	0
LEAF_NODE	3229:47	3229:47	10	0
LEAF_NODE	3229:48	3229:48	7	)
STATEMENTS	3229:49	3233:2	7	
LEAF_NODE	3229:49	3229:49	8	{
STATEMENTS	3230:3	3230:3	8	
EXPR_STATEMENT	3230:3	3232:45	9	TIFFSetField ( output , TIFFTAG_PREDICTOR , t2p -> pdf_defaultcompressionquality % 100 ) ;
EXPR	3230:3	3230:3	10	TIFFSetField ( output , TIFFTAG_PREDICTOR , t2p -> pdf_defaultcompressionquality % 100 )
FUNCTION_CALL	3230:3	3232:44	11	TIFFSetField ( output , TIFFTAG_PREDICTOR , t2p -> pdf_defaultcompressionquality % 100 )
CALLEE	3230:3	3230:3	12	TIFFSetField
LEAF_NODE	3230:3	3230:3	13	TIFFSetField
LEAF_NODE	3230:15	3230:15	12	(
ARGUMENT	3230:16	3230:16	12	output
FIELD	3230:16	3230:16	13	output
LEAF_NODE	3230:16	3230:16	14	output
LEAF_NODE	3230:22	3230:22	12	,
ARGUMENT	3231:4	3231:4	12	TIFFTAG_PREDICTOR
FIELD	3231:4	3231:4	13	TIFFTAG_PREDICTOR
LEAF_NODE	3231:4	3231:4	14	TIFFTAG_PREDICTOR
LEAF_NODE	3231:21	3231:21	12	,
ARGUMENT	3232:4	3232:41	12	t2p -> pdf_defaultcompressionquality % 100
FIELD	3232:4	3232:9	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	3232:4	3232:4	14	t2p
LEAF_NODE	3232:7	3232:7	14	->
LEAF_NODE	3232:9	3232:9	14	pdf_defaultcompressionquality
LEAF_NODE	3232:39	3232:39	13	%
FIELD	3232:41	3232:41	13	100
LEAF_NODE	3232:41	3232:41	14	100
LEAF_NODE	3232:44	3232:44	12	)
LEAF_NODE	3232:45	3232:45	10	;
LEAF_NODE	3233:2	3233:2	8	}
SELECTION	3234:2	3234:49	6	
KEYWORD	3234:2	3234:2	7	if
LEAF_NODE	3234:2	3234:2	8	if
LEAF_NODE	3234:4	3234:4	7	(
CONDITION	3234:5	3234:5	7	t2p -> pdf_defaultcompressionquality / 100 != 0
EXPR	3234:5	3234:47	8	t2p -> pdf_defaultcompressionquality / 100 != 0
FIELD	3234:5	3234:10	9	t2p -> pdf_defaultcompressionquality
LEAF_NODE	3234:5	3234:5	10	t2p
LEAF_NODE	3234:8	3234:8	10	->
LEAF_NODE	3234:10	3234:10	10	pdf_defaultcompressionquality
LEAF_NODE	3234:39	3234:39	9	/
FIELD	3234:40	3234:40	9	100
LEAF_NODE	3234:40	3234:40	10	100
EQ_OPERATOR	3234:44	3234:44	9	!=
LEAF_NODE	3234:44	3234:44	10	!=
FIELD	3234:47	3234:47	9	0
LEAF_NODE	3234:47	3234:47	10	0
LEAF_NODE	3234:48	3234:48	7	)
STATEMENTS	3234:49	3238:2	7	
LEAF_NODE	3234:49	3234:49	8	{
STATEMENTS	3235:3	3235:3	8	
EXPR_STATEMENT	3235:3	3237:47	9	TIFFSetField ( output , TIFFTAG_ZIPQUALITY , ( t2p -> pdf_defaultcompressionquality / 100 ) ) ;
EXPR	3235:3	3235:3	10	TIFFSetField ( output , TIFFTAG_ZIPQUALITY , ( t2p -> pdf_defaultcompressionquality / 100 ) )
FUNCTION_CALL	3235:3	3237:46	11	TIFFSetField ( output , TIFFTAG_ZIPQUALITY , ( t2p -> pdf_defaultcompressionquality / 100 ) )
CALLEE	3235:3	3235:3	12	TIFFSetField
LEAF_NODE	3235:3	3235:3	13	TIFFSetField
LEAF_NODE	3235:15	3235:15	12	(
ARGUMENT	3235:16	3235:16	12	output
FIELD	3235:16	3235:16	13	output
LEAF_NODE	3235:16	3235:16	14	output
LEAF_NODE	3235:22	3235:22	12	,
ARGUMENT	3236:4	3236:4	12	TIFFTAG_ZIPQUALITY
FIELD	3236:4	3236:4	13	TIFFTAG_ZIPQUALITY
LEAF_NODE	3236:4	3236:4	14	TIFFTAG_ZIPQUALITY
LEAF_NODE	3236:22	3236:22	12	,
ARGUMENT	3237:4	3237:45	12	( t2p -> pdf_defaultcompressionquality / 100 )
LEAF_NODE	3237:4	3237:4	13	(
FIELD	3237:5	3237:10	13	t2p -> pdf_defaultcompressionquality
LEAF_NODE	3237:5	3237:5	14	t2p
LEAF_NODE	3237:8	3237:8	14	->
LEAF_NODE	3237:10	3237:10	14	pdf_defaultcompressionquality
LEAF_NODE	3237:40	3237:40	13	/
FIELD	3237:42	3237:42	13	100
LEAF_NODE	3237:42	3237:42	14	100
LEAF_NODE	3237:45	3237:45	13	)
LEAF_NODE	3237:46	3237:46	12	)
LEAF_NODE	3237:47	3237:47	10	;
LEAF_NODE	3238:2	3238:2	8	}
JUMP_STATEMENT	3239:2	3239:7	6	break DESTINATION ;
KEYWORD	3239:2	3239:2	7	break
LEAF_NODE	3239:2	3239:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	3239:7	3239:7	7	;
LABEL	3241:1	3241:8	6	default :
LEAF_NODE	3241:1	3241:1	7	default
LEAF_NODE	3241:8	3241:8	7	:
JUMP_STATEMENT	3242:2	3242:7	6	break DESTINATION ;
KEYWORD	3242:2	3242:2	7	break
LEAF_NODE	3242:2	3242:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	3242:7	3242:7	7	;
LEAF_NODE	3243:1	3243:1	5	}
EXPR_STATEMENT	3245:1	3245:19	3	t2p_enable ( output ) ;
EXPR	3245:1	3245:1	4	t2p_enable ( output )
FUNCTION_CALL	3245:1	3245:18	5	t2p_enable ( output )
CALLEE	3245:1	3245:1	6	t2p_enable
LEAF_NODE	3245:1	3245:1	7	t2p_enable
LEAF_NODE	3245:11	3245:11	6	(
ARGUMENT	3245:12	3245:12	6	output
FIELD	3245:12	3245:12	7	output
LEAF_NODE	3245:12	3245:12	8	output
LEAF_NODE	3245:18	3245:18	6	)
LEAF_NODE	3245:19	3245:19	4	;
EXPR_STATEMENT	3246:1	3246:23	3	t2p -> outputwritten = 0 ;
EXPR	3246:1	3246:1	4	t2p -> outputwritten = 0
ASSIGN	3246:1	3246:22	5	t2p -> outputwritten = 0
LVAL	3246:1	3246:1	6	t2p -> outputwritten
FIELD	3246:1	3246:6	7	t2p -> outputwritten
LEAF_NODE	3246:1	3246:1	8	t2p
LEAF_NODE	3246:4	3246:4	8	->
LEAF_NODE	3246:6	3246:6	8	outputwritten
ASSIGN_OP	3246:20	3246:20	6	=
LEAF_NODE	3246:20	3246:20	7	=
RVAL	3246:22	3246:22	6	0
FIELD	3246:22	3246:22	7	0
LEAF_NODE	3246:22	3246:22	8	0
LEAF_NODE	3246:23	3246:23	4	;
EXPR_STATEMENT	3247:1	3248:32	3	bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , TIFFStripSize ( output ) ) ;
EXPR	3247:1	3247:1	4	bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , TIFFStripSize ( output ) )
ASSIGN	3247:1	3247:16	5	bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , TIFFStripSize ( output ) )
LVAL	3247:1	3247:1	6	bufferoffset
FIELD	3247:1	3247:1	7	bufferoffset
LEAF_NODE	3247:1	3247:1	8	bufferoffset
ASSIGN_OP	3247:14	3247:14	6	=
LEAF_NODE	3247:14	3247:14	7	=
RVAL	3247:16	3247:16	6	TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , TIFFStripSize ( output ) )
FUNCTION_CALL	3247:16	3248:31	7	TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , buffer , TIFFStripSize ( output ) )
CALLEE	3247:16	3247:16	8	TIFFWriteEncodedStrip
LEAF_NODE	3247:16	3247:16	9	TIFFWriteEncodedStrip
LEAF_NODE	3247:37	3247:37	8	(
ARGUMENT	3247:38	3247:38	8	output
FIELD	3247:38	3247:38	9	output
LEAF_NODE	3247:38	3247:38	10	output
LEAF_NODE	3247:44	3247:44	8	,
ARGUMENT	3247:46	3247:57	8	( tstrip_t ) 0
LEAF_NODE	3247:46	3247:46	9	(
TYPE_NAME	3247:47	3247:47	9	tstrip_t
LEAF_NODE	3247:47	3247:47	10	tstrip_t
LEAF_NODE	3247:55	3247:55	9	)
FIELD	3247:57	3247:57	9	0
LEAF_NODE	3247:57	3247:57	10	0
LEAF_NODE	3247:58	3247:58	8	,
ARGUMENT	3247:60	3247:60	8	buffer
FIELD	3247:60	3247:60	9	buffer
LEAF_NODE	3247:60	3247:60	10	buffer
LEAF_NODE	3247:66	3247:66	8	,
ARGUMENT	3248:10	3248:10	8	TIFFStripSize ( output )
FUNCTION_CALL	3248:10	3248:30	9	TIFFStripSize ( output )
CALLEE	3248:10	3248:10	10	TIFFStripSize
LEAF_NODE	3248:10	3248:10	11	TIFFStripSize
LEAF_NODE	3248:23	3248:23	10	(
ARGUMENT	3248:24	3248:24	10	output
FIELD	3248:24	3248:24	11	output
LEAF_NODE	3248:24	3248:24	12	output
LEAF_NODE	3248:30	3248:30	10	)
LEAF_NODE	3248:31	3248:31	8	)
LEAF_NODE	3248:32	3248:32	4	;
SELECTION	3249:1	3249:21	3	
KEYWORD	3249:1	3249:1	4	if
LEAF_NODE	3249:1	3249:1	5	if
LEAF_NODE	3249:4	3249:4	4	(
CONDITION	3249:5	3249:5	4	buffer != NULL
EXPR	3249:5	3249:15	5	buffer != NULL
FIELD	3249:5	3249:5	6	buffer
LEAF_NODE	3249:5	3249:5	7	buffer
EQ_OPERATOR	3249:12	3249:12	6	!=
LEAF_NODE	3249:12	3249:12	7	!=
FIELD	3249:15	3249:15	6	NULL
LEAF_NODE	3249:15	3249:15	7	NULL
LEAF_NODE	3249:19	3249:19	4	)
STATEMENTS	3249:21	3252:1	4	
LEAF_NODE	3249:21	3249:21	5	{
STATEMENTS	3250:2	3251:2	5	
EXPR_STATEMENT	3250:2	3250:19	6	_TIFFfree ( buffer ) ;
EXPR	3250:2	3250:2	7	_TIFFfree ( buffer )
FUNCTION_CALL	3250:2	3250:18	8	_TIFFfree ( buffer )
CALLEE	3250:2	3250:2	9	_TIFFfree
LEAF_NODE	3250:2	3250:2	10	_TIFFfree
LEAF_NODE	3250:11	3250:11	9	(
ARGUMENT	3250:12	3250:12	9	buffer
FIELD	3250:12	3250:12	10	buffer
LEAF_NODE	3250:12	3250:12	11	buffer
LEAF_NODE	3250:18	3250:18	9	)
LEAF_NODE	3250:19	3250:19	7	;
EXPR_STATEMENT	3251:2	3251:15	6	buffer = NULL ;
EXPR	3251:2	3251:2	7	buffer = NULL
ASSIGN	3251:2	3251:11	8	buffer = NULL
LVAL	3251:2	3251:2	9	buffer
FIELD	3251:2	3251:2	10	buffer
LEAF_NODE	3251:2	3251:2	11	buffer
ASSIGN_OP	3251:9	3251:9	9	=
LEAF_NODE	3251:9	3251:9	10	=
RVAL	3251:11	3251:11	9	NULL
FIELD	3251:11	3251:11	10	NULL
LEAF_NODE	3251:11	3251:11	11	NULL
LEAF_NODE	3251:15	3251:15	7	;
LEAF_NODE	3252:1	3252:1	5	}
SELECTION	3253:1	3253:25	3	
KEYWORD	3253:1	3253:1	4	if
LEAF_NODE	3253:1	3253:1	5	if
LEAF_NODE	3253:4	3253:4	4	(
CONDITION	3253:5	3253:5	4	bufferoffset == - 1
EXPR	3253:5	3253:21	5	bufferoffset == - 1
FIELD	3253:5	3253:5	6	bufferoffset
LEAF_NODE	3253:5	3253:5	7	bufferoffset
EQ_OPERATOR	3253:18	3253:18	6	==
LEAF_NODE	3253:18	3253:18	7	==
UNARY_EXPR	3253:21	3253:22	6	- 1
UNARY_OPERATOR	3253:21	3253:21	7	-
LEAF_NODE	3253:21	3253:21	8	-
FIELD	3253:22	3253:22	7	1
LEAF_NODE	3253:22	3253:22	8	1
LEAF_NODE	3253:23	3253:23	4	)
STATEMENTS	3253:25	3259:1	4	
LEAF_NODE	3253:25	3253:25	5	{
STATEMENTS	3254:2	3258:2	5	
EXPR_STATEMENT	3254:2	3256:26	6	TIFFError ( TIFF2PDF_MODULE , "Error writing encoded tile to output PDF %s" , TIFFFileName ( output ) ) ;
EXPR	3254:2	3254:2	7	TIFFError ( TIFF2PDF_MODULE , "Error writing encoded tile to output PDF %s" , TIFFFileName ( output ) )
FUNCTION_CALL	3254:2	3256:25	8	TIFFError ( TIFF2PDF_MODULE , "Error writing encoded tile to output PDF %s" , TIFFFileName ( output ) )
CALLEE	3254:2	3254:2	9	TIFFError
LEAF_NODE	3254:2	3254:2	10	TIFFError
LEAF_NODE	3254:11	3254:11	9	(
ARGUMENT	3254:12	3254:12	9	TIFF2PDF_MODULE
FIELD	3254:12	3254:12	10	TIFF2PDF_MODULE
LEAF_NODE	3254:12	3254:12	11	TIFF2PDF_MODULE
LEAF_NODE	3254:27	3254:27	9	,
ARGUMENT	3255:5	3255:5	9	"Error writing encoded tile to output PDF %s"
FIELD	3255:5	3255:5	10	"Error writing encoded tile to output PDF %s"
LEAF_NODE	3255:5	3255:5	11	"Error writing encoded tile to output PDF %s"
LEAF_NODE	3255:50	3255:50	9	,
ARGUMENT	3256:5	3256:5	9	TIFFFileName ( output )
FUNCTION_CALL	3256:5	3256:24	10	TIFFFileName ( output )
CALLEE	3256:5	3256:5	11	TIFFFileName
LEAF_NODE	3256:5	3256:5	12	TIFFFileName
LEAF_NODE	3256:17	3256:17	11	(
ARGUMENT	3256:18	3256:18	11	output
FIELD	3256:18	3256:18	12	output
LEAF_NODE	3256:18	3256:18	13	output
LEAF_NODE	3256:24	3256:24	11	)
LEAF_NODE	3256:25	3256:25	9	)
LEAF_NODE	3256:26	3256:26	7	;
EXPR_STATEMENT	3257:2	3257:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3257:2	3257:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3257:2	3257:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3257:2	3257:2	9	t2p -> t2p_error
FIELD	3257:2	3257:7	10	t2p -> t2p_error
LEAF_NODE	3257:2	3257:2	11	t2p
LEAF_NODE	3257:5	3257:5	11	->
LEAF_NODE	3257:7	3257:7	11	t2p_error
ASSIGN_OP	3257:17	3257:17	9	=
LEAF_NODE	3257:17	3257:17	10	=
RVAL	3257:19	3257:19	9	T2P_ERR_ERROR
FIELD	3257:19	3257:19	10	T2P_ERR_ERROR
LEAF_NODE	3257:19	3257:19	11	T2P_ERR_ERROR
LEAF_NODE	3257:32	3257:32	7	;
JUMP_STATEMENT	3258:2	3258:11	6	return ( 0 ) ;
KEYWORD	3258:2	3258:2	7	return
LEAF_NODE	3258:2	3258:2	8	return
DESTINATION	3258:8	3258:8	7	( 0 )
EXPR	3258:8	3258:10	8	( 0 )
LEAF_NODE	3258:8	3258:8	9	(
FIELD	3258:9	3258:9	9	0
LEAF_NODE	3258:9	3258:9	10	0
LEAF_NODE	3258:10	3258:10	9	)
LEAF_NODE	3258:11	3258:11	7	;
LEAF_NODE	3259:1	3259:1	5	}
EXPR_STATEMENT	3261:1	3261:29	3	written = t2p -> outputwritten ;
EXPR	3261:1	3261:1	4	written = t2p -> outputwritten
ASSIGN	3261:1	3261:11	5	written = t2p -> outputwritten
LVAL	3261:1	3261:1	6	written
FIELD	3261:1	3261:1	7	written
LEAF_NODE	3261:1	3261:1	8	written
ASSIGN_OP	3261:9	3261:9	6	=
LEAF_NODE	3261:9	3261:9	7	=
RVAL	3261:11	3261:11	6	t2p -> outputwritten
FIELD	3261:11	3261:16	7	t2p -> outputwritten
LEAF_NODE	3261:11	3261:11	8	t2p
LEAF_NODE	3261:14	3261:14	8	->
LEAF_NODE	3261:16	3261:16	8	outputwritten
LEAF_NODE	3261:29	3261:29	4	;
LEAF_NODE	3263:1	3263:1	3	return
LEAF_NODE	3263:7	3263:7	3	(
LEAF_NODE	3263:8	3263:8	3	written
LEAF_NODE	3263:15	3263:15	3	)
LEAF_NODE	3263:16	3263:16	3	;
LEAF_NODE	3264:0	3264:0	2	}
FUNCTION_DEF	3267:0	3508:0	1	
RETURN_TYPE	3267:0	3267:0	2	int
TYPE_NAME	3267:0	3267:0	3	int
LEAF_NODE	3267:0	3267:0	4	int
FUNCTION_NAME	3267:4	3267:4	2	t2p_process_ojpeg_tables
LEAF_NODE	3267:4	3267:4	3	t2p_process_ojpeg_tables
PARAMETER_LIST	3267:28	3267:50	2	( T2P * t2p , TIFF * input )
LEAF_NODE	3267:28	3267:28	3	(
PARAMETER_DECL	3267:29	3267:34	3	T2P * t2p
TYPE	3267:29	3267:32	4	T2P *
TYPE_NAME	3267:29	3267:29	5	T2P
LEAF_NODE	3267:29	3267:29	6	T2P
POINTER	3267:32	3267:32	5	*
LEAF_NODE	3267:32	3267:32	6	*
NAME	3267:34	3267:34	4	t2p
LEAF_NODE	3267:34	3267:34	5	t2p
LEAF_NODE	3267:37	3267:37	3	,
PARAMETER_DECL	3267:39	3267:45	3	TIFF * input
TYPE	3267:39	3267:43	4	TIFF *
TYPE_NAME	3267:39	3267:39	5	TIFF
LEAF_NODE	3267:39	3267:39	6	TIFF
POINTER	3267:43	3267:43	5	*
LEAF_NODE	3267:43	3267:43	6	*
NAME	3267:45	3267:45	4	input
LEAF_NODE	3267:45	3267:45	5	input
LEAF_NODE	3267:50	3267:50	3	)
LEAF_NODE	3267:51	3267:51	2	{
STATEMENTS	3268:1	3507:1	2	
SIMPLE_DECL	3268:1	3268:14	3	uint16 proc ; proc = 0 ;
VAR_DECL	3268:1	3268:8	4	uint16 proc ; proc = 0
TYPE	3268:1	3268:1	5	uint16
TYPE_NAME	3268:1	3268:1	6	uint16
LEAF_NODE	3268:1	3268:1	7	uint16
NAME	3268:8	3268:8	5	proc
LEAF_NODE	3268:8	3268:8	6	proc
LEAF_NODE	0:0	0:0	5	;
INIT	3268:8	3268:8	5	proc = 0
ASSIGN	3268:8	3268:13	6	proc = 0
LVAL	3268:8	3268:8	7	proc
NAME	3268:8	3268:8	8	proc
LEAF_NODE	3268:8	3268:8	9	proc
ASSIGN_OP	3268:12	3268:12	7	=
LEAF_NODE	3268:12	3268:12	8	=
RVAL	3268:13	3268:13	7	0
FIELD	3268:13	3268:13	8	0
LEAF_NODE	3268:13	3268:13	9	0
LEAF_NODE	3268:14	3268:14	4	;
SIMPLE_DECL	3269:1	3269:8	3	void * q ;
VAR_DECL	3269:1	3269:7	4	void * q
TYPE	3269:1	3269:5	5	void *
TYPE_NAME	3269:1	3269:1	6	void
LEAF_NODE	3269:1	3269:1	7	void
POINTER	3269:5	3269:5	6	*
LEAF_NODE	3269:5	3269:5	7	*
NAME	3269:7	3269:7	5	q
LEAF_NODE	3269:7	3269:7	6	q
LEAF_NODE	3269:8	3269:8	4	;
SIMPLE_DECL	3270:1	3270:18	3	uint32 q_length ; q_length = 0 ;
VAR_DECL	3270:1	3270:8	4	uint32 q_length ; q_length = 0
TYPE	3270:1	3270:1	5	uint32
TYPE_NAME	3270:1	3270:1	6	uint32
LEAF_NODE	3270:1	3270:1	7	uint32
NAME	3270:8	3270:8	5	q_length
LEAF_NODE	3270:8	3270:8	6	q_length
LEAF_NODE	0:0	0:0	5	;
INIT	3270:8	3270:8	5	q_length = 0
ASSIGN	3270:8	3270:17	6	q_length = 0
LVAL	3270:8	3270:8	7	q_length
NAME	3270:8	3270:8	8	q_length
LEAF_NODE	3270:8	3270:8	9	q_length
ASSIGN_OP	3270:16	3270:16	7	=
LEAF_NODE	3270:16	3270:16	8	=
RVAL	3270:17	3270:17	7	0
FIELD	3270:17	3270:17	8	0
LEAF_NODE	3270:17	3270:17	9	0
LEAF_NODE	3270:18	3270:18	4	;
SIMPLE_DECL	3271:1	3271:9	3	void * dc ;
VAR_DECL	3271:1	3271:7	4	void * dc
TYPE	3271:1	3271:5	5	void *
TYPE_NAME	3271:1	3271:1	6	void
LEAF_NODE	3271:1	3271:1	7	void
POINTER	3271:5	3271:5	6	*
LEAF_NODE	3271:5	3271:5	7	*
NAME	3271:7	3271:7	5	dc
LEAF_NODE	3271:7	3271:7	6	dc
LEAF_NODE	3271:9	3271:9	4	;
SIMPLE_DECL	3272:1	3272:19	3	uint32 dc_length ; dc_length = 0 ;
VAR_DECL	3272:1	3272:8	4	uint32 dc_length ; dc_length = 0
TYPE	3272:1	3272:1	5	uint32
TYPE_NAME	3272:1	3272:1	6	uint32
LEAF_NODE	3272:1	3272:1	7	uint32
NAME	3272:8	3272:8	5	dc_length
LEAF_NODE	3272:8	3272:8	6	dc_length
LEAF_NODE	0:0	0:0	5	;
INIT	3272:8	3272:8	5	dc_length = 0
ASSIGN	3272:8	3272:18	6	dc_length = 0
LVAL	3272:8	3272:8	7	dc_length
NAME	3272:8	3272:8	8	dc_length
LEAF_NODE	3272:8	3272:8	9	dc_length
ASSIGN_OP	3272:17	3272:17	7	=
LEAF_NODE	3272:17	3272:17	8	=
RVAL	3272:18	3272:18	7	0
FIELD	3272:18	3272:18	8	0
LEAF_NODE	3272:18	3272:18	9	0
LEAF_NODE	3272:19	3272:19	4	;
SIMPLE_DECL	3273:1	3273:9	3	void * ac ;
VAR_DECL	3273:1	3273:7	4	void * ac
TYPE	3273:1	3273:5	5	void *
TYPE_NAME	3273:1	3273:1	6	void
LEAF_NODE	3273:1	3273:1	7	void
POINTER	3273:5	3273:5	6	*
LEAF_NODE	3273:5	3273:5	7	*
NAME	3273:7	3273:7	5	ac
LEAF_NODE	3273:7	3273:7	6	ac
LEAF_NODE	3273:9	3273:9	4	;
SIMPLE_DECL	3274:1	3274:19	3	uint32 ac_length ; ac_length = 0 ;
VAR_DECL	3274:1	3274:8	4	uint32 ac_length ; ac_length = 0
TYPE	3274:1	3274:1	5	uint32
TYPE_NAME	3274:1	3274:1	6	uint32
LEAF_NODE	3274:1	3274:1	7	uint32
NAME	3274:8	3274:8	5	ac_length
LEAF_NODE	3274:8	3274:8	6	ac_length
LEAF_NODE	0:0	0:0	5	;
INIT	3274:8	3274:8	5	ac_length = 0
ASSIGN	3274:8	3274:18	6	ac_length = 0
LVAL	3274:8	3274:8	7	ac_length
NAME	3274:8	3274:8	8	ac_length
LEAF_NODE	3274:8	3274:8	9	ac_length
ASSIGN_OP	3274:17	3274:17	7	=
LEAF_NODE	3274:17	3274:17	8	=
RVAL	3274:18	3274:18	7	0
FIELD	3274:18	3274:18	8	0
LEAF_NODE	3274:18	3274:18	9	0
LEAF_NODE	3274:19	3274:19	4	;
SIMPLE_DECL	3275:1	3275:11	3	uint16 * lp ;
VAR_DECL	3275:1	3275:9	4	uint16 * lp
TYPE	3275:1	3275:7	5	uint16 *
TYPE_NAME	3275:1	3275:1	6	uint16
LEAF_NODE	3275:1	3275:1	7	uint16
POINTER	3275:7	3275:7	6	*
LEAF_NODE	3275:7	3275:7	7	*
NAME	3275:9	3275:9	5	lp
LEAF_NODE	3275:9	3275:9	6	lp
LEAF_NODE	3275:11	3275:11	4	;
SIMPLE_DECL	3276:1	3276:11	3	uint16 * pt ;
VAR_DECL	3276:1	3276:9	4	uint16 * pt
TYPE	3276:1	3276:7	5	uint16 *
TYPE_NAME	3276:1	3276:1	6	uint16
LEAF_NODE	3276:1	3276:1	7	uint16
POINTER	3276:7	3276:7	6	*
LEAF_NODE	3276:7	3276:7	7	*
NAME	3276:9	3276:9	5	pt
LEAF_NODE	3276:9	3276:9	6	pt
LEAF_NODE	3276:11	3276:11	4	;
SIMPLE_DECL	3277:1	3277:16	3	uint16 h_samp ; h_samp = 1 ;
VAR_DECL	3277:1	3277:8	4	uint16 h_samp ; h_samp = 1
TYPE	3277:1	3277:1	5	uint16
TYPE_NAME	3277:1	3277:1	6	uint16
LEAF_NODE	3277:1	3277:1	7	uint16
NAME	3277:8	3277:8	5	h_samp
LEAF_NODE	3277:8	3277:8	6	h_samp
LEAF_NODE	0:0	0:0	5	;
INIT	3277:8	3277:8	5	h_samp = 1
ASSIGN	3277:8	3277:15	6	h_samp = 1
LVAL	3277:8	3277:8	7	h_samp
NAME	3277:8	3277:8	8	h_samp
LEAF_NODE	3277:8	3277:8	9	h_samp
ASSIGN_OP	3277:14	3277:14	7	=
LEAF_NODE	3277:14	3277:14	8	=
RVAL	3277:15	3277:15	7	1
FIELD	3277:15	3277:15	8	1
LEAF_NODE	3277:15	3277:15	9	1
LEAF_NODE	3277:16	3277:16	4	;
SIMPLE_DECL	3278:1	3278:16	3	uint16 v_samp ; v_samp = 1 ;
VAR_DECL	3278:1	3278:8	4	uint16 v_samp ; v_samp = 1
TYPE	3278:1	3278:1	5	uint16
TYPE_NAME	3278:1	3278:1	6	uint16
LEAF_NODE	3278:1	3278:1	7	uint16
NAME	3278:8	3278:8	5	v_samp
LEAF_NODE	3278:8	3278:8	6	v_samp
LEAF_NODE	0:0	0:0	5	;
INIT	3278:8	3278:8	5	v_samp = 1
ASSIGN	3278:8	3278:15	6	v_samp = 1
LVAL	3278:8	3278:8	7	v_samp
NAME	3278:8	3278:8	8	v_samp
LEAF_NODE	3278:8	3278:8	9	v_samp
ASSIGN_OP	3278:14	3278:14	7	=
LEAF_NODE	3278:14	3278:14	8	=
RVAL	3278:15	3278:15	7	1
FIELD	3278:15	3278:15	8	1
LEAF_NODE	3278:15	3278:15	9	1
LEAF_NODE	3278:16	3278:16	4	;
SIMPLE_DECL	3279:1	3279:25	3	unsigned char * ojpegdata ;
VAR_DECL	3279:1	3279:16	4	unsigned char * ojpegdata
TYPE	3279:1	3279:14	5	unsigned char *
TYPE_NAME	3279:1	3279:10	6	unsigned char
LEAF_NODE	3279:1	3279:1	7	unsigned
LEAF_NODE	3279:10	3279:10	7	char
POINTER	3279:14	3279:14	6	*
LEAF_NODE	3279:14	3279:14	7	*
NAME	3279:16	3279:16	5	ojpegdata
LEAF_NODE	3279:16	3279:16	6	ojpegdata
LEAF_NODE	3279:25	3279:25	4	;
SIMPLE_DECL	3280:1	3280:19	3	uint16 table_count ;
VAR_DECL	3280:1	3280:8	4	uint16 table_count
TYPE	3280:1	3280:1	5	uint16
TYPE_NAME	3280:1	3280:1	6	uint16
LEAF_NODE	3280:1	3280:1	7	uint16
NAME	3280:8	3280:8	5	table_count
LEAF_NODE	3280:8	3280:8	6	table_count
LEAF_NODE	3280:19	3280:19	4	;
SIMPLE_DECL	3281:1	3281:20	3	uint32 offset_table ;
VAR_DECL	3281:1	3281:8	4	uint32 offset_table
TYPE	3281:1	3281:1	5	uint32
TYPE_NAME	3281:1	3281:1	6	uint32
LEAF_NODE	3281:1	3281:1	7	uint32
NAME	3281:8	3281:8	5	offset_table
LEAF_NODE	3281:8	3281:8	6	offset_table
LEAF_NODE	3281:20	3281:20	4	;
SIMPLE_DECL	3282:1	3282:19	3	uint32 offset_ms_l ;
VAR_DECL	3282:1	3282:8	4	uint32 offset_ms_l
TYPE	3282:1	3282:1	5	uint32
TYPE_NAME	3282:1	3282:1	6	uint32
LEAF_NODE	3282:1	3282:1	7	uint32
NAME	3282:8	3282:8	5	offset_ms_l
LEAF_NODE	3282:8	3282:8	6	offset_ms_l
LEAF_NODE	3282:19	3282:19	4	;
SIMPLE_DECL	3283:1	3283:18	3	uint32 code_count ;
VAR_DECL	3283:1	3283:8	4	uint32 code_count
TYPE	3283:1	3283:1	5	uint32
TYPE_NAME	3283:1	3283:1	6	uint32
LEAF_NODE	3283:1	3283:1	7	uint32
NAME	3283:8	3283:8	5	code_count
LEAF_NODE	3283:8	3283:8	6	code_count
LEAF_NODE	3283:18	3283:18	4	;
SIMPLE_DECL	3284:1	3284:11	3	uint32 i ; i = 0 ;
VAR_DECL	3284:1	3284:8	4	uint32 i ; i = 0
TYPE	3284:1	3284:1	5	uint32
TYPE_NAME	3284:1	3284:1	6	uint32
LEAF_NODE	3284:1	3284:1	7	uint32
NAME	3284:8	3284:8	5	i
LEAF_NODE	3284:8	3284:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	3284:8	3284:8	5	i = 0
ASSIGN	3284:8	3284:10	6	i = 0
LVAL	3284:8	3284:8	7	i
NAME	3284:8	3284:8	8	i
LEAF_NODE	3284:8	3284:8	9	i
ASSIGN_OP	3284:9	3284:9	7	=
LEAF_NODE	3284:9	3284:9	8	=
RVAL	3284:10	3284:10	7	0
FIELD	3284:10	3284:10	8	0
LEAF_NODE	3284:10	3284:10	9	0
LEAF_NODE	3284:11	3284:11	4	;
SIMPLE_DECL	3285:1	3285:14	3	uint32 dest ; dest = 0 ;
VAR_DECL	3285:1	3285:8	4	uint32 dest ; dest = 0
TYPE	3285:1	3285:1	5	uint32
TYPE_NAME	3285:1	3285:1	6	uint32
LEAF_NODE	3285:1	3285:1	7	uint32
NAME	3285:8	3285:8	5	dest
LEAF_NODE	3285:8	3285:8	6	dest
LEAF_NODE	0:0	0:0	5	;
INIT	3285:8	3285:8	5	dest = 0
ASSIGN	3285:8	3285:13	6	dest = 0
LVAL	3285:8	3285:8	7	dest
NAME	3285:8	3285:8	8	dest
LEAF_NODE	3285:8	3285:8	9	dest
ASSIGN_OP	3285:12	3285:12	7	=
LEAF_NODE	3285:12	3285:12	8	=
RVAL	3285:13	3285:13	7	0
FIELD	3285:13	3285:13	8	0
LEAF_NODE	3285:13	3285:13	9	0
LEAF_NODE	3285:14	3285:14	4	;
SIMPLE_DECL	3286:1	3286:12	3	uint16 ri ; ri = 0 ;
VAR_DECL	3286:1	3286:8	4	uint16 ri ; ri = 0
TYPE	3286:1	3286:1	5	uint16
TYPE_NAME	3286:1	3286:1	6	uint16
LEAF_NODE	3286:1	3286:1	7	uint16
NAME	3286:8	3286:8	5	ri
LEAF_NODE	3286:8	3286:8	6	ri
LEAF_NODE	0:0	0:0	5	;
INIT	3286:8	3286:8	5	ri = 0
ASSIGN	3286:8	3286:11	6	ri = 0
LVAL	3286:8	3286:8	7	ri
NAME	3286:8	3286:8	8	ri
LEAF_NODE	3286:8	3286:8	9	ri
ASSIGN_OP	3286:10	3286:10	7	=
LEAF_NODE	3286:10	3286:10	8	=
RVAL	3286:11	3286:11	7	0
FIELD	3286:11	3286:11	8	0
LEAF_NODE	3286:11	3286:11	9	0
LEAF_NODE	3286:12	3286:12	4	;
SIMPLE_DECL	3287:1	3287:14	3	uint32 rows ; rows = 0 ;
VAR_DECL	3287:1	3287:8	4	uint32 rows ; rows = 0
TYPE	3287:1	3287:1	5	uint32
TYPE_NAME	3287:1	3287:1	6	uint32
LEAF_NODE	3287:1	3287:1	7	uint32
NAME	3287:8	3287:8	5	rows
LEAF_NODE	3287:8	3287:8	6	rows
LEAF_NODE	0:0	0:0	5	;
INIT	3287:8	3287:8	5	rows = 0
ASSIGN	3287:8	3287:13	6	rows = 0
LVAL	3287:8	3287:8	7	rows
NAME	3287:8	3287:8	8	rows
LEAF_NODE	3287:8	3287:8	9	rows
ASSIGN_OP	3287:12	3287:12	7	=
LEAF_NODE	3287:12	3287:12	8	=
RVAL	3287:13	3287:13	7	0
FIELD	3287:13	3287:13	8	0
LEAF_NODE	3287:13	3287:13	9	0
LEAF_NODE	3287:14	3287:14	4	;
SELECTION	3289:1	3289:50	3	
KEYWORD	3289:1	3289:1	4	if
LEAF_NODE	3289:1	3289:1	5	if
LEAF_NODE	3289:3	3289:3	4	(
CONDITION	3289:4	3289:4	4	! TIFFGetField ( input , TIFFTAG_JPEGPROC , & proc )
EXPR	3289:4	3289:4	5	! TIFFGetField ( input , TIFFTAG_JPEGPROC , & proc )
UNARY_EXPR	3289:4	3289:5	6	! TIFFGetField ( input , TIFFTAG_JPEGPROC , & proc )
UNARY_OPERATOR	3289:4	3289:4	7	!
LEAF_NODE	3289:4	3289:4	8	!
FUNCTION_CALL	3289:5	3289:48	7	TIFFGetField ( input , TIFFTAG_JPEGPROC , & proc )
CALLEE	3289:5	3289:5	8	TIFFGetField
LEAF_NODE	3289:5	3289:5	9	TIFFGetField
LEAF_NODE	3289:17	3289:17	8	(
ARGUMENT	3289:18	3289:18	8	input
FIELD	3289:18	3289:18	9	input
LEAF_NODE	3289:18	3289:18	10	input
LEAF_NODE	3289:23	3289:23	8	,
ARGUMENT	3289:25	3289:25	8	TIFFTAG_JPEGPROC
FIELD	3289:25	3289:25	9	TIFFTAG_JPEGPROC
LEAF_NODE	3289:25	3289:25	10	TIFFTAG_JPEGPROC
LEAF_NODE	3289:41	3289:41	8	,
ARGUMENT	3289:43	3289:43	8	& proc
UNARY_EXPR	3289:43	3289:44	9	& proc
UNARY_OPERATOR	3289:43	3289:43	10	&
LEAF_NODE	3289:43	3289:43	11	&
FIELD	3289:44	3289:44	10	proc
LEAF_NODE	3289:44	3289:44	11	proc
LEAF_NODE	3289:48	3289:48	8	)
LEAF_NODE	3289:49	3289:49	4	)
STATEMENTS	3289:50	3295:1	4	
LEAF_NODE	3289:50	3289:50	5	{
STATEMENTS	3290:2	3294:2	5	
EXPR_STATEMENT	3290:2	3292:23	6	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGProc field in OJPEG image %s" , TIFFFileName ( input ) ) ;
EXPR	3290:2	3290:2	7	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGProc field in OJPEG image %s" , TIFFFileName ( input ) )
FUNCTION_CALL	3290:2	3292:22	8	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGProc field in OJPEG image %s" , TIFFFileName ( input ) )
CALLEE	3290:2	3290:2	9	TIFFError
LEAF_NODE	3290:2	3290:2	10	TIFFError
LEAF_NODE	3290:11	3290:11	9	(
ARGUMENT	3290:12	3290:12	9	TIFF2PDF_MODULE
FIELD	3290:12	3290:12	10	TIFF2PDF_MODULE
LEAF_NODE	3290:12	3290:12	11	TIFF2PDF_MODULE
LEAF_NODE	3290:27	3290:27	9	,
ARGUMENT	3291:3	3291:3	9	"Missing JPEGProc field in OJPEG image %s"
FIELD	3291:3	3291:3	10	"Missing JPEGProc field in OJPEG image %s"
LEAF_NODE	3291:3	3291:3	11	"Missing JPEGProc field in OJPEG image %s"
LEAF_NODE	3291:45	3291:45	9	,
ARGUMENT	3292:3	3292:3	9	TIFFFileName ( input )
FUNCTION_CALL	3292:3	3292:21	10	TIFFFileName ( input )
CALLEE	3292:3	3292:3	11	TIFFFileName
LEAF_NODE	3292:3	3292:3	12	TIFFFileName
LEAF_NODE	3292:15	3292:15	11	(
ARGUMENT	3292:16	3292:16	11	input
FIELD	3292:16	3292:16	12	input
LEAF_NODE	3292:16	3292:16	13	input
LEAF_NODE	3292:21	3292:21	11	)
LEAF_NODE	3292:22	3292:22	9	)
LEAF_NODE	3292:23	3292:23	7	;
EXPR_STATEMENT	3293:3	3293:33	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3293:3	3293:3	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3293:3	3293:20	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3293:3	3293:3	9	t2p -> t2p_error
FIELD	3293:3	3293:8	10	t2p -> t2p_error
LEAF_NODE	3293:3	3293:3	11	t2p
LEAF_NODE	3293:6	3293:6	11	->
LEAF_NODE	3293:8	3293:8	11	t2p_error
ASSIGN_OP	3293:18	3293:18	9	=
LEAF_NODE	3293:18	3293:18	10	=
RVAL	3293:20	3293:20	9	T2P_ERR_ERROR
FIELD	3293:20	3293:20	10	T2P_ERR_ERROR
LEAF_NODE	3293:20	3293:20	11	T2P_ERR_ERROR
LEAF_NODE	3293:33	3293:33	7	;
JUMP_STATEMENT	3294:2	3294:11	6	return ( 0 ) ;
KEYWORD	3294:2	3294:2	7	return
LEAF_NODE	3294:2	3294:2	8	return
DESTINATION	3294:8	3294:8	7	( 0 )
EXPR	3294:8	3294:10	8	( 0 )
LEAF_NODE	3294:8	3294:8	9	(
FIELD	3294:9	3294:9	9	0
LEAF_NODE	3294:9	3294:9	10	0
LEAF_NODE	3294:10	3294:10	9	)
LEAF_NODE	3294:11	3294:11	7	;
LEAF_NODE	3295:1	3295:1	5	}
SELECTION	3296:1	3296:55	3	
KEYWORD	3296:1	3296:1	4	if
LEAF_NODE	3296:1	3296:1	5	if
LEAF_NODE	3296:3	3296:3	4	(
CONDITION	3296:4	3296:4	4	proc != JPEGPROC_BASELINE && proc != JPEGPROC_LOSSLESS
EXPR	3296:4	3296:4	5	proc != JPEGPROC_BASELINE && proc != JPEGPROC_LOSSLESS
AND	3296:4	3296:31	6	proc != JPEGPROC_BASELINE && proc != JPEGPROC_LOSSLESS
EXPR	3296:4	3296:10	7	proc != JPEGPROC_BASELINE
FIELD	3296:4	3296:4	8	proc
LEAF_NODE	3296:4	3296:4	9	proc
EQ_OPERATOR	3296:8	3296:8	8	!=
LEAF_NODE	3296:8	3296:8	9	!=
FIELD	3296:10	3296:10	8	JPEGPROC_BASELINE
LEAF_NODE	3296:10	3296:10	9	JPEGPROC_BASELINE
LEAF_NODE	3296:28	3296:28	7	&&
EXPR	3296:31	3296:37	7	proc != JPEGPROC_LOSSLESS
FIELD	3296:31	3296:31	8	proc
LEAF_NODE	3296:31	3296:31	9	proc
EQ_OPERATOR	3296:35	3296:35	8	!=
LEAF_NODE	3296:35	3296:35	9	!=
FIELD	3296:37	3296:37	8	JPEGPROC_LOSSLESS
LEAF_NODE	3296:37	3296:37	9	JPEGPROC_LOSSLESS
LEAF_NODE	3296:54	3296:54	4	)
STATEMENTS	3296:55	3302:1	4	
LEAF_NODE	3296:55	3296:55	5	{
STATEMENTS	3297:2	3301:2	5	
EXPR_STATEMENT	3297:2	3299:23	6	TIFFError ( TIFF2PDF_MODULE , "Bad JPEGProc field in OJPEG image %s" , TIFFFileName ( input ) ) ;
EXPR	3297:2	3297:2	7	TIFFError ( TIFF2PDF_MODULE , "Bad JPEGProc field in OJPEG image %s" , TIFFFileName ( input ) )
FUNCTION_CALL	3297:2	3299:22	8	TIFFError ( TIFF2PDF_MODULE , "Bad JPEGProc field in OJPEG image %s" , TIFFFileName ( input ) )
CALLEE	3297:2	3297:2	9	TIFFError
LEAF_NODE	3297:2	3297:2	10	TIFFError
LEAF_NODE	3297:11	3297:11	9	(
ARGUMENT	3297:12	3297:12	9	TIFF2PDF_MODULE
FIELD	3297:12	3297:12	10	TIFF2PDF_MODULE
LEAF_NODE	3297:12	3297:12	11	TIFF2PDF_MODULE
LEAF_NODE	3297:27	3297:27	9	,
ARGUMENT	3298:3	3298:3	9	"Bad JPEGProc field in OJPEG image %s"
FIELD	3298:3	3298:3	10	"Bad JPEGProc field in OJPEG image %s"
LEAF_NODE	3298:3	3298:3	11	"Bad JPEGProc field in OJPEG image %s"
LEAF_NODE	3298:41	3298:41	9	,
ARGUMENT	3299:3	3299:3	9	TIFFFileName ( input )
FUNCTION_CALL	3299:3	3299:21	10	TIFFFileName ( input )
CALLEE	3299:3	3299:3	11	TIFFFileName
LEAF_NODE	3299:3	3299:3	12	TIFFFileName
LEAF_NODE	3299:15	3299:15	11	(
ARGUMENT	3299:16	3299:16	11	input
FIELD	3299:16	3299:16	12	input
LEAF_NODE	3299:16	3299:16	13	input
LEAF_NODE	3299:21	3299:21	11	)
LEAF_NODE	3299:22	3299:22	9	)
LEAF_NODE	3299:23	3299:23	7	;
EXPR_STATEMENT	3300:3	3300:33	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3300:3	3300:3	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3300:3	3300:20	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3300:3	3300:3	9	t2p -> t2p_error
FIELD	3300:3	3300:8	10	t2p -> t2p_error
LEAF_NODE	3300:3	3300:3	11	t2p
LEAF_NODE	3300:6	3300:6	11	->
LEAF_NODE	3300:8	3300:8	11	t2p_error
ASSIGN_OP	3300:18	3300:18	9	=
LEAF_NODE	3300:18	3300:18	10	=
RVAL	3300:20	3300:20	9	T2P_ERR_ERROR
FIELD	3300:20	3300:20	10	T2P_ERR_ERROR
LEAF_NODE	3300:20	3300:20	11	T2P_ERR_ERROR
LEAF_NODE	3300:33	3300:33	7	;
JUMP_STATEMENT	3301:2	3301:11	6	return ( 0 ) ;
KEYWORD	3301:2	3301:2	7	return
LEAF_NODE	3301:2	3301:2	8	return
DESTINATION	3301:8	3301:8	7	( 0 )
EXPR	3301:8	3301:10	8	( 0 )
LEAF_NODE	3301:8	3301:8	9	(
FIELD	3301:9	3301:9	9	0
LEAF_NODE	3301:9	3301:9	10	0
LEAF_NODE	3301:10	3301:10	9	)
LEAF_NODE	3301:11	3301:11	7	;
LEAF_NODE	3302:1	3302:1	5	}
SELECTION	3303:1	3303:61	3	
KEYWORD	3303:1	3303:1	4	if
LEAF_NODE	3303:1	3303:1	5	if
LEAF_NODE	3303:3	3303:3	4	(
CONDITION	3303:4	3303:4	4	! TIFFGetField ( input , TIFFTAG_JPEGQTABLES , & q_length , & q )
EXPR	3303:4	3303:4	5	! TIFFGetField ( input , TIFFTAG_JPEGQTABLES , & q_length , & q )
UNARY_EXPR	3303:4	3303:5	6	! TIFFGetField ( input , TIFFTAG_JPEGQTABLES , & q_length , & q )
UNARY_OPERATOR	3303:4	3303:4	7	!
LEAF_NODE	3303:4	3303:4	8	!
FUNCTION_CALL	3303:5	3303:59	7	TIFFGetField ( input , TIFFTAG_JPEGQTABLES , & q_length , & q )
CALLEE	3303:5	3303:5	8	TIFFGetField
LEAF_NODE	3303:5	3303:5	9	TIFFGetField
LEAF_NODE	3303:17	3303:17	8	(
ARGUMENT	3303:18	3303:18	8	input
FIELD	3303:18	3303:18	9	input
LEAF_NODE	3303:18	3303:18	10	input
LEAF_NODE	3303:23	3303:23	8	,
ARGUMENT	3303:25	3303:25	8	TIFFTAG_JPEGQTABLES
FIELD	3303:25	3303:25	9	TIFFTAG_JPEGQTABLES
LEAF_NODE	3303:25	3303:25	10	TIFFTAG_JPEGQTABLES
LEAF_NODE	3303:44	3303:44	8	,
ARGUMENT	3303:46	3303:46	8	& q_length
UNARY_EXPR	3303:46	3303:47	9	& q_length
UNARY_OPERATOR	3303:46	3303:46	10	&
LEAF_NODE	3303:46	3303:46	11	&
FIELD	3303:47	3303:47	10	q_length
LEAF_NODE	3303:47	3303:47	11	q_length
LEAF_NODE	3303:55	3303:55	8	,
ARGUMENT	3303:57	3303:57	8	& q
UNARY_EXPR	3303:57	3303:58	9	& q
UNARY_OPERATOR	3303:57	3303:57	10	&
LEAF_NODE	3303:57	3303:57	11	&
FIELD	3303:58	3303:58	10	q
LEAF_NODE	3303:58	3303:58	11	q
LEAF_NODE	3303:59	3303:59	8	)
LEAF_NODE	3303:60	3303:60	4	)
STATEMENTS	3303:61	3309:1	4	
LEAF_NODE	3303:61	3303:61	5	{
STATEMENTS	3304:2	3308:2	5	
EXPR_STATEMENT	3304:2	3306:23	6	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGQTables field in OJPEG image %s" , TIFFFileName ( input ) ) ;
EXPR	3304:2	3304:2	7	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGQTables field in OJPEG image %s" , TIFFFileName ( input ) )
FUNCTION_CALL	3304:2	3306:22	8	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGQTables field in OJPEG image %s" , TIFFFileName ( input ) )
CALLEE	3304:2	3304:2	9	TIFFError
LEAF_NODE	3304:2	3304:2	10	TIFFError
LEAF_NODE	3304:11	3304:11	9	(
ARGUMENT	3304:12	3304:12	9	TIFF2PDF_MODULE
FIELD	3304:12	3304:12	10	TIFF2PDF_MODULE
LEAF_NODE	3304:12	3304:12	11	TIFF2PDF_MODULE
LEAF_NODE	3304:27	3304:27	9	,
ARGUMENT	3305:3	3305:3	9	"Missing JPEGQTables field in OJPEG image %s"
FIELD	3305:3	3305:3	10	"Missing JPEGQTables field in OJPEG image %s"
LEAF_NODE	3305:3	3305:3	11	"Missing JPEGQTables field in OJPEG image %s"
LEAF_NODE	3305:48	3305:48	9	,
ARGUMENT	3306:3	3306:3	9	TIFFFileName ( input )
FUNCTION_CALL	3306:3	3306:21	10	TIFFFileName ( input )
CALLEE	3306:3	3306:3	11	TIFFFileName
LEAF_NODE	3306:3	3306:3	12	TIFFFileName
LEAF_NODE	3306:15	3306:15	11	(
ARGUMENT	3306:16	3306:16	11	input
FIELD	3306:16	3306:16	12	input
LEAF_NODE	3306:16	3306:16	13	input
LEAF_NODE	3306:21	3306:21	11	)
LEAF_NODE	3306:22	3306:22	9	)
LEAF_NODE	3306:23	3306:23	7	;
EXPR_STATEMENT	3307:3	3307:33	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3307:3	3307:3	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3307:3	3307:20	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3307:3	3307:3	9	t2p -> t2p_error
FIELD	3307:3	3307:8	10	t2p -> t2p_error
LEAF_NODE	3307:3	3307:3	11	t2p
LEAF_NODE	3307:6	3307:6	11	->
LEAF_NODE	3307:8	3307:8	11	t2p_error
ASSIGN_OP	3307:18	3307:18	9	=
LEAF_NODE	3307:18	3307:18	10	=
RVAL	3307:20	3307:20	9	T2P_ERR_ERROR
FIELD	3307:20	3307:20	10	T2P_ERR_ERROR
LEAF_NODE	3307:20	3307:20	11	T2P_ERR_ERROR
LEAF_NODE	3307:33	3307:33	7	;
JUMP_STATEMENT	3308:2	3308:11	6	return ( 0 ) ;
KEYWORD	3308:2	3308:2	7	return
LEAF_NODE	3308:2	3308:2	8	return
DESTINATION	3308:8	3308:8	7	( 0 )
EXPR	3308:8	3308:10	8	( 0 )
LEAF_NODE	3308:8	3308:8	9	(
FIELD	3308:9	3308:9	9	0
LEAF_NODE	3308:9	3308:9	10	0
LEAF_NODE	3308:10	3308:10	9	)
LEAF_NODE	3308:11	3308:11	7	;
LEAF_NODE	3309:1	3309:1	5	}
SELECTION	3310:1	3310:49	3	
KEYWORD	3310:1	3310:1	4	if
LEAF_NODE	3310:1	3310:1	5	if
LEAF_NODE	3310:3	3310:3	4	(
CONDITION	3310:4	3310:4	4	q_length < ( 64U * t2p -> tiff_samplesperpixel )
EXPR	3310:4	3310:47	5	q_length < ( 64U * t2p -> tiff_samplesperpixel )
FIELD	3310:4	3310:4	6	q_length
LEAF_NODE	3310:4	3310:4	7	q_length
REL_OPERATOR	3310:13	3310:13	6	<
LEAF_NODE	3310:13	3310:13	7	<
LEAF_NODE	3310:15	3310:15	6	(
FIELD	3310:16	3310:16	6	64U
LEAF_NODE	3310:16	3310:16	7	64U
LEAF_NODE	3310:20	3310:20	6	*
FIELD	3310:22	3310:27	6	t2p -> tiff_samplesperpixel
LEAF_NODE	3310:22	3310:22	7	t2p
LEAF_NODE	3310:25	3310:25	7	->
LEAF_NODE	3310:27	3310:27	7	tiff_samplesperpixel
LEAF_NODE	3310:47	3310:47	6	)
LEAF_NODE	3310:48	3310:48	4	)
STATEMENTS	3310:49	3316:1	4	
LEAF_NODE	3310:49	3310:49	5	{
STATEMENTS	3311:2	3315:2	5	
EXPR_STATEMENT	3311:2	3313:23	6	TIFFError ( TIFF2PDF_MODULE , "Bad JPEGQTables field in OJPEG image %s" , TIFFFileName ( input ) ) ;
EXPR	3311:2	3311:2	7	TIFFError ( TIFF2PDF_MODULE , "Bad JPEGQTables field in OJPEG image %s" , TIFFFileName ( input ) )
FUNCTION_CALL	3311:2	3313:22	8	TIFFError ( TIFF2PDF_MODULE , "Bad JPEGQTables field in OJPEG image %s" , TIFFFileName ( input ) )
CALLEE	3311:2	3311:2	9	TIFFError
LEAF_NODE	3311:2	3311:2	10	TIFFError
LEAF_NODE	3311:11	3311:11	9	(
ARGUMENT	3311:12	3311:12	9	TIFF2PDF_MODULE
FIELD	3311:12	3311:12	10	TIFF2PDF_MODULE
LEAF_NODE	3311:12	3311:12	11	TIFF2PDF_MODULE
LEAF_NODE	3311:27	3311:27	9	,
ARGUMENT	3312:3	3312:3	9	"Bad JPEGQTables field in OJPEG image %s"
FIELD	3312:3	3312:3	10	"Bad JPEGQTables field in OJPEG image %s"
LEAF_NODE	3312:3	3312:3	11	"Bad JPEGQTables field in OJPEG image %s"
LEAF_NODE	3312:44	3312:44	9	,
ARGUMENT	3313:3	3313:3	9	TIFFFileName ( input )
FUNCTION_CALL	3313:3	3313:21	10	TIFFFileName ( input )
CALLEE	3313:3	3313:3	11	TIFFFileName
LEAF_NODE	3313:3	3313:3	12	TIFFFileName
LEAF_NODE	3313:15	3313:15	11	(
ARGUMENT	3313:16	3313:16	11	input
FIELD	3313:16	3313:16	12	input
LEAF_NODE	3313:16	3313:16	13	input
LEAF_NODE	3313:21	3313:21	11	)
LEAF_NODE	3313:22	3313:22	9	)
LEAF_NODE	3313:23	3313:23	7	;
EXPR_STATEMENT	3314:3	3314:33	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3314:3	3314:3	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3314:3	3314:20	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3314:3	3314:3	9	t2p -> t2p_error
FIELD	3314:3	3314:8	10	t2p -> t2p_error
LEAF_NODE	3314:3	3314:3	11	t2p
LEAF_NODE	3314:6	3314:6	11	->
LEAF_NODE	3314:8	3314:8	11	t2p_error
ASSIGN_OP	3314:18	3314:18	9	=
LEAF_NODE	3314:18	3314:18	10	=
RVAL	3314:20	3314:20	9	T2P_ERR_ERROR
FIELD	3314:20	3314:20	10	T2P_ERR_ERROR
LEAF_NODE	3314:20	3314:20	11	T2P_ERR_ERROR
LEAF_NODE	3314:33	3314:33	7	;
JUMP_STATEMENT	3315:2	3315:11	6	return ( 0 ) ;
KEYWORD	3315:2	3315:2	7	return
LEAF_NODE	3315:2	3315:2	8	return
DESTINATION	3315:8	3315:8	7	( 0 )
EXPR	3315:8	3315:10	8	( 0 )
LEAF_NODE	3315:8	3315:8	9	(
FIELD	3315:9	3315:9	9	0
LEAF_NODE	3315:9	3315:9	10	0
LEAF_NODE	3315:10	3315:10	9	)
LEAF_NODE	3315:11	3315:11	7	;
LEAF_NODE	3316:1	3316:1	5	}
SELECTION	3317:1	3317:64	3	
KEYWORD	3317:1	3317:1	4	if
LEAF_NODE	3317:1	3317:1	5	if
LEAF_NODE	3317:3	3317:3	4	(
CONDITION	3317:4	3317:4	4	! TIFFGetField ( input , TIFFTAG_JPEGDCTABLES , & dc_length , & dc )
EXPR	3317:4	3317:4	5	! TIFFGetField ( input , TIFFTAG_JPEGDCTABLES , & dc_length , & dc )
UNARY_EXPR	3317:4	3317:5	6	! TIFFGetField ( input , TIFFTAG_JPEGDCTABLES , & dc_length , & dc )
UNARY_OPERATOR	3317:4	3317:4	7	!
LEAF_NODE	3317:4	3317:4	8	!
FUNCTION_CALL	3317:5	3317:62	7	TIFFGetField ( input , TIFFTAG_JPEGDCTABLES , & dc_length , & dc )
CALLEE	3317:5	3317:5	8	TIFFGetField
LEAF_NODE	3317:5	3317:5	9	TIFFGetField
LEAF_NODE	3317:17	3317:17	8	(
ARGUMENT	3317:18	3317:18	8	input
FIELD	3317:18	3317:18	9	input
LEAF_NODE	3317:18	3317:18	10	input
LEAF_NODE	3317:23	3317:23	8	,
ARGUMENT	3317:25	3317:25	8	TIFFTAG_JPEGDCTABLES
FIELD	3317:25	3317:25	9	TIFFTAG_JPEGDCTABLES
LEAF_NODE	3317:25	3317:25	10	TIFFTAG_JPEGDCTABLES
LEAF_NODE	3317:45	3317:45	8	,
ARGUMENT	3317:47	3317:47	8	& dc_length
UNARY_EXPR	3317:47	3317:48	9	& dc_length
UNARY_OPERATOR	3317:47	3317:47	10	&
LEAF_NODE	3317:47	3317:47	11	&
FIELD	3317:48	3317:48	10	dc_length
LEAF_NODE	3317:48	3317:48	11	dc_length
LEAF_NODE	3317:57	3317:57	8	,
ARGUMENT	3317:59	3317:59	8	& dc
UNARY_EXPR	3317:59	3317:60	9	& dc
UNARY_OPERATOR	3317:59	3317:59	10	&
LEAF_NODE	3317:59	3317:59	11	&
FIELD	3317:60	3317:60	10	dc
LEAF_NODE	3317:60	3317:60	11	dc
LEAF_NODE	3317:62	3317:62	8	)
LEAF_NODE	3317:63	3317:63	4	)
STATEMENTS	3317:64	3323:1	4	
LEAF_NODE	3317:64	3317:64	5	{
STATEMENTS	3318:2	3322:2	5	
EXPR_STATEMENT	3318:2	3320:23	6	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGDCTables field in OJPEG image %s" , TIFFFileName ( input ) ) ;
EXPR	3318:2	3318:2	7	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGDCTables field in OJPEG image %s" , TIFFFileName ( input ) )
FUNCTION_CALL	3318:2	3320:22	8	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGDCTables field in OJPEG image %s" , TIFFFileName ( input ) )
CALLEE	3318:2	3318:2	9	TIFFError
LEAF_NODE	3318:2	3318:2	10	TIFFError
LEAF_NODE	3318:11	3318:11	9	(
ARGUMENT	3318:12	3318:12	9	TIFF2PDF_MODULE
FIELD	3318:12	3318:12	10	TIFF2PDF_MODULE
LEAF_NODE	3318:12	3318:12	11	TIFF2PDF_MODULE
LEAF_NODE	3318:27	3318:27	9	,
ARGUMENT	3319:3	3319:3	9	"Missing JPEGDCTables field in OJPEG image %s"
FIELD	3319:3	3319:3	10	"Missing JPEGDCTables field in OJPEG image %s"
LEAF_NODE	3319:3	3319:3	11	"Missing JPEGDCTables field in OJPEG image %s"
LEAF_NODE	3319:49	3319:49	9	,
ARGUMENT	3320:3	3320:3	9	TIFFFileName ( input )
FUNCTION_CALL	3320:3	3320:21	10	TIFFFileName ( input )
CALLEE	3320:3	3320:3	11	TIFFFileName
LEAF_NODE	3320:3	3320:3	12	TIFFFileName
LEAF_NODE	3320:15	3320:15	11	(
ARGUMENT	3320:16	3320:16	11	input
FIELD	3320:16	3320:16	12	input
LEAF_NODE	3320:16	3320:16	13	input
LEAF_NODE	3320:21	3320:21	11	)
LEAF_NODE	3320:22	3320:22	9	)
LEAF_NODE	3320:23	3320:23	7	;
EXPR_STATEMENT	3321:3	3321:33	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3321:3	3321:3	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3321:3	3321:20	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3321:3	3321:3	9	t2p -> t2p_error
FIELD	3321:3	3321:8	10	t2p -> t2p_error
LEAF_NODE	3321:3	3321:3	11	t2p
LEAF_NODE	3321:6	3321:6	11	->
LEAF_NODE	3321:8	3321:8	11	t2p_error
ASSIGN_OP	3321:18	3321:18	9	=
LEAF_NODE	3321:18	3321:18	10	=
RVAL	3321:20	3321:20	9	T2P_ERR_ERROR
FIELD	3321:20	3321:20	10	T2P_ERR_ERROR
LEAF_NODE	3321:20	3321:20	11	T2P_ERR_ERROR
LEAF_NODE	3321:33	3321:33	7	;
JUMP_STATEMENT	3322:2	3322:11	6	return ( 0 ) ;
KEYWORD	3322:2	3322:2	7	return
LEAF_NODE	3322:2	3322:2	8	return
DESTINATION	3322:8	3322:8	7	( 0 )
EXPR	3322:8	3322:10	8	( 0 )
LEAF_NODE	3322:8	3322:8	9	(
FIELD	3322:9	3322:9	9	0
LEAF_NODE	3322:9	3322:9	10	0
LEAF_NODE	3322:10	3322:10	9	)
LEAF_NODE	3322:11	3322:11	7	;
LEAF_NODE	3323:1	3323:1	5	}
SELECTION	3324:1	3324:28	3	
KEYWORD	3324:1	3324:1	4	if
LEAF_NODE	3324:1	3324:1	5	if
LEAF_NODE	3324:3	3324:3	4	(
CONDITION	3324:4	3324:4	4	proc == JPEGPROC_BASELINE
EXPR	3324:4	3324:10	5	proc == JPEGPROC_BASELINE
FIELD	3324:4	3324:4	6	proc
LEAF_NODE	3324:4	3324:4	7	proc
EQ_OPERATOR	3324:8	3324:8	6	==
LEAF_NODE	3324:8	3324:8	7	==
FIELD	3324:10	3324:10	6	JPEGPROC_BASELINE
LEAF_NODE	3324:10	3324:10	7	JPEGPROC_BASELINE
LEAF_NODE	3324:27	3324:27	4	)
STATEMENTS	3324:28	3332:1	4	
LEAF_NODE	3324:28	3324:28	5	{
STATEMENTS	3325:2	3325:2	5	
SELECTION	3325:2	3325:65	6	
KEYWORD	3325:2	3325:2	7	if
LEAF_NODE	3325:2	3325:2	8	if
LEAF_NODE	3325:4	3325:4	7	(
CONDITION	3325:5	3325:5	7	! TIFFGetField ( input , TIFFTAG_JPEGACTABLES , & ac_length , & ac )
EXPR	3325:5	3325:5	8	! TIFFGetField ( input , TIFFTAG_JPEGACTABLES , & ac_length , & ac )
UNARY_EXPR	3325:5	3325:6	9	! TIFFGetField ( input , TIFFTAG_JPEGACTABLES , & ac_length , & ac )
UNARY_OPERATOR	3325:5	3325:5	10	!
LEAF_NODE	3325:5	3325:5	11	!
FUNCTION_CALL	3325:6	3325:63	10	TIFFGetField ( input , TIFFTAG_JPEGACTABLES , & ac_length , & ac )
CALLEE	3325:6	3325:6	11	TIFFGetField
LEAF_NODE	3325:6	3325:6	12	TIFFGetField
LEAF_NODE	3325:18	3325:18	11	(
ARGUMENT	3325:19	3325:19	11	input
FIELD	3325:19	3325:19	12	input
LEAF_NODE	3325:19	3325:19	13	input
LEAF_NODE	3325:24	3325:24	11	,
ARGUMENT	3325:26	3325:26	11	TIFFTAG_JPEGACTABLES
FIELD	3325:26	3325:26	12	TIFFTAG_JPEGACTABLES
LEAF_NODE	3325:26	3325:26	13	TIFFTAG_JPEGACTABLES
LEAF_NODE	3325:46	3325:46	11	,
ARGUMENT	3325:48	3325:48	11	& ac_length
UNARY_EXPR	3325:48	3325:49	12	& ac_length
UNARY_OPERATOR	3325:48	3325:48	13	&
LEAF_NODE	3325:48	3325:48	14	&
FIELD	3325:49	3325:49	13	ac_length
LEAF_NODE	3325:49	3325:49	14	ac_length
LEAF_NODE	3325:58	3325:58	11	,
ARGUMENT	3325:60	3325:60	11	& ac
UNARY_EXPR	3325:60	3325:61	12	& ac
UNARY_OPERATOR	3325:60	3325:60	13	&
LEAF_NODE	3325:60	3325:60	14	&
FIELD	3325:61	3325:61	13	ac
LEAF_NODE	3325:61	3325:61	14	ac
LEAF_NODE	3325:63	3325:63	11	)
LEAF_NODE	3325:64	3325:64	7	)
STATEMENTS	3325:65	3331:2	7	
LEAF_NODE	3325:65	3325:65	8	{
STATEMENTS	3326:3	3330:3	8	
EXPR_STATEMENT	3326:3	3328:24	9	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGACTables field in OJPEG image %s" , TIFFFileName ( input ) ) ;
EXPR	3326:3	3326:3	10	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGACTables field in OJPEG image %s" , TIFFFileName ( input ) )
FUNCTION_CALL	3326:3	3328:23	11	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGACTables field in OJPEG image %s" , TIFFFileName ( input ) )
CALLEE	3326:3	3326:3	12	TIFFError
LEAF_NODE	3326:3	3326:3	13	TIFFError
LEAF_NODE	3326:12	3326:12	12	(
ARGUMENT	3326:13	3326:13	12	TIFF2PDF_MODULE
FIELD	3326:13	3326:13	13	TIFF2PDF_MODULE
LEAF_NODE	3326:13	3326:13	14	TIFF2PDF_MODULE
LEAF_NODE	3326:28	3326:28	12	,
ARGUMENT	3327:4	3327:4	12	"Missing JPEGACTables field in OJPEG image %s"
FIELD	3327:4	3327:4	13	"Missing JPEGACTables field in OJPEG image %s"
LEAF_NODE	3327:4	3327:4	14	"Missing JPEGACTables field in OJPEG image %s"
LEAF_NODE	3327:50	3327:50	12	,
ARGUMENT	3328:4	3328:4	12	TIFFFileName ( input )
FUNCTION_CALL	3328:4	3328:22	13	TIFFFileName ( input )
CALLEE	3328:4	3328:4	14	TIFFFileName
LEAF_NODE	3328:4	3328:4	15	TIFFFileName
LEAF_NODE	3328:16	3328:16	14	(
ARGUMENT	3328:17	3328:17	14	input
FIELD	3328:17	3328:17	15	input
LEAF_NODE	3328:17	3328:17	16	input
LEAF_NODE	3328:22	3328:22	14	)
LEAF_NODE	3328:23	3328:23	12	)
LEAF_NODE	3328:24	3328:24	10	;
EXPR_STATEMENT	3329:4	3329:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3329:4	3329:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3329:4	3329:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3329:4	3329:4	12	t2p -> t2p_error
FIELD	3329:4	3329:9	13	t2p -> t2p_error
LEAF_NODE	3329:4	3329:4	14	t2p
LEAF_NODE	3329:7	3329:7	14	->
LEAF_NODE	3329:9	3329:9	14	t2p_error
ASSIGN_OP	3329:19	3329:19	12	=
LEAF_NODE	3329:19	3329:19	13	=
RVAL	3329:21	3329:21	12	T2P_ERR_ERROR
FIELD	3329:21	3329:21	13	T2P_ERR_ERROR
LEAF_NODE	3329:21	3329:21	14	T2P_ERR_ERROR
LEAF_NODE	3329:34	3329:34	10	;
JUMP_STATEMENT	3330:3	3330:12	9	return ( 0 ) ;
KEYWORD	3330:3	3330:3	10	return
LEAF_NODE	3330:3	3330:3	11	return
DESTINATION	3330:9	3330:9	10	( 0 )
EXPR	3330:9	3330:11	11	( 0 )
LEAF_NODE	3330:9	3330:9	12	(
FIELD	3330:10	3330:10	12	0
LEAF_NODE	3330:10	3330:10	13	0
LEAF_NODE	3330:11	3330:11	12	)
LEAF_NODE	3330:12	3330:12	10	;
LEAF_NODE	3331:2	3331:2	8	}
LEAF_NODE	3332:1	3332:1	5	}
SELECTION	3332:3	3332:8	3	
KEYWORD	3332:3	3332:3	4	else
LEAF_NODE	3332:3	3332:3	5	else
STATEMENTS	3332:8	3347:1	4	
LEAF_NODE	3332:8	3332:8	5	{
STATEMENTS	3333:2	3340:2	5	
SELECTION	3333:2	3333:63	6	
KEYWORD	3333:2	3333:2	7	if
LEAF_NODE	3333:2	3333:2	8	if
LEAF_NODE	3333:4	3333:4	7	(
CONDITION	3333:5	3333:5	7	! TIFFGetField ( input , TIFFTAG_JPEGLOSSLESSPREDICTORS , & lp )
EXPR	3333:5	3333:5	8	! TIFFGetField ( input , TIFFTAG_JPEGLOSSLESSPREDICTORS , & lp )
UNARY_EXPR	3333:5	3333:6	9	! TIFFGetField ( input , TIFFTAG_JPEGLOSSLESSPREDICTORS , & lp )
UNARY_OPERATOR	3333:5	3333:5	10	!
LEAF_NODE	3333:5	3333:5	11	!
FUNCTION_CALL	3333:6	3333:61	10	TIFFGetField ( input , TIFFTAG_JPEGLOSSLESSPREDICTORS , & lp )
CALLEE	3333:6	3333:6	11	TIFFGetField
LEAF_NODE	3333:6	3333:6	12	TIFFGetField
LEAF_NODE	3333:18	3333:18	11	(
ARGUMENT	3333:19	3333:19	11	input
FIELD	3333:19	3333:19	12	input
LEAF_NODE	3333:19	3333:19	13	input
LEAF_NODE	3333:24	3333:24	11	,
ARGUMENT	3333:26	3333:26	11	TIFFTAG_JPEGLOSSLESSPREDICTORS
FIELD	3333:26	3333:26	12	TIFFTAG_JPEGLOSSLESSPREDICTORS
LEAF_NODE	3333:26	3333:26	13	TIFFTAG_JPEGLOSSLESSPREDICTORS
LEAF_NODE	3333:56	3333:56	11	,
ARGUMENT	3333:58	3333:58	11	& lp
UNARY_EXPR	3333:58	3333:59	12	& lp
UNARY_OPERATOR	3333:58	3333:58	13	&
LEAF_NODE	3333:58	3333:58	14	&
FIELD	3333:59	3333:59	13	lp
LEAF_NODE	3333:59	3333:59	14	lp
LEAF_NODE	3333:61	3333:61	11	)
LEAF_NODE	3333:62	3333:62	7	)
STATEMENTS	3333:63	3339:2	7	
LEAF_NODE	3333:63	3333:63	8	{
STATEMENTS	3334:3	3338:4	8	
EXPR_STATEMENT	3334:3	3336:24	9	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGLosslessPredictors field in OJPEG image %s" , TIFFFileName ( input ) ) ;
EXPR	3334:3	3334:3	10	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGLosslessPredictors field in OJPEG image %s" , TIFFFileName ( input ) )
FUNCTION_CALL	3334:3	3336:23	11	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGLosslessPredictors field in OJPEG image %s" , TIFFFileName ( input ) )
CALLEE	3334:3	3334:3	12	TIFFError
LEAF_NODE	3334:3	3334:3	13	TIFFError
LEAF_NODE	3334:12	3334:12	12	(
ARGUMENT	3334:13	3334:13	12	TIFF2PDF_MODULE
FIELD	3334:13	3334:13	13	TIFF2PDF_MODULE
LEAF_NODE	3334:13	3334:13	14	TIFF2PDF_MODULE
LEAF_NODE	3334:28	3334:28	12	,
ARGUMENT	3335:4	3335:4	12	"Missing JPEGLosslessPredictors field in OJPEG image %s"
FIELD	3335:4	3335:4	13	"Missing JPEGLosslessPredictors field in OJPEG image %s"
LEAF_NODE	3335:4	3335:4	14	"Missing JPEGLosslessPredictors field in OJPEG image %s"
LEAF_NODE	3335:60	3335:60	12	,
ARGUMENT	3336:4	3336:4	12	TIFFFileName ( input )
FUNCTION_CALL	3336:4	3336:22	13	TIFFFileName ( input )
CALLEE	3336:4	3336:4	14	TIFFFileName
LEAF_NODE	3336:4	3336:4	15	TIFFFileName
LEAF_NODE	3336:16	3336:16	14	(
ARGUMENT	3336:17	3336:17	14	input
FIELD	3336:17	3336:17	15	input
LEAF_NODE	3336:17	3336:17	16	input
LEAF_NODE	3336:22	3336:22	14	)
LEAF_NODE	3336:23	3336:23	12	)
LEAF_NODE	3336:24	3336:24	10	;
EXPR_STATEMENT	3337:4	3337:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3337:4	3337:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3337:4	3337:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3337:4	3337:4	12	t2p -> t2p_error
FIELD	3337:4	3337:9	13	t2p -> t2p_error
LEAF_NODE	3337:4	3337:4	14	t2p
LEAF_NODE	3337:7	3337:7	14	->
LEAF_NODE	3337:9	3337:9	14	t2p_error
ASSIGN_OP	3337:19	3337:19	12	=
LEAF_NODE	3337:19	3337:19	13	=
RVAL	3337:21	3337:21	12	T2P_ERR_ERROR
FIELD	3337:21	3337:21	13	T2P_ERR_ERROR
LEAF_NODE	3337:21	3337:21	14	T2P_ERR_ERROR
LEAF_NODE	3337:34	3337:34	10	;
JUMP_STATEMENT	3338:4	3338:13	9	return ( 0 ) ;
KEYWORD	3338:4	3338:4	10	return
LEAF_NODE	3338:4	3338:4	11	return
DESTINATION	3338:10	3338:10	10	( 0 )
EXPR	3338:10	3338:12	11	( 0 )
LEAF_NODE	3338:10	3338:10	12	(
FIELD	3338:11	3338:11	12	0
LEAF_NODE	3338:11	3338:11	13	0
LEAF_NODE	3338:12	3338:12	12	)
LEAF_NODE	3338:13	3338:13	10	;
LEAF_NODE	3339:2	3339:2	8	}
SELECTION	3340:2	3340:59	6	
KEYWORD	3340:2	3340:2	7	if
LEAF_NODE	3340:2	3340:2	8	if
LEAF_NODE	3340:4	3340:4	7	(
CONDITION	3340:5	3340:5	7	! TIFFGetField ( input , TIFFTAG_JPEGPOINTTRANSFORM , & pt )
EXPR	3340:5	3340:5	8	! TIFFGetField ( input , TIFFTAG_JPEGPOINTTRANSFORM , & pt )
UNARY_EXPR	3340:5	3340:6	9	! TIFFGetField ( input , TIFFTAG_JPEGPOINTTRANSFORM , & pt )
UNARY_OPERATOR	3340:5	3340:5	10	!
LEAF_NODE	3340:5	3340:5	11	!
FUNCTION_CALL	3340:6	3340:57	10	TIFFGetField ( input , TIFFTAG_JPEGPOINTTRANSFORM , & pt )
CALLEE	3340:6	3340:6	11	TIFFGetField
LEAF_NODE	3340:6	3340:6	12	TIFFGetField
LEAF_NODE	3340:18	3340:18	11	(
ARGUMENT	3340:19	3340:19	11	input
FIELD	3340:19	3340:19	12	input
LEAF_NODE	3340:19	3340:19	13	input
LEAF_NODE	3340:24	3340:24	11	,
ARGUMENT	3340:26	3340:26	11	TIFFTAG_JPEGPOINTTRANSFORM
FIELD	3340:26	3340:26	12	TIFFTAG_JPEGPOINTTRANSFORM
LEAF_NODE	3340:26	3340:26	13	TIFFTAG_JPEGPOINTTRANSFORM
LEAF_NODE	3340:52	3340:52	11	,
ARGUMENT	3340:54	3340:54	11	& pt
UNARY_EXPR	3340:54	3340:55	12	& pt
UNARY_OPERATOR	3340:54	3340:54	13	&
LEAF_NODE	3340:54	3340:54	14	&
FIELD	3340:55	3340:55	13	pt
LEAF_NODE	3340:55	3340:55	14	pt
LEAF_NODE	3340:57	3340:57	11	)
LEAF_NODE	3340:58	3340:58	7	)
STATEMENTS	3340:59	3346:2	7	
LEAF_NODE	3340:59	3340:59	8	{
STATEMENTS	3341:3	3345:3	8	
EXPR_STATEMENT	3341:3	3343:24	9	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGPointTransform field in OJPEG image %s" , TIFFFileName ( input ) ) ;
EXPR	3341:3	3341:3	10	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGPointTransform field in OJPEG image %s" , TIFFFileName ( input ) )
FUNCTION_CALL	3341:3	3343:23	11	TIFFError ( TIFF2PDF_MODULE , "Missing JPEGPointTransform field in OJPEG image %s" , TIFFFileName ( input ) )
CALLEE	3341:3	3341:3	12	TIFFError
LEAF_NODE	3341:3	3341:3	13	TIFFError
LEAF_NODE	3341:12	3341:12	12	(
ARGUMENT	3341:13	3341:13	12	TIFF2PDF_MODULE
FIELD	3341:13	3341:13	13	TIFF2PDF_MODULE
LEAF_NODE	3341:13	3341:13	14	TIFF2PDF_MODULE
LEAF_NODE	3341:28	3341:28	12	,
ARGUMENT	3342:4	3342:4	12	"Missing JPEGPointTransform field in OJPEG image %s"
FIELD	3342:4	3342:4	13	"Missing JPEGPointTransform field in OJPEG image %s"
LEAF_NODE	3342:4	3342:4	14	"Missing JPEGPointTransform field in OJPEG image %s"
LEAF_NODE	3342:56	3342:56	12	,
ARGUMENT	3343:4	3343:4	12	TIFFFileName ( input )
FUNCTION_CALL	3343:4	3343:22	13	TIFFFileName ( input )
CALLEE	3343:4	3343:4	14	TIFFFileName
LEAF_NODE	3343:4	3343:4	15	TIFFFileName
LEAF_NODE	3343:16	3343:16	14	(
ARGUMENT	3343:17	3343:17	14	input
FIELD	3343:17	3343:17	15	input
LEAF_NODE	3343:17	3343:17	16	input
LEAF_NODE	3343:22	3343:22	14	)
LEAF_NODE	3343:23	3343:23	12	)
LEAF_NODE	3343:24	3343:24	10	;
EXPR_STATEMENT	3344:4	3344:34	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3344:4	3344:4	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3344:4	3344:21	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3344:4	3344:4	12	t2p -> t2p_error
FIELD	3344:4	3344:9	13	t2p -> t2p_error
LEAF_NODE	3344:4	3344:4	14	t2p
LEAF_NODE	3344:7	3344:7	14	->
LEAF_NODE	3344:9	3344:9	14	t2p_error
ASSIGN_OP	3344:19	3344:19	12	=
LEAF_NODE	3344:19	3344:19	13	=
RVAL	3344:21	3344:21	12	T2P_ERR_ERROR
FIELD	3344:21	3344:21	13	T2P_ERR_ERROR
LEAF_NODE	3344:21	3344:21	14	T2P_ERR_ERROR
LEAF_NODE	3344:34	3344:34	10	;
JUMP_STATEMENT	3345:3	3345:12	9	return ( 0 ) ;
KEYWORD	3345:3	3345:3	10	return
LEAF_NODE	3345:3	3345:3	11	return
DESTINATION	3345:9	3345:9	10	( 0 )
EXPR	3345:9	3345:11	11	( 0 )
LEAF_NODE	3345:9	3345:9	12	(
FIELD	3345:10	3345:10	12	0
LEAF_NODE	3345:10	3345:10	13	0
LEAF_NODE	3345:11	3345:11	12	)
LEAF_NODE	3345:12	3345:12	10	;
LEAF_NODE	3346:2	3346:2	8	}
LEAF_NODE	3347:1	3347:1	5	}
SELECTION	3348:1	3348:69	3	
KEYWORD	3348:1	3348:1	4	if
LEAF_NODE	3348:1	3348:1	5	if
LEAF_NODE	3348:3	3348:3	4	(
CONDITION	3348:4	3348:4	4	! TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & h_samp , & v_samp )
EXPR	3348:4	3348:4	5	! TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & h_samp , & v_samp )
UNARY_EXPR	3348:4	3348:5	6	! TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & h_samp , & v_samp )
UNARY_OPERATOR	3348:4	3348:4	7	!
LEAF_NODE	3348:4	3348:4	8	!
FUNCTION_CALL	3348:5	3348:67	7	TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & h_samp , & v_samp )
CALLEE	3348:5	3348:5	8	TIFFGetField
LEAF_NODE	3348:5	3348:5	9	TIFFGetField
LEAF_NODE	3348:17	3348:17	8	(
ARGUMENT	3348:18	3348:18	8	input
FIELD	3348:18	3348:18	9	input
LEAF_NODE	3348:18	3348:18	10	input
LEAF_NODE	3348:23	3348:23	8	,
ARGUMENT	3348:25	3348:25	8	TIFFTAG_YCBCRSUBSAMPLING
FIELD	3348:25	3348:25	9	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	3348:25	3348:25	10	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	3348:49	3348:49	8	,
ARGUMENT	3348:51	3348:51	8	& h_samp
UNARY_EXPR	3348:51	3348:52	9	& h_samp
UNARY_OPERATOR	3348:51	3348:51	10	&
LEAF_NODE	3348:51	3348:51	11	&
FIELD	3348:52	3348:52	10	h_samp
LEAF_NODE	3348:52	3348:52	11	h_samp
LEAF_NODE	3348:58	3348:58	8	,
ARGUMENT	3348:60	3348:60	8	& v_samp
UNARY_EXPR	3348:60	3348:61	9	& v_samp
UNARY_OPERATOR	3348:60	3348:60	10	&
LEAF_NODE	3348:60	3348:60	11	&
FIELD	3348:61	3348:61	10	v_samp
LEAF_NODE	3348:61	3348:61	11	v_samp
LEAF_NODE	3348:67	3348:67	8	)
LEAF_NODE	3348:68	3348:68	4	)
STATEMENTS	3348:69	3351:1	4	
LEAF_NODE	3348:69	3348:69	5	{
STATEMENTS	3349:2	3350:2	5	
EXPR_STATEMENT	3349:2	3349:10	6	h_samp = 1 ;
EXPR	3349:2	3349:2	7	h_samp = 1
ASSIGN	3349:2	3349:9	8	h_samp = 1
LVAL	3349:2	3349:2	9	h_samp
FIELD	3349:2	3349:2	10	h_samp
LEAF_NODE	3349:2	3349:2	11	h_samp
ASSIGN_OP	3349:8	3349:8	9	=
LEAF_NODE	3349:8	3349:8	10	=
RVAL	3349:9	3349:9	9	1
FIELD	3349:9	3349:9	10	1
LEAF_NODE	3349:9	3349:9	11	1
LEAF_NODE	3349:10	3349:10	7	;
EXPR_STATEMENT	3350:2	3350:10	6	v_samp = 1 ;
EXPR	3350:2	3350:2	7	v_samp = 1
ASSIGN	3350:2	3350:9	8	v_samp = 1
LVAL	3350:2	3350:2	9	v_samp
FIELD	3350:2	3350:2	10	v_samp
LEAF_NODE	3350:2	3350:2	11	v_samp
ASSIGN_OP	3350:8	3350:8	9	=
LEAF_NODE	3350:8	3350:8	10	=
RVAL	3350:9	3350:9	9	1
FIELD	3350:9	3350:9	10	1
LEAF_NODE	3350:9	3350:9	11	1
LEAF_NODE	3350:10	3350:10	7	;
LEAF_NODE	3351:1	3351:1	5	}
SELECTION	3352:1	3352:31	3	
KEYWORD	3352:1	3352:1	4	if
LEAF_NODE	3352:1	3352:1	5	if
LEAF_NODE	3352:3	3352:3	4	(
CONDITION	3352:4	3352:4	4	t2p -> pdf_ojpegdata != NULL
EXPR	3352:4	3352:26	5	t2p -> pdf_ojpegdata != NULL
FIELD	3352:4	3352:9	6	t2p -> pdf_ojpegdata
LEAF_NODE	3352:4	3352:4	7	t2p
LEAF_NODE	3352:7	3352:7	7	->
LEAF_NODE	3352:9	3352:9	7	pdf_ojpegdata
EQ_OPERATOR	3352:23	3352:23	6	!=
LEAF_NODE	3352:23	3352:23	7	!=
FIELD	3352:26	3352:26	6	NULL
LEAF_NODE	3352:26	3352:26	7	NULL
LEAF_NODE	3352:30	3352:30	4	)
STATEMENTS	3352:31	3355:1	4	
LEAF_NODE	3352:31	3352:31	5	{
STATEMENTS	3353:2	3354:2	5	
EXPR_STATEMENT	3353:2	3353:31	6	_TIFFfree ( t2p -> pdf_ojpegdata ) ;
EXPR	3353:2	3353:2	7	_TIFFfree ( t2p -> pdf_ojpegdata )
FUNCTION_CALL	3353:2	3353:30	8	_TIFFfree ( t2p -> pdf_ojpegdata )
CALLEE	3353:2	3353:2	9	_TIFFfree
LEAF_NODE	3353:2	3353:2	10	_TIFFfree
LEAF_NODE	3353:11	3353:11	9	(
ARGUMENT	3353:12	3353:12	9	t2p -> pdf_ojpegdata
FIELD	3353:12	3353:17	10	t2p -> pdf_ojpegdata
LEAF_NODE	3353:12	3353:12	11	t2p
LEAF_NODE	3353:15	3353:15	11	->
LEAF_NODE	3353:17	3353:17	11	pdf_ojpegdata
LEAF_NODE	3353:30	3353:30	9	)
LEAF_NODE	3353:31	3353:31	7	;
EXPR_STATEMENT	3354:2	3354:25	6	t2p -> pdf_ojpegdata = NULL ;
EXPR	3354:2	3354:2	7	t2p -> pdf_ojpegdata = NULL
ASSIGN	3354:2	3354:21	8	t2p -> pdf_ojpegdata = NULL
LVAL	3354:2	3354:2	9	t2p -> pdf_ojpegdata
FIELD	3354:2	3354:7	10	t2p -> pdf_ojpegdata
LEAF_NODE	3354:2	3354:2	11	t2p
LEAF_NODE	3354:5	3354:5	11	->
LEAF_NODE	3354:7	3354:7	11	pdf_ojpegdata
ASSIGN_OP	3354:20	3354:20	9	=
LEAF_NODE	3354:20	3354:20	10	=
RVAL	3354:21	3354:21	9	NULL
FIELD	3354:21	3354:21	10	NULL
LEAF_NODE	3354:21	3354:21	11	NULL
LEAF_NODE	3354:25	3354:25	7	;
LEAF_NODE	3355:1	3355:1	5	}
EXPR_STATEMENT	3356:1	3356:39	3	t2p -> pdf_ojpegdata = _TIFFmalloc ( 2048 ) ;
EXPR	3356:1	3356:1	4	t2p -> pdf_ojpegdata = _TIFFmalloc ( 2048 )
ASSIGN	3356:1	3356:22	5	t2p -> pdf_ojpegdata = _TIFFmalloc ( 2048 )
LVAL	3356:1	3356:1	6	t2p -> pdf_ojpegdata
FIELD	3356:1	3356:6	7	t2p -> pdf_ojpegdata
LEAF_NODE	3356:1	3356:1	8	t2p
LEAF_NODE	3356:4	3356:4	8	->
LEAF_NODE	3356:6	3356:6	8	pdf_ojpegdata
ASSIGN_OP	3356:20	3356:20	6	=
LEAF_NODE	3356:20	3356:20	7	=
RVAL	3356:22	3356:22	6	_TIFFmalloc ( 2048 )
FUNCTION_CALL	3356:22	3356:38	7	_TIFFmalloc ( 2048 )
CALLEE	3356:22	3356:22	8	_TIFFmalloc
LEAF_NODE	3356:22	3356:22	9	_TIFFmalloc
LEAF_NODE	3356:33	3356:33	8	(
ARGUMENT	3356:34	3356:34	8	2048
FIELD	3356:34	3356:34	9	2048
LEAF_NODE	3356:34	3356:34	10	2048
LEAF_NODE	3356:38	3356:38	8	)
LEAF_NODE	3356:39	3356:39	4	;
SELECTION	3357:1	3357:31	3	
KEYWORD	3357:1	3357:1	4	if
LEAF_NODE	3357:1	3357:1	5	if
LEAF_NODE	3357:3	3357:3	4	(
CONDITION	3357:4	3357:4	4	t2p -> pdf_ojpegdata == NULL
EXPR	3357:4	3357:26	5	t2p -> pdf_ojpegdata == NULL
FIELD	3357:4	3357:9	6	t2p -> pdf_ojpegdata
LEAF_NODE	3357:4	3357:4	7	t2p
LEAF_NODE	3357:7	3357:7	7	->
LEAF_NODE	3357:9	3357:9	7	pdf_ojpegdata
EQ_OPERATOR	3357:23	3357:23	6	==
LEAF_NODE	3357:23	3357:23	7	==
FIELD	3357:26	3357:26	6	NULL
LEAF_NODE	3357:26	3357:26	7	NULL
LEAF_NODE	3357:30	3357:30	4	)
STATEMENTS	3357:31	3364:1	4	
LEAF_NODE	3357:31	3357:31	5	{
STATEMENTS	3358:2	3363:2	5	
EXPR_STATEMENT	3358:2	3361:23	6	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_process_ojpeg_tables, %s" , 2048 , TIFFFileName ( input ) ) ;
EXPR	3358:2	3358:2	7	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_process_ojpeg_tables, %s" , 2048 , TIFFFileName ( input ) )
FUNCTION_CALL	3358:2	3361:22	8	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_process_ojpeg_tables, %s" , 2048 , TIFFFileName ( input ) )
CALLEE	3358:2	3358:2	9	TIFFError
LEAF_NODE	3358:2	3358:2	10	TIFFError
LEAF_NODE	3358:11	3358:11	9	(
ARGUMENT	3358:12	3358:12	9	TIFF2PDF_MODULE
FIELD	3358:12	3358:12	10	TIFF2PDF_MODULE
LEAF_NODE	3358:12	3358:12	11	TIFF2PDF_MODULE
LEAF_NODE	3358:27	3358:27	9	,
ARGUMENT	3359:3	3359:3	9	"Can't allocate %u bytes of memory for t2p_process_ojpeg_tables, %s"
FIELD	3359:3	3359:3	10	"Can't allocate %u bytes of memory for t2p_process_ojpeg_tables, %s"
LEAF_NODE	3359:3	3359:3	11	"Can't allocate %u bytes of memory for t2p_process_ojpeg_tables, %s"
LEAF_NODE	3359:71	3359:71	9	,
ARGUMENT	3360:3	3360:3	9	2048
FIELD	3360:3	3360:3	10	2048
LEAF_NODE	3360:3	3360:3	11	2048
LEAF_NODE	3360:7	3360:7	9	,
ARGUMENT	3361:3	3361:3	9	TIFFFileName ( input )
FUNCTION_CALL	3361:3	3361:21	10	TIFFFileName ( input )
CALLEE	3361:3	3361:3	11	TIFFFileName
LEAF_NODE	3361:3	3361:3	12	TIFFFileName
LEAF_NODE	3361:15	3361:15	11	(
ARGUMENT	3361:16	3361:16	11	input
FIELD	3361:16	3361:16	12	input
LEAF_NODE	3361:16	3361:16	13	input
LEAF_NODE	3361:21	3361:21	11	)
LEAF_NODE	3361:22	3361:22	9	)
LEAF_NODE	3361:23	3361:23	7	;
EXPR_STATEMENT	3362:2	3362:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3362:2	3362:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3362:2	3362:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3362:2	3362:2	9	t2p -> t2p_error
FIELD	3362:2	3362:7	10	t2p -> t2p_error
LEAF_NODE	3362:2	3362:2	11	t2p
LEAF_NODE	3362:5	3362:5	11	->
LEAF_NODE	3362:7	3362:7	11	t2p_error
ASSIGN_OP	3362:17	3362:17	9	=
LEAF_NODE	3362:17	3362:17	10	=
RVAL	3362:19	3362:19	9	T2P_ERR_ERROR
FIELD	3362:19	3362:19	10	T2P_ERR_ERROR
LEAF_NODE	3362:19	3362:19	11	T2P_ERR_ERROR
LEAF_NODE	3362:32	3362:32	7	;
JUMP_STATEMENT	3363:2	3363:11	6	return ( 0 ) ;
KEYWORD	3363:2	3363:2	7	return
LEAF_NODE	3363:2	3363:2	8	return
DESTINATION	3363:8	3363:8	7	( 0 )
EXPR	3363:8	3363:10	8	( 0 )
LEAF_NODE	3363:8	3363:8	9	(
FIELD	3363:9	3363:9	9	0
LEAF_NODE	3363:9	3363:9	10	0
LEAF_NODE	3363:10	3363:10	9	)
LEAF_NODE	3363:11	3363:11	7	;
LEAF_NODE	3364:1	3364:1	5	}
EXPR_STATEMENT	3365:1	3365:44	3	_TIFFmemset ( t2p -> pdf_ojpegdata , 0x00 , 2048 ) ;
EXPR	3365:1	3365:1	4	_TIFFmemset ( t2p -> pdf_ojpegdata , 0x00 , 2048 )
FUNCTION_CALL	3365:1	3365:43	5	_TIFFmemset ( t2p -> pdf_ojpegdata , 0x00 , 2048 )
CALLEE	3365:1	3365:1	6	_TIFFmemset
LEAF_NODE	3365:1	3365:1	7	_TIFFmemset
LEAF_NODE	3365:12	3365:12	6	(
ARGUMENT	3365:13	3365:13	6	t2p -> pdf_ojpegdata
FIELD	3365:13	3365:18	7	t2p -> pdf_ojpegdata
LEAF_NODE	3365:13	3365:13	8	t2p
LEAF_NODE	3365:16	3365:16	8	->
LEAF_NODE	3365:18	3365:18	8	pdf_ojpegdata
LEAF_NODE	3365:31	3365:31	6	,
ARGUMENT	3365:33	3365:33	6	0x00
FIELD	3365:33	3365:33	7	0x00
LEAF_NODE	3365:33	3365:33	8	0x00
LEAF_NODE	3365:37	3365:37	6	,
ARGUMENT	3365:39	3365:39	6	2048
FIELD	3365:39	3365:39	7	2048
LEAF_NODE	3365:39	3365:39	8	2048
LEAF_NODE	3365:43	3365:43	6	)
LEAF_NODE	3365:44	3365:44	4	;
EXPR_STATEMENT	3366:1	3366:29	3	t2p -> pdf_ojpegdatalength = 0 ;
EXPR	3366:1	3366:1	4	t2p -> pdf_ojpegdatalength = 0
ASSIGN	3366:1	3366:28	5	t2p -> pdf_ojpegdatalength = 0
LVAL	3366:1	3366:1	6	t2p -> pdf_ojpegdatalength
FIELD	3366:1	3366:6	7	t2p -> pdf_ojpegdatalength
LEAF_NODE	3366:1	3366:1	8	t2p
LEAF_NODE	3366:4	3366:4	8	->
LEAF_NODE	3366:6	3366:6	8	pdf_ojpegdatalength
ASSIGN_OP	3366:26	3366:26	6	=
LEAF_NODE	3366:26	3366:26	7	=
RVAL	3366:28	3366:28	6	0
FIELD	3366:28	3366:28	7	0
LEAF_NODE	3366:28	3366:28	8	0
LEAF_NODE	3366:29	3366:29	4	;
EXPR_STATEMENT	3367:1	3367:38	3	table_count = t2p -> tiff_samplesperpixel ;
EXPR	3367:1	3367:1	4	table_count = t2p -> tiff_samplesperpixel
ASSIGN	3367:1	3367:13	5	table_count = t2p -> tiff_samplesperpixel
LVAL	3367:1	3367:1	6	table_count
FIELD	3367:1	3367:1	7	table_count
LEAF_NODE	3367:1	3367:1	8	table_count
ASSIGN_OP	3367:12	3367:12	6	=
LEAF_NODE	3367:12	3367:12	7	=
RVAL	3367:13	3367:13	6	t2p -> tiff_samplesperpixel
FIELD	3367:13	3367:18	7	t2p -> tiff_samplesperpixel
LEAF_NODE	3367:13	3367:13	8	t2p
LEAF_NODE	3367:16	3367:16	8	->
LEAF_NODE	3367:18	3367:18	8	tiff_samplesperpixel
LEAF_NODE	3367:38	3367:38	4	;
SELECTION	3368:1	3368:28	3	
KEYWORD	3368:1	3368:1	4	if
LEAF_NODE	3368:1	3368:1	5	if
LEAF_NODE	3368:3	3368:3	4	(
CONDITION	3368:4	3368:4	4	proc == JPEGPROC_BASELINE
EXPR	3368:4	3368:10	5	proc == JPEGPROC_BASELINE
FIELD	3368:4	3368:4	6	proc
LEAF_NODE	3368:4	3368:4	7	proc
EQ_OPERATOR	3368:8	3368:8	6	==
LEAF_NODE	3368:8	3368:8	7	==
FIELD	3368:10	3368:10	6	JPEGPROC_BASELINE
LEAF_NODE	3368:10	3368:10	7	JPEGPROC_BASELINE
LEAF_NODE	3368:27	3368:27	4	)
STATEMENTS	3368:28	3370:1	4	
LEAF_NODE	3368:28	3368:28	5	{
STATEMENTS	3369:2	3369:2	5	
SELECTION	3369:2	3369:20	6	
KEYWORD	3369:2	3369:2	7	if
LEAF_NODE	3369:2	3369:2	8	if
LEAF_NODE	3369:4	3369:4	7	(
CONDITION	3369:5	3369:5	7	table_count > 2
EXPR	3369:5	3369:17	8	table_count > 2
FIELD	3369:5	3369:5	9	table_count
LEAF_NODE	3369:5	3369:5	10	table_count
REL_OPERATOR	3369:16	3369:16	9	>
LEAF_NODE	3369:16	3369:16	10	>
FIELD	3369:17	3369:17	9	2
LEAF_NODE	3369:17	3369:17	10	2
LEAF_NODE	3369:18	3369:18	7	)
STATEMENTS	3369:20	3369:20	7	
EXPR_STATEMENT	3369:20	3369:33	8	table_count = 2 ;
EXPR	3369:20	3369:20	9	table_count = 2
ASSIGN	3369:20	3369:32	10	table_count = 2
LVAL	3369:20	3369:20	11	table_count
FIELD	3369:20	3369:20	12	table_count
LEAF_NODE	3369:20	3369:20	13	table_count
ASSIGN_OP	3369:31	3369:31	11	=
LEAF_NODE	3369:31	3369:31	12	=
RVAL	3369:32	3369:32	11	2
FIELD	3369:32	3369:32	12	2
LEAF_NODE	3369:32	3369:32	13	2
LEAF_NODE	3369:33	3369:33	9	;
LEAF_NODE	3370:1	3370:1	5	}
EXPR_STATEMENT	3371:1	3371:45	3	ojpegdata = ( unsigned char * ) t2p -> pdf_ojpegdata ;
EXPR	3371:1	3371:1	4	ojpegdata = ( unsigned char * ) t2p -> pdf_ojpegdata
ASSIGN	3371:1	3371:11	5	ojpegdata = ( unsigned char * ) t2p -> pdf_ojpegdata
LVAL	3371:1	3371:1	6	ojpegdata
FIELD	3371:1	3371:1	7	ojpegdata
LEAF_NODE	3371:1	3371:1	8	ojpegdata
ASSIGN_OP	3371:10	3371:10	6	=
LEAF_NODE	3371:10	3371:10	7	=
RVAL	3371:11	3371:27	6	( unsigned char * ) t2p -> pdf_ojpegdata
LEAF_NODE	3371:11	3371:11	7	(
TYPE_NAME	3371:12	3371:21	7	unsigned char
LEAF_NODE	3371:12	3371:12	8	unsigned
LEAF_NODE	3371:21	3371:21	8	char
LEAF_NODE	3371:25	3371:25	7	*
LEAF_NODE	3371:26	3371:26	7	)
FIELD	3371:27	3371:32	7	t2p -> pdf_ojpegdata
LEAF_NODE	3371:27	3371:27	8	t2p
LEAF_NODE	3371:30	3371:30	8	->
LEAF_NODE	3371:32	3371:32	8	pdf_ojpegdata
LEAF_NODE	3371:45	3371:45	4	;
EXPR_STATEMENT	3372:1	3372:43	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff ;
EXPR	3372:1	3372:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
ASSIGN	3372:1	3372:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
LVAL	3372:1	3372:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3372:1	3372:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3372:1	3372:1	8	ojpegdata
LEAF_NODE	3372:10	3372:10	8	[
EXPR	3372:11	3372:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3372:11	3372:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3372:11	3372:11	10	t2p
LEAF_NODE	3372:14	3372:14	10	->
LEAF_NODE	3372:16	3372:16	10	pdf_ojpegdatalength
LEAF_NODE	3372:35	3372:35	10	++
LEAF_NODE	3372:37	3372:37	8	]
ASSIGN_OP	3372:38	3372:38	6	=
LEAF_NODE	3372:38	3372:38	7	=
RVAL	3372:39	3372:39	6	0xff
FIELD	3372:39	3372:39	7	0xff
LEAF_NODE	3372:39	3372:39	8	0xff
LEAF_NODE	3372:43	3372:43	4	;
EXPR_STATEMENT	3373:1	3373:43	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xd8 ;
EXPR	3373:1	3373:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xd8
ASSIGN	3373:1	3373:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xd8
LVAL	3373:1	3373:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3373:1	3373:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3373:1	3373:1	8	ojpegdata
LEAF_NODE	3373:10	3373:10	8	[
EXPR	3373:11	3373:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3373:11	3373:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3373:11	3373:11	10	t2p
LEAF_NODE	3373:14	3373:14	10	->
LEAF_NODE	3373:16	3373:16	10	pdf_ojpegdatalength
LEAF_NODE	3373:35	3373:35	10	++
LEAF_NODE	3373:37	3373:37	8	]
ASSIGN_OP	3373:38	3373:38	6	=
LEAF_NODE	3373:38	3373:38	7	=
RVAL	3373:39	3373:39	6	0xd8
FIELD	3373:39	3373:39	7	0xd8
LEAF_NODE	3373:39	3373:39	8	0xd8
LEAF_NODE	3373:43	3373:43	4	;
EXPR_STATEMENT	3374:1	3374:43	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff ;
EXPR	3374:1	3374:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
ASSIGN	3374:1	3374:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
LVAL	3374:1	3374:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3374:1	3374:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3374:1	3374:1	8	ojpegdata
LEAF_NODE	3374:10	3374:10	8	[
EXPR	3374:11	3374:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3374:11	3374:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3374:11	3374:11	10	t2p
LEAF_NODE	3374:14	3374:14	10	->
LEAF_NODE	3374:16	3374:16	10	pdf_ojpegdatalength
LEAF_NODE	3374:35	3374:35	10	++
LEAF_NODE	3374:37	3374:37	8	]
ASSIGN_OP	3374:38	3374:38	6	=
LEAF_NODE	3374:38	3374:38	7	=
RVAL	3374:39	3374:39	6	0xff
FIELD	3374:39	3374:39	7	0xff
LEAF_NODE	3374:39	3374:39	8	0xff
LEAF_NODE	3374:43	3374:43	4	;
SELECTION	3375:1	3375:28	3	
KEYWORD	3375:1	3375:1	4	if
LEAF_NODE	3375:1	3375:1	5	if
LEAF_NODE	3375:3	3375:3	4	(
CONDITION	3375:4	3375:4	4	proc == JPEGPROC_BASELINE
EXPR	3375:4	3375:10	5	proc == JPEGPROC_BASELINE
FIELD	3375:4	3375:4	6	proc
LEAF_NODE	3375:4	3375:4	7	proc
EQ_OPERATOR	3375:8	3375:8	6	==
LEAF_NODE	3375:8	3375:8	7	==
FIELD	3375:10	3375:10	6	JPEGPROC_BASELINE
LEAF_NODE	3375:10	3375:10	7	JPEGPROC_BASELINE
LEAF_NODE	3375:27	3375:27	4	)
STATEMENTS	3375:28	3377:1	4	
LEAF_NODE	3375:28	3375:28	5	{
STATEMENTS	3376:2	3376:2	5	
EXPR_STATEMENT	3376:2	3376:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc0 ;
EXPR	3376:2	3376:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc0
ASSIGN	3376:2	3376:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc0
LVAL	3376:2	3376:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3376:2	3376:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3376:2	3376:2	11	ojpegdata
LEAF_NODE	3376:11	3376:11	11	[
EXPR	3376:12	3376:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3376:12	3376:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3376:12	3376:12	13	t2p
LEAF_NODE	3376:15	3376:15	13	->
LEAF_NODE	3376:17	3376:17	13	pdf_ojpegdatalength
LEAF_NODE	3376:36	3376:36	13	++
LEAF_NODE	3376:38	3376:38	11	]
ASSIGN_OP	3376:39	3376:39	9	=
LEAF_NODE	3376:39	3376:39	10	=
RVAL	3376:40	3376:40	9	0xc0
FIELD	3376:40	3376:40	10	0xc0
LEAF_NODE	3376:40	3376:40	11	0xc0
LEAF_NODE	3376:44	3376:44	7	;
LEAF_NODE	3377:1	3377:1	5	}
SELECTION	3377:3	3377:8	3	
KEYWORD	3377:3	3377:3	4	else
LEAF_NODE	3377:3	3377:3	5	else
STATEMENTS	3377:8	3379:1	4	
LEAF_NODE	3377:8	3377:8	5	{
STATEMENTS	3378:2	3378:2	5	
EXPR_STATEMENT	3378:2	3378:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc3 ;
EXPR	3378:2	3378:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc3
ASSIGN	3378:2	3378:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc3
LVAL	3378:2	3378:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3378:2	3378:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3378:2	3378:2	11	ojpegdata
LEAF_NODE	3378:11	3378:11	11	[
EXPR	3378:12	3378:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3378:12	3378:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3378:12	3378:12	13	t2p
LEAF_NODE	3378:15	3378:15	13	->
LEAF_NODE	3378:17	3378:17	13	pdf_ojpegdatalength
LEAF_NODE	3378:36	3378:36	13	++
LEAF_NODE	3378:38	3378:38	11	]
ASSIGN_OP	3378:39	3378:39	9	=
LEAF_NODE	3378:39	3378:39	10	=
RVAL	3378:40	3378:40	9	0xc3
FIELD	3378:40	3378:40	10	0xc3
LEAF_NODE	3378:40	3378:40	11	0xc3
LEAF_NODE	3378:44	3378:44	7	;
LEAF_NODE	3379:1	3379:1	5	}
EXPR_STATEMENT	3380:1	3380:43	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00 ;
EXPR	3380:1	3380:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00
ASSIGN	3380:1	3380:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00
LVAL	3380:1	3380:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3380:1	3380:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3380:1	3380:1	8	ojpegdata
LEAF_NODE	3380:10	3380:10	8	[
EXPR	3380:11	3380:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3380:11	3380:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3380:11	3380:11	10	t2p
LEAF_NODE	3380:14	3380:14	10	->
LEAF_NODE	3380:16	3380:16	10	pdf_ojpegdatalength
LEAF_NODE	3380:35	3380:35	10	++
LEAF_NODE	3380:37	3380:37	8	]
ASSIGN_OP	3380:38	3380:38	6	=
LEAF_NODE	3380:38	3380:38	7	=
RVAL	3380:39	3380:39	6	0x00
FIELD	3380:39	3380:39	7	0x00
LEAF_NODE	3380:39	3380:39	8	0x00
LEAF_NODE	3380:43	3380:43	4	;
EXPR_STATEMENT	3381:1	3381:72	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( 8 + 3 * t2p -> tiff_samplesperpixel ) ;
EXPR	3381:1	3381:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( 8 + 3 * t2p -> tiff_samplesperpixel )
ASSIGN	3381:1	3381:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( 8 + 3 * t2p -> tiff_samplesperpixel )
LVAL	3381:1	3381:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3381:1	3381:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3381:1	3381:1	8	ojpegdata
LEAF_NODE	3381:10	3381:10	8	[
EXPR	3381:11	3381:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3381:11	3381:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3381:11	3381:11	10	t2p
LEAF_NODE	3381:14	3381:14	10	->
LEAF_NODE	3381:16	3381:16	10	pdf_ojpegdatalength
LEAF_NODE	3381:35	3381:35	10	++
LEAF_NODE	3381:37	3381:37	8	]
ASSIGN_OP	3381:38	3381:38	6	=
LEAF_NODE	3381:38	3381:38	7	=
RVAL	3381:39	3381:71	6	( 8 + 3 * t2p -> tiff_samplesperpixel )
LEAF_NODE	3381:39	3381:39	7	(
FIELD	3381:40	3381:40	7	8
LEAF_NODE	3381:40	3381:40	8	8
LEAF_NODE	3381:42	3381:42	7	+
FIELD	3381:44	3381:44	7	3
LEAF_NODE	3381:44	3381:44	8	3
LEAF_NODE	3381:45	3381:45	7	*
FIELD	3381:46	3381:51	7	t2p -> tiff_samplesperpixel
LEAF_NODE	3381:46	3381:46	8	t2p
LEAF_NODE	3381:49	3381:49	8	->
LEAF_NODE	3381:51	3381:51	8	tiff_samplesperpixel
LEAF_NODE	3381:71	3381:71	7	)
LEAF_NODE	3381:72	3381:72	4	;
EXPR_STATEMENT	3382:1	3382:71	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_bitspersample & 0xff ) ;
EXPR	3382:1	3382:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_bitspersample & 0xff )
ASSIGN	3382:1	3382:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_bitspersample & 0xff )
LVAL	3382:1	3382:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3382:1	3382:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3382:1	3382:1	8	ojpegdata
LEAF_NODE	3382:10	3382:10	8	[
EXPR	3382:11	3382:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3382:11	3382:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3382:11	3382:11	10	t2p
LEAF_NODE	3382:14	3382:14	10	->
LEAF_NODE	3382:16	3382:16	10	pdf_ojpegdatalength
LEAF_NODE	3382:35	3382:35	10	++
LEAF_NODE	3382:37	3382:37	8	]
ASSIGN_OP	3382:38	3382:38	6	=
LEAF_NODE	3382:38	3382:38	7	=
RVAL	3382:39	3382:70	6	( t2p -> tiff_bitspersample & 0xff )
LEAF_NODE	3382:39	3382:39	7	(
FIELD	3382:40	3382:45	7	t2p -> tiff_bitspersample
LEAF_NODE	3382:40	3382:40	8	t2p
LEAF_NODE	3382:43	3382:43	8	->
LEAF_NODE	3382:45	3382:45	8	tiff_bitspersample
LEAF_NODE	3382:64	3382:64	7	&
FIELD	3382:66	3382:66	7	0xff
LEAF_NODE	3382:66	3382:66	8	0xff
LEAF_NODE	3382:70	3382:70	7	)
LEAF_NODE	3382:71	3382:71	4	;
SELECTION	3383:1	3383:23	3	
KEYWORD	3383:1	3383:1	4	if
LEAF_NODE	3383:1	3383:1	5	if
LEAF_NODE	3383:3	3383:3	4	(
CONDITION	3383:4	3383:4	4	TIFFIsTiled ( input )
EXPR	3383:4	3383:4	5	TIFFIsTiled ( input )
FUNCTION_CALL	3383:4	3383:21	6	TIFFIsTiled ( input )
CALLEE	3383:4	3383:4	7	TIFFIsTiled
LEAF_NODE	3383:4	3383:4	8	TIFFIsTiled
LEAF_NODE	3383:15	3383:15	7	(
ARGUMENT	3383:16	3383:16	7	input
FIELD	3383:16	3383:16	8	input
LEAF_NODE	3383:16	3383:16	9	input
LEAF_NODE	3383:21	3383:21	7	)
LEAF_NODE	3383:22	3383:22	4	)
STATEMENTS	3383:23	3392:1	4	
LEAF_NODE	3383:23	3383:23	5	{
STATEMENTS	3384:2	3390:2	5	
EXPR_STATEMENT	3384:2	3385:64	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength >> 8 ) & 0xff ;
EXPR	3384:2	3384:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength >> 8 ) & 0xff
ASSIGN	3384:2	3385:3	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength >> 8 ) & 0xff
LVAL	3384:2	3384:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3384:2	3384:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3384:2	3384:2	11	ojpegdata
LEAF_NODE	3384:11	3384:11	11	[
EXPR	3384:12	3384:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3384:12	3384:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3384:12	3384:12	13	t2p
LEAF_NODE	3384:15	3384:15	13	->
LEAF_NODE	3384:17	3384:17	13	pdf_ojpegdatalength
LEAF_NODE	3384:36	3384:36	13	++
LEAF_NODE	3384:38	3384:38	11	]
ASSIGN_OP	3384:39	3384:39	9	=
LEAF_NODE	3384:39	3384:39	10	=
RVAL	3385:3	3385:60	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength >> 8 ) & 0xff
LEAF_NODE	3385:3	3385:3	10	(
FIELD	3385:4	3385:35	10	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	3385:4	3385:4	11	t2p
LEAF_NODE	3385:7	3385:7	11	->
LEAF_NODE	3385:9	3385:9	11	tiff_tiles
LEAF_NODE	3385:19	3385:19	11	[
EXPR	3385:20	3385:20	11	t2p -> pdf_page
FIELD	3385:20	3385:25	12	t2p -> pdf_page
LEAF_NODE	3385:20	3385:20	13	t2p
LEAF_NODE	3385:23	3385:23	13	->
LEAF_NODE	3385:25	3385:25	13	pdf_page
LEAF_NODE	3385:33	3385:33	11	]
LEAF_NODE	3385:34	3385:34	11	.
LEAF_NODE	3385:35	3385:35	11	tiles_tilelength
LEAF_NODE	3385:52	3385:52	10	>>
FIELD	3385:55	3385:55	10	8
LEAF_NODE	3385:55	3385:55	11	8
LEAF_NODE	3385:56	3385:56	10	)
LEAF_NODE	3385:58	3385:58	10	&
FIELD	3385:60	3385:60	10	0xff
LEAF_NODE	3385:60	3385:60	11	0xff
LEAF_NODE	3385:64	3385:64	7	;
EXPR_STATEMENT	3386:2	3387:60	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) & 0xff ;
EXPR	3386:2	3386:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) & 0xff
ASSIGN	3386:2	3387:3	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) & 0xff
LVAL	3386:2	3386:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3386:2	3386:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3386:2	3386:2	11	ojpegdata
LEAF_NODE	3386:11	3386:11	11	[
EXPR	3386:12	3386:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3386:12	3386:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3386:12	3386:12	13	t2p
LEAF_NODE	3386:15	3386:15	13	->
LEAF_NODE	3386:17	3386:17	13	pdf_ojpegdatalength
LEAF_NODE	3386:36	3386:36	13	++
LEAF_NODE	3386:38	3386:38	11	]
ASSIGN_OP	3386:39	3386:39	9	=
LEAF_NODE	3386:39	3386:39	10	=
RVAL	3387:3	3387:56	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) & 0xff
LEAF_NODE	3387:3	3387:3	10	(
FIELD	3387:4	3387:35	10	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	3387:4	3387:4	11	t2p
LEAF_NODE	3387:7	3387:7	11	->
LEAF_NODE	3387:9	3387:9	11	tiff_tiles
LEAF_NODE	3387:19	3387:19	11	[
EXPR	3387:20	3387:20	11	t2p -> pdf_page
FIELD	3387:20	3387:25	12	t2p -> pdf_page
LEAF_NODE	3387:20	3387:20	13	t2p
LEAF_NODE	3387:23	3387:23	13	->
LEAF_NODE	3387:25	3387:25	13	pdf_page
LEAF_NODE	3387:33	3387:33	11	]
LEAF_NODE	3387:34	3387:34	11	.
LEAF_NODE	3387:35	3387:35	11	tiles_tilelength
LEAF_NODE	3387:52	3387:52	10	)
LEAF_NODE	3387:54	3387:54	10	&
FIELD	3387:56	3387:56	10	0xff
LEAF_NODE	3387:56	3387:56	11	0xff
LEAF_NODE	3387:60	3387:60	7	;
EXPR_STATEMENT	3388:2	3389:63	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth >> 8 ) & 0xff ;
EXPR	3388:2	3388:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth >> 8 ) & 0xff
ASSIGN	3388:2	3389:3	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth >> 8 ) & 0xff
LVAL	3388:2	3388:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3388:2	3388:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3388:2	3388:2	11	ojpegdata
LEAF_NODE	3388:11	3388:11	11	[
EXPR	3388:12	3388:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3388:12	3388:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3388:12	3388:12	13	t2p
LEAF_NODE	3388:15	3388:15	13	->
LEAF_NODE	3388:17	3388:17	13	pdf_ojpegdatalength
LEAF_NODE	3388:36	3388:36	13	++
LEAF_NODE	3388:38	3388:38	11	]
ASSIGN_OP	3388:39	3388:39	9	=
LEAF_NODE	3388:39	3388:39	10	=
RVAL	3389:3	3389:59	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth >> 8 ) & 0xff
LEAF_NODE	3389:3	3389:3	10	(
FIELD	3389:4	3389:35	10	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	3389:4	3389:4	11	t2p
LEAF_NODE	3389:7	3389:7	11	->
LEAF_NODE	3389:9	3389:9	11	tiff_tiles
LEAF_NODE	3389:19	3389:19	11	[
EXPR	3389:20	3389:20	11	t2p -> pdf_page
FIELD	3389:20	3389:25	12	t2p -> pdf_page
LEAF_NODE	3389:20	3389:20	13	t2p
LEAF_NODE	3389:23	3389:23	13	->
LEAF_NODE	3389:25	3389:25	13	pdf_page
LEAF_NODE	3389:33	3389:33	11	]
LEAF_NODE	3389:34	3389:34	11	.
LEAF_NODE	3389:35	3389:35	11	tiles_tilewidth
LEAF_NODE	3389:51	3389:51	10	>>
FIELD	3389:54	3389:54	10	8
LEAF_NODE	3389:54	3389:54	11	8
LEAF_NODE	3389:55	3389:55	10	)
LEAF_NODE	3389:57	3389:57	10	&
FIELD	3389:59	3389:59	10	0xff
LEAF_NODE	3389:59	3389:59	11	0xff
LEAF_NODE	3389:63	3389:63	7	;
EXPR_STATEMENT	3390:2	3391:59	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth ) & 0xff ;
EXPR	3390:2	3390:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth ) & 0xff
ASSIGN	3390:2	3391:3	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth ) & 0xff
LVAL	3390:2	3390:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3390:2	3390:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3390:2	3390:2	11	ojpegdata
LEAF_NODE	3390:11	3390:11	11	[
EXPR	3390:12	3390:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3390:12	3390:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3390:12	3390:12	13	t2p
LEAF_NODE	3390:15	3390:15	13	->
LEAF_NODE	3390:17	3390:17	13	pdf_ojpegdatalength
LEAF_NODE	3390:36	3390:36	13	++
LEAF_NODE	3390:38	3390:38	11	]
ASSIGN_OP	3390:39	3390:39	9	=
LEAF_NODE	3390:39	3390:39	10	=
RVAL	3391:3	3391:55	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth ) & 0xff
LEAF_NODE	3391:3	3391:3	10	(
FIELD	3391:4	3391:35	10	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	3391:4	3391:4	11	t2p
LEAF_NODE	3391:7	3391:7	11	->
LEAF_NODE	3391:9	3391:9	11	tiff_tiles
LEAF_NODE	3391:19	3391:19	11	[
EXPR	3391:20	3391:20	11	t2p -> pdf_page
FIELD	3391:20	3391:25	12	t2p -> pdf_page
LEAF_NODE	3391:20	3391:20	13	t2p
LEAF_NODE	3391:23	3391:23	13	->
LEAF_NODE	3391:25	3391:25	13	pdf_page
LEAF_NODE	3391:33	3391:33	11	]
LEAF_NODE	3391:34	3391:34	11	.
LEAF_NODE	3391:35	3391:35	11	tiles_tilewidth
LEAF_NODE	3391:51	3391:51	10	)
LEAF_NODE	3391:53	3391:53	10	&
FIELD	3391:55	3391:55	10	0xff
LEAF_NODE	3391:55	3391:55	11	0xff
LEAF_NODE	3391:59	3391:59	7	;
LEAF_NODE	3392:1	3392:1	5	}
SELECTION	3392:3	3392:8	3	
KEYWORD	3392:3	3392:3	4	else
LEAF_NODE	3392:3	3392:3	5	else
STATEMENTS	3392:8	3401:1	4	
LEAF_NODE	3392:8	3392:8	5	{
STATEMENTS	3393:2	3399:2	5	
EXPR_STATEMENT	3393:2	3394:33	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_length >> 8 ) & 0xff ;
EXPR	3393:2	3393:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_length >> 8 ) & 0xff
ASSIGN	3393:2	3394:3	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_length >> 8 ) & 0xff
LVAL	3393:2	3393:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3393:2	3393:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3393:2	3393:2	11	ojpegdata
LEAF_NODE	3393:11	3393:11	11	[
EXPR	3393:12	3393:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3393:12	3393:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3393:12	3393:12	13	t2p
LEAF_NODE	3393:15	3393:15	13	->
LEAF_NODE	3393:17	3393:17	13	pdf_ojpegdatalength
LEAF_NODE	3393:36	3393:36	13	++
LEAF_NODE	3393:38	3393:38	11	]
ASSIGN_OP	3393:39	3393:39	9	=
LEAF_NODE	3393:39	3393:39	10	=
RVAL	3394:3	3394:29	9	( t2p -> tiff_length >> 8 ) & 0xff
LEAF_NODE	3394:3	3394:3	10	(
FIELD	3394:4	3394:9	10	t2p -> tiff_length
LEAF_NODE	3394:4	3394:4	11	t2p
LEAF_NODE	3394:7	3394:7	11	->
LEAF_NODE	3394:9	3394:9	11	tiff_length
LEAF_NODE	3394:21	3394:21	10	>>
FIELD	3394:24	3394:24	10	8
LEAF_NODE	3394:24	3394:24	11	8
LEAF_NODE	3394:25	3394:25	10	)
LEAF_NODE	3394:27	3394:27	10	&
FIELD	3394:29	3394:29	10	0xff
LEAF_NODE	3394:29	3394:29	11	0xff
LEAF_NODE	3394:33	3394:33	7	;
EXPR_STATEMENT	3395:2	3396:29	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_length ) & 0xff ;
EXPR	3395:2	3395:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_length ) & 0xff
ASSIGN	3395:2	3396:3	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_length ) & 0xff
LVAL	3395:2	3395:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3395:2	3395:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3395:2	3395:2	11	ojpegdata
LEAF_NODE	3395:11	3395:11	11	[
EXPR	3395:12	3395:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3395:12	3395:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3395:12	3395:12	13	t2p
LEAF_NODE	3395:15	3395:15	13	->
LEAF_NODE	3395:17	3395:17	13	pdf_ojpegdatalength
LEAF_NODE	3395:36	3395:36	13	++
LEAF_NODE	3395:38	3395:38	11	]
ASSIGN_OP	3395:39	3395:39	9	=
LEAF_NODE	3395:39	3395:39	10	=
RVAL	3396:3	3396:25	9	( t2p -> tiff_length ) & 0xff
LEAF_NODE	3396:3	3396:3	10	(
FIELD	3396:4	3396:9	10	t2p -> tiff_length
LEAF_NODE	3396:4	3396:4	11	t2p
LEAF_NODE	3396:7	3396:7	11	->
LEAF_NODE	3396:9	3396:9	11	tiff_length
LEAF_NODE	3396:21	3396:21	10	)
LEAF_NODE	3396:23	3396:23	10	&
FIELD	3396:25	3396:25	10	0xff
LEAF_NODE	3396:25	3396:25	11	0xff
LEAF_NODE	3396:29	3396:29	7	;
EXPR_STATEMENT	3397:2	3398:32	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_width >> 8 ) & 0xff ;
EXPR	3397:2	3397:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_width >> 8 ) & 0xff
ASSIGN	3397:2	3398:3	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_width >> 8 ) & 0xff
LVAL	3397:2	3397:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3397:2	3397:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3397:2	3397:2	11	ojpegdata
LEAF_NODE	3397:11	3397:11	11	[
EXPR	3397:12	3397:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3397:12	3397:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3397:12	3397:12	13	t2p
LEAF_NODE	3397:15	3397:15	13	->
LEAF_NODE	3397:17	3397:17	13	pdf_ojpegdatalength
LEAF_NODE	3397:36	3397:36	13	++
LEAF_NODE	3397:38	3397:38	11	]
ASSIGN_OP	3397:39	3397:39	9	=
LEAF_NODE	3397:39	3397:39	10	=
RVAL	3398:3	3398:28	9	( t2p -> tiff_width >> 8 ) & 0xff
LEAF_NODE	3398:3	3398:3	10	(
FIELD	3398:4	3398:9	10	t2p -> tiff_width
LEAF_NODE	3398:4	3398:4	11	t2p
LEAF_NODE	3398:7	3398:7	11	->
LEAF_NODE	3398:9	3398:9	11	tiff_width
LEAF_NODE	3398:20	3398:20	10	>>
FIELD	3398:23	3398:23	10	8
LEAF_NODE	3398:23	3398:23	11	8
LEAF_NODE	3398:24	3398:24	10	)
LEAF_NODE	3398:26	3398:26	10	&
FIELD	3398:28	3398:28	10	0xff
LEAF_NODE	3398:28	3398:28	11	0xff
LEAF_NODE	3398:32	3398:32	7	;
EXPR_STATEMENT	3399:2	3400:28	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_width ) & 0xff ;
EXPR	3399:2	3399:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_width ) & 0xff
ASSIGN	3399:2	3400:3	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_width ) & 0xff
LVAL	3399:2	3399:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3399:2	3399:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3399:2	3399:2	11	ojpegdata
LEAF_NODE	3399:11	3399:11	11	[
EXPR	3399:12	3399:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3399:12	3399:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3399:12	3399:12	13	t2p
LEAF_NODE	3399:15	3399:15	13	->
LEAF_NODE	3399:17	3399:17	13	pdf_ojpegdatalength
LEAF_NODE	3399:36	3399:36	13	++
LEAF_NODE	3399:38	3399:38	11	]
ASSIGN_OP	3399:39	3399:39	9	=
LEAF_NODE	3399:39	3399:39	10	=
RVAL	3400:3	3400:24	9	( t2p -> tiff_width ) & 0xff
LEAF_NODE	3400:3	3400:3	10	(
FIELD	3400:4	3400:9	10	t2p -> tiff_width
LEAF_NODE	3400:4	3400:4	11	t2p
LEAF_NODE	3400:7	3400:7	11	->
LEAF_NODE	3400:9	3400:9	11	tiff_width
LEAF_NODE	3400:20	3400:20	10	)
LEAF_NODE	3400:22	3400:22	10	&
FIELD	3400:24	3400:24	10	0xff
LEAF_NODE	3400:24	3400:24	11	0xff
LEAF_NODE	3400:28	3400:28	7	;
LEAF_NODE	3401:1	3401:1	5	}
EXPR_STATEMENT	3402:1	3402:73	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_samplesperpixel & 0xff ) ;
EXPR	3402:1	3402:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_samplesperpixel & 0xff )
ASSIGN	3402:1	3402:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( t2p -> tiff_samplesperpixel & 0xff )
LVAL	3402:1	3402:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3402:1	3402:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3402:1	3402:1	8	ojpegdata
LEAF_NODE	3402:10	3402:10	8	[
EXPR	3402:11	3402:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3402:11	3402:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3402:11	3402:11	10	t2p
LEAF_NODE	3402:14	3402:14	10	->
LEAF_NODE	3402:16	3402:16	10	pdf_ojpegdatalength
LEAF_NODE	3402:35	3402:35	10	++
LEAF_NODE	3402:37	3402:37	8	]
ASSIGN_OP	3402:38	3402:38	6	=
LEAF_NODE	3402:38	3402:38	7	=
RVAL	3402:39	3402:72	6	( t2p -> tiff_samplesperpixel & 0xff )
LEAF_NODE	3402:39	3402:39	7	(
FIELD	3402:40	3402:45	7	t2p -> tiff_samplesperpixel
LEAF_NODE	3402:40	3402:40	8	t2p
LEAF_NODE	3402:43	3402:43	8	->
LEAF_NODE	3402:45	3402:45	8	tiff_samplesperpixel
LEAF_NODE	3402:66	3402:66	7	&
FIELD	3402:68	3402:68	7	0xff
LEAF_NODE	3402:68	3402:68	8	0xff
LEAF_NODE	3402:72	3402:72	7	)
LEAF_NODE	3402:73	3402:73	4	;
ITERATION	3403:1	3403:41	3	
KEYWORD	3403:1	3403:1	4	for
LEAF_NODE	3403:1	3403:1	5	for
LEAF_NODE	3403:4	3403:4	4	(
FOR_INIT	3403:5	3403:8	4	i = 0 ;
EXPR	3403:5	3403:5	5	i = 0
ASSIGN	3403:5	3403:7	6	i = 0
LVAL	3403:5	3403:5	7	i
FIELD	3403:5	3403:5	8	i
LEAF_NODE	3403:5	3403:5	9	i
ASSIGN_OP	3403:6	3403:6	7	=
LEAF_NODE	3403:6	3403:6	8	=
RVAL	3403:7	3403:7	7	0
FIELD	3403:7	3403:7	8	0
LEAF_NODE	3403:7	3403:7	9	0
LEAF_NODE	3403:8	3403:8	5	;
CONDITION	3403:9	3403:9	4	i < t2p -> tiff_samplesperpixel
EXPR	3403:9	3403:11	5	i < t2p -> tiff_samplesperpixel
FIELD	3403:9	3403:9	6	i
LEAF_NODE	3403:9	3403:9	7	i
REL_OPERATOR	3403:10	3403:10	6	<
LEAF_NODE	3403:10	3403:10	7	<
FIELD	3403:11	3403:16	6	t2p -> tiff_samplesperpixel
LEAF_NODE	3403:11	3403:11	7	t2p
LEAF_NODE	3403:14	3403:14	7	->
LEAF_NODE	3403:16	3403:16	7	tiff_samplesperpixel
LEAF_NODE	3403:36	3403:36	4	;
FOR_EXPR	3403:37	3403:37	4	i ++
EXPR	3403:37	3403:37	5	i ++
FIELD	3403:37	3403:38	6	i ++
LEAF_NODE	3403:37	3403:37	7	i
LEAF_NODE	3403:38	3403:38	7	++
LEAF_NODE	3403:40	3403:40	4	)
STATEMENTS	3403:41	3412:1	4	
LEAF_NODE	3403:41	3403:41	5	{
STATEMENTS	3404:2	3411:2	5	
EXPR_STATEMENT	3404:2	3404:41	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = i ;
EXPR	3404:2	3404:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = i
ASSIGN	3404:2	3404:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = i
LVAL	3404:2	3404:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3404:2	3404:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3404:2	3404:2	11	ojpegdata
LEAF_NODE	3404:11	3404:11	11	[
EXPR	3404:12	3404:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3404:12	3404:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3404:12	3404:12	13	t2p
LEAF_NODE	3404:15	3404:15	13	->
LEAF_NODE	3404:17	3404:17	13	pdf_ojpegdatalength
LEAF_NODE	3404:36	3404:36	13	++
LEAF_NODE	3404:38	3404:38	11	]
ASSIGN_OP	3404:39	3404:39	9	=
LEAF_NODE	3404:39	3404:39	10	=
RVAL	3404:40	3404:40	9	i
FIELD	3404:40	3404:40	10	i
LEAF_NODE	3404:40	3404:40	11	i
LEAF_NODE	3404:41	3404:41	7	;
SELECTION	3405:2	3405:10	6	
KEYWORD	3405:2	3405:2	7	if
LEAF_NODE	3405:2	3405:2	8	if
LEAF_NODE	3405:4	3405:4	7	(
CONDITION	3405:5	3405:5	7	i == 0
EXPR	3405:5	3405:8	8	i == 0
FIELD	3405:5	3405:5	9	i
LEAF_NODE	3405:5	3405:5	10	i
EQ_OPERATOR	3405:6	3405:6	9	==
LEAF_NODE	3405:6	3405:6	10	==
FIELD	3405:8	3405:8	9	0
LEAF_NODE	3405:8	3405:8	10	0
LEAF_NODE	3405:9	3405:9	7	)
STATEMENTS	3405:10	3408:2	7	
LEAF_NODE	3405:10	3405:10	8	{
STATEMENTS	3406:3	3407:3	8	
EXPR_STATEMENT	3406:3	3406:58	9	ojpegdata [ t2p -> pdf_ojpegdatalength ] |= h_samp << 4 & 0xf0 ;
EXPR	3406:3	3406:3	10	ojpegdata [ t2p -> pdf_ojpegdatalength ] |= h_samp << 4 & 0xf0
ASSIGN	3406:3	3406:42	11	ojpegdata [ t2p -> pdf_ojpegdatalength ] |= h_samp << 4 & 0xf0
LVAL	3406:3	3406:3	12	ojpegdata [ t2p -> pdf_ojpegdatalength ]
FIELD	3406:3	3406:37	13	ojpegdata [ t2p -> pdf_ojpegdatalength ]
LEAF_NODE	3406:3	3406:3	14	ojpegdata
LEAF_NODE	3406:12	3406:12	14	[
EXPR	3406:13	3406:13	14	t2p -> pdf_ojpegdatalength
FIELD	3406:13	3406:18	15	t2p -> pdf_ojpegdatalength
LEAF_NODE	3406:13	3406:13	16	t2p
LEAF_NODE	3406:16	3406:16	16	->
LEAF_NODE	3406:18	3406:18	16	pdf_ojpegdatalength
LEAF_NODE	3406:37	3406:37	14	]
ASSIGN_OP	3406:39	3406:39	12	|=
LEAF_NODE	3406:39	3406:39	13	|=
RVAL	3406:42	3406:54	12	h_samp << 4 & 0xf0
FIELD	3406:42	3406:42	13	h_samp
LEAF_NODE	3406:42	3406:42	14	h_samp
LEAF_NODE	3406:48	3406:48	13	<<
FIELD	3406:50	3406:50	13	4
LEAF_NODE	3406:50	3406:50	14	4
LEAF_NODE	3406:52	3406:52	13	&
FIELD	3406:54	3406:54	13	0xf0
LEAF_NODE	3406:54	3406:54	14	0xf0
LEAF_NODE	3406:58	3406:58	10	;
LEAF_NODE	3406:59	3406:59	9	;
EXPR_STATEMENT	3407:3	3407:57	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] |= v_samp & 0x0f ;
EXPR	3407:3	3407:3	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] |= v_samp & 0x0f
ASSIGN	3407:3	3407:44	11	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] |= v_samp & 0x0f
LVAL	3407:3	3407:3	12	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3407:3	3407:39	13	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3407:3	3407:3	14	ojpegdata
LEAF_NODE	3407:12	3407:12	14	[
EXPR	3407:13	3407:13	14	t2p -> pdf_ojpegdatalength ++
FIELD	3407:13	3407:37	15	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3407:13	3407:13	16	t2p
LEAF_NODE	3407:16	3407:16	16	->
LEAF_NODE	3407:18	3407:18	16	pdf_ojpegdatalength
LEAF_NODE	3407:37	3407:37	16	++
LEAF_NODE	3407:39	3407:39	14	]
ASSIGN_OP	3407:41	3407:41	12	|=
LEAF_NODE	3407:41	3407:41	13	|=
RVAL	3407:44	3407:53	12	v_samp & 0x0f
FIELD	3407:44	3407:44	13	v_samp
LEAF_NODE	3407:44	3407:44	14	v_samp
LEAF_NODE	3407:51	3407:51	13	&
FIELD	3407:53	3407:53	13	0x0f
LEAF_NODE	3407:53	3407:53	14	0x0f
LEAF_NODE	3407:57	3407:57	10	;
LEAF_NODE	3408:2	3408:2	8	}
SELECTION	3408:4	3408:9	6	
KEYWORD	3408:4	3408:4	7	else
LEAF_NODE	3408:4	3408:4	8	else
STATEMENTS	3408:9	3410:2	7	
LEAF_NODE	3408:9	3408:9	8	{
STATEMENTS	3409:4	3409:4	8	
EXPR_STATEMENT	3409:4	3409:47	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x11 ;
EXPR	3409:4	3409:4	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x11
ASSIGN	3409:4	3409:43	11	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x11
LVAL	3409:4	3409:4	12	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3409:4	3409:40	13	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3409:4	3409:4	14	ojpegdata
LEAF_NODE	3409:13	3409:13	14	[
EXPR	3409:14	3409:14	14	t2p -> pdf_ojpegdatalength ++
FIELD	3409:14	3409:38	15	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3409:14	3409:14	16	t2p
LEAF_NODE	3409:17	3409:17	16	->
LEAF_NODE	3409:19	3409:19	16	pdf_ojpegdatalength
LEAF_NODE	3409:38	3409:38	16	++
LEAF_NODE	3409:40	3409:40	14	]
ASSIGN_OP	3409:41	3409:41	12	=
LEAF_NODE	3409:41	3409:41	13	=
RVAL	3409:43	3409:43	12	0x11
FIELD	3409:43	3409:43	13	0x11
LEAF_NODE	3409:43	3409:43	14	0x11
LEAF_NODE	3409:47	3409:47	10	;
LEAF_NODE	3410:2	3410:2	8	}
EXPR_STATEMENT	3411:2	3411:41	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = i ;
EXPR	3411:2	3411:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = i
ASSIGN	3411:2	3411:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = i
LVAL	3411:2	3411:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3411:2	3411:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3411:2	3411:2	11	ojpegdata
LEAF_NODE	3411:11	3411:11	11	[
EXPR	3411:12	3411:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3411:12	3411:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3411:12	3411:12	13	t2p
LEAF_NODE	3411:15	3411:15	13	->
LEAF_NODE	3411:17	3411:17	13	pdf_ojpegdatalength
LEAF_NODE	3411:36	3411:36	13	++
LEAF_NODE	3411:38	3411:38	11	]
ASSIGN_OP	3411:39	3411:39	9	=
LEAF_NODE	3411:39	3411:39	10	=
RVAL	3411:40	3411:40	9	i
FIELD	3411:40	3411:40	10	i
LEAF_NODE	3411:40	3411:40	11	i
LEAF_NODE	3411:41	3411:41	7	;
LEAF_NODE	3412:1	3412:1	5	}
ITERATION	3413:1	3413:50	3	
KEYWORD	3413:1	3413:1	4	for
LEAF_NODE	3413:1	3413:1	5	for
LEAF_NODE	3413:4	3413:4	4	(
FOR_INIT	3413:5	3413:11	4	dest = 0 ;
EXPR	3413:5	3413:5	5	dest = 0
ASSIGN	3413:5	3413:10	6	dest = 0
LVAL	3413:5	3413:5	7	dest
FIELD	3413:5	3413:5	8	dest
LEAF_NODE	3413:5	3413:5	9	dest
ASSIGN_OP	3413:9	3413:9	7	=
LEAF_NODE	3413:9	3413:9	8	=
RVAL	3413:10	3413:10	7	0
FIELD	3413:10	3413:10	8	0
LEAF_NODE	3413:10	3413:10	9	0
LEAF_NODE	3413:11	3413:11	5	;
CONDITION	3413:12	3413:12	4	dest < t2p -> tiff_samplesperpixel
EXPR	3413:12	3413:17	5	dest < t2p -> tiff_samplesperpixel
FIELD	3413:12	3413:12	6	dest
LEAF_NODE	3413:12	3413:12	7	dest
REL_OPERATOR	3413:16	3413:16	6	<
LEAF_NODE	3413:16	3413:16	7	<
FIELD	3413:17	3413:22	6	t2p -> tiff_samplesperpixel
LEAF_NODE	3413:17	3413:17	7	t2p
LEAF_NODE	3413:20	3413:20	7	->
LEAF_NODE	3413:22	3413:22	7	tiff_samplesperpixel
LEAF_NODE	3413:42	3413:42	4	;
FOR_EXPR	3413:43	3413:43	4	dest ++
EXPR	3413:43	3413:43	5	dest ++
FIELD	3413:43	3413:47	6	dest ++
LEAF_NODE	3413:43	3413:43	7	dest
LEAF_NODE	3413:47	3413:47	7	++
LEAF_NODE	3413:49	3413:49	4	)
STATEMENTS	3413:50	3422:1	4	
LEAF_NODE	3413:50	3413:50	5	{
STATEMENTS	3414:2	3421:2	5	
EXPR_STATEMENT	3414:2	3414:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff ;
EXPR	3414:2	3414:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
ASSIGN	3414:2	3414:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
LVAL	3414:2	3414:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3414:2	3414:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3414:2	3414:2	11	ojpegdata
LEAF_NODE	3414:11	3414:11	11	[
EXPR	3414:12	3414:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3414:12	3414:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3414:12	3414:12	13	t2p
LEAF_NODE	3414:15	3414:15	13	->
LEAF_NODE	3414:17	3414:17	13	pdf_ojpegdatalength
LEAF_NODE	3414:36	3414:36	13	++
LEAF_NODE	3414:38	3414:38	11	]
ASSIGN_OP	3414:39	3414:39	9	=
LEAF_NODE	3414:39	3414:39	10	=
RVAL	3414:40	3414:40	9	0xff
FIELD	3414:40	3414:40	10	0xff
LEAF_NODE	3414:40	3414:40	11	0xff
LEAF_NODE	3414:44	3414:44	7	;
EXPR_STATEMENT	3415:2	3415:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xdb ;
EXPR	3415:2	3415:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xdb
ASSIGN	3415:2	3415:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xdb
LVAL	3415:2	3415:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3415:2	3415:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3415:2	3415:2	11	ojpegdata
LEAF_NODE	3415:11	3415:11	11	[
EXPR	3415:12	3415:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3415:12	3415:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3415:12	3415:12	13	t2p
LEAF_NODE	3415:15	3415:15	13	->
LEAF_NODE	3415:17	3415:17	13	pdf_ojpegdatalength
LEAF_NODE	3415:36	3415:36	13	++
LEAF_NODE	3415:38	3415:38	11	]
ASSIGN_OP	3415:39	3415:39	9	=
LEAF_NODE	3415:39	3415:39	10	=
RVAL	3415:40	3415:40	9	0xdb
FIELD	3415:40	3415:40	10	0xdb
LEAF_NODE	3415:40	3415:40	11	0xdb
LEAF_NODE	3415:44	3415:44	7	;
EXPR_STATEMENT	3416:2	3416:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00 ;
EXPR	3416:2	3416:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00
ASSIGN	3416:2	3416:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00
LVAL	3416:2	3416:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3416:2	3416:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3416:2	3416:2	11	ojpegdata
LEAF_NODE	3416:11	3416:11	11	[
EXPR	3416:12	3416:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3416:12	3416:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3416:12	3416:12	13	t2p
LEAF_NODE	3416:15	3416:15	13	->
LEAF_NODE	3416:17	3416:17	13	pdf_ojpegdatalength
LEAF_NODE	3416:36	3416:36	13	++
LEAF_NODE	3416:38	3416:38	11	]
ASSIGN_OP	3416:39	3416:39	9	=
LEAF_NODE	3416:39	3416:39	10	=
RVAL	3416:40	3416:40	9	0x00
FIELD	3416:40	3416:40	10	0x00
LEAF_NODE	3416:40	3416:40	11	0x00
LEAF_NODE	3416:44	3416:44	7	;
EXPR_STATEMENT	3417:2	3417:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x43 ;
EXPR	3417:2	3417:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x43
ASSIGN	3417:2	3417:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x43
LVAL	3417:2	3417:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3417:2	3417:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3417:2	3417:2	11	ojpegdata
LEAF_NODE	3417:11	3417:11	11	[
EXPR	3417:12	3417:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3417:12	3417:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3417:12	3417:12	13	t2p
LEAF_NODE	3417:15	3417:15	13	->
LEAF_NODE	3417:17	3417:17	13	pdf_ojpegdatalength
LEAF_NODE	3417:36	3417:36	13	++
LEAF_NODE	3417:38	3417:38	11	]
ASSIGN_OP	3417:39	3417:39	9	=
LEAF_NODE	3417:39	3417:39	10	=
RVAL	3417:40	3417:40	9	0x43
FIELD	3417:40	3417:40	10	0x43
LEAF_NODE	3417:40	3417:40	11	0x43
LEAF_NODE	3417:44	3417:44	7	;
EXPR_STATEMENT	3418:2	3418:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = dest ;
EXPR	3418:2	3418:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = dest
ASSIGN	3418:2	3418:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = dest
LVAL	3418:2	3418:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3418:2	3418:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3418:2	3418:2	11	ojpegdata
LEAF_NODE	3418:11	3418:11	11	[
EXPR	3418:12	3418:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3418:12	3418:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3418:12	3418:12	13	t2p
LEAF_NODE	3418:15	3418:15	13	->
LEAF_NODE	3418:17	3418:17	13	pdf_ojpegdatalength
LEAF_NODE	3418:36	3418:36	13	++
LEAF_NODE	3418:38	3418:38	11	]
ASSIGN_OP	3418:39	3418:39	9	=
LEAF_NODE	3418:39	3418:39	10	=
RVAL	3418:40	3418:40	9	dest
FIELD	3418:40	3418:40	10	dest
LEAF_NODE	3418:40	3418:40	11	dest
LEAF_NODE	3418:44	3418:44	7	;
EXPR_STATEMENT	3419:2	3420:39	6	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] ) , & ( ( ( unsigned char * ) q ) [ 64 * dest ] ) , 64 ) ;
EXPR	3419:2	3419:2	7	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] ) , & ( ( ( unsigned char * ) q ) [ 64 * dest ] ) , 64 )
FUNCTION_CALL	3419:2	3420:38	8	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] ) , & ( ( ( unsigned char * ) q ) [ 64 * dest ] ) , 64 )
CALLEE	3419:2	3419:2	9	_TIFFmemcpy
LEAF_NODE	3419:2	3419:2	10	_TIFFmemcpy
LEAF_NODE	3419:13	3419:13	9	(
ARGUMENT	3419:15	3419:15	9	& ( ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] )
UNARY_EXPR	3419:15	3419:54	10	& ( ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] )
UNARY_OPERATOR	3419:15	3419:15	11	&
LEAF_NODE	3419:15	3419:15	12	&
LEAF_NODE	3419:16	3419:16	11	(
FIELD	3419:17	3419:53	11	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3419:17	3419:17	12	ojpegdata
LEAF_NODE	3419:26	3419:26	12	[
EXPR	3419:27	3419:27	12	t2p -> pdf_ojpegdatalength ++
FIELD	3419:27	3419:51	13	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3419:27	3419:27	14	t2p
LEAF_NODE	3419:30	3419:30	14	->
LEAF_NODE	3419:32	3419:32	14	pdf_ojpegdatalength
LEAF_NODE	3419:51	3419:51	14	++
LEAF_NODE	3419:53	3419:53	12	]
LEAF_NODE	3419:54	3419:54	11	)
LEAF_NODE	3419:55	3419:55	9	,
ARGUMENT	3420:3	3420:3	9	& ( ( ( unsigned char * ) q ) [ 64 * dest ] )
UNARY_EXPR	3420:3	3420:33	10	& ( ( ( unsigned char * ) q ) [ 64 * dest ] )
UNARY_OPERATOR	3420:3	3420:3	11	&
LEAF_NODE	3420:3	3420:3	12	&
LEAF_NODE	3420:4	3420:4	11	(
LEAF_NODE	3420:5	3420:5	11	(
LEAF_NODE	3420:6	3420:6	11	(
TYPE_NAME	3420:7	3420:16	11	unsigned char
LEAF_NODE	3420:7	3420:7	12	unsigned
LEAF_NODE	3420:16	3420:16	12	char
LEAF_NODE	3420:20	3420:20	11	*
LEAF_NODE	3420:21	3420:21	11	)
FIELD	3420:22	3420:22	11	q
LEAF_NODE	3420:22	3420:22	12	q
LEAF_NODE	3420:23	3420:23	11	)
LEAF_NODE	3420:24	3420:24	11	[
EXPR	3420:25	3420:28	11	64 * dest
FIELD	3420:25	3420:25	12	64
LEAF_NODE	3420:25	3420:25	13	64
LEAF_NODE	3420:27	3420:27	12	*
FIELD	3420:28	3420:28	12	dest
LEAF_NODE	3420:28	3420:28	13	dest
LEAF_NODE	3420:32	3420:32	11	]
LEAF_NODE	3420:33	3420:33	11	)
LEAF_NODE	3420:34	3420:34	9	,
ARGUMENT	3420:36	3420:36	9	64
FIELD	3420:36	3420:36	10	64
LEAF_NODE	3420:36	3420:36	11	64
LEAF_NODE	3420:38	3420:38	9	)
LEAF_NODE	3420:39	3420:39	7	;
EXPR_STATEMENT	3421:2	3421:30	6	t2p -> pdf_ojpegdatalength += 64 ;
EXPR	3421:2	3421:2	7	t2p -> pdf_ojpegdatalength += 64
ASSIGN	3421:2	3421:28	8	t2p -> pdf_ojpegdatalength += 64
LVAL	3421:2	3421:2	9	t2p -> pdf_ojpegdatalength
FIELD	3421:2	3421:7	10	t2p -> pdf_ojpegdatalength
LEAF_NODE	3421:2	3421:2	11	t2p
LEAF_NODE	3421:5	3421:5	11	->
LEAF_NODE	3421:7	3421:7	11	pdf_ojpegdatalength
ASSIGN_OP	3421:26	3421:26	9	+=
LEAF_NODE	3421:26	3421:26	10	+=
RVAL	3421:28	3421:28	9	64
FIELD	3421:28	3421:28	10	64
LEAF_NODE	3421:28	3421:28	11	64
LEAF_NODE	3421:30	3421:30	7	;
LEAF_NODE	3422:1	3422:1	5	}
EXPR_STATEMENT	3423:1	3423:15	3	offset_table = 0 ;
EXPR	3423:1	3423:1	4	offset_table = 0
ASSIGN	3423:1	3423:14	5	offset_table = 0
LVAL	3423:1	3423:1	6	offset_table
FIELD	3423:1	3423:1	7	offset_table
LEAF_NODE	3423:1	3423:1	8	offset_table
ASSIGN_OP	3423:13	3423:13	6	=
LEAF_NODE	3423:13	3423:13	7	=
RVAL	3423:14	3423:14	6	0
FIELD	3423:14	3423:14	7	0
LEAF_NODE	3423:14	3423:14	8	0
LEAF_NODE	3423:15	3423:15	4	;
ITERATION	3424:1	3424:36	3	
KEYWORD	3424:1	3424:1	4	for
LEAF_NODE	3424:1	3424:1	5	for
LEAF_NODE	3424:4	3424:4	4	(
FOR_INIT	3424:5	3424:11	4	dest = 0 ;
EXPR	3424:5	3424:5	5	dest = 0
ASSIGN	3424:5	3424:10	6	dest = 0
LVAL	3424:5	3424:5	7	dest
FIELD	3424:5	3424:5	8	dest
LEAF_NODE	3424:5	3424:5	9	dest
ASSIGN_OP	3424:9	3424:9	7	=
LEAF_NODE	3424:9	3424:9	8	=
RVAL	3424:10	3424:10	7	0
FIELD	3424:10	3424:10	8	0
LEAF_NODE	3424:10	3424:10	9	0
LEAF_NODE	3424:11	3424:11	5	;
CONDITION	3424:12	3424:12	4	dest < table_count
EXPR	3424:12	3424:17	5	dest < table_count
FIELD	3424:12	3424:12	6	dest
LEAF_NODE	3424:12	3424:12	7	dest
REL_OPERATOR	3424:16	3424:16	6	<
LEAF_NODE	3424:16	3424:16	7	<
FIELD	3424:17	3424:17	6	table_count
LEAF_NODE	3424:17	3424:17	7	table_count
LEAF_NODE	3424:28	3424:28	4	;
FOR_EXPR	3424:29	3424:29	4	dest ++
EXPR	3424:29	3424:29	5	dest ++
FIELD	3424:29	3424:33	6	dest ++
LEAF_NODE	3424:29	3424:29	7	dest
LEAF_NODE	3424:33	3424:33	7	++
LEAF_NODE	3424:35	3424:35	4	)
STATEMENTS	3424:36	3443:1	4	
LEAF_NODE	3424:36	3424:36	5	{
STATEMENTS	3425:2	3442:2	5	
EXPR_STATEMENT	3425:2	3425:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff ;
EXPR	3425:2	3425:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
ASSIGN	3425:2	3425:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
LVAL	3425:2	3425:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3425:2	3425:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3425:2	3425:2	11	ojpegdata
LEAF_NODE	3425:11	3425:11	11	[
EXPR	3425:12	3425:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3425:12	3425:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3425:12	3425:12	13	t2p
LEAF_NODE	3425:15	3425:15	13	->
LEAF_NODE	3425:17	3425:17	13	pdf_ojpegdatalength
LEAF_NODE	3425:36	3425:36	13	++
LEAF_NODE	3425:38	3425:38	11	]
ASSIGN_OP	3425:39	3425:39	9	=
LEAF_NODE	3425:39	3425:39	10	=
RVAL	3425:40	3425:40	9	0xff
FIELD	3425:40	3425:40	10	0xff
LEAF_NODE	3425:40	3425:40	11	0xff
LEAF_NODE	3425:44	3425:44	7	;
EXPR_STATEMENT	3426:2	3426:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc4 ;
EXPR	3426:2	3426:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc4
ASSIGN	3426:2	3426:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc4
LVAL	3426:2	3426:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3426:2	3426:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3426:2	3426:2	11	ojpegdata
LEAF_NODE	3426:11	3426:11	11	[
EXPR	3426:12	3426:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3426:12	3426:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3426:12	3426:12	13	t2p
LEAF_NODE	3426:15	3426:15	13	->
LEAF_NODE	3426:17	3426:17	13	pdf_ojpegdatalength
LEAF_NODE	3426:36	3426:36	13	++
LEAF_NODE	3426:38	3426:38	11	]
ASSIGN_OP	3426:39	3426:39	9	=
LEAF_NODE	3426:39	3426:39	10	=
RVAL	3426:40	3426:40	9	0xc4
FIELD	3426:40	3426:40	10	0xc4
LEAF_NODE	3426:40	3426:40	11	0xc4
LEAF_NODE	3426:44	3426:44	7	;
EXPR_STATEMENT	3427:2	3427:38	6	offset_ms_l = t2p -> pdf_ojpegdatalength ;
EXPR	3427:2	3427:2	7	offset_ms_l = t2p -> pdf_ojpegdatalength
ASSIGN	3427:2	3427:14	8	offset_ms_l = t2p -> pdf_ojpegdatalength
LVAL	3427:2	3427:2	9	offset_ms_l
FIELD	3427:2	3427:2	10	offset_ms_l
LEAF_NODE	3427:2	3427:2	11	offset_ms_l
ASSIGN_OP	3427:13	3427:13	9	=
LEAF_NODE	3427:13	3427:13	10	=
RVAL	3427:14	3427:14	9	t2p -> pdf_ojpegdatalength
FIELD	3427:14	3427:19	10	t2p -> pdf_ojpegdatalength
LEAF_NODE	3427:14	3427:14	11	t2p
LEAF_NODE	3427:17	3427:17	11	->
LEAF_NODE	3427:19	3427:19	11	pdf_ojpegdatalength
LEAF_NODE	3427:38	3427:38	7	;
EXPR_STATEMENT	3428:2	3428:29	6	t2p -> pdf_ojpegdatalength += 2 ;
EXPR	3428:2	3428:2	7	t2p -> pdf_ojpegdatalength += 2
ASSIGN	3428:2	3428:28	8	t2p -> pdf_ojpegdatalength += 2
LVAL	3428:2	3428:2	9	t2p -> pdf_ojpegdatalength
FIELD	3428:2	3428:7	10	t2p -> pdf_ojpegdatalength
LEAF_NODE	3428:2	3428:2	11	t2p
LEAF_NODE	3428:5	3428:5	11	->
LEAF_NODE	3428:7	3428:7	11	pdf_ojpegdatalength
ASSIGN_OP	3428:26	3428:26	9	+=
LEAF_NODE	3428:26	3428:26	10	+=
RVAL	3428:28	3428:28	9	2
FIELD	3428:28	3428:28	10	2
LEAF_NODE	3428:28	3428:28	11	2
LEAF_NODE	3428:29	3428:29	7	;
EXPR_STATEMENT	3429:2	3429:51	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = dest & 0x0f ;
EXPR	3429:2	3429:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = dest & 0x0f
ASSIGN	3429:2	3429:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = dest & 0x0f
LVAL	3429:2	3429:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3429:2	3429:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3429:2	3429:2	11	ojpegdata
LEAF_NODE	3429:11	3429:11	11	[
EXPR	3429:12	3429:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3429:12	3429:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3429:12	3429:12	13	t2p
LEAF_NODE	3429:15	3429:15	13	->
LEAF_NODE	3429:17	3429:17	13	pdf_ojpegdatalength
LEAF_NODE	3429:36	3429:36	13	++
LEAF_NODE	3429:38	3429:38	11	]
ASSIGN_OP	3429:39	3429:39	9	=
LEAF_NODE	3429:39	3429:39	10	=
RVAL	3429:40	3429:47	9	dest & 0x0f
FIELD	3429:40	3429:40	10	dest
LEAF_NODE	3429:40	3429:40	11	dest
LEAF_NODE	3429:45	3429:45	10	&
FIELD	3429:47	3429:47	10	0x0f
LEAF_NODE	3429:47	3429:47	11	0x0f
LEAF_NODE	3429:51	3429:51	7	;
EXPR_STATEMENT	3430:2	3431:45	6	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) dc ) [ offset_table ] ) , 16 ) ;
EXPR	3430:2	3430:2	7	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) dc ) [ offset_table ] ) , 16 )
FUNCTION_CALL	3430:2	3431:44	8	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) dc ) [ offset_table ] ) , 16 )
CALLEE	3430:2	3430:2	9	_TIFFmemcpy
LEAF_NODE	3430:2	3430:2	10	_TIFFmemcpy
LEAF_NODE	3430:13	3430:13	9	(
ARGUMENT	3430:15	3430:15	9	& ( ojpegdata [ t2p -> pdf_ojpegdatalength ] )
UNARY_EXPR	3430:15	3430:52	10	& ( ojpegdata [ t2p -> pdf_ojpegdatalength ] )
UNARY_OPERATOR	3430:15	3430:15	11	&
LEAF_NODE	3430:15	3430:15	12	&
LEAF_NODE	3430:16	3430:16	11	(
FIELD	3430:17	3430:51	11	ojpegdata [ t2p -> pdf_ojpegdatalength ]
LEAF_NODE	3430:17	3430:17	12	ojpegdata
LEAF_NODE	3430:26	3430:26	12	[
EXPR	3430:27	3430:27	12	t2p -> pdf_ojpegdatalength
FIELD	3430:27	3430:32	13	t2p -> pdf_ojpegdatalength
LEAF_NODE	3430:27	3430:27	14	t2p
LEAF_NODE	3430:30	3430:30	14	->
LEAF_NODE	3430:32	3430:32	14	pdf_ojpegdatalength
LEAF_NODE	3430:51	3430:51	12	]
LEAF_NODE	3430:52	3430:52	11	)
LEAF_NODE	3430:53	3430:53	9	,
ARGUMENT	3431:3	3431:3	9	& ( ( ( unsigned char * ) dc ) [ offset_table ] )
UNARY_EXPR	3431:3	3431:39	10	& ( ( ( unsigned char * ) dc ) [ offset_table ] )
UNARY_OPERATOR	3431:3	3431:3	11	&
LEAF_NODE	3431:3	3431:3	12	&
LEAF_NODE	3431:4	3431:4	11	(
LEAF_NODE	3431:5	3431:5	11	(
LEAF_NODE	3431:6	3431:6	11	(
TYPE_NAME	3431:7	3431:16	11	unsigned char
LEAF_NODE	3431:7	3431:7	12	unsigned
LEAF_NODE	3431:16	3431:16	12	char
LEAF_NODE	3431:20	3431:20	11	*
LEAF_NODE	3431:21	3431:21	11	)
FIELD	3431:22	3431:22	11	dc
LEAF_NODE	3431:22	3431:22	12	dc
LEAF_NODE	3431:24	3431:24	11	)
LEAF_NODE	3431:25	3431:25	11	[
EXPR	3431:26	3431:26	11	offset_table
FIELD	3431:26	3431:26	12	offset_table
LEAF_NODE	3431:26	3431:26	13	offset_table
LEAF_NODE	3431:38	3431:38	11	]
LEAF_NODE	3431:39	3431:39	11	)
LEAF_NODE	3431:40	3431:40	9	,
ARGUMENT	3431:42	3431:42	9	16
FIELD	3431:42	3431:42	10	16
LEAF_NODE	3431:42	3431:42	11	16
LEAF_NODE	3431:44	3431:44	9	)
LEAF_NODE	3431:45	3431:45	7	;
EXPR_STATEMENT	3432:2	3432:14	6	code_count = 0 ;
EXPR	3432:2	3432:2	7	code_count = 0
ASSIGN	3432:2	3432:13	8	code_count = 0
LVAL	3432:2	3432:2	9	code_count
FIELD	3432:2	3432:2	10	code_count
LEAF_NODE	3432:2	3432:2	11	code_count
ASSIGN_OP	3432:12	3432:12	9	=
LEAF_NODE	3432:12	3432:12	10	=
RVAL	3432:13	3432:13	9	0
FIELD	3432:13	3432:13	10	0
LEAF_NODE	3432:13	3432:13	11	0
LEAF_NODE	3432:14	3432:14	7	;
EXPR_STATEMENT	3433:2	3433:18	6	offset_table += 16 ;
EXPR	3433:2	3433:2	7	offset_table += 16
ASSIGN	3433:2	3433:16	8	offset_table += 16
LVAL	3433:2	3433:2	9	offset_table
FIELD	3433:2	3433:2	10	offset_table
LEAF_NODE	3433:2	3433:2	11	offset_table
ASSIGN_OP	3433:14	3433:14	9	+=
LEAF_NODE	3433:14	3433:14	10	+=
RVAL	3433:16	3433:16	9	16
FIELD	3433:16	3433:16	10	16
LEAF_NODE	3433:16	3433:16	11	16
LEAF_NODE	3433:18	3433:18	7	;
ITERATION	3434:2	3434:19	6	
KEYWORD	3434:2	3434:2	7	for
LEAF_NODE	3434:2	3434:2	8	for
LEAF_NODE	3434:5	3434:5	7	(
FOR_INIT	3434:6	3434:9	7	i = 0 ;
EXPR	3434:6	3434:6	8	i = 0
ASSIGN	3434:6	3434:8	9	i = 0
LVAL	3434:6	3434:6	10	i
FIELD	3434:6	3434:6	11	i
LEAF_NODE	3434:6	3434:6	12	i
ASSIGN_OP	3434:7	3434:7	10	=
LEAF_NODE	3434:7	3434:7	11	=
RVAL	3434:8	3434:8	10	0
FIELD	3434:8	3434:8	11	0
LEAF_NODE	3434:8	3434:8	12	0
LEAF_NODE	3434:9	3434:9	8	;
CONDITION	3434:10	3434:10	7	i < 16
EXPR	3434:10	3434:12	8	i < 16
FIELD	3434:10	3434:10	9	i
LEAF_NODE	3434:10	3434:10	10	i
REL_OPERATOR	3434:11	3434:11	9	<
LEAF_NODE	3434:11	3434:11	10	<
FIELD	3434:12	3434:12	9	16
LEAF_NODE	3434:12	3434:12	10	16
LEAF_NODE	3434:14	3434:14	7	;
FOR_EXPR	3434:15	3434:15	7	i ++
EXPR	3434:15	3434:15	8	i ++
FIELD	3434:15	3434:16	9	i ++
LEAF_NODE	3434:15	3434:15	10	i
LEAF_NODE	3434:16	3434:16	10	++
LEAF_NODE	3434:18	3434:18	7	)
STATEMENTS	3434:19	3436:2	7	
LEAF_NODE	3434:19	3434:19	8	{
STATEMENTS	3435:3	3435:3	8	
EXPR_STATEMENT	3435:3	3435:52	9	code_count += ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] ;
EXPR	3435:3	3435:3	10	code_count += ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
ASSIGN	3435:3	3435:15	11	code_count += ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LVAL	3435:3	3435:3	12	code_count
FIELD	3435:3	3435:3	13	code_count
LEAF_NODE	3435:3	3435:3	14	code_count
ASSIGN_OP	3435:13	3435:13	12	+=
LEAF_NODE	3435:13	3435:13	13	+=
RVAL	3435:15	3435:15	12	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3435:15	3435:51	13	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3435:15	3435:15	14	ojpegdata
LEAF_NODE	3435:24	3435:24	14	[
EXPR	3435:25	3435:25	14	t2p -> pdf_ojpegdatalength ++
FIELD	3435:25	3435:49	15	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3435:25	3435:25	16	t2p
LEAF_NODE	3435:28	3435:28	16	->
LEAF_NODE	3435:30	3435:30	16	pdf_ojpegdatalength
LEAF_NODE	3435:49	3435:49	16	++
LEAF_NODE	3435:51	3435:51	14	]
LEAF_NODE	3435:52	3435:52	10	;
LEAF_NODE	3436:2	3436:2	8	}
EXPR_STATEMENT	3437:2	3437:52	6	ojpegdata [ offset_ms_l ] = ( ( 19 + code_count ) >> 8 ) & 0xff ;
EXPR	3437:2	3437:2	7	ojpegdata [ offset_ms_l ] = ( ( 19 + code_count ) >> 8 ) & 0xff
ASSIGN	3437:2	3437:25	8	ojpegdata [ offset_ms_l ] = ( ( 19 + code_count ) >> 8 ) & 0xff
LVAL	3437:2	3437:2	9	ojpegdata [ offset_ms_l ]
FIELD	3437:2	3437:23	10	ojpegdata [ offset_ms_l ]
LEAF_NODE	3437:2	3437:2	11	ojpegdata
LEAF_NODE	3437:11	3437:11	11	[
EXPR	3437:12	3437:12	11	offset_ms_l
FIELD	3437:12	3437:12	12	offset_ms_l
LEAF_NODE	3437:12	3437:12	13	offset_ms_l
LEAF_NODE	3437:23	3437:23	11	]
ASSIGN_OP	3437:24	3437:24	9	=
LEAF_NODE	3437:24	3437:24	10	=
RVAL	3437:25	3437:48	9	( ( 19 + code_count ) >> 8 ) & 0xff
LEAF_NODE	3437:25	3437:25	10	(
LEAF_NODE	3437:26	3437:26	10	(
FIELD	3437:27	3437:27	10	19
LEAF_NODE	3437:27	3437:27	11	19
LEAF_NODE	3437:29	3437:29	10	+
FIELD	3437:30	3437:30	10	code_count
LEAF_NODE	3437:30	3437:30	11	code_count
LEAF_NODE	3437:40	3437:40	10	)
LEAF_NODE	3437:41	3437:41	10	>>
FIELD	3437:43	3437:43	10	8
LEAF_NODE	3437:43	3437:43	11	8
LEAF_NODE	3437:44	3437:44	10	)
LEAF_NODE	3437:46	3437:46	10	&
FIELD	3437:48	3437:48	10	0xff
LEAF_NODE	3437:48	3437:48	11	0xff
LEAF_NODE	3437:52	3437:52	7	;
EXPR_STATEMENT	3438:2	3438:49	6	ojpegdata [ offset_ms_l + 1 ] = ( 19 + code_count ) & 0xff ;
EXPR	3438:2	3438:2	7	ojpegdata [ offset_ms_l + 1 ] = ( 19 + code_count ) & 0xff
ASSIGN	3438:2	3438:27	8	ojpegdata [ offset_ms_l + 1 ] = ( 19 + code_count ) & 0xff
LVAL	3438:2	3438:2	9	ojpegdata [ offset_ms_l + 1 ]
FIELD	3438:2	3438:25	10	ojpegdata [ offset_ms_l + 1 ]
LEAF_NODE	3438:2	3438:2	11	ojpegdata
LEAF_NODE	3438:11	3438:11	11	[
EXPR	3438:12	3438:24	11	offset_ms_l + 1
FIELD	3438:12	3438:12	12	offset_ms_l
LEAF_NODE	3438:12	3438:12	13	offset_ms_l
LEAF_NODE	3438:23	3438:23	12	+
FIELD	3438:24	3438:24	12	1
LEAF_NODE	3438:24	3438:24	13	1
LEAF_NODE	3438:25	3438:25	11	]
ASSIGN_OP	3438:26	3438:26	9	=
LEAF_NODE	3438:26	3438:26	10	=
RVAL	3438:27	3438:45	9	( 19 + code_count ) & 0xff
LEAF_NODE	3438:27	3438:27	10	(
FIELD	3438:28	3438:28	10	19
LEAF_NODE	3438:28	3438:28	11	19
LEAF_NODE	3438:30	3438:30	10	+
FIELD	3438:31	3438:31	10	code_count
LEAF_NODE	3438:31	3438:31	11	code_count
LEAF_NODE	3438:41	3438:41	10	)
LEAF_NODE	3438:43	3438:43	10	&
FIELD	3438:45	3438:45	10	0xff
LEAF_NODE	3438:45	3438:45	11	0xff
LEAF_NODE	3438:49	3438:49	7	;
EXPR_STATEMENT	3439:2	3440:53	6	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) dc ) [ offset_table ] ) , code_count ) ;
EXPR	3439:2	3439:2	7	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) dc ) [ offset_table ] ) , code_count )
FUNCTION_CALL	3439:2	3440:52	8	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) dc ) [ offset_table ] ) , code_count )
CALLEE	3439:2	3439:2	9	_TIFFmemcpy
LEAF_NODE	3439:2	3439:2	10	_TIFFmemcpy
LEAF_NODE	3439:13	3439:13	9	(
ARGUMENT	3439:15	3439:15	9	& ( ojpegdata [ t2p -> pdf_ojpegdatalength ] )
UNARY_EXPR	3439:15	3439:52	10	& ( ojpegdata [ t2p -> pdf_ojpegdatalength ] )
UNARY_OPERATOR	3439:15	3439:15	11	&
LEAF_NODE	3439:15	3439:15	12	&
LEAF_NODE	3439:16	3439:16	11	(
FIELD	3439:17	3439:51	11	ojpegdata [ t2p -> pdf_ojpegdatalength ]
LEAF_NODE	3439:17	3439:17	12	ojpegdata
LEAF_NODE	3439:26	3439:26	12	[
EXPR	3439:27	3439:27	12	t2p -> pdf_ojpegdatalength
FIELD	3439:27	3439:32	13	t2p -> pdf_ojpegdatalength
LEAF_NODE	3439:27	3439:27	14	t2p
LEAF_NODE	3439:30	3439:30	14	->
LEAF_NODE	3439:32	3439:32	14	pdf_ojpegdatalength
LEAF_NODE	3439:51	3439:51	12	]
LEAF_NODE	3439:52	3439:52	11	)
LEAF_NODE	3439:53	3439:53	9	,
ARGUMENT	3440:3	3440:3	9	& ( ( ( unsigned char * ) dc ) [ offset_table ] )
UNARY_EXPR	3440:3	3440:39	10	& ( ( ( unsigned char * ) dc ) [ offset_table ] )
UNARY_OPERATOR	3440:3	3440:3	11	&
LEAF_NODE	3440:3	3440:3	12	&
LEAF_NODE	3440:4	3440:4	11	(
LEAF_NODE	3440:5	3440:5	11	(
LEAF_NODE	3440:6	3440:6	11	(
TYPE_NAME	3440:7	3440:16	11	unsigned char
LEAF_NODE	3440:7	3440:7	12	unsigned
LEAF_NODE	3440:16	3440:16	12	char
LEAF_NODE	3440:20	3440:20	11	*
LEAF_NODE	3440:21	3440:21	11	)
FIELD	3440:22	3440:22	11	dc
LEAF_NODE	3440:22	3440:22	12	dc
LEAF_NODE	3440:24	3440:24	11	)
LEAF_NODE	3440:25	3440:25	11	[
EXPR	3440:26	3440:26	11	offset_table
FIELD	3440:26	3440:26	12	offset_table
LEAF_NODE	3440:26	3440:26	13	offset_table
LEAF_NODE	3440:38	3440:38	11	]
LEAF_NODE	3440:39	3440:39	11	)
LEAF_NODE	3440:40	3440:40	9	,
ARGUMENT	3440:42	3440:42	9	code_count
FIELD	3440:42	3440:42	10	code_count
LEAF_NODE	3440:42	3440:42	11	code_count
LEAF_NODE	3440:52	3440:52	9	)
LEAF_NODE	3440:53	3440:53	7	;
EXPR_STATEMENT	3441:2	3441:26	6	offset_table += code_count ;
EXPR	3441:2	3441:2	7	offset_table += code_count
ASSIGN	3441:2	3441:16	8	offset_table += code_count
LVAL	3441:2	3441:2	9	offset_table
FIELD	3441:2	3441:2	10	offset_table
LEAF_NODE	3441:2	3441:2	11	offset_table
ASSIGN_OP	3441:14	3441:14	9	+=
LEAF_NODE	3441:14	3441:14	10	+=
RVAL	3441:16	3441:16	9	code_count
FIELD	3441:16	3441:16	10	code_count
LEAF_NODE	3441:16	3441:16	11	code_count
LEAF_NODE	3441:26	3441:26	7	;
EXPR_STATEMENT	3442:2	3442:38	6	t2p -> pdf_ojpegdatalength += code_count ;
EXPR	3442:2	3442:2	7	t2p -> pdf_ojpegdatalength += code_count
ASSIGN	3442:2	3442:28	8	t2p -> pdf_ojpegdatalength += code_count
LVAL	3442:2	3442:2	9	t2p -> pdf_ojpegdatalength
FIELD	3442:2	3442:7	10	t2p -> pdf_ojpegdatalength
LEAF_NODE	3442:2	3442:2	11	t2p
LEAF_NODE	3442:5	3442:5	11	->
LEAF_NODE	3442:7	3442:7	11	pdf_ojpegdatalength
ASSIGN_OP	3442:26	3442:26	9	+=
LEAF_NODE	3442:26	3442:26	10	+=
RVAL	3442:28	3442:28	9	code_count
FIELD	3442:28	3442:28	10	code_count
LEAF_NODE	3442:28	3442:28	11	code_count
LEAF_NODE	3442:38	3442:38	7	;
LEAF_NODE	3443:1	3443:1	5	}
SELECTION	3444:1	3444:28	3	
KEYWORD	3444:1	3444:1	4	if
LEAF_NODE	3444:1	3444:1	5	if
LEAF_NODE	3444:3	3444:3	4	(
CONDITION	3444:4	3444:4	4	proc == JPEGPROC_BASELINE
EXPR	3444:4	3444:10	5	proc == JPEGPROC_BASELINE
FIELD	3444:4	3444:4	6	proc
LEAF_NODE	3444:4	3444:4	7	proc
EQ_OPERATOR	3444:8	3444:8	6	==
LEAF_NODE	3444:8	3444:8	7	==
FIELD	3444:10	3444:10	6	JPEGPROC_BASELINE
LEAF_NODE	3444:10	3444:10	7	JPEGPROC_BASELINE
LEAF_NODE	3444:27	3444:27	4	)
STATEMENTS	3444:28	3467:1	4	
LEAF_NODE	3444:28	3444:28	5	{
STATEMENTS	3445:1	3446:2	5	
EXPR_STATEMENT	3445:1	3445:15	6	offset_table = 0 ;
EXPR	3445:1	3445:1	7	offset_table = 0
ASSIGN	3445:1	3445:14	8	offset_table = 0
LVAL	3445:1	3445:1	9	offset_table
FIELD	3445:1	3445:1	10	offset_table
LEAF_NODE	3445:1	3445:1	11	offset_table
ASSIGN_OP	3445:13	3445:13	9	=
LEAF_NODE	3445:13	3445:13	10	=
RVAL	3445:14	3445:14	9	0
FIELD	3445:14	3445:14	10	0
LEAF_NODE	3445:14	3445:14	11	0
LEAF_NODE	3445:15	3445:15	7	;
ITERATION	3446:2	3446:37	6	
KEYWORD	3446:2	3446:2	7	for
LEAF_NODE	3446:2	3446:2	8	for
LEAF_NODE	3446:5	3446:5	7	(
FOR_INIT	3446:6	3446:12	7	dest = 0 ;
EXPR	3446:6	3446:6	8	dest = 0
ASSIGN	3446:6	3446:11	9	dest = 0
LVAL	3446:6	3446:6	10	dest
FIELD	3446:6	3446:6	11	dest
LEAF_NODE	3446:6	3446:6	12	dest
ASSIGN_OP	3446:10	3446:10	10	=
LEAF_NODE	3446:10	3446:10	11	=
RVAL	3446:11	3446:11	10	0
FIELD	3446:11	3446:11	11	0
LEAF_NODE	3446:11	3446:11	12	0
LEAF_NODE	3446:12	3446:12	8	;
CONDITION	3446:13	3446:13	7	dest < table_count
EXPR	3446:13	3446:18	8	dest < table_count
FIELD	3446:13	3446:13	9	dest
LEAF_NODE	3446:13	3446:13	10	dest
REL_OPERATOR	3446:17	3446:17	9	<
LEAF_NODE	3446:17	3446:17	10	<
FIELD	3446:18	3446:18	9	table_count
LEAF_NODE	3446:18	3446:18	10	table_count
LEAF_NODE	3446:29	3446:29	7	;
FOR_EXPR	3446:30	3446:30	7	dest ++
EXPR	3446:30	3446:30	8	dest ++
FIELD	3446:30	3446:34	9	dest ++
LEAF_NODE	3446:30	3446:30	10	dest
LEAF_NODE	3446:34	3446:34	10	++
LEAF_NODE	3446:36	3446:36	7	)
STATEMENTS	3446:37	3466:2	7	
LEAF_NODE	3446:37	3446:37	8	{
STATEMENTS	3447:3	3465:3	8	
EXPR_STATEMENT	3447:3	3447:45	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff ;
EXPR	3447:3	3447:3	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
ASSIGN	3447:3	3447:41	11	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
LVAL	3447:3	3447:3	12	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3447:3	3447:39	13	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3447:3	3447:3	14	ojpegdata
LEAF_NODE	3447:12	3447:12	14	[
EXPR	3447:13	3447:13	14	t2p -> pdf_ojpegdatalength ++
FIELD	3447:13	3447:37	15	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3447:13	3447:13	16	t2p
LEAF_NODE	3447:16	3447:16	16	->
LEAF_NODE	3447:18	3447:18	16	pdf_ojpegdatalength
LEAF_NODE	3447:37	3447:37	16	++
LEAF_NODE	3447:39	3447:39	14	]
ASSIGN_OP	3447:40	3447:40	12	=
LEAF_NODE	3447:40	3447:40	13	=
RVAL	3447:41	3447:41	12	0xff
FIELD	3447:41	3447:41	13	0xff
LEAF_NODE	3447:41	3447:41	14	0xff
LEAF_NODE	3447:45	3447:45	10	;
EXPR_STATEMENT	3448:3	3448:45	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc4 ;
EXPR	3448:3	3448:3	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc4
ASSIGN	3448:3	3448:41	11	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xc4
LVAL	3448:3	3448:3	12	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3448:3	3448:39	13	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3448:3	3448:3	14	ojpegdata
LEAF_NODE	3448:12	3448:12	14	[
EXPR	3448:13	3448:13	14	t2p -> pdf_ojpegdatalength ++
FIELD	3448:13	3448:37	15	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3448:13	3448:13	16	t2p
LEAF_NODE	3448:16	3448:16	16	->
LEAF_NODE	3448:18	3448:18	16	pdf_ojpegdatalength
LEAF_NODE	3448:37	3448:37	16	++
LEAF_NODE	3448:39	3448:39	14	]
ASSIGN_OP	3448:40	3448:40	12	=
LEAF_NODE	3448:40	3448:40	13	=
RVAL	3448:41	3448:41	12	0xc4
FIELD	3448:41	3448:41	13	0xc4
LEAF_NODE	3448:41	3448:41	14	0xc4
LEAF_NODE	3448:45	3448:45	10	;
EXPR_STATEMENT	3449:3	3449:39	9	offset_ms_l = t2p -> pdf_ojpegdatalength ;
EXPR	3449:3	3449:3	10	offset_ms_l = t2p -> pdf_ojpegdatalength
ASSIGN	3449:3	3449:15	11	offset_ms_l = t2p -> pdf_ojpegdatalength
LVAL	3449:3	3449:3	12	offset_ms_l
FIELD	3449:3	3449:3	13	offset_ms_l
LEAF_NODE	3449:3	3449:3	14	offset_ms_l
ASSIGN_OP	3449:14	3449:14	12	=
LEAF_NODE	3449:14	3449:14	13	=
RVAL	3449:15	3449:15	12	t2p -> pdf_ojpegdatalength
FIELD	3449:15	3449:20	13	t2p -> pdf_ojpegdatalength
LEAF_NODE	3449:15	3449:15	14	t2p
LEAF_NODE	3449:18	3449:18	14	->
LEAF_NODE	3449:20	3449:20	14	pdf_ojpegdatalength
LEAF_NODE	3449:39	3449:39	10	;
EXPR_STATEMENT	3450:3	3450:30	9	t2p -> pdf_ojpegdatalength += 2 ;
EXPR	3450:3	3450:3	10	t2p -> pdf_ojpegdatalength += 2
ASSIGN	3450:3	3450:29	11	t2p -> pdf_ojpegdatalength += 2
LVAL	3450:3	3450:3	12	t2p -> pdf_ojpegdatalength
FIELD	3450:3	3450:8	13	t2p -> pdf_ojpegdatalength
LEAF_NODE	3450:3	3450:3	14	t2p
LEAF_NODE	3450:6	3450:6	14	->
LEAF_NODE	3450:8	3450:8	14	pdf_ojpegdatalength
ASSIGN_OP	3450:27	3450:27	12	+=
LEAF_NODE	3450:27	3450:27	13	+=
RVAL	3450:29	3450:29	12	2
FIELD	3450:29	3450:29	13	2
LEAF_NODE	3450:29	3450:29	14	2
LEAF_NODE	3450:30	3450:30	10	;
EXPR_STATEMENT	3451:3	3451:46	9	ojpegdata [ t2p -> pdf_ojpegdatalength ] |= 0x10 ;
EXPR	3451:3	3451:3	10	ojpegdata [ t2p -> pdf_ojpegdatalength ] |= 0x10
ASSIGN	3451:3	3451:42	11	ojpegdata [ t2p -> pdf_ojpegdatalength ] |= 0x10
LVAL	3451:3	3451:3	12	ojpegdata [ t2p -> pdf_ojpegdatalength ]
FIELD	3451:3	3451:37	13	ojpegdata [ t2p -> pdf_ojpegdatalength ]
LEAF_NODE	3451:3	3451:3	14	ojpegdata
LEAF_NODE	3451:12	3451:12	14	[
EXPR	3451:13	3451:13	14	t2p -> pdf_ojpegdatalength
FIELD	3451:13	3451:18	15	t2p -> pdf_ojpegdatalength
LEAF_NODE	3451:13	3451:13	16	t2p
LEAF_NODE	3451:16	3451:16	16	->
LEAF_NODE	3451:18	3451:18	16	pdf_ojpegdatalength
LEAF_NODE	3451:37	3451:37	14	]
ASSIGN_OP	3451:39	3451:39	12	|=
LEAF_NODE	3451:39	3451:39	13	|=
RVAL	3451:42	3451:42	12	0x10
FIELD	3451:42	3451:42	13	0x10
LEAF_NODE	3451:42	3451:42	14	0x10
LEAF_NODE	3451:46	3451:46	10	;
EXPR_STATEMENT	3452:3	3452:54	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] |= dest & 0x0f ;
EXPR	3452:3	3452:3	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] |= dest & 0x0f
ASSIGN	3452:3	3452:43	11	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] |= dest & 0x0f
LVAL	3452:3	3452:3	12	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3452:3	3452:39	13	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3452:3	3452:3	14	ojpegdata
LEAF_NODE	3452:12	3452:12	14	[
EXPR	3452:13	3452:13	14	t2p -> pdf_ojpegdatalength ++
FIELD	3452:13	3452:37	15	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3452:13	3452:13	16	t2p
LEAF_NODE	3452:16	3452:16	16	->
LEAF_NODE	3452:18	3452:18	16	pdf_ojpegdatalength
LEAF_NODE	3452:37	3452:37	16	++
LEAF_NODE	3452:39	3452:39	14	]
ASSIGN_OP	3452:41	3452:41	12	|=
LEAF_NODE	3452:41	3452:41	13	|=
RVAL	3452:43	3452:50	12	dest & 0x0f
FIELD	3452:43	3452:43	13	dest
LEAF_NODE	3452:43	3452:43	14	dest
LEAF_NODE	3452:48	3452:48	13	&
FIELD	3452:50	3452:50	13	0x0f
LEAF_NODE	3452:50	3452:50	14	0x0f
LEAF_NODE	3452:54	3452:54	10	;
EXPR_STATEMENT	3453:3	3454:46	9	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) ac ) [ offset_table ] ) , 16 ) ;
EXPR	3453:3	3453:3	10	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) ac ) [ offset_table ] ) , 16 )
FUNCTION_CALL	3453:3	3454:45	11	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) ac ) [ offset_table ] ) , 16 )
CALLEE	3453:3	3453:3	12	_TIFFmemcpy
LEAF_NODE	3453:3	3453:3	13	_TIFFmemcpy
LEAF_NODE	3453:14	3453:14	12	(
ARGUMENT	3453:16	3453:16	12	& ( ojpegdata [ t2p -> pdf_ojpegdatalength ] )
UNARY_EXPR	3453:16	3453:53	13	& ( ojpegdata [ t2p -> pdf_ojpegdatalength ] )
UNARY_OPERATOR	3453:16	3453:16	14	&
LEAF_NODE	3453:16	3453:16	15	&
LEAF_NODE	3453:17	3453:17	14	(
FIELD	3453:18	3453:52	14	ojpegdata [ t2p -> pdf_ojpegdatalength ]
LEAF_NODE	3453:18	3453:18	15	ojpegdata
LEAF_NODE	3453:27	3453:27	15	[
EXPR	3453:28	3453:28	15	t2p -> pdf_ojpegdatalength
FIELD	3453:28	3453:33	16	t2p -> pdf_ojpegdatalength
LEAF_NODE	3453:28	3453:28	17	t2p
LEAF_NODE	3453:31	3453:31	17	->
LEAF_NODE	3453:33	3453:33	17	pdf_ojpegdatalength
LEAF_NODE	3453:52	3453:52	15	]
LEAF_NODE	3453:53	3453:53	14	)
LEAF_NODE	3453:54	3453:54	12	,
ARGUMENT	3454:4	3454:4	12	& ( ( ( unsigned char * ) ac ) [ offset_table ] )
UNARY_EXPR	3454:4	3454:40	13	& ( ( ( unsigned char * ) ac ) [ offset_table ] )
UNARY_OPERATOR	3454:4	3454:4	14	&
LEAF_NODE	3454:4	3454:4	15	&
LEAF_NODE	3454:5	3454:5	14	(
LEAF_NODE	3454:6	3454:6	14	(
LEAF_NODE	3454:7	3454:7	14	(
TYPE_NAME	3454:8	3454:17	14	unsigned char
LEAF_NODE	3454:8	3454:8	15	unsigned
LEAF_NODE	3454:17	3454:17	15	char
LEAF_NODE	3454:21	3454:21	14	*
LEAF_NODE	3454:22	3454:22	14	)
FIELD	3454:23	3454:23	14	ac
LEAF_NODE	3454:23	3454:23	15	ac
LEAF_NODE	3454:25	3454:25	14	)
LEAF_NODE	3454:26	3454:26	14	[
EXPR	3454:27	3454:27	14	offset_table
FIELD	3454:27	3454:27	15	offset_table
LEAF_NODE	3454:27	3454:27	16	offset_table
LEAF_NODE	3454:39	3454:39	14	]
LEAF_NODE	3454:40	3454:40	14	)
LEAF_NODE	3454:41	3454:41	12	,
ARGUMENT	3454:43	3454:43	12	16
FIELD	3454:43	3454:43	13	16
LEAF_NODE	3454:43	3454:43	14	16
LEAF_NODE	3454:45	3454:45	12	)
LEAF_NODE	3454:46	3454:46	10	;
EXPR_STATEMENT	3455:3	3455:15	9	code_count = 0 ;
EXPR	3455:3	3455:3	10	code_count = 0
ASSIGN	3455:3	3455:14	11	code_count = 0
LVAL	3455:3	3455:3	12	code_count
FIELD	3455:3	3455:3	13	code_count
LEAF_NODE	3455:3	3455:3	14	code_count
ASSIGN_OP	3455:13	3455:13	12	=
LEAF_NODE	3455:13	3455:13	13	=
RVAL	3455:14	3455:14	12	0
FIELD	3455:14	3455:14	13	0
LEAF_NODE	3455:14	3455:14	14	0
LEAF_NODE	3455:15	3455:15	10	;
EXPR_STATEMENT	3456:3	3456:19	9	offset_table += 16 ;
EXPR	3456:3	3456:3	10	offset_table += 16
ASSIGN	3456:3	3456:17	11	offset_table += 16
LVAL	3456:3	3456:3	12	offset_table
FIELD	3456:3	3456:3	13	offset_table
LEAF_NODE	3456:3	3456:3	14	offset_table
ASSIGN_OP	3456:15	3456:15	12	+=
LEAF_NODE	3456:15	3456:15	13	+=
RVAL	3456:17	3456:17	12	16
FIELD	3456:17	3456:17	13	16
LEAF_NODE	3456:17	3456:17	14	16
LEAF_NODE	3456:19	3456:19	10	;
ITERATION	3457:3	3457:20	9	
KEYWORD	3457:3	3457:3	10	for
LEAF_NODE	3457:3	3457:3	11	for
LEAF_NODE	3457:6	3457:6	10	(
FOR_INIT	3457:7	3457:10	10	i = 0 ;
EXPR	3457:7	3457:7	11	i = 0
ASSIGN	3457:7	3457:9	12	i = 0
LVAL	3457:7	3457:7	13	i
FIELD	3457:7	3457:7	14	i
LEAF_NODE	3457:7	3457:7	15	i
ASSIGN_OP	3457:8	3457:8	13	=
LEAF_NODE	3457:8	3457:8	14	=
RVAL	3457:9	3457:9	13	0
FIELD	3457:9	3457:9	14	0
LEAF_NODE	3457:9	3457:9	15	0
LEAF_NODE	3457:10	3457:10	11	;
CONDITION	3457:11	3457:11	10	i < 16
EXPR	3457:11	3457:13	11	i < 16
FIELD	3457:11	3457:11	12	i
LEAF_NODE	3457:11	3457:11	13	i
REL_OPERATOR	3457:12	3457:12	12	<
LEAF_NODE	3457:12	3457:12	13	<
FIELD	3457:13	3457:13	12	16
LEAF_NODE	3457:13	3457:13	13	16
LEAF_NODE	3457:15	3457:15	10	;
FOR_EXPR	3457:16	3457:16	10	i ++
EXPR	3457:16	3457:16	11	i ++
FIELD	3457:16	3457:17	12	i ++
LEAF_NODE	3457:16	3457:16	13	i
LEAF_NODE	3457:17	3457:17	13	++
LEAF_NODE	3457:19	3457:19	10	)
STATEMENTS	3457:20	3459:3	10	
LEAF_NODE	3457:20	3457:20	11	{
STATEMENTS	3458:4	3458:4	11	
EXPR_STATEMENT	3458:4	3458:53	12	code_count += ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] ;
EXPR	3458:4	3458:4	13	code_count += ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
ASSIGN	3458:4	3458:16	14	code_count += ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LVAL	3458:4	3458:4	15	code_count
FIELD	3458:4	3458:4	16	code_count
LEAF_NODE	3458:4	3458:4	17	code_count
ASSIGN_OP	3458:14	3458:14	15	+=
LEAF_NODE	3458:14	3458:14	16	+=
RVAL	3458:16	3458:16	15	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3458:16	3458:52	16	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3458:16	3458:16	17	ojpegdata
LEAF_NODE	3458:25	3458:25	17	[
EXPR	3458:26	3458:26	17	t2p -> pdf_ojpegdatalength ++
FIELD	3458:26	3458:50	18	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3458:26	3458:26	19	t2p
LEAF_NODE	3458:29	3458:29	19	->
LEAF_NODE	3458:31	3458:31	19	pdf_ojpegdatalength
LEAF_NODE	3458:50	3458:50	19	++
LEAF_NODE	3458:52	3458:52	17	]
LEAF_NODE	3458:53	3458:53	13	;
LEAF_NODE	3459:3	3459:3	11	}
EXPR_STATEMENT	3460:3	3460:53	9	ojpegdata [ offset_ms_l ] = ( ( 19 + code_count ) >> 8 ) & 0xff ;
EXPR	3460:3	3460:3	10	ojpegdata [ offset_ms_l ] = ( ( 19 + code_count ) >> 8 ) & 0xff
ASSIGN	3460:3	3460:26	11	ojpegdata [ offset_ms_l ] = ( ( 19 + code_count ) >> 8 ) & 0xff
LVAL	3460:3	3460:3	12	ojpegdata [ offset_ms_l ]
FIELD	3460:3	3460:24	13	ojpegdata [ offset_ms_l ]
LEAF_NODE	3460:3	3460:3	14	ojpegdata
LEAF_NODE	3460:12	3460:12	14	[
EXPR	3460:13	3460:13	14	offset_ms_l
FIELD	3460:13	3460:13	15	offset_ms_l
LEAF_NODE	3460:13	3460:13	16	offset_ms_l
LEAF_NODE	3460:24	3460:24	14	]
ASSIGN_OP	3460:25	3460:25	12	=
LEAF_NODE	3460:25	3460:25	13	=
RVAL	3460:26	3460:49	12	( ( 19 + code_count ) >> 8 ) & 0xff
LEAF_NODE	3460:26	3460:26	13	(
LEAF_NODE	3460:27	3460:27	13	(
FIELD	3460:28	3460:28	13	19
LEAF_NODE	3460:28	3460:28	14	19
LEAF_NODE	3460:30	3460:30	13	+
FIELD	3460:31	3460:31	13	code_count
LEAF_NODE	3460:31	3460:31	14	code_count
LEAF_NODE	3460:41	3460:41	13	)
LEAF_NODE	3460:42	3460:42	13	>>
FIELD	3460:44	3460:44	13	8
LEAF_NODE	3460:44	3460:44	14	8
LEAF_NODE	3460:45	3460:45	13	)
LEAF_NODE	3460:47	3460:47	13	&
FIELD	3460:49	3460:49	13	0xff
LEAF_NODE	3460:49	3460:49	14	0xff
LEAF_NODE	3460:53	3460:53	10	;
EXPR_STATEMENT	3461:3	3461:50	9	ojpegdata [ offset_ms_l + 1 ] = ( 19 + code_count ) & 0xff ;
EXPR	3461:3	3461:3	10	ojpegdata [ offset_ms_l + 1 ] = ( 19 + code_count ) & 0xff
ASSIGN	3461:3	3461:28	11	ojpegdata [ offset_ms_l + 1 ] = ( 19 + code_count ) & 0xff
LVAL	3461:3	3461:3	12	ojpegdata [ offset_ms_l + 1 ]
FIELD	3461:3	3461:26	13	ojpegdata [ offset_ms_l + 1 ]
LEAF_NODE	3461:3	3461:3	14	ojpegdata
LEAF_NODE	3461:12	3461:12	14	[
EXPR	3461:13	3461:25	14	offset_ms_l + 1
FIELD	3461:13	3461:13	15	offset_ms_l
LEAF_NODE	3461:13	3461:13	16	offset_ms_l
LEAF_NODE	3461:24	3461:24	15	+
FIELD	3461:25	3461:25	15	1
LEAF_NODE	3461:25	3461:25	16	1
LEAF_NODE	3461:26	3461:26	14	]
ASSIGN_OP	3461:27	3461:27	12	=
LEAF_NODE	3461:27	3461:27	13	=
RVAL	3461:28	3461:46	12	( 19 + code_count ) & 0xff
LEAF_NODE	3461:28	3461:28	13	(
FIELD	3461:29	3461:29	13	19
LEAF_NODE	3461:29	3461:29	14	19
LEAF_NODE	3461:31	3461:31	13	+
FIELD	3461:32	3461:32	13	code_count
LEAF_NODE	3461:32	3461:32	14	code_count
LEAF_NODE	3461:42	3461:42	13	)
LEAF_NODE	3461:44	3461:44	13	&
FIELD	3461:46	3461:46	13	0xff
LEAF_NODE	3461:46	3461:46	14	0xff
LEAF_NODE	3461:50	3461:50	10	;
EXPR_STATEMENT	3462:3	3463:54	9	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) ac ) [ offset_table ] ) , code_count ) ;
EXPR	3462:3	3462:3	10	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) ac ) [ offset_table ] ) , code_count )
FUNCTION_CALL	3462:3	3463:53	11	_TIFFmemcpy ( & ( ojpegdata [ t2p -> pdf_ojpegdatalength ] ) , & ( ( ( unsigned char * ) ac ) [ offset_table ] ) , code_count )
CALLEE	3462:3	3462:3	12	_TIFFmemcpy
LEAF_NODE	3462:3	3462:3	13	_TIFFmemcpy
LEAF_NODE	3462:14	3462:14	12	(
ARGUMENT	3462:16	3462:16	12	& ( ojpegdata [ t2p -> pdf_ojpegdatalength ] )
UNARY_EXPR	3462:16	3462:53	13	& ( ojpegdata [ t2p -> pdf_ojpegdatalength ] )
UNARY_OPERATOR	3462:16	3462:16	14	&
LEAF_NODE	3462:16	3462:16	15	&
LEAF_NODE	3462:17	3462:17	14	(
FIELD	3462:18	3462:52	14	ojpegdata [ t2p -> pdf_ojpegdatalength ]
LEAF_NODE	3462:18	3462:18	15	ojpegdata
LEAF_NODE	3462:27	3462:27	15	[
EXPR	3462:28	3462:28	15	t2p -> pdf_ojpegdatalength
FIELD	3462:28	3462:33	16	t2p -> pdf_ojpegdatalength
LEAF_NODE	3462:28	3462:28	17	t2p
LEAF_NODE	3462:31	3462:31	17	->
LEAF_NODE	3462:33	3462:33	17	pdf_ojpegdatalength
LEAF_NODE	3462:52	3462:52	15	]
LEAF_NODE	3462:53	3462:53	14	)
LEAF_NODE	3462:54	3462:54	12	,
ARGUMENT	3463:4	3463:4	12	& ( ( ( unsigned char * ) ac ) [ offset_table ] )
UNARY_EXPR	3463:4	3463:40	13	& ( ( ( unsigned char * ) ac ) [ offset_table ] )
UNARY_OPERATOR	3463:4	3463:4	14	&
LEAF_NODE	3463:4	3463:4	15	&
LEAF_NODE	3463:5	3463:5	14	(
LEAF_NODE	3463:6	3463:6	14	(
LEAF_NODE	3463:7	3463:7	14	(
TYPE_NAME	3463:8	3463:17	14	unsigned char
LEAF_NODE	3463:8	3463:8	15	unsigned
LEAF_NODE	3463:17	3463:17	15	char
LEAF_NODE	3463:21	3463:21	14	*
LEAF_NODE	3463:22	3463:22	14	)
FIELD	3463:23	3463:23	14	ac
LEAF_NODE	3463:23	3463:23	15	ac
LEAF_NODE	3463:25	3463:25	14	)
LEAF_NODE	3463:26	3463:26	14	[
EXPR	3463:27	3463:27	14	offset_table
FIELD	3463:27	3463:27	15	offset_table
LEAF_NODE	3463:27	3463:27	16	offset_table
LEAF_NODE	3463:39	3463:39	14	]
LEAF_NODE	3463:40	3463:40	14	)
LEAF_NODE	3463:41	3463:41	12	,
ARGUMENT	3463:43	3463:43	12	code_count
FIELD	3463:43	3463:43	13	code_count
LEAF_NODE	3463:43	3463:43	14	code_count
LEAF_NODE	3463:53	3463:53	12	)
LEAF_NODE	3463:54	3463:54	10	;
EXPR_STATEMENT	3464:3	3464:27	9	offset_table += code_count ;
EXPR	3464:3	3464:3	10	offset_table += code_count
ASSIGN	3464:3	3464:17	11	offset_table += code_count
LVAL	3464:3	3464:3	12	offset_table
FIELD	3464:3	3464:3	13	offset_table
LEAF_NODE	3464:3	3464:3	14	offset_table
ASSIGN_OP	3464:15	3464:15	12	+=
LEAF_NODE	3464:15	3464:15	13	+=
RVAL	3464:17	3464:17	12	code_count
FIELD	3464:17	3464:17	13	code_count
LEAF_NODE	3464:17	3464:17	14	code_count
LEAF_NODE	3464:27	3464:27	10	;
EXPR_STATEMENT	3465:3	3465:39	9	t2p -> pdf_ojpegdatalength += code_count ;
EXPR	3465:3	3465:3	10	t2p -> pdf_ojpegdatalength += code_count
ASSIGN	3465:3	3465:29	11	t2p -> pdf_ojpegdatalength += code_count
LVAL	3465:3	3465:3	12	t2p -> pdf_ojpegdatalength
FIELD	3465:3	3465:8	13	t2p -> pdf_ojpegdatalength
LEAF_NODE	3465:3	3465:3	14	t2p
LEAF_NODE	3465:6	3465:6	14	->
LEAF_NODE	3465:8	3465:8	14	pdf_ojpegdatalength
ASSIGN_OP	3465:27	3465:27	12	+=
LEAF_NODE	3465:27	3465:27	13	+=
RVAL	3465:29	3465:29	12	code_count
FIELD	3465:29	3465:29	13	code_count
LEAF_NODE	3465:29	3465:29	14	code_count
LEAF_NODE	3465:39	3465:39	10	;
LEAF_NODE	3466:2	3466:2	8	}
LEAF_NODE	3467:1	3467:1	5	}
SELECTION	3468:1	3468:32	3	
KEYWORD	3468:1	3468:1	4	if
LEAF_NODE	3468:1	3468:1	5	if
LEAF_NODE	3468:3	3468:3	4	(
CONDITION	3468:4	3468:4	4	TIFFNumberOfStrips ( input ) > 1
EXPR	3468:4	3468:30	5	TIFFNumberOfStrips ( input ) > 1
FUNCTION_CALL	3468:4	3468:28	6	TIFFNumberOfStrips ( input )
CALLEE	3468:4	3468:4	7	TIFFNumberOfStrips
LEAF_NODE	3468:4	3468:4	8	TIFFNumberOfStrips
LEAF_NODE	3468:22	3468:22	7	(
ARGUMENT	3468:23	3468:23	7	input
FIELD	3468:23	3468:23	8	input
LEAF_NODE	3468:23	3468:23	9	input
LEAF_NODE	3468:28	3468:28	7	)
REL_OPERATOR	3468:29	3468:29	6	>
LEAF_NODE	3468:29	3468:29	7	>
FIELD	3468:30	3468:30	6	1
LEAF_NODE	3468:30	3468:30	7	1
LEAF_NODE	3468:31	3468:31	4	)
STATEMENTS	3468:32	3480:1	4	
LEAF_NODE	3468:32	3468:32	5	{
STATEMENTS	3469:2	3479:2	5	
EXPR_STATEMENT	3469:2	3469:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff ;
EXPR	3469:2	3469:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
ASSIGN	3469:2	3469:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
LVAL	3469:2	3469:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3469:2	3469:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3469:2	3469:2	11	ojpegdata
LEAF_NODE	3469:11	3469:11	11	[
EXPR	3469:12	3469:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3469:12	3469:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3469:12	3469:12	13	t2p
LEAF_NODE	3469:15	3469:15	13	->
LEAF_NODE	3469:17	3469:17	13	pdf_ojpegdatalength
LEAF_NODE	3469:36	3469:36	13	++
LEAF_NODE	3469:38	3469:38	11	]
ASSIGN_OP	3469:39	3469:39	9	=
LEAF_NODE	3469:39	3469:39	10	=
RVAL	3469:40	3469:40	9	0xff
FIELD	3469:40	3469:40	10	0xff
LEAF_NODE	3469:40	3469:40	11	0xff
LEAF_NODE	3469:44	3469:44	7	;
EXPR_STATEMENT	3470:2	3470:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xdd ;
EXPR	3470:2	3470:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xdd
ASSIGN	3470:2	3470:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xdd
LVAL	3470:2	3470:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3470:2	3470:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3470:2	3470:2	11	ojpegdata
LEAF_NODE	3470:11	3470:11	11	[
EXPR	3470:12	3470:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3470:12	3470:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3470:12	3470:12	13	t2p
LEAF_NODE	3470:15	3470:15	13	->
LEAF_NODE	3470:17	3470:17	13	pdf_ojpegdatalength
LEAF_NODE	3470:36	3470:36	13	++
LEAF_NODE	3470:38	3470:38	11	]
ASSIGN_OP	3470:39	3470:39	9	=
LEAF_NODE	3470:39	3470:39	10	=
RVAL	3470:40	3470:40	9	0xdd
FIELD	3470:40	3470:40	10	0xdd
LEAF_NODE	3470:40	3470:40	11	0xdd
LEAF_NODE	3470:44	3470:44	7	;
EXPR_STATEMENT	3471:2	3471:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00 ;
EXPR	3471:2	3471:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00
ASSIGN	3471:2	3471:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00
LVAL	3471:2	3471:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3471:2	3471:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3471:2	3471:2	11	ojpegdata
LEAF_NODE	3471:11	3471:11	11	[
EXPR	3471:12	3471:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3471:12	3471:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3471:12	3471:12	13	t2p
LEAF_NODE	3471:15	3471:15	13	->
LEAF_NODE	3471:17	3471:17	13	pdf_ojpegdatalength
LEAF_NODE	3471:36	3471:36	13	++
LEAF_NODE	3471:38	3471:38	11	]
ASSIGN_OP	3471:39	3471:39	9	=
LEAF_NODE	3471:39	3471:39	10	=
RVAL	3471:40	3471:40	9	0x00
FIELD	3471:40	3471:40	10	0x00
LEAF_NODE	3471:40	3471:40	11	0x00
LEAF_NODE	3471:44	3471:44	7	;
EXPR_STATEMENT	3472:2	3472:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x04 ;
EXPR	3472:2	3472:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x04
ASSIGN	3472:2	3472:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x04
LVAL	3472:2	3472:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3472:2	3472:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3472:2	3472:2	11	ojpegdata
LEAF_NODE	3472:11	3472:11	11	[
EXPR	3472:12	3472:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3472:12	3472:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3472:12	3472:12	13	t2p
LEAF_NODE	3472:15	3472:15	13	->
LEAF_NODE	3472:17	3472:17	13	pdf_ojpegdatalength
LEAF_NODE	3472:36	3472:36	13	++
LEAF_NODE	3472:38	3472:38	11	]
ASSIGN_OP	3472:39	3472:39	9	=
LEAF_NODE	3472:39	3472:39	10	=
RVAL	3472:40	3472:40	9	0x04
FIELD	3472:40	3472:40	10	0x04
LEAF_NODE	3472:40	3472:40	11	0x04
LEAF_NODE	3472:44	3472:44	7	;
EXPR_STATEMENT	3473:2	3473:11	6	h_samp *= 8 ;
EXPR	3473:2	3473:2	7	h_samp *= 8
ASSIGN	3473:2	3473:10	8	h_samp *= 8
LVAL	3473:2	3473:2	9	h_samp
FIELD	3473:2	3473:2	10	h_samp
LEAF_NODE	3473:2	3473:2	11	h_samp
ASSIGN_OP	3473:8	3473:8	9	*=
LEAF_NODE	3473:8	3473:8	10	*=
RVAL	3473:10	3473:10	9	8
FIELD	3473:10	3473:10	10	8
LEAF_NODE	3473:10	3473:10	11	8
LEAF_NODE	3473:11	3473:11	7	;
EXPR_STATEMENT	3474:2	3474:11	6	v_samp *= 8 ;
EXPR	3474:2	3474:2	7	v_samp *= 8
ASSIGN	3474:2	3474:10	8	v_samp *= 8
LVAL	3474:2	3474:2	9	v_samp
FIELD	3474:2	3474:2	10	v_samp
LEAF_NODE	3474:2	3474:2	11	v_samp
ASSIGN_OP	3474:8	3474:8	9	*=
LEAF_NODE	3474:8	3474:8	10	*=
RVAL	3474:10	3474:10	9	8
FIELD	3474:10	3474:10	10	8
LEAF_NODE	3474:10	3474:10	11	8
LEAF_NODE	3474:11	3474:11	7	;
EXPR_STATEMENT	3475:2	3475:40	6	ri = ( t2p -> tiff_width + h_samp - 1 ) / h_samp ;
EXPR	3475:2	3475:2	7	ri = ( t2p -> tiff_width + h_samp - 1 ) / h_samp
ASSIGN	3475:2	3475:5	8	ri = ( t2p -> tiff_width + h_samp - 1 ) / h_samp
LVAL	3475:2	3475:2	9	ri
FIELD	3475:2	3475:2	10	ri
LEAF_NODE	3475:2	3475:2	11	ri
ASSIGN_OP	3475:4	3475:4	9	=
LEAF_NODE	3475:4	3475:4	10	=
RVAL	3475:5	3475:34	9	( t2p -> tiff_width + h_samp - 1 ) / h_samp
LEAF_NODE	3475:5	3475:5	10	(
FIELD	3475:6	3475:11	10	t2p -> tiff_width
LEAF_NODE	3475:6	3475:6	11	t2p
LEAF_NODE	3475:9	3475:9	11	->
LEAF_NODE	3475:11	3475:11	11	tiff_width
LEAF_NODE	3475:21	3475:21	10	+
FIELD	3475:22	3475:22	10	h_samp
LEAF_NODE	3475:22	3475:22	11	h_samp
LEAF_NODE	3475:28	3475:28	10	-
FIELD	3475:29	3475:29	10	1
LEAF_NODE	3475:29	3475:29	11	1
LEAF_NODE	3475:30	3475:30	10	)
LEAF_NODE	3475:32	3475:32	10	/
FIELD	3475:34	3475:34	10	h_samp
LEAF_NODE	3475:34	3475:34	11	h_samp
LEAF_NODE	3475:40	3475:40	7	;
EXPR_STATEMENT	3476:2	3476:50	6	TIFFGetField ( input , TIFFTAG_ROWSPERSTRIP , & rows ) ;
EXPR	3476:2	3476:2	7	TIFFGetField ( input , TIFFTAG_ROWSPERSTRIP , & rows )
FUNCTION_CALL	3476:2	3476:49	8	TIFFGetField ( input , TIFFTAG_ROWSPERSTRIP , & rows )
CALLEE	3476:2	3476:2	9	TIFFGetField
LEAF_NODE	3476:2	3476:2	10	TIFFGetField
LEAF_NODE	3476:14	3476:14	9	(
ARGUMENT	3476:15	3476:15	9	input
FIELD	3476:15	3476:15	10	input
LEAF_NODE	3476:15	3476:15	11	input
LEAF_NODE	3476:20	3476:20	9	,
ARGUMENT	3476:22	3476:22	9	TIFFTAG_ROWSPERSTRIP
FIELD	3476:22	3476:22	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	3476:22	3476:22	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	3476:42	3476:42	9	,
ARGUMENT	3476:44	3476:44	9	& rows
UNARY_EXPR	3476:44	3476:45	10	& rows
UNARY_OPERATOR	3476:44	3476:44	11	&
LEAF_NODE	3476:44	3476:44	12	&
FIELD	3476:45	3476:45	11	rows
LEAF_NODE	3476:45	3476:45	12	rows
LEAF_NODE	3476:49	3476:49	9	)
LEAF_NODE	3476:50	3476:50	7	;
EXPR_STATEMENT	3477:2	3477:28	6	ri *= ( rows + v_samp - 1 ) / v_samp ;
EXPR	3477:2	3477:2	7	ri *= ( rows + v_samp - 1 ) / v_samp
ASSIGN	3477:2	3477:6	8	ri *= ( rows + v_samp - 1 ) / v_samp
LVAL	3477:2	3477:2	9	ri
FIELD	3477:2	3477:2	10	ri
LEAF_NODE	3477:2	3477:2	11	ri
ASSIGN_OP	3477:4	3477:4	9	*=
LEAF_NODE	3477:4	3477:4	10	*=
RVAL	3477:6	3477:22	9	( rows + v_samp - 1 ) / v_samp
LEAF_NODE	3477:6	3477:6	10	(
FIELD	3477:7	3477:7	10	rows
LEAF_NODE	3477:7	3477:7	11	rows
LEAF_NODE	3477:11	3477:11	10	+
FIELD	3477:12	3477:12	10	v_samp
LEAF_NODE	3477:12	3477:12	11	v_samp
LEAF_NODE	3477:18	3477:18	10	-
FIELD	3477:19	3477:19	10	1
LEAF_NODE	3477:19	3477:19	11	1
LEAF_NODE	3477:20	3477:20	10	)
LEAF_NODE	3477:21	3477:21	10	/
FIELD	3477:22	3477:22	10	v_samp
LEAF_NODE	3477:22	3477:22	11	v_samp
LEAF_NODE	3477:28	3477:28	7	;
EXPR_STATEMENT	3478:2	3478:55	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( ri >> 8 ) & 0xff ;
EXPR	3478:2	3478:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( ri >> 8 ) & 0xff
ASSIGN	3478:2	3478:41	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( ri >> 8 ) & 0xff
LVAL	3478:2	3478:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3478:2	3478:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3478:2	3478:2	11	ojpegdata
LEAF_NODE	3478:11	3478:11	11	[
EXPR	3478:12	3478:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3478:12	3478:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3478:12	3478:12	13	t2p
LEAF_NODE	3478:15	3478:15	13	->
LEAF_NODE	3478:17	3478:17	13	pdf_ojpegdatalength
LEAF_NODE	3478:36	3478:36	13	++
LEAF_NODE	3478:38	3478:38	11	]
ASSIGN_OP	3478:39	3478:39	9	=
LEAF_NODE	3478:39	3478:39	10	=
RVAL	3478:41	3478:51	9	( ri >> 8 ) & 0xff
LEAF_NODE	3478:41	3478:41	10	(
FIELD	3478:42	3478:42	10	ri
LEAF_NODE	3478:42	3478:42	11	ri
LEAF_NODE	3478:44	3478:44	10	>>
FIELD	3478:46	3478:46	10	8
LEAF_NODE	3478:46	3478:46	11	8
LEAF_NODE	3478:47	3478:47	10	)
LEAF_NODE	3478:49	3478:49	10	&
FIELD	3478:51	3478:51	10	0xff
LEAF_NODE	3478:51	3478:51	11	0xff
LEAF_NODE	3478:55	3478:55	7	;
EXPR_STATEMENT	3479:2	3479:50	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ri & 0xff ;
EXPR	3479:2	3479:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ri & 0xff
ASSIGN	3479:2	3479:41	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ri & 0xff
LVAL	3479:2	3479:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3479:2	3479:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3479:2	3479:2	11	ojpegdata
LEAF_NODE	3479:11	3479:11	11	[
EXPR	3479:12	3479:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3479:12	3479:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3479:12	3479:12	13	t2p
LEAF_NODE	3479:15	3479:15	13	->
LEAF_NODE	3479:17	3479:17	13	pdf_ojpegdatalength
LEAF_NODE	3479:36	3479:36	13	++
LEAF_NODE	3479:38	3479:38	11	]
ASSIGN_OP	3479:39	3479:39	9	=
LEAF_NODE	3479:39	3479:39	10	=
RVAL	3479:41	3479:46	9	ri & 0xff
FIELD	3479:41	3479:41	10	ri
LEAF_NODE	3479:41	3479:41	11	ri
LEAF_NODE	3479:44	3479:44	10	&
FIELD	3479:46	3479:46	10	0xff
LEAF_NODE	3479:46	3479:46	11	0xff
LEAF_NODE	3479:50	3479:50	7	;
LEAF_NODE	3480:1	3480:1	5	}
EXPR_STATEMENT	3481:1	3481:43	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff ;
EXPR	3481:1	3481:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
ASSIGN	3481:1	3481:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xff
LVAL	3481:1	3481:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3481:1	3481:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3481:1	3481:1	8	ojpegdata
LEAF_NODE	3481:10	3481:10	8	[
EXPR	3481:11	3481:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3481:11	3481:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3481:11	3481:11	10	t2p
LEAF_NODE	3481:14	3481:14	10	->
LEAF_NODE	3481:16	3481:16	10	pdf_ojpegdatalength
LEAF_NODE	3481:35	3481:35	10	++
LEAF_NODE	3481:37	3481:37	8	]
ASSIGN_OP	3481:38	3481:38	6	=
LEAF_NODE	3481:38	3481:38	7	=
RVAL	3481:39	3481:39	6	0xff
FIELD	3481:39	3481:39	7	0xff
LEAF_NODE	3481:39	3481:39	8	0xff
LEAF_NODE	3481:43	3481:43	4	;
EXPR_STATEMENT	3482:1	3482:43	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xda ;
EXPR	3482:1	3482:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xda
ASSIGN	3482:1	3482:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0xda
LVAL	3482:1	3482:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3482:1	3482:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3482:1	3482:1	8	ojpegdata
LEAF_NODE	3482:10	3482:10	8	[
EXPR	3482:11	3482:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3482:11	3482:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3482:11	3482:11	10	t2p
LEAF_NODE	3482:14	3482:14	10	->
LEAF_NODE	3482:16	3482:16	10	pdf_ojpegdatalength
LEAF_NODE	3482:35	3482:35	10	++
LEAF_NODE	3482:37	3482:37	8	]
ASSIGN_OP	3482:38	3482:38	6	=
LEAF_NODE	3482:38	3482:38	7	=
RVAL	3482:39	3482:39	6	0xda
FIELD	3482:39	3482:39	7	0xda
LEAF_NODE	3482:39	3482:39	8	0xda
LEAF_NODE	3482:43	3482:43	4	;
EXPR_STATEMENT	3483:1	3483:43	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00 ;
EXPR	3483:1	3483:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00
ASSIGN	3483:1	3483:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x00
LVAL	3483:1	3483:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3483:1	3483:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3483:1	3483:1	8	ojpegdata
LEAF_NODE	3483:10	3483:10	8	[
EXPR	3483:11	3483:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3483:11	3483:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3483:11	3483:11	10	t2p
LEAF_NODE	3483:14	3483:14	10	->
LEAF_NODE	3483:16	3483:16	10	pdf_ojpegdatalength
LEAF_NODE	3483:35	3483:35	10	++
LEAF_NODE	3483:37	3483:37	8	]
ASSIGN_OP	3483:38	3483:38	6	=
LEAF_NODE	3483:38	3483:38	7	=
RVAL	3483:39	3483:39	6	0x00
FIELD	3483:39	3483:39	7	0x00
LEAF_NODE	3483:39	3483:39	8	0x00
LEAF_NODE	3483:43	3483:43	4	;
EXPR_STATEMENT	3484:1	3484:72	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( 6 + 2 * t2p -> tiff_samplesperpixel ) ;
EXPR	3484:1	3484:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( 6 + 2 * t2p -> tiff_samplesperpixel )
ASSIGN	3484:1	3484:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( 6 + 2 * t2p -> tiff_samplesperpixel )
LVAL	3484:1	3484:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3484:1	3484:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3484:1	3484:1	8	ojpegdata
LEAF_NODE	3484:10	3484:10	8	[
EXPR	3484:11	3484:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3484:11	3484:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3484:11	3484:11	10	t2p
LEAF_NODE	3484:14	3484:14	10	->
LEAF_NODE	3484:16	3484:16	10	pdf_ojpegdatalength
LEAF_NODE	3484:35	3484:35	10	++
LEAF_NODE	3484:37	3484:37	8	]
ASSIGN_OP	3484:38	3484:38	6	=
LEAF_NODE	3484:38	3484:38	7	=
RVAL	3484:39	3484:71	6	( 6 + 2 * t2p -> tiff_samplesperpixel )
LEAF_NODE	3484:39	3484:39	7	(
FIELD	3484:40	3484:40	7	6
LEAF_NODE	3484:40	3484:40	8	6
LEAF_NODE	3484:42	3484:42	7	+
FIELD	3484:44	3484:44	7	2
LEAF_NODE	3484:44	3484:44	8	2
LEAF_NODE	3484:45	3484:45	7	*
FIELD	3484:46	3484:51	7	t2p -> tiff_samplesperpixel
LEAF_NODE	3484:46	3484:46	8	t2p
LEAF_NODE	3484:49	3484:49	8	->
LEAF_NODE	3484:51	3484:51	8	tiff_samplesperpixel
LEAF_NODE	3484:71	3484:71	7	)
LEAF_NODE	3484:72	3484:72	4	;
EXPR_STATEMENT	3485:1	3485:71	3	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = t2p -> tiff_samplesperpixel & 0xff ;
EXPR	3485:1	3485:1	4	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = t2p -> tiff_samplesperpixel & 0xff
ASSIGN	3485:1	3485:39	5	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = t2p -> tiff_samplesperpixel & 0xff
LVAL	3485:1	3485:1	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3485:1	3485:37	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3485:1	3485:1	8	ojpegdata
LEAF_NODE	3485:10	3485:10	8	[
EXPR	3485:11	3485:11	8	t2p -> pdf_ojpegdatalength ++
FIELD	3485:11	3485:35	9	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3485:11	3485:11	10	t2p
LEAF_NODE	3485:14	3485:14	10	->
LEAF_NODE	3485:16	3485:16	10	pdf_ojpegdatalength
LEAF_NODE	3485:35	3485:35	10	++
LEAF_NODE	3485:37	3485:37	8	]
ASSIGN_OP	3485:38	3485:38	6	=
LEAF_NODE	3485:38	3485:38	7	=
RVAL	3485:39	3485:67	6	t2p -> tiff_samplesperpixel & 0xff
FIELD	3485:39	3485:44	7	t2p -> tiff_samplesperpixel
LEAF_NODE	3485:39	3485:39	8	t2p
LEAF_NODE	3485:42	3485:42	8	->
LEAF_NODE	3485:44	3485:44	8	tiff_samplesperpixel
LEAF_NODE	3485:65	3485:65	7	&
FIELD	3485:67	3485:67	7	0xff
LEAF_NODE	3485:67	3485:67	8	0xff
LEAF_NODE	3485:71	3485:71	4	;
ITERATION	3486:1	3486:41	3	
KEYWORD	3486:1	3486:1	4	for
LEAF_NODE	3486:1	3486:1	5	for
LEAF_NODE	3486:4	3486:4	4	(
FOR_INIT	3486:5	3486:8	4	i = 0 ;
EXPR	3486:5	3486:5	5	i = 0
ASSIGN	3486:5	3486:7	6	i = 0
LVAL	3486:5	3486:5	7	i
FIELD	3486:5	3486:5	8	i
LEAF_NODE	3486:5	3486:5	9	i
ASSIGN_OP	3486:6	3486:6	7	=
LEAF_NODE	3486:6	3486:6	8	=
RVAL	3486:7	3486:7	7	0
FIELD	3486:7	3486:7	8	0
LEAF_NODE	3486:7	3486:7	9	0
LEAF_NODE	3486:8	3486:8	5	;
CONDITION	3486:9	3486:9	4	i < t2p -> tiff_samplesperpixel
EXPR	3486:9	3486:11	5	i < t2p -> tiff_samplesperpixel
FIELD	3486:9	3486:9	6	i
LEAF_NODE	3486:9	3486:9	7	i
REL_OPERATOR	3486:10	3486:10	6	<
LEAF_NODE	3486:10	3486:10	7	<
FIELD	3486:11	3486:16	6	t2p -> tiff_samplesperpixel
LEAF_NODE	3486:11	3486:11	7	t2p
LEAF_NODE	3486:14	3486:14	7	->
LEAF_NODE	3486:16	3486:16	7	tiff_samplesperpixel
LEAF_NODE	3486:36	3486:36	4	;
FOR_EXPR	3486:37	3486:37	4	i ++
EXPR	3486:37	3486:37	5	i ++
FIELD	3486:37	3486:38	6	i ++
LEAF_NODE	3486:37	3486:37	7	i
LEAF_NODE	3486:38	3486:38	7	++
LEAF_NODE	3486:40	3486:40	4	)
STATEMENTS	3486:41	3496:1	4	
LEAF_NODE	3486:41	3486:41	5	{
STATEMENTS	3487:2	3493:4	5	
EXPR_STATEMENT	3487:2	3487:49	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = i & 0xff ;
EXPR	3487:2	3487:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = i & 0xff
ASSIGN	3487:2	3487:41	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = i & 0xff
LVAL	3487:2	3487:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3487:2	3487:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3487:2	3487:2	11	ojpegdata
LEAF_NODE	3487:11	3487:11	11	[
EXPR	3487:12	3487:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3487:12	3487:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3487:12	3487:12	13	t2p
LEAF_NODE	3487:15	3487:15	13	->
LEAF_NODE	3487:17	3487:17	13	pdf_ojpegdatalength
LEAF_NODE	3487:36	3487:36	13	++
LEAF_NODE	3487:38	3487:38	11	]
ASSIGN_OP	3487:39	3487:39	9	=
LEAF_NODE	3487:39	3487:39	10	=
RVAL	3487:41	3487:45	9	i & 0xff
FIELD	3487:41	3487:41	10	i
LEAF_NODE	3487:41	3487:41	11	i
LEAF_NODE	3487:43	3487:43	10	&
FIELD	3487:45	3487:45	10	0xff
LEAF_NODE	3487:45	3487:45	11	0xff
LEAF_NODE	3487:49	3487:49	7	;
SELECTION	3488:2	3488:29	6	
KEYWORD	3488:2	3488:2	7	if
LEAF_NODE	3488:2	3488:2	8	if
LEAF_NODE	3488:4	3488:4	7	(
CONDITION	3488:5	3488:5	7	proc == JPEGPROC_BASELINE
EXPR	3488:5	3488:11	8	proc == JPEGPROC_BASELINE
FIELD	3488:5	3488:5	9	proc
LEAF_NODE	3488:5	3488:5	10	proc
EQ_OPERATOR	3488:9	3488:9	9	==
LEAF_NODE	3488:9	3488:9	10	==
FIELD	3488:11	3488:11	9	JPEGPROC_BASELINE
LEAF_NODE	3488:11	3488:11	10	JPEGPROC_BASELINE
LEAF_NODE	3488:28	3488:28	7	)
STATEMENTS	3488:29	3493:2	7	
LEAF_NODE	3488:29	3488:29	8	{
STATEMENTS	3489:3	3491:3	8	
EXPR_STATEMENT	3489:3	3490:66	9	ojpegdata [ t2p -> pdf_ojpegdatalength ] |= ( ( ( i > ( table_count - 1U ) ) ? ( table_count - 1U ) : i ) << 4U ) & 0xf0 ;
EXPR	3489:3	3489:3	10	ojpegdata [ t2p -> pdf_ojpegdatalength ] |= ( ( ( i > ( table_count - 1U ) ) ? ( table_count - 1U ) : i ) << 4U ) & 0xf0
ASSIGN	3489:3	3490:4	11	ojpegdata [ t2p -> pdf_ojpegdatalength ] |= ( ( ( i > ( table_count - 1U ) ) ? ( table_count - 1U ) : i ) << 4U ) & 0xf0
LVAL	3489:3	3489:3	12	ojpegdata [ t2p -> pdf_ojpegdatalength ]
FIELD	3489:3	3489:37	13	ojpegdata [ t2p -> pdf_ojpegdatalength ]
LEAF_NODE	3489:3	3489:3	14	ojpegdata
LEAF_NODE	3489:12	3489:12	14	[
EXPR	3489:13	3489:13	14	t2p -> pdf_ojpegdatalength
FIELD	3489:13	3489:18	15	t2p -> pdf_ojpegdatalength
LEAF_NODE	3489:13	3489:13	16	t2p
LEAF_NODE	3489:16	3489:16	16	->
LEAF_NODE	3489:18	3489:18	16	pdf_ojpegdatalength
LEAF_NODE	3489:37	3489:37	14	]
ASSIGN_OP	3489:39	3489:39	12	|=
LEAF_NODE	3489:39	3489:39	13	|=
RVAL	3490:4	3490:62	12	( ( ( i > ( table_count - 1U ) ) ? ( table_count - 1U ) : i ) << 4U ) & 0xf0
LEAF_NODE	3490:4	3490:4	13	(
LEAF_NODE	3490:6	3490:6	13	(
COND_EXPR	3490:8	3490:50	13	( i > ( table_count - 1U ) ) ? ( table_count - 1U ) : i
CONDITION	3490:8	3490:27	14	( i > ( table_count - 1U ) )
LEAF_NODE	3490:8	3490:8	15	(
FIELD	3490:9	3490:9	15	i
LEAF_NODE	3490:9	3490:9	16	i
REL_OPERATOR	3490:10	3490:10	15	>
LEAF_NODE	3490:10	3490:10	16	>
LEAF_NODE	3490:11	3490:11	15	(
FIELD	3490:12	3490:12	15	table_count
LEAF_NODE	3490:12	3490:12	16	table_count
LEAF_NODE	3490:23	3490:23	15	-
FIELD	3490:24	3490:24	15	1U
LEAF_NODE	3490:24	3490:24	16	1U
LEAF_NODE	3490:26	3490:26	15	)
LEAF_NODE	3490:27	3490:27	15	)
LEAF_NODE	3490:29	3490:29	14	?
EXPR	3490:31	3490:46	14	( table_count - 1U )
LEAF_NODE	3490:31	3490:31	15	(
FIELD	3490:32	3490:32	15	table_count
LEAF_NODE	3490:32	3490:32	16	table_count
LEAF_NODE	3490:43	3490:43	15	-
FIELD	3490:44	3490:44	15	1U
LEAF_NODE	3490:44	3490:44	16	1U
LEAF_NODE	3490:46	3490:46	15	)
LEAF_NODE	3490:48	3490:48	14	:
FIELD	3490:50	3490:50	14	i
LEAF_NODE	3490:50	3490:50	15	i
LEAF_NODE	3490:51	3490:51	13	)
LEAF_NODE	3490:53	3490:53	13	<<
FIELD	3490:56	3490:56	13	4U
LEAF_NODE	3490:56	3490:56	14	4U
LEAF_NODE	3490:58	3490:58	13	)
LEAF_NODE	3490:60	3490:60	13	&
FIELD	3490:62	3490:62	13	0xf0
LEAF_NODE	3490:62	3490:62	14	0xf0
LEAF_NODE	3490:66	3490:66	10	;
EXPR_STATEMENT	3491:3	3492:57	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] |= ( ( i > ( table_count - 1U ) ) ? ( table_count - 1U ) : i ) & 0x0f ;
EXPR	3491:3	3491:3	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] |= ( ( i > ( table_count - 1U ) ) ? ( table_count - 1U ) : i ) & 0x0f
ASSIGN	3491:3	3492:4	11	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] |= ( ( i > ( table_count - 1U ) ) ? ( table_count - 1U ) : i ) & 0x0f
LVAL	3491:3	3491:3	12	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3491:3	3491:39	13	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3491:3	3491:3	14	ojpegdata
LEAF_NODE	3491:12	3491:12	14	[
EXPR	3491:13	3491:13	14	t2p -> pdf_ojpegdatalength ++
FIELD	3491:13	3491:37	15	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3491:13	3491:13	16	t2p
LEAF_NODE	3491:16	3491:16	16	->
LEAF_NODE	3491:18	3491:18	16	pdf_ojpegdatalength
LEAF_NODE	3491:37	3491:37	16	++
LEAF_NODE	3491:39	3491:39	14	]
ASSIGN_OP	3491:41	3491:41	12	|=
LEAF_NODE	3491:41	3491:41	13	|=
RVAL	3492:4	3492:53	12	( ( i > ( table_count - 1U ) ) ? ( table_count - 1U ) : i ) & 0x0f
LEAF_NODE	3492:4	3492:4	13	(
COND_EXPR	3492:6	3492:48	13	( i > ( table_count - 1U ) ) ? ( table_count - 1U ) : i
CONDITION	3492:6	3492:25	14	( i > ( table_count - 1U ) )
LEAF_NODE	3492:6	3492:6	15	(
FIELD	3492:7	3492:7	15	i
LEAF_NODE	3492:7	3492:7	16	i
REL_OPERATOR	3492:8	3492:8	15	>
LEAF_NODE	3492:8	3492:8	16	>
LEAF_NODE	3492:9	3492:9	15	(
FIELD	3492:10	3492:10	15	table_count
LEAF_NODE	3492:10	3492:10	16	table_count
LEAF_NODE	3492:21	3492:21	15	-
FIELD	3492:22	3492:22	15	1U
LEAF_NODE	3492:22	3492:22	16	1U
LEAF_NODE	3492:24	3492:24	15	)
LEAF_NODE	3492:25	3492:25	15	)
LEAF_NODE	3492:27	3492:27	14	?
EXPR	3492:29	3492:44	14	( table_count - 1U )
LEAF_NODE	3492:29	3492:29	15	(
FIELD	3492:30	3492:30	15	table_count
LEAF_NODE	3492:30	3492:30	16	table_count
LEAF_NODE	3492:41	3492:41	15	-
FIELD	3492:42	3492:42	15	1U
LEAF_NODE	3492:42	3492:42	16	1U
LEAF_NODE	3492:44	3492:44	15	)
LEAF_NODE	3492:46	3492:46	14	:
FIELD	3492:48	3492:48	14	i
LEAF_NODE	3492:48	3492:48	15	i
LEAF_NODE	3492:49	3492:49	13	)
LEAF_NODE	3492:51	3492:51	13	&
FIELD	3492:53	3492:53	13	0x0f
LEAF_NODE	3492:53	3492:53	14	0x0f
LEAF_NODE	3492:57	3492:57	10	;
LEAF_NODE	3493:2	3493:2	8	}
SELECTION	3493:4	3493:9	6	
KEYWORD	3493:4	3493:4	7	else
LEAF_NODE	3493:4	3493:4	8	else
STATEMENTS	3493:9	3495:2	7	
LEAF_NODE	3493:9	3493:9	8	{
STATEMENTS	3494:3	3494:3	8	
EXPR_STATEMENT	3494:3	3494:59	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( i << 4 ) & 0xf0 ;
EXPR	3494:3	3494:3	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( i << 4 ) & 0xf0
ASSIGN	3494:3	3494:44	11	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( i << 4 ) & 0xf0
LVAL	3494:3	3494:3	12	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3494:3	3494:39	13	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3494:3	3494:3	14	ojpegdata
LEAF_NODE	3494:12	3494:12	14	[
EXPR	3494:13	3494:13	14	t2p -> pdf_ojpegdatalength ++
FIELD	3494:13	3494:37	15	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3494:13	3494:13	16	t2p
LEAF_NODE	3494:16	3494:16	16	->
LEAF_NODE	3494:18	3494:18	16	pdf_ojpegdatalength
LEAF_NODE	3494:37	3494:37	16	++
LEAF_NODE	3494:39	3494:39	14	]
ASSIGN_OP	3494:41	3494:41	12	=
LEAF_NODE	3494:41	3494:41	13	=
RVAL	3494:44	3494:55	12	( i << 4 ) & 0xf0
LEAF_NODE	3494:44	3494:44	13	(
FIELD	3494:45	3494:45	13	i
LEAF_NODE	3494:45	3494:45	14	i
LEAF_NODE	3494:47	3494:47	13	<<
FIELD	3494:50	3494:50	13	4
LEAF_NODE	3494:50	3494:50	14	4
LEAF_NODE	3494:51	3494:51	13	)
LEAF_NODE	3494:53	3494:53	13	&
FIELD	3494:55	3494:55	13	0xf0
LEAF_NODE	3494:55	3494:55	14	0xf0
LEAF_NODE	3494:59	3494:59	10	;
LEAF_NODE	3495:2	3495:2	8	}
LEAF_NODE	3496:1	3496:1	5	}
SELECTION	3497:1	3497:28	3	
KEYWORD	3497:1	3497:1	4	if
LEAF_NODE	3497:1	3497:1	5	if
LEAF_NODE	3497:3	3497:3	4	(
CONDITION	3497:4	3497:4	4	proc == JPEGPROC_BASELINE
EXPR	3497:4	3497:10	5	proc == JPEGPROC_BASELINE
FIELD	3497:4	3497:4	6	proc
LEAF_NODE	3497:4	3497:4	7	proc
EQ_OPERATOR	3497:8	3497:8	6	==
LEAF_NODE	3497:8	3497:8	7	==
FIELD	3497:10	3497:10	6	JPEGPROC_BASELINE
LEAF_NODE	3497:10	3497:10	7	JPEGPROC_BASELINE
LEAF_NODE	3497:27	3497:27	4	)
STATEMENTS	3497:28	3501:1	4	
LEAF_NODE	3497:28	3497:28	5	{
STATEMENTS	3498:2	3500:2	5	
EXPR_STATEMENT	3498:2	3498:28	6	t2p -> pdf_ojpegdatalength ++ ;
EXPR	3498:2	3498:2	7	t2p -> pdf_ojpegdatalength ++
FIELD	3498:2	3498:26	8	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3498:2	3498:2	9	t2p
LEAF_NODE	3498:5	3498:5	9	->
LEAF_NODE	3498:7	3498:7	9	pdf_ojpegdatalength
LEAF_NODE	3498:26	3498:26	9	++
LEAF_NODE	3498:28	3498:28	7	;
EXPR_STATEMENT	3499:2	3499:44	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x3f ;
EXPR	3499:2	3499:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x3f
ASSIGN	3499:2	3499:40	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = 0x3f
LVAL	3499:2	3499:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3499:2	3499:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3499:2	3499:2	11	ojpegdata
LEAF_NODE	3499:11	3499:11	11	[
EXPR	3499:12	3499:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3499:12	3499:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3499:12	3499:12	13	t2p
LEAF_NODE	3499:15	3499:15	13	->
LEAF_NODE	3499:17	3499:17	13	pdf_ojpegdatalength
LEAF_NODE	3499:36	3499:36	13	++
LEAF_NODE	3499:38	3499:38	11	]
ASSIGN_OP	3499:39	3499:39	9	=
LEAF_NODE	3499:39	3499:39	10	=
RVAL	3499:40	3499:40	9	0x3f
FIELD	3499:40	3499:40	10	0x3f
LEAF_NODE	3499:40	3499:40	11	0x3f
LEAF_NODE	3499:44	3499:44	7	;
EXPR_STATEMENT	3500:2	3500:28	6	t2p -> pdf_ojpegdatalength ++ ;
EXPR	3500:2	3500:2	7	t2p -> pdf_ojpegdatalength ++
FIELD	3500:2	3500:26	8	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3500:2	3500:2	9	t2p
LEAF_NODE	3500:5	3500:5	9	->
LEAF_NODE	3500:7	3500:7	9	pdf_ojpegdatalength
LEAF_NODE	3500:26	3500:26	9	++
LEAF_NODE	3500:28	3500:28	7	;
LEAF_NODE	3501:1	3501:1	5	}
SELECTION	3501:3	3501:8	3	
KEYWORD	3501:3	3501:3	4	else
LEAF_NODE	3501:3	3501:3	5	else
STATEMENTS	3501:8	3505:1	4	
LEAF_NODE	3501:8	3501:8	5	{
STATEMENTS	3502:2	3504:2	5	
EXPR_STATEMENT	3502:2	3502:55	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( lp [ 0 ] & 0xff ) ;
EXPR	3502:2	3502:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( lp [ 0 ] & 0xff )
ASSIGN	3502:2	3502:41	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( lp [ 0 ] & 0xff )
LVAL	3502:2	3502:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3502:2	3502:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3502:2	3502:2	11	ojpegdata
LEAF_NODE	3502:11	3502:11	11	[
EXPR	3502:12	3502:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3502:12	3502:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3502:12	3502:12	13	t2p
LEAF_NODE	3502:15	3502:15	13	->
LEAF_NODE	3502:17	3502:17	13	pdf_ojpegdatalength
LEAF_NODE	3502:36	3502:36	13	++
LEAF_NODE	3502:38	3502:38	11	]
ASSIGN_OP	3502:39	3502:39	9	=
LEAF_NODE	3502:39	3502:39	10	=
RVAL	3502:41	3502:54	9	( lp [ 0 ] & 0xff )
LEAF_NODE	3502:41	3502:41	10	(
FIELD	3502:42	3502:46	10	lp [ 0 ]
LEAF_NODE	3502:42	3502:42	11	lp
LEAF_NODE	3502:44	3502:44	11	[
EXPR	3502:45	3502:45	11	0
FIELD	3502:45	3502:45	12	0
LEAF_NODE	3502:45	3502:45	13	0
LEAF_NODE	3502:46	3502:46	11	]
LEAF_NODE	3502:48	3502:48	10	&
FIELD	3502:50	3502:50	10	0xff
LEAF_NODE	3502:50	3502:50	11	0xff
LEAF_NODE	3502:54	3502:54	10	)
LEAF_NODE	3502:55	3502:55	7	;
EXPR_STATEMENT	3503:2	3503:28	6	t2p -> pdf_ojpegdatalength ++ ;
EXPR	3503:2	3503:2	7	t2p -> pdf_ojpegdatalength ++
FIELD	3503:2	3503:26	8	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3503:2	3503:2	9	t2p
LEAF_NODE	3503:5	3503:5	9	->
LEAF_NODE	3503:7	3503:7	9	pdf_ojpegdatalength
LEAF_NODE	3503:26	3503:26	9	++
LEAF_NODE	3503:28	3503:28	7	;
EXPR_STATEMENT	3504:2	3504:55	6	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( pt [ 0 ] & 0x0f ) ;
EXPR	3504:2	3504:2	7	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( pt [ 0 ] & 0x0f )
ASSIGN	3504:2	3504:41	8	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ] = ( pt [ 0 ] & 0x0f )
LVAL	3504:2	3504:2	9	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
FIELD	3504:2	3504:38	10	ojpegdata [ t2p -> pdf_ojpegdatalength ++ ]
LEAF_NODE	3504:2	3504:2	11	ojpegdata
LEAF_NODE	3504:11	3504:11	11	[
EXPR	3504:12	3504:12	11	t2p -> pdf_ojpegdatalength ++
FIELD	3504:12	3504:36	12	t2p -> pdf_ojpegdatalength ++
LEAF_NODE	3504:12	3504:12	13	t2p
LEAF_NODE	3504:15	3504:15	13	->
LEAF_NODE	3504:17	3504:17	13	pdf_ojpegdatalength
LEAF_NODE	3504:36	3504:36	13	++
LEAF_NODE	3504:38	3504:38	11	]
ASSIGN_OP	3504:39	3504:39	9	=
LEAF_NODE	3504:39	3504:39	10	=
RVAL	3504:41	3504:54	9	( pt [ 0 ] & 0x0f )
LEAF_NODE	3504:41	3504:41	10	(
FIELD	3504:42	3504:46	10	pt [ 0 ]
LEAF_NODE	3504:42	3504:42	11	pt
LEAF_NODE	3504:44	3504:44	11	[
EXPR	3504:45	3504:45	11	0
FIELD	3504:45	3504:45	12	0
LEAF_NODE	3504:45	3504:45	13	0
LEAF_NODE	3504:46	3504:46	11	]
LEAF_NODE	3504:48	3504:48	10	&
FIELD	3504:50	3504:50	10	0x0f
LEAF_NODE	3504:50	3504:50	11	0x0f
LEAF_NODE	3504:54	3504:54	10	)
LEAF_NODE	3504:55	3504:55	7	;
LEAF_NODE	3505:1	3505:1	5	}
JUMP_STATEMENT	3507:1	3507:10	3	return ( 1 ) ;
KEYWORD	3507:1	3507:1	4	return
LEAF_NODE	3507:1	3507:1	5	return
DESTINATION	3507:7	3507:7	4	( 1 )
EXPR	3507:7	3507:9	5	( 1 )
LEAF_NODE	3507:7	3507:7	6	(
FIELD	3507:8	3507:8	6	1
LEAF_NODE	3507:8	3507:8	7	1
LEAF_NODE	3507:9	3507:9	6	)
LEAF_NODE	3507:10	3507:10	4	;
LEAF_NODE	3508:0	3508:0	2	}
FUNCTION_DEF	3512:0	3639:0	1	
RETURN_TYPE	3512:0	3512:0	2	int
TYPE_NAME	3512:0	3512:0	3	int
LEAF_NODE	3512:0	3512:0	4	int
FUNCTION_NAME	3512:4	3512:4	2	t2p_process_jpeg_strip
LEAF_NODE	3512:4	3512:4	3	t2p_process_jpeg_strip
PARAMETER_LIST	3512:26	3519:14	2	( unsigned char * strip , tsize_t * striplength , unsigned char * buffer , tsize_t buffersize , tsize_t * bufferoffset , tstrip_t no , uint32 height )
LEAF_NODE	3512:26	3512:26	3	(
PARAMETER_DECL	3513:1	3513:16	3	unsigned char * strip
TYPE	3513:1	3513:14	4	unsigned char *
TYPE_NAME	3513:1	3513:10	5	unsigned char
LEAF_NODE	3513:1	3513:1	6	unsigned
LEAF_NODE	3513:10	3513:10	6	char
POINTER	3513:14	3513:14	5	*
LEAF_NODE	3513:14	3513:14	6	*
NAME	3513:16	3513:16	4	strip
LEAF_NODE	3513:16	3513:16	5	strip
LEAF_NODE	3513:21	3513:21	3	,
PARAMETER_DECL	3514:1	3514:10	3	tsize_t * striplength
TYPE	3514:1	3514:8	4	tsize_t *
TYPE_NAME	3514:1	3514:1	5	tsize_t
LEAF_NODE	3514:1	3514:1	6	tsize_t
POINTER	3514:8	3514:8	5	*
LEAF_NODE	3514:8	3514:8	6	*
NAME	3514:10	3514:10	4	striplength
LEAF_NODE	3514:10	3514:10	5	striplength
LEAF_NODE	3514:21	3514:21	3	,
PARAMETER_DECL	3515:1	3515:16	3	unsigned char * buffer
TYPE	3515:1	3515:14	4	unsigned char *
TYPE_NAME	3515:1	3515:10	5	unsigned char
LEAF_NODE	3515:1	3515:1	6	unsigned
LEAF_NODE	3515:10	3515:10	6	char
POINTER	3515:14	3515:14	5	*
LEAF_NODE	3515:14	3515:14	6	*
NAME	3515:16	3515:16	4	buffer
LEAF_NODE	3515:16	3515:16	5	buffer
LEAF_NODE	3515:22	3515:22	3	,
PARAMETER_DECL	3516:4	3516:12	3	tsize_t buffersize
TYPE	3516:4	3516:4	4	tsize_t
TYPE_NAME	3516:4	3516:4	5	tsize_t
LEAF_NODE	3516:4	3516:4	6	tsize_t
NAME	3516:12	3516:12	4	buffersize
LEAF_NODE	3516:12	3516:12	5	buffersize
LEAF_NODE	3516:22	3516:22	3	,
PARAMETER_DECL	3517:1	3517:10	3	tsize_t * bufferoffset
TYPE	3517:1	3517:8	4	tsize_t *
TYPE_NAME	3517:1	3517:1	5	tsize_t
LEAF_NODE	3517:1	3517:1	6	tsize_t
POINTER	3517:8	3517:8	5	*
LEAF_NODE	3517:8	3517:8	6	*
NAME	3517:10	3517:10	4	bufferoffset
LEAF_NODE	3517:10	3517:10	5	bufferoffset
LEAF_NODE	3517:22	3517:22	3	,
PARAMETER_DECL	3518:1	3518:10	3	tstrip_t no
TYPE	3518:1	3518:1	4	tstrip_t
TYPE_NAME	3518:1	3518:1	5	tstrip_t
LEAF_NODE	3518:1	3518:1	6	tstrip_t
NAME	3518:10	3518:10	4	no
LEAF_NODE	3518:10	3518:10	5	no
LEAF_NODE	3518:12	3518:12	3	,
PARAMETER_DECL	3519:1	3519:8	3	uint32 height
TYPE	3519:1	3519:1	4	uint32
TYPE_NAME	3519:1	3519:1	5	uint32
LEAF_NODE	3519:1	3519:1	6	uint32
NAME	3519:8	3519:8	4	height
LEAF_NODE	3519:8	3519:8	5	height
LEAF_NODE	3519:14	3519:14	3	)
LEAF_NODE	3519:15	3519:15	2	{
STATEMENTS	3521:1	3638:1	2	
SIMPLE_DECL	3521:1	3521:12	3	tsize_t i ; i = 0 ;
VAR_DECL	3521:1	3521:9	4	tsize_t i ; i = 0
TYPE	3521:1	3521:1	5	tsize_t
TYPE_NAME	3521:1	3521:1	6	tsize_t
LEAF_NODE	3521:1	3521:1	7	tsize_t
NAME	3521:9	3521:9	5	i
LEAF_NODE	3521:9	3521:9	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	3521:9	3521:9	5	i = 0
ASSIGN	3521:9	3521:11	6	i = 0
LVAL	3521:9	3521:9	7	i
NAME	3521:9	3521:9	8	i
LEAF_NODE	3521:9	3521:9	9	i
ASSIGN_OP	3521:10	3521:10	7	=
LEAF_NODE	3521:10	3521:10	8	=
RVAL	3521:11	3521:11	7	0
FIELD	3521:11	3521:11	8	0
LEAF_NODE	3521:11	3521:11	9	0
LEAF_NODE	3521:12	3521:12	4	;
ITERATION	3523:1	3523:26	3	
KEYWORD	3523:1	3523:1	4	while
LEAF_NODE	3523:1	3523:1	5	while
LEAF_NODE	3523:7	3523:7	4	(
CONDITION	3523:8	3523:8	4	i < * striplength
EXPR	3523:8	3523:12	5	i < * striplength
FIELD	3523:8	3523:8	6	i
LEAF_NODE	3523:8	3523:8	7	i
REL_OPERATOR	3523:10	3523:10	6	<
LEAF_NODE	3523:10	3523:10	7	<
UNARY_EXPR	3523:12	3523:13	6	* striplength
UNARY_OPERATOR	3523:12	3523:12	7	*
LEAF_NODE	3523:12	3523:12	8	*
FIELD	3523:13	3523:13	7	striplength
LEAF_NODE	3523:13	3523:13	8	striplength
LEAF_NODE	3523:24	3523:24	4	)
STATEMENTS	3523:26	3635:1	4	
LEAF_NODE	3523:26	3523:26	5	{
STATEMENTS	3524:2	3634:2	5	
SIMPLE_DECL	3524:2	3524:17	6	tsize_t datalen ;
VAR_DECL	3524:2	3524:10	7	tsize_t datalen
TYPE	3524:2	3524:2	8	tsize_t
TYPE_NAME	3524:2	3524:2	9	tsize_t
LEAF_NODE	3524:2	3524:2	10	tsize_t
NAME	3524:10	3524:10	8	datalen
LEAF_NODE	3524:10	3524:10	9	datalen
LEAF_NODE	3524:17	3524:17	7	;
SIMPLE_DECL	3525:2	3525:11	6	uint16 ri ;
VAR_DECL	3525:2	3525:9	7	uint16 ri
TYPE	3525:2	3525:2	8	uint16
TYPE_NAME	3525:2	3525:2	9	uint16
LEAF_NODE	3525:2	3525:2	10	uint16
NAME	3525:9	3525:9	8	ri
LEAF_NODE	3525:9	3525:9	9	ri
LEAF_NODE	3525:11	3525:11	7	;
SIMPLE_DECL	3526:2	3526:15	6	uint16 v_samp ;
VAR_DECL	3526:2	3526:9	7	uint16 v_samp
TYPE	3526:2	3526:2	8	uint16
TYPE_NAME	3526:2	3526:2	9	uint16
LEAF_NODE	3526:2	3526:2	10	uint16
NAME	3526:9	3526:9	8	v_samp
LEAF_NODE	3526:9	3526:9	9	v_samp
LEAF_NODE	3526:15	3526:15	7	;
SIMPLE_DECL	3527:2	3527:15	6	uint16 h_samp ;
VAR_DECL	3527:2	3527:9	7	uint16 h_samp
TYPE	3527:2	3527:2	8	uint16
TYPE_NAME	3527:2	3527:2	9	uint16
LEAF_NODE	3527:2	3527:2	10	uint16
NAME	3527:9	3527:9	8	h_samp
LEAF_NODE	3527:9	3527:9	9	h_samp
LEAF_NODE	3527:15	3527:15	7	;
SIMPLE_DECL	3528:2	3528:7	6	int j ;
VAR_DECL	3528:2	3528:6	7	int j
TYPE	3528:2	3528:2	8	int
TYPE_NAME	3528:2	3528:2	9	int
LEAF_NODE	3528:2	3528:2	10	int
NAME	3528:6	3528:6	8	j
LEAF_NODE	3528:6	3528:6	9	j
LEAF_NODE	3528:7	3528:7	7	;
SIMPLE_DECL	3529:2	3529:11	6	int ncomp ;
VAR_DECL	3529:2	3529:6	7	int ncomp
TYPE	3529:2	3529:2	8	int
TYPE_NAME	3529:2	3529:2	9	int
LEAF_NODE	3529:2	3529:2	10	int
NAME	3529:6	3529:6	8	ncomp
LEAF_NODE	3529:6	3529:6	9	ncomp
LEAF_NODE	3529:11	3529:11	7	;
SELECTION	3532:2	3533:3	6	
KEYWORD	3532:2	3532:2	7	if
LEAF_NODE	3532:2	3532:2	8	if
LEAF_NODE	3532:5	3532:5	7	(
CONDITION	3532:6	3532:6	7	strip [ i ] != 0xff
EXPR	3532:6	3532:18	8	strip [ i ] != 0xff
FIELD	3532:6	3532:13	9	strip [ i ]
LEAF_NODE	3532:6	3532:6	10	strip
LEAF_NODE	3532:11	3532:11	10	[
EXPR	3532:12	3532:12	10	i
FIELD	3532:12	3532:12	11	i
LEAF_NODE	3532:12	3532:12	12	i
LEAF_NODE	3532:13	3532:13	10	]
EQ_OPERATOR	3532:15	3532:15	9	!=
LEAF_NODE	3532:15	3532:15	10	!=
FIELD	3532:18	3532:18	9	0xff
LEAF_NODE	3532:18	3532:18	10	0xff
LEAF_NODE	3532:22	3532:22	7	)
STATEMENTS	3533:3	3533:3	7	
JUMP_STATEMENT	3533:3	3533:12	8	return ( 0 ) ;
KEYWORD	3533:3	3533:3	9	return
LEAF_NODE	3533:3	3533:3	10	return
DESTINATION	3533:9	3533:9	9	( 0 )
EXPR	3533:9	3533:11	10	( 0 )
LEAF_NODE	3533:9	3533:9	11	(
FIELD	3533:10	3533:10	11	0
LEAF_NODE	3533:10	3533:10	12	0
LEAF_NODE	3533:11	3533:11	11	)
LEAF_NODE	3533:12	3533:12	9	;
EXPR_STATEMENT	3534:2	3534:5	6	i ++ ;
EXPR	3534:2	3534:2	7	i ++
FIELD	3534:2	3534:3	8	i ++
LEAF_NODE	3534:2	3534:2	9	i
LEAF_NODE	3534:3	3534:3	9	++
LEAF_NODE	3534:5	3534:5	7	;
ITERATION	3535:2	3536:3	6	
KEYWORD	3535:2	3535:2	7	while
LEAF_NODE	3535:2	3535:2	8	while
LEAF_NODE	3535:8	3535:8	7	(
CONDITION	3535:9	3535:9	7	i < * striplength && strip [ i ] == 0xff
EXPR	3535:9	3535:9	8	i < * striplength && strip [ i ] == 0xff
AND	3535:9	3535:29	9	i < * striplength && strip [ i ] == 0xff
EXPR	3535:9	3535:13	10	i < * striplength
FIELD	3535:9	3535:9	11	i
LEAF_NODE	3535:9	3535:9	12	i
REL_OPERATOR	3535:11	3535:11	11	<
LEAF_NODE	3535:11	3535:11	12	<
UNARY_EXPR	3535:13	3535:14	11	* striplength
UNARY_OPERATOR	3535:13	3535:13	12	*
LEAF_NODE	3535:13	3535:13	13	*
FIELD	3535:14	3535:14	12	striplength
LEAF_NODE	3535:14	3535:14	13	striplength
LEAF_NODE	3535:26	3535:26	10	&&
EXPR	3535:29	3535:41	10	strip [ i ] == 0xff
FIELD	3535:29	3535:36	11	strip [ i ]
LEAF_NODE	3535:29	3535:29	12	strip
LEAF_NODE	3535:34	3535:34	12	[
EXPR	3535:35	3535:35	12	i
FIELD	3535:35	3535:35	13	i
LEAF_NODE	3535:35	3535:35	14	i
LEAF_NODE	3535:36	3535:36	12	]
EQ_OPERATOR	3535:38	3535:38	11	==
LEAF_NODE	3535:38	3535:38	12	==
FIELD	3535:41	3535:41	11	0xff
LEAF_NODE	3535:41	3535:41	12	0xff
LEAF_NODE	3535:45	3535:45	7	)
STATEMENTS	3536:3	3536:3	7	
EXPR_STATEMENT	3536:3	3536:6	8	i ++ ;
EXPR	3536:3	3536:3	9	i ++
FIELD	3536:3	3536:4	10	i ++
LEAF_NODE	3536:3	3536:3	11	i
LEAF_NODE	3536:4	3536:4	11	++
LEAF_NODE	3536:6	3536:6	9	;
SELECTION	3537:2	3538:3	6	
KEYWORD	3537:2	3537:2	7	if
LEAF_NODE	3537:2	3537:2	8	if
LEAF_NODE	3537:5	3537:5	7	(
CONDITION	3537:6	3537:6	7	i >= * striplength
EXPR	3537:6	3537:11	8	i >= * striplength
FIELD	3537:6	3537:6	9	i
LEAF_NODE	3537:6	3537:6	10	i
REL_OPERATOR	3537:8	3537:8	9	>=
LEAF_NODE	3537:8	3537:8	10	>=
UNARY_EXPR	3537:11	3537:12	9	* striplength
UNARY_OPERATOR	3537:11	3537:11	10	*
LEAF_NODE	3537:11	3537:11	11	*
FIELD	3537:12	3537:12	10	striplength
LEAF_NODE	3537:12	3537:12	11	striplength
LEAF_NODE	3537:23	3537:23	7	)
STATEMENTS	3538:3	3538:3	7	
JUMP_STATEMENT	3538:3	3538:12	8	return ( 0 ) ;
KEYWORD	3538:3	3538:3	9	return
LEAF_NODE	3538:3	3538:3	10	return
DESTINATION	3538:9	3538:9	9	( 0 )
EXPR	3538:9	3538:11	10	( 0 )
LEAF_NODE	3538:9	3538:9	11	(
FIELD	3538:10	3538:10	11	0
LEAF_NODE	3538:10	3538:10	12	0
LEAF_NODE	3538:11	3538:11	11	)
LEAF_NODE	3538:12	3538:12	9	;
SELECTION	3540:2	3541:3	6	
KEYWORD	3540:2	3540:2	7	if
LEAF_NODE	3540:2	3540:2	8	if
LEAF_NODE	3540:5	3540:5	7	(
CONDITION	3540:6	3540:6	7	strip [ i ] == 0xd8
EXPR	3540:6	3540:18	8	strip [ i ] == 0xd8
FIELD	3540:6	3540:13	9	strip [ i ]
LEAF_NODE	3540:6	3540:6	10	strip
LEAF_NODE	3540:11	3540:11	10	[
EXPR	3540:12	3540:12	10	i
FIELD	3540:12	3540:12	11	i
LEAF_NODE	3540:12	3540:12	12	i
LEAF_NODE	3540:13	3540:13	10	]
EQ_OPERATOR	3540:15	3540:15	9	==
LEAF_NODE	3540:15	3540:15	10	==
FIELD	3540:18	3540:18	9	0xd8
LEAF_NODE	3540:18	3540:18	10	0xd8
LEAF_NODE	3540:22	3540:22	7	)
STATEMENTS	3541:3	3541:3	7	
EXPR_STATEMENT	3541:3	3541:14	8	datalen = 0 ;
EXPR	3541:3	3541:3	9	datalen = 0
ASSIGN	3541:3	3541:13	10	datalen = 0
LVAL	3541:3	3541:3	11	datalen
FIELD	3541:3	3541:3	12	datalen
LEAF_NODE	3541:3	3541:3	13	datalen
ASSIGN_OP	3541:11	3541:11	11	=
LEAF_NODE	3541:11	3541:11	12	=
RVAL	3541:13	3541:13	11	0
FIELD	3541:13	3541:13	12	0
LEAF_NODE	3541:13	3541:13	13	0
LEAF_NODE	3541:14	3541:14	9	;
SELECTION	3542:2	3542:7	6	
KEYWORD	3542:2	3542:2	7	else
LEAF_NODE	3542:2	3542:2	8	else
STATEMENTS	3542:7	3548:2	7	
LEAF_NODE	3542:7	3542:7	8	{
STATEMENTS	3543:3	3546:3	8	
SELECTION	3543:3	3544:4	9	
KEYWORD	3543:3	3543:3	10	if
LEAF_NODE	3543:3	3543:3	11	if
LEAF_NODE	3543:6	3543:6	10	(
CONDITION	3543:7	3543:7	10	( * striplength - i ) <= 2
EXPR	3543:7	3543:29	11	( * striplength - i ) <= 2
LEAF_NODE	3543:7	3543:7	12	(
UNARY_EXPR	3543:8	3543:9	12	* striplength
UNARY_OPERATOR	3543:8	3543:8	13	*
LEAF_NODE	3543:8	3543:8	14	*
FIELD	3543:9	3543:9	13	striplength
LEAF_NODE	3543:9	3543:9	14	striplength
LEAF_NODE	3543:21	3543:21	12	-
FIELD	3543:23	3543:23	12	i
LEAF_NODE	3543:23	3543:23	13	i
LEAF_NODE	3543:24	3543:24	12	)
REL_OPERATOR	3543:26	3543:26	12	<=
LEAF_NODE	3543:26	3543:26	13	<=
FIELD	3543:29	3543:29	12	2
LEAF_NODE	3543:29	3543:29	13	2
LEAF_NODE	3543:30	3543:30	10	)
STATEMENTS	3544:4	3544:4	10	
JUMP_STATEMENT	3544:4	3544:13	11	return ( 0 ) ;
KEYWORD	3544:4	3544:4	12	return
LEAF_NODE	3544:4	3544:4	13	return
DESTINATION	3544:10	3544:10	12	( 0 )
EXPR	3544:10	3544:12	13	( 0 )
LEAF_NODE	3544:10	3544:10	14	(
FIELD	3544:11	3544:11	14	0
LEAF_NODE	3544:11	3544:11	15	0
LEAF_NODE	3544:12	3544:12	14	)
LEAF_NODE	3544:13	3544:13	12	;
EXPR_STATEMENT	3545:3	3545:43	9	datalen = ( strip [ i + 1 ] << 8 ) | strip [ i + 2 ] ;
EXPR	3545:3	3545:3	10	datalen = ( strip [ i + 1 ] << 8 ) | strip [ i + 2 ]
ASSIGN	3545:3	3545:13	11	datalen = ( strip [ i + 1 ] << 8 ) | strip [ i + 2 ]
LVAL	3545:3	3545:3	12	datalen
FIELD	3545:3	3545:3	13	datalen
LEAF_NODE	3545:3	3545:3	14	datalen
ASSIGN_OP	3545:11	3545:11	12	=
LEAF_NODE	3545:11	3545:11	13	=
RVAL	3545:13	3545:13	12	( strip [ i + 1 ] << 8 ) | strip [ i + 2 ]
BIT_OR	3545:13	3545:33	13	( strip [ i + 1 ] << 8 ) | strip [ i + 2 ]
BIT_OR_ELEM	3545:13	3545:29	14	( strip [ i + 1 ] << 8 )
LEAF_NODE	3545:13	3545:13	15	(
FIELD	3545:14	3545:23	15	strip [ i + 1 ]
LEAF_NODE	3545:14	3545:14	16	strip
LEAF_NODE	3545:19	3545:19	16	[
EXPR	3545:20	3545:22	16	i + 1
FIELD	3545:20	3545:20	17	i
LEAF_NODE	3545:20	3545:20	18	i
LEAF_NODE	3545:21	3545:21	17	+
FIELD	3545:22	3545:22	17	1
LEAF_NODE	3545:22	3545:22	18	1
LEAF_NODE	3545:23	3545:23	16	]
LEAF_NODE	3545:25	3545:25	15	<<
FIELD	3545:28	3545:28	15	8
LEAF_NODE	3545:28	3545:28	16	8
LEAF_NODE	3545:29	3545:29	15	)
LEAF_NODE	3545:31	3545:31	14	|
BIT_OR_ELEM	3545:33	3545:33	14	strip [ i + 2 ]
FIELD	3545:33	3545:42	15	strip [ i + 2 ]
LEAF_NODE	3545:33	3545:33	16	strip
LEAF_NODE	3545:38	3545:38	16	[
EXPR	3545:39	3545:41	16	i + 2
FIELD	3545:39	3545:39	17	i
LEAF_NODE	3545:39	3545:39	18	i
LEAF_NODE	3545:40	3545:40	17	+
FIELD	3545:41	3545:41	17	2
LEAF_NODE	3545:41	3545:41	18	2
LEAF_NODE	3545:42	3545:42	16	]
LEAF_NODE	3545:43	3545:43	10	;
SELECTION	3546:3	3547:4	9	
KEYWORD	3546:3	3546:3	10	if
LEAF_NODE	3546:3	3546:3	11	if
LEAF_NODE	3546:6	3546:6	10	(
CONDITION	3546:7	3546:7	10	datalen < 2 || datalen >= ( * striplength - i )
EXPR	3546:7	3546:7	11	datalen < 2 || datalen >= ( * striplength - i )
OR	3546:7	3546:22	12	datalen < 2 || datalen >= ( * striplength - i )
EXPR	3546:7	3546:17	13	datalen < 2
FIELD	3546:7	3546:7	14	datalen
LEAF_NODE	3546:7	3546:7	15	datalen
REL_OPERATOR	3546:15	3546:15	14	<
LEAF_NODE	3546:15	3546:15	15	<
FIELD	3546:17	3546:17	14	2
LEAF_NODE	3546:17	3546:17	15	2
LEAF_NODE	3546:19	3546:19	13	||
EXPR	3546:22	3546:50	13	datalen >= ( * striplength - i )
FIELD	3546:22	3546:22	14	datalen
LEAF_NODE	3546:22	3546:22	15	datalen
REL_OPERATOR	3546:30	3546:30	14	>=
LEAF_NODE	3546:30	3546:30	15	>=
LEAF_NODE	3546:33	3546:33	14	(
UNARY_EXPR	3546:34	3546:35	14	* striplength
UNARY_OPERATOR	3546:34	3546:34	15	*
LEAF_NODE	3546:34	3546:34	16	*
FIELD	3546:35	3546:35	15	striplength
LEAF_NODE	3546:35	3546:35	16	striplength
LEAF_NODE	3546:47	3546:47	14	-
FIELD	3546:49	3546:49	14	i
LEAF_NODE	3546:49	3546:49	15	i
LEAF_NODE	3546:50	3546:50	14	)
LEAF_NODE	3546:51	3546:51	10	)
STATEMENTS	3547:4	3547:4	10	
JUMP_STATEMENT	3547:4	3547:13	11	return ( 0 ) ;
KEYWORD	3547:4	3547:4	12	return
LEAF_NODE	3547:4	3547:4	13	return
DESTINATION	3547:10	3547:10	12	( 0 )
EXPR	3547:10	3547:12	13	( 0 )
LEAF_NODE	3547:10	3547:10	14	(
FIELD	3547:11	3547:11	14	0
LEAF_NODE	3547:11	3547:11	15	0
LEAF_NODE	3547:12	3547:12	14	)
LEAF_NODE	3547:13	3547:13	12	;
LEAF_NODE	3548:2	3548:2	8	}
SELECTION	3549:2	3549:20	6	
KEYWORD	3549:2	3549:2	7	switch
LEAF_NODE	3549:2	3549:2	8	switch
LEAF_NODE	3549:8	3549:8	7	(
CONDITION	3549:10	3549:10	7	strip [ i ]
EXPR	3549:10	3549:10	8	strip [ i ]
FIELD	3549:10	3549:17	9	strip [ i ]
LEAF_NODE	3549:10	3549:10	10	strip
LEAF_NODE	3549:15	3549:15	10	[
EXPR	3549:16	3549:16	10	i
FIELD	3549:16	3549:16	11	i
LEAF_NODE	3549:16	3549:16	12	i
LEAF_NODE	3549:17	3549:17	10	]
LEAF_NODE	3549:19	3549:19	7	)
STATEMENTS	3549:20	3633:2	7	
LEAF_NODE	3549:20	3549:20	8	{
STATEMENTS	3550:3	3632:4	8	
LABEL	3550:3	3550:12	9	case 0xd8 :
LEAF_NODE	3550:3	3550:3	10	case
LEAF_NODE	3550:8	3550:8	10	0xd8
LEAF_NODE	3550:12	3550:12	10	:
SELECTION	3551:16	3552:20	9	
KEYWORD	3551:16	3551:16	10	if
LEAF_NODE	3551:16	3551:16	11	if
LEAF_NODE	3551:18	3551:18	10	(
CONDITION	3551:20	3551:20	10	* bufferoffset + 2 > buffersize
EXPR	3551:20	3551:40	11	* bufferoffset + 2 > buffersize
UNARY_EXPR	3551:20	3551:21	12	* bufferoffset
UNARY_OPERATOR	3551:20	3551:20	13	*
LEAF_NODE	3551:20	3551:20	14	*
FIELD	3551:21	3551:21	13	bufferoffset
LEAF_NODE	3551:21	3551:21	14	bufferoffset
LEAF_NODE	3551:34	3551:34	12	+
FIELD	3551:36	3551:36	12	2
LEAF_NODE	3551:36	3551:36	13	2
REL_OPERATOR	3551:38	3551:38	12	>
LEAF_NODE	3551:38	3551:38	13	>
FIELD	3551:40	3551:40	12	buffersize
LEAF_NODE	3551:40	3551:40	13	buffersize
LEAF_NODE	3551:51	3551:51	10	)
STATEMENTS	3552:20	3552:20	10	
JUMP_STATEMENT	3552:20	3552:29	11	return ( 0 ) ;
KEYWORD	3552:20	3552:20	12	return
LEAF_NODE	3552:20	3552:20	13	return
DESTINATION	3552:26	3552:26	12	( 0 )
EXPR	3552:26	3552:28	13	( 0 )
LEAF_NODE	3552:26	3552:26	14	(
FIELD	3552:27	3552:27	14	0
LEAF_NODE	3552:27	3552:27	15	0
LEAF_NODE	3552:28	3552:28	14	)
LEAF_NODE	3552:29	3552:29	12	;
EXPR_STATEMENT	3553:4	3553:59	9	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , 2 ) ;
EXPR	3553:4	3553:4	10	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , 2 )
FUNCTION_CALL	3553:4	3553:58	11	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , 2 )
CALLEE	3553:4	3553:4	12	_TIFFmemcpy
LEAF_NODE	3553:4	3553:4	13	_TIFFmemcpy
LEAF_NODE	3553:15	3553:15	12	(
ARGUMENT	3553:16	3553:16	12	& ( buffer [ * bufferoffset ] )
UNARY_EXPR	3553:16	3553:39	13	& ( buffer [ * bufferoffset ] )
UNARY_OPERATOR	3553:16	3553:16	14	&
LEAF_NODE	3553:16	3553:16	15	&
LEAF_NODE	3553:17	3553:17	14	(
FIELD	3553:18	3553:38	14	buffer [ * bufferoffset ]
LEAF_NODE	3553:18	3553:18	15	buffer
LEAF_NODE	3553:24	3553:24	15	[
EXPR	3553:25	3553:25	15	* bufferoffset
UNARY_EXPR	3553:25	3553:26	16	* bufferoffset
UNARY_OPERATOR	3553:25	3553:25	17	*
LEAF_NODE	3553:25	3553:25	18	*
FIELD	3553:26	3553:26	17	bufferoffset
LEAF_NODE	3553:26	3553:26	18	bufferoffset
LEAF_NODE	3553:38	3553:38	15	]
LEAF_NODE	3553:39	3553:39	14	)
LEAF_NODE	3553:40	3553:40	12	,
ARGUMENT	3553:42	3553:42	12	& ( strip [ i - 1 ] )
UNARY_EXPR	3553:42	3553:54	13	& ( strip [ i - 1 ] )
UNARY_OPERATOR	3553:42	3553:42	14	&
LEAF_NODE	3553:42	3553:42	15	&
LEAF_NODE	3553:43	3553:43	14	(
FIELD	3553:44	3553:53	14	strip [ i - 1 ]
LEAF_NODE	3553:44	3553:44	15	strip
LEAF_NODE	3553:49	3553:49	15	[
EXPR	3553:50	3553:52	15	i - 1
FIELD	3553:50	3553:50	16	i
LEAF_NODE	3553:50	3553:50	17	i
LEAF_NODE	3553:51	3553:51	16	-
FIELD	3553:52	3553:52	16	1
LEAF_NODE	3553:52	3553:52	17	1
LEAF_NODE	3553:53	3553:53	15	]
LEAF_NODE	3553:54	3553:54	14	)
LEAF_NODE	3553:55	3553:55	12	,
ARGUMENT	3553:57	3553:57	12	2
FIELD	3553:57	3553:57	13	2
LEAF_NODE	3553:57	3553:57	14	2
LEAF_NODE	3553:58	3553:58	12	)
LEAF_NODE	3553:59	3553:59	10	;
EXPR_STATEMENT	3554:4	3554:20	9	* bufferoffset += 2 ;
EXPR	3554:4	3554:4	10	* bufferoffset += 2
ASSIGN	3554:4	3554:19	11	* bufferoffset += 2
LVAL	3554:4	3554:4	12	* bufferoffset
UNARY_EXPR	3554:4	3554:5	13	* bufferoffset
UNARY_OPERATOR	3554:4	3554:4	14	*
LEAF_NODE	3554:4	3554:4	15	*
FIELD	3554:5	3554:5	14	bufferoffset
LEAF_NODE	3554:5	3554:5	15	bufferoffset
ASSIGN_OP	3554:17	3554:17	12	+=
LEAF_NODE	3554:17	3554:17	13	+=
RVAL	3554:19	3554:19	12	2
FIELD	3554:19	3554:19	13	2
LEAF_NODE	3554:19	3554:19	14	2
LEAF_NODE	3554:20	3554:20	10	;
JUMP_STATEMENT	3555:4	3555:9	9	break DESTINATION ;
KEYWORD	3555:4	3555:4	10	break
LEAF_NODE	3555:4	3555:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3555:9	3555:9	10	;
LABEL	3556:3	3556:12	9	case 0xc0 :
LEAF_NODE	3556:3	3556:3	10	case
LEAF_NODE	3556:8	3556:8	10	0xc0
LEAF_NODE	3556:12	3556:12	10	:
LABEL	3557:3	3557:12	9	case 0xc1 :
LEAF_NODE	3557:3	3557:3	10	case
LEAF_NODE	3557:8	3557:8	10	0xc1
LEAF_NODE	3557:12	3557:12	10	:
LABEL	3558:3	3558:12	9	case 0xc3 :
LEAF_NODE	3558:3	3558:3	10	case
LEAF_NODE	3558:8	3558:8	10	0xc3
LEAF_NODE	3558:12	3558:12	10	:
LABEL	3559:3	3559:12	9	case 0xc9 :
LEAF_NODE	3559:3	3559:3	10	case
LEAF_NODE	3559:8	3559:8	10	0xc9
LEAF_NODE	3559:12	3559:12	10	:
LABEL	3560:3	3560:12	9	case 0xca :
LEAF_NODE	3560:3	3560:3	10	case
LEAF_NODE	3560:8	3560:8	10	0xca
LEAF_NODE	3560:12	3560:12	10	:
SELECTION	3561:4	3561:13	9	
KEYWORD	3561:4	3561:4	10	if
LEAF_NODE	3561:4	3561:4	11	if
LEAF_NODE	3561:6	3561:6	10	(
CONDITION	3561:7	3561:7	10	no == 0
EXPR	3561:7	3561:11	11	no == 0
FIELD	3561:7	3561:7	12	no
LEAF_NODE	3561:7	3561:7	13	no
EQ_OPERATOR	3561:9	3561:9	12	==
LEAF_NODE	3561:9	3561:9	13	==
FIELD	3561:11	3561:11	12	0
LEAF_NODE	3561:11	3561:11	13	0
LEAF_NODE	3561:12	3561:12	10	)
STATEMENTS	3561:13	3601:4	10	
LEAF_NODE	3561:13	3561:13	11	{
STATEMENTS	3562:20	3600:5	11	
SELECTION	3562:20	3563:24	12	
KEYWORD	3562:20	3562:20	13	if
LEAF_NODE	3562:20	3562:20	14	if
LEAF_NODE	3562:22	3562:22	13	(
CONDITION	3562:24	3562:24	13	* bufferoffset + datalen + 2 + 6 > buffersize
EXPR	3562:24	3562:58	14	* bufferoffset + datalen + 2 + 6 > buffersize
UNARY_EXPR	3562:24	3562:25	15	* bufferoffset
UNARY_OPERATOR	3562:24	3562:24	16	*
LEAF_NODE	3562:24	3562:24	17	*
FIELD	3562:25	3562:25	16	bufferoffset
LEAF_NODE	3562:25	3562:25	17	bufferoffset
LEAF_NODE	3562:38	3562:38	15	+
FIELD	3562:40	3562:40	15	datalen
LEAF_NODE	3562:40	3562:40	16	datalen
LEAF_NODE	3562:48	3562:48	15	+
FIELD	3562:50	3562:50	15	2
LEAF_NODE	3562:50	3562:50	16	2
LEAF_NODE	3562:52	3562:52	15	+
FIELD	3562:54	3562:54	15	6
LEAF_NODE	3562:54	3562:54	16	6
REL_OPERATOR	3562:56	3562:56	15	>
LEAF_NODE	3562:56	3562:56	16	>
FIELD	3562:58	3562:58	15	buffersize
LEAF_NODE	3562:58	3562:58	16	buffersize
LEAF_NODE	3562:69	3562:69	13	)
STATEMENTS	3563:24	3563:24	13	
JUMP_STATEMENT	3563:24	3563:33	14	return ( 0 ) ;
KEYWORD	3563:24	3563:24	15	return
LEAF_NODE	3563:24	3563:24	16	return
DESTINATION	3563:30	3563:30	15	( 0 )
EXPR	3563:30	3563:32	16	( 0 )
LEAF_NODE	3563:30	3563:30	17	(
FIELD	3563:31	3563:31	17	0
LEAF_NODE	3563:31	3563:31	18	0
LEAF_NODE	3563:32	3563:32	17	)
LEAF_NODE	3563:33	3563:33	15	;
EXPR_STATEMENT	3564:5	3564:68	12	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , datalen + 2 ) ;
EXPR	3564:5	3564:5	13	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , datalen + 2 )
FUNCTION_CALL	3564:5	3564:67	14	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , datalen + 2 )
CALLEE	3564:5	3564:5	15	_TIFFmemcpy
LEAF_NODE	3564:5	3564:5	16	_TIFFmemcpy
LEAF_NODE	3564:16	3564:16	15	(
ARGUMENT	3564:17	3564:17	15	& ( buffer [ * bufferoffset ] )
UNARY_EXPR	3564:17	3564:40	16	& ( buffer [ * bufferoffset ] )
UNARY_OPERATOR	3564:17	3564:17	17	&
LEAF_NODE	3564:17	3564:17	18	&
LEAF_NODE	3564:18	3564:18	17	(
FIELD	3564:19	3564:39	17	buffer [ * bufferoffset ]
LEAF_NODE	3564:19	3564:19	18	buffer
LEAF_NODE	3564:25	3564:25	18	[
EXPR	3564:26	3564:26	18	* bufferoffset
UNARY_EXPR	3564:26	3564:27	19	* bufferoffset
UNARY_OPERATOR	3564:26	3564:26	20	*
LEAF_NODE	3564:26	3564:26	21	*
FIELD	3564:27	3564:27	20	bufferoffset
LEAF_NODE	3564:27	3564:27	21	bufferoffset
LEAF_NODE	3564:39	3564:39	18	]
LEAF_NODE	3564:40	3564:40	17	)
LEAF_NODE	3564:41	3564:41	15	,
ARGUMENT	3564:43	3564:43	15	& ( strip [ i - 1 ] )
UNARY_EXPR	3564:43	3564:55	16	& ( strip [ i - 1 ] )
UNARY_OPERATOR	3564:43	3564:43	17	&
LEAF_NODE	3564:43	3564:43	18	&
LEAF_NODE	3564:44	3564:44	17	(
FIELD	3564:45	3564:54	17	strip [ i - 1 ]
LEAF_NODE	3564:45	3564:45	18	strip
LEAF_NODE	3564:50	3564:50	18	[
EXPR	3564:51	3564:53	18	i - 1
FIELD	3564:51	3564:51	19	i
LEAF_NODE	3564:51	3564:51	20	i
LEAF_NODE	3564:52	3564:52	19	-
FIELD	3564:53	3564:53	19	1
LEAF_NODE	3564:53	3564:53	20	1
LEAF_NODE	3564:54	3564:54	18	]
LEAF_NODE	3564:55	3564:55	17	)
LEAF_NODE	3564:56	3564:56	15	,
ARGUMENT	3564:58	3564:66	15	datalen + 2
FIELD	3564:58	3564:58	16	datalen
LEAF_NODE	3564:58	3564:58	17	datalen
LEAF_NODE	3564:65	3564:65	16	+
FIELD	3564:66	3564:66	16	2
LEAF_NODE	3564:66	3564:66	17	2
LEAF_NODE	3564:67	3564:67	15	)
LEAF_NODE	3564:68	3564:68	13	;
SELECTION	3565:20	3566:24	12	
KEYWORD	3565:20	3565:20	13	if
LEAF_NODE	3565:20	3565:20	14	if
LEAF_NODE	3565:22	3565:22	13	(
CONDITION	3565:24	3565:24	13	* bufferoffset + 9 >= buffersize
EXPR	3565:24	3565:45	14	* bufferoffset + 9 >= buffersize
UNARY_EXPR	3565:24	3565:25	15	* bufferoffset
UNARY_OPERATOR	3565:24	3565:24	16	*
LEAF_NODE	3565:24	3565:24	17	*
FIELD	3565:25	3565:25	16	bufferoffset
LEAF_NODE	3565:25	3565:25	17	bufferoffset
LEAF_NODE	3565:38	3565:38	15	+
FIELD	3565:40	3565:40	15	9
LEAF_NODE	3565:40	3565:40	16	9
REL_OPERATOR	3565:42	3565:42	15	>=
LEAF_NODE	3565:42	3565:42	16	>=
FIELD	3565:45	3565:45	15	buffersize
LEAF_NODE	3565:45	3565:45	16	buffersize
LEAF_NODE	3565:56	3565:56	13	)
STATEMENTS	3566:24	3566:24	13	
JUMP_STATEMENT	3566:24	3566:33	14	return ( 0 ) ;
KEYWORD	3566:24	3566:24	15	return
LEAF_NODE	3566:24	3566:24	16	return
DESTINATION	3566:30	3566:30	15	( 0 )
EXPR	3566:30	3566:32	16	( 0 )
LEAF_NODE	3566:30	3566:30	17	(
FIELD	3566:31	3566:31	17	0
LEAF_NODE	3566:31	3566:31	18	0
LEAF_NODE	3566:32	3566:32	17	)
LEAF_NODE	3566:33	3566:33	15	;
EXPR_STATEMENT	3567:5	3567:36	12	ncomp = buffer [ * bufferoffset + 9 ] ;
EXPR	3567:5	3567:5	13	ncomp = buffer [ * bufferoffset + 9 ]
ASSIGN	3567:5	3567:13	14	ncomp = buffer [ * bufferoffset + 9 ]
LVAL	3567:5	3567:5	15	ncomp
FIELD	3567:5	3567:5	16	ncomp
LEAF_NODE	3567:5	3567:5	17	ncomp
ASSIGN_OP	3567:11	3567:11	15	=
LEAF_NODE	3567:11	3567:11	16	=
RVAL	3567:13	3567:13	15	buffer [ * bufferoffset + 9 ]
FIELD	3567:13	3567:35	16	buffer [ * bufferoffset + 9 ]
LEAF_NODE	3567:13	3567:13	17	buffer
LEAF_NODE	3567:19	3567:19	17	[
EXPR	3567:20	3567:34	17	* bufferoffset + 9
UNARY_EXPR	3567:20	3567:21	18	* bufferoffset
UNARY_OPERATOR	3567:20	3567:20	19	*
LEAF_NODE	3567:20	3567:20	20	*
FIELD	3567:21	3567:21	19	bufferoffset
LEAF_NODE	3567:21	3567:21	20	bufferoffset
LEAF_NODE	3567:33	3567:33	18	+
FIELD	3567:34	3567:34	18	9
LEAF_NODE	3567:34	3567:34	19	9
LEAF_NODE	3567:35	3567:35	17	]
LEAF_NODE	3567:36	3567:36	13	;
SELECTION	3568:5	3569:6	12	
KEYWORD	3568:5	3568:5	13	if
LEAF_NODE	3568:5	3568:5	14	if
LEAF_NODE	3568:8	3568:8	13	(
CONDITION	3568:9	3568:9	13	ncomp < 1 || ncomp > 4
EXPR	3568:9	3568:9	14	ncomp < 1 || ncomp > 4
OR	3568:9	3568:22	15	ncomp < 1 || ncomp > 4
EXPR	3568:9	3568:17	16	ncomp < 1
FIELD	3568:9	3568:9	17	ncomp
LEAF_NODE	3568:9	3568:9	18	ncomp
REL_OPERATOR	3568:15	3568:15	17	<
LEAF_NODE	3568:15	3568:15	18	<
FIELD	3568:17	3568:17	17	1
LEAF_NODE	3568:17	3568:17	18	1
LEAF_NODE	3568:19	3568:19	16	||
EXPR	3568:22	3568:30	16	ncomp > 4
FIELD	3568:22	3568:22	17	ncomp
LEAF_NODE	3568:22	3568:22	18	ncomp
REL_OPERATOR	3568:28	3568:28	17	>
LEAF_NODE	3568:28	3568:28	18	>
FIELD	3568:30	3568:30	17	4
LEAF_NODE	3568:30	3568:30	18	4
LEAF_NODE	3568:31	3568:31	13	)
STATEMENTS	3569:6	3569:6	13	
JUMP_STATEMENT	3569:6	3569:15	14	return ( 0 ) ;
KEYWORD	3569:6	3569:6	15	return
LEAF_NODE	3569:6	3569:6	16	return
DESTINATION	3569:12	3569:12	15	( 0 )
EXPR	3569:12	3569:14	16	( 0 )
LEAF_NODE	3569:12	3569:12	17	(
FIELD	3569:13	3569:13	17	0
LEAF_NODE	3569:13	3569:13	18	0
LEAF_NODE	3569:14	3569:14	17	)
LEAF_NODE	3569:15	3569:15	15	;
EXPR_STATEMENT	3570:5	3570:13	12	v_samp = 1 ;
EXPR	3570:5	3570:5	13	v_samp = 1
ASSIGN	3570:5	3570:12	14	v_samp = 1
LVAL	3570:5	3570:5	15	v_samp
FIELD	3570:5	3570:5	16	v_samp
LEAF_NODE	3570:5	3570:5	17	v_samp
ASSIGN_OP	3570:11	3570:11	15	=
LEAF_NODE	3570:11	3570:11	16	=
RVAL	3570:12	3570:12	15	1
FIELD	3570:12	3570:12	16	1
LEAF_NODE	3570:12	3570:12	17	1
LEAF_NODE	3570:13	3570:13	13	;
EXPR_STATEMENT	3571:5	3571:13	12	h_samp = 1 ;
EXPR	3571:5	3571:5	13	h_samp = 1
ASSIGN	3571:5	3571:12	14	h_samp = 1
LVAL	3571:5	3571:5	15	h_samp
FIELD	3571:5	3571:5	16	h_samp
LEAF_NODE	3571:5	3571:5	17	h_samp
ASSIGN_OP	3571:11	3571:11	15	=
LEAF_NODE	3571:11	3571:11	16	=
RVAL	3571:12	3571:12	15	1
FIELD	3571:12	3571:12	16	1
LEAF_NODE	3571:12	3571:12	17	1
LEAF_NODE	3571:13	3571:13	13	;
SELECTION	3572:20	3573:24	12	
KEYWORD	3572:20	3572:20	13	if
LEAF_NODE	3572:20	3572:20	14	if
LEAF_NODE	3572:22	3572:22	13	(
CONDITION	3572:24	3572:24	13	* bufferoffset + 11 + 3 * ( ncomp - 1 ) >= buffersize
EXPR	3572:24	3572:60	14	* bufferoffset + 11 + 3 * ( ncomp - 1 ) >= buffersize
UNARY_EXPR	3572:24	3572:25	15	* bufferoffset
UNARY_OPERATOR	3572:24	3572:24	16	*
LEAF_NODE	3572:24	3572:24	17	*
FIELD	3572:25	3572:25	16	bufferoffset
LEAF_NODE	3572:25	3572:25	17	bufferoffset
LEAF_NODE	3572:38	3572:38	15	+
FIELD	3572:40	3572:40	15	11
LEAF_NODE	3572:40	3572:40	16	11
LEAF_NODE	3572:43	3572:43	15	+
FIELD	3572:45	3572:45	15	3
LEAF_NODE	3572:45	3572:45	16	3
LEAF_NODE	3572:46	3572:46	15	*
LEAF_NODE	3572:47	3572:47	15	(
FIELD	3572:48	3572:48	15	ncomp
LEAF_NODE	3572:48	3572:48	16	ncomp
LEAF_NODE	3572:53	3572:53	15	-
FIELD	3572:54	3572:54	15	1
LEAF_NODE	3572:54	3572:54	16	1
LEAF_NODE	3572:55	3572:55	15	)
REL_OPERATOR	3572:57	3572:57	15	>=
LEAF_NODE	3572:57	3572:57	16	>=
FIELD	3572:60	3572:60	15	buffersize
LEAF_NODE	3572:60	3572:60	16	buffersize
LEAF_NODE	3572:71	3572:71	13	)
STATEMENTS	3573:24	3573:24	13	
JUMP_STATEMENT	3573:24	3573:33	14	return ( 0 ) ;
KEYWORD	3573:24	3573:24	15	return
LEAF_NODE	3573:24	3573:24	16	return
DESTINATION	3573:30	3573:30	15	( 0 )
EXPR	3573:30	3573:32	16	( 0 )
LEAF_NODE	3573:30	3573:30	17	(
FIELD	3573:31	3573:31	17	0
LEAF_NODE	3573:31	3573:31	18	0
LEAF_NODE	3573:32	3573:32	17	)
LEAF_NODE	3573:33	3573:33	15	;
ITERATION	3574:5	3574:25	12	
KEYWORD	3574:5	3574:5	13	for
LEAF_NODE	3574:5	3574:5	14	for
LEAF_NODE	3574:8	3574:8	13	(
FOR_INIT	3574:9	3574:12	13	j = 0 ;
EXPR	3574:9	3574:9	14	j = 0
ASSIGN	3574:9	3574:11	15	j = 0
LVAL	3574:9	3574:9	16	j
FIELD	3574:9	3574:9	17	j
LEAF_NODE	3574:9	3574:9	18	j
ASSIGN_OP	3574:10	3574:10	16	=
LEAF_NODE	3574:10	3574:10	17	=
RVAL	3574:11	3574:11	16	0
FIELD	3574:11	3574:11	17	0
LEAF_NODE	3574:11	3574:11	18	0
LEAF_NODE	3574:12	3574:12	14	;
CONDITION	3574:13	3574:13	13	j < ncomp
EXPR	3574:13	3574:15	14	j < ncomp
FIELD	3574:13	3574:13	15	j
LEAF_NODE	3574:13	3574:13	16	j
REL_OPERATOR	3574:14	3574:14	15	<
LEAF_NODE	3574:14	3574:14	16	<
FIELD	3574:15	3574:15	15	ncomp
LEAF_NODE	3574:15	3574:15	16	ncomp
LEAF_NODE	3574:20	3574:20	13	;
FOR_EXPR	3574:21	3574:21	13	j ++
EXPR	3574:21	3574:21	14	j ++
FIELD	3574:21	3574:22	15	j ++
LEAF_NODE	3574:21	3574:21	16	j
LEAF_NODE	3574:22	3574:22	16	++
LEAF_NODE	3574:24	3574:24	13	)
STATEMENTS	3574:25	3580:5	13	
LEAF_NODE	3574:25	3574:25	14	{
STATEMENTS	3575:6	3578:6	14	
SIMPLE_DECL	3575:6	3575:50	15	uint16 samp ; samp = buffer [ * bufferoffset + 11 + ( 3 * j ) ] ;
VAR_DECL	3575:6	3575:13	16	uint16 samp ; samp = buffer [ * bufferoffset + 11 + ( 3 * j ) ]
TYPE	3575:6	3575:6	17	uint16
TYPE_NAME	3575:6	3575:6	18	uint16
LEAF_NODE	3575:6	3575:6	19	uint16
NAME	3575:13	3575:13	17	samp
LEAF_NODE	3575:13	3575:13	18	samp
LEAF_NODE	0:0	0:0	17	;
INIT	3575:13	3575:13	17	samp = buffer [ * bufferoffset + 11 + ( 3 * j ) ]
ASSIGN	3575:13	3575:20	18	samp = buffer [ * bufferoffset + 11 + ( 3 * j ) ]
LVAL	3575:13	3575:13	19	samp
NAME	3575:13	3575:13	20	samp
LEAF_NODE	3575:13	3575:13	21	samp
ASSIGN_OP	3575:18	3575:18	19	=
LEAF_NODE	3575:18	3575:18	20	=
RVAL	3575:20	3575:20	19	buffer [ * bufferoffset + 11 + ( 3 * j ) ]
FIELD	3575:20	3575:49	20	buffer [ * bufferoffset + 11 + ( 3 * j ) ]
LEAF_NODE	3575:20	3575:20	21	buffer
LEAF_NODE	3575:26	3575:26	21	[
EXPR	3575:27	3575:48	21	* bufferoffset + 11 + ( 3 * j )
UNARY_EXPR	3575:27	3575:28	22	* bufferoffset
UNARY_OPERATOR	3575:27	3575:27	23	*
LEAF_NODE	3575:27	3575:27	24	*
FIELD	3575:28	3575:28	23	bufferoffset
LEAF_NODE	3575:28	3575:28	24	bufferoffset
LEAF_NODE	3575:40	3575:40	22	+
FIELD	3575:41	3575:41	22	11
LEAF_NODE	3575:41	3575:41	23	11
LEAF_NODE	3575:43	3575:43	22	+
LEAF_NODE	3575:44	3575:44	22	(
FIELD	3575:45	3575:45	22	3
LEAF_NODE	3575:45	3575:45	23	3
LEAF_NODE	3575:46	3575:46	22	*
FIELD	3575:47	3575:47	22	j
LEAF_NODE	3575:47	3575:47	23	j
LEAF_NODE	3575:48	3575:48	22	)
LEAF_NODE	3575:49	3575:49	21	]
LEAF_NODE	3575:50	3575:50	16	;
SELECTION	3576:6	3577:7	15	
KEYWORD	3576:6	3576:6	16	if
LEAF_NODE	3576:6	3576:6	17	if
LEAF_NODE	3576:8	3576:8	16	(
CONDITION	3576:10	3576:10	16	( samp >> 4 ) > h_samp
EXPR	3576:10	3576:22	17	( samp >> 4 ) > h_samp
LEAF_NODE	3576:10	3576:10	18	(
FIELD	3576:11	3576:11	18	samp
LEAF_NODE	3576:11	3576:11	19	samp
LEAF_NODE	3576:15	3576:15	18	>>
FIELD	3576:17	3576:17	18	4
LEAF_NODE	3576:17	3576:17	19	4
LEAF_NODE	3576:18	3576:18	18	)
REL_OPERATOR	3576:20	3576:20	18	>
LEAF_NODE	3576:20	3576:20	19	>
FIELD	3576:22	3576:22	18	h_samp
LEAF_NODE	3576:22	3576:22	19	h_samp
LEAF_NODE	3576:28	3576:28	16	)
STATEMENTS	3577:7	3577:7	16	
EXPR_STATEMENT	3577:7	3577:25	17	h_samp = ( samp >> 4 ) ;
EXPR	3577:7	3577:7	18	h_samp = ( samp >> 4 )
ASSIGN	3577:7	3577:16	19	h_samp = ( samp >> 4 )
LVAL	3577:7	3577:7	20	h_samp
FIELD	3577:7	3577:7	21	h_samp
LEAF_NODE	3577:7	3577:7	22	h_samp
ASSIGN_OP	3577:14	3577:14	20	=
LEAF_NODE	3577:14	3577:14	21	=
RVAL	3577:16	3577:24	20	( samp >> 4 )
LEAF_NODE	3577:16	3577:16	21	(
FIELD	3577:17	3577:17	21	samp
LEAF_NODE	3577:17	3577:17	22	samp
LEAF_NODE	3577:21	3577:21	21	>>
FIELD	3577:23	3577:23	21	4
LEAF_NODE	3577:23	3577:23	22	4
LEAF_NODE	3577:24	3577:24	21	)
LEAF_NODE	3577:25	3577:25	18	;
SELECTION	3578:6	3579:7	15	
KEYWORD	3578:6	3578:6	16	if
LEAF_NODE	3578:6	3578:6	17	if
LEAF_NODE	3578:8	3578:8	16	(
CONDITION	3578:10	3578:10	16	( samp & 0x0f ) > v_samp
EXPR	3578:10	3578:26	17	( samp & 0x0f ) > v_samp
LEAF_NODE	3578:10	3578:10	18	(
FIELD	3578:11	3578:11	18	samp
LEAF_NODE	3578:11	3578:11	19	samp
LEAF_NODE	3578:16	3578:16	18	&
FIELD	3578:18	3578:18	18	0x0f
LEAF_NODE	3578:18	3578:18	19	0x0f
LEAF_NODE	3578:22	3578:22	18	)
REL_OPERATOR	3578:24	3578:24	18	>
LEAF_NODE	3578:24	3578:24	19	>
FIELD	3578:26	3578:26	18	v_samp
LEAF_NODE	3578:26	3578:26	19	v_samp
LEAF_NODE	3578:32	3578:32	16	)
STATEMENTS	3579:7	3579:7	16	
EXPR_STATEMENT	3579:7	3579:29	17	v_samp = ( samp & 0x0f ) ;
EXPR	3579:7	3579:7	18	v_samp = ( samp & 0x0f )
ASSIGN	3579:7	3579:16	19	v_samp = ( samp & 0x0f )
LVAL	3579:7	3579:7	20	v_samp
FIELD	3579:7	3579:7	21	v_samp
LEAF_NODE	3579:7	3579:7	22	v_samp
ASSIGN_OP	3579:14	3579:14	20	=
LEAF_NODE	3579:14	3579:14	21	=
RVAL	3579:16	3579:28	20	( samp & 0x0f )
LEAF_NODE	3579:16	3579:16	21	(
FIELD	3579:17	3579:17	21	samp
LEAF_NODE	3579:17	3579:17	22	samp
LEAF_NODE	3579:22	3579:22	21	&
FIELD	3579:24	3579:24	21	0x0f
LEAF_NODE	3579:24	3579:24	22	0x0f
LEAF_NODE	3579:28	3579:28	21	)
LEAF_NODE	3579:29	3579:29	18	;
LEAF_NODE	3580:5	3580:5	14	}
EXPR_STATEMENT	3581:5	3581:14	12	v_samp *= 8 ;
EXPR	3581:5	3581:5	13	v_samp *= 8
ASSIGN	3581:5	3581:13	14	v_samp *= 8
LVAL	3581:5	3581:5	15	v_samp
FIELD	3581:5	3581:5	16	v_samp
LEAF_NODE	3581:5	3581:5	17	v_samp
ASSIGN_OP	3581:11	3581:11	15	*=
LEAF_NODE	3581:11	3581:11	16	*=
RVAL	3581:13	3581:13	15	8
FIELD	3581:13	3581:13	16	8
LEAF_NODE	3581:13	3581:13	17	8
LEAF_NODE	3581:14	3581:14	13	;
EXPR_STATEMENT	3582:5	3582:14	12	h_samp *= 8 ;
EXPR	3582:5	3582:5	13	h_samp *= 8
ASSIGN	3582:5	3582:13	14	h_samp *= 8
LVAL	3582:5	3582:5	15	h_samp
FIELD	3582:5	3582:5	16	h_samp
LEAF_NODE	3582:5	3582:5	17	h_samp
ASSIGN_OP	3582:11	3582:11	15	*=
LEAF_NODE	3582:11	3582:11	16	*=
RVAL	3582:13	3582:13	15	8
FIELD	3582:13	3582:13	16	8
LEAF_NODE	3582:13	3582:13	17	8
LEAF_NODE	3582:14	3582:14	13	;
EXPR_STATEMENT	3583:5	3585:12	12	ri = ( ( ( ( ( uint16 ) ( buffer [ * bufferoffset + 5 ] ) << 8 ) | ( uint16 ) ( buffer [ * bufferoffset + 6 ] ) ) + v_samp - 1 ) / v_samp ) ;
EXPR	3583:5	3583:5	13	ri = ( ( ( ( ( uint16 ) ( buffer [ * bufferoffset + 5 ] ) << 8 ) | ( uint16 ) ( buffer [ * bufferoffset + 6 ] ) ) + v_samp - 1 ) / v_samp )
ASSIGN	3583:5	3583:8	14	ri = ( ( ( ( ( uint16 ) ( buffer [ * bufferoffset + 5 ] ) << 8 ) | ( uint16 ) ( buffer [ * bufferoffset + 6 ] ) ) + v_samp - 1 ) / v_samp )
LVAL	3583:5	3583:5	15	ri
FIELD	3583:5	3583:5	16	ri
LEAF_NODE	3583:5	3583:5	17	ri
ASSIGN_OP	3583:7	3583:7	15	=
LEAF_NODE	3583:7	3583:7	16	=
RVAL	3583:8	3585:11	15	( ( ( ( ( uint16 ) ( buffer [ * bufferoffset + 5 ] ) << 8 ) | ( uint16 ) ( buffer [ * bufferoffset + 6 ] ) ) + v_samp - 1 ) / v_samp )
LEAF_NODE	3583:8	3583:8	16	(
LEAF_NODE	3583:9	3583:9	16	(
LEAF_NODE	3583:10	3583:10	16	(
BIT_OR	3583:12	3584:5	16	( ( uint16 ) ( buffer [ * bufferoffset + 5 ] ) << 8 ) | ( uint16 ) ( buffer [ * bufferoffset + 6 ] )
BIT_OR_ELEM	3583:12	3583:49	17	( ( uint16 ) ( buffer [ * bufferoffset + 5 ] ) << 8 )
LEAF_NODE	3583:12	3583:12	18	(
LEAF_NODE	3583:13	3583:13	18	(
TYPE_NAME	3583:14	3583:14	18	uint16
LEAF_NODE	3583:14	3583:14	19	uint16
LEAF_NODE	3583:20	3583:20	18	)
LEAF_NODE	3583:21	3583:21	18	(
FIELD	3583:22	3583:44	18	buffer [ * bufferoffset + 5 ]
LEAF_NODE	3583:22	3583:22	19	buffer
LEAF_NODE	3583:28	3583:28	19	[
EXPR	3583:29	3583:43	19	* bufferoffset + 5
UNARY_EXPR	3583:29	3583:30	20	* bufferoffset
UNARY_OPERATOR	3583:29	3583:29	21	*
LEAF_NODE	3583:29	3583:29	22	*
FIELD	3583:30	3583:30	21	bufferoffset
LEAF_NODE	3583:30	3583:30	22	bufferoffset
LEAF_NODE	3583:42	3583:42	20	+
FIELD	3583:43	3583:43	20	5
LEAF_NODE	3583:43	3583:43	21	5
LEAF_NODE	3583:44	3583:44	19	]
LEAF_NODE	3583:45	3583:45	18	)
LEAF_NODE	3583:46	3583:46	18	<<
FIELD	3583:48	3583:48	18	8
LEAF_NODE	3583:48	3583:48	19	8
LEAF_NODE	3583:49	3583:49	18	)
LEAF_NODE	3583:51	3583:51	17	|
BIT_OR_ELEM	3584:5	3584:37	17	( uint16 ) ( buffer [ * bufferoffset + 6 ] )
LEAF_NODE	3584:5	3584:5	18	(
TYPE_NAME	3584:6	3584:6	18	uint16
LEAF_NODE	3584:6	3584:6	19	uint16
LEAF_NODE	3584:12	3584:12	18	)
LEAF_NODE	3584:13	3584:13	18	(
FIELD	3584:14	3584:36	18	buffer [ * bufferoffset + 6 ]
LEAF_NODE	3584:14	3584:14	19	buffer
LEAF_NODE	3584:20	3584:20	19	[
EXPR	3584:21	3584:35	19	* bufferoffset + 6
UNARY_EXPR	3584:21	3584:22	20	* bufferoffset
UNARY_OPERATOR	3584:21	3584:21	21	*
LEAF_NODE	3584:21	3584:21	22	*
FIELD	3584:22	3584:22	21	bufferoffset
LEAF_NODE	3584:22	3584:22	22	bufferoffset
LEAF_NODE	3584:34	3584:34	20	+
FIELD	3584:35	3584:35	20	6
LEAF_NODE	3584:35	3584:35	21	6
LEAF_NODE	3584:36	3584:36	19	]
LEAF_NODE	3584:37	3584:37	18	)
LEAF_NODE	3584:39	3584:39	16	)
LEAF_NODE	3584:40	3584:40	16	+
FIELD	3584:41	3584:41	16	v_samp
LEAF_NODE	3584:41	3584:41	17	v_samp
LEAF_NODE	3584:47	3584:47	16	-
FIELD	3584:48	3584:48	16	1
LEAF_NODE	3584:48	3584:48	17	1
LEAF_NODE	3584:49	3584:49	16	)
LEAF_NODE	3584:50	3584:50	16	/
FIELD	3585:5	3585:5	16	v_samp
LEAF_NODE	3585:5	3585:5	17	v_samp
LEAF_NODE	3585:11	3585:11	16	)
LEAF_NODE	3585:12	3585:12	13	;
EXPR_STATEMENT	3586:5	3588:12	12	ri *= ( ( ( ( ( uint16 ) ( buffer [ * bufferoffset + 7 ] ) << 8 ) | ( uint16 ) ( buffer [ * bufferoffset + 8 ] ) ) + h_samp - 1 ) / h_samp ) ;
EXPR	3586:5	3586:5	13	ri *= ( ( ( ( ( uint16 ) ( buffer [ * bufferoffset + 7 ] ) << 8 ) | ( uint16 ) ( buffer [ * bufferoffset + 8 ] ) ) + h_samp - 1 ) / h_samp )
ASSIGN	3586:5	3586:9	14	ri *= ( ( ( ( ( uint16 ) ( buffer [ * bufferoffset + 7 ] ) << 8 ) | ( uint16 ) ( buffer [ * bufferoffset + 8 ] ) ) + h_samp - 1 ) / h_samp )
LVAL	3586:5	3586:5	15	ri
FIELD	3586:5	3586:5	16	ri
LEAF_NODE	3586:5	3586:5	17	ri
ASSIGN_OP	3586:7	3586:7	15	*=
LEAF_NODE	3586:7	3586:7	16	*=
RVAL	3586:9	3588:11	15	( ( ( ( ( uint16 ) ( buffer [ * bufferoffset + 7 ] ) << 8 ) | ( uint16 ) ( buffer [ * bufferoffset + 8 ] ) ) + h_samp - 1 ) / h_samp )
LEAF_NODE	3586:9	3586:9	16	(
LEAF_NODE	3586:10	3586:10	16	(
LEAF_NODE	3586:11	3586:11	16	(
BIT_OR	3586:13	3587:5	16	( ( uint16 ) ( buffer [ * bufferoffset + 7 ] ) << 8 ) | ( uint16 ) ( buffer [ * bufferoffset + 8 ] )
BIT_OR_ELEM	3586:13	3586:50	17	( ( uint16 ) ( buffer [ * bufferoffset + 7 ] ) << 8 )
LEAF_NODE	3586:13	3586:13	18	(
LEAF_NODE	3586:14	3586:14	18	(
TYPE_NAME	3586:15	3586:15	18	uint16
LEAF_NODE	3586:15	3586:15	19	uint16
LEAF_NODE	3586:21	3586:21	18	)
LEAF_NODE	3586:22	3586:22	18	(
FIELD	3586:23	3586:45	18	buffer [ * bufferoffset + 7 ]
LEAF_NODE	3586:23	3586:23	19	buffer
LEAF_NODE	3586:29	3586:29	19	[
EXPR	3586:30	3586:44	19	* bufferoffset + 7
UNARY_EXPR	3586:30	3586:31	20	* bufferoffset
UNARY_OPERATOR	3586:30	3586:30	21	*
LEAF_NODE	3586:30	3586:30	22	*
FIELD	3586:31	3586:31	21	bufferoffset
LEAF_NODE	3586:31	3586:31	22	bufferoffset
LEAF_NODE	3586:43	3586:43	20	+
FIELD	3586:44	3586:44	20	7
LEAF_NODE	3586:44	3586:44	21	7
LEAF_NODE	3586:45	3586:45	19	]
LEAF_NODE	3586:46	3586:46	18	)
LEAF_NODE	3586:47	3586:47	18	<<
FIELD	3586:49	3586:49	18	8
LEAF_NODE	3586:49	3586:49	19	8
LEAF_NODE	3586:50	3586:50	18	)
LEAF_NODE	3586:52	3586:52	17	|
BIT_OR_ELEM	3587:5	3587:37	17	( uint16 ) ( buffer [ * bufferoffset + 8 ] )
LEAF_NODE	3587:5	3587:5	18	(
TYPE_NAME	3587:6	3587:6	18	uint16
LEAF_NODE	3587:6	3587:6	19	uint16
LEAF_NODE	3587:12	3587:12	18	)
LEAF_NODE	3587:13	3587:13	18	(
FIELD	3587:14	3587:36	18	buffer [ * bufferoffset + 8 ]
LEAF_NODE	3587:14	3587:14	19	buffer
LEAF_NODE	3587:20	3587:20	19	[
EXPR	3587:21	3587:35	19	* bufferoffset + 8
UNARY_EXPR	3587:21	3587:22	20	* bufferoffset
UNARY_OPERATOR	3587:21	3587:21	21	*
LEAF_NODE	3587:21	3587:21	22	*
FIELD	3587:22	3587:22	21	bufferoffset
LEAF_NODE	3587:22	3587:22	22	bufferoffset
LEAF_NODE	3587:34	3587:34	20	+
FIELD	3587:35	3587:35	20	8
LEAF_NODE	3587:35	3587:35	21	8
LEAF_NODE	3587:36	3587:36	19	]
LEAF_NODE	3587:37	3587:37	18	)
LEAF_NODE	3587:39	3587:39	16	)
LEAF_NODE	3587:40	3587:40	16	+
FIELD	3587:41	3587:41	16	h_samp
LEAF_NODE	3587:41	3587:41	17	h_samp
LEAF_NODE	3587:47	3587:47	16	-
FIELD	3587:48	3587:48	16	1
LEAF_NODE	3587:48	3587:48	17	1
LEAF_NODE	3587:49	3587:49	16	)
LEAF_NODE	3587:50	3587:50	16	/
FIELD	3588:5	3588:5	16	h_samp
LEAF_NODE	3588:5	3588:5	17	h_samp
LEAF_NODE	3588:11	3588:11	16	)
LEAF_NODE	3588:12	3588:12	13	;
EXPR_STATEMENT	3589:5	3590:78	12	buffer [ * bufferoffset + 5 ] = ( unsigned char ) ( ( height >> 8 ) & 0xff ) ;
EXPR	3589:5	3589:5	13	buffer [ * bufferoffset + 5 ] = ( unsigned char ) ( ( height >> 8 ) & 0xff )
ASSIGN	3589:5	3590:42	14	buffer [ * bufferoffset + 5 ] = ( unsigned char ) ( ( height >> 8 ) & 0xff )
LVAL	3589:5	3589:5	15	buffer [ * bufferoffset + 5 ]
FIELD	3589:5	3589:27	16	buffer [ * bufferoffset + 5 ]
LEAF_NODE	3589:5	3589:5	17	buffer
LEAF_NODE	3589:11	3589:11	17	[
EXPR	3589:12	3589:26	17	* bufferoffset + 5
UNARY_EXPR	3589:12	3589:13	18	* bufferoffset
UNARY_OPERATOR	3589:12	3589:12	19	*
LEAF_NODE	3589:12	3589:12	20	*
FIELD	3589:13	3589:13	19	bufferoffset
LEAF_NODE	3589:13	3589:13	20	bufferoffset
LEAF_NODE	3589:25	3589:25	18	+
FIELD	3589:26	3589:26	18	5
LEAF_NODE	3589:26	3589:26	19	5
LEAF_NODE	3589:27	3589:27	17	]
ASSIGN_OP	3589:28	3589:28	15	=
LEAF_NODE	3589:28	3589:28	16	=
RVAL	3590:42	3590:77	15	( unsigned char ) ( ( height >> 8 ) & 0xff )
LEAF_NODE	3590:42	3590:42	16	(
TYPE_NAME	3590:43	3590:52	16	unsigned char
LEAF_NODE	3590:43	3590:43	17	unsigned
LEAF_NODE	3590:52	3590:52	17	char
LEAF_NODE	3590:56	3590:56	16	)
LEAF_NODE	3590:58	3590:58	16	(
LEAF_NODE	3590:59	3590:59	16	(
FIELD	3590:60	3590:60	16	height
LEAF_NODE	3590:60	3590:60	17	height
LEAF_NODE	3590:66	3590:66	16	>>
FIELD	3590:68	3590:68	16	8
LEAF_NODE	3590:68	3590:68	17	8
LEAF_NODE	3590:69	3590:69	16	)
LEAF_NODE	3590:71	3590:71	16	&
FIELD	3590:73	3590:73	16	0xff
LEAF_NODE	3590:73	3590:73	17	0xff
LEAF_NODE	3590:77	3590:77	16	)
LEAF_NODE	3590:78	3590:78	13	;
EXPR_STATEMENT	3591:5	3592:75	12	buffer [ * bufferoffset + 6 ] = ( unsigned char ) ( height & 0xff ) ;
EXPR	3591:5	3591:5	13	buffer [ * bufferoffset + 6 ] = ( unsigned char ) ( height & 0xff )
ASSIGN	3591:5	3592:44	14	buffer [ * bufferoffset + 6 ] = ( unsigned char ) ( height & 0xff )
LVAL	3591:5	3591:5	15	buffer [ * bufferoffset + 6 ]
FIELD	3591:5	3591:27	16	buffer [ * bufferoffset + 6 ]
LEAF_NODE	3591:5	3591:5	17	buffer
LEAF_NODE	3591:11	3591:11	17	[
EXPR	3591:12	3591:26	17	* bufferoffset + 6
UNARY_EXPR	3591:12	3591:13	18	* bufferoffset
UNARY_OPERATOR	3591:12	3591:12	19	*
LEAF_NODE	3591:12	3591:12	20	*
FIELD	3591:13	3591:13	19	bufferoffset
LEAF_NODE	3591:13	3591:13	20	bufferoffset
LEAF_NODE	3591:25	3591:25	18	+
FIELD	3591:26	3591:26	18	6
LEAF_NODE	3591:26	3591:26	19	6
LEAF_NODE	3591:27	3591:27	17	]
ASSIGN_OP	3591:28	3591:28	15	=
LEAF_NODE	3591:28	3591:28	16	=
RVAL	3592:44	3592:74	15	( unsigned char ) ( height & 0xff )
LEAF_NODE	3592:44	3592:44	16	(
TYPE_NAME	3592:45	3592:54	16	unsigned char
LEAF_NODE	3592:45	3592:45	17	unsigned
LEAF_NODE	3592:54	3592:54	17	char
LEAF_NODE	3592:58	3592:58	16	)
LEAF_NODE	3592:60	3592:60	16	(
FIELD	3592:61	3592:61	16	height
LEAF_NODE	3592:61	3592:61	17	height
LEAF_NODE	3592:68	3592:68	16	&
FIELD	3592:70	3592:70	16	0xff
LEAF_NODE	3592:70	3592:70	17	0xff
LEAF_NODE	3592:74	3592:74	16	)
LEAF_NODE	3592:75	3592:75	13	;
EXPR_STATEMENT	3593:5	3593:29	12	* bufferoffset += datalen + 2 ;
EXPR	3593:5	3593:5	13	* bufferoffset += datalen + 2
ASSIGN	3593:5	3593:20	14	* bufferoffset += datalen + 2
LVAL	3593:5	3593:5	15	* bufferoffset
UNARY_EXPR	3593:5	3593:6	16	* bufferoffset
UNARY_OPERATOR	3593:5	3593:5	17	*
LEAF_NODE	3593:5	3593:5	18	*
FIELD	3593:6	3593:6	17	bufferoffset
LEAF_NODE	3593:6	3593:6	18	bufferoffset
ASSIGN_OP	3593:18	3593:18	15	+=
LEAF_NODE	3593:18	3593:18	16	+=
RVAL	3593:20	3593:28	15	datalen + 2
FIELD	3593:20	3593:20	16	datalen
LEAF_NODE	3593:20	3593:20	17	datalen
LEAF_NODE	3593:27	3593:27	16	+
FIELD	3593:28	3593:28	16	2
LEAF_NODE	3593:28	3593:28	17	2
LEAF_NODE	3593:29	3593:29	13	;
EXPR_STATEMENT	3595:5	3595:35	12	buffer [ ( * bufferoffset ) ++ ] = 0xff ;
EXPR	3595:5	3595:5	13	buffer [ ( * bufferoffset ) ++ ] = 0xff
ASSIGN	3595:5	3595:31	14	buffer [ ( * bufferoffset ) ++ ] = 0xff
LVAL	3595:5	3595:5	15	buffer [ ( * bufferoffset ) ++ ]
FIELD	3595:5	3595:29	16	buffer [ ( * bufferoffset ) ++ ]
LEAF_NODE	3595:5	3595:5	17	buffer
LEAF_NODE	3595:11	3595:11	17	[
EXPR	3595:12	3595:27	17	( * bufferoffset ) ++
LEAF_NODE	3595:12	3595:12	18	(
UNARY_EXPR	3595:13	3595:14	18	* bufferoffset
UNARY_OPERATOR	3595:13	3595:13	19	*
LEAF_NODE	3595:13	3595:13	20	*
FIELD	3595:14	3595:14	19	bufferoffset
LEAF_NODE	3595:14	3595:14	20	bufferoffset
LEAF_NODE	3595:26	3595:26	18	)
LEAF_NODE	3595:27	3595:27	18	++
LEAF_NODE	3595:29	3595:29	17	]
ASSIGN_OP	3595:30	3595:30	15	=
LEAF_NODE	3595:30	3595:30	16	=
RVAL	3595:31	3595:31	15	0xff
FIELD	3595:31	3595:31	16	0xff
LEAF_NODE	3595:31	3595:31	17	0xff
LEAF_NODE	3595:35	3595:35	13	;
EXPR_STATEMENT	3596:5	3596:35	12	buffer [ ( * bufferoffset ) ++ ] = 0xdd ;
EXPR	3596:5	3596:5	13	buffer [ ( * bufferoffset ) ++ ] = 0xdd
ASSIGN	3596:5	3596:31	14	buffer [ ( * bufferoffset ) ++ ] = 0xdd
LVAL	3596:5	3596:5	15	buffer [ ( * bufferoffset ) ++ ]
FIELD	3596:5	3596:29	16	buffer [ ( * bufferoffset ) ++ ]
LEAF_NODE	3596:5	3596:5	17	buffer
LEAF_NODE	3596:11	3596:11	17	[
EXPR	3596:12	3596:27	17	( * bufferoffset ) ++
LEAF_NODE	3596:12	3596:12	18	(
UNARY_EXPR	3596:13	3596:14	18	* bufferoffset
UNARY_OPERATOR	3596:13	3596:13	19	*
LEAF_NODE	3596:13	3596:13	20	*
FIELD	3596:14	3596:14	19	bufferoffset
LEAF_NODE	3596:14	3596:14	20	bufferoffset
LEAF_NODE	3596:26	3596:26	18	)
LEAF_NODE	3596:27	3596:27	18	++
LEAF_NODE	3596:29	3596:29	17	]
ASSIGN_OP	3596:30	3596:30	15	=
LEAF_NODE	3596:30	3596:30	16	=
RVAL	3596:31	3596:31	15	0xdd
FIELD	3596:31	3596:31	16	0xdd
LEAF_NODE	3596:31	3596:31	17	0xdd
LEAF_NODE	3596:35	3596:35	13	;
EXPR_STATEMENT	3597:5	3597:35	12	buffer [ ( * bufferoffset ) ++ ] = 0x00 ;
EXPR	3597:5	3597:5	13	buffer [ ( * bufferoffset ) ++ ] = 0x00
ASSIGN	3597:5	3597:31	14	buffer [ ( * bufferoffset ) ++ ] = 0x00
LVAL	3597:5	3597:5	15	buffer [ ( * bufferoffset ) ++ ]
FIELD	3597:5	3597:29	16	buffer [ ( * bufferoffset ) ++ ]
LEAF_NODE	3597:5	3597:5	17	buffer
LEAF_NODE	3597:11	3597:11	17	[
EXPR	3597:12	3597:27	17	( * bufferoffset ) ++
LEAF_NODE	3597:12	3597:12	18	(
UNARY_EXPR	3597:13	3597:14	18	* bufferoffset
UNARY_OPERATOR	3597:13	3597:13	19	*
LEAF_NODE	3597:13	3597:13	20	*
FIELD	3597:14	3597:14	19	bufferoffset
LEAF_NODE	3597:14	3597:14	20	bufferoffset
LEAF_NODE	3597:26	3597:26	18	)
LEAF_NODE	3597:27	3597:27	18	++
LEAF_NODE	3597:29	3597:29	17	]
ASSIGN_OP	3597:30	3597:30	15	=
LEAF_NODE	3597:30	3597:30	16	=
RVAL	3597:31	3597:31	15	0x00
FIELD	3597:31	3597:31	16	0x00
LEAF_NODE	3597:31	3597:31	17	0x00
LEAF_NODE	3597:35	3597:35	13	;
EXPR_STATEMENT	3598:5	3598:35	12	buffer [ ( * bufferoffset ) ++ ] = 0x04 ;
EXPR	3598:5	3598:5	13	buffer [ ( * bufferoffset ) ++ ] = 0x04
ASSIGN	3598:5	3598:31	14	buffer [ ( * bufferoffset ) ++ ] = 0x04
LVAL	3598:5	3598:5	15	buffer [ ( * bufferoffset ) ++ ]
FIELD	3598:5	3598:29	16	buffer [ ( * bufferoffset ) ++ ]
LEAF_NODE	3598:5	3598:5	17	buffer
LEAF_NODE	3598:11	3598:11	17	[
EXPR	3598:12	3598:27	17	( * bufferoffset ) ++
LEAF_NODE	3598:12	3598:12	18	(
UNARY_EXPR	3598:13	3598:14	18	* bufferoffset
UNARY_OPERATOR	3598:13	3598:13	19	*
LEAF_NODE	3598:13	3598:13	20	*
FIELD	3598:14	3598:14	19	bufferoffset
LEAF_NODE	3598:14	3598:14	20	bufferoffset
LEAF_NODE	3598:26	3598:26	18	)
LEAF_NODE	3598:27	3598:27	18	++
LEAF_NODE	3598:29	3598:29	17	]
ASSIGN_OP	3598:30	3598:30	15	=
LEAF_NODE	3598:30	3598:30	16	=
RVAL	3598:31	3598:31	15	0x04
FIELD	3598:31	3598:31	16	0x04
LEAF_NODE	3598:31	3598:31	17	0x04
LEAF_NODE	3598:35	3598:35	13	;
EXPR_STATEMENT	3599:5	3599:47	12	buffer [ ( * bufferoffset ) ++ ] = ( ri >> 8 ) & 0xff ;
EXPR	3599:5	3599:5	13	buffer [ ( * bufferoffset ) ++ ] = ( ri >> 8 ) & 0xff
ASSIGN	3599:5	3599:31	14	buffer [ ( * bufferoffset ) ++ ] = ( ri >> 8 ) & 0xff
LVAL	3599:5	3599:5	15	buffer [ ( * bufferoffset ) ++ ]
FIELD	3599:5	3599:29	16	buffer [ ( * bufferoffset ) ++ ]
LEAF_NODE	3599:5	3599:5	17	buffer
LEAF_NODE	3599:11	3599:11	17	[
EXPR	3599:12	3599:27	17	( * bufferoffset ) ++
LEAF_NODE	3599:12	3599:12	18	(
UNARY_EXPR	3599:13	3599:14	18	* bufferoffset
UNARY_OPERATOR	3599:13	3599:13	19	*
LEAF_NODE	3599:13	3599:13	20	*
FIELD	3599:14	3599:14	19	bufferoffset
LEAF_NODE	3599:14	3599:14	20	bufferoffset
LEAF_NODE	3599:26	3599:26	18	)
LEAF_NODE	3599:27	3599:27	18	++
LEAF_NODE	3599:29	3599:29	17	]
ASSIGN_OP	3599:30	3599:30	15	=
LEAF_NODE	3599:30	3599:30	16	=
RVAL	3599:31	3599:43	15	( ri >> 8 ) & 0xff
LEAF_NODE	3599:31	3599:31	16	(
FIELD	3599:32	3599:32	16	ri
LEAF_NODE	3599:32	3599:32	17	ri
LEAF_NODE	3599:35	3599:35	16	>>
FIELD	3599:38	3599:38	16	8
LEAF_NODE	3599:38	3599:38	17	8
LEAF_NODE	3599:39	3599:39	16	)
LEAF_NODE	3599:41	3599:41	16	&
FIELD	3599:43	3599:43	16	0xff
LEAF_NODE	3599:43	3599:43	17	0xff
LEAF_NODE	3599:47	3599:47	13	;
EXPR_STATEMENT	3600:5	3600:41	12	buffer [ ( * bufferoffset ) ++ ] = ri & 0xff ;
EXPR	3600:5	3600:5	13	buffer [ ( * bufferoffset ) ++ ] = ri & 0xff
ASSIGN	3600:5	3600:32	14	buffer [ ( * bufferoffset ) ++ ] = ri & 0xff
LVAL	3600:5	3600:5	15	buffer [ ( * bufferoffset ) ++ ]
FIELD	3600:5	3600:29	16	buffer [ ( * bufferoffset ) ++ ]
LEAF_NODE	3600:5	3600:5	17	buffer
LEAF_NODE	3600:11	3600:11	17	[
EXPR	3600:12	3600:27	17	( * bufferoffset ) ++
LEAF_NODE	3600:12	3600:12	18	(
UNARY_EXPR	3600:13	3600:14	18	* bufferoffset
UNARY_OPERATOR	3600:13	3600:13	19	*
LEAF_NODE	3600:13	3600:13	20	*
FIELD	3600:14	3600:14	19	bufferoffset
LEAF_NODE	3600:14	3600:14	20	bufferoffset
LEAF_NODE	3600:26	3600:26	18	)
LEAF_NODE	3600:27	3600:27	18	++
LEAF_NODE	3600:29	3600:29	17	]
ASSIGN_OP	3600:30	3600:30	15	=
LEAF_NODE	3600:30	3600:30	16	=
RVAL	3600:32	3600:37	15	ri & 0xff
FIELD	3600:32	3600:32	16	ri
LEAF_NODE	3600:32	3600:32	17	ri
LEAF_NODE	3600:35	3600:35	16	&
FIELD	3600:37	3600:37	16	0xff
LEAF_NODE	3600:37	3600:37	17	0xff
LEAF_NODE	3600:41	3600:41	13	;
LEAF_NODE	3601:4	3601:4	11	}
JUMP_STATEMENT	3602:4	3602:9	9	break DESTINATION ;
KEYWORD	3602:4	3602:4	10	break
LEAF_NODE	3602:4	3602:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3602:9	3602:9	10	;
LABEL	3603:3	3603:12	9	case 0xc4 :
LEAF_NODE	3603:3	3603:3	10	case
LEAF_NODE	3603:8	3603:8	10	0xc4
LEAF_NODE	3603:12	3603:12	10	:
LABEL	3604:3	3604:12	9	case 0xdb :
LEAF_NODE	3604:3	3604:3	10	case
LEAF_NODE	3604:8	3604:8	10	0xdb
LEAF_NODE	3604:12	3604:12	10	:
SELECTION	3605:16	3606:20	9	
KEYWORD	3605:16	3605:16	10	if
LEAF_NODE	3605:16	3605:16	11	if
LEAF_NODE	3605:18	3605:18	10	(
CONDITION	3605:20	3605:20	10	* bufferoffset + datalen + 2 > buffersize
EXPR	3605:20	3605:50	11	* bufferoffset + datalen + 2 > buffersize
UNARY_EXPR	3605:20	3605:21	12	* bufferoffset
UNARY_OPERATOR	3605:20	3605:20	13	*
LEAF_NODE	3605:20	3605:20	14	*
FIELD	3605:21	3605:21	13	bufferoffset
LEAF_NODE	3605:21	3605:21	14	bufferoffset
LEAF_NODE	3605:34	3605:34	12	+
FIELD	3605:36	3605:36	12	datalen
LEAF_NODE	3605:36	3605:36	13	datalen
LEAF_NODE	3605:44	3605:44	12	+
FIELD	3605:46	3605:46	12	2
LEAF_NODE	3605:46	3605:46	13	2
REL_OPERATOR	3605:48	3605:48	12	>
LEAF_NODE	3605:48	3605:48	13	>
FIELD	3605:50	3605:50	12	buffersize
LEAF_NODE	3605:50	3605:50	13	buffersize
LEAF_NODE	3605:61	3605:61	10	)
STATEMENTS	3606:20	3606:20	10	
JUMP_STATEMENT	3606:20	3606:29	11	return ( 0 ) ;
KEYWORD	3606:20	3606:20	12	return
LEAF_NODE	3606:20	3606:20	13	return
DESTINATION	3606:26	3606:26	12	( 0 )
EXPR	3606:26	3606:28	13	( 0 )
LEAF_NODE	3606:26	3606:26	14	(
FIELD	3606:27	3606:27	14	0
LEAF_NODE	3606:27	3606:27	15	0
LEAF_NODE	3606:28	3606:28	14	)
LEAF_NODE	3606:29	3606:29	12	;
EXPR_STATEMENT	3607:4	3607:67	9	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , datalen + 2 ) ;
EXPR	3607:4	3607:4	10	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , datalen + 2 )
FUNCTION_CALL	3607:4	3607:66	11	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , datalen + 2 )
CALLEE	3607:4	3607:4	12	_TIFFmemcpy
LEAF_NODE	3607:4	3607:4	13	_TIFFmemcpy
LEAF_NODE	3607:15	3607:15	12	(
ARGUMENT	3607:16	3607:16	12	& ( buffer [ * bufferoffset ] )
UNARY_EXPR	3607:16	3607:39	13	& ( buffer [ * bufferoffset ] )
UNARY_OPERATOR	3607:16	3607:16	14	&
LEAF_NODE	3607:16	3607:16	15	&
LEAF_NODE	3607:17	3607:17	14	(
FIELD	3607:18	3607:38	14	buffer [ * bufferoffset ]
LEAF_NODE	3607:18	3607:18	15	buffer
LEAF_NODE	3607:24	3607:24	15	[
EXPR	3607:25	3607:25	15	* bufferoffset
UNARY_EXPR	3607:25	3607:26	16	* bufferoffset
UNARY_OPERATOR	3607:25	3607:25	17	*
LEAF_NODE	3607:25	3607:25	18	*
FIELD	3607:26	3607:26	17	bufferoffset
LEAF_NODE	3607:26	3607:26	18	bufferoffset
LEAF_NODE	3607:38	3607:38	15	]
LEAF_NODE	3607:39	3607:39	14	)
LEAF_NODE	3607:40	3607:40	12	,
ARGUMENT	3607:42	3607:42	12	& ( strip [ i - 1 ] )
UNARY_EXPR	3607:42	3607:54	13	& ( strip [ i - 1 ] )
UNARY_OPERATOR	3607:42	3607:42	14	&
LEAF_NODE	3607:42	3607:42	15	&
LEAF_NODE	3607:43	3607:43	14	(
FIELD	3607:44	3607:53	14	strip [ i - 1 ]
LEAF_NODE	3607:44	3607:44	15	strip
LEAF_NODE	3607:49	3607:49	15	[
EXPR	3607:50	3607:52	15	i - 1
FIELD	3607:50	3607:50	16	i
LEAF_NODE	3607:50	3607:50	17	i
LEAF_NODE	3607:51	3607:51	16	-
FIELD	3607:52	3607:52	16	1
LEAF_NODE	3607:52	3607:52	17	1
LEAF_NODE	3607:53	3607:53	15	]
LEAF_NODE	3607:54	3607:54	14	)
LEAF_NODE	3607:55	3607:55	12	,
ARGUMENT	3607:57	3607:65	12	datalen + 2
FIELD	3607:57	3607:57	13	datalen
LEAF_NODE	3607:57	3607:57	14	datalen
LEAF_NODE	3607:64	3607:64	13	+
FIELD	3607:65	3607:65	13	2
LEAF_NODE	3607:65	3607:65	14	2
LEAF_NODE	3607:66	3607:66	12	)
LEAF_NODE	3607:67	3607:67	10	;
EXPR_STATEMENT	3608:4	3608:28	9	* bufferoffset += datalen + 2 ;
EXPR	3608:4	3608:4	10	* bufferoffset += datalen + 2
ASSIGN	3608:4	3608:19	11	* bufferoffset += datalen + 2
LVAL	3608:4	3608:4	12	* bufferoffset
UNARY_EXPR	3608:4	3608:5	13	* bufferoffset
UNARY_OPERATOR	3608:4	3608:4	14	*
LEAF_NODE	3608:4	3608:4	15	*
FIELD	3608:5	3608:5	14	bufferoffset
LEAF_NODE	3608:5	3608:5	15	bufferoffset
ASSIGN_OP	3608:17	3608:17	12	+=
LEAF_NODE	3608:17	3608:17	13	+=
RVAL	3608:19	3608:27	12	datalen + 2
FIELD	3608:19	3608:19	13	datalen
LEAF_NODE	3608:19	3608:19	14	datalen
LEAF_NODE	3608:26	3608:26	13	+
FIELD	3608:27	3608:27	13	2
LEAF_NODE	3608:27	3608:27	14	2
LEAF_NODE	3608:28	3608:28	10	;
JUMP_STATEMENT	3609:4	3609:9	9	break DESTINATION ;
KEYWORD	3609:4	3609:4	10	break
LEAF_NODE	3609:4	3609:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3609:9	3609:9	10	;
LABEL	3610:3	3610:12	9	case 0xda :
LEAF_NODE	3610:3	3610:3	10	case
LEAF_NODE	3610:8	3610:8	10	0xda
LEAF_NODE	3610:12	3610:12	10	:
SELECTION	3611:4	3611:13	9	
KEYWORD	3611:4	3611:4	10	if
LEAF_NODE	3611:4	3611:4	11	if
LEAF_NODE	3611:6	3611:6	10	(
CONDITION	3611:7	3611:7	10	no == 0
EXPR	3611:7	3611:11	11	no == 0
FIELD	3611:7	3611:7	12	no
LEAF_NODE	3611:7	3611:7	13	no
EQ_OPERATOR	3611:9	3611:9	12	==
LEAF_NODE	3611:9	3611:9	13	==
FIELD	3611:11	3611:11	12	0
LEAF_NODE	3611:11	3611:11	13	0
LEAF_NODE	3611:12	3611:12	10	)
STATEMENTS	3611:13	3616:4	10	
LEAF_NODE	3611:13	3611:13	11	{
STATEMENTS	3612:20	3615:5	11	
SELECTION	3612:20	3613:24	12	
KEYWORD	3612:20	3612:20	13	if
LEAF_NODE	3612:20	3612:20	14	if
LEAF_NODE	3612:22	3612:22	13	(
CONDITION	3612:24	3612:24	13	* bufferoffset + datalen + 2 > buffersize
EXPR	3612:24	3612:54	14	* bufferoffset + datalen + 2 > buffersize
UNARY_EXPR	3612:24	3612:25	15	* bufferoffset
UNARY_OPERATOR	3612:24	3612:24	16	*
LEAF_NODE	3612:24	3612:24	17	*
FIELD	3612:25	3612:25	16	bufferoffset
LEAF_NODE	3612:25	3612:25	17	bufferoffset
LEAF_NODE	3612:38	3612:38	15	+
FIELD	3612:40	3612:40	15	datalen
LEAF_NODE	3612:40	3612:40	16	datalen
LEAF_NODE	3612:48	3612:48	15	+
FIELD	3612:50	3612:50	15	2
LEAF_NODE	3612:50	3612:50	16	2
REL_OPERATOR	3612:52	3612:52	15	>
LEAF_NODE	3612:52	3612:52	16	>
FIELD	3612:54	3612:54	15	buffersize
LEAF_NODE	3612:54	3612:54	16	buffersize
LEAF_NODE	3612:65	3612:65	13	)
STATEMENTS	3613:24	3613:24	13	
JUMP_STATEMENT	3613:24	3613:33	14	return ( 0 ) ;
KEYWORD	3613:24	3613:24	15	return
LEAF_NODE	3613:24	3613:24	16	return
DESTINATION	3613:30	3613:30	15	( 0 )
EXPR	3613:30	3613:32	16	( 0 )
LEAF_NODE	3613:30	3613:30	17	(
FIELD	3613:31	3613:31	17	0
LEAF_NODE	3613:31	3613:31	18	0
LEAF_NODE	3613:32	3613:32	17	)
LEAF_NODE	3613:33	3613:33	15	;
EXPR_STATEMENT	3614:5	3614:68	12	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , datalen + 2 ) ;
EXPR	3614:5	3614:5	13	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , datalen + 2 )
FUNCTION_CALL	3614:5	3614:67	14	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i - 1 ] ) , datalen + 2 )
CALLEE	3614:5	3614:5	15	_TIFFmemcpy
LEAF_NODE	3614:5	3614:5	16	_TIFFmemcpy
LEAF_NODE	3614:16	3614:16	15	(
ARGUMENT	3614:17	3614:17	15	& ( buffer [ * bufferoffset ] )
UNARY_EXPR	3614:17	3614:40	16	& ( buffer [ * bufferoffset ] )
UNARY_OPERATOR	3614:17	3614:17	17	&
LEAF_NODE	3614:17	3614:17	18	&
LEAF_NODE	3614:18	3614:18	17	(
FIELD	3614:19	3614:39	17	buffer [ * bufferoffset ]
LEAF_NODE	3614:19	3614:19	18	buffer
LEAF_NODE	3614:25	3614:25	18	[
EXPR	3614:26	3614:26	18	* bufferoffset
UNARY_EXPR	3614:26	3614:27	19	* bufferoffset
UNARY_OPERATOR	3614:26	3614:26	20	*
LEAF_NODE	3614:26	3614:26	21	*
FIELD	3614:27	3614:27	20	bufferoffset
LEAF_NODE	3614:27	3614:27	21	bufferoffset
LEAF_NODE	3614:39	3614:39	18	]
LEAF_NODE	3614:40	3614:40	17	)
LEAF_NODE	3614:41	3614:41	15	,
ARGUMENT	3614:43	3614:43	15	& ( strip [ i - 1 ] )
UNARY_EXPR	3614:43	3614:55	16	& ( strip [ i - 1 ] )
UNARY_OPERATOR	3614:43	3614:43	17	&
LEAF_NODE	3614:43	3614:43	18	&
LEAF_NODE	3614:44	3614:44	17	(
FIELD	3614:45	3614:54	17	strip [ i - 1 ]
LEAF_NODE	3614:45	3614:45	18	strip
LEAF_NODE	3614:50	3614:50	18	[
EXPR	3614:51	3614:53	18	i - 1
FIELD	3614:51	3614:51	19	i
LEAF_NODE	3614:51	3614:51	20	i
LEAF_NODE	3614:52	3614:52	19	-
FIELD	3614:53	3614:53	19	1
LEAF_NODE	3614:53	3614:53	20	1
LEAF_NODE	3614:54	3614:54	18	]
LEAF_NODE	3614:55	3614:55	17	)
LEAF_NODE	3614:56	3614:56	15	,
ARGUMENT	3614:58	3614:66	15	datalen + 2
FIELD	3614:58	3614:58	16	datalen
LEAF_NODE	3614:58	3614:58	17	datalen
LEAF_NODE	3614:65	3614:65	16	+
FIELD	3614:66	3614:66	16	2
LEAF_NODE	3614:66	3614:66	17	2
LEAF_NODE	3614:67	3614:67	15	)
LEAF_NODE	3614:68	3614:68	13	;
EXPR_STATEMENT	3615:5	3615:29	12	* bufferoffset += datalen + 2 ;
EXPR	3615:5	3615:5	13	* bufferoffset += datalen + 2
ASSIGN	3615:5	3615:20	14	* bufferoffset += datalen + 2
LVAL	3615:5	3615:5	15	* bufferoffset
UNARY_EXPR	3615:5	3615:6	16	* bufferoffset
UNARY_OPERATOR	3615:5	3615:5	17	*
LEAF_NODE	3615:5	3615:5	18	*
FIELD	3615:6	3615:6	17	bufferoffset
LEAF_NODE	3615:6	3615:6	18	bufferoffset
ASSIGN_OP	3615:18	3615:18	15	+=
LEAF_NODE	3615:18	3615:18	16	+=
RVAL	3615:20	3615:28	15	datalen + 2
FIELD	3615:20	3615:20	16	datalen
LEAF_NODE	3615:20	3615:20	17	datalen
LEAF_NODE	3615:27	3615:27	16	+
FIELD	3615:28	3615:28	16	2
LEAF_NODE	3615:28	3615:28	17	2
LEAF_NODE	3615:29	3615:29	13	;
LEAF_NODE	3616:4	3616:4	11	}
SELECTION	3616:6	3616:11	9	
KEYWORD	3616:6	3616:6	10	else
LEAF_NODE	3616:6	3616:6	11	else
STATEMENTS	3616:11	3622:4	10	
LEAF_NODE	3616:11	3616:11	11	{
STATEMENTS	3617:20	3620:5	11	
SELECTION	3617:20	3618:24	12	
KEYWORD	3617:20	3617:20	13	if
LEAF_NODE	3617:20	3617:20	14	if
LEAF_NODE	3617:22	3617:22	13	(
CONDITION	3617:24	3617:24	13	* bufferoffset + 2 > buffersize
EXPR	3617:24	3617:44	14	* bufferoffset + 2 > buffersize
UNARY_EXPR	3617:24	3617:25	15	* bufferoffset
UNARY_OPERATOR	3617:24	3617:24	16	*
LEAF_NODE	3617:24	3617:24	17	*
FIELD	3617:25	3617:25	16	bufferoffset
LEAF_NODE	3617:25	3617:25	17	bufferoffset
LEAF_NODE	3617:38	3617:38	15	+
FIELD	3617:40	3617:40	15	2
LEAF_NODE	3617:40	3617:40	16	2
REL_OPERATOR	3617:42	3617:42	15	>
LEAF_NODE	3617:42	3617:42	16	>
FIELD	3617:44	3617:44	15	buffersize
LEAF_NODE	3617:44	3617:44	16	buffersize
LEAF_NODE	3617:55	3617:55	13	)
STATEMENTS	3618:24	3618:24	13	
JUMP_STATEMENT	3618:24	3618:33	14	return ( 0 ) ;
KEYWORD	3618:24	3618:24	15	return
LEAF_NODE	3618:24	3618:24	16	return
DESTINATION	3618:30	3618:30	15	( 0 )
EXPR	3618:30	3618:32	16	( 0 )
LEAF_NODE	3618:30	3618:30	17	(
FIELD	3618:31	3618:31	17	0
LEAF_NODE	3618:31	3618:31	18	0
LEAF_NODE	3618:32	3618:32	17	)
LEAF_NODE	3618:33	3618:33	15	;
EXPR_STATEMENT	3619:5	3619:35	12	buffer [ ( * bufferoffset ) ++ ] = 0xff ;
EXPR	3619:5	3619:5	13	buffer [ ( * bufferoffset ) ++ ] = 0xff
ASSIGN	3619:5	3619:31	14	buffer [ ( * bufferoffset ) ++ ] = 0xff
LVAL	3619:5	3619:5	15	buffer [ ( * bufferoffset ) ++ ]
FIELD	3619:5	3619:29	16	buffer [ ( * bufferoffset ) ++ ]
LEAF_NODE	3619:5	3619:5	17	buffer
LEAF_NODE	3619:11	3619:11	17	[
EXPR	3619:12	3619:27	17	( * bufferoffset ) ++
LEAF_NODE	3619:12	3619:12	18	(
UNARY_EXPR	3619:13	3619:14	18	* bufferoffset
UNARY_OPERATOR	3619:13	3619:13	19	*
LEAF_NODE	3619:13	3619:13	20	*
FIELD	3619:14	3619:14	19	bufferoffset
LEAF_NODE	3619:14	3619:14	20	bufferoffset
LEAF_NODE	3619:26	3619:26	18	)
LEAF_NODE	3619:27	3619:27	18	++
LEAF_NODE	3619:29	3619:29	17	]
ASSIGN_OP	3619:30	3619:30	15	=
LEAF_NODE	3619:30	3619:30	16	=
RVAL	3619:31	3619:31	15	0xff
FIELD	3619:31	3619:31	16	0xff
LEAF_NODE	3619:31	3619:31	17	0xff
LEAF_NODE	3619:35	3619:35	13	;
EXPR_STATEMENT	3620:5	3621:78	12	buffer [ ( * bufferoffset ) ++ ] = ( unsigned char ) ( 0xd0 | ( ( no - 1 ) % 8 ) ) ;
EXPR	3620:5	3620:5	13	buffer [ ( * bufferoffset ) ++ ] = ( unsigned char ) ( 0xd0 | ( ( no - 1 ) % 8 ) )
ASSIGN	3620:5	3621:44	14	buffer [ ( * bufferoffset ) ++ ] = ( unsigned char ) ( 0xd0 | ( ( no - 1 ) % 8 ) )
LVAL	3620:5	3620:5	15	buffer [ ( * bufferoffset ) ++ ]
FIELD	3620:5	3620:29	16	buffer [ ( * bufferoffset ) ++ ]
LEAF_NODE	3620:5	3620:5	17	buffer
LEAF_NODE	3620:11	3620:11	17	[
EXPR	3620:12	3620:27	17	( * bufferoffset ) ++
LEAF_NODE	3620:12	3620:12	18	(
UNARY_EXPR	3620:13	3620:14	18	* bufferoffset
UNARY_OPERATOR	3620:13	3620:13	19	*
LEAF_NODE	3620:13	3620:13	20	*
FIELD	3620:14	3620:14	19	bufferoffset
LEAF_NODE	3620:14	3620:14	20	bufferoffset
LEAF_NODE	3620:26	3620:26	18	)
LEAF_NODE	3620:27	3620:27	18	++
LEAF_NODE	3620:29	3620:29	17	]
ASSIGN_OP	3620:30	3620:30	15	=
LEAF_NODE	3620:30	3620:30	16	=
RVAL	3621:44	3621:77	15	( unsigned char ) ( 0xd0 | ( ( no - 1 ) % 8 ) )
LEAF_NODE	3621:44	3621:44	16	(
TYPE_NAME	3621:45	3621:54	16	unsigned char
LEAF_NODE	3621:45	3621:45	17	unsigned
LEAF_NODE	3621:54	3621:54	17	char
LEAF_NODE	3621:58	3621:58	16	)
LEAF_NODE	3621:59	3621:59	16	(
BIT_OR	3621:60	3621:67	16	0xd0 | ( ( no - 1 ) % 8 )
BIT_OR_ELEM	3621:60	3621:60	17	0xd0
FIELD	3621:60	3621:60	18	0xd0
LEAF_NODE	3621:60	3621:60	19	0xd0
LEAF_NODE	3621:65	3621:65	17	|
BIT_OR_ELEM	3621:67	3621:76	17	( ( no - 1 ) % 8 )
LEAF_NODE	3621:67	3621:67	18	(
LEAF_NODE	3621:68	3621:68	18	(
FIELD	3621:69	3621:69	18	no
LEAF_NODE	3621:69	3621:69	19	no
LEAF_NODE	3621:71	3621:71	18	-
FIELD	3621:72	3621:72	18	1
LEAF_NODE	3621:72	3621:72	19	1
LEAF_NODE	3621:73	3621:73	18	)
LEAF_NODE	3621:74	3621:74	18	%
FIELD	3621:75	3621:75	18	8
LEAF_NODE	3621:75	3621:75	19	8
LEAF_NODE	3621:76	3621:76	18	)
LEAF_NODE	3621:77	3621:77	16	)
LEAF_NODE	3621:78	3621:78	13	;
LEAF_NODE	3622:4	3622:4	11	}
EXPR_STATEMENT	3623:4	3623:20	9	i += datalen + 1 ;
EXPR	3623:4	3623:4	10	i += datalen + 1
ASSIGN	3623:4	3623:9	11	i += datalen + 1
LVAL	3623:4	3623:4	12	i
FIELD	3623:4	3623:4	13	i
LEAF_NODE	3623:4	3623:4	14	i
ASSIGN_OP	3623:6	3623:6	12	+=
LEAF_NODE	3623:6	3623:6	13	+=
RVAL	3623:9	3623:19	12	datalen + 1
FIELD	3623:9	3623:9	13	datalen
LEAF_NODE	3623:9	3623:9	14	datalen
LEAF_NODE	3623:17	3623:17	13	+
FIELD	3623:19	3623:19	13	1
LEAF_NODE	3623:19	3623:19	14	1
LEAF_NODE	3623:20	3623:20	10	;
SELECTION	3625:16	3626:20	9	
KEYWORD	3625:16	3625:16	10	if
LEAF_NODE	3625:16	3625:16	11	if
LEAF_NODE	3625:18	3625:18	10	(
CONDITION	3625:20	3625:20	10	* bufferoffset + * striplength - i > buffersize
EXPR	3625:20	3625:55	11	* bufferoffset + * striplength - i > buffersize
UNARY_EXPR	3625:20	3625:21	12	* bufferoffset
UNARY_OPERATOR	3625:20	3625:20	13	*
LEAF_NODE	3625:20	3625:20	14	*
FIELD	3625:21	3625:21	13	bufferoffset
LEAF_NODE	3625:21	3625:21	14	bufferoffset
LEAF_NODE	3625:34	3625:34	12	+
UNARY_EXPR	3625:36	3625:37	12	* striplength
UNARY_OPERATOR	3625:36	3625:36	13	*
LEAF_NODE	3625:36	3625:36	14	*
FIELD	3625:37	3625:37	13	striplength
LEAF_NODE	3625:37	3625:37	14	striplength
LEAF_NODE	3625:49	3625:49	12	-
FIELD	3625:51	3625:51	12	i
LEAF_NODE	3625:51	3625:51	13	i
REL_OPERATOR	3625:53	3625:53	12	>
LEAF_NODE	3625:53	3625:53	13	>
FIELD	3625:55	3625:55	12	buffersize
LEAF_NODE	3625:55	3625:55	13	buffersize
LEAF_NODE	3625:66	3625:66	10	)
STATEMENTS	3626:20	3626:20	10	
JUMP_STATEMENT	3626:20	3626:29	11	return ( 0 ) ;
KEYWORD	3626:20	3626:20	12	return
LEAF_NODE	3626:20	3626:20	13	return
DESTINATION	3626:26	3626:26	12	( 0 )
EXPR	3626:26	3626:28	13	( 0 )
LEAF_NODE	3626:26	3626:26	14	(
FIELD	3626:27	3626:27	14	0
LEAF_NODE	3626:27	3626:27	15	0
LEAF_NODE	3626:28	3626:28	14	)
LEAF_NODE	3626:29	3626:29	12	;
EXPR_STATEMENT	3627:4	3627:72	9	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i ] ) , * striplength - i ) ;
EXPR	3627:4	3627:4	10	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i ] ) , * striplength - i )
FUNCTION_CALL	3627:4	3627:71	11	_TIFFmemcpy ( & ( buffer [ * bufferoffset ] ) , & ( strip [ i ] ) , * striplength - i )
CALLEE	3627:4	3627:4	12	_TIFFmemcpy
LEAF_NODE	3627:4	3627:4	13	_TIFFmemcpy
LEAF_NODE	3627:15	3627:15	12	(
ARGUMENT	3627:16	3627:16	12	& ( buffer [ * bufferoffset ] )
UNARY_EXPR	3627:16	3627:39	13	& ( buffer [ * bufferoffset ] )
UNARY_OPERATOR	3627:16	3627:16	14	&
LEAF_NODE	3627:16	3627:16	15	&
LEAF_NODE	3627:17	3627:17	14	(
FIELD	3627:18	3627:38	14	buffer [ * bufferoffset ]
LEAF_NODE	3627:18	3627:18	15	buffer
LEAF_NODE	3627:24	3627:24	15	[
EXPR	3627:25	3627:25	15	* bufferoffset
UNARY_EXPR	3627:25	3627:26	16	* bufferoffset
UNARY_OPERATOR	3627:25	3627:25	17	*
LEAF_NODE	3627:25	3627:25	18	*
FIELD	3627:26	3627:26	17	bufferoffset
LEAF_NODE	3627:26	3627:26	18	bufferoffset
LEAF_NODE	3627:38	3627:38	15	]
LEAF_NODE	3627:39	3627:39	14	)
LEAF_NODE	3627:40	3627:40	12	,
ARGUMENT	3627:42	3627:42	12	& ( strip [ i ] )
UNARY_EXPR	3627:42	3627:52	13	& ( strip [ i ] )
UNARY_OPERATOR	3627:42	3627:42	14	&
LEAF_NODE	3627:42	3627:42	15	&
LEAF_NODE	3627:43	3627:43	14	(
FIELD	3627:44	3627:51	14	strip [ i ]
LEAF_NODE	3627:44	3627:44	15	strip
LEAF_NODE	3627:49	3627:49	15	[
EXPR	3627:50	3627:50	15	i
FIELD	3627:50	3627:50	16	i
LEAF_NODE	3627:50	3627:50	17	i
LEAF_NODE	3627:51	3627:51	15	]
LEAF_NODE	3627:52	3627:52	14	)
LEAF_NODE	3627:53	3627:53	12	,
ARGUMENT	3627:55	3627:70	12	* striplength - i
UNARY_EXPR	3627:55	3627:56	13	* striplength
UNARY_OPERATOR	3627:55	3627:55	14	*
LEAF_NODE	3627:55	3627:55	15	*
FIELD	3627:56	3627:56	14	striplength
LEAF_NODE	3627:56	3627:56	15	striplength
LEAF_NODE	3627:68	3627:68	13	-
FIELD	3627:70	3627:70	13	i
LEAF_NODE	3627:70	3627:70	14	i
LEAF_NODE	3627:71	3627:71	12	)
LEAF_NODE	3627:72	3627:72	10	;
EXPR_STATEMENT	3628:4	3628:36	9	* bufferoffset += * striplength - i ;
EXPR	3628:4	3628:4	10	* bufferoffset += * striplength - i
ASSIGN	3628:4	3628:20	11	* bufferoffset += * striplength - i
LVAL	3628:4	3628:4	12	* bufferoffset
UNARY_EXPR	3628:4	3628:5	13	* bufferoffset
UNARY_OPERATOR	3628:4	3628:4	14	*
LEAF_NODE	3628:4	3628:4	15	*
FIELD	3628:5	3628:5	14	bufferoffset
LEAF_NODE	3628:5	3628:5	15	bufferoffset
ASSIGN_OP	3628:17	3628:17	12	+=
LEAF_NODE	3628:17	3628:17	13	+=
RVAL	3628:20	3628:35	12	* striplength - i
UNARY_EXPR	3628:20	3628:21	13	* striplength
UNARY_OPERATOR	3628:20	3628:20	14	*
LEAF_NODE	3628:20	3628:20	15	*
FIELD	3628:21	3628:21	14	striplength
LEAF_NODE	3628:21	3628:21	15	striplength
LEAF_NODE	3628:33	3628:33	13	-
FIELD	3628:35	3628:35	13	i
LEAF_NODE	3628:35	3628:35	14	i
LEAF_NODE	3628:36	3628:36	10	;
JUMP_STATEMENT	3629:4	3629:13	9	return ( 1 ) ;
KEYWORD	3629:4	3629:4	10	return
LEAF_NODE	3629:4	3629:4	11	return
DESTINATION	3629:10	3629:10	10	( 1 )
EXPR	3629:10	3629:12	11	( 1 )
LEAF_NODE	3629:10	3629:10	12	(
FIELD	3629:11	3629:11	12	1
LEAF_NODE	3629:11	3629:11	13	1
LEAF_NODE	3629:12	3629:12	12	)
LEAF_NODE	3629:13	3629:13	10	;
LABEL	3630:3	3630:10	9	default :
LEAF_NODE	3630:3	3630:3	10	default
LEAF_NODE	3630:10	3630:10	10	:
JUMP_STATEMENT	3632:4	3632:9	9	break DESTINATION ;
KEYWORD	3632:4	3632:4	10	break
LEAF_NODE	3632:4	3632:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3632:9	3632:9	10	;
LEAF_NODE	3633:2	3633:2	8	}
EXPR_STATEMENT	3634:2	3634:18	6	i += datalen + 1 ;
EXPR	3634:2	3634:2	7	i += datalen + 1
ASSIGN	3634:2	3634:7	8	i += datalen + 1
LVAL	3634:2	3634:2	9	i
FIELD	3634:2	3634:2	10	i
LEAF_NODE	3634:2	3634:2	11	i
ASSIGN_OP	3634:4	3634:4	9	+=
LEAF_NODE	3634:4	3634:4	10	+=
RVAL	3634:7	3634:17	9	datalen + 1
FIELD	3634:7	3634:7	10	datalen
LEAF_NODE	3634:7	3634:7	11	datalen
LEAF_NODE	3634:15	3634:15	10	+
FIELD	3634:17	3634:17	10	1
LEAF_NODE	3634:17	3634:17	11	1
LEAF_NODE	3634:18	3634:18	7	;
LEAF_NODE	3635:1	3635:1	5	}
JUMP_STATEMENT	3638:1	3638:10	3	return ( 0 ) ;
KEYWORD	3638:1	3638:1	4	return
LEAF_NODE	3638:1	3638:1	5	return
DESTINATION	3638:7	3638:7	4	( 0 )
EXPR	3638:7	3638:9	5	( 0 )
LEAF_NODE	3638:7	3638:7	6	(
FIELD	3638:8	3638:8	6	0
LEAF_NODE	3638:8	3638:8	7	0
LEAF_NODE	3638:9	3638:9	6	)
LEAF_NODE	3638:10	3638:10	4	;
LEAF_NODE	3639:0	3639:0	2	}
FUNCTION_DEF	3646:0	3666:0	1	
RETURN_TYPE	3646:0	3646:0	2	void
TYPE_NAME	3646:0	3646:0	3	void
LEAF_NODE	3646:0	3646:0	4	void
FUNCTION_NAME	3646:5	3646:5	2	t2p_tile_collapse_left
LEAF_NODE	3646:5	3646:5	3	t2p_tile_collapse_left
PARAMETER_LIST	3646:27	3651:18	2	( tdata_t buffer , tsize_t scanwidth , uint32 tilewidth , uint32 edgetilewidth , uint32 tilelength )
LEAF_NODE	3646:27	3646:27	3	(
PARAMETER_DECL	3647:1	3647:9	3	tdata_t buffer
TYPE	3647:1	3647:1	4	tdata_t
TYPE_NAME	3647:1	3647:1	5	tdata_t
LEAF_NODE	3647:1	3647:1	6	tdata_t
NAME	3647:9	3647:9	4	buffer
LEAF_NODE	3647:9	3647:9	5	buffer
LEAF_NODE	3647:15	3647:15	3	,
PARAMETER_DECL	3648:1	3648:9	3	tsize_t scanwidth
TYPE	3648:1	3648:1	4	tsize_t
TYPE_NAME	3648:1	3648:1	5	tsize_t
LEAF_NODE	3648:1	3648:1	6	tsize_t
NAME	3648:9	3648:9	4	scanwidth
LEAF_NODE	3648:9	3648:9	5	scanwidth
LEAF_NODE	3648:18	3648:18	3	,
PARAMETER_DECL	3649:1	3649:8	3	uint32 tilewidth
TYPE	3649:1	3649:1	4	uint32
TYPE_NAME	3649:1	3649:1	5	uint32
LEAF_NODE	3649:1	3649:1	6	uint32
NAME	3649:8	3649:8	4	tilewidth
LEAF_NODE	3649:8	3649:8	5	tilewidth
LEAF_NODE	3649:17	3649:17	3	,
PARAMETER_DECL	3650:1	3650:8	3	uint32 edgetilewidth
TYPE	3650:1	3650:1	4	uint32
TYPE_NAME	3650:1	3650:1	5	uint32
LEAF_NODE	3650:1	3650:1	6	uint32
NAME	3650:8	3650:8	4	edgetilewidth
LEAF_NODE	3650:8	3650:8	5	edgetilewidth
LEAF_NODE	3650:21	3650:21	3	,
PARAMETER_DECL	3651:1	3651:8	3	uint32 tilelength
TYPE	3651:1	3651:1	4	uint32
TYPE_NAME	3651:1	3651:1	5	uint32
LEAF_NODE	3651:1	3651:1	6	uint32
NAME	3651:8	3651:8	4	tilelength
LEAF_NODE	3651:8	3651:8	5	tilelength
LEAF_NODE	3651:18	3651:18	3	)
LEAF_NODE	3651:19	3651:19	2	{
STATEMENTS	3653:1	3665:1	2	
SIMPLE_DECL	3653:1	3653:9	3	uint32 i ;
VAR_DECL	3653:1	3653:8	4	uint32 i
TYPE	3653:1	3653:1	5	uint32
TYPE_NAME	3653:1	3653:1	6	uint32
LEAF_NODE	3653:1	3653:1	7	uint32
NAME	3653:8	3653:8	5	i
LEAF_NODE	3653:8	3653:8	6	i
LEAF_NODE	3653:9	3653:9	4	;
SIMPLE_DECL	3654:1	3654:24	3	tsize_t edgescanwidth ; edgescanwidth = 0 ;
VAR_DECL	3654:1	3654:9	4	tsize_t edgescanwidth ; edgescanwidth = 0
TYPE	3654:1	3654:1	5	tsize_t
TYPE_NAME	3654:1	3654:1	6	tsize_t
LEAF_NODE	3654:1	3654:1	7	tsize_t
NAME	3654:9	3654:9	5	edgescanwidth
LEAF_NODE	3654:9	3654:9	6	edgescanwidth
LEAF_NODE	0:0	0:0	5	;
INIT	3654:9	3654:9	5	edgescanwidth = 0
ASSIGN	3654:9	3654:23	6	edgescanwidth = 0
LVAL	3654:9	3654:9	7	edgescanwidth
NAME	3654:9	3654:9	8	edgescanwidth
LEAF_NODE	3654:9	3654:9	9	edgescanwidth
ASSIGN_OP	3654:22	3654:22	7	=
LEAF_NODE	3654:22	3654:22	8	=
RVAL	3654:23	3654:23	7	0
FIELD	3654:23	3654:23	8	0
LEAF_NODE	3654:23	3654:23	9	0
LEAF_NODE	3654:24	3654:24	4	;
EXPR_STATEMENT	3656:1	3656:73	3	edgescanwidth = ( scanwidth * edgetilewidth + ( tilewidth - 1 ) ) / tilewidth ;
EXPR	3656:1	3656:1	4	edgescanwidth = ( scanwidth * edgetilewidth + ( tilewidth - 1 ) ) / tilewidth
ASSIGN	3656:1	3656:17	5	edgescanwidth = ( scanwidth * edgetilewidth + ( tilewidth - 1 ) ) / tilewidth
LVAL	3656:1	3656:1	6	edgescanwidth
FIELD	3656:1	3656:1	7	edgescanwidth
LEAF_NODE	3656:1	3656:1	8	edgescanwidth
ASSIGN_OP	3656:15	3656:15	6	=
LEAF_NODE	3656:15	3656:15	7	=
RVAL	3656:17	3656:64	6	( scanwidth * edgetilewidth + ( tilewidth - 1 ) ) / tilewidth
LEAF_NODE	3656:17	3656:17	7	(
FIELD	3656:18	3656:18	7	scanwidth
LEAF_NODE	3656:18	3656:18	8	scanwidth
LEAF_NODE	3656:28	3656:28	7	*
FIELD	3656:30	3656:30	7	edgetilewidth
LEAF_NODE	3656:30	3656:30	8	edgetilewidth
LEAF_NODE	3656:44	3656:44	7	+
LEAF_NODE	3656:46	3656:46	7	(
FIELD	3656:47	3656:47	7	tilewidth
LEAF_NODE	3656:47	3656:47	8	tilewidth
LEAF_NODE	3656:57	3656:57	7	-
FIELD	3656:59	3656:59	7	1
LEAF_NODE	3656:59	3656:59	8	1
LEAF_NODE	3656:60	3656:60	7	)
LEAF_NODE	3656:61	3656:61	7	)
LEAF_NODE	3656:62	3656:62	7	/
FIELD	3656:64	3656:64	7	tilewidth
LEAF_NODE	3656:64	3656:64	8	tilewidth
LEAF_NODE	3656:73	3656:73	4	;
ITERATION	3657:1	3657:26	3	
KEYWORD	3657:1	3657:1	4	for
LEAF_NODE	3657:1	3657:1	5	for
LEAF_NODE	3657:4	3657:4	4	(
FOR_INIT	3657:5	3657:8	4	i = 0 ;
EXPR	3657:5	3657:5	5	i = 0
ASSIGN	3657:5	3657:7	6	i = 0
LVAL	3657:5	3657:5	7	i
FIELD	3657:5	3657:5	8	i
LEAF_NODE	3657:5	3657:5	9	i
ASSIGN_OP	3657:6	3657:6	7	=
LEAF_NODE	3657:6	3657:6	8	=
RVAL	3657:7	3657:7	7	0
FIELD	3657:7	3657:7	8	0
LEAF_NODE	3657:7	3657:7	9	0
LEAF_NODE	3657:8	3657:8	5	;
CONDITION	3657:9	3657:9	4	i < tilelength
EXPR	3657:9	3657:11	5	i < tilelength
FIELD	3657:9	3657:9	6	i
LEAF_NODE	3657:9	3657:9	7	i
REL_OPERATOR	3657:10	3657:10	6	<
LEAF_NODE	3657:10	3657:10	7	<
FIELD	3657:11	3657:11	6	tilelength
LEAF_NODE	3657:11	3657:11	7	tilelength
LEAF_NODE	3657:21	3657:21	4	;
FOR_EXPR	3657:22	3657:22	4	i ++
EXPR	3657:22	3657:22	5	i ++
FIELD	3657:22	3657:23	6	i ++
LEAF_NODE	3657:22	3657:22	7	i
LEAF_NODE	3657:23	3657:23	7	++
LEAF_NODE	3657:25	3657:25	4	)
STATEMENTS	3657:26	3663:1	4	
LEAF_NODE	3657:26	3657:26	5	{
STATEMENTS	3659:2	3659:2	5	
EXPR_STATEMENT	3659:2	3662:17	6	memmove ( & ( ( ( char * ) buffer ) [ edgescanwidth * i ] ) , & ( ( ( char * ) buffer ) [ scanwidth * i ] ) , edgescanwidth ) ;
EXPR	3659:2	3659:2	7	memmove ( & ( ( ( char * ) buffer ) [ edgescanwidth * i ] ) , & ( ( ( char * ) buffer ) [ scanwidth * i ] ) , edgescanwidth )
FUNCTION_CALL	3659:2	3662:16	8	memmove ( & ( ( ( char * ) buffer ) [ edgescanwidth * i ] ) , & ( ( ( char * ) buffer ) [ scanwidth * i ] ) , edgescanwidth )
CALLEE	3659:2	3659:2	9	memmove
LEAF_NODE	3659:2	3659:2	10	memmove
LEAF_NODE	3659:9	3659:9	9	(
ARGUMENT	3660:3	3660:3	9	& ( ( ( char * ) buffer ) [ edgescanwidth * i ] )
UNARY_EXPR	3660:3	3660:37	10	& ( ( ( char * ) buffer ) [ edgescanwidth * i ] )
UNARY_OPERATOR	3660:3	3660:3	11	&
LEAF_NODE	3660:3	3660:3	12	&
LEAF_NODE	3660:4	3660:4	11	(
LEAF_NODE	3660:5	3660:5	11	(
LEAF_NODE	3660:6	3660:6	11	(
TYPE_NAME	3660:7	3660:7	11	char
LEAF_NODE	3660:7	3660:7	12	char
LEAF_NODE	3660:11	3660:11	11	*
LEAF_NODE	3660:12	3660:12	11	)
FIELD	3660:13	3660:13	11	buffer
LEAF_NODE	3660:13	3660:13	12	buffer
LEAF_NODE	3660:19	3660:19	11	)
LEAF_NODE	3660:20	3660:20	11	[
EXPR	3660:21	3660:35	11	edgescanwidth * i
FIELD	3660:21	3660:21	12	edgescanwidth
LEAF_NODE	3660:21	3660:21	13	edgescanwidth
LEAF_NODE	3660:34	3660:34	12	*
FIELD	3660:35	3660:35	12	i
LEAF_NODE	3660:35	3660:35	13	i
LEAF_NODE	3660:36	3660:36	11	]
LEAF_NODE	3660:37	3660:37	11	)
LEAF_NODE	3660:38	3660:38	9	,
ARGUMENT	3661:3	3661:3	9	& ( ( ( char * ) buffer ) [ scanwidth * i ] )
UNARY_EXPR	3661:3	3661:33	10	& ( ( ( char * ) buffer ) [ scanwidth * i ] )
UNARY_OPERATOR	3661:3	3661:3	11	&
LEAF_NODE	3661:3	3661:3	12	&
LEAF_NODE	3661:4	3661:4	11	(
LEAF_NODE	3661:5	3661:5	11	(
LEAF_NODE	3661:6	3661:6	11	(
TYPE_NAME	3661:7	3661:7	11	char
LEAF_NODE	3661:7	3661:7	12	char
LEAF_NODE	3661:11	3661:11	11	*
LEAF_NODE	3661:12	3661:12	11	)
FIELD	3661:13	3661:13	11	buffer
LEAF_NODE	3661:13	3661:13	12	buffer
LEAF_NODE	3661:19	3661:19	11	)
LEAF_NODE	3661:20	3661:20	11	[
EXPR	3661:21	3661:31	11	scanwidth * i
FIELD	3661:21	3661:21	12	scanwidth
LEAF_NODE	3661:21	3661:21	13	scanwidth
LEAF_NODE	3661:30	3661:30	12	*
FIELD	3661:31	3661:31	12	i
LEAF_NODE	3661:31	3661:31	13	i
LEAF_NODE	3661:32	3661:32	11	]
LEAF_NODE	3661:33	3661:33	11	)
LEAF_NODE	3661:34	3661:34	9	,
ARGUMENT	3662:3	3662:3	9	edgescanwidth
FIELD	3662:3	3662:3	10	edgescanwidth
LEAF_NODE	3662:3	3662:3	11	edgescanwidth
LEAF_NODE	3662:16	3662:16	9	)
LEAF_NODE	3662:17	3662:17	7	;
LEAF_NODE	3663:1	3663:1	5	}
JUMP_STATEMENT	3665:1	3665:7	3	return DESTINATION ;
KEYWORD	3665:1	3665:1	4	return
LEAF_NODE	3665:1	3665:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	3665:7	3665:7	4	;
LEAF_NODE	3666:0	3666:0	2	}
FUNCTION_DEF	3675:0	3688:0	1	
RETURN_TYPE	3675:0	3675:0	2	void
TYPE_NAME	3675:0	3675:0	3	void
LEAF_NODE	3675:0	3675:0	4	void
FUNCTION_NAME	3676:0	3676:0	2	t2p_write_advance_directory
LEAF_NODE	3676:0	3676:0	3	t2p_write_advance_directory
PARAMETER_LIST	3676:27	3676:50	2	( T2P * t2p , TIFF * output )
LEAF_NODE	3676:27	3676:27	3	(
PARAMETER_DECL	3676:28	3676:33	3	T2P * t2p
TYPE	3676:28	3676:31	4	T2P *
TYPE_NAME	3676:28	3676:28	5	T2P
LEAF_NODE	3676:28	3676:28	6	T2P
POINTER	3676:31	3676:31	5	*
LEAF_NODE	3676:31	3676:31	6	*
NAME	3676:33	3676:33	4	t2p
LEAF_NODE	3676:33	3676:33	5	t2p
LEAF_NODE	3676:36	3676:36	3	,
PARAMETER_DECL	3676:38	3676:44	3	TIFF * output
TYPE	3676:38	3676:42	4	TIFF *
TYPE_NAME	3676:38	3676:38	5	TIFF
LEAF_NODE	3676:38	3676:38	6	TIFF
POINTER	3676:42	3676:42	5	*
LEAF_NODE	3676:42	3676:42	6	*
NAME	3676:44	3676:44	4	output
LEAF_NODE	3676:44	3676:44	5	output
LEAF_NODE	3676:50	3676:50	3	)
LEAF_NODE	3677:0	3677:0	2	{
STATEMENTS	3678:1	3687:1	2	
EXPR_STATEMENT	3678:1	3678:20	3	t2p_disable ( output ) ;
EXPR	3678:1	3678:1	4	t2p_disable ( output )
FUNCTION_CALL	3678:1	3678:19	5	t2p_disable ( output )
CALLEE	3678:1	3678:1	6	t2p_disable
LEAF_NODE	3678:1	3678:1	7	t2p_disable
LEAF_NODE	3678:12	3678:12	6	(
ARGUMENT	3678:13	3678:13	6	output
FIELD	3678:13	3678:13	7	output
LEAF_NODE	3678:13	3678:13	8	output
LEAF_NODE	3678:19	3678:19	6	)
LEAF_NODE	3678:20	3678:20	4	;
SELECTION	3679:1	3679:32	3	
KEYWORD	3679:1	3679:1	4	if
LEAF_NODE	3679:1	3679:1	5	if
LEAF_NODE	3679:3	3679:3	4	(
CONDITION	3679:4	3679:4	4	! TIFFWriteDirectory ( output )
EXPR	3679:4	3679:4	5	! TIFFWriteDirectory ( output )
UNARY_EXPR	3679:4	3679:5	6	! TIFFWriteDirectory ( output )
UNARY_OPERATOR	3679:4	3679:4	7	!
LEAF_NODE	3679:4	3679:4	8	!
FUNCTION_CALL	3679:5	3679:30	7	TIFFWriteDirectory ( output )
CALLEE	3679:5	3679:5	8	TIFFWriteDirectory
LEAF_NODE	3679:5	3679:5	9	TIFFWriteDirectory
LEAF_NODE	3679:23	3679:23	8	(
ARGUMENT	3679:24	3679:24	8	output
FIELD	3679:24	3679:24	9	output
LEAF_NODE	3679:24	3679:24	10	output
LEAF_NODE	3679:30	3679:30	8	)
LEAF_NODE	3679:31	3679:31	4	)
STATEMENTS	3679:32	3685:1	4	
LEAF_NODE	3679:32	3679:32	5	{
STATEMENTS	3680:2	3684:2	5	
EXPR_STATEMENT	3680:2	3682:24	6	TIFFError ( TIFF2PDF_MODULE , "Error writing virtual directory to output PDF %s" , TIFFFileName ( output ) ) ;
EXPR	3680:2	3680:2	7	TIFFError ( TIFF2PDF_MODULE , "Error writing virtual directory to output PDF %s" , TIFFFileName ( output ) )
FUNCTION_CALL	3680:2	3682:23	8	TIFFError ( TIFF2PDF_MODULE , "Error writing virtual directory to output PDF %s" , TIFFFileName ( output ) )
CALLEE	3680:2	3680:2	9	TIFFError
LEAF_NODE	3680:2	3680:2	10	TIFFError
LEAF_NODE	3680:11	3680:11	9	(
ARGUMENT	3680:12	3680:12	9	TIFF2PDF_MODULE
FIELD	3680:12	3680:12	10	TIFF2PDF_MODULE
LEAF_NODE	3680:12	3680:12	11	TIFF2PDF_MODULE
LEAF_NODE	3680:27	3680:27	9	,
ARGUMENT	3681:3	3681:3	9	"Error writing virtual directory to output PDF %s"
FIELD	3681:3	3681:3	10	"Error writing virtual directory to output PDF %s"
LEAF_NODE	3681:3	3681:3	11	"Error writing virtual directory to output PDF %s"
LEAF_NODE	3681:53	3681:53	9	,
ARGUMENT	3682:3	3682:3	9	TIFFFileName ( output )
FUNCTION_CALL	3682:3	3682:22	10	TIFFFileName ( output )
CALLEE	3682:3	3682:3	11	TIFFFileName
LEAF_NODE	3682:3	3682:3	12	TIFFFileName
LEAF_NODE	3682:15	3682:15	11	(
ARGUMENT	3682:16	3682:16	11	output
FIELD	3682:16	3682:16	12	output
LEAF_NODE	3682:16	3682:16	13	output
LEAF_NODE	3682:22	3682:22	11	)
LEAF_NODE	3682:23	3682:23	9	)
LEAF_NODE	3682:24	3682:24	7	;
EXPR_STATEMENT	3683:2	3683:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3683:2	3683:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3683:2	3683:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3683:2	3683:2	9	t2p -> t2p_error
FIELD	3683:2	3683:7	10	t2p -> t2p_error
LEAF_NODE	3683:2	3683:2	11	t2p
LEAF_NODE	3683:5	3683:5	11	->
LEAF_NODE	3683:7	3683:7	11	t2p_error
ASSIGN_OP	3683:17	3683:17	9	=
LEAF_NODE	3683:17	3683:17	10	=
RVAL	3683:19	3683:19	9	T2P_ERR_ERROR
FIELD	3683:19	3683:19	10	T2P_ERR_ERROR
LEAF_NODE	3683:19	3683:19	11	T2P_ERR_ERROR
LEAF_NODE	3683:32	3683:32	7	;
JUMP_STATEMENT	3684:2	3684:8	6	return DESTINATION ;
KEYWORD	3684:2	3684:2	7	return
LEAF_NODE	3684:2	3684:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	3684:8	3684:8	7	;
LEAF_NODE	3685:1	3685:1	5	}
EXPR_STATEMENT	3686:1	3686:19	3	t2p_enable ( output ) ;
EXPR	3686:1	3686:1	4	t2p_enable ( output )
FUNCTION_CALL	3686:1	3686:18	5	t2p_enable ( output )
CALLEE	3686:1	3686:1	6	t2p_enable
LEAF_NODE	3686:1	3686:1	7	t2p_enable
LEAF_NODE	3686:11	3686:11	6	(
ARGUMENT	3686:12	3686:12	6	output
FIELD	3686:12	3686:12	7	output
LEAF_NODE	3686:12	3686:12	8	output
LEAF_NODE	3686:18	3686:18	6	)
LEAF_NODE	3686:19	3686:19	4	;
JUMP_STATEMENT	3687:1	3687:7	3	return DESTINATION ;
KEYWORD	3687:1	3687:1	4	return
LEAF_NODE	3687:1	3687:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	3687:7	3687:7	4	;
LEAF_NODE	3688:0	3688:0	2	}
FUNCTION_DEF	3690:0	3708:0	1	
RETURN_TYPE	3690:0	3690:0	2	tsize_t
TYPE_NAME	3690:0	3690:0	3	tsize_t
LEAF_NODE	3690:0	3690:0	4	tsize_t
FUNCTION_NAME	3690:8	3690:8	2	t2p_sample_planar_separate_to_contig
LEAF_NODE	3690:8	3690:8	3	t2p_sample_planar_separate_to_contig
PARAMETER_LIST	3690:44	3694:35	2	( T2P * t2p , unsigned char * buffer , unsigned char * samplebuffer , tsize_t samplebuffersize )
LEAF_NODE	3690:44	3690:44	3	(
PARAMETER_DECL	3691:11	3691:16	3	T2P * t2p
TYPE	3691:11	3691:14	4	T2P *
TYPE_NAME	3691:11	3691:11	5	T2P
LEAF_NODE	3691:11	3691:11	6	T2P
POINTER	3691:14	3691:14	5	*
LEAF_NODE	3691:14	3691:14	6	*
NAME	3691:16	3691:16	4	t2p
LEAF_NODE	3691:16	3691:16	5	t2p
LEAF_NODE	3691:19	3691:19	3	,
PARAMETER_DECL	3692:11	3692:26	3	unsigned char * buffer
TYPE	3692:11	3692:24	4	unsigned char *
TYPE_NAME	3692:11	3692:20	5	unsigned char
LEAF_NODE	3692:11	3692:11	6	unsigned
LEAF_NODE	3692:20	3692:20	6	char
POINTER	3692:24	3692:24	5	*
LEAF_NODE	3692:24	3692:24	6	*
NAME	3692:26	3692:26	4	buffer
LEAF_NODE	3692:26	3692:26	5	buffer
LEAF_NODE	3692:32	3692:32	3	,
PARAMETER_DECL	3693:11	3693:26	3	unsigned char * samplebuffer
TYPE	3693:11	3693:24	4	unsigned char *
TYPE_NAME	3693:11	3693:20	5	unsigned char
LEAF_NODE	3693:11	3693:11	6	unsigned
LEAF_NODE	3693:20	3693:20	6	char
POINTER	3693:24	3693:24	5	*
LEAF_NODE	3693:24	3693:24	6	*
NAME	3693:26	3693:26	4	samplebuffer
LEAF_NODE	3693:26	3693:26	5	samplebuffer
LEAF_NODE	3693:38	3693:38	3	,
PARAMETER_DECL	3694:11	3694:19	3	tsize_t samplebuffersize
TYPE	3694:11	3694:11	4	tsize_t
TYPE_NAME	3694:11	3694:11	5	tsize_t
LEAF_NODE	3694:11	3694:11	6	tsize_t
NAME	3694:19	3694:19	4	samplebuffersize
LEAF_NODE	3694:19	3694:19	5	samplebuffersize
LEAF_NODE	3694:35	3694:35	3	)
LEAF_NODE	3694:36	3694:36	2	{
STATEMENTS	3696:1	3707:25	2	
SIMPLE_DECL	3696:1	3696:17	3	tsize_t stride ; stride = 0 ;
VAR_DECL	3696:1	3696:9	4	tsize_t stride ; stride = 0
TYPE	3696:1	3696:1	5	tsize_t
TYPE_NAME	3696:1	3696:1	6	tsize_t
LEAF_NODE	3696:1	3696:1	7	tsize_t
NAME	3696:9	3696:9	5	stride
LEAF_NODE	3696:9	3696:9	6	stride
LEAF_NODE	0:0	0:0	5	;
INIT	3696:9	3696:9	5	stride = 0
ASSIGN	3696:9	3696:16	6	stride = 0
LVAL	3696:9	3696:9	7	stride
NAME	3696:9	3696:9	8	stride
LEAF_NODE	3696:9	3696:9	9	stride
ASSIGN_OP	3696:15	3696:15	7	=
LEAF_NODE	3696:15	3696:15	8	=
RVAL	3696:16	3696:16	7	0
FIELD	3696:16	3696:16	8	0
LEAF_NODE	3696:16	3696:16	9	0
LEAF_NODE	3696:17	3696:17	4	;
SIMPLE_DECL	3697:1	3697:12	3	tsize_t i ; i = 0 ;
VAR_DECL	3697:1	3697:9	4	tsize_t i ; i = 0
TYPE	3697:1	3697:1	5	tsize_t
TYPE_NAME	3697:1	3697:1	6	tsize_t
LEAF_NODE	3697:1	3697:1	7	tsize_t
NAME	3697:9	3697:9	5	i
LEAF_NODE	3697:9	3697:9	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	3697:9	3697:9	5	i = 0
ASSIGN	3697:9	3697:11	6	i = 0
LVAL	3697:9	3697:9	7	i
NAME	3697:9	3697:9	8	i
LEAF_NODE	3697:9	3697:9	9	i
ASSIGN_OP	3697:10	3697:10	7	=
LEAF_NODE	3697:10	3697:10	8	=
RVAL	3697:11	3697:11	7	0
FIELD	3697:11	3697:11	8	0
LEAF_NODE	3697:11	3697:11	9	0
LEAF_NODE	3697:12	3697:12	4	;
SIMPLE_DECL	3698:1	3698:12	3	tsize_t j ; j = 0 ;
VAR_DECL	3698:1	3698:9	4	tsize_t j ; j = 0
TYPE	3698:1	3698:1	5	tsize_t
TYPE_NAME	3698:1	3698:1	6	tsize_t
LEAF_NODE	3698:1	3698:1	7	tsize_t
NAME	3698:9	3698:9	5	j
LEAF_NODE	3698:9	3698:9	6	j
LEAF_NODE	0:0	0:0	5	;
INIT	3698:9	3698:9	5	j = 0
ASSIGN	3698:9	3698:11	6	j = 0
LVAL	3698:9	3698:9	7	j
NAME	3698:9	3698:9	8	j
LEAF_NODE	3698:9	3698:9	9	j
ASSIGN_OP	3698:10	3698:10	7	=
LEAF_NODE	3698:10	3698:10	8	=
RVAL	3698:11	3698:11	7	0
FIELD	3698:11	3698:11	8	0
LEAF_NODE	3698:11	3698:11	9	0
LEAF_NODE	3698:12	3698:12	4	;
EXPR_STATEMENT	3700:1	3700:50	3	stride = samplebuffersize / t2p -> tiff_samplesperpixel ;
EXPR	3700:1	3700:1	4	stride = samplebuffersize / t2p -> tiff_samplesperpixel
ASSIGN	3700:1	3700:8	5	stride = samplebuffersize / t2p -> tiff_samplesperpixel
LVAL	3700:1	3700:1	6	stride
FIELD	3700:1	3700:1	7	stride
LEAF_NODE	3700:1	3700:1	8	stride
ASSIGN_OP	3700:7	3700:7	6	=
LEAF_NODE	3700:7	3700:7	7	=
RVAL	3700:8	3700:25	6	samplebuffersize / t2p -> tiff_samplesperpixel
FIELD	3700:8	3700:8	7	samplebuffersize
LEAF_NODE	3700:8	3700:8	8	samplebuffersize
LEAF_NODE	3700:24	3700:24	7	/
FIELD	3700:25	3700:30	7	t2p -> tiff_samplesperpixel
LEAF_NODE	3700:25	3700:25	8	t2p
LEAF_NODE	3700:28	3700:28	8	->
LEAF_NODE	3700:30	3700:30	8	tiff_samplesperpixel
LEAF_NODE	3700:50	3700:50	4	;
ITERATION	3701:1	3701:22	3	
KEYWORD	3701:1	3701:1	4	for
LEAF_NODE	3701:1	3701:1	5	for
LEAF_NODE	3701:4	3701:4	4	(
FOR_INIT	3701:5	3701:8	4	i = 0 ;
EXPR	3701:5	3701:5	5	i = 0
ASSIGN	3701:5	3701:7	6	i = 0
LVAL	3701:5	3701:5	7	i
FIELD	3701:5	3701:5	8	i
LEAF_NODE	3701:5	3701:5	9	i
ASSIGN_OP	3701:6	3701:6	7	=
LEAF_NODE	3701:6	3701:6	8	=
RVAL	3701:7	3701:7	7	0
FIELD	3701:7	3701:7	8	0
LEAF_NODE	3701:7	3701:7	9	0
LEAF_NODE	3701:8	3701:8	5	;
CONDITION	3701:9	3701:9	4	i < stride
EXPR	3701:9	3701:11	5	i < stride
FIELD	3701:9	3701:9	6	i
LEAF_NODE	3701:9	3701:9	7	i
REL_OPERATOR	3701:10	3701:10	6	<
LEAF_NODE	3701:10	3701:10	7	<
FIELD	3701:11	3701:11	6	stride
LEAF_NODE	3701:11	3701:11	7	stride
LEAF_NODE	3701:17	3701:17	4	;
FOR_EXPR	3701:18	3701:18	4	i ++
EXPR	3701:18	3701:18	5	i ++
FIELD	3701:18	3701:19	6	i ++
LEAF_NODE	3701:18	3701:18	7	i
LEAF_NODE	3701:19	3701:19	7	++
LEAF_NODE	3701:21	3701:21	4	)
STATEMENTS	3701:22	3705:1	4	
LEAF_NODE	3701:22	3701:22	5	{
STATEMENTS	3702:2	3702:2	5	
ITERATION	3702:2	3702:42	6	
KEYWORD	3702:2	3702:2	7	for
LEAF_NODE	3702:2	3702:2	8	for
LEAF_NODE	3702:5	3702:5	7	(
FOR_INIT	3702:6	3702:9	7	j = 0 ;
EXPR	3702:6	3702:6	8	j = 0
ASSIGN	3702:6	3702:8	9	j = 0
LVAL	3702:6	3702:6	10	j
FIELD	3702:6	3702:6	11	j
LEAF_NODE	3702:6	3702:6	12	j
ASSIGN_OP	3702:7	3702:7	10	=
LEAF_NODE	3702:7	3702:7	11	=
RVAL	3702:8	3702:8	10	0
FIELD	3702:8	3702:8	11	0
LEAF_NODE	3702:8	3702:8	12	0
LEAF_NODE	3702:9	3702:9	8	;
CONDITION	3702:10	3702:10	7	j < t2p -> tiff_samplesperpixel
EXPR	3702:10	3702:12	8	j < t2p -> tiff_samplesperpixel
FIELD	3702:10	3702:10	9	j
LEAF_NODE	3702:10	3702:10	10	j
REL_OPERATOR	3702:11	3702:11	9	<
LEAF_NODE	3702:11	3702:11	10	<
FIELD	3702:12	3702:17	9	t2p -> tiff_samplesperpixel
LEAF_NODE	3702:12	3702:12	10	t2p
LEAF_NODE	3702:15	3702:15	10	->
LEAF_NODE	3702:17	3702:17	10	tiff_samplesperpixel
LEAF_NODE	3702:37	3702:37	7	;
FOR_EXPR	3702:38	3702:38	7	j ++
EXPR	3702:38	3702:38	8	j ++
FIELD	3702:38	3702:39	9	j ++
LEAF_NODE	3702:38	3702:38	10	j
LEAF_NODE	3702:39	3702:39	10	++
LEAF_NODE	3702:41	3702:41	7	)
STATEMENTS	3702:42	3704:2	7	
LEAF_NODE	3702:42	3702:42	8	{
STATEMENTS	3703:3	3703:3	8	
EXPR_STATEMENT	3703:3	3703:71	9	buffer [ i * t2p -> tiff_samplesperpixel + j ] = samplebuffer [ i + j * stride ] ;
EXPR	3703:3	3703:3	10	buffer [ i * t2p -> tiff_samplesperpixel + j ] = samplebuffer [ i + j * stride ]
ASSIGN	3703:3	3703:45	11	buffer [ i * t2p -> tiff_samplesperpixel + j ] = samplebuffer [ i + j * stride ]
LVAL	3703:3	3703:3	12	buffer [ i * t2p -> tiff_samplesperpixel + j ]
FIELD	3703:3	3703:41	13	buffer [ i * t2p -> tiff_samplesperpixel + j ]
LEAF_NODE	3703:3	3703:3	14	buffer
LEAF_NODE	3703:9	3703:9	14	[
EXPR	3703:10	3703:40	14	i * t2p -> tiff_samplesperpixel + j
FIELD	3703:10	3703:10	15	i
LEAF_NODE	3703:10	3703:10	16	i
LEAF_NODE	3703:11	3703:11	15	*
FIELD	3703:12	3703:17	15	t2p -> tiff_samplesperpixel
LEAF_NODE	3703:12	3703:12	16	t2p
LEAF_NODE	3703:15	3703:15	16	->
LEAF_NODE	3703:17	3703:17	16	tiff_samplesperpixel
LEAF_NODE	3703:38	3703:38	15	+
FIELD	3703:40	3703:40	15	j
LEAF_NODE	3703:40	3703:40	16	j
LEAF_NODE	3703:41	3703:41	14	]
ASSIGN_OP	3703:43	3703:43	12	=
LEAF_NODE	3703:43	3703:43	13	=
RVAL	3703:45	3703:45	12	samplebuffer [ i + j * stride ]
FIELD	3703:45	3703:70	13	samplebuffer [ i + j * stride ]
LEAF_NODE	3703:45	3703:45	14	samplebuffer
LEAF_NODE	3703:57	3703:57	14	[
EXPR	3703:58	3703:64	14	i + j * stride
FIELD	3703:58	3703:58	15	i
LEAF_NODE	3703:58	3703:58	16	i
LEAF_NODE	3703:60	3703:60	15	+
FIELD	3703:62	3703:62	15	j
LEAF_NODE	3703:62	3703:62	16	j
LEAF_NODE	3703:63	3703:63	15	*
FIELD	3703:64	3703:64	15	stride
LEAF_NODE	3703:64	3703:64	16	stride
LEAF_NODE	3703:70	3703:70	14	]
LEAF_NODE	3703:71	3703:71	10	;
LEAF_NODE	3704:2	3704:2	8	}
LEAF_NODE	3705:1	3705:1	5	}
LEAF_NODE	3707:1	3707:1	3	return
LEAF_NODE	3707:7	3707:7	3	(
LEAF_NODE	3707:8	3707:8	3	samplebuffersize
LEAF_NODE	3707:24	3707:24	3	)
LEAF_NODE	3707:25	3707:25	3	;
LEAF_NODE	3708:0	3708:0	2	}
FUNCTION_DEF	3710:0	3740:0	1	
RETURN_TYPE	3710:0	3710:0	2	tsize_t
TYPE_NAME	3710:0	3710:0	3	tsize_t
LEAF_NODE	3710:0	3710:0	4	tsize_t
FUNCTION_NAME	3710:8	3710:8	2	t2p_sample_realize_palette
LEAF_NODE	3710:8	3710:8	3	t2p_sample_realize_palette
PARAMETER_LIST	3710:34	3710:66	2	( T2P * t2p , unsigned char * buffer )
LEAF_NODE	3710:34	3710:34	3	(
PARAMETER_DECL	3710:35	3710:40	3	T2P * t2p
TYPE	3710:35	3710:38	4	T2P *
TYPE_NAME	3710:35	3710:35	5	T2P
LEAF_NODE	3710:35	3710:35	6	T2P
POINTER	3710:38	3710:38	5	*
LEAF_NODE	3710:38	3710:38	6	*
NAME	3710:40	3710:40	4	t2p
LEAF_NODE	3710:40	3710:40	5	t2p
LEAF_NODE	3710:43	3710:43	3	,
PARAMETER_DECL	3710:45	3710:60	3	unsigned char * buffer
TYPE	3710:45	3710:58	4	unsigned char *
TYPE_NAME	3710:45	3710:54	5	unsigned char
LEAF_NODE	3710:45	3710:45	6	unsigned
LEAF_NODE	3710:54	3710:54	6	char
POINTER	3710:58	3710:58	5	*
LEAF_NODE	3710:58	3710:58	6	*
NAME	3710:60	3710:60	4	buffer
LEAF_NODE	3710:60	3710:60	5	buffer
LEAF_NODE	3710:66	3710:66	3	)
LEAF_NODE	3710:67	3710:67	2	{
STATEMENTS	3712:1	3739:1	2	
SIMPLE_DECL	3712:1	3712:22	3	uint32 sample_count ; sample_count = 0 ;
VAR_DECL	3712:1	3712:8	4	uint32 sample_count ; sample_count = 0
TYPE	3712:1	3712:1	5	uint32
TYPE_NAME	3712:1	3712:1	6	uint32
LEAF_NODE	3712:1	3712:1	7	uint32
NAME	3712:8	3712:8	5	sample_count
LEAF_NODE	3712:8	3712:8	6	sample_count
LEAF_NODE	0:0	0:0	5	;
INIT	3712:8	3712:8	5	sample_count = 0
ASSIGN	3712:8	3712:21	6	sample_count = 0
LVAL	3712:8	3712:8	7	sample_count
NAME	3712:8	3712:8	8	sample_count
LEAF_NODE	3712:8	3712:8	9	sample_count
ASSIGN_OP	3712:20	3712:20	7	=
LEAF_NODE	3712:20	3712:20	8	=
RVAL	3712:21	3712:21	7	0
FIELD	3712:21	3712:21	8	0
LEAF_NODE	3712:21	3712:21	9	0
LEAF_NODE	3712:22	3712:22	4	;
SIMPLE_DECL	3713:1	3713:25	3	uint16 component_count ; component_count = 0 ;
VAR_DECL	3713:1	3713:8	4	uint16 component_count ; component_count = 0
TYPE	3713:1	3713:1	5	uint16
TYPE_NAME	3713:1	3713:1	6	uint16
LEAF_NODE	3713:1	3713:1	7	uint16
NAME	3713:8	3713:8	5	component_count
LEAF_NODE	3713:8	3713:8	6	component_count
LEAF_NODE	0:0	0:0	5	;
INIT	3713:8	3713:8	5	component_count = 0
ASSIGN	3713:8	3713:24	6	component_count = 0
LVAL	3713:8	3713:8	7	component_count
NAME	3713:8	3713:8	8	component_count
LEAF_NODE	3713:8	3713:8	9	component_count
ASSIGN_OP	3713:23	3713:23	7	=
LEAF_NODE	3713:23	3713:23	8	=
RVAL	3713:24	3713:24	7	0
FIELD	3713:24	3713:24	8	0
LEAF_NODE	3713:24	3713:24	9	0
LEAF_NODE	3713:25	3713:25	4	;
SIMPLE_DECL	3714:1	3714:24	3	uint32 palette_offset ; palette_offset = 0 ;
VAR_DECL	3714:1	3714:8	4	uint32 palette_offset ; palette_offset = 0
TYPE	3714:1	3714:1	5	uint32
TYPE_NAME	3714:1	3714:1	6	uint32
LEAF_NODE	3714:1	3714:1	7	uint32
NAME	3714:8	3714:8	5	palette_offset
LEAF_NODE	3714:8	3714:8	6	palette_offset
LEAF_NODE	0:0	0:0	5	;
INIT	3714:8	3714:8	5	palette_offset = 0
ASSIGN	3714:8	3714:23	6	palette_offset = 0
LVAL	3714:8	3714:8	7	palette_offset
NAME	3714:8	3714:8	8	palette_offset
LEAF_NODE	3714:8	3714:8	9	palette_offset
ASSIGN_OP	3714:22	3714:22	7	=
LEAF_NODE	3714:22	3714:22	8	=
RVAL	3714:23	3714:23	7	0
FIELD	3714:23	3714:23	8	0
LEAF_NODE	3714:23	3714:23	9	0
LEAF_NODE	3714:24	3714:24	4	;
SIMPLE_DECL	3715:1	3715:23	3	uint32 sample_offset ; sample_offset = 0 ;
VAR_DECL	3715:1	3715:8	4	uint32 sample_offset ; sample_offset = 0
TYPE	3715:1	3715:1	5	uint32
TYPE_NAME	3715:1	3715:1	6	uint32
LEAF_NODE	3715:1	3715:1	7	uint32
NAME	3715:8	3715:8	5	sample_offset
LEAF_NODE	3715:8	3715:8	6	sample_offset
LEAF_NODE	0:0	0:0	5	;
INIT	3715:8	3715:8	5	sample_offset = 0
ASSIGN	3715:8	3715:22	6	sample_offset = 0
LVAL	3715:8	3715:8	7	sample_offset
NAME	3715:8	3715:8	8	sample_offset
LEAF_NODE	3715:8	3715:8	9	sample_offset
ASSIGN_OP	3715:21	3715:21	7	=
LEAF_NODE	3715:21	3715:21	8	=
RVAL	3715:22	3715:22	7	0
FIELD	3715:22	3715:22	8	0
LEAF_NODE	3715:22	3715:22	9	0
LEAF_NODE	3715:23	3715:23	4	;
SIMPLE_DECL	3716:1	3716:11	3	uint32 i ; i = 0 ;
VAR_DECL	3716:1	3716:8	4	uint32 i ; i = 0
TYPE	3716:1	3716:1	5	uint32
TYPE_NAME	3716:1	3716:1	6	uint32
LEAF_NODE	3716:1	3716:1	7	uint32
NAME	3716:8	3716:8	5	i
LEAF_NODE	3716:8	3716:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	3716:8	3716:8	5	i = 0
ASSIGN	3716:8	3716:10	6	i = 0
LVAL	3716:8	3716:8	7	i
NAME	3716:8	3716:8	8	i
LEAF_NODE	3716:8	3716:8	9	i
ASSIGN_OP	3716:9	3716:9	7	=
LEAF_NODE	3716:9	3716:9	8	=
RVAL	3716:10	3716:10	7	0
FIELD	3716:10	3716:10	8	0
LEAF_NODE	3716:10	3716:10	9	0
LEAF_NODE	3716:11	3716:11	4	;
SIMPLE_DECL	3717:1	3717:11	3	uint32 j ; j = 0 ;
VAR_DECL	3717:1	3717:8	4	uint32 j ; j = 0
TYPE	3717:1	3717:1	5	uint32
TYPE_NAME	3717:1	3717:1	6	uint32
LEAF_NODE	3717:1	3717:1	7	uint32
NAME	3717:8	3717:8	5	j
LEAF_NODE	3717:8	3717:8	6	j
LEAF_NODE	0:0	0:0	5	;
INIT	3717:8	3717:8	5	j = 0
ASSIGN	3717:8	3717:10	6	j = 0
LVAL	3717:8	3717:8	7	j
NAME	3717:8	3717:8	8	j
LEAF_NODE	3717:8	3717:8	9	j
ASSIGN_OP	3717:9	3717:9	7	=
LEAF_NODE	3717:9	3717:9	8	=
RVAL	3717:10	3717:10	7	0
FIELD	3717:10	3717:10	8	0
LEAF_NODE	3717:10	3717:10	9	0
LEAF_NODE	3717:11	3717:11	4	;
SIMPLE_DECL	3718:8	3718:24	3	size_t data_size ;
VAR_DECL	3718:8	3718:15	4	size_t data_size
TYPE	3718:8	3718:8	5	size_t
TYPE_NAME	3718:8	3718:8	6	size_t
LEAF_NODE	3718:8	3718:8	7	size_t
NAME	3718:15	3718:15	5	data_size
LEAF_NODE	3718:15	3718:15	6	data_size
LEAF_NODE	3718:24	3718:24	4	;
EXPR_STATEMENT	3719:1	3719:46	3	sample_count = t2p -> tiff_width * t2p -> tiff_length ;
EXPR	3719:1	3719:1	4	sample_count = t2p -> tiff_width * t2p -> tiff_length
ASSIGN	3719:1	3719:14	5	sample_count = t2p -> tiff_width * t2p -> tiff_length
LVAL	3719:1	3719:1	6	sample_count
FIELD	3719:1	3719:1	7	sample_count
LEAF_NODE	3719:1	3719:1	8	sample_count
ASSIGN_OP	3719:13	3719:13	6	=
LEAF_NODE	3719:13	3719:13	7	=
RVAL	3719:14	3719:30	6	t2p -> tiff_width * t2p -> tiff_length
FIELD	3719:14	3719:19	7	t2p -> tiff_width
LEAF_NODE	3719:14	3719:14	8	t2p
LEAF_NODE	3719:17	3719:17	8	->
LEAF_NODE	3719:19	3719:19	8	tiff_width
LEAF_NODE	3719:29	3719:29	7	*
FIELD	3719:30	3719:35	7	t2p -> tiff_length
LEAF_NODE	3719:30	3719:30	8	t2p
LEAF_NODE	3719:33	3719:33	8	->
LEAF_NODE	3719:35	3719:35	8	tiff_length
LEAF_NODE	3719:46	3719:46	4	;
EXPR_STATEMENT	3720:1	3720:42	3	component_count = t2p -> tiff_samplesperpixel ;
EXPR	3720:1	3720:1	4	component_count = t2p -> tiff_samplesperpixel
ASSIGN	3720:1	3720:17	5	component_count = t2p -> tiff_samplesperpixel
LVAL	3720:1	3720:1	6	component_count
FIELD	3720:1	3720:1	7	component_count
LEAF_NODE	3720:1	3720:1	8	component_count
ASSIGN_OP	3720:16	3720:16	6	=
LEAF_NODE	3720:16	3720:16	7	=
RVAL	3720:17	3720:17	6	t2p -> tiff_samplesperpixel
FIELD	3720:17	3720:22	7	t2p -> tiff_samplesperpixel
LEAF_NODE	3720:17	3720:17	8	t2p
LEAF_NODE	3720:20	3720:20	8	->
LEAF_NODE	3720:22	3720:22	8	tiff_samplesperpixel
LEAF_NODE	3720:42	3720:42	4	;
EXPR_STATEMENT	3721:8	3721:71	3	data_size = TIFFSafeMultiply ( size_t , sample_count , component_count ) ;
EXPR	3721:8	3721:8	4	data_size = TIFFSafeMultiply ( size_t , sample_count , component_count )
ASSIGN	3721:8	3721:18	5	data_size = TIFFSafeMultiply ( size_t , sample_count , component_count )
LVAL	3721:8	3721:8	6	data_size
FIELD	3721:8	3721:8	7	data_size
LEAF_NODE	3721:8	3721:8	8	data_size
ASSIGN_OP	3721:17	3721:17	6	=
LEAF_NODE	3721:17	3721:17	7	=
RVAL	3721:18	3721:18	6	TIFFSafeMultiply ( size_t , sample_count , component_count )
FUNCTION_CALL	3721:18	3721:70	7	TIFFSafeMultiply ( size_t , sample_count , component_count )
CALLEE	3721:18	3721:18	8	TIFFSafeMultiply
LEAF_NODE	3721:18	3721:18	9	TIFFSafeMultiply
LEAF_NODE	3721:34	3721:34	8	(
ARGUMENT	3721:35	3721:35	8	size_t
FIELD	3721:35	3721:35	9	size_t
LEAF_NODE	3721:35	3721:35	10	size_t
LEAF_NODE	3721:41	3721:41	8	,
ARGUMENT	3721:42	3721:42	8	sample_count
FIELD	3721:42	3721:42	9	sample_count
LEAF_NODE	3721:42	3721:42	10	sample_count
LEAF_NODE	3721:54	3721:54	8	,
ARGUMENT	3721:55	3721:55	8	component_count
FIELD	3721:55	3721:55	9	component_count
LEAF_NODE	3721:55	3721:55	10	component_count
LEAF_NODE	3721:70	3721:70	8	)
LEAF_NODE	3721:71	3721:71	4	;
SELECTION	3722:8	3724:8	3	
KEYWORD	3722:8	3722:8	4	if
LEAF_NODE	3722:8	3722:8	5	if
LEAF_NODE	3722:10	3722:10	4	(
CONDITION	3722:12	3722:12	4	( data_size == 0U ) || ( t2p -> tiff_datasize < 0 ) || ( data_size > ( size_t ) t2p -> tiff_datasize )
EXPR	3722:12	3722:12	5	( data_size == 0U ) || ( t2p -> tiff_datasize < 0 ) || ( data_size > ( size_t ) t2p -> tiff_datasize )
OR	3722:12	3722:33	6	( data_size == 0U ) || ( t2p -> tiff_datasize < 0 ) || ( data_size > ( size_t ) t2p -> tiff_datasize )
EXPR	3722:12	3722:28	7	( data_size == 0U )
LEAF_NODE	3722:12	3722:12	8	(
FIELD	3722:13	3722:13	8	data_size
LEAF_NODE	3722:13	3722:13	9	data_size
EQ_OPERATOR	3722:23	3722:23	8	==
LEAF_NODE	3722:23	3722:23	9	==
FIELD	3722:26	3722:26	8	0U
LEAF_NODE	3722:26	3722:26	9	0U
LEAF_NODE	3722:28	3722:28	8	)
LEAF_NODE	3722:30	3722:30	7	||
EXPR	3722:33	3722:33	7	( t2p -> tiff_datasize < 0 ) || ( data_size > ( size_t ) t2p -> tiff_datasize )
OR	3722:33	3723:12	8	( t2p -> tiff_datasize < 0 ) || ( data_size > ( size_t ) t2p -> tiff_datasize )
EXPR	3722:33	3722:56	9	( t2p -> tiff_datasize < 0 )
LEAF_NODE	3722:33	3722:33	10	(
FIELD	3722:34	3722:39	10	t2p -> tiff_datasize
LEAF_NODE	3722:34	3722:34	11	t2p
LEAF_NODE	3722:37	3722:37	11	->
LEAF_NODE	3722:39	3722:39	11	tiff_datasize
REL_OPERATOR	3722:53	3722:53	10	<
LEAF_NODE	3722:53	3722:53	11	<
FIELD	3722:55	3722:55	10	0
LEAF_NODE	3722:55	3722:55	11	0
LEAF_NODE	3722:56	3722:56	10	)
LEAF_NODE	3722:58	3722:58	9	||
EXPR	3723:12	3723:52	9	( data_size > ( size_t ) t2p -> tiff_datasize )
LEAF_NODE	3723:12	3723:12	10	(
FIELD	3723:13	3723:13	10	data_size
LEAF_NODE	3723:13	3723:13	11	data_size
REL_OPERATOR	3723:23	3723:23	10	>
LEAF_NODE	3723:23	3723:23	11	>
LEAF_NODE	3723:25	3723:25	10	(
TYPE_NAME	3723:26	3723:26	10	size_t
LEAF_NODE	3723:26	3723:26	11	size_t
LEAF_NODE	3723:32	3723:32	10	)
FIELD	3723:34	3723:39	10	t2p -> tiff_datasize
LEAF_NODE	3723:34	3723:34	11	t2p
LEAF_NODE	3723:37	3723:37	11	->
LEAF_NODE	3723:39	3723:39	11	tiff_datasize
LEAF_NODE	3723:52	3723:52	10	)
LEAF_NODE	3723:54	3723:54	4	)
STATEMENTS	3724:8	3729:8	4	
LEAF_NODE	3724:8	3724:8	5	{
STATEMENTS	3725:12	3728:12	5	
EXPR_STATEMENT	3725:12	3726:83	6	TIFFError ( TIFF2PDF_MODULE , "Error: sample_count * component_count > t2p->tiff_datasize" ) ;
EXPR	3725:12	3725:12	7	TIFFError ( TIFF2PDF_MODULE , "Error: sample_count * component_count > t2p->tiff_datasize" )
FUNCTION_CALL	3725:12	3726:82	8	TIFFError ( TIFF2PDF_MODULE , "Error: sample_count * component_count > t2p->tiff_datasize" )
CALLEE	3725:12	3725:12	9	TIFFError
LEAF_NODE	3725:12	3725:12	10	TIFFError
LEAF_NODE	3725:21	3725:21	9	(
ARGUMENT	3725:22	3725:22	9	TIFF2PDF_MODULE
FIELD	3725:22	3725:22	10	TIFF2PDF_MODULE
LEAF_NODE	3725:22	3725:22	11	TIFF2PDF_MODULE
LEAF_NODE	3725:37	3725:37	9	,
ARGUMENT	3726:22	3726:22	9	"Error: sample_count * component_count > t2p->tiff_datasize"
FIELD	3726:22	3726:22	10	"Error: sample_count * component_count > t2p->tiff_datasize"
LEAF_NODE	3726:22	3726:22	11	"Error: sample_count * component_count > t2p->tiff_datasize"
LEAF_NODE	3726:82	3726:82	9	)
LEAF_NODE	3726:83	3726:83	7	;
EXPR_STATEMENT	3727:12	3727:42	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	3727:12	3727:12	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	3727:12	3727:29	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	3727:12	3727:12	9	t2p -> t2p_error
FIELD	3727:12	3727:17	10	t2p -> t2p_error
LEAF_NODE	3727:12	3727:12	11	t2p
LEAF_NODE	3727:15	3727:15	11	->
LEAF_NODE	3727:17	3727:17	11	t2p_error
ASSIGN_OP	3727:27	3727:27	9	=
LEAF_NODE	3727:27	3727:27	10	=
RVAL	3727:29	3727:29	9	T2P_ERR_ERROR
FIELD	3727:29	3727:29	10	T2P_ERR_ERROR
LEAF_NODE	3727:29	3727:29	11	T2P_ERR_ERROR
LEAF_NODE	3727:42	3727:42	7	;
JUMP_STATEMENT	3728:12	3728:20	6	return 1 ;
KEYWORD	3728:12	3728:12	7	return
LEAF_NODE	3728:12	3728:12	8	return
DESTINATION	3728:19	3728:19	7	1
EXPR	3728:19	3728:19	8	1
FIELD	3728:19	3728:19	9	1
LEAF_NODE	3728:19	3728:19	10	1
LEAF_NODE	3728:20	3728:20	7	;
LEAF_NODE	3729:8	3729:8	5	}
ITERATION	3731:1	3731:28	3	
KEYWORD	3731:1	3731:1	4	for
LEAF_NODE	3731:1	3731:1	5	for
LEAF_NODE	3731:4	3731:4	4	(
FOR_INIT	3731:5	3731:19	4	i = sample_count ;
EXPR	3731:5	3731:5	5	i = sample_count
ASSIGN	3731:5	3731:7	6	i = sample_count
LVAL	3731:5	3731:5	7	i
FIELD	3731:5	3731:5	8	i
LEAF_NODE	3731:5	3731:5	9	i
ASSIGN_OP	3731:6	3731:6	7	=
LEAF_NODE	3731:6	3731:6	8	=
RVAL	3731:7	3731:7	7	sample_count
FIELD	3731:7	3731:7	8	sample_count
LEAF_NODE	3731:7	3731:7	9	sample_count
LEAF_NODE	3731:19	3731:19	5	;
CONDITION	3731:20	3731:20	4	i > 0
EXPR	3731:20	3731:22	5	i > 0
FIELD	3731:20	3731:20	6	i
LEAF_NODE	3731:20	3731:20	7	i
REL_OPERATOR	3731:21	3731:21	6	>
LEAF_NODE	3731:21	3731:21	7	>
FIELD	3731:22	3731:22	6	0
LEAF_NODE	3731:22	3731:22	7	0
LEAF_NODE	3731:23	3731:23	4	;
FOR_EXPR	3731:24	3731:24	4	i --
EXPR	3731:24	3731:24	5	i --
FIELD	3731:24	3731:25	6	i --
LEAF_NODE	3731:24	3731:24	7	i
LEAF_NODE	3731:25	3731:25	7	--
LEAF_NODE	3731:27	3731:27	4	)
STATEMENTS	3731:28	3737:1	4	
LEAF_NODE	3731:28	3731:28	5	{
STATEMENTS	3732:2	3734:2	5	
EXPR_STATEMENT	3732:2	3732:46	6	palette_offset = buffer [ i - 1 ] * component_count ;
EXPR	3732:2	3732:2	7	palette_offset = buffer [ i - 1 ] * component_count
ASSIGN	3732:2	3732:17	8	palette_offset = buffer [ i - 1 ] * component_count
LVAL	3732:2	3732:2	9	palette_offset
FIELD	3732:2	3732:2	10	palette_offset
LEAF_NODE	3732:2	3732:2	11	palette_offset
ASSIGN_OP	3732:16	3732:16	9	=
LEAF_NODE	3732:16	3732:16	10	=
RVAL	3732:17	3732:31	9	buffer [ i - 1 ] * component_count
FIELD	3732:17	3732:27	10	buffer [ i - 1 ]
LEAF_NODE	3732:17	3732:17	11	buffer
LEAF_NODE	3732:23	3732:23	11	[
EXPR	3732:24	3732:26	11	i - 1
FIELD	3732:24	3732:24	12	i
LEAF_NODE	3732:24	3732:24	13	i
LEAF_NODE	3732:25	3732:25	12	-
FIELD	3732:26	3732:26	12	1
LEAF_NODE	3732:26	3732:26	13	1
LEAF_NODE	3732:27	3732:27	11	]
LEAF_NODE	3732:29	3732:29	10	*
FIELD	3732:31	3732:31	10	component_count
LEAF_NODE	3732:31	3732:31	11	component_count
LEAF_NODE	3732:46	3732:46	7	;
EXPR_STATEMENT	3733:2	3733:40	6	sample_offset = ( i - 1 ) * component_count ;
EXPR	3733:2	3733:2	7	sample_offset = ( i - 1 ) * component_count
ASSIGN	3733:2	3733:17	8	sample_offset = ( i - 1 ) * component_count
LVAL	3733:2	3733:2	9	sample_offset
FIELD	3733:2	3733:2	10	sample_offset
LEAF_NODE	3733:2	3733:2	11	sample_offset
ASSIGN_OP	3733:15	3733:15	9	=
LEAF_NODE	3733:15	3733:15	10	=
RVAL	3733:17	3733:25	9	( i - 1 ) * component_count
LEAF_NODE	3733:17	3733:17	10	(
FIELD	3733:18	3733:18	10	i
LEAF_NODE	3733:18	3733:18	11	i
LEAF_NODE	3733:19	3733:19	10	-
FIELD	3733:20	3733:20	10	1
LEAF_NODE	3733:20	3733:20	11	1
LEAF_NODE	3733:21	3733:21	10	)
LEAF_NODE	3733:23	3733:23	10	*
FIELD	3733:25	3733:25	10	component_count
LEAF_NODE	3733:25	3733:25	11	component_count
LEAF_NODE	3733:40	3733:40	7	;
ITERATION	3734:2	3734:32	6	
KEYWORD	3734:2	3734:2	7	for
LEAF_NODE	3734:2	3734:2	8	for
LEAF_NODE	3734:5	3734:5	7	(
FOR_INIT	3734:6	3734:9	7	j = 0 ;
EXPR	3734:6	3734:6	8	j = 0
ASSIGN	3734:6	3734:8	9	j = 0
LVAL	3734:6	3734:6	10	j
FIELD	3734:6	3734:6	11	j
LEAF_NODE	3734:6	3734:6	12	j
ASSIGN_OP	3734:7	3734:7	10	=
LEAF_NODE	3734:7	3734:7	11	=
RVAL	3734:8	3734:8	10	0
FIELD	3734:8	3734:8	11	0
LEAF_NODE	3734:8	3734:8	12	0
LEAF_NODE	3734:9	3734:9	8	;
CONDITION	3734:10	3734:10	7	j < component_count
EXPR	3734:10	3734:12	8	j < component_count
FIELD	3734:10	3734:10	9	j
LEAF_NODE	3734:10	3734:10	10	j
REL_OPERATOR	3734:11	3734:11	9	<
LEAF_NODE	3734:11	3734:11	10	<
FIELD	3734:12	3734:12	9	component_count
LEAF_NODE	3734:12	3734:12	10	component_count
LEAF_NODE	3734:27	3734:27	7	;
FOR_EXPR	3734:28	3734:28	7	j ++
EXPR	3734:28	3734:28	8	j ++
FIELD	3734:28	3734:29	9	j ++
LEAF_NODE	3734:28	3734:28	10	j
LEAF_NODE	3734:29	3734:29	10	++
LEAF_NODE	3734:31	3734:31	7	)
STATEMENTS	3734:32	3736:2	7	
LEAF_NODE	3734:32	3734:32	8	{
STATEMENTS	3735:3	3735:3	8	
EXPR_STATEMENT	3735:3	3735:61	9	buffer [ sample_offset + j ] = t2p -> pdf_palette [ palette_offset + j ] ;
EXPR	3735:3	3735:3	10	buffer [ sample_offset + j ] = t2p -> pdf_palette [ palette_offset + j ]
ASSIGN	3735:3	3735:27	11	buffer [ sample_offset + j ] = t2p -> pdf_palette [ palette_offset + j ]
LVAL	3735:3	3735:3	12	buffer [ sample_offset + j ]
FIELD	3735:3	3735:25	13	buffer [ sample_offset + j ]
LEAF_NODE	3735:3	3735:3	14	buffer
LEAF_NODE	3735:9	3735:9	14	[
EXPR	3735:10	3735:24	14	sample_offset + j
FIELD	3735:10	3735:10	15	sample_offset
LEAF_NODE	3735:10	3735:10	16	sample_offset
LEAF_NODE	3735:23	3735:23	15	+
FIELD	3735:24	3735:24	15	j
LEAF_NODE	3735:24	3735:24	16	j
LEAF_NODE	3735:25	3735:25	14	]
ASSIGN_OP	3735:26	3735:26	12	=
LEAF_NODE	3735:26	3735:26	13	=
RVAL	3735:27	3735:27	12	t2p -> pdf_palette [ palette_offset + j ]
FIELD	3735:27	3735:60	13	t2p -> pdf_palette [ palette_offset + j ]
LEAF_NODE	3735:27	3735:27	14	t2p
LEAF_NODE	3735:30	3735:30	14	->
LEAF_NODE	3735:32	3735:32	14	pdf_palette
LEAF_NODE	3735:43	3735:43	14	[
EXPR	3735:44	3735:59	14	palette_offset + j
FIELD	3735:44	3735:44	15	palette_offset
LEAF_NODE	3735:44	3735:44	16	palette_offset
LEAF_NODE	3735:58	3735:58	15	+
FIELD	3735:59	3735:59	15	j
LEAF_NODE	3735:59	3735:59	16	j
LEAF_NODE	3735:60	3735:60	14	]
LEAF_NODE	3735:61	3735:61	10	;
LEAF_NODE	3736:2	3736:2	8	}
LEAF_NODE	3737:1	3737:1	5	}
JUMP_STATEMENT	3739:1	3739:10	3	return ( 0 ) ;
KEYWORD	3739:1	3739:1	4	return
LEAF_NODE	3739:1	3739:1	5	return
DESTINATION	3739:7	3739:7	4	( 0 )
EXPR	3739:7	3739:9	5	( 0 )
LEAF_NODE	3739:7	3739:7	6	(
FIELD	3739:8	3739:8	6	0
LEAF_NODE	3739:8	3739:8	7	0
LEAF_NODE	3739:9	3739:9	6	)
LEAF_NODE	3739:10	3739:10	4	;
LEAF_NODE	3740:0	3740:0	2	}
FUNCTION_DEF	3747:0	3760:0	1	
RETURN_TYPE	3747:0	3747:0	2	tsize_t
TYPE_NAME	3747:0	3747:0	3	tsize_t
LEAF_NODE	3747:0	3747:0	4	tsize_t
FUNCTION_NAME	3747:8	3747:8	2	t2p_sample_abgr_to_rgb
LEAF_NODE	3747:8	3747:8	3	t2p_sample_abgr_to_rgb
PARAMETER_LIST	3747:30	3747:63	2	( tdata_t data , uint32 samplecount )
LEAF_NODE	3747:30	3747:30	3	(
PARAMETER_DECL	3747:31	3747:39	3	tdata_t data
TYPE	3747:31	3747:31	4	tdata_t
TYPE_NAME	3747:31	3747:31	5	tdata_t
LEAF_NODE	3747:31	3747:31	6	tdata_t
NAME	3747:39	3747:39	4	data
LEAF_NODE	3747:39	3747:39	5	data
LEAF_NODE	3747:43	3747:43	3	,
PARAMETER_DECL	3747:45	3747:52	3	uint32 samplecount
TYPE	3747:45	3747:45	4	uint32
TYPE_NAME	3747:45	3747:45	5	uint32
LEAF_NODE	3747:45	3747:45	6	uint32
NAME	3747:52	3747:52	4	samplecount
LEAF_NODE	3747:52	3747:52	5	samplecount
LEAF_NODE	3747:63	3747:63	3	)
LEAF_NODE	3748:0	3748:0	2	{
STATEMENTS	3749:1	3759:1	2	
SIMPLE_DECL	3749:1	3749:11	3	uint32 i ; i = 0 ;
VAR_DECL	3749:1	3749:8	4	uint32 i ; i = 0
TYPE	3749:1	3749:1	5	uint32
TYPE_NAME	3749:1	3749:1	6	uint32
LEAF_NODE	3749:1	3749:1	7	uint32
NAME	3749:8	3749:8	5	i
LEAF_NODE	3749:8	3749:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	3749:8	3749:8	5	i = 0
ASSIGN	3749:8	3749:10	6	i = 0
LVAL	3749:8	3749:8	7	i
NAME	3749:8	3749:8	8	i
LEAF_NODE	3749:8	3749:8	9	i
ASSIGN_OP	3749:9	3749:9	7	=
LEAF_NODE	3749:9	3749:9	8	=
RVAL	3749:10	3749:10	7	0
FIELD	3749:10	3749:10	8	0
LEAF_NODE	3749:10	3749:10	9	0
LEAF_NODE	3749:11	3749:11	4	;
SIMPLE_DECL	3750:1	3750:16	3	uint32 sample ; sample = 0 ;
VAR_DECL	3750:1	3750:8	4	uint32 sample ; sample = 0
TYPE	3750:1	3750:1	5	uint32
TYPE_NAME	3750:1	3750:1	6	uint32
LEAF_NODE	3750:1	3750:1	7	uint32
NAME	3750:8	3750:8	5	sample
LEAF_NODE	3750:8	3750:8	6	sample
LEAF_NODE	0:0	0:0	5	;
INIT	3750:8	3750:8	5	sample = 0
ASSIGN	3750:8	3750:15	6	sample = 0
LVAL	3750:8	3750:8	7	sample
NAME	3750:8	3750:8	8	sample
LEAF_NODE	3750:8	3750:8	9	sample
ASSIGN_OP	3750:14	3750:14	7	=
LEAF_NODE	3750:14	3750:14	8	=
RVAL	3750:15	3750:15	7	0
FIELD	3750:15	3750:15	8	0
LEAF_NODE	3750:15	3750:15	9	0
LEAF_NODE	3750:16	3750:16	4	;
ITERATION	3752:1	3752:27	3	
KEYWORD	3752:1	3752:1	4	for
LEAF_NODE	3752:1	3752:1	5	for
LEAF_NODE	3752:4	3752:4	4	(
FOR_INIT	3752:5	3752:8	4	i = 0 ;
EXPR	3752:5	3752:5	5	i = 0
ASSIGN	3752:5	3752:7	6	i = 0
LVAL	3752:5	3752:5	7	i
FIELD	3752:5	3752:5	8	i
LEAF_NODE	3752:5	3752:5	9	i
ASSIGN_OP	3752:6	3752:6	7	=
LEAF_NODE	3752:6	3752:6	8	=
RVAL	3752:7	3752:7	7	0
FIELD	3752:7	3752:7	8	0
LEAF_NODE	3752:7	3752:7	9	0
LEAF_NODE	3752:8	3752:8	5	;
CONDITION	3752:9	3752:9	4	i < samplecount
EXPR	3752:9	3752:11	5	i < samplecount
FIELD	3752:9	3752:9	6	i
LEAF_NODE	3752:9	3752:9	7	i
REL_OPERATOR	3752:10	3752:10	6	<
LEAF_NODE	3752:10	3752:10	7	<
FIELD	3752:11	3752:11	6	samplecount
LEAF_NODE	3752:11	3752:11	7	samplecount
LEAF_NODE	3752:22	3752:22	4	;
FOR_EXPR	3752:23	3752:23	4	i ++
EXPR	3752:23	3752:23	5	i ++
FIELD	3752:23	3752:24	6	i ++
LEAF_NODE	3752:23	3752:23	7	i
LEAF_NODE	3752:24	3752:24	7	++
LEAF_NODE	3752:26	3752:26	4	)
STATEMENTS	3752:27	3757:1	4	
LEAF_NODE	3752:27	3752:27	5	{
STATEMENTS	3753:2	3756:2	5	
EXPR_STATEMENT	3753:2	3753:27	6	sample = ( ( uint32 * ) data ) [ i ] ;
EXPR	3753:2	3753:2	7	sample = ( ( uint32 * ) data ) [ i ]
ASSIGN	3753:2	3753:9	8	sample = ( ( uint32 * ) data ) [ i ]
LVAL	3753:2	3753:2	9	sample
FIELD	3753:2	3753:2	10	sample
LEAF_NODE	3753:2	3753:2	11	sample
ASSIGN_OP	3753:8	3753:8	9	=
LEAF_NODE	3753:8	3753:8	10	=
RVAL	3753:9	3753:26	9	( ( uint32 * ) data ) [ i ]
LEAF_NODE	3753:9	3753:9	10	(
LEAF_NODE	3753:10	3753:10	10	(
TYPE_NAME	3753:11	3753:11	10	uint32
LEAF_NODE	3753:11	3753:11	11	uint32
LEAF_NODE	3753:17	3753:17	10	*
LEAF_NODE	3753:18	3753:18	10	)
FIELD	3753:19	3753:19	10	data
LEAF_NODE	3753:19	3753:19	11	data
LEAF_NODE	3753:23	3753:23	10	)
LEAF_NODE	3753:24	3753:24	10	[
EXPR	3753:25	3753:25	10	i
FIELD	3753:25	3753:25	11	i
LEAF_NODE	3753:25	3753:25	12	i
LEAF_NODE	3753:26	3753:26	10	]
LEAF_NODE	3753:27	3753:27	7	;
EXPR_STATEMENT	3754:2	3754:44	6	( ( char * ) data ) [ i * 3 ] = ( char ) ( sample & 0xff ) ;
EXPR	3754:2	3754:2	7	( ( char * ) data ) [ i * 3 ] = ( char ) ( sample & 0xff )
ASSIGN	3754:2	3754:22	8	( ( char * ) data ) [ i * 3 ] = ( char ) ( sample & 0xff )
LVAL	3754:2	3754:19	9	( ( char * ) data ) [ i * 3 ]
LEAF_NODE	3754:2	3754:2	10	(
LEAF_NODE	3754:3	3754:3	10	(
TYPE_NAME	3754:4	3754:4	10	char
LEAF_NODE	3754:4	3754:4	11	char
LEAF_NODE	3754:8	3754:8	10	*
LEAF_NODE	3754:9	3754:9	10	)
FIELD	3754:10	3754:10	10	data
LEAF_NODE	3754:10	3754:10	11	data
LEAF_NODE	3754:14	3754:14	10	)
LEAF_NODE	3754:15	3754:15	10	[
EXPR	3754:16	3754:18	10	i * 3
FIELD	3754:16	3754:16	11	i
LEAF_NODE	3754:16	3754:16	12	i
LEAF_NODE	3754:17	3754:17	11	*
FIELD	3754:18	3754:18	11	3
LEAF_NODE	3754:18	3754:18	12	3
LEAF_NODE	3754:19	3754:19	10	]
ASSIGN_OP	3754:20	3754:20	9	=
LEAF_NODE	3754:20	3754:20	10	=
RVAL	3754:22	3754:43	9	( char ) ( sample & 0xff )
LEAF_NODE	3754:22	3754:22	10	(
TYPE_NAME	3754:23	3754:23	10	char
LEAF_NODE	3754:23	3754:23	11	char
LEAF_NODE	3754:27	3754:27	10	)
LEAF_NODE	3754:29	3754:29	10	(
FIELD	3754:30	3754:30	10	sample
LEAF_NODE	3754:30	3754:30	11	sample
LEAF_NODE	3754:37	3754:37	10	&
FIELD	3754:39	3754:39	10	0xff
LEAF_NODE	3754:39	3754:39	11	0xff
LEAF_NODE	3754:43	3754:43	10	)
LEAF_NODE	3754:44	3754:44	7	;
EXPR_STATEMENT	3755:2	3755:51	6	( ( char * ) data ) [ i * 3 + 1 ] = ( char ) ( ( sample >> 8 ) & 0xff ) ;
EXPR	3755:2	3755:2	7	( ( char * ) data ) [ i * 3 + 1 ] = ( char ) ( ( sample >> 8 ) & 0xff )
ASSIGN	3755:2	3755:24	8	( ( char * ) data ) [ i * 3 + 1 ] = ( char ) ( ( sample >> 8 ) & 0xff )
LVAL	3755:2	3755:21	9	( ( char * ) data ) [ i * 3 + 1 ]
LEAF_NODE	3755:2	3755:2	10	(
LEAF_NODE	3755:3	3755:3	10	(
TYPE_NAME	3755:4	3755:4	10	char
LEAF_NODE	3755:4	3755:4	11	char
LEAF_NODE	3755:8	3755:8	10	*
LEAF_NODE	3755:9	3755:9	10	)
FIELD	3755:10	3755:10	10	data
LEAF_NODE	3755:10	3755:10	11	data
LEAF_NODE	3755:14	3755:14	10	)
LEAF_NODE	3755:15	3755:15	10	[
EXPR	3755:16	3755:20	10	i * 3 + 1
FIELD	3755:16	3755:16	11	i
LEAF_NODE	3755:16	3755:16	12	i
LEAF_NODE	3755:17	3755:17	11	*
FIELD	3755:18	3755:18	11	3
LEAF_NODE	3755:18	3755:18	12	3
LEAF_NODE	3755:19	3755:19	11	+
FIELD	3755:20	3755:20	11	1
LEAF_NODE	3755:20	3755:20	12	1
LEAF_NODE	3755:21	3755:21	10	]
ASSIGN_OP	3755:22	3755:22	9	=
LEAF_NODE	3755:22	3755:22	10	=
RVAL	3755:24	3755:50	9	( char ) ( ( sample >> 8 ) & 0xff )
LEAF_NODE	3755:24	3755:24	10	(
TYPE_NAME	3755:25	3755:25	10	char
LEAF_NODE	3755:25	3755:25	11	char
LEAF_NODE	3755:29	3755:29	10	)
LEAF_NODE	3755:31	3755:31	10	(
LEAF_NODE	3755:32	3755:32	10	(
FIELD	3755:33	3755:33	10	sample
LEAF_NODE	3755:33	3755:33	11	sample
LEAF_NODE	3755:39	3755:39	10	>>
FIELD	3755:41	3755:41	10	8
LEAF_NODE	3755:41	3755:41	11	8
LEAF_NODE	3755:42	3755:42	10	)
LEAF_NODE	3755:44	3755:44	10	&
FIELD	3755:46	3755:46	10	0xff
LEAF_NODE	3755:46	3755:46	11	0xff
LEAF_NODE	3755:50	3755:50	10	)
LEAF_NODE	3755:51	3755:51	7	;
EXPR_STATEMENT	3756:2	3756:52	6	( ( char * ) data ) [ i * 3 + 2 ] = ( char ) ( ( sample >> 16 ) & 0xff ) ;
EXPR	3756:2	3756:2	7	( ( char * ) data ) [ i * 3 + 2 ] = ( char ) ( ( sample >> 16 ) & 0xff )
ASSIGN	3756:2	3756:24	8	( ( char * ) data ) [ i * 3 + 2 ] = ( char ) ( ( sample >> 16 ) & 0xff )
LVAL	3756:2	3756:21	9	( ( char * ) data ) [ i * 3 + 2 ]
LEAF_NODE	3756:2	3756:2	10	(
LEAF_NODE	3756:3	3756:3	10	(
TYPE_NAME	3756:4	3756:4	10	char
LEAF_NODE	3756:4	3756:4	11	char
LEAF_NODE	3756:8	3756:8	10	*
LEAF_NODE	3756:9	3756:9	10	)
FIELD	3756:10	3756:10	10	data
LEAF_NODE	3756:10	3756:10	11	data
LEAF_NODE	3756:14	3756:14	10	)
LEAF_NODE	3756:15	3756:15	10	[
EXPR	3756:16	3756:20	10	i * 3 + 2
FIELD	3756:16	3756:16	11	i
LEAF_NODE	3756:16	3756:16	12	i
LEAF_NODE	3756:17	3756:17	11	*
FIELD	3756:18	3756:18	11	3
LEAF_NODE	3756:18	3756:18	12	3
LEAF_NODE	3756:19	3756:19	11	+
FIELD	3756:20	3756:20	11	2
LEAF_NODE	3756:20	3756:20	12	2
LEAF_NODE	3756:21	3756:21	10	]
ASSIGN_OP	3756:22	3756:22	9	=
LEAF_NODE	3756:22	3756:22	10	=
RVAL	3756:24	3756:51	9	( char ) ( ( sample >> 16 ) & 0xff )
LEAF_NODE	3756:24	3756:24	10	(
TYPE_NAME	3756:25	3756:25	10	char
LEAF_NODE	3756:25	3756:25	11	char
LEAF_NODE	3756:29	3756:29	10	)
LEAF_NODE	3756:31	3756:31	10	(
LEAF_NODE	3756:32	3756:32	10	(
FIELD	3756:33	3756:33	10	sample
LEAF_NODE	3756:33	3756:33	11	sample
LEAF_NODE	3756:39	3756:39	10	>>
FIELD	3756:41	3756:41	10	16
LEAF_NODE	3756:41	3756:41	11	16
LEAF_NODE	3756:43	3756:43	10	)
LEAF_NODE	3756:45	3756:45	10	&
FIELD	3756:47	3756:47	10	0xff
LEAF_NODE	3756:47	3756:47	11	0xff
LEAF_NODE	3756:51	3756:51	10	)
LEAF_NODE	3756:52	3756:52	7	;
LEAF_NODE	3757:1	3757:1	5	}
JUMP_STATEMENT	3759:1	3759:12	3	return ( i * 3 ) ;
KEYWORD	3759:1	3759:1	4	return
LEAF_NODE	3759:1	3759:1	5	return
DESTINATION	3759:7	3759:7	4	( i * 3 )
EXPR	3759:7	3759:11	5	( i * 3 )
LEAF_NODE	3759:7	3759:7	6	(
FIELD	3759:8	3759:8	6	i
LEAF_NODE	3759:8	3759:8	7	i
LEAF_NODE	3759:9	3759:9	6	*
FIELD	3759:10	3759:10	6	3
LEAF_NODE	3759:10	3759:10	7	3
LEAF_NODE	3759:11	3759:11	6	)
LEAF_NODE	3759:12	3759:12	4	;
LEAF_NODE	3760:0	3760:0	2	}
FUNCTION_DEF	3767:0	3782:0	1	
RETURN_TYPE	3767:0	3767:0	2	tsize_t
TYPE_NAME	3767:0	3767:0	3	tsize_t
LEAF_NODE	3767:0	3767:0	4	tsize_t
FUNCTION_NAME	3768:0	3768:0	2	t2p_sample_rgbaa_to_rgb
LEAF_NODE	3768:0	3768:0	3	t2p_sample_rgbaa_to_rgb
PARAMETER_LIST	3768:23	3768:56	2	( tdata_t data , uint32 samplecount )
LEAF_NODE	3768:23	3768:23	3	(
PARAMETER_DECL	3768:24	3768:32	3	tdata_t data
TYPE	3768:24	3768:24	4	tdata_t
TYPE_NAME	3768:24	3768:24	5	tdata_t
LEAF_NODE	3768:24	3768:24	6	tdata_t
NAME	3768:32	3768:32	4	data
LEAF_NODE	3768:32	3768:32	5	data
LEAF_NODE	3768:36	3768:36	3	,
PARAMETER_DECL	3768:38	3768:45	3	uint32 samplecount
TYPE	3768:38	3768:38	4	uint32
TYPE_NAME	3768:38	3768:38	5	uint32
LEAF_NODE	3768:38	3768:38	6	uint32
NAME	3768:45	3768:45	4	samplecount
LEAF_NODE	3768:45	3768:45	5	samplecount
LEAF_NODE	3768:56	3768:56	3	)
LEAF_NODE	3769:0	3769:0	2	{
STATEMENTS	3770:1	3781:1	2	
SIMPLE_DECL	3770:1	3770:9	3	uint32 i ;
VAR_DECL	3770:1	3770:8	4	uint32 i
TYPE	3770:1	3770:1	5	uint32
TYPE_NAME	3770:1	3770:1	6	uint32
LEAF_NODE	3770:1	3770:1	7	uint32
NAME	3770:8	3770:8	5	i
LEAF_NODE	3770:8	3770:8	6	i
LEAF_NODE	3770:9	3770:9	4	;
ITERATION	3776:1	3777:2	3	
KEYWORD	3776:1	3776:1	4	for
LEAF_NODE	3776:1	3776:1	5	for
LEAF_NODE	3776:4	3776:4	4	(
FOR_INIT	3776:5	3776:10	4	i = 0 ;
EXPR	3776:5	3776:5	5	i = 0
ASSIGN	3776:5	3776:9	6	i = 0
LVAL	3776:5	3776:5	7	i
FIELD	3776:5	3776:5	8	i
LEAF_NODE	3776:5	3776:5	9	i
ASSIGN_OP	3776:7	3776:7	7	=
LEAF_NODE	3776:7	3776:7	8	=
RVAL	3776:9	3776:9	7	0
FIELD	3776:9	3776:9	8	0
LEAF_NODE	3776:9	3776:9	9	0
LEAF_NODE	3776:10	3776:10	5	;
CONDITION	3776:12	3776:12	4	i < 3 && i < samplecount
EXPR	3776:12	3776:12	5	i < 3 && i < samplecount
AND	3776:12	3776:21	6	i < 3 && i < samplecount
EXPR	3776:12	3776:16	7	i < 3
FIELD	3776:12	3776:12	8	i
LEAF_NODE	3776:12	3776:12	9	i
REL_OPERATOR	3776:14	3776:14	8	<
LEAF_NODE	3776:14	3776:14	9	<
FIELD	3776:16	3776:16	8	3
LEAF_NODE	3776:16	3776:16	9	3
LEAF_NODE	3776:18	3776:18	7	&&
EXPR	3776:21	3776:25	7	i < samplecount
FIELD	3776:21	3776:21	8	i
LEAF_NODE	3776:21	3776:21	9	i
REL_OPERATOR	3776:23	3776:23	8	<
LEAF_NODE	3776:23	3776:23	9	<
FIELD	3776:25	3776:25	8	samplecount
LEAF_NODE	3776:25	3776:25	9	samplecount
LEAF_NODE	3776:36	3776:36	4	;
FOR_EXPR	3776:38	3776:38	4	i ++
EXPR	3776:38	3776:38	5	i ++
FIELD	3776:38	3776:39	6	i ++
LEAF_NODE	3776:38	3776:38	7	i
LEAF_NODE	3776:39	3776:39	7	++
LEAF_NODE	3776:41	3776:41	4	)
STATEMENTS	3777:2	3777:2	4	
EXPR_STATEMENT	3777:2	3777:56	5	memmove ( ( uint8 * ) data + i * 3 , ( uint8 * ) data + i * 4 , 3 ) ;
EXPR	3777:2	3777:2	6	memmove ( ( uint8 * ) data + i * 3 , ( uint8 * ) data + i * 4 , 3 )
FUNCTION_CALL	3777:2	3777:55	7	memmove ( ( uint8 * ) data + i * 3 , ( uint8 * ) data + i * 4 , 3 )
CALLEE	3777:2	3777:2	8	memmove
LEAF_NODE	3777:2	3777:2	9	memmove
LEAF_NODE	3777:9	3777:9	8	(
ARGUMENT	3777:10	3777:29	8	( uint8 * ) data + i * 3
LEAF_NODE	3777:10	3777:10	9	(
TYPE_NAME	3777:11	3777:11	9	uint8
LEAF_NODE	3777:11	3777:11	10	uint8
LEAF_NODE	3777:16	3777:16	9	*
LEAF_NODE	3777:17	3777:17	9	)
FIELD	3777:18	3777:18	9	data
LEAF_NODE	3777:18	3777:18	10	data
LEAF_NODE	3777:23	3777:23	9	+
FIELD	3777:25	3777:25	9	i
LEAF_NODE	3777:25	3777:25	10	i
LEAF_NODE	3777:27	3777:27	9	*
FIELD	3777:29	3777:29	9	3
LEAF_NODE	3777:29	3777:29	10	3
LEAF_NODE	3777:30	3777:30	8	,
ARGUMENT	3777:32	3777:51	8	( uint8 * ) data + i * 4
LEAF_NODE	3777:32	3777:32	9	(
TYPE_NAME	3777:33	3777:33	9	uint8
LEAF_NODE	3777:33	3777:33	10	uint8
LEAF_NODE	3777:38	3777:38	9	*
LEAF_NODE	3777:39	3777:39	9	)
FIELD	3777:40	3777:40	9	data
LEAF_NODE	3777:40	3777:40	10	data
LEAF_NODE	3777:45	3777:45	9	+
FIELD	3777:47	3777:47	9	i
LEAF_NODE	3777:47	3777:47	10	i
LEAF_NODE	3777:49	3777:49	9	*
FIELD	3777:51	3777:51	9	4
LEAF_NODE	3777:51	3777:51	10	4
LEAF_NODE	3777:52	3777:52	8	,
ARGUMENT	3777:54	3777:54	8	3
FIELD	3777:54	3777:54	9	3
LEAF_NODE	3777:54	3777:54	10	3
LEAF_NODE	3777:55	3777:55	8	)
LEAF_NODE	3777:56	3777:56	6	;
ITERATION	3778:1	3779:2	3	
KEYWORD	3778:1	3778:1	4	for
LEAF_NODE	3778:1	3778:1	5	for
LEAF_NODE	3778:4	3778:4	4	(
FOR_INIT	3778:5	3778:5	4	;
LEAF_NODE	3778:5	3778:5	5	;
CONDITION	3778:7	3778:7	4	i < samplecount
EXPR	3778:7	3778:11	5	i < samplecount
FIELD	3778:7	3778:7	6	i
LEAF_NODE	3778:7	3778:7	7	i
REL_OPERATOR	3778:9	3778:9	6	<
LEAF_NODE	3778:9	3778:9	7	<
FIELD	3778:11	3778:11	6	samplecount
LEAF_NODE	3778:11	3778:11	7	samplecount
LEAF_NODE	3778:22	3778:22	4	;
FOR_EXPR	3778:24	3778:24	4	i ++
EXPR	3778:24	3778:24	5	i ++
FIELD	3778:24	3778:25	6	i ++
LEAF_NODE	3778:24	3778:24	7	i
LEAF_NODE	3778:25	3778:25	7	++
LEAF_NODE	3778:27	3778:27	4	)
STATEMENTS	3779:2	3779:2	4	
EXPR_STATEMENT	3779:2	3779:55	5	memcpy ( ( uint8 * ) data + i * 3 , ( uint8 * ) data + i * 4 , 3 ) ;
EXPR	3779:2	3779:2	6	memcpy ( ( uint8 * ) data + i * 3 , ( uint8 * ) data + i * 4 , 3 )
FUNCTION_CALL	3779:2	3779:54	7	memcpy ( ( uint8 * ) data + i * 3 , ( uint8 * ) data + i * 4 , 3 )
CALLEE	3779:2	3779:2	8	memcpy
LEAF_NODE	3779:2	3779:2	9	memcpy
LEAF_NODE	3779:8	3779:8	8	(
ARGUMENT	3779:9	3779:28	8	( uint8 * ) data + i * 3
LEAF_NODE	3779:9	3779:9	9	(
TYPE_NAME	3779:10	3779:10	9	uint8
LEAF_NODE	3779:10	3779:10	10	uint8
LEAF_NODE	3779:15	3779:15	9	*
LEAF_NODE	3779:16	3779:16	9	)
FIELD	3779:17	3779:17	9	data
LEAF_NODE	3779:17	3779:17	10	data
LEAF_NODE	3779:22	3779:22	9	+
FIELD	3779:24	3779:24	9	i
LEAF_NODE	3779:24	3779:24	10	i
LEAF_NODE	3779:26	3779:26	9	*
FIELD	3779:28	3779:28	9	3
LEAF_NODE	3779:28	3779:28	10	3
LEAF_NODE	3779:29	3779:29	8	,
ARGUMENT	3779:31	3779:50	8	( uint8 * ) data + i * 4
LEAF_NODE	3779:31	3779:31	9	(
TYPE_NAME	3779:32	3779:32	9	uint8
LEAF_NODE	3779:32	3779:32	10	uint8
LEAF_NODE	3779:37	3779:37	9	*
LEAF_NODE	3779:38	3779:38	9	)
FIELD	3779:39	3779:39	9	data
LEAF_NODE	3779:39	3779:39	10	data
LEAF_NODE	3779:44	3779:44	9	+
FIELD	3779:46	3779:46	9	i
LEAF_NODE	3779:46	3779:46	10	i
LEAF_NODE	3779:48	3779:48	9	*
FIELD	3779:50	3779:50	9	4
LEAF_NODE	3779:50	3779:50	10	4
LEAF_NODE	3779:51	3779:51	8	,
ARGUMENT	3779:53	3779:53	8	3
FIELD	3779:53	3779:53	9	3
LEAF_NODE	3779:53	3779:53	10	3
LEAF_NODE	3779:54	3779:54	8	)
LEAF_NODE	3779:55	3779:55	6	;
JUMP_STATEMENT	3781:1	3781:14	3	return ( i * 3 ) ;
KEYWORD	3781:1	3781:1	4	return
LEAF_NODE	3781:1	3781:1	5	return
DESTINATION	3781:7	3781:7	4	( i * 3 )
EXPR	3781:7	3781:13	5	( i * 3 )
LEAF_NODE	3781:7	3781:7	6	(
FIELD	3781:8	3781:8	6	i
LEAF_NODE	3781:8	3781:8	7	i
LEAF_NODE	3781:10	3781:10	6	*
FIELD	3781:12	3781:12	6	3
LEAF_NODE	3781:12	3781:12	7	3
LEAF_NODE	3781:13	3781:13	6	)
LEAF_NODE	3781:14	3781:14	4	;
LEAF_NODE	3782:0	3782:0	2	}
FUNCTION_DEF	3789:0	3805:0	1	
RETURN_TYPE	3789:0	3789:0	2	tsize_t
TYPE_NAME	3789:0	3789:0	3	tsize_t
LEAF_NODE	3789:0	3789:0	4	tsize_t
FUNCTION_NAME	3790:0	3790:0	2	t2p_sample_rgba_to_rgb
LEAF_NODE	3790:0	3790:0	3	t2p_sample_rgba_to_rgb
PARAMETER_LIST	3790:22	3790:55	2	( tdata_t data , uint32 samplecount )
LEAF_NODE	3790:22	3790:22	3	(
PARAMETER_DECL	3790:23	3790:31	3	tdata_t data
TYPE	3790:23	3790:23	4	tdata_t
TYPE_NAME	3790:23	3790:23	5	tdata_t
LEAF_NODE	3790:23	3790:23	6	tdata_t
NAME	3790:31	3790:31	4	data
LEAF_NODE	3790:31	3790:31	5	data
LEAF_NODE	3790:35	3790:35	3	,
PARAMETER_DECL	3790:37	3790:44	3	uint32 samplecount
TYPE	3790:37	3790:37	4	uint32
TYPE_NAME	3790:37	3790:37	5	uint32
LEAF_NODE	3790:37	3790:37	6	uint32
NAME	3790:44	3790:44	4	samplecount
LEAF_NODE	3790:44	3790:44	5	samplecount
LEAF_NODE	3790:55	3790:55	3	)
LEAF_NODE	3791:0	3791:0	2	{
STATEMENTS	3792:1	3804:1	2	
SIMPLE_DECL	3792:1	3792:13	3	uint32 i ; i = 0 ;
VAR_DECL	3792:1	3792:8	4	uint32 i ; i = 0
TYPE	3792:1	3792:1	5	uint32
TYPE_NAME	3792:1	3792:1	6	uint32
LEAF_NODE	3792:1	3792:1	7	uint32
NAME	3792:8	3792:8	5	i
LEAF_NODE	3792:8	3792:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	3792:8	3792:8	5	i = 0
ASSIGN	3792:8	3792:12	6	i = 0
LVAL	3792:8	3792:8	7	i
NAME	3792:8	3792:8	8	i
LEAF_NODE	3792:8	3792:8	9	i
ASSIGN_OP	3792:10	3792:10	7	=
LEAF_NODE	3792:10	3792:10	8	=
RVAL	3792:12	3792:12	7	0
FIELD	3792:12	3792:12	8	0
LEAF_NODE	3792:12	3792:12	9	0
LEAF_NODE	3792:13	3792:13	4	;
SIMPLE_DECL	3793:1	3793:18	3	uint32 sample ; sample = 0 ;
VAR_DECL	3793:1	3793:8	4	uint32 sample ; sample = 0
TYPE	3793:1	3793:1	5	uint32
TYPE_NAME	3793:1	3793:1	6	uint32
LEAF_NODE	3793:1	3793:1	7	uint32
NAME	3793:8	3793:8	5	sample
LEAF_NODE	3793:8	3793:8	6	sample
LEAF_NODE	0:0	0:0	5	;
INIT	3793:8	3793:8	5	sample = 0
ASSIGN	3793:8	3793:17	6	sample = 0
LVAL	3793:8	3793:8	7	sample
NAME	3793:8	3793:8	8	sample
LEAF_NODE	3793:8	3793:8	9	sample
ASSIGN_OP	3793:15	3793:15	7	=
LEAF_NODE	3793:15	3793:15	8	=
RVAL	3793:17	3793:17	7	0
FIELD	3793:17	3793:17	8	0
LEAF_NODE	3793:17	3793:17	9	0
LEAF_NODE	3793:18	3793:18	4	;
SIMPLE_DECL	3794:1	3794:16	3	uint8 alpha ; alpha = 0 ;
VAR_DECL	3794:1	3794:7	4	uint8 alpha ; alpha = 0
TYPE	3794:1	3794:1	5	uint8
TYPE_NAME	3794:1	3794:1	6	uint8
LEAF_NODE	3794:1	3794:1	7	uint8
NAME	3794:7	3794:7	5	alpha
LEAF_NODE	3794:7	3794:7	6	alpha
LEAF_NODE	0:0	0:0	5	;
INIT	3794:7	3794:7	5	alpha = 0
ASSIGN	3794:7	3794:15	6	alpha = 0
LVAL	3794:7	3794:7	7	alpha
NAME	3794:7	3794:7	8	alpha
LEAF_NODE	3794:7	3794:7	9	alpha
ASSIGN_OP	3794:13	3794:13	7	=
LEAF_NODE	3794:13	3794:13	8	=
RVAL	3794:15	3794:15	7	0
FIELD	3794:15	3794:15	8	0
LEAF_NODE	3794:15	3794:15	9	0
LEAF_NODE	3794:16	3794:16	4	;
ITERATION	3796:1	3796:35	3	
KEYWORD	3796:1	3796:1	4	for
LEAF_NODE	3796:1	3796:1	5	for
LEAF_NODE	3796:5	3796:5	4	(
FOR_INIT	3796:6	3796:11	4	i = 0 ;
EXPR	3796:6	3796:6	5	i = 0
ASSIGN	3796:6	3796:10	6	i = 0
LVAL	3796:6	3796:6	7	i
FIELD	3796:6	3796:6	8	i
LEAF_NODE	3796:6	3796:6	9	i
ASSIGN_OP	3796:8	3796:8	7	=
LEAF_NODE	3796:8	3796:8	8	=
RVAL	3796:10	3796:10	7	0
FIELD	3796:10	3796:10	8	0
LEAF_NODE	3796:10	3796:10	9	0
LEAF_NODE	3796:11	3796:11	5	;
CONDITION	3796:13	3796:13	4	i < samplecount
EXPR	3796:13	3796:17	5	i < samplecount
FIELD	3796:13	3796:13	6	i
LEAF_NODE	3796:13	3796:13	7	i
REL_OPERATOR	3796:15	3796:15	6	<
LEAF_NODE	3796:15	3796:15	7	<
FIELD	3796:17	3796:17	6	samplecount
LEAF_NODE	3796:17	3796:17	7	samplecount
LEAF_NODE	3796:28	3796:28	4	;
FOR_EXPR	3796:30	3796:30	4	i ++
EXPR	3796:30	3796:30	5	i ++
FIELD	3796:30	3796:31	6	i ++
LEAF_NODE	3796:30	3796:30	7	i
LEAF_NODE	3796:31	3796:31	7	++
LEAF_NODE	3796:33	3796:33	4	)
STATEMENTS	3796:35	3802:1	4	
LEAF_NODE	3796:35	3796:35	5	{
STATEMENTS	3797:2	3801:2	5	
EXPR_STATEMENT	3797:2	3797:27	6	sample = ( ( uint32 * ) data ) [ i ] ;
EXPR	3797:2	3797:2	7	sample = ( ( uint32 * ) data ) [ i ]
ASSIGN	3797:2	3797:9	8	sample = ( ( uint32 * ) data ) [ i ]
LVAL	3797:2	3797:2	9	sample
FIELD	3797:2	3797:2	10	sample
LEAF_NODE	3797:2	3797:2	11	sample
ASSIGN_OP	3797:8	3797:8	9	=
LEAF_NODE	3797:8	3797:8	10	=
RVAL	3797:9	3797:26	9	( ( uint32 * ) data ) [ i ]
LEAF_NODE	3797:9	3797:9	10	(
LEAF_NODE	3797:10	3797:10	10	(
TYPE_NAME	3797:11	3797:11	10	uint32
LEAF_NODE	3797:11	3797:11	11	uint32
LEAF_NODE	3797:17	3797:17	10	*
LEAF_NODE	3797:18	3797:18	10	)
FIELD	3797:19	3797:19	10	data
LEAF_NODE	3797:19	3797:19	11	data
LEAF_NODE	3797:23	3797:23	10	)
LEAF_NODE	3797:24	3797:24	10	[
EXPR	3797:25	3797:25	10	i
FIELD	3797:25	3797:25	11	i
LEAF_NODE	3797:25	3797:25	12	i
LEAF_NODE	3797:26	3797:26	10	]
LEAF_NODE	3797:27	3797:27	7	;
EXPR_STATEMENT	3798:2	3798:48	6	alpha = ( uint8 ) ( ( 255 - ( ( sample >> 24 ) & 0xff ) ) ) ;
EXPR	3798:2	3798:2	7	alpha = ( uint8 ) ( ( 255 - ( ( sample >> 24 ) & 0xff ) ) )
ASSIGN	3798:2	3798:8	8	alpha = ( uint8 ) ( ( 255 - ( ( sample >> 24 ) & 0xff ) ) )
LVAL	3798:2	3798:2	9	alpha
FIELD	3798:2	3798:2	10	alpha
LEAF_NODE	3798:2	3798:2	11	alpha
ASSIGN_OP	3798:7	3798:7	9	=
LEAF_NODE	3798:7	3798:7	10	=
RVAL	3798:8	3798:47	9	( uint8 ) ( ( 255 - ( ( sample >> 24 ) & 0xff ) ) )
LEAF_NODE	3798:8	3798:8	10	(
TYPE_NAME	3798:9	3798:9	10	uint8
LEAF_NODE	3798:9	3798:9	11	uint8
LEAF_NODE	3798:14	3798:14	10	)
LEAF_NODE	3798:15	3798:15	10	(
LEAF_NODE	3798:16	3798:16	10	(
FIELD	3798:17	3798:17	10	255
LEAF_NODE	3798:17	3798:17	11	255
LEAF_NODE	3798:21	3798:21	10	-
LEAF_NODE	3798:23	3798:23	10	(
LEAF_NODE	3798:24	3798:24	10	(
FIELD	3798:25	3798:25	10	sample
LEAF_NODE	3798:25	3798:25	11	sample
LEAF_NODE	3798:32	3798:32	10	>>
FIELD	3798:35	3798:35	10	24
LEAF_NODE	3798:35	3798:35	11	24
LEAF_NODE	3798:37	3798:37	10	)
LEAF_NODE	3798:39	3798:39	10	&
FIELD	3798:41	3798:41	10	0xff
LEAF_NODE	3798:41	3798:41	11	0xff
LEAF_NODE	3798:45	3798:45	10	)
LEAF_NODE	3798:46	3798:46	10	)
LEAF_NODE	3798:47	3798:47	10	)
LEAF_NODE	3798:48	3798:48	7	;
EXPR_STATEMENT	3799:2	3799:66	6	( ( uint8 * ) data ) [ i * 3 ] = ( uint8 ) ( ( sample >> 16 ) & 0xff ) + alpha ;
EXPR	3799:2	3799:2	7	( ( uint8 * ) data ) [ i * 3 ] = ( uint8 ) ( ( sample >> 16 ) & 0xff ) + alpha
ASSIGN	3799:2	3799:27	8	( ( uint8 * ) data ) [ i * 3 ] = ( uint8 ) ( ( sample >> 16 ) & 0xff ) + alpha
LVAL	3799:2	3799:23	9	( ( uint8 * ) data ) [ i * 3 ]
LEAF_NODE	3799:2	3799:2	10	(
LEAF_NODE	3799:3	3799:3	10	(
TYPE_NAME	3799:4	3799:4	10	uint8
LEAF_NODE	3799:4	3799:4	11	uint8
LEAF_NODE	3799:10	3799:10	10	*
LEAF_NODE	3799:11	3799:11	10	)
FIELD	3799:12	3799:12	10	data
LEAF_NODE	3799:12	3799:12	11	data
LEAF_NODE	3799:16	3799:16	10	)
LEAF_NODE	3799:17	3799:17	10	[
EXPR	3799:18	3799:22	10	i * 3
FIELD	3799:18	3799:18	11	i
LEAF_NODE	3799:18	3799:18	12	i
LEAF_NODE	3799:20	3799:20	11	*
FIELD	3799:22	3799:22	11	3
LEAF_NODE	3799:22	3799:22	12	3
LEAF_NODE	3799:23	3799:23	10	]
ASSIGN_OP	3799:25	3799:25	9	=
LEAF_NODE	3799:25	3799:25	10	=
RVAL	3799:27	3799:61	9	( uint8 ) ( ( sample >> 16 ) & 0xff ) + alpha
LEAF_NODE	3799:27	3799:27	10	(
TYPE_NAME	3799:28	3799:28	10	uint8
LEAF_NODE	3799:28	3799:28	11	uint8
LEAF_NODE	3799:33	3799:33	10	)
LEAF_NODE	3799:35	3799:35	10	(
LEAF_NODE	3799:36	3799:36	10	(
FIELD	3799:37	3799:37	10	sample
LEAF_NODE	3799:37	3799:37	11	sample
LEAF_NODE	3799:44	3799:44	10	>>
FIELD	3799:47	3799:47	10	16
LEAF_NODE	3799:47	3799:47	11	16
LEAF_NODE	3799:49	3799:49	10	)
LEAF_NODE	3799:51	3799:51	10	&
FIELD	3799:53	3799:53	10	0xff
LEAF_NODE	3799:53	3799:53	11	0xff
LEAF_NODE	3799:57	3799:57	10	)
LEAF_NODE	3799:59	3799:59	10	+
FIELD	3799:61	3799:61	10	alpha
LEAF_NODE	3799:61	3799:61	11	alpha
LEAF_NODE	3799:66	3799:66	7	;
EXPR_STATEMENT	3800:2	3800:69	6	( ( uint8 * ) data ) [ i * 3 + 1 ] = ( uint8 ) ( ( sample >> 8 ) & 0xff ) + alpha ;
EXPR	3800:2	3800:2	7	( ( uint8 * ) data ) [ i * 3 + 1 ] = ( uint8 ) ( ( sample >> 8 ) & 0xff ) + alpha
ASSIGN	3800:2	3800:31	8	( ( uint8 * ) data ) [ i * 3 + 1 ] = ( uint8 ) ( ( sample >> 8 ) & 0xff ) + alpha
LVAL	3800:2	3800:27	9	( ( uint8 * ) data ) [ i * 3 + 1 ]
LEAF_NODE	3800:2	3800:2	10	(
LEAF_NODE	3800:3	3800:3	10	(
TYPE_NAME	3800:4	3800:4	10	uint8
LEAF_NODE	3800:4	3800:4	11	uint8
LEAF_NODE	3800:10	3800:10	10	*
LEAF_NODE	3800:11	3800:11	10	)
FIELD	3800:12	3800:12	10	data
LEAF_NODE	3800:12	3800:12	11	data
LEAF_NODE	3800:16	3800:16	10	)
LEAF_NODE	3800:17	3800:17	10	[
EXPR	3800:18	3800:26	10	i * 3 + 1
FIELD	3800:18	3800:18	11	i
LEAF_NODE	3800:18	3800:18	12	i
LEAF_NODE	3800:20	3800:20	11	*
FIELD	3800:22	3800:22	11	3
LEAF_NODE	3800:22	3800:22	12	3
LEAF_NODE	3800:24	3800:24	11	+
FIELD	3800:26	3800:26	11	1
LEAF_NODE	3800:26	3800:26	12	1
LEAF_NODE	3800:27	3800:27	10	]
ASSIGN_OP	3800:29	3800:29	9	=
LEAF_NODE	3800:29	3800:29	10	=
RVAL	3800:31	3800:64	9	( uint8 ) ( ( sample >> 8 ) & 0xff ) + alpha
LEAF_NODE	3800:31	3800:31	10	(
TYPE_NAME	3800:32	3800:32	10	uint8
LEAF_NODE	3800:32	3800:32	11	uint8
LEAF_NODE	3800:37	3800:37	10	)
LEAF_NODE	3800:39	3800:39	10	(
LEAF_NODE	3800:40	3800:40	10	(
FIELD	3800:41	3800:41	10	sample
LEAF_NODE	3800:41	3800:41	11	sample
LEAF_NODE	3800:48	3800:48	10	>>
FIELD	3800:51	3800:51	10	8
LEAF_NODE	3800:51	3800:51	11	8
LEAF_NODE	3800:52	3800:52	10	)
LEAF_NODE	3800:54	3800:54	10	&
FIELD	3800:56	3800:56	10	0xff
LEAF_NODE	3800:56	3800:56	11	0xff
LEAF_NODE	3800:60	3800:60	10	)
LEAF_NODE	3800:62	3800:62	10	+
FIELD	3800:64	3800:64	10	alpha
LEAF_NODE	3800:64	3800:64	11	alpha
LEAF_NODE	3800:69	3800:69	7	;
EXPR_STATEMENT	3801:2	3801:62	6	( ( uint8 * ) data ) [ i * 3 + 2 ] = ( uint8 ) ( sample & 0xff ) + alpha ;
EXPR	3801:2	3801:2	7	( ( uint8 * ) data ) [ i * 3 + 2 ] = ( uint8 ) ( sample & 0xff ) + alpha
ASSIGN	3801:2	3801:31	8	( ( uint8 * ) data ) [ i * 3 + 2 ] = ( uint8 ) ( sample & 0xff ) + alpha
LVAL	3801:2	3801:27	9	( ( uint8 * ) data ) [ i * 3 + 2 ]
LEAF_NODE	3801:2	3801:2	10	(
LEAF_NODE	3801:3	3801:3	10	(
TYPE_NAME	3801:4	3801:4	10	uint8
LEAF_NODE	3801:4	3801:4	11	uint8
LEAF_NODE	3801:10	3801:10	10	*
LEAF_NODE	3801:11	3801:11	10	)
FIELD	3801:12	3801:12	10	data
LEAF_NODE	3801:12	3801:12	11	data
LEAF_NODE	3801:16	3801:16	10	)
LEAF_NODE	3801:17	3801:17	10	[
EXPR	3801:18	3801:26	10	i * 3 + 2
FIELD	3801:18	3801:18	11	i
LEAF_NODE	3801:18	3801:18	12	i
LEAF_NODE	3801:20	3801:20	11	*
FIELD	3801:22	3801:22	11	3
LEAF_NODE	3801:22	3801:22	12	3
LEAF_NODE	3801:24	3801:24	11	+
FIELD	3801:26	3801:26	11	2
LEAF_NODE	3801:26	3801:26	12	2
LEAF_NODE	3801:27	3801:27	10	]
ASSIGN_OP	3801:29	3801:29	9	=
LEAF_NODE	3801:29	3801:29	10	=
RVAL	3801:31	3801:57	9	( uint8 ) ( sample & 0xff ) + alpha
LEAF_NODE	3801:31	3801:31	10	(
TYPE_NAME	3801:32	3801:32	10	uint8
LEAF_NODE	3801:32	3801:32	11	uint8
LEAF_NODE	3801:37	3801:37	10	)
LEAF_NODE	3801:39	3801:39	10	(
FIELD	3801:40	3801:40	10	sample
LEAF_NODE	3801:40	3801:40	11	sample
LEAF_NODE	3801:47	3801:47	10	&
FIELD	3801:49	3801:49	10	0xff
LEAF_NODE	3801:49	3801:49	11	0xff
LEAF_NODE	3801:53	3801:53	10	)
LEAF_NODE	3801:55	3801:55	10	+
FIELD	3801:57	3801:57	10	alpha
LEAF_NODE	3801:57	3801:57	11	alpha
LEAF_NODE	3801:62	3801:62	7	;
LEAF_NODE	3802:1	3802:1	5	}
JUMP_STATEMENT	3804:1	3804:15	3	return ( i * 3 ) ;
KEYWORD	3804:1	3804:1	4	return
LEAF_NODE	3804:1	3804:1	5	return
DESTINATION	3804:8	3804:8	4	( i * 3 )
EXPR	3804:8	3804:14	5	( i * 3 )
LEAF_NODE	3804:8	3804:8	6	(
FIELD	3804:9	3804:9	6	i
LEAF_NODE	3804:9	3804:9	7	i
LEAF_NODE	3804:11	3804:11	6	*
FIELD	3804:13	3804:13	6	3
LEAF_NODE	3804:13	3804:13	7	3
LEAF_NODE	3804:14	3804:14	6	)
LEAF_NODE	3804:15	3804:15	4	;
LEAF_NODE	3805:0	3805:0	2	}
FUNCTION_DEF	3812:0	3832:0	1	
RETURN_TYPE	3812:0	3812:0	2	tsize_t
TYPE_NAME	3812:0	3812:0	3	tsize_t
LEAF_NODE	3812:0	3812:0	4	tsize_t
FUNCTION_NAME	3812:8	3812:8	2	t2p_sample_lab_signed_to_unsigned
LEAF_NODE	3812:8	3812:8	3	t2p_sample_lab_signed_to_unsigned
PARAMETER_LIST	3812:41	3812:76	2	( tdata_t buffer , uint32 samplecount )
LEAF_NODE	3812:41	3812:41	3	(
PARAMETER_DECL	3812:42	3812:50	3	tdata_t buffer
TYPE	3812:42	3812:42	4	tdata_t
TYPE_NAME	3812:42	3812:42	5	tdata_t
LEAF_NODE	3812:42	3812:42	6	tdata_t
NAME	3812:50	3812:50	4	buffer
LEAF_NODE	3812:50	3812:50	5	buffer
LEAF_NODE	3812:56	3812:56	3	,
PARAMETER_DECL	3812:58	3812:65	3	uint32 samplecount
TYPE	3812:58	3812:58	4	uint32
TYPE_NAME	3812:58	3812:58	5	uint32
LEAF_NODE	3812:58	3812:58	6	uint32
NAME	3812:65	3812:65	4	samplecount
LEAF_NODE	3812:65	3812:65	5	samplecount
LEAF_NODE	3812:76	3812:76	3	)
LEAF_NODE	3812:77	3812:77	2	{
STATEMENTS	3814:1	3831:1	2	
SIMPLE_DECL	3814:1	3814:11	3	uint32 i ; i = 0 ;
VAR_DECL	3814:1	3814:8	4	uint32 i ; i = 0
TYPE	3814:1	3814:1	5	uint32
TYPE_NAME	3814:1	3814:1	6	uint32
LEAF_NODE	3814:1	3814:1	7	uint32
NAME	3814:8	3814:8	5	i
LEAF_NODE	3814:8	3814:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	3814:8	3814:8	5	i = 0
ASSIGN	3814:8	3814:10	6	i = 0
LVAL	3814:8	3814:8	7	i
NAME	3814:8	3814:8	8	i
LEAF_NODE	3814:8	3814:8	9	i
ASSIGN_OP	3814:9	3814:9	7	=
LEAF_NODE	3814:9	3814:9	8	=
RVAL	3814:10	3814:10	7	0
FIELD	3814:10	3814:10	8	0
LEAF_NODE	3814:10	3814:10	9	0
LEAF_NODE	3814:11	3814:11	4	;
ITERATION	3816:1	3816:27	3	
KEYWORD	3816:1	3816:1	4	for
LEAF_NODE	3816:1	3816:1	5	for
LEAF_NODE	3816:4	3816:4	4	(
FOR_INIT	3816:5	3816:8	4	i = 0 ;
EXPR	3816:5	3816:5	5	i = 0
ASSIGN	3816:5	3816:7	6	i = 0
LVAL	3816:5	3816:5	7	i
FIELD	3816:5	3816:5	8	i
LEAF_NODE	3816:5	3816:5	9	i
ASSIGN_OP	3816:6	3816:6	7	=
LEAF_NODE	3816:6	3816:6	8	=
RVAL	3816:7	3816:7	7	0
FIELD	3816:7	3816:7	8	0
LEAF_NODE	3816:7	3816:7	9	0
LEAF_NODE	3816:8	3816:8	5	;
CONDITION	3816:9	3816:9	4	i < samplecount
EXPR	3816:9	3816:11	5	i < samplecount
FIELD	3816:9	3816:9	6	i
LEAF_NODE	3816:9	3816:9	7	i
REL_OPERATOR	3816:10	3816:10	6	<
LEAF_NODE	3816:10	3816:10	7	<
FIELD	3816:11	3816:11	6	samplecount
LEAF_NODE	3816:11	3816:11	7	samplecount
LEAF_NODE	3816:22	3816:22	4	;
FOR_EXPR	3816:23	3816:23	4	i ++
EXPR	3816:23	3816:23	5	i ++
FIELD	3816:23	3816:24	6	i ++
LEAF_NODE	3816:23	3816:23	7	i
LEAF_NODE	3816:24	3816:24	7	++
LEAF_NODE	3816:26	3816:26	4	)
STATEMENTS	3816:27	3829:1	4	
LEAF_NODE	3816:27	3816:27	5	{
STATEMENTS	3817:2	3826:4	5	
SELECTION	3817:2	3817:53	6	
KEYWORD	3817:2	3817:2	7	if
LEAF_NODE	3817:2	3817:2	8	if
LEAF_NODE	3817:4	3817:4	7	(
CONDITION	3817:6	3817:6	7	( ( ( unsigned char * ) buffer ) [ ( i * 3 ) + 1 ] & 0x80 ) != 0
EXPR	3817:6	3817:51	8	( ( ( unsigned char * ) buffer ) [ ( i * 3 ) + 1 ] & 0x80 ) != 0
LEAF_NODE	3817:6	3817:6	9	(
LEAF_NODE	3817:7	3817:7	9	(
LEAF_NODE	3817:8	3817:8	9	(
TYPE_NAME	3817:9	3817:18	9	unsigned char
LEAF_NODE	3817:9	3817:9	10	unsigned
LEAF_NODE	3817:18	3817:18	10	char
LEAF_NODE	3817:22	3817:22	9	*
LEAF_NODE	3817:23	3817:23	9	)
FIELD	3817:24	3817:24	9	buffer
LEAF_NODE	3817:24	3817:24	10	buffer
LEAF_NODE	3817:30	3817:30	9	)
LEAF_NODE	3817:31	3817:31	9	[
EXPR	3817:32	3817:38	9	( i * 3 ) + 1
LEAF_NODE	3817:32	3817:32	10	(
FIELD	3817:33	3817:33	10	i
LEAF_NODE	3817:33	3817:33	11	i
LEAF_NODE	3817:34	3817:34	10	*
FIELD	3817:35	3817:35	10	3
LEAF_NODE	3817:35	3817:35	11	3
LEAF_NODE	3817:36	3817:36	10	)
LEAF_NODE	3817:37	3817:37	10	+
FIELD	3817:38	3817:38	10	1
LEAF_NODE	3817:38	3817:38	11	1
LEAF_NODE	3817:39	3817:39	9	]
LEAF_NODE	3817:41	3817:41	9	&
FIELD	3817:43	3817:43	9	0x80
LEAF_NODE	3817:43	3817:43	10	0x80
LEAF_NODE	3817:47	3817:47	9	)
EQ_OPERATOR	3817:49	3817:49	9	!=
LEAF_NODE	3817:49	3817:49	10	!=
FIELD	3817:51	3817:51	9	0
LEAF_NODE	3817:51	3817:51	10	0
LEAF_NODE	3817:52	3817:52	7	)
STATEMENTS	3817:53	3820:2	7	
LEAF_NODE	3817:53	3817:53	8	{
STATEMENTS	3818:3	3818:3	8	
EXPR_STATEMENT	3818:3	3819:52	9	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 1 ] = ( unsigned char ) ( 0x80 + ( ( char * ) buffer ) [ ( i * 3 ) + 1 ] ) ;
EXPR	3818:3	3818:3	10	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 1 ] = ( unsigned char ) ( 0x80 + ( ( char * ) buffer ) [ ( i * 3 ) + 1 ] )
ASSIGN	3818:3	3819:4	11	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 1 ] = ( unsigned char ) ( 0x80 + ( ( char * ) buffer ) [ ( i * 3 ) + 1 ] )
LVAL	3818:3	3818:35	12	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 1 ]
LEAF_NODE	3818:3	3818:3	13	(
LEAF_NODE	3818:4	3818:4	13	(
TYPE_NAME	3818:5	3818:14	13	unsigned char
LEAF_NODE	3818:5	3818:5	14	unsigned
LEAF_NODE	3818:14	3818:14	14	char
LEAF_NODE	3818:18	3818:18	13	*
LEAF_NODE	3818:19	3818:19	13	)
FIELD	3818:20	3818:20	13	buffer
LEAF_NODE	3818:20	3818:20	14	buffer
LEAF_NODE	3818:26	3818:26	13	)
LEAF_NODE	3818:27	3818:27	13	[
EXPR	3818:28	3818:34	13	( i * 3 ) + 1
LEAF_NODE	3818:28	3818:28	14	(
FIELD	3818:29	3818:29	14	i
LEAF_NODE	3818:29	3818:29	15	i
LEAF_NODE	3818:30	3818:30	14	*
FIELD	3818:31	3818:31	14	3
LEAF_NODE	3818:31	3818:31	15	3
LEAF_NODE	3818:32	3818:32	14	)
LEAF_NODE	3818:33	3818:33	14	+
FIELD	3818:34	3818:34	14	1
LEAF_NODE	3818:34	3818:34	15	1
LEAF_NODE	3818:35	3818:35	13	]
ASSIGN_OP	3818:37	3818:37	12	=
LEAF_NODE	3818:37	3818:37	13	=
RVAL	3819:4	3819:51	12	( unsigned char ) ( 0x80 + ( ( char * ) buffer ) [ ( i * 3 ) + 1 ] )
LEAF_NODE	3819:4	3819:4	13	(
TYPE_NAME	3819:5	3819:14	13	unsigned char
LEAF_NODE	3819:5	3819:5	14	unsigned
LEAF_NODE	3819:14	3819:14	14	char
LEAF_NODE	3819:18	3819:18	13	)
LEAF_NODE	3819:19	3819:19	13	(
FIELD	3819:20	3819:20	13	0x80
LEAF_NODE	3819:20	3819:20	14	0x80
LEAF_NODE	3819:25	3819:25	13	+
LEAF_NODE	3819:27	3819:27	13	(
LEAF_NODE	3819:28	3819:28	13	(
TYPE_NAME	3819:29	3819:29	13	char
LEAF_NODE	3819:29	3819:29	14	char
LEAF_NODE	3819:33	3819:33	13	*
LEAF_NODE	3819:34	3819:34	13	)
FIELD	3819:35	3819:35	13	buffer
LEAF_NODE	3819:35	3819:35	14	buffer
LEAF_NODE	3819:41	3819:41	13	)
LEAF_NODE	3819:42	3819:42	13	[
EXPR	3819:43	3819:49	13	( i * 3 ) + 1
LEAF_NODE	3819:43	3819:43	14	(
FIELD	3819:44	3819:44	14	i
LEAF_NODE	3819:44	3819:44	15	i
LEAF_NODE	3819:45	3819:45	14	*
FIELD	3819:46	3819:46	14	3
LEAF_NODE	3819:46	3819:46	15	3
LEAF_NODE	3819:47	3819:47	14	)
LEAF_NODE	3819:48	3819:48	14	+
FIELD	3819:49	3819:49	14	1
LEAF_NODE	3819:49	3819:49	15	1
LEAF_NODE	3819:50	3819:50	13	]
LEAF_NODE	3819:51	3819:51	13	)
LEAF_NODE	3819:52	3819:52	10	;
LEAF_NODE	3820:2	3820:2	8	}
SELECTION	3820:4	3820:9	6	
KEYWORD	3820:4	3820:4	7	else
LEAF_NODE	3820:4	3820:4	8	else
STATEMENTS	3820:9	3822:2	7	
LEAF_NODE	3820:9	3820:9	8	{
STATEMENTS	3821:3	3821:3	8	
EXPR_STATEMENT	3821:3	3821:44	9	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 1 ] |= 0x80 ;
EXPR	3821:3	3821:3	10	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 1 ] |= 0x80
ASSIGN	3821:3	3821:40	11	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 1 ] |= 0x80
LVAL	3821:3	3821:35	12	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 1 ]
LEAF_NODE	3821:3	3821:3	13	(
LEAF_NODE	3821:4	3821:4	13	(
TYPE_NAME	3821:5	3821:14	13	unsigned char
LEAF_NODE	3821:5	3821:5	14	unsigned
LEAF_NODE	3821:14	3821:14	14	char
LEAF_NODE	3821:18	3821:18	13	*
LEAF_NODE	3821:19	3821:19	13	)
FIELD	3821:20	3821:20	13	buffer
LEAF_NODE	3821:20	3821:20	14	buffer
LEAF_NODE	3821:26	3821:26	13	)
LEAF_NODE	3821:27	3821:27	13	[
EXPR	3821:28	3821:34	13	( i * 3 ) + 1
LEAF_NODE	3821:28	3821:28	14	(
FIELD	3821:29	3821:29	14	i
LEAF_NODE	3821:29	3821:29	15	i
LEAF_NODE	3821:30	3821:30	14	*
FIELD	3821:31	3821:31	14	3
LEAF_NODE	3821:31	3821:31	15	3
LEAF_NODE	3821:32	3821:32	14	)
LEAF_NODE	3821:33	3821:33	14	+
FIELD	3821:34	3821:34	14	1
LEAF_NODE	3821:34	3821:34	15	1
LEAF_NODE	3821:35	3821:35	13	]
ASSIGN_OP	3821:37	3821:37	12	|=
LEAF_NODE	3821:37	3821:37	13	|=
RVAL	3821:40	3821:40	12	0x80
FIELD	3821:40	3821:40	13	0x80
LEAF_NODE	3821:40	3821:40	14	0x80
LEAF_NODE	3821:44	3821:44	10	;
LEAF_NODE	3822:2	3822:2	8	}
SELECTION	3823:2	3823:53	6	
KEYWORD	3823:2	3823:2	7	if
LEAF_NODE	3823:2	3823:2	8	if
LEAF_NODE	3823:4	3823:4	7	(
CONDITION	3823:6	3823:6	7	( ( ( unsigned char * ) buffer ) [ ( i * 3 ) + 2 ] & 0x80 ) != 0
EXPR	3823:6	3823:51	8	( ( ( unsigned char * ) buffer ) [ ( i * 3 ) + 2 ] & 0x80 ) != 0
LEAF_NODE	3823:6	3823:6	9	(
LEAF_NODE	3823:7	3823:7	9	(
LEAF_NODE	3823:8	3823:8	9	(
TYPE_NAME	3823:9	3823:18	9	unsigned char
LEAF_NODE	3823:9	3823:9	10	unsigned
LEAF_NODE	3823:18	3823:18	10	char
LEAF_NODE	3823:22	3823:22	9	*
LEAF_NODE	3823:23	3823:23	9	)
FIELD	3823:24	3823:24	9	buffer
LEAF_NODE	3823:24	3823:24	10	buffer
LEAF_NODE	3823:30	3823:30	9	)
LEAF_NODE	3823:31	3823:31	9	[
EXPR	3823:32	3823:38	9	( i * 3 ) + 2
LEAF_NODE	3823:32	3823:32	10	(
FIELD	3823:33	3823:33	10	i
LEAF_NODE	3823:33	3823:33	11	i
LEAF_NODE	3823:34	3823:34	10	*
FIELD	3823:35	3823:35	10	3
LEAF_NODE	3823:35	3823:35	11	3
LEAF_NODE	3823:36	3823:36	10	)
LEAF_NODE	3823:37	3823:37	10	+
FIELD	3823:38	3823:38	10	2
LEAF_NODE	3823:38	3823:38	11	2
LEAF_NODE	3823:39	3823:39	9	]
LEAF_NODE	3823:41	3823:41	9	&
FIELD	3823:43	3823:43	9	0x80
LEAF_NODE	3823:43	3823:43	10	0x80
LEAF_NODE	3823:47	3823:47	9	)
EQ_OPERATOR	3823:49	3823:49	9	!=
LEAF_NODE	3823:49	3823:49	10	!=
FIELD	3823:51	3823:51	9	0
LEAF_NODE	3823:51	3823:51	10	0
LEAF_NODE	3823:52	3823:52	7	)
STATEMENTS	3823:53	3826:2	7	
LEAF_NODE	3823:53	3823:53	8	{
STATEMENTS	3824:3	3824:3	8	
EXPR_STATEMENT	3824:3	3825:52	9	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 2 ] = ( unsigned char ) ( 0x80 + ( ( char * ) buffer ) [ ( i * 3 ) + 2 ] ) ;
EXPR	3824:3	3824:3	10	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 2 ] = ( unsigned char ) ( 0x80 + ( ( char * ) buffer ) [ ( i * 3 ) + 2 ] )
ASSIGN	3824:3	3825:4	11	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 2 ] = ( unsigned char ) ( 0x80 + ( ( char * ) buffer ) [ ( i * 3 ) + 2 ] )
LVAL	3824:3	3824:35	12	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 2 ]
LEAF_NODE	3824:3	3824:3	13	(
LEAF_NODE	3824:4	3824:4	13	(
TYPE_NAME	3824:5	3824:14	13	unsigned char
LEAF_NODE	3824:5	3824:5	14	unsigned
LEAF_NODE	3824:14	3824:14	14	char
LEAF_NODE	3824:18	3824:18	13	*
LEAF_NODE	3824:19	3824:19	13	)
FIELD	3824:20	3824:20	13	buffer
LEAF_NODE	3824:20	3824:20	14	buffer
LEAF_NODE	3824:26	3824:26	13	)
LEAF_NODE	3824:27	3824:27	13	[
EXPR	3824:28	3824:34	13	( i * 3 ) + 2
LEAF_NODE	3824:28	3824:28	14	(
FIELD	3824:29	3824:29	14	i
LEAF_NODE	3824:29	3824:29	15	i
LEAF_NODE	3824:30	3824:30	14	*
FIELD	3824:31	3824:31	14	3
LEAF_NODE	3824:31	3824:31	15	3
LEAF_NODE	3824:32	3824:32	14	)
LEAF_NODE	3824:33	3824:33	14	+
FIELD	3824:34	3824:34	14	2
LEAF_NODE	3824:34	3824:34	15	2
LEAF_NODE	3824:35	3824:35	13	]
ASSIGN_OP	3824:37	3824:37	12	=
LEAF_NODE	3824:37	3824:37	13	=
RVAL	3825:4	3825:51	12	( unsigned char ) ( 0x80 + ( ( char * ) buffer ) [ ( i * 3 ) + 2 ] )
LEAF_NODE	3825:4	3825:4	13	(
TYPE_NAME	3825:5	3825:14	13	unsigned char
LEAF_NODE	3825:5	3825:5	14	unsigned
LEAF_NODE	3825:14	3825:14	14	char
LEAF_NODE	3825:18	3825:18	13	)
LEAF_NODE	3825:19	3825:19	13	(
FIELD	3825:20	3825:20	13	0x80
LEAF_NODE	3825:20	3825:20	14	0x80
LEAF_NODE	3825:25	3825:25	13	+
LEAF_NODE	3825:27	3825:27	13	(
LEAF_NODE	3825:28	3825:28	13	(
TYPE_NAME	3825:29	3825:29	13	char
LEAF_NODE	3825:29	3825:29	14	char
LEAF_NODE	3825:33	3825:33	13	*
LEAF_NODE	3825:34	3825:34	13	)
FIELD	3825:35	3825:35	13	buffer
LEAF_NODE	3825:35	3825:35	14	buffer
LEAF_NODE	3825:41	3825:41	13	)
LEAF_NODE	3825:42	3825:42	13	[
EXPR	3825:43	3825:49	13	( i * 3 ) + 2
LEAF_NODE	3825:43	3825:43	14	(
FIELD	3825:44	3825:44	14	i
LEAF_NODE	3825:44	3825:44	15	i
LEAF_NODE	3825:45	3825:45	14	*
FIELD	3825:46	3825:46	14	3
LEAF_NODE	3825:46	3825:46	15	3
LEAF_NODE	3825:47	3825:47	14	)
LEAF_NODE	3825:48	3825:48	14	+
FIELD	3825:49	3825:49	14	2
LEAF_NODE	3825:49	3825:49	15	2
LEAF_NODE	3825:50	3825:50	13	]
LEAF_NODE	3825:51	3825:51	13	)
LEAF_NODE	3825:52	3825:52	10	;
LEAF_NODE	3826:2	3826:2	8	}
SELECTION	3826:4	3826:9	6	
KEYWORD	3826:4	3826:4	7	else
LEAF_NODE	3826:4	3826:4	8	else
STATEMENTS	3826:9	3828:2	7	
LEAF_NODE	3826:9	3826:9	8	{
STATEMENTS	3827:3	3827:3	8	
EXPR_STATEMENT	3827:3	3827:44	9	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 2 ] |= 0x80 ;
EXPR	3827:3	3827:3	10	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 2 ] |= 0x80
ASSIGN	3827:3	3827:40	11	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 2 ] |= 0x80
LVAL	3827:3	3827:35	12	( ( unsigned char * ) buffer ) [ ( i * 3 ) + 2 ]
LEAF_NODE	3827:3	3827:3	13	(
LEAF_NODE	3827:4	3827:4	13	(
TYPE_NAME	3827:5	3827:14	13	unsigned char
LEAF_NODE	3827:5	3827:5	14	unsigned
LEAF_NODE	3827:14	3827:14	14	char
LEAF_NODE	3827:18	3827:18	13	*
LEAF_NODE	3827:19	3827:19	13	)
FIELD	3827:20	3827:20	13	buffer
LEAF_NODE	3827:20	3827:20	14	buffer
LEAF_NODE	3827:26	3827:26	13	)
LEAF_NODE	3827:27	3827:27	13	[
EXPR	3827:28	3827:34	13	( i * 3 ) + 2
LEAF_NODE	3827:28	3827:28	14	(
FIELD	3827:29	3827:29	14	i
LEAF_NODE	3827:29	3827:29	15	i
LEAF_NODE	3827:30	3827:30	14	*
FIELD	3827:31	3827:31	14	3
LEAF_NODE	3827:31	3827:31	15	3
LEAF_NODE	3827:32	3827:32	14	)
LEAF_NODE	3827:33	3827:33	14	+
FIELD	3827:34	3827:34	14	2
LEAF_NODE	3827:34	3827:34	15	2
LEAF_NODE	3827:35	3827:35	13	]
ASSIGN_OP	3827:37	3827:37	12	|=
LEAF_NODE	3827:37	3827:37	13	|=
RVAL	3827:40	3827:40	12	0x80
FIELD	3827:40	3827:40	13	0x80
LEAF_NODE	3827:40	3827:40	14	0x80
LEAF_NODE	3827:44	3827:44	10	;
LEAF_NODE	3828:2	3828:2	8	}
LEAF_NODE	3829:1	3829:1	5	}
JUMP_STATEMENT	3831:1	3831:22	3	return ( samplecount * 3 ) ;
KEYWORD	3831:1	3831:1	4	return
LEAF_NODE	3831:1	3831:1	5	return
DESTINATION	3831:7	3831:7	4	( samplecount * 3 )
EXPR	3831:7	3831:21	5	( samplecount * 3 )
LEAF_NODE	3831:7	3831:7	6	(
FIELD	3831:8	3831:8	6	samplecount
LEAF_NODE	3831:8	3831:8	7	samplecount
LEAF_NODE	3831:19	3831:19	6	*
FIELD	3831:20	3831:20	6	3
LEAF_NODE	3831:20	3831:20	7	3
LEAF_NODE	3831:21	3831:21	6	)
LEAF_NODE	3831:22	3831:22	4	;
LEAF_NODE	3832:0	3832:0	2	}
FUNCTION_DEF	3838:0	3852:0	1	
RETURN_TYPE	3838:0	3838:0	2	tsize_t
TYPE_NAME	3838:0	3838:0	3	tsize_t
LEAF_NODE	3838:0	3838:0	4	tsize_t
FUNCTION_NAME	3838:8	3838:8	2	t2p_write_pdf_header
LEAF_NODE	3838:8	3838:8	3	t2p_write_pdf_header
PARAMETER_LIST	3838:28	3838:51	2	( T2P * t2p , TIFF * output )
LEAF_NODE	3838:28	3838:28	3	(
PARAMETER_DECL	3838:29	3838:34	3	T2P * t2p
TYPE	3838:29	3838:32	4	T2P *
TYPE_NAME	3838:29	3838:29	5	T2P
LEAF_NODE	3838:29	3838:29	6	T2P
POINTER	3838:32	3838:32	5	*
LEAF_NODE	3838:32	3838:32	6	*
NAME	3838:34	3838:34	4	t2p
LEAF_NODE	3838:34	3838:34	5	t2p
LEAF_NODE	3838:37	3838:37	3	,
PARAMETER_DECL	3838:39	3838:45	3	TIFF * output
TYPE	3838:39	3838:43	4	TIFF *
TYPE_NAME	3838:39	3838:39	5	TIFF
LEAF_NODE	3838:39	3838:39	6	TIFF
POINTER	3838:43	3838:43	5	*
LEAF_NODE	3838:43	3838:43	6	*
NAME	3838:45	3838:45	4	output
LEAF_NODE	3838:45	3838:45	5	output
LEAF_NODE	3838:51	3838:51	3	)
LEAF_NODE	3838:52	3838:52	2	{
STATEMENTS	3840:1	3851:16	2	
SIMPLE_DECL	3840:1	3840:18	3	tsize_t written ; written = 0 ;
VAR_DECL	3840:1	3840:9	4	tsize_t written ; written = 0
TYPE	3840:1	3840:1	5	tsize_t
TYPE_NAME	3840:1	3840:1	6	tsize_t
LEAF_NODE	3840:1	3840:1	7	tsize_t
NAME	3840:9	3840:9	5	written
LEAF_NODE	3840:9	3840:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	3840:9	3840:9	5	written = 0
ASSIGN	3840:9	3840:17	6	written = 0
LVAL	3840:9	3840:9	7	written
NAME	3840:9	3840:9	8	written
LEAF_NODE	3840:9	3840:9	9	written
ASSIGN_OP	3840:16	3840:16	7	=
LEAF_NODE	3840:16	3840:16	8	=
RVAL	3840:17	3840:17	7	0
FIELD	3840:17	3840:17	8	0
LEAF_NODE	3840:17	3840:17	9	0
LEAF_NODE	3840:18	3840:18	4	;
SIMPLE_DECL	3841:1	3841:16	3	char [ 16 ] buffer ;
VAR_DECL	3841:1	3841:6	4	char [ 16 ] buffer
TYPE	3841:1	3841:12	5	char [ 16 ]
TYPE_NAME	3841:1	3841:1	6	char
LEAF_NODE	3841:1	3841:1	7	char
TYPE_SUFFIX	3841:12	3841:15	6	[ 16 ]
LEAF_NODE	3841:12	3841:12	7	[
FIELD	3841:13	3841:13	7	16
LEAF_NODE	3841:13	3841:13	8	16
LEAF_NODE	3841:15	3841:15	7	]
NAME	3841:6	3841:6	5	buffer
LEAF_NODE	3841:6	3841:6	6	buffer
LEAF_NODE	3841:16	3841:16	4	;
SIMPLE_DECL	3842:1	3842:13	3	int buflen ; buflen = 0 ;
VAR_DECL	3842:1	3842:5	4	int buflen ; buflen = 0
TYPE	3842:1	3842:1	5	int
TYPE_NAME	3842:1	3842:1	6	int
LEAF_NODE	3842:1	3842:1	7	int
NAME	3842:5	3842:5	5	buflen
LEAF_NODE	3842:5	3842:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	3842:5	3842:5	5	buflen = 0
ASSIGN	3842:5	3842:12	6	buflen = 0
LVAL	3842:5	3842:5	7	buflen
NAME	3842:5	3842:5	8	buflen
LEAF_NODE	3842:5	3842:5	9	buflen
ASSIGN_OP	3842:11	3842:11	7	=
LEAF_NODE	3842:11	3842:11	8	=
RVAL	3842:12	3842:12	7	0
FIELD	3842:12	3842:12	8	0
LEAF_NODE	3842:12	3842:12	9	0
LEAF_NODE	3842:13	3842:13	4	;
EXPR_STATEMENT	3844:1	3846:32	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%%PDF-%u.%u " , t2p -> pdf_majorversion & 0xff , t2p -> pdf_minorversion & 0xff ) ;
EXPR	3844:1	3844:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%%PDF-%u.%u " , t2p -> pdf_majorversion & 0xff , t2p -> pdf_minorversion & 0xff )
ASSIGN	3844:1	3844:10	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%%PDF-%u.%u " , t2p -> pdf_majorversion & 0xff , t2p -> pdf_minorversion & 0xff )
LVAL	3844:1	3844:1	6	buflen
FIELD	3844:1	3844:1	7	buflen
LEAF_NODE	3844:1	3844:1	8	buflen
ASSIGN_OP	3844:8	3844:8	6	=
LEAF_NODE	3844:8	3844:8	7	=
RVAL	3844:10	3844:10	6	snprintf ( buffer , sizeof ( buffer ) , "%%PDF-%u.%u " , t2p -> pdf_majorversion & 0xff , t2p -> pdf_minorversion & 0xff )
FUNCTION_CALL	3844:10	3846:31	7	snprintf ( buffer , sizeof ( buffer ) , "%%PDF-%u.%u " , t2p -> pdf_majorversion & 0xff , t2p -> pdf_minorversion & 0xff )
CALLEE	3844:10	3844:10	8	snprintf
LEAF_NODE	3844:10	3844:10	9	snprintf
LEAF_NODE	3844:18	3844:18	8	(
ARGUMENT	3844:19	3844:19	8	buffer
FIELD	3844:19	3844:19	9	buffer
LEAF_NODE	3844:19	3844:19	10	buffer
LEAF_NODE	3844:25	3844:25	8	,
ARGUMENT	3844:27	3844:27	8	sizeof ( buffer )
FUNCTION_CALL	3844:27	3844:40	9	sizeof ( buffer )
CALLEE	3844:27	3844:27	10	sizeof
LEAF_NODE	3844:27	3844:27	11	sizeof
LEAF_NODE	3844:33	3844:33	10	(
ARGUMENT	3844:34	3844:34	10	buffer
FIELD	3844:34	3844:34	11	buffer
LEAF_NODE	3844:34	3844:34	12	buffer
LEAF_NODE	3844:40	3844:40	10	)
LEAF_NODE	3844:41	3844:41	8	,
ARGUMENT	3844:43	3844:43	8	"%%PDF-%u.%u "
FIELD	3844:43	3844:43	9	"%%PDF-%u.%u "
LEAF_NODE	3844:43	3844:43	10	"%%PDF-%u.%u "
LEAF_NODE	3844:57	3844:57	8	,
ARGUMENT	3845:5	3845:27	8	t2p -> pdf_majorversion & 0xff
FIELD	3845:5	3845:10	9	t2p -> pdf_majorversion
LEAF_NODE	3845:5	3845:5	10	t2p
LEAF_NODE	3845:8	3845:8	10	->
LEAF_NODE	3845:10	3845:10	10	pdf_majorversion
LEAF_NODE	3845:26	3845:26	9	&
FIELD	3845:27	3845:27	9	0xff
LEAF_NODE	3845:27	3845:27	10	0xff
LEAF_NODE	3845:31	3845:31	8	,
ARGUMENT	3846:5	3846:27	8	t2p -> pdf_minorversion & 0xff
FIELD	3846:5	3846:10	9	t2p -> pdf_minorversion
LEAF_NODE	3846:5	3846:5	10	t2p
LEAF_NODE	3846:8	3846:8	10	->
LEAF_NODE	3846:10	3846:10	10	pdf_minorversion
LEAF_NODE	3846:26	3846:26	9	&
FIELD	3846:27	3846:27	9	0xff
LEAF_NODE	3846:27	3846:27	10	0xff
LEAF_NODE	3846:31	3846:31	8	)
LEAF_NODE	3846:32	3846:32	4	;
EXPR_STATEMENT	3847:1	3847:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	3847:1	3847:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	3847:1	3847:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	3847:1	3847:1	6	check_snprintf_ret
LEAF_NODE	3847:1	3847:1	7	check_snprintf_ret
LEAF_NODE	3847:19	3847:19	6	(
ARGUMENT	3847:20	3847:20	6	t2p
FIELD	3847:20	3847:20	7	t2p
LEAF_NODE	3847:20	3847:20	8	t2p
LEAF_NODE	3847:23	3847:23	6	,
ARGUMENT	3847:25	3847:25	6	buflen
FIELD	3847:25	3847:25	7	buflen
LEAF_NODE	3847:25	3847:25	8	buflen
LEAF_NODE	3847:31	3847:31	6	,
ARGUMENT	3847:33	3847:33	6	buffer
FIELD	3847:33	3847:33	7	buffer
LEAF_NODE	3847:33	3847:33	8	buffer
LEAF_NODE	3847:39	3847:39	6	)
LEAF_NODE	3847:40	3847:40	4	;
EXPR_STATEMENT	3848:1	3848:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	3848:1	3848:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	3848:1	3848:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	3848:1	3848:1	6	written
FIELD	3848:1	3848:1	7	written
LEAF_NODE	3848:1	3848:1	8	written
ASSIGN_OP	3848:9	3848:9	6	+=
LEAF_NODE	3848:9	3848:9	7	+=
RVAL	3848:12	3848:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	3848:12	3848:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	3848:12	3848:12	8	t2pWriteFile
LEAF_NODE	3848:12	3848:12	9	t2pWriteFile
LEAF_NODE	3848:24	3848:24	8	(
ARGUMENT	3848:25	3848:25	8	output
FIELD	3848:25	3848:25	9	output
LEAF_NODE	3848:25	3848:25	10	output
LEAF_NODE	3848:31	3848:31	8	,
ARGUMENT	3848:33	3848:43	8	( tdata_t ) buffer
LEAF_NODE	3848:33	3848:33	9	(
TYPE_NAME	3848:34	3848:34	9	tdata_t
LEAF_NODE	3848:34	3848:34	10	tdata_t
LEAF_NODE	3848:41	3848:41	9	)
FIELD	3848:43	3848:43	9	buffer
LEAF_NODE	3848:43	3848:43	10	buffer
LEAF_NODE	3848:49	3848:49	8	,
ARGUMENT	3848:51	3848:51	8	buflen
FIELD	3848:51	3848:51	9	buflen
LEAF_NODE	3848:51	3848:51	10	buflen
LEAF_NODE	3848:57	3848:57	8	)
LEAF_NODE	3848:58	3848:58	4	;
EXPR_STATEMENT	3849:1	3849:69	3	written += t2pWriteFile ( output , ( tdata_t ) "\n%\342\343\317\323\n" , 7 ) ;
EXPR	3849:1	3849:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\n%\342\343\317\323\n" , 7 )
ASSIGN	3849:1	3849:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\n%\342\343\317\323\n" , 7 )
LVAL	3849:1	3849:1	6	written
FIELD	3849:1	3849:1	7	written
LEAF_NODE	3849:1	3849:1	8	written
ASSIGN_OP	3849:9	3849:9	6	+=
LEAF_NODE	3849:9	3849:9	7	+=
RVAL	3849:12	3849:12	6	t2pWriteFile ( output , ( tdata_t ) "\n%\342\343\317\323\n" , 7 )
FUNCTION_CALL	3849:12	3849:68	7	t2pWriteFile ( output , ( tdata_t ) "\n%\342\343\317\323\n" , 7 )
CALLEE	3849:12	3849:12	8	t2pWriteFile
LEAF_NODE	3849:12	3849:12	9	t2pWriteFile
LEAF_NODE	3849:24	3849:24	8	(
ARGUMENT	3849:25	3849:25	8	output
FIELD	3849:25	3849:25	9	output
LEAF_NODE	3849:25	3849:25	10	output
LEAF_NODE	3849:31	3849:31	8	,
ARGUMENT	3849:33	3849:42	8	( tdata_t ) "\n%\342\343\317\323\n"
LEAF_NODE	3849:33	3849:33	9	(
TYPE_NAME	3849:34	3849:34	9	tdata_t
LEAF_NODE	3849:34	3849:34	10	tdata_t
LEAF_NODE	3849:41	3849:41	9	)
FIELD	3849:42	3849:42	9	"\n%\342\343\317\323\n"
LEAF_NODE	3849:42	3849:42	10	"\n%\342\343\317\323\n"
LEAF_NODE	3849:65	3849:65	8	,
ARGUMENT	3849:67	3849:67	8	7
FIELD	3849:67	3849:67	9	7
LEAF_NODE	3849:67	3849:67	10	7
LEAF_NODE	3849:68	3849:68	8	)
LEAF_NODE	3849:69	3849:69	4	;
LEAF_NODE	3851:1	3851:1	3	return
LEAF_NODE	3851:7	3851:7	3	(
LEAF_NODE	3851:8	3851:8	3	written
LEAF_NODE	3851:15	3851:15	3	)
LEAF_NODE	3851:16	3851:16	3	;
LEAF_NODE	3852:0	3852:0	2	}
FUNCTION_DEF	3858:0	3870:0	1	
RETURN_TYPE	3858:0	3858:0	2	tsize_t
TYPE_NAME	3858:0	3858:0	3	tsize_t
LEAF_NODE	3858:0	3858:0	4	tsize_t
FUNCTION_NAME	3858:8	3858:8	2	t2p_write_pdf_obj_start
LEAF_NODE	3858:8	3858:8	3	t2p_write_pdf_obj_start
PARAMETER_LIST	3858:31	3858:59	2	( uint32 number , TIFF * output )
LEAF_NODE	3858:31	3858:31	3	(
PARAMETER_DECL	3858:32	3858:39	3	uint32 number
TYPE	3858:32	3858:32	4	uint32
TYPE_NAME	3858:32	3858:32	5	uint32
LEAF_NODE	3858:32	3858:32	6	uint32
NAME	3858:39	3858:39	4	number
LEAF_NODE	3858:39	3858:39	5	number
LEAF_NODE	3858:45	3858:45	3	,
PARAMETER_DECL	3858:47	3858:53	3	TIFF * output
TYPE	3858:47	3858:51	4	TIFF *
TYPE_NAME	3858:47	3858:47	5	TIFF
LEAF_NODE	3858:47	3858:47	6	TIFF
POINTER	3858:51	3858:51	5	*
LEAF_NODE	3858:51	3858:51	6	*
NAME	3858:53	3858:53	4	output
LEAF_NODE	3858:53	3858:53	5	output
LEAF_NODE	3858:59	3858:59	3	)
LEAF_NODE	3858:60	3858:60	2	{
STATEMENTS	3860:1	3869:16	2	
SIMPLE_DECL	3860:1	3860:18	3	tsize_t written ; written = 0 ;
VAR_DECL	3860:1	3860:9	4	tsize_t written ; written = 0
TYPE	3860:1	3860:1	5	tsize_t
TYPE_NAME	3860:1	3860:1	6	tsize_t
LEAF_NODE	3860:1	3860:1	7	tsize_t
NAME	3860:9	3860:9	5	written
LEAF_NODE	3860:9	3860:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	3860:9	3860:9	5	written = 0
ASSIGN	3860:9	3860:17	6	written = 0
LVAL	3860:9	3860:9	7	written
NAME	3860:9	3860:9	8	written
LEAF_NODE	3860:9	3860:9	9	written
ASSIGN_OP	3860:16	3860:16	7	=
LEAF_NODE	3860:16	3860:16	8	=
RVAL	3860:17	3860:17	7	0
FIELD	3860:17	3860:17	8	0
LEAF_NODE	3860:17	3860:17	9	0
LEAF_NODE	3860:18	3860:18	4	;
SIMPLE_DECL	3861:1	3861:16	3	char [ 32 ] buffer ;
VAR_DECL	3861:1	3861:6	4	char [ 32 ] buffer
TYPE	3861:1	3861:12	5	char [ 32 ]
TYPE_NAME	3861:1	3861:1	6	char
LEAF_NODE	3861:1	3861:1	7	char
TYPE_SUFFIX	3861:12	3861:15	6	[ 32 ]
LEAF_NODE	3861:12	3861:12	7	[
FIELD	3861:13	3861:13	7	32
LEAF_NODE	3861:13	3861:13	8	32
LEAF_NODE	3861:15	3861:15	7	]
NAME	3861:6	3861:6	5	buffer
LEAF_NODE	3861:6	3861:6	6	buffer
LEAF_NODE	3861:16	3861:16	4	;
SIMPLE_DECL	3862:1	3862:13	3	int buflen ; buflen = 0 ;
VAR_DECL	3862:1	3862:5	4	int buflen ; buflen = 0
TYPE	3862:1	3862:1	5	int
TYPE_NAME	3862:1	3862:1	6	int
LEAF_NODE	3862:1	3862:1	7	int
NAME	3862:5	3862:5	5	buflen
LEAF_NODE	3862:5	3862:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	3862:5	3862:5	5	buflen = 0
ASSIGN	3862:5	3862:12	6	buflen = 0
LVAL	3862:5	3862:5	7	buflen
NAME	3862:5	3862:5	8	buflen
LEAF_NODE	3862:5	3862:5	9	buflen
ASSIGN_OP	3862:11	3862:11	7	=
LEAF_NODE	3862:11	3862:11	8	=
RVAL	3862:12	3862:12	7	0
FIELD	3862:12	3862:12	8	0
LEAF_NODE	3862:12	3862:12	9	0
LEAF_NODE	3862:13	3862:13	4	;
EXPR_STATEMENT	3864:1	3864:70	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) number ) ;
EXPR	3864:1	3864:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) number )
ASSIGN	3864:1	3864:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) number )
LVAL	3864:1	3864:1	6	buflen
FIELD	3864:1	3864:1	7	buflen
LEAF_NODE	3864:1	3864:1	8	buflen
ASSIGN_OP	3864:7	3864:7	6	=
LEAF_NODE	3864:7	3864:7	7	=
RVAL	3864:8	3864:8	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) number )
FUNCTION_CALL	3864:8	3864:69	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) number )
CALLEE	3864:8	3864:8	8	snprintf
LEAF_NODE	3864:8	3864:8	9	snprintf
LEAF_NODE	3864:16	3864:16	8	(
ARGUMENT	3864:17	3864:17	8	buffer
FIELD	3864:17	3864:17	9	buffer
LEAF_NODE	3864:17	3864:17	10	buffer
LEAF_NODE	3864:23	3864:23	8	,
ARGUMENT	3864:25	3864:25	8	sizeof ( buffer )
FUNCTION_CALL	3864:25	3864:38	9	sizeof ( buffer )
CALLEE	3864:25	3864:25	10	sizeof
LEAF_NODE	3864:25	3864:25	11	sizeof
LEAF_NODE	3864:31	3864:31	10	(
ARGUMENT	3864:32	3864:32	10	buffer
FIELD	3864:32	3864:32	11	buffer
LEAF_NODE	3864:32	3864:32	12	buffer
LEAF_NODE	3864:38	3864:38	10	)
LEAF_NODE	3864:39	3864:39	8	,
ARGUMENT	3864:41	3864:41	8	"%lu"
FIELD	3864:41	3864:41	9	"%lu"
LEAF_NODE	3864:41	3864:41	10	"%lu"
LEAF_NODE	3864:46	3864:46	8	,
ARGUMENT	3864:48	3864:63	8	( unsigned long ) number
LEAF_NODE	3864:48	3864:48	9	(
TYPE_NAME	3864:49	3864:58	9	unsigned long
LEAF_NODE	3864:49	3864:49	10	unsigned
LEAF_NODE	3864:58	3864:58	10	long
LEAF_NODE	3864:62	3864:62	9	)
FIELD	3864:63	3864:63	9	number
LEAF_NODE	3864:63	3864:63	10	number
LEAF_NODE	3864:69	3864:69	8	)
LEAF_NODE	3864:70	3864:70	4	;
EXPR_STATEMENT	3865:1	3865:47	3	check_snprintf_ret ( ( T2P * ) NULL , buflen , buffer ) ;
EXPR	3865:1	3865:1	4	check_snprintf_ret ( ( T2P * ) NULL , buflen , buffer )
FUNCTION_CALL	3865:1	3865:46	5	check_snprintf_ret ( ( T2P * ) NULL , buflen , buffer )
CALLEE	3865:1	3865:1	6	check_snprintf_ret
LEAF_NODE	3865:1	3865:1	7	check_snprintf_ret
LEAF_NODE	3865:19	3865:19	6	(
ARGUMENT	3865:20	3865:26	6	( T2P * ) NULL
LEAF_NODE	3865:20	3865:20	7	(
TYPE_NAME	3865:21	3865:21	7	T2P
LEAF_NODE	3865:21	3865:21	8	T2P
LEAF_NODE	3865:24	3865:24	7	*
LEAF_NODE	3865:25	3865:25	7	)
FIELD	3865:26	3865:26	7	NULL
LEAF_NODE	3865:26	3865:26	8	NULL
LEAF_NODE	3865:30	3865:30	6	,
ARGUMENT	3865:32	3865:32	6	buflen
FIELD	3865:32	3865:32	7	buflen
LEAF_NODE	3865:32	3865:32	8	buflen
LEAF_NODE	3865:38	3865:38	6	,
ARGUMENT	3865:40	3865:40	6	buffer
FIELD	3865:40	3865:40	7	buffer
LEAF_NODE	3865:40	3865:40	8	buffer
LEAF_NODE	3865:46	3865:46	6	)
LEAF_NODE	3865:47	3865:47	4	;
EXPR_STATEMENT	3866:1	3866:59	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	3866:1	3866:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	3866:1	3866:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	3866:1	3866:1	6	written
FIELD	3866:1	3866:1	7	written
LEAF_NODE	3866:1	3866:1	8	written
ASSIGN_OP	3866:9	3866:9	6	+=
LEAF_NODE	3866:9	3866:9	7	+=
RVAL	3866:12	3866:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	3866:12	3866:58	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	3866:12	3866:12	8	t2pWriteFile
LEAF_NODE	3866:12	3866:12	9	t2pWriteFile
LEAF_NODE	3866:24	3866:24	8	(
ARGUMENT	3866:25	3866:25	8	output
FIELD	3866:25	3866:25	9	output
LEAF_NODE	3866:25	3866:25	10	output
LEAF_NODE	3866:31	3866:31	8	,
ARGUMENT	3866:33	3866:43	8	( tdata_t ) buffer
LEAF_NODE	3866:33	3866:33	9	(
TYPE_NAME	3866:34	3866:34	9	tdata_t
LEAF_NODE	3866:34	3866:34	10	tdata_t
LEAF_NODE	3866:41	3866:41	9	)
FIELD	3866:43	3866:43	9	buffer
LEAF_NODE	3866:43	3866:43	10	buffer
LEAF_NODE	3866:49	3866:49	8	,
ARGUMENT	3866:51	3866:51	8	buflen
FIELD	3866:51	3866:51	9	buflen
LEAF_NODE	3866:51	3866:51	10	buflen
LEAF_NODE	3866:58	3866:58	8	)
LEAF_NODE	3866:59	3866:59	4	;
EXPR_STATEMENT	3867:1	3867:57	3	written += t2pWriteFile ( output , ( tdata_t ) " 0 obj\n" , 7 ) ;
EXPR	3867:1	3867:1	4	written += t2pWriteFile ( output , ( tdata_t ) " 0 obj\n" , 7 )
ASSIGN	3867:1	3867:12	5	written += t2pWriteFile ( output , ( tdata_t ) " 0 obj\n" , 7 )
LVAL	3867:1	3867:1	6	written
FIELD	3867:1	3867:1	7	written
LEAF_NODE	3867:1	3867:1	8	written
ASSIGN_OP	3867:9	3867:9	6	+=
LEAF_NODE	3867:9	3867:9	7	+=
RVAL	3867:12	3867:12	6	t2pWriteFile ( output , ( tdata_t ) " 0 obj\n" , 7 )
FUNCTION_CALL	3867:12	3867:56	7	t2pWriteFile ( output , ( tdata_t ) " 0 obj\n" , 7 )
CALLEE	3867:12	3867:12	8	t2pWriteFile
LEAF_NODE	3867:12	3867:12	9	t2pWriteFile
LEAF_NODE	3867:24	3867:24	8	(
ARGUMENT	3867:25	3867:25	8	output
FIELD	3867:25	3867:25	9	output
LEAF_NODE	3867:25	3867:25	10	output
LEAF_NODE	3867:31	3867:31	8	,
ARGUMENT	3867:33	3867:43	8	( tdata_t ) " 0 obj\n"
LEAF_NODE	3867:33	3867:33	9	(
TYPE_NAME	3867:34	3867:34	9	tdata_t
LEAF_NODE	3867:34	3867:34	10	tdata_t
LEAF_NODE	3867:41	3867:41	9	)
FIELD	3867:43	3867:43	9	" 0 obj\n"
LEAF_NODE	3867:43	3867:43	10	" 0 obj\n"
LEAF_NODE	3867:53	3867:53	8	,
ARGUMENT	3867:55	3867:55	8	7
FIELD	3867:55	3867:55	9	7
LEAF_NODE	3867:55	3867:55	10	7
LEAF_NODE	3867:56	3867:56	8	)
LEAF_NODE	3867:57	3867:57	4	;
LEAF_NODE	3869:1	3869:1	3	return
LEAF_NODE	3869:7	3869:7	3	(
LEAF_NODE	3869:8	3869:8	3	written
LEAF_NODE	3869:15	3869:15	3	)
LEAF_NODE	3869:16	3869:16	3	;
LEAF_NODE	3870:0	3870:0	2	}
FUNCTION_DEF	3876:0	3883:0	1	
RETURN_TYPE	3876:0	3876:0	2	tsize_t
TYPE_NAME	3876:0	3876:0	3	tsize_t
LEAF_NODE	3876:0	3876:0	4	tsize_t
FUNCTION_NAME	3876:8	3876:8	2	t2p_write_pdf_obj_end
LEAF_NODE	3876:8	3876:8	3	t2p_write_pdf_obj_end
PARAMETER_LIST	3876:29	3876:42	2	( TIFF * output )
LEAF_NODE	3876:29	3876:29	3	(
PARAMETER_DECL	3876:30	3876:36	3	TIFF * output
TYPE	3876:30	3876:34	4	TIFF *
TYPE_NAME	3876:30	3876:30	5	TIFF
LEAF_NODE	3876:30	3876:30	6	TIFF
POINTER	3876:34	3876:34	5	*
LEAF_NODE	3876:34	3876:34	6	*
NAME	3876:36	3876:36	4	output
LEAF_NODE	3876:36	3876:36	5	output
LEAF_NODE	3876:42	3876:42	3	)
LEAF_NODE	3876:43	3876:43	2	{
STATEMENTS	3878:1	3882:16	2	
SIMPLE_DECL	3878:1	3878:18	3	tsize_t written ; written = 0 ;
VAR_DECL	3878:1	3878:9	4	tsize_t written ; written = 0
TYPE	3878:1	3878:1	5	tsize_t
TYPE_NAME	3878:1	3878:1	6	tsize_t
LEAF_NODE	3878:1	3878:1	7	tsize_t
NAME	3878:9	3878:9	5	written
LEAF_NODE	3878:9	3878:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	3878:9	3878:9	5	written = 0
ASSIGN	3878:9	3878:17	6	written = 0
LVAL	3878:9	3878:9	7	written
NAME	3878:9	3878:9	8	written
LEAF_NODE	3878:9	3878:9	9	written
ASSIGN_OP	3878:16	3878:16	7	=
LEAF_NODE	3878:16	3878:16	8	=
RVAL	3878:17	3878:17	7	0
FIELD	3878:17	3878:17	8	0
LEAF_NODE	3878:17	3878:17	9	0
LEAF_NODE	3878:18	3878:18	4	;
EXPR_STATEMENT	3880:1	3880:57	3	written += t2pWriteFile ( output , ( tdata_t ) "endobj\n" , 7 ) ;
EXPR	3880:1	3880:1	4	written += t2pWriteFile ( output , ( tdata_t ) "endobj\n" , 7 )
ASSIGN	3880:1	3880:12	5	written += t2pWriteFile ( output , ( tdata_t ) "endobj\n" , 7 )
LVAL	3880:1	3880:1	6	written
FIELD	3880:1	3880:1	7	written
LEAF_NODE	3880:1	3880:1	8	written
ASSIGN_OP	3880:9	3880:9	6	+=
LEAF_NODE	3880:9	3880:9	7	+=
RVAL	3880:12	3880:12	6	t2pWriteFile ( output , ( tdata_t ) "endobj\n" , 7 )
FUNCTION_CALL	3880:12	3880:56	7	t2pWriteFile ( output , ( tdata_t ) "endobj\n" , 7 )
CALLEE	3880:12	3880:12	8	t2pWriteFile
LEAF_NODE	3880:12	3880:12	9	t2pWriteFile
LEAF_NODE	3880:24	3880:24	8	(
ARGUMENT	3880:25	3880:25	8	output
FIELD	3880:25	3880:25	9	output
LEAF_NODE	3880:25	3880:25	10	output
LEAF_NODE	3880:31	3880:31	8	,
ARGUMENT	3880:33	3880:43	8	( tdata_t ) "endobj\n"
LEAF_NODE	3880:33	3880:33	9	(
TYPE_NAME	3880:34	3880:34	9	tdata_t
LEAF_NODE	3880:34	3880:34	10	tdata_t
LEAF_NODE	3880:41	3880:41	9	)
FIELD	3880:43	3880:43	9	"endobj\n"
LEAF_NODE	3880:43	3880:43	10	"endobj\n"
LEAF_NODE	3880:53	3880:53	8	,
ARGUMENT	3880:55	3880:55	8	7
FIELD	3880:55	3880:55	9	7
LEAF_NODE	3880:55	3880:55	10	7
LEAF_NODE	3880:56	3880:56	8	)
LEAF_NODE	3880:57	3880:57	4	;
LEAF_NODE	3882:1	3882:1	3	return
LEAF_NODE	3882:7	3882:7	3	(
LEAF_NODE	3882:8	3882:8	3	written
LEAF_NODE	3882:15	3882:15	3	)
LEAF_NODE	3882:16	3882:16	3	;
LEAF_NODE	3883:0	3883:0	2	}
FUNCTION_DEF	3889:0	3981:0	1	
RETURN_TYPE	3889:0	3889:0	2	tsize_t
TYPE_NAME	3889:0	3889:0	3	tsize_t
LEAF_NODE	3889:0	3889:0	4	tsize_t
FUNCTION_NAME	3889:8	3889:8	2	t2p_write_pdf_name
LEAF_NODE	3889:8	3889:8	3	t2p_write_pdf_name
PARAMETER_LIST	3889:26	3889:60	2	( unsigned char * name , TIFF * output )
LEAF_NODE	3889:26	3889:26	3	(
PARAMETER_DECL	3889:27	3889:42	3	unsigned char * name
TYPE	3889:27	3889:40	4	unsigned char *
TYPE_NAME	3889:27	3889:36	5	unsigned char
LEAF_NODE	3889:27	3889:27	6	unsigned
LEAF_NODE	3889:36	3889:36	6	char
POINTER	3889:40	3889:40	5	*
LEAF_NODE	3889:40	3889:40	6	*
NAME	3889:42	3889:42	4	name
LEAF_NODE	3889:42	3889:42	5	name
LEAF_NODE	3889:46	3889:46	3	,
PARAMETER_DECL	3889:48	3889:54	3	TIFF * output
TYPE	3889:48	3889:52	4	TIFF *
TYPE_NAME	3889:48	3889:48	5	TIFF
LEAF_NODE	3889:48	3889:48	6	TIFF
POINTER	3889:52	3889:52	5	*
LEAF_NODE	3889:52	3889:52	6	*
NAME	3889:54	3889:54	4	output
LEAF_NODE	3889:54	3889:54	5	output
LEAF_NODE	3889:60	3889:60	3	)
LEAF_NODE	3889:61	3889:61	2	{
STATEMENTS	3891:1	3980:16	2	
SIMPLE_DECL	3891:1	3891:18	3	tsize_t written ; written = 0 ;
VAR_DECL	3891:1	3891:9	4	tsize_t written ; written = 0
TYPE	3891:1	3891:1	5	tsize_t
TYPE_NAME	3891:1	3891:1	6	tsize_t
LEAF_NODE	3891:1	3891:1	7	tsize_t
NAME	3891:9	3891:9	5	written
LEAF_NODE	3891:9	3891:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	3891:9	3891:9	5	written = 0
ASSIGN	3891:9	3891:17	6	written = 0
LVAL	3891:9	3891:9	7	written
NAME	3891:9	3891:9	8	written
LEAF_NODE	3891:9	3891:9	9	written
ASSIGN_OP	3891:16	3891:16	7	=
LEAF_NODE	3891:16	3891:16	8	=
RVAL	3891:17	3891:17	7	0
FIELD	3891:17	3891:17	8	0
LEAF_NODE	3891:17	3891:17	9	0
LEAF_NODE	3891:18	3891:18	4	;
SIMPLE_DECL	3892:1	3892:11	3	uint32 i ; i = 0 ;
VAR_DECL	3892:1	3892:8	4	uint32 i ; i = 0
TYPE	3892:1	3892:1	5	uint32
TYPE_NAME	3892:1	3892:1	6	uint32
LEAF_NODE	3892:1	3892:1	7	uint32
NAME	3892:8	3892:8	5	i
LEAF_NODE	3892:8	3892:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	3892:8	3892:8	5	i = 0
ASSIGN	3892:8	3892:10	6	i = 0
LVAL	3892:8	3892:8	7	i
NAME	3892:8	3892:8	8	i
LEAF_NODE	3892:8	3892:8	9	i
ASSIGN_OP	3892:9	3892:9	7	=
LEAF_NODE	3892:9	3892:9	8	=
RVAL	3892:10	3892:10	7	0
FIELD	3892:10	3892:10	8	0
LEAF_NODE	3892:10	3892:10	9	0
LEAF_NODE	3892:11	3892:11	4	;
SIMPLE_DECL	3893:1	3893:16	3	char [ 64 ] buffer ;
VAR_DECL	3893:1	3893:6	4	char [ 64 ] buffer
TYPE	3893:1	3893:12	5	char [ 64 ]
TYPE_NAME	3893:1	3893:1	6	char
LEAF_NODE	3893:1	3893:1	7	char
TYPE_SUFFIX	3893:12	3893:15	6	[ 64 ]
LEAF_NODE	3893:12	3893:12	7	[
FIELD	3893:13	3893:13	7	64
LEAF_NODE	3893:13	3893:13	8	64
LEAF_NODE	3893:15	3893:15	7	]
NAME	3893:6	3893:6	5	buffer
LEAF_NODE	3893:6	3893:6	6	buffer
LEAF_NODE	3893:16	3893:16	4	;
SIMPLE_DECL	3894:1	3894:18	3	uint16 nextchar ; nextchar = 0 ;
VAR_DECL	3894:1	3894:8	4	uint16 nextchar ; nextchar = 0
TYPE	3894:1	3894:1	5	uint16
TYPE_NAME	3894:1	3894:1	6	uint16
LEAF_NODE	3894:1	3894:1	7	uint16
NAME	3894:8	3894:8	5	nextchar
LEAF_NODE	3894:8	3894:8	6	nextchar
LEAF_NODE	0:0	0:0	5	;
INIT	3894:8	3894:8	5	nextchar = 0
ASSIGN	3894:8	3894:17	6	nextchar = 0
LVAL	3894:8	3894:8	7	nextchar
NAME	3894:8	3894:8	8	nextchar
LEAF_NODE	3894:8	3894:8	9	nextchar
ASSIGN_OP	3894:16	3894:16	7	=
LEAF_NODE	3894:16	3894:16	8	=
RVAL	3894:17	3894:17	7	0
FIELD	3894:17	3894:17	8	0
LEAF_NODE	3894:17	3894:17	9	0
LEAF_NODE	3894:18	3894:18	4	;
SIMPLE_DECL	3895:1	3895:17	3	size_t namelen ; namelen = 0 ;
VAR_DECL	3895:1	3895:8	4	size_t namelen ; namelen = 0
TYPE	3895:1	3895:1	5	size_t
TYPE_NAME	3895:1	3895:1	6	size_t
LEAF_NODE	3895:1	3895:1	7	size_t
NAME	3895:8	3895:8	5	namelen
LEAF_NODE	3895:8	3895:8	6	namelen
LEAF_NODE	0:0	0:0	5	;
INIT	3895:8	3895:8	5	namelen = 0
ASSIGN	3895:8	3895:16	6	namelen = 0
LVAL	3895:8	3895:8	7	namelen
NAME	3895:8	3895:8	8	namelen
LEAF_NODE	3895:8	3895:8	9	namelen
ASSIGN_OP	3895:15	3895:15	7	=
LEAF_NODE	3895:15	3895:15	8	=
RVAL	3895:16	3895:16	7	0
FIELD	3895:16	3895:16	8	0
LEAF_NODE	3895:16	3895:16	9	0
LEAF_NODE	3895:17	3895:17	4	;
EXPR_STATEMENT	3897:1	3897:31	3	namelen = strlen ( ( char * ) name ) ;
EXPR	3897:1	3897:1	4	namelen = strlen ( ( char * ) name )
ASSIGN	3897:1	3897:11	5	namelen = strlen ( ( char * ) name )
LVAL	3897:1	3897:1	6	namelen
FIELD	3897:1	3897:1	7	namelen
LEAF_NODE	3897:1	3897:1	8	namelen
ASSIGN_OP	3897:9	3897:9	6	=
LEAF_NODE	3897:9	3897:9	7	=
RVAL	3897:11	3897:11	6	strlen ( ( char * ) name )
FUNCTION_CALL	3897:11	3897:30	7	strlen ( ( char * ) name )
CALLEE	3897:11	3897:11	8	strlen
LEAF_NODE	3897:11	3897:11	9	strlen
LEAF_NODE	3897:17	3897:17	8	(
ARGUMENT	3897:18	3897:26	8	( char * ) name
LEAF_NODE	3897:18	3897:18	9	(
TYPE_NAME	3897:19	3897:19	9	char
LEAF_NODE	3897:19	3897:19	10	char
LEAF_NODE	3897:24	3897:24	9	*
LEAF_NODE	3897:25	3897:25	9	)
FIELD	3897:26	3897:26	9	name
LEAF_NODE	3897:26	3897:26	10	name
LEAF_NODE	3897:30	3897:30	8	)
LEAF_NODE	3897:31	3897:31	4	;
SELECTION	3898:1	3898:18	3	
KEYWORD	3898:1	3898:1	4	if
LEAF_NODE	3898:1	3898:1	5	if
LEAF_NODE	3898:4	3898:4	4	(
CONDITION	3898:5	3898:5	4	namelen > 126
EXPR	3898:5	3898:13	5	namelen > 126
FIELD	3898:5	3898:5	6	namelen
LEAF_NODE	3898:5	3898:5	7	namelen
REL_OPERATOR	3898:12	3898:12	6	>
LEAF_NODE	3898:12	3898:12	7	>
FIELD	3898:13	3898:13	6	126
LEAF_NODE	3898:13	3898:13	7	126
LEAF_NODE	3898:16	3898:16	4	)
STATEMENTS	3898:18	3900:1	4	
LEAF_NODE	3898:18	3898:18	5	{
STATEMENTS	3899:2	3899:2	5	
EXPR_STATEMENT	3899:2	3899:13	6	namelen = 126 ;
EXPR	3899:2	3899:2	7	namelen = 126
ASSIGN	3899:2	3899:10	8	namelen = 126
LVAL	3899:2	3899:2	9	namelen
FIELD	3899:2	3899:2	10	namelen
LEAF_NODE	3899:2	3899:2	11	namelen
ASSIGN_OP	3899:9	3899:9	9	=
LEAF_NODE	3899:9	3899:9	10	=
RVAL	3899:10	3899:10	9	126
FIELD	3899:10	3899:10	10	126
LEAF_NODE	3899:10	3899:10	11	126
LEAF_NODE	3899:13	3899:13	7	;
LEAF_NODE	3900:1	3900:1	5	}
EXPR_STATEMENT	3901:1	3901:50	3	written += t2pWriteFile ( output , ( tdata_t ) "/" , 1 ) ;
EXPR	3901:1	3901:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/" , 1 )
ASSIGN	3901:1	3901:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/" , 1 )
LVAL	3901:1	3901:1	6	written
FIELD	3901:1	3901:1	7	written
LEAF_NODE	3901:1	3901:1	8	written
ASSIGN_OP	3901:9	3901:9	6	+=
LEAF_NODE	3901:9	3901:9	7	+=
RVAL	3901:12	3901:12	6	t2pWriteFile ( output , ( tdata_t ) "/" , 1 )
FUNCTION_CALL	3901:12	3901:49	7	t2pWriteFile ( output , ( tdata_t ) "/" , 1 )
CALLEE	3901:12	3901:12	8	t2pWriteFile
LEAF_NODE	3901:12	3901:12	9	t2pWriteFile
LEAF_NODE	3901:24	3901:24	8	(
ARGUMENT	3901:25	3901:25	8	output
FIELD	3901:25	3901:25	9	output
LEAF_NODE	3901:25	3901:25	10	output
LEAF_NODE	3901:31	3901:31	8	,
ARGUMENT	3901:33	3901:43	8	( tdata_t ) "/"
LEAF_NODE	3901:33	3901:33	9	(
TYPE_NAME	3901:34	3901:34	9	tdata_t
LEAF_NODE	3901:34	3901:34	10	tdata_t
LEAF_NODE	3901:41	3901:41	9	)
FIELD	3901:43	3901:43	9	"/"
LEAF_NODE	3901:43	3901:43	10	"/"
LEAF_NODE	3901:46	3901:46	8	,
ARGUMENT	3901:48	3901:48	8	1
FIELD	3901:48	3901:48	9	1
LEAF_NODE	3901:48	3901:48	10	1
LEAF_NODE	3901:49	3901:49	8	)
LEAF_NODE	3901:50	3901:50	4	;
ITERATION	3902:1	3902:24	3	
KEYWORD	3902:1	3902:1	4	for
LEAF_NODE	3902:1	3902:1	5	for
LEAF_NODE	3902:5	3902:5	4	(
FOR_INIT	3902:6	3902:9	4	i = 0 ;
EXPR	3902:6	3902:6	5	i = 0
ASSIGN	3902:6	3902:8	6	i = 0
LVAL	3902:6	3902:6	7	i
FIELD	3902:6	3902:6	8	i
LEAF_NODE	3902:6	3902:6	9	i
ASSIGN_OP	3902:7	3902:7	7	=
LEAF_NODE	3902:7	3902:7	8	=
RVAL	3902:8	3902:8	7	0
FIELD	3902:8	3902:8	8	0
LEAF_NODE	3902:8	3902:8	9	0
LEAF_NODE	3902:9	3902:9	5	;
CONDITION	3902:10	3902:10	4	i < namelen
EXPR	3902:10	3902:12	5	i < namelen
FIELD	3902:10	3902:10	6	i
LEAF_NODE	3902:10	3902:10	7	i
REL_OPERATOR	3902:11	3902:11	6	<
LEAF_NODE	3902:11	3902:11	7	<
FIELD	3902:12	3902:12	6	namelen
LEAF_NODE	3902:12	3902:12	7	namelen
LEAF_NODE	3902:19	3902:19	4	;
FOR_EXPR	3902:20	3902:20	4	i ++
EXPR	3902:20	3902:20	5	i ++
FIELD	3902:20	3902:21	6	i ++
LEAF_NODE	3902:20	3902:20	7	i
LEAF_NODE	3902:21	3902:21	7	++
LEAF_NODE	3902:23	3902:23	4	)
STATEMENTS	3902:24	3977:1	4	
LEAF_NODE	3902:24	3902:24	5	{
STATEMENTS	3903:2	3976:2	5	
SELECTION	3903:2	3903:39	6	
KEYWORD	3903:2	3903:2	7	if
LEAF_NODE	3903:2	3903:2	8	if
LEAF_NODE	3903:5	3903:5	7	(
CONDITION	3903:7	3903:7	7	( ( unsigned char ) name [ i ] ) < 0x21
EXPR	3903:7	3903:34	8	( ( unsigned char ) name [ i ] ) < 0x21
LEAF_NODE	3903:7	3903:7	9	(
LEAF_NODE	3903:8	3903:8	9	(
TYPE_NAME	3903:9	3903:18	9	unsigned char
LEAF_NODE	3903:9	3903:9	10	unsigned
LEAF_NODE	3903:18	3903:18	10	char
LEAF_NODE	3903:22	3903:22	9	)
FIELD	3903:23	3903:29	9	name [ i ]
LEAF_NODE	3903:23	3903:23	10	name
LEAF_NODE	3903:27	3903:27	10	[
EXPR	3903:28	3903:28	10	i
FIELD	3903:28	3903:28	11	i
LEAF_NODE	3903:28	3903:28	12	i
LEAF_NODE	3903:29	3903:29	10	]
LEAF_NODE	3903:30	3903:30	9	)
REL_OPERATOR	3903:32	3903:32	9	<
LEAF_NODE	3903:32	3903:32	10	<
FIELD	3903:34	3903:34	9	0x21
LEAF_NODE	3903:34	3903:34	10	0x21
LEAF_NODE	3903:38	3903:38	7	)
STATEMENTS	3903:39	3908:2	7	
LEAF_NODE	3903:39	3903:39	8	{
STATEMENTS	3904:3	3907:3	8	
EXPR_STATEMENT	3904:3	3904:53	9	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3904:3	3904:3	10	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3904:3	3904:52	11	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3904:3	3904:3	12	snprintf
LEAF_NODE	3904:3	3904:3	13	snprintf
LEAF_NODE	3904:11	3904:11	12	(
ARGUMENT	3904:12	3904:12	12	buffer
FIELD	3904:12	3904:12	13	buffer
LEAF_NODE	3904:12	3904:12	14	buffer
LEAF_NODE	3904:18	3904:18	12	,
ARGUMENT	3904:20	3904:20	12	sizeof ( buffer )
FUNCTION_CALL	3904:20	3904:33	13	sizeof ( buffer )
CALLEE	3904:20	3904:20	14	sizeof
LEAF_NODE	3904:20	3904:20	15	sizeof
LEAF_NODE	3904:26	3904:26	14	(
ARGUMENT	3904:27	3904:27	14	buffer
FIELD	3904:27	3904:27	15	buffer
LEAF_NODE	3904:27	3904:27	16	buffer
LEAF_NODE	3904:33	3904:33	14	)
LEAF_NODE	3904:34	3904:34	12	,
ARGUMENT	3904:36	3904:36	12	"#%.2X"
FIELD	3904:36	3904:36	13	"#%.2X"
LEAF_NODE	3904:36	3904:36	14	"#%.2X"
LEAF_NODE	3904:43	3904:43	12	,
ARGUMENT	3904:45	3904:45	12	name [ i ]
FIELD	3904:45	3904:51	13	name [ i ]
LEAF_NODE	3904:45	3904:45	14	name
LEAF_NODE	3904:49	3904:49	14	[
EXPR	3904:50	3904:50	14	i
FIELD	3904:50	3904:50	15	i
LEAF_NODE	3904:50	3904:50	16	i
LEAF_NODE	3904:51	3904:51	14	]
LEAF_NODE	3904:52	3904:52	12	)
LEAF_NODE	3904:53	3904:53	10	;
EXPR_STATEMENT	3905:3	3905:36	9	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3905:3	3905:3	10	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3905:3	3905:32	11	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3905:3	3905:3	12	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3905:3	3905:28	13	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3905:3	3905:3	14	buffer
LEAF_NODE	3905:9	3905:9	14	[
EXPR	3905:10	3905:27	14	sizeof ( buffer ) - 1
FUNCTION_CALL	3905:10	3905:23	15	sizeof ( buffer )
CALLEE	3905:10	3905:10	16	sizeof
LEAF_NODE	3905:10	3905:10	17	sizeof
LEAF_NODE	3905:16	3905:16	16	(
ARGUMENT	3905:17	3905:17	16	buffer
FIELD	3905:17	3905:17	17	buffer
LEAF_NODE	3905:17	3905:17	18	buffer
LEAF_NODE	3905:23	3905:23	16	)
LEAF_NODE	3905:25	3905:25	15	-
FIELD	3905:27	3905:27	15	1
LEAF_NODE	3905:27	3905:27	16	1
LEAF_NODE	3905:28	3905:28	14	]
ASSIGN_OP	3905:30	3905:30	12	=
LEAF_NODE	3905:30	3905:30	13	=
RVAL	3905:32	3905:32	12	'\0'
FIELD	3905:32	3905:32	13	'\0'
LEAF_NODE	3905:32	3905:32	14	'\0'
LEAF_NODE	3905:36	3905:36	10	;
EXPR_STATEMENT	3906:3	3906:55	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3906:3	3906:3	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3906:3	3906:14	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3906:3	3906:3	12	written
FIELD	3906:3	3906:3	13	written
LEAF_NODE	3906:3	3906:3	14	written
ASSIGN_OP	3906:11	3906:11	12	+=
LEAF_NODE	3906:11	3906:11	13	+=
RVAL	3906:14	3906:14	12	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3906:14	3906:54	13	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3906:14	3906:14	14	t2pWriteFile
LEAF_NODE	3906:14	3906:14	15	t2pWriteFile
LEAF_NODE	3906:26	3906:26	14	(
ARGUMENT	3906:27	3906:27	14	output
FIELD	3906:27	3906:27	15	output
LEAF_NODE	3906:27	3906:27	16	output
LEAF_NODE	3906:33	3906:33	14	,
ARGUMENT	3906:35	3906:45	14	( tdata_t ) buffer
LEAF_NODE	3906:35	3906:35	15	(
TYPE_NAME	3906:36	3906:36	15	tdata_t
LEAF_NODE	3906:36	3906:36	16	tdata_t
LEAF_NODE	3906:43	3906:43	15	)
FIELD	3906:45	3906:45	15	buffer
LEAF_NODE	3906:45	3906:45	16	buffer
LEAF_NODE	3906:51	3906:51	14	,
ARGUMENT	3906:53	3906:53	14	3
FIELD	3906:53	3906:53	15	3
LEAF_NODE	3906:53	3906:53	16	3
LEAF_NODE	3906:54	3906:54	14	)
LEAF_NODE	3906:55	3906:55	10	;
EXPR_STATEMENT	3907:3	3907:13	9	nextchar = 1 ;
EXPR	3907:3	3907:3	10	nextchar = 1
ASSIGN	3907:3	3907:12	11	nextchar = 1
LVAL	3907:3	3907:3	12	nextchar
FIELD	3907:3	3907:3	13	nextchar
LEAF_NODE	3907:3	3907:3	14	nextchar
ASSIGN_OP	3907:11	3907:11	12	=
LEAF_NODE	3907:11	3907:11	13	=
RVAL	3907:12	3907:12	12	1
FIELD	3907:12	3907:12	13	1
LEAF_NODE	3907:12	3907:12	14	1
LEAF_NODE	3907:13	3907:13	10	;
LEAF_NODE	3908:2	3908:2	8	}
SELECTION	3909:2	3909:39	6	
KEYWORD	3909:2	3909:2	7	if
LEAF_NODE	3909:2	3909:2	8	if
LEAF_NODE	3909:5	3909:5	7	(
CONDITION	3909:7	3909:7	7	( ( unsigned char ) name [ i ] ) > 0x7E
EXPR	3909:7	3909:34	8	( ( unsigned char ) name [ i ] ) > 0x7E
LEAF_NODE	3909:7	3909:7	9	(
LEAF_NODE	3909:8	3909:8	9	(
TYPE_NAME	3909:9	3909:18	9	unsigned char
LEAF_NODE	3909:9	3909:9	10	unsigned
LEAF_NODE	3909:18	3909:18	10	char
LEAF_NODE	3909:22	3909:22	9	)
FIELD	3909:23	3909:29	9	name [ i ]
LEAF_NODE	3909:23	3909:23	10	name
LEAF_NODE	3909:27	3909:27	10	[
EXPR	3909:28	3909:28	10	i
FIELD	3909:28	3909:28	11	i
LEAF_NODE	3909:28	3909:28	12	i
LEAF_NODE	3909:29	3909:29	10	]
LEAF_NODE	3909:30	3909:30	9	)
REL_OPERATOR	3909:32	3909:32	9	>
LEAF_NODE	3909:32	3909:32	10	>
FIELD	3909:34	3909:34	9	0x7E
LEAF_NODE	3909:34	3909:34	10	0x7E
LEAF_NODE	3909:38	3909:38	7	)
STATEMENTS	3909:39	3914:2	7	
LEAF_NODE	3909:39	3909:39	8	{
STATEMENTS	3910:3	3913:3	8	
EXPR_STATEMENT	3910:3	3910:53	9	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3910:3	3910:3	10	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3910:3	3910:52	11	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3910:3	3910:3	12	snprintf
LEAF_NODE	3910:3	3910:3	13	snprintf
LEAF_NODE	3910:11	3910:11	12	(
ARGUMENT	3910:12	3910:12	12	buffer
FIELD	3910:12	3910:12	13	buffer
LEAF_NODE	3910:12	3910:12	14	buffer
LEAF_NODE	3910:18	3910:18	12	,
ARGUMENT	3910:20	3910:20	12	sizeof ( buffer )
FUNCTION_CALL	3910:20	3910:33	13	sizeof ( buffer )
CALLEE	3910:20	3910:20	14	sizeof
LEAF_NODE	3910:20	3910:20	15	sizeof
LEAF_NODE	3910:26	3910:26	14	(
ARGUMENT	3910:27	3910:27	14	buffer
FIELD	3910:27	3910:27	15	buffer
LEAF_NODE	3910:27	3910:27	16	buffer
LEAF_NODE	3910:33	3910:33	14	)
LEAF_NODE	3910:34	3910:34	12	,
ARGUMENT	3910:36	3910:36	12	"#%.2X"
FIELD	3910:36	3910:36	13	"#%.2X"
LEAF_NODE	3910:36	3910:36	14	"#%.2X"
LEAF_NODE	3910:43	3910:43	12	,
ARGUMENT	3910:45	3910:45	12	name [ i ]
FIELD	3910:45	3910:51	13	name [ i ]
LEAF_NODE	3910:45	3910:45	14	name
LEAF_NODE	3910:49	3910:49	14	[
EXPR	3910:50	3910:50	14	i
FIELD	3910:50	3910:50	15	i
LEAF_NODE	3910:50	3910:50	16	i
LEAF_NODE	3910:51	3910:51	14	]
LEAF_NODE	3910:52	3910:52	12	)
LEAF_NODE	3910:53	3910:53	10	;
EXPR_STATEMENT	3911:3	3911:36	9	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3911:3	3911:3	10	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3911:3	3911:32	11	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3911:3	3911:3	12	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3911:3	3911:28	13	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3911:3	3911:3	14	buffer
LEAF_NODE	3911:9	3911:9	14	[
EXPR	3911:10	3911:27	14	sizeof ( buffer ) - 1
FUNCTION_CALL	3911:10	3911:23	15	sizeof ( buffer )
CALLEE	3911:10	3911:10	16	sizeof
LEAF_NODE	3911:10	3911:10	17	sizeof
LEAF_NODE	3911:16	3911:16	16	(
ARGUMENT	3911:17	3911:17	16	buffer
FIELD	3911:17	3911:17	17	buffer
LEAF_NODE	3911:17	3911:17	18	buffer
LEAF_NODE	3911:23	3911:23	16	)
LEAF_NODE	3911:25	3911:25	15	-
FIELD	3911:27	3911:27	15	1
LEAF_NODE	3911:27	3911:27	16	1
LEAF_NODE	3911:28	3911:28	14	]
ASSIGN_OP	3911:30	3911:30	12	=
LEAF_NODE	3911:30	3911:30	13	=
RVAL	3911:32	3911:32	12	'\0'
FIELD	3911:32	3911:32	13	'\0'
LEAF_NODE	3911:32	3911:32	14	'\0'
LEAF_NODE	3911:36	3911:36	10	;
EXPR_STATEMENT	3912:3	3912:55	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3912:3	3912:3	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3912:3	3912:14	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3912:3	3912:3	12	written
FIELD	3912:3	3912:3	13	written
LEAF_NODE	3912:3	3912:3	14	written
ASSIGN_OP	3912:11	3912:11	12	+=
LEAF_NODE	3912:11	3912:11	13	+=
RVAL	3912:14	3912:14	12	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3912:14	3912:54	13	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3912:14	3912:14	14	t2pWriteFile
LEAF_NODE	3912:14	3912:14	15	t2pWriteFile
LEAF_NODE	3912:26	3912:26	14	(
ARGUMENT	3912:27	3912:27	14	output
FIELD	3912:27	3912:27	15	output
LEAF_NODE	3912:27	3912:27	16	output
LEAF_NODE	3912:33	3912:33	14	,
ARGUMENT	3912:35	3912:45	14	( tdata_t ) buffer
LEAF_NODE	3912:35	3912:35	15	(
TYPE_NAME	3912:36	3912:36	15	tdata_t
LEAF_NODE	3912:36	3912:36	16	tdata_t
LEAF_NODE	3912:43	3912:43	15	)
FIELD	3912:45	3912:45	15	buffer
LEAF_NODE	3912:45	3912:45	16	buffer
LEAF_NODE	3912:51	3912:51	14	,
ARGUMENT	3912:53	3912:53	14	3
FIELD	3912:53	3912:53	15	3
LEAF_NODE	3912:53	3912:53	16	3
LEAF_NODE	3912:54	3912:54	14	)
LEAF_NODE	3912:55	3912:55	10	;
EXPR_STATEMENT	3913:3	3913:13	9	nextchar = 1 ;
EXPR	3913:3	3913:3	10	nextchar = 1
ASSIGN	3913:3	3913:12	11	nextchar = 1
LVAL	3913:3	3913:3	12	nextchar
FIELD	3913:3	3913:3	13	nextchar
LEAF_NODE	3913:3	3913:3	14	nextchar
ASSIGN_OP	3913:11	3913:11	12	=
LEAF_NODE	3913:11	3913:11	13	=
RVAL	3913:12	3913:12	12	1
FIELD	3913:12	3913:12	13	1
LEAF_NODE	3913:12	3913:12	14	1
LEAF_NODE	3913:13	3913:13	10	;
LEAF_NODE	3914:2	3914:2	8	}
SELECTION	3915:2	3915:18	6	
KEYWORD	3915:2	3915:2	7	if
LEAF_NODE	3915:2	3915:2	8	if
LEAF_NODE	3915:5	3915:5	7	(
CONDITION	3915:6	3915:6	7	nextchar == 0
EXPR	3915:6	3915:16	8	nextchar == 0
FIELD	3915:6	3915:6	9	nextchar
LEAF_NODE	3915:6	3915:6	10	nextchar
EQ_OPERATOR	3915:14	3915:14	9	==
LEAF_NODE	3915:14	3915:14	10	==
FIELD	3915:16	3915:16	9	0
LEAF_NODE	3915:16	3915:16	10	0
LEAF_NODE	3915:17	3915:17	7	)
STATEMENTS	3915:18	3975:2	7	
LEAF_NODE	3915:18	3915:18	8	{
STATEMENTS	3916:3	3916:3	8	
SELECTION	3916:3	3916:19	9	
KEYWORD	3916:3	3916:3	10	switch
LEAF_NODE	3916:3	3916:3	11	switch
LEAF_NODE	3916:10	3916:10	10	(
CONDITION	3916:11	3916:11	10	name [ i ]
EXPR	3916:11	3916:11	11	name [ i ]
FIELD	3916:11	3916:17	12	name [ i ]
LEAF_NODE	3916:11	3916:11	13	name
LEAF_NODE	3916:15	3916:15	13	[
EXPR	3916:16	3916:16	13	i
FIELD	3916:16	3916:16	14	i
LEAF_NODE	3916:16	3916:16	15	i
LEAF_NODE	3916:17	3916:17	13	]
LEAF_NODE	3916:18	3916:18	10	)
STATEMENTS	3916:19	3974:3	10	
LEAF_NODE	3916:19	3916:19	11	{
STATEMENTS	3917:4	3973:5	11	
LABEL	3917:4	3917:13	12	case 0x23 :
LEAF_NODE	3917:4	3917:4	13	case
LEAF_NODE	3917:9	3917:9	13	0x23
LEAF_NODE	3917:13	3917:13	13	:
EXPR_STATEMENT	3918:5	3918:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3918:5	3918:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3918:5	3918:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3918:5	3918:5	15	snprintf
LEAF_NODE	3918:5	3918:5	16	snprintf
LEAF_NODE	3918:13	3918:13	15	(
ARGUMENT	3918:14	3918:14	15	buffer
FIELD	3918:14	3918:14	16	buffer
LEAF_NODE	3918:14	3918:14	17	buffer
LEAF_NODE	3918:20	3918:20	15	,
ARGUMENT	3918:22	3918:22	15	sizeof ( buffer )
FUNCTION_CALL	3918:22	3918:35	16	sizeof ( buffer )
CALLEE	3918:22	3918:22	17	sizeof
LEAF_NODE	3918:22	3918:22	18	sizeof
LEAF_NODE	3918:28	3918:28	17	(
ARGUMENT	3918:29	3918:29	17	buffer
FIELD	3918:29	3918:29	18	buffer
LEAF_NODE	3918:29	3918:29	19	buffer
LEAF_NODE	3918:35	3918:35	17	)
LEAF_NODE	3918:36	3918:36	15	,
ARGUMENT	3918:38	3918:38	15	"#%.2X"
FIELD	3918:38	3918:38	16	"#%.2X"
LEAF_NODE	3918:38	3918:38	17	"#%.2X"
LEAF_NODE	3918:45	3918:45	15	,
ARGUMENT	3918:47	3918:47	15	name [ i ]
FIELD	3918:47	3918:53	16	name [ i ]
LEAF_NODE	3918:47	3918:47	17	name
LEAF_NODE	3918:51	3918:51	17	[
EXPR	3918:52	3918:52	17	i
FIELD	3918:52	3918:52	18	i
LEAF_NODE	3918:52	3918:52	19	i
LEAF_NODE	3918:53	3918:53	17	]
LEAF_NODE	3918:54	3918:54	15	)
LEAF_NODE	3918:55	3918:55	13	;
EXPR_STATEMENT	3919:5	3919:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3919:5	3919:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3919:5	3919:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3919:5	3919:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3919:5	3919:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3919:5	3919:5	17	buffer
LEAF_NODE	3919:11	3919:11	17	[
EXPR	3919:12	3919:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3919:12	3919:25	18	sizeof ( buffer )
CALLEE	3919:12	3919:12	19	sizeof
LEAF_NODE	3919:12	3919:12	20	sizeof
LEAF_NODE	3919:18	3919:18	19	(
ARGUMENT	3919:19	3919:19	19	buffer
FIELD	3919:19	3919:19	20	buffer
LEAF_NODE	3919:19	3919:19	21	buffer
LEAF_NODE	3919:25	3919:25	19	)
LEAF_NODE	3919:27	3919:27	18	-
FIELD	3919:29	3919:29	18	1
LEAF_NODE	3919:29	3919:29	19	1
LEAF_NODE	3919:30	3919:30	17	]
ASSIGN_OP	3919:32	3919:32	15	=
LEAF_NODE	3919:32	3919:32	16	=
RVAL	3919:34	3919:34	15	'\0'
FIELD	3919:34	3919:34	16	'\0'
LEAF_NODE	3919:34	3919:34	17	'\0'
LEAF_NODE	3919:38	3919:38	13	;
EXPR_STATEMENT	3920:5	3920:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3920:5	3920:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3920:5	3920:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3920:5	3920:5	15	written
FIELD	3920:5	3920:5	16	written
LEAF_NODE	3920:5	3920:5	17	written
ASSIGN_OP	3920:13	3920:13	15	+=
LEAF_NODE	3920:13	3920:13	16	+=
RVAL	3920:16	3920:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3920:16	3920:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3920:16	3920:16	17	t2pWriteFile
LEAF_NODE	3920:16	3920:16	18	t2pWriteFile
LEAF_NODE	3920:28	3920:28	17	(
ARGUMENT	3920:29	3920:29	17	output
FIELD	3920:29	3920:29	18	output
LEAF_NODE	3920:29	3920:29	19	output
LEAF_NODE	3920:35	3920:35	17	,
ARGUMENT	3920:37	3920:47	17	( tdata_t ) buffer
LEAF_NODE	3920:37	3920:37	18	(
TYPE_NAME	3920:38	3920:38	18	tdata_t
LEAF_NODE	3920:38	3920:38	19	tdata_t
LEAF_NODE	3920:45	3920:45	18	)
FIELD	3920:47	3920:47	18	buffer
LEAF_NODE	3920:47	3920:47	19	buffer
LEAF_NODE	3920:53	3920:53	17	,
ARGUMENT	3920:55	3920:55	17	3
FIELD	3920:55	3920:55	18	3
LEAF_NODE	3920:55	3920:55	19	3
LEAF_NODE	3920:56	3920:56	17	)
LEAF_NODE	3920:57	3920:57	13	;
JUMP_STATEMENT	3921:5	3921:10	12	break DESTINATION ;
KEYWORD	3921:5	3921:5	13	break
LEAF_NODE	3921:5	3921:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3921:10	3921:10	13	;
LABEL	3922:4	3922:13	12	case 0x25 :
LEAF_NODE	3922:4	3922:4	13	case
LEAF_NODE	3922:9	3922:9	13	0x25
LEAF_NODE	3922:13	3922:13	13	:
EXPR_STATEMENT	3923:5	3923:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3923:5	3923:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3923:5	3923:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3923:5	3923:5	15	snprintf
LEAF_NODE	3923:5	3923:5	16	snprintf
LEAF_NODE	3923:13	3923:13	15	(
ARGUMENT	3923:14	3923:14	15	buffer
FIELD	3923:14	3923:14	16	buffer
LEAF_NODE	3923:14	3923:14	17	buffer
LEAF_NODE	3923:20	3923:20	15	,
ARGUMENT	3923:22	3923:22	15	sizeof ( buffer )
FUNCTION_CALL	3923:22	3923:35	16	sizeof ( buffer )
CALLEE	3923:22	3923:22	17	sizeof
LEAF_NODE	3923:22	3923:22	18	sizeof
LEAF_NODE	3923:28	3923:28	17	(
ARGUMENT	3923:29	3923:29	17	buffer
FIELD	3923:29	3923:29	18	buffer
LEAF_NODE	3923:29	3923:29	19	buffer
LEAF_NODE	3923:35	3923:35	17	)
LEAF_NODE	3923:36	3923:36	15	,
ARGUMENT	3923:38	3923:38	15	"#%.2X"
FIELD	3923:38	3923:38	16	"#%.2X"
LEAF_NODE	3923:38	3923:38	17	"#%.2X"
LEAF_NODE	3923:45	3923:45	15	,
ARGUMENT	3923:47	3923:47	15	name [ i ]
FIELD	3923:47	3923:53	16	name [ i ]
LEAF_NODE	3923:47	3923:47	17	name
LEAF_NODE	3923:51	3923:51	17	[
EXPR	3923:52	3923:52	17	i
FIELD	3923:52	3923:52	18	i
LEAF_NODE	3923:52	3923:52	19	i
LEAF_NODE	3923:53	3923:53	17	]
LEAF_NODE	3923:54	3923:54	15	)
LEAF_NODE	3923:55	3923:55	13	;
EXPR_STATEMENT	3924:5	3924:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3924:5	3924:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3924:5	3924:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3924:5	3924:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3924:5	3924:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3924:5	3924:5	17	buffer
LEAF_NODE	3924:11	3924:11	17	[
EXPR	3924:12	3924:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3924:12	3924:25	18	sizeof ( buffer )
CALLEE	3924:12	3924:12	19	sizeof
LEAF_NODE	3924:12	3924:12	20	sizeof
LEAF_NODE	3924:18	3924:18	19	(
ARGUMENT	3924:19	3924:19	19	buffer
FIELD	3924:19	3924:19	20	buffer
LEAF_NODE	3924:19	3924:19	21	buffer
LEAF_NODE	3924:25	3924:25	19	)
LEAF_NODE	3924:27	3924:27	18	-
FIELD	3924:29	3924:29	18	1
LEAF_NODE	3924:29	3924:29	19	1
LEAF_NODE	3924:30	3924:30	17	]
ASSIGN_OP	3924:32	3924:32	15	=
LEAF_NODE	3924:32	3924:32	16	=
RVAL	3924:34	3924:34	15	'\0'
FIELD	3924:34	3924:34	16	'\0'
LEAF_NODE	3924:34	3924:34	17	'\0'
LEAF_NODE	3924:38	3924:38	13	;
EXPR_STATEMENT	3925:5	3925:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3925:5	3925:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3925:5	3925:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3925:5	3925:5	15	written
FIELD	3925:5	3925:5	16	written
LEAF_NODE	3925:5	3925:5	17	written
ASSIGN_OP	3925:13	3925:13	15	+=
LEAF_NODE	3925:13	3925:13	16	+=
RVAL	3925:16	3925:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3925:16	3925:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3925:16	3925:16	17	t2pWriteFile
LEAF_NODE	3925:16	3925:16	18	t2pWriteFile
LEAF_NODE	3925:28	3925:28	17	(
ARGUMENT	3925:29	3925:29	17	output
FIELD	3925:29	3925:29	18	output
LEAF_NODE	3925:29	3925:29	19	output
LEAF_NODE	3925:35	3925:35	17	,
ARGUMENT	3925:37	3925:47	17	( tdata_t ) buffer
LEAF_NODE	3925:37	3925:37	18	(
TYPE_NAME	3925:38	3925:38	18	tdata_t
LEAF_NODE	3925:38	3925:38	19	tdata_t
LEAF_NODE	3925:45	3925:45	18	)
FIELD	3925:47	3925:47	18	buffer
LEAF_NODE	3925:47	3925:47	19	buffer
LEAF_NODE	3925:53	3925:53	17	,
ARGUMENT	3925:55	3925:55	17	3
FIELD	3925:55	3925:55	18	3
LEAF_NODE	3925:55	3925:55	19	3
LEAF_NODE	3925:56	3925:56	17	)
LEAF_NODE	3925:57	3925:57	13	;
JUMP_STATEMENT	3926:5	3926:10	12	break DESTINATION ;
KEYWORD	3926:5	3926:5	13	break
LEAF_NODE	3926:5	3926:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3926:10	3926:10	13	;
LABEL	3927:4	3927:13	12	case 0x28 :
LEAF_NODE	3927:4	3927:4	13	case
LEAF_NODE	3927:9	3927:9	13	0x28
LEAF_NODE	3927:13	3927:13	13	:
EXPR_STATEMENT	3928:5	3928:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3928:5	3928:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3928:5	3928:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3928:5	3928:5	15	snprintf
LEAF_NODE	3928:5	3928:5	16	snprintf
LEAF_NODE	3928:13	3928:13	15	(
ARGUMENT	3928:14	3928:14	15	buffer
FIELD	3928:14	3928:14	16	buffer
LEAF_NODE	3928:14	3928:14	17	buffer
LEAF_NODE	3928:20	3928:20	15	,
ARGUMENT	3928:22	3928:22	15	sizeof ( buffer )
FUNCTION_CALL	3928:22	3928:35	16	sizeof ( buffer )
CALLEE	3928:22	3928:22	17	sizeof
LEAF_NODE	3928:22	3928:22	18	sizeof
LEAF_NODE	3928:28	3928:28	17	(
ARGUMENT	3928:29	3928:29	17	buffer
FIELD	3928:29	3928:29	18	buffer
LEAF_NODE	3928:29	3928:29	19	buffer
LEAF_NODE	3928:35	3928:35	17	)
LEAF_NODE	3928:36	3928:36	15	,
ARGUMENT	3928:38	3928:38	15	"#%.2X"
FIELD	3928:38	3928:38	16	"#%.2X"
LEAF_NODE	3928:38	3928:38	17	"#%.2X"
LEAF_NODE	3928:45	3928:45	15	,
ARGUMENT	3928:47	3928:47	15	name [ i ]
FIELD	3928:47	3928:53	16	name [ i ]
LEAF_NODE	3928:47	3928:47	17	name
LEAF_NODE	3928:51	3928:51	17	[
EXPR	3928:52	3928:52	17	i
FIELD	3928:52	3928:52	18	i
LEAF_NODE	3928:52	3928:52	19	i
LEAF_NODE	3928:53	3928:53	17	]
LEAF_NODE	3928:54	3928:54	15	)
LEAF_NODE	3928:55	3928:55	13	;
EXPR_STATEMENT	3929:5	3929:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3929:5	3929:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3929:5	3929:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3929:5	3929:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3929:5	3929:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3929:5	3929:5	17	buffer
LEAF_NODE	3929:11	3929:11	17	[
EXPR	3929:12	3929:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3929:12	3929:25	18	sizeof ( buffer )
CALLEE	3929:12	3929:12	19	sizeof
LEAF_NODE	3929:12	3929:12	20	sizeof
LEAF_NODE	3929:18	3929:18	19	(
ARGUMENT	3929:19	3929:19	19	buffer
FIELD	3929:19	3929:19	20	buffer
LEAF_NODE	3929:19	3929:19	21	buffer
LEAF_NODE	3929:25	3929:25	19	)
LEAF_NODE	3929:27	3929:27	18	-
FIELD	3929:29	3929:29	18	1
LEAF_NODE	3929:29	3929:29	19	1
LEAF_NODE	3929:30	3929:30	17	]
ASSIGN_OP	3929:32	3929:32	15	=
LEAF_NODE	3929:32	3929:32	16	=
RVAL	3929:34	3929:34	15	'\0'
FIELD	3929:34	3929:34	16	'\0'
LEAF_NODE	3929:34	3929:34	17	'\0'
LEAF_NODE	3929:38	3929:38	13	;
EXPR_STATEMENT	3930:5	3930:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3930:5	3930:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3930:5	3930:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3930:5	3930:5	15	written
FIELD	3930:5	3930:5	16	written
LEAF_NODE	3930:5	3930:5	17	written
ASSIGN_OP	3930:13	3930:13	15	+=
LEAF_NODE	3930:13	3930:13	16	+=
RVAL	3930:16	3930:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3930:16	3930:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3930:16	3930:16	17	t2pWriteFile
LEAF_NODE	3930:16	3930:16	18	t2pWriteFile
LEAF_NODE	3930:28	3930:28	17	(
ARGUMENT	3930:29	3930:29	17	output
FIELD	3930:29	3930:29	18	output
LEAF_NODE	3930:29	3930:29	19	output
LEAF_NODE	3930:35	3930:35	17	,
ARGUMENT	3930:37	3930:47	17	( tdata_t ) buffer
LEAF_NODE	3930:37	3930:37	18	(
TYPE_NAME	3930:38	3930:38	18	tdata_t
LEAF_NODE	3930:38	3930:38	19	tdata_t
LEAF_NODE	3930:45	3930:45	18	)
FIELD	3930:47	3930:47	18	buffer
LEAF_NODE	3930:47	3930:47	19	buffer
LEAF_NODE	3930:53	3930:53	17	,
ARGUMENT	3930:55	3930:55	17	3
FIELD	3930:55	3930:55	18	3
LEAF_NODE	3930:55	3930:55	19	3
LEAF_NODE	3930:56	3930:56	17	)
LEAF_NODE	3930:57	3930:57	13	;
JUMP_STATEMENT	3931:5	3931:10	12	break DESTINATION ;
KEYWORD	3931:5	3931:5	13	break
LEAF_NODE	3931:5	3931:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3931:10	3931:10	13	;
LABEL	3932:4	3932:13	12	case 0x29 :
LEAF_NODE	3932:4	3932:4	13	case
LEAF_NODE	3932:9	3932:9	13	0x29
LEAF_NODE	3932:13	3932:13	13	:
EXPR_STATEMENT	3933:5	3933:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3933:5	3933:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3933:5	3933:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3933:5	3933:5	15	snprintf
LEAF_NODE	3933:5	3933:5	16	snprintf
LEAF_NODE	3933:13	3933:13	15	(
ARGUMENT	3933:14	3933:14	15	buffer
FIELD	3933:14	3933:14	16	buffer
LEAF_NODE	3933:14	3933:14	17	buffer
LEAF_NODE	3933:20	3933:20	15	,
ARGUMENT	3933:22	3933:22	15	sizeof ( buffer )
FUNCTION_CALL	3933:22	3933:35	16	sizeof ( buffer )
CALLEE	3933:22	3933:22	17	sizeof
LEAF_NODE	3933:22	3933:22	18	sizeof
LEAF_NODE	3933:28	3933:28	17	(
ARGUMENT	3933:29	3933:29	17	buffer
FIELD	3933:29	3933:29	18	buffer
LEAF_NODE	3933:29	3933:29	19	buffer
LEAF_NODE	3933:35	3933:35	17	)
LEAF_NODE	3933:36	3933:36	15	,
ARGUMENT	3933:38	3933:38	15	"#%.2X"
FIELD	3933:38	3933:38	16	"#%.2X"
LEAF_NODE	3933:38	3933:38	17	"#%.2X"
LEAF_NODE	3933:45	3933:45	15	,
ARGUMENT	3933:47	3933:47	15	name [ i ]
FIELD	3933:47	3933:53	16	name [ i ]
LEAF_NODE	3933:47	3933:47	17	name
LEAF_NODE	3933:51	3933:51	17	[
EXPR	3933:52	3933:52	17	i
FIELD	3933:52	3933:52	18	i
LEAF_NODE	3933:52	3933:52	19	i
LEAF_NODE	3933:53	3933:53	17	]
LEAF_NODE	3933:54	3933:54	15	)
LEAF_NODE	3933:55	3933:55	13	;
EXPR_STATEMENT	3934:5	3934:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3934:5	3934:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3934:5	3934:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3934:5	3934:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3934:5	3934:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3934:5	3934:5	17	buffer
LEAF_NODE	3934:11	3934:11	17	[
EXPR	3934:12	3934:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3934:12	3934:25	18	sizeof ( buffer )
CALLEE	3934:12	3934:12	19	sizeof
LEAF_NODE	3934:12	3934:12	20	sizeof
LEAF_NODE	3934:18	3934:18	19	(
ARGUMENT	3934:19	3934:19	19	buffer
FIELD	3934:19	3934:19	20	buffer
LEAF_NODE	3934:19	3934:19	21	buffer
LEAF_NODE	3934:25	3934:25	19	)
LEAF_NODE	3934:27	3934:27	18	-
FIELD	3934:29	3934:29	18	1
LEAF_NODE	3934:29	3934:29	19	1
LEAF_NODE	3934:30	3934:30	17	]
ASSIGN_OP	3934:32	3934:32	15	=
LEAF_NODE	3934:32	3934:32	16	=
RVAL	3934:34	3934:34	15	'\0'
FIELD	3934:34	3934:34	16	'\0'
LEAF_NODE	3934:34	3934:34	17	'\0'
LEAF_NODE	3934:38	3934:38	13	;
EXPR_STATEMENT	3935:5	3935:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3935:5	3935:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3935:5	3935:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3935:5	3935:5	15	written
FIELD	3935:5	3935:5	16	written
LEAF_NODE	3935:5	3935:5	17	written
ASSIGN_OP	3935:13	3935:13	15	+=
LEAF_NODE	3935:13	3935:13	16	+=
RVAL	3935:16	3935:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3935:16	3935:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3935:16	3935:16	17	t2pWriteFile
LEAF_NODE	3935:16	3935:16	18	t2pWriteFile
LEAF_NODE	3935:28	3935:28	17	(
ARGUMENT	3935:29	3935:29	17	output
FIELD	3935:29	3935:29	18	output
LEAF_NODE	3935:29	3935:29	19	output
LEAF_NODE	3935:35	3935:35	17	,
ARGUMENT	3935:37	3935:47	17	( tdata_t ) buffer
LEAF_NODE	3935:37	3935:37	18	(
TYPE_NAME	3935:38	3935:38	18	tdata_t
LEAF_NODE	3935:38	3935:38	19	tdata_t
LEAF_NODE	3935:45	3935:45	18	)
FIELD	3935:47	3935:47	18	buffer
LEAF_NODE	3935:47	3935:47	19	buffer
LEAF_NODE	3935:53	3935:53	17	,
ARGUMENT	3935:55	3935:55	17	3
FIELD	3935:55	3935:55	18	3
LEAF_NODE	3935:55	3935:55	19	3
LEAF_NODE	3935:56	3935:56	17	)
LEAF_NODE	3935:57	3935:57	13	;
JUMP_STATEMENT	3936:5	3936:10	12	break DESTINATION ;
KEYWORD	3936:5	3936:5	13	break
LEAF_NODE	3936:5	3936:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3936:10	3936:10	13	;
LABEL	3937:4	3937:13	12	case 0x2F :
LEAF_NODE	3937:4	3937:4	13	case
LEAF_NODE	3937:9	3937:9	13	0x2F
LEAF_NODE	3937:13	3937:13	13	:
EXPR_STATEMENT	3938:5	3938:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3938:5	3938:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3938:5	3938:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3938:5	3938:5	15	snprintf
LEAF_NODE	3938:5	3938:5	16	snprintf
LEAF_NODE	3938:13	3938:13	15	(
ARGUMENT	3938:14	3938:14	15	buffer
FIELD	3938:14	3938:14	16	buffer
LEAF_NODE	3938:14	3938:14	17	buffer
LEAF_NODE	3938:20	3938:20	15	,
ARGUMENT	3938:22	3938:22	15	sizeof ( buffer )
FUNCTION_CALL	3938:22	3938:35	16	sizeof ( buffer )
CALLEE	3938:22	3938:22	17	sizeof
LEAF_NODE	3938:22	3938:22	18	sizeof
LEAF_NODE	3938:28	3938:28	17	(
ARGUMENT	3938:29	3938:29	17	buffer
FIELD	3938:29	3938:29	18	buffer
LEAF_NODE	3938:29	3938:29	19	buffer
LEAF_NODE	3938:35	3938:35	17	)
LEAF_NODE	3938:36	3938:36	15	,
ARGUMENT	3938:38	3938:38	15	"#%.2X"
FIELD	3938:38	3938:38	16	"#%.2X"
LEAF_NODE	3938:38	3938:38	17	"#%.2X"
LEAF_NODE	3938:45	3938:45	15	,
ARGUMENT	3938:47	3938:47	15	name [ i ]
FIELD	3938:47	3938:53	16	name [ i ]
LEAF_NODE	3938:47	3938:47	17	name
LEAF_NODE	3938:51	3938:51	17	[
EXPR	3938:52	3938:52	17	i
FIELD	3938:52	3938:52	18	i
LEAF_NODE	3938:52	3938:52	19	i
LEAF_NODE	3938:53	3938:53	17	]
LEAF_NODE	3938:54	3938:54	15	)
LEAF_NODE	3938:55	3938:55	13	;
EXPR_STATEMENT	3939:5	3939:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3939:5	3939:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3939:5	3939:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3939:5	3939:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3939:5	3939:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3939:5	3939:5	17	buffer
LEAF_NODE	3939:11	3939:11	17	[
EXPR	3939:12	3939:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3939:12	3939:25	18	sizeof ( buffer )
CALLEE	3939:12	3939:12	19	sizeof
LEAF_NODE	3939:12	3939:12	20	sizeof
LEAF_NODE	3939:18	3939:18	19	(
ARGUMENT	3939:19	3939:19	19	buffer
FIELD	3939:19	3939:19	20	buffer
LEAF_NODE	3939:19	3939:19	21	buffer
LEAF_NODE	3939:25	3939:25	19	)
LEAF_NODE	3939:27	3939:27	18	-
FIELD	3939:29	3939:29	18	1
LEAF_NODE	3939:29	3939:29	19	1
LEAF_NODE	3939:30	3939:30	17	]
ASSIGN_OP	3939:32	3939:32	15	=
LEAF_NODE	3939:32	3939:32	16	=
RVAL	3939:34	3939:34	15	'\0'
FIELD	3939:34	3939:34	16	'\0'
LEAF_NODE	3939:34	3939:34	17	'\0'
LEAF_NODE	3939:38	3939:38	13	;
EXPR_STATEMENT	3940:5	3940:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3940:5	3940:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3940:5	3940:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3940:5	3940:5	15	written
FIELD	3940:5	3940:5	16	written
LEAF_NODE	3940:5	3940:5	17	written
ASSIGN_OP	3940:13	3940:13	15	+=
LEAF_NODE	3940:13	3940:13	16	+=
RVAL	3940:16	3940:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3940:16	3940:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3940:16	3940:16	17	t2pWriteFile
LEAF_NODE	3940:16	3940:16	18	t2pWriteFile
LEAF_NODE	3940:28	3940:28	17	(
ARGUMENT	3940:29	3940:29	17	output
FIELD	3940:29	3940:29	18	output
LEAF_NODE	3940:29	3940:29	19	output
LEAF_NODE	3940:35	3940:35	17	,
ARGUMENT	3940:37	3940:47	17	( tdata_t ) buffer
LEAF_NODE	3940:37	3940:37	18	(
TYPE_NAME	3940:38	3940:38	18	tdata_t
LEAF_NODE	3940:38	3940:38	19	tdata_t
LEAF_NODE	3940:45	3940:45	18	)
FIELD	3940:47	3940:47	18	buffer
LEAF_NODE	3940:47	3940:47	19	buffer
LEAF_NODE	3940:53	3940:53	17	,
ARGUMENT	3940:55	3940:55	17	3
FIELD	3940:55	3940:55	18	3
LEAF_NODE	3940:55	3940:55	19	3
LEAF_NODE	3940:56	3940:56	17	)
LEAF_NODE	3940:57	3940:57	13	;
JUMP_STATEMENT	3941:5	3941:10	12	break DESTINATION ;
KEYWORD	3941:5	3941:5	13	break
LEAF_NODE	3941:5	3941:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3941:10	3941:10	13	;
LABEL	3942:4	3942:13	12	case 0x3C :
LEAF_NODE	3942:4	3942:4	13	case
LEAF_NODE	3942:9	3942:9	13	0x3C
LEAF_NODE	3942:13	3942:13	13	:
EXPR_STATEMENT	3943:5	3943:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3943:5	3943:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3943:5	3943:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3943:5	3943:5	15	snprintf
LEAF_NODE	3943:5	3943:5	16	snprintf
LEAF_NODE	3943:13	3943:13	15	(
ARGUMENT	3943:14	3943:14	15	buffer
FIELD	3943:14	3943:14	16	buffer
LEAF_NODE	3943:14	3943:14	17	buffer
LEAF_NODE	3943:20	3943:20	15	,
ARGUMENT	3943:22	3943:22	15	sizeof ( buffer )
FUNCTION_CALL	3943:22	3943:35	16	sizeof ( buffer )
CALLEE	3943:22	3943:22	17	sizeof
LEAF_NODE	3943:22	3943:22	18	sizeof
LEAF_NODE	3943:28	3943:28	17	(
ARGUMENT	3943:29	3943:29	17	buffer
FIELD	3943:29	3943:29	18	buffer
LEAF_NODE	3943:29	3943:29	19	buffer
LEAF_NODE	3943:35	3943:35	17	)
LEAF_NODE	3943:36	3943:36	15	,
ARGUMENT	3943:38	3943:38	15	"#%.2X"
FIELD	3943:38	3943:38	16	"#%.2X"
LEAF_NODE	3943:38	3943:38	17	"#%.2X"
LEAF_NODE	3943:45	3943:45	15	,
ARGUMENT	3943:47	3943:47	15	name [ i ]
FIELD	3943:47	3943:53	16	name [ i ]
LEAF_NODE	3943:47	3943:47	17	name
LEAF_NODE	3943:51	3943:51	17	[
EXPR	3943:52	3943:52	17	i
FIELD	3943:52	3943:52	18	i
LEAF_NODE	3943:52	3943:52	19	i
LEAF_NODE	3943:53	3943:53	17	]
LEAF_NODE	3943:54	3943:54	15	)
LEAF_NODE	3943:55	3943:55	13	;
EXPR_STATEMENT	3944:5	3944:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3944:5	3944:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3944:5	3944:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3944:5	3944:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3944:5	3944:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3944:5	3944:5	17	buffer
LEAF_NODE	3944:11	3944:11	17	[
EXPR	3944:12	3944:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3944:12	3944:25	18	sizeof ( buffer )
CALLEE	3944:12	3944:12	19	sizeof
LEAF_NODE	3944:12	3944:12	20	sizeof
LEAF_NODE	3944:18	3944:18	19	(
ARGUMENT	3944:19	3944:19	19	buffer
FIELD	3944:19	3944:19	20	buffer
LEAF_NODE	3944:19	3944:19	21	buffer
LEAF_NODE	3944:25	3944:25	19	)
LEAF_NODE	3944:27	3944:27	18	-
FIELD	3944:29	3944:29	18	1
LEAF_NODE	3944:29	3944:29	19	1
LEAF_NODE	3944:30	3944:30	17	]
ASSIGN_OP	3944:32	3944:32	15	=
LEAF_NODE	3944:32	3944:32	16	=
RVAL	3944:34	3944:34	15	'\0'
FIELD	3944:34	3944:34	16	'\0'
LEAF_NODE	3944:34	3944:34	17	'\0'
LEAF_NODE	3944:38	3944:38	13	;
EXPR_STATEMENT	3945:5	3945:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3945:5	3945:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3945:5	3945:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3945:5	3945:5	15	written
FIELD	3945:5	3945:5	16	written
LEAF_NODE	3945:5	3945:5	17	written
ASSIGN_OP	3945:13	3945:13	15	+=
LEAF_NODE	3945:13	3945:13	16	+=
RVAL	3945:16	3945:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3945:16	3945:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3945:16	3945:16	17	t2pWriteFile
LEAF_NODE	3945:16	3945:16	18	t2pWriteFile
LEAF_NODE	3945:28	3945:28	17	(
ARGUMENT	3945:29	3945:29	17	output
FIELD	3945:29	3945:29	18	output
LEAF_NODE	3945:29	3945:29	19	output
LEAF_NODE	3945:35	3945:35	17	,
ARGUMENT	3945:37	3945:47	17	( tdata_t ) buffer
LEAF_NODE	3945:37	3945:37	18	(
TYPE_NAME	3945:38	3945:38	18	tdata_t
LEAF_NODE	3945:38	3945:38	19	tdata_t
LEAF_NODE	3945:45	3945:45	18	)
FIELD	3945:47	3945:47	18	buffer
LEAF_NODE	3945:47	3945:47	19	buffer
LEAF_NODE	3945:53	3945:53	17	,
ARGUMENT	3945:55	3945:55	17	3
FIELD	3945:55	3945:55	18	3
LEAF_NODE	3945:55	3945:55	19	3
LEAF_NODE	3945:56	3945:56	17	)
LEAF_NODE	3945:57	3945:57	13	;
JUMP_STATEMENT	3946:5	3946:10	12	break DESTINATION ;
KEYWORD	3946:5	3946:5	13	break
LEAF_NODE	3946:5	3946:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3946:10	3946:10	13	;
LABEL	3947:4	3947:13	12	case 0x3E :
LEAF_NODE	3947:4	3947:4	13	case
LEAF_NODE	3947:9	3947:9	13	0x3E
LEAF_NODE	3947:13	3947:13	13	:
EXPR_STATEMENT	3948:5	3948:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3948:5	3948:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3948:5	3948:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3948:5	3948:5	15	snprintf
LEAF_NODE	3948:5	3948:5	16	snprintf
LEAF_NODE	3948:13	3948:13	15	(
ARGUMENT	3948:14	3948:14	15	buffer
FIELD	3948:14	3948:14	16	buffer
LEAF_NODE	3948:14	3948:14	17	buffer
LEAF_NODE	3948:20	3948:20	15	,
ARGUMENT	3948:22	3948:22	15	sizeof ( buffer )
FUNCTION_CALL	3948:22	3948:35	16	sizeof ( buffer )
CALLEE	3948:22	3948:22	17	sizeof
LEAF_NODE	3948:22	3948:22	18	sizeof
LEAF_NODE	3948:28	3948:28	17	(
ARGUMENT	3948:29	3948:29	17	buffer
FIELD	3948:29	3948:29	18	buffer
LEAF_NODE	3948:29	3948:29	19	buffer
LEAF_NODE	3948:35	3948:35	17	)
LEAF_NODE	3948:36	3948:36	15	,
ARGUMENT	3948:38	3948:38	15	"#%.2X"
FIELD	3948:38	3948:38	16	"#%.2X"
LEAF_NODE	3948:38	3948:38	17	"#%.2X"
LEAF_NODE	3948:45	3948:45	15	,
ARGUMENT	3948:47	3948:47	15	name [ i ]
FIELD	3948:47	3948:53	16	name [ i ]
LEAF_NODE	3948:47	3948:47	17	name
LEAF_NODE	3948:51	3948:51	17	[
EXPR	3948:52	3948:52	17	i
FIELD	3948:52	3948:52	18	i
LEAF_NODE	3948:52	3948:52	19	i
LEAF_NODE	3948:53	3948:53	17	]
LEAF_NODE	3948:54	3948:54	15	)
LEAF_NODE	3948:55	3948:55	13	;
EXPR_STATEMENT	3949:5	3949:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3949:5	3949:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3949:5	3949:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3949:5	3949:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3949:5	3949:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3949:5	3949:5	17	buffer
LEAF_NODE	3949:11	3949:11	17	[
EXPR	3949:12	3949:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3949:12	3949:25	18	sizeof ( buffer )
CALLEE	3949:12	3949:12	19	sizeof
LEAF_NODE	3949:12	3949:12	20	sizeof
LEAF_NODE	3949:18	3949:18	19	(
ARGUMENT	3949:19	3949:19	19	buffer
FIELD	3949:19	3949:19	20	buffer
LEAF_NODE	3949:19	3949:19	21	buffer
LEAF_NODE	3949:25	3949:25	19	)
LEAF_NODE	3949:27	3949:27	18	-
FIELD	3949:29	3949:29	18	1
LEAF_NODE	3949:29	3949:29	19	1
LEAF_NODE	3949:30	3949:30	17	]
ASSIGN_OP	3949:32	3949:32	15	=
LEAF_NODE	3949:32	3949:32	16	=
RVAL	3949:34	3949:34	15	'\0'
FIELD	3949:34	3949:34	16	'\0'
LEAF_NODE	3949:34	3949:34	17	'\0'
LEAF_NODE	3949:38	3949:38	13	;
EXPR_STATEMENT	3950:5	3950:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3950:5	3950:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3950:5	3950:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3950:5	3950:5	15	written
FIELD	3950:5	3950:5	16	written
LEAF_NODE	3950:5	3950:5	17	written
ASSIGN_OP	3950:13	3950:13	15	+=
LEAF_NODE	3950:13	3950:13	16	+=
RVAL	3950:16	3950:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3950:16	3950:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3950:16	3950:16	17	t2pWriteFile
LEAF_NODE	3950:16	3950:16	18	t2pWriteFile
LEAF_NODE	3950:28	3950:28	17	(
ARGUMENT	3950:29	3950:29	17	output
FIELD	3950:29	3950:29	18	output
LEAF_NODE	3950:29	3950:29	19	output
LEAF_NODE	3950:35	3950:35	17	,
ARGUMENT	3950:37	3950:47	17	( tdata_t ) buffer
LEAF_NODE	3950:37	3950:37	18	(
TYPE_NAME	3950:38	3950:38	18	tdata_t
LEAF_NODE	3950:38	3950:38	19	tdata_t
LEAF_NODE	3950:45	3950:45	18	)
FIELD	3950:47	3950:47	18	buffer
LEAF_NODE	3950:47	3950:47	19	buffer
LEAF_NODE	3950:53	3950:53	17	,
ARGUMENT	3950:55	3950:55	17	3
FIELD	3950:55	3950:55	18	3
LEAF_NODE	3950:55	3950:55	19	3
LEAF_NODE	3950:56	3950:56	17	)
LEAF_NODE	3950:57	3950:57	13	;
JUMP_STATEMENT	3951:5	3951:10	12	break DESTINATION ;
KEYWORD	3951:5	3951:5	13	break
LEAF_NODE	3951:5	3951:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3951:10	3951:10	13	;
LABEL	3952:4	3952:13	12	case 0x5B :
LEAF_NODE	3952:4	3952:4	13	case
LEAF_NODE	3952:9	3952:9	13	0x5B
LEAF_NODE	3952:13	3952:13	13	:
EXPR_STATEMENT	3953:5	3953:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3953:5	3953:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3953:5	3953:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3953:5	3953:5	15	snprintf
LEAF_NODE	3953:5	3953:5	16	snprintf
LEAF_NODE	3953:13	3953:13	15	(
ARGUMENT	3953:14	3953:14	15	buffer
FIELD	3953:14	3953:14	16	buffer
LEAF_NODE	3953:14	3953:14	17	buffer
LEAF_NODE	3953:20	3953:20	15	,
ARGUMENT	3953:22	3953:22	15	sizeof ( buffer )
FUNCTION_CALL	3953:22	3953:35	16	sizeof ( buffer )
CALLEE	3953:22	3953:22	17	sizeof
LEAF_NODE	3953:22	3953:22	18	sizeof
LEAF_NODE	3953:28	3953:28	17	(
ARGUMENT	3953:29	3953:29	17	buffer
FIELD	3953:29	3953:29	18	buffer
LEAF_NODE	3953:29	3953:29	19	buffer
LEAF_NODE	3953:35	3953:35	17	)
LEAF_NODE	3953:36	3953:36	15	,
ARGUMENT	3953:38	3953:38	15	"#%.2X"
FIELD	3953:38	3953:38	16	"#%.2X"
LEAF_NODE	3953:38	3953:38	17	"#%.2X"
LEAF_NODE	3953:45	3953:45	15	,
ARGUMENT	3953:47	3953:47	15	name [ i ]
FIELD	3953:47	3953:53	16	name [ i ]
LEAF_NODE	3953:47	3953:47	17	name
LEAF_NODE	3953:51	3953:51	17	[
EXPR	3953:52	3953:52	17	i
FIELD	3953:52	3953:52	18	i
LEAF_NODE	3953:52	3953:52	19	i
LEAF_NODE	3953:53	3953:53	17	]
LEAF_NODE	3953:54	3953:54	15	)
LEAF_NODE	3953:55	3953:55	13	;
EXPR_STATEMENT	3954:5	3954:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3954:5	3954:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3954:5	3954:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3954:5	3954:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3954:5	3954:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3954:5	3954:5	17	buffer
LEAF_NODE	3954:11	3954:11	17	[
EXPR	3954:12	3954:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3954:12	3954:25	18	sizeof ( buffer )
CALLEE	3954:12	3954:12	19	sizeof
LEAF_NODE	3954:12	3954:12	20	sizeof
LEAF_NODE	3954:18	3954:18	19	(
ARGUMENT	3954:19	3954:19	19	buffer
FIELD	3954:19	3954:19	20	buffer
LEAF_NODE	3954:19	3954:19	21	buffer
LEAF_NODE	3954:25	3954:25	19	)
LEAF_NODE	3954:27	3954:27	18	-
FIELD	3954:29	3954:29	18	1
LEAF_NODE	3954:29	3954:29	19	1
LEAF_NODE	3954:30	3954:30	17	]
ASSIGN_OP	3954:32	3954:32	15	=
LEAF_NODE	3954:32	3954:32	16	=
RVAL	3954:34	3954:34	15	'\0'
FIELD	3954:34	3954:34	16	'\0'
LEAF_NODE	3954:34	3954:34	17	'\0'
LEAF_NODE	3954:38	3954:38	13	;
EXPR_STATEMENT	3955:5	3955:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3955:5	3955:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3955:5	3955:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3955:5	3955:5	15	written
FIELD	3955:5	3955:5	16	written
LEAF_NODE	3955:5	3955:5	17	written
ASSIGN_OP	3955:13	3955:13	15	+=
LEAF_NODE	3955:13	3955:13	16	+=
RVAL	3955:16	3955:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3955:16	3955:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3955:16	3955:16	17	t2pWriteFile
LEAF_NODE	3955:16	3955:16	18	t2pWriteFile
LEAF_NODE	3955:28	3955:28	17	(
ARGUMENT	3955:29	3955:29	17	output
FIELD	3955:29	3955:29	18	output
LEAF_NODE	3955:29	3955:29	19	output
LEAF_NODE	3955:35	3955:35	17	,
ARGUMENT	3955:37	3955:47	17	( tdata_t ) buffer
LEAF_NODE	3955:37	3955:37	18	(
TYPE_NAME	3955:38	3955:38	18	tdata_t
LEAF_NODE	3955:38	3955:38	19	tdata_t
LEAF_NODE	3955:45	3955:45	18	)
FIELD	3955:47	3955:47	18	buffer
LEAF_NODE	3955:47	3955:47	19	buffer
LEAF_NODE	3955:53	3955:53	17	,
ARGUMENT	3955:55	3955:55	17	3
FIELD	3955:55	3955:55	18	3
LEAF_NODE	3955:55	3955:55	19	3
LEAF_NODE	3955:56	3955:56	17	)
LEAF_NODE	3955:57	3955:57	13	;
JUMP_STATEMENT	3956:5	3956:10	12	break DESTINATION ;
KEYWORD	3956:5	3956:5	13	break
LEAF_NODE	3956:5	3956:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3956:10	3956:10	13	;
LABEL	3957:4	3957:13	12	case 0x5D :
LEAF_NODE	3957:4	3957:4	13	case
LEAF_NODE	3957:9	3957:9	13	0x5D
LEAF_NODE	3957:13	3957:13	13	:
EXPR_STATEMENT	3958:5	3958:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3958:5	3958:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3958:5	3958:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3958:5	3958:5	15	snprintf
LEAF_NODE	3958:5	3958:5	16	snprintf
LEAF_NODE	3958:13	3958:13	15	(
ARGUMENT	3958:14	3958:14	15	buffer
FIELD	3958:14	3958:14	16	buffer
LEAF_NODE	3958:14	3958:14	17	buffer
LEAF_NODE	3958:20	3958:20	15	,
ARGUMENT	3958:22	3958:22	15	sizeof ( buffer )
FUNCTION_CALL	3958:22	3958:35	16	sizeof ( buffer )
CALLEE	3958:22	3958:22	17	sizeof
LEAF_NODE	3958:22	3958:22	18	sizeof
LEAF_NODE	3958:28	3958:28	17	(
ARGUMENT	3958:29	3958:29	17	buffer
FIELD	3958:29	3958:29	18	buffer
LEAF_NODE	3958:29	3958:29	19	buffer
LEAF_NODE	3958:35	3958:35	17	)
LEAF_NODE	3958:36	3958:36	15	,
ARGUMENT	3958:38	3958:38	15	"#%.2X"
FIELD	3958:38	3958:38	16	"#%.2X"
LEAF_NODE	3958:38	3958:38	17	"#%.2X"
LEAF_NODE	3958:45	3958:45	15	,
ARGUMENT	3958:47	3958:47	15	name [ i ]
FIELD	3958:47	3958:53	16	name [ i ]
LEAF_NODE	3958:47	3958:47	17	name
LEAF_NODE	3958:51	3958:51	17	[
EXPR	3958:52	3958:52	17	i
FIELD	3958:52	3958:52	18	i
LEAF_NODE	3958:52	3958:52	19	i
LEAF_NODE	3958:53	3958:53	17	]
LEAF_NODE	3958:54	3958:54	15	)
LEAF_NODE	3958:55	3958:55	13	;
EXPR_STATEMENT	3959:5	3959:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3959:5	3959:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3959:5	3959:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3959:5	3959:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3959:5	3959:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3959:5	3959:5	17	buffer
LEAF_NODE	3959:11	3959:11	17	[
EXPR	3959:12	3959:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3959:12	3959:25	18	sizeof ( buffer )
CALLEE	3959:12	3959:12	19	sizeof
LEAF_NODE	3959:12	3959:12	20	sizeof
LEAF_NODE	3959:18	3959:18	19	(
ARGUMENT	3959:19	3959:19	19	buffer
FIELD	3959:19	3959:19	20	buffer
LEAF_NODE	3959:19	3959:19	21	buffer
LEAF_NODE	3959:25	3959:25	19	)
LEAF_NODE	3959:27	3959:27	18	-
FIELD	3959:29	3959:29	18	1
LEAF_NODE	3959:29	3959:29	19	1
LEAF_NODE	3959:30	3959:30	17	]
ASSIGN_OP	3959:32	3959:32	15	=
LEAF_NODE	3959:32	3959:32	16	=
RVAL	3959:34	3959:34	15	'\0'
FIELD	3959:34	3959:34	16	'\0'
LEAF_NODE	3959:34	3959:34	17	'\0'
LEAF_NODE	3959:38	3959:38	13	;
EXPR_STATEMENT	3960:5	3960:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3960:5	3960:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3960:5	3960:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3960:5	3960:5	15	written
FIELD	3960:5	3960:5	16	written
LEAF_NODE	3960:5	3960:5	17	written
ASSIGN_OP	3960:13	3960:13	15	+=
LEAF_NODE	3960:13	3960:13	16	+=
RVAL	3960:16	3960:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3960:16	3960:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3960:16	3960:16	17	t2pWriteFile
LEAF_NODE	3960:16	3960:16	18	t2pWriteFile
LEAF_NODE	3960:28	3960:28	17	(
ARGUMENT	3960:29	3960:29	17	output
FIELD	3960:29	3960:29	18	output
LEAF_NODE	3960:29	3960:29	19	output
LEAF_NODE	3960:35	3960:35	17	,
ARGUMENT	3960:37	3960:47	17	( tdata_t ) buffer
LEAF_NODE	3960:37	3960:37	18	(
TYPE_NAME	3960:38	3960:38	18	tdata_t
LEAF_NODE	3960:38	3960:38	19	tdata_t
LEAF_NODE	3960:45	3960:45	18	)
FIELD	3960:47	3960:47	18	buffer
LEAF_NODE	3960:47	3960:47	19	buffer
LEAF_NODE	3960:53	3960:53	17	,
ARGUMENT	3960:55	3960:55	17	3
FIELD	3960:55	3960:55	18	3
LEAF_NODE	3960:55	3960:55	19	3
LEAF_NODE	3960:56	3960:56	17	)
LEAF_NODE	3960:57	3960:57	13	;
JUMP_STATEMENT	3961:5	3961:10	12	break DESTINATION ;
KEYWORD	3961:5	3961:5	13	break
LEAF_NODE	3961:5	3961:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3961:10	3961:10	13	;
LABEL	3962:4	3962:13	12	case 0x7B :
LEAF_NODE	3962:4	3962:4	13	case
LEAF_NODE	3962:9	3962:9	13	0x7B
LEAF_NODE	3962:13	3962:13	13	:
EXPR_STATEMENT	3963:5	3963:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3963:5	3963:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3963:5	3963:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3963:5	3963:5	15	snprintf
LEAF_NODE	3963:5	3963:5	16	snprintf
LEAF_NODE	3963:13	3963:13	15	(
ARGUMENT	3963:14	3963:14	15	buffer
FIELD	3963:14	3963:14	16	buffer
LEAF_NODE	3963:14	3963:14	17	buffer
LEAF_NODE	3963:20	3963:20	15	,
ARGUMENT	3963:22	3963:22	15	sizeof ( buffer )
FUNCTION_CALL	3963:22	3963:35	16	sizeof ( buffer )
CALLEE	3963:22	3963:22	17	sizeof
LEAF_NODE	3963:22	3963:22	18	sizeof
LEAF_NODE	3963:28	3963:28	17	(
ARGUMENT	3963:29	3963:29	17	buffer
FIELD	3963:29	3963:29	18	buffer
LEAF_NODE	3963:29	3963:29	19	buffer
LEAF_NODE	3963:35	3963:35	17	)
LEAF_NODE	3963:36	3963:36	15	,
ARGUMENT	3963:38	3963:38	15	"#%.2X"
FIELD	3963:38	3963:38	16	"#%.2X"
LEAF_NODE	3963:38	3963:38	17	"#%.2X"
LEAF_NODE	3963:45	3963:45	15	,
ARGUMENT	3963:47	3963:47	15	name [ i ]
FIELD	3963:47	3963:53	16	name [ i ]
LEAF_NODE	3963:47	3963:47	17	name
LEAF_NODE	3963:51	3963:51	17	[
EXPR	3963:52	3963:52	17	i
FIELD	3963:52	3963:52	18	i
LEAF_NODE	3963:52	3963:52	19	i
LEAF_NODE	3963:53	3963:53	17	]
LEAF_NODE	3963:54	3963:54	15	)
LEAF_NODE	3963:55	3963:55	13	;
EXPR_STATEMENT	3964:5	3964:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3964:5	3964:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3964:5	3964:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3964:5	3964:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3964:5	3964:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3964:5	3964:5	17	buffer
LEAF_NODE	3964:11	3964:11	17	[
EXPR	3964:12	3964:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3964:12	3964:25	18	sizeof ( buffer )
CALLEE	3964:12	3964:12	19	sizeof
LEAF_NODE	3964:12	3964:12	20	sizeof
LEAF_NODE	3964:18	3964:18	19	(
ARGUMENT	3964:19	3964:19	19	buffer
FIELD	3964:19	3964:19	20	buffer
LEAF_NODE	3964:19	3964:19	21	buffer
LEAF_NODE	3964:25	3964:25	19	)
LEAF_NODE	3964:27	3964:27	18	-
FIELD	3964:29	3964:29	18	1
LEAF_NODE	3964:29	3964:29	19	1
LEAF_NODE	3964:30	3964:30	17	]
ASSIGN_OP	3964:32	3964:32	15	=
LEAF_NODE	3964:32	3964:32	16	=
RVAL	3964:34	3964:34	15	'\0'
FIELD	3964:34	3964:34	16	'\0'
LEAF_NODE	3964:34	3964:34	17	'\0'
LEAF_NODE	3964:38	3964:38	13	;
EXPR_STATEMENT	3965:5	3965:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3965:5	3965:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3965:5	3965:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3965:5	3965:5	15	written
FIELD	3965:5	3965:5	16	written
LEAF_NODE	3965:5	3965:5	17	written
ASSIGN_OP	3965:13	3965:13	15	+=
LEAF_NODE	3965:13	3965:13	16	+=
RVAL	3965:16	3965:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3965:16	3965:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3965:16	3965:16	17	t2pWriteFile
LEAF_NODE	3965:16	3965:16	18	t2pWriteFile
LEAF_NODE	3965:28	3965:28	17	(
ARGUMENT	3965:29	3965:29	17	output
FIELD	3965:29	3965:29	18	output
LEAF_NODE	3965:29	3965:29	19	output
LEAF_NODE	3965:35	3965:35	17	,
ARGUMENT	3965:37	3965:47	17	( tdata_t ) buffer
LEAF_NODE	3965:37	3965:37	18	(
TYPE_NAME	3965:38	3965:38	18	tdata_t
LEAF_NODE	3965:38	3965:38	19	tdata_t
LEAF_NODE	3965:45	3965:45	18	)
FIELD	3965:47	3965:47	18	buffer
LEAF_NODE	3965:47	3965:47	19	buffer
LEAF_NODE	3965:53	3965:53	17	,
ARGUMENT	3965:55	3965:55	17	3
FIELD	3965:55	3965:55	18	3
LEAF_NODE	3965:55	3965:55	19	3
LEAF_NODE	3965:56	3965:56	17	)
LEAF_NODE	3965:57	3965:57	13	;
JUMP_STATEMENT	3966:5	3966:10	12	break DESTINATION ;
KEYWORD	3966:5	3966:5	13	break
LEAF_NODE	3966:5	3966:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3966:10	3966:10	13	;
LABEL	3967:4	3967:13	12	case 0x7D :
LEAF_NODE	3967:4	3967:4	13	case
LEAF_NODE	3967:9	3967:9	13	0x7D
LEAF_NODE	3967:13	3967:13	13	:
EXPR_STATEMENT	3968:5	3968:55	12	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] ) ;
EXPR	3968:5	3968:5	13	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
FUNCTION_CALL	3968:5	3968:54	14	snprintf ( buffer , sizeof ( buffer ) , "#%.2X" , name [ i ] )
CALLEE	3968:5	3968:5	15	snprintf
LEAF_NODE	3968:5	3968:5	16	snprintf
LEAF_NODE	3968:13	3968:13	15	(
ARGUMENT	3968:14	3968:14	15	buffer
FIELD	3968:14	3968:14	16	buffer
LEAF_NODE	3968:14	3968:14	17	buffer
LEAF_NODE	3968:20	3968:20	15	,
ARGUMENT	3968:22	3968:22	15	sizeof ( buffer )
FUNCTION_CALL	3968:22	3968:35	16	sizeof ( buffer )
CALLEE	3968:22	3968:22	17	sizeof
LEAF_NODE	3968:22	3968:22	18	sizeof
LEAF_NODE	3968:28	3968:28	17	(
ARGUMENT	3968:29	3968:29	17	buffer
FIELD	3968:29	3968:29	18	buffer
LEAF_NODE	3968:29	3968:29	19	buffer
LEAF_NODE	3968:35	3968:35	17	)
LEAF_NODE	3968:36	3968:36	15	,
ARGUMENT	3968:38	3968:38	15	"#%.2X"
FIELD	3968:38	3968:38	16	"#%.2X"
LEAF_NODE	3968:38	3968:38	17	"#%.2X"
LEAF_NODE	3968:45	3968:45	15	,
ARGUMENT	3968:47	3968:47	15	name [ i ]
FIELD	3968:47	3968:53	16	name [ i ]
LEAF_NODE	3968:47	3968:47	17	name
LEAF_NODE	3968:51	3968:51	17	[
EXPR	3968:52	3968:52	17	i
FIELD	3968:52	3968:52	18	i
LEAF_NODE	3968:52	3968:52	19	i
LEAF_NODE	3968:53	3968:53	17	]
LEAF_NODE	3968:54	3968:54	15	)
LEAF_NODE	3968:55	3968:55	13	;
EXPR_STATEMENT	3969:5	3969:38	12	buffer [ sizeof ( buffer ) - 1 ] = '\0' ;
EXPR	3969:5	3969:5	13	buffer [ sizeof ( buffer ) - 1 ] = '\0'
ASSIGN	3969:5	3969:34	14	buffer [ sizeof ( buffer ) - 1 ] = '\0'
LVAL	3969:5	3969:5	15	buffer [ sizeof ( buffer ) - 1 ]
FIELD	3969:5	3969:30	16	buffer [ sizeof ( buffer ) - 1 ]
LEAF_NODE	3969:5	3969:5	17	buffer
LEAF_NODE	3969:11	3969:11	17	[
EXPR	3969:12	3969:29	17	sizeof ( buffer ) - 1
FUNCTION_CALL	3969:12	3969:25	18	sizeof ( buffer )
CALLEE	3969:12	3969:12	19	sizeof
LEAF_NODE	3969:12	3969:12	20	sizeof
LEAF_NODE	3969:18	3969:18	19	(
ARGUMENT	3969:19	3969:19	19	buffer
FIELD	3969:19	3969:19	20	buffer
LEAF_NODE	3969:19	3969:19	21	buffer
LEAF_NODE	3969:25	3969:25	19	)
LEAF_NODE	3969:27	3969:27	18	-
FIELD	3969:29	3969:29	18	1
LEAF_NODE	3969:29	3969:29	19	1
LEAF_NODE	3969:30	3969:30	17	]
ASSIGN_OP	3969:32	3969:32	15	=
LEAF_NODE	3969:32	3969:32	16	=
RVAL	3969:34	3969:34	15	'\0'
FIELD	3969:34	3969:34	16	'\0'
LEAF_NODE	3969:34	3969:34	17	'\0'
LEAF_NODE	3969:38	3969:38	13	;
EXPR_STATEMENT	3970:5	3970:57	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 ) ;
EXPR	3970:5	3970:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
ASSIGN	3970:5	3970:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
LVAL	3970:5	3970:5	15	written
FIELD	3970:5	3970:5	16	written
LEAF_NODE	3970:5	3970:5	17	written
ASSIGN_OP	3970:13	3970:13	15	+=
LEAF_NODE	3970:13	3970:13	16	+=
RVAL	3970:16	3970:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
FUNCTION_CALL	3970:16	3970:56	16	t2pWriteFile ( output , ( tdata_t ) buffer , 3 )
CALLEE	3970:16	3970:16	17	t2pWriteFile
LEAF_NODE	3970:16	3970:16	18	t2pWriteFile
LEAF_NODE	3970:28	3970:28	17	(
ARGUMENT	3970:29	3970:29	17	output
FIELD	3970:29	3970:29	18	output
LEAF_NODE	3970:29	3970:29	19	output
LEAF_NODE	3970:35	3970:35	17	,
ARGUMENT	3970:37	3970:47	17	( tdata_t ) buffer
LEAF_NODE	3970:37	3970:37	18	(
TYPE_NAME	3970:38	3970:38	18	tdata_t
LEAF_NODE	3970:38	3970:38	19	tdata_t
LEAF_NODE	3970:45	3970:45	18	)
FIELD	3970:47	3970:47	18	buffer
LEAF_NODE	3970:47	3970:47	19	buffer
LEAF_NODE	3970:53	3970:53	17	,
ARGUMENT	3970:55	3970:55	17	3
FIELD	3970:55	3970:55	18	3
LEAF_NODE	3970:55	3970:55	19	3
LEAF_NODE	3970:56	3970:56	17	)
LEAF_NODE	3970:57	3970:57	13	;
JUMP_STATEMENT	3971:5	3971:10	12	break DESTINATION ;
KEYWORD	3971:5	3971:5	13	break
LEAF_NODE	3971:5	3971:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3971:10	3971:10	13	;
LABEL	3972:4	3972:11	12	default :
LEAF_NODE	3972:4	3972:4	13	default
LEAF_NODE	3972:11	3972:11	13	:
EXPR_STATEMENT	3973:5	3973:59	12	written += t2pWriteFile ( output , ( tdata_t ) & name [ i ] , 1 ) ;
EXPR	3973:5	3973:5	13	written += t2pWriteFile ( output , ( tdata_t ) & name [ i ] , 1 )
ASSIGN	3973:5	3973:16	14	written += t2pWriteFile ( output , ( tdata_t ) & name [ i ] , 1 )
LVAL	3973:5	3973:5	15	written
FIELD	3973:5	3973:5	16	written
LEAF_NODE	3973:5	3973:5	17	written
ASSIGN_OP	3973:13	3973:13	15	+=
LEAF_NODE	3973:13	3973:13	16	+=
RVAL	3973:16	3973:16	15	t2pWriteFile ( output , ( tdata_t ) & name [ i ] , 1 )
FUNCTION_CALL	3973:16	3973:58	16	t2pWriteFile ( output , ( tdata_t ) & name [ i ] , 1 )
CALLEE	3973:16	3973:16	17	t2pWriteFile
LEAF_NODE	3973:16	3973:16	18	t2pWriteFile
LEAF_NODE	3973:28	3973:28	17	(
ARGUMENT	3973:29	3973:29	17	output
FIELD	3973:29	3973:29	18	output
LEAF_NODE	3973:29	3973:29	19	output
LEAF_NODE	3973:35	3973:35	17	,
ARGUMENT	3973:37	3973:47	17	( tdata_t ) & name [ i ]
LEAF_NODE	3973:37	3973:37	18	(
TYPE_NAME	3973:38	3973:38	18	tdata_t
LEAF_NODE	3973:38	3973:38	19	tdata_t
LEAF_NODE	3973:45	3973:45	18	)
UNARY_EXPR	3973:47	3973:48	18	& name [ i ]
UNARY_OPERATOR	3973:47	3973:47	19	&
LEAF_NODE	3973:47	3973:47	20	&
FIELD	3973:48	3973:54	19	name [ i ]
LEAF_NODE	3973:48	3973:48	20	name
LEAF_NODE	3973:52	3973:52	20	[
EXPR	3973:53	3973:53	20	i
FIELD	3973:53	3973:53	21	i
LEAF_NODE	3973:53	3973:53	22	i
LEAF_NODE	3973:54	3973:54	20	]
LEAF_NODE	3973:55	3973:55	17	,
ARGUMENT	3973:57	3973:57	17	1
FIELD	3973:57	3973:57	18	1
LEAF_NODE	3973:57	3973:57	19	1
LEAF_NODE	3973:58	3973:58	17	)
LEAF_NODE	3973:59	3973:59	13	;
LEAF_NODE	3974:3	3974:3	11	}
LEAF_NODE	3975:2	3975:2	8	}
EXPR_STATEMENT	3976:2	3976:12	6	nextchar = 0 ;
EXPR	3976:2	3976:2	7	nextchar = 0
ASSIGN	3976:2	3976:11	8	nextchar = 0
LVAL	3976:2	3976:2	9	nextchar
FIELD	3976:2	3976:2	10	nextchar
LEAF_NODE	3976:2	3976:2	11	nextchar
ASSIGN_OP	3976:10	3976:10	9	=
LEAF_NODE	3976:10	3976:10	10	=
RVAL	3976:11	3976:11	9	0
FIELD	3976:11	3976:11	10	0
LEAF_NODE	3976:11	3976:11	11	0
LEAF_NODE	3976:12	3976:12	7	;
LEAF_NODE	3977:1	3977:1	5	}
EXPR_STATEMENT	3978:1	3978:50	3	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 ) ;
EXPR	3978:1	3978:1	4	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
ASSIGN	3978:1	3978:12	5	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
LVAL	3978:1	3978:1	6	written
FIELD	3978:1	3978:1	7	written
LEAF_NODE	3978:1	3978:1	8	written
ASSIGN_OP	3978:9	3978:9	6	+=
LEAF_NODE	3978:9	3978:9	7	+=
RVAL	3978:12	3978:12	6	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
FUNCTION_CALL	3978:12	3978:49	7	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
CALLEE	3978:12	3978:12	8	t2pWriteFile
LEAF_NODE	3978:12	3978:12	9	t2pWriteFile
LEAF_NODE	3978:24	3978:24	8	(
ARGUMENT	3978:25	3978:25	8	output
FIELD	3978:25	3978:25	9	output
LEAF_NODE	3978:25	3978:25	10	output
LEAF_NODE	3978:31	3978:31	8	,
ARGUMENT	3978:33	3978:43	8	( tdata_t ) " "
LEAF_NODE	3978:33	3978:33	9	(
TYPE_NAME	3978:34	3978:34	9	tdata_t
LEAF_NODE	3978:34	3978:34	10	tdata_t
LEAF_NODE	3978:41	3978:41	9	)
FIELD	3978:43	3978:43	9	" "
LEAF_NODE	3978:43	3978:43	10	" "
LEAF_NODE	3978:46	3978:46	8	,
ARGUMENT	3978:48	3978:48	8	1
FIELD	3978:48	3978:48	9	1
LEAF_NODE	3978:48	3978:48	10	1
LEAF_NODE	3978:49	3978:49	8	)
LEAF_NODE	3978:50	3978:50	4	;
LEAF_NODE	3980:1	3980:1	3	return
LEAF_NODE	3980:7	3980:7	3	(
LEAF_NODE	3980:8	3980:8	3	written
LEAF_NODE	3980:15	3980:15	3	)
LEAF_NODE	3980:16	3980:16	3	;
LEAF_NODE	3981:0	3981:0	2	}
FUNCTION_DEF	3987:0	4034:0	1	
RETURN_TYPE	3987:0	3987:0	2	tsize_t
TYPE_NAME	3987:0	3987:0	3	tsize_t
LEAF_NODE	3987:0	3987:0	4	tsize_t
FUNCTION_NAME	3987:8	3987:8	2	t2p_write_pdf_string
LEAF_NODE	3987:8	3987:8	3	t2p_write_pdf_string
PARAMETER_LIST	3987:28	3987:55	2	( char * pdfstr , TIFF * output )
LEAF_NODE	3987:28	3987:28	3	(
PARAMETER_DECL	3987:29	3987:35	3	char * pdfstr
TYPE	3987:29	3987:33	4	char *
TYPE_NAME	3987:29	3987:29	5	char
LEAF_NODE	3987:29	3987:29	6	char
POINTER	3987:33	3987:33	5	*
LEAF_NODE	3987:33	3987:33	6	*
NAME	3987:35	3987:35	4	pdfstr
LEAF_NODE	3987:35	3987:35	5	pdfstr
LEAF_NODE	3987:41	3987:41	3	,
PARAMETER_DECL	3987:43	3987:49	3	TIFF * output
TYPE	3987:43	3987:47	4	TIFF *
TYPE_NAME	3987:43	3987:43	5	TIFF
LEAF_NODE	3987:43	3987:43	6	TIFF
POINTER	3987:47	3987:47	5	*
LEAF_NODE	3987:47	3987:47	6	*
NAME	3987:49	3987:49	4	output
LEAF_NODE	3987:49	3987:49	5	output
LEAF_NODE	3987:55	3987:55	3	)
LEAF_NODE	3988:0	3988:0	2	{
STATEMENTS	3989:1	4033:16	2	
SIMPLE_DECL	3989:1	3989:20	3	tsize_t written ; written = 0 ;
VAR_DECL	3989:1	3989:9	4	tsize_t written ; written = 0
TYPE	3989:1	3989:1	5	tsize_t
TYPE_NAME	3989:1	3989:1	6	tsize_t
LEAF_NODE	3989:1	3989:1	7	tsize_t
NAME	3989:9	3989:9	5	written
LEAF_NODE	3989:9	3989:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	3989:9	3989:9	5	written = 0
ASSIGN	3989:9	3989:19	6	written = 0
LVAL	3989:9	3989:9	7	written
NAME	3989:9	3989:9	8	written
LEAF_NODE	3989:9	3989:9	9	written
ASSIGN_OP	3989:17	3989:17	7	=
LEAF_NODE	3989:17	3989:17	8	=
RVAL	3989:19	3989:19	7	0
FIELD	3989:19	3989:19	8	0
LEAF_NODE	3989:19	3989:19	9	0
LEAF_NODE	3989:20	3989:20	4	;
SIMPLE_DECL	3990:1	3990:13	3	uint32 i ; i = 0 ;
VAR_DECL	3990:1	3990:8	4	uint32 i ; i = 0
TYPE	3990:1	3990:1	5	uint32
TYPE_NAME	3990:1	3990:1	6	uint32
LEAF_NODE	3990:1	3990:1	7	uint32
NAME	3990:8	3990:8	5	i
LEAF_NODE	3990:8	3990:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	3990:8	3990:8	5	i = 0
ASSIGN	3990:8	3990:12	6	i = 0
LVAL	3990:8	3990:8	7	i
NAME	3990:8	3990:8	8	i
LEAF_NODE	3990:8	3990:8	9	i
ASSIGN_OP	3990:10	3990:10	7	=
LEAF_NODE	3990:10	3990:10	8	=
RVAL	3990:12	3990:12	7	0
FIELD	3990:12	3990:12	8	0
LEAF_NODE	3990:12	3990:12	9	0
LEAF_NODE	3990:13	3990:13	4	;
SIMPLE_DECL	3991:1	3991:16	3	char [ 64 ] buffer ;
VAR_DECL	3991:1	3991:6	4	char [ 64 ] buffer
TYPE	3991:1	3991:12	5	char [ 64 ]
TYPE_NAME	3991:1	3991:1	6	char
LEAF_NODE	3991:1	3991:1	7	char
TYPE_SUFFIX	3991:12	3991:15	6	[ 64 ]
LEAF_NODE	3991:12	3991:12	7	[
FIELD	3991:13	3991:13	7	64
LEAF_NODE	3991:13	3991:13	8	64
LEAF_NODE	3991:15	3991:15	7	]
NAME	3991:6	3991:6	5	buffer
LEAF_NODE	3991:6	3991:6	6	buffer
LEAF_NODE	3991:16	3991:16	4	;
SIMPLE_DECL	3992:1	3992:15	3	size_t len ; len = 0 ;
VAR_DECL	3992:1	3992:8	4	size_t len ; len = 0
TYPE	3992:1	3992:1	5	size_t
TYPE_NAME	3992:1	3992:1	6	size_t
LEAF_NODE	3992:1	3992:1	7	size_t
NAME	3992:8	3992:8	5	len
LEAF_NODE	3992:8	3992:8	6	len
LEAF_NODE	0:0	0:0	5	;
INIT	3992:8	3992:8	5	len = 0
ASSIGN	3992:8	3992:14	6	len = 0
LVAL	3992:8	3992:8	7	len
NAME	3992:8	3992:8	8	len
LEAF_NODE	3992:8	3992:8	9	len
ASSIGN_OP	3992:12	3992:12	7	=
LEAF_NODE	3992:12	3992:12	8	=
RVAL	3992:14	3992:14	7	0
FIELD	3992:14	3992:14	8	0
LEAF_NODE	3992:14	3992:14	9	0
LEAF_NODE	3992:15	3992:15	4	;
EXPR_STATEMENT	3994:1	3994:21	3	len = strlen ( pdfstr ) ;
EXPR	3994:1	3994:1	4	len = strlen ( pdfstr )
ASSIGN	3994:1	3994:7	5	len = strlen ( pdfstr )
LVAL	3994:1	3994:1	6	len
FIELD	3994:1	3994:1	7	len
LEAF_NODE	3994:1	3994:1	8	len
ASSIGN_OP	3994:5	3994:5	6	=
LEAF_NODE	3994:5	3994:5	7	=
RVAL	3994:7	3994:7	6	strlen ( pdfstr )
FUNCTION_CALL	3994:7	3994:20	7	strlen ( pdfstr )
CALLEE	3994:7	3994:7	8	strlen
LEAF_NODE	3994:7	3994:7	9	strlen
LEAF_NODE	3994:13	3994:13	8	(
ARGUMENT	3994:14	3994:14	8	pdfstr
FIELD	3994:14	3994:14	9	pdfstr
LEAF_NODE	3994:14	3994:14	10	pdfstr
LEAF_NODE	3994:20	3994:20	8	)
LEAF_NODE	3994:21	3994:21	4	;
EXPR_STATEMENT	3995:1	3995:50	3	written += t2pWriteFile ( output , ( tdata_t ) "(" , 1 ) ;
EXPR	3995:1	3995:1	4	written += t2pWriteFile ( output , ( tdata_t ) "(" , 1 )
ASSIGN	3995:1	3995:12	5	written += t2pWriteFile ( output , ( tdata_t ) "(" , 1 )
LVAL	3995:1	3995:1	6	written
FIELD	3995:1	3995:1	7	written
LEAF_NODE	3995:1	3995:1	8	written
ASSIGN_OP	3995:9	3995:9	6	+=
LEAF_NODE	3995:9	3995:9	7	+=
RVAL	3995:12	3995:12	6	t2pWriteFile ( output , ( tdata_t ) "(" , 1 )
FUNCTION_CALL	3995:12	3995:49	7	t2pWriteFile ( output , ( tdata_t ) "(" , 1 )
CALLEE	3995:12	3995:12	8	t2pWriteFile
LEAF_NODE	3995:12	3995:12	9	t2pWriteFile
LEAF_NODE	3995:24	3995:24	8	(
ARGUMENT	3995:25	3995:25	8	output
FIELD	3995:25	3995:25	9	output
LEAF_NODE	3995:25	3995:25	10	output
LEAF_NODE	3995:31	3995:31	8	,
ARGUMENT	3995:33	3995:43	8	( tdata_t ) "("
LEAF_NODE	3995:33	3995:33	9	(
TYPE_NAME	3995:34	3995:34	9	tdata_t
LEAF_NODE	3995:34	3995:34	10	tdata_t
LEAF_NODE	3995:41	3995:41	9	)
FIELD	3995:43	3995:43	9	"("
LEAF_NODE	3995:43	3995:43	10	"("
LEAF_NODE	3995:46	3995:46	8	,
ARGUMENT	3995:48	3995:48	8	1
FIELD	3995:48	3995:48	9	1
LEAF_NODE	3995:48	3995:48	10	1
LEAF_NODE	3995:49	3995:49	8	)
LEAF_NODE	3995:50	3995:50	4	;
ITERATION	3996:1	3996:23	3	
KEYWORD	3996:1	3996:1	4	for
LEAF_NODE	3996:1	3996:1	5	for
LEAF_NODE	3996:5	3996:5	4	(
FOR_INIT	3996:6	3996:9	4	i = 0 ;
EXPR	3996:6	3996:6	5	i = 0
ASSIGN	3996:6	3996:8	6	i = 0
LVAL	3996:6	3996:6	7	i
FIELD	3996:6	3996:6	8	i
LEAF_NODE	3996:6	3996:6	9	i
ASSIGN_OP	3996:7	3996:7	7	=
LEAF_NODE	3996:7	3996:7	8	=
RVAL	3996:8	3996:8	7	0
FIELD	3996:8	3996:8	8	0
LEAF_NODE	3996:8	3996:8	9	0
LEAF_NODE	3996:9	3996:9	5	;
CONDITION	3996:11	3996:11	4	i < len
EXPR	3996:11	3996:13	5	i < len
FIELD	3996:11	3996:11	6	i
LEAF_NODE	3996:11	3996:11	7	i
REL_OPERATOR	3996:12	3996:12	6	<
LEAF_NODE	3996:12	3996:12	7	<
FIELD	3996:13	3996:13	6	len
LEAF_NODE	3996:13	3996:13	7	len
LEAF_NODE	3996:16	3996:16	4	;
FOR_EXPR	3996:18	3996:18	4	i ++
EXPR	3996:18	3996:18	5	i ++
FIELD	3996:18	3996:19	6	i ++
LEAF_NODE	3996:18	3996:18	7	i
LEAF_NODE	3996:19	3996:19	7	++
LEAF_NODE	3996:21	3996:21	4	)
STATEMENTS	3996:23	4030:1	4	
LEAF_NODE	3996:23	3996:23	5	{
STATEMENTS	3997:2	4000:4	5	
SELECTION	3997:2	3997:60	6	
KEYWORD	3997:2	3997:2	7	if
LEAF_NODE	3997:2	3997:2	8	if
LEAF_NODE	3997:4	3997:4	7	(
CONDITION	3997:5	3997:5	7	( pdfstr [ i ] & 0x80 ) || ( pdfstr [ i ] == 127 ) || ( pdfstr [ i ] < 32 )
EXPR	3997:5	3997:5	8	( pdfstr [ i ] & 0x80 ) || ( pdfstr [ i ] == 127 ) || ( pdfstr [ i ] < 32 )
OR	3997:5	3997:25	9	( pdfstr [ i ] & 0x80 ) || ( pdfstr [ i ] == 127 ) || ( pdfstr [ i ] < 32 )
EXPR	3997:5	3997:20	10	( pdfstr [ i ] & 0x80 )
LEAF_NODE	3997:5	3997:5	11	(
FIELD	3997:6	3997:14	11	pdfstr [ i ]
LEAF_NODE	3997:6	3997:6	12	pdfstr
LEAF_NODE	3997:12	3997:12	12	[
EXPR	3997:13	3997:13	12	i
FIELD	3997:13	3997:13	13	i
LEAF_NODE	3997:13	3997:13	14	i
LEAF_NODE	3997:14	3997:14	12	]
LEAF_NODE	3997:15	3997:15	11	&
FIELD	3997:16	3997:16	11	0x80
LEAF_NODE	3997:16	3997:16	12	0x80
LEAF_NODE	3997:20	3997:20	11	)
LEAF_NODE	3997:22	3997:22	10	||
EXPR	3997:25	3997:25	10	( pdfstr [ i ] == 127 ) || ( pdfstr [ i ] < 32 )
OR	3997:25	3997:45	11	( pdfstr [ i ] == 127 ) || ( pdfstr [ i ] < 32 )
EXPR	3997:25	3997:40	12	( pdfstr [ i ] == 127 )
LEAF_NODE	3997:25	3997:25	13	(
FIELD	3997:26	3997:34	13	pdfstr [ i ]
LEAF_NODE	3997:26	3997:26	14	pdfstr
LEAF_NODE	3997:32	3997:32	14	[
EXPR	3997:33	3997:33	14	i
FIELD	3997:33	3997:33	15	i
LEAF_NODE	3997:33	3997:33	16	i
LEAF_NODE	3997:34	3997:34	14	]
EQ_OPERATOR	3997:35	3997:35	13	==
LEAF_NODE	3997:35	3997:35	14	==
FIELD	3997:37	3997:37	13	127
LEAF_NODE	3997:37	3997:37	14	127
LEAF_NODE	3997:40	3997:40	13	)
LEAF_NODE	3997:42	3997:42	12	||
EXPR	3997:45	3997:58	12	( pdfstr [ i ] < 32 )
LEAF_NODE	3997:45	3997:45	13	(
FIELD	3997:46	3997:54	13	pdfstr [ i ]
LEAF_NODE	3997:46	3997:46	14	pdfstr
LEAF_NODE	3997:52	3997:52	14	[
EXPR	3997:53	3997:53	14	i
FIELD	3997:53	3997:53	15	i
LEAF_NODE	3997:53	3997:53	16	i
LEAF_NODE	3997:54	3997:54	14	]
REL_OPERATOR	3997:55	3997:55	13	<
LEAF_NODE	3997:55	3997:55	14	<
FIELD	3997:56	3997:56	13	32
LEAF_NODE	3997:56	3997:56	14	32
LEAF_NODE	3997:58	3997:58	13	)
LEAF_NODE	3997:59	3997:59	7	)
STATEMENTS	3997:60	4000:2	7	
LEAF_NODE	3997:60	3997:60	8	{
STATEMENTS	3998:3	3999:3	8	
EXPR_STATEMENT	3998:3	3998:73	9	snprintf ( buffer , sizeof ( buffer ) , "\\%.3o" , ( ( unsigned char ) pdfstr [ i ] ) ) ;
EXPR	3998:3	3998:3	10	snprintf ( buffer , sizeof ( buffer ) , "\\%.3o" , ( ( unsigned char ) pdfstr [ i ] ) )
FUNCTION_CALL	3998:3	3998:72	11	snprintf ( buffer , sizeof ( buffer ) , "\\%.3o" , ( ( unsigned char ) pdfstr [ i ] ) )
CALLEE	3998:3	3998:3	12	snprintf
LEAF_NODE	3998:3	3998:3	13	snprintf
LEAF_NODE	3998:11	3998:11	12	(
ARGUMENT	3998:12	3998:12	12	buffer
FIELD	3998:12	3998:12	13	buffer
LEAF_NODE	3998:12	3998:12	14	buffer
LEAF_NODE	3998:18	3998:18	12	,
ARGUMENT	3998:20	3998:20	12	sizeof ( buffer )
FUNCTION_CALL	3998:20	3998:33	13	sizeof ( buffer )
CALLEE	3998:20	3998:20	14	sizeof
LEAF_NODE	3998:20	3998:20	15	sizeof
LEAF_NODE	3998:26	3998:26	14	(
ARGUMENT	3998:27	3998:27	14	buffer
FIELD	3998:27	3998:27	15	buffer
LEAF_NODE	3998:27	3998:27	16	buffer
LEAF_NODE	3998:33	3998:33	14	)
LEAF_NODE	3998:34	3998:34	12	,
ARGUMENT	3998:36	3998:36	12	"\\%.3o"
FIELD	3998:36	3998:36	13	"\\%.3o"
LEAF_NODE	3998:36	3998:36	14	"\\%.3o"
LEAF_NODE	3998:44	3998:44	12	,
ARGUMENT	3998:46	3998:71	12	( ( unsigned char ) pdfstr [ i ] )
LEAF_NODE	3998:46	3998:46	13	(
LEAF_NODE	3998:47	3998:47	13	(
TYPE_NAME	3998:48	3998:57	13	unsigned char
LEAF_NODE	3998:48	3998:48	14	unsigned
LEAF_NODE	3998:57	3998:57	14	char
LEAF_NODE	3998:61	3998:61	13	)
FIELD	3998:62	3998:70	13	pdfstr [ i ]
LEAF_NODE	3998:62	3998:62	14	pdfstr
LEAF_NODE	3998:68	3998:68	14	[
EXPR	3998:69	3998:69	14	i
FIELD	3998:69	3998:69	15	i
LEAF_NODE	3998:69	3998:69	16	i
LEAF_NODE	3998:70	3998:70	14	]
LEAF_NODE	3998:71	3998:71	13	)
LEAF_NODE	3998:72	3998:72	12	)
LEAF_NODE	3998:73	3998:73	10	;
EXPR_STATEMENT	3999:3	3999:54	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , 4 ) ;
EXPR	3999:3	3999:3	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , 4 )
ASSIGN	3999:3	3999:14	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , 4 )
LVAL	3999:3	3999:3	12	written
FIELD	3999:3	3999:3	13	written
LEAF_NODE	3999:3	3999:3	14	written
ASSIGN_OP	3999:11	3999:11	12	+=
LEAF_NODE	3999:11	3999:11	13	+=
RVAL	3999:14	3999:14	12	t2pWriteFile ( output , ( tdata_t ) buffer , 4 )
FUNCTION_CALL	3999:14	3999:53	13	t2pWriteFile ( output , ( tdata_t ) buffer , 4 )
CALLEE	3999:14	3999:14	14	t2pWriteFile
LEAF_NODE	3999:14	3999:14	15	t2pWriteFile
LEAF_NODE	3999:26	3999:26	14	(
ARGUMENT	3999:27	3999:27	14	output
FIELD	3999:27	3999:27	15	output
LEAF_NODE	3999:27	3999:27	16	output
LEAF_NODE	3999:33	3999:33	14	,
ARGUMENT	3999:35	3999:44	14	( tdata_t ) buffer
LEAF_NODE	3999:35	3999:35	15	(
TYPE_NAME	3999:36	3999:36	15	tdata_t
LEAF_NODE	3999:36	3999:36	16	tdata_t
LEAF_NODE	3999:43	3999:43	15	)
FIELD	3999:44	3999:44	15	buffer
LEAF_NODE	3999:44	3999:44	16	buffer
LEAF_NODE	3999:50	3999:50	14	,
ARGUMENT	3999:52	3999:52	14	4
FIELD	3999:52	3999:52	15	4
LEAF_NODE	3999:52	3999:52	16	4
LEAF_NODE	3999:53	3999:53	14	)
LEAF_NODE	3999:54	3999:54	10	;
LEAF_NODE	4000:2	4000:2	8	}
SELECTION	4000:4	4000:9	6	
KEYWORD	4000:4	4000:4	7	else
LEAF_NODE	4000:4	4000:4	8	else
STATEMENTS	4000:9	4029:2	7	
LEAF_NODE	4000:9	4000:9	8	{
STATEMENTS	4001:3	4001:3	8	
SELECTION	4001:3	4001:21	9	
KEYWORD	4001:3	4001:3	10	switch
LEAF_NODE	4001:3	4001:3	11	switch
LEAF_NODE	4001:10	4001:10	10	(
CONDITION	4001:11	4001:11	10	pdfstr [ i ]
EXPR	4001:11	4001:11	11	pdfstr [ i ]
FIELD	4001:11	4001:19	12	pdfstr [ i ]
LEAF_NODE	4001:11	4001:11	13	pdfstr
LEAF_NODE	4001:17	4001:17	13	[
EXPR	4001:18	4001:18	13	i
FIELD	4001:18	4001:18	14	i
LEAF_NODE	4001:18	4001:18	15	i
LEAF_NODE	4001:19	4001:19	13	]
LEAF_NODE	4001:20	4001:20	10	)
STATEMENTS	4001:21	4028:3	10	
LEAF_NODE	4001:21	4001:21	11	{
STATEMENTS	4002:4	4027:5	11	
LABEL	4002:4	4002:13	12	case 0x08 :
LEAF_NODE	4002:4	4002:4	13	case
LEAF_NODE	4002:9	4002:9	13	0x08
LEAF_NODE	4002:13	4002:13	13	:
EXPR_STATEMENT	4003:5	4003:56	12	written += t2pWriteFile ( output , ( tdata_t ) "\\b" , 2 ) ;
EXPR	4003:5	4003:5	13	written += t2pWriteFile ( output , ( tdata_t ) "\\b" , 2 )
ASSIGN	4003:5	4003:16	14	written += t2pWriteFile ( output , ( tdata_t ) "\\b" , 2 )
LVAL	4003:5	4003:5	15	written
FIELD	4003:5	4003:5	16	written
LEAF_NODE	4003:5	4003:5	17	written
ASSIGN_OP	4003:13	4003:13	15	+=
LEAF_NODE	4003:13	4003:13	16	+=
RVAL	4003:16	4003:16	15	t2pWriteFile ( output , ( tdata_t ) "\\b" , 2 )
FUNCTION_CALL	4003:16	4003:55	16	t2pWriteFile ( output , ( tdata_t ) "\\b" , 2 )
CALLEE	4003:16	4003:16	17	t2pWriteFile
LEAF_NODE	4003:16	4003:16	18	t2pWriteFile
LEAF_NODE	4003:28	4003:28	17	(
ARGUMENT	4003:29	4003:29	17	output
FIELD	4003:29	4003:29	18	output
LEAF_NODE	4003:29	4003:29	19	output
LEAF_NODE	4003:35	4003:35	17	,
ARGUMENT	4003:37	4003:47	17	( tdata_t ) "\\b"
LEAF_NODE	4003:37	4003:37	18	(
TYPE_NAME	4003:38	4003:38	18	tdata_t
LEAF_NODE	4003:38	4003:38	19	tdata_t
LEAF_NODE	4003:45	4003:45	18	)
FIELD	4003:47	4003:47	18	"\\b"
LEAF_NODE	4003:47	4003:47	19	"\\b"
LEAF_NODE	4003:52	4003:52	17	,
ARGUMENT	4003:54	4003:54	17	2
FIELD	4003:54	4003:54	18	2
LEAF_NODE	4003:54	4003:54	19	2
LEAF_NODE	4003:55	4003:55	17	)
LEAF_NODE	4003:56	4003:56	13	;
JUMP_STATEMENT	4004:5	4004:10	12	break DESTINATION ;
KEYWORD	4004:5	4004:5	13	break
LEAF_NODE	4004:5	4004:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4004:10	4004:10	13	;
LABEL	4005:4	4005:13	12	case 0x09 :
LEAF_NODE	4005:4	4005:4	13	case
LEAF_NODE	4005:9	4005:9	13	0x09
LEAF_NODE	4005:13	4005:13	13	:
EXPR_STATEMENT	4006:5	4006:56	12	written += t2pWriteFile ( output , ( tdata_t ) "\\t" , 2 ) ;
EXPR	4006:5	4006:5	13	written += t2pWriteFile ( output , ( tdata_t ) "\\t" , 2 )
ASSIGN	4006:5	4006:16	14	written += t2pWriteFile ( output , ( tdata_t ) "\\t" , 2 )
LVAL	4006:5	4006:5	15	written
FIELD	4006:5	4006:5	16	written
LEAF_NODE	4006:5	4006:5	17	written
ASSIGN_OP	4006:13	4006:13	15	+=
LEAF_NODE	4006:13	4006:13	16	+=
RVAL	4006:16	4006:16	15	t2pWriteFile ( output , ( tdata_t ) "\\t" , 2 )
FUNCTION_CALL	4006:16	4006:55	16	t2pWriteFile ( output , ( tdata_t ) "\\t" , 2 )
CALLEE	4006:16	4006:16	17	t2pWriteFile
LEAF_NODE	4006:16	4006:16	18	t2pWriteFile
LEAF_NODE	4006:28	4006:28	17	(
ARGUMENT	4006:29	4006:29	17	output
FIELD	4006:29	4006:29	18	output
LEAF_NODE	4006:29	4006:29	19	output
LEAF_NODE	4006:35	4006:35	17	,
ARGUMENT	4006:37	4006:47	17	( tdata_t ) "\\t"
LEAF_NODE	4006:37	4006:37	18	(
TYPE_NAME	4006:38	4006:38	18	tdata_t
LEAF_NODE	4006:38	4006:38	19	tdata_t
LEAF_NODE	4006:45	4006:45	18	)
FIELD	4006:47	4006:47	18	"\\t"
LEAF_NODE	4006:47	4006:47	19	"\\t"
LEAF_NODE	4006:52	4006:52	17	,
ARGUMENT	4006:54	4006:54	17	2
FIELD	4006:54	4006:54	18	2
LEAF_NODE	4006:54	4006:54	19	2
LEAF_NODE	4006:55	4006:55	17	)
LEAF_NODE	4006:56	4006:56	13	;
JUMP_STATEMENT	4007:5	4007:10	12	break DESTINATION ;
KEYWORD	4007:5	4007:5	13	break
LEAF_NODE	4007:5	4007:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4007:10	4007:10	13	;
LABEL	4008:4	4008:13	12	case 0x0A :
LEAF_NODE	4008:4	4008:4	13	case
LEAF_NODE	4008:9	4008:9	13	0x0A
LEAF_NODE	4008:13	4008:13	13	:
EXPR_STATEMENT	4009:5	4009:56	12	written += t2pWriteFile ( output , ( tdata_t ) "\\n" , 2 ) ;
EXPR	4009:5	4009:5	13	written += t2pWriteFile ( output , ( tdata_t ) "\\n" , 2 )
ASSIGN	4009:5	4009:16	14	written += t2pWriteFile ( output , ( tdata_t ) "\\n" , 2 )
LVAL	4009:5	4009:5	15	written
FIELD	4009:5	4009:5	16	written
LEAF_NODE	4009:5	4009:5	17	written
ASSIGN_OP	4009:13	4009:13	15	+=
LEAF_NODE	4009:13	4009:13	16	+=
RVAL	4009:16	4009:16	15	t2pWriteFile ( output , ( tdata_t ) "\\n" , 2 )
FUNCTION_CALL	4009:16	4009:55	16	t2pWriteFile ( output , ( tdata_t ) "\\n" , 2 )
CALLEE	4009:16	4009:16	17	t2pWriteFile
LEAF_NODE	4009:16	4009:16	18	t2pWriteFile
LEAF_NODE	4009:28	4009:28	17	(
ARGUMENT	4009:29	4009:29	17	output
FIELD	4009:29	4009:29	18	output
LEAF_NODE	4009:29	4009:29	19	output
LEAF_NODE	4009:35	4009:35	17	,
ARGUMENT	4009:37	4009:47	17	( tdata_t ) "\\n"
LEAF_NODE	4009:37	4009:37	18	(
TYPE_NAME	4009:38	4009:38	18	tdata_t
LEAF_NODE	4009:38	4009:38	19	tdata_t
LEAF_NODE	4009:45	4009:45	18	)
FIELD	4009:47	4009:47	18	"\\n"
LEAF_NODE	4009:47	4009:47	19	"\\n"
LEAF_NODE	4009:52	4009:52	17	,
ARGUMENT	4009:54	4009:54	17	2
FIELD	4009:54	4009:54	18	2
LEAF_NODE	4009:54	4009:54	19	2
LEAF_NODE	4009:55	4009:55	17	)
LEAF_NODE	4009:56	4009:56	13	;
JUMP_STATEMENT	4010:5	4010:10	12	break DESTINATION ;
KEYWORD	4010:5	4010:5	13	break
LEAF_NODE	4010:5	4010:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4010:10	4010:10	13	;
LABEL	4011:4	4011:13	12	case 0x0C :
LEAF_NODE	4011:4	4011:4	13	case
LEAF_NODE	4011:9	4011:9	13	0x0C
LEAF_NODE	4011:13	4011:13	13	:
EXPR_STATEMENT	4012:5	4012:56	12	written += t2pWriteFile ( output , ( tdata_t ) "\\f" , 2 ) ;
EXPR	4012:5	4012:5	13	written += t2pWriteFile ( output , ( tdata_t ) "\\f" , 2 )
ASSIGN	4012:5	4012:16	14	written += t2pWriteFile ( output , ( tdata_t ) "\\f" , 2 )
LVAL	4012:5	4012:5	15	written
FIELD	4012:5	4012:5	16	written
LEAF_NODE	4012:5	4012:5	17	written
ASSIGN_OP	4012:13	4012:13	15	+=
LEAF_NODE	4012:13	4012:13	16	+=
RVAL	4012:16	4012:16	15	t2pWriteFile ( output , ( tdata_t ) "\\f" , 2 )
FUNCTION_CALL	4012:16	4012:55	16	t2pWriteFile ( output , ( tdata_t ) "\\f" , 2 )
CALLEE	4012:16	4012:16	17	t2pWriteFile
LEAF_NODE	4012:16	4012:16	18	t2pWriteFile
LEAF_NODE	4012:28	4012:28	17	(
ARGUMENT	4012:29	4012:29	17	output
FIELD	4012:29	4012:29	18	output
LEAF_NODE	4012:29	4012:29	19	output
LEAF_NODE	4012:35	4012:35	17	,
ARGUMENT	4012:37	4012:47	17	( tdata_t ) "\\f"
LEAF_NODE	4012:37	4012:37	18	(
TYPE_NAME	4012:38	4012:38	18	tdata_t
LEAF_NODE	4012:38	4012:38	19	tdata_t
LEAF_NODE	4012:45	4012:45	18	)
FIELD	4012:47	4012:47	18	"\\f"
LEAF_NODE	4012:47	4012:47	19	"\\f"
LEAF_NODE	4012:52	4012:52	17	,
ARGUMENT	4012:54	4012:54	17	2
FIELD	4012:54	4012:54	18	2
LEAF_NODE	4012:54	4012:54	19	2
LEAF_NODE	4012:55	4012:55	17	)
LEAF_NODE	4012:56	4012:56	13	;
JUMP_STATEMENT	4013:5	4013:10	12	break DESTINATION ;
KEYWORD	4013:5	4013:5	13	break
LEAF_NODE	4013:5	4013:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4013:10	4013:10	13	;
LABEL	4014:4	4014:13	12	case 0x0D :
LEAF_NODE	4014:4	4014:4	13	case
LEAF_NODE	4014:9	4014:9	13	0x0D
LEAF_NODE	4014:13	4014:13	13	:
EXPR_STATEMENT	4015:5	4015:56	12	written += t2pWriteFile ( output , ( tdata_t ) "\\r" , 2 ) ;
EXPR	4015:5	4015:5	13	written += t2pWriteFile ( output , ( tdata_t ) "\\r" , 2 )
ASSIGN	4015:5	4015:16	14	written += t2pWriteFile ( output , ( tdata_t ) "\\r" , 2 )
LVAL	4015:5	4015:5	15	written
FIELD	4015:5	4015:5	16	written
LEAF_NODE	4015:5	4015:5	17	written
ASSIGN_OP	4015:13	4015:13	15	+=
LEAF_NODE	4015:13	4015:13	16	+=
RVAL	4015:16	4015:16	15	t2pWriteFile ( output , ( tdata_t ) "\\r" , 2 )
FUNCTION_CALL	4015:16	4015:55	16	t2pWriteFile ( output , ( tdata_t ) "\\r" , 2 )
CALLEE	4015:16	4015:16	17	t2pWriteFile
LEAF_NODE	4015:16	4015:16	18	t2pWriteFile
LEAF_NODE	4015:28	4015:28	17	(
ARGUMENT	4015:29	4015:29	17	output
FIELD	4015:29	4015:29	18	output
LEAF_NODE	4015:29	4015:29	19	output
LEAF_NODE	4015:35	4015:35	17	,
ARGUMENT	4015:37	4015:47	17	( tdata_t ) "\\r"
LEAF_NODE	4015:37	4015:37	18	(
TYPE_NAME	4015:38	4015:38	18	tdata_t
LEAF_NODE	4015:38	4015:38	19	tdata_t
LEAF_NODE	4015:45	4015:45	18	)
FIELD	4015:47	4015:47	18	"\\r"
LEAF_NODE	4015:47	4015:47	19	"\\r"
LEAF_NODE	4015:52	4015:52	17	,
ARGUMENT	4015:54	4015:54	17	2
FIELD	4015:54	4015:54	18	2
LEAF_NODE	4015:54	4015:54	19	2
LEAF_NODE	4015:55	4015:55	17	)
LEAF_NODE	4015:56	4015:56	13	;
JUMP_STATEMENT	4016:5	4016:10	12	break DESTINATION ;
KEYWORD	4016:5	4016:5	13	break
LEAF_NODE	4016:5	4016:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4016:10	4016:10	13	;
LABEL	4017:4	4017:13	12	case 0x28 :
LEAF_NODE	4017:4	4017:4	13	case
LEAF_NODE	4017:9	4017:9	13	0x28
LEAF_NODE	4017:13	4017:13	13	:
EXPR_STATEMENT	4018:5	4018:56	12	written += t2pWriteFile ( output , ( tdata_t ) "\\(" , 2 ) ;
EXPR	4018:5	4018:5	13	written += t2pWriteFile ( output , ( tdata_t ) "\\(" , 2 )
ASSIGN	4018:5	4018:16	14	written += t2pWriteFile ( output , ( tdata_t ) "\\(" , 2 )
LVAL	4018:5	4018:5	15	written
FIELD	4018:5	4018:5	16	written
LEAF_NODE	4018:5	4018:5	17	written
ASSIGN_OP	4018:13	4018:13	15	+=
LEAF_NODE	4018:13	4018:13	16	+=
RVAL	4018:16	4018:16	15	t2pWriteFile ( output , ( tdata_t ) "\\(" , 2 )
FUNCTION_CALL	4018:16	4018:55	16	t2pWriteFile ( output , ( tdata_t ) "\\(" , 2 )
CALLEE	4018:16	4018:16	17	t2pWriteFile
LEAF_NODE	4018:16	4018:16	18	t2pWriteFile
LEAF_NODE	4018:28	4018:28	17	(
ARGUMENT	4018:29	4018:29	17	output
FIELD	4018:29	4018:29	18	output
LEAF_NODE	4018:29	4018:29	19	output
LEAF_NODE	4018:35	4018:35	17	,
ARGUMENT	4018:37	4018:47	17	( tdata_t ) "\\("
LEAF_NODE	4018:37	4018:37	18	(
TYPE_NAME	4018:38	4018:38	18	tdata_t
LEAF_NODE	4018:38	4018:38	19	tdata_t
LEAF_NODE	4018:45	4018:45	18	)
FIELD	4018:47	4018:47	18	"\\("
LEAF_NODE	4018:47	4018:47	19	"\\("
LEAF_NODE	4018:52	4018:52	17	,
ARGUMENT	4018:54	4018:54	17	2
FIELD	4018:54	4018:54	18	2
LEAF_NODE	4018:54	4018:54	19	2
LEAF_NODE	4018:55	4018:55	17	)
LEAF_NODE	4018:56	4018:56	13	;
JUMP_STATEMENT	4019:5	4019:10	12	break DESTINATION ;
KEYWORD	4019:5	4019:5	13	break
LEAF_NODE	4019:5	4019:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4019:10	4019:10	13	;
LABEL	4020:4	4020:13	12	case 0x29 :
LEAF_NODE	4020:4	4020:4	13	case
LEAF_NODE	4020:9	4020:9	13	0x29
LEAF_NODE	4020:13	4020:13	13	:
EXPR_STATEMENT	4021:5	4021:56	12	written += t2pWriteFile ( output , ( tdata_t ) "\\)" , 2 ) ;
EXPR	4021:5	4021:5	13	written += t2pWriteFile ( output , ( tdata_t ) "\\)" , 2 )
ASSIGN	4021:5	4021:16	14	written += t2pWriteFile ( output , ( tdata_t ) "\\)" , 2 )
LVAL	4021:5	4021:5	15	written
FIELD	4021:5	4021:5	16	written
LEAF_NODE	4021:5	4021:5	17	written
ASSIGN_OP	4021:13	4021:13	15	+=
LEAF_NODE	4021:13	4021:13	16	+=
RVAL	4021:16	4021:16	15	t2pWriteFile ( output , ( tdata_t ) "\\)" , 2 )
FUNCTION_CALL	4021:16	4021:55	16	t2pWriteFile ( output , ( tdata_t ) "\\)" , 2 )
CALLEE	4021:16	4021:16	17	t2pWriteFile
LEAF_NODE	4021:16	4021:16	18	t2pWriteFile
LEAF_NODE	4021:28	4021:28	17	(
ARGUMENT	4021:29	4021:29	17	output
FIELD	4021:29	4021:29	18	output
LEAF_NODE	4021:29	4021:29	19	output
LEAF_NODE	4021:35	4021:35	17	,
ARGUMENT	4021:37	4021:47	17	( tdata_t ) "\\)"
LEAF_NODE	4021:37	4021:37	18	(
TYPE_NAME	4021:38	4021:38	18	tdata_t
LEAF_NODE	4021:38	4021:38	19	tdata_t
LEAF_NODE	4021:45	4021:45	18	)
FIELD	4021:47	4021:47	18	"\\)"
LEAF_NODE	4021:47	4021:47	19	"\\)"
LEAF_NODE	4021:52	4021:52	17	,
ARGUMENT	4021:54	4021:54	17	2
FIELD	4021:54	4021:54	18	2
LEAF_NODE	4021:54	4021:54	19	2
LEAF_NODE	4021:55	4021:55	17	)
LEAF_NODE	4021:56	4021:56	13	;
JUMP_STATEMENT	4022:5	4022:10	12	break DESTINATION ;
KEYWORD	4022:5	4022:5	13	break
LEAF_NODE	4022:5	4022:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4022:10	4022:10	13	;
LABEL	4023:4	4023:13	12	case 0x5C :
LEAF_NODE	4023:4	4023:4	13	case
LEAF_NODE	4023:9	4023:9	13	0x5C
LEAF_NODE	4023:13	4023:13	13	:
EXPR_STATEMENT	4024:5	4024:57	12	written += t2pWriteFile ( output , ( tdata_t ) "\\\\" , 2 ) ;
EXPR	4024:5	4024:5	13	written += t2pWriteFile ( output , ( tdata_t ) "\\\\" , 2 )
ASSIGN	4024:5	4024:16	14	written += t2pWriteFile ( output , ( tdata_t ) "\\\\" , 2 )
LVAL	4024:5	4024:5	15	written
FIELD	4024:5	4024:5	16	written
LEAF_NODE	4024:5	4024:5	17	written
ASSIGN_OP	4024:13	4024:13	15	+=
LEAF_NODE	4024:13	4024:13	16	+=
RVAL	4024:16	4024:16	15	t2pWriteFile ( output , ( tdata_t ) "\\\\" , 2 )
FUNCTION_CALL	4024:16	4024:56	16	t2pWriteFile ( output , ( tdata_t ) "\\\\" , 2 )
CALLEE	4024:16	4024:16	17	t2pWriteFile
LEAF_NODE	4024:16	4024:16	18	t2pWriteFile
LEAF_NODE	4024:28	4024:28	17	(
ARGUMENT	4024:29	4024:29	17	output
FIELD	4024:29	4024:29	18	output
LEAF_NODE	4024:29	4024:29	19	output
LEAF_NODE	4024:35	4024:35	17	,
ARGUMENT	4024:37	4024:47	17	( tdata_t ) "\\\\"
LEAF_NODE	4024:37	4024:37	18	(
TYPE_NAME	4024:38	4024:38	18	tdata_t
LEAF_NODE	4024:38	4024:38	19	tdata_t
LEAF_NODE	4024:45	4024:45	18	)
FIELD	4024:47	4024:47	18	"\\\\"
LEAF_NODE	4024:47	4024:47	19	"\\\\"
LEAF_NODE	4024:53	4024:53	17	,
ARGUMENT	4024:55	4024:55	17	2
FIELD	4024:55	4024:55	18	2
LEAF_NODE	4024:55	4024:55	19	2
LEAF_NODE	4024:56	4024:56	17	)
LEAF_NODE	4024:57	4024:57	13	;
JUMP_STATEMENT	4025:5	4025:10	12	break DESTINATION ;
KEYWORD	4025:5	4025:5	13	break
LEAF_NODE	4025:5	4025:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4025:10	4025:10	13	;
LABEL	4026:4	4026:11	12	default :
LEAF_NODE	4026:4	4026:4	13	default
LEAF_NODE	4026:11	4026:11	13	:
EXPR_STATEMENT	4027:5	4027:61	12	written += t2pWriteFile ( output , ( tdata_t ) & pdfstr [ i ] , 1 ) ;
EXPR	4027:5	4027:5	13	written += t2pWriteFile ( output , ( tdata_t ) & pdfstr [ i ] , 1 )
ASSIGN	4027:5	4027:16	14	written += t2pWriteFile ( output , ( tdata_t ) & pdfstr [ i ] , 1 )
LVAL	4027:5	4027:5	15	written
FIELD	4027:5	4027:5	16	written
LEAF_NODE	4027:5	4027:5	17	written
ASSIGN_OP	4027:13	4027:13	15	+=
LEAF_NODE	4027:13	4027:13	16	+=
RVAL	4027:16	4027:16	15	t2pWriteFile ( output , ( tdata_t ) & pdfstr [ i ] , 1 )
FUNCTION_CALL	4027:16	4027:60	16	t2pWriteFile ( output , ( tdata_t ) & pdfstr [ i ] , 1 )
CALLEE	4027:16	4027:16	17	t2pWriteFile
LEAF_NODE	4027:16	4027:16	18	t2pWriteFile
LEAF_NODE	4027:28	4027:28	17	(
ARGUMENT	4027:29	4027:29	17	output
FIELD	4027:29	4027:29	18	output
LEAF_NODE	4027:29	4027:29	19	output
LEAF_NODE	4027:35	4027:35	17	,
ARGUMENT	4027:37	4027:47	17	( tdata_t ) & pdfstr [ i ]
LEAF_NODE	4027:37	4027:37	18	(
TYPE_NAME	4027:38	4027:38	18	tdata_t
LEAF_NODE	4027:38	4027:38	19	tdata_t
LEAF_NODE	4027:45	4027:45	18	)
UNARY_EXPR	4027:47	4027:48	18	& pdfstr [ i ]
UNARY_OPERATOR	4027:47	4027:47	19	&
LEAF_NODE	4027:47	4027:47	20	&
FIELD	4027:48	4027:56	19	pdfstr [ i ]
LEAF_NODE	4027:48	4027:48	20	pdfstr
LEAF_NODE	4027:54	4027:54	20	[
EXPR	4027:55	4027:55	20	i
FIELD	4027:55	4027:55	21	i
LEAF_NODE	4027:55	4027:55	22	i
LEAF_NODE	4027:56	4027:56	20	]
LEAF_NODE	4027:57	4027:57	17	,
ARGUMENT	4027:59	4027:59	17	1
FIELD	4027:59	4027:59	18	1
LEAF_NODE	4027:59	4027:59	19	1
LEAF_NODE	4027:60	4027:60	17	)
LEAF_NODE	4027:61	4027:61	13	;
LEAF_NODE	4028:3	4028:3	11	}
LEAF_NODE	4029:2	4029:2	8	}
LEAF_NODE	4030:1	4030:1	5	}
EXPR_STATEMENT	4031:1	4031:51	3	written += t2pWriteFile ( output , ( tdata_t ) ") " , 1 ) ;
EXPR	4031:1	4031:1	4	written += t2pWriteFile ( output , ( tdata_t ) ") " , 1 )
ASSIGN	4031:1	4031:12	5	written += t2pWriteFile ( output , ( tdata_t ) ") " , 1 )
LVAL	4031:1	4031:1	6	written
FIELD	4031:1	4031:1	7	written
LEAF_NODE	4031:1	4031:1	8	written
ASSIGN_OP	4031:9	4031:9	6	+=
LEAF_NODE	4031:9	4031:9	7	+=
RVAL	4031:12	4031:12	6	t2pWriteFile ( output , ( tdata_t ) ") " , 1 )
FUNCTION_CALL	4031:12	4031:50	7	t2pWriteFile ( output , ( tdata_t ) ") " , 1 )
CALLEE	4031:12	4031:12	8	t2pWriteFile
LEAF_NODE	4031:12	4031:12	9	t2pWriteFile
LEAF_NODE	4031:24	4031:24	8	(
ARGUMENT	4031:25	4031:25	8	output
FIELD	4031:25	4031:25	9	output
LEAF_NODE	4031:25	4031:25	10	output
LEAF_NODE	4031:31	4031:31	8	,
ARGUMENT	4031:33	4031:43	8	( tdata_t ) ") "
LEAF_NODE	4031:33	4031:33	9	(
TYPE_NAME	4031:34	4031:34	9	tdata_t
LEAF_NODE	4031:34	4031:34	10	tdata_t
LEAF_NODE	4031:41	4031:41	9	)
FIELD	4031:43	4031:43	9	") "
LEAF_NODE	4031:43	4031:43	10	") "
LEAF_NODE	4031:47	4031:47	8	,
ARGUMENT	4031:49	4031:49	8	1
FIELD	4031:49	4031:49	9	1
LEAF_NODE	4031:49	4031:49	10	1
LEAF_NODE	4031:50	4031:50	8	)
LEAF_NODE	4031:51	4031:51	4	;
LEAF_NODE	4033:1	4033:1	3	return
LEAF_NODE	4033:7	4033:7	3	(
LEAF_NODE	4033:8	4033:8	3	written
LEAF_NODE	4033:15	4033:15	3	)
LEAF_NODE	4033:16	4033:16	3	;
LEAF_NODE	4034:0	4034:0	2	}
FUNCTION_DEF	4041:0	4048:0	1	
RETURN_TYPE	4041:0	4041:0	2	tsize_t
TYPE_NAME	4041:0	4041:0	3	tsize_t
LEAF_NODE	4041:0	4041:0	4	tsize_t
FUNCTION_NAME	4041:8	4041:8	2	t2p_write_pdf_stream
LEAF_NODE	4041:8	4041:8	3	t2p_write_pdf_stream
PARAMETER_LIST	4041:28	4041:70	2	( tdata_t buffer , tsize_t len , TIFF * output )
LEAF_NODE	4041:28	4041:28	3	(
PARAMETER_DECL	4041:29	4041:37	3	tdata_t buffer
TYPE	4041:29	4041:29	4	tdata_t
TYPE_NAME	4041:29	4041:29	5	tdata_t
LEAF_NODE	4041:29	4041:29	6	tdata_t
NAME	4041:37	4041:37	4	buffer
LEAF_NODE	4041:37	4041:37	5	buffer
LEAF_NODE	4041:43	4041:43	3	,
PARAMETER_DECL	4041:45	4041:53	3	tsize_t len
TYPE	4041:45	4041:45	4	tsize_t
TYPE_NAME	4041:45	4041:45	5	tsize_t
LEAF_NODE	4041:45	4041:45	6	tsize_t
NAME	4041:53	4041:53	4	len
LEAF_NODE	4041:53	4041:53	5	len
LEAF_NODE	4041:56	4041:56	3	,
PARAMETER_DECL	4041:58	4041:64	3	TIFF * output
TYPE	4041:58	4041:62	4	TIFF *
TYPE_NAME	4041:58	4041:58	5	TIFF
LEAF_NODE	4041:58	4041:58	6	TIFF
POINTER	4041:62	4041:62	5	*
LEAF_NODE	4041:62	4041:62	6	*
NAME	4041:64	4041:64	4	output
LEAF_NODE	4041:64	4041:64	5	output
LEAF_NODE	4041:70	4041:70	3	)
LEAF_NODE	4041:71	4041:71	2	{
STATEMENTS	4043:1	4047:16	2	
SIMPLE_DECL	4043:1	4043:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4043:1	4043:9	4	tsize_t written ; written = 0
TYPE	4043:1	4043:1	5	tsize_t
TYPE_NAME	4043:1	4043:1	6	tsize_t
LEAF_NODE	4043:1	4043:1	7	tsize_t
NAME	4043:9	4043:9	5	written
LEAF_NODE	4043:9	4043:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4043:9	4043:9	5	written = 0
ASSIGN	4043:9	4043:17	6	written = 0
LVAL	4043:9	4043:9	7	written
NAME	4043:9	4043:9	8	written
LEAF_NODE	4043:9	4043:9	9	written
ASSIGN_OP	4043:16	4043:16	7	=
LEAF_NODE	4043:16	4043:16	8	=
RVAL	4043:17	4043:17	7	0
FIELD	4043:17	4043:17	8	0
LEAF_NODE	4043:17	4043:17	9	0
LEAF_NODE	4043:18	4043:18	4	;
EXPR_STATEMENT	4045:1	4045:55	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , len ) ;
EXPR	4045:1	4045:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , len )
ASSIGN	4045:1	4045:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , len )
LVAL	4045:1	4045:1	6	written
FIELD	4045:1	4045:1	7	written
LEAF_NODE	4045:1	4045:1	8	written
ASSIGN_OP	4045:9	4045:9	6	+=
LEAF_NODE	4045:9	4045:9	7	+=
RVAL	4045:12	4045:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , len )
FUNCTION_CALL	4045:12	4045:54	7	t2pWriteFile ( output , ( tdata_t ) buffer , len )
CALLEE	4045:12	4045:12	8	t2pWriteFile
LEAF_NODE	4045:12	4045:12	9	t2pWriteFile
LEAF_NODE	4045:24	4045:24	8	(
ARGUMENT	4045:25	4045:25	8	output
FIELD	4045:25	4045:25	9	output
LEAF_NODE	4045:25	4045:25	10	output
LEAF_NODE	4045:31	4045:31	8	,
ARGUMENT	4045:33	4045:43	8	( tdata_t ) buffer
LEAF_NODE	4045:33	4045:33	9	(
TYPE_NAME	4045:34	4045:34	9	tdata_t
LEAF_NODE	4045:34	4045:34	10	tdata_t
LEAF_NODE	4045:41	4045:41	9	)
FIELD	4045:43	4045:43	9	buffer
LEAF_NODE	4045:43	4045:43	10	buffer
LEAF_NODE	4045:49	4045:49	8	,
ARGUMENT	4045:51	4045:51	8	len
FIELD	4045:51	4045:51	9	len
LEAF_NODE	4045:51	4045:51	10	len
LEAF_NODE	4045:54	4045:54	8	)
LEAF_NODE	4045:55	4045:55	4	;
LEAF_NODE	4047:1	4047:1	3	return
LEAF_NODE	4047:7	4047:7	3	(
LEAF_NODE	4047:8	4047:8	3	written
LEAF_NODE	4047:15	4047:15	3	)
LEAF_NODE	4047:16	4047:16	3	;
LEAF_NODE	4048:0	4048:0	2	}
FUNCTION_DEF	4054:0	4061:0	1	
RETURN_TYPE	4054:0	4054:0	2	tsize_t
TYPE_NAME	4054:0	4054:0	3	tsize_t
LEAF_NODE	4054:0	4054:0	4	tsize_t
FUNCTION_NAME	4054:8	4054:8	2	t2p_write_pdf_stream_start
LEAF_NODE	4054:8	4054:8	3	t2p_write_pdf_stream_start
PARAMETER_LIST	4054:34	4054:47	2	( TIFF * output )
LEAF_NODE	4054:34	4054:34	3	(
PARAMETER_DECL	4054:35	4054:41	3	TIFF * output
TYPE	4054:35	4054:39	4	TIFF *
TYPE_NAME	4054:35	4054:35	5	TIFF
LEAF_NODE	4054:35	4054:35	6	TIFF
POINTER	4054:39	4054:39	5	*
LEAF_NODE	4054:39	4054:39	6	*
NAME	4054:41	4054:41	4	output
LEAF_NODE	4054:41	4054:41	5	output
LEAF_NODE	4054:47	4054:47	3	)
LEAF_NODE	4054:48	4054:48	2	{
STATEMENTS	4056:1	4060:16	2	
SIMPLE_DECL	4056:1	4056:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4056:1	4056:9	4	tsize_t written ; written = 0
TYPE	4056:1	4056:1	5	tsize_t
TYPE_NAME	4056:1	4056:1	6	tsize_t
LEAF_NODE	4056:1	4056:1	7	tsize_t
NAME	4056:9	4056:9	5	written
LEAF_NODE	4056:9	4056:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4056:9	4056:9	5	written = 0
ASSIGN	4056:9	4056:17	6	written = 0
LVAL	4056:9	4056:9	7	written
NAME	4056:9	4056:9	8	written
LEAF_NODE	4056:9	4056:9	9	written
ASSIGN_OP	4056:16	4056:16	7	=
LEAF_NODE	4056:16	4056:16	8	=
RVAL	4056:17	4056:17	7	0
FIELD	4056:17	4056:17	8	0
LEAF_NODE	4056:17	4056:17	9	0
LEAF_NODE	4056:18	4056:18	4	;
EXPR_STATEMENT	4058:1	4058:57	3	written += t2pWriteFile ( output , ( tdata_t ) "stream\n" , 7 ) ;
EXPR	4058:1	4058:1	4	written += t2pWriteFile ( output , ( tdata_t ) "stream\n" , 7 )
ASSIGN	4058:1	4058:12	5	written += t2pWriteFile ( output , ( tdata_t ) "stream\n" , 7 )
LVAL	4058:1	4058:1	6	written
FIELD	4058:1	4058:1	7	written
LEAF_NODE	4058:1	4058:1	8	written
ASSIGN_OP	4058:9	4058:9	6	+=
LEAF_NODE	4058:9	4058:9	7	+=
RVAL	4058:12	4058:12	6	t2pWriteFile ( output , ( tdata_t ) "stream\n" , 7 )
FUNCTION_CALL	4058:12	4058:56	7	t2pWriteFile ( output , ( tdata_t ) "stream\n" , 7 )
CALLEE	4058:12	4058:12	8	t2pWriteFile
LEAF_NODE	4058:12	4058:12	9	t2pWriteFile
LEAF_NODE	4058:24	4058:24	8	(
ARGUMENT	4058:25	4058:25	8	output
FIELD	4058:25	4058:25	9	output
LEAF_NODE	4058:25	4058:25	10	output
LEAF_NODE	4058:31	4058:31	8	,
ARGUMENT	4058:33	4058:43	8	( tdata_t ) "stream\n"
LEAF_NODE	4058:33	4058:33	9	(
TYPE_NAME	4058:34	4058:34	9	tdata_t
LEAF_NODE	4058:34	4058:34	10	tdata_t
LEAF_NODE	4058:41	4058:41	9	)
FIELD	4058:43	4058:43	9	"stream\n"
LEAF_NODE	4058:43	4058:43	10	"stream\n"
LEAF_NODE	4058:53	4058:53	8	,
ARGUMENT	4058:55	4058:55	8	7
FIELD	4058:55	4058:55	9	7
LEAF_NODE	4058:55	4058:55	10	7
LEAF_NODE	4058:56	4058:56	8	)
LEAF_NODE	4058:57	4058:57	4	;
LEAF_NODE	4060:1	4060:1	3	return
LEAF_NODE	4060:7	4060:7	3	(
LEAF_NODE	4060:8	4060:8	3	written
LEAF_NODE	4060:15	4060:15	3	)
LEAF_NODE	4060:16	4060:16	3	;
LEAF_NODE	4061:0	4061:0	2	}
FUNCTION_DEF	4067:0	4074:0	1	
RETURN_TYPE	4067:0	4067:0	2	tsize_t
TYPE_NAME	4067:0	4067:0	3	tsize_t
LEAF_NODE	4067:0	4067:0	4	tsize_t
FUNCTION_NAME	4067:8	4067:8	2	t2p_write_pdf_stream_end
LEAF_NODE	4067:8	4067:8	3	t2p_write_pdf_stream_end
PARAMETER_LIST	4067:32	4067:45	2	( TIFF * output )
LEAF_NODE	4067:32	4067:32	3	(
PARAMETER_DECL	4067:33	4067:39	3	TIFF * output
TYPE	4067:33	4067:37	4	TIFF *
TYPE_NAME	4067:33	4067:33	5	TIFF
LEAF_NODE	4067:33	4067:33	6	TIFF
POINTER	4067:37	4067:37	5	*
LEAF_NODE	4067:37	4067:37	6	*
NAME	4067:39	4067:39	4	output
LEAF_NODE	4067:39	4067:39	5	output
LEAF_NODE	4067:45	4067:45	3	)
LEAF_NODE	4067:46	4067:46	2	{
STATEMENTS	4069:1	4073:16	2	
SIMPLE_DECL	4069:1	4069:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4069:1	4069:9	4	tsize_t written ; written = 0
TYPE	4069:1	4069:1	5	tsize_t
TYPE_NAME	4069:1	4069:1	6	tsize_t
LEAF_NODE	4069:1	4069:1	7	tsize_t
NAME	4069:9	4069:9	5	written
LEAF_NODE	4069:9	4069:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4069:9	4069:9	5	written = 0
ASSIGN	4069:9	4069:17	6	written = 0
LVAL	4069:9	4069:9	7	written
NAME	4069:9	4069:9	8	written
LEAF_NODE	4069:9	4069:9	9	written
ASSIGN_OP	4069:16	4069:16	7	=
LEAF_NODE	4069:16	4069:16	8	=
RVAL	4069:17	4069:17	7	0
FIELD	4069:17	4069:17	8	0
LEAF_NODE	4069:17	4069:17	9	0
LEAF_NODE	4069:18	4069:18	4	;
EXPR_STATEMENT	4071:1	4071:63	3	written += t2pWriteFile ( output , ( tdata_t ) "\nendstream\n" , 11 ) ;
EXPR	4071:1	4071:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\nendstream\n" , 11 )
ASSIGN	4071:1	4071:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\nendstream\n" , 11 )
LVAL	4071:1	4071:1	6	written
FIELD	4071:1	4071:1	7	written
LEAF_NODE	4071:1	4071:1	8	written
ASSIGN_OP	4071:9	4071:9	6	+=
LEAF_NODE	4071:9	4071:9	7	+=
RVAL	4071:12	4071:12	6	t2pWriteFile ( output , ( tdata_t ) "\nendstream\n" , 11 )
FUNCTION_CALL	4071:12	4071:62	7	t2pWriteFile ( output , ( tdata_t ) "\nendstream\n" , 11 )
CALLEE	4071:12	4071:12	8	t2pWriteFile
LEAF_NODE	4071:12	4071:12	9	t2pWriteFile
LEAF_NODE	4071:24	4071:24	8	(
ARGUMENT	4071:25	4071:25	8	output
FIELD	4071:25	4071:25	9	output
LEAF_NODE	4071:25	4071:25	10	output
LEAF_NODE	4071:31	4071:31	8	,
ARGUMENT	4071:33	4071:43	8	( tdata_t ) "\nendstream\n"
LEAF_NODE	4071:33	4071:33	9	(
TYPE_NAME	4071:34	4071:34	9	tdata_t
LEAF_NODE	4071:34	4071:34	10	tdata_t
LEAF_NODE	4071:41	4071:41	9	)
FIELD	4071:43	4071:43	9	"\nendstream\n"
LEAF_NODE	4071:43	4071:43	10	"\nendstream\n"
LEAF_NODE	4071:58	4071:58	8	,
ARGUMENT	4071:60	4071:60	8	11
FIELD	4071:60	4071:60	9	11
LEAF_NODE	4071:60	4071:60	10	11
LEAF_NODE	4071:62	4071:62	8	)
LEAF_NODE	4071:63	4071:63	4	;
LEAF_NODE	4073:1	4073:1	3	return
LEAF_NODE	4073:7	4073:7	3	(
LEAF_NODE	4073:8	4073:8	3	written
LEAF_NODE	4073:15	4073:15	3	)
LEAF_NODE	4073:16	4073:16	3	;
LEAF_NODE	4074:0	4074:0	2	}
FUNCTION_DEF	4080:0	4097:0	1	
RETURN_TYPE	4080:0	4080:0	2	tsize_t
TYPE_NAME	4080:0	4080:0	3	tsize_t
LEAF_NODE	4080:0	4080:0	4	tsize_t
FUNCTION_NAME	4080:8	4080:8	2	t2p_write_pdf_stream_dict
LEAF_NODE	4080:8	4080:8	3	t2p_write_pdf_stream_dict
PARAMETER_LIST	4080:33	4080:74	2	( tsize_t len , uint32 number , TIFF * output )
LEAF_NODE	4080:33	4080:33	3	(
PARAMETER_DECL	4080:34	4080:42	3	tsize_t len
TYPE	4080:34	4080:34	4	tsize_t
TYPE_NAME	4080:34	4080:34	5	tsize_t
LEAF_NODE	4080:34	4080:34	6	tsize_t
NAME	4080:42	4080:42	4	len
LEAF_NODE	4080:42	4080:42	5	len
LEAF_NODE	4080:45	4080:45	3	,
PARAMETER_DECL	4080:47	4080:54	3	uint32 number
TYPE	4080:47	4080:47	4	uint32
TYPE_NAME	4080:47	4080:47	5	uint32
LEAF_NODE	4080:47	4080:47	6	uint32
NAME	4080:54	4080:54	4	number
LEAF_NODE	4080:54	4080:54	5	number
LEAF_NODE	4080:60	4080:60	3	,
PARAMETER_DECL	4080:62	4080:68	3	TIFF * output
TYPE	4080:62	4080:66	4	TIFF *
TYPE_NAME	4080:62	4080:62	5	TIFF
LEAF_NODE	4080:62	4080:62	6	TIFF
POINTER	4080:66	4080:66	5	*
LEAF_NODE	4080:66	4080:66	6	*
NAME	4080:68	4080:68	4	output
LEAF_NODE	4080:68	4080:68	5	output
LEAF_NODE	4080:74	4080:74	3	)
LEAF_NODE	4080:75	4080:75	2	{
STATEMENTS	4082:1	4096:16	2	
SIMPLE_DECL	4082:1	4082:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4082:1	4082:9	4	tsize_t written ; written = 0
TYPE	4082:1	4082:1	5	tsize_t
TYPE_NAME	4082:1	4082:1	6	tsize_t
LEAF_NODE	4082:1	4082:1	7	tsize_t
NAME	4082:9	4082:9	5	written
LEAF_NODE	4082:9	4082:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4082:9	4082:9	5	written = 0
ASSIGN	4082:9	4082:17	6	written = 0
LVAL	4082:9	4082:9	7	written
NAME	4082:9	4082:9	8	written
LEAF_NODE	4082:9	4082:9	9	written
ASSIGN_OP	4082:16	4082:16	7	=
LEAF_NODE	4082:16	4082:16	8	=
RVAL	4082:17	4082:17	7	0
FIELD	4082:17	4082:17	8	0
LEAF_NODE	4082:17	4082:17	9	0
LEAF_NODE	4082:18	4082:18	4	;
SIMPLE_DECL	4083:1	4083:16	3	char [ 32 ] buffer ;
VAR_DECL	4083:1	4083:6	4	char [ 32 ] buffer
TYPE	4083:1	4083:12	5	char [ 32 ]
TYPE_NAME	4083:1	4083:1	6	char
LEAF_NODE	4083:1	4083:1	7	char
TYPE_SUFFIX	4083:12	4083:15	6	[ 32 ]
LEAF_NODE	4083:12	4083:12	7	[
FIELD	4083:13	4083:13	7	32
LEAF_NODE	4083:13	4083:13	8	32
LEAF_NODE	4083:15	4083:15	7	]
NAME	4083:6	4083:6	5	buffer
LEAF_NODE	4083:6	4083:6	6	buffer
LEAF_NODE	4083:16	4083:16	4	;
SIMPLE_DECL	4084:1	4084:13	3	int buflen ; buflen = 0 ;
VAR_DECL	4084:1	4084:5	4	int buflen ; buflen = 0
TYPE	4084:1	4084:1	5	int
TYPE_NAME	4084:1	4084:1	6	int
LEAF_NODE	4084:1	4084:1	7	int
NAME	4084:5	4084:5	5	buflen
LEAF_NODE	4084:5	4084:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	4084:5	4084:5	5	buflen = 0
ASSIGN	4084:5	4084:12	6	buflen = 0
LVAL	4084:5	4084:5	7	buflen
NAME	4084:5	4084:5	8	buflen
LEAF_NODE	4084:5	4084:5	9	buflen
ASSIGN_OP	4084:11	4084:11	7	=
LEAF_NODE	4084:11	4084:11	8	=
RVAL	4084:12	4084:12	7	0
FIELD	4084:12	4084:12	8	0
LEAF_NODE	4084:12	4084:12	9	0
LEAF_NODE	4084:13	4084:13	4	;
EXPR_STATEMENT	4086:1	4086:57	3	written += t2pWriteFile ( output , ( tdata_t ) "/Length " , 8 ) ;
EXPR	4086:1	4086:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/Length " , 8 )
ASSIGN	4086:1	4086:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/Length " , 8 )
LVAL	4086:1	4086:1	6	written
FIELD	4086:1	4086:1	7	written
LEAF_NODE	4086:1	4086:1	8	written
ASSIGN_OP	4086:9	4086:9	6	+=
LEAF_NODE	4086:9	4086:9	7	+=
RVAL	4086:12	4086:12	6	t2pWriteFile ( output , ( tdata_t ) "/Length " , 8 )
FUNCTION_CALL	4086:12	4086:56	7	t2pWriteFile ( output , ( tdata_t ) "/Length " , 8 )
CALLEE	4086:12	4086:12	8	t2pWriteFile
LEAF_NODE	4086:12	4086:12	9	t2pWriteFile
LEAF_NODE	4086:24	4086:24	8	(
ARGUMENT	4086:25	4086:25	8	output
FIELD	4086:25	4086:25	9	output
LEAF_NODE	4086:25	4086:25	10	output
LEAF_NODE	4086:31	4086:31	8	,
ARGUMENT	4086:33	4086:43	8	( tdata_t ) "/Length "
LEAF_NODE	4086:33	4086:33	9	(
TYPE_NAME	4086:34	4086:34	9	tdata_t
LEAF_NODE	4086:34	4086:34	10	tdata_t
LEAF_NODE	4086:41	4086:41	9	)
FIELD	4086:43	4086:43	9	"/Length "
LEAF_NODE	4086:43	4086:43	10	"/Length "
LEAF_NODE	4086:53	4086:53	8	,
ARGUMENT	4086:55	4086:55	8	8
FIELD	4086:55	4086:55	9	8
LEAF_NODE	4086:55	4086:55	10	8
LEAF_NODE	4086:56	4086:56	8	)
LEAF_NODE	4086:57	4086:57	4	;
SELECTION	4087:1	4087:11	3	
KEYWORD	4087:1	4087:1	4	if
LEAF_NODE	4087:1	4087:1	5	if
LEAF_NODE	4087:3	4087:3	4	(
CONDITION	4087:4	4087:4	4	len != 0
EXPR	4087:4	4087:9	5	len != 0
FIELD	4087:4	4087:4	6	len
LEAF_NODE	4087:4	4087:4	7	len
EQ_OPERATOR	4087:7	4087:7	6	!=
LEAF_NODE	4087:7	4087:7	7	!=
FIELD	4087:9	4087:9	6	0
LEAF_NODE	4087:9	4087:9	7	0
LEAF_NODE	4087:10	4087:10	4	)
STATEMENTS	4087:11	4089:1	4	
LEAF_NODE	4087:11	4087:11	5	{
STATEMENTS	4088:2	4088:2	5	
EXPR_STATEMENT	4088:2	4088:53	6	written += t2p_write_pdf_stream_length ( len , output ) ;
EXPR	4088:2	4088:2	7	written += t2p_write_pdf_stream_length ( len , output )
ASSIGN	4088:2	4088:13	8	written += t2p_write_pdf_stream_length ( len , output )
LVAL	4088:2	4088:2	9	written
FIELD	4088:2	4088:2	10	written
LEAF_NODE	4088:2	4088:2	11	written
ASSIGN_OP	4088:10	4088:10	9	+=
LEAF_NODE	4088:10	4088:10	10	+=
RVAL	4088:13	4088:13	9	t2p_write_pdf_stream_length ( len , output )
FUNCTION_CALL	4088:13	4088:52	10	t2p_write_pdf_stream_length ( len , output )
CALLEE	4088:13	4088:13	11	t2p_write_pdf_stream_length
LEAF_NODE	4088:13	4088:13	12	t2p_write_pdf_stream_length
LEAF_NODE	4088:40	4088:40	11	(
ARGUMENT	4088:41	4088:41	11	len
FIELD	4088:41	4088:41	12	len
LEAF_NODE	4088:41	4088:41	13	len
LEAF_NODE	4088:44	4088:44	11	,
ARGUMENT	4088:46	4088:46	11	output
FIELD	4088:46	4088:46	12	output
LEAF_NODE	4088:46	4088:46	13	output
LEAF_NODE	4088:52	4088:52	11	)
LEAF_NODE	4088:53	4088:53	7	;
LEAF_NODE	4089:1	4089:1	5	}
SELECTION	4089:3	4089:8	3	
KEYWORD	4089:3	4089:3	4	else
LEAF_NODE	4089:3	4089:3	5	else
STATEMENTS	4089:8	4094:1	4	
LEAF_NODE	4089:8	4089:8	5	{
STATEMENTS	4090:2	4093:2	5	
EXPR_STATEMENT	4090:2	4090:71	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) number ) ;
EXPR	4090:2	4090:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) number )
ASSIGN	4090:2	4090:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) number )
LVAL	4090:2	4090:2	9	buflen
FIELD	4090:2	4090:2	10	buflen
LEAF_NODE	4090:2	4090:2	11	buflen
ASSIGN_OP	4090:8	4090:8	9	=
LEAF_NODE	4090:8	4090:8	10	=
RVAL	4090:9	4090:9	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) number )
FUNCTION_CALL	4090:9	4090:70	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) number )
CALLEE	4090:9	4090:9	11	snprintf
LEAF_NODE	4090:9	4090:9	12	snprintf
LEAF_NODE	4090:17	4090:17	11	(
ARGUMENT	4090:18	4090:18	11	buffer
FIELD	4090:18	4090:18	12	buffer
LEAF_NODE	4090:18	4090:18	13	buffer
LEAF_NODE	4090:24	4090:24	11	,
ARGUMENT	4090:26	4090:26	11	sizeof ( buffer )
FUNCTION_CALL	4090:26	4090:39	12	sizeof ( buffer )
CALLEE	4090:26	4090:26	13	sizeof
LEAF_NODE	4090:26	4090:26	14	sizeof
LEAF_NODE	4090:32	4090:32	13	(
ARGUMENT	4090:33	4090:33	13	buffer
FIELD	4090:33	4090:33	14	buffer
LEAF_NODE	4090:33	4090:33	15	buffer
LEAF_NODE	4090:39	4090:39	13	)
LEAF_NODE	4090:40	4090:40	11	,
ARGUMENT	4090:42	4090:42	11	"%lu"
FIELD	4090:42	4090:42	12	"%lu"
LEAF_NODE	4090:42	4090:42	13	"%lu"
LEAF_NODE	4090:47	4090:47	11	,
ARGUMENT	4090:49	4090:64	11	( unsigned long ) number
LEAF_NODE	4090:49	4090:49	12	(
TYPE_NAME	4090:50	4090:59	12	unsigned long
LEAF_NODE	4090:50	4090:50	13	unsigned
LEAF_NODE	4090:59	4090:59	13	long
LEAF_NODE	4090:63	4090:63	12	)
FIELD	4090:64	4090:64	12	number
LEAF_NODE	4090:64	4090:64	13	number
LEAF_NODE	4090:70	4090:70	11	)
LEAF_NODE	4090:71	4090:71	7	;
EXPR_STATEMENT	4091:2	4091:48	6	check_snprintf_ret ( ( T2P * ) NULL , buflen , buffer ) ;
EXPR	4091:2	4091:2	7	check_snprintf_ret ( ( T2P * ) NULL , buflen , buffer )
FUNCTION_CALL	4091:2	4091:47	8	check_snprintf_ret ( ( T2P * ) NULL , buflen , buffer )
CALLEE	4091:2	4091:2	9	check_snprintf_ret
LEAF_NODE	4091:2	4091:2	10	check_snprintf_ret
LEAF_NODE	4091:20	4091:20	9	(
ARGUMENT	4091:21	4091:27	9	( T2P * ) NULL
LEAF_NODE	4091:21	4091:21	10	(
TYPE_NAME	4091:22	4091:22	10	T2P
LEAF_NODE	4091:22	4091:22	11	T2P
LEAF_NODE	4091:25	4091:25	10	*
LEAF_NODE	4091:26	4091:26	10	)
FIELD	4091:27	4091:27	10	NULL
LEAF_NODE	4091:27	4091:27	11	NULL
LEAF_NODE	4091:31	4091:31	9	,
ARGUMENT	4091:33	4091:33	9	buflen
FIELD	4091:33	4091:33	10	buflen
LEAF_NODE	4091:33	4091:33	11	buflen
LEAF_NODE	4091:39	4091:39	9	,
ARGUMENT	4091:41	4091:41	9	buffer
FIELD	4091:41	4091:41	10	buffer
LEAF_NODE	4091:41	4091:41	11	buffer
LEAF_NODE	4091:47	4091:47	9	)
LEAF_NODE	4091:48	4091:48	7	;
EXPR_STATEMENT	4092:2	4092:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4092:2	4092:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4092:2	4092:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4092:2	4092:2	9	written
FIELD	4092:2	4092:2	10	written
LEAF_NODE	4092:2	4092:2	11	written
ASSIGN_OP	4092:10	4092:10	9	+=
LEAF_NODE	4092:10	4092:10	10	+=
RVAL	4092:13	4092:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4092:13	4092:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4092:13	4092:13	11	t2pWriteFile
LEAF_NODE	4092:13	4092:13	12	t2pWriteFile
LEAF_NODE	4092:25	4092:25	11	(
ARGUMENT	4092:26	4092:26	11	output
FIELD	4092:26	4092:26	12	output
LEAF_NODE	4092:26	4092:26	13	output
LEAF_NODE	4092:32	4092:32	11	,
ARGUMENT	4092:34	4092:44	11	( tdata_t ) buffer
LEAF_NODE	4092:34	4092:34	12	(
TYPE_NAME	4092:35	4092:35	12	tdata_t
LEAF_NODE	4092:35	4092:35	13	tdata_t
LEAF_NODE	4092:42	4092:42	12	)
FIELD	4092:44	4092:44	12	buffer
LEAF_NODE	4092:44	4092:44	13	buffer
LEAF_NODE	4092:50	4092:50	11	,
ARGUMENT	4092:52	4092:52	11	buflen
FIELD	4092:52	4092:52	12	buflen
LEAF_NODE	4092:52	4092:52	13	buflen
LEAF_NODE	4092:58	4092:58	11	)
LEAF_NODE	4092:59	4092:59	7	;
EXPR_STATEMENT	4093:2	4093:57	6	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 ) ;
EXPR	4093:2	4093:2	7	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
ASSIGN	4093:2	4093:13	8	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
LVAL	4093:2	4093:2	9	written
FIELD	4093:2	4093:2	10	written
LEAF_NODE	4093:2	4093:2	11	written
ASSIGN_OP	4093:10	4093:10	9	+=
LEAF_NODE	4093:10	4093:10	10	+=
RVAL	4093:13	4093:13	9	t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
FUNCTION_CALL	4093:13	4093:56	10	t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
CALLEE	4093:13	4093:13	11	t2pWriteFile
LEAF_NODE	4093:13	4093:13	12	t2pWriteFile
LEAF_NODE	4093:25	4093:25	11	(
ARGUMENT	4093:26	4093:26	11	output
FIELD	4093:26	4093:26	12	output
LEAF_NODE	4093:26	4093:26	13	output
LEAF_NODE	4093:32	4093:32	11	,
ARGUMENT	4093:34	4093:44	11	( tdata_t ) " 0 R \n"
LEAF_NODE	4093:34	4093:34	12	(
TYPE_NAME	4093:35	4093:35	12	tdata_t
LEAF_NODE	4093:35	4093:35	13	tdata_t
LEAF_NODE	4093:42	4093:42	12	)
FIELD	4093:44	4093:44	12	" 0 R \n"
LEAF_NODE	4093:44	4093:44	13	" 0 R \n"
LEAF_NODE	4093:53	4093:53	11	,
ARGUMENT	4093:55	4093:55	11	6
FIELD	4093:55	4093:55	12	6
LEAF_NODE	4093:55	4093:55	13	6
LEAF_NODE	4093:56	4093:56	11	)
LEAF_NODE	4093:57	4093:57	7	;
LEAF_NODE	4094:1	4094:1	5	}
LEAF_NODE	4096:1	4096:1	3	return
LEAF_NODE	4096:7	4096:7	3	(
LEAF_NODE	4096:8	4096:8	3	written
LEAF_NODE	4096:15	4096:15	3	)
LEAF_NODE	4096:16	4096:16	3	;
LEAF_NODE	4097:0	4097:0	2	}
FUNCTION_DEF	4103:0	4110:0	1	
RETURN_TYPE	4103:0	4103:0	2	tsize_t
TYPE_NAME	4103:0	4103:0	3	tsize_t
LEAF_NODE	4103:0	4103:0	4	tsize_t
FUNCTION_NAME	4103:8	4103:8	2	t2p_write_pdf_stream_dict_start
LEAF_NODE	4103:8	4103:8	3	t2p_write_pdf_stream_dict_start
PARAMETER_LIST	4103:39	4103:52	2	( TIFF * output )
LEAF_NODE	4103:39	4103:39	3	(
PARAMETER_DECL	4103:40	4103:46	3	TIFF * output
TYPE	4103:40	4103:44	4	TIFF *
TYPE_NAME	4103:40	4103:40	5	TIFF
LEAF_NODE	4103:40	4103:40	6	TIFF
POINTER	4103:44	4103:44	5	*
LEAF_NODE	4103:44	4103:44	6	*
NAME	4103:46	4103:46	4	output
LEAF_NODE	4103:46	4103:46	5	output
LEAF_NODE	4103:52	4103:52	3	)
LEAF_NODE	4103:53	4103:53	2	{
STATEMENTS	4105:1	4109:16	2	
SIMPLE_DECL	4105:1	4105:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4105:1	4105:9	4	tsize_t written ; written = 0
TYPE	4105:1	4105:1	5	tsize_t
TYPE_NAME	4105:1	4105:1	6	tsize_t
LEAF_NODE	4105:1	4105:1	7	tsize_t
NAME	4105:9	4105:9	5	written
LEAF_NODE	4105:9	4105:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4105:9	4105:9	5	written = 0
ASSIGN	4105:9	4105:17	6	written = 0
LVAL	4105:9	4105:9	7	written
NAME	4105:9	4105:9	8	written
LEAF_NODE	4105:9	4105:9	9	written
ASSIGN_OP	4105:16	4105:16	7	=
LEAF_NODE	4105:16	4105:16	8	=
RVAL	4105:17	4105:17	7	0
FIELD	4105:17	4105:17	8	0
LEAF_NODE	4105:17	4105:17	9	0
LEAF_NODE	4105:18	4105:18	4	;
EXPR_STATEMENT	4107:1	4107:54	3	written += t2pWriteFile ( output , ( tdata_t ) "<< \n" , 4 ) ;
EXPR	4107:1	4107:1	4	written += t2pWriteFile ( output , ( tdata_t ) "<< \n" , 4 )
ASSIGN	4107:1	4107:12	5	written += t2pWriteFile ( output , ( tdata_t ) "<< \n" , 4 )
LVAL	4107:1	4107:1	6	written
FIELD	4107:1	4107:1	7	written
LEAF_NODE	4107:1	4107:1	8	written
ASSIGN_OP	4107:9	4107:9	6	+=
LEAF_NODE	4107:9	4107:9	7	+=
RVAL	4107:12	4107:12	6	t2pWriteFile ( output , ( tdata_t ) "<< \n" , 4 )
FUNCTION_CALL	4107:12	4107:53	7	t2pWriteFile ( output , ( tdata_t ) "<< \n" , 4 )
CALLEE	4107:12	4107:12	8	t2pWriteFile
LEAF_NODE	4107:12	4107:12	9	t2pWriteFile
LEAF_NODE	4107:24	4107:24	8	(
ARGUMENT	4107:25	4107:25	8	output
FIELD	4107:25	4107:25	9	output
LEAF_NODE	4107:25	4107:25	10	output
LEAF_NODE	4107:31	4107:31	8	,
ARGUMENT	4107:33	4107:43	8	( tdata_t ) "<< \n"
LEAF_NODE	4107:33	4107:33	9	(
TYPE_NAME	4107:34	4107:34	9	tdata_t
LEAF_NODE	4107:34	4107:34	10	tdata_t
LEAF_NODE	4107:41	4107:41	9	)
FIELD	4107:43	4107:43	9	"<< \n"
LEAF_NODE	4107:43	4107:43	10	"<< \n"
LEAF_NODE	4107:50	4107:50	8	,
ARGUMENT	4107:52	4107:52	8	4
FIELD	4107:52	4107:52	9	4
LEAF_NODE	4107:52	4107:52	10	4
LEAF_NODE	4107:53	4107:53	8	)
LEAF_NODE	4107:54	4107:54	4	;
LEAF_NODE	4109:1	4109:1	3	return
LEAF_NODE	4109:7	4109:7	3	(
LEAF_NODE	4109:8	4109:8	3	written
LEAF_NODE	4109:15	4109:15	3	)
LEAF_NODE	4109:16	4109:16	3	;
LEAF_NODE	4110:0	4110:0	2	}
FUNCTION_DEF	4116:0	4123:0	1	
RETURN_TYPE	4116:0	4116:0	2	tsize_t
TYPE_NAME	4116:0	4116:0	3	tsize_t
LEAF_NODE	4116:0	4116:0	4	tsize_t
FUNCTION_NAME	4116:8	4116:8	2	t2p_write_pdf_stream_dict_end
LEAF_NODE	4116:8	4116:8	3	t2p_write_pdf_stream_dict_end
PARAMETER_LIST	4116:37	4116:50	2	( TIFF * output )
LEAF_NODE	4116:37	4116:37	3	(
PARAMETER_DECL	4116:38	4116:44	3	TIFF * output
TYPE	4116:38	4116:42	4	TIFF *
TYPE_NAME	4116:38	4116:38	5	TIFF
LEAF_NODE	4116:38	4116:38	6	TIFF
POINTER	4116:42	4116:42	5	*
LEAF_NODE	4116:42	4116:42	6	*
NAME	4116:44	4116:44	4	output
LEAF_NODE	4116:44	4116:44	5	output
LEAF_NODE	4116:50	4116:50	3	)
LEAF_NODE	4116:51	4116:51	2	{
STATEMENTS	4118:1	4122:16	2	
SIMPLE_DECL	4118:1	4118:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4118:1	4118:9	4	tsize_t written ; written = 0
TYPE	4118:1	4118:1	5	tsize_t
TYPE_NAME	4118:1	4118:1	6	tsize_t
LEAF_NODE	4118:1	4118:1	7	tsize_t
NAME	4118:9	4118:9	5	written
LEAF_NODE	4118:9	4118:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4118:9	4118:9	5	written = 0
ASSIGN	4118:9	4118:17	6	written = 0
LVAL	4118:9	4118:9	7	written
NAME	4118:9	4118:9	8	written
LEAF_NODE	4118:9	4118:9	9	written
ASSIGN_OP	4118:16	4118:16	7	=
LEAF_NODE	4118:16	4118:16	8	=
RVAL	4118:17	4118:17	7	0
FIELD	4118:17	4118:17	8	0
LEAF_NODE	4118:17	4118:17	9	0
LEAF_NODE	4118:18	4118:18	4	;
EXPR_STATEMENT	4120:1	4120:54	3	written += t2pWriteFile ( output , ( tdata_t ) " >>\n" , 4 ) ;
EXPR	4120:1	4120:1	4	written += t2pWriteFile ( output , ( tdata_t ) " >>\n" , 4 )
ASSIGN	4120:1	4120:12	5	written += t2pWriteFile ( output , ( tdata_t ) " >>\n" , 4 )
LVAL	4120:1	4120:1	6	written
FIELD	4120:1	4120:1	7	written
LEAF_NODE	4120:1	4120:1	8	written
ASSIGN_OP	4120:9	4120:9	6	+=
LEAF_NODE	4120:9	4120:9	7	+=
RVAL	4120:12	4120:12	6	t2pWriteFile ( output , ( tdata_t ) " >>\n" , 4 )
FUNCTION_CALL	4120:12	4120:53	7	t2pWriteFile ( output , ( tdata_t ) " >>\n" , 4 )
CALLEE	4120:12	4120:12	8	t2pWriteFile
LEAF_NODE	4120:12	4120:12	9	t2pWriteFile
LEAF_NODE	4120:24	4120:24	8	(
ARGUMENT	4120:25	4120:25	8	output
FIELD	4120:25	4120:25	9	output
LEAF_NODE	4120:25	4120:25	10	output
LEAF_NODE	4120:31	4120:31	8	,
ARGUMENT	4120:33	4120:43	8	( tdata_t ) " >>\n"
LEAF_NODE	4120:33	4120:33	9	(
TYPE_NAME	4120:34	4120:34	9	tdata_t
LEAF_NODE	4120:34	4120:34	10	tdata_t
LEAF_NODE	4120:41	4120:41	9	)
FIELD	4120:43	4120:43	9	" >>\n"
LEAF_NODE	4120:43	4120:43	10	" >>\n"
LEAF_NODE	4120:50	4120:50	8	,
ARGUMENT	4120:52	4120:52	8	4
FIELD	4120:52	4120:52	9	4
LEAF_NODE	4120:52	4120:52	10	4
LEAF_NODE	4120:53	4120:53	8	)
LEAF_NODE	4120:54	4120:54	4	;
LEAF_NODE	4122:1	4122:1	3	return
LEAF_NODE	4122:7	4122:7	3	(
LEAF_NODE	4122:8	4122:8	3	written
LEAF_NODE	4122:15	4122:15	3	)
LEAF_NODE	4122:16	4122:16	3	;
LEAF_NODE	4123:0	4123:0	2	}
FUNCTION_DEF	4129:0	4141:0	1	
RETURN_TYPE	4129:0	4129:0	2	tsize_t
TYPE_NAME	4129:0	4129:0	3	tsize_t
LEAF_NODE	4129:0	4129:0	4	tsize_t
FUNCTION_NAME	4129:8	4129:8	2	t2p_write_pdf_stream_length
LEAF_NODE	4129:8	4129:8	3	t2p_write_pdf_stream_length
PARAMETER_LIST	4129:35	4129:61	2	( tsize_t len , TIFF * output )
LEAF_NODE	4129:35	4129:35	3	(
PARAMETER_DECL	4129:36	4129:44	3	tsize_t len
TYPE	4129:36	4129:36	4	tsize_t
TYPE_NAME	4129:36	4129:36	5	tsize_t
LEAF_NODE	4129:36	4129:36	6	tsize_t
NAME	4129:44	4129:44	4	len
LEAF_NODE	4129:44	4129:44	5	len
LEAF_NODE	4129:47	4129:47	3	,
PARAMETER_DECL	4129:49	4129:55	3	TIFF * output
TYPE	4129:49	4129:53	4	TIFF *
TYPE_NAME	4129:49	4129:49	5	TIFF
LEAF_NODE	4129:49	4129:49	6	TIFF
POINTER	4129:53	4129:53	5	*
LEAF_NODE	4129:53	4129:53	6	*
NAME	4129:55	4129:55	4	output
LEAF_NODE	4129:55	4129:55	5	output
LEAF_NODE	4129:61	4129:61	3	)
LEAF_NODE	4129:62	4129:62	2	{
STATEMENTS	4131:1	4140:16	2	
SIMPLE_DECL	4131:1	4131:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4131:1	4131:9	4	tsize_t written ; written = 0
TYPE	4131:1	4131:1	5	tsize_t
TYPE_NAME	4131:1	4131:1	6	tsize_t
LEAF_NODE	4131:1	4131:1	7	tsize_t
NAME	4131:9	4131:9	5	written
LEAF_NODE	4131:9	4131:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4131:9	4131:9	5	written = 0
ASSIGN	4131:9	4131:17	6	written = 0
LVAL	4131:9	4131:9	7	written
NAME	4131:9	4131:9	8	written
LEAF_NODE	4131:9	4131:9	9	written
ASSIGN_OP	4131:16	4131:16	7	=
LEAF_NODE	4131:16	4131:16	8	=
RVAL	4131:17	4131:17	7	0
FIELD	4131:17	4131:17	8	0
LEAF_NODE	4131:17	4131:17	9	0
LEAF_NODE	4131:18	4131:18	4	;
SIMPLE_DECL	4132:1	4132:16	3	char [ 32 ] buffer ;
VAR_DECL	4132:1	4132:6	4	char [ 32 ] buffer
TYPE	4132:1	4132:12	5	char [ 32 ]
TYPE_NAME	4132:1	4132:1	6	char
LEAF_NODE	4132:1	4132:1	7	char
TYPE_SUFFIX	4132:12	4132:15	6	[ 32 ]
LEAF_NODE	4132:12	4132:12	7	[
FIELD	4132:13	4132:13	7	32
LEAF_NODE	4132:13	4132:13	8	32
LEAF_NODE	4132:15	4132:15	7	]
NAME	4132:6	4132:6	5	buffer
LEAF_NODE	4132:6	4132:6	6	buffer
LEAF_NODE	4132:16	4132:16	4	;
SIMPLE_DECL	4133:1	4133:13	3	int buflen ; buflen = 0 ;
VAR_DECL	4133:1	4133:5	4	int buflen ; buflen = 0
TYPE	4133:1	4133:1	5	int
TYPE_NAME	4133:1	4133:1	6	int
LEAF_NODE	4133:1	4133:1	7	int
NAME	4133:5	4133:5	5	buflen
LEAF_NODE	4133:5	4133:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	4133:5	4133:5	5	buflen = 0
ASSIGN	4133:5	4133:12	6	buflen = 0
LVAL	4133:5	4133:5	7	buflen
NAME	4133:5	4133:5	8	buflen
LEAF_NODE	4133:5	4133:5	9	buflen
ASSIGN_OP	4133:11	4133:11	7	=
LEAF_NODE	4133:11	4133:11	8	=
RVAL	4133:12	4133:12	7	0
FIELD	4133:12	4133:12	8	0
LEAF_NODE	4133:12	4133:12	9	0
LEAF_NODE	4133:13	4133:13	4	;
EXPR_STATEMENT	4135:1	4135:67	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) len ) ;
EXPR	4135:1	4135:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) len )
ASSIGN	4135:1	4135:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) len )
LVAL	4135:1	4135:1	6	buflen
FIELD	4135:1	4135:1	7	buflen
LEAF_NODE	4135:1	4135:1	8	buflen
ASSIGN_OP	4135:7	4135:7	6	=
LEAF_NODE	4135:7	4135:7	7	=
RVAL	4135:8	4135:8	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) len )
FUNCTION_CALL	4135:8	4135:66	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) len )
CALLEE	4135:8	4135:8	8	snprintf
LEAF_NODE	4135:8	4135:8	9	snprintf
LEAF_NODE	4135:16	4135:16	8	(
ARGUMENT	4135:17	4135:17	8	buffer
FIELD	4135:17	4135:17	9	buffer
LEAF_NODE	4135:17	4135:17	10	buffer
LEAF_NODE	4135:23	4135:23	8	,
ARGUMENT	4135:25	4135:25	8	sizeof ( buffer )
FUNCTION_CALL	4135:25	4135:38	9	sizeof ( buffer )
CALLEE	4135:25	4135:25	10	sizeof
LEAF_NODE	4135:25	4135:25	11	sizeof
LEAF_NODE	4135:31	4135:31	10	(
ARGUMENT	4135:32	4135:32	10	buffer
FIELD	4135:32	4135:32	11	buffer
LEAF_NODE	4135:32	4135:32	12	buffer
LEAF_NODE	4135:38	4135:38	10	)
LEAF_NODE	4135:39	4135:39	8	,
ARGUMENT	4135:41	4135:41	8	"%lu"
FIELD	4135:41	4135:41	9	"%lu"
LEAF_NODE	4135:41	4135:41	10	"%lu"
LEAF_NODE	4135:46	4135:46	8	,
ARGUMENT	4135:48	4135:63	8	( unsigned long ) len
LEAF_NODE	4135:48	4135:48	9	(
TYPE_NAME	4135:49	4135:58	9	unsigned long
LEAF_NODE	4135:49	4135:49	10	unsigned
LEAF_NODE	4135:58	4135:58	10	long
LEAF_NODE	4135:62	4135:62	9	)
FIELD	4135:63	4135:63	9	len
LEAF_NODE	4135:63	4135:63	10	len
LEAF_NODE	4135:66	4135:66	8	)
LEAF_NODE	4135:67	4135:67	4	;
EXPR_STATEMENT	4136:1	4136:47	3	check_snprintf_ret ( ( T2P * ) NULL , buflen , buffer ) ;
EXPR	4136:1	4136:1	4	check_snprintf_ret ( ( T2P * ) NULL , buflen , buffer )
FUNCTION_CALL	4136:1	4136:46	5	check_snprintf_ret ( ( T2P * ) NULL , buflen , buffer )
CALLEE	4136:1	4136:1	6	check_snprintf_ret
LEAF_NODE	4136:1	4136:1	7	check_snprintf_ret
LEAF_NODE	4136:19	4136:19	6	(
ARGUMENT	4136:20	4136:26	6	( T2P * ) NULL
LEAF_NODE	4136:20	4136:20	7	(
TYPE_NAME	4136:21	4136:21	7	T2P
LEAF_NODE	4136:21	4136:21	8	T2P
LEAF_NODE	4136:24	4136:24	7	*
LEAF_NODE	4136:25	4136:25	7	)
FIELD	4136:26	4136:26	7	NULL
LEAF_NODE	4136:26	4136:26	8	NULL
LEAF_NODE	4136:30	4136:30	6	,
ARGUMENT	4136:32	4136:32	6	buflen
FIELD	4136:32	4136:32	7	buflen
LEAF_NODE	4136:32	4136:32	8	buflen
LEAF_NODE	4136:38	4136:38	6	,
ARGUMENT	4136:40	4136:40	6	buffer
FIELD	4136:40	4136:40	7	buffer
LEAF_NODE	4136:40	4136:40	8	buffer
LEAF_NODE	4136:46	4136:46	6	)
LEAF_NODE	4136:47	4136:47	4	;
EXPR_STATEMENT	4137:1	4137:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4137:1	4137:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4137:1	4137:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4137:1	4137:1	6	written
FIELD	4137:1	4137:1	7	written
LEAF_NODE	4137:1	4137:1	8	written
ASSIGN_OP	4137:9	4137:9	6	+=
LEAF_NODE	4137:9	4137:9	7	+=
RVAL	4137:12	4137:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4137:12	4137:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4137:12	4137:12	8	t2pWriteFile
LEAF_NODE	4137:12	4137:12	9	t2pWriteFile
LEAF_NODE	4137:24	4137:24	8	(
ARGUMENT	4137:25	4137:25	8	output
FIELD	4137:25	4137:25	9	output
LEAF_NODE	4137:25	4137:25	10	output
LEAF_NODE	4137:31	4137:31	8	,
ARGUMENT	4137:33	4137:43	8	( tdata_t ) buffer
LEAF_NODE	4137:33	4137:33	9	(
TYPE_NAME	4137:34	4137:34	9	tdata_t
LEAF_NODE	4137:34	4137:34	10	tdata_t
LEAF_NODE	4137:41	4137:41	9	)
FIELD	4137:43	4137:43	9	buffer
LEAF_NODE	4137:43	4137:43	10	buffer
LEAF_NODE	4137:49	4137:49	8	,
ARGUMENT	4137:51	4137:51	8	buflen
FIELD	4137:51	4137:51	9	buflen
LEAF_NODE	4137:51	4137:51	10	buflen
LEAF_NODE	4137:57	4137:57	8	)
LEAF_NODE	4137:58	4137:58	4	;
EXPR_STATEMENT	4138:1	4138:51	3	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4138:1	4138:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4138:1	4138:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4138:1	4138:1	6	written
FIELD	4138:1	4138:1	7	written
LEAF_NODE	4138:1	4138:1	8	written
ASSIGN_OP	4138:9	4138:9	6	+=
LEAF_NODE	4138:9	4138:9	7	+=
RVAL	4138:12	4138:12	6	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4138:12	4138:50	7	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4138:12	4138:12	8	t2pWriteFile
LEAF_NODE	4138:12	4138:12	9	t2pWriteFile
LEAF_NODE	4138:24	4138:24	8	(
ARGUMENT	4138:25	4138:25	8	output
FIELD	4138:25	4138:25	9	output
LEAF_NODE	4138:25	4138:25	10	output
LEAF_NODE	4138:31	4138:31	8	,
ARGUMENT	4138:33	4138:43	8	( tdata_t ) "\n"
LEAF_NODE	4138:33	4138:33	9	(
TYPE_NAME	4138:34	4138:34	9	tdata_t
LEAF_NODE	4138:34	4138:34	10	tdata_t
LEAF_NODE	4138:41	4138:41	9	)
FIELD	4138:43	4138:43	9	"\n"
LEAF_NODE	4138:43	4138:43	10	"\n"
LEAF_NODE	4138:47	4138:47	8	,
ARGUMENT	4138:49	4138:49	8	1
FIELD	4138:49	4138:49	9	1
LEAF_NODE	4138:49	4138:49	10	1
LEAF_NODE	4138:50	4138:50	8	)
LEAF_NODE	4138:51	4138:51	4	;
LEAF_NODE	4140:1	4140:1	3	return
LEAF_NODE	4140:7	4140:7	3	(
LEAF_NODE	4140:8	4140:8	3	written
LEAF_NODE	4140:15	4140:15	3	)
LEAF_NODE	4140:16	4140:16	3	;
LEAF_NODE	4141:0	4141:0	2	}
FUNCTION_DEF	4147:0	4169:0	1	
RETURN_TYPE	4147:0	4147:0	2	tsize_t
TYPE_NAME	4147:0	4147:0	3	tsize_t
LEAF_NODE	4147:0	4147:0	4	tsize_t
FUNCTION_NAME	4147:8	4147:8	2	t2p_write_pdf_catalog
LEAF_NODE	4147:8	4147:8	3	t2p_write_pdf_catalog
PARAMETER_LIST	4147:29	4147:52	2	( T2P * t2p , TIFF * output )
LEAF_NODE	4147:29	4147:29	3	(
PARAMETER_DECL	4147:30	4147:35	3	T2P * t2p
TYPE	4147:30	4147:33	4	T2P *
TYPE_NAME	4147:30	4147:30	5	T2P
LEAF_NODE	4147:30	4147:30	6	T2P
POINTER	4147:33	4147:33	5	*
LEAF_NODE	4147:33	4147:33	6	*
NAME	4147:35	4147:35	4	t2p
LEAF_NODE	4147:35	4147:35	5	t2p
LEAF_NODE	4147:38	4147:38	3	,
PARAMETER_DECL	4147:40	4147:46	3	TIFF * output
TYPE	4147:40	4147:44	4	TIFF *
TYPE_NAME	4147:40	4147:40	5	TIFF
LEAF_NODE	4147:40	4147:40	6	TIFF
POINTER	4147:44	4147:44	5	*
LEAF_NODE	4147:44	4147:44	6	*
NAME	4147:46	4147:46	4	output
LEAF_NODE	4147:46	4147:46	5	output
LEAF_NODE	4147:52	4147:52	3	)
LEAF_NODE	4148:0	4148:0	2	{
STATEMENTS	4149:1	4168:16	2	
SIMPLE_DECL	4149:1	4149:20	3	tsize_t written ; written = 0 ;
VAR_DECL	4149:1	4149:9	4	tsize_t written ; written = 0
TYPE	4149:1	4149:1	5	tsize_t
TYPE_NAME	4149:1	4149:1	6	tsize_t
LEAF_NODE	4149:1	4149:1	7	tsize_t
NAME	4149:9	4149:9	5	written
LEAF_NODE	4149:9	4149:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4149:9	4149:9	5	written = 0
ASSIGN	4149:9	4149:19	6	written = 0
LVAL	4149:9	4149:9	7	written
NAME	4149:9	4149:9	8	written
LEAF_NODE	4149:9	4149:9	9	written
ASSIGN_OP	4149:17	4149:17	7	=
LEAF_NODE	4149:17	4149:17	8	=
RVAL	4149:19	4149:19	7	0
FIELD	4149:19	4149:19	8	0
LEAF_NODE	4149:19	4149:19	9	0
LEAF_NODE	4149:20	4149:20	4	;
SIMPLE_DECL	4150:1	4150:16	3	char [ 32 ] buffer ;
VAR_DECL	4150:1	4150:6	4	char [ 32 ] buffer
TYPE	4150:1	4150:12	5	char [ 32 ]
TYPE_NAME	4150:1	4150:1	6	char
LEAF_NODE	4150:1	4150:1	7	char
TYPE_SUFFIX	4150:12	4150:15	6	[ 32 ]
LEAF_NODE	4150:12	4150:12	7	[
FIELD	4150:13	4150:13	7	32
LEAF_NODE	4150:13	4150:13	8	32
LEAF_NODE	4150:15	4150:15	7	]
NAME	4150:6	4150:6	5	buffer
LEAF_NODE	4150:6	4150:6	6	buffer
LEAF_NODE	4150:16	4150:16	4	;
SIMPLE_DECL	4151:1	4151:15	3	int buflen ; buflen = 0 ;
VAR_DECL	4151:1	4151:5	4	int buflen ; buflen = 0
TYPE	4151:1	4151:1	5	int
TYPE_NAME	4151:1	4151:1	6	int
LEAF_NODE	4151:1	4151:1	7	int
NAME	4151:5	4151:5	5	buflen
LEAF_NODE	4151:5	4151:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	4151:5	4151:5	5	buflen = 0
ASSIGN	4151:5	4151:14	6	buflen = 0
LVAL	4151:5	4151:5	7	buflen
NAME	4151:5	4151:5	8	buflen
LEAF_NODE	4151:5	4151:5	9	buflen
ASSIGN_OP	4151:12	4151:12	7	=
LEAF_NODE	4151:12	4151:12	8	=
RVAL	4151:14	4151:14	7	0
FIELD	4151:14	4151:14	8	0
LEAF_NODE	4151:14	4151:14	9	0
LEAF_NODE	4151:15	4151:15	4	;
EXPR_STATEMENT	4153:1	4155:5	3	written += t2pWriteFile ( output , ( tdata_t ) "<< \n/Type /Catalog \n/Pages " , 27 ) ;
EXPR	4153:1	4153:1	4	written += t2pWriteFile ( output , ( tdata_t ) "<< \n/Type /Catalog \n/Pages " , 27 )
ASSIGN	4153:1	4153:12	5	written += t2pWriteFile ( output , ( tdata_t ) "<< \n/Type /Catalog \n/Pages " , 27 )
LVAL	4153:1	4153:1	6	written
FIELD	4153:1	4153:1	7	written
LEAF_NODE	4153:1	4153:1	8	written
ASSIGN_OP	4153:9	4153:9	6	+=
LEAF_NODE	4153:9	4153:9	7	+=
RVAL	4153:12	4153:12	6	t2pWriteFile ( output , ( tdata_t ) "<< \n/Type /Catalog \n/Pages " , 27 )
FUNCTION_CALL	4153:12	4155:4	7	t2pWriteFile ( output , ( tdata_t ) "<< \n/Type /Catalog \n/Pages " , 27 )
CALLEE	4153:12	4153:12	8	t2pWriteFile
LEAF_NODE	4153:12	4153:12	9	t2pWriteFile
LEAF_NODE	4153:24	4153:24	8	(
ARGUMENT	4153:25	4153:25	8	output
FIELD	4153:25	4153:25	9	output
LEAF_NODE	4153:25	4153:25	10	output
LEAF_NODE	4153:31	4153:31	8	,
ARGUMENT	4154:2	4154:11	8	( tdata_t ) "<< \n/Type /Catalog \n/Pages "
LEAF_NODE	4154:2	4154:2	9	(
TYPE_NAME	4154:3	4154:3	9	tdata_t
LEAF_NODE	4154:3	4154:3	10	tdata_t
LEAF_NODE	4154:10	4154:10	9	)
FIELD	4154:11	4154:11	9	"<< \n/Type /Catalog \n/Pages "
LEAF_NODE	4154:11	4154:11	10	"<< \n/Type /Catalog \n/Pages "
LEAF_NODE	4154:42	4154:42	8	,
ARGUMENT	4155:2	4155:2	8	27
FIELD	4155:2	4155:2	9	27
LEAF_NODE	4155:2	4155:2	10	27
LEAF_NODE	4155:4	4155:4	8	)
LEAF_NODE	4155:5	4155:5	4	;
EXPR_STATEMENT	4156:1	4156:80	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_pages ) ;
EXPR	4156:1	4156:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_pages )
ASSIGN	4156:1	4156:10	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_pages )
LVAL	4156:1	4156:1	6	buflen
FIELD	4156:1	4156:1	7	buflen
LEAF_NODE	4156:1	4156:1	8	buflen
ASSIGN_OP	4156:8	4156:8	6	=
LEAF_NODE	4156:8	4156:8	7	=
RVAL	4156:10	4156:10	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_pages )
FUNCTION_CALL	4156:10	4156:79	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_pages )
CALLEE	4156:10	4156:10	8	snprintf
LEAF_NODE	4156:10	4156:10	9	snprintf
LEAF_NODE	4156:18	4156:18	8	(
ARGUMENT	4156:19	4156:19	8	buffer
FIELD	4156:19	4156:19	9	buffer
LEAF_NODE	4156:19	4156:19	10	buffer
LEAF_NODE	4156:25	4156:25	8	,
ARGUMENT	4156:27	4156:27	8	sizeof ( buffer )
FUNCTION_CALL	4156:27	4156:40	9	sizeof ( buffer )
CALLEE	4156:27	4156:27	10	sizeof
LEAF_NODE	4156:27	4156:27	11	sizeof
LEAF_NODE	4156:33	4156:33	10	(
ARGUMENT	4156:34	4156:34	10	buffer
FIELD	4156:34	4156:34	11	buffer
LEAF_NODE	4156:34	4156:34	12	buffer
LEAF_NODE	4156:40	4156:40	10	)
LEAF_NODE	4156:41	4156:41	8	,
ARGUMENT	4156:43	4156:43	8	"%lu"
FIELD	4156:43	4156:43	9	"%lu"
LEAF_NODE	4156:43	4156:43	10	"%lu"
LEAF_NODE	4156:48	4156:48	8	,
ARGUMENT	4156:50	4156:65	8	( unsigned long ) t2p -> pdf_pages
LEAF_NODE	4156:50	4156:50	9	(
TYPE_NAME	4156:51	4156:60	9	unsigned long
LEAF_NODE	4156:51	4156:51	10	unsigned
LEAF_NODE	4156:60	4156:60	10	long
LEAF_NODE	4156:64	4156:64	9	)
FIELD	4156:65	4156:70	9	t2p -> pdf_pages
LEAF_NODE	4156:65	4156:65	10	t2p
LEAF_NODE	4156:68	4156:68	10	->
LEAF_NODE	4156:70	4156:70	10	pdf_pages
LEAF_NODE	4156:79	4156:79	8	)
LEAF_NODE	4156:80	4156:80	4	;
EXPR_STATEMENT	4157:1	4157:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4157:1	4157:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4157:1	4157:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4157:1	4157:1	6	check_snprintf_ret
LEAF_NODE	4157:1	4157:1	7	check_snprintf_ret
LEAF_NODE	4157:19	4157:19	6	(
ARGUMENT	4157:20	4157:20	6	t2p
FIELD	4157:20	4157:20	7	t2p
LEAF_NODE	4157:20	4157:20	8	t2p
LEAF_NODE	4157:23	4157:23	6	,
ARGUMENT	4157:25	4157:25	6	buflen
FIELD	4157:25	4157:25	7	buflen
LEAF_NODE	4157:25	4157:25	8	buflen
LEAF_NODE	4157:31	4157:31	6	,
ARGUMENT	4157:33	4157:33	6	buffer
FIELD	4157:33	4157:33	7	buffer
LEAF_NODE	4157:33	4157:33	8	buffer
LEAF_NODE	4157:39	4157:39	6	)
LEAF_NODE	4157:40	4157:40	4	;
EXPR_STATEMENT	4158:1	4159:48	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , TIFFmin ( ( size_t ) buflen , sizeof ( buffer ) - 1 ) ) ;
EXPR	4158:1	4158:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , TIFFmin ( ( size_t ) buflen , sizeof ( buffer ) - 1 ) )
ASSIGN	4158:1	4158:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , TIFFmin ( ( size_t ) buflen , sizeof ( buffer ) - 1 ) )
LVAL	4158:1	4158:1	6	written
FIELD	4158:1	4158:1	7	written
LEAF_NODE	4158:1	4158:1	8	written
ASSIGN_OP	4158:9	4158:9	6	+=
LEAF_NODE	4158:9	4158:9	7	+=
RVAL	4158:12	4158:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , TIFFmin ( ( size_t ) buflen , sizeof ( buffer ) - 1 ) )
FUNCTION_CALL	4158:12	4159:47	7	t2pWriteFile ( output , ( tdata_t ) buffer , TIFFmin ( ( size_t ) buflen , sizeof ( buffer ) - 1 ) )
CALLEE	4158:12	4158:12	8	t2pWriteFile
LEAF_NODE	4158:12	4158:12	9	t2pWriteFile
LEAF_NODE	4158:24	4158:24	8	(
ARGUMENT	4158:25	4158:25	8	output
FIELD	4158:25	4158:25	9	output
LEAF_NODE	4158:25	4158:25	10	output
LEAF_NODE	4158:31	4158:31	8	,
ARGUMENT	4158:33	4158:43	8	( tdata_t ) buffer
LEAF_NODE	4158:33	4158:33	9	(
TYPE_NAME	4158:34	4158:34	9	tdata_t
LEAF_NODE	4158:34	4158:34	10	tdata_t
LEAF_NODE	4158:41	4158:41	9	)
FIELD	4158:43	4158:43	9	buffer
LEAF_NODE	4158:43	4158:43	10	buffer
LEAF_NODE	4158:49	4158:49	8	,
ARGUMENT	4159:4	4159:4	8	TIFFmin ( ( size_t ) buflen , sizeof ( buffer ) - 1 )
FUNCTION_CALL	4159:4	4159:46	9	TIFFmin ( ( size_t ) buflen , sizeof ( buffer ) - 1 )
CALLEE	4159:4	4159:4	10	TIFFmin
LEAF_NODE	4159:4	4159:4	11	TIFFmin
LEAF_NODE	4159:11	4159:11	10	(
ARGUMENT	4159:12	4159:20	10	( size_t ) buflen
LEAF_NODE	4159:12	4159:12	11	(
TYPE_NAME	4159:13	4159:13	11	size_t
LEAF_NODE	4159:13	4159:13	12	size_t
LEAF_NODE	4159:19	4159:19	11	)
FIELD	4159:20	4159:20	11	buflen
LEAF_NODE	4159:20	4159:20	12	buflen
LEAF_NODE	4159:26	4159:26	10	,
ARGUMENT	4159:28	4159:45	10	sizeof ( buffer ) - 1
FUNCTION_CALL	4159:28	4159:41	11	sizeof ( buffer )
CALLEE	4159:28	4159:28	12	sizeof
LEAF_NODE	4159:28	4159:28	13	sizeof
LEAF_NODE	4159:34	4159:34	12	(
ARGUMENT	4159:35	4159:35	12	buffer
FIELD	4159:35	4159:35	13	buffer
LEAF_NODE	4159:35	4159:35	14	buffer
LEAF_NODE	4159:41	4159:41	12	)
LEAF_NODE	4159:43	4159:43	11	-
FIELD	4159:45	4159:45	11	1
LEAF_NODE	4159:45	4159:45	12	1
LEAF_NODE	4159:46	4159:46	10	)
LEAF_NODE	4159:47	4159:47	8	)
LEAF_NODE	4159:48	4159:48	4	;
EXPR_STATEMENT	4160:1	4160:56	3	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 ) ;
EXPR	4160:1	4160:1	4	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
ASSIGN	4160:1	4160:12	5	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
LVAL	4160:1	4160:1	6	written
FIELD	4160:1	4160:1	7	written
LEAF_NODE	4160:1	4160:1	8	written
ASSIGN_OP	4160:9	4160:9	6	+=
LEAF_NODE	4160:9	4160:9	7	+=
RVAL	4160:12	4160:12	6	t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
FUNCTION_CALL	4160:12	4160:55	7	t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
CALLEE	4160:12	4160:12	8	t2pWriteFile
LEAF_NODE	4160:12	4160:12	9	t2pWriteFile
LEAF_NODE	4160:24	4160:24	8	(
ARGUMENT	4160:25	4160:25	8	output
FIELD	4160:25	4160:25	9	output
LEAF_NODE	4160:25	4160:25	10	output
LEAF_NODE	4160:31	4160:31	8	,
ARGUMENT	4160:33	4160:43	8	( tdata_t ) " 0 R \n"
LEAF_NODE	4160:33	4160:33	9	(
TYPE_NAME	4160:34	4160:34	9	tdata_t
LEAF_NODE	4160:34	4160:34	10	tdata_t
LEAF_NODE	4160:41	4160:41	9	)
FIELD	4160:43	4160:43	9	" 0 R \n"
LEAF_NODE	4160:43	4160:43	10	" 0 R \n"
LEAF_NODE	4160:52	4160:52	8	,
ARGUMENT	4160:54	4160:54	8	6
FIELD	4160:54	4160:54	9	6
LEAF_NODE	4160:54	4160:54	10	6
LEAF_NODE	4160:55	4160:55	8	)
LEAF_NODE	4160:56	4160:56	4	;
SELECTION	4161:1	4161:23	3	
KEYWORD	4161:1	4161:1	4	if
LEAF_NODE	4161:1	4161:1	5	if
LEAF_NODE	4161:3	4161:3	4	(
CONDITION	4161:4	4161:4	4	t2p -> pdf_fitwindow
EXPR	4161:4	4161:4	5	t2p -> pdf_fitwindow
FIELD	4161:4	4161:9	6	t2p -> pdf_fitwindow
LEAF_NODE	4161:4	4161:4	7	t2p
LEAF_NODE	4161:7	4161:7	7	->
LEAF_NODE	4161:9	4161:9	7	pdf_fitwindow
LEAF_NODE	4161:22	4161:22	4	)
STATEMENTS	4161:23	4165:1	4	
LEAF_NODE	4161:23	4161:23	5	{
STATEMENTS	4162:2	4162:2	5	
EXPR_STATEMENT	4162:2	4164:6	6	written += t2pWriteFile ( output , ( tdata_t ) "/ViewerPreferences <</FitWindow true>>\n" , 39 ) ;
EXPR	4162:2	4162:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/ViewerPreferences <</FitWindow true>>\n" , 39 )
ASSIGN	4162:2	4162:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/ViewerPreferences <</FitWindow true>>\n" , 39 )
LVAL	4162:2	4162:2	9	written
FIELD	4162:2	4162:2	10	written
LEAF_NODE	4162:2	4162:2	11	written
ASSIGN_OP	4162:10	4162:10	9	+=
LEAF_NODE	4162:10	4162:10	10	+=
RVAL	4162:13	4162:13	9	t2pWriteFile ( output , ( tdata_t ) "/ViewerPreferences <</FitWindow true>>\n" , 39 )
FUNCTION_CALL	4162:13	4164:5	10	t2pWriteFile ( output , ( tdata_t ) "/ViewerPreferences <</FitWindow true>>\n" , 39 )
CALLEE	4162:13	4162:13	11	t2pWriteFile
LEAF_NODE	4162:13	4162:13	12	t2pWriteFile
LEAF_NODE	4162:25	4162:25	11	(
ARGUMENT	4162:26	4162:26	11	output
FIELD	4162:26	4162:26	12	output
LEAF_NODE	4162:26	4162:26	13	output
LEAF_NODE	4162:32	4162:32	11	,
ARGUMENT	4163:3	4163:13	11	( tdata_t ) "/ViewerPreferences <</FitWindow true>>\n"
LEAF_NODE	4163:3	4163:3	12	(
TYPE_NAME	4163:4	4163:4	12	tdata_t
LEAF_NODE	4163:4	4163:4	13	tdata_t
LEAF_NODE	4163:11	4163:11	12	)
FIELD	4163:13	4163:13	12	"/ViewerPreferences <</FitWindow true>>\n"
LEAF_NODE	4163:13	4163:13	13	"/ViewerPreferences <</FitWindow true>>\n"
LEAF_NODE	4163:55	4163:55	11	,
ARGUMENT	4164:3	4164:3	11	39
FIELD	4164:3	4164:3	12	39
LEAF_NODE	4164:3	4164:3	13	39
LEAF_NODE	4164:5	4164:5	11	)
LEAF_NODE	4164:6	4164:6	7	;
LEAF_NODE	4165:1	4165:1	5	}
EXPR_STATEMENT	4166:1	4166:52	3	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 ) ;
EXPR	4166:1	4166:1	4	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
ASSIGN	4166:1	4166:12	5	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
LVAL	4166:1	4166:1	6	written
FIELD	4166:1	4166:1	7	written
LEAF_NODE	4166:1	4166:1	8	written
ASSIGN_OP	4166:9	4166:9	6	+=
LEAF_NODE	4166:9	4166:9	7	+=
RVAL	4166:12	4166:12	6	t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
FUNCTION_CALL	4166:12	4166:51	7	t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
CALLEE	4166:12	4166:12	8	t2pWriteFile
LEAF_NODE	4166:12	4166:12	9	t2pWriteFile
LEAF_NODE	4166:24	4166:24	8	(
ARGUMENT	4166:25	4166:25	8	output
FIELD	4166:25	4166:25	9	output
LEAF_NODE	4166:25	4166:25	10	output
LEAF_NODE	4166:31	4166:31	8	,
ARGUMENT	4166:33	4166:42	8	( tdata_t ) ">>\n"
LEAF_NODE	4166:33	4166:33	9	(
TYPE_NAME	4166:34	4166:34	9	tdata_t
LEAF_NODE	4166:34	4166:34	10	tdata_t
LEAF_NODE	4166:41	4166:41	9	)
FIELD	4166:42	4166:42	9	">>\n"
LEAF_NODE	4166:42	4166:42	10	">>\n"
LEAF_NODE	4166:48	4166:48	8	,
ARGUMENT	4166:50	4166:50	8	3
FIELD	4166:50	4166:50	9	3
LEAF_NODE	4166:50	4166:50	10	3
LEAF_NODE	4166:51	4166:51	8	)
LEAF_NODE	4166:52	4166:52	4	;
LEAF_NODE	4168:1	4168:1	3	return
LEAF_NODE	4168:7	4168:7	3	(
LEAF_NODE	4168:8	4168:8	3	written
LEAF_NODE	4168:15	4168:15	3	)
LEAF_NODE	4168:16	4168:16	3	;
LEAF_NODE	4169:0	4169:0	2	}
FUNCTION_DEF	4175:0	4256:0	1	
RETURN_TYPE	4175:0	4175:0	2	tsize_t
TYPE_NAME	4175:0	4175:0	3	tsize_t
LEAF_NODE	4175:0	4175:0	4	tsize_t
FUNCTION_NAME	4175:8	4175:8	2	t2p_write_pdf_info
LEAF_NODE	4175:8	4175:8	3	t2p_write_pdf_info
PARAMETER_LIST	4175:26	4175:62	2	( T2P * t2p , TIFF * input , TIFF * output )
LEAF_NODE	4175:26	4175:26	3	(
PARAMETER_DECL	4175:27	4175:32	3	T2P * t2p
TYPE	4175:27	4175:30	4	T2P *
TYPE_NAME	4175:27	4175:27	5	T2P
LEAF_NODE	4175:27	4175:27	6	T2P
POINTER	4175:30	4175:30	5	*
LEAF_NODE	4175:30	4175:30	6	*
NAME	4175:32	4175:32	4	t2p
LEAF_NODE	4175:32	4175:32	5	t2p
LEAF_NODE	4175:35	4175:35	3	,
PARAMETER_DECL	4175:37	4175:43	3	TIFF * input
TYPE	4175:37	4175:41	4	TIFF *
TYPE_NAME	4175:37	4175:37	5	TIFF
LEAF_NODE	4175:37	4175:37	6	TIFF
POINTER	4175:41	4175:41	5	*
LEAF_NODE	4175:41	4175:41	6	*
NAME	4175:43	4175:43	4	input
LEAF_NODE	4175:43	4175:43	5	input
LEAF_NODE	4175:48	4175:48	3	,
PARAMETER_DECL	4175:50	4175:56	3	TIFF * output
TYPE	4175:50	4175:54	4	TIFF *
TYPE_NAME	4175:50	4175:50	5	TIFF
LEAF_NODE	4175:50	4175:50	6	TIFF
POINTER	4175:54	4175:54	5	*
LEAF_NODE	4175:54	4175:54	6	*
NAME	4175:56	4175:56	4	output
LEAF_NODE	4175:56	4175:56	5	output
LEAF_NODE	4175:62	4175:62	3	)
LEAF_NODE	4176:0	4176:0	2	{
STATEMENTS	4177:1	4255:16	2	
SIMPLE_DECL	4177:1	4177:20	3	tsize_t written ; written = 0 ;
VAR_DECL	4177:1	4177:9	4	tsize_t written ; written = 0
TYPE	4177:1	4177:1	5	tsize_t
TYPE_NAME	4177:1	4177:1	6	tsize_t
LEAF_NODE	4177:1	4177:1	7	tsize_t
NAME	4177:9	4177:9	5	written
LEAF_NODE	4177:9	4177:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4177:9	4177:9	5	written = 0
ASSIGN	4177:9	4177:19	6	written = 0
LVAL	4177:9	4177:9	7	written
NAME	4177:9	4177:9	8	written
LEAF_NODE	4177:9	4177:9	9	written
ASSIGN_OP	4177:17	4177:17	7	=
LEAF_NODE	4177:17	4177:17	8	=
RVAL	4177:19	4177:19	7	0
FIELD	4177:19	4177:19	8	0
LEAF_NODE	4177:19	4177:19	9	0
LEAF_NODE	4177:20	4177:20	4	;
SIMPLE_DECL	4178:1	4178:11	3	char * info ;
VAR_DECL	4178:1	4178:7	4	char * info
TYPE	4178:1	4178:5	5	char *
TYPE_NAME	4178:1	4178:1	6	char
LEAF_NODE	4178:1	4178:1	7	char
POINTER	4178:5	4178:5	6	*
LEAF_NODE	4178:5	4178:5	7	*
NAME	4178:7	4178:7	5	info
LEAF_NODE	4178:7	4178:7	6	info
LEAF_NODE	4178:11	4178:11	4	;
SIMPLE_DECL	4179:1	4179:17	3	char [ 512 ] buffer ;
VAR_DECL	4179:1	4179:6	4	char [ 512 ] buffer
TYPE	4179:1	4179:12	5	char [ 512 ]
TYPE_NAME	4179:1	4179:1	6	char
LEAF_NODE	4179:1	4179:1	7	char
TYPE_SUFFIX	4179:12	4179:16	6	[ 512 ]
LEAF_NODE	4179:12	4179:12	7	[
FIELD	4179:13	4179:13	7	512
LEAF_NODE	4179:13	4179:13	8	512
LEAF_NODE	4179:16	4179:16	7	]
NAME	4179:6	4179:6	5	buffer
LEAF_NODE	4179:6	4179:6	6	buffer
LEAF_NODE	4179:17	4179:17	4	;
SELECTION	4181:1	4182:2	3	
KEYWORD	4181:1	4181:1	4	if
LEAF_NODE	4181:1	4181:1	5	if
LEAF_NODE	4181:3	4181:3	4	(
CONDITION	4181:4	4181:4	4	t2p -> pdf_datetime [ 0 ] == '\0'
EXPR	4181:4	4181:28	5	t2p -> pdf_datetime [ 0 ] == '\0'
FIELD	4181:4	4181:23	6	t2p -> pdf_datetime [ 0 ]
LEAF_NODE	4181:4	4181:4	7	t2p
LEAF_NODE	4181:7	4181:7	7	->
LEAF_NODE	4181:9	4181:9	7	pdf_datetime
LEAF_NODE	4181:21	4181:21	7	[
EXPR	4181:22	4181:22	7	0
FIELD	4181:22	4181:22	8	0
LEAF_NODE	4181:22	4181:22	9	0
LEAF_NODE	4181:23	4181:23	7	]
EQ_OPERATOR	4181:25	4181:25	6	==
LEAF_NODE	4181:25	4181:25	7	==
FIELD	4181:28	4181:28	6	'\0'
LEAF_NODE	4181:28	4181:28	7	'\0'
LEAF_NODE	4181:32	4181:32	4	)
STATEMENTS	4182:2	4182:2	4	
EXPR_STATEMENT	4182:2	4182:30	5	t2p_pdf_tifftime ( t2p , input ) ;
EXPR	4182:2	4182:2	6	t2p_pdf_tifftime ( t2p , input )
FUNCTION_CALL	4182:2	4182:29	7	t2p_pdf_tifftime ( t2p , input )
CALLEE	4182:2	4182:2	8	t2p_pdf_tifftime
LEAF_NODE	4182:2	4182:2	9	t2p_pdf_tifftime
LEAF_NODE	4182:18	4182:18	8	(
ARGUMENT	4182:19	4182:19	8	t2p
FIELD	4182:19	4182:19	9	t2p
LEAF_NODE	4182:19	4182:19	10	t2p
LEAF_NODE	4182:22	4182:22	8	,
ARGUMENT	4182:24	4182:24	8	input
FIELD	4182:24	4182:24	9	input
LEAF_NODE	4182:24	4182:24	10	input
LEAF_NODE	4182:29	4182:29	8	)
LEAF_NODE	4182:30	4182:30	6	;
SELECTION	4183:1	4183:36	3	
KEYWORD	4183:1	4183:1	4	if
LEAF_NODE	4183:1	4183:1	5	if
LEAF_NODE	4183:4	4183:4	4	(
CONDITION	4183:5	4183:5	4	strlen ( t2p -> pdf_datetime ) > 0
EXPR	4183:5	4183:33	5	strlen ( t2p -> pdf_datetime ) > 0
FUNCTION_CALL	4183:5	4183:29	6	strlen ( t2p -> pdf_datetime )
CALLEE	4183:5	4183:5	7	strlen
LEAF_NODE	4183:5	4183:5	8	strlen
LEAF_NODE	4183:11	4183:11	7	(
ARGUMENT	4183:12	4183:12	7	t2p -> pdf_datetime
FIELD	4183:12	4183:17	8	t2p -> pdf_datetime
LEAF_NODE	4183:12	4183:12	9	t2p
LEAF_NODE	4183:15	4183:15	9	->
LEAF_NODE	4183:17	4183:17	9	pdf_datetime
LEAF_NODE	4183:29	4183:29	7	)
REL_OPERATOR	4183:31	4183:31	6	>
LEAF_NODE	4183:31	4183:31	7	>
FIELD	4183:33	4183:33	6	0
LEAF_NODE	4183:33	4183:33	7	0
LEAF_NODE	4183:34	4183:34	4	)
STATEMENTS	4183:36	4188:1	4	
LEAF_NODE	4183:36	4183:36	5	{
STATEMENTS	4184:2	4187:2	5	
EXPR_STATEMENT	4184:2	4184:70	6	written += t2pWriteFile ( output , ( tdata_t ) "<< \n/CreationDate " , 18 ) ;
EXPR	4184:2	4184:2	7	written += t2pWriteFile ( output , ( tdata_t ) "<< \n/CreationDate " , 18 )
ASSIGN	4184:2	4184:13	8	written += t2pWriteFile ( output , ( tdata_t ) "<< \n/CreationDate " , 18 )
LVAL	4184:2	4184:2	9	written
FIELD	4184:2	4184:2	10	written
LEAF_NODE	4184:2	4184:2	11	written
ASSIGN_OP	4184:10	4184:10	9	+=
LEAF_NODE	4184:10	4184:10	10	+=
RVAL	4184:13	4184:13	9	t2pWriteFile ( output , ( tdata_t ) "<< \n/CreationDate " , 18 )
FUNCTION_CALL	4184:13	4184:69	10	t2pWriteFile ( output , ( tdata_t ) "<< \n/CreationDate " , 18 )
CALLEE	4184:13	4184:13	11	t2pWriteFile
LEAF_NODE	4184:13	4184:13	12	t2pWriteFile
LEAF_NODE	4184:25	4184:25	11	(
ARGUMENT	4184:26	4184:26	11	output
FIELD	4184:26	4184:26	12	output
LEAF_NODE	4184:26	4184:26	13	output
LEAF_NODE	4184:32	4184:32	11	,
ARGUMENT	4184:34	4184:44	11	( tdata_t ) "<< \n/CreationDate "
LEAF_NODE	4184:34	4184:34	12	(
TYPE_NAME	4184:35	4184:35	12	tdata_t
LEAF_NODE	4184:35	4184:35	13	tdata_t
LEAF_NODE	4184:42	4184:42	12	)
FIELD	4184:44	4184:44	12	"<< \n/CreationDate "
LEAF_NODE	4184:44	4184:44	13	"<< \n/CreationDate "
LEAF_NODE	4184:65	4184:65	11	,
ARGUMENT	4184:67	4184:67	11	18
FIELD	4184:67	4184:67	12	18
LEAF_NODE	4184:67	4184:67	13	18
LEAF_NODE	4184:69	4184:69	11	)
LEAF_NODE	4184:70	4184:70	7	;
EXPR_STATEMENT	4185:2	4185:60	6	written += t2p_write_pdf_string ( t2p -> pdf_datetime , output ) ;
EXPR	4185:2	4185:2	7	written += t2p_write_pdf_string ( t2p -> pdf_datetime , output )
ASSIGN	4185:2	4185:13	8	written += t2p_write_pdf_string ( t2p -> pdf_datetime , output )
LVAL	4185:2	4185:2	9	written
FIELD	4185:2	4185:2	10	written
LEAF_NODE	4185:2	4185:2	11	written
ASSIGN_OP	4185:10	4185:10	9	+=
LEAF_NODE	4185:10	4185:10	10	+=
RVAL	4185:13	4185:13	9	t2p_write_pdf_string ( t2p -> pdf_datetime , output )
FUNCTION_CALL	4185:13	4185:59	10	t2p_write_pdf_string ( t2p -> pdf_datetime , output )
CALLEE	4185:13	4185:13	11	t2p_write_pdf_string
LEAF_NODE	4185:13	4185:13	12	t2p_write_pdf_string
LEAF_NODE	4185:33	4185:33	11	(
ARGUMENT	4185:34	4185:34	11	t2p -> pdf_datetime
FIELD	4185:34	4185:39	12	t2p -> pdf_datetime
LEAF_NODE	4185:34	4185:34	13	t2p
LEAF_NODE	4185:37	4185:37	13	->
LEAF_NODE	4185:39	4185:39	13	pdf_datetime
LEAF_NODE	4185:51	4185:51	11	,
ARGUMENT	4185:53	4185:53	11	output
FIELD	4185:53	4185:53	12	output
LEAF_NODE	4185:53	4185:53	13	output
LEAF_NODE	4185:59	4185:59	11	)
LEAF_NODE	4185:60	4185:60	7	;
EXPR_STATEMENT	4186:2	4186:62	6	written += t2pWriteFile ( output , ( tdata_t ) "\n/ModDate " , 10 ) ;
EXPR	4186:2	4186:2	7	written += t2pWriteFile ( output , ( tdata_t ) "\n/ModDate " , 10 )
ASSIGN	4186:2	4186:13	8	written += t2pWriteFile ( output , ( tdata_t ) "\n/ModDate " , 10 )
LVAL	4186:2	4186:2	9	written
FIELD	4186:2	4186:2	10	written
LEAF_NODE	4186:2	4186:2	11	written
ASSIGN_OP	4186:10	4186:10	9	+=
LEAF_NODE	4186:10	4186:10	10	+=
RVAL	4186:13	4186:13	9	t2pWriteFile ( output , ( tdata_t ) "\n/ModDate " , 10 )
FUNCTION_CALL	4186:13	4186:61	10	t2pWriteFile ( output , ( tdata_t ) "\n/ModDate " , 10 )
CALLEE	4186:13	4186:13	11	t2pWriteFile
LEAF_NODE	4186:13	4186:13	12	t2pWriteFile
LEAF_NODE	4186:25	4186:25	11	(
ARGUMENT	4186:26	4186:26	11	output
FIELD	4186:26	4186:26	12	output
LEAF_NODE	4186:26	4186:26	13	output
LEAF_NODE	4186:32	4186:32	11	,
ARGUMENT	4186:34	4186:44	11	( tdata_t ) "\n/ModDate "
LEAF_NODE	4186:34	4186:34	12	(
TYPE_NAME	4186:35	4186:35	12	tdata_t
LEAF_NODE	4186:35	4186:35	13	tdata_t
LEAF_NODE	4186:42	4186:42	12	)
FIELD	4186:44	4186:44	12	"\n/ModDate "
LEAF_NODE	4186:44	4186:44	13	"\n/ModDate "
LEAF_NODE	4186:57	4186:57	11	,
ARGUMENT	4186:59	4186:59	11	10
FIELD	4186:59	4186:59	12	10
LEAF_NODE	4186:59	4186:59	13	10
LEAF_NODE	4186:61	4186:61	11	)
LEAF_NODE	4186:62	4186:62	7	;
EXPR_STATEMENT	4187:2	4187:60	6	written += t2p_write_pdf_string ( t2p -> pdf_datetime , output ) ;
EXPR	4187:2	4187:2	7	written += t2p_write_pdf_string ( t2p -> pdf_datetime , output )
ASSIGN	4187:2	4187:13	8	written += t2p_write_pdf_string ( t2p -> pdf_datetime , output )
LVAL	4187:2	4187:2	9	written
FIELD	4187:2	4187:2	10	written
LEAF_NODE	4187:2	4187:2	11	written
ASSIGN_OP	4187:10	4187:10	9	+=
LEAF_NODE	4187:10	4187:10	10	+=
RVAL	4187:13	4187:13	9	t2p_write_pdf_string ( t2p -> pdf_datetime , output )
FUNCTION_CALL	4187:13	4187:59	10	t2p_write_pdf_string ( t2p -> pdf_datetime , output )
CALLEE	4187:13	4187:13	11	t2p_write_pdf_string
LEAF_NODE	4187:13	4187:13	12	t2p_write_pdf_string
LEAF_NODE	4187:33	4187:33	11	(
ARGUMENT	4187:34	4187:34	11	t2p -> pdf_datetime
FIELD	4187:34	4187:39	12	t2p -> pdf_datetime
LEAF_NODE	4187:34	4187:34	13	t2p
LEAF_NODE	4187:37	4187:37	13	->
LEAF_NODE	4187:39	4187:39	13	pdf_datetime
LEAF_NODE	4187:51	4187:51	11	,
ARGUMENT	4187:53	4187:53	11	output
FIELD	4187:53	4187:53	12	output
LEAF_NODE	4187:53	4187:53	13	output
LEAF_NODE	4187:59	4187:59	11	)
LEAF_NODE	4187:60	4187:60	7	;
LEAF_NODE	4188:1	4188:1	5	}
EXPR_STATEMENT	4189:1	4189:62	3	written += t2pWriteFile ( output , ( tdata_t ) "\n/Producer " , 11 ) ;
EXPR	4189:1	4189:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\n/Producer " , 11 )
ASSIGN	4189:1	4189:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\n/Producer " , 11 )
LVAL	4189:1	4189:1	6	written
FIELD	4189:1	4189:1	7	written
LEAF_NODE	4189:1	4189:1	8	written
ASSIGN_OP	4189:9	4189:9	6	+=
LEAF_NODE	4189:9	4189:9	7	+=
RVAL	4189:12	4189:12	6	t2pWriteFile ( output , ( tdata_t ) "\n/Producer " , 11 )
FUNCTION_CALL	4189:12	4189:61	7	t2pWriteFile ( output , ( tdata_t ) "\n/Producer " , 11 )
CALLEE	4189:12	4189:12	8	t2pWriteFile
LEAF_NODE	4189:12	4189:12	9	t2pWriteFile
LEAF_NODE	4189:24	4189:24	8	(
ARGUMENT	4189:25	4189:25	8	output
FIELD	4189:25	4189:25	9	output
LEAF_NODE	4189:25	4189:25	10	output
LEAF_NODE	4189:31	4189:31	8	,
ARGUMENT	4189:33	4189:43	8	( tdata_t ) "\n/Producer "
LEAF_NODE	4189:33	4189:33	9	(
TYPE_NAME	4189:34	4189:34	9	tdata_t
LEAF_NODE	4189:34	4189:34	10	tdata_t
LEAF_NODE	4189:41	4189:41	9	)
FIELD	4189:43	4189:43	9	"\n/Producer "
LEAF_NODE	4189:43	4189:43	10	"\n/Producer "
LEAF_NODE	4189:57	4189:57	8	,
ARGUMENT	4189:59	4189:59	8	11
FIELD	4189:59	4189:59	9	11
LEAF_NODE	4189:59	4189:59	10	11
LEAF_NODE	4189:61	4189:61	8	)
LEAF_NODE	4189:62	4189:62	4	;
EXPR_STATEMENT	4190:1	4190:77	3	snprintf ( buffer , sizeof ( buffer ) , "libtiff / tiff2pdf - %d" , TIFFLIB_VERSION ) ;
EXPR	4190:1	4190:1	4	snprintf ( buffer , sizeof ( buffer ) , "libtiff / tiff2pdf - %d" , TIFFLIB_VERSION )
FUNCTION_CALL	4190:1	4190:76	5	snprintf ( buffer , sizeof ( buffer ) , "libtiff / tiff2pdf - %d" , TIFFLIB_VERSION )
CALLEE	4190:1	4190:1	6	snprintf
LEAF_NODE	4190:1	4190:1	7	snprintf
LEAF_NODE	4190:9	4190:9	6	(
ARGUMENT	4190:10	4190:10	6	buffer
FIELD	4190:10	4190:10	7	buffer
LEAF_NODE	4190:10	4190:10	8	buffer
LEAF_NODE	4190:16	4190:16	6	,
ARGUMENT	4190:18	4190:18	6	sizeof ( buffer )
FUNCTION_CALL	4190:18	4190:31	7	sizeof ( buffer )
CALLEE	4190:18	4190:18	8	sizeof
LEAF_NODE	4190:18	4190:18	9	sizeof
LEAF_NODE	4190:24	4190:24	8	(
ARGUMENT	4190:25	4190:25	8	buffer
FIELD	4190:25	4190:25	9	buffer
LEAF_NODE	4190:25	4190:25	10	buffer
LEAF_NODE	4190:31	4190:31	8	)
LEAF_NODE	4190:32	4190:32	6	,
ARGUMENT	4190:34	4190:34	6	"libtiff / tiff2pdf - %d"
FIELD	4190:34	4190:34	7	"libtiff / tiff2pdf - %d"
LEAF_NODE	4190:34	4190:34	8	"libtiff / tiff2pdf - %d"
LEAF_NODE	4190:59	4190:59	6	,
ARGUMENT	4190:61	4190:61	6	TIFFLIB_VERSION
FIELD	4190:61	4190:61	7	TIFFLIB_VERSION
LEAF_NODE	4190:61	4190:61	8	TIFFLIB_VERSION
LEAF_NODE	4190:76	4190:76	6	)
LEAF_NODE	4190:77	4190:77	4	;
EXPR_STATEMENT	4191:1	4191:48	3	written += t2p_write_pdf_string ( buffer , output ) ;
EXPR	4191:1	4191:1	4	written += t2p_write_pdf_string ( buffer , output )
ASSIGN	4191:1	4191:12	5	written += t2p_write_pdf_string ( buffer , output )
LVAL	4191:1	4191:1	6	written
FIELD	4191:1	4191:1	7	written
LEAF_NODE	4191:1	4191:1	8	written
ASSIGN_OP	4191:9	4191:9	6	+=
LEAF_NODE	4191:9	4191:9	7	+=
RVAL	4191:12	4191:12	6	t2p_write_pdf_string ( buffer , output )
FUNCTION_CALL	4191:12	4191:47	7	t2p_write_pdf_string ( buffer , output )
CALLEE	4191:12	4191:12	8	t2p_write_pdf_string
LEAF_NODE	4191:12	4191:12	9	t2p_write_pdf_string
LEAF_NODE	4191:32	4191:32	8	(
ARGUMENT	4191:33	4191:33	8	buffer
FIELD	4191:33	4191:33	9	buffer
LEAF_NODE	4191:33	4191:33	10	buffer
LEAF_NODE	4191:39	4191:39	8	,
ARGUMENT	4191:41	4191:41	8	output
FIELD	4191:41	4191:41	9	output
LEAF_NODE	4191:41	4191:41	10	output
LEAF_NODE	4191:47	4191:47	8	)
LEAF_NODE	4191:48	4191:48	4	;
EXPR_STATEMENT	4192:1	4192:51	3	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4192:1	4192:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4192:1	4192:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4192:1	4192:1	6	written
FIELD	4192:1	4192:1	7	written
LEAF_NODE	4192:1	4192:1	8	written
ASSIGN_OP	4192:9	4192:9	6	+=
LEAF_NODE	4192:9	4192:9	7	+=
RVAL	4192:12	4192:12	6	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4192:12	4192:50	7	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4192:12	4192:12	8	t2pWriteFile
LEAF_NODE	4192:12	4192:12	9	t2pWriteFile
LEAF_NODE	4192:24	4192:24	8	(
ARGUMENT	4192:25	4192:25	8	output
FIELD	4192:25	4192:25	9	output
LEAF_NODE	4192:25	4192:25	10	output
LEAF_NODE	4192:31	4192:31	8	,
ARGUMENT	4192:33	4192:43	8	( tdata_t ) "\n"
LEAF_NODE	4192:33	4192:33	9	(
TYPE_NAME	4192:34	4192:34	9	tdata_t
LEAF_NODE	4192:34	4192:34	10	tdata_t
LEAF_NODE	4192:41	4192:41	9	)
FIELD	4192:43	4192:43	9	"\n"
LEAF_NODE	4192:43	4192:43	10	"\n"
LEAF_NODE	4192:47	4192:47	8	,
ARGUMENT	4192:49	4192:49	8	1
FIELD	4192:49	4192:49	9	1
LEAF_NODE	4192:49	4192:49	10	1
LEAF_NODE	4192:50	4192:50	8	)
LEAF_NODE	4192:51	4192:51	4	;
SELECTION	4193:1	4193:34	3	
KEYWORD	4193:1	4193:1	4	if
LEAF_NODE	4193:1	4193:1	5	if
LEAF_NODE	4193:4	4193:4	4	(
CONDITION	4193:5	4193:5	4	t2p -> pdf_creator [ 0 ] != '\0'
EXPR	4193:5	4193:28	5	t2p -> pdf_creator [ 0 ] != '\0'
FIELD	4193:5	4193:23	6	t2p -> pdf_creator [ 0 ]
LEAF_NODE	4193:5	4193:5	7	t2p
LEAF_NODE	4193:8	4193:8	7	->
LEAF_NODE	4193:10	4193:10	7	pdf_creator
LEAF_NODE	4193:21	4193:21	7	[
EXPR	4193:22	4193:22	7	0
FIELD	4193:22	4193:22	8	0
LEAF_NODE	4193:22	4193:22	9	0
LEAF_NODE	4193:23	4193:23	7	]
EQ_OPERATOR	4193:25	4193:25	6	!=
LEAF_NODE	4193:25	4193:25	7	!=
FIELD	4193:28	4193:28	6	'\0'
LEAF_NODE	4193:28	4193:28	7	'\0'
LEAF_NODE	4193:32	4193:32	4	)
STATEMENTS	4193:34	4197:1	4	
LEAF_NODE	4193:34	4193:34	5	{
STATEMENTS	4194:2	4196:2	5	
EXPR_STATEMENT	4194:2	4194:59	6	written += t2pWriteFile ( output , ( tdata_t ) "/Creator " , 9 ) ;
EXPR	4194:2	4194:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/Creator " , 9 )
ASSIGN	4194:2	4194:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/Creator " , 9 )
LVAL	4194:2	4194:2	9	written
FIELD	4194:2	4194:2	10	written
LEAF_NODE	4194:2	4194:2	11	written
ASSIGN_OP	4194:10	4194:10	9	+=
LEAF_NODE	4194:10	4194:10	10	+=
RVAL	4194:13	4194:13	9	t2pWriteFile ( output , ( tdata_t ) "/Creator " , 9 )
FUNCTION_CALL	4194:13	4194:58	10	t2pWriteFile ( output , ( tdata_t ) "/Creator " , 9 )
CALLEE	4194:13	4194:13	11	t2pWriteFile
LEAF_NODE	4194:13	4194:13	12	t2pWriteFile
LEAF_NODE	4194:25	4194:25	11	(
ARGUMENT	4194:26	4194:26	11	output
FIELD	4194:26	4194:26	12	output
LEAF_NODE	4194:26	4194:26	13	output
LEAF_NODE	4194:32	4194:32	11	,
ARGUMENT	4194:34	4194:44	11	( tdata_t ) "/Creator "
LEAF_NODE	4194:34	4194:34	12	(
TYPE_NAME	4194:35	4194:35	12	tdata_t
LEAF_NODE	4194:35	4194:35	13	tdata_t
LEAF_NODE	4194:42	4194:42	12	)
FIELD	4194:44	4194:44	12	"/Creator "
LEAF_NODE	4194:44	4194:44	13	"/Creator "
LEAF_NODE	4194:55	4194:55	11	,
ARGUMENT	4194:57	4194:57	11	9
FIELD	4194:57	4194:57	12	9
LEAF_NODE	4194:57	4194:57	13	9
LEAF_NODE	4194:58	4194:58	11	)
LEAF_NODE	4194:59	4194:59	7	;
EXPR_STATEMENT	4195:2	4195:59	6	written += t2p_write_pdf_string ( t2p -> pdf_creator , output ) ;
EXPR	4195:2	4195:2	7	written += t2p_write_pdf_string ( t2p -> pdf_creator , output )
ASSIGN	4195:2	4195:13	8	written += t2p_write_pdf_string ( t2p -> pdf_creator , output )
LVAL	4195:2	4195:2	9	written
FIELD	4195:2	4195:2	10	written
LEAF_NODE	4195:2	4195:2	11	written
ASSIGN_OP	4195:10	4195:10	9	+=
LEAF_NODE	4195:10	4195:10	10	+=
RVAL	4195:13	4195:13	9	t2p_write_pdf_string ( t2p -> pdf_creator , output )
FUNCTION_CALL	4195:13	4195:58	10	t2p_write_pdf_string ( t2p -> pdf_creator , output )
CALLEE	4195:13	4195:13	11	t2p_write_pdf_string
LEAF_NODE	4195:13	4195:13	12	t2p_write_pdf_string
LEAF_NODE	4195:33	4195:33	11	(
ARGUMENT	4195:34	4195:34	11	t2p -> pdf_creator
FIELD	4195:34	4195:39	12	t2p -> pdf_creator
LEAF_NODE	4195:34	4195:34	13	t2p
LEAF_NODE	4195:37	4195:37	13	->
LEAF_NODE	4195:39	4195:39	13	pdf_creator
LEAF_NODE	4195:50	4195:50	11	,
ARGUMENT	4195:52	4195:52	11	output
FIELD	4195:52	4195:52	12	output
LEAF_NODE	4195:52	4195:52	13	output
LEAF_NODE	4195:58	4195:58	11	)
LEAF_NODE	4195:59	4195:59	7	;
EXPR_STATEMENT	4196:2	4196:52	6	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4196:2	4196:2	7	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4196:2	4196:13	8	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4196:2	4196:2	9	written
FIELD	4196:2	4196:2	10	written
LEAF_NODE	4196:2	4196:2	11	written
ASSIGN_OP	4196:10	4196:10	9	+=
LEAF_NODE	4196:10	4196:10	10	+=
RVAL	4196:13	4196:13	9	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4196:13	4196:51	10	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4196:13	4196:13	11	t2pWriteFile
LEAF_NODE	4196:13	4196:13	12	t2pWriteFile
LEAF_NODE	4196:25	4196:25	11	(
ARGUMENT	4196:26	4196:26	11	output
FIELD	4196:26	4196:26	12	output
LEAF_NODE	4196:26	4196:26	13	output
LEAF_NODE	4196:32	4196:32	11	,
ARGUMENT	4196:34	4196:44	11	( tdata_t ) "\n"
LEAF_NODE	4196:34	4196:34	12	(
TYPE_NAME	4196:35	4196:35	12	tdata_t
LEAF_NODE	4196:35	4196:35	13	tdata_t
LEAF_NODE	4196:42	4196:42	12	)
FIELD	4196:44	4196:44	12	"\n"
LEAF_NODE	4196:44	4196:44	13	"\n"
LEAF_NODE	4196:48	4196:48	11	,
ARGUMENT	4196:50	4196:50	11	1
FIELD	4196:50	4196:50	12	1
LEAF_NODE	4196:50	4196:50	13	1
LEAF_NODE	4196:51	4196:51	11	)
LEAF_NODE	4196:52	4196:52	7	;
LEAF_NODE	4197:1	4197:1	5	}
SELECTION	4197:3	4197:8	3	
KEYWORD	4197:3	4197:3	4	else
LEAF_NODE	4197:3	4197:3	5	else
STATEMENTS	4197:8	4205:1	4	
LEAF_NODE	4197:8	4197:8	5	{
STATEMENTS	4198:2	4198:2	5	
SELECTION	4198:2	4198:65	6	
KEYWORD	4198:2	4198:2	7	if
LEAF_NODE	4198:2	4198:2	8	if
LEAF_NODE	4198:5	4198:5	7	(
CONDITION	4198:6	4198:6	7	TIFFGetField ( input , TIFFTAG_SOFTWARE , & info ) != 0 && info
EXPR	4198:6	4198:6	8	TIFFGetField ( input , TIFFTAG_SOFTWARE , & info ) != 0 && info
AND	4198:6	4198:59	9	TIFFGetField ( input , TIFFTAG_SOFTWARE , & info ) != 0 && info
EXPR	4198:6	4198:54	10	TIFFGetField ( input , TIFFTAG_SOFTWARE , & info ) != 0
FUNCTION_CALL	4198:6	4198:49	11	TIFFGetField ( input , TIFFTAG_SOFTWARE , & info )
CALLEE	4198:6	4198:6	12	TIFFGetField
LEAF_NODE	4198:6	4198:6	13	TIFFGetField
LEAF_NODE	4198:18	4198:18	12	(
ARGUMENT	4198:19	4198:19	12	input
FIELD	4198:19	4198:19	13	input
LEAF_NODE	4198:19	4198:19	14	input
LEAF_NODE	4198:24	4198:24	12	,
ARGUMENT	4198:26	4198:26	12	TIFFTAG_SOFTWARE
FIELD	4198:26	4198:26	13	TIFFTAG_SOFTWARE
LEAF_NODE	4198:26	4198:26	14	TIFFTAG_SOFTWARE
LEAF_NODE	4198:42	4198:42	12	,
ARGUMENT	4198:44	4198:44	12	& info
UNARY_EXPR	4198:44	4198:45	13	& info
UNARY_OPERATOR	4198:44	4198:44	14	&
LEAF_NODE	4198:44	4198:44	15	&
FIELD	4198:45	4198:45	14	info
LEAF_NODE	4198:45	4198:45	15	info
LEAF_NODE	4198:49	4198:49	12	)
EQ_OPERATOR	4198:51	4198:51	11	!=
LEAF_NODE	4198:51	4198:51	12	!=
FIELD	4198:54	4198:54	11	0
LEAF_NODE	4198:54	4198:54	12	0
LEAF_NODE	4198:56	4198:56	10	&&
EXPR	4198:59	4198:59	10	info
FIELD	4198:59	4198:59	11	info
LEAF_NODE	4198:59	4198:59	12	info
LEAF_NODE	4198:63	4198:63	7	)
STATEMENTS	4198:65	4204:2	7	
LEAF_NODE	4198:65	4198:65	8	{
STATEMENTS	4199:3	4203:3	8	
SELECTION	4199:3	4200:4	9	
KEYWORD	4199:3	4199:3	10	if
LEAF_NODE	4199:3	4199:3	11	if
LEAF_NODE	4199:5	4199:5	10	(
CONDITION	4199:6	4199:6	10	strlen ( info ) >= sizeof ( t2p -> pdf_creator )
EXPR	4199:6	4199:22	11	strlen ( info ) >= sizeof ( t2p -> pdf_creator )
FUNCTION_CALL	4199:6	4199:17	12	strlen ( info )
CALLEE	4199:6	4199:6	13	strlen
LEAF_NODE	4199:6	4199:6	14	strlen
LEAF_NODE	4199:12	4199:12	13	(
ARGUMENT	4199:13	4199:13	13	info
FIELD	4199:13	4199:13	14	info
LEAF_NODE	4199:13	4199:13	15	info
LEAF_NODE	4199:17	4199:17	13	)
REL_OPERATOR	4199:19	4199:19	12	>=
LEAF_NODE	4199:19	4199:19	13	>=
FUNCTION_CALL	4199:22	4199:45	12	sizeof ( t2p -> pdf_creator )
CALLEE	4199:22	4199:22	13	sizeof
LEAF_NODE	4199:22	4199:22	14	sizeof
LEAF_NODE	4199:28	4199:28	13	(
ARGUMENT	4199:29	4199:29	13	t2p -> pdf_creator
FIELD	4199:29	4199:34	14	t2p -> pdf_creator
LEAF_NODE	4199:29	4199:29	15	t2p
LEAF_NODE	4199:32	4199:32	15	->
LEAF_NODE	4199:34	4199:34	15	pdf_creator
LEAF_NODE	4199:45	4199:45	13	)
LEAF_NODE	4199:46	4199:46	10	)
STATEMENTS	4200:4	4200:4	10	
EXPR_STATEMENT	4200:4	4200:45	11	info [ sizeof ( t2p -> pdf_creator ) - 1 ] = '\0' ;
EXPR	4200:4	4200:4	12	info [ sizeof ( t2p -> pdf_creator ) - 1 ] = '\0'
ASSIGN	4200:4	4200:41	13	info [ sizeof ( t2p -> pdf_creator ) - 1 ] = '\0'
LVAL	4200:4	4200:4	14	info [ sizeof ( t2p -> pdf_creator ) - 1 ]
FIELD	4200:4	4200:37	15	info [ sizeof ( t2p -> pdf_creator ) - 1 ]
LEAF_NODE	4200:4	4200:4	16	info
LEAF_NODE	4200:8	4200:8	16	[
EXPR	4200:9	4200:36	16	sizeof ( t2p -> pdf_creator ) - 1
FUNCTION_CALL	4200:9	4200:32	17	sizeof ( t2p -> pdf_creator )
CALLEE	4200:9	4200:9	18	sizeof
LEAF_NODE	4200:9	4200:9	19	sizeof
LEAF_NODE	4200:15	4200:15	18	(
ARGUMENT	4200:16	4200:16	18	t2p -> pdf_creator
FIELD	4200:16	4200:21	19	t2p -> pdf_creator
LEAF_NODE	4200:16	4200:16	20	t2p
LEAF_NODE	4200:19	4200:19	20	->
LEAF_NODE	4200:21	4200:21	20	pdf_creator
LEAF_NODE	4200:32	4200:32	18	)
LEAF_NODE	4200:34	4200:34	17	-
FIELD	4200:36	4200:36	17	1
LEAF_NODE	4200:36	4200:36	18	1
LEAF_NODE	4200:37	4200:37	16	]
ASSIGN_OP	4200:39	4200:39	14	=
LEAF_NODE	4200:39	4200:39	15	=
RVAL	4200:41	4200:41	14	'\0'
FIELD	4200:41	4200:41	15	'\0'
LEAF_NODE	4200:41	4200:41	16	'\0'
LEAF_NODE	4200:45	4200:45	12	;
EXPR_STATEMENT	4201:3	4201:60	9	written += t2pWriteFile ( output , ( tdata_t ) "/Creator " , 9 ) ;
EXPR	4201:3	4201:3	10	written += t2pWriteFile ( output , ( tdata_t ) "/Creator " , 9 )
ASSIGN	4201:3	4201:14	11	written += t2pWriteFile ( output , ( tdata_t ) "/Creator " , 9 )
LVAL	4201:3	4201:3	12	written
FIELD	4201:3	4201:3	13	written
LEAF_NODE	4201:3	4201:3	14	written
ASSIGN_OP	4201:11	4201:11	12	+=
LEAF_NODE	4201:11	4201:11	13	+=
RVAL	4201:14	4201:14	12	t2pWriteFile ( output , ( tdata_t ) "/Creator " , 9 )
FUNCTION_CALL	4201:14	4201:59	13	t2pWriteFile ( output , ( tdata_t ) "/Creator " , 9 )
CALLEE	4201:14	4201:14	14	t2pWriteFile
LEAF_NODE	4201:14	4201:14	15	t2pWriteFile
LEAF_NODE	4201:26	4201:26	14	(
ARGUMENT	4201:27	4201:27	14	output
FIELD	4201:27	4201:27	15	output
LEAF_NODE	4201:27	4201:27	16	output
LEAF_NODE	4201:33	4201:33	14	,
ARGUMENT	4201:35	4201:45	14	( tdata_t ) "/Creator "
LEAF_NODE	4201:35	4201:35	15	(
TYPE_NAME	4201:36	4201:36	15	tdata_t
LEAF_NODE	4201:36	4201:36	16	tdata_t
LEAF_NODE	4201:43	4201:43	15	)
FIELD	4201:45	4201:45	15	"/Creator "
LEAF_NODE	4201:45	4201:45	16	"/Creator "
LEAF_NODE	4201:56	4201:56	14	,
ARGUMENT	4201:58	4201:58	14	9
FIELD	4201:58	4201:58	15	9
LEAF_NODE	4201:58	4201:58	16	9
LEAF_NODE	4201:59	4201:59	14	)
LEAF_NODE	4201:60	4201:60	10	;
EXPR_STATEMENT	4202:3	4202:48	9	written += t2p_write_pdf_string ( info , output ) ;
EXPR	4202:3	4202:3	10	written += t2p_write_pdf_string ( info , output )
ASSIGN	4202:3	4202:14	11	written += t2p_write_pdf_string ( info , output )
LVAL	4202:3	4202:3	12	written
FIELD	4202:3	4202:3	13	written
LEAF_NODE	4202:3	4202:3	14	written
ASSIGN_OP	4202:11	4202:11	12	+=
LEAF_NODE	4202:11	4202:11	13	+=
RVAL	4202:14	4202:14	12	t2p_write_pdf_string ( info , output )
FUNCTION_CALL	4202:14	4202:47	13	t2p_write_pdf_string ( info , output )
CALLEE	4202:14	4202:14	14	t2p_write_pdf_string
LEAF_NODE	4202:14	4202:14	15	t2p_write_pdf_string
LEAF_NODE	4202:34	4202:34	14	(
ARGUMENT	4202:35	4202:35	14	info
FIELD	4202:35	4202:35	15	info
LEAF_NODE	4202:35	4202:35	16	info
LEAF_NODE	4202:39	4202:39	14	,
ARGUMENT	4202:41	4202:41	14	output
FIELD	4202:41	4202:41	15	output
LEAF_NODE	4202:41	4202:41	16	output
LEAF_NODE	4202:47	4202:47	14	)
LEAF_NODE	4202:48	4202:48	10	;
EXPR_STATEMENT	4203:3	4203:53	9	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4203:3	4203:3	10	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4203:3	4203:14	11	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4203:3	4203:3	12	written
FIELD	4203:3	4203:3	13	written
LEAF_NODE	4203:3	4203:3	14	written
ASSIGN_OP	4203:11	4203:11	12	+=
LEAF_NODE	4203:11	4203:11	13	+=
RVAL	4203:14	4203:14	12	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4203:14	4203:52	13	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4203:14	4203:14	14	t2pWriteFile
LEAF_NODE	4203:14	4203:14	15	t2pWriteFile
LEAF_NODE	4203:26	4203:26	14	(
ARGUMENT	4203:27	4203:27	14	output
FIELD	4203:27	4203:27	15	output
LEAF_NODE	4203:27	4203:27	16	output
LEAF_NODE	4203:33	4203:33	14	,
ARGUMENT	4203:35	4203:45	14	( tdata_t ) "\n"
LEAF_NODE	4203:35	4203:35	15	(
TYPE_NAME	4203:36	4203:36	15	tdata_t
LEAF_NODE	4203:36	4203:36	16	tdata_t
LEAF_NODE	4203:43	4203:43	15	)
FIELD	4203:45	4203:45	15	"\n"
LEAF_NODE	4203:45	4203:45	16	"\n"
LEAF_NODE	4203:49	4203:49	14	,
ARGUMENT	4203:51	4203:51	14	1
FIELD	4203:51	4203:51	15	1
LEAF_NODE	4203:51	4203:51	16	1
LEAF_NODE	4203:52	4203:52	14	)
LEAF_NODE	4203:53	4203:53	10	;
LEAF_NODE	4204:2	4204:2	8	}
LEAF_NODE	4205:1	4205:1	5	}
SELECTION	4206:1	4206:33	3	
KEYWORD	4206:1	4206:1	4	if
LEAF_NODE	4206:1	4206:1	5	if
LEAF_NODE	4206:4	4206:4	4	(
CONDITION	4206:5	4206:5	4	t2p -> pdf_author [ 0 ] != '\0'
EXPR	4206:5	4206:27	5	t2p -> pdf_author [ 0 ] != '\0'
FIELD	4206:5	4206:22	6	t2p -> pdf_author [ 0 ]
LEAF_NODE	4206:5	4206:5	7	t2p
LEAF_NODE	4206:8	4206:8	7	->
LEAF_NODE	4206:10	4206:10	7	pdf_author
LEAF_NODE	4206:20	4206:20	7	[
EXPR	4206:21	4206:21	7	0
FIELD	4206:21	4206:21	8	0
LEAF_NODE	4206:21	4206:21	9	0
LEAF_NODE	4206:22	4206:22	7	]
EQ_OPERATOR	4206:24	4206:24	6	!=
LEAF_NODE	4206:24	4206:24	7	!=
FIELD	4206:27	4206:27	6	'\0'
LEAF_NODE	4206:27	4206:27	7	'\0'
LEAF_NODE	4206:31	4206:31	4	)
STATEMENTS	4206:33	4210:1	4	
LEAF_NODE	4206:33	4206:33	5	{
STATEMENTS	4207:2	4209:2	5	
EXPR_STATEMENT	4207:2	4207:58	6	written += t2pWriteFile ( output , ( tdata_t ) "/Author " , 8 ) ;
EXPR	4207:2	4207:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/Author " , 8 )
ASSIGN	4207:2	4207:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/Author " , 8 )
LVAL	4207:2	4207:2	9	written
FIELD	4207:2	4207:2	10	written
LEAF_NODE	4207:2	4207:2	11	written
ASSIGN_OP	4207:10	4207:10	9	+=
LEAF_NODE	4207:10	4207:10	10	+=
RVAL	4207:13	4207:13	9	t2pWriteFile ( output , ( tdata_t ) "/Author " , 8 )
FUNCTION_CALL	4207:13	4207:57	10	t2pWriteFile ( output , ( tdata_t ) "/Author " , 8 )
CALLEE	4207:13	4207:13	11	t2pWriteFile
LEAF_NODE	4207:13	4207:13	12	t2pWriteFile
LEAF_NODE	4207:25	4207:25	11	(
ARGUMENT	4207:26	4207:26	11	output
FIELD	4207:26	4207:26	12	output
LEAF_NODE	4207:26	4207:26	13	output
LEAF_NODE	4207:32	4207:32	11	,
ARGUMENT	4207:34	4207:44	11	( tdata_t ) "/Author "
LEAF_NODE	4207:34	4207:34	12	(
TYPE_NAME	4207:35	4207:35	12	tdata_t
LEAF_NODE	4207:35	4207:35	13	tdata_t
LEAF_NODE	4207:42	4207:42	12	)
FIELD	4207:44	4207:44	12	"/Author "
LEAF_NODE	4207:44	4207:44	13	"/Author "
LEAF_NODE	4207:54	4207:54	11	,
ARGUMENT	4207:56	4207:56	11	8
FIELD	4207:56	4207:56	12	8
LEAF_NODE	4207:56	4207:56	13	8
LEAF_NODE	4207:57	4207:57	11	)
LEAF_NODE	4207:58	4207:58	7	;
EXPR_STATEMENT	4208:2	4208:58	6	written += t2p_write_pdf_string ( t2p -> pdf_author , output ) ;
EXPR	4208:2	4208:2	7	written += t2p_write_pdf_string ( t2p -> pdf_author , output )
ASSIGN	4208:2	4208:13	8	written += t2p_write_pdf_string ( t2p -> pdf_author , output )
LVAL	4208:2	4208:2	9	written
FIELD	4208:2	4208:2	10	written
LEAF_NODE	4208:2	4208:2	11	written
ASSIGN_OP	4208:10	4208:10	9	+=
LEAF_NODE	4208:10	4208:10	10	+=
RVAL	4208:13	4208:13	9	t2p_write_pdf_string ( t2p -> pdf_author , output )
FUNCTION_CALL	4208:13	4208:57	10	t2p_write_pdf_string ( t2p -> pdf_author , output )
CALLEE	4208:13	4208:13	11	t2p_write_pdf_string
LEAF_NODE	4208:13	4208:13	12	t2p_write_pdf_string
LEAF_NODE	4208:33	4208:33	11	(
ARGUMENT	4208:34	4208:34	11	t2p -> pdf_author
FIELD	4208:34	4208:39	12	t2p -> pdf_author
LEAF_NODE	4208:34	4208:34	13	t2p
LEAF_NODE	4208:37	4208:37	13	->
LEAF_NODE	4208:39	4208:39	13	pdf_author
LEAF_NODE	4208:49	4208:49	11	,
ARGUMENT	4208:51	4208:51	11	output
FIELD	4208:51	4208:51	12	output
LEAF_NODE	4208:51	4208:51	13	output
LEAF_NODE	4208:57	4208:57	11	)
LEAF_NODE	4208:58	4208:58	7	;
EXPR_STATEMENT	4209:2	4209:52	6	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4209:2	4209:2	7	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4209:2	4209:13	8	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4209:2	4209:2	9	written
FIELD	4209:2	4209:2	10	written
LEAF_NODE	4209:2	4209:2	11	written
ASSIGN_OP	4209:10	4209:10	9	+=
LEAF_NODE	4209:10	4209:10	10	+=
RVAL	4209:13	4209:13	9	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4209:13	4209:51	10	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4209:13	4209:13	11	t2pWriteFile
LEAF_NODE	4209:13	4209:13	12	t2pWriteFile
LEAF_NODE	4209:25	4209:25	11	(
ARGUMENT	4209:26	4209:26	11	output
FIELD	4209:26	4209:26	12	output
LEAF_NODE	4209:26	4209:26	13	output
LEAF_NODE	4209:32	4209:32	11	,
ARGUMENT	4209:34	4209:44	11	( tdata_t ) "\n"
LEAF_NODE	4209:34	4209:34	12	(
TYPE_NAME	4209:35	4209:35	12	tdata_t
LEAF_NODE	4209:35	4209:35	13	tdata_t
LEAF_NODE	4209:42	4209:42	12	)
FIELD	4209:44	4209:44	12	"\n"
LEAF_NODE	4209:44	4209:44	13	"\n"
LEAF_NODE	4209:48	4209:48	11	,
ARGUMENT	4209:50	4209:50	11	1
FIELD	4209:50	4209:50	12	1
LEAF_NODE	4209:50	4209:50	13	1
LEAF_NODE	4209:51	4209:51	11	)
LEAF_NODE	4209:52	4209:52	7	;
LEAF_NODE	4210:1	4210:1	5	}
SELECTION	4210:3	4210:8	3	
KEYWORD	4210:3	4210:3	4	else
LEAF_NODE	4210:3	4210:3	5	else
STATEMENTS	4210:8	4220:1	4	
LEAF_NODE	4210:8	4210:8	5	{
STATEMENTS	4211:2	4211:2	5	
SELECTION	4211:2	4213:15	6	
KEYWORD	4211:2	4211:2	7	if
LEAF_NODE	4211:2	4211:2	8	if
LEAF_NODE	4211:5	4211:5	7	(
CONDITION	4211:6	4211:6	7	( TIFFGetField ( input , TIFFTAG_ARTIST , & info ) != 0 || TIFFGetField ( input , TIFFTAG_COPYRIGHT , & info ) != 0 ) && info
EXPR	4211:6	4211:6	8	( TIFFGetField ( input , TIFFTAG_ARTIST , & info ) != 0 || TIFFGetField ( input , TIFFTAG_COPYRIGHT , & info ) != 0 ) && info
AND	4211:6	4213:9	9	( TIFFGetField ( input , TIFFTAG_ARTIST , & info ) != 0 || TIFFGetField ( input , TIFFTAG_COPYRIGHT , & info ) != 0 ) && info
EXPR	4211:6	4212:60	10	( TIFFGetField ( input , TIFFTAG_ARTIST , & info ) != 0 || TIFFGetField ( input , TIFFTAG_COPYRIGHT , & info ) != 0 )
LEAF_NODE	4211:6	4211:6	11	(
OR	4211:7	4212:10	11	TIFFGetField ( input , TIFFTAG_ARTIST , & info ) != 0 || TIFFGetField ( input , TIFFTAG_COPYRIGHT , & info ) != 0
EXPR	4211:7	4211:53	12	TIFFGetField ( input , TIFFTAG_ARTIST , & info ) != 0
FUNCTION_CALL	4211:7	4211:48	13	TIFFGetField ( input , TIFFTAG_ARTIST , & info )
CALLEE	4211:7	4211:7	14	TIFFGetField
LEAF_NODE	4211:7	4211:7	15	TIFFGetField
LEAF_NODE	4211:19	4211:19	14	(
ARGUMENT	4211:20	4211:20	14	input
FIELD	4211:20	4211:20	15	input
LEAF_NODE	4211:20	4211:20	16	input
LEAF_NODE	4211:25	4211:25	14	,
ARGUMENT	4211:27	4211:27	14	TIFFTAG_ARTIST
FIELD	4211:27	4211:27	15	TIFFTAG_ARTIST
LEAF_NODE	4211:27	4211:27	16	TIFFTAG_ARTIST
LEAF_NODE	4211:41	4211:41	14	,
ARGUMENT	4211:43	4211:43	14	& info
UNARY_EXPR	4211:43	4211:44	15	& info
UNARY_OPERATOR	4211:43	4211:43	16	&
LEAF_NODE	4211:43	4211:43	17	&
FIELD	4211:44	4211:44	16	info
LEAF_NODE	4211:44	4211:44	17	info
LEAF_NODE	4211:48	4211:48	14	)
EQ_OPERATOR	4211:50	4211:50	13	!=
LEAF_NODE	4211:50	4211:50	14	!=
FIELD	4211:53	4211:53	13	0
LEAF_NODE	4211:53	4211:53	14	0
LEAF_NODE	4212:7	4212:7	12	||
EXPR	4212:10	4212:59	12	TIFFGetField ( input , TIFFTAG_COPYRIGHT , & info ) != 0
FUNCTION_CALL	4212:10	4212:54	13	TIFFGetField ( input , TIFFTAG_COPYRIGHT , & info )
CALLEE	4212:10	4212:10	14	TIFFGetField
LEAF_NODE	4212:10	4212:10	15	TIFFGetField
LEAF_NODE	4212:22	4212:22	14	(
ARGUMENT	4212:23	4212:23	14	input
FIELD	4212:23	4212:23	15	input
LEAF_NODE	4212:23	4212:23	16	input
LEAF_NODE	4212:28	4212:28	14	,
ARGUMENT	4212:30	4212:30	14	TIFFTAG_COPYRIGHT
FIELD	4212:30	4212:30	15	TIFFTAG_COPYRIGHT
LEAF_NODE	4212:30	4212:30	16	TIFFTAG_COPYRIGHT
LEAF_NODE	4212:47	4212:47	14	,
ARGUMENT	4212:49	4212:49	14	& info
UNARY_EXPR	4212:49	4212:50	15	& info
UNARY_OPERATOR	4212:49	4212:49	16	&
LEAF_NODE	4212:49	4212:49	17	&
FIELD	4212:50	4212:50	16	info
LEAF_NODE	4212:50	4212:50	17	info
LEAF_NODE	4212:54	4212:54	14	)
EQ_OPERATOR	4212:56	4212:56	13	!=
LEAF_NODE	4212:56	4212:56	14	!=
FIELD	4212:59	4212:59	13	0
LEAF_NODE	4212:59	4212:59	14	0
LEAF_NODE	4212:60	4212:60	11	)
LEAF_NODE	4213:6	4213:6	10	&&
EXPR	4213:9	4213:9	10	info
FIELD	4213:9	4213:9	11	info
LEAF_NODE	4213:9	4213:9	12	info
LEAF_NODE	4213:13	4213:13	7	)
STATEMENTS	4213:15	4219:2	7	
LEAF_NODE	4213:15	4213:15	8	{
STATEMENTS	4214:3	4218:3	8	
SELECTION	4214:3	4215:4	9	
KEYWORD	4214:3	4214:3	10	if
LEAF_NODE	4214:3	4214:3	11	if
LEAF_NODE	4214:6	4214:6	10	(
CONDITION	4214:7	4214:7	10	strlen ( info ) >= sizeof ( t2p -> pdf_author )
EXPR	4214:7	4214:23	11	strlen ( info ) >= sizeof ( t2p -> pdf_author )
FUNCTION_CALL	4214:7	4214:18	12	strlen ( info )
CALLEE	4214:7	4214:7	13	strlen
LEAF_NODE	4214:7	4214:7	14	strlen
LEAF_NODE	4214:13	4214:13	13	(
ARGUMENT	4214:14	4214:14	13	info
FIELD	4214:14	4214:14	14	info
LEAF_NODE	4214:14	4214:14	15	info
LEAF_NODE	4214:18	4214:18	13	)
REL_OPERATOR	4214:20	4214:20	12	>=
LEAF_NODE	4214:20	4214:20	13	>=
FUNCTION_CALL	4214:23	4214:45	12	sizeof ( t2p -> pdf_author )
CALLEE	4214:23	4214:23	13	sizeof
LEAF_NODE	4214:23	4214:23	14	sizeof
LEAF_NODE	4214:29	4214:29	13	(
ARGUMENT	4214:30	4214:30	13	t2p -> pdf_author
FIELD	4214:30	4214:35	14	t2p -> pdf_author
LEAF_NODE	4214:30	4214:30	15	t2p
LEAF_NODE	4214:33	4214:33	15	->
LEAF_NODE	4214:35	4214:35	15	pdf_author
LEAF_NODE	4214:45	4214:45	13	)
LEAF_NODE	4214:46	4214:46	10	)
STATEMENTS	4215:4	4215:4	10	
EXPR_STATEMENT	4215:4	4215:44	11	info [ sizeof ( t2p -> pdf_author ) - 1 ] = '\0' ;
EXPR	4215:4	4215:4	12	info [ sizeof ( t2p -> pdf_author ) - 1 ] = '\0'
ASSIGN	4215:4	4215:40	13	info [ sizeof ( t2p -> pdf_author ) - 1 ] = '\0'
LVAL	4215:4	4215:4	14	info [ sizeof ( t2p -> pdf_author ) - 1 ]
FIELD	4215:4	4215:36	15	info [ sizeof ( t2p -> pdf_author ) - 1 ]
LEAF_NODE	4215:4	4215:4	16	info
LEAF_NODE	4215:8	4215:8	16	[
EXPR	4215:9	4215:35	16	sizeof ( t2p -> pdf_author ) - 1
FUNCTION_CALL	4215:9	4215:31	17	sizeof ( t2p -> pdf_author )
CALLEE	4215:9	4215:9	18	sizeof
LEAF_NODE	4215:9	4215:9	19	sizeof
LEAF_NODE	4215:15	4215:15	18	(
ARGUMENT	4215:16	4215:16	18	t2p -> pdf_author
FIELD	4215:16	4215:21	19	t2p -> pdf_author
LEAF_NODE	4215:16	4215:16	20	t2p
LEAF_NODE	4215:19	4215:19	20	->
LEAF_NODE	4215:21	4215:21	20	pdf_author
LEAF_NODE	4215:31	4215:31	18	)
LEAF_NODE	4215:33	4215:33	17	-
FIELD	4215:35	4215:35	17	1
LEAF_NODE	4215:35	4215:35	18	1
LEAF_NODE	4215:36	4215:36	16	]
ASSIGN_OP	4215:38	4215:38	14	=
LEAF_NODE	4215:38	4215:38	15	=
RVAL	4215:40	4215:40	14	'\0'
FIELD	4215:40	4215:40	15	'\0'
LEAF_NODE	4215:40	4215:40	16	'\0'
LEAF_NODE	4215:44	4215:44	12	;
EXPR_STATEMENT	4216:3	4216:59	9	written += t2pWriteFile ( output , ( tdata_t ) "/Author " , 8 ) ;
EXPR	4216:3	4216:3	10	written += t2pWriteFile ( output , ( tdata_t ) "/Author " , 8 )
ASSIGN	4216:3	4216:14	11	written += t2pWriteFile ( output , ( tdata_t ) "/Author " , 8 )
LVAL	4216:3	4216:3	12	written
FIELD	4216:3	4216:3	13	written
LEAF_NODE	4216:3	4216:3	14	written
ASSIGN_OP	4216:11	4216:11	12	+=
LEAF_NODE	4216:11	4216:11	13	+=
RVAL	4216:14	4216:14	12	t2pWriteFile ( output , ( tdata_t ) "/Author " , 8 )
FUNCTION_CALL	4216:14	4216:58	13	t2pWriteFile ( output , ( tdata_t ) "/Author " , 8 )
CALLEE	4216:14	4216:14	14	t2pWriteFile
LEAF_NODE	4216:14	4216:14	15	t2pWriteFile
LEAF_NODE	4216:26	4216:26	14	(
ARGUMENT	4216:27	4216:27	14	output
FIELD	4216:27	4216:27	15	output
LEAF_NODE	4216:27	4216:27	16	output
LEAF_NODE	4216:33	4216:33	14	,
ARGUMENT	4216:35	4216:45	14	( tdata_t ) "/Author "
LEAF_NODE	4216:35	4216:35	15	(
TYPE_NAME	4216:36	4216:36	15	tdata_t
LEAF_NODE	4216:36	4216:36	16	tdata_t
LEAF_NODE	4216:43	4216:43	15	)
FIELD	4216:45	4216:45	15	"/Author "
LEAF_NODE	4216:45	4216:45	16	"/Author "
LEAF_NODE	4216:55	4216:55	14	,
ARGUMENT	4216:57	4216:57	14	8
FIELD	4216:57	4216:57	15	8
LEAF_NODE	4216:57	4216:57	16	8
LEAF_NODE	4216:58	4216:58	14	)
LEAF_NODE	4216:59	4216:59	10	;
EXPR_STATEMENT	4217:3	4217:48	9	written += t2p_write_pdf_string ( info , output ) ;
EXPR	4217:3	4217:3	10	written += t2p_write_pdf_string ( info , output )
ASSIGN	4217:3	4217:14	11	written += t2p_write_pdf_string ( info , output )
LVAL	4217:3	4217:3	12	written
FIELD	4217:3	4217:3	13	written
LEAF_NODE	4217:3	4217:3	14	written
ASSIGN_OP	4217:11	4217:11	12	+=
LEAF_NODE	4217:11	4217:11	13	+=
RVAL	4217:14	4217:14	12	t2p_write_pdf_string ( info , output )
FUNCTION_CALL	4217:14	4217:47	13	t2p_write_pdf_string ( info , output )
CALLEE	4217:14	4217:14	14	t2p_write_pdf_string
LEAF_NODE	4217:14	4217:14	15	t2p_write_pdf_string
LEAF_NODE	4217:34	4217:34	14	(
ARGUMENT	4217:35	4217:35	14	info
FIELD	4217:35	4217:35	15	info
LEAF_NODE	4217:35	4217:35	16	info
LEAF_NODE	4217:39	4217:39	14	,
ARGUMENT	4217:41	4217:41	14	output
FIELD	4217:41	4217:41	15	output
LEAF_NODE	4217:41	4217:41	16	output
LEAF_NODE	4217:47	4217:47	14	)
LEAF_NODE	4217:48	4217:48	10	;
EXPR_STATEMENT	4218:3	4218:53	9	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4218:3	4218:3	10	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4218:3	4218:14	11	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4218:3	4218:3	12	written
FIELD	4218:3	4218:3	13	written
LEAF_NODE	4218:3	4218:3	14	written
ASSIGN_OP	4218:11	4218:11	12	+=
LEAF_NODE	4218:11	4218:11	13	+=
RVAL	4218:14	4218:14	12	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4218:14	4218:52	13	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4218:14	4218:14	14	t2pWriteFile
LEAF_NODE	4218:14	4218:14	15	t2pWriteFile
LEAF_NODE	4218:26	4218:26	14	(
ARGUMENT	4218:27	4218:27	14	output
FIELD	4218:27	4218:27	15	output
LEAF_NODE	4218:27	4218:27	16	output
LEAF_NODE	4218:33	4218:33	14	,
ARGUMENT	4218:35	4218:45	14	( tdata_t ) "\n"
LEAF_NODE	4218:35	4218:35	15	(
TYPE_NAME	4218:36	4218:36	15	tdata_t
LEAF_NODE	4218:36	4218:36	16	tdata_t
LEAF_NODE	4218:43	4218:43	15	)
FIELD	4218:45	4218:45	15	"\n"
LEAF_NODE	4218:45	4218:45	16	"\n"
LEAF_NODE	4218:49	4218:49	14	,
ARGUMENT	4218:51	4218:51	14	1
FIELD	4218:51	4218:51	15	1
LEAF_NODE	4218:51	4218:51	16	1
LEAF_NODE	4218:52	4218:52	14	)
LEAF_NODE	4218:53	4218:53	10	;
LEAF_NODE	4219:2	4219:2	8	}
LEAF_NODE	4220:1	4220:1	5	}
SELECTION	4221:1	4221:32	3	
KEYWORD	4221:1	4221:1	4	if
LEAF_NODE	4221:1	4221:1	5	if
LEAF_NODE	4221:4	4221:4	4	(
CONDITION	4221:5	4221:5	4	t2p -> pdf_title [ 0 ] != '\0'
EXPR	4221:5	4221:26	5	t2p -> pdf_title [ 0 ] != '\0'
FIELD	4221:5	4221:21	6	t2p -> pdf_title [ 0 ]
LEAF_NODE	4221:5	4221:5	7	t2p
LEAF_NODE	4221:8	4221:8	7	->
LEAF_NODE	4221:10	4221:10	7	pdf_title
LEAF_NODE	4221:19	4221:19	7	[
EXPR	4221:20	4221:20	7	0
FIELD	4221:20	4221:20	8	0
LEAF_NODE	4221:20	4221:20	9	0
LEAF_NODE	4221:21	4221:21	7	]
EQ_OPERATOR	4221:23	4221:23	6	!=
LEAF_NODE	4221:23	4221:23	7	!=
FIELD	4221:26	4221:26	6	'\0'
LEAF_NODE	4221:26	4221:26	7	'\0'
LEAF_NODE	4221:30	4221:30	4	)
STATEMENTS	4221:32	4225:1	4	
LEAF_NODE	4221:32	4221:32	5	{
STATEMENTS	4222:2	4224:2	5	
EXPR_STATEMENT	4222:2	4222:57	6	written += t2pWriteFile ( output , ( tdata_t ) "/Title " , 7 ) ;
EXPR	4222:2	4222:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/Title " , 7 )
ASSIGN	4222:2	4222:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/Title " , 7 )
LVAL	4222:2	4222:2	9	written
FIELD	4222:2	4222:2	10	written
LEAF_NODE	4222:2	4222:2	11	written
ASSIGN_OP	4222:10	4222:10	9	+=
LEAF_NODE	4222:10	4222:10	10	+=
RVAL	4222:13	4222:13	9	t2pWriteFile ( output , ( tdata_t ) "/Title " , 7 )
FUNCTION_CALL	4222:13	4222:56	10	t2pWriteFile ( output , ( tdata_t ) "/Title " , 7 )
CALLEE	4222:13	4222:13	11	t2pWriteFile
LEAF_NODE	4222:13	4222:13	12	t2pWriteFile
LEAF_NODE	4222:25	4222:25	11	(
ARGUMENT	4222:26	4222:26	11	output
FIELD	4222:26	4222:26	12	output
LEAF_NODE	4222:26	4222:26	13	output
LEAF_NODE	4222:32	4222:32	11	,
ARGUMENT	4222:34	4222:44	11	( tdata_t ) "/Title "
LEAF_NODE	4222:34	4222:34	12	(
TYPE_NAME	4222:35	4222:35	12	tdata_t
LEAF_NODE	4222:35	4222:35	13	tdata_t
LEAF_NODE	4222:42	4222:42	12	)
FIELD	4222:44	4222:44	12	"/Title "
LEAF_NODE	4222:44	4222:44	13	"/Title "
LEAF_NODE	4222:53	4222:53	11	,
ARGUMENT	4222:55	4222:55	11	7
FIELD	4222:55	4222:55	12	7
LEAF_NODE	4222:55	4222:55	13	7
LEAF_NODE	4222:56	4222:56	11	)
LEAF_NODE	4222:57	4222:57	7	;
EXPR_STATEMENT	4223:2	4223:57	6	written += t2p_write_pdf_string ( t2p -> pdf_title , output ) ;
EXPR	4223:2	4223:2	7	written += t2p_write_pdf_string ( t2p -> pdf_title , output )
ASSIGN	4223:2	4223:13	8	written += t2p_write_pdf_string ( t2p -> pdf_title , output )
LVAL	4223:2	4223:2	9	written
FIELD	4223:2	4223:2	10	written
LEAF_NODE	4223:2	4223:2	11	written
ASSIGN_OP	4223:10	4223:10	9	+=
LEAF_NODE	4223:10	4223:10	10	+=
RVAL	4223:13	4223:13	9	t2p_write_pdf_string ( t2p -> pdf_title , output )
FUNCTION_CALL	4223:13	4223:56	10	t2p_write_pdf_string ( t2p -> pdf_title , output )
CALLEE	4223:13	4223:13	11	t2p_write_pdf_string
LEAF_NODE	4223:13	4223:13	12	t2p_write_pdf_string
LEAF_NODE	4223:33	4223:33	11	(
ARGUMENT	4223:34	4223:34	11	t2p -> pdf_title
FIELD	4223:34	4223:39	12	t2p -> pdf_title
LEAF_NODE	4223:34	4223:34	13	t2p
LEAF_NODE	4223:37	4223:37	13	->
LEAF_NODE	4223:39	4223:39	13	pdf_title
LEAF_NODE	4223:48	4223:48	11	,
ARGUMENT	4223:50	4223:50	11	output
FIELD	4223:50	4223:50	12	output
LEAF_NODE	4223:50	4223:50	13	output
LEAF_NODE	4223:56	4223:56	11	)
LEAF_NODE	4223:57	4223:57	7	;
EXPR_STATEMENT	4224:2	4224:52	6	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4224:2	4224:2	7	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4224:2	4224:13	8	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4224:2	4224:2	9	written
FIELD	4224:2	4224:2	10	written
LEAF_NODE	4224:2	4224:2	11	written
ASSIGN_OP	4224:10	4224:10	9	+=
LEAF_NODE	4224:10	4224:10	10	+=
RVAL	4224:13	4224:13	9	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4224:13	4224:51	10	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4224:13	4224:13	11	t2pWriteFile
LEAF_NODE	4224:13	4224:13	12	t2pWriteFile
LEAF_NODE	4224:25	4224:25	11	(
ARGUMENT	4224:26	4224:26	11	output
FIELD	4224:26	4224:26	12	output
LEAF_NODE	4224:26	4224:26	13	output
LEAF_NODE	4224:32	4224:32	11	,
ARGUMENT	4224:34	4224:44	11	( tdata_t ) "\n"
LEAF_NODE	4224:34	4224:34	12	(
TYPE_NAME	4224:35	4224:35	12	tdata_t
LEAF_NODE	4224:35	4224:35	13	tdata_t
LEAF_NODE	4224:42	4224:42	12	)
FIELD	4224:44	4224:44	12	"\n"
LEAF_NODE	4224:44	4224:44	13	"\n"
LEAF_NODE	4224:48	4224:48	11	,
ARGUMENT	4224:50	4224:50	11	1
FIELD	4224:50	4224:50	12	1
LEAF_NODE	4224:50	4224:50	13	1
LEAF_NODE	4224:51	4224:51	11	)
LEAF_NODE	4224:52	4224:52	7	;
LEAF_NODE	4225:1	4225:1	5	}
SELECTION	4225:3	4225:8	3	
KEYWORD	4225:3	4225:3	4	else
LEAF_NODE	4225:3	4225:3	5	else
STATEMENTS	4225:8	4234:1	4	
LEAF_NODE	4225:8	4225:8	5	{
STATEMENTS	4226:2	4226:2	5	
SELECTION	4226:2	4226:60	6	
KEYWORD	4226:2	4226:2	7	if
LEAF_NODE	4226:2	4226:2	8	if
LEAF_NODE	4226:5	4226:5	7	(
CONDITION	4226:6	4226:6	7	TIFFGetField ( input , TIFFTAG_DOCUMENTNAME , & info ) != 0
EXPR	4226:6	4226:58	8	TIFFGetField ( input , TIFFTAG_DOCUMENTNAME , & info ) != 0
FUNCTION_CALL	4226:6	4226:53	9	TIFFGetField ( input , TIFFTAG_DOCUMENTNAME , & info )
CALLEE	4226:6	4226:6	10	TIFFGetField
LEAF_NODE	4226:6	4226:6	11	TIFFGetField
LEAF_NODE	4226:18	4226:18	10	(
ARGUMENT	4226:19	4226:19	10	input
FIELD	4226:19	4226:19	11	input
LEAF_NODE	4226:19	4226:19	12	input
LEAF_NODE	4226:24	4226:24	10	,
ARGUMENT	4226:26	4226:26	10	TIFFTAG_DOCUMENTNAME
FIELD	4226:26	4226:26	11	TIFFTAG_DOCUMENTNAME
LEAF_NODE	4226:26	4226:26	12	TIFFTAG_DOCUMENTNAME
LEAF_NODE	4226:46	4226:46	10	,
ARGUMENT	4226:48	4226:48	10	& info
UNARY_EXPR	4226:48	4226:49	11	& info
UNARY_OPERATOR	4226:48	4226:48	12	&
LEAF_NODE	4226:48	4226:48	13	&
FIELD	4226:49	4226:49	12	info
LEAF_NODE	4226:49	4226:49	13	info
LEAF_NODE	4226:53	4226:53	10	)
EQ_OPERATOR	4226:55	4226:55	9	!=
LEAF_NODE	4226:55	4226:55	10	!=
FIELD	4226:58	4226:58	9	0
LEAF_NODE	4226:58	4226:58	10	0
LEAF_NODE	4226:59	4226:59	7	)
STATEMENTS	4226:60	4233:2	7	
LEAF_NODE	4226:60	4226:60	8	{
STATEMENTS	4227:3	4232:3	8	
SELECTION	4227:3	4227:26	9	
KEYWORD	4227:3	4227:3	10	if
LEAF_NODE	4227:3	4227:3	11	if
LEAF_NODE	4227:5	4227:5	10	(
CONDITION	4227:6	4227:6	10	strlen ( info ) > 511
EXPR	4227:6	4227:21	11	strlen ( info ) > 511
FUNCTION_CALL	4227:6	4227:17	12	strlen ( info )
CALLEE	4227:6	4227:6	13	strlen
LEAF_NODE	4227:6	4227:6	14	strlen
LEAF_NODE	4227:12	4227:12	13	(
ARGUMENT	4227:13	4227:13	13	info
FIELD	4227:13	4227:13	14	info
LEAF_NODE	4227:13	4227:13	15	info
LEAF_NODE	4227:17	4227:17	13	)
REL_OPERATOR	4227:19	4227:19	12	>
LEAF_NODE	4227:19	4227:19	13	>
FIELD	4227:21	4227:21	12	511
LEAF_NODE	4227:21	4227:21	13	511
LEAF_NODE	4227:24	4227:24	10	)
STATEMENTS	4227:26	4229:3	10	
LEAF_NODE	4227:26	4227:26	11	{
STATEMENTS	4228:4	4228:4	11	
EXPR_STATEMENT	4228:4	4228:20	12	info [ 512 ] = '\0' ;
EXPR	4228:4	4228:4	13	info [ 512 ] = '\0'
ASSIGN	4228:4	4228:16	14	info [ 512 ] = '\0'
LVAL	4228:4	4228:4	15	info [ 512 ]
FIELD	4228:4	4228:12	16	info [ 512 ]
LEAF_NODE	4228:4	4228:4	17	info
LEAF_NODE	4228:8	4228:8	17	[
EXPR	4228:9	4228:9	17	512
FIELD	4228:9	4228:9	18	512
LEAF_NODE	4228:9	4228:9	19	512
LEAF_NODE	4228:12	4228:12	17	]
ASSIGN_OP	4228:14	4228:14	15	=
LEAF_NODE	4228:14	4228:14	16	=
RVAL	4228:16	4228:16	15	'\0'
FIELD	4228:16	4228:16	16	'\0'
LEAF_NODE	4228:16	4228:16	17	'\0'
LEAF_NODE	4228:20	4228:20	13	;
LEAF_NODE	4229:3	4229:3	11	}
EXPR_STATEMENT	4230:3	4230:58	9	written += t2pWriteFile ( output , ( tdata_t ) "/Title " , 7 ) ;
EXPR	4230:3	4230:3	10	written += t2pWriteFile ( output , ( tdata_t ) "/Title " , 7 )
ASSIGN	4230:3	4230:14	11	written += t2pWriteFile ( output , ( tdata_t ) "/Title " , 7 )
LVAL	4230:3	4230:3	12	written
FIELD	4230:3	4230:3	13	written
LEAF_NODE	4230:3	4230:3	14	written
ASSIGN_OP	4230:11	4230:11	12	+=
LEAF_NODE	4230:11	4230:11	13	+=
RVAL	4230:14	4230:14	12	t2pWriteFile ( output , ( tdata_t ) "/Title " , 7 )
FUNCTION_CALL	4230:14	4230:57	13	t2pWriteFile ( output , ( tdata_t ) "/Title " , 7 )
CALLEE	4230:14	4230:14	14	t2pWriteFile
LEAF_NODE	4230:14	4230:14	15	t2pWriteFile
LEAF_NODE	4230:26	4230:26	14	(
ARGUMENT	4230:27	4230:27	14	output
FIELD	4230:27	4230:27	15	output
LEAF_NODE	4230:27	4230:27	16	output
LEAF_NODE	4230:33	4230:33	14	,
ARGUMENT	4230:35	4230:45	14	( tdata_t ) "/Title "
LEAF_NODE	4230:35	4230:35	15	(
TYPE_NAME	4230:36	4230:36	15	tdata_t
LEAF_NODE	4230:36	4230:36	16	tdata_t
LEAF_NODE	4230:43	4230:43	15	)
FIELD	4230:45	4230:45	15	"/Title "
LEAF_NODE	4230:45	4230:45	16	"/Title "
LEAF_NODE	4230:54	4230:54	14	,
ARGUMENT	4230:56	4230:56	14	7
FIELD	4230:56	4230:56	15	7
LEAF_NODE	4230:56	4230:56	16	7
LEAF_NODE	4230:57	4230:57	14	)
LEAF_NODE	4230:58	4230:58	10	;
EXPR_STATEMENT	4231:3	4231:48	9	written += t2p_write_pdf_string ( info , output ) ;
EXPR	4231:3	4231:3	10	written += t2p_write_pdf_string ( info , output )
ASSIGN	4231:3	4231:14	11	written += t2p_write_pdf_string ( info , output )
LVAL	4231:3	4231:3	12	written
FIELD	4231:3	4231:3	13	written
LEAF_NODE	4231:3	4231:3	14	written
ASSIGN_OP	4231:11	4231:11	12	+=
LEAF_NODE	4231:11	4231:11	13	+=
RVAL	4231:14	4231:14	12	t2p_write_pdf_string ( info , output )
FUNCTION_CALL	4231:14	4231:47	13	t2p_write_pdf_string ( info , output )
CALLEE	4231:14	4231:14	14	t2p_write_pdf_string
LEAF_NODE	4231:14	4231:14	15	t2p_write_pdf_string
LEAF_NODE	4231:34	4231:34	14	(
ARGUMENT	4231:35	4231:35	14	info
FIELD	4231:35	4231:35	15	info
LEAF_NODE	4231:35	4231:35	16	info
LEAF_NODE	4231:39	4231:39	14	,
ARGUMENT	4231:41	4231:41	14	output
FIELD	4231:41	4231:41	15	output
LEAF_NODE	4231:41	4231:41	16	output
LEAF_NODE	4231:47	4231:47	14	)
LEAF_NODE	4231:48	4231:48	10	;
EXPR_STATEMENT	4232:3	4232:53	9	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4232:3	4232:3	10	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4232:3	4232:14	11	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4232:3	4232:3	12	written
FIELD	4232:3	4232:3	13	written
LEAF_NODE	4232:3	4232:3	14	written
ASSIGN_OP	4232:11	4232:11	12	+=
LEAF_NODE	4232:11	4232:11	13	+=
RVAL	4232:14	4232:14	12	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4232:14	4232:52	13	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4232:14	4232:14	14	t2pWriteFile
LEAF_NODE	4232:14	4232:14	15	t2pWriteFile
LEAF_NODE	4232:26	4232:26	14	(
ARGUMENT	4232:27	4232:27	14	output
FIELD	4232:27	4232:27	15	output
LEAF_NODE	4232:27	4232:27	16	output
LEAF_NODE	4232:33	4232:33	14	,
ARGUMENT	4232:35	4232:45	14	( tdata_t ) "\n"
LEAF_NODE	4232:35	4232:35	15	(
TYPE_NAME	4232:36	4232:36	15	tdata_t
LEAF_NODE	4232:36	4232:36	16	tdata_t
LEAF_NODE	4232:43	4232:43	15	)
FIELD	4232:45	4232:45	15	"\n"
LEAF_NODE	4232:45	4232:45	16	"\n"
LEAF_NODE	4232:49	4232:49	14	,
ARGUMENT	4232:51	4232:51	14	1
FIELD	4232:51	4232:51	15	1
LEAF_NODE	4232:51	4232:51	16	1
LEAF_NODE	4232:52	4232:52	14	)
LEAF_NODE	4232:53	4232:53	10	;
LEAF_NODE	4233:2	4233:2	8	}
LEAF_NODE	4234:1	4234:1	5	}
SELECTION	4235:1	4235:34	3	
KEYWORD	4235:1	4235:1	4	if
LEAF_NODE	4235:1	4235:1	5	if
LEAF_NODE	4235:4	4235:4	4	(
CONDITION	4235:5	4235:5	4	t2p -> pdf_subject [ 0 ] != '\0'
EXPR	4235:5	4235:28	5	t2p -> pdf_subject [ 0 ] != '\0'
FIELD	4235:5	4235:23	6	t2p -> pdf_subject [ 0 ]
LEAF_NODE	4235:5	4235:5	7	t2p
LEAF_NODE	4235:8	4235:8	7	->
LEAF_NODE	4235:10	4235:10	7	pdf_subject
LEAF_NODE	4235:21	4235:21	7	[
EXPR	4235:22	4235:22	7	0
FIELD	4235:22	4235:22	8	0
LEAF_NODE	4235:22	4235:22	9	0
LEAF_NODE	4235:23	4235:23	7	]
EQ_OPERATOR	4235:25	4235:25	6	!=
LEAF_NODE	4235:25	4235:25	7	!=
FIELD	4235:28	4235:28	6	'\0'
LEAF_NODE	4235:28	4235:28	7	'\0'
LEAF_NODE	4235:32	4235:32	4	)
STATEMENTS	4235:34	4239:1	4	
LEAF_NODE	4235:34	4235:34	5	{
STATEMENTS	4236:2	4238:2	5	
EXPR_STATEMENT	4236:2	4236:59	6	written += t2pWriteFile ( output , ( tdata_t ) "/Subject " , 9 ) ;
EXPR	4236:2	4236:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/Subject " , 9 )
ASSIGN	4236:2	4236:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/Subject " , 9 )
LVAL	4236:2	4236:2	9	written
FIELD	4236:2	4236:2	10	written
LEAF_NODE	4236:2	4236:2	11	written
ASSIGN_OP	4236:10	4236:10	9	+=
LEAF_NODE	4236:10	4236:10	10	+=
RVAL	4236:13	4236:13	9	t2pWriteFile ( output , ( tdata_t ) "/Subject " , 9 )
FUNCTION_CALL	4236:13	4236:58	10	t2pWriteFile ( output , ( tdata_t ) "/Subject " , 9 )
CALLEE	4236:13	4236:13	11	t2pWriteFile
LEAF_NODE	4236:13	4236:13	12	t2pWriteFile
LEAF_NODE	4236:25	4236:25	11	(
ARGUMENT	4236:26	4236:26	11	output
FIELD	4236:26	4236:26	12	output
LEAF_NODE	4236:26	4236:26	13	output
LEAF_NODE	4236:32	4236:32	11	,
ARGUMENT	4236:34	4236:44	11	( tdata_t ) "/Subject "
LEAF_NODE	4236:34	4236:34	12	(
TYPE_NAME	4236:35	4236:35	12	tdata_t
LEAF_NODE	4236:35	4236:35	13	tdata_t
LEAF_NODE	4236:42	4236:42	12	)
FIELD	4236:44	4236:44	12	"/Subject "
LEAF_NODE	4236:44	4236:44	13	"/Subject "
LEAF_NODE	4236:55	4236:55	11	,
ARGUMENT	4236:57	4236:57	11	9
FIELD	4236:57	4236:57	12	9
LEAF_NODE	4236:57	4236:57	13	9
LEAF_NODE	4236:58	4236:58	11	)
LEAF_NODE	4236:59	4236:59	7	;
EXPR_STATEMENT	4237:2	4237:59	6	written += t2p_write_pdf_string ( t2p -> pdf_subject , output ) ;
EXPR	4237:2	4237:2	7	written += t2p_write_pdf_string ( t2p -> pdf_subject , output )
ASSIGN	4237:2	4237:13	8	written += t2p_write_pdf_string ( t2p -> pdf_subject , output )
LVAL	4237:2	4237:2	9	written
FIELD	4237:2	4237:2	10	written
LEAF_NODE	4237:2	4237:2	11	written
ASSIGN_OP	4237:10	4237:10	9	+=
LEAF_NODE	4237:10	4237:10	10	+=
RVAL	4237:13	4237:13	9	t2p_write_pdf_string ( t2p -> pdf_subject , output )
FUNCTION_CALL	4237:13	4237:58	10	t2p_write_pdf_string ( t2p -> pdf_subject , output )
CALLEE	4237:13	4237:13	11	t2p_write_pdf_string
LEAF_NODE	4237:13	4237:13	12	t2p_write_pdf_string
LEAF_NODE	4237:33	4237:33	11	(
ARGUMENT	4237:34	4237:34	11	t2p -> pdf_subject
FIELD	4237:34	4237:39	12	t2p -> pdf_subject
LEAF_NODE	4237:34	4237:34	13	t2p
LEAF_NODE	4237:37	4237:37	13	->
LEAF_NODE	4237:39	4237:39	13	pdf_subject
LEAF_NODE	4237:50	4237:50	11	,
ARGUMENT	4237:52	4237:52	11	output
FIELD	4237:52	4237:52	12	output
LEAF_NODE	4237:52	4237:52	13	output
LEAF_NODE	4237:58	4237:58	11	)
LEAF_NODE	4237:59	4237:59	7	;
EXPR_STATEMENT	4238:2	4238:52	6	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4238:2	4238:2	7	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4238:2	4238:13	8	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4238:2	4238:2	9	written
FIELD	4238:2	4238:2	10	written
LEAF_NODE	4238:2	4238:2	11	written
ASSIGN_OP	4238:10	4238:10	9	+=
LEAF_NODE	4238:10	4238:10	10	+=
RVAL	4238:13	4238:13	9	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4238:13	4238:51	10	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4238:13	4238:13	11	t2pWriteFile
LEAF_NODE	4238:13	4238:13	12	t2pWriteFile
LEAF_NODE	4238:25	4238:25	11	(
ARGUMENT	4238:26	4238:26	11	output
FIELD	4238:26	4238:26	12	output
LEAF_NODE	4238:26	4238:26	13	output
LEAF_NODE	4238:32	4238:32	11	,
ARGUMENT	4238:34	4238:44	11	( tdata_t ) "\n"
LEAF_NODE	4238:34	4238:34	12	(
TYPE_NAME	4238:35	4238:35	12	tdata_t
LEAF_NODE	4238:35	4238:35	13	tdata_t
LEAF_NODE	4238:42	4238:42	12	)
FIELD	4238:44	4238:44	12	"\n"
LEAF_NODE	4238:44	4238:44	13	"\n"
LEAF_NODE	4238:48	4238:48	11	,
ARGUMENT	4238:50	4238:50	11	1
FIELD	4238:50	4238:50	12	1
LEAF_NODE	4238:50	4238:50	13	1
LEAF_NODE	4238:51	4238:51	11	)
LEAF_NODE	4238:52	4238:52	7	;
LEAF_NODE	4239:1	4239:1	5	}
SELECTION	4239:3	4239:8	3	
KEYWORD	4239:3	4239:3	4	else
LEAF_NODE	4239:3	4239:3	5	else
STATEMENTS	4239:8	4247:1	4	
LEAF_NODE	4239:8	4239:8	5	{
STATEMENTS	4240:2	4240:2	5	
SELECTION	4240:2	4240:73	6	
KEYWORD	4240:2	4240:2	7	if
LEAF_NODE	4240:2	4240:2	8	if
LEAF_NODE	4240:5	4240:5	7	(
CONDITION	4240:6	4240:6	7	TIFFGetField ( input , TIFFTAG_IMAGEDESCRIPTION , & info ) != 0 && info
EXPR	4240:6	4240:6	8	TIFFGetField ( input , TIFFTAG_IMAGEDESCRIPTION , & info ) != 0 && info
AND	4240:6	4240:67	9	TIFFGetField ( input , TIFFTAG_IMAGEDESCRIPTION , & info ) != 0 && info
EXPR	4240:6	4240:62	10	TIFFGetField ( input , TIFFTAG_IMAGEDESCRIPTION , & info ) != 0
FUNCTION_CALL	4240:6	4240:57	11	TIFFGetField ( input , TIFFTAG_IMAGEDESCRIPTION , & info )
CALLEE	4240:6	4240:6	12	TIFFGetField
LEAF_NODE	4240:6	4240:6	13	TIFFGetField
LEAF_NODE	4240:18	4240:18	12	(
ARGUMENT	4240:19	4240:19	12	input
FIELD	4240:19	4240:19	13	input
LEAF_NODE	4240:19	4240:19	14	input
LEAF_NODE	4240:24	4240:24	12	,
ARGUMENT	4240:26	4240:26	12	TIFFTAG_IMAGEDESCRIPTION
FIELD	4240:26	4240:26	13	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	4240:26	4240:26	14	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	4240:50	4240:50	12	,
ARGUMENT	4240:52	4240:52	12	& info
UNARY_EXPR	4240:52	4240:53	13	& info
UNARY_OPERATOR	4240:52	4240:52	14	&
LEAF_NODE	4240:52	4240:52	15	&
FIELD	4240:53	4240:53	14	info
LEAF_NODE	4240:53	4240:53	15	info
LEAF_NODE	4240:57	4240:57	12	)
EQ_OPERATOR	4240:59	4240:59	11	!=
LEAF_NODE	4240:59	4240:59	12	!=
FIELD	4240:62	4240:62	11	0
LEAF_NODE	4240:62	4240:62	12	0
LEAF_NODE	4240:64	4240:64	10	&&
EXPR	4240:67	4240:67	10	info
FIELD	4240:67	4240:67	11	info
LEAF_NODE	4240:67	4240:67	12	info
LEAF_NODE	4240:71	4240:71	7	)
STATEMENTS	4240:73	4246:2	7	
LEAF_NODE	4240:73	4240:73	8	{
STATEMENTS	4241:3	4245:3	8	
SELECTION	4241:3	4242:4	9	
KEYWORD	4241:3	4241:3	10	if
LEAF_NODE	4241:3	4241:3	11	if
LEAF_NODE	4241:6	4241:6	10	(
CONDITION	4241:7	4241:7	10	strlen ( info ) >= sizeof ( t2p -> pdf_subject )
EXPR	4241:7	4241:23	11	strlen ( info ) >= sizeof ( t2p -> pdf_subject )
FUNCTION_CALL	4241:7	4241:18	12	strlen ( info )
CALLEE	4241:7	4241:7	13	strlen
LEAF_NODE	4241:7	4241:7	14	strlen
LEAF_NODE	4241:13	4241:13	13	(
ARGUMENT	4241:14	4241:14	13	info
FIELD	4241:14	4241:14	14	info
LEAF_NODE	4241:14	4241:14	15	info
LEAF_NODE	4241:18	4241:18	13	)
REL_OPERATOR	4241:20	4241:20	12	>=
LEAF_NODE	4241:20	4241:20	13	>=
FUNCTION_CALL	4241:23	4241:46	12	sizeof ( t2p -> pdf_subject )
CALLEE	4241:23	4241:23	13	sizeof
LEAF_NODE	4241:23	4241:23	14	sizeof
LEAF_NODE	4241:29	4241:29	13	(
ARGUMENT	4241:30	4241:30	13	t2p -> pdf_subject
FIELD	4241:30	4241:35	14	t2p -> pdf_subject
LEAF_NODE	4241:30	4241:30	15	t2p
LEAF_NODE	4241:33	4241:33	15	->
LEAF_NODE	4241:35	4241:35	15	pdf_subject
LEAF_NODE	4241:46	4241:46	13	)
LEAF_NODE	4241:47	4241:47	10	)
STATEMENTS	4242:4	4242:4	10	
EXPR_STATEMENT	4242:4	4242:45	11	info [ sizeof ( t2p -> pdf_subject ) - 1 ] = '\0' ;
EXPR	4242:4	4242:4	12	info [ sizeof ( t2p -> pdf_subject ) - 1 ] = '\0'
ASSIGN	4242:4	4242:41	13	info [ sizeof ( t2p -> pdf_subject ) - 1 ] = '\0'
LVAL	4242:4	4242:4	14	info [ sizeof ( t2p -> pdf_subject ) - 1 ]
FIELD	4242:4	4242:37	15	info [ sizeof ( t2p -> pdf_subject ) - 1 ]
LEAF_NODE	4242:4	4242:4	16	info
LEAF_NODE	4242:8	4242:8	16	[
EXPR	4242:9	4242:36	16	sizeof ( t2p -> pdf_subject ) - 1
FUNCTION_CALL	4242:9	4242:32	17	sizeof ( t2p -> pdf_subject )
CALLEE	4242:9	4242:9	18	sizeof
LEAF_NODE	4242:9	4242:9	19	sizeof
LEAF_NODE	4242:15	4242:15	18	(
ARGUMENT	4242:16	4242:16	18	t2p -> pdf_subject
FIELD	4242:16	4242:21	19	t2p -> pdf_subject
LEAF_NODE	4242:16	4242:16	20	t2p
LEAF_NODE	4242:19	4242:19	20	->
LEAF_NODE	4242:21	4242:21	20	pdf_subject
LEAF_NODE	4242:32	4242:32	18	)
LEAF_NODE	4242:34	4242:34	17	-
FIELD	4242:36	4242:36	17	1
LEAF_NODE	4242:36	4242:36	18	1
LEAF_NODE	4242:37	4242:37	16	]
ASSIGN_OP	4242:39	4242:39	14	=
LEAF_NODE	4242:39	4242:39	15	=
RVAL	4242:41	4242:41	14	'\0'
FIELD	4242:41	4242:41	15	'\0'
LEAF_NODE	4242:41	4242:41	16	'\0'
LEAF_NODE	4242:45	4242:45	12	;
EXPR_STATEMENT	4243:3	4243:60	9	written += t2pWriteFile ( output , ( tdata_t ) "/Subject " , 9 ) ;
EXPR	4243:3	4243:3	10	written += t2pWriteFile ( output , ( tdata_t ) "/Subject " , 9 )
ASSIGN	4243:3	4243:14	11	written += t2pWriteFile ( output , ( tdata_t ) "/Subject " , 9 )
LVAL	4243:3	4243:3	12	written
FIELD	4243:3	4243:3	13	written
LEAF_NODE	4243:3	4243:3	14	written
ASSIGN_OP	4243:11	4243:11	12	+=
LEAF_NODE	4243:11	4243:11	13	+=
RVAL	4243:14	4243:14	12	t2pWriteFile ( output , ( tdata_t ) "/Subject " , 9 )
FUNCTION_CALL	4243:14	4243:59	13	t2pWriteFile ( output , ( tdata_t ) "/Subject " , 9 )
CALLEE	4243:14	4243:14	14	t2pWriteFile
LEAF_NODE	4243:14	4243:14	15	t2pWriteFile
LEAF_NODE	4243:26	4243:26	14	(
ARGUMENT	4243:27	4243:27	14	output
FIELD	4243:27	4243:27	15	output
LEAF_NODE	4243:27	4243:27	16	output
LEAF_NODE	4243:33	4243:33	14	,
ARGUMENT	4243:35	4243:45	14	( tdata_t ) "/Subject "
LEAF_NODE	4243:35	4243:35	15	(
TYPE_NAME	4243:36	4243:36	15	tdata_t
LEAF_NODE	4243:36	4243:36	16	tdata_t
LEAF_NODE	4243:43	4243:43	15	)
FIELD	4243:45	4243:45	15	"/Subject "
LEAF_NODE	4243:45	4243:45	16	"/Subject "
LEAF_NODE	4243:56	4243:56	14	,
ARGUMENT	4243:58	4243:58	14	9
FIELD	4243:58	4243:58	15	9
LEAF_NODE	4243:58	4243:58	16	9
LEAF_NODE	4243:59	4243:59	14	)
LEAF_NODE	4243:60	4243:60	10	;
EXPR_STATEMENT	4244:3	4244:48	9	written += t2p_write_pdf_string ( info , output ) ;
EXPR	4244:3	4244:3	10	written += t2p_write_pdf_string ( info , output )
ASSIGN	4244:3	4244:14	11	written += t2p_write_pdf_string ( info , output )
LVAL	4244:3	4244:3	12	written
FIELD	4244:3	4244:3	13	written
LEAF_NODE	4244:3	4244:3	14	written
ASSIGN_OP	4244:11	4244:11	12	+=
LEAF_NODE	4244:11	4244:11	13	+=
RVAL	4244:14	4244:14	12	t2p_write_pdf_string ( info , output )
FUNCTION_CALL	4244:14	4244:47	13	t2p_write_pdf_string ( info , output )
CALLEE	4244:14	4244:14	14	t2p_write_pdf_string
LEAF_NODE	4244:14	4244:14	15	t2p_write_pdf_string
LEAF_NODE	4244:34	4244:34	14	(
ARGUMENT	4244:35	4244:35	14	info
FIELD	4244:35	4244:35	15	info
LEAF_NODE	4244:35	4244:35	16	info
LEAF_NODE	4244:39	4244:39	14	,
ARGUMENT	4244:41	4244:41	14	output
FIELD	4244:41	4244:41	15	output
LEAF_NODE	4244:41	4244:41	16	output
LEAF_NODE	4244:47	4244:47	14	)
LEAF_NODE	4244:48	4244:48	10	;
EXPR_STATEMENT	4245:3	4245:53	9	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4245:3	4245:3	10	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4245:3	4245:14	11	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4245:3	4245:3	12	written
FIELD	4245:3	4245:3	13	written
LEAF_NODE	4245:3	4245:3	14	written
ASSIGN_OP	4245:11	4245:11	12	+=
LEAF_NODE	4245:11	4245:11	13	+=
RVAL	4245:14	4245:14	12	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4245:14	4245:52	13	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4245:14	4245:14	14	t2pWriteFile
LEAF_NODE	4245:14	4245:14	15	t2pWriteFile
LEAF_NODE	4245:26	4245:26	14	(
ARGUMENT	4245:27	4245:27	14	output
FIELD	4245:27	4245:27	15	output
LEAF_NODE	4245:27	4245:27	16	output
LEAF_NODE	4245:33	4245:33	14	,
ARGUMENT	4245:35	4245:45	14	( tdata_t ) "\n"
LEAF_NODE	4245:35	4245:35	15	(
TYPE_NAME	4245:36	4245:36	15	tdata_t
LEAF_NODE	4245:36	4245:36	16	tdata_t
LEAF_NODE	4245:43	4245:43	15	)
FIELD	4245:45	4245:45	15	"\n"
LEAF_NODE	4245:45	4245:45	16	"\n"
LEAF_NODE	4245:49	4245:49	14	,
ARGUMENT	4245:51	4245:51	14	1
FIELD	4245:51	4245:51	15	1
LEAF_NODE	4245:51	4245:51	16	1
LEAF_NODE	4245:52	4245:52	14	)
LEAF_NODE	4245:53	4245:53	10	;
LEAF_NODE	4246:2	4246:2	8	}
LEAF_NODE	4247:1	4247:1	5	}
SELECTION	4248:1	4248:35	3	
KEYWORD	4248:1	4248:1	4	if
LEAF_NODE	4248:1	4248:1	5	if
LEAF_NODE	4248:4	4248:4	4	(
CONDITION	4248:5	4248:5	4	t2p -> pdf_keywords [ 0 ] != '\0'
EXPR	4248:5	4248:29	5	t2p -> pdf_keywords [ 0 ] != '\0'
FIELD	4248:5	4248:24	6	t2p -> pdf_keywords [ 0 ]
LEAF_NODE	4248:5	4248:5	7	t2p
LEAF_NODE	4248:8	4248:8	7	->
LEAF_NODE	4248:10	4248:10	7	pdf_keywords
LEAF_NODE	4248:22	4248:22	7	[
EXPR	4248:23	4248:23	7	0
FIELD	4248:23	4248:23	8	0
LEAF_NODE	4248:23	4248:23	9	0
LEAF_NODE	4248:24	4248:24	7	]
EQ_OPERATOR	4248:26	4248:26	6	!=
LEAF_NODE	4248:26	4248:26	7	!=
FIELD	4248:29	4248:29	6	'\0'
LEAF_NODE	4248:29	4248:29	7	'\0'
LEAF_NODE	4248:33	4248:33	4	)
STATEMENTS	4248:35	4252:1	4	
LEAF_NODE	4248:35	4248:35	5	{
STATEMENTS	4249:2	4251:2	5	
EXPR_STATEMENT	4249:2	4249:61	6	written += t2pWriteFile ( output , ( tdata_t ) "/Keywords " , 10 ) ;
EXPR	4249:2	4249:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/Keywords " , 10 )
ASSIGN	4249:2	4249:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/Keywords " , 10 )
LVAL	4249:2	4249:2	9	written
FIELD	4249:2	4249:2	10	written
LEAF_NODE	4249:2	4249:2	11	written
ASSIGN_OP	4249:10	4249:10	9	+=
LEAF_NODE	4249:10	4249:10	10	+=
RVAL	4249:13	4249:13	9	t2pWriteFile ( output , ( tdata_t ) "/Keywords " , 10 )
FUNCTION_CALL	4249:13	4249:60	10	t2pWriteFile ( output , ( tdata_t ) "/Keywords " , 10 )
CALLEE	4249:13	4249:13	11	t2pWriteFile
LEAF_NODE	4249:13	4249:13	12	t2pWriteFile
LEAF_NODE	4249:25	4249:25	11	(
ARGUMENT	4249:26	4249:26	11	output
FIELD	4249:26	4249:26	12	output
LEAF_NODE	4249:26	4249:26	13	output
LEAF_NODE	4249:32	4249:32	11	,
ARGUMENT	4249:34	4249:44	11	( tdata_t ) "/Keywords "
LEAF_NODE	4249:34	4249:34	12	(
TYPE_NAME	4249:35	4249:35	12	tdata_t
LEAF_NODE	4249:35	4249:35	13	tdata_t
LEAF_NODE	4249:42	4249:42	12	)
FIELD	4249:44	4249:44	12	"/Keywords "
LEAF_NODE	4249:44	4249:44	13	"/Keywords "
LEAF_NODE	4249:56	4249:56	11	,
ARGUMENT	4249:58	4249:58	11	10
FIELD	4249:58	4249:58	12	10
LEAF_NODE	4249:58	4249:58	13	10
LEAF_NODE	4249:60	4249:60	11	)
LEAF_NODE	4249:61	4249:61	7	;
EXPR_STATEMENT	4250:2	4250:60	6	written += t2p_write_pdf_string ( t2p -> pdf_keywords , output ) ;
EXPR	4250:2	4250:2	7	written += t2p_write_pdf_string ( t2p -> pdf_keywords , output )
ASSIGN	4250:2	4250:13	8	written += t2p_write_pdf_string ( t2p -> pdf_keywords , output )
LVAL	4250:2	4250:2	9	written
FIELD	4250:2	4250:2	10	written
LEAF_NODE	4250:2	4250:2	11	written
ASSIGN_OP	4250:10	4250:10	9	+=
LEAF_NODE	4250:10	4250:10	10	+=
RVAL	4250:13	4250:13	9	t2p_write_pdf_string ( t2p -> pdf_keywords , output )
FUNCTION_CALL	4250:13	4250:59	10	t2p_write_pdf_string ( t2p -> pdf_keywords , output )
CALLEE	4250:13	4250:13	11	t2p_write_pdf_string
LEAF_NODE	4250:13	4250:13	12	t2p_write_pdf_string
LEAF_NODE	4250:33	4250:33	11	(
ARGUMENT	4250:34	4250:34	11	t2p -> pdf_keywords
FIELD	4250:34	4250:39	12	t2p -> pdf_keywords
LEAF_NODE	4250:34	4250:34	13	t2p
LEAF_NODE	4250:37	4250:37	13	->
LEAF_NODE	4250:39	4250:39	13	pdf_keywords
LEAF_NODE	4250:51	4250:51	11	,
ARGUMENT	4250:53	4250:53	11	output
FIELD	4250:53	4250:53	12	output
LEAF_NODE	4250:53	4250:53	13	output
LEAF_NODE	4250:59	4250:59	11	)
LEAF_NODE	4250:60	4250:60	7	;
EXPR_STATEMENT	4251:2	4251:52	6	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4251:2	4251:2	7	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4251:2	4251:13	8	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4251:2	4251:2	9	written
FIELD	4251:2	4251:2	10	written
LEAF_NODE	4251:2	4251:2	11	written
ASSIGN_OP	4251:10	4251:10	9	+=
LEAF_NODE	4251:10	4251:10	10	+=
RVAL	4251:13	4251:13	9	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4251:13	4251:51	10	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4251:13	4251:13	11	t2pWriteFile
LEAF_NODE	4251:13	4251:13	12	t2pWriteFile
LEAF_NODE	4251:25	4251:25	11	(
ARGUMENT	4251:26	4251:26	11	output
FIELD	4251:26	4251:26	12	output
LEAF_NODE	4251:26	4251:26	13	output
LEAF_NODE	4251:32	4251:32	11	,
ARGUMENT	4251:34	4251:44	11	( tdata_t ) "\n"
LEAF_NODE	4251:34	4251:34	12	(
TYPE_NAME	4251:35	4251:35	12	tdata_t
LEAF_NODE	4251:35	4251:35	13	tdata_t
LEAF_NODE	4251:42	4251:42	12	)
FIELD	4251:44	4251:44	12	"\n"
LEAF_NODE	4251:44	4251:44	13	"\n"
LEAF_NODE	4251:48	4251:48	11	,
ARGUMENT	4251:50	4251:50	11	1
FIELD	4251:50	4251:50	12	1
LEAF_NODE	4251:50	4251:50	13	1
LEAF_NODE	4251:51	4251:51	11	)
LEAF_NODE	4251:52	4251:52	7	;
LEAF_NODE	4252:1	4252:1	5	}
EXPR_STATEMENT	4253:1	4253:54	3	written += t2pWriteFile ( output , ( tdata_t ) ">> \n" , 4 ) ;
EXPR	4253:1	4253:1	4	written += t2pWriteFile ( output , ( tdata_t ) ">> \n" , 4 )
ASSIGN	4253:1	4253:12	5	written += t2pWriteFile ( output , ( tdata_t ) ">> \n" , 4 )
LVAL	4253:1	4253:1	6	written
FIELD	4253:1	4253:1	7	written
LEAF_NODE	4253:1	4253:1	8	written
ASSIGN_OP	4253:9	4253:9	6	+=
LEAF_NODE	4253:9	4253:9	7	+=
RVAL	4253:12	4253:12	6	t2pWriteFile ( output , ( tdata_t ) ">> \n" , 4 )
FUNCTION_CALL	4253:12	4253:53	7	t2pWriteFile ( output , ( tdata_t ) ">> \n" , 4 )
CALLEE	4253:12	4253:12	8	t2pWriteFile
LEAF_NODE	4253:12	4253:12	9	t2pWriteFile
LEAF_NODE	4253:24	4253:24	8	(
ARGUMENT	4253:25	4253:25	8	output
FIELD	4253:25	4253:25	9	output
LEAF_NODE	4253:25	4253:25	10	output
LEAF_NODE	4253:31	4253:31	8	,
ARGUMENT	4253:33	4253:43	8	( tdata_t ) ">> \n"
LEAF_NODE	4253:33	4253:33	9	(
TYPE_NAME	4253:34	4253:34	9	tdata_t
LEAF_NODE	4253:34	4253:34	10	tdata_t
LEAF_NODE	4253:41	4253:41	9	)
FIELD	4253:43	4253:43	9	">> \n"
LEAF_NODE	4253:43	4253:43	10	">> \n"
LEAF_NODE	4253:50	4253:50	8	,
ARGUMENT	4253:52	4253:52	8	4
FIELD	4253:52	4253:52	9	4
LEAF_NODE	4253:52	4253:52	10	4
LEAF_NODE	4253:53	4253:53	8	)
LEAF_NODE	4253:54	4253:54	4	;
LEAF_NODE	4255:1	4255:1	3	return
LEAF_NODE	4255:7	4255:7	3	(
LEAF_NODE	4255:8	4255:8	3	written
LEAF_NODE	4255:15	4255:15	3	)
LEAF_NODE	4255:16	4255:16	3	;
LEAF_NODE	4256:0	4256:0	2	}
FUNCTION_DEF	4263:0	4285:0	1	
RETURN_TYPE	4263:0	4263:0	2	void
TYPE_NAME	4263:0	4263:0	3	void
LEAF_NODE	4263:0	4263:0	4	void
FUNCTION_NAME	4263:5	4263:5	2	t2p_pdf_currenttime
LEAF_NODE	4263:5	4263:5	3	t2p_pdf_currenttime
PARAMETER_LIST	4263:24	4263:33	2	( T2P * t2p )
LEAF_NODE	4263:24	4263:24	3	(
PARAMETER_DECL	4263:25	4263:30	3	T2P * t2p
TYPE	4263:25	4263:28	4	T2P *
TYPE_NAME	4263:25	4263:25	5	T2P
LEAF_NODE	4263:25	4263:25	6	T2P
POINTER	4263:28	4263:28	5	*
LEAF_NODE	4263:28	4263:28	6	*
NAME	4263:30	4263:30	4	t2p
LEAF_NODE	4263:30	4263:30	5	t2p
LEAF_NODE	4263:33	4263:33	3	)
LEAF_NODE	4264:0	4264:0	2	{
STATEMENTS	4265:1	4284:1	2	
SIMPLE_DECL	4265:1	4265:23	3	struct tm * currenttime ;
VAR_DECL	4265:1	4265:12	4	struct tm * currenttime
TYPE	4265:1	4265:10	5	struct tm *
TYPE_NAME	4265:1	4265:8	6	struct tm
LEAF_NODE	4265:1	4265:1	7	struct
LEAF_NODE	4265:8	4265:8	7	tm
POINTER	4265:10	4265:10	6	*
LEAF_NODE	4265:10	4265:10	7	*
NAME	4265:12	4265:12	5	currenttime
LEAF_NODE	4265:12	4265:12	6	currenttime
LEAF_NODE	4265:23	4265:23	4	;
SIMPLE_DECL	4266:1	4266:15	3	time_t timenow ;
VAR_DECL	4266:1	4266:8	4	time_t timenow
TYPE	4266:1	4266:1	5	time_t
TYPE_NAME	4266:1	4266:1	6	time_t
LEAF_NODE	4266:1	4266:1	7	time_t
NAME	4266:8	4266:8	5	timenow
LEAF_NODE	4266:8	4266:8	6	timenow
LEAF_NODE	4266:15	4266:15	4	;
SELECTION	4268:1	4268:36	3	
KEYWORD	4268:1	4268:1	4	if
LEAF_NODE	4268:1	4268:1	5	if
LEAF_NODE	4268:4	4268:4	4	(
CONDITION	4268:5	4268:5	4	time ( & timenow ) == ( time_t ) - 1
EXPR	4268:5	4268:32	5	time ( & timenow ) == ( time_t ) - 1
FUNCTION_CALL	4268:5	4268:18	6	time ( & timenow )
CALLEE	4268:5	4268:5	7	time
LEAF_NODE	4268:5	4268:5	8	time
LEAF_NODE	4268:9	4268:9	7	(
ARGUMENT	4268:10	4268:10	7	& timenow
UNARY_EXPR	4268:10	4268:11	8	& timenow
UNARY_OPERATOR	4268:10	4268:10	9	&
LEAF_NODE	4268:10	4268:10	10	&
FIELD	4268:11	4268:11	9	timenow
LEAF_NODE	4268:11	4268:11	10	timenow
LEAF_NODE	4268:18	4268:18	7	)
EQ_OPERATOR	4268:20	4268:20	6	==
LEAF_NODE	4268:20	4268:20	7	==
LEAF_NODE	4268:23	4268:23	6	(
TYPE_NAME	4268:24	4268:24	6	time_t
LEAF_NODE	4268:24	4268:24	7	time_t
LEAF_NODE	4268:30	4268:30	6	)
UNARY_EXPR	4268:32	4268:33	6	- 1
UNARY_OPERATOR	4268:32	4268:32	7	-
LEAF_NODE	4268:32	4268:32	8	-
FIELD	4268:33	4268:33	7	1
LEAF_NODE	4268:33	4268:33	8	1
LEAF_NODE	4268:34	4268:34	4	)
STATEMENTS	4268:36	4272:1	4	
LEAF_NODE	4268:36	4268:36	5	{
STATEMENTS	4269:2	4271:2	5	
EXPR_STATEMENT	4269:2	4270:55	6	TIFFError ( TIFF2PDF_MODULE , "Can't get the current time: %s" , strerror ( errno ) ) ;
EXPR	4269:2	4269:2	7	TIFFError ( TIFF2PDF_MODULE , "Can't get the current time: %s" , strerror ( errno ) )
FUNCTION_CALL	4269:2	4270:54	8	TIFFError ( TIFF2PDF_MODULE , "Can't get the current time: %s" , strerror ( errno ) )
CALLEE	4269:2	4269:2	9	TIFFError
LEAF_NODE	4269:2	4269:2	10	TIFFError
LEAF_NODE	4269:11	4269:11	9	(
ARGUMENT	4269:12	4269:12	9	TIFF2PDF_MODULE
FIELD	4269:12	4269:12	10	TIFF2PDF_MODULE
LEAF_NODE	4269:12	4269:12	11	TIFF2PDF_MODULE
LEAF_NODE	4269:27	4269:27	9	,
ARGUMENT	4270:5	4270:5	9	"Can't get the current time: %s"
FIELD	4270:5	4270:5	10	"Can't get the current time: %s"
LEAF_NODE	4270:5	4270:5	11	"Can't get the current time: %s"
LEAF_NODE	4270:37	4270:37	9	,
ARGUMENT	4270:39	4270:39	9	strerror ( errno )
FUNCTION_CALL	4270:39	4270:53	10	strerror ( errno )
CALLEE	4270:39	4270:39	11	strerror
LEAF_NODE	4270:39	4270:39	12	strerror
LEAF_NODE	4270:47	4270:47	11	(
ARGUMENT	4270:48	4270:48	11	errno
FIELD	4270:48	4270:48	12	errno
LEAF_NODE	4270:48	4270:48	13	errno
LEAF_NODE	4270:53	4270:53	11	)
LEAF_NODE	4270:54	4270:54	9	)
LEAF_NODE	4270:55	4270:55	7	;
EXPR_STATEMENT	4271:2	4271:22	6	timenow = ( time_t ) 0 ;
EXPR	4271:2	4271:2	7	timenow = ( time_t ) 0
ASSIGN	4271:2	4271:12	8	timenow = ( time_t ) 0
LVAL	4271:2	4271:2	9	timenow
FIELD	4271:2	4271:2	10	timenow
LEAF_NODE	4271:2	4271:2	11	timenow
ASSIGN_OP	4271:10	4271:10	9	=
LEAF_NODE	4271:10	4271:10	10	=
RVAL	4271:12	4271:21	9	( time_t ) 0
LEAF_NODE	4271:12	4271:12	10	(
TYPE_NAME	4271:13	4271:13	10	time_t
LEAF_NODE	4271:13	4271:13	11	time_t
LEAF_NODE	4271:19	4271:19	10	)
FIELD	4271:21	4271:21	10	0
LEAF_NODE	4271:21	4271:21	11	0
LEAF_NODE	4271:22	4271:22	7	;
LEAF_NODE	4272:1	4272:1	5	}
EXPR_STATEMENT	4274:1	4274:34	3	currenttime = localtime ( & timenow ) ;
EXPR	4274:1	4274:1	4	currenttime = localtime ( & timenow )
ASSIGN	4274:1	4274:15	5	currenttime = localtime ( & timenow )
LVAL	4274:1	4274:1	6	currenttime
FIELD	4274:1	4274:1	7	currenttime
LEAF_NODE	4274:1	4274:1	8	currenttime
ASSIGN_OP	4274:13	4274:13	6	=
LEAF_NODE	4274:13	4274:13	7	=
RVAL	4274:15	4274:15	6	localtime ( & timenow )
FUNCTION_CALL	4274:15	4274:33	7	localtime ( & timenow )
CALLEE	4274:15	4274:15	8	localtime
LEAF_NODE	4274:15	4274:15	9	localtime
LEAF_NODE	4274:24	4274:24	8	(
ARGUMENT	4274:25	4274:25	8	& timenow
UNARY_EXPR	4274:25	4274:26	9	& timenow
UNARY_OPERATOR	4274:25	4274:25	10	&
LEAF_NODE	4274:25	4274:25	11	&
FIELD	4274:26	4274:26	10	timenow
LEAF_NODE	4274:26	4274:26	11	timenow
LEAF_NODE	4274:33	4274:33	8	)
LEAF_NODE	4274:34	4274:34	4	;
LEAF_NODE	4275:1	4275:1	3	snprintf
LEAF_NODE	4275:9	4275:9	3	(
LEAF_NODE	4275:10	4275:10	3	t2p
LEAF_NODE	4275:13	4275:13	3	->
LEAF_NODE	4275:15	4275:15	3	pdf_datetime
LEAF_NODE	4275:27	4275:27	3	,
LEAF_NODE	4275:29	4275:29	3	sizeof
LEAF_NODE	4275:35	4275:35	3	(
LEAF_NODE	4275:36	4275:36	3	t2p
LEAF_NODE	4275:39	4275:39	3	->
LEAF_NODE	4275:41	4275:41	3	pdf_datetime
LEAF_NODE	4275:53	4275:53	3	)
LEAF_NODE	4275:54	4275:54	3	,
LEAF_NODE	4276:3	4276:3	3	"D:%.4u%.2u%.2u%.2u%.2u%.2u"
LEAF_NODE	4276:31	4276:31	3	,
LEAF_NODE	4277:3	4277:3	3	TIFFmin
LEAF_NODE	4277:10	4277:10	3	(
LEAF_NODE	4277:11	4277:11	3	(
LEAF_NODE	4277:12	4277:12	3	unsigned
LEAF_NODE	4277:20	4277:20	3	)
LEAF_NODE	4277:22	4277:22	3	currenttime
LEAF_NODE	4277:33	4277:33	3	->
LEAF_NODE	4277:35	4277:35	3	tm_year
LEAF_NODE	4277:43	4277:43	3	+
LEAF_NODE	4277:45	4277:45	3	1900U
LEAF_NODE	4277:50	4277:50	3	,
LEAF_NODE	4277:51	4277:51	3	9999U
LEAF_NODE	4277:56	4277:56	3	)
LEAF_NODE	4277:57	4277:57	3	,
LEAF_NODE	4278:3	4278:3	3	TIFFmin
LEAF_NODE	4278:10	4278:10	3	(
LEAF_NODE	4278:11	4278:11	3	(
LEAF_NODE	4278:12	4278:12	3	unsigned
LEAF_NODE	4278:20	4278:20	3	)
LEAF_NODE	4278:22	4278:22	3	currenttime
LEAF_NODE	4278:33	4278:33	3	->
LEAF_NODE	4278:35	4278:35	3	tm_mon
LEAF_NODE	4278:42	4278:42	3	+
LEAF_NODE	4278:44	4278:44	3	1U
LEAF_NODE	4278:46	4278:46	3	,
LEAF_NODE	4278:47	4278:47	3	12U
LEAF_NODE	4278:50	4278:50	3	)
LEAF_NODE	4278:51	4278:51	3	,
LEAF_NODE	4279:3	4279:3	3	TIFFmin
LEAF_NODE	4279:10	4279:10	3	(
LEAF_NODE	4279:11	4279:11	3	(
LEAF_NODE	4279:12	4279:12	3	unsigned
LEAF_NODE	4279:20	4279:20	3	)
LEAF_NODE	4279:22	4279:22	3	currenttime
LEAF_NODE	4279:33	4279:33	3	->
LEAF_NODE	4279:35	4279:35	3	tm_mday
LEAF_NODE	4279:42	4279:42	3	,
LEAF_NODE	4279:43	4279:43	3	31U
LEAF_NODE	4279:46	4279:46	3	)
LEAF_NODE	4279:47	4279:47	3	,
LEAF_NODE	4280:3	4280:3	3	TIFFmin
LEAF_NODE	4280:10	4280:10	3	(
LEAF_NODE	4280:11	4280:11	3	(
LEAF_NODE	4280:12	4280:12	3	unsigned
LEAF_NODE	4280:20	4280:20	3	)
LEAF_NODE	4280:22	4280:22	3	currenttime
LEAF_NODE	4280:33	4280:33	3	->
LEAF_NODE	4280:35	4280:35	3	tm_hour
LEAF_NODE	4280:42	4280:42	3	,
LEAF_NODE	4280:43	4280:43	3	23U
LEAF_NODE	4280:46	4280:46	3	)
LEAF_NODE	4280:47	4280:47	3	,
LEAF_NODE	4281:3	4281:3	3	TIFFmin
LEAF_NODE	4281:10	4281:10	3	(
LEAF_NODE	4281:11	4281:11	3	(
LEAF_NODE	4281:12	4281:12	3	unsigned
LEAF_NODE	4281:20	4281:20	3	)
LEAF_NODE	4281:22	4281:22	3	currenttime
LEAF_NODE	4281:33	4281:33	3	->
LEAF_NODE	4281:35	4281:35	3	tm_min
LEAF_NODE	4281:41	4281:41	3	,
LEAF_NODE	4281:42	4281:42	3	59U
LEAF_NODE	4281:45	4281:45	3	)
LEAF_NODE	4281:46	4281:46	3	,
LEAF_NODE	4282:3	4282:3	3	TIFFmin
LEAF_NODE	4282:10	4282:10	3	(
LEAF_NODE	4282:11	4282:11	3	(
LEAF_NODE	4282:12	4282:12	3	unsigned
LEAF_NODE	4282:20	4282:20	3	)
LEAF_NODE	4282:22	4282:22	3	(
LEAF_NODE	4282:23	4282:23	3	currenttime
LEAF_NODE	4282:34	4282:34	3	->
LEAF_NODE	4282:36	4282:36	3	tm_sec
LEAF_NODE	4282:42	4282:42	3	)
LEAF_NODE	4282:43	4282:43	3	,
LEAF_NODE	4282:44	4282:44	3	60U
LEAF_NODE	4282:47	4282:47	3	)
LEAF_NODE	4282:48	4282:48	3	)
LEAF_NODE	4282:49	4282:49	3	;
JUMP_STATEMENT	4284:1	4284:7	3	return DESTINATION ;
KEYWORD	4284:1	4284:1	4	return
LEAF_NODE	4284:1	4284:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	4284:7	4284:7	4	;
LEAF_NODE	4285:0	4285:0	2	}
FUNCTION_DEF	4292:0	4320:0	1	
RETURN_TYPE	4292:0	4292:0	2	void
TYPE_NAME	4292:0	4292:0	3	void
LEAF_NODE	4292:0	4292:0	4	void
FUNCTION_NAME	4292:5	4292:5	2	t2p_pdf_tifftime
LEAF_NODE	4292:5	4292:5	3	t2p_pdf_tifftime
PARAMETER_LIST	4292:21	4292:43	2	( T2P * t2p , TIFF * input )
LEAF_NODE	4292:21	4292:21	3	(
PARAMETER_DECL	4292:22	4292:27	3	T2P * t2p
TYPE	4292:22	4292:25	4	T2P *
TYPE_NAME	4292:22	4292:22	5	T2P
LEAF_NODE	4292:22	4292:22	6	T2P
POINTER	4292:25	4292:25	5	*
LEAF_NODE	4292:25	4292:25	6	*
NAME	4292:27	4292:27	4	t2p
LEAF_NODE	4292:27	4292:27	5	t2p
LEAF_NODE	4292:30	4292:30	3	,
PARAMETER_DECL	4292:32	4292:38	3	TIFF * input
TYPE	4292:32	4292:36	4	TIFF *
TYPE_NAME	4292:32	4292:32	5	TIFF
LEAF_NODE	4292:32	4292:32	6	TIFF
POINTER	4292:36	4292:36	5	*
LEAF_NODE	4292:36	4292:36	6	*
NAME	4292:38	4292:38	4	input
LEAF_NODE	4292:38	4292:38	5	input
LEAF_NODE	4292:43	4292:43	3	)
LEAF_NODE	4293:0	4293:0	2	{
STATEMENTS	4294:1	4319:1	2	
SIMPLE_DECL	4294:1	4294:15	3	char * datetime ;
VAR_DECL	4294:1	4294:7	4	char * datetime
TYPE	4294:1	4294:5	5	char *
TYPE_NAME	4294:1	4294:1	6	char
LEAF_NODE	4294:1	4294:1	7	char
POINTER	4294:5	4294:5	6	*
LEAF_NODE	4294:5	4294:5	7	*
NAME	4294:7	4294:7	5	datetime
LEAF_NODE	4294:7	4294:7	6	datetime
LEAF_NODE	4294:15	4294:15	4	;
SELECTION	4296:1	4297:34	3	
KEYWORD	4296:1	4296:1	4	if
LEAF_NODE	4296:1	4296:1	5	if
LEAF_NODE	4296:4	4296:4	4	(
CONDITION	4296:5	4296:5	4	TIFFGetField ( input , TIFFTAG_DATETIME , & datetime ) != 0 && ( strlen ( datetime ) >= 19 )
EXPR	4296:5	4296:5	5	TIFFGetField ( input , TIFFTAG_DATETIME , & datetime ) != 0 && ( strlen ( datetime ) >= 19 )
AND	4296:5	4297:8	6	TIFFGetField ( input , TIFFTAG_DATETIME , & datetime ) != 0 && ( strlen ( datetime ) >= 19 )
EXPR	4296:5	4296:57	7	TIFFGetField ( input , TIFFTAG_DATETIME , & datetime ) != 0
FUNCTION_CALL	4296:5	4296:52	8	TIFFGetField ( input , TIFFTAG_DATETIME , & datetime )
CALLEE	4296:5	4296:5	9	TIFFGetField
LEAF_NODE	4296:5	4296:5	10	TIFFGetField
LEAF_NODE	4296:17	4296:17	9	(
ARGUMENT	4296:18	4296:18	9	input
FIELD	4296:18	4296:18	10	input
LEAF_NODE	4296:18	4296:18	11	input
LEAF_NODE	4296:23	4296:23	9	,
ARGUMENT	4296:25	4296:25	9	TIFFTAG_DATETIME
FIELD	4296:25	4296:25	10	TIFFTAG_DATETIME
LEAF_NODE	4296:25	4296:25	11	TIFFTAG_DATETIME
LEAF_NODE	4296:41	4296:41	9	,
ARGUMENT	4296:43	4296:43	9	& datetime
UNARY_EXPR	4296:43	4296:44	10	& datetime
UNARY_OPERATOR	4296:43	4296:43	11	&
LEAF_NODE	4296:43	4296:43	12	&
FIELD	4296:44	4296:44	11	datetime
LEAF_NODE	4296:44	4296:44	12	datetime
LEAF_NODE	4296:52	4296:52	9	)
EQ_OPERATOR	4296:54	4296:54	8	!=
LEAF_NODE	4296:54	4296:54	9	!=
FIELD	4296:57	4296:57	8	0
LEAF_NODE	4296:57	4296:57	9	0
LEAF_NODE	4297:5	4297:5	7	&&
EXPR	4297:8	4297:31	7	( strlen ( datetime ) >= 19 )
LEAF_NODE	4297:8	4297:8	8	(
FUNCTION_CALL	4297:9	4297:24	8	strlen ( datetime )
CALLEE	4297:9	4297:9	9	strlen
LEAF_NODE	4297:9	4297:9	10	strlen
LEAF_NODE	4297:15	4297:15	9	(
ARGUMENT	4297:16	4297:16	9	datetime
FIELD	4297:16	4297:16	10	datetime
LEAF_NODE	4297:16	4297:16	11	datetime
LEAF_NODE	4297:24	4297:24	9	)
REL_OPERATOR	4297:26	4297:26	8	>=
LEAF_NODE	4297:26	4297:26	9	>=
FIELD	4297:29	4297:29	8	19
LEAF_NODE	4297:29	4297:29	9	19
LEAF_NODE	4297:31	4297:31	8	)
LEAF_NODE	4297:33	4297:33	4	)
STATEMENTS	4297:34	4315:1	4	
LEAF_NODE	4297:34	4297:34	5	{
STATEMENTS	4298:2	4314:2	5	
EXPR_STATEMENT	4298:2	4298:26	6	t2p -> pdf_datetime [ 0 ] = 'D' ;
EXPR	4298:2	4298:2	7	t2p -> pdf_datetime [ 0 ] = 'D'
ASSIGN	4298:2	4298:23	8	t2p -> pdf_datetime [ 0 ] = 'D'
LVAL	4298:2	4298:2	9	t2p -> pdf_datetime [ 0 ]
FIELD	4298:2	4298:21	10	t2p -> pdf_datetime [ 0 ]
LEAF_NODE	4298:2	4298:2	11	t2p
LEAF_NODE	4298:5	4298:5	11	->
LEAF_NODE	4298:7	4298:7	11	pdf_datetime
LEAF_NODE	4298:19	4298:19	11	[
EXPR	4298:20	4298:20	11	0
FIELD	4298:20	4298:20	12	0
LEAF_NODE	4298:20	4298:20	13	0
LEAF_NODE	4298:21	4298:21	11	]
ASSIGN_OP	4298:22	4298:22	9	=
LEAF_NODE	4298:22	4298:22	10	=
RVAL	4298:23	4298:23	9	'D'
FIELD	4298:23	4298:23	10	'D'
LEAF_NODE	4298:23	4298:23	11	'D'
LEAF_NODE	4298:26	4298:26	7	;
EXPR_STATEMENT	4299:2	4299:26	6	t2p -> pdf_datetime [ 1 ] = ':' ;
EXPR	4299:2	4299:2	7	t2p -> pdf_datetime [ 1 ] = ':'
ASSIGN	4299:2	4299:23	8	t2p -> pdf_datetime [ 1 ] = ':'
LVAL	4299:2	4299:2	9	t2p -> pdf_datetime [ 1 ]
FIELD	4299:2	4299:21	10	t2p -> pdf_datetime [ 1 ]
LEAF_NODE	4299:2	4299:2	11	t2p
LEAF_NODE	4299:5	4299:5	11	->
LEAF_NODE	4299:7	4299:7	11	pdf_datetime
LEAF_NODE	4299:19	4299:19	11	[
EXPR	4299:20	4299:20	11	1
FIELD	4299:20	4299:20	12	1
LEAF_NODE	4299:20	4299:20	13	1
LEAF_NODE	4299:21	4299:21	11	]
ASSIGN_OP	4299:22	4299:22	9	=
LEAF_NODE	4299:22	4299:22	10	=
RVAL	4299:23	4299:23	9	':'
FIELD	4299:23	4299:23	10	':'
LEAF_NODE	4299:23	4299:23	11	':'
LEAF_NODE	4299:26	4299:26	7	;
EXPR_STATEMENT	4300:2	4300:34	6	t2p -> pdf_datetime [ 2 ] = datetime [ 0 ] ;
EXPR	4300:2	4300:2	7	t2p -> pdf_datetime [ 2 ] = datetime [ 0 ]
ASSIGN	4300:2	4300:23	8	t2p -> pdf_datetime [ 2 ] = datetime [ 0 ]
LVAL	4300:2	4300:2	9	t2p -> pdf_datetime [ 2 ]
FIELD	4300:2	4300:21	10	t2p -> pdf_datetime [ 2 ]
LEAF_NODE	4300:2	4300:2	11	t2p
LEAF_NODE	4300:5	4300:5	11	->
LEAF_NODE	4300:7	4300:7	11	pdf_datetime
LEAF_NODE	4300:19	4300:19	11	[
EXPR	4300:20	4300:20	11	2
FIELD	4300:20	4300:20	12	2
LEAF_NODE	4300:20	4300:20	13	2
LEAF_NODE	4300:21	4300:21	11	]
ASSIGN_OP	4300:22	4300:22	9	=
LEAF_NODE	4300:22	4300:22	10	=
RVAL	4300:23	4300:23	9	datetime [ 0 ]
FIELD	4300:23	4300:33	10	datetime [ 0 ]
LEAF_NODE	4300:23	4300:23	11	datetime
LEAF_NODE	4300:31	4300:31	11	[
EXPR	4300:32	4300:32	11	0
FIELD	4300:32	4300:32	12	0
LEAF_NODE	4300:32	4300:32	13	0
LEAF_NODE	4300:33	4300:33	11	]
LEAF_NODE	4300:34	4300:34	7	;
EXPR_STATEMENT	4301:2	4301:34	6	t2p -> pdf_datetime [ 3 ] = datetime [ 1 ] ;
EXPR	4301:2	4301:2	7	t2p -> pdf_datetime [ 3 ] = datetime [ 1 ]
ASSIGN	4301:2	4301:23	8	t2p -> pdf_datetime [ 3 ] = datetime [ 1 ]
LVAL	4301:2	4301:2	9	t2p -> pdf_datetime [ 3 ]
FIELD	4301:2	4301:21	10	t2p -> pdf_datetime [ 3 ]
LEAF_NODE	4301:2	4301:2	11	t2p
LEAF_NODE	4301:5	4301:5	11	->
LEAF_NODE	4301:7	4301:7	11	pdf_datetime
LEAF_NODE	4301:19	4301:19	11	[
EXPR	4301:20	4301:20	11	3
FIELD	4301:20	4301:20	12	3
LEAF_NODE	4301:20	4301:20	13	3
LEAF_NODE	4301:21	4301:21	11	]
ASSIGN_OP	4301:22	4301:22	9	=
LEAF_NODE	4301:22	4301:22	10	=
RVAL	4301:23	4301:23	9	datetime [ 1 ]
FIELD	4301:23	4301:33	10	datetime [ 1 ]
LEAF_NODE	4301:23	4301:23	11	datetime
LEAF_NODE	4301:31	4301:31	11	[
EXPR	4301:32	4301:32	11	1
FIELD	4301:32	4301:32	12	1
LEAF_NODE	4301:32	4301:32	13	1
LEAF_NODE	4301:33	4301:33	11	]
LEAF_NODE	4301:34	4301:34	7	;
EXPR_STATEMENT	4302:2	4302:34	6	t2p -> pdf_datetime [ 4 ] = datetime [ 2 ] ;
EXPR	4302:2	4302:2	7	t2p -> pdf_datetime [ 4 ] = datetime [ 2 ]
ASSIGN	4302:2	4302:23	8	t2p -> pdf_datetime [ 4 ] = datetime [ 2 ]
LVAL	4302:2	4302:2	9	t2p -> pdf_datetime [ 4 ]
FIELD	4302:2	4302:21	10	t2p -> pdf_datetime [ 4 ]
LEAF_NODE	4302:2	4302:2	11	t2p
LEAF_NODE	4302:5	4302:5	11	->
LEAF_NODE	4302:7	4302:7	11	pdf_datetime
LEAF_NODE	4302:19	4302:19	11	[
EXPR	4302:20	4302:20	11	4
FIELD	4302:20	4302:20	12	4
LEAF_NODE	4302:20	4302:20	13	4
LEAF_NODE	4302:21	4302:21	11	]
ASSIGN_OP	4302:22	4302:22	9	=
LEAF_NODE	4302:22	4302:22	10	=
RVAL	4302:23	4302:23	9	datetime [ 2 ]
FIELD	4302:23	4302:33	10	datetime [ 2 ]
LEAF_NODE	4302:23	4302:23	11	datetime
LEAF_NODE	4302:31	4302:31	11	[
EXPR	4302:32	4302:32	11	2
FIELD	4302:32	4302:32	12	2
LEAF_NODE	4302:32	4302:32	13	2
LEAF_NODE	4302:33	4302:33	11	]
LEAF_NODE	4302:34	4302:34	7	;
EXPR_STATEMENT	4303:2	4303:34	6	t2p -> pdf_datetime [ 5 ] = datetime [ 3 ] ;
EXPR	4303:2	4303:2	7	t2p -> pdf_datetime [ 5 ] = datetime [ 3 ]
ASSIGN	4303:2	4303:23	8	t2p -> pdf_datetime [ 5 ] = datetime [ 3 ]
LVAL	4303:2	4303:2	9	t2p -> pdf_datetime [ 5 ]
FIELD	4303:2	4303:21	10	t2p -> pdf_datetime [ 5 ]
LEAF_NODE	4303:2	4303:2	11	t2p
LEAF_NODE	4303:5	4303:5	11	->
LEAF_NODE	4303:7	4303:7	11	pdf_datetime
LEAF_NODE	4303:19	4303:19	11	[
EXPR	4303:20	4303:20	11	5
FIELD	4303:20	4303:20	12	5
LEAF_NODE	4303:20	4303:20	13	5
LEAF_NODE	4303:21	4303:21	11	]
ASSIGN_OP	4303:22	4303:22	9	=
LEAF_NODE	4303:22	4303:22	10	=
RVAL	4303:23	4303:23	9	datetime [ 3 ]
FIELD	4303:23	4303:33	10	datetime [ 3 ]
LEAF_NODE	4303:23	4303:23	11	datetime
LEAF_NODE	4303:31	4303:31	11	[
EXPR	4303:32	4303:32	11	3
FIELD	4303:32	4303:32	12	3
LEAF_NODE	4303:32	4303:32	13	3
LEAF_NODE	4303:33	4303:33	11	]
LEAF_NODE	4303:34	4303:34	7	;
EXPR_STATEMENT	4304:2	4304:34	6	t2p -> pdf_datetime [ 6 ] = datetime [ 5 ] ;
EXPR	4304:2	4304:2	7	t2p -> pdf_datetime [ 6 ] = datetime [ 5 ]
ASSIGN	4304:2	4304:23	8	t2p -> pdf_datetime [ 6 ] = datetime [ 5 ]
LVAL	4304:2	4304:2	9	t2p -> pdf_datetime [ 6 ]
FIELD	4304:2	4304:21	10	t2p -> pdf_datetime [ 6 ]
LEAF_NODE	4304:2	4304:2	11	t2p
LEAF_NODE	4304:5	4304:5	11	->
LEAF_NODE	4304:7	4304:7	11	pdf_datetime
LEAF_NODE	4304:19	4304:19	11	[
EXPR	4304:20	4304:20	11	6
FIELD	4304:20	4304:20	12	6
LEAF_NODE	4304:20	4304:20	13	6
LEAF_NODE	4304:21	4304:21	11	]
ASSIGN_OP	4304:22	4304:22	9	=
LEAF_NODE	4304:22	4304:22	10	=
RVAL	4304:23	4304:23	9	datetime [ 5 ]
FIELD	4304:23	4304:33	10	datetime [ 5 ]
LEAF_NODE	4304:23	4304:23	11	datetime
LEAF_NODE	4304:31	4304:31	11	[
EXPR	4304:32	4304:32	11	5
FIELD	4304:32	4304:32	12	5
LEAF_NODE	4304:32	4304:32	13	5
LEAF_NODE	4304:33	4304:33	11	]
LEAF_NODE	4304:34	4304:34	7	;
EXPR_STATEMENT	4305:2	4305:34	6	t2p -> pdf_datetime [ 7 ] = datetime [ 6 ] ;
EXPR	4305:2	4305:2	7	t2p -> pdf_datetime [ 7 ] = datetime [ 6 ]
ASSIGN	4305:2	4305:23	8	t2p -> pdf_datetime [ 7 ] = datetime [ 6 ]
LVAL	4305:2	4305:2	9	t2p -> pdf_datetime [ 7 ]
FIELD	4305:2	4305:21	10	t2p -> pdf_datetime [ 7 ]
LEAF_NODE	4305:2	4305:2	11	t2p
LEAF_NODE	4305:5	4305:5	11	->
LEAF_NODE	4305:7	4305:7	11	pdf_datetime
LEAF_NODE	4305:19	4305:19	11	[
EXPR	4305:20	4305:20	11	7
FIELD	4305:20	4305:20	12	7
LEAF_NODE	4305:20	4305:20	13	7
LEAF_NODE	4305:21	4305:21	11	]
ASSIGN_OP	4305:22	4305:22	9	=
LEAF_NODE	4305:22	4305:22	10	=
RVAL	4305:23	4305:23	9	datetime [ 6 ]
FIELD	4305:23	4305:33	10	datetime [ 6 ]
LEAF_NODE	4305:23	4305:23	11	datetime
LEAF_NODE	4305:31	4305:31	11	[
EXPR	4305:32	4305:32	11	6
FIELD	4305:32	4305:32	12	6
LEAF_NODE	4305:32	4305:32	13	6
LEAF_NODE	4305:33	4305:33	11	]
LEAF_NODE	4305:34	4305:34	7	;
EXPR_STATEMENT	4306:2	4306:34	6	t2p -> pdf_datetime [ 8 ] = datetime [ 8 ] ;
EXPR	4306:2	4306:2	7	t2p -> pdf_datetime [ 8 ] = datetime [ 8 ]
ASSIGN	4306:2	4306:23	8	t2p -> pdf_datetime [ 8 ] = datetime [ 8 ]
LVAL	4306:2	4306:2	9	t2p -> pdf_datetime [ 8 ]
FIELD	4306:2	4306:21	10	t2p -> pdf_datetime [ 8 ]
LEAF_NODE	4306:2	4306:2	11	t2p
LEAF_NODE	4306:5	4306:5	11	->
LEAF_NODE	4306:7	4306:7	11	pdf_datetime
LEAF_NODE	4306:19	4306:19	11	[
EXPR	4306:20	4306:20	11	8
FIELD	4306:20	4306:20	12	8
LEAF_NODE	4306:20	4306:20	13	8
LEAF_NODE	4306:21	4306:21	11	]
ASSIGN_OP	4306:22	4306:22	9	=
LEAF_NODE	4306:22	4306:22	10	=
RVAL	4306:23	4306:23	9	datetime [ 8 ]
FIELD	4306:23	4306:33	10	datetime [ 8 ]
LEAF_NODE	4306:23	4306:23	11	datetime
LEAF_NODE	4306:31	4306:31	11	[
EXPR	4306:32	4306:32	11	8
FIELD	4306:32	4306:32	12	8
LEAF_NODE	4306:32	4306:32	13	8
LEAF_NODE	4306:33	4306:33	11	]
LEAF_NODE	4306:34	4306:34	7	;
EXPR_STATEMENT	4307:2	4307:34	6	t2p -> pdf_datetime [ 9 ] = datetime [ 9 ] ;
EXPR	4307:2	4307:2	7	t2p -> pdf_datetime [ 9 ] = datetime [ 9 ]
ASSIGN	4307:2	4307:23	8	t2p -> pdf_datetime [ 9 ] = datetime [ 9 ]
LVAL	4307:2	4307:2	9	t2p -> pdf_datetime [ 9 ]
FIELD	4307:2	4307:21	10	t2p -> pdf_datetime [ 9 ]
LEAF_NODE	4307:2	4307:2	11	t2p
LEAF_NODE	4307:5	4307:5	11	->
LEAF_NODE	4307:7	4307:7	11	pdf_datetime
LEAF_NODE	4307:19	4307:19	11	[
EXPR	4307:20	4307:20	11	9
FIELD	4307:20	4307:20	12	9
LEAF_NODE	4307:20	4307:20	13	9
LEAF_NODE	4307:21	4307:21	11	]
ASSIGN_OP	4307:22	4307:22	9	=
LEAF_NODE	4307:22	4307:22	10	=
RVAL	4307:23	4307:23	9	datetime [ 9 ]
FIELD	4307:23	4307:33	10	datetime [ 9 ]
LEAF_NODE	4307:23	4307:23	11	datetime
LEAF_NODE	4307:31	4307:31	11	[
EXPR	4307:32	4307:32	11	9
FIELD	4307:32	4307:32	12	9
LEAF_NODE	4307:32	4307:32	13	9
LEAF_NODE	4307:33	4307:33	11	]
LEAF_NODE	4307:34	4307:34	7	;
EXPR_STATEMENT	4308:2	4308:36	6	t2p -> pdf_datetime [ 10 ] = datetime [ 11 ] ;
EXPR	4308:2	4308:2	7	t2p -> pdf_datetime [ 10 ] = datetime [ 11 ]
ASSIGN	4308:2	4308:24	8	t2p -> pdf_datetime [ 10 ] = datetime [ 11 ]
LVAL	4308:2	4308:2	9	t2p -> pdf_datetime [ 10 ]
FIELD	4308:2	4308:22	10	t2p -> pdf_datetime [ 10 ]
LEAF_NODE	4308:2	4308:2	11	t2p
LEAF_NODE	4308:5	4308:5	11	->
LEAF_NODE	4308:7	4308:7	11	pdf_datetime
LEAF_NODE	4308:19	4308:19	11	[
EXPR	4308:20	4308:20	11	10
FIELD	4308:20	4308:20	12	10
LEAF_NODE	4308:20	4308:20	13	10
LEAF_NODE	4308:22	4308:22	11	]
ASSIGN_OP	4308:23	4308:23	9	=
LEAF_NODE	4308:23	4308:23	10	=
RVAL	4308:24	4308:24	9	datetime [ 11 ]
FIELD	4308:24	4308:35	10	datetime [ 11 ]
LEAF_NODE	4308:24	4308:24	11	datetime
LEAF_NODE	4308:32	4308:32	11	[
EXPR	4308:33	4308:33	11	11
FIELD	4308:33	4308:33	12	11
LEAF_NODE	4308:33	4308:33	13	11
LEAF_NODE	4308:35	4308:35	11	]
LEAF_NODE	4308:36	4308:36	7	;
EXPR_STATEMENT	4309:2	4309:36	6	t2p -> pdf_datetime [ 11 ] = datetime [ 12 ] ;
EXPR	4309:2	4309:2	7	t2p -> pdf_datetime [ 11 ] = datetime [ 12 ]
ASSIGN	4309:2	4309:24	8	t2p -> pdf_datetime [ 11 ] = datetime [ 12 ]
LVAL	4309:2	4309:2	9	t2p -> pdf_datetime [ 11 ]
FIELD	4309:2	4309:22	10	t2p -> pdf_datetime [ 11 ]
LEAF_NODE	4309:2	4309:2	11	t2p
LEAF_NODE	4309:5	4309:5	11	->
LEAF_NODE	4309:7	4309:7	11	pdf_datetime
LEAF_NODE	4309:19	4309:19	11	[
EXPR	4309:20	4309:20	11	11
FIELD	4309:20	4309:20	12	11
LEAF_NODE	4309:20	4309:20	13	11
LEAF_NODE	4309:22	4309:22	11	]
ASSIGN_OP	4309:23	4309:23	9	=
LEAF_NODE	4309:23	4309:23	10	=
RVAL	4309:24	4309:24	9	datetime [ 12 ]
FIELD	4309:24	4309:35	10	datetime [ 12 ]
LEAF_NODE	4309:24	4309:24	11	datetime
LEAF_NODE	4309:32	4309:32	11	[
EXPR	4309:33	4309:33	11	12
FIELD	4309:33	4309:33	12	12
LEAF_NODE	4309:33	4309:33	13	12
LEAF_NODE	4309:35	4309:35	11	]
LEAF_NODE	4309:36	4309:36	7	;
EXPR_STATEMENT	4310:2	4310:36	6	t2p -> pdf_datetime [ 12 ] = datetime [ 14 ] ;
EXPR	4310:2	4310:2	7	t2p -> pdf_datetime [ 12 ] = datetime [ 14 ]
ASSIGN	4310:2	4310:24	8	t2p -> pdf_datetime [ 12 ] = datetime [ 14 ]
LVAL	4310:2	4310:2	9	t2p -> pdf_datetime [ 12 ]
FIELD	4310:2	4310:22	10	t2p -> pdf_datetime [ 12 ]
LEAF_NODE	4310:2	4310:2	11	t2p
LEAF_NODE	4310:5	4310:5	11	->
LEAF_NODE	4310:7	4310:7	11	pdf_datetime
LEAF_NODE	4310:19	4310:19	11	[
EXPR	4310:20	4310:20	11	12
FIELD	4310:20	4310:20	12	12
LEAF_NODE	4310:20	4310:20	13	12
LEAF_NODE	4310:22	4310:22	11	]
ASSIGN_OP	4310:23	4310:23	9	=
LEAF_NODE	4310:23	4310:23	10	=
RVAL	4310:24	4310:24	9	datetime [ 14 ]
FIELD	4310:24	4310:35	10	datetime [ 14 ]
LEAF_NODE	4310:24	4310:24	11	datetime
LEAF_NODE	4310:32	4310:32	11	[
EXPR	4310:33	4310:33	11	14
FIELD	4310:33	4310:33	12	14
LEAF_NODE	4310:33	4310:33	13	14
LEAF_NODE	4310:35	4310:35	11	]
LEAF_NODE	4310:36	4310:36	7	;
EXPR_STATEMENT	4311:2	4311:36	6	t2p -> pdf_datetime [ 13 ] = datetime [ 15 ] ;
EXPR	4311:2	4311:2	7	t2p -> pdf_datetime [ 13 ] = datetime [ 15 ]
ASSIGN	4311:2	4311:24	8	t2p -> pdf_datetime [ 13 ] = datetime [ 15 ]
LVAL	4311:2	4311:2	9	t2p -> pdf_datetime [ 13 ]
FIELD	4311:2	4311:22	10	t2p -> pdf_datetime [ 13 ]
LEAF_NODE	4311:2	4311:2	11	t2p
LEAF_NODE	4311:5	4311:5	11	->
LEAF_NODE	4311:7	4311:7	11	pdf_datetime
LEAF_NODE	4311:19	4311:19	11	[
EXPR	4311:20	4311:20	11	13
FIELD	4311:20	4311:20	12	13
LEAF_NODE	4311:20	4311:20	13	13
LEAF_NODE	4311:22	4311:22	11	]
ASSIGN_OP	4311:23	4311:23	9	=
LEAF_NODE	4311:23	4311:23	10	=
RVAL	4311:24	4311:24	9	datetime [ 15 ]
FIELD	4311:24	4311:35	10	datetime [ 15 ]
LEAF_NODE	4311:24	4311:24	11	datetime
LEAF_NODE	4311:32	4311:32	11	[
EXPR	4311:33	4311:33	11	15
FIELD	4311:33	4311:33	12	15
LEAF_NODE	4311:33	4311:33	13	15
LEAF_NODE	4311:35	4311:35	11	]
LEAF_NODE	4311:36	4311:36	7	;
EXPR_STATEMENT	4312:2	4312:36	6	t2p -> pdf_datetime [ 14 ] = datetime [ 17 ] ;
EXPR	4312:2	4312:2	7	t2p -> pdf_datetime [ 14 ] = datetime [ 17 ]
ASSIGN	4312:2	4312:24	8	t2p -> pdf_datetime [ 14 ] = datetime [ 17 ]
LVAL	4312:2	4312:2	9	t2p -> pdf_datetime [ 14 ]
FIELD	4312:2	4312:22	10	t2p -> pdf_datetime [ 14 ]
LEAF_NODE	4312:2	4312:2	11	t2p
LEAF_NODE	4312:5	4312:5	11	->
LEAF_NODE	4312:7	4312:7	11	pdf_datetime
LEAF_NODE	4312:19	4312:19	11	[
EXPR	4312:20	4312:20	11	14
FIELD	4312:20	4312:20	12	14
LEAF_NODE	4312:20	4312:20	13	14
LEAF_NODE	4312:22	4312:22	11	]
ASSIGN_OP	4312:23	4312:23	9	=
LEAF_NODE	4312:23	4312:23	10	=
RVAL	4312:24	4312:24	9	datetime [ 17 ]
FIELD	4312:24	4312:35	10	datetime [ 17 ]
LEAF_NODE	4312:24	4312:24	11	datetime
LEAF_NODE	4312:32	4312:32	11	[
EXPR	4312:33	4312:33	11	17
FIELD	4312:33	4312:33	12	17
LEAF_NODE	4312:33	4312:33	13	17
LEAF_NODE	4312:35	4312:35	11	]
LEAF_NODE	4312:36	4312:36	7	;
EXPR_STATEMENT	4313:2	4313:36	6	t2p -> pdf_datetime [ 15 ] = datetime [ 18 ] ;
EXPR	4313:2	4313:2	7	t2p -> pdf_datetime [ 15 ] = datetime [ 18 ]
ASSIGN	4313:2	4313:24	8	t2p -> pdf_datetime [ 15 ] = datetime [ 18 ]
LVAL	4313:2	4313:2	9	t2p -> pdf_datetime [ 15 ]
FIELD	4313:2	4313:22	10	t2p -> pdf_datetime [ 15 ]
LEAF_NODE	4313:2	4313:2	11	t2p
LEAF_NODE	4313:5	4313:5	11	->
LEAF_NODE	4313:7	4313:7	11	pdf_datetime
LEAF_NODE	4313:19	4313:19	11	[
EXPR	4313:20	4313:20	11	15
FIELD	4313:20	4313:20	12	15
LEAF_NODE	4313:20	4313:20	13	15
LEAF_NODE	4313:22	4313:22	11	]
ASSIGN_OP	4313:23	4313:23	9	=
LEAF_NODE	4313:23	4313:23	10	=
RVAL	4313:24	4313:24	9	datetime [ 18 ]
FIELD	4313:24	4313:35	10	datetime [ 18 ]
LEAF_NODE	4313:24	4313:24	11	datetime
LEAF_NODE	4313:32	4313:32	11	[
EXPR	4313:33	4313:33	11	18
FIELD	4313:33	4313:33	12	18
LEAF_NODE	4313:33	4313:33	13	18
LEAF_NODE	4313:35	4313:35	11	]
LEAF_NODE	4313:36	4313:36	7	;
EXPR_STATEMENT	4314:2	4314:30	6	t2p -> pdf_datetime [ 16 ] = '\0' ;
EXPR	4314:2	4314:2	7	t2p -> pdf_datetime [ 16 ] = '\0'
ASSIGN	4314:2	4314:26	8	t2p -> pdf_datetime [ 16 ] = '\0'
LVAL	4314:2	4314:2	9	t2p -> pdf_datetime [ 16 ]
FIELD	4314:2	4314:22	10	t2p -> pdf_datetime [ 16 ]
LEAF_NODE	4314:2	4314:2	11	t2p
LEAF_NODE	4314:5	4314:5	11	->
LEAF_NODE	4314:7	4314:7	11	pdf_datetime
LEAF_NODE	4314:19	4314:19	11	[
EXPR	4314:20	4314:20	11	16
FIELD	4314:20	4314:20	12	16
LEAF_NODE	4314:20	4314:20	13	16
LEAF_NODE	4314:22	4314:22	11	]
ASSIGN_OP	4314:24	4314:24	9	=
LEAF_NODE	4314:24	4314:24	10	=
RVAL	4314:26	4314:26	9	'\0'
FIELD	4314:26	4314:26	10	'\0'
LEAF_NODE	4314:26	4314:26	11	'\0'
LEAF_NODE	4314:30	4314:30	7	;
LEAF_NODE	4315:1	4315:1	5	}
SELECTION	4315:3	4315:8	3	
KEYWORD	4315:3	4315:3	4	else
LEAF_NODE	4315:3	4315:3	5	else
STATEMENTS	4315:8	4317:1	4	
LEAF_NODE	4315:8	4315:8	5	{
STATEMENTS	4316:2	4316:2	5	
EXPR_STATEMENT	4316:2	4316:26	6	t2p_pdf_currenttime ( t2p ) ;
EXPR	4316:2	4316:2	7	t2p_pdf_currenttime ( t2p )
FUNCTION_CALL	4316:2	4316:25	8	t2p_pdf_currenttime ( t2p )
CALLEE	4316:2	4316:2	9	t2p_pdf_currenttime
LEAF_NODE	4316:2	4316:2	10	t2p_pdf_currenttime
LEAF_NODE	4316:21	4316:21	9	(
ARGUMENT	4316:22	4316:22	9	t2p
FIELD	4316:22	4316:22	10	t2p
LEAF_NODE	4316:22	4316:22	11	t2p
LEAF_NODE	4316:25	4316:25	9	)
LEAF_NODE	4316:26	4316:26	7	;
LEAF_NODE	4317:1	4317:1	5	}
JUMP_STATEMENT	4319:1	4319:7	3	return DESTINATION ;
KEYWORD	4319:1	4319:1	4	return
LEAF_NODE	4319:1	4319:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	4319:7	4319:7	4	;
LEAF_NODE	4320:0	4320:0	2	}
FUNCTION_DEF	4326:0	4360:0	1	
RETURN_TYPE	4326:0	4326:0	2	tsize_t
TYPE_NAME	4326:0	4326:0	3	tsize_t
LEAF_NODE	4326:0	4326:0	4	tsize_t
FUNCTION_NAME	4326:8	4326:8	2	t2p_write_pdf_pages
LEAF_NODE	4326:8	4326:8	3	t2p_write_pdf_pages
PARAMETER_LIST	4326:27	4326:50	2	( T2P * t2p , TIFF * output )
LEAF_NODE	4326:27	4326:27	3	(
PARAMETER_DECL	4326:28	4326:33	3	T2P * t2p
TYPE	4326:28	4326:31	4	T2P *
TYPE_NAME	4326:28	4326:28	5	T2P
LEAF_NODE	4326:28	4326:28	6	T2P
POINTER	4326:31	4326:31	5	*
LEAF_NODE	4326:31	4326:31	6	*
NAME	4326:33	4326:33	4	t2p
LEAF_NODE	4326:33	4326:33	5	t2p
LEAF_NODE	4326:36	4326:36	3	,
PARAMETER_DECL	4326:38	4326:44	3	TIFF * output
TYPE	4326:38	4326:42	4	TIFF *
TYPE_NAME	4326:38	4326:38	5	TIFF
LEAF_NODE	4326:38	4326:38	6	TIFF
POINTER	4326:42	4326:42	5	*
LEAF_NODE	4326:42	4326:42	6	*
NAME	4326:44	4326:44	4	output
LEAF_NODE	4326:44	4326:44	5	output
LEAF_NODE	4326:50	4326:50	3	)
LEAF_NODE	4327:0	4327:0	2	{
STATEMENTS	4328:1	4359:16	2	
SIMPLE_DECL	4328:1	4328:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4328:1	4328:9	4	tsize_t written ; written = 0
TYPE	4328:1	4328:1	5	tsize_t
TYPE_NAME	4328:1	4328:1	6	tsize_t
LEAF_NODE	4328:1	4328:1	7	tsize_t
NAME	4328:9	4328:9	5	written
LEAF_NODE	4328:9	4328:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4328:9	4328:9	5	written = 0
ASSIGN	4328:9	4328:17	6	written = 0
LVAL	4328:9	4328:9	7	written
NAME	4328:9	4328:9	8	written
LEAF_NODE	4328:9	4328:9	9	written
ASSIGN_OP	4328:16	4328:16	7	=
LEAF_NODE	4328:16	4328:16	8	=
RVAL	4328:17	4328:17	7	0
FIELD	4328:17	4328:17	8	0
LEAF_NODE	4328:17	4328:17	9	0
LEAF_NODE	4328:18	4328:18	4	;
SIMPLE_DECL	4329:1	4329:11	3	tdir_t i ; i = 0 ;
VAR_DECL	4329:1	4329:8	4	tdir_t i ; i = 0
TYPE	4329:1	4329:1	5	tdir_t
TYPE_NAME	4329:1	4329:1	6	tdir_t
LEAF_NODE	4329:1	4329:1	7	tdir_t
NAME	4329:8	4329:8	5	i
LEAF_NODE	4329:8	4329:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	4329:8	4329:8	5	i = 0
ASSIGN	4329:8	4329:10	6	i = 0
LVAL	4329:8	4329:8	7	i
NAME	4329:8	4329:8	8	i
LEAF_NODE	4329:8	4329:8	9	i
ASSIGN_OP	4329:9	4329:9	7	=
LEAF_NODE	4329:9	4329:9	8	=
RVAL	4329:10	4329:10	7	0
FIELD	4329:10	4329:10	8	0
LEAF_NODE	4329:10	4329:10	9	0
LEAF_NODE	4329:11	4329:11	4	;
SIMPLE_DECL	4330:1	4330:16	3	char [ 32 ] buffer ;
VAR_DECL	4330:1	4330:6	4	char [ 32 ] buffer
TYPE	4330:1	4330:12	5	char [ 32 ]
TYPE_NAME	4330:1	4330:1	6	char
LEAF_NODE	4330:1	4330:1	7	char
TYPE_SUFFIX	4330:12	4330:15	6	[ 32 ]
LEAF_NODE	4330:12	4330:12	7	[
FIELD	4330:13	4330:13	7	32
LEAF_NODE	4330:13	4330:13	8	32
LEAF_NODE	4330:15	4330:15	7	]
NAME	4330:6	4330:6	5	buffer
LEAF_NODE	4330:6	4330:6	6	buffer
LEAF_NODE	4330:16	4330:16	4	;
SIMPLE_DECL	4331:1	4331:13	3	int buflen ; buflen = 0 ;
VAR_DECL	4331:1	4331:5	4	int buflen ; buflen = 0
TYPE	4331:1	4331:1	5	int
TYPE_NAME	4331:1	4331:1	6	int
LEAF_NODE	4331:1	4331:1	7	int
NAME	4331:5	4331:5	5	buflen
LEAF_NODE	4331:5	4331:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	4331:5	4331:5	5	buflen = 0
ASSIGN	4331:5	4331:12	6	buflen = 0
LVAL	4331:5	4331:5	7	buflen
NAME	4331:5	4331:5	8	buflen
LEAF_NODE	4331:5	4331:5	9	buflen
ASSIGN_OP	4331:11	4331:11	7	=
LEAF_NODE	4331:11	4331:11	8	=
RVAL	4331:12	4331:12	7	0
FIELD	4331:12	4331:12	8	0
LEAF_NODE	4331:12	4331:12	9	0
LEAF_NODE	4331:13	4331:13	4	;
SIMPLE_DECL	4333:1	4333:11	3	int page ; page = 0 ;
VAR_DECL	4333:1	4333:5	4	int page ; page = 0
TYPE	4333:1	4333:1	5	int
TYPE_NAME	4333:1	4333:1	6	int
LEAF_NODE	4333:1	4333:1	7	int
NAME	4333:5	4333:5	5	page
LEAF_NODE	4333:5	4333:5	6	page
LEAF_NODE	0:0	0:0	5	;
INIT	4333:5	4333:5	5	page = 0
ASSIGN	4333:5	4333:10	6	page = 0
LVAL	4333:5	4333:5	7	page
NAME	4333:5	4333:5	8	page
LEAF_NODE	4333:5	4333:5	9	page
ASSIGN_OP	4333:9	4333:9	7	=
LEAF_NODE	4333:9	4333:9	8	=
RVAL	4333:10	4333:10	7	0
FIELD	4333:10	4333:10	8	0
LEAF_NODE	4333:10	4333:10	9	0
LEAF_NODE	4333:11	4333:11	4	;
EXPR_STATEMENT	4334:1	4335:47	3	written += t2pWriteFile ( output , ( tdata_t ) "<< \n/Type /Pages \n/Kids [ " , 26 ) ;
EXPR	4334:1	4334:1	4	written += t2pWriteFile ( output , ( tdata_t ) "<< \n/Type /Pages \n/Kids [ " , 26 )
ASSIGN	4334:1	4334:12	5	written += t2pWriteFile ( output , ( tdata_t ) "<< \n/Type /Pages \n/Kids [ " , 26 )
LVAL	4334:1	4334:1	6	written
FIELD	4334:1	4334:1	7	written
LEAF_NODE	4334:1	4334:1	8	written
ASSIGN_OP	4334:9	4334:9	6	+=
LEAF_NODE	4334:9	4334:9	7	+=
RVAL	4334:12	4334:12	6	t2pWriteFile ( output , ( tdata_t ) "<< \n/Type /Pages \n/Kids [ " , 26 )
FUNCTION_CALL	4334:12	4335:46	7	t2pWriteFile ( output , ( tdata_t ) "<< \n/Type /Pages \n/Kids [ " , 26 )
CALLEE	4334:12	4334:12	8	t2pWriteFile
LEAF_NODE	4334:12	4334:12	9	t2pWriteFile
LEAF_NODE	4334:24	4334:24	8	(
ARGUMENT	4334:25	4334:25	8	output
FIELD	4334:25	4334:25	9	output
LEAF_NODE	4334:25	4334:25	10	output
LEAF_NODE	4334:31	4334:31	8	,
ARGUMENT	4335:2	4335:12	8	( tdata_t ) "<< \n/Type /Pages \n/Kids [ "
LEAF_NODE	4335:2	4335:2	9	(
TYPE_NAME	4335:3	4335:3	9	tdata_t
LEAF_NODE	4335:3	4335:3	10	tdata_t
LEAF_NODE	4335:10	4335:10	9	)
FIELD	4335:12	4335:12	9	"<< \n/Type /Pages \n/Kids [ "
LEAF_NODE	4335:12	4335:12	10	"<< \n/Type /Pages \n/Kids [ "
LEAF_NODE	4335:42	4335:42	8	,
ARGUMENT	4335:44	4335:44	8	26
FIELD	4335:44	4335:44	9	26
LEAF_NODE	4335:44	4335:44	10	26
LEAF_NODE	4335:46	4335:46	8	)
LEAF_NODE	4335:47	4335:47	4	;
EXPR_STATEMENT	4336:1	4336:24	3	page = t2p -> pdf_pages + 1 ;
EXPR	4336:1	4336:1	4	page = t2p -> pdf_pages + 1
ASSIGN	4336:1	4336:8	5	page = t2p -> pdf_pages + 1
LVAL	4336:1	4336:1	6	page
FIELD	4336:1	4336:1	7	page
LEAF_NODE	4336:1	4336:1	8	page
ASSIGN_OP	4336:6	4336:6	6	=
LEAF_NODE	4336:6	4336:6	7	=
RVAL	4336:8	4336:23	6	t2p -> pdf_pages + 1
FIELD	4336:8	4336:13	7	t2p -> pdf_pages
LEAF_NODE	4336:8	4336:8	8	t2p
LEAF_NODE	4336:11	4336:11	8	->
LEAF_NODE	4336:13	4336:13	8	pdf_pages
LEAF_NODE	4336:22	4336:22	7	+
FIELD	4336:23	4336:23	7	1
LEAF_NODE	4336:23	4336:23	8	1
LEAF_NODE	4336:24	4336:24	4	;
ITERATION	4337:1	4337:36	3	
KEYWORD	4337:1	4337:1	4	for
LEAF_NODE	4337:1	4337:1	5	for
LEAF_NODE	4337:5	4337:5	4	(
FOR_INIT	4337:6	4337:9	4	i = 0 ;
EXPR	4337:6	4337:6	5	i = 0
ASSIGN	4337:6	4337:8	6	i = 0
LVAL	4337:6	4337:6	7	i
FIELD	4337:6	4337:6	8	i
LEAF_NODE	4337:6	4337:6	9	i
ASSIGN_OP	4337:7	4337:7	7	=
LEAF_NODE	4337:7	4337:7	8	=
RVAL	4337:8	4337:8	7	0
FIELD	4337:8	4337:8	8	0
LEAF_NODE	4337:8	4337:8	9	0
LEAF_NODE	4337:9	4337:9	5	;
CONDITION	4337:10	4337:10	4	i < t2p -> tiff_pagecount
EXPR	4337:10	4337:12	5	i < t2p -> tiff_pagecount
FIELD	4337:10	4337:10	6	i
LEAF_NODE	4337:10	4337:10	7	i
REL_OPERATOR	4337:11	4337:11	6	<
LEAF_NODE	4337:11	4337:11	7	<
FIELD	4337:12	4337:17	6	t2p -> tiff_pagecount
LEAF_NODE	4337:12	4337:12	7	t2p
LEAF_NODE	4337:15	4337:15	7	->
LEAF_NODE	4337:17	4337:17	7	tiff_pagecount
LEAF_NODE	4337:31	4337:31	4	;
FOR_EXPR	4337:32	4337:32	4	i ++
EXPR	4337:32	4337:32	5	i ++
FIELD	4337:32	4337:33	6	i ++
LEAF_NODE	4337:32	4337:32	7	i
LEAF_NODE	4337:33	4337:33	7	++
LEAF_NODE	4337:35	4337:35	4	)
STATEMENTS	4337:36	4352:1	4	
LEAF_NODE	4337:36	4337:36	5	{
STATEMENTS	4338:2	4349:4	5	
EXPR_STATEMENT	4338:2	4338:53	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%d" , page ) ;
EXPR	4338:2	4338:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%d" , page )
ASSIGN	4338:2	4338:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%d" , page )
LVAL	4338:2	4338:2	9	buflen
FIELD	4338:2	4338:2	10	buflen
LEAF_NODE	4338:2	4338:2	11	buflen
ASSIGN_OP	4338:8	4338:8	9	=
LEAF_NODE	4338:8	4338:8	10	=
RVAL	4338:9	4338:9	9	snprintf ( buffer , sizeof ( buffer ) , "%d" , page )
FUNCTION_CALL	4338:9	4338:52	10	snprintf ( buffer , sizeof ( buffer ) , "%d" , page )
CALLEE	4338:9	4338:9	11	snprintf
LEAF_NODE	4338:9	4338:9	12	snprintf
LEAF_NODE	4338:17	4338:17	11	(
ARGUMENT	4338:18	4338:18	11	buffer
FIELD	4338:18	4338:18	12	buffer
LEAF_NODE	4338:18	4338:18	13	buffer
LEAF_NODE	4338:24	4338:24	11	,
ARGUMENT	4338:26	4338:26	11	sizeof ( buffer )
FUNCTION_CALL	4338:26	4338:39	12	sizeof ( buffer )
CALLEE	4338:26	4338:26	13	sizeof
LEAF_NODE	4338:26	4338:26	14	sizeof
LEAF_NODE	4338:32	4338:32	13	(
ARGUMENT	4338:33	4338:33	13	buffer
FIELD	4338:33	4338:33	14	buffer
LEAF_NODE	4338:33	4338:33	15	buffer
LEAF_NODE	4338:39	4338:39	13	)
LEAF_NODE	4338:40	4338:40	11	,
ARGUMENT	4338:42	4338:42	11	"%d"
FIELD	4338:42	4338:42	12	"%d"
LEAF_NODE	4338:42	4338:42	13	"%d"
LEAF_NODE	4338:46	4338:46	11	,
ARGUMENT	4338:48	4338:48	11	page
FIELD	4338:48	4338:48	12	page
LEAF_NODE	4338:48	4338:48	13	page
LEAF_NODE	4338:52	4338:52	11	)
LEAF_NODE	4338:53	4338:53	7	;
EXPR_STATEMENT	4339:2	4339:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4339:2	4339:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4339:2	4339:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4339:2	4339:2	9	check_snprintf_ret
LEAF_NODE	4339:2	4339:2	10	check_snprintf_ret
LEAF_NODE	4339:20	4339:20	9	(
ARGUMENT	4339:21	4339:21	9	t2p
FIELD	4339:21	4339:21	10	t2p
LEAF_NODE	4339:21	4339:21	11	t2p
LEAF_NODE	4339:24	4339:24	9	,
ARGUMENT	4339:26	4339:26	9	buflen
FIELD	4339:26	4339:26	10	buflen
LEAF_NODE	4339:26	4339:26	11	buflen
LEAF_NODE	4339:32	4339:32	9	,
ARGUMENT	4339:34	4339:34	9	buffer
FIELD	4339:34	4339:34	10	buffer
LEAF_NODE	4339:34	4339:34	11	buffer
LEAF_NODE	4339:40	4339:40	9	)
LEAF_NODE	4339:41	4339:41	7	;
EXPR_STATEMENT	4340:2	4340:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4340:2	4340:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4340:2	4340:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4340:2	4340:2	9	written
FIELD	4340:2	4340:2	10	written
LEAF_NODE	4340:2	4340:2	11	written
ASSIGN_OP	4340:10	4340:10	9	+=
LEAF_NODE	4340:10	4340:10	10	+=
RVAL	4340:13	4340:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4340:13	4340:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4340:13	4340:13	11	t2pWriteFile
LEAF_NODE	4340:13	4340:13	12	t2pWriteFile
LEAF_NODE	4340:25	4340:25	11	(
ARGUMENT	4340:26	4340:26	11	output
FIELD	4340:26	4340:26	12	output
LEAF_NODE	4340:26	4340:26	13	output
LEAF_NODE	4340:32	4340:32	11	,
ARGUMENT	4340:34	4340:44	11	( tdata_t ) buffer
LEAF_NODE	4340:34	4340:34	12	(
TYPE_NAME	4340:35	4340:35	12	tdata_t
LEAF_NODE	4340:35	4340:35	13	tdata_t
LEAF_NODE	4340:42	4340:42	12	)
FIELD	4340:44	4340:44	12	buffer
LEAF_NODE	4340:44	4340:44	13	buffer
LEAF_NODE	4340:50	4340:50	11	,
ARGUMENT	4340:52	4340:52	11	buflen
FIELD	4340:52	4340:52	12	buflen
LEAF_NODE	4340:52	4340:52	13	buflen
LEAF_NODE	4340:58	4340:58	11	)
LEAF_NODE	4340:59	4340:59	7	;
EXPR_STATEMENT	4341:2	4341:55	6	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 ) ;
EXPR	4341:2	4341:2	7	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
ASSIGN	4341:2	4341:13	8	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
LVAL	4341:2	4341:2	9	written
FIELD	4341:2	4341:2	10	written
LEAF_NODE	4341:2	4341:2	11	written
ASSIGN_OP	4341:10	4341:10	9	+=
LEAF_NODE	4341:10	4341:10	10	+=
RVAL	4341:13	4341:13	9	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
FUNCTION_CALL	4341:13	4341:54	10	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
CALLEE	4341:13	4341:13	11	t2pWriteFile
LEAF_NODE	4341:13	4341:13	12	t2pWriteFile
LEAF_NODE	4341:25	4341:25	11	(
ARGUMENT	4341:26	4341:26	11	output
FIELD	4341:26	4341:26	12	output
LEAF_NODE	4341:26	4341:26	13	output
LEAF_NODE	4341:32	4341:32	11	,
ARGUMENT	4341:34	4341:44	11	( tdata_t ) " 0 R "
LEAF_NODE	4341:34	4341:34	12	(
TYPE_NAME	4341:35	4341:35	12	tdata_t
LEAF_NODE	4341:35	4341:35	13	tdata_t
LEAF_NODE	4341:42	4341:42	12	)
FIELD	4341:44	4341:44	12	" 0 R "
LEAF_NODE	4341:44	4341:44	13	" 0 R "
LEAF_NODE	4341:51	4341:51	11	,
ARGUMENT	4341:53	4341:53	11	5
FIELD	4341:53	4341:53	12	5
LEAF_NODE	4341:53	4341:53	13	5
LEAF_NODE	4341:54	4341:54	11	)
LEAF_NODE	4341:55	4341:55	7	;
SELECTION	4342:2	4342:22	6	
KEYWORD	4342:2	4342:2	7	if
LEAF_NODE	4342:2	4342:2	8	if
LEAF_NODE	4342:5	4342:5	7	(
CONDITION	4342:7	4342:7	7	( ( i + 1 ) % 8 ) == 0
EXPR	4342:7	4342:18	8	( ( i + 1 ) % 8 ) == 0
LEAF_NODE	4342:7	4342:7	9	(
LEAF_NODE	4342:8	4342:8	9	(
FIELD	4342:9	4342:9	9	i
LEAF_NODE	4342:9	4342:9	10	i
LEAF_NODE	4342:10	4342:10	9	+
FIELD	4342:11	4342:11	9	1
LEAF_NODE	4342:11	4342:11	10	1
LEAF_NODE	4342:12	4342:12	9	)
LEAF_NODE	4342:13	4342:13	9	%
FIELD	4342:14	4342:14	9	8
LEAF_NODE	4342:14	4342:14	10	8
LEAF_NODE	4342:15	4342:15	9	)
EQ_OPERATOR	4342:16	4342:16	9	==
LEAF_NODE	4342:16	4342:16	10	==
FIELD	4342:18	4342:18	9	0
LEAF_NODE	4342:18	4342:18	10	0
LEAF_NODE	4342:20	4342:20	7	)
STATEMENTS	4342:22	4344:2	7	
LEAF_NODE	4342:22	4342:22	8	{
STATEMENTS	4343:3	4343:3	8	
EXPR_STATEMENT	4343:3	4343:53	9	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4343:3	4343:3	10	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4343:3	4343:14	11	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4343:3	4343:3	12	written
FIELD	4343:3	4343:3	13	written
LEAF_NODE	4343:3	4343:3	14	written
ASSIGN_OP	4343:11	4343:11	12	+=
LEAF_NODE	4343:11	4343:11	13	+=
RVAL	4343:14	4343:14	12	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4343:14	4343:52	13	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4343:14	4343:14	14	t2pWriteFile
LEAF_NODE	4343:14	4343:14	15	t2pWriteFile
LEAF_NODE	4343:26	4343:26	14	(
ARGUMENT	4343:27	4343:27	14	output
FIELD	4343:27	4343:27	15	output
LEAF_NODE	4343:27	4343:27	16	output
LEAF_NODE	4343:33	4343:33	14	,
ARGUMENT	4343:35	4343:45	14	( tdata_t ) "\n"
LEAF_NODE	4343:35	4343:35	15	(
TYPE_NAME	4343:36	4343:36	15	tdata_t
LEAF_NODE	4343:36	4343:36	16	tdata_t
LEAF_NODE	4343:43	4343:43	15	)
FIELD	4343:45	4343:45	15	"\n"
LEAF_NODE	4343:45	4343:45	16	"\n"
LEAF_NODE	4343:49	4343:49	14	,
ARGUMENT	4343:51	4343:51	14	1
FIELD	4343:51	4343:51	15	1
LEAF_NODE	4343:51	4343:51	16	1
LEAF_NODE	4343:52	4343:52	14	)
LEAF_NODE	4343:53	4343:53	10	;
LEAF_NODE	4344:2	4344:2	8	}
EXPR_STATEMENT	4345:2	4345:10	6	page += 3 ;
EXPR	4345:2	4345:2	7	page += 3
ASSIGN	4345:2	4345:9	8	page += 3
LVAL	4345:2	4345:2	9	page
FIELD	4345:2	4345:2	10	page
LEAF_NODE	4345:2	4345:2	11	page
ASSIGN_OP	4345:7	4345:7	9	+=
LEAF_NODE	4345:7	4345:7	10	+=
RVAL	4345:9	4345:9	9	3
FIELD	4345:9	4345:9	10	3
LEAF_NODE	4345:9	4345:9	11	3
LEAF_NODE	4345:10	4345:10	7	;
EXPR_STATEMENT	4346:2	4346:39	6	page += t2p -> tiff_pages [ i ] . page_extra ;
EXPR	4346:2	4346:2	7	page += t2p -> tiff_pages [ i ] . page_extra
ASSIGN	4346:2	4346:10	8	page += t2p -> tiff_pages [ i ] . page_extra
LVAL	4346:2	4346:2	9	page
FIELD	4346:2	4346:2	10	page
LEAF_NODE	4346:2	4346:2	11	page
ASSIGN_OP	4346:7	4346:7	9	+=
LEAF_NODE	4346:7	4346:7	10	+=
RVAL	4346:10	4346:10	9	t2p -> tiff_pages [ i ] . page_extra
FIELD	4346:10	4346:29	10	t2p -> tiff_pages [ i ] . page_extra
LEAF_NODE	4346:10	4346:10	11	t2p
LEAF_NODE	4346:13	4346:13	11	->
LEAF_NODE	4346:15	4346:15	11	tiff_pages
LEAF_NODE	4346:25	4346:25	11	[
EXPR	4346:26	4346:26	11	i
FIELD	4346:26	4346:26	12	i
LEAF_NODE	4346:26	4346:26	13	i
LEAF_NODE	4346:27	4346:27	11	]
LEAF_NODE	4346:28	4346:28	11	.
LEAF_NODE	4346:29	4346:29	11	page_extra
LEAF_NODE	4346:39	4346:39	7	;
SELECTION	4347:2	4347:41	6	
KEYWORD	4347:2	4347:2	7	if
LEAF_NODE	4347:2	4347:2	8	if
LEAF_NODE	4347:4	4347:4	7	(
CONDITION	4347:5	4347:5	7	t2p -> tiff_pages [ i ] . page_tilecount > 0
EXPR	4347:5	4347:39	8	t2p -> tiff_pages [ i ] . page_tilecount > 0
FIELD	4347:5	4347:24	9	t2p -> tiff_pages [ i ] . page_tilecount
LEAF_NODE	4347:5	4347:5	10	t2p
LEAF_NODE	4347:8	4347:8	10	->
LEAF_NODE	4347:10	4347:10	10	tiff_pages
LEAF_NODE	4347:20	4347:20	10	[
EXPR	4347:21	4347:21	10	i
FIELD	4347:21	4347:21	11	i
LEAF_NODE	4347:21	4347:21	12	i
LEAF_NODE	4347:22	4347:22	10	]
LEAF_NODE	4347:23	4347:23	10	.
LEAF_NODE	4347:24	4347:24	10	page_tilecount
REL_OPERATOR	4347:38	4347:38	9	>
LEAF_NODE	4347:38	4347:38	10	>
FIELD	4347:39	4347:39	9	0
LEAF_NODE	4347:39	4347:39	10	0
LEAF_NODE	4347:40	4347:40	7	)
STATEMENTS	4347:41	4349:2	7	
LEAF_NODE	4347:41	4347:41	8	{
STATEMENTS	4348:3	4348:3	8	
EXPR_STATEMENT	4348:3	4348:50	9	page += ( 2 * t2p -> tiff_pages [ i ] . page_tilecount ) ;
EXPR	4348:3	4348:3	10	page += ( 2 * t2p -> tiff_pages [ i ] . page_tilecount )
ASSIGN	4348:3	4348:11	11	page += ( 2 * t2p -> tiff_pages [ i ] . page_tilecount )
LVAL	4348:3	4348:3	12	page
FIELD	4348:3	4348:3	13	page
LEAF_NODE	4348:3	4348:3	14	page
ASSIGN_OP	4348:8	4348:8	12	+=
LEAF_NODE	4348:8	4348:8	13	+=
RVAL	4348:11	4348:49	12	( 2 * t2p -> tiff_pages [ i ] . page_tilecount )
LEAF_NODE	4348:11	4348:11	13	(
FIELD	4348:12	4348:12	13	2
LEAF_NODE	4348:12	4348:12	14	2
LEAF_NODE	4348:14	4348:14	13	*
FIELD	4348:16	4348:35	13	t2p -> tiff_pages [ i ] . page_tilecount
LEAF_NODE	4348:16	4348:16	14	t2p
LEAF_NODE	4348:19	4348:19	14	->
LEAF_NODE	4348:21	4348:21	14	tiff_pages
LEAF_NODE	4348:31	4348:31	14	[
EXPR	4348:32	4348:32	14	i
FIELD	4348:32	4348:32	15	i
LEAF_NODE	4348:32	4348:32	16	i
LEAF_NODE	4348:33	4348:33	14	]
LEAF_NODE	4348:34	4348:34	14	.
LEAF_NODE	4348:35	4348:35	14	page_tilecount
LEAF_NODE	4348:49	4348:49	13	)
LEAF_NODE	4348:50	4348:50	10	;
LEAF_NODE	4349:2	4349:2	8	}
SELECTION	4349:4	4349:9	6	
KEYWORD	4349:4	4349:4	7	else
LEAF_NODE	4349:4	4349:4	8	else
STATEMENTS	4349:9	4351:2	7	
LEAF_NODE	4349:9	4349:9	8	{
STATEMENTS	4350:3	4350:3	8	
EXPR_STATEMENT	4350:3	4350:11	9	page += 2 ;
EXPR	4350:3	4350:3	10	page += 2
ASSIGN	4350:3	4350:10	11	page += 2
LVAL	4350:3	4350:3	12	page
FIELD	4350:3	4350:3	13	page
LEAF_NODE	4350:3	4350:3	14	page
ASSIGN_OP	4350:8	4350:8	12	+=
LEAF_NODE	4350:8	4350:8	13	+=
RVAL	4350:10	4350:10	12	2
FIELD	4350:10	4350:10	13	2
LEAF_NODE	4350:10	4350:10	14	2
LEAF_NODE	4350:11	4350:11	10	;
LEAF_NODE	4351:2	4351:2	8	}
LEAF_NODE	4352:1	4352:1	5	}
EXPR_STATEMENT	4353:1	4353:61	3	written += t2pWriteFile ( output , ( tdata_t ) "] \n/Count " , 10 ) ;
EXPR	4353:1	4353:1	4	written += t2pWriteFile ( output , ( tdata_t ) "] \n/Count " , 10 )
ASSIGN	4353:1	4353:12	5	written += t2pWriteFile ( output , ( tdata_t ) "] \n/Count " , 10 )
LVAL	4353:1	4353:1	6	written
FIELD	4353:1	4353:1	7	written
LEAF_NODE	4353:1	4353:1	8	written
ASSIGN_OP	4353:9	4353:9	6	+=
LEAF_NODE	4353:9	4353:9	7	+=
RVAL	4353:12	4353:12	6	t2pWriteFile ( output , ( tdata_t ) "] \n/Count " , 10 )
FUNCTION_CALL	4353:12	4353:60	7	t2pWriteFile ( output , ( tdata_t ) "] \n/Count " , 10 )
CALLEE	4353:12	4353:12	8	t2pWriteFile
LEAF_NODE	4353:12	4353:12	9	t2pWriteFile
LEAF_NODE	4353:24	4353:24	8	(
ARGUMENT	4353:25	4353:25	8	output
FIELD	4353:25	4353:25	9	output
LEAF_NODE	4353:25	4353:25	10	output
LEAF_NODE	4353:31	4353:31	8	,
ARGUMENT	4353:33	4353:43	8	( tdata_t ) "] \n/Count "
LEAF_NODE	4353:33	4353:33	9	(
TYPE_NAME	4353:34	4353:34	9	tdata_t
LEAF_NODE	4353:34	4353:34	10	tdata_t
LEAF_NODE	4353:41	4353:41	9	)
FIELD	4353:43	4353:43	9	"] \n/Count "
LEAF_NODE	4353:43	4353:43	10	"] \n/Count "
LEAF_NODE	4353:56	4353:56	8	,
ARGUMENT	4353:58	4353:58	8	10
FIELD	4353:58	4353:58	9	10
LEAF_NODE	4353:58	4353:58	10	10
LEAF_NODE	4353:60	4353:60	8	)
LEAF_NODE	4353:61	4353:61	4	;
EXPR_STATEMENT	4354:1	4354:67	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%d" , t2p -> tiff_pagecount ) ;
EXPR	4354:1	4354:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%d" , t2p -> tiff_pagecount )
ASSIGN	4354:1	4354:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%d" , t2p -> tiff_pagecount )
LVAL	4354:1	4354:1	6	buflen
FIELD	4354:1	4354:1	7	buflen
LEAF_NODE	4354:1	4354:1	8	buflen
ASSIGN_OP	4354:7	4354:7	6	=
LEAF_NODE	4354:7	4354:7	7	=
RVAL	4354:8	4354:8	6	snprintf ( buffer , sizeof ( buffer ) , "%d" , t2p -> tiff_pagecount )
FUNCTION_CALL	4354:8	4354:66	7	snprintf ( buffer , sizeof ( buffer ) , "%d" , t2p -> tiff_pagecount )
CALLEE	4354:8	4354:8	8	snprintf
LEAF_NODE	4354:8	4354:8	9	snprintf
LEAF_NODE	4354:16	4354:16	8	(
ARGUMENT	4354:17	4354:17	8	buffer
FIELD	4354:17	4354:17	9	buffer
LEAF_NODE	4354:17	4354:17	10	buffer
LEAF_NODE	4354:23	4354:23	8	,
ARGUMENT	4354:25	4354:25	8	sizeof ( buffer )
FUNCTION_CALL	4354:25	4354:38	9	sizeof ( buffer )
CALLEE	4354:25	4354:25	10	sizeof
LEAF_NODE	4354:25	4354:25	11	sizeof
LEAF_NODE	4354:31	4354:31	10	(
ARGUMENT	4354:32	4354:32	10	buffer
FIELD	4354:32	4354:32	11	buffer
LEAF_NODE	4354:32	4354:32	12	buffer
LEAF_NODE	4354:38	4354:38	10	)
LEAF_NODE	4354:39	4354:39	8	,
ARGUMENT	4354:41	4354:41	8	"%d"
FIELD	4354:41	4354:41	9	"%d"
LEAF_NODE	4354:41	4354:41	10	"%d"
LEAF_NODE	4354:45	4354:45	8	,
ARGUMENT	4354:47	4354:47	8	t2p -> tiff_pagecount
FIELD	4354:47	4354:52	9	t2p -> tiff_pagecount
LEAF_NODE	4354:47	4354:47	10	t2p
LEAF_NODE	4354:50	4354:50	10	->
LEAF_NODE	4354:52	4354:52	10	tiff_pagecount
LEAF_NODE	4354:66	4354:66	8	)
LEAF_NODE	4354:67	4354:67	4	;
EXPR_STATEMENT	4355:1	4355:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4355:1	4355:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4355:1	4355:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4355:1	4355:1	6	check_snprintf_ret
LEAF_NODE	4355:1	4355:1	7	check_snprintf_ret
LEAF_NODE	4355:19	4355:19	6	(
ARGUMENT	4355:20	4355:20	6	t2p
FIELD	4355:20	4355:20	7	t2p
LEAF_NODE	4355:20	4355:20	8	t2p
LEAF_NODE	4355:23	4355:23	6	,
ARGUMENT	4355:25	4355:25	6	buflen
FIELD	4355:25	4355:25	7	buflen
LEAF_NODE	4355:25	4355:25	8	buflen
LEAF_NODE	4355:31	4355:31	6	,
ARGUMENT	4355:33	4355:33	6	buffer
FIELD	4355:33	4355:33	7	buffer
LEAF_NODE	4355:33	4355:33	8	buffer
LEAF_NODE	4355:39	4355:39	6	)
LEAF_NODE	4355:40	4355:40	4	;
EXPR_STATEMENT	4356:1	4356:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4356:1	4356:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4356:1	4356:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4356:1	4356:1	6	written
FIELD	4356:1	4356:1	7	written
LEAF_NODE	4356:1	4356:1	8	written
ASSIGN_OP	4356:9	4356:9	6	+=
LEAF_NODE	4356:9	4356:9	7	+=
RVAL	4356:12	4356:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4356:12	4356:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4356:12	4356:12	8	t2pWriteFile
LEAF_NODE	4356:12	4356:12	9	t2pWriteFile
LEAF_NODE	4356:24	4356:24	8	(
ARGUMENT	4356:25	4356:25	8	output
FIELD	4356:25	4356:25	9	output
LEAF_NODE	4356:25	4356:25	10	output
LEAF_NODE	4356:31	4356:31	8	,
ARGUMENT	4356:33	4356:43	8	( tdata_t ) buffer
LEAF_NODE	4356:33	4356:33	9	(
TYPE_NAME	4356:34	4356:34	9	tdata_t
LEAF_NODE	4356:34	4356:34	10	tdata_t
LEAF_NODE	4356:41	4356:41	9	)
FIELD	4356:43	4356:43	9	buffer
LEAF_NODE	4356:43	4356:43	10	buffer
LEAF_NODE	4356:49	4356:49	8	,
ARGUMENT	4356:51	4356:51	8	buflen
FIELD	4356:51	4356:51	9	buflen
LEAF_NODE	4356:51	4356:51	10	buflen
LEAF_NODE	4356:57	4356:57	8	)
LEAF_NODE	4356:58	4356:58	4	;
EXPR_STATEMENT	4357:1	4357:57	3	written += t2pWriteFile ( output , ( tdata_t ) " \n>> \n" , 6 ) ;
EXPR	4357:1	4357:1	4	written += t2pWriteFile ( output , ( tdata_t ) " \n>> \n" , 6 )
ASSIGN	4357:1	4357:12	5	written += t2pWriteFile ( output , ( tdata_t ) " \n>> \n" , 6 )
LVAL	4357:1	4357:1	6	written
FIELD	4357:1	4357:1	7	written
LEAF_NODE	4357:1	4357:1	8	written
ASSIGN_OP	4357:9	4357:9	6	+=
LEAF_NODE	4357:9	4357:9	7	+=
RVAL	4357:12	4357:12	6	t2pWriteFile ( output , ( tdata_t ) " \n>> \n" , 6 )
FUNCTION_CALL	4357:12	4357:56	7	t2pWriteFile ( output , ( tdata_t ) " \n>> \n" , 6 )
CALLEE	4357:12	4357:12	8	t2pWriteFile
LEAF_NODE	4357:12	4357:12	9	t2pWriteFile
LEAF_NODE	4357:24	4357:24	8	(
ARGUMENT	4357:25	4357:25	8	output
FIELD	4357:25	4357:25	9	output
LEAF_NODE	4357:25	4357:25	10	output
LEAF_NODE	4357:31	4357:31	8	,
ARGUMENT	4357:33	4357:43	8	( tdata_t ) " \n>> \n"
LEAF_NODE	4357:33	4357:33	9	(
TYPE_NAME	4357:34	4357:34	9	tdata_t
LEAF_NODE	4357:34	4357:34	10	tdata_t
LEAF_NODE	4357:41	4357:41	9	)
FIELD	4357:43	4357:43	9	" \n>> \n"
LEAF_NODE	4357:43	4357:43	10	" \n>> \n"
LEAF_NODE	4357:53	4357:53	8	,
ARGUMENT	4357:55	4357:55	8	6
FIELD	4357:55	4357:55	9	6
LEAF_NODE	4357:55	4357:55	10	6
LEAF_NODE	4357:56	4357:56	8	)
LEAF_NODE	4357:57	4357:57	4	;
LEAF_NODE	4359:1	4359:1	3	return
LEAF_NODE	4359:7	4359:7	3	(
LEAF_NODE	4359:8	4359:8	3	written
LEAF_NODE	4359:15	4359:15	3	)
LEAF_NODE	4359:16	4359:16	3	;
LEAF_NODE	4360:0	4360:0	2	}
FUNCTION_DEF	4366:0	4461:0	1	
RETURN_TYPE	4366:0	4366:0	2	tsize_t
TYPE_NAME	4366:0	4366:0	3	tsize_t
LEAF_NODE	4366:0	4366:0	4	tsize_t
FUNCTION_NAME	4366:8	4366:8	2	t2p_write_pdf_page
LEAF_NODE	4366:8	4366:8	3	t2p_write_pdf_page
PARAMETER_LIST	4366:26	4366:64	2	( uint32 object , T2P * t2p , TIFF * output )
LEAF_NODE	4366:26	4366:26	3	(
PARAMETER_DECL	4366:27	4366:34	3	uint32 object
TYPE	4366:27	4366:27	4	uint32
TYPE_NAME	4366:27	4366:27	5	uint32
LEAF_NODE	4366:27	4366:27	6	uint32
NAME	4366:34	4366:34	4	object
LEAF_NODE	4366:34	4366:34	5	object
LEAF_NODE	4366:40	4366:40	3	,
PARAMETER_DECL	4366:42	4366:47	3	T2P * t2p
TYPE	4366:42	4366:45	4	T2P *
TYPE_NAME	4366:42	4366:42	5	T2P
LEAF_NODE	4366:42	4366:42	6	T2P
POINTER	4366:45	4366:45	5	*
LEAF_NODE	4366:45	4366:45	6	*
NAME	4366:47	4366:47	4	t2p
LEAF_NODE	4366:47	4366:47	5	t2p
LEAF_NODE	4366:50	4366:50	3	,
PARAMETER_DECL	4366:52	4366:58	3	TIFF * output
TYPE	4366:52	4366:56	4	TIFF *
TYPE_NAME	4366:52	4366:52	5	TIFF
LEAF_NODE	4366:52	4366:52	6	TIFF
POINTER	4366:56	4366:56	5	*
LEAF_NODE	4366:56	4366:56	6	*
NAME	4366:58	4366:58	4	output
LEAF_NODE	4366:58	4366:58	5	output
LEAF_NODE	4366:64	4366:64	3	)
LEAF_NODE	4366:65	4366:65	2	{
STATEMENTS	4368:1	4460:16	2	
SIMPLE_DECL	4368:1	4368:17	3	unsigned int i ; i = 0 ;
VAR_DECL	4368:1	4368:14	4	unsigned int i ; i = 0
TYPE	4368:1	4368:1	5	unsigned int
TYPE_NAME	4368:1	4368:10	6	unsigned int
LEAF_NODE	4368:1	4368:1	7	unsigned
LEAF_NODE	4368:10	4368:10	7	int
NAME	4368:14	4368:14	5	i
LEAF_NODE	4368:14	4368:14	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	4368:14	4368:14	5	i = 0
ASSIGN	4368:14	4368:16	6	i = 0
LVAL	4368:14	4368:14	7	i
NAME	4368:14	4368:14	8	i
LEAF_NODE	4368:14	4368:14	9	i
ASSIGN_OP	4368:15	4368:15	7	=
LEAF_NODE	4368:15	4368:15	8	=
RVAL	4368:16	4368:16	7	0
FIELD	4368:16	4368:16	8	0
LEAF_NODE	4368:16	4368:16	9	0
LEAF_NODE	4368:17	4368:17	4	;
SIMPLE_DECL	4369:1	4369:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4369:1	4369:9	4	tsize_t written ; written = 0
TYPE	4369:1	4369:1	5	tsize_t
TYPE_NAME	4369:1	4369:1	6	tsize_t
LEAF_NODE	4369:1	4369:1	7	tsize_t
NAME	4369:9	4369:9	5	written
LEAF_NODE	4369:9	4369:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4369:9	4369:9	5	written = 0
ASSIGN	4369:9	4369:17	6	written = 0
LVAL	4369:9	4369:9	7	written
NAME	4369:9	4369:9	8	written
LEAF_NODE	4369:9	4369:9	9	written
ASSIGN_OP	4369:16	4369:16	7	=
LEAF_NODE	4369:16	4369:16	8	=
RVAL	4369:17	4369:17	7	0
FIELD	4369:17	4369:17	8	0
LEAF_NODE	4369:17	4369:17	9	0
LEAF_NODE	4369:18	4369:18	4	;
SIMPLE_DECL	4370:1	4370:17	3	char [ 256 ] buffer ;
VAR_DECL	4370:1	4370:6	4	char [ 256 ] buffer
TYPE	4370:1	4370:12	5	char [ 256 ]
TYPE_NAME	4370:1	4370:1	6	char
LEAF_NODE	4370:1	4370:1	7	char
TYPE_SUFFIX	4370:12	4370:16	6	[ 256 ]
LEAF_NODE	4370:12	4370:12	7	[
FIELD	4370:13	4370:13	7	256
LEAF_NODE	4370:13	4370:13	8	256
LEAF_NODE	4370:16	4370:16	7	]
NAME	4370:6	4370:6	5	buffer
LEAF_NODE	4370:6	4370:6	6	buffer
LEAF_NODE	4370:17	4370:17	4	;
SIMPLE_DECL	4371:1	4371:13	3	int buflen ; buflen = 0 ;
VAR_DECL	4371:1	4371:5	4	int buflen ; buflen = 0
TYPE	4371:1	4371:1	5	int
TYPE_NAME	4371:1	4371:1	6	int
LEAF_NODE	4371:1	4371:1	7	int
NAME	4371:5	4371:5	5	buflen
LEAF_NODE	4371:5	4371:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	4371:5	4371:5	5	buflen = 0
ASSIGN	4371:5	4371:12	6	buflen = 0
LVAL	4371:5	4371:5	7	buflen
NAME	4371:5	4371:5	8	buflen
LEAF_NODE	4371:5	4371:5	9	buflen
ASSIGN_OP	4371:11	4371:11	7	=
LEAF_NODE	4371:11	4371:11	8	=
RVAL	4371:12	4371:12	7	0
FIELD	4371:12	4371:12	8	0
LEAF_NODE	4371:12	4371:12	9	0
LEAF_NODE	4371:13	4371:13	4	;
EXPR_STATEMENT	4373:1	4373:76	3	written += t2pWriteFile ( output , ( tdata_t ) "<<\n/Type /Page \n/Parent " , 24 ) ;
EXPR	4373:1	4373:1	4	written += t2pWriteFile ( output , ( tdata_t ) "<<\n/Type /Page \n/Parent " , 24 )
ASSIGN	4373:1	4373:12	5	written += t2pWriteFile ( output , ( tdata_t ) "<<\n/Type /Page \n/Parent " , 24 )
LVAL	4373:1	4373:1	6	written
FIELD	4373:1	4373:1	7	written
LEAF_NODE	4373:1	4373:1	8	written
ASSIGN_OP	4373:9	4373:9	6	+=
LEAF_NODE	4373:9	4373:9	7	+=
RVAL	4373:12	4373:12	6	t2pWriteFile ( output , ( tdata_t ) "<<\n/Type /Page \n/Parent " , 24 )
FUNCTION_CALL	4373:12	4373:75	7	t2pWriteFile ( output , ( tdata_t ) "<<\n/Type /Page \n/Parent " , 24 )
CALLEE	4373:12	4373:12	8	t2pWriteFile
LEAF_NODE	4373:12	4373:12	9	t2pWriteFile
LEAF_NODE	4373:24	4373:24	8	(
ARGUMENT	4373:25	4373:25	8	output
FIELD	4373:25	4373:25	9	output
LEAF_NODE	4373:25	4373:25	10	output
LEAF_NODE	4373:31	4373:31	8	,
ARGUMENT	4373:33	4373:43	8	( tdata_t ) "<<\n/Type /Page \n/Parent "
LEAF_NODE	4373:33	4373:33	9	(
TYPE_NAME	4373:34	4373:34	9	tdata_t
LEAF_NODE	4373:34	4373:34	10	tdata_t
LEAF_NODE	4373:41	4373:41	9	)
FIELD	4373:43	4373:43	9	"<<\n/Type /Page \n/Parent "
LEAF_NODE	4373:43	4373:43	10	"<<\n/Type /Page \n/Parent "
LEAF_NODE	4373:71	4373:71	8	,
ARGUMENT	4373:73	4373:73	8	24
FIELD	4373:73	4373:73	9	24
LEAF_NODE	4373:73	4373:73	10	24
LEAF_NODE	4373:75	4373:75	8	)
LEAF_NODE	4373:76	4373:76	4	;
EXPR_STATEMENT	4374:1	4374:78	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_pages ) ;
EXPR	4374:1	4374:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_pages )
ASSIGN	4374:1	4374:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_pages )
LVAL	4374:1	4374:1	6	buflen
FIELD	4374:1	4374:1	7	buflen
LEAF_NODE	4374:1	4374:1	8	buflen
ASSIGN_OP	4374:7	4374:7	6	=
LEAF_NODE	4374:7	4374:7	7	=
RVAL	4374:8	4374:8	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_pages )
FUNCTION_CALL	4374:8	4374:77	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_pages )
CALLEE	4374:8	4374:8	8	snprintf
LEAF_NODE	4374:8	4374:8	9	snprintf
LEAF_NODE	4374:16	4374:16	8	(
ARGUMENT	4374:17	4374:17	8	buffer
FIELD	4374:17	4374:17	9	buffer
LEAF_NODE	4374:17	4374:17	10	buffer
LEAF_NODE	4374:23	4374:23	8	,
ARGUMENT	4374:25	4374:25	8	sizeof ( buffer )
FUNCTION_CALL	4374:25	4374:38	9	sizeof ( buffer )
CALLEE	4374:25	4374:25	10	sizeof
LEAF_NODE	4374:25	4374:25	11	sizeof
LEAF_NODE	4374:31	4374:31	10	(
ARGUMENT	4374:32	4374:32	10	buffer
FIELD	4374:32	4374:32	11	buffer
LEAF_NODE	4374:32	4374:32	12	buffer
LEAF_NODE	4374:38	4374:38	10	)
LEAF_NODE	4374:39	4374:39	8	,
ARGUMENT	4374:41	4374:41	8	"%lu"
FIELD	4374:41	4374:41	9	"%lu"
LEAF_NODE	4374:41	4374:41	10	"%lu"
LEAF_NODE	4374:46	4374:46	8	,
ARGUMENT	4374:48	4374:63	8	( unsigned long ) t2p -> pdf_pages
LEAF_NODE	4374:48	4374:48	9	(
TYPE_NAME	4374:49	4374:58	9	unsigned long
LEAF_NODE	4374:49	4374:49	10	unsigned
LEAF_NODE	4374:58	4374:58	10	long
LEAF_NODE	4374:62	4374:62	9	)
FIELD	4374:63	4374:68	9	t2p -> pdf_pages
LEAF_NODE	4374:63	4374:63	10	t2p
LEAF_NODE	4374:66	4374:66	10	->
LEAF_NODE	4374:68	4374:68	10	pdf_pages
LEAF_NODE	4374:77	4374:77	8	)
LEAF_NODE	4374:78	4374:78	4	;
EXPR_STATEMENT	4375:1	4375:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4375:1	4375:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4375:1	4375:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4375:1	4375:1	6	check_snprintf_ret
LEAF_NODE	4375:1	4375:1	7	check_snprintf_ret
LEAF_NODE	4375:19	4375:19	6	(
ARGUMENT	4375:20	4375:20	6	t2p
FIELD	4375:20	4375:20	7	t2p
LEAF_NODE	4375:20	4375:20	8	t2p
LEAF_NODE	4375:23	4375:23	6	,
ARGUMENT	4375:25	4375:25	6	buflen
FIELD	4375:25	4375:25	7	buflen
LEAF_NODE	4375:25	4375:25	8	buflen
LEAF_NODE	4375:31	4375:31	6	,
ARGUMENT	4375:33	4375:33	6	buffer
FIELD	4375:33	4375:33	7	buffer
LEAF_NODE	4375:33	4375:33	8	buffer
LEAF_NODE	4375:39	4375:39	6	)
LEAF_NODE	4375:40	4375:40	4	;
EXPR_STATEMENT	4376:1	4376:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4376:1	4376:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4376:1	4376:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4376:1	4376:1	6	written
FIELD	4376:1	4376:1	7	written
LEAF_NODE	4376:1	4376:1	8	written
ASSIGN_OP	4376:9	4376:9	6	+=
LEAF_NODE	4376:9	4376:9	7	+=
RVAL	4376:12	4376:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4376:12	4376:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4376:12	4376:12	8	t2pWriteFile
LEAF_NODE	4376:12	4376:12	9	t2pWriteFile
LEAF_NODE	4376:24	4376:24	8	(
ARGUMENT	4376:25	4376:25	8	output
FIELD	4376:25	4376:25	9	output
LEAF_NODE	4376:25	4376:25	10	output
LEAF_NODE	4376:31	4376:31	8	,
ARGUMENT	4376:33	4376:43	8	( tdata_t ) buffer
LEAF_NODE	4376:33	4376:33	9	(
TYPE_NAME	4376:34	4376:34	9	tdata_t
LEAF_NODE	4376:34	4376:34	10	tdata_t
LEAF_NODE	4376:41	4376:41	9	)
FIELD	4376:43	4376:43	9	buffer
LEAF_NODE	4376:43	4376:43	10	buffer
LEAF_NODE	4376:49	4376:49	8	,
ARGUMENT	4376:51	4376:51	8	buflen
FIELD	4376:51	4376:51	9	buflen
LEAF_NODE	4376:51	4376:51	10	buflen
LEAF_NODE	4376:57	4376:57	8	)
LEAF_NODE	4376:58	4376:58	4	;
EXPR_STATEMENT	4377:1	4377:56	3	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 ) ;
EXPR	4377:1	4377:1	4	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
ASSIGN	4377:1	4377:12	5	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
LVAL	4377:1	4377:1	6	written
FIELD	4377:1	4377:1	7	written
LEAF_NODE	4377:1	4377:1	8	written
ASSIGN_OP	4377:9	4377:9	6	+=
LEAF_NODE	4377:9	4377:9	7	+=
RVAL	4377:12	4377:12	6	t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
FUNCTION_CALL	4377:12	4377:55	7	t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
CALLEE	4377:12	4377:12	8	t2pWriteFile
LEAF_NODE	4377:12	4377:12	9	t2pWriteFile
LEAF_NODE	4377:24	4377:24	8	(
ARGUMENT	4377:25	4377:25	8	output
FIELD	4377:25	4377:25	9	output
LEAF_NODE	4377:25	4377:25	10	output
LEAF_NODE	4377:31	4377:31	8	,
ARGUMENT	4377:33	4377:43	8	( tdata_t ) " 0 R \n"
LEAF_NODE	4377:33	4377:33	9	(
TYPE_NAME	4377:34	4377:34	9	tdata_t
LEAF_NODE	4377:34	4377:34	10	tdata_t
LEAF_NODE	4377:41	4377:41	9	)
FIELD	4377:43	4377:43	9	" 0 R \n"
LEAF_NODE	4377:43	4377:43	10	" 0 R \n"
LEAF_NODE	4377:52	4377:52	8	,
ARGUMENT	4377:54	4377:54	8	6
FIELD	4377:54	4377:54	9	6
LEAF_NODE	4377:54	4377:54	10	6
LEAF_NODE	4377:55	4377:55	8	)
LEAF_NODE	4377:56	4377:56	4	;
EXPR_STATEMENT	4378:1	4378:61	3	written += t2pWriteFile ( output , ( tdata_t ) "/MediaBox [" , 11 ) ;
EXPR	4378:1	4378:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/MediaBox [" , 11 )
ASSIGN	4378:1	4378:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/MediaBox [" , 11 )
LVAL	4378:1	4378:1	6	written
FIELD	4378:1	4378:1	7	written
LEAF_NODE	4378:1	4378:1	8	written
ASSIGN_OP	4378:9	4378:9	6	+=
LEAF_NODE	4378:9	4378:9	7	+=
RVAL	4378:12	4378:12	6	t2pWriteFile ( output , ( tdata_t ) "/MediaBox [" , 11 )
FUNCTION_CALL	4378:12	4378:60	7	t2pWriteFile ( output , ( tdata_t ) "/MediaBox [" , 11 )
CALLEE	4378:12	4378:12	8	t2pWriteFile
LEAF_NODE	4378:12	4378:12	9	t2pWriteFile
LEAF_NODE	4378:24	4378:24	8	(
ARGUMENT	4378:25	4378:25	8	output
FIELD	4378:25	4378:25	9	output
LEAF_NODE	4378:25	4378:25	10	output
LEAF_NODE	4378:31	4378:31	8	,
ARGUMENT	4378:33	4378:43	8	( tdata_t ) "/MediaBox ["
LEAF_NODE	4378:33	4378:33	9	(
TYPE_NAME	4378:34	4378:34	9	tdata_t
LEAF_NODE	4378:34	4378:34	10	tdata_t
LEAF_NODE	4378:41	4378:41	9	)
FIELD	4378:43	4378:43	9	"/MediaBox ["
LEAF_NODE	4378:43	4378:43	10	"/MediaBox ["
LEAF_NODE	4378:56	4378:56	8	,
ARGUMENT	4378:58	4378:58	8	11
FIELD	4378:58	4378:58	9	11
LEAF_NODE	4378:58	4378:58	10	11
LEAF_NODE	4378:60	4378:60	8	)
LEAF_NODE	4378:61	4378:61	4	;
EXPR_STATEMENT	4379:1	4379:69	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . x1 ) ;
EXPR	4379:1	4379:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . x1 )
ASSIGN	4379:1	4379:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . x1 )
LVAL	4379:1	4379:1	6	buflen
FIELD	4379:1	4379:1	7	buflen
LEAF_NODE	4379:1	4379:1	8	buflen
ASSIGN_OP	4379:7	4379:7	6	=
LEAF_NODE	4379:7	4379:7	7	=
RVAL	4379:8	4379:8	6	snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . x1 )
FUNCTION_CALL	4379:8	4379:68	7	snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . x1 )
CALLEE	4379:8	4379:8	8	snprintf
LEAF_NODE	4379:8	4379:8	9	snprintf
LEAF_NODE	4379:16	4379:16	8	(
ARGUMENT	4379:17	4379:17	8	buffer
FIELD	4379:17	4379:17	9	buffer
LEAF_NODE	4379:17	4379:17	10	buffer
LEAF_NODE	4379:23	4379:23	8	,
ARGUMENT	4379:25	4379:25	8	sizeof ( buffer )
FUNCTION_CALL	4379:25	4379:38	9	sizeof ( buffer )
CALLEE	4379:25	4379:25	10	sizeof
LEAF_NODE	4379:25	4379:25	11	sizeof
LEAF_NODE	4379:31	4379:31	10	(
ARGUMENT	4379:32	4379:32	10	buffer
FIELD	4379:32	4379:32	11	buffer
LEAF_NODE	4379:32	4379:32	12	buffer
LEAF_NODE	4379:38	4379:38	10	)
LEAF_NODE	4379:39	4379:39	8	,
ARGUMENT	4379:41	4379:41	8	"%.4f"
FIELD	4379:41	4379:41	9	"%.4f"
LEAF_NODE	4379:41	4379:41	10	"%.4f"
LEAF_NODE	4379:47	4379:47	8	,
ARGUMENT	4379:48	4379:48	8	t2p -> pdf_mediabox . x1
FIELD	4379:48	4379:66	9	t2p -> pdf_mediabox . x1
LEAF_NODE	4379:48	4379:48	10	t2p
LEAF_NODE	4379:51	4379:51	10	->
LEAF_NODE	4379:53	4379:53	10	pdf_mediabox
LEAF_NODE	4379:65	4379:65	10	.
LEAF_NODE	4379:66	4379:66	10	x1
LEAF_NODE	4379:68	4379:68	8	)
LEAF_NODE	4379:69	4379:69	4	;
EXPR_STATEMENT	4380:1	4380:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4380:1	4380:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4380:1	4380:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4380:1	4380:1	6	check_snprintf_ret
LEAF_NODE	4380:1	4380:1	7	check_snprintf_ret
LEAF_NODE	4380:19	4380:19	6	(
ARGUMENT	4380:20	4380:20	6	t2p
FIELD	4380:20	4380:20	7	t2p
LEAF_NODE	4380:20	4380:20	8	t2p
LEAF_NODE	4380:23	4380:23	6	,
ARGUMENT	4380:25	4380:25	6	buflen
FIELD	4380:25	4380:25	7	buflen
LEAF_NODE	4380:25	4380:25	8	buflen
LEAF_NODE	4380:31	4380:31	6	,
ARGUMENT	4380:33	4380:33	6	buffer
FIELD	4380:33	4380:33	7	buffer
LEAF_NODE	4380:33	4380:33	8	buffer
LEAF_NODE	4380:39	4380:39	6	)
LEAF_NODE	4380:40	4380:40	4	;
EXPR_STATEMENT	4381:1	4381:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4381:1	4381:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4381:1	4381:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4381:1	4381:1	6	written
FIELD	4381:1	4381:1	7	written
LEAF_NODE	4381:1	4381:1	8	written
ASSIGN_OP	4381:9	4381:9	6	+=
LEAF_NODE	4381:9	4381:9	7	+=
RVAL	4381:12	4381:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4381:12	4381:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4381:12	4381:12	8	t2pWriteFile
LEAF_NODE	4381:12	4381:12	9	t2pWriteFile
LEAF_NODE	4381:24	4381:24	8	(
ARGUMENT	4381:25	4381:25	8	output
FIELD	4381:25	4381:25	9	output
LEAF_NODE	4381:25	4381:25	10	output
LEAF_NODE	4381:31	4381:31	8	,
ARGUMENT	4381:33	4381:43	8	( tdata_t ) buffer
LEAF_NODE	4381:33	4381:33	9	(
TYPE_NAME	4381:34	4381:34	9	tdata_t
LEAF_NODE	4381:34	4381:34	10	tdata_t
LEAF_NODE	4381:41	4381:41	9	)
FIELD	4381:43	4381:43	9	buffer
LEAF_NODE	4381:43	4381:43	10	buffer
LEAF_NODE	4381:49	4381:49	8	,
ARGUMENT	4381:51	4381:51	8	buflen
FIELD	4381:51	4381:51	9	buflen
LEAF_NODE	4381:51	4381:51	10	buflen
LEAF_NODE	4381:57	4381:57	8	)
LEAF_NODE	4381:58	4381:58	4	;
EXPR_STATEMENT	4382:1	4382:50	3	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 ) ;
EXPR	4382:1	4382:1	4	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
ASSIGN	4382:1	4382:12	5	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
LVAL	4382:1	4382:1	6	written
FIELD	4382:1	4382:1	7	written
LEAF_NODE	4382:1	4382:1	8	written
ASSIGN_OP	4382:9	4382:9	6	+=
LEAF_NODE	4382:9	4382:9	7	+=
RVAL	4382:12	4382:12	6	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
FUNCTION_CALL	4382:12	4382:49	7	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
CALLEE	4382:12	4382:12	8	t2pWriteFile
LEAF_NODE	4382:12	4382:12	9	t2pWriteFile
LEAF_NODE	4382:24	4382:24	8	(
ARGUMENT	4382:25	4382:25	8	output
FIELD	4382:25	4382:25	9	output
LEAF_NODE	4382:25	4382:25	10	output
LEAF_NODE	4382:31	4382:31	8	,
ARGUMENT	4382:33	4382:43	8	( tdata_t ) " "
LEAF_NODE	4382:33	4382:33	9	(
TYPE_NAME	4382:34	4382:34	9	tdata_t
LEAF_NODE	4382:34	4382:34	10	tdata_t
LEAF_NODE	4382:41	4382:41	9	)
FIELD	4382:43	4382:43	9	" "
LEAF_NODE	4382:43	4382:43	10	" "
LEAF_NODE	4382:46	4382:46	8	,
ARGUMENT	4382:48	4382:48	8	1
FIELD	4382:48	4382:48	9	1
LEAF_NODE	4382:48	4382:48	10	1
LEAF_NODE	4382:49	4382:49	8	)
LEAF_NODE	4382:50	4382:50	4	;
EXPR_STATEMENT	4383:1	4383:69	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . y1 ) ;
EXPR	4383:1	4383:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . y1 )
ASSIGN	4383:1	4383:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . y1 )
LVAL	4383:1	4383:1	6	buflen
FIELD	4383:1	4383:1	7	buflen
LEAF_NODE	4383:1	4383:1	8	buflen
ASSIGN_OP	4383:7	4383:7	6	=
LEAF_NODE	4383:7	4383:7	7	=
RVAL	4383:8	4383:8	6	snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . y1 )
FUNCTION_CALL	4383:8	4383:68	7	snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . y1 )
CALLEE	4383:8	4383:8	8	snprintf
LEAF_NODE	4383:8	4383:8	9	snprintf
LEAF_NODE	4383:16	4383:16	8	(
ARGUMENT	4383:17	4383:17	8	buffer
FIELD	4383:17	4383:17	9	buffer
LEAF_NODE	4383:17	4383:17	10	buffer
LEAF_NODE	4383:23	4383:23	8	,
ARGUMENT	4383:25	4383:25	8	sizeof ( buffer )
FUNCTION_CALL	4383:25	4383:38	9	sizeof ( buffer )
CALLEE	4383:25	4383:25	10	sizeof
LEAF_NODE	4383:25	4383:25	11	sizeof
LEAF_NODE	4383:31	4383:31	10	(
ARGUMENT	4383:32	4383:32	10	buffer
FIELD	4383:32	4383:32	11	buffer
LEAF_NODE	4383:32	4383:32	12	buffer
LEAF_NODE	4383:38	4383:38	10	)
LEAF_NODE	4383:39	4383:39	8	,
ARGUMENT	4383:41	4383:41	8	"%.4f"
FIELD	4383:41	4383:41	9	"%.4f"
LEAF_NODE	4383:41	4383:41	10	"%.4f"
LEAF_NODE	4383:47	4383:47	8	,
ARGUMENT	4383:48	4383:48	8	t2p -> pdf_mediabox . y1
FIELD	4383:48	4383:66	9	t2p -> pdf_mediabox . y1
LEAF_NODE	4383:48	4383:48	10	t2p
LEAF_NODE	4383:51	4383:51	10	->
LEAF_NODE	4383:53	4383:53	10	pdf_mediabox
LEAF_NODE	4383:65	4383:65	10	.
LEAF_NODE	4383:66	4383:66	10	y1
LEAF_NODE	4383:68	4383:68	8	)
LEAF_NODE	4383:69	4383:69	4	;
EXPR_STATEMENT	4384:1	4384:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4384:1	4384:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4384:1	4384:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4384:1	4384:1	6	check_snprintf_ret
LEAF_NODE	4384:1	4384:1	7	check_snprintf_ret
LEAF_NODE	4384:19	4384:19	6	(
ARGUMENT	4384:20	4384:20	6	t2p
FIELD	4384:20	4384:20	7	t2p
LEAF_NODE	4384:20	4384:20	8	t2p
LEAF_NODE	4384:23	4384:23	6	,
ARGUMENT	4384:25	4384:25	6	buflen
FIELD	4384:25	4384:25	7	buflen
LEAF_NODE	4384:25	4384:25	8	buflen
LEAF_NODE	4384:31	4384:31	6	,
ARGUMENT	4384:33	4384:33	6	buffer
FIELD	4384:33	4384:33	7	buffer
LEAF_NODE	4384:33	4384:33	8	buffer
LEAF_NODE	4384:39	4384:39	6	)
LEAF_NODE	4384:40	4384:40	4	;
EXPR_STATEMENT	4385:1	4385:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4385:1	4385:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4385:1	4385:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4385:1	4385:1	6	written
FIELD	4385:1	4385:1	7	written
LEAF_NODE	4385:1	4385:1	8	written
ASSIGN_OP	4385:9	4385:9	6	+=
LEAF_NODE	4385:9	4385:9	7	+=
RVAL	4385:12	4385:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4385:12	4385:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4385:12	4385:12	8	t2pWriteFile
LEAF_NODE	4385:12	4385:12	9	t2pWriteFile
LEAF_NODE	4385:24	4385:24	8	(
ARGUMENT	4385:25	4385:25	8	output
FIELD	4385:25	4385:25	9	output
LEAF_NODE	4385:25	4385:25	10	output
LEAF_NODE	4385:31	4385:31	8	,
ARGUMENT	4385:33	4385:43	8	( tdata_t ) buffer
LEAF_NODE	4385:33	4385:33	9	(
TYPE_NAME	4385:34	4385:34	9	tdata_t
LEAF_NODE	4385:34	4385:34	10	tdata_t
LEAF_NODE	4385:41	4385:41	9	)
FIELD	4385:43	4385:43	9	buffer
LEAF_NODE	4385:43	4385:43	10	buffer
LEAF_NODE	4385:49	4385:49	8	,
ARGUMENT	4385:51	4385:51	8	buflen
FIELD	4385:51	4385:51	9	buflen
LEAF_NODE	4385:51	4385:51	10	buflen
LEAF_NODE	4385:57	4385:57	8	)
LEAF_NODE	4385:58	4385:58	4	;
EXPR_STATEMENT	4386:1	4386:50	3	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 ) ;
EXPR	4386:1	4386:1	4	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
ASSIGN	4386:1	4386:12	5	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
LVAL	4386:1	4386:1	6	written
FIELD	4386:1	4386:1	7	written
LEAF_NODE	4386:1	4386:1	8	written
ASSIGN_OP	4386:9	4386:9	6	+=
LEAF_NODE	4386:9	4386:9	7	+=
RVAL	4386:12	4386:12	6	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
FUNCTION_CALL	4386:12	4386:49	7	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
CALLEE	4386:12	4386:12	8	t2pWriteFile
LEAF_NODE	4386:12	4386:12	9	t2pWriteFile
LEAF_NODE	4386:24	4386:24	8	(
ARGUMENT	4386:25	4386:25	8	output
FIELD	4386:25	4386:25	9	output
LEAF_NODE	4386:25	4386:25	10	output
LEAF_NODE	4386:31	4386:31	8	,
ARGUMENT	4386:33	4386:43	8	( tdata_t ) " "
LEAF_NODE	4386:33	4386:33	9	(
TYPE_NAME	4386:34	4386:34	9	tdata_t
LEAF_NODE	4386:34	4386:34	10	tdata_t
LEAF_NODE	4386:41	4386:41	9	)
FIELD	4386:43	4386:43	9	" "
LEAF_NODE	4386:43	4386:43	10	" "
LEAF_NODE	4386:46	4386:46	8	,
ARGUMENT	4386:48	4386:48	8	1
FIELD	4386:48	4386:48	9	1
LEAF_NODE	4386:48	4386:48	10	1
LEAF_NODE	4386:49	4386:49	8	)
LEAF_NODE	4386:50	4386:50	4	;
EXPR_STATEMENT	4387:1	4387:69	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . x2 ) ;
EXPR	4387:1	4387:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . x2 )
ASSIGN	4387:1	4387:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . x2 )
LVAL	4387:1	4387:1	6	buflen
FIELD	4387:1	4387:1	7	buflen
LEAF_NODE	4387:1	4387:1	8	buflen
ASSIGN_OP	4387:7	4387:7	6	=
LEAF_NODE	4387:7	4387:7	7	=
RVAL	4387:8	4387:8	6	snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . x2 )
FUNCTION_CALL	4387:8	4387:68	7	snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . x2 )
CALLEE	4387:8	4387:8	8	snprintf
LEAF_NODE	4387:8	4387:8	9	snprintf
LEAF_NODE	4387:16	4387:16	8	(
ARGUMENT	4387:17	4387:17	8	buffer
FIELD	4387:17	4387:17	9	buffer
LEAF_NODE	4387:17	4387:17	10	buffer
LEAF_NODE	4387:23	4387:23	8	,
ARGUMENT	4387:25	4387:25	8	sizeof ( buffer )
FUNCTION_CALL	4387:25	4387:38	9	sizeof ( buffer )
CALLEE	4387:25	4387:25	10	sizeof
LEAF_NODE	4387:25	4387:25	11	sizeof
LEAF_NODE	4387:31	4387:31	10	(
ARGUMENT	4387:32	4387:32	10	buffer
FIELD	4387:32	4387:32	11	buffer
LEAF_NODE	4387:32	4387:32	12	buffer
LEAF_NODE	4387:38	4387:38	10	)
LEAF_NODE	4387:39	4387:39	8	,
ARGUMENT	4387:41	4387:41	8	"%.4f"
FIELD	4387:41	4387:41	9	"%.4f"
LEAF_NODE	4387:41	4387:41	10	"%.4f"
LEAF_NODE	4387:47	4387:47	8	,
ARGUMENT	4387:48	4387:48	8	t2p -> pdf_mediabox . x2
FIELD	4387:48	4387:66	9	t2p -> pdf_mediabox . x2
LEAF_NODE	4387:48	4387:48	10	t2p
LEAF_NODE	4387:51	4387:51	10	->
LEAF_NODE	4387:53	4387:53	10	pdf_mediabox
LEAF_NODE	4387:65	4387:65	10	.
LEAF_NODE	4387:66	4387:66	10	x2
LEAF_NODE	4387:68	4387:68	8	)
LEAF_NODE	4387:69	4387:69	4	;
EXPR_STATEMENT	4388:1	4388:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4388:1	4388:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4388:1	4388:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4388:1	4388:1	6	check_snprintf_ret
LEAF_NODE	4388:1	4388:1	7	check_snprintf_ret
LEAF_NODE	4388:19	4388:19	6	(
ARGUMENT	4388:20	4388:20	6	t2p
FIELD	4388:20	4388:20	7	t2p
LEAF_NODE	4388:20	4388:20	8	t2p
LEAF_NODE	4388:23	4388:23	6	,
ARGUMENT	4388:25	4388:25	6	buflen
FIELD	4388:25	4388:25	7	buflen
LEAF_NODE	4388:25	4388:25	8	buflen
LEAF_NODE	4388:31	4388:31	6	,
ARGUMENT	4388:33	4388:33	6	buffer
FIELD	4388:33	4388:33	7	buffer
LEAF_NODE	4388:33	4388:33	8	buffer
LEAF_NODE	4388:39	4388:39	6	)
LEAF_NODE	4388:40	4388:40	4	;
EXPR_STATEMENT	4389:1	4389:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4389:1	4389:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4389:1	4389:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4389:1	4389:1	6	written
FIELD	4389:1	4389:1	7	written
LEAF_NODE	4389:1	4389:1	8	written
ASSIGN_OP	4389:9	4389:9	6	+=
LEAF_NODE	4389:9	4389:9	7	+=
RVAL	4389:12	4389:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4389:12	4389:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4389:12	4389:12	8	t2pWriteFile
LEAF_NODE	4389:12	4389:12	9	t2pWriteFile
LEAF_NODE	4389:24	4389:24	8	(
ARGUMENT	4389:25	4389:25	8	output
FIELD	4389:25	4389:25	9	output
LEAF_NODE	4389:25	4389:25	10	output
LEAF_NODE	4389:31	4389:31	8	,
ARGUMENT	4389:33	4389:43	8	( tdata_t ) buffer
LEAF_NODE	4389:33	4389:33	9	(
TYPE_NAME	4389:34	4389:34	9	tdata_t
LEAF_NODE	4389:34	4389:34	10	tdata_t
LEAF_NODE	4389:41	4389:41	9	)
FIELD	4389:43	4389:43	9	buffer
LEAF_NODE	4389:43	4389:43	10	buffer
LEAF_NODE	4389:49	4389:49	8	,
ARGUMENT	4389:51	4389:51	8	buflen
FIELD	4389:51	4389:51	9	buflen
LEAF_NODE	4389:51	4389:51	10	buflen
LEAF_NODE	4389:57	4389:57	8	)
LEAF_NODE	4389:58	4389:58	4	;
EXPR_STATEMENT	4390:1	4390:50	3	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 ) ;
EXPR	4390:1	4390:1	4	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
ASSIGN	4390:1	4390:12	5	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
LVAL	4390:1	4390:1	6	written
FIELD	4390:1	4390:1	7	written
LEAF_NODE	4390:1	4390:1	8	written
ASSIGN_OP	4390:9	4390:9	6	+=
LEAF_NODE	4390:9	4390:9	7	+=
RVAL	4390:12	4390:12	6	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
FUNCTION_CALL	4390:12	4390:49	7	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
CALLEE	4390:12	4390:12	8	t2pWriteFile
LEAF_NODE	4390:12	4390:12	9	t2pWriteFile
LEAF_NODE	4390:24	4390:24	8	(
ARGUMENT	4390:25	4390:25	8	output
FIELD	4390:25	4390:25	9	output
LEAF_NODE	4390:25	4390:25	10	output
LEAF_NODE	4390:31	4390:31	8	,
ARGUMENT	4390:33	4390:43	8	( tdata_t ) " "
LEAF_NODE	4390:33	4390:33	9	(
TYPE_NAME	4390:34	4390:34	9	tdata_t
LEAF_NODE	4390:34	4390:34	10	tdata_t
LEAF_NODE	4390:41	4390:41	9	)
FIELD	4390:43	4390:43	9	" "
LEAF_NODE	4390:43	4390:43	10	" "
LEAF_NODE	4390:46	4390:46	8	,
ARGUMENT	4390:48	4390:48	8	1
FIELD	4390:48	4390:48	9	1
LEAF_NODE	4390:48	4390:48	10	1
LEAF_NODE	4390:49	4390:49	8	)
LEAF_NODE	4390:50	4390:50	4	;
EXPR_STATEMENT	4391:1	4391:69	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . y2 ) ;
EXPR	4391:1	4391:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . y2 )
ASSIGN	4391:1	4391:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . y2 )
LVAL	4391:1	4391:1	6	buflen
FIELD	4391:1	4391:1	7	buflen
LEAF_NODE	4391:1	4391:1	8	buflen
ASSIGN_OP	4391:7	4391:7	6	=
LEAF_NODE	4391:7	4391:7	7	=
RVAL	4391:8	4391:8	6	snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . y2 )
FUNCTION_CALL	4391:8	4391:68	7	snprintf ( buffer , sizeof ( buffer ) , "%.4f" , t2p -> pdf_mediabox . y2 )
CALLEE	4391:8	4391:8	8	snprintf
LEAF_NODE	4391:8	4391:8	9	snprintf
LEAF_NODE	4391:16	4391:16	8	(
ARGUMENT	4391:17	4391:17	8	buffer
FIELD	4391:17	4391:17	9	buffer
LEAF_NODE	4391:17	4391:17	10	buffer
LEAF_NODE	4391:23	4391:23	8	,
ARGUMENT	4391:25	4391:25	8	sizeof ( buffer )
FUNCTION_CALL	4391:25	4391:38	9	sizeof ( buffer )
CALLEE	4391:25	4391:25	10	sizeof
LEAF_NODE	4391:25	4391:25	11	sizeof
LEAF_NODE	4391:31	4391:31	10	(
ARGUMENT	4391:32	4391:32	10	buffer
FIELD	4391:32	4391:32	11	buffer
LEAF_NODE	4391:32	4391:32	12	buffer
LEAF_NODE	4391:38	4391:38	10	)
LEAF_NODE	4391:39	4391:39	8	,
ARGUMENT	4391:41	4391:41	8	"%.4f"
FIELD	4391:41	4391:41	9	"%.4f"
LEAF_NODE	4391:41	4391:41	10	"%.4f"
LEAF_NODE	4391:47	4391:47	8	,
ARGUMENT	4391:48	4391:48	8	t2p -> pdf_mediabox . y2
FIELD	4391:48	4391:66	9	t2p -> pdf_mediabox . y2
LEAF_NODE	4391:48	4391:48	10	t2p
LEAF_NODE	4391:51	4391:51	10	->
LEAF_NODE	4391:53	4391:53	10	pdf_mediabox
LEAF_NODE	4391:65	4391:65	10	.
LEAF_NODE	4391:66	4391:66	10	y2
LEAF_NODE	4391:68	4391:68	8	)
LEAF_NODE	4391:69	4391:69	4	;
EXPR_STATEMENT	4392:1	4392:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4392:1	4392:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4392:1	4392:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4392:1	4392:1	6	check_snprintf_ret
LEAF_NODE	4392:1	4392:1	7	check_snprintf_ret
LEAF_NODE	4392:19	4392:19	6	(
ARGUMENT	4392:20	4392:20	6	t2p
FIELD	4392:20	4392:20	7	t2p
LEAF_NODE	4392:20	4392:20	8	t2p
LEAF_NODE	4392:23	4392:23	6	,
ARGUMENT	4392:25	4392:25	6	buflen
FIELD	4392:25	4392:25	7	buflen
LEAF_NODE	4392:25	4392:25	8	buflen
LEAF_NODE	4392:31	4392:31	6	,
ARGUMENT	4392:33	4392:33	6	buffer
FIELD	4392:33	4392:33	7	buffer
LEAF_NODE	4392:33	4392:33	8	buffer
LEAF_NODE	4392:39	4392:39	6	)
LEAF_NODE	4392:40	4392:40	4	;
EXPR_STATEMENT	4393:1	4393:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4393:1	4393:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4393:1	4393:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4393:1	4393:1	6	written
FIELD	4393:1	4393:1	7	written
LEAF_NODE	4393:1	4393:1	8	written
ASSIGN_OP	4393:9	4393:9	6	+=
LEAF_NODE	4393:9	4393:9	7	+=
RVAL	4393:12	4393:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4393:12	4393:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4393:12	4393:12	8	t2pWriteFile
LEAF_NODE	4393:12	4393:12	9	t2pWriteFile
LEAF_NODE	4393:24	4393:24	8	(
ARGUMENT	4393:25	4393:25	8	output
FIELD	4393:25	4393:25	9	output
LEAF_NODE	4393:25	4393:25	10	output
LEAF_NODE	4393:31	4393:31	8	,
ARGUMENT	4393:33	4393:43	8	( tdata_t ) buffer
LEAF_NODE	4393:33	4393:33	9	(
TYPE_NAME	4393:34	4393:34	9	tdata_t
LEAF_NODE	4393:34	4393:34	10	tdata_t
LEAF_NODE	4393:41	4393:41	9	)
FIELD	4393:43	4393:43	9	buffer
LEAF_NODE	4393:43	4393:43	10	buffer
LEAF_NODE	4393:49	4393:49	8	,
ARGUMENT	4393:51	4393:51	8	buflen
FIELD	4393:51	4393:51	9	buflen
LEAF_NODE	4393:51	4393:51	10	buflen
LEAF_NODE	4393:57	4393:57	8	)
LEAF_NODE	4393:58	4393:58	4	;
EXPR_STATEMENT	4394:1	4394:53	3	written += t2pWriteFile ( output , ( tdata_t ) "] \n" , 3 ) ;
EXPR	4394:1	4394:1	4	written += t2pWriteFile ( output , ( tdata_t ) "] \n" , 3 )
ASSIGN	4394:1	4394:12	5	written += t2pWriteFile ( output , ( tdata_t ) "] \n" , 3 )
LVAL	4394:1	4394:1	6	written
FIELD	4394:1	4394:1	7	written
LEAF_NODE	4394:1	4394:1	8	written
ASSIGN_OP	4394:9	4394:9	6	+=
LEAF_NODE	4394:9	4394:9	7	+=
RVAL	4394:12	4394:12	6	t2pWriteFile ( output , ( tdata_t ) "] \n" , 3 )
FUNCTION_CALL	4394:12	4394:52	7	t2pWriteFile ( output , ( tdata_t ) "] \n" , 3 )
CALLEE	4394:12	4394:12	8	t2pWriteFile
LEAF_NODE	4394:12	4394:12	9	t2pWriteFile
LEAF_NODE	4394:24	4394:24	8	(
ARGUMENT	4394:25	4394:25	8	output
FIELD	4394:25	4394:25	9	output
LEAF_NODE	4394:25	4394:25	10	output
LEAF_NODE	4394:31	4394:31	8	,
ARGUMENT	4394:33	4394:43	8	( tdata_t ) "] \n"
LEAF_NODE	4394:33	4394:33	9	(
TYPE_NAME	4394:34	4394:34	9	tdata_t
LEAF_NODE	4394:34	4394:34	10	tdata_t
LEAF_NODE	4394:41	4394:41	9	)
FIELD	4394:43	4394:43	9	"] \n"
LEAF_NODE	4394:43	4394:43	10	"] \n"
LEAF_NODE	4394:49	4394:49	8	,
ARGUMENT	4394:51	4394:51	8	3
FIELD	4394:51	4394:51	9	3
LEAF_NODE	4394:51	4394:51	10	3
LEAF_NODE	4394:52	4394:52	8	)
LEAF_NODE	4394:53	4394:53	4	;
EXPR_STATEMENT	4395:1	4395:60	3	written += t2pWriteFile ( output , ( tdata_t ) "/Contents " , 10 ) ;
EXPR	4395:1	4395:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/Contents " , 10 )
ASSIGN	4395:1	4395:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/Contents " , 10 )
LVAL	4395:1	4395:1	6	written
FIELD	4395:1	4395:1	7	written
LEAF_NODE	4395:1	4395:1	8	written
ASSIGN_OP	4395:9	4395:9	6	+=
LEAF_NODE	4395:9	4395:9	7	+=
RVAL	4395:12	4395:12	6	t2pWriteFile ( output , ( tdata_t ) "/Contents " , 10 )
FUNCTION_CALL	4395:12	4395:59	7	t2pWriteFile ( output , ( tdata_t ) "/Contents " , 10 )
CALLEE	4395:12	4395:12	8	t2pWriteFile
LEAF_NODE	4395:12	4395:12	9	t2pWriteFile
LEAF_NODE	4395:24	4395:24	8	(
ARGUMENT	4395:25	4395:25	8	output
FIELD	4395:25	4395:25	9	output
LEAF_NODE	4395:25	4395:25	10	output
LEAF_NODE	4395:31	4395:31	8	,
ARGUMENT	4395:33	4395:43	8	( tdata_t ) "/Contents "
LEAF_NODE	4395:33	4395:33	9	(
TYPE_NAME	4395:34	4395:34	9	tdata_t
LEAF_NODE	4395:34	4395:34	10	tdata_t
LEAF_NODE	4395:41	4395:41	9	)
FIELD	4395:43	4395:43	9	"/Contents "
LEAF_NODE	4395:43	4395:43	10	"/Contents "
LEAF_NODE	4395:55	4395:55	8	,
ARGUMENT	4395:57	4395:57	8	10
FIELD	4395:57	4395:57	9	10
LEAF_NODE	4395:57	4395:57	10	10
LEAF_NODE	4395:59	4395:59	8	)
LEAF_NODE	4395:60	4395:60	4	;
EXPR_STATEMENT	4396:1	4396:76	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 1 ) ) ;
EXPR	4396:1	4396:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 1 ) )
ASSIGN	4396:1	4396:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 1 ) )
LVAL	4396:1	4396:1	6	buflen
FIELD	4396:1	4396:1	7	buflen
LEAF_NODE	4396:1	4396:1	8	buflen
ASSIGN_OP	4396:7	4396:7	6	=
LEAF_NODE	4396:7	4396:7	7	=
RVAL	4396:8	4396:8	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 1 ) )
FUNCTION_CALL	4396:8	4396:75	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 1 ) )
CALLEE	4396:8	4396:8	8	snprintf
LEAF_NODE	4396:8	4396:8	9	snprintf
LEAF_NODE	4396:16	4396:16	8	(
ARGUMENT	4396:17	4396:17	8	buffer
FIELD	4396:17	4396:17	9	buffer
LEAF_NODE	4396:17	4396:17	10	buffer
LEAF_NODE	4396:23	4396:23	8	,
ARGUMENT	4396:25	4396:25	8	sizeof ( buffer )
FUNCTION_CALL	4396:25	4396:38	9	sizeof ( buffer )
CALLEE	4396:25	4396:25	10	sizeof
LEAF_NODE	4396:25	4396:25	11	sizeof
LEAF_NODE	4396:31	4396:31	10	(
ARGUMENT	4396:32	4396:32	10	buffer
FIELD	4396:32	4396:32	11	buffer
LEAF_NODE	4396:32	4396:32	12	buffer
LEAF_NODE	4396:38	4396:38	10	)
LEAF_NODE	4396:39	4396:39	8	,
ARGUMENT	4396:41	4396:41	8	"%lu"
FIELD	4396:41	4396:41	9	"%lu"
LEAF_NODE	4396:41	4396:41	10	"%lu"
LEAF_NODE	4396:46	4396:46	8	,
ARGUMENT	4396:48	4396:74	8	( unsigned long ) ( object + 1 )
LEAF_NODE	4396:48	4396:48	9	(
TYPE_NAME	4396:49	4396:58	9	unsigned long
LEAF_NODE	4396:49	4396:49	10	unsigned
LEAF_NODE	4396:58	4396:58	10	long
LEAF_NODE	4396:62	4396:62	9	)
LEAF_NODE	4396:63	4396:63	9	(
FIELD	4396:64	4396:64	9	object
LEAF_NODE	4396:64	4396:64	10	object
LEAF_NODE	4396:71	4396:71	9	+
FIELD	4396:73	4396:73	9	1
LEAF_NODE	4396:73	4396:73	10	1
LEAF_NODE	4396:74	4396:74	9	)
LEAF_NODE	4396:75	4396:75	8	)
LEAF_NODE	4396:76	4396:76	4	;
EXPR_STATEMENT	4397:1	4397:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4397:1	4397:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4397:1	4397:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4397:1	4397:1	6	check_snprintf_ret
LEAF_NODE	4397:1	4397:1	7	check_snprintf_ret
LEAF_NODE	4397:19	4397:19	6	(
ARGUMENT	4397:20	4397:20	6	t2p
FIELD	4397:20	4397:20	7	t2p
LEAF_NODE	4397:20	4397:20	8	t2p
LEAF_NODE	4397:23	4397:23	6	,
ARGUMENT	4397:25	4397:25	6	buflen
FIELD	4397:25	4397:25	7	buflen
LEAF_NODE	4397:25	4397:25	8	buflen
LEAF_NODE	4397:31	4397:31	6	,
ARGUMENT	4397:33	4397:33	6	buffer
FIELD	4397:33	4397:33	7	buffer
LEAF_NODE	4397:33	4397:33	8	buffer
LEAF_NODE	4397:39	4397:39	6	)
LEAF_NODE	4397:40	4397:40	4	;
EXPR_STATEMENT	4398:1	4398:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4398:1	4398:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4398:1	4398:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4398:1	4398:1	6	written
FIELD	4398:1	4398:1	7	written
LEAF_NODE	4398:1	4398:1	8	written
ASSIGN_OP	4398:9	4398:9	6	+=
LEAF_NODE	4398:9	4398:9	7	+=
RVAL	4398:12	4398:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4398:12	4398:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4398:12	4398:12	8	t2pWriteFile
LEAF_NODE	4398:12	4398:12	9	t2pWriteFile
LEAF_NODE	4398:24	4398:24	8	(
ARGUMENT	4398:25	4398:25	8	output
FIELD	4398:25	4398:25	9	output
LEAF_NODE	4398:25	4398:25	10	output
LEAF_NODE	4398:31	4398:31	8	,
ARGUMENT	4398:33	4398:43	8	( tdata_t ) buffer
LEAF_NODE	4398:33	4398:33	9	(
TYPE_NAME	4398:34	4398:34	9	tdata_t
LEAF_NODE	4398:34	4398:34	10	tdata_t
LEAF_NODE	4398:41	4398:41	9	)
FIELD	4398:43	4398:43	9	buffer
LEAF_NODE	4398:43	4398:43	10	buffer
LEAF_NODE	4398:49	4398:49	8	,
ARGUMENT	4398:51	4398:51	8	buflen
FIELD	4398:51	4398:51	9	buflen
LEAF_NODE	4398:51	4398:51	10	buflen
LEAF_NODE	4398:57	4398:57	8	)
LEAF_NODE	4398:58	4398:58	4	;
EXPR_STATEMENT	4399:1	4399:56	3	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 ) ;
EXPR	4399:1	4399:1	4	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
ASSIGN	4399:1	4399:12	5	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
LVAL	4399:1	4399:1	6	written
FIELD	4399:1	4399:1	7	written
LEAF_NODE	4399:1	4399:1	8	written
ASSIGN_OP	4399:9	4399:9	6	+=
LEAF_NODE	4399:9	4399:9	7	+=
RVAL	4399:12	4399:12	6	t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
FUNCTION_CALL	4399:12	4399:55	7	t2pWriteFile ( output , ( tdata_t ) " 0 R \n" , 6 )
CALLEE	4399:12	4399:12	8	t2pWriteFile
LEAF_NODE	4399:12	4399:12	9	t2pWriteFile
LEAF_NODE	4399:24	4399:24	8	(
ARGUMENT	4399:25	4399:25	8	output
FIELD	4399:25	4399:25	9	output
LEAF_NODE	4399:25	4399:25	10	output
LEAF_NODE	4399:31	4399:31	8	,
ARGUMENT	4399:33	4399:43	8	( tdata_t ) " 0 R \n"
LEAF_NODE	4399:33	4399:33	9	(
TYPE_NAME	4399:34	4399:34	9	tdata_t
LEAF_NODE	4399:34	4399:34	10	tdata_t
LEAF_NODE	4399:41	4399:41	9	)
FIELD	4399:43	4399:43	9	" 0 R \n"
LEAF_NODE	4399:43	4399:43	10	" 0 R \n"
LEAF_NODE	4399:52	4399:52	8	,
ARGUMENT	4399:54	4399:54	8	6
FIELD	4399:54	4399:54	9	6
LEAF_NODE	4399:54	4399:54	10	6
LEAF_NODE	4399:55	4399:55	8	)
LEAF_NODE	4399:56	4399:56	4	;
EXPR_STATEMENT	4400:1	4400:66	3	written += t2pWriteFile ( output , ( tdata_t ) "/Resources << \n" , 15 ) ;
EXPR	4400:1	4400:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/Resources << \n" , 15 )
ASSIGN	4400:1	4400:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/Resources << \n" , 15 )
LVAL	4400:1	4400:1	6	written
FIELD	4400:1	4400:1	7	written
LEAF_NODE	4400:1	4400:1	8	written
ASSIGN_OP	4400:9	4400:9	6	+=
LEAF_NODE	4400:9	4400:9	7	+=
RVAL	4400:12	4400:12	6	t2pWriteFile ( output , ( tdata_t ) "/Resources << \n" , 15 )
FUNCTION_CALL	4400:12	4400:65	7	t2pWriteFile ( output , ( tdata_t ) "/Resources << \n" , 15 )
CALLEE	4400:12	4400:12	8	t2pWriteFile
LEAF_NODE	4400:12	4400:12	9	t2pWriteFile
LEAF_NODE	4400:24	4400:24	8	(
ARGUMENT	4400:25	4400:25	8	output
FIELD	4400:25	4400:25	9	output
LEAF_NODE	4400:25	4400:25	10	output
LEAF_NODE	4400:31	4400:31	8	,
ARGUMENT	4400:33	4400:43	8	( tdata_t ) "/Resources << \n"
LEAF_NODE	4400:33	4400:33	9	(
TYPE_NAME	4400:34	4400:34	9	tdata_t
LEAF_NODE	4400:34	4400:34	10	tdata_t
LEAF_NODE	4400:41	4400:41	9	)
FIELD	4400:43	4400:43	9	"/Resources << \n"
LEAF_NODE	4400:43	4400:43	10	"/Resources << \n"
LEAF_NODE	4400:61	4400:61	8	,
ARGUMENT	4400:63	4400:63	8	15
FIELD	4400:63	4400:63	9	15
LEAF_NODE	4400:63	4400:63	10	15
LEAF_NODE	4400:65	4400:65	8	)
LEAF_NODE	4400:66	4400:66	4	;
SELECTION	4401:1	4401:58	3	
KEYWORD	4401:1	4401:1	4	if
LEAF_NODE	4401:1	4401:1	5	if
LEAF_NODE	4401:3	4401:3	4	(
CONDITION	4401:5	4401:5	4	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount != 0
EXPR	4401:5	4401:55	5	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount != 0
FIELD	4401:5	4401:36	6	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
LEAF_NODE	4401:5	4401:5	7	t2p
LEAF_NODE	4401:8	4401:8	7	->
LEAF_NODE	4401:10	4401:10	7	tiff_tiles
LEAF_NODE	4401:20	4401:20	7	[
EXPR	4401:21	4401:21	7	t2p -> pdf_page
FIELD	4401:21	4401:26	8	t2p -> pdf_page
LEAF_NODE	4401:21	4401:21	9	t2p
LEAF_NODE	4401:24	4401:24	9	->
LEAF_NODE	4401:26	4401:26	9	pdf_page
LEAF_NODE	4401:34	4401:34	7	]
LEAF_NODE	4401:35	4401:35	7	.
LEAF_NODE	4401:36	4401:36	7	tiles_tilecount
EQ_OPERATOR	4401:52	4401:52	6	!=
LEAF_NODE	4401:52	4401:52	7	!=
FIELD	4401:55	4401:55	6	0
LEAF_NODE	4401:55	4401:55	7	0
LEAF_NODE	4401:57	4401:57	4	)
STATEMENTS	4401:58	4423:1	4	
LEAF_NODE	4401:58	4401:58	5	{
STATEMENTS	4402:2	4422:2	5	
EXPR_STATEMENT	4402:2	4402:64	6	written += t2pWriteFile ( output , ( tdata_t ) "/XObject <<\n" , 12 ) ;
EXPR	4402:2	4402:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/XObject <<\n" , 12 )
ASSIGN	4402:2	4402:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/XObject <<\n" , 12 )
LVAL	4402:2	4402:2	9	written
FIELD	4402:2	4402:2	10	written
LEAF_NODE	4402:2	4402:2	11	written
ASSIGN_OP	4402:10	4402:10	9	+=
LEAF_NODE	4402:10	4402:10	10	+=
RVAL	4402:13	4402:13	9	t2pWriteFile ( output , ( tdata_t ) "/XObject <<\n" , 12 )
FUNCTION_CALL	4402:13	4402:63	10	t2pWriteFile ( output , ( tdata_t ) "/XObject <<\n" , 12 )
CALLEE	4402:13	4402:13	11	t2pWriteFile
LEAF_NODE	4402:13	4402:13	12	t2pWriteFile
LEAF_NODE	4402:25	4402:25	11	(
ARGUMENT	4402:26	4402:26	11	output
FIELD	4402:26	4402:26	12	output
LEAF_NODE	4402:26	4402:26	13	output
LEAF_NODE	4402:32	4402:32	11	,
ARGUMENT	4402:34	4402:44	11	( tdata_t ) "/XObject <<\n"
LEAF_NODE	4402:34	4402:34	12	(
TYPE_NAME	4402:35	4402:35	12	tdata_t
LEAF_NODE	4402:35	4402:35	13	tdata_t
LEAF_NODE	4402:42	4402:42	12	)
FIELD	4402:44	4402:44	12	"/XObject <<\n"
LEAF_NODE	4402:44	4402:44	13	"/XObject <<\n"
LEAF_NODE	4402:59	4402:59	11	,
ARGUMENT	4402:61	4402:61	11	12
FIELD	4402:61	4402:61	12	12
LEAF_NODE	4402:61	4402:61	13	12
LEAF_NODE	4402:63	4402:63	11	)
LEAF_NODE	4402:64	4402:64	7	;
ITERATION	4403:2	4403:63	6	
KEYWORD	4403:2	4403:2	7	for
LEAF_NODE	4403:2	4403:2	8	for
LEAF_NODE	4403:5	4403:5	7	(
FOR_INIT	4403:6	4403:9	7	i = 0 ;
EXPR	4403:6	4403:6	8	i = 0
ASSIGN	4403:6	4403:8	9	i = 0
LVAL	4403:6	4403:6	10	i
FIELD	4403:6	4403:6	11	i
LEAF_NODE	4403:6	4403:6	12	i
ASSIGN_OP	4403:7	4403:7	10	=
LEAF_NODE	4403:7	4403:7	11	=
RVAL	4403:8	4403:8	10	0
FIELD	4403:8	4403:8	11	0
LEAF_NODE	4403:8	4403:8	12	0
LEAF_NODE	4403:9	4403:9	8	;
CONDITION	4403:10	4403:10	7	i < t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
EXPR	4403:10	4403:12	8	i < t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
FIELD	4403:10	4403:10	9	i
LEAF_NODE	4403:10	4403:10	10	i
REL_OPERATOR	4403:11	4403:11	9	<
LEAF_NODE	4403:11	4403:11	10	<
FIELD	4403:12	4403:43	9	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
LEAF_NODE	4403:12	4403:12	10	t2p
LEAF_NODE	4403:15	4403:15	10	->
LEAF_NODE	4403:17	4403:17	10	tiff_tiles
LEAF_NODE	4403:27	4403:27	10	[
EXPR	4403:28	4403:28	10	t2p -> pdf_page
FIELD	4403:28	4403:33	11	t2p -> pdf_page
LEAF_NODE	4403:28	4403:28	12	t2p
LEAF_NODE	4403:31	4403:31	12	->
LEAF_NODE	4403:33	4403:33	12	pdf_page
LEAF_NODE	4403:41	4403:41	10	]
LEAF_NODE	4403:42	4403:42	10	.
LEAF_NODE	4403:43	4403:43	10	tiles_tilecount
LEAF_NODE	4403:58	4403:58	7	;
FOR_EXPR	4403:59	4403:59	7	i ++
EXPR	4403:59	4403:59	8	i ++
FIELD	4403:59	4403:60	9	i ++
LEAF_NODE	4403:59	4403:59	10	i
LEAF_NODE	4403:60	4403:60	10	++
LEAF_NODE	4403:62	4403:62	7	)
STATEMENTS	4403:63	4421:2	7	
LEAF_NODE	4403:63	4403:63	8	{
STATEMENTS	4404:3	4418:3	8	
EXPR_STATEMENT	4404:3	4404:54	9	written += t2pWriteFile ( output , ( tdata_t ) "/Im" , 3 ) ;
EXPR	4404:3	4404:3	10	written += t2pWriteFile ( output , ( tdata_t ) "/Im" , 3 )
ASSIGN	4404:3	4404:14	11	written += t2pWriteFile ( output , ( tdata_t ) "/Im" , 3 )
LVAL	4404:3	4404:3	12	written
FIELD	4404:3	4404:3	13	written
LEAF_NODE	4404:3	4404:3	14	written
ASSIGN_OP	4404:11	4404:11	12	+=
LEAF_NODE	4404:11	4404:11	13	+=
RVAL	4404:14	4404:14	12	t2pWriteFile ( output , ( tdata_t ) "/Im" , 3 )
FUNCTION_CALL	4404:14	4404:53	13	t2pWriteFile ( output , ( tdata_t ) "/Im" , 3 )
CALLEE	4404:14	4404:14	14	t2pWriteFile
LEAF_NODE	4404:14	4404:14	15	t2pWriteFile
LEAF_NODE	4404:26	4404:26	14	(
ARGUMENT	4404:27	4404:27	14	output
FIELD	4404:27	4404:27	15	output
LEAF_NODE	4404:27	4404:27	16	output
LEAF_NODE	4404:33	4404:33	14	,
ARGUMENT	4404:35	4404:45	14	( tdata_t ) "/Im"
LEAF_NODE	4404:35	4404:35	15	(
TYPE_NAME	4404:36	4404:36	15	tdata_t
LEAF_NODE	4404:36	4404:36	16	tdata_t
LEAF_NODE	4404:43	4404:43	15	)
FIELD	4404:45	4404:45	15	"/Im"
LEAF_NODE	4404:45	4404:45	16	"/Im"
LEAF_NODE	4404:50	4404:50	14	,
ARGUMENT	4404:52	4404:52	14	3
FIELD	4404:52	4404:52	15	3
LEAF_NODE	4404:52	4404:52	16	3
LEAF_NODE	4404:53	4404:53	14	)
LEAF_NODE	4404:54	4404:54	10	;
EXPR_STATEMENT	4405:3	4405:67	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 ) ;
EXPR	4405:3	4405:3	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
ASSIGN	4405:3	4405:12	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
LVAL	4405:3	4405:3	12	buflen
FIELD	4405:3	4405:3	13	buflen
LEAF_NODE	4405:3	4405:3	14	buflen
ASSIGN_OP	4405:10	4405:10	12	=
LEAF_NODE	4405:10	4405:10	13	=
RVAL	4405:12	4405:12	12	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
FUNCTION_CALL	4405:12	4405:66	13	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
CALLEE	4405:12	4405:12	14	snprintf
LEAF_NODE	4405:12	4405:12	15	snprintf
LEAF_NODE	4405:20	4405:20	14	(
ARGUMENT	4405:21	4405:21	14	buffer
FIELD	4405:21	4405:21	15	buffer
LEAF_NODE	4405:21	4405:21	16	buffer
LEAF_NODE	4405:27	4405:27	14	,
ARGUMENT	4405:29	4405:29	14	sizeof ( buffer )
FUNCTION_CALL	4405:29	4405:42	15	sizeof ( buffer )
CALLEE	4405:29	4405:29	16	sizeof
LEAF_NODE	4405:29	4405:29	17	sizeof
LEAF_NODE	4405:35	4405:35	16	(
ARGUMENT	4405:36	4405:36	16	buffer
FIELD	4405:36	4405:36	17	buffer
LEAF_NODE	4405:36	4405:36	18	buffer
LEAF_NODE	4405:42	4405:42	16	)
LEAF_NODE	4405:43	4405:43	14	,
ARGUMENT	4405:45	4405:45	14	"%u"
FIELD	4405:45	4405:45	15	"%u"
LEAF_NODE	4405:45	4405:45	16	"%u"
LEAF_NODE	4405:49	4405:49	14	,
ARGUMENT	4405:51	4405:65	14	t2p -> pdf_page + 1
FIELD	4405:51	4405:56	15	t2p -> pdf_page
LEAF_NODE	4405:51	4405:51	16	t2p
LEAF_NODE	4405:54	4405:54	16	->
LEAF_NODE	4405:56	4405:56	16	pdf_page
LEAF_NODE	4405:64	4405:64	15	+
FIELD	4405:65	4405:65	15	1
LEAF_NODE	4405:65	4405:65	16	1
LEAF_NODE	4405:66	4405:66	14	)
LEAF_NODE	4405:67	4405:67	10	;
EXPR_STATEMENT	4406:3	4406:42	9	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4406:3	4406:3	10	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4406:3	4406:41	11	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4406:3	4406:3	12	check_snprintf_ret
LEAF_NODE	4406:3	4406:3	13	check_snprintf_ret
LEAF_NODE	4406:21	4406:21	12	(
ARGUMENT	4406:22	4406:22	12	t2p
FIELD	4406:22	4406:22	13	t2p
LEAF_NODE	4406:22	4406:22	14	t2p
LEAF_NODE	4406:25	4406:25	12	,
ARGUMENT	4406:27	4406:27	12	buflen
FIELD	4406:27	4406:27	13	buflen
LEAF_NODE	4406:27	4406:27	14	buflen
LEAF_NODE	4406:33	4406:33	12	,
ARGUMENT	4406:35	4406:35	12	buffer
FIELD	4406:35	4406:35	13	buffer
LEAF_NODE	4406:35	4406:35	14	buffer
LEAF_NODE	4406:41	4406:41	12	)
LEAF_NODE	4406:42	4406:42	10	;
EXPR_STATEMENT	4407:3	4407:60	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4407:3	4407:3	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4407:3	4407:14	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4407:3	4407:3	12	written
FIELD	4407:3	4407:3	13	written
LEAF_NODE	4407:3	4407:3	14	written
ASSIGN_OP	4407:11	4407:11	12	+=
LEAF_NODE	4407:11	4407:11	13	+=
RVAL	4407:14	4407:14	12	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4407:14	4407:59	13	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4407:14	4407:14	14	t2pWriteFile
LEAF_NODE	4407:14	4407:14	15	t2pWriteFile
LEAF_NODE	4407:26	4407:26	14	(
ARGUMENT	4407:27	4407:27	14	output
FIELD	4407:27	4407:27	15	output
LEAF_NODE	4407:27	4407:27	16	output
LEAF_NODE	4407:33	4407:33	14	,
ARGUMENT	4407:35	4407:45	14	( tdata_t ) buffer
LEAF_NODE	4407:35	4407:35	15	(
TYPE_NAME	4407:36	4407:36	15	tdata_t
LEAF_NODE	4407:36	4407:36	16	tdata_t
LEAF_NODE	4407:43	4407:43	15	)
FIELD	4407:45	4407:45	15	buffer
LEAF_NODE	4407:45	4407:45	16	buffer
LEAF_NODE	4407:51	4407:51	14	,
ARGUMENT	4407:53	4407:53	14	buflen
FIELD	4407:53	4407:53	15	buflen
LEAF_NODE	4407:53	4407:53	16	buflen
LEAF_NODE	4407:59	4407:59	14	)
LEAF_NODE	4407:60	4407:60	10	;
EXPR_STATEMENT	4408:3	4408:52	9	written += t2pWriteFile ( output , ( tdata_t ) "_" , 1 ) ;
EXPR	4408:3	4408:3	10	written += t2pWriteFile ( output , ( tdata_t ) "_" , 1 )
ASSIGN	4408:3	4408:14	11	written += t2pWriteFile ( output , ( tdata_t ) "_" , 1 )
LVAL	4408:3	4408:3	12	written
FIELD	4408:3	4408:3	13	written
LEAF_NODE	4408:3	4408:3	14	written
ASSIGN_OP	4408:11	4408:11	12	+=
LEAF_NODE	4408:11	4408:11	13	+=
RVAL	4408:14	4408:14	12	t2pWriteFile ( output , ( tdata_t ) "_" , 1 )
FUNCTION_CALL	4408:14	4408:51	13	t2pWriteFile ( output , ( tdata_t ) "_" , 1 )
CALLEE	4408:14	4408:14	14	t2pWriteFile
LEAF_NODE	4408:14	4408:14	15	t2pWriteFile
LEAF_NODE	4408:26	4408:26	14	(
ARGUMENT	4408:27	4408:27	14	output
FIELD	4408:27	4408:27	15	output
LEAF_NODE	4408:27	4408:27	16	output
LEAF_NODE	4408:33	4408:33	14	,
ARGUMENT	4408:35	4408:45	14	( tdata_t ) "_"
LEAF_NODE	4408:35	4408:35	15	(
TYPE_NAME	4408:36	4408:36	15	tdata_t
LEAF_NODE	4408:36	4408:36	16	tdata_t
LEAF_NODE	4408:43	4408:43	15	)
FIELD	4408:45	4408:45	15	"_"
LEAF_NODE	4408:45	4408:45	16	"_"
LEAF_NODE	4408:48	4408:48	14	,
ARGUMENT	4408:50	4408:50	14	1
FIELD	4408:50	4408:50	15	1
LEAF_NODE	4408:50	4408:50	16	1
LEAF_NODE	4408:51	4408:51	14	)
LEAF_NODE	4408:52	4408:52	10	;
EXPR_STATEMENT	4409:3	4409:55	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , i + 1 ) ;
EXPR	4409:3	4409:3	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , i + 1 )
ASSIGN	4409:3	4409:12	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , i + 1 )
LVAL	4409:3	4409:3	12	buflen
FIELD	4409:3	4409:3	13	buflen
LEAF_NODE	4409:3	4409:3	14	buflen
ASSIGN_OP	4409:10	4409:10	12	=
LEAF_NODE	4409:10	4409:10	13	=
RVAL	4409:12	4409:12	12	snprintf ( buffer , sizeof ( buffer ) , "%u" , i + 1 )
FUNCTION_CALL	4409:12	4409:54	13	snprintf ( buffer , sizeof ( buffer ) , "%u" , i + 1 )
CALLEE	4409:12	4409:12	14	snprintf
LEAF_NODE	4409:12	4409:12	15	snprintf
LEAF_NODE	4409:20	4409:20	14	(
ARGUMENT	4409:21	4409:21	14	buffer
FIELD	4409:21	4409:21	15	buffer
LEAF_NODE	4409:21	4409:21	16	buffer
LEAF_NODE	4409:27	4409:27	14	,
ARGUMENT	4409:29	4409:29	14	sizeof ( buffer )
FUNCTION_CALL	4409:29	4409:42	15	sizeof ( buffer )
CALLEE	4409:29	4409:29	16	sizeof
LEAF_NODE	4409:29	4409:29	17	sizeof
LEAF_NODE	4409:35	4409:35	16	(
ARGUMENT	4409:36	4409:36	16	buffer
FIELD	4409:36	4409:36	17	buffer
LEAF_NODE	4409:36	4409:36	18	buffer
LEAF_NODE	4409:42	4409:42	16	)
LEAF_NODE	4409:43	4409:43	14	,
ARGUMENT	4409:45	4409:45	14	"%u"
FIELD	4409:45	4409:45	15	"%u"
LEAF_NODE	4409:45	4409:45	16	"%u"
LEAF_NODE	4409:49	4409:49	14	,
ARGUMENT	4409:51	4409:53	14	i + 1
FIELD	4409:51	4409:51	15	i
LEAF_NODE	4409:51	4409:51	16	i
LEAF_NODE	4409:52	4409:52	15	+
FIELD	4409:53	4409:53	15	1
LEAF_NODE	4409:53	4409:53	16	1
LEAF_NODE	4409:54	4409:54	14	)
LEAF_NODE	4409:55	4409:55	10	;
EXPR_STATEMENT	4410:3	4410:42	9	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4410:3	4410:3	10	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4410:3	4410:41	11	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4410:3	4410:3	12	check_snprintf_ret
LEAF_NODE	4410:3	4410:3	13	check_snprintf_ret
LEAF_NODE	4410:21	4410:21	12	(
ARGUMENT	4410:22	4410:22	12	t2p
FIELD	4410:22	4410:22	13	t2p
LEAF_NODE	4410:22	4410:22	14	t2p
LEAF_NODE	4410:25	4410:25	12	,
ARGUMENT	4410:27	4410:27	12	buflen
FIELD	4410:27	4410:27	13	buflen
LEAF_NODE	4410:27	4410:27	14	buflen
LEAF_NODE	4410:33	4410:33	12	,
ARGUMENT	4410:35	4410:35	12	buffer
FIELD	4410:35	4410:35	13	buffer
LEAF_NODE	4410:35	4410:35	14	buffer
LEAF_NODE	4410:41	4410:41	12	)
LEAF_NODE	4410:42	4410:42	10	;
EXPR_STATEMENT	4411:3	4411:60	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4411:3	4411:3	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4411:3	4411:14	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4411:3	4411:3	12	written
FIELD	4411:3	4411:3	13	written
LEAF_NODE	4411:3	4411:3	14	written
ASSIGN_OP	4411:11	4411:11	12	+=
LEAF_NODE	4411:11	4411:11	13	+=
RVAL	4411:14	4411:14	12	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4411:14	4411:59	13	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4411:14	4411:14	14	t2pWriteFile
LEAF_NODE	4411:14	4411:14	15	t2pWriteFile
LEAF_NODE	4411:26	4411:26	14	(
ARGUMENT	4411:27	4411:27	14	output
FIELD	4411:27	4411:27	15	output
LEAF_NODE	4411:27	4411:27	16	output
LEAF_NODE	4411:33	4411:33	14	,
ARGUMENT	4411:35	4411:45	14	( tdata_t ) buffer
LEAF_NODE	4411:35	4411:35	15	(
TYPE_NAME	4411:36	4411:36	15	tdata_t
LEAF_NODE	4411:36	4411:36	16	tdata_t
LEAF_NODE	4411:43	4411:43	15	)
FIELD	4411:45	4411:45	15	buffer
LEAF_NODE	4411:45	4411:45	16	buffer
LEAF_NODE	4411:51	4411:51	14	,
ARGUMENT	4411:53	4411:53	14	buflen
FIELD	4411:53	4411:53	15	buflen
LEAF_NODE	4411:53	4411:53	16	buflen
LEAF_NODE	4411:59	4411:59	14	)
LEAF_NODE	4411:60	4411:60	10	;
EXPR_STATEMENT	4412:3	4412:52	9	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 ) ;
EXPR	4412:3	4412:3	10	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
ASSIGN	4412:3	4412:14	11	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
LVAL	4412:3	4412:3	12	written
FIELD	4412:3	4412:3	13	written
LEAF_NODE	4412:3	4412:3	14	written
ASSIGN_OP	4412:11	4412:11	12	+=
LEAF_NODE	4412:11	4412:11	13	+=
RVAL	4412:14	4412:14	12	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
FUNCTION_CALL	4412:14	4412:51	13	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
CALLEE	4412:14	4412:14	14	t2pWriteFile
LEAF_NODE	4412:14	4412:14	15	t2pWriteFile
LEAF_NODE	4412:26	4412:26	14	(
ARGUMENT	4412:27	4412:27	14	output
FIELD	4412:27	4412:27	15	output
LEAF_NODE	4412:27	4412:27	16	output
LEAF_NODE	4412:33	4412:33	14	,
ARGUMENT	4412:35	4412:45	14	( tdata_t ) " "
LEAF_NODE	4412:35	4412:35	15	(
TYPE_NAME	4412:36	4412:36	15	tdata_t
LEAF_NODE	4412:36	4412:36	16	tdata_t
LEAF_NODE	4412:43	4412:43	15	)
FIELD	4412:45	4412:45	15	" "
LEAF_NODE	4412:45	4412:45	16	" "
LEAF_NODE	4412:48	4412:48	14	,
ARGUMENT	4412:50	4412:50	14	1
FIELD	4412:50	4412:50	15	1
LEAF_NODE	4412:50	4412:50	16	1
LEAF_NODE	4412:51	4412:51	14	)
LEAF_NODE	4412:52	4412:52	10	;
EXPR_STATEMENT	4413:3	4414:78	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra ) ) ;
EXPR	4413:3	4413:3	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra ) )
ASSIGN	4413:3	4413:12	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra ) )
LVAL	4413:3	4413:3	12	buflen
FIELD	4413:3	4413:3	13	buflen
LEAF_NODE	4413:3	4413:3	14	buflen
ASSIGN_OP	4413:10	4413:10	12	=
LEAF_NODE	4413:10	4413:10	13	=
RVAL	4413:12	4413:12	12	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra ) )
FUNCTION_CALL	4413:12	4414:77	13	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra ) )
CALLEE	4413:12	4413:12	14	snprintf
LEAF_NODE	4413:12	4413:12	15	snprintf
LEAF_NODE	4413:20	4413:20	14	(
ARGUMENT	4413:21	4413:21	14	buffer
FIELD	4413:21	4413:21	15	buffer
LEAF_NODE	4413:21	4413:21	16	buffer
LEAF_NODE	4413:27	4413:27	14	,
ARGUMENT	4413:29	4413:29	14	sizeof ( buffer )
FUNCTION_CALL	4413:29	4413:42	15	sizeof ( buffer )
CALLEE	4413:29	4413:29	16	sizeof
LEAF_NODE	4413:29	4413:29	17	sizeof
LEAF_NODE	4413:35	4413:35	16	(
ARGUMENT	4413:36	4413:36	16	buffer
FIELD	4413:36	4413:36	17	buffer
LEAF_NODE	4413:36	4413:36	18	buffer
LEAF_NODE	4413:42	4413:42	16	)
LEAF_NODE	4413:43	4413:43	14	,
ARGUMENT	4413:45	4413:45	14	"%lu"
FIELD	4413:45	4413:45	15	"%lu"
LEAF_NODE	4413:45	4413:45	16	"%lu"
LEAF_NODE	4413:50	4413:50	14	,
ARGUMENT	4414:4	4414:76	14	( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra )
LEAF_NODE	4414:4	4414:4	15	(
TYPE_NAME	4414:5	4414:14	15	unsigned long
LEAF_NODE	4414:5	4414:5	16	unsigned
LEAF_NODE	4414:14	4414:14	16	long
LEAF_NODE	4414:18	4414:18	15	)
LEAF_NODE	4414:19	4414:19	15	(
FIELD	4414:20	4414:20	15	object
LEAF_NODE	4414:20	4414:20	16	object
LEAF_NODE	4414:26	4414:26	15	+
FIELD	4414:27	4414:27	15	3
LEAF_NODE	4414:27	4414:27	16	3
LEAF_NODE	4414:28	4414:28	15	+
LEAF_NODE	4414:29	4414:29	15	(
FIELD	4414:30	4414:30	15	2
LEAF_NODE	4414:30	4414:30	16	2
LEAF_NODE	4414:31	4414:31	15	*
FIELD	4414:32	4414:32	15	i
LEAF_NODE	4414:32	4414:32	16	i
LEAF_NODE	4414:33	4414:33	15	)
LEAF_NODE	4414:34	4414:34	15	+
FIELD	4414:35	4414:66	15	t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra
LEAF_NODE	4414:35	4414:35	16	t2p
LEAF_NODE	4414:38	4414:38	16	->
LEAF_NODE	4414:40	4414:40	16	tiff_pages
LEAF_NODE	4414:50	4414:50	16	[
EXPR	4414:51	4414:51	16	t2p -> pdf_page
FIELD	4414:51	4414:56	17	t2p -> pdf_page
LEAF_NODE	4414:51	4414:51	18	t2p
LEAF_NODE	4414:54	4414:54	18	->
LEAF_NODE	4414:56	4414:56	18	pdf_page
LEAF_NODE	4414:64	4414:64	16	]
LEAF_NODE	4414:65	4414:65	16	.
LEAF_NODE	4414:66	4414:66	16	page_extra
LEAF_NODE	4414:76	4414:76	15	)
LEAF_NODE	4414:77	4414:77	14	)
LEAF_NODE	4414:78	4414:78	10	;
EXPR_STATEMENT	4415:3	4415:42	9	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4415:3	4415:3	10	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4415:3	4415:41	11	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4415:3	4415:3	12	check_snprintf_ret
LEAF_NODE	4415:3	4415:3	13	check_snprintf_ret
LEAF_NODE	4415:21	4415:21	12	(
ARGUMENT	4415:22	4415:22	12	t2p
FIELD	4415:22	4415:22	13	t2p
LEAF_NODE	4415:22	4415:22	14	t2p
LEAF_NODE	4415:25	4415:25	12	,
ARGUMENT	4415:27	4415:27	12	buflen
FIELD	4415:27	4415:27	13	buflen
LEAF_NODE	4415:27	4415:27	14	buflen
LEAF_NODE	4415:33	4415:33	12	,
ARGUMENT	4415:35	4415:35	12	buffer
FIELD	4415:35	4415:35	13	buffer
LEAF_NODE	4415:35	4415:35	14	buffer
LEAF_NODE	4415:41	4415:41	12	)
LEAF_NODE	4415:42	4415:42	10	;
EXPR_STATEMENT	4416:3	4416:60	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4416:3	4416:3	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4416:3	4416:14	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4416:3	4416:3	12	written
FIELD	4416:3	4416:3	13	written
LEAF_NODE	4416:3	4416:3	14	written
ASSIGN_OP	4416:11	4416:11	12	+=
LEAF_NODE	4416:11	4416:11	13	+=
RVAL	4416:14	4416:14	12	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4416:14	4416:59	13	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4416:14	4416:14	14	t2pWriteFile
LEAF_NODE	4416:14	4416:14	15	t2pWriteFile
LEAF_NODE	4416:26	4416:26	14	(
ARGUMENT	4416:27	4416:27	14	output
FIELD	4416:27	4416:27	15	output
LEAF_NODE	4416:27	4416:27	16	output
LEAF_NODE	4416:33	4416:33	14	,
ARGUMENT	4416:35	4416:45	14	( tdata_t ) buffer
LEAF_NODE	4416:35	4416:35	15	(
TYPE_NAME	4416:36	4416:36	15	tdata_t
LEAF_NODE	4416:36	4416:36	16	tdata_t
LEAF_NODE	4416:43	4416:43	15	)
FIELD	4416:45	4416:45	15	buffer
LEAF_NODE	4416:45	4416:45	16	buffer
LEAF_NODE	4416:51	4416:51	14	,
ARGUMENT	4416:53	4416:53	14	buflen
FIELD	4416:53	4416:53	15	buflen
LEAF_NODE	4416:53	4416:53	16	buflen
LEAF_NODE	4416:59	4416:59	14	)
LEAF_NODE	4416:60	4416:60	10	;
EXPR_STATEMENT	4417:3	4417:56	9	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 ) ;
EXPR	4417:3	4417:3	10	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
ASSIGN	4417:3	4417:14	11	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
LVAL	4417:3	4417:3	12	written
FIELD	4417:3	4417:3	13	written
LEAF_NODE	4417:3	4417:3	14	written
ASSIGN_OP	4417:11	4417:11	12	+=
LEAF_NODE	4417:11	4417:11	13	+=
RVAL	4417:14	4417:14	12	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
FUNCTION_CALL	4417:14	4417:55	13	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
CALLEE	4417:14	4417:14	14	t2pWriteFile
LEAF_NODE	4417:14	4417:14	15	t2pWriteFile
LEAF_NODE	4417:26	4417:26	14	(
ARGUMENT	4417:27	4417:27	14	output
FIELD	4417:27	4417:27	15	output
LEAF_NODE	4417:27	4417:27	16	output
LEAF_NODE	4417:33	4417:33	14	,
ARGUMENT	4417:35	4417:45	14	( tdata_t ) " 0 R "
LEAF_NODE	4417:35	4417:35	15	(
TYPE_NAME	4417:36	4417:36	15	tdata_t
LEAF_NODE	4417:36	4417:36	16	tdata_t
LEAF_NODE	4417:43	4417:43	15	)
FIELD	4417:45	4417:45	15	" 0 R "
LEAF_NODE	4417:45	4417:45	16	" 0 R "
LEAF_NODE	4417:52	4417:52	14	,
ARGUMENT	4417:54	4417:54	14	5
FIELD	4417:54	4417:54	15	5
LEAF_NODE	4417:54	4417:54	16	5
LEAF_NODE	4417:55	4417:55	14	)
LEAF_NODE	4417:56	4417:56	10	;
SELECTION	4418:3	4418:13	9	
KEYWORD	4418:3	4418:3	10	if
LEAF_NODE	4418:3	4418:3	11	if
LEAF_NODE	4418:5	4418:5	10	(
CONDITION	4418:6	4418:6	10	i % 4 == 3
EXPR	4418:6	4418:11	11	i % 4 == 3
FIELD	4418:6	4418:6	12	i
LEAF_NODE	4418:6	4418:6	13	i
LEAF_NODE	4418:7	4418:7	12	%
FIELD	4418:8	4418:8	12	4
LEAF_NODE	4418:8	4418:8	13	4
EQ_OPERATOR	4418:9	4418:9	12	==
LEAF_NODE	4418:9	4418:9	13	==
FIELD	4418:11	4418:11	12	3
LEAF_NODE	4418:11	4418:11	13	3
LEAF_NODE	4418:12	4418:12	10	)
STATEMENTS	4418:13	4420:3	10	
LEAF_NODE	4418:13	4418:13	11	{
STATEMENTS	4419:4	4419:4	11	
EXPR_STATEMENT	4419:4	4419:54	12	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 ) ;
EXPR	4419:4	4419:4	13	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
ASSIGN	4419:4	4419:15	14	written += t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
LVAL	4419:4	4419:4	15	written
FIELD	4419:4	4419:4	16	written
LEAF_NODE	4419:4	4419:4	17	written
ASSIGN_OP	4419:12	4419:12	15	+=
LEAF_NODE	4419:12	4419:12	16	+=
RVAL	4419:15	4419:15	15	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
FUNCTION_CALL	4419:15	4419:53	16	t2pWriteFile ( output , ( tdata_t ) "\n" , 1 )
CALLEE	4419:15	4419:15	17	t2pWriteFile
LEAF_NODE	4419:15	4419:15	18	t2pWriteFile
LEAF_NODE	4419:27	4419:27	17	(
ARGUMENT	4419:28	4419:28	17	output
FIELD	4419:28	4419:28	18	output
LEAF_NODE	4419:28	4419:28	19	output
LEAF_NODE	4419:34	4419:34	17	,
ARGUMENT	4419:36	4419:46	17	( tdata_t ) "\n"
LEAF_NODE	4419:36	4419:36	18	(
TYPE_NAME	4419:37	4419:37	18	tdata_t
LEAF_NODE	4419:37	4419:37	19	tdata_t
LEAF_NODE	4419:44	4419:44	18	)
FIELD	4419:46	4419:46	18	"\n"
LEAF_NODE	4419:46	4419:46	19	"\n"
LEAF_NODE	4419:50	4419:50	17	,
ARGUMENT	4419:52	4419:52	17	1
FIELD	4419:52	4419:52	18	1
LEAF_NODE	4419:52	4419:52	19	1
LEAF_NODE	4419:53	4419:53	17	)
LEAF_NODE	4419:54	4419:54	13	;
LEAF_NODE	4420:3	4420:3	11	}
LEAF_NODE	4421:2	4421:2	8	}
EXPR_STATEMENT	4422:2	4422:54	6	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 ) ;
EXPR	4422:2	4422:2	7	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
ASSIGN	4422:2	4422:13	8	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
LVAL	4422:2	4422:2	9	written
FIELD	4422:2	4422:2	10	written
LEAF_NODE	4422:2	4422:2	11	written
ASSIGN_OP	4422:10	4422:10	9	+=
LEAF_NODE	4422:10	4422:10	10	+=
RVAL	4422:13	4422:13	9	t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
FUNCTION_CALL	4422:13	4422:53	10	t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
CALLEE	4422:13	4422:13	11	t2pWriteFile
LEAF_NODE	4422:13	4422:13	12	t2pWriteFile
LEAF_NODE	4422:25	4422:25	11	(
ARGUMENT	4422:26	4422:26	11	output
FIELD	4422:26	4422:26	12	output
LEAF_NODE	4422:26	4422:26	13	output
LEAF_NODE	4422:32	4422:32	11	,
ARGUMENT	4422:34	4422:44	11	( tdata_t ) ">>\n"
LEAF_NODE	4422:34	4422:34	12	(
TYPE_NAME	4422:35	4422:35	12	tdata_t
LEAF_NODE	4422:35	4422:35	13	tdata_t
LEAF_NODE	4422:42	4422:42	12	)
FIELD	4422:44	4422:44	12	">>\n"
LEAF_NODE	4422:44	4422:44	13	">>\n"
LEAF_NODE	4422:50	4422:50	11	,
ARGUMENT	4422:52	4422:52	11	3
FIELD	4422:52	4422:52	12	3
LEAF_NODE	4422:52	4422:52	13	3
LEAF_NODE	4422:53	4422:53	11	)
LEAF_NODE	4422:54	4422:54	7	;
LEAF_NODE	4423:1	4423:1	5	}
SELECTION	4423:3	4423:8	3	
KEYWORD	4423:3	4423:3	4	else
LEAF_NODE	4423:3	4423:3	5	else
STATEMENTS	4423:8	4436:1	4	
LEAF_NODE	4423:8	4423:8	5	{
STATEMENTS	4424:3	4435:2	5	
EXPR_STATEMENT	4424:3	4424:65	6	written += t2pWriteFile ( output , ( tdata_t ) "/XObject <<\n" , 12 ) ;
EXPR	4424:3	4424:3	7	written += t2pWriteFile ( output , ( tdata_t ) "/XObject <<\n" , 12 )
ASSIGN	4424:3	4424:14	8	written += t2pWriteFile ( output , ( tdata_t ) "/XObject <<\n" , 12 )
LVAL	4424:3	4424:3	9	written
FIELD	4424:3	4424:3	10	written
LEAF_NODE	4424:3	4424:3	11	written
ASSIGN_OP	4424:11	4424:11	9	+=
LEAF_NODE	4424:11	4424:11	10	+=
RVAL	4424:14	4424:14	9	t2pWriteFile ( output , ( tdata_t ) "/XObject <<\n" , 12 )
FUNCTION_CALL	4424:14	4424:64	10	t2pWriteFile ( output , ( tdata_t ) "/XObject <<\n" , 12 )
CALLEE	4424:14	4424:14	11	t2pWriteFile
LEAF_NODE	4424:14	4424:14	12	t2pWriteFile
LEAF_NODE	4424:26	4424:26	11	(
ARGUMENT	4424:27	4424:27	11	output
FIELD	4424:27	4424:27	12	output
LEAF_NODE	4424:27	4424:27	13	output
LEAF_NODE	4424:33	4424:33	11	,
ARGUMENT	4424:35	4424:45	11	( tdata_t ) "/XObject <<\n"
LEAF_NODE	4424:35	4424:35	12	(
TYPE_NAME	4424:36	4424:36	12	tdata_t
LEAF_NODE	4424:36	4424:36	13	tdata_t
LEAF_NODE	4424:43	4424:43	12	)
FIELD	4424:45	4424:45	12	"/XObject <<\n"
LEAF_NODE	4424:45	4424:45	13	"/XObject <<\n"
LEAF_NODE	4424:60	4424:60	11	,
ARGUMENT	4424:62	4424:62	11	12
FIELD	4424:62	4424:62	12	12
LEAF_NODE	4424:62	4424:62	13	12
LEAF_NODE	4424:64	4424:64	11	)
LEAF_NODE	4424:65	4424:65	7	;
EXPR_STATEMENT	4425:3	4425:54	6	written += t2pWriteFile ( output , ( tdata_t ) "/Im" , 3 ) ;
EXPR	4425:3	4425:3	7	written += t2pWriteFile ( output , ( tdata_t ) "/Im" , 3 )
ASSIGN	4425:3	4425:14	8	written += t2pWriteFile ( output , ( tdata_t ) "/Im" , 3 )
LVAL	4425:3	4425:3	9	written
FIELD	4425:3	4425:3	10	written
LEAF_NODE	4425:3	4425:3	11	written
ASSIGN_OP	4425:11	4425:11	9	+=
LEAF_NODE	4425:11	4425:11	10	+=
RVAL	4425:14	4425:14	9	t2pWriteFile ( output , ( tdata_t ) "/Im" , 3 )
FUNCTION_CALL	4425:14	4425:53	10	t2pWriteFile ( output , ( tdata_t ) "/Im" , 3 )
CALLEE	4425:14	4425:14	11	t2pWriteFile
LEAF_NODE	4425:14	4425:14	12	t2pWriteFile
LEAF_NODE	4425:26	4425:26	11	(
ARGUMENT	4425:27	4425:27	11	output
FIELD	4425:27	4425:27	12	output
LEAF_NODE	4425:27	4425:27	13	output
LEAF_NODE	4425:33	4425:33	11	,
ARGUMENT	4425:35	4425:45	11	( tdata_t ) "/Im"
LEAF_NODE	4425:35	4425:35	12	(
TYPE_NAME	4425:36	4425:36	12	tdata_t
LEAF_NODE	4425:36	4425:36	13	tdata_t
LEAF_NODE	4425:43	4425:43	12	)
FIELD	4425:45	4425:45	12	"/Im"
LEAF_NODE	4425:45	4425:45	13	"/Im"
LEAF_NODE	4425:50	4425:50	11	,
ARGUMENT	4425:52	4425:52	11	3
FIELD	4425:52	4425:52	12	3
LEAF_NODE	4425:52	4425:52	13	3
LEAF_NODE	4425:53	4425:53	11	)
LEAF_NODE	4425:54	4425:54	7	;
EXPR_STATEMENT	4426:3	4426:67	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 ) ;
EXPR	4426:3	4426:3	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
ASSIGN	4426:3	4426:12	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
LVAL	4426:3	4426:3	9	buflen
FIELD	4426:3	4426:3	10	buflen
LEAF_NODE	4426:3	4426:3	11	buflen
ASSIGN_OP	4426:10	4426:10	9	=
LEAF_NODE	4426:10	4426:10	10	=
RVAL	4426:12	4426:12	9	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
FUNCTION_CALL	4426:12	4426:66	10	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
CALLEE	4426:12	4426:12	11	snprintf
LEAF_NODE	4426:12	4426:12	12	snprintf
LEAF_NODE	4426:20	4426:20	11	(
ARGUMENT	4426:21	4426:21	11	buffer
FIELD	4426:21	4426:21	12	buffer
LEAF_NODE	4426:21	4426:21	13	buffer
LEAF_NODE	4426:27	4426:27	11	,
ARGUMENT	4426:29	4426:29	11	sizeof ( buffer )
FUNCTION_CALL	4426:29	4426:42	12	sizeof ( buffer )
CALLEE	4426:29	4426:29	13	sizeof
LEAF_NODE	4426:29	4426:29	14	sizeof
LEAF_NODE	4426:35	4426:35	13	(
ARGUMENT	4426:36	4426:36	13	buffer
FIELD	4426:36	4426:36	14	buffer
LEAF_NODE	4426:36	4426:36	15	buffer
LEAF_NODE	4426:42	4426:42	13	)
LEAF_NODE	4426:43	4426:43	11	,
ARGUMENT	4426:45	4426:45	11	"%u"
FIELD	4426:45	4426:45	12	"%u"
LEAF_NODE	4426:45	4426:45	13	"%u"
LEAF_NODE	4426:49	4426:49	11	,
ARGUMENT	4426:51	4426:65	11	t2p -> pdf_page + 1
FIELD	4426:51	4426:56	12	t2p -> pdf_page
LEAF_NODE	4426:51	4426:51	13	t2p
LEAF_NODE	4426:54	4426:54	13	->
LEAF_NODE	4426:56	4426:56	13	pdf_page
LEAF_NODE	4426:64	4426:64	12	+
FIELD	4426:65	4426:65	12	1
LEAF_NODE	4426:65	4426:65	13	1
LEAF_NODE	4426:66	4426:66	11	)
LEAF_NODE	4426:67	4426:67	7	;
EXPR_STATEMENT	4427:3	4427:42	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4427:3	4427:3	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4427:3	4427:41	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4427:3	4427:3	9	check_snprintf_ret
LEAF_NODE	4427:3	4427:3	10	check_snprintf_ret
LEAF_NODE	4427:21	4427:21	9	(
ARGUMENT	4427:22	4427:22	9	t2p
FIELD	4427:22	4427:22	10	t2p
LEAF_NODE	4427:22	4427:22	11	t2p
LEAF_NODE	4427:25	4427:25	9	,
ARGUMENT	4427:27	4427:27	9	buflen
FIELD	4427:27	4427:27	10	buflen
LEAF_NODE	4427:27	4427:27	11	buflen
LEAF_NODE	4427:33	4427:33	9	,
ARGUMENT	4427:35	4427:35	9	buffer
FIELD	4427:35	4427:35	10	buffer
LEAF_NODE	4427:35	4427:35	11	buffer
LEAF_NODE	4427:41	4427:41	9	)
LEAF_NODE	4427:42	4427:42	7	;
EXPR_STATEMENT	4428:3	4428:60	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4428:3	4428:3	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4428:3	4428:14	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4428:3	4428:3	9	written
FIELD	4428:3	4428:3	10	written
LEAF_NODE	4428:3	4428:3	11	written
ASSIGN_OP	4428:11	4428:11	9	+=
LEAF_NODE	4428:11	4428:11	10	+=
RVAL	4428:14	4428:14	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4428:14	4428:59	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4428:14	4428:14	11	t2pWriteFile
LEAF_NODE	4428:14	4428:14	12	t2pWriteFile
LEAF_NODE	4428:26	4428:26	11	(
ARGUMENT	4428:27	4428:27	11	output
FIELD	4428:27	4428:27	12	output
LEAF_NODE	4428:27	4428:27	13	output
LEAF_NODE	4428:33	4428:33	11	,
ARGUMENT	4428:35	4428:45	11	( tdata_t ) buffer
LEAF_NODE	4428:35	4428:35	12	(
TYPE_NAME	4428:36	4428:36	12	tdata_t
LEAF_NODE	4428:36	4428:36	13	tdata_t
LEAF_NODE	4428:43	4428:43	12	)
FIELD	4428:45	4428:45	12	buffer
LEAF_NODE	4428:45	4428:45	13	buffer
LEAF_NODE	4428:51	4428:51	11	,
ARGUMENT	4428:53	4428:53	11	buflen
FIELD	4428:53	4428:53	12	buflen
LEAF_NODE	4428:53	4428:53	13	buflen
LEAF_NODE	4428:59	4428:59	11	)
LEAF_NODE	4428:60	4428:60	7	;
EXPR_STATEMENT	4429:3	4429:52	6	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 ) ;
EXPR	4429:3	4429:3	7	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
ASSIGN	4429:3	4429:14	8	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
LVAL	4429:3	4429:3	9	written
FIELD	4429:3	4429:3	10	written
LEAF_NODE	4429:3	4429:3	11	written
ASSIGN_OP	4429:11	4429:11	9	+=
LEAF_NODE	4429:11	4429:11	10	+=
RVAL	4429:14	4429:14	9	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
FUNCTION_CALL	4429:14	4429:51	10	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
CALLEE	4429:14	4429:14	11	t2pWriteFile
LEAF_NODE	4429:14	4429:14	12	t2pWriteFile
LEAF_NODE	4429:26	4429:26	11	(
ARGUMENT	4429:27	4429:27	11	output
FIELD	4429:27	4429:27	12	output
LEAF_NODE	4429:27	4429:27	13	output
LEAF_NODE	4429:33	4429:33	11	,
ARGUMENT	4429:35	4429:45	11	( tdata_t ) " "
LEAF_NODE	4429:35	4429:35	12	(
TYPE_NAME	4429:36	4429:36	12	tdata_t
LEAF_NODE	4429:36	4429:36	13	tdata_t
LEAF_NODE	4429:43	4429:43	12	)
FIELD	4429:45	4429:45	12	" "
LEAF_NODE	4429:45	4429:45	13	" "
LEAF_NODE	4429:48	4429:48	11	,
ARGUMENT	4429:50	4429:50	11	1
FIELD	4429:50	4429:50	12	1
LEAF_NODE	4429:50	4429:50	13	1
LEAF_NODE	4429:51	4429:51	11	)
LEAF_NODE	4429:52	4429:52	7	;
EXPR_STATEMENT	4430:3	4431:78	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra ) ) ;
EXPR	4430:3	4430:3	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra ) )
ASSIGN	4430:3	4430:12	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra ) )
LVAL	4430:3	4430:3	9	buflen
FIELD	4430:3	4430:3	10	buflen
LEAF_NODE	4430:3	4430:3	11	buflen
ASSIGN_OP	4430:10	4430:10	9	=
LEAF_NODE	4430:10	4430:10	10	=
RVAL	4430:12	4430:12	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra ) )
FUNCTION_CALL	4430:12	4431:77	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra ) )
CALLEE	4430:12	4430:12	11	snprintf
LEAF_NODE	4430:12	4430:12	12	snprintf
LEAF_NODE	4430:20	4430:20	11	(
ARGUMENT	4430:21	4430:21	11	buffer
FIELD	4430:21	4430:21	12	buffer
LEAF_NODE	4430:21	4430:21	13	buffer
LEAF_NODE	4430:27	4430:27	11	,
ARGUMENT	4430:29	4430:29	11	sizeof ( buffer )
FUNCTION_CALL	4430:29	4430:42	12	sizeof ( buffer )
CALLEE	4430:29	4430:29	13	sizeof
LEAF_NODE	4430:29	4430:29	14	sizeof
LEAF_NODE	4430:35	4430:35	13	(
ARGUMENT	4430:36	4430:36	13	buffer
FIELD	4430:36	4430:36	14	buffer
LEAF_NODE	4430:36	4430:36	15	buffer
LEAF_NODE	4430:42	4430:42	13	)
LEAF_NODE	4430:43	4430:43	11	,
ARGUMENT	4430:45	4430:45	11	"%lu"
FIELD	4430:45	4430:45	12	"%lu"
LEAF_NODE	4430:45	4430:45	13	"%lu"
LEAF_NODE	4430:50	4430:50	11	,
ARGUMENT	4431:4	4431:76	11	( unsigned long ) ( object + 3 + ( 2 * i ) + t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra )
LEAF_NODE	4431:4	4431:4	12	(
TYPE_NAME	4431:5	4431:14	12	unsigned long
LEAF_NODE	4431:5	4431:5	13	unsigned
LEAF_NODE	4431:14	4431:14	13	long
LEAF_NODE	4431:18	4431:18	12	)
LEAF_NODE	4431:19	4431:19	12	(
FIELD	4431:20	4431:20	12	object
LEAF_NODE	4431:20	4431:20	13	object
LEAF_NODE	4431:26	4431:26	12	+
FIELD	4431:27	4431:27	12	3
LEAF_NODE	4431:27	4431:27	13	3
LEAF_NODE	4431:28	4431:28	12	+
LEAF_NODE	4431:29	4431:29	12	(
FIELD	4431:30	4431:30	12	2
LEAF_NODE	4431:30	4431:30	13	2
LEAF_NODE	4431:31	4431:31	12	*
FIELD	4431:32	4431:32	12	i
LEAF_NODE	4431:32	4431:32	13	i
LEAF_NODE	4431:33	4431:33	12	)
LEAF_NODE	4431:34	4431:34	12	+
FIELD	4431:35	4431:66	12	t2p -> tiff_pages [ t2p -> pdf_page ] . page_extra
LEAF_NODE	4431:35	4431:35	13	t2p
LEAF_NODE	4431:38	4431:38	13	->
LEAF_NODE	4431:40	4431:40	13	tiff_pages
LEAF_NODE	4431:50	4431:50	13	[
EXPR	4431:51	4431:51	13	t2p -> pdf_page
FIELD	4431:51	4431:56	14	t2p -> pdf_page
LEAF_NODE	4431:51	4431:51	15	t2p
LEAF_NODE	4431:54	4431:54	15	->
LEAF_NODE	4431:56	4431:56	15	pdf_page
LEAF_NODE	4431:64	4431:64	13	]
LEAF_NODE	4431:65	4431:65	13	.
LEAF_NODE	4431:66	4431:66	13	page_extra
LEAF_NODE	4431:76	4431:76	12	)
LEAF_NODE	4431:77	4431:77	11	)
LEAF_NODE	4431:78	4431:78	7	;
EXPR_STATEMENT	4432:3	4432:42	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4432:3	4432:3	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4432:3	4432:41	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4432:3	4432:3	9	check_snprintf_ret
LEAF_NODE	4432:3	4432:3	10	check_snprintf_ret
LEAF_NODE	4432:21	4432:21	9	(
ARGUMENT	4432:22	4432:22	9	t2p
FIELD	4432:22	4432:22	10	t2p
LEAF_NODE	4432:22	4432:22	11	t2p
LEAF_NODE	4432:25	4432:25	9	,
ARGUMENT	4432:27	4432:27	9	buflen
FIELD	4432:27	4432:27	10	buflen
LEAF_NODE	4432:27	4432:27	11	buflen
LEAF_NODE	4432:33	4432:33	9	,
ARGUMENT	4432:35	4432:35	9	buffer
FIELD	4432:35	4432:35	10	buffer
LEAF_NODE	4432:35	4432:35	11	buffer
LEAF_NODE	4432:41	4432:41	9	)
LEAF_NODE	4432:42	4432:42	7	;
EXPR_STATEMENT	4433:3	4433:60	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4433:3	4433:3	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4433:3	4433:14	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4433:3	4433:3	9	written
FIELD	4433:3	4433:3	10	written
LEAF_NODE	4433:3	4433:3	11	written
ASSIGN_OP	4433:11	4433:11	9	+=
LEAF_NODE	4433:11	4433:11	10	+=
RVAL	4433:14	4433:14	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4433:14	4433:59	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4433:14	4433:14	11	t2pWriteFile
LEAF_NODE	4433:14	4433:14	12	t2pWriteFile
LEAF_NODE	4433:26	4433:26	11	(
ARGUMENT	4433:27	4433:27	11	output
FIELD	4433:27	4433:27	12	output
LEAF_NODE	4433:27	4433:27	13	output
LEAF_NODE	4433:33	4433:33	11	,
ARGUMENT	4433:35	4433:45	11	( tdata_t ) buffer
LEAF_NODE	4433:35	4433:35	12	(
TYPE_NAME	4433:36	4433:36	12	tdata_t
LEAF_NODE	4433:36	4433:36	13	tdata_t
LEAF_NODE	4433:43	4433:43	12	)
FIELD	4433:45	4433:45	12	buffer
LEAF_NODE	4433:45	4433:45	13	buffer
LEAF_NODE	4433:51	4433:51	11	,
ARGUMENT	4433:53	4433:53	11	buflen
FIELD	4433:53	4433:53	12	buflen
LEAF_NODE	4433:53	4433:53	13	buflen
LEAF_NODE	4433:59	4433:59	11	)
LEAF_NODE	4433:60	4433:60	7	;
EXPR_STATEMENT	4434:3	4434:56	6	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 ) ;
EXPR	4434:3	4434:3	7	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
ASSIGN	4434:3	4434:14	8	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
LVAL	4434:3	4434:3	9	written
FIELD	4434:3	4434:3	10	written
LEAF_NODE	4434:3	4434:3	11	written
ASSIGN_OP	4434:11	4434:11	9	+=
LEAF_NODE	4434:11	4434:11	10	+=
RVAL	4434:14	4434:14	9	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
FUNCTION_CALL	4434:14	4434:55	10	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
CALLEE	4434:14	4434:14	11	t2pWriteFile
LEAF_NODE	4434:14	4434:14	12	t2pWriteFile
LEAF_NODE	4434:26	4434:26	11	(
ARGUMENT	4434:27	4434:27	11	output
FIELD	4434:27	4434:27	12	output
LEAF_NODE	4434:27	4434:27	13	output
LEAF_NODE	4434:33	4434:33	11	,
ARGUMENT	4434:35	4434:45	11	( tdata_t ) " 0 R "
LEAF_NODE	4434:35	4434:35	12	(
TYPE_NAME	4434:36	4434:36	12	tdata_t
LEAF_NODE	4434:36	4434:36	13	tdata_t
LEAF_NODE	4434:43	4434:43	12	)
FIELD	4434:45	4434:45	12	" 0 R "
LEAF_NODE	4434:45	4434:45	13	" 0 R "
LEAF_NODE	4434:52	4434:52	11	,
ARGUMENT	4434:54	4434:54	11	5
FIELD	4434:54	4434:54	12	5
LEAF_NODE	4434:54	4434:54	13	5
LEAF_NODE	4434:55	4434:55	11	)
LEAF_NODE	4434:56	4434:56	7	;
EXPR_STATEMENT	4435:2	4435:54	6	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 ) ;
EXPR	4435:2	4435:2	7	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
ASSIGN	4435:2	4435:13	8	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
LVAL	4435:2	4435:2	9	written
FIELD	4435:2	4435:2	10	written
LEAF_NODE	4435:2	4435:2	11	written
ASSIGN_OP	4435:10	4435:10	9	+=
LEAF_NODE	4435:10	4435:10	10	+=
RVAL	4435:13	4435:13	9	t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
FUNCTION_CALL	4435:13	4435:53	10	t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
CALLEE	4435:13	4435:13	11	t2pWriteFile
LEAF_NODE	4435:13	4435:13	12	t2pWriteFile
LEAF_NODE	4435:25	4435:25	11	(
ARGUMENT	4435:26	4435:26	11	output
FIELD	4435:26	4435:26	12	output
LEAF_NODE	4435:26	4435:26	13	output
LEAF_NODE	4435:32	4435:32	11	,
ARGUMENT	4435:34	4435:44	11	( tdata_t ) ">>\n"
LEAF_NODE	4435:34	4435:34	12	(
TYPE_NAME	4435:35	4435:35	12	tdata_t
LEAF_NODE	4435:35	4435:35	13	tdata_t
LEAF_NODE	4435:42	4435:42	12	)
FIELD	4435:44	4435:44	12	">>\n"
LEAF_NODE	4435:44	4435:44	13	">>\n"
LEAF_NODE	4435:50	4435:50	11	,
ARGUMENT	4435:52	4435:52	11	3
FIELD	4435:52	4435:52	12	3
LEAF_NODE	4435:52	4435:52	13	3
LEAF_NODE	4435:53	4435:53	11	)
LEAF_NODE	4435:54	4435:54	7	;
LEAF_NODE	4436:1	4436:1	5	}
SELECTION	4437:1	4437:42	3	
KEYWORD	4437:1	4437:1	4	if
LEAF_NODE	4437:1	4437:1	5	if
LEAF_NODE	4437:3	4437:3	4	(
CONDITION	4437:4	4437:4	4	t2p -> tiff_transferfunctioncount != 0
EXPR	4437:4	4437:39	5	t2p -> tiff_transferfunctioncount != 0
FIELD	4437:4	4437:9	6	t2p -> tiff_transferfunctioncount
LEAF_NODE	4437:4	4437:4	7	t2p
LEAF_NODE	4437:7	4437:7	7	->
LEAF_NODE	4437:9	4437:9	7	tiff_transferfunctioncount
EQ_OPERATOR	4437:36	4437:36	6	!=
LEAF_NODE	4437:36	4437:36	7	!=
FIELD	4437:39	4437:39	6	0
LEAF_NODE	4437:39	4437:39	7	0
LEAF_NODE	4437:40	4437:40	4	)
STATEMENTS	4437:42	4446:1	4	
LEAF_NODE	4437:42	4437:42	5	{
STATEMENTS	4438:2	4445:2	5	
EXPR_STATEMENT	4438:2	4438:64	6	written += t2pWriteFile ( output , ( tdata_t ) "/ExtGState <<" , 13 ) ;
EXPR	4438:2	4438:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/ExtGState <<" , 13 )
ASSIGN	4438:2	4438:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/ExtGState <<" , 13 )
LVAL	4438:2	4438:2	9	written
FIELD	4438:2	4438:2	10	written
LEAF_NODE	4438:2	4438:2	11	written
ASSIGN_OP	4438:10	4438:10	9	+=
LEAF_NODE	4438:10	4438:10	10	+=
RVAL	4438:13	4438:13	9	t2pWriteFile ( output , ( tdata_t ) "/ExtGState <<" , 13 )
FUNCTION_CALL	4438:13	4438:63	10	t2pWriteFile ( output , ( tdata_t ) "/ExtGState <<" , 13 )
CALLEE	4438:13	4438:13	11	t2pWriteFile
LEAF_NODE	4438:13	4438:13	12	t2pWriteFile
LEAF_NODE	4438:25	4438:25	11	(
ARGUMENT	4438:26	4438:26	11	output
FIELD	4438:26	4438:26	12	output
LEAF_NODE	4438:26	4438:26	13	output
LEAF_NODE	4438:32	4438:32	11	,
ARGUMENT	4438:34	4438:44	11	( tdata_t ) "/ExtGState <<"
LEAF_NODE	4438:34	4438:34	12	(
TYPE_NAME	4438:35	4438:35	12	tdata_t
LEAF_NODE	4438:35	4438:35	13	tdata_t
LEAF_NODE	4438:42	4438:42	12	)
FIELD	4438:44	4438:44	12	"/ExtGState <<"
LEAF_NODE	4438:44	4438:44	13	"/ExtGState <<"
LEAF_NODE	4438:59	4438:59	11	,
ARGUMENT	4438:61	4438:61	11	13
FIELD	4438:61	4438:61	12	13
LEAF_NODE	4438:61	4438:61	13	13
LEAF_NODE	4438:63	4438:63	11	)
LEAF_NODE	4438:64	4438:64	7	;
EXPR_STATEMENT	4439:2	4439:44	6	t2pWriteFile ( output , ( tdata_t ) "/GS1 " , 5 ) ;
EXPR	4439:2	4439:2	7	t2pWriteFile ( output , ( tdata_t ) "/GS1 " , 5 )
FUNCTION_CALL	4439:2	4439:43	8	t2pWriteFile ( output , ( tdata_t ) "/GS1 " , 5 )
CALLEE	4439:2	4439:2	9	t2pWriteFile
LEAF_NODE	4439:2	4439:2	10	t2pWriteFile
LEAF_NODE	4439:14	4439:14	9	(
ARGUMENT	4439:15	4439:15	9	output
FIELD	4439:15	4439:15	10	output
LEAF_NODE	4439:15	4439:15	11	output
LEAF_NODE	4439:21	4439:21	9	,
ARGUMENT	4439:23	4439:33	9	( tdata_t ) "/GS1 "
LEAF_NODE	4439:23	4439:23	10	(
TYPE_NAME	4439:24	4439:24	10	tdata_t
LEAF_NODE	4439:24	4439:24	11	tdata_t
LEAF_NODE	4439:31	4439:31	10	)
FIELD	4439:33	4439:33	10	"/GS1 "
LEAF_NODE	4439:33	4439:33	11	"/GS1 "
LEAF_NODE	4439:40	4439:40	9	,
ARGUMENT	4439:42	4439:42	9	5
FIELD	4439:42	4439:42	10	5
LEAF_NODE	4439:42	4439:42	11	5
LEAF_NODE	4439:43	4439:43	9	)
LEAF_NODE	4439:44	4439:44	7	;
EXPR_STATEMENT	4440:2	4441:31	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 ) ) ;
EXPR	4440:2	4440:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 ) )
ASSIGN	4440:2	4440:11	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 ) )
LVAL	4440:2	4440:2	9	buflen
FIELD	4440:2	4440:2	10	buflen
LEAF_NODE	4440:2	4440:2	11	buflen
ASSIGN_OP	4440:9	4440:9	9	=
LEAF_NODE	4440:9	4440:9	10	=
RVAL	4440:11	4440:11	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 ) )
FUNCTION_CALL	4440:11	4441:30	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( object + 3 ) )
CALLEE	4440:11	4440:11	11	snprintf
LEAF_NODE	4440:11	4440:11	12	snprintf
LEAF_NODE	4440:19	4440:19	11	(
ARGUMENT	4440:20	4440:20	11	buffer
FIELD	4440:20	4440:20	12	buffer
LEAF_NODE	4440:20	4440:20	13	buffer
LEAF_NODE	4440:26	4440:26	11	,
ARGUMENT	4440:28	4440:28	11	sizeof ( buffer )
FUNCTION_CALL	4440:28	4440:41	12	sizeof ( buffer )
CALLEE	4440:28	4440:28	13	sizeof
LEAF_NODE	4440:28	4440:28	14	sizeof
LEAF_NODE	4440:34	4440:34	13	(
ARGUMENT	4440:35	4440:35	13	buffer
FIELD	4440:35	4440:35	14	buffer
LEAF_NODE	4440:35	4440:35	15	buffer
LEAF_NODE	4440:41	4440:41	13	)
LEAF_NODE	4440:42	4440:42	11	,
ARGUMENT	4440:44	4440:44	11	"%lu"
FIELD	4440:44	4440:44	12	"%lu"
LEAF_NODE	4440:44	4440:44	13	"%lu"
LEAF_NODE	4440:49	4440:49	11	,
ARGUMENT	4441:3	4441:29	11	( unsigned long ) ( object + 3 )
LEAF_NODE	4441:3	4441:3	12	(
TYPE_NAME	4441:4	4441:13	12	unsigned long
LEAF_NODE	4441:4	4441:4	13	unsigned
LEAF_NODE	4441:13	4441:13	13	long
LEAF_NODE	4441:17	4441:17	12	)
LEAF_NODE	4441:18	4441:18	12	(
FIELD	4441:19	4441:19	12	object
LEAF_NODE	4441:19	4441:19	13	object
LEAF_NODE	4441:26	4441:26	12	+
FIELD	4441:28	4441:28	12	3
LEAF_NODE	4441:28	4441:28	13	3
LEAF_NODE	4441:29	4441:29	12	)
LEAF_NODE	4441:30	4441:30	11	)
LEAF_NODE	4441:31	4441:31	7	;
EXPR_STATEMENT	4442:2	4442:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4442:2	4442:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4442:2	4442:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4442:2	4442:2	9	check_snprintf_ret
LEAF_NODE	4442:2	4442:2	10	check_snprintf_ret
LEAF_NODE	4442:20	4442:20	9	(
ARGUMENT	4442:21	4442:21	9	t2p
FIELD	4442:21	4442:21	10	t2p
LEAF_NODE	4442:21	4442:21	11	t2p
LEAF_NODE	4442:24	4442:24	9	,
ARGUMENT	4442:26	4442:26	9	buflen
FIELD	4442:26	4442:26	10	buflen
LEAF_NODE	4442:26	4442:26	11	buflen
LEAF_NODE	4442:32	4442:32	9	,
ARGUMENT	4442:34	4442:34	9	buffer
FIELD	4442:34	4442:34	10	buffer
LEAF_NODE	4442:34	4442:34	11	buffer
LEAF_NODE	4442:40	4442:40	9	)
LEAF_NODE	4442:41	4442:41	7	;
EXPR_STATEMENT	4443:2	4443:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4443:2	4443:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4443:2	4443:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4443:2	4443:2	9	written
FIELD	4443:2	4443:2	10	written
LEAF_NODE	4443:2	4443:2	11	written
ASSIGN_OP	4443:10	4443:10	9	+=
LEAF_NODE	4443:10	4443:10	10	+=
RVAL	4443:13	4443:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4443:13	4443:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4443:13	4443:13	11	t2pWriteFile
LEAF_NODE	4443:13	4443:13	12	t2pWriteFile
LEAF_NODE	4443:25	4443:25	11	(
ARGUMENT	4443:26	4443:26	11	output
FIELD	4443:26	4443:26	12	output
LEAF_NODE	4443:26	4443:26	13	output
LEAF_NODE	4443:32	4443:32	11	,
ARGUMENT	4443:34	4443:44	11	( tdata_t ) buffer
LEAF_NODE	4443:34	4443:34	12	(
TYPE_NAME	4443:35	4443:35	12	tdata_t
LEAF_NODE	4443:35	4443:35	13	tdata_t
LEAF_NODE	4443:42	4443:42	12	)
FIELD	4443:44	4443:44	12	buffer
LEAF_NODE	4443:44	4443:44	13	buffer
LEAF_NODE	4443:50	4443:50	11	,
ARGUMENT	4443:52	4443:52	11	buflen
FIELD	4443:52	4443:52	12	buflen
LEAF_NODE	4443:52	4443:52	13	buflen
LEAF_NODE	4443:58	4443:58	11	)
LEAF_NODE	4443:59	4443:59	7	;
EXPR_STATEMENT	4444:2	4444:55	6	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 ) ;
EXPR	4444:2	4444:2	7	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
ASSIGN	4444:2	4444:13	8	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
LVAL	4444:2	4444:2	9	written
FIELD	4444:2	4444:2	10	written
LEAF_NODE	4444:2	4444:2	11	written
ASSIGN_OP	4444:10	4444:10	9	+=
LEAF_NODE	4444:10	4444:10	10	+=
RVAL	4444:13	4444:13	9	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
FUNCTION_CALL	4444:13	4444:54	10	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
CALLEE	4444:13	4444:13	11	t2pWriteFile
LEAF_NODE	4444:13	4444:13	12	t2pWriteFile
LEAF_NODE	4444:25	4444:25	11	(
ARGUMENT	4444:26	4444:26	11	output
FIELD	4444:26	4444:26	12	output
LEAF_NODE	4444:26	4444:26	13	output
LEAF_NODE	4444:32	4444:32	11	,
ARGUMENT	4444:34	4444:44	11	( tdata_t ) " 0 R "
LEAF_NODE	4444:34	4444:34	12	(
TYPE_NAME	4444:35	4444:35	12	tdata_t
LEAF_NODE	4444:35	4444:35	13	tdata_t
LEAF_NODE	4444:42	4444:42	12	)
FIELD	4444:44	4444:44	12	" 0 R "
LEAF_NODE	4444:44	4444:44	13	" 0 R "
LEAF_NODE	4444:51	4444:51	11	,
ARGUMENT	4444:53	4444:53	11	5
FIELD	4444:53	4444:53	12	5
LEAF_NODE	4444:53	4444:53	13	5
LEAF_NODE	4444:54	4444:54	11	)
LEAF_NODE	4444:55	4444:55	7	;
EXPR_STATEMENT	4445:2	4445:55	6	written += t2pWriteFile ( output , ( tdata_t ) ">> \n" , 4 ) ;
EXPR	4445:2	4445:2	7	written += t2pWriteFile ( output , ( tdata_t ) ">> \n" , 4 )
ASSIGN	4445:2	4445:13	8	written += t2pWriteFile ( output , ( tdata_t ) ">> \n" , 4 )
LVAL	4445:2	4445:2	9	written
FIELD	4445:2	4445:2	10	written
LEAF_NODE	4445:2	4445:2	11	written
ASSIGN_OP	4445:10	4445:10	9	+=
LEAF_NODE	4445:10	4445:10	10	+=
RVAL	4445:13	4445:13	9	t2pWriteFile ( output , ( tdata_t ) ">> \n" , 4 )
FUNCTION_CALL	4445:13	4445:54	10	t2pWriteFile ( output , ( tdata_t ) ">> \n" , 4 )
CALLEE	4445:13	4445:13	11	t2pWriteFile
LEAF_NODE	4445:13	4445:13	12	t2pWriteFile
LEAF_NODE	4445:25	4445:25	11	(
ARGUMENT	4445:26	4445:26	11	output
FIELD	4445:26	4445:26	12	output
LEAF_NODE	4445:26	4445:26	13	output
LEAF_NODE	4445:32	4445:32	11	,
ARGUMENT	4445:34	4445:44	11	( tdata_t ) ">> \n"
LEAF_NODE	4445:34	4445:34	12	(
TYPE_NAME	4445:35	4445:35	12	tdata_t
LEAF_NODE	4445:35	4445:35	13	tdata_t
LEAF_NODE	4445:42	4445:42	12	)
FIELD	4445:44	4445:44	12	">> \n"
LEAF_NODE	4445:44	4445:44	13	">> \n"
LEAF_NODE	4445:51	4445:51	11	,
ARGUMENT	4445:53	4445:53	11	4
FIELD	4445:53	4445:53	12	4
LEAF_NODE	4445:53	4445:53	13	4
LEAF_NODE	4445:54	4445:54	11	)
LEAF_NODE	4445:55	4445:55	7	;
LEAF_NODE	4446:1	4446:1	5	}
EXPR_STATEMENT	4447:1	4447:61	3	written += t2pWriteFile ( output , ( tdata_t ) "/ProcSet [ " , 11 ) ;
EXPR	4447:1	4447:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/ProcSet [ " , 11 )
ASSIGN	4447:1	4447:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/ProcSet [ " , 11 )
LVAL	4447:1	4447:1	6	written
FIELD	4447:1	4447:1	7	written
LEAF_NODE	4447:1	4447:1	8	written
ASSIGN_OP	4447:9	4447:9	6	+=
LEAF_NODE	4447:9	4447:9	7	+=
RVAL	4447:12	4447:12	6	t2pWriteFile ( output , ( tdata_t ) "/ProcSet [ " , 11 )
FUNCTION_CALL	4447:12	4447:60	7	t2pWriteFile ( output , ( tdata_t ) "/ProcSet [ " , 11 )
CALLEE	4447:12	4447:12	8	t2pWriteFile
LEAF_NODE	4447:12	4447:12	9	t2pWriteFile
LEAF_NODE	4447:24	4447:24	8	(
ARGUMENT	4447:25	4447:25	8	output
FIELD	4447:25	4447:25	9	output
LEAF_NODE	4447:25	4447:25	10	output
LEAF_NODE	4447:31	4447:31	8	,
ARGUMENT	4447:33	4447:43	8	( tdata_t ) "/ProcSet [ "
LEAF_NODE	4447:33	4447:33	9	(
TYPE_NAME	4447:34	4447:34	9	tdata_t
LEAF_NODE	4447:34	4447:34	10	tdata_t
LEAF_NODE	4447:41	4447:41	9	)
FIELD	4447:43	4447:43	9	"/ProcSet [ "
LEAF_NODE	4447:43	4447:43	10	"/ProcSet [ "
LEAF_NODE	4447:56	4447:56	8	,
ARGUMENT	4447:58	4447:58	8	11
FIELD	4447:58	4447:58	9	11
LEAF_NODE	4447:58	4447:58	10	11
LEAF_NODE	4447:60	4447:60	8	)
LEAF_NODE	4447:61	4447:61	4	;
SELECTION	4448:1	4450:3	3	
KEYWORD	4448:1	4448:1	4	if
LEAF_NODE	4448:1	4448:1	5	if
LEAF_NODE	4448:3	4448:3	4	(
CONDITION	4448:4	4448:4	4	t2p -> pdf_colorspace & T2P_CS_BILEVEL || t2p -> pdf_colorspace & T2P_CS_GRAY
EXPR	4448:4	4448:4	5	t2p -> pdf_colorspace & T2P_CS_BILEVEL || t2p -> pdf_colorspace & T2P_CS_GRAY
OR	4448:4	4449:5	6	t2p -> pdf_colorspace & T2P_CS_BILEVEL || t2p -> pdf_colorspace & T2P_CS_GRAY
EXPR	4448:4	4448:26	7	t2p -> pdf_colorspace & T2P_CS_BILEVEL
FIELD	4448:4	4448:9	8	t2p -> pdf_colorspace
LEAF_NODE	4448:4	4448:4	9	t2p
LEAF_NODE	4448:7	4448:7	9	->
LEAF_NODE	4448:9	4448:9	9	pdf_colorspace
LEAF_NODE	4448:24	4448:24	8	&
FIELD	4448:26	4448:26	8	T2P_CS_BILEVEL
LEAF_NODE	4448:26	4448:26	9	T2P_CS_BILEVEL
LEAF_NODE	4449:2	4449:2	7	||
EXPR	4449:5	4449:27	7	t2p -> pdf_colorspace & T2P_CS_GRAY
FIELD	4449:5	4449:10	8	t2p -> pdf_colorspace
LEAF_NODE	4449:5	4449:5	9	t2p
LEAF_NODE	4449:8	4449:8	9	->
LEAF_NODE	4449:10	4449:10	9	pdf_colorspace
LEAF_NODE	4449:25	4449:25	8	&
FIELD	4449:27	4449:27	8	T2P_CS_GRAY
LEAF_NODE	4449:27	4449:27	9	T2P_CS_GRAY
LEAF_NODE	4450:2	4450:2	4	)
STATEMENTS	4450:3	4452:1	4	
LEAF_NODE	4450:3	4450:3	5	{
STATEMENTS	4451:2	4451:2	5	
EXPR_STATEMENT	4451:2	4451:58	6	written += t2pWriteFile ( output , ( tdata_t ) "/ImageB " , 8 ) ;
EXPR	4451:2	4451:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/ImageB " , 8 )
ASSIGN	4451:2	4451:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/ImageB " , 8 )
LVAL	4451:2	4451:2	9	written
FIELD	4451:2	4451:2	10	written
LEAF_NODE	4451:2	4451:2	11	written
ASSIGN_OP	4451:10	4451:10	9	+=
LEAF_NODE	4451:10	4451:10	10	+=
RVAL	4451:13	4451:13	9	t2pWriteFile ( output , ( tdata_t ) "/ImageB " , 8 )
FUNCTION_CALL	4451:13	4451:57	10	t2pWriteFile ( output , ( tdata_t ) "/ImageB " , 8 )
CALLEE	4451:13	4451:13	11	t2pWriteFile
LEAF_NODE	4451:13	4451:13	12	t2pWriteFile
LEAF_NODE	4451:25	4451:25	11	(
ARGUMENT	4451:26	4451:26	11	output
FIELD	4451:26	4451:26	12	output
LEAF_NODE	4451:26	4451:26	13	output
LEAF_NODE	4451:32	4451:32	11	,
ARGUMENT	4451:34	4451:44	11	( tdata_t ) "/ImageB "
LEAF_NODE	4451:34	4451:34	12	(
TYPE_NAME	4451:35	4451:35	12	tdata_t
LEAF_NODE	4451:35	4451:35	13	tdata_t
LEAF_NODE	4451:42	4451:42	12	)
FIELD	4451:44	4451:44	12	"/ImageB "
LEAF_NODE	4451:44	4451:44	13	"/ImageB "
LEAF_NODE	4451:54	4451:54	11	,
ARGUMENT	4451:56	4451:56	11	8
FIELD	4451:56	4451:56	12	8
LEAF_NODE	4451:56	4451:56	13	8
LEAF_NODE	4451:57	4451:57	11	)
LEAF_NODE	4451:58	4451:58	7	;
LEAF_NODE	4452:1	4452:1	5	}
SELECTION	4452:3	4452:8	3	
KEYWORD	4452:3	4452:3	4	else
LEAF_NODE	4452:3	4452:3	5	else
STATEMENTS	4452:8	4457:1	4	
LEAF_NODE	4452:8	4452:8	5	{
STATEMENTS	4453:2	4454:2	5	
EXPR_STATEMENT	4453:2	4453:58	6	written += t2pWriteFile ( output , ( tdata_t ) "/ImageC " , 8 ) ;
EXPR	4453:2	4453:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/ImageC " , 8 )
ASSIGN	4453:2	4453:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/ImageC " , 8 )
LVAL	4453:2	4453:2	9	written
FIELD	4453:2	4453:2	10	written
LEAF_NODE	4453:2	4453:2	11	written
ASSIGN_OP	4453:10	4453:10	9	+=
LEAF_NODE	4453:10	4453:10	10	+=
RVAL	4453:13	4453:13	9	t2pWriteFile ( output , ( tdata_t ) "/ImageC " , 8 )
FUNCTION_CALL	4453:13	4453:57	10	t2pWriteFile ( output , ( tdata_t ) "/ImageC " , 8 )
CALLEE	4453:13	4453:13	11	t2pWriteFile
LEAF_NODE	4453:13	4453:13	12	t2pWriteFile
LEAF_NODE	4453:25	4453:25	11	(
ARGUMENT	4453:26	4453:26	11	output
FIELD	4453:26	4453:26	12	output
LEAF_NODE	4453:26	4453:26	13	output
LEAF_NODE	4453:32	4453:32	11	,
ARGUMENT	4453:34	4453:44	11	( tdata_t ) "/ImageC "
LEAF_NODE	4453:34	4453:34	12	(
TYPE_NAME	4453:35	4453:35	12	tdata_t
LEAF_NODE	4453:35	4453:35	13	tdata_t
LEAF_NODE	4453:42	4453:42	12	)
FIELD	4453:44	4453:44	12	"/ImageC "
LEAF_NODE	4453:44	4453:44	13	"/ImageC "
LEAF_NODE	4453:54	4453:54	11	,
ARGUMENT	4453:56	4453:56	11	8
FIELD	4453:56	4453:56	12	8
LEAF_NODE	4453:56	4453:56	13	8
LEAF_NODE	4453:57	4453:57	11	)
LEAF_NODE	4453:58	4453:58	7	;
SELECTION	4454:2	4454:42	6	
KEYWORD	4454:2	4454:2	7	if
LEAF_NODE	4454:2	4454:2	8	if
LEAF_NODE	4454:4	4454:4	7	(
CONDITION	4454:5	4454:5	7	t2p -> pdf_colorspace & T2P_CS_PALETTE
EXPR	4454:5	4454:27	8	t2p -> pdf_colorspace & T2P_CS_PALETTE
FIELD	4454:5	4454:10	9	t2p -> pdf_colorspace
LEAF_NODE	4454:5	4454:5	10	t2p
LEAF_NODE	4454:8	4454:8	10	->
LEAF_NODE	4454:10	4454:10	10	pdf_colorspace
LEAF_NODE	4454:25	4454:25	9	&
FIELD	4454:27	4454:27	9	T2P_CS_PALETTE
LEAF_NODE	4454:27	4454:27	10	T2P_CS_PALETTE
LEAF_NODE	4454:41	4454:41	7	)
STATEMENTS	4454:42	4456:2	7	
LEAF_NODE	4454:42	4454:42	8	{
STATEMENTS	4455:3	4455:3	8	
EXPR_STATEMENT	4455:3	4455:59	9	written += t2pWriteFile ( output , ( tdata_t ) "/ImageI " , 8 ) ;
EXPR	4455:3	4455:3	10	written += t2pWriteFile ( output , ( tdata_t ) "/ImageI " , 8 )
ASSIGN	4455:3	4455:14	11	written += t2pWriteFile ( output , ( tdata_t ) "/ImageI " , 8 )
LVAL	4455:3	4455:3	12	written
FIELD	4455:3	4455:3	13	written
LEAF_NODE	4455:3	4455:3	14	written
ASSIGN_OP	4455:11	4455:11	12	+=
LEAF_NODE	4455:11	4455:11	13	+=
RVAL	4455:14	4455:14	12	t2pWriteFile ( output , ( tdata_t ) "/ImageI " , 8 )
FUNCTION_CALL	4455:14	4455:58	13	t2pWriteFile ( output , ( tdata_t ) "/ImageI " , 8 )
CALLEE	4455:14	4455:14	14	t2pWriteFile
LEAF_NODE	4455:14	4455:14	15	t2pWriteFile
LEAF_NODE	4455:26	4455:26	14	(
ARGUMENT	4455:27	4455:27	14	output
FIELD	4455:27	4455:27	15	output
LEAF_NODE	4455:27	4455:27	16	output
LEAF_NODE	4455:33	4455:33	14	,
ARGUMENT	4455:35	4455:45	14	( tdata_t ) "/ImageI "
LEAF_NODE	4455:35	4455:35	15	(
TYPE_NAME	4455:36	4455:36	15	tdata_t
LEAF_NODE	4455:36	4455:36	16	tdata_t
LEAF_NODE	4455:43	4455:43	15	)
FIELD	4455:45	4455:45	15	"/ImageI "
LEAF_NODE	4455:45	4455:45	16	"/ImageI "
LEAF_NODE	4455:55	4455:55	14	,
ARGUMENT	4455:57	4455:57	14	8
FIELD	4455:57	4455:57	15	8
LEAF_NODE	4455:57	4455:57	16	8
LEAF_NODE	4455:58	4455:58	14	)
LEAF_NODE	4455:59	4455:59	10	;
LEAF_NODE	4456:2	4456:2	8	}
LEAF_NODE	4457:1	4457:1	5	}
EXPR_STATEMENT	4458:1	4458:60	3	written += t2pWriteFile ( output , ( tdata_t ) "]\n>>\n>>\n" , 8 ) ;
EXPR	4458:1	4458:1	4	written += t2pWriteFile ( output , ( tdata_t ) "]\n>>\n>>\n" , 8 )
ASSIGN	4458:1	4458:12	5	written += t2pWriteFile ( output , ( tdata_t ) "]\n>>\n>>\n" , 8 )
LVAL	4458:1	4458:1	6	written
FIELD	4458:1	4458:1	7	written
LEAF_NODE	4458:1	4458:1	8	written
ASSIGN_OP	4458:9	4458:9	6	+=
LEAF_NODE	4458:9	4458:9	7	+=
RVAL	4458:12	4458:12	6	t2pWriteFile ( output , ( tdata_t ) "]\n>>\n>>\n" , 8 )
FUNCTION_CALL	4458:12	4458:59	7	t2pWriteFile ( output , ( tdata_t ) "]\n>>\n>>\n" , 8 )
CALLEE	4458:12	4458:12	8	t2pWriteFile
LEAF_NODE	4458:12	4458:12	9	t2pWriteFile
LEAF_NODE	4458:24	4458:24	8	(
ARGUMENT	4458:25	4458:25	8	output
FIELD	4458:25	4458:25	9	output
LEAF_NODE	4458:25	4458:25	10	output
LEAF_NODE	4458:31	4458:31	8	,
ARGUMENT	4458:33	4458:43	8	( tdata_t ) "]\n>>\n>>\n"
LEAF_NODE	4458:33	4458:33	9	(
TYPE_NAME	4458:34	4458:34	9	tdata_t
LEAF_NODE	4458:34	4458:34	10	tdata_t
LEAF_NODE	4458:41	4458:41	9	)
FIELD	4458:43	4458:43	9	"]\n>>\n>>\n"
LEAF_NODE	4458:43	4458:43	10	"]\n>>\n>>\n"
LEAF_NODE	4458:56	4458:56	8	,
ARGUMENT	4458:58	4458:58	8	8
FIELD	4458:58	4458:58	9	8
LEAF_NODE	4458:58	4458:58	10	8
LEAF_NODE	4458:59	4458:59	8	)
LEAF_NODE	4458:60	4458:60	4	;
LEAF_NODE	4460:1	4460:1	3	return
LEAF_NODE	4460:7	4460:7	3	(
LEAF_NODE	4460:8	4460:8	3	written
LEAF_NODE	4460:15	4460:15	3	)
LEAF_NODE	4460:16	4460:16	3	;
LEAF_NODE	4461:0	4461:0	2	}
FUNCTION_DEF	4467:0	4673:0	1	
RETURN_TYPE	4467:0	4467:0	2	void
TYPE_NAME	4467:0	4467:0	3	void
LEAF_NODE	4467:0	4467:0	4	void
FUNCTION_NAME	4467:5	4467:5	2	t2p_compose_pdf_page
LEAF_NODE	4467:5	4467:5	3	t2p_compose_pdf_page
PARAMETER_LIST	4467:25	4467:34	2	( T2P * t2p )
LEAF_NODE	4467:25	4467:25	3	(
PARAMETER_DECL	4467:26	4467:31	3	T2P * t2p
TYPE	4467:26	4467:29	4	T2P *
TYPE_NAME	4467:26	4467:26	5	T2P
LEAF_NODE	4467:26	4467:26	6	T2P
POINTER	4467:29	4467:29	5	*
LEAF_NODE	4467:29	4467:29	6	*
NAME	4467:31	4467:31	4	t2p
LEAF_NODE	4467:31	4467:31	5	t2p
LEAF_NODE	4467:34	4467:34	3	)
LEAF_NODE	4467:35	4467:35	2	{
STATEMENTS	4469:1	4672:1	2	
SIMPLE_DECL	4469:1	4469:11	3	uint32 i ; i = 0 ;
VAR_DECL	4469:1	4469:8	4	uint32 i ; i = 0
TYPE	4469:1	4469:1	5	uint32
TYPE_NAME	4469:1	4469:1	6	uint32
LEAF_NODE	4469:1	4469:1	7	uint32
NAME	4469:8	4469:8	5	i
LEAF_NODE	4469:8	4469:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	4469:8	4469:8	5	i = 0
ASSIGN	4469:8	4469:10	6	i = 0
LVAL	4469:8	4469:8	7	i
NAME	4469:8	4469:8	8	i
LEAF_NODE	4469:8	4469:8	9	i
ASSIGN_OP	4469:9	4469:9	7	=
LEAF_NODE	4469:9	4469:9	8	=
RVAL	4469:10	4469:10	7	0
FIELD	4469:10	4469:10	8	0
LEAF_NODE	4469:10	4469:10	9	0
LEAF_NODE	4469:11	4469:11	4	;
SIMPLE_DECL	4470:1	4470:12	3	uint32 i2 ; i2 = 0 ;
VAR_DECL	4470:1	4470:8	4	uint32 i2 ; i2 = 0
TYPE	4470:1	4470:1	5	uint32
TYPE_NAME	4470:1	4470:1	6	uint32
LEAF_NODE	4470:1	4470:1	7	uint32
NAME	4470:8	4470:8	5	i2
LEAF_NODE	4470:8	4470:8	6	i2
LEAF_NODE	0:0	0:0	5	;
INIT	4470:8	4470:8	5	i2 = 0
ASSIGN	4470:8	4470:11	6	i2 = 0
LVAL	4470:8	4470:8	7	i2
NAME	4470:8	4470:8	8	i2
LEAF_NODE	4470:8	4470:8	9	i2
ASSIGN_OP	4470:10	4470:10	7	=
LEAF_NODE	4470:10	4470:10	8	=
RVAL	4470:11	4470:11	7	0
FIELD	4470:11	4470:11	8	0
LEAF_NODE	4470:11	4470:11	9	0
LEAF_NODE	4470:12	4470:12	4	;
SIMPLE_DECL	4471:1	4471:21	3	T2P_TILE * tiles ; tiles = NULL ;
VAR_DECL	4471:1	4471:11	4	T2P_TILE * tiles ; tiles = NULL
TYPE	4471:1	4471:9	5	T2P_TILE *
TYPE_NAME	4471:1	4471:1	6	T2P_TILE
LEAF_NODE	4471:1	4471:1	7	T2P_TILE
POINTER	4471:9	4471:9	6	*
LEAF_NODE	4471:9	4471:9	7	*
NAME	4471:11	4471:11	5	tiles
LEAF_NODE	4471:11	4471:11	6	tiles
LEAF_NODE	0:0	0:0	5	;
INIT	4471:11	4471:11	5	tiles = NULL
ASSIGN	4471:11	4471:17	6	tiles = NULL
LVAL	4471:11	4471:11	7	tiles
NAME	4471:11	4471:11	8	tiles
LEAF_NODE	4471:11	4471:11	9	tiles
ASSIGN_OP	4471:16	4471:16	7	=
LEAF_NODE	4471:16	4471:16	8	=
RVAL	4471:17	4471:17	7	NULL
FIELD	4471:17	4471:17	8	NULL
LEAF_NODE	4471:17	4471:17	9	NULL
LEAF_NODE	4471:21	4471:21	4	;
SIMPLE_DECL	4472:1	4472:19	3	T2P_BOX * boxp ; boxp = NULL ;
VAR_DECL	4472:1	4472:10	4	T2P_BOX * boxp ; boxp = NULL
TYPE	4472:1	4472:8	5	T2P_BOX *
TYPE_NAME	4472:1	4472:1	6	T2P_BOX
LEAF_NODE	4472:1	4472:1	7	T2P_BOX
POINTER	4472:8	4472:8	6	*
LEAF_NODE	4472:8	4472:8	7	*
NAME	4472:10	4472:10	5	boxp
LEAF_NODE	4472:10	4472:10	6	boxp
LEAF_NODE	0:0	0:0	5	;
INIT	4472:10	4472:10	5	boxp = NULL
ASSIGN	4472:10	4472:15	6	boxp = NULL
LVAL	4472:10	4472:10	7	boxp
NAME	4472:10	4472:10	8	boxp
LEAF_NODE	4472:10	4472:10	9	boxp
ASSIGN_OP	4472:14	4472:14	7	=
LEAF_NODE	4472:14	4472:14	8	=
RVAL	4472:15	4472:15	7	NULL
FIELD	4472:15	4472:15	8	NULL
LEAF_NODE	4472:15	4472:15	9	NULL
LEAF_NODE	4472:19	4472:19	4	;
SIMPLE_DECL	4473:1	4473:20	3	uint32 tilecountx ; tilecountx = 0 ;
VAR_DECL	4473:1	4473:8	4	uint32 tilecountx ; tilecountx = 0
TYPE	4473:1	4473:1	5	uint32
TYPE_NAME	4473:1	4473:1	6	uint32
LEAF_NODE	4473:1	4473:1	7	uint32
NAME	4473:8	4473:8	5	tilecountx
LEAF_NODE	4473:8	4473:8	6	tilecountx
LEAF_NODE	0:0	0:0	5	;
INIT	4473:8	4473:8	5	tilecountx = 0
ASSIGN	4473:8	4473:19	6	tilecountx = 0
LVAL	4473:8	4473:8	7	tilecountx
NAME	4473:8	4473:8	8	tilecountx
LEAF_NODE	4473:8	4473:8	9	tilecountx
ASSIGN_OP	4473:18	4473:18	7	=
LEAF_NODE	4473:18	4473:18	8	=
RVAL	4473:19	4473:19	7	0
FIELD	4473:19	4473:19	8	0
LEAF_NODE	4473:19	4473:19	9	0
LEAF_NODE	4473:20	4473:20	4	;
SIMPLE_DECL	4474:1	4474:20	3	uint32 tilecounty ; tilecounty = 0 ;
VAR_DECL	4474:1	4474:8	4	uint32 tilecounty ; tilecounty = 0
TYPE	4474:1	4474:1	5	uint32
TYPE_NAME	4474:1	4474:1	6	uint32
LEAF_NODE	4474:1	4474:1	7	uint32
NAME	4474:8	4474:8	5	tilecounty
LEAF_NODE	4474:8	4474:8	6	tilecounty
LEAF_NODE	0:0	0:0	5	;
INIT	4474:8	4474:8	5	tilecounty = 0
ASSIGN	4474:8	4474:19	6	tilecounty = 0
LVAL	4474:8	4474:8	7	tilecounty
NAME	4474:8	4474:8	8	tilecounty
LEAF_NODE	4474:8	4474:8	9	tilecounty
ASSIGN_OP	4474:18	4474:18	7	=
LEAF_NODE	4474:18	4474:18	8	=
RVAL	4474:19	4474:19	7	0
FIELD	4474:19	4474:19	8	0
LEAF_NODE	4474:19	4474:19	9	0
LEAF_NODE	4474:20	4474:20	4	;
SIMPLE_DECL	4475:1	4475:19	3	uint32 tilewidth ; tilewidth = 0 ;
VAR_DECL	4475:1	4475:8	4	uint32 tilewidth ; tilewidth = 0
TYPE	4475:1	4475:1	5	uint32
TYPE_NAME	4475:1	4475:1	6	uint32
LEAF_NODE	4475:1	4475:1	7	uint32
NAME	4475:8	4475:8	5	tilewidth
LEAF_NODE	4475:8	4475:8	6	tilewidth
LEAF_NODE	0:0	0:0	5	;
INIT	4475:8	4475:8	5	tilewidth = 0
ASSIGN	4475:8	4475:18	6	tilewidth = 0
LVAL	4475:8	4475:8	7	tilewidth
NAME	4475:8	4475:8	8	tilewidth
LEAF_NODE	4475:8	4475:8	9	tilewidth
ASSIGN_OP	4475:17	4475:17	7	=
LEAF_NODE	4475:17	4475:17	8	=
RVAL	4475:18	4475:18	7	0
FIELD	4475:18	4475:18	8	0
LEAF_NODE	4475:18	4475:18	9	0
LEAF_NODE	4475:19	4475:19	4	;
SIMPLE_DECL	4476:1	4476:20	3	uint32 tilelength ; tilelength = 0 ;
VAR_DECL	4476:1	4476:8	4	uint32 tilelength ; tilelength = 0
TYPE	4476:1	4476:1	5	uint32
TYPE_NAME	4476:1	4476:1	6	uint32
LEAF_NODE	4476:1	4476:1	7	uint32
NAME	4476:8	4476:8	5	tilelength
LEAF_NODE	4476:8	4476:8	6	tilelength
LEAF_NODE	0:0	0:0	5	;
INIT	4476:8	4476:8	5	tilelength = 0
ASSIGN	4476:8	4476:19	6	tilelength = 0
LVAL	4476:8	4476:8	7	tilelength
NAME	4476:8	4476:8	8	tilelength
LEAF_NODE	4476:8	4476:8	9	tilelength
ASSIGN_OP	4476:18	4476:18	7	=
LEAF_NODE	4476:18	4476:18	8	=
RVAL	4476:19	4476:19	7	0
FIELD	4476:19	4476:19	8	0
LEAF_NODE	4476:19	4476:19	9	0
LEAF_NODE	4476:20	4476:20	4	;
SIMPLE_DECL	4477:1	4477:14	3	int istiled ; istiled = 0 ;
VAR_DECL	4477:1	4477:5	4	int istiled ; istiled = 0
TYPE	4477:1	4477:1	5	int
TYPE_NAME	4477:1	4477:1	6	int
LEAF_NODE	4477:1	4477:1	7	int
NAME	4477:5	4477:5	5	istiled
LEAF_NODE	4477:5	4477:5	6	istiled
LEAF_NODE	0:0	0:0	5	;
INIT	4477:5	4477:5	5	istiled = 0
ASSIGN	4477:5	4477:13	6	istiled = 0
LVAL	4477:5	4477:5	7	istiled
NAME	4477:5	4477:5	8	istiled
LEAF_NODE	4477:5	4477:5	9	istiled
ASSIGN_OP	4477:12	4477:12	7	=
LEAF_NODE	4477:12	4477:12	8	=
RVAL	4477:13	4477:13	7	0
FIELD	4477:13	4477:13	8	0
LEAF_NODE	4477:13	4477:13	9	0
LEAF_NODE	4477:14	4477:14	4	;
SIMPLE_DECL	4478:1	4478:10	3	float f ; f = 0 ;
VAR_DECL	4478:1	4478:7	4	float f ; f = 0
TYPE	4478:1	4478:1	5	float
TYPE_NAME	4478:1	4478:1	6	float
LEAF_NODE	4478:1	4478:1	7	float
NAME	4478:7	4478:7	5	f
LEAF_NODE	4478:7	4478:7	6	f
LEAF_NODE	0:0	0:0	5	;
INIT	4478:7	4478:7	5	f = 0
ASSIGN	4478:7	4478:9	6	f = 0
LVAL	4478:7	4478:7	7	f
NAME	4478:7	4478:7	8	f
LEAF_NODE	4478:7	4478:7	9	f
ASSIGN_OP	4478:8	4478:8	7	=
LEAF_NODE	4478:8	4478:8	8	=
RVAL	4478:9	4478:9	7	0
FIELD	4478:9	4478:9	8	0
LEAF_NODE	4478:9	4478:9	9	0
LEAF_NODE	4478:10	4478:10	4	;
SIMPLE_DECL	4479:1	4479:20	3	float width_ratio ; width_ratio = 0 ;
VAR_DECL	4479:1	4479:7	4	float width_ratio ; width_ratio = 0
TYPE	4479:1	4479:1	5	float
TYPE_NAME	4479:1	4479:1	6	float
LEAF_NODE	4479:1	4479:1	7	float
NAME	4479:7	4479:7	5	width_ratio
LEAF_NODE	4479:7	4479:7	6	width_ratio
LEAF_NODE	0:0	0:0	5	;
INIT	4479:7	4479:7	5	width_ratio = 0
ASSIGN	4479:7	4479:19	6	width_ratio = 0
LVAL	4479:7	4479:7	7	width_ratio
NAME	4479:7	4479:7	8	width_ratio
LEAF_NODE	4479:7	4479:7	9	width_ratio
ASSIGN_OP	4479:18	4479:18	7	=
LEAF_NODE	4479:18	4479:18	8	=
RVAL	4479:19	4479:19	7	0
FIELD	4479:19	4479:19	8	0
LEAF_NODE	4479:19	4479:19	9	0
LEAF_NODE	4479:20	4479:20	4	;
SIMPLE_DECL	4480:1	4480:21	3	float length_ratio ; length_ratio = 0 ;
VAR_DECL	4480:1	4480:7	4	float length_ratio ; length_ratio = 0
TYPE	4480:1	4480:1	5	float
TYPE_NAME	4480:1	4480:1	6	float
LEAF_NODE	4480:1	4480:1	7	float
NAME	4480:7	4480:7	5	length_ratio
LEAF_NODE	4480:7	4480:7	6	length_ratio
LEAF_NODE	0:0	0:0	5	;
INIT	4480:7	4480:7	5	length_ratio = 0
ASSIGN	4480:7	4480:20	6	length_ratio = 0
LVAL	4480:7	4480:7	7	length_ratio
NAME	4480:7	4480:7	8	length_ratio
LEAF_NODE	4480:7	4480:7	9	length_ratio
ASSIGN_OP	4480:19	4480:19	7	=
LEAF_NODE	4480:19	4480:19	8	=
RVAL	4480:20	4480:20	7	0
FIELD	4480:20	4480:20	8	0
LEAF_NODE	4480:20	4480:20	9	0
LEAF_NODE	4480:21	4480:21	4	;
EXPR_STATEMENT	4482:1	4482:31	3	t2p -> pdf_xres = t2p -> tiff_xres ;
EXPR	4482:1	4482:1	4	t2p -> pdf_xres = t2p -> tiff_xres
ASSIGN	4482:1	4482:17	5	t2p -> pdf_xres = t2p -> tiff_xres
LVAL	4482:1	4482:1	6	t2p -> pdf_xres
FIELD	4482:1	4482:6	7	t2p -> pdf_xres
LEAF_NODE	4482:1	4482:1	8	t2p
LEAF_NODE	4482:4	4482:4	8	->
LEAF_NODE	4482:6	4482:6	8	pdf_xres
ASSIGN_OP	4482:15	4482:15	6	=
LEAF_NODE	4482:15	4482:15	7	=
RVAL	4482:17	4482:17	6	t2p -> tiff_xres
FIELD	4482:17	4482:22	7	t2p -> tiff_xres
LEAF_NODE	4482:17	4482:17	8	t2p
LEAF_NODE	4482:20	4482:20	8	->
LEAF_NODE	4482:22	4482:22	8	tiff_xres
LEAF_NODE	4482:31	4482:31	4	;
EXPR_STATEMENT	4483:1	4483:31	3	t2p -> pdf_yres = t2p -> tiff_yres ;
EXPR	4483:1	4483:1	4	t2p -> pdf_yres = t2p -> tiff_yres
ASSIGN	4483:1	4483:17	5	t2p -> pdf_yres = t2p -> tiff_yres
LVAL	4483:1	4483:1	6	t2p -> pdf_yres
FIELD	4483:1	4483:6	7	t2p -> pdf_yres
LEAF_NODE	4483:1	4483:1	8	t2p
LEAF_NODE	4483:4	4483:4	8	->
LEAF_NODE	4483:6	4483:6	8	pdf_yres
ASSIGN_OP	4483:15	4483:15	6	=
LEAF_NODE	4483:15	4483:15	7	=
RVAL	4483:17	4483:17	6	t2p -> tiff_yres
FIELD	4483:17	4483:22	7	t2p -> tiff_yres
LEAF_NODE	4483:17	4483:17	8	t2p
LEAF_NODE	4483:20	4483:20	8	->
LEAF_NODE	4483:22	4483:22	8	tiff_yres
LEAF_NODE	4483:31	4483:31	4	;
SELECTION	4484:1	4484:26	3	
KEYWORD	4484:1	4484:1	4	if
LEAF_NODE	4484:1	4484:1	5	if
LEAF_NODE	4484:3	4484:3	4	(
CONDITION	4484:4	4484:4	4	t2p -> pdf_overrideres
EXPR	4484:4	4484:4	5	t2p -> pdf_overrideres
FIELD	4484:4	4484:9	6	t2p -> pdf_overrideres
LEAF_NODE	4484:4	4484:4	7	t2p
LEAF_NODE	4484:7	4484:7	7	->
LEAF_NODE	4484:9	4484:9	7	pdf_overrideres
LEAF_NODE	4484:24	4484:24	4	)
STATEMENTS	4484:26	4487:1	4	
LEAF_NODE	4484:26	4484:26	5	{
STATEMENTS	4485:2	4486:2	5	
EXPR_STATEMENT	4485:2	4485:38	6	t2p -> pdf_xres = t2p -> pdf_defaultxres ;
EXPR	4485:2	4485:2	7	t2p -> pdf_xres = t2p -> pdf_defaultxres
ASSIGN	4485:2	4485:18	8	t2p -> pdf_xres = t2p -> pdf_defaultxres
LVAL	4485:2	4485:2	9	t2p -> pdf_xres
FIELD	4485:2	4485:7	10	t2p -> pdf_xres
LEAF_NODE	4485:2	4485:2	11	t2p
LEAF_NODE	4485:5	4485:5	11	->
LEAF_NODE	4485:7	4485:7	11	pdf_xres
ASSIGN_OP	4485:16	4485:16	9	=
LEAF_NODE	4485:16	4485:16	10	=
RVAL	4485:18	4485:18	9	t2p -> pdf_defaultxres
FIELD	4485:18	4485:23	10	t2p -> pdf_defaultxres
LEAF_NODE	4485:18	4485:18	11	t2p
LEAF_NODE	4485:21	4485:21	11	->
LEAF_NODE	4485:23	4485:23	11	pdf_defaultxres
LEAF_NODE	4485:38	4485:38	7	;
EXPR_STATEMENT	4486:2	4486:38	6	t2p -> pdf_yres = t2p -> pdf_defaultyres ;
EXPR	4486:2	4486:2	7	t2p -> pdf_yres = t2p -> pdf_defaultyres
ASSIGN	4486:2	4486:18	8	t2p -> pdf_yres = t2p -> pdf_defaultyres
LVAL	4486:2	4486:2	9	t2p -> pdf_yres
FIELD	4486:2	4486:7	10	t2p -> pdf_yres
LEAF_NODE	4486:2	4486:2	11	t2p
LEAF_NODE	4486:5	4486:5	11	->
LEAF_NODE	4486:7	4486:7	11	pdf_yres
ASSIGN_OP	4486:16	4486:16	9	=
LEAF_NODE	4486:16	4486:16	10	=
RVAL	4486:18	4486:18	9	t2p -> pdf_defaultyres
FIELD	4486:18	4486:23	10	t2p -> pdf_defaultyres
LEAF_NODE	4486:18	4486:18	11	t2p
LEAF_NODE	4486:21	4486:21	11	->
LEAF_NODE	4486:23	4486:23	11	pdf_defaultyres
LEAF_NODE	4486:38	4486:38	7	;
LEAF_NODE	4487:1	4487:1	5	}
SELECTION	4488:1	4489:2	3	
KEYWORD	4488:1	4488:1	4	if
LEAF_NODE	4488:1	4488:1	5	if
LEAF_NODE	4488:3	4488:3	4	(
CONDITION	4488:4	4488:4	4	t2p -> pdf_xres == 0.0
EXPR	4488:4	4488:21	5	t2p -> pdf_xres == 0.0
FIELD	4488:4	4488:9	6	t2p -> pdf_xres
LEAF_NODE	4488:4	4488:4	7	t2p
LEAF_NODE	4488:7	4488:7	7	->
LEAF_NODE	4488:9	4488:9	7	pdf_xres
EQ_OPERATOR	4488:18	4488:18	6	==
LEAF_NODE	4488:18	4488:18	7	==
FIELD	4488:21	4488:21	6	0.0
LEAF_NODE	4488:21	4488:21	7	0.0
LEAF_NODE	4488:24	4488:24	4	)
STATEMENTS	4489:2	4489:2	4	
EXPR_STATEMENT	4489:2	4489:38	5	t2p -> pdf_xres = t2p -> pdf_defaultxres ;
EXPR	4489:2	4489:2	6	t2p -> pdf_xres = t2p -> pdf_defaultxres
ASSIGN	4489:2	4489:18	7	t2p -> pdf_xres = t2p -> pdf_defaultxres
LVAL	4489:2	4489:2	8	t2p -> pdf_xres
FIELD	4489:2	4489:7	9	t2p -> pdf_xres
LEAF_NODE	4489:2	4489:2	10	t2p
LEAF_NODE	4489:5	4489:5	10	->
LEAF_NODE	4489:7	4489:7	10	pdf_xres
ASSIGN_OP	4489:16	4489:16	8	=
LEAF_NODE	4489:16	4489:16	9	=
RVAL	4489:18	4489:18	8	t2p -> pdf_defaultxres
FIELD	4489:18	4489:23	9	t2p -> pdf_defaultxres
LEAF_NODE	4489:18	4489:18	10	t2p
LEAF_NODE	4489:21	4489:21	10	->
LEAF_NODE	4489:23	4489:23	10	pdf_defaultxres
LEAF_NODE	4489:38	4489:38	6	;
SELECTION	4490:1	4491:2	3	
KEYWORD	4490:1	4490:1	4	if
LEAF_NODE	4490:1	4490:1	5	if
LEAF_NODE	4490:3	4490:3	4	(
CONDITION	4490:4	4490:4	4	t2p -> pdf_yres == 0.0
EXPR	4490:4	4490:21	5	t2p -> pdf_yres == 0.0
FIELD	4490:4	4490:9	6	t2p -> pdf_yres
LEAF_NODE	4490:4	4490:4	7	t2p
LEAF_NODE	4490:7	4490:7	7	->
LEAF_NODE	4490:9	4490:9	7	pdf_yres
EQ_OPERATOR	4490:18	4490:18	6	==
LEAF_NODE	4490:18	4490:18	7	==
FIELD	4490:21	4490:21	6	0.0
LEAF_NODE	4490:21	4490:21	7	0.0
LEAF_NODE	4490:24	4490:24	4	)
STATEMENTS	4491:2	4491:2	4	
EXPR_STATEMENT	4491:2	4491:38	5	t2p -> pdf_yres = t2p -> pdf_defaultyres ;
EXPR	4491:2	4491:2	6	t2p -> pdf_yres = t2p -> pdf_defaultyres
ASSIGN	4491:2	4491:18	7	t2p -> pdf_yres = t2p -> pdf_defaultyres
LVAL	4491:2	4491:2	8	t2p -> pdf_yres
FIELD	4491:2	4491:7	9	t2p -> pdf_yres
LEAF_NODE	4491:2	4491:2	10	t2p
LEAF_NODE	4491:5	4491:5	10	->
LEAF_NODE	4491:7	4491:7	10	pdf_yres
ASSIGN_OP	4491:16	4491:16	8	=
LEAF_NODE	4491:16	4491:16	9	=
RVAL	4491:18	4491:18	8	t2p -> pdf_defaultyres
FIELD	4491:18	4491:23	9	t2p -> pdf_defaultyres
LEAF_NODE	4491:18	4491:18	10	t2p
LEAF_NODE	4491:21	4491:21	10	->
LEAF_NODE	4491:23	4491:23	10	pdf_defaultyres
LEAF_NODE	4491:38	4491:38	6	;
SELECTION	4492:1	4492:30	3	
KEYWORD	4492:1	4492:1	4	if
LEAF_NODE	4492:1	4492:1	5	if
LEAF_NODE	4492:4	4492:4	4	(
CONDITION	4492:5	4492:5	4	t2p -> pdf_image_fillpage
EXPR	4492:5	4492:5	5	t2p -> pdf_image_fillpage
FIELD	4492:5	4492:10	6	t2p -> pdf_image_fillpage
LEAF_NODE	4492:5	4492:5	7	t2p
LEAF_NODE	4492:8	4492:8	7	->
LEAF_NODE	4492:10	4492:10	7	pdf_image_fillpage
LEAF_NODE	4492:28	4492:28	4	)
STATEMENTS	4492:30	4502:1	4	
LEAF_NODE	4492:30	4492:30	5	{
STATEMENTS	4493:2	4498:4	5	
EXPR_STATEMENT	4493:2	4493:57	6	width_ratio = t2p -> pdf_defaultpagewidth / t2p -> tiff_width ;
EXPR	4493:2	4493:2	7	width_ratio = t2p -> pdf_defaultpagewidth / t2p -> tiff_width
ASSIGN	4493:2	4493:16	8	width_ratio = t2p -> pdf_defaultpagewidth / t2p -> tiff_width
LVAL	4493:2	4493:2	9	width_ratio
FIELD	4493:2	4493:2	10	width_ratio
LEAF_NODE	4493:2	4493:2	11	width_ratio
ASSIGN_OP	4493:14	4493:14	9	=
LEAF_NODE	4493:14	4493:14	10	=
RVAL	4493:16	4493:42	9	t2p -> pdf_defaultpagewidth / t2p -> tiff_width
FIELD	4493:16	4493:21	10	t2p -> pdf_defaultpagewidth
LEAF_NODE	4493:16	4493:16	11	t2p
LEAF_NODE	4493:19	4493:19	11	->
LEAF_NODE	4493:21	4493:21	11	pdf_defaultpagewidth
LEAF_NODE	4493:41	4493:41	10	/
FIELD	4493:42	4493:47	10	t2p -> tiff_width
LEAF_NODE	4493:42	4493:42	11	t2p
LEAF_NODE	4493:45	4493:45	11	->
LEAF_NODE	4493:47	4493:47	11	tiff_width
LEAF_NODE	4493:57	4493:57	7	;
EXPR_STATEMENT	4494:2	4494:60	6	length_ratio = t2p -> pdf_defaultpagelength / t2p -> tiff_length ;
EXPR	4494:2	4494:2	7	length_ratio = t2p -> pdf_defaultpagelength / t2p -> tiff_length
ASSIGN	4494:2	4494:17	8	length_ratio = t2p -> pdf_defaultpagelength / t2p -> tiff_length
LVAL	4494:2	4494:2	9	length_ratio
FIELD	4494:2	4494:2	10	length_ratio
LEAF_NODE	4494:2	4494:2	11	length_ratio
ASSIGN_OP	4494:15	4494:15	9	=
LEAF_NODE	4494:15	4494:15	10	=
RVAL	4494:17	4494:44	9	t2p -> pdf_defaultpagelength / t2p -> tiff_length
FIELD	4494:17	4494:22	10	t2p -> pdf_defaultpagelength
LEAF_NODE	4494:17	4494:17	11	t2p
LEAF_NODE	4494:20	4494:20	11	->
LEAF_NODE	4494:22	4494:22	11	pdf_defaultpagelength
LEAF_NODE	4494:43	4494:43	10	/
FIELD	4494:44	4494:49	10	t2p -> tiff_length
LEAF_NODE	4494:44	4494:44	11	t2p
LEAF_NODE	4494:47	4494:47	11	->
LEAF_NODE	4494:49	4494:49	11	tiff_length
LEAF_NODE	4494:60	4494:60	7	;
SELECTION	4495:2	4495:35	6	
KEYWORD	4495:2	4495:2	7	if
LEAF_NODE	4495:2	4495:2	8	if
LEAF_NODE	4495:5	4495:5	7	(
CONDITION	4495:6	4495:6	7	width_ratio < length_ratio
EXPR	4495:6	4495:20	8	width_ratio < length_ratio
FIELD	4495:6	4495:6	9	width_ratio
LEAF_NODE	4495:6	4495:6	10	width_ratio
REL_OPERATOR	4495:18	4495:18	9	<
LEAF_NODE	4495:18	4495:18	10	<
FIELD	4495:20	4495:20	9	length_ratio
LEAF_NODE	4495:20	4495:20	10	length_ratio
LEAF_NODE	4495:33	4495:33	7	)
STATEMENTS	4495:35	4498:2	7	
LEAF_NODE	4495:35	4495:35	8	{
STATEMENTS	4496:3	4497:3	8	
EXPR_STATEMENT	4496:3	4496:50	9	t2p -> pdf_imagewidth = t2p -> pdf_defaultpagewidth ;
EXPR	4496:3	4496:3	10	t2p -> pdf_imagewidth = t2p -> pdf_defaultpagewidth
ASSIGN	4496:3	4496:25	11	t2p -> pdf_imagewidth = t2p -> pdf_defaultpagewidth
LVAL	4496:3	4496:3	12	t2p -> pdf_imagewidth
FIELD	4496:3	4496:8	13	t2p -> pdf_imagewidth
LEAF_NODE	4496:3	4496:3	14	t2p
LEAF_NODE	4496:6	4496:6	14	->
LEAF_NODE	4496:8	4496:8	14	pdf_imagewidth
ASSIGN_OP	4496:23	4496:23	12	=
LEAF_NODE	4496:23	4496:23	13	=
RVAL	4496:25	4496:25	12	t2p -> pdf_defaultpagewidth
FIELD	4496:25	4496:30	13	t2p -> pdf_defaultpagewidth
LEAF_NODE	4496:25	4496:25	14	t2p
LEAF_NODE	4496:28	4496:28	14	->
LEAF_NODE	4496:30	4496:30	14	pdf_defaultpagewidth
LEAF_NODE	4496:50	4496:50	10	;
EXPR_STATEMENT	4497:3	4497:56	9	t2p -> pdf_imagelength = t2p -> tiff_length * width_ratio ;
EXPR	4497:3	4497:3	10	t2p -> pdf_imagelength = t2p -> tiff_length * width_ratio
ASSIGN	4497:3	4497:26	11	t2p -> pdf_imagelength = t2p -> tiff_length * width_ratio
LVAL	4497:3	4497:3	12	t2p -> pdf_imagelength
FIELD	4497:3	4497:8	13	t2p -> pdf_imagelength
LEAF_NODE	4497:3	4497:3	14	t2p
LEAF_NODE	4497:6	4497:6	14	->
LEAF_NODE	4497:8	4497:8	14	pdf_imagelength
ASSIGN_OP	4497:24	4497:24	12	=
LEAF_NODE	4497:24	4497:24	13	=
RVAL	4497:26	4497:45	12	t2p -> tiff_length * width_ratio
FIELD	4497:26	4497:31	13	t2p -> tiff_length
LEAF_NODE	4497:26	4497:26	14	t2p
LEAF_NODE	4497:29	4497:29	14	->
LEAF_NODE	4497:31	4497:31	14	tiff_length
LEAF_NODE	4497:43	4497:43	13	*
FIELD	4497:45	4497:45	13	width_ratio
LEAF_NODE	4497:45	4497:45	14	width_ratio
LEAF_NODE	4497:56	4497:56	10	;
LEAF_NODE	4498:2	4498:2	8	}
SELECTION	4498:4	4498:9	6	
KEYWORD	4498:4	4498:4	7	else
LEAF_NODE	4498:4	4498:4	8	else
STATEMENTS	4498:9	4501:2	7	
LEAF_NODE	4498:9	4498:9	8	{
STATEMENTS	4499:3	4500:3	8	
EXPR_STATEMENT	4499:3	4499:55	9	t2p -> pdf_imagewidth = t2p -> tiff_width * length_ratio ;
EXPR	4499:3	4499:3	10	t2p -> pdf_imagewidth = t2p -> tiff_width * length_ratio
ASSIGN	4499:3	4499:25	11	t2p -> pdf_imagewidth = t2p -> tiff_width * length_ratio
LVAL	4499:3	4499:3	12	t2p -> pdf_imagewidth
FIELD	4499:3	4499:8	13	t2p -> pdf_imagewidth
LEAF_NODE	4499:3	4499:3	14	t2p
LEAF_NODE	4499:6	4499:6	14	->
LEAF_NODE	4499:8	4499:8	14	pdf_imagewidth
ASSIGN_OP	4499:23	4499:23	12	=
LEAF_NODE	4499:23	4499:23	13	=
RVAL	4499:25	4499:43	12	t2p -> tiff_width * length_ratio
FIELD	4499:25	4499:30	13	t2p -> tiff_width
LEAF_NODE	4499:25	4499:25	14	t2p
LEAF_NODE	4499:28	4499:28	14	->
LEAF_NODE	4499:30	4499:30	14	tiff_width
LEAF_NODE	4499:41	4499:41	13	*
FIELD	4499:43	4499:43	13	length_ratio
LEAF_NODE	4499:43	4499:43	14	length_ratio
LEAF_NODE	4499:55	4499:55	10	;
EXPR_STATEMENT	4500:3	4500:52	9	t2p -> pdf_imagelength = t2p -> pdf_defaultpagelength ;
EXPR	4500:3	4500:3	10	t2p -> pdf_imagelength = t2p -> pdf_defaultpagelength
ASSIGN	4500:3	4500:26	11	t2p -> pdf_imagelength = t2p -> pdf_defaultpagelength
LVAL	4500:3	4500:3	12	t2p -> pdf_imagelength
FIELD	4500:3	4500:8	13	t2p -> pdf_imagelength
LEAF_NODE	4500:3	4500:3	14	t2p
LEAF_NODE	4500:6	4500:6	14	->
LEAF_NODE	4500:8	4500:8	14	pdf_imagelength
ASSIGN_OP	4500:24	4500:24	12	=
LEAF_NODE	4500:24	4500:24	13	=
RVAL	4500:26	4500:26	12	t2p -> pdf_defaultpagelength
FIELD	4500:26	4500:31	13	t2p -> pdf_defaultpagelength
LEAF_NODE	4500:26	4500:26	14	t2p
LEAF_NODE	4500:29	4500:29	14	->
LEAF_NODE	4500:31	4500:31	14	pdf_defaultpagelength
LEAF_NODE	4500:52	4500:52	10	;
LEAF_NODE	4501:2	4501:2	8	}
LEAF_NODE	4502:1	4502:1	5	}
SELECTION	4502:3	4502:8	3	
KEYWORD	4502:3	4502:3	4	else
LEAF_NODE	4502:3	4502:3	5	else
STATEMENTS	4502:8	4502:8	4	
SELECTION	4502:8	4503:40	5	
KEYWORD	4502:8	4502:8	6	if
LEAF_NODE	4502:8	4502:8	7	if
LEAF_NODE	4502:11	4502:11	6	(
CONDITION	4502:12	4502:12	6	t2p -> tiff_resunit != RESUNIT_CENTIMETER && t2p -> tiff_resunit != RESUNIT_INCH
EXPR	4502:12	4502:12	7	t2p -> tiff_resunit != RESUNIT_CENTIMETER && t2p -> tiff_resunit != RESUNIT_INCH
AND	4502:12	4503:5	8	t2p -> tiff_resunit != RESUNIT_CENTIMETER && t2p -> tiff_resunit != RESUNIT_INCH
EXPR	4502:12	4502:33	9	t2p -> tiff_resunit != RESUNIT_CENTIMETER
FIELD	4502:12	4502:17	10	t2p -> tiff_resunit
LEAF_NODE	4502:12	4502:12	11	t2p
LEAF_NODE	4502:15	4502:15	11	->
LEAF_NODE	4502:17	4502:17	11	tiff_resunit
EQ_OPERATOR	4502:30	4502:30	10	!=
LEAF_NODE	4502:30	4502:30	11	!=
FIELD	4502:33	4502:33	10	RESUNIT_CENTIMETER
LEAF_NODE	4502:33	4502:33	11	RESUNIT_CENTIMETER
LEAF_NODE	4503:2	4503:2	9	&&
EXPR	4503:5	4503:26	9	t2p -> tiff_resunit != RESUNIT_INCH
FIELD	4503:5	4503:10	10	t2p -> tiff_resunit
LEAF_NODE	4503:5	4503:5	11	t2p
LEAF_NODE	4503:8	4503:8	11	->
LEAF_NODE	4503:10	4503:10	11	tiff_resunit
EQ_OPERATOR	4503:23	4503:23	10	!=
LEAF_NODE	4503:23	4503:23	11	!=
FIELD	4503:26	4503:26	10	RESUNIT_INCH
LEAF_NODE	4503:26	4503:26	11	RESUNIT_INCH
LEAF_NODE	4503:38	4503:38	6	)
STATEMENTS	4503:40	4506:1	6	
LEAF_NODE	4503:40	4503:40	7	{
STATEMENTS	4504:2	4505:2	7	
EXPR_STATEMENT	4504:2	4504:64	8	t2p -> pdf_imagewidth = ( ( float ) ( t2p -> tiff_width ) ) / t2p -> pdf_xres ;
EXPR	4504:2	4504:2	9	t2p -> pdf_imagewidth = ( ( float ) ( t2p -> tiff_width ) ) / t2p -> pdf_xres
ASSIGN	4504:2	4504:24	10	t2p -> pdf_imagewidth = ( ( float ) ( t2p -> tiff_width ) ) / t2p -> pdf_xres
LVAL	4504:2	4504:2	11	t2p -> pdf_imagewidth
FIELD	4504:2	4504:7	12	t2p -> pdf_imagewidth
LEAF_NODE	4504:2	4504:2	13	t2p
LEAF_NODE	4504:5	4504:5	13	->
LEAF_NODE	4504:7	4504:7	13	pdf_imagewidth
ASSIGN_OP	4504:22	4504:22	11	=
LEAF_NODE	4504:22	4504:22	12	=
RVAL	4504:24	4504:51	11	( ( float ) ( t2p -> tiff_width ) ) / t2p -> pdf_xres
LEAF_NODE	4504:24	4504:24	12	(
LEAF_NODE	4504:25	4504:25	12	(
TYPE_NAME	4504:26	4504:26	12	float
LEAF_NODE	4504:26	4504:26	13	float
LEAF_NODE	4504:31	4504:31	12	)
LEAF_NODE	4504:32	4504:32	12	(
FIELD	4504:33	4504:38	12	t2p -> tiff_width
LEAF_NODE	4504:33	4504:33	13	t2p
LEAF_NODE	4504:36	4504:36	13	->
LEAF_NODE	4504:38	4504:38	13	tiff_width
LEAF_NODE	4504:48	4504:48	12	)
LEAF_NODE	4504:49	4504:49	12	)
LEAF_NODE	4504:50	4504:50	12	/
FIELD	4504:51	4504:56	12	t2p -> pdf_xres
LEAF_NODE	4504:51	4504:51	13	t2p
LEAF_NODE	4504:54	4504:54	13	->
LEAF_NODE	4504:56	4504:56	13	pdf_xres
LEAF_NODE	4504:64	4504:64	9	;
EXPR_STATEMENT	4505:2	4505:66	8	t2p -> pdf_imagelength = ( ( float ) ( t2p -> tiff_length ) ) / t2p -> pdf_yres ;
EXPR	4505:2	4505:2	9	t2p -> pdf_imagelength = ( ( float ) ( t2p -> tiff_length ) ) / t2p -> pdf_yres
ASSIGN	4505:2	4505:25	10	t2p -> pdf_imagelength = ( ( float ) ( t2p -> tiff_length ) ) / t2p -> pdf_yres
LVAL	4505:2	4505:2	11	t2p -> pdf_imagelength
FIELD	4505:2	4505:7	12	t2p -> pdf_imagelength
LEAF_NODE	4505:2	4505:2	13	t2p
LEAF_NODE	4505:5	4505:5	13	->
LEAF_NODE	4505:7	4505:7	13	pdf_imagelength
ASSIGN_OP	4505:23	4505:23	11	=
LEAF_NODE	4505:23	4505:23	12	=
RVAL	4505:25	4505:53	11	( ( float ) ( t2p -> tiff_length ) ) / t2p -> pdf_yres
LEAF_NODE	4505:25	4505:25	12	(
LEAF_NODE	4505:26	4505:26	12	(
TYPE_NAME	4505:27	4505:27	12	float
LEAF_NODE	4505:27	4505:27	13	float
LEAF_NODE	4505:32	4505:32	12	)
LEAF_NODE	4505:33	4505:33	12	(
FIELD	4505:34	4505:39	12	t2p -> tiff_length
LEAF_NODE	4505:34	4505:34	13	t2p
LEAF_NODE	4505:37	4505:37	13	->
LEAF_NODE	4505:39	4505:39	13	tiff_length
LEAF_NODE	4505:50	4505:50	12	)
LEAF_NODE	4505:51	4505:51	12	)
LEAF_NODE	4505:52	4505:52	12	/
FIELD	4505:53	4505:58	12	t2p -> pdf_yres
LEAF_NODE	4505:53	4505:53	13	t2p
LEAF_NODE	4505:56	4505:56	13	->
LEAF_NODE	4505:58	4505:58	13	pdf_yres
LEAF_NODE	4505:66	4505:66	9	;
LEAF_NODE	4506:1	4506:1	7	}
SELECTION	4506:3	4506:8	3	
KEYWORD	4506:3	4506:3	4	else
LEAF_NODE	4506:3	4506:3	5	else
STATEMENTS	4506:8	4511:1	4	
LEAF_NODE	4506:8	4506:8	5	{
STATEMENTS	4507:2	4510:30	5	
LEAF_NODE	4507:2	4507:2	6	t2p
LEAF_NODE	4507:5	4507:5	6	->
LEAF_NODE	4507:7	4507:7	6	pdf_imagewidth
LEAF_NODE	4507:22	4507:22	6	=
LEAF_NODE	4508:3	4508:3	6	(
LEAF_NODE	4508:4	4508:4	6	(
LEAF_NODE	4508:5	4508:5	6	float
LEAF_NODE	4508:10	4508:10	6	)
LEAF_NODE	4508:11	4508:11	6	(
LEAF_NODE	4508:12	4508:12	6	t2p
LEAF_NODE	4508:15	4508:15	6	->
LEAF_NODE	4508:17	4508:17	6	tiff_width
LEAF_NODE	4508:27	4508:27	6	)
LEAF_NODE	4508:28	4508:28	6	)
EXPR_STATEMENT	4508:29	4508:56	6	* PS_UNIT_SIZE / t2p -> pdf_xres ;
EXPR	4508:29	4508:43	7	* PS_UNIT_SIZE / t2p -> pdf_xres
UNARY_EXPR	4508:29	4508:30	8	* PS_UNIT_SIZE
UNARY_OPERATOR	4508:29	4508:29	9	*
LEAF_NODE	4508:29	4508:29	10	*
FIELD	4508:30	4508:30	9	PS_UNIT_SIZE
LEAF_NODE	4508:30	4508:30	10	PS_UNIT_SIZE
LEAF_NODE	4508:42	4508:42	8	/
FIELD	4508:43	4508:48	8	t2p -> pdf_xres
LEAF_NODE	4508:43	4508:43	9	t2p
LEAF_NODE	4508:46	4508:46	9	->
LEAF_NODE	4508:48	4508:48	9	pdf_xres
LEAF_NODE	4508:56	4508:56	7	;
LEAF_NODE	4509:2	4509:2	6	t2p
LEAF_NODE	4509:5	4509:5	6	->
LEAF_NODE	4509:7	4509:7	6	pdf_imagelength
LEAF_NODE	4509:23	4509:23	6	=
LEAF_NODE	4510:3	4510:3	6	(
LEAF_NODE	4510:4	4510:4	6	(
LEAF_NODE	4510:5	4510:5	6	float
LEAF_NODE	4510:10	4510:10	6	)
LEAF_NODE	4510:11	4510:11	6	(
LEAF_NODE	4510:12	4510:12	6	t2p
LEAF_NODE	4510:15	4510:15	6	->
LEAF_NODE	4510:17	4510:17	6	tiff_length
LEAF_NODE	4510:28	4510:28	6	)
LEAF_NODE	4510:29	4510:29	6	)
EXPR_STATEMENT	4510:30	4510:57	6	* PS_UNIT_SIZE / t2p -> pdf_yres ;
EXPR	4510:30	4510:44	7	* PS_UNIT_SIZE / t2p -> pdf_yres
UNARY_EXPR	4510:30	4510:31	8	* PS_UNIT_SIZE
UNARY_OPERATOR	4510:30	4510:30	9	*
LEAF_NODE	4510:30	4510:30	10	*
FIELD	4510:31	4510:31	9	PS_UNIT_SIZE
LEAF_NODE	4510:31	4510:31	10	PS_UNIT_SIZE
LEAF_NODE	4510:43	4510:43	8	/
FIELD	4510:44	4510:49	8	t2p -> pdf_yres
LEAF_NODE	4510:44	4510:44	9	t2p
LEAF_NODE	4510:47	4510:47	9	->
LEAF_NODE	4510:49	4510:49	9	pdf_yres
LEAF_NODE	4510:57	4510:57	7	;
LEAF_NODE	4511:1	4511:1	5	}
SELECTION	4512:1	4512:36	3	
KEYWORD	4512:1	4512:1	4	if
LEAF_NODE	4512:1	4512:1	5	if
LEAF_NODE	4512:3	4512:3	4	(
CONDITION	4512:4	4512:4	4	t2p -> pdf_overridepagesize != 0
EXPR	4512:4	4512:33	5	t2p -> pdf_overridepagesize != 0
FIELD	4512:4	4512:9	6	t2p -> pdf_overridepagesize
LEAF_NODE	4512:4	4512:4	7	t2p
LEAF_NODE	4512:7	4512:7	7	->
LEAF_NODE	4512:9	4512:9	7	pdf_overridepagesize
EQ_OPERATOR	4512:30	4512:30	6	!=
LEAF_NODE	4512:30	4512:30	7	!=
FIELD	4512:33	4512:33	6	0
LEAF_NODE	4512:33	4512:33	7	0
LEAF_NODE	4512:34	4512:34	4	)
STATEMENTS	4512:36	4515:1	4	
LEAF_NODE	4512:36	4512:36	5	{
STATEMENTS	4513:2	4514:2	5	
EXPR_STATEMENT	4513:2	4513:48	6	t2p -> pdf_pagewidth = t2p -> pdf_defaultpagewidth ;
EXPR	4513:2	4513:2	7	t2p -> pdf_pagewidth = t2p -> pdf_defaultpagewidth
ASSIGN	4513:2	4513:23	8	t2p -> pdf_pagewidth = t2p -> pdf_defaultpagewidth
LVAL	4513:2	4513:2	9	t2p -> pdf_pagewidth
FIELD	4513:2	4513:7	10	t2p -> pdf_pagewidth
LEAF_NODE	4513:2	4513:2	11	t2p
LEAF_NODE	4513:5	4513:5	11	->
LEAF_NODE	4513:7	4513:7	11	pdf_pagewidth
ASSIGN_OP	4513:21	4513:21	9	=
LEAF_NODE	4513:21	4513:21	10	=
RVAL	4513:23	4513:23	9	t2p -> pdf_defaultpagewidth
FIELD	4513:23	4513:28	10	t2p -> pdf_defaultpagewidth
LEAF_NODE	4513:23	4513:23	11	t2p
LEAF_NODE	4513:26	4513:26	11	->
LEAF_NODE	4513:28	4513:28	11	pdf_defaultpagewidth
LEAF_NODE	4513:48	4513:48	7	;
EXPR_STATEMENT	4514:2	4514:50	6	t2p -> pdf_pagelength = t2p -> pdf_defaultpagelength ;
EXPR	4514:2	4514:2	7	t2p -> pdf_pagelength = t2p -> pdf_defaultpagelength
ASSIGN	4514:2	4514:24	8	t2p -> pdf_pagelength = t2p -> pdf_defaultpagelength
LVAL	4514:2	4514:2	9	t2p -> pdf_pagelength
FIELD	4514:2	4514:7	10	t2p -> pdf_pagelength
LEAF_NODE	4514:2	4514:2	11	t2p
LEAF_NODE	4514:5	4514:5	11	->
LEAF_NODE	4514:7	4514:7	11	pdf_pagelength
ASSIGN_OP	4514:22	4514:22	9	=
LEAF_NODE	4514:22	4514:22	10	=
RVAL	4514:24	4514:24	9	t2p -> pdf_defaultpagelength
FIELD	4514:24	4514:29	10	t2p -> pdf_defaultpagelength
LEAF_NODE	4514:24	4514:24	11	t2p
LEAF_NODE	4514:27	4514:27	11	->
LEAF_NODE	4514:29	4514:29	11	pdf_defaultpagelength
LEAF_NODE	4514:50	4514:50	7	;
LEAF_NODE	4515:1	4515:1	5	}
SELECTION	4515:3	4515:8	3	
KEYWORD	4515:3	4515:3	4	else
LEAF_NODE	4515:3	4515:3	5	else
STATEMENTS	4515:8	4518:1	4	
LEAF_NODE	4515:8	4515:8	5	{
STATEMENTS	4516:2	4517:2	5	
EXPR_STATEMENT	4516:2	4516:42	6	t2p -> pdf_pagewidth = t2p -> pdf_imagewidth ;
EXPR	4516:2	4516:2	7	t2p -> pdf_pagewidth = t2p -> pdf_imagewidth
ASSIGN	4516:2	4516:23	8	t2p -> pdf_pagewidth = t2p -> pdf_imagewidth
LVAL	4516:2	4516:2	9	t2p -> pdf_pagewidth
FIELD	4516:2	4516:7	10	t2p -> pdf_pagewidth
LEAF_NODE	4516:2	4516:2	11	t2p
LEAF_NODE	4516:5	4516:5	11	->
LEAF_NODE	4516:7	4516:7	11	pdf_pagewidth
ASSIGN_OP	4516:21	4516:21	9	=
LEAF_NODE	4516:21	4516:21	10	=
RVAL	4516:23	4516:23	9	t2p -> pdf_imagewidth
FIELD	4516:23	4516:28	10	t2p -> pdf_imagewidth
LEAF_NODE	4516:23	4516:23	11	t2p
LEAF_NODE	4516:26	4516:26	11	->
LEAF_NODE	4516:28	4516:28	11	pdf_imagewidth
LEAF_NODE	4516:42	4516:42	7	;
EXPR_STATEMENT	4517:2	4517:44	6	t2p -> pdf_pagelength = t2p -> pdf_imagelength ;
EXPR	4517:2	4517:2	7	t2p -> pdf_pagelength = t2p -> pdf_imagelength
ASSIGN	4517:2	4517:24	8	t2p -> pdf_pagelength = t2p -> pdf_imagelength
LVAL	4517:2	4517:2	9	t2p -> pdf_pagelength
FIELD	4517:2	4517:7	10	t2p -> pdf_pagelength
LEAF_NODE	4517:2	4517:2	11	t2p
LEAF_NODE	4517:5	4517:5	11	->
LEAF_NODE	4517:7	4517:7	11	pdf_pagelength
ASSIGN_OP	4517:22	4517:22	9	=
LEAF_NODE	4517:22	4517:22	10	=
RVAL	4517:24	4517:24	9	t2p -> pdf_imagelength
FIELD	4517:24	4517:29	10	t2p -> pdf_imagelength
LEAF_NODE	4517:24	4517:24	11	t2p
LEAF_NODE	4517:27	4517:27	11	->
LEAF_NODE	4517:29	4517:29	11	pdf_imagelength
LEAF_NODE	4517:44	4517:44	7	;
LEAF_NODE	4518:1	4518:1	5	}
EXPR_STATEMENT	4519:1	4519:25	3	t2p -> pdf_mediabox . x1 = 0.0 ;
EXPR	4519:1	4519:1	4	t2p -> pdf_mediabox . x1 = 0.0
ASSIGN	4519:1	4519:22	5	t2p -> pdf_mediabox . x1 = 0.0
LVAL	4519:1	4519:1	6	t2p -> pdf_mediabox . x1
FIELD	4519:1	4519:19	7	t2p -> pdf_mediabox . x1
LEAF_NODE	4519:1	4519:1	8	t2p
LEAF_NODE	4519:4	4519:4	8	->
LEAF_NODE	4519:6	4519:6	8	pdf_mediabox
LEAF_NODE	4519:18	4519:18	8	.
LEAF_NODE	4519:19	4519:19	8	x1
ASSIGN_OP	4519:21	4519:21	6	=
LEAF_NODE	4519:21	4519:21	7	=
RVAL	4519:22	4519:22	6	0.0
FIELD	4519:22	4519:22	7	0.0
LEAF_NODE	4519:22	4519:22	8	0.0
LEAF_NODE	4519:25	4519:25	4	;
EXPR_STATEMENT	4520:1	4520:25	3	t2p -> pdf_mediabox . y1 = 0.0 ;
EXPR	4520:1	4520:1	4	t2p -> pdf_mediabox . y1 = 0.0
ASSIGN	4520:1	4520:22	5	t2p -> pdf_mediabox . y1 = 0.0
LVAL	4520:1	4520:1	6	t2p -> pdf_mediabox . y1
FIELD	4520:1	4520:19	7	t2p -> pdf_mediabox . y1
LEAF_NODE	4520:1	4520:1	8	t2p
LEAF_NODE	4520:4	4520:4	8	->
LEAF_NODE	4520:6	4520:6	8	pdf_mediabox
LEAF_NODE	4520:18	4520:18	8	.
LEAF_NODE	4520:19	4520:19	8	y1
ASSIGN_OP	4520:21	4520:21	6	=
LEAF_NODE	4520:21	4520:21	7	=
RVAL	4520:22	4520:22	6	0.0
FIELD	4520:22	4520:22	7	0.0
LEAF_NODE	4520:22	4520:22	8	0.0
LEAF_NODE	4520:25	4520:25	4	;
EXPR_STATEMENT	4521:1	4521:40	3	t2p -> pdf_mediabox . x2 = t2p -> pdf_pagewidth ;
EXPR	4521:1	4521:1	4	t2p -> pdf_mediabox . x2 = t2p -> pdf_pagewidth
ASSIGN	4521:1	4521:22	5	t2p -> pdf_mediabox . x2 = t2p -> pdf_pagewidth
LVAL	4521:1	4521:1	6	t2p -> pdf_mediabox . x2
FIELD	4521:1	4521:19	7	t2p -> pdf_mediabox . x2
LEAF_NODE	4521:1	4521:1	8	t2p
LEAF_NODE	4521:4	4521:4	8	->
LEAF_NODE	4521:6	4521:6	8	pdf_mediabox
LEAF_NODE	4521:18	4521:18	8	.
LEAF_NODE	4521:19	4521:19	8	x2
ASSIGN_OP	4521:21	4521:21	6	=
LEAF_NODE	4521:21	4521:21	7	=
RVAL	4521:22	4521:22	6	t2p -> pdf_pagewidth
FIELD	4521:22	4521:27	7	t2p -> pdf_pagewidth
LEAF_NODE	4521:22	4521:22	8	t2p
LEAF_NODE	4521:25	4521:25	8	->
LEAF_NODE	4521:27	4521:27	8	pdf_pagewidth
LEAF_NODE	4521:40	4521:40	4	;
EXPR_STATEMENT	4522:1	4522:41	3	t2p -> pdf_mediabox . y2 = t2p -> pdf_pagelength ;
EXPR	4522:1	4522:1	4	t2p -> pdf_mediabox . y2 = t2p -> pdf_pagelength
ASSIGN	4522:1	4522:22	5	t2p -> pdf_mediabox . y2 = t2p -> pdf_pagelength
LVAL	4522:1	4522:1	6	t2p -> pdf_mediabox . y2
FIELD	4522:1	4522:19	7	t2p -> pdf_mediabox . y2
LEAF_NODE	4522:1	4522:1	8	t2p
LEAF_NODE	4522:4	4522:4	8	->
LEAF_NODE	4522:6	4522:6	8	pdf_mediabox
LEAF_NODE	4522:18	4522:18	8	.
LEAF_NODE	4522:19	4522:19	8	y2
ASSIGN_OP	4522:21	4522:21	6	=
LEAF_NODE	4522:21	4522:21	7	=
RVAL	4522:22	4522:22	6	t2p -> pdf_pagelength
FIELD	4522:22	4522:27	7	t2p -> pdf_pagelength
LEAF_NODE	4522:22	4522:22	8	t2p
LEAF_NODE	4522:25	4522:25	8	->
LEAF_NODE	4522:27	4522:27	8	pdf_pagelength
LEAF_NODE	4522:41	4522:41	4	;
EXPR_STATEMENT	4523:1	4523:25	3	t2p -> pdf_imagebox . x1 = 0.0 ;
EXPR	4523:1	4523:1	4	t2p -> pdf_imagebox . x1 = 0.0
ASSIGN	4523:1	4523:22	5	t2p -> pdf_imagebox . x1 = 0.0
LVAL	4523:1	4523:1	6	t2p -> pdf_imagebox . x1
FIELD	4523:1	4523:19	7	t2p -> pdf_imagebox . x1
LEAF_NODE	4523:1	4523:1	8	t2p
LEAF_NODE	4523:4	4523:4	8	->
LEAF_NODE	4523:6	4523:6	8	pdf_imagebox
LEAF_NODE	4523:18	4523:18	8	.
LEAF_NODE	4523:19	4523:19	8	x1
ASSIGN_OP	4523:21	4523:21	6	=
LEAF_NODE	4523:21	4523:21	7	=
RVAL	4523:22	4523:22	6	0.0
FIELD	4523:22	4523:22	7	0.0
LEAF_NODE	4523:22	4523:22	8	0.0
LEAF_NODE	4523:25	4523:25	4	;
EXPR_STATEMENT	4524:1	4524:25	3	t2p -> pdf_imagebox . y1 = 0.0 ;
EXPR	4524:1	4524:1	4	t2p -> pdf_imagebox . y1 = 0.0
ASSIGN	4524:1	4524:22	5	t2p -> pdf_imagebox . y1 = 0.0
LVAL	4524:1	4524:1	6	t2p -> pdf_imagebox . y1
FIELD	4524:1	4524:19	7	t2p -> pdf_imagebox . y1
LEAF_NODE	4524:1	4524:1	8	t2p
LEAF_NODE	4524:4	4524:4	8	->
LEAF_NODE	4524:6	4524:6	8	pdf_imagebox
LEAF_NODE	4524:18	4524:18	8	.
LEAF_NODE	4524:19	4524:19	8	y1
ASSIGN_OP	4524:21	4524:21	6	=
LEAF_NODE	4524:21	4524:21	7	=
RVAL	4524:22	4524:22	6	0.0
FIELD	4524:22	4524:22	7	0.0
LEAF_NODE	4524:22	4524:22	8	0.0
LEAF_NODE	4524:25	4524:25	4	;
EXPR_STATEMENT	4525:1	4525:41	3	t2p -> pdf_imagebox . x2 = t2p -> pdf_imagewidth ;
EXPR	4525:1	4525:1	4	t2p -> pdf_imagebox . x2 = t2p -> pdf_imagewidth
ASSIGN	4525:1	4525:22	5	t2p -> pdf_imagebox . x2 = t2p -> pdf_imagewidth
LVAL	4525:1	4525:1	6	t2p -> pdf_imagebox . x2
FIELD	4525:1	4525:19	7	t2p -> pdf_imagebox . x2
LEAF_NODE	4525:1	4525:1	8	t2p
LEAF_NODE	4525:4	4525:4	8	->
LEAF_NODE	4525:6	4525:6	8	pdf_imagebox
LEAF_NODE	4525:18	4525:18	8	.
LEAF_NODE	4525:19	4525:19	8	x2
ASSIGN_OP	4525:21	4525:21	6	=
LEAF_NODE	4525:21	4525:21	7	=
RVAL	4525:22	4525:22	6	t2p -> pdf_imagewidth
FIELD	4525:22	4525:27	7	t2p -> pdf_imagewidth
LEAF_NODE	4525:22	4525:22	8	t2p
LEAF_NODE	4525:25	4525:25	8	->
LEAF_NODE	4525:27	4525:27	8	pdf_imagewidth
LEAF_NODE	4525:41	4525:41	4	;
EXPR_STATEMENT	4526:1	4526:42	3	t2p -> pdf_imagebox . y2 = t2p -> pdf_imagelength ;
EXPR	4526:1	4526:1	4	t2p -> pdf_imagebox . y2 = t2p -> pdf_imagelength
ASSIGN	4526:1	4526:22	5	t2p -> pdf_imagebox . y2 = t2p -> pdf_imagelength
LVAL	4526:1	4526:1	6	t2p -> pdf_imagebox . y2
FIELD	4526:1	4526:19	7	t2p -> pdf_imagebox . y2
LEAF_NODE	4526:1	4526:1	8	t2p
LEAF_NODE	4526:4	4526:4	8	->
LEAF_NODE	4526:6	4526:6	8	pdf_imagebox
LEAF_NODE	4526:18	4526:18	8	.
LEAF_NODE	4526:19	4526:19	8	y2
ASSIGN_OP	4526:21	4526:21	6	=
LEAF_NODE	4526:21	4526:21	7	=
RVAL	4526:22	4526:22	6	t2p -> pdf_imagelength
FIELD	4526:22	4526:27	7	t2p -> pdf_imagelength
LEAF_NODE	4526:22	4526:22	8	t2p
LEAF_NODE	4526:25	4526:25	8	->
LEAF_NODE	4526:27	4526:27	8	pdf_imagelength
LEAF_NODE	4526:42	4526:42	4	;
SELECTION	4527:1	4527:33	3	
KEYWORD	4527:1	4527:1	4	if
LEAF_NODE	4527:1	4527:1	5	if
LEAF_NODE	4527:3	4527:3	4	(
CONDITION	4527:4	4527:4	4	t2p -> pdf_overridepagesize != 0
EXPR	4527:4	4527:31	5	t2p -> pdf_overridepagesize != 0
FIELD	4527:4	4527:9	6	t2p -> pdf_overridepagesize
LEAF_NODE	4527:4	4527:4	7	t2p
LEAF_NODE	4527:7	4527:7	7	->
LEAF_NODE	4527:9	4527:9	7	pdf_overridepagesize
EQ_OPERATOR	4527:29	4527:29	6	!=
LEAF_NODE	4527:29	4527:29	7	!=
FIELD	4527:31	4527:31	6	0
LEAF_NODE	4527:31	4527:31	7	0
LEAF_NODE	4527:32	4527:32	4	)
STATEMENTS	4527:33	4532:1	4	
LEAF_NODE	4527:33	4527:33	5	{
STATEMENTS	4528:2	4531:2	5	
EXPR_STATEMENT	4528:2	4528:71	6	t2p -> pdf_imagebox . x1 += ( ( t2p -> pdf_pagewidth - t2p -> pdf_imagewidth ) / 2.0F ) ;
EXPR	4528:2	4528:2	7	t2p -> pdf_imagebox . x1 += ( ( t2p -> pdf_pagewidth - t2p -> pdf_imagewidth ) / 2.0F )
ASSIGN	4528:2	4528:24	8	t2p -> pdf_imagebox . x1 += ( ( t2p -> pdf_pagewidth - t2p -> pdf_imagewidth ) / 2.0F )
LVAL	4528:2	4528:2	9	t2p -> pdf_imagebox . x1
FIELD	4528:2	4528:20	10	t2p -> pdf_imagebox . x1
LEAF_NODE	4528:2	4528:2	11	t2p
LEAF_NODE	4528:5	4528:5	11	->
LEAF_NODE	4528:7	4528:7	11	pdf_imagebox
LEAF_NODE	4528:19	4528:19	11	.
LEAF_NODE	4528:20	4528:20	11	x1
ASSIGN_OP	4528:22	4528:22	9	+=
LEAF_NODE	4528:22	4528:22	10	+=
RVAL	4528:24	4528:70	9	( ( t2p -> pdf_pagewidth - t2p -> pdf_imagewidth ) / 2.0F )
LEAF_NODE	4528:24	4528:24	10	(
LEAF_NODE	4528:25	4528:25	10	(
FIELD	4528:26	4528:31	10	t2p -> pdf_pagewidth
LEAF_NODE	4528:26	4528:26	11	t2p
LEAF_NODE	4528:29	4528:29	11	->
LEAF_NODE	4528:31	4528:31	11	pdf_pagewidth
LEAF_NODE	4528:44	4528:44	10	-
FIELD	4528:45	4528:50	10	t2p -> pdf_imagewidth
LEAF_NODE	4528:45	4528:45	11	t2p
LEAF_NODE	4528:48	4528:48	11	->
LEAF_NODE	4528:50	4528:50	11	pdf_imagewidth
LEAF_NODE	4528:64	4528:64	10	)
LEAF_NODE	4528:65	4528:65	10	/
FIELD	4528:66	4528:66	10	2.0F
LEAF_NODE	4528:66	4528:66	11	2.0F
LEAF_NODE	4528:70	4528:70	10	)
LEAF_NODE	4528:71	4528:71	7	;
EXPR_STATEMENT	4529:2	4529:73	6	t2p -> pdf_imagebox . y1 += ( ( t2p -> pdf_pagelength - t2p -> pdf_imagelength ) / 2.0F ) ;
EXPR	4529:2	4529:2	7	t2p -> pdf_imagebox . y1 += ( ( t2p -> pdf_pagelength - t2p -> pdf_imagelength ) / 2.0F )
ASSIGN	4529:2	4529:24	8	t2p -> pdf_imagebox . y1 += ( ( t2p -> pdf_pagelength - t2p -> pdf_imagelength ) / 2.0F )
LVAL	4529:2	4529:2	9	t2p -> pdf_imagebox . y1
FIELD	4529:2	4529:20	10	t2p -> pdf_imagebox . y1
LEAF_NODE	4529:2	4529:2	11	t2p
LEAF_NODE	4529:5	4529:5	11	->
LEAF_NODE	4529:7	4529:7	11	pdf_imagebox
LEAF_NODE	4529:19	4529:19	11	.
LEAF_NODE	4529:20	4529:20	11	y1
ASSIGN_OP	4529:22	4529:22	9	+=
LEAF_NODE	4529:22	4529:22	10	+=
RVAL	4529:24	4529:72	9	( ( t2p -> pdf_pagelength - t2p -> pdf_imagelength ) / 2.0F )
LEAF_NODE	4529:24	4529:24	10	(
LEAF_NODE	4529:25	4529:25	10	(
FIELD	4529:26	4529:31	10	t2p -> pdf_pagelength
LEAF_NODE	4529:26	4529:26	11	t2p
LEAF_NODE	4529:29	4529:29	11	->
LEAF_NODE	4529:31	4529:31	11	pdf_pagelength
LEAF_NODE	4529:45	4529:45	10	-
FIELD	4529:46	4529:51	10	t2p -> pdf_imagelength
LEAF_NODE	4529:46	4529:46	11	t2p
LEAF_NODE	4529:49	4529:49	11	->
LEAF_NODE	4529:51	4529:51	11	pdf_imagelength
LEAF_NODE	4529:66	4529:66	10	)
LEAF_NODE	4529:67	4529:67	10	/
FIELD	4529:68	4529:68	10	2.0F
LEAF_NODE	4529:68	4529:68	11	2.0F
LEAF_NODE	4529:72	4529:72	10	)
LEAF_NODE	4529:73	4529:73	7	;
EXPR_STATEMENT	4530:2	4530:71	6	t2p -> pdf_imagebox . x2 += ( ( t2p -> pdf_pagewidth - t2p -> pdf_imagewidth ) / 2.0F ) ;
EXPR	4530:2	4530:2	7	t2p -> pdf_imagebox . x2 += ( ( t2p -> pdf_pagewidth - t2p -> pdf_imagewidth ) / 2.0F )
ASSIGN	4530:2	4530:24	8	t2p -> pdf_imagebox . x2 += ( ( t2p -> pdf_pagewidth - t2p -> pdf_imagewidth ) / 2.0F )
LVAL	4530:2	4530:2	9	t2p -> pdf_imagebox . x2
FIELD	4530:2	4530:20	10	t2p -> pdf_imagebox . x2
LEAF_NODE	4530:2	4530:2	11	t2p
LEAF_NODE	4530:5	4530:5	11	->
LEAF_NODE	4530:7	4530:7	11	pdf_imagebox
LEAF_NODE	4530:19	4530:19	11	.
LEAF_NODE	4530:20	4530:20	11	x2
ASSIGN_OP	4530:22	4530:22	9	+=
LEAF_NODE	4530:22	4530:22	10	+=
RVAL	4530:24	4530:70	9	( ( t2p -> pdf_pagewidth - t2p -> pdf_imagewidth ) / 2.0F )
LEAF_NODE	4530:24	4530:24	10	(
LEAF_NODE	4530:25	4530:25	10	(
FIELD	4530:26	4530:31	10	t2p -> pdf_pagewidth
LEAF_NODE	4530:26	4530:26	11	t2p
LEAF_NODE	4530:29	4530:29	11	->
LEAF_NODE	4530:31	4530:31	11	pdf_pagewidth
LEAF_NODE	4530:44	4530:44	10	-
FIELD	4530:45	4530:50	10	t2p -> pdf_imagewidth
LEAF_NODE	4530:45	4530:45	11	t2p
LEAF_NODE	4530:48	4530:48	11	->
LEAF_NODE	4530:50	4530:50	11	pdf_imagewidth
LEAF_NODE	4530:64	4530:64	10	)
LEAF_NODE	4530:65	4530:65	10	/
FIELD	4530:66	4530:66	10	2.0F
LEAF_NODE	4530:66	4530:66	11	2.0F
LEAF_NODE	4530:70	4530:70	10	)
LEAF_NODE	4530:71	4530:71	7	;
EXPR_STATEMENT	4531:2	4531:73	6	t2p -> pdf_imagebox . y2 += ( ( t2p -> pdf_pagelength - t2p -> pdf_imagelength ) / 2.0F ) ;
EXPR	4531:2	4531:2	7	t2p -> pdf_imagebox . y2 += ( ( t2p -> pdf_pagelength - t2p -> pdf_imagelength ) / 2.0F )
ASSIGN	4531:2	4531:24	8	t2p -> pdf_imagebox . y2 += ( ( t2p -> pdf_pagelength - t2p -> pdf_imagelength ) / 2.0F )
LVAL	4531:2	4531:2	9	t2p -> pdf_imagebox . y2
FIELD	4531:2	4531:20	10	t2p -> pdf_imagebox . y2
LEAF_NODE	4531:2	4531:2	11	t2p
LEAF_NODE	4531:5	4531:5	11	->
LEAF_NODE	4531:7	4531:7	11	pdf_imagebox
LEAF_NODE	4531:19	4531:19	11	.
LEAF_NODE	4531:20	4531:20	11	y2
ASSIGN_OP	4531:22	4531:22	9	+=
LEAF_NODE	4531:22	4531:22	10	+=
RVAL	4531:24	4531:72	9	( ( t2p -> pdf_pagelength - t2p -> pdf_imagelength ) / 2.0F )
LEAF_NODE	4531:24	4531:24	10	(
LEAF_NODE	4531:25	4531:25	10	(
FIELD	4531:26	4531:31	10	t2p -> pdf_pagelength
LEAF_NODE	4531:26	4531:26	11	t2p
LEAF_NODE	4531:29	4531:29	11	->
LEAF_NODE	4531:31	4531:31	11	pdf_pagelength
LEAF_NODE	4531:45	4531:45	10	-
FIELD	4531:46	4531:51	10	t2p -> pdf_imagelength
LEAF_NODE	4531:46	4531:46	11	t2p
LEAF_NODE	4531:49	4531:49	11	->
LEAF_NODE	4531:51	4531:51	11	pdf_imagelength
LEAF_NODE	4531:66	4531:66	10	)
LEAF_NODE	4531:67	4531:67	10	/
FIELD	4531:68	4531:68	10	2.0F
LEAF_NODE	4531:68	4531:68	11	2.0F
LEAF_NODE	4531:72	4531:72	10	)
LEAF_NODE	4531:73	4531:73	7	;
LEAF_NODE	4532:1	4532:1	5	}
SELECTION	4533:1	4533:30	3	
KEYWORD	4533:1	4533:1	4	if
LEAF_NODE	4533:1	4533:1	5	if
LEAF_NODE	4533:3	4533:3	4	(
CONDITION	4533:4	4533:4	4	t2p -> tiff_orientation > 4
EXPR	4533:4	4533:28	5	t2p -> tiff_orientation > 4
FIELD	4533:4	4533:9	6	t2p -> tiff_orientation
LEAF_NODE	4533:4	4533:4	7	t2p
LEAF_NODE	4533:7	4533:7	7	->
LEAF_NODE	4533:9	4533:9	7	tiff_orientation
REL_OPERATOR	4533:26	4533:26	6	>
LEAF_NODE	4533:26	4533:26	7	>
FIELD	4533:28	4533:28	6	4
LEAF_NODE	4533:28	4533:28	7	4
LEAF_NODE	4533:29	4533:29	4	)
STATEMENTS	4533:30	4537:1	4	
LEAF_NODE	4533:30	4533:30	5	{
STATEMENTS	4534:2	4536:2	5	
EXPR_STATEMENT	4534:2	4534:24	6	f = t2p -> pdf_mediabox . x2 ;
EXPR	4534:2	4534:2	7	f = t2p -> pdf_mediabox . x2
ASSIGN	4534:2	4534:4	8	f = t2p -> pdf_mediabox . x2
LVAL	4534:2	4534:2	9	f
FIELD	4534:2	4534:2	10	f
LEAF_NODE	4534:2	4534:2	11	f
ASSIGN_OP	4534:3	4534:3	9	=
LEAF_NODE	4534:3	4534:3	10	=
RVAL	4534:4	4534:4	9	t2p -> pdf_mediabox . x2
FIELD	4534:4	4534:22	10	t2p -> pdf_mediabox . x2
LEAF_NODE	4534:4	4534:4	11	t2p
LEAF_NODE	4534:7	4534:7	11	->
LEAF_NODE	4534:9	4534:9	11	pdf_mediabox
LEAF_NODE	4534:21	4534:21	11	.
LEAF_NODE	4534:22	4534:22	11	x2
LEAF_NODE	4534:24	4534:24	7	;
EXPR_STATEMENT	4535:2	4535:43	6	t2p -> pdf_mediabox . x2 = t2p -> pdf_mediabox . y2 ;
EXPR	4535:2	4535:2	7	t2p -> pdf_mediabox . x2 = t2p -> pdf_mediabox . y2
ASSIGN	4535:2	4535:23	8	t2p -> pdf_mediabox . x2 = t2p -> pdf_mediabox . y2
LVAL	4535:2	4535:2	9	t2p -> pdf_mediabox . x2
FIELD	4535:2	4535:20	10	t2p -> pdf_mediabox . x2
LEAF_NODE	4535:2	4535:2	11	t2p
LEAF_NODE	4535:5	4535:5	11	->
LEAF_NODE	4535:7	4535:7	11	pdf_mediabox
LEAF_NODE	4535:19	4535:19	11	.
LEAF_NODE	4535:20	4535:20	11	x2
ASSIGN_OP	4535:22	4535:22	9	=
LEAF_NODE	4535:22	4535:22	10	=
RVAL	4535:23	4535:23	9	t2p -> pdf_mediabox . y2
FIELD	4535:23	4535:41	10	t2p -> pdf_mediabox . y2
LEAF_NODE	4535:23	4535:23	11	t2p
LEAF_NODE	4535:26	4535:26	11	->
LEAF_NODE	4535:28	4535:28	11	pdf_mediabox
LEAF_NODE	4535:40	4535:40	11	.
LEAF_NODE	4535:41	4535:41	11	y2
LEAF_NODE	4535:43	4535:43	7	;
EXPR_STATEMENT	4536:2	4536:24	6	t2p -> pdf_mediabox . y2 = f ;
EXPR	4536:2	4536:2	7	t2p -> pdf_mediabox . y2 = f
ASSIGN	4536:2	4536:23	8	t2p -> pdf_mediabox . y2 = f
LVAL	4536:2	4536:2	9	t2p -> pdf_mediabox . y2
FIELD	4536:2	4536:20	10	t2p -> pdf_mediabox . y2
LEAF_NODE	4536:2	4536:2	11	t2p
LEAF_NODE	4536:5	4536:5	11	->
LEAF_NODE	4536:7	4536:7	11	pdf_mediabox
LEAF_NODE	4536:19	4536:19	11	.
LEAF_NODE	4536:20	4536:20	11	y2
ASSIGN_OP	4536:22	4536:22	9	=
LEAF_NODE	4536:22	4536:22	10	=
RVAL	4536:23	4536:23	9	f
FIELD	4536:23	4536:23	10	f
LEAF_NODE	4536:23	4536:23	11	f
LEAF_NODE	4536:24	4536:24	7	;
LEAF_NODE	4537:1	4537:1	5	}
EXPR_STATEMENT	4538:1	4538:70	3	istiled = ( ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecount == 0 ) ? 0 : 1 ;
EXPR	4538:1	4538:1	4	istiled = ( ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecount == 0 ) ? 0 : 1
ASSIGN	4538:1	4538:9	5	istiled = ( ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecount == 0 ) ? 0 : 1
LVAL	4538:1	4538:1	6	istiled
FIELD	4538:1	4538:1	7	istiled
LEAF_NODE	4538:1	4538:1	8	istiled
ASSIGN_OP	4538:8	4538:8	6	=
LEAF_NODE	4538:8	4538:8	7	=
RVAL	4538:9	4538:9	6	( ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecount == 0 ) ? 0 : 1
COND_EXPR	4538:9	4538:69	7	( ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecount == 0 ) ? 0 : 1
CONDITION	4538:9	4538:61	8	( ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecount == 0 )
LEAF_NODE	4538:9	4538:9	9	(
LEAF_NODE	4538:10	4538:10	9	(
FIELD	4538:11	4538:40	9	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4538:11	4538:11	10	t2p
LEAF_NODE	4538:14	4538:14	10	->
LEAF_NODE	4538:16	4538:16	10	tiff_tiles
LEAF_NODE	4538:26	4538:26	10	[
EXPR	4538:27	4538:27	10	t2p -> pdf_page
FIELD	4538:27	4538:32	11	t2p -> pdf_page
LEAF_NODE	4538:27	4538:27	12	t2p
LEAF_NODE	4538:30	4538:30	12	->
LEAF_NODE	4538:32	4538:32	12	pdf_page
LEAF_NODE	4538:40	4538:40	10	]
LEAF_NODE	4538:41	4538:41	9	)
LEAF_NODE	4538:42	4538:42	9	.
LEAF_NODE	4538:43	4538:43	9	tiles_tilecount
EQ_OPERATOR	4538:58	4538:58	9	==
LEAF_NODE	4538:58	4538:58	10	==
FIELD	4538:60	4538:60	9	0
LEAF_NODE	4538:60	4538:60	10	0
LEAF_NODE	4538:61	4538:61	9	)
LEAF_NODE	4538:63	4538:63	8	?
EXPR	4538:65	4538:65	8	0
FIELD	4538:65	4538:65	9	0
LEAF_NODE	4538:65	4538:65	10	0
LEAF_NODE	4538:67	4538:67	8	:
FIELD	4538:69	4538:69	8	1
LEAF_NODE	4538:69	4538:69	9	1
LEAF_NODE	4538:70	4538:70	4	;
SELECTION	4539:1	4539:15	3	
KEYWORD	4539:1	4539:1	4	if
LEAF_NODE	4539:1	4539:1	5	if
LEAF_NODE	4539:3	4539:3	4	(
CONDITION	4539:4	4539:4	4	istiled == 0
EXPR	4539:4	4539:13	5	istiled == 0
FIELD	4539:4	4539:4	6	istiled
LEAF_NODE	4539:4	4539:4	7	istiled
EQ_OPERATOR	4539:11	4539:11	6	==
LEAF_NODE	4539:11	4539:11	7	==
FIELD	4539:13	4539:13	6	0
LEAF_NODE	4539:13	4539:13	7	0
LEAF_NODE	4539:14	4539:14	4	)
STATEMENTS	4539:15	4542:1	4	
LEAF_NODE	4539:15	4539:15	5	{
STATEMENTS	4540:2	4541:2	5	
EXPR_STATEMENT	4540:2	4540:74	6	t2p_compose_pdf_page_orient ( & ( t2p -> pdf_imagebox ) , t2p -> tiff_orientation ) ;
EXPR	4540:2	4540:2	7	t2p_compose_pdf_page_orient ( & ( t2p -> pdf_imagebox ) , t2p -> tiff_orientation )
FUNCTION_CALL	4540:2	4540:73	8	t2p_compose_pdf_page_orient ( & ( t2p -> pdf_imagebox ) , t2p -> tiff_orientation )
CALLEE	4540:2	4540:2	9	t2p_compose_pdf_page_orient
LEAF_NODE	4540:2	4540:2	10	t2p_compose_pdf_page_orient
LEAF_NODE	4540:29	4540:29	9	(
ARGUMENT	4540:30	4540:30	9	& ( t2p -> pdf_imagebox )
UNARY_EXPR	4540:30	4540:49	10	& ( t2p -> pdf_imagebox )
UNARY_OPERATOR	4540:30	4540:30	11	&
LEAF_NODE	4540:30	4540:30	12	&
LEAF_NODE	4540:31	4540:31	11	(
FIELD	4540:32	4540:37	11	t2p -> pdf_imagebox
LEAF_NODE	4540:32	4540:32	12	t2p
LEAF_NODE	4540:35	4540:35	12	->
LEAF_NODE	4540:37	4540:37	12	pdf_imagebox
LEAF_NODE	4540:49	4540:49	11	)
LEAF_NODE	4540:50	4540:50	9	,
ARGUMENT	4540:52	4540:52	9	t2p -> tiff_orientation
FIELD	4540:52	4540:57	10	t2p -> tiff_orientation
LEAF_NODE	4540:52	4540:52	11	t2p
LEAF_NODE	4540:55	4540:55	11	->
LEAF_NODE	4540:57	4540:57	11	tiff_orientation
LEAF_NODE	4540:73	4540:73	9	)
LEAF_NODE	4540:74	4540:74	7	;
JUMP_STATEMENT	4541:2	4541:8	6	return DESTINATION ;
KEYWORD	4541:2	4541:2	7	return
LEAF_NODE	4541:2	4541:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4541:8	4541:8	7	;
LEAF_NODE	4542:1	4542:1	5	}
SELECTION	4542:3	4542:8	3	
KEYWORD	4542:3	4542:3	4	else
LEAF_NODE	4542:3	4542:3	5	else
STATEMENTS	4542:8	4629:1	4	
LEAF_NODE	4542:8	4542:8	5	{
STATEMENTS	4543:2	4628:29	5	
EXPR_STATEMENT	4543:2	4543:60	6	tilewidth = ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilewidth ;
EXPR	4543:2	4543:2	7	tilewidth = ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilewidth
ASSIGN	4543:2	4543:12	8	tilewidth = ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilewidth
LVAL	4543:2	4543:2	9	tilewidth
FIELD	4543:2	4543:2	10	tilewidth
LEAF_NODE	4543:2	4543:2	11	tilewidth
ASSIGN_OP	4543:11	4543:11	9	=
LEAF_NODE	4543:11	4543:11	10	=
RVAL	4543:12	4543:45	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilewidth
LEAF_NODE	4543:12	4543:12	10	(
FIELD	4543:13	4543:42	10	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4543:13	4543:13	11	t2p
LEAF_NODE	4543:16	4543:16	11	->
LEAF_NODE	4543:18	4543:18	11	tiff_tiles
LEAF_NODE	4543:28	4543:28	11	[
EXPR	4543:29	4543:29	11	t2p -> pdf_page
FIELD	4543:29	4543:34	12	t2p -> pdf_page
LEAF_NODE	4543:29	4543:29	13	t2p
LEAF_NODE	4543:32	4543:32	13	->
LEAF_NODE	4543:34	4543:34	13	pdf_page
LEAF_NODE	4543:42	4543:42	11	]
LEAF_NODE	4543:43	4543:43	10	)
LEAF_NODE	4543:44	4543:44	10	.
LEAF_NODE	4543:45	4543:45	10	tiles_tilewidth
LEAF_NODE	4543:60	4543:60	7	;
EXPR_STATEMENT	4544:2	4544:62	6	tilelength = ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilelength ;
EXPR	4544:2	4544:2	7	tilelength = ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilelength
ASSIGN	4544:2	4544:13	8	tilelength = ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilelength
LVAL	4544:2	4544:2	9	tilelength
FIELD	4544:2	4544:2	10	tilelength
LEAF_NODE	4544:2	4544:2	11	tilelength
ASSIGN_OP	4544:12	4544:12	9	=
LEAF_NODE	4544:12	4544:12	10	=
RVAL	4544:13	4544:46	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilelength
LEAF_NODE	4544:13	4544:13	10	(
FIELD	4544:14	4544:43	10	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4544:14	4544:14	11	t2p
LEAF_NODE	4544:17	4544:17	11	->
LEAF_NODE	4544:19	4544:19	11	tiff_tiles
LEAF_NODE	4544:29	4544:29	11	[
EXPR	4544:30	4544:30	11	t2p -> pdf_page
FIELD	4544:30	4544:35	12	t2p -> pdf_page
LEAF_NODE	4544:30	4544:30	13	t2p
LEAF_NODE	4544:33	4544:33	13	->
LEAF_NODE	4544:35	4544:35	13	pdf_page
LEAF_NODE	4544:43	4544:43	11	]
LEAF_NODE	4544:44	4544:44	10	)
LEAF_NODE	4544:45	4544:45	10	.
LEAF_NODE	4544:46	4544:46	10	tiles_tilelength
LEAF_NODE	4544:62	4544:62	7	;
SELECTION	4545:2	4549:2	6	
KEYWORD	4545:2	4545:2	7	if
LEAF_NODE	4545:2	4545:2	8	if
LEAF_NODE	4545:4	4545:4	7	(
CONDITION	4545:6	4545:6	7	tilewidth > INT_MAX || tilelength > INT_MAX || t2p -> tiff_width > INT_MAX - tilewidth || t2p -> tiff_length > INT_MAX - tilelength
EXPR	4545:6	4545:6	8	tilewidth > INT_MAX || tilelength > INT_MAX || t2p -> tiff_width > INT_MAX - tilewidth || t2p -> tiff_length > INT_MAX - tilelength
OR	4545:6	4546:6	9	tilewidth > INT_MAX || tilelength > INT_MAX || t2p -> tiff_width > INT_MAX - tilewidth || t2p -> tiff_length > INT_MAX - tilelength
EXPR	4545:6	4545:18	10	tilewidth > INT_MAX
FIELD	4545:6	4545:6	11	tilewidth
LEAF_NODE	4545:6	4545:6	12	tilewidth
REL_OPERATOR	4545:16	4545:16	11	>
LEAF_NODE	4545:16	4545:16	12	>
FIELD	4545:18	4545:18	11	INT_MAX
LEAF_NODE	4545:18	4545:18	12	INT_MAX
LEAF_NODE	4545:26	4545:26	10	||
EXPR	4546:6	4546:6	10	tilelength > INT_MAX || t2p -> tiff_width > INT_MAX - tilewidth || t2p -> tiff_length > INT_MAX - tilelength
OR	4546:6	4547:6	11	tilelength > INT_MAX || t2p -> tiff_width > INT_MAX - tilewidth || t2p -> tiff_length > INT_MAX - tilelength
EXPR	4546:6	4546:19	12	tilelength > INT_MAX
FIELD	4546:6	4546:6	13	tilelength
LEAF_NODE	4546:6	4546:6	14	tilelength
REL_OPERATOR	4546:17	4546:17	13	>
LEAF_NODE	4546:17	4546:17	14	>
FIELD	4546:19	4546:19	13	INT_MAX
LEAF_NODE	4546:19	4546:19	14	INT_MAX
LEAF_NODE	4546:27	4546:27	12	||
EXPR	4547:6	4547:6	12	t2p -> tiff_width > INT_MAX - tilewidth || t2p -> tiff_length > INT_MAX - tilelength
OR	4547:6	4548:6	13	t2p -> tiff_width > INT_MAX - tilewidth || t2p -> tiff_length > INT_MAX - tilelength
EXPR	4547:6	4547:34	14	t2p -> tiff_width > INT_MAX - tilewidth
FIELD	4547:6	4547:11	15	t2p -> tiff_width
LEAF_NODE	4547:6	4547:6	16	t2p
LEAF_NODE	4547:9	4547:9	16	->
LEAF_NODE	4547:11	4547:11	16	tiff_width
REL_OPERATOR	4547:22	4547:22	15	>
LEAF_NODE	4547:22	4547:22	16	>
FIELD	4547:24	4547:24	15	INT_MAX
LEAF_NODE	4547:24	4547:24	16	INT_MAX
LEAF_NODE	4547:32	4547:32	15	-
FIELD	4547:34	4547:34	15	tilewidth
LEAF_NODE	4547:34	4547:34	16	tilewidth
LEAF_NODE	4547:44	4547:44	14	||
EXPR	4548:6	4548:35	14	t2p -> tiff_length > INT_MAX - tilelength
FIELD	4548:6	4548:11	15	t2p -> tiff_length
LEAF_NODE	4548:6	4548:6	16	t2p
LEAF_NODE	4548:9	4548:9	16	->
LEAF_NODE	4548:11	4548:11	16	tiff_length
REL_OPERATOR	4548:23	4548:23	15	>
LEAF_NODE	4548:23	4548:23	16	>
FIELD	4548:25	4548:25	15	INT_MAX
LEAF_NODE	4548:25	4548:25	16	INT_MAX
LEAF_NODE	4548:33	4548:33	15	-
FIELD	4548:35	4548:35	15	tilelength
LEAF_NODE	4548:35	4548:35	16	tilelength
LEAF_NODE	4548:46	4548:46	7	)
STATEMENTS	4549:2	4553:2	7	
LEAF_NODE	4549:2	4549:2	8	{
STATEMENTS	4550:6	4552:6	8	
EXPR_STATEMENT	4550:6	4550:52	9	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" ) ;
EXPR	4550:6	4550:6	10	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
FUNCTION_CALL	4550:6	4550:51	11	TIFFError ( TIFF2PDF_MODULE , "Integer overflow" )
CALLEE	4550:6	4550:6	12	TIFFError
LEAF_NODE	4550:6	4550:6	13	TIFFError
LEAF_NODE	4550:15	4550:15	12	(
ARGUMENT	4550:16	4550:16	12	TIFF2PDF_MODULE
FIELD	4550:16	4550:16	13	TIFF2PDF_MODULE
LEAF_NODE	4550:16	4550:16	14	TIFF2PDF_MODULE
LEAF_NODE	4550:31	4550:31	12	,
ARGUMENT	4550:33	4550:33	12	"Integer overflow"
FIELD	4550:33	4550:33	13	"Integer overflow"
LEAF_NODE	4550:33	4550:33	14	"Integer overflow"
LEAF_NODE	4550:51	4550:51	12	)
LEAF_NODE	4550:52	4550:52	10	;
EXPR_STATEMENT	4551:6	4551:36	9	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	4551:6	4551:6	10	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	4551:6	4551:23	11	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	4551:6	4551:6	12	t2p -> t2p_error
FIELD	4551:6	4551:11	13	t2p -> t2p_error
LEAF_NODE	4551:6	4551:6	14	t2p
LEAF_NODE	4551:9	4551:9	14	->
LEAF_NODE	4551:11	4551:11	14	t2p_error
ASSIGN_OP	4551:21	4551:21	12	=
LEAF_NODE	4551:21	4551:21	13	=
RVAL	4551:23	4551:23	12	T2P_ERR_ERROR
FIELD	4551:23	4551:23	13	T2P_ERR_ERROR
LEAF_NODE	4551:23	4551:23	14	T2P_ERR_ERROR
LEAF_NODE	4551:36	4551:36	10	;
JUMP_STATEMENT	4552:6	4552:12	9	return DESTINATION ;
KEYWORD	4552:6	4552:6	10	return
LEAF_NODE	4552:6	4552:6	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	4552:12	4552:12	10	;
LEAF_NODE	4553:2	4553:2	8	}
EXPR_STATEMENT	4554:2	4556:12	6	tilecountx = ( t2p -> tiff_width + tilewidth - 1 ) / tilewidth ;
EXPR	4554:2	4554:2	7	tilecountx = ( t2p -> tiff_width + tilewidth - 1 ) / tilewidth
ASSIGN	4554:2	4554:13	8	tilecountx = ( t2p -> tiff_width + tilewidth - 1 ) / tilewidth
LVAL	4554:2	4554:2	9	tilecountx
FIELD	4554:2	4554:2	10	tilecountx
LEAF_NODE	4554:2	4554:2	11	tilecountx
ASSIGN_OP	4554:12	4554:12	9	=
LEAF_NODE	4554:12	4554:12	10	=
RVAL	4554:13	4556:3	9	( t2p -> tiff_width + tilewidth - 1 ) / tilewidth
LEAF_NODE	4554:13	4554:13	10	(
FIELD	4554:14	4554:19	10	t2p -> tiff_width
LEAF_NODE	4554:14	4554:14	11	t2p
LEAF_NODE	4554:17	4554:17	11	->
LEAF_NODE	4554:19	4554:19	11	tiff_width
LEAF_NODE	4554:30	4554:30	10	+
FIELD	4555:3	4555:3	10	tilewidth
LEAF_NODE	4555:3	4555:3	11	tilewidth
LEAF_NODE	4555:13	4555:13	10	-
FIELD	4555:14	4555:14	10	1
LEAF_NODE	4555:14	4555:14	11	1
LEAF_NODE	4555:15	4555:15	10	)
LEAF_NODE	4555:16	4555:16	10	/
FIELD	4556:3	4556:3	10	tilewidth
LEAF_NODE	4556:3	4556:3	11	tilewidth
LEAF_NODE	4556:12	4556:12	7	;
EXPR_STATEMENT	4557:2	4557:62	6	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecountx = tilecountx ;
EXPR	4557:2	4557:2	7	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecountx = tilecountx
ASSIGN	4557:2	4557:52	8	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecountx = tilecountx
LVAL	4557:2	4557:35	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecountx
LEAF_NODE	4557:2	4557:2	10	(
FIELD	4557:3	4557:32	10	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4557:3	4557:3	11	t2p
LEAF_NODE	4557:6	4557:6	11	->
LEAF_NODE	4557:8	4557:8	11	tiff_tiles
LEAF_NODE	4557:18	4557:18	11	[
EXPR	4557:19	4557:19	11	t2p -> pdf_page
FIELD	4557:19	4557:24	12	t2p -> pdf_page
LEAF_NODE	4557:19	4557:19	13	t2p
LEAF_NODE	4557:22	4557:22	13	->
LEAF_NODE	4557:24	4557:24	13	pdf_page
LEAF_NODE	4557:32	4557:32	11	]
LEAF_NODE	4557:33	4557:33	10	)
LEAF_NODE	4557:34	4557:34	10	.
LEAF_NODE	4557:35	4557:35	10	tiles_tilecountx
ASSIGN_OP	4557:51	4557:51	9	=
LEAF_NODE	4557:51	4557:51	10	=
RVAL	4557:52	4557:52	9	tilecountx
FIELD	4557:52	4557:52	10	tilecountx
LEAF_NODE	4557:52	4557:52	11	tilecountx
LEAF_NODE	4557:62	4557:62	7	;
EXPR_STATEMENT	4558:2	4560:13	6	tilecounty = ( t2p -> tiff_length + tilelength - 1 ) / tilelength ;
EXPR	4558:2	4558:2	7	tilecounty = ( t2p -> tiff_length + tilelength - 1 ) / tilelength
ASSIGN	4558:2	4558:13	8	tilecounty = ( t2p -> tiff_length + tilelength - 1 ) / tilelength
LVAL	4558:2	4558:2	9	tilecounty
FIELD	4558:2	4558:2	10	tilecounty
LEAF_NODE	4558:2	4558:2	11	tilecounty
ASSIGN_OP	4558:12	4558:12	9	=
LEAF_NODE	4558:12	4558:12	10	=
RVAL	4558:13	4560:3	9	( t2p -> tiff_length + tilelength - 1 ) / tilelength
LEAF_NODE	4558:13	4558:13	10	(
FIELD	4558:14	4558:19	10	t2p -> tiff_length
LEAF_NODE	4558:14	4558:14	11	t2p
LEAF_NODE	4558:17	4558:17	11	->
LEAF_NODE	4558:19	4558:19	11	tiff_length
LEAF_NODE	4558:31	4558:31	10	+
FIELD	4559:3	4559:3	10	tilelength
LEAF_NODE	4559:3	4559:3	11	tilelength
LEAF_NODE	4559:14	4559:14	10	-
FIELD	4559:15	4559:15	10	1
LEAF_NODE	4559:15	4559:15	11	1
LEAF_NODE	4559:16	4559:16	10	)
LEAF_NODE	4559:17	4559:17	10	/
FIELD	4560:3	4560:3	10	tilelength
LEAF_NODE	4560:3	4560:3	11	tilelength
LEAF_NODE	4560:13	4560:13	7	;
EXPR_STATEMENT	4561:2	4561:62	6	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecounty = tilecounty ;
EXPR	4561:2	4561:2	7	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecounty = tilecounty
ASSIGN	4561:2	4561:52	8	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecounty = tilecounty
LVAL	4561:2	4561:35	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecounty
LEAF_NODE	4561:2	4561:2	10	(
FIELD	4561:3	4561:32	10	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4561:3	4561:3	11	t2p
LEAF_NODE	4561:6	4561:6	11	->
LEAF_NODE	4561:8	4561:8	11	tiff_tiles
LEAF_NODE	4561:18	4561:18	11	[
EXPR	4561:19	4561:19	11	t2p -> pdf_page
FIELD	4561:19	4561:24	12	t2p -> pdf_page
LEAF_NODE	4561:19	4561:19	13	t2p
LEAF_NODE	4561:22	4561:22	13	->
LEAF_NODE	4561:24	4561:24	13	pdf_page
LEAF_NODE	4561:32	4561:32	11	]
LEAF_NODE	4561:33	4561:33	10	)
LEAF_NODE	4561:34	4561:34	10	.
LEAF_NODE	4561:35	4561:35	10	tiles_tilecounty
ASSIGN_OP	4561:51	4561:51	9	=
LEAF_NODE	4561:51	4561:51	10	=
RVAL	4561:52	4561:52	9	tilecounty
FIELD	4561:52	4561:52	10	tilecounty
LEAF_NODE	4561:52	4561:52	11	tilecounty
LEAF_NODE	4561:62	4561:62	7	;
EXPR_STATEMENT	4562:2	4563:30	6	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_edgetilewidth = t2p -> tiff_width % tilewidth ;
EXPR	4562:2	4562:2	7	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_edgetilewidth = t2p -> tiff_width % tilewidth
ASSIGN	4562:2	4563:3	8	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_edgetilewidth = t2p -> tiff_width % tilewidth
LVAL	4562:2	4562:35	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_edgetilewidth
LEAF_NODE	4562:2	4562:2	10	(
FIELD	4562:3	4562:32	10	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4562:3	4562:3	11	t2p
LEAF_NODE	4562:6	4562:6	11	->
LEAF_NODE	4562:8	4562:8	11	tiff_tiles
LEAF_NODE	4562:18	4562:18	11	[
EXPR	4562:19	4562:19	11	t2p -> pdf_page
FIELD	4562:19	4562:24	12	t2p -> pdf_page
LEAF_NODE	4562:19	4562:19	13	t2p
LEAF_NODE	4562:22	4562:22	13	->
LEAF_NODE	4562:24	4562:24	13	pdf_page
LEAF_NODE	4562:32	4562:32	11	]
LEAF_NODE	4562:33	4562:33	10	)
LEAF_NODE	4562:34	4562:34	10	.
LEAF_NODE	4562:35	4562:35	10	tiles_edgetilewidth
ASSIGN_OP	4562:54	4562:54	9	=
LEAF_NODE	4562:54	4562:54	10	=
RVAL	4563:3	4563:21	9	t2p -> tiff_width % tilewidth
FIELD	4563:3	4563:8	10	t2p -> tiff_width
LEAF_NODE	4563:3	4563:3	11	t2p
LEAF_NODE	4563:6	4563:6	11	->
LEAF_NODE	4563:8	4563:8	11	tiff_width
LEAF_NODE	4563:19	4563:19	10	%
FIELD	4563:21	4563:21	10	tilewidth
LEAF_NODE	4563:21	4563:21	11	tilewidth
LEAF_NODE	4563:30	4563:30	7	;
EXPR_STATEMENT	4564:2	4565:32	6	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_edgetilelength = t2p -> tiff_length % tilelength ;
EXPR	4564:2	4564:2	7	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_edgetilelength = t2p -> tiff_length % tilelength
ASSIGN	4564:2	4565:3	8	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_edgetilelength = t2p -> tiff_length % tilelength
LVAL	4564:2	4564:35	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_edgetilelength
LEAF_NODE	4564:2	4564:2	10	(
FIELD	4564:3	4564:32	10	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4564:3	4564:3	11	t2p
LEAF_NODE	4564:6	4564:6	11	->
LEAF_NODE	4564:8	4564:8	11	tiff_tiles
LEAF_NODE	4564:18	4564:18	11	[
EXPR	4564:19	4564:19	11	t2p -> pdf_page
FIELD	4564:19	4564:24	12	t2p -> pdf_page
LEAF_NODE	4564:19	4564:19	13	t2p
LEAF_NODE	4564:22	4564:22	13	->
LEAF_NODE	4564:24	4564:24	13	pdf_page
LEAF_NODE	4564:32	4564:32	11	]
LEAF_NODE	4564:33	4564:33	10	)
LEAF_NODE	4564:34	4564:34	10	.
LEAF_NODE	4564:35	4564:35	10	tiles_edgetilelength
ASSIGN_OP	4564:55	4564:55	9	=
LEAF_NODE	4564:55	4564:55	10	=
RVAL	4565:3	4565:22	9	t2p -> tiff_length % tilelength
FIELD	4565:3	4565:8	10	t2p -> tiff_length
LEAF_NODE	4565:3	4565:3	11	t2p
LEAF_NODE	4565:6	4565:6	11	->
LEAF_NODE	4565:8	4565:8	11	tiff_length
LEAF_NODE	4565:20	4565:20	10	%
FIELD	4565:22	4565:22	10	tilelength
LEAF_NODE	4565:22	4565:22	11	tilelength
LEAF_NODE	4565:32	4565:32	7	;
EXPR_STATEMENT	4566:2	4566:52	6	tiles = ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tiles ;
EXPR	4566:2	4566:2	7	tiles = ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tiles
ASSIGN	4566:2	4566:8	8	tiles = ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tiles
LVAL	4566:2	4566:2	9	tiles
FIELD	4566:2	4566:2	10	tiles
LEAF_NODE	4566:2	4566:2	11	tiles
ASSIGN_OP	4566:7	4566:7	9	=
LEAF_NODE	4566:7	4566:7	10	=
RVAL	4566:8	4566:41	9	( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tiles
LEAF_NODE	4566:8	4566:8	10	(
FIELD	4566:9	4566:38	10	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4566:9	4566:9	11	t2p
LEAF_NODE	4566:12	4566:12	11	->
LEAF_NODE	4566:14	4566:14	11	tiff_tiles
LEAF_NODE	4566:24	4566:24	11	[
EXPR	4566:25	4566:25	11	t2p -> pdf_page
FIELD	4566:25	4566:30	12	t2p -> pdf_page
LEAF_NODE	4566:25	4566:25	13	t2p
LEAF_NODE	4566:28	4566:28	13	->
LEAF_NODE	4566:30	4566:30	13	pdf_page
LEAF_NODE	4566:38	4566:38	11	]
LEAF_NODE	4566:39	4566:39	10	)
LEAF_NODE	4566:40	4566:40	10	.
LEAF_NODE	4566:41	4566:41	10	tiles_tiles
LEAF_NODE	4566:52	4566:52	7	;
ITERATION	4567:2	4567:32	6	
KEYWORD	4567:2	4567:2	7	for
LEAF_NODE	4567:2	4567:2	8	for
LEAF_NODE	4567:5	4567:5	7	(
FOR_INIT	4567:6	4567:10	7	i2 = 0 ;
EXPR	4567:6	4567:6	8	i2 = 0
ASSIGN	4567:6	4567:9	9	i2 = 0
LVAL	4567:6	4567:6	10	i2
FIELD	4567:6	4567:6	11	i2
LEAF_NODE	4567:6	4567:6	12	i2
ASSIGN_OP	4567:8	4567:8	10	=
LEAF_NODE	4567:8	4567:8	11	=
RVAL	4567:9	4567:9	10	0
FIELD	4567:9	4567:9	11	0
LEAF_NODE	4567:9	4567:9	12	0
LEAF_NODE	4567:10	4567:10	8	;
CONDITION	4567:11	4567:11	7	i2 < tilecounty - 1
EXPR	4567:11	4567:25	8	i2 < tilecounty - 1
FIELD	4567:11	4567:11	9	i2
LEAF_NODE	4567:11	4567:11	10	i2
REL_OPERATOR	4567:13	4567:13	9	<
LEAF_NODE	4567:13	4567:13	10	<
FIELD	4567:14	4567:14	9	tilecounty
LEAF_NODE	4567:14	4567:14	10	tilecounty
LEAF_NODE	4567:24	4567:24	9	-
FIELD	4567:25	4567:25	9	1
LEAF_NODE	4567:25	4567:25	10	1
LEAF_NODE	4567:26	4567:26	7	;
FOR_EXPR	4567:27	4567:27	7	i2 ++
EXPR	4567:27	4567:27	8	i2 ++
FIELD	4567:27	4567:29	9	i2 ++
LEAF_NODE	4567:27	4567:27	10	i2
LEAF_NODE	4567:29	4567:29	10	++
LEAF_NODE	4567:31	4567:31	7	)
STATEMENTS	4567:32	4601:2	7	
LEAF_NODE	4567:32	4567:32	8	{
STATEMENTS	4568:3	4600:30	8	
ITERATION	4568:3	4568:30	9	
KEYWORD	4568:3	4568:3	10	for
LEAF_NODE	4568:3	4568:3	11	for
LEAF_NODE	4568:6	4568:6	10	(
FOR_INIT	4568:7	4568:10	10	i = 0 ;
EXPR	4568:7	4568:7	11	i = 0
ASSIGN	4568:7	4568:9	12	i = 0
LVAL	4568:7	4568:7	13	i
FIELD	4568:7	4568:7	14	i
LEAF_NODE	4568:7	4568:7	15	i
ASSIGN_OP	4568:8	4568:8	13	=
LEAF_NODE	4568:8	4568:8	14	=
RVAL	4568:9	4568:9	13	0
FIELD	4568:9	4568:9	14	0
LEAF_NODE	4568:9	4568:9	15	0
LEAF_NODE	4568:10	4568:10	11	;
CONDITION	4568:11	4568:11	10	i < tilecountx - 1
EXPR	4568:11	4568:24	11	i < tilecountx - 1
FIELD	4568:11	4568:11	12	i
LEAF_NODE	4568:11	4568:11	13	i
REL_OPERATOR	4568:12	4568:12	12	<
LEAF_NODE	4568:12	4568:12	13	<
FIELD	4568:13	4568:13	12	tilecountx
LEAF_NODE	4568:13	4568:13	13	tilecountx
LEAF_NODE	4568:23	4568:23	12	-
FIELD	4568:24	4568:24	12	1
LEAF_NODE	4568:24	4568:24	13	1
LEAF_NODE	4568:25	4568:25	10	;
FOR_EXPR	4568:26	4568:26	10	i ++
EXPR	4568:26	4568:26	11	i ++
FIELD	4568:26	4568:27	12	i ++
LEAF_NODE	4568:26	4568:26	13	i
LEAF_NODE	4568:27	4568:27	13	++
LEAF_NODE	4568:29	4568:29	10	)
STATEMENTS	4568:30	4586:3	10	
LEAF_NODE	4568:30	4568:30	11	{
STATEMENTS	4569:4	4585:31	11	
EXPR_STATEMENT	4569:4	4569:43	12	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box ) ;
EXPR	4569:4	4569:4	13	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box )
ASSIGN	4569:4	4569:9	14	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box )
LVAL	4569:4	4569:4	15	boxp
FIELD	4569:4	4569:4	16	boxp
LEAF_NODE	4569:4	4569:4	17	boxp
ASSIGN_OP	4569:8	4569:8	15	=
LEAF_NODE	4569:8	4569:8	16	=
RVAL	4569:9	4569:9	15	& ( tiles [ i2 * tilecountx + i ] . tile_box )
UNARY_EXPR	4569:9	4569:42	16	& ( tiles [ i2 * tilecountx + i ] . tile_box )
UNARY_OPERATOR	4569:9	4569:9	17	&
LEAF_NODE	4569:9	4569:9	18	&
LEAF_NODE	4569:10	4569:10	17	(
FIELD	4569:11	4569:34	17	tiles [ i2 * tilecountx + i ] . tile_box
LEAF_NODE	4569:11	4569:11	18	tiles
LEAF_NODE	4569:16	4569:16	18	[
EXPR	4569:17	4569:31	18	i2 * tilecountx + i
FIELD	4569:17	4569:17	19	i2
LEAF_NODE	4569:17	4569:17	20	i2
LEAF_NODE	4569:19	4569:19	19	*
FIELD	4569:20	4569:20	19	tilecountx
LEAF_NODE	4569:20	4569:20	20	tilecountx
LEAF_NODE	4569:30	4569:30	19	+
FIELD	4569:31	4569:31	19	i
LEAF_NODE	4569:31	4569:31	20	i
LEAF_NODE	4569:32	4569:32	18	]
LEAF_NODE	4569:33	4569:33	18	.
LEAF_NODE	4569:34	4569:34	18	tile_box
LEAF_NODE	4569:42	4569:42	17	)
LEAF_NODE	4569:43	4569:43	13	;
LEAF_NODE	4570:4	4570:4	12	boxp
LEAF_NODE	4570:8	4570:8	12	->
LEAF_NODE	4570:10	4570:10	12	x1
LEAF_NODE	4570:13	4570:13	12	=
LEAF_NODE	4571:5	4571:5	12	t2p
LEAF_NODE	4571:8	4571:8	12	->
LEAF_NODE	4571:10	4571:10	12	pdf_imagebox
LEAF_NODE	4571:22	4571:22	12	.
LEAF_NODE	4571:23	4571:23	12	x1
LEAF_NODE	4572:5	4572:5	12	+
LEAF_NODE	4572:7	4572:7	12	(
LEAF_NODE	4572:8	4572:8	12	(
LEAF_NODE	4572:9	4572:9	12	float
LEAF_NODE	4572:14	4572:14	12	)
LEAF_NODE	4572:15	4572:15	12	(
LEAF_NODE	4572:16	4572:16	12	t2p
LEAF_NODE	4572:19	4572:19	12	->
LEAF_NODE	4572:21	4572:21	12	pdf_imagewidth
LEAF_NODE	4572:36	4572:36	12	*
LEAF_NODE	4572:38	4572:38	12	i
LEAF_NODE	4572:40	4572:40	12	*
LEAF_NODE	4572:42	4572:42	12	tilewidth
LEAF_NODE	4572:51	4572:51	12	)
LEAF_NODE	4573:5	4573:5	12	/
LEAF_NODE	4573:7	4573:7	12	(
LEAF_NODE	4573:8	4573:8	12	float
LEAF_NODE	4573:13	4573:13	12	)
LEAF_NODE	4573:14	4573:14	12	t2p
LEAF_NODE	4573:17	4573:17	12	->
LEAF_NODE	4573:19	4573:19	12	tiff_width
LEAF_NODE	4573:29	4573:29	12	)
LEAF_NODE	4573:30	4573:30	12	;
LEAF_NODE	4574:4	4574:4	12	boxp
LEAF_NODE	4574:8	4574:8	12	->
LEAF_NODE	4574:10	4574:10	12	x2
LEAF_NODE	4574:13	4574:13	12	=
LEAF_NODE	4575:5	4575:5	12	t2p
LEAF_NODE	4575:8	4575:8	12	->
LEAF_NODE	4575:10	4575:10	12	pdf_imagebox
LEAF_NODE	4575:22	4575:22	12	.
LEAF_NODE	4575:23	4575:23	12	x1
LEAF_NODE	4576:5	4576:5	12	+
LEAF_NODE	4576:7	4576:7	12	(
LEAF_NODE	4576:8	4576:8	12	(
LEAF_NODE	4576:9	4576:9	12	float
LEAF_NODE	4576:14	4576:14	12	)
LEAF_NODE	4576:15	4576:15	12	(
LEAF_NODE	4576:16	4576:16	12	t2p
LEAF_NODE	4576:19	4576:19	12	->
LEAF_NODE	4576:21	4576:21	12	pdf_imagewidth
LEAF_NODE	4576:36	4576:36	12	*
LEAF_NODE	4576:38	4576:38	12	(
LEAF_NODE	4576:39	4576:39	12	i
LEAF_NODE	4576:40	4576:40	12	+
LEAF_NODE	4576:41	4576:41	12	1
LEAF_NODE	4576:42	4576:42	12	)
LEAF_NODE	4576:44	4576:44	12	*
LEAF_NODE	4576:46	4576:46	12	tilewidth
LEAF_NODE	4576:55	4576:55	12	)
LEAF_NODE	4577:5	4577:5	12	/
LEAF_NODE	4577:7	4577:7	12	(
LEAF_NODE	4577:8	4577:8	12	float
LEAF_NODE	4577:13	4577:13	12	)
LEAF_NODE	4577:14	4577:14	12	t2p
LEAF_NODE	4577:17	4577:17	12	->
LEAF_NODE	4577:19	4577:19	12	tiff_width
LEAF_NODE	4577:29	4577:29	12	)
LEAF_NODE	4577:30	4577:30	12	;
LEAF_NODE	4578:4	4578:4	12	boxp
LEAF_NODE	4578:8	4578:8	12	->
LEAF_NODE	4578:10	4578:10	12	y1
LEAF_NODE	4578:13	4578:13	12	=
LEAF_NODE	4579:5	4579:5	12	t2p
LEAF_NODE	4579:8	4579:8	12	->
LEAF_NODE	4579:10	4579:10	12	pdf_imagebox
LEAF_NODE	4579:22	4579:22	12	.
LEAF_NODE	4579:23	4579:23	12	y2
LEAF_NODE	4580:5	4580:5	12	-
LEAF_NODE	4580:7	4580:7	12	(
LEAF_NODE	4580:8	4580:8	12	(
LEAF_NODE	4580:9	4580:9	12	float
LEAF_NODE	4580:14	4580:14	12	)
LEAF_NODE	4580:15	4580:15	12	(
LEAF_NODE	4580:16	4580:16	12	t2p
LEAF_NODE	4580:19	4580:19	12	->
LEAF_NODE	4580:21	4580:21	12	pdf_imagelength
LEAF_NODE	4580:37	4580:37	12	*
LEAF_NODE	4580:39	4580:39	12	(
LEAF_NODE	4580:40	4580:40	12	i2
LEAF_NODE	4580:42	4580:42	12	+
LEAF_NODE	4580:43	4580:43	12	1
LEAF_NODE	4580:44	4580:44	12	)
LEAF_NODE	4580:46	4580:46	12	*
LEAF_NODE	4580:48	4580:48	12	tilelength
LEAF_NODE	4580:58	4580:58	12	)
LEAF_NODE	4581:5	4581:5	12	/
LEAF_NODE	4581:7	4581:7	12	(
LEAF_NODE	4581:8	4581:8	12	float
LEAF_NODE	4581:13	4581:13	12	)
LEAF_NODE	4581:14	4581:14	12	t2p
LEAF_NODE	4581:17	4581:17	12	->
LEAF_NODE	4581:19	4581:19	12	tiff_length
LEAF_NODE	4581:30	4581:30	12	)
LEAF_NODE	4581:31	4581:31	12	;
LEAF_NODE	4582:4	4582:4	12	boxp
LEAF_NODE	4582:8	4582:8	12	->
LEAF_NODE	4582:10	4582:10	12	y2
LEAF_NODE	4582:13	4582:13	12	=
LEAF_NODE	4583:5	4583:5	12	t2p
LEAF_NODE	4583:8	4583:8	12	->
LEAF_NODE	4583:10	4583:10	12	pdf_imagebox
LEAF_NODE	4583:22	4583:22	12	.
LEAF_NODE	4583:23	4583:23	12	y2
LEAF_NODE	4584:5	4584:5	12	-
LEAF_NODE	4584:7	4584:7	12	(
LEAF_NODE	4584:8	4584:8	12	(
LEAF_NODE	4584:9	4584:9	12	float
LEAF_NODE	4584:14	4584:14	12	)
LEAF_NODE	4584:15	4584:15	12	(
LEAF_NODE	4584:16	4584:16	12	t2p
LEAF_NODE	4584:19	4584:19	12	->
LEAF_NODE	4584:21	4584:21	12	pdf_imagelength
LEAF_NODE	4584:37	4584:37	12	*
LEAF_NODE	4584:39	4584:39	12	i2
LEAF_NODE	4584:42	4584:42	12	*
LEAF_NODE	4584:44	4584:44	12	tilelength
LEAF_NODE	4584:54	4584:54	12	)
LEAF_NODE	4585:5	4585:5	12	/
LEAF_NODE	4585:7	4585:7	12	(
LEAF_NODE	4585:8	4585:8	12	float
LEAF_NODE	4585:13	4585:13	12	)
LEAF_NODE	4585:14	4585:14	12	t2p
LEAF_NODE	4585:17	4585:17	12	->
LEAF_NODE	4585:19	4585:19	12	tiff_length
LEAF_NODE	4585:30	4585:30	12	)
LEAF_NODE	4585:31	4585:31	12	;
LEAF_NODE	4586:3	4586:3	11	}
EXPR_STATEMENT	4587:3	4587:42	9	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box ) ;
EXPR	4587:3	4587:3	10	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box )
ASSIGN	4587:3	4587:8	11	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box )
LVAL	4587:3	4587:3	12	boxp
FIELD	4587:3	4587:3	13	boxp
LEAF_NODE	4587:3	4587:3	14	boxp
ASSIGN_OP	4587:7	4587:7	12	=
LEAF_NODE	4587:7	4587:7	13	=
RVAL	4587:8	4587:8	12	& ( tiles [ i2 * tilecountx + i ] . tile_box )
UNARY_EXPR	4587:8	4587:41	13	& ( tiles [ i2 * tilecountx + i ] . tile_box )
UNARY_OPERATOR	4587:8	4587:8	14	&
LEAF_NODE	4587:8	4587:8	15	&
LEAF_NODE	4587:9	4587:9	14	(
FIELD	4587:10	4587:33	14	tiles [ i2 * tilecountx + i ] . tile_box
LEAF_NODE	4587:10	4587:10	15	tiles
LEAF_NODE	4587:15	4587:15	15	[
EXPR	4587:16	4587:30	15	i2 * tilecountx + i
FIELD	4587:16	4587:16	16	i2
LEAF_NODE	4587:16	4587:16	17	i2
LEAF_NODE	4587:18	4587:18	16	*
FIELD	4587:19	4587:19	16	tilecountx
LEAF_NODE	4587:19	4587:19	17	tilecountx
LEAF_NODE	4587:29	4587:29	16	+
FIELD	4587:30	4587:30	16	i
LEAF_NODE	4587:30	4587:30	17	i
LEAF_NODE	4587:31	4587:31	15	]
LEAF_NODE	4587:32	4587:32	15	.
LEAF_NODE	4587:33	4587:33	15	tile_box
LEAF_NODE	4587:41	4587:41	14	)
LEAF_NODE	4587:42	4587:42	10	;
LEAF_NODE	4588:3	4588:3	9	boxp
LEAF_NODE	4588:7	4588:7	9	->
LEAF_NODE	4588:9	4588:9	9	x1
LEAF_NODE	4588:12	4588:12	9	=
LEAF_NODE	4589:4	4589:4	9	t2p
LEAF_NODE	4589:7	4589:7	9	->
LEAF_NODE	4589:9	4589:9	9	pdf_imagebox
LEAF_NODE	4589:21	4589:21	9	.
LEAF_NODE	4589:22	4589:22	9	x1
LEAF_NODE	4590:4	4590:4	9	+
LEAF_NODE	4590:6	4590:6	9	(
LEAF_NODE	4590:7	4590:7	9	(
LEAF_NODE	4590:8	4590:8	9	float
LEAF_NODE	4590:13	4590:13	9	)
LEAF_NODE	4590:14	4590:14	9	(
LEAF_NODE	4590:15	4590:15	9	t2p
LEAF_NODE	4590:18	4590:18	9	->
LEAF_NODE	4590:20	4590:20	9	pdf_imagewidth
LEAF_NODE	4590:35	4590:35	9	*
LEAF_NODE	4590:37	4590:37	9	i
LEAF_NODE	4590:39	4590:39	9	*
LEAF_NODE	4590:41	4590:41	9	tilewidth
LEAF_NODE	4590:50	4590:50	9	)
LEAF_NODE	4591:4	4591:4	9	/
LEAF_NODE	4591:6	4591:6	9	(
LEAF_NODE	4591:7	4591:7	9	float
LEAF_NODE	4591:12	4591:12	9	)
LEAF_NODE	4591:13	4591:13	9	t2p
LEAF_NODE	4591:16	4591:16	9	->
LEAF_NODE	4591:18	4591:18	9	tiff_width
LEAF_NODE	4591:28	4591:28	9	)
LEAF_NODE	4591:29	4591:29	9	;
EXPR_STATEMENT	4592:3	4592:34	9	boxp -> x2 = t2p -> pdf_imagebox . x2 ;
EXPR	4592:3	4592:3	10	boxp -> x2 = t2p -> pdf_imagebox . x2
ASSIGN	4592:3	4592:14	11	boxp -> x2 = t2p -> pdf_imagebox . x2
LVAL	4592:3	4592:3	12	boxp -> x2
FIELD	4592:3	4592:9	13	boxp -> x2
LEAF_NODE	4592:3	4592:3	14	boxp
LEAF_NODE	4592:7	4592:7	14	->
LEAF_NODE	4592:9	4592:9	14	x2
ASSIGN_OP	4592:12	4592:12	12	=
LEAF_NODE	4592:12	4592:12	13	=
RVAL	4592:14	4592:14	12	t2p -> pdf_imagebox . x2
FIELD	4592:14	4592:32	13	t2p -> pdf_imagebox . x2
LEAF_NODE	4592:14	4592:14	14	t2p
LEAF_NODE	4592:17	4592:17	14	->
LEAF_NODE	4592:19	4592:19	14	pdf_imagebox
LEAF_NODE	4592:31	4592:31	14	.
LEAF_NODE	4592:32	4592:32	14	x2
LEAF_NODE	4592:34	4592:34	10	;
LEAF_NODE	4593:3	4593:3	9	boxp
LEAF_NODE	4593:7	4593:7	9	->
LEAF_NODE	4593:9	4593:9	9	y1
LEAF_NODE	4593:12	4593:12	9	=
LEAF_NODE	4594:4	4594:4	9	t2p
LEAF_NODE	4594:7	4594:7	9	->
LEAF_NODE	4594:9	4594:9	9	pdf_imagebox
LEAF_NODE	4594:21	4594:21	9	.
LEAF_NODE	4594:22	4594:22	9	y2
LEAF_NODE	4595:4	4595:4	9	-
LEAF_NODE	4595:6	4595:6	9	(
LEAF_NODE	4595:7	4595:7	9	(
LEAF_NODE	4595:8	4595:8	9	float
LEAF_NODE	4595:13	4595:13	9	)
LEAF_NODE	4595:14	4595:14	9	(
LEAF_NODE	4595:15	4595:15	9	t2p
LEAF_NODE	4595:18	4595:18	9	->
LEAF_NODE	4595:20	4595:20	9	pdf_imagelength
LEAF_NODE	4595:36	4595:36	9	*
LEAF_NODE	4595:38	4595:38	9	(
LEAF_NODE	4595:39	4595:39	9	i2
LEAF_NODE	4595:41	4595:41	9	+
LEAF_NODE	4595:42	4595:42	9	1
LEAF_NODE	4595:43	4595:43	9	)
LEAF_NODE	4595:45	4595:45	9	*
LEAF_NODE	4595:47	4595:47	9	tilelength
LEAF_NODE	4595:57	4595:57	9	)
LEAF_NODE	4596:4	4596:4	9	/
LEAF_NODE	4596:6	4596:6	9	(
LEAF_NODE	4596:7	4596:7	9	float
LEAF_NODE	4596:12	4596:12	9	)
LEAF_NODE	4596:13	4596:13	9	t2p
LEAF_NODE	4596:16	4596:16	9	->
LEAF_NODE	4596:18	4596:18	9	tiff_length
LEAF_NODE	4596:29	4596:29	9	)
LEAF_NODE	4596:30	4596:30	9	;
LEAF_NODE	4597:3	4597:3	9	boxp
LEAF_NODE	4597:7	4597:7	9	->
LEAF_NODE	4597:9	4597:9	9	y2
LEAF_NODE	4597:12	4597:12	9	=
LEAF_NODE	4598:4	4598:4	9	t2p
LEAF_NODE	4598:7	4598:7	9	->
LEAF_NODE	4598:9	4598:9	9	pdf_imagebox
LEAF_NODE	4598:21	4598:21	9	.
LEAF_NODE	4598:22	4598:22	9	y2
LEAF_NODE	4599:4	4599:4	9	-
LEAF_NODE	4599:6	4599:6	9	(
LEAF_NODE	4599:7	4599:7	9	(
LEAF_NODE	4599:8	4599:8	9	float
LEAF_NODE	4599:13	4599:13	9	)
LEAF_NODE	4599:14	4599:14	9	(
LEAF_NODE	4599:15	4599:15	9	t2p
LEAF_NODE	4599:18	4599:18	9	->
LEAF_NODE	4599:20	4599:20	9	pdf_imagelength
LEAF_NODE	4599:36	4599:36	9	*
LEAF_NODE	4599:38	4599:38	9	i2
LEAF_NODE	4599:41	4599:41	9	*
LEAF_NODE	4599:43	4599:43	9	tilelength
LEAF_NODE	4599:53	4599:53	9	)
LEAF_NODE	4600:4	4600:4	9	/
LEAF_NODE	4600:6	4600:6	9	(
LEAF_NODE	4600:7	4600:7	9	float
LEAF_NODE	4600:12	4600:12	9	)
LEAF_NODE	4600:13	4600:13	9	t2p
LEAF_NODE	4600:16	4600:16	9	->
LEAF_NODE	4600:18	4600:18	9	tiff_length
LEAF_NODE	4600:29	4600:29	9	)
LEAF_NODE	4600:30	4600:30	9	;
LEAF_NODE	4601:2	4601:2	8	}
ITERATION	4602:2	4602:29	6	
KEYWORD	4602:2	4602:2	7	for
LEAF_NODE	4602:2	4602:2	8	for
LEAF_NODE	4602:5	4602:5	7	(
FOR_INIT	4602:6	4602:9	7	i = 0 ;
EXPR	4602:6	4602:6	8	i = 0
ASSIGN	4602:6	4602:8	9	i = 0
LVAL	4602:6	4602:6	10	i
FIELD	4602:6	4602:6	11	i
LEAF_NODE	4602:6	4602:6	12	i
ASSIGN_OP	4602:7	4602:7	10	=
LEAF_NODE	4602:7	4602:7	11	=
RVAL	4602:8	4602:8	10	0
FIELD	4602:8	4602:8	11	0
LEAF_NODE	4602:8	4602:8	12	0
LEAF_NODE	4602:9	4602:9	8	;
CONDITION	4602:10	4602:10	7	i < tilecountx - 1
EXPR	4602:10	4602:23	8	i < tilecountx - 1
FIELD	4602:10	4602:10	9	i
LEAF_NODE	4602:10	4602:10	10	i
REL_OPERATOR	4602:11	4602:11	9	<
LEAF_NODE	4602:11	4602:11	10	<
FIELD	4602:12	4602:12	9	tilecountx
LEAF_NODE	4602:12	4602:12	10	tilecountx
LEAF_NODE	4602:22	4602:22	9	-
FIELD	4602:23	4602:23	9	1
LEAF_NODE	4602:23	4602:23	10	1
LEAF_NODE	4602:24	4602:24	7	;
FOR_EXPR	4602:25	4602:25	7	i ++
EXPR	4602:25	4602:25	8	i ++
FIELD	4602:25	4602:26	9	i ++
LEAF_NODE	4602:25	4602:25	10	i
LEAF_NODE	4602:26	4602:26	10	++
LEAF_NODE	4602:28	4602:28	7	)
STATEMENTS	4602:29	4617:2	7	
LEAF_NODE	4602:29	4602:29	8	{
STATEMENTS	4603:3	4616:30	8	
EXPR_STATEMENT	4603:3	4603:42	9	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box ) ;
EXPR	4603:3	4603:3	10	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box )
ASSIGN	4603:3	4603:8	11	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box )
LVAL	4603:3	4603:3	12	boxp
FIELD	4603:3	4603:3	13	boxp
LEAF_NODE	4603:3	4603:3	14	boxp
ASSIGN_OP	4603:7	4603:7	12	=
LEAF_NODE	4603:7	4603:7	13	=
RVAL	4603:8	4603:8	12	& ( tiles [ i2 * tilecountx + i ] . tile_box )
UNARY_EXPR	4603:8	4603:41	13	& ( tiles [ i2 * tilecountx + i ] . tile_box )
UNARY_OPERATOR	4603:8	4603:8	14	&
LEAF_NODE	4603:8	4603:8	15	&
LEAF_NODE	4603:9	4603:9	14	(
FIELD	4603:10	4603:33	14	tiles [ i2 * tilecountx + i ] . tile_box
LEAF_NODE	4603:10	4603:10	15	tiles
LEAF_NODE	4603:15	4603:15	15	[
EXPR	4603:16	4603:30	15	i2 * tilecountx + i
FIELD	4603:16	4603:16	16	i2
LEAF_NODE	4603:16	4603:16	17	i2
LEAF_NODE	4603:18	4603:18	16	*
FIELD	4603:19	4603:19	16	tilecountx
LEAF_NODE	4603:19	4603:19	17	tilecountx
LEAF_NODE	4603:29	4603:29	16	+
FIELD	4603:30	4603:30	16	i
LEAF_NODE	4603:30	4603:30	17	i
LEAF_NODE	4603:31	4603:31	15	]
LEAF_NODE	4603:32	4603:32	15	.
LEAF_NODE	4603:33	4603:33	15	tile_box
LEAF_NODE	4603:41	4603:41	14	)
LEAF_NODE	4603:42	4603:42	10	;
LEAF_NODE	4604:3	4604:3	9	boxp
LEAF_NODE	4604:7	4604:7	9	->
LEAF_NODE	4604:9	4604:9	9	x1
LEAF_NODE	4604:12	4604:12	9	=
LEAF_NODE	4605:4	4605:4	9	t2p
LEAF_NODE	4605:7	4605:7	9	->
LEAF_NODE	4605:9	4605:9	9	pdf_imagebox
LEAF_NODE	4605:21	4605:21	9	.
LEAF_NODE	4605:22	4605:22	9	x1
LEAF_NODE	4606:4	4606:4	9	+
LEAF_NODE	4606:6	4606:6	9	(
LEAF_NODE	4606:7	4606:7	9	(
LEAF_NODE	4606:8	4606:8	9	float
LEAF_NODE	4606:13	4606:13	9	)
LEAF_NODE	4606:14	4606:14	9	(
LEAF_NODE	4606:15	4606:15	9	t2p
LEAF_NODE	4606:18	4606:18	9	->
LEAF_NODE	4606:20	4606:20	9	pdf_imagewidth
LEAF_NODE	4606:35	4606:35	9	*
LEAF_NODE	4606:37	4606:37	9	i
LEAF_NODE	4606:39	4606:39	9	*
LEAF_NODE	4606:41	4606:41	9	tilewidth
LEAF_NODE	4606:50	4606:50	9	)
LEAF_NODE	4607:4	4607:4	9	/
LEAF_NODE	4607:6	4607:6	9	(
LEAF_NODE	4607:7	4607:7	9	float
LEAF_NODE	4607:12	4607:12	9	)
LEAF_NODE	4607:13	4607:13	9	t2p
LEAF_NODE	4607:16	4607:16	9	->
LEAF_NODE	4607:18	4607:18	9	tiff_width
LEAF_NODE	4607:28	4607:28	9	)
LEAF_NODE	4607:29	4607:29	9	;
LEAF_NODE	4608:3	4608:3	9	boxp
LEAF_NODE	4608:7	4608:7	9	->
LEAF_NODE	4608:9	4608:9	9	x2
LEAF_NODE	4608:12	4608:12	9	=
LEAF_NODE	4609:4	4609:4	9	t2p
LEAF_NODE	4609:7	4609:7	9	->
LEAF_NODE	4609:9	4609:9	9	pdf_imagebox
LEAF_NODE	4609:21	4609:21	9	.
LEAF_NODE	4609:22	4609:22	9	x1
LEAF_NODE	4610:4	4610:4	9	+
LEAF_NODE	4610:6	4610:6	9	(
LEAF_NODE	4610:7	4610:7	9	(
LEAF_NODE	4610:8	4610:8	9	float
LEAF_NODE	4610:13	4610:13	9	)
LEAF_NODE	4610:14	4610:14	9	(
LEAF_NODE	4610:15	4610:15	9	t2p
LEAF_NODE	4610:18	4610:18	9	->
LEAF_NODE	4610:20	4610:20	9	pdf_imagewidth
LEAF_NODE	4610:35	4610:35	9	*
LEAF_NODE	4610:37	4610:37	9	(
LEAF_NODE	4610:38	4610:38	9	i
LEAF_NODE	4610:39	4610:39	9	+
LEAF_NODE	4610:40	4610:40	9	1
LEAF_NODE	4610:41	4610:41	9	)
LEAF_NODE	4610:43	4610:43	9	*
LEAF_NODE	4610:45	4610:45	9	tilewidth
LEAF_NODE	4610:54	4610:54	9	)
LEAF_NODE	4611:4	4611:4	9	/
LEAF_NODE	4611:6	4611:6	9	(
LEAF_NODE	4611:7	4611:7	9	float
LEAF_NODE	4611:12	4611:12	9	)
LEAF_NODE	4611:13	4611:13	9	t2p
LEAF_NODE	4611:16	4611:16	9	->
LEAF_NODE	4611:18	4611:18	9	tiff_width
LEAF_NODE	4611:28	4611:28	9	)
LEAF_NODE	4611:29	4611:29	9	;
EXPR_STATEMENT	4612:3	4612:34	9	boxp -> y1 = t2p -> pdf_imagebox . y1 ;
EXPR	4612:3	4612:3	10	boxp -> y1 = t2p -> pdf_imagebox . y1
ASSIGN	4612:3	4612:14	11	boxp -> y1 = t2p -> pdf_imagebox . y1
LVAL	4612:3	4612:3	12	boxp -> y1
FIELD	4612:3	4612:9	13	boxp -> y1
LEAF_NODE	4612:3	4612:3	14	boxp
LEAF_NODE	4612:7	4612:7	14	->
LEAF_NODE	4612:9	4612:9	14	y1
ASSIGN_OP	4612:12	4612:12	12	=
LEAF_NODE	4612:12	4612:12	13	=
RVAL	4612:14	4612:14	12	t2p -> pdf_imagebox . y1
FIELD	4612:14	4612:32	13	t2p -> pdf_imagebox . y1
LEAF_NODE	4612:14	4612:14	14	t2p
LEAF_NODE	4612:17	4612:17	14	->
LEAF_NODE	4612:19	4612:19	14	pdf_imagebox
LEAF_NODE	4612:31	4612:31	14	.
LEAF_NODE	4612:32	4612:32	14	y1
LEAF_NODE	4612:34	4612:34	10	;
LEAF_NODE	4613:3	4613:3	9	boxp
LEAF_NODE	4613:7	4613:7	9	->
LEAF_NODE	4613:9	4613:9	9	y2
LEAF_NODE	4613:12	4613:12	9	=
LEAF_NODE	4614:4	4614:4	9	t2p
LEAF_NODE	4614:7	4614:7	9	->
LEAF_NODE	4614:9	4614:9	9	pdf_imagebox
LEAF_NODE	4614:21	4614:21	9	.
LEAF_NODE	4614:22	4614:22	9	y2
LEAF_NODE	4615:4	4615:4	9	-
LEAF_NODE	4615:6	4615:6	9	(
LEAF_NODE	4615:7	4615:7	9	(
LEAF_NODE	4615:8	4615:8	9	float
LEAF_NODE	4615:13	4615:13	9	)
LEAF_NODE	4615:14	4615:14	9	(
LEAF_NODE	4615:15	4615:15	9	t2p
LEAF_NODE	4615:18	4615:18	9	->
LEAF_NODE	4615:20	4615:20	9	pdf_imagelength
LEAF_NODE	4615:36	4615:36	9	*
LEAF_NODE	4615:38	4615:38	9	i2
LEAF_NODE	4615:41	4615:41	9	*
LEAF_NODE	4615:43	4615:43	9	tilelength
LEAF_NODE	4615:53	4615:53	9	)
LEAF_NODE	4616:4	4616:4	9	/
LEAF_NODE	4616:6	4616:6	9	(
LEAF_NODE	4616:7	4616:7	9	float
LEAF_NODE	4616:12	4616:12	9	)
LEAF_NODE	4616:13	4616:13	9	t2p
LEAF_NODE	4616:16	4616:16	9	->
LEAF_NODE	4616:18	4616:18	9	tiff_length
LEAF_NODE	4616:29	4616:29	9	)
LEAF_NODE	4616:30	4616:30	9	;
LEAF_NODE	4617:2	4617:2	8	}
EXPR_STATEMENT	4618:2	4618:41	6	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box ) ;
EXPR	4618:2	4618:2	7	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box )
ASSIGN	4618:2	4618:7	8	boxp = & ( tiles [ i2 * tilecountx + i ] . tile_box )
LVAL	4618:2	4618:2	9	boxp
FIELD	4618:2	4618:2	10	boxp
LEAF_NODE	4618:2	4618:2	11	boxp
ASSIGN_OP	4618:6	4618:6	9	=
LEAF_NODE	4618:6	4618:6	10	=
RVAL	4618:7	4618:7	9	& ( tiles [ i2 * tilecountx + i ] . tile_box )
UNARY_EXPR	4618:7	4618:40	10	& ( tiles [ i2 * tilecountx + i ] . tile_box )
UNARY_OPERATOR	4618:7	4618:7	11	&
LEAF_NODE	4618:7	4618:7	12	&
LEAF_NODE	4618:8	4618:8	11	(
FIELD	4618:9	4618:32	11	tiles [ i2 * tilecountx + i ] . tile_box
LEAF_NODE	4618:9	4618:9	12	tiles
LEAF_NODE	4618:14	4618:14	12	[
EXPR	4618:15	4618:29	12	i2 * tilecountx + i
FIELD	4618:15	4618:15	13	i2
LEAF_NODE	4618:15	4618:15	14	i2
LEAF_NODE	4618:17	4618:17	13	*
FIELD	4618:18	4618:18	13	tilecountx
LEAF_NODE	4618:18	4618:18	14	tilecountx
LEAF_NODE	4618:28	4618:28	13	+
FIELD	4618:29	4618:29	13	i
LEAF_NODE	4618:29	4618:29	14	i
LEAF_NODE	4618:30	4618:30	12	]
LEAF_NODE	4618:31	4618:31	12	.
LEAF_NODE	4618:32	4618:32	12	tile_box
LEAF_NODE	4618:40	4618:40	11	)
LEAF_NODE	4618:41	4618:41	7	;
LEAF_NODE	4619:2	4619:2	6	boxp
LEAF_NODE	4619:6	4619:6	6	->
LEAF_NODE	4619:8	4619:8	6	x1
LEAF_NODE	4619:11	4619:11	6	=
LEAF_NODE	4620:3	4620:3	6	t2p
LEAF_NODE	4620:6	4620:6	6	->
LEAF_NODE	4620:8	4620:8	6	pdf_imagebox
LEAF_NODE	4620:20	4620:20	6	.
LEAF_NODE	4620:21	4620:21	6	x1
LEAF_NODE	4621:3	4621:3	6	+
LEAF_NODE	4621:5	4621:5	6	(
LEAF_NODE	4621:6	4621:6	6	(
LEAF_NODE	4621:7	4621:7	6	float
LEAF_NODE	4621:12	4621:12	6	)
LEAF_NODE	4621:13	4621:13	6	(
LEAF_NODE	4621:14	4621:14	6	t2p
LEAF_NODE	4621:17	4621:17	6	->
LEAF_NODE	4621:19	4621:19	6	pdf_imagewidth
LEAF_NODE	4621:34	4621:34	6	*
LEAF_NODE	4621:36	4621:36	6	i
LEAF_NODE	4621:38	4621:38	6	*
LEAF_NODE	4621:40	4621:40	6	tilewidth
LEAF_NODE	4621:49	4621:49	6	)
LEAF_NODE	4622:3	4622:3	6	/
LEAF_NODE	4622:5	4622:5	6	(
LEAF_NODE	4622:6	4622:6	6	float
LEAF_NODE	4622:11	4622:11	6	)
LEAF_NODE	4622:12	4622:12	6	t2p
LEAF_NODE	4622:15	4622:15	6	->
LEAF_NODE	4622:17	4622:17	6	tiff_width
LEAF_NODE	4622:27	4622:27	6	)
LEAF_NODE	4622:28	4622:28	6	;
EXPR_STATEMENT	4623:2	4623:33	6	boxp -> x2 = t2p -> pdf_imagebox . x2 ;
EXPR	4623:2	4623:2	7	boxp -> x2 = t2p -> pdf_imagebox . x2
ASSIGN	4623:2	4623:13	8	boxp -> x2 = t2p -> pdf_imagebox . x2
LVAL	4623:2	4623:2	9	boxp -> x2
FIELD	4623:2	4623:8	10	boxp -> x2
LEAF_NODE	4623:2	4623:2	11	boxp
LEAF_NODE	4623:6	4623:6	11	->
LEAF_NODE	4623:8	4623:8	11	x2
ASSIGN_OP	4623:11	4623:11	9	=
LEAF_NODE	4623:11	4623:11	10	=
RVAL	4623:13	4623:13	9	t2p -> pdf_imagebox . x2
FIELD	4623:13	4623:31	10	t2p -> pdf_imagebox . x2
LEAF_NODE	4623:13	4623:13	11	t2p
LEAF_NODE	4623:16	4623:16	11	->
LEAF_NODE	4623:18	4623:18	11	pdf_imagebox
LEAF_NODE	4623:30	4623:30	11	.
LEAF_NODE	4623:31	4623:31	11	x2
LEAF_NODE	4623:33	4623:33	7	;
EXPR_STATEMENT	4624:2	4624:33	6	boxp -> y1 = t2p -> pdf_imagebox . y1 ;
EXPR	4624:2	4624:2	7	boxp -> y1 = t2p -> pdf_imagebox . y1
ASSIGN	4624:2	4624:13	8	boxp -> y1 = t2p -> pdf_imagebox . y1
LVAL	4624:2	4624:2	9	boxp -> y1
FIELD	4624:2	4624:8	10	boxp -> y1
LEAF_NODE	4624:2	4624:2	11	boxp
LEAF_NODE	4624:6	4624:6	11	->
LEAF_NODE	4624:8	4624:8	11	y1
ASSIGN_OP	4624:11	4624:11	9	=
LEAF_NODE	4624:11	4624:11	10	=
RVAL	4624:13	4624:13	9	t2p -> pdf_imagebox . y1
FIELD	4624:13	4624:31	10	t2p -> pdf_imagebox . y1
LEAF_NODE	4624:13	4624:13	11	t2p
LEAF_NODE	4624:16	4624:16	11	->
LEAF_NODE	4624:18	4624:18	11	pdf_imagebox
LEAF_NODE	4624:30	4624:30	11	.
LEAF_NODE	4624:31	4624:31	11	y1
LEAF_NODE	4624:33	4624:33	7	;
LEAF_NODE	4625:2	4625:2	6	boxp
LEAF_NODE	4625:6	4625:6	6	->
LEAF_NODE	4625:8	4625:8	6	y2
LEAF_NODE	4625:11	4625:11	6	=
LEAF_NODE	4626:3	4626:3	6	t2p
LEAF_NODE	4626:6	4626:6	6	->
LEAF_NODE	4626:8	4626:8	6	pdf_imagebox
LEAF_NODE	4626:20	4626:20	6	.
LEAF_NODE	4626:21	4626:21	6	y2
LEAF_NODE	4627:3	4627:3	6	-
LEAF_NODE	4627:5	4627:5	6	(
LEAF_NODE	4627:6	4627:6	6	(
LEAF_NODE	4627:7	4627:7	6	float
LEAF_NODE	4627:12	4627:12	6	)
LEAF_NODE	4627:13	4627:13	6	(
LEAF_NODE	4627:14	4627:14	6	t2p
LEAF_NODE	4627:17	4627:17	6	->
LEAF_NODE	4627:19	4627:19	6	pdf_imagelength
LEAF_NODE	4627:35	4627:35	6	*
LEAF_NODE	4627:37	4627:37	6	i2
LEAF_NODE	4627:40	4627:40	6	*
LEAF_NODE	4627:42	4627:42	6	tilelength
LEAF_NODE	4627:52	4627:52	6	)
LEAF_NODE	4628:3	4628:3	6	/
LEAF_NODE	4628:5	4628:5	6	(
LEAF_NODE	4628:6	4628:6	6	float
LEAF_NODE	4628:11	4628:11	6	)
LEAF_NODE	4628:12	4628:12	6	t2p
LEAF_NODE	4628:15	4628:15	6	->
LEAF_NODE	4628:17	4628:17	6	tiff_length
LEAF_NODE	4628:28	4628:28	6	)
LEAF_NODE	4628:29	4628:29	6	;
LEAF_NODE	4629:1	4629:1	5	}
SELECTION	4630:1	4630:57	3	
KEYWORD	4630:1	4630:1	4	if
LEAF_NODE	4630:1	4630:1	5	if
LEAF_NODE	4630:3	4630:3	4	(
CONDITION	4630:4	4630:4	4	t2p -> tiff_orientation == 0 || t2p -> tiff_orientation == 1
EXPR	4630:4	4630:4	5	t2p -> tiff_orientation == 0 || t2p -> tiff_orientation == 1
OR	4630:4	4630:32	6	t2p -> tiff_orientation == 0 || t2p -> tiff_orientation == 1
EXPR	4630:4	4630:27	7	t2p -> tiff_orientation == 0
FIELD	4630:4	4630:9	8	t2p -> tiff_orientation
LEAF_NODE	4630:4	4630:4	9	t2p
LEAF_NODE	4630:7	4630:7	9	->
LEAF_NODE	4630:9	4630:9	9	tiff_orientation
EQ_OPERATOR	4630:25	4630:25	8	==
LEAF_NODE	4630:25	4630:25	9	==
FIELD	4630:27	4630:27	8	0
LEAF_NODE	4630:27	4630:27	9	0
LEAF_NODE	4630:29	4630:29	7	||
EXPR	4630:32	4630:55	7	t2p -> tiff_orientation == 1
FIELD	4630:32	4630:37	8	t2p -> tiff_orientation
LEAF_NODE	4630:32	4630:32	9	t2p
LEAF_NODE	4630:35	4630:35	9	->
LEAF_NODE	4630:37	4630:37	9	tiff_orientation
EQ_OPERATOR	4630:53	4630:53	8	==
LEAF_NODE	4630:53	4630:53	9	==
FIELD	4630:55	4630:55	8	1
LEAF_NODE	4630:55	4630:55	9	1
LEAF_NODE	4630:56	4630:56	4	)
STATEMENTS	4630:57	4635:1	4	
LEAF_NODE	4630:57	4630:57	5	{
STATEMENTS	4631:2	4634:2	5	
ITERATION	4631:2	4631:65	6	
KEYWORD	4631:2	4631:2	7	for
LEAF_NODE	4631:2	4631:2	8	for
LEAF_NODE	4631:5	4631:5	7	(
FOR_INIT	4631:6	4631:9	7	i = 0 ;
EXPR	4631:6	4631:6	8	i = 0
ASSIGN	4631:6	4631:8	9	i = 0
LVAL	4631:6	4631:6	10	i
FIELD	4631:6	4631:6	11	i
LEAF_NODE	4631:6	4631:6	12	i
ASSIGN_OP	4631:7	4631:7	10	=
LEAF_NODE	4631:7	4631:7	11	=
RVAL	4631:8	4631:8	10	0
FIELD	4631:8	4631:8	11	0
LEAF_NODE	4631:8	4631:8	12	0
LEAF_NODE	4631:9	4631:9	8	;
CONDITION	4631:10	4631:10	7	i < ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecount
EXPR	4631:10	4631:45	8	i < ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecount
FIELD	4631:10	4631:10	9	i
LEAF_NODE	4631:10	4631:10	10	i
REL_OPERATOR	4631:11	4631:11	9	<
LEAF_NODE	4631:11	4631:11	10	<
LEAF_NODE	4631:12	4631:12	9	(
FIELD	4631:13	4631:42	9	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4631:13	4631:13	10	t2p
LEAF_NODE	4631:16	4631:16	10	->
LEAF_NODE	4631:18	4631:18	10	tiff_tiles
LEAF_NODE	4631:28	4631:28	10	[
EXPR	4631:29	4631:29	10	t2p -> pdf_page
FIELD	4631:29	4631:34	11	t2p -> pdf_page
LEAF_NODE	4631:29	4631:29	12	t2p
LEAF_NODE	4631:32	4631:32	12	->
LEAF_NODE	4631:34	4631:34	12	pdf_page
LEAF_NODE	4631:42	4631:42	10	]
LEAF_NODE	4631:43	4631:43	9	)
LEAF_NODE	4631:44	4631:44	9	.
LEAF_NODE	4631:45	4631:45	9	tiles_tilecount
LEAF_NODE	4631:60	4631:60	7	;
FOR_EXPR	4631:61	4631:61	7	i ++
EXPR	4631:61	4631:61	8	i ++
FIELD	4631:61	4631:62	9	i ++
LEAF_NODE	4631:61	4631:61	10	i
LEAF_NODE	4631:62	4631:62	10	++
LEAF_NODE	4631:64	4631:64	7	)
STATEMENTS	4631:65	4633:2	7	
LEAF_NODE	4631:65	4631:65	8	{
STATEMENTS	4632:3	4632:3	8	
EXPR_STATEMENT	4632:3	4632:57	9	t2p_compose_pdf_page_orient ( & ( tiles [ i ] . tile_box ) , 0 ) ;
EXPR	4632:3	4632:3	10	t2p_compose_pdf_page_orient ( & ( tiles [ i ] . tile_box ) , 0 )
FUNCTION_CALL	4632:3	4632:56	11	t2p_compose_pdf_page_orient ( & ( tiles [ i ] . tile_box ) , 0 )
CALLEE	4632:3	4632:3	12	t2p_compose_pdf_page_orient
LEAF_NODE	4632:3	4632:3	13	t2p_compose_pdf_page_orient
LEAF_NODE	4632:30	4632:30	12	(
ARGUMENT	4632:32	4632:32	12	& ( tiles [ i ] . tile_box )
UNARY_EXPR	4632:32	4632:51	13	& ( tiles [ i ] . tile_box )
UNARY_OPERATOR	4632:32	4632:32	14	&
LEAF_NODE	4632:32	4632:32	15	&
LEAF_NODE	4632:33	4632:33	14	(
FIELD	4632:34	4632:43	14	tiles [ i ] . tile_box
LEAF_NODE	4632:34	4632:34	15	tiles
LEAF_NODE	4632:39	4632:39	15	[
EXPR	4632:40	4632:40	15	i
FIELD	4632:40	4632:40	16	i
LEAF_NODE	4632:40	4632:40	17	i
LEAF_NODE	4632:41	4632:41	15	]
LEAF_NODE	4632:42	4632:42	15	.
LEAF_NODE	4632:43	4632:43	15	tile_box
LEAF_NODE	4632:51	4632:51	14	)
LEAF_NODE	4632:53	4632:53	12	,
ARGUMENT	4632:55	4632:55	12	0
FIELD	4632:55	4632:55	13	0
LEAF_NODE	4632:55	4632:55	14	0
LEAF_NODE	4632:56	4632:56	12	)
LEAF_NODE	4632:57	4632:57	10	;
LEAF_NODE	4633:2	4633:2	8	}
JUMP_STATEMENT	4634:2	4634:8	6	return DESTINATION ;
KEYWORD	4634:2	4634:2	7	return
LEAF_NODE	4634:2	4634:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4634:8	4634:8	7	;
LEAF_NODE	4635:1	4635:1	5	}
ITERATION	4636:1	4636:64	3	
KEYWORD	4636:1	4636:1	4	for
LEAF_NODE	4636:1	4636:1	5	for
LEAF_NODE	4636:4	4636:4	4	(
FOR_INIT	4636:5	4636:8	4	i = 0 ;
EXPR	4636:5	4636:5	5	i = 0
ASSIGN	4636:5	4636:7	6	i = 0
LVAL	4636:5	4636:5	7	i
FIELD	4636:5	4636:5	8	i
LEAF_NODE	4636:5	4636:5	9	i
ASSIGN_OP	4636:6	4636:6	7	=
LEAF_NODE	4636:6	4636:6	8	=
RVAL	4636:7	4636:7	7	0
FIELD	4636:7	4636:7	8	0
LEAF_NODE	4636:7	4636:7	9	0
LEAF_NODE	4636:8	4636:8	5	;
CONDITION	4636:9	4636:9	4	i < ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecount
EXPR	4636:9	4636:44	5	i < ( t2p -> tiff_tiles [ t2p -> pdf_page ] ) . tiles_tilecount
FIELD	4636:9	4636:9	6	i
LEAF_NODE	4636:9	4636:9	7	i
REL_OPERATOR	4636:10	4636:10	6	<
LEAF_NODE	4636:10	4636:10	7	<
LEAF_NODE	4636:11	4636:11	6	(
FIELD	4636:12	4636:41	6	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4636:12	4636:12	7	t2p
LEAF_NODE	4636:15	4636:15	7	->
LEAF_NODE	4636:17	4636:17	7	tiff_tiles
LEAF_NODE	4636:27	4636:27	7	[
EXPR	4636:28	4636:28	7	t2p -> pdf_page
FIELD	4636:28	4636:33	8	t2p -> pdf_page
LEAF_NODE	4636:28	4636:28	9	t2p
LEAF_NODE	4636:31	4636:31	9	->
LEAF_NODE	4636:33	4636:33	9	pdf_page
LEAF_NODE	4636:41	4636:41	7	]
LEAF_NODE	4636:42	4636:42	6	)
LEAF_NODE	4636:43	4636:43	6	.
LEAF_NODE	4636:44	4636:44	6	tiles_tilecount
LEAF_NODE	4636:59	4636:59	4	;
FOR_EXPR	4636:60	4636:60	4	i ++
EXPR	4636:60	4636:60	5	i ++
FIELD	4636:60	4636:61	6	i ++
LEAF_NODE	4636:60	4636:60	7	i
LEAF_NODE	4636:61	4636:61	7	++
LEAF_NODE	4636:63	4636:63	4	)
STATEMENTS	4636:64	4670:1	4	
LEAF_NODE	4636:64	4636:64	5	{
STATEMENTS	4637:2	4666:4	5	
EXPR_STATEMENT	4637:2	4637:27	6	boxp = & ( tiles [ i ] . tile_box ) ;
EXPR	4637:2	4637:2	7	boxp = & ( tiles [ i ] . tile_box )
ASSIGN	4637:2	4637:7	8	boxp = & ( tiles [ i ] . tile_box )
LVAL	4637:2	4637:2	9	boxp
FIELD	4637:2	4637:2	10	boxp
LEAF_NODE	4637:2	4637:2	11	boxp
ASSIGN_OP	4637:6	4637:6	9	=
LEAF_NODE	4637:6	4637:6	10	=
RVAL	4637:7	4637:7	9	& ( tiles [ i ] . tile_box )
UNARY_EXPR	4637:7	4637:26	10	& ( tiles [ i ] . tile_box )
UNARY_OPERATOR	4637:7	4637:7	11	&
LEAF_NODE	4637:7	4637:7	12	&
LEAF_NODE	4637:8	4637:8	11	(
FIELD	4637:9	4637:18	11	tiles [ i ] . tile_box
LEAF_NODE	4637:9	4637:9	12	tiles
LEAF_NODE	4637:14	4637:14	12	[
EXPR	4637:15	4637:15	12	i
FIELD	4637:15	4637:15	13	i
LEAF_NODE	4637:15	4637:15	14	i
LEAF_NODE	4637:16	4637:16	12	]
LEAF_NODE	4637:17	4637:17	12	.
LEAF_NODE	4637:18	4637:18	12	tile_box
LEAF_NODE	4637:26	4637:26	11	)
LEAF_NODE	4637:27	4637:27	7	;
EXPR_STATEMENT	4638:2	4638:34	6	boxp -> x1 -= t2p -> pdf_imagebox . x1 ;
EXPR	4638:2	4638:2	7	boxp -> x1 -= t2p -> pdf_imagebox . x1
ASSIGN	4638:2	4638:14	8	boxp -> x1 -= t2p -> pdf_imagebox . x1
LVAL	4638:2	4638:2	9	boxp -> x1
FIELD	4638:2	4638:8	10	boxp -> x1
LEAF_NODE	4638:2	4638:2	11	boxp
LEAF_NODE	4638:6	4638:6	11	->
LEAF_NODE	4638:8	4638:8	11	x1
ASSIGN_OP	4638:11	4638:11	9	-=
LEAF_NODE	4638:11	4638:11	10	-=
RVAL	4638:14	4638:14	9	t2p -> pdf_imagebox . x1
FIELD	4638:14	4638:32	10	t2p -> pdf_imagebox . x1
LEAF_NODE	4638:14	4638:14	11	t2p
LEAF_NODE	4638:17	4638:17	11	->
LEAF_NODE	4638:19	4638:19	11	pdf_imagebox
LEAF_NODE	4638:31	4638:31	11	.
LEAF_NODE	4638:32	4638:32	11	x1
LEAF_NODE	4638:34	4638:34	7	;
EXPR_STATEMENT	4639:2	4639:34	6	boxp -> x2 -= t2p -> pdf_imagebox . x1 ;
EXPR	4639:2	4639:2	7	boxp -> x2 -= t2p -> pdf_imagebox . x1
ASSIGN	4639:2	4639:14	8	boxp -> x2 -= t2p -> pdf_imagebox . x1
LVAL	4639:2	4639:2	9	boxp -> x2
FIELD	4639:2	4639:8	10	boxp -> x2
LEAF_NODE	4639:2	4639:2	11	boxp
LEAF_NODE	4639:6	4639:6	11	->
LEAF_NODE	4639:8	4639:8	11	x2
ASSIGN_OP	4639:11	4639:11	9	-=
LEAF_NODE	4639:11	4639:11	10	-=
RVAL	4639:14	4639:14	9	t2p -> pdf_imagebox . x1
FIELD	4639:14	4639:32	10	t2p -> pdf_imagebox . x1
LEAF_NODE	4639:14	4639:14	11	t2p
LEAF_NODE	4639:17	4639:17	11	->
LEAF_NODE	4639:19	4639:19	11	pdf_imagebox
LEAF_NODE	4639:31	4639:31	11	.
LEAF_NODE	4639:32	4639:32	11	x1
LEAF_NODE	4639:34	4639:34	7	;
EXPR_STATEMENT	4640:2	4640:34	6	boxp -> y1 -= t2p -> pdf_imagebox . y1 ;
EXPR	4640:2	4640:2	7	boxp -> y1 -= t2p -> pdf_imagebox . y1
ASSIGN	4640:2	4640:14	8	boxp -> y1 -= t2p -> pdf_imagebox . y1
LVAL	4640:2	4640:2	9	boxp -> y1
FIELD	4640:2	4640:8	10	boxp -> y1
LEAF_NODE	4640:2	4640:2	11	boxp
LEAF_NODE	4640:6	4640:6	11	->
LEAF_NODE	4640:8	4640:8	11	y1
ASSIGN_OP	4640:11	4640:11	9	-=
LEAF_NODE	4640:11	4640:11	10	-=
RVAL	4640:14	4640:14	9	t2p -> pdf_imagebox . y1
FIELD	4640:14	4640:32	10	t2p -> pdf_imagebox . y1
LEAF_NODE	4640:14	4640:14	11	t2p
LEAF_NODE	4640:17	4640:17	11	->
LEAF_NODE	4640:19	4640:19	11	pdf_imagebox
LEAF_NODE	4640:31	4640:31	11	.
LEAF_NODE	4640:32	4640:32	11	y1
LEAF_NODE	4640:34	4640:34	7	;
EXPR_STATEMENT	4641:2	4641:34	6	boxp -> y2 -= t2p -> pdf_imagebox . y1 ;
EXPR	4641:2	4641:2	7	boxp -> y2 -= t2p -> pdf_imagebox . y1
ASSIGN	4641:2	4641:14	8	boxp -> y2 -= t2p -> pdf_imagebox . y1
LVAL	4641:2	4641:2	9	boxp -> y2
FIELD	4641:2	4641:8	10	boxp -> y2
LEAF_NODE	4641:2	4641:2	11	boxp
LEAF_NODE	4641:6	4641:6	11	->
LEAF_NODE	4641:8	4641:8	11	y2
ASSIGN_OP	4641:11	4641:11	9	-=
LEAF_NODE	4641:11	4641:11	10	-=
RVAL	4641:14	4641:14	9	t2p -> pdf_imagebox . y1
FIELD	4641:14	4641:32	10	t2p -> pdf_imagebox . y1
LEAF_NODE	4641:14	4641:14	11	t2p
LEAF_NODE	4641:17	4641:17	11	->
LEAF_NODE	4641:19	4641:19	11	pdf_imagebox
LEAF_NODE	4641:31	4641:31	11	.
LEAF_NODE	4641:32	4641:32	11	y1
LEAF_NODE	4641:34	4641:34	7	;
SELECTION	4642:2	4642:58	6	
KEYWORD	4642:2	4642:2	7	if
LEAF_NODE	4642:2	4642:2	8	if
LEAF_NODE	4642:4	4642:4	7	(
CONDITION	4642:5	4642:5	7	t2p -> tiff_orientation == 2 || t2p -> tiff_orientation == 3
EXPR	4642:5	4642:5	8	t2p -> tiff_orientation == 2 || t2p -> tiff_orientation == 3
OR	4642:5	4642:33	9	t2p -> tiff_orientation == 2 || t2p -> tiff_orientation == 3
EXPR	4642:5	4642:28	10	t2p -> tiff_orientation == 2
FIELD	4642:5	4642:10	11	t2p -> tiff_orientation
LEAF_NODE	4642:5	4642:5	12	t2p
LEAF_NODE	4642:8	4642:8	12	->
LEAF_NODE	4642:10	4642:10	12	tiff_orientation
EQ_OPERATOR	4642:26	4642:26	11	==
LEAF_NODE	4642:26	4642:26	12	==
FIELD	4642:28	4642:28	11	2
LEAF_NODE	4642:28	4642:28	12	2
LEAF_NODE	4642:30	4642:30	10	||
EXPR	4642:33	4642:56	10	t2p -> tiff_orientation == 3
FIELD	4642:33	4642:38	11	t2p -> tiff_orientation
LEAF_NODE	4642:33	4642:33	12	t2p
LEAF_NODE	4642:36	4642:36	12	->
LEAF_NODE	4642:38	4642:38	12	tiff_orientation
EQ_OPERATOR	4642:54	4642:54	11	==
LEAF_NODE	4642:54	4642:54	12	==
FIELD	4642:56	4642:56	11	3
LEAF_NODE	4642:56	4642:56	12	3
LEAF_NODE	4642:57	4642:57	7	)
STATEMENTS	4642:58	4645:2	7	
LEAF_NODE	4642:58	4642:58	8	{
STATEMENTS	4643:3	4644:3	8	
EXPR_STATEMENT	4643:3	4643:68	9	boxp -> x1 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x1 ;
EXPR	4643:3	4643:3	10	boxp -> x1 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x1
ASSIGN	4643:3	4643:14	11	boxp -> x1 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x1
LVAL	4643:3	4643:3	12	boxp -> x1
FIELD	4643:3	4643:9	13	boxp -> x1
LEAF_NODE	4643:3	4643:3	14	boxp
LEAF_NODE	4643:7	4643:7	14	->
LEAF_NODE	4643:9	4643:9	14	x1
ASSIGN_OP	4643:12	4643:12	12	=
LEAF_NODE	4643:12	4643:12	13	=
RVAL	4643:14	4643:60	12	t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x1
FIELD	4643:14	4643:32	13	t2p -> pdf_imagebox . x2
LEAF_NODE	4643:14	4643:14	14	t2p
LEAF_NODE	4643:17	4643:17	14	->
LEAF_NODE	4643:19	4643:19	14	pdf_imagebox
LEAF_NODE	4643:31	4643:31	14	.
LEAF_NODE	4643:32	4643:32	14	x2
LEAF_NODE	4643:35	4643:35	13	-
FIELD	4643:37	4643:55	13	t2p -> pdf_imagebox . x1
LEAF_NODE	4643:37	4643:37	14	t2p
LEAF_NODE	4643:40	4643:40	14	->
LEAF_NODE	4643:42	4643:42	14	pdf_imagebox
LEAF_NODE	4643:54	4643:54	14	.
LEAF_NODE	4643:55	4643:55	14	x1
LEAF_NODE	4643:58	4643:58	13	-
FIELD	4643:60	4643:66	13	boxp -> x1
LEAF_NODE	4643:60	4643:60	14	boxp
LEAF_NODE	4643:64	4643:64	14	->
LEAF_NODE	4643:66	4643:66	14	x1
LEAF_NODE	4643:68	4643:68	10	;
EXPR_STATEMENT	4644:3	4644:68	9	boxp -> x2 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x2 ;
EXPR	4644:3	4644:3	10	boxp -> x2 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x2
ASSIGN	4644:3	4644:14	11	boxp -> x2 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x2
LVAL	4644:3	4644:3	12	boxp -> x2
FIELD	4644:3	4644:9	13	boxp -> x2
LEAF_NODE	4644:3	4644:3	14	boxp
LEAF_NODE	4644:7	4644:7	14	->
LEAF_NODE	4644:9	4644:9	14	x2
ASSIGN_OP	4644:12	4644:12	12	=
LEAF_NODE	4644:12	4644:12	13	=
RVAL	4644:14	4644:60	12	t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x2
FIELD	4644:14	4644:32	13	t2p -> pdf_imagebox . x2
LEAF_NODE	4644:14	4644:14	14	t2p
LEAF_NODE	4644:17	4644:17	14	->
LEAF_NODE	4644:19	4644:19	14	pdf_imagebox
LEAF_NODE	4644:31	4644:31	14	.
LEAF_NODE	4644:32	4644:32	14	x2
LEAF_NODE	4644:35	4644:35	13	-
FIELD	4644:37	4644:55	13	t2p -> pdf_imagebox . x1
LEAF_NODE	4644:37	4644:37	14	t2p
LEAF_NODE	4644:40	4644:40	14	->
LEAF_NODE	4644:42	4644:42	14	pdf_imagebox
LEAF_NODE	4644:54	4644:54	14	.
LEAF_NODE	4644:55	4644:55	14	x1
LEAF_NODE	4644:58	4644:58	13	-
FIELD	4644:60	4644:66	13	boxp -> x2
LEAF_NODE	4644:60	4644:60	14	boxp
LEAF_NODE	4644:64	4644:64	14	->
LEAF_NODE	4644:66	4644:66	14	x2
LEAF_NODE	4644:68	4644:68	10	;
LEAF_NODE	4645:2	4645:2	8	}
SELECTION	4646:2	4646:58	6	
KEYWORD	4646:2	4646:2	7	if
LEAF_NODE	4646:2	4646:2	8	if
LEAF_NODE	4646:4	4646:4	7	(
CONDITION	4646:5	4646:5	7	t2p -> tiff_orientation == 3 || t2p -> tiff_orientation == 4
EXPR	4646:5	4646:5	8	t2p -> tiff_orientation == 3 || t2p -> tiff_orientation == 4
OR	4646:5	4646:33	9	t2p -> tiff_orientation == 3 || t2p -> tiff_orientation == 4
EXPR	4646:5	4646:28	10	t2p -> tiff_orientation == 3
FIELD	4646:5	4646:10	11	t2p -> tiff_orientation
LEAF_NODE	4646:5	4646:5	12	t2p
LEAF_NODE	4646:8	4646:8	12	->
LEAF_NODE	4646:10	4646:10	12	tiff_orientation
EQ_OPERATOR	4646:26	4646:26	11	==
LEAF_NODE	4646:26	4646:26	12	==
FIELD	4646:28	4646:28	11	3
LEAF_NODE	4646:28	4646:28	12	3
LEAF_NODE	4646:30	4646:30	10	||
EXPR	4646:33	4646:56	10	t2p -> tiff_orientation == 4
FIELD	4646:33	4646:38	11	t2p -> tiff_orientation
LEAF_NODE	4646:33	4646:33	12	t2p
LEAF_NODE	4646:36	4646:36	12	->
LEAF_NODE	4646:38	4646:38	12	tiff_orientation
EQ_OPERATOR	4646:54	4646:54	11	==
LEAF_NODE	4646:54	4646:54	12	==
FIELD	4646:56	4646:56	11	4
LEAF_NODE	4646:56	4646:56	12	4
LEAF_NODE	4646:57	4646:57	7	)
STATEMENTS	4646:58	4649:2	7	
LEAF_NODE	4646:58	4646:58	8	{
STATEMENTS	4647:3	4648:3	8	
EXPR_STATEMENT	4647:3	4647:68	9	boxp -> y1 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y1 ;
EXPR	4647:3	4647:3	10	boxp -> y1 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y1
ASSIGN	4647:3	4647:14	11	boxp -> y1 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y1
LVAL	4647:3	4647:3	12	boxp -> y1
FIELD	4647:3	4647:9	13	boxp -> y1
LEAF_NODE	4647:3	4647:3	14	boxp
LEAF_NODE	4647:7	4647:7	14	->
LEAF_NODE	4647:9	4647:9	14	y1
ASSIGN_OP	4647:12	4647:12	12	=
LEAF_NODE	4647:12	4647:12	13	=
RVAL	4647:14	4647:60	12	t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y1
FIELD	4647:14	4647:32	13	t2p -> pdf_imagebox . y2
LEAF_NODE	4647:14	4647:14	14	t2p
LEAF_NODE	4647:17	4647:17	14	->
LEAF_NODE	4647:19	4647:19	14	pdf_imagebox
LEAF_NODE	4647:31	4647:31	14	.
LEAF_NODE	4647:32	4647:32	14	y2
LEAF_NODE	4647:35	4647:35	13	-
FIELD	4647:37	4647:55	13	t2p -> pdf_imagebox . y1
LEAF_NODE	4647:37	4647:37	14	t2p
LEAF_NODE	4647:40	4647:40	14	->
LEAF_NODE	4647:42	4647:42	14	pdf_imagebox
LEAF_NODE	4647:54	4647:54	14	.
LEAF_NODE	4647:55	4647:55	14	y1
LEAF_NODE	4647:58	4647:58	13	-
FIELD	4647:60	4647:66	13	boxp -> y1
LEAF_NODE	4647:60	4647:60	14	boxp
LEAF_NODE	4647:64	4647:64	14	->
LEAF_NODE	4647:66	4647:66	14	y1
LEAF_NODE	4647:68	4647:68	10	;
EXPR_STATEMENT	4648:3	4648:68	9	boxp -> y2 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y2 ;
EXPR	4648:3	4648:3	10	boxp -> y2 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y2
ASSIGN	4648:3	4648:14	11	boxp -> y2 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y2
LVAL	4648:3	4648:3	12	boxp -> y2
FIELD	4648:3	4648:9	13	boxp -> y2
LEAF_NODE	4648:3	4648:3	14	boxp
LEAF_NODE	4648:7	4648:7	14	->
LEAF_NODE	4648:9	4648:9	14	y2
ASSIGN_OP	4648:12	4648:12	12	=
LEAF_NODE	4648:12	4648:12	13	=
RVAL	4648:14	4648:60	12	t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y2
FIELD	4648:14	4648:32	13	t2p -> pdf_imagebox . y2
LEAF_NODE	4648:14	4648:14	14	t2p
LEAF_NODE	4648:17	4648:17	14	->
LEAF_NODE	4648:19	4648:19	14	pdf_imagebox
LEAF_NODE	4648:31	4648:31	14	.
LEAF_NODE	4648:32	4648:32	14	y2
LEAF_NODE	4648:35	4648:35	13	-
FIELD	4648:37	4648:55	13	t2p -> pdf_imagebox . y1
LEAF_NODE	4648:37	4648:37	14	t2p
LEAF_NODE	4648:40	4648:40	14	->
LEAF_NODE	4648:42	4648:42	14	pdf_imagebox
LEAF_NODE	4648:54	4648:54	14	.
LEAF_NODE	4648:55	4648:55	14	y1
LEAF_NODE	4648:58	4648:58	13	-
FIELD	4648:60	4648:66	13	boxp -> y2
LEAF_NODE	4648:60	4648:60	14	boxp
LEAF_NODE	4648:64	4648:64	14	->
LEAF_NODE	4648:66	4648:66	14	y2
LEAF_NODE	4648:68	4648:68	10	;
LEAF_NODE	4649:2	4649:2	8	}
SELECTION	4650:2	4650:58	6	
KEYWORD	4650:2	4650:2	7	if
LEAF_NODE	4650:2	4650:2	8	if
LEAF_NODE	4650:4	4650:4	7	(
CONDITION	4650:5	4650:5	7	t2p -> tiff_orientation == 8 || t2p -> tiff_orientation == 5
EXPR	4650:5	4650:5	8	t2p -> tiff_orientation == 8 || t2p -> tiff_orientation == 5
OR	4650:5	4650:33	9	t2p -> tiff_orientation == 8 || t2p -> tiff_orientation == 5
EXPR	4650:5	4650:28	10	t2p -> tiff_orientation == 8
FIELD	4650:5	4650:10	11	t2p -> tiff_orientation
LEAF_NODE	4650:5	4650:5	12	t2p
LEAF_NODE	4650:8	4650:8	12	->
LEAF_NODE	4650:10	4650:10	12	tiff_orientation
EQ_OPERATOR	4650:26	4650:26	11	==
LEAF_NODE	4650:26	4650:26	12	==
FIELD	4650:28	4650:28	11	8
LEAF_NODE	4650:28	4650:28	12	8
LEAF_NODE	4650:30	4650:30	10	||
EXPR	4650:33	4650:56	10	t2p -> tiff_orientation == 5
FIELD	4650:33	4650:38	11	t2p -> tiff_orientation
LEAF_NODE	4650:33	4650:33	12	t2p
LEAF_NODE	4650:36	4650:36	12	->
LEAF_NODE	4650:38	4650:38	12	tiff_orientation
EQ_OPERATOR	4650:54	4650:54	11	==
LEAF_NODE	4650:54	4650:54	12	==
FIELD	4650:56	4650:56	11	5
LEAF_NODE	4650:56	4650:56	12	5
LEAF_NODE	4650:57	4650:57	7	)
STATEMENTS	4650:58	4653:2	7	
LEAF_NODE	4650:58	4650:58	8	{
STATEMENTS	4651:3	4652:3	8	
EXPR_STATEMENT	4651:3	4651:68	9	boxp -> y1 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y1 ;
EXPR	4651:3	4651:3	10	boxp -> y1 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y1
ASSIGN	4651:3	4651:14	11	boxp -> y1 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y1
LVAL	4651:3	4651:3	12	boxp -> y1
FIELD	4651:3	4651:9	13	boxp -> y1
LEAF_NODE	4651:3	4651:3	14	boxp
LEAF_NODE	4651:7	4651:7	14	->
LEAF_NODE	4651:9	4651:9	14	y1
ASSIGN_OP	4651:12	4651:12	12	=
LEAF_NODE	4651:12	4651:12	13	=
RVAL	4651:14	4651:60	12	t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y1
FIELD	4651:14	4651:32	13	t2p -> pdf_imagebox . y2
LEAF_NODE	4651:14	4651:14	14	t2p
LEAF_NODE	4651:17	4651:17	14	->
LEAF_NODE	4651:19	4651:19	14	pdf_imagebox
LEAF_NODE	4651:31	4651:31	14	.
LEAF_NODE	4651:32	4651:32	14	y2
LEAF_NODE	4651:35	4651:35	13	-
FIELD	4651:37	4651:55	13	t2p -> pdf_imagebox . y1
LEAF_NODE	4651:37	4651:37	14	t2p
LEAF_NODE	4651:40	4651:40	14	->
LEAF_NODE	4651:42	4651:42	14	pdf_imagebox
LEAF_NODE	4651:54	4651:54	14	.
LEAF_NODE	4651:55	4651:55	14	y1
LEAF_NODE	4651:58	4651:58	13	-
FIELD	4651:60	4651:66	13	boxp -> y1
LEAF_NODE	4651:60	4651:60	14	boxp
LEAF_NODE	4651:64	4651:64	14	->
LEAF_NODE	4651:66	4651:66	14	y1
LEAF_NODE	4651:68	4651:68	10	;
EXPR_STATEMENT	4652:3	4652:68	9	boxp -> y2 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y2 ;
EXPR	4652:3	4652:3	10	boxp -> y2 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y2
ASSIGN	4652:3	4652:14	11	boxp -> y2 = t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y2
LVAL	4652:3	4652:3	12	boxp -> y2
FIELD	4652:3	4652:9	13	boxp -> y2
LEAF_NODE	4652:3	4652:3	14	boxp
LEAF_NODE	4652:7	4652:7	14	->
LEAF_NODE	4652:9	4652:9	14	y2
ASSIGN_OP	4652:12	4652:12	12	=
LEAF_NODE	4652:12	4652:12	13	=
RVAL	4652:14	4652:60	12	t2p -> pdf_imagebox . y2 - t2p -> pdf_imagebox . y1 - boxp -> y2
FIELD	4652:14	4652:32	13	t2p -> pdf_imagebox . y2
LEAF_NODE	4652:14	4652:14	14	t2p
LEAF_NODE	4652:17	4652:17	14	->
LEAF_NODE	4652:19	4652:19	14	pdf_imagebox
LEAF_NODE	4652:31	4652:31	14	.
LEAF_NODE	4652:32	4652:32	14	y2
LEAF_NODE	4652:35	4652:35	13	-
FIELD	4652:37	4652:55	13	t2p -> pdf_imagebox . y1
LEAF_NODE	4652:37	4652:37	14	t2p
LEAF_NODE	4652:40	4652:40	14	->
LEAF_NODE	4652:42	4652:42	14	pdf_imagebox
LEAF_NODE	4652:54	4652:54	14	.
LEAF_NODE	4652:55	4652:55	14	y1
LEAF_NODE	4652:58	4652:58	13	-
FIELD	4652:60	4652:66	13	boxp -> y2
LEAF_NODE	4652:60	4652:60	14	boxp
LEAF_NODE	4652:64	4652:64	14	->
LEAF_NODE	4652:66	4652:66	14	y2
LEAF_NODE	4652:68	4652:68	10	;
LEAF_NODE	4653:2	4653:2	8	}
SELECTION	4654:2	4654:58	6	
KEYWORD	4654:2	4654:2	7	if
LEAF_NODE	4654:2	4654:2	8	if
LEAF_NODE	4654:4	4654:4	7	(
CONDITION	4654:5	4654:5	7	t2p -> tiff_orientation == 5 || t2p -> tiff_orientation == 6
EXPR	4654:5	4654:5	8	t2p -> tiff_orientation == 5 || t2p -> tiff_orientation == 6
OR	4654:5	4654:33	9	t2p -> tiff_orientation == 5 || t2p -> tiff_orientation == 6
EXPR	4654:5	4654:28	10	t2p -> tiff_orientation == 5
FIELD	4654:5	4654:10	11	t2p -> tiff_orientation
LEAF_NODE	4654:5	4654:5	12	t2p
LEAF_NODE	4654:8	4654:8	12	->
LEAF_NODE	4654:10	4654:10	12	tiff_orientation
EQ_OPERATOR	4654:26	4654:26	11	==
LEAF_NODE	4654:26	4654:26	12	==
FIELD	4654:28	4654:28	11	5
LEAF_NODE	4654:28	4654:28	12	5
LEAF_NODE	4654:30	4654:30	10	||
EXPR	4654:33	4654:56	10	t2p -> tiff_orientation == 6
FIELD	4654:33	4654:38	11	t2p -> tiff_orientation
LEAF_NODE	4654:33	4654:33	12	t2p
LEAF_NODE	4654:36	4654:36	12	->
LEAF_NODE	4654:38	4654:38	12	tiff_orientation
EQ_OPERATOR	4654:54	4654:54	11	==
LEAF_NODE	4654:54	4654:54	12	==
FIELD	4654:56	4654:56	11	6
LEAF_NODE	4654:56	4654:56	12	6
LEAF_NODE	4654:57	4654:57	7	)
STATEMENTS	4654:58	4657:2	7	
LEAF_NODE	4654:58	4654:58	8	{
STATEMENTS	4655:3	4656:3	8	
EXPR_STATEMENT	4655:3	4655:68	9	boxp -> x1 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x1 ;
EXPR	4655:3	4655:3	10	boxp -> x1 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x1
ASSIGN	4655:3	4655:14	11	boxp -> x1 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x1
LVAL	4655:3	4655:3	12	boxp -> x1
FIELD	4655:3	4655:9	13	boxp -> x1
LEAF_NODE	4655:3	4655:3	14	boxp
LEAF_NODE	4655:7	4655:7	14	->
LEAF_NODE	4655:9	4655:9	14	x1
ASSIGN_OP	4655:12	4655:12	12	=
LEAF_NODE	4655:12	4655:12	13	=
RVAL	4655:14	4655:60	12	t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x1
FIELD	4655:14	4655:32	13	t2p -> pdf_imagebox . x2
LEAF_NODE	4655:14	4655:14	14	t2p
LEAF_NODE	4655:17	4655:17	14	->
LEAF_NODE	4655:19	4655:19	14	pdf_imagebox
LEAF_NODE	4655:31	4655:31	14	.
LEAF_NODE	4655:32	4655:32	14	x2
LEAF_NODE	4655:35	4655:35	13	-
FIELD	4655:37	4655:55	13	t2p -> pdf_imagebox . x1
LEAF_NODE	4655:37	4655:37	14	t2p
LEAF_NODE	4655:40	4655:40	14	->
LEAF_NODE	4655:42	4655:42	14	pdf_imagebox
LEAF_NODE	4655:54	4655:54	14	.
LEAF_NODE	4655:55	4655:55	14	x1
LEAF_NODE	4655:58	4655:58	13	-
FIELD	4655:60	4655:66	13	boxp -> x1
LEAF_NODE	4655:60	4655:60	14	boxp
LEAF_NODE	4655:64	4655:64	14	->
LEAF_NODE	4655:66	4655:66	14	x1
LEAF_NODE	4655:68	4655:68	10	;
EXPR_STATEMENT	4656:3	4656:68	9	boxp -> x2 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x2 ;
EXPR	4656:3	4656:3	10	boxp -> x2 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x2
ASSIGN	4656:3	4656:14	11	boxp -> x2 = t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x2
LVAL	4656:3	4656:3	12	boxp -> x2
FIELD	4656:3	4656:9	13	boxp -> x2
LEAF_NODE	4656:3	4656:3	14	boxp
LEAF_NODE	4656:7	4656:7	14	->
LEAF_NODE	4656:9	4656:9	14	x2
ASSIGN_OP	4656:12	4656:12	12	=
LEAF_NODE	4656:12	4656:12	13	=
RVAL	4656:14	4656:60	12	t2p -> pdf_imagebox . x2 - t2p -> pdf_imagebox . x1 - boxp -> x2
FIELD	4656:14	4656:32	13	t2p -> pdf_imagebox . x2
LEAF_NODE	4656:14	4656:14	14	t2p
LEAF_NODE	4656:17	4656:17	14	->
LEAF_NODE	4656:19	4656:19	14	pdf_imagebox
LEAF_NODE	4656:31	4656:31	14	.
LEAF_NODE	4656:32	4656:32	14	x2
LEAF_NODE	4656:35	4656:35	13	-
FIELD	4656:37	4656:55	13	t2p -> pdf_imagebox . x1
LEAF_NODE	4656:37	4656:37	14	t2p
LEAF_NODE	4656:40	4656:40	14	->
LEAF_NODE	4656:42	4656:42	14	pdf_imagebox
LEAF_NODE	4656:54	4656:54	14	.
LEAF_NODE	4656:55	4656:55	14	x1
LEAF_NODE	4656:58	4656:58	13	-
FIELD	4656:60	4656:66	13	boxp -> x2
LEAF_NODE	4656:60	4656:60	14	boxp
LEAF_NODE	4656:64	4656:64	14	->
LEAF_NODE	4656:66	4656:66	14	x2
LEAF_NODE	4656:68	4656:68	10	;
LEAF_NODE	4657:2	4657:2	8	}
SELECTION	4658:2	4658:31	6	
KEYWORD	4658:2	4658:2	7	if
LEAF_NODE	4658:2	4658:2	8	if
LEAF_NODE	4658:4	4658:4	7	(
CONDITION	4658:5	4658:5	7	t2p -> tiff_orientation > 4
EXPR	4658:5	4658:29	8	t2p -> tiff_orientation > 4
FIELD	4658:5	4658:10	9	t2p -> tiff_orientation
LEAF_NODE	4658:5	4658:5	10	t2p
LEAF_NODE	4658:8	4658:8	10	->
LEAF_NODE	4658:10	4658:10	10	tiff_orientation
REL_OPERATOR	4658:27	4658:27	9	>
LEAF_NODE	4658:27	4658:27	10	>
FIELD	4658:29	4658:29	9	4
LEAF_NODE	4658:29	4658:29	10	4
LEAF_NODE	4658:30	4658:30	7	)
STATEMENTS	4658:31	4666:2	7	
LEAF_NODE	4658:31	4658:31	8	{
STATEMENTS	4659:3	4665:3	8	
EXPR_STATEMENT	4659:3	4659:13	9	f = boxp -> x1 ;
EXPR	4659:3	4659:3	10	f = boxp -> x1
ASSIGN	4659:3	4659:5	11	f = boxp -> x1
LVAL	4659:3	4659:3	12	f
FIELD	4659:3	4659:3	13	f
LEAF_NODE	4659:3	4659:3	14	f
ASSIGN_OP	4659:4	4659:4	12	=
LEAF_NODE	4659:4	4659:4	13	=
RVAL	4659:5	4659:5	12	boxp -> x1
FIELD	4659:5	4659:11	13	boxp -> x1
LEAF_NODE	4659:5	4659:5	14	boxp
LEAF_NODE	4659:9	4659:9	14	->
LEAF_NODE	4659:11	4659:11	14	x1
LEAF_NODE	4659:13	4659:13	10	;
EXPR_STATEMENT	4660:3	4660:22	9	boxp -> x1 = boxp -> y1 ;
EXPR	4660:3	4660:3	10	boxp -> x1 = boxp -> y1
ASSIGN	4660:3	4660:14	11	boxp -> x1 = boxp -> y1
LVAL	4660:3	4660:3	12	boxp -> x1
FIELD	4660:3	4660:9	13	boxp -> x1
LEAF_NODE	4660:3	4660:3	14	boxp
LEAF_NODE	4660:7	4660:7	14	->
LEAF_NODE	4660:9	4660:9	14	x1
ASSIGN_OP	4660:12	4660:12	12	=
LEAF_NODE	4660:12	4660:12	13	=
RVAL	4660:14	4660:14	12	boxp -> y1
FIELD	4660:14	4660:20	13	boxp -> y1
LEAF_NODE	4660:14	4660:14	14	boxp
LEAF_NODE	4660:18	4660:18	14	->
LEAF_NODE	4660:20	4660:20	14	y1
LEAF_NODE	4660:22	4660:22	10	;
EXPR_STATEMENT	4661:3	4661:15	9	boxp -> y1 = f ;
EXPR	4661:3	4661:3	10	boxp -> y1 = f
ASSIGN	4661:3	4661:14	11	boxp -> y1 = f
LVAL	4661:3	4661:3	12	boxp -> y1
FIELD	4661:3	4661:9	13	boxp -> y1
LEAF_NODE	4661:3	4661:3	14	boxp
LEAF_NODE	4661:7	4661:7	14	->
LEAF_NODE	4661:9	4661:9	14	y1
ASSIGN_OP	4661:12	4661:12	12	=
LEAF_NODE	4661:12	4661:12	13	=
RVAL	4661:14	4661:14	12	f
FIELD	4661:14	4661:14	13	f
LEAF_NODE	4661:14	4661:14	14	f
LEAF_NODE	4661:15	4661:15	10	;
EXPR_STATEMENT	4662:3	4662:13	9	f = boxp -> x2 ;
EXPR	4662:3	4662:3	10	f = boxp -> x2
ASSIGN	4662:3	4662:5	11	f = boxp -> x2
LVAL	4662:3	4662:3	12	f
FIELD	4662:3	4662:3	13	f
LEAF_NODE	4662:3	4662:3	14	f
ASSIGN_OP	4662:4	4662:4	12	=
LEAF_NODE	4662:4	4662:4	13	=
RVAL	4662:5	4662:5	12	boxp -> x2
FIELD	4662:5	4662:11	13	boxp -> x2
LEAF_NODE	4662:5	4662:5	14	boxp
LEAF_NODE	4662:9	4662:9	14	->
LEAF_NODE	4662:11	4662:11	14	x2
LEAF_NODE	4662:13	4662:13	10	;
EXPR_STATEMENT	4663:3	4663:22	9	boxp -> x2 = boxp -> y2 ;
EXPR	4663:3	4663:3	10	boxp -> x2 = boxp -> y2
ASSIGN	4663:3	4663:14	11	boxp -> x2 = boxp -> y2
LVAL	4663:3	4663:3	12	boxp -> x2
FIELD	4663:3	4663:9	13	boxp -> x2
LEAF_NODE	4663:3	4663:3	14	boxp
LEAF_NODE	4663:7	4663:7	14	->
LEAF_NODE	4663:9	4663:9	14	x2
ASSIGN_OP	4663:12	4663:12	12	=
LEAF_NODE	4663:12	4663:12	13	=
RVAL	4663:14	4663:14	12	boxp -> y2
FIELD	4663:14	4663:20	13	boxp -> y2
LEAF_NODE	4663:14	4663:14	14	boxp
LEAF_NODE	4663:18	4663:18	14	->
LEAF_NODE	4663:20	4663:20	14	y2
LEAF_NODE	4663:22	4663:22	10	;
EXPR_STATEMENT	4664:3	4664:15	9	boxp -> y2 = f ;
EXPR	4664:3	4664:3	10	boxp -> y2 = f
ASSIGN	4664:3	4664:14	11	boxp -> y2 = f
LVAL	4664:3	4664:3	12	boxp -> y2
FIELD	4664:3	4664:9	13	boxp -> y2
LEAF_NODE	4664:3	4664:3	14	boxp
LEAF_NODE	4664:7	4664:7	14	->
LEAF_NODE	4664:9	4664:9	14	y2
ASSIGN_OP	4664:12	4664:12	12	=
LEAF_NODE	4664:12	4664:12	13	=
RVAL	4664:14	4664:14	12	f
FIELD	4664:14	4664:14	13	f
LEAF_NODE	4664:14	4664:14	14	f
LEAF_NODE	4664:15	4664:15	10	;
EXPR_STATEMENT	4665:3	4665:64	9	t2p_compose_pdf_page_orient_flip ( boxp , t2p -> tiff_orientation ) ;
EXPR	4665:3	4665:3	10	t2p_compose_pdf_page_orient_flip ( boxp , t2p -> tiff_orientation )
FUNCTION_CALL	4665:3	4665:63	11	t2p_compose_pdf_page_orient_flip ( boxp , t2p -> tiff_orientation )
CALLEE	4665:3	4665:3	12	t2p_compose_pdf_page_orient_flip
LEAF_NODE	4665:3	4665:3	13	t2p_compose_pdf_page_orient_flip
LEAF_NODE	4665:35	4665:35	12	(
ARGUMENT	4665:36	4665:36	12	boxp
FIELD	4665:36	4665:36	13	boxp
LEAF_NODE	4665:36	4665:36	14	boxp
LEAF_NODE	4665:40	4665:40	12	,
ARGUMENT	4665:42	4665:42	12	t2p -> tiff_orientation
FIELD	4665:42	4665:47	13	t2p -> tiff_orientation
LEAF_NODE	4665:42	4665:42	14	t2p
LEAF_NODE	4665:45	4665:45	14	->
LEAF_NODE	4665:47	4665:47	14	tiff_orientation
LEAF_NODE	4665:63	4665:63	12	)
LEAF_NODE	4665:64	4665:64	10	;
LEAF_NODE	4666:2	4666:2	8	}
SELECTION	4666:4	4666:9	6	
KEYWORD	4666:4	4666:4	7	else
LEAF_NODE	4666:4	4666:4	8	else
STATEMENTS	4666:9	4668:2	7	
LEAF_NODE	4666:9	4666:9	8	{
STATEMENTS	4667:3	4667:3	8	
EXPR_STATEMENT	4667:3	4667:59	9	t2p_compose_pdf_page_orient ( boxp , t2p -> tiff_orientation ) ;
EXPR	4667:3	4667:3	10	t2p_compose_pdf_page_orient ( boxp , t2p -> tiff_orientation )
FUNCTION_CALL	4667:3	4667:58	11	t2p_compose_pdf_page_orient ( boxp , t2p -> tiff_orientation )
CALLEE	4667:3	4667:3	12	t2p_compose_pdf_page_orient
LEAF_NODE	4667:3	4667:3	13	t2p_compose_pdf_page_orient
LEAF_NODE	4667:30	4667:30	12	(
ARGUMENT	4667:31	4667:31	12	boxp
FIELD	4667:31	4667:31	13	boxp
LEAF_NODE	4667:31	4667:31	14	boxp
LEAF_NODE	4667:35	4667:35	12	,
ARGUMENT	4667:37	4667:37	12	t2p -> tiff_orientation
FIELD	4667:37	4667:42	13	t2p -> tiff_orientation
LEAF_NODE	4667:37	4667:37	14	t2p
LEAF_NODE	4667:40	4667:40	14	->
LEAF_NODE	4667:42	4667:42	14	tiff_orientation
LEAF_NODE	4667:58	4667:58	12	)
LEAF_NODE	4667:59	4667:59	10	;
LEAF_NODE	4668:2	4668:2	8	}
LEAF_NODE	4670:1	4670:1	5	}
JUMP_STATEMENT	4672:1	4672:7	3	return DESTINATION ;
KEYWORD	4672:1	4672:1	4	return
LEAF_NODE	4672:1	4672:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	4672:7	4672:7	4	;
LEAF_NODE	4673:0	4673:0	2	}
FUNCTION_DEF	4675:0	4748:0	1	
RETURN_TYPE	4675:0	4675:0	2	void
TYPE_NAME	4675:0	4675:0	3	void
LEAF_NODE	4675:0	4675:0	4	void
FUNCTION_NAME	4675:5	4675:5	2	t2p_compose_pdf_page_orient
LEAF_NODE	4675:5	4675:5	3	t2p_compose_pdf_page_orient
PARAMETER_LIST	4675:32	4675:66	2	( T2P_BOX * boxp , uint16 orientation )
LEAF_NODE	4675:32	4675:32	3	(
PARAMETER_DECL	4675:33	4675:42	3	T2P_BOX * boxp
TYPE	4675:33	4675:40	4	T2P_BOX *
TYPE_NAME	4675:33	4675:33	5	T2P_BOX
LEAF_NODE	4675:33	4675:33	6	T2P_BOX
POINTER	4675:40	4675:40	5	*
LEAF_NODE	4675:40	4675:40	6	*
NAME	4675:42	4675:42	4	boxp
LEAF_NODE	4675:42	4675:42	5	boxp
LEAF_NODE	4675:46	4675:46	3	,
PARAMETER_DECL	4675:48	4675:55	3	uint16 orientation
TYPE	4675:48	4675:48	4	uint16
TYPE_NAME	4675:48	4675:48	5	uint16
LEAF_NODE	4675:48	4675:48	6	uint16
NAME	4675:55	4675:55	4	orientation
LEAF_NODE	4675:55	4675:55	5	orientation
LEAF_NODE	4675:66	4675:66	3	)
LEAF_NODE	4675:67	4675:67	2	{
STATEMENTS	4677:1	4747:1	2	
SIMPLE_DECL	4677:1	4677:12	3	float [ 9 ] m1 ;
VAR_DECL	4677:1	4677:7	4	float [ 9 ] m1
TYPE	4677:1	4677:9	5	float [ 9 ]
TYPE_NAME	4677:1	4677:1	6	float
LEAF_NODE	4677:1	4677:1	7	float
TYPE_SUFFIX	4677:9	4677:11	6	[ 9 ]
LEAF_NODE	4677:9	4677:9	7	[
FIELD	4677:10	4677:10	7	9
LEAF_NODE	4677:10	4677:10	8	9
LEAF_NODE	4677:11	4677:11	7	]
NAME	4677:7	4677:7	5	m1
LEAF_NODE	4677:7	4677:7	6	m1
LEAF_NODE	4677:12	4677:12	4	;
SIMPLE_DECL	4678:1	4678:12	3	float f ; f = 0.0 ;
VAR_DECL	4678:1	4678:7	4	float f ; f = 0.0
TYPE	4678:1	4678:1	5	float
TYPE_NAME	4678:1	4678:1	6	float
LEAF_NODE	4678:1	4678:1	7	float
NAME	4678:7	4678:7	5	f
LEAF_NODE	4678:7	4678:7	6	f
LEAF_NODE	0:0	0:0	5	;
INIT	4678:7	4678:7	5	f = 0.0
ASSIGN	4678:7	4678:9	6	f = 0.0
LVAL	4678:7	4678:7	7	f
NAME	4678:7	4678:7	8	f
LEAF_NODE	4678:7	4678:7	9	f
ASSIGN_OP	4678:8	4678:8	7	=
LEAF_NODE	4678:8	4678:8	8	=
RVAL	4678:9	4678:9	7	0.0
FIELD	4678:9	4678:9	8	0.0
LEAF_NODE	4678:9	4678:9	9	0.0
LEAF_NODE	4678:12	4678:12	4	;
SELECTION	4680:1	4680:25	3	
KEYWORD	4680:1	4680:1	4	if
LEAF_NODE	4680:1	4680:1	5	if
LEAF_NODE	4680:3	4680:3	4	(
CONDITION	4680:5	4680:5	4	boxp -> x1 > boxp -> x2
EXPR	4680:5	4680:16	5	boxp -> x1 > boxp -> x2
FIELD	4680:5	4680:11	6	boxp -> x1
LEAF_NODE	4680:5	4680:5	7	boxp
LEAF_NODE	4680:9	4680:9	7	->
LEAF_NODE	4680:11	4680:11	7	x1
REL_OPERATOR	4680:14	4680:14	6	>
LEAF_NODE	4680:14	4680:14	7	>
FIELD	4680:16	4680:22	6	boxp -> x2
LEAF_NODE	4680:16	4680:16	7	boxp
LEAF_NODE	4680:20	4680:20	7	->
LEAF_NODE	4680:22	4680:22	7	x2
LEAF_NODE	4680:24	4680:24	4	)
STATEMENTS	4680:25	4684:1	4	
LEAF_NODE	4680:25	4680:25	5	{
STATEMENTS	4681:2	4683:2	5	
EXPR_STATEMENT	4681:2	4681:12	6	f = boxp -> x1 ;
EXPR	4681:2	4681:2	7	f = boxp -> x1
ASSIGN	4681:2	4681:4	8	f = boxp -> x1
LVAL	4681:2	4681:2	9	f
FIELD	4681:2	4681:2	10	f
LEAF_NODE	4681:2	4681:2	11	f
ASSIGN_OP	4681:3	4681:3	9	=
LEAF_NODE	4681:3	4681:3	10	=
RVAL	4681:4	4681:4	9	boxp -> x1
FIELD	4681:4	4681:10	10	boxp -> x1
LEAF_NODE	4681:4	4681:4	11	boxp
LEAF_NODE	4681:8	4681:8	11	->
LEAF_NODE	4681:10	4681:10	11	x1
LEAF_NODE	4681:12	4681:12	7	;
EXPR_STATEMENT	4682:2	4682:19	6	boxp -> x1 = boxp -> x2 ;
EXPR	4682:2	4682:2	7	boxp -> x1 = boxp -> x2
ASSIGN	4682:2	4682:11	8	boxp -> x1 = boxp -> x2
LVAL	4682:2	4682:2	9	boxp -> x1
FIELD	4682:2	4682:8	10	boxp -> x1
LEAF_NODE	4682:2	4682:2	11	boxp
LEAF_NODE	4682:6	4682:6	11	->
LEAF_NODE	4682:8	4682:8	11	x1
ASSIGN_OP	4682:10	4682:10	9	=
LEAF_NODE	4682:10	4682:10	10	=
RVAL	4682:11	4682:11	9	boxp -> x2
FIELD	4682:11	4682:17	10	boxp -> x2
LEAF_NODE	4682:11	4682:11	11	boxp
LEAF_NODE	4682:15	4682:15	11	->
LEAF_NODE	4682:17	4682:17	11	x2
LEAF_NODE	4682:19	4682:19	7	;
EXPR_STATEMENT	4683:2	4683:14	6	boxp -> x2 = f ;
EXPR	4683:2	4683:2	7	boxp -> x2 = f
ASSIGN	4683:2	4683:13	8	boxp -> x2 = f
LVAL	4683:2	4683:2	9	boxp -> x2
FIELD	4683:2	4683:8	10	boxp -> x2
LEAF_NODE	4683:2	4683:2	11	boxp
LEAF_NODE	4683:6	4683:6	11	->
LEAF_NODE	4683:8	4683:8	11	x2
ASSIGN_OP	4683:11	4683:11	9	=
LEAF_NODE	4683:11	4683:11	10	=
RVAL	4683:13	4683:13	9	f
FIELD	4683:13	4683:13	10	f
LEAF_NODE	4683:13	4683:13	11	f
LEAF_NODE	4683:14	4683:14	7	;
LEAF_NODE	4684:1	4684:1	5	}
SELECTION	4685:1	4685:25	3	
KEYWORD	4685:1	4685:1	4	if
LEAF_NODE	4685:1	4685:1	5	if
LEAF_NODE	4685:3	4685:3	4	(
CONDITION	4685:5	4685:5	4	boxp -> y1 > boxp -> y2
EXPR	4685:5	4685:16	5	boxp -> y1 > boxp -> y2
FIELD	4685:5	4685:11	6	boxp -> y1
LEAF_NODE	4685:5	4685:5	7	boxp
LEAF_NODE	4685:9	4685:9	7	->
LEAF_NODE	4685:11	4685:11	7	y1
REL_OPERATOR	4685:14	4685:14	6	>
LEAF_NODE	4685:14	4685:14	7	>
FIELD	4685:16	4685:22	6	boxp -> y2
LEAF_NODE	4685:16	4685:16	7	boxp
LEAF_NODE	4685:20	4685:20	7	->
LEAF_NODE	4685:22	4685:22	7	y2
LEAF_NODE	4685:24	4685:24	4	)
STATEMENTS	4685:25	4689:1	4	
LEAF_NODE	4685:25	4685:25	5	{
STATEMENTS	4686:2	4688:2	5	
EXPR_STATEMENT	4686:2	4686:12	6	f = boxp -> y1 ;
EXPR	4686:2	4686:2	7	f = boxp -> y1
ASSIGN	4686:2	4686:4	8	f = boxp -> y1
LVAL	4686:2	4686:2	9	f
FIELD	4686:2	4686:2	10	f
LEAF_NODE	4686:2	4686:2	11	f
ASSIGN_OP	4686:3	4686:3	9	=
LEAF_NODE	4686:3	4686:3	10	=
RVAL	4686:4	4686:4	9	boxp -> y1
FIELD	4686:4	4686:10	10	boxp -> y1
LEAF_NODE	4686:4	4686:4	11	boxp
LEAF_NODE	4686:8	4686:8	11	->
LEAF_NODE	4686:10	4686:10	11	y1
LEAF_NODE	4686:12	4686:12	7	;
EXPR_STATEMENT	4687:2	4687:19	6	boxp -> y1 = boxp -> y2 ;
EXPR	4687:2	4687:2	7	boxp -> y1 = boxp -> y2
ASSIGN	4687:2	4687:11	8	boxp -> y1 = boxp -> y2
LVAL	4687:2	4687:2	9	boxp -> y1
FIELD	4687:2	4687:8	10	boxp -> y1
LEAF_NODE	4687:2	4687:2	11	boxp
LEAF_NODE	4687:6	4687:6	11	->
LEAF_NODE	4687:8	4687:8	11	y1
ASSIGN_OP	4687:10	4687:10	9	=
LEAF_NODE	4687:10	4687:10	10	=
RVAL	4687:11	4687:11	9	boxp -> y2
FIELD	4687:11	4687:17	10	boxp -> y2
LEAF_NODE	4687:11	4687:11	11	boxp
LEAF_NODE	4687:15	4687:15	11	->
LEAF_NODE	4687:17	4687:17	11	y2
LEAF_NODE	4687:19	4687:19	7	;
EXPR_STATEMENT	4688:2	4688:14	6	boxp -> y2 = f ;
EXPR	4688:2	4688:2	7	boxp -> y2 = f
ASSIGN	4688:2	4688:13	8	boxp -> y2 = f
LVAL	4688:2	4688:2	9	boxp -> y2
FIELD	4688:2	4688:8	10	boxp -> y2
LEAF_NODE	4688:2	4688:2	11	boxp
LEAF_NODE	4688:6	4688:6	11	->
LEAF_NODE	4688:8	4688:8	11	y2
ASSIGN_OP	4688:11	4688:11	9	=
LEAF_NODE	4688:11	4688:11	10	=
RVAL	4688:13	4688:13	9	f
FIELD	4688:13	4688:13	10	f
LEAF_NODE	4688:13	4688:13	11	f
LEAF_NODE	4688:14	4688:14	7	;
LEAF_NODE	4689:1	4689:1	5	}
EXPR_STATEMENT	4690:1	4690:37	3	boxp -> mat [ 0 ] = m1 [ 0 ] = boxp -> x2 - boxp -> x1 ;
EXPR	4690:1	4690:1	4	boxp -> mat [ 0 ] = m1 [ 0 ] = boxp -> x2 - boxp -> x1
ASSIGN	4690:1	4690:14	5	boxp -> mat [ 0 ] = m1 [ 0 ] = boxp -> x2 - boxp -> x1
LVAL	4690:1	4690:1	6	boxp -> mat [ 0 ]
FIELD	4690:1	4690:12	7	boxp -> mat [ 0 ]
LEAF_NODE	4690:1	4690:1	8	boxp
LEAF_NODE	4690:5	4690:5	8	->
LEAF_NODE	4690:7	4690:7	8	mat
LEAF_NODE	4690:10	4690:10	8	[
EXPR	4690:11	4690:11	8	0
FIELD	4690:11	4690:11	9	0
LEAF_NODE	4690:11	4690:11	10	0
LEAF_NODE	4690:12	4690:12	8	]
ASSIGN_OP	4690:13	4690:13	6	=
LEAF_NODE	4690:13	4690:13	7	=
RVAL	4690:14	4690:14	6	m1 [ 0 ] = boxp -> x2 - boxp -> x1
ASSIGN	4690:14	4690:20	7	m1 [ 0 ] = boxp -> x2 - boxp -> x1
LVAL	4690:14	4690:14	8	m1 [ 0 ]
FIELD	4690:14	4690:18	9	m1 [ 0 ]
LEAF_NODE	4690:14	4690:14	10	m1
LEAF_NODE	4690:16	4690:16	10	[
EXPR	4690:17	4690:17	10	0
FIELD	4690:17	4690:17	11	0
LEAF_NODE	4690:17	4690:17	12	0
LEAF_NODE	4690:18	4690:18	10	]
ASSIGN_OP	4690:19	4690:19	8	=
LEAF_NODE	4690:19	4690:19	9	=
RVAL	4690:20	4690:29	8	boxp -> x2 - boxp -> x1
FIELD	4690:20	4690:26	9	boxp -> x2
LEAF_NODE	4690:20	4690:20	10	boxp
LEAF_NODE	4690:24	4690:24	10	->
LEAF_NODE	4690:26	4690:26	10	x2
LEAF_NODE	4690:28	4690:28	9	-
FIELD	4690:29	4690:35	9	boxp -> x1
LEAF_NODE	4690:29	4690:29	10	boxp
LEAF_NODE	4690:33	4690:33	10	->
LEAF_NODE	4690:35	4690:35	10	x1
LEAF_NODE	4690:37	4690:37	4	;
EXPR_STATEMENT	4691:1	4691:23	3	boxp -> mat [ 1 ] = m1 [ 1 ] = 0.0 ;
EXPR	4691:1	4691:1	4	boxp -> mat [ 1 ] = m1 [ 1 ] = 0.0
ASSIGN	4691:1	4691:14	5	boxp -> mat [ 1 ] = m1 [ 1 ] = 0.0
LVAL	4691:1	4691:1	6	boxp -> mat [ 1 ]
FIELD	4691:1	4691:12	7	boxp -> mat [ 1 ]
LEAF_NODE	4691:1	4691:1	8	boxp
LEAF_NODE	4691:5	4691:5	8	->
LEAF_NODE	4691:7	4691:7	8	mat
LEAF_NODE	4691:10	4691:10	8	[
EXPR	4691:11	4691:11	8	1
FIELD	4691:11	4691:11	9	1
LEAF_NODE	4691:11	4691:11	10	1
LEAF_NODE	4691:12	4691:12	8	]
ASSIGN_OP	4691:13	4691:13	6	=
LEAF_NODE	4691:13	4691:13	7	=
RVAL	4691:14	4691:14	6	m1 [ 1 ] = 0.0
ASSIGN	4691:14	4691:20	7	m1 [ 1 ] = 0.0
LVAL	4691:14	4691:14	8	m1 [ 1 ]
FIELD	4691:14	4691:18	9	m1 [ 1 ]
LEAF_NODE	4691:14	4691:14	10	m1
LEAF_NODE	4691:16	4691:16	10	[
EXPR	4691:17	4691:17	10	1
FIELD	4691:17	4691:17	11	1
LEAF_NODE	4691:17	4691:17	12	1
LEAF_NODE	4691:18	4691:18	10	]
ASSIGN_OP	4691:19	4691:19	8	=
LEAF_NODE	4691:19	4691:19	9	=
RVAL	4691:20	4691:20	8	0.0
FIELD	4691:20	4691:20	9	0.0
LEAF_NODE	4691:20	4691:20	10	0.0
LEAF_NODE	4691:23	4691:23	4	;
EXPR_STATEMENT	4692:1	4692:23	3	boxp -> mat [ 2 ] = m1 [ 2 ] = 0.0 ;
EXPR	4692:1	4692:1	4	boxp -> mat [ 2 ] = m1 [ 2 ] = 0.0
ASSIGN	4692:1	4692:14	5	boxp -> mat [ 2 ] = m1 [ 2 ] = 0.0
LVAL	4692:1	4692:1	6	boxp -> mat [ 2 ]
FIELD	4692:1	4692:12	7	boxp -> mat [ 2 ]
LEAF_NODE	4692:1	4692:1	8	boxp
LEAF_NODE	4692:5	4692:5	8	->
LEAF_NODE	4692:7	4692:7	8	mat
LEAF_NODE	4692:10	4692:10	8	[
EXPR	4692:11	4692:11	8	2
FIELD	4692:11	4692:11	9	2
LEAF_NODE	4692:11	4692:11	10	2
LEAF_NODE	4692:12	4692:12	8	]
ASSIGN_OP	4692:13	4692:13	6	=
LEAF_NODE	4692:13	4692:13	7	=
RVAL	4692:14	4692:14	6	m1 [ 2 ] = 0.0
ASSIGN	4692:14	4692:20	7	m1 [ 2 ] = 0.0
LVAL	4692:14	4692:14	8	m1 [ 2 ]
FIELD	4692:14	4692:18	9	m1 [ 2 ]
LEAF_NODE	4692:14	4692:14	10	m1
LEAF_NODE	4692:16	4692:16	10	[
EXPR	4692:17	4692:17	10	2
FIELD	4692:17	4692:17	11	2
LEAF_NODE	4692:17	4692:17	12	2
LEAF_NODE	4692:18	4692:18	10	]
ASSIGN_OP	4692:19	4692:19	8	=
LEAF_NODE	4692:19	4692:19	9	=
RVAL	4692:20	4692:20	8	0.0
FIELD	4692:20	4692:20	9	0.0
LEAF_NODE	4692:20	4692:20	10	0.0
LEAF_NODE	4692:23	4692:23	4	;
EXPR_STATEMENT	4693:1	4693:23	3	boxp -> mat [ 3 ] = m1 [ 3 ] = 0.0 ;
EXPR	4693:1	4693:1	4	boxp -> mat [ 3 ] = m1 [ 3 ] = 0.0
ASSIGN	4693:1	4693:14	5	boxp -> mat [ 3 ] = m1 [ 3 ] = 0.0
LVAL	4693:1	4693:1	6	boxp -> mat [ 3 ]
FIELD	4693:1	4693:12	7	boxp -> mat [ 3 ]
LEAF_NODE	4693:1	4693:1	8	boxp
LEAF_NODE	4693:5	4693:5	8	->
LEAF_NODE	4693:7	4693:7	8	mat
LEAF_NODE	4693:10	4693:10	8	[
EXPR	4693:11	4693:11	8	3
FIELD	4693:11	4693:11	9	3
LEAF_NODE	4693:11	4693:11	10	3
LEAF_NODE	4693:12	4693:12	8	]
ASSIGN_OP	4693:13	4693:13	6	=
LEAF_NODE	4693:13	4693:13	7	=
RVAL	4693:14	4693:14	6	m1 [ 3 ] = 0.0
ASSIGN	4693:14	4693:20	7	m1 [ 3 ] = 0.0
LVAL	4693:14	4693:14	8	m1 [ 3 ]
FIELD	4693:14	4693:18	9	m1 [ 3 ]
LEAF_NODE	4693:14	4693:14	10	m1
LEAF_NODE	4693:16	4693:16	10	[
EXPR	4693:17	4693:17	10	3
FIELD	4693:17	4693:17	11	3
LEAF_NODE	4693:17	4693:17	12	3
LEAF_NODE	4693:18	4693:18	10	]
ASSIGN_OP	4693:19	4693:19	8	=
LEAF_NODE	4693:19	4693:19	9	=
RVAL	4693:20	4693:20	8	0.0
FIELD	4693:20	4693:20	9	0.0
LEAF_NODE	4693:20	4693:20	10	0.0
LEAF_NODE	4693:23	4693:23	4	;
EXPR_STATEMENT	4694:1	4694:37	3	boxp -> mat [ 4 ] = m1 [ 4 ] = boxp -> y2 - boxp -> y1 ;
EXPR	4694:1	4694:1	4	boxp -> mat [ 4 ] = m1 [ 4 ] = boxp -> y2 - boxp -> y1
ASSIGN	4694:1	4694:14	5	boxp -> mat [ 4 ] = m1 [ 4 ] = boxp -> y2 - boxp -> y1
LVAL	4694:1	4694:1	6	boxp -> mat [ 4 ]
FIELD	4694:1	4694:12	7	boxp -> mat [ 4 ]
LEAF_NODE	4694:1	4694:1	8	boxp
LEAF_NODE	4694:5	4694:5	8	->
LEAF_NODE	4694:7	4694:7	8	mat
LEAF_NODE	4694:10	4694:10	8	[
EXPR	4694:11	4694:11	8	4
FIELD	4694:11	4694:11	9	4
LEAF_NODE	4694:11	4694:11	10	4
LEAF_NODE	4694:12	4694:12	8	]
ASSIGN_OP	4694:13	4694:13	6	=
LEAF_NODE	4694:13	4694:13	7	=
RVAL	4694:14	4694:14	6	m1 [ 4 ] = boxp -> y2 - boxp -> y1
ASSIGN	4694:14	4694:20	7	m1 [ 4 ] = boxp -> y2 - boxp -> y1
LVAL	4694:14	4694:14	8	m1 [ 4 ]
FIELD	4694:14	4694:18	9	m1 [ 4 ]
LEAF_NODE	4694:14	4694:14	10	m1
LEAF_NODE	4694:16	4694:16	10	[
EXPR	4694:17	4694:17	10	4
FIELD	4694:17	4694:17	11	4
LEAF_NODE	4694:17	4694:17	12	4
LEAF_NODE	4694:18	4694:18	10	]
ASSIGN_OP	4694:19	4694:19	8	=
LEAF_NODE	4694:19	4694:19	9	=
RVAL	4694:20	4694:29	8	boxp -> y2 - boxp -> y1
FIELD	4694:20	4694:26	9	boxp -> y2
LEAF_NODE	4694:20	4694:20	10	boxp
LEAF_NODE	4694:24	4694:24	10	->
LEAF_NODE	4694:26	4694:26	10	y2
LEAF_NODE	4694:28	4694:28	9	-
FIELD	4694:29	4694:35	9	boxp -> y1
LEAF_NODE	4694:29	4694:29	10	boxp
LEAF_NODE	4694:33	4694:33	10	->
LEAF_NODE	4694:35	4694:35	10	y1
LEAF_NODE	4694:37	4694:37	4	;
EXPR_STATEMENT	4695:1	4695:23	3	boxp -> mat [ 5 ] = m1 [ 5 ] = 0.0 ;
EXPR	4695:1	4695:1	4	boxp -> mat [ 5 ] = m1 [ 5 ] = 0.0
ASSIGN	4695:1	4695:14	5	boxp -> mat [ 5 ] = m1 [ 5 ] = 0.0
LVAL	4695:1	4695:1	6	boxp -> mat [ 5 ]
FIELD	4695:1	4695:12	7	boxp -> mat [ 5 ]
LEAF_NODE	4695:1	4695:1	8	boxp
LEAF_NODE	4695:5	4695:5	8	->
LEAF_NODE	4695:7	4695:7	8	mat
LEAF_NODE	4695:10	4695:10	8	[
EXPR	4695:11	4695:11	8	5
FIELD	4695:11	4695:11	9	5
LEAF_NODE	4695:11	4695:11	10	5
LEAF_NODE	4695:12	4695:12	8	]
ASSIGN_OP	4695:13	4695:13	6	=
LEAF_NODE	4695:13	4695:13	7	=
RVAL	4695:14	4695:14	6	m1 [ 5 ] = 0.0
ASSIGN	4695:14	4695:20	7	m1 [ 5 ] = 0.0
LVAL	4695:14	4695:14	8	m1 [ 5 ]
FIELD	4695:14	4695:18	9	m1 [ 5 ]
LEAF_NODE	4695:14	4695:14	10	m1
LEAF_NODE	4695:16	4695:16	10	[
EXPR	4695:17	4695:17	10	5
FIELD	4695:17	4695:17	11	5
LEAF_NODE	4695:17	4695:17	12	5
LEAF_NODE	4695:18	4695:18	10	]
ASSIGN_OP	4695:19	4695:19	8	=
LEAF_NODE	4695:19	4695:19	9	=
RVAL	4695:20	4695:20	8	0.0
FIELD	4695:20	4695:20	9	0.0
LEAF_NODE	4695:20	4695:20	10	0.0
LEAF_NODE	4695:23	4695:23	4	;
EXPR_STATEMENT	4696:1	4696:28	3	boxp -> mat [ 6 ] = m1 [ 6 ] = boxp -> x1 ;
EXPR	4696:1	4696:1	4	boxp -> mat [ 6 ] = m1 [ 6 ] = boxp -> x1
ASSIGN	4696:1	4696:14	5	boxp -> mat [ 6 ] = m1 [ 6 ] = boxp -> x1
LVAL	4696:1	4696:1	6	boxp -> mat [ 6 ]
FIELD	4696:1	4696:12	7	boxp -> mat [ 6 ]
LEAF_NODE	4696:1	4696:1	8	boxp
LEAF_NODE	4696:5	4696:5	8	->
LEAF_NODE	4696:7	4696:7	8	mat
LEAF_NODE	4696:10	4696:10	8	[
EXPR	4696:11	4696:11	8	6
FIELD	4696:11	4696:11	9	6
LEAF_NODE	4696:11	4696:11	10	6
LEAF_NODE	4696:12	4696:12	8	]
ASSIGN_OP	4696:13	4696:13	6	=
LEAF_NODE	4696:13	4696:13	7	=
RVAL	4696:14	4696:14	6	m1 [ 6 ] = boxp -> x1
ASSIGN	4696:14	4696:20	7	m1 [ 6 ] = boxp -> x1
LVAL	4696:14	4696:14	8	m1 [ 6 ]
FIELD	4696:14	4696:18	9	m1 [ 6 ]
LEAF_NODE	4696:14	4696:14	10	m1
LEAF_NODE	4696:16	4696:16	10	[
EXPR	4696:17	4696:17	10	6
FIELD	4696:17	4696:17	11	6
LEAF_NODE	4696:17	4696:17	12	6
LEAF_NODE	4696:18	4696:18	10	]
ASSIGN_OP	4696:19	4696:19	8	=
LEAF_NODE	4696:19	4696:19	9	=
RVAL	4696:20	4696:20	8	boxp -> x1
FIELD	4696:20	4696:26	9	boxp -> x1
LEAF_NODE	4696:20	4696:20	10	boxp
LEAF_NODE	4696:24	4696:24	10	->
LEAF_NODE	4696:26	4696:26	10	x1
LEAF_NODE	4696:28	4696:28	4	;
EXPR_STATEMENT	4697:1	4697:28	3	boxp -> mat [ 7 ] = m1 [ 7 ] = boxp -> y1 ;
EXPR	4697:1	4697:1	4	boxp -> mat [ 7 ] = m1 [ 7 ] = boxp -> y1
ASSIGN	4697:1	4697:14	5	boxp -> mat [ 7 ] = m1 [ 7 ] = boxp -> y1
LVAL	4697:1	4697:1	6	boxp -> mat [ 7 ]
FIELD	4697:1	4697:12	7	boxp -> mat [ 7 ]
LEAF_NODE	4697:1	4697:1	8	boxp
LEAF_NODE	4697:5	4697:5	8	->
LEAF_NODE	4697:7	4697:7	8	mat
LEAF_NODE	4697:10	4697:10	8	[
EXPR	4697:11	4697:11	8	7
FIELD	4697:11	4697:11	9	7
LEAF_NODE	4697:11	4697:11	10	7
LEAF_NODE	4697:12	4697:12	8	]
ASSIGN_OP	4697:13	4697:13	6	=
LEAF_NODE	4697:13	4697:13	7	=
RVAL	4697:14	4697:14	6	m1 [ 7 ] = boxp -> y1
ASSIGN	4697:14	4697:20	7	m1 [ 7 ] = boxp -> y1
LVAL	4697:14	4697:14	8	m1 [ 7 ]
FIELD	4697:14	4697:18	9	m1 [ 7 ]
LEAF_NODE	4697:14	4697:14	10	m1
LEAF_NODE	4697:16	4697:16	10	[
EXPR	4697:17	4697:17	10	7
FIELD	4697:17	4697:17	11	7
LEAF_NODE	4697:17	4697:17	12	7
LEAF_NODE	4697:18	4697:18	10	]
ASSIGN_OP	4697:19	4697:19	8	=
LEAF_NODE	4697:19	4697:19	9	=
RVAL	4697:20	4697:20	8	boxp -> y1
FIELD	4697:20	4697:26	9	boxp -> y1
LEAF_NODE	4697:20	4697:20	10	boxp
LEAF_NODE	4697:24	4697:24	10	->
LEAF_NODE	4697:26	4697:26	10	y1
LEAF_NODE	4697:28	4697:28	4	;
EXPR_STATEMENT	4698:1	4698:23	3	boxp -> mat [ 8 ] = m1 [ 8 ] = 1.0 ;
EXPR	4698:1	4698:1	4	boxp -> mat [ 8 ] = m1 [ 8 ] = 1.0
ASSIGN	4698:1	4698:14	5	boxp -> mat [ 8 ] = m1 [ 8 ] = 1.0
LVAL	4698:1	4698:1	6	boxp -> mat [ 8 ]
FIELD	4698:1	4698:12	7	boxp -> mat [ 8 ]
LEAF_NODE	4698:1	4698:1	8	boxp
LEAF_NODE	4698:5	4698:5	8	->
LEAF_NODE	4698:7	4698:7	8	mat
LEAF_NODE	4698:10	4698:10	8	[
EXPR	4698:11	4698:11	8	8
FIELD	4698:11	4698:11	9	8
LEAF_NODE	4698:11	4698:11	10	8
LEAF_NODE	4698:12	4698:12	8	]
ASSIGN_OP	4698:13	4698:13	6	=
LEAF_NODE	4698:13	4698:13	7	=
RVAL	4698:14	4698:14	6	m1 [ 8 ] = 1.0
ASSIGN	4698:14	4698:20	7	m1 [ 8 ] = 1.0
LVAL	4698:14	4698:14	8	m1 [ 8 ]
FIELD	4698:14	4698:18	9	m1 [ 8 ]
LEAF_NODE	4698:14	4698:14	10	m1
LEAF_NODE	4698:16	4698:16	10	[
EXPR	4698:17	4698:17	10	8
FIELD	4698:17	4698:17	11	8
LEAF_NODE	4698:17	4698:17	12	8
LEAF_NODE	4698:18	4698:18	10	]
ASSIGN_OP	4698:19	4698:19	8	=
LEAF_NODE	4698:19	4698:19	9	=
RVAL	4698:20	4698:20	8	1.0
FIELD	4698:20	4698:20	9	1.0
LEAF_NODE	4698:20	4698:20	10	1.0
LEAF_NODE	4698:23	4698:23	4	;
SELECTION	4699:1	4699:20	3	
KEYWORD	4699:1	4699:1	4	switch
LEAF_NODE	4699:1	4699:1	5	switch
LEAF_NODE	4699:7	4699:7	4	(
CONDITION	4699:8	4699:8	4	orientation
EXPR	4699:8	4699:8	5	orientation
FIELD	4699:8	4699:8	6	orientation
LEAF_NODE	4699:8	4699:8	7	orientation
LEAF_NODE	4699:19	4699:19	4	)
STATEMENTS	4699:20	4745:1	4	
LEAF_NODE	4699:20	4699:20	5	{
STATEMENTS	4700:2	4744:3	5	
LABEL	4700:2	4700:8	6	case 0 :
LEAF_NODE	4700:2	4700:2	7	case
LEAF_NODE	4700:7	4700:7	7	0
LEAF_NODE	4700:8	4700:8	7	:
LABEL	4701:2	4701:8	6	case 1 :
LEAF_NODE	4701:2	4701:2	7	case
LEAF_NODE	4701:7	4701:7	7	1
LEAF_NODE	4701:8	4701:8	7	:
JUMP_STATEMENT	4702:3	4702:8	6	break DESTINATION ;
KEYWORD	4702:3	4702:3	7	break
LEAF_NODE	4702:3	4702:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4702:8	4702:8	7	;
LABEL	4703:2	4703:8	6	case 2 :
LEAF_NODE	4703:2	4703:2	7	case
LEAF_NODE	4703:7	4703:7	7	2
LEAF_NODE	4703:8	4703:8	7	:
EXPR_STATEMENT	4704:3	4704:26	6	boxp -> mat [ 0 ] = 0.0F - m1 [ 0 ] ;
EXPR	4704:3	4704:3	7	boxp -> mat [ 0 ] = 0.0F - m1 [ 0 ]
ASSIGN	4704:3	4704:16	8	boxp -> mat [ 0 ] = 0.0F - m1 [ 0 ]
LVAL	4704:3	4704:3	9	boxp -> mat [ 0 ]
FIELD	4704:3	4704:14	10	boxp -> mat [ 0 ]
LEAF_NODE	4704:3	4704:3	11	boxp
LEAF_NODE	4704:7	4704:7	11	->
LEAF_NODE	4704:9	4704:9	11	mat
LEAF_NODE	4704:12	4704:12	11	[
EXPR	4704:13	4704:13	11	0
FIELD	4704:13	4704:13	12	0
LEAF_NODE	4704:13	4704:13	13	0
LEAF_NODE	4704:14	4704:14	11	]
ASSIGN_OP	4704:15	4704:15	9	=
LEAF_NODE	4704:15	4704:15	10	=
RVAL	4704:16	4704:21	9	0.0F - m1 [ 0 ]
FIELD	4704:16	4704:16	10	0.0F
LEAF_NODE	4704:16	4704:16	11	0.0F
LEAF_NODE	4704:20	4704:20	10	-
FIELD	4704:21	4704:25	10	m1 [ 0 ]
LEAF_NODE	4704:21	4704:21	11	m1
LEAF_NODE	4704:23	4704:23	11	[
EXPR	4704:24	4704:24	11	0
FIELD	4704:24	4704:24	12	0
LEAF_NODE	4704:24	4704:24	13	0
LEAF_NODE	4704:25	4704:25	11	]
LEAF_NODE	4704:26	4704:26	7	;
EXPR_STATEMENT	4705:3	4705:22	6	boxp -> mat [ 6 ] += m1 [ 0 ] ;
EXPR	4705:3	4705:3	7	boxp -> mat [ 6 ] += m1 [ 0 ]
ASSIGN	4705:3	4705:17	8	boxp -> mat [ 6 ] += m1 [ 0 ]
LVAL	4705:3	4705:3	9	boxp -> mat [ 6 ]
FIELD	4705:3	4705:14	10	boxp -> mat [ 6 ]
LEAF_NODE	4705:3	4705:3	11	boxp
LEAF_NODE	4705:7	4705:7	11	->
LEAF_NODE	4705:9	4705:9	11	mat
LEAF_NODE	4705:12	4705:12	11	[
EXPR	4705:13	4705:13	11	6
FIELD	4705:13	4705:13	12	6
LEAF_NODE	4705:13	4705:13	13	6
LEAF_NODE	4705:14	4705:14	11	]
ASSIGN_OP	4705:15	4705:15	9	+=
LEAF_NODE	4705:15	4705:15	10	+=
RVAL	4705:17	4705:17	9	m1 [ 0 ]
FIELD	4705:17	4705:21	10	m1 [ 0 ]
LEAF_NODE	4705:17	4705:17	11	m1
LEAF_NODE	4705:19	4705:19	11	[
EXPR	4705:20	4705:20	11	0
FIELD	4705:20	4705:20	12	0
LEAF_NODE	4705:20	4705:20	13	0
LEAF_NODE	4705:21	4705:21	11	]
LEAF_NODE	4705:22	4705:22	7	;
JUMP_STATEMENT	4706:3	4706:8	6	break DESTINATION ;
KEYWORD	4706:3	4706:3	7	break
LEAF_NODE	4706:3	4706:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4706:8	4706:8	7	;
LABEL	4707:2	4707:8	6	case 3 :
LEAF_NODE	4707:2	4707:2	7	case
LEAF_NODE	4707:7	4707:7	7	3
LEAF_NODE	4707:8	4707:8	7	:
EXPR_STATEMENT	4708:3	4708:26	6	boxp -> mat [ 0 ] = 0.0F - m1 [ 0 ] ;
EXPR	4708:3	4708:3	7	boxp -> mat [ 0 ] = 0.0F - m1 [ 0 ]
ASSIGN	4708:3	4708:16	8	boxp -> mat [ 0 ] = 0.0F - m1 [ 0 ]
LVAL	4708:3	4708:3	9	boxp -> mat [ 0 ]
FIELD	4708:3	4708:14	10	boxp -> mat [ 0 ]
LEAF_NODE	4708:3	4708:3	11	boxp
LEAF_NODE	4708:7	4708:7	11	->
LEAF_NODE	4708:9	4708:9	11	mat
LEAF_NODE	4708:12	4708:12	11	[
EXPR	4708:13	4708:13	11	0
FIELD	4708:13	4708:13	12	0
LEAF_NODE	4708:13	4708:13	13	0
LEAF_NODE	4708:14	4708:14	11	]
ASSIGN_OP	4708:15	4708:15	9	=
LEAF_NODE	4708:15	4708:15	10	=
RVAL	4708:16	4708:21	9	0.0F - m1 [ 0 ]
FIELD	4708:16	4708:16	10	0.0F
LEAF_NODE	4708:16	4708:16	11	0.0F
LEAF_NODE	4708:20	4708:20	10	-
FIELD	4708:21	4708:25	10	m1 [ 0 ]
LEAF_NODE	4708:21	4708:21	11	m1
LEAF_NODE	4708:23	4708:23	11	[
EXPR	4708:24	4708:24	11	0
FIELD	4708:24	4708:24	12	0
LEAF_NODE	4708:24	4708:24	13	0
LEAF_NODE	4708:25	4708:25	11	]
LEAF_NODE	4708:26	4708:26	7	;
EXPR_STATEMENT	4709:3	4709:26	6	boxp -> mat [ 4 ] = 0.0F - m1 [ 4 ] ;
EXPR	4709:3	4709:3	7	boxp -> mat [ 4 ] = 0.0F - m1 [ 4 ]
ASSIGN	4709:3	4709:16	8	boxp -> mat [ 4 ] = 0.0F - m1 [ 4 ]
LVAL	4709:3	4709:3	9	boxp -> mat [ 4 ]
FIELD	4709:3	4709:14	10	boxp -> mat [ 4 ]
LEAF_NODE	4709:3	4709:3	11	boxp
LEAF_NODE	4709:7	4709:7	11	->
LEAF_NODE	4709:9	4709:9	11	mat
LEAF_NODE	4709:12	4709:12	11	[
EXPR	4709:13	4709:13	11	4
FIELD	4709:13	4709:13	12	4
LEAF_NODE	4709:13	4709:13	13	4
LEAF_NODE	4709:14	4709:14	11	]
ASSIGN_OP	4709:15	4709:15	9	=
LEAF_NODE	4709:15	4709:15	10	=
RVAL	4709:16	4709:21	9	0.0F - m1 [ 4 ]
FIELD	4709:16	4709:16	10	0.0F
LEAF_NODE	4709:16	4709:16	11	0.0F
LEAF_NODE	4709:20	4709:20	10	-
FIELD	4709:21	4709:25	10	m1 [ 4 ]
LEAF_NODE	4709:21	4709:21	11	m1
LEAF_NODE	4709:23	4709:23	11	[
EXPR	4709:24	4709:24	11	4
FIELD	4709:24	4709:24	12	4
LEAF_NODE	4709:24	4709:24	13	4
LEAF_NODE	4709:25	4709:25	11	]
LEAF_NODE	4709:26	4709:26	7	;
EXPR_STATEMENT	4710:3	4710:22	6	boxp -> mat [ 6 ] += m1 [ 0 ] ;
EXPR	4710:3	4710:3	7	boxp -> mat [ 6 ] += m1 [ 0 ]
ASSIGN	4710:3	4710:17	8	boxp -> mat [ 6 ] += m1 [ 0 ]
LVAL	4710:3	4710:3	9	boxp -> mat [ 6 ]
FIELD	4710:3	4710:14	10	boxp -> mat [ 6 ]
LEAF_NODE	4710:3	4710:3	11	boxp
LEAF_NODE	4710:7	4710:7	11	->
LEAF_NODE	4710:9	4710:9	11	mat
LEAF_NODE	4710:12	4710:12	11	[
EXPR	4710:13	4710:13	11	6
FIELD	4710:13	4710:13	12	6
LEAF_NODE	4710:13	4710:13	13	6
LEAF_NODE	4710:14	4710:14	11	]
ASSIGN_OP	4710:15	4710:15	9	+=
LEAF_NODE	4710:15	4710:15	10	+=
RVAL	4710:17	4710:17	9	m1 [ 0 ]
FIELD	4710:17	4710:21	10	m1 [ 0 ]
LEAF_NODE	4710:17	4710:17	11	m1
LEAF_NODE	4710:19	4710:19	11	[
EXPR	4710:20	4710:20	11	0
FIELD	4710:20	4710:20	12	0
LEAF_NODE	4710:20	4710:20	13	0
LEAF_NODE	4710:21	4710:21	11	]
LEAF_NODE	4710:22	4710:22	7	;
EXPR_STATEMENT	4711:3	4711:22	6	boxp -> mat [ 7 ] += m1 [ 4 ] ;
EXPR	4711:3	4711:3	7	boxp -> mat [ 7 ] += m1 [ 4 ]
ASSIGN	4711:3	4711:17	8	boxp -> mat [ 7 ] += m1 [ 4 ]
LVAL	4711:3	4711:3	9	boxp -> mat [ 7 ]
FIELD	4711:3	4711:14	10	boxp -> mat [ 7 ]
LEAF_NODE	4711:3	4711:3	11	boxp
LEAF_NODE	4711:7	4711:7	11	->
LEAF_NODE	4711:9	4711:9	11	mat
LEAF_NODE	4711:12	4711:12	11	[
EXPR	4711:13	4711:13	11	7
FIELD	4711:13	4711:13	12	7
LEAF_NODE	4711:13	4711:13	13	7
LEAF_NODE	4711:14	4711:14	11	]
ASSIGN_OP	4711:15	4711:15	9	+=
LEAF_NODE	4711:15	4711:15	10	+=
RVAL	4711:17	4711:17	9	m1 [ 4 ]
FIELD	4711:17	4711:21	10	m1 [ 4 ]
LEAF_NODE	4711:17	4711:17	11	m1
LEAF_NODE	4711:19	4711:19	11	[
EXPR	4711:20	4711:20	11	4
FIELD	4711:20	4711:20	12	4
LEAF_NODE	4711:20	4711:20	13	4
LEAF_NODE	4711:21	4711:21	11	]
LEAF_NODE	4711:22	4711:22	7	;
JUMP_STATEMENT	4712:3	4712:8	6	break DESTINATION ;
KEYWORD	4712:3	4712:3	7	break
LEAF_NODE	4712:3	4712:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4712:8	4712:8	7	;
LABEL	4713:2	4713:8	6	case 4 :
LEAF_NODE	4713:2	4713:2	7	case
LEAF_NODE	4713:7	4713:7	7	4
LEAF_NODE	4713:8	4713:8	7	:
EXPR_STATEMENT	4714:3	4714:26	6	boxp -> mat [ 4 ] = 0.0F - m1 [ 4 ] ;
EXPR	4714:3	4714:3	7	boxp -> mat [ 4 ] = 0.0F - m1 [ 4 ]
ASSIGN	4714:3	4714:16	8	boxp -> mat [ 4 ] = 0.0F - m1 [ 4 ]
LVAL	4714:3	4714:3	9	boxp -> mat [ 4 ]
FIELD	4714:3	4714:14	10	boxp -> mat [ 4 ]
LEAF_NODE	4714:3	4714:3	11	boxp
LEAF_NODE	4714:7	4714:7	11	->
LEAF_NODE	4714:9	4714:9	11	mat
LEAF_NODE	4714:12	4714:12	11	[
EXPR	4714:13	4714:13	11	4
FIELD	4714:13	4714:13	12	4
LEAF_NODE	4714:13	4714:13	13	4
LEAF_NODE	4714:14	4714:14	11	]
ASSIGN_OP	4714:15	4714:15	9	=
LEAF_NODE	4714:15	4714:15	10	=
RVAL	4714:16	4714:21	9	0.0F - m1 [ 4 ]
FIELD	4714:16	4714:16	10	0.0F
LEAF_NODE	4714:16	4714:16	11	0.0F
LEAF_NODE	4714:20	4714:20	10	-
FIELD	4714:21	4714:25	10	m1 [ 4 ]
LEAF_NODE	4714:21	4714:21	11	m1
LEAF_NODE	4714:23	4714:23	11	[
EXPR	4714:24	4714:24	11	4
FIELD	4714:24	4714:24	12	4
LEAF_NODE	4714:24	4714:24	13	4
LEAF_NODE	4714:25	4714:25	11	]
LEAF_NODE	4714:26	4714:26	7	;
EXPR_STATEMENT	4715:3	4715:22	6	boxp -> mat [ 7 ] += m1 [ 4 ] ;
EXPR	4715:3	4715:3	7	boxp -> mat [ 7 ] += m1 [ 4 ]
ASSIGN	4715:3	4715:17	8	boxp -> mat [ 7 ] += m1 [ 4 ]
LVAL	4715:3	4715:3	9	boxp -> mat [ 7 ]
FIELD	4715:3	4715:14	10	boxp -> mat [ 7 ]
LEAF_NODE	4715:3	4715:3	11	boxp
LEAF_NODE	4715:7	4715:7	11	->
LEAF_NODE	4715:9	4715:9	11	mat
LEAF_NODE	4715:12	4715:12	11	[
EXPR	4715:13	4715:13	11	7
FIELD	4715:13	4715:13	12	7
LEAF_NODE	4715:13	4715:13	13	7
LEAF_NODE	4715:14	4715:14	11	]
ASSIGN_OP	4715:15	4715:15	9	+=
LEAF_NODE	4715:15	4715:15	10	+=
RVAL	4715:17	4715:17	9	m1 [ 4 ]
FIELD	4715:17	4715:21	10	m1 [ 4 ]
LEAF_NODE	4715:17	4715:17	11	m1
LEAF_NODE	4715:19	4715:19	11	[
EXPR	4715:20	4715:20	11	4
FIELD	4715:20	4715:20	12	4
LEAF_NODE	4715:20	4715:20	13	4
LEAF_NODE	4715:21	4715:21	11	]
LEAF_NODE	4715:22	4715:22	7	;
JUMP_STATEMENT	4716:3	4716:8	6	break DESTINATION ;
KEYWORD	4716:3	4716:3	7	break
LEAF_NODE	4716:3	4716:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4716:8	4716:8	7	;
LABEL	4717:2	4717:8	6	case 5 :
LEAF_NODE	4717:2	4717:2	7	case
LEAF_NODE	4717:7	4717:7	7	5
LEAF_NODE	4717:8	4717:8	7	:
EXPR_STATEMENT	4718:3	4718:20	6	boxp -> mat [ 0 ] = 0.0F ;
EXPR	4718:3	4718:3	7	boxp -> mat [ 0 ] = 0.0F
ASSIGN	4718:3	4718:16	8	boxp -> mat [ 0 ] = 0.0F
LVAL	4718:3	4718:3	9	boxp -> mat [ 0 ]
FIELD	4718:3	4718:14	10	boxp -> mat [ 0 ]
LEAF_NODE	4718:3	4718:3	11	boxp
LEAF_NODE	4718:7	4718:7	11	->
LEAF_NODE	4718:9	4718:9	11	mat
LEAF_NODE	4718:12	4718:12	11	[
EXPR	4718:13	4718:13	11	0
FIELD	4718:13	4718:13	12	0
LEAF_NODE	4718:13	4718:13	13	0
LEAF_NODE	4718:14	4718:14	11	]
ASSIGN_OP	4718:15	4718:15	9	=
LEAF_NODE	4718:15	4718:15	10	=
RVAL	4718:16	4718:16	9	0.0F
FIELD	4718:16	4718:16	10	0.0F
LEAF_NODE	4718:16	4718:16	11	0.0F
LEAF_NODE	4718:20	4718:20	7	;
EXPR_STATEMENT	4719:3	4719:26	6	boxp -> mat [ 1 ] = 0.0F - m1 [ 0 ] ;
EXPR	4719:3	4719:3	7	boxp -> mat [ 1 ] = 0.0F - m1 [ 0 ]
ASSIGN	4719:3	4719:16	8	boxp -> mat [ 1 ] = 0.0F - m1 [ 0 ]
LVAL	4719:3	4719:3	9	boxp -> mat [ 1 ]
FIELD	4719:3	4719:14	10	boxp -> mat [ 1 ]
LEAF_NODE	4719:3	4719:3	11	boxp
LEAF_NODE	4719:7	4719:7	11	->
LEAF_NODE	4719:9	4719:9	11	mat
LEAF_NODE	4719:12	4719:12	11	[
EXPR	4719:13	4719:13	11	1
FIELD	4719:13	4719:13	12	1
LEAF_NODE	4719:13	4719:13	13	1
LEAF_NODE	4719:14	4719:14	11	]
ASSIGN_OP	4719:15	4719:15	9	=
LEAF_NODE	4719:15	4719:15	10	=
RVAL	4719:16	4719:21	9	0.0F - m1 [ 0 ]
FIELD	4719:16	4719:16	10	0.0F
LEAF_NODE	4719:16	4719:16	11	0.0F
LEAF_NODE	4719:20	4719:20	10	-
FIELD	4719:21	4719:25	10	m1 [ 0 ]
LEAF_NODE	4719:21	4719:21	11	m1
LEAF_NODE	4719:23	4719:23	11	[
EXPR	4719:24	4719:24	11	0
FIELD	4719:24	4719:24	12	0
LEAF_NODE	4719:24	4719:24	13	0
LEAF_NODE	4719:25	4719:25	11	]
LEAF_NODE	4719:26	4719:26	7	;
EXPR_STATEMENT	4720:3	4720:26	6	boxp -> mat [ 3 ] = 0.0F - m1 [ 4 ] ;
EXPR	4720:3	4720:3	7	boxp -> mat [ 3 ] = 0.0F - m1 [ 4 ]
ASSIGN	4720:3	4720:16	8	boxp -> mat [ 3 ] = 0.0F - m1 [ 4 ]
LVAL	4720:3	4720:3	9	boxp -> mat [ 3 ]
FIELD	4720:3	4720:14	10	boxp -> mat [ 3 ]
LEAF_NODE	4720:3	4720:3	11	boxp
LEAF_NODE	4720:7	4720:7	11	->
LEAF_NODE	4720:9	4720:9	11	mat
LEAF_NODE	4720:12	4720:12	11	[
EXPR	4720:13	4720:13	11	3
FIELD	4720:13	4720:13	12	3
LEAF_NODE	4720:13	4720:13	13	3
LEAF_NODE	4720:14	4720:14	11	]
ASSIGN_OP	4720:15	4720:15	9	=
LEAF_NODE	4720:15	4720:15	10	=
RVAL	4720:16	4720:21	9	0.0F - m1 [ 4 ]
FIELD	4720:16	4720:16	10	0.0F
LEAF_NODE	4720:16	4720:16	11	0.0F
LEAF_NODE	4720:20	4720:20	10	-
FIELD	4720:21	4720:25	10	m1 [ 4 ]
LEAF_NODE	4720:21	4720:21	11	m1
LEAF_NODE	4720:23	4720:23	11	[
EXPR	4720:24	4720:24	11	4
FIELD	4720:24	4720:24	12	4
LEAF_NODE	4720:24	4720:24	13	4
LEAF_NODE	4720:25	4720:25	11	]
LEAF_NODE	4720:26	4720:26	7	;
EXPR_STATEMENT	4721:3	4721:20	6	boxp -> mat [ 4 ] = 0.0F ;
EXPR	4721:3	4721:3	7	boxp -> mat [ 4 ] = 0.0F
ASSIGN	4721:3	4721:16	8	boxp -> mat [ 4 ] = 0.0F
LVAL	4721:3	4721:3	9	boxp -> mat [ 4 ]
FIELD	4721:3	4721:14	10	boxp -> mat [ 4 ]
LEAF_NODE	4721:3	4721:3	11	boxp
LEAF_NODE	4721:7	4721:7	11	->
LEAF_NODE	4721:9	4721:9	11	mat
LEAF_NODE	4721:12	4721:12	11	[
EXPR	4721:13	4721:13	11	4
FIELD	4721:13	4721:13	12	4
LEAF_NODE	4721:13	4721:13	13	4
LEAF_NODE	4721:14	4721:14	11	]
ASSIGN_OP	4721:15	4721:15	9	=
LEAF_NODE	4721:15	4721:15	10	=
RVAL	4721:16	4721:16	9	0.0F
FIELD	4721:16	4721:16	10	0.0F
LEAF_NODE	4721:16	4721:16	11	0.0F
LEAF_NODE	4721:20	4721:20	7	;
EXPR_STATEMENT	4722:3	4722:22	6	boxp -> mat [ 6 ] += m1 [ 4 ] ;
EXPR	4722:3	4722:3	7	boxp -> mat [ 6 ] += m1 [ 4 ]
ASSIGN	4722:3	4722:17	8	boxp -> mat [ 6 ] += m1 [ 4 ]
LVAL	4722:3	4722:3	9	boxp -> mat [ 6 ]
FIELD	4722:3	4722:14	10	boxp -> mat [ 6 ]
LEAF_NODE	4722:3	4722:3	11	boxp
LEAF_NODE	4722:7	4722:7	11	->
LEAF_NODE	4722:9	4722:9	11	mat
LEAF_NODE	4722:12	4722:12	11	[
EXPR	4722:13	4722:13	11	6
FIELD	4722:13	4722:13	12	6
LEAF_NODE	4722:13	4722:13	13	6
LEAF_NODE	4722:14	4722:14	11	]
ASSIGN_OP	4722:15	4722:15	9	+=
LEAF_NODE	4722:15	4722:15	10	+=
RVAL	4722:17	4722:17	9	m1 [ 4 ]
FIELD	4722:17	4722:21	10	m1 [ 4 ]
LEAF_NODE	4722:17	4722:17	11	m1
LEAF_NODE	4722:19	4722:19	11	[
EXPR	4722:20	4722:20	11	4
FIELD	4722:20	4722:20	12	4
LEAF_NODE	4722:20	4722:20	13	4
LEAF_NODE	4722:21	4722:21	11	]
LEAF_NODE	4722:22	4722:22	7	;
EXPR_STATEMENT	4723:3	4723:22	6	boxp -> mat [ 7 ] += m1 [ 0 ] ;
EXPR	4723:3	4723:3	7	boxp -> mat [ 7 ] += m1 [ 0 ]
ASSIGN	4723:3	4723:17	8	boxp -> mat [ 7 ] += m1 [ 0 ]
LVAL	4723:3	4723:3	9	boxp -> mat [ 7 ]
FIELD	4723:3	4723:14	10	boxp -> mat [ 7 ]
LEAF_NODE	4723:3	4723:3	11	boxp
LEAF_NODE	4723:7	4723:7	11	->
LEAF_NODE	4723:9	4723:9	11	mat
LEAF_NODE	4723:12	4723:12	11	[
EXPR	4723:13	4723:13	11	7
FIELD	4723:13	4723:13	12	7
LEAF_NODE	4723:13	4723:13	13	7
LEAF_NODE	4723:14	4723:14	11	]
ASSIGN_OP	4723:15	4723:15	9	+=
LEAF_NODE	4723:15	4723:15	10	+=
RVAL	4723:17	4723:17	9	m1 [ 0 ]
FIELD	4723:17	4723:21	10	m1 [ 0 ]
LEAF_NODE	4723:17	4723:17	11	m1
LEAF_NODE	4723:19	4723:19	11	[
EXPR	4723:20	4723:20	11	0
FIELD	4723:20	4723:20	12	0
LEAF_NODE	4723:20	4723:20	13	0
LEAF_NODE	4723:21	4723:21	11	]
LEAF_NODE	4723:22	4723:22	7	;
JUMP_STATEMENT	4724:3	4724:8	6	break DESTINATION ;
KEYWORD	4724:3	4724:3	7	break
LEAF_NODE	4724:3	4724:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4724:8	4724:8	7	;
LABEL	4725:2	4725:8	6	case 6 :
LEAF_NODE	4725:2	4725:2	7	case
LEAF_NODE	4725:7	4725:7	7	6
LEAF_NODE	4725:8	4725:8	7	:
EXPR_STATEMENT	4726:3	4726:20	6	boxp -> mat [ 0 ] = 0.0F ;
EXPR	4726:3	4726:3	7	boxp -> mat [ 0 ] = 0.0F
ASSIGN	4726:3	4726:16	8	boxp -> mat [ 0 ] = 0.0F
LVAL	4726:3	4726:3	9	boxp -> mat [ 0 ]
FIELD	4726:3	4726:14	10	boxp -> mat [ 0 ]
LEAF_NODE	4726:3	4726:3	11	boxp
LEAF_NODE	4726:7	4726:7	11	->
LEAF_NODE	4726:9	4726:9	11	mat
LEAF_NODE	4726:12	4726:12	11	[
EXPR	4726:13	4726:13	11	0
FIELD	4726:13	4726:13	12	0
LEAF_NODE	4726:13	4726:13	13	0
LEAF_NODE	4726:14	4726:14	11	]
ASSIGN_OP	4726:15	4726:15	9	=
LEAF_NODE	4726:15	4726:15	10	=
RVAL	4726:16	4726:16	9	0.0F
FIELD	4726:16	4726:16	10	0.0F
LEAF_NODE	4726:16	4726:16	11	0.0F
LEAF_NODE	4726:20	4726:20	7	;
EXPR_STATEMENT	4727:3	4727:26	6	boxp -> mat [ 1 ] = 0.0F - m1 [ 0 ] ;
EXPR	4727:3	4727:3	7	boxp -> mat [ 1 ] = 0.0F - m1 [ 0 ]
ASSIGN	4727:3	4727:16	8	boxp -> mat [ 1 ] = 0.0F - m1 [ 0 ]
LVAL	4727:3	4727:3	9	boxp -> mat [ 1 ]
FIELD	4727:3	4727:14	10	boxp -> mat [ 1 ]
LEAF_NODE	4727:3	4727:3	11	boxp
LEAF_NODE	4727:7	4727:7	11	->
LEAF_NODE	4727:9	4727:9	11	mat
LEAF_NODE	4727:12	4727:12	11	[
EXPR	4727:13	4727:13	11	1
FIELD	4727:13	4727:13	12	1
LEAF_NODE	4727:13	4727:13	13	1
LEAF_NODE	4727:14	4727:14	11	]
ASSIGN_OP	4727:15	4727:15	9	=
LEAF_NODE	4727:15	4727:15	10	=
RVAL	4727:16	4727:21	9	0.0F - m1 [ 0 ]
FIELD	4727:16	4727:16	10	0.0F
LEAF_NODE	4727:16	4727:16	11	0.0F
LEAF_NODE	4727:20	4727:20	10	-
FIELD	4727:21	4727:25	10	m1 [ 0 ]
LEAF_NODE	4727:21	4727:21	11	m1
LEAF_NODE	4727:23	4727:23	11	[
EXPR	4727:24	4727:24	11	0
FIELD	4727:24	4727:24	12	0
LEAF_NODE	4727:24	4727:24	13	0
LEAF_NODE	4727:25	4727:25	11	]
LEAF_NODE	4727:26	4727:26	7	;
EXPR_STATEMENT	4728:3	4728:21	6	boxp -> mat [ 3 ] = m1 [ 4 ] ;
EXPR	4728:3	4728:3	7	boxp -> mat [ 3 ] = m1 [ 4 ]
ASSIGN	4728:3	4728:16	8	boxp -> mat [ 3 ] = m1 [ 4 ]
LVAL	4728:3	4728:3	9	boxp -> mat [ 3 ]
FIELD	4728:3	4728:14	10	boxp -> mat [ 3 ]
LEAF_NODE	4728:3	4728:3	11	boxp
LEAF_NODE	4728:7	4728:7	11	->
LEAF_NODE	4728:9	4728:9	11	mat
LEAF_NODE	4728:12	4728:12	11	[
EXPR	4728:13	4728:13	11	3
FIELD	4728:13	4728:13	12	3
LEAF_NODE	4728:13	4728:13	13	3
LEAF_NODE	4728:14	4728:14	11	]
ASSIGN_OP	4728:15	4728:15	9	=
LEAF_NODE	4728:15	4728:15	10	=
RVAL	4728:16	4728:16	9	m1 [ 4 ]
FIELD	4728:16	4728:20	10	m1 [ 4 ]
LEAF_NODE	4728:16	4728:16	11	m1
LEAF_NODE	4728:18	4728:18	11	[
EXPR	4728:19	4728:19	11	4
FIELD	4728:19	4728:19	12	4
LEAF_NODE	4728:19	4728:19	13	4
LEAF_NODE	4728:20	4728:20	11	]
LEAF_NODE	4728:21	4728:21	7	;
EXPR_STATEMENT	4729:3	4729:20	6	boxp -> mat [ 4 ] = 0.0F ;
EXPR	4729:3	4729:3	7	boxp -> mat [ 4 ] = 0.0F
ASSIGN	4729:3	4729:16	8	boxp -> mat [ 4 ] = 0.0F
LVAL	4729:3	4729:3	9	boxp -> mat [ 4 ]
FIELD	4729:3	4729:14	10	boxp -> mat [ 4 ]
LEAF_NODE	4729:3	4729:3	11	boxp
LEAF_NODE	4729:7	4729:7	11	->
LEAF_NODE	4729:9	4729:9	11	mat
LEAF_NODE	4729:12	4729:12	11	[
EXPR	4729:13	4729:13	11	4
FIELD	4729:13	4729:13	12	4
LEAF_NODE	4729:13	4729:13	13	4
LEAF_NODE	4729:14	4729:14	11	]
ASSIGN_OP	4729:15	4729:15	9	=
LEAF_NODE	4729:15	4729:15	10	=
RVAL	4729:16	4729:16	9	0.0F
FIELD	4729:16	4729:16	10	0.0F
LEAF_NODE	4729:16	4729:16	11	0.0F
LEAF_NODE	4729:20	4729:20	7	;
EXPR_STATEMENT	4730:3	4730:22	6	boxp -> mat [ 7 ] += m1 [ 0 ] ;
EXPR	4730:3	4730:3	7	boxp -> mat [ 7 ] += m1 [ 0 ]
ASSIGN	4730:3	4730:17	8	boxp -> mat [ 7 ] += m1 [ 0 ]
LVAL	4730:3	4730:3	9	boxp -> mat [ 7 ]
FIELD	4730:3	4730:14	10	boxp -> mat [ 7 ]
LEAF_NODE	4730:3	4730:3	11	boxp
LEAF_NODE	4730:7	4730:7	11	->
LEAF_NODE	4730:9	4730:9	11	mat
LEAF_NODE	4730:12	4730:12	11	[
EXPR	4730:13	4730:13	11	7
FIELD	4730:13	4730:13	12	7
LEAF_NODE	4730:13	4730:13	13	7
LEAF_NODE	4730:14	4730:14	11	]
ASSIGN_OP	4730:15	4730:15	9	+=
LEAF_NODE	4730:15	4730:15	10	+=
RVAL	4730:17	4730:17	9	m1 [ 0 ]
FIELD	4730:17	4730:21	10	m1 [ 0 ]
LEAF_NODE	4730:17	4730:17	11	m1
LEAF_NODE	4730:19	4730:19	11	[
EXPR	4730:20	4730:20	11	0
FIELD	4730:20	4730:20	12	0
LEAF_NODE	4730:20	4730:20	13	0
LEAF_NODE	4730:21	4730:21	11	]
LEAF_NODE	4730:22	4730:22	7	;
JUMP_STATEMENT	4731:3	4731:8	6	break DESTINATION ;
KEYWORD	4731:3	4731:3	7	break
LEAF_NODE	4731:3	4731:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4731:8	4731:8	7	;
LABEL	4732:2	4732:8	6	case 7 :
LEAF_NODE	4732:2	4732:2	7	case
LEAF_NODE	4732:7	4732:7	7	7
LEAF_NODE	4732:8	4732:8	7	:
EXPR_STATEMENT	4733:3	4733:20	6	boxp -> mat [ 0 ] = 0.0F ;
EXPR	4733:3	4733:3	7	boxp -> mat [ 0 ] = 0.0F
ASSIGN	4733:3	4733:16	8	boxp -> mat [ 0 ] = 0.0F
LVAL	4733:3	4733:3	9	boxp -> mat [ 0 ]
FIELD	4733:3	4733:14	10	boxp -> mat [ 0 ]
LEAF_NODE	4733:3	4733:3	11	boxp
LEAF_NODE	4733:7	4733:7	11	->
LEAF_NODE	4733:9	4733:9	11	mat
LEAF_NODE	4733:12	4733:12	11	[
EXPR	4733:13	4733:13	11	0
FIELD	4733:13	4733:13	12	0
LEAF_NODE	4733:13	4733:13	13	0
LEAF_NODE	4733:14	4733:14	11	]
ASSIGN_OP	4733:15	4733:15	9	=
LEAF_NODE	4733:15	4733:15	10	=
RVAL	4733:16	4733:16	9	0.0F
FIELD	4733:16	4733:16	10	0.0F
LEAF_NODE	4733:16	4733:16	11	0.0F
LEAF_NODE	4733:20	4733:20	7	;
EXPR_STATEMENT	4734:3	4734:21	6	boxp -> mat [ 1 ] = m1 [ 0 ] ;
EXPR	4734:3	4734:3	7	boxp -> mat [ 1 ] = m1 [ 0 ]
ASSIGN	4734:3	4734:16	8	boxp -> mat [ 1 ] = m1 [ 0 ]
LVAL	4734:3	4734:3	9	boxp -> mat [ 1 ]
FIELD	4734:3	4734:14	10	boxp -> mat [ 1 ]
LEAF_NODE	4734:3	4734:3	11	boxp
LEAF_NODE	4734:7	4734:7	11	->
LEAF_NODE	4734:9	4734:9	11	mat
LEAF_NODE	4734:12	4734:12	11	[
EXPR	4734:13	4734:13	11	1
FIELD	4734:13	4734:13	12	1
LEAF_NODE	4734:13	4734:13	13	1
LEAF_NODE	4734:14	4734:14	11	]
ASSIGN_OP	4734:15	4734:15	9	=
LEAF_NODE	4734:15	4734:15	10	=
RVAL	4734:16	4734:16	9	m1 [ 0 ]
FIELD	4734:16	4734:20	10	m1 [ 0 ]
LEAF_NODE	4734:16	4734:16	11	m1
LEAF_NODE	4734:18	4734:18	11	[
EXPR	4734:19	4734:19	11	0
FIELD	4734:19	4734:19	12	0
LEAF_NODE	4734:19	4734:19	13	0
LEAF_NODE	4734:20	4734:20	11	]
LEAF_NODE	4734:21	4734:21	7	;
EXPR_STATEMENT	4735:3	4735:21	6	boxp -> mat [ 3 ] = m1 [ 4 ] ;
EXPR	4735:3	4735:3	7	boxp -> mat [ 3 ] = m1 [ 4 ]
ASSIGN	4735:3	4735:16	8	boxp -> mat [ 3 ] = m1 [ 4 ]
LVAL	4735:3	4735:3	9	boxp -> mat [ 3 ]
FIELD	4735:3	4735:14	10	boxp -> mat [ 3 ]
LEAF_NODE	4735:3	4735:3	11	boxp
LEAF_NODE	4735:7	4735:7	11	->
LEAF_NODE	4735:9	4735:9	11	mat
LEAF_NODE	4735:12	4735:12	11	[
EXPR	4735:13	4735:13	11	3
FIELD	4735:13	4735:13	12	3
LEAF_NODE	4735:13	4735:13	13	3
LEAF_NODE	4735:14	4735:14	11	]
ASSIGN_OP	4735:15	4735:15	9	=
LEAF_NODE	4735:15	4735:15	10	=
RVAL	4735:16	4735:16	9	m1 [ 4 ]
FIELD	4735:16	4735:20	10	m1 [ 4 ]
LEAF_NODE	4735:16	4735:16	11	m1
LEAF_NODE	4735:18	4735:18	11	[
EXPR	4735:19	4735:19	11	4
FIELD	4735:19	4735:19	12	4
LEAF_NODE	4735:19	4735:19	13	4
LEAF_NODE	4735:20	4735:20	11	]
LEAF_NODE	4735:21	4735:21	7	;
EXPR_STATEMENT	4736:3	4736:20	6	boxp -> mat [ 4 ] = 0.0F ;
EXPR	4736:3	4736:3	7	boxp -> mat [ 4 ] = 0.0F
ASSIGN	4736:3	4736:16	8	boxp -> mat [ 4 ] = 0.0F
LVAL	4736:3	4736:3	9	boxp -> mat [ 4 ]
FIELD	4736:3	4736:14	10	boxp -> mat [ 4 ]
LEAF_NODE	4736:3	4736:3	11	boxp
LEAF_NODE	4736:7	4736:7	11	->
LEAF_NODE	4736:9	4736:9	11	mat
LEAF_NODE	4736:12	4736:12	11	[
EXPR	4736:13	4736:13	11	4
FIELD	4736:13	4736:13	12	4
LEAF_NODE	4736:13	4736:13	13	4
LEAF_NODE	4736:14	4736:14	11	]
ASSIGN_OP	4736:15	4736:15	9	=
LEAF_NODE	4736:15	4736:15	10	=
RVAL	4736:16	4736:16	9	0.0F
FIELD	4736:16	4736:16	10	0.0F
LEAF_NODE	4736:16	4736:16	11	0.0F
LEAF_NODE	4736:20	4736:20	7	;
JUMP_STATEMENT	4737:3	4737:8	6	break DESTINATION ;
KEYWORD	4737:3	4737:3	7	break
LEAF_NODE	4737:3	4737:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4737:8	4737:8	7	;
LABEL	4738:2	4738:8	6	case 8 :
LEAF_NODE	4738:2	4738:2	7	case
LEAF_NODE	4738:7	4738:7	7	8
LEAF_NODE	4738:8	4738:8	7	:
EXPR_STATEMENT	4739:3	4739:20	6	boxp -> mat [ 0 ] = 0.0F ;
EXPR	4739:3	4739:3	7	boxp -> mat [ 0 ] = 0.0F
ASSIGN	4739:3	4739:16	8	boxp -> mat [ 0 ] = 0.0F
LVAL	4739:3	4739:3	9	boxp -> mat [ 0 ]
FIELD	4739:3	4739:14	10	boxp -> mat [ 0 ]
LEAF_NODE	4739:3	4739:3	11	boxp
LEAF_NODE	4739:7	4739:7	11	->
LEAF_NODE	4739:9	4739:9	11	mat
LEAF_NODE	4739:12	4739:12	11	[
EXPR	4739:13	4739:13	11	0
FIELD	4739:13	4739:13	12	0
LEAF_NODE	4739:13	4739:13	13	0
LEAF_NODE	4739:14	4739:14	11	]
ASSIGN_OP	4739:15	4739:15	9	=
LEAF_NODE	4739:15	4739:15	10	=
RVAL	4739:16	4739:16	9	0.0F
FIELD	4739:16	4739:16	10	0.0F
LEAF_NODE	4739:16	4739:16	11	0.0F
LEAF_NODE	4739:20	4739:20	7	;
EXPR_STATEMENT	4740:3	4740:21	6	boxp -> mat [ 1 ] = m1 [ 0 ] ;
EXPR	4740:3	4740:3	7	boxp -> mat [ 1 ] = m1 [ 0 ]
ASSIGN	4740:3	4740:16	8	boxp -> mat [ 1 ] = m1 [ 0 ]
LVAL	4740:3	4740:3	9	boxp -> mat [ 1 ]
FIELD	4740:3	4740:14	10	boxp -> mat [ 1 ]
LEAF_NODE	4740:3	4740:3	11	boxp
LEAF_NODE	4740:7	4740:7	11	->
LEAF_NODE	4740:9	4740:9	11	mat
LEAF_NODE	4740:12	4740:12	11	[
EXPR	4740:13	4740:13	11	1
FIELD	4740:13	4740:13	12	1
LEAF_NODE	4740:13	4740:13	13	1
LEAF_NODE	4740:14	4740:14	11	]
ASSIGN_OP	4740:15	4740:15	9	=
LEAF_NODE	4740:15	4740:15	10	=
RVAL	4740:16	4740:16	9	m1 [ 0 ]
FIELD	4740:16	4740:20	10	m1 [ 0 ]
LEAF_NODE	4740:16	4740:16	11	m1
LEAF_NODE	4740:18	4740:18	11	[
EXPR	4740:19	4740:19	11	0
FIELD	4740:19	4740:19	12	0
LEAF_NODE	4740:19	4740:19	13	0
LEAF_NODE	4740:20	4740:20	11	]
LEAF_NODE	4740:21	4740:21	7	;
EXPR_STATEMENT	4741:3	4741:26	6	boxp -> mat [ 3 ] = 0.0F - m1 [ 4 ] ;
EXPR	4741:3	4741:3	7	boxp -> mat [ 3 ] = 0.0F - m1 [ 4 ]
ASSIGN	4741:3	4741:16	8	boxp -> mat [ 3 ] = 0.0F - m1 [ 4 ]
LVAL	4741:3	4741:3	9	boxp -> mat [ 3 ]
FIELD	4741:3	4741:14	10	boxp -> mat [ 3 ]
LEAF_NODE	4741:3	4741:3	11	boxp
LEAF_NODE	4741:7	4741:7	11	->
LEAF_NODE	4741:9	4741:9	11	mat
LEAF_NODE	4741:12	4741:12	11	[
EXPR	4741:13	4741:13	11	3
FIELD	4741:13	4741:13	12	3
LEAF_NODE	4741:13	4741:13	13	3
LEAF_NODE	4741:14	4741:14	11	]
ASSIGN_OP	4741:15	4741:15	9	=
LEAF_NODE	4741:15	4741:15	10	=
RVAL	4741:16	4741:21	9	0.0F - m1 [ 4 ]
FIELD	4741:16	4741:16	10	0.0F
LEAF_NODE	4741:16	4741:16	11	0.0F
LEAF_NODE	4741:20	4741:20	10	-
FIELD	4741:21	4741:25	10	m1 [ 4 ]
LEAF_NODE	4741:21	4741:21	11	m1
LEAF_NODE	4741:23	4741:23	11	[
EXPR	4741:24	4741:24	11	4
FIELD	4741:24	4741:24	12	4
LEAF_NODE	4741:24	4741:24	13	4
LEAF_NODE	4741:25	4741:25	11	]
LEAF_NODE	4741:26	4741:26	7	;
EXPR_STATEMENT	4742:3	4742:20	6	boxp -> mat [ 4 ] = 0.0F ;
EXPR	4742:3	4742:3	7	boxp -> mat [ 4 ] = 0.0F
ASSIGN	4742:3	4742:16	8	boxp -> mat [ 4 ] = 0.0F
LVAL	4742:3	4742:3	9	boxp -> mat [ 4 ]
FIELD	4742:3	4742:14	10	boxp -> mat [ 4 ]
LEAF_NODE	4742:3	4742:3	11	boxp
LEAF_NODE	4742:7	4742:7	11	->
LEAF_NODE	4742:9	4742:9	11	mat
LEAF_NODE	4742:12	4742:12	11	[
EXPR	4742:13	4742:13	11	4
FIELD	4742:13	4742:13	12	4
LEAF_NODE	4742:13	4742:13	13	4
LEAF_NODE	4742:14	4742:14	11	]
ASSIGN_OP	4742:15	4742:15	9	=
LEAF_NODE	4742:15	4742:15	10	=
RVAL	4742:16	4742:16	9	0.0F
FIELD	4742:16	4742:16	10	0.0F
LEAF_NODE	4742:16	4742:16	11	0.0F
LEAF_NODE	4742:20	4742:20	7	;
EXPR_STATEMENT	4743:3	4743:22	6	boxp -> mat [ 6 ] += m1 [ 4 ] ;
EXPR	4743:3	4743:3	7	boxp -> mat [ 6 ] += m1 [ 4 ]
ASSIGN	4743:3	4743:17	8	boxp -> mat [ 6 ] += m1 [ 4 ]
LVAL	4743:3	4743:3	9	boxp -> mat [ 6 ]
FIELD	4743:3	4743:14	10	boxp -> mat [ 6 ]
LEAF_NODE	4743:3	4743:3	11	boxp
LEAF_NODE	4743:7	4743:7	11	->
LEAF_NODE	4743:9	4743:9	11	mat
LEAF_NODE	4743:12	4743:12	11	[
EXPR	4743:13	4743:13	11	6
FIELD	4743:13	4743:13	12	6
LEAF_NODE	4743:13	4743:13	13	6
LEAF_NODE	4743:14	4743:14	11	]
ASSIGN_OP	4743:15	4743:15	9	+=
LEAF_NODE	4743:15	4743:15	10	+=
RVAL	4743:17	4743:17	9	m1 [ 4 ]
FIELD	4743:17	4743:21	10	m1 [ 4 ]
LEAF_NODE	4743:17	4743:17	11	m1
LEAF_NODE	4743:19	4743:19	11	[
EXPR	4743:20	4743:20	11	4
FIELD	4743:20	4743:20	12	4
LEAF_NODE	4743:20	4743:20	13	4
LEAF_NODE	4743:21	4743:21	11	]
LEAF_NODE	4743:22	4743:22	7	;
JUMP_STATEMENT	4744:3	4744:8	6	break DESTINATION ;
KEYWORD	4744:3	4744:3	7	break
LEAF_NODE	4744:3	4744:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4744:8	4744:8	7	;
LEAF_NODE	4745:1	4745:1	5	}
JUMP_STATEMENT	4747:1	4747:7	3	return DESTINATION ;
KEYWORD	4747:1	4747:1	4	return
LEAF_NODE	4747:1	4747:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	4747:7	4747:7	4	;
LEAF_NODE	4748:0	4748:0	2	}
FUNCTION_DEF	4750:0	4806:0	1	
RETURN_TYPE	4750:0	4750:0	2	void
TYPE_NAME	4750:0	4750:0	3	void
LEAF_NODE	4750:0	4750:0	4	void
FUNCTION_NAME	4750:5	4750:5	2	t2p_compose_pdf_page_orient_flip
LEAF_NODE	4750:5	4750:5	3	t2p_compose_pdf_page_orient_flip
PARAMETER_LIST	4750:37	4750:71	2	( T2P_BOX * boxp , uint16 orientation )
LEAF_NODE	4750:37	4750:37	3	(
PARAMETER_DECL	4750:38	4750:47	3	T2P_BOX * boxp
TYPE	4750:38	4750:45	4	T2P_BOX *
TYPE_NAME	4750:38	4750:38	5	T2P_BOX
LEAF_NODE	4750:38	4750:38	6	T2P_BOX
POINTER	4750:45	4750:45	5	*
LEAF_NODE	4750:45	4750:45	6	*
NAME	4750:47	4750:47	4	boxp
LEAF_NODE	4750:47	4750:47	5	boxp
LEAF_NODE	4750:51	4750:51	3	,
PARAMETER_DECL	4750:53	4750:60	3	uint16 orientation
TYPE	4750:53	4750:53	4	uint16
TYPE_NAME	4750:53	4750:53	5	uint16
LEAF_NODE	4750:53	4750:53	6	uint16
NAME	4750:60	4750:60	4	orientation
LEAF_NODE	4750:60	4750:60	5	orientation
LEAF_NODE	4750:71	4750:71	3	)
LEAF_NODE	4750:72	4750:72	2	{
STATEMENTS	4752:1	4805:1	2	
SIMPLE_DECL	4752:1	4752:12	3	float [ 9 ] m1 ;
VAR_DECL	4752:1	4752:7	4	float [ 9 ] m1
TYPE	4752:1	4752:9	5	float [ 9 ]
TYPE_NAME	4752:1	4752:1	6	float
LEAF_NODE	4752:1	4752:1	7	float
TYPE_SUFFIX	4752:9	4752:11	6	[ 9 ]
LEAF_NODE	4752:9	4752:9	7	[
FIELD	4752:10	4752:10	7	9
LEAF_NODE	4752:10	4752:10	8	9
LEAF_NODE	4752:11	4752:11	7	]
NAME	4752:7	4752:7	5	m1
LEAF_NODE	4752:7	4752:7	6	m1
LEAF_NODE	4752:12	4752:12	4	;
SIMPLE_DECL	4753:1	4753:12	3	float f ; f = 0.0 ;
VAR_DECL	4753:1	4753:7	4	float f ; f = 0.0
TYPE	4753:1	4753:1	5	float
TYPE_NAME	4753:1	4753:1	6	float
LEAF_NODE	4753:1	4753:1	7	float
NAME	4753:7	4753:7	5	f
LEAF_NODE	4753:7	4753:7	6	f
LEAF_NODE	0:0	0:0	5	;
INIT	4753:7	4753:7	5	f = 0.0
ASSIGN	4753:7	4753:9	6	f = 0.0
LVAL	4753:7	4753:7	7	f
NAME	4753:7	4753:7	8	f
LEAF_NODE	4753:7	4753:7	9	f
ASSIGN_OP	4753:8	4753:8	7	=
LEAF_NODE	4753:8	4753:8	8	=
RVAL	4753:9	4753:9	7	0.0
FIELD	4753:9	4753:9	8	0.0
LEAF_NODE	4753:9	4753:9	9	0.0
LEAF_NODE	4753:12	4753:12	4	;
SELECTION	4755:1	4755:25	3	
KEYWORD	4755:1	4755:1	4	if
LEAF_NODE	4755:1	4755:1	5	if
LEAF_NODE	4755:3	4755:3	4	(
CONDITION	4755:5	4755:5	4	boxp -> x1 > boxp -> x2
EXPR	4755:5	4755:16	5	boxp -> x1 > boxp -> x2
FIELD	4755:5	4755:11	6	boxp -> x1
LEAF_NODE	4755:5	4755:5	7	boxp
LEAF_NODE	4755:9	4755:9	7	->
LEAF_NODE	4755:11	4755:11	7	x1
REL_OPERATOR	4755:14	4755:14	6	>
LEAF_NODE	4755:14	4755:14	7	>
FIELD	4755:16	4755:22	6	boxp -> x2
LEAF_NODE	4755:16	4755:16	7	boxp
LEAF_NODE	4755:20	4755:20	7	->
LEAF_NODE	4755:22	4755:22	7	x2
LEAF_NODE	4755:24	4755:24	4	)
STATEMENTS	4755:25	4759:1	4	
LEAF_NODE	4755:25	4755:25	5	{
STATEMENTS	4756:2	4758:2	5	
EXPR_STATEMENT	4756:2	4756:12	6	f = boxp -> x1 ;
EXPR	4756:2	4756:2	7	f = boxp -> x1
ASSIGN	4756:2	4756:4	8	f = boxp -> x1
LVAL	4756:2	4756:2	9	f
FIELD	4756:2	4756:2	10	f
LEAF_NODE	4756:2	4756:2	11	f
ASSIGN_OP	4756:3	4756:3	9	=
LEAF_NODE	4756:3	4756:3	10	=
RVAL	4756:4	4756:4	9	boxp -> x1
FIELD	4756:4	4756:10	10	boxp -> x1
LEAF_NODE	4756:4	4756:4	11	boxp
LEAF_NODE	4756:8	4756:8	11	->
LEAF_NODE	4756:10	4756:10	11	x1
LEAF_NODE	4756:12	4756:12	7	;
EXPR_STATEMENT	4757:2	4757:19	6	boxp -> x1 = boxp -> x2 ;
EXPR	4757:2	4757:2	7	boxp -> x1 = boxp -> x2
ASSIGN	4757:2	4757:11	8	boxp -> x1 = boxp -> x2
LVAL	4757:2	4757:2	9	boxp -> x1
FIELD	4757:2	4757:8	10	boxp -> x1
LEAF_NODE	4757:2	4757:2	11	boxp
LEAF_NODE	4757:6	4757:6	11	->
LEAF_NODE	4757:8	4757:8	11	x1
ASSIGN_OP	4757:10	4757:10	9	=
LEAF_NODE	4757:10	4757:10	10	=
RVAL	4757:11	4757:11	9	boxp -> x2
FIELD	4757:11	4757:17	10	boxp -> x2
LEAF_NODE	4757:11	4757:11	11	boxp
LEAF_NODE	4757:15	4757:15	11	->
LEAF_NODE	4757:17	4757:17	11	x2
LEAF_NODE	4757:19	4757:19	7	;
EXPR_STATEMENT	4758:2	4758:14	6	boxp -> x2 = f ;
EXPR	4758:2	4758:2	7	boxp -> x2 = f
ASSIGN	4758:2	4758:13	8	boxp -> x2 = f
LVAL	4758:2	4758:2	9	boxp -> x2
FIELD	4758:2	4758:8	10	boxp -> x2
LEAF_NODE	4758:2	4758:2	11	boxp
LEAF_NODE	4758:6	4758:6	11	->
LEAF_NODE	4758:8	4758:8	11	x2
ASSIGN_OP	4758:11	4758:11	9	=
LEAF_NODE	4758:11	4758:11	10	=
RVAL	4758:13	4758:13	9	f
FIELD	4758:13	4758:13	10	f
LEAF_NODE	4758:13	4758:13	11	f
LEAF_NODE	4758:14	4758:14	7	;
LEAF_NODE	4759:1	4759:1	5	}
SELECTION	4760:1	4760:25	3	
KEYWORD	4760:1	4760:1	4	if
LEAF_NODE	4760:1	4760:1	5	if
LEAF_NODE	4760:3	4760:3	4	(
CONDITION	4760:5	4760:5	4	boxp -> y1 > boxp -> y2
EXPR	4760:5	4760:16	5	boxp -> y1 > boxp -> y2
FIELD	4760:5	4760:11	6	boxp -> y1
LEAF_NODE	4760:5	4760:5	7	boxp
LEAF_NODE	4760:9	4760:9	7	->
LEAF_NODE	4760:11	4760:11	7	y1
REL_OPERATOR	4760:14	4760:14	6	>
LEAF_NODE	4760:14	4760:14	7	>
FIELD	4760:16	4760:22	6	boxp -> y2
LEAF_NODE	4760:16	4760:16	7	boxp
LEAF_NODE	4760:20	4760:20	7	->
LEAF_NODE	4760:22	4760:22	7	y2
LEAF_NODE	4760:24	4760:24	4	)
STATEMENTS	4760:25	4764:1	4	
LEAF_NODE	4760:25	4760:25	5	{
STATEMENTS	4761:2	4763:2	5	
EXPR_STATEMENT	4761:2	4761:12	6	f = boxp -> y1 ;
EXPR	4761:2	4761:2	7	f = boxp -> y1
ASSIGN	4761:2	4761:4	8	f = boxp -> y1
LVAL	4761:2	4761:2	9	f
FIELD	4761:2	4761:2	10	f
LEAF_NODE	4761:2	4761:2	11	f
ASSIGN_OP	4761:3	4761:3	9	=
LEAF_NODE	4761:3	4761:3	10	=
RVAL	4761:4	4761:4	9	boxp -> y1
FIELD	4761:4	4761:10	10	boxp -> y1
LEAF_NODE	4761:4	4761:4	11	boxp
LEAF_NODE	4761:8	4761:8	11	->
LEAF_NODE	4761:10	4761:10	11	y1
LEAF_NODE	4761:12	4761:12	7	;
EXPR_STATEMENT	4762:2	4762:19	6	boxp -> y1 = boxp -> y2 ;
EXPR	4762:2	4762:2	7	boxp -> y1 = boxp -> y2
ASSIGN	4762:2	4762:11	8	boxp -> y1 = boxp -> y2
LVAL	4762:2	4762:2	9	boxp -> y1
FIELD	4762:2	4762:8	10	boxp -> y1
LEAF_NODE	4762:2	4762:2	11	boxp
LEAF_NODE	4762:6	4762:6	11	->
LEAF_NODE	4762:8	4762:8	11	y1
ASSIGN_OP	4762:10	4762:10	9	=
LEAF_NODE	4762:10	4762:10	10	=
RVAL	4762:11	4762:11	9	boxp -> y2
FIELD	4762:11	4762:17	10	boxp -> y2
LEAF_NODE	4762:11	4762:11	11	boxp
LEAF_NODE	4762:15	4762:15	11	->
LEAF_NODE	4762:17	4762:17	11	y2
LEAF_NODE	4762:19	4762:19	7	;
EXPR_STATEMENT	4763:2	4763:14	6	boxp -> y2 = f ;
EXPR	4763:2	4763:2	7	boxp -> y2 = f
ASSIGN	4763:2	4763:13	8	boxp -> y2 = f
LVAL	4763:2	4763:2	9	boxp -> y2
FIELD	4763:2	4763:8	10	boxp -> y2
LEAF_NODE	4763:2	4763:2	11	boxp
LEAF_NODE	4763:6	4763:6	11	->
LEAF_NODE	4763:8	4763:8	11	y2
ASSIGN_OP	4763:11	4763:11	9	=
LEAF_NODE	4763:11	4763:11	10	=
RVAL	4763:13	4763:13	9	f
FIELD	4763:13	4763:13	10	f
LEAF_NODE	4763:13	4763:13	11	f
LEAF_NODE	4763:14	4763:14	7	;
LEAF_NODE	4764:1	4764:1	5	}
EXPR_STATEMENT	4765:1	4765:37	3	boxp -> mat [ 0 ] = m1 [ 0 ] = boxp -> x2 - boxp -> x1 ;
EXPR	4765:1	4765:1	4	boxp -> mat [ 0 ] = m1 [ 0 ] = boxp -> x2 - boxp -> x1
ASSIGN	4765:1	4765:14	5	boxp -> mat [ 0 ] = m1 [ 0 ] = boxp -> x2 - boxp -> x1
LVAL	4765:1	4765:1	6	boxp -> mat [ 0 ]
FIELD	4765:1	4765:12	7	boxp -> mat [ 0 ]
LEAF_NODE	4765:1	4765:1	8	boxp
LEAF_NODE	4765:5	4765:5	8	->
LEAF_NODE	4765:7	4765:7	8	mat
LEAF_NODE	4765:10	4765:10	8	[
EXPR	4765:11	4765:11	8	0
FIELD	4765:11	4765:11	9	0
LEAF_NODE	4765:11	4765:11	10	0
LEAF_NODE	4765:12	4765:12	8	]
ASSIGN_OP	4765:13	4765:13	6	=
LEAF_NODE	4765:13	4765:13	7	=
RVAL	4765:14	4765:14	6	m1 [ 0 ] = boxp -> x2 - boxp -> x1
ASSIGN	4765:14	4765:20	7	m1 [ 0 ] = boxp -> x2 - boxp -> x1
LVAL	4765:14	4765:14	8	m1 [ 0 ]
FIELD	4765:14	4765:18	9	m1 [ 0 ]
LEAF_NODE	4765:14	4765:14	10	m1
LEAF_NODE	4765:16	4765:16	10	[
EXPR	4765:17	4765:17	10	0
FIELD	4765:17	4765:17	11	0
LEAF_NODE	4765:17	4765:17	12	0
LEAF_NODE	4765:18	4765:18	10	]
ASSIGN_OP	4765:19	4765:19	8	=
LEAF_NODE	4765:19	4765:19	9	=
RVAL	4765:20	4765:29	8	boxp -> x2 - boxp -> x1
FIELD	4765:20	4765:26	9	boxp -> x2
LEAF_NODE	4765:20	4765:20	10	boxp
LEAF_NODE	4765:24	4765:24	10	->
LEAF_NODE	4765:26	4765:26	10	x2
LEAF_NODE	4765:28	4765:28	9	-
FIELD	4765:29	4765:35	9	boxp -> x1
LEAF_NODE	4765:29	4765:29	10	boxp
LEAF_NODE	4765:33	4765:33	10	->
LEAF_NODE	4765:35	4765:35	10	x1
LEAF_NODE	4765:37	4765:37	4	;
EXPR_STATEMENT	4766:1	4766:24	3	boxp -> mat [ 1 ] = m1 [ 1 ] = 0.0F ;
EXPR	4766:1	4766:1	4	boxp -> mat [ 1 ] = m1 [ 1 ] = 0.0F
ASSIGN	4766:1	4766:14	5	boxp -> mat [ 1 ] = m1 [ 1 ] = 0.0F
LVAL	4766:1	4766:1	6	boxp -> mat [ 1 ]
FIELD	4766:1	4766:12	7	boxp -> mat [ 1 ]
LEAF_NODE	4766:1	4766:1	8	boxp
LEAF_NODE	4766:5	4766:5	8	->
LEAF_NODE	4766:7	4766:7	8	mat
LEAF_NODE	4766:10	4766:10	8	[
EXPR	4766:11	4766:11	8	1
FIELD	4766:11	4766:11	9	1
LEAF_NODE	4766:11	4766:11	10	1
LEAF_NODE	4766:12	4766:12	8	]
ASSIGN_OP	4766:13	4766:13	6	=
LEAF_NODE	4766:13	4766:13	7	=
RVAL	4766:14	4766:14	6	m1 [ 1 ] = 0.0F
ASSIGN	4766:14	4766:20	7	m1 [ 1 ] = 0.0F
LVAL	4766:14	4766:14	8	m1 [ 1 ]
FIELD	4766:14	4766:18	9	m1 [ 1 ]
LEAF_NODE	4766:14	4766:14	10	m1
LEAF_NODE	4766:16	4766:16	10	[
EXPR	4766:17	4766:17	10	1
FIELD	4766:17	4766:17	11	1
LEAF_NODE	4766:17	4766:17	12	1
LEAF_NODE	4766:18	4766:18	10	]
ASSIGN_OP	4766:19	4766:19	8	=
LEAF_NODE	4766:19	4766:19	9	=
RVAL	4766:20	4766:20	8	0.0F
FIELD	4766:20	4766:20	9	0.0F
LEAF_NODE	4766:20	4766:20	10	0.0F
LEAF_NODE	4766:24	4766:24	4	;
EXPR_STATEMENT	4767:1	4767:24	3	boxp -> mat [ 2 ] = m1 [ 2 ] = 0.0F ;
EXPR	4767:1	4767:1	4	boxp -> mat [ 2 ] = m1 [ 2 ] = 0.0F
ASSIGN	4767:1	4767:14	5	boxp -> mat [ 2 ] = m1 [ 2 ] = 0.0F
LVAL	4767:1	4767:1	6	boxp -> mat [ 2 ]
FIELD	4767:1	4767:12	7	boxp -> mat [ 2 ]
LEAF_NODE	4767:1	4767:1	8	boxp
LEAF_NODE	4767:5	4767:5	8	->
LEAF_NODE	4767:7	4767:7	8	mat
LEAF_NODE	4767:10	4767:10	8	[
EXPR	4767:11	4767:11	8	2
FIELD	4767:11	4767:11	9	2
LEAF_NODE	4767:11	4767:11	10	2
LEAF_NODE	4767:12	4767:12	8	]
ASSIGN_OP	4767:13	4767:13	6	=
LEAF_NODE	4767:13	4767:13	7	=
RVAL	4767:14	4767:14	6	m1 [ 2 ] = 0.0F
ASSIGN	4767:14	4767:20	7	m1 [ 2 ] = 0.0F
LVAL	4767:14	4767:14	8	m1 [ 2 ]
FIELD	4767:14	4767:18	9	m1 [ 2 ]
LEAF_NODE	4767:14	4767:14	10	m1
LEAF_NODE	4767:16	4767:16	10	[
EXPR	4767:17	4767:17	10	2
FIELD	4767:17	4767:17	11	2
LEAF_NODE	4767:17	4767:17	12	2
LEAF_NODE	4767:18	4767:18	10	]
ASSIGN_OP	4767:19	4767:19	8	=
LEAF_NODE	4767:19	4767:19	9	=
RVAL	4767:20	4767:20	8	0.0F
FIELD	4767:20	4767:20	9	0.0F
LEAF_NODE	4767:20	4767:20	10	0.0F
LEAF_NODE	4767:24	4767:24	4	;
EXPR_STATEMENT	4768:1	4768:24	3	boxp -> mat [ 3 ] = m1 [ 3 ] = 0.0F ;
EXPR	4768:1	4768:1	4	boxp -> mat [ 3 ] = m1 [ 3 ] = 0.0F
ASSIGN	4768:1	4768:14	5	boxp -> mat [ 3 ] = m1 [ 3 ] = 0.0F
LVAL	4768:1	4768:1	6	boxp -> mat [ 3 ]
FIELD	4768:1	4768:12	7	boxp -> mat [ 3 ]
LEAF_NODE	4768:1	4768:1	8	boxp
LEAF_NODE	4768:5	4768:5	8	->
LEAF_NODE	4768:7	4768:7	8	mat
LEAF_NODE	4768:10	4768:10	8	[
EXPR	4768:11	4768:11	8	3
FIELD	4768:11	4768:11	9	3
LEAF_NODE	4768:11	4768:11	10	3
LEAF_NODE	4768:12	4768:12	8	]
ASSIGN_OP	4768:13	4768:13	6	=
LEAF_NODE	4768:13	4768:13	7	=
RVAL	4768:14	4768:14	6	m1 [ 3 ] = 0.0F
ASSIGN	4768:14	4768:20	7	m1 [ 3 ] = 0.0F
LVAL	4768:14	4768:14	8	m1 [ 3 ]
FIELD	4768:14	4768:18	9	m1 [ 3 ]
LEAF_NODE	4768:14	4768:14	10	m1
LEAF_NODE	4768:16	4768:16	10	[
EXPR	4768:17	4768:17	10	3
FIELD	4768:17	4768:17	11	3
LEAF_NODE	4768:17	4768:17	12	3
LEAF_NODE	4768:18	4768:18	10	]
ASSIGN_OP	4768:19	4768:19	8	=
LEAF_NODE	4768:19	4768:19	9	=
RVAL	4768:20	4768:20	8	0.0F
FIELD	4768:20	4768:20	9	0.0F
LEAF_NODE	4768:20	4768:20	10	0.0F
LEAF_NODE	4768:24	4768:24	4	;
EXPR_STATEMENT	4769:1	4769:37	3	boxp -> mat [ 4 ] = m1 [ 4 ] = boxp -> y2 - boxp -> y1 ;
EXPR	4769:1	4769:1	4	boxp -> mat [ 4 ] = m1 [ 4 ] = boxp -> y2 - boxp -> y1
ASSIGN	4769:1	4769:14	5	boxp -> mat [ 4 ] = m1 [ 4 ] = boxp -> y2 - boxp -> y1
LVAL	4769:1	4769:1	6	boxp -> mat [ 4 ]
FIELD	4769:1	4769:12	7	boxp -> mat [ 4 ]
LEAF_NODE	4769:1	4769:1	8	boxp
LEAF_NODE	4769:5	4769:5	8	->
LEAF_NODE	4769:7	4769:7	8	mat
LEAF_NODE	4769:10	4769:10	8	[
EXPR	4769:11	4769:11	8	4
FIELD	4769:11	4769:11	9	4
LEAF_NODE	4769:11	4769:11	10	4
LEAF_NODE	4769:12	4769:12	8	]
ASSIGN_OP	4769:13	4769:13	6	=
LEAF_NODE	4769:13	4769:13	7	=
RVAL	4769:14	4769:14	6	m1 [ 4 ] = boxp -> y2 - boxp -> y1
ASSIGN	4769:14	4769:20	7	m1 [ 4 ] = boxp -> y2 - boxp -> y1
LVAL	4769:14	4769:14	8	m1 [ 4 ]
FIELD	4769:14	4769:18	9	m1 [ 4 ]
LEAF_NODE	4769:14	4769:14	10	m1
LEAF_NODE	4769:16	4769:16	10	[
EXPR	4769:17	4769:17	10	4
FIELD	4769:17	4769:17	11	4
LEAF_NODE	4769:17	4769:17	12	4
LEAF_NODE	4769:18	4769:18	10	]
ASSIGN_OP	4769:19	4769:19	8	=
LEAF_NODE	4769:19	4769:19	9	=
RVAL	4769:20	4769:29	8	boxp -> y2 - boxp -> y1
FIELD	4769:20	4769:26	9	boxp -> y2
LEAF_NODE	4769:20	4769:20	10	boxp
LEAF_NODE	4769:24	4769:24	10	->
LEAF_NODE	4769:26	4769:26	10	y2
LEAF_NODE	4769:28	4769:28	9	-
FIELD	4769:29	4769:35	9	boxp -> y1
LEAF_NODE	4769:29	4769:29	10	boxp
LEAF_NODE	4769:33	4769:33	10	->
LEAF_NODE	4769:35	4769:35	10	y1
LEAF_NODE	4769:37	4769:37	4	;
EXPR_STATEMENT	4770:1	4770:24	3	boxp -> mat [ 5 ] = m1 [ 5 ] = 0.0F ;
EXPR	4770:1	4770:1	4	boxp -> mat [ 5 ] = m1 [ 5 ] = 0.0F
ASSIGN	4770:1	4770:14	5	boxp -> mat [ 5 ] = m1 [ 5 ] = 0.0F
LVAL	4770:1	4770:1	6	boxp -> mat [ 5 ]
FIELD	4770:1	4770:12	7	boxp -> mat [ 5 ]
LEAF_NODE	4770:1	4770:1	8	boxp
LEAF_NODE	4770:5	4770:5	8	->
LEAF_NODE	4770:7	4770:7	8	mat
LEAF_NODE	4770:10	4770:10	8	[
EXPR	4770:11	4770:11	8	5
FIELD	4770:11	4770:11	9	5
LEAF_NODE	4770:11	4770:11	10	5
LEAF_NODE	4770:12	4770:12	8	]
ASSIGN_OP	4770:13	4770:13	6	=
LEAF_NODE	4770:13	4770:13	7	=
RVAL	4770:14	4770:14	6	m1 [ 5 ] = 0.0F
ASSIGN	4770:14	4770:20	7	m1 [ 5 ] = 0.0F
LVAL	4770:14	4770:14	8	m1 [ 5 ]
FIELD	4770:14	4770:18	9	m1 [ 5 ]
LEAF_NODE	4770:14	4770:14	10	m1
LEAF_NODE	4770:16	4770:16	10	[
EXPR	4770:17	4770:17	10	5
FIELD	4770:17	4770:17	11	5
LEAF_NODE	4770:17	4770:17	12	5
LEAF_NODE	4770:18	4770:18	10	]
ASSIGN_OP	4770:19	4770:19	8	=
LEAF_NODE	4770:19	4770:19	9	=
RVAL	4770:20	4770:20	8	0.0F
FIELD	4770:20	4770:20	9	0.0F
LEAF_NODE	4770:20	4770:20	10	0.0F
LEAF_NODE	4770:24	4770:24	4	;
EXPR_STATEMENT	4771:1	4771:28	3	boxp -> mat [ 6 ] = m1 [ 6 ] = boxp -> x1 ;
EXPR	4771:1	4771:1	4	boxp -> mat [ 6 ] = m1 [ 6 ] = boxp -> x1
ASSIGN	4771:1	4771:14	5	boxp -> mat [ 6 ] = m1 [ 6 ] = boxp -> x1
LVAL	4771:1	4771:1	6	boxp -> mat [ 6 ]
FIELD	4771:1	4771:12	7	boxp -> mat [ 6 ]
LEAF_NODE	4771:1	4771:1	8	boxp
LEAF_NODE	4771:5	4771:5	8	->
LEAF_NODE	4771:7	4771:7	8	mat
LEAF_NODE	4771:10	4771:10	8	[
EXPR	4771:11	4771:11	8	6
FIELD	4771:11	4771:11	9	6
LEAF_NODE	4771:11	4771:11	10	6
LEAF_NODE	4771:12	4771:12	8	]
ASSIGN_OP	4771:13	4771:13	6	=
LEAF_NODE	4771:13	4771:13	7	=
RVAL	4771:14	4771:14	6	m1 [ 6 ] = boxp -> x1
ASSIGN	4771:14	4771:20	7	m1 [ 6 ] = boxp -> x1
LVAL	4771:14	4771:14	8	m1 [ 6 ]
FIELD	4771:14	4771:18	9	m1 [ 6 ]
LEAF_NODE	4771:14	4771:14	10	m1
LEAF_NODE	4771:16	4771:16	10	[
EXPR	4771:17	4771:17	10	6
FIELD	4771:17	4771:17	11	6
LEAF_NODE	4771:17	4771:17	12	6
LEAF_NODE	4771:18	4771:18	10	]
ASSIGN_OP	4771:19	4771:19	8	=
LEAF_NODE	4771:19	4771:19	9	=
RVAL	4771:20	4771:20	8	boxp -> x1
FIELD	4771:20	4771:26	9	boxp -> x1
LEAF_NODE	4771:20	4771:20	10	boxp
LEAF_NODE	4771:24	4771:24	10	->
LEAF_NODE	4771:26	4771:26	10	x1
LEAF_NODE	4771:28	4771:28	4	;
EXPR_STATEMENT	4772:1	4772:28	3	boxp -> mat [ 7 ] = m1 [ 7 ] = boxp -> y1 ;
EXPR	4772:1	4772:1	4	boxp -> mat [ 7 ] = m1 [ 7 ] = boxp -> y1
ASSIGN	4772:1	4772:14	5	boxp -> mat [ 7 ] = m1 [ 7 ] = boxp -> y1
LVAL	4772:1	4772:1	6	boxp -> mat [ 7 ]
FIELD	4772:1	4772:12	7	boxp -> mat [ 7 ]
LEAF_NODE	4772:1	4772:1	8	boxp
LEAF_NODE	4772:5	4772:5	8	->
LEAF_NODE	4772:7	4772:7	8	mat
LEAF_NODE	4772:10	4772:10	8	[
EXPR	4772:11	4772:11	8	7
FIELD	4772:11	4772:11	9	7
LEAF_NODE	4772:11	4772:11	10	7
LEAF_NODE	4772:12	4772:12	8	]
ASSIGN_OP	4772:13	4772:13	6	=
LEAF_NODE	4772:13	4772:13	7	=
RVAL	4772:14	4772:14	6	m1 [ 7 ] = boxp -> y1
ASSIGN	4772:14	4772:20	7	m1 [ 7 ] = boxp -> y1
LVAL	4772:14	4772:14	8	m1 [ 7 ]
FIELD	4772:14	4772:18	9	m1 [ 7 ]
LEAF_NODE	4772:14	4772:14	10	m1
LEAF_NODE	4772:16	4772:16	10	[
EXPR	4772:17	4772:17	10	7
FIELD	4772:17	4772:17	11	7
LEAF_NODE	4772:17	4772:17	12	7
LEAF_NODE	4772:18	4772:18	10	]
ASSIGN_OP	4772:19	4772:19	8	=
LEAF_NODE	4772:19	4772:19	9	=
RVAL	4772:20	4772:20	8	boxp -> y1
FIELD	4772:20	4772:26	9	boxp -> y1
LEAF_NODE	4772:20	4772:20	10	boxp
LEAF_NODE	4772:24	4772:24	10	->
LEAF_NODE	4772:26	4772:26	10	y1
LEAF_NODE	4772:28	4772:28	4	;
EXPR_STATEMENT	4773:1	4773:24	3	boxp -> mat [ 8 ] = m1 [ 8 ] = 1.0F ;
EXPR	4773:1	4773:1	4	boxp -> mat [ 8 ] = m1 [ 8 ] = 1.0F
ASSIGN	4773:1	4773:14	5	boxp -> mat [ 8 ] = m1 [ 8 ] = 1.0F
LVAL	4773:1	4773:1	6	boxp -> mat [ 8 ]
FIELD	4773:1	4773:12	7	boxp -> mat [ 8 ]
LEAF_NODE	4773:1	4773:1	8	boxp
LEAF_NODE	4773:5	4773:5	8	->
LEAF_NODE	4773:7	4773:7	8	mat
LEAF_NODE	4773:10	4773:10	8	[
EXPR	4773:11	4773:11	8	8
FIELD	4773:11	4773:11	9	8
LEAF_NODE	4773:11	4773:11	10	8
LEAF_NODE	4773:12	4773:12	8	]
ASSIGN_OP	4773:13	4773:13	6	=
LEAF_NODE	4773:13	4773:13	7	=
RVAL	4773:14	4773:14	6	m1 [ 8 ] = 1.0F
ASSIGN	4773:14	4773:20	7	m1 [ 8 ] = 1.0F
LVAL	4773:14	4773:14	8	m1 [ 8 ]
FIELD	4773:14	4773:18	9	m1 [ 8 ]
LEAF_NODE	4773:14	4773:14	10	m1
LEAF_NODE	4773:16	4773:16	10	[
EXPR	4773:17	4773:17	10	8
FIELD	4773:17	4773:17	11	8
LEAF_NODE	4773:17	4773:17	12	8
LEAF_NODE	4773:18	4773:18	10	]
ASSIGN_OP	4773:19	4773:19	8	=
LEAF_NODE	4773:19	4773:19	9	=
RVAL	4773:20	4773:20	8	1.0F
FIELD	4773:20	4773:20	9	1.0F
LEAF_NODE	4773:20	4773:20	10	1.0F
LEAF_NODE	4773:24	4773:24	4	;
SELECTION	4774:1	4774:20	3	
KEYWORD	4774:1	4774:1	4	switch
LEAF_NODE	4774:1	4774:1	5	switch
LEAF_NODE	4774:7	4774:7	4	(
CONDITION	4774:8	4774:8	4	orientation
EXPR	4774:8	4774:8	5	orientation
FIELD	4774:8	4774:8	6	orientation
LEAF_NODE	4774:8	4774:8	7	orientation
LEAF_NODE	4774:19	4774:19	4	)
STATEMENTS	4774:20	4803:1	4	
LEAF_NODE	4774:20	4774:20	5	{
STATEMENTS	4775:2	4802:3	5	
LABEL	4775:2	4775:8	6	case 5 :
LEAF_NODE	4775:2	4775:2	7	case
LEAF_NODE	4775:7	4775:7	7	5
LEAF_NODE	4775:8	4775:8	7	:
EXPR_STATEMENT	4776:3	4776:20	6	boxp -> mat [ 0 ] = 0.0F ;
EXPR	4776:3	4776:3	7	boxp -> mat [ 0 ] = 0.0F
ASSIGN	4776:3	4776:16	8	boxp -> mat [ 0 ] = 0.0F
LVAL	4776:3	4776:3	9	boxp -> mat [ 0 ]
FIELD	4776:3	4776:14	10	boxp -> mat [ 0 ]
LEAF_NODE	4776:3	4776:3	11	boxp
LEAF_NODE	4776:7	4776:7	11	->
LEAF_NODE	4776:9	4776:9	11	mat
LEAF_NODE	4776:12	4776:12	11	[
EXPR	4776:13	4776:13	11	0
FIELD	4776:13	4776:13	12	0
LEAF_NODE	4776:13	4776:13	13	0
LEAF_NODE	4776:14	4776:14	11	]
ASSIGN_OP	4776:15	4776:15	9	=
LEAF_NODE	4776:15	4776:15	10	=
RVAL	4776:16	4776:16	9	0.0F
FIELD	4776:16	4776:16	10	0.0F
LEAF_NODE	4776:16	4776:16	11	0.0F
LEAF_NODE	4776:20	4776:20	7	;
EXPR_STATEMENT	4777:3	4777:26	6	boxp -> mat [ 1 ] = 0.0F - m1 [ 4 ] ;
EXPR	4777:3	4777:3	7	boxp -> mat [ 1 ] = 0.0F - m1 [ 4 ]
ASSIGN	4777:3	4777:16	8	boxp -> mat [ 1 ] = 0.0F - m1 [ 4 ]
LVAL	4777:3	4777:3	9	boxp -> mat [ 1 ]
FIELD	4777:3	4777:14	10	boxp -> mat [ 1 ]
LEAF_NODE	4777:3	4777:3	11	boxp
LEAF_NODE	4777:7	4777:7	11	->
LEAF_NODE	4777:9	4777:9	11	mat
LEAF_NODE	4777:12	4777:12	11	[
EXPR	4777:13	4777:13	11	1
FIELD	4777:13	4777:13	12	1
LEAF_NODE	4777:13	4777:13	13	1
LEAF_NODE	4777:14	4777:14	11	]
ASSIGN_OP	4777:15	4777:15	9	=
LEAF_NODE	4777:15	4777:15	10	=
RVAL	4777:16	4777:21	9	0.0F - m1 [ 4 ]
FIELD	4777:16	4777:16	10	0.0F
LEAF_NODE	4777:16	4777:16	11	0.0F
LEAF_NODE	4777:20	4777:20	10	-
FIELD	4777:21	4777:25	10	m1 [ 4 ]
LEAF_NODE	4777:21	4777:21	11	m1
LEAF_NODE	4777:23	4777:23	11	[
EXPR	4777:24	4777:24	11	4
FIELD	4777:24	4777:24	12	4
LEAF_NODE	4777:24	4777:24	13	4
LEAF_NODE	4777:25	4777:25	11	]
LEAF_NODE	4777:26	4777:26	7	;
EXPR_STATEMENT	4778:3	4778:26	6	boxp -> mat [ 3 ] = 0.0F - m1 [ 0 ] ;
EXPR	4778:3	4778:3	7	boxp -> mat [ 3 ] = 0.0F - m1 [ 0 ]
ASSIGN	4778:3	4778:16	8	boxp -> mat [ 3 ] = 0.0F - m1 [ 0 ]
LVAL	4778:3	4778:3	9	boxp -> mat [ 3 ]
FIELD	4778:3	4778:14	10	boxp -> mat [ 3 ]
LEAF_NODE	4778:3	4778:3	11	boxp
LEAF_NODE	4778:7	4778:7	11	->
LEAF_NODE	4778:9	4778:9	11	mat
LEAF_NODE	4778:12	4778:12	11	[
EXPR	4778:13	4778:13	11	3
FIELD	4778:13	4778:13	12	3
LEAF_NODE	4778:13	4778:13	13	3
LEAF_NODE	4778:14	4778:14	11	]
ASSIGN_OP	4778:15	4778:15	9	=
LEAF_NODE	4778:15	4778:15	10	=
RVAL	4778:16	4778:21	9	0.0F - m1 [ 0 ]
FIELD	4778:16	4778:16	10	0.0F
LEAF_NODE	4778:16	4778:16	11	0.0F
LEAF_NODE	4778:20	4778:20	10	-
FIELD	4778:21	4778:25	10	m1 [ 0 ]
LEAF_NODE	4778:21	4778:21	11	m1
LEAF_NODE	4778:23	4778:23	11	[
EXPR	4778:24	4778:24	11	0
FIELD	4778:24	4778:24	12	0
LEAF_NODE	4778:24	4778:24	13	0
LEAF_NODE	4778:25	4778:25	11	]
LEAF_NODE	4778:26	4778:26	7	;
EXPR_STATEMENT	4779:3	4779:20	6	boxp -> mat [ 4 ] = 0.0F ;
EXPR	4779:3	4779:3	7	boxp -> mat [ 4 ] = 0.0F
ASSIGN	4779:3	4779:16	8	boxp -> mat [ 4 ] = 0.0F
LVAL	4779:3	4779:3	9	boxp -> mat [ 4 ]
FIELD	4779:3	4779:14	10	boxp -> mat [ 4 ]
LEAF_NODE	4779:3	4779:3	11	boxp
LEAF_NODE	4779:7	4779:7	11	->
LEAF_NODE	4779:9	4779:9	11	mat
LEAF_NODE	4779:12	4779:12	11	[
EXPR	4779:13	4779:13	11	4
FIELD	4779:13	4779:13	12	4
LEAF_NODE	4779:13	4779:13	13	4
LEAF_NODE	4779:14	4779:14	11	]
ASSIGN_OP	4779:15	4779:15	9	=
LEAF_NODE	4779:15	4779:15	10	=
RVAL	4779:16	4779:16	9	0.0F
FIELD	4779:16	4779:16	10	0.0F
LEAF_NODE	4779:16	4779:16	11	0.0F
LEAF_NODE	4779:20	4779:20	7	;
EXPR_STATEMENT	4780:3	4780:22	6	boxp -> mat [ 6 ] += m1 [ 0 ] ;
EXPR	4780:3	4780:3	7	boxp -> mat [ 6 ] += m1 [ 0 ]
ASSIGN	4780:3	4780:17	8	boxp -> mat [ 6 ] += m1 [ 0 ]
LVAL	4780:3	4780:3	9	boxp -> mat [ 6 ]
FIELD	4780:3	4780:14	10	boxp -> mat [ 6 ]
LEAF_NODE	4780:3	4780:3	11	boxp
LEAF_NODE	4780:7	4780:7	11	->
LEAF_NODE	4780:9	4780:9	11	mat
LEAF_NODE	4780:12	4780:12	11	[
EXPR	4780:13	4780:13	11	6
FIELD	4780:13	4780:13	12	6
LEAF_NODE	4780:13	4780:13	13	6
LEAF_NODE	4780:14	4780:14	11	]
ASSIGN_OP	4780:15	4780:15	9	+=
LEAF_NODE	4780:15	4780:15	10	+=
RVAL	4780:17	4780:17	9	m1 [ 0 ]
FIELD	4780:17	4780:21	10	m1 [ 0 ]
LEAF_NODE	4780:17	4780:17	11	m1
LEAF_NODE	4780:19	4780:19	11	[
EXPR	4780:20	4780:20	11	0
FIELD	4780:20	4780:20	12	0
LEAF_NODE	4780:20	4780:20	13	0
LEAF_NODE	4780:21	4780:21	11	]
LEAF_NODE	4780:22	4780:22	7	;
EXPR_STATEMENT	4781:3	4781:22	6	boxp -> mat [ 7 ] += m1 [ 4 ] ;
EXPR	4781:3	4781:3	7	boxp -> mat [ 7 ] += m1 [ 4 ]
ASSIGN	4781:3	4781:17	8	boxp -> mat [ 7 ] += m1 [ 4 ]
LVAL	4781:3	4781:3	9	boxp -> mat [ 7 ]
FIELD	4781:3	4781:14	10	boxp -> mat [ 7 ]
LEAF_NODE	4781:3	4781:3	11	boxp
LEAF_NODE	4781:7	4781:7	11	->
LEAF_NODE	4781:9	4781:9	11	mat
LEAF_NODE	4781:12	4781:12	11	[
EXPR	4781:13	4781:13	11	7
FIELD	4781:13	4781:13	12	7
LEAF_NODE	4781:13	4781:13	13	7
LEAF_NODE	4781:14	4781:14	11	]
ASSIGN_OP	4781:15	4781:15	9	+=
LEAF_NODE	4781:15	4781:15	10	+=
RVAL	4781:17	4781:17	9	m1 [ 4 ]
FIELD	4781:17	4781:21	10	m1 [ 4 ]
LEAF_NODE	4781:17	4781:17	11	m1
LEAF_NODE	4781:19	4781:19	11	[
EXPR	4781:20	4781:20	11	4
FIELD	4781:20	4781:20	12	4
LEAF_NODE	4781:20	4781:20	13	4
LEAF_NODE	4781:21	4781:21	11	]
LEAF_NODE	4781:22	4781:22	7	;
JUMP_STATEMENT	4782:3	4782:8	6	break DESTINATION ;
KEYWORD	4782:3	4782:3	7	break
LEAF_NODE	4782:3	4782:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4782:8	4782:8	7	;
LABEL	4783:2	4783:8	6	case 6 :
LEAF_NODE	4783:2	4783:2	7	case
LEAF_NODE	4783:7	4783:7	7	6
LEAF_NODE	4783:8	4783:8	7	:
EXPR_STATEMENT	4784:3	4784:20	6	boxp -> mat [ 0 ] = 0.0F ;
EXPR	4784:3	4784:3	7	boxp -> mat [ 0 ] = 0.0F
ASSIGN	4784:3	4784:16	8	boxp -> mat [ 0 ] = 0.0F
LVAL	4784:3	4784:3	9	boxp -> mat [ 0 ]
FIELD	4784:3	4784:14	10	boxp -> mat [ 0 ]
LEAF_NODE	4784:3	4784:3	11	boxp
LEAF_NODE	4784:7	4784:7	11	->
LEAF_NODE	4784:9	4784:9	11	mat
LEAF_NODE	4784:12	4784:12	11	[
EXPR	4784:13	4784:13	11	0
FIELD	4784:13	4784:13	12	0
LEAF_NODE	4784:13	4784:13	13	0
LEAF_NODE	4784:14	4784:14	11	]
ASSIGN_OP	4784:15	4784:15	9	=
LEAF_NODE	4784:15	4784:15	10	=
RVAL	4784:16	4784:16	9	0.0F
FIELD	4784:16	4784:16	10	0.0F
LEAF_NODE	4784:16	4784:16	11	0.0F
LEAF_NODE	4784:20	4784:20	7	;
EXPR_STATEMENT	4785:3	4785:26	6	boxp -> mat [ 1 ] = 0.0F - m1 [ 4 ] ;
EXPR	4785:3	4785:3	7	boxp -> mat [ 1 ] = 0.0F - m1 [ 4 ]
ASSIGN	4785:3	4785:16	8	boxp -> mat [ 1 ] = 0.0F - m1 [ 4 ]
LVAL	4785:3	4785:3	9	boxp -> mat [ 1 ]
FIELD	4785:3	4785:14	10	boxp -> mat [ 1 ]
LEAF_NODE	4785:3	4785:3	11	boxp
LEAF_NODE	4785:7	4785:7	11	->
LEAF_NODE	4785:9	4785:9	11	mat
LEAF_NODE	4785:12	4785:12	11	[
EXPR	4785:13	4785:13	11	1
FIELD	4785:13	4785:13	12	1
LEAF_NODE	4785:13	4785:13	13	1
LEAF_NODE	4785:14	4785:14	11	]
ASSIGN_OP	4785:15	4785:15	9	=
LEAF_NODE	4785:15	4785:15	10	=
RVAL	4785:16	4785:21	9	0.0F - m1 [ 4 ]
FIELD	4785:16	4785:16	10	0.0F
LEAF_NODE	4785:16	4785:16	11	0.0F
LEAF_NODE	4785:20	4785:20	10	-
FIELD	4785:21	4785:25	10	m1 [ 4 ]
LEAF_NODE	4785:21	4785:21	11	m1
LEAF_NODE	4785:23	4785:23	11	[
EXPR	4785:24	4785:24	11	4
FIELD	4785:24	4785:24	12	4
LEAF_NODE	4785:24	4785:24	13	4
LEAF_NODE	4785:25	4785:25	11	]
LEAF_NODE	4785:26	4785:26	7	;
EXPR_STATEMENT	4786:3	4786:21	6	boxp -> mat [ 3 ] = m1 [ 0 ] ;
EXPR	4786:3	4786:3	7	boxp -> mat [ 3 ] = m1 [ 0 ]
ASSIGN	4786:3	4786:16	8	boxp -> mat [ 3 ] = m1 [ 0 ]
LVAL	4786:3	4786:3	9	boxp -> mat [ 3 ]
FIELD	4786:3	4786:14	10	boxp -> mat [ 3 ]
LEAF_NODE	4786:3	4786:3	11	boxp
LEAF_NODE	4786:7	4786:7	11	->
LEAF_NODE	4786:9	4786:9	11	mat
LEAF_NODE	4786:12	4786:12	11	[
EXPR	4786:13	4786:13	11	3
FIELD	4786:13	4786:13	12	3
LEAF_NODE	4786:13	4786:13	13	3
LEAF_NODE	4786:14	4786:14	11	]
ASSIGN_OP	4786:15	4786:15	9	=
LEAF_NODE	4786:15	4786:15	10	=
RVAL	4786:16	4786:16	9	m1 [ 0 ]
FIELD	4786:16	4786:20	10	m1 [ 0 ]
LEAF_NODE	4786:16	4786:16	11	m1
LEAF_NODE	4786:18	4786:18	11	[
EXPR	4786:19	4786:19	11	0
FIELD	4786:19	4786:19	12	0
LEAF_NODE	4786:19	4786:19	13	0
LEAF_NODE	4786:20	4786:20	11	]
LEAF_NODE	4786:21	4786:21	7	;
EXPR_STATEMENT	4787:3	4787:20	6	boxp -> mat [ 4 ] = 0.0F ;
EXPR	4787:3	4787:3	7	boxp -> mat [ 4 ] = 0.0F
ASSIGN	4787:3	4787:16	8	boxp -> mat [ 4 ] = 0.0F
LVAL	4787:3	4787:3	9	boxp -> mat [ 4 ]
FIELD	4787:3	4787:14	10	boxp -> mat [ 4 ]
LEAF_NODE	4787:3	4787:3	11	boxp
LEAF_NODE	4787:7	4787:7	11	->
LEAF_NODE	4787:9	4787:9	11	mat
LEAF_NODE	4787:12	4787:12	11	[
EXPR	4787:13	4787:13	11	4
FIELD	4787:13	4787:13	12	4
LEAF_NODE	4787:13	4787:13	13	4
LEAF_NODE	4787:14	4787:14	11	]
ASSIGN_OP	4787:15	4787:15	9	=
LEAF_NODE	4787:15	4787:15	10	=
RVAL	4787:16	4787:16	9	0.0F
FIELD	4787:16	4787:16	10	0.0F
LEAF_NODE	4787:16	4787:16	11	0.0F
LEAF_NODE	4787:20	4787:20	7	;
EXPR_STATEMENT	4788:3	4788:22	6	boxp -> mat [ 7 ] += m1 [ 4 ] ;
EXPR	4788:3	4788:3	7	boxp -> mat [ 7 ] += m1 [ 4 ]
ASSIGN	4788:3	4788:17	8	boxp -> mat [ 7 ] += m1 [ 4 ]
LVAL	4788:3	4788:3	9	boxp -> mat [ 7 ]
FIELD	4788:3	4788:14	10	boxp -> mat [ 7 ]
LEAF_NODE	4788:3	4788:3	11	boxp
LEAF_NODE	4788:7	4788:7	11	->
LEAF_NODE	4788:9	4788:9	11	mat
LEAF_NODE	4788:12	4788:12	11	[
EXPR	4788:13	4788:13	11	7
FIELD	4788:13	4788:13	12	7
LEAF_NODE	4788:13	4788:13	13	7
LEAF_NODE	4788:14	4788:14	11	]
ASSIGN_OP	4788:15	4788:15	9	+=
LEAF_NODE	4788:15	4788:15	10	+=
RVAL	4788:17	4788:17	9	m1 [ 4 ]
FIELD	4788:17	4788:21	10	m1 [ 4 ]
LEAF_NODE	4788:17	4788:17	11	m1
LEAF_NODE	4788:19	4788:19	11	[
EXPR	4788:20	4788:20	11	4
FIELD	4788:20	4788:20	12	4
LEAF_NODE	4788:20	4788:20	13	4
LEAF_NODE	4788:21	4788:21	11	]
LEAF_NODE	4788:22	4788:22	7	;
JUMP_STATEMENT	4789:3	4789:8	6	break DESTINATION ;
KEYWORD	4789:3	4789:3	7	break
LEAF_NODE	4789:3	4789:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4789:8	4789:8	7	;
LABEL	4790:2	4790:8	6	case 7 :
LEAF_NODE	4790:2	4790:2	7	case
LEAF_NODE	4790:7	4790:7	7	7
LEAF_NODE	4790:8	4790:8	7	:
EXPR_STATEMENT	4791:3	4791:20	6	boxp -> mat [ 0 ] = 0.0F ;
EXPR	4791:3	4791:3	7	boxp -> mat [ 0 ] = 0.0F
ASSIGN	4791:3	4791:16	8	boxp -> mat [ 0 ] = 0.0F
LVAL	4791:3	4791:3	9	boxp -> mat [ 0 ]
FIELD	4791:3	4791:14	10	boxp -> mat [ 0 ]
LEAF_NODE	4791:3	4791:3	11	boxp
LEAF_NODE	4791:7	4791:7	11	->
LEAF_NODE	4791:9	4791:9	11	mat
LEAF_NODE	4791:12	4791:12	11	[
EXPR	4791:13	4791:13	11	0
FIELD	4791:13	4791:13	12	0
LEAF_NODE	4791:13	4791:13	13	0
LEAF_NODE	4791:14	4791:14	11	]
ASSIGN_OP	4791:15	4791:15	9	=
LEAF_NODE	4791:15	4791:15	10	=
RVAL	4791:16	4791:16	9	0.0F
FIELD	4791:16	4791:16	10	0.0F
LEAF_NODE	4791:16	4791:16	11	0.0F
LEAF_NODE	4791:20	4791:20	7	;
EXPR_STATEMENT	4792:3	4792:21	6	boxp -> mat [ 1 ] = m1 [ 4 ] ;
EXPR	4792:3	4792:3	7	boxp -> mat [ 1 ] = m1 [ 4 ]
ASSIGN	4792:3	4792:16	8	boxp -> mat [ 1 ] = m1 [ 4 ]
LVAL	4792:3	4792:3	9	boxp -> mat [ 1 ]
FIELD	4792:3	4792:14	10	boxp -> mat [ 1 ]
LEAF_NODE	4792:3	4792:3	11	boxp
LEAF_NODE	4792:7	4792:7	11	->
LEAF_NODE	4792:9	4792:9	11	mat
LEAF_NODE	4792:12	4792:12	11	[
EXPR	4792:13	4792:13	11	1
FIELD	4792:13	4792:13	12	1
LEAF_NODE	4792:13	4792:13	13	1
LEAF_NODE	4792:14	4792:14	11	]
ASSIGN_OP	4792:15	4792:15	9	=
LEAF_NODE	4792:15	4792:15	10	=
RVAL	4792:16	4792:16	9	m1 [ 4 ]
FIELD	4792:16	4792:20	10	m1 [ 4 ]
LEAF_NODE	4792:16	4792:16	11	m1
LEAF_NODE	4792:18	4792:18	11	[
EXPR	4792:19	4792:19	11	4
FIELD	4792:19	4792:19	12	4
LEAF_NODE	4792:19	4792:19	13	4
LEAF_NODE	4792:20	4792:20	11	]
LEAF_NODE	4792:21	4792:21	7	;
EXPR_STATEMENT	4793:3	4793:21	6	boxp -> mat [ 3 ] = m1 [ 0 ] ;
EXPR	4793:3	4793:3	7	boxp -> mat [ 3 ] = m1 [ 0 ]
ASSIGN	4793:3	4793:16	8	boxp -> mat [ 3 ] = m1 [ 0 ]
LVAL	4793:3	4793:3	9	boxp -> mat [ 3 ]
FIELD	4793:3	4793:14	10	boxp -> mat [ 3 ]
LEAF_NODE	4793:3	4793:3	11	boxp
LEAF_NODE	4793:7	4793:7	11	->
LEAF_NODE	4793:9	4793:9	11	mat
LEAF_NODE	4793:12	4793:12	11	[
EXPR	4793:13	4793:13	11	3
FIELD	4793:13	4793:13	12	3
LEAF_NODE	4793:13	4793:13	13	3
LEAF_NODE	4793:14	4793:14	11	]
ASSIGN_OP	4793:15	4793:15	9	=
LEAF_NODE	4793:15	4793:15	10	=
RVAL	4793:16	4793:16	9	m1 [ 0 ]
FIELD	4793:16	4793:20	10	m1 [ 0 ]
LEAF_NODE	4793:16	4793:16	11	m1
LEAF_NODE	4793:18	4793:18	11	[
EXPR	4793:19	4793:19	11	0
FIELD	4793:19	4793:19	12	0
LEAF_NODE	4793:19	4793:19	13	0
LEAF_NODE	4793:20	4793:20	11	]
LEAF_NODE	4793:21	4793:21	7	;
EXPR_STATEMENT	4794:3	4794:20	6	boxp -> mat [ 4 ] = 0.0F ;
EXPR	4794:3	4794:3	7	boxp -> mat [ 4 ] = 0.0F
ASSIGN	4794:3	4794:16	8	boxp -> mat [ 4 ] = 0.0F
LVAL	4794:3	4794:3	9	boxp -> mat [ 4 ]
FIELD	4794:3	4794:14	10	boxp -> mat [ 4 ]
LEAF_NODE	4794:3	4794:3	11	boxp
LEAF_NODE	4794:7	4794:7	11	->
LEAF_NODE	4794:9	4794:9	11	mat
LEAF_NODE	4794:12	4794:12	11	[
EXPR	4794:13	4794:13	11	4
FIELD	4794:13	4794:13	12	4
LEAF_NODE	4794:13	4794:13	13	4
LEAF_NODE	4794:14	4794:14	11	]
ASSIGN_OP	4794:15	4794:15	9	=
LEAF_NODE	4794:15	4794:15	10	=
RVAL	4794:16	4794:16	9	0.0F
FIELD	4794:16	4794:16	10	0.0F
LEAF_NODE	4794:16	4794:16	11	0.0F
LEAF_NODE	4794:20	4794:20	7	;
JUMP_STATEMENT	4795:3	4795:8	6	break DESTINATION ;
KEYWORD	4795:3	4795:3	7	break
LEAF_NODE	4795:3	4795:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4795:8	4795:8	7	;
LABEL	4796:2	4796:8	6	case 8 :
LEAF_NODE	4796:2	4796:2	7	case
LEAF_NODE	4796:7	4796:7	7	8
LEAF_NODE	4796:8	4796:8	7	:
EXPR_STATEMENT	4797:3	4797:20	6	boxp -> mat [ 0 ] = 0.0F ;
EXPR	4797:3	4797:3	7	boxp -> mat [ 0 ] = 0.0F
ASSIGN	4797:3	4797:16	8	boxp -> mat [ 0 ] = 0.0F
LVAL	4797:3	4797:3	9	boxp -> mat [ 0 ]
FIELD	4797:3	4797:14	10	boxp -> mat [ 0 ]
LEAF_NODE	4797:3	4797:3	11	boxp
LEAF_NODE	4797:7	4797:7	11	->
LEAF_NODE	4797:9	4797:9	11	mat
LEAF_NODE	4797:12	4797:12	11	[
EXPR	4797:13	4797:13	11	0
FIELD	4797:13	4797:13	12	0
LEAF_NODE	4797:13	4797:13	13	0
LEAF_NODE	4797:14	4797:14	11	]
ASSIGN_OP	4797:15	4797:15	9	=
LEAF_NODE	4797:15	4797:15	10	=
RVAL	4797:16	4797:16	9	0.0F
FIELD	4797:16	4797:16	10	0.0F
LEAF_NODE	4797:16	4797:16	11	0.0F
LEAF_NODE	4797:20	4797:20	7	;
EXPR_STATEMENT	4798:3	4798:21	6	boxp -> mat [ 1 ] = m1 [ 4 ] ;
EXPR	4798:3	4798:3	7	boxp -> mat [ 1 ] = m1 [ 4 ]
ASSIGN	4798:3	4798:16	8	boxp -> mat [ 1 ] = m1 [ 4 ]
LVAL	4798:3	4798:3	9	boxp -> mat [ 1 ]
FIELD	4798:3	4798:14	10	boxp -> mat [ 1 ]
LEAF_NODE	4798:3	4798:3	11	boxp
LEAF_NODE	4798:7	4798:7	11	->
LEAF_NODE	4798:9	4798:9	11	mat
LEAF_NODE	4798:12	4798:12	11	[
EXPR	4798:13	4798:13	11	1
FIELD	4798:13	4798:13	12	1
LEAF_NODE	4798:13	4798:13	13	1
LEAF_NODE	4798:14	4798:14	11	]
ASSIGN_OP	4798:15	4798:15	9	=
LEAF_NODE	4798:15	4798:15	10	=
RVAL	4798:16	4798:16	9	m1 [ 4 ]
FIELD	4798:16	4798:20	10	m1 [ 4 ]
LEAF_NODE	4798:16	4798:16	11	m1
LEAF_NODE	4798:18	4798:18	11	[
EXPR	4798:19	4798:19	11	4
FIELD	4798:19	4798:19	12	4
LEAF_NODE	4798:19	4798:19	13	4
LEAF_NODE	4798:20	4798:20	11	]
LEAF_NODE	4798:21	4798:21	7	;
EXPR_STATEMENT	4799:3	4799:26	6	boxp -> mat [ 3 ] = 0.0F - m1 [ 0 ] ;
EXPR	4799:3	4799:3	7	boxp -> mat [ 3 ] = 0.0F - m1 [ 0 ]
ASSIGN	4799:3	4799:16	8	boxp -> mat [ 3 ] = 0.0F - m1 [ 0 ]
LVAL	4799:3	4799:3	9	boxp -> mat [ 3 ]
FIELD	4799:3	4799:14	10	boxp -> mat [ 3 ]
LEAF_NODE	4799:3	4799:3	11	boxp
LEAF_NODE	4799:7	4799:7	11	->
LEAF_NODE	4799:9	4799:9	11	mat
LEAF_NODE	4799:12	4799:12	11	[
EXPR	4799:13	4799:13	11	3
FIELD	4799:13	4799:13	12	3
LEAF_NODE	4799:13	4799:13	13	3
LEAF_NODE	4799:14	4799:14	11	]
ASSIGN_OP	4799:15	4799:15	9	=
LEAF_NODE	4799:15	4799:15	10	=
RVAL	4799:16	4799:21	9	0.0F - m1 [ 0 ]
FIELD	4799:16	4799:16	10	0.0F
LEAF_NODE	4799:16	4799:16	11	0.0F
LEAF_NODE	4799:20	4799:20	10	-
FIELD	4799:21	4799:25	10	m1 [ 0 ]
LEAF_NODE	4799:21	4799:21	11	m1
LEAF_NODE	4799:23	4799:23	11	[
EXPR	4799:24	4799:24	11	0
FIELD	4799:24	4799:24	12	0
LEAF_NODE	4799:24	4799:24	13	0
LEAF_NODE	4799:25	4799:25	11	]
LEAF_NODE	4799:26	4799:26	7	;
EXPR_STATEMENT	4800:3	4800:20	6	boxp -> mat [ 4 ] = 0.0F ;
EXPR	4800:3	4800:3	7	boxp -> mat [ 4 ] = 0.0F
ASSIGN	4800:3	4800:16	8	boxp -> mat [ 4 ] = 0.0F
LVAL	4800:3	4800:3	9	boxp -> mat [ 4 ]
FIELD	4800:3	4800:14	10	boxp -> mat [ 4 ]
LEAF_NODE	4800:3	4800:3	11	boxp
LEAF_NODE	4800:7	4800:7	11	->
LEAF_NODE	4800:9	4800:9	11	mat
LEAF_NODE	4800:12	4800:12	11	[
EXPR	4800:13	4800:13	11	4
FIELD	4800:13	4800:13	12	4
LEAF_NODE	4800:13	4800:13	13	4
LEAF_NODE	4800:14	4800:14	11	]
ASSIGN_OP	4800:15	4800:15	9	=
LEAF_NODE	4800:15	4800:15	10	=
RVAL	4800:16	4800:16	9	0.0F
FIELD	4800:16	4800:16	10	0.0F
LEAF_NODE	4800:16	4800:16	11	0.0F
LEAF_NODE	4800:20	4800:20	7	;
EXPR_STATEMENT	4801:3	4801:22	6	boxp -> mat [ 6 ] += m1 [ 0 ] ;
EXPR	4801:3	4801:3	7	boxp -> mat [ 6 ] += m1 [ 0 ]
ASSIGN	4801:3	4801:17	8	boxp -> mat [ 6 ] += m1 [ 0 ]
LVAL	4801:3	4801:3	9	boxp -> mat [ 6 ]
FIELD	4801:3	4801:14	10	boxp -> mat [ 6 ]
LEAF_NODE	4801:3	4801:3	11	boxp
LEAF_NODE	4801:7	4801:7	11	->
LEAF_NODE	4801:9	4801:9	11	mat
LEAF_NODE	4801:12	4801:12	11	[
EXPR	4801:13	4801:13	11	6
FIELD	4801:13	4801:13	12	6
LEAF_NODE	4801:13	4801:13	13	6
LEAF_NODE	4801:14	4801:14	11	]
ASSIGN_OP	4801:15	4801:15	9	+=
LEAF_NODE	4801:15	4801:15	10	+=
RVAL	4801:17	4801:17	9	m1 [ 0 ]
FIELD	4801:17	4801:21	10	m1 [ 0 ]
LEAF_NODE	4801:17	4801:17	11	m1
LEAF_NODE	4801:19	4801:19	11	[
EXPR	4801:20	4801:20	11	0
FIELD	4801:20	4801:20	12	0
LEAF_NODE	4801:20	4801:20	13	0
LEAF_NODE	4801:21	4801:21	11	]
LEAF_NODE	4801:22	4801:22	7	;
JUMP_STATEMENT	4802:3	4802:8	6	break DESTINATION ;
KEYWORD	4802:3	4802:3	7	break
LEAF_NODE	4802:3	4802:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4802:8	4802:8	7	;
LEAF_NODE	4803:1	4803:1	5	}
JUMP_STATEMENT	4805:1	4805:7	3	return DESTINATION ;
KEYWORD	4805:1	4805:1	4	return
LEAF_NODE	4805:1	4805:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	4805:7	4805:7	4	;
LEAF_NODE	4806:0	4806:0	2	}
FUNCTION_DEF	4812:0	4854:0	1	
RETURN_TYPE	4812:0	4812:0	2	tsize_t
TYPE_NAME	4812:0	4812:0	3	tsize_t
LEAF_NODE	4812:0	4812:0	4	tsize_t
FUNCTION_NAME	4812:8	4812:8	2	t2p_write_pdf_page_content_stream
LEAF_NODE	4812:8	4812:8	3	t2p_write_pdf_page_content_stream
PARAMETER_LIST	4812:41	4812:64	2	( T2P * t2p , TIFF * output )
LEAF_NODE	4812:41	4812:41	3	(
PARAMETER_DECL	4812:42	4812:47	3	T2P * t2p
TYPE	4812:42	4812:45	4	T2P *
TYPE_NAME	4812:42	4812:42	5	T2P
LEAF_NODE	4812:42	4812:42	6	T2P
POINTER	4812:45	4812:45	5	*
LEAF_NODE	4812:45	4812:45	6	*
NAME	4812:47	4812:47	4	t2p
LEAF_NODE	4812:47	4812:47	5	t2p
LEAF_NODE	4812:50	4812:50	3	,
PARAMETER_DECL	4812:52	4812:58	3	TIFF * output
TYPE	4812:52	4812:56	4	TIFF *
TYPE_NAME	4812:52	4812:52	5	TIFF
LEAF_NODE	4812:52	4812:52	6	TIFF
POINTER	4812:56	4812:56	5	*
LEAF_NODE	4812:56	4812:56	6	*
NAME	4812:58	4812:58	4	output
LEAF_NODE	4812:58	4812:58	5	output
LEAF_NODE	4812:64	4812:64	3	)
LEAF_NODE	4812:65	4812:65	2	{
STATEMENTS	4814:1	4853:16	2	
SIMPLE_DECL	4814:1	4814:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4814:1	4814:9	4	tsize_t written ; written = 0
TYPE	4814:1	4814:1	5	tsize_t
TYPE_NAME	4814:1	4814:1	6	tsize_t
LEAF_NODE	4814:1	4814:1	7	tsize_t
NAME	4814:9	4814:9	5	written
LEAF_NODE	4814:9	4814:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4814:9	4814:9	5	written = 0
ASSIGN	4814:9	4814:17	6	written = 0
LVAL	4814:9	4814:9	7	written
NAME	4814:9	4814:9	8	written
LEAF_NODE	4814:9	4814:9	9	written
ASSIGN_OP	4814:16	4814:16	7	=
LEAF_NODE	4814:16	4814:16	8	=
RVAL	4814:17	4814:17	7	0
FIELD	4814:17	4814:17	8	0
LEAF_NODE	4814:17	4814:17	9	0
LEAF_NODE	4814:18	4814:18	4	;
SIMPLE_DECL	4815:1	4815:12	3	ttile_t i ; i = 0 ;
VAR_DECL	4815:1	4815:9	4	ttile_t i ; i = 0
TYPE	4815:1	4815:1	5	ttile_t
TYPE_NAME	4815:1	4815:1	6	ttile_t
LEAF_NODE	4815:1	4815:1	7	ttile_t
NAME	4815:9	4815:9	5	i
LEAF_NODE	4815:9	4815:9	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	4815:9	4815:9	5	i = 0
ASSIGN	4815:9	4815:11	6	i = 0
LVAL	4815:9	4815:9	7	i
NAME	4815:9	4815:9	8	i
LEAF_NODE	4815:9	4815:9	9	i
ASSIGN_OP	4815:10	4815:10	7	=
LEAF_NODE	4815:10	4815:10	8	=
RVAL	4815:11	4815:11	7	0
FIELD	4815:11	4815:11	8	0
LEAF_NODE	4815:11	4815:11	9	0
LEAF_NODE	4815:12	4815:12	4	;
SIMPLE_DECL	4816:1	4816:17	3	char [ 512 ] buffer ;
VAR_DECL	4816:1	4816:6	4	char [ 512 ] buffer
TYPE	4816:1	4816:12	5	char [ 512 ]
TYPE_NAME	4816:1	4816:1	6	char
LEAF_NODE	4816:1	4816:1	7	char
TYPE_SUFFIX	4816:12	4816:16	6	[ 512 ]
LEAF_NODE	4816:12	4816:12	7	[
FIELD	4816:13	4816:13	7	512
LEAF_NODE	4816:13	4816:13	8	512
LEAF_NODE	4816:16	4816:16	7	]
NAME	4816:6	4816:6	5	buffer
LEAF_NODE	4816:6	4816:6	6	buffer
LEAF_NODE	4816:17	4816:17	4	;
SIMPLE_DECL	4817:1	4817:13	3	int buflen ; buflen = 0 ;
VAR_DECL	4817:1	4817:5	4	int buflen ; buflen = 0
TYPE	4817:1	4817:1	5	int
TYPE_NAME	4817:1	4817:1	6	int
LEAF_NODE	4817:1	4817:1	7	int
NAME	4817:5	4817:5	5	buflen
LEAF_NODE	4817:5	4817:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	4817:5	4817:5	5	buflen = 0
ASSIGN	4817:5	4817:12	6	buflen = 0
LVAL	4817:5	4817:5	7	buflen
NAME	4817:5	4817:5	8	buflen
LEAF_NODE	4817:5	4817:5	9	buflen
ASSIGN_OP	4817:11	4817:11	7	=
LEAF_NODE	4817:11	4817:11	8	=
RVAL	4817:12	4817:12	7	0
FIELD	4817:12	4817:12	8	0
LEAF_NODE	4817:12	4817:12	9	0
LEAF_NODE	4817:13	4817:13	4	;
SIMPLE_DECL	4818:1	4818:12	3	T2P_BOX box ;
VAR_DECL	4818:1	4818:9	4	T2P_BOX box
TYPE	4818:1	4818:1	5	T2P_BOX
TYPE_NAME	4818:1	4818:1	6	T2P_BOX
LEAF_NODE	4818:1	4818:1	7	T2P_BOX
NAME	4818:9	4818:9	5	box
LEAF_NODE	4818:9	4818:9	6	box
LEAF_NODE	4818:12	4818:12	4	;
SELECTION	4820:1	4820:53	3	
KEYWORD	4820:1	4820:1	4	if
LEAF_NODE	4820:1	4820:1	5	if
LEAF_NODE	4820:3	4820:3	4	(
CONDITION	4820:4	4820:4	4	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount > 0
EXPR	4820:4	4820:51	5	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount > 0
FIELD	4820:4	4820:35	6	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
LEAF_NODE	4820:4	4820:4	7	t2p
LEAF_NODE	4820:7	4820:7	7	->
LEAF_NODE	4820:9	4820:9	7	tiff_tiles
LEAF_NODE	4820:19	4820:19	7	[
EXPR	4820:20	4820:20	7	t2p -> pdf_page
FIELD	4820:20	4820:25	8	t2p -> pdf_page
LEAF_NODE	4820:20	4820:20	9	t2p
LEAF_NODE	4820:23	4820:23	9	->
LEAF_NODE	4820:25	4820:25	9	pdf_page
LEAF_NODE	4820:33	4820:33	7	]
LEAF_NODE	4820:34	4820:34	7	.
LEAF_NODE	4820:35	4820:35	7	tiles_tilecount
REL_OPERATOR	4820:50	4820:50	6	>
LEAF_NODE	4820:50	4820:50	7	>
FIELD	4820:51	4820:51	6	0
LEAF_NODE	4820:51	4820:51	7	0
LEAF_NODE	4820:52	4820:52	4	)
STATEMENTS	4820:53	4837:1	4	
LEAF_NODE	4820:53	4820:53	5	{
STATEMENTS	4821:2	4821:2	5	
ITERATION	4821:2	4821:64	6	
KEYWORD	4821:2	4821:2	7	for
LEAF_NODE	4821:2	4821:2	8	for
LEAF_NODE	4821:5	4821:5	7	(
FOR_INIT	4821:6	4821:9	7	i = 0 ;
EXPR	4821:6	4821:6	8	i = 0
ASSIGN	4821:6	4821:8	9	i = 0
LVAL	4821:6	4821:6	10	i
FIELD	4821:6	4821:6	11	i
LEAF_NODE	4821:6	4821:6	12	i
ASSIGN_OP	4821:7	4821:7	10	=
LEAF_NODE	4821:7	4821:7	11	=
RVAL	4821:8	4821:8	10	0
FIELD	4821:8	4821:8	11	0
LEAF_NODE	4821:8	4821:8	12	0
LEAF_NODE	4821:9	4821:9	8	;
CONDITION	4821:10	4821:10	7	i < t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
EXPR	4821:10	4821:12	8	i < t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
FIELD	4821:10	4821:10	9	i
LEAF_NODE	4821:10	4821:10	10	i
REL_OPERATOR	4821:11	4821:11	9	<
LEAF_NODE	4821:11	4821:11	10	<
FIELD	4821:12	4821:43	9	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
LEAF_NODE	4821:12	4821:12	10	t2p
LEAF_NODE	4821:15	4821:15	10	->
LEAF_NODE	4821:17	4821:17	10	tiff_tiles
LEAF_NODE	4821:27	4821:27	10	[
EXPR	4821:28	4821:28	10	t2p -> pdf_page
FIELD	4821:28	4821:33	11	t2p -> pdf_page
LEAF_NODE	4821:28	4821:28	12	t2p
LEAF_NODE	4821:31	4821:31	12	->
LEAF_NODE	4821:33	4821:33	12	pdf_page
LEAF_NODE	4821:41	4821:41	10	]
LEAF_NODE	4821:42	4821:42	10	.
LEAF_NODE	4821:43	4821:43	10	tiles_tilecount
LEAF_NODE	4821:58	4821:58	7	;
FOR_EXPR	4821:60	4821:60	7	i ++
EXPR	4821:60	4821:60	8	i ++
FIELD	4821:60	4821:61	9	i ++
LEAF_NODE	4821:60	4821:60	10	i
LEAF_NODE	4821:61	4821:61	10	++
LEAF_NODE	4821:63	4821:63	7	)
STATEMENTS	4821:64	4836:2	7	
LEAF_NODE	4821:64	4821:64	8	{
STATEMENTS	4822:3	4835:3	8	
EXPR_STATEMENT	4822:3	4822:61	9	box = t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tiles [ i ] . tile_box ;
EXPR	4822:3	4822:3	10	box = t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tiles [ i ] . tile_box
ASSIGN	4822:3	4822:7	11	box = t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tiles [ i ] . tile_box
LVAL	4822:3	4822:3	12	box
FIELD	4822:3	4822:3	13	box
LEAF_NODE	4822:3	4822:3	14	box
ASSIGN_OP	4822:6	4822:6	12	=
LEAF_NODE	4822:6	4822:6	13	=
RVAL	4822:7	4822:7	12	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tiles [ i ] . tile_box
FIELD	4822:7	4822:53	13	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tiles [ i ] . tile_box
LEAF_NODE	4822:7	4822:7	14	t2p
LEAF_NODE	4822:10	4822:10	14	->
LEAF_NODE	4822:12	4822:12	14	tiff_tiles
LEAF_NODE	4822:22	4822:22	14	[
EXPR	4822:23	4822:23	14	t2p -> pdf_page
FIELD	4822:23	4822:28	15	t2p -> pdf_page
LEAF_NODE	4822:23	4822:23	16	t2p
LEAF_NODE	4822:26	4822:26	16	->
LEAF_NODE	4822:28	4822:28	16	pdf_page
LEAF_NODE	4822:36	4822:36	14	]
LEAF_NODE	4822:37	4822:37	14	.
LEAF_NODE	4822:38	4822:38	14	tiles_tiles
LEAF_NODE	4822:49	4822:49	14	[
EXPR	4822:50	4822:50	14	i
FIELD	4822:50	4822:50	15	i
LEAF_NODE	4822:50	4822:50	16	i
LEAF_NODE	4822:51	4822:51	14	]
LEAF_NODE	4822:52	4822:52	14	.
LEAF_NODE	4822:53	4822:53	14	tile_box
LEAF_NODE	4822:61	4822:61	10	;
EXPR_STATEMENT	4823:3	4833:18	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d_%ld Do Q\n" , t2p -> tiff_transferfunctioncount ? "/GS1 gs " : "" , box . mat [ 0 ] , box . mat [ 1 ] , box . mat [ 3 ] , box . mat [ 4 ] , box . mat [ 6 ] , box . mat [ 7 ] , t2p -> pdf_page + 1 , ( long ) ( i + 1 ) ) ;
EXPR	4823:3	4823:3	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d_%ld Do Q\n" , t2p -> tiff_transferfunctioncount ? "/GS1 gs " : "" , box . mat [ 0 ] , box . mat [ 1 ] , box . mat [ 3 ] , box . mat [ 4 ] , box . mat [ 6 ] , box . mat [ 7 ] , t2p -> pdf_page + 1 , ( long ) ( i + 1 ) )
ASSIGN	4823:3	4823:10	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d_%ld Do Q\n" , t2p -> tiff_transferfunctioncount ? "/GS1 gs " : "" , box . mat [ 0 ] , box . mat [ 1 ] , box . mat [ 3 ] , box . mat [ 4 ] , box . mat [ 6 ] , box . mat [ 7 ] , t2p -> pdf_page + 1 , ( long ) ( i + 1 ) )
LVAL	4823:3	4823:3	12	buflen
FIELD	4823:3	4823:3	13	buflen
LEAF_NODE	4823:3	4823:3	14	buflen
ASSIGN_OP	4823:9	4823:9	12	=
LEAF_NODE	4823:9	4823:9	13	=
RVAL	4823:10	4823:10	12	snprintf ( buffer , sizeof ( buffer ) , "q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d_%ld Do Q\n" , t2p -> tiff_transferfunctioncount ? "/GS1 gs " : "" , box . mat [ 0 ] , box . mat [ 1 ] , box . mat [ 3 ] , box . mat [ 4 ] , box . mat [ 6 ] , box . mat [ 7 ] , t2p -> pdf_page + 1 , ( long ) ( i + 1 ) )
FUNCTION_CALL	4823:10	4833:17	13	snprintf ( buffer , sizeof ( buffer ) , "q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d_%ld Do Q\n" , t2p -> tiff_transferfunctioncount ? "/GS1 gs " : "" , box . mat [ 0 ] , box . mat [ 1 ] , box . mat [ 3 ] , box . mat [ 4 ] , box . mat [ 6 ] , box . mat [ 7 ] , t2p -> pdf_page + 1 , ( long ) ( i + 1 ) )
CALLEE	4823:10	4823:10	14	snprintf
LEAF_NODE	4823:10	4823:10	15	snprintf
LEAF_NODE	4823:18	4823:18	14	(
ARGUMENT	4823:19	4823:19	14	buffer
FIELD	4823:19	4823:19	15	buffer
LEAF_NODE	4823:19	4823:19	16	buffer
LEAF_NODE	4823:25	4823:25	14	,
ARGUMENT	4823:27	4823:27	14	sizeof ( buffer )
FUNCTION_CALL	4823:27	4823:40	15	sizeof ( buffer )
CALLEE	4823:27	4823:27	16	sizeof
LEAF_NODE	4823:27	4823:27	17	sizeof
LEAF_NODE	4823:33	4823:33	16	(
ARGUMENT	4823:34	4823:34	16	buffer
FIELD	4823:34	4823:34	17	buffer
LEAF_NODE	4823:34	4823:34	18	buffer
LEAF_NODE	4823:40	4823:40	16	)
LEAF_NODE	4823:41	4823:41	14	,
ARGUMENT	4824:4	4824:4	14	"q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d_%ld Do Q\n"
FIELD	4824:4	4824:4	15	"q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d_%ld Do Q\n"
LEAF_NODE	4824:4	4824:4	16	"q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d_%ld Do Q\n"
LEAF_NODE	4824:60	4824:60	14	,
ARGUMENT	4825:4	4825:4	14	t2p -> tiff_transferfunctioncount ? "/GS1 gs " : ""
COND_EXPR	4825:4	4825:47	15	t2p -> tiff_transferfunctioncount ? "/GS1 gs " : ""
CONDITION	4825:4	4825:4	16	t2p -> tiff_transferfunctioncount
FIELD	4825:4	4825:9	17	t2p -> tiff_transferfunctioncount
LEAF_NODE	4825:4	4825:4	18	t2p
LEAF_NODE	4825:7	4825:7	18	->
LEAF_NODE	4825:9	4825:9	18	tiff_transferfunctioncount
LEAF_NODE	4825:35	4825:35	16	?
EXPR	4825:36	4825:36	16	"/GS1 gs "
FIELD	4825:36	4825:36	17	"/GS1 gs "
LEAF_NODE	4825:36	4825:36	18	"/GS1 gs "
LEAF_NODE	4825:46	4825:46	16	:
FIELD	4825:47	4825:47	16	""
LEAF_NODE	4825:47	4825:47	17	""
LEAF_NODE	4825:49	4825:49	14	,
ARGUMENT	4826:4	4826:4	14	box . mat [ 0 ]
FIELD	4826:4	4826:13	15	box . mat [ 0 ]
LEAF_NODE	4826:4	4826:4	16	box
LEAF_NODE	4826:7	4826:7	16	.
LEAF_NODE	4826:8	4826:8	16	mat
LEAF_NODE	4826:11	4826:11	16	[
EXPR	4826:12	4826:12	16	0
FIELD	4826:12	4826:12	17	0
LEAF_NODE	4826:12	4826:12	18	0
LEAF_NODE	4826:13	4826:13	16	]
LEAF_NODE	4826:14	4826:14	14	,
ARGUMENT	4827:4	4827:4	14	box . mat [ 1 ]
FIELD	4827:4	4827:13	15	box . mat [ 1 ]
LEAF_NODE	4827:4	4827:4	16	box
LEAF_NODE	4827:7	4827:7	16	.
LEAF_NODE	4827:8	4827:8	16	mat
LEAF_NODE	4827:11	4827:11	16	[
EXPR	4827:12	4827:12	16	1
FIELD	4827:12	4827:12	17	1
LEAF_NODE	4827:12	4827:12	18	1
LEAF_NODE	4827:13	4827:13	16	]
LEAF_NODE	4827:14	4827:14	14	,
ARGUMENT	4828:4	4828:4	14	box . mat [ 3 ]
FIELD	4828:4	4828:13	15	box . mat [ 3 ]
LEAF_NODE	4828:4	4828:4	16	box
LEAF_NODE	4828:7	4828:7	16	.
LEAF_NODE	4828:8	4828:8	16	mat
LEAF_NODE	4828:11	4828:11	16	[
EXPR	4828:12	4828:12	16	3
FIELD	4828:12	4828:12	17	3
LEAF_NODE	4828:12	4828:12	18	3
LEAF_NODE	4828:13	4828:13	16	]
LEAF_NODE	4828:14	4828:14	14	,
ARGUMENT	4829:4	4829:4	14	box . mat [ 4 ]
FIELD	4829:4	4829:13	15	box . mat [ 4 ]
LEAF_NODE	4829:4	4829:4	16	box
LEAF_NODE	4829:7	4829:7	16	.
LEAF_NODE	4829:8	4829:8	16	mat
LEAF_NODE	4829:11	4829:11	16	[
EXPR	4829:12	4829:12	16	4
FIELD	4829:12	4829:12	17	4
LEAF_NODE	4829:12	4829:12	18	4
LEAF_NODE	4829:13	4829:13	16	]
LEAF_NODE	4829:14	4829:14	14	,
ARGUMENT	4830:4	4830:4	14	box . mat [ 6 ]
FIELD	4830:4	4830:13	15	box . mat [ 6 ]
LEAF_NODE	4830:4	4830:4	16	box
LEAF_NODE	4830:7	4830:7	16	.
LEAF_NODE	4830:8	4830:8	16	mat
LEAF_NODE	4830:11	4830:11	16	[
EXPR	4830:12	4830:12	16	6
FIELD	4830:12	4830:12	17	6
LEAF_NODE	4830:12	4830:12	18	6
LEAF_NODE	4830:13	4830:13	16	]
LEAF_NODE	4830:14	4830:14	14	,
ARGUMENT	4831:4	4831:4	14	box . mat [ 7 ]
FIELD	4831:4	4831:13	15	box . mat [ 7 ]
LEAF_NODE	4831:4	4831:4	16	box
LEAF_NODE	4831:7	4831:7	16	.
LEAF_NODE	4831:8	4831:8	16	mat
LEAF_NODE	4831:11	4831:11	16	[
EXPR	4831:12	4831:12	16	7
FIELD	4831:12	4831:12	17	7
LEAF_NODE	4831:12	4831:12	18	7
LEAF_NODE	4831:13	4831:13	16	]
LEAF_NODE	4831:14	4831:14	14	,
ARGUMENT	4832:4	4832:20	14	t2p -> pdf_page + 1
FIELD	4832:4	4832:9	15	t2p -> pdf_page
LEAF_NODE	4832:4	4832:4	16	t2p
LEAF_NODE	4832:7	4832:7	16	->
LEAF_NODE	4832:9	4832:9	16	pdf_page
LEAF_NODE	4832:18	4832:18	15	+
FIELD	4832:20	4832:20	15	1
LEAF_NODE	4832:20	4832:20	16	1
LEAF_NODE	4832:21	4832:21	14	,
ARGUMENT	4833:4	4833:16	14	( long ) ( i + 1 )
LEAF_NODE	4833:4	4833:4	15	(
TYPE_NAME	4833:5	4833:5	15	long
LEAF_NODE	4833:5	4833:5	16	long
LEAF_NODE	4833:9	4833:9	15	)
LEAF_NODE	4833:10	4833:10	15	(
FIELD	4833:11	4833:11	15	i
LEAF_NODE	4833:11	4833:11	16	i
LEAF_NODE	4833:13	4833:13	15	+
FIELD	4833:15	4833:15	15	1
LEAF_NODE	4833:15	4833:15	16	1
LEAF_NODE	4833:16	4833:16	15	)
LEAF_NODE	4833:17	4833:17	14	)
LEAF_NODE	4833:18	4833:18	10	;
EXPR_STATEMENT	4834:3	4834:42	9	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4834:3	4834:3	10	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4834:3	4834:41	11	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4834:3	4834:3	12	check_snprintf_ret
LEAF_NODE	4834:3	4834:3	13	check_snprintf_ret
LEAF_NODE	4834:21	4834:21	12	(
ARGUMENT	4834:22	4834:22	12	t2p
FIELD	4834:22	4834:22	13	t2p
LEAF_NODE	4834:22	4834:22	14	t2p
LEAF_NODE	4834:25	4834:25	12	,
ARGUMENT	4834:27	4834:27	12	buflen
FIELD	4834:27	4834:27	13	buflen
LEAF_NODE	4834:27	4834:27	14	buflen
LEAF_NODE	4834:33	4834:33	12	,
ARGUMENT	4834:35	4834:35	12	buffer
FIELD	4834:35	4834:35	13	buffer
LEAF_NODE	4834:35	4834:35	14	buffer
LEAF_NODE	4834:41	4834:41	12	)
LEAF_NODE	4834:42	4834:42	10	;
EXPR_STATEMENT	4835:3	4835:58	9	written += t2p_write_pdf_stream ( buffer , buflen , output ) ;
EXPR	4835:3	4835:3	10	written += t2p_write_pdf_stream ( buffer , buflen , output )
ASSIGN	4835:3	4835:14	11	written += t2p_write_pdf_stream ( buffer , buflen , output )
LVAL	4835:3	4835:3	12	written
FIELD	4835:3	4835:3	13	written
LEAF_NODE	4835:3	4835:3	14	written
ASSIGN_OP	4835:11	4835:11	12	+=
LEAF_NODE	4835:11	4835:11	13	+=
RVAL	4835:14	4835:14	12	t2p_write_pdf_stream ( buffer , buflen , output )
FUNCTION_CALL	4835:14	4835:57	13	t2p_write_pdf_stream ( buffer , buflen , output )
CALLEE	4835:14	4835:14	14	t2p_write_pdf_stream
LEAF_NODE	4835:14	4835:14	15	t2p_write_pdf_stream
LEAF_NODE	4835:34	4835:34	14	(
ARGUMENT	4835:35	4835:35	14	buffer
FIELD	4835:35	4835:35	15	buffer
LEAF_NODE	4835:35	4835:35	16	buffer
LEAF_NODE	4835:41	4835:41	14	,
ARGUMENT	4835:43	4835:43	14	buflen
FIELD	4835:43	4835:43	15	buflen
LEAF_NODE	4835:43	4835:43	16	buflen
LEAF_NODE	4835:49	4835:49	14	,
ARGUMENT	4835:51	4835:51	14	output
FIELD	4835:51	4835:51	15	output
LEAF_NODE	4835:51	4835:51	16	output
LEAF_NODE	4835:57	4835:57	14	)
LEAF_NODE	4835:58	4835:58	10	;
LEAF_NODE	4836:2	4836:2	8	}
LEAF_NODE	4837:1	4837:1	5	}
SELECTION	4837:3	4837:8	3	
KEYWORD	4837:3	4837:3	4	else
LEAF_NODE	4837:3	4837:3	5	else
STATEMENTS	4837:8	4851:1	4	
LEAF_NODE	4837:8	4837:8	5	{
STATEMENTS	4838:2	4850:2	5	
EXPR_STATEMENT	4838:2	4838:23	6	box = t2p -> pdf_imagebox ;
EXPR	4838:2	4838:2	7	box = t2p -> pdf_imagebox
ASSIGN	4838:2	4838:6	8	box = t2p -> pdf_imagebox
LVAL	4838:2	4838:2	9	box
FIELD	4838:2	4838:2	10	box
LEAF_NODE	4838:2	4838:2	11	box
ASSIGN_OP	4838:5	4838:5	9	=
LEAF_NODE	4838:5	4838:5	10	=
RVAL	4838:6	4838:6	9	t2p -> pdf_imagebox
FIELD	4838:6	4838:11	10	t2p -> pdf_imagebox
LEAF_NODE	4838:6	4838:6	11	t2p
LEAF_NODE	4838:9	4838:9	11	->
LEAF_NODE	4838:11	4838:11	11	pdf_imagebox
LEAF_NODE	4838:23	4838:23	7	;
EXPR_STATEMENT	4839:2	4848:19	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d Do Q\n" , t2p -> tiff_transferfunctioncount ? "/GS1 gs " : "" , box . mat [ 0 ] , box . mat [ 1 ] , box . mat [ 3 ] , box . mat [ 4 ] , box . mat [ 6 ] , box . mat [ 7 ] , t2p -> pdf_page + 1 ) ;
EXPR	4839:2	4839:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d Do Q\n" , t2p -> tiff_transferfunctioncount ? "/GS1 gs " : "" , box . mat [ 0 ] , box . mat [ 1 ] , box . mat [ 3 ] , box . mat [ 4 ] , box . mat [ 6 ] , box . mat [ 7 ] , t2p -> pdf_page + 1 )
ASSIGN	4839:2	4839:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d Do Q\n" , t2p -> tiff_transferfunctioncount ? "/GS1 gs " : "" , box . mat [ 0 ] , box . mat [ 1 ] , box . mat [ 3 ] , box . mat [ 4 ] , box . mat [ 6 ] , box . mat [ 7 ] , t2p -> pdf_page + 1 )
LVAL	4839:2	4839:2	9	buflen
FIELD	4839:2	4839:2	10	buflen
LEAF_NODE	4839:2	4839:2	11	buflen
ASSIGN_OP	4839:8	4839:8	9	=
LEAF_NODE	4839:8	4839:8	10	=
RVAL	4839:9	4839:9	9	snprintf ( buffer , sizeof ( buffer ) , "q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d Do Q\n" , t2p -> tiff_transferfunctioncount ? "/GS1 gs " : "" , box . mat [ 0 ] , box . mat [ 1 ] , box . mat [ 3 ] , box . mat [ 4 ] , box . mat [ 6 ] , box . mat [ 7 ] , t2p -> pdf_page + 1 )
FUNCTION_CALL	4839:9	4848:18	10	snprintf ( buffer , sizeof ( buffer ) , "q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d Do Q\n" , t2p -> tiff_transferfunctioncount ? "/GS1 gs " : "" , box . mat [ 0 ] , box . mat [ 1 ] , box . mat [ 3 ] , box . mat [ 4 ] , box . mat [ 6 ] , box . mat [ 7 ] , t2p -> pdf_page + 1 )
CALLEE	4839:9	4839:9	11	snprintf
LEAF_NODE	4839:9	4839:9	12	snprintf
LEAF_NODE	4839:17	4839:17	11	(
ARGUMENT	4839:18	4839:18	11	buffer
FIELD	4839:18	4839:18	12	buffer
LEAF_NODE	4839:18	4839:18	13	buffer
LEAF_NODE	4839:24	4839:24	11	,
ARGUMENT	4839:26	4839:26	11	sizeof ( buffer )
FUNCTION_CALL	4839:26	4839:39	12	sizeof ( buffer )
CALLEE	4839:26	4839:26	13	sizeof
LEAF_NODE	4839:26	4839:26	14	sizeof
LEAF_NODE	4839:32	4839:32	13	(
ARGUMENT	4839:33	4839:33	13	buffer
FIELD	4839:33	4839:33	14	buffer
LEAF_NODE	4839:33	4839:33	15	buffer
LEAF_NODE	4839:39	4839:39	13	)
LEAF_NODE	4839:40	4839:40	11	,
ARGUMENT	4840:3	4840:3	11	"q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d Do Q\n"
FIELD	4840:3	4840:3	12	"q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d Do Q\n"
LEAF_NODE	4840:3	4840:3	13	"q %s %.4f %.4f %.4f %.4f %.4f %.4f cm /Im%d Do Q\n"
LEAF_NODE	4840:55	4840:55	11	,
ARGUMENT	4841:3	4841:3	11	t2p -> tiff_transferfunctioncount ? "/GS1 gs " : ""
COND_EXPR	4841:3	4841:46	12	t2p -> tiff_transferfunctioncount ? "/GS1 gs " : ""
CONDITION	4841:3	4841:3	13	t2p -> tiff_transferfunctioncount
FIELD	4841:3	4841:8	14	t2p -> tiff_transferfunctioncount
LEAF_NODE	4841:3	4841:3	15	t2p
LEAF_NODE	4841:6	4841:6	15	->
LEAF_NODE	4841:8	4841:8	15	tiff_transferfunctioncount
LEAF_NODE	4841:34	4841:34	13	?
EXPR	4841:35	4841:35	13	"/GS1 gs "
FIELD	4841:35	4841:35	14	"/GS1 gs "
LEAF_NODE	4841:35	4841:35	15	"/GS1 gs "
LEAF_NODE	4841:45	4841:45	13	:
FIELD	4841:46	4841:46	13	""
LEAF_NODE	4841:46	4841:46	14	""
LEAF_NODE	4841:48	4841:48	11	,
ARGUMENT	4842:3	4842:3	11	box . mat [ 0 ]
FIELD	4842:3	4842:12	12	box . mat [ 0 ]
LEAF_NODE	4842:3	4842:3	13	box
LEAF_NODE	4842:6	4842:6	13	.
LEAF_NODE	4842:7	4842:7	13	mat
LEAF_NODE	4842:10	4842:10	13	[
EXPR	4842:11	4842:11	13	0
FIELD	4842:11	4842:11	14	0
LEAF_NODE	4842:11	4842:11	15	0
LEAF_NODE	4842:12	4842:12	13	]
LEAF_NODE	4842:13	4842:13	11	,
ARGUMENT	4843:3	4843:3	11	box . mat [ 1 ]
FIELD	4843:3	4843:12	12	box . mat [ 1 ]
LEAF_NODE	4843:3	4843:3	13	box
LEAF_NODE	4843:6	4843:6	13	.
LEAF_NODE	4843:7	4843:7	13	mat
LEAF_NODE	4843:10	4843:10	13	[
EXPR	4843:11	4843:11	13	1
FIELD	4843:11	4843:11	14	1
LEAF_NODE	4843:11	4843:11	15	1
LEAF_NODE	4843:12	4843:12	13	]
LEAF_NODE	4843:13	4843:13	11	,
ARGUMENT	4844:3	4844:3	11	box . mat [ 3 ]
FIELD	4844:3	4844:12	12	box . mat [ 3 ]
LEAF_NODE	4844:3	4844:3	13	box
LEAF_NODE	4844:6	4844:6	13	.
LEAF_NODE	4844:7	4844:7	13	mat
LEAF_NODE	4844:10	4844:10	13	[
EXPR	4844:11	4844:11	13	3
FIELD	4844:11	4844:11	14	3
LEAF_NODE	4844:11	4844:11	15	3
LEAF_NODE	4844:12	4844:12	13	]
LEAF_NODE	4844:13	4844:13	11	,
ARGUMENT	4845:3	4845:3	11	box . mat [ 4 ]
FIELD	4845:3	4845:12	12	box . mat [ 4 ]
LEAF_NODE	4845:3	4845:3	13	box
LEAF_NODE	4845:6	4845:6	13	.
LEAF_NODE	4845:7	4845:7	13	mat
LEAF_NODE	4845:10	4845:10	13	[
EXPR	4845:11	4845:11	13	4
FIELD	4845:11	4845:11	14	4
LEAF_NODE	4845:11	4845:11	15	4
LEAF_NODE	4845:12	4845:12	13	]
LEAF_NODE	4845:13	4845:13	11	,
ARGUMENT	4846:3	4846:3	11	box . mat [ 6 ]
FIELD	4846:3	4846:12	12	box . mat [ 6 ]
LEAF_NODE	4846:3	4846:3	13	box
LEAF_NODE	4846:6	4846:6	13	.
LEAF_NODE	4846:7	4846:7	13	mat
LEAF_NODE	4846:10	4846:10	13	[
EXPR	4846:11	4846:11	13	6
FIELD	4846:11	4846:11	14	6
LEAF_NODE	4846:11	4846:11	15	6
LEAF_NODE	4846:12	4846:12	13	]
LEAF_NODE	4846:13	4846:13	11	,
ARGUMENT	4847:3	4847:3	11	box . mat [ 7 ]
FIELD	4847:3	4847:12	12	box . mat [ 7 ]
LEAF_NODE	4847:3	4847:3	13	box
LEAF_NODE	4847:6	4847:6	13	.
LEAF_NODE	4847:7	4847:7	13	mat
LEAF_NODE	4847:10	4847:10	13	[
EXPR	4847:11	4847:11	13	7
FIELD	4847:11	4847:11	14	7
LEAF_NODE	4847:11	4847:11	15	7
LEAF_NODE	4847:12	4847:12	13	]
LEAF_NODE	4847:13	4847:13	11	,
ARGUMENT	4848:3	4848:17	11	t2p -> pdf_page + 1
FIELD	4848:3	4848:8	12	t2p -> pdf_page
LEAF_NODE	4848:3	4848:3	13	t2p
LEAF_NODE	4848:6	4848:6	13	->
LEAF_NODE	4848:8	4848:8	13	pdf_page
LEAF_NODE	4848:16	4848:16	12	+
FIELD	4848:17	4848:17	12	1
LEAF_NODE	4848:17	4848:17	13	1
LEAF_NODE	4848:18	4848:18	11	)
LEAF_NODE	4848:19	4848:19	7	;
EXPR_STATEMENT	4849:2	4849:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4849:2	4849:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4849:2	4849:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4849:2	4849:2	9	check_snprintf_ret
LEAF_NODE	4849:2	4849:2	10	check_snprintf_ret
LEAF_NODE	4849:20	4849:20	9	(
ARGUMENT	4849:21	4849:21	9	t2p
FIELD	4849:21	4849:21	10	t2p
LEAF_NODE	4849:21	4849:21	11	t2p
LEAF_NODE	4849:24	4849:24	9	,
ARGUMENT	4849:26	4849:26	9	buflen
FIELD	4849:26	4849:26	10	buflen
LEAF_NODE	4849:26	4849:26	11	buflen
LEAF_NODE	4849:32	4849:32	9	,
ARGUMENT	4849:34	4849:34	9	buffer
FIELD	4849:34	4849:34	10	buffer
LEAF_NODE	4849:34	4849:34	11	buffer
LEAF_NODE	4849:40	4849:40	9	)
LEAF_NODE	4849:41	4849:41	7	;
EXPR_STATEMENT	4850:2	4850:57	6	written += t2p_write_pdf_stream ( buffer , buflen , output ) ;
EXPR	4850:2	4850:2	7	written += t2p_write_pdf_stream ( buffer , buflen , output )
ASSIGN	4850:2	4850:13	8	written += t2p_write_pdf_stream ( buffer , buflen , output )
LVAL	4850:2	4850:2	9	written
FIELD	4850:2	4850:2	10	written
LEAF_NODE	4850:2	4850:2	11	written
ASSIGN_OP	4850:10	4850:10	9	+=
LEAF_NODE	4850:10	4850:10	10	+=
RVAL	4850:13	4850:13	9	t2p_write_pdf_stream ( buffer , buflen , output )
FUNCTION_CALL	4850:13	4850:56	10	t2p_write_pdf_stream ( buffer , buflen , output )
CALLEE	4850:13	4850:13	11	t2p_write_pdf_stream
LEAF_NODE	4850:13	4850:13	12	t2p_write_pdf_stream
LEAF_NODE	4850:33	4850:33	11	(
ARGUMENT	4850:34	4850:34	11	buffer
FIELD	4850:34	4850:34	12	buffer
LEAF_NODE	4850:34	4850:34	13	buffer
LEAF_NODE	4850:40	4850:40	11	,
ARGUMENT	4850:42	4850:42	11	buflen
FIELD	4850:42	4850:42	12	buflen
LEAF_NODE	4850:42	4850:42	13	buflen
LEAF_NODE	4850:48	4850:48	11	,
ARGUMENT	4850:50	4850:50	11	output
FIELD	4850:50	4850:50	12	output
LEAF_NODE	4850:50	4850:50	13	output
LEAF_NODE	4850:56	4850:56	11	)
LEAF_NODE	4850:57	4850:57	7	;
LEAF_NODE	4851:1	4851:1	5	}
LEAF_NODE	4853:1	4853:1	3	return
LEAF_NODE	4853:7	4853:7	3	(
LEAF_NODE	4853:8	4853:8	3	written
LEAF_NODE	4853:15	4853:15	3	)
LEAF_NODE	4853:16	4853:16	3	;
LEAF_NODE	4854:0	4854:0	2	}
FUNCTION_DEF	4860:0	4929:0	1	
RETURN_TYPE	4860:0	4860:0	2	tsize_t
TYPE_NAME	4860:0	4860:0	3	tsize_t
LEAF_NODE	4860:0	4860:0	4	tsize_t
FUNCTION_NAME	4860:8	4860:8	2	t2p_write_pdf_xobject_stream_dict
LEAF_NODE	4860:8	4860:8	3	t2p_write_pdf_xobject_stream_dict
PARAMETER_LIST	4860:41	4862:24	2	( ttile_t tile , T2P * t2p , TIFF * output )
LEAF_NODE	4860:41	4860:41	3	(
PARAMETER_DECL	4860:42	4860:50	3	ttile_t tile
TYPE	4860:42	4860:42	4	ttile_t
TYPE_NAME	4860:42	4860:42	5	ttile_t
LEAF_NODE	4860:42	4860:42	6	ttile_t
NAME	4860:50	4860:50	4	tile
LEAF_NODE	4860:50	4860:50	5	tile
LEAF_NODE	4860:54	4860:54	3	,
PARAMETER_DECL	4861:12	4861:17	3	T2P * t2p
TYPE	4861:12	4861:15	4	T2P *
TYPE_NAME	4861:12	4861:12	5	T2P
LEAF_NODE	4861:12	4861:12	6	T2P
POINTER	4861:15	4861:15	5	*
LEAF_NODE	4861:15	4861:15	6	*
NAME	4861:17	4861:17	4	t2p
LEAF_NODE	4861:17	4861:17	5	t2p
LEAF_NODE	4861:20	4861:20	3	,
PARAMETER_DECL	4862:12	4862:18	3	TIFF * output
TYPE	4862:12	4862:16	4	TIFF *
TYPE_NAME	4862:12	4862:12	5	TIFF
LEAF_NODE	4862:12	4862:12	6	TIFF
POINTER	4862:16	4862:16	5	*
LEAF_NODE	4862:16	4862:16	6	*
NAME	4862:18	4862:18	4	output
LEAF_NODE	4862:18	4862:18	5	output
LEAF_NODE	4862:24	4862:24	3	)
LEAF_NODE	4862:25	4862:25	2	{
STATEMENTS	4864:1	4928:16	2	
SIMPLE_DECL	4864:1	4864:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4864:1	4864:9	4	tsize_t written ; written = 0
TYPE	4864:1	4864:1	5	tsize_t
TYPE_NAME	4864:1	4864:1	6	tsize_t
LEAF_NODE	4864:1	4864:1	7	tsize_t
NAME	4864:9	4864:9	5	written
LEAF_NODE	4864:9	4864:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4864:9	4864:9	5	written = 0
ASSIGN	4864:9	4864:17	6	written = 0
LVAL	4864:9	4864:9	7	written
NAME	4864:9	4864:9	8	written
LEAF_NODE	4864:9	4864:9	9	written
ASSIGN_OP	4864:16	4864:16	7	=
LEAF_NODE	4864:16	4864:16	8	=
RVAL	4864:17	4864:17	7	0
FIELD	4864:17	4864:17	8	0
LEAF_NODE	4864:17	4864:17	9	0
LEAF_NODE	4864:18	4864:18	4	;
SIMPLE_DECL	4865:1	4865:16	3	char [ 32 ] buffer ;
VAR_DECL	4865:1	4865:6	4	char [ 32 ] buffer
TYPE	4865:1	4865:12	5	char [ 32 ]
TYPE_NAME	4865:1	4865:1	6	char
LEAF_NODE	4865:1	4865:1	7	char
TYPE_SUFFIX	4865:12	4865:15	6	[ 32 ]
LEAF_NODE	4865:12	4865:12	7	[
FIELD	4865:13	4865:13	7	32
LEAF_NODE	4865:13	4865:13	8	32
LEAF_NODE	4865:15	4865:15	7	]
NAME	4865:6	4865:6	5	buffer
LEAF_NODE	4865:6	4865:6	6	buffer
LEAF_NODE	4865:16	4865:16	4	;
SIMPLE_DECL	4866:1	4866:13	3	int buflen ; buflen = 0 ;
VAR_DECL	4866:1	4866:5	4	int buflen ; buflen = 0
TYPE	4866:1	4866:1	5	int
TYPE_NAME	4866:1	4866:1	6	int
LEAF_NODE	4866:1	4866:1	7	int
NAME	4866:5	4866:5	5	buflen
LEAF_NODE	4866:5	4866:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	4866:5	4866:5	5	buflen = 0
ASSIGN	4866:5	4866:12	6	buflen = 0
LVAL	4866:5	4866:5	7	buflen
NAME	4866:5	4866:5	8	buflen
LEAF_NODE	4866:5	4866:5	9	buflen
ASSIGN_OP	4866:11	4866:11	7	=
LEAF_NODE	4866:11	4866:11	8	=
RVAL	4866:12	4866:12	7	0
FIELD	4866:12	4866:12	8	0
LEAF_NODE	4866:12	4866:12	9	0
LEAF_NODE	4866:13	4866:13	4	;
EXPR_STATEMENT	4868:1	4868:70	3	written += t2p_write_pdf_stream_dict ( 0 , t2p -> pdf_xrefcount + 1 , output ) ;
EXPR	4868:1	4868:1	4	written += t2p_write_pdf_stream_dict ( 0 , t2p -> pdf_xrefcount + 1 , output )
ASSIGN	4868:1	4868:12	5	written += t2p_write_pdf_stream_dict ( 0 , t2p -> pdf_xrefcount + 1 , output )
LVAL	4868:1	4868:1	6	written
FIELD	4868:1	4868:1	7	written
LEAF_NODE	4868:1	4868:1	8	written
ASSIGN_OP	4868:9	4868:9	6	+=
LEAF_NODE	4868:9	4868:9	7	+=
RVAL	4868:12	4868:12	6	t2p_write_pdf_stream_dict ( 0 , t2p -> pdf_xrefcount + 1 , output )
FUNCTION_CALL	4868:12	4868:69	7	t2p_write_pdf_stream_dict ( 0 , t2p -> pdf_xrefcount + 1 , output )
CALLEE	4868:12	4868:12	8	t2p_write_pdf_stream_dict
LEAF_NODE	4868:12	4868:12	9	t2p_write_pdf_stream_dict
LEAF_NODE	4868:37	4868:37	8	(
ARGUMENT	4868:38	4868:38	8	0
FIELD	4868:38	4868:38	9	0
LEAF_NODE	4868:38	4868:38	10	0
LEAF_NODE	4868:39	4868:39	8	,
ARGUMENT	4868:41	4868:60	8	t2p -> pdf_xrefcount + 1
FIELD	4868:41	4868:46	9	t2p -> pdf_xrefcount
LEAF_NODE	4868:41	4868:41	10	t2p
LEAF_NODE	4868:44	4868:44	10	->
LEAF_NODE	4868:46	4868:46	10	pdf_xrefcount
LEAF_NODE	4868:59	4868:59	9	+
FIELD	4868:60	4868:60	9	1
LEAF_NODE	4868:60	4868:60	10	1
LEAF_NODE	4868:61	4868:61	8	,
ARGUMENT	4868:63	4868:63	8	output
FIELD	4868:63	4868:63	9	output
LEAF_NODE	4868:63	4868:63	10	output
LEAF_NODE	4868:69	4868:69	8	)
LEAF_NODE	4868:70	4868:70	4	;
EXPR_STATEMENT	4869:1	4871:5	3	written += t2pWriteFile ( output , ( tdata_t ) "/Type /XObject \n/Subtype /Image \n/Name /Im" , 42 ) ;
EXPR	4869:1	4869:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/Type /XObject \n/Subtype /Image \n/Name /Im" , 42 )
ASSIGN	4869:1	4869:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/Type /XObject \n/Subtype /Image \n/Name /Im" , 42 )
LVAL	4869:1	4869:1	6	written
FIELD	4869:1	4869:1	7	written
LEAF_NODE	4869:1	4869:1	8	written
ASSIGN_OP	4869:9	4869:9	6	+=
LEAF_NODE	4869:9	4869:9	7	+=
RVAL	4869:12	4869:12	6	t2pWriteFile ( output , ( tdata_t ) "/Type /XObject \n/Subtype /Image \n/Name /Im" , 42 )
FUNCTION_CALL	4869:12	4871:4	7	t2pWriteFile ( output , ( tdata_t ) "/Type /XObject \n/Subtype /Image \n/Name /Im" , 42 )
CALLEE	4869:12	4869:12	8	t2pWriteFile
LEAF_NODE	4869:12	4869:12	9	t2pWriteFile
LEAF_NODE	4869:24	4869:24	8	(
ARGUMENT	4869:25	4869:25	8	output
FIELD	4869:25	4869:25	9	output
LEAF_NODE	4869:25	4869:25	10	output
LEAF_NODE	4869:31	4869:31	8	,
ARGUMENT	4870:2	4870:12	8	( tdata_t ) "/Type /XObject \n/Subtype /Image \n/Name /Im"
LEAF_NODE	4870:2	4870:2	9	(
TYPE_NAME	4870:3	4870:3	9	tdata_t
LEAF_NODE	4870:3	4870:3	10	tdata_t
LEAF_NODE	4870:10	4870:10	9	)
FIELD	4870:12	4870:12	9	"/Type /XObject \n/Subtype /Image \n/Name /Im"
LEAF_NODE	4870:12	4870:12	10	"/Type /XObject \n/Subtype /Image \n/Name /Im"
LEAF_NODE	4870:58	4870:58	8	,
ARGUMENT	4871:2	4871:2	8	42
FIELD	4871:2	4871:2	9	42
LEAF_NODE	4871:2	4871:2	10	42
LEAF_NODE	4871:4	4871:4	8	)
LEAF_NODE	4871:5	4871:5	4	;
EXPR_STATEMENT	4872:1	4872:63	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 ) ;
EXPR	4872:1	4872:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
ASSIGN	4872:1	4872:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
LVAL	4872:1	4872:1	6	buflen
FIELD	4872:1	4872:1	7	buflen
LEAF_NODE	4872:1	4872:1	8	buflen
ASSIGN_OP	4872:7	4872:7	6	=
LEAF_NODE	4872:7	4872:7	7	=
RVAL	4872:8	4872:8	6	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
FUNCTION_CALL	4872:8	4872:62	7	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_page + 1 )
CALLEE	4872:8	4872:8	8	snprintf
LEAF_NODE	4872:8	4872:8	9	snprintf
LEAF_NODE	4872:16	4872:16	8	(
ARGUMENT	4872:17	4872:17	8	buffer
FIELD	4872:17	4872:17	9	buffer
LEAF_NODE	4872:17	4872:17	10	buffer
LEAF_NODE	4872:23	4872:23	8	,
ARGUMENT	4872:25	4872:25	8	sizeof ( buffer )
FUNCTION_CALL	4872:25	4872:38	9	sizeof ( buffer )
CALLEE	4872:25	4872:25	10	sizeof
LEAF_NODE	4872:25	4872:25	11	sizeof
LEAF_NODE	4872:31	4872:31	10	(
ARGUMENT	4872:32	4872:32	10	buffer
FIELD	4872:32	4872:32	11	buffer
LEAF_NODE	4872:32	4872:32	12	buffer
LEAF_NODE	4872:38	4872:38	10	)
LEAF_NODE	4872:39	4872:39	8	,
ARGUMENT	4872:41	4872:41	8	"%u"
FIELD	4872:41	4872:41	9	"%u"
LEAF_NODE	4872:41	4872:41	10	"%u"
LEAF_NODE	4872:45	4872:45	8	,
ARGUMENT	4872:47	4872:61	8	t2p -> pdf_page + 1
FIELD	4872:47	4872:52	9	t2p -> pdf_page
LEAF_NODE	4872:47	4872:47	10	t2p
LEAF_NODE	4872:50	4872:50	10	->
LEAF_NODE	4872:52	4872:52	10	pdf_page
LEAF_NODE	4872:60	4872:60	9	+
FIELD	4872:61	4872:61	9	1
LEAF_NODE	4872:61	4872:61	10	1
LEAF_NODE	4872:62	4872:62	8	)
LEAF_NODE	4872:63	4872:63	4	;
EXPR_STATEMENT	4873:1	4873:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4873:1	4873:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4873:1	4873:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4873:1	4873:1	6	check_snprintf_ret
LEAF_NODE	4873:1	4873:1	7	check_snprintf_ret
LEAF_NODE	4873:19	4873:19	6	(
ARGUMENT	4873:20	4873:20	6	t2p
FIELD	4873:20	4873:20	7	t2p
LEAF_NODE	4873:20	4873:20	8	t2p
LEAF_NODE	4873:23	4873:23	6	,
ARGUMENT	4873:25	4873:25	6	buflen
FIELD	4873:25	4873:25	7	buflen
LEAF_NODE	4873:25	4873:25	8	buflen
LEAF_NODE	4873:31	4873:31	6	,
ARGUMENT	4873:33	4873:33	6	buffer
FIELD	4873:33	4873:33	7	buffer
LEAF_NODE	4873:33	4873:33	8	buffer
LEAF_NODE	4873:39	4873:39	6	)
LEAF_NODE	4873:40	4873:40	4	;
EXPR_STATEMENT	4874:1	4874:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4874:1	4874:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4874:1	4874:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4874:1	4874:1	6	written
FIELD	4874:1	4874:1	7	written
LEAF_NODE	4874:1	4874:1	8	written
ASSIGN_OP	4874:9	4874:9	6	+=
LEAF_NODE	4874:9	4874:9	7	+=
RVAL	4874:12	4874:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4874:12	4874:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4874:12	4874:12	8	t2pWriteFile
LEAF_NODE	4874:12	4874:12	9	t2pWriteFile
LEAF_NODE	4874:24	4874:24	8	(
ARGUMENT	4874:25	4874:25	8	output
FIELD	4874:25	4874:25	9	output
LEAF_NODE	4874:25	4874:25	10	output
LEAF_NODE	4874:31	4874:31	8	,
ARGUMENT	4874:33	4874:43	8	( tdata_t ) buffer
LEAF_NODE	4874:33	4874:33	9	(
TYPE_NAME	4874:34	4874:34	9	tdata_t
LEAF_NODE	4874:34	4874:34	10	tdata_t
LEAF_NODE	4874:41	4874:41	9	)
FIELD	4874:43	4874:43	9	buffer
LEAF_NODE	4874:43	4874:43	10	buffer
LEAF_NODE	4874:49	4874:49	8	,
ARGUMENT	4874:51	4874:51	8	buflen
FIELD	4874:51	4874:51	9	buflen
LEAF_NODE	4874:51	4874:51	10	buflen
LEAF_NODE	4874:57	4874:57	8	)
LEAF_NODE	4874:58	4874:58	4	;
SELECTION	4875:1	4875:14	3	
KEYWORD	4875:1	4875:1	4	if
LEAF_NODE	4875:1	4875:1	5	if
LEAF_NODE	4875:3	4875:3	4	(
CONDITION	4875:4	4875:4	4	tile != 0
EXPR	4875:4	4875:12	5	tile != 0
FIELD	4875:4	4875:4	6	tile
LEAF_NODE	4875:4	4875:4	7	tile
EQ_OPERATOR	4875:9	4875:9	6	!=
LEAF_NODE	4875:9	4875:9	7	!=
FIELD	4875:12	4875:12	6	0
LEAF_NODE	4875:12	4875:12	7	0
LEAF_NODE	4875:13	4875:13	4	)
STATEMENTS	4875:14	4880:1	4	
LEAF_NODE	4875:14	4875:14	5	{
STATEMENTS	4876:2	4879:2	5	
EXPR_STATEMENT	4876:2	4876:51	6	written += t2pWriteFile ( output , ( tdata_t ) "_" , 1 ) ;
EXPR	4876:2	4876:2	7	written += t2pWriteFile ( output , ( tdata_t ) "_" , 1 )
ASSIGN	4876:2	4876:13	8	written += t2pWriteFile ( output , ( tdata_t ) "_" , 1 )
LVAL	4876:2	4876:2	9	written
FIELD	4876:2	4876:2	10	written
LEAF_NODE	4876:2	4876:2	11	written
ASSIGN_OP	4876:10	4876:10	9	+=
LEAF_NODE	4876:10	4876:10	10	+=
RVAL	4876:13	4876:13	9	t2pWriteFile ( output , ( tdata_t ) "_" , 1 )
FUNCTION_CALL	4876:13	4876:50	10	t2pWriteFile ( output , ( tdata_t ) "_" , 1 )
CALLEE	4876:13	4876:13	11	t2pWriteFile
LEAF_NODE	4876:13	4876:13	12	t2pWriteFile
LEAF_NODE	4876:25	4876:25	11	(
ARGUMENT	4876:26	4876:26	11	output
FIELD	4876:26	4876:26	12	output
LEAF_NODE	4876:26	4876:26	13	output
LEAF_NODE	4876:32	4876:32	11	,
ARGUMENT	4876:34	4876:44	11	( tdata_t ) "_"
LEAF_NODE	4876:34	4876:34	12	(
TYPE_NAME	4876:35	4876:35	12	tdata_t
LEAF_NODE	4876:35	4876:35	13	tdata_t
LEAF_NODE	4876:42	4876:42	12	)
FIELD	4876:44	4876:44	12	"_"
LEAF_NODE	4876:44	4876:44	13	"_"
LEAF_NODE	4876:47	4876:47	11	,
ARGUMENT	4876:49	4876:49	11	1
FIELD	4876:49	4876:49	12	1
LEAF_NODE	4876:49	4876:49	13	1
LEAF_NODE	4876:50	4876:50	11	)
LEAF_NODE	4876:51	4876:51	7	;
EXPR_STATEMENT	4877:2	4877:69	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) tile ) ;
EXPR	4877:2	4877:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) tile )
ASSIGN	4877:2	4877:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) tile )
LVAL	4877:2	4877:2	9	buflen
FIELD	4877:2	4877:2	10	buflen
LEAF_NODE	4877:2	4877:2	11	buflen
ASSIGN_OP	4877:8	4877:8	9	=
LEAF_NODE	4877:8	4877:8	10	=
RVAL	4877:9	4877:9	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) tile )
FUNCTION_CALL	4877:9	4877:68	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) tile )
CALLEE	4877:9	4877:9	11	snprintf
LEAF_NODE	4877:9	4877:9	12	snprintf
LEAF_NODE	4877:17	4877:17	11	(
ARGUMENT	4877:18	4877:18	11	buffer
FIELD	4877:18	4877:18	12	buffer
LEAF_NODE	4877:18	4877:18	13	buffer
LEAF_NODE	4877:24	4877:24	11	,
ARGUMENT	4877:26	4877:26	11	sizeof ( buffer )
FUNCTION_CALL	4877:26	4877:39	12	sizeof ( buffer )
CALLEE	4877:26	4877:26	13	sizeof
LEAF_NODE	4877:26	4877:26	14	sizeof
LEAF_NODE	4877:32	4877:32	13	(
ARGUMENT	4877:33	4877:33	13	buffer
FIELD	4877:33	4877:33	14	buffer
LEAF_NODE	4877:33	4877:33	15	buffer
LEAF_NODE	4877:39	4877:39	13	)
LEAF_NODE	4877:40	4877:40	11	,
ARGUMENT	4877:42	4877:42	11	"%lu"
FIELD	4877:42	4877:42	12	"%lu"
LEAF_NODE	4877:42	4877:42	13	"%lu"
LEAF_NODE	4877:47	4877:47	11	,
ARGUMENT	4877:49	4877:64	11	( unsigned long ) tile
LEAF_NODE	4877:49	4877:49	12	(
TYPE_NAME	4877:50	4877:59	12	unsigned long
LEAF_NODE	4877:50	4877:50	13	unsigned
LEAF_NODE	4877:59	4877:59	13	long
LEAF_NODE	4877:63	4877:63	12	)
FIELD	4877:64	4877:64	12	tile
LEAF_NODE	4877:64	4877:64	13	tile
LEAF_NODE	4877:68	4877:68	11	)
LEAF_NODE	4877:69	4877:69	7	;
EXPR_STATEMENT	4878:2	4878:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4878:2	4878:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4878:2	4878:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4878:2	4878:2	9	check_snprintf_ret
LEAF_NODE	4878:2	4878:2	10	check_snprintf_ret
LEAF_NODE	4878:20	4878:20	9	(
ARGUMENT	4878:21	4878:21	9	t2p
FIELD	4878:21	4878:21	10	t2p
LEAF_NODE	4878:21	4878:21	11	t2p
LEAF_NODE	4878:24	4878:24	9	,
ARGUMENT	4878:26	4878:26	9	buflen
FIELD	4878:26	4878:26	10	buflen
LEAF_NODE	4878:26	4878:26	11	buflen
LEAF_NODE	4878:32	4878:32	9	,
ARGUMENT	4878:34	4878:34	9	buffer
FIELD	4878:34	4878:34	10	buffer
LEAF_NODE	4878:34	4878:34	11	buffer
LEAF_NODE	4878:40	4878:40	9	)
LEAF_NODE	4878:41	4878:41	7	;
EXPR_STATEMENT	4879:2	4879:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4879:2	4879:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4879:2	4879:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4879:2	4879:2	9	written
FIELD	4879:2	4879:2	10	written
LEAF_NODE	4879:2	4879:2	11	written
ASSIGN_OP	4879:10	4879:10	9	+=
LEAF_NODE	4879:10	4879:10	10	+=
RVAL	4879:13	4879:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4879:13	4879:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4879:13	4879:13	11	t2pWriteFile
LEAF_NODE	4879:13	4879:13	12	t2pWriteFile
LEAF_NODE	4879:25	4879:25	11	(
ARGUMENT	4879:26	4879:26	11	output
FIELD	4879:26	4879:26	12	output
LEAF_NODE	4879:26	4879:26	13	output
LEAF_NODE	4879:32	4879:32	11	,
ARGUMENT	4879:34	4879:44	11	( tdata_t ) buffer
LEAF_NODE	4879:34	4879:34	12	(
TYPE_NAME	4879:35	4879:35	12	tdata_t
LEAF_NODE	4879:35	4879:35	13	tdata_t
LEAF_NODE	4879:42	4879:42	12	)
FIELD	4879:44	4879:44	12	buffer
LEAF_NODE	4879:44	4879:44	13	buffer
LEAF_NODE	4879:50	4879:50	11	,
ARGUMENT	4879:52	4879:52	11	buflen
FIELD	4879:52	4879:52	12	buflen
LEAF_NODE	4879:52	4879:52	13	buflen
LEAF_NODE	4879:58	4879:58	11	)
LEAF_NODE	4879:59	4879:59	7	;
LEAF_NODE	4880:1	4880:1	5	}
EXPR_STATEMENT	4881:1	4881:58	3	written += t2pWriteFile ( output , ( tdata_t ) "\n/Width " , 8 ) ;
EXPR	4881:1	4881:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\n/Width " , 8 )
ASSIGN	4881:1	4881:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\n/Width " , 8 )
LVAL	4881:1	4881:1	6	written
FIELD	4881:1	4881:1	7	written
LEAF_NODE	4881:1	4881:1	8	written
ASSIGN_OP	4881:9	4881:9	6	+=
LEAF_NODE	4881:9	4881:9	7	+=
RVAL	4881:12	4881:12	6	t2pWriteFile ( output , ( tdata_t ) "\n/Width " , 8 )
FUNCTION_CALL	4881:12	4881:57	7	t2pWriteFile ( output , ( tdata_t ) "\n/Width " , 8 )
CALLEE	4881:12	4881:12	8	t2pWriteFile
LEAF_NODE	4881:12	4881:12	9	t2pWriteFile
LEAF_NODE	4881:24	4881:24	8	(
ARGUMENT	4881:25	4881:25	8	output
FIELD	4881:25	4881:25	9	output
LEAF_NODE	4881:25	4881:25	10	output
LEAF_NODE	4881:31	4881:31	8	,
ARGUMENT	4881:33	4881:43	8	( tdata_t ) "\n/Width "
LEAF_NODE	4881:33	4881:33	9	(
TYPE_NAME	4881:34	4881:34	9	tdata_t
LEAF_NODE	4881:34	4881:34	10	tdata_t
LEAF_NODE	4881:41	4881:41	9	)
FIELD	4881:43	4881:43	9	"\n/Width "
LEAF_NODE	4881:43	4881:43	10	"\n/Width "
LEAF_NODE	4881:54	4881:54	8	,
ARGUMENT	4881:56	4881:56	8	8
FIELD	4881:56	4881:56	9	8
LEAF_NODE	4881:56	4881:56	10	8
LEAF_NODE	4881:57	4881:57	8	)
LEAF_NODE	4881:58	4881:58	4	;
SELECTION	4882:1	4882:12	3	
KEYWORD	4882:1	4882:1	4	if
LEAF_NODE	4882:1	4882:1	5	if
LEAF_NODE	4882:3	4882:3	4	(
CONDITION	4882:4	4882:4	4	tile == 0
EXPR	4882:4	4882:10	5	tile == 0
FIELD	4882:4	4882:4	6	tile
LEAF_NODE	4882:4	4882:4	7	tile
EQ_OPERATOR	4882:8	4882:8	6	==
LEAF_NODE	4882:8	4882:8	7	==
FIELD	4882:10	4882:10	6	0
LEAF_NODE	4882:10	4882:10	7	0
LEAF_NODE	4882:11	4882:11	4	)
STATEMENTS	4882:12	4884:1	4	
LEAF_NODE	4882:12	4882:12	5	{
STATEMENTS	4883:2	4883:2	5	
EXPR_STATEMENT	4883:2	4883:80	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width ) ;
EXPR	4883:2	4883:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
ASSIGN	4883:2	4883:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
LVAL	4883:2	4883:2	9	buflen
FIELD	4883:2	4883:2	10	buflen
LEAF_NODE	4883:2	4883:2	11	buflen
ASSIGN_OP	4883:8	4883:8	9	=
LEAF_NODE	4883:8	4883:8	10	=
RVAL	4883:9	4883:9	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
FUNCTION_CALL	4883:9	4883:79	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
CALLEE	4883:9	4883:9	11	snprintf
LEAF_NODE	4883:9	4883:9	12	snprintf
LEAF_NODE	4883:17	4883:17	11	(
ARGUMENT	4883:18	4883:18	11	buffer
FIELD	4883:18	4883:18	12	buffer
LEAF_NODE	4883:18	4883:18	13	buffer
LEAF_NODE	4883:24	4883:24	11	,
ARGUMENT	4883:26	4883:26	11	sizeof ( buffer )
FUNCTION_CALL	4883:26	4883:39	12	sizeof ( buffer )
CALLEE	4883:26	4883:26	13	sizeof
LEAF_NODE	4883:26	4883:26	14	sizeof
LEAF_NODE	4883:32	4883:32	13	(
ARGUMENT	4883:33	4883:33	13	buffer
FIELD	4883:33	4883:33	14	buffer
LEAF_NODE	4883:33	4883:33	15	buffer
LEAF_NODE	4883:39	4883:39	13	)
LEAF_NODE	4883:40	4883:40	11	,
ARGUMENT	4883:42	4883:42	11	"%lu"
FIELD	4883:42	4883:42	12	"%lu"
LEAF_NODE	4883:42	4883:42	13	"%lu"
LEAF_NODE	4883:47	4883:47	11	,
ARGUMENT	4883:49	4883:64	11	( unsigned long ) t2p -> tiff_width
LEAF_NODE	4883:49	4883:49	12	(
TYPE_NAME	4883:50	4883:59	12	unsigned long
LEAF_NODE	4883:50	4883:50	13	unsigned
LEAF_NODE	4883:59	4883:59	13	long
LEAF_NODE	4883:63	4883:63	12	)
FIELD	4883:64	4883:69	12	t2p -> tiff_width
LEAF_NODE	4883:64	4883:64	13	t2p
LEAF_NODE	4883:67	4883:67	13	->
LEAF_NODE	4883:69	4883:69	13	tiff_width
LEAF_NODE	4883:79	4883:79	11	)
LEAF_NODE	4883:80	4883:80	7	;
LEAF_NODE	4884:1	4884:1	5	}
SELECTION	4884:3	4884:8	3	
KEYWORD	4884:3	4884:3	4	else
LEAF_NODE	4884:3	4884:3	5	else
STATEMENTS	4884:8	4892:1	4	
LEAF_NODE	4884:8	4884:8	5	{
STATEMENTS	4885:2	4888:4	5	
SELECTION	4885:2	4885:71	6	
KEYWORD	4885:2	4885:2	7	if
LEAF_NODE	4885:2	4885:2	8	if
LEAF_NODE	4885:4	4885:4	7	(
CONDITION	4885:5	4885:5	7	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 ) != 0
EXPR	4885:5	4885:69	8	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 ) != 0
FUNCTION_CALL	4885:5	4885:66	9	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 )
CALLEE	4885:5	4885:5	10	t2p_tile_is_right_edge
LEAF_NODE	4885:5	4885:5	11	t2p_tile_is_right_edge
LEAF_NODE	4885:27	4885:27	10	(
ARGUMENT	4885:28	4885:28	10	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	4885:28	4885:57	11	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4885:28	4885:28	12	t2p
LEAF_NODE	4885:31	4885:31	12	->
LEAF_NODE	4885:33	4885:33	12	tiff_tiles
LEAF_NODE	4885:43	4885:43	12	[
EXPR	4885:44	4885:44	12	t2p -> pdf_page
FIELD	4885:44	4885:49	13	t2p -> pdf_page
LEAF_NODE	4885:44	4885:44	14	t2p
LEAF_NODE	4885:47	4885:47	14	->
LEAF_NODE	4885:49	4885:49	14	pdf_page
LEAF_NODE	4885:57	4885:57	12	]
LEAF_NODE	4885:58	4885:58	10	,
ARGUMENT	4885:60	4885:65	10	tile - 1
FIELD	4885:60	4885:60	11	tile
LEAF_NODE	4885:60	4885:60	12	tile
LEAF_NODE	4885:64	4885:64	11	-
FIELD	4885:65	4885:65	11	1
LEAF_NODE	4885:65	4885:65	12	1
LEAF_NODE	4885:66	4885:66	10	)
EQ_OPERATOR	4885:67	4885:67	9	!=
LEAF_NODE	4885:67	4885:67	10	!=
FIELD	4885:69	4885:69	9	0
LEAF_NODE	4885:69	4885:69	10	0
LEAF_NODE	4885:70	4885:70	7	)
STATEMENTS	4885:71	4888:2	7	
LEAF_NODE	4885:71	4885:71	8	{
STATEMENTS	4886:3	4886:3	8	
EXPR_STATEMENT	4886:3	4887:70	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth ) ;
EXPR	4886:3	4886:3	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth )
ASSIGN	4886:3	4886:10	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth )
LVAL	4886:3	4886:3	12	buflen
FIELD	4886:3	4886:3	13	buflen
LEAF_NODE	4886:3	4886:3	14	buflen
ASSIGN_OP	4886:9	4886:9	12	=
LEAF_NODE	4886:9	4886:9	13	=
RVAL	4886:10	4886:10	12	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth )
FUNCTION_CALL	4886:10	4887:69	13	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth )
CALLEE	4886:10	4886:10	14	snprintf
LEAF_NODE	4886:10	4886:10	15	snprintf
LEAF_NODE	4886:18	4886:18	14	(
ARGUMENT	4886:19	4886:19	14	buffer
FIELD	4886:19	4886:19	15	buffer
LEAF_NODE	4886:19	4886:19	16	buffer
LEAF_NODE	4886:25	4886:25	14	,
ARGUMENT	4886:27	4886:27	14	sizeof ( buffer )
FUNCTION_CALL	4886:27	4886:40	15	sizeof ( buffer )
CALLEE	4886:27	4886:27	16	sizeof
LEAF_NODE	4886:27	4886:27	17	sizeof
LEAF_NODE	4886:33	4886:33	16	(
ARGUMENT	4886:34	4886:34	16	buffer
FIELD	4886:34	4886:34	17	buffer
LEAF_NODE	4886:34	4886:34	18	buffer
LEAF_NODE	4886:40	4886:40	16	)
LEAF_NODE	4886:41	4886:41	14	,
ARGUMENT	4886:43	4886:43	14	"%lu"
FIELD	4886:43	4886:43	15	"%lu"
LEAF_NODE	4886:43	4886:43	16	"%lu"
LEAF_NODE	4886:48	4886:48	14	,
ARGUMENT	4887:4	4887:19	14	( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth
LEAF_NODE	4887:4	4887:4	15	(
TYPE_NAME	4887:5	4887:14	15	unsigned long
LEAF_NODE	4887:5	4887:5	16	unsigned
LEAF_NODE	4887:14	4887:14	16	long
LEAF_NODE	4887:18	4887:18	15	)
FIELD	4887:19	4887:50	15	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth
LEAF_NODE	4887:19	4887:19	16	t2p
LEAF_NODE	4887:22	4887:22	16	->
LEAF_NODE	4887:24	4887:24	16	tiff_tiles
LEAF_NODE	4887:34	4887:34	16	[
EXPR	4887:35	4887:35	16	t2p -> pdf_page
FIELD	4887:35	4887:40	17	t2p -> pdf_page
LEAF_NODE	4887:35	4887:35	18	t2p
LEAF_NODE	4887:38	4887:38	18	->
LEAF_NODE	4887:40	4887:40	18	pdf_page
LEAF_NODE	4887:48	4887:48	16	]
LEAF_NODE	4887:49	4887:49	16	.
LEAF_NODE	4887:50	4887:50	16	tiles_edgetilewidth
LEAF_NODE	4887:69	4887:69	14	)
LEAF_NODE	4887:70	4887:70	10	;
LEAF_NODE	4888:2	4888:2	8	}
SELECTION	4888:4	4888:9	6	
KEYWORD	4888:4	4888:4	7	else
LEAF_NODE	4888:4	4888:4	8	else
STATEMENTS	4888:9	4891:2	7	
LEAF_NODE	4888:9	4888:9	8	{
STATEMENTS	4889:3	4889:3	8	
EXPR_STATEMENT	4889:3	4890:66	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth ) ;
EXPR	4889:3	4889:3	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth )
ASSIGN	4889:3	4889:10	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth )
LVAL	4889:3	4889:3	12	buflen
FIELD	4889:3	4889:3	13	buflen
LEAF_NODE	4889:3	4889:3	14	buflen
ASSIGN_OP	4889:9	4889:9	12	=
LEAF_NODE	4889:9	4889:9	13	=
RVAL	4889:10	4889:10	12	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth )
FUNCTION_CALL	4889:10	4890:65	13	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth )
CALLEE	4889:10	4889:10	14	snprintf
LEAF_NODE	4889:10	4889:10	15	snprintf
LEAF_NODE	4889:18	4889:18	14	(
ARGUMENT	4889:19	4889:19	14	buffer
FIELD	4889:19	4889:19	15	buffer
LEAF_NODE	4889:19	4889:19	16	buffer
LEAF_NODE	4889:25	4889:25	14	,
ARGUMENT	4889:27	4889:27	14	sizeof ( buffer )
FUNCTION_CALL	4889:27	4889:40	15	sizeof ( buffer )
CALLEE	4889:27	4889:27	16	sizeof
LEAF_NODE	4889:27	4889:27	17	sizeof
LEAF_NODE	4889:33	4889:33	16	(
ARGUMENT	4889:34	4889:34	16	buffer
FIELD	4889:34	4889:34	17	buffer
LEAF_NODE	4889:34	4889:34	18	buffer
LEAF_NODE	4889:40	4889:40	16	)
LEAF_NODE	4889:41	4889:41	14	,
ARGUMENT	4889:43	4889:43	14	"%lu"
FIELD	4889:43	4889:43	15	"%lu"
LEAF_NODE	4889:43	4889:43	16	"%lu"
LEAF_NODE	4889:48	4889:48	14	,
ARGUMENT	4890:4	4890:19	14	( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	4890:4	4890:4	15	(
TYPE_NAME	4890:5	4890:14	15	unsigned long
LEAF_NODE	4890:5	4890:5	16	unsigned
LEAF_NODE	4890:14	4890:14	16	long
LEAF_NODE	4890:18	4890:18	15	)
FIELD	4890:19	4890:50	15	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	4890:19	4890:19	16	t2p
LEAF_NODE	4890:22	4890:22	16	->
LEAF_NODE	4890:24	4890:24	16	tiff_tiles
LEAF_NODE	4890:34	4890:34	16	[
EXPR	4890:35	4890:35	16	t2p -> pdf_page
FIELD	4890:35	4890:40	17	t2p -> pdf_page
LEAF_NODE	4890:35	4890:35	18	t2p
LEAF_NODE	4890:38	4890:38	18	->
LEAF_NODE	4890:40	4890:40	18	pdf_page
LEAF_NODE	4890:48	4890:48	16	]
LEAF_NODE	4890:49	4890:49	16	.
LEAF_NODE	4890:50	4890:50	16	tiles_tilewidth
LEAF_NODE	4890:65	4890:65	14	)
LEAF_NODE	4890:66	4890:66	10	;
LEAF_NODE	4891:2	4891:2	8	}
LEAF_NODE	4892:1	4892:1	5	}
EXPR_STATEMENT	4893:1	4893:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4893:1	4893:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4893:1	4893:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4893:1	4893:1	6	check_snprintf_ret
LEAF_NODE	4893:1	4893:1	7	check_snprintf_ret
LEAF_NODE	4893:19	4893:19	6	(
ARGUMENT	4893:20	4893:20	6	t2p
FIELD	4893:20	4893:20	7	t2p
LEAF_NODE	4893:20	4893:20	8	t2p
LEAF_NODE	4893:23	4893:23	6	,
ARGUMENT	4893:25	4893:25	6	buflen
FIELD	4893:25	4893:25	7	buflen
LEAF_NODE	4893:25	4893:25	8	buflen
LEAF_NODE	4893:31	4893:31	6	,
ARGUMENT	4893:33	4893:33	6	buffer
FIELD	4893:33	4893:33	7	buffer
LEAF_NODE	4893:33	4893:33	8	buffer
LEAF_NODE	4893:39	4893:39	6	)
LEAF_NODE	4893:40	4893:40	4	;
EXPR_STATEMENT	4894:1	4894:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4894:1	4894:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4894:1	4894:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4894:1	4894:1	6	written
FIELD	4894:1	4894:1	7	written
LEAF_NODE	4894:1	4894:1	8	written
ASSIGN_OP	4894:9	4894:9	6	+=
LEAF_NODE	4894:9	4894:9	7	+=
RVAL	4894:12	4894:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4894:12	4894:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4894:12	4894:12	8	t2pWriteFile
LEAF_NODE	4894:12	4894:12	9	t2pWriteFile
LEAF_NODE	4894:24	4894:24	8	(
ARGUMENT	4894:25	4894:25	8	output
FIELD	4894:25	4894:25	9	output
LEAF_NODE	4894:25	4894:25	10	output
LEAF_NODE	4894:31	4894:31	8	,
ARGUMENT	4894:33	4894:43	8	( tdata_t ) buffer
LEAF_NODE	4894:33	4894:33	9	(
TYPE_NAME	4894:34	4894:34	9	tdata_t
LEAF_NODE	4894:34	4894:34	10	tdata_t
LEAF_NODE	4894:41	4894:41	9	)
FIELD	4894:43	4894:43	9	buffer
LEAF_NODE	4894:43	4894:43	10	buffer
LEAF_NODE	4894:49	4894:49	8	,
ARGUMENT	4894:51	4894:51	8	buflen
FIELD	4894:51	4894:51	9	buflen
LEAF_NODE	4894:51	4894:51	10	buflen
LEAF_NODE	4894:57	4894:57	8	)
LEAF_NODE	4894:58	4894:58	4	;
EXPR_STATEMENT	4895:1	4895:59	3	written += t2pWriteFile ( output , ( tdata_t ) "\n/Height " , 9 ) ;
EXPR	4895:1	4895:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\n/Height " , 9 )
ASSIGN	4895:1	4895:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\n/Height " , 9 )
LVAL	4895:1	4895:1	6	written
FIELD	4895:1	4895:1	7	written
LEAF_NODE	4895:1	4895:1	8	written
ASSIGN_OP	4895:9	4895:9	6	+=
LEAF_NODE	4895:9	4895:9	7	+=
RVAL	4895:12	4895:12	6	t2pWriteFile ( output , ( tdata_t ) "\n/Height " , 9 )
FUNCTION_CALL	4895:12	4895:58	7	t2pWriteFile ( output , ( tdata_t ) "\n/Height " , 9 )
CALLEE	4895:12	4895:12	8	t2pWriteFile
LEAF_NODE	4895:12	4895:12	9	t2pWriteFile
LEAF_NODE	4895:24	4895:24	8	(
ARGUMENT	4895:25	4895:25	8	output
FIELD	4895:25	4895:25	9	output
LEAF_NODE	4895:25	4895:25	10	output
LEAF_NODE	4895:31	4895:31	8	,
ARGUMENT	4895:33	4895:43	8	( tdata_t ) "\n/Height "
LEAF_NODE	4895:33	4895:33	9	(
TYPE_NAME	4895:34	4895:34	9	tdata_t
LEAF_NODE	4895:34	4895:34	10	tdata_t
LEAF_NODE	4895:41	4895:41	9	)
FIELD	4895:43	4895:43	9	"\n/Height "
LEAF_NODE	4895:43	4895:43	10	"\n/Height "
LEAF_NODE	4895:55	4895:55	8	,
ARGUMENT	4895:57	4895:57	8	9
FIELD	4895:57	4895:57	9	9
LEAF_NODE	4895:57	4895:57	10	9
LEAF_NODE	4895:58	4895:58	8	)
LEAF_NODE	4895:59	4895:59	4	;
SELECTION	4896:1	4896:12	3	
KEYWORD	4896:1	4896:1	4	if
LEAF_NODE	4896:1	4896:1	5	if
LEAF_NODE	4896:3	4896:3	4	(
CONDITION	4896:4	4896:4	4	tile == 0
EXPR	4896:4	4896:10	5	tile == 0
FIELD	4896:4	4896:4	6	tile
LEAF_NODE	4896:4	4896:4	7	tile
EQ_OPERATOR	4896:8	4896:8	6	==
LEAF_NODE	4896:8	4896:8	7	==
FIELD	4896:10	4896:10	6	0
LEAF_NODE	4896:10	4896:10	7	0
LEAF_NODE	4896:11	4896:11	4	)
STATEMENTS	4896:12	4898:1	4	
LEAF_NODE	4896:12	4896:12	5	{
STATEMENTS	4897:2	4897:2	5	
EXPR_STATEMENT	4897:2	4897:81	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_length ) ;
EXPR	4897:2	4897:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_length )
ASSIGN	4897:2	4897:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_length )
LVAL	4897:2	4897:2	9	buflen
FIELD	4897:2	4897:2	10	buflen
LEAF_NODE	4897:2	4897:2	11	buflen
ASSIGN_OP	4897:8	4897:8	9	=
LEAF_NODE	4897:8	4897:8	10	=
RVAL	4897:9	4897:9	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_length )
FUNCTION_CALL	4897:9	4897:80	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_length )
CALLEE	4897:9	4897:9	11	snprintf
LEAF_NODE	4897:9	4897:9	12	snprintf
LEAF_NODE	4897:17	4897:17	11	(
ARGUMENT	4897:18	4897:18	11	buffer
FIELD	4897:18	4897:18	12	buffer
LEAF_NODE	4897:18	4897:18	13	buffer
LEAF_NODE	4897:24	4897:24	11	,
ARGUMENT	4897:26	4897:26	11	sizeof ( buffer )
FUNCTION_CALL	4897:26	4897:39	12	sizeof ( buffer )
CALLEE	4897:26	4897:26	13	sizeof
LEAF_NODE	4897:26	4897:26	14	sizeof
LEAF_NODE	4897:32	4897:32	13	(
ARGUMENT	4897:33	4897:33	13	buffer
FIELD	4897:33	4897:33	14	buffer
LEAF_NODE	4897:33	4897:33	15	buffer
LEAF_NODE	4897:39	4897:39	13	)
LEAF_NODE	4897:40	4897:40	11	,
ARGUMENT	4897:42	4897:42	11	"%lu"
FIELD	4897:42	4897:42	12	"%lu"
LEAF_NODE	4897:42	4897:42	13	"%lu"
LEAF_NODE	4897:47	4897:47	11	,
ARGUMENT	4897:49	4897:64	11	( unsigned long ) t2p -> tiff_length
LEAF_NODE	4897:49	4897:49	12	(
TYPE_NAME	4897:50	4897:59	12	unsigned long
LEAF_NODE	4897:50	4897:50	13	unsigned
LEAF_NODE	4897:59	4897:59	13	long
LEAF_NODE	4897:63	4897:63	12	)
FIELD	4897:64	4897:69	12	t2p -> tiff_length
LEAF_NODE	4897:64	4897:64	13	t2p
LEAF_NODE	4897:67	4897:67	13	->
LEAF_NODE	4897:69	4897:69	13	tiff_length
LEAF_NODE	4897:80	4897:80	11	)
LEAF_NODE	4897:81	4897:81	7	;
LEAF_NODE	4898:1	4898:1	5	}
SELECTION	4898:3	4898:8	3	
KEYWORD	4898:3	4898:3	4	else
LEAF_NODE	4898:3	4898:3	5	else
STATEMENTS	4898:8	4906:1	4	
LEAF_NODE	4898:8	4898:8	5	{
STATEMENTS	4899:2	4902:4	5	
SELECTION	4899:2	4899:72	6	
KEYWORD	4899:2	4899:2	7	if
LEAF_NODE	4899:2	4899:2	8	if
LEAF_NODE	4899:4	4899:4	7	(
CONDITION	4899:5	4899:5	7	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 ) != 0
EXPR	4899:5	4899:70	8	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 ) != 0
FUNCTION_CALL	4899:5	4899:67	9	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 )
CALLEE	4899:5	4899:5	10	t2p_tile_is_bottom_edge
LEAF_NODE	4899:5	4899:5	11	t2p_tile_is_bottom_edge
LEAF_NODE	4899:28	4899:28	10	(
ARGUMENT	4899:29	4899:29	10	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	4899:29	4899:58	11	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	4899:29	4899:29	12	t2p
LEAF_NODE	4899:32	4899:32	12	->
LEAF_NODE	4899:34	4899:34	12	tiff_tiles
LEAF_NODE	4899:44	4899:44	12	[
EXPR	4899:45	4899:45	12	t2p -> pdf_page
FIELD	4899:45	4899:50	13	t2p -> pdf_page
LEAF_NODE	4899:45	4899:45	14	t2p
LEAF_NODE	4899:48	4899:48	14	->
LEAF_NODE	4899:50	4899:50	14	pdf_page
LEAF_NODE	4899:58	4899:58	12	]
LEAF_NODE	4899:59	4899:59	10	,
ARGUMENT	4899:61	4899:66	10	tile - 1
FIELD	4899:61	4899:61	11	tile
LEAF_NODE	4899:61	4899:61	12	tile
LEAF_NODE	4899:65	4899:65	11	-
FIELD	4899:66	4899:66	11	1
LEAF_NODE	4899:66	4899:66	12	1
LEAF_NODE	4899:67	4899:67	10	)
EQ_OPERATOR	4899:68	4899:68	9	!=
LEAF_NODE	4899:68	4899:68	10	!=
FIELD	4899:70	4899:70	9	0
LEAF_NODE	4899:70	4899:70	10	0
LEAF_NODE	4899:71	4899:71	7	)
STATEMENTS	4899:72	4902:2	7	
LEAF_NODE	4899:72	4899:72	8	{
STATEMENTS	4900:3	4900:3	8	
EXPR_STATEMENT	4900:3	4901:71	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength ) ;
EXPR	4900:3	4900:3	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
ASSIGN	4900:3	4900:10	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
LVAL	4900:3	4900:3	12	buflen
FIELD	4900:3	4900:3	13	buflen
LEAF_NODE	4900:3	4900:3	14	buflen
ASSIGN_OP	4900:9	4900:9	12	=
LEAF_NODE	4900:9	4900:9	13	=
RVAL	4900:10	4900:10	12	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
FUNCTION_CALL	4900:10	4901:70	13	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
CALLEE	4900:10	4900:10	14	snprintf
LEAF_NODE	4900:10	4900:10	15	snprintf
LEAF_NODE	4900:18	4900:18	14	(
ARGUMENT	4900:19	4900:19	14	buffer
FIELD	4900:19	4900:19	15	buffer
LEAF_NODE	4900:19	4900:19	16	buffer
LEAF_NODE	4900:25	4900:25	14	,
ARGUMENT	4900:27	4900:27	14	sizeof ( buffer )
FUNCTION_CALL	4900:27	4900:40	15	sizeof ( buffer )
CALLEE	4900:27	4900:27	16	sizeof
LEAF_NODE	4900:27	4900:27	17	sizeof
LEAF_NODE	4900:33	4900:33	16	(
ARGUMENT	4900:34	4900:34	16	buffer
FIELD	4900:34	4900:34	17	buffer
LEAF_NODE	4900:34	4900:34	18	buffer
LEAF_NODE	4900:40	4900:40	16	)
LEAF_NODE	4900:41	4900:41	14	,
ARGUMENT	4900:43	4900:43	14	"%lu"
FIELD	4900:43	4900:43	15	"%lu"
LEAF_NODE	4900:43	4900:43	16	"%lu"
LEAF_NODE	4900:48	4900:48	14	,
ARGUMENT	4901:4	4901:19	14	( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength
LEAF_NODE	4901:4	4901:4	15	(
TYPE_NAME	4901:5	4901:14	15	unsigned long
LEAF_NODE	4901:5	4901:5	16	unsigned
LEAF_NODE	4901:14	4901:14	16	long
LEAF_NODE	4901:18	4901:18	15	)
FIELD	4901:19	4901:50	15	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength
LEAF_NODE	4901:19	4901:19	16	t2p
LEAF_NODE	4901:22	4901:22	16	->
LEAF_NODE	4901:24	4901:24	16	tiff_tiles
LEAF_NODE	4901:34	4901:34	16	[
EXPR	4901:35	4901:35	16	t2p -> pdf_page
FIELD	4901:35	4901:40	17	t2p -> pdf_page
LEAF_NODE	4901:35	4901:35	18	t2p
LEAF_NODE	4901:38	4901:38	18	->
LEAF_NODE	4901:40	4901:40	18	pdf_page
LEAF_NODE	4901:48	4901:48	16	]
LEAF_NODE	4901:49	4901:49	16	.
LEAF_NODE	4901:50	4901:50	16	tiles_edgetilelength
LEAF_NODE	4901:70	4901:70	14	)
LEAF_NODE	4901:71	4901:71	10	;
LEAF_NODE	4902:2	4902:2	8	}
SELECTION	4902:4	4902:9	6	
KEYWORD	4902:4	4902:4	7	else
LEAF_NODE	4902:4	4902:4	8	else
STATEMENTS	4902:9	4905:2	7	
LEAF_NODE	4902:9	4902:9	8	{
STATEMENTS	4903:3	4903:3	8	
EXPR_STATEMENT	4903:3	4904:67	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) ;
EXPR	4903:3	4903:3	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
ASSIGN	4903:3	4903:10	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
LVAL	4903:3	4903:3	12	buflen
FIELD	4903:3	4903:3	13	buflen
LEAF_NODE	4903:3	4903:3	14	buflen
ASSIGN_OP	4903:9	4903:9	12	=
LEAF_NODE	4903:9	4903:9	13	=
RVAL	4903:10	4903:10	12	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
FUNCTION_CALL	4903:10	4904:66	13	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
CALLEE	4903:10	4903:10	14	snprintf
LEAF_NODE	4903:10	4903:10	15	snprintf
LEAF_NODE	4903:18	4903:18	14	(
ARGUMENT	4903:19	4903:19	14	buffer
FIELD	4903:19	4903:19	15	buffer
LEAF_NODE	4903:19	4903:19	16	buffer
LEAF_NODE	4903:25	4903:25	14	,
ARGUMENT	4903:27	4903:27	14	sizeof ( buffer )
FUNCTION_CALL	4903:27	4903:40	15	sizeof ( buffer )
CALLEE	4903:27	4903:27	16	sizeof
LEAF_NODE	4903:27	4903:27	17	sizeof
LEAF_NODE	4903:33	4903:33	16	(
ARGUMENT	4903:34	4903:34	16	buffer
FIELD	4903:34	4903:34	17	buffer
LEAF_NODE	4903:34	4903:34	18	buffer
LEAF_NODE	4903:40	4903:40	16	)
LEAF_NODE	4903:41	4903:41	14	,
ARGUMENT	4903:43	4903:43	14	"%lu"
FIELD	4903:43	4903:43	15	"%lu"
LEAF_NODE	4903:43	4903:43	16	"%lu"
LEAF_NODE	4903:48	4903:48	14	,
ARGUMENT	4904:4	4904:19	14	( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	4904:4	4904:4	15	(
TYPE_NAME	4904:5	4904:14	15	unsigned long
LEAF_NODE	4904:5	4904:5	16	unsigned
LEAF_NODE	4904:14	4904:14	16	long
LEAF_NODE	4904:18	4904:18	15	)
FIELD	4904:19	4904:50	15	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	4904:19	4904:19	16	t2p
LEAF_NODE	4904:22	4904:22	16	->
LEAF_NODE	4904:24	4904:24	16	tiff_tiles
LEAF_NODE	4904:34	4904:34	16	[
EXPR	4904:35	4904:35	16	t2p -> pdf_page
FIELD	4904:35	4904:40	17	t2p -> pdf_page
LEAF_NODE	4904:35	4904:35	18	t2p
LEAF_NODE	4904:38	4904:38	18	->
LEAF_NODE	4904:40	4904:40	18	pdf_page
LEAF_NODE	4904:48	4904:48	16	]
LEAF_NODE	4904:49	4904:49	16	.
LEAF_NODE	4904:50	4904:50	16	tiles_tilelength
LEAF_NODE	4904:66	4904:66	14	)
LEAF_NODE	4904:67	4904:67	10	;
LEAF_NODE	4905:2	4905:2	8	}
LEAF_NODE	4906:1	4906:1	5	}
EXPR_STATEMENT	4907:1	4907:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4907:1	4907:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4907:1	4907:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4907:1	4907:1	6	check_snprintf_ret
LEAF_NODE	4907:1	4907:1	7	check_snprintf_ret
LEAF_NODE	4907:19	4907:19	6	(
ARGUMENT	4907:20	4907:20	6	t2p
FIELD	4907:20	4907:20	7	t2p
LEAF_NODE	4907:20	4907:20	8	t2p
LEAF_NODE	4907:23	4907:23	6	,
ARGUMENT	4907:25	4907:25	6	buflen
FIELD	4907:25	4907:25	7	buflen
LEAF_NODE	4907:25	4907:25	8	buflen
LEAF_NODE	4907:31	4907:31	6	,
ARGUMENT	4907:33	4907:33	6	buffer
FIELD	4907:33	4907:33	7	buffer
LEAF_NODE	4907:33	4907:33	8	buffer
LEAF_NODE	4907:39	4907:39	6	)
LEAF_NODE	4907:40	4907:40	4	;
EXPR_STATEMENT	4908:1	4908:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4908:1	4908:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4908:1	4908:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4908:1	4908:1	6	written
FIELD	4908:1	4908:1	7	written
LEAF_NODE	4908:1	4908:1	8	written
ASSIGN_OP	4908:9	4908:9	6	+=
LEAF_NODE	4908:9	4908:9	7	+=
RVAL	4908:12	4908:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4908:12	4908:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4908:12	4908:12	8	t2pWriteFile
LEAF_NODE	4908:12	4908:12	9	t2pWriteFile
LEAF_NODE	4908:24	4908:24	8	(
ARGUMENT	4908:25	4908:25	8	output
FIELD	4908:25	4908:25	9	output
LEAF_NODE	4908:25	4908:25	10	output
LEAF_NODE	4908:31	4908:31	8	,
ARGUMENT	4908:33	4908:43	8	( tdata_t ) buffer
LEAF_NODE	4908:33	4908:33	9	(
TYPE_NAME	4908:34	4908:34	9	tdata_t
LEAF_NODE	4908:34	4908:34	10	tdata_t
LEAF_NODE	4908:41	4908:41	9	)
FIELD	4908:43	4908:43	9	buffer
LEAF_NODE	4908:43	4908:43	10	buffer
LEAF_NODE	4908:49	4908:49	8	,
ARGUMENT	4908:51	4908:51	8	buflen
FIELD	4908:51	4908:51	9	buflen
LEAF_NODE	4908:51	4908:51	10	buflen
LEAF_NODE	4908:57	4908:57	8	)
LEAF_NODE	4908:58	4908:58	4	;
EXPR_STATEMENT	4909:1	4909:70	3	written += t2pWriteFile ( output , ( tdata_t ) "\n/BitsPerComponent " , 19 ) ;
EXPR	4909:1	4909:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\n/BitsPerComponent " , 19 )
ASSIGN	4909:1	4909:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\n/BitsPerComponent " , 19 )
LVAL	4909:1	4909:1	6	written
FIELD	4909:1	4909:1	7	written
LEAF_NODE	4909:1	4909:1	8	written
ASSIGN_OP	4909:9	4909:9	6	+=
LEAF_NODE	4909:9	4909:9	7	+=
RVAL	4909:12	4909:12	6	t2pWriteFile ( output , ( tdata_t ) "\n/BitsPerComponent " , 19 )
FUNCTION_CALL	4909:12	4909:69	7	t2pWriteFile ( output , ( tdata_t ) "\n/BitsPerComponent " , 19 )
CALLEE	4909:12	4909:12	8	t2pWriteFile
LEAF_NODE	4909:12	4909:12	9	t2pWriteFile
LEAF_NODE	4909:24	4909:24	8	(
ARGUMENT	4909:25	4909:25	8	output
FIELD	4909:25	4909:25	9	output
LEAF_NODE	4909:25	4909:25	10	output
LEAF_NODE	4909:31	4909:31	8	,
ARGUMENT	4909:33	4909:43	8	( tdata_t ) "\n/BitsPerComponent "
LEAF_NODE	4909:33	4909:33	9	(
TYPE_NAME	4909:34	4909:34	9	tdata_t
LEAF_NODE	4909:34	4909:34	10	tdata_t
LEAF_NODE	4909:41	4909:41	9	)
FIELD	4909:43	4909:43	9	"\n/BitsPerComponent "
LEAF_NODE	4909:43	4909:43	10	"\n/BitsPerComponent "
LEAF_NODE	4909:65	4909:65	8	,
ARGUMENT	4909:67	4909:67	8	19
FIELD	4909:67	4909:67	9	19
LEAF_NODE	4909:67	4909:67	10	19
LEAF_NODE	4909:69	4909:69	8	)
LEAF_NODE	4909:70	4909:70	4	;
EXPR_STATEMENT	4910:1	4910:71	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_bitspersample ) ;
EXPR	4910:1	4910:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_bitspersample )
ASSIGN	4910:1	4910:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_bitspersample )
LVAL	4910:1	4910:1	6	buflen
FIELD	4910:1	4910:1	7	buflen
LEAF_NODE	4910:1	4910:1	8	buflen
ASSIGN_OP	4910:7	4910:7	6	=
LEAF_NODE	4910:7	4910:7	7	=
RVAL	4910:8	4910:8	6	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_bitspersample )
FUNCTION_CALL	4910:8	4910:70	7	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_bitspersample )
CALLEE	4910:8	4910:8	8	snprintf
LEAF_NODE	4910:8	4910:8	9	snprintf
LEAF_NODE	4910:16	4910:16	8	(
ARGUMENT	4910:17	4910:17	8	buffer
FIELD	4910:17	4910:17	9	buffer
LEAF_NODE	4910:17	4910:17	10	buffer
LEAF_NODE	4910:23	4910:23	8	,
ARGUMENT	4910:25	4910:25	8	sizeof ( buffer )
FUNCTION_CALL	4910:25	4910:38	9	sizeof ( buffer )
CALLEE	4910:25	4910:25	10	sizeof
LEAF_NODE	4910:25	4910:25	11	sizeof
LEAF_NODE	4910:31	4910:31	10	(
ARGUMENT	4910:32	4910:32	10	buffer
FIELD	4910:32	4910:32	11	buffer
LEAF_NODE	4910:32	4910:32	12	buffer
LEAF_NODE	4910:38	4910:38	10	)
LEAF_NODE	4910:39	4910:39	8	,
ARGUMENT	4910:41	4910:41	8	"%u"
FIELD	4910:41	4910:41	9	"%u"
LEAF_NODE	4910:41	4910:41	10	"%u"
LEAF_NODE	4910:45	4910:45	8	,
ARGUMENT	4910:47	4910:47	8	t2p -> tiff_bitspersample
FIELD	4910:47	4910:52	9	t2p -> tiff_bitspersample
LEAF_NODE	4910:47	4910:47	10	t2p
LEAF_NODE	4910:50	4910:50	10	->
LEAF_NODE	4910:52	4910:52	10	tiff_bitspersample
LEAF_NODE	4910:70	4910:70	8	)
LEAF_NODE	4910:71	4910:71	4	;
EXPR_STATEMENT	4911:1	4911:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4911:1	4911:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4911:1	4911:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4911:1	4911:1	6	check_snprintf_ret
LEAF_NODE	4911:1	4911:1	7	check_snprintf_ret
LEAF_NODE	4911:19	4911:19	6	(
ARGUMENT	4911:20	4911:20	6	t2p
FIELD	4911:20	4911:20	7	t2p
LEAF_NODE	4911:20	4911:20	8	t2p
LEAF_NODE	4911:23	4911:23	6	,
ARGUMENT	4911:25	4911:25	6	buflen
FIELD	4911:25	4911:25	7	buflen
LEAF_NODE	4911:25	4911:25	8	buflen
LEAF_NODE	4911:31	4911:31	6	,
ARGUMENT	4911:33	4911:33	6	buffer
FIELD	4911:33	4911:33	7	buffer
LEAF_NODE	4911:33	4911:33	8	buffer
LEAF_NODE	4911:39	4911:39	6	)
LEAF_NODE	4911:40	4911:40	4	;
EXPR_STATEMENT	4912:1	4912:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4912:1	4912:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4912:1	4912:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4912:1	4912:1	6	written
FIELD	4912:1	4912:1	7	written
LEAF_NODE	4912:1	4912:1	8	written
ASSIGN_OP	4912:9	4912:9	6	+=
LEAF_NODE	4912:9	4912:9	7	+=
RVAL	4912:12	4912:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4912:12	4912:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4912:12	4912:12	8	t2pWriteFile
LEAF_NODE	4912:12	4912:12	9	t2pWriteFile
LEAF_NODE	4912:24	4912:24	8	(
ARGUMENT	4912:25	4912:25	8	output
FIELD	4912:25	4912:25	9	output
LEAF_NODE	4912:25	4912:25	10	output
LEAF_NODE	4912:31	4912:31	8	,
ARGUMENT	4912:33	4912:43	8	( tdata_t ) buffer
LEAF_NODE	4912:33	4912:33	9	(
TYPE_NAME	4912:34	4912:34	9	tdata_t
LEAF_NODE	4912:34	4912:34	10	tdata_t
LEAF_NODE	4912:41	4912:41	9	)
FIELD	4912:43	4912:43	9	buffer
LEAF_NODE	4912:43	4912:43	10	buffer
LEAF_NODE	4912:49	4912:49	8	,
ARGUMENT	4912:51	4912:51	8	buflen
FIELD	4912:51	4912:51	9	buflen
LEAF_NODE	4912:51	4912:51	10	buflen
LEAF_NODE	4912:57	4912:57	8	)
LEAF_NODE	4912:58	4912:58	4	;
EXPR_STATEMENT	4913:1	4913:64	3	written += t2pWriteFile ( output , ( tdata_t ) "\n/ColorSpace " , 13 ) ;
EXPR	4913:1	4913:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\n/ColorSpace " , 13 )
ASSIGN	4913:1	4913:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\n/ColorSpace " , 13 )
LVAL	4913:1	4913:1	6	written
FIELD	4913:1	4913:1	7	written
LEAF_NODE	4913:1	4913:1	8	written
ASSIGN_OP	4913:9	4913:9	6	+=
LEAF_NODE	4913:9	4913:9	7	+=
RVAL	4913:12	4913:12	6	t2pWriteFile ( output , ( tdata_t ) "\n/ColorSpace " , 13 )
FUNCTION_CALL	4913:12	4913:63	7	t2pWriteFile ( output , ( tdata_t ) "\n/ColorSpace " , 13 )
CALLEE	4913:12	4913:12	8	t2pWriteFile
LEAF_NODE	4913:12	4913:12	9	t2pWriteFile
LEAF_NODE	4913:24	4913:24	8	(
ARGUMENT	4913:25	4913:25	8	output
FIELD	4913:25	4913:25	9	output
LEAF_NODE	4913:25	4913:25	10	output
LEAF_NODE	4913:31	4913:31	8	,
ARGUMENT	4913:33	4913:43	8	( tdata_t ) "\n/ColorSpace "
LEAF_NODE	4913:33	4913:33	9	(
TYPE_NAME	4913:34	4913:34	9	tdata_t
LEAF_NODE	4913:34	4913:34	10	tdata_t
LEAF_NODE	4913:41	4913:41	9	)
FIELD	4913:43	4913:43	9	"\n/ColorSpace "
LEAF_NODE	4913:43	4913:43	10	"\n/ColorSpace "
LEAF_NODE	4913:59	4913:59	8	,
ARGUMENT	4913:61	4913:61	8	13
FIELD	4913:61	4913:61	9	13
LEAF_NODE	4913:61	4913:61	10	13
LEAF_NODE	4913:63	4913:63	8	)
LEAF_NODE	4913:64	4913:64	4	;
EXPR_STATEMENT	4914:1	4914:49	3	written += t2p_write_pdf_xobject_cs ( t2p , output ) ;
EXPR	4914:1	4914:1	4	written += t2p_write_pdf_xobject_cs ( t2p , output )
ASSIGN	4914:1	4914:12	5	written += t2p_write_pdf_xobject_cs ( t2p , output )
LVAL	4914:1	4914:1	6	written
FIELD	4914:1	4914:1	7	written
LEAF_NODE	4914:1	4914:1	8	written
ASSIGN_OP	4914:9	4914:9	6	+=
LEAF_NODE	4914:9	4914:9	7	+=
RVAL	4914:12	4914:12	6	t2p_write_pdf_xobject_cs ( t2p , output )
FUNCTION_CALL	4914:12	4914:48	7	t2p_write_pdf_xobject_cs ( t2p , output )
CALLEE	4914:12	4914:12	8	t2p_write_pdf_xobject_cs
LEAF_NODE	4914:12	4914:12	9	t2p_write_pdf_xobject_cs
LEAF_NODE	4914:36	4914:36	8	(
ARGUMENT	4914:37	4914:37	8	t2p
FIELD	4914:37	4914:37	9	t2p
LEAF_NODE	4914:37	4914:37	10	t2p
LEAF_NODE	4914:40	4914:40	8	,
ARGUMENT	4914:42	4914:42	8	output
FIELD	4914:42	4914:42	9	output
LEAF_NODE	4914:42	4914:42	10	output
LEAF_NODE	4914:48	4914:48	8	)
LEAF_NODE	4914:49	4914:49	4	;
SELECTION	4915:1	4916:2	3	
KEYWORD	4915:1	4915:1	4	if
LEAF_NODE	4915:1	4915:1	5	if
LEAF_NODE	4915:4	4915:4	4	(
CONDITION	4915:5	4915:5	4	t2p -> pdf_image_interpolate
EXPR	4915:5	4915:5	5	t2p -> pdf_image_interpolate
FIELD	4915:5	4915:10	6	t2p -> pdf_image_interpolate
LEAF_NODE	4915:5	4915:5	7	t2p
LEAF_NODE	4915:8	4915:8	7	->
LEAF_NODE	4915:10	4915:10	7	pdf_image_interpolate
LEAF_NODE	4915:31	4915:31	4	)
STATEMENTS	4916:2	4916:2	4	
EXPR_STATEMENT	4916:2	4917:42	5	written += t2pWriteFile ( output , ( tdata_t ) "\n/Interpolate true" , 18 ) ;
EXPR	4916:2	4916:2	6	written += t2pWriteFile ( output , ( tdata_t ) "\n/Interpolate true" , 18 )
ASSIGN	4916:2	4916:13	7	written += t2pWriteFile ( output , ( tdata_t ) "\n/Interpolate true" , 18 )
LVAL	4916:2	4916:2	8	written
FIELD	4916:2	4916:2	9	written
LEAF_NODE	4916:2	4916:2	10	written
ASSIGN_OP	4916:10	4916:10	8	+=
LEAF_NODE	4916:10	4916:10	9	+=
RVAL	4916:13	4916:13	8	t2pWriteFile ( output , ( tdata_t ) "\n/Interpolate true" , 18 )
FUNCTION_CALL	4916:13	4917:41	9	t2pWriteFile ( output , ( tdata_t ) "\n/Interpolate true" , 18 )
CALLEE	4916:13	4916:13	10	t2pWriteFile
LEAF_NODE	4916:13	4916:13	11	t2pWriteFile
LEAF_NODE	4916:25	4916:25	10	(
ARGUMENT	4916:26	4916:26	10	output
FIELD	4916:26	4916:26	11	output
LEAF_NODE	4916:26	4916:26	12	output
LEAF_NODE	4916:32	4916:32	10	,
ARGUMENT	4917:6	4917:16	10	( tdata_t ) "\n/Interpolate true"
LEAF_NODE	4917:6	4917:6	11	(
TYPE_NAME	4917:7	4917:7	11	tdata_t
LEAF_NODE	4917:7	4917:7	12	tdata_t
LEAF_NODE	4917:14	4917:14	11	)
FIELD	4917:16	4917:16	11	"\n/Interpolate true"
LEAF_NODE	4917:16	4917:16	12	"\n/Interpolate true"
LEAF_NODE	4917:37	4917:37	10	,
ARGUMENT	4917:39	4917:39	10	18
FIELD	4917:39	4917:39	11	18
LEAF_NODE	4917:39	4917:39	12	18
LEAF_NODE	4917:41	4917:41	10	)
LEAF_NODE	4917:42	4917:42	6	;
SELECTION	4918:1	4923:3	3	
KEYWORD	4918:1	4918:1	4	if
LEAF_NODE	4918:1	4918:1	5	if
LEAF_NODE	4918:3	4918:3	4	(
CONDITION	4918:5	4918:5	4	( t2p -> pdf_switchdecode != 0 ) && ! ( t2p -> pdf_colorspace & T2P_CS_BILEVEL && t2p -> pdf_compression == T2P_COMPRESS_G4 )
EXPR	4918:5	4918:5	5	( t2p -> pdf_switchdecode != 0 ) && ! ( t2p -> pdf_colorspace & T2P_CS_BILEVEL && t2p -> pdf_compression == T2P_COMPRESS_G4 )
AND	4918:5	4920:5	6	( t2p -> pdf_switchdecode != 0 ) && ! ( t2p -> pdf_colorspace & T2P_CS_BILEVEL && t2p -> pdf_compression == T2P_COMPRESS_G4 )
EXPR	4918:5	4918:32	7	( t2p -> pdf_switchdecode != 0 )
LEAF_NODE	4918:5	4918:5	8	(
FIELD	4918:6	4918:11	8	t2p -> pdf_switchdecode
LEAF_NODE	4918:6	4918:6	9	t2p
LEAF_NODE	4918:9	4918:9	9	->
LEAF_NODE	4918:11	4918:11	9	pdf_switchdecode
EQ_OPERATOR	4918:28	4918:28	8	!=
LEAF_NODE	4918:28	4918:28	9	!=
FIELD	4918:31	4918:31	8	0
LEAF_NODE	4918:31	4918:31	9	0
LEAF_NODE	4918:32	4918:32	8	)
LEAF_NODE	4920:2	4920:2	7	&&
EXPR	4920:5	4920:5	7	! ( t2p -> pdf_colorspace & T2P_CS_BILEVEL && t2p -> pdf_compression == T2P_COMPRESS_G4 )
UNARY_EXPR	4920:5	4921:44	8	! ( t2p -> pdf_colorspace & T2P_CS_BILEVEL && t2p -> pdf_compression == T2P_COMPRESS_G4 )
UNARY_OPERATOR	4920:5	4920:5	9	!
LEAF_NODE	4920:5	4920:5	10	!
LEAF_NODE	4920:7	4920:7	9	(
AND	4920:8	4921:5	9	t2p -> pdf_colorspace & T2P_CS_BILEVEL && t2p -> pdf_compression == T2P_COMPRESS_G4
EXPR	4920:8	4920:30	10	t2p -> pdf_colorspace & T2P_CS_BILEVEL
FIELD	4920:8	4920:13	11	t2p -> pdf_colorspace
LEAF_NODE	4920:8	4920:8	12	t2p
LEAF_NODE	4920:11	4920:11	12	->
LEAF_NODE	4920:13	4920:13	12	pdf_colorspace
LEAF_NODE	4920:28	4920:28	11	&
FIELD	4920:30	4920:30	11	T2P_CS_BILEVEL
LEAF_NODE	4920:30	4920:30	12	T2P_CS_BILEVEL
LEAF_NODE	4921:2	4921:2	10	&&
EXPR	4921:5	4921:29	10	t2p -> pdf_compression == T2P_COMPRESS_G4
FIELD	4921:5	4921:10	11	t2p -> pdf_compression
LEAF_NODE	4921:5	4921:5	12	t2p
LEAF_NODE	4921:8	4921:8	12	->
LEAF_NODE	4921:10	4921:10	12	pdf_compression
EQ_OPERATOR	4921:26	4921:26	11	==
LEAF_NODE	4921:26	4921:26	12	==
FIELD	4921:29	4921:29	11	T2P_COMPRESS_G4
LEAF_NODE	4921:29	4921:29	12	T2P_COMPRESS_G4
LEAF_NODE	4921:44	4921:44	9	)
LEAF_NODE	4923:2	4923:2	4	)
STATEMENTS	4923:3	4925:1	4	
LEAF_NODE	4923:3	4923:3	5	{
STATEMENTS	4924:2	4924:2	5	
EXPR_STATEMENT	4924:2	4924:54	6	written += t2p_write_pdf_xobject_decode ( t2p , output ) ;
EXPR	4924:2	4924:2	7	written += t2p_write_pdf_xobject_decode ( t2p , output )
ASSIGN	4924:2	4924:13	8	written += t2p_write_pdf_xobject_decode ( t2p , output )
LVAL	4924:2	4924:2	9	written
FIELD	4924:2	4924:2	10	written
LEAF_NODE	4924:2	4924:2	11	written
ASSIGN_OP	4924:10	4924:10	9	+=
LEAF_NODE	4924:10	4924:10	10	+=
RVAL	4924:13	4924:13	9	t2p_write_pdf_xobject_decode ( t2p , output )
FUNCTION_CALL	4924:13	4924:53	10	t2p_write_pdf_xobject_decode ( t2p , output )
CALLEE	4924:13	4924:13	11	t2p_write_pdf_xobject_decode
LEAF_NODE	4924:13	4924:13	12	t2p_write_pdf_xobject_decode
LEAF_NODE	4924:41	4924:41	11	(
ARGUMENT	4924:42	4924:42	11	t2p
FIELD	4924:42	4924:42	12	t2p
LEAF_NODE	4924:42	4924:42	13	t2p
LEAF_NODE	4924:45	4924:45	11	,
ARGUMENT	4924:47	4924:47	11	output
FIELD	4924:47	4924:47	12	output
LEAF_NODE	4924:47	4924:47	13	output
LEAF_NODE	4924:53	4924:53	11	)
LEAF_NODE	4924:54	4924:54	7	;
LEAF_NODE	4925:1	4925:1	5	}
EXPR_STATEMENT	4926:1	4926:66	3	written += t2p_write_pdf_xobject_stream_filter ( tile , t2p , output ) ;
EXPR	4926:1	4926:1	4	written += t2p_write_pdf_xobject_stream_filter ( tile , t2p , output )
ASSIGN	4926:1	4926:12	5	written += t2p_write_pdf_xobject_stream_filter ( tile , t2p , output )
LVAL	4926:1	4926:1	6	written
FIELD	4926:1	4926:1	7	written
LEAF_NODE	4926:1	4926:1	8	written
ASSIGN_OP	4926:9	4926:9	6	+=
LEAF_NODE	4926:9	4926:9	7	+=
RVAL	4926:12	4926:12	6	t2p_write_pdf_xobject_stream_filter ( tile , t2p , output )
FUNCTION_CALL	4926:12	4926:65	7	t2p_write_pdf_xobject_stream_filter ( tile , t2p , output )
CALLEE	4926:12	4926:12	8	t2p_write_pdf_xobject_stream_filter
LEAF_NODE	4926:12	4926:12	9	t2p_write_pdf_xobject_stream_filter
LEAF_NODE	4926:47	4926:47	8	(
ARGUMENT	4926:48	4926:48	8	tile
FIELD	4926:48	4926:48	9	tile
LEAF_NODE	4926:48	4926:48	10	tile
LEAF_NODE	4926:52	4926:52	8	,
ARGUMENT	4926:54	4926:54	8	t2p
FIELD	4926:54	4926:54	9	t2p
LEAF_NODE	4926:54	4926:54	10	t2p
LEAF_NODE	4926:57	4926:57	8	,
ARGUMENT	4926:59	4926:59	8	output
FIELD	4926:59	4926:59	9	output
LEAF_NODE	4926:59	4926:59	10	output
LEAF_NODE	4926:65	4926:65	8	)
LEAF_NODE	4926:66	4926:66	4	;
LEAF_NODE	4928:1	4928:1	3	return
LEAF_NODE	4928:7	4928:7	3	(
LEAF_NODE	4928:8	4928:8	3	written
LEAF_NODE	4928:15	4928:15	3	)
LEAF_NODE	4928:16	4928:16	3	;
LEAF_NODE	4929:0	4929:0	2	}
FUNCTION_DEF	4936:0	5010:0	1	
RETURN_TYPE	4936:0	4936:0	2	tsize_t
TYPE_NAME	4936:0	4936:0	3	tsize_t
LEAF_NODE	4936:0	4936:0	4	tsize_t
FUNCTION_NAME	4936:8	4936:8	2	t2p_write_pdf_xobject_cs
LEAF_NODE	4936:8	4936:8	3	t2p_write_pdf_xobject_cs
PARAMETER_LIST	4936:32	4936:55	2	( T2P * t2p , TIFF * output )
LEAF_NODE	4936:32	4936:32	3	(
PARAMETER_DECL	4936:33	4936:38	3	T2P * t2p
TYPE	4936:33	4936:36	4	T2P *
TYPE_NAME	4936:33	4936:33	5	T2P
LEAF_NODE	4936:33	4936:33	6	T2P
POINTER	4936:36	4936:36	5	*
LEAF_NODE	4936:36	4936:36	6	*
NAME	4936:38	4936:38	4	t2p
LEAF_NODE	4936:38	4936:38	5	t2p
LEAF_NODE	4936:41	4936:41	3	,
PARAMETER_DECL	4936:43	4936:49	3	TIFF * output
TYPE	4936:43	4936:47	4	TIFF *
TYPE_NAME	4936:43	4936:43	5	TIFF
LEAF_NODE	4936:43	4936:43	6	TIFF
POINTER	4936:47	4936:47	5	*
LEAF_NODE	4936:47	4936:47	6	*
NAME	4936:49	4936:49	4	output
LEAF_NODE	4936:49	4936:49	5	output
LEAF_NODE	4936:55	4936:55	3	)
LEAF_NODE	4936:56	4936:56	2	{
STATEMENTS	4938:1	5009:16	2	
SIMPLE_DECL	4938:1	4938:18	3	tsize_t written ; written = 0 ;
VAR_DECL	4938:1	4938:9	4	tsize_t written ; written = 0
TYPE	4938:1	4938:1	5	tsize_t
TYPE_NAME	4938:1	4938:1	6	tsize_t
LEAF_NODE	4938:1	4938:1	7	tsize_t
NAME	4938:9	4938:9	5	written
LEAF_NODE	4938:9	4938:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	4938:9	4938:9	5	written = 0
ASSIGN	4938:9	4938:17	6	written = 0
LVAL	4938:9	4938:9	7	written
NAME	4938:9	4938:9	8	written
LEAF_NODE	4938:9	4938:9	9	written
ASSIGN_OP	4938:16	4938:16	7	=
LEAF_NODE	4938:16	4938:16	8	=
RVAL	4938:17	4938:17	7	0
FIELD	4938:17	4938:17	8	0
LEAF_NODE	4938:17	4938:17	9	0
LEAF_NODE	4938:18	4938:18	4	;
SIMPLE_DECL	4939:1	4939:17	3	char [ 128 ] buffer ;
VAR_DECL	4939:1	4939:6	4	char [ 128 ] buffer
TYPE	4939:1	4939:12	5	char [ 128 ]
TYPE_NAME	4939:1	4939:1	6	char
LEAF_NODE	4939:1	4939:1	7	char
TYPE_SUFFIX	4939:12	4939:16	6	[ 128 ]
LEAF_NODE	4939:12	4939:12	7	[
FIELD	4939:13	4939:13	7	128
LEAF_NODE	4939:13	4939:13	8	128
LEAF_NODE	4939:16	4939:16	7	]
NAME	4939:6	4939:6	5	buffer
LEAF_NODE	4939:6	4939:6	6	buffer
LEAF_NODE	4939:17	4939:17	4	;
SIMPLE_DECL	4940:1	4940:13	3	int buflen ; buflen = 0 ;
VAR_DECL	4940:1	4940:5	4	int buflen ; buflen = 0
TYPE	4940:1	4940:1	5	int
TYPE_NAME	4940:1	4940:1	6	int
LEAF_NODE	4940:1	4940:1	7	int
NAME	4940:5	4940:5	5	buflen
LEAF_NODE	4940:5	4940:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	4940:5	4940:5	5	buflen = 0
ASSIGN	4940:5	4940:12	6	buflen = 0
LVAL	4940:5	4940:5	7	buflen
NAME	4940:5	4940:5	8	buflen
LEAF_NODE	4940:5	4940:5	9	buflen
ASSIGN_OP	4940:11	4940:11	7	=
LEAF_NODE	4940:11	4940:11	8	=
RVAL	4940:12	4940:12	7	0
FIELD	4940:12	4940:12	8	0
LEAF_NODE	4940:12	4940:12	9	0
LEAF_NODE	4940:13	4940:13	4	;
SIMPLE_DECL	4942:1	4942:14	3	float X_W ; X_W = 1.0 ;
VAR_DECL	4942:1	4942:7	4	float X_W ; X_W = 1.0
TYPE	4942:1	4942:1	5	float
TYPE_NAME	4942:1	4942:1	6	float
LEAF_NODE	4942:1	4942:1	7	float
NAME	4942:7	4942:7	5	X_W
LEAF_NODE	4942:7	4942:7	6	X_W
LEAF_NODE	0:0	0:0	5	;
INIT	4942:7	4942:7	5	X_W = 1.0
ASSIGN	4942:7	4942:11	6	X_W = 1.0
LVAL	4942:7	4942:7	7	X_W
NAME	4942:7	4942:7	8	X_W
LEAF_NODE	4942:7	4942:7	9	X_W
ASSIGN_OP	4942:10	4942:10	7	=
LEAF_NODE	4942:10	4942:10	8	=
RVAL	4942:11	4942:11	7	1.0
FIELD	4942:11	4942:11	8	1.0
LEAF_NODE	4942:11	4942:11	9	1.0
LEAF_NODE	4942:14	4942:14	4	;
SIMPLE_DECL	4943:1	4943:14	3	float Y_W ; Y_W = 1.0 ;
VAR_DECL	4943:1	4943:7	4	float Y_W ; Y_W = 1.0
TYPE	4943:1	4943:1	5	float
TYPE_NAME	4943:1	4943:1	6	float
LEAF_NODE	4943:1	4943:1	7	float
NAME	4943:7	4943:7	5	Y_W
LEAF_NODE	4943:7	4943:7	6	Y_W
LEAF_NODE	0:0	0:0	5	;
INIT	4943:7	4943:7	5	Y_W = 1.0
ASSIGN	4943:7	4943:11	6	Y_W = 1.0
LVAL	4943:7	4943:7	7	Y_W
NAME	4943:7	4943:7	8	Y_W
LEAF_NODE	4943:7	4943:7	9	Y_W
ASSIGN_OP	4943:10	4943:10	7	=
LEAF_NODE	4943:10	4943:10	8	=
RVAL	4943:11	4943:11	7	1.0
FIELD	4943:11	4943:11	8	1.0
LEAF_NODE	4943:11	4943:11	9	1.0
LEAF_NODE	4943:14	4943:14	4	;
SIMPLE_DECL	4944:1	4944:14	3	float Z_W ; Z_W = 1.0 ;
VAR_DECL	4944:1	4944:7	4	float Z_W ; Z_W = 1.0
TYPE	4944:1	4944:1	5	float
TYPE_NAME	4944:1	4944:1	6	float
LEAF_NODE	4944:1	4944:1	7	float
NAME	4944:7	4944:7	5	Z_W
LEAF_NODE	4944:7	4944:7	6	Z_W
LEAF_NODE	0:0	0:0	5	;
INIT	4944:7	4944:7	5	Z_W = 1.0
ASSIGN	4944:7	4944:11	6	Z_W = 1.0
LVAL	4944:7	4944:7	7	Z_W
NAME	4944:7	4944:7	8	Z_W
LEAF_NODE	4944:7	4944:7	9	Z_W
ASSIGN_OP	4944:10	4944:10	7	=
LEAF_NODE	4944:10	4944:10	8	=
RVAL	4944:11	4944:11	7	1.0
FIELD	4944:11	4944:11	8	1.0
LEAF_NODE	4944:11	4944:11	9	1.0
LEAF_NODE	4944:14	4944:14	4	;
SELECTION	4946:1	4946:50	3	
KEYWORD	4946:1	4946:1	4	if
LEAF_NODE	4946:1	4946:1	5	if
LEAF_NODE	4946:3	4946:3	4	(
CONDITION	4946:5	4946:5	4	( t2p -> pdf_colorspace & T2P_CS_ICCBASED ) != 0
EXPR	4946:5	4946:48	5	( t2p -> pdf_colorspace & T2P_CS_ICCBASED ) != 0
LEAF_NODE	4946:5	4946:5	6	(
FIELD	4946:6	4946:11	6	t2p -> pdf_colorspace
LEAF_NODE	4946:6	4946:6	7	t2p
LEAF_NODE	4946:9	4946:9	7	->
LEAF_NODE	4946:11	4946:11	7	pdf_colorspace
LEAF_NODE	4946:26	4946:26	6	&
FIELD	4946:28	4946:28	6	T2P_CS_ICCBASED
LEAF_NODE	4946:28	4946:28	7	T2P_CS_ICCBASED
LEAF_NODE	4946:43	4946:43	6	)
EQ_OPERATOR	4946:45	4946:45	6	!=
LEAF_NODE	4946:45	4946:45	7	!=
FIELD	4946:48	4946:48	6	0
LEAF_NODE	4946:48	4946:48	7	0
LEAF_NODE	4946:49	4946:49	4	)
STATEMENTS	4946:50	4949:1	4	
LEAF_NODE	4946:50	4946:50	5	{
STATEMENTS	4947:2	4948:17	5	
EXPR_STATEMENT	4947:2	4947:53	6	written += t2p_write_pdf_xobject_icccs ( t2p , output ) ;
EXPR	4947:2	4947:2	7	written += t2p_write_pdf_xobject_icccs ( t2p , output )
ASSIGN	4947:2	4947:13	8	written += t2p_write_pdf_xobject_icccs ( t2p , output )
LVAL	4947:2	4947:2	9	written
FIELD	4947:2	4947:2	10	written
LEAF_NODE	4947:2	4947:2	11	written
ASSIGN_OP	4947:10	4947:10	9	+=
LEAF_NODE	4947:10	4947:10	10	+=
RVAL	4947:13	4947:13	9	t2p_write_pdf_xobject_icccs ( t2p , output )
FUNCTION_CALL	4947:13	4947:52	10	t2p_write_pdf_xobject_icccs ( t2p , output )
CALLEE	4947:13	4947:13	11	t2p_write_pdf_xobject_icccs
LEAF_NODE	4947:13	4947:13	12	t2p_write_pdf_xobject_icccs
LEAF_NODE	4947:40	4947:40	11	(
ARGUMENT	4947:41	4947:41	11	t2p
FIELD	4947:41	4947:41	12	t2p
LEAF_NODE	4947:41	4947:41	13	t2p
LEAF_NODE	4947:44	4947:44	11	,
ARGUMENT	4947:46	4947:46	11	output
FIELD	4947:46	4947:46	12	output
LEAF_NODE	4947:46	4947:46	13	output
LEAF_NODE	4947:52	4947:52	11	)
LEAF_NODE	4947:53	4947:53	7	;
LEAF_NODE	4948:2	4948:2	6	return
LEAF_NODE	4948:8	4948:8	6	(
LEAF_NODE	4948:9	4948:9	6	written
LEAF_NODE	4948:16	4948:16	6	)
LEAF_NODE	4948:17	4948:17	6	;
LEAF_NODE	4949:1	4949:1	5	}
SELECTION	4950:1	4950:49	3	
KEYWORD	4950:1	4950:1	4	if
LEAF_NODE	4950:1	4950:1	5	if
LEAF_NODE	4950:3	4950:3	4	(
CONDITION	4950:5	4950:5	4	( t2p -> pdf_colorspace & T2P_CS_PALETTE ) != 0
EXPR	4950:5	4950:47	5	( t2p -> pdf_colorspace & T2P_CS_PALETTE ) != 0
LEAF_NODE	4950:5	4950:5	6	(
FIELD	4950:6	4950:11	6	t2p -> pdf_colorspace
LEAF_NODE	4950:6	4950:6	7	t2p
LEAF_NODE	4950:9	4950:9	7	->
LEAF_NODE	4950:11	4950:11	7	pdf_colorspace
LEAF_NODE	4950:26	4950:26	6	&
FIELD	4950:28	4950:28	6	T2P_CS_PALETTE
LEAF_NODE	4950:28	4950:28	7	T2P_CS_PALETTE
LEAF_NODE	4950:42	4950:42	6	)
EQ_OPERATOR	4950:44	4950:44	6	!=
LEAF_NODE	4950:44	4950:44	7	!=
FIELD	4950:47	4950:47	6	0
LEAF_NODE	4950:47	4950:47	7	0
LEAF_NODE	4950:48	4950:48	4	)
STATEMENTS	4950:49	4964:1	4	
LEAF_NODE	4950:49	4950:49	5	{
STATEMENTS	4951:2	4963:17	5	
EXPR_STATEMENT	4951:2	4951:62	6	written += t2pWriteFile ( output , ( tdata_t ) "[ /Indexed " , 11 ) ;
EXPR	4951:2	4951:2	7	written += t2pWriteFile ( output , ( tdata_t ) "[ /Indexed " , 11 )
ASSIGN	4951:2	4951:13	8	written += t2pWriteFile ( output , ( tdata_t ) "[ /Indexed " , 11 )
LVAL	4951:2	4951:2	9	written
FIELD	4951:2	4951:2	10	written
LEAF_NODE	4951:2	4951:2	11	written
ASSIGN_OP	4951:10	4951:10	9	+=
LEAF_NODE	4951:10	4951:10	10	+=
RVAL	4951:13	4951:13	9	t2pWriteFile ( output , ( tdata_t ) "[ /Indexed " , 11 )
FUNCTION_CALL	4951:13	4951:61	10	t2pWriteFile ( output , ( tdata_t ) "[ /Indexed " , 11 )
CALLEE	4951:13	4951:13	11	t2pWriteFile
LEAF_NODE	4951:13	4951:13	12	t2pWriteFile
LEAF_NODE	4951:25	4951:25	11	(
ARGUMENT	4951:26	4951:26	11	output
FIELD	4951:26	4951:26	12	output
LEAF_NODE	4951:26	4951:26	13	output
LEAF_NODE	4951:32	4951:32	11	,
ARGUMENT	4951:34	4951:44	11	( tdata_t ) "[ /Indexed "
LEAF_NODE	4951:34	4951:34	12	(
TYPE_NAME	4951:35	4951:35	12	tdata_t
LEAF_NODE	4951:35	4951:35	13	tdata_t
LEAF_NODE	4951:42	4951:42	12	)
FIELD	4951:44	4951:44	12	"[ /Indexed "
LEAF_NODE	4951:44	4951:44	13	"[ /Indexed "
LEAF_NODE	4951:57	4951:57	11	,
ARGUMENT	4951:59	4951:59	11	11
FIELD	4951:59	4951:59	12	11
LEAF_NODE	4951:59	4951:59	13	11
LEAF_NODE	4951:61	4951:61	11	)
LEAF_NODE	4951:62	4951:62	7	;
EXPR_STATEMENT	4952:2	4952:39	6	t2p -> pdf_colorspace ^= T2P_CS_PALETTE ;
EXPR	4952:2	4952:2	7	t2p -> pdf_colorspace ^= T2P_CS_PALETTE
ASSIGN	4952:2	4952:25	8	t2p -> pdf_colorspace ^= T2P_CS_PALETTE
LVAL	4952:2	4952:2	9	t2p -> pdf_colorspace
FIELD	4952:2	4952:7	10	t2p -> pdf_colorspace
LEAF_NODE	4952:2	4952:2	11	t2p
LEAF_NODE	4952:5	4952:5	11	->
LEAF_NODE	4952:7	4952:7	11	pdf_colorspace
ASSIGN_OP	4952:22	4952:22	9	^=
LEAF_NODE	4952:22	4952:22	10	^=
RVAL	4952:25	4952:25	9	T2P_CS_PALETTE
FIELD	4952:25	4952:25	10	T2P_CS_PALETTE
LEAF_NODE	4952:25	4952:25	11	T2P_CS_PALETTE
LEAF_NODE	4952:39	4952:39	7	;
EXPR_STATEMENT	4953:2	4953:50	6	written += t2p_write_pdf_xobject_cs ( t2p , output ) ;
EXPR	4953:2	4953:2	7	written += t2p_write_pdf_xobject_cs ( t2p , output )
ASSIGN	4953:2	4953:13	8	written += t2p_write_pdf_xobject_cs ( t2p , output )
LVAL	4953:2	4953:2	9	written
FIELD	4953:2	4953:2	10	written
LEAF_NODE	4953:2	4953:2	11	written
ASSIGN_OP	4953:10	4953:10	9	+=
LEAF_NODE	4953:10	4953:10	10	+=
RVAL	4953:13	4953:13	9	t2p_write_pdf_xobject_cs ( t2p , output )
FUNCTION_CALL	4953:13	4953:49	10	t2p_write_pdf_xobject_cs ( t2p , output )
CALLEE	4953:13	4953:13	11	t2p_write_pdf_xobject_cs
LEAF_NODE	4953:13	4953:13	12	t2p_write_pdf_xobject_cs
LEAF_NODE	4953:37	4953:37	11	(
ARGUMENT	4953:38	4953:38	11	t2p
FIELD	4953:38	4953:38	12	t2p
LEAF_NODE	4953:38	4953:38	13	t2p
LEAF_NODE	4953:41	4953:41	11	,
ARGUMENT	4953:43	4953:43	11	output
FIELD	4953:43	4953:43	12	output
LEAF_NODE	4953:43	4953:43	13	output
LEAF_NODE	4953:49	4953:49	11	)
LEAF_NODE	4953:50	4953:50	7	;
EXPR_STATEMENT	4954:2	4954:39	6	t2p -> pdf_colorspace |= T2P_CS_PALETTE ;
EXPR	4954:2	4954:2	7	t2p -> pdf_colorspace |= T2P_CS_PALETTE
ASSIGN	4954:2	4954:25	8	t2p -> pdf_colorspace |= T2P_CS_PALETTE
LVAL	4954:2	4954:2	9	t2p -> pdf_colorspace
FIELD	4954:2	4954:7	10	t2p -> pdf_colorspace
LEAF_NODE	4954:2	4954:2	11	t2p
LEAF_NODE	4954:5	4954:5	11	->
LEAF_NODE	4954:7	4954:7	11	pdf_colorspace
ASSIGN_OP	4954:22	4954:22	9	|=
LEAF_NODE	4954:22	4954:22	10	|=
RVAL	4954:25	4954:25	9	T2P_CS_PALETTE
FIELD	4954:25	4954:25	10	T2P_CS_PALETTE
LEAF_NODE	4954:25	4954:25	11	T2P_CS_PALETTE
LEAF_NODE	4954:39	4954:39	7	;
EXPR_STATEMENT	4955:2	4955:87	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , ( 0x0001 << t2p -> tiff_bitspersample ) - 1 ) ;
EXPR	4955:2	4955:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , ( 0x0001 << t2p -> tiff_bitspersample ) - 1 )
ASSIGN	4955:2	4955:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , ( 0x0001 << t2p -> tiff_bitspersample ) - 1 )
LVAL	4955:2	4955:2	9	buflen
FIELD	4955:2	4955:2	10	buflen
LEAF_NODE	4955:2	4955:2	11	buflen
ASSIGN_OP	4955:8	4955:8	9	=
LEAF_NODE	4955:8	4955:8	10	=
RVAL	4955:9	4955:9	9	snprintf ( buffer , sizeof ( buffer ) , "%u" , ( 0x0001 << t2p -> tiff_bitspersample ) - 1 )
FUNCTION_CALL	4955:9	4955:86	10	snprintf ( buffer , sizeof ( buffer ) , "%u" , ( 0x0001 << t2p -> tiff_bitspersample ) - 1 )
CALLEE	4955:9	4955:9	11	snprintf
LEAF_NODE	4955:9	4955:9	12	snprintf
LEAF_NODE	4955:17	4955:17	11	(
ARGUMENT	4955:18	4955:18	11	buffer
FIELD	4955:18	4955:18	12	buffer
LEAF_NODE	4955:18	4955:18	13	buffer
LEAF_NODE	4955:24	4955:24	11	,
ARGUMENT	4955:26	4955:26	11	sizeof ( buffer )
FUNCTION_CALL	4955:26	4955:39	12	sizeof ( buffer )
CALLEE	4955:26	4955:26	13	sizeof
LEAF_NODE	4955:26	4955:26	14	sizeof
LEAF_NODE	4955:32	4955:32	13	(
ARGUMENT	4955:33	4955:33	13	buffer
FIELD	4955:33	4955:33	14	buffer
LEAF_NODE	4955:33	4955:33	15	buffer
LEAF_NODE	4955:39	4955:39	13	)
LEAF_NODE	4955:40	4955:40	11	,
ARGUMENT	4955:42	4955:42	11	"%u"
FIELD	4955:42	4955:42	12	"%u"
LEAF_NODE	4955:42	4955:42	13	"%u"
LEAF_NODE	4955:46	4955:46	11	,
ARGUMENT	4955:48	4955:84	11	( 0x0001 << t2p -> tiff_bitspersample ) - 1
LEAF_NODE	4955:48	4955:48	12	(
FIELD	4955:49	4955:49	12	0x0001
LEAF_NODE	4955:49	4955:49	13	0x0001
LEAF_NODE	4955:56	4955:56	12	<<
FIELD	4955:59	4955:64	12	t2p -> tiff_bitspersample
LEAF_NODE	4955:59	4955:59	13	t2p
LEAF_NODE	4955:62	4955:62	13	->
LEAF_NODE	4955:64	4955:64	13	tiff_bitspersample
LEAF_NODE	4955:82	4955:82	12	)
LEAF_NODE	4955:83	4955:83	12	-
FIELD	4955:84	4955:84	12	1
LEAF_NODE	4955:84	4955:84	13	1
LEAF_NODE	4955:86	4955:86	11	)
LEAF_NODE	4955:87	4955:87	7	;
EXPR_STATEMENT	4956:2	4956:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4956:2	4956:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4956:2	4956:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4956:2	4956:2	9	check_snprintf_ret
LEAF_NODE	4956:2	4956:2	10	check_snprintf_ret
LEAF_NODE	4956:20	4956:20	9	(
ARGUMENT	4956:21	4956:21	9	t2p
FIELD	4956:21	4956:21	10	t2p
LEAF_NODE	4956:21	4956:21	11	t2p
LEAF_NODE	4956:24	4956:24	9	,
ARGUMENT	4956:26	4956:26	9	buflen
FIELD	4956:26	4956:26	10	buflen
LEAF_NODE	4956:26	4956:26	11	buflen
LEAF_NODE	4956:32	4956:32	9	,
ARGUMENT	4956:34	4956:34	9	buffer
FIELD	4956:34	4956:34	10	buffer
LEAF_NODE	4956:34	4956:34	11	buffer
LEAF_NODE	4956:40	4956:40	9	)
LEAF_NODE	4956:41	4956:41	7	;
EXPR_STATEMENT	4957:2	4957:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4957:2	4957:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4957:2	4957:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4957:2	4957:2	9	written
FIELD	4957:2	4957:2	10	written
LEAF_NODE	4957:2	4957:2	11	written
ASSIGN_OP	4957:10	4957:10	9	+=
LEAF_NODE	4957:10	4957:10	10	+=
RVAL	4957:13	4957:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4957:13	4957:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4957:13	4957:13	11	t2pWriteFile
LEAF_NODE	4957:13	4957:13	12	t2pWriteFile
LEAF_NODE	4957:25	4957:25	11	(
ARGUMENT	4957:26	4957:26	11	output
FIELD	4957:26	4957:26	12	output
LEAF_NODE	4957:26	4957:26	13	output
LEAF_NODE	4957:32	4957:32	11	,
ARGUMENT	4957:34	4957:44	11	( tdata_t ) buffer
LEAF_NODE	4957:34	4957:34	12	(
TYPE_NAME	4957:35	4957:35	12	tdata_t
LEAF_NODE	4957:35	4957:35	13	tdata_t
LEAF_NODE	4957:42	4957:42	12	)
FIELD	4957:44	4957:44	12	buffer
LEAF_NODE	4957:44	4957:44	13	buffer
LEAF_NODE	4957:50	4957:50	11	,
ARGUMENT	4957:52	4957:52	11	buflen
FIELD	4957:52	4957:52	12	buflen
LEAF_NODE	4957:52	4957:52	13	buflen
LEAF_NODE	4957:58	4957:58	11	)
LEAF_NODE	4957:59	4957:59	7	;
EXPR_STATEMENT	4958:2	4958:51	6	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 ) ;
EXPR	4958:2	4958:2	7	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
ASSIGN	4958:2	4958:13	8	written += t2pWriteFile ( output , ( tdata_t ) " " , 1 )
LVAL	4958:2	4958:2	9	written
FIELD	4958:2	4958:2	10	written
LEAF_NODE	4958:2	4958:2	11	written
ASSIGN_OP	4958:10	4958:10	9	+=
LEAF_NODE	4958:10	4958:10	10	+=
RVAL	4958:13	4958:13	9	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
FUNCTION_CALL	4958:13	4958:50	10	t2pWriteFile ( output , ( tdata_t ) " " , 1 )
CALLEE	4958:13	4958:13	11	t2pWriteFile
LEAF_NODE	4958:13	4958:13	12	t2pWriteFile
LEAF_NODE	4958:25	4958:25	11	(
ARGUMENT	4958:26	4958:26	11	output
FIELD	4958:26	4958:26	12	output
LEAF_NODE	4958:26	4958:26	13	output
LEAF_NODE	4958:32	4958:32	11	,
ARGUMENT	4958:34	4958:44	11	( tdata_t ) " "
LEAF_NODE	4958:34	4958:34	12	(
TYPE_NAME	4958:35	4958:35	12	tdata_t
LEAF_NODE	4958:35	4958:35	13	tdata_t
LEAF_NODE	4958:42	4958:42	12	)
FIELD	4958:44	4958:44	12	" "
LEAF_NODE	4958:44	4958:44	13	" "
LEAF_NODE	4958:47	4958:47	11	,
ARGUMENT	4958:49	4958:49	11	1
FIELD	4958:49	4958:49	12	1
LEAF_NODE	4958:49	4958:49	13	1
LEAF_NODE	4958:50	4958:50	11	)
LEAF_NODE	4958:51	4958:51	7	;
EXPR_STATEMENT	4959:2	4959:84	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_palettecs ) ;
EXPR	4959:2	4959:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_palettecs )
ASSIGN	4959:2	4959:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_palettecs )
LVAL	4959:2	4959:2	9	buflen
FIELD	4959:2	4959:2	10	buflen
LEAF_NODE	4959:2	4959:2	11	buflen
ASSIGN_OP	4959:8	4959:8	9	=
LEAF_NODE	4959:8	4959:8	10	=
RVAL	4959:9	4959:9	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_palettecs )
FUNCTION_CALL	4959:9	4959:83	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_palettecs )
CALLEE	4959:9	4959:9	11	snprintf
LEAF_NODE	4959:9	4959:9	12	snprintf
LEAF_NODE	4959:17	4959:17	11	(
ARGUMENT	4959:18	4959:18	11	buffer
FIELD	4959:18	4959:18	12	buffer
LEAF_NODE	4959:18	4959:18	13	buffer
LEAF_NODE	4959:24	4959:24	11	,
ARGUMENT	4959:26	4959:26	11	sizeof ( buffer )
FUNCTION_CALL	4959:26	4959:39	12	sizeof ( buffer )
CALLEE	4959:26	4959:26	13	sizeof
LEAF_NODE	4959:26	4959:26	14	sizeof
LEAF_NODE	4959:32	4959:32	13	(
ARGUMENT	4959:33	4959:33	13	buffer
FIELD	4959:33	4959:33	14	buffer
LEAF_NODE	4959:33	4959:33	15	buffer
LEAF_NODE	4959:39	4959:39	13	)
LEAF_NODE	4959:40	4959:40	11	,
ARGUMENT	4959:42	4959:42	11	"%lu"
FIELD	4959:42	4959:42	12	"%lu"
LEAF_NODE	4959:42	4959:42	13	"%lu"
LEAF_NODE	4959:47	4959:47	11	,
ARGUMENT	4959:49	4959:64	11	( unsigned long ) t2p -> pdf_palettecs
LEAF_NODE	4959:49	4959:49	12	(
TYPE_NAME	4959:50	4959:59	12	unsigned long
LEAF_NODE	4959:50	4959:50	13	unsigned
LEAF_NODE	4959:59	4959:59	13	long
LEAF_NODE	4959:63	4959:63	12	)
FIELD	4959:64	4959:69	12	t2p -> pdf_palettecs
LEAF_NODE	4959:64	4959:64	13	t2p
LEAF_NODE	4959:67	4959:67	13	->
LEAF_NODE	4959:69	4959:69	13	pdf_palettecs
LEAF_NODE	4959:83	4959:83	11	)
LEAF_NODE	4959:84	4959:84	7	;
EXPR_STATEMENT	4960:2	4960:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4960:2	4960:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4960:2	4960:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4960:2	4960:2	9	check_snprintf_ret
LEAF_NODE	4960:2	4960:2	10	check_snprintf_ret
LEAF_NODE	4960:20	4960:20	9	(
ARGUMENT	4960:21	4960:21	9	t2p
FIELD	4960:21	4960:21	10	t2p
LEAF_NODE	4960:21	4960:21	11	t2p
LEAF_NODE	4960:24	4960:24	9	,
ARGUMENT	4960:26	4960:26	9	buflen
FIELD	4960:26	4960:26	10	buflen
LEAF_NODE	4960:26	4960:26	11	buflen
LEAF_NODE	4960:32	4960:32	9	,
ARGUMENT	4960:34	4960:34	9	buffer
FIELD	4960:34	4960:34	10	buffer
LEAF_NODE	4960:34	4960:34	11	buffer
LEAF_NODE	4960:40	4960:40	9	)
LEAF_NODE	4960:41	4960:41	7	;
EXPR_STATEMENT	4961:2	4961:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4961:2	4961:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4961:2	4961:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4961:2	4961:2	9	written
FIELD	4961:2	4961:2	10	written
LEAF_NODE	4961:2	4961:2	11	written
ASSIGN_OP	4961:10	4961:10	9	+=
LEAF_NODE	4961:10	4961:10	10	+=
RVAL	4961:13	4961:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4961:13	4961:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4961:13	4961:13	11	t2pWriteFile
LEAF_NODE	4961:13	4961:13	12	t2pWriteFile
LEAF_NODE	4961:25	4961:25	11	(
ARGUMENT	4961:26	4961:26	11	output
FIELD	4961:26	4961:26	12	output
LEAF_NODE	4961:26	4961:26	13	output
LEAF_NODE	4961:32	4961:32	11	,
ARGUMENT	4961:34	4961:44	11	( tdata_t ) buffer
LEAF_NODE	4961:34	4961:34	12	(
TYPE_NAME	4961:35	4961:35	12	tdata_t
LEAF_NODE	4961:35	4961:35	13	tdata_t
LEAF_NODE	4961:42	4961:42	12	)
FIELD	4961:44	4961:44	12	buffer
LEAF_NODE	4961:44	4961:44	13	buffer
LEAF_NODE	4961:50	4961:50	11	,
ARGUMENT	4961:52	4961:52	11	buflen
FIELD	4961:52	4961:52	12	buflen
LEAF_NODE	4961:52	4961:52	13	buflen
LEAF_NODE	4961:58	4961:58	11	)
LEAF_NODE	4961:59	4961:59	7	;
EXPR_STATEMENT	4962:2	4962:58	6	written += t2pWriteFile ( output , ( tdata_t ) " 0 R ]\n" , 7 ) ;
EXPR	4962:2	4962:2	7	written += t2pWriteFile ( output , ( tdata_t ) " 0 R ]\n" , 7 )
ASSIGN	4962:2	4962:13	8	written += t2pWriteFile ( output , ( tdata_t ) " 0 R ]\n" , 7 )
LVAL	4962:2	4962:2	9	written
FIELD	4962:2	4962:2	10	written
LEAF_NODE	4962:2	4962:2	11	written
ASSIGN_OP	4962:10	4962:10	9	+=
LEAF_NODE	4962:10	4962:10	10	+=
RVAL	4962:13	4962:13	9	t2pWriteFile ( output , ( tdata_t ) " 0 R ]\n" , 7 )
FUNCTION_CALL	4962:13	4962:57	10	t2pWriteFile ( output , ( tdata_t ) " 0 R ]\n" , 7 )
CALLEE	4962:13	4962:13	11	t2pWriteFile
LEAF_NODE	4962:13	4962:13	12	t2pWriteFile
LEAF_NODE	4962:25	4962:25	11	(
ARGUMENT	4962:26	4962:26	11	output
FIELD	4962:26	4962:26	12	output
LEAF_NODE	4962:26	4962:26	13	output
LEAF_NODE	4962:32	4962:32	11	,
ARGUMENT	4962:34	4962:44	11	( tdata_t ) " 0 R ]\n"
LEAF_NODE	4962:34	4962:34	12	(
TYPE_NAME	4962:35	4962:35	12	tdata_t
LEAF_NODE	4962:35	4962:35	13	tdata_t
LEAF_NODE	4962:42	4962:42	12	)
FIELD	4962:44	4962:44	12	" 0 R ]\n"
LEAF_NODE	4962:44	4962:44	13	" 0 R ]\n"
LEAF_NODE	4962:54	4962:54	11	,
ARGUMENT	4962:56	4962:56	11	7
FIELD	4962:56	4962:56	12	7
LEAF_NODE	4962:56	4962:56	13	7
LEAF_NODE	4962:57	4962:57	11	)
LEAF_NODE	4962:58	4962:58	7	;
LEAF_NODE	4963:2	4963:2	6	return
LEAF_NODE	4963:8	4963:8	6	(
LEAF_NODE	4963:9	4963:9	6	written
LEAF_NODE	4963:16	4963:16	6	)
LEAF_NODE	4963:17	4963:17	6	;
LEAF_NODE	4964:1	4964:1	5	}
SELECTION	4965:1	4965:41	3	
KEYWORD	4965:1	4965:1	4	if
LEAF_NODE	4965:1	4965:1	5	if
LEAF_NODE	4965:3	4965:3	4	(
CONDITION	4965:4	4965:4	4	t2p -> pdf_colorspace & T2P_CS_BILEVEL
EXPR	4965:4	4965:26	5	t2p -> pdf_colorspace & T2P_CS_BILEVEL
FIELD	4965:4	4965:9	6	t2p -> pdf_colorspace
LEAF_NODE	4965:4	4965:4	7	t2p
LEAF_NODE	4965:7	4965:7	7	->
LEAF_NODE	4965:9	4965:9	7	pdf_colorspace
LEAF_NODE	4965:24	4965:24	6	&
FIELD	4965:26	4965:26	6	T2P_CS_BILEVEL
LEAF_NODE	4965:26	4965:26	7	T2P_CS_BILEVEL
LEAF_NODE	4965:40	4965:40	4	)
STATEMENTS	4965:41	4967:1	4	
LEAF_NODE	4965:41	4965:41	5	{
STATEMENTS	4966:3	4966:3	5	
EXPR_STATEMENT	4966:3	4966:66	6	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceGray \n" , 13 ) ;
EXPR	4966:3	4966:3	7	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceGray \n" , 13 )
ASSIGN	4966:3	4966:14	8	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceGray \n" , 13 )
LVAL	4966:3	4966:3	9	written
FIELD	4966:3	4966:3	10	written
LEAF_NODE	4966:3	4966:3	11	written
ASSIGN_OP	4966:11	4966:11	9	+=
LEAF_NODE	4966:11	4966:11	10	+=
RVAL	4966:14	4966:14	9	t2pWriteFile ( output , ( tdata_t ) "/DeviceGray \n" , 13 )
FUNCTION_CALL	4966:14	4966:65	10	t2pWriteFile ( output , ( tdata_t ) "/DeviceGray \n" , 13 )
CALLEE	4966:14	4966:14	11	t2pWriteFile
LEAF_NODE	4966:14	4966:14	12	t2pWriteFile
LEAF_NODE	4966:26	4966:26	11	(
ARGUMENT	4966:27	4966:27	11	output
FIELD	4966:27	4966:27	12	output
LEAF_NODE	4966:27	4966:27	13	output
LEAF_NODE	4966:33	4966:33	11	,
ARGUMENT	4966:35	4966:45	11	( tdata_t ) "/DeviceGray \n"
LEAF_NODE	4966:35	4966:35	12	(
TYPE_NAME	4966:36	4966:36	12	tdata_t
LEAF_NODE	4966:36	4966:36	13	tdata_t
LEAF_NODE	4966:43	4966:43	12	)
FIELD	4966:45	4966:45	12	"/DeviceGray \n"
LEAF_NODE	4966:45	4966:45	13	"/DeviceGray \n"
LEAF_NODE	4966:61	4966:61	11	,
ARGUMENT	4966:63	4966:63	11	13
FIELD	4966:63	4966:63	12	13
LEAF_NODE	4966:63	4966:63	13	13
LEAF_NODE	4966:65	4966:65	11	)
LEAF_NODE	4966:66	4966:66	7	;
LEAF_NODE	4967:1	4967:1	5	}
SELECTION	4968:1	4968:38	3	
KEYWORD	4968:1	4968:1	4	if
LEAF_NODE	4968:1	4968:1	5	if
LEAF_NODE	4968:3	4968:3	4	(
CONDITION	4968:4	4968:4	4	t2p -> pdf_colorspace & T2P_CS_GRAY
EXPR	4968:4	4968:26	5	t2p -> pdf_colorspace & T2P_CS_GRAY
FIELD	4968:4	4968:9	6	t2p -> pdf_colorspace
LEAF_NODE	4968:4	4968:4	7	t2p
LEAF_NODE	4968:7	4968:7	7	->
LEAF_NODE	4968:9	4968:9	7	pdf_colorspace
LEAF_NODE	4968:24	4968:24	6	&
FIELD	4968:26	4968:26	6	T2P_CS_GRAY
LEAF_NODE	4968:26	4968:26	7	T2P_CS_GRAY
LEAF_NODE	4968:37	4968:37	4	)
STATEMENTS	4968:38	4974:1	4	
LEAF_NODE	4968:38	4968:38	5	{
STATEMENTS	4969:3	4971:5	5	
SELECTION	4969:3	4969:43	6	
KEYWORD	4969:3	4969:3	7	if
LEAF_NODE	4969:3	4969:3	8	if
LEAF_NODE	4969:5	4969:5	7	(
CONDITION	4969:6	4969:6	7	t2p -> pdf_colorspace & T2P_CS_CALGRAY
EXPR	4969:6	4969:28	8	t2p -> pdf_colorspace & T2P_CS_CALGRAY
FIELD	4969:6	4969:11	9	t2p -> pdf_colorspace
LEAF_NODE	4969:6	4969:6	10	t2p
LEAF_NODE	4969:9	4969:9	10	->
LEAF_NODE	4969:11	4969:11	10	pdf_colorspace
LEAF_NODE	4969:26	4969:26	9	&
FIELD	4969:28	4969:28	9	T2P_CS_CALGRAY
LEAF_NODE	4969:28	4969:28	10	T2P_CS_CALGRAY
LEAF_NODE	4969:42	4969:42	7	)
STATEMENTS	4969:43	4971:3	7	
LEAF_NODE	4969:43	4969:43	8	{
STATEMENTS	4970:4	4970:4	8	
EXPR_STATEMENT	4970:4	4970:55	9	written += t2p_write_pdf_xobject_calcs ( t2p , output ) ;
EXPR	4970:4	4970:4	10	written += t2p_write_pdf_xobject_calcs ( t2p , output )
ASSIGN	4970:4	4970:15	11	written += t2p_write_pdf_xobject_calcs ( t2p , output )
LVAL	4970:4	4970:4	12	written
FIELD	4970:4	4970:4	13	written
LEAF_NODE	4970:4	4970:4	14	written
ASSIGN_OP	4970:12	4970:12	12	+=
LEAF_NODE	4970:12	4970:12	13	+=
RVAL	4970:15	4970:15	12	t2p_write_pdf_xobject_calcs ( t2p , output )
FUNCTION_CALL	4970:15	4970:54	13	t2p_write_pdf_xobject_calcs ( t2p , output )
CALLEE	4970:15	4970:15	14	t2p_write_pdf_xobject_calcs
LEAF_NODE	4970:15	4970:15	15	t2p_write_pdf_xobject_calcs
LEAF_NODE	4970:42	4970:42	14	(
ARGUMENT	4970:43	4970:43	14	t2p
FIELD	4970:43	4970:43	15	t2p
LEAF_NODE	4970:43	4970:43	16	t2p
LEAF_NODE	4970:46	4970:46	14	,
ARGUMENT	4970:48	4970:48	14	output
FIELD	4970:48	4970:48	15	output
LEAF_NODE	4970:48	4970:48	16	output
LEAF_NODE	4970:54	4970:54	14	)
LEAF_NODE	4970:55	4970:55	10	;
LEAF_NODE	4971:3	4971:3	8	}
SELECTION	4971:5	4971:10	6	
KEYWORD	4971:5	4971:5	7	else
LEAF_NODE	4971:5	4971:5	8	else
STATEMENTS	4971:10	4973:3	7	
LEAF_NODE	4971:10	4971:10	8	{
STATEMENTS	4972:4	4972:4	8	
EXPR_STATEMENT	4972:4	4972:67	9	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceGray \n" , 13 ) ;
EXPR	4972:4	4972:4	10	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceGray \n" , 13 )
ASSIGN	4972:4	4972:15	11	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceGray \n" , 13 )
LVAL	4972:4	4972:4	12	written
FIELD	4972:4	4972:4	13	written
LEAF_NODE	4972:4	4972:4	14	written
ASSIGN_OP	4972:12	4972:12	12	+=
LEAF_NODE	4972:12	4972:12	13	+=
RVAL	4972:15	4972:15	12	t2pWriteFile ( output , ( tdata_t ) "/DeviceGray \n" , 13 )
FUNCTION_CALL	4972:15	4972:66	13	t2pWriteFile ( output , ( tdata_t ) "/DeviceGray \n" , 13 )
CALLEE	4972:15	4972:15	14	t2pWriteFile
LEAF_NODE	4972:15	4972:15	15	t2pWriteFile
LEAF_NODE	4972:27	4972:27	14	(
ARGUMENT	4972:28	4972:28	14	output
FIELD	4972:28	4972:28	15	output
LEAF_NODE	4972:28	4972:28	16	output
LEAF_NODE	4972:34	4972:34	14	,
ARGUMENT	4972:36	4972:46	14	( tdata_t ) "/DeviceGray \n"
LEAF_NODE	4972:36	4972:36	15	(
TYPE_NAME	4972:37	4972:37	15	tdata_t
LEAF_NODE	4972:37	4972:37	16	tdata_t
LEAF_NODE	4972:44	4972:44	15	)
FIELD	4972:46	4972:46	15	"/DeviceGray \n"
LEAF_NODE	4972:46	4972:46	16	"/DeviceGray \n"
LEAF_NODE	4972:62	4972:62	14	,
ARGUMENT	4972:64	4972:64	14	13
FIELD	4972:64	4972:64	15	13
LEAF_NODE	4972:64	4972:64	16	13
LEAF_NODE	4972:66	4972:66	14	)
LEAF_NODE	4972:67	4972:67	10	;
LEAF_NODE	4973:3	4973:3	8	}
LEAF_NODE	4974:1	4974:1	5	}
SELECTION	4975:1	4975:37	3	
KEYWORD	4975:1	4975:1	4	if
LEAF_NODE	4975:1	4975:1	5	if
LEAF_NODE	4975:3	4975:3	4	(
CONDITION	4975:4	4975:4	4	t2p -> pdf_colorspace & T2P_CS_RGB
EXPR	4975:4	4975:26	5	t2p -> pdf_colorspace & T2P_CS_RGB
FIELD	4975:4	4975:9	6	t2p -> pdf_colorspace
LEAF_NODE	4975:4	4975:4	7	t2p
LEAF_NODE	4975:7	4975:7	7	->
LEAF_NODE	4975:9	4975:9	7	pdf_colorspace
LEAF_NODE	4975:24	4975:24	6	&
FIELD	4975:26	4975:26	6	T2P_CS_RGB
LEAF_NODE	4975:26	4975:26	7	T2P_CS_RGB
LEAF_NODE	4975:36	4975:36	4	)
STATEMENTS	4975:37	4981:1	4	
LEAF_NODE	4975:37	4975:37	5	{
STATEMENTS	4976:3	4978:5	5	
SELECTION	4976:3	4976:42	6	
KEYWORD	4976:3	4976:3	7	if
LEAF_NODE	4976:3	4976:3	8	if
LEAF_NODE	4976:5	4976:5	7	(
CONDITION	4976:6	4976:6	7	t2p -> pdf_colorspace & T2P_CS_CALRGB
EXPR	4976:6	4976:28	8	t2p -> pdf_colorspace & T2P_CS_CALRGB
FIELD	4976:6	4976:11	9	t2p -> pdf_colorspace
LEAF_NODE	4976:6	4976:6	10	t2p
LEAF_NODE	4976:9	4976:9	10	->
LEAF_NODE	4976:11	4976:11	10	pdf_colorspace
LEAF_NODE	4976:26	4976:26	9	&
FIELD	4976:28	4976:28	9	T2P_CS_CALRGB
LEAF_NODE	4976:28	4976:28	10	T2P_CS_CALRGB
LEAF_NODE	4976:41	4976:41	7	)
STATEMENTS	4976:42	4978:3	7	
LEAF_NODE	4976:42	4976:42	8	{
STATEMENTS	4977:4	4977:4	8	
EXPR_STATEMENT	4977:4	4977:55	9	written += t2p_write_pdf_xobject_calcs ( t2p , output ) ;
EXPR	4977:4	4977:4	10	written += t2p_write_pdf_xobject_calcs ( t2p , output )
ASSIGN	4977:4	4977:15	11	written += t2p_write_pdf_xobject_calcs ( t2p , output )
LVAL	4977:4	4977:4	12	written
FIELD	4977:4	4977:4	13	written
LEAF_NODE	4977:4	4977:4	14	written
ASSIGN_OP	4977:12	4977:12	12	+=
LEAF_NODE	4977:12	4977:12	13	+=
RVAL	4977:15	4977:15	12	t2p_write_pdf_xobject_calcs ( t2p , output )
FUNCTION_CALL	4977:15	4977:54	13	t2p_write_pdf_xobject_calcs ( t2p , output )
CALLEE	4977:15	4977:15	14	t2p_write_pdf_xobject_calcs
LEAF_NODE	4977:15	4977:15	15	t2p_write_pdf_xobject_calcs
LEAF_NODE	4977:42	4977:42	14	(
ARGUMENT	4977:43	4977:43	14	t2p
FIELD	4977:43	4977:43	15	t2p
LEAF_NODE	4977:43	4977:43	16	t2p
LEAF_NODE	4977:46	4977:46	14	,
ARGUMENT	4977:48	4977:48	14	output
FIELD	4977:48	4977:48	15	output
LEAF_NODE	4977:48	4977:48	16	output
LEAF_NODE	4977:54	4977:54	14	)
LEAF_NODE	4977:55	4977:55	10	;
LEAF_NODE	4978:3	4978:3	8	}
SELECTION	4978:5	4978:10	6	
KEYWORD	4978:5	4978:5	7	else
LEAF_NODE	4978:5	4978:5	8	else
STATEMENTS	4978:10	4980:3	7	
LEAF_NODE	4978:10	4978:10	8	{
STATEMENTS	4979:4	4979:4	8	
EXPR_STATEMENT	4979:4	4979:66	9	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceRGB \n" , 12 ) ;
EXPR	4979:4	4979:4	10	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceRGB \n" , 12 )
ASSIGN	4979:4	4979:15	11	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceRGB \n" , 12 )
LVAL	4979:4	4979:4	12	written
FIELD	4979:4	4979:4	13	written
LEAF_NODE	4979:4	4979:4	14	written
ASSIGN_OP	4979:12	4979:12	12	+=
LEAF_NODE	4979:12	4979:12	13	+=
RVAL	4979:15	4979:15	12	t2pWriteFile ( output , ( tdata_t ) "/DeviceRGB \n" , 12 )
FUNCTION_CALL	4979:15	4979:65	13	t2pWriteFile ( output , ( tdata_t ) "/DeviceRGB \n" , 12 )
CALLEE	4979:15	4979:15	14	t2pWriteFile
LEAF_NODE	4979:15	4979:15	15	t2pWriteFile
LEAF_NODE	4979:27	4979:27	14	(
ARGUMENT	4979:28	4979:28	14	output
FIELD	4979:28	4979:28	15	output
LEAF_NODE	4979:28	4979:28	16	output
LEAF_NODE	4979:34	4979:34	14	,
ARGUMENT	4979:36	4979:46	14	( tdata_t ) "/DeviceRGB \n"
LEAF_NODE	4979:36	4979:36	15	(
TYPE_NAME	4979:37	4979:37	15	tdata_t
LEAF_NODE	4979:37	4979:37	16	tdata_t
LEAF_NODE	4979:44	4979:44	15	)
FIELD	4979:46	4979:46	15	"/DeviceRGB \n"
LEAF_NODE	4979:46	4979:46	16	"/DeviceRGB \n"
LEAF_NODE	4979:61	4979:61	14	,
ARGUMENT	4979:63	4979:63	14	12
FIELD	4979:63	4979:63	15	12
LEAF_NODE	4979:63	4979:63	16	12
LEAF_NODE	4979:65	4979:65	14	)
LEAF_NODE	4979:66	4979:66	10	;
LEAF_NODE	4980:3	4980:3	8	}
LEAF_NODE	4981:1	4981:1	5	}
SELECTION	4982:1	4982:38	3	
KEYWORD	4982:1	4982:1	4	if
LEAF_NODE	4982:1	4982:1	5	if
LEAF_NODE	4982:3	4982:3	4	(
CONDITION	4982:4	4982:4	4	t2p -> pdf_colorspace & T2P_CS_CMYK
EXPR	4982:4	4982:26	5	t2p -> pdf_colorspace & T2P_CS_CMYK
FIELD	4982:4	4982:9	6	t2p -> pdf_colorspace
LEAF_NODE	4982:4	4982:4	7	t2p
LEAF_NODE	4982:7	4982:7	7	->
LEAF_NODE	4982:9	4982:9	7	pdf_colorspace
LEAF_NODE	4982:24	4982:24	6	&
FIELD	4982:26	4982:26	6	T2P_CS_CMYK
LEAF_NODE	4982:26	4982:26	7	T2P_CS_CMYK
LEAF_NODE	4982:37	4982:37	4	)
STATEMENTS	4982:38	4984:1	4	
LEAF_NODE	4982:38	4982:38	5	{
STATEMENTS	4983:3	4983:3	5	
EXPR_STATEMENT	4983:3	4983:66	6	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceCMYK \n" , 13 ) ;
EXPR	4983:3	4983:3	7	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceCMYK \n" , 13 )
ASSIGN	4983:3	4983:14	8	written += t2pWriteFile ( output , ( tdata_t ) "/DeviceCMYK \n" , 13 )
LVAL	4983:3	4983:3	9	written
FIELD	4983:3	4983:3	10	written
LEAF_NODE	4983:3	4983:3	11	written
ASSIGN_OP	4983:11	4983:11	9	+=
LEAF_NODE	4983:11	4983:11	10	+=
RVAL	4983:14	4983:14	9	t2pWriteFile ( output , ( tdata_t ) "/DeviceCMYK \n" , 13 )
FUNCTION_CALL	4983:14	4983:65	10	t2pWriteFile ( output , ( tdata_t ) "/DeviceCMYK \n" , 13 )
CALLEE	4983:14	4983:14	11	t2pWriteFile
LEAF_NODE	4983:14	4983:14	12	t2pWriteFile
LEAF_NODE	4983:26	4983:26	11	(
ARGUMENT	4983:27	4983:27	11	output
FIELD	4983:27	4983:27	12	output
LEAF_NODE	4983:27	4983:27	13	output
LEAF_NODE	4983:33	4983:33	11	,
ARGUMENT	4983:35	4983:45	11	( tdata_t ) "/DeviceCMYK \n"
LEAF_NODE	4983:35	4983:35	12	(
TYPE_NAME	4983:36	4983:36	12	tdata_t
LEAF_NODE	4983:36	4983:36	13	tdata_t
LEAF_NODE	4983:43	4983:43	12	)
FIELD	4983:45	4983:45	12	"/DeviceCMYK \n"
LEAF_NODE	4983:45	4983:45	13	"/DeviceCMYK \n"
LEAF_NODE	4983:61	4983:61	11	,
ARGUMENT	4983:63	4983:63	11	13
FIELD	4983:63	4983:63	12	13
LEAF_NODE	4983:63	4983:63	13	13
LEAF_NODE	4983:65	4983:65	11	)
LEAF_NODE	4983:66	4983:66	7	;
LEAF_NODE	4984:1	4984:1	5	}
SELECTION	4985:1	4985:37	3	
KEYWORD	4985:1	4985:1	4	if
LEAF_NODE	4985:1	4985:1	5	if
LEAF_NODE	4985:3	4985:3	4	(
CONDITION	4985:4	4985:4	4	t2p -> pdf_colorspace & T2P_CS_LAB
EXPR	4985:4	4985:26	5	t2p -> pdf_colorspace & T2P_CS_LAB
FIELD	4985:4	4985:9	6	t2p -> pdf_colorspace
LEAF_NODE	4985:4	4985:4	7	t2p
LEAF_NODE	4985:7	4985:7	7	->
LEAF_NODE	4985:9	4985:9	7	pdf_colorspace
LEAF_NODE	4985:24	4985:24	6	&
FIELD	4985:26	4985:26	6	T2P_CS_LAB
LEAF_NODE	4985:26	4985:26	7	T2P_CS_LAB
LEAF_NODE	4985:36	4985:36	4	)
STATEMENTS	4985:37	5007:1	4	
LEAF_NODE	4985:37	4985:37	5	{
STATEMENTS	4986:3	5005:3	5	
EXPR_STATEMENT	4986:3	4986:63	6	written += t2pWriteFile ( output , ( tdata_t ) "[/Lab << \n" , 10 ) ;
EXPR	4986:3	4986:3	7	written += t2pWriteFile ( output , ( tdata_t ) "[/Lab << \n" , 10 )
ASSIGN	4986:3	4986:14	8	written += t2pWriteFile ( output , ( tdata_t ) "[/Lab << \n" , 10 )
LVAL	4986:3	4986:3	9	written
FIELD	4986:3	4986:3	10	written
LEAF_NODE	4986:3	4986:3	11	written
ASSIGN_OP	4986:11	4986:11	9	+=
LEAF_NODE	4986:11	4986:11	10	+=
RVAL	4986:14	4986:14	9	t2pWriteFile ( output , ( tdata_t ) "[/Lab << \n" , 10 )
FUNCTION_CALL	4986:14	4986:62	10	t2pWriteFile ( output , ( tdata_t ) "[/Lab << \n" , 10 )
CALLEE	4986:14	4986:14	11	t2pWriteFile
LEAF_NODE	4986:14	4986:14	12	t2pWriteFile
LEAF_NODE	4986:26	4986:26	11	(
ARGUMENT	4986:27	4986:27	11	output
FIELD	4986:27	4986:27	12	output
LEAF_NODE	4986:27	4986:27	13	output
LEAF_NODE	4986:33	4986:33	11	,
ARGUMENT	4986:35	4986:45	11	( tdata_t ) "[/Lab << \n"
LEAF_NODE	4986:35	4986:35	12	(
TYPE_NAME	4986:36	4986:36	12	tdata_t
LEAF_NODE	4986:36	4986:36	13	tdata_t
LEAF_NODE	4986:43	4986:43	12	)
FIELD	4986:45	4986:45	12	"[/Lab << \n"
LEAF_NODE	4986:45	4986:45	13	"[/Lab << \n"
LEAF_NODE	4986:58	4986:58	11	,
ARGUMENT	4986:60	4986:60	11	10
FIELD	4986:60	4986:60	12	10
LEAF_NODE	4986:60	4986:60	13	10
LEAF_NODE	4986:62	4986:62	11	)
LEAF_NODE	4986:63	4986:63	7	;
EXPR_STATEMENT	4987:3	4987:64	6	written += t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 ) ;
EXPR	4987:3	4987:3	7	written += t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
ASSIGN	4987:3	4987:14	8	written += t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
LVAL	4987:3	4987:3	9	written
FIELD	4987:3	4987:3	10	written
LEAF_NODE	4987:3	4987:3	11	written
ASSIGN_OP	4987:11	4987:11	9	+=
LEAF_NODE	4987:11	4987:11	10	+=
RVAL	4987:14	4987:14	9	t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
FUNCTION_CALL	4987:14	4987:63	10	t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
CALLEE	4987:14	4987:14	11	t2pWriteFile
LEAF_NODE	4987:14	4987:14	12	t2pWriteFile
LEAF_NODE	4987:26	4987:26	11	(
ARGUMENT	4987:27	4987:27	11	output
FIELD	4987:27	4987:27	12	output
LEAF_NODE	4987:27	4987:27	13	output
LEAF_NODE	4987:33	4987:33	11	,
ARGUMENT	4987:35	4987:45	11	( tdata_t ) "/WhitePoint "
LEAF_NODE	4987:35	4987:35	12	(
TYPE_NAME	4987:36	4987:36	12	tdata_t
LEAF_NODE	4987:36	4987:36	13	tdata_t
LEAF_NODE	4987:43	4987:43	12	)
FIELD	4987:45	4987:45	12	"/WhitePoint "
LEAF_NODE	4987:45	4987:45	13	"/WhitePoint "
LEAF_NODE	4987:59	4987:59	11	,
ARGUMENT	4987:61	4987:61	11	12
FIELD	4987:61	4987:61	12	12
LEAF_NODE	4987:61	4987:61	13	12
LEAF_NODE	4987:63	4987:63	11	)
LEAF_NODE	4987:64	4987:64	7	;
EXPR_STATEMENT	4988:3	4988:41	6	X_W = t2p -> tiff_whitechromaticities [ 0 ] ;
EXPR	4988:3	4988:3	7	X_W = t2p -> tiff_whitechromaticities [ 0 ]
ASSIGN	4988:3	4988:9	8	X_W = t2p -> tiff_whitechromaticities [ 0 ]
LVAL	4988:3	4988:3	9	X_W
FIELD	4988:3	4988:3	10	X_W
LEAF_NODE	4988:3	4988:3	11	X_W
ASSIGN_OP	4988:7	4988:7	9	=
LEAF_NODE	4988:7	4988:7	10	=
RVAL	4988:9	4988:9	9	t2p -> tiff_whitechromaticities [ 0 ]
FIELD	4988:9	4988:40	10	t2p -> tiff_whitechromaticities [ 0 ]
LEAF_NODE	4988:9	4988:9	11	t2p
LEAF_NODE	4988:12	4988:12	11	->
LEAF_NODE	4988:14	4988:14	11	tiff_whitechromaticities
LEAF_NODE	4988:38	4988:38	11	[
EXPR	4988:39	4988:39	11	0
FIELD	4988:39	4988:39	12	0
LEAF_NODE	4988:39	4988:39	13	0
LEAF_NODE	4988:40	4988:40	11	]
LEAF_NODE	4988:41	4988:41	7	;
EXPR_STATEMENT	4989:3	4989:41	6	Y_W = t2p -> tiff_whitechromaticities [ 1 ] ;
EXPR	4989:3	4989:3	7	Y_W = t2p -> tiff_whitechromaticities [ 1 ]
ASSIGN	4989:3	4989:9	8	Y_W = t2p -> tiff_whitechromaticities [ 1 ]
LVAL	4989:3	4989:3	9	Y_W
FIELD	4989:3	4989:3	10	Y_W
LEAF_NODE	4989:3	4989:3	11	Y_W
ASSIGN_OP	4989:7	4989:7	9	=
LEAF_NODE	4989:7	4989:7	10	=
RVAL	4989:9	4989:9	9	t2p -> tiff_whitechromaticities [ 1 ]
FIELD	4989:9	4989:40	10	t2p -> tiff_whitechromaticities [ 1 ]
LEAF_NODE	4989:9	4989:9	11	t2p
LEAF_NODE	4989:12	4989:12	11	->
LEAF_NODE	4989:14	4989:14	11	tiff_whitechromaticities
LEAF_NODE	4989:38	4989:38	11	[
EXPR	4989:39	4989:39	11	1
FIELD	4989:39	4989:39	12	1
LEAF_NODE	4989:39	4989:39	13	1
LEAF_NODE	4989:40	4989:40	11	]
LEAF_NODE	4989:41	4989:41	7	;
EXPR_STATEMENT	4990:3	4990:27	6	Z_W = 1.0F - ( X_W + Y_W ) ;
EXPR	4990:3	4990:3	7	Z_W = 1.0F - ( X_W + Y_W )
ASSIGN	4990:3	4990:9	8	Z_W = 1.0F - ( X_W + Y_W )
LVAL	4990:3	4990:3	9	Z_W
FIELD	4990:3	4990:3	10	Z_W
LEAF_NODE	4990:3	4990:3	11	Z_W
ASSIGN_OP	4990:7	4990:7	9	=
LEAF_NODE	4990:7	4990:7	10	=
RVAL	4990:9	4990:26	9	1.0F - ( X_W + Y_W )
FIELD	4990:9	4990:9	10	1.0F
LEAF_NODE	4990:9	4990:9	11	1.0F
LEAF_NODE	4990:14	4990:14	10	-
LEAF_NODE	4990:16	4990:16	10	(
FIELD	4990:17	4990:17	10	X_W
LEAF_NODE	4990:17	4990:17	11	X_W
LEAF_NODE	4990:21	4990:21	10	+
FIELD	4990:23	4990:23	10	Y_W
LEAF_NODE	4990:23	4990:23	11	Y_W
LEAF_NODE	4990:26	4990:26	10	)
LEAF_NODE	4990:27	4990:27	7	;
EXPR_STATEMENT	4991:3	4991:13	6	X_W /= Y_W ;
EXPR	4991:3	4991:3	7	X_W /= Y_W
ASSIGN	4991:3	4991:10	8	X_W /= Y_W
LVAL	4991:3	4991:3	9	X_W
FIELD	4991:3	4991:3	10	X_W
LEAF_NODE	4991:3	4991:3	11	X_W
ASSIGN_OP	4991:7	4991:7	9	/=
LEAF_NODE	4991:7	4991:7	10	/=
RVAL	4991:10	4991:10	9	Y_W
FIELD	4991:10	4991:10	10	Y_W
LEAF_NODE	4991:10	4991:10	11	Y_W
LEAF_NODE	4991:13	4991:13	7	;
EXPR_STATEMENT	4992:3	4992:13	6	Z_W /= Y_W ;
EXPR	4992:3	4992:3	7	Z_W /= Y_W
ASSIGN	4992:3	4992:10	8	Z_W /= Y_W
LVAL	4992:3	4992:3	9	Z_W
FIELD	4992:3	4992:3	10	Z_W
LEAF_NODE	4992:3	4992:3	11	Z_W
ASSIGN_OP	4992:7	4992:7	9	/=
LEAF_NODE	4992:7	4992:7	10	/=
RVAL	4992:10	4992:10	9	Y_W
FIELD	4992:10	4992:10	10	Y_W
LEAF_NODE	4992:10	4992:10	11	Y_W
LEAF_NODE	4992:13	4992:13	7	;
EXPR_STATEMENT	4993:3	4993:13	6	Y_W = 1.0F ;
EXPR	4993:3	4993:3	7	Y_W = 1.0F
ASSIGN	4993:3	4993:9	8	Y_W = 1.0F
LVAL	4993:3	4993:3	9	Y_W
FIELD	4993:3	4993:3	10	Y_W
LEAF_NODE	4993:3	4993:3	11	Y_W
ASSIGN_OP	4993:7	4993:7	9	=
LEAF_NODE	4993:7	4993:7	10	=
RVAL	4993:9	4993:9	9	1.0F
FIELD	4993:9	4993:9	10	1.0F
LEAF_NODE	4993:9	4993:9	11	1.0F
LEAF_NODE	4993:13	4993:13	7	;
EXPR_STATEMENT	4994:3	4994:80	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W ) ;
EXPR	4994:3	4994:3	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
ASSIGN	4994:3	4994:10	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
LVAL	4994:3	4994:3	9	buflen
FIELD	4994:3	4994:3	10	buflen
LEAF_NODE	4994:3	4994:3	11	buflen
ASSIGN_OP	4994:9	4994:9	9	=
LEAF_NODE	4994:9	4994:9	10	=
RVAL	4994:10	4994:10	9	snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
FUNCTION_CALL	4994:10	4994:79	10	snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
CALLEE	4994:10	4994:10	11	snprintf
LEAF_NODE	4994:10	4994:10	12	snprintf
LEAF_NODE	4994:18	4994:18	11	(
ARGUMENT	4994:19	4994:19	11	buffer
FIELD	4994:19	4994:19	12	buffer
LEAF_NODE	4994:19	4994:19	13	buffer
LEAF_NODE	4994:25	4994:25	11	,
ARGUMENT	4994:27	4994:27	11	sizeof ( buffer )
FUNCTION_CALL	4994:27	4994:40	12	sizeof ( buffer )
CALLEE	4994:27	4994:27	13	sizeof
LEAF_NODE	4994:27	4994:27	14	sizeof
LEAF_NODE	4994:33	4994:33	13	(
ARGUMENT	4994:34	4994:34	13	buffer
FIELD	4994:34	4994:34	14	buffer
LEAF_NODE	4994:34	4994:34	15	buffer
LEAF_NODE	4994:40	4994:40	13	)
LEAF_NODE	4994:41	4994:41	11	,
ARGUMENT	4994:43	4994:43	11	"[%.4f %.4f %.4f] \n"
FIELD	4994:43	4994:43	12	"[%.4f %.4f %.4f] \n"
LEAF_NODE	4994:43	4994:43	13	"[%.4f %.4f %.4f] \n"
LEAF_NODE	4994:64	4994:64	11	,
ARGUMENT	4994:66	4994:66	11	X_W
FIELD	4994:66	4994:66	12	X_W
LEAF_NODE	4994:66	4994:66	13	X_W
LEAF_NODE	4994:69	4994:69	11	,
ARGUMENT	4994:71	4994:71	11	Y_W
FIELD	4994:71	4994:71	12	Y_W
LEAF_NODE	4994:71	4994:71	13	Y_W
LEAF_NODE	4994:74	4994:74	11	,
ARGUMENT	4994:76	4994:76	11	Z_W
FIELD	4994:76	4994:76	12	Z_W
LEAF_NODE	4994:76	4994:76	13	Z_W
LEAF_NODE	4994:79	4994:79	11	)
LEAF_NODE	4994:80	4994:80	7	;
EXPR_STATEMENT	4995:3	4995:42	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	4995:3	4995:3	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	4995:3	4995:41	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	4995:3	4995:3	9	check_snprintf_ret
LEAF_NODE	4995:3	4995:3	10	check_snprintf_ret
LEAF_NODE	4995:21	4995:21	9	(
ARGUMENT	4995:22	4995:22	9	t2p
FIELD	4995:22	4995:22	10	t2p
LEAF_NODE	4995:22	4995:22	11	t2p
LEAF_NODE	4995:25	4995:25	9	,
ARGUMENT	4995:27	4995:27	9	buflen
FIELD	4995:27	4995:27	10	buflen
LEAF_NODE	4995:27	4995:27	11	buflen
LEAF_NODE	4995:33	4995:33	9	,
ARGUMENT	4995:35	4995:35	9	buffer
FIELD	4995:35	4995:35	10	buffer
LEAF_NODE	4995:35	4995:35	11	buffer
LEAF_NODE	4995:41	4995:41	9	)
LEAF_NODE	4995:42	4995:42	7	;
EXPR_STATEMENT	4996:3	4996:60	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	4996:3	4996:3	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	4996:3	4996:14	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	4996:3	4996:3	9	written
FIELD	4996:3	4996:3	10	written
LEAF_NODE	4996:3	4996:3	11	written
ASSIGN_OP	4996:11	4996:11	9	+=
LEAF_NODE	4996:11	4996:11	10	+=
RVAL	4996:14	4996:14	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	4996:14	4996:59	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	4996:14	4996:14	11	t2pWriteFile
LEAF_NODE	4996:14	4996:14	12	t2pWriteFile
LEAF_NODE	4996:26	4996:26	11	(
ARGUMENT	4996:27	4996:27	11	output
FIELD	4996:27	4996:27	12	output
LEAF_NODE	4996:27	4996:27	13	output
LEAF_NODE	4996:33	4996:33	11	,
ARGUMENT	4996:35	4996:45	11	( tdata_t ) buffer
LEAF_NODE	4996:35	4996:35	12	(
TYPE_NAME	4996:36	4996:36	12	tdata_t
LEAF_NODE	4996:36	4996:36	13	tdata_t
LEAF_NODE	4996:43	4996:43	12	)
FIELD	4996:45	4996:45	12	buffer
LEAF_NODE	4996:45	4996:45	13	buffer
LEAF_NODE	4996:51	4996:51	11	,
ARGUMENT	4996:53	4996:53	11	buflen
FIELD	4996:53	4996:53	12	buflen
LEAF_NODE	4996:53	4996:53	13	buflen
LEAF_NODE	4996:59	4996:59	11	)
LEAF_NODE	4996:60	4996:60	7	;
EXPR_STATEMENT	4997:3	4997:58	6	written += t2pWriteFile ( output , ( tdata_t ) "/Range " , 7 ) ;
EXPR	4997:3	4997:3	7	written += t2pWriteFile ( output , ( tdata_t ) "/Range " , 7 )
ASSIGN	4997:3	4997:14	8	written += t2pWriteFile ( output , ( tdata_t ) "/Range " , 7 )
LVAL	4997:3	4997:3	9	written
FIELD	4997:3	4997:3	10	written
LEAF_NODE	4997:3	4997:3	11	written
ASSIGN_OP	4997:11	4997:11	9	+=
LEAF_NODE	4997:11	4997:11	10	+=
RVAL	4997:14	4997:14	9	t2pWriteFile ( output , ( tdata_t ) "/Range " , 7 )
FUNCTION_CALL	4997:14	4997:57	10	t2pWriteFile ( output , ( tdata_t ) "/Range " , 7 )
CALLEE	4997:14	4997:14	11	t2pWriteFile
LEAF_NODE	4997:14	4997:14	12	t2pWriteFile
LEAF_NODE	4997:26	4997:26	11	(
ARGUMENT	4997:27	4997:27	11	output
FIELD	4997:27	4997:27	12	output
LEAF_NODE	4997:27	4997:27	13	output
LEAF_NODE	4997:33	4997:33	11	,
ARGUMENT	4997:35	4997:45	11	( tdata_t ) "/Range "
LEAF_NODE	4997:35	4997:35	12	(
TYPE_NAME	4997:36	4997:36	12	tdata_t
LEAF_NODE	4997:36	4997:36	13	tdata_t
LEAF_NODE	4997:43	4997:43	12	)
FIELD	4997:45	4997:45	12	"/Range "
LEAF_NODE	4997:45	4997:45	13	"/Range "
LEAF_NODE	4997:54	4997:54	11	,
ARGUMENT	4997:56	4997:56	11	7
FIELD	4997:56	4997:56	12	7
LEAF_NODE	4997:56	4997:56	13	7
LEAF_NODE	4997:57	4997:57	11	)
LEAF_NODE	4997:58	4997:58	7	;
EXPR_STATEMENT	4998:3	5002:25	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%d %d %d %d] \n" , t2p -> pdf_labrange [ 0 ] , t2p -> pdf_labrange [ 1 ] , t2p -> pdf_labrange [ 2 ] , t2p -> pdf_labrange [ 3 ] ) ;
EXPR	4998:3	4998:3	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%d %d %d %d] \n" , t2p -> pdf_labrange [ 0 ] , t2p -> pdf_labrange [ 1 ] , t2p -> pdf_labrange [ 2 ] , t2p -> pdf_labrange [ 3 ] )
ASSIGN	4998:3	4998:10	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%d %d %d %d] \n" , t2p -> pdf_labrange [ 0 ] , t2p -> pdf_labrange [ 1 ] , t2p -> pdf_labrange [ 2 ] , t2p -> pdf_labrange [ 3 ] )
LVAL	4998:3	4998:3	9	buflen
FIELD	4998:3	4998:3	10	buflen
LEAF_NODE	4998:3	4998:3	11	buflen
ASSIGN_OP	4998:9	4998:9	9	=
LEAF_NODE	4998:9	4998:9	10	=
RVAL	4998:10	4998:10	9	snprintf ( buffer , sizeof ( buffer ) , "[%d %d %d %d] \n" , t2p -> pdf_labrange [ 0 ] , t2p -> pdf_labrange [ 1 ] , t2p -> pdf_labrange [ 2 ] , t2p -> pdf_labrange [ 3 ] )
FUNCTION_CALL	4998:10	5002:24	10	snprintf ( buffer , sizeof ( buffer ) , "[%d %d %d %d] \n" , t2p -> pdf_labrange [ 0 ] , t2p -> pdf_labrange [ 1 ] , t2p -> pdf_labrange [ 2 ] , t2p -> pdf_labrange [ 3 ] )
CALLEE	4998:10	4998:10	11	snprintf
LEAF_NODE	4998:10	4998:10	12	snprintf
LEAF_NODE	4998:18	4998:18	11	(
ARGUMENT	4998:19	4998:19	11	buffer
FIELD	4998:19	4998:19	12	buffer
LEAF_NODE	4998:19	4998:19	13	buffer
LEAF_NODE	4998:25	4998:25	11	,
ARGUMENT	4998:27	4998:27	11	sizeof ( buffer )
FUNCTION_CALL	4998:27	4998:40	12	sizeof ( buffer )
CALLEE	4998:27	4998:27	13	sizeof
LEAF_NODE	4998:27	4998:27	14	sizeof
LEAF_NODE	4998:33	4998:33	13	(
ARGUMENT	4998:34	4998:34	13	buffer
FIELD	4998:34	4998:34	14	buffer
LEAF_NODE	4998:34	4998:34	15	buffer
LEAF_NODE	4998:40	4998:40	13	)
LEAF_NODE	4998:41	4998:41	11	,
ARGUMENT	4998:43	4998:43	11	"[%d %d %d %d] \n"
FIELD	4998:43	4998:43	12	"[%d %d %d %d] \n"
LEAF_NODE	4998:43	4998:43	13	"[%d %d %d %d] \n"
LEAF_NODE	4998:61	4998:61	11	,
ARGUMENT	4999:4	4999:4	11	t2p -> pdf_labrange [ 0 ]
FIELD	4999:4	4999:23	12	t2p -> pdf_labrange [ 0 ]
LEAF_NODE	4999:4	4999:4	13	t2p
LEAF_NODE	4999:7	4999:7	13	->
LEAF_NODE	4999:9	4999:9	13	pdf_labrange
LEAF_NODE	4999:21	4999:21	13	[
EXPR	4999:22	4999:22	13	0
FIELD	4999:22	4999:22	14	0
LEAF_NODE	4999:22	4999:22	15	0
LEAF_NODE	4999:23	4999:23	13	]
LEAF_NODE	4999:24	4999:24	11	,
ARGUMENT	5000:4	5000:4	11	t2p -> pdf_labrange [ 1 ]
FIELD	5000:4	5000:23	12	t2p -> pdf_labrange [ 1 ]
LEAF_NODE	5000:4	5000:4	13	t2p
LEAF_NODE	5000:7	5000:7	13	->
LEAF_NODE	5000:9	5000:9	13	pdf_labrange
LEAF_NODE	5000:21	5000:21	13	[
EXPR	5000:22	5000:22	13	1
FIELD	5000:22	5000:22	14	1
LEAF_NODE	5000:22	5000:22	15	1
LEAF_NODE	5000:23	5000:23	13	]
LEAF_NODE	5000:24	5000:24	11	,
ARGUMENT	5001:4	5001:4	11	t2p -> pdf_labrange [ 2 ]
FIELD	5001:4	5001:23	12	t2p -> pdf_labrange [ 2 ]
LEAF_NODE	5001:4	5001:4	13	t2p
LEAF_NODE	5001:7	5001:7	13	->
LEAF_NODE	5001:9	5001:9	13	pdf_labrange
LEAF_NODE	5001:21	5001:21	13	[
EXPR	5001:22	5001:22	13	2
FIELD	5001:22	5001:22	14	2
LEAF_NODE	5001:22	5001:22	15	2
LEAF_NODE	5001:23	5001:23	13	]
LEAF_NODE	5001:24	5001:24	11	,
ARGUMENT	5002:4	5002:4	11	t2p -> pdf_labrange [ 3 ]
FIELD	5002:4	5002:23	12	t2p -> pdf_labrange [ 3 ]
LEAF_NODE	5002:4	5002:4	13	t2p
LEAF_NODE	5002:7	5002:7	13	->
LEAF_NODE	5002:9	5002:9	13	pdf_labrange
LEAF_NODE	5002:21	5002:21	13	[
EXPR	5002:22	5002:22	13	3
FIELD	5002:22	5002:22	14	3
LEAF_NODE	5002:22	5002:22	15	3
LEAF_NODE	5002:23	5002:23	13	]
LEAF_NODE	5002:24	5002:24	11	)
LEAF_NODE	5002:25	5002:25	7	;
EXPR_STATEMENT	5003:3	5003:42	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5003:3	5003:3	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5003:3	5003:41	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5003:3	5003:3	9	check_snprintf_ret
LEAF_NODE	5003:3	5003:3	10	check_snprintf_ret
LEAF_NODE	5003:21	5003:21	9	(
ARGUMENT	5003:22	5003:22	9	t2p
FIELD	5003:22	5003:22	10	t2p
LEAF_NODE	5003:22	5003:22	11	t2p
LEAF_NODE	5003:25	5003:25	9	,
ARGUMENT	5003:27	5003:27	9	buflen
FIELD	5003:27	5003:27	10	buflen
LEAF_NODE	5003:27	5003:27	11	buflen
LEAF_NODE	5003:33	5003:33	9	,
ARGUMENT	5003:35	5003:35	9	buffer
FIELD	5003:35	5003:35	10	buffer
LEAF_NODE	5003:35	5003:35	11	buffer
LEAF_NODE	5003:41	5003:41	9	)
LEAF_NODE	5003:42	5003:42	7	;
EXPR_STATEMENT	5004:3	5004:60	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5004:3	5004:3	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5004:3	5004:14	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5004:3	5004:3	9	written
FIELD	5004:3	5004:3	10	written
LEAF_NODE	5004:3	5004:3	11	written
ASSIGN_OP	5004:11	5004:11	9	+=
LEAF_NODE	5004:11	5004:11	10	+=
RVAL	5004:14	5004:14	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5004:14	5004:59	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5004:14	5004:14	11	t2pWriteFile
LEAF_NODE	5004:14	5004:14	12	t2pWriteFile
LEAF_NODE	5004:26	5004:26	11	(
ARGUMENT	5004:27	5004:27	11	output
FIELD	5004:27	5004:27	12	output
LEAF_NODE	5004:27	5004:27	13	output
LEAF_NODE	5004:33	5004:33	11	,
ARGUMENT	5004:35	5004:45	11	( tdata_t ) buffer
LEAF_NODE	5004:35	5004:35	12	(
TYPE_NAME	5004:36	5004:36	12	tdata_t
LEAF_NODE	5004:36	5004:36	13	tdata_t
LEAF_NODE	5004:43	5004:43	12	)
FIELD	5004:45	5004:45	12	buffer
LEAF_NODE	5004:45	5004:45	13	buffer
LEAF_NODE	5004:51	5004:51	11	,
ARGUMENT	5004:53	5004:53	11	buflen
FIELD	5004:53	5004:53	12	buflen
LEAF_NODE	5004:53	5004:53	13	buflen
LEAF_NODE	5004:59	5004:59	11	)
LEAF_NODE	5004:60	5004:60	7	;
EXPR_STATEMENT	5005:3	5005:57	6	written += t2pWriteFile ( output , ( tdata_t ) ">>] \n" , 5 ) ;
EXPR	5005:3	5005:3	7	written += t2pWriteFile ( output , ( tdata_t ) ">>] \n" , 5 )
ASSIGN	5005:3	5005:14	8	written += t2pWriteFile ( output , ( tdata_t ) ">>] \n" , 5 )
LVAL	5005:3	5005:3	9	written
FIELD	5005:3	5005:3	10	written
LEAF_NODE	5005:3	5005:3	11	written
ASSIGN_OP	5005:11	5005:11	9	+=
LEAF_NODE	5005:11	5005:11	10	+=
RVAL	5005:14	5005:14	9	t2pWriteFile ( output , ( tdata_t ) ">>] \n" , 5 )
FUNCTION_CALL	5005:14	5005:56	10	t2pWriteFile ( output , ( tdata_t ) ">>] \n" , 5 )
CALLEE	5005:14	5005:14	11	t2pWriteFile
LEAF_NODE	5005:14	5005:14	12	t2pWriteFile
LEAF_NODE	5005:26	5005:26	11	(
ARGUMENT	5005:27	5005:27	11	output
FIELD	5005:27	5005:27	12	output
LEAF_NODE	5005:27	5005:27	13	output
LEAF_NODE	5005:33	5005:33	11	,
ARGUMENT	5005:35	5005:45	11	( tdata_t ) ">>] \n"
LEAF_NODE	5005:35	5005:35	12	(
TYPE_NAME	5005:36	5005:36	12	tdata_t
LEAF_NODE	5005:36	5005:36	13	tdata_t
LEAF_NODE	5005:43	5005:43	12	)
FIELD	5005:45	5005:45	12	">>] \n"
LEAF_NODE	5005:45	5005:45	13	">>] \n"
LEAF_NODE	5005:53	5005:53	11	,
ARGUMENT	5005:55	5005:55	11	5
FIELD	5005:55	5005:55	12	5
LEAF_NODE	5005:55	5005:55	13	5
LEAF_NODE	5005:56	5005:56	11	)
LEAF_NODE	5005:57	5005:57	7	;
LEAF_NODE	5007:1	5007:1	5	}
LEAF_NODE	5009:1	5009:1	3	return
LEAF_NODE	5009:7	5009:7	3	(
LEAF_NODE	5009:8	5009:8	3	written
LEAF_NODE	5009:15	5009:15	3	)
LEAF_NODE	5009:16	5009:16	3	;
LEAF_NODE	5010:0	5010:0	2	}
FUNCTION_DEF	5012:0	5048:0	1	
RETURN_TYPE	5012:0	5012:0	2	tsize_t
TYPE_NAME	5012:0	5012:0	3	tsize_t
LEAF_NODE	5012:0	5012:0	4	tsize_t
FUNCTION_NAME	5012:8	5012:8	2	t2p_write_pdf_transfer
LEAF_NODE	5012:8	5012:8	3	t2p_write_pdf_transfer
PARAMETER_LIST	5012:30	5012:53	2	( T2P * t2p , TIFF * output )
LEAF_NODE	5012:30	5012:30	3	(
PARAMETER_DECL	5012:31	5012:36	3	T2P * t2p
TYPE	5012:31	5012:34	4	T2P *
TYPE_NAME	5012:31	5012:31	5	T2P
LEAF_NODE	5012:31	5012:31	6	T2P
POINTER	5012:34	5012:34	5	*
LEAF_NODE	5012:34	5012:34	6	*
NAME	5012:36	5012:36	4	t2p
LEAF_NODE	5012:36	5012:36	5	t2p
LEAF_NODE	5012:39	5012:39	3	,
PARAMETER_DECL	5012:41	5012:47	3	TIFF * output
TYPE	5012:41	5012:45	4	TIFF *
TYPE_NAME	5012:41	5012:41	5	TIFF
LEAF_NODE	5012:41	5012:41	6	TIFF
POINTER	5012:45	5012:45	5	*
LEAF_NODE	5012:45	5012:45	6	*
NAME	5012:47	5012:47	4	output
LEAF_NODE	5012:47	5012:47	5	output
LEAF_NODE	5012:53	5012:53	3	)
LEAF_NODE	5012:54	5012:54	2	{
STATEMENTS	5014:1	5047:16	2	
SIMPLE_DECL	5014:1	5014:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5014:1	5014:9	4	tsize_t written ; written = 0
TYPE	5014:1	5014:1	5	tsize_t
TYPE_NAME	5014:1	5014:1	6	tsize_t
LEAF_NODE	5014:1	5014:1	7	tsize_t
NAME	5014:9	5014:9	5	written
LEAF_NODE	5014:9	5014:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5014:9	5014:9	5	written = 0
ASSIGN	5014:9	5014:17	6	written = 0
LVAL	5014:9	5014:9	7	written
NAME	5014:9	5014:9	8	written
LEAF_NODE	5014:9	5014:9	9	written
ASSIGN_OP	5014:16	5014:16	7	=
LEAF_NODE	5014:16	5014:16	8	=
RVAL	5014:17	5014:17	7	0
FIELD	5014:17	5014:17	8	0
LEAF_NODE	5014:17	5014:17	9	0
LEAF_NODE	5014:18	5014:18	4	;
SIMPLE_DECL	5015:1	5015:16	3	char [ 32 ] buffer ;
VAR_DECL	5015:1	5015:6	4	char [ 32 ] buffer
TYPE	5015:1	5015:12	5	char [ 32 ]
TYPE_NAME	5015:1	5015:1	6	char
LEAF_NODE	5015:1	5015:1	7	char
TYPE_SUFFIX	5015:12	5015:15	6	[ 32 ]
LEAF_NODE	5015:12	5015:12	7	[
FIELD	5015:13	5015:13	7	32
LEAF_NODE	5015:13	5015:13	8	32
LEAF_NODE	5015:15	5015:15	7	]
NAME	5015:6	5015:6	5	buffer
LEAF_NODE	5015:6	5015:6	6	buffer
LEAF_NODE	5015:16	5015:16	4	;
SIMPLE_DECL	5016:1	5016:13	3	int buflen ; buflen = 0 ;
VAR_DECL	5016:1	5016:5	4	int buflen ; buflen = 0
TYPE	5016:1	5016:1	5	int
TYPE_NAME	5016:1	5016:1	6	int
LEAF_NODE	5016:1	5016:1	7	int
NAME	5016:5	5016:5	5	buflen
LEAF_NODE	5016:5	5016:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	5016:5	5016:5	5	buflen = 0
ASSIGN	5016:5	5016:12	6	buflen = 0
LVAL	5016:5	5016:5	7	buflen
NAME	5016:5	5016:5	8	buflen
LEAF_NODE	5016:5	5016:5	9	buflen
ASSIGN_OP	5016:11	5016:11	7	=
LEAF_NODE	5016:11	5016:11	8	=
RVAL	5016:12	5016:12	7	0
FIELD	5016:12	5016:12	8	0
LEAF_NODE	5016:12	5016:12	9	0
LEAF_NODE	5016:13	5016:13	4	;
EXPR_STATEMENT	5018:1	5018:76	3	written += t2pWriteFile ( output , ( tdata_t ) "<< /Type /ExtGState \n/TR " , 25 ) ;
EXPR	5018:1	5018:1	4	written += t2pWriteFile ( output , ( tdata_t ) "<< /Type /ExtGState \n/TR " , 25 )
ASSIGN	5018:1	5018:12	5	written += t2pWriteFile ( output , ( tdata_t ) "<< /Type /ExtGState \n/TR " , 25 )
LVAL	5018:1	5018:1	6	written
FIELD	5018:1	5018:1	7	written
LEAF_NODE	5018:1	5018:1	8	written
ASSIGN_OP	5018:9	5018:9	6	+=
LEAF_NODE	5018:9	5018:9	7	+=
RVAL	5018:12	5018:12	6	t2pWriteFile ( output , ( tdata_t ) "<< /Type /ExtGState \n/TR " , 25 )
FUNCTION_CALL	5018:12	5018:75	7	t2pWriteFile ( output , ( tdata_t ) "<< /Type /ExtGState \n/TR " , 25 )
CALLEE	5018:12	5018:12	8	t2pWriteFile
LEAF_NODE	5018:12	5018:12	9	t2pWriteFile
LEAF_NODE	5018:24	5018:24	8	(
ARGUMENT	5018:25	5018:25	8	output
FIELD	5018:25	5018:25	9	output
LEAF_NODE	5018:25	5018:25	10	output
LEAF_NODE	5018:31	5018:31	8	,
ARGUMENT	5018:33	5018:43	8	( tdata_t ) "<< /Type /ExtGState \n/TR "
LEAF_NODE	5018:33	5018:33	9	(
TYPE_NAME	5018:34	5018:34	9	tdata_t
LEAF_NODE	5018:34	5018:34	10	tdata_t
LEAF_NODE	5018:41	5018:41	9	)
FIELD	5018:43	5018:43	9	"<< /Type /ExtGState \n/TR "
LEAF_NODE	5018:43	5018:43	10	"<< /Type /ExtGState \n/TR "
LEAF_NODE	5018:71	5018:71	8	,
ARGUMENT	5018:73	5018:73	8	25
FIELD	5018:73	5018:73	9	25
LEAF_NODE	5018:73	5018:73	10	25
LEAF_NODE	5018:75	5018:75	8	)
LEAF_NODE	5018:76	5018:76	4	;
SELECTION	5019:1	5019:41	3	
KEYWORD	5019:1	5019:1	4	if
LEAF_NODE	5019:1	5019:1	5	if
LEAF_NODE	5019:3	5019:3	4	(
CONDITION	5019:4	5019:4	4	t2p -> tiff_transferfunctioncount == 1
EXPR	5019:4	5019:39	5	t2p -> tiff_transferfunctioncount == 1
FIELD	5019:4	5019:9	6	t2p -> tiff_transferfunctioncount
LEAF_NODE	5019:4	5019:4	7	t2p
LEAF_NODE	5019:7	5019:7	7	->
LEAF_NODE	5019:9	5019:9	7	tiff_transferfunctioncount
EQ_OPERATOR	5019:36	5019:36	6	==
LEAF_NODE	5019:36	5019:36	7	==
FIELD	5019:39	5019:39	6	1
LEAF_NODE	5019:39	5019:39	7	1
LEAF_NODE	5019:40	5019:40	4	)
STATEMENTS	5019:41	5025:1	4	
LEAF_NODE	5019:41	5019:41	5	{
STATEMENTS	5020:2	5024:2	5	
EXPR_STATEMENT	5020:2	5021:50	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) ) ;
EXPR	5020:2	5020:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
ASSIGN	5020:2	5020:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
LVAL	5020:2	5020:2	9	buflen
FIELD	5020:2	5020:2	10	buflen
LEAF_NODE	5020:2	5020:2	11	buflen
ASSIGN_OP	5020:8	5020:8	9	=
LEAF_NODE	5020:8	5020:8	10	=
RVAL	5020:9	5020:9	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
FUNCTION_CALL	5020:9	5021:49	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
CALLEE	5020:9	5020:9	11	snprintf
LEAF_NODE	5020:9	5020:9	12	snprintf
LEAF_NODE	5020:17	5020:17	11	(
ARGUMENT	5020:18	5020:18	11	buffer
FIELD	5020:18	5020:18	12	buffer
LEAF_NODE	5020:18	5020:18	13	buffer
LEAF_NODE	5020:24	5020:24	11	,
ARGUMENT	5020:26	5020:26	11	sizeof ( buffer )
FUNCTION_CALL	5020:26	5020:39	12	sizeof ( buffer )
CALLEE	5020:26	5020:26	13	sizeof
LEAF_NODE	5020:26	5020:26	14	sizeof
LEAF_NODE	5020:32	5020:32	13	(
ARGUMENT	5020:33	5020:33	13	buffer
FIELD	5020:33	5020:33	14	buffer
LEAF_NODE	5020:33	5020:33	15	buffer
LEAF_NODE	5020:39	5020:39	13	)
LEAF_NODE	5020:40	5020:40	11	,
ARGUMENT	5020:42	5020:42	11	"%lu"
FIELD	5020:42	5020:42	12	"%lu"
LEAF_NODE	5020:42	5020:42	13	"%lu"
LEAF_NODE	5020:47	5020:47	11	,
ARGUMENT	5021:10	5021:48	11	( unsigned long ) ( t2p -> pdf_xrefcount + 1 )
LEAF_NODE	5021:10	5021:10	12	(
TYPE_NAME	5021:11	5021:20	12	unsigned long
LEAF_NODE	5021:11	5021:11	13	unsigned
LEAF_NODE	5021:20	5021:20	13	long
LEAF_NODE	5021:24	5021:24	12	)
LEAF_NODE	5021:25	5021:25	12	(
FIELD	5021:26	5021:31	12	t2p -> pdf_xrefcount
LEAF_NODE	5021:26	5021:26	13	t2p
LEAF_NODE	5021:29	5021:29	13	->
LEAF_NODE	5021:31	5021:31	13	pdf_xrefcount
LEAF_NODE	5021:45	5021:45	12	+
FIELD	5021:47	5021:47	12	1
LEAF_NODE	5021:47	5021:47	13	1
LEAF_NODE	5021:48	5021:48	12	)
LEAF_NODE	5021:49	5021:49	11	)
LEAF_NODE	5021:50	5021:50	7	;
EXPR_STATEMENT	5022:2	5022:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5022:2	5022:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5022:2	5022:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5022:2	5022:2	9	check_snprintf_ret
LEAF_NODE	5022:2	5022:2	10	check_snprintf_ret
LEAF_NODE	5022:20	5022:20	9	(
ARGUMENT	5022:21	5022:21	9	t2p
FIELD	5022:21	5022:21	10	t2p
LEAF_NODE	5022:21	5022:21	11	t2p
LEAF_NODE	5022:24	5022:24	9	,
ARGUMENT	5022:26	5022:26	9	buflen
FIELD	5022:26	5022:26	10	buflen
LEAF_NODE	5022:26	5022:26	11	buflen
LEAF_NODE	5022:32	5022:32	9	,
ARGUMENT	5022:34	5022:34	9	buffer
FIELD	5022:34	5022:34	10	buffer
LEAF_NODE	5022:34	5022:34	11	buffer
LEAF_NODE	5022:40	5022:40	9	)
LEAF_NODE	5022:41	5022:41	7	;
EXPR_STATEMENT	5023:2	5023:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5023:2	5023:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5023:2	5023:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5023:2	5023:2	9	written
FIELD	5023:2	5023:2	10	written
LEAF_NODE	5023:2	5023:2	11	written
ASSIGN_OP	5023:10	5023:10	9	+=
LEAF_NODE	5023:10	5023:10	10	+=
RVAL	5023:13	5023:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5023:13	5023:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5023:13	5023:13	11	t2pWriteFile
LEAF_NODE	5023:13	5023:13	12	t2pWriteFile
LEAF_NODE	5023:25	5023:25	11	(
ARGUMENT	5023:26	5023:26	11	output
FIELD	5023:26	5023:26	12	output
LEAF_NODE	5023:26	5023:26	13	output
LEAF_NODE	5023:32	5023:32	11	,
ARGUMENT	5023:34	5023:44	11	( tdata_t ) buffer
LEAF_NODE	5023:34	5023:34	12	(
TYPE_NAME	5023:35	5023:35	12	tdata_t
LEAF_NODE	5023:35	5023:35	13	tdata_t
LEAF_NODE	5023:42	5023:42	12	)
FIELD	5023:44	5023:44	12	buffer
LEAF_NODE	5023:44	5023:44	13	buffer
LEAF_NODE	5023:50	5023:50	11	,
ARGUMENT	5023:52	5023:52	11	buflen
FIELD	5023:52	5023:52	12	buflen
LEAF_NODE	5023:52	5023:52	13	buflen
LEAF_NODE	5023:58	5023:58	11	)
LEAF_NODE	5023:59	5023:59	7	;
EXPR_STATEMENT	5024:2	5024:55	6	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 ) ;
EXPR	5024:2	5024:2	7	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
ASSIGN	5024:2	5024:13	8	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
LVAL	5024:2	5024:2	9	written
FIELD	5024:2	5024:2	10	written
LEAF_NODE	5024:2	5024:2	11	written
ASSIGN_OP	5024:10	5024:10	9	+=
LEAF_NODE	5024:10	5024:10	10	+=
RVAL	5024:13	5024:13	9	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
FUNCTION_CALL	5024:13	5024:54	10	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
CALLEE	5024:13	5024:13	11	t2pWriteFile
LEAF_NODE	5024:13	5024:13	12	t2pWriteFile
LEAF_NODE	5024:25	5024:25	11	(
ARGUMENT	5024:26	5024:26	11	output
FIELD	5024:26	5024:26	12	output
LEAF_NODE	5024:26	5024:26	13	output
LEAF_NODE	5024:32	5024:32	11	,
ARGUMENT	5024:34	5024:44	11	( tdata_t ) " 0 R "
LEAF_NODE	5024:34	5024:34	12	(
TYPE_NAME	5024:35	5024:35	12	tdata_t
LEAF_NODE	5024:35	5024:35	13	tdata_t
LEAF_NODE	5024:42	5024:42	12	)
FIELD	5024:44	5024:44	12	" 0 R "
LEAF_NODE	5024:44	5024:44	13	" 0 R "
LEAF_NODE	5024:51	5024:51	11	,
ARGUMENT	5024:53	5024:53	11	5
FIELD	5024:53	5024:53	12	5
LEAF_NODE	5024:53	5024:53	13	5
LEAF_NODE	5024:54	5024:54	11	)
LEAF_NODE	5024:55	5024:55	7	;
LEAF_NODE	5025:1	5025:1	5	}
SELECTION	5025:3	5025:8	3	
KEYWORD	5025:3	5025:3	4	else
LEAF_NODE	5025:3	5025:3	5	else
STATEMENTS	5025:8	5043:1	4	
LEAF_NODE	5025:8	5025:8	5	{
STATEMENTS	5026:2	5042:2	5	
EXPR_STATEMENT	5026:2	5026:52	6	written += t2pWriteFile ( output , ( tdata_t ) "[ " , 2 ) ;
EXPR	5026:2	5026:2	7	written += t2pWriteFile ( output , ( tdata_t ) "[ " , 2 )
ASSIGN	5026:2	5026:13	8	written += t2pWriteFile ( output , ( tdata_t ) "[ " , 2 )
LVAL	5026:2	5026:2	9	written
FIELD	5026:2	5026:2	10	written
LEAF_NODE	5026:2	5026:2	11	written
ASSIGN_OP	5026:10	5026:10	9	+=
LEAF_NODE	5026:10	5026:10	10	+=
RVAL	5026:13	5026:13	9	t2pWriteFile ( output , ( tdata_t ) "[ " , 2 )
FUNCTION_CALL	5026:13	5026:51	10	t2pWriteFile ( output , ( tdata_t ) "[ " , 2 )
CALLEE	5026:13	5026:13	11	t2pWriteFile
LEAF_NODE	5026:13	5026:13	12	t2pWriteFile
LEAF_NODE	5026:25	5026:25	11	(
ARGUMENT	5026:26	5026:26	11	output
FIELD	5026:26	5026:26	12	output
LEAF_NODE	5026:26	5026:26	13	output
LEAF_NODE	5026:32	5026:32	11	,
ARGUMENT	5026:34	5026:44	11	( tdata_t ) "[ "
LEAF_NODE	5026:34	5026:34	12	(
TYPE_NAME	5026:35	5026:35	12	tdata_t
LEAF_NODE	5026:35	5026:35	13	tdata_t
LEAF_NODE	5026:42	5026:42	12	)
FIELD	5026:44	5026:44	12	"[ "
LEAF_NODE	5026:44	5026:44	13	"[ "
LEAF_NODE	5026:48	5026:48	11	,
ARGUMENT	5026:50	5026:50	11	2
FIELD	5026:50	5026:50	12	2
LEAF_NODE	5026:50	5026:50	13	2
LEAF_NODE	5026:51	5026:51	11	)
LEAF_NODE	5026:52	5026:52	7	;
EXPR_STATEMENT	5027:2	5028:50	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) ) ;
EXPR	5027:2	5027:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
ASSIGN	5027:2	5027:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
LVAL	5027:2	5027:2	9	buflen
FIELD	5027:2	5027:2	10	buflen
LEAF_NODE	5027:2	5027:2	11	buflen
ASSIGN_OP	5027:8	5027:8	9	=
LEAF_NODE	5027:8	5027:8	10	=
RVAL	5027:9	5027:9	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
FUNCTION_CALL	5027:9	5028:49	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
CALLEE	5027:9	5027:9	11	snprintf
LEAF_NODE	5027:9	5027:9	12	snprintf
LEAF_NODE	5027:17	5027:17	11	(
ARGUMENT	5027:18	5027:18	11	buffer
FIELD	5027:18	5027:18	12	buffer
LEAF_NODE	5027:18	5027:18	13	buffer
LEAF_NODE	5027:24	5027:24	11	,
ARGUMENT	5027:26	5027:26	11	sizeof ( buffer )
FUNCTION_CALL	5027:26	5027:39	12	sizeof ( buffer )
CALLEE	5027:26	5027:26	13	sizeof
LEAF_NODE	5027:26	5027:26	14	sizeof
LEAF_NODE	5027:32	5027:32	13	(
ARGUMENT	5027:33	5027:33	13	buffer
FIELD	5027:33	5027:33	14	buffer
LEAF_NODE	5027:33	5027:33	15	buffer
LEAF_NODE	5027:39	5027:39	13	)
LEAF_NODE	5027:40	5027:40	11	,
ARGUMENT	5027:42	5027:42	11	"%lu"
FIELD	5027:42	5027:42	12	"%lu"
LEAF_NODE	5027:42	5027:42	13	"%lu"
LEAF_NODE	5027:47	5027:47	11	,
ARGUMENT	5028:10	5028:48	11	( unsigned long ) ( t2p -> pdf_xrefcount + 1 )
LEAF_NODE	5028:10	5028:10	12	(
TYPE_NAME	5028:11	5028:20	12	unsigned long
LEAF_NODE	5028:11	5028:11	13	unsigned
LEAF_NODE	5028:20	5028:20	13	long
LEAF_NODE	5028:24	5028:24	12	)
LEAF_NODE	5028:25	5028:25	12	(
FIELD	5028:26	5028:31	12	t2p -> pdf_xrefcount
LEAF_NODE	5028:26	5028:26	13	t2p
LEAF_NODE	5028:29	5028:29	13	->
LEAF_NODE	5028:31	5028:31	13	pdf_xrefcount
LEAF_NODE	5028:45	5028:45	12	+
FIELD	5028:47	5028:47	12	1
LEAF_NODE	5028:47	5028:47	13	1
LEAF_NODE	5028:48	5028:48	12	)
LEAF_NODE	5028:49	5028:49	11	)
LEAF_NODE	5028:50	5028:50	7	;
EXPR_STATEMENT	5029:2	5029:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5029:2	5029:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5029:2	5029:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5029:2	5029:2	9	check_snprintf_ret
LEAF_NODE	5029:2	5029:2	10	check_snprintf_ret
LEAF_NODE	5029:20	5029:20	9	(
ARGUMENT	5029:21	5029:21	9	t2p
FIELD	5029:21	5029:21	10	t2p
LEAF_NODE	5029:21	5029:21	11	t2p
LEAF_NODE	5029:24	5029:24	9	,
ARGUMENT	5029:26	5029:26	9	buflen
FIELD	5029:26	5029:26	10	buflen
LEAF_NODE	5029:26	5029:26	11	buflen
LEAF_NODE	5029:32	5029:32	9	,
ARGUMENT	5029:34	5029:34	9	buffer
FIELD	5029:34	5029:34	10	buffer
LEAF_NODE	5029:34	5029:34	11	buffer
LEAF_NODE	5029:40	5029:40	9	)
LEAF_NODE	5029:41	5029:41	7	;
EXPR_STATEMENT	5030:2	5030:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5030:2	5030:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5030:2	5030:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5030:2	5030:2	9	written
FIELD	5030:2	5030:2	10	written
LEAF_NODE	5030:2	5030:2	11	written
ASSIGN_OP	5030:10	5030:10	9	+=
LEAF_NODE	5030:10	5030:10	10	+=
RVAL	5030:13	5030:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5030:13	5030:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5030:13	5030:13	11	t2pWriteFile
LEAF_NODE	5030:13	5030:13	12	t2pWriteFile
LEAF_NODE	5030:25	5030:25	11	(
ARGUMENT	5030:26	5030:26	11	output
FIELD	5030:26	5030:26	12	output
LEAF_NODE	5030:26	5030:26	13	output
LEAF_NODE	5030:32	5030:32	11	,
ARGUMENT	5030:34	5030:44	11	( tdata_t ) buffer
LEAF_NODE	5030:34	5030:34	12	(
TYPE_NAME	5030:35	5030:35	12	tdata_t
LEAF_NODE	5030:35	5030:35	13	tdata_t
LEAF_NODE	5030:42	5030:42	12	)
FIELD	5030:44	5030:44	12	buffer
LEAF_NODE	5030:44	5030:44	13	buffer
LEAF_NODE	5030:50	5030:50	11	,
ARGUMENT	5030:52	5030:52	11	buflen
FIELD	5030:52	5030:52	12	buflen
LEAF_NODE	5030:52	5030:52	13	buflen
LEAF_NODE	5030:58	5030:58	11	)
LEAF_NODE	5030:59	5030:59	7	;
EXPR_STATEMENT	5031:2	5031:55	6	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 ) ;
EXPR	5031:2	5031:2	7	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
ASSIGN	5031:2	5031:13	8	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
LVAL	5031:2	5031:2	9	written
FIELD	5031:2	5031:2	10	written
LEAF_NODE	5031:2	5031:2	11	written
ASSIGN_OP	5031:10	5031:10	9	+=
LEAF_NODE	5031:10	5031:10	10	+=
RVAL	5031:13	5031:13	9	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
FUNCTION_CALL	5031:13	5031:54	10	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
CALLEE	5031:13	5031:13	11	t2pWriteFile
LEAF_NODE	5031:13	5031:13	12	t2pWriteFile
LEAF_NODE	5031:25	5031:25	11	(
ARGUMENT	5031:26	5031:26	11	output
FIELD	5031:26	5031:26	12	output
LEAF_NODE	5031:26	5031:26	13	output
LEAF_NODE	5031:32	5031:32	11	,
ARGUMENT	5031:34	5031:44	11	( tdata_t ) " 0 R "
LEAF_NODE	5031:34	5031:34	12	(
TYPE_NAME	5031:35	5031:35	12	tdata_t
LEAF_NODE	5031:35	5031:35	13	tdata_t
LEAF_NODE	5031:42	5031:42	12	)
FIELD	5031:44	5031:44	12	" 0 R "
LEAF_NODE	5031:44	5031:44	13	" 0 R "
LEAF_NODE	5031:51	5031:51	11	,
ARGUMENT	5031:53	5031:53	11	5
FIELD	5031:53	5031:53	12	5
LEAF_NODE	5031:53	5031:53	13	5
LEAF_NODE	5031:54	5031:54	11	)
LEAF_NODE	5031:55	5031:55	7	;
EXPR_STATEMENT	5032:2	5033:50	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 2 ) ) ;
EXPR	5032:2	5032:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 2 ) )
ASSIGN	5032:2	5032:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 2 ) )
LVAL	5032:2	5032:2	9	buflen
FIELD	5032:2	5032:2	10	buflen
LEAF_NODE	5032:2	5032:2	11	buflen
ASSIGN_OP	5032:8	5032:8	9	=
LEAF_NODE	5032:8	5032:8	10	=
RVAL	5032:9	5032:9	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 2 ) )
FUNCTION_CALL	5032:9	5033:49	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 2 ) )
CALLEE	5032:9	5032:9	11	snprintf
LEAF_NODE	5032:9	5032:9	12	snprintf
LEAF_NODE	5032:17	5032:17	11	(
ARGUMENT	5032:18	5032:18	11	buffer
FIELD	5032:18	5032:18	12	buffer
LEAF_NODE	5032:18	5032:18	13	buffer
LEAF_NODE	5032:24	5032:24	11	,
ARGUMENT	5032:26	5032:26	11	sizeof ( buffer )
FUNCTION_CALL	5032:26	5032:39	12	sizeof ( buffer )
CALLEE	5032:26	5032:26	13	sizeof
LEAF_NODE	5032:26	5032:26	14	sizeof
LEAF_NODE	5032:32	5032:32	13	(
ARGUMENT	5032:33	5032:33	13	buffer
FIELD	5032:33	5032:33	14	buffer
LEAF_NODE	5032:33	5032:33	15	buffer
LEAF_NODE	5032:39	5032:39	13	)
LEAF_NODE	5032:40	5032:40	11	,
ARGUMENT	5032:42	5032:42	11	"%lu"
FIELD	5032:42	5032:42	12	"%lu"
LEAF_NODE	5032:42	5032:42	13	"%lu"
LEAF_NODE	5032:47	5032:47	11	,
ARGUMENT	5033:10	5033:48	11	( unsigned long ) ( t2p -> pdf_xrefcount + 2 )
LEAF_NODE	5033:10	5033:10	12	(
TYPE_NAME	5033:11	5033:20	12	unsigned long
LEAF_NODE	5033:11	5033:11	13	unsigned
LEAF_NODE	5033:20	5033:20	13	long
LEAF_NODE	5033:24	5033:24	12	)
LEAF_NODE	5033:25	5033:25	12	(
FIELD	5033:26	5033:31	12	t2p -> pdf_xrefcount
LEAF_NODE	5033:26	5033:26	13	t2p
LEAF_NODE	5033:29	5033:29	13	->
LEAF_NODE	5033:31	5033:31	13	pdf_xrefcount
LEAF_NODE	5033:45	5033:45	12	+
FIELD	5033:47	5033:47	12	2
LEAF_NODE	5033:47	5033:47	13	2
LEAF_NODE	5033:48	5033:48	12	)
LEAF_NODE	5033:49	5033:49	11	)
LEAF_NODE	5033:50	5033:50	7	;
EXPR_STATEMENT	5034:2	5034:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5034:2	5034:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5034:2	5034:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5034:2	5034:2	9	check_snprintf_ret
LEAF_NODE	5034:2	5034:2	10	check_snprintf_ret
LEAF_NODE	5034:20	5034:20	9	(
ARGUMENT	5034:21	5034:21	9	t2p
FIELD	5034:21	5034:21	10	t2p
LEAF_NODE	5034:21	5034:21	11	t2p
LEAF_NODE	5034:24	5034:24	9	,
ARGUMENT	5034:26	5034:26	9	buflen
FIELD	5034:26	5034:26	10	buflen
LEAF_NODE	5034:26	5034:26	11	buflen
LEAF_NODE	5034:32	5034:32	9	,
ARGUMENT	5034:34	5034:34	9	buffer
FIELD	5034:34	5034:34	10	buffer
LEAF_NODE	5034:34	5034:34	11	buffer
LEAF_NODE	5034:40	5034:40	9	)
LEAF_NODE	5034:41	5034:41	7	;
EXPR_STATEMENT	5035:2	5035:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5035:2	5035:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5035:2	5035:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5035:2	5035:2	9	written
FIELD	5035:2	5035:2	10	written
LEAF_NODE	5035:2	5035:2	11	written
ASSIGN_OP	5035:10	5035:10	9	+=
LEAF_NODE	5035:10	5035:10	10	+=
RVAL	5035:13	5035:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5035:13	5035:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5035:13	5035:13	11	t2pWriteFile
LEAF_NODE	5035:13	5035:13	12	t2pWriteFile
LEAF_NODE	5035:25	5035:25	11	(
ARGUMENT	5035:26	5035:26	11	output
FIELD	5035:26	5035:26	12	output
LEAF_NODE	5035:26	5035:26	13	output
LEAF_NODE	5035:32	5035:32	11	,
ARGUMENT	5035:34	5035:44	11	( tdata_t ) buffer
LEAF_NODE	5035:34	5035:34	12	(
TYPE_NAME	5035:35	5035:35	12	tdata_t
LEAF_NODE	5035:35	5035:35	13	tdata_t
LEAF_NODE	5035:42	5035:42	12	)
FIELD	5035:44	5035:44	12	buffer
LEAF_NODE	5035:44	5035:44	13	buffer
LEAF_NODE	5035:50	5035:50	11	,
ARGUMENT	5035:52	5035:52	11	buflen
FIELD	5035:52	5035:52	12	buflen
LEAF_NODE	5035:52	5035:52	13	buflen
LEAF_NODE	5035:58	5035:58	11	)
LEAF_NODE	5035:59	5035:59	7	;
EXPR_STATEMENT	5036:2	5036:55	6	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 ) ;
EXPR	5036:2	5036:2	7	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
ASSIGN	5036:2	5036:13	8	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
LVAL	5036:2	5036:2	9	written
FIELD	5036:2	5036:2	10	written
LEAF_NODE	5036:2	5036:2	11	written
ASSIGN_OP	5036:10	5036:10	9	+=
LEAF_NODE	5036:10	5036:10	10	+=
RVAL	5036:13	5036:13	9	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
FUNCTION_CALL	5036:13	5036:54	10	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
CALLEE	5036:13	5036:13	11	t2pWriteFile
LEAF_NODE	5036:13	5036:13	12	t2pWriteFile
LEAF_NODE	5036:25	5036:25	11	(
ARGUMENT	5036:26	5036:26	11	output
FIELD	5036:26	5036:26	12	output
LEAF_NODE	5036:26	5036:26	13	output
LEAF_NODE	5036:32	5036:32	11	,
ARGUMENT	5036:34	5036:44	11	( tdata_t ) " 0 R "
LEAF_NODE	5036:34	5036:34	12	(
TYPE_NAME	5036:35	5036:35	12	tdata_t
LEAF_NODE	5036:35	5036:35	13	tdata_t
LEAF_NODE	5036:42	5036:42	12	)
FIELD	5036:44	5036:44	12	" 0 R "
LEAF_NODE	5036:44	5036:44	13	" 0 R "
LEAF_NODE	5036:51	5036:51	11	,
ARGUMENT	5036:53	5036:53	11	5
FIELD	5036:53	5036:53	12	5
LEAF_NODE	5036:53	5036:53	13	5
LEAF_NODE	5036:54	5036:54	11	)
LEAF_NODE	5036:55	5036:55	7	;
EXPR_STATEMENT	5037:2	5038:50	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 3 ) ) ;
EXPR	5037:2	5037:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 3 ) )
ASSIGN	5037:2	5037:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 3 ) )
LVAL	5037:2	5037:2	9	buflen
FIELD	5037:2	5037:2	10	buflen
LEAF_NODE	5037:2	5037:2	11	buflen
ASSIGN_OP	5037:8	5037:8	9	=
LEAF_NODE	5037:8	5037:8	10	=
RVAL	5037:9	5037:9	9	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 3 ) )
FUNCTION_CALL	5037:9	5038:49	10	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 3 ) )
CALLEE	5037:9	5037:9	11	snprintf
LEAF_NODE	5037:9	5037:9	12	snprintf
LEAF_NODE	5037:17	5037:17	11	(
ARGUMENT	5037:18	5037:18	11	buffer
FIELD	5037:18	5037:18	12	buffer
LEAF_NODE	5037:18	5037:18	13	buffer
LEAF_NODE	5037:24	5037:24	11	,
ARGUMENT	5037:26	5037:26	11	sizeof ( buffer )
FUNCTION_CALL	5037:26	5037:39	12	sizeof ( buffer )
CALLEE	5037:26	5037:26	13	sizeof
LEAF_NODE	5037:26	5037:26	14	sizeof
LEAF_NODE	5037:32	5037:32	13	(
ARGUMENT	5037:33	5037:33	13	buffer
FIELD	5037:33	5037:33	14	buffer
LEAF_NODE	5037:33	5037:33	15	buffer
LEAF_NODE	5037:39	5037:39	13	)
LEAF_NODE	5037:40	5037:40	11	,
ARGUMENT	5037:42	5037:42	11	"%lu"
FIELD	5037:42	5037:42	12	"%lu"
LEAF_NODE	5037:42	5037:42	13	"%lu"
LEAF_NODE	5037:47	5037:47	11	,
ARGUMENT	5038:10	5038:48	11	( unsigned long ) ( t2p -> pdf_xrefcount + 3 )
LEAF_NODE	5038:10	5038:10	12	(
TYPE_NAME	5038:11	5038:20	12	unsigned long
LEAF_NODE	5038:11	5038:11	13	unsigned
LEAF_NODE	5038:20	5038:20	13	long
LEAF_NODE	5038:24	5038:24	12	)
LEAF_NODE	5038:25	5038:25	12	(
FIELD	5038:26	5038:31	12	t2p -> pdf_xrefcount
LEAF_NODE	5038:26	5038:26	13	t2p
LEAF_NODE	5038:29	5038:29	13	->
LEAF_NODE	5038:31	5038:31	13	pdf_xrefcount
LEAF_NODE	5038:45	5038:45	12	+
FIELD	5038:47	5038:47	12	3
LEAF_NODE	5038:47	5038:47	13	3
LEAF_NODE	5038:48	5038:48	12	)
LEAF_NODE	5038:49	5038:49	11	)
LEAF_NODE	5038:50	5038:50	7	;
EXPR_STATEMENT	5039:2	5039:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5039:2	5039:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5039:2	5039:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5039:2	5039:2	9	check_snprintf_ret
LEAF_NODE	5039:2	5039:2	10	check_snprintf_ret
LEAF_NODE	5039:20	5039:20	9	(
ARGUMENT	5039:21	5039:21	9	t2p
FIELD	5039:21	5039:21	10	t2p
LEAF_NODE	5039:21	5039:21	11	t2p
LEAF_NODE	5039:24	5039:24	9	,
ARGUMENT	5039:26	5039:26	9	buflen
FIELD	5039:26	5039:26	10	buflen
LEAF_NODE	5039:26	5039:26	11	buflen
LEAF_NODE	5039:32	5039:32	9	,
ARGUMENT	5039:34	5039:34	9	buffer
FIELD	5039:34	5039:34	10	buffer
LEAF_NODE	5039:34	5039:34	11	buffer
LEAF_NODE	5039:40	5039:40	9	)
LEAF_NODE	5039:41	5039:41	7	;
EXPR_STATEMENT	5040:2	5040:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5040:2	5040:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5040:2	5040:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5040:2	5040:2	9	written
FIELD	5040:2	5040:2	10	written
LEAF_NODE	5040:2	5040:2	11	written
ASSIGN_OP	5040:10	5040:10	9	+=
LEAF_NODE	5040:10	5040:10	10	+=
RVAL	5040:13	5040:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5040:13	5040:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5040:13	5040:13	11	t2pWriteFile
LEAF_NODE	5040:13	5040:13	12	t2pWriteFile
LEAF_NODE	5040:25	5040:25	11	(
ARGUMENT	5040:26	5040:26	11	output
FIELD	5040:26	5040:26	12	output
LEAF_NODE	5040:26	5040:26	13	output
LEAF_NODE	5040:32	5040:32	11	,
ARGUMENT	5040:34	5040:44	11	( tdata_t ) buffer
LEAF_NODE	5040:34	5040:34	12	(
TYPE_NAME	5040:35	5040:35	12	tdata_t
LEAF_NODE	5040:35	5040:35	13	tdata_t
LEAF_NODE	5040:42	5040:42	12	)
FIELD	5040:44	5040:44	12	buffer
LEAF_NODE	5040:44	5040:44	13	buffer
LEAF_NODE	5040:50	5040:50	11	,
ARGUMENT	5040:52	5040:52	11	buflen
FIELD	5040:52	5040:52	12	buflen
LEAF_NODE	5040:52	5040:52	13	buflen
LEAF_NODE	5040:58	5040:58	11	)
LEAF_NODE	5040:59	5040:59	7	;
EXPR_STATEMENT	5041:2	5041:55	6	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 ) ;
EXPR	5041:2	5041:2	7	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
ASSIGN	5041:2	5041:13	8	written += t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
LVAL	5041:2	5041:2	9	written
FIELD	5041:2	5041:2	10	written
LEAF_NODE	5041:2	5041:2	11	written
ASSIGN_OP	5041:10	5041:10	9	+=
LEAF_NODE	5041:10	5041:10	10	+=
RVAL	5041:13	5041:13	9	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
FUNCTION_CALL	5041:13	5041:54	10	t2pWriteFile ( output , ( tdata_t ) " 0 R " , 5 )
CALLEE	5041:13	5041:13	11	t2pWriteFile
LEAF_NODE	5041:13	5041:13	12	t2pWriteFile
LEAF_NODE	5041:25	5041:25	11	(
ARGUMENT	5041:26	5041:26	11	output
FIELD	5041:26	5041:26	12	output
LEAF_NODE	5041:26	5041:26	13	output
LEAF_NODE	5041:32	5041:32	11	,
ARGUMENT	5041:34	5041:44	11	( tdata_t ) " 0 R "
LEAF_NODE	5041:34	5041:34	12	(
TYPE_NAME	5041:35	5041:35	12	tdata_t
LEAF_NODE	5041:35	5041:35	13	tdata_t
LEAF_NODE	5041:42	5041:42	12	)
FIELD	5041:44	5041:44	12	" 0 R "
LEAF_NODE	5041:44	5041:44	13	" 0 R "
LEAF_NODE	5041:51	5041:51	11	,
ARGUMENT	5041:53	5041:53	11	5
FIELD	5041:53	5041:53	12	5
LEAF_NODE	5041:53	5041:53	13	5
LEAF_NODE	5041:54	5041:54	11	)
LEAF_NODE	5041:55	5041:55	7	;
EXPR_STATEMENT	5042:2	5042:63	6	written += t2pWriteFile ( output , ( tdata_t ) "/Identity ] " , 12 ) ;
EXPR	5042:2	5042:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/Identity ] " , 12 )
ASSIGN	5042:2	5042:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/Identity ] " , 12 )
LVAL	5042:2	5042:2	9	written
FIELD	5042:2	5042:2	10	written
LEAF_NODE	5042:2	5042:2	11	written
ASSIGN_OP	5042:10	5042:10	9	+=
LEAF_NODE	5042:10	5042:10	10	+=
RVAL	5042:13	5042:13	9	t2pWriteFile ( output , ( tdata_t ) "/Identity ] " , 12 )
FUNCTION_CALL	5042:13	5042:62	10	t2pWriteFile ( output , ( tdata_t ) "/Identity ] " , 12 )
CALLEE	5042:13	5042:13	11	t2pWriteFile
LEAF_NODE	5042:13	5042:13	12	t2pWriteFile
LEAF_NODE	5042:25	5042:25	11	(
ARGUMENT	5042:26	5042:26	11	output
FIELD	5042:26	5042:26	12	output
LEAF_NODE	5042:26	5042:26	13	output
LEAF_NODE	5042:32	5042:32	11	,
ARGUMENT	5042:34	5042:44	11	( tdata_t ) "/Identity ] "
LEAF_NODE	5042:34	5042:34	12	(
TYPE_NAME	5042:35	5042:35	12	tdata_t
LEAF_NODE	5042:35	5042:35	13	tdata_t
LEAF_NODE	5042:42	5042:42	12	)
FIELD	5042:44	5042:44	12	"/Identity ] "
LEAF_NODE	5042:44	5042:44	13	"/Identity ] "
LEAF_NODE	5042:58	5042:58	11	,
ARGUMENT	5042:60	5042:60	11	12
FIELD	5042:60	5042:60	12	12
LEAF_NODE	5042:60	5042:60	13	12
LEAF_NODE	5042:62	5042:62	11	)
LEAF_NODE	5042:63	5042:63	7	;
LEAF_NODE	5043:1	5043:1	5	}
EXPR_STATEMENT	5045:1	5045:55	3	written += t2pWriteFile ( output , ( tdata_t ) " >> \n" , 5 ) ;
EXPR	5045:1	5045:1	4	written += t2pWriteFile ( output , ( tdata_t ) " >> \n" , 5 )
ASSIGN	5045:1	5045:12	5	written += t2pWriteFile ( output , ( tdata_t ) " >> \n" , 5 )
LVAL	5045:1	5045:1	6	written
FIELD	5045:1	5045:1	7	written
LEAF_NODE	5045:1	5045:1	8	written
ASSIGN_OP	5045:9	5045:9	6	+=
LEAF_NODE	5045:9	5045:9	7	+=
RVAL	5045:12	5045:12	6	t2pWriteFile ( output , ( tdata_t ) " >> \n" , 5 )
FUNCTION_CALL	5045:12	5045:54	7	t2pWriteFile ( output , ( tdata_t ) " >> \n" , 5 )
CALLEE	5045:12	5045:12	8	t2pWriteFile
LEAF_NODE	5045:12	5045:12	9	t2pWriteFile
LEAF_NODE	5045:24	5045:24	8	(
ARGUMENT	5045:25	5045:25	8	output
FIELD	5045:25	5045:25	9	output
LEAF_NODE	5045:25	5045:25	10	output
LEAF_NODE	5045:31	5045:31	8	,
ARGUMENT	5045:33	5045:43	8	( tdata_t ) " >> \n"
LEAF_NODE	5045:33	5045:33	9	(
TYPE_NAME	5045:34	5045:34	9	tdata_t
LEAF_NODE	5045:34	5045:34	10	tdata_t
LEAF_NODE	5045:41	5045:41	9	)
FIELD	5045:43	5045:43	9	" >> \n"
LEAF_NODE	5045:43	5045:43	10	" >> \n"
LEAF_NODE	5045:51	5045:51	8	,
ARGUMENT	5045:53	5045:53	8	5
FIELD	5045:53	5045:53	9	5
LEAF_NODE	5045:53	5045:53	10	5
LEAF_NODE	5045:54	5045:54	8	)
LEAF_NODE	5045:55	5045:55	4	;
LEAF_NODE	5047:1	5047:1	3	return
LEAF_NODE	5047:7	5047:7	3	(
LEAF_NODE	5047:8	5047:8	3	written
LEAF_NODE	5047:15	5047:15	3	)
LEAF_NODE	5047:16	5047:16	3	;
LEAF_NODE	5048:0	5048:0	2	}
FUNCTION_DEF	5050:0	5067:0	1	
RETURN_TYPE	5050:0	5050:0	2	tsize_t
TYPE_NAME	5050:0	5050:0	3	tsize_t
LEAF_NODE	5050:0	5050:0	4	tsize_t
FUNCTION_NAME	5050:8	5050:8	2	t2p_write_pdf_transfer_dict
LEAF_NODE	5050:8	5050:8	3	t2p_write_pdf_transfer_dict
PARAMETER_LIST	5050:35	5050:68	2	( T2P * t2p , TIFF * output , uint16 i )
LEAF_NODE	5050:35	5050:35	3	(
PARAMETER_DECL	5050:36	5050:41	3	T2P * t2p
TYPE	5050:36	5050:39	4	T2P *
TYPE_NAME	5050:36	5050:36	5	T2P
LEAF_NODE	5050:36	5050:36	6	T2P
POINTER	5050:39	5050:39	5	*
LEAF_NODE	5050:39	5050:39	6	*
NAME	5050:41	5050:41	4	t2p
LEAF_NODE	5050:41	5050:41	5	t2p
LEAF_NODE	5050:44	5050:44	3	,
PARAMETER_DECL	5050:46	5050:52	3	TIFF * output
TYPE	5050:46	5050:50	4	TIFF *
TYPE_NAME	5050:46	5050:46	5	TIFF
LEAF_NODE	5050:46	5050:46	6	TIFF
POINTER	5050:50	5050:50	5	*
LEAF_NODE	5050:50	5050:50	6	*
NAME	5050:52	5050:52	4	output
LEAF_NODE	5050:52	5050:52	5	output
LEAF_NODE	5050:58	5050:58	3	,
PARAMETER_DECL	5050:60	5050:67	3	uint16 i
TYPE	5050:60	5050:60	4	uint16
TYPE_NAME	5050:60	5050:60	5	uint16
LEAF_NODE	5050:60	5050:60	6	uint16
NAME	5050:67	5050:67	4	i
LEAF_NODE	5050:67	5050:67	5	i
LEAF_NODE	5050:68	5050:68	3	)
LEAF_NODE	5050:69	5050:69	2	{
STATEMENTS	5052:1	5066:16	2	
SIMPLE_DECL	5052:1	5052:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5052:1	5052:9	4	tsize_t written ; written = 0
TYPE	5052:1	5052:1	5	tsize_t
TYPE_NAME	5052:1	5052:1	6	tsize_t
LEAF_NODE	5052:1	5052:1	7	tsize_t
NAME	5052:9	5052:9	5	written
LEAF_NODE	5052:9	5052:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5052:9	5052:9	5	written = 0
ASSIGN	5052:9	5052:17	6	written = 0
LVAL	5052:9	5052:9	7	written
NAME	5052:9	5052:9	8	written
LEAF_NODE	5052:9	5052:9	9	written
ASSIGN_OP	5052:16	5052:16	7	=
LEAF_NODE	5052:16	5052:16	8	=
RVAL	5052:17	5052:17	7	0
FIELD	5052:17	5052:17	8	0
LEAF_NODE	5052:17	5052:17	9	0
LEAF_NODE	5052:18	5052:18	4	;
SIMPLE_DECL	5053:1	5053:16	3	char [ 32 ] buffer ;
VAR_DECL	5053:1	5053:6	4	char [ 32 ] buffer
TYPE	5053:1	5053:12	5	char [ 32 ]
TYPE_NAME	5053:1	5053:1	6	char
LEAF_NODE	5053:1	5053:1	7	char
TYPE_SUFFIX	5053:12	5053:15	6	[ 32 ]
LEAF_NODE	5053:12	5053:12	7	[
FIELD	5053:13	5053:13	7	32
LEAF_NODE	5053:13	5053:13	8	32
LEAF_NODE	5053:15	5053:15	7	]
NAME	5053:6	5053:6	5	buffer
LEAF_NODE	5053:6	5053:6	6	buffer
LEAF_NODE	5053:16	5053:16	4	;
SIMPLE_DECL	5054:1	5054:13	3	int buflen ; buflen = 0 ;
VAR_DECL	5054:1	5054:5	4	int buflen ; buflen = 0
TYPE	5054:1	5054:1	5	int
TYPE_NAME	5054:1	5054:1	6	int
LEAF_NODE	5054:1	5054:1	7	int
NAME	5054:5	5054:5	5	buflen
LEAF_NODE	5054:5	5054:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	5054:5	5054:5	5	buflen = 0
ASSIGN	5054:5	5054:12	6	buflen = 0
LVAL	5054:5	5054:5	7	buflen
NAME	5054:5	5054:5	8	buflen
LEAF_NODE	5054:5	5054:5	9	buflen
ASSIGN_OP	5054:11	5054:11	7	=
LEAF_NODE	5054:11	5054:11	8	=
RVAL	5054:12	5054:12	7	0
FIELD	5054:12	5054:12	8	0
LEAF_NODE	5054:12	5054:12	9	0
LEAF_NODE	5054:13	5054:13	4	;
EXPR_STATEMENT	5055:1	5055:8	3	( void ) i ;
EXPR	5055:1	5055:7	4	( void ) i
LEAF_NODE	5055:1	5055:1	5	(
TYPE_NAME	5055:2	5055:2	5	void
LEAF_NODE	5055:2	5055:2	6	void
LEAF_NODE	5055:6	5055:6	5	)
FIELD	5055:7	5055:7	5	i
LEAF_NODE	5055:7	5055:7	6	i
LEAF_NODE	5055:8	5055:8	4	;
EXPR_STATEMENT	5057:1	5057:68	3	written += t2pWriteFile ( output , ( tdata_t ) "/FunctionType 0 \n" , 17 ) ;
EXPR	5057:1	5057:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/FunctionType 0 \n" , 17 )
ASSIGN	5057:1	5057:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/FunctionType 0 \n" , 17 )
LVAL	5057:1	5057:1	6	written
FIELD	5057:1	5057:1	7	written
LEAF_NODE	5057:1	5057:1	8	written
ASSIGN_OP	5057:9	5057:9	6	+=
LEAF_NODE	5057:9	5057:9	7	+=
RVAL	5057:12	5057:12	6	t2pWriteFile ( output , ( tdata_t ) "/FunctionType 0 \n" , 17 )
FUNCTION_CALL	5057:12	5057:67	7	t2pWriteFile ( output , ( tdata_t ) "/FunctionType 0 \n" , 17 )
CALLEE	5057:12	5057:12	8	t2pWriteFile
LEAF_NODE	5057:12	5057:12	9	t2pWriteFile
LEAF_NODE	5057:24	5057:24	8	(
ARGUMENT	5057:25	5057:25	8	output
FIELD	5057:25	5057:25	9	output
LEAF_NODE	5057:25	5057:25	10	output
LEAF_NODE	5057:31	5057:31	8	,
ARGUMENT	5057:33	5057:43	8	( tdata_t ) "/FunctionType 0 \n"
LEAF_NODE	5057:33	5057:33	9	(
TYPE_NAME	5057:34	5057:34	9	tdata_t
LEAF_NODE	5057:34	5057:34	10	tdata_t
LEAF_NODE	5057:41	5057:41	9	)
FIELD	5057:43	5057:43	9	"/FunctionType 0 \n"
LEAF_NODE	5057:43	5057:43	10	"/FunctionType 0 \n"
LEAF_NODE	5057:63	5057:63	8	,
ARGUMENT	5057:65	5057:65	8	17
FIELD	5057:65	5057:65	9	17
LEAF_NODE	5057:65	5057:65	10	17
LEAF_NODE	5057:67	5057:67	8	)
LEAF_NODE	5057:68	5057:68	4	;
EXPR_STATEMENT	5058:1	5058:70	3	written += t2pWriteFile ( output , ( tdata_t ) "/Domain [0.0 1.0] \n" , 19 ) ;
EXPR	5058:1	5058:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/Domain [0.0 1.0] \n" , 19 )
ASSIGN	5058:1	5058:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/Domain [0.0 1.0] \n" , 19 )
LVAL	5058:1	5058:1	6	written
FIELD	5058:1	5058:1	7	written
LEAF_NODE	5058:1	5058:1	8	written
ASSIGN_OP	5058:9	5058:9	6	+=
LEAF_NODE	5058:9	5058:9	7	+=
RVAL	5058:12	5058:12	6	t2pWriteFile ( output , ( tdata_t ) "/Domain [0.0 1.0] \n" , 19 )
FUNCTION_CALL	5058:12	5058:69	7	t2pWriteFile ( output , ( tdata_t ) "/Domain [0.0 1.0] \n" , 19 )
CALLEE	5058:12	5058:12	8	t2pWriteFile
LEAF_NODE	5058:12	5058:12	9	t2pWriteFile
LEAF_NODE	5058:24	5058:24	8	(
ARGUMENT	5058:25	5058:25	8	output
FIELD	5058:25	5058:25	9	output
LEAF_NODE	5058:25	5058:25	10	output
LEAF_NODE	5058:31	5058:31	8	,
ARGUMENT	5058:33	5058:43	8	( tdata_t ) "/Domain [0.0 1.0] \n"
LEAF_NODE	5058:33	5058:33	9	(
TYPE_NAME	5058:34	5058:34	9	tdata_t
LEAF_NODE	5058:34	5058:34	10	tdata_t
LEAF_NODE	5058:41	5058:41	9	)
FIELD	5058:43	5058:43	9	"/Domain [0.0 1.0] \n"
LEAF_NODE	5058:43	5058:43	10	"/Domain [0.0 1.0] \n"
LEAF_NODE	5058:65	5058:65	8	,
ARGUMENT	5058:67	5058:67	8	19
FIELD	5058:67	5058:67	9	19
LEAF_NODE	5058:67	5058:67	10	19
LEAF_NODE	5058:69	5058:69	8	)
LEAF_NODE	5058:70	5058:70	4	;
EXPR_STATEMENT	5059:1	5059:69	3	written += t2pWriteFile ( output , ( tdata_t ) "/Range [0.0 1.0] \n" , 18 ) ;
EXPR	5059:1	5059:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/Range [0.0 1.0] \n" , 18 )
ASSIGN	5059:1	5059:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/Range [0.0 1.0] \n" , 18 )
LVAL	5059:1	5059:1	6	written
FIELD	5059:1	5059:1	7	written
LEAF_NODE	5059:1	5059:1	8	written
ASSIGN_OP	5059:9	5059:9	6	+=
LEAF_NODE	5059:9	5059:9	7	+=
RVAL	5059:12	5059:12	6	t2pWriteFile ( output , ( tdata_t ) "/Range [0.0 1.0] \n" , 18 )
FUNCTION_CALL	5059:12	5059:68	7	t2pWriteFile ( output , ( tdata_t ) "/Range [0.0 1.0] \n" , 18 )
CALLEE	5059:12	5059:12	8	t2pWriteFile
LEAF_NODE	5059:12	5059:12	9	t2pWriteFile
LEAF_NODE	5059:24	5059:24	8	(
ARGUMENT	5059:25	5059:25	8	output
FIELD	5059:25	5059:25	9	output
LEAF_NODE	5059:25	5059:25	10	output
LEAF_NODE	5059:31	5059:31	8	,
ARGUMENT	5059:33	5059:43	8	( tdata_t ) "/Range [0.0 1.0] \n"
LEAF_NODE	5059:33	5059:33	9	(
TYPE_NAME	5059:34	5059:34	9	tdata_t
LEAF_NODE	5059:34	5059:34	10	tdata_t
LEAF_NODE	5059:41	5059:41	9	)
FIELD	5059:43	5059:43	9	"/Range [0.0 1.0] \n"
LEAF_NODE	5059:43	5059:43	10	"/Range [0.0 1.0] \n"
LEAF_NODE	5059:64	5059:64	8	,
ARGUMENT	5059:66	5059:66	8	18
FIELD	5059:66	5059:66	9	18
LEAF_NODE	5059:66	5059:66	10	18
LEAF_NODE	5059:68	5059:68	8	)
LEAF_NODE	5059:69	5059:69	4	;
EXPR_STATEMENT	5060:1	5060:87	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "/Size [%u] \n" , ( 1 << t2p -> tiff_bitspersample ) ) ;
EXPR	5060:1	5060:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "/Size [%u] \n" , ( 1 << t2p -> tiff_bitspersample ) )
ASSIGN	5060:1	5060:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "/Size [%u] \n" , ( 1 << t2p -> tiff_bitspersample ) )
LVAL	5060:1	5060:1	6	buflen
FIELD	5060:1	5060:1	7	buflen
LEAF_NODE	5060:1	5060:1	8	buflen
ASSIGN_OP	5060:7	5060:7	6	=
LEAF_NODE	5060:7	5060:7	7	=
RVAL	5060:8	5060:8	6	snprintf ( buffer , sizeof ( buffer ) , "/Size [%u] \n" , ( 1 << t2p -> tiff_bitspersample ) )
FUNCTION_CALL	5060:8	5060:86	7	snprintf ( buffer , sizeof ( buffer ) , "/Size [%u] \n" , ( 1 << t2p -> tiff_bitspersample ) )
CALLEE	5060:8	5060:8	8	snprintf
LEAF_NODE	5060:8	5060:8	9	snprintf
LEAF_NODE	5060:16	5060:16	8	(
ARGUMENT	5060:17	5060:17	8	buffer
FIELD	5060:17	5060:17	9	buffer
LEAF_NODE	5060:17	5060:17	10	buffer
LEAF_NODE	5060:23	5060:23	8	,
ARGUMENT	5060:25	5060:25	8	sizeof ( buffer )
FUNCTION_CALL	5060:25	5060:38	9	sizeof ( buffer )
CALLEE	5060:25	5060:25	10	sizeof
LEAF_NODE	5060:25	5060:25	11	sizeof
LEAF_NODE	5060:31	5060:31	10	(
ARGUMENT	5060:32	5060:32	10	buffer
FIELD	5060:32	5060:32	11	buffer
LEAF_NODE	5060:32	5060:32	12	buffer
LEAF_NODE	5060:38	5060:38	10	)
LEAF_NODE	5060:39	5060:39	8	,
ARGUMENT	5060:41	5060:41	8	"/Size [%u] \n"
FIELD	5060:41	5060:41	9	"/Size [%u] \n"
LEAF_NODE	5060:41	5060:41	10	"/Size [%u] \n"
LEAF_NODE	5060:56	5060:56	8	,
ARGUMENT	5060:58	5060:85	8	( 1 << t2p -> tiff_bitspersample )
LEAF_NODE	5060:58	5060:58	9	(
FIELD	5060:59	5060:59	9	1
LEAF_NODE	5060:59	5060:59	10	1
LEAF_NODE	5060:60	5060:60	9	<<
FIELD	5060:62	5060:67	9	t2p -> tiff_bitspersample
LEAF_NODE	5060:62	5060:62	10	t2p
LEAF_NODE	5060:65	5060:65	10	->
LEAF_NODE	5060:67	5060:67	10	tiff_bitspersample
LEAF_NODE	5060:85	5060:85	9	)
LEAF_NODE	5060:86	5060:86	8	)
LEAF_NODE	5060:87	5060:87	4	;
EXPR_STATEMENT	5061:1	5061:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5061:1	5061:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5061:1	5061:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5061:1	5061:1	6	check_snprintf_ret
LEAF_NODE	5061:1	5061:1	7	check_snprintf_ret
LEAF_NODE	5061:19	5061:19	6	(
ARGUMENT	5061:20	5061:20	6	t2p
FIELD	5061:20	5061:20	7	t2p
LEAF_NODE	5061:20	5061:20	8	t2p
LEAF_NODE	5061:23	5061:23	6	,
ARGUMENT	5061:25	5061:25	6	buflen
FIELD	5061:25	5061:25	7	buflen
LEAF_NODE	5061:25	5061:25	8	buflen
LEAF_NODE	5061:31	5061:31	6	,
ARGUMENT	5061:33	5061:33	6	buffer
FIELD	5061:33	5061:33	7	buffer
LEAF_NODE	5061:33	5061:33	8	buffer
LEAF_NODE	5061:39	5061:39	6	)
LEAF_NODE	5061:40	5061:40	4	;
EXPR_STATEMENT	5062:1	5062:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5062:1	5062:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5062:1	5062:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5062:1	5062:1	6	written
FIELD	5062:1	5062:1	7	written
LEAF_NODE	5062:1	5062:1	8	written
ASSIGN_OP	5062:9	5062:9	6	+=
LEAF_NODE	5062:9	5062:9	7	+=
RVAL	5062:12	5062:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5062:12	5062:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5062:12	5062:12	8	t2pWriteFile
LEAF_NODE	5062:12	5062:12	9	t2pWriteFile
LEAF_NODE	5062:24	5062:24	8	(
ARGUMENT	5062:25	5062:25	8	output
FIELD	5062:25	5062:25	9	output
LEAF_NODE	5062:25	5062:25	10	output
LEAF_NODE	5062:31	5062:31	8	,
ARGUMENT	5062:33	5062:43	8	( tdata_t ) buffer
LEAF_NODE	5062:33	5062:33	9	(
TYPE_NAME	5062:34	5062:34	9	tdata_t
LEAF_NODE	5062:34	5062:34	10	tdata_t
LEAF_NODE	5062:41	5062:41	9	)
FIELD	5062:43	5062:43	9	buffer
LEAF_NODE	5062:43	5062:43	10	buffer
LEAF_NODE	5062:49	5062:49	8	,
ARGUMENT	5062:51	5062:51	8	buflen
FIELD	5062:51	5062:51	9	buflen
LEAF_NODE	5062:51	5062:51	10	buflen
LEAF_NODE	5062:57	5062:57	8	)
LEAF_NODE	5062:58	5062:58	4	;
EXPR_STATEMENT	5063:1	5063:70	3	written += t2pWriteFile ( output , ( tdata_t ) "/BitsPerSample 16 \n" , 19 ) ;
EXPR	5063:1	5063:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/BitsPerSample 16 \n" , 19 )
ASSIGN	5063:1	5063:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/BitsPerSample 16 \n" , 19 )
LVAL	5063:1	5063:1	6	written
FIELD	5063:1	5063:1	7	written
LEAF_NODE	5063:1	5063:1	8	written
ASSIGN_OP	5063:9	5063:9	6	+=
LEAF_NODE	5063:9	5063:9	7	+=
RVAL	5063:12	5063:12	6	t2pWriteFile ( output , ( tdata_t ) "/BitsPerSample 16 \n" , 19 )
FUNCTION_CALL	5063:12	5063:69	7	t2pWriteFile ( output , ( tdata_t ) "/BitsPerSample 16 \n" , 19 )
CALLEE	5063:12	5063:12	8	t2pWriteFile
LEAF_NODE	5063:12	5063:12	9	t2pWriteFile
LEAF_NODE	5063:24	5063:24	8	(
ARGUMENT	5063:25	5063:25	8	output
FIELD	5063:25	5063:25	9	output
LEAF_NODE	5063:25	5063:25	10	output
LEAF_NODE	5063:31	5063:31	8	,
ARGUMENT	5063:33	5063:43	8	( tdata_t ) "/BitsPerSample 16 \n"
LEAF_NODE	5063:33	5063:33	9	(
TYPE_NAME	5063:34	5063:34	9	tdata_t
LEAF_NODE	5063:34	5063:34	10	tdata_t
LEAF_NODE	5063:41	5063:41	9	)
FIELD	5063:43	5063:43	9	"/BitsPerSample 16 \n"
LEAF_NODE	5063:43	5063:43	10	"/BitsPerSample 16 \n"
LEAF_NODE	5063:65	5063:65	8	,
ARGUMENT	5063:67	5063:67	8	19
FIELD	5063:67	5063:67	9	19
LEAF_NODE	5063:67	5063:67	10	19
LEAF_NODE	5063:69	5063:69	8	)
LEAF_NODE	5063:70	5063:70	4	;
EXPR_STATEMENT	5064:1	5064:91	3	written += t2p_write_pdf_stream_dict ( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) , 0 , output ) ;
EXPR	5064:1	5064:1	4	written += t2p_write_pdf_stream_dict ( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) , 0 , output )
ASSIGN	5064:1	5064:12	5	written += t2p_write_pdf_stream_dict ( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) , 0 , output )
LVAL	5064:1	5064:1	6	written
FIELD	5064:1	5064:1	7	written
LEAF_NODE	5064:1	5064:1	8	written
ASSIGN_OP	5064:9	5064:9	6	+=
LEAF_NODE	5064:9	5064:9	7	+=
RVAL	5064:12	5064:12	6	t2p_write_pdf_stream_dict ( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) , 0 , output )
FUNCTION_CALL	5064:12	5064:90	7	t2p_write_pdf_stream_dict ( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) , 0 , output )
CALLEE	5064:12	5064:12	8	t2p_write_pdf_stream_dict
LEAF_NODE	5064:12	5064:12	9	t2p_write_pdf_stream_dict
LEAF_NODE	5064:37	5064:37	8	(
ARGUMENT	5064:38	5064:78	8	( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 )
LEAF_NODE	5064:38	5064:38	9	(
LEAF_NODE	5064:39	5064:39	9	(
TYPE_NAME	5064:40	5064:40	9	tsize_t
LEAF_NODE	5064:40	5064:40	10	tsize_t
LEAF_NODE	5064:47	5064:47	9	)
FIELD	5064:48	5064:48	9	1
LEAF_NODE	5064:48	5064:48	10	1
LEAF_NODE	5064:49	5064:49	9	)
LEAF_NODE	5064:50	5064:50	9	<<
LEAF_NODE	5064:52	5064:52	9	(
FIELD	5064:53	5064:58	9	t2p -> tiff_bitspersample
LEAF_NODE	5064:53	5064:53	10	t2p
LEAF_NODE	5064:56	5064:56	10	->
LEAF_NODE	5064:58	5064:58	10	tiff_bitspersample
LEAF_NODE	5064:76	5064:76	9	+
FIELD	5064:77	5064:77	9	1
LEAF_NODE	5064:77	5064:77	10	1
LEAF_NODE	5064:78	5064:78	9	)
LEAF_NODE	5064:79	5064:79	8	,
ARGUMENT	5064:81	5064:81	8	0
FIELD	5064:81	5064:81	9	0
LEAF_NODE	5064:81	5064:81	10	0
LEAF_NODE	5064:82	5064:82	8	,
ARGUMENT	5064:84	5064:84	8	output
FIELD	5064:84	5064:84	9	output
LEAF_NODE	5064:84	5064:84	10	output
LEAF_NODE	5064:90	5064:90	8	)
LEAF_NODE	5064:91	5064:91	4	;
LEAF_NODE	5066:1	5066:1	3	return
LEAF_NODE	5066:7	5066:7	3	(
LEAF_NODE	5066:8	5066:8	3	written
LEAF_NODE	5066:15	5066:15	3	)
LEAF_NODE	5066:16	5066:16	3	;
LEAF_NODE	5067:0	5067:0	2	}
FUNCTION_DEF	5069:0	5079:0	1	
RETURN_TYPE	5069:0	5069:0	2	tsize_t
TYPE_NAME	5069:0	5069:0	3	tsize_t
LEAF_NODE	5069:0	5069:0	4	tsize_t
FUNCTION_NAME	5069:8	5069:8	2	t2p_write_pdf_transfer_stream
LEAF_NODE	5069:8	5069:8	3	t2p_write_pdf_transfer_stream
PARAMETER_LIST	5069:37	5069:70	2	( T2P * t2p , TIFF * output , uint16 i )
LEAF_NODE	5069:37	5069:37	3	(
PARAMETER_DECL	5069:38	5069:43	3	T2P * t2p
TYPE	5069:38	5069:41	4	T2P *
TYPE_NAME	5069:38	5069:38	5	T2P
LEAF_NODE	5069:38	5069:38	6	T2P
POINTER	5069:41	5069:41	5	*
LEAF_NODE	5069:41	5069:41	6	*
NAME	5069:43	5069:43	4	t2p
LEAF_NODE	5069:43	5069:43	5	t2p
LEAF_NODE	5069:46	5069:46	3	,
PARAMETER_DECL	5069:48	5069:54	3	TIFF * output
TYPE	5069:48	5069:52	4	TIFF *
TYPE_NAME	5069:48	5069:48	5	TIFF
LEAF_NODE	5069:48	5069:48	6	TIFF
POINTER	5069:52	5069:52	5	*
LEAF_NODE	5069:52	5069:52	6	*
NAME	5069:54	5069:54	4	output
LEAF_NODE	5069:54	5069:54	5	output
LEAF_NODE	5069:60	5069:60	3	,
PARAMETER_DECL	5069:62	5069:69	3	uint16 i
TYPE	5069:62	5069:62	4	uint16
TYPE_NAME	5069:62	5069:62	5	uint16
LEAF_NODE	5069:62	5069:62	6	uint16
NAME	5069:69	5069:69	4	i
LEAF_NODE	5069:69	5069:69	5	i
LEAF_NODE	5069:70	5069:70	3	)
LEAF_NODE	5069:71	5069:71	2	{
STATEMENTS	5071:1	5078:16	2	
SIMPLE_DECL	5071:1	5071:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5071:1	5071:9	4	tsize_t written ; written = 0
TYPE	5071:1	5071:1	5	tsize_t
TYPE_NAME	5071:1	5071:1	6	tsize_t
LEAF_NODE	5071:1	5071:1	7	tsize_t
NAME	5071:9	5071:9	5	written
LEAF_NODE	5071:9	5071:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5071:9	5071:9	5	written = 0
ASSIGN	5071:9	5071:17	6	written = 0
LVAL	5071:9	5071:9	7	written
NAME	5071:9	5071:9	8	written
LEAF_NODE	5071:9	5071:9	9	written
ASSIGN_OP	5071:16	5071:16	7	=
LEAF_NODE	5071:16	5071:16	8	=
RVAL	5071:17	5071:17	7	0
FIELD	5071:17	5071:17	8	0
LEAF_NODE	5071:17	5071:17	9	0
LEAF_NODE	5071:18	5071:18	4	;
EXPR_STATEMENT	5073:1	5076:9	3	written += t2p_write_pdf_stream ( t2p -> tiff_transferfunction [ i ] , ( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) ) , output ) ;
EXPR	5073:1	5073:1	4	written += t2p_write_pdf_stream ( t2p -> tiff_transferfunction [ i ] , ( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) ) , output )
ASSIGN	5073:1	5073:12	5	written += t2p_write_pdf_stream ( t2p -> tiff_transferfunction [ i ] , ( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) ) , output )
LVAL	5073:1	5073:1	6	written
FIELD	5073:1	5073:1	7	written
LEAF_NODE	5073:1	5073:1	8	written
ASSIGN_OP	5073:9	5073:9	6	+=
LEAF_NODE	5073:9	5073:9	7	+=
RVAL	5073:12	5073:12	6	t2p_write_pdf_stream ( t2p -> tiff_transferfunction [ i ] , ( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) ) , output )
FUNCTION_CALL	5073:12	5076:8	7	t2p_write_pdf_stream ( t2p -> tiff_transferfunction [ i ] , ( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) ) , output )
CALLEE	5073:12	5073:12	8	t2p_write_pdf_stream
LEAF_NODE	5073:12	5073:12	9	t2p_write_pdf_stream
LEAF_NODE	5073:32	5073:32	8	(
ARGUMENT	5074:2	5074:2	8	t2p -> tiff_transferfunction [ i ]
FIELD	5074:2	5074:30	9	t2p -> tiff_transferfunction [ i ]
LEAF_NODE	5074:2	5074:2	10	t2p
LEAF_NODE	5074:5	5074:5	10	->
LEAF_NODE	5074:7	5074:7	10	tiff_transferfunction
LEAF_NODE	5074:28	5074:28	10	[
EXPR	5074:29	5074:29	10	i
FIELD	5074:29	5074:29	11	i
LEAF_NODE	5074:29	5074:29	12	i
LEAF_NODE	5074:30	5074:30	10	]
LEAF_NODE	5074:31	5074:31	8	,
ARGUMENT	5075:2	5075:44	8	( ( ( tsize_t ) 1 ) << ( t2p -> tiff_bitspersample + 1 ) )
LEAF_NODE	5075:2	5075:2	9	(
LEAF_NODE	5075:3	5075:3	9	(
LEAF_NODE	5075:4	5075:4	9	(
TYPE_NAME	5075:5	5075:5	9	tsize_t
LEAF_NODE	5075:5	5075:5	10	tsize_t
LEAF_NODE	5075:12	5075:12	9	)
FIELD	5075:13	5075:13	9	1
LEAF_NODE	5075:13	5075:13	10	1
LEAF_NODE	5075:14	5075:14	9	)
LEAF_NODE	5075:15	5075:15	9	<<
LEAF_NODE	5075:17	5075:17	9	(
FIELD	5075:18	5075:23	9	t2p -> tiff_bitspersample
LEAF_NODE	5075:18	5075:18	10	t2p
LEAF_NODE	5075:21	5075:21	10	->
LEAF_NODE	5075:23	5075:23	10	tiff_bitspersample
LEAF_NODE	5075:41	5075:41	9	+
FIELD	5075:42	5075:42	9	1
LEAF_NODE	5075:42	5075:42	10	1
LEAF_NODE	5075:43	5075:43	9	)
LEAF_NODE	5075:44	5075:44	9	)
LEAF_NODE	5075:45	5075:45	8	,
ARGUMENT	5076:2	5076:2	8	output
FIELD	5076:2	5076:2	9	output
LEAF_NODE	5076:2	5076:2	10	output
LEAF_NODE	5076:8	5076:8	8	)
LEAF_NODE	5076:9	5076:9	4	;
LEAF_NODE	5078:1	5078:1	3	return
LEAF_NODE	5078:7	5078:7	3	(
LEAF_NODE	5078:8	5078:8	3	written
LEAF_NODE	5078:15	5078:15	3	)
LEAF_NODE	5078:16	5078:16	3	;
LEAF_NODE	5079:0	5079:0	2	}
FUNCTION_DEF	5085:0	5178:0	1	
RETURN_TYPE	5085:0	5085:0	2	tsize_t
TYPE_NAME	5085:0	5085:0	3	tsize_t
LEAF_NODE	5085:0	5085:0	4	tsize_t
FUNCTION_NAME	5085:8	5085:8	2	t2p_write_pdf_xobject_calcs
LEAF_NODE	5085:8	5085:8	3	t2p_write_pdf_xobject_calcs
PARAMETER_LIST	5085:35	5085:58	2	( T2P * t2p , TIFF * output )
LEAF_NODE	5085:35	5085:35	3	(
PARAMETER_DECL	5085:36	5085:41	3	T2P * t2p
TYPE	5085:36	5085:39	4	T2P *
TYPE_NAME	5085:36	5085:36	5	T2P
LEAF_NODE	5085:36	5085:36	6	T2P
POINTER	5085:39	5085:39	5	*
LEAF_NODE	5085:39	5085:39	6	*
NAME	5085:41	5085:41	4	t2p
LEAF_NODE	5085:41	5085:41	5	t2p
LEAF_NODE	5085:44	5085:44	3	,
PARAMETER_DECL	5085:46	5085:52	3	TIFF * output
TYPE	5085:46	5085:50	4	TIFF *
TYPE_NAME	5085:46	5085:46	5	TIFF
LEAF_NODE	5085:46	5085:46	6	TIFF
POINTER	5085:50	5085:50	5	*
LEAF_NODE	5085:50	5085:50	6	*
NAME	5085:52	5085:52	4	output
LEAF_NODE	5085:52	5085:52	5	output
LEAF_NODE	5085:58	5085:58	3	)
LEAF_NODE	5085:59	5085:59	2	{
STATEMENTS	5087:1	5177:16	2	
SIMPLE_DECL	5087:1	5087:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5087:1	5087:9	4	tsize_t written ; written = 0
TYPE	5087:1	5087:1	5	tsize_t
TYPE_NAME	5087:1	5087:1	6	tsize_t
LEAF_NODE	5087:1	5087:1	7	tsize_t
NAME	5087:9	5087:9	5	written
LEAF_NODE	5087:9	5087:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5087:9	5087:9	5	written = 0
ASSIGN	5087:9	5087:17	6	written = 0
LVAL	5087:9	5087:9	7	written
NAME	5087:9	5087:9	8	written
LEAF_NODE	5087:9	5087:9	9	written
ASSIGN_OP	5087:16	5087:16	7	=
LEAF_NODE	5087:16	5087:16	8	=
RVAL	5087:17	5087:17	7	0
FIELD	5087:17	5087:17	8	0
LEAF_NODE	5087:17	5087:17	9	0
LEAF_NODE	5087:18	5087:18	4	;
SIMPLE_DECL	5088:1	5088:17	3	char [ 256 ] buffer ;
VAR_DECL	5088:1	5088:6	4	char [ 256 ] buffer
TYPE	5088:1	5088:12	5	char [ 256 ]
TYPE_NAME	5088:1	5088:1	6	char
LEAF_NODE	5088:1	5088:1	7	char
TYPE_SUFFIX	5088:12	5088:16	6	[ 256 ]
LEAF_NODE	5088:12	5088:12	7	[
FIELD	5088:13	5088:13	7	256
LEAF_NODE	5088:13	5088:13	8	256
LEAF_NODE	5088:16	5088:16	7	]
NAME	5088:6	5088:6	5	buffer
LEAF_NODE	5088:6	5088:6	6	buffer
LEAF_NODE	5088:17	5088:17	4	;
SIMPLE_DECL	5089:1	5089:13	3	int buflen ; buflen = 0 ;
VAR_DECL	5089:1	5089:5	4	int buflen ; buflen = 0
TYPE	5089:1	5089:1	5	int
TYPE_NAME	5089:1	5089:1	6	int
LEAF_NODE	5089:1	5089:1	7	int
NAME	5089:5	5089:5	5	buflen
LEAF_NODE	5089:5	5089:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	5089:5	5089:5	5	buflen = 0
ASSIGN	5089:5	5089:12	6	buflen = 0
LVAL	5089:5	5089:5	7	buflen
NAME	5089:5	5089:5	8	buflen
LEAF_NODE	5089:5	5089:5	9	buflen
ASSIGN_OP	5089:11	5089:11	7	=
LEAF_NODE	5089:11	5089:11	8	=
RVAL	5089:12	5089:12	7	0
FIELD	5089:12	5089:12	8	0
LEAF_NODE	5089:12	5089:12	9	0
LEAF_NODE	5089:13	5089:13	4	;
SIMPLE_DECL	5091:1	5091:14	3	float X_W ; X_W = 0.0 ;
VAR_DECL	5091:1	5091:7	4	float X_W ; X_W = 0.0
TYPE	5091:1	5091:1	5	float
TYPE_NAME	5091:1	5091:1	6	float
LEAF_NODE	5091:1	5091:1	7	float
NAME	5091:7	5091:7	5	X_W
LEAF_NODE	5091:7	5091:7	6	X_W
LEAF_NODE	0:0	0:0	5	;
INIT	5091:7	5091:7	5	X_W = 0.0
ASSIGN	5091:7	5091:11	6	X_W = 0.0
LVAL	5091:7	5091:7	7	X_W
NAME	5091:7	5091:7	8	X_W
LEAF_NODE	5091:7	5091:7	9	X_W
ASSIGN_OP	5091:10	5091:10	7	=
LEAF_NODE	5091:10	5091:10	8	=
RVAL	5091:11	5091:11	7	0.0
FIELD	5091:11	5091:11	8	0.0
LEAF_NODE	5091:11	5091:11	9	0.0
LEAF_NODE	5091:14	5091:14	4	;
SIMPLE_DECL	5092:1	5092:14	3	float Y_W ; Y_W = 0.0 ;
VAR_DECL	5092:1	5092:7	4	float Y_W ; Y_W = 0.0
TYPE	5092:1	5092:1	5	float
TYPE_NAME	5092:1	5092:1	6	float
LEAF_NODE	5092:1	5092:1	7	float
NAME	5092:7	5092:7	5	Y_W
LEAF_NODE	5092:7	5092:7	6	Y_W
LEAF_NODE	0:0	0:0	5	;
INIT	5092:7	5092:7	5	Y_W = 0.0
ASSIGN	5092:7	5092:11	6	Y_W = 0.0
LVAL	5092:7	5092:7	7	Y_W
NAME	5092:7	5092:7	8	Y_W
LEAF_NODE	5092:7	5092:7	9	Y_W
ASSIGN_OP	5092:10	5092:10	7	=
LEAF_NODE	5092:10	5092:10	8	=
RVAL	5092:11	5092:11	7	0.0
FIELD	5092:11	5092:11	8	0.0
LEAF_NODE	5092:11	5092:11	9	0.0
LEAF_NODE	5092:14	5092:14	4	;
SIMPLE_DECL	5093:1	5093:14	3	float Z_W ; Z_W = 0.0 ;
VAR_DECL	5093:1	5093:7	4	float Z_W ; Z_W = 0.0
TYPE	5093:1	5093:1	5	float
TYPE_NAME	5093:1	5093:1	6	float
LEAF_NODE	5093:1	5093:1	7	float
NAME	5093:7	5093:7	5	Z_W
LEAF_NODE	5093:7	5093:7	6	Z_W
LEAF_NODE	0:0	0:0	5	;
INIT	5093:7	5093:7	5	Z_W = 0.0
ASSIGN	5093:7	5093:11	6	Z_W = 0.0
LVAL	5093:7	5093:7	7	Z_W
NAME	5093:7	5093:7	8	Z_W
LEAF_NODE	5093:7	5093:7	9	Z_W
ASSIGN_OP	5093:10	5093:10	7	=
LEAF_NODE	5093:10	5093:10	8	=
RVAL	5093:11	5093:11	7	0.0
FIELD	5093:11	5093:11	8	0.0
LEAF_NODE	5093:11	5093:11	9	0.0
LEAF_NODE	5093:14	5093:14	4	;
SIMPLE_DECL	5094:1	5094:14	3	float X_R ; X_R = 0.0 ;
VAR_DECL	5094:1	5094:7	4	float X_R ; X_R = 0.0
TYPE	5094:1	5094:1	5	float
TYPE_NAME	5094:1	5094:1	6	float
LEAF_NODE	5094:1	5094:1	7	float
NAME	5094:7	5094:7	5	X_R
LEAF_NODE	5094:7	5094:7	6	X_R
LEAF_NODE	0:0	0:0	5	;
INIT	5094:7	5094:7	5	X_R = 0.0
ASSIGN	5094:7	5094:11	6	X_R = 0.0
LVAL	5094:7	5094:7	7	X_R
NAME	5094:7	5094:7	8	X_R
LEAF_NODE	5094:7	5094:7	9	X_R
ASSIGN_OP	5094:10	5094:10	7	=
LEAF_NODE	5094:10	5094:10	8	=
RVAL	5094:11	5094:11	7	0.0
FIELD	5094:11	5094:11	8	0.0
LEAF_NODE	5094:11	5094:11	9	0.0
LEAF_NODE	5094:14	5094:14	4	;
SIMPLE_DECL	5095:1	5095:14	3	float Y_R ; Y_R = 0.0 ;
VAR_DECL	5095:1	5095:7	4	float Y_R ; Y_R = 0.0
TYPE	5095:1	5095:1	5	float
TYPE_NAME	5095:1	5095:1	6	float
LEAF_NODE	5095:1	5095:1	7	float
NAME	5095:7	5095:7	5	Y_R
LEAF_NODE	5095:7	5095:7	6	Y_R
LEAF_NODE	0:0	0:0	5	;
INIT	5095:7	5095:7	5	Y_R = 0.0
ASSIGN	5095:7	5095:11	6	Y_R = 0.0
LVAL	5095:7	5095:7	7	Y_R
NAME	5095:7	5095:7	8	Y_R
LEAF_NODE	5095:7	5095:7	9	Y_R
ASSIGN_OP	5095:10	5095:10	7	=
LEAF_NODE	5095:10	5095:10	8	=
RVAL	5095:11	5095:11	7	0.0
FIELD	5095:11	5095:11	8	0.0
LEAF_NODE	5095:11	5095:11	9	0.0
LEAF_NODE	5095:14	5095:14	4	;
SIMPLE_DECL	5096:1	5096:14	3	float Z_R ; Z_R = 0.0 ;
VAR_DECL	5096:1	5096:7	4	float Z_R ; Z_R = 0.0
TYPE	5096:1	5096:1	5	float
TYPE_NAME	5096:1	5096:1	6	float
LEAF_NODE	5096:1	5096:1	7	float
NAME	5096:7	5096:7	5	Z_R
LEAF_NODE	5096:7	5096:7	6	Z_R
LEAF_NODE	0:0	0:0	5	;
INIT	5096:7	5096:7	5	Z_R = 0.0
ASSIGN	5096:7	5096:11	6	Z_R = 0.0
LVAL	5096:7	5096:7	7	Z_R
NAME	5096:7	5096:7	8	Z_R
LEAF_NODE	5096:7	5096:7	9	Z_R
ASSIGN_OP	5096:10	5096:10	7	=
LEAF_NODE	5096:10	5096:10	8	=
RVAL	5096:11	5096:11	7	0.0
FIELD	5096:11	5096:11	8	0.0
LEAF_NODE	5096:11	5096:11	9	0.0
LEAF_NODE	5096:14	5096:14	4	;
SIMPLE_DECL	5097:1	5097:14	3	float X_G ; X_G = 0.0 ;
VAR_DECL	5097:1	5097:7	4	float X_G ; X_G = 0.0
TYPE	5097:1	5097:1	5	float
TYPE_NAME	5097:1	5097:1	6	float
LEAF_NODE	5097:1	5097:1	7	float
NAME	5097:7	5097:7	5	X_G
LEAF_NODE	5097:7	5097:7	6	X_G
LEAF_NODE	0:0	0:0	5	;
INIT	5097:7	5097:7	5	X_G = 0.0
ASSIGN	5097:7	5097:11	6	X_G = 0.0
LVAL	5097:7	5097:7	7	X_G
NAME	5097:7	5097:7	8	X_G
LEAF_NODE	5097:7	5097:7	9	X_G
ASSIGN_OP	5097:10	5097:10	7	=
LEAF_NODE	5097:10	5097:10	8	=
RVAL	5097:11	5097:11	7	0.0
FIELD	5097:11	5097:11	8	0.0
LEAF_NODE	5097:11	5097:11	9	0.0
LEAF_NODE	5097:14	5097:14	4	;
SIMPLE_DECL	5098:1	5098:14	3	float Y_G ; Y_G = 0.0 ;
VAR_DECL	5098:1	5098:7	4	float Y_G ; Y_G = 0.0
TYPE	5098:1	5098:1	5	float
TYPE_NAME	5098:1	5098:1	6	float
LEAF_NODE	5098:1	5098:1	7	float
NAME	5098:7	5098:7	5	Y_G
LEAF_NODE	5098:7	5098:7	6	Y_G
LEAF_NODE	0:0	0:0	5	;
INIT	5098:7	5098:7	5	Y_G = 0.0
ASSIGN	5098:7	5098:11	6	Y_G = 0.0
LVAL	5098:7	5098:7	7	Y_G
NAME	5098:7	5098:7	8	Y_G
LEAF_NODE	5098:7	5098:7	9	Y_G
ASSIGN_OP	5098:10	5098:10	7	=
LEAF_NODE	5098:10	5098:10	8	=
RVAL	5098:11	5098:11	7	0.0
FIELD	5098:11	5098:11	8	0.0
LEAF_NODE	5098:11	5098:11	9	0.0
LEAF_NODE	5098:14	5098:14	4	;
SIMPLE_DECL	5099:1	5099:14	3	float Z_G ; Z_G = 0.0 ;
VAR_DECL	5099:1	5099:7	4	float Z_G ; Z_G = 0.0
TYPE	5099:1	5099:1	5	float
TYPE_NAME	5099:1	5099:1	6	float
LEAF_NODE	5099:1	5099:1	7	float
NAME	5099:7	5099:7	5	Z_G
LEAF_NODE	5099:7	5099:7	6	Z_G
LEAF_NODE	0:0	0:0	5	;
INIT	5099:7	5099:7	5	Z_G = 0.0
ASSIGN	5099:7	5099:11	6	Z_G = 0.0
LVAL	5099:7	5099:7	7	Z_G
NAME	5099:7	5099:7	8	Z_G
LEAF_NODE	5099:7	5099:7	9	Z_G
ASSIGN_OP	5099:10	5099:10	7	=
LEAF_NODE	5099:10	5099:10	8	=
RVAL	5099:11	5099:11	7	0.0
FIELD	5099:11	5099:11	8	0.0
LEAF_NODE	5099:11	5099:11	9	0.0
LEAF_NODE	5099:14	5099:14	4	;
SIMPLE_DECL	5100:1	5100:14	3	float X_B ; X_B = 0.0 ;
VAR_DECL	5100:1	5100:7	4	float X_B ; X_B = 0.0
TYPE	5100:1	5100:1	5	float
TYPE_NAME	5100:1	5100:1	6	float
LEAF_NODE	5100:1	5100:1	7	float
NAME	5100:7	5100:7	5	X_B
LEAF_NODE	5100:7	5100:7	6	X_B
LEAF_NODE	0:0	0:0	5	;
INIT	5100:7	5100:7	5	X_B = 0.0
ASSIGN	5100:7	5100:11	6	X_B = 0.0
LVAL	5100:7	5100:7	7	X_B
NAME	5100:7	5100:7	8	X_B
LEAF_NODE	5100:7	5100:7	9	X_B
ASSIGN_OP	5100:10	5100:10	7	=
LEAF_NODE	5100:10	5100:10	8	=
RVAL	5100:11	5100:11	7	0.0
FIELD	5100:11	5100:11	8	0.0
LEAF_NODE	5100:11	5100:11	9	0.0
LEAF_NODE	5100:14	5100:14	4	;
SIMPLE_DECL	5101:1	5101:14	3	float Y_B ; Y_B = 0.0 ;
VAR_DECL	5101:1	5101:7	4	float Y_B ; Y_B = 0.0
TYPE	5101:1	5101:1	5	float
TYPE_NAME	5101:1	5101:1	6	float
LEAF_NODE	5101:1	5101:1	7	float
NAME	5101:7	5101:7	5	Y_B
LEAF_NODE	5101:7	5101:7	6	Y_B
LEAF_NODE	0:0	0:0	5	;
INIT	5101:7	5101:7	5	Y_B = 0.0
ASSIGN	5101:7	5101:11	6	Y_B = 0.0
LVAL	5101:7	5101:7	7	Y_B
NAME	5101:7	5101:7	8	Y_B
LEAF_NODE	5101:7	5101:7	9	Y_B
ASSIGN_OP	5101:10	5101:10	7	=
LEAF_NODE	5101:10	5101:10	8	=
RVAL	5101:11	5101:11	7	0.0
FIELD	5101:11	5101:11	8	0.0
LEAF_NODE	5101:11	5101:11	9	0.0
LEAF_NODE	5101:14	5101:14	4	;
SIMPLE_DECL	5102:1	5102:14	3	float Z_B ; Z_B = 0.0 ;
VAR_DECL	5102:1	5102:7	4	float Z_B ; Z_B = 0.0
TYPE	5102:1	5102:1	5	float
TYPE_NAME	5102:1	5102:1	6	float
LEAF_NODE	5102:1	5102:1	7	float
NAME	5102:7	5102:7	5	Z_B
LEAF_NODE	5102:7	5102:7	6	Z_B
LEAF_NODE	0:0	0:0	5	;
INIT	5102:7	5102:7	5	Z_B = 0.0
ASSIGN	5102:7	5102:11	6	Z_B = 0.0
LVAL	5102:7	5102:7	7	Z_B
NAME	5102:7	5102:7	8	Z_B
LEAF_NODE	5102:7	5102:7	9	Z_B
ASSIGN_OP	5102:10	5102:10	7	=
LEAF_NODE	5102:10	5102:10	8	=
RVAL	5102:11	5102:11	7	0.0
FIELD	5102:11	5102:11	8	0.0
LEAF_NODE	5102:11	5102:11	9	0.0
LEAF_NODE	5102:14	5102:14	4	;
SIMPLE_DECL	5103:1	5103:14	3	float x_w ; x_w = 0.0 ;
VAR_DECL	5103:1	5103:7	4	float x_w ; x_w = 0.0
TYPE	5103:1	5103:1	5	float
TYPE_NAME	5103:1	5103:1	6	float
LEAF_NODE	5103:1	5103:1	7	float
NAME	5103:7	5103:7	5	x_w
LEAF_NODE	5103:7	5103:7	6	x_w
LEAF_NODE	0:0	0:0	5	;
INIT	5103:7	5103:7	5	x_w = 0.0
ASSIGN	5103:7	5103:11	6	x_w = 0.0
LVAL	5103:7	5103:7	7	x_w
NAME	5103:7	5103:7	8	x_w
LEAF_NODE	5103:7	5103:7	9	x_w
ASSIGN_OP	5103:10	5103:10	7	=
LEAF_NODE	5103:10	5103:10	8	=
RVAL	5103:11	5103:11	7	0.0
FIELD	5103:11	5103:11	8	0.0
LEAF_NODE	5103:11	5103:11	9	0.0
LEAF_NODE	5103:14	5103:14	4	;
SIMPLE_DECL	5104:1	5104:14	3	float y_w ; y_w = 0.0 ;
VAR_DECL	5104:1	5104:7	4	float y_w ; y_w = 0.0
TYPE	5104:1	5104:1	5	float
TYPE_NAME	5104:1	5104:1	6	float
LEAF_NODE	5104:1	5104:1	7	float
NAME	5104:7	5104:7	5	y_w
LEAF_NODE	5104:7	5104:7	6	y_w
LEAF_NODE	0:0	0:0	5	;
INIT	5104:7	5104:7	5	y_w = 0.0
ASSIGN	5104:7	5104:11	6	y_w = 0.0
LVAL	5104:7	5104:7	7	y_w
NAME	5104:7	5104:7	8	y_w
LEAF_NODE	5104:7	5104:7	9	y_w
ASSIGN_OP	5104:10	5104:10	7	=
LEAF_NODE	5104:10	5104:10	8	=
RVAL	5104:11	5104:11	7	0.0
FIELD	5104:11	5104:11	8	0.0
LEAF_NODE	5104:11	5104:11	9	0.0
LEAF_NODE	5104:14	5104:14	4	;
SIMPLE_DECL	5105:1	5105:14	3	float z_w ; z_w = 0.0 ;
VAR_DECL	5105:1	5105:7	4	float z_w ; z_w = 0.0
TYPE	5105:1	5105:1	5	float
TYPE_NAME	5105:1	5105:1	6	float
LEAF_NODE	5105:1	5105:1	7	float
NAME	5105:7	5105:7	5	z_w
LEAF_NODE	5105:7	5105:7	6	z_w
LEAF_NODE	0:0	0:0	5	;
INIT	5105:7	5105:7	5	z_w = 0.0
ASSIGN	5105:7	5105:11	6	z_w = 0.0
LVAL	5105:7	5105:7	7	z_w
NAME	5105:7	5105:7	8	z_w
LEAF_NODE	5105:7	5105:7	9	z_w
ASSIGN_OP	5105:10	5105:10	7	=
LEAF_NODE	5105:10	5105:10	8	=
RVAL	5105:11	5105:11	7	0.0
FIELD	5105:11	5105:11	8	0.0
LEAF_NODE	5105:11	5105:11	9	0.0
LEAF_NODE	5105:14	5105:14	4	;
SIMPLE_DECL	5106:1	5106:14	3	float x_r ; x_r = 0.0 ;
VAR_DECL	5106:1	5106:7	4	float x_r ; x_r = 0.0
TYPE	5106:1	5106:1	5	float
TYPE_NAME	5106:1	5106:1	6	float
LEAF_NODE	5106:1	5106:1	7	float
NAME	5106:7	5106:7	5	x_r
LEAF_NODE	5106:7	5106:7	6	x_r
LEAF_NODE	0:0	0:0	5	;
INIT	5106:7	5106:7	5	x_r = 0.0
ASSIGN	5106:7	5106:11	6	x_r = 0.0
LVAL	5106:7	5106:7	7	x_r
NAME	5106:7	5106:7	8	x_r
LEAF_NODE	5106:7	5106:7	9	x_r
ASSIGN_OP	5106:10	5106:10	7	=
LEAF_NODE	5106:10	5106:10	8	=
RVAL	5106:11	5106:11	7	0.0
FIELD	5106:11	5106:11	8	0.0
LEAF_NODE	5106:11	5106:11	9	0.0
LEAF_NODE	5106:14	5106:14	4	;
SIMPLE_DECL	5107:1	5107:14	3	float y_r ; y_r = 0.0 ;
VAR_DECL	5107:1	5107:7	4	float y_r ; y_r = 0.0
TYPE	5107:1	5107:1	5	float
TYPE_NAME	5107:1	5107:1	6	float
LEAF_NODE	5107:1	5107:1	7	float
NAME	5107:7	5107:7	5	y_r
LEAF_NODE	5107:7	5107:7	6	y_r
LEAF_NODE	0:0	0:0	5	;
INIT	5107:7	5107:7	5	y_r = 0.0
ASSIGN	5107:7	5107:11	6	y_r = 0.0
LVAL	5107:7	5107:7	7	y_r
NAME	5107:7	5107:7	8	y_r
LEAF_NODE	5107:7	5107:7	9	y_r
ASSIGN_OP	5107:10	5107:10	7	=
LEAF_NODE	5107:10	5107:10	8	=
RVAL	5107:11	5107:11	7	0.0
FIELD	5107:11	5107:11	8	0.0
LEAF_NODE	5107:11	5107:11	9	0.0
LEAF_NODE	5107:14	5107:14	4	;
SIMPLE_DECL	5108:1	5108:14	3	float x_g ; x_g = 0.0 ;
VAR_DECL	5108:1	5108:7	4	float x_g ; x_g = 0.0
TYPE	5108:1	5108:1	5	float
TYPE_NAME	5108:1	5108:1	6	float
LEAF_NODE	5108:1	5108:1	7	float
NAME	5108:7	5108:7	5	x_g
LEAF_NODE	5108:7	5108:7	6	x_g
LEAF_NODE	0:0	0:0	5	;
INIT	5108:7	5108:7	5	x_g = 0.0
ASSIGN	5108:7	5108:11	6	x_g = 0.0
LVAL	5108:7	5108:7	7	x_g
NAME	5108:7	5108:7	8	x_g
LEAF_NODE	5108:7	5108:7	9	x_g
ASSIGN_OP	5108:10	5108:10	7	=
LEAF_NODE	5108:10	5108:10	8	=
RVAL	5108:11	5108:11	7	0.0
FIELD	5108:11	5108:11	8	0.0
LEAF_NODE	5108:11	5108:11	9	0.0
LEAF_NODE	5108:14	5108:14	4	;
SIMPLE_DECL	5109:1	5109:14	3	float y_g ; y_g = 0.0 ;
VAR_DECL	5109:1	5109:7	4	float y_g ; y_g = 0.0
TYPE	5109:1	5109:1	5	float
TYPE_NAME	5109:1	5109:1	6	float
LEAF_NODE	5109:1	5109:1	7	float
NAME	5109:7	5109:7	5	y_g
LEAF_NODE	5109:7	5109:7	6	y_g
LEAF_NODE	0:0	0:0	5	;
INIT	5109:7	5109:7	5	y_g = 0.0
ASSIGN	5109:7	5109:11	6	y_g = 0.0
LVAL	5109:7	5109:7	7	y_g
NAME	5109:7	5109:7	8	y_g
LEAF_NODE	5109:7	5109:7	9	y_g
ASSIGN_OP	5109:10	5109:10	7	=
LEAF_NODE	5109:10	5109:10	8	=
RVAL	5109:11	5109:11	7	0.0
FIELD	5109:11	5109:11	8	0.0
LEAF_NODE	5109:11	5109:11	9	0.0
LEAF_NODE	5109:14	5109:14	4	;
SIMPLE_DECL	5110:1	5110:14	3	float x_b ; x_b = 0.0 ;
VAR_DECL	5110:1	5110:7	4	float x_b ; x_b = 0.0
TYPE	5110:1	5110:1	5	float
TYPE_NAME	5110:1	5110:1	6	float
LEAF_NODE	5110:1	5110:1	7	float
NAME	5110:7	5110:7	5	x_b
LEAF_NODE	5110:7	5110:7	6	x_b
LEAF_NODE	0:0	0:0	5	;
INIT	5110:7	5110:7	5	x_b = 0.0
ASSIGN	5110:7	5110:11	6	x_b = 0.0
LVAL	5110:7	5110:7	7	x_b
NAME	5110:7	5110:7	8	x_b
LEAF_NODE	5110:7	5110:7	9	x_b
ASSIGN_OP	5110:10	5110:10	7	=
LEAF_NODE	5110:10	5110:10	8	=
RVAL	5110:11	5110:11	7	0.0
FIELD	5110:11	5110:11	8	0.0
LEAF_NODE	5110:11	5110:11	9	0.0
LEAF_NODE	5110:14	5110:14	4	;
SIMPLE_DECL	5111:1	5111:14	3	float y_b ; y_b = 0.0 ;
VAR_DECL	5111:1	5111:7	4	float y_b ; y_b = 0.0
TYPE	5111:1	5111:1	5	float
TYPE_NAME	5111:1	5111:1	6	float
LEAF_NODE	5111:1	5111:1	7	float
NAME	5111:7	5111:7	5	y_b
LEAF_NODE	5111:7	5111:7	6	y_b
LEAF_NODE	0:0	0:0	5	;
INIT	5111:7	5111:7	5	y_b = 0.0
ASSIGN	5111:7	5111:11	6	y_b = 0.0
LVAL	5111:7	5111:7	7	y_b
NAME	5111:7	5111:7	8	y_b
LEAF_NODE	5111:7	5111:7	9	y_b
ASSIGN_OP	5111:10	5111:10	7	=
LEAF_NODE	5111:10	5111:10	8	=
RVAL	5111:11	5111:11	7	0.0
FIELD	5111:11	5111:11	8	0.0
LEAF_NODE	5111:11	5111:11	9	0.0
LEAF_NODE	5111:14	5111:14	4	;
SIMPLE_DECL	5112:1	5112:12	3	float R ; R = 1.0 ;
VAR_DECL	5112:1	5112:7	4	float R ; R = 1.0
TYPE	5112:1	5112:1	5	float
TYPE_NAME	5112:1	5112:1	6	float
LEAF_NODE	5112:1	5112:1	7	float
NAME	5112:7	5112:7	5	R
LEAF_NODE	5112:7	5112:7	6	R
LEAF_NODE	0:0	0:0	5	;
INIT	5112:7	5112:7	5	R = 1.0
ASSIGN	5112:7	5112:9	6	R = 1.0
LVAL	5112:7	5112:7	7	R
NAME	5112:7	5112:7	8	R
LEAF_NODE	5112:7	5112:7	9	R
ASSIGN_OP	5112:8	5112:8	7	=
LEAF_NODE	5112:8	5112:8	8	=
RVAL	5112:9	5112:9	7	1.0
FIELD	5112:9	5112:9	8	1.0
LEAF_NODE	5112:9	5112:9	9	1.0
LEAF_NODE	5112:12	5112:12	4	;
SIMPLE_DECL	5113:1	5113:12	3	float G ; G = 1.0 ;
VAR_DECL	5113:1	5113:7	4	float G ; G = 1.0
TYPE	5113:1	5113:1	5	float
TYPE_NAME	5113:1	5113:1	6	float
LEAF_NODE	5113:1	5113:1	7	float
NAME	5113:7	5113:7	5	G
LEAF_NODE	5113:7	5113:7	6	G
LEAF_NODE	0:0	0:0	5	;
INIT	5113:7	5113:7	5	G = 1.0
ASSIGN	5113:7	5113:9	6	G = 1.0
LVAL	5113:7	5113:7	7	G
NAME	5113:7	5113:7	8	G
LEAF_NODE	5113:7	5113:7	9	G
ASSIGN_OP	5113:8	5113:8	7	=
LEAF_NODE	5113:8	5113:8	8	=
RVAL	5113:9	5113:9	7	1.0
FIELD	5113:9	5113:9	8	1.0
LEAF_NODE	5113:9	5113:9	9	1.0
LEAF_NODE	5113:12	5113:12	4	;
SIMPLE_DECL	5114:1	5114:12	3	float B ; B = 1.0 ;
VAR_DECL	5114:1	5114:7	4	float B ; B = 1.0
TYPE	5114:1	5114:1	5	float
TYPE_NAME	5114:1	5114:1	6	float
LEAF_NODE	5114:1	5114:1	7	float
NAME	5114:7	5114:7	5	B
LEAF_NODE	5114:7	5114:7	6	B
LEAF_NODE	0:0	0:0	5	;
INIT	5114:7	5114:7	5	B = 1.0
ASSIGN	5114:7	5114:9	6	B = 1.0
LVAL	5114:7	5114:7	7	B
NAME	5114:7	5114:7	8	B
LEAF_NODE	5114:7	5114:7	9	B
ASSIGN_OP	5114:8	5114:8	7	=
LEAF_NODE	5114:8	5114:8	8	=
RVAL	5114:9	5114:9	7	1.0
FIELD	5114:9	5114:9	8	1.0
LEAF_NODE	5114:9	5114:9	9	1.0
LEAF_NODE	5114:12	5114:12	4	;
EXPR_STATEMENT	5116:1	5116:50	3	written += t2pWriteFile ( output , ( tdata_t ) "[" , 1 ) ;
EXPR	5116:1	5116:1	4	written += t2pWriteFile ( output , ( tdata_t ) "[" , 1 )
ASSIGN	5116:1	5116:12	5	written += t2pWriteFile ( output , ( tdata_t ) "[" , 1 )
LVAL	5116:1	5116:1	6	written
FIELD	5116:1	5116:1	7	written
LEAF_NODE	5116:1	5116:1	8	written
ASSIGN_OP	5116:9	5116:9	6	+=
LEAF_NODE	5116:9	5116:9	7	+=
RVAL	5116:12	5116:12	6	t2pWriteFile ( output , ( tdata_t ) "[" , 1 )
FUNCTION_CALL	5116:12	5116:49	7	t2pWriteFile ( output , ( tdata_t ) "[" , 1 )
CALLEE	5116:12	5116:12	8	t2pWriteFile
LEAF_NODE	5116:12	5116:12	9	t2pWriteFile
LEAF_NODE	5116:24	5116:24	8	(
ARGUMENT	5116:25	5116:25	8	output
FIELD	5116:25	5116:25	9	output
LEAF_NODE	5116:25	5116:25	10	output
LEAF_NODE	5116:31	5116:31	8	,
ARGUMENT	5116:33	5116:43	8	( tdata_t ) "["
LEAF_NODE	5116:33	5116:33	9	(
TYPE_NAME	5116:34	5116:34	9	tdata_t
LEAF_NODE	5116:34	5116:34	10	tdata_t
LEAF_NODE	5116:41	5116:41	9	)
FIELD	5116:43	5116:43	9	"["
LEAF_NODE	5116:43	5116:43	10	"["
LEAF_NODE	5116:46	5116:46	8	,
ARGUMENT	5116:48	5116:48	8	1
FIELD	5116:48	5116:48	9	1
LEAF_NODE	5116:48	5116:48	10	1
LEAF_NODE	5116:49	5116:49	8	)
LEAF_NODE	5116:50	5116:50	4	;
SELECTION	5117:1	5117:41	3	
KEYWORD	5117:1	5117:1	4	if
LEAF_NODE	5117:1	5117:1	5	if
LEAF_NODE	5117:3	5117:3	4	(
CONDITION	5117:4	5117:4	4	t2p -> pdf_colorspace & T2P_CS_CALGRAY
EXPR	5117:4	5117:26	5	t2p -> pdf_colorspace & T2P_CS_CALGRAY
FIELD	5117:4	5117:9	6	t2p -> pdf_colorspace
LEAF_NODE	5117:4	5117:4	7	t2p
LEAF_NODE	5117:7	5117:7	7	->
LEAF_NODE	5117:9	5117:9	7	pdf_colorspace
LEAF_NODE	5117:24	5117:24	6	&
FIELD	5117:26	5117:26	6	T2P_CS_CALGRAY
LEAF_NODE	5117:26	5117:26	7	T2P_CS_CALGRAY
LEAF_NODE	5117:40	5117:40	4	)
STATEMENTS	5117:41	5125:1	4	
LEAF_NODE	5117:41	5117:41	5	{
STATEMENTS	5118:2	5124:2	5	
EXPR_STATEMENT	5118:2	5118:59	6	written += t2pWriteFile ( output , ( tdata_t ) "/CalGray " , 9 ) ;
EXPR	5118:2	5118:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/CalGray " , 9 )
ASSIGN	5118:2	5118:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/CalGray " , 9 )
LVAL	5118:2	5118:2	9	written
FIELD	5118:2	5118:2	10	written
LEAF_NODE	5118:2	5118:2	11	written
ASSIGN_OP	5118:10	5118:10	9	+=
LEAF_NODE	5118:10	5118:10	10	+=
RVAL	5118:13	5118:13	9	t2pWriteFile ( output , ( tdata_t ) "/CalGray " , 9 )
FUNCTION_CALL	5118:13	5118:58	10	t2pWriteFile ( output , ( tdata_t ) "/CalGray " , 9 )
CALLEE	5118:13	5118:13	11	t2pWriteFile
LEAF_NODE	5118:13	5118:13	12	t2pWriteFile
LEAF_NODE	5118:25	5118:25	11	(
ARGUMENT	5118:26	5118:26	11	output
FIELD	5118:26	5118:26	12	output
LEAF_NODE	5118:26	5118:26	13	output
LEAF_NODE	5118:32	5118:32	11	,
ARGUMENT	5118:34	5118:44	11	( tdata_t ) "/CalGray "
LEAF_NODE	5118:34	5118:34	12	(
TYPE_NAME	5118:35	5118:35	12	tdata_t
LEAF_NODE	5118:35	5118:35	13	tdata_t
LEAF_NODE	5118:42	5118:42	12	)
FIELD	5118:44	5118:44	12	"/CalGray "
LEAF_NODE	5118:44	5118:44	13	"/CalGray "
LEAF_NODE	5118:55	5118:55	11	,
ARGUMENT	5118:57	5118:57	11	9
FIELD	5118:57	5118:57	12	9
LEAF_NODE	5118:57	5118:57	13	9
LEAF_NODE	5118:58	5118:58	11	)
LEAF_NODE	5118:59	5118:59	7	;
EXPR_STATEMENT	5119:2	5119:40	6	X_W = t2p -> tiff_whitechromaticities [ 0 ] ;
EXPR	5119:2	5119:2	7	X_W = t2p -> tiff_whitechromaticities [ 0 ]
ASSIGN	5119:2	5119:8	8	X_W = t2p -> tiff_whitechromaticities [ 0 ]
LVAL	5119:2	5119:2	9	X_W
FIELD	5119:2	5119:2	10	X_W
LEAF_NODE	5119:2	5119:2	11	X_W
ASSIGN_OP	5119:6	5119:6	9	=
LEAF_NODE	5119:6	5119:6	10	=
RVAL	5119:8	5119:8	9	t2p -> tiff_whitechromaticities [ 0 ]
FIELD	5119:8	5119:39	10	t2p -> tiff_whitechromaticities [ 0 ]
LEAF_NODE	5119:8	5119:8	11	t2p
LEAF_NODE	5119:11	5119:11	11	->
LEAF_NODE	5119:13	5119:13	11	tiff_whitechromaticities
LEAF_NODE	5119:37	5119:37	11	[
EXPR	5119:38	5119:38	11	0
FIELD	5119:38	5119:38	12	0
LEAF_NODE	5119:38	5119:38	13	0
LEAF_NODE	5119:39	5119:39	11	]
LEAF_NODE	5119:40	5119:40	7	;
EXPR_STATEMENT	5120:2	5120:40	6	Y_W = t2p -> tiff_whitechromaticities [ 1 ] ;
EXPR	5120:2	5120:2	7	Y_W = t2p -> tiff_whitechromaticities [ 1 ]
ASSIGN	5120:2	5120:8	8	Y_W = t2p -> tiff_whitechromaticities [ 1 ]
LVAL	5120:2	5120:2	9	Y_W
FIELD	5120:2	5120:2	10	Y_W
LEAF_NODE	5120:2	5120:2	11	Y_W
ASSIGN_OP	5120:6	5120:6	9	=
LEAF_NODE	5120:6	5120:6	10	=
RVAL	5120:8	5120:8	9	t2p -> tiff_whitechromaticities [ 1 ]
FIELD	5120:8	5120:39	10	t2p -> tiff_whitechromaticities [ 1 ]
LEAF_NODE	5120:8	5120:8	11	t2p
LEAF_NODE	5120:11	5120:11	11	->
LEAF_NODE	5120:13	5120:13	11	tiff_whitechromaticities
LEAF_NODE	5120:37	5120:37	11	[
EXPR	5120:38	5120:38	11	1
FIELD	5120:38	5120:38	12	1
LEAF_NODE	5120:38	5120:38	13	1
LEAF_NODE	5120:39	5120:39	11	]
LEAF_NODE	5120:40	5120:40	7	;
EXPR_STATEMENT	5121:2	5121:26	6	Z_W = 1.0F - ( X_W + Y_W ) ;
EXPR	5121:2	5121:2	7	Z_W = 1.0F - ( X_W + Y_W )
ASSIGN	5121:2	5121:8	8	Z_W = 1.0F - ( X_W + Y_W )
LVAL	5121:2	5121:2	9	Z_W
FIELD	5121:2	5121:2	10	Z_W
LEAF_NODE	5121:2	5121:2	11	Z_W
ASSIGN_OP	5121:6	5121:6	9	=
LEAF_NODE	5121:6	5121:6	10	=
RVAL	5121:8	5121:25	9	1.0F - ( X_W + Y_W )
FIELD	5121:8	5121:8	10	1.0F
LEAF_NODE	5121:8	5121:8	11	1.0F
LEAF_NODE	5121:13	5121:13	10	-
LEAF_NODE	5121:15	5121:15	10	(
FIELD	5121:16	5121:16	10	X_W
LEAF_NODE	5121:16	5121:16	11	X_W
LEAF_NODE	5121:20	5121:20	10	+
FIELD	5121:22	5121:22	10	Y_W
LEAF_NODE	5121:22	5121:22	11	Y_W
LEAF_NODE	5121:25	5121:25	10	)
LEAF_NODE	5121:26	5121:26	7	;
EXPR_STATEMENT	5122:2	5122:12	6	X_W /= Y_W ;
EXPR	5122:2	5122:2	7	X_W /= Y_W
ASSIGN	5122:2	5122:9	8	X_W /= Y_W
LVAL	5122:2	5122:2	9	X_W
FIELD	5122:2	5122:2	10	X_W
LEAF_NODE	5122:2	5122:2	11	X_W
ASSIGN_OP	5122:6	5122:6	9	/=
LEAF_NODE	5122:6	5122:6	10	/=
RVAL	5122:9	5122:9	9	Y_W
FIELD	5122:9	5122:9	10	Y_W
LEAF_NODE	5122:9	5122:9	11	Y_W
LEAF_NODE	5122:12	5122:12	7	;
EXPR_STATEMENT	5123:2	5123:12	6	Z_W /= Y_W ;
EXPR	5123:2	5123:2	7	Z_W /= Y_W
ASSIGN	5123:2	5123:9	8	Z_W /= Y_W
LVAL	5123:2	5123:2	9	Z_W
FIELD	5123:2	5123:2	10	Z_W
LEAF_NODE	5123:2	5123:2	11	Z_W
ASSIGN_OP	5123:6	5123:6	9	/=
LEAF_NODE	5123:6	5123:6	10	/=
RVAL	5123:9	5123:9	9	Y_W
FIELD	5123:9	5123:9	10	Y_W
LEAF_NODE	5123:9	5123:9	11	Y_W
LEAF_NODE	5123:12	5123:12	7	;
EXPR_STATEMENT	5124:2	5124:12	6	Y_W = 1.0F ;
EXPR	5124:2	5124:2	7	Y_W = 1.0F
ASSIGN	5124:2	5124:8	8	Y_W = 1.0F
LVAL	5124:2	5124:2	9	Y_W
FIELD	5124:2	5124:2	10	Y_W
LEAF_NODE	5124:2	5124:2	11	Y_W
ASSIGN_OP	5124:6	5124:6	9	=
LEAF_NODE	5124:6	5124:6	10	=
RVAL	5124:8	5124:8	9	1.0F
FIELD	5124:8	5124:8	10	1.0F
LEAF_NODE	5124:8	5124:8	11	1.0F
LEAF_NODE	5124:12	5124:12	7	;
LEAF_NODE	5125:1	5125:1	5	}
SELECTION	5126:1	5126:40	3	
KEYWORD	5126:1	5126:1	4	if
LEAF_NODE	5126:1	5126:1	5	if
LEAF_NODE	5126:3	5126:3	4	(
CONDITION	5126:4	5126:4	4	t2p -> pdf_colorspace & T2P_CS_CALRGB
EXPR	5126:4	5126:26	5	t2p -> pdf_colorspace & T2P_CS_CALRGB
FIELD	5126:4	5126:9	6	t2p -> pdf_colorspace
LEAF_NODE	5126:4	5126:4	7	t2p
LEAF_NODE	5126:7	5126:7	7	->
LEAF_NODE	5126:9	5126:9	7	pdf_colorspace
LEAF_NODE	5126:24	5126:24	6	&
FIELD	5126:26	5126:26	6	T2P_CS_CALRGB
LEAF_NODE	5126:26	5126:26	7	T2P_CS_CALRGB
LEAF_NODE	5126:39	5126:39	4	)
STATEMENTS	5126:40	5152:1	4	
LEAF_NODE	5126:40	5126:40	5	{
STATEMENTS	5127:2	5151:2	5	
EXPR_STATEMENT	5127:2	5127:58	6	written += t2pWriteFile ( output , ( tdata_t ) "/CalRGB " , 8 ) ;
EXPR	5127:2	5127:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/CalRGB " , 8 )
ASSIGN	5127:2	5127:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/CalRGB " , 8 )
LVAL	5127:2	5127:2	9	written
FIELD	5127:2	5127:2	10	written
LEAF_NODE	5127:2	5127:2	11	written
ASSIGN_OP	5127:10	5127:10	9	+=
LEAF_NODE	5127:10	5127:10	10	+=
RVAL	5127:13	5127:13	9	t2pWriteFile ( output , ( tdata_t ) "/CalRGB " , 8 )
FUNCTION_CALL	5127:13	5127:57	10	t2pWriteFile ( output , ( tdata_t ) "/CalRGB " , 8 )
CALLEE	5127:13	5127:13	11	t2pWriteFile
LEAF_NODE	5127:13	5127:13	12	t2pWriteFile
LEAF_NODE	5127:25	5127:25	11	(
ARGUMENT	5127:26	5127:26	11	output
FIELD	5127:26	5127:26	12	output
LEAF_NODE	5127:26	5127:26	13	output
LEAF_NODE	5127:32	5127:32	11	,
ARGUMENT	5127:34	5127:44	11	( tdata_t ) "/CalRGB "
LEAF_NODE	5127:34	5127:34	12	(
TYPE_NAME	5127:35	5127:35	12	tdata_t
LEAF_NODE	5127:35	5127:35	13	tdata_t
LEAF_NODE	5127:42	5127:42	12	)
FIELD	5127:44	5127:44	12	"/CalRGB "
LEAF_NODE	5127:44	5127:44	13	"/CalRGB "
LEAF_NODE	5127:54	5127:54	11	,
ARGUMENT	5127:56	5127:56	11	8
FIELD	5127:56	5127:56	12	8
LEAF_NODE	5127:56	5127:56	13	8
LEAF_NODE	5127:57	5127:57	11	)
LEAF_NODE	5127:58	5127:58	7	;
EXPR_STATEMENT	5128:2	5128:40	6	x_w = t2p -> tiff_whitechromaticities [ 0 ] ;
EXPR	5128:2	5128:2	7	x_w = t2p -> tiff_whitechromaticities [ 0 ]
ASSIGN	5128:2	5128:8	8	x_w = t2p -> tiff_whitechromaticities [ 0 ]
LVAL	5128:2	5128:2	9	x_w
FIELD	5128:2	5128:2	10	x_w
LEAF_NODE	5128:2	5128:2	11	x_w
ASSIGN_OP	5128:6	5128:6	9	=
LEAF_NODE	5128:6	5128:6	10	=
RVAL	5128:8	5128:8	9	t2p -> tiff_whitechromaticities [ 0 ]
FIELD	5128:8	5128:39	10	t2p -> tiff_whitechromaticities [ 0 ]
LEAF_NODE	5128:8	5128:8	11	t2p
LEAF_NODE	5128:11	5128:11	11	->
LEAF_NODE	5128:13	5128:13	11	tiff_whitechromaticities
LEAF_NODE	5128:37	5128:37	11	[
EXPR	5128:38	5128:38	11	0
FIELD	5128:38	5128:38	12	0
LEAF_NODE	5128:38	5128:38	13	0
LEAF_NODE	5128:39	5128:39	11	]
LEAF_NODE	5128:40	5128:40	7	;
EXPR_STATEMENT	5129:2	5129:40	6	y_w = t2p -> tiff_whitechromaticities [ 1 ] ;
EXPR	5129:2	5129:2	7	y_w = t2p -> tiff_whitechromaticities [ 1 ]
ASSIGN	5129:2	5129:8	8	y_w = t2p -> tiff_whitechromaticities [ 1 ]
LVAL	5129:2	5129:2	9	y_w
FIELD	5129:2	5129:2	10	y_w
LEAF_NODE	5129:2	5129:2	11	y_w
ASSIGN_OP	5129:6	5129:6	9	=
LEAF_NODE	5129:6	5129:6	10	=
RVAL	5129:8	5129:8	9	t2p -> tiff_whitechromaticities [ 1 ]
FIELD	5129:8	5129:39	10	t2p -> tiff_whitechromaticities [ 1 ]
LEAF_NODE	5129:8	5129:8	11	t2p
LEAF_NODE	5129:11	5129:11	11	->
LEAF_NODE	5129:13	5129:13	11	tiff_whitechromaticities
LEAF_NODE	5129:37	5129:37	11	[
EXPR	5129:38	5129:38	11	1
FIELD	5129:38	5129:38	12	1
LEAF_NODE	5129:38	5129:38	13	1
LEAF_NODE	5129:39	5129:39	11	]
LEAF_NODE	5129:40	5129:40	7	;
EXPR_STATEMENT	5130:2	5130:42	6	x_r = t2p -> tiff_primarychromaticities [ 0 ] ;
EXPR	5130:2	5130:2	7	x_r = t2p -> tiff_primarychromaticities [ 0 ]
ASSIGN	5130:2	5130:8	8	x_r = t2p -> tiff_primarychromaticities [ 0 ]
LVAL	5130:2	5130:2	9	x_r
FIELD	5130:2	5130:2	10	x_r
LEAF_NODE	5130:2	5130:2	11	x_r
ASSIGN_OP	5130:6	5130:6	9	=
LEAF_NODE	5130:6	5130:6	10	=
RVAL	5130:8	5130:8	9	t2p -> tiff_primarychromaticities [ 0 ]
FIELD	5130:8	5130:41	10	t2p -> tiff_primarychromaticities [ 0 ]
LEAF_NODE	5130:8	5130:8	11	t2p
LEAF_NODE	5130:11	5130:11	11	->
LEAF_NODE	5130:13	5130:13	11	tiff_primarychromaticities
LEAF_NODE	5130:39	5130:39	11	[
EXPR	5130:40	5130:40	11	0
FIELD	5130:40	5130:40	12	0
LEAF_NODE	5130:40	5130:40	13	0
LEAF_NODE	5130:41	5130:41	11	]
LEAF_NODE	5130:42	5130:42	7	;
EXPR_STATEMENT	5131:2	5131:42	6	y_r = t2p -> tiff_primarychromaticities [ 1 ] ;
EXPR	5131:2	5131:2	7	y_r = t2p -> tiff_primarychromaticities [ 1 ]
ASSIGN	5131:2	5131:8	8	y_r = t2p -> tiff_primarychromaticities [ 1 ]
LVAL	5131:2	5131:2	9	y_r
FIELD	5131:2	5131:2	10	y_r
LEAF_NODE	5131:2	5131:2	11	y_r
ASSIGN_OP	5131:6	5131:6	9	=
LEAF_NODE	5131:6	5131:6	10	=
RVAL	5131:8	5131:8	9	t2p -> tiff_primarychromaticities [ 1 ]
FIELD	5131:8	5131:41	10	t2p -> tiff_primarychromaticities [ 1 ]
LEAF_NODE	5131:8	5131:8	11	t2p
LEAF_NODE	5131:11	5131:11	11	->
LEAF_NODE	5131:13	5131:13	11	tiff_primarychromaticities
LEAF_NODE	5131:39	5131:39	11	[
EXPR	5131:40	5131:40	11	1
FIELD	5131:40	5131:40	12	1
LEAF_NODE	5131:40	5131:40	13	1
LEAF_NODE	5131:41	5131:41	11	]
LEAF_NODE	5131:42	5131:42	7	;
EXPR_STATEMENT	5132:2	5132:42	6	x_g = t2p -> tiff_primarychromaticities [ 2 ] ;
EXPR	5132:2	5132:2	7	x_g = t2p -> tiff_primarychromaticities [ 2 ]
ASSIGN	5132:2	5132:8	8	x_g = t2p -> tiff_primarychromaticities [ 2 ]
LVAL	5132:2	5132:2	9	x_g
FIELD	5132:2	5132:2	10	x_g
LEAF_NODE	5132:2	5132:2	11	x_g
ASSIGN_OP	5132:6	5132:6	9	=
LEAF_NODE	5132:6	5132:6	10	=
RVAL	5132:8	5132:8	9	t2p -> tiff_primarychromaticities [ 2 ]
FIELD	5132:8	5132:41	10	t2p -> tiff_primarychromaticities [ 2 ]
LEAF_NODE	5132:8	5132:8	11	t2p
LEAF_NODE	5132:11	5132:11	11	->
LEAF_NODE	5132:13	5132:13	11	tiff_primarychromaticities
LEAF_NODE	5132:39	5132:39	11	[
EXPR	5132:40	5132:40	11	2
FIELD	5132:40	5132:40	12	2
LEAF_NODE	5132:40	5132:40	13	2
LEAF_NODE	5132:41	5132:41	11	]
LEAF_NODE	5132:42	5132:42	7	;
EXPR_STATEMENT	5133:2	5133:42	6	y_g = t2p -> tiff_primarychromaticities [ 3 ] ;
EXPR	5133:2	5133:2	7	y_g = t2p -> tiff_primarychromaticities [ 3 ]
ASSIGN	5133:2	5133:8	8	y_g = t2p -> tiff_primarychromaticities [ 3 ]
LVAL	5133:2	5133:2	9	y_g
FIELD	5133:2	5133:2	10	y_g
LEAF_NODE	5133:2	5133:2	11	y_g
ASSIGN_OP	5133:6	5133:6	9	=
LEAF_NODE	5133:6	5133:6	10	=
RVAL	5133:8	5133:8	9	t2p -> tiff_primarychromaticities [ 3 ]
FIELD	5133:8	5133:41	10	t2p -> tiff_primarychromaticities [ 3 ]
LEAF_NODE	5133:8	5133:8	11	t2p
LEAF_NODE	5133:11	5133:11	11	->
LEAF_NODE	5133:13	5133:13	11	tiff_primarychromaticities
LEAF_NODE	5133:39	5133:39	11	[
EXPR	5133:40	5133:40	11	3
FIELD	5133:40	5133:40	12	3
LEAF_NODE	5133:40	5133:40	13	3
LEAF_NODE	5133:41	5133:41	11	]
LEAF_NODE	5133:42	5133:42	7	;
EXPR_STATEMENT	5134:2	5134:42	6	x_b = t2p -> tiff_primarychromaticities [ 4 ] ;
EXPR	5134:2	5134:2	7	x_b = t2p -> tiff_primarychromaticities [ 4 ]
ASSIGN	5134:2	5134:8	8	x_b = t2p -> tiff_primarychromaticities [ 4 ]
LVAL	5134:2	5134:2	9	x_b
FIELD	5134:2	5134:2	10	x_b
LEAF_NODE	5134:2	5134:2	11	x_b
ASSIGN_OP	5134:6	5134:6	9	=
LEAF_NODE	5134:6	5134:6	10	=
RVAL	5134:8	5134:8	9	t2p -> tiff_primarychromaticities [ 4 ]
FIELD	5134:8	5134:41	10	t2p -> tiff_primarychromaticities [ 4 ]
LEAF_NODE	5134:8	5134:8	11	t2p
LEAF_NODE	5134:11	5134:11	11	->
LEAF_NODE	5134:13	5134:13	11	tiff_primarychromaticities
LEAF_NODE	5134:39	5134:39	11	[
EXPR	5134:40	5134:40	11	4
FIELD	5134:40	5134:40	12	4
LEAF_NODE	5134:40	5134:40	13	4
LEAF_NODE	5134:41	5134:41	11	]
LEAF_NODE	5134:42	5134:42	7	;
EXPR_STATEMENT	5135:2	5135:42	6	y_b = t2p -> tiff_primarychromaticities [ 5 ] ;
EXPR	5135:2	5135:2	7	y_b = t2p -> tiff_primarychromaticities [ 5 ]
ASSIGN	5135:2	5135:8	8	y_b = t2p -> tiff_primarychromaticities [ 5 ]
LVAL	5135:2	5135:2	9	y_b
FIELD	5135:2	5135:2	10	y_b
LEAF_NODE	5135:2	5135:2	11	y_b
ASSIGN_OP	5135:6	5135:6	9	=
LEAF_NODE	5135:6	5135:6	10	=
RVAL	5135:8	5135:8	9	t2p -> tiff_primarychromaticities [ 5 ]
FIELD	5135:8	5135:41	10	t2p -> tiff_primarychromaticities [ 5 ]
LEAF_NODE	5135:8	5135:8	11	t2p
LEAF_NODE	5135:11	5135:11	11	->
LEAF_NODE	5135:13	5135:13	11	tiff_primarychromaticities
LEAF_NODE	5135:39	5135:39	11	[
EXPR	5135:40	5135:40	11	5
FIELD	5135:40	5135:40	12	5
LEAF_NODE	5135:40	5135:40	13	5
LEAF_NODE	5135:41	5135:41	11	]
LEAF_NODE	5135:42	5135:42	7	;
EXPR_STATEMENT	5136:2	5136:63	6	z_w = y_w * ( ( x_g - x_b ) * y_r - ( x_r - x_b ) * y_g + ( x_r - x_g ) * y_b ) ;
EXPR	5136:2	5136:2	7	z_w = y_w * ( ( x_g - x_b ) * y_r - ( x_r - x_b ) * y_g + ( x_r - x_g ) * y_b )
ASSIGN	5136:2	5136:8	8	z_w = y_w * ( ( x_g - x_b ) * y_r - ( x_r - x_b ) * y_g + ( x_r - x_g ) * y_b )
LVAL	5136:2	5136:2	9	z_w
FIELD	5136:2	5136:2	10	z_w
LEAF_NODE	5136:2	5136:2	11	z_w
ASSIGN_OP	5136:6	5136:6	9	=
LEAF_NODE	5136:6	5136:6	10	=
RVAL	5136:8	5136:62	9	y_w * ( ( x_g - x_b ) * y_r - ( x_r - x_b ) * y_g + ( x_r - x_g ) * y_b )
FIELD	5136:8	5136:8	10	y_w
LEAF_NODE	5136:8	5136:8	11	y_w
LEAF_NODE	5136:12	5136:12	10	*
LEAF_NODE	5136:14	5136:14	10	(
LEAF_NODE	5136:15	5136:15	10	(
FIELD	5136:16	5136:16	10	x_g
LEAF_NODE	5136:16	5136:16	11	x_g
LEAF_NODE	5136:20	5136:20	10	-
FIELD	5136:22	5136:22	10	x_b
LEAF_NODE	5136:22	5136:22	11	x_b
LEAF_NODE	5136:25	5136:25	10	)
LEAF_NODE	5136:26	5136:26	10	*
FIELD	5136:27	5136:27	10	y_r
LEAF_NODE	5136:27	5136:27	11	y_r
LEAF_NODE	5136:31	5136:31	10	-
LEAF_NODE	5136:33	5136:33	10	(
FIELD	5136:34	5136:34	10	x_r
LEAF_NODE	5136:34	5136:34	11	x_r
LEAF_NODE	5136:37	5136:37	10	-
FIELD	5136:38	5136:38	10	x_b
LEAF_NODE	5136:38	5136:38	11	x_b
LEAF_NODE	5136:41	5136:41	10	)
LEAF_NODE	5136:42	5136:42	10	*
FIELD	5136:43	5136:43	10	y_g
LEAF_NODE	5136:43	5136:43	11	y_g
LEAF_NODE	5136:47	5136:47	10	+
LEAF_NODE	5136:49	5136:49	10	(
FIELD	5136:50	5136:50	10	x_r
LEAF_NODE	5136:50	5136:50	11	x_r
LEAF_NODE	5136:53	5136:53	10	-
FIELD	5136:54	5136:54	10	x_g
LEAF_NODE	5136:54	5136:54	11	x_g
LEAF_NODE	5136:57	5136:57	10	)
LEAF_NODE	5136:58	5136:58	10	*
FIELD	5136:59	5136:59	10	y_b
LEAF_NODE	5136:59	5136:59	11	y_b
LEAF_NODE	5136:62	5136:62	10	)
LEAF_NODE	5136:63	5136:63	7	;
LEAF_NODE	5137:2	5137:2	6	Y_R
LEAF_NODE	5137:6	5137:6	6	=
LEAF_NODE	5137:8	5137:8	6	(
LEAF_NODE	5137:9	5137:9	6	y_r
LEAF_NODE	5137:12	5137:12	6	/
LEAF_NODE	5137:13	5137:13	6	R
LEAF_NODE	5137:14	5137:14	6	)
EXPR_STATEMENT	5137:16	5137:71	6	* ( ( x_g - x_b ) * y_w - ( x_w - x_b ) * y_g + ( x_w - x_g ) * y_b ) / z_w ;
EXPR	5137:16	5137:68	7	* ( ( x_g - x_b ) * y_w - ( x_w - x_b ) * y_g + ( x_w - x_g ) * y_b ) / z_w
UNARY_EXPR	5137:16	5137:64	8	* ( ( x_g - x_b ) * y_w - ( x_w - x_b ) * y_g + ( x_w - x_g ) * y_b )
UNARY_OPERATOR	5137:16	5137:16	9	*
LEAF_NODE	5137:16	5137:16	10	*
LEAF_NODE	5137:18	5137:18	9	(
LEAF_NODE	5137:19	5137:19	9	(
FIELD	5137:20	5137:20	9	x_g
LEAF_NODE	5137:20	5137:20	10	x_g
LEAF_NODE	5137:23	5137:23	9	-
FIELD	5137:24	5137:24	9	x_b
LEAF_NODE	5137:24	5137:24	10	x_b
LEAF_NODE	5137:27	5137:27	9	)
LEAF_NODE	5137:28	5137:28	9	*
FIELD	5137:29	5137:29	9	y_w
LEAF_NODE	5137:29	5137:29	10	y_w
LEAF_NODE	5137:33	5137:33	9	-
LEAF_NODE	5137:35	5137:35	9	(
FIELD	5137:36	5137:36	9	x_w
LEAF_NODE	5137:36	5137:36	10	x_w
LEAF_NODE	5137:39	5137:39	9	-
FIELD	5137:40	5137:40	9	x_b
LEAF_NODE	5137:40	5137:40	10	x_b
LEAF_NODE	5137:43	5137:43	9	)
LEAF_NODE	5137:44	5137:44	9	*
FIELD	5137:45	5137:45	9	y_g
LEAF_NODE	5137:45	5137:45	10	y_g
LEAF_NODE	5137:49	5137:49	9	+
LEAF_NODE	5137:51	5137:51	9	(
FIELD	5137:52	5137:52	9	x_w
LEAF_NODE	5137:52	5137:52	10	x_w
LEAF_NODE	5137:55	5137:55	9	-
FIELD	5137:56	5137:56	9	x_g
LEAF_NODE	5137:56	5137:56	10	x_g
LEAF_NODE	5137:59	5137:59	9	)
LEAF_NODE	5137:60	5137:60	9	*
FIELD	5137:61	5137:61	9	y_b
LEAF_NODE	5137:61	5137:61	10	y_b
LEAF_NODE	5137:64	5137:64	9	)
LEAF_NODE	5137:66	5137:66	8	/
FIELD	5137:68	5137:68	8	z_w
LEAF_NODE	5137:68	5137:68	9	z_w
LEAF_NODE	5137:71	5137:71	7	;
LEAF_NODE	5138:2	5138:2	6	X_R
LEAF_NODE	5138:6	5138:6	6	=
LEAF_NODE	5138:8	5138:8	6	Y_R
EXPR_STATEMENT	5138:12	5138:23	6	* x_r / y_r ;
EXPR	5138:12	5138:20	7	* x_r / y_r
UNARY_EXPR	5138:12	5138:14	8	* x_r
UNARY_OPERATOR	5138:12	5138:12	9	*
LEAF_NODE	5138:12	5138:12	10	*
FIELD	5138:14	5138:14	9	x_r
LEAF_NODE	5138:14	5138:14	10	x_r
LEAF_NODE	5138:18	5138:18	8	/
FIELD	5138:20	5138:20	8	y_r
LEAF_NODE	5138:20	5138:20	9	y_r
LEAF_NODE	5138:23	5138:23	7	;
EXPR_STATEMENT	5139:2	5139:31	6	Z_R = Y_R * ( ( ( 1 - x_r ) / y_r ) - 1 ) ;
EXPR	5139:2	5139:2	7	Z_R = Y_R * ( ( ( 1 - x_r ) / y_r ) - 1 )
ASSIGN	5139:2	5139:8	8	Z_R = Y_R * ( ( ( 1 - x_r ) / y_r ) - 1 )
LVAL	5139:2	5139:2	9	Z_R
FIELD	5139:2	5139:2	10	Z_R
LEAF_NODE	5139:2	5139:2	11	Z_R
ASSIGN_OP	5139:6	5139:6	9	=
LEAF_NODE	5139:6	5139:6	10	=
RVAL	5139:8	5139:30	9	Y_R * ( ( ( 1 - x_r ) / y_r ) - 1 )
FIELD	5139:8	5139:8	10	Y_R
LEAF_NODE	5139:8	5139:8	11	Y_R
LEAF_NODE	5139:12	5139:12	10	*
LEAF_NODE	5139:14	5139:14	10	(
LEAF_NODE	5139:15	5139:15	10	(
LEAF_NODE	5139:16	5139:16	10	(
FIELD	5139:17	5139:17	10	1
LEAF_NODE	5139:17	5139:17	11	1
LEAF_NODE	5139:18	5139:18	10	-
FIELD	5139:19	5139:19	10	x_r
LEAF_NODE	5139:19	5139:19	11	x_r
LEAF_NODE	5139:22	5139:22	10	)
LEAF_NODE	5139:23	5139:23	10	/
FIELD	5139:24	5139:24	10	y_r
LEAF_NODE	5139:24	5139:24	11	y_r
LEAF_NODE	5139:27	5139:27	10	)
LEAF_NODE	5139:28	5139:28	10	-
FIELD	5139:29	5139:29	10	1
LEAF_NODE	5139:29	5139:29	11	1
LEAF_NODE	5139:30	5139:30	10	)
LEAF_NODE	5139:31	5139:31	7	;
LEAF_NODE	5140:2	5140:2	6	Y_G
LEAF_NODE	5140:6	5140:6	6	=
LEAF_NODE	5140:8	5140:8	6	(
LEAF_NODE	5140:9	5140:9	6	(
LEAF_NODE	5140:10	5140:10	6	0.0F
LEAF_NODE	5140:14	5140:14	6	-
LEAF_NODE	5140:15	5140:15	6	(
LEAF_NODE	5140:16	5140:16	6	y_g
LEAF_NODE	5140:19	5140:19	6	)
LEAF_NODE	5140:20	5140:20	6	)
LEAF_NODE	5140:21	5140:21	6	/
LEAF_NODE	5140:22	5140:22	6	G
LEAF_NODE	5140:23	5140:23	6	)
EXPR_STATEMENT	5140:25	5140:80	6	* ( ( x_r - x_b ) * y_w - ( x_w - x_b ) * y_r + ( x_w - x_r ) * y_b ) / z_w ;
EXPR	5140:25	5140:77	7	* ( ( x_r - x_b ) * y_w - ( x_w - x_b ) * y_r + ( x_w - x_r ) * y_b ) / z_w
UNARY_EXPR	5140:25	5140:73	8	* ( ( x_r - x_b ) * y_w - ( x_w - x_b ) * y_r + ( x_w - x_r ) * y_b )
UNARY_OPERATOR	5140:25	5140:25	9	*
LEAF_NODE	5140:25	5140:25	10	*
LEAF_NODE	5140:27	5140:27	9	(
LEAF_NODE	5140:28	5140:28	9	(
FIELD	5140:29	5140:29	9	x_r
LEAF_NODE	5140:29	5140:29	10	x_r
LEAF_NODE	5140:32	5140:32	9	-
FIELD	5140:33	5140:33	9	x_b
LEAF_NODE	5140:33	5140:33	10	x_b
LEAF_NODE	5140:36	5140:36	9	)
LEAF_NODE	5140:37	5140:37	9	*
FIELD	5140:38	5140:38	9	y_w
LEAF_NODE	5140:38	5140:38	10	y_w
LEAF_NODE	5140:42	5140:42	9	-
LEAF_NODE	5140:44	5140:44	9	(
FIELD	5140:45	5140:45	9	x_w
LEAF_NODE	5140:45	5140:45	10	x_w
LEAF_NODE	5140:48	5140:48	9	-
FIELD	5140:49	5140:49	9	x_b
LEAF_NODE	5140:49	5140:49	10	x_b
LEAF_NODE	5140:52	5140:52	9	)
LEAF_NODE	5140:53	5140:53	9	*
FIELD	5140:54	5140:54	9	y_r
LEAF_NODE	5140:54	5140:54	10	y_r
LEAF_NODE	5140:58	5140:58	9	+
LEAF_NODE	5140:60	5140:60	9	(
FIELD	5140:61	5140:61	9	x_w
LEAF_NODE	5140:61	5140:61	10	x_w
LEAF_NODE	5140:64	5140:64	9	-
FIELD	5140:65	5140:65	9	x_r
LEAF_NODE	5140:65	5140:65	10	x_r
LEAF_NODE	5140:68	5140:68	9	)
LEAF_NODE	5140:69	5140:69	9	*
FIELD	5140:70	5140:70	9	y_b
LEAF_NODE	5140:70	5140:70	10	y_b
LEAF_NODE	5140:73	5140:73	9	)
LEAF_NODE	5140:75	5140:75	8	/
FIELD	5140:77	5140:77	8	z_w
LEAF_NODE	5140:77	5140:77	9	z_w
LEAF_NODE	5140:80	5140:80	7	;
LEAF_NODE	5141:2	5141:2	6	X_G
LEAF_NODE	5141:6	5141:6	6	=
LEAF_NODE	5141:8	5141:8	6	Y_G
EXPR_STATEMENT	5141:12	5141:23	6	* x_g / y_g ;
EXPR	5141:12	5141:20	7	* x_g / y_g
UNARY_EXPR	5141:12	5141:14	8	* x_g
UNARY_OPERATOR	5141:12	5141:12	9	*
LEAF_NODE	5141:12	5141:12	10	*
FIELD	5141:14	5141:14	9	x_g
LEAF_NODE	5141:14	5141:14	10	x_g
LEAF_NODE	5141:18	5141:18	8	/
FIELD	5141:20	5141:20	8	y_g
LEAF_NODE	5141:20	5141:20	9	y_g
LEAF_NODE	5141:23	5141:23	7	;
EXPR_STATEMENT	5142:2	5142:31	6	Z_G = Y_G * ( ( ( 1 - x_g ) / y_g ) - 1 ) ;
EXPR	5142:2	5142:2	7	Z_G = Y_G * ( ( ( 1 - x_g ) / y_g ) - 1 )
ASSIGN	5142:2	5142:8	8	Z_G = Y_G * ( ( ( 1 - x_g ) / y_g ) - 1 )
LVAL	5142:2	5142:2	9	Z_G
FIELD	5142:2	5142:2	10	Z_G
LEAF_NODE	5142:2	5142:2	11	Z_G
ASSIGN_OP	5142:6	5142:6	9	=
LEAF_NODE	5142:6	5142:6	10	=
RVAL	5142:8	5142:30	9	Y_G * ( ( ( 1 - x_g ) / y_g ) - 1 )
FIELD	5142:8	5142:8	10	Y_G
LEAF_NODE	5142:8	5142:8	11	Y_G
LEAF_NODE	5142:12	5142:12	10	*
LEAF_NODE	5142:14	5142:14	10	(
LEAF_NODE	5142:15	5142:15	10	(
LEAF_NODE	5142:16	5142:16	10	(
FIELD	5142:17	5142:17	10	1
LEAF_NODE	5142:17	5142:17	11	1
LEAF_NODE	5142:18	5142:18	10	-
FIELD	5142:19	5142:19	10	x_g
LEAF_NODE	5142:19	5142:19	11	x_g
LEAF_NODE	5142:22	5142:22	10	)
LEAF_NODE	5142:23	5142:23	10	/
FIELD	5142:24	5142:24	10	y_g
LEAF_NODE	5142:24	5142:24	11	y_g
LEAF_NODE	5142:27	5142:27	10	)
LEAF_NODE	5142:28	5142:28	10	-
FIELD	5142:29	5142:29	10	1
LEAF_NODE	5142:29	5142:29	11	1
LEAF_NODE	5142:30	5142:30	10	)
LEAF_NODE	5142:31	5142:31	7	;
LEAF_NODE	5143:2	5143:2	6	Y_B
LEAF_NODE	5143:6	5143:6	6	=
LEAF_NODE	5143:8	5143:8	6	(
LEAF_NODE	5143:9	5143:9	6	y_b
LEAF_NODE	5143:12	5143:12	6	/
LEAF_NODE	5143:13	5143:13	6	B
LEAF_NODE	5143:14	5143:14	6	)
EXPR_STATEMENT	5143:16	5143:71	6	* ( ( x_r - x_g ) * y_w - ( x_w - x_g ) * y_r + ( x_w - x_r ) * y_g ) / z_w ;
EXPR	5143:16	5143:68	7	* ( ( x_r - x_g ) * y_w - ( x_w - x_g ) * y_r + ( x_w - x_r ) * y_g ) / z_w
UNARY_EXPR	5143:16	5143:64	8	* ( ( x_r - x_g ) * y_w - ( x_w - x_g ) * y_r + ( x_w - x_r ) * y_g )
UNARY_OPERATOR	5143:16	5143:16	9	*
LEAF_NODE	5143:16	5143:16	10	*
LEAF_NODE	5143:18	5143:18	9	(
LEAF_NODE	5143:19	5143:19	9	(
FIELD	5143:20	5143:20	9	x_r
LEAF_NODE	5143:20	5143:20	10	x_r
LEAF_NODE	5143:23	5143:23	9	-
FIELD	5143:24	5143:24	9	x_g
LEAF_NODE	5143:24	5143:24	10	x_g
LEAF_NODE	5143:27	5143:27	9	)
LEAF_NODE	5143:28	5143:28	9	*
FIELD	5143:29	5143:29	9	y_w
LEAF_NODE	5143:29	5143:29	10	y_w
LEAF_NODE	5143:33	5143:33	9	-
LEAF_NODE	5143:35	5143:35	9	(
FIELD	5143:36	5143:36	9	x_w
LEAF_NODE	5143:36	5143:36	10	x_w
LEAF_NODE	5143:39	5143:39	9	-
FIELD	5143:40	5143:40	9	x_g
LEAF_NODE	5143:40	5143:40	10	x_g
LEAF_NODE	5143:43	5143:43	9	)
LEAF_NODE	5143:44	5143:44	9	*
FIELD	5143:45	5143:45	9	y_r
LEAF_NODE	5143:45	5143:45	10	y_r
LEAF_NODE	5143:49	5143:49	9	+
LEAF_NODE	5143:51	5143:51	9	(
FIELD	5143:52	5143:52	9	x_w
LEAF_NODE	5143:52	5143:52	10	x_w
LEAF_NODE	5143:55	5143:55	9	-
FIELD	5143:56	5143:56	9	x_r
LEAF_NODE	5143:56	5143:56	10	x_r
LEAF_NODE	5143:59	5143:59	9	)
LEAF_NODE	5143:60	5143:60	9	*
FIELD	5143:61	5143:61	9	y_g
LEAF_NODE	5143:61	5143:61	10	y_g
LEAF_NODE	5143:64	5143:64	9	)
LEAF_NODE	5143:66	5143:66	8	/
FIELD	5143:68	5143:68	8	z_w
LEAF_NODE	5143:68	5143:68	9	z_w
LEAF_NODE	5143:71	5143:71	7	;
LEAF_NODE	5144:2	5144:2	6	X_B
LEAF_NODE	5144:6	5144:6	6	=
LEAF_NODE	5144:8	5144:8	6	Y_B
EXPR_STATEMENT	5144:12	5144:23	6	* x_b / y_b ;
EXPR	5144:12	5144:20	7	* x_b / y_b
UNARY_EXPR	5144:12	5144:14	8	* x_b
UNARY_OPERATOR	5144:12	5144:12	9	*
LEAF_NODE	5144:12	5144:12	10	*
FIELD	5144:14	5144:14	9	x_b
LEAF_NODE	5144:14	5144:14	10	x_b
LEAF_NODE	5144:18	5144:18	8	/
FIELD	5144:20	5144:20	8	y_b
LEAF_NODE	5144:20	5144:20	9	y_b
LEAF_NODE	5144:23	5144:23	7	;
EXPR_STATEMENT	5145:2	5145:31	6	Z_B = Y_B * ( ( ( 1 - x_b ) / y_b ) - 1 ) ;
EXPR	5145:2	5145:2	7	Z_B = Y_B * ( ( ( 1 - x_b ) / y_b ) - 1 )
ASSIGN	5145:2	5145:8	8	Z_B = Y_B * ( ( ( 1 - x_b ) / y_b ) - 1 )
LVAL	5145:2	5145:2	9	Z_B
FIELD	5145:2	5145:2	10	Z_B
LEAF_NODE	5145:2	5145:2	11	Z_B
ASSIGN_OP	5145:6	5145:6	9	=
LEAF_NODE	5145:6	5145:6	10	=
RVAL	5145:8	5145:30	9	Y_B * ( ( ( 1 - x_b ) / y_b ) - 1 )
FIELD	5145:8	5145:8	10	Y_B
LEAF_NODE	5145:8	5145:8	11	Y_B
LEAF_NODE	5145:12	5145:12	10	*
LEAF_NODE	5145:14	5145:14	10	(
LEAF_NODE	5145:15	5145:15	10	(
LEAF_NODE	5145:16	5145:16	10	(
FIELD	5145:17	5145:17	10	1
LEAF_NODE	5145:17	5145:17	11	1
LEAF_NODE	5145:18	5145:18	10	-
FIELD	5145:19	5145:19	10	x_b
LEAF_NODE	5145:19	5145:19	11	x_b
LEAF_NODE	5145:22	5145:22	10	)
LEAF_NODE	5145:23	5145:23	10	/
FIELD	5145:24	5145:24	10	y_b
LEAF_NODE	5145:24	5145:24	11	y_b
LEAF_NODE	5145:27	5145:27	10	)
LEAF_NODE	5145:28	5145:28	10	-
FIELD	5145:29	5145:29	10	1
LEAF_NODE	5145:29	5145:29	11	1
LEAF_NODE	5145:30	5145:30	10	)
LEAF_NODE	5145:31	5145:31	7	;
EXPR_STATEMENT	5146:2	5146:41	6	X_W = ( X_R * R ) + ( X_G * G ) + ( X_B * B ) ;
EXPR	5146:2	5146:2	7	X_W = ( X_R * R ) + ( X_G * G ) + ( X_B * B )
ASSIGN	5146:2	5146:8	8	X_W = ( X_R * R ) + ( X_G * G ) + ( X_B * B )
LVAL	5146:2	5146:2	9	X_W
FIELD	5146:2	5146:2	10	X_W
LEAF_NODE	5146:2	5146:2	11	X_W
ASSIGN_OP	5146:6	5146:6	9	=
LEAF_NODE	5146:6	5146:6	10	=
RVAL	5146:8	5146:40	9	( X_R * R ) + ( X_G * G ) + ( X_B * B )
LEAF_NODE	5146:8	5146:8	10	(
FIELD	5146:9	5146:9	10	X_R
LEAF_NODE	5146:9	5146:9	11	X_R
LEAF_NODE	5146:13	5146:13	10	*
FIELD	5146:15	5146:15	10	R
LEAF_NODE	5146:15	5146:15	11	R
LEAF_NODE	5146:16	5146:16	10	)
LEAF_NODE	5146:18	5146:18	10	+
LEAF_NODE	5146:20	5146:20	10	(
FIELD	5146:21	5146:21	10	X_G
LEAF_NODE	5146:21	5146:21	11	X_G
LEAF_NODE	5146:25	5146:25	10	*
FIELD	5146:27	5146:27	10	G
LEAF_NODE	5146:27	5146:27	11	G
LEAF_NODE	5146:28	5146:28	10	)
LEAF_NODE	5146:30	5146:30	10	+
LEAF_NODE	5146:32	5146:32	10	(
FIELD	5146:33	5146:33	10	X_B
LEAF_NODE	5146:33	5146:33	11	X_B
LEAF_NODE	5146:37	5146:37	10	*
FIELD	5146:39	5146:39	10	B
LEAF_NODE	5146:39	5146:39	11	B
LEAF_NODE	5146:40	5146:40	10	)
LEAF_NODE	5146:41	5146:41	7	;
EXPR_STATEMENT	5147:2	5147:41	6	Y_W = ( Y_R * R ) + ( Y_G * G ) + ( Y_B * B ) ;
EXPR	5147:2	5147:2	7	Y_W = ( Y_R * R ) + ( Y_G * G ) + ( Y_B * B )
ASSIGN	5147:2	5147:8	8	Y_W = ( Y_R * R ) + ( Y_G * G ) + ( Y_B * B )
LVAL	5147:2	5147:2	9	Y_W
FIELD	5147:2	5147:2	10	Y_W
LEAF_NODE	5147:2	5147:2	11	Y_W
ASSIGN_OP	5147:6	5147:6	9	=
LEAF_NODE	5147:6	5147:6	10	=
RVAL	5147:8	5147:40	9	( Y_R * R ) + ( Y_G * G ) + ( Y_B * B )
LEAF_NODE	5147:8	5147:8	10	(
FIELD	5147:9	5147:9	10	Y_R
LEAF_NODE	5147:9	5147:9	11	Y_R
LEAF_NODE	5147:13	5147:13	10	*
FIELD	5147:15	5147:15	10	R
LEAF_NODE	5147:15	5147:15	11	R
LEAF_NODE	5147:16	5147:16	10	)
LEAF_NODE	5147:18	5147:18	10	+
LEAF_NODE	5147:20	5147:20	10	(
FIELD	5147:21	5147:21	10	Y_G
LEAF_NODE	5147:21	5147:21	11	Y_G
LEAF_NODE	5147:25	5147:25	10	*
FIELD	5147:27	5147:27	10	G
LEAF_NODE	5147:27	5147:27	11	G
LEAF_NODE	5147:28	5147:28	10	)
LEAF_NODE	5147:30	5147:30	10	+
LEAF_NODE	5147:32	5147:32	10	(
FIELD	5147:33	5147:33	10	Y_B
LEAF_NODE	5147:33	5147:33	11	Y_B
LEAF_NODE	5147:37	5147:37	10	*
FIELD	5147:39	5147:39	10	B
LEAF_NODE	5147:39	5147:39	11	B
LEAF_NODE	5147:40	5147:40	10	)
LEAF_NODE	5147:41	5147:41	7	;
EXPR_STATEMENT	5148:2	5148:41	6	Z_W = ( Z_R * R ) + ( Z_G * G ) + ( Z_B * B ) ;
EXPR	5148:2	5148:2	7	Z_W = ( Z_R * R ) + ( Z_G * G ) + ( Z_B * B )
ASSIGN	5148:2	5148:8	8	Z_W = ( Z_R * R ) + ( Z_G * G ) + ( Z_B * B )
LVAL	5148:2	5148:2	9	Z_W
FIELD	5148:2	5148:2	10	Z_W
LEAF_NODE	5148:2	5148:2	11	Z_W
ASSIGN_OP	5148:6	5148:6	9	=
LEAF_NODE	5148:6	5148:6	10	=
RVAL	5148:8	5148:40	9	( Z_R * R ) + ( Z_G * G ) + ( Z_B * B )
LEAF_NODE	5148:8	5148:8	10	(
FIELD	5148:9	5148:9	10	Z_R
LEAF_NODE	5148:9	5148:9	11	Z_R
LEAF_NODE	5148:13	5148:13	10	*
FIELD	5148:15	5148:15	10	R
LEAF_NODE	5148:15	5148:15	11	R
LEAF_NODE	5148:16	5148:16	10	)
LEAF_NODE	5148:18	5148:18	10	+
LEAF_NODE	5148:20	5148:20	10	(
FIELD	5148:21	5148:21	10	Z_G
LEAF_NODE	5148:21	5148:21	11	Z_G
LEAF_NODE	5148:25	5148:25	10	*
FIELD	5148:27	5148:27	10	G
LEAF_NODE	5148:27	5148:27	11	G
LEAF_NODE	5148:28	5148:28	10	)
LEAF_NODE	5148:30	5148:30	10	+
LEAF_NODE	5148:32	5148:32	10	(
FIELD	5148:33	5148:33	10	Z_B
LEAF_NODE	5148:33	5148:33	11	Z_B
LEAF_NODE	5148:37	5148:37	10	*
FIELD	5148:39	5148:39	10	B
LEAF_NODE	5148:39	5148:39	11	B
LEAF_NODE	5148:40	5148:40	10	)
LEAF_NODE	5148:41	5148:41	7	;
EXPR_STATEMENT	5149:2	5149:12	6	X_W /= Y_W ;
EXPR	5149:2	5149:2	7	X_W /= Y_W
ASSIGN	5149:2	5149:9	8	X_W /= Y_W
LVAL	5149:2	5149:2	9	X_W
FIELD	5149:2	5149:2	10	X_W
LEAF_NODE	5149:2	5149:2	11	X_W
ASSIGN_OP	5149:6	5149:6	9	/=
LEAF_NODE	5149:6	5149:6	10	/=
RVAL	5149:9	5149:9	9	Y_W
FIELD	5149:9	5149:9	10	Y_W
LEAF_NODE	5149:9	5149:9	11	Y_W
LEAF_NODE	5149:12	5149:12	7	;
EXPR_STATEMENT	5150:2	5150:12	6	Z_W /= Y_W ;
EXPR	5150:2	5150:2	7	Z_W /= Y_W
ASSIGN	5150:2	5150:9	8	Z_W /= Y_W
LVAL	5150:2	5150:2	9	Z_W
FIELD	5150:2	5150:2	10	Z_W
LEAF_NODE	5150:2	5150:2	11	Z_W
ASSIGN_OP	5150:6	5150:6	9	/=
LEAF_NODE	5150:6	5150:6	10	/=
RVAL	5150:9	5150:9	9	Y_W
FIELD	5150:9	5150:9	10	Y_W
LEAF_NODE	5150:9	5150:9	11	Y_W
LEAF_NODE	5150:12	5150:12	7	;
EXPR_STATEMENT	5151:2	5151:11	6	Y_W = 1.0 ;
EXPR	5151:2	5151:2	7	Y_W = 1.0
ASSIGN	5151:2	5151:8	8	Y_W = 1.0
LVAL	5151:2	5151:2	9	Y_W
FIELD	5151:2	5151:2	10	Y_W
LEAF_NODE	5151:2	5151:2	11	Y_W
ASSIGN_OP	5151:6	5151:6	9	=
LEAF_NODE	5151:6	5151:6	10	=
RVAL	5151:8	5151:8	9	1.0
FIELD	5151:8	5151:8	10	1.0
LEAF_NODE	5151:8	5151:8	11	1.0
LEAF_NODE	5151:11	5151:11	7	;
LEAF_NODE	5152:1	5152:1	5	}
EXPR_STATEMENT	5153:1	5153:54	3	written += t2pWriteFile ( output , ( tdata_t ) "<< \n" , 4 ) ;
EXPR	5153:1	5153:1	4	written += t2pWriteFile ( output , ( tdata_t ) "<< \n" , 4 )
ASSIGN	5153:1	5153:12	5	written += t2pWriteFile ( output , ( tdata_t ) "<< \n" , 4 )
LVAL	5153:1	5153:1	6	written
FIELD	5153:1	5153:1	7	written
LEAF_NODE	5153:1	5153:1	8	written
ASSIGN_OP	5153:9	5153:9	6	+=
LEAF_NODE	5153:9	5153:9	7	+=
RVAL	5153:12	5153:12	6	t2pWriteFile ( output , ( tdata_t ) "<< \n" , 4 )
FUNCTION_CALL	5153:12	5153:53	7	t2pWriteFile ( output , ( tdata_t ) "<< \n" , 4 )
CALLEE	5153:12	5153:12	8	t2pWriteFile
LEAF_NODE	5153:12	5153:12	9	t2pWriteFile
LEAF_NODE	5153:24	5153:24	8	(
ARGUMENT	5153:25	5153:25	8	output
FIELD	5153:25	5153:25	9	output
LEAF_NODE	5153:25	5153:25	10	output
LEAF_NODE	5153:31	5153:31	8	,
ARGUMENT	5153:33	5153:43	8	( tdata_t ) "<< \n"
LEAF_NODE	5153:33	5153:33	9	(
TYPE_NAME	5153:34	5153:34	9	tdata_t
LEAF_NODE	5153:34	5153:34	10	tdata_t
LEAF_NODE	5153:41	5153:41	9	)
FIELD	5153:43	5153:43	9	"<< \n"
LEAF_NODE	5153:43	5153:43	10	"<< \n"
LEAF_NODE	5153:50	5153:50	8	,
ARGUMENT	5153:52	5153:52	8	4
FIELD	5153:52	5153:52	9	4
LEAF_NODE	5153:52	5153:52	10	4
LEAF_NODE	5153:53	5153:53	8	)
LEAF_NODE	5153:54	5153:54	4	;
SELECTION	5154:1	5154:41	3	
KEYWORD	5154:1	5154:1	4	if
LEAF_NODE	5154:1	5154:1	5	if
LEAF_NODE	5154:3	5154:3	4	(
CONDITION	5154:4	5154:4	4	t2p -> pdf_colorspace & T2P_CS_CALGRAY
EXPR	5154:4	5154:26	5	t2p -> pdf_colorspace & T2P_CS_CALGRAY
FIELD	5154:4	5154:9	6	t2p -> pdf_colorspace
LEAF_NODE	5154:4	5154:4	7	t2p
LEAF_NODE	5154:7	5154:7	7	->
LEAF_NODE	5154:9	5154:9	7	pdf_colorspace
LEAF_NODE	5154:24	5154:24	6	&
FIELD	5154:26	5154:26	6	T2P_CS_CALGRAY
LEAF_NODE	5154:26	5154:26	7	T2P_CS_CALGRAY
LEAF_NODE	5154:40	5154:40	4	)
STATEMENTS	5154:41	5160:1	4	
LEAF_NODE	5154:41	5154:41	5	{
STATEMENTS	5155:2	5159:2	5	
EXPR_STATEMENT	5155:2	5155:63	6	written += t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 ) ;
EXPR	5155:2	5155:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
ASSIGN	5155:2	5155:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
LVAL	5155:2	5155:2	9	written
FIELD	5155:2	5155:2	10	written
LEAF_NODE	5155:2	5155:2	11	written
ASSIGN_OP	5155:10	5155:10	9	+=
LEAF_NODE	5155:10	5155:10	10	+=
RVAL	5155:13	5155:13	9	t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
FUNCTION_CALL	5155:13	5155:62	10	t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
CALLEE	5155:13	5155:13	11	t2pWriteFile
LEAF_NODE	5155:13	5155:13	12	t2pWriteFile
LEAF_NODE	5155:25	5155:25	11	(
ARGUMENT	5155:26	5155:26	11	output
FIELD	5155:26	5155:26	12	output
LEAF_NODE	5155:26	5155:26	13	output
LEAF_NODE	5155:32	5155:32	11	,
ARGUMENT	5155:34	5155:44	11	( tdata_t ) "/WhitePoint "
LEAF_NODE	5155:34	5155:34	12	(
TYPE_NAME	5155:35	5155:35	12	tdata_t
LEAF_NODE	5155:35	5155:35	13	tdata_t
LEAF_NODE	5155:42	5155:42	12	)
FIELD	5155:44	5155:44	12	"/WhitePoint "
LEAF_NODE	5155:44	5155:44	13	"/WhitePoint "
LEAF_NODE	5155:58	5155:58	11	,
ARGUMENT	5155:60	5155:60	11	12
FIELD	5155:60	5155:60	12	12
LEAF_NODE	5155:60	5155:60	13	12
LEAF_NODE	5155:62	5155:62	11	)
LEAF_NODE	5155:63	5155:63	7	;
EXPR_STATEMENT	5156:2	5156:79	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W ) ;
EXPR	5156:2	5156:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
ASSIGN	5156:2	5156:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
LVAL	5156:2	5156:2	9	buflen
FIELD	5156:2	5156:2	10	buflen
LEAF_NODE	5156:2	5156:2	11	buflen
ASSIGN_OP	5156:8	5156:8	9	=
LEAF_NODE	5156:8	5156:8	10	=
RVAL	5156:9	5156:9	9	snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
FUNCTION_CALL	5156:9	5156:78	10	snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
CALLEE	5156:9	5156:9	11	snprintf
LEAF_NODE	5156:9	5156:9	12	snprintf
LEAF_NODE	5156:17	5156:17	11	(
ARGUMENT	5156:18	5156:18	11	buffer
FIELD	5156:18	5156:18	12	buffer
LEAF_NODE	5156:18	5156:18	13	buffer
LEAF_NODE	5156:24	5156:24	11	,
ARGUMENT	5156:26	5156:26	11	sizeof ( buffer )
FUNCTION_CALL	5156:26	5156:39	12	sizeof ( buffer )
CALLEE	5156:26	5156:26	13	sizeof
LEAF_NODE	5156:26	5156:26	14	sizeof
LEAF_NODE	5156:32	5156:32	13	(
ARGUMENT	5156:33	5156:33	13	buffer
FIELD	5156:33	5156:33	14	buffer
LEAF_NODE	5156:33	5156:33	15	buffer
LEAF_NODE	5156:39	5156:39	13	)
LEAF_NODE	5156:40	5156:40	11	,
ARGUMENT	5156:42	5156:42	11	"[%.4f %.4f %.4f] \n"
FIELD	5156:42	5156:42	12	"[%.4f %.4f %.4f] \n"
LEAF_NODE	5156:42	5156:42	13	"[%.4f %.4f %.4f] \n"
LEAF_NODE	5156:63	5156:63	11	,
ARGUMENT	5156:65	5156:65	11	X_W
FIELD	5156:65	5156:65	12	X_W
LEAF_NODE	5156:65	5156:65	13	X_W
LEAF_NODE	5156:68	5156:68	11	,
ARGUMENT	5156:70	5156:70	11	Y_W
FIELD	5156:70	5156:70	12	Y_W
LEAF_NODE	5156:70	5156:70	13	Y_W
LEAF_NODE	5156:73	5156:73	11	,
ARGUMENT	5156:75	5156:75	11	Z_W
FIELD	5156:75	5156:75	12	Z_W
LEAF_NODE	5156:75	5156:75	13	Z_W
LEAF_NODE	5156:78	5156:78	11	)
LEAF_NODE	5156:79	5156:79	7	;
EXPR_STATEMENT	5157:2	5157:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5157:2	5157:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5157:2	5157:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5157:2	5157:2	9	check_snprintf_ret
LEAF_NODE	5157:2	5157:2	10	check_snprintf_ret
LEAF_NODE	5157:20	5157:20	9	(
ARGUMENT	5157:21	5157:21	9	t2p
FIELD	5157:21	5157:21	10	t2p
LEAF_NODE	5157:21	5157:21	11	t2p
LEAF_NODE	5157:24	5157:24	9	,
ARGUMENT	5157:26	5157:26	9	buflen
FIELD	5157:26	5157:26	10	buflen
LEAF_NODE	5157:26	5157:26	11	buflen
LEAF_NODE	5157:32	5157:32	9	,
ARGUMENT	5157:34	5157:34	9	buffer
FIELD	5157:34	5157:34	10	buffer
LEAF_NODE	5157:34	5157:34	11	buffer
LEAF_NODE	5157:40	5157:40	9	)
LEAF_NODE	5157:41	5157:41	7	;
EXPR_STATEMENT	5158:2	5158:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5158:2	5158:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5158:2	5158:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5158:2	5158:2	9	written
FIELD	5158:2	5158:2	10	written
LEAF_NODE	5158:2	5158:2	11	written
ASSIGN_OP	5158:10	5158:10	9	+=
LEAF_NODE	5158:10	5158:10	10	+=
RVAL	5158:13	5158:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5158:13	5158:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5158:13	5158:13	11	t2pWriteFile
LEAF_NODE	5158:13	5158:13	12	t2pWriteFile
LEAF_NODE	5158:25	5158:25	11	(
ARGUMENT	5158:26	5158:26	11	output
FIELD	5158:26	5158:26	12	output
LEAF_NODE	5158:26	5158:26	13	output
LEAF_NODE	5158:32	5158:32	11	,
ARGUMENT	5158:34	5158:44	11	( tdata_t ) buffer
LEAF_NODE	5158:34	5158:34	12	(
TYPE_NAME	5158:35	5158:35	12	tdata_t
LEAF_NODE	5158:35	5158:35	13	tdata_t
LEAF_NODE	5158:42	5158:42	12	)
FIELD	5158:44	5158:44	12	buffer
LEAF_NODE	5158:44	5158:44	13	buffer
LEAF_NODE	5158:50	5158:50	11	,
ARGUMENT	5158:52	5158:52	11	buflen
FIELD	5158:52	5158:52	12	buflen
LEAF_NODE	5158:52	5158:52	13	buflen
LEAF_NODE	5158:58	5158:58	11	)
LEAF_NODE	5158:59	5158:59	7	;
EXPR_STATEMENT	5159:2	5159:64	6	written += t2pWriteFile ( output , ( tdata_t ) "/Gamma 2.2 \n" , 12 ) ;
EXPR	5159:2	5159:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/Gamma 2.2 \n" , 12 )
ASSIGN	5159:2	5159:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/Gamma 2.2 \n" , 12 )
LVAL	5159:2	5159:2	9	written
FIELD	5159:2	5159:2	10	written
LEAF_NODE	5159:2	5159:2	11	written
ASSIGN_OP	5159:10	5159:10	9	+=
LEAF_NODE	5159:10	5159:10	10	+=
RVAL	5159:13	5159:13	9	t2pWriteFile ( output , ( tdata_t ) "/Gamma 2.2 \n" , 12 )
FUNCTION_CALL	5159:13	5159:63	10	t2pWriteFile ( output , ( tdata_t ) "/Gamma 2.2 \n" , 12 )
CALLEE	5159:13	5159:13	11	t2pWriteFile
LEAF_NODE	5159:13	5159:13	12	t2pWriteFile
LEAF_NODE	5159:25	5159:25	11	(
ARGUMENT	5159:26	5159:26	11	output
FIELD	5159:26	5159:26	12	output
LEAF_NODE	5159:26	5159:26	13	output
LEAF_NODE	5159:32	5159:32	11	,
ARGUMENT	5159:34	5159:44	11	( tdata_t ) "/Gamma 2.2 \n"
LEAF_NODE	5159:34	5159:34	12	(
TYPE_NAME	5159:35	5159:35	12	tdata_t
LEAF_NODE	5159:35	5159:35	13	tdata_t
LEAF_NODE	5159:42	5159:42	12	)
FIELD	5159:44	5159:44	12	"/Gamma 2.2 \n"
LEAF_NODE	5159:44	5159:44	13	"/Gamma 2.2 \n"
LEAF_NODE	5159:59	5159:59	11	,
ARGUMENT	5159:61	5159:61	11	12
FIELD	5159:61	5159:61	12	12
LEAF_NODE	5159:61	5159:61	13	12
LEAF_NODE	5159:63	5159:63	11	)
LEAF_NODE	5159:64	5159:64	7	;
LEAF_NODE	5160:1	5160:1	5	}
SELECTION	5161:1	5161:40	3	
KEYWORD	5161:1	5161:1	4	if
LEAF_NODE	5161:1	5161:1	5	if
LEAF_NODE	5161:3	5161:3	4	(
CONDITION	5161:4	5161:4	4	t2p -> pdf_colorspace & T2P_CS_CALRGB
EXPR	5161:4	5161:26	5	t2p -> pdf_colorspace & T2P_CS_CALRGB
FIELD	5161:4	5161:9	6	t2p -> pdf_colorspace
LEAF_NODE	5161:4	5161:4	7	t2p
LEAF_NODE	5161:7	5161:7	7	->
LEAF_NODE	5161:9	5161:9	7	pdf_colorspace
LEAF_NODE	5161:24	5161:24	6	&
FIELD	5161:26	5161:26	6	T2P_CS_CALRGB
LEAF_NODE	5161:26	5161:26	7	T2P_CS_CALRGB
LEAF_NODE	5161:39	5161:39	4	)
STATEMENTS	5161:40	5174:1	4	
LEAF_NODE	5161:40	5161:40	5	{
STATEMENTS	5162:2	5173:2	5	
EXPR_STATEMENT	5162:2	5162:63	6	written += t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 ) ;
EXPR	5162:2	5162:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
ASSIGN	5162:2	5162:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
LVAL	5162:2	5162:2	9	written
FIELD	5162:2	5162:2	10	written
LEAF_NODE	5162:2	5162:2	11	written
ASSIGN_OP	5162:10	5162:10	9	+=
LEAF_NODE	5162:10	5162:10	10	+=
RVAL	5162:13	5162:13	9	t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
FUNCTION_CALL	5162:13	5162:62	10	t2pWriteFile ( output , ( tdata_t ) "/WhitePoint " , 12 )
CALLEE	5162:13	5162:13	11	t2pWriteFile
LEAF_NODE	5162:13	5162:13	12	t2pWriteFile
LEAF_NODE	5162:25	5162:25	11	(
ARGUMENT	5162:26	5162:26	11	output
FIELD	5162:26	5162:26	12	output
LEAF_NODE	5162:26	5162:26	13	output
LEAF_NODE	5162:32	5162:32	11	,
ARGUMENT	5162:34	5162:44	11	( tdata_t ) "/WhitePoint "
LEAF_NODE	5162:34	5162:34	12	(
TYPE_NAME	5162:35	5162:35	12	tdata_t
LEAF_NODE	5162:35	5162:35	13	tdata_t
LEAF_NODE	5162:42	5162:42	12	)
FIELD	5162:44	5162:44	12	"/WhitePoint "
LEAF_NODE	5162:44	5162:44	13	"/WhitePoint "
LEAF_NODE	5162:58	5162:58	11	,
ARGUMENT	5162:60	5162:60	11	12
FIELD	5162:60	5162:60	12	12
LEAF_NODE	5162:60	5162:60	13	12
LEAF_NODE	5162:62	5162:62	11	)
LEAF_NODE	5162:63	5162:63	7	;
EXPR_STATEMENT	5163:2	5163:79	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W ) ;
EXPR	5163:2	5163:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
ASSIGN	5163:2	5163:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
LVAL	5163:2	5163:2	9	buflen
FIELD	5163:2	5163:2	10	buflen
LEAF_NODE	5163:2	5163:2	11	buflen
ASSIGN_OP	5163:8	5163:8	9	=
LEAF_NODE	5163:8	5163:8	10	=
RVAL	5163:9	5163:9	9	snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
FUNCTION_CALL	5163:9	5163:78	10	snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f] \n" , X_W , Y_W , Z_W )
CALLEE	5163:9	5163:9	11	snprintf
LEAF_NODE	5163:9	5163:9	12	snprintf
LEAF_NODE	5163:17	5163:17	11	(
ARGUMENT	5163:18	5163:18	11	buffer
FIELD	5163:18	5163:18	12	buffer
LEAF_NODE	5163:18	5163:18	13	buffer
LEAF_NODE	5163:24	5163:24	11	,
ARGUMENT	5163:26	5163:26	11	sizeof ( buffer )
FUNCTION_CALL	5163:26	5163:39	12	sizeof ( buffer )
CALLEE	5163:26	5163:26	13	sizeof
LEAF_NODE	5163:26	5163:26	14	sizeof
LEAF_NODE	5163:32	5163:32	13	(
ARGUMENT	5163:33	5163:33	13	buffer
FIELD	5163:33	5163:33	14	buffer
LEAF_NODE	5163:33	5163:33	15	buffer
LEAF_NODE	5163:39	5163:39	13	)
LEAF_NODE	5163:40	5163:40	11	,
ARGUMENT	5163:42	5163:42	11	"[%.4f %.4f %.4f] \n"
FIELD	5163:42	5163:42	12	"[%.4f %.4f %.4f] \n"
LEAF_NODE	5163:42	5163:42	13	"[%.4f %.4f %.4f] \n"
LEAF_NODE	5163:63	5163:63	11	,
ARGUMENT	5163:65	5163:65	11	X_W
FIELD	5163:65	5163:65	12	X_W
LEAF_NODE	5163:65	5163:65	13	X_W
LEAF_NODE	5163:68	5163:68	11	,
ARGUMENT	5163:70	5163:70	11	Y_W
FIELD	5163:70	5163:70	12	Y_W
LEAF_NODE	5163:70	5163:70	13	Y_W
LEAF_NODE	5163:73	5163:73	11	,
ARGUMENT	5163:75	5163:75	11	Z_W
FIELD	5163:75	5163:75	12	Z_W
LEAF_NODE	5163:75	5163:75	13	Z_W
LEAF_NODE	5163:78	5163:78	11	)
LEAF_NODE	5163:79	5163:79	7	;
EXPR_STATEMENT	5164:2	5164:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5164:2	5164:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5164:2	5164:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5164:2	5164:2	9	check_snprintf_ret
LEAF_NODE	5164:2	5164:2	10	check_snprintf_ret
LEAF_NODE	5164:20	5164:20	9	(
ARGUMENT	5164:21	5164:21	9	t2p
FIELD	5164:21	5164:21	10	t2p
LEAF_NODE	5164:21	5164:21	11	t2p
LEAF_NODE	5164:24	5164:24	9	,
ARGUMENT	5164:26	5164:26	9	buflen
FIELD	5164:26	5164:26	10	buflen
LEAF_NODE	5164:26	5164:26	11	buflen
LEAF_NODE	5164:32	5164:32	9	,
ARGUMENT	5164:34	5164:34	9	buffer
FIELD	5164:34	5164:34	10	buffer
LEAF_NODE	5164:34	5164:34	11	buffer
LEAF_NODE	5164:40	5164:40	9	)
LEAF_NODE	5164:41	5164:41	7	;
EXPR_STATEMENT	5165:2	5165:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5165:2	5165:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5165:2	5165:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5165:2	5165:2	9	written
FIELD	5165:2	5165:2	10	written
LEAF_NODE	5165:2	5165:2	11	written
ASSIGN_OP	5165:10	5165:10	9	+=
LEAF_NODE	5165:10	5165:10	10	+=
RVAL	5165:13	5165:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5165:13	5165:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5165:13	5165:13	11	t2pWriteFile
LEAF_NODE	5165:13	5165:13	12	t2pWriteFile
LEAF_NODE	5165:25	5165:25	11	(
ARGUMENT	5165:26	5165:26	11	output
FIELD	5165:26	5165:26	12	output
LEAF_NODE	5165:26	5165:26	13	output
LEAF_NODE	5165:32	5165:32	11	,
ARGUMENT	5165:34	5165:44	11	( tdata_t ) buffer
LEAF_NODE	5165:34	5165:34	12	(
TYPE_NAME	5165:35	5165:35	12	tdata_t
LEAF_NODE	5165:35	5165:35	13	tdata_t
LEAF_NODE	5165:42	5165:42	12	)
FIELD	5165:44	5165:44	12	buffer
LEAF_NODE	5165:44	5165:44	13	buffer
LEAF_NODE	5165:50	5165:50	11	,
ARGUMENT	5165:52	5165:52	11	buflen
FIELD	5165:52	5165:52	12	buflen
LEAF_NODE	5165:52	5165:52	13	buflen
LEAF_NODE	5165:58	5165:58	11	)
LEAF_NODE	5165:59	5165:59	7	;
EXPR_STATEMENT	5166:2	5166:58	6	written += t2pWriteFile ( output , ( tdata_t ) "/Matrix " , 8 ) ;
EXPR	5166:2	5166:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/Matrix " , 8 )
ASSIGN	5166:2	5166:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/Matrix " , 8 )
LVAL	5166:2	5166:2	9	written
FIELD	5166:2	5166:2	10	written
LEAF_NODE	5166:2	5166:2	11	written
ASSIGN_OP	5166:10	5166:10	9	+=
LEAF_NODE	5166:10	5166:10	10	+=
RVAL	5166:13	5166:13	9	t2pWriteFile ( output , ( tdata_t ) "/Matrix " , 8 )
FUNCTION_CALL	5166:13	5166:57	10	t2pWriteFile ( output , ( tdata_t ) "/Matrix " , 8 )
CALLEE	5166:13	5166:13	11	t2pWriteFile
LEAF_NODE	5166:13	5166:13	12	t2pWriteFile
LEAF_NODE	5166:25	5166:25	11	(
ARGUMENT	5166:26	5166:26	11	output
FIELD	5166:26	5166:26	12	output
LEAF_NODE	5166:26	5166:26	13	output
LEAF_NODE	5166:32	5166:32	11	,
ARGUMENT	5166:34	5166:44	11	( tdata_t ) "/Matrix "
LEAF_NODE	5166:34	5166:34	12	(
TYPE_NAME	5166:35	5166:35	12	tdata_t
LEAF_NODE	5166:35	5166:35	13	tdata_t
LEAF_NODE	5166:42	5166:42	12	)
FIELD	5166:44	5166:44	12	"/Matrix "
LEAF_NODE	5166:44	5166:44	13	"/Matrix "
LEAF_NODE	5166:54	5166:54	11	,
ARGUMENT	5166:56	5166:56	11	8
FIELD	5166:56	5166:56	12	8
LEAF_NODE	5166:56	5166:56	13	8
LEAF_NODE	5166:57	5166:57	11	)
LEAF_NODE	5166:58	5166:58	7	;
EXPR_STATEMENT	5167:2	5170:17	6	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f] \n" , X_R , Y_R , Z_R , X_G , Y_G , Z_G , X_B , Y_B , Z_B ) ;
EXPR	5167:2	5167:2	7	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f] \n" , X_R , Y_R , Z_R , X_G , Y_G , Z_G , X_B , Y_B , Z_B )
ASSIGN	5167:2	5167:9	8	buflen = snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f] \n" , X_R , Y_R , Z_R , X_G , Y_G , Z_G , X_B , Y_B , Z_B )
LVAL	5167:2	5167:2	9	buflen
FIELD	5167:2	5167:2	10	buflen
LEAF_NODE	5167:2	5167:2	11	buflen
ASSIGN_OP	5167:8	5167:8	9	=
LEAF_NODE	5167:8	5167:8	10	=
RVAL	5167:9	5167:9	9	snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f] \n" , X_R , Y_R , Z_R , X_G , Y_G , Z_G , X_B , Y_B , Z_B )
FUNCTION_CALL	5167:9	5170:16	10	snprintf ( buffer , sizeof ( buffer ) , "[%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f] \n" , X_R , Y_R , Z_R , X_G , Y_G , Z_G , X_B , Y_B , Z_B )
CALLEE	5167:9	5167:9	11	snprintf
LEAF_NODE	5167:9	5167:9	12	snprintf
LEAF_NODE	5167:17	5167:17	11	(
ARGUMENT	5167:18	5167:18	11	buffer
FIELD	5167:18	5167:18	12	buffer
LEAF_NODE	5167:18	5167:18	13	buffer
LEAF_NODE	5167:24	5167:24	11	,
ARGUMENT	5167:26	5167:26	11	sizeof ( buffer )
FUNCTION_CALL	5167:26	5167:39	12	sizeof ( buffer )
CALLEE	5167:26	5167:26	13	sizeof
LEAF_NODE	5167:26	5167:26	14	sizeof
LEAF_NODE	5167:32	5167:32	13	(
ARGUMENT	5167:33	5167:33	13	buffer
FIELD	5167:33	5167:33	14	buffer
LEAF_NODE	5167:33	5167:33	15	buffer
LEAF_NODE	5167:39	5167:39	13	)
LEAF_NODE	5167:40	5167:40	11	,
ARGUMENT	5167:42	5167:42	11	"[%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f] \n"
FIELD	5167:42	5167:42	12	"[%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f] \n"
LEAF_NODE	5167:42	5167:42	13	"[%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f] \n"
LEAF_NODE	5167:93	5167:93	11	,
ARGUMENT	5168:3	5168:3	11	X_R
FIELD	5168:3	5168:3	12	X_R
LEAF_NODE	5168:3	5168:3	13	X_R
LEAF_NODE	5168:6	5168:6	11	,
ARGUMENT	5168:8	5168:8	11	Y_R
FIELD	5168:8	5168:8	12	Y_R
LEAF_NODE	5168:8	5168:8	13	Y_R
LEAF_NODE	5168:11	5168:11	11	,
ARGUMENT	5168:13	5168:13	11	Z_R
FIELD	5168:13	5168:13	12	Z_R
LEAF_NODE	5168:13	5168:13	13	Z_R
LEAF_NODE	5168:16	5168:16	11	,
ARGUMENT	5169:3	5169:3	11	X_G
FIELD	5169:3	5169:3	12	X_G
LEAF_NODE	5169:3	5169:3	13	X_G
LEAF_NODE	5169:6	5169:6	11	,
ARGUMENT	5169:8	5169:8	11	Y_G
FIELD	5169:8	5169:8	12	Y_G
LEAF_NODE	5169:8	5169:8	13	Y_G
LEAF_NODE	5169:11	5169:11	11	,
ARGUMENT	5169:13	5169:13	11	Z_G
FIELD	5169:13	5169:13	12	Z_G
LEAF_NODE	5169:13	5169:13	13	Z_G
LEAF_NODE	5169:16	5169:16	11	,
ARGUMENT	5170:3	5170:3	11	X_B
FIELD	5170:3	5170:3	12	X_B
LEAF_NODE	5170:3	5170:3	13	X_B
LEAF_NODE	5170:6	5170:6	11	,
ARGUMENT	5170:8	5170:8	11	Y_B
FIELD	5170:8	5170:8	12	Y_B
LEAF_NODE	5170:8	5170:8	13	Y_B
LEAF_NODE	5170:11	5170:11	11	,
ARGUMENT	5170:13	5170:13	11	Z_B
FIELD	5170:13	5170:13	12	Z_B
LEAF_NODE	5170:13	5170:13	13	Z_B
LEAF_NODE	5170:16	5170:16	11	)
LEAF_NODE	5170:17	5170:17	7	;
EXPR_STATEMENT	5171:2	5171:41	6	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5171:2	5171:2	7	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5171:2	5171:40	8	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5171:2	5171:2	9	check_snprintf_ret
LEAF_NODE	5171:2	5171:2	10	check_snprintf_ret
LEAF_NODE	5171:20	5171:20	9	(
ARGUMENT	5171:21	5171:21	9	t2p
FIELD	5171:21	5171:21	10	t2p
LEAF_NODE	5171:21	5171:21	11	t2p
LEAF_NODE	5171:24	5171:24	9	,
ARGUMENT	5171:26	5171:26	9	buflen
FIELD	5171:26	5171:26	10	buflen
LEAF_NODE	5171:26	5171:26	11	buflen
LEAF_NODE	5171:32	5171:32	9	,
ARGUMENT	5171:34	5171:34	9	buffer
FIELD	5171:34	5171:34	10	buffer
LEAF_NODE	5171:34	5171:34	11	buffer
LEAF_NODE	5171:40	5171:40	9	)
LEAF_NODE	5171:41	5171:41	7	;
EXPR_STATEMENT	5172:2	5172:59	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5172:2	5172:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5172:2	5172:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5172:2	5172:2	9	written
FIELD	5172:2	5172:2	10	written
LEAF_NODE	5172:2	5172:2	11	written
ASSIGN_OP	5172:10	5172:10	9	+=
LEAF_NODE	5172:10	5172:10	10	+=
RVAL	5172:13	5172:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5172:13	5172:58	10	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5172:13	5172:13	11	t2pWriteFile
LEAF_NODE	5172:13	5172:13	12	t2pWriteFile
LEAF_NODE	5172:25	5172:25	11	(
ARGUMENT	5172:26	5172:26	11	output
FIELD	5172:26	5172:26	12	output
LEAF_NODE	5172:26	5172:26	13	output
LEAF_NODE	5172:32	5172:32	11	,
ARGUMENT	5172:34	5172:44	11	( tdata_t ) buffer
LEAF_NODE	5172:34	5172:34	12	(
TYPE_NAME	5172:35	5172:35	12	tdata_t
LEAF_NODE	5172:35	5172:35	13	tdata_t
LEAF_NODE	5172:42	5172:42	12	)
FIELD	5172:44	5172:44	12	buffer
LEAF_NODE	5172:44	5172:44	13	buffer
LEAF_NODE	5172:50	5172:50	11	,
ARGUMENT	5172:52	5172:52	11	buflen
FIELD	5172:52	5172:52	12	buflen
LEAF_NODE	5172:52	5172:52	13	buflen
LEAF_NODE	5172:58	5172:58	11	)
LEAF_NODE	5172:59	5172:59	7	;
EXPR_STATEMENT	5173:2	5173:74	6	written += t2pWriteFile ( output , ( tdata_t ) "/Gamma [2.2 2.2 2.2] \n" , 22 ) ;
EXPR	5173:2	5173:2	7	written += t2pWriteFile ( output , ( tdata_t ) "/Gamma [2.2 2.2 2.2] \n" , 22 )
ASSIGN	5173:2	5173:13	8	written += t2pWriteFile ( output , ( tdata_t ) "/Gamma [2.2 2.2 2.2] \n" , 22 )
LVAL	5173:2	5173:2	9	written
FIELD	5173:2	5173:2	10	written
LEAF_NODE	5173:2	5173:2	11	written
ASSIGN_OP	5173:10	5173:10	9	+=
LEAF_NODE	5173:10	5173:10	10	+=
RVAL	5173:13	5173:13	9	t2pWriteFile ( output , ( tdata_t ) "/Gamma [2.2 2.2 2.2] \n" , 22 )
FUNCTION_CALL	5173:13	5173:73	10	t2pWriteFile ( output , ( tdata_t ) "/Gamma [2.2 2.2 2.2] \n" , 22 )
CALLEE	5173:13	5173:13	11	t2pWriteFile
LEAF_NODE	5173:13	5173:13	12	t2pWriteFile
LEAF_NODE	5173:25	5173:25	11	(
ARGUMENT	5173:26	5173:26	11	output
FIELD	5173:26	5173:26	12	output
LEAF_NODE	5173:26	5173:26	13	output
LEAF_NODE	5173:32	5173:32	11	,
ARGUMENT	5173:34	5173:44	11	( tdata_t ) "/Gamma [2.2 2.2 2.2] \n"
LEAF_NODE	5173:34	5173:34	12	(
TYPE_NAME	5173:35	5173:35	12	tdata_t
LEAF_NODE	5173:35	5173:35	13	tdata_t
LEAF_NODE	5173:42	5173:42	12	)
FIELD	5173:44	5173:44	12	"/Gamma [2.2 2.2 2.2] \n"
LEAF_NODE	5173:44	5173:44	13	"/Gamma [2.2 2.2 2.2] \n"
LEAF_NODE	5173:69	5173:69	11	,
ARGUMENT	5173:71	5173:71	11	22
FIELD	5173:71	5173:71	12	22
LEAF_NODE	5173:71	5173:71	13	22
LEAF_NODE	5173:73	5173:73	11	)
LEAF_NODE	5173:74	5173:74	7	;
LEAF_NODE	5174:1	5174:1	5	}
EXPR_STATEMENT	5175:1	5175:55	3	written += t2pWriteFile ( output , ( tdata_t ) ">>] \n" , 5 ) ;
EXPR	5175:1	5175:1	4	written += t2pWriteFile ( output , ( tdata_t ) ">>] \n" , 5 )
ASSIGN	5175:1	5175:12	5	written += t2pWriteFile ( output , ( tdata_t ) ">>] \n" , 5 )
LVAL	5175:1	5175:1	6	written
FIELD	5175:1	5175:1	7	written
LEAF_NODE	5175:1	5175:1	8	written
ASSIGN_OP	5175:9	5175:9	6	+=
LEAF_NODE	5175:9	5175:9	7	+=
RVAL	5175:12	5175:12	6	t2pWriteFile ( output , ( tdata_t ) ">>] \n" , 5 )
FUNCTION_CALL	5175:12	5175:54	7	t2pWriteFile ( output , ( tdata_t ) ">>] \n" , 5 )
CALLEE	5175:12	5175:12	8	t2pWriteFile
LEAF_NODE	5175:12	5175:12	9	t2pWriteFile
LEAF_NODE	5175:24	5175:24	8	(
ARGUMENT	5175:25	5175:25	8	output
FIELD	5175:25	5175:25	9	output
LEAF_NODE	5175:25	5175:25	10	output
LEAF_NODE	5175:31	5175:31	8	,
ARGUMENT	5175:33	5175:43	8	( tdata_t ) ">>] \n"
LEAF_NODE	5175:33	5175:33	9	(
TYPE_NAME	5175:34	5175:34	9	tdata_t
LEAF_NODE	5175:34	5175:34	10	tdata_t
LEAF_NODE	5175:41	5175:41	9	)
FIELD	5175:43	5175:43	9	">>] \n"
LEAF_NODE	5175:43	5175:43	10	">>] \n"
LEAF_NODE	5175:51	5175:51	8	,
ARGUMENT	5175:53	5175:53	8	5
FIELD	5175:53	5175:53	9	5
LEAF_NODE	5175:53	5175:53	10	5
LEAF_NODE	5175:54	5175:54	8	)
LEAF_NODE	5175:55	5175:55	4	;
LEAF_NODE	5177:1	5177:1	3	return
LEAF_NODE	5177:7	5177:7	3	(
LEAF_NODE	5177:8	5177:8	3	written
LEAF_NODE	5177:15	5177:15	3	)
LEAF_NODE	5177:16	5177:16	3	;
LEAF_NODE	5178:0	5178:0	2	}
FUNCTION_DEF	5184:0	5197:0	1	
RETURN_TYPE	5184:0	5184:0	2	tsize_t
TYPE_NAME	5184:0	5184:0	3	tsize_t
LEAF_NODE	5184:0	5184:0	4	tsize_t
FUNCTION_NAME	5184:8	5184:8	2	t2p_write_pdf_xobject_icccs
LEAF_NODE	5184:8	5184:8	3	t2p_write_pdf_xobject_icccs
PARAMETER_LIST	5184:35	5184:58	2	( T2P * t2p , TIFF * output )
LEAF_NODE	5184:35	5184:35	3	(
PARAMETER_DECL	5184:36	5184:41	3	T2P * t2p
TYPE	5184:36	5184:39	4	T2P *
TYPE_NAME	5184:36	5184:36	5	T2P
LEAF_NODE	5184:36	5184:36	6	T2P
POINTER	5184:39	5184:39	5	*
LEAF_NODE	5184:39	5184:39	6	*
NAME	5184:41	5184:41	4	t2p
LEAF_NODE	5184:41	5184:41	5	t2p
LEAF_NODE	5184:44	5184:44	3	,
PARAMETER_DECL	5184:46	5184:52	3	TIFF * output
TYPE	5184:46	5184:50	4	TIFF *
TYPE_NAME	5184:46	5184:46	5	TIFF
LEAF_NODE	5184:46	5184:46	6	TIFF
POINTER	5184:50	5184:50	5	*
LEAF_NODE	5184:50	5184:50	6	*
NAME	5184:52	5184:52	4	output
LEAF_NODE	5184:52	5184:52	5	output
LEAF_NODE	5184:58	5184:58	3	)
LEAF_NODE	5184:59	5184:59	2	{
STATEMENTS	5186:1	5196:16	2	
SIMPLE_DECL	5186:1	5186:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5186:1	5186:9	4	tsize_t written ; written = 0
TYPE	5186:1	5186:1	5	tsize_t
TYPE_NAME	5186:1	5186:1	6	tsize_t
LEAF_NODE	5186:1	5186:1	7	tsize_t
NAME	5186:9	5186:9	5	written
LEAF_NODE	5186:9	5186:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5186:9	5186:9	5	written = 0
ASSIGN	5186:9	5186:17	6	written = 0
LVAL	5186:9	5186:9	7	written
NAME	5186:9	5186:9	8	written
LEAF_NODE	5186:9	5186:9	9	written
ASSIGN_OP	5186:16	5186:16	7	=
LEAF_NODE	5186:16	5186:16	8	=
RVAL	5186:17	5186:17	7	0
FIELD	5186:17	5186:17	8	0
LEAF_NODE	5186:17	5186:17	9	0
LEAF_NODE	5186:18	5186:18	4	;
SIMPLE_DECL	5187:1	5187:16	3	char [ 32 ] buffer ;
VAR_DECL	5187:1	5187:6	4	char [ 32 ] buffer
TYPE	5187:1	5187:12	5	char [ 32 ]
TYPE_NAME	5187:1	5187:1	6	char
LEAF_NODE	5187:1	5187:1	7	char
TYPE_SUFFIX	5187:12	5187:15	6	[ 32 ]
LEAF_NODE	5187:12	5187:12	7	[
FIELD	5187:13	5187:13	7	32
LEAF_NODE	5187:13	5187:13	8	32
LEAF_NODE	5187:15	5187:15	7	]
NAME	5187:6	5187:6	5	buffer
LEAF_NODE	5187:6	5187:6	6	buffer
LEAF_NODE	5187:16	5187:16	4	;
SIMPLE_DECL	5188:1	5188:13	3	int buflen ; buflen = 0 ;
VAR_DECL	5188:1	5188:5	4	int buflen ; buflen = 0
TYPE	5188:1	5188:1	5	int
TYPE_NAME	5188:1	5188:1	6	int
LEAF_NODE	5188:1	5188:1	7	int
NAME	5188:5	5188:5	5	buflen
LEAF_NODE	5188:5	5188:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	5188:5	5188:5	5	buflen = 0
ASSIGN	5188:5	5188:12	6	buflen = 0
LVAL	5188:5	5188:5	7	buflen
NAME	5188:5	5188:5	8	buflen
LEAF_NODE	5188:5	5188:5	9	buflen
ASSIGN_OP	5188:11	5188:11	7	=
LEAF_NODE	5188:11	5188:11	8	=
RVAL	5188:12	5188:12	7	0
FIELD	5188:12	5188:12	8	0
LEAF_NODE	5188:12	5188:12	9	0
LEAF_NODE	5188:13	5188:13	4	;
EXPR_STATEMENT	5190:1	5190:61	3	written += t2pWriteFile ( output , ( tdata_t ) "[/ICCBased " , 11 ) ;
EXPR	5190:1	5190:1	4	written += t2pWriteFile ( output , ( tdata_t ) "[/ICCBased " , 11 )
ASSIGN	5190:1	5190:12	5	written += t2pWriteFile ( output , ( tdata_t ) "[/ICCBased " , 11 )
LVAL	5190:1	5190:1	6	written
FIELD	5190:1	5190:1	7	written
LEAF_NODE	5190:1	5190:1	8	written
ASSIGN_OP	5190:9	5190:9	6	+=
LEAF_NODE	5190:9	5190:9	7	+=
RVAL	5190:12	5190:12	6	t2pWriteFile ( output , ( tdata_t ) "[/ICCBased " , 11 )
FUNCTION_CALL	5190:12	5190:60	7	t2pWriteFile ( output , ( tdata_t ) "[/ICCBased " , 11 )
CALLEE	5190:12	5190:12	8	t2pWriteFile
LEAF_NODE	5190:12	5190:12	9	t2pWriteFile
LEAF_NODE	5190:24	5190:24	8	(
ARGUMENT	5190:25	5190:25	8	output
FIELD	5190:25	5190:25	9	output
LEAF_NODE	5190:25	5190:25	10	output
LEAF_NODE	5190:31	5190:31	8	,
ARGUMENT	5190:33	5190:43	8	( tdata_t ) "[/ICCBased "
LEAF_NODE	5190:33	5190:33	9	(
TYPE_NAME	5190:34	5190:34	9	tdata_t
LEAF_NODE	5190:34	5190:34	10	tdata_t
LEAF_NODE	5190:41	5190:41	9	)
FIELD	5190:43	5190:43	9	"[/ICCBased "
LEAF_NODE	5190:43	5190:43	10	"[/ICCBased "
LEAF_NODE	5190:56	5190:56	8	,
ARGUMENT	5190:58	5190:58	8	11
FIELD	5190:58	5190:58	9	11
LEAF_NODE	5190:58	5190:58	10	11
LEAF_NODE	5190:60	5190:60	8	)
LEAF_NODE	5190:61	5190:61	4	;
EXPR_STATEMENT	5191:1	5191:78	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_icccs ) ;
EXPR	5191:1	5191:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_icccs )
ASSIGN	5191:1	5191:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_icccs )
LVAL	5191:1	5191:1	6	buflen
FIELD	5191:1	5191:1	7	buflen
LEAF_NODE	5191:1	5191:1	8	buflen
ASSIGN_OP	5191:7	5191:7	6	=
LEAF_NODE	5191:7	5191:7	7	=
RVAL	5191:8	5191:8	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_icccs )
FUNCTION_CALL	5191:8	5191:77	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_icccs )
CALLEE	5191:8	5191:8	8	snprintf
LEAF_NODE	5191:8	5191:8	9	snprintf
LEAF_NODE	5191:16	5191:16	8	(
ARGUMENT	5191:17	5191:17	8	buffer
FIELD	5191:17	5191:17	9	buffer
LEAF_NODE	5191:17	5191:17	10	buffer
LEAF_NODE	5191:23	5191:23	8	,
ARGUMENT	5191:25	5191:25	8	sizeof ( buffer )
FUNCTION_CALL	5191:25	5191:38	9	sizeof ( buffer )
CALLEE	5191:25	5191:25	10	sizeof
LEAF_NODE	5191:25	5191:25	11	sizeof
LEAF_NODE	5191:31	5191:31	10	(
ARGUMENT	5191:32	5191:32	10	buffer
FIELD	5191:32	5191:32	11	buffer
LEAF_NODE	5191:32	5191:32	12	buffer
LEAF_NODE	5191:38	5191:38	10	)
LEAF_NODE	5191:39	5191:39	8	,
ARGUMENT	5191:41	5191:41	8	"%lu"
FIELD	5191:41	5191:41	9	"%lu"
LEAF_NODE	5191:41	5191:41	10	"%lu"
LEAF_NODE	5191:46	5191:46	8	,
ARGUMENT	5191:48	5191:63	8	( unsigned long ) t2p -> pdf_icccs
LEAF_NODE	5191:48	5191:48	9	(
TYPE_NAME	5191:49	5191:58	9	unsigned long
LEAF_NODE	5191:49	5191:49	10	unsigned
LEAF_NODE	5191:58	5191:58	10	long
LEAF_NODE	5191:62	5191:62	9	)
FIELD	5191:63	5191:68	9	t2p -> pdf_icccs
LEAF_NODE	5191:63	5191:63	10	t2p
LEAF_NODE	5191:66	5191:66	10	->
LEAF_NODE	5191:68	5191:68	10	pdf_icccs
LEAF_NODE	5191:77	5191:77	8	)
LEAF_NODE	5191:78	5191:78	4	;
EXPR_STATEMENT	5192:1	5192:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5192:1	5192:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5192:1	5192:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5192:1	5192:1	6	check_snprintf_ret
LEAF_NODE	5192:1	5192:1	7	check_snprintf_ret
LEAF_NODE	5192:19	5192:19	6	(
ARGUMENT	5192:20	5192:20	6	t2p
FIELD	5192:20	5192:20	7	t2p
LEAF_NODE	5192:20	5192:20	8	t2p
LEAF_NODE	5192:23	5192:23	6	,
ARGUMENT	5192:25	5192:25	6	buflen
FIELD	5192:25	5192:25	7	buflen
LEAF_NODE	5192:25	5192:25	8	buflen
LEAF_NODE	5192:31	5192:31	6	,
ARGUMENT	5192:33	5192:33	6	buffer
FIELD	5192:33	5192:33	7	buffer
LEAF_NODE	5192:33	5192:33	8	buffer
LEAF_NODE	5192:39	5192:39	6	)
LEAF_NODE	5192:40	5192:40	4	;
EXPR_STATEMENT	5193:1	5193:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5193:1	5193:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5193:1	5193:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5193:1	5193:1	6	written
FIELD	5193:1	5193:1	7	written
LEAF_NODE	5193:1	5193:1	8	written
ASSIGN_OP	5193:9	5193:9	6	+=
LEAF_NODE	5193:9	5193:9	7	+=
RVAL	5193:12	5193:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5193:12	5193:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5193:12	5193:12	8	t2pWriteFile
LEAF_NODE	5193:12	5193:12	9	t2pWriteFile
LEAF_NODE	5193:24	5193:24	8	(
ARGUMENT	5193:25	5193:25	8	output
FIELD	5193:25	5193:25	9	output
LEAF_NODE	5193:25	5193:25	10	output
LEAF_NODE	5193:31	5193:31	8	,
ARGUMENT	5193:33	5193:43	8	( tdata_t ) buffer
LEAF_NODE	5193:33	5193:33	9	(
TYPE_NAME	5193:34	5193:34	9	tdata_t
LEAF_NODE	5193:34	5193:34	10	tdata_t
LEAF_NODE	5193:41	5193:41	9	)
FIELD	5193:43	5193:43	9	buffer
LEAF_NODE	5193:43	5193:43	10	buffer
LEAF_NODE	5193:49	5193:49	8	,
ARGUMENT	5193:51	5193:51	8	buflen
FIELD	5193:51	5193:51	9	buflen
LEAF_NODE	5193:51	5193:51	10	buflen
LEAF_NODE	5193:57	5193:57	8	)
LEAF_NODE	5193:58	5193:58	4	;
EXPR_STATEMENT	5194:1	5194:57	3	written += t2pWriteFile ( output , ( tdata_t ) " 0 R] \n" , 7 ) ;
EXPR	5194:1	5194:1	4	written += t2pWriteFile ( output , ( tdata_t ) " 0 R] \n" , 7 )
ASSIGN	5194:1	5194:12	5	written += t2pWriteFile ( output , ( tdata_t ) " 0 R] \n" , 7 )
LVAL	5194:1	5194:1	6	written
FIELD	5194:1	5194:1	7	written
LEAF_NODE	5194:1	5194:1	8	written
ASSIGN_OP	5194:9	5194:9	6	+=
LEAF_NODE	5194:9	5194:9	7	+=
RVAL	5194:12	5194:12	6	t2pWriteFile ( output , ( tdata_t ) " 0 R] \n" , 7 )
FUNCTION_CALL	5194:12	5194:56	7	t2pWriteFile ( output , ( tdata_t ) " 0 R] \n" , 7 )
CALLEE	5194:12	5194:12	8	t2pWriteFile
LEAF_NODE	5194:12	5194:12	9	t2pWriteFile
LEAF_NODE	5194:24	5194:24	8	(
ARGUMENT	5194:25	5194:25	8	output
FIELD	5194:25	5194:25	9	output
LEAF_NODE	5194:25	5194:25	10	output
LEAF_NODE	5194:31	5194:31	8	,
ARGUMENT	5194:33	5194:43	8	( tdata_t ) " 0 R] \n"
LEAF_NODE	5194:33	5194:33	9	(
TYPE_NAME	5194:34	5194:34	9	tdata_t
LEAF_NODE	5194:34	5194:34	10	tdata_t
LEAF_NODE	5194:41	5194:41	9	)
FIELD	5194:43	5194:43	9	" 0 R] \n"
LEAF_NODE	5194:43	5194:43	10	" 0 R] \n"
LEAF_NODE	5194:53	5194:53	8	,
ARGUMENT	5194:55	5194:55	8	7
FIELD	5194:55	5194:55	9	7
LEAF_NODE	5194:55	5194:55	10	7
LEAF_NODE	5194:56	5194:56	8	)
LEAF_NODE	5194:57	5194:57	4	;
LEAF_NODE	5196:1	5196:1	3	return
LEAF_NODE	5196:7	5196:7	3	(
LEAF_NODE	5196:8	5196:8	3	written
LEAF_NODE	5196:15	5196:15	3	)
LEAF_NODE	5196:16	5196:16	3	;
LEAF_NODE	5197:0	5197:0	2	}
FUNCTION_DEF	5199:0	5216:0	1	
RETURN_TYPE	5199:0	5199:0	2	tsize_t
TYPE_NAME	5199:0	5199:0	3	tsize_t
LEAF_NODE	5199:0	5199:0	4	tsize_t
FUNCTION_NAME	5199:8	5199:8	2	t2p_write_pdf_xobject_icccs_dict
LEAF_NODE	5199:8	5199:8	3	t2p_write_pdf_xobject_icccs_dict
PARAMETER_LIST	5199:40	5199:63	2	( T2P * t2p , TIFF * output )
LEAF_NODE	5199:40	5199:40	3	(
PARAMETER_DECL	5199:41	5199:46	3	T2P * t2p
TYPE	5199:41	5199:44	4	T2P *
TYPE_NAME	5199:41	5199:41	5	T2P
LEAF_NODE	5199:41	5199:41	6	T2P
POINTER	5199:44	5199:44	5	*
LEAF_NODE	5199:44	5199:44	6	*
NAME	5199:46	5199:46	4	t2p
LEAF_NODE	5199:46	5199:46	5	t2p
LEAF_NODE	5199:49	5199:49	3	,
PARAMETER_DECL	5199:51	5199:57	3	TIFF * output
TYPE	5199:51	5199:55	4	TIFF *
TYPE_NAME	5199:51	5199:51	5	TIFF
LEAF_NODE	5199:51	5199:51	6	TIFF
POINTER	5199:55	5199:55	5	*
LEAF_NODE	5199:55	5199:55	6	*
NAME	5199:57	5199:57	4	output
LEAF_NODE	5199:57	5199:57	5	output
LEAF_NODE	5199:63	5199:63	3	)
LEAF_NODE	5199:64	5199:64	2	{
STATEMENTS	5201:1	5215:16	2	
SIMPLE_DECL	5201:1	5201:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5201:1	5201:9	4	tsize_t written ; written = 0
TYPE	5201:1	5201:1	5	tsize_t
TYPE_NAME	5201:1	5201:1	6	tsize_t
LEAF_NODE	5201:1	5201:1	7	tsize_t
NAME	5201:9	5201:9	5	written
LEAF_NODE	5201:9	5201:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5201:9	5201:9	5	written = 0
ASSIGN	5201:9	5201:17	6	written = 0
LVAL	5201:9	5201:9	7	written
NAME	5201:9	5201:9	8	written
LEAF_NODE	5201:9	5201:9	9	written
ASSIGN_OP	5201:16	5201:16	7	=
LEAF_NODE	5201:16	5201:16	8	=
RVAL	5201:17	5201:17	7	0
FIELD	5201:17	5201:17	8	0
LEAF_NODE	5201:17	5201:17	9	0
LEAF_NODE	5201:18	5201:18	4	;
SIMPLE_DECL	5202:1	5202:16	3	char [ 32 ] buffer ;
VAR_DECL	5202:1	5202:6	4	char [ 32 ] buffer
TYPE	5202:1	5202:12	5	char [ 32 ]
TYPE_NAME	5202:1	5202:1	6	char
LEAF_NODE	5202:1	5202:1	7	char
TYPE_SUFFIX	5202:12	5202:15	6	[ 32 ]
LEAF_NODE	5202:12	5202:12	7	[
FIELD	5202:13	5202:13	7	32
LEAF_NODE	5202:13	5202:13	8	32
LEAF_NODE	5202:15	5202:15	7	]
NAME	5202:6	5202:6	5	buffer
LEAF_NODE	5202:6	5202:6	6	buffer
LEAF_NODE	5202:16	5202:16	4	;
SIMPLE_DECL	5203:1	5203:13	3	int buflen ; buflen = 0 ;
VAR_DECL	5203:1	5203:5	4	int buflen ; buflen = 0
TYPE	5203:1	5203:1	5	int
TYPE_NAME	5203:1	5203:1	6	int
LEAF_NODE	5203:1	5203:1	7	int
NAME	5203:5	5203:5	5	buflen
LEAF_NODE	5203:5	5203:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	5203:5	5203:5	5	buflen = 0
ASSIGN	5203:5	5203:12	6	buflen = 0
LVAL	5203:5	5203:5	7	buflen
NAME	5203:5	5203:5	8	buflen
LEAF_NODE	5203:5	5203:5	9	buflen
ASSIGN_OP	5203:11	5203:11	7	=
LEAF_NODE	5203:11	5203:11	8	=
RVAL	5203:12	5203:12	7	0
FIELD	5203:12	5203:12	8	0
LEAF_NODE	5203:12	5203:12	9	0
LEAF_NODE	5203:13	5203:13	4	;
EXPR_STATEMENT	5205:1	5205:52	3	written += t2pWriteFile ( output , ( tdata_t ) "/N " , 3 ) ;
EXPR	5205:1	5205:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/N " , 3 )
ASSIGN	5205:1	5205:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/N " , 3 )
LVAL	5205:1	5205:1	6	written
FIELD	5205:1	5205:1	7	written
LEAF_NODE	5205:1	5205:1	8	written
ASSIGN_OP	5205:9	5205:9	6	+=
LEAF_NODE	5205:9	5205:9	7	+=
RVAL	5205:12	5205:12	6	t2pWriteFile ( output , ( tdata_t ) "/N " , 3 )
FUNCTION_CALL	5205:12	5205:51	7	t2pWriteFile ( output , ( tdata_t ) "/N " , 3 )
CALLEE	5205:12	5205:12	8	t2pWriteFile
LEAF_NODE	5205:12	5205:12	9	t2pWriteFile
LEAF_NODE	5205:24	5205:24	8	(
ARGUMENT	5205:25	5205:25	8	output
FIELD	5205:25	5205:25	9	output
LEAF_NODE	5205:25	5205:25	10	output
LEAF_NODE	5205:31	5205:31	8	,
ARGUMENT	5205:33	5205:43	8	( tdata_t ) "/N "
LEAF_NODE	5205:33	5205:33	9	(
TYPE_NAME	5205:34	5205:34	9	tdata_t
LEAF_NODE	5205:34	5205:34	10	tdata_t
LEAF_NODE	5205:41	5205:41	9	)
FIELD	5205:43	5205:43	9	"/N "
LEAF_NODE	5205:43	5205:43	10	"/N "
LEAF_NODE	5205:48	5205:48	8	,
ARGUMENT	5205:50	5205:50	8	3
FIELD	5205:50	5205:50	9	3
LEAF_NODE	5205:50	5205:50	10	3
LEAF_NODE	5205:51	5205:51	8	)
LEAF_NODE	5205:52	5205:52	4	;
EXPR_STATEMENT	5206:1	5206:76	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u \n" , t2p -> tiff_samplesperpixel ) ;
EXPR	5206:1	5206:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u \n" , t2p -> tiff_samplesperpixel )
ASSIGN	5206:1	5206:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u \n" , t2p -> tiff_samplesperpixel )
LVAL	5206:1	5206:1	6	buflen
FIELD	5206:1	5206:1	7	buflen
LEAF_NODE	5206:1	5206:1	8	buflen
ASSIGN_OP	5206:7	5206:7	6	=
LEAF_NODE	5206:7	5206:7	7	=
RVAL	5206:8	5206:8	6	snprintf ( buffer , sizeof ( buffer ) , "%u \n" , t2p -> tiff_samplesperpixel )
FUNCTION_CALL	5206:8	5206:75	7	snprintf ( buffer , sizeof ( buffer ) , "%u \n" , t2p -> tiff_samplesperpixel )
CALLEE	5206:8	5206:8	8	snprintf
LEAF_NODE	5206:8	5206:8	9	snprintf
LEAF_NODE	5206:16	5206:16	8	(
ARGUMENT	5206:17	5206:17	8	buffer
FIELD	5206:17	5206:17	9	buffer
LEAF_NODE	5206:17	5206:17	10	buffer
LEAF_NODE	5206:23	5206:23	8	,
ARGUMENT	5206:25	5206:25	8	sizeof ( buffer )
FUNCTION_CALL	5206:25	5206:38	9	sizeof ( buffer )
CALLEE	5206:25	5206:25	10	sizeof
LEAF_NODE	5206:25	5206:25	11	sizeof
LEAF_NODE	5206:31	5206:31	10	(
ARGUMENT	5206:32	5206:32	10	buffer
FIELD	5206:32	5206:32	11	buffer
LEAF_NODE	5206:32	5206:32	12	buffer
LEAF_NODE	5206:38	5206:38	10	)
LEAF_NODE	5206:39	5206:39	8	,
ARGUMENT	5206:41	5206:41	8	"%u \n"
FIELD	5206:41	5206:41	9	"%u \n"
LEAF_NODE	5206:41	5206:41	10	"%u \n"
LEAF_NODE	5206:48	5206:48	8	,
ARGUMENT	5206:50	5206:50	8	t2p -> tiff_samplesperpixel
FIELD	5206:50	5206:55	9	t2p -> tiff_samplesperpixel
LEAF_NODE	5206:50	5206:50	10	t2p
LEAF_NODE	5206:53	5206:53	10	->
LEAF_NODE	5206:55	5206:55	10	tiff_samplesperpixel
LEAF_NODE	5206:75	5206:75	8	)
LEAF_NODE	5206:76	5206:76	4	;
EXPR_STATEMENT	5207:1	5207:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5207:1	5207:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5207:1	5207:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5207:1	5207:1	6	check_snprintf_ret
LEAF_NODE	5207:1	5207:1	7	check_snprintf_ret
LEAF_NODE	5207:19	5207:19	6	(
ARGUMENT	5207:20	5207:20	6	t2p
FIELD	5207:20	5207:20	7	t2p
LEAF_NODE	5207:20	5207:20	8	t2p
LEAF_NODE	5207:23	5207:23	6	,
ARGUMENT	5207:25	5207:25	6	buflen
FIELD	5207:25	5207:25	7	buflen
LEAF_NODE	5207:25	5207:25	8	buflen
LEAF_NODE	5207:31	5207:31	6	,
ARGUMENT	5207:33	5207:33	6	buffer
FIELD	5207:33	5207:33	7	buffer
LEAF_NODE	5207:33	5207:33	8	buffer
LEAF_NODE	5207:39	5207:39	6	)
LEAF_NODE	5207:40	5207:40	4	;
EXPR_STATEMENT	5208:1	5208:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5208:1	5208:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5208:1	5208:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5208:1	5208:1	6	written
FIELD	5208:1	5208:1	7	written
LEAF_NODE	5208:1	5208:1	8	written
ASSIGN_OP	5208:9	5208:9	6	+=
LEAF_NODE	5208:9	5208:9	7	+=
RVAL	5208:12	5208:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5208:12	5208:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5208:12	5208:12	8	t2pWriteFile
LEAF_NODE	5208:12	5208:12	9	t2pWriteFile
LEAF_NODE	5208:24	5208:24	8	(
ARGUMENT	5208:25	5208:25	8	output
FIELD	5208:25	5208:25	9	output
LEAF_NODE	5208:25	5208:25	10	output
LEAF_NODE	5208:31	5208:31	8	,
ARGUMENT	5208:33	5208:43	8	( tdata_t ) buffer
LEAF_NODE	5208:33	5208:33	9	(
TYPE_NAME	5208:34	5208:34	9	tdata_t
LEAF_NODE	5208:34	5208:34	10	tdata_t
LEAF_NODE	5208:41	5208:41	9	)
FIELD	5208:43	5208:43	9	buffer
LEAF_NODE	5208:43	5208:43	10	buffer
LEAF_NODE	5208:49	5208:49	8	,
ARGUMENT	5208:51	5208:51	8	buflen
FIELD	5208:51	5208:51	9	buflen
LEAF_NODE	5208:51	5208:51	10	buflen
LEAF_NODE	5208:57	5208:57	8	)
LEAF_NODE	5208:58	5208:58	4	;
EXPR_STATEMENT	5209:1	5209:61	3	written += t2pWriteFile ( output , ( tdata_t ) "/Alternate " , 11 ) ;
EXPR	5209:1	5209:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/Alternate " , 11 )
ASSIGN	5209:1	5209:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/Alternate " , 11 )
LVAL	5209:1	5209:1	6	written
FIELD	5209:1	5209:1	7	written
LEAF_NODE	5209:1	5209:1	8	written
ASSIGN_OP	5209:9	5209:9	6	+=
LEAF_NODE	5209:9	5209:9	7	+=
RVAL	5209:12	5209:12	6	t2pWriteFile ( output , ( tdata_t ) "/Alternate " , 11 )
FUNCTION_CALL	5209:12	5209:60	7	t2pWriteFile ( output , ( tdata_t ) "/Alternate " , 11 )
CALLEE	5209:12	5209:12	8	t2pWriteFile
LEAF_NODE	5209:12	5209:12	9	t2pWriteFile
LEAF_NODE	5209:24	5209:24	8	(
ARGUMENT	5209:25	5209:25	8	output
FIELD	5209:25	5209:25	9	output
LEAF_NODE	5209:25	5209:25	10	output
LEAF_NODE	5209:31	5209:31	8	,
ARGUMENT	5209:33	5209:43	8	( tdata_t ) "/Alternate "
LEAF_NODE	5209:33	5209:33	9	(
TYPE_NAME	5209:34	5209:34	9	tdata_t
LEAF_NODE	5209:34	5209:34	10	tdata_t
LEAF_NODE	5209:41	5209:41	9	)
FIELD	5209:43	5209:43	9	"/Alternate "
LEAF_NODE	5209:43	5209:43	10	"/Alternate "
LEAF_NODE	5209:56	5209:56	8	,
ARGUMENT	5209:58	5209:58	8	11
FIELD	5209:58	5209:58	9	11
LEAF_NODE	5209:58	5209:58	10	11
LEAF_NODE	5209:60	5209:60	8	)
LEAF_NODE	5209:61	5209:61	4	;
EXPR_STATEMENT	5210:1	5210:39	3	t2p -> pdf_colorspace ^= T2P_CS_ICCBASED ;
EXPR	5210:1	5210:1	4	t2p -> pdf_colorspace ^= T2P_CS_ICCBASED
ASSIGN	5210:1	5210:24	5	t2p -> pdf_colorspace ^= T2P_CS_ICCBASED
LVAL	5210:1	5210:1	6	t2p -> pdf_colorspace
FIELD	5210:1	5210:6	7	t2p -> pdf_colorspace
LEAF_NODE	5210:1	5210:1	8	t2p
LEAF_NODE	5210:4	5210:4	8	->
LEAF_NODE	5210:6	5210:6	8	pdf_colorspace
ASSIGN_OP	5210:21	5210:21	6	^=
LEAF_NODE	5210:21	5210:21	7	^=
RVAL	5210:24	5210:24	6	T2P_CS_ICCBASED
FIELD	5210:24	5210:24	7	T2P_CS_ICCBASED
LEAF_NODE	5210:24	5210:24	8	T2P_CS_ICCBASED
LEAF_NODE	5210:39	5210:39	4	;
EXPR_STATEMENT	5211:1	5211:49	3	written += t2p_write_pdf_xobject_cs ( t2p , output ) ;
EXPR	5211:1	5211:1	4	written += t2p_write_pdf_xobject_cs ( t2p , output )
ASSIGN	5211:1	5211:12	5	written += t2p_write_pdf_xobject_cs ( t2p , output )
LVAL	5211:1	5211:1	6	written
FIELD	5211:1	5211:1	7	written
LEAF_NODE	5211:1	5211:1	8	written
ASSIGN_OP	5211:9	5211:9	6	+=
LEAF_NODE	5211:9	5211:9	7	+=
RVAL	5211:12	5211:12	6	t2p_write_pdf_xobject_cs ( t2p , output )
FUNCTION_CALL	5211:12	5211:48	7	t2p_write_pdf_xobject_cs ( t2p , output )
CALLEE	5211:12	5211:12	8	t2p_write_pdf_xobject_cs
LEAF_NODE	5211:12	5211:12	9	t2p_write_pdf_xobject_cs
LEAF_NODE	5211:36	5211:36	8	(
ARGUMENT	5211:37	5211:37	8	t2p
FIELD	5211:37	5211:37	9	t2p
LEAF_NODE	5211:37	5211:37	10	t2p
LEAF_NODE	5211:40	5211:40	8	,
ARGUMENT	5211:42	5211:42	8	output
FIELD	5211:42	5211:42	9	output
LEAF_NODE	5211:42	5211:42	10	output
LEAF_NODE	5211:48	5211:48	8	)
LEAF_NODE	5211:49	5211:49	4	;
EXPR_STATEMENT	5212:1	5212:39	3	t2p -> pdf_colorspace |= T2P_CS_ICCBASED ;
EXPR	5212:1	5212:1	4	t2p -> pdf_colorspace |= T2P_CS_ICCBASED
ASSIGN	5212:1	5212:24	5	t2p -> pdf_colorspace |= T2P_CS_ICCBASED
LVAL	5212:1	5212:1	6	t2p -> pdf_colorspace
FIELD	5212:1	5212:6	7	t2p -> pdf_colorspace
LEAF_NODE	5212:1	5212:1	8	t2p
LEAF_NODE	5212:4	5212:4	8	->
LEAF_NODE	5212:6	5212:6	8	pdf_colorspace
ASSIGN_OP	5212:21	5212:21	6	|=
LEAF_NODE	5212:21	5212:21	7	|=
RVAL	5212:24	5212:24	6	T2P_CS_ICCBASED
FIELD	5212:24	5212:24	7	T2P_CS_ICCBASED
LEAF_NODE	5212:24	5212:24	8	T2P_CS_ICCBASED
LEAF_NODE	5212:39	5212:39	4	;
EXPR_STATEMENT	5213:1	5213:76	3	written += t2p_write_pdf_stream_dict ( t2p -> tiff_iccprofilelength , 0 , output ) ;
EXPR	5213:1	5213:1	4	written += t2p_write_pdf_stream_dict ( t2p -> tiff_iccprofilelength , 0 , output )
ASSIGN	5213:1	5213:12	5	written += t2p_write_pdf_stream_dict ( t2p -> tiff_iccprofilelength , 0 , output )
LVAL	5213:1	5213:1	6	written
FIELD	5213:1	5213:1	7	written
LEAF_NODE	5213:1	5213:1	8	written
ASSIGN_OP	5213:9	5213:9	6	+=
LEAF_NODE	5213:9	5213:9	7	+=
RVAL	5213:12	5213:12	6	t2p_write_pdf_stream_dict ( t2p -> tiff_iccprofilelength , 0 , output )
FUNCTION_CALL	5213:12	5213:75	7	t2p_write_pdf_stream_dict ( t2p -> tiff_iccprofilelength , 0 , output )
CALLEE	5213:12	5213:12	8	t2p_write_pdf_stream_dict
LEAF_NODE	5213:12	5213:12	9	t2p_write_pdf_stream_dict
LEAF_NODE	5213:37	5213:37	8	(
ARGUMENT	5213:38	5213:38	8	t2p -> tiff_iccprofilelength
FIELD	5213:38	5213:43	9	t2p -> tiff_iccprofilelength
LEAF_NODE	5213:38	5213:38	10	t2p
LEAF_NODE	5213:41	5213:41	10	->
LEAF_NODE	5213:43	5213:43	10	tiff_iccprofilelength
LEAF_NODE	5213:64	5213:64	8	,
ARGUMENT	5213:66	5213:66	8	0
FIELD	5213:66	5213:66	9	0
LEAF_NODE	5213:66	5213:66	10	0
LEAF_NODE	5213:67	5213:67	8	,
ARGUMENT	5213:69	5213:69	8	output
FIELD	5213:69	5213:69	9	output
LEAF_NODE	5213:69	5213:69	10	output
LEAF_NODE	5213:75	5213:75	8	)
LEAF_NODE	5213:76	5213:76	4	;
LEAF_NODE	5215:1	5215:1	3	return
LEAF_NODE	5215:7	5215:7	3	(
LEAF_NODE	5215:8	5215:8	3	written
LEAF_NODE	5215:15	5215:15	3	)
LEAF_NODE	5215:16	5215:16	3	;
LEAF_NODE	5216:0	5216:0	2	}
FUNCTION_DEF	5218:0	5228:0	1	
RETURN_TYPE	5218:0	5218:0	2	tsize_t
TYPE_NAME	5218:0	5218:0	3	tsize_t
LEAF_NODE	5218:0	5218:0	4	tsize_t
FUNCTION_NAME	5218:8	5218:8	2	t2p_write_pdf_xobject_icccs_stream
LEAF_NODE	5218:8	5218:8	3	t2p_write_pdf_xobject_icccs_stream
PARAMETER_LIST	5218:42	5218:65	2	( T2P * t2p , TIFF * output )
LEAF_NODE	5218:42	5218:42	3	(
PARAMETER_DECL	5218:43	5218:48	3	T2P * t2p
TYPE	5218:43	5218:46	4	T2P *
TYPE_NAME	5218:43	5218:43	5	T2P
LEAF_NODE	5218:43	5218:43	6	T2P
POINTER	5218:46	5218:46	5	*
LEAF_NODE	5218:46	5218:46	6	*
NAME	5218:48	5218:48	4	t2p
LEAF_NODE	5218:48	5218:48	5	t2p
LEAF_NODE	5218:51	5218:51	3	,
PARAMETER_DECL	5218:53	5218:59	3	TIFF * output
TYPE	5218:53	5218:57	4	TIFF *
TYPE_NAME	5218:53	5218:53	5	TIFF
LEAF_NODE	5218:53	5218:53	6	TIFF
POINTER	5218:57	5218:57	5	*
LEAF_NODE	5218:57	5218:57	6	*
NAME	5218:59	5218:59	4	output
LEAF_NODE	5218:59	5218:59	5	output
LEAF_NODE	5218:65	5218:65	3	)
LEAF_NODE	5218:66	5218:66	2	{
STATEMENTS	5220:1	5227:16	2	
SIMPLE_DECL	5220:1	5220:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5220:1	5220:9	4	tsize_t written ; written = 0
TYPE	5220:1	5220:1	5	tsize_t
TYPE_NAME	5220:1	5220:1	6	tsize_t
LEAF_NODE	5220:1	5220:1	7	tsize_t
NAME	5220:9	5220:9	5	written
LEAF_NODE	5220:9	5220:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5220:9	5220:9	5	written = 0
ASSIGN	5220:9	5220:17	6	written = 0
LVAL	5220:9	5220:9	7	written
NAME	5220:9	5220:9	8	written
LEAF_NODE	5220:9	5220:9	9	written
ASSIGN_OP	5220:16	5220:16	7	=
LEAF_NODE	5220:16	5220:16	8	=
RVAL	5220:17	5220:17	7	0
FIELD	5220:17	5220:17	8	0
LEAF_NODE	5220:17	5220:17	9	0
LEAF_NODE	5220:18	5220:18	4	;
EXPR_STATEMENT	5222:1	5225:11	3	written += t2p_write_pdf_stream ( ( tdata_t ) t2p -> tiff_iccprofile , ( tsize_t ) t2p -> tiff_iccprofilelength , output ) ;
EXPR	5222:1	5222:1	4	written += t2p_write_pdf_stream ( ( tdata_t ) t2p -> tiff_iccprofile , ( tsize_t ) t2p -> tiff_iccprofilelength , output )
ASSIGN	5222:1	5222:12	5	written += t2p_write_pdf_stream ( ( tdata_t ) t2p -> tiff_iccprofile , ( tsize_t ) t2p -> tiff_iccprofilelength , output )
LVAL	5222:1	5222:1	6	written
FIELD	5222:1	5222:1	7	written
LEAF_NODE	5222:1	5222:1	8	written
ASSIGN_OP	5222:9	5222:9	6	+=
LEAF_NODE	5222:9	5222:9	7	+=
RVAL	5222:12	5222:12	6	t2p_write_pdf_stream ( ( tdata_t ) t2p -> tiff_iccprofile , ( tsize_t ) t2p -> tiff_iccprofilelength , output )
FUNCTION_CALL	5222:12	5225:10	7	t2p_write_pdf_stream ( ( tdata_t ) t2p -> tiff_iccprofile , ( tsize_t ) t2p -> tiff_iccprofilelength , output )
CALLEE	5222:12	5222:12	8	t2p_write_pdf_stream
LEAF_NODE	5222:12	5222:12	9	t2p_write_pdf_stream
LEAF_NODE	5222:32	5222:32	8	(
ARGUMENT	5223:4	5223:14	8	( tdata_t ) t2p -> tiff_iccprofile
LEAF_NODE	5223:4	5223:4	9	(
TYPE_NAME	5223:5	5223:5	9	tdata_t
LEAF_NODE	5223:5	5223:5	10	tdata_t
LEAF_NODE	5223:12	5223:12	9	)
FIELD	5223:14	5223:19	9	t2p -> tiff_iccprofile
LEAF_NODE	5223:14	5223:14	10	t2p
LEAF_NODE	5223:17	5223:17	10	->
LEAF_NODE	5223:19	5223:19	10	tiff_iccprofile
LEAF_NODE	5223:34	5223:34	8	,
ARGUMENT	5224:4	5224:14	8	( tsize_t ) t2p -> tiff_iccprofilelength
LEAF_NODE	5224:4	5224:4	9	(
TYPE_NAME	5224:5	5224:5	9	tsize_t
LEAF_NODE	5224:5	5224:5	10	tsize_t
LEAF_NODE	5224:12	5224:12	9	)
FIELD	5224:14	5224:19	9	t2p -> tiff_iccprofilelength
LEAF_NODE	5224:14	5224:14	10	t2p
LEAF_NODE	5224:17	5224:17	10	->
LEAF_NODE	5224:19	5224:19	10	tiff_iccprofilelength
LEAF_NODE	5224:40	5224:40	8	,
ARGUMENT	5225:4	5225:4	8	output
FIELD	5225:4	5225:4	9	output
LEAF_NODE	5225:4	5225:4	10	output
LEAF_NODE	5225:10	5225:10	8	)
LEAF_NODE	5225:11	5225:11	4	;
LEAF_NODE	5227:1	5227:1	3	return
LEAF_NODE	5227:7	5227:7	3	(
LEAF_NODE	5227:8	5227:8	3	written
LEAF_NODE	5227:15	5227:15	3	)
LEAF_NODE	5227:16	5227:16	3	;
LEAF_NODE	5228:0	5228:0	2	}
FUNCTION_DEF	5234:0	5244:0	1	
RETURN_TYPE	5234:0	5234:0	2	tsize_t
TYPE_NAME	5234:0	5234:0	3	tsize_t
LEAF_NODE	5234:0	5234:0	4	tsize_t
FUNCTION_NAME	5234:8	5234:8	2	t2p_write_pdf_xobject_palettecs_stream
LEAF_NODE	5234:8	5234:8	3	t2p_write_pdf_xobject_palettecs_stream
PARAMETER_LIST	5234:46	5234:69	2	( T2P * t2p , TIFF * output )
LEAF_NODE	5234:46	5234:46	3	(
PARAMETER_DECL	5234:47	5234:52	3	T2P * t2p
TYPE	5234:47	5234:50	4	T2P *
TYPE_NAME	5234:47	5234:47	5	T2P
LEAF_NODE	5234:47	5234:47	6	T2P
POINTER	5234:50	5234:50	5	*
LEAF_NODE	5234:50	5234:50	6	*
NAME	5234:52	5234:52	4	t2p
LEAF_NODE	5234:52	5234:52	5	t2p
LEAF_NODE	5234:55	5234:55	3	,
PARAMETER_DECL	5234:57	5234:63	3	TIFF * output
TYPE	5234:57	5234:61	4	TIFF *
TYPE_NAME	5234:57	5234:57	5	TIFF
LEAF_NODE	5234:57	5234:57	6	TIFF
POINTER	5234:61	5234:61	5	*
LEAF_NODE	5234:61	5234:61	6	*
NAME	5234:63	5234:63	4	output
LEAF_NODE	5234:63	5234:63	5	output
LEAF_NODE	5234:69	5234:69	3	)
LEAF_NODE	5234:70	5234:70	2	{
STATEMENTS	5236:1	5243:16	2	
SIMPLE_DECL	5236:1	5236:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5236:1	5236:9	4	tsize_t written ; written = 0
TYPE	5236:1	5236:1	5	tsize_t
TYPE_NAME	5236:1	5236:1	6	tsize_t
LEAF_NODE	5236:1	5236:1	7	tsize_t
NAME	5236:9	5236:9	5	written
LEAF_NODE	5236:9	5236:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5236:9	5236:9	5	written = 0
ASSIGN	5236:9	5236:17	6	written = 0
LVAL	5236:9	5236:9	7	written
NAME	5236:9	5236:9	8	written
LEAF_NODE	5236:9	5236:9	9	written
ASSIGN_OP	5236:16	5236:16	7	=
LEAF_NODE	5236:16	5236:16	8	=
RVAL	5236:17	5236:17	7	0
FIELD	5236:17	5236:17	8	0
LEAF_NODE	5236:17	5236:17	9	0
LEAF_NODE	5236:18	5236:18	4	;
EXPR_STATEMENT	5238:1	5241:11	3	written += t2p_write_pdf_stream ( ( tdata_t ) t2p -> pdf_palette , ( tsize_t ) t2p -> pdf_palettesize , output ) ;
EXPR	5238:1	5238:1	4	written += t2p_write_pdf_stream ( ( tdata_t ) t2p -> pdf_palette , ( tsize_t ) t2p -> pdf_palettesize , output )
ASSIGN	5238:1	5238:12	5	written += t2p_write_pdf_stream ( ( tdata_t ) t2p -> pdf_palette , ( tsize_t ) t2p -> pdf_palettesize , output )
LVAL	5238:1	5238:1	6	written
FIELD	5238:1	5238:1	7	written
LEAF_NODE	5238:1	5238:1	8	written
ASSIGN_OP	5238:9	5238:9	6	+=
LEAF_NODE	5238:9	5238:9	7	+=
RVAL	5238:12	5238:12	6	t2p_write_pdf_stream ( ( tdata_t ) t2p -> pdf_palette , ( tsize_t ) t2p -> pdf_palettesize , output )
FUNCTION_CALL	5238:12	5241:10	7	t2p_write_pdf_stream ( ( tdata_t ) t2p -> pdf_palette , ( tsize_t ) t2p -> pdf_palettesize , output )
CALLEE	5238:12	5238:12	8	t2p_write_pdf_stream
LEAF_NODE	5238:12	5238:12	9	t2p_write_pdf_stream
LEAF_NODE	5238:32	5238:32	8	(
ARGUMENT	5239:4	5239:14	8	( tdata_t ) t2p -> pdf_palette
LEAF_NODE	5239:4	5239:4	9	(
TYPE_NAME	5239:5	5239:5	9	tdata_t
LEAF_NODE	5239:5	5239:5	10	tdata_t
LEAF_NODE	5239:12	5239:12	9	)
FIELD	5239:14	5239:19	9	t2p -> pdf_palette
LEAF_NODE	5239:14	5239:14	10	t2p
LEAF_NODE	5239:17	5239:17	10	->
LEAF_NODE	5239:19	5239:19	10	pdf_palette
LEAF_NODE	5239:30	5239:30	8	,
ARGUMENT	5240:4	5240:14	8	( tsize_t ) t2p -> pdf_palettesize
LEAF_NODE	5240:4	5240:4	9	(
TYPE_NAME	5240:5	5240:5	9	tsize_t
LEAF_NODE	5240:5	5240:5	10	tsize_t
LEAF_NODE	5240:12	5240:12	9	)
FIELD	5240:14	5240:19	9	t2p -> pdf_palettesize
LEAF_NODE	5240:14	5240:14	10	t2p
LEAF_NODE	5240:17	5240:17	10	->
LEAF_NODE	5240:19	5240:19	10	pdf_palettesize
LEAF_NODE	5240:34	5240:34	8	,
ARGUMENT	5241:4	5241:4	8	output
FIELD	5241:4	5241:4	9	output
LEAF_NODE	5241:4	5241:4	10	output
LEAF_NODE	5241:10	5241:10	8	)
LEAF_NODE	5241:11	5241:11	4	;
LEAF_NODE	5243:1	5243:1	3	return
LEAF_NODE	5243:7	5243:7	3	(
LEAF_NODE	5243:8	5243:8	3	written
LEAF_NODE	5243:15	5243:15	3	)
LEAF_NODE	5243:16	5243:16	3	;
LEAF_NODE	5244:0	5244:0	2	}
FUNCTION_DEF	5250:0	5262:0	1	
RETURN_TYPE	5250:0	5250:0	2	tsize_t
TYPE_NAME	5250:0	5250:0	3	tsize_t
LEAF_NODE	5250:0	5250:0	4	tsize_t
FUNCTION_NAME	5250:8	5250:8	2	t2p_write_pdf_xobject_decode
LEAF_NODE	5250:8	5250:8	3	t2p_write_pdf_xobject_decode
PARAMETER_LIST	5250:36	5250:59	2	( T2P * t2p , TIFF * output )
LEAF_NODE	5250:36	5250:36	3	(
PARAMETER_DECL	5250:37	5250:42	3	T2P * t2p
TYPE	5250:37	5250:40	4	T2P *
TYPE_NAME	5250:37	5250:37	5	T2P
LEAF_NODE	5250:37	5250:37	6	T2P
POINTER	5250:40	5250:40	5	*
LEAF_NODE	5250:40	5250:40	6	*
NAME	5250:42	5250:42	4	t2p
LEAF_NODE	5250:42	5250:42	5	t2p
LEAF_NODE	5250:45	5250:45	3	,
PARAMETER_DECL	5250:47	5250:53	3	TIFF * output
TYPE	5250:47	5250:51	4	TIFF *
TYPE_NAME	5250:47	5250:47	5	TIFF
LEAF_NODE	5250:47	5250:47	6	TIFF
POINTER	5250:51	5250:51	5	*
LEAF_NODE	5250:51	5250:51	6	*
NAME	5250:53	5250:53	4	output
LEAF_NODE	5250:53	5250:53	5	output
LEAF_NODE	5250:59	5250:59	3	)
LEAF_NODE	5250:60	5250:60	2	{
STATEMENTS	5252:1	5261:16	2	
SIMPLE_DECL	5252:1	5252:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5252:1	5252:9	4	tsize_t written ; written = 0
TYPE	5252:1	5252:1	5	tsize_t
TYPE_NAME	5252:1	5252:1	6	tsize_t
LEAF_NODE	5252:1	5252:1	7	tsize_t
NAME	5252:9	5252:9	5	written
LEAF_NODE	5252:9	5252:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5252:9	5252:9	5	written = 0
ASSIGN	5252:9	5252:17	6	written = 0
LVAL	5252:9	5252:9	7	written
NAME	5252:9	5252:9	8	written
LEAF_NODE	5252:9	5252:9	9	written
ASSIGN_OP	5252:16	5252:16	7	=
LEAF_NODE	5252:16	5252:16	8	=
RVAL	5252:17	5252:17	7	0
FIELD	5252:17	5252:17	8	0
LEAF_NODE	5252:17	5252:17	9	0
LEAF_NODE	5252:18	5252:18	4	;
SIMPLE_DECL	5253:1	5253:8	3	int i ; i = 0 ;
VAR_DECL	5253:1	5253:5	4	int i ; i = 0
TYPE	5253:1	5253:1	5	int
TYPE_NAME	5253:1	5253:1	6	int
LEAF_NODE	5253:1	5253:1	7	int
NAME	5253:5	5253:5	5	i
LEAF_NODE	5253:5	5253:5	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	5253:5	5253:5	5	i = 0
ASSIGN	5253:5	5253:7	6	i = 0
LVAL	5253:5	5253:5	7	i
NAME	5253:5	5253:5	8	i
LEAF_NODE	5253:5	5253:5	9	i
ASSIGN_OP	5253:6	5253:6	7	=
LEAF_NODE	5253:6	5253:6	8	=
RVAL	5253:7	5253:7	7	0
FIELD	5253:7	5253:7	8	0
LEAF_NODE	5253:7	5253:7	9	0
LEAF_NODE	5253:8	5253:8	4	;
EXPR_STATEMENT	5255:1	5255:60	3	written += t2pWriteFile ( output , ( tdata_t ) "/Decode [ " , 10 ) ;
EXPR	5255:1	5255:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/Decode [ " , 10 )
ASSIGN	5255:1	5255:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/Decode [ " , 10 )
LVAL	5255:1	5255:1	6	written
FIELD	5255:1	5255:1	7	written
LEAF_NODE	5255:1	5255:1	8	written
ASSIGN_OP	5255:9	5255:9	6	+=
LEAF_NODE	5255:9	5255:9	7	+=
RVAL	5255:12	5255:12	6	t2pWriteFile ( output , ( tdata_t ) "/Decode [ " , 10 )
FUNCTION_CALL	5255:12	5255:59	7	t2pWriteFile ( output , ( tdata_t ) "/Decode [ " , 10 )
CALLEE	5255:12	5255:12	8	t2pWriteFile
LEAF_NODE	5255:12	5255:12	9	t2pWriteFile
LEAF_NODE	5255:24	5255:24	8	(
ARGUMENT	5255:25	5255:25	8	output
FIELD	5255:25	5255:25	9	output
LEAF_NODE	5255:25	5255:25	10	output
LEAF_NODE	5255:31	5255:31	8	,
ARGUMENT	5255:33	5255:43	8	( tdata_t ) "/Decode [ "
LEAF_NODE	5255:33	5255:33	9	(
TYPE_NAME	5255:34	5255:34	9	tdata_t
LEAF_NODE	5255:34	5255:34	10	tdata_t
LEAF_NODE	5255:41	5255:41	9	)
FIELD	5255:43	5255:43	9	"/Decode [ "
LEAF_NODE	5255:43	5255:43	10	"/Decode [ "
LEAF_NODE	5255:55	5255:55	8	,
ARGUMENT	5255:57	5255:57	8	10
FIELD	5255:57	5255:57	9	10
LEAF_NODE	5255:57	5255:57	10	10
LEAF_NODE	5255:59	5255:59	8	)
LEAF_NODE	5255:60	5255:60	4	;
ITERATION	5256:1	5256:42	3	
KEYWORD	5256:1	5256:1	4	for
LEAF_NODE	5256:1	5256:1	5	for
LEAF_NODE	5256:5	5256:5	4	(
FOR_INIT	5256:6	5256:9	4	i = 0 ;
EXPR	5256:6	5256:6	5	i = 0
ASSIGN	5256:6	5256:8	6	i = 0
LVAL	5256:6	5256:6	7	i
FIELD	5256:6	5256:6	8	i
LEAF_NODE	5256:6	5256:6	9	i
ASSIGN_OP	5256:7	5256:7	7	=
LEAF_NODE	5256:7	5256:7	8	=
RVAL	5256:8	5256:8	7	0
FIELD	5256:8	5256:8	8	0
LEAF_NODE	5256:8	5256:8	9	0
LEAF_NODE	5256:9	5256:9	5	;
CONDITION	5256:10	5256:10	4	i < t2p -> tiff_samplesperpixel
EXPR	5256:10	5256:12	5	i < t2p -> tiff_samplesperpixel
FIELD	5256:10	5256:10	6	i
LEAF_NODE	5256:10	5256:10	7	i
REL_OPERATOR	5256:11	5256:11	6	<
LEAF_NODE	5256:11	5256:11	7	<
FIELD	5256:12	5256:17	6	t2p -> tiff_samplesperpixel
LEAF_NODE	5256:12	5256:12	7	t2p
LEAF_NODE	5256:15	5256:15	7	->
LEAF_NODE	5256:17	5256:17	7	tiff_samplesperpixel
LEAF_NODE	5256:37	5256:37	4	;
FOR_EXPR	5256:38	5256:38	4	i ++
EXPR	5256:38	5256:38	5	i ++
FIELD	5256:38	5256:39	6	i ++
LEAF_NODE	5256:38	5256:38	7	i
LEAF_NODE	5256:39	5256:39	7	++
LEAF_NODE	5256:41	5256:41	4	)
STATEMENTS	5256:42	5258:1	4	
LEAF_NODE	5256:42	5256:42	5	{
STATEMENTS	5257:2	5257:2	5	
EXPR_STATEMENT	5257:2	5257:54	6	written += t2pWriteFile ( output , ( tdata_t ) "1 0 " , 4 ) ;
EXPR	5257:2	5257:2	7	written += t2pWriteFile ( output , ( tdata_t ) "1 0 " , 4 )
ASSIGN	5257:2	5257:13	8	written += t2pWriteFile ( output , ( tdata_t ) "1 0 " , 4 )
LVAL	5257:2	5257:2	9	written
FIELD	5257:2	5257:2	10	written
LEAF_NODE	5257:2	5257:2	11	written
ASSIGN_OP	5257:10	5257:10	9	+=
LEAF_NODE	5257:10	5257:10	10	+=
RVAL	5257:13	5257:13	9	t2pWriteFile ( output , ( tdata_t ) "1 0 " , 4 )
FUNCTION_CALL	5257:13	5257:53	10	t2pWriteFile ( output , ( tdata_t ) "1 0 " , 4 )
CALLEE	5257:13	5257:13	11	t2pWriteFile
LEAF_NODE	5257:13	5257:13	12	t2pWriteFile
LEAF_NODE	5257:25	5257:25	11	(
ARGUMENT	5257:26	5257:26	11	output
FIELD	5257:26	5257:26	12	output
LEAF_NODE	5257:26	5257:26	13	output
LEAF_NODE	5257:32	5257:32	11	,
ARGUMENT	5257:34	5257:44	11	( tdata_t ) "1 0 "
LEAF_NODE	5257:34	5257:34	12	(
TYPE_NAME	5257:35	5257:35	12	tdata_t
LEAF_NODE	5257:35	5257:35	13	tdata_t
LEAF_NODE	5257:42	5257:42	12	)
FIELD	5257:44	5257:44	12	"1 0 "
LEAF_NODE	5257:44	5257:44	13	"1 0 "
LEAF_NODE	5257:50	5257:50	11	,
ARGUMENT	5257:52	5257:52	11	4
FIELD	5257:52	5257:52	12	4
LEAF_NODE	5257:52	5257:52	13	4
LEAF_NODE	5257:53	5257:53	11	)
LEAF_NODE	5257:54	5257:54	7	;
LEAF_NODE	5258:1	5258:1	5	}
EXPR_STATEMENT	5259:1	5259:52	3	written += t2pWriteFile ( output , ( tdata_t ) "]\n" , 2 ) ;
EXPR	5259:1	5259:1	4	written += t2pWriteFile ( output , ( tdata_t ) "]\n" , 2 )
ASSIGN	5259:1	5259:12	5	written += t2pWriteFile ( output , ( tdata_t ) "]\n" , 2 )
LVAL	5259:1	5259:1	6	written
FIELD	5259:1	5259:1	7	written
LEAF_NODE	5259:1	5259:1	8	written
ASSIGN_OP	5259:9	5259:9	6	+=
LEAF_NODE	5259:9	5259:9	7	+=
RVAL	5259:12	5259:12	6	t2pWriteFile ( output , ( tdata_t ) "]\n" , 2 )
FUNCTION_CALL	5259:12	5259:51	7	t2pWriteFile ( output , ( tdata_t ) "]\n" , 2 )
CALLEE	5259:12	5259:12	8	t2pWriteFile
LEAF_NODE	5259:12	5259:12	9	t2pWriteFile
LEAF_NODE	5259:24	5259:24	8	(
ARGUMENT	5259:25	5259:25	8	output
FIELD	5259:25	5259:25	9	output
LEAF_NODE	5259:25	5259:25	10	output
LEAF_NODE	5259:31	5259:31	8	,
ARGUMENT	5259:33	5259:43	8	( tdata_t ) "]\n"
LEAF_NODE	5259:33	5259:33	9	(
TYPE_NAME	5259:34	5259:34	9	tdata_t
LEAF_NODE	5259:34	5259:34	10	tdata_t
LEAF_NODE	5259:41	5259:41	9	)
FIELD	5259:43	5259:43	9	"]\n"
LEAF_NODE	5259:43	5259:43	10	"]\n"
LEAF_NODE	5259:48	5259:48	8	,
ARGUMENT	5259:50	5259:50	8	2
FIELD	5259:50	5259:50	9	2
LEAF_NODE	5259:50	5259:50	10	2
LEAF_NODE	5259:51	5259:51	8	)
LEAF_NODE	5259:52	5259:52	4	;
LEAF_NODE	5261:1	5261:1	3	return
LEAF_NODE	5261:7	5261:7	3	(
LEAF_NODE	5261:8	5261:8	3	written
LEAF_NODE	5261:15	5261:15	3	)
LEAF_NODE	5261:16	5261:16	3	;
LEAF_NODE	5262:0	5262:0	2	}
FUNCTION_DEF	5269:0	5371:0	1	
RETURN_TYPE	5269:0	5269:0	2	tsize_t
TYPE_NAME	5269:0	5269:0	3	tsize_t
LEAF_NODE	5269:0	5269:0	4	tsize_t
FUNCTION_NAME	5269:8	5269:8	2	t2p_write_pdf_xobject_stream_filter
LEAF_NODE	5269:8	5269:8	3	t2p_write_pdf_xobject_stream_filter
PARAMETER_LIST	5269:43	5269:80	2	( ttile_t tile , T2P * t2p , TIFF * output )
LEAF_NODE	5269:43	5269:43	3	(
PARAMETER_DECL	5269:44	5269:52	3	ttile_t tile
TYPE	5269:44	5269:44	4	ttile_t
TYPE_NAME	5269:44	5269:44	5	ttile_t
LEAF_NODE	5269:44	5269:44	6	ttile_t
NAME	5269:52	5269:52	4	tile
LEAF_NODE	5269:52	5269:52	5	tile
LEAF_NODE	5269:56	5269:56	3	,
PARAMETER_DECL	5269:58	5269:63	3	T2P * t2p
TYPE	5269:58	5269:61	4	T2P *
TYPE_NAME	5269:58	5269:58	5	T2P
LEAF_NODE	5269:58	5269:58	6	T2P
POINTER	5269:61	5269:61	5	*
LEAF_NODE	5269:61	5269:61	6	*
NAME	5269:63	5269:63	4	t2p
LEAF_NODE	5269:63	5269:63	5	t2p
LEAF_NODE	5269:66	5269:66	3	,
PARAMETER_DECL	5269:68	5269:74	3	TIFF * output
TYPE	5269:68	5269:72	4	TIFF *
TYPE_NAME	5269:68	5269:68	5	TIFF
LEAF_NODE	5269:68	5269:68	6	TIFF
POINTER	5269:72	5269:72	5	*
LEAF_NODE	5269:72	5269:72	6	*
NAME	5269:74	5269:74	4	output
LEAF_NODE	5269:74	5269:74	5	output
LEAF_NODE	5269:80	5269:80	3	)
LEAF_NODE	5269:81	5269:81	2	{
STATEMENTS	5271:1	5370:16	2	
SIMPLE_DECL	5271:1	5271:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5271:1	5271:9	4	tsize_t written ; written = 0
TYPE	5271:1	5271:1	5	tsize_t
TYPE_NAME	5271:1	5271:1	6	tsize_t
LEAF_NODE	5271:1	5271:1	7	tsize_t
NAME	5271:9	5271:9	5	written
LEAF_NODE	5271:9	5271:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5271:9	5271:9	5	written = 0
ASSIGN	5271:9	5271:17	6	written = 0
LVAL	5271:9	5271:9	7	written
NAME	5271:9	5271:9	8	written
LEAF_NODE	5271:9	5271:9	9	written
ASSIGN_OP	5271:16	5271:16	7	=
LEAF_NODE	5271:16	5271:16	8	=
RVAL	5271:17	5271:17	7	0
FIELD	5271:17	5271:17	8	0
LEAF_NODE	5271:17	5271:17	9	0
LEAF_NODE	5271:18	5271:18	4	;
SIMPLE_DECL	5272:1	5272:16	3	char [ 32 ] buffer ;
VAR_DECL	5272:1	5272:6	4	char [ 32 ] buffer
TYPE	5272:1	5272:12	5	char [ 32 ]
TYPE_NAME	5272:1	5272:1	6	char
LEAF_NODE	5272:1	5272:1	7	char
TYPE_SUFFIX	5272:12	5272:15	6	[ 32 ]
LEAF_NODE	5272:12	5272:12	7	[
FIELD	5272:13	5272:13	7	32
LEAF_NODE	5272:13	5272:13	8	32
LEAF_NODE	5272:15	5272:15	7	]
NAME	5272:6	5272:6	5	buffer
LEAF_NODE	5272:6	5272:6	6	buffer
LEAF_NODE	5272:16	5272:16	4	;
SIMPLE_DECL	5273:1	5273:13	3	int buflen ; buflen = 0 ;
VAR_DECL	5273:1	5273:5	4	int buflen ; buflen = 0
TYPE	5273:1	5273:1	5	int
TYPE_NAME	5273:1	5273:1	6	int
LEAF_NODE	5273:1	5273:1	7	int
NAME	5273:5	5273:5	5	buflen
LEAF_NODE	5273:5	5273:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	5273:5	5273:5	5	buflen = 0
ASSIGN	5273:5	5273:12	6	buflen = 0
LVAL	5273:5	5273:5	7	buflen
NAME	5273:5	5273:5	8	buflen
LEAF_NODE	5273:5	5273:5	9	buflen
ASSIGN_OP	5273:11	5273:11	7	=
LEAF_NODE	5273:11	5273:11	8	=
RVAL	5273:12	5273:12	7	0
FIELD	5273:12	5273:12	8	0
LEAF_NODE	5273:12	5273:12	9	0
LEAF_NODE	5273:13	5273:13	4	;
SELECTION	5275:1	5275:44	3	
KEYWORD	5275:1	5275:1	4	if
LEAF_NODE	5275:1	5275:1	5	if
LEAF_NODE	5275:3	5275:3	4	(
CONDITION	5275:4	5275:4	4	t2p -> pdf_compression == T2P_COMPRESS_NONE
EXPR	5275:4	5275:26	5	t2p -> pdf_compression == T2P_COMPRESS_NONE
FIELD	5275:4	5275:9	6	t2p -> pdf_compression
LEAF_NODE	5275:4	5275:4	7	t2p
LEAF_NODE	5275:7	5275:7	7	->
LEAF_NODE	5275:9	5275:9	7	pdf_compression
EQ_OPERATOR	5275:24	5275:24	6	==
LEAF_NODE	5275:24	5275:24	7	==
FIELD	5275:26	5275:26	6	T2P_COMPRESS_NONE
LEAF_NODE	5275:26	5275:26	7	T2P_COMPRESS_NONE
LEAF_NODE	5275:43	5275:43	4	)
STATEMENTS	5275:44	5277:1	4	
LEAF_NODE	5275:44	5275:44	5	{
STATEMENTS	5276:2	5276:17	5	
LEAF_NODE	5276:2	5276:2	6	return
LEAF_NODE	5276:8	5276:8	6	(
LEAF_NODE	5276:9	5276:9	6	written
LEAF_NODE	5276:16	5276:16	6	)
LEAF_NODE	5276:17	5276:17	6	;
LEAF_NODE	5277:1	5277:1	5	}
EXPR_STATEMENT	5278:1	5278:57	3	written += t2pWriteFile ( output , ( tdata_t ) "/Filter " , 8 ) ;
EXPR	5278:1	5278:1	4	written += t2pWriteFile ( output , ( tdata_t ) "/Filter " , 8 )
ASSIGN	5278:1	5278:12	5	written += t2pWriteFile ( output , ( tdata_t ) "/Filter " , 8 )
LVAL	5278:1	5278:1	6	written
FIELD	5278:1	5278:1	7	written
LEAF_NODE	5278:1	5278:1	8	written
ASSIGN_OP	5278:9	5278:9	6	+=
LEAF_NODE	5278:9	5278:9	7	+=
RVAL	5278:12	5278:12	6	t2pWriteFile ( output , ( tdata_t ) "/Filter " , 8 )
FUNCTION_CALL	5278:12	5278:56	7	t2pWriteFile ( output , ( tdata_t ) "/Filter " , 8 )
CALLEE	5278:12	5278:12	8	t2pWriteFile
LEAF_NODE	5278:12	5278:12	9	t2pWriteFile
LEAF_NODE	5278:24	5278:24	8	(
ARGUMENT	5278:25	5278:25	8	output
FIELD	5278:25	5278:25	9	output
LEAF_NODE	5278:25	5278:25	10	output
LEAF_NODE	5278:31	5278:31	8	,
ARGUMENT	5278:33	5278:43	8	( tdata_t ) "/Filter "
LEAF_NODE	5278:33	5278:33	9	(
TYPE_NAME	5278:34	5278:34	9	tdata_t
LEAF_NODE	5278:34	5278:34	10	tdata_t
LEAF_NODE	5278:41	5278:41	9	)
FIELD	5278:43	5278:43	9	"/Filter "
LEAF_NODE	5278:43	5278:43	10	"/Filter "
LEAF_NODE	5278:53	5278:53	8	,
ARGUMENT	5278:55	5278:55	8	8
FIELD	5278:55	5278:55	9	8
LEAF_NODE	5278:55	5278:55	10	8
LEAF_NODE	5278:56	5278:56	8	)
LEAF_NODE	5278:57	5278:57	4	;
SELECTION	5279:1	5279:29	3	
KEYWORD	5279:1	5279:1	4	switch
LEAF_NODE	5279:1	5279:1	5	switch
LEAF_NODE	5279:7	5279:7	4	(
CONDITION	5279:8	5279:8	4	t2p -> pdf_compression
EXPR	5279:8	5279:8	5	t2p -> pdf_compression
FIELD	5279:8	5279:13	6	t2p -> pdf_compression
LEAF_NODE	5279:8	5279:8	7	t2p
LEAF_NODE	5279:11	5279:11	7	->
LEAF_NODE	5279:13	5279:13	7	pdf_compression
LEAF_NODE	5279:28	5279:28	4	)
STATEMENTS	5279:29	5368:1	4	
LEAF_NODE	5279:29	5279:29	5	{
STATEMENTS	5281:2	5367:3	5	
LABEL	5281:2	5281:22	6	case T2P_COMPRESS_G4 :
LEAF_NODE	5281:2	5281:2	7	case
LEAF_NODE	5281:7	5281:7	7	T2P_COMPRESS_G4
LEAF_NODE	5281:22	5281:22	7	:
EXPR_STATEMENT	5282:3	5282:68	6	written += t2pWriteFile ( output , ( tdata_t ) "/CCITTFaxDecode " , 16 ) ;
EXPR	5282:3	5282:3	7	written += t2pWriteFile ( output , ( tdata_t ) "/CCITTFaxDecode " , 16 )
ASSIGN	5282:3	5282:14	8	written += t2pWriteFile ( output , ( tdata_t ) "/CCITTFaxDecode " , 16 )
LVAL	5282:3	5282:3	9	written
FIELD	5282:3	5282:3	10	written
LEAF_NODE	5282:3	5282:3	11	written
ASSIGN_OP	5282:11	5282:11	9	+=
LEAF_NODE	5282:11	5282:11	10	+=
RVAL	5282:14	5282:14	9	t2pWriteFile ( output , ( tdata_t ) "/CCITTFaxDecode " , 16 )
FUNCTION_CALL	5282:14	5282:67	10	t2pWriteFile ( output , ( tdata_t ) "/CCITTFaxDecode " , 16 )
CALLEE	5282:14	5282:14	11	t2pWriteFile
LEAF_NODE	5282:14	5282:14	12	t2pWriteFile
LEAF_NODE	5282:26	5282:26	11	(
ARGUMENT	5282:27	5282:27	11	output
FIELD	5282:27	5282:27	12	output
LEAF_NODE	5282:27	5282:27	13	output
LEAF_NODE	5282:33	5282:33	11	,
ARGUMENT	5282:35	5282:45	11	( tdata_t ) "/CCITTFaxDecode "
LEAF_NODE	5282:35	5282:35	12	(
TYPE_NAME	5282:36	5282:36	12	tdata_t
LEAF_NODE	5282:36	5282:36	13	tdata_t
LEAF_NODE	5282:43	5282:43	12	)
FIELD	5282:45	5282:45	12	"/CCITTFaxDecode "
LEAF_NODE	5282:45	5282:45	13	"/CCITTFaxDecode "
LEAF_NODE	5282:63	5282:63	11	,
ARGUMENT	5282:65	5282:65	11	16
FIELD	5282:65	5282:65	12	16
LEAF_NODE	5282:65	5282:65	13	16
LEAF_NODE	5282:67	5282:67	11	)
LEAF_NODE	5282:68	5282:68	7	;
EXPR_STATEMENT	5283:3	5283:65	6	written += t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 ) ;
EXPR	5283:3	5283:3	7	written += t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
ASSIGN	5283:3	5283:14	8	written += t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
LVAL	5283:3	5283:3	9	written
FIELD	5283:3	5283:3	10	written
LEAF_NODE	5283:3	5283:3	11	written
ASSIGN_OP	5283:11	5283:11	9	+=
LEAF_NODE	5283:11	5283:11	10	+=
RVAL	5283:14	5283:14	9	t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
FUNCTION_CALL	5283:14	5283:64	10	t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
CALLEE	5283:14	5283:14	11	t2pWriteFile
LEAF_NODE	5283:14	5283:14	12	t2pWriteFile
LEAF_NODE	5283:26	5283:26	11	(
ARGUMENT	5283:27	5283:27	11	output
FIELD	5283:27	5283:27	12	output
LEAF_NODE	5283:27	5283:27	13	output
LEAF_NODE	5283:33	5283:33	11	,
ARGUMENT	5283:35	5283:45	11	( tdata_t ) "/DecodeParms "
LEAF_NODE	5283:35	5283:35	12	(
TYPE_NAME	5283:36	5283:36	12	tdata_t
LEAF_NODE	5283:36	5283:36	13	tdata_t
LEAF_NODE	5283:43	5283:43	12	)
FIELD	5283:45	5283:45	12	"/DecodeParms "
LEAF_NODE	5283:45	5283:45	13	"/DecodeParms "
LEAF_NODE	5283:60	5283:60	11	,
ARGUMENT	5283:62	5283:62	11	13
FIELD	5283:62	5283:62	12	13
LEAF_NODE	5283:62	5283:62	13	13
LEAF_NODE	5283:64	5283:64	11	)
LEAF_NODE	5283:65	5283:65	7	;
EXPR_STATEMENT	5284:3	5284:60	6	written += t2pWriteFile ( output , ( tdata_t ) "<< /K -1 " , 9 ) ;
EXPR	5284:3	5284:3	7	written += t2pWriteFile ( output , ( tdata_t ) "<< /K -1 " , 9 )
ASSIGN	5284:3	5284:14	8	written += t2pWriteFile ( output , ( tdata_t ) "<< /K -1 " , 9 )
LVAL	5284:3	5284:3	9	written
FIELD	5284:3	5284:3	10	written
LEAF_NODE	5284:3	5284:3	11	written
ASSIGN_OP	5284:11	5284:11	9	+=
LEAF_NODE	5284:11	5284:11	10	+=
RVAL	5284:14	5284:14	9	t2pWriteFile ( output , ( tdata_t ) "<< /K -1 " , 9 )
FUNCTION_CALL	5284:14	5284:59	10	t2pWriteFile ( output , ( tdata_t ) "<< /K -1 " , 9 )
CALLEE	5284:14	5284:14	11	t2pWriteFile
LEAF_NODE	5284:14	5284:14	12	t2pWriteFile
LEAF_NODE	5284:26	5284:26	11	(
ARGUMENT	5284:27	5284:27	11	output
FIELD	5284:27	5284:27	12	output
LEAF_NODE	5284:27	5284:27	13	output
LEAF_NODE	5284:33	5284:33	11	,
ARGUMENT	5284:35	5284:45	11	( tdata_t ) "<< /K -1 "
LEAF_NODE	5284:35	5284:35	12	(
TYPE_NAME	5284:36	5284:36	12	tdata_t
LEAF_NODE	5284:36	5284:36	13	tdata_t
LEAF_NODE	5284:43	5284:43	12	)
FIELD	5284:45	5284:45	12	"<< /K -1 "
LEAF_NODE	5284:45	5284:45	13	"<< /K -1 "
LEAF_NODE	5284:56	5284:56	11	,
ARGUMENT	5284:58	5284:58	11	9
FIELD	5284:58	5284:58	12	9
LEAF_NODE	5284:58	5284:58	13	9
LEAF_NODE	5284:59	5284:59	11	)
LEAF_NODE	5284:60	5284:60	7	;
SELECTION	5285:3	5285:14	6	
KEYWORD	5285:3	5285:3	7	if
LEAF_NODE	5285:3	5285:3	8	if
LEAF_NODE	5285:5	5285:5	7	(
CONDITION	5285:6	5285:6	7	tile == 0
EXPR	5285:6	5285:12	8	tile == 0
FIELD	5285:6	5285:6	9	tile
LEAF_NODE	5285:6	5285:6	10	tile
EQ_OPERATOR	5285:10	5285:10	9	==
LEAF_NODE	5285:10	5285:10	10	==
FIELD	5285:12	5285:12	9	0
LEAF_NODE	5285:12	5285:12	10	0
LEAF_NODE	5285:13	5285:13	7	)
STATEMENTS	5285:14	5296:3	7	
LEAF_NODE	5285:14	5285:14	8	{
STATEMENTS	5286:4	5295:4	8	
EXPR_STATEMENT	5286:4	5286:61	9	written += t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 ) ;
EXPR	5286:4	5286:4	10	written += t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
ASSIGN	5286:4	5286:15	11	written += t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
LVAL	5286:4	5286:4	12	written
FIELD	5286:4	5286:4	13	written
LEAF_NODE	5286:4	5286:4	14	written
ASSIGN_OP	5286:12	5286:12	12	+=
LEAF_NODE	5286:12	5286:12	13	+=
RVAL	5286:15	5286:15	12	t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
FUNCTION_CALL	5286:15	5286:60	13	t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
CALLEE	5286:15	5286:15	14	t2pWriteFile
LEAF_NODE	5286:15	5286:15	15	t2pWriteFile
LEAF_NODE	5286:27	5286:27	14	(
ARGUMENT	5286:28	5286:28	14	output
FIELD	5286:28	5286:28	15	output
LEAF_NODE	5286:28	5286:28	16	output
LEAF_NODE	5286:34	5286:34	14	,
ARGUMENT	5286:36	5286:46	14	( tdata_t ) "/Columns "
LEAF_NODE	5286:36	5286:36	15	(
TYPE_NAME	5286:37	5286:37	15	tdata_t
LEAF_NODE	5286:37	5286:37	16	tdata_t
LEAF_NODE	5286:44	5286:44	15	)
FIELD	5286:46	5286:46	15	"/Columns "
LEAF_NODE	5286:46	5286:46	16	"/Columns "
LEAF_NODE	5286:57	5286:57	14	,
ARGUMENT	5286:59	5286:59	14	9
FIELD	5286:59	5286:59	15	9
LEAF_NODE	5286:59	5286:59	16	9
LEAF_NODE	5286:60	5286:60	14	)
LEAF_NODE	5286:61	5286:61	10	;
EXPR_STATEMENT	5287:4	5288:43	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width ) ;
EXPR	5287:4	5287:4	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
ASSIGN	5287:4	5287:11	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
LVAL	5287:4	5287:4	12	buflen
FIELD	5287:4	5287:4	13	buflen
LEAF_NODE	5287:4	5287:4	14	buflen
ASSIGN_OP	5287:10	5287:10	12	=
LEAF_NODE	5287:10	5287:10	13	=
RVAL	5287:11	5287:11	12	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
FUNCTION_CALL	5287:11	5288:42	13	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
CALLEE	5287:11	5287:11	14	snprintf
LEAF_NODE	5287:11	5287:11	15	snprintf
LEAF_NODE	5287:19	5287:19	14	(
ARGUMENT	5287:20	5287:20	14	buffer
FIELD	5287:20	5287:20	15	buffer
LEAF_NODE	5287:20	5287:20	16	buffer
LEAF_NODE	5287:26	5287:26	14	,
ARGUMENT	5287:28	5287:28	14	sizeof ( buffer )
FUNCTION_CALL	5287:28	5287:41	15	sizeof ( buffer )
CALLEE	5287:28	5287:28	16	sizeof
LEAF_NODE	5287:28	5287:28	17	sizeof
LEAF_NODE	5287:34	5287:34	16	(
ARGUMENT	5287:35	5287:35	16	buffer
FIELD	5287:35	5287:35	17	buffer
LEAF_NODE	5287:35	5287:35	18	buffer
LEAF_NODE	5287:41	5287:41	16	)
LEAF_NODE	5287:42	5287:42	14	,
ARGUMENT	5287:44	5287:44	14	"%lu"
FIELD	5287:44	5287:44	15	"%lu"
LEAF_NODE	5287:44	5287:44	16	"%lu"
LEAF_NODE	5287:49	5287:49	14	,
ARGUMENT	5288:12	5288:27	14	( unsigned long ) t2p -> tiff_width
LEAF_NODE	5288:12	5288:12	15	(
TYPE_NAME	5288:13	5288:22	15	unsigned long
LEAF_NODE	5288:13	5288:13	16	unsigned
LEAF_NODE	5288:22	5288:22	16	long
LEAF_NODE	5288:26	5288:26	15	)
FIELD	5288:27	5288:32	15	t2p -> tiff_width
LEAF_NODE	5288:27	5288:27	16	t2p
LEAF_NODE	5288:30	5288:30	16	->
LEAF_NODE	5288:32	5288:32	16	tiff_width
LEAF_NODE	5288:42	5288:42	14	)
LEAF_NODE	5288:43	5288:43	10	;
EXPR_STATEMENT	5289:4	5289:43	9	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5289:4	5289:4	10	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5289:4	5289:42	11	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5289:4	5289:4	12	check_snprintf_ret
LEAF_NODE	5289:4	5289:4	13	check_snprintf_ret
LEAF_NODE	5289:22	5289:22	12	(
ARGUMENT	5289:23	5289:23	12	t2p
FIELD	5289:23	5289:23	13	t2p
LEAF_NODE	5289:23	5289:23	14	t2p
LEAF_NODE	5289:26	5289:26	12	,
ARGUMENT	5289:28	5289:28	12	buflen
FIELD	5289:28	5289:28	13	buflen
LEAF_NODE	5289:28	5289:28	14	buflen
LEAF_NODE	5289:34	5289:34	12	,
ARGUMENT	5289:36	5289:36	12	buffer
FIELD	5289:36	5289:36	13	buffer
LEAF_NODE	5289:36	5289:36	14	buffer
LEAF_NODE	5289:42	5289:42	12	)
LEAF_NODE	5289:43	5289:43	10	;
EXPR_STATEMENT	5290:4	5290:61	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5290:4	5290:4	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5290:4	5290:15	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5290:4	5290:4	12	written
FIELD	5290:4	5290:4	13	written
LEAF_NODE	5290:4	5290:4	14	written
ASSIGN_OP	5290:12	5290:12	12	+=
LEAF_NODE	5290:12	5290:12	13	+=
RVAL	5290:15	5290:15	12	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5290:15	5290:60	13	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5290:15	5290:15	14	t2pWriteFile
LEAF_NODE	5290:15	5290:15	15	t2pWriteFile
LEAF_NODE	5290:27	5290:27	14	(
ARGUMENT	5290:28	5290:28	14	output
FIELD	5290:28	5290:28	15	output
LEAF_NODE	5290:28	5290:28	16	output
LEAF_NODE	5290:34	5290:34	14	,
ARGUMENT	5290:36	5290:46	14	( tdata_t ) buffer
LEAF_NODE	5290:36	5290:36	15	(
TYPE_NAME	5290:37	5290:37	15	tdata_t
LEAF_NODE	5290:37	5290:37	16	tdata_t
LEAF_NODE	5290:44	5290:44	15	)
FIELD	5290:46	5290:46	15	buffer
LEAF_NODE	5290:46	5290:46	16	buffer
LEAF_NODE	5290:52	5290:52	14	,
ARGUMENT	5290:54	5290:54	14	buflen
FIELD	5290:54	5290:54	15	buflen
LEAF_NODE	5290:54	5290:54	16	buflen
LEAF_NODE	5290:60	5290:60	14	)
LEAF_NODE	5290:61	5290:61	10	;
EXPR_STATEMENT	5291:4	5291:59	9	written += t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 ) ;
EXPR	5291:4	5291:4	10	written += t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
ASSIGN	5291:4	5291:15	11	written += t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
LVAL	5291:4	5291:4	12	written
FIELD	5291:4	5291:4	13	written
LEAF_NODE	5291:4	5291:4	14	written
ASSIGN_OP	5291:12	5291:12	12	+=
LEAF_NODE	5291:12	5291:12	13	+=
RVAL	5291:15	5291:15	12	t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
FUNCTION_CALL	5291:15	5291:58	13	t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
CALLEE	5291:15	5291:15	14	t2pWriteFile
LEAF_NODE	5291:15	5291:15	15	t2pWriteFile
LEAF_NODE	5291:27	5291:27	14	(
ARGUMENT	5291:28	5291:28	14	output
FIELD	5291:28	5291:28	15	output
LEAF_NODE	5291:28	5291:28	16	output
LEAF_NODE	5291:34	5291:34	14	,
ARGUMENT	5291:36	5291:46	14	( tdata_t ) " /Rows "
LEAF_NODE	5291:36	5291:36	15	(
TYPE_NAME	5291:37	5291:37	15	tdata_t
LEAF_NODE	5291:37	5291:37	16	tdata_t
LEAF_NODE	5291:44	5291:44	15	)
FIELD	5291:46	5291:46	15	" /Rows "
LEAF_NODE	5291:46	5291:46	16	" /Rows "
LEAF_NODE	5291:55	5291:55	14	,
ARGUMENT	5291:57	5291:57	14	7
FIELD	5291:57	5291:57	15	7
LEAF_NODE	5291:57	5291:57	16	7
LEAF_NODE	5291:58	5291:58	14	)
LEAF_NODE	5291:59	5291:59	10	;
EXPR_STATEMENT	5292:4	5293:44	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_length ) ;
EXPR	5292:4	5292:4	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_length )
ASSIGN	5292:4	5292:11	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_length )
LVAL	5292:4	5292:4	12	buflen
FIELD	5292:4	5292:4	13	buflen
LEAF_NODE	5292:4	5292:4	14	buflen
ASSIGN_OP	5292:10	5292:10	12	=
LEAF_NODE	5292:10	5292:10	13	=
RVAL	5292:11	5292:11	12	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_length )
FUNCTION_CALL	5292:11	5293:43	13	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_length )
CALLEE	5292:11	5292:11	14	snprintf
LEAF_NODE	5292:11	5292:11	15	snprintf
LEAF_NODE	5292:19	5292:19	14	(
ARGUMENT	5292:20	5292:20	14	buffer
FIELD	5292:20	5292:20	15	buffer
LEAF_NODE	5292:20	5292:20	16	buffer
LEAF_NODE	5292:26	5292:26	14	,
ARGUMENT	5292:28	5292:28	14	sizeof ( buffer )
FUNCTION_CALL	5292:28	5292:41	15	sizeof ( buffer )
CALLEE	5292:28	5292:28	16	sizeof
LEAF_NODE	5292:28	5292:28	17	sizeof
LEAF_NODE	5292:34	5292:34	16	(
ARGUMENT	5292:35	5292:35	16	buffer
FIELD	5292:35	5292:35	17	buffer
LEAF_NODE	5292:35	5292:35	18	buffer
LEAF_NODE	5292:41	5292:41	16	)
LEAF_NODE	5292:42	5292:42	14	,
ARGUMENT	5292:44	5292:44	14	"%lu"
FIELD	5292:44	5292:44	15	"%lu"
LEAF_NODE	5292:44	5292:44	16	"%lu"
LEAF_NODE	5292:49	5292:49	14	,
ARGUMENT	5293:12	5293:27	14	( unsigned long ) t2p -> tiff_length
LEAF_NODE	5293:12	5293:12	15	(
TYPE_NAME	5293:13	5293:22	15	unsigned long
LEAF_NODE	5293:13	5293:13	16	unsigned
LEAF_NODE	5293:22	5293:22	16	long
LEAF_NODE	5293:26	5293:26	15	)
FIELD	5293:27	5293:32	15	t2p -> tiff_length
LEAF_NODE	5293:27	5293:27	16	t2p
LEAF_NODE	5293:30	5293:30	16	->
LEAF_NODE	5293:32	5293:32	16	tiff_length
LEAF_NODE	5293:43	5293:43	14	)
LEAF_NODE	5293:44	5293:44	10	;
EXPR_STATEMENT	5294:4	5294:43	9	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5294:4	5294:4	10	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5294:4	5294:42	11	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5294:4	5294:4	12	check_snprintf_ret
LEAF_NODE	5294:4	5294:4	13	check_snprintf_ret
LEAF_NODE	5294:22	5294:22	12	(
ARGUMENT	5294:23	5294:23	12	t2p
FIELD	5294:23	5294:23	13	t2p
LEAF_NODE	5294:23	5294:23	14	t2p
LEAF_NODE	5294:26	5294:26	12	,
ARGUMENT	5294:28	5294:28	12	buflen
FIELD	5294:28	5294:28	13	buflen
LEAF_NODE	5294:28	5294:28	14	buflen
LEAF_NODE	5294:34	5294:34	12	,
ARGUMENT	5294:36	5294:36	12	buffer
FIELD	5294:36	5294:36	13	buffer
LEAF_NODE	5294:36	5294:36	14	buffer
LEAF_NODE	5294:42	5294:42	12	)
LEAF_NODE	5294:43	5294:43	10	;
EXPR_STATEMENT	5295:4	5295:61	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5295:4	5295:4	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5295:4	5295:15	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5295:4	5295:4	12	written
FIELD	5295:4	5295:4	13	written
LEAF_NODE	5295:4	5295:4	14	written
ASSIGN_OP	5295:12	5295:12	12	+=
LEAF_NODE	5295:12	5295:12	13	+=
RVAL	5295:15	5295:15	12	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5295:15	5295:60	13	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5295:15	5295:15	14	t2pWriteFile
LEAF_NODE	5295:15	5295:15	15	t2pWriteFile
LEAF_NODE	5295:27	5295:27	14	(
ARGUMENT	5295:28	5295:28	14	output
FIELD	5295:28	5295:28	15	output
LEAF_NODE	5295:28	5295:28	16	output
LEAF_NODE	5295:34	5295:34	14	,
ARGUMENT	5295:36	5295:46	14	( tdata_t ) buffer
LEAF_NODE	5295:36	5295:36	15	(
TYPE_NAME	5295:37	5295:37	15	tdata_t
LEAF_NODE	5295:37	5295:37	16	tdata_t
LEAF_NODE	5295:44	5295:44	15	)
FIELD	5295:46	5295:46	15	buffer
LEAF_NODE	5295:46	5295:46	16	buffer
LEAF_NODE	5295:52	5295:52	14	,
ARGUMENT	5295:54	5295:54	14	buflen
FIELD	5295:54	5295:54	15	buflen
LEAF_NODE	5295:54	5295:54	16	buflen
LEAF_NODE	5295:60	5295:60	14	)
LEAF_NODE	5295:61	5295:61	10	;
LEAF_NODE	5296:3	5296:3	8	}
SELECTION	5296:5	5296:10	6	
KEYWORD	5296:5	5296:5	7	else
LEAF_NODE	5296:5	5296:5	8	else
STATEMENTS	5296:10	5323:3	7	
LEAF_NODE	5296:10	5296:10	8	{
STATEMENTS	5297:4	5316:6	8	
SELECTION	5297:4	5297:73	9	
KEYWORD	5297:4	5297:4	10	if
LEAF_NODE	5297:4	5297:4	11	if
LEAF_NODE	5297:6	5297:6	10	(
CONDITION	5297:7	5297:7	10	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 ) == 0
EXPR	5297:7	5297:71	11	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 ) == 0
FUNCTION_CALL	5297:7	5297:68	12	t2p_tile_is_right_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 )
CALLEE	5297:7	5297:7	13	t2p_tile_is_right_edge
LEAF_NODE	5297:7	5297:7	14	t2p_tile_is_right_edge
LEAF_NODE	5297:29	5297:29	13	(
ARGUMENT	5297:30	5297:30	13	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	5297:30	5297:59	14	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	5297:30	5297:30	15	t2p
LEAF_NODE	5297:33	5297:33	15	->
LEAF_NODE	5297:35	5297:35	15	tiff_tiles
LEAF_NODE	5297:45	5297:45	15	[
EXPR	5297:46	5297:46	15	t2p -> pdf_page
FIELD	5297:46	5297:51	16	t2p -> pdf_page
LEAF_NODE	5297:46	5297:46	17	t2p
LEAF_NODE	5297:49	5297:49	17	->
LEAF_NODE	5297:51	5297:51	17	pdf_page
LEAF_NODE	5297:59	5297:59	15	]
LEAF_NODE	5297:60	5297:60	13	,
ARGUMENT	5297:62	5297:67	13	tile - 1
FIELD	5297:62	5297:62	14	tile
LEAF_NODE	5297:62	5297:62	15	tile
LEAF_NODE	5297:66	5297:66	14	-
FIELD	5297:67	5297:67	14	1
LEAF_NODE	5297:67	5297:67	15	1
LEAF_NODE	5297:68	5297:68	13	)
EQ_OPERATOR	5297:69	5297:69	12	==
LEAF_NODE	5297:69	5297:69	13	==
FIELD	5297:71	5297:71	12	0
LEAF_NODE	5297:71	5297:71	13	0
LEAF_NODE	5297:72	5297:72	10	)
STATEMENTS	5297:73	5303:4	10	
LEAF_NODE	5297:73	5297:73	11	{
STATEMENTS	5298:5	5302:5	11	
EXPR_STATEMENT	5298:5	5298:62	12	written += t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 ) ;
EXPR	5298:5	5298:5	13	written += t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
ASSIGN	5298:5	5298:16	14	written += t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
LVAL	5298:5	5298:5	15	written
FIELD	5298:5	5298:5	16	written
LEAF_NODE	5298:5	5298:5	17	written
ASSIGN_OP	5298:13	5298:13	15	+=
LEAF_NODE	5298:13	5298:13	16	+=
RVAL	5298:16	5298:16	15	t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
FUNCTION_CALL	5298:16	5298:61	16	t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
CALLEE	5298:16	5298:16	17	t2pWriteFile
LEAF_NODE	5298:16	5298:16	18	t2pWriteFile
LEAF_NODE	5298:28	5298:28	17	(
ARGUMENT	5298:29	5298:29	17	output
FIELD	5298:29	5298:29	18	output
LEAF_NODE	5298:29	5298:29	19	output
LEAF_NODE	5298:35	5298:35	17	,
ARGUMENT	5298:37	5298:47	17	( tdata_t ) "/Columns "
LEAF_NODE	5298:37	5298:37	18	(
TYPE_NAME	5298:38	5298:38	18	tdata_t
LEAF_NODE	5298:38	5298:38	19	tdata_t
LEAF_NODE	5298:45	5298:45	18	)
FIELD	5298:47	5298:47	18	"/Columns "
LEAF_NODE	5298:47	5298:47	19	"/Columns "
LEAF_NODE	5298:58	5298:58	17	,
ARGUMENT	5298:60	5298:60	17	9
FIELD	5298:60	5298:60	18	9
LEAF_NODE	5298:60	5298:60	19	9
LEAF_NODE	5298:61	5298:61	17	)
LEAF_NODE	5298:62	5298:62	13	;
EXPR_STATEMENT	5299:5	5300:68	12	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth ) ;
EXPR	5299:5	5299:5	13	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth )
ASSIGN	5299:5	5299:12	14	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth )
LVAL	5299:5	5299:5	15	buflen
FIELD	5299:5	5299:5	16	buflen
LEAF_NODE	5299:5	5299:5	17	buflen
ASSIGN_OP	5299:11	5299:11	15	=
LEAF_NODE	5299:11	5299:11	16	=
RVAL	5299:12	5299:12	15	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth )
FUNCTION_CALL	5299:12	5300:67	16	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth )
CALLEE	5299:12	5299:12	17	snprintf
LEAF_NODE	5299:12	5299:12	18	snprintf
LEAF_NODE	5299:20	5299:20	17	(
ARGUMENT	5299:21	5299:21	17	buffer
FIELD	5299:21	5299:21	18	buffer
LEAF_NODE	5299:21	5299:21	19	buffer
LEAF_NODE	5299:27	5299:27	17	,
ARGUMENT	5299:29	5299:29	17	sizeof ( buffer )
FUNCTION_CALL	5299:29	5299:42	18	sizeof ( buffer )
CALLEE	5299:29	5299:29	19	sizeof
LEAF_NODE	5299:29	5299:29	20	sizeof
LEAF_NODE	5299:35	5299:35	19	(
ARGUMENT	5299:36	5299:36	19	buffer
FIELD	5299:36	5299:36	20	buffer
LEAF_NODE	5299:36	5299:36	21	buffer
LEAF_NODE	5299:42	5299:42	19	)
LEAF_NODE	5299:43	5299:43	17	,
ARGUMENT	5299:45	5299:45	17	"%lu"
FIELD	5299:45	5299:45	18	"%lu"
LEAF_NODE	5299:45	5299:45	19	"%lu"
LEAF_NODE	5299:50	5299:50	17	,
ARGUMENT	5300:6	5300:21	17	( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	5300:6	5300:6	18	(
TYPE_NAME	5300:7	5300:16	18	unsigned long
LEAF_NODE	5300:7	5300:7	19	unsigned
LEAF_NODE	5300:16	5300:16	19	long
LEAF_NODE	5300:20	5300:20	18	)
FIELD	5300:21	5300:52	18	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilewidth
LEAF_NODE	5300:21	5300:21	19	t2p
LEAF_NODE	5300:24	5300:24	19	->
LEAF_NODE	5300:26	5300:26	19	tiff_tiles
LEAF_NODE	5300:36	5300:36	19	[
EXPR	5300:37	5300:37	19	t2p -> pdf_page
FIELD	5300:37	5300:42	20	t2p -> pdf_page
LEAF_NODE	5300:37	5300:37	21	t2p
LEAF_NODE	5300:40	5300:40	21	->
LEAF_NODE	5300:42	5300:42	21	pdf_page
LEAF_NODE	5300:50	5300:50	19	]
LEAF_NODE	5300:51	5300:51	19	.
LEAF_NODE	5300:52	5300:52	19	tiles_tilewidth
LEAF_NODE	5300:67	5300:67	17	)
LEAF_NODE	5300:68	5300:68	13	;
EXPR_STATEMENT	5301:5	5301:44	12	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5301:5	5301:5	13	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5301:5	5301:43	14	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5301:5	5301:5	15	check_snprintf_ret
LEAF_NODE	5301:5	5301:5	16	check_snprintf_ret
LEAF_NODE	5301:23	5301:23	15	(
ARGUMENT	5301:24	5301:24	15	t2p
FIELD	5301:24	5301:24	16	t2p
LEAF_NODE	5301:24	5301:24	17	t2p
LEAF_NODE	5301:27	5301:27	15	,
ARGUMENT	5301:29	5301:29	15	buflen
FIELD	5301:29	5301:29	16	buflen
LEAF_NODE	5301:29	5301:29	17	buflen
LEAF_NODE	5301:35	5301:35	15	,
ARGUMENT	5301:37	5301:37	15	buffer
FIELD	5301:37	5301:37	16	buffer
LEAF_NODE	5301:37	5301:37	17	buffer
LEAF_NODE	5301:43	5301:43	15	)
LEAF_NODE	5301:44	5301:44	13	;
EXPR_STATEMENT	5302:5	5302:62	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5302:5	5302:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5302:5	5302:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5302:5	5302:5	15	written
FIELD	5302:5	5302:5	16	written
LEAF_NODE	5302:5	5302:5	17	written
ASSIGN_OP	5302:13	5302:13	15	+=
LEAF_NODE	5302:13	5302:13	16	+=
RVAL	5302:16	5302:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5302:16	5302:61	16	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5302:16	5302:16	17	t2pWriteFile
LEAF_NODE	5302:16	5302:16	18	t2pWriteFile
LEAF_NODE	5302:28	5302:28	17	(
ARGUMENT	5302:29	5302:29	17	output
FIELD	5302:29	5302:29	18	output
LEAF_NODE	5302:29	5302:29	19	output
LEAF_NODE	5302:35	5302:35	17	,
ARGUMENT	5302:37	5302:47	17	( tdata_t ) buffer
LEAF_NODE	5302:37	5302:37	18	(
TYPE_NAME	5302:38	5302:38	18	tdata_t
LEAF_NODE	5302:38	5302:38	19	tdata_t
LEAF_NODE	5302:45	5302:45	18	)
FIELD	5302:47	5302:47	18	buffer
LEAF_NODE	5302:47	5302:47	19	buffer
LEAF_NODE	5302:53	5302:53	17	,
ARGUMENT	5302:55	5302:55	17	buflen
FIELD	5302:55	5302:55	18	buflen
LEAF_NODE	5302:55	5302:55	19	buflen
LEAF_NODE	5302:61	5302:61	17	)
LEAF_NODE	5302:62	5302:62	13	;
LEAF_NODE	5303:4	5303:4	11	}
SELECTION	5303:6	5303:11	9	
KEYWORD	5303:6	5303:6	10	else
LEAF_NODE	5303:6	5303:6	11	else
STATEMENTS	5303:11	5309:4	10	
LEAF_NODE	5303:11	5303:11	11	{
STATEMENTS	5304:5	5308:5	11	
EXPR_STATEMENT	5304:5	5304:62	12	written += t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 ) ;
EXPR	5304:5	5304:5	13	written += t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
ASSIGN	5304:5	5304:16	14	written += t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
LVAL	5304:5	5304:5	15	written
FIELD	5304:5	5304:5	16	written
LEAF_NODE	5304:5	5304:5	17	written
ASSIGN_OP	5304:13	5304:13	15	+=
LEAF_NODE	5304:13	5304:13	16	+=
RVAL	5304:16	5304:16	15	t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
FUNCTION_CALL	5304:16	5304:61	16	t2pWriteFile ( output , ( tdata_t ) "/Columns " , 9 )
CALLEE	5304:16	5304:16	17	t2pWriteFile
LEAF_NODE	5304:16	5304:16	18	t2pWriteFile
LEAF_NODE	5304:28	5304:28	17	(
ARGUMENT	5304:29	5304:29	17	output
FIELD	5304:29	5304:29	18	output
LEAF_NODE	5304:29	5304:29	19	output
LEAF_NODE	5304:35	5304:35	17	,
ARGUMENT	5304:37	5304:47	17	( tdata_t ) "/Columns "
LEAF_NODE	5304:37	5304:37	18	(
TYPE_NAME	5304:38	5304:38	18	tdata_t
LEAF_NODE	5304:38	5304:38	19	tdata_t
LEAF_NODE	5304:45	5304:45	18	)
FIELD	5304:47	5304:47	18	"/Columns "
LEAF_NODE	5304:47	5304:47	19	"/Columns "
LEAF_NODE	5304:58	5304:58	17	,
ARGUMENT	5304:60	5304:60	17	9
FIELD	5304:60	5304:60	18	9
LEAF_NODE	5304:60	5304:60	19	9
LEAF_NODE	5304:61	5304:61	17	)
LEAF_NODE	5304:62	5304:62	13	;
EXPR_STATEMENT	5305:5	5306:72	12	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth ) ;
EXPR	5305:5	5305:5	13	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth )
ASSIGN	5305:5	5305:12	14	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth )
LVAL	5305:5	5305:5	15	buflen
FIELD	5305:5	5305:5	16	buflen
LEAF_NODE	5305:5	5305:5	17	buflen
ASSIGN_OP	5305:11	5305:11	15	=
LEAF_NODE	5305:11	5305:11	16	=
RVAL	5305:12	5305:12	15	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth )
FUNCTION_CALL	5305:12	5306:71	16	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth )
CALLEE	5305:12	5305:12	17	snprintf
LEAF_NODE	5305:12	5305:12	18	snprintf
LEAF_NODE	5305:20	5305:20	17	(
ARGUMENT	5305:21	5305:21	17	buffer
FIELD	5305:21	5305:21	18	buffer
LEAF_NODE	5305:21	5305:21	19	buffer
LEAF_NODE	5305:27	5305:27	17	,
ARGUMENT	5305:29	5305:29	17	sizeof ( buffer )
FUNCTION_CALL	5305:29	5305:42	18	sizeof ( buffer )
CALLEE	5305:29	5305:29	19	sizeof
LEAF_NODE	5305:29	5305:29	20	sizeof
LEAF_NODE	5305:35	5305:35	19	(
ARGUMENT	5305:36	5305:36	19	buffer
FIELD	5305:36	5305:36	20	buffer
LEAF_NODE	5305:36	5305:36	21	buffer
LEAF_NODE	5305:42	5305:42	19	)
LEAF_NODE	5305:43	5305:43	17	,
ARGUMENT	5305:45	5305:45	17	"%lu"
FIELD	5305:45	5305:45	18	"%lu"
LEAF_NODE	5305:45	5305:45	19	"%lu"
LEAF_NODE	5305:50	5305:50	17	,
ARGUMENT	5306:6	5306:21	17	( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth
LEAF_NODE	5306:6	5306:6	18	(
TYPE_NAME	5306:7	5306:16	18	unsigned long
LEAF_NODE	5306:7	5306:7	19	unsigned
LEAF_NODE	5306:16	5306:16	19	long
LEAF_NODE	5306:20	5306:20	18	)
FIELD	5306:21	5306:52	18	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilewidth
LEAF_NODE	5306:21	5306:21	19	t2p
LEAF_NODE	5306:24	5306:24	19	->
LEAF_NODE	5306:26	5306:26	19	tiff_tiles
LEAF_NODE	5306:36	5306:36	19	[
EXPR	5306:37	5306:37	19	t2p -> pdf_page
FIELD	5306:37	5306:42	20	t2p -> pdf_page
LEAF_NODE	5306:37	5306:37	21	t2p
LEAF_NODE	5306:40	5306:40	21	->
LEAF_NODE	5306:42	5306:42	21	pdf_page
LEAF_NODE	5306:50	5306:50	19	]
LEAF_NODE	5306:51	5306:51	19	.
LEAF_NODE	5306:52	5306:52	19	tiles_edgetilewidth
LEAF_NODE	5306:71	5306:71	17	)
LEAF_NODE	5306:72	5306:72	13	;
EXPR_STATEMENT	5307:5	5307:44	12	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5307:5	5307:5	13	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5307:5	5307:43	14	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5307:5	5307:5	15	check_snprintf_ret
LEAF_NODE	5307:5	5307:5	16	check_snprintf_ret
LEAF_NODE	5307:23	5307:23	15	(
ARGUMENT	5307:24	5307:24	15	t2p
FIELD	5307:24	5307:24	16	t2p
LEAF_NODE	5307:24	5307:24	17	t2p
LEAF_NODE	5307:27	5307:27	15	,
ARGUMENT	5307:29	5307:29	15	buflen
FIELD	5307:29	5307:29	16	buflen
LEAF_NODE	5307:29	5307:29	17	buflen
LEAF_NODE	5307:35	5307:35	15	,
ARGUMENT	5307:37	5307:37	15	buffer
FIELD	5307:37	5307:37	16	buffer
LEAF_NODE	5307:37	5307:37	17	buffer
LEAF_NODE	5307:43	5307:43	15	)
LEAF_NODE	5307:44	5307:44	13	;
EXPR_STATEMENT	5308:5	5308:62	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5308:5	5308:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5308:5	5308:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5308:5	5308:5	15	written
FIELD	5308:5	5308:5	16	written
LEAF_NODE	5308:5	5308:5	17	written
ASSIGN_OP	5308:13	5308:13	15	+=
LEAF_NODE	5308:13	5308:13	16	+=
RVAL	5308:16	5308:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5308:16	5308:61	16	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5308:16	5308:16	17	t2pWriteFile
LEAF_NODE	5308:16	5308:16	18	t2pWriteFile
LEAF_NODE	5308:28	5308:28	17	(
ARGUMENT	5308:29	5308:29	17	output
FIELD	5308:29	5308:29	18	output
LEAF_NODE	5308:29	5308:29	19	output
LEAF_NODE	5308:35	5308:35	17	,
ARGUMENT	5308:37	5308:47	17	( tdata_t ) buffer
LEAF_NODE	5308:37	5308:37	18	(
TYPE_NAME	5308:38	5308:38	18	tdata_t
LEAF_NODE	5308:38	5308:38	19	tdata_t
LEAF_NODE	5308:45	5308:45	18	)
FIELD	5308:47	5308:47	18	buffer
LEAF_NODE	5308:47	5308:47	19	buffer
LEAF_NODE	5308:53	5308:53	17	,
ARGUMENT	5308:55	5308:55	17	buflen
FIELD	5308:55	5308:55	18	buflen
LEAF_NODE	5308:55	5308:55	19	buflen
LEAF_NODE	5308:61	5308:61	17	)
LEAF_NODE	5308:62	5308:62	13	;
LEAF_NODE	5309:4	5309:4	11	}
SELECTION	5310:4	5310:74	9	
KEYWORD	5310:4	5310:4	10	if
LEAF_NODE	5310:4	5310:4	11	if
LEAF_NODE	5310:6	5310:6	10	(
CONDITION	5310:7	5310:7	10	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 ) == 0
EXPR	5310:7	5310:72	11	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 ) == 0
FUNCTION_CALL	5310:7	5310:69	12	t2p_tile_is_bottom_edge ( t2p -> tiff_tiles [ t2p -> pdf_page ] , tile - 1 )
CALLEE	5310:7	5310:7	13	t2p_tile_is_bottom_edge
LEAF_NODE	5310:7	5310:7	14	t2p_tile_is_bottom_edge
LEAF_NODE	5310:30	5310:30	13	(
ARGUMENT	5310:31	5310:31	13	t2p -> tiff_tiles [ t2p -> pdf_page ]
FIELD	5310:31	5310:60	14	t2p -> tiff_tiles [ t2p -> pdf_page ]
LEAF_NODE	5310:31	5310:31	15	t2p
LEAF_NODE	5310:34	5310:34	15	->
LEAF_NODE	5310:36	5310:36	15	tiff_tiles
LEAF_NODE	5310:46	5310:46	15	[
EXPR	5310:47	5310:47	15	t2p -> pdf_page
FIELD	5310:47	5310:52	16	t2p -> pdf_page
LEAF_NODE	5310:47	5310:47	17	t2p
LEAF_NODE	5310:50	5310:50	17	->
LEAF_NODE	5310:52	5310:52	17	pdf_page
LEAF_NODE	5310:60	5310:60	15	]
LEAF_NODE	5310:61	5310:61	13	,
ARGUMENT	5310:63	5310:68	13	tile - 1
FIELD	5310:63	5310:63	14	tile
LEAF_NODE	5310:63	5310:63	15	tile
LEAF_NODE	5310:67	5310:67	14	-
FIELD	5310:68	5310:68	14	1
LEAF_NODE	5310:68	5310:68	15	1
LEAF_NODE	5310:69	5310:69	13	)
EQ_OPERATOR	5310:70	5310:70	12	==
LEAF_NODE	5310:70	5310:70	13	==
FIELD	5310:72	5310:72	12	0
LEAF_NODE	5310:72	5310:72	13	0
LEAF_NODE	5310:73	5310:73	10	)
STATEMENTS	5310:74	5316:4	10	
LEAF_NODE	5310:74	5310:74	11	{
STATEMENTS	5311:5	5315:5	11	
EXPR_STATEMENT	5311:5	5311:60	12	written += t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 ) ;
EXPR	5311:5	5311:5	13	written += t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
ASSIGN	5311:5	5311:16	14	written += t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
LVAL	5311:5	5311:5	15	written
FIELD	5311:5	5311:5	16	written
LEAF_NODE	5311:5	5311:5	17	written
ASSIGN_OP	5311:13	5311:13	15	+=
LEAF_NODE	5311:13	5311:13	16	+=
RVAL	5311:16	5311:16	15	t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
FUNCTION_CALL	5311:16	5311:59	16	t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
CALLEE	5311:16	5311:16	17	t2pWriteFile
LEAF_NODE	5311:16	5311:16	18	t2pWriteFile
LEAF_NODE	5311:28	5311:28	17	(
ARGUMENT	5311:29	5311:29	17	output
FIELD	5311:29	5311:29	18	output
LEAF_NODE	5311:29	5311:29	19	output
LEAF_NODE	5311:35	5311:35	17	,
ARGUMENT	5311:37	5311:47	17	( tdata_t ) " /Rows "
LEAF_NODE	5311:37	5311:37	18	(
TYPE_NAME	5311:38	5311:38	18	tdata_t
LEAF_NODE	5311:38	5311:38	19	tdata_t
LEAF_NODE	5311:45	5311:45	18	)
FIELD	5311:47	5311:47	18	" /Rows "
LEAF_NODE	5311:47	5311:47	19	" /Rows "
LEAF_NODE	5311:56	5311:56	17	,
ARGUMENT	5311:58	5311:58	17	7
FIELD	5311:58	5311:58	18	7
LEAF_NODE	5311:58	5311:58	19	7
LEAF_NODE	5311:59	5311:59	17	)
LEAF_NODE	5311:60	5311:60	13	;
EXPR_STATEMENT	5312:5	5313:69	12	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength ) ;
EXPR	5312:5	5312:5	13	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
ASSIGN	5312:5	5312:12	14	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
LVAL	5312:5	5312:5	15	buflen
FIELD	5312:5	5312:5	16	buflen
LEAF_NODE	5312:5	5312:5	17	buflen
ASSIGN_OP	5312:11	5312:11	15	=
LEAF_NODE	5312:11	5312:11	16	=
RVAL	5312:12	5312:12	15	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
FUNCTION_CALL	5312:12	5313:68	16	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength )
CALLEE	5312:12	5312:12	17	snprintf
LEAF_NODE	5312:12	5312:12	18	snprintf
LEAF_NODE	5312:20	5312:20	17	(
ARGUMENT	5312:21	5312:21	17	buffer
FIELD	5312:21	5312:21	18	buffer
LEAF_NODE	5312:21	5312:21	19	buffer
LEAF_NODE	5312:27	5312:27	17	,
ARGUMENT	5312:29	5312:29	17	sizeof ( buffer )
FUNCTION_CALL	5312:29	5312:42	18	sizeof ( buffer )
CALLEE	5312:29	5312:29	19	sizeof
LEAF_NODE	5312:29	5312:29	20	sizeof
LEAF_NODE	5312:35	5312:35	19	(
ARGUMENT	5312:36	5312:36	19	buffer
FIELD	5312:36	5312:36	20	buffer
LEAF_NODE	5312:36	5312:36	21	buffer
LEAF_NODE	5312:42	5312:42	19	)
LEAF_NODE	5312:43	5312:43	17	,
ARGUMENT	5312:45	5312:45	17	"%lu"
FIELD	5312:45	5312:45	18	"%lu"
LEAF_NODE	5312:45	5312:45	19	"%lu"
LEAF_NODE	5312:50	5312:50	17	,
ARGUMENT	5313:6	5313:21	17	( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	5313:6	5313:6	18	(
TYPE_NAME	5313:7	5313:16	18	unsigned long
LEAF_NODE	5313:7	5313:7	19	unsigned
LEAF_NODE	5313:16	5313:16	19	long
LEAF_NODE	5313:20	5313:20	18	)
FIELD	5313:21	5313:52	18	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilelength
LEAF_NODE	5313:21	5313:21	19	t2p
LEAF_NODE	5313:24	5313:24	19	->
LEAF_NODE	5313:26	5313:26	19	tiff_tiles
LEAF_NODE	5313:36	5313:36	19	[
EXPR	5313:37	5313:37	19	t2p -> pdf_page
FIELD	5313:37	5313:42	20	t2p -> pdf_page
LEAF_NODE	5313:37	5313:37	21	t2p
LEAF_NODE	5313:40	5313:40	21	->
LEAF_NODE	5313:42	5313:42	21	pdf_page
LEAF_NODE	5313:50	5313:50	19	]
LEAF_NODE	5313:51	5313:51	19	.
LEAF_NODE	5313:52	5313:52	19	tiles_tilelength
LEAF_NODE	5313:68	5313:68	17	)
LEAF_NODE	5313:69	5313:69	13	;
EXPR_STATEMENT	5314:5	5314:44	12	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5314:5	5314:5	13	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5314:5	5314:43	14	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5314:5	5314:5	15	check_snprintf_ret
LEAF_NODE	5314:5	5314:5	16	check_snprintf_ret
LEAF_NODE	5314:23	5314:23	15	(
ARGUMENT	5314:24	5314:24	15	t2p
FIELD	5314:24	5314:24	16	t2p
LEAF_NODE	5314:24	5314:24	17	t2p
LEAF_NODE	5314:27	5314:27	15	,
ARGUMENT	5314:29	5314:29	15	buflen
FIELD	5314:29	5314:29	16	buflen
LEAF_NODE	5314:29	5314:29	17	buflen
LEAF_NODE	5314:35	5314:35	15	,
ARGUMENT	5314:37	5314:37	15	buffer
FIELD	5314:37	5314:37	16	buffer
LEAF_NODE	5314:37	5314:37	17	buffer
LEAF_NODE	5314:43	5314:43	15	)
LEAF_NODE	5314:44	5314:44	13	;
EXPR_STATEMENT	5315:5	5315:62	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5315:5	5315:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5315:5	5315:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5315:5	5315:5	15	written
FIELD	5315:5	5315:5	16	written
LEAF_NODE	5315:5	5315:5	17	written
ASSIGN_OP	5315:13	5315:13	15	+=
LEAF_NODE	5315:13	5315:13	16	+=
RVAL	5315:16	5315:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5315:16	5315:61	16	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5315:16	5315:16	17	t2pWriteFile
LEAF_NODE	5315:16	5315:16	18	t2pWriteFile
LEAF_NODE	5315:28	5315:28	17	(
ARGUMENT	5315:29	5315:29	17	output
FIELD	5315:29	5315:29	18	output
LEAF_NODE	5315:29	5315:29	19	output
LEAF_NODE	5315:35	5315:35	17	,
ARGUMENT	5315:37	5315:47	17	( tdata_t ) buffer
LEAF_NODE	5315:37	5315:37	18	(
TYPE_NAME	5315:38	5315:38	18	tdata_t
LEAF_NODE	5315:38	5315:38	19	tdata_t
LEAF_NODE	5315:45	5315:45	18	)
FIELD	5315:47	5315:47	18	buffer
LEAF_NODE	5315:47	5315:47	19	buffer
LEAF_NODE	5315:53	5315:53	17	,
ARGUMENT	5315:55	5315:55	17	buflen
FIELD	5315:55	5315:55	18	buflen
LEAF_NODE	5315:55	5315:55	19	buflen
LEAF_NODE	5315:61	5315:61	17	)
LEAF_NODE	5315:62	5315:62	13	;
LEAF_NODE	5316:4	5316:4	11	}
SELECTION	5316:6	5316:11	9	
KEYWORD	5316:6	5316:6	10	else
LEAF_NODE	5316:6	5316:6	11	else
STATEMENTS	5316:11	5322:4	10	
LEAF_NODE	5316:11	5316:11	11	{
STATEMENTS	5317:5	5321:5	11	
EXPR_STATEMENT	5317:5	5317:60	12	written += t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 ) ;
EXPR	5317:5	5317:5	13	written += t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
ASSIGN	5317:5	5317:16	14	written += t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
LVAL	5317:5	5317:5	15	written
FIELD	5317:5	5317:5	16	written
LEAF_NODE	5317:5	5317:5	17	written
ASSIGN_OP	5317:13	5317:13	15	+=
LEAF_NODE	5317:13	5317:13	16	+=
RVAL	5317:16	5317:16	15	t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
FUNCTION_CALL	5317:16	5317:59	16	t2pWriteFile ( output , ( tdata_t ) " /Rows " , 7 )
CALLEE	5317:16	5317:16	17	t2pWriteFile
LEAF_NODE	5317:16	5317:16	18	t2pWriteFile
LEAF_NODE	5317:28	5317:28	17	(
ARGUMENT	5317:29	5317:29	17	output
FIELD	5317:29	5317:29	18	output
LEAF_NODE	5317:29	5317:29	19	output
LEAF_NODE	5317:35	5317:35	17	,
ARGUMENT	5317:37	5317:47	17	( tdata_t ) " /Rows "
LEAF_NODE	5317:37	5317:37	18	(
TYPE_NAME	5317:38	5317:38	18	tdata_t
LEAF_NODE	5317:38	5317:38	19	tdata_t
LEAF_NODE	5317:45	5317:45	18	)
FIELD	5317:47	5317:47	18	" /Rows "
LEAF_NODE	5317:47	5317:47	19	" /Rows "
LEAF_NODE	5317:56	5317:56	17	,
ARGUMENT	5317:58	5317:58	17	7
FIELD	5317:58	5317:58	18	7
LEAF_NODE	5317:58	5317:58	19	7
LEAF_NODE	5317:59	5317:59	17	)
LEAF_NODE	5317:60	5317:60	13	;
EXPR_STATEMENT	5318:5	5319:73	12	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength ) ;
EXPR	5318:5	5318:5	13	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
ASSIGN	5318:5	5318:12	14	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
LVAL	5318:5	5318:5	15	buflen
FIELD	5318:5	5318:5	16	buflen
LEAF_NODE	5318:5	5318:5	17	buflen
ASSIGN_OP	5318:11	5318:11	15	=
LEAF_NODE	5318:11	5318:11	16	=
RVAL	5318:12	5318:12	15	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
FUNCTION_CALL	5318:12	5319:72	16	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength )
CALLEE	5318:12	5318:12	17	snprintf
LEAF_NODE	5318:12	5318:12	18	snprintf
LEAF_NODE	5318:20	5318:20	17	(
ARGUMENT	5318:21	5318:21	17	buffer
FIELD	5318:21	5318:21	18	buffer
LEAF_NODE	5318:21	5318:21	19	buffer
LEAF_NODE	5318:27	5318:27	17	,
ARGUMENT	5318:29	5318:29	17	sizeof ( buffer )
FUNCTION_CALL	5318:29	5318:42	18	sizeof ( buffer )
CALLEE	5318:29	5318:29	19	sizeof
LEAF_NODE	5318:29	5318:29	20	sizeof
LEAF_NODE	5318:35	5318:35	19	(
ARGUMENT	5318:36	5318:36	19	buffer
FIELD	5318:36	5318:36	20	buffer
LEAF_NODE	5318:36	5318:36	21	buffer
LEAF_NODE	5318:42	5318:42	19	)
LEAF_NODE	5318:43	5318:43	17	,
ARGUMENT	5318:45	5318:45	17	"%lu"
FIELD	5318:45	5318:45	18	"%lu"
LEAF_NODE	5318:45	5318:45	19	"%lu"
LEAF_NODE	5318:50	5318:50	17	,
ARGUMENT	5319:6	5319:21	17	( unsigned long ) t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength
LEAF_NODE	5319:6	5319:6	18	(
TYPE_NAME	5319:7	5319:16	18	unsigned long
LEAF_NODE	5319:7	5319:7	19	unsigned
LEAF_NODE	5319:16	5319:16	19	long
LEAF_NODE	5319:20	5319:20	18	)
FIELD	5319:21	5319:52	18	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_edgetilelength
LEAF_NODE	5319:21	5319:21	19	t2p
LEAF_NODE	5319:24	5319:24	19	->
LEAF_NODE	5319:26	5319:26	19	tiff_tiles
LEAF_NODE	5319:36	5319:36	19	[
EXPR	5319:37	5319:37	19	t2p -> pdf_page
FIELD	5319:37	5319:42	20	t2p -> pdf_page
LEAF_NODE	5319:37	5319:37	21	t2p
LEAF_NODE	5319:40	5319:40	21	->
LEAF_NODE	5319:42	5319:42	21	pdf_page
LEAF_NODE	5319:50	5319:50	19	]
LEAF_NODE	5319:51	5319:51	19	.
LEAF_NODE	5319:52	5319:52	19	tiles_edgetilelength
LEAF_NODE	5319:72	5319:72	17	)
LEAF_NODE	5319:73	5319:73	13	;
EXPR_STATEMENT	5320:5	5320:44	12	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5320:5	5320:5	13	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5320:5	5320:43	14	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5320:5	5320:5	15	check_snprintf_ret
LEAF_NODE	5320:5	5320:5	16	check_snprintf_ret
LEAF_NODE	5320:23	5320:23	15	(
ARGUMENT	5320:24	5320:24	15	t2p
FIELD	5320:24	5320:24	16	t2p
LEAF_NODE	5320:24	5320:24	17	t2p
LEAF_NODE	5320:27	5320:27	15	,
ARGUMENT	5320:29	5320:29	15	buflen
FIELD	5320:29	5320:29	16	buflen
LEAF_NODE	5320:29	5320:29	17	buflen
LEAF_NODE	5320:35	5320:35	15	,
ARGUMENT	5320:37	5320:37	15	buffer
FIELD	5320:37	5320:37	16	buffer
LEAF_NODE	5320:37	5320:37	17	buffer
LEAF_NODE	5320:43	5320:43	15	)
LEAF_NODE	5320:44	5320:44	13	;
EXPR_STATEMENT	5321:5	5321:62	12	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5321:5	5321:5	13	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5321:5	5321:16	14	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5321:5	5321:5	15	written
FIELD	5321:5	5321:5	16	written
LEAF_NODE	5321:5	5321:5	17	written
ASSIGN_OP	5321:13	5321:13	15	+=
LEAF_NODE	5321:13	5321:13	16	+=
RVAL	5321:16	5321:16	15	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5321:16	5321:61	16	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5321:16	5321:16	17	t2pWriteFile
LEAF_NODE	5321:16	5321:16	18	t2pWriteFile
LEAF_NODE	5321:28	5321:28	17	(
ARGUMENT	5321:29	5321:29	17	output
FIELD	5321:29	5321:29	18	output
LEAF_NODE	5321:29	5321:29	19	output
LEAF_NODE	5321:35	5321:35	17	,
ARGUMENT	5321:37	5321:47	17	( tdata_t ) buffer
LEAF_NODE	5321:37	5321:37	18	(
TYPE_NAME	5321:38	5321:38	18	tdata_t
LEAF_NODE	5321:38	5321:38	19	tdata_t
LEAF_NODE	5321:45	5321:45	18	)
FIELD	5321:47	5321:47	18	buffer
LEAF_NODE	5321:47	5321:47	19	buffer
LEAF_NODE	5321:53	5321:53	17	,
ARGUMENT	5321:55	5321:55	17	buflen
FIELD	5321:55	5321:55	18	buflen
LEAF_NODE	5321:55	5321:55	19	buflen
LEAF_NODE	5321:61	5321:61	17	)
LEAF_NODE	5321:62	5321:62	13	;
LEAF_NODE	5322:4	5322:4	11	}
LEAF_NODE	5323:3	5323:3	8	}
SELECTION	5324:3	5324:33	6	
KEYWORD	5324:3	5324:3	7	if
LEAF_NODE	5324:3	5324:3	8	if
LEAF_NODE	5324:5	5324:5	7	(
CONDITION	5324:6	5324:6	7	t2p -> pdf_switchdecode == 0
EXPR	5324:6	5324:31	8	t2p -> pdf_switchdecode == 0
FIELD	5324:6	5324:11	9	t2p -> pdf_switchdecode
LEAF_NODE	5324:6	5324:6	10	t2p
LEAF_NODE	5324:9	5324:9	10	->
LEAF_NODE	5324:11	5324:11	10	pdf_switchdecode
EQ_OPERATOR	5324:28	5324:28	9	==
LEAF_NODE	5324:28	5324:28	10	==
FIELD	5324:31	5324:31	9	0
LEAF_NODE	5324:31	5324:31	10	0
LEAF_NODE	5324:32	5324:32	7	)
STATEMENTS	5324:33	5326:3	7	
LEAF_NODE	5324:33	5324:33	8	{
STATEMENTS	5325:4	5325:4	8	
EXPR_STATEMENT	5325:4	5325:69	9	written += t2pWriteFile ( output , ( tdata_t ) " /BlackIs1 true " , 16 ) ;
EXPR	5325:4	5325:4	10	written += t2pWriteFile ( output , ( tdata_t ) " /BlackIs1 true " , 16 )
ASSIGN	5325:4	5325:15	11	written += t2pWriteFile ( output , ( tdata_t ) " /BlackIs1 true " , 16 )
LVAL	5325:4	5325:4	12	written
FIELD	5325:4	5325:4	13	written
LEAF_NODE	5325:4	5325:4	14	written
ASSIGN_OP	5325:12	5325:12	12	+=
LEAF_NODE	5325:12	5325:12	13	+=
RVAL	5325:15	5325:15	12	t2pWriteFile ( output , ( tdata_t ) " /BlackIs1 true " , 16 )
FUNCTION_CALL	5325:15	5325:68	13	t2pWriteFile ( output , ( tdata_t ) " /BlackIs1 true " , 16 )
CALLEE	5325:15	5325:15	14	t2pWriteFile
LEAF_NODE	5325:15	5325:15	15	t2pWriteFile
LEAF_NODE	5325:27	5325:27	14	(
ARGUMENT	5325:28	5325:28	14	output
FIELD	5325:28	5325:28	15	output
LEAF_NODE	5325:28	5325:28	16	output
LEAF_NODE	5325:34	5325:34	14	,
ARGUMENT	5325:36	5325:46	14	( tdata_t ) " /BlackIs1 true "
LEAF_NODE	5325:36	5325:36	15	(
TYPE_NAME	5325:37	5325:37	15	tdata_t
LEAF_NODE	5325:37	5325:37	16	tdata_t
LEAF_NODE	5325:44	5325:44	15	)
FIELD	5325:46	5325:46	15	" /BlackIs1 true "
LEAF_NODE	5325:46	5325:46	16	" /BlackIs1 true "
LEAF_NODE	5325:64	5325:64	14	,
ARGUMENT	5325:66	5325:66	14	16
FIELD	5325:66	5325:66	15	16
LEAF_NODE	5325:66	5325:66	16	16
LEAF_NODE	5325:68	5325:68	14	)
LEAF_NODE	5325:69	5325:69	10	;
LEAF_NODE	5326:3	5326:3	8	}
EXPR_STATEMENT	5327:3	5327:55	6	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 ) ;
EXPR	5327:3	5327:3	7	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
ASSIGN	5327:3	5327:14	8	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
LVAL	5327:3	5327:3	9	written
FIELD	5327:3	5327:3	10	written
LEAF_NODE	5327:3	5327:3	11	written
ASSIGN_OP	5327:11	5327:11	9	+=
LEAF_NODE	5327:11	5327:11	10	+=
RVAL	5327:14	5327:14	9	t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
FUNCTION_CALL	5327:14	5327:54	10	t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
CALLEE	5327:14	5327:14	11	t2pWriteFile
LEAF_NODE	5327:14	5327:14	12	t2pWriteFile
LEAF_NODE	5327:26	5327:26	11	(
ARGUMENT	5327:27	5327:27	11	output
FIELD	5327:27	5327:27	12	output
LEAF_NODE	5327:27	5327:27	13	output
LEAF_NODE	5327:33	5327:33	11	,
ARGUMENT	5327:35	5327:45	11	( tdata_t ) ">>\n"
LEAF_NODE	5327:35	5327:35	12	(
TYPE_NAME	5327:36	5327:36	12	tdata_t
LEAF_NODE	5327:36	5327:36	13	tdata_t
LEAF_NODE	5327:43	5327:43	12	)
FIELD	5327:45	5327:45	12	">>\n"
LEAF_NODE	5327:45	5327:45	13	">>\n"
LEAF_NODE	5327:51	5327:51	11	,
ARGUMENT	5327:53	5327:53	11	3
FIELD	5327:53	5327:53	12	3
LEAF_NODE	5327:53	5327:53	13	3
LEAF_NODE	5327:54	5327:54	11	)
LEAF_NODE	5327:55	5327:55	7	;
JUMP_STATEMENT	5328:3	5328:8	6	break DESTINATION ;
KEYWORD	5328:3	5328:3	7	break
LEAF_NODE	5328:3	5328:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5328:8	5328:8	7	;
LABEL	5331:2	5331:24	6	case T2P_COMPRESS_JPEG :
LEAF_NODE	5331:2	5331:2	7	case
LEAF_NODE	5331:7	5331:7	7	T2P_COMPRESS_JPEG
LEAF_NODE	5331:24	5331:24	7	:
EXPR_STATEMENT	5332:3	5332:63	6	written += t2pWriteFile ( output , ( tdata_t ) "/DCTDecode " , 11 ) ;
EXPR	5332:3	5332:3	7	written += t2pWriteFile ( output , ( tdata_t ) "/DCTDecode " , 11 )
ASSIGN	5332:3	5332:14	8	written += t2pWriteFile ( output , ( tdata_t ) "/DCTDecode " , 11 )
LVAL	5332:3	5332:3	9	written
FIELD	5332:3	5332:3	10	written
LEAF_NODE	5332:3	5332:3	11	written
ASSIGN_OP	5332:11	5332:11	9	+=
LEAF_NODE	5332:11	5332:11	10	+=
RVAL	5332:14	5332:14	9	t2pWriteFile ( output , ( tdata_t ) "/DCTDecode " , 11 )
FUNCTION_CALL	5332:14	5332:62	10	t2pWriteFile ( output , ( tdata_t ) "/DCTDecode " , 11 )
CALLEE	5332:14	5332:14	11	t2pWriteFile
LEAF_NODE	5332:14	5332:14	12	t2pWriteFile
LEAF_NODE	5332:26	5332:26	11	(
ARGUMENT	5332:27	5332:27	11	output
FIELD	5332:27	5332:27	12	output
LEAF_NODE	5332:27	5332:27	13	output
LEAF_NODE	5332:33	5332:33	11	,
ARGUMENT	5332:35	5332:45	11	( tdata_t ) "/DCTDecode "
LEAF_NODE	5332:35	5332:35	12	(
TYPE_NAME	5332:36	5332:36	12	tdata_t
LEAF_NODE	5332:36	5332:36	13	tdata_t
LEAF_NODE	5332:43	5332:43	12	)
FIELD	5332:45	5332:45	12	"/DCTDecode "
LEAF_NODE	5332:45	5332:45	13	"/DCTDecode "
LEAF_NODE	5332:58	5332:58	11	,
ARGUMENT	5332:60	5332:60	11	11
FIELD	5332:60	5332:60	12	11
LEAF_NODE	5332:60	5332:60	13	11
LEAF_NODE	5332:62	5332:62	11	)
LEAF_NODE	5332:63	5332:63	7	;
SELECTION	5334:3	5334:50	6	
KEYWORD	5334:3	5334:3	7	if
LEAF_NODE	5334:3	5334:3	8	if
LEAF_NODE	5334:5	5334:5	7	(
CONDITION	5334:6	5334:6	7	t2p -> tiff_photometric != PHOTOMETRIC_YCBCR
EXPR	5334:6	5334:31	8	t2p -> tiff_photometric != PHOTOMETRIC_YCBCR
FIELD	5334:6	5334:11	9	t2p -> tiff_photometric
LEAF_NODE	5334:6	5334:6	10	t2p
LEAF_NODE	5334:9	5334:9	10	->
LEAF_NODE	5334:11	5334:11	10	tiff_photometric
EQ_OPERATOR	5334:28	5334:28	9	!=
LEAF_NODE	5334:28	5334:28	10	!=
FIELD	5334:31	5334:31	9	PHOTOMETRIC_YCBCR
LEAF_NODE	5334:31	5334:31	10	PHOTOMETRIC_YCBCR
LEAF_NODE	5334:48	5334:48	7	)
STATEMENTS	5334:50	5337:3	7	
LEAF_NODE	5334:50	5334:50	8	{
STATEMENTS	5335:4	5336:4	8	
EXPR_STATEMENT	5335:4	5335:66	9	written += t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 ) ;
EXPR	5335:4	5335:4	10	written += t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
ASSIGN	5335:4	5335:15	11	written += t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
LVAL	5335:4	5335:4	12	written
FIELD	5335:4	5335:4	13	written
LEAF_NODE	5335:4	5335:4	14	written
ASSIGN_OP	5335:12	5335:12	12	+=
LEAF_NODE	5335:12	5335:12	13	+=
RVAL	5335:15	5335:15	12	t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
FUNCTION_CALL	5335:15	5335:65	13	t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
CALLEE	5335:15	5335:15	14	t2pWriteFile
LEAF_NODE	5335:15	5335:15	15	t2pWriteFile
LEAF_NODE	5335:27	5335:27	14	(
ARGUMENT	5335:28	5335:28	14	output
FIELD	5335:28	5335:28	15	output
LEAF_NODE	5335:28	5335:28	16	output
LEAF_NODE	5335:34	5335:34	14	,
ARGUMENT	5335:36	5335:46	14	( tdata_t ) "/DecodeParms "
LEAF_NODE	5335:36	5335:36	15	(
TYPE_NAME	5335:37	5335:37	15	tdata_t
LEAF_NODE	5335:37	5335:37	16	tdata_t
LEAF_NODE	5335:44	5335:44	15	)
FIELD	5335:46	5335:46	15	"/DecodeParms "
LEAF_NODE	5335:46	5335:46	16	"/DecodeParms "
LEAF_NODE	5335:61	5335:61	14	,
ARGUMENT	5335:63	5335:63	14	13
FIELD	5335:63	5335:63	15	13
LEAF_NODE	5335:63	5335:63	16	13
LEAF_NODE	5335:65	5335:65	14	)
LEAF_NODE	5335:66	5335:66	10	;
EXPR_STATEMENT	5336:4	5336:78	9	written += t2pWriteFile ( output , ( tdata_t ) "<< /ColorTransform 1 >>\n" , 24 ) ;
EXPR	5336:4	5336:4	10	written += t2pWriteFile ( output , ( tdata_t ) "<< /ColorTransform 1 >>\n" , 24 )
ASSIGN	5336:4	5336:15	11	written += t2pWriteFile ( output , ( tdata_t ) "<< /ColorTransform 1 >>\n" , 24 )
LVAL	5336:4	5336:4	12	written
FIELD	5336:4	5336:4	13	written
LEAF_NODE	5336:4	5336:4	14	written
ASSIGN_OP	5336:12	5336:12	12	+=
LEAF_NODE	5336:12	5336:12	13	+=
RVAL	5336:15	5336:15	12	t2pWriteFile ( output , ( tdata_t ) "<< /ColorTransform 1 >>\n" , 24 )
FUNCTION_CALL	5336:15	5336:77	13	t2pWriteFile ( output , ( tdata_t ) "<< /ColorTransform 1 >>\n" , 24 )
CALLEE	5336:15	5336:15	14	t2pWriteFile
LEAF_NODE	5336:15	5336:15	15	t2pWriteFile
LEAF_NODE	5336:27	5336:27	14	(
ARGUMENT	5336:28	5336:28	14	output
FIELD	5336:28	5336:28	15	output
LEAF_NODE	5336:28	5336:28	16	output
LEAF_NODE	5336:34	5336:34	14	,
ARGUMENT	5336:36	5336:46	14	( tdata_t ) "<< /ColorTransform 1 >>\n"
LEAF_NODE	5336:36	5336:36	15	(
TYPE_NAME	5336:37	5336:37	15	tdata_t
LEAF_NODE	5336:37	5336:37	16	tdata_t
LEAF_NODE	5336:44	5336:44	15	)
FIELD	5336:46	5336:46	15	"<< /ColorTransform 1 >>\n"
LEAF_NODE	5336:46	5336:46	16	"<< /ColorTransform 1 >>\n"
LEAF_NODE	5336:73	5336:73	14	,
ARGUMENT	5336:75	5336:75	14	24
FIELD	5336:75	5336:75	15	24
LEAF_NODE	5336:75	5336:75	16	24
LEAF_NODE	5336:77	5336:77	14	)
LEAF_NODE	5336:78	5336:78	10	;
LEAF_NODE	5337:3	5337:3	8	}
JUMP_STATEMENT	5338:3	5338:8	6	break DESTINATION ;
KEYWORD	5338:3	5338:3	7	break
LEAF_NODE	5338:3	5338:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5338:8	5338:8	7	;
LABEL	5341:2	5341:23	6	case T2P_COMPRESS_ZIP :
LEAF_NODE	5341:2	5341:2	7	case
LEAF_NODE	5341:7	5341:7	7	T2P_COMPRESS_ZIP
LEAF_NODE	5341:23	5341:23	7	:
EXPR_STATEMENT	5342:3	5342:65	6	written += t2pWriteFile ( output , ( tdata_t ) "/FlateDecode " , 13 ) ;
EXPR	5342:3	5342:3	7	written += t2pWriteFile ( output , ( tdata_t ) "/FlateDecode " , 13 )
ASSIGN	5342:3	5342:14	8	written += t2pWriteFile ( output , ( tdata_t ) "/FlateDecode " , 13 )
LVAL	5342:3	5342:3	9	written
FIELD	5342:3	5342:3	10	written
LEAF_NODE	5342:3	5342:3	11	written
ASSIGN_OP	5342:11	5342:11	9	+=
LEAF_NODE	5342:11	5342:11	10	+=
RVAL	5342:14	5342:14	9	t2pWriteFile ( output , ( tdata_t ) "/FlateDecode " , 13 )
FUNCTION_CALL	5342:14	5342:64	10	t2pWriteFile ( output , ( tdata_t ) "/FlateDecode " , 13 )
CALLEE	5342:14	5342:14	11	t2pWriteFile
LEAF_NODE	5342:14	5342:14	12	t2pWriteFile
LEAF_NODE	5342:26	5342:26	11	(
ARGUMENT	5342:27	5342:27	11	output
FIELD	5342:27	5342:27	12	output
LEAF_NODE	5342:27	5342:27	13	output
LEAF_NODE	5342:33	5342:33	11	,
ARGUMENT	5342:35	5342:45	11	( tdata_t ) "/FlateDecode "
LEAF_NODE	5342:35	5342:35	12	(
TYPE_NAME	5342:36	5342:36	12	tdata_t
LEAF_NODE	5342:36	5342:36	13	tdata_t
LEAF_NODE	5342:43	5342:43	12	)
FIELD	5342:45	5342:45	12	"/FlateDecode "
LEAF_NODE	5342:45	5342:45	13	"/FlateDecode "
LEAF_NODE	5342:60	5342:60	11	,
ARGUMENT	5342:62	5342:62	11	13
FIELD	5342:62	5342:62	12	13
LEAF_NODE	5342:62	5342:62	13	13
LEAF_NODE	5342:64	5342:64	11	)
LEAF_NODE	5342:65	5342:65	7	;
SELECTION	5343:3	5343:38	6	
KEYWORD	5343:3	5343:3	7	if
LEAF_NODE	5343:3	5343:3	8	if
LEAF_NODE	5343:5	5343:5	7	(
CONDITION	5343:6	5343:6	7	t2p -> pdf_compressionquality % 100
EXPR	5343:6	5343:34	8	t2p -> pdf_compressionquality % 100
FIELD	5343:6	5343:11	9	t2p -> pdf_compressionquality
LEAF_NODE	5343:6	5343:6	10	t2p
LEAF_NODE	5343:9	5343:9	10	->
LEAF_NODE	5343:11	5343:11	10	pdf_compressionquality
LEAF_NODE	5343:33	5343:33	9	%
FIELD	5343:34	5343:34	9	100
LEAF_NODE	5343:34	5343:34	10	100
LEAF_NODE	5343:37	5343:37	7	)
STATEMENTS	5343:38	5363:3	7	
LEAF_NODE	5343:38	5343:38	8	{
STATEMENTS	5344:4	5362:4	8	
EXPR_STATEMENT	5344:4	5344:66	9	written += t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 ) ;
EXPR	5344:4	5344:4	10	written += t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
ASSIGN	5344:4	5344:15	11	written += t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
LVAL	5344:4	5344:4	12	written
FIELD	5344:4	5344:4	13	written
LEAF_NODE	5344:4	5344:4	14	written
ASSIGN_OP	5344:12	5344:12	12	+=
LEAF_NODE	5344:12	5344:12	13	+=
RVAL	5344:15	5344:15	12	t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
FUNCTION_CALL	5344:15	5344:65	13	t2pWriteFile ( output , ( tdata_t ) "/DecodeParms " , 13 )
CALLEE	5344:15	5344:15	14	t2pWriteFile
LEAF_NODE	5344:15	5344:15	15	t2pWriteFile
LEAF_NODE	5344:27	5344:27	14	(
ARGUMENT	5344:28	5344:28	14	output
FIELD	5344:28	5344:28	15	output
LEAF_NODE	5344:28	5344:28	16	output
LEAF_NODE	5344:34	5344:34	14	,
ARGUMENT	5344:36	5344:46	14	( tdata_t ) "/DecodeParms "
LEAF_NODE	5344:36	5344:36	15	(
TYPE_NAME	5344:37	5344:37	15	tdata_t
LEAF_NODE	5344:37	5344:37	16	tdata_t
LEAF_NODE	5344:44	5344:44	15	)
FIELD	5344:46	5344:46	15	"/DecodeParms "
LEAF_NODE	5344:46	5344:46	16	"/DecodeParms "
LEAF_NODE	5344:61	5344:61	14	,
ARGUMENT	5344:63	5344:63	14	13
FIELD	5344:63	5344:63	15	13
LEAF_NODE	5344:63	5344:63	16	13
LEAF_NODE	5344:65	5344:65	14	)
LEAF_NODE	5344:66	5344:66	10	;
EXPR_STATEMENT	5345:4	5345:67	9	written += t2pWriteFile ( output , ( tdata_t ) "<< /Predictor " , 14 ) ;
EXPR	5345:4	5345:4	10	written += t2pWriteFile ( output , ( tdata_t ) "<< /Predictor " , 14 )
ASSIGN	5345:4	5345:15	11	written += t2pWriteFile ( output , ( tdata_t ) "<< /Predictor " , 14 )
LVAL	5345:4	5345:4	12	written
FIELD	5345:4	5345:4	13	written
LEAF_NODE	5345:4	5345:4	14	written
ASSIGN_OP	5345:12	5345:12	12	+=
LEAF_NODE	5345:12	5345:12	13	+=
RVAL	5345:15	5345:15	12	t2pWriteFile ( output , ( tdata_t ) "<< /Predictor " , 14 )
FUNCTION_CALL	5345:15	5345:66	13	t2pWriteFile ( output , ( tdata_t ) "<< /Predictor " , 14 )
CALLEE	5345:15	5345:15	14	t2pWriteFile
LEAF_NODE	5345:15	5345:15	15	t2pWriteFile
LEAF_NODE	5345:27	5345:27	14	(
ARGUMENT	5345:28	5345:28	14	output
FIELD	5345:28	5345:28	15	output
LEAF_NODE	5345:28	5345:28	16	output
LEAF_NODE	5345:34	5345:34	14	,
ARGUMENT	5345:36	5345:46	14	( tdata_t ) "<< /Predictor "
LEAF_NODE	5345:36	5345:36	15	(
TYPE_NAME	5345:37	5345:37	15	tdata_t
LEAF_NODE	5345:37	5345:37	16	tdata_t
LEAF_NODE	5345:44	5345:44	15	)
FIELD	5345:46	5345:46	15	"<< /Predictor "
LEAF_NODE	5345:46	5345:46	16	"<< /Predictor "
LEAF_NODE	5345:62	5345:62	14	,
ARGUMENT	5345:64	5345:64	14	14
FIELD	5345:64	5345:64	15	14
LEAF_NODE	5345:64	5345:64	16	14
LEAF_NODE	5345:66	5345:66	14	)
LEAF_NODE	5345:67	5345:67	10	;
EXPR_STATEMENT	5346:4	5346:82	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_compressionquality % 100 ) ;
EXPR	5346:4	5346:4	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_compressionquality % 100 )
ASSIGN	5346:4	5346:11	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_compressionquality % 100 )
LVAL	5346:4	5346:4	12	buflen
FIELD	5346:4	5346:4	13	buflen
LEAF_NODE	5346:4	5346:4	14	buflen
ASSIGN_OP	5346:10	5346:10	12	=
LEAF_NODE	5346:10	5346:10	13	=
RVAL	5346:11	5346:11	12	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_compressionquality % 100 )
FUNCTION_CALL	5346:11	5346:81	13	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> pdf_compressionquality % 100 )
CALLEE	5346:11	5346:11	14	snprintf
LEAF_NODE	5346:11	5346:11	15	snprintf
LEAF_NODE	5346:19	5346:19	14	(
ARGUMENT	5346:20	5346:20	14	buffer
FIELD	5346:20	5346:20	15	buffer
LEAF_NODE	5346:20	5346:20	16	buffer
LEAF_NODE	5346:26	5346:26	14	,
ARGUMENT	5346:28	5346:28	14	sizeof ( buffer )
FUNCTION_CALL	5346:28	5346:41	15	sizeof ( buffer )
CALLEE	5346:28	5346:28	16	sizeof
LEAF_NODE	5346:28	5346:28	17	sizeof
LEAF_NODE	5346:34	5346:34	16	(
ARGUMENT	5346:35	5346:35	16	buffer
FIELD	5346:35	5346:35	17	buffer
LEAF_NODE	5346:35	5346:35	18	buffer
LEAF_NODE	5346:41	5346:41	16	)
LEAF_NODE	5346:42	5346:42	14	,
ARGUMENT	5346:44	5346:44	14	"%u"
FIELD	5346:44	5346:44	15	"%u"
LEAF_NODE	5346:44	5346:44	16	"%u"
LEAF_NODE	5346:48	5346:48	14	,
ARGUMENT	5346:50	5346:78	14	t2p -> pdf_compressionquality % 100
FIELD	5346:50	5346:55	15	t2p -> pdf_compressionquality
LEAF_NODE	5346:50	5346:50	16	t2p
LEAF_NODE	5346:53	5346:53	16	->
LEAF_NODE	5346:55	5346:55	16	pdf_compressionquality
LEAF_NODE	5346:77	5346:77	15	%
FIELD	5346:78	5346:78	15	100
LEAF_NODE	5346:78	5346:78	16	100
LEAF_NODE	5346:81	5346:81	14	)
LEAF_NODE	5346:82	5346:82	10	;
EXPR_STATEMENT	5347:4	5347:43	9	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5347:4	5347:4	10	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5347:4	5347:42	11	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5347:4	5347:4	12	check_snprintf_ret
LEAF_NODE	5347:4	5347:4	13	check_snprintf_ret
LEAF_NODE	5347:22	5347:22	12	(
ARGUMENT	5347:23	5347:23	12	t2p
FIELD	5347:23	5347:23	13	t2p
LEAF_NODE	5347:23	5347:23	14	t2p
LEAF_NODE	5347:26	5347:26	12	,
ARGUMENT	5347:28	5347:28	12	buflen
FIELD	5347:28	5347:28	13	buflen
LEAF_NODE	5347:28	5347:28	14	buflen
LEAF_NODE	5347:34	5347:34	12	,
ARGUMENT	5347:36	5347:36	12	buffer
FIELD	5347:36	5347:36	13	buffer
LEAF_NODE	5347:36	5347:36	14	buffer
LEAF_NODE	5347:42	5347:42	12	)
LEAF_NODE	5347:43	5347:43	10	;
EXPR_STATEMENT	5348:4	5348:61	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5348:4	5348:4	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5348:4	5348:15	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5348:4	5348:4	12	written
FIELD	5348:4	5348:4	13	written
LEAF_NODE	5348:4	5348:4	14	written
ASSIGN_OP	5348:12	5348:12	12	+=
LEAF_NODE	5348:12	5348:12	13	+=
RVAL	5348:15	5348:15	12	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5348:15	5348:60	13	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5348:15	5348:15	14	t2pWriteFile
LEAF_NODE	5348:15	5348:15	15	t2pWriteFile
LEAF_NODE	5348:27	5348:27	14	(
ARGUMENT	5348:28	5348:28	14	output
FIELD	5348:28	5348:28	15	output
LEAF_NODE	5348:28	5348:28	16	output
LEAF_NODE	5348:34	5348:34	14	,
ARGUMENT	5348:36	5348:46	14	( tdata_t ) buffer
LEAF_NODE	5348:36	5348:36	15	(
TYPE_NAME	5348:37	5348:37	15	tdata_t
LEAF_NODE	5348:37	5348:37	16	tdata_t
LEAF_NODE	5348:44	5348:44	15	)
FIELD	5348:46	5348:46	15	buffer
LEAF_NODE	5348:46	5348:46	16	buffer
LEAF_NODE	5348:52	5348:52	14	,
ARGUMENT	5348:54	5348:54	14	buflen
FIELD	5348:54	5348:54	15	buflen
LEAF_NODE	5348:54	5348:54	16	buflen
LEAF_NODE	5348:60	5348:60	14	)
LEAF_NODE	5348:61	5348:61	10	;
EXPR_STATEMENT	5349:4	5349:63	9	written += t2pWriteFile ( output , ( tdata_t ) " /Columns " , 10 ) ;
EXPR	5349:4	5349:4	10	written += t2pWriteFile ( output , ( tdata_t ) " /Columns " , 10 )
ASSIGN	5349:4	5349:15	11	written += t2pWriteFile ( output , ( tdata_t ) " /Columns " , 10 )
LVAL	5349:4	5349:4	12	written
FIELD	5349:4	5349:4	13	written
LEAF_NODE	5349:4	5349:4	14	written
ASSIGN_OP	5349:12	5349:12	12	+=
LEAF_NODE	5349:12	5349:12	13	+=
RVAL	5349:15	5349:15	12	t2pWriteFile ( output , ( tdata_t ) " /Columns " , 10 )
FUNCTION_CALL	5349:15	5349:62	13	t2pWriteFile ( output , ( tdata_t ) " /Columns " , 10 )
CALLEE	5349:15	5349:15	14	t2pWriteFile
LEAF_NODE	5349:15	5349:15	15	t2pWriteFile
LEAF_NODE	5349:27	5349:27	14	(
ARGUMENT	5349:28	5349:28	14	output
FIELD	5349:28	5349:28	15	output
LEAF_NODE	5349:28	5349:28	16	output
LEAF_NODE	5349:34	5349:34	14	,
ARGUMENT	5349:36	5349:46	14	( tdata_t ) " /Columns "
LEAF_NODE	5349:36	5349:36	15	(
TYPE_NAME	5349:37	5349:37	15	tdata_t
LEAF_NODE	5349:37	5349:37	16	tdata_t
LEAF_NODE	5349:44	5349:44	15	)
FIELD	5349:46	5349:46	15	" /Columns "
LEAF_NODE	5349:46	5349:46	16	" /Columns "
LEAF_NODE	5349:58	5349:58	14	,
ARGUMENT	5349:60	5349:60	14	10
FIELD	5349:60	5349:60	15	10
LEAF_NODE	5349:60	5349:60	16	10
LEAF_NODE	5349:62	5349:62	14	)
LEAF_NODE	5349:63	5349:63	10	;
EXPR_STATEMENT	5350:4	5351:38	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width ) ;
EXPR	5350:4	5350:4	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
ASSIGN	5350:4	5350:13	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
LVAL	5350:4	5350:4	12	buflen
FIELD	5350:4	5350:4	13	buflen
LEAF_NODE	5350:4	5350:4	14	buflen
ASSIGN_OP	5350:11	5350:11	12	=
LEAF_NODE	5350:11	5350:11	13	=
RVAL	5350:13	5350:13	12	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
FUNCTION_CALL	5350:13	5351:37	13	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> tiff_width )
CALLEE	5350:13	5350:13	14	snprintf
LEAF_NODE	5350:13	5350:13	15	snprintf
LEAF_NODE	5350:21	5350:21	14	(
ARGUMENT	5350:22	5350:22	14	buffer
FIELD	5350:22	5350:22	15	buffer
LEAF_NODE	5350:22	5350:22	16	buffer
LEAF_NODE	5350:28	5350:28	14	,
ARGUMENT	5350:30	5350:30	14	sizeof ( buffer )
FUNCTION_CALL	5350:30	5350:43	15	sizeof ( buffer )
CALLEE	5350:30	5350:30	16	sizeof
LEAF_NODE	5350:30	5350:30	17	sizeof
LEAF_NODE	5350:36	5350:36	16	(
ARGUMENT	5350:37	5350:37	16	buffer
FIELD	5350:37	5350:37	17	buffer
LEAF_NODE	5350:37	5350:37	18	buffer
LEAF_NODE	5350:43	5350:43	16	)
LEAF_NODE	5350:44	5350:44	14	,
ARGUMENT	5350:46	5350:46	14	"%lu"
FIELD	5350:46	5350:46	15	"%lu"
LEAF_NODE	5350:46	5350:46	16	"%lu"
LEAF_NODE	5350:51	5350:51	14	,
ARGUMENT	5351:7	5351:22	14	( unsigned long ) t2p -> tiff_width
LEAF_NODE	5351:7	5351:7	15	(
TYPE_NAME	5351:8	5351:17	15	unsigned long
LEAF_NODE	5351:8	5351:8	16	unsigned
LEAF_NODE	5351:17	5351:17	16	long
LEAF_NODE	5351:21	5351:21	15	)
FIELD	5351:22	5351:27	15	t2p -> tiff_width
LEAF_NODE	5351:22	5351:22	16	t2p
LEAF_NODE	5351:25	5351:25	16	->
LEAF_NODE	5351:27	5351:27	16	tiff_width
LEAF_NODE	5351:37	5351:37	14	)
LEAF_NODE	5351:38	5351:38	10	;
EXPR_STATEMENT	5352:4	5352:43	9	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5352:4	5352:4	10	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5352:4	5352:42	11	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5352:4	5352:4	12	check_snprintf_ret
LEAF_NODE	5352:4	5352:4	13	check_snprintf_ret
LEAF_NODE	5352:22	5352:22	12	(
ARGUMENT	5352:23	5352:23	12	t2p
FIELD	5352:23	5352:23	13	t2p
LEAF_NODE	5352:23	5352:23	14	t2p
LEAF_NODE	5352:26	5352:26	12	,
ARGUMENT	5352:28	5352:28	12	buflen
FIELD	5352:28	5352:28	13	buflen
LEAF_NODE	5352:28	5352:28	14	buflen
LEAF_NODE	5352:34	5352:34	12	,
ARGUMENT	5352:36	5352:36	12	buffer
FIELD	5352:36	5352:36	13	buffer
LEAF_NODE	5352:36	5352:36	14	buffer
LEAF_NODE	5352:42	5352:42	12	)
LEAF_NODE	5352:43	5352:43	10	;
EXPR_STATEMENT	5353:4	5353:61	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5353:4	5353:4	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5353:4	5353:15	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5353:4	5353:4	12	written
FIELD	5353:4	5353:4	13	written
LEAF_NODE	5353:4	5353:4	14	written
ASSIGN_OP	5353:12	5353:12	12	+=
LEAF_NODE	5353:12	5353:12	13	+=
RVAL	5353:15	5353:15	12	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5353:15	5353:60	13	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5353:15	5353:15	14	t2pWriteFile
LEAF_NODE	5353:15	5353:15	15	t2pWriteFile
LEAF_NODE	5353:27	5353:27	14	(
ARGUMENT	5353:28	5353:28	14	output
FIELD	5353:28	5353:28	15	output
LEAF_NODE	5353:28	5353:28	16	output
LEAF_NODE	5353:34	5353:34	14	,
ARGUMENT	5353:36	5353:46	14	( tdata_t ) buffer
LEAF_NODE	5353:36	5353:36	15	(
TYPE_NAME	5353:37	5353:37	15	tdata_t
LEAF_NODE	5353:37	5353:37	16	tdata_t
LEAF_NODE	5353:44	5353:44	15	)
FIELD	5353:46	5353:46	15	buffer
LEAF_NODE	5353:46	5353:46	16	buffer
LEAF_NODE	5353:52	5353:52	14	,
ARGUMENT	5353:54	5353:54	14	buflen
FIELD	5353:54	5353:54	15	buflen
LEAF_NODE	5353:54	5353:54	16	buflen
LEAF_NODE	5353:60	5353:60	14	)
LEAF_NODE	5353:61	5353:61	10	;
EXPR_STATEMENT	5354:4	5354:61	9	written += t2pWriteFile ( output , ( tdata_t ) " /Colors " , 9 ) ;
EXPR	5354:4	5354:4	10	written += t2pWriteFile ( output , ( tdata_t ) " /Colors " , 9 )
ASSIGN	5354:4	5354:15	11	written += t2pWriteFile ( output , ( tdata_t ) " /Colors " , 9 )
LVAL	5354:4	5354:4	12	written
FIELD	5354:4	5354:4	13	written
LEAF_NODE	5354:4	5354:4	14	written
ASSIGN_OP	5354:12	5354:12	12	+=
LEAF_NODE	5354:12	5354:12	13	+=
RVAL	5354:15	5354:15	12	t2pWriteFile ( output , ( tdata_t ) " /Colors " , 9 )
FUNCTION_CALL	5354:15	5354:60	13	t2pWriteFile ( output , ( tdata_t ) " /Colors " , 9 )
CALLEE	5354:15	5354:15	14	t2pWriteFile
LEAF_NODE	5354:15	5354:15	15	t2pWriteFile
LEAF_NODE	5354:27	5354:27	14	(
ARGUMENT	5354:28	5354:28	14	output
FIELD	5354:28	5354:28	15	output
LEAF_NODE	5354:28	5354:28	16	output
LEAF_NODE	5354:34	5354:34	14	,
ARGUMENT	5354:36	5354:46	14	( tdata_t ) " /Colors "
LEAF_NODE	5354:36	5354:36	15	(
TYPE_NAME	5354:37	5354:37	15	tdata_t
LEAF_NODE	5354:37	5354:37	16	tdata_t
LEAF_NODE	5354:44	5354:44	15	)
FIELD	5354:46	5354:46	15	" /Colors "
LEAF_NODE	5354:46	5354:46	16	" /Colors "
LEAF_NODE	5354:57	5354:57	14	,
ARGUMENT	5354:59	5354:59	14	9
FIELD	5354:59	5354:59	15	9
LEAF_NODE	5354:59	5354:59	16	9
LEAF_NODE	5354:60	5354:60	14	)
LEAF_NODE	5354:61	5354:61	10	;
EXPR_STATEMENT	5355:4	5355:76	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_samplesperpixel ) ;
EXPR	5355:4	5355:4	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_samplesperpixel )
ASSIGN	5355:4	5355:11	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_samplesperpixel )
LVAL	5355:4	5355:4	12	buflen
FIELD	5355:4	5355:4	13	buflen
LEAF_NODE	5355:4	5355:4	14	buflen
ASSIGN_OP	5355:10	5355:10	12	=
LEAF_NODE	5355:10	5355:10	13	=
RVAL	5355:11	5355:11	12	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_samplesperpixel )
FUNCTION_CALL	5355:11	5355:75	13	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_samplesperpixel )
CALLEE	5355:11	5355:11	14	snprintf
LEAF_NODE	5355:11	5355:11	15	snprintf
LEAF_NODE	5355:19	5355:19	14	(
ARGUMENT	5355:20	5355:20	14	buffer
FIELD	5355:20	5355:20	15	buffer
LEAF_NODE	5355:20	5355:20	16	buffer
LEAF_NODE	5355:26	5355:26	14	,
ARGUMENT	5355:28	5355:28	14	sizeof ( buffer )
FUNCTION_CALL	5355:28	5355:41	15	sizeof ( buffer )
CALLEE	5355:28	5355:28	16	sizeof
LEAF_NODE	5355:28	5355:28	17	sizeof
LEAF_NODE	5355:34	5355:34	16	(
ARGUMENT	5355:35	5355:35	16	buffer
FIELD	5355:35	5355:35	17	buffer
LEAF_NODE	5355:35	5355:35	18	buffer
LEAF_NODE	5355:41	5355:41	16	)
LEAF_NODE	5355:42	5355:42	14	,
ARGUMENT	5355:44	5355:44	14	"%u"
FIELD	5355:44	5355:44	15	"%u"
LEAF_NODE	5355:44	5355:44	16	"%u"
LEAF_NODE	5355:48	5355:48	14	,
ARGUMENT	5355:50	5355:50	14	t2p -> tiff_samplesperpixel
FIELD	5355:50	5355:55	15	t2p -> tiff_samplesperpixel
LEAF_NODE	5355:50	5355:50	16	t2p
LEAF_NODE	5355:53	5355:53	16	->
LEAF_NODE	5355:55	5355:55	16	tiff_samplesperpixel
LEAF_NODE	5355:75	5355:75	14	)
LEAF_NODE	5355:76	5355:76	10	;
EXPR_STATEMENT	5356:4	5356:43	9	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5356:4	5356:4	10	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5356:4	5356:42	11	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5356:4	5356:4	12	check_snprintf_ret
LEAF_NODE	5356:4	5356:4	13	check_snprintf_ret
LEAF_NODE	5356:22	5356:22	12	(
ARGUMENT	5356:23	5356:23	12	t2p
FIELD	5356:23	5356:23	13	t2p
LEAF_NODE	5356:23	5356:23	14	t2p
LEAF_NODE	5356:26	5356:26	12	,
ARGUMENT	5356:28	5356:28	12	buflen
FIELD	5356:28	5356:28	13	buflen
LEAF_NODE	5356:28	5356:28	14	buflen
LEAF_NODE	5356:34	5356:34	12	,
ARGUMENT	5356:36	5356:36	12	buffer
FIELD	5356:36	5356:36	13	buffer
LEAF_NODE	5356:36	5356:36	14	buffer
LEAF_NODE	5356:42	5356:42	12	)
LEAF_NODE	5356:43	5356:43	10	;
EXPR_STATEMENT	5357:4	5357:61	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5357:4	5357:4	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5357:4	5357:15	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5357:4	5357:4	12	written
FIELD	5357:4	5357:4	13	written
LEAF_NODE	5357:4	5357:4	14	written
ASSIGN_OP	5357:12	5357:12	12	+=
LEAF_NODE	5357:12	5357:12	13	+=
RVAL	5357:15	5357:15	12	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5357:15	5357:60	13	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5357:15	5357:15	14	t2pWriteFile
LEAF_NODE	5357:15	5357:15	15	t2pWriteFile
LEAF_NODE	5357:27	5357:27	14	(
ARGUMENT	5357:28	5357:28	14	output
FIELD	5357:28	5357:28	15	output
LEAF_NODE	5357:28	5357:28	16	output
LEAF_NODE	5357:34	5357:34	14	,
ARGUMENT	5357:36	5357:46	14	( tdata_t ) buffer
LEAF_NODE	5357:36	5357:36	15	(
TYPE_NAME	5357:37	5357:37	15	tdata_t
LEAF_NODE	5357:37	5357:37	16	tdata_t
LEAF_NODE	5357:44	5357:44	15	)
FIELD	5357:46	5357:46	15	buffer
LEAF_NODE	5357:46	5357:46	16	buffer
LEAF_NODE	5357:52	5357:52	14	,
ARGUMENT	5357:54	5357:54	14	buflen
FIELD	5357:54	5357:54	15	buflen
LEAF_NODE	5357:54	5357:54	16	buflen
LEAF_NODE	5357:60	5357:60	14	)
LEAF_NODE	5357:61	5357:61	10	;
EXPR_STATEMENT	5358:4	5358:72	9	written += t2pWriteFile ( output , ( tdata_t ) " /BitsPerComponent " , 19 ) ;
EXPR	5358:4	5358:4	10	written += t2pWriteFile ( output , ( tdata_t ) " /BitsPerComponent " , 19 )
ASSIGN	5358:4	5358:15	11	written += t2pWriteFile ( output , ( tdata_t ) " /BitsPerComponent " , 19 )
LVAL	5358:4	5358:4	12	written
FIELD	5358:4	5358:4	13	written
LEAF_NODE	5358:4	5358:4	14	written
ASSIGN_OP	5358:12	5358:12	12	+=
LEAF_NODE	5358:12	5358:12	13	+=
RVAL	5358:15	5358:15	12	t2pWriteFile ( output , ( tdata_t ) " /BitsPerComponent " , 19 )
FUNCTION_CALL	5358:15	5358:71	13	t2pWriteFile ( output , ( tdata_t ) " /BitsPerComponent " , 19 )
CALLEE	5358:15	5358:15	14	t2pWriteFile
LEAF_NODE	5358:15	5358:15	15	t2pWriteFile
LEAF_NODE	5358:27	5358:27	14	(
ARGUMENT	5358:28	5358:28	14	output
FIELD	5358:28	5358:28	15	output
LEAF_NODE	5358:28	5358:28	16	output
LEAF_NODE	5358:34	5358:34	14	,
ARGUMENT	5358:36	5358:46	14	( tdata_t ) " /BitsPerComponent "
LEAF_NODE	5358:36	5358:36	15	(
TYPE_NAME	5358:37	5358:37	15	tdata_t
LEAF_NODE	5358:37	5358:37	16	tdata_t
LEAF_NODE	5358:44	5358:44	15	)
FIELD	5358:46	5358:46	15	" /BitsPerComponent "
LEAF_NODE	5358:46	5358:46	16	" /BitsPerComponent "
LEAF_NODE	5358:67	5358:67	14	,
ARGUMENT	5358:69	5358:69	14	19
FIELD	5358:69	5358:69	15	19
LEAF_NODE	5358:69	5358:69	16	19
LEAF_NODE	5358:71	5358:71	14	)
LEAF_NODE	5358:72	5358:72	10	;
EXPR_STATEMENT	5359:4	5359:74	9	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_bitspersample ) ;
EXPR	5359:4	5359:4	10	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_bitspersample )
ASSIGN	5359:4	5359:11	11	buflen = snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_bitspersample )
LVAL	5359:4	5359:4	12	buflen
FIELD	5359:4	5359:4	13	buflen
LEAF_NODE	5359:4	5359:4	14	buflen
ASSIGN_OP	5359:10	5359:10	12	=
LEAF_NODE	5359:10	5359:10	13	=
RVAL	5359:11	5359:11	12	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_bitspersample )
FUNCTION_CALL	5359:11	5359:73	13	snprintf ( buffer , sizeof ( buffer ) , "%u" , t2p -> tiff_bitspersample )
CALLEE	5359:11	5359:11	14	snprintf
LEAF_NODE	5359:11	5359:11	15	snprintf
LEAF_NODE	5359:19	5359:19	14	(
ARGUMENT	5359:20	5359:20	14	buffer
FIELD	5359:20	5359:20	15	buffer
LEAF_NODE	5359:20	5359:20	16	buffer
LEAF_NODE	5359:26	5359:26	14	,
ARGUMENT	5359:28	5359:28	14	sizeof ( buffer )
FUNCTION_CALL	5359:28	5359:41	15	sizeof ( buffer )
CALLEE	5359:28	5359:28	16	sizeof
LEAF_NODE	5359:28	5359:28	17	sizeof
LEAF_NODE	5359:34	5359:34	16	(
ARGUMENT	5359:35	5359:35	16	buffer
FIELD	5359:35	5359:35	17	buffer
LEAF_NODE	5359:35	5359:35	18	buffer
LEAF_NODE	5359:41	5359:41	16	)
LEAF_NODE	5359:42	5359:42	14	,
ARGUMENT	5359:44	5359:44	14	"%u"
FIELD	5359:44	5359:44	15	"%u"
LEAF_NODE	5359:44	5359:44	16	"%u"
LEAF_NODE	5359:48	5359:48	14	,
ARGUMENT	5359:50	5359:50	14	t2p -> tiff_bitspersample
FIELD	5359:50	5359:55	15	t2p -> tiff_bitspersample
LEAF_NODE	5359:50	5359:50	16	t2p
LEAF_NODE	5359:53	5359:53	16	->
LEAF_NODE	5359:55	5359:55	16	tiff_bitspersample
LEAF_NODE	5359:73	5359:73	14	)
LEAF_NODE	5359:74	5359:74	10	;
EXPR_STATEMENT	5360:4	5360:43	9	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5360:4	5360:4	10	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5360:4	5360:42	11	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5360:4	5360:4	12	check_snprintf_ret
LEAF_NODE	5360:4	5360:4	13	check_snprintf_ret
LEAF_NODE	5360:22	5360:22	12	(
ARGUMENT	5360:23	5360:23	12	t2p
FIELD	5360:23	5360:23	13	t2p
LEAF_NODE	5360:23	5360:23	14	t2p
LEAF_NODE	5360:26	5360:26	12	,
ARGUMENT	5360:28	5360:28	12	buflen
FIELD	5360:28	5360:28	13	buflen
LEAF_NODE	5360:28	5360:28	14	buflen
LEAF_NODE	5360:34	5360:34	12	,
ARGUMENT	5360:36	5360:36	12	buffer
FIELD	5360:36	5360:36	13	buffer
LEAF_NODE	5360:36	5360:36	14	buffer
LEAF_NODE	5360:42	5360:42	12	)
LEAF_NODE	5360:43	5360:43	10	;
EXPR_STATEMENT	5361:4	5361:61	9	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5361:4	5361:4	10	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5361:4	5361:15	11	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5361:4	5361:4	12	written
FIELD	5361:4	5361:4	13	written
LEAF_NODE	5361:4	5361:4	14	written
ASSIGN_OP	5361:12	5361:12	12	+=
LEAF_NODE	5361:12	5361:12	13	+=
RVAL	5361:15	5361:15	12	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5361:15	5361:60	13	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5361:15	5361:15	14	t2pWriteFile
LEAF_NODE	5361:15	5361:15	15	t2pWriteFile
LEAF_NODE	5361:27	5361:27	14	(
ARGUMENT	5361:28	5361:28	14	output
FIELD	5361:28	5361:28	15	output
LEAF_NODE	5361:28	5361:28	16	output
LEAF_NODE	5361:34	5361:34	14	,
ARGUMENT	5361:36	5361:46	14	( tdata_t ) buffer
LEAF_NODE	5361:36	5361:36	15	(
TYPE_NAME	5361:37	5361:37	15	tdata_t
LEAF_NODE	5361:37	5361:37	16	tdata_t
LEAF_NODE	5361:44	5361:44	15	)
FIELD	5361:46	5361:46	15	buffer
LEAF_NODE	5361:46	5361:46	16	buffer
LEAF_NODE	5361:52	5361:52	14	,
ARGUMENT	5361:54	5361:54	14	buflen
FIELD	5361:54	5361:54	15	buflen
LEAF_NODE	5361:54	5361:54	16	buflen
LEAF_NODE	5361:60	5361:60	14	)
LEAF_NODE	5361:61	5361:61	10	;
EXPR_STATEMENT	5362:4	5362:56	9	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 ) ;
EXPR	5362:4	5362:4	10	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
ASSIGN	5362:4	5362:15	11	written += t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
LVAL	5362:4	5362:4	12	written
FIELD	5362:4	5362:4	13	written
LEAF_NODE	5362:4	5362:4	14	written
ASSIGN_OP	5362:12	5362:12	12	+=
LEAF_NODE	5362:12	5362:12	13	+=
RVAL	5362:15	5362:15	12	t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
FUNCTION_CALL	5362:15	5362:55	13	t2pWriteFile ( output , ( tdata_t ) ">>\n" , 3 )
CALLEE	5362:15	5362:15	14	t2pWriteFile
LEAF_NODE	5362:15	5362:15	15	t2pWriteFile
LEAF_NODE	5362:27	5362:27	14	(
ARGUMENT	5362:28	5362:28	14	output
FIELD	5362:28	5362:28	15	output
LEAF_NODE	5362:28	5362:28	16	output
LEAF_NODE	5362:34	5362:34	14	,
ARGUMENT	5362:36	5362:46	14	( tdata_t ) ">>\n"
LEAF_NODE	5362:36	5362:36	15	(
TYPE_NAME	5362:37	5362:37	15	tdata_t
LEAF_NODE	5362:37	5362:37	16	tdata_t
LEAF_NODE	5362:44	5362:44	15	)
FIELD	5362:46	5362:46	15	">>\n"
LEAF_NODE	5362:46	5362:46	16	">>\n"
LEAF_NODE	5362:52	5362:52	14	,
ARGUMENT	5362:54	5362:54	14	3
FIELD	5362:54	5362:54	15	3
LEAF_NODE	5362:54	5362:54	16	3
LEAF_NODE	5362:55	5362:55	14	)
LEAF_NODE	5362:56	5362:56	10	;
LEAF_NODE	5363:3	5363:3	8	}
JUMP_STATEMENT	5364:3	5364:8	6	break DESTINATION ;
KEYWORD	5364:3	5364:3	7	break
LEAF_NODE	5364:3	5364:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5364:8	5364:8	7	;
LABEL	5366:2	5366:9	6	default :
LEAF_NODE	5366:2	5366:2	7	default
LEAF_NODE	5366:9	5366:9	7	:
JUMP_STATEMENT	5367:3	5367:8	6	break DESTINATION ;
KEYWORD	5367:3	5367:3	7	break
LEAF_NODE	5367:3	5367:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5367:8	5367:8	7	;
LEAF_NODE	5368:1	5368:1	5	}
LEAF_NODE	5370:1	5370:1	3	return
LEAF_NODE	5370:7	5370:7	3	(
LEAF_NODE	5370:8	5370:8	3	written
LEAF_NODE	5370:15	5370:15	3	)
LEAF_NODE	5370:16	5370:16	3	;
LEAF_NODE	5371:0	5371:0	2	}
FUNCTION_DEF	5377:0	5396:0	1	
RETURN_TYPE	5377:0	5377:0	2	tsize_t
TYPE_NAME	5377:0	5377:0	3	tsize_t
LEAF_NODE	5377:0	5377:0	4	tsize_t
FUNCTION_NAME	5377:8	5377:8	2	t2p_write_pdf_xreftable
LEAF_NODE	5377:8	5377:8	3	t2p_write_pdf_xreftable
PARAMETER_LIST	5377:31	5377:54	2	( T2P * t2p , TIFF * output )
LEAF_NODE	5377:31	5377:31	3	(
PARAMETER_DECL	5377:32	5377:37	3	T2P * t2p
TYPE	5377:32	5377:35	4	T2P *
TYPE_NAME	5377:32	5377:32	5	T2P
LEAF_NODE	5377:32	5377:32	6	T2P
POINTER	5377:35	5377:35	5	*
LEAF_NODE	5377:35	5377:35	6	*
NAME	5377:37	5377:37	4	t2p
LEAF_NODE	5377:37	5377:37	5	t2p
LEAF_NODE	5377:40	5377:40	3	,
PARAMETER_DECL	5377:42	5377:48	3	TIFF * output
TYPE	5377:42	5377:46	4	TIFF *
TYPE_NAME	5377:42	5377:42	5	TIFF
LEAF_NODE	5377:42	5377:42	6	TIFF
POINTER	5377:46	5377:46	5	*
LEAF_NODE	5377:46	5377:46	6	*
NAME	5377:48	5377:48	4	output
LEAF_NODE	5377:48	5377:48	5	output
LEAF_NODE	5377:54	5377:54	3	)
LEAF_NODE	5377:55	5377:55	2	{
STATEMENTS	5379:1	5395:16	2	
SIMPLE_DECL	5379:1	5379:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5379:1	5379:9	4	tsize_t written ; written = 0
TYPE	5379:1	5379:1	5	tsize_t
TYPE_NAME	5379:1	5379:1	6	tsize_t
LEAF_NODE	5379:1	5379:1	7	tsize_t
NAME	5379:9	5379:9	5	written
LEAF_NODE	5379:9	5379:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5379:9	5379:9	5	written = 0
ASSIGN	5379:9	5379:17	6	written = 0
LVAL	5379:9	5379:9	7	written
NAME	5379:9	5379:9	8	written
LEAF_NODE	5379:9	5379:9	9	written
ASSIGN_OP	5379:16	5379:16	7	=
LEAF_NODE	5379:16	5379:16	8	=
RVAL	5379:17	5379:17	7	0
FIELD	5379:17	5379:17	8	0
LEAF_NODE	5379:17	5379:17	9	0
LEAF_NODE	5379:18	5379:18	4	;
SIMPLE_DECL	5380:1	5380:16	3	char [ 64 ] buffer ;
VAR_DECL	5380:1	5380:6	4	char [ 64 ] buffer
TYPE	5380:1	5380:12	5	char [ 64 ]
TYPE_NAME	5380:1	5380:1	6	char
LEAF_NODE	5380:1	5380:1	7	char
TYPE_SUFFIX	5380:12	5380:15	6	[ 64 ]
LEAF_NODE	5380:12	5380:12	7	[
FIELD	5380:13	5380:13	7	64
LEAF_NODE	5380:13	5380:13	8	64
LEAF_NODE	5380:15	5380:15	7	]
NAME	5380:6	5380:6	5	buffer
LEAF_NODE	5380:6	5380:6	6	buffer
LEAF_NODE	5380:16	5380:16	4	;
SIMPLE_DECL	5381:1	5381:13	3	int buflen ; buflen = 0 ;
VAR_DECL	5381:1	5381:5	4	int buflen ; buflen = 0
TYPE	5381:1	5381:1	5	int
TYPE_NAME	5381:1	5381:1	6	int
LEAF_NODE	5381:1	5381:1	7	int
NAME	5381:5	5381:5	5	buflen
LEAF_NODE	5381:5	5381:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	5381:5	5381:5	5	buflen = 0
ASSIGN	5381:5	5381:12	6	buflen = 0
LVAL	5381:5	5381:5	7	buflen
NAME	5381:5	5381:5	8	buflen
LEAF_NODE	5381:5	5381:5	9	buflen
ASSIGN_OP	5381:11	5381:11	7	=
LEAF_NODE	5381:11	5381:11	8	=
RVAL	5381:12	5381:12	7	0
FIELD	5381:12	5381:12	8	0
LEAF_NODE	5381:12	5381:12	9	0
LEAF_NODE	5381:13	5381:13	4	;
SIMPLE_DECL	5382:1	5382:11	3	uint32 i ; i = 0 ;
VAR_DECL	5382:1	5382:8	4	uint32 i ; i = 0
TYPE	5382:1	5382:1	5	uint32
TYPE_NAME	5382:1	5382:1	6	uint32
LEAF_NODE	5382:1	5382:1	7	uint32
NAME	5382:8	5382:8	5	i
LEAF_NODE	5382:8	5382:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	5382:8	5382:8	5	i = 0
ASSIGN	5382:8	5382:10	6	i = 0
LVAL	5382:8	5382:8	7	i
NAME	5382:8	5382:8	8	i
LEAF_NODE	5382:8	5382:8	9	i
ASSIGN_OP	5382:9	5382:9	7	=
LEAF_NODE	5382:9	5382:9	8	=
RVAL	5382:10	5382:10	7	0
FIELD	5382:10	5382:10	8	0
LEAF_NODE	5382:10	5382:10	9	0
LEAF_NODE	5382:11	5382:11	4	;
EXPR_STATEMENT	5384:1	5384:57	3	written += t2pWriteFile ( output , ( tdata_t ) "xref\n0 " , 7 ) ;
EXPR	5384:1	5384:1	4	written += t2pWriteFile ( output , ( tdata_t ) "xref\n0 " , 7 )
ASSIGN	5384:1	5384:12	5	written += t2pWriteFile ( output , ( tdata_t ) "xref\n0 " , 7 )
LVAL	5384:1	5384:1	6	written
FIELD	5384:1	5384:1	7	written
LEAF_NODE	5384:1	5384:1	8	written
ASSIGN_OP	5384:9	5384:9	6	+=
LEAF_NODE	5384:9	5384:9	7	+=
RVAL	5384:12	5384:12	6	t2pWriteFile ( output , ( tdata_t ) "xref\n0 " , 7 )
FUNCTION_CALL	5384:12	5384:56	7	t2pWriteFile ( output , ( tdata_t ) "xref\n0 " , 7 )
CALLEE	5384:12	5384:12	8	t2pWriteFile
LEAF_NODE	5384:12	5384:12	9	t2pWriteFile
LEAF_NODE	5384:24	5384:24	8	(
ARGUMENT	5384:25	5384:25	8	output
FIELD	5384:25	5384:25	9	output
LEAF_NODE	5384:25	5384:25	10	output
LEAF_NODE	5384:31	5384:31	8	,
ARGUMENT	5384:33	5384:43	8	( tdata_t ) "xref\n0 "
LEAF_NODE	5384:33	5384:33	9	(
TYPE_NAME	5384:34	5384:34	9	tdata_t
LEAF_NODE	5384:34	5384:34	10	tdata_t
LEAF_NODE	5384:41	5384:41	9	)
FIELD	5384:43	5384:43	9	"xref\n0 "
LEAF_NODE	5384:43	5384:43	10	"xref\n0 "
LEAF_NODE	5384:53	5384:53	8	,
ARGUMENT	5384:55	5384:55	8	7
FIELD	5384:55	5384:55	9	7
LEAF_NODE	5384:55	5384:55	10	7
LEAF_NODE	5384:56	5384:56	8	)
LEAF_NODE	5384:57	5384:57	4	;
EXPR_STATEMENT	5385:1	5385:88	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) ) ;
EXPR	5385:1	5385:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
ASSIGN	5385:1	5385:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
LVAL	5385:1	5385:1	6	buflen
FIELD	5385:1	5385:1	7	buflen
LEAF_NODE	5385:1	5385:1	8	buflen
ASSIGN_OP	5385:7	5385:7	6	=
LEAF_NODE	5385:7	5385:7	7	=
RVAL	5385:8	5385:8	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
FUNCTION_CALL	5385:8	5385:87	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
CALLEE	5385:8	5385:8	8	snprintf
LEAF_NODE	5385:8	5385:8	9	snprintf
LEAF_NODE	5385:16	5385:16	8	(
ARGUMENT	5385:17	5385:17	8	buffer
FIELD	5385:17	5385:17	9	buffer
LEAF_NODE	5385:17	5385:17	10	buffer
LEAF_NODE	5385:23	5385:23	8	,
ARGUMENT	5385:25	5385:25	8	sizeof ( buffer )
FUNCTION_CALL	5385:25	5385:38	9	sizeof ( buffer )
CALLEE	5385:25	5385:25	10	sizeof
LEAF_NODE	5385:25	5385:25	11	sizeof
LEAF_NODE	5385:31	5385:31	10	(
ARGUMENT	5385:32	5385:32	10	buffer
FIELD	5385:32	5385:32	11	buffer
LEAF_NODE	5385:32	5385:32	12	buffer
LEAF_NODE	5385:38	5385:38	10	)
LEAF_NODE	5385:39	5385:39	8	,
ARGUMENT	5385:41	5385:41	8	"%lu"
FIELD	5385:41	5385:41	9	"%lu"
LEAF_NODE	5385:41	5385:41	10	"%lu"
LEAF_NODE	5385:46	5385:46	8	,
ARGUMENT	5385:48	5385:86	8	( unsigned long ) ( t2p -> pdf_xrefcount + 1 )
LEAF_NODE	5385:48	5385:48	9	(
TYPE_NAME	5385:49	5385:58	9	unsigned long
LEAF_NODE	5385:49	5385:49	10	unsigned
LEAF_NODE	5385:58	5385:58	10	long
LEAF_NODE	5385:62	5385:62	9	)
LEAF_NODE	5385:63	5385:63	9	(
FIELD	5385:64	5385:69	9	t2p -> pdf_xrefcount
LEAF_NODE	5385:64	5385:64	10	t2p
LEAF_NODE	5385:67	5385:67	10	->
LEAF_NODE	5385:69	5385:69	10	pdf_xrefcount
LEAF_NODE	5385:83	5385:83	9	+
FIELD	5385:85	5385:85	9	1
LEAF_NODE	5385:85	5385:85	10	1
LEAF_NODE	5385:86	5385:86	9	)
LEAF_NODE	5385:87	5385:87	8	)
LEAF_NODE	5385:88	5385:88	4	;
EXPR_STATEMENT	5386:1	5386:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5386:1	5386:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5386:1	5386:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5386:1	5386:1	6	check_snprintf_ret
LEAF_NODE	5386:1	5386:1	7	check_snprintf_ret
LEAF_NODE	5386:19	5386:19	6	(
ARGUMENT	5386:20	5386:20	6	t2p
FIELD	5386:20	5386:20	7	t2p
LEAF_NODE	5386:20	5386:20	8	t2p
LEAF_NODE	5386:23	5386:23	6	,
ARGUMENT	5386:25	5386:25	6	buflen
FIELD	5386:25	5386:25	7	buflen
LEAF_NODE	5386:25	5386:25	8	buflen
LEAF_NODE	5386:31	5386:31	6	,
ARGUMENT	5386:33	5386:33	6	buffer
FIELD	5386:33	5386:33	7	buffer
LEAF_NODE	5386:33	5386:33	8	buffer
LEAF_NODE	5386:39	5386:39	6	)
LEAF_NODE	5386:40	5386:40	4	;
EXPR_STATEMENT	5387:1	5387:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5387:1	5387:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5387:1	5387:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5387:1	5387:1	6	written
FIELD	5387:1	5387:1	7	written
LEAF_NODE	5387:1	5387:1	8	written
ASSIGN_OP	5387:9	5387:9	6	+=
LEAF_NODE	5387:9	5387:9	7	+=
RVAL	5387:12	5387:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5387:12	5387:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5387:12	5387:12	8	t2pWriteFile
LEAF_NODE	5387:12	5387:12	9	t2pWriteFile
LEAF_NODE	5387:24	5387:24	8	(
ARGUMENT	5387:25	5387:25	8	output
FIELD	5387:25	5387:25	9	output
LEAF_NODE	5387:25	5387:25	10	output
LEAF_NODE	5387:31	5387:31	8	,
ARGUMENT	5387:33	5387:43	8	( tdata_t ) buffer
LEAF_NODE	5387:33	5387:33	9	(
TYPE_NAME	5387:34	5387:34	9	tdata_t
LEAF_NODE	5387:34	5387:34	10	tdata_t
LEAF_NODE	5387:41	5387:41	9	)
FIELD	5387:43	5387:43	9	buffer
LEAF_NODE	5387:43	5387:43	10	buffer
LEAF_NODE	5387:49	5387:49	8	,
ARGUMENT	5387:51	5387:51	8	buflen
FIELD	5387:51	5387:51	9	buflen
LEAF_NODE	5387:51	5387:51	10	buflen
LEAF_NODE	5387:57	5387:57	8	)
LEAF_NODE	5387:58	5387:58	4	;
EXPR_STATEMENT	5388:1	5388:74	3	written += t2pWriteFile ( output , ( tdata_t ) " \n0000000000 65535 f \n" , 22 ) ;
EXPR	5388:1	5388:1	4	written += t2pWriteFile ( output , ( tdata_t ) " \n0000000000 65535 f \n" , 22 )
ASSIGN	5388:1	5388:12	5	written += t2pWriteFile ( output , ( tdata_t ) " \n0000000000 65535 f \n" , 22 )
LVAL	5388:1	5388:1	6	written
FIELD	5388:1	5388:1	7	written
LEAF_NODE	5388:1	5388:1	8	written
ASSIGN_OP	5388:9	5388:9	6	+=
LEAF_NODE	5388:9	5388:9	7	+=
RVAL	5388:12	5388:12	6	t2pWriteFile ( output , ( tdata_t ) " \n0000000000 65535 f \n" , 22 )
FUNCTION_CALL	5388:12	5388:73	7	t2pWriteFile ( output , ( tdata_t ) " \n0000000000 65535 f \n" , 22 )
CALLEE	5388:12	5388:12	8	t2pWriteFile
LEAF_NODE	5388:12	5388:12	9	t2pWriteFile
LEAF_NODE	5388:24	5388:24	8	(
ARGUMENT	5388:25	5388:25	8	output
FIELD	5388:25	5388:25	9	output
LEAF_NODE	5388:25	5388:25	10	output
LEAF_NODE	5388:31	5388:31	8	,
ARGUMENT	5388:33	5388:43	8	( tdata_t ) " \n0000000000 65535 f \n"
LEAF_NODE	5388:33	5388:33	9	(
TYPE_NAME	5388:34	5388:34	9	tdata_t
LEAF_NODE	5388:34	5388:34	10	tdata_t
LEAF_NODE	5388:41	5388:41	9	)
FIELD	5388:43	5388:43	9	" \n0000000000 65535 f \n"
LEAF_NODE	5388:43	5388:43	10	" \n0000000000 65535 f \n"
LEAF_NODE	5388:69	5388:69	8	,
ARGUMENT	5388:71	5388:71	8	22
FIELD	5388:71	5388:71	9	22
LEAF_NODE	5388:71	5388:71	10	22
LEAF_NODE	5388:73	5388:73	8	)
LEAF_NODE	5388:74	5388:74	4	;
ITERATION	5389:1	5389:35	3	
KEYWORD	5389:1	5389:1	4	for
LEAF_NODE	5389:1	5389:1	5	for
LEAF_NODE	5389:5	5389:5	4	(
FOR_INIT	5389:6	5389:9	4	i = 0 ;
EXPR	5389:6	5389:6	5	i = 0
ASSIGN	5389:6	5389:8	6	i = 0
LVAL	5389:6	5389:6	7	i
FIELD	5389:6	5389:6	8	i
LEAF_NODE	5389:6	5389:6	9	i
ASSIGN_OP	5389:7	5389:7	7	=
LEAF_NODE	5389:7	5389:7	8	=
RVAL	5389:8	5389:8	7	0
FIELD	5389:8	5389:8	8	0
LEAF_NODE	5389:8	5389:8	9	0
LEAF_NODE	5389:9	5389:9	5	;
CONDITION	5389:10	5389:10	4	i < t2p -> pdf_xrefcount
EXPR	5389:10	5389:12	5	i < t2p -> pdf_xrefcount
FIELD	5389:10	5389:10	6	i
LEAF_NODE	5389:10	5389:10	7	i
REL_OPERATOR	5389:11	5389:11	6	<
LEAF_NODE	5389:11	5389:11	7	<
FIELD	5389:12	5389:17	6	t2p -> pdf_xrefcount
LEAF_NODE	5389:12	5389:12	7	t2p
LEAF_NODE	5389:15	5389:15	7	->
LEAF_NODE	5389:17	5389:17	7	pdf_xrefcount
LEAF_NODE	5389:30	5389:30	4	;
FOR_EXPR	5389:31	5389:31	4	i ++
EXPR	5389:31	5389:31	5	i ++
FIELD	5389:31	5389:32	6	i ++
LEAF_NODE	5389:31	5389:31	7	i
LEAF_NODE	5389:32	5389:32	7	++
LEAF_NODE	5389:34	5389:34	4	)
STATEMENTS	5389:35	5393:1	4	
LEAF_NODE	5389:35	5389:35	5	{
STATEMENTS	5390:2	5392:2	5	
EXPR_STATEMENT	5390:2	5391:42	6	snprintf ( buffer , sizeof ( buffer ) , "%.10lu 00000 n \n" , ( unsigned long ) t2p -> pdf_xrefoffsets [ i ] ) ;
EXPR	5390:2	5390:2	7	snprintf ( buffer , sizeof ( buffer ) , "%.10lu 00000 n \n" , ( unsigned long ) t2p -> pdf_xrefoffsets [ i ] )
FUNCTION_CALL	5390:2	5391:41	8	snprintf ( buffer , sizeof ( buffer ) , "%.10lu 00000 n \n" , ( unsigned long ) t2p -> pdf_xrefoffsets [ i ] )
CALLEE	5390:2	5390:2	9	snprintf
LEAF_NODE	5390:2	5390:2	10	snprintf
LEAF_NODE	5390:10	5390:10	9	(
ARGUMENT	5390:11	5390:11	9	buffer
FIELD	5390:11	5390:11	10	buffer
LEAF_NODE	5390:11	5390:11	11	buffer
LEAF_NODE	5390:17	5390:17	9	,
ARGUMENT	5390:19	5390:19	9	sizeof ( buffer )
FUNCTION_CALL	5390:19	5390:32	10	sizeof ( buffer )
CALLEE	5390:19	5390:19	11	sizeof
LEAF_NODE	5390:19	5390:19	12	sizeof
LEAF_NODE	5390:25	5390:25	11	(
ARGUMENT	5390:26	5390:26	11	buffer
FIELD	5390:26	5390:26	12	buffer
LEAF_NODE	5390:26	5390:26	13	buffer
LEAF_NODE	5390:32	5390:32	11	)
LEAF_NODE	5390:33	5390:33	9	,
ARGUMENT	5390:35	5390:35	9	"%.10lu 00000 n \n"
FIELD	5390:35	5390:35	10	"%.10lu 00000 n \n"
LEAF_NODE	5390:35	5390:35	11	"%.10lu 00000 n \n"
LEAF_NODE	5390:54	5390:54	9	,
ARGUMENT	5391:3	5391:18	9	( unsigned long ) t2p -> pdf_xrefoffsets [ i ]
LEAF_NODE	5391:3	5391:3	10	(
TYPE_NAME	5391:4	5391:13	10	unsigned long
LEAF_NODE	5391:4	5391:4	11	unsigned
LEAF_NODE	5391:13	5391:13	11	long
LEAF_NODE	5391:17	5391:17	10	)
FIELD	5391:18	5391:40	10	t2p -> pdf_xrefoffsets [ i ]
LEAF_NODE	5391:18	5391:18	11	t2p
LEAF_NODE	5391:21	5391:21	11	->
LEAF_NODE	5391:23	5391:23	11	pdf_xrefoffsets
LEAF_NODE	5391:38	5391:38	11	[
EXPR	5391:39	5391:39	11	i
FIELD	5391:39	5391:39	12	i
LEAF_NODE	5391:39	5391:39	13	i
LEAF_NODE	5391:40	5391:40	11	]
LEAF_NODE	5391:41	5391:41	9	)
LEAF_NODE	5391:42	5391:42	7	;
EXPR_STATEMENT	5392:2	5392:55	6	written += t2pWriteFile ( output , ( tdata_t ) buffer , 20 ) ;
EXPR	5392:2	5392:2	7	written += t2pWriteFile ( output , ( tdata_t ) buffer , 20 )
ASSIGN	5392:2	5392:13	8	written += t2pWriteFile ( output , ( tdata_t ) buffer , 20 )
LVAL	5392:2	5392:2	9	written
FIELD	5392:2	5392:2	10	written
LEAF_NODE	5392:2	5392:2	11	written
ASSIGN_OP	5392:10	5392:10	9	+=
LEAF_NODE	5392:10	5392:10	10	+=
RVAL	5392:13	5392:13	9	t2pWriteFile ( output , ( tdata_t ) buffer , 20 )
FUNCTION_CALL	5392:13	5392:54	10	t2pWriteFile ( output , ( tdata_t ) buffer , 20 )
CALLEE	5392:13	5392:13	11	t2pWriteFile
LEAF_NODE	5392:13	5392:13	12	t2pWriteFile
LEAF_NODE	5392:25	5392:25	11	(
ARGUMENT	5392:26	5392:26	11	output
FIELD	5392:26	5392:26	12	output
LEAF_NODE	5392:26	5392:26	13	output
LEAF_NODE	5392:32	5392:32	11	,
ARGUMENT	5392:34	5392:44	11	( tdata_t ) buffer
LEAF_NODE	5392:34	5392:34	12	(
TYPE_NAME	5392:35	5392:35	12	tdata_t
LEAF_NODE	5392:35	5392:35	13	tdata_t
LEAF_NODE	5392:42	5392:42	12	)
FIELD	5392:44	5392:44	12	buffer
LEAF_NODE	5392:44	5392:44	13	buffer
LEAF_NODE	5392:50	5392:50	11	,
ARGUMENT	5392:52	5392:52	11	20
FIELD	5392:52	5392:52	12	20
LEAF_NODE	5392:52	5392:52	13	20
LEAF_NODE	5392:54	5392:54	11	)
LEAF_NODE	5392:55	5392:55	7	;
LEAF_NODE	5393:1	5393:1	5	}
LEAF_NODE	5395:1	5395:1	3	return
LEAF_NODE	5395:7	5395:7	3	(
LEAF_NODE	5395:8	5395:8	3	written
LEAF_NODE	5395:15	5395:15	3	)
LEAF_NODE	5395:16	5395:16	3	;
LEAF_NODE	5396:0	5396:0	2	}
FUNCTION_DEF	5402:0	5438:0	1	
RETURN_TYPE	5402:0	5402:0	2	tsize_t
TYPE_NAME	5402:0	5402:0	3	tsize_t
LEAF_NODE	5402:0	5402:0	4	tsize_t
FUNCTION_NAME	5402:8	5402:8	2	t2p_write_pdf_trailer
LEAF_NODE	5402:8	5402:8	3	t2p_write_pdf_trailer
PARAMETER_LIST	5402:29	5402:52	2	( T2P * t2p , TIFF * output )
LEAF_NODE	5402:29	5402:29	3	(
PARAMETER_DECL	5402:30	5402:35	3	T2P * t2p
TYPE	5402:30	5402:33	4	T2P *
TYPE_NAME	5402:30	5402:30	5	T2P
LEAF_NODE	5402:30	5402:30	6	T2P
POINTER	5402:33	5402:33	5	*
LEAF_NODE	5402:33	5402:33	6	*
NAME	5402:35	5402:35	4	t2p
LEAF_NODE	5402:35	5402:35	5	t2p
LEAF_NODE	5402:38	5402:38	3	,
PARAMETER_DECL	5402:40	5402:46	3	TIFF * output
TYPE	5402:40	5402:44	4	TIFF *
TYPE_NAME	5402:40	5402:40	5	TIFF
LEAF_NODE	5402:40	5402:40	6	TIFF
POINTER	5402:44	5402:44	5	*
LEAF_NODE	5402:44	5402:44	6	*
NAME	5402:46	5402:46	4	output
LEAF_NODE	5402:46	5402:46	5	output
LEAF_NODE	5402:52	5402:52	3	)
LEAF_NODE	5403:0	5403:0	2	{
STATEMENTS	5405:1	5437:16	2	
SIMPLE_DECL	5405:1	5405:20	3	tsize_t written ; written = 0 ;
VAR_DECL	5405:1	5405:9	4	tsize_t written ; written = 0
TYPE	5405:1	5405:1	5	tsize_t
TYPE_NAME	5405:1	5405:1	6	tsize_t
LEAF_NODE	5405:1	5405:1	7	tsize_t
NAME	5405:9	5405:9	5	written
LEAF_NODE	5405:9	5405:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5405:9	5405:9	5	written = 0
ASSIGN	5405:9	5405:19	6	written = 0
LVAL	5405:9	5405:9	7	written
NAME	5405:9	5405:9	8	written
LEAF_NODE	5405:9	5405:9	9	written
ASSIGN_OP	5405:17	5405:17	7	=
LEAF_NODE	5405:17	5405:17	8	=
RVAL	5405:19	5405:19	7	0
FIELD	5405:19	5405:19	8	0
LEAF_NODE	5405:19	5405:19	9	0
LEAF_NODE	5405:20	5405:20	4	;
SIMPLE_DECL	5406:1	5406:16	3	char [ 32 ] buffer ;
VAR_DECL	5406:1	5406:6	4	char [ 32 ] buffer
TYPE	5406:1	5406:12	5	char [ 32 ]
TYPE_NAME	5406:1	5406:1	6	char
LEAF_NODE	5406:1	5406:1	7	char
TYPE_SUFFIX	5406:12	5406:15	6	[ 32 ]
LEAF_NODE	5406:12	5406:12	7	[
FIELD	5406:13	5406:13	7	32
LEAF_NODE	5406:13	5406:13	8	32
LEAF_NODE	5406:15	5406:15	7	]
NAME	5406:6	5406:6	5	buffer
LEAF_NODE	5406:6	5406:6	6	buffer
LEAF_NODE	5406:16	5406:16	4	;
SIMPLE_DECL	5407:1	5407:15	3	int buflen ; buflen = 0 ;
VAR_DECL	5407:1	5407:5	4	int buflen ; buflen = 0
TYPE	5407:1	5407:1	5	int
TYPE_NAME	5407:1	5407:1	6	int
LEAF_NODE	5407:1	5407:1	7	int
NAME	5407:5	5407:5	5	buflen
LEAF_NODE	5407:5	5407:5	6	buflen
LEAF_NODE	0:0	0:0	5	;
INIT	5407:5	5407:5	5	buflen = 0
ASSIGN	5407:5	5407:14	6	buflen = 0
LVAL	5407:5	5407:5	7	buflen
NAME	5407:5	5407:5	8	buflen
LEAF_NODE	5407:5	5407:5	9	buflen
ASSIGN_OP	5407:12	5407:12	7	=
LEAF_NODE	5407:12	5407:12	8	=
RVAL	5407:14	5407:14	7	0
FIELD	5407:14	5407:14	8	0
LEAF_NODE	5407:14	5407:14	9	0
LEAF_NODE	5407:15	5407:15	4	;
SIMPLE_DECL	5408:1	5408:13	3	size_t i ; i = 0 ;
VAR_DECL	5408:1	5408:8	4	size_t i ; i = 0
TYPE	5408:1	5408:1	5	size_t
TYPE_NAME	5408:1	5408:1	6	size_t
LEAF_NODE	5408:1	5408:1	7	size_t
NAME	5408:8	5408:8	5	i
LEAF_NODE	5408:8	5408:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	5408:8	5408:8	5	i = 0
ASSIGN	5408:8	5408:12	6	i = 0
LVAL	5408:8	5408:8	7	i
NAME	5408:8	5408:8	8	i
LEAF_NODE	5408:8	5408:8	9	i
ASSIGN_OP	5408:10	5408:10	7	=
LEAF_NODE	5408:10	5408:10	8	=
RVAL	5408:12	5408:12	7	0
FIELD	5408:12	5408:12	8	0
LEAF_NODE	5408:12	5408:12	9	0
LEAF_NODE	5408:13	5408:13	4	;
ITERATION	5410:1	5411:2	3	
KEYWORD	5410:1	5410:1	4	for
LEAF_NODE	5410:1	5410:1	5	for
LEAF_NODE	5410:5	5410:5	4	(
FOR_INIT	5410:6	5410:11	4	i = 0 ;
EXPR	5410:6	5410:6	5	i = 0
ASSIGN	5410:6	5410:10	6	i = 0
LVAL	5410:6	5410:6	7	i
FIELD	5410:6	5410:6	8	i
LEAF_NODE	5410:6	5410:6	9	i
ASSIGN_OP	5410:8	5410:8	7	=
LEAF_NODE	5410:8	5410:8	8	=
RVAL	5410:10	5410:10	7	0
FIELD	5410:10	5410:10	8	0
LEAF_NODE	5410:10	5410:10	9	0
LEAF_NODE	5410:11	5410:11	5	;
CONDITION	5410:13	5410:13	4	i < sizeof ( t2p -> pdf_fileid ) - 8
EXPR	5410:13	5410:43	5	i < sizeof ( t2p -> pdf_fileid ) - 8
FIELD	5410:13	5410:13	6	i
LEAF_NODE	5410:13	5410:13	7	i
REL_OPERATOR	5410:15	5410:15	6	<
LEAF_NODE	5410:15	5410:15	7	<
FUNCTION_CALL	5410:17	5410:39	6	sizeof ( t2p -> pdf_fileid )
CALLEE	5410:17	5410:17	7	sizeof
LEAF_NODE	5410:17	5410:17	8	sizeof
LEAF_NODE	5410:23	5410:23	7	(
ARGUMENT	5410:24	5410:24	7	t2p -> pdf_fileid
FIELD	5410:24	5410:29	8	t2p -> pdf_fileid
LEAF_NODE	5410:24	5410:24	9	t2p
LEAF_NODE	5410:27	5410:27	9	->
LEAF_NODE	5410:29	5410:29	9	pdf_fileid
LEAF_NODE	5410:39	5410:39	7	)
LEAF_NODE	5410:41	5410:41	6	-
FIELD	5410:43	5410:43	6	8
LEAF_NODE	5410:43	5410:43	7	8
LEAF_NODE	5410:44	5410:44	4	;
FOR_EXPR	5410:46	5410:46	4	i += 8
EXPR	5410:46	5410:46	5	i += 8
ASSIGN	5410:46	5410:51	6	i += 8
LVAL	5410:46	5410:46	7	i
FIELD	5410:46	5410:46	8	i
LEAF_NODE	5410:46	5410:46	9	i
ASSIGN_OP	5410:48	5410:48	7	+=
LEAF_NODE	5410:48	5410:48	8	+=
RVAL	5410:51	5410:51	7	8
FIELD	5410:51	5410:51	8	8
LEAF_NODE	5410:51	5410:51	9	8
LEAF_NODE	5410:52	5410:52	4	)
STATEMENTS	5411:2	5411:2	4	
EXPR_STATEMENT	5411:2	5411:50	5	snprintf ( t2p -> pdf_fileid + i , 9 , "%.8X" , rand ( ) ) ;
EXPR	5411:2	5411:2	6	snprintf ( t2p -> pdf_fileid + i , 9 , "%.8X" , rand ( ) )
FUNCTION_CALL	5411:2	5411:49	7	snprintf ( t2p -> pdf_fileid + i , 9 , "%.8X" , rand ( ) )
CALLEE	5411:2	5411:2	8	snprintf
LEAF_NODE	5411:2	5411:2	9	snprintf
LEAF_NODE	5411:10	5411:10	8	(
ARGUMENT	5411:11	5411:29	8	t2p -> pdf_fileid + i
FIELD	5411:11	5411:16	9	t2p -> pdf_fileid
LEAF_NODE	5411:11	5411:11	10	t2p
LEAF_NODE	5411:14	5411:14	10	->
LEAF_NODE	5411:16	5411:16	10	pdf_fileid
LEAF_NODE	5411:27	5411:27	9	+
FIELD	5411:29	5411:29	9	i
LEAF_NODE	5411:29	5411:29	10	i
LEAF_NODE	5411:30	5411:30	8	,
ARGUMENT	5411:32	5411:32	8	9
FIELD	5411:32	5411:32	9	9
LEAF_NODE	5411:32	5411:32	10	9
LEAF_NODE	5411:33	5411:33	8	,
ARGUMENT	5411:35	5411:35	8	"%.8X"
FIELD	5411:35	5411:35	9	"%.8X"
LEAF_NODE	5411:35	5411:35	10	"%.8X"
LEAF_NODE	5411:41	5411:41	8	,
ARGUMENT	5411:43	5411:43	8	rand ( )
FUNCTION_CALL	5411:43	5411:48	9	rand ( )
CALLEE	5411:43	5411:43	10	rand
LEAF_NODE	5411:43	5411:43	11	rand
LEAF_NODE	5411:47	5411:47	10	(
LEAF_NODE	5411:48	5411:48	10	)
LEAF_NODE	5411:49	5411:49	8	)
LEAF_NODE	5411:50	5411:50	6	;
EXPR_STATEMENT	5413:1	5413:69	3	written += t2pWriteFile ( output , ( tdata_t ) "trailer\n<<\n/Size " , 17 ) ;
EXPR	5413:1	5413:1	4	written += t2pWriteFile ( output , ( tdata_t ) "trailer\n<<\n/Size " , 17 )
ASSIGN	5413:1	5413:12	5	written += t2pWriteFile ( output , ( tdata_t ) "trailer\n<<\n/Size " , 17 )
LVAL	5413:1	5413:1	6	written
FIELD	5413:1	5413:1	7	written
LEAF_NODE	5413:1	5413:1	8	written
ASSIGN_OP	5413:9	5413:9	6	+=
LEAF_NODE	5413:9	5413:9	7	+=
RVAL	5413:12	5413:12	6	t2pWriteFile ( output , ( tdata_t ) "trailer\n<<\n/Size " , 17 )
FUNCTION_CALL	5413:12	5413:68	7	t2pWriteFile ( output , ( tdata_t ) "trailer\n<<\n/Size " , 17 )
CALLEE	5413:12	5413:12	8	t2pWriteFile
LEAF_NODE	5413:12	5413:12	9	t2pWriteFile
LEAF_NODE	5413:24	5413:24	8	(
ARGUMENT	5413:25	5413:25	8	output
FIELD	5413:25	5413:25	9	output
LEAF_NODE	5413:25	5413:25	10	output
LEAF_NODE	5413:31	5413:31	8	,
ARGUMENT	5413:33	5413:43	8	( tdata_t ) "trailer\n<<\n/Size "
LEAF_NODE	5413:33	5413:33	9	(
TYPE_NAME	5413:34	5413:34	9	tdata_t
LEAF_NODE	5413:34	5413:34	10	tdata_t
LEAF_NODE	5413:41	5413:41	9	)
FIELD	5413:43	5413:43	9	"trailer\n<<\n/Size "
LEAF_NODE	5413:43	5413:43	10	"trailer\n<<\n/Size "
LEAF_NODE	5413:64	5413:64	8	,
ARGUMENT	5413:66	5413:66	8	17
FIELD	5413:66	5413:66	9	17
LEAF_NODE	5413:66	5413:66	10	17
LEAF_NODE	5413:68	5413:68	8	)
LEAF_NODE	5413:69	5413:69	4	;
EXPR_STATEMENT	5414:1	5414:88	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) ) ;
EXPR	5414:1	5414:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
ASSIGN	5414:1	5414:10	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
LVAL	5414:1	5414:1	6	buflen
FIELD	5414:1	5414:1	7	buflen
LEAF_NODE	5414:1	5414:1	8	buflen
ASSIGN_OP	5414:8	5414:8	6	=
LEAF_NODE	5414:8	5414:8	7	=
RVAL	5414:10	5414:10	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
FUNCTION_CALL	5414:10	5414:87	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) ( t2p -> pdf_xrefcount + 1 ) )
CALLEE	5414:10	5414:10	8	snprintf
LEAF_NODE	5414:10	5414:10	9	snprintf
LEAF_NODE	5414:18	5414:18	8	(
ARGUMENT	5414:19	5414:19	8	buffer
FIELD	5414:19	5414:19	9	buffer
LEAF_NODE	5414:19	5414:19	10	buffer
LEAF_NODE	5414:25	5414:25	8	,
ARGUMENT	5414:27	5414:27	8	sizeof ( buffer )
FUNCTION_CALL	5414:27	5414:40	9	sizeof ( buffer )
CALLEE	5414:27	5414:27	10	sizeof
LEAF_NODE	5414:27	5414:27	11	sizeof
LEAF_NODE	5414:33	5414:33	10	(
ARGUMENT	5414:34	5414:34	10	buffer
FIELD	5414:34	5414:34	11	buffer
LEAF_NODE	5414:34	5414:34	12	buffer
LEAF_NODE	5414:40	5414:40	10	)
LEAF_NODE	5414:41	5414:41	8	,
ARGUMENT	5414:43	5414:43	8	"%lu"
FIELD	5414:43	5414:43	9	"%lu"
LEAF_NODE	5414:43	5414:43	10	"%lu"
LEAF_NODE	5414:48	5414:48	8	,
ARGUMENT	5414:50	5414:86	8	( unsigned long ) ( t2p -> pdf_xrefcount + 1 )
LEAF_NODE	5414:50	5414:50	9	(
TYPE_NAME	5414:51	5414:60	9	unsigned long
LEAF_NODE	5414:51	5414:51	10	unsigned
LEAF_NODE	5414:60	5414:60	10	long
LEAF_NODE	5414:64	5414:64	9	)
LEAF_NODE	5414:65	5414:65	9	(
FIELD	5414:66	5414:71	9	t2p -> pdf_xrefcount
LEAF_NODE	5414:66	5414:66	10	t2p
LEAF_NODE	5414:69	5414:69	10	->
LEAF_NODE	5414:71	5414:71	10	pdf_xrefcount
LEAF_NODE	5414:84	5414:84	9	+
FIELD	5414:85	5414:85	9	1
LEAF_NODE	5414:85	5414:85	10	1
LEAF_NODE	5414:86	5414:86	9	)
LEAF_NODE	5414:87	5414:87	8	)
LEAF_NODE	5414:88	5414:88	4	;
EXPR_STATEMENT	5415:1	5415:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5415:1	5415:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5415:1	5415:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5415:1	5415:1	6	check_snprintf_ret
LEAF_NODE	5415:1	5415:1	7	check_snprintf_ret
LEAF_NODE	5415:19	5415:19	6	(
ARGUMENT	5415:20	5415:20	6	t2p
FIELD	5415:20	5415:20	7	t2p
LEAF_NODE	5415:20	5415:20	8	t2p
LEAF_NODE	5415:23	5415:23	6	,
ARGUMENT	5415:25	5415:25	6	buflen
FIELD	5415:25	5415:25	7	buflen
LEAF_NODE	5415:25	5415:25	8	buflen
LEAF_NODE	5415:31	5415:31	6	,
ARGUMENT	5415:33	5415:33	6	buffer
FIELD	5415:33	5415:33	7	buffer
LEAF_NODE	5415:33	5415:33	8	buffer
LEAF_NODE	5415:39	5415:39	6	)
LEAF_NODE	5415:40	5415:40	4	;
EXPR_STATEMENT	5416:1	5416:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5416:1	5416:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5416:1	5416:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5416:1	5416:1	6	written
FIELD	5416:1	5416:1	7	written
LEAF_NODE	5416:1	5416:1	8	written
ASSIGN_OP	5416:9	5416:9	6	+=
LEAF_NODE	5416:9	5416:9	7	+=
RVAL	5416:12	5416:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5416:12	5416:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5416:12	5416:12	8	t2pWriteFile
LEAF_NODE	5416:12	5416:12	9	t2pWriteFile
LEAF_NODE	5416:24	5416:24	8	(
ARGUMENT	5416:25	5416:25	8	output
FIELD	5416:25	5416:25	9	output
LEAF_NODE	5416:25	5416:25	10	output
LEAF_NODE	5416:31	5416:31	8	,
ARGUMENT	5416:33	5416:43	8	( tdata_t ) buffer
LEAF_NODE	5416:33	5416:33	9	(
TYPE_NAME	5416:34	5416:34	9	tdata_t
LEAF_NODE	5416:34	5416:34	10	tdata_t
LEAF_NODE	5416:41	5416:41	9	)
FIELD	5416:43	5416:43	9	buffer
LEAF_NODE	5416:43	5416:43	10	buffer
LEAF_NODE	5416:49	5416:49	8	,
ARGUMENT	5416:51	5416:51	8	buflen
FIELD	5416:51	5416:51	9	buflen
LEAF_NODE	5416:51	5416:51	10	buflen
LEAF_NODE	5416:57	5416:57	8	)
LEAF_NODE	5416:58	5416:58	4	;
EXPR_STATEMENT	5417:1	5417:57	3	written += t2pWriteFile ( output , ( tdata_t ) "\n/Root " , 7 ) ;
EXPR	5417:1	5417:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\n/Root " , 7 )
ASSIGN	5417:1	5417:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\n/Root " , 7 )
LVAL	5417:1	5417:1	6	written
FIELD	5417:1	5417:1	7	written
LEAF_NODE	5417:1	5417:1	8	written
ASSIGN_OP	5417:9	5417:9	6	+=
LEAF_NODE	5417:9	5417:9	7	+=
RVAL	5417:12	5417:12	6	t2pWriteFile ( output , ( tdata_t ) "\n/Root " , 7 )
FUNCTION_CALL	5417:12	5417:56	7	t2pWriteFile ( output , ( tdata_t ) "\n/Root " , 7 )
CALLEE	5417:12	5417:12	8	t2pWriteFile
LEAF_NODE	5417:12	5417:12	9	t2pWriteFile
LEAF_NODE	5417:24	5417:24	8	(
ARGUMENT	5417:25	5417:25	8	output
FIELD	5417:25	5417:25	9	output
LEAF_NODE	5417:25	5417:25	10	output
LEAF_NODE	5417:31	5417:31	8	,
ARGUMENT	5417:33	5417:43	8	( tdata_t ) "\n/Root "
LEAF_NODE	5417:33	5417:33	9	(
TYPE_NAME	5417:34	5417:34	9	tdata_t
LEAF_NODE	5417:34	5417:34	10	tdata_t
LEAF_NODE	5417:41	5417:41	9	)
FIELD	5417:43	5417:43	9	"\n/Root "
LEAF_NODE	5417:43	5417:43	10	"\n/Root "
LEAF_NODE	5417:53	5417:53	8	,
ARGUMENT	5417:55	5417:55	8	7
FIELD	5417:55	5417:55	9	7
LEAF_NODE	5417:55	5417:55	10	7
LEAF_NODE	5417:56	5417:56	8	)
LEAF_NODE	5417:57	5417:57	4	;
EXPR_STATEMENT	5418:1	5418:80	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_catalog ) ;
EXPR	5418:1	5418:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_catalog )
ASSIGN	5418:1	5418:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_catalog )
LVAL	5418:1	5418:1	6	buflen
FIELD	5418:1	5418:1	7	buflen
LEAF_NODE	5418:1	5418:1	8	buflen
ASSIGN_OP	5418:7	5418:7	6	=
LEAF_NODE	5418:7	5418:7	7	=
RVAL	5418:8	5418:8	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_catalog )
FUNCTION_CALL	5418:8	5418:79	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_catalog )
CALLEE	5418:8	5418:8	8	snprintf
LEAF_NODE	5418:8	5418:8	9	snprintf
LEAF_NODE	5418:16	5418:16	8	(
ARGUMENT	5418:17	5418:17	8	buffer
FIELD	5418:17	5418:17	9	buffer
LEAF_NODE	5418:17	5418:17	10	buffer
LEAF_NODE	5418:23	5418:23	8	,
ARGUMENT	5418:25	5418:25	8	sizeof ( buffer )
FUNCTION_CALL	5418:25	5418:38	9	sizeof ( buffer )
CALLEE	5418:25	5418:25	10	sizeof
LEAF_NODE	5418:25	5418:25	11	sizeof
LEAF_NODE	5418:31	5418:31	10	(
ARGUMENT	5418:32	5418:32	10	buffer
FIELD	5418:32	5418:32	11	buffer
LEAF_NODE	5418:32	5418:32	12	buffer
LEAF_NODE	5418:38	5418:38	10	)
LEAF_NODE	5418:39	5418:39	8	,
ARGUMENT	5418:41	5418:41	8	"%lu"
FIELD	5418:41	5418:41	9	"%lu"
LEAF_NODE	5418:41	5418:41	10	"%lu"
LEAF_NODE	5418:46	5418:46	8	,
ARGUMENT	5418:48	5418:63	8	( unsigned long ) t2p -> pdf_catalog
LEAF_NODE	5418:48	5418:48	9	(
TYPE_NAME	5418:49	5418:58	9	unsigned long
LEAF_NODE	5418:49	5418:49	10	unsigned
LEAF_NODE	5418:58	5418:58	10	long
LEAF_NODE	5418:62	5418:62	9	)
FIELD	5418:63	5418:68	9	t2p -> pdf_catalog
LEAF_NODE	5418:63	5418:63	10	t2p
LEAF_NODE	5418:66	5418:66	10	->
LEAF_NODE	5418:68	5418:68	10	pdf_catalog
LEAF_NODE	5418:79	5418:79	8	)
LEAF_NODE	5418:80	5418:80	4	;
EXPR_STATEMENT	5419:1	5419:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5419:1	5419:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5419:1	5419:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5419:1	5419:1	6	check_snprintf_ret
LEAF_NODE	5419:1	5419:1	7	check_snprintf_ret
LEAF_NODE	5419:19	5419:19	6	(
ARGUMENT	5419:20	5419:20	6	t2p
FIELD	5419:20	5419:20	7	t2p
LEAF_NODE	5419:20	5419:20	8	t2p
LEAF_NODE	5419:23	5419:23	6	,
ARGUMENT	5419:25	5419:25	6	buflen
FIELD	5419:25	5419:25	7	buflen
LEAF_NODE	5419:25	5419:25	8	buflen
LEAF_NODE	5419:31	5419:31	6	,
ARGUMENT	5419:33	5419:33	6	buffer
FIELD	5419:33	5419:33	7	buffer
LEAF_NODE	5419:33	5419:33	8	buffer
LEAF_NODE	5419:39	5419:39	6	)
LEAF_NODE	5419:40	5419:40	4	;
EXPR_STATEMENT	5420:1	5420:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5420:1	5420:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5420:1	5420:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5420:1	5420:1	6	written
FIELD	5420:1	5420:1	7	written
LEAF_NODE	5420:1	5420:1	8	written
ASSIGN_OP	5420:9	5420:9	6	+=
LEAF_NODE	5420:9	5420:9	7	+=
RVAL	5420:12	5420:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5420:12	5420:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5420:12	5420:12	8	t2pWriteFile
LEAF_NODE	5420:12	5420:12	9	t2pWriteFile
LEAF_NODE	5420:24	5420:24	8	(
ARGUMENT	5420:25	5420:25	8	output
FIELD	5420:25	5420:25	9	output
LEAF_NODE	5420:25	5420:25	10	output
LEAF_NODE	5420:31	5420:31	8	,
ARGUMENT	5420:33	5420:43	8	( tdata_t ) buffer
LEAF_NODE	5420:33	5420:33	9	(
TYPE_NAME	5420:34	5420:34	9	tdata_t
LEAF_NODE	5420:34	5420:34	10	tdata_t
LEAF_NODE	5420:41	5420:41	9	)
FIELD	5420:43	5420:43	9	buffer
LEAF_NODE	5420:43	5420:43	10	buffer
LEAF_NODE	5420:49	5420:49	8	,
ARGUMENT	5420:51	5420:51	8	buflen
FIELD	5420:51	5420:51	9	buflen
LEAF_NODE	5420:51	5420:51	10	buflen
LEAF_NODE	5420:57	5420:57	8	)
LEAF_NODE	5420:58	5420:58	4	;
EXPR_STATEMENT	5421:1	5421:63	3	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n/Info " , 12 ) ;
EXPR	5421:1	5421:1	4	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n/Info " , 12 )
ASSIGN	5421:1	5421:12	5	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n/Info " , 12 )
LVAL	5421:1	5421:1	6	written
FIELD	5421:1	5421:1	7	written
LEAF_NODE	5421:1	5421:1	8	written
ASSIGN_OP	5421:9	5421:9	6	+=
LEAF_NODE	5421:9	5421:9	7	+=
RVAL	5421:12	5421:12	6	t2pWriteFile ( output , ( tdata_t ) " 0 R \n/Info " , 12 )
FUNCTION_CALL	5421:12	5421:62	7	t2pWriteFile ( output , ( tdata_t ) " 0 R \n/Info " , 12 )
CALLEE	5421:12	5421:12	8	t2pWriteFile
LEAF_NODE	5421:12	5421:12	9	t2pWriteFile
LEAF_NODE	5421:24	5421:24	8	(
ARGUMENT	5421:25	5421:25	8	output
FIELD	5421:25	5421:25	9	output
LEAF_NODE	5421:25	5421:25	10	output
LEAF_NODE	5421:31	5421:31	8	,
ARGUMENT	5421:33	5421:43	8	( tdata_t ) " 0 R \n/Info "
LEAF_NODE	5421:33	5421:33	9	(
TYPE_NAME	5421:34	5421:34	9	tdata_t
LEAF_NODE	5421:34	5421:34	10	tdata_t
LEAF_NODE	5421:41	5421:41	9	)
FIELD	5421:43	5421:43	9	" 0 R \n/Info "
LEAF_NODE	5421:43	5421:43	10	" 0 R \n/Info "
LEAF_NODE	5421:58	5421:58	8	,
ARGUMENT	5421:60	5421:60	8	12
FIELD	5421:60	5421:60	9	12
LEAF_NODE	5421:60	5421:60	10	12
LEAF_NODE	5421:62	5421:62	8	)
LEAF_NODE	5421:63	5421:63	4	;
EXPR_STATEMENT	5422:1	5422:77	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_info ) ;
EXPR	5422:1	5422:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_info )
ASSIGN	5422:1	5422:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_info )
LVAL	5422:1	5422:1	6	buflen
FIELD	5422:1	5422:1	7	buflen
LEAF_NODE	5422:1	5422:1	8	buflen
ASSIGN_OP	5422:7	5422:7	6	=
LEAF_NODE	5422:7	5422:7	7	=
RVAL	5422:8	5422:8	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_info )
FUNCTION_CALL	5422:8	5422:76	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_info )
CALLEE	5422:8	5422:8	8	snprintf
LEAF_NODE	5422:8	5422:8	9	snprintf
LEAF_NODE	5422:16	5422:16	8	(
ARGUMENT	5422:17	5422:17	8	buffer
FIELD	5422:17	5422:17	9	buffer
LEAF_NODE	5422:17	5422:17	10	buffer
LEAF_NODE	5422:23	5422:23	8	,
ARGUMENT	5422:25	5422:25	8	sizeof ( buffer )
FUNCTION_CALL	5422:25	5422:38	9	sizeof ( buffer )
CALLEE	5422:25	5422:25	10	sizeof
LEAF_NODE	5422:25	5422:25	11	sizeof
LEAF_NODE	5422:31	5422:31	10	(
ARGUMENT	5422:32	5422:32	10	buffer
FIELD	5422:32	5422:32	11	buffer
LEAF_NODE	5422:32	5422:32	12	buffer
LEAF_NODE	5422:38	5422:38	10	)
LEAF_NODE	5422:39	5422:39	8	,
ARGUMENT	5422:41	5422:41	8	"%lu"
FIELD	5422:41	5422:41	9	"%lu"
LEAF_NODE	5422:41	5422:41	10	"%lu"
LEAF_NODE	5422:46	5422:46	8	,
ARGUMENT	5422:48	5422:63	8	( unsigned long ) t2p -> pdf_info
LEAF_NODE	5422:48	5422:48	9	(
TYPE_NAME	5422:49	5422:58	9	unsigned long
LEAF_NODE	5422:49	5422:49	10	unsigned
LEAF_NODE	5422:58	5422:58	10	long
LEAF_NODE	5422:62	5422:62	9	)
FIELD	5422:63	5422:68	9	t2p -> pdf_info
LEAF_NODE	5422:63	5422:63	10	t2p
LEAF_NODE	5422:66	5422:66	10	->
LEAF_NODE	5422:68	5422:68	10	pdf_info
LEAF_NODE	5422:76	5422:76	8	)
LEAF_NODE	5422:77	5422:77	4	;
EXPR_STATEMENT	5423:1	5423:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5423:1	5423:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5423:1	5423:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5423:1	5423:1	6	check_snprintf_ret
LEAF_NODE	5423:1	5423:1	7	check_snprintf_ret
LEAF_NODE	5423:19	5423:19	6	(
ARGUMENT	5423:20	5423:20	6	t2p
FIELD	5423:20	5423:20	7	t2p
LEAF_NODE	5423:20	5423:20	8	t2p
LEAF_NODE	5423:23	5423:23	6	,
ARGUMENT	5423:25	5423:25	6	buflen
FIELD	5423:25	5423:25	7	buflen
LEAF_NODE	5423:25	5423:25	8	buflen
LEAF_NODE	5423:31	5423:31	6	,
ARGUMENT	5423:33	5423:33	6	buffer
FIELD	5423:33	5423:33	7	buffer
LEAF_NODE	5423:33	5423:33	8	buffer
LEAF_NODE	5423:39	5423:39	6	)
LEAF_NODE	5423:40	5423:40	4	;
EXPR_STATEMENT	5424:1	5424:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5424:1	5424:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5424:1	5424:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5424:1	5424:1	6	written
FIELD	5424:1	5424:1	7	written
LEAF_NODE	5424:1	5424:1	8	written
ASSIGN_OP	5424:9	5424:9	6	+=
LEAF_NODE	5424:9	5424:9	7	+=
RVAL	5424:12	5424:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5424:12	5424:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5424:12	5424:12	8	t2pWriteFile
LEAF_NODE	5424:12	5424:12	9	t2pWriteFile
LEAF_NODE	5424:24	5424:24	8	(
ARGUMENT	5424:25	5424:25	8	output
FIELD	5424:25	5424:25	9	output
LEAF_NODE	5424:25	5424:25	10	output
LEAF_NODE	5424:31	5424:31	8	,
ARGUMENT	5424:33	5424:43	8	( tdata_t ) buffer
LEAF_NODE	5424:33	5424:33	9	(
TYPE_NAME	5424:34	5424:34	9	tdata_t
LEAF_NODE	5424:34	5424:34	10	tdata_t
LEAF_NODE	5424:41	5424:41	9	)
FIELD	5424:43	5424:43	9	buffer
LEAF_NODE	5424:43	5424:43	10	buffer
LEAF_NODE	5424:49	5424:49	8	,
ARGUMENT	5424:51	5424:51	8	buflen
FIELD	5424:51	5424:51	9	buflen
LEAF_NODE	5424:51	5424:51	10	buflen
LEAF_NODE	5424:57	5424:57	8	)
LEAF_NODE	5424:58	5424:58	4	;
EXPR_STATEMENT	5425:1	5425:62	3	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n/ID[<" , 11 ) ;
EXPR	5425:1	5425:1	4	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n/ID[<" , 11 )
ASSIGN	5425:1	5425:12	5	written += t2pWriteFile ( output , ( tdata_t ) " 0 R \n/ID[<" , 11 )
LVAL	5425:1	5425:1	6	written
FIELD	5425:1	5425:1	7	written
LEAF_NODE	5425:1	5425:1	8	written
ASSIGN_OP	5425:9	5425:9	6	+=
LEAF_NODE	5425:9	5425:9	7	+=
RVAL	5425:12	5425:12	6	t2pWriteFile ( output , ( tdata_t ) " 0 R \n/ID[<" , 11 )
FUNCTION_CALL	5425:12	5425:61	7	t2pWriteFile ( output , ( tdata_t ) " 0 R \n/ID[<" , 11 )
CALLEE	5425:12	5425:12	8	t2pWriteFile
LEAF_NODE	5425:12	5425:12	9	t2pWriteFile
LEAF_NODE	5425:24	5425:24	8	(
ARGUMENT	5425:25	5425:25	8	output
FIELD	5425:25	5425:25	9	output
LEAF_NODE	5425:25	5425:25	10	output
LEAF_NODE	5425:31	5425:31	8	,
ARGUMENT	5425:33	5425:43	8	( tdata_t ) " 0 R \n/ID[<"
LEAF_NODE	5425:33	5425:33	9	(
TYPE_NAME	5425:34	5425:34	9	tdata_t
LEAF_NODE	5425:34	5425:34	10	tdata_t
LEAF_NODE	5425:41	5425:41	9	)
FIELD	5425:43	5425:43	9	" 0 R \n/ID[<"
LEAF_NODE	5425:43	5425:43	10	" 0 R \n/ID[<"
LEAF_NODE	5425:57	5425:57	8	,
ARGUMENT	5425:59	5425:59	8	11
FIELD	5425:59	5425:59	9	11
LEAF_NODE	5425:59	5425:59	10	11
LEAF_NODE	5425:61	5425:61	8	)
LEAF_NODE	5425:62	5425:62	4	;
EXPR_STATEMENT	5426:1	5427:32	3	written += t2pWriteFile ( output , ( tdata_t ) t2p -> pdf_fileid , sizeof ( t2p -> pdf_fileid ) - 1 ) ;
EXPR	5426:1	5426:1	4	written += t2pWriteFile ( output , ( tdata_t ) t2p -> pdf_fileid , sizeof ( t2p -> pdf_fileid ) - 1 )
ASSIGN	5426:1	5426:12	5	written += t2pWriteFile ( output , ( tdata_t ) t2p -> pdf_fileid , sizeof ( t2p -> pdf_fileid ) - 1 )
LVAL	5426:1	5426:1	6	written
FIELD	5426:1	5426:1	7	written
LEAF_NODE	5426:1	5426:1	8	written
ASSIGN_OP	5426:9	5426:9	6	+=
LEAF_NODE	5426:9	5426:9	7	+=
RVAL	5426:12	5426:12	6	t2pWriteFile ( output , ( tdata_t ) t2p -> pdf_fileid , sizeof ( t2p -> pdf_fileid ) - 1 )
FUNCTION_CALL	5426:12	5427:31	7	t2pWriteFile ( output , ( tdata_t ) t2p -> pdf_fileid , sizeof ( t2p -> pdf_fileid ) - 1 )
CALLEE	5426:12	5426:12	8	t2pWriteFile
LEAF_NODE	5426:12	5426:12	9	t2pWriteFile
LEAF_NODE	5426:24	5426:24	8	(
ARGUMENT	5426:25	5426:25	8	output
FIELD	5426:25	5426:25	9	output
LEAF_NODE	5426:25	5426:25	10	output
LEAF_NODE	5426:31	5426:31	8	,
ARGUMENT	5426:33	5426:43	8	( tdata_t ) t2p -> pdf_fileid
LEAF_NODE	5426:33	5426:33	9	(
TYPE_NAME	5426:34	5426:34	9	tdata_t
LEAF_NODE	5426:34	5426:34	10	tdata_t
LEAF_NODE	5426:41	5426:41	9	)
FIELD	5426:43	5426:48	9	t2p -> pdf_fileid
LEAF_NODE	5426:43	5426:43	10	t2p
LEAF_NODE	5426:46	5426:46	10	->
LEAF_NODE	5426:48	5426:48	10	pdf_fileid
LEAF_NODE	5426:58	5426:58	8	,
ARGUMENT	5427:4	5427:30	8	sizeof ( t2p -> pdf_fileid ) - 1
FUNCTION_CALL	5427:4	5427:26	9	sizeof ( t2p -> pdf_fileid )
CALLEE	5427:4	5427:4	10	sizeof
LEAF_NODE	5427:4	5427:4	11	sizeof
LEAF_NODE	5427:10	5427:10	10	(
ARGUMENT	5427:11	5427:11	10	t2p -> pdf_fileid
FIELD	5427:11	5427:16	11	t2p -> pdf_fileid
LEAF_NODE	5427:11	5427:11	12	t2p
LEAF_NODE	5427:14	5427:14	12	->
LEAF_NODE	5427:16	5427:16	12	pdf_fileid
LEAF_NODE	5427:26	5427:26	10	)
LEAF_NODE	5427:28	5427:28	9	-
FIELD	5427:30	5427:30	9	1
LEAF_NODE	5427:30	5427:30	10	1
LEAF_NODE	5427:31	5427:31	8	)
LEAF_NODE	5427:32	5427:32	4	;
EXPR_STATEMENT	5428:1	5428:51	3	written += t2pWriteFile ( output , ( tdata_t ) "><" , 2 ) ;
EXPR	5428:1	5428:1	4	written += t2pWriteFile ( output , ( tdata_t ) "><" , 2 )
ASSIGN	5428:1	5428:12	5	written += t2pWriteFile ( output , ( tdata_t ) "><" , 2 )
LVAL	5428:1	5428:1	6	written
FIELD	5428:1	5428:1	7	written
LEAF_NODE	5428:1	5428:1	8	written
ASSIGN_OP	5428:9	5428:9	6	+=
LEAF_NODE	5428:9	5428:9	7	+=
RVAL	5428:12	5428:12	6	t2pWriteFile ( output , ( tdata_t ) "><" , 2 )
FUNCTION_CALL	5428:12	5428:50	7	t2pWriteFile ( output , ( tdata_t ) "><" , 2 )
CALLEE	5428:12	5428:12	8	t2pWriteFile
LEAF_NODE	5428:12	5428:12	9	t2pWriteFile
LEAF_NODE	5428:24	5428:24	8	(
ARGUMENT	5428:25	5428:25	8	output
FIELD	5428:25	5428:25	9	output
LEAF_NODE	5428:25	5428:25	10	output
LEAF_NODE	5428:31	5428:31	8	,
ARGUMENT	5428:33	5428:43	8	( tdata_t ) "><"
LEAF_NODE	5428:33	5428:33	9	(
TYPE_NAME	5428:34	5428:34	9	tdata_t
LEAF_NODE	5428:34	5428:34	10	tdata_t
LEAF_NODE	5428:41	5428:41	9	)
FIELD	5428:43	5428:43	9	"><"
LEAF_NODE	5428:43	5428:43	10	"><"
LEAF_NODE	5428:47	5428:47	8	,
ARGUMENT	5428:49	5428:49	8	2
FIELD	5428:49	5428:49	9	2
LEAF_NODE	5428:49	5428:49	10	2
LEAF_NODE	5428:50	5428:50	8	)
LEAF_NODE	5428:51	5428:51	4	;
EXPR_STATEMENT	5429:1	5430:32	3	written += t2pWriteFile ( output , ( tdata_t ) t2p -> pdf_fileid , sizeof ( t2p -> pdf_fileid ) - 1 ) ;
EXPR	5429:1	5429:1	4	written += t2pWriteFile ( output , ( tdata_t ) t2p -> pdf_fileid , sizeof ( t2p -> pdf_fileid ) - 1 )
ASSIGN	5429:1	5429:12	5	written += t2pWriteFile ( output , ( tdata_t ) t2p -> pdf_fileid , sizeof ( t2p -> pdf_fileid ) - 1 )
LVAL	5429:1	5429:1	6	written
FIELD	5429:1	5429:1	7	written
LEAF_NODE	5429:1	5429:1	8	written
ASSIGN_OP	5429:9	5429:9	6	+=
LEAF_NODE	5429:9	5429:9	7	+=
RVAL	5429:12	5429:12	6	t2pWriteFile ( output , ( tdata_t ) t2p -> pdf_fileid , sizeof ( t2p -> pdf_fileid ) - 1 )
FUNCTION_CALL	5429:12	5430:31	7	t2pWriteFile ( output , ( tdata_t ) t2p -> pdf_fileid , sizeof ( t2p -> pdf_fileid ) - 1 )
CALLEE	5429:12	5429:12	8	t2pWriteFile
LEAF_NODE	5429:12	5429:12	9	t2pWriteFile
LEAF_NODE	5429:24	5429:24	8	(
ARGUMENT	5429:25	5429:25	8	output
FIELD	5429:25	5429:25	9	output
LEAF_NODE	5429:25	5429:25	10	output
LEAF_NODE	5429:31	5429:31	8	,
ARGUMENT	5429:33	5429:43	8	( tdata_t ) t2p -> pdf_fileid
LEAF_NODE	5429:33	5429:33	9	(
TYPE_NAME	5429:34	5429:34	9	tdata_t
LEAF_NODE	5429:34	5429:34	10	tdata_t
LEAF_NODE	5429:41	5429:41	9	)
FIELD	5429:43	5429:48	9	t2p -> pdf_fileid
LEAF_NODE	5429:43	5429:43	10	t2p
LEAF_NODE	5429:46	5429:46	10	->
LEAF_NODE	5429:48	5429:48	10	pdf_fileid
LEAF_NODE	5429:58	5429:58	8	,
ARGUMENT	5430:4	5430:30	8	sizeof ( t2p -> pdf_fileid ) - 1
FUNCTION_CALL	5430:4	5430:26	9	sizeof ( t2p -> pdf_fileid )
CALLEE	5430:4	5430:4	10	sizeof
LEAF_NODE	5430:4	5430:4	11	sizeof
LEAF_NODE	5430:10	5430:10	10	(
ARGUMENT	5430:11	5430:11	10	t2p -> pdf_fileid
FIELD	5430:11	5430:16	11	t2p -> pdf_fileid
LEAF_NODE	5430:11	5430:11	12	t2p
LEAF_NODE	5430:14	5430:14	12	->
LEAF_NODE	5430:16	5430:16	12	pdf_fileid
LEAF_NODE	5430:26	5430:26	10	)
LEAF_NODE	5430:28	5430:28	9	-
FIELD	5430:30	5430:30	9	1
LEAF_NODE	5430:30	5430:30	10	1
LEAF_NODE	5430:31	5430:31	8	)
LEAF_NODE	5430:32	5430:32	4	;
EXPR_STATEMENT	5431:1	5431:69	3	written += t2pWriteFile ( output , ( tdata_t ) ">]\n>>\nstartxref\n" , 16 ) ;
EXPR	5431:1	5431:1	4	written += t2pWriteFile ( output , ( tdata_t ) ">]\n>>\nstartxref\n" , 16 )
ASSIGN	5431:1	5431:12	5	written += t2pWriteFile ( output , ( tdata_t ) ">]\n>>\nstartxref\n" , 16 )
LVAL	5431:1	5431:1	6	written
FIELD	5431:1	5431:1	7	written
LEAF_NODE	5431:1	5431:1	8	written
ASSIGN_OP	5431:9	5431:9	6	+=
LEAF_NODE	5431:9	5431:9	7	+=
RVAL	5431:12	5431:12	6	t2pWriteFile ( output , ( tdata_t ) ">]\n>>\nstartxref\n" , 16 )
FUNCTION_CALL	5431:12	5431:68	7	t2pWriteFile ( output , ( tdata_t ) ">]\n>>\nstartxref\n" , 16 )
CALLEE	5431:12	5431:12	8	t2pWriteFile
LEAF_NODE	5431:12	5431:12	9	t2pWriteFile
LEAF_NODE	5431:24	5431:24	8	(
ARGUMENT	5431:25	5431:25	8	output
FIELD	5431:25	5431:25	9	output
LEAF_NODE	5431:25	5431:25	10	output
LEAF_NODE	5431:31	5431:31	8	,
ARGUMENT	5431:33	5431:43	8	( tdata_t ) ">]\n>>\nstartxref\n"
LEAF_NODE	5431:33	5431:33	9	(
TYPE_NAME	5431:34	5431:34	9	tdata_t
LEAF_NODE	5431:34	5431:34	10	tdata_t
LEAF_NODE	5431:41	5431:41	9	)
FIELD	5431:43	5431:43	9	">]\n>>\nstartxref\n"
LEAF_NODE	5431:43	5431:43	10	">]\n>>\nstartxref\n"
LEAF_NODE	5431:64	5431:64	8	,
ARGUMENT	5431:66	5431:66	8	16
FIELD	5431:66	5431:66	9	16
LEAF_NODE	5431:66	5431:66	10	16
LEAF_NODE	5431:68	5431:68	8	)
LEAF_NODE	5431:69	5431:69	4	;
EXPR_STATEMENT	5432:1	5432:82	3	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_startxref ) ;
EXPR	5432:1	5432:1	4	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_startxref )
ASSIGN	5432:1	5432:8	5	buflen = snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_startxref )
LVAL	5432:1	5432:1	6	buflen
FIELD	5432:1	5432:1	7	buflen
LEAF_NODE	5432:1	5432:1	8	buflen
ASSIGN_OP	5432:7	5432:7	6	=
LEAF_NODE	5432:7	5432:7	7	=
RVAL	5432:8	5432:8	6	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_startxref )
FUNCTION_CALL	5432:8	5432:81	7	snprintf ( buffer , sizeof ( buffer ) , "%lu" , ( unsigned long ) t2p -> pdf_startxref )
CALLEE	5432:8	5432:8	8	snprintf
LEAF_NODE	5432:8	5432:8	9	snprintf
LEAF_NODE	5432:16	5432:16	8	(
ARGUMENT	5432:17	5432:17	8	buffer
FIELD	5432:17	5432:17	9	buffer
LEAF_NODE	5432:17	5432:17	10	buffer
LEAF_NODE	5432:23	5432:23	8	,
ARGUMENT	5432:25	5432:25	8	sizeof ( buffer )
FUNCTION_CALL	5432:25	5432:38	9	sizeof ( buffer )
CALLEE	5432:25	5432:25	10	sizeof
LEAF_NODE	5432:25	5432:25	11	sizeof
LEAF_NODE	5432:31	5432:31	10	(
ARGUMENT	5432:32	5432:32	10	buffer
FIELD	5432:32	5432:32	11	buffer
LEAF_NODE	5432:32	5432:32	12	buffer
LEAF_NODE	5432:38	5432:38	10	)
LEAF_NODE	5432:39	5432:39	8	,
ARGUMENT	5432:41	5432:41	8	"%lu"
FIELD	5432:41	5432:41	9	"%lu"
LEAF_NODE	5432:41	5432:41	10	"%lu"
LEAF_NODE	5432:46	5432:46	8	,
ARGUMENT	5432:48	5432:63	8	( unsigned long ) t2p -> pdf_startxref
LEAF_NODE	5432:48	5432:48	9	(
TYPE_NAME	5432:49	5432:58	9	unsigned long
LEAF_NODE	5432:49	5432:49	10	unsigned
LEAF_NODE	5432:58	5432:58	10	long
LEAF_NODE	5432:62	5432:62	9	)
FIELD	5432:63	5432:68	9	t2p -> pdf_startxref
LEAF_NODE	5432:63	5432:63	10	t2p
LEAF_NODE	5432:66	5432:66	10	->
LEAF_NODE	5432:68	5432:68	10	pdf_startxref
LEAF_NODE	5432:81	5432:81	8	)
LEAF_NODE	5432:82	5432:82	4	;
EXPR_STATEMENT	5433:1	5433:40	3	check_snprintf_ret ( t2p , buflen , buffer ) ;
EXPR	5433:1	5433:1	4	check_snprintf_ret ( t2p , buflen , buffer )
FUNCTION_CALL	5433:1	5433:39	5	check_snprintf_ret ( t2p , buflen , buffer )
CALLEE	5433:1	5433:1	6	check_snprintf_ret
LEAF_NODE	5433:1	5433:1	7	check_snprintf_ret
LEAF_NODE	5433:19	5433:19	6	(
ARGUMENT	5433:20	5433:20	6	t2p
FIELD	5433:20	5433:20	7	t2p
LEAF_NODE	5433:20	5433:20	8	t2p
LEAF_NODE	5433:23	5433:23	6	,
ARGUMENT	5433:25	5433:25	6	buflen
FIELD	5433:25	5433:25	7	buflen
LEAF_NODE	5433:25	5433:25	8	buflen
LEAF_NODE	5433:31	5433:31	6	,
ARGUMENT	5433:33	5433:33	6	buffer
FIELD	5433:33	5433:33	7	buffer
LEAF_NODE	5433:33	5433:33	8	buffer
LEAF_NODE	5433:39	5433:39	6	)
LEAF_NODE	5433:40	5433:40	4	;
EXPR_STATEMENT	5434:1	5434:58	3	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen ) ;
EXPR	5434:1	5434:1	4	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
ASSIGN	5434:1	5434:12	5	written += t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
LVAL	5434:1	5434:1	6	written
FIELD	5434:1	5434:1	7	written
LEAF_NODE	5434:1	5434:1	8	written
ASSIGN_OP	5434:9	5434:9	6	+=
LEAF_NODE	5434:9	5434:9	7	+=
RVAL	5434:12	5434:12	6	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
FUNCTION_CALL	5434:12	5434:57	7	t2pWriteFile ( output , ( tdata_t ) buffer , buflen )
CALLEE	5434:12	5434:12	8	t2pWriteFile
LEAF_NODE	5434:12	5434:12	9	t2pWriteFile
LEAF_NODE	5434:24	5434:24	8	(
ARGUMENT	5434:25	5434:25	8	output
FIELD	5434:25	5434:25	9	output
LEAF_NODE	5434:25	5434:25	10	output
LEAF_NODE	5434:31	5434:31	8	,
ARGUMENT	5434:33	5434:43	8	( tdata_t ) buffer
LEAF_NODE	5434:33	5434:33	9	(
TYPE_NAME	5434:34	5434:34	9	tdata_t
LEAF_NODE	5434:34	5434:34	10	tdata_t
LEAF_NODE	5434:41	5434:41	9	)
FIELD	5434:43	5434:43	9	buffer
LEAF_NODE	5434:43	5434:43	10	buffer
LEAF_NODE	5434:49	5434:49	8	,
ARGUMENT	5434:51	5434:51	8	buflen
FIELD	5434:51	5434:51	9	buflen
LEAF_NODE	5434:51	5434:51	10	buflen
LEAF_NODE	5434:57	5434:57	8	)
LEAF_NODE	5434:58	5434:58	4	;
EXPR_STATEMENT	5435:1	5435:58	3	written += t2pWriteFile ( output , ( tdata_t ) "\n%%EOF\n" , 7 ) ;
EXPR	5435:1	5435:1	4	written += t2pWriteFile ( output , ( tdata_t ) "\n%%EOF\n" , 7 )
ASSIGN	5435:1	5435:12	5	written += t2pWriteFile ( output , ( tdata_t ) "\n%%EOF\n" , 7 )
LVAL	5435:1	5435:1	6	written
FIELD	5435:1	5435:1	7	written
LEAF_NODE	5435:1	5435:1	8	written
ASSIGN_OP	5435:9	5435:9	6	+=
LEAF_NODE	5435:9	5435:9	7	+=
RVAL	5435:12	5435:12	6	t2pWriteFile ( output , ( tdata_t ) "\n%%EOF\n" , 7 )
FUNCTION_CALL	5435:12	5435:57	7	t2pWriteFile ( output , ( tdata_t ) "\n%%EOF\n" , 7 )
CALLEE	5435:12	5435:12	8	t2pWriteFile
LEAF_NODE	5435:12	5435:12	9	t2pWriteFile
LEAF_NODE	5435:24	5435:24	8	(
ARGUMENT	5435:25	5435:25	8	output
FIELD	5435:25	5435:25	9	output
LEAF_NODE	5435:25	5435:25	10	output
LEAF_NODE	5435:31	5435:31	8	,
ARGUMENT	5435:33	5435:43	8	( tdata_t ) "\n%%EOF\n"
LEAF_NODE	5435:33	5435:33	9	(
TYPE_NAME	5435:34	5435:34	9	tdata_t
LEAF_NODE	5435:34	5435:34	10	tdata_t
LEAF_NODE	5435:41	5435:41	9	)
FIELD	5435:43	5435:43	9	"\n%%EOF\n"
LEAF_NODE	5435:43	5435:43	10	"\n%%EOF\n"
LEAF_NODE	5435:54	5435:54	8	,
ARGUMENT	5435:56	5435:56	8	7
FIELD	5435:56	5435:56	9	7
LEAF_NODE	5435:56	5435:56	10	7
LEAF_NODE	5435:57	5435:57	8	)
LEAF_NODE	5435:58	5435:58	4	;
LEAF_NODE	5437:1	5437:1	3	return
LEAF_NODE	5437:7	5437:7	3	(
LEAF_NODE	5437:8	5437:8	3	written
LEAF_NODE	5437:15	5437:15	3	)
LEAF_NODE	5437:16	5437:16	3	;
LEAF_NODE	5438:0	5438:0	2	}
FUNCTION_DEF	5480:0	5641:0	1	
RETURN_TYPE	5480:0	5480:0	2	tsize_t
TYPE_NAME	5480:0	5480:0	3	tsize_t
LEAF_NODE	5480:0	5480:0	4	tsize_t
FUNCTION_NAME	5480:8	5480:8	2	t2p_write_pdf
LEAF_NODE	5480:8	5480:8	3	t2p_write_pdf
PARAMETER_LIST	5480:21	5480:57	2	( T2P * t2p , TIFF * input , TIFF * output )
LEAF_NODE	5480:21	5480:21	3	(
PARAMETER_DECL	5480:22	5480:27	3	T2P * t2p
TYPE	5480:22	5480:25	4	T2P *
TYPE_NAME	5480:22	5480:22	5	T2P
LEAF_NODE	5480:22	5480:22	6	T2P
POINTER	5480:25	5480:25	5	*
LEAF_NODE	5480:25	5480:25	6	*
NAME	5480:27	5480:27	4	t2p
LEAF_NODE	5480:27	5480:27	5	t2p
LEAF_NODE	5480:30	5480:30	3	,
PARAMETER_DECL	5480:32	5480:38	3	TIFF * input
TYPE	5480:32	5480:36	4	TIFF *
TYPE_NAME	5480:32	5480:32	5	TIFF
LEAF_NODE	5480:32	5480:32	6	TIFF
POINTER	5480:36	5480:36	5	*
LEAF_NODE	5480:36	5480:36	6	*
NAME	5480:38	5480:38	4	input
LEAF_NODE	5480:38	5480:38	5	input
LEAF_NODE	5480:43	5480:43	3	,
PARAMETER_DECL	5480:45	5480:51	3	TIFF * output
TYPE	5480:45	5480:49	4	TIFF *
TYPE_NAME	5480:45	5480:45	5	TIFF
LEAF_NODE	5480:45	5480:45	6	TIFF
POINTER	5480:49	5480:49	5	*
LEAF_NODE	5480:49	5480:49	6	*
NAME	5480:51	5480:51	4	output
LEAF_NODE	5480:51	5480:51	5	output
LEAF_NODE	5480:57	5480:57	3	)
LEAF_NODE	5480:58	5480:58	2	{
STATEMENTS	5482:1	5640:16	2	
SIMPLE_DECL	5482:1	5482:18	3	tsize_t written ; written = 0 ;
VAR_DECL	5482:1	5482:9	4	tsize_t written ; written = 0
TYPE	5482:1	5482:1	5	tsize_t
TYPE_NAME	5482:1	5482:1	6	tsize_t
LEAF_NODE	5482:1	5482:1	7	tsize_t
NAME	5482:9	5482:9	5	written
LEAF_NODE	5482:9	5482:9	6	written
LEAF_NODE	0:0	0:0	5	;
INIT	5482:9	5482:9	5	written = 0
ASSIGN	5482:9	5482:17	6	written = 0
LVAL	5482:9	5482:9	7	written
NAME	5482:9	5482:9	8	written
LEAF_NODE	5482:9	5482:9	9	written
ASSIGN_OP	5482:16	5482:16	7	=
LEAF_NODE	5482:16	5482:16	8	=
RVAL	5482:17	5482:17	7	0
FIELD	5482:17	5482:17	8	0
LEAF_NODE	5482:17	5482:17	9	0
LEAF_NODE	5482:18	5482:18	4	;
SIMPLE_DECL	5483:1	5483:13	3	ttile_t i2 ; i2 = 0 ;
VAR_DECL	5483:1	5483:9	4	ttile_t i2 ; i2 = 0
TYPE	5483:1	5483:1	5	ttile_t
TYPE_NAME	5483:1	5483:1	6	ttile_t
LEAF_NODE	5483:1	5483:1	7	ttile_t
NAME	5483:9	5483:9	5	i2
LEAF_NODE	5483:9	5483:9	6	i2
LEAF_NODE	0:0	0:0	5	;
INIT	5483:9	5483:9	5	i2 = 0
ASSIGN	5483:9	5483:12	6	i2 = 0
LVAL	5483:9	5483:9	7	i2
NAME	5483:9	5483:9	8	i2
LEAF_NODE	5483:9	5483:9	9	i2
ASSIGN_OP	5483:11	5483:11	7	=
LEAF_NODE	5483:11	5483:11	8	=
RVAL	5483:12	5483:12	7	0
FIELD	5483:12	5483:12	8	0
LEAF_NODE	5483:12	5483:12	9	0
LEAF_NODE	5483:13	5483:13	4	;
SIMPLE_DECL	5484:1	5484:20	3	tsize_t streamlen ; streamlen = 0 ;
VAR_DECL	5484:1	5484:9	4	tsize_t streamlen ; streamlen = 0
TYPE	5484:1	5484:1	5	tsize_t
TYPE_NAME	5484:1	5484:1	6	tsize_t
LEAF_NODE	5484:1	5484:1	7	tsize_t
NAME	5484:9	5484:9	5	streamlen
LEAF_NODE	5484:9	5484:9	6	streamlen
LEAF_NODE	0:0	0:0	5	;
INIT	5484:9	5484:9	5	streamlen = 0
ASSIGN	5484:9	5484:19	6	streamlen = 0
LVAL	5484:9	5484:9	7	streamlen
NAME	5484:9	5484:9	8	streamlen
LEAF_NODE	5484:9	5484:9	9	streamlen
ASSIGN_OP	5484:18	5484:18	7	=
LEAF_NODE	5484:18	5484:18	8	=
RVAL	5484:19	5484:19	7	0
FIELD	5484:19	5484:19	8	0
LEAF_NODE	5484:19	5484:19	9	0
LEAF_NODE	5484:20	5484:20	4	;
SIMPLE_DECL	5485:1	5485:11	3	uint16 i ; i = 0 ;
VAR_DECL	5485:1	5485:8	4	uint16 i ; i = 0
TYPE	5485:1	5485:1	5	uint16
TYPE_NAME	5485:1	5485:1	6	uint16
LEAF_NODE	5485:1	5485:1	7	uint16
NAME	5485:8	5485:8	5	i
LEAF_NODE	5485:8	5485:8	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	5485:8	5485:8	5	i = 0
ASSIGN	5485:8	5485:10	6	i = 0
LVAL	5485:8	5485:8	7	i
NAME	5485:8	5485:8	8	i
LEAF_NODE	5485:8	5485:8	9	i
ASSIGN_OP	5485:9	5485:9	7	=
LEAF_NODE	5485:9	5485:9	8	=
RVAL	5485:10	5485:10	7	0
FIELD	5485:10	5485:10	8	0
LEAF_NODE	5485:10	5485:10	9	0
LEAF_NODE	5485:11	5485:11	4	;
EXPR_STATEMENT	5487:1	5487:31	3	t2p_read_tiff_init ( t2p , input ) ;
EXPR	5487:1	5487:1	4	t2p_read_tiff_init ( t2p , input )
FUNCTION_CALL	5487:1	5487:30	5	t2p_read_tiff_init ( t2p , input )
CALLEE	5487:1	5487:1	6	t2p_read_tiff_init
LEAF_NODE	5487:1	5487:1	7	t2p_read_tiff_init
LEAF_NODE	5487:19	5487:19	6	(
ARGUMENT	5487:20	5487:20	6	t2p
FIELD	5487:20	5487:20	7	t2p
LEAF_NODE	5487:20	5487:20	8	t2p
LEAF_NODE	5487:23	5487:23	6	,
ARGUMENT	5487:25	5487:25	6	input
FIELD	5487:25	5487:25	7	input
LEAF_NODE	5487:25	5487:25	8	input
LEAF_NODE	5487:30	5487:30	6	)
LEAF_NODE	5487:31	5487:31	4	;
SELECTION	5488:1	5488:31	3	
KEYWORD	5488:1	5488:1	4	if
LEAF_NODE	5488:1	5488:1	5	if
LEAF_NODE	5488:3	5488:3	4	(
CONDITION	5488:4	5488:4	4	t2p -> t2p_error != T2P_ERR_OK
EXPR	5488:4	5488:20	5	t2p -> t2p_error != T2P_ERR_OK
FIELD	5488:4	5488:9	6	t2p -> t2p_error
LEAF_NODE	5488:4	5488:4	7	t2p
LEAF_NODE	5488:7	5488:7	7	->
LEAF_NODE	5488:9	5488:9	7	t2p_error
EQ_OPERATOR	5488:18	5488:18	6	!=
LEAF_NODE	5488:18	5488:18	7	!=
FIELD	5488:20	5488:20	6	T2P_ERR_OK
LEAF_NODE	5488:20	5488:20	7	T2P_ERR_OK
LEAF_NODE	5488:30	5488:30	4	)
STATEMENTS	5488:31	5488:42	4	
LEAF_NODE	5488:31	5488:31	5	{
STATEMENTS	5488:32	5488:32	5	
JUMP_STATEMENT	5488:32	5488:41	6	return ( 0 ) ;
KEYWORD	5488:32	5488:32	7	return
LEAF_NODE	5488:32	5488:32	8	return
DESTINATION	5488:38	5488:38	7	( 0 )
EXPR	5488:38	5488:40	8	( 0 )
LEAF_NODE	5488:38	5488:38	9	(
FIELD	5488:39	5488:39	9	0
LEAF_NODE	5488:39	5488:39	10	0
LEAF_NODE	5488:40	5488:40	9	)
LEAF_NODE	5488:41	5488:41	7	;
LEAF_NODE	5488:42	5488:42	5	}
EXPR_STATEMENT	5489:1	5489:107	3	t2p -> pdf_xrefoffsets = ( uint32 * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_xrefcount , sizeof ( uint32 ) ) ) ;
EXPR	5489:1	5489:1	4	t2p -> pdf_xrefoffsets = ( uint32 * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_xrefcount , sizeof ( uint32 ) ) )
ASSIGN	5489:1	5489:23	5	t2p -> pdf_xrefoffsets = ( uint32 * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_xrefcount , sizeof ( uint32 ) ) )
LVAL	5489:1	5489:1	6	t2p -> pdf_xrefoffsets
FIELD	5489:1	5489:6	7	t2p -> pdf_xrefoffsets
LEAF_NODE	5489:1	5489:1	8	t2p
LEAF_NODE	5489:4	5489:4	8	->
LEAF_NODE	5489:6	5489:6	8	pdf_xrefoffsets
ASSIGN_OP	5489:21	5489:21	6	=
LEAF_NODE	5489:21	5489:21	7	=
RVAL	5489:23	5489:33	6	( uint32 * ) _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_xrefcount , sizeof ( uint32 ) ) )
LEAF_NODE	5489:23	5489:23	7	(
TYPE_NAME	5489:24	5489:24	7	uint32
LEAF_NODE	5489:24	5489:24	8	uint32
LEAF_NODE	5489:30	5489:30	7	*
LEAF_NODE	5489:31	5489:31	7	)
FUNCTION_CALL	5489:33	5489:106	7	_TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , t2p -> pdf_xrefcount , sizeof ( uint32 ) ) )
CALLEE	5489:33	5489:33	8	_TIFFmalloc
LEAF_NODE	5489:33	5489:33	9	_TIFFmalloc
LEAF_NODE	5489:44	5489:44	8	(
ARGUMENT	5489:45	5489:45	8	TIFFSafeMultiply ( tmsize_t , t2p -> pdf_xrefcount , sizeof ( uint32 ) )
FUNCTION_CALL	5489:45	5489:104	9	TIFFSafeMultiply ( tmsize_t , t2p -> pdf_xrefcount , sizeof ( uint32 ) )
CALLEE	5489:45	5489:45	10	TIFFSafeMultiply
LEAF_NODE	5489:45	5489:45	11	TIFFSafeMultiply
LEAF_NODE	5489:61	5489:61	10	(
ARGUMENT	5489:62	5489:62	10	tmsize_t
FIELD	5489:62	5489:62	11	tmsize_t
LEAF_NODE	5489:62	5489:62	12	tmsize_t
LEAF_NODE	5489:70	5489:70	10	,
ARGUMENT	5489:71	5489:71	10	t2p -> pdf_xrefcount
FIELD	5489:71	5489:76	11	t2p -> pdf_xrefcount
LEAF_NODE	5489:71	5489:71	12	t2p
LEAF_NODE	5489:74	5489:74	12	->
LEAF_NODE	5489:76	5489:76	12	pdf_xrefcount
LEAF_NODE	5489:89	5489:89	10	,
ARGUMENT	5489:90	5489:90	10	sizeof ( uint32 )
FUNCTION_CALL	5489:90	5489:103	11	sizeof ( uint32 )
CALLEE	5489:90	5489:90	12	sizeof
LEAF_NODE	5489:90	5489:90	13	sizeof
LEAF_NODE	5489:96	5489:96	12	(
ARGUMENT	5489:97	5489:97	12	uint32
FIELD	5489:97	5489:97	13	uint32
LEAF_NODE	5489:97	5489:97	14	uint32
LEAF_NODE	5489:103	5489:103	12	)
LEAF_NODE	5489:104	5489:104	10	)
LEAF_NODE	5489:106	5489:106	8	)
LEAF_NODE	5489:107	5489:107	4	;
SELECTION	5490:1	5490:31	3	
KEYWORD	5490:1	5490:1	4	if
LEAF_NODE	5490:1	5490:1	5	if
LEAF_NODE	5490:3	5490:3	4	(
CONDITION	5490:4	5490:4	4	t2p -> pdf_xrefoffsets == NULL
EXPR	5490:4	5490:26	5	t2p -> pdf_xrefoffsets == NULL
FIELD	5490:4	5490:9	6	t2p -> pdf_xrefoffsets
LEAF_NODE	5490:4	5490:4	7	t2p
LEAF_NODE	5490:7	5490:7	7	->
LEAF_NODE	5490:9	5490:9	7	pdf_xrefoffsets
EQ_OPERATOR	5490:24	5490:24	6	==
LEAF_NODE	5490:24	5490:24	7	==
FIELD	5490:26	5490:26	6	NULL
LEAF_NODE	5490:26	5490:26	7	NULL
LEAF_NODE	5490:30	5490:30	4	)
STATEMENTS	5490:31	5497:1	4	
LEAF_NODE	5490:31	5490:31	5	{
STATEMENTS	5491:2	5496:17	5	
EXPR_STATEMENT	5491:2	5494:57	6	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_write_pdf" , ( unsigned int ) ( t2p -> pdf_xrefcount * sizeof ( uint32 ) ) ) ;
EXPR	5491:2	5491:2	7	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_write_pdf" , ( unsigned int ) ( t2p -> pdf_xrefcount * sizeof ( uint32 ) ) )
FUNCTION_CALL	5491:2	5494:56	8	TIFFError ( TIFF2PDF_MODULE , "Can't allocate %u bytes of memory for t2p_write_pdf" , ( unsigned int ) ( t2p -> pdf_xrefcount * sizeof ( uint32 ) ) )
CALLEE	5491:2	5491:2	9	TIFFError
LEAF_NODE	5491:2	5491:2	10	TIFFError
LEAF_NODE	5491:11	5491:11	9	(
ARGUMENT	5492:3	5492:3	9	TIFF2PDF_MODULE
FIELD	5492:3	5492:3	10	TIFF2PDF_MODULE
LEAF_NODE	5492:3	5492:3	11	TIFF2PDF_MODULE
LEAF_NODE	5492:18	5492:18	9	,
ARGUMENT	5493:3	5493:3	9	"Can't allocate %u bytes of memory for t2p_write_pdf"
FIELD	5493:3	5493:3	10	"Can't allocate %u bytes of memory for t2p_write_pdf"
LEAF_NODE	5493:3	5493:3	11	"Can't allocate %u bytes of memory for t2p_write_pdf"
LEAF_NODE	5493:56	5493:56	9	,
ARGUMENT	5494:3	5494:54	9	( unsigned int ) ( t2p -> pdf_xrefcount * sizeof ( uint32 ) )
LEAF_NODE	5494:3	5494:3	10	(
TYPE_NAME	5494:4	5494:13	10	unsigned int
LEAF_NODE	5494:4	5494:4	11	unsigned
LEAF_NODE	5494:13	5494:13	11	int
LEAF_NODE	5494:16	5494:16	10	)
LEAF_NODE	5494:18	5494:18	10	(
FIELD	5494:19	5494:24	10	t2p -> pdf_xrefcount
LEAF_NODE	5494:19	5494:19	11	t2p
LEAF_NODE	5494:22	5494:22	11	->
LEAF_NODE	5494:24	5494:24	11	pdf_xrefcount
LEAF_NODE	5494:38	5494:38	10	*
FUNCTION_CALL	5494:40	5494:53	10	sizeof ( uint32 )
CALLEE	5494:40	5494:40	11	sizeof
LEAF_NODE	5494:40	5494:40	12	sizeof
LEAF_NODE	5494:46	5494:46	11	(
ARGUMENT	5494:47	5494:47	11	uint32
FIELD	5494:47	5494:47	12	uint32
LEAF_NODE	5494:47	5494:47	13	uint32
LEAF_NODE	5494:53	5494:53	11	)
LEAF_NODE	5494:54	5494:54	10	)
LEAF_NODE	5494:56	5494:56	9	)
LEAF_NODE	5494:57	5494:57	7	;
EXPR_STATEMENT	5495:2	5495:32	6	t2p -> t2p_error = T2P_ERR_ERROR ;
EXPR	5495:2	5495:2	7	t2p -> t2p_error = T2P_ERR_ERROR
ASSIGN	5495:2	5495:19	8	t2p -> t2p_error = T2P_ERR_ERROR
LVAL	5495:2	5495:2	9	t2p -> t2p_error
FIELD	5495:2	5495:7	10	t2p -> t2p_error
LEAF_NODE	5495:2	5495:2	11	t2p
LEAF_NODE	5495:5	5495:5	11	->
LEAF_NODE	5495:7	5495:7	11	t2p_error
ASSIGN_OP	5495:17	5495:17	9	=
LEAF_NODE	5495:17	5495:17	10	=
RVAL	5495:19	5495:19	9	T2P_ERR_ERROR
FIELD	5495:19	5495:19	10	T2P_ERR_ERROR
LEAF_NODE	5495:19	5495:19	11	T2P_ERR_ERROR
LEAF_NODE	5495:32	5495:32	7	;
LEAF_NODE	5496:2	5496:2	6	return
LEAF_NODE	5496:8	5496:8	6	(
LEAF_NODE	5496:9	5496:9	6	written
LEAF_NODE	5496:16	5496:16	6	)
LEAF_NODE	5496:17	5496:17	6	;
LEAF_NODE	5497:1	5497:1	5	}
EXPR_STATEMENT	5498:1	5498:21	3	t2p -> pdf_xrefcount = 0 ;
EXPR	5498:1	5498:1	4	t2p -> pdf_xrefcount = 0
ASSIGN	5498:1	5498:20	5	t2p -> pdf_xrefcount = 0
LVAL	5498:1	5498:1	6	t2p -> pdf_xrefcount
FIELD	5498:1	5498:6	7	t2p -> pdf_xrefcount
LEAF_NODE	5498:1	5498:1	8	t2p
LEAF_NODE	5498:4	5498:4	8	->
LEAF_NODE	5498:6	5498:6	8	pdf_xrefcount
ASSIGN_OP	5498:19	5498:19	6	=
LEAF_NODE	5498:19	5498:19	7	=
RVAL	5498:20	5498:20	6	0
FIELD	5498:20	5498:20	7	0
LEAF_NODE	5498:20	5498:20	8	0
LEAF_NODE	5498:21	5498:21	4	;
EXPR_STATEMENT	5499:1	5499:19	3	t2p -> pdf_catalog = 1 ;
EXPR	5499:1	5499:1	4	t2p -> pdf_catalog = 1
ASSIGN	5499:1	5499:18	5	t2p -> pdf_catalog = 1
LVAL	5499:1	5499:1	6	t2p -> pdf_catalog
FIELD	5499:1	5499:6	7	t2p -> pdf_catalog
LEAF_NODE	5499:1	5499:1	8	t2p
LEAF_NODE	5499:4	5499:4	8	->
LEAF_NODE	5499:6	5499:6	8	pdf_catalog
ASSIGN_OP	5499:17	5499:17	6	=
LEAF_NODE	5499:17	5499:17	7	=
RVAL	5499:18	5499:18	6	1
FIELD	5499:18	5499:18	7	1
LEAF_NODE	5499:18	5499:18	8	1
LEAF_NODE	5499:19	5499:19	4	;
EXPR_STATEMENT	5500:1	5500:16	3	t2p -> pdf_info = 2 ;
EXPR	5500:1	5500:1	4	t2p -> pdf_info = 2
ASSIGN	5500:1	5500:15	5	t2p -> pdf_info = 2
LVAL	5500:1	5500:1	6	t2p -> pdf_info
FIELD	5500:1	5500:6	7	t2p -> pdf_info
LEAF_NODE	5500:1	5500:1	8	t2p
LEAF_NODE	5500:4	5500:4	8	->
LEAF_NODE	5500:6	5500:6	8	pdf_info
ASSIGN_OP	5500:14	5500:14	6	=
LEAF_NODE	5500:14	5500:14	7	=
RVAL	5500:15	5500:15	6	2
FIELD	5500:15	5500:15	7	2
LEAF_NODE	5500:15	5500:15	8	2
LEAF_NODE	5500:16	5500:16	4	;
EXPR_STATEMENT	5501:1	5501:17	3	t2p -> pdf_pages = 3 ;
EXPR	5501:1	5501:1	4	t2p -> pdf_pages = 3
ASSIGN	5501:1	5501:16	5	t2p -> pdf_pages = 3
LVAL	5501:1	5501:1	6	t2p -> pdf_pages
FIELD	5501:1	5501:6	7	t2p -> pdf_pages
LEAF_NODE	5501:1	5501:1	8	t2p
LEAF_NODE	5501:4	5501:4	8	->
LEAF_NODE	5501:6	5501:6	8	pdf_pages
ASSIGN_OP	5501:15	5501:15	6	=
LEAF_NODE	5501:15	5501:15	7	=
RVAL	5501:16	5501:16	6	3
FIELD	5501:16	5501:16	7	3
LEAF_NODE	5501:16	5501:16	8	3
LEAF_NODE	5501:17	5501:17	4	;
EXPR_STATEMENT	5502:1	5502:45	3	written += t2p_write_pdf_header ( t2p , output ) ;
EXPR	5502:1	5502:1	4	written += t2p_write_pdf_header ( t2p , output )
ASSIGN	5502:1	5502:12	5	written += t2p_write_pdf_header ( t2p , output )
LVAL	5502:1	5502:1	6	written
FIELD	5502:1	5502:1	7	written
LEAF_NODE	5502:1	5502:1	8	written
ASSIGN_OP	5502:9	5502:9	6	+=
LEAF_NODE	5502:9	5502:9	7	+=
RVAL	5502:12	5502:12	6	t2p_write_pdf_header ( t2p , output )
FUNCTION_CALL	5502:12	5502:44	7	t2p_write_pdf_header ( t2p , output )
CALLEE	5502:12	5502:12	8	t2p_write_pdf_header
LEAF_NODE	5502:12	5502:12	9	t2p_write_pdf_header
LEAF_NODE	5502:32	5502:32	8	(
ARGUMENT	5502:33	5502:33	8	t2p
FIELD	5502:33	5502:33	9	t2p
LEAF_NODE	5502:33	5502:33	10	t2p
LEAF_NODE	5502:36	5502:36	8	,
ARGUMENT	5502:38	5502:38	8	output
FIELD	5502:38	5502:38	9	output
LEAF_NODE	5502:38	5502:38	10	output
LEAF_NODE	5502:44	5502:44	8	)
LEAF_NODE	5502:45	5502:45	4	;
EXPR_STATEMENT	5503:1	5503:51	3	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5503:1	5503:1	4	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5503:1	5503:44	5	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5503:1	5503:1	6	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5503:1	5503:42	7	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5503:1	5503:1	8	t2p
LEAF_NODE	5503:4	5503:4	8	->
LEAF_NODE	5503:6	5503:6	8	pdf_xrefoffsets
LEAF_NODE	5503:21	5503:21	8	[
EXPR	5503:22	5503:22	8	t2p -> pdf_xrefcount ++
FIELD	5503:22	5503:40	9	t2p -> pdf_xrefcount ++
LEAF_NODE	5503:22	5503:22	10	t2p
LEAF_NODE	5503:25	5503:25	10	->
LEAF_NODE	5503:27	5503:27	10	pdf_xrefcount
LEAF_NODE	5503:40	5503:40	10	++
LEAF_NODE	5503:42	5503:42	8	]
ASSIGN_OP	5503:43	5503:43	6	=
LEAF_NODE	5503:43	5503:43	7	=
RVAL	5503:44	5503:44	6	written
FIELD	5503:44	5503:44	7	written
LEAF_NODE	5503:44	5503:44	8	written
LEAF_NODE	5503:51	5503:51	4	;
EXPR_STATEMENT	5504:1	5504:36	3	t2p -> pdf_catalog = t2p -> pdf_xrefcount ;
EXPR	5504:1	5504:1	4	t2p -> pdf_catalog = t2p -> pdf_xrefcount
ASSIGN	5504:1	5504:18	5	t2p -> pdf_catalog = t2p -> pdf_xrefcount
LVAL	5504:1	5504:1	6	t2p -> pdf_catalog
FIELD	5504:1	5504:6	7	t2p -> pdf_catalog
LEAF_NODE	5504:1	5504:1	8	t2p
LEAF_NODE	5504:4	5504:4	8	->
LEAF_NODE	5504:6	5504:6	8	pdf_catalog
ASSIGN_OP	5504:17	5504:17	6	=
LEAF_NODE	5504:17	5504:17	7	=
RVAL	5504:18	5504:18	6	t2p -> pdf_xrefcount
FIELD	5504:18	5504:23	7	t2p -> pdf_xrefcount
LEAF_NODE	5504:18	5504:18	8	t2p
LEAF_NODE	5504:21	5504:21	8	->
LEAF_NODE	5504:23	5504:23	8	pdf_xrefcount
LEAF_NODE	5504:36	5504:36	4	;
EXPR_STATEMENT	5505:1	5505:63	3	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5505:1	5505:1	4	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5505:1	5505:12	5	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5505:1	5505:1	6	written
FIELD	5505:1	5505:1	7	written
LEAF_NODE	5505:1	5505:1	8	written
ASSIGN_OP	5505:9	5505:9	6	+=
LEAF_NODE	5505:9	5505:9	7	+=
RVAL	5505:12	5505:12	6	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5505:12	5505:62	7	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5505:12	5505:12	8	t2p_write_pdf_obj_start
LEAF_NODE	5505:12	5505:12	9	t2p_write_pdf_obj_start
LEAF_NODE	5505:35	5505:35	8	(
ARGUMENT	5505:36	5505:36	8	t2p -> pdf_xrefcount
FIELD	5505:36	5505:41	9	t2p -> pdf_xrefcount
LEAF_NODE	5505:36	5505:36	10	t2p
LEAF_NODE	5505:39	5505:39	10	->
LEAF_NODE	5505:41	5505:41	10	pdf_xrefcount
LEAF_NODE	5505:54	5505:54	8	,
ARGUMENT	5505:56	5505:56	8	output
FIELD	5505:56	5505:56	9	output
LEAF_NODE	5505:56	5505:56	10	output
LEAF_NODE	5505:62	5505:62	8	)
LEAF_NODE	5505:63	5505:63	4	;
EXPR_STATEMENT	5506:1	5506:46	3	written += t2p_write_pdf_catalog ( t2p , output ) ;
EXPR	5506:1	5506:1	4	written += t2p_write_pdf_catalog ( t2p , output )
ASSIGN	5506:1	5506:12	5	written += t2p_write_pdf_catalog ( t2p , output )
LVAL	5506:1	5506:1	6	written
FIELD	5506:1	5506:1	7	written
LEAF_NODE	5506:1	5506:1	8	written
ASSIGN_OP	5506:9	5506:9	6	+=
LEAF_NODE	5506:9	5506:9	7	+=
RVAL	5506:12	5506:12	6	t2p_write_pdf_catalog ( t2p , output )
FUNCTION_CALL	5506:12	5506:45	7	t2p_write_pdf_catalog ( t2p , output )
CALLEE	5506:12	5506:12	8	t2p_write_pdf_catalog
LEAF_NODE	5506:12	5506:12	9	t2p_write_pdf_catalog
LEAF_NODE	5506:33	5506:33	8	(
ARGUMENT	5506:34	5506:34	8	t2p
FIELD	5506:34	5506:34	9	t2p
LEAF_NODE	5506:34	5506:34	10	t2p
LEAF_NODE	5506:37	5506:37	8	,
ARGUMENT	5506:39	5506:39	8	output
FIELD	5506:39	5506:39	9	output
LEAF_NODE	5506:39	5506:39	10	output
LEAF_NODE	5506:45	5506:45	8	)
LEAF_NODE	5506:46	5506:46	4	;
EXPR_STATEMENT	5507:1	5507:41	3	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5507:1	5507:1	4	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5507:1	5507:12	5	written += t2p_write_pdf_obj_end ( output )
LVAL	5507:1	5507:1	6	written
FIELD	5507:1	5507:1	7	written
LEAF_NODE	5507:1	5507:1	8	written
ASSIGN_OP	5507:9	5507:9	6	+=
LEAF_NODE	5507:9	5507:9	7	+=
RVAL	5507:12	5507:12	6	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5507:12	5507:40	7	t2p_write_pdf_obj_end ( output )
CALLEE	5507:12	5507:12	8	t2p_write_pdf_obj_end
LEAF_NODE	5507:12	5507:12	9	t2p_write_pdf_obj_end
LEAF_NODE	5507:33	5507:33	8	(
ARGUMENT	5507:34	5507:34	8	output
FIELD	5507:34	5507:34	9	output
LEAF_NODE	5507:34	5507:34	10	output
LEAF_NODE	5507:40	5507:40	8	)
LEAF_NODE	5507:41	5507:41	4	;
EXPR_STATEMENT	5508:1	5508:51	3	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5508:1	5508:1	4	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5508:1	5508:44	5	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5508:1	5508:1	6	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5508:1	5508:42	7	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5508:1	5508:1	8	t2p
LEAF_NODE	5508:4	5508:4	8	->
LEAF_NODE	5508:6	5508:6	8	pdf_xrefoffsets
LEAF_NODE	5508:21	5508:21	8	[
EXPR	5508:22	5508:22	8	t2p -> pdf_xrefcount ++
FIELD	5508:22	5508:40	9	t2p -> pdf_xrefcount ++
LEAF_NODE	5508:22	5508:22	10	t2p
LEAF_NODE	5508:25	5508:25	10	->
LEAF_NODE	5508:27	5508:27	10	pdf_xrefcount
LEAF_NODE	5508:40	5508:40	10	++
LEAF_NODE	5508:42	5508:42	8	]
ASSIGN_OP	5508:43	5508:43	6	=
LEAF_NODE	5508:43	5508:43	7	=
RVAL	5508:44	5508:44	6	written
FIELD	5508:44	5508:44	7	written
LEAF_NODE	5508:44	5508:44	8	written
LEAF_NODE	5508:51	5508:51	4	;
EXPR_STATEMENT	5509:1	5509:33	3	t2p -> pdf_info = t2p -> pdf_xrefcount ;
EXPR	5509:1	5509:1	4	t2p -> pdf_info = t2p -> pdf_xrefcount
ASSIGN	5509:1	5509:15	5	t2p -> pdf_info = t2p -> pdf_xrefcount
LVAL	5509:1	5509:1	6	t2p -> pdf_info
FIELD	5509:1	5509:6	7	t2p -> pdf_info
LEAF_NODE	5509:1	5509:1	8	t2p
LEAF_NODE	5509:4	5509:4	8	->
LEAF_NODE	5509:6	5509:6	8	pdf_info
ASSIGN_OP	5509:14	5509:14	6	=
LEAF_NODE	5509:14	5509:14	7	=
RVAL	5509:15	5509:15	6	t2p -> pdf_xrefcount
FIELD	5509:15	5509:20	7	t2p -> pdf_xrefcount
LEAF_NODE	5509:15	5509:15	8	t2p
LEAF_NODE	5509:18	5509:18	8	->
LEAF_NODE	5509:20	5509:20	8	pdf_xrefcount
LEAF_NODE	5509:33	5509:33	4	;
EXPR_STATEMENT	5510:1	5510:63	3	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5510:1	5510:1	4	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5510:1	5510:12	5	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5510:1	5510:1	6	written
FIELD	5510:1	5510:1	7	written
LEAF_NODE	5510:1	5510:1	8	written
ASSIGN_OP	5510:9	5510:9	6	+=
LEAF_NODE	5510:9	5510:9	7	+=
RVAL	5510:12	5510:12	6	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5510:12	5510:62	7	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5510:12	5510:12	8	t2p_write_pdf_obj_start
LEAF_NODE	5510:12	5510:12	9	t2p_write_pdf_obj_start
LEAF_NODE	5510:35	5510:35	8	(
ARGUMENT	5510:36	5510:36	8	t2p -> pdf_xrefcount
FIELD	5510:36	5510:41	9	t2p -> pdf_xrefcount
LEAF_NODE	5510:36	5510:36	10	t2p
LEAF_NODE	5510:39	5510:39	10	->
LEAF_NODE	5510:41	5510:41	10	pdf_xrefcount
LEAF_NODE	5510:54	5510:54	8	,
ARGUMENT	5510:56	5510:56	8	output
FIELD	5510:56	5510:56	9	output
LEAF_NODE	5510:56	5510:56	10	output
LEAF_NODE	5510:62	5510:62	8	)
LEAF_NODE	5510:63	5510:63	4	;
EXPR_STATEMENT	5511:1	5511:50	3	written += t2p_write_pdf_info ( t2p , input , output ) ;
EXPR	5511:1	5511:1	4	written += t2p_write_pdf_info ( t2p , input , output )
ASSIGN	5511:1	5511:12	5	written += t2p_write_pdf_info ( t2p , input , output )
LVAL	5511:1	5511:1	6	written
FIELD	5511:1	5511:1	7	written
LEAF_NODE	5511:1	5511:1	8	written
ASSIGN_OP	5511:9	5511:9	6	+=
LEAF_NODE	5511:9	5511:9	7	+=
RVAL	5511:12	5511:12	6	t2p_write_pdf_info ( t2p , input , output )
FUNCTION_CALL	5511:12	5511:49	7	t2p_write_pdf_info ( t2p , input , output )
CALLEE	5511:12	5511:12	8	t2p_write_pdf_info
LEAF_NODE	5511:12	5511:12	9	t2p_write_pdf_info
LEAF_NODE	5511:30	5511:30	8	(
ARGUMENT	5511:31	5511:31	8	t2p
FIELD	5511:31	5511:31	9	t2p
LEAF_NODE	5511:31	5511:31	10	t2p
LEAF_NODE	5511:34	5511:34	8	,
ARGUMENT	5511:36	5511:36	8	input
FIELD	5511:36	5511:36	9	input
LEAF_NODE	5511:36	5511:36	10	input
LEAF_NODE	5511:41	5511:41	8	,
ARGUMENT	5511:43	5511:43	8	output
FIELD	5511:43	5511:43	9	output
LEAF_NODE	5511:43	5511:43	10	output
LEAF_NODE	5511:49	5511:49	8	)
LEAF_NODE	5511:50	5511:50	4	;
EXPR_STATEMENT	5512:1	5512:41	3	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5512:1	5512:1	4	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5512:1	5512:12	5	written += t2p_write_pdf_obj_end ( output )
LVAL	5512:1	5512:1	6	written
FIELD	5512:1	5512:1	7	written
LEAF_NODE	5512:1	5512:1	8	written
ASSIGN_OP	5512:9	5512:9	6	+=
LEAF_NODE	5512:9	5512:9	7	+=
RVAL	5512:12	5512:12	6	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5512:12	5512:40	7	t2p_write_pdf_obj_end ( output )
CALLEE	5512:12	5512:12	8	t2p_write_pdf_obj_end
LEAF_NODE	5512:12	5512:12	9	t2p_write_pdf_obj_end
LEAF_NODE	5512:33	5512:33	8	(
ARGUMENT	5512:34	5512:34	8	output
FIELD	5512:34	5512:34	9	output
LEAF_NODE	5512:34	5512:34	10	output
LEAF_NODE	5512:40	5512:40	8	)
LEAF_NODE	5512:41	5512:41	4	;
EXPR_STATEMENT	5513:1	5513:51	3	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5513:1	5513:1	4	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5513:1	5513:44	5	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5513:1	5513:1	6	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5513:1	5513:42	7	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5513:1	5513:1	8	t2p
LEAF_NODE	5513:4	5513:4	8	->
LEAF_NODE	5513:6	5513:6	8	pdf_xrefoffsets
LEAF_NODE	5513:21	5513:21	8	[
EXPR	5513:22	5513:22	8	t2p -> pdf_xrefcount ++
FIELD	5513:22	5513:40	9	t2p -> pdf_xrefcount ++
LEAF_NODE	5513:22	5513:22	10	t2p
LEAF_NODE	5513:25	5513:25	10	->
LEAF_NODE	5513:27	5513:27	10	pdf_xrefcount
LEAF_NODE	5513:40	5513:40	10	++
LEAF_NODE	5513:42	5513:42	8	]
ASSIGN_OP	5513:43	5513:43	6	=
LEAF_NODE	5513:43	5513:43	7	=
RVAL	5513:44	5513:44	6	written
FIELD	5513:44	5513:44	7	written
LEAF_NODE	5513:44	5513:44	8	written
LEAF_NODE	5513:51	5513:51	4	;
EXPR_STATEMENT	5514:1	5514:34	3	t2p -> pdf_pages = t2p -> pdf_xrefcount ;
EXPR	5514:1	5514:1	4	t2p -> pdf_pages = t2p -> pdf_xrefcount
ASSIGN	5514:1	5514:16	5	t2p -> pdf_pages = t2p -> pdf_xrefcount
LVAL	5514:1	5514:1	6	t2p -> pdf_pages
FIELD	5514:1	5514:6	7	t2p -> pdf_pages
LEAF_NODE	5514:1	5514:1	8	t2p
LEAF_NODE	5514:4	5514:4	8	->
LEAF_NODE	5514:6	5514:6	8	pdf_pages
ASSIGN_OP	5514:15	5514:15	6	=
LEAF_NODE	5514:15	5514:15	7	=
RVAL	5514:16	5514:16	6	t2p -> pdf_xrefcount
FIELD	5514:16	5514:21	7	t2p -> pdf_xrefcount
LEAF_NODE	5514:16	5514:16	8	t2p
LEAF_NODE	5514:19	5514:19	8	->
LEAF_NODE	5514:21	5514:21	8	pdf_xrefcount
LEAF_NODE	5514:34	5514:34	4	;
EXPR_STATEMENT	5515:1	5515:63	3	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5515:1	5515:1	4	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5515:1	5515:12	5	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5515:1	5515:1	6	written
FIELD	5515:1	5515:1	7	written
LEAF_NODE	5515:1	5515:1	8	written
ASSIGN_OP	5515:9	5515:9	6	+=
LEAF_NODE	5515:9	5515:9	7	+=
RVAL	5515:12	5515:12	6	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5515:12	5515:62	7	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5515:12	5515:12	8	t2p_write_pdf_obj_start
LEAF_NODE	5515:12	5515:12	9	t2p_write_pdf_obj_start
LEAF_NODE	5515:35	5515:35	8	(
ARGUMENT	5515:36	5515:36	8	t2p -> pdf_xrefcount
FIELD	5515:36	5515:41	9	t2p -> pdf_xrefcount
LEAF_NODE	5515:36	5515:36	10	t2p
LEAF_NODE	5515:39	5515:39	10	->
LEAF_NODE	5515:41	5515:41	10	pdf_xrefcount
LEAF_NODE	5515:54	5515:54	8	,
ARGUMENT	5515:56	5515:56	8	output
FIELD	5515:56	5515:56	9	output
LEAF_NODE	5515:56	5515:56	10	output
LEAF_NODE	5515:62	5515:62	8	)
LEAF_NODE	5515:63	5515:63	4	;
EXPR_STATEMENT	5516:1	5516:44	3	written += t2p_write_pdf_pages ( t2p , output ) ;
EXPR	5516:1	5516:1	4	written += t2p_write_pdf_pages ( t2p , output )
ASSIGN	5516:1	5516:12	5	written += t2p_write_pdf_pages ( t2p , output )
LVAL	5516:1	5516:1	6	written
FIELD	5516:1	5516:1	7	written
LEAF_NODE	5516:1	5516:1	8	written
ASSIGN_OP	5516:9	5516:9	6	+=
LEAF_NODE	5516:9	5516:9	7	+=
RVAL	5516:12	5516:12	6	t2p_write_pdf_pages ( t2p , output )
FUNCTION_CALL	5516:12	5516:43	7	t2p_write_pdf_pages ( t2p , output )
CALLEE	5516:12	5516:12	8	t2p_write_pdf_pages
LEAF_NODE	5516:12	5516:12	9	t2p_write_pdf_pages
LEAF_NODE	5516:31	5516:31	8	(
ARGUMENT	5516:32	5516:32	8	t2p
FIELD	5516:32	5516:32	9	t2p
LEAF_NODE	5516:32	5516:32	10	t2p
LEAF_NODE	5516:35	5516:35	8	,
ARGUMENT	5516:37	5516:37	8	output
FIELD	5516:37	5516:37	9	output
LEAF_NODE	5516:37	5516:37	10	output
LEAF_NODE	5516:43	5516:43	8	)
LEAF_NODE	5516:44	5516:44	4	;
EXPR_STATEMENT	5517:1	5517:41	3	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5517:1	5517:1	4	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5517:1	5517:12	5	written += t2p_write_pdf_obj_end ( output )
LVAL	5517:1	5517:1	6	written
FIELD	5517:1	5517:1	7	written
LEAF_NODE	5517:1	5517:1	8	written
ASSIGN_OP	5517:9	5517:9	6	+=
LEAF_NODE	5517:9	5517:9	7	+=
RVAL	5517:12	5517:12	6	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5517:12	5517:40	7	t2p_write_pdf_obj_end ( output )
CALLEE	5517:12	5517:12	8	t2p_write_pdf_obj_end
LEAF_NODE	5517:12	5517:12	9	t2p_write_pdf_obj_end
LEAF_NODE	5517:33	5517:33	8	(
ARGUMENT	5517:34	5517:34	8	output
FIELD	5517:34	5517:34	9	output
LEAF_NODE	5517:34	5517:34	10	output
LEAF_NODE	5517:40	5517:40	8	)
LEAF_NODE	5517:41	5517:41	4	;
ITERATION	5518:1	5518:71	3	
KEYWORD	5518:1	5518:1	4	for
LEAF_NODE	5518:1	5518:1	5	for
LEAF_NODE	5518:4	5518:4	4	(
FOR_INIT	5518:5	5518:20	4	t2p -> pdf_page = 0 ;
EXPR	5518:5	5518:5	5	t2p -> pdf_page = 0
ASSIGN	5518:5	5518:19	6	t2p -> pdf_page = 0
LVAL	5518:5	5518:5	7	t2p -> pdf_page
FIELD	5518:5	5518:10	8	t2p -> pdf_page
LEAF_NODE	5518:5	5518:5	9	t2p
LEAF_NODE	5518:8	5518:8	9	->
LEAF_NODE	5518:10	5518:10	9	pdf_page
ASSIGN_OP	5518:18	5518:18	7	=
LEAF_NODE	5518:18	5518:18	8	=
RVAL	5518:19	5518:19	7	0
FIELD	5518:19	5518:19	8	0
LEAF_NODE	5518:19	5518:19	9	0
LEAF_NODE	5518:20	5518:20	5	;
CONDITION	5518:21	5518:21	4	t2p -> pdf_page < t2p -> tiff_pagecount
EXPR	5518:21	5518:35	5	t2p -> pdf_page < t2p -> tiff_pagecount
FIELD	5518:21	5518:26	6	t2p -> pdf_page
LEAF_NODE	5518:21	5518:21	7	t2p
LEAF_NODE	5518:24	5518:24	7	->
LEAF_NODE	5518:26	5518:26	7	pdf_page
REL_OPERATOR	5518:34	5518:34	6	<
LEAF_NODE	5518:34	5518:34	7	<
FIELD	5518:35	5518:40	6	t2p -> tiff_pagecount
LEAF_NODE	5518:35	5518:35	7	t2p
LEAF_NODE	5518:38	5518:38	7	->
LEAF_NODE	5518:40	5518:40	7	tiff_pagecount
LEAF_NODE	5518:54	5518:54	4	;
FOR_EXPR	5518:55	5518:55	4	t2p -> pdf_page ++
EXPR	5518:55	5518:55	5	t2p -> pdf_page ++
FIELD	5518:55	5518:68	6	t2p -> pdf_page ++
LEAF_NODE	5518:55	5518:55	7	t2p
LEAF_NODE	5518:58	5518:58	7	->
LEAF_NODE	5518:60	5518:60	7	pdf_page
LEAF_NODE	5518:68	5518:68	7	++
LEAF_NODE	5518:70	5518:70	4	)
STATEMENTS	5518:71	5634:1	4	
LEAF_NODE	5518:71	5518:71	5	{
STATEMENTS	5519:2	5611:4	5	
EXPR_STATEMENT	5519:2	5519:32	6	t2p_read_tiff_data ( t2p , input ) ;
EXPR	5519:2	5519:2	7	t2p_read_tiff_data ( t2p , input )
FUNCTION_CALL	5519:2	5519:31	8	t2p_read_tiff_data ( t2p , input )
CALLEE	5519:2	5519:2	9	t2p_read_tiff_data
LEAF_NODE	5519:2	5519:2	10	t2p_read_tiff_data
LEAF_NODE	5519:20	5519:20	9	(
ARGUMENT	5519:21	5519:21	9	t2p
FIELD	5519:21	5519:21	10	t2p
LEAF_NODE	5519:21	5519:21	11	t2p
LEAF_NODE	5519:24	5519:24	9	,
ARGUMENT	5519:26	5519:26	9	input
FIELD	5519:26	5519:26	10	input
LEAF_NODE	5519:26	5519:26	11	input
LEAF_NODE	5519:31	5519:31	9	)
LEAF_NODE	5519:32	5519:32	7	;
SELECTION	5520:2	5520:32	6	
KEYWORD	5520:2	5520:2	7	if
LEAF_NODE	5520:2	5520:2	8	if
LEAF_NODE	5520:4	5520:4	7	(
CONDITION	5520:5	5520:5	7	t2p -> t2p_error != T2P_ERR_OK
EXPR	5520:5	5520:21	8	t2p -> t2p_error != T2P_ERR_OK
FIELD	5520:5	5520:10	9	t2p -> t2p_error
LEAF_NODE	5520:5	5520:5	10	t2p
LEAF_NODE	5520:8	5520:8	10	->
LEAF_NODE	5520:10	5520:10	10	t2p_error
EQ_OPERATOR	5520:19	5520:19	9	!=
LEAF_NODE	5520:19	5520:19	10	!=
FIELD	5520:21	5520:21	9	T2P_ERR_OK
LEAF_NODE	5520:21	5520:21	10	T2P_ERR_OK
LEAF_NODE	5520:31	5520:31	7	)
STATEMENTS	5520:32	5520:43	7	
LEAF_NODE	5520:32	5520:32	8	{
STATEMENTS	5520:33	5520:33	8	
JUMP_STATEMENT	5520:33	5520:42	9	return ( 0 ) ;
KEYWORD	5520:33	5520:33	10	return
LEAF_NODE	5520:33	5520:33	11	return
DESTINATION	5520:39	5520:39	10	( 0 )
EXPR	5520:39	5520:41	11	( 0 )
LEAF_NODE	5520:39	5520:39	12	(
FIELD	5520:40	5520:40	12	0
LEAF_NODE	5520:40	5520:40	13	0
LEAF_NODE	5520:41	5520:41	12	)
LEAF_NODE	5520:42	5520:42	10	;
LEAF_NODE	5520:43	5520:43	8	}
EXPR_STATEMENT	5521:2	5521:52	6	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5521:2	5521:2	7	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5521:2	5521:45	8	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5521:2	5521:2	9	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5521:2	5521:43	10	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5521:2	5521:2	11	t2p
LEAF_NODE	5521:5	5521:5	11	->
LEAF_NODE	5521:7	5521:7	11	pdf_xrefoffsets
LEAF_NODE	5521:22	5521:22	11	[
EXPR	5521:23	5521:23	11	t2p -> pdf_xrefcount ++
FIELD	5521:23	5521:41	12	t2p -> pdf_xrefcount ++
LEAF_NODE	5521:23	5521:23	13	t2p
LEAF_NODE	5521:26	5521:26	13	->
LEAF_NODE	5521:28	5521:28	13	pdf_xrefcount
LEAF_NODE	5521:41	5521:41	13	++
LEAF_NODE	5521:43	5521:43	11	]
ASSIGN_OP	5521:44	5521:44	9	=
LEAF_NODE	5521:44	5521:44	10	=
RVAL	5521:45	5521:45	9	written
FIELD	5521:45	5521:45	10	written
LEAF_NODE	5521:45	5521:45	11	written
LEAF_NODE	5521:52	5521:52	7	;
EXPR_STATEMENT	5522:2	5522:64	6	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5522:2	5522:2	7	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5522:2	5522:13	8	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5522:2	5522:2	9	written
FIELD	5522:2	5522:2	10	written
LEAF_NODE	5522:2	5522:2	11	written
ASSIGN_OP	5522:10	5522:10	9	+=
LEAF_NODE	5522:10	5522:10	10	+=
RVAL	5522:13	5522:13	9	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5522:13	5522:63	10	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5522:13	5522:13	11	t2p_write_pdf_obj_start
LEAF_NODE	5522:13	5522:13	12	t2p_write_pdf_obj_start
LEAF_NODE	5522:36	5522:36	11	(
ARGUMENT	5522:37	5522:37	11	t2p -> pdf_xrefcount
FIELD	5522:37	5522:42	12	t2p -> pdf_xrefcount
LEAF_NODE	5522:37	5522:37	13	t2p
LEAF_NODE	5522:40	5522:40	13	->
LEAF_NODE	5522:42	5522:42	13	pdf_xrefcount
LEAF_NODE	5522:55	5522:55	11	,
ARGUMENT	5522:57	5522:57	11	output
FIELD	5522:57	5522:57	12	output
LEAF_NODE	5522:57	5522:57	13	output
LEAF_NODE	5522:63	5522:63	11	)
LEAF_NODE	5522:64	5522:64	7	;
EXPR_STATEMENT	5523:2	5523:64	6	written += t2p_write_pdf_page ( t2p -> pdf_xrefcount , t2p , output ) ;
EXPR	5523:2	5523:2	7	written += t2p_write_pdf_page ( t2p -> pdf_xrefcount , t2p , output )
ASSIGN	5523:2	5523:13	8	written += t2p_write_pdf_page ( t2p -> pdf_xrefcount , t2p , output )
LVAL	5523:2	5523:2	9	written
FIELD	5523:2	5523:2	10	written
LEAF_NODE	5523:2	5523:2	11	written
ASSIGN_OP	5523:10	5523:10	9	+=
LEAF_NODE	5523:10	5523:10	10	+=
RVAL	5523:13	5523:13	9	t2p_write_pdf_page ( t2p -> pdf_xrefcount , t2p , output )
FUNCTION_CALL	5523:13	5523:63	10	t2p_write_pdf_page ( t2p -> pdf_xrefcount , t2p , output )
CALLEE	5523:13	5523:13	11	t2p_write_pdf_page
LEAF_NODE	5523:13	5523:13	12	t2p_write_pdf_page
LEAF_NODE	5523:31	5523:31	11	(
ARGUMENT	5523:32	5523:32	11	t2p -> pdf_xrefcount
FIELD	5523:32	5523:37	12	t2p -> pdf_xrefcount
LEAF_NODE	5523:32	5523:32	13	t2p
LEAF_NODE	5523:35	5523:35	13	->
LEAF_NODE	5523:37	5523:37	13	pdf_xrefcount
LEAF_NODE	5523:50	5523:50	11	,
ARGUMENT	5523:52	5523:52	11	t2p
FIELD	5523:52	5523:52	12	t2p
LEAF_NODE	5523:52	5523:52	13	t2p
LEAF_NODE	5523:55	5523:55	11	,
ARGUMENT	5523:57	5523:57	11	output
FIELD	5523:57	5523:57	12	output
LEAF_NODE	5523:57	5523:57	13	output
LEAF_NODE	5523:63	5523:63	11	)
LEAF_NODE	5523:64	5523:64	7	;
EXPR_STATEMENT	5524:2	5524:42	6	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5524:2	5524:2	7	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5524:2	5524:13	8	written += t2p_write_pdf_obj_end ( output )
LVAL	5524:2	5524:2	9	written
FIELD	5524:2	5524:2	10	written
LEAF_NODE	5524:2	5524:2	11	written
ASSIGN_OP	5524:10	5524:10	9	+=
LEAF_NODE	5524:10	5524:10	10	+=
RVAL	5524:13	5524:13	9	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5524:13	5524:41	10	t2p_write_pdf_obj_end ( output )
CALLEE	5524:13	5524:13	11	t2p_write_pdf_obj_end
LEAF_NODE	5524:13	5524:13	12	t2p_write_pdf_obj_end
LEAF_NODE	5524:34	5524:34	11	(
ARGUMENT	5524:35	5524:35	11	output
FIELD	5524:35	5524:35	12	output
LEAF_NODE	5524:35	5524:35	13	output
LEAF_NODE	5524:41	5524:41	11	)
LEAF_NODE	5524:42	5524:42	7	;
EXPR_STATEMENT	5525:2	5525:52	6	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5525:2	5525:2	7	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5525:2	5525:45	8	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5525:2	5525:2	9	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5525:2	5525:43	10	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5525:2	5525:2	11	t2p
LEAF_NODE	5525:5	5525:5	11	->
LEAF_NODE	5525:7	5525:7	11	pdf_xrefoffsets
LEAF_NODE	5525:22	5525:22	11	[
EXPR	5525:23	5525:23	11	t2p -> pdf_xrefcount ++
FIELD	5525:23	5525:41	12	t2p -> pdf_xrefcount ++
LEAF_NODE	5525:23	5525:23	13	t2p
LEAF_NODE	5525:26	5525:26	13	->
LEAF_NODE	5525:28	5525:28	13	pdf_xrefcount
LEAF_NODE	5525:41	5525:41	13	++
LEAF_NODE	5525:43	5525:43	11	]
ASSIGN_OP	5525:44	5525:44	9	=
LEAF_NODE	5525:44	5525:44	10	=
RVAL	5525:45	5525:45	9	written
FIELD	5525:45	5525:45	10	written
LEAF_NODE	5525:45	5525:45	11	written
LEAF_NODE	5525:52	5525:52	7	;
EXPR_STATEMENT	5526:2	5526:64	6	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5526:2	5526:2	7	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5526:2	5526:13	8	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5526:2	5526:2	9	written
FIELD	5526:2	5526:2	10	written
LEAF_NODE	5526:2	5526:2	11	written
ASSIGN_OP	5526:10	5526:10	9	+=
LEAF_NODE	5526:10	5526:10	10	+=
RVAL	5526:13	5526:13	9	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5526:13	5526:63	10	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5526:13	5526:13	11	t2p_write_pdf_obj_start
LEAF_NODE	5526:13	5526:13	12	t2p_write_pdf_obj_start
LEAF_NODE	5526:36	5526:36	11	(
ARGUMENT	5526:37	5526:37	11	t2p -> pdf_xrefcount
FIELD	5526:37	5526:42	12	t2p -> pdf_xrefcount
LEAF_NODE	5526:37	5526:37	13	t2p
LEAF_NODE	5526:40	5526:40	13	->
LEAF_NODE	5526:42	5526:42	13	pdf_xrefcount
LEAF_NODE	5526:55	5526:55	11	,
ARGUMENT	5526:57	5526:57	11	output
FIELD	5526:57	5526:57	12	output
LEAF_NODE	5526:57	5526:57	13	output
LEAF_NODE	5526:63	5526:63	11	)
LEAF_NODE	5526:64	5526:64	7	;
EXPR_STATEMENT	5527:2	5527:52	6	written += t2p_write_pdf_stream_dict_start ( output ) ;
EXPR	5527:2	5527:2	7	written += t2p_write_pdf_stream_dict_start ( output )
ASSIGN	5527:2	5527:13	8	written += t2p_write_pdf_stream_dict_start ( output )
LVAL	5527:2	5527:2	9	written
FIELD	5527:2	5527:2	10	written
LEAF_NODE	5527:2	5527:2	11	written
ASSIGN_OP	5527:10	5527:10	9	+=
LEAF_NODE	5527:10	5527:10	10	+=
RVAL	5527:13	5527:13	9	t2p_write_pdf_stream_dict_start ( output )
FUNCTION_CALL	5527:13	5527:51	10	t2p_write_pdf_stream_dict_start ( output )
CALLEE	5527:13	5527:13	11	t2p_write_pdf_stream_dict_start
LEAF_NODE	5527:13	5527:13	12	t2p_write_pdf_stream_dict_start
LEAF_NODE	5527:44	5527:44	11	(
ARGUMENT	5527:45	5527:45	11	output
FIELD	5527:45	5527:45	12	output
LEAF_NODE	5527:45	5527:45	13	output
LEAF_NODE	5527:51	5527:51	11	)
LEAF_NODE	5527:52	5527:52	7	;
EXPR_STATEMENT	5528:2	5528:71	6	written += t2p_write_pdf_stream_dict ( 0 , t2p -> pdf_xrefcount + 1 , output ) ;
EXPR	5528:2	5528:2	7	written += t2p_write_pdf_stream_dict ( 0 , t2p -> pdf_xrefcount + 1 , output )
ASSIGN	5528:2	5528:13	8	written += t2p_write_pdf_stream_dict ( 0 , t2p -> pdf_xrefcount + 1 , output )
LVAL	5528:2	5528:2	9	written
FIELD	5528:2	5528:2	10	written
LEAF_NODE	5528:2	5528:2	11	written
ASSIGN_OP	5528:10	5528:10	9	+=
LEAF_NODE	5528:10	5528:10	10	+=
RVAL	5528:13	5528:13	9	t2p_write_pdf_stream_dict ( 0 , t2p -> pdf_xrefcount + 1 , output )
FUNCTION_CALL	5528:13	5528:70	10	t2p_write_pdf_stream_dict ( 0 , t2p -> pdf_xrefcount + 1 , output )
CALLEE	5528:13	5528:13	11	t2p_write_pdf_stream_dict
LEAF_NODE	5528:13	5528:13	12	t2p_write_pdf_stream_dict
LEAF_NODE	5528:38	5528:38	11	(
ARGUMENT	5528:39	5528:39	11	0
FIELD	5528:39	5528:39	12	0
LEAF_NODE	5528:39	5528:39	13	0
LEAF_NODE	5528:40	5528:40	11	,
ARGUMENT	5528:42	5528:61	11	t2p -> pdf_xrefcount + 1
FIELD	5528:42	5528:47	12	t2p -> pdf_xrefcount
LEAF_NODE	5528:42	5528:42	13	t2p
LEAF_NODE	5528:45	5528:45	13	->
LEAF_NODE	5528:47	5528:47	13	pdf_xrefcount
LEAF_NODE	5528:60	5528:60	12	+
FIELD	5528:61	5528:61	12	1
LEAF_NODE	5528:61	5528:61	13	1
LEAF_NODE	5528:62	5528:62	11	,
ARGUMENT	5528:64	5528:64	11	output
FIELD	5528:64	5528:64	12	output
LEAF_NODE	5528:64	5528:64	13	output
LEAF_NODE	5528:70	5528:70	11	)
LEAF_NODE	5528:71	5528:71	7	;
EXPR_STATEMENT	5529:2	5529:50	6	written += t2p_write_pdf_stream_dict_end ( output ) ;
EXPR	5529:2	5529:2	7	written += t2p_write_pdf_stream_dict_end ( output )
ASSIGN	5529:2	5529:13	8	written += t2p_write_pdf_stream_dict_end ( output )
LVAL	5529:2	5529:2	9	written
FIELD	5529:2	5529:2	10	written
LEAF_NODE	5529:2	5529:2	11	written
ASSIGN_OP	5529:10	5529:10	9	+=
LEAF_NODE	5529:10	5529:10	10	+=
RVAL	5529:13	5529:13	9	t2p_write_pdf_stream_dict_end ( output )
FUNCTION_CALL	5529:13	5529:49	10	t2p_write_pdf_stream_dict_end ( output )
CALLEE	5529:13	5529:13	11	t2p_write_pdf_stream_dict_end
LEAF_NODE	5529:13	5529:13	12	t2p_write_pdf_stream_dict_end
LEAF_NODE	5529:42	5529:42	11	(
ARGUMENT	5529:43	5529:43	11	output
FIELD	5529:43	5529:43	12	output
LEAF_NODE	5529:43	5529:43	13	output
LEAF_NODE	5529:49	5529:49	11	)
LEAF_NODE	5529:50	5529:50	7	;
EXPR_STATEMENT	5530:2	5530:47	6	written += t2p_write_pdf_stream_start ( output ) ;
EXPR	5530:2	5530:2	7	written += t2p_write_pdf_stream_start ( output )
ASSIGN	5530:2	5530:13	8	written += t2p_write_pdf_stream_start ( output )
LVAL	5530:2	5530:2	9	written
FIELD	5530:2	5530:2	10	written
LEAF_NODE	5530:2	5530:2	11	written
ASSIGN_OP	5530:10	5530:10	9	+=
LEAF_NODE	5530:10	5530:10	10	+=
RVAL	5530:13	5530:13	9	t2p_write_pdf_stream_start ( output )
FUNCTION_CALL	5530:13	5530:46	10	t2p_write_pdf_stream_start ( output )
CALLEE	5530:13	5530:13	11	t2p_write_pdf_stream_start
LEAF_NODE	5530:13	5530:13	12	t2p_write_pdf_stream_start
LEAF_NODE	5530:39	5530:39	11	(
ARGUMENT	5530:40	5530:40	11	output
FIELD	5530:40	5530:40	12	output
LEAF_NODE	5530:40	5530:40	13	output
LEAF_NODE	5530:46	5530:46	11	)
LEAF_NODE	5530:47	5530:47	7	;
EXPR_STATEMENT	5531:2	5531:19	6	streamlen = written ;
EXPR	5531:2	5531:2	7	streamlen = written
ASSIGN	5531:2	5531:12	8	streamlen = written
LVAL	5531:2	5531:2	9	streamlen
FIELD	5531:2	5531:2	10	streamlen
LEAF_NODE	5531:2	5531:2	11	streamlen
ASSIGN_OP	5531:11	5531:11	9	=
LEAF_NODE	5531:11	5531:11	10	=
RVAL	5531:12	5531:12	9	written
FIELD	5531:12	5531:12	10	written
LEAF_NODE	5531:12	5531:12	11	written
LEAF_NODE	5531:19	5531:19	7	;
EXPR_STATEMENT	5532:2	5532:59	6	written += t2p_write_pdf_page_content_stream ( t2p , output ) ;
EXPR	5532:2	5532:2	7	written += t2p_write_pdf_page_content_stream ( t2p , output )
ASSIGN	5532:2	5532:13	8	written += t2p_write_pdf_page_content_stream ( t2p , output )
LVAL	5532:2	5532:2	9	written
FIELD	5532:2	5532:2	10	written
LEAF_NODE	5532:2	5532:2	11	written
ASSIGN_OP	5532:10	5532:10	9	+=
LEAF_NODE	5532:10	5532:10	10	+=
RVAL	5532:13	5532:13	9	t2p_write_pdf_page_content_stream ( t2p , output )
FUNCTION_CALL	5532:13	5532:58	10	t2p_write_pdf_page_content_stream ( t2p , output )
CALLEE	5532:13	5532:13	11	t2p_write_pdf_page_content_stream
LEAF_NODE	5532:13	5532:13	12	t2p_write_pdf_page_content_stream
LEAF_NODE	5532:46	5532:46	11	(
ARGUMENT	5532:47	5532:47	11	t2p
FIELD	5532:47	5532:47	12	t2p
LEAF_NODE	5532:47	5532:47	13	t2p
LEAF_NODE	5532:50	5532:50	11	,
ARGUMENT	5532:52	5532:52	11	output
FIELD	5532:52	5532:52	12	output
LEAF_NODE	5532:52	5532:52	13	output
LEAF_NODE	5532:58	5532:58	11	)
LEAF_NODE	5532:59	5532:59	7	;
EXPR_STATEMENT	5533:2	5533:29	6	streamlen = written - streamlen ;
EXPR	5533:2	5533:2	7	streamlen = written - streamlen
ASSIGN	5533:2	5533:12	8	streamlen = written - streamlen
LVAL	5533:2	5533:2	9	streamlen
FIELD	5533:2	5533:2	10	streamlen
LEAF_NODE	5533:2	5533:2	11	streamlen
ASSIGN_OP	5533:11	5533:11	9	=
LEAF_NODE	5533:11	5533:11	10	=
RVAL	5533:12	5533:20	9	written - streamlen
FIELD	5533:12	5533:12	10	written
LEAF_NODE	5533:12	5533:12	11	written
LEAF_NODE	5533:19	5533:19	10	-
FIELD	5533:20	5533:20	10	streamlen
LEAF_NODE	5533:20	5533:20	11	streamlen
LEAF_NODE	5533:29	5533:29	7	;
EXPR_STATEMENT	5534:2	5534:45	6	written += t2p_write_pdf_stream_end ( output ) ;
EXPR	5534:2	5534:2	7	written += t2p_write_pdf_stream_end ( output )
ASSIGN	5534:2	5534:13	8	written += t2p_write_pdf_stream_end ( output )
LVAL	5534:2	5534:2	9	written
FIELD	5534:2	5534:2	10	written
LEAF_NODE	5534:2	5534:2	11	written
ASSIGN_OP	5534:10	5534:10	9	+=
LEAF_NODE	5534:10	5534:10	10	+=
RVAL	5534:13	5534:13	9	t2p_write_pdf_stream_end ( output )
FUNCTION_CALL	5534:13	5534:44	10	t2p_write_pdf_stream_end ( output )
CALLEE	5534:13	5534:13	11	t2p_write_pdf_stream_end
LEAF_NODE	5534:13	5534:13	12	t2p_write_pdf_stream_end
LEAF_NODE	5534:37	5534:37	11	(
ARGUMENT	5534:38	5534:38	11	output
FIELD	5534:38	5534:38	12	output
LEAF_NODE	5534:38	5534:38	13	output
LEAF_NODE	5534:44	5534:44	11	)
LEAF_NODE	5534:45	5534:45	7	;
EXPR_STATEMENT	5535:2	5535:42	6	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5535:2	5535:2	7	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5535:2	5535:13	8	written += t2p_write_pdf_obj_end ( output )
LVAL	5535:2	5535:2	9	written
FIELD	5535:2	5535:2	10	written
LEAF_NODE	5535:2	5535:2	11	written
ASSIGN_OP	5535:10	5535:10	9	+=
LEAF_NODE	5535:10	5535:10	10	+=
RVAL	5535:13	5535:13	9	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5535:13	5535:41	10	t2p_write_pdf_obj_end ( output )
CALLEE	5535:13	5535:13	11	t2p_write_pdf_obj_end
LEAF_NODE	5535:13	5535:13	12	t2p_write_pdf_obj_end
LEAF_NODE	5535:34	5535:34	11	(
ARGUMENT	5535:35	5535:35	11	output
FIELD	5535:35	5535:35	12	output
LEAF_NODE	5535:35	5535:35	13	output
LEAF_NODE	5535:41	5535:41	11	)
LEAF_NODE	5535:42	5535:42	7	;
EXPR_STATEMENT	5536:2	5536:52	6	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5536:2	5536:2	7	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5536:2	5536:45	8	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5536:2	5536:2	9	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5536:2	5536:43	10	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5536:2	5536:2	11	t2p
LEAF_NODE	5536:5	5536:5	11	->
LEAF_NODE	5536:7	5536:7	11	pdf_xrefoffsets
LEAF_NODE	5536:22	5536:22	11	[
EXPR	5536:23	5536:23	11	t2p -> pdf_xrefcount ++
FIELD	5536:23	5536:41	12	t2p -> pdf_xrefcount ++
LEAF_NODE	5536:23	5536:23	13	t2p
LEAF_NODE	5536:26	5536:26	13	->
LEAF_NODE	5536:28	5536:28	13	pdf_xrefcount
LEAF_NODE	5536:41	5536:41	13	++
LEAF_NODE	5536:43	5536:43	11	]
ASSIGN_OP	5536:44	5536:44	9	=
LEAF_NODE	5536:44	5536:44	10	=
RVAL	5536:45	5536:45	9	written
FIELD	5536:45	5536:45	10	written
LEAF_NODE	5536:45	5536:45	11	written
LEAF_NODE	5536:52	5536:52	7	;
EXPR_STATEMENT	5537:2	5537:64	6	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5537:2	5537:2	7	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5537:2	5537:13	8	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5537:2	5537:2	9	written
FIELD	5537:2	5537:2	10	written
LEAF_NODE	5537:2	5537:2	11	written
ASSIGN_OP	5537:10	5537:10	9	+=
LEAF_NODE	5537:10	5537:10	10	+=
RVAL	5537:13	5537:13	9	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5537:13	5537:63	10	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5537:13	5537:13	11	t2p_write_pdf_obj_start
LEAF_NODE	5537:13	5537:13	12	t2p_write_pdf_obj_start
LEAF_NODE	5537:36	5537:36	11	(
ARGUMENT	5537:37	5537:37	11	t2p -> pdf_xrefcount
FIELD	5537:37	5537:42	12	t2p -> pdf_xrefcount
LEAF_NODE	5537:37	5537:37	13	t2p
LEAF_NODE	5537:40	5537:40	13	->
LEAF_NODE	5537:42	5537:42	13	pdf_xrefcount
LEAF_NODE	5537:55	5537:55	11	,
ARGUMENT	5537:57	5537:57	11	output
FIELD	5537:57	5537:57	12	output
LEAF_NODE	5537:57	5537:57	13	output
LEAF_NODE	5537:63	5537:63	11	)
LEAF_NODE	5537:64	5537:64	7	;
EXPR_STATEMENT	5538:2	5538:59	6	written += t2p_write_pdf_stream_length ( streamlen , output ) ;
EXPR	5538:2	5538:2	7	written += t2p_write_pdf_stream_length ( streamlen , output )
ASSIGN	5538:2	5538:13	8	written += t2p_write_pdf_stream_length ( streamlen , output )
LVAL	5538:2	5538:2	9	written
FIELD	5538:2	5538:2	10	written
LEAF_NODE	5538:2	5538:2	11	written
ASSIGN_OP	5538:10	5538:10	9	+=
LEAF_NODE	5538:10	5538:10	10	+=
RVAL	5538:13	5538:13	9	t2p_write_pdf_stream_length ( streamlen , output )
FUNCTION_CALL	5538:13	5538:58	10	t2p_write_pdf_stream_length ( streamlen , output )
CALLEE	5538:13	5538:13	11	t2p_write_pdf_stream_length
LEAF_NODE	5538:13	5538:13	12	t2p_write_pdf_stream_length
LEAF_NODE	5538:40	5538:40	11	(
ARGUMENT	5538:41	5538:41	11	streamlen
FIELD	5538:41	5538:41	12	streamlen
LEAF_NODE	5538:41	5538:41	13	streamlen
LEAF_NODE	5538:50	5538:50	11	,
ARGUMENT	5538:52	5538:52	11	output
FIELD	5538:52	5538:52	12	output
LEAF_NODE	5538:52	5538:52	13	output
LEAF_NODE	5538:58	5538:58	11	)
LEAF_NODE	5538:59	5538:59	7	;
EXPR_STATEMENT	5539:2	5539:42	6	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5539:2	5539:2	7	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5539:2	5539:13	8	written += t2p_write_pdf_obj_end ( output )
LVAL	5539:2	5539:2	9	written
FIELD	5539:2	5539:2	10	written
LEAF_NODE	5539:2	5539:2	11	written
ASSIGN_OP	5539:10	5539:10	9	+=
LEAF_NODE	5539:10	5539:10	10	+=
RVAL	5539:13	5539:13	9	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5539:13	5539:41	10	t2p_write_pdf_obj_end ( output )
CALLEE	5539:13	5539:13	11	t2p_write_pdf_obj_end
LEAF_NODE	5539:13	5539:13	12	t2p_write_pdf_obj_end
LEAF_NODE	5539:34	5539:34	11	(
ARGUMENT	5539:35	5539:35	11	output
FIELD	5539:35	5539:35	12	output
LEAF_NODE	5539:35	5539:35	13	output
LEAF_NODE	5539:41	5539:41	11	)
LEAF_NODE	5539:42	5539:42	7	;
SELECTION	5540:2	5540:42	6	
KEYWORD	5540:2	5540:2	7	if
LEAF_NODE	5540:2	5540:2	8	if
LEAF_NODE	5540:4	5540:4	7	(
CONDITION	5540:5	5540:5	7	t2p -> tiff_transferfunctioncount != 0
EXPR	5540:5	5540:40	8	t2p -> tiff_transferfunctioncount != 0
FIELD	5540:5	5540:10	9	t2p -> tiff_transferfunctioncount
LEAF_NODE	5540:5	5540:5	10	t2p
LEAF_NODE	5540:8	5540:8	10	->
LEAF_NODE	5540:10	5540:10	10	tiff_transferfunctioncount
EQ_OPERATOR	5540:37	5540:37	9	!=
LEAF_NODE	5540:37	5540:37	10	!=
FIELD	5540:40	5540:40	9	0
LEAF_NODE	5540:40	5540:40	10	0
LEAF_NODE	5540:41	5540:41	7	)
STATEMENTS	5540:42	5558:2	7	
LEAF_NODE	5540:42	5540:42	8	{
STATEMENTS	5541:3	5545:3	8	
EXPR_STATEMENT	5541:3	5541:53	9	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5541:3	5541:3	10	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5541:3	5541:46	11	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5541:3	5541:3	12	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5541:3	5541:44	13	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5541:3	5541:3	14	t2p
LEAF_NODE	5541:6	5541:6	14	->
LEAF_NODE	5541:8	5541:8	14	pdf_xrefoffsets
LEAF_NODE	5541:23	5541:23	14	[
EXPR	5541:24	5541:24	14	t2p -> pdf_xrefcount ++
FIELD	5541:24	5541:42	15	t2p -> pdf_xrefcount ++
LEAF_NODE	5541:24	5541:24	16	t2p
LEAF_NODE	5541:27	5541:27	16	->
LEAF_NODE	5541:29	5541:29	16	pdf_xrefcount
LEAF_NODE	5541:42	5541:42	16	++
LEAF_NODE	5541:44	5541:44	14	]
ASSIGN_OP	5541:45	5541:45	12	=
LEAF_NODE	5541:45	5541:45	13	=
RVAL	5541:46	5541:46	12	written
FIELD	5541:46	5541:46	13	written
LEAF_NODE	5541:46	5541:46	14	written
LEAF_NODE	5541:53	5541:53	10	;
EXPR_STATEMENT	5542:3	5542:65	9	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5542:3	5542:3	10	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5542:3	5542:14	11	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5542:3	5542:3	12	written
FIELD	5542:3	5542:3	13	written
LEAF_NODE	5542:3	5542:3	14	written
ASSIGN_OP	5542:11	5542:11	12	+=
LEAF_NODE	5542:11	5542:11	13	+=
RVAL	5542:14	5542:14	12	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5542:14	5542:64	13	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5542:14	5542:14	14	t2p_write_pdf_obj_start
LEAF_NODE	5542:14	5542:14	15	t2p_write_pdf_obj_start
LEAF_NODE	5542:37	5542:37	14	(
ARGUMENT	5542:38	5542:38	14	t2p -> pdf_xrefcount
FIELD	5542:38	5542:43	15	t2p -> pdf_xrefcount
LEAF_NODE	5542:38	5542:38	16	t2p
LEAF_NODE	5542:41	5542:41	16	->
LEAF_NODE	5542:43	5542:43	16	pdf_xrefcount
LEAF_NODE	5542:56	5542:56	14	,
ARGUMENT	5542:58	5542:58	14	output
FIELD	5542:58	5542:58	15	output
LEAF_NODE	5542:58	5542:58	16	output
LEAF_NODE	5542:64	5542:64	14	)
LEAF_NODE	5542:65	5542:65	10	;
EXPR_STATEMENT	5543:3	5543:49	9	written += t2p_write_pdf_transfer ( t2p , output ) ;
EXPR	5543:3	5543:3	10	written += t2p_write_pdf_transfer ( t2p , output )
ASSIGN	5543:3	5543:14	11	written += t2p_write_pdf_transfer ( t2p , output )
LVAL	5543:3	5543:3	12	written
FIELD	5543:3	5543:3	13	written
LEAF_NODE	5543:3	5543:3	14	written
ASSIGN_OP	5543:11	5543:11	12	+=
LEAF_NODE	5543:11	5543:11	13	+=
RVAL	5543:14	5543:14	12	t2p_write_pdf_transfer ( t2p , output )
FUNCTION_CALL	5543:14	5543:48	13	t2p_write_pdf_transfer ( t2p , output )
CALLEE	5543:14	5543:14	14	t2p_write_pdf_transfer
LEAF_NODE	5543:14	5543:14	15	t2p_write_pdf_transfer
LEAF_NODE	5543:36	5543:36	14	(
ARGUMENT	5543:37	5543:37	14	t2p
FIELD	5543:37	5543:37	15	t2p
LEAF_NODE	5543:37	5543:37	16	t2p
LEAF_NODE	5543:40	5543:40	14	,
ARGUMENT	5543:42	5543:42	14	output
FIELD	5543:42	5543:42	15	output
LEAF_NODE	5543:42	5543:42	16	output
LEAF_NODE	5543:48	5543:48	14	)
LEAF_NODE	5543:49	5543:49	10	;
EXPR_STATEMENT	5544:3	5544:43	9	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5544:3	5544:3	10	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5544:3	5544:14	11	written += t2p_write_pdf_obj_end ( output )
LVAL	5544:3	5544:3	12	written
FIELD	5544:3	5544:3	13	written
LEAF_NODE	5544:3	5544:3	14	written
ASSIGN_OP	5544:11	5544:11	12	+=
LEAF_NODE	5544:11	5544:11	13	+=
RVAL	5544:14	5544:14	12	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5544:14	5544:42	13	t2p_write_pdf_obj_end ( output )
CALLEE	5544:14	5544:14	14	t2p_write_pdf_obj_end
LEAF_NODE	5544:14	5544:14	15	t2p_write_pdf_obj_end
LEAF_NODE	5544:35	5544:35	14	(
ARGUMENT	5544:36	5544:36	14	output
FIELD	5544:36	5544:36	15	output
LEAF_NODE	5544:36	5544:36	16	output
LEAF_NODE	5544:42	5544:42	14	)
LEAF_NODE	5544:43	5544:43	10	;
ITERATION	5545:3	5545:53	9	
KEYWORD	5545:3	5545:3	10	for
LEAF_NODE	5545:3	5545:3	11	for
LEAF_NODE	5545:6	5545:6	10	(
FOR_INIT	5545:7	5545:10	10	i = 0 ;
EXPR	5545:7	5545:7	11	i = 0
ASSIGN	5545:7	5545:9	12	i = 0
LVAL	5545:7	5545:7	13	i
FIELD	5545:7	5545:7	14	i
LEAF_NODE	5545:7	5545:7	15	i
ASSIGN_OP	5545:8	5545:8	13	=
LEAF_NODE	5545:8	5545:8	14	=
RVAL	5545:9	5545:9	13	0
FIELD	5545:9	5545:9	14	0
LEAF_NODE	5545:9	5545:9	15	0
LEAF_NODE	5545:10	5545:10	11	;
CONDITION	5545:12	5545:12	10	i < t2p -> tiff_transferfunctioncount
EXPR	5545:12	5545:16	11	i < t2p -> tiff_transferfunctioncount
FIELD	5545:12	5545:12	12	i
LEAF_NODE	5545:12	5545:12	13	i
REL_OPERATOR	5545:14	5545:14	12	<
LEAF_NODE	5545:14	5545:14	13	<
FIELD	5545:16	5545:21	12	t2p -> tiff_transferfunctioncount
LEAF_NODE	5545:16	5545:16	13	t2p
LEAF_NODE	5545:19	5545:19	13	->
LEAF_NODE	5545:21	5545:21	13	tiff_transferfunctioncount
LEAF_NODE	5545:47	5545:47	10	;
FOR_EXPR	5545:49	5545:49	10	i ++
EXPR	5545:49	5545:49	11	i ++
FIELD	5545:49	5545:50	12	i ++
LEAF_NODE	5545:49	5545:49	13	i
LEAF_NODE	5545:50	5545:50	13	++
LEAF_NODE	5545:52	5545:52	10	)
STATEMENTS	5545:53	5557:3	10	
LEAF_NODE	5545:53	5545:53	11	{
STATEMENTS	5546:4	5556:4	11	
EXPR_STATEMENT	5546:4	5546:54	12	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5546:4	5546:4	13	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5546:4	5546:47	14	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5546:4	5546:4	15	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5546:4	5546:45	16	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5546:4	5546:4	17	t2p
LEAF_NODE	5546:7	5546:7	17	->
LEAF_NODE	5546:9	5546:9	17	pdf_xrefoffsets
LEAF_NODE	5546:24	5546:24	17	[
EXPR	5546:25	5546:25	17	t2p -> pdf_xrefcount ++
FIELD	5546:25	5546:43	18	t2p -> pdf_xrefcount ++
LEAF_NODE	5546:25	5546:25	19	t2p
LEAF_NODE	5546:28	5546:28	19	->
LEAF_NODE	5546:30	5546:30	19	pdf_xrefcount
LEAF_NODE	5546:43	5546:43	19	++
LEAF_NODE	5546:45	5546:45	17	]
ASSIGN_OP	5546:46	5546:46	15	=
LEAF_NODE	5546:46	5546:46	16	=
RVAL	5546:47	5546:47	15	written
FIELD	5546:47	5546:47	16	written
LEAF_NODE	5546:47	5546:47	17	written
LEAF_NODE	5546:54	5546:54	13	;
EXPR_STATEMENT	5547:4	5547:66	12	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5547:4	5547:4	13	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5547:4	5547:15	14	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5547:4	5547:4	15	written
FIELD	5547:4	5547:4	16	written
LEAF_NODE	5547:4	5547:4	17	written
ASSIGN_OP	5547:12	5547:12	15	+=
LEAF_NODE	5547:12	5547:12	16	+=
RVAL	5547:15	5547:15	15	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5547:15	5547:65	16	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5547:15	5547:15	17	t2p_write_pdf_obj_start
LEAF_NODE	5547:15	5547:15	18	t2p_write_pdf_obj_start
LEAF_NODE	5547:38	5547:38	17	(
ARGUMENT	5547:39	5547:39	17	t2p -> pdf_xrefcount
FIELD	5547:39	5547:44	18	t2p -> pdf_xrefcount
LEAF_NODE	5547:39	5547:39	19	t2p
LEAF_NODE	5547:42	5547:42	19	->
LEAF_NODE	5547:44	5547:44	19	pdf_xrefcount
LEAF_NODE	5547:57	5547:57	17	,
ARGUMENT	5547:59	5547:59	17	output
FIELD	5547:59	5547:59	18	output
LEAF_NODE	5547:59	5547:59	19	output
LEAF_NODE	5547:65	5547:65	17	)
LEAF_NODE	5547:66	5547:66	13	;
EXPR_STATEMENT	5548:4	5548:54	12	written += t2p_write_pdf_stream_dict_start ( output ) ;
EXPR	5548:4	5548:4	13	written += t2p_write_pdf_stream_dict_start ( output )
ASSIGN	5548:4	5548:15	14	written += t2p_write_pdf_stream_dict_start ( output )
LVAL	5548:4	5548:4	15	written
FIELD	5548:4	5548:4	16	written
LEAF_NODE	5548:4	5548:4	17	written
ASSIGN_OP	5548:12	5548:12	15	+=
LEAF_NODE	5548:12	5548:12	16	+=
RVAL	5548:15	5548:15	15	t2p_write_pdf_stream_dict_start ( output )
FUNCTION_CALL	5548:15	5548:53	16	t2p_write_pdf_stream_dict_start ( output )
CALLEE	5548:15	5548:15	17	t2p_write_pdf_stream_dict_start
LEAF_NODE	5548:15	5548:15	18	t2p_write_pdf_stream_dict_start
LEAF_NODE	5548:46	5548:46	17	(
ARGUMENT	5548:47	5548:47	17	output
FIELD	5548:47	5548:47	18	output
LEAF_NODE	5548:47	5548:47	19	output
LEAF_NODE	5548:53	5548:53	17	)
LEAF_NODE	5548:54	5548:54	13	;
EXPR_STATEMENT	5549:4	5549:58	12	written += t2p_write_pdf_transfer_dict ( t2p , output , i ) ;
EXPR	5549:4	5549:4	13	written += t2p_write_pdf_transfer_dict ( t2p , output , i )
ASSIGN	5549:4	5549:15	14	written += t2p_write_pdf_transfer_dict ( t2p , output , i )
LVAL	5549:4	5549:4	15	written
FIELD	5549:4	5549:4	16	written
LEAF_NODE	5549:4	5549:4	17	written
ASSIGN_OP	5549:12	5549:12	15	+=
LEAF_NODE	5549:12	5549:12	16	+=
RVAL	5549:15	5549:15	15	t2p_write_pdf_transfer_dict ( t2p , output , i )
FUNCTION_CALL	5549:15	5549:57	16	t2p_write_pdf_transfer_dict ( t2p , output , i )
CALLEE	5549:15	5549:15	17	t2p_write_pdf_transfer_dict
LEAF_NODE	5549:15	5549:15	18	t2p_write_pdf_transfer_dict
LEAF_NODE	5549:42	5549:42	17	(
ARGUMENT	5549:43	5549:43	17	t2p
FIELD	5549:43	5549:43	18	t2p
LEAF_NODE	5549:43	5549:43	19	t2p
LEAF_NODE	5549:46	5549:46	17	,
ARGUMENT	5549:48	5549:48	17	output
FIELD	5549:48	5549:48	18	output
LEAF_NODE	5549:48	5549:48	19	output
LEAF_NODE	5549:54	5549:54	17	,
ARGUMENT	5549:56	5549:56	17	i
FIELD	5549:56	5549:56	18	i
LEAF_NODE	5549:56	5549:56	19	i
LEAF_NODE	5549:57	5549:57	17	)
LEAF_NODE	5549:58	5549:58	13	;
EXPR_STATEMENT	5550:4	5550:52	12	written += t2p_write_pdf_stream_dict_end ( output ) ;
EXPR	5550:4	5550:4	13	written += t2p_write_pdf_stream_dict_end ( output )
ASSIGN	5550:4	5550:15	14	written += t2p_write_pdf_stream_dict_end ( output )
LVAL	5550:4	5550:4	15	written
FIELD	5550:4	5550:4	16	written
LEAF_NODE	5550:4	5550:4	17	written
ASSIGN_OP	5550:12	5550:12	15	+=
LEAF_NODE	5550:12	5550:12	16	+=
RVAL	5550:15	5550:15	15	t2p_write_pdf_stream_dict_end ( output )
FUNCTION_CALL	5550:15	5550:51	16	t2p_write_pdf_stream_dict_end ( output )
CALLEE	5550:15	5550:15	17	t2p_write_pdf_stream_dict_end
LEAF_NODE	5550:15	5550:15	18	t2p_write_pdf_stream_dict_end
LEAF_NODE	5550:44	5550:44	17	(
ARGUMENT	5550:45	5550:45	17	output
FIELD	5550:45	5550:45	18	output
LEAF_NODE	5550:45	5550:45	19	output
LEAF_NODE	5550:51	5550:51	17	)
LEAF_NODE	5550:52	5550:52	13	;
EXPR_STATEMENT	5551:4	5551:49	12	written += t2p_write_pdf_stream_start ( output ) ;
EXPR	5551:4	5551:4	13	written += t2p_write_pdf_stream_start ( output )
ASSIGN	5551:4	5551:15	14	written += t2p_write_pdf_stream_start ( output )
LVAL	5551:4	5551:4	15	written
FIELD	5551:4	5551:4	16	written
LEAF_NODE	5551:4	5551:4	17	written
ASSIGN_OP	5551:12	5551:12	15	+=
LEAF_NODE	5551:12	5551:12	16	+=
RVAL	5551:15	5551:15	15	t2p_write_pdf_stream_start ( output )
FUNCTION_CALL	5551:15	5551:48	16	t2p_write_pdf_stream_start ( output )
CALLEE	5551:15	5551:15	17	t2p_write_pdf_stream_start
LEAF_NODE	5551:15	5551:15	18	t2p_write_pdf_stream_start
LEAF_NODE	5551:41	5551:41	17	(
ARGUMENT	5551:42	5551:42	17	output
FIELD	5551:42	5551:42	18	output
LEAF_NODE	5551:42	5551:42	19	output
LEAF_NODE	5551:48	5551:48	17	)
LEAF_NODE	5551:49	5551:49	13	;
EXPR_STATEMENT	5553:4	5553:60	12	written += t2p_write_pdf_transfer_stream ( t2p , output , i ) ;
EXPR	5553:4	5553:4	13	written += t2p_write_pdf_transfer_stream ( t2p , output , i )
ASSIGN	5553:4	5553:15	14	written += t2p_write_pdf_transfer_stream ( t2p , output , i )
LVAL	5553:4	5553:4	15	written
FIELD	5553:4	5553:4	16	written
LEAF_NODE	5553:4	5553:4	17	written
ASSIGN_OP	5553:12	5553:12	15	+=
LEAF_NODE	5553:12	5553:12	16	+=
RVAL	5553:15	5553:15	15	t2p_write_pdf_transfer_stream ( t2p , output , i )
FUNCTION_CALL	5553:15	5553:59	16	t2p_write_pdf_transfer_stream ( t2p , output , i )
CALLEE	5553:15	5553:15	17	t2p_write_pdf_transfer_stream
LEAF_NODE	5553:15	5553:15	18	t2p_write_pdf_transfer_stream
LEAF_NODE	5553:44	5553:44	17	(
ARGUMENT	5553:45	5553:45	17	t2p
FIELD	5553:45	5553:45	18	t2p
LEAF_NODE	5553:45	5553:45	19	t2p
LEAF_NODE	5553:48	5553:48	17	,
ARGUMENT	5553:50	5553:50	17	output
FIELD	5553:50	5553:50	18	output
LEAF_NODE	5553:50	5553:50	19	output
LEAF_NODE	5553:56	5553:56	17	,
ARGUMENT	5553:58	5553:58	17	i
FIELD	5553:58	5553:58	18	i
LEAF_NODE	5553:58	5553:58	19	i
LEAF_NODE	5553:59	5553:59	17	)
LEAF_NODE	5553:60	5553:60	13	;
EXPR_STATEMENT	5555:4	5555:47	12	written += t2p_write_pdf_stream_end ( output ) ;
EXPR	5555:4	5555:4	13	written += t2p_write_pdf_stream_end ( output )
ASSIGN	5555:4	5555:15	14	written += t2p_write_pdf_stream_end ( output )
LVAL	5555:4	5555:4	15	written
FIELD	5555:4	5555:4	16	written
LEAF_NODE	5555:4	5555:4	17	written
ASSIGN_OP	5555:12	5555:12	15	+=
LEAF_NODE	5555:12	5555:12	16	+=
RVAL	5555:15	5555:15	15	t2p_write_pdf_stream_end ( output )
FUNCTION_CALL	5555:15	5555:46	16	t2p_write_pdf_stream_end ( output )
CALLEE	5555:15	5555:15	17	t2p_write_pdf_stream_end
LEAF_NODE	5555:15	5555:15	18	t2p_write_pdf_stream_end
LEAF_NODE	5555:39	5555:39	17	(
ARGUMENT	5555:40	5555:40	17	output
FIELD	5555:40	5555:40	18	output
LEAF_NODE	5555:40	5555:40	19	output
LEAF_NODE	5555:46	5555:46	17	)
LEAF_NODE	5555:47	5555:47	13	;
EXPR_STATEMENT	5556:4	5556:44	12	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5556:4	5556:4	13	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5556:4	5556:15	14	written += t2p_write_pdf_obj_end ( output )
LVAL	5556:4	5556:4	15	written
FIELD	5556:4	5556:4	16	written
LEAF_NODE	5556:4	5556:4	17	written
ASSIGN_OP	5556:12	5556:12	15	+=
LEAF_NODE	5556:12	5556:12	16	+=
RVAL	5556:15	5556:15	15	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5556:15	5556:43	16	t2p_write_pdf_obj_end ( output )
CALLEE	5556:15	5556:15	17	t2p_write_pdf_obj_end
LEAF_NODE	5556:15	5556:15	18	t2p_write_pdf_obj_end
LEAF_NODE	5556:36	5556:36	17	(
ARGUMENT	5556:37	5556:37	17	output
FIELD	5556:37	5556:37	18	output
LEAF_NODE	5556:37	5556:37	19	output
LEAF_NODE	5556:43	5556:43	17	)
LEAF_NODE	5556:44	5556:44	13	;
LEAF_NODE	5557:3	5557:3	11	}
LEAF_NODE	5558:2	5558:2	8	}
SELECTION	5559:2	5559:50	6	
KEYWORD	5559:2	5559:2	7	if
LEAF_NODE	5559:2	5559:2	8	if
LEAF_NODE	5559:4	5559:4	7	(
CONDITION	5559:6	5559:6	7	( t2p -> pdf_colorspace & T2P_CS_PALETTE ) != 0
EXPR	5559:6	5559:48	8	( t2p -> pdf_colorspace & T2P_CS_PALETTE ) != 0
LEAF_NODE	5559:6	5559:6	9	(
FIELD	5559:7	5559:12	9	t2p -> pdf_colorspace
LEAF_NODE	5559:7	5559:7	10	t2p
LEAF_NODE	5559:10	5559:10	10	->
LEAF_NODE	5559:12	5559:12	10	pdf_colorspace
LEAF_NODE	5559:27	5559:27	9	&
FIELD	5559:29	5559:29	9	T2P_CS_PALETTE
LEAF_NODE	5559:29	5559:29	10	T2P_CS_PALETTE
LEAF_NODE	5559:43	5559:43	9	)
EQ_OPERATOR	5559:45	5559:45	9	!=
LEAF_NODE	5559:45	5559:45	10	!=
FIELD	5559:48	5559:48	9	0
LEAF_NODE	5559:48	5559:48	10	0
LEAF_NODE	5559:49	5559:49	7	)
STATEMENTS	5559:50	5572:2	7	
LEAF_NODE	5559:50	5559:50	8	{
STATEMENTS	5560:3	5571:3	8	
EXPR_STATEMENT	5560:3	5560:53	9	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5560:3	5560:3	10	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5560:3	5560:46	11	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5560:3	5560:3	12	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5560:3	5560:44	13	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5560:3	5560:3	14	t2p
LEAF_NODE	5560:6	5560:6	14	->
LEAF_NODE	5560:8	5560:8	14	pdf_xrefoffsets
LEAF_NODE	5560:23	5560:23	14	[
EXPR	5560:24	5560:24	14	t2p -> pdf_xrefcount ++
FIELD	5560:24	5560:42	15	t2p -> pdf_xrefcount ++
LEAF_NODE	5560:24	5560:24	16	t2p
LEAF_NODE	5560:27	5560:27	16	->
LEAF_NODE	5560:29	5560:29	16	pdf_xrefcount
LEAF_NODE	5560:42	5560:42	16	++
LEAF_NODE	5560:44	5560:44	14	]
ASSIGN_OP	5560:45	5560:45	12	=
LEAF_NODE	5560:45	5560:45	13	=
RVAL	5560:46	5560:46	12	written
FIELD	5560:46	5560:46	13	written
LEAF_NODE	5560:46	5560:46	14	written
LEAF_NODE	5560:53	5560:53	10	;
EXPR_STATEMENT	5561:3	5561:40	9	t2p -> pdf_palettecs = t2p -> pdf_xrefcount ;
EXPR	5561:3	5561:3	10	t2p -> pdf_palettecs = t2p -> pdf_xrefcount
ASSIGN	5561:3	5561:22	11	t2p -> pdf_palettecs = t2p -> pdf_xrefcount
LVAL	5561:3	5561:3	12	t2p -> pdf_palettecs
FIELD	5561:3	5561:8	13	t2p -> pdf_palettecs
LEAF_NODE	5561:3	5561:3	14	t2p
LEAF_NODE	5561:6	5561:6	14	->
LEAF_NODE	5561:8	5561:8	14	pdf_palettecs
ASSIGN_OP	5561:21	5561:21	12	=
LEAF_NODE	5561:21	5561:21	13	=
RVAL	5561:22	5561:22	12	t2p -> pdf_xrefcount
FIELD	5561:22	5561:27	13	t2p -> pdf_xrefcount
LEAF_NODE	5561:22	5561:22	14	t2p
LEAF_NODE	5561:25	5561:25	14	->
LEAF_NODE	5561:27	5561:27	14	pdf_xrefcount
LEAF_NODE	5561:40	5561:40	10	;
EXPR_STATEMENT	5562:3	5562:65	9	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5562:3	5562:3	10	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5562:3	5562:14	11	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5562:3	5562:3	12	written
FIELD	5562:3	5562:3	13	written
LEAF_NODE	5562:3	5562:3	14	written
ASSIGN_OP	5562:11	5562:11	12	+=
LEAF_NODE	5562:11	5562:11	13	+=
RVAL	5562:14	5562:14	12	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5562:14	5562:64	13	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5562:14	5562:14	14	t2p_write_pdf_obj_start
LEAF_NODE	5562:14	5562:14	15	t2p_write_pdf_obj_start
LEAF_NODE	5562:37	5562:37	14	(
ARGUMENT	5562:38	5562:38	14	t2p -> pdf_xrefcount
FIELD	5562:38	5562:43	15	t2p -> pdf_xrefcount
LEAF_NODE	5562:38	5562:38	16	t2p
LEAF_NODE	5562:41	5562:41	16	->
LEAF_NODE	5562:43	5562:43	16	pdf_xrefcount
LEAF_NODE	5562:56	5562:56	14	,
ARGUMENT	5562:58	5562:58	14	output
FIELD	5562:58	5562:58	15	output
LEAF_NODE	5562:58	5562:58	16	output
LEAF_NODE	5562:64	5562:64	14	)
LEAF_NODE	5562:65	5562:65	10	;
EXPR_STATEMENT	5563:3	5563:53	9	written += t2p_write_pdf_stream_dict_start ( output ) ;
EXPR	5563:3	5563:3	10	written += t2p_write_pdf_stream_dict_start ( output )
ASSIGN	5563:3	5563:14	11	written += t2p_write_pdf_stream_dict_start ( output )
LVAL	5563:3	5563:3	12	written
FIELD	5563:3	5563:3	13	written
LEAF_NODE	5563:3	5563:3	14	written
ASSIGN_OP	5563:11	5563:11	12	+=
LEAF_NODE	5563:11	5563:11	13	+=
RVAL	5563:14	5563:14	12	t2p_write_pdf_stream_dict_start ( output )
FUNCTION_CALL	5563:14	5563:52	13	t2p_write_pdf_stream_dict_start ( output )
CALLEE	5563:14	5563:14	14	t2p_write_pdf_stream_dict_start
LEAF_NODE	5563:14	5563:14	15	t2p_write_pdf_stream_dict_start
LEAF_NODE	5563:45	5563:45	14	(
ARGUMENT	5563:46	5563:46	14	output
FIELD	5563:46	5563:46	15	output
LEAF_NODE	5563:46	5563:46	16	output
LEAF_NODE	5563:52	5563:52	14	)
LEAF_NODE	5563:53	5563:53	10	;
EXPR_STATEMENT	5564:3	5564:72	9	written += t2p_write_pdf_stream_dict ( t2p -> pdf_palettesize , 0 , output ) ;
EXPR	5564:3	5564:3	10	written += t2p_write_pdf_stream_dict ( t2p -> pdf_palettesize , 0 , output )
ASSIGN	5564:3	5564:14	11	written += t2p_write_pdf_stream_dict ( t2p -> pdf_palettesize , 0 , output )
LVAL	5564:3	5564:3	12	written
FIELD	5564:3	5564:3	13	written
LEAF_NODE	5564:3	5564:3	14	written
ASSIGN_OP	5564:11	5564:11	12	+=
LEAF_NODE	5564:11	5564:11	13	+=
RVAL	5564:14	5564:14	12	t2p_write_pdf_stream_dict ( t2p -> pdf_palettesize , 0 , output )
FUNCTION_CALL	5564:14	5564:71	13	t2p_write_pdf_stream_dict ( t2p -> pdf_palettesize , 0 , output )
CALLEE	5564:14	5564:14	14	t2p_write_pdf_stream_dict
LEAF_NODE	5564:14	5564:14	15	t2p_write_pdf_stream_dict
LEAF_NODE	5564:39	5564:39	14	(
ARGUMENT	5564:40	5564:40	14	t2p -> pdf_palettesize
FIELD	5564:40	5564:45	15	t2p -> pdf_palettesize
LEAF_NODE	5564:40	5564:40	16	t2p
LEAF_NODE	5564:43	5564:43	16	->
LEAF_NODE	5564:45	5564:45	16	pdf_palettesize
LEAF_NODE	5564:60	5564:60	14	,
ARGUMENT	5564:62	5564:62	14	0
FIELD	5564:62	5564:62	15	0
LEAF_NODE	5564:62	5564:62	16	0
LEAF_NODE	5564:63	5564:63	14	,
ARGUMENT	5564:65	5564:65	14	output
FIELD	5564:65	5564:65	15	output
LEAF_NODE	5564:65	5564:65	16	output
LEAF_NODE	5564:71	5564:71	14	)
LEAF_NODE	5564:72	5564:72	10	;
EXPR_STATEMENT	5565:3	5565:51	9	written += t2p_write_pdf_stream_dict_end ( output ) ;
EXPR	5565:3	5565:3	10	written += t2p_write_pdf_stream_dict_end ( output )
ASSIGN	5565:3	5565:14	11	written += t2p_write_pdf_stream_dict_end ( output )
LVAL	5565:3	5565:3	12	written
FIELD	5565:3	5565:3	13	written
LEAF_NODE	5565:3	5565:3	14	written
ASSIGN_OP	5565:11	5565:11	12	+=
LEAF_NODE	5565:11	5565:11	13	+=
RVAL	5565:14	5565:14	12	t2p_write_pdf_stream_dict_end ( output )
FUNCTION_CALL	5565:14	5565:50	13	t2p_write_pdf_stream_dict_end ( output )
CALLEE	5565:14	5565:14	14	t2p_write_pdf_stream_dict_end
LEAF_NODE	5565:14	5565:14	15	t2p_write_pdf_stream_dict_end
LEAF_NODE	5565:43	5565:43	14	(
ARGUMENT	5565:44	5565:44	14	output
FIELD	5565:44	5565:44	15	output
LEAF_NODE	5565:44	5565:44	16	output
LEAF_NODE	5565:50	5565:50	14	)
LEAF_NODE	5565:51	5565:51	10	;
EXPR_STATEMENT	5566:3	5566:48	9	written += t2p_write_pdf_stream_start ( output ) ;
EXPR	5566:3	5566:3	10	written += t2p_write_pdf_stream_start ( output )
ASSIGN	5566:3	5566:14	11	written += t2p_write_pdf_stream_start ( output )
LVAL	5566:3	5566:3	12	written
FIELD	5566:3	5566:3	13	written
LEAF_NODE	5566:3	5566:3	14	written
ASSIGN_OP	5566:11	5566:11	12	+=
LEAF_NODE	5566:11	5566:11	13	+=
RVAL	5566:14	5566:14	12	t2p_write_pdf_stream_start ( output )
FUNCTION_CALL	5566:14	5566:47	13	t2p_write_pdf_stream_start ( output )
CALLEE	5566:14	5566:14	14	t2p_write_pdf_stream_start
LEAF_NODE	5566:14	5566:14	15	t2p_write_pdf_stream_start
LEAF_NODE	5566:40	5566:40	14	(
ARGUMENT	5566:41	5566:41	14	output
FIELD	5566:41	5566:41	15	output
LEAF_NODE	5566:41	5566:41	16	output
LEAF_NODE	5566:47	5566:47	14	)
LEAF_NODE	5566:48	5566:48	10	;
EXPR_STATEMENT	5568:3	5568:65	9	written += t2p_write_pdf_xobject_palettecs_stream ( t2p , output ) ;
EXPR	5568:3	5568:3	10	written += t2p_write_pdf_xobject_palettecs_stream ( t2p , output )
ASSIGN	5568:3	5568:14	11	written += t2p_write_pdf_xobject_palettecs_stream ( t2p , output )
LVAL	5568:3	5568:3	12	written
FIELD	5568:3	5568:3	13	written
LEAF_NODE	5568:3	5568:3	14	written
ASSIGN_OP	5568:11	5568:11	12	+=
LEAF_NODE	5568:11	5568:11	13	+=
RVAL	5568:14	5568:14	12	t2p_write_pdf_xobject_palettecs_stream ( t2p , output )
FUNCTION_CALL	5568:14	5568:64	13	t2p_write_pdf_xobject_palettecs_stream ( t2p , output )
CALLEE	5568:14	5568:14	14	t2p_write_pdf_xobject_palettecs_stream
LEAF_NODE	5568:14	5568:14	15	t2p_write_pdf_xobject_palettecs_stream
LEAF_NODE	5568:52	5568:52	14	(
ARGUMENT	5568:53	5568:53	14	t2p
FIELD	5568:53	5568:53	15	t2p
LEAF_NODE	5568:53	5568:53	16	t2p
LEAF_NODE	5568:56	5568:56	14	,
ARGUMENT	5568:58	5568:58	14	output
FIELD	5568:58	5568:58	15	output
LEAF_NODE	5568:58	5568:58	16	output
LEAF_NODE	5568:64	5568:64	14	)
LEAF_NODE	5568:65	5568:65	10	;
EXPR_STATEMENT	5570:3	5570:46	9	written += t2p_write_pdf_stream_end ( output ) ;
EXPR	5570:3	5570:3	10	written += t2p_write_pdf_stream_end ( output )
ASSIGN	5570:3	5570:14	11	written += t2p_write_pdf_stream_end ( output )
LVAL	5570:3	5570:3	12	written
FIELD	5570:3	5570:3	13	written
LEAF_NODE	5570:3	5570:3	14	written
ASSIGN_OP	5570:11	5570:11	12	+=
LEAF_NODE	5570:11	5570:11	13	+=
RVAL	5570:14	5570:14	12	t2p_write_pdf_stream_end ( output )
FUNCTION_CALL	5570:14	5570:45	13	t2p_write_pdf_stream_end ( output )
CALLEE	5570:14	5570:14	14	t2p_write_pdf_stream_end
LEAF_NODE	5570:14	5570:14	15	t2p_write_pdf_stream_end
LEAF_NODE	5570:38	5570:38	14	(
ARGUMENT	5570:39	5570:39	14	output
FIELD	5570:39	5570:39	15	output
LEAF_NODE	5570:39	5570:39	16	output
LEAF_NODE	5570:45	5570:45	14	)
LEAF_NODE	5570:46	5570:46	10	;
EXPR_STATEMENT	5571:3	5571:43	9	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5571:3	5571:3	10	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5571:3	5571:14	11	written += t2p_write_pdf_obj_end ( output )
LVAL	5571:3	5571:3	12	written
FIELD	5571:3	5571:3	13	written
LEAF_NODE	5571:3	5571:3	14	written
ASSIGN_OP	5571:11	5571:11	12	+=
LEAF_NODE	5571:11	5571:11	13	+=
RVAL	5571:14	5571:14	12	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5571:14	5571:42	13	t2p_write_pdf_obj_end ( output )
CALLEE	5571:14	5571:14	14	t2p_write_pdf_obj_end
LEAF_NODE	5571:14	5571:14	15	t2p_write_pdf_obj_end
LEAF_NODE	5571:35	5571:35	14	(
ARGUMENT	5571:36	5571:36	14	output
FIELD	5571:36	5571:36	15	output
LEAF_NODE	5571:36	5571:36	16	output
LEAF_NODE	5571:42	5571:42	14	)
LEAF_NODE	5571:43	5571:43	10	;
LEAF_NODE	5572:2	5572:2	8	}
SELECTION	5573:2	5573:51	6	
KEYWORD	5573:2	5573:2	7	if
LEAF_NODE	5573:2	5573:2	8	if
LEAF_NODE	5573:4	5573:4	7	(
CONDITION	5573:6	5573:6	7	( t2p -> pdf_colorspace & T2P_CS_ICCBASED ) != 0
EXPR	5573:6	5573:49	8	( t2p -> pdf_colorspace & T2P_CS_ICCBASED ) != 0
LEAF_NODE	5573:6	5573:6	9	(
FIELD	5573:7	5573:12	9	t2p -> pdf_colorspace
LEAF_NODE	5573:7	5573:7	10	t2p
LEAF_NODE	5573:10	5573:10	10	->
LEAF_NODE	5573:12	5573:12	10	pdf_colorspace
LEAF_NODE	5573:27	5573:27	9	&
FIELD	5573:29	5573:29	9	T2P_CS_ICCBASED
LEAF_NODE	5573:29	5573:29	10	T2P_CS_ICCBASED
LEAF_NODE	5573:44	5573:44	9	)
EQ_OPERATOR	5573:46	5573:46	9	!=
LEAF_NODE	5573:46	5573:46	10	!=
FIELD	5573:49	5573:49	9	0
LEAF_NODE	5573:49	5573:49	10	0
LEAF_NODE	5573:50	5573:50	7	)
STATEMENTS	5573:51	5586:2	7	
LEAF_NODE	5573:51	5573:51	8	{
STATEMENTS	5574:3	5585:3	8	
EXPR_STATEMENT	5574:3	5574:53	9	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5574:3	5574:3	10	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5574:3	5574:46	11	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5574:3	5574:3	12	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5574:3	5574:44	13	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5574:3	5574:3	14	t2p
LEAF_NODE	5574:6	5574:6	14	->
LEAF_NODE	5574:8	5574:8	14	pdf_xrefoffsets
LEAF_NODE	5574:23	5574:23	14	[
EXPR	5574:24	5574:24	14	t2p -> pdf_xrefcount ++
FIELD	5574:24	5574:42	15	t2p -> pdf_xrefcount ++
LEAF_NODE	5574:24	5574:24	16	t2p
LEAF_NODE	5574:27	5574:27	16	->
LEAF_NODE	5574:29	5574:29	16	pdf_xrefcount
LEAF_NODE	5574:42	5574:42	16	++
LEAF_NODE	5574:44	5574:44	14	]
ASSIGN_OP	5574:45	5574:45	12	=
LEAF_NODE	5574:45	5574:45	13	=
RVAL	5574:46	5574:46	12	written
FIELD	5574:46	5574:46	13	written
LEAF_NODE	5574:46	5574:46	14	written
LEAF_NODE	5574:53	5574:53	10	;
EXPR_STATEMENT	5575:3	5575:36	9	t2p -> pdf_icccs = t2p -> pdf_xrefcount ;
EXPR	5575:3	5575:3	10	t2p -> pdf_icccs = t2p -> pdf_xrefcount
ASSIGN	5575:3	5575:18	11	t2p -> pdf_icccs = t2p -> pdf_xrefcount
LVAL	5575:3	5575:3	12	t2p -> pdf_icccs
FIELD	5575:3	5575:8	13	t2p -> pdf_icccs
LEAF_NODE	5575:3	5575:3	14	t2p
LEAF_NODE	5575:6	5575:6	14	->
LEAF_NODE	5575:8	5575:8	14	pdf_icccs
ASSIGN_OP	5575:17	5575:17	12	=
LEAF_NODE	5575:17	5575:17	13	=
RVAL	5575:18	5575:18	12	t2p -> pdf_xrefcount
FIELD	5575:18	5575:23	13	t2p -> pdf_xrefcount
LEAF_NODE	5575:18	5575:18	14	t2p
LEAF_NODE	5575:21	5575:21	14	->
LEAF_NODE	5575:23	5575:23	14	pdf_xrefcount
LEAF_NODE	5575:36	5575:36	10	;
EXPR_STATEMENT	5576:3	5576:65	9	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5576:3	5576:3	10	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5576:3	5576:14	11	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5576:3	5576:3	12	written
FIELD	5576:3	5576:3	13	written
LEAF_NODE	5576:3	5576:3	14	written
ASSIGN_OP	5576:11	5576:11	12	+=
LEAF_NODE	5576:11	5576:11	13	+=
RVAL	5576:14	5576:14	12	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5576:14	5576:64	13	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5576:14	5576:14	14	t2p_write_pdf_obj_start
LEAF_NODE	5576:14	5576:14	15	t2p_write_pdf_obj_start
LEAF_NODE	5576:37	5576:37	14	(
ARGUMENT	5576:38	5576:38	14	t2p -> pdf_xrefcount
FIELD	5576:38	5576:43	15	t2p -> pdf_xrefcount
LEAF_NODE	5576:38	5576:38	16	t2p
LEAF_NODE	5576:41	5576:41	16	->
LEAF_NODE	5576:43	5576:43	16	pdf_xrefcount
LEAF_NODE	5576:56	5576:56	14	,
ARGUMENT	5576:58	5576:58	14	output
FIELD	5576:58	5576:58	15	output
LEAF_NODE	5576:58	5576:58	16	output
LEAF_NODE	5576:64	5576:64	14	)
LEAF_NODE	5576:65	5576:65	10	;
EXPR_STATEMENT	5577:3	5577:53	9	written += t2p_write_pdf_stream_dict_start ( output ) ;
EXPR	5577:3	5577:3	10	written += t2p_write_pdf_stream_dict_start ( output )
ASSIGN	5577:3	5577:14	11	written += t2p_write_pdf_stream_dict_start ( output )
LVAL	5577:3	5577:3	12	written
FIELD	5577:3	5577:3	13	written
LEAF_NODE	5577:3	5577:3	14	written
ASSIGN_OP	5577:11	5577:11	12	+=
LEAF_NODE	5577:11	5577:11	13	+=
RVAL	5577:14	5577:14	12	t2p_write_pdf_stream_dict_start ( output )
FUNCTION_CALL	5577:14	5577:52	13	t2p_write_pdf_stream_dict_start ( output )
CALLEE	5577:14	5577:14	14	t2p_write_pdf_stream_dict_start
LEAF_NODE	5577:14	5577:14	15	t2p_write_pdf_stream_dict_start
LEAF_NODE	5577:45	5577:45	14	(
ARGUMENT	5577:46	5577:46	14	output
FIELD	5577:46	5577:46	15	output
LEAF_NODE	5577:46	5577:46	16	output
LEAF_NODE	5577:52	5577:52	14	)
LEAF_NODE	5577:53	5577:53	10	;
EXPR_STATEMENT	5578:3	5578:59	9	written += t2p_write_pdf_xobject_icccs_dict ( t2p , output ) ;
EXPR	5578:3	5578:3	10	written += t2p_write_pdf_xobject_icccs_dict ( t2p , output )
ASSIGN	5578:3	5578:14	11	written += t2p_write_pdf_xobject_icccs_dict ( t2p , output )
LVAL	5578:3	5578:3	12	written
FIELD	5578:3	5578:3	13	written
LEAF_NODE	5578:3	5578:3	14	written
ASSIGN_OP	5578:11	5578:11	12	+=
LEAF_NODE	5578:11	5578:11	13	+=
RVAL	5578:14	5578:14	12	t2p_write_pdf_xobject_icccs_dict ( t2p , output )
FUNCTION_CALL	5578:14	5578:58	13	t2p_write_pdf_xobject_icccs_dict ( t2p , output )
CALLEE	5578:14	5578:14	14	t2p_write_pdf_xobject_icccs_dict
LEAF_NODE	5578:14	5578:14	15	t2p_write_pdf_xobject_icccs_dict
LEAF_NODE	5578:46	5578:46	14	(
ARGUMENT	5578:47	5578:47	14	t2p
FIELD	5578:47	5578:47	15	t2p
LEAF_NODE	5578:47	5578:47	16	t2p
LEAF_NODE	5578:50	5578:50	14	,
ARGUMENT	5578:52	5578:52	14	output
FIELD	5578:52	5578:52	15	output
LEAF_NODE	5578:52	5578:52	16	output
LEAF_NODE	5578:58	5578:58	14	)
LEAF_NODE	5578:59	5578:59	10	;
EXPR_STATEMENT	5579:3	5579:51	9	written += t2p_write_pdf_stream_dict_end ( output ) ;
EXPR	5579:3	5579:3	10	written += t2p_write_pdf_stream_dict_end ( output )
ASSIGN	5579:3	5579:14	11	written += t2p_write_pdf_stream_dict_end ( output )
LVAL	5579:3	5579:3	12	written
FIELD	5579:3	5579:3	13	written
LEAF_NODE	5579:3	5579:3	14	written
ASSIGN_OP	5579:11	5579:11	12	+=
LEAF_NODE	5579:11	5579:11	13	+=
RVAL	5579:14	5579:14	12	t2p_write_pdf_stream_dict_end ( output )
FUNCTION_CALL	5579:14	5579:50	13	t2p_write_pdf_stream_dict_end ( output )
CALLEE	5579:14	5579:14	14	t2p_write_pdf_stream_dict_end
LEAF_NODE	5579:14	5579:14	15	t2p_write_pdf_stream_dict_end
LEAF_NODE	5579:43	5579:43	14	(
ARGUMENT	5579:44	5579:44	14	output
FIELD	5579:44	5579:44	15	output
LEAF_NODE	5579:44	5579:44	16	output
LEAF_NODE	5579:50	5579:50	14	)
LEAF_NODE	5579:51	5579:51	10	;
EXPR_STATEMENT	5580:3	5580:48	9	written += t2p_write_pdf_stream_start ( output ) ;
EXPR	5580:3	5580:3	10	written += t2p_write_pdf_stream_start ( output )
ASSIGN	5580:3	5580:14	11	written += t2p_write_pdf_stream_start ( output )
LVAL	5580:3	5580:3	12	written
FIELD	5580:3	5580:3	13	written
LEAF_NODE	5580:3	5580:3	14	written
ASSIGN_OP	5580:11	5580:11	12	+=
LEAF_NODE	5580:11	5580:11	13	+=
RVAL	5580:14	5580:14	12	t2p_write_pdf_stream_start ( output )
FUNCTION_CALL	5580:14	5580:47	13	t2p_write_pdf_stream_start ( output )
CALLEE	5580:14	5580:14	14	t2p_write_pdf_stream_start
LEAF_NODE	5580:14	5580:14	15	t2p_write_pdf_stream_start
LEAF_NODE	5580:40	5580:40	14	(
ARGUMENT	5580:41	5580:41	14	output
FIELD	5580:41	5580:41	15	output
LEAF_NODE	5580:41	5580:41	16	output
LEAF_NODE	5580:47	5580:47	14	)
LEAF_NODE	5580:48	5580:48	10	;
EXPR_STATEMENT	5582:3	5582:61	9	written += t2p_write_pdf_xobject_icccs_stream ( t2p , output ) ;
EXPR	5582:3	5582:3	10	written += t2p_write_pdf_xobject_icccs_stream ( t2p , output )
ASSIGN	5582:3	5582:14	11	written += t2p_write_pdf_xobject_icccs_stream ( t2p , output )
LVAL	5582:3	5582:3	12	written
FIELD	5582:3	5582:3	13	written
LEAF_NODE	5582:3	5582:3	14	written
ASSIGN_OP	5582:11	5582:11	12	+=
LEAF_NODE	5582:11	5582:11	13	+=
RVAL	5582:14	5582:14	12	t2p_write_pdf_xobject_icccs_stream ( t2p , output )
FUNCTION_CALL	5582:14	5582:60	13	t2p_write_pdf_xobject_icccs_stream ( t2p , output )
CALLEE	5582:14	5582:14	14	t2p_write_pdf_xobject_icccs_stream
LEAF_NODE	5582:14	5582:14	15	t2p_write_pdf_xobject_icccs_stream
LEAF_NODE	5582:48	5582:48	14	(
ARGUMENT	5582:49	5582:49	14	t2p
FIELD	5582:49	5582:49	15	t2p
LEAF_NODE	5582:49	5582:49	16	t2p
LEAF_NODE	5582:52	5582:52	14	,
ARGUMENT	5582:54	5582:54	14	output
FIELD	5582:54	5582:54	15	output
LEAF_NODE	5582:54	5582:54	16	output
LEAF_NODE	5582:60	5582:60	14	)
LEAF_NODE	5582:61	5582:61	10	;
EXPR_STATEMENT	5584:3	5584:46	9	written += t2p_write_pdf_stream_end ( output ) ;
EXPR	5584:3	5584:3	10	written += t2p_write_pdf_stream_end ( output )
ASSIGN	5584:3	5584:14	11	written += t2p_write_pdf_stream_end ( output )
LVAL	5584:3	5584:3	12	written
FIELD	5584:3	5584:3	13	written
LEAF_NODE	5584:3	5584:3	14	written
ASSIGN_OP	5584:11	5584:11	12	+=
LEAF_NODE	5584:11	5584:11	13	+=
RVAL	5584:14	5584:14	12	t2p_write_pdf_stream_end ( output )
FUNCTION_CALL	5584:14	5584:45	13	t2p_write_pdf_stream_end ( output )
CALLEE	5584:14	5584:14	14	t2p_write_pdf_stream_end
LEAF_NODE	5584:14	5584:14	15	t2p_write_pdf_stream_end
LEAF_NODE	5584:38	5584:38	14	(
ARGUMENT	5584:39	5584:39	14	output
FIELD	5584:39	5584:39	15	output
LEAF_NODE	5584:39	5584:39	16	output
LEAF_NODE	5584:45	5584:45	14	)
LEAF_NODE	5584:46	5584:46	10	;
EXPR_STATEMENT	5585:3	5585:43	9	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5585:3	5585:3	10	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5585:3	5585:14	11	written += t2p_write_pdf_obj_end ( output )
LVAL	5585:3	5585:3	12	written
FIELD	5585:3	5585:3	13	written
LEAF_NODE	5585:3	5585:3	14	written
ASSIGN_OP	5585:11	5585:11	12	+=
LEAF_NODE	5585:11	5585:11	13	+=
RVAL	5585:14	5585:14	12	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5585:14	5585:42	13	t2p_write_pdf_obj_end ( output )
CALLEE	5585:14	5585:14	14	t2p_write_pdf_obj_end
LEAF_NODE	5585:14	5585:14	15	t2p_write_pdf_obj_end
LEAF_NODE	5585:35	5585:35	14	(
ARGUMENT	5585:36	5585:36	14	output
FIELD	5585:36	5585:36	15	output
LEAF_NODE	5585:36	5585:36	16	output
LEAF_NODE	5585:42	5585:42	14	)
LEAF_NODE	5585:43	5585:43	10	;
LEAF_NODE	5586:2	5586:2	8	}
SELECTION	5587:2	5587:56	6	
KEYWORD	5587:2	5587:2	7	if
LEAF_NODE	5587:2	5587:2	8	if
LEAF_NODE	5587:4	5587:4	7	(
CONDITION	5587:5	5587:5	7	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount != 0
EXPR	5587:5	5587:54	8	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount != 0
FIELD	5587:5	5587:36	9	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
LEAF_NODE	5587:5	5587:5	10	t2p
LEAF_NODE	5587:8	5587:8	10	->
LEAF_NODE	5587:10	5587:10	10	tiff_tiles
LEAF_NODE	5587:20	5587:20	10	[
EXPR	5587:21	5587:21	10	t2p -> pdf_page
FIELD	5587:21	5587:26	11	t2p -> pdf_page
LEAF_NODE	5587:21	5587:21	12	t2p
LEAF_NODE	5587:24	5587:24	12	->
LEAF_NODE	5587:26	5587:26	12	pdf_page
LEAF_NODE	5587:34	5587:34	10	]
LEAF_NODE	5587:35	5587:35	10	.
LEAF_NODE	5587:36	5587:36	10	tiles_tilecount
EQ_OPERATOR	5587:52	5587:52	9	!=
LEAF_NODE	5587:52	5587:52	10	!=
FIELD	5587:54	5587:54	9	0
LEAF_NODE	5587:54	5587:54	10	0
LEAF_NODE	5587:55	5587:55	7	)
STATEMENTS	5587:56	5611:2	7	
LEAF_NODE	5587:56	5587:56	8	{
STATEMENTS	5588:3	5588:3	8	
ITERATION	5588:3	5588:67	9	
KEYWORD	5588:3	5588:3	10	for
LEAF_NODE	5588:3	5588:3	11	for
LEAF_NODE	5588:6	5588:6	10	(
FOR_INIT	5588:7	5588:11	10	i2 = 0 ;
EXPR	5588:7	5588:7	11	i2 = 0
ASSIGN	5588:7	5588:10	12	i2 = 0
LVAL	5588:7	5588:7	13	i2
FIELD	5588:7	5588:7	14	i2
LEAF_NODE	5588:7	5588:7	15	i2
ASSIGN_OP	5588:9	5588:9	13	=
LEAF_NODE	5588:9	5588:9	14	=
RVAL	5588:10	5588:10	13	0
FIELD	5588:10	5588:10	14	0
LEAF_NODE	5588:10	5588:10	15	0
LEAF_NODE	5588:11	5588:11	11	;
CONDITION	5588:12	5588:12	10	i2 < t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
EXPR	5588:12	5588:15	11	i2 < t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
FIELD	5588:12	5588:12	12	i2
LEAF_NODE	5588:12	5588:12	13	i2
REL_OPERATOR	5588:14	5588:14	12	<
LEAF_NODE	5588:14	5588:14	13	<
FIELD	5588:15	5588:46	12	t2p -> tiff_tiles [ t2p -> pdf_page ] . tiles_tilecount
LEAF_NODE	5588:15	5588:15	13	t2p
LEAF_NODE	5588:18	5588:18	13	->
LEAF_NODE	5588:20	5588:20	13	tiff_tiles
LEAF_NODE	5588:30	5588:30	13	[
EXPR	5588:31	5588:31	13	t2p -> pdf_page
FIELD	5588:31	5588:36	14	t2p -> pdf_page
LEAF_NODE	5588:31	5588:31	15	t2p
LEAF_NODE	5588:34	5588:34	15	->
LEAF_NODE	5588:36	5588:36	15	pdf_page
LEAF_NODE	5588:44	5588:44	13	]
LEAF_NODE	5588:45	5588:45	13	.
LEAF_NODE	5588:46	5588:46	13	tiles_tilecount
LEAF_NODE	5588:61	5588:61	10	;
FOR_EXPR	5588:62	5588:62	10	i2 ++
EXPR	5588:62	5588:62	11	i2 ++
FIELD	5588:62	5588:64	12	i2 ++
LEAF_NODE	5588:62	5588:62	13	i2
LEAF_NODE	5588:64	5588:64	13	++
LEAF_NODE	5588:66	5588:66	10	)
STATEMENTS	5588:67	5610:3	10	
LEAF_NODE	5588:67	5588:67	11	{
STATEMENTS	5589:4	5609:4	11	
EXPR_STATEMENT	5589:4	5589:54	12	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5589:4	5589:4	13	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5589:4	5589:47	14	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5589:4	5589:4	15	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5589:4	5589:45	16	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5589:4	5589:4	17	t2p
LEAF_NODE	5589:7	5589:7	17	->
LEAF_NODE	5589:9	5589:9	17	pdf_xrefoffsets
LEAF_NODE	5589:24	5589:24	17	[
EXPR	5589:25	5589:25	17	t2p -> pdf_xrefcount ++
FIELD	5589:25	5589:43	18	t2p -> pdf_xrefcount ++
LEAF_NODE	5589:25	5589:25	19	t2p
LEAF_NODE	5589:28	5589:28	19	->
LEAF_NODE	5589:30	5589:30	19	pdf_xrefcount
LEAF_NODE	5589:43	5589:43	19	++
LEAF_NODE	5589:45	5589:45	17	]
ASSIGN_OP	5589:46	5589:46	15	=
LEAF_NODE	5589:46	5589:46	16	=
RVAL	5589:47	5589:47	15	written
FIELD	5589:47	5589:47	16	written
LEAF_NODE	5589:47	5589:47	17	written
LEAF_NODE	5589:54	5589:54	13	;
EXPR_STATEMENT	5590:4	5590:66	12	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5590:4	5590:4	13	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5590:4	5590:15	14	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5590:4	5590:4	15	written
FIELD	5590:4	5590:4	16	written
LEAF_NODE	5590:4	5590:4	17	written
ASSIGN_OP	5590:12	5590:12	15	+=
LEAF_NODE	5590:12	5590:12	16	+=
RVAL	5590:15	5590:15	15	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5590:15	5590:65	16	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5590:15	5590:15	17	t2p_write_pdf_obj_start
LEAF_NODE	5590:15	5590:15	18	t2p_write_pdf_obj_start
LEAF_NODE	5590:38	5590:38	17	(
ARGUMENT	5590:39	5590:39	17	t2p -> pdf_xrefcount
FIELD	5590:39	5590:44	18	t2p -> pdf_xrefcount
LEAF_NODE	5590:39	5590:39	19	t2p
LEAF_NODE	5590:42	5590:42	19	->
LEAF_NODE	5590:44	5590:44	19	pdf_xrefcount
LEAF_NODE	5590:57	5590:57	17	,
ARGUMENT	5590:59	5590:59	17	output
FIELD	5590:59	5590:59	18	output
LEAF_NODE	5590:59	5590:59	19	output
LEAF_NODE	5590:65	5590:65	17	)
LEAF_NODE	5590:66	5590:66	13	;
EXPR_STATEMENT	5591:4	5591:54	12	written += t2p_write_pdf_stream_dict_start ( output ) ;
EXPR	5591:4	5591:4	13	written += t2p_write_pdf_stream_dict_start ( output )
ASSIGN	5591:4	5591:15	14	written += t2p_write_pdf_stream_dict_start ( output )
LVAL	5591:4	5591:4	15	written
FIELD	5591:4	5591:4	16	written
LEAF_NODE	5591:4	5591:4	17	written
ASSIGN_OP	5591:12	5591:12	15	+=
LEAF_NODE	5591:12	5591:12	16	+=
RVAL	5591:15	5591:15	15	t2p_write_pdf_stream_dict_start ( output )
FUNCTION_CALL	5591:15	5591:53	16	t2p_write_pdf_stream_dict_start ( output )
CALLEE	5591:15	5591:15	17	t2p_write_pdf_stream_dict_start
LEAF_NODE	5591:15	5591:15	18	t2p_write_pdf_stream_dict_start
LEAF_NODE	5591:46	5591:46	17	(
ARGUMENT	5591:47	5591:47	17	output
FIELD	5591:47	5591:47	18	output
LEAF_NODE	5591:47	5591:47	19	output
LEAF_NODE	5591:53	5591:53	17	)
LEAF_NODE	5591:54	5591:54	13	;
EXPR_STATEMENT	5592:4	5595:12	12	written += t2p_write_pdf_xobject_stream_dict ( i2 + 1 , t2p , output ) ;
EXPR	5592:4	5592:4	13	written += t2p_write_pdf_xobject_stream_dict ( i2 + 1 , t2p , output )
ASSIGN	5592:4	5592:15	14	written += t2p_write_pdf_xobject_stream_dict ( i2 + 1 , t2p , output )
LVAL	5592:4	5592:4	15	written
FIELD	5592:4	5592:4	16	written
LEAF_NODE	5592:4	5592:4	17	written
ASSIGN_OP	5592:12	5592:12	15	+=
LEAF_NODE	5592:12	5592:12	16	+=
RVAL	5592:15	5592:15	15	t2p_write_pdf_xobject_stream_dict ( i2 + 1 , t2p , output )
FUNCTION_CALL	5592:15	5595:11	16	t2p_write_pdf_xobject_stream_dict ( i2 + 1 , t2p , output )
CALLEE	5592:15	5592:15	17	t2p_write_pdf_xobject_stream_dict
LEAF_NODE	5592:15	5592:15	18	t2p_write_pdf_xobject_stream_dict
LEAF_NODE	5592:48	5592:48	17	(
ARGUMENT	5593:5	5593:8	17	i2 + 1
FIELD	5593:5	5593:5	18	i2
LEAF_NODE	5593:5	5593:5	19	i2
LEAF_NODE	5593:7	5593:7	18	+
FIELD	5593:8	5593:8	18	1
LEAF_NODE	5593:8	5593:8	19	1
LEAF_NODE	5593:9	5593:9	17	,
ARGUMENT	5594:5	5594:5	17	t2p
FIELD	5594:5	5594:5	18	t2p
LEAF_NODE	5594:5	5594:5	19	t2p
LEAF_NODE	5594:8	5594:8	17	,
ARGUMENT	5595:5	5595:5	17	output
FIELD	5595:5	5595:5	18	output
LEAF_NODE	5595:5	5595:5	19	output
LEAF_NODE	5595:11	5595:11	17	)
LEAF_NODE	5595:12	5595:12	13	;
EXPR_STATEMENT	5596:4	5596:52	12	written += t2p_write_pdf_stream_dict_end ( output ) ;
EXPR	5596:4	5596:4	13	written += t2p_write_pdf_stream_dict_end ( output )
ASSIGN	5596:4	5596:15	14	written += t2p_write_pdf_stream_dict_end ( output )
LVAL	5596:4	5596:4	15	written
FIELD	5596:4	5596:4	16	written
LEAF_NODE	5596:4	5596:4	17	written
ASSIGN_OP	5596:12	5596:12	15	+=
LEAF_NODE	5596:12	5596:12	16	+=
RVAL	5596:15	5596:15	15	t2p_write_pdf_stream_dict_end ( output )
FUNCTION_CALL	5596:15	5596:51	16	t2p_write_pdf_stream_dict_end ( output )
CALLEE	5596:15	5596:15	17	t2p_write_pdf_stream_dict_end
LEAF_NODE	5596:15	5596:15	18	t2p_write_pdf_stream_dict_end
LEAF_NODE	5596:44	5596:44	17	(
ARGUMENT	5596:45	5596:45	17	output
FIELD	5596:45	5596:45	18	output
LEAF_NODE	5596:45	5596:45	19	output
LEAF_NODE	5596:51	5596:51	17	)
LEAF_NODE	5596:52	5596:52	13	;
EXPR_STATEMENT	5597:4	5597:49	12	written += t2p_write_pdf_stream_start ( output ) ;
EXPR	5597:4	5597:4	13	written += t2p_write_pdf_stream_start ( output )
ASSIGN	5597:4	5597:15	14	written += t2p_write_pdf_stream_start ( output )
LVAL	5597:4	5597:4	15	written
FIELD	5597:4	5597:4	16	written
LEAF_NODE	5597:4	5597:4	17	written
ASSIGN_OP	5597:12	5597:12	15	+=
LEAF_NODE	5597:12	5597:12	16	+=
RVAL	5597:15	5597:15	15	t2p_write_pdf_stream_start ( output )
FUNCTION_CALL	5597:15	5597:48	16	t2p_write_pdf_stream_start ( output )
CALLEE	5597:15	5597:15	17	t2p_write_pdf_stream_start
LEAF_NODE	5597:15	5597:15	18	t2p_write_pdf_stream_start
LEAF_NODE	5597:41	5597:41	17	(
ARGUMENT	5597:42	5597:42	17	output
FIELD	5597:42	5597:42	18	output
LEAF_NODE	5597:42	5597:42	19	output
LEAF_NODE	5597:48	5597:48	17	)
LEAF_NODE	5597:49	5597:49	13	;
EXPR_STATEMENT	5598:4	5598:21	12	streamlen = written ;
EXPR	5598:4	5598:4	13	streamlen = written
ASSIGN	5598:4	5598:14	14	streamlen = written
LVAL	5598:4	5598:4	15	streamlen
FIELD	5598:4	5598:4	16	streamlen
LEAF_NODE	5598:4	5598:4	17	streamlen
ASSIGN_OP	5598:13	5598:13	15	=
LEAF_NODE	5598:13	5598:13	16	=
RVAL	5598:14	5598:14	15	written
FIELD	5598:14	5598:14	16	written
LEAF_NODE	5598:14	5598:14	17	written
LEAF_NODE	5598:21	5598:21	13	;
EXPR_STATEMENT	5599:4	5599:43	12	t2p_read_tiff_size_tile ( t2p , input , i2 ) ;
EXPR	5599:4	5599:4	13	t2p_read_tiff_size_tile ( t2p , input , i2 )
FUNCTION_CALL	5599:4	5599:42	14	t2p_read_tiff_size_tile ( t2p , input , i2 )
CALLEE	5599:4	5599:4	15	t2p_read_tiff_size_tile
LEAF_NODE	5599:4	5599:4	16	t2p_read_tiff_size_tile
LEAF_NODE	5599:27	5599:27	15	(
ARGUMENT	5599:28	5599:28	15	t2p
FIELD	5599:28	5599:28	16	t2p
LEAF_NODE	5599:28	5599:28	17	t2p
LEAF_NODE	5599:31	5599:31	15	,
ARGUMENT	5599:33	5599:33	15	input
FIELD	5599:33	5599:33	16	input
LEAF_NODE	5599:33	5599:33	17	input
LEAF_NODE	5599:38	5599:38	15	,
ARGUMENT	5599:40	5599:40	15	i2
FIELD	5599:40	5599:40	16	i2
LEAF_NODE	5599:40	5599:40	17	i2
LEAF_NODE	5599:42	5599:42	15	)
LEAF_NODE	5599:43	5599:43	13	;
EXPR_STATEMENT	5600:4	5600:67	12	written += t2p_readwrite_pdf_image_tile ( t2p , input , output , i2 ) ;
EXPR	5600:4	5600:4	13	written += t2p_readwrite_pdf_image_tile ( t2p , input , output , i2 )
ASSIGN	5600:4	5600:15	14	written += t2p_readwrite_pdf_image_tile ( t2p , input , output , i2 )
LVAL	5600:4	5600:4	15	written
FIELD	5600:4	5600:4	16	written
LEAF_NODE	5600:4	5600:4	17	written
ASSIGN_OP	5600:12	5600:12	15	+=
LEAF_NODE	5600:12	5600:12	16	+=
RVAL	5600:15	5600:15	15	t2p_readwrite_pdf_image_tile ( t2p , input , output , i2 )
FUNCTION_CALL	5600:15	5600:66	16	t2p_readwrite_pdf_image_tile ( t2p , input , output , i2 )
CALLEE	5600:15	5600:15	17	t2p_readwrite_pdf_image_tile
LEAF_NODE	5600:15	5600:15	18	t2p_readwrite_pdf_image_tile
LEAF_NODE	5600:43	5600:43	17	(
ARGUMENT	5600:44	5600:44	17	t2p
FIELD	5600:44	5600:44	18	t2p
LEAF_NODE	5600:44	5600:44	19	t2p
LEAF_NODE	5600:47	5600:47	17	,
ARGUMENT	5600:49	5600:49	17	input
FIELD	5600:49	5600:49	18	input
LEAF_NODE	5600:49	5600:49	19	input
LEAF_NODE	5600:54	5600:54	17	,
ARGUMENT	5600:56	5600:56	17	output
FIELD	5600:56	5600:56	18	output
LEAF_NODE	5600:56	5600:56	19	output
LEAF_NODE	5600:62	5600:62	17	,
ARGUMENT	5600:64	5600:64	17	i2
FIELD	5600:64	5600:64	18	i2
LEAF_NODE	5600:64	5600:64	19	i2
LEAF_NODE	5600:66	5600:66	17	)
LEAF_NODE	5600:67	5600:67	13	;
EXPR_STATEMENT	5601:4	5601:44	12	t2p_write_advance_directory ( t2p , output ) ;
EXPR	5601:4	5601:4	13	t2p_write_advance_directory ( t2p , output )
FUNCTION_CALL	5601:4	5601:43	14	t2p_write_advance_directory ( t2p , output )
CALLEE	5601:4	5601:4	15	t2p_write_advance_directory
LEAF_NODE	5601:4	5601:4	16	t2p_write_advance_directory
LEAF_NODE	5601:31	5601:31	15	(
ARGUMENT	5601:32	5601:32	15	t2p
FIELD	5601:32	5601:32	16	t2p
LEAF_NODE	5601:32	5601:32	17	t2p
LEAF_NODE	5601:35	5601:35	15	,
ARGUMENT	5601:37	5601:37	15	output
FIELD	5601:37	5601:37	16	output
LEAF_NODE	5601:37	5601:37	17	output
LEAF_NODE	5601:43	5601:43	15	)
LEAF_NODE	5601:44	5601:44	13	;
SELECTION	5602:4	5602:34	12	
KEYWORD	5602:4	5602:4	13	if
LEAF_NODE	5602:4	5602:4	14	if
LEAF_NODE	5602:6	5602:6	13	(
CONDITION	5602:7	5602:7	13	t2p -> t2p_error != T2P_ERR_OK
EXPR	5602:7	5602:23	14	t2p -> t2p_error != T2P_ERR_OK
FIELD	5602:7	5602:12	15	t2p -> t2p_error
LEAF_NODE	5602:7	5602:7	16	t2p
LEAF_NODE	5602:10	5602:10	16	->
LEAF_NODE	5602:12	5602:12	16	t2p_error
EQ_OPERATOR	5602:21	5602:21	15	!=
LEAF_NODE	5602:21	5602:21	16	!=
FIELD	5602:23	5602:23	15	T2P_ERR_OK
LEAF_NODE	5602:23	5602:23	16	T2P_ERR_OK
LEAF_NODE	5602:33	5602:33	13	)
STATEMENTS	5602:34	5602:45	13	
LEAF_NODE	5602:34	5602:34	14	{
STATEMENTS	5602:35	5602:35	14	
JUMP_STATEMENT	5602:35	5602:44	15	return ( 0 ) ;
KEYWORD	5602:35	5602:35	16	return
LEAF_NODE	5602:35	5602:35	17	return
DESTINATION	5602:41	5602:41	16	( 0 )
EXPR	5602:41	5602:43	17	( 0 )
LEAF_NODE	5602:41	5602:41	18	(
FIELD	5602:42	5602:42	18	0
LEAF_NODE	5602:42	5602:42	19	0
LEAF_NODE	5602:43	5602:43	18	)
LEAF_NODE	5602:44	5602:44	16	;
LEAF_NODE	5602:45	5602:45	14	}
EXPR_STATEMENT	5603:4	5603:31	12	streamlen = written - streamlen ;
EXPR	5603:4	5603:4	13	streamlen = written - streamlen
ASSIGN	5603:4	5603:14	14	streamlen = written - streamlen
LVAL	5603:4	5603:4	15	streamlen
FIELD	5603:4	5603:4	16	streamlen
LEAF_NODE	5603:4	5603:4	17	streamlen
ASSIGN_OP	5603:13	5603:13	15	=
LEAF_NODE	5603:13	5603:13	16	=
RVAL	5603:14	5603:22	15	written - streamlen
FIELD	5603:14	5603:14	16	written
LEAF_NODE	5603:14	5603:14	17	written
LEAF_NODE	5603:21	5603:21	16	-
FIELD	5603:22	5603:22	16	streamlen
LEAF_NODE	5603:22	5603:22	17	streamlen
LEAF_NODE	5603:31	5603:31	13	;
EXPR_STATEMENT	5604:4	5604:47	12	written += t2p_write_pdf_stream_end ( output ) ;
EXPR	5604:4	5604:4	13	written += t2p_write_pdf_stream_end ( output )
ASSIGN	5604:4	5604:15	14	written += t2p_write_pdf_stream_end ( output )
LVAL	5604:4	5604:4	15	written
FIELD	5604:4	5604:4	16	written
LEAF_NODE	5604:4	5604:4	17	written
ASSIGN_OP	5604:12	5604:12	15	+=
LEAF_NODE	5604:12	5604:12	16	+=
RVAL	5604:15	5604:15	15	t2p_write_pdf_stream_end ( output )
FUNCTION_CALL	5604:15	5604:46	16	t2p_write_pdf_stream_end ( output )
CALLEE	5604:15	5604:15	17	t2p_write_pdf_stream_end
LEAF_NODE	5604:15	5604:15	18	t2p_write_pdf_stream_end
LEAF_NODE	5604:39	5604:39	17	(
ARGUMENT	5604:40	5604:40	17	output
FIELD	5604:40	5604:40	18	output
LEAF_NODE	5604:40	5604:40	19	output
LEAF_NODE	5604:46	5604:46	17	)
LEAF_NODE	5604:47	5604:47	13	;
EXPR_STATEMENT	5605:4	5605:44	12	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5605:4	5605:4	13	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5605:4	5605:15	14	written += t2p_write_pdf_obj_end ( output )
LVAL	5605:4	5605:4	15	written
FIELD	5605:4	5605:4	16	written
LEAF_NODE	5605:4	5605:4	17	written
ASSIGN_OP	5605:12	5605:12	15	+=
LEAF_NODE	5605:12	5605:12	16	+=
RVAL	5605:15	5605:15	15	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5605:15	5605:43	16	t2p_write_pdf_obj_end ( output )
CALLEE	5605:15	5605:15	17	t2p_write_pdf_obj_end
LEAF_NODE	5605:15	5605:15	18	t2p_write_pdf_obj_end
LEAF_NODE	5605:36	5605:36	17	(
ARGUMENT	5605:37	5605:37	17	output
FIELD	5605:37	5605:37	18	output
LEAF_NODE	5605:37	5605:37	19	output
LEAF_NODE	5605:43	5605:43	17	)
LEAF_NODE	5605:44	5605:44	13	;
EXPR_STATEMENT	5606:4	5606:54	12	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5606:4	5606:4	13	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5606:4	5606:47	14	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5606:4	5606:4	15	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5606:4	5606:45	16	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5606:4	5606:4	17	t2p
LEAF_NODE	5606:7	5606:7	17	->
LEAF_NODE	5606:9	5606:9	17	pdf_xrefoffsets
LEAF_NODE	5606:24	5606:24	17	[
EXPR	5606:25	5606:25	17	t2p -> pdf_xrefcount ++
FIELD	5606:25	5606:43	18	t2p -> pdf_xrefcount ++
LEAF_NODE	5606:25	5606:25	19	t2p
LEAF_NODE	5606:28	5606:28	19	->
LEAF_NODE	5606:30	5606:30	19	pdf_xrefcount
LEAF_NODE	5606:43	5606:43	19	++
LEAF_NODE	5606:45	5606:45	17	]
ASSIGN_OP	5606:46	5606:46	15	=
LEAF_NODE	5606:46	5606:46	16	=
RVAL	5606:47	5606:47	15	written
FIELD	5606:47	5606:47	16	written
LEAF_NODE	5606:47	5606:47	17	written
LEAF_NODE	5606:54	5606:54	13	;
EXPR_STATEMENT	5607:4	5607:66	12	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5607:4	5607:4	13	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5607:4	5607:15	14	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5607:4	5607:4	15	written
FIELD	5607:4	5607:4	16	written
LEAF_NODE	5607:4	5607:4	17	written
ASSIGN_OP	5607:12	5607:12	15	+=
LEAF_NODE	5607:12	5607:12	16	+=
RVAL	5607:15	5607:15	15	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5607:15	5607:65	16	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5607:15	5607:15	17	t2p_write_pdf_obj_start
LEAF_NODE	5607:15	5607:15	18	t2p_write_pdf_obj_start
LEAF_NODE	5607:38	5607:38	17	(
ARGUMENT	5607:39	5607:39	17	t2p -> pdf_xrefcount
FIELD	5607:39	5607:44	18	t2p -> pdf_xrefcount
LEAF_NODE	5607:39	5607:39	19	t2p
LEAF_NODE	5607:42	5607:42	19	->
LEAF_NODE	5607:44	5607:44	19	pdf_xrefcount
LEAF_NODE	5607:57	5607:57	17	,
ARGUMENT	5607:59	5607:59	17	output
FIELD	5607:59	5607:59	18	output
LEAF_NODE	5607:59	5607:59	19	output
LEAF_NODE	5607:65	5607:65	17	)
LEAF_NODE	5607:66	5607:66	13	;
EXPR_STATEMENT	5608:4	5608:61	12	written += t2p_write_pdf_stream_length ( streamlen , output ) ;
EXPR	5608:4	5608:4	13	written += t2p_write_pdf_stream_length ( streamlen , output )
ASSIGN	5608:4	5608:15	14	written += t2p_write_pdf_stream_length ( streamlen , output )
LVAL	5608:4	5608:4	15	written
FIELD	5608:4	5608:4	16	written
LEAF_NODE	5608:4	5608:4	17	written
ASSIGN_OP	5608:12	5608:12	15	+=
LEAF_NODE	5608:12	5608:12	16	+=
RVAL	5608:15	5608:15	15	t2p_write_pdf_stream_length ( streamlen , output )
FUNCTION_CALL	5608:15	5608:60	16	t2p_write_pdf_stream_length ( streamlen , output )
CALLEE	5608:15	5608:15	17	t2p_write_pdf_stream_length
LEAF_NODE	5608:15	5608:15	18	t2p_write_pdf_stream_length
LEAF_NODE	5608:42	5608:42	17	(
ARGUMENT	5608:43	5608:43	17	streamlen
FIELD	5608:43	5608:43	18	streamlen
LEAF_NODE	5608:43	5608:43	19	streamlen
LEAF_NODE	5608:52	5608:52	17	,
ARGUMENT	5608:54	5608:54	17	output
FIELD	5608:54	5608:54	18	output
LEAF_NODE	5608:54	5608:54	19	output
LEAF_NODE	5608:60	5608:60	17	)
LEAF_NODE	5608:61	5608:61	13	;
EXPR_STATEMENT	5609:4	5609:44	12	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5609:4	5609:4	13	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5609:4	5609:15	14	written += t2p_write_pdf_obj_end ( output )
LVAL	5609:4	5609:4	15	written
FIELD	5609:4	5609:4	16	written
LEAF_NODE	5609:4	5609:4	17	written
ASSIGN_OP	5609:12	5609:12	15	+=
LEAF_NODE	5609:12	5609:12	16	+=
RVAL	5609:15	5609:15	15	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5609:15	5609:43	16	t2p_write_pdf_obj_end ( output )
CALLEE	5609:15	5609:15	17	t2p_write_pdf_obj_end
LEAF_NODE	5609:15	5609:15	18	t2p_write_pdf_obj_end
LEAF_NODE	5609:36	5609:36	17	(
ARGUMENT	5609:37	5609:37	17	output
FIELD	5609:37	5609:37	18	output
LEAF_NODE	5609:37	5609:37	19	output
LEAF_NODE	5609:43	5609:43	17	)
LEAF_NODE	5609:44	5609:44	13	;
LEAF_NODE	5610:3	5610:3	11	}
LEAF_NODE	5611:2	5611:2	8	}
SELECTION	5611:4	5611:9	6	
KEYWORD	5611:4	5611:4	7	else
LEAF_NODE	5611:4	5611:4	8	else
STATEMENTS	5611:9	5633:2	7	
LEAF_NODE	5611:9	5611:9	8	{
STATEMENTS	5612:3	5632:3	8	
EXPR_STATEMENT	5612:3	5612:53	9	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5612:3	5612:3	10	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5612:3	5612:46	11	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5612:3	5612:3	12	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5612:3	5612:44	13	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5612:3	5612:3	14	t2p
LEAF_NODE	5612:6	5612:6	14	->
LEAF_NODE	5612:8	5612:8	14	pdf_xrefoffsets
LEAF_NODE	5612:23	5612:23	14	[
EXPR	5612:24	5612:24	14	t2p -> pdf_xrefcount ++
FIELD	5612:24	5612:42	15	t2p -> pdf_xrefcount ++
LEAF_NODE	5612:24	5612:24	16	t2p
LEAF_NODE	5612:27	5612:27	16	->
LEAF_NODE	5612:29	5612:29	16	pdf_xrefcount
LEAF_NODE	5612:42	5612:42	16	++
LEAF_NODE	5612:44	5612:44	14	]
ASSIGN_OP	5612:45	5612:45	12	=
LEAF_NODE	5612:45	5612:45	13	=
RVAL	5612:46	5612:46	12	written
FIELD	5612:46	5612:46	13	written
LEAF_NODE	5612:46	5612:46	14	written
LEAF_NODE	5612:53	5612:53	10	;
EXPR_STATEMENT	5613:3	5613:65	9	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5613:3	5613:3	10	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5613:3	5613:14	11	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5613:3	5613:3	12	written
FIELD	5613:3	5613:3	13	written
LEAF_NODE	5613:3	5613:3	14	written
ASSIGN_OP	5613:11	5613:11	12	+=
LEAF_NODE	5613:11	5613:11	13	+=
RVAL	5613:14	5613:14	12	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5613:14	5613:64	13	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5613:14	5613:14	14	t2p_write_pdf_obj_start
LEAF_NODE	5613:14	5613:14	15	t2p_write_pdf_obj_start
LEAF_NODE	5613:37	5613:37	14	(
ARGUMENT	5613:38	5613:38	14	t2p -> pdf_xrefcount
FIELD	5613:38	5613:43	15	t2p -> pdf_xrefcount
LEAF_NODE	5613:38	5613:38	16	t2p
LEAF_NODE	5613:41	5613:41	16	->
LEAF_NODE	5613:43	5613:43	16	pdf_xrefcount
LEAF_NODE	5613:56	5613:56	14	,
ARGUMENT	5613:58	5613:58	14	output
FIELD	5613:58	5613:58	15	output
LEAF_NODE	5613:58	5613:58	16	output
LEAF_NODE	5613:64	5613:64	14	)
LEAF_NODE	5613:65	5613:65	10	;
EXPR_STATEMENT	5614:3	5614:53	9	written += t2p_write_pdf_stream_dict_start ( output ) ;
EXPR	5614:3	5614:3	10	written += t2p_write_pdf_stream_dict_start ( output )
ASSIGN	5614:3	5614:14	11	written += t2p_write_pdf_stream_dict_start ( output )
LVAL	5614:3	5614:3	12	written
FIELD	5614:3	5614:3	13	written
LEAF_NODE	5614:3	5614:3	14	written
ASSIGN_OP	5614:11	5614:11	12	+=
LEAF_NODE	5614:11	5614:11	13	+=
RVAL	5614:14	5614:14	12	t2p_write_pdf_stream_dict_start ( output )
FUNCTION_CALL	5614:14	5614:52	13	t2p_write_pdf_stream_dict_start ( output )
CALLEE	5614:14	5614:14	14	t2p_write_pdf_stream_dict_start
LEAF_NODE	5614:14	5614:14	15	t2p_write_pdf_stream_dict_start
LEAF_NODE	5614:45	5614:45	14	(
ARGUMENT	5614:46	5614:46	14	output
FIELD	5614:46	5614:46	15	output
LEAF_NODE	5614:46	5614:46	16	output
LEAF_NODE	5614:52	5614:52	14	)
LEAF_NODE	5614:53	5614:53	10	;
EXPR_STATEMENT	5615:3	5618:11	9	written += t2p_write_pdf_xobject_stream_dict ( 0 , t2p , output ) ;
EXPR	5615:3	5615:3	10	written += t2p_write_pdf_xobject_stream_dict ( 0 , t2p , output )
ASSIGN	5615:3	5615:14	11	written += t2p_write_pdf_xobject_stream_dict ( 0 , t2p , output )
LVAL	5615:3	5615:3	12	written
FIELD	5615:3	5615:3	13	written
LEAF_NODE	5615:3	5615:3	14	written
ASSIGN_OP	5615:11	5615:11	12	+=
LEAF_NODE	5615:11	5615:11	13	+=
RVAL	5615:14	5615:14	12	t2p_write_pdf_xobject_stream_dict ( 0 , t2p , output )
FUNCTION_CALL	5615:14	5618:10	13	t2p_write_pdf_xobject_stream_dict ( 0 , t2p , output )
CALLEE	5615:14	5615:14	14	t2p_write_pdf_xobject_stream_dict
LEAF_NODE	5615:14	5615:14	15	t2p_write_pdf_xobject_stream_dict
LEAF_NODE	5615:47	5615:47	14	(
ARGUMENT	5616:4	5616:4	14	0
FIELD	5616:4	5616:4	15	0
LEAF_NODE	5616:4	5616:4	16	0
LEAF_NODE	5616:5	5616:5	14	,
ARGUMENT	5617:4	5617:4	14	t2p
FIELD	5617:4	5617:4	15	t2p
LEAF_NODE	5617:4	5617:4	16	t2p
LEAF_NODE	5617:7	5617:7	14	,
ARGUMENT	5618:4	5618:4	14	output
FIELD	5618:4	5618:4	15	output
LEAF_NODE	5618:4	5618:4	16	output
LEAF_NODE	5618:10	5618:10	14	)
LEAF_NODE	5618:11	5618:11	10	;
EXPR_STATEMENT	5619:3	5619:51	9	written += t2p_write_pdf_stream_dict_end ( output ) ;
EXPR	5619:3	5619:3	10	written += t2p_write_pdf_stream_dict_end ( output )
ASSIGN	5619:3	5619:14	11	written += t2p_write_pdf_stream_dict_end ( output )
LVAL	5619:3	5619:3	12	written
FIELD	5619:3	5619:3	13	written
LEAF_NODE	5619:3	5619:3	14	written
ASSIGN_OP	5619:11	5619:11	12	+=
LEAF_NODE	5619:11	5619:11	13	+=
RVAL	5619:14	5619:14	12	t2p_write_pdf_stream_dict_end ( output )
FUNCTION_CALL	5619:14	5619:50	13	t2p_write_pdf_stream_dict_end ( output )
CALLEE	5619:14	5619:14	14	t2p_write_pdf_stream_dict_end
LEAF_NODE	5619:14	5619:14	15	t2p_write_pdf_stream_dict_end
LEAF_NODE	5619:43	5619:43	14	(
ARGUMENT	5619:44	5619:44	14	output
FIELD	5619:44	5619:44	15	output
LEAF_NODE	5619:44	5619:44	16	output
LEAF_NODE	5619:50	5619:50	14	)
LEAF_NODE	5619:51	5619:51	10	;
EXPR_STATEMENT	5620:3	5620:48	9	written += t2p_write_pdf_stream_start ( output ) ;
EXPR	5620:3	5620:3	10	written += t2p_write_pdf_stream_start ( output )
ASSIGN	5620:3	5620:14	11	written += t2p_write_pdf_stream_start ( output )
LVAL	5620:3	5620:3	12	written
FIELD	5620:3	5620:3	13	written
LEAF_NODE	5620:3	5620:3	14	written
ASSIGN_OP	5620:11	5620:11	12	+=
LEAF_NODE	5620:11	5620:11	13	+=
RVAL	5620:14	5620:14	12	t2p_write_pdf_stream_start ( output )
FUNCTION_CALL	5620:14	5620:47	13	t2p_write_pdf_stream_start ( output )
CALLEE	5620:14	5620:14	14	t2p_write_pdf_stream_start
LEAF_NODE	5620:14	5620:14	15	t2p_write_pdf_stream_start
LEAF_NODE	5620:40	5620:40	14	(
ARGUMENT	5620:41	5620:41	14	output
FIELD	5620:41	5620:41	15	output
LEAF_NODE	5620:41	5620:41	16	output
LEAF_NODE	5620:47	5620:47	14	)
LEAF_NODE	5620:48	5620:48	10	;
EXPR_STATEMENT	5621:3	5621:20	9	streamlen = written ;
EXPR	5621:3	5621:3	10	streamlen = written
ASSIGN	5621:3	5621:13	11	streamlen = written
LVAL	5621:3	5621:3	12	streamlen
FIELD	5621:3	5621:3	13	streamlen
LEAF_NODE	5621:3	5621:3	14	streamlen
ASSIGN_OP	5621:12	5621:12	12	=
LEAF_NODE	5621:12	5621:12	13	=
RVAL	5621:13	5621:13	12	written
FIELD	5621:13	5621:13	13	written
LEAF_NODE	5621:13	5621:13	14	written
LEAF_NODE	5621:20	5621:20	10	;
EXPR_STATEMENT	5622:3	5622:33	9	t2p_read_tiff_size ( t2p , input ) ;
EXPR	5622:3	5622:3	10	t2p_read_tiff_size ( t2p , input )
FUNCTION_CALL	5622:3	5622:32	11	t2p_read_tiff_size ( t2p , input )
CALLEE	5622:3	5622:3	12	t2p_read_tiff_size
LEAF_NODE	5622:3	5622:3	13	t2p_read_tiff_size
LEAF_NODE	5622:21	5622:21	12	(
ARGUMENT	5622:22	5622:22	12	t2p
FIELD	5622:22	5622:22	13	t2p
LEAF_NODE	5622:22	5622:22	14	t2p
LEAF_NODE	5622:25	5622:25	12	,
ARGUMENT	5622:27	5622:27	12	input
FIELD	5622:27	5622:27	13	input
LEAF_NODE	5622:27	5622:27	14	input
LEAF_NODE	5622:32	5622:32	12	)
LEAF_NODE	5622:33	5622:33	10	;
EXPR_STATEMENT	5623:3	5623:57	9	written += t2p_readwrite_pdf_image ( t2p , input , output ) ;
EXPR	5623:3	5623:3	10	written += t2p_readwrite_pdf_image ( t2p , input , output )
ASSIGN	5623:3	5623:14	11	written += t2p_readwrite_pdf_image ( t2p , input , output )
LVAL	5623:3	5623:3	12	written
FIELD	5623:3	5623:3	13	written
LEAF_NODE	5623:3	5623:3	14	written
ASSIGN_OP	5623:11	5623:11	12	+=
LEAF_NODE	5623:11	5623:11	13	+=
RVAL	5623:14	5623:14	12	t2p_readwrite_pdf_image ( t2p , input , output )
FUNCTION_CALL	5623:14	5623:56	13	t2p_readwrite_pdf_image ( t2p , input , output )
CALLEE	5623:14	5623:14	14	t2p_readwrite_pdf_image
LEAF_NODE	5623:14	5623:14	15	t2p_readwrite_pdf_image
LEAF_NODE	5623:37	5623:37	14	(
ARGUMENT	5623:38	5623:38	14	t2p
FIELD	5623:38	5623:38	15	t2p
LEAF_NODE	5623:38	5623:38	16	t2p
LEAF_NODE	5623:41	5623:41	14	,
ARGUMENT	5623:43	5623:43	14	input
FIELD	5623:43	5623:43	15	input
LEAF_NODE	5623:43	5623:43	16	input
LEAF_NODE	5623:48	5623:48	14	,
ARGUMENT	5623:50	5623:50	14	output
FIELD	5623:50	5623:50	15	output
LEAF_NODE	5623:50	5623:50	16	output
LEAF_NODE	5623:56	5623:56	14	)
LEAF_NODE	5623:57	5623:57	10	;
EXPR_STATEMENT	5624:3	5624:43	9	t2p_write_advance_directory ( t2p , output ) ;
EXPR	5624:3	5624:3	10	t2p_write_advance_directory ( t2p , output )
FUNCTION_CALL	5624:3	5624:42	11	t2p_write_advance_directory ( t2p , output )
CALLEE	5624:3	5624:3	12	t2p_write_advance_directory
LEAF_NODE	5624:3	5624:3	13	t2p_write_advance_directory
LEAF_NODE	5624:30	5624:30	12	(
ARGUMENT	5624:31	5624:31	12	t2p
FIELD	5624:31	5624:31	13	t2p
LEAF_NODE	5624:31	5624:31	14	t2p
LEAF_NODE	5624:34	5624:34	12	,
ARGUMENT	5624:36	5624:36	12	output
FIELD	5624:36	5624:36	13	output
LEAF_NODE	5624:36	5624:36	14	output
LEAF_NODE	5624:42	5624:42	12	)
LEAF_NODE	5624:43	5624:43	10	;
SELECTION	5625:3	5625:33	9	
KEYWORD	5625:3	5625:3	10	if
LEAF_NODE	5625:3	5625:3	11	if
LEAF_NODE	5625:5	5625:5	10	(
CONDITION	5625:6	5625:6	10	t2p -> t2p_error != T2P_ERR_OK
EXPR	5625:6	5625:22	11	t2p -> t2p_error != T2P_ERR_OK
FIELD	5625:6	5625:11	12	t2p -> t2p_error
LEAF_NODE	5625:6	5625:6	13	t2p
LEAF_NODE	5625:9	5625:9	13	->
LEAF_NODE	5625:11	5625:11	13	t2p_error
EQ_OPERATOR	5625:20	5625:20	12	!=
LEAF_NODE	5625:20	5625:20	13	!=
FIELD	5625:22	5625:22	12	T2P_ERR_OK
LEAF_NODE	5625:22	5625:22	13	T2P_ERR_OK
LEAF_NODE	5625:32	5625:32	10	)
STATEMENTS	5625:33	5625:44	10	
LEAF_NODE	5625:33	5625:33	11	{
STATEMENTS	5625:34	5625:34	11	
JUMP_STATEMENT	5625:34	5625:43	12	return ( 0 ) ;
KEYWORD	5625:34	5625:34	13	return
LEAF_NODE	5625:34	5625:34	14	return
DESTINATION	5625:40	5625:40	13	( 0 )
EXPR	5625:40	5625:42	14	( 0 )
LEAF_NODE	5625:40	5625:40	15	(
FIELD	5625:41	5625:41	15	0
LEAF_NODE	5625:41	5625:41	16	0
LEAF_NODE	5625:42	5625:42	15	)
LEAF_NODE	5625:43	5625:43	13	;
LEAF_NODE	5625:44	5625:44	11	}
EXPR_STATEMENT	5626:3	5626:30	9	streamlen = written - streamlen ;
EXPR	5626:3	5626:3	10	streamlen = written - streamlen
ASSIGN	5626:3	5626:13	11	streamlen = written - streamlen
LVAL	5626:3	5626:3	12	streamlen
FIELD	5626:3	5626:3	13	streamlen
LEAF_NODE	5626:3	5626:3	14	streamlen
ASSIGN_OP	5626:12	5626:12	12	=
LEAF_NODE	5626:12	5626:12	13	=
RVAL	5626:13	5626:21	12	written - streamlen
FIELD	5626:13	5626:13	13	written
LEAF_NODE	5626:13	5626:13	14	written
LEAF_NODE	5626:20	5626:20	13	-
FIELD	5626:21	5626:21	13	streamlen
LEAF_NODE	5626:21	5626:21	14	streamlen
LEAF_NODE	5626:30	5626:30	10	;
EXPR_STATEMENT	5627:3	5627:46	9	written += t2p_write_pdf_stream_end ( output ) ;
EXPR	5627:3	5627:3	10	written += t2p_write_pdf_stream_end ( output )
ASSIGN	5627:3	5627:14	11	written += t2p_write_pdf_stream_end ( output )
LVAL	5627:3	5627:3	12	written
FIELD	5627:3	5627:3	13	written
LEAF_NODE	5627:3	5627:3	14	written
ASSIGN_OP	5627:11	5627:11	12	+=
LEAF_NODE	5627:11	5627:11	13	+=
RVAL	5627:14	5627:14	12	t2p_write_pdf_stream_end ( output )
FUNCTION_CALL	5627:14	5627:45	13	t2p_write_pdf_stream_end ( output )
CALLEE	5627:14	5627:14	14	t2p_write_pdf_stream_end
LEAF_NODE	5627:14	5627:14	15	t2p_write_pdf_stream_end
LEAF_NODE	5627:38	5627:38	14	(
ARGUMENT	5627:39	5627:39	14	output
FIELD	5627:39	5627:39	15	output
LEAF_NODE	5627:39	5627:39	16	output
LEAF_NODE	5627:45	5627:45	14	)
LEAF_NODE	5627:46	5627:46	10	;
EXPR_STATEMENT	5628:3	5628:43	9	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5628:3	5628:3	10	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5628:3	5628:14	11	written += t2p_write_pdf_obj_end ( output )
LVAL	5628:3	5628:3	12	written
FIELD	5628:3	5628:3	13	written
LEAF_NODE	5628:3	5628:3	14	written
ASSIGN_OP	5628:11	5628:11	12	+=
LEAF_NODE	5628:11	5628:11	13	+=
RVAL	5628:14	5628:14	12	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5628:14	5628:42	13	t2p_write_pdf_obj_end ( output )
CALLEE	5628:14	5628:14	14	t2p_write_pdf_obj_end
LEAF_NODE	5628:14	5628:14	15	t2p_write_pdf_obj_end
LEAF_NODE	5628:35	5628:35	14	(
ARGUMENT	5628:36	5628:36	14	output
FIELD	5628:36	5628:36	15	output
LEAF_NODE	5628:36	5628:36	16	output
LEAF_NODE	5628:42	5628:42	14	)
LEAF_NODE	5628:43	5628:43	10	;
EXPR_STATEMENT	5629:3	5629:53	9	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written ;
EXPR	5629:3	5629:3	10	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
ASSIGN	5629:3	5629:46	11	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ] = written
LVAL	5629:3	5629:3	12	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
FIELD	5629:3	5629:44	13	t2p -> pdf_xrefoffsets [ t2p -> pdf_xrefcount ++ ]
LEAF_NODE	5629:3	5629:3	14	t2p
LEAF_NODE	5629:6	5629:6	14	->
LEAF_NODE	5629:8	5629:8	14	pdf_xrefoffsets
LEAF_NODE	5629:23	5629:23	14	[
EXPR	5629:24	5629:24	14	t2p -> pdf_xrefcount ++
FIELD	5629:24	5629:42	15	t2p -> pdf_xrefcount ++
LEAF_NODE	5629:24	5629:24	16	t2p
LEAF_NODE	5629:27	5629:27	16	->
LEAF_NODE	5629:29	5629:29	16	pdf_xrefcount
LEAF_NODE	5629:42	5629:42	16	++
LEAF_NODE	5629:44	5629:44	14	]
ASSIGN_OP	5629:45	5629:45	12	=
LEAF_NODE	5629:45	5629:45	13	=
RVAL	5629:46	5629:46	12	written
FIELD	5629:46	5629:46	13	written
LEAF_NODE	5629:46	5629:46	14	written
LEAF_NODE	5629:53	5629:53	10	;
EXPR_STATEMENT	5630:3	5630:65	9	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output ) ;
EXPR	5630:3	5630:3	10	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
ASSIGN	5630:3	5630:14	11	written += t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
LVAL	5630:3	5630:3	12	written
FIELD	5630:3	5630:3	13	written
LEAF_NODE	5630:3	5630:3	14	written
ASSIGN_OP	5630:11	5630:11	12	+=
LEAF_NODE	5630:11	5630:11	13	+=
RVAL	5630:14	5630:14	12	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
FUNCTION_CALL	5630:14	5630:64	13	t2p_write_pdf_obj_start ( t2p -> pdf_xrefcount , output )
CALLEE	5630:14	5630:14	14	t2p_write_pdf_obj_start
LEAF_NODE	5630:14	5630:14	15	t2p_write_pdf_obj_start
LEAF_NODE	5630:37	5630:37	14	(
ARGUMENT	5630:38	5630:38	14	t2p -> pdf_xrefcount
FIELD	5630:38	5630:43	15	t2p -> pdf_xrefcount
LEAF_NODE	5630:38	5630:38	16	t2p
LEAF_NODE	5630:41	5630:41	16	->
LEAF_NODE	5630:43	5630:43	16	pdf_xrefcount
LEAF_NODE	5630:56	5630:56	14	,
ARGUMENT	5630:58	5630:58	14	output
FIELD	5630:58	5630:58	15	output
LEAF_NODE	5630:58	5630:58	16	output
LEAF_NODE	5630:64	5630:64	14	)
LEAF_NODE	5630:65	5630:65	10	;
EXPR_STATEMENT	5631:3	5631:60	9	written += t2p_write_pdf_stream_length ( streamlen , output ) ;
EXPR	5631:3	5631:3	10	written += t2p_write_pdf_stream_length ( streamlen , output )
ASSIGN	5631:3	5631:14	11	written += t2p_write_pdf_stream_length ( streamlen , output )
LVAL	5631:3	5631:3	12	written
FIELD	5631:3	5631:3	13	written
LEAF_NODE	5631:3	5631:3	14	written
ASSIGN_OP	5631:11	5631:11	12	+=
LEAF_NODE	5631:11	5631:11	13	+=
RVAL	5631:14	5631:14	12	t2p_write_pdf_stream_length ( streamlen , output )
FUNCTION_CALL	5631:14	5631:59	13	t2p_write_pdf_stream_length ( streamlen , output )
CALLEE	5631:14	5631:14	14	t2p_write_pdf_stream_length
LEAF_NODE	5631:14	5631:14	15	t2p_write_pdf_stream_length
LEAF_NODE	5631:41	5631:41	14	(
ARGUMENT	5631:42	5631:42	14	streamlen
FIELD	5631:42	5631:42	15	streamlen
LEAF_NODE	5631:42	5631:42	16	streamlen
LEAF_NODE	5631:51	5631:51	14	,
ARGUMENT	5631:53	5631:53	14	output
FIELD	5631:53	5631:53	15	output
LEAF_NODE	5631:53	5631:53	16	output
LEAF_NODE	5631:59	5631:59	14	)
LEAF_NODE	5631:60	5631:60	10	;
EXPR_STATEMENT	5632:3	5632:43	9	written += t2p_write_pdf_obj_end ( output ) ;
EXPR	5632:3	5632:3	10	written += t2p_write_pdf_obj_end ( output )
ASSIGN	5632:3	5632:14	11	written += t2p_write_pdf_obj_end ( output )
LVAL	5632:3	5632:3	12	written
FIELD	5632:3	5632:3	13	written
LEAF_NODE	5632:3	5632:3	14	written
ASSIGN_OP	5632:11	5632:11	12	+=
LEAF_NODE	5632:11	5632:11	13	+=
RVAL	5632:14	5632:14	12	t2p_write_pdf_obj_end ( output )
FUNCTION_CALL	5632:14	5632:42	13	t2p_write_pdf_obj_end ( output )
CALLEE	5632:14	5632:14	14	t2p_write_pdf_obj_end
LEAF_NODE	5632:14	5632:14	15	t2p_write_pdf_obj_end
LEAF_NODE	5632:35	5632:35	14	(
ARGUMENT	5632:36	5632:36	14	output
FIELD	5632:36	5632:36	15	output
LEAF_NODE	5632:36	5632:36	16	output
LEAF_NODE	5632:42	5632:42	14	)
LEAF_NODE	5632:43	5632:43	10	;
LEAF_NODE	5633:2	5633:2	8	}
LEAF_NODE	5634:1	5634:1	5	}
EXPR_STATEMENT	5635:1	5635:29	3	t2p -> pdf_startxref = written ;
EXPR	5635:1	5635:1	4	t2p -> pdf_startxref = written
ASSIGN	5635:1	5635:22	5	t2p -> pdf_startxref = written
LVAL	5635:1	5635:1	6	t2p -> pdf_startxref
FIELD	5635:1	5635:6	7	t2p -> pdf_startxref
LEAF_NODE	5635:1	5635:1	8	t2p
LEAF_NODE	5635:4	5635:4	8	->
LEAF_NODE	5635:6	5635:6	8	pdf_startxref
ASSIGN_OP	5635:20	5635:20	6	=
LEAF_NODE	5635:20	5635:20	7	=
RVAL	5635:22	5635:22	6	written
FIELD	5635:22	5635:22	7	written
LEAF_NODE	5635:22	5635:22	8	written
LEAF_NODE	5635:29	5635:29	4	;
EXPR_STATEMENT	5636:1	5636:48	3	written += t2p_write_pdf_xreftable ( t2p , output ) ;
EXPR	5636:1	5636:1	4	written += t2p_write_pdf_xreftable ( t2p , output )
ASSIGN	5636:1	5636:12	5	written += t2p_write_pdf_xreftable ( t2p , output )
LVAL	5636:1	5636:1	6	written
FIELD	5636:1	5636:1	7	written
LEAF_NODE	5636:1	5636:1	8	written
ASSIGN_OP	5636:9	5636:9	6	+=
LEAF_NODE	5636:9	5636:9	7	+=
RVAL	5636:12	5636:12	6	t2p_write_pdf_xreftable ( t2p , output )
FUNCTION_CALL	5636:12	5636:47	7	t2p_write_pdf_xreftable ( t2p , output )
CALLEE	5636:12	5636:12	8	t2p_write_pdf_xreftable
LEAF_NODE	5636:12	5636:12	9	t2p_write_pdf_xreftable
LEAF_NODE	5636:35	5636:35	8	(
ARGUMENT	5636:36	5636:36	8	t2p
FIELD	5636:36	5636:36	9	t2p
LEAF_NODE	5636:36	5636:36	10	t2p
LEAF_NODE	5636:39	5636:39	8	,
ARGUMENT	5636:41	5636:41	8	output
FIELD	5636:41	5636:41	9	output
LEAF_NODE	5636:41	5636:41	10	output
LEAF_NODE	5636:47	5636:47	8	)
LEAF_NODE	5636:48	5636:48	4	;
EXPR_STATEMENT	5637:1	5637:46	3	written += t2p_write_pdf_trailer ( t2p , output ) ;
EXPR	5637:1	5637:1	4	written += t2p_write_pdf_trailer ( t2p , output )
ASSIGN	5637:1	5637:12	5	written += t2p_write_pdf_trailer ( t2p , output )
LVAL	5637:1	5637:1	6	written
FIELD	5637:1	5637:1	7	written
LEAF_NODE	5637:1	5637:1	8	written
ASSIGN_OP	5637:9	5637:9	6	+=
LEAF_NODE	5637:9	5637:9	7	+=
RVAL	5637:12	5637:12	6	t2p_write_pdf_trailer ( t2p , output )
FUNCTION_CALL	5637:12	5637:45	7	t2p_write_pdf_trailer ( t2p , output )
CALLEE	5637:12	5637:12	8	t2p_write_pdf_trailer
LEAF_NODE	5637:12	5637:12	9	t2p_write_pdf_trailer
LEAF_NODE	5637:33	5637:33	8	(
ARGUMENT	5637:34	5637:34	8	t2p
FIELD	5637:34	5637:34	9	t2p
LEAF_NODE	5637:34	5637:34	10	t2p
LEAF_NODE	5637:37	5637:37	8	,
ARGUMENT	5637:39	5637:39	8	output
FIELD	5637:39	5637:39	9	output
LEAF_NODE	5637:39	5637:39	10	output
LEAF_NODE	5637:45	5637:45	8	)
LEAF_NODE	5637:46	5637:46	4	;
EXPR_STATEMENT	5638:1	5638:20	3	t2p_disable ( output ) ;
EXPR	5638:1	5638:1	4	t2p_disable ( output )
FUNCTION_CALL	5638:1	5638:19	5	t2p_disable ( output )
CALLEE	5638:1	5638:1	6	t2p_disable
LEAF_NODE	5638:1	5638:1	7	t2p_disable
LEAF_NODE	5638:12	5638:12	6	(
ARGUMENT	5638:13	5638:13	6	output
FIELD	5638:13	5638:13	7	output
LEAF_NODE	5638:13	5638:13	8	output
LEAF_NODE	5638:19	5638:19	6	)
LEAF_NODE	5638:20	5638:20	4	;
LEAF_NODE	5640:1	5640:1	3	return
LEAF_NODE	5640:7	5640:7	3	(
LEAF_NODE	5640:8	5640:8	3	written
LEAF_NODE	5640:15	5640:15	3	)
LEAF_NODE	5640:16	5640:16	3	;
LEAF_NODE	5641:0	5641:0	2	}
