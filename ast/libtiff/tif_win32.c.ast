SOURCE_FILE	58:0	424:0	0	
FUNCTION_DEF	58:0	86:0	1	
RETURN_TYPE	58:0	58:7	2	static tmsize_t
LEAF_NODE	58:0	58:0	3	static
TYPE_NAME	58:7	58:7	3	tmsize_t
LEAF_NODE	58:7	58:7	4	tmsize_t
FUNCTION_NAME	59:0	59:0	2	_tiffReadProc
LEAF_NODE	59:0	59:0	3	_tiffReadProc
PARAMETER_LIST	59:13	59:52	2	( thandle_t fd , void * buf , tmsize_t size )
LEAF_NODE	59:13	59:13	3	(
PARAMETER_DECL	59:14	59:24	3	thandle_t fd
TYPE	59:14	59:14	4	thandle_t
TYPE_NAME	59:14	59:14	5	thandle_t
LEAF_NODE	59:14	59:14	6	thandle_t
NAME	59:24	59:24	4	fd
LEAF_NODE	59:24	59:24	5	fd
LEAF_NODE	59:26	59:26	3	,
PARAMETER_DECL	59:28	59:34	3	void * buf
TYPE	59:28	59:32	4	void *
TYPE_NAME	59:28	59:28	5	void
LEAF_NODE	59:28	59:28	6	void
POINTER	59:32	59:32	5	*
LEAF_NODE	59:32	59:32	6	*
NAME	59:34	59:34	4	buf
LEAF_NODE	59:34	59:34	5	buf
LEAF_NODE	59:37	59:37	3	,
PARAMETER_DECL	59:39	59:48	3	tmsize_t size
TYPE	59:39	59:39	4	tmsize_t
TYPE_NAME	59:39	59:39	5	tmsize_t
LEAF_NODE	59:39	59:39	6	tmsize_t
NAME	59:48	59:48	4	size
LEAF_NODE	59:48	59:48	5	size
LEAF_NODE	59:52	59:52	3	)
LEAF_NODE	60:0	60:0	2	{
STATEMENTS	64:1	85:10	2	
SIMPLE_DECL	64:1	64:10	3	uint8 * ma ;
VAR_DECL	64:1	64:8	4	uint8 * ma
TYPE	64:1	64:6	5	uint8 *
TYPE_NAME	64:1	64:1	6	uint8
LEAF_NODE	64:1	64:1	7	uint8
POINTER	64:6	64:6	6	*
LEAF_NODE	64:6	64:6	7	*
NAME	64:8	64:8	5	ma
LEAF_NODE	64:8	64:8	6	ma
LEAF_NODE	64:10	64:10	4	;
SIMPLE_DECL	65:1	65:10	3	uint64 mb ;
VAR_DECL	65:1	65:8	4	uint64 mb
TYPE	65:1	65:1	5	uint64
TYPE_NAME	65:1	65:1	6	uint64
LEAF_NODE	65:1	65:1	7	uint64
NAME	65:8	65:8	5	mb
LEAF_NODE	65:8	65:8	6	mb
LEAF_NODE	65:10	65:10	4	;
SIMPLE_DECL	66:1	66:8	3	DWORD n ;
VAR_DECL	66:1	66:7	4	DWORD n
TYPE	66:1	66:1	5	DWORD
TYPE_NAME	66:1	66:1	6	DWORD
LEAF_NODE	66:1	66:1	7	DWORD
NAME	66:7	66:7	5	n
LEAF_NODE	66:7	66:7	6	n
LEAF_NODE	66:8	66:8	4	;
SIMPLE_DECL	67:1	67:8	3	DWORD o ;
VAR_DECL	67:1	67:7	4	DWORD o
TYPE	67:1	67:1	5	DWORD
TYPE_NAME	67:1	67:1	6	DWORD
LEAF_NODE	67:1	67:1	7	DWORD
NAME	67:7	67:7	5	o
LEAF_NODE	67:7	67:7	6	o
LEAF_NODE	67:8	67:8	4	;
SIMPLE_DECL	68:1	68:11	3	tmsize_t p ;
VAR_DECL	68:1	68:10	4	tmsize_t p
TYPE	68:1	68:1	5	tmsize_t
TYPE_NAME	68:1	68:1	6	tmsize_t
LEAF_NODE	68:1	68:1	7	tmsize_t
NAME	68:10	68:10	5	p
LEAF_NODE	68:10	68:10	6	p
LEAF_NODE	68:11	68:11	4	;
EXPR_STATEMENT	69:1	69:15	3	ma = ( uint8 * ) buf ;
EXPR	69:1	69:1	4	ma = ( uint8 * ) buf
ASSIGN	69:1	69:4	5	ma = ( uint8 * ) buf
LVAL	69:1	69:1	6	ma
FIELD	69:1	69:1	7	ma
LEAF_NODE	69:1	69:1	8	ma
ASSIGN_OP	69:3	69:3	6	=
LEAF_NODE	69:3	69:3	7	=
RVAL	69:4	69:12	6	( uint8 * ) buf
LEAF_NODE	69:4	69:4	7	(
TYPE_NAME	69:5	69:5	7	uint8
LEAF_NODE	69:5	69:5	8	uint8
LEAF_NODE	69:10	69:10	7	*
LEAF_NODE	69:11	69:11	7	)
FIELD	69:12	69:12	7	buf
LEAF_NODE	69:12	69:12	8	buf
LEAF_NODE	69:15	69:15	4	;
EXPR_STATEMENT	70:1	70:8	3	mb = size ;
EXPR	70:1	70:1	4	mb = size
ASSIGN	70:1	70:4	5	mb = size
LVAL	70:1	70:1	6	mb
FIELD	70:1	70:1	7	mb
LEAF_NODE	70:1	70:1	8	mb
ASSIGN_OP	70:3	70:3	6	=
LEAF_NODE	70:3	70:3	7	=
RVAL	70:4	70:4	6	size
FIELD	70:4	70:4	7	size
LEAF_NODE	70:4	70:4	8	size
LEAF_NODE	70:8	70:8	4	;
EXPR_STATEMENT	71:1	71:4	3	p = 0 ;
EXPR	71:1	71:1	4	p = 0
ASSIGN	71:1	71:3	5	p = 0
LVAL	71:1	71:1	6	p
FIELD	71:1	71:1	7	p
LEAF_NODE	71:1	71:1	8	p
ASSIGN_OP	71:2	71:2	6	=
LEAF_NODE	71:2	71:2	7	=
RVAL	71:3	71:3	6	0
FIELD	71:3	71:3	7	0
LEAF_NODE	71:3	71:3	8	0
LEAF_NODE	71:4	71:4	4	;
ITERATION	72:1	73:1	3	
KEYWORD	72:1	72:1	4	while
LEAF_NODE	72:1	72:1	5	while
LEAF_NODE	72:7	72:7	4	(
CONDITION	72:8	72:8	4	mb > 0
EXPR	72:8	72:11	5	mb > 0
FIELD	72:8	72:8	6	mb
LEAF_NODE	72:8	72:8	7	mb
REL_OPERATOR	72:10	72:10	6	>
LEAF_NODE	72:10	72:10	7	>
FIELD	72:11	72:11	6	0
LEAF_NODE	72:11	72:11	7	0
LEAF_NODE	72:12	72:12	4	)
STATEMENTS	73:1	84:1	4	
LEAF_NODE	73:1	73:1	5	{
STATEMENTS	74:2	82:2	5	
EXPR_STATEMENT	74:2	74:16	6	n = 0x80000000UL ;
EXPR	74:2	74:2	7	n = 0x80000000UL
ASSIGN	74:2	74:4	8	n = 0x80000000UL
LVAL	74:2	74:2	9	n
FIELD	74:2	74:2	10	n
LEAF_NODE	74:2	74:2	11	n
ASSIGN_OP	74:3	74:3	9	=
LEAF_NODE	74:3	74:3	10	=
RVAL	74:4	74:4	9	0x80000000UL
FIELD	74:4	74:4	10	0x80000000UL
LEAF_NODE	74:4	74:4	11	0x80000000UL
LEAF_NODE	74:16	74:16	7	;
SELECTION	75:2	76:3	6	
KEYWORD	75:2	75:2	7	if
LEAF_NODE	75:2	75:2	8	if
LEAF_NODE	75:5	75:5	7	(
CONDITION	75:6	75:6	7	( uint64 ) n > mb
EXPR	75:6	75:16	8	( uint64 ) n > mb
LEAF_NODE	75:6	75:6	9	(
TYPE_NAME	75:7	75:7	9	uint64
LEAF_NODE	75:7	75:7	10	uint64
LEAF_NODE	75:13	75:13	9	)
FIELD	75:14	75:14	9	n
LEAF_NODE	75:14	75:14	10	n
REL_OPERATOR	75:15	75:15	9	>
LEAF_NODE	75:15	75:15	10	>
FIELD	75:16	75:16	9	mb
LEAF_NODE	75:16	75:16	10	mb
LEAF_NODE	75:18	75:18	7	)
STATEMENTS	76:3	76:3	7	
EXPR_STATEMENT	76:3	76:14	8	n = ( DWORD ) mb ;
EXPR	76:3	76:3	9	n = ( DWORD ) mb
ASSIGN	76:3	76:5	10	n = ( DWORD ) mb
LVAL	76:3	76:3	11	n
FIELD	76:3	76:3	12	n
LEAF_NODE	76:3	76:3	13	n
ASSIGN_OP	76:4	76:4	11	=
LEAF_NODE	76:4	76:4	12	=
RVAL	76:5	76:12	11	( DWORD ) mb
LEAF_NODE	76:5	76:5	12	(
TYPE_NAME	76:6	76:6	12	DWORD
LEAF_NODE	76:6	76:6	13	DWORD
LEAF_NODE	76:11	76:11	12	)
FIELD	76:12	76:12	12	mb
LEAF_NODE	76:12	76:12	13	mb
LEAF_NODE	76:14	76:14	9	;
SELECTION	77:2	78:3	6	
KEYWORD	77:2	77:2	7	if
LEAF_NODE	77:2	77:2	8	if
LEAF_NODE	77:5	77:5	7	(
CONDITION	77:6	77:6	7	! ReadFile ( fd , ( LPVOID ) ma , n , & o , NULL )
EXPR	77:6	77:6	8	! ReadFile ( fd , ( LPVOID ) ma , n , & o , NULL )
UNARY_EXPR	77:6	77:7	9	! ReadFile ( fd , ( LPVOID ) ma , n , & o , NULL )
UNARY_OPERATOR	77:6	77:6	10	!
LEAF_NODE	77:6	77:6	11	!
FUNCTION_CALL	77:7	77:39	10	ReadFile ( fd , ( LPVOID ) ma , n , & o , NULL )
CALLEE	77:7	77:7	11	ReadFile
LEAF_NODE	77:7	77:7	12	ReadFile
LEAF_NODE	77:15	77:15	11	(
ARGUMENT	77:16	77:16	11	fd
FIELD	77:16	77:16	12	fd
LEAF_NODE	77:16	77:16	13	fd
LEAF_NODE	77:18	77:18	11	,
ARGUMENT	77:19	77:27	11	( LPVOID ) ma
LEAF_NODE	77:19	77:19	12	(
TYPE_NAME	77:20	77:20	12	LPVOID
LEAF_NODE	77:20	77:20	13	LPVOID
LEAF_NODE	77:26	77:26	12	)
FIELD	77:27	77:27	12	ma
LEAF_NODE	77:27	77:27	13	ma
LEAF_NODE	77:29	77:29	11	,
ARGUMENT	77:30	77:30	11	n
FIELD	77:30	77:30	12	n
LEAF_NODE	77:30	77:30	13	n
LEAF_NODE	77:31	77:31	11	,
ARGUMENT	77:32	77:32	11	& o
UNARY_EXPR	77:32	77:33	12	& o
UNARY_OPERATOR	77:32	77:32	13	&
LEAF_NODE	77:32	77:32	14	&
FIELD	77:33	77:33	13	o
LEAF_NODE	77:33	77:33	14	o
LEAF_NODE	77:34	77:34	11	,
ARGUMENT	77:35	77:35	11	NULL
FIELD	77:35	77:35	12	NULL
LEAF_NODE	77:35	77:35	13	NULL
LEAF_NODE	77:39	77:39	11	)
LEAF_NODE	77:40	77:40	7	)
STATEMENTS	78:3	78:3	7	
JUMP_STATEMENT	78:3	78:12	8	return ( 0 ) ;
KEYWORD	78:3	78:3	9	return
LEAF_NODE	78:3	78:3	10	return
DESTINATION	78:9	78:9	9	( 0 )
EXPR	78:9	78:11	10	( 0 )
LEAF_NODE	78:9	78:9	11	(
FIELD	78:10	78:10	11	0
LEAF_NODE	78:10	78:10	12	0
LEAF_NODE	78:11	78:11	11	)
LEAF_NODE	78:12	78:12	9	;
EXPR_STATEMENT	79:2	79:7	6	ma += o ;
EXPR	79:2	79:2	7	ma += o
ASSIGN	79:2	79:6	8	ma += o
LVAL	79:2	79:2	9	ma
FIELD	79:2	79:2	10	ma
LEAF_NODE	79:2	79:2	11	ma
ASSIGN_OP	79:4	79:4	9	+=
LEAF_NODE	79:4	79:4	10	+=
RVAL	79:6	79:6	9	o
FIELD	79:6	79:6	10	o
LEAF_NODE	79:6	79:6	11	o
LEAF_NODE	79:7	79:7	7	;
EXPR_STATEMENT	80:2	80:7	6	mb -= o ;
EXPR	80:2	80:2	7	mb -= o
ASSIGN	80:2	80:6	8	mb -= o
LVAL	80:2	80:2	9	mb
FIELD	80:2	80:2	10	mb
LEAF_NODE	80:2	80:2	11	mb
ASSIGN_OP	80:4	80:4	9	-=
LEAF_NODE	80:4	80:4	10	-=
RVAL	80:6	80:6	9	o
FIELD	80:6	80:6	10	o
LEAF_NODE	80:6	80:6	11	o
LEAF_NODE	80:7	80:7	7	;
EXPR_STATEMENT	81:2	81:6	6	p += o ;
EXPR	81:2	81:2	7	p += o
ASSIGN	81:2	81:5	8	p += o
LVAL	81:2	81:2	9	p
FIELD	81:2	81:2	10	p
LEAF_NODE	81:2	81:2	11	p
ASSIGN_OP	81:3	81:3	9	+=
LEAF_NODE	81:3	81:3	10	+=
RVAL	81:5	81:5	9	o
FIELD	81:5	81:5	10	o
LEAF_NODE	81:5	81:5	11	o
LEAF_NODE	81:6	81:6	7	;
SELECTION	82:2	83:3	6	
KEYWORD	82:2	82:2	7	if
LEAF_NODE	82:2	82:2	8	if
LEAF_NODE	82:5	82:5	7	(
CONDITION	82:6	82:6	7	o != n
EXPR	82:6	82:9	8	o != n
FIELD	82:6	82:6	9	o
LEAF_NODE	82:6	82:6	10	o
EQ_OPERATOR	82:7	82:7	9	!=
LEAF_NODE	82:7	82:7	10	!=
FIELD	82:9	82:9	9	n
LEAF_NODE	82:9	82:9	10	n
LEAF_NODE	82:10	82:10	7	)
STATEMENTS	83:3	83:3	7	
JUMP_STATEMENT	83:3	83:8	8	break DESTINATION ;
KEYWORD	83:3	83:3	9	break
LEAF_NODE	83:3	83:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	83:8	83:8	9	;
LEAF_NODE	84:1	84:1	5	}
LEAF_NODE	85:1	85:1	3	return
LEAF_NODE	85:7	85:7	3	(
LEAF_NODE	85:8	85:8	3	p
LEAF_NODE	85:9	85:9	3	)
LEAF_NODE	85:10	85:10	3	;
LEAF_NODE	86:0	86:0	2	}
FUNCTION_DEF	88:0	116:0	1	
RETURN_TYPE	88:0	88:7	2	static tmsize_t
LEAF_NODE	88:0	88:0	3	static
TYPE_NAME	88:7	88:7	3	tmsize_t
LEAF_NODE	88:7	88:7	4	tmsize_t
FUNCTION_NAME	89:0	89:0	2	_tiffWriteProc
LEAF_NODE	89:0	89:0	3	_tiffWriteProc
PARAMETER_LIST	89:14	89:53	2	( thandle_t fd , void * buf , tmsize_t size )
LEAF_NODE	89:14	89:14	3	(
PARAMETER_DECL	89:15	89:25	3	thandle_t fd
TYPE	89:15	89:15	4	thandle_t
TYPE_NAME	89:15	89:15	5	thandle_t
LEAF_NODE	89:15	89:15	6	thandle_t
NAME	89:25	89:25	4	fd
LEAF_NODE	89:25	89:25	5	fd
LEAF_NODE	89:27	89:27	3	,
PARAMETER_DECL	89:29	89:35	3	void * buf
TYPE	89:29	89:33	4	void *
TYPE_NAME	89:29	89:29	5	void
LEAF_NODE	89:29	89:29	6	void
POINTER	89:33	89:33	5	*
LEAF_NODE	89:33	89:33	6	*
NAME	89:35	89:35	4	buf
LEAF_NODE	89:35	89:35	5	buf
LEAF_NODE	89:38	89:38	3	,
PARAMETER_DECL	89:40	89:49	3	tmsize_t size
TYPE	89:40	89:40	4	tmsize_t
TYPE_NAME	89:40	89:40	5	tmsize_t
LEAF_NODE	89:40	89:40	6	tmsize_t
NAME	89:49	89:49	4	size
LEAF_NODE	89:49	89:49	5	size
LEAF_NODE	89:53	89:53	3	)
LEAF_NODE	90:0	90:0	2	{
STATEMENTS	94:1	115:10	2	
SIMPLE_DECL	94:1	94:10	3	uint8 * ma ;
VAR_DECL	94:1	94:8	4	uint8 * ma
TYPE	94:1	94:6	5	uint8 *
TYPE_NAME	94:1	94:1	6	uint8
LEAF_NODE	94:1	94:1	7	uint8
POINTER	94:6	94:6	6	*
LEAF_NODE	94:6	94:6	7	*
NAME	94:8	94:8	5	ma
LEAF_NODE	94:8	94:8	6	ma
LEAF_NODE	94:10	94:10	4	;
SIMPLE_DECL	95:1	95:10	3	uint64 mb ;
VAR_DECL	95:1	95:8	4	uint64 mb
TYPE	95:1	95:1	5	uint64
TYPE_NAME	95:1	95:1	6	uint64
LEAF_NODE	95:1	95:1	7	uint64
NAME	95:8	95:8	5	mb
LEAF_NODE	95:8	95:8	6	mb
LEAF_NODE	95:10	95:10	4	;
SIMPLE_DECL	96:1	96:8	3	DWORD n ;
VAR_DECL	96:1	96:7	4	DWORD n
TYPE	96:1	96:1	5	DWORD
TYPE_NAME	96:1	96:1	6	DWORD
LEAF_NODE	96:1	96:1	7	DWORD
NAME	96:7	96:7	5	n
LEAF_NODE	96:7	96:7	6	n
LEAF_NODE	96:8	96:8	4	;
SIMPLE_DECL	97:1	97:8	3	DWORD o ;
VAR_DECL	97:1	97:7	4	DWORD o
TYPE	97:1	97:1	5	DWORD
TYPE_NAME	97:1	97:1	6	DWORD
LEAF_NODE	97:1	97:1	7	DWORD
NAME	97:7	97:7	5	o
LEAF_NODE	97:7	97:7	6	o
LEAF_NODE	97:8	97:8	4	;
SIMPLE_DECL	98:1	98:11	3	tmsize_t p ;
VAR_DECL	98:1	98:10	4	tmsize_t p
TYPE	98:1	98:1	5	tmsize_t
TYPE_NAME	98:1	98:1	6	tmsize_t
LEAF_NODE	98:1	98:1	7	tmsize_t
NAME	98:10	98:10	5	p
LEAF_NODE	98:10	98:10	6	p
LEAF_NODE	98:11	98:11	4	;
EXPR_STATEMENT	99:1	99:15	3	ma = ( uint8 * ) buf ;
EXPR	99:1	99:1	4	ma = ( uint8 * ) buf
ASSIGN	99:1	99:4	5	ma = ( uint8 * ) buf
LVAL	99:1	99:1	6	ma
FIELD	99:1	99:1	7	ma
LEAF_NODE	99:1	99:1	8	ma
ASSIGN_OP	99:3	99:3	6	=
LEAF_NODE	99:3	99:3	7	=
RVAL	99:4	99:12	6	( uint8 * ) buf
LEAF_NODE	99:4	99:4	7	(
TYPE_NAME	99:5	99:5	7	uint8
LEAF_NODE	99:5	99:5	8	uint8
LEAF_NODE	99:10	99:10	7	*
LEAF_NODE	99:11	99:11	7	)
FIELD	99:12	99:12	7	buf
LEAF_NODE	99:12	99:12	8	buf
LEAF_NODE	99:15	99:15	4	;
EXPR_STATEMENT	100:1	100:8	3	mb = size ;
EXPR	100:1	100:1	4	mb = size
ASSIGN	100:1	100:4	5	mb = size
LVAL	100:1	100:1	6	mb
FIELD	100:1	100:1	7	mb
LEAF_NODE	100:1	100:1	8	mb
ASSIGN_OP	100:3	100:3	6	=
LEAF_NODE	100:3	100:3	7	=
RVAL	100:4	100:4	6	size
FIELD	100:4	100:4	7	size
LEAF_NODE	100:4	100:4	8	size
LEAF_NODE	100:8	100:8	4	;
EXPR_STATEMENT	101:1	101:4	3	p = 0 ;
EXPR	101:1	101:1	4	p = 0
ASSIGN	101:1	101:3	5	p = 0
LVAL	101:1	101:1	6	p
FIELD	101:1	101:1	7	p
LEAF_NODE	101:1	101:1	8	p
ASSIGN_OP	101:2	101:2	6	=
LEAF_NODE	101:2	101:2	7	=
RVAL	101:3	101:3	6	0
FIELD	101:3	101:3	7	0
LEAF_NODE	101:3	101:3	8	0
LEAF_NODE	101:4	101:4	4	;
ITERATION	102:1	103:1	3	
KEYWORD	102:1	102:1	4	while
LEAF_NODE	102:1	102:1	5	while
LEAF_NODE	102:7	102:7	4	(
CONDITION	102:8	102:8	4	mb > 0
EXPR	102:8	102:11	5	mb > 0
FIELD	102:8	102:8	6	mb
LEAF_NODE	102:8	102:8	7	mb
REL_OPERATOR	102:10	102:10	6	>
LEAF_NODE	102:10	102:10	7	>
FIELD	102:11	102:11	6	0
LEAF_NODE	102:11	102:11	7	0
LEAF_NODE	102:12	102:12	4	)
STATEMENTS	103:1	114:1	4	
LEAF_NODE	103:1	103:1	5	{
STATEMENTS	104:2	112:2	5	
EXPR_STATEMENT	104:2	104:16	6	n = 0x80000000UL ;
EXPR	104:2	104:2	7	n = 0x80000000UL
ASSIGN	104:2	104:4	8	n = 0x80000000UL
LVAL	104:2	104:2	9	n
FIELD	104:2	104:2	10	n
LEAF_NODE	104:2	104:2	11	n
ASSIGN_OP	104:3	104:3	9	=
LEAF_NODE	104:3	104:3	10	=
RVAL	104:4	104:4	9	0x80000000UL
FIELD	104:4	104:4	10	0x80000000UL
LEAF_NODE	104:4	104:4	11	0x80000000UL
LEAF_NODE	104:16	104:16	7	;
SELECTION	105:2	106:3	6	
KEYWORD	105:2	105:2	7	if
LEAF_NODE	105:2	105:2	8	if
LEAF_NODE	105:5	105:5	7	(
CONDITION	105:6	105:6	7	( uint64 ) n > mb
EXPR	105:6	105:16	8	( uint64 ) n > mb
LEAF_NODE	105:6	105:6	9	(
TYPE_NAME	105:7	105:7	9	uint64
LEAF_NODE	105:7	105:7	10	uint64
LEAF_NODE	105:13	105:13	9	)
FIELD	105:14	105:14	9	n
LEAF_NODE	105:14	105:14	10	n
REL_OPERATOR	105:15	105:15	9	>
LEAF_NODE	105:15	105:15	10	>
FIELD	105:16	105:16	9	mb
LEAF_NODE	105:16	105:16	10	mb
LEAF_NODE	105:18	105:18	7	)
STATEMENTS	106:3	106:3	7	
EXPR_STATEMENT	106:3	106:14	8	n = ( DWORD ) mb ;
EXPR	106:3	106:3	9	n = ( DWORD ) mb
ASSIGN	106:3	106:5	10	n = ( DWORD ) mb
LVAL	106:3	106:3	11	n
FIELD	106:3	106:3	12	n
LEAF_NODE	106:3	106:3	13	n
ASSIGN_OP	106:4	106:4	11	=
LEAF_NODE	106:4	106:4	12	=
RVAL	106:5	106:12	11	( DWORD ) mb
LEAF_NODE	106:5	106:5	12	(
TYPE_NAME	106:6	106:6	12	DWORD
LEAF_NODE	106:6	106:6	13	DWORD
LEAF_NODE	106:11	106:11	12	)
FIELD	106:12	106:12	12	mb
LEAF_NODE	106:12	106:12	13	mb
LEAF_NODE	106:14	106:14	9	;
SELECTION	107:2	108:3	6	
KEYWORD	107:2	107:2	7	if
LEAF_NODE	107:2	107:2	8	if
LEAF_NODE	107:5	107:5	7	(
CONDITION	107:6	107:6	7	! WriteFile ( fd , ( LPVOID ) ma , n , & o , NULL )
EXPR	107:6	107:6	8	! WriteFile ( fd , ( LPVOID ) ma , n , & o , NULL )
UNARY_EXPR	107:6	107:7	9	! WriteFile ( fd , ( LPVOID ) ma , n , & o , NULL )
UNARY_OPERATOR	107:6	107:6	10	!
LEAF_NODE	107:6	107:6	11	!
FUNCTION_CALL	107:7	107:40	10	WriteFile ( fd , ( LPVOID ) ma , n , & o , NULL )
CALLEE	107:7	107:7	11	WriteFile
LEAF_NODE	107:7	107:7	12	WriteFile
LEAF_NODE	107:16	107:16	11	(
ARGUMENT	107:17	107:17	11	fd
FIELD	107:17	107:17	12	fd
LEAF_NODE	107:17	107:17	13	fd
LEAF_NODE	107:19	107:19	11	,
ARGUMENT	107:20	107:28	11	( LPVOID ) ma
LEAF_NODE	107:20	107:20	12	(
TYPE_NAME	107:21	107:21	12	LPVOID
LEAF_NODE	107:21	107:21	13	LPVOID
LEAF_NODE	107:27	107:27	12	)
FIELD	107:28	107:28	12	ma
LEAF_NODE	107:28	107:28	13	ma
LEAF_NODE	107:30	107:30	11	,
ARGUMENT	107:31	107:31	11	n
FIELD	107:31	107:31	12	n
LEAF_NODE	107:31	107:31	13	n
LEAF_NODE	107:32	107:32	11	,
ARGUMENT	107:33	107:33	11	& o
UNARY_EXPR	107:33	107:34	12	& o
UNARY_OPERATOR	107:33	107:33	13	&
LEAF_NODE	107:33	107:33	14	&
FIELD	107:34	107:34	13	o
LEAF_NODE	107:34	107:34	14	o
LEAF_NODE	107:35	107:35	11	,
ARGUMENT	107:36	107:36	11	NULL
FIELD	107:36	107:36	12	NULL
LEAF_NODE	107:36	107:36	13	NULL
LEAF_NODE	107:40	107:40	11	)
LEAF_NODE	107:41	107:41	7	)
STATEMENTS	108:3	108:3	7	
JUMP_STATEMENT	108:3	108:12	8	return ( 0 ) ;
KEYWORD	108:3	108:3	9	return
LEAF_NODE	108:3	108:3	10	return
DESTINATION	108:9	108:9	9	( 0 )
EXPR	108:9	108:11	10	( 0 )
LEAF_NODE	108:9	108:9	11	(
FIELD	108:10	108:10	11	0
LEAF_NODE	108:10	108:10	12	0
LEAF_NODE	108:11	108:11	11	)
LEAF_NODE	108:12	108:12	9	;
EXPR_STATEMENT	109:2	109:7	6	ma += o ;
EXPR	109:2	109:2	7	ma += o
ASSIGN	109:2	109:6	8	ma += o
LVAL	109:2	109:2	9	ma
FIELD	109:2	109:2	10	ma
LEAF_NODE	109:2	109:2	11	ma
ASSIGN_OP	109:4	109:4	9	+=
LEAF_NODE	109:4	109:4	10	+=
RVAL	109:6	109:6	9	o
FIELD	109:6	109:6	10	o
LEAF_NODE	109:6	109:6	11	o
LEAF_NODE	109:7	109:7	7	;
EXPR_STATEMENT	110:2	110:7	6	mb -= o ;
EXPR	110:2	110:2	7	mb -= o
ASSIGN	110:2	110:6	8	mb -= o
LVAL	110:2	110:2	9	mb
FIELD	110:2	110:2	10	mb
LEAF_NODE	110:2	110:2	11	mb
ASSIGN_OP	110:4	110:4	9	-=
LEAF_NODE	110:4	110:4	10	-=
RVAL	110:6	110:6	9	o
FIELD	110:6	110:6	10	o
LEAF_NODE	110:6	110:6	11	o
LEAF_NODE	110:7	110:7	7	;
EXPR_STATEMENT	111:2	111:6	6	p += o ;
EXPR	111:2	111:2	7	p += o
ASSIGN	111:2	111:5	8	p += o
LVAL	111:2	111:2	9	p
FIELD	111:2	111:2	10	p
LEAF_NODE	111:2	111:2	11	p
ASSIGN_OP	111:3	111:3	9	+=
LEAF_NODE	111:3	111:3	10	+=
RVAL	111:5	111:5	9	o
FIELD	111:5	111:5	10	o
LEAF_NODE	111:5	111:5	11	o
LEAF_NODE	111:6	111:6	7	;
SELECTION	112:2	113:3	6	
KEYWORD	112:2	112:2	7	if
LEAF_NODE	112:2	112:2	8	if
LEAF_NODE	112:5	112:5	7	(
CONDITION	112:6	112:6	7	o != n
EXPR	112:6	112:9	8	o != n
FIELD	112:6	112:6	9	o
LEAF_NODE	112:6	112:6	10	o
EQ_OPERATOR	112:7	112:7	9	!=
LEAF_NODE	112:7	112:7	10	!=
FIELD	112:9	112:9	9	n
LEAF_NODE	112:9	112:9	10	n
LEAF_NODE	112:10	112:10	7	)
STATEMENTS	113:3	113:3	7	
JUMP_STATEMENT	113:3	113:8	8	break DESTINATION ;
KEYWORD	113:3	113:3	9	break
LEAF_NODE	113:3	113:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	113:8	113:8	9	;
LEAF_NODE	114:1	114:1	5	}
LEAF_NODE	115:1	115:1	3	return
LEAF_NODE	115:7	115:7	3	(
LEAF_NODE	115:8	115:8	3	p
LEAF_NODE	115:9	115:9	3	)
LEAF_NODE	115:10	115:10	3	;
LEAF_NODE	116:0	116:0	2	}
FUNCTION_DEF	118:0	143:0	1	
RETURN_TYPE	118:0	118:7	2	static uint64
LEAF_NODE	118:0	118:0	3	static
TYPE_NAME	118:7	118:7	3	uint64
LEAF_NODE	118:7	118:7	4	uint64
FUNCTION_NAME	119:0	119:0	2	_tiffSeekProc
LEAF_NODE	119:0	119:0	3	_tiffSeekProc
PARAMETER_LIST	119:13	119:50	2	( thandle_t fd , uint64 off , int whence )
LEAF_NODE	119:13	119:13	3	(
PARAMETER_DECL	119:14	119:24	3	thandle_t fd
TYPE	119:14	119:14	4	thandle_t
TYPE_NAME	119:14	119:14	5	thandle_t
LEAF_NODE	119:14	119:14	6	thandle_t
NAME	119:24	119:24	4	fd
LEAF_NODE	119:24	119:24	5	fd
LEAF_NODE	119:26	119:26	3	,
PARAMETER_DECL	119:28	119:35	3	uint64 off
TYPE	119:28	119:28	4	uint64
TYPE_NAME	119:28	119:28	5	uint64
LEAF_NODE	119:28	119:28	6	uint64
NAME	119:35	119:35	4	off
LEAF_NODE	119:35	119:35	5	off
LEAF_NODE	119:38	119:38	3	,
PARAMETER_DECL	119:40	119:44	3	int whence
TYPE	119:40	119:40	4	int
TYPE_NAME	119:40	119:40	5	int
LEAF_NODE	119:40	119:40	6	int
NAME	119:44	119:44	4	whence
LEAF_NODE	119:44	119:44	5	whence
LEAF_NODE	119:50	119:50	3	)
LEAF_NODE	120:0	120:0	2	{
STATEMENTS	121:1	142:1	2	
SIMPLE_DECL	121:1	121:20	3	LARGE_INTEGER offli ;
VAR_DECL	121:1	121:15	4	LARGE_INTEGER offli
TYPE	121:1	121:1	5	LARGE_INTEGER
TYPE_NAME	121:1	121:1	6	LARGE_INTEGER
LEAF_NODE	121:1	121:1	7	LARGE_INTEGER
NAME	121:15	121:15	5	offli
LEAF_NODE	121:15	121:15	6	offli
LEAF_NODE	121:20	121:20	4	;
SIMPLE_DECL	122:1	122:19	3	DWORD dwMoveMethod ;
VAR_DECL	122:1	122:7	4	DWORD dwMoveMethod
TYPE	122:1	122:1	5	DWORD
TYPE_NAME	122:1	122:1	6	DWORD
LEAF_NODE	122:1	122:1	7	DWORD
NAME	122:7	122:7	5	dwMoveMethod
LEAF_NODE	122:7	122:7	6	dwMoveMethod
LEAF_NODE	122:19	122:19	4	;
EXPR_STATEMENT	123:1	123:21	3	offli . QuadPart = off ;
EXPR	123:1	123:1	4	offli . QuadPart = off
ASSIGN	123:1	123:18	5	offli . QuadPart = off
LVAL	123:1	123:1	6	offli . QuadPart
FIELD	123:1	123:7	7	offli . QuadPart
LEAF_NODE	123:1	123:1	8	offli
LEAF_NODE	123:6	123:6	8	.
LEAF_NODE	123:7	123:7	8	QuadPart
ASSIGN_OP	123:16	123:16	6	=
LEAF_NODE	123:16	123:16	7	=
RVAL	123:18	123:18	6	off
FIELD	123:18	123:18	7	off
LEAF_NODE	123:18	123:18	8	off
LEAF_NODE	123:21	123:21	4	;
SELECTION	124:1	125:1	3	
KEYWORD	124:1	124:1	4	switch
LEAF_NODE	124:1	124:1	5	switch
LEAF_NODE	124:7	124:7	4	(
CONDITION	124:8	124:8	4	whence
EXPR	124:8	124:8	5	whence
FIELD	124:8	124:8	6	whence
LEAF_NODE	124:8	124:8	7	whence
LEAF_NODE	124:14	124:14	4	)
STATEMENTS	125:1	138:1	4	
LEAF_NODE	125:1	125:1	5	{
STATEMENTS	126:2	137:3	5	
LABEL	126:2	126:15	6	case SEEK_SET :
LEAF_NODE	126:2	126:2	7	case
LEAF_NODE	126:7	126:7	7	SEEK_SET
LEAF_NODE	126:15	126:15	7	:
EXPR_STATEMENT	127:3	127:28	6	dwMoveMethod = FILE_BEGIN ;
EXPR	127:3	127:3	7	dwMoveMethod = FILE_BEGIN
ASSIGN	127:3	127:18	8	dwMoveMethod = FILE_BEGIN
LVAL	127:3	127:3	9	dwMoveMethod
FIELD	127:3	127:3	10	dwMoveMethod
LEAF_NODE	127:3	127:3	11	dwMoveMethod
ASSIGN_OP	127:16	127:16	9	=
LEAF_NODE	127:16	127:16	10	=
RVAL	127:18	127:18	9	FILE_BEGIN
FIELD	127:18	127:18	10	FILE_BEGIN
LEAF_NODE	127:18	127:18	11	FILE_BEGIN
LEAF_NODE	127:28	127:28	7	;
JUMP_STATEMENT	128:3	128:8	6	break DESTINATION ;
KEYWORD	128:3	128:3	7	break
LEAF_NODE	128:3	128:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	128:8	128:8	7	;
LABEL	129:2	129:15	6	case SEEK_CUR :
LEAF_NODE	129:2	129:2	7	case
LEAF_NODE	129:7	129:7	7	SEEK_CUR
LEAF_NODE	129:15	129:15	7	:
EXPR_STATEMENT	130:3	130:30	6	dwMoveMethod = FILE_CURRENT ;
EXPR	130:3	130:3	7	dwMoveMethod = FILE_CURRENT
ASSIGN	130:3	130:18	8	dwMoveMethod = FILE_CURRENT
LVAL	130:3	130:3	9	dwMoveMethod
FIELD	130:3	130:3	10	dwMoveMethod
LEAF_NODE	130:3	130:3	11	dwMoveMethod
ASSIGN_OP	130:16	130:16	9	=
LEAF_NODE	130:16	130:16	10	=
RVAL	130:18	130:18	9	FILE_CURRENT
FIELD	130:18	130:18	10	FILE_CURRENT
LEAF_NODE	130:18	130:18	11	FILE_CURRENT
LEAF_NODE	130:30	130:30	7	;
JUMP_STATEMENT	131:3	131:8	6	break DESTINATION ;
KEYWORD	131:3	131:3	7	break
LEAF_NODE	131:3	131:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	131:8	131:8	7	;
LABEL	132:2	132:15	6	case SEEK_END :
LEAF_NODE	132:2	132:2	7	case
LEAF_NODE	132:7	132:7	7	SEEK_END
LEAF_NODE	132:15	132:15	7	:
EXPR_STATEMENT	133:3	133:26	6	dwMoveMethod = FILE_END ;
EXPR	133:3	133:3	7	dwMoveMethod = FILE_END
ASSIGN	133:3	133:18	8	dwMoveMethod = FILE_END
LVAL	133:3	133:3	9	dwMoveMethod
FIELD	133:3	133:3	10	dwMoveMethod
LEAF_NODE	133:3	133:3	11	dwMoveMethod
ASSIGN_OP	133:16	133:16	9	=
LEAF_NODE	133:16	133:16	10	=
RVAL	133:18	133:18	9	FILE_END
FIELD	133:18	133:18	10	FILE_END
LEAF_NODE	133:18	133:18	11	FILE_END
LEAF_NODE	133:26	133:26	7	;
JUMP_STATEMENT	134:3	134:8	6	break DESTINATION ;
KEYWORD	134:3	134:3	7	break
LEAF_NODE	134:3	134:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	134:8	134:8	7	;
LABEL	135:2	135:9	6	default :
LEAF_NODE	135:2	135:2	7	default
LEAF_NODE	135:9	135:9	7	:
EXPR_STATEMENT	136:3	136:28	6	dwMoveMethod = FILE_BEGIN ;
EXPR	136:3	136:3	7	dwMoveMethod = FILE_BEGIN
ASSIGN	136:3	136:18	8	dwMoveMethod = FILE_BEGIN
LVAL	136:3	136:3	9	dwMoveMethod
FIELD	136:3	136:3	10	dwMoveMethod
LEAF_NODE	136:3	136:3	11	dwMoveMethod
ASSIGN_OP	136:16	136:16	9	=
LEAF_NODE	136:16	136:16	10	=
RVAL	136:18	136:18	9	FILE_BEGIN
FIELD	136:18	136:18	10	FILE_BEGIN
LEAF_NODE	136:18	136:18	11	FILE_BEGIN
LEAF_NODE	136:28	136:28	7	;
JUMP_STATEMENT	137:3	137:8	6	break DESTINATION ;
KEYWORD	137:3	137:3	7	break
LEAF_NODE	137:3	137:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	137:8	137:8	7	;
LEAF_NODE	138:1	138:1	5	}
EXPR_STATEMENT	139:1	139:76	3	offli . LowPart = SetFilePointer ( fd , offli . LowPart , & offli . HighPart , dwMoveMethod ) ;
EXPR	139:1	139:1	4	offli . LowPart = SetFilePointer ( fd , offli . LowPart , & offli . HighPart , dwMoveMethod )
ASSIGN	139:1	139:15	5	offli . LowPart = SetFilePointer ( fd , offli . LowPart , & offli . HighPart , dwMoveMethod )
LVAL	139:1	139:1	6	offli . LowPart
FIELD	139:1	139:7	7	offli . LowPart
LEAF_NODE	139:1	139:1	8	offli
LEAF_NODE	139:6	139:6	8	.
LEAF_NODE	139:7	139:7	8	LowPart
ASSIGN_OP	139:14	139:14	6	=
LEAF_NODE	139:14	139:14	7	=
RVAL	139:15	139:15	6	SetFilePointer ( fd , offli . LowPart , & offli . HighPart , dwMoveMethod )
FUNCTION_CALL	139:15	139:75	7	SetFilePointer ( fd , offli . LowPart , & offli . HighPart , dwMoveMethod )
CALLEE	139:15	139:15	8	SetFilePointer
LEAF_NODE	139:15	139:15	9	SetFilePointer
LEAF_NODE	139:29	139:29	8	(
ARGUMENT	139:30	139:30	8	fd
FIELD	139:30	139:30	9	fd
LEAF_NODE	139:30	139:30	10	fd
LEAF_NODE	139:32	139:32	8	,
ARGUMENT	139:33	139:33	8	offli . LowPart
FIELD	139:33	139:39	9	offli . LowPart
LEAF_NODE	139:33	139:33	10	offli
LEAF_NODE	139:38	139:38	10	.
LEAF_NODE	139:39	139:39	10	LowPart
LEAF_NODE	139:46	139:46	8	,
ARGUMENT	139:47	139:47	8	& offli . HighPart
UNARY_EXPR	139:47	139:48	9	& offli . HighPart
UNARY_OPERATOR	139:47	139:47	10	&
LEAF_NODE	139:47	139:47	11	&
FIELD	139:48	139:54	10	offli . HighPart
LEAF_NODE	139:48	139:48	11	offli
LEAF_NODE	139:53	139:53	11	.
LEAF_NODE	139:54	139:54	11	HighPart
LEAF_NODE	139:62	139:62	8	,
ARGUMENT	139:63	139:63	8	dwMoveMethod
FIELD	139:63	139:63	9	dwMoveMethod
LEAF_NODE	139:63	139:63	10	dwMoveMethod
LEAF_NODE	139:75	139:75	8	)
LEAF_NODE	139:76	139:76	4	;
SELECTION	140:1	141:2	3	
KEYWORD	140:1	140:1	4	if
LEAF_NODE	140:1	140:1	5	if
LEAF_NODE	140:4	140:4	4	(
CONDITION	140:5	140:5	4	( offli . LowPart == INVALID_SET_FILE_POINTER ) && ( GetLastError ( ) != NO_ERROR )
EXPR	140:5	140:5	5	( offli . LowPart == INVALID_SET_FILE_POINTER ) && ( GetLastError ( ) != NO_ERROR )
AND	140:5	140:48	6	( offli . LowPart == INVALID_SET_FILE_POINTER ) && ( GetLastError ( ) != NO_ERROR )
EXPR	140:5	140:45	7	( offli . LowPart == INVALID_SET_FILE_POINTER )
LEAF_NODE	140:5	140:5	8	(
FIELD	140:6	140:12	8	offli . LowPart
LEAF_NODE	140:6	140:6	9	offli
LEAF_NODE	140:11	140:11	9	.
LEAF_NODE	140:12	140:12	9	LowPart
EQ_OPERATOR	140:19	140:19	8	==
LEAF_NODE	140:19	140:19	9	==
FIELD	140:21	140:21	8	INVALID_SET_FILE_POINTER
LEAF_NODE	140:21	140:21	9	INVALID_SET_FILE_POINTER
LEAF_NODE	140:45	140:45	8	)
LEAF_NODE	140:46	140:46	7	&&
EXPR	140:48	140:73	7	( GetLastError ( ) != NO_ERROR )
LEAF_NODE	140:48	140:48	8	(
FUNCTION_CALL	140:49	140:62	8	GetLastError ( )
CALLEE	140:49	140:49	9	GetLastError
LEAF_NODE	140:49	140:49	10	GetLastError
LEAF_NODE	140:61	140:61	9	(
LEAF_NODE	140:62	140:62	9	)
EQ_OPERATOR	140:63	140:63	8	!=
LEAF_NODE	140:63	140:63	9	!=
FIELD	140:65	140:65	8	NO_ERROR
LEAF_NODE	140:65	140:65	9	NO_ERROR
LEAF_NODE	140:73	140:73	8	)
LEAF_NODE	140:74	140:74	4	)
STATEMENTS	141:2	141:2	4	
EXPR_STATEMENT	141:2	141:18	5	offli . QuadPart = 0 ;
EXPR	141:2	141:2	6	offli . QuadPart = 0
ASSIGN	141:2	141:17	7	offli . QuadPart = 0
LVAL	141:2	141:2	8	offli . QuadPart
FIELD	141:2	141:8	9	offli . QuadPart
LEAF_NODE	141:2	141:2	10	offli
LEAF_NODE	141:7	141:7	10	.
LEAF_NODE	141:8	141:8	10	QuadPart
ASSIGN_OP	141:16	141:16	8	=
LEAF_NODE	141:16	141:16	9	=
RVAL	141:17	141:17	8	0
FIELD	141:17	141:17	9	0
LEAF_NODE	141:17	141:17	10	0
LEAF_NODE	141:18	141:18	6	;
JUMP_STATEMENT	142:1	142:23	3	return ( offli . QuadPart ) ;
KEYWORD	142:1	142:1	4	return
LEAF_NODE	142:1	142:1	5	return
DESTINATION	142:7	142:7	4	( offli . QuadPart )
EXPR	142:7	142:22	5	( offli . QuadPart )
LEAF_NODE	142:7	142:7	6	(
FIELD	142:8	142:14	6	offli . QuadPart
LEAF_NODE	142:8	142:8	7	offli
LEAF_NODE	142:13	142:13	7	.
LEAF_NODE	142:14	142:14	7	QuadPart
LEAF_NODE	142:22	142:22	6	)
LEAF_NODE	142:23	142:23	4	;
LEAF_NODE	143:0	143:0	2	}
FUNCTION_DEF	145:0	149:0	1	
RETURN_TYPE	145:0	145:7	2	static int
LEAF_NODE	145:0	145:0	3	static
TYPE_NAME	145:7	145:7	3	int
LEAF_NODE	145:7	145:7	4	int
FUNCTION_NAME	146:0	146:0	2	_tiffCloseProc
LEAF_NODE	146:0	146:0	3	_tiffCloseProc
PARAMETER_LIST	146:14	146:27	2	( thandle_t fd )
LEAF_NODE	146:14	146:14	3	(
PARAMETER_DECL	146:15	146:25	3	thandle_t fd
TYPE	146:15	146:15	4	thandle_t
TYPE_NAME	146:15	146:15	5	thandle_t
LEAF_NODE	146:15	146:15	6	thandle_t
NAME	146:25	146:25	4	fd
LEAF_NODE	146:25	146:25	5	fd
LEAF_NODE	146:27	146:27	3	)
LEAF_NODE	147:0	147:0	2	{
STATEMENTS	148:1	148:1	2	
JUMP_STATEMENT	148:1	148:34	3	return ( CloseHandle ( fd ) ? 0 : - 1 ) ;
KEYWORD	148:1	148:1	4	return
LEAF_NODE	148:1	148:1	5	return
DESTINATION	148:8	148:8	4	( CloseHandle ( fd ) ? 0 : - 1 )
EXPR	148:8	148:33	5	( CloseHandle ( fd ) ? 0 : - 1 )
LEAF_NODE	148:8	148:8	6	(
COND_EXPR	148:9	148:31	6	CloseHandle ( fd ) ? 0 : - 1
CONDITION	148:9	148:9	7	CloseHandle ( fd )
FUNCTION_CALL	148:9	148:23	8	CloseHandle ( fd )
CALLEE	148:9	148:9	9	CloseHandle
LEAF_NODE	148:9	148:9	10	CloseHandle
LEAF_NODE	148:20	148:20	9	(
ARGUMENT	148:21	148:21	9	fd
FIELD	148:21	148:21	10	fd
LEAF_NODE	148:21	148:21	11	fd
LEAF_NODE	148:23	148:23	9	)
LEAF_NODE	148:25	148:25	7	?
EXPR	148:27	148:27	7	0
FIELD	148:27	148:27	8	0
LEAF_NODE	148:27	148:27	9	0
LEAF_NODE	148:29	148:29	7	:
UNARY_EXPR	148:31	148:32	7	- 1
UNARY_OPERATOR	148:31	148:31	8	-
LEAF_NODE	148:31	148:31	9	-
FIELD	148:32	148:32	8	1
LEAF_NODE	148:32	148:32	9	1
LEAF_NODE	148:33	148:33	6	)
LEAF_NODE	148:34	148:34	4	;
LEAF_NODE	149:0	149:0	2	}
FUNCTION_DEF	151:0	157:0	1	
RETURN_TYPE	151:0	151:7	2	static uint64
LEAF_NODE	151:0	151:0	3	static
TYPE_NAME	151:7	151:7	3	uint64
LEAF_NODE	151:7	151:7	4	uint64
FUNCTION_NAME	152:0	152:0	2	_tiffSizeProc
LEAF_NODE	152:0	152:0	3	_tiffSizeProc
PARAMETER_LIST	152:13	152:26	2	( thandle_t fd )
LEAF_NODE	152:13	152:13	3	(
PARAMETER_DECL	152:14	152:24	3	thandle_t fd
TYPE	152:14	152:14	4	thandle_t
TYPE_NAME	152:14	152:14	5	thandle_t
LEAF_NODE	152:14	152:14	6	thandle_t
NAME	152:24	152:24	4	fd
LEAF_NODE	152:24	152:24	5	fd
LEAF_NODE	152:26	152:26	3	)
LEAF_NODE	153:0	153:0	2	{
STATEMENTS	154:1	156:1	2	
SIMPLE_DECL	154:1	154:17	3	ULARGE_INTEGER m ;
VAR_DECL	154:1	154:16	4	ULARGE_INTEGER m
TYPE	154:1	154:1	5	ULARGE_INTEGER
TYPE_NAME	154:1	154:1	6	ULARGE_INTEGER
LEAF_NODE	154:1	154:1	7	ULARGE_INTEGER
NAME	154:16	154:16	5	m
LEAF_NODE	154:16	154:16	6	m
LEAF_NODE	154:17	154:17	4	;
EXPR_STATEMENT	155:1	155:38	3	m . LowPart = GetFileSize ( fd , & m . HighPart ) ;
EXPR	155:1	155:1	4	m . LowPart = GetFileSize ( fd , & m . HighPart )
ASSIGN	155:1	155:11	5	m . LowPart = GetFileSize ( fd , & m . HighPart )
LVAL	155:1	155:1	6	m . LowPart
FIELD	155:1	155:3	7	m . LowPart
LEAF_NODE	155:1	155:1	8	m
LEAF_NODE	155:2	155:2	8	.
LEAF_NODE	155:3	155:3	8	LowPart
ASSIGN_OP	155:10	155:10	6	=
LEAF_NODE	155:10	155:10	7	=
RVAL	155:11	155:11	6	GetFileSize ( fd , & m . HighPart )
FUNCTION_CALL	155:11	155:37	7	GetFileSize ( fd , & m . HighPart )
CALLEE	155:11	155:11	8	GetFileSize
LEAF_NODE	155:11	155:11	9	GetFileSize
LEAF_NODE	155:22	155:22	8	(
ARGUMENT	155:23	155:23	8	fd
FIELD	155:23	155:23	9	fd
LEAF_NODE	155:23	155:23	10	fd
LEAF_NODE	155:25	155:25	8	,
ARGUMENT	155:26	155:26	8	& m . HighPart
UNARY_EXPR	155:26	155:27	9	& m . HighPart
UNARY_OPERATOR	155:26	155:26	10	&
LEAF_NODE	155:26	155:26	11	&
FIELD	155:27	155:29	10	m . HighPart
LEAF_NODE	155:27	155:27	11	m
LEAF_NODE	155:28	155:28	11	.
LEAF_NODE	155:29	155:29	11	HighPart
LEAF_NODE	155:37	155:37	8	)
LEAF_NODE	155:38	155:38	4	;
JUMP_STATEMENT	156:1	156:19	3	return ( m . QuadPart ) ;
KEYWORD	156:1	156:1	4	return
LEAF_NODE	156:1	156:1	5	return
DESTINATION	156:7	156:7	4	( m . QuadPart )
EXPR	156:7	156:18	5	( m . QuadPart )
LEAF_NODE	156:7	156:7	6	(
FIELD	156:8	156:10	6	m . QuadPart
LEAF_NODE	156:8	156:8	7	m
LEAF_NODE	156:9	156:9	7	.
LEAF_NODE	156:10	156:10	7	QuadPart
LEAF_NODE	156:18	156:18	6	)
LEAF_NODE	156:19	156:19	4	;
LEAF_NODE	157:0	157:0	2	}
FUNCTION_DEF	159:0	166:0	1	
RETURN_TYPE	159:0	159:7	2	static int
LEAF_NODE	159:0	159:0	3	static
TYPE_NAME	159:7	159:7	3	int
LEAF_NODE	159:7	159:7	4	int
FUNCTION_NAME	160:0	160:0	2	_tiffDummyMapProc
LEAF_NODE	160:0	160:0	3	_tiffDummyMapProc
PARAMETER_LIST	160:17	160:59	2	( thandle_t fd , void * * pbase , toff_t * psize )
LEAF_NODE	160:17	160:17	3	(
PARAMETER_DECL	160:18	160:28	3	thandle_t fd
TYPE	160:18	160:18	4	thandle_t
TYPE_NAME	160:18	160:18	5	thandle_t
LEAF_NODE	160:18	160:18	6	thandle_t
NAME	160:28	160:28	4	fd
LEAF_NODE	160:28	160:28	5	fd
LEAF_NODE	160:30	160:30	3	,
PARAMETER_DECL	160:32	160:39	3	void * * pbase
TYPE	160:32	160:36	4	void * *
TYPE_NAME	160:32	160:32	5	void
LEAF_NODE	160:32	160:32	6	void
POINTER	160:36	160:37	5	* *
LEAF_NODE	160:36	160:36	6	*
LEAF_NODE	160:37	160:37	6	*
NAME	160:39	160:39	4	pbase
LEAF_NODE	160:39	160:39	5	pbase
LEAF_NODE	160:44	160:44	3	,
PARAMETER_DECL	160:46	160:54	3	toff_t * psize
TYPE	160:46	160:52	4	toff_t *
TYPE_NAME	160:46	160:46	5	toff_t
LEAF_NODE	160:46	160:46	6	toff_t
POINTER	160:52	160:52	5	*
LEAF_NODE	160:52	160:52	6	*
NAME	160:54	160:54	4	psize
LEAF_NODE	160:54	160:54	5	psize
LEAF_NODE	160:59	160:59	3	)
LEAF_NODE	161:0	161:0	2	{
STATEMENTS	162:1	165:1	2	
EXPR_STATEMENT	162:1	162:10	3	( void ) fd ;
EXPR	162:1	162:8	4	( void ) fd
LEAF_NODE	162:1	162:1	5	(
TYPE_NAME	162:2	162:2	5	void
LEAF_NODE	162:2	162:2	6	void
LEAF_NODE	162:6	162:6	5	)
FIELD	162:8	162:8	5	fd
LEAF_NODE	162:8	162:8	6	fd
LEAF_NODE	162:10	162:10	4	;
EXPR_STATEMENT	163:1	163:13	3	( void ) pbase ;
EXPR	163:1	163:8	4	( void ) pbase
LEAF_NODE	163:1	163:1	5	(
TYPE_NAME	163:2	163:2	5	void
LEAF_NODE	163:2	163:2	6	void
LEAF_NODE	163:6	163:6	5	)
FIELD	163:8	163:8	5	pbase
LEAF_NODE	163:8	163:8	6	pbase
LEAF_NODE	163:13	163:13	4	;
EXPR_STATEMENT	164:1	164:13	3	( void ) psize ;
EXPR	164:1	164:8	4	( void ) psize
LEAF_NODE	164:1	164:1	5	(
TYPE_NAME	164:2	164:2	5	void
LEAF_NODE	164:2	164:2	6	void
LEAF_NODE	164:6	164:6	5	)
FIELD	164:8	164:8	5	psize
LEAF_NODE	164:8	164:8	6	psize
LEAF_NODE	164:13	164:13	4	;
JUMP_STATEMENT	165:1	165:11	3	return ( 0 ) ;
KEYWORD	165:1	165:1	4	return
LEAF_NODE	165:1	165:1	5	return
DESTINATION	165:8	165:8	4	( 0 )
EXPR	165:8	165:10	5	( 0 )
LEAF_NODE	165:8	165:8	6	(
FIELD	165:9	165:9	6	0
LEAF_NODE	165:9	165:9	7	0
LEAF_NODE	165:10	165:10	6	)
LEAF_NODE	165:11	165:11	4	;
LEAF_NODE	166:0	166:0	2	}
FUNCTION_DEF	179:0	202:0	1	
RETURN_TYPE	179:0	179:7	2	static int
LEAF_NODE	179:0	179:0	3	static
TYPE_NAME	179:7	179:7	3	int
LEAF_NODE	179:7	179:7	4	int
FUNCTION_NAME	180:0	180:0	2	_tiffMapProc
LEAF_NODE	180:0	180:0	3	_tiffMapProc
PARAMETER_LIST	180:12	180:54	2	( thandle_t fd , void * * pbase , toff_t * psize )
LEAF_NODE	180:12	180:12	3	(
PARAMETER_DECL	180:13	180:23	3	thandle_t fd
TYPE	180:13	180:13	4	thandle_t
TYPE_NAME	180:13	180:13	5	thandle_t
LEAF_NODE	180:13	180:13	6	thandle_t
NAME	180:23	180:23	4	fd
LEAF_NODE	180:23	180:23	5	fd
LEAF_NODE	180:25	180:25	3	,
PARAMETER_DECL	180:27	180:34	3	void * * pbase
TYPE	180:27	180:31	4	void * *
TYPE_NAME	180:27	180:27	5	void
LEAF_NODE	180:27	180:27	6	void
POINTER	180:31	180:32	5	* *
LEAF_NODE	180:31	180:31	6	*
LEAF_NODE	180:32	180:32	6	*
NAME	180:34	180:34	4	pbase
LEAF_NODE	180:34	180:34	5	pbase
LEAF_NODE	180:39	180:39	3	,
PARAMETER_DECL	180:41	180:49	3	toff_t * psize
TYPE	180:41	180:47	4	toff_t *
TYPE_NAME	180:41	180:41	5	toff_t
LEAF_NODE	180:41	180:41	6	toff_t
POINTER	180:47	180:47	5	*
LEAF_NODE	180:47	180:47	6	*
NAME	180:49	180:49	4	psize
LEAF_NODE	180:49	180:49	5	psize
LEAF_NODE	180:54	180:54	3	)
LEAF_NODE	181:0	181:0	2	{
STATEMENTS	182:1	201:1	2	
SIMPLE_DECL	182:1	182:12	3	uint64 size ;
VAR_DECL	182:1	182:8	4	uint64 size
TYPE	182:1	182:1	5	uint64
TYPE_NAME	182:1	182:1	6	uint64
LEAF_NODE	182:1	182:1	7	uint64
NAME	182:8	182:8	5	size
LEAF_NODE	182:8	182:8	6	size
LEAF_NODE	182:12	182:12	4	;
SIMPLE_DECL	183:1	183:15	3	tmsize_t sizem ;
VAR_DECL	183:1	183:10	4	tmsize_t sizem
TYPE	183:1	183:1	5	tmsize_t
TYPE_NAME	183:1	183:1	6	tmsize_t
LEAF_NODE	183:1	183:1	7	tmsize_t
NAME	183:10	183:10	5	sizem
LEAF_NODE	183:10	183:10	6	sizem
LEAF_NODE	183:15	183:15	4	;
SIMPLE_DECL	184:1	184:16	3	HANDLE hMapFile ;
VAR_DECL	184:1	184:8	4	HANDLE hMapFile
TYPE	184:1	184:1	5	HANDLE
TYPE_NAME	184:1	184:1	6	HANDLE
LEAF_NODE	184:1	184:1	7	HANDLE
NAME	184:8	184:8	5	hMapFile
LEAF_NODE	184:8	184:8	6	hMapFile
LEAF_NODE	184:16	184:16	4	;
EXPR_STATEMENT	186:1	186:25	3	size = _tiffSizeProc ( fd ) ;
EXPR	186:1	186:1	4	size = _tiffSizeProc ( fd )
ASSIGN	186:1	186:8	5	size = _tiffSizeProc ( fd )
LVAL	186:1	186:1	6	size
FIELD	186:1	186:1	7	size
LEAF_NODE	186:1	186:1	8	size
ASSIGN_OP	186:6	186:6	6	=
LEAF_NODE	186:6	186:6	7	=
RVAL	186:8	186:8	6	_tiffSizeProc ( fd )
FUNCTION_CALL	186:8	186:24	7	_tiffSizeProc ( fd )
CALLEE	186:8	186:8	8	_tiffSizeProc
LEAF_NODE	186:8	186:8	9	_tiffSizeProc
LEAF_NODE	186:21	186:21	8	(
ARGUMENT	186:22	186:22	8	fd
FIELD	186:22	186:22	9	fd
LEAF_NODE	186:22	186:22	10	fd
LEAF_NODE	186:24	186:24	8	)
LEAF_NODE	186:25	186:25	4	;
EXPR_STATEMENT	187:1	187:23	3	sizem = ( tmsize_t ) size ;
EXPR	187:1	187:1	4	sizem = ( tmsize_t ) size
ASSIGN	187:1	187:9	5	sizem = ( tmsize_t ) size
LVAL	187:1	187:1	6	sizem
FIELD	187:1	187:1	7	sizem
LEAF_NODE	187:1	187:1	8	sizem
ASSIGN_OP	187:7	187:7	6	=
LEAF_NODE	187:7	187:7	7	=
RVAL	187:9	187:19	6	( tmsize_t ) size
LEAF_NODE	187:9	187:9	7	(
TYPE_NAME	187:10	187:10	7	tmsize_t
LEAF_NODE	187:10	187:10	8	tmsize_t
LEAF_NODE	187:18	187:18	7	)
FIELD	187:19	187:19	7	size
LEAF_NODE	187:19	187:19	8	size
LEAF_NODE	187:23	187:23	4	;
SELECTION	188:1	189:2	3	
KEYWORD	188:1	188:1	4	if
LEAF_NODE	188:1	188:1	5	if
LEAF_NODE	188:4	188:4	4	(
CONDITION	188:5	188:5	4	( uint64 ) sizem != size
EXPR	188:5	188:20	5	( uint64 ) sizem != size
LEAF_NODE	188:5	188:5	6	(
TYPE_NAME	188:6	188:6	6	uint64
LEAF_NODE	188:6	188:6	7	uint64
LEAF_NODE	188:12	188:12	6	)
FIELD	188:13	188:13	6	sizem
LEAF_NODE	188:13	188:13	7	sizem
EQ_OPERATOR	188:18	188:18	6	!=
LEAF_NODE	188:18	188:18	7	!=
FIELD	188:20	188:20	6	size
LEAF_NODE	188:20	188:20	7	size
LEAF_NODE	188:24	188:24	4	)
STATEMENTS	189:2	189:2	4	
JUMP_STATEMENT	189:2	189:12	5	return ( 0 ) ;
KEYWORD	189:2	189:2	6	return
LEAF_NODE	189:2	189:2	7	return
DESTINATION	189:9	189:9	6	( 0 )
EXPR	189:9	189:11	7	( 0 )
LEAF_NODE	189:9	189:9	8	(
FIELD	189:10	189:10	8	0
LEAF_NODE	189:10	189:10	9	0
LEAF_NODE	189:11	189:11	8	)
LEAF_NODE	189:12	189:12	6	;
EXPR_STATEMENT	193:1	193:66	3	hMapFile = CreateFileMapping ( fd , NULL , PAGE_READONLY , 0 , 0 , NULL ) ;
EXPR	193:1	193:1	4	hMapFile = CreateFileMapping ( fd , NULL , PAGE_READONLY , 0 , 0 , NULL )
ASSIGN	193:1	193:12	5	hMapFile = CreateFileMapping ( fd , NULL , PAGE_READONLY , 0 , 0 , NULL )
LVAL	193:1	193:1	6	hMapFile
FIELD	193:1	193:1	7	hMapFile
LEAF_NODE	193:1	193:1	8	hMapFile
ASSIGN_OP	193:10	193:10	6	=
LEAF_NODE	193:10	193:10	7	=
RVAL	193:12	193:12	6	CreateFileMapping ( fd , NULL , PAGE_READONLY , 0 , 0 , NULL )
FUNCTION_CALL	193:12	193:65	7	CreateFileMapping ( fd , NULL , PAGE_READONLY , 0 , 0 , NULL )
CALLEE	193:12	193:12	8	CreateFileMapping
LEAF_NODE	193:12	193:12	9	CreateFileMapping
LEAF_NODE	193:29	193:29	8	(
ARGUMENT	193:30	193:30	8	fd
FIELD	193:30	193:30	9	fd
LEAF_NODE	193:30	193:30	10	fd
LEAF_NODE	193:32	193:32	8	,
ARGUMENT	193:34	193:34	8	NULL
FIELD	193:34	193:34	9	NULL
LEAF_NODE	193:34	193:34	10	NULL
LEAF_NODE	193:38	193:38	8	,
ARGUMENT	193:40	193:40	8	PAGE_READONLY
FIELD	193:40	193:40	9	PAGE_READONLY
LEAF_NODE	193:40	193:40	10	PAGE_READONLY
LEAF_NODE	193:53	193:53	8	,
ARGUMENT	193:55	193:55	8	0
FIELD	193:55	193:55	9	0
LEAF_NODE	193:55	193:55	10	0
LEAF_NODE	193:56	193:56	8	,
ARGUMENT	193:58	193:58	8	0
FIELD	193:58	193:58	9	0
LEAF_NODE	193:58	193:58	10	0
LEAF_NODE	193:59	193:59	8	,
ARGUMENT	193:61	193:61	8	NULL
FIELD	193:61	193:61	9	NULL
LEAF_NODE	193:61	193:61	10	NULL
LEAF_NODE	193:65	193:65	8	)
LEAF_NODE	193:66	193:66	4	;
SELECTION	194:1	195:2	3	
KEYWORD	194:1	194:1	4	if
LEAF_NODE	194:1	194:1	5	if
LEAF_NODE	194:4	194:4	4	(
CONDITION	194:5	194:5	4	hMapFile == NULL
EXPR	194:5	194:17	5	hMapFile == NULL
FIELD	194:5	194:5	6	hMapFile
LEAF_NODE	194:5	194:5	7	hMapFile
EQ_OPERATOR	194:14	194:14	6	==
LEAF_NODE	194:14	194:14	7	==
FIELD	194:17	194:17	6	NULL
LEAF_NODE	194:17	194:17	7	NULL
LEAF_NODE	194:21	194:21	4	)
STATEMENTS	195:2	195:2	4	
JUMP_STATEMENT	195:2	195:12	5	return ( 0 ) ;
KEYWORD	195:2	195:2	6	return
LEAF_NODE	195:2	195:2	7	return
DESTINATION	195:9	195:9	6	( 0 )
EXPR	195:9	195:11	7	( 0 )
LEAF_NODE	195:9	195:9	8	(
FIELD	195:10	195:10	8	0
LEAF_NODE	195:10	195:10	9	0
LEAF_NODE	195:11	195:11	8	)
LEAF_NODE	195:12	195:12	6	;
EXPR_STATEMENT	196:1	196:57	3	* pbase = MapViewOfFile ( hMapFile , FILE_MAP_READ , 0 , 0 , 0 ) ;
EXPR	196:1	196:1	4	* pbase = MapViewOfFile ( hMapFile , FILE_MAP_READ , 0 , 0 , 0 )
ASSIGN	196:1	196:10	5	* pbase = MapViewOfFile ( hMapFile , FILE_MAP_READ , 0 , 0 , 0 )
LVAL	196:1	196:1	6	* pbase
UNARY_EXPR	196:1	196:2	7	* pbase
UNARY_OPERATOR	196:1	196:1	8	*
LEAF_NODE	196:1	196:1	9	*
FIELD	196:2	196:2	8	pbase
LEAF_NODE	196:2	196:2	9	pbase
ASSIGN_OP	196:8	196:8	6	=
LEAF_NODE	196:8	196:8	7	=
RVAL	196:10	196:10	6	MapViewOfFile ( hMapFile , FILE_MAP_READ , 0 , 0 , 0 )
FUNCTION_CALL	196:10	196:56	7	MapViewOfFile ( hMapFile , FILE_MAP_READ , 0 , 0 , 0 )
CALLEE	196:10	196:10	8	MapViewOfFile
LEAF_NODE	196:10	196:10	9	MapViewOfFile
LEAF_NODE	196:23	196:23	8	(
ARGUMENT	196:24	196:24	8	hMapFile
FIELD	196:24	196:24	9	hMapFile
LEAF_NODE	196:24	196:24	10	hMapFile
LEAF_NODE	196:32	196:32	8	,
ARGUMENT	196:34	196:34	8	FILE_MAP_READ
FIELD	196:34	196:34	9	FILE_MAP_READ
LEAF_NODE	196:34	196:34	10	FILE_MAP_READ
LEAF_NODE	196:47	196:47	8	,
ARGUMENT	196:49	196:49	8	0
FIELD	196:49	196:49	9	0
LEAF_NODE	196:49	196:49	10	0
LEAF_NODE	196:50	196:50	8	,
ARGUMENT	196:52	196:52	8	0
FIELD	196:52	196:52	9	0
LEAF_NODE	196:52	196:52	10	0
LEAF_NODE	196:53	196:53	8	,
ARGUMENT	196:55	196:55	8	0
FIELD	196:55	196:55	9	0
LEAF_NODE	196:55	196:55	10	0
LEAF_NODE	196:56	196:56	8	)
LEAF_NODE	196:57	196:57	4	;
EXPR_STATEMENT	197:1	197:22	3	CloseHandle ( hMapFile ) ;
EXPR	197:1	197:1	4	CloseHandle ( hMapFile )
FUNCTION_CALL	197:1	197:21	5	CloseHandle ( hMapFile )
CALLEE	197:1	197:1	6	CloseHandle
LEAF_NODE	197:1	197:1	7	CloseHandle
LEAF_NODE	197:12	197:12	6	(
ARGUMENT	197:13	197:13	6	hMapFile
FIELD	197:13	197:13	7	hMapFile
LEAF_NODE	197:13	197:13	8	hMapFile
LEAF_NODE	197:21	197:21	6	)
LEAF_NODE	197:22	197:22	4	;
SELECTION	198:1	199:2	3	
KEYWORD	198:1	198:1	4	if
LEAF_NODE	198:1	198:1	5	if
LEAF_NODE	198:4	198:4	4	(
CONDITION	198:5	198:5	4	* pbase == NULL
EXPR	198:5	198:15	5	* pbase == NULL
UNARY_EXPR	198:5	198:6	6	* pbase
UNARY_OPERATOR	198:5	198:5	7	*
LEAF_NODE	198:5	198:5	8	*
FIELD	198:6	198:6	7	pbase
LEAF_NODE	198:6	198:6	8	pbase
EQ_OPERATOR	198:12	198:12	6	==
LEAF_NODE	198:12	198:12	7	==
FIELD	198:15	198:15	6	NULL
LEAF_NODE	198:15	198:15	7	NULL
LEAF_NODE	198:19	198:19	4	)
STATEMENTS	199:2	199:2	4	
JUMP_STATEMENT	199:2	199:12	5	return ( 0 ) ;
KEYWORD	199:2	199:2	6	return
LEAF_NODE	199:2	199:2	7	return
DESTINATION	199:9	199:9	6	( 0 )
EXPR	199:9	199:11	7	( 0 )
LEAF_NODE	199:9	199:9	8	(
FIELD	199:10	199:10	8	0
LEAF_NODE	199:10	199:10	9	0
LEAF_NODE	199:11	199:11	8	)
LEAF_NODE	199:12	199:12	6	;
EXPR_STATEMENT	200:1	200:14	3	* psize = size ;
EXPR	200:1	200:1	4	* psize = size
ASSIGN	200:1	200:10	5	* psize = size
LVAL	200:1	200:1	6	* psize
UNARY_EXPR	200:1	200:2	7	* psize
UNARY_OPERATOR	200:1	200:1	8	*
LEAF_NODE	200:1	200:1	9	*
FIELD	200:2	200:2	8	psize
LEAF_NODE	200:2	200:2	9	psize
ASSIGN_OP	200:8	200:8	6	=
LEAF_NODE	200:8	200:8	7	=
RVAL	200:10	200:10	6	size
FIELD	200:10	200:10	7	size
LEAF_NODE	200:10	200:10	8	size
LEAF_NODE	200:14	200:14	4	;
JUMP_STATEMENT	201:1	201:10	3	return ( 1 ) ;
KEYWORD	201:1	201:1	4	return
LEAF_NODE	201:1	201:1	5	return
DESTINATION	201:7	201:7	4	( 1 )
EXPR	201:7	201:9	5	( 1 )
LEAF_NODE	201:7	201:7	6	(
FIELD	201:8	201:8	6	1
LEAF_NODE	201:8	201:8	7	1
LEAF_NODE	201:9	201:9	6	)
LEAF_NODE	201:10	201:10	4	;
LEAF_NODE	202:0	202:0	2	}
FUNCTION_DEF	204:0	210:0	1	
RETURN_TYPE	204:0	204:7	2	static void
LEAF_NODE	204:0	204:0	3	static
TYPE_NAME	204:7	204:7	3	void
LEAF_NODE	204:7	204:7	4	void
FUNCTION_NAME	205:0	205:0	2	_tiffDummyUnmapProc
LEAF_NODE	205:0	205:0	3	_tiffDummyUnmapProc
PARAMETER_LIST	205:19	205:57	2	( thandle_t fd , void * base , toff_t size )
LEAF_NODE	205:19	205:19	3	(
PARAMETER_DECL	205:20	205:30	3	thandle_t fd
TYPE	205:20	205:20	4	thandle_t
TYPE_NAME	205:20	205:20	5	thandle_t
LEAF_NODE	205:20	205:20	6	thandle_t
NAME	205:30	205:30	4	fd
LEAF_NODE	205:30	205:30	5	fd
LEAF_NODE	205:32	205:32	3	,
PARAMETER_DECL	205:34	205:40	3	void * base
TYPE	205:34	205:38	4	void *
TYPE_NAME	205:34	205:34	5	void
LEAF_NODE	205:34	205:34	6	void
POINTER	205:38	205:38	5	*
LEAF_NODE	205:38	205:38	6	*
NAME	205:40	205:40	4	base
LEAF_NODE	205:40	205:40	5	base
LEAF_NODE	205:44	205:44	3	,
PARAMETER_DECL	205:46	205:53	3	toff_t size
TYPE	205:46	205:46	4	toff_t
TYPE_NAME	205:46	205:46	5	toff_t
LEAF_NODE	205:46	205:46	6	toff_t
NAME	205:53	205:53	4	size
LEAF_NODE	205:53	205:53	5	size
LEAF_NODE	205:57	205:57	3	)
LEAF_NODE	206:0	206:0	2	{
STATEMENTS	207:1	209:1	2	
EXPR_STATEMENT	207:1	207:10	3	( void ) fd ;
EXPR	207:1	207:8	4	( void ) fd
LEAF_NODE	207:1	207:1	5	(
TYPE_NAME	207:2	207:2	5	void
LEAF_NODE	207:2	207:2	6	void
LEAF_NODE	207:6	207:6	5	)
FIELD	207:8	207:8	5	fd
LEAF_NODE	207:8	207:8	6	fd
LEAF_NODE	207:10	207:10	4	;
EXPR_STATEMENT	208:1	208:12	3	( void ) base ;
EXPR	208:1	208:8	4	( void ) base
LEAF_NODE	208:1	208:1	5	(
TYPE_NAME	208:2	208:2	5	void
LEAF_NODE	208:2	208:2	6	void
LEAF_NODE	208:6	208:6	5	)
FIELD	208:8	208:8	5	base
LEAF_NODE	208:8	208:8	6	base
LEAF_NODE	208:12	208:12	4	;
EXPR_STATEMENT	209:1	209:12	3	( void ) size ;
EXPR	209:1	209:8	4	( void ) size
LEAF_NODE	209:1	209:1	5	(
TYPE_NAME	209:2	209:2	5	void
LEAF_NODE	209:2	209:2	6	void
LEAF_NODE	209:6	209:6	5	)
FIELD	209:8	209:8	5	size
LEAF_NODE	209:8	209:8	6	size
LEAF_NODE	209:12	209:12	4	;
LEAF_NODE	210:0	210:0	2	}
FUNCTION_DEF	212:0	218:0	1	
RETURN_TYPE	212:0	212:7	2	static void
LEAF_NODE	212:0	212:0	3	static
TYPE_NAME	212:7	212:7	3	void
LEAF_NODE	212:7	212:7	4	void
FUNCTION_NAME	213:0	213:0	2	_tiffUnmapProc
LEAF_NODE	213:0	213:0	3	_tiffUnmapProc
PARAMETER_LIST	213:14	213:52	2	( thandle_t fd , void * base , toff_t size )
LEAF_NODE	213:14	213:14	3	(
PARAMETER_DECL	213:15	213:25	3	thandle_t fd
TYPE	213:15	213:15	4	thandle_t
TYPE_NAME	213:15	213:15	5	thandle_t
LEAF_NODE	213:15	213:15	6	thandle_t
NAME	213:25	213:25	4	fd
LEAF_NODE	213:25	213:25	5	fd
LEAF_NODE	213:27	213:27	3	,
PARAMETER_DECL	213:29	213:35	3	void * base
TYPE	213:29	213:33	4	void *
TYPE_NAME	213:29	213:29	5	void
LEAF_NODE	213:29	213:29	6	void
POINTER	213:33	213:33	5	*
LEAF_NODE	213:33	213:33	6	*
NAME	213:35	213:35	4	base
LEAF_NODE	213:35	213:35	5	base
LEAF_NODE	213:39	213:39	3	,
PARAMETER_DECL	213:41	213:48	3	toff_t size
TYPE	213:41	213:41	4	toff_t
TYPE_NAME	213:41	213:41	5	toff_t
LEAF_NODE	213:41	213:41	6	toff_t
NAME	213:48	213:48	4	size
LEAF_NODE	213:48	213:48	5	size
LEAF_NODE	213:52	213:52	3	)
LEAF_NODE	214:0	214:0	2	{
STATEMENTS	215:1	217:1	2	
EXPR_STATEMENT	215:1	215:10	3	( void ) fd ;
EXPR	215:1	215:8	4	( void ) fd
LEAF_NODE	215:1	215:1	5	(
TYPE_NAME	215:2	215:2	5	void
LEAF_NODE	215:2	215:2	6	void
LEAF_NODE	215:6	215:6	5	)
FIELD	215:8	215:8	5	fd
LEAF_NODE	215:8	215:8	6	fd
LEAF_NODE	215:10	215:10	4	;
EXPR_STATEMENT	216:1	216:12	3	( void ) size ;
EXPR	216:1	216:8	4	( void ) size
LEAF_NODE	216:1	216:1	5	(
TYPE_NAME	216:2	216:2	5	void
LEAF_NODE	216:2	216:2	6	void
LEAF_NODE	216:6	216:6	5	)
FIELD	216:8	216:8	5	size
LEAF_NODE	216:8	216:8	6	size
LEAF_NODE	216:12	216:12	4	;
EXPR_STATEMENT	217:1	217:22	3	UnmapViewOfFile ( base ) ;
EXPR	217:1	217:1	4	UnmapViewOfFile ( base )
FUNCTION_CALL	217:1	217:21	5	UnmapViewOfFile ( base )
CALLEE	217:1	217:1	6	UnmapViewOfFile
LEAF_NODE	217:1	217:1	7	UnmapViewOfFile
LEAF_NODE	217:16	217:16	6	(
ARGUMENT	217:17	217:17	6	base
FIELD	217:17	217:17	7	base
LEAF_NODE	217:17	217:17	8	base
LEAF_NODE	217:21	217:21	6	)
LEAF_NODE	217:22	217:22	4	;
LEAF_NODE	218:0	218:0	2	}
FUNCTION_DEF	225:0	248:0	1	
RETURN_TYPE	225:0	225:4	2	TIFF *
TYPE_NAME	225:0	225:0	3	TIFF
LEAF_NODE	225:0	225:0	4	TIFF
LEAF_NODE	225:4	225:4	3	*
FUNCTION_NAME	226:0	226:0	2	TIFFFdOpen
LEAF_NODE	226:0	226:0	3	TIFFFdOpen
PARAMETER_LIST	226:10	226:54	2	( int ifd , const char * name , const char * mode )
LEAF_NODE	226:10	226:10	3	(
PARAMETER_DECL	226:11	226:15	3	int ifd
TYPE	226:11	226:11	4	int
TYPE_NAME	226:11	226:11	5	int
LEAF_NODE	226:11	226:11	6	int
NAME	226:15	226:15	4	ifd
LEAF_NODE	226:15	226:15	5	ifd
LEAF_NODE	226:18	226:18	3	,
PARAMETER_DECL	226:20	226:32	3	const char * name
TYPE	226:20	226:30	4	const char *
TYPE_NAME	226:20	226:26	5	const char
LEAF_NODE	226:20	226:20	6	const
LEAF_NODE	226:26	226:26	6	char
POINTER	226:30	226:30	5	*
LEAF_NODE	226:30	226:30	6	*
NAME	226:32	226:32	4	name
LEAF_NODE	226:32	226:32	5	name
LEAF_NODE	226:36	226:36	3	,
PARAMETER_DECL	226:38	226:50	3	const char * mode
TYPE	226:38	226:48	4	const char *
TYPE_NAME	226:38	226:44	5	const char
LEAF_NODE	226:38	226:38	6	const
LEAF_NODE	226:44	226:44	6	char
POINTER	226:48	226:48	5	*
LEAF_NODE	226:48	226:48	6	*
NAME	226:50	226:50	4	mode
LEAF_NODE	226:50	226:50	5	mode
LEAF_NODE	226:54	226:54	3	)
LEAF_NODE	227:0	227:0	2	{
STATEMENTS	228:1	247:13	2	
SIMPLE_DECL	228:1	228:10	3	TIFF * tif ;
VAR_DECL	228:1	228:7	4	TIFF * tif
TYPE	228:1	228:5	5	TIFF *
TYPE_NAME	228:1	228:1	6	TIFF
LEAF_NODE	228:1	228:1	7	TIFF
POINTER	228:5	228:5	6	*
LEAF_NODE	228:5	228:5	7	*
NAME	228:7	228:7	5	tif
LEAF_NODE	228:7	228:7	6	tif
LEAF_NODE	228:10	228:10	4	;
SIMPLE_DECL	229:1	229:17	3	int fSuppressMap ;
VAR_DECL	229:1	229:5	4	int fSuppressMap
TYPE	229:1	229:1	5	int
TYPE_NAME	229:1	229:1	6	int
LEAF_NODE	229:1	229:1	7	int
NAME	229:5	229:5	5	fSuppressMap
LEAF_NODE	229:5	229:5	6	fSuppressMap
LEAF_NODE	229:17	229:17	4	;
SIMPLE_DECL	230:1	230:6	3	int m ;
VAR_DECL	230:1	230:5	4	int m
TYPE	230:1	230:1	5	int
TYPE_NAME	230:1	230:1	6	int
LEAF_NODE	230:1	230:1	7	int
NAME	230:5	230:5	5	m
LEAF_NODE	230:5	230:5	6	m
LEAF_NODE	230:6	230:6	4	;
EXPR_STATEMENT	231:1	231:15	3	fSuppressMap = 0 ;
EXPR	231:1	231:1	4	fSuppressMap = 0
ASSIGN	231:1	231:14	5	fSuppressMap = 0
LVAL	231:1	231:1	6	fSuppressMap
FIELD	231:1	231:1	7	fSuppressMap
LEAF_NODE	231:1	231:1	8	fSuppressMap
ASSIGN_OP	231:13	231:13	6	=
LEAF_NODE	231:13	231:13	7	=
RVAL	231:14	231:14	6	0
FIELD	231:14	231:14	7	0
LEAF_NODE	231:14	231:14	8	0
LEAF_NODE	231:15	231:15	4	;
ITERATION	232:1	233:1	3	
KEYWORD	232:1	232:1	4	for
LEAF_NODE	232:1	232:1	5	for
LEAF_NODE	232:5	232:5	4	(
FOR_INIT	232:6	232:9	4	m = 0 ;
EXPR	232:6	232:6	5	m = 0
ASSIGN	232:6	232:8	6	m = 0
LVAL	232:6	232:6	7	m
FIELD	232:6	232:6	8	m
LEAF_NODE	232:6	232:6	9	m
ASSIGN_OP	232:7	232:7	7	=
LEAF_NODE	232:7	232:7	8	=
RVAL	232:8	232:8	7	0
FIELD	232:8	232:8	8	0
LEAF_NODE	232:8	232:8	9	0
LEAF_NODE	232:9	232:9	5	;
CONDITION	232:11	232:11	4	mode [ m ] != 0
EXPR	232:11	232:20	5	mode [ m ] != 0
FIELD	232:11	232:17	6	mode [ m ]
LEAF_NODE	232:11	232:11	7	mode
LEAF_NODE	232:15	232:15	7	[
EXPR	232:16	232:16	7	m
FIELD	232:16	232:16	8	m
LEAF_NODE	232:16	232:16	9	m
LEAF_NODE	232:17	232:17	7	]
EQ_OPERATOR	232:18	232:18	6	!=
LEAF_NODE	232:18	232:18	7	!=
FIELD	232:20	232:20	6	0
LEAF_NODE	232:20	232:20	7	0
LEAF_NODE	232:21	232:21	4	;
FOR_EXPR	232:23	232:23	4	m ++
EXPR	232:23	232:23	5	m ++
FIELD	232:23	232:24	6	m ++
LEAF_NODE	232:23	232:23	7	m
LEAF_NODE	232:24	232:24	7	++
LEAF_NODE	232:26	232:26	4	)
STATEMENTS	233:1	239:1	4	
LEAF_NODE	233:1	233:1	5	{
STATEMENTS	234:2	234:2	5	
SELECTION	234:2	235:2	6	
KEYWORD	234:2	234:2	7	if
LEAF_NODE	234:2	234:2	8	if
LEAF_NODE	234:5	234:5	7	(
CONDITION	234:6	234:6	7	mode [ m ] == 'u'
EXPR	234:6	234:15	8	mode [ m ] == 'u'
FIELD	234:6	234:12	9	mode [ m ]
LEAF_NODE	234:6	234:6	10	mode
LEAF_NODE	234:10	234:10	10	[
EXPR	234:11	234:11	10	m
FIELD	234:11	234:11	11	m
LEAF_NODE	234:11	234:11	12	m
LEAF_NODE	234:12	234:12	10	]
EQ_OPERATOR	234:13	234:13	9	==
LEAF_NODE	234:13	234:13	10	==
FIELD	234:15	234:15	9	'u'
LEAF_NODE	234:15	234:15	10	'u'
LEAF_NODE	234:18	234:18	7	)
STATEMENTS	235:2	238:2	7	
LEAF_NODE	235:2	235:2	8	{
STATEMENTS	236:3	237:3	8	
EXPR_STATEMENT	236:3	236:17	9	fSuppressMap = 1 ;
EXPR	236:3	236:3	10	fSuppressMap = 1
ASSIGN	236:3	236:16	11	fSuppressMap = 1
LVAL	236:3	236:3	12	fSuppressMap
FIELD	236:3	236:3	13	fSuppressMap
LEAF_NODE	236:3	236:3	14	fSuppressMap
ASSIGN_OP	236:15	236:15	12	=
LEAF_NODE	236:15	236:15	13	=
RVAL	236:16	236:16	12	1
FIELD	236:16	236:16	13	1
LEAF_NODE	236:16	236:16	14	1
LEAF_NODE	236:17	236:17	10	;
JUMP_STATEMENT	237:3	237:8	9	break DESTINATION ;
KEYWORD	237:3	237:3	10	break
LEAF_NODE	237:3	237:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	237:8	237:8	10	;
LEAF_NODE	238:2	238:2	8	}
LEAF_NODE	239:1	239:1	5	}
EXPR_STATEMENT	240:1	244:55	3	tif = TIFFClientOpen ( name , mode , ( thandle_t ) ifd , _tiffReadProc , _tiffWriteProc , _tiffSeekProc , _tiffCloseProc , _tiffSizeProc , fSuppressMap ? _tiffDummyMapProc : _tiffMapProc , fSuppressMap ? _tiffDummyUnmapProc : _tiffUnmapProc ) ;
EXPR	240:1	240:1	4	tif = TIFFClientOpen ( name , mode , ( thandle_t ) ifd , _tiffReadProc , _tiffWriteProc , _tiffSeekProc , _tiffCloseProc , _tiffSizeProc , fSuppressMap ? _tiffDummyMapProc : _tiffMapProc , fSuppressMap ? _tiffDummyUnmapProc : _tiffUnmapProc )
ASSIGN	240:1	240:7	5	tif = TIFFClientOpen ( name , mode , ( thandle_t ) ifd , _tiffReadProc , _tiffWriteProc , _tiffSeekProc , _tiffCloseProc , _tiffSizeProc , fSuppressMap ? _tiffDummyMapProc : _tiffMapProc , fSuppressMap ? _tiffDummyUnmapProc : _tiffUnmapProc )
LVAL	240:1	240:1	6	tif
FIELD	240:1	240:1	7	tif
LEAF_NODE	240:1	240:1	8	tif
ASSIGN_OP	240:5	240:5	6	=
LEAF_NODE	240:5	240:5	7	=
RVAL	240:7	240:7	6	TIFFClientOpen ( name , mode , ( thandle_t ) ifd , _tiffReadProc , _tiffWriteProc , _tiffSeekProc , _tiffCloseProc , _tiffSizeProc , fSuppressMap ? _tiffDummyMapProc : _tiffMapProc , fSuppressMap ? _tiffDummyUnmapProc : _tiffUnmapProc )
FUNCTION_CALL	240:7	244:54	7	TIFFClientOpen ( name , mode , ( thandle_t ) ifd , _tiffReadProc , _tiffWriteProc , _tiffSeekProc , _tiffCloseProc , _tiffSizeProc , fSuppressMap ? _tiffDummyMapProc : _tiffMapProc , fSuppressMap ? _tiffDummyUnmapProc : _tiffUnmapProc )
CALLEE	240:7	240:7	8	TIFFClientOpen
LEAF_NODE	240:7	240:7	9	TIFFClientOpen
LEAF_NODE	240:21	240:21	8	(
ARGUMENT	240:22	240:22	8	name
FIELD	240:22	240:22	9	name
LEAF_NODE	240:22	240:22	10	name
LEAF_NODE	240:26	240:26	8	,
ARGUMENT	240:28	240:28	8	mode
FIELD	240:28	240:28	9	mode
LEAF_NODE	240:28	240:28	10	mode
LEAF_NODE	240:32	240:32	8	,
ARGUMENT	240:34	240:45	8	( thandle_t ) ifd
LEAF_NODE	240:34	240:34	9	(
TYPE_NAME	240:35	240:35	9	thandle_t
LEAF_NODE	240:35	240:35	10	thandle_t
LEAF_NODE	240:44	240:44	9	)
FIELD	240:45	240:45	9	ifd
LEAF_NODE	240:45	240:45	10	ifd
LEAF_NODE	240:48	240:48	8	,
ARGUMENT	241:3	241:3	8	_tiffReadProc
FIELD	241:3	241:3	9	_tiffReadProc
LEAF_NODE	241:3	241:3	10	_tiffReadProc
LEAF_NODE	241:16	241:16	8	,
ARGUMENT	241:18	241:18	8	_tiffWriteProc
FIELD	241:18	241:18	9	_tiffWriteProc
LEAF_NODE	241:18	241:18	10	_tiffWriteProc
LEAF_NODE	241:32	241:32	8	,
ARGUMENT	242:3	242:3	8	_tiffSeekProc
FIELD	242:3	242:3	9	_tiffSeekProc
LEAF_NODE	242:3	242:3	10	_tiffSeekProc
LEAF_NODE	242:16	242:16	8	,
ARGUMENT	242:18	242:18	8	_tiffCloseProc
FIELD	242:18	242:18	9	_tiffCloseProc
LEAF_NODE	242:18	242:18	10	_tiffCloseProc
LEAF_NODE	242:32	242:32	8	,
ARGUMENT	242:34	242:34	8	_tiffSizeProc
FIELD	242:34	242:34	9	_tiffSizeProc
LEAF_NODE	242:34	242:34	10	_tiffSizeProc
LEAF_NODE	242:47	242:47	8	,
ARGUMENT	243:3	243:3	8	fSuppressMap ? _tiffDummyMapProc : _tiffMapProc
COND_EXPR	243:3	243:38	9	fSuppressMap ? _tiffDummyMapProc : _tiffMapProc
CONDITION	243:3	243:3	10	fSuppressMap
FIELD	243:3	243:3	11	fSuppressMap
LEAF_NODE	243:3	243:3	12	fSuppressMap
LEAF_NODE	243:16	243:16	10	?
EXPR	243:18	243:18	10	_tiffDummyMapProc
FIELD	243:18	243:18	11	_tiffDummyMapProc
LEAF_NODE	243:18	243:18	12	_tiffDummyMapProc
LEAF_NODE	243:36	243:36	10	:
FIELD	243:38	243:38	10	_tiffMapProc
LEAF_NODE	243:38	243:38	11	_tiffMapProc
LEAF_NODE	243:50	243:50	8	,
ARGUMENT	244:3	244:3	8	fSuppressMap ? _tiffDummyUnmapProc : _tiffUnmapProc
COND_EXPR	244:3	244:40	9	fSuppressMap ? _tiffDummyUnmapProc : _tiffUnmapProc
CONDITION	244:3	244:3	10	fSuppressMap
FIELD	244:3	244:3	11	fSuppressMap
LEAF_NODE	244:3	244:3	12	fSuppressMap
LEAF_NODE	244:16	244:16	10	?
EXPR	244:18	244:18	10	_tiffDummyUnmapProc
FIELD	244:18	244:18	11	_tiffDummyUnmapProc
LEAF_NODE	244:18	244:18	12	_tiffDummyUnmapProc
LEAF_NODE	244:38	244:38	10	:
FIELD	244:40	244:40	10	_tiffUnmapProc
LEAF_NODE	244:40	244:40	11	_tiffUnmapProc
LEAF_NODE	244:54	244:54	8	)
LEAF_NODE	244:55	244:55	4	;
SELECTION	245:1	246:2	3	
KEYWORD	245:1	245:1	4	if
LEAF_NODE	245:1	245:1	5	if
LEAF_NODE	245:4	245:4	4	(
CONDITION	245:5	245:5	4	tif
EXPR	245:5	245:5	5	tif
FIELD	245:5	245:5	6	tif
LEAF_NODE	245:5	245:5	7	tif
LEAF_NODE	245:8	245:8	4	)
STATEMENTS	246:2	246:2	4	
EXPR_STATEMENT	246:2	246:19	5	tif -> tif_fd = ifd ;
EXPR	246:2	246:2	6	tif -> tif_fd = ifd
ASSIGN	246:2	246:16	7	tif -> tif_fd = ifd
LVAL	246:2	246:2	8	tif -> tif_fd
FIELD	246:2	246:7	9	tif -> tif_fd
LEAF_NODE	246:2	246:2	10	tif
LEAF_NODE	246:5	246:5	10	->
LEAF_NODE	246:7	246:7	10	tif_fd
ASSIGN_OP	246:14	246:14	8	=
LEAF_NODE	246:14	246:14	9	=
RVAL	246:16	246:16	8	ifd
FIELD	246:16	246:16	9	ifd
LEAF_NODE	246:16	246:16	10	ifd
LEAF_NODE	246:19	246:19	6	;
LEAF_NODE	247:1	247:1	3	return
LEAF_NODE	247:8	247:8	3	(
LEAF_NODE	247:9	247:9	3	tif
LEAF_NODE	247:12	247:12	3	)
LEAF_NODE	247:13	247:13	3	;
LEAF_NODE	248:0	248:0	2	}
FUNCTION_DEF	255:0	289:0	1	
RETURN_TYPE	255:0	255:4	2	TIFF *
TYPE_NAME	255:0	255:0	3	TIFF
LEAF_NODE	255:0	255:0	4	TIFF
LEAF_NODE	255:4	255:4	3	*
FUNCTION_NAME	256:0	256:0	2	TIFFOpen
LEAF_NODE	256:0	256:0	3	TIFFOpen
PARAMETER_LIST	256:8	256:43	2	( const char * name , const char * mode )
LEAF_NODE	256:8	256:8	3	(
PARAMETER_DECL	256:9	256:21	3	const char * name
TYPE	256:9	256:19	4	const char *
TYPE_NAME	256:9	256:15	5	const char
LEAF_NODE	256:9	256:9	6	const
LEAF_NODE	256:15	256:15	6	char
POINTER	256:19	256:19	5	*
LEAF_NODE	256:19	256:19	6	*
NAME	256:21	256:21	4	name
LEAF_NODE	256:21	256:21	5	name
LEAF_NODE	256:25	256:25	3	,
PARAMETER_DECL	256:27	256:39	3	const char * mode
TYPE	256:27	256:37	4	const char *
TYPE_NAME	256:27	256:33	5	const char
LEAF_NODE	256:27	256:27	6	const
LEAF_NODE	256:33	256:33	6	char
POINTER	256:37	256:37	5	*
LEAF_NODE	256:37	256:37	6	*
NAME	256:39	256:39	4	mode
LEAF_NODE	256:39	256:39	5	mode
LEAF_NODE	256:43	256:43	3	)
LEAF_NODE	257:0	257:0	2	{
STATEMENTS	258:1	288:1	2	
LEAF_NODE	258:1	258:1	3	static
SIMPLE_DECL	258:8	258:40	3	const char [ ] module ; module = "TIFFOpen" ;
VAR_DECL	258:8	258:19	4	const char [ ] module ; module = "TIFFOpen"
TYPE	258:8	258:25	5	const char [ ]
TYPE_NAME	258:8	258:14	6	const char
LEAF_NODE	258:8	258:8	7	const
LEAF_NODE	258:14	258:14	7	char
TYPE_SUFFIX	258:25	258:26	6	[ ]
LEAF_NODE	258:25	258:25	7	[
LEAF_NODE	258:26	258:26	7	]
NAME	258:19	258:19	5	module
LEAF_NODE	258:19	258:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	258:19	258:19	5	module = "TIFFOpen"
ASSIGN	258:19	258:30	6	module = "TIFFOpen"
LVAL	258:19	258:19	7	module
NAME	258:19	258:19	8	module
LEAF_NODE	258:19	258:19	9	module
ASSIGN_OP	258:28	258:28	7	=
LEAF_NODE	258:28	258:28	8	=
RVAL	258:30	258:30	7	"TIFFOpen"
FIELD	258:30	258:30	8	"TIFFOpen"
LEAF_NODE	258:30	258:30	9	"TIFFOpen"
LEAF_NODE	258:40	258:40	4	;
SIMPLE_DECL	259:1	259:13	3	thandle_t fd ;
VAR_DECL	259:1	259:11	4	thandle_t fd
TYPE	259:1	259:1	5	thandle_t
TYPE_NAME	259:1	259:1	6	thandle_t
LEAF_NODE	259:1	259:1	7	thandle_t
NAME	259:11	259:11	5	fd
LEAF_NODE	259:11	259:11	6	fd
LEAF_NODE	259:13	259:13	4	;
SIMPLE_DECL	260:1	260:6	3	int m ;
VAR_DECL	260:1	260:5	4	int m
TYPE	260:1	260:1	5	int
TYPE_NAME	260:1	260:1	6	int
LEAF_NODE	260:1	260:1	7	int
NAME	260:5	260:5	5	m
LEAF_NODE	260:5	260:5	6	m
LEAF_NODE	260:6	260:6	4	;
SIMPLE_DECL	261:1	261:13	3	DWORD dwMode ;
VAR_DECL	261:1	261:7	4	DWORD dwMode
TYPE	261:1	261:1	5	DWORD
TYPE_NAME	261:1	261:1	6	DWORD
LEAF_NODE	261:1	261:1	7	DWORD
NAME	261:7	261:7	5	dwMode
LEAF_NODE	261:7	261:7	6	dwMode
LEAF_NODE	261:13	261:13	4	;
SIMPLE_DECL	262:1	262:10	3	TIFF * tif ;
VAR_DECL	262:1	262:7	4	TIFF * tif
TYPE	262:1	262:5	5	TIFF *
TYPE_NAME	262:1	262:1	6	TIFF
LEAF_NODE	262:1	262:1	7	TIFF
POINTER	262:5	262:5	6	*
LEAF_NODE	262:5	262:5	7	*
NAME	262:7	262:7	5	tif
LEAF_NODE	262:7	262:7	6	tif
LEAF_NODE	262:10	262:10	4	;
EXPR_STATEMENT	264:1	264:31	3	m = _TIFFgetMode ( mode , module ) ;
EXPR	264:1	264:1	4	m = _TIFFgetMode ( mode , module )
ASSIGN	264:1	264:5	5	m = _TIFFgetMode ( mode , module )
LVAL	264:1	264:1	6	m
FIELD	264:1	264:1	7	m
LEAF_NODE	264:1	264:1	8	m
ASSIGN_OP	264:3	264:3	6	=
LEAF_NODE	264:3	264:3	7	=
RVAL	264:5	264:5	6	_TIFFgetMode ( mode , module )
FUNCTION_CALL	264:5	264:30	7	_TIFFgetMode ( mode , module )
CALLEE	264:5	264:5	8	_TIFFgetMode
LEAF_NODE	264:5	264:5	9	_TIFFgetMode
LEAF_NODE	264:17	264:17	8	(
ARGUMENT	264:18	264:18	8	mode
FIELD	264:18	264:18	9	mode
LEAF_NODE	264:18	264:18	10	mode
LEAF_NODE	264:22	264:22	8	,
ARGUMENT	264:24	264:24	8	module
FIELD	264:24	264:24	9	module
LEAF_NODE	264:24	264:24	10	module
LEAF_NODE	264:30	264:30	8	)
LEAF_NODE	264:31	264:31	4	;
SELECTION	266:1	266:11	3	
KEYWORD	266:1	266:1	4	switch
LEAF_NODE	266:1	266:1	5	switch
LEAF_NODE	266:7	266:7	4	(
CONDITION	266:8	266:8	4	m
EXPR	266:8	266:8	5	m
FIELD	266:8	266:8	6	m
LEAF_NODE	266:8	266:8	7	m
LEAF_NODE	266:9	266:9	4	)
STATEMENTS	266:11	273:1	4	
LEAF_NODE	266:11	266:11	5	{
STATEMENTS	267:2	272:13	5	
LABEL	267:2	267:15	6	case O_RDONLY :
LEAF_NODE	267:2	267:2	7	case
LEAF_NODE	267:7	267:7	7	O_RDONLY
LEAF_NODE	267:15	267:15	7	:
EXPR_STATEMENT	267:19	267:41	6	dwMode = OPEN_EXISTING ;
EXPR	267:19	267:19	7	dwMode = OPEN_EXISTING
ASSIGN	267:19	267:28	8	dwMode = OPEN_EXISTING
LVAL	267:19	267:19	9	dwMode
FIELD	267:19	267:19	10	dwMode
LEAF_NODE	267:19	267:19	11	dwMode
ASSIGN_OP	267:26	267:26	9	=
LEAF_NODE	267:26	267:26	10	=
RVAL	267:28	267:28	9	OPEN_EXISTING
FIELD	267:28	267:28	10	OPEN_EXISTING
LEAF_NODE	267:28	267:28	11	OPEN_EXISTING
LEAF_NODE	267:41	267:41	7	;
JUMP_STATEMENT	267:43	267:48	6	break DESTINATION ;
KEYWORD	267:43	267:43	7	break
LEAF_NODE	267:43	267:43	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	267:48	267:48	7	;
LABEL	268:2	268:13	6	case O_RDWR :
LEAF_NODE	268:2	268:2	7	case
LEAF_NODE	268:7	268:7	7	O_RDWR
LEAF_NODE	268:13	268:13	7	:
EXPR_STATEMENT	268:17	268:37	6	dwMode = OPEN_ALWAYS ;
EXPR	268:17	268:17	7	dwMode = OPEN_ALWAYS
ASSIGN	268:17	268:26	8	dwMode = OPEN_ALWAYS
LVAL	268:17	268:17	9	dwMode
FIELD	268:17	268:17	10	dwMode
LEAF_NODE	268:17	268:17	11	dwMode
ASSIGN_OP	268:24	268:24	9	=
LEAF_NODE	268:24	268:24	10	=
RVAL	268:26	268:26	9	OPEN_ALWAYS
FIELD	268:26	268:26	10	OPEN_ALWAYS
LEAF_NODE	268:26	268:26	11	OPEN_ALWAYS
LEAF_NODE	268:37	268:37	7	;
JUMP_STATEMENT	268:41	268:46	6	break DESTINATION ;
KEYWORD	268:41	268:41	7	break
LEAF_NODE	268:41	268:41	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	268:46	268:46	7	;
LEAF_NODE	269:2	269:2	6	case
LEAF_NODE	269:7	269:7	6	O_RDWR
LEAF_NODE	269:13	269:13	6	|
LABEL	269:14	269:21	6	O_CREAT :
LEAF_NODE	269:14	269:14	7	O_CREAT
LEAF_NODE	269:21	269:21	7	:
EXPR_STATEMENT	269:24	269:44	6	dwMode = OPEN_ALWAYS ;
EXPR	269:24	269:24	7	dwMode = OPEN_ALWAYS
ASSIGN	269:24	269:33	8	dwMode = OPEN_ALWAYS
LVAL	269:24	269:24	9	dwMode
FIELD	269:24	269:24	10	dwMode
LEAF_NODE	269:24	269:24	11	dwMode
ASSIGN_OP	269:31	269:31	9	=
LEAF_NODE	269:31	269:31	10	=
RVAL	269:33	269:33	9	OPEN_ALWAYS
FIELD	269:33	269:33	10	OPEN_ALWAYS
LEAF_NODE	269:33	269:33	11	OPEN_ALWAYS
LEAF_NODE	269:44	269:44	7	;
JUMP_STATEMENT	269:48	269:53	6	break DESTINATION ;
KEYWORD	269:48	269:48	7	break
LEAF_NODE	269:48	269:48	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	269:53	269:53	7	;
LEAF_NODE	270:2	270:2	6	case
LEAF_NODE	270:7	270:7	6	O_RDWR
LEAF_NODE	270:13	270:13	6	|
LABEL	270:14	270:21	6	O_TRUNC :
LEAF_NODE	270:14	270:14	7	O_TRUNC
LEAF_NODE	270:21	270:21	7	:
EXPR_STATEMENT	270:24	270:46	6	dwMode = CREATE_ALWAYS ;
EXPR	270:24	270:24	7	dwMode = CREATE_ALWAYS
ASSIGN	270:24	270:33	8	dwMode = CREATE_ALWAYS
LVAL	270:24	270:24	9	dwMode
FIELD	270:24	270:24	10	dwMode
LEAF_NODE	270:24	270:24	11	dwMode
ASSIGN_OP	270:31	270:31	9	=
LEAF_NODE	270:31	270:31	10	=
RVAL	270:33	270:33	9	CREATE_ALWAYS
FIELD	270:33	270:33	10	CREATE_ALWAYS
LEAF_NODE	270:33	270:33	11	CREATE_ALWAYS
LEAF_NODE	270:46	270:46	7	;
JUMP_STATEMENT	270:48	270:53	6	break DESTINATION ;
KEYWORD	270:48	270:48	7	break
LEAF_NODE	270:48	270:48	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	270:53	270:53	7	;
LEAF_NODE	271:2	271:2	6	case
LEAF_NODE	271:7	271:7	6	O_RDWR
LEAF_NODE	271:13	271:13	6	|
LEAF_NODE	271:14	271:14	6	O_CREAT
LEAF_NODE	271:21	271:21	6	|
LABEL	271:22	271:29	6	O_TRUNC :
LEAF_NODE	271:22	271:22	7	O_TRUNC
LEAF_NODE	271:29	271:29	7	:
EXPR_STATEMENT	271:31	271:53	6	dwMode = CREATE_ALWAYS ;
EXPR	271:31	271:31	7	dwMode = CREATE_ALWAYS
ASSIGN	271:31	271:40	8	dwMode = CREATE_ALWAYS
LVAL	271:31	271:31	9	dwMode
FIELD	271:31	271:31	10	dwMode
LEAF_NODE	271:31	271:31	11	dwMode
ASSIGN_OP	271:38	271:38	9	=
LEAF_NODE	271:38	271:38	10	=
RVAL	271:40	271:40	9	CREATE_ALWAYS
FIELD	271:40	271:40	10	CREATE_ALWAYS
LEAF_NODE	271:40	271:40	11	CREATE_ALWAYS
LEAF_NODE	271:53	271:53	7	;
JUMP_STATEMENT	271:55	271:60	6	break DESTINATION ;
KEYWORD	271:55	271:55	7	break
LEAF_NODE	271:55	271:55	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	271:60	271:60	7	;
LABEL	272:2	272:9	6	default :
LEAF_NODE	272:2	272:2	7	default
LEAF_NODE	272:9	272:9	7	:
JUMP_STATEMENT	272:13	272:30	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	272:13	272:13	7	return
LEAF_NODE	272:13	272:13	8	return
DESTINATION	272:20	272:20	7	( ( TIFF * ) 0 )
EXPR	272:20	272:29	8	( ( TIFF * ) 0 )
LEAF_NODE	272:20	272:20	9	(
LEAF_NODE	272:21	272:21	9	(
TYPE_NAME	272:22	272:22	9	TIFF
LEAF_NODE	272:22	272:22	10	TIFF
LEAF_NODE	272:26	272:26	9	*
LEAF_NODE	272:27	272:27	9	)
FIELD	272:28	272:28	9	0
LEAF_NODE	272:28	272:28	10	0
LEAF_NODE	272:29	272:29	9	)
LEAF_NODE	272:30	272:30	7	;
LEAF_NODE	273:1	273:1	5	}
EXPR_STATEMENT	275:1	279:7	3	fd = ( thandle_t ) CreateFileA ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL ) ;
EXPR	275:1	275:1	4	fd = ( thandle_t ) CreateFileA ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
ASSIGN	275:1	275:6	5	fd = ( thandle_t ) CreateFileA ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
LVAL	275:1	275:1	6	fd
FIELD	275:1	275:1	7	fd
LEAF_NODE	275:1	275:1	8	fd
ASSIGN_OP	275:4	275:4	6	=
LEAF_NODE	275:4	275:4	7	=
RVAL	275:6	275:17	6	( thandle_t ) CreateFileA ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
LEAF_NODE	275:6	275:6	7	(
TYPE_NAME	275:7	275:7	7	thandle_t
LEAF_NODE	275:7	275:7	8	thandle_t
LEAF_NODE	275:16	275:16	7	)
FUNCTION_CALL	275:17	279:6	7	CreateFileA ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
CALLEE	275:17	275:17	8	CreateFileA
LEAF_NODE	275:17	275:17	9	CreateFileA
LEAF_NODE	275:28	275:28	8	(
ARGUMENT	275:29	275:29	8	name
FIELD	275:29	275:29	9	name
LEAF_NODE	275:29	275:29	10	name
LEAF_NODE	275:33	275:33	8	,
ARGUMENT	276:2	276:2	8	( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE )
COND_EXPR	276:2	276:60	9	( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE )
CONDITION	276:2	276:16	10	( m == O_RDONLY )
LEAF_NODE	276:2	276:2	11	(
FIELD	276:3	276:3	11	m
LEAF_NODE	276:3	276:3	12	m
EQ_OPERATOR	276:5	276:5	11	==
LEAF_NODE	276:5	276:5	12	==
FIELD	276:8	276:8	11	O_RDONLY
LEAF_NODE	276:8	276:8	12	O_RDONLY
LEAF_NODE	276:16	276:16	11	)
LEAF_NODE	276:17	276:17	10	?
EXPR	276:18	276:18	10	GENERIC_READ
FIELD	276:18	276:18	11	GENERIC_READ
LEAF_NODE	276:18	276:18	12	GENERIC_READ
LEAF_NODE	276:30	276:30	10	:
LEAF_NODE	276:31	276:31	10	(
BIT_OR	276:32	276:47	10	GENERIC_READ | GENERIC_WRITE
BIT_OR_ELEM	276:32	276:32	11	GENERIC_READ
FIELD	276:32	276:32	12	GENERIC_READ
LEAF_NODE	276:32	276:32	13	GENERIC_READ
LEAF_NODE	276:45	276:45	11	|
BIT_OR_ELEM	276:47	276:47	11	GENERIC_WRITE
FIELD	276:47	276:47	12	GENERIC_WRITE
LEAF_NODE	276:47	276:47	13	GENERIC_WRITE
LEAF_NODE	276:60	276:60	10	)
LEAF_NODE	276:61	276:61	8	,
ARGUMENT	277:2	277:2	8	FILE_SHARE_READ | FILE_SHARE_WRITE
BIT_OR	277:2	277:20	9	FILE_SHARE_READ | FILE_SHARE_WRITE
BIT_OR_ELEM	277:2	277:2	10	FILE_SHARE_READ
FIELD	277:2	277:2	11	FILE_SHARE_READ
LEAF_NODE	277:2	277:2	12	FILE_SHARE_READ
LEAF_NODE	277:18	277:18	10	|
BIT_OR_ELEM	277:20	277:20	10	FILE_SHARE_WRITE
FIELD	277:20	277:20	11	FILE_SHARE_WRITE
LEAF_NODE	277:20	277:20	12	FILE_SHARE_WRITE
LEAF_NODE	277:36	277:36	8	,
ARGUMENT	277:38	277:38	8	NULL
FIELD	277:38	277:38	9	NULL
LEAF_NODE	277:38	277:38	10	NULL
LEAF_NODE	277:42	277:42	8	,
ARGUMENT	277:44	277:44	8	dwMode
FIELD	277:44	277:44	9	dwMode
LEAF_NODE	277:44	277:44	10	dwMode
LEAF_NODE	277:50	277:50	8	,
ARGUMENT	278:2	278:2	8	( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL
COND_EXPR	278:2	278:42	9	( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL
CONDITION	278:2	278:16	10	( m == O_RDONLY )
LEAF_NODE	278:2	278:2	11	(
FIELD	278:3	278:3	11	m
LEAF_NODE	278:3	278:3	12	m
EQ_OPERATOR	278:5	278:5	11	==
LEAF_NODE	278:5	278:5	12	==
FIELD	278:8	278:8	11	O_RDONLY
LEAF_NODE	278:8	278:8	12	O_RDONLY
LEAF_NODE	278:16	278:16	11	)
LEAF_NODE	278:17	278:17	10	?
EXPR	278:18	278:18	10	FILE_ATTRIBUTE_READONLY
FIELD	278:18	278:18	11	FILE_ATTRIBUTE_READONLY
LEAF_NODE	278:18	278:18	12	FILE_ATTRIBUTE_READONLY
LEAF_NODE	278:41	278:41	10	:
FIELD	278:42	278:42	10	FILE_ATTRIBUTE_NORMAL
LEAF_NODE	278:42	278:42	11	FILE_ATTRIBUTE_NORMAL
LEAF_NODE	278:63	278:63	8	,
ARGUMENT	279:2	279:2	8	NULL
FIELD	279:2	279:2	9	NULL
LEAF_NODE	279:2	279:2	10	NULL
LEAF_NODE	279:6	279:6	8	)
LEAF_NODE	279:7	279:7	4	;
SELECTION	280:1	280:33	3	
KEYWORD	280:1	280:1	4	if
LEAF_NODE	280:1	280:1	5	if
LEAF_NODE	280:4	280:4	4	(
CONDITION	280:5	280:5	4	fd == INVALID_HANDLE_VALUE
EXPR	280:5	280:11	5	fd == INVALID_HANDLE_VALUE
FIELD	280:5	280:5	6	fd
LEAF_NODE	280:5	280:5	7	fd
EQ_OPERATOR	280:8	280:8	6	==
LEAF_NODE	280:8	280:8	7	==
FIELD	280:11	280:11	6	INVALID_HANDLE_VALUE
LEAF_NODE	280:11	280:11	7	INVALID_HANDLE_VALUE
LEAF_NODE	280:31	280:31	4	)
STATEMENTS	280:33	283:1	4	
LEAF_NODE	280:33	280:33	5	{
STATEMENTS	281:2	282:2	5	
EXPR_STATEMENT	281:2	281:50	6	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name ) ;
EXPR	281:2	281:2	7	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name )
FUNCTION_CALL	281:2	281:49	8	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name )
CALLEE	281:2	281:2	9	TIFFErrorExt
LEAF_NODE	281:2	281:2	10	TIFFErrorExt
LEAF_NODE	281:14	281:14	9	(
ARGUMENT	281:15	281:15	9	0
FIELD	281:15	281:15	10	0
LEAF_NODE	281:15	281:15	11	0
LEAF_NODE	281:16	281:16	9	,
ARGUMENT	281:18	281:18	9	module
FIELD	281:18	281:18	10	module
LEAF_NODE	281:18	281:18	11	module
LEAF_NODE	281:24	281:24	9	,
ARGUMENT	281:26	281:26	9	"%s: Cannot open"
FIELD	281:26	281:26	10	"%s: Cannot open"
LEAF_NODE	281:26	281:26	11	"%s: Cannot open"
LEAF_NODE	281:43	281:43	9	,
ARGUMENT	281:45	281:45	9	name
FIELD	281:45	281:45	10	name
LEAF_NODE	281:45	281:45	11	name
LEAF_NODE	281:49	281:49	9	)
LEAF_NODE	281:50	281:50	7	;
JUMP_STATEMENT	282:2	282:20	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	282:2	282:2	7	return
LEAF_NODE	282:2	282:2	8	return
DESTINATION	282:9	282:9	7	( ( TIFF * ) 0 )
EXPR	282:9	282:19	8	( ( TIFF * ) 0 )
LEAF_NODE	282:9	282:9	9	(
LEAF_NODE	282:10	282:10	9	(
TYPE_NAME	282:11	282:11	9	TIFF
LEAF_NODE	282:11	282:11	10	TIFF
LEAF_NODE	282:16	282:16	9	*
LEAF_NODE	282:17	282:17	9	)
FIELD	282:18	282:18	9	0
LEAF_NODE	282:18	282:18	10	0
LEAF_NODE	282:19	282:19	9	)
LEAF_NODE	282:20	282:20	7	;
LEAF_NODE	283:1	283:1	5	}
EXPR_STATEMENT	285:1	285:38	3	tif = TIFFFdOpen ( ( int ) fd , name , mode ) ;
EXPR	285:1	285:1	4	tif = TIFFFdOpen ( ( int ) fd , name , mode )
ASSIGN	285:1	285:7	5	tif = TIFFFdOpen ( ( int ) fd , name , mode )
LVAL	285:1	285:1	6	tif
FIELD	285:1	285:1	7	tif
LEAF_NODE	285:1	285:1	8	tif
ASSIGN_OP	285:5	285:5	6	=
LEAF_NODE	285:5	285:5	7	=
RVAL	285:7	285:7	6	TIFFFdOpen ( ( int ) fd , name , mode )
FUNCTION_CALL	285:7	285:37	7	TIFFFdOpen ( ( int ) fd , name , mode )
CALLEE	285:7	285:7	8	TIFFFdOpen
LEAF_NODE	285:7	285:7	9	TIFFFdOpen
LEAF_NODE	285:17	285:17	8	(
ARGUMENT	285:18	285:23	8	( int ) fd
LEAF_NODE	285:18	285:18	9	(
TYPE_NAME	285:19	285:19	9	int
LEAF_NODE	285:19	285:19	10	int
LEAF_NODE	285:22	285:22	9	)
FIELD	285:23	285:23	9	fd
LEAF_NODE	285:23	285:23	10	fd
LEAF_NODE	285:25	285:25	8	,
ARGUMENT	285:27	285:27	8	name
FIELD	285:27	285:27	9	name
LEAF_NODE	285:27	285:27	10	name
LEAF_NODE	285:31	285:31	8	,
ARGUMENT	285:33	285:33	8	mode
FIELD	285:33	285:33	9	mode
LEAF_NODE	285:33	285:33	10	mode
LEAF_NODE	285:37	285:37	8	)
LEAF_NODE	285:38	285:38	4	;
SELECTION	286:1	287:2	3	
KEYWORD	286:1	286:1	4	if
LEAF_NODE	286:1	286:1	5	if
LEAF_NODE	286:3	286:3	4	(
CONDITION	286:4	286:4	4	! tif
EXPR	286:4	286:4	5	! tif
UNARY_EXPR	286:4	286:5	6	! tif
UNARY_OPERATOR	286:4	286:4	7	!
LEAF_NODE	286:4	286:4	8	!
FIELD	286:5	286:5	7	tif
LEAF_NODE	286:5	286:5	8	tif
LEAF_NODE	286:8	286:8	4	)
STATEMENTS	287:2	287:2	4	
EXPR_STATEMENT	287:2	287:17	5	CloseHandle ( fd ) ;
EXPR	287:2	287:2	6	CloseHandle ( fd )
FUNCTION_CALL	287:2	287:16	7	CloseHandle ( fd )
CALLEE	287:2	287:2	8	CloseHandle
LEAF_NODE	287:2	287:2	9	CloseHandle
LEAF_NODE	287:13	287:13	8	(
ARGUMENT	287:14	287:14	8	fd
FIELD	287:14	287:14	9	fd
LEAF_NODE	287:14	287:14	10	fd
LEAF_NODE	287:16	287:16	8	)
LEAF_NODE	287:17	287:17	6	;
JUMP_STATEMENT	288:1	288:11	3	return tif ;
KEYWORD	288:1	288:1	4	return
LEAF_NODE	288:1	288:1	5	return
DESTINATION	288:8	288:8	4	tif
EXPR	288:8	288:8	5	tif
FIELD	288:8	288:8	6	tif
LEAF_NODE	288:8	288:8	7	tif
LEAF_NODE	288:11	288:11	4	;
LEAF_NODE	289:0	289:0	2	}
FUNCTION_DEF	294:0	348:0	1	
RETURN_TYPE	294:0	294:4	2	TIFF *
TYPE_NAME	294:0	294:0	3	TIFF
LEAF_NODE	294:0	294:0	4	TIFF
LEAF_NODE	294:4	294:4	3	*
FUNCTION_NAME	295:0	295:0	2	TIFFOpenW
LEAF_NODE	295:0	295:0	3	TIFFOpenW
PARAMETER_LIST	295:9	295:47	2	( const wchar_t * name , const char * mode )
LEAF_NODE	295:9	295:9	3	(
PARAMETER_DECL	295:10	295:25	3	const wchar_t * name
TYPE	295:10	295:23	4	const wchar_t *
TYPE_NAME	295:10	295:16	5	const wchar_t
LEAF_NODE	295:10	295:10	6	const
LEAF_NODE	295:16	295:16	6	wchar_t
POINTER	295:23	295:23	5	*
LEAF_NODE	295:23	295:23	6	*
NAME	295:25	295:25	4	name
LEAF_NODE	295:25	295:25	5	name
LEAF_NODE	295:29	295:29	3	,
PARAMETER_DECL	295:31	295:43	3	const char * mode
TYPE	295:31	295:41	4	const char *
TYPE_NAME	295:31	295:37	5	const char
LEAF_NODE	295:31	295:31	6	const
LEAF_NODE	295:37	295:37	6	char
POINTER	295:41	295:41	5	*
LEAF_NODE	295:41	295:41	6	*
NAME	295:43	295:43	4	mode
LEAF_NODE	295:43	295:43	5	mode
LEAF_NODE	295:47	295:47	3	)
LEAF_NODE	296:0	296:0	2	{
STATEMENTS	297:1	347:1	2	
LEAF_NODE	297:1	297:1	3	static
SIMPLE_DECL	297:8	297:41	3	const char [ ] module ; module = "TIFFOpenW" ;
VAR_DECL	297:8	297:19	4	const char [ ] module ; module = "TIFFOpenW"
TYPE	297:8	297:25	5	const char [ ]
TYPE_NAME	297:8	297:14	6	const char
LEAF_NODE	297:8	297:8	7	const
LEAF_NODE	297:14	297:14	7	char
TYPE_SUFFIX	297:25	297:26	6	[ ]
LEAF_NODE	297:25	297:25	7	[
LEAF_NODE	297:26	297:26	7	]
NAME	297:19	297:19	5	module
LEAF_NODE	297:19	297:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	297:19	297:19	5	module = "TIFFOpenW"
ASSIGN	297:19	297:30	6	module = "TIFFOpenW"
LVAL	297:19	297:19	7	module
NAME	297:19	297:19	8	module
LEAF_NODE	297:19	297:19	9	module
ASSIGN_OP	297:28	297:28	7	=
LEAF_NODE	297:28	297:28	8	=
RVAL	297:30	297:30	7	"TIFFOpenW"
FIELD	297:30	297:30	8	"TIFFOpenW"
LEAF_NODE	297:30	297:30	9	"TIFFOpenW"
LEAF_NODE	297:41	297:41	4	;
SIMPLE_DECL	298:1	298:13	3	thandle_t fd ;
VAR_DECL	298:1	298:11	4	thandle_t fd
TYPE	298:1	298:1	5	thandle_t
TYPE_NAME	298:1	298:1	6	thandle_t
LEAF_NODE	298:1	298:1	7	thandle_t
NAME	298:11	298:11	5	fd
LEAF_NODE	298:11	298:11	6	fd
LEAF_NODE	298:13	298:13	4	;
SIMPLE_DECL	299:1	299:6	3	int m ;
VAR_DECL	299:1	299:5	4	int m
TYPE	299:1	299:1	5	int
TYPE_NAME	299:1	299:1	6	int
LEAF_NODE	299:1	299:1	7	int
NAME	299:5	299:5	5	m
LEAF_NODE	299:5	299:5	6	m
LEAF_NODE	299:6	299:6	4	;
SIMPLE_DECL	300:1	300:13	3	DWORD dwMode ;
VAR_DECL	300:1	300:7	4	DWORD dwMode
TYPE	300:1	300:1	5	DWORD
TYPE_NAME	300:1	300:1	6	DWORD
LEAF_NODE	300:1	300:1	7	DWORD
NAME	300:7	300:7	5	dwMode
LEAF_NODE	300:7	300:7	6	dwMode
LEAF_NODE	300:13	300:13	4	;
SIMPLE_DECL	301:1	301:11	3	int mbsize ;
VAR_DECL	301:1	301:5	4	int mbsize
TYPE	301:1	301:1	5	int
TYPE_NAME	301:1	301:1	6	int
LEAF_NODE	301:1	301:1	7	int
NAME	301:5	301:5	5	mbsize
LEAF_NODE	301:5	301:5	6	mbsize
LEAF_NODE	301:11	301:11	4	;
SIMPLE_DECL	302:1	302:13	3	char * mbname ;
VAR_DECL	302:1	302:7	4	char * mbname
TYPE	302:1	302:6	5	char *
TYPE_NAME	302:1	302:1	6	char
LEAF_NODE	302:1	302:1	7	char
POINTER	302:6	302:6	6	*
LEAF_NODE	302:6	302:6	7	*
NAME	302:7	302:7	5	mbname
LEAF_NODE	302:7	302:7	6	mbname
LEAF_NODE	302:13	302:13	4	;
SIMPLE_DECL	303:1	303:10	3	TIFF * tif ;
VAR_DECL	303:1	303:7	4	TIFF * tif
TYPE	303:1	303:6	5	TIFF *
TYPE_NAME	303:1	303:1	6	TIFF
LEAF_NODE	303:1	303:1	7	TIFF
POINTER	303:6	303:6	6	*
LEAF_NODE	303:6	303:6	7	*
NAME	303:7	303:7	5	tif
LEAF_NODE	303:7	303:7	6	tif
LEAF_NODE	303:10	303:10	4	;
EXPR_STATEMENT	305:1	305:31	3	m = _TIFFgetMode ( mode , module ) ;
EXPR	305:1	305:1	4	m = _TIFFgetMode ( mode , module )
ASSIGN	305:1	305:5	5	m = _TIFFgetMode ( mode , module )
LVAL	305:1	305:1	6	m
FIELD	305:1	305:1	7	m
LEAF_NODE	305:1	305:1	8	m
ASSIGN_OP	305:3	305:3	6	=
LEAF_NODE	305:3	305:3	7	=
RVAL	305:5	305:5	6	_TIFFgetMode ( mode , module )
FUNCTION_CALL	305:5	305:30	7	_TIFFgetMode ( mode , module )
CALLEE	305:5	305:5	8	_TIFFgetMode
LEAF_NODE	305:5	305:5	9	_TIFFgetMode
LEAF_NODE	305:17	305:17	8	(
ARGUMENT	305:18	305:18	8	mode
FIELD	305:18	305:18	9	mode
LEAF_NODE	305:18	305:18	10	mode
LEAF_NODE	305:22	305:22	8	,
ARGUMENT	305:24	305:24	8	module
FIELD	305:24	305:24	9	module
LEAF_NODE	305:24	305:24	10	module
LEAF_NODE	305:30	305:30	8	)
LEAF_NODE	305:31	305:31	4	;
SELECTION	307:1	307:11	3	
KEYWORD	307:1	307:1	4	switch
LEAF_NODE	307:1	307:1	5	switch
LEAF_NODE	307:7	307:7	4	(
CONDITION	307:8	307:8	4	m
EXPR	307:8	307:8	5	m
FIELD	307:8	307:8	6	m
LEAF_NODE	307:8	307:8	7	m
LEAF_NODE	307:9	307:9	4	)
STATEMENTS	307:11	314:1	4	
LEAF_NODE	307:11	307:11	5	{
STATEMENTS	308:2	313:13	5	
LABEL	308:2	308:15	6	case O_RDONLY :
LEAF_NODE	308:2	308:2	7	case
LEAF_NODE	308:7	308:7	7	O_RDONLY
LEAF_NODE	308:15	308:15	7	:
EXPR_STATEMENT	308:19	308:41	6	dwMode = OPEN_EXISTING ;
EXPR	308:19	308:19	7	dwMode = OPEN_EXISTING
ASSIGN	308:19	308:28	8	dwMode = OPEN_EXISTING
LVAL	308:19	308:19	9	dwMode
FIELD	308:19	308:19	10	dwMode
LEAF_NODE	308:19	308:19	11	dwMode
ASSIGN_OP	308:26	308:26	9	=
LEAF_NODE	308:26	308:26	10	=
RVAL	308:28	308:28	9	OPEN_EXISTING
FIELD	308:28	308:28	10	OPEN_EXISTING
LEAF_NODE	308:28	308:28	11	OPEN_EXISTING
LEAF_NODE	308:41	308:41	7	;
JUMP_STATEMENT	308:43	308:48	6	break DESTINATION ;
KEYWORD	308:43	308:43	7	break
LEAF_NODE	308:43	308:43	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	308:48	308:48	7	;
LABEL	309:2	309:13	6	case O_RDWR :
LEAF_NODE	309:2	309:2	7	case
LEAF_NODE	309:7	309:7	7	O_RDWR
LEAF_NODE	309:13	309:13	7	:
EXPR_STATEMENT	309:17	309:37	6	dwMode = OPEN_ALWAYS ;
EXPR	309:17	309:17	7	dwMode = OPEN_ALWAYS
ASSIGN	309:17	309:26	8	dwMode = OPEN_ALWAYS
LVAL	309:17	309:17	9	dwMode
FIELD	309:17	309:17	10	dwMode
LEAF_NODE	309:17	309:17	11	dwMode
ASSIGN_OP	309:24	309:24	9	=
LEAF_NODE	309:24	309:24	10	=
RVAL	309:26	309:26	9	OPEN_ALWAYS
FIELD	309:26	309:26	10	OPEN_ALWAYS
LEAF_NODE	309:26	309:26	11	OPEN_ALWAYS
LEAF_NODE	309:37	309:37	7	;
JUMP_STATEMENT	309:41	309:46	6	break DESTINATION ;
KEYWORD	309:41	309:41	7	break
LEAF_NODE	309:41	309:41	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	309:46	309:46	7	;
LEAF_NODE	310:2	310:2	6	case
LEAF_NODE	310:7	310:7	6	O_RDWR
LEAF_NODE	310:13	310:13	6	|
LABEL	310:14	310:21	6	O_CREAT :
LEAF_NODE	310:14	310:14	7	O_CREAT
LEAF_NODE	310:21	310:21	7	:
EXPR_STATEMENT	310:24	310:44	6	dwMode = OPEN_ALWAYS ;
EXPR	310:24	310:24	7	dwMode = OPEN_ALWAYS
ASSIGN	310:24	310:33	8	dwMode = OPEN_ALWAYS
LVAL	310:24	310:24	9	dwMode
FIELD	310:24	310:24	10	dwMode
LEAF_NODE	310:24	310:24	11	dwMode
ASSIGN_OP	310:31	310:31	9	=
LEAF_NODE	310:31	310:31	10	=
RVAL	310:33	310:33	9	OPEN_ALWAYS
FIELD	310:33	310:33	10	OPEN_ALWAYS
LEAF_NODE	310:33	310:33	11	OPEN_ALWAYS
LEAF_NODE	310:44	310:44	7	;
JUMP_STATEMENT	310:48	310:53	6	break DESTINATION ;
KEYWORD	310:48	310:48	7	break
LEAF_NODE	310:48	310:48	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	310:53	310:53	7	;
LEAF_NODE	311:2	311:2	6	case
LEAF_NODE	311:7	311:7	6	O_RDWR
LEAF_NODE	311:13	311:13	6	|
LABEL	311:14	311:21	6	O_TRUNC :
LEAF_NODE	311:14	311:14	7	O_TRUNC
LEAF_NODE	311:21	311:21	7	:
EXPR_STATEMENT	311:24	311:46	6	dwMode = CREATE_ALWAYS ;
EXPR	311:24	311:24	7	dwMode = CREATE_ALWAYS
ASSIGN	311:24	311:33	8	dwMode = CREATE_ALWAYS
LVAL	311:24	311:24	9	dwMode
FIELD	311:24	311:24	10	dwMode
LEAF_NODE	311:24	311:24	11	dwMode
ASSIGN_OP	311:31	311:31	9	=
LEAF_NODE	311:31	311:31	10	=
RVAL	311:33	311:33	9	CREATE_ALWAYS
FIELD	311:33	311:33	10	CREATE_ALWAYS
LEAF_NODE	311:33	311:33	11	CREATE_ALWAYS
LEAF_NODE	311:46	311:46	7	;
JUMP_STATEMENT	311:48	311:53	6	break DESTINATION ;
KEYWORD	311:48	311:48	7	break
LEAF_NODE	311:48	311:48	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	311:53	311:53	7	;
LEAF_NODE	312:2	312:2	6	case
LEAF_NODE	312:7	312:7	6	O_RDWR
LEAF_NODE	312:13	312:13	6	|
LEAF_NODE	312:14	312:14	6	O_CREAT
LEAF_NODE	312:21	312:21	6	|
LABEL	312:22	312:29	6	O_TRUNC :
LEAF_NODE	312:22	312:22	7	O_TRUNC
LEAF_NODE	312:29	312:29	7	:
EXPR_STATEMENT	312:31	312:53	6	dwMode = CREATE_ALWAYS ;
EXPR	312:31	312:31	7	dwMode = CREATE_ALWAYS
ASSIGN	312:31	312:40	8	dwMode = CREATE_ALWAYS
LVAL	312:31	312:31	9	dwMode
FIELD	312:31	312:31	10	dwMode
LEAF_NODE	312:31	312:31	11	dwMode
ASSIGN_OP	312:38	312:38	9	=
LEAF_NODE	312:38	312:38	10	=
RVAL	312:40	312:40	9	CREATE_ALWAYS
FIELD	312:40	312:40	10	CREATE_ALWAYS
LEAF_NODE	312:40	312:40	11	CREATE_ALWAYS
LEAF_NODE	312:53	312:53	7	;
JUMP_STATEMENT	312:55	312:60	6	break DESTINATION ;
KEYWORD	312:55	312:55	7	break
LEAF_NODE	312:55	312:55	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	312:60	312:60	7	;
LABEL	313:2	313:9	6	default :
LEAF_NODE	313:2	313:2	7	default
LEAF_NODE	313:9	313:9	7	:
JUMP_STATEMENT	313:13	313:30	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	313:13	313:13	7	return
LEAF_NODE	313:13	313:13	8	return
DESTINATION	313:20	313:20	7	( ( TIFF * ) 0 )
EXPR	313:20	313:29	8	( ( TIFF * ) 0 )
LEAF_NODE	313:20	313:20	9	(
LEAF_NODE	313:21	313:21	9	(
TYPE_NAME	313:22	313:22	9	TIFF
LEAF_NODE	313:22	313:22	10	TIFF
LEAF_NODE	313:26	313:26	9	*
LEAF_NODE	313:27	313:27	9	)
FIELD	313:28	313:28	9	0
LEAF_NODE	313:28	313:28	10	0
LEAF_NODE	313:29	313:29	9	)
LEAF_NODE	313:30	313:30	7	;
LEAF_NODE	314:1	314:1	5	}
EXPR_STATEMENT	316:1	320:7	3	fd = ( thandle_t ) CreateFileW ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL ) ;
EXPR	316:1	316:1	4	fd = ( thandle_t ) CreateFileW ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
ASSIGN	316:1	316:6	5	fd = ( thandle_t ) CreateFileW ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
LVAL	316:1	316:1	6	fd
FIELD	316:1	316:1	7	fd
LEAF_NODE	316:1	316:1	8	fd
ASSIGN_OP	316:4	316:4	6	=
LEAF_NODE	316:4	316:4	7	=
RVAL	316:6	316:17	6	( thandle_t ) CreateFileW ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
LEAF_NODE	316:6	316:6	7	(
TYPE_NAME	316:7	316:7	7	thandle_t
LEAF_NODE	316:7	316:7	8	thandle_t
LEAF_NODE	316:16	316:16	7	)
FUNCTION_CALL	316:17	320:6	7	CreateFileW ( name , ( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE ) , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL , dwMode , ( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL , NULL )
CALLEE	316:17	316:17	8	CreateFileW
LEAF_NODE	316:17	316:17	9	CreateFileW
LEAF_NODE	316:28	316:28	8	(
ARGUMENT	316:29	316:29	8	name
FIELD	316:29	316:29	9	name
LEAF_NODE	316:29	316:29	10	name
LEAF_NODE	316:33	316:33	8	,
ARGUMENT	317:2	317:2	8	( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE )
COND_EXPR	317:2	317:58	9	( m == O_RDONLY ) ? GENERIC_READ : ( GENERIC_READ | GENERIC_WRITE )
CONDITION	317:2	317:16	10	( m == O_RDONLY )
LEAF_NODE	317:2	317:2	11	(
FIELD	317:3	317:3	11	m
LEAF_NODE	317:3	317:3	12	m
EQ_OPERATOR	317:5	317:5	11	==
LEAF_NODE	317:5	317:5	12	==
FIELD	317:8	317:8	11	O_RDONLY
LEAF_NODE	317:8	317:8	12	O_RDONLY
LEAF_NODE	317:16	317:16	11	)
LEAF_NODE	317:17	317:17	10	?
EXPR	317:18	317:18	10	GENERIC_READ
FIELD	317:18	317:18	11	GENERIC_READ
LEAF_NODE	317:18	317:18	12	GENERIC_READ
LEAF_NODE	317:30	317:30	10	:
LEAF_NODE	317:31	317:31	10	(
BIT_OR	317:32	317:45	10	GENERIC_READ | GENERIC_WRITE
BIT_OR_ELEM	317:32	317:32	11	GENERIC_READ
FIELD	317:32	317:32	12	GENERIC_READ
LEAF_NODE	317:32	317:32	13	GENERIC_READ
LEAF_NODE	317:44	317:44	11	|
BIT_OR_ELEM	317:45	317:45	11	GENERIC_WRITE
FIELD	317:45	317:45	12	GENERIC_WRITE
LEAF_NODE	317:45	317:45	13	GENERIC_WRITE
LEAF_NODE	317:58	317:58	10	)
LEAF_NODE	317:59	317:59	8	,
ARGUMENT	318:2	318:2	8	FILE_SHARE_READ | FILE_SHARE_WRITE
BIT_OR	318:2	318:20	9	FILE_SHARE_READ | FILE_SHARE_WRITE
BIT_OR_ELEM	318:2	318:2	10	FILE_SHARE_READ
FIELD	318:2	318:2	11	FILE_SHARE_READ
LEAF_NODE	318:2	318:2	12	FILE_SHARE_READ
LEAF_NODE	318:18	318:18	10	|
BIT_OR_ELEM	318:20	318:20	10	FILE_SHARE_WRITE
FIELD	318:20	318:20	11	FILE_SHARE_WRITE
LEAF_NODE	318:20	318:20	12	FILE_SHARE_WRITE
LEAF_NODE	318:36	318:36	8	,
ARGUMENT	318:38	318:38	8	NULL
FIELD	318:38	318:38	9	NULL
LEAF_NODE	318:38	318:38	10	NULL
LEAF_NODE	318:42	318:42	8	,
ARGUMENT	318:44	318:44	8	dwMode
FIELD	318:44	318:44	9	dwMode
LEAF_NODE	318:44	318:44	10	dwMode
LEAF_NODE	318:50	318:50	8	,
ARGUMENT	319:2	319:2	8	( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL
COND_EXPR	319:2	319:42	9	( m == O_RDONLY ) ? FILE_ATTRIBUTE_READONLY : FILE_ATTRIBUTE_NORMAL
CONDITION	319:2	319:16	10	( m == O_RDONLY )
LEAF_NODE	319:2	319:2	11	(
FIELD	319:3	319:3	11	m
LEAF_NODE	319:3	319:3	12	m
EQ_OPERATOR	319:5	319:5	11	==
LEAF_NODE	319:5	319:5	12	==
FIELD	319:8	319:8	11	O_RDONLY
LEAF_NODE	319:8	319:8	12	O_RDONLY
LEAF_NODE	319:16	319:16	11	)
LEAF_NODE	319:17	319:17	10	?
EXPR	319:18	319:18	10	FILE_ATTRIBUTE_READONLY
FIELD	319:18	319:18	11	FILE_ATTRIBUTE_READONLY
LEAF_NODE	319:18	319:18	12	FILE_ATTRIBUTE_READONLY
LEAF_NODE	319:41	319:41	10	:
FIELD	319:42	319:42	10	FILE_ATTRIBUTE_NORMAL
LEAF_NODE	319:42	319:42	11	FILE_ATTRIBUTE_NORMAL
LEAF_NODE	319:63	319:63	8	,
ARGUMENT	320:2	320:2	8	NULL
FIELD	320:2	320:2	9	NULL
LEAF_NODE	320:2	320:2	10	NULL
LEAF_NODE	320:6	320:6	8	)
LEAF_NODE	320:7	320:7	4	;
SELECTION	321:1	321:33	3	
KEYWORD	321:1	321:1	4	if
LEAF_NODE	321:1	321:1	5	if
LEAF_NODE	321:4	321:4	4	(
CONDITION	321:5	321:5	4	fd == INVALID_HANDLE_VALUE
EXPR	321:5	321:11	5	fd == INVALID_HANDLE_VALUE
FIELD	321:5	321:5	6	fd
LEAF_NODE	321:5	321:5	7	fd
EQ_OPERATOR	321:8	321:8	6	==
LEAF_NODE	321:8	321:8	7	==
FIELD	321:11	321:11	6	INVALID_HANDLE_VALUE
LEAF_NODE	321:11	321:11	7	INVALID_HANDLE_VALUE
LEAF_NODE	321:31	321:31	4	)
STATEMENTS	321:33	324:1	4	
LEAF_NODE	321:33	321:33	5	{
STATEMENTS	322:2	323:2	5	
EXPR_STATEMENT	322:2	322:50	6	TIFFErrorExt ( 0 , module , "%S: Cannot open" , name ) ;
EXPR	322:2	322:2	7	TIFFErrorExt ( 0 , module , "%S: Cannot open" , name )
FUNCTION_CALL	322:2	322:49	8	TIFFErrorExt ( 0 , module , "%S: Cannot open" , name )
CALLEE	322:2	322:2	9	TIFFErrorExt
LEAF_NODE	322:2	322:2	10	TIFFErrorExt
LEAF_NODE	322:14	322:14	9	(
ARGUMENT	322:15	322:15	9	0
FIELD	322:15	322:15	10	0
LEAF_NODE	322:15	322:15	11	0
LEAF_NODE	322:16	322:16	9	,
ARGUMENT	322:18	322:18	9	module
FIELD	322:18	322:18	10	module
LEAF_NODE	322:18	322:18	11	module
LEAF_NODE	322:24	322:24	9	,
ARGUMENT	322:26	322:26	9	"%S: Cannot open"
FIELD	322:26	322:26	10	"%S: Cannot open"
LEAF_NODE	322:26	322:26	11	"%S: Cannot open"
LEAF_NODE	322:43	322:43	9	,
ARGUMENT	322:45	322:45	9	name
FIELD	322:45	322:45	10	name
LEAF_NODE	322:45	322:45	11	name
LEAF_NODE	322:49	322:49	9	)
LEAF_NODE	322:50	322:50	7	;
JUMP_STATEMENT	323:2	323:20	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	323:2	323:2	7	return
LEAF_NODE	323:2	323:2	8	return
DESTINATION	323:9	323:9	7	( ( TIFF * ) 0 )
EXPR	323:9	323:19	8	( ( TIFF * ) 0 )
LEAF_NODE	323:9	323:9	9	(
LEAF_NODE	323:10	323:10	9	(
TYPE_NAME	323:11	323:11	9	TIFF
LEAF_NODE	323:11	323:11	10	TIFF
LEAF_NODE	323:16	323:16	9	*
LEAF_NODE	323:17	323:17	9	)
FIELD	323:18	323:18	9	0
LEAF_NODE	323:18	323:18	10	0
LEAF_NODE	323:19	323:19	9	)
LEAF_NODE	323:20	323:20	7	;
LEAF_NODE	324:1	324:1	5	}
EXPR_STATEMENT	326:1	326:14	3	mbname = NULL ;
EXPR	326:1	326:1	4	mbname = NULL
ASSIGN	326:1	326:10	5	mbname = NULL
LVAL	326:1	326:1	6	mbname
FIELD	326:1	326:1	7	mbname
LEAF_NODE	326:1	326:1	8	mbname
ASSIGN_OP	326:8	326:8	6	=
LEAF_NODE	326:8	326:8	7	=
RVAL	326:10	326:10	6	NULL
FIELD	326:10	326:10	7	NULL
LEAF_NODE	326:10	326:10	8	NULL
LEAF_NODE	326:14	326:14	4	;
EXPR_STATEMENT	327:1	327:71	3	mbsize = WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL ) ;
EXPR	327:1	327:1	4	mbsize = WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
ASSIGN	327:1	327:10	5	mbsize = WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
LVAL	327:1	327:1	6	mbsize
FIELD	327:1	327:1	7	mbsize
LEAF_NODE	327:1	327:1	8	mbsize
ASSIGN_OP	327:8	327:8	6	=
LEAF_NODE	327:8	327:8	7	=
RVAL	327:10	327:10	6	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
FUNCTION_CALL	327:10	327:70	7	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
CALLEE	327:10	327:10	8	WideCharToMultiByte
LEAF_NODE	327:10	327:10	9	WideCharToMultiByte
LEAF_NODE	327:29	327:29	8	(
ARGUMENT	327:30	327:30	8	CP_ACP
FIELD	327:30	327:30	9	CP_ACP
LEAF_NODE	327:30	327:30	10	CP_ACP
LEAF_NODE	327:36	327:36	8	,
ARGUMENT	327:38	327:38	8	0
FIELD	327:38	327:38	9	0
LEAF_NODE	327:38	327:38	10	0
LEAF_NODE	327:39	327:39	8	,
ARGUMENT	327:41	327:41	8	name
FIELD	327:41	327:41	9	name
LEAF_NODE	327:41	327:41	10	name
LEAF_NODE	327:45	327:45	8	,
ARGUMENT	327:47	327:47	8	- 1
UNARY_EXPR	327:47	327:48	9	- 1
UNARY_OPERATOR	327:47	327:47	10	-
LEAF_NODE	327:47	327:47	11	-
FIELD	327:48	327:48	10	1
LEAF_NODE	327:48	327:48	11	1
LEAF_NODE	327:49	327:49	8	,
ARGUMENT	327:51	327:51	8	NULL
FIELD	327:51	327:51	9	NULL
LEAF_NODE	327:51	327:51	10	NULL
LEAF_NODE	327:55	327:55	8	,
ARGUMENT	327:57	327:57	8	0
FIELD	327:57	327:57	9	0
LEAF_NODE	327:57	327:57	10	0
LEAF_NODE	327:58	327:58	8	,
ARGUMENT	327:60	327:60	8	NULL
FIELD	327:60	327:60	9	NULL
LEAF_NODE	327:60	327:60	10	NULL
LEAF_NODE	327:64	327:64	8	,
ARGUMENT	327:66	327:66	8	NULL
FIELD	327:66	327:66	9	NULL
LEAF_NODE	327:66	327:66	10	NULL
LEAF_NODE	327:70	327:70	8	)
LEAF_NODE	327:71	327:71	4	;
SELECTION	328:1	328:17	3	
KEYWORD	328:1	328:1	4	if
LEAF_NODE	328:1	328:1	5	if
LEAF_NODE	328:4	328:4	4	(
CONDITION	328:5	328:5	4	mbsize > 0
EXPR	328:5	328:14	5	mbsize > 0
FIELD	328:5	328:5	6	mbsize
LEAF_NODE	328:5	328:5	7	mbsize
REL_OPERATOR	328:12	328:12	6	>
LEAF_NODE	328:12	328:12	7	>
FIELD	328:14	328:14	6	0
LEAF_NODE	328:14	328:14	7	0
LEAF_NODE	328:15	328:15	4	)
STATEMENTS	328:17	338:1	4	
LEAF_NODE	328:17	328:17	5	{
STATEMENTS	329:2	336:2	5	
EXPR_STATEMENT	329:2	329:38	6	mbname = ( char * ) _TIFFmalloc ( mbsize ) ;
EXPR	329:2	329:2	7	mbname = ( char * ) _TIFFmalloc ( mbsize )
ASSIGN	329:2	329:11	8	mbname = ( char * ) _TIFFmalloc ( mbsize )
LVAL	329:2	329:2	9	mbname
FIELD	329:2	329:2	10	mbname
LEAF_NODE	329:2	329:2	11	mbname
ASSIGN_OP	329:9	329:9	9	=
LEAF_NODE	329:9	329:9	10	=
RVAL	329:11	329:19	9	( char * ) _TIFFmalloc ( mbsize )
LEAF_NODE	329:11	329:11	10	(
TYPE_NAME	329:12	329:12	10	char
LEAF_NODE	329:12	329:12	11	char
LEAF_NODE	329:17	329:17	10	*
LEAF_NODE	329:18	329:18	10	)
FUNCTION_CALL	329:19	329:37	10	_TIFFmalloc ( mbsize )
CALLEE	329:19	329:19	11	_TIFFmalloc
LEAF_NODE	329:19	329:19	12	_TIFFmalloc
LEAF_NODE	329:30	329:30	11	(
ARGUMENT	329:31	329:31	11	mbsize
FIELD	329:31	329:31	12	mbsize
LEAF_NODE	329:31	329:31	13	mbsize
LEAF_NODE	329:37	329:37	11	)
LEAF_NODE	329:38	329:38	7	;
SELECTION	330:2	330:15	6	
KEYWORD	330:2	330:2	7	if
LEAF_NODE	330:2	330:2	8	if
LEAF_NODE	330:5	330:5	7	(
CONDITION	330:6	330:6	7	! mbname
EXPR	330:6	330:6	8	! mbname
UNARY_EXPR	330:6	330:7	9	! mbname
UNARY_OPERATOR	330:6	330:6	10	!
LEAF_NODE	330:6	330:6	11	!
FIELD	330:7	330:7	10	mbname
LEAF_NODE	330:7	330:7	11	mbname
LEAF_NODE	330:13	330:13	7	)
STATEMENTS	330:15	334:2	7	
LEAF_NODE	330:15	330:15	8	{
STATEMENTS	331:3	333:3	8	
EXPR_STATEMENT	331:3	332:57	9	TIFFErrorExt ( 0 , module , "Can't allocate space for filename conversion buffer" ) ;
EXPR	331:3	331:3	10	TIFFErrorExt ( 0 , module , "Can't allocate space for filename conversion buffer" )
FUNCTION_CALL	331:3	332:56	11	TIFFErrorExt ( 0 , module , "Can't allocate space for filename conversion buffer" )
CALLEE	331:3	331:3	12	TIFFErrorExt
LEAF_NODE	331:3	331:3	13	TIFFErrorExt
LEAF_NODE	331:15	331:15	12	(
ARGUMENT	331:16	331:16	12	0
FIELD	331:16	331:16	13	0
LEAF_NODE	331:16	331:16	14	0
LEAF_NODE	331:17	331:17	12	,
ARGUMENT	331:19	331:19	12	module
FIELD	331:19	331:19	13	module
LEAF_NODE	331:19	331:19	14	module
LEAF_NODE	331:25	331:25	12	,
ARGUMENT	332:3	332:3	12	"Can't allocate space for filename conversion buffer"
FIELD	332:3	332:3	13	"Can't allocate space for filename conversion buffer"
LEAF_NODE	332:3	332:3	14	"Can't allocate space for filename conversion buffer"
LEAF_NODE	332:56	332:56	12	)
LEAF_NODE	332:57	332:57	10	;
JUMP_STATEMENT	333:3	333:20	9	return ( ( TIFF * ) 0 ) ;
KEYWORD	333:3	333:3	10	return
LEAF_NODE	333:3	333:3	11	return
DESTINATION	333:10	333:10	10	( ( TIFF * ) 0 )
EXPR	333:10	333:19	11	( ( TIFF * ) 0 )
LEAF_NODE	333:10	333:10	12	(
LEAF_NODE	333:11	333:11	12	(
TYPE_NAME	333:12	333:12	12	TIFF
LEAF_NODE	333:12	333:12	13	TIFF
LEAF_NODE	333:16	333:16	12	*
LEAF_NODE	333:17	333:17	12	)
FIELD	333:18	333:18	12	0
LEAF_NODE	333:18	333:18	13	0
LEAF_NODE	333:19	333:19	12	)
LEAF_NODE	333:20	333:20	10	;
LEAF_NODE	334:2	334:2	8	}
EXPR_STATEMENT	336:2	337:19	6	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , mbname , mbsize , NULL , NULL ) ;
EXPR	336:2	336:2	7	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , mbname , mbsize , NULL , NULL )
FUNCTION_CALL	336:2	337:18	8	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , mbname , mbsize , NULL , NULL )
CALLEE	336:2	336:2	9	WideCharToMultiByte
LEAF_NODE	336:2	336:2	10	WideCharToMultiByte
LEAF_NODE	336:21	336:21	9	(
ARGUMENT	336:22	336:22	9	CP_ACP
FIELD	336:22	336:22	10	CP_ACP
LEAF_NODE	336:22	336:22	11	CP_ACP
LEAF_NODE	336:28	336:28	9	,
ARGUMENT	336:30	336:30	9	0
FIELD	336:30	336:30	10	0
LEAF_NODE	336:30	336:30	11	0
LEAF_NODE	336:31	336:31	9	,
ARGUMENT	336:33	336:33	9	name
FIELD	336:33	336:33	10	name
LEAF_NODE	336:33	336:33	11	name
LEAF_NODE	336:37	336:37	9	,
ARGUMENT	336:39	336:39	9	- 1
UNARY_EXPR	336:39	336:40	10	- 1
UNARY_OPERATOR	336:39	336:39	11	-
LEAF_NODE	336:39	336:39	12	-
FIELD	336:40	336:40	11	1
LEAF_NODE	336:40	336:40	12	1
LEAF_NODE	336:41	336:41	9	,
ARGUMENT	336:43	336:43	9	mbname
FIELD	336:43	336:43	10	mbname
LEAF_NODE	336:43	336:43	11	mbname
LEAF_NODE	336:49	336:49	9	,
ARGUMENT	336:51	336:51	9	mbsize
FIELD	336:51	336:51	10	mbsize
LEAF_NODE	336:51	336:51	11	mbsize
LEAF_NODE	336:57	336:57	9	,
ARGUMENT	337:8	337:8	9	NULL
FIELD	337:8	337:8	10	NULL
LEAF_NODE	337:8	337:8	11	NULL
LEAF_NODE	337:12	337:12	9	,
ARGUMENT	337:14	337:14	9	NULL
FIELD	337:14	337:14	10	NULL
LEAF_NODE	337:14	337:14	11	NULL
LEAF_NODE	337:18	337:18	9	)
LEAF_NODE	337:19	337:19	7	;
LEAF_NODE	338:1	338:1	5	}
EXPR_STATEMENT	340:1	341:50	3	tif = TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode ) ;
EXPR	340:1	340:1	4	tif = TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
ASSIGN	340:1	340:7	5	tif = TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
LVAL	340:1	340:1	6	tif
FIELD	340:1	340:1	7	tif
LEAF_NODE	340:1	340:1	8	tif
ASSIGN_OP	340:5	340:5	6	=
LEAF_NODE	340:5	340:5	7	=
RVAL	340:7	340:7	6	TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
FUNCTION_CALL	340:7	341:49	7	TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
CALLEE	340:7	340:7	8	TIFFFdOpen
LEAF_NODE	340:7	340:7	9	TIFFFdOpen
LEAF_NODE	340:17	340:17	8	(
ARGUMENT	340:18	340:23	8	( int ) fd
LEAF_NODE	340:18	340:18	9	(
TYPE_NAME	340:19	340:19	9	int
LEAF_NODE	340:19	340:19	10	int
LEAF_NODE	340:22	340:22	9	)
FIELD	340:23	340:23	9	fd
LEAF_NODE	340:23	340:23	10	fd
LEAF_NODE	340:25	340:25	8	,
ARGUMENT	341:4	341:4	8	( mbname != NULL ) ? mbname : "<unknown>"
COND_EXPR	341:4	341:32	9	( mbname != NULL ) ? mbname : "<unknown>"
CONDITION	341:4	341:19	10	( mbname != NULL )
LEAF_NODE	341:4	341:4	11	(
FIELD	341:5	341:5	11	mbname
LEAF_NODE	341:5	341:5	12	mbname
EQ_OPERATOR	341:12	341:12	11	!=
LEAF_NODE	341:12	341:12	12	!=
FIELD	341:15	341:15	11	NULL
LEAF_NODE	341:15	341:15	12	NULL
LEAF_NODE	341:19	341:19	11	)
LEAF_NODE	341:21	341:21	10	?
EXPR	341:23	341:23	10	mbname
FIELD	341:23	341:23	11	mbname
LEAF_NODE	341:23	341:23	12	mbname
LEAF_NODE	341:30	341:30	10	:
FIELD	341:32	341:32	10	"<unknown>"
LEAF_NODE	341:32	341:32	11	"<unknown>"
LEAF_NODE	341:43	341:43	8	,
ARGUMENT	341:45	341:45	8	mode
FIELD	341:45	341:45	9	mode
LEAF_NODE	341:45	341:45	10	mode
LEAF_NODE	341:49	341:49	8	)
LEAF_NODE	341:50	341:50	4	;
SELECTION	342:1	343:2	3	
KEYWORD	342:1	342:1	4	if
LEAF_NODE	342:1	342:1	5	if
LEAF_NODE	342:3	342:3	4	(
CONDITION	342:4	342:4	4	! tif
EXPR	342:4	342:4	5	! tif
UNARY_EXPR	342:4	342:5	6	! tif
UNARY_OPERATOR	342:4	342:4	7	!
LEAF_NODE	342:4	342:4	8	!
FIELD	342:5	342:5	7	tif
LEAF_NODE	342:5	342:5	8	tif
LEAF_NODE	342:8	342:8	4	)
STATEMENTS	343:2	343:2	4	
EXPR_STATEMENT	343:2	343:17	5	CloseHandle ( fd ) ;
EXPR	343:2	343:2	6	CloseHandle ( fd )
FUNCTION_CALL	343:2	343:16	7	CloseHandle ( fd )
CALLEE	343:2	343:2	8	CloseHandle
LEAF_NODE	343:2	343:2	9	CloseHandle
LEAF_NODE	343:13	343:13	8	(
ARGUMENT	343:14	343:14	8	fd
FIELD	343:14	343:14	9	fd
LEAF_NODE	343:14	343:14	10	fd
LEAF_NODE	343:16	343:16	8	)
LEAF_NODE	343:17	343:17	6	;
EXPR_STATEMENT	345:1	345:18	3	_TIFFfree ( mbname ) ;
EXPR	345:1	345:1	4	_TIFFfree ( mbname )
FUNCTION_CALL	345:1	345:17	5	_TIFFfree ( mbname )
CALLEE	345:1	345:1	6	_TIFFfree
LEAF_NODE	345:1	345:1	7	_TIFFfree
LEAF_NODE	345:10	345:10	6	(
ARGUMENT	345:11	345:11	6	mbname
FIELD	345:11	345:11	7	mbname
LEAF_NODE	345:11	345:11	8	mbname
LEAF_NODE	345:17	345:17	6	)
LEAF_NODE	345:18	345:18	4	;
JUMP_STATEMENT	347:1	347:11	3	return tif ;
KEYWORD	347:1	347:1	4	return
LEAF_NODE	347:1	347:1	5	return
DESTINATION	347:8	347:8	4	tif
EXPR	347:8	347:8	5	tif
FIELD	347:8	347:8	6	tif
LEAF_NODE	347:8	347:8	7	tif
LEAF_NODE	347:11	347:11	4	;
LEAF_NODE	348:0	348:0	2	}
FUNCTION_DEF	352:0	359:0	1	
RETURN_TYPE	352:0	352:4	2	void *
TYPE_NAME	352:0	352:0	3	void
LEAF_NODE	352:0	352:0	4	void
LEAF_NODE	352:4	352:4	3	*
FUNCTION_NAME	353:0	353:0	2	_TIFFmalloc
LEAF_NODE	353:0	353:0	3	_TIFFmalloc
PARAMETER_LIST	353:11	353:22	2	( tmsize_t s )
LEAF_NODE	353:11	353:11	3	(
PARAMETER_DECL	353:12	353:21	3	tmsize_t s
TYPE	353:12	353:12	4	tmsize_t
TYPE_NAME	353:12	353:12	5	tmsize_t
LEAF_NODE	353:12	353:12	6	tmsize_t
NAME	353:21	353:21	4	s
LEAF_NODE	353:21	353:21	5	s
LEAF_NODE	353:22	353:22	3	)
LEAF_NODE	354:0	354:0	2	{
STATEMENTS	355:8	358:1	2	
SELECTION	355:8	356:16	3	
KEYWORD	355:8	355:8	4	if
LEAF_NODE	355:8	355:8	5	if
LEAF_NODE	355:11	355:11	4	(
CONDITION	355:12	355:12	4	s == 0
EXPR	355:12	355:17	5	s == 0
FIELD	355:12	355:12	6	s
LEAF_NODE	355:12	355:12	7	s
EQ_OPERATOR	355:14	355:14	6	==
LEAF_NODE	355:14	355:14	7	==
FIELD	355:17	355:17	6	0
LEAF_NODE	355:17	355:17	7	0
LEAF_NODE	355:18	355:18	4	)
STATEMENTS	356:16	356:16	4	
JUMP_STATEMENT	356:16	356:38	5	return ( ( void * ) NULL ) ;
KEYWORD	356:16	356:16	6	return
LEAF_NODE	356:16	356:16	7	return
DESTINATION	356:23	356:23	6	( ( void * ) NULL )
EXPR	356:23	356:37	7	( ( void * ) NULL )
LEAF_NODE	356:23	356:23	8	(
LEAF_NODE	356:24	356:24	8	(
TYPE_NAME	356:25	356:25	8	void
LEAF_NODE	356:25	356:25	9	void
LEAF_NODE	356:30	356:30	8	*
LEAF_NODE	356:31	356:31	8	)
FIELD	356:33	356:33	8	NULL
LEAF_NODE	356:33	356:33	9	NULL
LEAF_NODE	356:37	356:37	8	)
LEAF_NODE	356:38	356:38	6	;
JUMP_STATEMENT	358:1	358:28	3	return ( malloc ( ( size_t ) s ) ) ;
KEYWORD	358:1	358:1	4	return
LEAF_NODE	358:1	358:1	5	return
DESTINATION	358:8	358:8	4	( malloc ( ( size_t ) s ) )
EXPR	358:8	358:27	5	( malloc ( ( size_t ) s ) )
LEAF_NODE	358:8	358:8	6	(
FUNCTION_CALL	358:9	358:26	6	malloc ( ( size_t ) s )
CALLEE	358:9	358:9	7	malloc
LEAF_NODE	358:9	358:9	8	malloc
LEAF_NODE	358:15	358:15	7	(
ARGUMENT	358:16	358:25	7	( size_t ) s
LEAF_NODE	358:16	358:16	8	(
TYPE_NAME	358:17	358:17	8	size_t
LEAF_NODE	358:17	358:17	9	size_t
LEAF_NODE	358:23	358:23	8	)
FIELD	358:25	358:25	8	s
LEAF_NODE	358:25	358:25	9	s
LEAF_NODE	358:26	358:26	7	)
LEAF_NODE	358:27	358:27	6	)
LEAF_NODE	358:28	358:28	4	;
LEAF_NODE	359:0	359:0	2	}
FUNCTION_DEF	361:0	367:0	1	
RETURN_TYPE	361:0	361:4	2	void *
TYPE_NAME	361:0	361:0	3	void
LEAF_NODE	361:0	361:0	4	void
LEAF_NODE	361:4	361:4	3	*
FUNCTION_NAME	361:6	361:6	2	_TIFFcalloc
LEAF_NODE	361:6	361:6	3	_TIFFcalloc
PARAMETER_LIST	361:17	361:46	2	( tmsize_t nmemb , tmsize_t siz )
LEAF_NODE	361:17	361:17	3	(
PARAMETER_DECL	361:18	361:27	3	tmsize_t nmemb
TYPE	361:18	361:18	4	tmsize_t
TYPE_NAME	361:18	361:18	5	tmsize_t
LEAF_NODE	361:18	361:18	6	tmsize_t
NAME	361:27	361:27	4	nmemb
LEAF_NODE	361:27	361:27	5	nmemb
LEAF_NODE	361:32	361:32	3	,
PARAMETER_DECL	361:34	361:43	3	tmsize_t siz
TYPE	361:34	361:34	4	tmsize_t
TYPE_NAME	361:34	361:34	5	tmsize_t
LEAF_NODE	361:34	361:34	6	tmsize_t
NAME	361:43	361:43	4	siz
LEAF_NODE	361:43	361:43	5	siz
LEAF_NODE	361:46	361:46	3	)
LEAF_NODE	362:0	362:0	2	{
STATEMENTS	363:4	366:4	2	
SELECTION	363:4	364:8	3	
KEYWORD	363:4	363:4	4	if
LEAF_NODE	363:4	363:4	5	if
LEAF_NODE	363:6	363:6	4	(
CONDITION	363:8	363:8	4	nmemb == 0 || siz == 0
EXPR	363:8	363:8	5	nmemb == 0 || siz == 0
OR	363:8	363:22	6	nmemb == 0 || siz == 0
EXPR	363:8	363:17	7	nmemb == 0
FIELD	363:8	363:8	8	nmemb
LEAF_NODE	363:8	363:8	9	nmemb
EQ_OPERATOR	363:14	363:14	8	==
LEAF_NODE	363:14	363:14	9	==
FIELD	363:17	363:17	8	0
LEAF_NODE	363:17	363:17	9	0
LEAF_NODE	363:19	363:19	7	||
EXPR	363:22	363:29	7	siz == 0
FIELD	363:22	363:22	8	siz
LEAF_NODE	363:22	363:22	9	siz
EQ_OPERATOR	363:26	363:26	8	==
LEAF_NODE	363:26	363:26	9	==
FIELD	363:29	363:29	8	0
LEAF_NODE	363:29	363:29	9	0
LEAF_NODE	363:31	363:31	4	)
STATEMENTS	364:8	364:8	4	
JUMP_STATEMENT	364:8	364:30	5	return ( ( void * ) NULL ) ;
KEYWORD	364:8	364:8	6	return
LEAF_NODE	364:8	364:8	7	return
DESTINATION	364:15	364:15	6	( ( void * ) NULL )
EXPR	364:15	364:29	7	( ( void * ) NULL )
LEAF_NODE	364:15	364:15	8	(
LEAF_NODE	364:16	364:16	8	(
TYPE_NAME	364:17	364:17	8	void
LEAF_NODE	364:17	364:17	9	void
LEAF_NODE	364:22	364:22	8	*
LEAF_NODE	364:23	364:23	8	)
FIELD	364:25	364:25	8	NULL
LEAF_NODE	364:25	364:25	9	NULL
LEAF_NODE	364:29	364:29	8	)
LEAF_NODE	364:30	364:30	6	;
JUMP_STATEMENT	366:4	366:46	3	return calloc ( ( size_t ) nmemb , ( size_t ) siz ) ;
KEYWORD	366:4	366:4	4	return
LEAF_NODE	366:4	366:4	5	return
DESTINATION	366:11	366:11	4	calloc ( ( size_t ) nmemb , ( size_t ) siz )
EXPR	366:11	366:11	5	calloc ( ( size_t ) nmemb , ( size_t ) siz )
FUNCTION_CALL	366:11	366:45	6	calloc ( ( size_t ) nmemb , ( size_t ) siz )
CALLEE	366:11	366:11	7	calloc
LEAF_NODE	366:11	366:11	8	calloc
LEAF_NODE	366:17	366:17	7	(
ARGUMENT	366:18	366:27	7	( size_t ) nmemb
LEAF_NODE	366:18	366:18	8	(
TYPE_NAME	366:19	366:19	8	size_t
LEAF_NODE	366:19	366:19	9	size_t
LEAF_NODE	366:25	366:25	8	)
FIELD	366:27	366:27	8	nmemb
LEAF_NODE	366:27	366:27	9	nmemb
LEAF_NODE	366:32	366:32	7	,
ARGUMENT	366:34	366:42	7	( size_t ) siz
LEAF_NODE	366:34	366:34	8	(
TYPE_NAME	366:35	366:35	8	size_t
LEAF_NODE	366:35	366:35	9	size_t
LEAF_NODE	366:41	366:41	8	)
FIELD	366:42	366:42	8	siz
LEAF_NODE	366:42	366:42	9	siz
LEAF_NODE	366:45	366:45	7	)
LEAF_NODE	366:46	366:46	4	;
LEAF_NODE	367:0	367:0	2	}
FUNCTION_DEF	369:0	373:0	1	
RETURN_TYPE	369:0	369:0	2	void
TYPE_NAME	369:0	369:0	3	void
LEAF_NODE	369:0	369:0	4	void
FUNCTION_NAME	370:0	370:0	2	_TIFFfree
LEAF_NODE	370:0	370:0	3	_TIFFfree
PARAMETER_LIST	370:9	370:17	2	( void * p )
LEAF_NODE	370:9	370:9	3	(
PARAMETER_DECL	370:10	370:16	3	void * p
TYPE	370:10	370:14	4	void *
TYPE_NAME	370:10	370:10	5	void
LEAF_NODE	370:10	370:10	6	void
POINTER	370:14	370:14	5	*
LEAF_NODE	370:14	370:14	6	*
NAME	370:16	370:16	4	p
LEAF_NODE	370:16	370:16	5	p
LEAF_NODE	370:17	370:17	3	)
LEAF_NODE	371:0	371:0	2	{
STATEMENTS	372:1	372:1	2	
EXPR_STATEMENT	372:1	372:8	3	free ( p ) ;
EXPR	372:1	372:1	4	free ( p )
FUNCTION_CALL	372:1	372:7	5	free ( p )
CALLEE	372:1	372:1	6	free
LEAF_NODE	372:1	372:1	7	free
LEAF_NODE	372:5	372:5	6	(
ARGUMENT	372:6	372:6	6	p
FIELD	372:6	372:6	7	p
LEAF_NODE	372:6	372:6	8	p
LEAF_NODE	372:7	372:7	6	)
LEAF_NODE	372:8	372:8	4	;
LEAF_NODE	373:0	373:0	2	}
FUNCTION_DEF	375:0	379:0	1	
RETURN_TYPE	375:0	375:4	2	void *
TYPE_NAME	375:0	375:0	3	void
LEAF_NODE	375:0	375:0	4	void
LEAF_NODE	375:4	375:4	3	*
FUNCTION_NAME	376:0	376:0	2	_TIFFrealloc
LEAF_NODE	376:0	376:0	3	_TIFFrealloc
PARAMETER_LIST	376:12	376:32	2	( void * p , tmsize_t s )
LEAF_NODE	376:12	376:12	3	(
PARAMETER_DECL	376:13	376:19	3	void * p
TYPE	376:13	376:17	4	void *
TYPE_NAME	376:13	376:13	5	void
LEAF_NODE	376:13	376:13	6	void
POINTER	376:17	376:17	5	*
LEAF_NODE	376:17	376:17	6	*
NAME	376:19	376:19	4	p
LEAF_NODE	376:19	376:19	5	p
LEAF_NODE	376:20	376:20	3	,
PARAMETER_DECL	376:22	376:31	3	tmsize_t s
TYPE	376:22	376:22	4	tmsize_t
TYPE_NAME	376:22	376:22	5	tmsize_t
LEAF_NODE	376:22	376:22	6	tmsize_t
NAME	376:31	376:31	4	s
LEAF_NODE	376:31	376:31	5	s
LEAF_NODE	376:32	376:32	3	)
LEAF_NODE	377:0	377:0	2	{
STATEMENTS	378:1	378:1	2	
JUMP_STATEMENT	378:1	378:32	3	return ( realloc ( p , ( size_t ) s ) ) ;
KEYWORD	378:1	378:1	4	return
LEAF_NODE	378:1	378:1	5	return
DESTINATION	378:8	378:8	4	( realloc ( p , ( size_t ) s ) )
EXPR	378:8	378:31	5	( realloc ( p , ( size_t ) s ) )
LEAF_NODE	378:8	378:8	6	(
FUNCTION_CALL	378:9	378:30	6	realloc ( p , ( size_t ) s )
CALLEE	378:9	378:9	7	realloc
LEAF_NODE	378:9	378:9	8	realloc
LEAF_NODE	378:16	378:16	7	(
ARGUMENT	378:17	378:17	7	p
FIELD	378:17	378:17	8	p
LEAF_NODE	378:17	378:17	9	p
LEAF_NODE	378:18	378:18	7	,
ARGUMENT	378:20	378:29	7	( size_t ) s
LEAF_NODE	378:20	378:20	8	(
TYPE_NAME	378:21	378:21	8	size_t
LEAF_NODE	378:21	378:21	9	size_t
LEAF_NODE	378:27	378:27	8	)
FIELD	378:29	378:29	8	s
LEAF_NODE	378:29	378:29	9	s
LEAF_NODE	378:30	378:30	7	)
LEAF_NODE	378:31	378:31	6	)
LEAF_NODE	378:32	378:32	4	;
LEAF_NODE	379:0	379:0	2	}
FUNCTION_DEF	381:0	385:0	1	
RETURN_TYPE	381:0	381:0	2	void
TYPE_NAME	381:0	381:0	3	void
LEAF_NODE	381:0	381:0	4	void
FUNCTION_NAME	382:0	382:0	2	_TIFFmemset
LEAF_NODE	382:0	382:0	3	_TIFFmemset
PARAMETER_LIST	382:11	382:38	2	( void * p , int v , tmsize_t c )
LEAF_NODE	382:11	382:11	3	(
PARAMETER_DECL	382:12	382:18	3	void * p
TYPE	382:12	382:16	4	void *
TYPE_NAME	382:12	382:12	5	void
LEAF_NODE	382:12	382:12	6	void
POINTER	382:16	382:16	5	*
LEAF_NODE	382:16	382:16	6	*
NAME	382:18	382:18	4	p
LEAF_NODE	382:18	382:18	5	p
LEAF_NODE	382:19	382:19	3	,
PARAMETER_DECL	382:21	382:25	3	int v
TYPE	382:21	382:21	4	int
TYPE_NAME	382:21	382:21	5	int
LEAF_NODE	382:21	382:21	6	int
NAME	382:25	382:25	4	v
LEAF_NODE	382:25	382:25	5	v
LEAF_NODE	382:26	382:26	3	,
PARAMETER_DECL	382:28	382:37	3	tmsize_t c
TYPE	382:28	382:28	4	tmsize_t
TYPE_NAME	382:28	382:28	5	tmsize_t
LEAF_NODE	382:28	382:28	6	tmsize_t
NAME	382:37	382:37	4	c
LEAF_NODE	382:37	382:37	5	c
LEAF_NODE	382:38	382:38	3	)
LEAF_NODE	383:0	383:0	2	{
STATEMENTS	384:1	384:1	2	
EXPR_STATEMENT	384:1	384:25	3	memset ( p , v , ( size_t ) c ) ;
EXPR	384:1	384:1	4	memset ( p , v , ( size_t ) c )
FUNCTION_CALL	384:1	384:24	5	memset ( p , v , ( size_t ) c )
CALLEE	384:1	384:1	6	memset
LEAF_NODE	384:1	384:1	7	memset
LEAF_NODE	384:7	384:7	6	(
ARGUMENT	384:8	384:8	6	p
FIELD	384:8	384:8	7	p
LEAF_NODE	384:8	384:8	8	p
LEAF_NODE	384:9	384:9	6	,
ARGUMENT	384:11	384:11	6	v
FIELD	384:11	384:11	7	v
LEAF_NODE	384:11	384:11	8	v
LEAF_NODE	384:12	384:12	6	,
ARGUMENT	384:14	384:23	6	( size_t ) c
LEAF_NODE	384:14	384:14	7	(
TYPE_NAME	384:15	384:15	7	size_t
LEAF_NODE	384:15	384:15	8	size_t
LEAF_NODE	384:21	384:21	7	)
FIELD	384:23	384:23	7	c
LEAF_NODE	384:23	384:23	8	c
LEAF_NODE	384:24	384:24	6	)
LEAF_NODE	384:25	384:25	4	;
LEAF_NODE	385:0	385:0	2	}
FUNCTION_DEF	387:0	391:0	1	
RETURN_TYPE	387:0	387:0	2	void
TYPE_NAME	387:0	387:0	3	void
LEAF_NODE	387:0	387:0	4	void
FUNCTION_NAME	388:0	388:0	2	_TIFFmemcpy
LEAF_NODE	388:0	388:0	3	_TIFFmemcpy
PARAMETER_LIST	388:11	388:46	2	( void * d , const void * s , tmsize_t c )
LEAF_NODE	388:11	388:11	3	(
PARAMETER_DECL	388:12	388:18	3	void * d
TYPE	388:12	388:16	4	void *
TYPE_NAME	388:12	388:12	5	void
LEAF_NODE	388:12	388:12	6	void
POINTER	388:16	388:16	5	*
LEAF_NODE	388:16	388:16	6	*
NAME	388:18	388:18	4	d
LEAF_NODE	388:18	388:18	5	d
LEAF_NODE	388:19	388:19	3	,
PARAMETER_DECL	388:21	388:33	3	const void * s
TYPE	388:21	388:31	4	const void *
TYPE_NAME	388:21	388:27	5	const void
LEAF_NODE	388:21	388:21	6	const
LEAF_NODE	388:27	388:27	6	void
POINTER	388:31	388:31	5	*
LEAF_NODE	388:31	388:31	6	*
NAME	388:33	388:33	4	s
LEAF_NODE	388:33	388:33	5	s
LEAF_NODE	388:34	388:34	3	,
PARAMETER_DECL	388:36	388:45	3	tmsize_t c
TYPE	388:36	388:36	4	tmsize_t
TYPE_NAME	388:36	388:36	5	tmsize_t
LEAF_NODE	388:36	388:36	6	tmsize_t
NAME	388:45	388:45	4	c
LEAF_NODE	388:45	388:45	5	c
LEAF_NODE	388:46	388:46	3	)
LEAF_NODE	389:0	389:0	2	{
STATEMENTS	390:1	390:1	2	
EXPR_STATEMENT	390:1	390:25	3	memcpy ( d , s , ( size_t ) c ) ;
EXPR	390:1	390:1	4	memcpy ( d , s , ( size_t ) c )
FUNCTION_CALL	390:1	390:24	5	memcpy ( d , s , ( size_t ) c )
CALLEE	390:1	390:1	6	memcpy
LEAF_NODE	390:1	390:1	7	memcpy
LEAF_NODE	390:7	390:7	6	(
ARGUMENT	390:8	390:8	6	d
FIELD	390:8	390:8	7	d
LEAF_NODE	390:8	390:8	8	d
LEAF_NODE	390:9	390:9	6	,
ARGUMENT	390:11	390:11	6	s
FIELD	390:11	390:11	7	s
LEAF_NODE	390:11	390:11	8	s
LEAF_NODE	390:12	390:12	6	,
ARGUMENT	390:14	390:23	6	( size_t ) c
LEAF_NODE	390:14	390:14	7	(
TYPE_NAME	390:15	390:15	7	size_t
LEAF_NODE	390:15	390:15	8	size_t
LEAF_NODE	390:21	390:21	7	)
FIELD	390:23	390:23	7	c
LEAF_NODE	390:23	390:23	8	c
LEAF_NODE	390:24	390:24	6	)
LEAF_NODE	390:25	390:25	4	;
LEAF_NODE	391:0	391:0	2	}
FUNCTION_DEF	393:0	397:0	1	
RETURN_TYPE	393:0	393:0	2	int
TYPE_NAME	393:0	393:0	3	int
LEAF_NODE	393:0	393:0	4	int
FUNCTION_NAME	394:0	394:0	2	_TIFFmemcmp
LEAF_NODE	394:0	394:0	3	_TIFFmemcmp
PARAMETER_LIST	394:11	394:54	2	( const void * p1 , const void * p2 , tmsize_t c )
LEAF_NODE	394:11	394:11	3	(
PARAMETER_DECL	394:12	394:24	3	const void * p1
TYPE	394:12	394:22	4	const void *
TYPE_NAME	394:12	394:18	5	const void
LEAF_NODE	394:12	394:12	6	const
LEAF_NODE	394:18	394:18	6	void
POINTER	394:22	394:22	5	*
LEAF_NODE	394:22	394:22	6	*
NAME	394:24	394:24	4	p1
LEAF_NODE	394:24	394:24	5	p1
LEAF_NODE	394:26	394:26	3	,
PARAMETER_DECL	394:28	394:40	3	const void * p2
TYPE	394:28	394:38	4	const void *
TYPE_NAME	394:28	394:34	5	const void
LEAF_NODE	394:28	394:28	6	const
LEAF_NODE	394:34	394:34	6	void
POINTER	394:38	394:38	5	*
LEAF_NODE	394:38	394:38	6	*
NAME	394:40	394:40	4	p2
LEAF_NODE	394:40	394:40	5	p2
LEAF_NODE	394:42	394:42	3	,
PARAMETER_DECL	394:44	394:53	3	tmsize_t c
TYPE	394:44	394:44	4	tmsize_t
TYPE_NAME	394:44	394:44	5	tmsize_t
LEAF_NODE	394:44	394:44	6	tmsize_t
NAME	394:53	394:53	4	c
LEAF_NODE	394:53	394:53	5	c
LEAF_NODE	394:54	394:54	3	)
LEAF_NODE	395:0	395:0	2	{
STATEMENTS	396:1	396:1	2	
JUMP_STATEMENT	396:1	396:36	3	return ( memcmp ( p1 , p2 , ( size_t ) c ) ) ;
KEYWORD	396:1	396:1	4	return
LEAF_NODE	396:1	396:1	5	return
DESTINATION	396:8	396:8	4	( memcmp ( p1 , p2 , ( size_t ) c ) )
EXPR	396:8	396:35	5	( memcmp ( p1 , p2 , ( size_t ) c ) )
LEAF_NODE	396:8	396:8	6	(
FUNCTION_CALL	396:9	396:34	6	memcmp ( p1 , p2 , ( size_t ) c )
CALLEE	396:9	396:9	7	memcmp
LEAF_NODE	396:9	396:9	8	memcmp
LEAF_NODE	396:15	396:15	7	(
ARGUMENT	396:16	396:16	7	p1
FIELD	396:16	396:16	8	p1
LEAF_NODE	396:16	396:16	9	p1
LEAF_NODE	396:18	396:18	7	,
ARGUMENT	396:20	396:20	7	p2
FIELD	396:20	396:20	8	p2
LEAF_NODE	396:20	396:20	9	p2
LEAF_NODE	396:22	396:22	7	,
ARGUMENT	396:24	396:33	7	( size_t ) c
LEAF_NODE	396:24	396:24	8	(
TYPE_NAME	396:25	396:25	8	size_t
LEAF_NODE	396:25	396:25	9	size_t
LEAF_NODE	396:31	396:31	8	)
FIELD	396:33	396:33	8	c
LEAF_NODE	396:33	396:33	9	c
LEAF_NODE	396:34	396:34	7	)
LEAF_NODE	396:35	396:35	6	)
LEAF_NODE	396:36	396:36	4	;
LEAF_NODE	397:0	397:0	2	}
FUNCTION_DEF	405:0	413:0	1	
RETURN_TYPE	405:0	405:7	2	static void
LEAF_NODE	405:0	405:0	3	static
TYPE_NAME	405:7	405:7	3	void
LEAF_NODE	405:7	405:7	4	void
FUNCTION_NAME	406:0	406:0	2	Win32WarningHandler
LEAF_NODE	406:0	406:0	3	Win32WarningHandler
PARAMETER_LIST	406:19	406:67	2	( const char * module , const char * fmt , va_list ap )
LEAF_NODE	406:19	406:19	3	(
PARAMETER_DECL	406:20	406:32	3	const char * module
TYPE	406:20	406:30	4	const char *
TYPE_NAME	406:20	406:26	5	const char
LEAF_NODE	406:20	406:20	6	const
LEAF_NODE	406:26	406:26	6	char
POINTER	406:30	406:30	5	*
LEAF_NODE	406:30	406:30	6	*
NAME	406:32	406:32	4	module
LEAF_NODE	406:32	406:32	5	module
LEAF_NODE	406:38	406:38	3	,
PARAMETER_DECL	406:40	406:52	3	const char * fmt
TYPE	406:40	406:50	4	const char *
TYPE_NAME	406:40	406:46	5	const char
LEAF_NODE	406:40	406:40	6	const
LEAF_NODE	406:46	406:46	6	char
POINTER	406:50	406:50	5	*
LEAF_NODE	406:50	406:50	6	*
NAME	406:52	406:52	4	fmt
LEAF_NODE	406:52	406:52	5	fmt
LEAF_NODE	406:55	406:55	3	,
PARAMETER_DECL	406:57	406:65	3	va_list ap
TYPE	406:57	406:57	4	va_list
TYPE_NAME	406:57	406:57	5	va_list
LEAF_NODE	406:57	406:57	6	va_list
NAME	406:65	406:65	4	ap
LEAF_NODE	406:65	406:65	5	ap
LEAF_NODE	406:67	406:67	3	)
LEAF_NODE	407:0	407:0	2	{
STATEMENTS	408:1	412:1	2	
SELECTION	408:1	409:2	3	
KEYWORD	408:1	408:1	4	if
LEAF_NODE	408:1	408:1	5	if
LEAF_NODE	408:4	408:4	4	(
CONDITION	408:5	408:5	4	module != NULL
EXPR	408:5	408:15	5	module != NULL
FIELD	408:5	408:5	6	module
LEAF_NODE	408:5	408:5	7	module
EQ_OPERATOR	408:12	408:12	6	!=
LEAF_NODE	408:12	408:12	7	!=
FIELD	408:15	408:15	6	NULL
LEAF_NODE	408:15	408:15	7	NULL
LEAF_NODE	408:19	408:19	4	)
STATEMENTS	409:2	409:2	4	
EXPR_STATEMENT	409:2	409:33	5	fprintf ( stderr , "%s: " , module ) ;
EXPR	409:2	409:2	6	fprintf ( stderr , "%s: " , module )
FUNCTION_CALL	409:2	409:32	7	fprintf ( stderr , "%s: " , module )
CALLEE	409:2	409:2	8	fprintf
LEAF_NODE	409:2	409:2	9	fprintf
LEAF_NODE	409:9	409:9	8	(
ARGUMENT	409:10	409:10	8	stderr
FIELD	409:10	409:10	9	stderr
LEAF_NODE	409:10	409:10	10	stderr
LEAF_NODE	409:16	409:16	8	,
ARGUMENT	409:18	409:18	8	"%s: "
FIELD	409:18	409:18	9	"%s: "
LEAF_NODE	409:18	409:18	10	"%s: "
LEAF_NODE	409:24	409:24	8	,
ARGUMENT	409:26	409:26	8	module
FIELD	409:26	409:26	9	module
LEAF_NODE	409:26	409:26	10	module
LEAF_NODE	409:32	409:32	8	)
LEAF_NODE	409:33	409:33	6	;
EXPR_STATEMENT	410:1	410:29	3	fprintf ( stderr , "Warning, " ) ;
EXPR	410:1	410:1	4	fprintf ( stderr , "Warning, " )
FUNCTION_CALL	410:1	410:28	5	fprintf ( stderr , "Warning, " )
CALLEE	410:1	410:1	6	fprintf
LEAF_NODE	410:1	410:1	7	fprintf
LEAF_NODE	410:8	410:8	6	(
ARGUMENT	410:9	410:9	6	stderr
FIELD	410:9	410:9	7	stderr
LEAF_NODE	410:9	410:9	8	stderr
LEAF_NODE	410:15	410:15	6	,
ARGUMENT	410:17	410:17	6	"Warning, "
FIELD	410:17	410:17	7	"Warning, "
LEAF_NODE	410:17	410:17	8	"Warning, "
LEAF_NODE	410:28	410:28	6	)
LEAF_NODE	410:29	410:29	4	;
EXPR_STATEMENT	411:1	411:26	3	vfprintf ( stderr , fmt , ap ) ;
EXPR	411:1	411:1	4	vfprintf ( stderr , fmt , ap )
FUNCTION_CALL	411:1	411:25	5	vfprintf ( stderr , fmt , ap )
CALLEE	411:1	411:1	6	vfprintf
LEAF_NODE	411:1	411:1	7	vfprintf
LEAF_NODE	411:9	411:9	6	(
ARGUMENT	411:10	411:10	6	stderr
FIELD	411:10	411:10	7	stderr
LEAF_NODE	411:10	411:10	8	stderr
LEAF_NODE	411:16	411:16	6	,
ARGUMENT	411:18	411:18	6	fmt
FIELD	411:18	411:18	7	fmt
LEAF_NODE	411:18	411:18	8	fmt
LEAF_NODE	411:21	411:21	6	,
ARGUMENT	411:23	411:23	6	ap
FIELD	411:23	411:23	7	ap
LEAF_NODE	411:23	411:23	8	ap
LEAF_NODE	411:25	411:25	6	)
LEAF_NODE	411:26	411:26	4	;
EXPR_STATEMENT	412:1	412:23	3	fprintf ( stderr , ".\n" ) ;
EXPR	412:1	412:1	4	fprintf ( stderr , ".\n" )
FUNCTION_CALL	412:1	412:22	5	fprintf ( stderr , ".\n" )
CALLEE	412:1	412:1	6	fprintf
LEAF_NODE	412:1	412:1	7	fprintf
LEAF_NODE	412:8	412:8	6	(
ARGUMENT	412:9	412:9	6	stderr
FIELD	412:9	412:9	7	stderr
LEAF_NODE	412:9	412:9	8	stderr
LEAF_NODE	412:15	412:15	6	,
ARGUMENT	412:17	412:17	6	".\n"
FIELD	412:17	412:17	7	".\n"
LEAF_NODE	412:17	412:17	8	".\n"
LEAF_NODE	412:22	412:22	6	)
LEAF_NODE	412:23	412:23	4	;
LEAF_NODE	413:0	413:0	2	}
SIMPLE_DECL	414:0	414:58	1	TIFFErrorHandler _TIFFwarningHandler ; _TIFFwarningHandler = Win32WarningHandler ;
VAR_DECL	414:0	414:17	2	TIFFErrorHandler _TIFFwarningHandler ; _TIFFwarningHandler = Win32WarningHandler
TYPE	414:0	414:0	3	TIFFErrorHandler
TYPE_NAME	414:0	414:0	4	TIFFErrorHandler
LEAF_NODE	414:0	414:0	5	TIFFErrorHandler
NAME	414:17	414:17	3	_TIFFwarningHandler
LEAF_NODE	414:17	414:17	4	_TIFFwarningHandler
LEAF_NODE	0:0	0:0	3	;
INIT	414:17	414:17	3	_TIFFwarningHandler = Win32WarningHandler
ASSIGN	414:17	414:39	4	_TIFFwarningHandler = Win32WarningHandler
LVAL	414:17	414:17	5	_TIFFwarningHandler
NAME	414:17	414:17	6	_TIFFwarningHandler
LEAF_NODE	414:17	414:17	7	_TIFFwarningHandler
ASSIGN_OP	414:37	414:37	5	=
LEAF_NODE	414:37	414:37	6	=
RVAL	414:39	414:39	5	Win32WarningHandler
FIELD	414:39	414:39	6	Win32WarningHandler
LEAF_NODE	414:39	414:39	7	Win32WarningHandler
LEAF_NODE	414:58	414:58	2	;
FUNCTION_DEF	416:0	423:0	1	
RETURN_TYPE	416:0	416:7	2	static void
LEAF_NODE	416:0	416:0	3	static
TYPE_NAME	416:7	416:7	3	void
LEAF_NODE	416:7	416:7	4	void
FUNCTION_NAME	417:0	417:0	2	Win32ErrorHandler
LEAF_NODE	417:0	417:0	3	Win32ErrorHandler
PARAMETER_LIST	417:17	417:65	2	( const char * module , const char * fmt , va_list ap )
LEAF_NODE	417:17	417:17	3	(
PARAMETER_DECL	417:18	417:30	3	const char * module
TYPE	417:18	417:28	4	const char *
TYPE_NAME	417:18	417:24	5	const char
LEAF_NODE	417:18	417:18	6	const
LEAF_NODE	417:24	417:24	6	char
POINTER	417:28	417:28	5	*
LEAF_NODE	417:28	417:28	6	*
NAME	417:30	417:30	4	module
LEAF_NODE	417:30	417:30	5	module
LEAF_NODE	417:36	417:36	3	,
PARAMETER_DECL	417:38	417:50	3	const char * fmt
TYPE	417:38	417:48	4	const char *
TYPE_NAME	417:38	417:44	5	const char
LEAF_NODE	417:38	417:38	6	const
LEAF_NODE	417:44	417:44	6	char
POINTER	417:48	417:48	5	*
LEAF_NODE	417:48	417:48	6	*
NAME	417:50	417:50	4	fmt
LEAF_NODE	417:50	417:50	5	fmt
LEAF_NODE	417:53	417:53	3	,
PARAMETER_DECL	417:55	417:63	3	va_list ap
TYPE	417:55	417:55	4	va_list
TYPE_NAME	417:55	417:55	5	va_list
LEAF_NODE	417:55	417:55	6	va_list
NAME	417:63	417:63	4	ap
LEAF_NODE	417:63	417:63	5	ap
LEAF_NODE	417:65	417:65	3	)
LEAF_NODE	418:0	418:0	2	{
STATEMENTS	419:1	422:1	2	
SELECTION	419:1	420:2	3	
KEYWORD	419:1	419:1	4	if
LEAF_NODE	419:1	419:1	5	if
LEAF_NODE	419:4	419:4	4	(
CONDITION	419:5	419:5	4	module != NULL
EXPR	419:5	419:15	5	module != NULL
FIELD	419:5	419:5	6	module
LEAF_NODE	419:5	419:5	7	module
EQ_OPERATOR	419:12	419:12	6	!=
LEAF_NODE	419:12	419:12	7	!=
FIELD	419:15	419:15	6	NULL
LEAF_NODE	419:15	419:15	7	NULL
LEAF_NODE	419:19	419:19	4	)
STATEMENTS	420:2	420:2	4	
EXPR_STATEMENT	420:2	420:33	5	fprintf ( stderr , "%s: " , module ) ;
EXPR	420:2	420:2	6	fprintf ( stderr , "%s: " , module )
FUNCTION_CALL	420:2	420:32	7	fprintf ( stderr , "%s: " , module )
CALLEE	420:2	420:2	8	fprintf
LEAF_NODE	420:2	420:2	9	fprintf
LEAF_NODE	420:9	420:9	8	(
ARGUMENT	420:10	420:10	8	stderr
FIELD	420:10	420:10	9	stderr
LEAF_NODE	420:10	420:10	10	stderr
LEAF_NODE	420:16	420:16	8	,
ARGUMENT	420:18	420:18	8	"%s: "
FIELD	420:18	420:18	9	"%s: "
LEAF_NODE	420:18	420:18	10	"%s: "
LEAF_NODE	420:24	420:24	8	,
ARGUMENT	420:26	420:26	8	module
FIELD	420:26	420:26	9	module
LEAF_NODE	420:26	420:26	10	module
LEAF_NODE	420:32	420:32	8	)
LEAF_NODE	420:33	420:33	6	;
EXPR_STATEMENT	421:1	421:26	3	vfprintf ( stderr , fmt , ap ) ;
EXPR	421:1	421:1	4	vfprintf ( stderr , fmt , ap )
FUNCTION_CALL	421:1	421:25	5	vfprintf ( stderr , fmt , ap )
CALLEE	421:1	421:1	6	vfprintf
LEAF_NODE	421:1	421:1	7	vfprintf
LEAF_NODE	421:9	421:9	6	(
ARGUMENT	421:10	421:10	6	stderr
FIELD	421:10	421:10	7	stderr
LEAF_NODE	421:10	421:10	8	stderr
LEAF_NODE	421:16	421:16	6	,
ARGUMENT	421:18	421:18	6	fmt
FIELD	421:18	421:18	7	fmt
LEAF_NODE	421:18	421:18	8	fmt
LEAF_NODE	421:21	421:21	6	,
ARGUMENT	421:23	421:23	6	ap
FIELD	421:23	421:23	7	ap
LEAF_NODE	421:23	421:23	8	ap
LEAF_NODE	421:25	421:25	6	)
LEAF_NODE	421:26	421:26	4	;
EXPR_STATEMENT	422:1	422:23	3	fprintf ( stderr , ".\n" ) ;
EXPR	422:1	422:1	4	fprintf ( stderr , ".\n" )
FUNCTION_CALL	422:1	422:22	5	fprintf ( stderr , ".\n" )
CALLEE	422:1	422:1	6	fprintf
LEAF_NODE	422:1	422:1	7	fprintf
LEAF_NODE	422:8	422:8	6	(
ARGUMENT	422:9	422:9	6	stderr
FIELD	422:9	422:9	7	stderr
LEAF_NODE	422:9	422:9	8	stderr
LEAF_NODE	422:15	422:15	6	,
ARGUMENT	422:17	422:17	6	".\n"
FIELD	422:17	422:17	7	".\n"
LEAF_NODE	422:17	422:17	8	".\n"
LEAF_NODE	422:22	422:22	6	)
LEAF_NODE	422:23	422:23	4	;
LEAF_NODE	423:0	423:0	2	}
SIMPLE_DECL	424:0	424:54	1	TIFFErrorHandler _TIFFerrorHandler ; _TIFFerrorHandler = Win32ErrorHandler ;
VAR_DECL	424:0	424:17	2	TIFFErrorHandler _TIFFerrorHandler ; _TIFFerrorHandler = Win32ErrorHandler
TYPE	424:0	424:0	3	TIFFErrorHandler
TYPE_NAME	424:0	424:0	4	TIFFErrorHandler
LEAF_NODE	424:0	424:0	5	TIFFErrorHandler
NAME	424:17	424:17	3	_TIFFerrorHandler
LEAF_NODE	424:17	424:17	4	_TIFFerrorHandler
LEAF_NODE	0:0	0:0	3	;
INIT	424:17	424:17	3	_TIFFerrorHandler = Win32ErrorHandler
ASSIGN	424:17	424:37	4	_TIFFerrorHandler = Win32ErrorHandler
LVAL	424:17	424:17	5	_TIFFerrorHandler
NAME	424:17	424:17	6	_TIFFerrorHandler
LEAF_NODE	424:17	424:17	7	_TIFFerrorHandler
ASSIGN_OP	424:35	424:35	5	=
LEAF_NODE	424:35	424:35	6	=
RVAL	424:37	424:37	5	Win32ErrorHandler
FIELD	424:37	424:37	6	Win32ErrorHandler
LEAF_NODE	424:37	424:37	7	Win32ErrorHandler
LEAF_NODE	424:54	424:54	2	;
