SOURCE_FILE	55:8	455:0	0	
SIMPLE_DECL	55:8	55:37	1	uint32 width ; width = 0 , uint32 height ; height = 0 ;
INIT_DECL_LIST	55:8	55:8	2	uint32 width ; width = 0 , uint32 height ; height = 0
VAR_DECL	55:8	55:16	3	uint32 width ; width = 0
TYPE	55:8	55:8	4	uint32
TYPE_NAME	55:8	55:8	5	uint32
LEAF_NODE	55:8	55:8	6	uint32
NAME	55:16	55:16	4	width
LEAF_NODE	55:16	55:16	5	width
LEAF_NODE	0:0	0:0	4	;
INIT	55:16	55:16	4	width = 0
ASSIGN	55:16	55:24	5	width = 0
LVAL	55:16	55:16	6	width
NAME	55:16	55:16	7	width
LEAF_NODE	55:16	55:16	8	width
ASSIGN_OP	55:22	55:22	6	=
LEAF_NODE	55:22	55:22	7	=
RVAL	55:24	55:24	6	0
FIELD	55:24	55:24	7	0
LEAF_NODE	55:24	55:24	8	0
LEAF_NODE	55:25	55:25	3	,
VAR_DECL	55:8	55:27	3	uint32 height ; height = 0
TYPE	55:8	55:8	4	uint32
TYPE_NAME	55:8	55:8	5	uint32
LEAF_NODE	55:8	55:8	6	uint32
NAME	55:27	55:27	4	height
LEAF_NODE	55:27	55:27	5	height
LEAF_NODE	0:0	0:0	4	;
INIT	55:27	55:27	4	height = 0
ASSIGN	55:27	55:36	5	height = 0
LVAL	55:27	55:27	6	height
NAME	55:27	55:27	7	height
LEAF_NODE	55:27	55:27	8	height
ASSIGN_OP	55:34	55:34	6	=
LEAF_NODE	55:34	55:34	7	=
RVAL	55:36	55:36	6	0
FIELD	55:36	55:36	7	0
LEAF_NODE	55:36	55:36	8	0
LEAF_NODE	55:37	55:37	2	;
SIMPLE_DECL	56:8	56:29	1	uint32 * raster ; raster = NULL ;
VAR_DECL	56:8	56:16	2	uint32 * raster ; raster = NULL
TYPE	56:8	56:14	3	uint32 *
TYPE_NAME	56:8	56:8	4	uint32
LEAF_NODE	56:8	56:8	5	uint32
POINTER	56:14	56:14	4	*
LEAF_NODE	56:14	56:14	5	*
NAME	56:16	56:16	3	raster
LEAF_NODE	56:16	56:16	4	raster
LEAF_NODE	0:0	0:0	3	;
INIT	56:16	56:16	3	raster = NULL
ASSIGN	56:16	56:25	4	raster = NULL
LVAL	56:16	56:16	5	raster
NAME	56:16	56:16	6	raster
LEAF_NODE	56:16	56:16	7	raster
ASSIGN_OP	56:23	56:23	5	=
LEAF_NODE	56:23	56:23	6	=
RVAL	56:25	56:25	5	NULL
FIELD	56:25	56:25	6	NULL
LEAF_NODE	56:25	56:25	7	NULL
LEAF_NODE	56:29	56:29	2	;
SIMPLE_DECL	57:7	57:24	1	TIFFRGBAImage img ;
VAR_DECL	57:7	57:21	2	TIFFRGBAImage img
TYPE	57:7	57:7	3	TIFFRGBAImage
TYPE_NAME	57:7	57:7	4	TIFFRGBAImage
LEAF_NODE	57:7	57:7	5	TIFFRGBAImage
NAME	57:21	57:21	3	img
LEAF_NODE	57:21	57:21	4	img
LEAF_NODE	57:24	57:24	2	;
SIMPLE_DECL	58:7	58:33	1	int order0 ; order0 = 0 , int order ;
INIT_DECL_LIST	58:7	58:7	2	int order0 ; order0 = 0 , int order
VAR_DECL	58:7	58:16	3	int order0 ; order0 = 0
TYPE	58:7	58:7	4	int
TYPE_NAME	58:7	58:7	5	int
LEAF_NODE	58:7	58:7	6	int
NAME	58:16	58:16	4	order0
LEAF_NODE	58:16	58:16	5	order0
LEAF_NODE	0:0	0:0	4	;
INIT	58:16	58:16	4	order0 = 0
ASSIGN	58:16	58:25	5	order0 = 0
LVAL	58:16	58:16	6	order0
NAME	58:16	58:16	7	order0
LEAF_NODE	58:16	58:16	8	order0
ASSIGN_OP	58:23	58:23	6	=
LEAF_NODE	58:23	58:23	7	=
RVAL	58:25	58:25	6	0
FIELD	58:25	58:25	7	0
LEAF_NODE	58:25	58:25	8	0
LEAF_NODE	58:26	58:26	3	,
VAR_DECL	58:7	58:28	3	int order
TYPE	58:7	58:7	4	int
TYPE_NAME	58:7	58:7	5	int
LEAF_NODE	58:7	58:7	6	int
NAME	58:28	58:28	4	order
LEAF_NODE	58:28	58:28	5	order
LEAF_NODE	58:33	58:33	2	;
SIMPLE_DECL	59:7	59:43	1	uint16 photo0 ; photo0 = ( uint16 ) - 1 , uint16 photo ;
INIT_DECL_LIST	59:7	59:7	2	uint16 photo0 ; photo0 = ( uint16 ) - 1 , uint16 photo
VAR_DECL	59:7	59:16	3	uint16 photo0 ; photo0 = ( uint16 ) - 1
TYPE	59:7	59:7	4	uint16
TYPE_NAME	59:7	59:7	5	uint16
LEAF_NODE	59:7	59:7	6	uint16
NAME	59:16	59:16	4	photo0
LEAF_NODE	59:16	59:16	5	photo0
LEAF_NODE	0:0	0:0	4	;
INIT	59:16	59:16	4	photo0 = ( uint16 ) - 1
ASSIGN	59:16	59:25	5	photo0 = ( uint16 ) - 1
LVAL	59:16	59:16	6	photo0
NAME	59:16	59:16	7	photo0
LEAF_NODE	59:16	59:16	8	photo0
ASSIGN_OP	59:23	59:23	6	=
LEAF_NODE	59:23	59:23	7	=
RVAL	59:25	59:34	6	( uint16 ) - 1
LEAF_NODE	59:25	59:25	7	(
TYPE_NAME	59:26	59:26	7	uint16
LEAF_NODE	59:26	59:26	8	uint16
LEAF_NODE	59:32	59:32	7	)
UNARY_EXPR	59:34	59:35	7	- 1
UNARY_OPERATOR	59:34	59:34	8	-
LEAF_NODE	59:34	59:34	9	-
FIELD	59:35	59:35	8	1
LEAF_NODE	59:35	59:35	9	1
LEAF_NODE	59:36	59:36	3	,
VAR_DECL	59:7	59:38	3	uint16 photo
TYPE	59:7	59:7	4	uint16
TYPE_NAME	59:7	59:7	5	uint16
LEAF_NODE	59:7	59:7	6	uint16
NAME	59:38	59:38	4	photo
LEAF_NODE	59:38	59:38	5	photo
LEAF_NODE	59:43	59:43	2	;
SIMPLE_DECL	60:7	60:29	1	int stoponerr ; stoponerr = 0 ;
VAR_DECL	60:7	60:16	2	int stoponerr ; stoponerr = 0
TYPE	60:7	60:7	3	int
TYPE_NAME	60:7	60:7	4	int
LEAF_NODE	60:7	60:7	5	int
NAME	60:16	60:16	3	stoponerr
LEAF_NODE	60:16	60:16	4	stoponerr
LEAF_NODE	0:0	0:0	3	;
INIT	60:16	60:16	3	stoponerr = 0
ASSIGN	60:16	60:28	4	stoponerr = 0
LVAL	60:16	60:16	5	stoponerr
NAME	60:16	60:16	6	stoponerr
LEAF_NODE	60:16	60:16	7	stoponerr
ASSIGN_OP	60:26	60:26	5	=
LEAF_NODE	60:26	60:26	6	=
RVAL	60:28	60:28	5	0
FIELD	60:28	60:28	6	0
LEAF_NODE	60:28	60:28	7	0
LEAF_NODE	60:29	60:29	2	;
SIMPLE_DECL	61:7	61:27	1	int verbose ; verbose = 0 ;
VAR_DECL	61:7	61:16	2	int verbose ; verbose = 0
TYPE	61:7	61:7	3	int
TYPE_NAME	61:7	61:7	4	int
LEAF_NODE	61:7	61:7	5	int
NAME	61:16	61:16	3	verbose
LEAF_NODE	61:16	61:16	4	verbose
LEAF_NODE	0:0	0:0	3	;
INIT	61:16	61:16	3	verbose = 0
ASSIGN	61:16	61:26	4	verbose = 0
LVAL	61:16	61:16	5	verbose
NAME	61:16	61:16	6	verbose
LEAF_NODE	61:16	61:16	7	verbose
ASSIGN_OP	61:24	61:24	5	=
LEAF_NODE	61:24	61:24	6	=
RVAL	61:26	61:26	5	0
FIELD	61:26	61:26	6	0
LEAF_NODE	61:26	61:26	7	0
LEAF_NODE	61:27	61:27	2	;
SIMPLE_DECL	63:7	63:35	1	char [ TITLE_LENGTH ] title ;
VAR_DECL	63:7	63:16	2	char [ TITLE_LENGTH ] title
TYPE	63:7	63:21	3	char [ TITLE_LENGTH ]
TYPE_NAME	63:7	63:7	4	char
LEAF_NODE	63:7	63:7	5	char
TYPE_SUFFIX	63:21	63:34	4	[ TITLE_LENGTH ]
LEAF_NODE	63:21	63:21	5	[
FIELD	63:22	63:22	5	TITLE_LENGTH
LEAF_NODE	63:22	63:22	6	TITLE_LENGTH
LEAF_NODE	63:34	63:34	5	]
NAME	63:16	63:16	3	title
LEAF_NODE	63:16	63:16	4	title
LEAF_NODE	63:35	63:35	2	;
SIMPLE_DECL	64:7	64:26	1	uint32 xmax , uint32 ymax ;
INIT_DECL_LIST	64:7	64:7	2	uint32 xmax , uint32 ymax
VAR_DECL	64:7	64:16	3	uint32 xmax
TYPE	64:7	64:7	4	uint32
TYPE_NAME	64:7	64:7	5	uint32
LEAF_NODE	64:7	64:7	6	uint32
NAME	64:16	64:16	4	xmax
LEAF_NODE	64:16	64:16	5	xmax
LEAF_NODE	64:20	64:20	3	,
VAR_DECL	64:7	64:22	3	uint32 ymax
TYPE	64:7	64:7	4	uint32
TYPE_NAME	64:7	64:7	5	uint32
LEAF_NODE	64:7	64:7	6	uint32
NAME	64:22	64:22	4	ymax
LEAF_NODE	64:22	64:22	5	ymax
LEAF_NODE	64:26	64:26	2	;
SIMPLE_DECL	65:7	65:31	1	char * filelist ; filelist = NULL ;
VAR_DECL	65:7	65:16	2	char * filelist ; filelist = NULL
TYPE	65:7	65:12	3	char *
TYPE_NAME	65:7	65:7	4	char
LEAF_NODE	65:7	65:7	5	char
POINTER	65:12	65:12	4	*
LEAF_NODE	65:12	65:12	5	*
NAME	65:16	65:16	3	filelist
LEAF_NODE	65:16	65:16	4	filelist
LEAF_NODE	0:0	0:0	3	;
INIT	65:16	65:16	3	filelist = NULL
ASSIGN	65:16	65:27	4	filelist = NULL
LVAL	65:16	65:16	5	filelist
NAME	65:16	65:16	6	filelist
LEAF_NODE	65:16	65:16	7	filelist
ASSIGN_OP	65:25	65:25	5	=
LEAF_NODE	65:25	65:25	6	=
RVAL	65:27	65:27	5	NULL
FIELD	65:27	65:27	6	NULL
LEAF_NODE	65:27	65:27	7	NULL
LEAF_NODE	65:31	65:31	2	;
SIMPLE_DECL	66:7	66:25	1	int fileindex ;
VAR_DECL	66:7	66:16	2	int fileindex
TYPE	66:7	66:7	3	int
TYPE_NAME	66:7	66:7	4	int
LEAF_NODE	66:7	66:7	5	int
NAME	66:16	66:16	3	fileindex
LEAF_NODE	66:16	66:16	4	fileindex
LEAF_NODE	66:25	66:25	2	;
SIMPLE_DECL	67:7	67:23	1	int filenum ;
VAR_DECL	67:7	67:16	2	int filenum
TYPE	67:7	67:7	3	int
TYPE_NAME	67:7	67:7	4	int
LEAF_NODE	67:7	67:7	5	int
NAME	67:16	67:16	3	filenum
LEAF_NODE	67:16	67:16	4	filenum
LEAF_NODE	67:23	67:23	2	;
SIMPLE_DECL	68:7	68:30	1	TIFFErrorHandler oerror ;
VAR_DECL	68:7	68:24	2	TIFFErrorHandler oerror
TYPE	68:7	68:7	3	TIFFErrorHandler
TYPE_NAME	68:7	68:7	4	TIFFErrorHandler
LEAF_NODE	68:7	68:7	5	TIFFErrorHandler
NAME	68:24	68:24	3	oerror
LEAF_NODE	68:24	68:24	4	oerror
LEAF_NODE	68:30	68:30	2	;
SIMPLE_DECL	69:7	69:32	1	TIFFErrorHandler owarning ;
VAR_DECL	69:7	69:24	2	TIFFErrorHandler owarning
TYPE	69:7	69:7	3	TIFFErrorHandler
TYPE_NAME	69:7	69:7	4	TIFFErrorHandler
LEAF_NODE	69:7	69:7	5	TIFFErrorHandler
NAME	69:24	69:24	3	owarning
LEAF_NODE	69:24	69:24	4	owarning
LEAF_NODE	69:32	69:32	2	;
SIMPLE_DECL	71:7	71:34	1	void cleanup_and_exit ; cleanup_and_exit cleanup_and_exit ( void ) ;
VAR_DECL	71:7	71:12	2	void cleanup_and_exit ; cleanup_and_exit cleanup_and_exit ( void )
TYPE	71:7	71:7	3	void
TYPE_NAME	71:7	71:7	4	void
LEAF_NODE	71:7	71:7	5	void
NAME	71:12	71:12	3	cleanup_and_exit
LEAF_NODE	71:12	71:12	4	cleanup_and_exit
LEAF_NODE	0:0	0:0	3	;
INIT	71:12	71:12	3	cleanup_and_exit cleanup_and_exit ( void )
ASSIGN	71:12	71:28	4	cleanup_and_exit cleanup_and_exit ( void )
LVAL	71:12	71:12	5	cleanup_and_exit
NAME	71:12	71:12	6	cleanup_and_exit
LEAF_NODE	71:12	71:12	7	cleanup_and_exit
ASSIGN_OP	71:12	71:12	5	cleanup_and_exit
NAME	71:12	71:12	6	cleanup_and_exit
LEAF_NODE	71:12	71:12	7	cleanup_and_exit
RVAL	71:28	71:33	5	( void )
LEAF_NODE	71:28	71:28	6	(
EXPR	71:29	71:29	6	void
FIELD	71:29	71:29	7	void
LEAF_NODE	71:29	71:29	8	void
LEAF_NODE	71:33	71:33	6	)
LEAF_NODE	71:34	71:34	2	;
SIMPLE_DECL	72:7	72:26	1	int initImage ; initImage initImage ( void ) ;
VAR_DECL	72:7	72:11	2	int initImage ; initImage initImage ( void )
TYPE	72:7	72:7	3	int
TYPE_NAME	72:7	72:7	4	int
LEAF_NODE	72:7	72:7	5	int
NAME	72:11	72:11	3	initImage
LEAF_NODE	72:11	72:11	4	initImage
LEAF_NODE	0:0	0:0	3	;
INIT	72:11	72:11	3	initImage initImage ( void )
ASSIGN	72:11	72:20	4	initImage initImage ( void )
LVAL	72:11	72:11	5	initImage
NAME	72:11	72:11	6	initImage
LEAF_NODE	72:11	72:11	7	initImage
ASSIGN_OP	72:11	72:11	5	initImage
NAME	72:11	72:11	6	initImage
LEAF_NODE	72:11	72:11	7	initImage
RVAL	72:20	72:25	5	( void )
LEAF_NODE	72:20	72:20	6	(
EXPR	72:21	72:21	6	void
FIELD	72:21	72:21	7	void
LEAF_NODE	72:21	72:21	8	void
LEAF_NODE	72:25	72:25	6	)
LEAF_NODE	72:26	72:26	2	;
SIMPLE_DECL	73:7	73:26	1	int prevImage ; prevImage prevImage ( void ) ;
VAR_DECL	73:7	73:11	2	int prevImage ; prevImage prevImage ( void )
TYPE	73:7	73:7	3	int
TYPE_NAME	73:7	73:7	4	int
LEAF_NODE	73:7	73:7	5	int
NAME	73:11	73:11	3	prevImage
LEAF_NODE	73:11	73:11	4	prevImage
LEAF_NODE	0:0	0:0	3	;
INIT	73:11	73:11	3	prevImage prevImage ( void )
ASSIGN	73:11	73:20	4	prevImage prevImage ( void )
LVAL	73:11	73:11	5	prevImage
NAME	73:11	73:11	6	prevImage
LEAF_NODE	73:11	73:11	7	prevImage
ASSIGN_OP	73:11	73:11	5	prevImage
NAME	73:11	73:11	6	prevImage
LEAF_NODE	73:11	73:11	7	prevImage
RVAL	73:20	73:25	5	( void )
LEAF_NODE	73:20	73:20	6	(
EXPR	73:21	73:21	6	void
FIELD	73:21	73:21	7	void
LEAF_NODE	73:21	73:21	8	void
LEAF_NODE	73:25	73:25	6	)
LEAF_NODE	73:26	73:26	2	;
SIMPLE_DECL	74:7	74:26	1	int nextImage ; nextImage nextImage ( void ) ;
VAR_DECL	74:7	74:11	2	int nextImage ; nextImage nextImage ( void )
TYPE	74:7	74:7	3	int
TYPE_NAME	74:7	74:7	4	int
LEAF_NODE	74:7	74:7	5	int
NAME	74:11	74:11	3	nextImage
LEAF_NODE	74:11	74:11	4	nextImage
LEAF_NODE	0:0	0:0	3	;
INIT	74:11	74:11	3	nextImage nextImage ( void )
ASSIGN	74:11	74:20	4	nextImage nextImage ( void )
LVAL	74:11	74:11	5	nextImage
NAME	74:11	74:11	6	nextImage
LEAF_NODE	74:11	74:11	7	nextImage
ASSIGN_OP	74:11	74:11	5	nextImage
NAME	74:11	74:11	6	nextImage
LEAF_NODE	74:11	74:11	7	nextImage
RVAL	74:20	74:25	5	( void )
LEAF_NODE	74:20	74:20	6	(
EXPR	74:21	74:21	6	void
FIELD	74:21	74:21	7	void
LEAF_NODE	74:21	74:21	8	void
LEAF_NODE	74:25	74:25	6	)
LEAF_NODE	74:26	74:26	2	;
SIMPLE_DECL	75:7	75:31	1	void setWindowSize ; setWindowSize setWindowSize ( void ) ;
VAR_DECL	75:7	75:12	2	void setWindowSize ; setWindowSize setWindowSize ( void )
TYPE	75:7	75:7	3	void
TYPE_NAME	75:7	75:7	4	void
LEAF_NODE	75:7	75:7	5	void
NAME	75:12	75:12	3	setWindowSize
LEAF_NODE	75:12	75:12	4	setWindowSize
LEAF_NODE	0:0	0:0	3	;
INIT	75:12	75:12	3	setWindowSize setWindowSize ( void )
ASSIGN	75:12	75:25	4	setWindowSize setWindowSize ( void )
LVAL	75:12	75:12	5	setWindowSize
NAME	75:12	75:12	6	setWindowSize
LEAF_NODE	75:12	75:12	7	setWindowSize
ASSIGN_OP	75:12	75:12	5	setWindowSize
NAME	75:12	75:12	6	setWindowSize
LEAF_NODE	75:12	75:12	7	setWindowSize
RVAL	75:25	75:30	5	( void )
LEAF_NODE	75:25	75:25	6	(
EXPR	75:26	75:26	6	void
FIELD	75:26	75:26	7	void
LEAF_NODE	75:26	75:26	8	void
LEAF_NODE	75:30	75:30	6	)
LEAF_NODE	75:31	75:31	2	;
SIMPLE_DECL	76:7	76:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	76:7	76:12	2	void usage ; usage usage ( void )
TYPE	76:7	76:7	3	void
TYPE_NAME	76:7	76:7	4	void
LEAF_NODE	76:7	76:7	5	void
NAME	76:12	76:12	3	usage
LEAF_NODE	76:12	76:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	76:12	76:12	3	usage usage ( void )
ASSIGN	76:12	76:17	4	usage usage ( void )
LVAL	76:12	76:12	5	usage
NAME	76:12	76:12	6	usage
LEAF_NODE	76:12	76:12	7	usage
ASSIGN_OP	76:12	76:12	5	usage
NAME	76:12	76:12	6	usage
LEAF_NODE	76:12	76:12	7	usage
RVAL	76:17	76:22	5	( void )
LEAF_NODE	76:17	76:17	6	(
EXPR	76:18	76:18	6	void
FIELD	76:18	76:18	7	void
LEAF_NODE	76:18	76:18	8	void
LEAF_NODE	76:22	76:22	6	)
LEAF_NODE	76:23	76:23	2	;
SIMPLE_DECL	78:7	78:29	1	void raster_draw ; raster_draw raster_draw ( void ) ;
VAR_DECL	78:7	78:12	2	void raster_draw ; raster_draw raster_draw ( void )
TYPE	78:7	78:7	3	void
TYPE_NAME	78:7	78:7	4	void
LEAF_NODE	78:7	78:7	5	void
NAME	78:12	78:12	3	raster_draw
LEAF_NODE	78:12	78:12	4	raster_draw
LEAF_NODE	0:0	0:0	3	;
INIT	78:12	78:12	3	raster_draw raster_draw ( void )
ASSIGN	78:12	78:23	4	raster_draw raster_draw ( void )
LVAL	78:12	78:12	5	raster_draw
NAME	78:12	78:12	6	raster_draw
LEAF_NODE	78:12	78:12	7	raster_draw
ASSIGN_OP	78:12	78:12	5	raster_draw
NAME	78:12	78:12	6	raster_draw
LEAF_NODE	78:12	78:12	7	raster_draw
RVAL	78:23	78:28	5	( void )
LEAF_NODE	78:23	78:23	6	(
EXPR	78:24	78:24	6	void
FIELD	78:24	78:24	7	void
LEAF_NODE	78:24	78:24	8	void
LEAF_NODE	78:28	78:28	6	)
LEAF_NODE	78:29	78:29	2	;
SIMPLE_DECL	79:7	79:36	1	void raster_reshape ; raster_reshape raster_reshape ( int , int ) ;
VAR_DECL	79:7	79:12	2	void raster_reshape ; raster_reshape raster_reshape ( int , int )
TYPE	79:7	79:7	3	void
TYPE_NAME	79:7	79:7	4	void
LEAF_NODE	79:7	79:7	5	void
NAME	79:12	79:12	3	raster_reshape
LEAF_NODE	79:12	79:12	4	raster_reshape
LEAF_NODE	0:0	0:0	3	;
INIT	79:12	79:12	3	raster_reshape raster_reshape ( int , int )
ASSIGN	79:12	79:26	4	raster_reshape raster_reshape ( int , int )
LVAL	79:12	79:12	5	raster_reshape
NAME	79:12	79:12	6	raster_reshape
LEAF_NODE	79:12	79:12	7	raster_reshape
ASSIGN_OP	79:12	79:12	5	raster_reshape
NAME	79:12	79:12	6	raster_reshape
LEAF_NODE	79:12	79:12	7	raster_reshape
RVAL	79:26	79:35	5	( int , int )
LEAF_NODE	79:26	79:26	6	(
EXPR	79:27	79:32	6	int , int
FIELD	79:27	79:27	7	int
LEAF_NODE	79:27	79:27	8	int
LEAF_NODE	79:30	79:30	7	,
FIELD	79:32	79:32	7	int
LEAF_NODE	79:32	79:32	8	int
LEAF_NODE	79:35	79:35	6	)
LEAF_NODE	79:36	79:36	2	;
SIMPLE_DECL	84:8	84:20	1	char * optarg ;
VAR_DECL	84:8	84:14	2	char * optarg
TYPE	84:8	84:12	3	char *
TYPE_NAME	84:8	84:8	4	char
LEAF_NODE	84:8	84:8	5	char
POINTER	84:12	84:12	4	*
LEAF_NODE	84:12	84:12	5	*
NAME	84:14	84:14	3	optarg
LEAF_NODE	84:14	84:14	4	optarg
LEAF_NODE	84:20	84:20	2	;
SIMPLE_DECL	85:8	85:18	1	int optind ;
VAR_DECL	85:8	85:12	2	int optind
TYPE	85:8	85:8	3	int
TYPE_NAME	85:8	85:8	4	int
LEAF_NODE	85:8	85:8	5	int
NAME	85:12	85:12	3	optind
LEAF_NODE	85:12	85:12	4	optind
LEAF_NODE	85:18	85:18	2	;
SIMPLE_DECL	94:7	94:23	1	TIFF * tif ; tif = NULL ;
VAR_DECL	94:7	94:13	2	TIFF * tif ; tif = NULL
TYPE	94:7	94:11	3	TIFF *
TYPE_NAME	94:7	94:7	4	TIFF
LEAF_NODE	94:7	94:7	5	TIFF
POINTER	94:11	94:11	4	*
LEAF_NODE	94:11	94:11	5	*
NAME	94:13	94:13	3	tif
LEAF_NODE	94:13	94:13	4	tif
LEAF_NODE	0:0	0:0	3	;
INIT	94:13	94:13	3	tif = NULL
ASSIGN	94:13	94:19	4	tif = NULL
LVAL	94:13	94:13	5	tif
NAME	94:13	94:13	6	tif
LEAF_NODE	94:13	94:13	7	tif
ASSIGN_OP	94:17	94:17	5	=
LEAF_NODE	94:17	94:17	6	=
RVAL	94:19	94:19	5	NULL
FIELD	94:19	94:19	6	NULL
LEAF_NODE	94:19	94:19	7	NULL
LEAF_NODE	94:23	94:23	2	;
FUNCTION_DEF	96:0	198:0	1	
RETURN_TYPE	96:0	96:0	2	int
TYPE_NAME	96:0	96:0	3	int
LEAF_NODE	96:0	96:0	4	int
FUNCTION_NAME	97:0	97:0	2	main
LEAF_NODE	97:0	97:0	3	main
PARAMETER_LIST	97:4	97:27	2	( int argc , char * [ ] argv )
LEAF_NODE	97:4	97:4	3	(
PARAMETER_DECL	97:5	97:9	3	int argc
TYPE	97:5	97:5	4	int
TYPE_NAME	97:5	97:5	5	int
LEAF_NODE	97:5	97:5	6	int
NAME	97:9	97:9	4	argc
LEAF_NODE	97:9	97:9	5	argc
LEAF_NODE	97:13	97:13	3	,
PARAMETER_DECL	97:15	97:21	3	char * [ ] argv
TYPE	97:15	97:25	4	char * [ ]
TYPE_NAME	97:15	97:15	5	char
LEAF_NODE	97:15	97:15	6	char
POINTER	97:19	97:19	5	*
LEAF_NODE	97:19	97:19	6	*
TYPE_SUFFIX	97:25	97:26	5	[ ]
LEAF_NODE	97:25	97:25	6	[
LEAF_NODE	97:26	97:26	6	]
NAME	97:21	97:21	4	argv
LEAF_NODE	97:21	97:21	5	argv
LEAF_NODE	97:27	97:27	3	)
LEAF_NODE	98:0	98:0	2	{
STATEMENTS	99:8	197:8	2	
SIMPLE_DECL	99:8	99:13	3	int c ;
VAR_DECL	99:8	99:12	4	int c
TYPE	99:8	99:8	5	int
TYPE_NAME	99:8	99:8	6	int
LEAF_NODE	99:8	99:8	7	int
NAME	99:12	99:12	5	c
LEAF_NODE	99:12	99:12	6	c
LEAF_NODE	99:13	99:13	4	;
SIMPLE_DECL	100:8	100:23	3	int dirnum ; dirnum = - 1 ;
VAR_DECL	100:8	100:12	4	int dirnum ; dirnum = - 1
TYPE	100:8	100:8	5	int
TYPE_NAME	100:8	100:8	6	int
LEAF_NODE	100:8	100:8	7	int
NAME	100:12	100:12	5	dirnum
LEAF_NODE	100:12	100:12	6	dirnum
LEAF_NODE	0:0	0:0	5	;
INIT	100:12	100:12	5	dirnum = - 1
ASSIGN	100:12	100:21	6	dirnum = - 1
LVAL	100:12	100:12	7	dirnum
NAME	100:12	100:12	8	dirnum
LEAF_NODE	100:12	100:12	9	dirnum
ASSIGN_OP	100:19	100:19	7	=
LEAF_NODE	100:19	100:19	8	=
RVAL	100:21	100:21	7	- 1
UNARY_EXPR	100:21	100:22	8	- 1
UNARY_OPERATOR	100:21	100:21	9	-
LEAF_NODE	100:21	100:21	10	-
FIELD	100:22	100:22	9	1
LEAF_NODE	100:22	100:22	10	1
LEAF_NODE	100:23	100:23	4	;
SIMPLE_DECL	101:8	101:25	3	uint32 diroff ; diroff = 0 ;
VAR_DECL	101:8	101:15	4	uint32 diroff ; diroff = 0
TYPE	101:8	101:8	5	uint32
TYPE_NAME	101:8	101:8	6	uint32
LEAF_NODE	101:8	101:8	7	uint32
NAME	101:15	101:15	5	diroff
LEAF_NODE	101:15	101:15	6	diroff
LEAF_NODE	0:0	0:0	5	;
INIT	101:15	101:15	5	diroff = 0
ASSIGN	101:15	101:24	6	diroff = 0
LVAL	101:15	101:15	7	diroff
NAME	101:15	101:15	8	diroff
LEAF_NODE	101:15	101:15	9	diroff
ASSIGN_OP	101:22	101:22	7	=
LEAF_NODE	101:22	101:22	8	=
RVAL	101:24	101:24	7	0
FIELD	101:24	101:24	8	0
LEAF_NODE	101:24	101:24	9	0
LEAF_NODE	101:25	101:25	4	;
EXPR_STATEMENT	103:8	103:42	3	oerror = TIFFSetErrorHandler ( NULL ) ;
EXPR	103:8	103:8	4	oerror = TIFFSetErrorHandler ( NULL )
ASSIGN	103:8	103:17	5	oerror = TIFFSetErrorHandler ( NULL )
LVAL	103:8	103:8	6	oerror
FIELD	103:8	103:8	7	oerror
LEAF_NODE	103:8	103:8	8	oerror
ASSIGN_OP	103:15	103:15	6	=
LEAF_NODE	103:15	103:15	7	=
RVAL	103:17	103:17	6	TIFFSetErrorHandler ( NULL )
FUNCTION_CALL	103:17	103:41	7	TIFFSetErrorHandler ( NULL )
CALLEE	103:17	103:17	8	TIFFSetErrorHandler
LEAF_NODE	103:17	103:17	9	TIFFSetErrorHandler
LEAF_NODE	103:36	103:36	8	(
ARGUMENT	103:37	103:37	8	NULL
FIELD	103:37	103:37	9	NULL
LEAF_NODE	103:37	103:37	10	NULL
LEAF_NODE	103:41	103:41	8	)
LEAF_NODE	103:42	103:42	4	;
EXPR_STATEMENT	104:8	104:46	3	owarning = TIFFSetWarningHandler ( NULL ) ;
EXPR	104:8	104:8	4	owarning = TIFFSetWarningHandler ( NULL )
ASSIGN	104:8	104:19	5	owarning = TIFFSetWarningHandler ( NULL )
LVAL	104:8	104:8	6	owarning
FIELD	104:8	104:8	7	owarning
LEAF_NODE	104:8	104:8	8	owarning
ASSIGN_OP	104:17	104:17	6	=
LEAF_NODE	104:17	104:17	7	=
RVAL	104:19	104:19	6	TIFFSetWarningHandler ( NULL )
FUNCTION_CALL	104:19	104:45	7	TIFFSetWarningHandler ( NULL )
CALLEE	104:19	104:19	8	TIFFSetWarningHandler
LEAF_NODE	104:19	104:19	9	TIFFSetWarningHandler
LEAF_NODE	104:40	104:40	8	(
ARGUMENT	104:41	104:41	8	NULL
FIELD	104:41	104:41	9	NULL
LEAF_NODE	104:41	104:41	10	NULL
LEAF_NODE	104:45	104:45	8	)
LEAF_NODE	104:46	104:46	4	;
ITERATION	105:8	106:12	3	
KEYWORD	105:8	105:8	4	while
LEAF_NODE	105:8	105:8	5	while
LEAF_NODE	105:14	105:14	4	(
CONDITION	105:15	105:15	4	( c = getopt ( argc , argv , "d:o:p:eflmsvw?" ) ) != - 1
EXPR	105:15	105:61	5	( c = getopt ( argc , argv , "d:o:p:eflmsvw?" ) ) != - 1
LEAF_NODE	105:15	105:15	6	(
ASSIGN	105:16	105:20	6	c = getopt ( argc , argv , "d:o:p:eflmsvw?" )
LVAL	105:16	105:16	7	c
FIELD	105:16	105:16	8	c
LEAF_NODE	105:16	105:16	9	c
ASSIGN_OP	105:18	105:18	7	=
LEAF_NODE	105:18	105:18	8	=
RVAL	105:20	105:20	7	getopt ( argc , argv , "d:o:p:eflmsvw?" )
FUNCTION_CALL	105:20	105:55	8	getopt ( argc , argv , "d:o:p:eflmsvw?" )
CALLEE	105:20	105:20	9	getopt
LEAF_NODE	105:20	105:20	10	getopt
LEAF_NODE	105:26	105:26	9	(
ARGUMENT	105:27	105:27	9	argc
FIELD	105:27	105:27	10	argc
LEAF_NODE	105:27	105:27	11	argc
LEAF_NODE	105:31	105:31	9	,
ARGUMENT	105:33	105:33	9	argv
FIELD	105:33	105:33	10	argv
LEAF_NODE	105:33	105:33	11	argv
LEAF_NODE	105:37	105:37	9	,
ARGUMENT	105:39	105:39	9	"d:o:p:eflmsvw?"
FIELD	105:39	105:39	10	"d:o:p:eflmsvw?"
LEAF_NODE	105:39	105:39	11	"d:o:p:eflmsvw?"
LEAF_NODE	105:55	105:55	9	)
LEAF_NODE	105:56	105:56	6	)
EQ_OPERATOR	105:58	105:58	6	!=
LEAF_NODE	105:58	105:58	7	!=
UNARY_EXPR	105:61	105:62	6	- 1
UNARY_OPERATOR	105:61	105:61	7	-
LEAF_NODE	105:61	105:61	8	-
FIELD	105:62	105:62	7	1
LEAF_NODE	105:62	105:62	8	1
LEAF_NODE	105:63	105:63	4	)
STATEMENTS	106:12	106:12	4	
SELECTION	106:12	106:23	5	
KEYWORD	106:12	106:12	6	switch
LEAF_NODE	106:12	106:12	7	switch
LEAF_NODE	106:19	106:19	6	(
CONDITION	106:20	106:20	6	c
EXPR	106:20	106:20	7	c
FIELD	106:20	106:20	8	c
LEAF_NODE	106:20	106:20	9	c
LEAF_NODE	106:21	106:21	6	)
STATEMENTS	106:23	137:12	6	
LEAF_NODE	106:23	106:23	7	{
STATEMENTS	107:12	135:16	7	
LEAF_NODE	107:12	107:12	8	case
LEAF_NODE	107:17	107:17	8	'd'
LEAF_NODE	107:20	107:20	8	:
EXPR_STATEMENT	108:16	108:37	8	dirnum = atoi ( optarg ) ;
EXPR	108:16	108:16	9	dirnum = atoi ( optarg )
ASSIGN	108:16	108:25	10	dirnum = atoi ( optarg )
LVAL	108:16	108:16	11	dirnum
FIELD	108:16	108:16	12	dirnum
LEAF_NODE	108:16	108:16	13	dirnum
ASSIGN_OP	108:23	108:23	11	=
LEAF_NODE	108:23	108:23	12	=
RVAL	108:25	108:25	11	atoi ( optarg )
FUNCTION_CALL	108:25	108:36	12	atoi ( optarg )
CALLEE	108:25	108:25	13	atoi
LEAF_NODE	108:25	108:25	14	atoi
LEAF_NODE	108:29	108:29	13	(
ARGUMENT	108:30	108:30	13	optarg
FIELD	108:30	108:30	14	optarg
LEAF_NODE	108:30	108:30	15	optarg
LEAF_NODE	108:36	108:36	13	)
LEAF_NODE	108:37	108:37	9	;
JUMP_STATEMENT	109:16	109:21	8	break DESTINATION ;
KEYWORD	109:16	109:16	9	break
LEAF_NODE	109:16	109:16	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	109:21	109:21	9	;
LEAF_NODE	110:12	110:12	8	case
LEAF_NODE	110:17	110:17	8	'e'
LEAF_NODE	110:20	110:20	8	:
EXPR_STATEMENT	111:16	111:52	8	oerror = TIFFSetErrorHandler ( oerror ) ;
EXPR	111:16	111:16	9	oerror = TIFFSetErrorHandler ( oerror )
ASSIGN	111:16	111:25	10	oerror = TIFFSetErrorHandler ( oerror )
LVAL	111:16	111:16	11	oerror
FIELD	111:16	111:16	12	oerror
LEAF_NODE	111:16	111:16	13	oerror
ASSIGN_OP	111:23	111:23	11	=
LEAF_NODE	111:23	111:23	12	=
RVAL	111:25	111:25	11	TIFFSetErrorHandler ( oerror )
FUNCTION_CALL	111:25	111:51	12	TIFFSetErrorHandler ( oerror )
CALLEE	111:25	111:25	13	TIFFSetErrorHandler
LEAF_NODE	111:25	111:25	14	TIFFSetErrorHandler
LEAF_NODE	111:44	111:44	13	(
ARGUMENT	111:45	111:45	13	oerror
FIELD	111:45	111:45	14	oerror
LEAF_NODE	111:45	111:45	15	oerror
LEAF_NODE	111:51	111:51	13	)
LEAF_NODE	111:52	111:52	9	;
JUMP_STATEMENT	112:16	112:21	8	break DESTINATION ;
KEYWORD	112:16	112:16	9	break
LEAF_NODE	112:16	112:16	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	112:21	112:21	9	;
LEAF_NODE	113:12	113:12	8	case
LEAF_NODE	113:17	113:17	8	'l'
LEAF_NODE	113:20	113:20	8	:
EXPR_STATEMENT	114:16	114:42	8	order0 = FILLORDER_LSB2MSB ;
EXPR	114:16	114:16	9	order0 = FILLORDER_LSB2MSB
ASSIGN	114:16	114:25	10	order0 = FILLORDER_LSB2MSB
LVAL	114:16	114:16	11	order0
FIELD	114:16	114:16	12	order0
LEAF_NODE	114:16	114:16	13	order0
ASSIGN_OP	114:23	114:23	11	=
LEAF_NODE	114:23	114:23	12	=
RVAL	114:25	114:25	11	FILLORDER_LSB2MSB
FIELD	114:25	114:25	12	FILLORDER_LSB2MSB
LEAF_NODE	114:25	114:25	13	FILLORDER_LSB2MSB
LEAF_NODE	114:42	114:42	9	;
JUMP_STATEMENT	115:16	115:21	8	break DESTINATION ;
KEYWORD	115:16	115:16	9	break
LEAF_NODE	115:16	115:16	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	115:21	115:21	9	;
LEAF_NODE	116:12	116:12	8	case
LEAF_NODE	116:17	116:17	8	'm'
LEAF_NODE	116:20	116:20	8	:
EXPR_STATEMENT	117:16	117:42	8	order0 = FILLORDER_MSB2LSB ;
EXPR	117:16	117:16	9	order0 = FILLORDER_MSB2LSB
ASSIGN	117:16	117:25	10	order0 = FILLORDER_MSB2LSB
LVAL	117:16	117:16	11	order0
FIELD	117:16	117:16	12	order0
LEAF_NODE	117:16	117:16	13	order0
ASSIGN_OP	117:23	117:23	11	=
LEAF_NODE	117:23	117:23	12	=
RVAL	117:25	117:25	11	FILLORDER_MSB2LSB
FIELD	117:25	117:25	12	FILLORDER_MSB2LSB
LEAF_NODE	117:25	117:25	13	FILLORDER_MSB2LSB
LEAF_NODE	117:42	117:42	9	;
JUMP_STATEMENT	118:16	118:21	8	break DESTINATION ;
KEYWORD	118:16	118:16	9	break
LEAF_NODE	118:16	118:16	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	118:21	118:21	9	;
LEAF_NODE	119:12	119:12	8	case
LEAF_NODE	119:17	119:17	8	'o'
LEAF_NODE	119:20	119:20	8	:
EXPR_STATEMENT	120:16	120:49	8	diroff = strtoul ( optarg , NULL , 0 ) ;
EXPR	120:16	120:16	9	diroff = strtoul ( optarg , NULL , 0 )
ASSIGN	120:16	120:25	10	diroff = strtoul ( optarg , NULL , 0 )
LVAL	120:16	120:16	11	diroff
FIELD	120:16	120:16	12	diroff
LEAF_NODE	120:16	120:16	13	diroff
ASSIGN_OP	120:23	120:23	11	=
LEAF_NODE	120:23	120:23	12	=
RVAL	120:25	120:25	11	strtoul ( optarg , NULL , 0 )
FUNCTION_CALL	120:25	120:48	12	strtoul ( optarg , NULL , 0 )
CALLEE	120:25	120:25	13	strtoul
LEAF_NODE	120:25	120:25	14	strtoul
LEAF_NODE	120:32	120:32	13	(
ARGUMENT	120:33	120:33	13	optarg
FIELD	120:33	120:33	14	optarg
LEAF_NODE	120:33	120:33	15	optarg
LEAF_NODE	120:39	120:39	13	,
ARGUMENT	120:41	120:41	13	NULL
FIELD	120:41	120:41	14	NULL
LEAF_NODE	120:41	120:41	15	NULL
LEAF_NODE	120:45	120:45	13	,
ARGUMENT	120:47	120:47	13	0
FIELD	120:47	120:47	14	0
LEAF_NODE	120:47	120:47	15	0
LEAF_NODE	120:48	120:48	13	)
LEAF_NODE	120:49	120:49	9	;
JUMP_STATEMENT	121:16	121:21	8	break DESTINATION ;
KEYWORD	121:16	121:16	9	break
LEAF_NODE	121:16	121:16	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	121:21	121:21	9	;
LEAF_NODE	122:12	122:12	8	case
LEAF_NODE	122:17	122:17	8	'p'
LEAF_NODE	122:20	122:20	8	:
EXPR_STATEMENT	123:16	123:41	8	photo0 = photoArg ( optarg ) ;
EXPR	123:16	123:16	9	photo0 = photoArg ( optarg )
ASSIGN	123:16	123:25	10	photo0 = photoArg ( optarg )
LVAL	123:16	123:16	11	photo0
FIELD	123:16	123:16	12	photo0
LEAF_NODE	123:16	123:16	13	photo0
ASSIGN_OP	123:23	123:23	11	=
LEAF_NODE	123:23	123:23	12	=
RVAL	123:25	123:25	11	photoArg ( optarg )
FUNCTION_CALL	123:25	123:40	12	photoArg ( optarg )
CALLEE	123:25	123:25	13	photoArg
LEAF_NODE	123:25	123:25	14	photoArg
LEAF_NODE	123:33	123:33	13	(
ARGUMENT	123:34	123:34	13	optarg
FIELD	123:34	123:34	14	optarg
LEAF_NODE	123:34	123:34	15	optarg
LEAF_NODE	123:40	123:40	13	)
LEAF_NODE	123:41	123:41	9	;
JUMP_STATEMENT	124:16	124:21	8	break DESTINATION ;
KEYWORD	124:16	124:16	9	break
LEAF_NODE	124:16	124:16	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	124:21	124:21	9	;
LEAF_NODE	125:12	125:12	8	case
LEAF_NODE	125:17	125:17	8	's'
LEAF_NODE	125:20	125:20	8	:
EXPR_STATEMENT	126:16	126:29	8	stoponerr = 1 ;
EXPR	126:16	126:16	9	stoponerr = 1
ASSIGN	126:16	126:28	10	stoponerr = 1
LVAL	126:16	126:16	11	stoponerr
FIELD	126:16	126:16	12	stoponerr
LEAF_NODE	126:16	126:16	13	stoponerr
ASSIGN_OP	126:26	126:26	11	=
LEAF_NODE	126:26	126:26	12	=
RVAL	126:28	126:28	11	1
FIELD	126:28	126:28	12	1
LEAF_NODE	126:28	126:28	13	1
LEAF_NODE	126:29	126:29	9	;
JUMP_STATEMENT	127:16	127:21	8	break DESTINATION ;
KEYWORD	127:16	127:16	9	break
LEAF_NODE	127:16	127:16	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	127:21	127:21	9	;
LEAF_NODE	128:12	128:12	8	case
LEAF_NODE	128:17	128:17	8	'w'
LEAF_NODE	128:20	128:20	8	:
EXPR_STATEMENT	129:16	129:58	8	owarning = TIFFSetWarningHandler ( owarning ) ;
EXPR	129:16	129:16	9	owarning = TIFFSetWarningHandler ( owarning )
ASSIGN	129:16	129:27	10	owarning = TIFFSetWarningHandler ( owarning )
LVAL	129:16	129:16	11	owarning
FIELD	129:16	129:16	12	owarning
LEAF_NODE	129:16	129:16	13	owarning
ASSIGN_OP	129:25	129:25	11	=
LEAF_NODE	129:25	129:25	12	=
RVAL	129:27	129:27	11	TIFFSetWarningHandler ( owarning )
FUNCTION_CALL	129:27	129:57	12	TIFFSetWarningHandler ( owarning )
CALLEE	129:27	129:27	13	TIFFSetWarningHandler
LEAF_NODE	129:27	129:27	14	TIFFSetWarningHandler
LEAF_NODE	129:48	129:48	13	(
ARGUMENT	129:49	129:49	13	owarning
FIELD	129:49	129:49	14	owarning
LEAF_NODE	129:49	129:49	15	owarning
LEAF_NODE	129:57	129:57	13	)
LEAF_NODE	129:58	129:58	9	;
JUMP_STATEMENT	130:16	130:21	8	break DESTINATION ;
KEYWORD	130:16	130:16	9	break
LEAF_NODE	130:16	130:16	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	130:21	130:21	9	;
LEAF_NODE	131:12	131:12	8	case
LEAF_NODE	131:17	131:17	8	'v'
LEAF_NODE	131:20	131:20	8	:
EXPR_STATEMENT	132:16	132:27	8	verbose = 1 ;
EXPR	132:16	132:16	9	verbose = 1
ASSIGN	132:16	132:26	10	verbose = 1
LVAL	132:16	132:16	11	verbose
FIELD	132:16	132:16	12	verbose
LEAF_NODE	132:16	132:16	13	verbose
ASSIGN_OP	132:24	132:24	11	=
LEAF_NODE	132:24	132:24	12	=
RVAL	132:26	132:26	11	1
FIELD	132:26	132:26	12	1
LEAF_NODE	132:26	132:26	13	1
LEAF_NODE	132:27	132:27	9	;
JUMP_STATEMENT	133:16	133:21	8	break DESTINATION ;
KEYWORD	133:16	133:16	9	break
LEAF_NODE	133:16	133:16	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	133:21	133:21	9	;
LEAF_NODE	134:12	134:12	8	case
LEAF_NODE	134:17	134:17	8	'?'
LEAF_NODE	134:20	134:20	8	:
EXPR_STATEMENT	135:16	135:23	8	usage ( ) ;
EXPR	135:16	135:16	9	usage ( )
FUNCTION_CALL	135:16	135:22	10	usage ( )
CALLEE	135:16	135:16	11	usage
LEAF_NODE	135:16	135:16	12	usage
LEAF_NODE	135:21	135:21	11	(
LEAF_NODE	135:22	135:22	11	)
LEAF_NODE	135:23	135:23	9	;
LEAF_NODE	137:12	137:12	7	}
EXPR_STATEMENT	138:8	138:31	3	filenum = argc - optind ;
EXPR	138:8	138:8	4	filenum = argc - optind
ASSIGN	138:8	138:18	5	filenum = argc - optind
LVAL	138:8	138:8	6	filenum
FIELD	138:8	138:8	7	filenum
LEAF_NODE	138:8	138:8	8	filenum
ASSIGN_OP	138:16	138:16	6	=
LEAF_NODE	138:16	138:16	7	=
RVAL	138:18	138:25	6	argc - optind
FIELD	138:18	138:18	7	argc
LEAF_NODE	138:18	138:18	8	argc
LEAF_NODE	138:23	138:23	7	-
FIELD	138:25	138:25	7	optind
LEAF_NODE	138:25	138:25	8	optind
LEAF_NODE	138:31	138:31	4	;
SELECTION	139:8	140:16	3	
KEYWORD	139:8	139:8	4	if
LEAF_NODE	139:8	139:8	5	if
LEAF_NODE	139:11	139:11	4	(
CONDITION	139:13	139:13	4	filenum < 1
EXPR	139:13	139:23	5	filenum < 1
FIELD	139:13	139:13	6	filenum
LEAF_NODE	139:13	139:13	7	filenum
REL_OPERATOR	139:21	139:21	6	<
LEAF_NODE	139:21	139:21	7	<
FIELD	139:23	139:23	6	1
LEAF_NODE	139:23	139:23	7	1
LEAF_NODE	139:24	139:24	4	)
STATEMENTS	140:16	140:16	4	
EXPR_STATEMENT	140:16	140:23	5	usage ( ) ;
EXPR	140:16	140:16	6	usage ( )
FUNCTION_CALL	140:16	140:22	7	usage ( )
CALLEE	140:16	140:16	8	usage
LEAF_NODE	140:16	140:16	9	usage
LEAF_NODE	140:21	140:21	8	(
LEAF_NODE	140:22	140:22	8	)
LEAF_NODE	140:23	140:23	6	;
EXPR_STATEMENT	142:8	142:29	3	glutInit ( & argc , argv ) ;
EXPR	142:8	142:8	4	glutInit ( & argc , argv )
FUNCTION_CALL	142:8	142:28	5	glutInit ( & argc , argv )
CALLEE	142:8	142:8	6	glutInit
LEAF_NODE	142:8	142:8	7	glutInit
LEAF_NODE	142:16	142:16	6	(
ARGUMENT	142:17	142:17	6	& argc
UNARY_EXPR	142:17	142:18	7	& argc
UNARY_OPERATOR	142:17	142:17	8	&
LEAF_NODE	142:17	142:17	9	&
FIELD	142:18	142:18	8	argc
LEAF_NODE	142:18	142:18	9	argc
LEAF_NODE	142:22	142:22	6	,
ARGUMENT	142:24	142:24	6	argv
FIELD	142:24	142:24	7	argv
LEAF_NODE	142:24	142:24	8	argv
LEAF_NODE	142:28	142:28	6	)
LEAF_NODE	142:29	142:29	4	;
EXPR_STATEMENT	143:8	143:51	3	glutInitDisplayMode ( GLUT_SINGLE | GLUT_RGB ) ;
EXPR	143:8	143:8	4	glutInitDisplayMode ( GLUT_SINGLE | GLUT_RGB )
FUNCTION_CALL	143:8	143:50	5	glutInitDisplayMode ( GLUT_SINGLE | GLUT_RGB )
CALLEE	143:8	143:8	6	glutInitDisplayMode
LEAF_NODE	143:8	143:8	7	glutInitDisplayMode
LEAF_NODE	143:27	143:27	6	(
ARGUMENT	143:28	143:28	6	GLUT_SINGLE | GLUT_RGB
BIT_OR	143:28	143:42	7	GLUT_SINGLE | GLUT_RGB
BIT_OR_ELEM	143:28	143:28	8	GLUT_SINGLE
FIELD	143:28	143:28	9	GLUT_SINGLE
LEAF_NODE	143:28	143:28	10	GLUT_SINGLE
LEAF_NODE	143:40	143:40	8	|
BIT_OR_ELEM	143:42	143:42	8	GLUT_RGB
FIELD	143:42	143:42	9	GLUT_RGB
LEAF_NODE	143:42	143:42	10	GLUT_RGB
LEAF_NODE	143:50	143:50	6	)
LEAF_NODE	143:51	143:51	4	;
EXPR_STATEMENT	148:8	148:41	3	xmax = glutGet ( GLUT_SCREEN_WIDTH ) ;
EXPR	148:8	148:8	4	xmax = glutGet ( GLUT_SCREEN_WIDTH )
ASSIGN	148:8	148:15	5	xmax = glutGet ( GLUT_SCREEN_WIDTH )
LVAL	148:8	148:8	6	xmax
FIELD	148:8	148:8	7	xmax
LEAF_NODE	148:8	148:8	8	xmax
ASSIGN_OP	148:13	148:13	6	=
LEAF_NODE	148:13	148:13	7	=
RVAL	148:15	148:15	6	glutGet ( GLUT_SCREEN_WIDTH )
FUNCTION_CALL	148:15	148:40	7	glutGet ( GLUT_SCREEN_WIDTH )
CALLEE	148:15	148:15	8	glutGet
LEAF_NODE	148:15	148:15	9	glutGet
LEAF_NODE	148:22	148:22	8	(
ARGUMENT	148:23	148:23	8	GLUT_SCREEN_WIDTH
FIELD	148:23	148:23	9	GLUT_SCREEN_WIDTH
LEAF_NODE	148:23	148:23	10	GLUT_SCREEN_WIDTH
LEAF_NODE	148:40	148:40	8	)
LEAF_NODE	148:41	148:41	4	;
EXPR_STATEMENT	149:8	149:42	3	ymax = glutGet ( GLUT_SCREEN_HEIGHT ) ;
EXPR	149:8	149:8	4	ymax = glutGet ( GLUT_SCREEN_HEIGHT )
ASSIGN	149:8	149:15	5	ymax = glutGet ( GLUT_SCREEN_HEIGHT )
LVAL	149:8	149:8	6	ymax
FIELD	149:8	149:8	7	ymax
LEAF_NODE	149:8	149:8	8	ymax
ASSIGN_OP	149:13	149:13	6	=
LEAF_NODE	149:13	149:13	7	=
RVAL	149:15	149:15	6	glutGet ( GLUT_SCREEN_HEIGHT )
FUNCTION_CALL	149:15	149:41	7	glutGet ( GLUT_SCREEN_HEIGHT )
CALLEE	149:15	149:15	8	glutGet
LEAF_NODE	149:15	149:15	9	glutGet
LEAF_NODE	149:22	149:22	8	(
ARGUMENT	149:23	149:23	8	GLUT_SCREEN_HEIGHT
FIELD	149:23	149:23	9	GLUT_SCREEN_HEIGHT
LEAF_NODE	149:23	149:23	10	GLUT_SCREEN_HEIGHT
LEAF_NODE	149:41	149:41	8	)
LEAF_NODE	149:42	149:42	4	;
EXPR_STATEMENT	154:8	154:33	3	xmax = xmax - xmax / 10.0 ;
EXPR	154:8	154:8	4	xmax = xmax - xmax / 10.0
ASSIGN	154:8	154:15	5	xmax = xmax - xmax / 10.0
LVAL	154:8	154:8	6	xmax
FIELD	154:8	154:8	7	xmax
LEAF_NODE	154:8	154:8	8	xmax
ASSIGN_OP	154:13	154:13	6	=
LEAF_NODE	154:13	154:13	7	=
RVAL	154:15	154:29	6	xmax - xmax / 10.0
FIELD	154:15	154:15	7	xmax
LEAF_NODE	154:15	154:15	8	xmax
LEAF_NODE	154:20	154:20	7	-
FIELD	154:22	154:22	7	xmax
LEAF_NODE	154:22	154:22	8	xmax
LEAF_NODE	154:27	154:27	7	/
FIELD	154:29	154:29	7	10.0
LEAF_NODE	154:29	154:29	8	10.0
LEAF_NODE	154:33	154:33	4	;
EXPR_STATEMENT	155:8	155:33	3	ymax = ymax - ymax / 10.0 ;
EXPR	155:8	155:8	4	ymax = ymax - ymax / 10.0
ASSIGN	155:8	155:15	5	ymax = ymax - ymax / 10.0
LVAL	155:8	155:8	6	ymax
FIELD	155:8	155:8	7	ymax
LEAF_NODE	155:8	155:8	8	ymax
ASSIGN_OP	155:13	155:13	6	=
LEAF_NODE	155:13	155:13	7	=
RVAL	155:15	155:29	6	ymax - ymax / 10.0
FIELD	155:15	155:15	7	ymax
LEAF_NODE	155:15	155:15	8	ymax
LEAF_NODE	155:20	155:20	7	-
FIELD	155:22	155:22	7	ymax
LEAF_NODE	155:22	155:22	8	ymax
LEAF_NODE	155:27	155:27	7	/
FIELD	155:29	155:29	7	10.0
LEAF_NODE	155:29	155:29	8	10.0
LEAF_NODE	155:33	155:33	4	;
LEAF_NODE	157:8	157:8	3	filelist
LEAF_NODE	157:17	157:17	3	=
LEAF_NODE	157:19	157:19	3	(
LEAF_NODE	157:20	157:20	3	char
LEAF_NODE	157:25	157:25	3	*
LEAF_NODE	157:26	157:26	3	*
LEAF_NODE	157:27	157:27	3	)
LEAF_NODE	157:29	157:29	3	_TIFFmalloc
LEAF_NODE	157:40	157:40	3	(
LEAF_NODE	157:41	157:41	3	filenum
LEAF_NODE	157:49	157:49	3	*
LEAF_NODE	157:51	157:51	3	sizeof
LEAF_NODE	157:57	157:57	3	(
LEAF_NODE	157:58	157:58	3	char
LEAF_NODE	157:62	157:62	3	*
LEAF_NODE	157:63	157:63	3	)
LEAF_NODE	157:64	157:64	3	)
LEAF_NODE	157:65	157:65	3	;
SELECTION	158:8	158:23	3	
KEYWORD	158:8	158:8	4	if
LEAF_NODE	158:8	158:8	5	if
LEAF_NODE	158:11	158:11	4	(
CONDITION	158:12	158:12	4	! filelist
EXPR	158:12	158:12	5	! filelist
UNARY_EXPR	158:12	158:13	6	! filelist
UNARY_OPERATOR	158:12	158:12	7	!
LEAF_NODE	158:12	158:12	8	!
FIELD	158:13	158:13	7	filelist
LEAF_NODE	158:13	158:13	8	filelist
LEAF_NODE	158:21	158:21	4	)
STATEMENTS	158:23	161:8	4	
LEAF_NODE	158:23	158:23	5	{
STATEMENTS	159:16	160:16	5	
EXPR_STATEMENT	159:16	159:79	6	TIFFError ( argv [ 0 ] , "Can not allocate space for the file list." ) ;
EXPR	159:16	159:16	7	TIFFError ( argv [ 0 ] , "Can not allocate space for the file list." )
FUNCTION_CALL	159:16	159:78	8	TIFFError ( argv [ 0 ] , "Can not allocate space for the file list." )
CALLEE	159:16	159:16	9	TIFFError
LEAF_NODE	159:16	159:16	10	TIFFError
LEAF_NODE	159:25	159:25	9	(
ARGUMENT	159:26	159:26	9	argv [ 0 ]
FIELD	159:26	159:32	10	argv [ 0 ]
LEAF_NODE	159:26	159:26	11	argv
LEAF_NODE	159:30	159:30	11	[
EXPR	159:31	159:31	11	0
FIELD	159:31	159:31	12	0
LEAF_NODE	159:31	159:31	13	0
LEAF_NODE	159:32	159:32	11	]
LEAF_NODE	159:33	159:33	9	,
ARGUMENT	159:35	159:35	9	"Can not allocate space for the file list."
FIELD	159:35	159:35	10	"Can not allocate space for the file list."
LEAF_NODE	159:35	159:35	11	"Can not allocate space for the file list."
LEAF_NODE	159:78	159:78	9	)
LEAF_NODE	159:79	159:79	7	;
JUMP_STATEMENT	160:16	160:24	6	return 1 ;
KEYWORD	160:16	160:16	7	return
LEAF_NODE	160:16	160:16	8	return
DESTINATION	160:23	160:23	7	1
EXPR	160:23	160:23	8	1
FIELD	160:23	160:23	9	1
LEAF_NODE	160:23	160:23	10	1
LEAF_NODE	160:24	160:24	7	;
LEAF_NODE	161:8	161:8	5	}
LEAF_NODE	162:8	162:8	3	_TIFFmemcpy
LEAF_NODE	162:19	162:19	3	(
LEAF_NODE	162:20	162:20	3	filelist
LEAF_NODE	162:28	162:28	3	,
LEAF_NODE	162:30	162:30	3	argv
LEAF_NODE	162:35	162:35	3	+
LEAF_NODE	162:37	162:37	3	optind
LEAF_NODE	162:43	162:43	3	,
LEAF_NODE	162:45	162:45	3	filenum
LEAF_NODE	162:53	162:53	3	*
LEAF_NODE	162:55	162:55	3	sizeof
LEAF_NODE	162:61	162:61	3	(
LEAF_NODE	162:62	162:62	3	char
LEAF_NODE	162:66	162:66	3	*
LEAF_NODE	162:67	162:67	3	)
LEAF_NODE	162:68	162:68	3	)
LEAF_NODE	162:69	162:69	3	;
EXPR_STATEMENT	163:8	163:22	3	fileindex = - 1 ;
EXPR	163:8	163:8	4	fileindex = - 1
ASSIGN	163:8	163:20	5	fileindex = - 1
LVAL	163:8	163:8	6	fileindex
FIELD	163:8	163:8	7	fileindex
LEAF_NODE	163:8	163:8	8	fileindex
ASSIGN_OP	163:18	163:18	6	=
LEAF_NODE	163:18	163:18	7	=
RVAL	163:20	163:20	6	- 1
UNARY_EXPR	163:20	163:21	7	- 1
UNARY_OPERATOR	163:20	163:20	8	-
LEAF_NODE	163:20	163:20	9	-
FIELD	163:21	163:21	8	1
LEAF_NODE	163:21	163:21	9	1
LEAF_NODE	163:22	163:22	4	;
SELECTION	164:8	164:29	3	
KEYWORD	164:8	164:8	4	if
LEAF_NODE	164:8	164:8	5	if
LEAF_NODE	164:11	164:11	4	(
CONDITION	164:12	164:12	4	nextImage ( ) < 0
EXPR	164:12	164:26	5	nextImage ( ) < 0
FUNCTION_CALL	164:12	164:22	6	nextImage ( )
CALLEE	164:12	164:12	7	nextImage
LEAF_NODE	164:12	164:12	8	nextImage
LEAF_NODE	164:21	164:21	7	(
LEAF_NODE	164:22	164:22	7	)
REL_OPERATOR	164:24	164:24	6	<
LEAF_NODE	164:24	164:24	7	<
FIELD	164:26	164:26	6	0
LEAF_NODE	164:26	164:26	7	0
LEAF_NODE	164:27	164:27	4	)
STATEMENTS	164:29	167:8	4	
LEAF_NODE	164:29	164:29	5	{
STATEMENTS	165:16	166:16	5	
EXPR_STATEMENT	165:16	165:35	6	_TIFFfree ( filelist ) ;
EXPR	165:16	165:16	7	_TIFFfree ( filelist )
FUNCTION_CALL	165:16	165:34	8	_TIFFfree ( filelist )
CALLEE	165:16	165:16	9	_TIFFfree
LEAF_NODE	165:16	165:16	10	_TIFFfree
LEAF_NODE	165:25	165:25	9	(
ARGUMENT	165:26	165:26	9	filelist
FIELD	165:26	165:26	10	filelist
LEAF_NODE	165:26	165:26	11	filelist
LEAF_NODE	165:34	165:34	9	)
LEAF_NODE	165:35	165:35	7	;
JUMP_STATEMENT	166:16	166:24	6	return 2 ;
KEYWORD	166:16	166:16	7	return
LEAF_NODE	166:16	166:16	8	return
DESTINATION	166:23	166:23	7	2
EXPR	166:23	166:23	8	2
FIELD	166:23	166:23	9	2
LEAF_NODE	166:23	166:23	10	2
LEAF_NODE	166:24	166:24	7	;
LEAF_NODE	167:8	167:8	5	}
SELECTION	172:8	173:12	3	
KEYWORD	172:8	172:8	4	if
LEAF_NODE	172:8	172:8	5	if
LEAF_NODE	172:11	172:11	4	(
CONDITION	172:12	172:12	4	dirnum != - 1 && ! TIFFSetDirectory ( tif , dirnum )
EXPR	172:12	172:12	5	dirnum != - 1 && ! TIFFSetDirectory ( tif , dirnum )
AND	172:12	172:28	6	dirnum != - 1 && ! TIFFSetDirectory ( tif , dirnum )
EXPR	172:12	172:22	7	dirnum != - 1
FIELD	172:12	172:12	8	dirnum
LEAF_NODE	172:12	172:12	9	dirnum
EQ_OPERATOR	172:19	172:19	8	!=
LEAF_NODE	172:19	172:19	9	!=
UNARY_EXPR	172:22	172:23	8	- 1
UNARY_OPERATOR	172:22	172:22	9	-
LEAF_NODE	172:22	172:22	10	-
FIELD	172:23	172:23	9	1
LEAF_NODE	172:23	172:23	10	1
LEAF_NODE	172:25	172:25	7	&&
EXPR	172:28	172:28	7	! TIFFSetDirectory ( tif , dirnum )
UNARY_EXPR	172:28	172:29	8	! TIFFSetDirectory ( tif , dirnum )
UNARY_OPERATOR	172:28	172:28	9	!
LEAF_NODE	172:28	172:28	10	!
FUNCTION_CALL	172:29	172:57	9	TIFFSetDirectory ( tif , dirnum )
CALLEE	172:29	172:29	10	TIFFSetDirectory
LEAF_NODE	172:29	172:29	11	TIFFSetDirectory
LEAF_NODE	172:45	172:45	10	(
ARGUMENT	172:46	172:46	10	tif
FIELD	172:46	172:46	11	tif
LEAF_NODE	172:46	172:46	12	tif
LEAF_NODE	172:49	172:49	10	,
ARGUMENT	172:51	172:51	10	dirnum
FIELD	172:51	172:51	11	dirnum
LEAF_NODE	172:51	172:51	12	dirnum
LEAF_NODE	172:57	172:57	10	)
LEAF_NODE	172:58	172:58	4	)
STATEMENTS	173:12	173:12	4	
EXPR_STATEMENT	173:12	173:72	5	TIFFError ( argv [ 0 ] , "Error, seeking to directory %d" , dirnum ) ;
EXPR	173:12	173:12	6	TIFFError ( argv [ 0 ] , "Error, seeking to directory %d" , dirnum )
FUNCTION_CALL	173:12	173:71	7	TIFFError ( argv [ 0 ] , "Error, seeking to directory %d" , dirnum )
CALLEE	173:12	173:12	8	TIFFError
LEAF_NODE	173:12	173:12	9	TIFFError
LEAF_NODE	173:21	173:21	8	(
ARGUMENT	173:22	173:22	8	argv [ 0 ]
FIELD	173:22	173:28	9	argv [ 0 ]
LEAF_NODE	173:22	173:22	10	argv
LEAF_NODE	173:26	173:26	10	[
EXPR	173:27	173:27	10	0
FIELD	173:27	173:27	11	0
LEAF_NODE	173:27	173:27	12	0
LEAF_NODE	173:28	173:28	10	]
LEAF_NODE	173:29	173:29	8	,
ARGUMENT	173:31	173:31	8	"Error, seeking to directory %d"
FIELD	173:31	173:31	9	"Error, seeking to directory %d"
LEAF_NODE	173:31	173:31	10	"Error, seeking to directory %d"
LEAF_NODE	173:63	173:63	8	,
ARGUMENT	173:65	173:65	8	dirnum
FIELD	173:65	173:65	9	dirnum
LEAF_NODE	173:65	173:65	10	dirnum
LEAF_NODE	173:71	173:71	8	)
LEAF_NODE	173:72	173:72	6	;
SELECTION	174:8	175:12	3	
KEYWORD	174:8	174:8	4	if
LEAF_NODE	174:8	174:8	5	if
LEAF_NODE	174:11	174:11	4	(
CONDITION	174:12	174:12	4	diroff != 0 && ! TIFFSetSubDirectory ( tif , diroff )
EXPR	174:12	174:12	5	diroff != 0 && ! TIFFSetSubDirectory ( tif , diroff )
AND	174:12	174:27	6	diroff != 0 && ! TIFFSetSubDirectory ( tif , diroff )
EXPR	174:12	174:22	7	diroff != 0
FIELD	174:12	174:12	8	diroff
LEAF_NODE	174:12	174:12	9	diroff
EQ_OPERATOR	174:19	174:19	8	!=
LEAF_NODE	174:19	174:19	9	!=
FIELD	174:22	174:22	8	0
LEAF_NODE	174:22	174:22	9	0
LEAF_NODE	174:24	174:24	7	&&
EXPR	174:27	174:27	7	! TIFFSetSubDirectory ( tif , diroff )
UNARY_EXPR	174:27	174:28	8	! TIFFSetSubDirectory ( tif , diroff )
UNARY_OPERATOR	174:27	174:27	9	!
LEAF_NODE	174:27	174:27	10	!
FUNCTION_CALL	174:28	174:59	9	TIFFSetSubDirectory ( tif , diroff )
CALLEE	174:28	174:28	10	TIFFSetSubDirectory
LEAF_NODE	174:28	174:28	11	TIFFSetSubDirectory
LEAF_NODE	174:47	174:47	10	(
ARGUMENT	174:48	174:48	10	tif
FIELD	174:48	174:48	11	tif
LEAF_NODE	174:48	174:48	12	tif
LEAF_NODE	174:51	174:51	10	,
ARGUMENT	174:53	174:53	10	diroff
FIELD	174:53	174:53	11	diroff
LEAF_NODE	174:53	174:53	12	diroff
LEAF_NODE	174:59	174:59	10	)
LEAF_NODE	174:60	174:60	4	)
STATEMENTS	175:12	175:12	4	
EXPR_STATEMENT	175:12	175:76	5	TIFFError ( argv [ 0 ] , "Error, setting subdirectory at %#x" , diroff ) ;
EXPR	175:12	175:12	6	TIFFError ( argv [ 0 ] , "Error, setting subdirectory at %#x" , diroff )
FUNCTION_CALL	175:12	175:75	7	TIFFError ( argv [ 0 ] , "Error, setting subdirectory at %#x" , diroff )
CALLEE	175:12	175:12	8	TIFFError
LEAF_NODE	175:12	175:12	9	TIFFError
LEAF_NODE	175:21	175:21	8	(
ARGUMENT	175:22	175:22	8	argv [ 0 ]
FIELD	175:22	175:28	9	argv [ 0 ]
LEAF_NODE	175:22	175:22	10	argv
LEAF_NODE	175:26	175:26	10	[
EXPR	175:27	175:27	10	0
FIELD	175:27	175:27	11	0
LEAF_NODE	175:27	175:27	12	0
LEAF_NODE	175:28	175:28	10	]
LEAF_NODE	175:29	175:29	8	,
ARGUMENT	175:31	175:31	8	"Error, setting subdirectory at %#x"
FIELD	175:31	175:31	9	"Error, setting subdirectory at %#x"
LEAF_NODE	175:31	175:31	10	"Error, setting subdirectory at %#x"
LEAF_NODE	175:67	175:67	8	,
ARGUMENT	175:69	175:69	8	diroff
FIELD	175:69	175:69	9	diroff
LEAF_NODE	175:69	175:69	10	diroff
LEAF_NODE	175:75	175:75	8	)
LEAF_NODE	175:76	175:76	6	;
EXPR_STATEMENT	176:8	176:22	3	order = order0 ;
EXPR	176:8	176:8	4	order = order0
ASSIGN	176:8	176:16	5	order = order0
LVAL	176:8	176:8	6	order
FIELD	176:8	176:8	7	order
LEAF_NODE	176:8	176:8	8	order
ASSIGN_OP	176:14	176:14	6	=
LEAF_NODE	176:14	176:14	7	=
RVAL	176:16	176:16	6	order0
FIELD	176:16	176:16	7	order0
LEAF_NODE	176:16	176:16	8	order0
LEAF_NODE	176:22	176:22	4	;
EXPR_STATEMENT	177:8	177:22	3	photo = photo0 ;
EXPR	177:8	177:8	4	photo = photo0
ASSIGN	177:8	177:16	5	photo = photo0
LVAL	177:8	177:8	6	photo
FIELD	177:8	177:8	7	photo
LEAF_NODE	177:8	177:8	8	photo
ASSIGN_OP	177:14	177:14	6	=
LEAF_NODE	177:14	177:14	7	=
RVAL	177:16	177:16	6	photo0
FIELD	177:16	177:16	7	photo0
LEAF_NODE	177:16	177:16	8	photo0
LEAF_NODE	177:22	177:22	4	;
SELECTION	178:1	178:21	3	
KEYWORD	178:1	178:1	4	if
LEAF_NODE	178:1	178:1	5	if
LEAF_NODE	178:4	178:4	4	(
CONDITION	178:5	178:5	4	initImage ( ) < 0
EXPR	178:5	178:19	5	initImage ( ) < 0
FUNCTION_CALL	178:5	178:15	6	initImage ( )
CALLEE	178:5	178:5	7	initImage
LEAF_NODE	178:5	178:5	8	initImage
LEAF_NODE	178:14	178:14	7	(
LEAF_NODE	178:15	178:15	7	)
REL_OPERATOR	178:17	178:17	6	<
LEAF_NODE	178:17	178:17	7	<
FIELD	178:19	178:19	6	0
LEAF_NODE	178:19	178:19	7	0
LEAF_NODE	178:20	178:20	4	)
STATEMENTS	178:21	181:8	4	
LEAF_NODE	178:21	178:21	5	{
STATEMENTS	179:16	180:16	5	
EXPR_STATEMENT	179:16	179:35	6	_TIFFfree ( filelist ) ;
EXPR	179:16	179:16	7	_TIFFfree ( filelist )
FUNCTION_CALL	179:16	179:34	8	_TIFFfree ( filelist )
CALLEE	179:16	179:16	9	_TIFFfree
LEAF_NODE	179:16	179:16	10	_TIFFfree
LEAF_NODE	179:25	179:25	9	(
ARGUMENT	179:26	179:26	9	filelist
FIELD	179:26	179:26	10	filelist
LEAF_NODE	179:26	179:26	11	filelist
LEAF_NODE	179:34	179:34	9	)
LEAF_NODE	179:35	179:35	7	;
JUMP_STATEMENT	180:16	180:24	6	return 3 ;
KEYWORD	180:16	180:16	7	return
LEAF_NODE	180:16	180:16	8	return
DESTINATION	180:23	180:23	7	3
EXPR	180:23	180:23	8	3
FIELD	180:23	180:23	9	3
LEAF_NODE	180:23	180:23	10	3
LEAF_NODE	180:24	180:24	7	;
LEAF_NODE	181:8	181:8	5	}
EXPR_STATEMENT	186:8	186:41	3	glutInitWindowSize ( width , height ) ;
EXPR	186:8	186:8	4	glutInitWindowSize ( width , height )
FUNCTION_CALL	186:8	186:40	5	glutInitWindowSize ( width , height )
CALLEE	186:8	186:8	6	glutInitWindowSize
LEAF_NODE	186:8	186:8	7	glutInitWindowSize
LEAF_NODE	186:26	186:26	6	(
ARGUMENT	186:27	186:27	6	width
FIELD	186:27	186:27	7	width
LEAF_NODE	186:27	186:27	8	width
LEAF_NODE	186:32	186:32	6	,
ARGUMENT	186:34	186:34	6	height
FIELD	186:34	186:34	7	height
LEAF_NODE	186:34	186:34	8	height
LEAF_NODE	186:40	186:40	6	)
LEAF_NODE	186:41	186:41	4	;
EXPR_STATEMENT	187:8	188:57	3	snprintf ( title , TITLE_LENGTH - 1 , "%s [%u]" , filelist [ fileindex ] , ( unsigned int ) TIFFCurrentDirectory ( tif ) ) ;
EXPR	187:8	187:8	4	snprintf ( title , TITLE_LENGTH - 1 , "%s [%u]" , filelist [ fileindex ] , ( unsigned int ) TIFFCurrentDirectory ( tif ) )
FUNCTION_CALL	187:8	188:56	5	snprintf ( title , TITLE_LENGTH - 1 , "%s [%u]" , filelist [ fileindex ] , ( unsigned int ) TIFFCurrentDirectory ( tif ) )
CALLEE	187:8	187:8	6	snprintf
LEAF_NODE	187:8	187:8	7	snprintf
LEAF_NODE	187:16	187:16	6	(
ARGUMENT	187:17	187:17	6	title
FIELD	187:17	187:17	7	title
LEAF_NODE	187:17	187:17	8	title
LEAF_NODE	187:22	187:22	6	,
ARGUMENT	187:24	187:39	6	TITLE_LENGTH - 1
FIELD	187:24	187:24	7	TITLE_LENGTH
LEAF_NODE	187:24	187:24	8	TITLE_LENGTH
LEAF_NODE	187:37	187:37	7	-
FIELD	187:39	187:39	7	1
LEAF_NODE	187:39	187:39	8	1
LEAF_NODE	187:40	187:40	6	,
ARGUMENT	187:42	187:42	6	"%s [%u]"
FIELD	187:42	187:42	7	"%s [%u]"
LEAF_NODE	187:42	187:42	8	"%s [%u]"
LEAF_NODE	187:51	187:51	6	,
ARGUMENT	187:53	187:53	6	filelist [ fileindex ]
FIELD	187:53	187:71	7	filelist [ fileindex ]
LEAF_NODE	187:53	187:53	8	filelist
LEAF_NODE	187:61	187:61	8	[
EXPR	187:62	187:62	8	fileindex
FIELD	187:62	187:62	9	fileindex
LEAF_NODE	187:62	187:62	10	fileindex
LEAF_NODE	187:71	187:71	8	]
LEAF_NODE	187:72	187:72	6	,
ARGUMENT	188:16	188:31	6	( unsigned int ) TIFFCurrentDirectory ( tif )
LEAF_NODE	188:16	188:16	7	(
TYPE_NAME	188:17	188:26	7	unsigned int
LEAF_NODE	188:17	188:17	8	unsigned
LEAF_NODE	188:26	188:26	8	int
LEAF_NODE	188:29	188:29	7	)
FUNCTION_CALL	188:31	188:55	7	TIFFCurrentDirectory ( tif )
CALLEE	188:31	188:31	8	TIFFCurrentDirectory
LEAF_NODE	188:31	188:31	9	TIFFCurrentDirectory
LEAF_NODE	188:51	188:51	8	(
ARGUMENT	188:52	188:52	8	tif
FIELD	188:52	188:52	9	tif
LEAF_NODE	188:52	188:52	10	tif
LEAF_NODE	188:55	188:55	8	)
LEAF_NODE	188:56	188:56	6	)
LEAF_NODE	188:57	188:57	4	;
EXPR_STATEMENT	189:8	189:31	3	glutCreateWindow ( title ) ;
EXPR	189:8	189:8	4	glutCreateWindow ( title )
FUNCTION_CALL	189:8	189:30	5	glutCreateWindow ( title )
CALLEE	189:8	189:8	6	glutCreateWindow
LEAF_NODE	189:8	189:8	7	glutCreateWindow
LEAF_NODE	189:24	189:24	6	(
ARGUMENT	189:25	189:25	6	title
FIELD	189:25	189:25	7	title
LEAF_NODE	189:25	189:25	8	title
LEAF_NODE	189:30	189:30	6	)
LEAF_NODE	189:31	189:31	4	;
EXPR_STATEMENT	190:8	190:36	3	glutDisplayFunc ( raster_draw ) ;
EXPR	190:8	190:8	4	glutDisplayFunc ( raster_draw )
FUNCTION_CALL	190:8	190:35	5	glutDisplayFunc ( raster_draw )
CALLEE	190:8	190:8	6	glutDisplayFunc
LEAF_NODE	190:8	190:8	7	glutDisplayFunc
LEAF_NODE	190:23	190:23	6	(
ARGUMENT	190:24	190:24	6	raster_draw
FIELD	190:24	190:24	7	raster_draw
LEAF_NODE	190:24	190:24	8	raster_draw
LEAF_NODE	190:35	190:35	6	)
LEAF_NODE	190:36	190:36	4	;
EXPR_STATEMENT	191:8	191:39	3	glutReshapeFunc ( raster_reshape ) ;
EXPR	191:8	191:8	4	glutReshapeFunc ( raster_reshape )
FUNCTION_CALL	191:8	191:38	5	glutReshapeFunc ( raster_reshape )
CALLEE	191:8	191:8	6	glutReshapeFunc
LEAF_NODE	191:8	191:8	7	glutReshapeFunc
LEAF_NODE	191:23	191:23	6	(
ARGUMENT	191:24	191:24	6	raster_reshape
FIELD	191:24	191:24	7	raster_reshape
LEAF_NODE	191:24	191:24	8	raster_reshape
LEAF_NODE	191:38	191:38	6	)
LEAF_NODE	191:39	191:39	4	;
EXPR_STATEMENT	192:8	192:37	3	glutKeyboardFunc ( raster_keys ) ;
EXPR	192:8	192:8	4	glutKeyboardFunc ( raster_keys )
FUNCTION_CALL	192:8	192:36	5	glutKeyboardFunc ( raster_keys )
CALLEE	192:8	192:8	6	glutKeyboardFunc
LEAF_NODE	192:8	192:8	7	glutKeyboardFunc
LEAF_NODE	192:24	192:24	6	(
ARGUMENT	192:25	192:25	6	raster_keys
FIELD	192:25	192:25	7	raster_keys
LEAF_NODE	192:25	192:25	8	raster_keys
LEAF_NODE	192:36	192:36	6	)
LEAF_NODE	192:37	192:37	4	;
EXPR_STATEMENT	193:8	193:39	3	glutSpecialFunc ( raster_special ) ;
EXPR	193:8	193:8	4	glutSpecialFunc ( raster_special )
FUNCTION_CALL	193:8	193:38	5	glutSpecialFunc ( raster_special )
CALLEE	193:8	193:8	6	glutSpecialFunc
LEAF_NODE	193:8	193:8	7	glutSpecialFunc
LEAF_NODE	193:23	193:23	6	(
ARGUMENT	193:24	193:24	6	raster_special
FIELD	193:24	193:24	7	raster_special
LEAF_NODE	193:24	193:24	8	raster_special
LEAF_NODE	193:38	193:38	6	)
LEAF_NODE	193:39	193:39	4	;
EXPR_STATEMENT	194:8	194:22	3	glutMainLoop ( ) ;
EXPR	194:8	194:8	4	glutMainLoop ( )
FUNCTION_CALL	194:8	194:21	5	glutMainLoop ( )
CALLEE	194:8	194:8	6	glutMainLoop
LEAF_NODE	194:8	194:8	7	glutMainLoop
LEAF_NODE	194:20	194:20	6	(
LEAF_NODE	194:21	194:21	6	)
LEAF_NODE	194:22	194:22	4	;
EXPR_STATEMENT	196:8	196:26	3	cleanup_and_exit ( ) ;
EXPR	196:8	196:8	4	cleanup_and_exit ( )
FUNCTION_CALL	196:8	196:25	5	cleanup_and_exit ( )
CALLEE	196:8	196:8	6	cleanup_and_exit
LEAF_NODE	196:8	196:8	7	cleanup_and_exit
LEAF_NODE	196:24	196:24	6	(
LEAF_NODE	196:25	196:25	6	)
LEAF_NODE	196:26	196:26	4	;
JUMP_STATEMENT	197:8	197:16	3	return 0 ;
KEYWORD	197:8	197:8	4	return
LEAF_NODE	197:8	197:8	5	return
DESTINATION	197:15	197:15	4	0
EXPR	197:15	197:15	5	0
FIELD	197:15	197:15	6	0
LEAF_NODE	197:15	197:15	7	0
LEAF_NODE	197:16	197:16	4	;
LEAF_NODE	198:0	198:0	2	}
FUNCTION_DEF	200:0	211:0	1	
RETURN_TYPE	200:0	200:7	2	static void
LEAF_NODE	200:0	200:0	3	static
TYPE_NAME	200:7	200:7	3	void
LEAF_NODE	200:7	200:7	4	void
FUNCTION_NAME	201:0	201:0	2	cleanup_and_exit
LEAF_NODE	201:0	201:0	3	cleanup_and_exit
PARAMETER_LIST	201:16	201:21	2	( void )
LEAF_NODE	201:16	201:16	3	(
PARAMETER_DECL	201:17	201:17	3	void
LEAF_NODE	201:17	201:17	4	void
LEAF_NODE	201:21	201:21	3	)
LEAF_NODE	202:0	202:0	2	{
STATEMENTS	203:8	210:8	2	
EXPR_STATEMENT	203:8	203:30	3	TIFFRGBAImageEnd ( & img ) ;
EXPR	203:8	203:8	4	TIFFRGBAImageEnd ( & img )
FUNCTION_CALL	203:8	203:29	5	TIFFRGBAImageEnd ( & img )
CALLEE	203:8	203:8	6	TIFFRGBAImageEnd
LEAF_NODE	203:8	203:8	7	TIFFRGBAImageEnd
LEAF_NODE	203:24	203:24	6	(
ARGUMENT	203:25	203:25	6	& img
UNARY_EXPR	203:25	203:26	7	& img
UNARY_OPERATOR	203:25	203:25	8	&
LEAF_NODE	203:25	203:25	9	&
FIELD	203:26	203:26	8	img
LEAF_NODE	203:26	203:26	9	img
LEAF_NODE	203:29	203:29	6	)
LEAF_NODE	203:30	203:30	4	;
SELECTION	204:8	205:16	3	
KEYWORD	204:8	204:8	4	if
LEAF_NODE	204:8	204:8	5	if
LEAF_NODE	204:11	204:11	4	(
CONDITION	204:12	204:12	4	filelist != NULL
EXPR	204:12	204:24	5	filelist != NULL
FIELD	204:12	204:12	6	filelist
LEAF_NODE	204:12	204:12	7	filelist
EQ_OPERATOR	204:21	204:21	6	!=
LEAF_NODE	204:21	204:21	7	!=
FIELD	204:24	204:24	6	NULL
LEAF_NODE	204:24	204:24	7	NULL
LEAF_NODE	204:28	204:28	4	)
STATEMENTS	205:16	205:16	4	
EXPR_STATEMENT	205:16	205:35	5	_TIFFfree ( filelist ) ;
EXPR	205:16	205:16	6	_TIFFfree ( filelist )
FUNCTION_CALL	205:16	205:34	7	_TIFFfree ( filelist )
CALLEE	205:16	205:16	8	_TIFFfree
LEAF_NODE	205:16	205:16	9	_TIFFfree
LEAF_NODE	205:25	205:25	8	(
ARGUMENT	205:26	205:26	8	filelist
FIELD	205:26	205:26	9	filelist
LEAF_NODE	205:26	205:26	10	filelist
LEAF_NODE	205:34	205:34	8	)
LEAF_NODE	205:35	205:35	6	;
SELECTION	206:8	207:16	3	
KEYWORD	206:8	206:8	4	if
LEAF_NODE	206:8	206:8	5	if
LEAF_NODE	206:11	206:11	4	(
CONDITION	206:12	206:12	4	raster != NULL
EXPR	206:12	206:22	5	raster != NULL
FIELD	206:12	206:12	6	raster
LEAF_NODE	206:12	206:12	7	raster
EQ_OPERATOR	206:19	206:19	6	!=
LEAF_NODE	206:19	206:19	7	!=
FIELD	206:22	206:22	6	NULL
LEAF_NODE	206:22	206:22	7	NULL
LEAF_NODE	206:26	206:26	4	)
STATEMENTS	207:16	207:16	4	
EXPR_STATEMENT	207:16	207:33	5	_TIFFfree ( raster ) ;
EXPR	207:16	207:16	6	_TIFFfree ( raster )
FUNCTION_CALL	207:16	207:32	7	_TIFFfree ( raster )
CALLEE	207:16	207:16	8	_TIFFfree
LEAF_NODE	207:16	207:16	9	_TIFFfree
LEAF_NODE	207:25	207:25	8	(
ARGUMENT	207:26	207:26	8	raster
FIELD	207:26	207:26	9	raster
LEAF_NODE	207:26	207:26	10	raster
LEAF_NODE	207:32	207:32	8	)
LEAF_NODE	207:33	207:33	6	;
SELECTION	208:8	209:16	3	
KEYWORD	208:8	208:8	4	if
LEAF_NODE	208:8	208:8	5	if
LEAF_NODE	208:11	208:11	4	(
CONDITION	208:12	208:12	4	tif != NULL
EXPR	208:12	208:19	5	tif != NULL
FIELD	208:12	208:12	6	tif
LEAF_NODE	208:12	208:12	7	tif
EQ_OPERATOR	208:16	208:16	6	!=
LEAF_NODE	208:16	208:16	7	!=
FIELD	208:19	208:19	6	NULL
LEAF_NODE	208:19	208:19	7	NULL
LEAF_NODE	208:23	208:23	4	)
STATEMENTS	209:16	209:16	4	
EXPR_STATEMENT	209:16	209:30	5	TIFFClose ( tif ) ;
EXPR	209:16	209:16	6	TIFFClose ( tif )
FUNCTION_CALL	209:16	209:29	7	TIFFClose ( tif )
CALLEE	209:16	209:16	8	TIFFClose
LEAF_NODE	209:16	209:16	9	TIFFClose
LEAF_NODE	209:25	209:25	8	(
ARGUMENT	209:26	209:26	8	tif
FIELD	209:26	209:26	9	tif
LEAF_NODE	209:26	209:26	10	tif
LEAF_NODE	209:29	209:29	8	)
LEAF_NODE	209:30	209:30	6	;
EXPR_STATEMENT	210:8	210:15	3	exit ( 0 ) ;
EXPR	210:8	210:8	4	exit ( 0 )
FUNCTION_CALL	210:8	210:14	5	exit ( 0 )
CALLEE	210:8	210:8	6	exit
LEAF_NODE	210:8	210:8	7	exit
LEAF_NODE	210:12	210:12	6	(
ARGUMENT	210:13	210:13	6	0
FIELD	210:13	210:13	7	0
LEAF_NODE	210:13	210:13	8	0
LEAF_NODE	210:14	210:14	6	)
LEAF_NODE	210:15	210:15	4	;
LEAF_NODE	211:0	211:0	2	}
FUNCTION_DEF	213:0	263:0	1	
RETURN_TYPE	213:0	213:7	2	static int
LEAF_NODE	213:0	213:0	3	static
TYPE_NAME	213:7	213:7	3	int
LEAF_NODE	213:7	213:7	4	int
FUNCTION_NAME	214:0	214:0	2	initImage
LEAF_NODE	214:0	214:0	3	initImage
PARAMETER_LIST	214:9	214:14	2	( void )
LEAF_NODE	214:9	214:9	3	(
PARAMETER_DECL	214:10	214:10	3	void
LEAF_NODE	214:10	214:10	4	void
LEAF_NODE	214:14	214:14	3	)
LEAF_NODE	215:0	215:0	2	{
STATEMENTS	216:8	262:1	2	
SIMPLE_DECL	216:8	216:19	3	uint32 w , uint32 h ;
INIT_DECL_LIST	216:8	216:8	4	uint32 w , uint32 h
VAR_DECL	216:8	216:15	5	uint32 w
TYPE	216:8	216:8	6	uint32
TYPE_NAME	216:8	216:8	7	uint32
LEAF_NODE	216:8	216:8	8	uint32
NAME	216:15	216:15	6	w
LEAF_NODE	216:15	216:15	7	w
LEAF_NODE	216:16	216:16	5	,
VAR_DECL	216:8	216:18	5	uint32 h
TYPE	216:8	216:8	6	uint32
TYPE_NAME	216:8	216:8	7	uint32
LEAF_NODE	216:8	216:8	8	uint32
NAME	216:18	216:18	6	h
LEAF_NODE	216:18	216:18	7	h
LEAF_NODE	216:19	216:19	4	;
SELECTION	218:8	219:16	3	
KEYWORD	218:8	218:8	4	if
LEAF_NODE	218:8	218:8	5	if
LEAF_NODE	218:11	218:11	4	(
CONDITION	218:12	218:12	4	order
EXPR	218:12	218:12	5	order
FIELD	218:12	218:12	6	order
LEAF_NODE	218:12	218:12	7	order
LEAF_NODE	218:17	218:17	4	)
STATEMENTS	219:16	219:16	4	
EXPR_STATEMENT	219:16	219:59	5	TIFFSetField ( tif , TIFFTAG_FILLORDER , order ) ;
EXPR	219:16	219:16	6	TIFFSetField ( tif , TIFFTAG_FILLORDER , order )
FUNCTION_CALL	219:16	219:58	7	TIFFSetField ( tif , TIFFTAG_FILLORDER , order )
CALLEE	219:16	219:16	8	TIFFSetField
LEAF_NODE	219:16	219:16	9	TIFFSetField
LEAF_NODE	219:28	219:28	8	(
ARGUMENT	219:29	219:29	8	tif
FIELD	219:29	219:29	9	tif
LEAF_NODE	219:29	219:29	10	tif
LEAF_NODE	219:32	219:32	8	,
ARGUMENT	219:34	219:34	8	TIFFTAG_FILLORDER
FIELD	219:34	219:34	9	TIFFTAG_FILLORDER
LEAF_NODE	219:34	219:34	10	TIFFTAG_FILLORDER
LEAF_NODE	219:51	219:51	8	,
ARGUMENT	219:53	219:53	8	order
FIELD	219:53	219:53	9	order
LEAF_NODE	219:53	219:53	10	order
LEAF_NODE	219:58	219:58	8	)
LEAF_NODE	219:59	219:59	6	;
SELECTION	220:8	221:16	3	
KEYWORD	220:8	220:8	4	if
LEAF_NODE	220:8	220:8	5	if
LEAF_NODE	220:11	220:11	4	(
CONDITION	220:12	220:12	4	photo != ( uint16 ) - 1
EXPR	220:12	220:30	5	photo != ( uint16 ) - 1
FIELD	220:12	220:12	6	photo
LEAF_NODE	220:12	220:12	7	photo
EQ_OPERATOR	220:18	220:18	6	!=
LEAF_NODE	220:18	220:18	7	!=
LEAF_NODE	220:21	220:21	6	(
TYPE_NAME	220:22	220:22	6	uint16
LEAF_NODE	220:22	220:22	7	uint16
LEAF_NODE	220:28	220:28	6	)
UNARY_EXPR	220:30	220:31	6	- 1
UNARY_OPERATOR	220:30	220:30	7	-
LEAF_NODE	220:30	220:30	8	-
FIELD	220:31	220:31	7	1
LEAF_NODE	220:31	220:31	8	1
LEAF_NODE	220:32	220:32	4	)
STATEMENTS	221:16	221:16	4	
EXPR_STATEMENT	221:16	221:61	5	TIFFSetField ( tif , TIFFTAG_PHOTOMETRIC , photo ) ;
EXPR	221:16	221:16	6	TIFFSetField ( tif , TIFFTAG_PHOTOMETRIC , photo )
FUNCTION_CALL	221:16	221:60	7	TIFFSetField ( tif , TIFFTAG_PHOTOMETRIC , photo )
CALLEE	221:16	221:16	8	TIFFSetField
LEAF_NODE	221:16	221:16	9	TIFFSetField
LEAF_NODE	221:28	221:28	8	(
ARGUMENT	221:29	221:29	8	tif
FIELD	221:29	221:29	9	tif
LEAF_NODE	221:29	221:29	10	tif
LEAF_NODE	221:32	221:32	8	,
ARGUMENT	221:34	221:34	8	TIFFTAG_PHOTOMETRIC
FIELD	221:34	221:34	9	TIFFTAG_PHOTOMETRIC
LEAF_NODE	221:34	221:34	10	TIFFTAG_PHOTOMETRIC
LEAF_NODE	221:53	221:53	8	,
ARGUMENT	221:55	221:55	8	photo
FIELD	221:55	221:55	9	photo
LEAF_NODE	221:55	221:55	10	photo
LEAF_NODE	221:60	221:60	8	)
LEAF_NODE	221:61	221:61	6	;
SELECTION	222:8	222:62	3	
KEYWORD	222:8	222:8	4	if
LEAF_NODE	222:8	222:8	5	if
LEAF_NODE	222:11	222:11	4	(
CONDITION	222:12	222:12	4	! TIFFRGBAImageBegin ( & img , tif , stoponerr , title )
EXPR	222:12	222:12	5	! TIFFRGBAImageBegin ( & img , tif , stoponerr , title )
UNARY_EXPR	222:12	222:13	6	! TIFFRGBAImageBegin ( & img , tif , stoponerr , title )
UNARY_OPERATOR	222:12	222:12	7	!
LEAF_NODE	222:12	222:12	8	!
FUNCTION_CALL	222:13	222:59	7	TIFFRGBAImageBegin ( & img , tif , stoponerr , title )
CALLEE	222:13	222:13	8	TIFFRGBAImageBegin
LEAF_NODE	222:13	222:13	9	TIFFRGBAImageBegin
LEAF_NODE	222:31	222:31	8	(
ARGUMENT	222:32	222:32	8	& img
UNARY_EXPR	222:32	222:33	9	& img
UNARY_OPERATOR	222:32	222:32	10	&
LEAF_NODE	222:32	222:32	11	&
FIELD	222:33	222:33	10	img
LEAF_NODE	222:33	222:33	11	img
LEAF_NODE	222:36	222:36	8	,
ARGUMENT	222:38	222:38	8	tif
FIELD	222:38	222:38	9	tif
LEAF_NODE	222:38	222:38	10	tif
LEAF_NODE	222:41	222:41	8	,
ARGUMENT	222:43	222:43	8	stoponerr
FIELD	222:43	222:43	9	stoponerr
LEAF_NODE	222:43	222:43	10	stoponerr
LEAF_NODE	222:52	222:52	8	,
ARGUMENT	222:54	222:54	8	title
FIELD	222:54	222:54	9	title
LEAF_NODE	222:54	222:54	10	title
LEAF_NODE	222:59	222:59	8	)
LEAF_NODE	222:60	222:60	4	)
STATEMENTS	222:62	227:8	4	
LEAF_NODE	222:62	222:62	5	{
STATEMENTS	223:16	226:16	5	
EXPR_STATEMENT	223:16	223:59	6	TIFFError ( filelist [ fileindex ] , "%s" , title ) ;
EXPR	223:16	223:16	7	TIFFError ( filelist [ fileindex ] , "%s" , title )
FUNCTION_CALL	223:16	223:58	8	TIFFError ( filelist [ fileindex ] , "%s" , title )
CALLEE	223:16	223:16	9	TIFFError
LEAF_NODE	223:16	223:16	10	TIFFError
LEAF_NODE	223:25	223:25	9	(
ARGUMENT	223:26	223:26	9	filelist [ fileindex ]
FIELD	223:26	223:44	10	filelist [ fileindex ]
LEAF_NODE	223:26	223:26	11	filelist
LEAF_NODE	223:34	223:34	11	[
EXPR	223:35	223:35	11	fileindex
FIELD	223:35	223:35	12	fileindex
LEAF_NODE	223:35	223:35	13	fileindex
LEAF_NODE	223:44	223:44	11	]
LEAF_NODE	223:45	223:45	9	,
ARGUMENT	223:47	223:47	9	"%s"
FIELD	223:47	223:47	10	"%s"
LEAF_NODE	223:47	223:47	11	"%s"
LEAF_NODE	223:51	223:51	9	,
ARGUMENT	223:53	223:53	9	title
FIELD	223:53	223:53	10	title
LEAF_NODE	223:53	223:53	11	title
LEAF_NODE	223:58	223:58	9	)
LEAF_NODE	223:59	223:59	7	;
EXPR_STATEMENT	224:16	224:30	6	TIFFClose ( tif ) ;
EXPR	224:16	224:16	7	TIFFClose ( tif )
FUNCTION_CALL	224:16	224:29	8	TIFFClose ( tif )
CALLEE	224:16	224:16	9	TIFFClose
LEAF_NODE	224:16	224:16	10	TIFFClose
LEAF_NODE	224:25	224:25	9	(
ARGUMENT	224:26	224:26	9	tif
FIELD	224:26	224:26	10	tif
LEAF_NODE	224:26	224:26	11	tif
LEAF_NODE	224:29	224:29	9	)
LEAF_NODE	224:30	224:30	7	;
EXPR_STATEMENT	225:16	225:26	6	tif = NULL ;
EXPR	225:16	225:16	7	tif = NULL
ASSIGN	225:16	225:22	8	tif = NULL
LVAL	225:16	225:16	9	tif
FIELD	225:16	225:16	10	tif
LEAF_NODE	225:16	225:16	11	tif
ASSIGN_OP	225:20	225:20	9	=
LEAF_NODE	225:20	225:20	10	=
RVAL	225:22	225:22	9	NULL
FIELD	225:22	225:22	10	NULL
LEAF_NODE	225:22	225:22	11	NULL
LEAF_NODE	225:26	225:26	7	;
JUMP_STATEMENT	226:16	226:25	6	return - 1 ;
KEYWORD	226:16	226:16	7	return
LEAF_NODE	226:16	226:16	8	return
DESTINATION	226:23	226:23	7	- 1
EXPR	226:23	226:23	8	- 1
UNARY_EXPR	226:23	226:24	9	- 1
UNARY_OPERATOR	226:23	226:23	10	-
LEAF_NODE	226:23	226:23	11	-
FIELD	226:24	226:24	10	1
LEAF_NODE	226:24	226:24	11	1
LEAF_NODE	226:25	226:25	7	;
LEAF_NODE	227:8	227:8	5	}
EXPR_STATEMENT	232:8	232:22	3	h = img . height ;
EXPR	232:8	232:8	4	h = img . height
ASSIGN	232:8	232:12	5	h = img . height
LVAL	232:8	232:8	6	h
FIELD	232:8	232:8	7	h
LEAF_NODE	232:8	232:8	8	h
ASSIGN_OP	232:10	232:10	6	=
LEAF_NODE	232:10	232:10	7	=
RVAL	232:12	232:12	6	img . height
FIELD	232:12	232:16	7	img . height
LEAF_NODE	232:12	232:12	8	img
LEAF_NODE	232:15	232:15	8	.
LEAF_NODE	232:16	232:16	8	height
LEAF_NODE	232:22	232:22	4	;
EXPR_STATEMENT	233:8	233:21	3	w = img . width ;
EXPR	233:8	233:8	4	w = img . width
ASSIGN	233:8	233:12	5	w = img . width
LVAL	233:8	233:8	6	w
FIELD	233:8	233:8	7	w
LEAF_NODE	233:8	233:8	8	w
ASSIGN_OP	233:10	233:10	6	=
LEAF_NODE	233:10	233:10	7	=
RVAL	233:12	233:12	6	img . width
FIELD	233:12	233:16	7	img . width
LEAF_NODE	233:12	233:12	8	img
LEAF_NODE	233:15	233:15	8	.
LEAF_NODE	233:16	233:16	8	width
LEAF_NODE	233:21	233:21	4	;
SELECTION	234:8	234:22	3	
KEYWORD	234:8	234:8	4	if
LEAF_NODE	234:8	234:8	5	if
LEAF_NODE	234:11	234:11	4	(
CONDITION	234:12	234:12	4	h > ymax
EXPR	234:12	234:16	5	h > ymax
FIELD	234:12	234:12	6	h
LEAF_NODE	234:12	234:12	7	h
REL_OPERATOR	234:14	234:14	6	>
LEAF_NODE	234:14	234:14	7	>
FIELD	234:16	234:16	6	ymax
LEAF_NODE	234:16	234:16	7	ymax
LEAF_NODE	234:20	234:20	4	)
STATEMENTS	234:22	237:8	4	
LEAF_NODE	234:22	234:22	5	{
STATEMENTS	235:16	236:16	5	
EXPR_STATEMENT	235:16	235:48	6	w = ( int ) ( w * ( ( float ) ymax / h ) ) ;
EXPR	235:16	235:16	7	w = ( int ) ( w * ( ( float ) ymax / h ) )
ASSIGN	235:16	235:20	8	w = ( int ) ( w * ( ( float ) ymax / h ) )
LVAL	235:16	235:16	9	w
FIELD	235:16	235:16	10	w
LEAF_NODE	235:16	235:16	11	w
ASSIGN_OP	235:18	235:18	9	=
LEAF_NODE	235:18	235:18	10	=
RVAL	235:20	235:47	9	( int ) ( w * ( ( float ) ymax / h ) )
LEAF_NODE	235:20	235:20	10	(
TYPE_NAME	235:21	235:21	10	int
LEAF_NODE	235:21	235:21	11	int
LEAF_NODE	235:24	235:24	10	)
LEAF_NODE	235:25	235:25	10	(
FIELD	235:26	235:26	10	w
LEAF_NODE	235:26	235:26	11	w
LEAF_NODE	235:28	235:28	10	*
LEAF_NODE	235:30	235:30	10	(
LEAF_NODE	235:31	235:31	10	(
TYPE_NAME	235:32	235:32	10	float
LEAF_NODE	235:32	235:32	11	float
LEAF_NODE	235:37	235:37	10	)
FIELD	235:38	235:38	10	ymax
LEAF_NODE	235:38	235:38	11	ymax
LEAF_NODE	235:43	235:43	10	/
FIELD	235:45	235:45	10	h
LEAF_NODE	235:45	235:45	11	h
LEAF_NODE	235:46	235:46	10	)
LEAF_NODE	235:47	235:47	10	)
LEAF_NODE	235:48	235:48	7	;
EXPR_STATEMENT	236:16	236:24	6	h = ymax ;
EXPR	236:16	236:16	7	h = ymax
ASSIGN	236:16	236:20	8	h = ymax
LVAL	236:16	236:16	9	h
FIELD	236:16	236:16	10	h
LEAF_NODE	236:16	236:16	11	h
ASSIGN_OP	236:18	236:18	9	=
LEAF_NODE	236:18	236:18	10	=
RVAL	236:20	236:20	9	ymax
FIELD	236:20	236:20	10	ymax
LEAF_NODE	236:20	236:20	11	ymax
LEAF_NODE	236:24	236:24	7	;
LEAF_NODE	237:8	237:8	5	}
SELECTION	238:8	238:22	3	
KEYWORD	238:8	238:8	4	if
LEAF_NODE	238:8	238:8	5	if
LEAF_NODE	238:11	238:11	4	(
CONDITION	238:12	238:12	4	w > xmax
EXPR	238:12	238:16	5	w > xmax
FIELD	238:12	238:12	6	w
LEAF_NODE	238:12	238:12	7	w
REL_OPERATOR	238:14	238:14	6	>
LEAF_NODE	238:14	238:14	7	>
FIELD	238:16	238:16	6	xmax
LEAF_NODE	238:16	238:16	7	xmax
LEAF_NODE	238:20	238:20	4	)
STATEMENTS	238:22	241:8	4	
LEAF_NODE	238:22	238:22	5	{
STATEMENTS	239:16	240:16	5	
EXPR_STATEMENT	239:16	239:48	6	h = ( int ) ( h * ( ( float ) xmax / w ) ) ;
EXPR	239:16	239:16	7	h = ( int ) ( h * ( ( float ) xmax / w ) )
ASSIGN	239:16	239:20	8	h = ( int ) ( h * ( ( float ) xmax / w ) )
LVAL	239:16	239:16	9	h
FIELD	239:16	239:16	10	h
LEAF_NODE	239:16	239:16	11	h
ASSIGN_OP	239:18	239:18	9	=
LEAF_NODE	239:18	239:18	10	=
RVAL	239:20	239:47	9	( int ) ( h * ( ( float ) xmax / w ) )
LEAF_NODE	239:20	239:20	10	(
TYPE_NAME	239:21	239:21	10	int
LEAF_NODE	239:21	239:21	11	int
LEAF_NODE	239:24	239:24	10	)
LEAF_NODE	239:25	239:25	10	(
FIELD	239:26	239:26	10	h
LEAF_NODE	239:26	239:26	11	h
LEAF_NODE	239:28	239:28	10	*
LEAF_NODE	239:30	239:30	10	(
LEAF_NODE	239:31	239:31	10	(
TYPE_NAME	239:32	239:32	10	float
LEAF_NODE	239:32	239:32	11	float
LEAF_NODE	239:37	239:37	10	)
FIELD	239:38	239:38	10	xmax
LEAF_NODE	239:38	239:38	11	xmax
LEAF_NODE	239:43	239:43	10	/
FIELD	239:45	239:45	10	w
LEAF_NODE	239:45	239:45	11	w
LEAF_NODE	239:46	239:46	10	)
LEAF_NODE	239:47	239:47	10	)
LEAF_NODE	239:48	239:48	7	;
EXPR_STATEMENT	240:16	240:24	6	w = xmax ;
EXPR	240:16	240:16	7	w = xmax
ASSIGN	240:16	240:20	8	w = xmax
LVAL	240:16	240:16	9	w
FIELD	240:16	240:16	10	w
LEAF_NODE	240:16	240:16	11	w
ASSIGN_OP	240:18	240:18	9	=
LEAF_NODE	240:18	240:18	10	=
RVAL	240:20	240:20	9	xmax
FIELD	240:20	240:20	10	xmax
LEAF_NODE	240:20	240:20	11	xmax
LEAF_NODE	240:24	240:24	7	;
LEAF_NODE	241:8	241:8	5	}
SELECTION	243:1	243:32	3	
KEYWORD	243:1	243:1	4	if
LEAF_NODE	243:1	243:1	5	if
LEAF_NODE	243:4	243:4	4	(
CONDITION	243:5	243:5	4	w != width || h != height
EXPR	243:5	243:5	5	w != width || h != height
OR	243:5	243:19	6	w != width || h != height
EXPR	243:5	243:10	7	w != width
FIELD	243:5	243:5	8	w
LEAF_NODE	243:5	243:5	9	w
EQ_OPERATOR	243:7	243:7	8	!=
LEAF_NODE	243:7	243:7	9	!=
FIELD	243:10	243:10	8	width
LEAF_NODE	243:10	243:10	9	width
LEAF_NODE	243:16	243:16	7	||
EXPR	243:19	243:24	7	h != height
FIELD	243:19	243:19	8	h
LEAF_NODE	243:19	243:19	9	h
EQ_OPERATOR	243:21	243:21	8	!=
LEAF_NODE	243:21	243:21	9	!=
FIELD	243:24	243:24	8	height
LEAF_NODE	243:24	243:24	9	height
LEAF_NODE	243:30	243:30	4	)
STATEMENTS	243:32	257:1	4	
LEAF_NODE	243:32	243:32	5	{
STATEMENTS	244:2	256:2	5	
SIMPLE_DECL	244:2	245:74	6	uint32 rastersize ; rastersize = _TIFFMultiply32 ( tif , img . width , img . height , "allocating raster buffer" ) ;
VAR_DECL	244:2	244:9	7	uint32 rastersize ; rastersize = _TIFFMultiply32 ( tif , img . width , img . height , "allocating raster buffer" )
TYPE	244:2	244:2	8	uint32
TYPE_NAME	244:2	244:2	9	uint32
LEAF_NODE	244:2	244:2	10	uint32
NAME	244:9	244:9	8	rastersize
LEAF_NODE	244:9	244:9	9	rastersize
LEAF_NODE	0:0	0:0	8	;
INIT	244:9	244:9	8	rastersize = _TIFFMultiply32 ( tif , img . width , img . height , "allocating raster buffer" )
ASSIGN	244:9	245:3	9	rastersize = _TIFFMultiply32 ( tif , img . width , img . height , "allocating raster buffer" )
LVAL	244:9	244:9	10	rastersize
NAME	244:9	244:9	11	rastersize
LEAF_NODE	244:9	244:9	12	rastersize
ASSIGN_OP	244:20	244:20	10	=
LEAF_NODE	244:20	244:20	11	=
RVAL	245:3	245:3	10	_TIFFMultiply32 ( tif , img . width , img . height , "allocating raster buffer" )
FUNCTION_CALL	245:3	245:73	11	_TIFFMultiply32 ( tif , img . width , img . height , "allocating raster buffer" )
CALLEE	245:3	245:3	12	_TIFFMultiply32
LEAF_NODE	245:3	245:3	13	_TIFFMultiply32
LEAF_NODE	245:18	245:18	12	(
ARGUMENT	245:19	245:19	12	tif
FIELD	245:19	245:19	13	tif
LEAF_NODE	245:19	245:19	14	tif
LEAF_NODE	245:22	245:22	12	,
ARGUMENT	245:24	245:24	12	img . width
FIELD	245:24	245:28	13	img . width
LEAF_NODE	245:24	245:24	14	img
LEAF_NODE	245:27	245:27	14	.
LEAF_NODE	245:28	245:28	14	width
LEAF_NODE	245:33	245:33	12	,
ARGUMENT	245:35	245:35	12	img . height
FIELD	245:35	245:39	13	img . height
LEAF_NODE	245:35	245:35	14	img
LEAF_NODE	245:38	245:38	14	.
LEAF_NODE	245:39	245:39	14	height
LEAF_NODE	245:45	245:45	12	,
ARGUMENT	245:47	245:47	12	"allocating raster buffer"
FIELD	245:47	245:47	13	"allocating raster buffer"
LEAF_NODE	245:47	245:47	14	"allocating raster buffer"
LEAF_NODE	245:73	245:73	12	)
LEAF_NODE	245:74	245:74	7	;
SELECTION	246:2	247:3	6	
KEYWORD	246:2	246:2	7	if
LEAF_NODE	246:2	246:2	8	if
LEAF_NODE	246:5	246:5	7	(
CONDITION	246:6	246:6	7	raster != NULL
EXPR	246:6	246:16	8	raster != NULL
FIELD	246:6	246:6	9	raster
LEAF_NODE	246:6	246:6	10	raster
EQ_OPERATOR	246:13	246:13	9	!=
LEAF_NODE	246:13	246:13	10	!=
FIELD	246:16	246:16	9	NULL
LEAF_NODE	246:16	246:16	10	NULL
LEAF_NODE	246:20	246:20	7	)
STATEMENTS	247:3	247:3	7	
EXPR_STATEMENT	247:3	247:35	8	_TIFFfree ( raster ) , raster = NULL ;
EXPR	247:3	247:22	9	_TIFFfree ( raster ) , raster = NULL
FUNCTION_CALL	247:3	247:19	10	_TIFFfree ( raster )
CALLEE	247:3	247:3	11	_TIFFfree
LEAF_NODE	247:3	247:3	12	_TIFFfree
LEAF_NODE	247:12	247:12	11	(
ARGUMENT	247:13	247:13	11	raster
FIELD	247:13	247:13	12	raster
LEAF_NODE	247:13	247:13	13	raster
LEAF_NODE	247:19	247:19	11	)
LEAF_NODE	247:20	247:20	10	,
ASSIGN	247:22	247:31	10	raster = NULL
LVAL	247:22	247:22	11	raster
FIELD	247:22	247:22	12	raster
LEAF_NODE	247:22	247:22	13	raster
ASSIGN_OP	247:29	247:29	11	=
LEAF_NODE	247:29	247:29	12	=
RVAL	247:31	247:31	11	NULL
FIELD	247:31	247:31	12	NULL
LEAF_NODE	247:31	247:31	13	NULL
LEAF_NODE	247:35	247:35	9	;
EXPR_STATEMENT	248:2	249:37	6	raster = ( uint32 * ) _TIFFCheckMalloc ( tif , rastersize , sizeof ( uint32 ) , "allocating raster buffer" ) ;
EXPR	248:2	248:2	7	raster = ( uint32 * ) _TIFFCheckMalloc ( tif , rastersize , sizeof ( uint32 ) , "allocating raster buffer" )
ASSIGN	248:2	248:11	8	raster = ( uint32 * ) _TIFFCheckMalloc ( tif , rastersize , sizeof ( uint32 ) , "allocating raster buffer" )
LVAL	248:2	248:2	9	raster
FIELD	248:2	248:2	10	raster
LEAF_NODE	248:2	248:2	11	raster
ASSIGN_OP	248:9	248:9	9	=
LEAF_NODE	248:9	248:9	10	=
RVAL	248:11	248:21	9	( uint32 * ) _TIFFCheckMalloc ( tif , rastersize , sizeof ( uint32 ) , "allocating raster buffer" )
LEAF_NODE	248:11	248:11	10	(
TYPE_NAME	248:12	248:12	10	uint32
LEAF_NODE	248:12	248:12	11	uint32
LEAF_NODE	248:18	248:18	10	*
LEAF_NODE	248:19	248:19	10	)
FUNCTION_CALL	248:21	249:36	10	_TIFFCheckMalloc ( tif , rastersize , sizeof ( uint32 ) , "allocating raster buffer" )
CALLEE	248:21	248:21	11	_TIFFCheckMalloc
LEAF_NODE	248:21	248:21	12	_TIFFCheckMalloc
LEAF_NODE	248:37	248:37	11	(
ARGUMENT	248:38	248:38	11	tif
FIELD	248:38	248:38	12	tif
LEAF_NODE	248:38	248:38	13	tif
LEAF_NODE	248:41	248:41	11	,
ARGUMENT	248:43	248:43	11	rastersize
FIELD	248:43	248:43	12	rastersize
LEAF_NODE	248:43	248:43	13	rastersize
LEAF_NODE	248:53	248:53	11	,
ARGUMENT	248:55	248:55	11	sizeof ( uint32 )
FUNCTION_CALL	248:55	248:69	12	sizeof ( uint32 )
CALLEE	248:55	248:55	13	sizeof
LEAF_NODE	248:55	248:55	14	sizeof
LEAF_NODE	248:62	248:62	13	(
ARGUMENT	248:63	248:63	13	uint32
FIELD	248:63	248:63	14	uint32
LEAF_NODE	248:63	248:63	15	uint32
LEAF_NODE	248:69	248:69	13	)
LEAF_NODE	248:70	248:70	11	,
ARGUMENT	249:10	249:10	11	"allocating raster buffer"
FIELD	249:10	249:10	12	"allocating raster buffer"
LEAF_NODE	249:10	249:10	13	"allocating raster buffer"
LEAF_NODE	249:36	249:36	11	)
LEAF_NODE	249:37	249:37	7	;
SELECTION	250:2	250:22	6	
KEYWORD	250:2	250:2	7	if
LEAF_NODE	250:2	250:2	8	if
LEAF_NODE	250:5	250:5	7	(
CONDITION	250:6	250:6	7	raster == NULL
EXPR	250:6	250:16	8	raster == NULL
FIELD	250:6	250:6	9	raster
LEAF_NODE	250:6	250:6	10	raster
EQ_OPERATOR	250:13	250:13	9	==
LEAF_NODE	250:13	250:13	10	==
FIELD	250:16	250:16	9	NULL
LEAF_NODE	250:16	250:16	10	NULL
LEAF_NODE	250:20	250:20	7	)
STATEMENTS	250:22	254:2	7	
LEAF_NODE	250:22	250:22	8	{
STATEMENTS	251:3	253:3	8	
EXPR_STATEMENT	251:3	251:21	9	width = height = 0 ;
EXPR	251:3	251:3	10	width = height = 0
ASSIGN	251:3	251:11	11	width = height = 0
LVAL	251:3	251:3	12	width
FIELD	251:3	251:3	13	width
LEAF_NODE	251:3	251:3	14	width
ASSIGN_OP	251:9	251:9	12	=
LEAF_NODE	251:9	251:9	13	=
RVAL	251:11	251:11	12	height = 0
ASSIGN	251:11	251:20	13	height = 0
LVAL	251:11	251:11	14	height
FIELD	251:11	251:11	15	height
LEAF_NODE	251:11	251:11	16	height
ASSIGN_OP	251:18	251:18	14	=
LEAF_NODE	251:18	251:18	15	=
RVAL	251:20	251:20	14	0
FIELD	251:20	251:20	15	0
LEAF_NODE	251:20	251:20	16	0
LEAF_NODE	251:21	251:21	10	;
EXPR_STATEMENT	252:3	252:63	9	TIFFError ( filelist [ fileindex ] , "No space for raster buffer" ) ;
EXPR	252:3	252:3	10	TIFFError ( filelist [ fileindex ] , "No space for raster buffer" )
FUNCTION_CALL	252:3	252:62	11	TIFFError ( filelist [ fileindex ] , "No space for raster buffer" )
CALLEE	252:3	252:3	12	TIFFError
LEAF_NODE	252:3	252:3	13	TIFFError
LEAF_NODE	252:12	252:12	12	(
ARGUMENT	252:13	252:13	12	filelist [ fileindex ]
FIELD	252:13	252:31	13	filelist [ fileindex ]
LEAF_NODE	252:13	252:13	14	filelist
LEAF_NODE	252:21	252:21	14	[
EXPR	252:22	252:22	14	fileindex
FIELD	252:22	252:22	15	fileindex
LEAF_NODE	252:22	252:22	16	fileindex
LEAF_NODE	252:31	252:31	14	]
LEAF_NODE	252:32	252:32	12	,
ARGUMENT	252:34	252:34	12	"No space for raster buffer"
FIELD	252:34	252:34	13	"No space for raster buffer"
LEAF_NODE	252:34	252:34	14	"No space for raster buffer"
LEAF_NODE	252:62	252:62	12	)
LEAF_NODE	252:63	252:63	10	;
EXPR_STATEMENT	253:3	253:21	9	cleanup_and_exit ( ) ;
EXPR	253:3	253:3	10	cleanup_and_exit ( )
FUNCTION_CALL	253:3	253:20	11	cleanup_and_exit ( )
CALLEE	253:3	253:3	12	cleanup_and_exit
LEAF_NODE	253:3	253:3	13	cleanup_and_exit
LEAF_NODE	253:19	253:19	12	(
LEAF_NODE	253:20	253:20	12	)
LEAF_NODE	253:21	253:21	10	;
LEAF_NODE	254:2	254:2	8	}
EXPR_STATEMENT	255:2	255:11	6	width = w ;
EXPR	255:2	255:2	7	width = w
ASSIGN	255:2	255:10	8	width = w
LVAL	255:2	255:2	9	width
FIELD	255:2	255:2	10	width
LEAF_NODE	255:2	255:2	11	width
ASSIGN_OP	255:8	255:8	9	=
LEAF_NODE	255:8	255:8	10	=
RVAL	255:10	255:10	9	w
FIELD	255:10	255:10	10	w
LEAF_NODE	255:10	255:10	11	w
LEAF_NODE	255:11	255:11	7	;
EXPR_STATEMENT	256:2	256:12	6	height = h ;
EXPR	256:2	256:2	7	height = h
ASSIGN	256:2	256:11	8	height = h
LVAL	256:2	256:2	9	height
FIELD	256:2	256:2	10	height
LEAF_NODE	256:2	256:2	11	height
ASSIGN_OP	256:9	256:9	9	=
LEAF_NODE	256:9	256:9	10	=
RVAL	256:11	256:11	9	h
FIELD	256:11	256:11	10	h
LEAF_NODE	256:11	256:11	11	h
LEAF_NODE	256:12	256:12	7	;
LEAF_NODE	257:1	257:1	5	}
EXPR_STATEMENT	258:1	258:54	3	TIFFRGBAImageGet ( & img , raster , img . width , img . height ) ;
EXPR	258:1	258:1	4	TIFFRGBAImageGet ( & img , raster , img . width , img . height )
FUNCTION_CALL	258:1	258:53	5	TIFFRGBAImageGet ( & img , raster , img . width , img . height )
CALLEE	258:1	258:1	6	TIFFRGBAImageGet
LEAF_NODE	258:1	258:1	7	TIFFRGBAImageGet
LEAF_NODE	258:17	258:17	6	(
ARGUMENT	258:18	258:18	6	& img
UNARY_EXPR	258:18	258:19	7	& img
UNARY_OPERATOR	258:18	258:18	8	&
LEAF_NODE	258:18	258:18	9	&
FIELD	258:19	258:19	8	img
LEAF_NODE	258:19	258:19	9	img
LEAF_NODE	258:22	258:22	6	,
ARGUMENT	258:24	258:24	6	raster
FIELD	258:24	258:24	7	raster
LEAF_NODE	258:24	258:24	8	raster
LEAF_NODE	258:30	258:30	6	,
ARGUMENT	258:32	258:32	6	img . width
FIELD	258:32	258:36	7	img . width
LEAF_NODE	258:32	258:32	8	img
LEAF_NODE	258:35	258:35	8	.
LEAF_NODE	258:36	258:36	8	width
LEAF_NODE	258:41	258:41	6	,
ARGUMENT	258:43	258:43	6	img . height
FIELD	258:43	258:47	7	img . height
LEAF_NODE	258:43	258:43	8	img
LEAF_NODE	258:46	258:46	8	.
LEAF_NODE	258:47	258:47	8	height
LEAF_NODE	258:53	258:53	6	)
LEAF_NODE	258:54	258:54	4	;
EXPR_STATEMENT	260:1	260:49	3	TIFFSwabArrayOfLong ( raster , img . width * img . height ) ;
EXPR	260:1	260:1	4	TIFFSwabArrayOfLong ( raster , img . width * img . height )
FUNCTION_CALL	260:1	260:48	5	TIFFSwabArrayOfLong ( raster , img . width * img . height )
CALLEE	260:1	260:1	6	TIFFSwabArrayOfLong
LEAF_NODE	260:1	260:1	7	TIFFSwabArrayOfLong
LEAF_NODE	260:20	260:20	6	(
ARGUMENT	260:21	260:21	6	raster
FIELD	260:21	260:21	7	raster
LEAF_NODE	260:21	260:21	8	raster
LEAF_NODE	260:27	260:27	6	,
ARGUMENT	260:28	260:38	6	img . width * img . height
FIELD	260:28	260:32	7	img . width
LEAF_NODE	260:28	260:28	8	img
LEAF_NODE	260:31	260:31	8	.
LEAF_NODE	260:32	260:32	8	width
LEAF_NODE	260:37	260:37	7	*
FIELD	260:38	260:42	7	img . height
LEAF_NODE	260:38	260:38	8	img
LEAF_NODE	260:41	260:41	8	.
LEAF_NODE	260:42	260:42	8	height
LEAF_NODE	260:48	260:48	6	)
LEAF_NODE	260:49	260:49	4	;
JUMP_STATEMENT	262:1	262:9	3	return 0 ;
KEYWORD	262:1	262:1	4	return
LEAF_NODE	262:1	262:1	5	return
DESTINATION	262:8	262:8	4	0
EXPR	262:8	262:8	5	0
FIELD	262:8	262:8	6	0
LEAF_NODE	262:8	262:8	7	0
LEAF_NODE	262:9	262:9	4	;
LEAF_NODE	263:0	263:0	2	}
FUNCTION_DEF	265:0	278:0	1	
RETURN_TYPE	265:0	265:7	2	static int
LEAF_NODE	265:0	265:0	3	static
TYPE_NAME	265:7	265:7	3	int
LEAF_NODE	265:7	265:7	4	int
FUNCTION_NAME	266:0	266:0	2	prevImage
LEAF_NODE	266:0	266:0	3	prevImage
PARAMETER_LIST	266:9	266:14	2	( void )
LEAF_NODE	266:9	266:9	3	(
PARAMETER_DECL	266:10	266:10	3	void
LEAF_NODE	266:10	266:10	4	void
LEAF_NODE	266:14	266:14	3	)
LEAF_NODE	267:0	267:0	2	{
STATEMENTS	268:8	277:8	2	
SELECTION	268:8	269:16	3	
KEYWORD	268:8	268:8	4	if
LEAF_NODE	268:8	268:8	5	if
LEAF_NODE	268:11	268:11	4	(
CONDITION	268:12	268:12	4	fileindex > 0
EXPR	268:12	268:24	5	fileindex > 0
FIELD	268:12	268:12	6	fileindex
LEAF_NODE	268:12	268:12	7	fileindex
REL_OPERATOR	268:22	268:22	6	>
LEAF_NODE	268:22	268:22	7	>
FIELD	268:24	268:24	6	0
LEAF_NODE	268:24	268:24	7	0
LEAF_NODE	268:25	268:25	4	)
STATEMENTS	269:16	269:16	4	
EXPR_STATEMENT	269:16	269:27	5	fileindex -- ;
EXPR	269:16	269:16	6	fileindex --
FIELD	269:16	269:25	7	fileindex --
LEAF_NODE	269:16	269:16	8	fileindex
LEAF_NODE	269:25	269:25	8	--
LEAF_NODE	269:27	269:27	6	;
SELECTION	270:8	270:13	3	
KEYWORD	270:8	270:8	4	else
LEAF_NODE	270:8	270:8	5	else
STATEMENTS	270:13	270:13	4	
SELECTION	270:13	271:16	5	
KEYWORD	270:13	270:13	6	if
LEAF_NODE	270:13	270:13	7	if
LEAF_NODE	270:16	270:16	6	(
CONDITION	270:17	270:17	6	tif
EXPR	270:17	270:17	7	tif
FIELD	270:17	270:17	8	tif
LEAF_NODE	270:17	270:17	9	tif
LEAF_NODE	270:20	270:20	6	)
STATEMENTS	271:16	271:16	6	
JUMP_STATEMENT	271:16	271:32	7	return fileindex ;
KEYWORD	271:16	271:16	8	return
LEAF_NODE	271:16	271:16	9	return
DESTINATION	271:23	271:23	8	fileindex
EXPR	271:23	271:23	9	fileindex
FIELD	271:23	271:23	10	fileindex
LEAF_NODE	271:23	271:23	11	fileindex
LEAF_NODE	271:32	271:32	8	;
SELECTION	272:8	273:16	3	
KEYWORD	272:8	272:8	4	if
LEAF_NODE	272:8	272:8	5	if
LEAF_NODE	272:11	272:11	4	(
CONDITION	272:12	272:12	4	tif
EXPR	272:12	272:12	5	tif
FIELD	272:12	272:12	6	tif
LEAF_NODE	272:12	272:12	7	tif
LEAF_NODE	272:15	272:15	4	)
STATEMENTS	273:16	273:16	4	
EXPR_STATEMENT	273:16	273:30	5	TIFFClose ( tif ) ;
EXPR	273:16	273:16	6	TIFFClose ( tif )
FUNCTION_CALL	273:16	273:29	7	TIFFClose ( tif )
CALLEE	273:16	273:16	8	TIFFClose
LEAF_NODE	273:16	273:16	9	TIFFClose
LEAF_NODE	273:25	273:25	8	(
ARGUMENT	273:26	273:26	8	tif
FIELD	273:26	273:26	9	tif
LEAF_NODE	273:26	273:26	10	tif
LEAF_NODE	273:29	273:29	8	)
LEAF_NODE	273:30	273:30	6	;
EXPR_STATEMENT	274:8	274:48	3	tif = TIFFOpen ( filelist [ fileindex ] , "r" ) ;
EXPR	274:8	274:8	4	tif = TIFFOpen ( filelist [ fileindex ] , "r" )
ASSIGN	274:8	274:14	5	tif = TIFFOpen ( filelist [ fileindex ] , "r" )
LVAL	274:8	274:8	6	tif
FIELD	274:8	274:8	7	tif
LEAF_NODE	274:8	274:8	8	tif
ASSIGN_OP	274:12	274:12	6	=
LEAF_NODE	274:12	274:12	7	=
RVAL	274:14	274:14	6	TIFFOpen ( filelist [ fileindex ] , "r" )
FUNCTION_CALL	274:14	274:47	7	TIFFOpen ( filelist [ fileindex ] , "r" )
CALLEE	274:14	274:14	8	TIFFOpen
LEAF_NODE	274:14	274:14	9	TIFFOpen
LEAF_NODE	274:22	274:22	8	(
ARGUMENT	274:23	274:23	8	filelist [ fileindex ]
FIELD	274:23	274:41	9	filelist [ fileindex ]
LEAF_NODE	274:23	274:23	10	filelist
LEAF_NODE	274:31	274:31	10	[
EXPR	274:32	274:32	10	fileindex
FIELD	274:32	274:32	11	fileindex
LEAF_NODE	274:32	274:32	12	fileindex
LEAF_NODE	274:41	274:41	10	]
LEAF_NODE	274:42	274:42	8	,
ARGUMENT	274:44	274:44	8	"r"
FIELD	274:44	274:44	9	"r"
LEAF_NODE	274:44	274:44	10	"r"
LEAF_NODE	274:47	274:47	8	)
LEAF_NODE	274:48	274:48	4	;
SELECTION	275:8	276:16	3	
KEYWORD	275:8	275:8	4	if
LEAF_NODE	275:8	275:8	5	if
LEAF_NODE	275:11	275:11	4	(
CONDITION	275:12	275:12	4	tif == NULL
EXPR	275:12	275:19	5	tif == NULL
FIELD	275:12	275:12	6	tif
LEAF_NODE	275:12	275:12	7	tif
EQ_OPERATOR	275:16	275:16	6	==
LEAF_NODE	275:16	275:16	7	==
FIELD	275:19	275:19	6	NULL
LEAF_NODE	275:19	275:19	7	NULL
LEAF_NODE	275:23	275:23	4	)
STATEMENTS	276:16	276:16	4	
JUMP_STATEMENT	276:16	276:25	5	return - 1 ;
KEYWORD	276:16	276:16	6	return
LEAF_NODE	276:16	276:16	7	return
DESTINATION	276:23	276:23	6	- 1
EXPR	276:23	276:23	7	- 1
UNARY_EXPR	276:23	276:24	8	- 1
UNARY_OPERATOR	276:23	276:23	9	-
LEAF_NODE	276:23	276:23	10	-
FIELD	276:24	276:24	9	1
LEAF_NODE	276:24	276:24	10	1
LEAF_NODE	276:25	276:25	6	;
JUMP_STATEMENT	277:8	277:24	3	return fileindex ;
KEYWORD	277:8	277:8	4	return
LEAF_NODE	277:8	277:8	5	return
DESTINATION	277:15	277:15	4	fileindex
EXPR	277:15	277:15	5	fileindex
FIELD	277:15	277:15	6	fileindex
LEAF_NODE	277:15	277:15	7	fileindex
LEAF_NODE	277:24	277:24	4	;
LEAF_NODE	278:0	278:0	2	}
FUNCTION_DEF	280:0	293:0	1	
RETURN_TYPE	280:0	280:7	2	static int
LEAF_NODE	280:0	280:0	3	static
TYPE_NAME	280:7	280:7	3	int
LEAF_NODE	280:7	280:7	4	int
FUNCTION_NAME	281:0	281:0	2	nextImage
LEAF_NODE	281:0	281:0	3	nextImage
PARAMETER_LIST	281:9	281:14	2	( void )
LEAF_NODE	281:9	281:9	3	(
PARAMETER_DECL	281:10	281:10	3	void
LEAF_NODE	281:10	281:10	4	void
LEAF_NODE	281:14	281:14	3	)
LEAF_NODE	282:0	282:0	2	{
STATEMENTS	283:8	292:8	2	
SELECTION	283:8	284:16	3	
KEYWORD	283:8	283:8	4	if
LEAF_NODE	283:8	283:8	5	if
LEAF_NODE	283:11	283:11	4	(
CONDITION	283:12	283:12	4	fileindex < filenum - 1
EXPR	283:12	283:34	5	fileindex < filenum - 1
FIELD	283:12	283:12	6	fileindex
LEAF_NODE	283:12	283:12	7	fileindex
REL_OPERATOR	283:22	283:22	6	<
LEAF_NODE	283:22	283:22	7	<
FIELD	283:24	283:24	6	filenum
LEAF_NODE	283:24	283:24	7	filenum
LEAF_NODE	283:32	283:32	6	-
FIELD	283:34	283:34	6	1
LEAF_NODE	283:34	283:34	7	1
LEAF_NODE	283:35	283:35	4	)
STATEMENTS	284:16	284:16	4	
EXPR_STATEMENT	284:16	284:27	5	fileindex ++ ;
EXPR	284:16	284:16	6	fileindex ++
FIELD	284:16	284:25	7	fileindex ++
LEAF_NODE	284:16	284:16	8	fileindex
LEAF_NODE	284:25	284:25	8	++
LEAF_NODE	284:27	284:27	6	;
SELECTION	285:8	285:13	3	
KEYWORD	285:8	285:8	4	else
LEAF_NODE	285:8	285:8	5	else
STATEMENTS	285:13	285:13	4	
SELECTION	285:13	286:16	5	
KEYWORD	285:13	285:13	6	if
LEAF_NODE	285:13	285:13	7	if
LEAF_NODE	285:16	285:16	6	(
CONDITION	285:17	285:17	6	tif
EXPR	285:17	285:17	7	tif
FIELD	285:17	285:17	8	tif
LEAF_NODE	285:17	285:17	9	tif
LEAF_NODE	285:20	285:20	6	)
STATEMENTS	286:16	286:16	6	
JUMP_STATEMENT	286:16	286:32	7	return fileindex ;
KEYWORD	286:16	286:16	8	return
LEAF_NODE	286:16	286:16	9	return
DESTINATION	286:23	286:23	8	fileindex
EXPR	286:23	286:23	9	fileindex
FIELD	286:23	286:23	10	fileindex
LEAF_NODE	286:23	286:23	11	fileindex
LEAF_NODE	286:32	286:32	8	;
SELECTION	287:8	288:16	3	
KEYWORD	287:8	287:8	4	if
LEAF_NODE	287:8	287:8	5	if
LEAF_NODE	287:11	287:11	4	(
CONDITION	287:12	287:12	4	tif
EXPR	287:12	287:12	5	tif
FIELD	287:12	287:12	6	tif
LEAF_NODE	287:12	287:12	7	tif
LEAF_NODE	287:15	287:15	4	)
STATEMENTS	288:16	288:16	4	
EXPR_STATEMENT	288:16	288:30	5	TIFFClose ( tif ) ;
EXPR	288:16	288:16	6	TIFFClose ( tif )
FUNCTION_CALL	288:16	288:29	7	TIFFClose ( tif )
CALLEE	288:16	288:16	8	TIFFClose
LEAF_NODE	288:16	288:16	9	TIFFClose
LEAF_NODE	288:25	288:25	8	(
ARGUMENT	288:26	288:26	8	tif
FIELD	288:26	288:26	9	tif
LEAF_NODE	288:26	288:26	10	tif
LEAF_NODE	288:29	288:29	8	)
LEAF_NODE	288:30	288:30	6	;
EXPR_STATEMENT	289:8	289:48	3	tif = TIFFOpen ( filelist [ fileindex ] , "r" ) ;
EXPR	289:8	289:8	4	tif = TIFFOpen ( filelist [ fileindex ] , "r" )
ASSIGN	289:8	289:14	5	tif = TIFFOpen ( filelist [ fileindex ] , "r" )
LVAL	289:8	289:8	6	tif
FIELD	289:8	289:8	7	tif
LEAF_NODE	289:8	289:8	8	tif
ASSIGN_OP	289:12	289:12	6	=
LEAF_NODE	289:12	289:12	7	=
RVAL	289:14	289:14	6	TIFFOpen ( filelist [ fileindex ] , "r" )
FUNCTION_CALL	289:14	289:47	7	TIFFOpen ( filelist [ fileindex ] , "r" )
CALLEE	289:14	289:14	8	TIFFOpen
LEAF_NODE	289:14	289:14	9	TIFFOpen
LEAF_NODE	289:22	289:22	8	(
ARGUMENT	289:23	289:23	8	filelist [ fileindex ]
FIELD	289:23	289:41	9	filelist [ fileindex ]
LEAF_NODE	289:23	289:23	10	filelist
LEAF_NODE	289:31	289:31	10	[
EXPR	289:32	289:32	10	fileindex
FIELD	289:32	289:32	11	fileindex
LEAF_NODE	289:32	289:32	12	fileindex
LEAF_NODE	289:41	289:41	10	]
LEAF_NODE	289:42	289:42	8	,
ARGUMENT	289:44	289:44	8	"r"
FIELD	289:44	289:44	9	"r"
LEAF_NODE	289:44	289:44	10	"r"
LEAF_NODE	289:47	289:47	8	)
LEAF_NODE	289:48	289:48	4	;
SELECTION	290:8	291:16	3	
KEYWORD	290:8	290:8	4	if
LEAF_NODE	290:8	290:8	5	if
LEAF_NODE	290:11	290:11	4	(
CONDITION	290:12	290:12	4	tif == NULL
EXPR	290:12	290:19	5	tif == NULL
FIELD	290:12	290:12	6	tif
LEAF_NODE	290:12	290:12	7	tif
EQ_OPERATOR	290:16	290:16	6	==
LEAF_NODE	290:16	290:16	7	==
FIELD	290:19	290:19	6	NULL
LEAF_NODE	290:19	290:19	7	NULL
LEAF_NODE	290:23	290:23	4	)
STATEMENTS	291:16	291:16	4	
JUMP_STATEMENT	291:16	291:25	5	return - 1 ;
KEYWORD	291:16	291:16	6	return
LEAF_NODE	291:16	291:16	7	return
DESTINATION	291:23	291:23	6	- 1
EXPR	291:23	291:23	7	- 1
UNARY_EXPR	291:23	291:24	8	- 1
UNARY_OPERATOR	291:23	291:23	9	-
LEAF_NODE	291:23	291:23	10	-
FIELD	291:24	291:24	9	1
LEAF_NODE	291:24	291:24	10	1
LEAF_NODE	291:25	291:25	6	;
JUMP_STATEMENT	292:8	292:24	3	return fileindex ;
KEYWORD	292:8	292:8	4	return
LEAF_NODE	292:8	292:8	5	return
DESTINATION	292:15	292:15	4	fileindex
EXPR	292:15	292:15	5	fileindex
FIELD	292:15	292:15	6	fileindex
LEAF_NODE	292:15	292:15	7	fileindex
LEAF_NODE	292:24	292:24	4	;
LEAF_NODE	293:0	293:0	2	}
FUNCTION_DEF	295:0	299:0	1	
RETURN_TYPE	295:0	295:7	2	static void
LEAF_NODE	295:0	295:0	3	static
TYPE_NAME	295:7	295:7	3	void
LEAF_NODE	295:7	295:7	4	void
FUNCTION_NAME	296:0	296:0	2	setWindowSize
LEAF_NODE	296:0	296:0	3	setWindowSize
PARAMETER_LIST	296:13	296:18	2	( void )
LEAF_NODE	296:13	296:13	3	(
PARAMETER_DECL	296:14	296:14	3	void
LEAF_NODE	296:14	296:14	4	void
LEAF_NODE	296:18	296:18	3	)
LEAF_NODE	297:0	297:0	2	{
STATEMENTS	298:8	298:8	2	
EXPR_STATEMENT	298:8	298:40	3	glutReshapeWindow ( width , height ) ;
EXPR	298:8	298:8	4	glutReshapeWindow ( width , height )
FUNCTION_CALL	298:8	298:39	5	glutReshapeWindow ( width , height )
CALLEE	298:8	298:8	6	glutReshapeWindow
LEAF_NODE	298:8	298:8	7	glutReshapeWindow
LEAF_NODE	298:25	298:25	6	(
ARGUMENT	298:26	298:26	6	width
FIELD	298:26	298:26	7	width
LEAF_NODE	298:26	298:26	8	width
LEAF_NODE	298:31	298:31	6	,
ARGUMENT	298:33	298:33	6	height
FIELD	298:33	298:33	7	height
LEAF_NODE	298:33	298:33	8	height
LEAF_NODE	298:39	298:39	6	)
LEAF_NODE	298:40	298:40	4	;
LEAF_NODE	299:0	299:0	2	}
FUNCTION_DEF	301:0	306:0	1	
RETURN_TYPE	301:0	301:7	2	static void
LEAF_NODE	301:0	301:0	3	static
TYPE_NAME	301:7	301:7	3	void
LEAF_NODE	301:7	301:7	4	void
FUNCTION_NAME	302:0	302:0	2	raster_draw
LEAF_NODE	302:0	302:0	3	raster_draw
PARAMETER_LIST	302:11	302:16	2	( void )
LEAF_NODE	302:11	302:11	3	(
PARAMETER_DECL	302:12	302:12	3	void
LEAF_NODE	302:12	302:12	4	void
LEAF_NODE	302:16	302:16	3	)
LEAF_NODE	303:0	303:0	2	{
STATEMENTS	304:2	305:2	2	
EXPR_STATEMENT	304:2	304:89	3	glDrawPixels ( img . width , img . height , GL_RGBA , GL_UNSIGNED_BYTE , ( const GLvoid * ) raster ) ;
EXPR	304:2	304:2	4	glDrawPixels ( img . width , img . height , GL_RGBA , GL_UNSIGNED_BYTE , ( const GLvoid * ) raster )
FUNCTION_CALL	304:2	304:88	5	glDrawPixels ( img . width , img . height , GL_RGBA , GL_UNSIGNED_BYTE , ( const GLvoid * ) raster )
CALLEE	304:2	304:2	6	glDrawPixels
LEAF_NODE	304:2	304:2	7	glDrawPixels
LEAF_NODE	304:14	304:14	6	(
ARGUMENT	304:15	304:15	6	img . width
FIELD	304:15	304:19	7	img . width
LEAF_NODE	304:15	304:15	8	img
LEAF_NODE	304:18	304:18	8	.
LEAF_NODE	304:19	304:19	8	width
LEAF_NODE	304:24	304:24	6	,
ARGUMENT	304:26	304:26	6	img . height
FIELD	304:26	304:30	7	img . height
LEAF_NODE	304:26	304:26	8	img
LEAF_NODE	304:29	304:29	8	.
LEAF_NODE	304:30	304:30	8	height
LEAF_NODE	304:36	304:36	6	,
ARGUMENT	304:38	304:38	6	GL_RGBA
FIELD	304:38	304:38	7	GL_RGBA
LEAF_NODE	304:38	304:38	8	GL_RGBA
LEAF_NODE	304:45	304:45	6	,
ARGUMENT	304:47	304:47	6	GL_UNSIGNED_BYTE
FIELD	304:47	304:47	7	GL_UNSIGNED_BYTE
LEAF_NODE	304:47	304:47	8	GL_UNSIGNED_BYTE
LEAF_NODE	304:63	304:63	6	,
ARGUMENT	304:65	304:82	6	( const GLvoid * ) raster
LEAF_NODE	304:65	304:65	7	(
TYPE_NAME	304:66	304:72	7	const GLvoid
LEAF_NODE	304:66	304:66	8	const
LEAF_NODE	304:72	304:72	8	GLvoid
LEAF_NODE	304:79	304:79	7	*
LEAF_NODE	304:80	304:80	7	)
FIELD	304:82	304:82	7	raster
LEAF_NODE	304:82	304:82	8	raster
LEAF_NODE	304:88	304:88	6	)
LEAF_NODE	304:89	304:89	4	;
EXPR_STATEMENT	305:2	305:11	3	glFlush ( ) ;
EXPR	305:2	305:2	4	glFlush ( )
FUNCTION_CALL	305:2	305:10	5	glFlush ( )
CALLEE	305:2	305:2	6	glFlush
LEAF_NODE	305:2	305:2	7	glFlush
LEAF_NODE	305:9	305:9	6	(
LEAF_NODE	305:10	305:10	6	)
LEAF_NODE	305:11	305:11	4	;
LEAF_NODE	306:0	306:0	2	}
FUNCTION_DEF	308:0	320:0	1	
RETURN_TYPE	308:0	308:7	2	static void
LEAF_NODE	308:0	308:0	3	static
TYPE_NAME	308:7	308:7	3	void
LEAF_NODE	308:7	308:7	4	void
FUNCTION_NAME	309:0	309:0	2	raster_reshape
LEAF_NODE	309:0	309:0	3	raster_reshape
PARAMETER_LIST	309:14	309:35	2	( int win_w , int win_h )
LEAF_NODE	309:14	309:14	3	(
PARAMETER_DECL	309:15	309:19	3	int win_w
TYPE	309:15	309:15	4	int
TYPE_NAME	309:15	309:15	5	int
LEAF_NODE	309:15	309:15	6	int
NAME	309:19	309:19	4	win_w
LEAF_NODE	309:19	309:19	5	win_w
LEAF_NODE	309:24	309:24	3	,
PARAMETER_DECL	309:26	309:30	3	int win_h
TYPE	309:26	309:26	4	int
TYPE_NAME	309:26	309:26	5	int
LEAF_NODE	309:26	309:26	6	int
NAME	309:30	309:30	4	win_h
LEAF_NODE	309:30	309:30	5	win_h
LEAF_NODE	309:35	309:35	3	)
LEAF_NODE	310:0	310:0	2	{
STATEMENTS	311:8	319:8	2	
SIMPLE_DECL	311:8	311:49	3	GLfloat xratio ; xratio = ( GLfloat ) win_w / img . width ;
VAR_DECL	311:8	311:16	4	GLfloat xratio ; xratio = ( GLfloat ) win_w / img . width
TYPE	311:8	311:8	5	GLfloat
TYPE_NAME	311:8	311:8	6	GLfloat
LEAF_NODE	311:8	311:8	7	GLfloat
NAME	311:16	311:16	5	xratio
LEAF_NODE	311:16	311:16	6	xratio
LEAF_NODE	0:0	0:0	5	;
INIT	311:16	311:16	5	xratio = ( GLfloat ) win_w / img . width
ASSIGN	311:16	311:25	6	xratio = ( GLfloat ) win_w / img . width
LVAL	311:16	311:16	7	xratio
NAME	311:16	311:16	8	xratio
LEAF_NODE	311:16	311:16	9	xratio
ASSIGN_OP	311:23	311:23	7	=
LEAF_NODE	311:23	311:23	8	=
RVAL	311:25	311:40	7	( GLfloat ) win_w / img . width
LEAF_NODE	311:25	311:25	8	(
TYPE_NAME	311:26	311:26	8	GLfloat
LEAF_NODE	311:26	311:26	9	GLfloat
LEAF_NODE	311:33	311:33	8	)
FIELD	311:34	311:34	8	win_w
LEAF_NODE	311:34	311:34	9	win_w
LEAF_NODE	311:39	311:39	8	/
FIELD	311:40	311:44	8	img . width
LEAF_NODE	311:40	311:40	9	img
LEAF_NODE	311:43	311:43	9	.
LEAF_NODE	311:44	311:44	9	width
LEAF_NODE	311:49	311:49	4	;
SIMPLE_DECL	312:8	312:50	3	GLfloat yratio ; yratio = ( GLfloat ) win_h / img . height ;
VAR_DECL	312:8	312:16	4	GLfloat yratio ; yratio = ( GLfloat ) win_h / img . height
TYPE	312:8	312:8	5	GLfloat
TYPE_NAME	312:8	312:8	6	GLfloat
LEAF_NODE	312:8	312:8	7	GLfloat
NAME	312:16	312:16	5	yratio
LEAF_NODE	312:16	312:16	6	yratio
LEAF_NODE	0:0	0:0	5	;
INIT	312:16	312:16	5	yratio = ( GLfloat ) win_h / img . height
ASSIGN	312:16	312:25	6	yratio = ( GLfloat ) win_h / img . height
LVAL	312:16	312:16	7	yratio
NAME	312:16	312:16	8	yratio
LEAF_NODE	312:16	312:16	9	yratio
ASSIGN_OP	312:23	312:23	7	=
LEAF_NODE	312:23	312:23	8	=
RVAL	312:25	312:40	7	( GLfloat ) win_h / img . height
LEAF_NODE	312:25	312:25	8	(
TYPE_NAME	312:26	312:26	8	GLfloat
LEAF_NODE	312:26	312:26	9	GLfloat
LEAF_NODE	312:33	312:33	8	)
FIELD	312:34	312:34	8	win_h
LEAF_NODE	312:34	312:34	9	win_h
LEAF_NODE	312:39	312:39	8	/
FIELD	312:40	312:44	8	img . height
LEAF_NODE	312:40	312:40	9	img
LEAF_NODE	312:43	312:43	9	.
LEAF_NODE	312:44	312:44	9	height
LEAF_NODE	312:50	312:50	4	;
SIMPLE_DECL	313:8	313:70	3	int ratio ; ratio = ( int ) ( ( ( xratio > yratio ) ? xratio : yratio ) * 100 ) ;
VAR_DECL	313:8	313:16	4	int ratio ; ratio = ( int ) ( ( ( xratio > yratio ) ? xratio : yratio ) * 100 )
TYPE	313:8	313:8	5	int
TYPE_NAME	313:8	313:8	6	int
LEAF_NODE	313:8	313:8	7	int
NAME	313:16	313:16	5	ratio
LEAF_NODE	313:16	313:16	6	ratio
LEAF_NODE	0:0	0:0	5	;
INIT	313:16	313:16	5	ratio = ( int ) ( ( ( xratio > yratio ) ? xratio : yratio ) * 100 )
ASSIGN	313:16	313:24	6	ratio = ( int ) ( ( ( xratio > yratio ) ? xratio : yratio ) * 100 )
LVAL	313:16	313:16	7	ratio
NAME	313:16	313:16	8	ratio
LEAF_NODE	313:16	313:16	9	ratio
ASSIGN_OP	313:22	313:22	7	=
LEAF_NODE	313:22	313:22	8	=
RVAL	313:24	313:69	7	( int ) ( ( ( xratio > yratio ) ? xratio : yratio ) * 100 )
LEAF_NODE	313:24	313:24	8	(
TYPE_NAME	313:25	313:25	8	int
LEAF_NODE	313:25	313:25	9	int
LEAF_NODE	313:28	313:28	8	)
LEAF_NODE	313:29	313:29	8	(
LEAF_NODE	313:30	313:30	8	(
COND_EXPR	313:31	313:56	8	( xratio > yratio ) ? xratio : yratio
CONDITION	313:31	313:47	9	( xratio > yratio )
LEAF_NODE	313:31	313:31	10	(
FIELD	313:32	313:32	10	xratio
LEAF_NODE	313:32	313:32	11	xratio
REL_OPERATOR	313:39	313:39	10	>
LEAF_NODE	313:39	313:39	11	>
FIELD	313:41	313:41	10	yratio
LEAF_NODE	313:41	313:41	11	yratio
LEAF_NODE	313:47	313:47	10	)
LEAF_NODE	313:48	313:48	9	?
EXPR	313:49	313:49	9	xratio
FIELD	313:49	313:49	10	xratio
LEAF_NODE	313:49	313:49	11	xratio
LEAF_NODE	313:55	313:55	9	:
FIELD	313:56	313:56	9	yratio
LEAF_NODE	313:56	313:56	10	yratio
LEAF_NODE	313:62	313:62	8	)
LEAF_NODE	313:64	313:64	8	*
FIELD	313:66	313:66	8	100
LEAF_NODE	313:66	313:66	9	100
LEAF_NODE	313:69	313:69	8	)
LEAF_NODE	313:70	313:70	4	;
EXPR_STATEMENT	315:8	315:35	3	glPixelZoom ( xratio , yratio ) ;
EXPR	315:8	315:8	4	glPixelZoom ( xratio , yratio )
FUNCTION_CALL	315:8	315:34	5	glPixelZoom ( xratio , yratio )
CALLEE	315:8	315:8	6	glPixelZoom
LEAF_NODE	315:8	315:8	7	glPixelZoom
LEAF_NODE	315:19	315:19	6	(
ARGUMENT	315:20	315:20	6	xratio
FIELD	315:20	315:20	7	xratio
LEAF_NODE	315:20	315:20	8	xratio
LEAF_NODE	315:26	315:26	6	,
ARGUMENT	315:28	315:28	6	yratio
FIELD	315:28	315:28	7	yratio
LEAF_NODE	315:28	315:28	8	yratio
LEAF_NODE	315:34	315:34	6	)
LEAF_NODE	315:35	315:35	4	;
EXPR_STATEMENT	316:8	316:38	3	glViewport ( 0 , 0 , win_w , win_h ) ;
EXPR	316:8	316:8	4	glViewport ( 0 , 0 , win_w , win_h )
FUNCTION_CALL	316:8	316:37	5	glViewport ( 0 , 0 , win_w , win_h )
CALLEE	316:8	316:8	6	glViewport
LEAF_NODE	316:8	316:8	7	glViewport
LEAF_NODE	316:18	316:18	6	(
ARGUMENT	316:19	316:19	6	0
FIELD	316:19	316:19	7	0
LEAF_NODE	316:19	316:19	8	0
LEAF_NODE	316:20	316:20	6	,
ARGUMENT	316:22	316:22	6	0
FIELD	316:22	316:22	7	0
LEAF_NODE	316:22	316:22	8	0
LEAF_NODE	316:23	316:23	6	,
ARGUMENT	316:25	316:25	6	win_w
FIELD	316:25	316:25	7	win_w
LEAF_NODE	316:25	316:25	8	win_w
LEAF_NODE	316:30	316:30	6	,
ARGUMENT	316:32	316:32	6	win_h
FIELD	316:32	316:32	7	win_h
LEAF_NODE	316:32	316:32	8	win_h
LEAF_NODE	316:37	316:37	6	)
LEAF_NODE	316:38	316:38	4	;
EXPR_STATEMENT	317:8	318:64	3	snprintf ( title , 1024 , "%s [%u] %d%%" , filelist [ fileindex ] , ( unsigned int ) TIFFCurrentDirectory ( tif ) , ratio ) ;
EXPR	317:8	317:8	4	snprintf ( title , 1024 , "%s [%u] %d%%" , filelist [ fileindex ] , ( unsigned int ) TIFFCurrentDirectory ( tif ) , ratio )
FUNCTION_CALL	317:8	318:63	5	snprintf ( title , 1024 , "%s [%u] %d%%" , filelist [ fileindex ] , ( unsigned int ) TIFFCurrentDirectory ( tif ) , ratio )
CALLEE	317:8	317:8	6	snprintf
LEAF_NODE	317:8	317:8	7	snprintf
LEAF_NODE	317:16	317:16	6	(
ARGUMENT	317:17	317:17	6	title
FIELD	317:17	317:17	7	title
LEAF_NODE	317:17	317:17	8	title
LEAF_NODE	317:22	317:22	6	,
ARGUMENT	317:24	317:24	6	1024
FIELD	317:24	317:24	7	1024
LEAF_NODE	317:24	317:24	8	1024
LEAF_NODE	317:28	317:28	6	,
ARGUMENT	317:30	317:30	6	"%s [%u] %d%%"
FIELD	317:30	317:30	7	"%s [%u] %d%%"
LEAF_NODE	317:30	317:30	8	"%s [%u] %d%%"
LEAF_NODE	317:44	317:44	6	,
ARGUMENT	317:46	317:46	6	filelist [ fileindex ]
FIELD	317:46	317:64	7	filelist [ fileindex ]
LEAF_NODE	317:46	317:46	8	filelist
LEAF_NODE	317:54	317:54	8	[
EXPR	317:55	317:55	8	fileindex
FIELD	317:55	317:55	9	fileindex
LEAF_NODE	317:55	317:55	10	fileindex
LEAF_NODE	317:64	317:64	8	]
LEAF_NODE	317:65	317:65	6	,
ARGUMENT	318:16	318:31	6	( unsigned int ) TIFFCurrentDirectory ( tif )
LEAF_NODE	318:16	318:16	7	(
TYPE_NAME	318:17	318:26	7	unsigned int
LEAF_NODE	318:17	318:17	8	unsigned
LEAF_NODE	318:26	318:26	8	int
LEAF_NODE	318:29	318:29	7	)
FUNCTION_CALL	318:31	318:55	7	TIFFCurrentDirectory ( tif )
CALLEE	318:31	318:31	8	TIFFCurrentDirectory
LEAF_NODE	318:31	318:31	9	TIFFCurrentDirectory
LEAF_NODE	318:51	318:51	8	(
ARGUMENT	318:52	318:52	8	tif
FIELD	318:52	318:52	9	tif
LEAF_NODE	318:52	318:52	10	tif
LEAF_NODE	318:55	318:55	8	)
LEAF_NODE	318:56	318:56	6	,
ARGUMENT	318:58	318:58	6	ratio
FIELD	318:58	318:58	7	ratio
LEAF_NODE	318:58	318:58	8	ratio
LEAF_NODE	318:63	318:63	6	)
LEAF_NODE	318:64	318:64	4	;
EXPR_STATEMENT	319:8	319:33	3	glutSetWindowTitle ( title ) ;
EXPR	319:8	319:8	4	glutSetWindowTitle ( title )
FUNCTION_CALL	319:8	319:32	5	glutSetWindowTitle ( title )
CALLEE	319:8	319:8	6	glutSetWindowTitle
LEAF_NODE	319:8	319:8	7	glutSetWindowTitle
LEAF_NODE	319:26	319:26	6	(
ARGUMENT	319:27	319:27	6	title
FIELD	319:27	319:27	7	title
LEAF_NODE	319:27	319:27	8	title
LEAF_NODE	319:32	319:32	6	)
LEAF_NODE	319:33	319:33	4	;
LEAF_NODE	320:0	320:0	2	}
FUNCTION_DEF	322:0	367:0	1	
RETURN_TYPE	322:0	322:7	2	static void
LEAF_NODE	322:0	322:0	3	static
TYPE_NAME	322:7	322:7	3	void
LEAF_NODE	322:7	322:7	4	void
FUNCTION_NAME	323:0	323:0	2	raster_keys
LEAF_NODE	323:0	323:0	3	raster_keys
PARAMETER_LIST	323:11	323:43	2	( unsigned char key , int x , int y )
LEAF_NODE	323:11	323:11	3	(
PARAMETER_DECL	323:12	323:26	3	unsigned char key
TYPE	323:12	323:12	4	unsigned char
TYPE_NAME	323:12	323:21	5	unsigned char
LEAF_NODE	323:12	323:12	6	unsigned
LEAF_NODE	323:21	323:21	6	char
NAME	323:26	323:26	4	key
LEAF_NODE	323:26	323:26	5	key
LEAF_NODE	323:29	323:29	3	,
PARAMETER_DECL	323:31	323:35	3	int x
TYPE	323:31	323:31	4	int
TYPE_NAME	323:31	323:31	5	int
LEAF_NODE	323:31	323:31	6	int
NAME	323:35	323:35	4	x
LEAF_NODE	323:35	323:35	5	x
LEAF_NODE	323:36	323:36	3	,
PARAMETER_DECL	323:38	323:42	3	int y
TYPE	323:38	323:38	4	int
TYPE_NAME	323:38	323:38	5	int
LEAF_NODE	323:38	323:38	6	int
NAME	323:42	323:42	4	y
LEAF_NODE	323:42	323:42	5	y
LEAF_NODE	323:43	323:43	3	)
LEAF_NODE	324:0	324:0	2	{
STATEMENTS	325:8	366:8	2	
EXPR_STATEMENT	325:8	325:16	3	( void ) x ;
EXPR	325:8	325:15	4	( void ) x
LEAF_NODE	325:8	325:8	5	(
TYPE_NAME	325:9	325:9	5	void
LEAF_NODE	325:9	325:9	6	void
LEAF_NODE	325:13	325:13	5	)
FIELD	325:15	325:15	5	x
LEAF_NODE	325:15	325:15	6	x
LEAF_NODE	325:16	325:16	4	;
EXPR_STATEMENT	326:8	326:16	3	( void ) y ;
EXPR	326:8	326:15	4	( void ) y
LEAF_NODE	326:8	326:8	5	(
TYPE_NAME	326:9	326:9	5	void
LEAF_NODE	326:9	326:9	6	void
LEAF_NODE	326:13	326:13	5	)
FIELD	326:15	326:15	5	y
LEAF_NODE	326:15	326:15	6	y
LEAF_NODE	326:16	326:16	4	;
SELECTION	327:8	327:21	3	
KEYWORD	327:8	327:8	4	switch
LEAF_NODE	327:8	327:8	5	switch
LEAF_NODE	327:15	327:15	4	(
CONDITION	327:16	327:16	4	key
EXPR	327:16	327:16	5	key
FIELD	327:16	327:16	6	key
LEAF_NODE	327:16	327:16	7	key
LEAF_NODE	327:19	327:19	4	)
STATEMENTS	327:21	365:8	4	
LEAF_NODE	327:21	327:21	5	{
STATEMENTS	328:16	364:20	5	
LEAF_NODE	328:16	328:16	6	case
LEAF_NODE	328:21	328:21	6	'b'
LEAF_NODE	328:24	328:24	6	:
EXPR_STATEMENT	329:20	329:50	6	photo = PHOTOMETRIC_MINISBLACK ;
EXPR	329:20	329:20	7	photo = PHOTOMETRIC_MINISBLACK
ASSIGN	329:20	329:28	8	photo = PHOTOMETRIC_MINISBLACK
LVAL	329:20	329:20	9	photo
FIELD	329:20	329:20	10	photo
LEAF_NODE	329:20	329:20	11	photo
ASSIGN_OP	329:26	329:26	9	=
LEAF_NODE	329:26	329:26	10	=
RVAL	329:28	329:28	9	PHOTOMETRIC_MINISBLACK
FIELD	329:28	329:28	10	PHOTOMETRIC_MINISBLACK
LEAF_NODE	329:28	329:28	11	PHOTOMETRIC_MINISBLACK
LEAF_NODE	329:50	329:50	7	;
EXPR_STATEMENT	330:20	330:31	6	initImage ( ) ;
EXPR	330:20	330:20	7	initImage ( )
FUNCTION_CALL	330:20	330:30	8	initImage ( )
CALLEE	330:20	330:20	9	initImage
LEAF_NODE	330:20	330:20	10	initImage
LEAF_NODE	330:29	330:29	9	(
LEAF_NODE	330:30	330:30	9	)
LEAF_NODE	330:31	330:31	7	;
JUMP_STATEMENT	331:20	331:25	6	break DESTINATION ;
KEYWORD	331:20	331:20	7	break
LEAF_NODE	331:20	331:20	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	331:25	331:25	7	;
LEAF_NODE	332:16	332:16	6	case
LEAF_NODE	332:21	332:21	6	'l'
LEAF_NODE	332:24	332:24	6	:
EXPR_STATEMENT	333:20	333:45	6	order = FILLORDER_LSB2MSB ;
EXPR	333:20	333:20	7	order = FILLORDER_LSB2MSB
ASSIGN	333:20	333:28	8	order = FILLORDER_LSB2MSB
LVAL	333:20	333:20	9	order
FIELD	333:20	333:20	10	order
LEAF_NODE	333:20	333:20	11	order
ASSIGN_OP	333:26	333:26	9	=
LEAF_NODE	333:26	333:26	10	=
RVAL	333:28	333:28	9	FILLORDER_LSB2MSB
FIELD	333:28	333:28	10	FILLORDER_LSB2MSB
LEAF_NODE	333:28	333:28	11	FILLORDER_LSB2MSB
LEAF_NODE	333:45	333:45	7	;
EXPR_STATEMENT	334:20	334:31	6	initImage ( ) ;
EXPR	334:20	334:20	7	initImage ( )
FUNCTION_CALL	334:20	334:30	8	initImage ( )
CALLEE	334:20	334:20	9	initImage
LEAF_NODE	334:20	334:20	10	initImage
LEAF_NODE	334:29	334:29	9	(
LEAF_NODE	334:30	334:30	9	)
LEAF_NODE	334:31	334:31	7	;
JUMP_STATEMENT	335:20	335:25	6	break DESTINATION ;
KEYWORD	335:20	335:20	7	break
LEAF_NODE	335:20	335:20	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	335:25	335:25	7	;
LEAF_NODE	336:16	336:16	6	case
LEAF_NODE	336:21	336:21	6	'm'
LEAF_NODE	336:24	336:24	6	:
EXPR_STATEMENT	337:20	337:45	6	order = FILLORDER_MSB2LSB ;
EXPR	337:20	337:20	7	order = FILLORDER_MSB2LSB
ASSIGN	337:20	337:28	8	order = FILLORDER_MSB2LSB
LVAL	337:20	337:20	9	order
FIELD	337:20	337:20	10	order
LEAF_NODE	337:20	337:20	11	order
ASSIGN_OP	337:26	337:26	9	=
LEAF_NODE	337:26	337:26	10	=
RVAL	337:28	337:28	9	FILLORDER_MSB2LSB
FIELD	337:28	337:28	10	FILLORDER_MSB2LSB
LEAF_NODE	337:28	337:28	11	FILLORDER_MSB2LSB
LEAF_NODE	337:45	337:45	7	;
EXPR_STATEMENT	338:20	338:31	6	initImage ( ) ;
EXPR	338:20	338:20	7	initImage ( )
FUNCTION_CALL	338:20	338:30	8	initImage ( )
CALLEE	338:20	338:20	9	initImage
LEAF_NODE	338:20	338:20	10	initImage
LEAF_NODE	338:29	338:29	9	(
LEAF_NODE	338:30	338:30	9	)
LEAF_NODE	338:31	338:31	7	;
JUMP_STATEMENT	339:20	339:25	6	break DESTINATION ;
KEYWORD	339:20	339:20	7	break
LEAF_NODE	339:20	339:20	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	339:25	339:25	7	;
LEAF_NODE	340:16	340:16	6	case
LEAF_NODE	340:21	340:21	6	'w'
LEAF_NODE	340:24	340:24	6	:
EXPR_STATEMENT	341:20	341:50	6	photo = PHOTOMETRIC_MINISWHITE ;
EXPR	341:20	341:20	7	photo = PHOTOMETRIC_MINISWHITE
ASSIGN	341:20	341:28	8	photo = PHOTOMETRIC_MINISWHITE
LVAL	341:20	341:20	9	photo
FIELD	341:20	341:20	10	photo
LEAF_NODE	341:20	341:20	11	photo
ASSIGN_OP	341:26	341:26	9	=
LEAF_NODE	341:26	341:26	10	=
RVAL	341:28	341:28	9	PHOTOMETRIC_MINISWHITE
FIELD	341:28	341:28	10	PHOTOMETRIC_MINISWHITE
LEAF_NODE	341:28	341:28	11	PHOTOMETRIC_MINISWHITE
LEAF_NODE	341:50	341:50	7	;
EXPR_STATEMENT	342:20	342:31	6	initImage ( ) ;
EXPR	342:20	342:20	7	initImage ( )
FUNCTION_CALL	342:20	342:30	8	initImage ( )
CALLEE	342:20	342:20	9	initImage
LEAF_NODE	342:20	342:20	10	initImage
LEAF_NODE	342:29	342:29	9	(
LEAF_NODE	342:30	342:30	9	)
LEAF_NODE	342:31	342:31	7	;
JUMP_STATEMENT	343:20	343:25	6	break DESTINATION ;
KEYWORD	343:20	343:20	7	break
LEAF_NODE	343:20	343:20	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	343:25	343:25	7	;
LEAF_NODE	344:16	344:16	6	case
LEAF_NODE	344:21	344:21	6	'W'
LEAF_NODE	344:24	344:24	6	:
EXPR_STATEMENT	345:20	345:62	6	owarning = TIFFSetWarningHandler ( owarning ) ;
EXPR	345:20	345:20	7	owarning = TIFFSetWarningHandler ( owarning )
ASSIGN	345:20	345:31	8	owarning = TIFFSetWarningHandler ( owarning )
LVAL	345:20	345:20	9	owarning
FIELD	345:20	345:20	10	owarning
LEAF_NODE	345:20	345:20	11	owarning
ASSIGN_OP	345:29	345:29	9	=
LEAF_NODE	345:29	345:29	10	=
RVAL	345:31	345:31	9	TIFFSetWarningHandler ( owarning )
FUNCTION_CALL	345:31	345:61	10	TIFFSetWarningHandler ( owarning )
CALLEE	345:31	345:31	11	TIFFSetWarningHandler
LEAF_NODE	345:31	345:31	12	TIFFSetWarningHandler
LEAF_NODE	345:52	345:52	11	(
ARGUMENT	345:53	345:53	11	owarning
FIELD	345:53	345:53	12	owarning
LEAF_NODE	345:53	345:53	13	owarning
LEAF_NODE	345:61	345:61	11	)
LEAF_NODE	345:62	345:62	7	;
EXPR_STATEMENT	346:20	346:31	6	initImage ( ) ;
EXPR	346:20	346:20	7	initImage ( )
FUNCTION_CALL	346:20	346:30	8	initImage ( )
CALLEE	346:20	346:20	9	initImage
LEAF_NODE	346:20	346:20	10	initImage
LEAF_NODE	346:29	346:29	9	(
LEAF_NODE	346:30	346:30	9	)
LEAF_NODE	346:31	346:31	7	;
JUMP_STATEMENT	347:20	347:25	6	break DESTINATION ;
KEYWORD	347:20	347:20	7	break
LEAF_NODE	347:20	347:20	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	347:25	347:25	7	;
LEAF_NODE	348:16	348:16	6	case
LEAF_NODE	348:21	348:21	6	'E'
LEAF_NODE	348:24	348:24	6	:
EXPR_STATEMENT	349:20	349:56	6	oerror = TIFFSetErrorHandler ( oerror ) ;
EXPR	349:20	349:20	7	oerror = TIFFSetErrorHandler ( oerror )
ASSIGN	349:20	349:29	8	oerror = TIFFSetErrorHandler ( oerror )
LVAL	349:20	349:20	9	oerror
FIELD	349:20	349:20	10	oerror
LEAF_NODE	349:20	349:20	11	oerror
ASSIGN_OP	349:27	349:27	9	=
LEAF_NODE	349:27	349:27	10	=
RVAL	349:29	349:29	9	TIFFSetErrorHandler ( oerror )
FUNCTION_CALL	349:29	349:55	10	TIFFSetErrorHandler ( oerror )
CALLEE	349:29	349:29	11	TIFFSetErrorHandler
LEAF_NODE	349:29	349:29	12	TIFFSetErrorHandler
LEAF_NODE	349:48	349:48	11	(
ARGUMENT	349:49	349:49	11	oerror
FIELD	349:49	349:49	12	oerror
LEAF_NODE	349:49	349:49	13	oerror
LEAF_NODE	349:55	349:55	11	)
LEAF_NODE	349:56	349:56	7	;
EXPR_STATEMENT	350:20	350:31	6	initImage ( ) ;
EXPR	350:20	350:20	7	initImage ( )
FUNCTION_CALL	350:20	350:30	8	initImage ( )
CALLEE	350:20	350:20	9	initImage
LEAF_NODE	350:20	350:20	10	initImage
LEAF_NODE	350:29	350:29	9	(
LEAF_NODE	350:30	350:30	9	)
LEAF_NODE	350:31	350:31	7	;
JUMP_STATEMENT	351:20	351:25	6	break DESTINATION ;
KEYWORD	351:20	351:20	7	break
LEAF_NODE	351:20	351:20	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	351:25	351:25	7	;
LEAF_NODE	352:16	352:16	6	case
LEAF_NODE	352:21	352:21	6	'z'
LEAF_NODE	352:24	352:24	6	:
LEAF_NODE	353:16	353:16	6	case
LEAF_NODE	353:21	353:21	6	'Z'
LEAF_NODE	353:24	353:24	6	:
EXPR_STATEMENT	354:20	354:34	6	order = order0 ;
EXPR	354:20	354:20	7	order = order0
ASSIGN	354:20	354:28	8	order = order0
LVAL	354:20	354:20	9	order
FIELD	354:20	354:20	10	order
LEAF_NODE	354:20	354:20	11	order
ASSIGN_OP	354:26	354:26	9	=
LEAF_NODE	354:26	354:26	10	=
RVAL	354:28	354:28	9	order0
FIELD	354:28	354:28	10	order0
LEAF_NODE	354:28	354:28	11	order0
LEAF_NODE	354:34	354:34	7	;
EXPR_STATEMENT	355:20	355:34	6	photo = photo0 ;
EXPR	355:20	355:20	7	photo = photo0
ASSIGN	355:20	355:28	8	photo = photo0
LVAL	355:20	355:20	9	photo
FIELD	355:20	355:20	10	photo
LEAF_NODE	355:20	355:20	11	photo
ASSIGN_OP	355:26	355:26	9	=
LEAF_NODE	355:26	355:26	10	=
RVAL	355:28	355:28	9	photo0
FIELD	355:28	355:28	10	photo0
LEAF_NODE	355:28	355:28	11	photo0
LEAF_NODE	355:34	355:34	7	;
SELECTION	356:20	357:24	6	
KEYWORD	356:20	356:20	7	if
LEAF_NODE	356:20	356:20	8	if
LEAF_NODE	356:23	356:23	7	(
CONDITION	356:24	356:24	7	owarning == NULL
EXPR	356:24	356:36	8	owarning == NULL
FIELD	356:24	356:24	9	owarning
LEAF_NODE	356:24	356:24	10	owarning
EQ_OPERATOR	356:33	356:33	9	==
LEAF_NODE	356:33	356:33	10	==
FIELD	356:36	356:36	9	NULL
LEAF_NODE	356:36	356:36	10	NULL
LEAF_NODE	356:40	356:40	7	)
STATEMENTS	357:24	357:24	7	
EXPR_STATEMENT	357:24	357:62	8	owarning = TIFFSetWarningHandler ( NULL ) ;
EXPR	357:24	357:24	9	owarning = TIFFSetWarningHandler ( NULL )
ASSIGN	357:24	357:35	10	owarning = TIFFSetWarningHandler ( NULL )
LVAL	357:24	357:24	11	owarning
FIELD	357:24	357:24	12	owarning
LEAF_NODE	357:24	357:24	13	owarning
ASSIGN_OP	357:33	357:33	11	=
LEAF_NODE	357:33	357:33	12	=
RVAL	357:35	357:35	11	TIFFSetWarningHandler ( NULL )
FUNCTION_CALL	357:35	357:61	12	TIFFSetWarningHandler ( NULL )
CALLEE	357:35	357:35	13	TIFFSetWarningHandler
LEAF_NODE	357:35	357:35	14	TIFFSetWarningHandler
LEAF_NODE	357:56	357:56	13	(
ARGUMENT	357:57	357:57	13	NULL
FIELD	357:57	357:57	14	NULL
LEAF_NODE	357:57	357:57	15	NULL
LEAF_NODE	357:61	357:61	13	)
LEAF_NODE	357:62	357:62	9	;
SELECTION	358:20	359:24	6	
KEYWORD	358:20	358:20	7	if
LEAF_NODE	358:20	358:20	8	if
LEAF_NODE	358:23	358:23	7	(
CONDITION	358:24	358:24	7	oerror == NULL
EXPR	358:24	358:34	8	oerror == NULL
FIELD	358:24	358:24	9	oerror
LEAF_NODE	358:24	358:24	10	oerror
EQ_OPERATOR	358:31	358:31	9	==
LEAF_NODE	358:31	358:31	10	==
FIELD	358:34	358:34	9	NULL
LEAF_NODE	358:34	358:34	10	NULL
LEAF_NODE	358:38	358:38	7	)
STATEMENTS	359:24	359:24	7	
EXPR_STATEMENT	359:24	359:58	8	oerror = TIFFSetErrorHandler ( NULL ) ;
EXPR	359:24	359:24	9	oerror = TIFFSetErrorHandler ( NULL )
ASSIGN	359:24	359:33	10	oerror = TIFFSetErrorHandler ( NULL )
LVAL	359:24	359:24	11	oerror
FIELD	359:24	359:24	12	oerror
LEAF_NODE	359:24	359:24	13	oerror
ASSIGN_OP	359:31	359:31	11	=
LEAF_NODE	359:31	359:31	12	=
RVAL	359:33	359:33	11	TIFFSetErrorHandler ( NULL )
FUNCTION_CALL	359:33	359:57	12	TIFFSetErrorHandler ( NULL )
CALLEE	359:33	359:33	13	TIFFSetErrorHandler
LEAF_NODE	359:33	359:33	14	TIFFSetErrorHandler
LEAF_NODE	359:52	359:52	13	(
ARGUMENT	359:53	359:53	13	NULL
FIELD	359:53	359:53	14	NULL
LEAF_NODE	359:53	359:53	15	NULL
LEAF_NODE	359:57	359:57	13	)
LEAF_NODE	359:58	359:58	9	;
EXPR_STATEMENT	360:20	360:31	6	initImage ( ) ;
EXPR	360:20	360:20	7	initImage ( )
FUNCTION_CALL	360:20	360:30	8	initImage ( )
CALLEE	360:20	360:20	9	initImage
LEAF_NODE	360:20	360:20	10	initImage
LEAF_NODE	360:29	360:29	9	(
LEAF_NODE	360:30	360:30	9	)
LEAF_NODE	360:31	360:31	7	;
JUMP_STATEMENT	361:20	361:25	6	break DESTINATION ;
KEYWORD	361:20	361:20	7	break
LEAF_NODE	361:20	361:20	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	361:25	361:25	7	;
LEAF_NODE	362:16	362:16	6	case
LEAF_NODE	362:21	362:21	6	'q'
LEAF_NODE	362:24	362:24	6	:
LEAF_NODE	363:16	363:16	6	case
LEAF_NODE	363:21	363:21	6	'\033'
LEAF_NODE	363:27	363:27	6	:
EXPR_STATEMENT	364:20	364:38	6	cleanup_and_exit ( ) ;
EXPR	364:20	364:20	7	cleanup_and_exit ( )
FUNCTION_CALL	364:20	364:37	8	cleanup_and_exit ( )
CALLEE	364:20	364:20	9	cleanup_and_exit
LEAF_NODE	364:20	364:20	10	cleanup_and_exit
LEAF_NODE	364:36	364:36	9	(
LEAF_NODE	364:37	364:37	9	)
LEAF_NODE	364:38	364:38	7	;
LEAF_NODE	365:8	365:8	5	}
EXPR_STATEMENT	366:8	366:27	3	glutPostRedisplay ( ) ;
EXPR	366:8	366:8	4	glutPostRedisplay ( )
FUNCTION_CALL	366:8	366:26	5	glutPostRedisplay ( )
CALLEE	366:8	366:8	6	glutPostRedisplay
LEAF_NODE	366:8	366:8	7	glutPostRedisplay
LEAF_NODE	366:25	366:25	6	(
LEAF_NODE	366:26	366:26	6	)
LEAF_NODE	366:27	366:27	4	;
LEAF_NODE	367:0	367:0	2	}
FUNCTION_DEF	369:0	418:0	1	
RETURN_TYPE	369:0	369:7	2	static void
LEAF_NODE	369:0	369:0	3	static
TYPE_NAME	369:7	369:7	3	void
LEAF_NODE	369:7	369:7	4	void
FUNCTION_NAME	370:0	370:0	2	raster_special
LEAF_NODE	370:0	370:0	3	raster_special
PARAMETER_LIST	370:14	370:36	2	( int key , int x , int y )
LEAF_NODE	370:14	370:14	3	(
PARAMETER_DECL	370:15	370:19	3	int key
TYPE	370:15	370:15	4	int
TYPE_NAME	370:15	370:15	5	int
LEAF_NODE	370:15	370:15	6	int
NAME	370:19	370:19	4	key
LEAF_NODE	370:19	370:19	5	key
LEAF_NODE	370:22	370:22	3	,
PARAMETER_DECL	370:24	370:28	3	int x
TYPE	370:24	370:24	4	int
TYPE_NAME	370:24	370:24	5	int
LEAF_NODE	370:24	370:24	6	int
NAME	370:28	370:28	4	x
LEAF_NODE	370:28	370:28	5	x
LEAF_NODE	370:29	370:29	3	,
PARAMETER_DECL	370:31	370:35	3	int y
TYPE	370:31	370:31	4	int
TYPE_NAME	370:31	370:31	5	int
LEAF_NODE	370:31	370:31	6	int
NAME	370:35	370:35	4	y
LEAF_NODE	370:35	370:35	5	y
LEAF_NODE	370:36	370:36	3	)
LEAF_NODE	371:0	371:0	2	{
STATEMENTS	372:8	417:8	2	
EXPR_STATEMENT	372:8	372:16	3	( void ) x ;
EXPR	372:8	372:15	4	( void ) x
LEAF_NODE	372:8	372:8	5	(
TYPE_NAME	372:9	372:9	5	void
LEAF_NODE	372:9	372:9	6	void
LEAF_NODE	372:13	372:13	5	)
FIELD	372:15	372:15	5	x
LEAF_NODE	372:15	372:15	6	x
LEAF_NODE	372:16	372:16	4	;
EXPR_STATEMENT	373:8	373:16	3	( void ) y ;
EXPR	373:8	373:15	4	( void ) y
LEAF_NODE	373:8	373:8	5	(
TYPE_NAME	373:9	373:9	5	void
LEAF_NODE	373:9	373:9	6	void
LEAF_NODE	373:13	373:13	5	)
FIELD	373:15	373:15	5	y
LEAF_NODE	373:15	373:15	6	y
LEAF_NODE	373:16	373:16	4	;
SELECTION	374:8	374:21	3	
KEYWORD	374:8	374:8	4	switch
LEAF_NODE	374:8	374:8	5	switch
LEAF_NODE	374:15	374:15	4	(
CONDITION	374:16	374:16	4	key
EXPR	374:16	374:16	5	key
FIELD	374:16	374:16	6	key
LEAF_NODE	374:16	374:16	7	key
LEAF_NODE	374:19	374:19	4	)
STATEMENTS	374:21	416:8	4	
LEAF_NODE	374:21	374:21	5	{
STATEMENTS	375:16	415:16	5	
LABEL	375:16	375:37	6	case GLUT_KEY_PAGE_UP :
LEAF_NODE	375:16	375:16	7	case
LEAF_NODE	375:21	375:21	7	GLUT_KEY_PAGE_UP
LEAF_NODE	375:37	375:37	7	:
SELECTION	376:20	376:55	6	
KEYWORD	376:20	376:20	7	if
LEAF_NODE	376:20	376:20	8	if
LEAF_NODE	376:23	376:23	7	(
CONDITION	376:24	376:24	7	TIFFCurrentDirectory ( tif ) > 0
EXPR	376:24	376:52	8	TIFFCurrentDirectory ( tif ) > 0
FUNCTION_CALL	376:24	376:48	9	TIFFCurrentDirectory ( tif )
CALLEE	376:24	376:24	10	TIFFCurrentDirectory
LEAF_NODE	376:24	376:24	11	TIFFCurrentDirectory
LEAF_NODE	376:44	376:44	10	(
ARGUMENT	376:45	376:45	10	tif
FIELD	376:45	376:45	11	tif
LEAF_NODE	376:45	376:45	12	tif
LEAF_NODE	376:48	376:48	10	)
REL_OPERATOR	376:50	376:50	9	>
LEAF_NODE	376:50	376:50	10	>
FIELD	376:52	376:52	9	0
LEAF_NODE	376:52	376:52	10	0
LEAF_NODE	376:53	376:53	7	)
STATEMENTS	376:55	382:20	7	
LEAF_NODE	376:55	376:55	8	{
STATEMENTS	377:28	377:28	8	
SELECTION	377:28	378:79	9	
KEYWORD	377:28	377:28	10	if
LEAF_NODE	377:28	377:28	11	if
LEAF_NODE	377:31	377:31	10	(
CONDITION	377:32	377:32	10	TIFFSetDirectory ( tif , TIFFCurrentDirectory ( tif ) - 1 )
EXPR	377:32	377:32	11	TIFFSetDirectory ( tif , TIFFCurrentDirectory ( tif ) - 1 )
FUNCTION_CALL	377:32	378:76	12	TIFFSetDirectory ( tif , TIFFCurrentDirectory ( tif ) - 1 )
CALLEE	377:32	377:32	13	TIFFSetDirectory
LEAF_NODE	377:32	377:32	14	TIFFSetDirectory
LEAF_NODE	377:48	377:48	13	(
ARGUMENT	377:49	377:49	13	tif
FIELD	377:49	377:49	14	tif
LEAF_NODE	377:49	377:49	15	tif
LEAF_NODE	377:52	377:52	13	,
ARGUMENT	378:49	378:75	13	TIFFCurrentDirectory ( tif ) - 1
FUNCTION_CALL	378:49	378:73	14	TIFFCurrentDirectory ( tif )
CALLEE	378:49	378:49	15	TIFFCurrentDirectory
LEAF_NODE	378:49	378:49	16	TIFFCurrentDirectory
LEAF_NODE	378:69	378:69	15	(
ARGUMENT	378:70	378:70	15	tif
FIELD	378:70	378:70	16	tif
LEAF_NODE	378:70	378:70	17	tif
LEAF_NODE	378:73	378:73	15	)
LEAF_NODE	378:74	378:74	14	-
FIELD	378:75	378:75	14	1
LEAF_NODE	378:75	378:75	15	1
LEAF_NODE	378:76	378:76	13	)
LEAF_NODE	378:77	378:77	10	)
STATEMENTS	378:79	381:24	10	
LEAF_NODE	378:79	378:79	11	{
STATEMENTS	379:36	380:36	11	
EXPR_STATEMENT	379:36	379:47	12	initImage ( ) ;
EXPR	379:36	379:36	13	initImage ( )
FUNCTION_CALL	379:36	379:46	14	initImage ( )
CALLEE	379:36	379:36	15	initImage
LEAF_NODE	379:36	379:36	16	initImage
LEAF_NODE	379:45	379:45	15	(
LEAF_NODE	379:46	379:46	15	)
LEAF_NODE	379:47	379:47	13	;
EXPR_STATEMENT	380:36	380:51	12	setWindowSize ( ) ;
EXPR	380:36	380:36	13	setWindowSize ( )
FUNCTION_CALL	380:36	380:50	14	setWindowSize ( )
CALLEE	380:36	380:36	15	setWindowSize
LEAF_NODE	380:36	380:36	16	setWindowSize
LEAF_NODE	380:49	380:49	15	(
LEAF_NODE	380:50	380:50	15	)
LEAF_NODE	380:51	380:51	13	;
LEAF_NODE	381:24	381:24	11	}
LEAF_NODE	382:20	382:20	8	}
SELECTION	382:22	382:27	6	
KEYWORD	382:22	382:22	7	else
LEAF_NODE	382:22	382:22	8	else
STATEMENTS	382:27	387:20	7	
LEAF_NODE	382:27	382:27	8	{
STATEMENTS	383:28	386:28	8	
EXPR_STATEMENT	383:28	383:50	9	TIFFRGBAImageEnd ( & img ) ;
EXPR	383:28	383:28	10	TIFFRGBAImageEnd ( & img )
FUNCTION_CALL	383:28	383:49	11	TIFFRGBAImageEnd ( & img )
CALLEE	383:28	383:28	12	TIFFRGBAImageEnd
LEAF_NODE	383:28	383:28	13	TIFFRGBAImageEnd
LEAF_NODE	383:44	383:44	12	(
ARGUMENT	383:45	383:45	12	& img
UNARY_EXPR	383:45	383:46	13	& img
UNARY_OPERATOR	383:45	383:45	14	&
LEAF_NODE	383:45	383:45	15	&
FIELD	383:46	383:46	14	img
LEAF_NODE	383:46	383:46	15	img
LEAF_NODE	383:49	383:49	12	)
LEAF_NODE	383:50	383:50	10	;
EXPR_STATEMENT	384:28	384:39	9	prevImage ( ) ;
EXPR	384:28	384:28	10	prevImage ( )
FUNCTION_CALL	384:28	384:38	11	prevImage ( )
CALLEE	384:28	384:28	12	prevImage
LEAF_NODE	384:28	384:28	13	prevImage
LEAF_NODE	384:37	384:37	12	(
LEAF_NODE	384:38	384:38	12	)
LEAF_NODE	384:39	384:39	10	;
EXPR_STATEMENT	385:28	385:39	9	initImage ( ) ;
EXPR	385:28	385:28	10	initImage ( )
FUNCTION_CALL	385:28	385:38	11	initImage ( )
CALLEE	385:28	385:28	12	initImage
LEAF_NODE	385:28	385:28	13	initImage
LEAF_NODE	385:37	385:37	12	(
LEAF_NODE	385:38	385:38	12	)
LEAF_NODE	385:39	385:39	10	;
EXPR_STATEMENT	386:28	386:43	9	setWindowSize ( ) ;
EXPR	386:28	386:28	10	setWindowSize ( )
FUNCTION_CALL	386:28	386:42	11	setWindowSize ( )
CALLEE	386:28	386:28	12	setWindowSize
LEAF_NODE	386:28	386:28	13	setWindowSize
LEAF_NODE	386:41	386:41	12	(
LEAF_NODE	386:42	386:42	12	)
LEAF_NODE	386:43	386:43	10	;
LEAF_NODE	387:20	387:20	8	}
JUMP_STATEMENT	388:16	388:21	6	break DESTINATION ;
KEYWORD	388:16	388:16	7	break
LEAF_NODE	388:16	388:16	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	388:21	388:21	7	;
LABEL	389:16	389:39	6	case GLUT_KEY_PAGE_DOWN :
LEAF_NODE	389:16	389:16	7	case
LEAF_NODE	389:21	389:21	7	GLUT_KEY_PAGE_DOWN
LEAF_NODE	389:39	389:39	7	:
SELECTION	390:20	390:49	6	
KEYWORD	390:20	390:20	7	if
LEAF_NODE	390:20	390:20	8	if
LEAF_NODE	390:23	390:23	7	(
CONDITION	390:24	390:24	7	! TIFFLastDirectory ( tif )
EXPR	390:24	390:24	8	! TIFFLastDirectory ( tif )
UNARY_EXPR	390:24	390:25	9	! TIFFLastDirectory ( tif )
UNARY_OPERATOR	390:24	390:24	10	!
LEAF_NODE	390:24	390:24	11	!
FUNCTION_CALL	390:25	390:46	10	TIFFLastDirectory ( tif )
CALLEE	390:25	390:25	11	TIFFLastDirectory
LEAF_NODE	390:25	390:25	12	TIFFLastDirectory
LEAF_NODE	390:42	390:42	11	(
ARGUMENT	390:43	390:43	11	tif
FIELD	390:43	390:43	12	tif
LEAF_NODE	390:43	390:43	13	tif
LEAF_NODE	390:46	390:46	11	)
LEAF_NODE	390:47	390:47	7	)
STATEMENTS	390:49	395:20	7	
LEAF_NODE	390:49	390:49	8	{
STATEMENTS	391:28	391:28	8	
SELECTION	391:28	391:56	9	
KEYWORD	391:28	391:28	10	if
LEAF_NODE	391:28	391:28	11	if
LEAF_NODE	391:31	391:31	10	(
CONDITION	391:32	391:32	10	TIFFReadDirectory ( tif )
EXPR	391:32	391:32	11	TIFFReadDirectory ( tif )
FUNCTION_CALL	391:32	391:53	12	TIFFReadDirectory ( tif )
CALLEE	391:32	391:32	13	TIFFReadDirectory
LEAF_NODE	391:32	391:32	14	TIFFReadDirectory
LEAF_NODE	391:49	391:49	13	(
ARGUMENT	391:50	391:50	13	tif
FIELD	391:50	391:50	14	tif
LEAF_NODE	391:50	391:50	15	tif
LEAF_NODE	391:53	391:53	13	)
LEAF_NODE	391:54	391:54	10	)
STATEMENTS	391:56	394:28	10	
LEAF_NODE	391:56	391:56	11	{
STATEMENTS	392:36	393:36	11	
EXPR_STATEMENT	392:36	392:47	12	initImage ( ) ;
EXPR	392:36	392:36	13	initImage ( )
FUNCTION_CALL	392:36	392:46	14	initImage ( )
CALLEE	392:36	392:36	15	initImage
LEAF_NODE	392:36	392:36	16	initImage
LEAF_NODE	392:45	392:45	15	(
LEAF_NODE	392:46	392:46	15	)
LEAF_NODE	392:47	392:47	13	;
EXPR_STATEMENT	393:36	393:51	12	setWindowSize ( ) ;
EXPR	393:36	393:36	13	setWindowSize ( )
FUNCTION_CALL	393:36	393:50	14	setWindowSize ( )
CALLEE	393:36	393:36	15	setWindowSize
LEAF_NODE	393:36	393:36	16	setWindowSize
LEAF_NODE	393:49	393:49	15	(
LEAF_NODE	393:50	393:50	15	)
LEAF_NODE	393:51	393:51	13	;
LEAF_NODE	394:28	394:28	11	}
LEAF_NODE	395:20	395:20	8	}
SELECTION	395:22	395:27	6	
KEYWORD	395:22	395:22	7	else
LEAF_NODE	395:22	395:22	8	else
STATEMENTS	395:27	400:20	7	
LEAF_NODE	395:27	395:27	8	{
STATEMENTS	396:28	399:28	8	
EXPR_STATEMENT	396:28	396:50	9	TIFFRGBAImageEnd ( & img ) ;
EXPR	396:28	396:28	10	TIFFRGBAImageEnd ( & img )
FUNCTION_CALL	396:28	396:49	11	TIFFRGBAImageEnd ( & img )
CALLEE	396:28	396:28	12	TIFFRGBAImageEnd
LEAF_NODE	396:28	396:28	13	TIFFRGBAImageEnd
LEAF_NODE	396:44	396:44	12	(
ARGUMENT	396:45	396:45	12	& img
UNARY_EXPR	396:45	396:46	13	& img
UNARY_OPERATOR	396:45	396:45	14	&
LEAF_NODE	396:45	396:45	15	&
FIELD	396:46	396:46	14	img
LEAF_NODE	396:46	396:46	15	img
LEAF_NODE	396:49	396:49	12	)
LEAF_NODE	396:50	396:50	10	;
EXPR_STATEMENT	397:28	397:39	9	nextImage ( ) ;
EXPR	397:28	397:28	10	nextImage ( )
FUNCTION_CALL	397:28	397:38	11	nextImage ( )
CALLEE	397:28	397:28	12	nextImage
LEAF_NODE	397:28	397:28	13	nextImage
LEAF_NODE	397:37	397:37	12	(
LEAF_NODE	397:38	397:38	12	)
LEAF_NODE	397:39	397:39	10	;
EXPR_STATEMENT	398:28	398:39	9	initImage ( ) ;
EXPR	398:28	398:28	10	initImage ( )
FUNCTION_CALL	398:28	398:38	11	initImage ( )
CALLEE	398:28	398:28	12	initImage
LEAF_NODE	398:28	398:28	13	initImage
LEAF_NODE	398:37	398:37	12	(
LEAF_NODE	398:38	398:38	12	)
LEAF_NODE	398:39	398:39	10	;
EXPR_STATEMENT	399:28	399:43	9	setWindowSize ( ) ;
EXPR	399:28	399:28	10	setWindowSize ( )
FUNCTION_CALL	399:28	399:42	11	setWindowSize ( )
CALLEE	399:28	399:28	12	setWindowSize
LEAF_NODE	399:28	399:28	13	setWindowSize
LEAF_NODE	399:41	399:41	12	(
LEAF_NODE	399:42	399:42	12	)
LEAF_NODE	399:43	399:43	10	;
LEAF_NODE	400:20	400:20	8	}
JUMP_STATEMENT	401:16	401:21	6	break DESTINATION ;
KEYWORD	401:16	401:16	7	break
LEAF_NODE	401:16	401:16	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	401:21	401:21	7	;
LABEL	402:16	402:34	6	case GLUT_KEY_HOME :
LEAF_NODE	402:16	402:16	7	case
LEAF_NODE	402:21	402:21	7	GLUT_KEY_HOME
LEAF_NODE	402:34	402:34	7	:
SELECTION	403:24	403:54	6	
KEYWORD	403:24	403:24	7	if
LEAF_NODE	403:24	403:24	8	if
LEAF_NODE	403:27	403:27	7	(
CONDITION	403:28	403:28	7	TIFFSetDirectory ( tif , 0 )
EXPR	403:28	403:28	8	TIFFSetDirectory ( tif , 0 )
FUNCTION_CALL	403:28	403:51	9	TIFFSetDirectory ( tif , 0 )
CALLEE	403:28	403:28	10	TIFFSetDirectory
LEAF_NODE	403:28	403:28	11	TIFFSetDirectory
LEAF_NODE	403:44	403:44	10	(
ARGUMENT	403:45	403:45	10	tif
FIELD	403:45	403:45	11	tif
LEAF_NODE	403:45	403:45	12	tif
LEAF_NODE	403:48	403:48	10	,
ARGUMENT	403:50	403:50	10	0
FIELD	403:50	403:50	11	0
LEAF_NODE	403:50	403:50	12	0
LEAF_NODE	403:51	403:51	10	)
LEAF_NODE	403:52	403:52	7	)
STATEMENTS	403:54	407:24	7	
LEAF_NODE	403:54	403:54	8	{
STATEMENTS	404:32	406:32	8	
EXPR_STATEMENT	404:32	404:54	9	TIFFRGBAImageEnd ( & img ) ;
EXPR	404:32	404:32	10	TIFFRGBAImageEnd ( & img )
FUNCTION_CALL	404:32	404:53	11	TIFFRGBAImageEnd ( & img )
CALLEE	404:32	404:32	12	TIFFRGBAImageEnd
LEAF_NODE	404:32	404:32	13	TIFFRGBAImageEnd
LEAF_NODE	404:48	404:48	12	(
ARGUMENT	404:49	404:49	12	& img
UNARY_EXPR	404:49	404:50	13	& img
UNARY_OPERATOR	404:49	404:49	14	&
LEAF_NODE	404:49	404:49	15	&
FIELD	404:50	404:50	14	img
LEAF_NODE	404:50	404:50	15	img
LEAF_NODE	404:53	404:53	12	)
LEAF_NODE	404:54	404:54	10	;
EXPR_STATEMENT	405:32	405:43	9	initImage ( ) ;
EXPR	405:32	405:32	10	initImage ( )
FUNCTION_CALL	405:32	405:42	11	initImage ( )
CALLEE	405:32	405:32	12	initImage
LEAF_NODE	405:32	405:32	13	initImage
LEAF_NODE	405:41	405:41	12	(
LEAF_NODE	405:42	405:42	12	)
LEAF_NODE	405:43	405:43	10	;
EXPR_STATEMENT	406:32	406:47	9	setWindowSize ( ) ;
EXPR	406:32	406:32	10	setWindowSize ( )
FUNCTION_CALL	406:32	406:46	11	setWindowSize ( )
CALLEE	406:32	406:32	12	setWindowSize
LEAF_NODE	406:32	406:32	13	setWindowSize
LEAF_NODE	406:45	406:45	12	(
LEAF_NODE	406:46	406:46	12	)
LEAF_NODE	406:47	406:47	10	;
LEAF_NODE	407:24	407:24	8	}
JUMP_STATEMENT	408:16	408:21	6	break DESTINATION ;
KEYWORD	408:16	408:16	7	break
LEAF_NODE	408:16	408:16	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	408:21	408:21	7	;
LABEL	409:16	409:33	6	case GLUT_KEY_END :
LEAF_NODE	409:16	409:16	7	case
LEAF_NODE	409:21	409:21	7	GLUT_KEY_END
LEAF_NODE	409:33	409:33	7	:
EXPR_STATEMENT	410:24	410:46	6	TIFFRGBAImageEnd ( & img ) ;
EXPR	410:24	410:24	7	TIFFRGBAImageEnd ( & img )
FUNCTION_CALL	410:24	410:45	8	TIFFRGBAImageEnd ( & img )
CALLEE	410:24	410:24	9	TIFFRGBAImageEnd
LEAF_NODE	410:24	410:24	10	TIFFRGBAImageEnd
LEAF_NODE	410:40	410:40	9	(
ARGUMENT	410:41	410:41	9	& img
UNARY_EXPR	410:41	410:42	10	& img
UNARY_OPERATOR	410:41	410:41	11	&
LEAF_NODE	410:41	410:41	12	&
FIELD	410:42	410:42	11	img
LEAF_NODE	410:42	410:42	12	img
LEAF_NODE	410:45	410:45	9	)
LEAF_NODE	410:46	410:46	7	;
ITERATION	411:24	412:32	6	
KEYWORD	411:24	411:24	7	while
LEAF_NODE	411:24	411:24	8	while
LEAF_NODE	411:30	411:30	7	(
CONDITION	411:31	411:31	7	! TIFFLastDirectory ( tif )
EXPR	411:31	411:31	8	! TIFFLastDirectory ( tif )
UNARY_EXPR	411:31	411:32	9	! TIFFLastDirectory ( tif )
UNARY_OPERATOR	411:31	411:31	10	!
LEAF_NODE	411:31	411:31	11	!
FUNCTION_CALL	411:32	411:53	10	TIFFLastDirectory ( tif )
CALLEE	411:32	411:32	11	TIFFLastDirectory
LEAF_NODE	411:32	411:32	12	TIFFLastDirectory
LEAF_NODE	411:49	411:49	11	(
ARGUMENT	411:50	411:50	11	tif
FIELD	411:50	411:50	12	tif
LEAF_NODE	411:50	411:50	13	tif
LEAF_NODE	411:53	411:53	11	)
LEAF_NODE	411:54	411:54	7	)
STATEMENTS	412:32	412:32	7	
EXPR_STATEMENT	412:32	412:54	8	TIFFReadDirectory ( tif ) ;
EXPR	412:32	412:32	9	TIFFReadDirectory ( tif )
FUNCTION_CALL	412:32	412:53	10	TIFFReadDirectory ( tif )
CALLEE	412:32	412:32	11	TIFFReadDirectory
LEAF_NODE	412:32	412:32	12	TIFFReadDirectory
LEAF_NODE	412:49	412:49	11	(
ARGUMENT	412:50	412:50	11	tif
FIELD	412:50	412:50	12	tif
LEAF_NODE	412:50	412:50	13	tif
LEAF_NODE	412:53	412:53	11	)
LEAF_NODE	412:54	412:54	9	;
EXPR_STATEMENT	413:24	413:35	6	initImage ( ) ;
EXPR	413:24	413:24	7	initImage ( )
FUNCTION_CALL	413:24	413:34	8	initImage ( )
CALLEE	413:24	413:24	9	initImage
LEAF_NODE	413:24	413:24	10	initImage
LEAF_NODE	413:33	413:33	9	(
LEAF_NODE	413:34	413:34	9	)
LEAF_NODE	413:35	413:35	7	;
EXPR_STATEMENT	414:24	414:39	6	setWindowSize ( ) ;
EXPR	414:24	414:24	7	setWindowSize ( )
FUNCTION_CALL	414:24	414:38	8	setWindowSize ( )
CALLEE	414:24	414:24	9	setWindowSize
LEAF_NODE	414:24	414:24	10	setWindowSize
LEAF_NODE	414:37	414:37	9	(
LEAF_NODE	414:38	414:38	9	)
LEAF_NODE	414:39	414:39	7	;
JUMP_STATEMENT	415:16	415:21	6	break DESTINATION ;
KEYWORD	415:16	415:16	7	break
LEAF_NODE	415:16	415:16	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	415:21	415:21	7	;
LEAF_NODE	416:8	416:8	5	}
EXPR_STATEMENT	417:8	417:27	3	glutPostRedisplay ( ) ;
EXPR	417:8	417:8	4	glutPostRedisplay ( )
FUNCTION_CALL	417:8	417:26	5	glutPostRedisplay ( )
CALLEE	417:8	417:8	6	glutPostRedisplay
LEAF_NODE	417:8	417:8	7	glutPostRedisplay
LEAF_NODE	417:25	417:25	6	(
LEAF_NODE	417:26	417:26	6	)
LEAF_NODE	417:27	417:27	4	;
LEAF_NODE	418:0	418:0	2	}
FUNCTION_DEF	442:0	453:0	1	
RETURN_TYPE	442:0	442:7	2	static void
LEAF_NODE	442:0	442:0	3	static
TYPE_NAME	442:7	442:7	3	void
LEAF_NODE	442:7	442:7	4	void
FUNCTION_NAME	443:0	443:0	2	usage
LEAF_NODE	443:0	443:0	3	usage
PARAMETER_LIST	443:5	443:10	2	( void )
LEAF_NODE	443:5	443:5	3	(
PARAMETER_DECL	443:6	443:6	3	void
LEAF_NODE	443:6	443:6	4	void
LEAF_NODE	443:10	443:10	3	)
LEAF_NODE	444:0	444:0	2	{
STATEMENTS	445:8	452:8	2	
SIMPLE_DECL	445:8	445:24	3	char [ BUFSIZ ] buf ;
VAR_DECL	445:8	445:13	4	char [ BUFSIZ ] buf
TYPE	445:8	445:16	5	char [ BUFSIZ ]
TYPE_NAME	445:8	445:8	6	char
LEAF_NODE	445:8	445:8	7	char
TYPE_SUFFIX	445:16	445:23	6	[ BUFSIZ ]
LEAF_NODE	445:16	445:16	7	[
FIELD	445:17	445:17	7	BUFSIZ
LEAF_NODE	445:17	445:17	8	BUFSIZ
LEAF_NODE	445:23	445:23	7	]
NAME	445:13	445:13	5	buf
LEAF_NODE	445:13	445:13	6	buf
LEAF_NODE	445:24	445:24	4	;
SIMPLE_DECL	446:8	446:13	3	int i ;
VAR_DECL	446:8	446:12	4	int i
TYPE	446:8	446:8	5	int
TYPE_NAME	446:8	446:8	6	int
LEAF_NODE	446:8	446:8	7	int
NAME	446:12	446:12	5	i
LEAF_NODE	446:12	446:12	6	i
LEAF_NODE	446:13	446:13	4	;
EXPR_STATEMENT	448:8	448:27	3	setbuf ( stderr , buf ) ;
EXPR	448:8	448:8	4	setbuf ( stderr , buf )
FUNCTION_CALL	448:8	448:26	5	setbuf ( stderr , buf )
CALLEE	448:8	448:8	6	setbuf
LEAF_NODE	448:8	448:8	7	setbuf
LEAF_NODE	448:14	448:14	6	(
ARGUMENT	448:15	448:15	6	stderr
FIELD	448:15	448:15	7	stderr
LEAF_NODE	448:15	448:15	8	stderr
LEAF_NODE	448:21	448:21	6	,
ARGUMENT	448:23	448:23	6	buf
FIELD	448:23	448:23	7	buf
LEAF_NODE	448:23	448:23	8	buf
LEAF_NODE	448:26	448:26	6	)
LEAF_NODE	448:27	448:27	4	;
EXPR_STATEMENT	449:16	449:59	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	449:16	449:16	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	449:16	449:58	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	449:16	449:16	6	fprintf
LEAF_NODE	449:16	449:16	7	fprintf
LEAF_NODE	449:23	449:23	6	(
ARGUMENT	449:24	449:24	6	stderr
FIELD	449:24	449:24	7	stderr
LEAF_NODE	449:24	449:24	8	stderr
LEAF_NODE	449:30	449:30	6	,
ARGUMENT	449:32	449:32	6	"%s\n\n"
FIELD	449:32	449:32	7	"%s\n\n"
LEAF_NODE	449:32	449:32	8	"%s\n\n"
LEAF_NODE	449:40	449:40	6	,
ARGUMENT	449:42	449:42	6	TIFFGetVersion ( )
FUNCTION_CALL	449:42	449:57	7	TIFFGetVersion ( )
CALLEE	449:42	449:42	8	TIFFGetVersion
LEAF_NODE	449:42	449:42	9	TIFFGetVersion
LEAF_NODE	449:56	449:56	8	(
LEAF_NODE	449:57	449:57	8	)
LEAF_NODE	449:58	449:58	6	)
LEAF_NODE	449:59	449:59	4	;
ITERATION	450:8	451:16	3	
KEYWORD	450:8	450:8	4	for
LEAF_NODE	450:8	450:8	5	for
LEAF_NODE	450:12	450:12	4	(
FOR_INIT	450:13	450:18	4	i = 0 ;
EXPR	450:13	450:13	5	i = 0
ASSIGN	450:13	450:17	6	i = 0
LVAL	450:13	450:13	7	i
FIELD	450:13	450:13	8	i
LEAF_NODE	450:13	450:13	9	i
ASSIGN_OP	450:15	450:15	7	=
LEAF_NODE	450:15	450:15	8	=
RVAL	450:17	450:17	7	0
FIELD	450:17	450:17	8	0
LEAF_NODE	450:17	450:17	9	0
LEAF_NODE	450:18	450:18	5	;
CONDITION	450:20	450:20	4	stuff [ i ] != NULL
EXPR	450:20	450:32	5	stuff [ i ] != NULL
FIELD	450:20	450:27	6	stuff [ i ]
LEAF_NODE	450:20	450:20	7	stuff
LEAF_NODE	450:25	450:25	7	[
EXPR	450:26	450:26	7	i
FIELD	450:26	450:26	8	i
LEAF_NODE	450:26	450:26	9	i
LEAF_NODE	450:27	450:27	7	]
EQ_OPERATOR	450:29	450:29	6	!=
LEAF_NODE	450:29	450:29	7	!=
FIELD	450:32	450:32	6	NULL
LEAF_NODE	450:32	450:32	7	NULL
LEAF_NODE	450:36	450:36	4	;
FOR_EXPR	450:38	450:38	4	i ++
EXPR	450:38	450:38	5	i ++
FIELD	450:38	450:39	6	i ++
LEAF_NODE	450:38	450:38	7	i
LEAF_NODE	450:39	450:39	7	++
LEAF_NODE	450:41	450:41	4	)
STATEMENTS	451:16	451:16	4	
EXPR_STATEMENT	451:16	451:49	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	451:16	451:16	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	451:16	451:48	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	451:16	451:16	8	fprintf
LEAF_NODE	451:16	451:16	9	fprintf
LEAF_NODE	451:23	451:23	8	(
ARGUMENT	451:24	451:24	8	stderr
FIELD	451:24	451:24	9	stderr
LEAF_NODE	451:24	451:24	10	stderr
LEAF_NODE	451:30	451:30	8	,
ARGUMENT	451:32	451:32	8	"%s\n"
FIELD	451:32	451:32	9	"%s\n"
LEAF_NODE	451:32	451:32	10	"%s\n"
LEAF_NODE	451:38	451:38	8	,
ARGUMENT	451:40	451:40	8	stuff [ i ]
FIELD	451:40	451:47	9	stuff [ i ]
LEAF_NODE	451:40	451:40	10	stuff
LEAF_NODE	451:45	451:45	10	[
EXPR	451:46	451:46	10	i
FIELD	451:46	451:46	11	i
LEAF_NODE	451:46	451:46	12	i
LEAF_NODE	451:47	451:47	10	]
LEAF_NODE	451:48	451:48	8	)
LEAF_NODE	451:49	451:49	6	;
EXPR_STATEMENT	452:8	452:16	3	exit ( - 1 ) ;
EXPR	452:8	452:8	4	exit ( - 1 )
FUNCTION_CALL	452:8	452:15	5	exit ( - 1 )
CALLEE	452:8	452:8	6	exit
LEAF_NODE	452:8	452:8	7	exit
LEAF_NODE	452:12	452:12	6	(
ARGUMENT	452:13	452:13	6	- 1
UNARY_EXPR	452:13	452:14	7	- 1
UNARY_OPERATOR	452:13	452:13	8	-
LEAF_NODE	452:13	452:13	9	-
FIELD	452:14	452:14	8	1
LEAF_NODE	452:14	452:14	9	1
LEAF_NODE	452:15	452:15	6	)
LEAF_NODE	452:16	452:16	4	;
LEAF_NODE	453:0	453:0	2	}
FUNCTION_DEF	455:0	480:0	1	
RETURN_TYPE	455:0	455:7	2	static uint16
LEAF_NODE	455:0	455:0	3	static
TYPE_NAME	455:7	455:7	3	uint16
LEAF_NODE	455:7	455:7	4	uint16
FUNCTION_NAME	456:0	456:0	2	photoArg
LEAF_NODE	456:0	456:0	3	photoArg
PARAMETER_LIST	456:8	456:24	2	( const char * arg )
LEAF_NODE	456:8	456:8	3	(
PARAMETER_DECL	456:9	456:21	3	const char * arg
TYPE	456:9	456:19	4	const char *
TYPE_NAME	456:9	456:15	5	const char
LEAF_NODE	456:9	456:9	6	const
LEAF_NODE	456:15	456:15	6	char
POINTER	456:19	456:19	5	*
LEAF_NODE	456:19	456:19	6	*
NAME	456:21	456:21	4	arg
LEAF_NODE	456:21	456:21	5	arg
LEAF_NODE	456:24	456:24	3	)
LEAF_NODE	457:0	457:0	2	{
STATEMENTS	458:8	478:8	2	
SELECTION	458:8	459:12	3	
KEYWORD	458:8	458:8	4	if
LEAF_NODE	458:8	458:8	5	if
LEAF_NODE	458:11	458:11	4	(
CONDITION	458:12	458:12	4	strcmp ( arg , "miniswhite" ) == 0
EXPR	458:12	458:41	5	strcmp ( arg , "miniswhite" ) == 0
FUNCTION_CALL	458:12	458:36	6	strcmp ( arg , "miniswhite" )
CALLEE	458:12	458:12	7	strcmp
LEAF_NODE	458:12	458:12	8	strcmp
LEAF_NODE	458:18	458:18	7	(
ARGUMENT	458:19	458:19	7	arg
FIELD	458:19	458:19	8	arg
LEAF_NODE	458:19	458:19	9	arg
LEAF_NODE	458:22	458:22	7	,
ARGUMENT	458:24	458:24	7	"miniswhite"
FIELD	458:24	458:24	8	"miniswhite"
LEAF_NODE	458:24	458:24	9	"miniswhite"
LEAF_NODE	458:36	458:36	7	)
EQ_OPERATOR	458:38	458:38	6	==
LEAF_NODE	458:38	458:38	7	==
FIELD	458:41	458:41	6	0
LEAF_NODE	458:41	458:41	7	0
LEAF_NODE	458:42	458:42	4	)
STATEMENTS	459:12	459:12	4	
LEAF_NODE	459:12	459:12	5	return
LEAF_NODE	459:19	459:19	3	(
LEAF_NODE	459:20	459:20	3	PHOTOMETRIC_MINISWHITE
LEAF_NODE	459:42	459:42	3	)
LEAF_NODE	459:43	459:43	3	;
SELECTION	460:8	460:13	3	
KEYWORD	460:8	460:8	4	else
LEAF_NODE	460:8	460:8	5	else
STATEMENTS	460:13	460:13	4	
SELECTION	460:13	461:12	5	
KEYWORD	460:13	460:13	6	if
LEAF_NODE	460:13	460:13	7	if
LEAF_NODE	460:16	460:16	6	(
CONDITION	460:17	460:17	6	strcmp ( arg , "minisblack" ) == 0
EXPR	460:17	460:46	7	strcmp ( arg , "minisblack" ) == 0
FUNCTION_CALL	460:17	460:41	8	strcmp ( arg , "minisblack" )
CALLEE	460:17	460:17	9	strcmp
LEAF_NODE	460:17	460:17	10	strcmp
LEAF_NODE	460:23	460:23	9	(
ARGUMENT	460:24	460:24	9	arg
FIELD	460:24	460:24	10	arg
LEAF_NODE	460:24	460:24	11	arg
LEAF_NODE	460:27	460:27	9	,
ARGUMENT	460:29	460:29	9	"minisblack"
FIELD	460:29	460:29	10	"minisblack"
LEAF_NODE	460:29	460:29	11	"minisblack"
LEAF_NODE	460:41	460:41	9	)
EQ_OPERATOR	460:43	460:43	8	==
LEAF_NODE	460:43	460:43	9	==
FIELD	460:46	460:46	8	0
LEAF_NODE	460:46	460:46	9	0
LEAF_NODE	460:47	460:47	6	)
STATEMENTS	461:12	461:12	6	
LEAF_NODE	461:12	461:12	7	return
LEAF_NODE	461:19	461:19	3	(
LEAF_NODE	461:20	461:20	3	PHOTOMETRIC_MINISBLACK
LEAF_NODE	461:42	461:42	3	)
LEAF_NODE	461:43	461:43	3	;
SELECTION	462:8	462:13	3	
KEYWORD	462:8	462:8	4	else
LEAF_NODE	462:8	462:8	5	else
STATEMENTS	462:13	462:13	4	
SELECTION	462:13	463:12	5	
KEYWORD	462:13	462:13	6	if
LEAF_NODE	462:13	462:13	7	if
LEAF_NODE	462:16	462:16	6	(
CONDITION	462:17	462:17	6	strcmp ( arg , "rgb" ) == 0
EXPR	462:17	462:39	7	strcmp ( arg , "rgb" ) == 0
FUNCTION_CALL	462:17	462:34	8	strcmp ( arg , "rgb" )
CALLEE	462:17	462:17	9	strcmp
LEAF_NODE	462:17	462:17	10	strcmp
LEAF_NODE	462:23	462:23	9	(
ARGUMENT	462:24	462:24	9	arg
FIELD	462:24	462:24	10	arg
LEAF_NODE	462:24	462:24	11	arg
LEAF_NODE	462:27	462:27	9	,
ARGUMENT	462:29	462:29	9	"rgb"
FIELD	462:29	462:29	10	"rgb"
LEAF_NODE	462:29	462:29	11	"rgb"
LEAF_NODE	462:34	462:34	9	)
EQ_OPERATOR	462:36	462:36	8	==
LEAF_NODE	462:36	462:36	9	==
FIELD	462:39	462:39	8	0
LEAF_NODE	462:39	462:39	9	0
LEAF_NODE	462:40	462:40	6	)
STATEMENTS	463:12	463:12	6	
LEAF_NODE	463:12	463:12	7	return
LEAF_NODE	463:19	463:19	3	(
LEAF_NODE	463:20	463:20	3	PHOTOMETRIC_RGB
LEAF_NODE	463:35	463:35	3	)
LEAF_NODE	463:36	463:36	3	;
SELECTION	464:8	464:13	3	
KEYWORD	464:8	464:8	4	else
LEAF_NODE	464:8	464:8	5	else
STATEMENTS	464:13	464:13	4	
SELECTION	464:13	465:12	5	
KEYWORD	464:13	464:13	6	if
LEAF_NODE	464:13	464:13	7	if
LEAF_NODE	464:16	464:16	6	(
CONDITION	464:17	464:17	6	strcmp ( arg , "palette" ) == 0
EXPR	464:17	464:43	7	strcmp ( arg , "palette" ) == 0
FUNCTION_CALL	464:17	464:38	8	strcmp ( arg , "palette" )
CALLEE	464:17	464:17	9	strcmp
LEAF_NODE	464:17	464:17	10	strcmp
LEAF_NODE	464:23	464:23	9	(
ARGUMENT	464:24	464:24	9	arg
FIELD	464:24	464:24	10	arg
LEAF_NODE	464:24	464:24	11	arg
LEAF_NODE	464:27	464:27	9	,
ARGUMENT	464:29	464:29	9	"palette"
FIELD	464:29	464:29	10	"palette"
LEAF_NODE	464:29	464:29	11	"palette"
LEAF_NODE	464:38	464:38	9	)
EQ_OPERATOR	464:40	464:40	8	==
LEAF_NODE	464:40	464:40	9	==
FIELD	464:43	464:43	8	0
LEAF_NODE	464:43	464:43	9	0
LEAF_NODE	464:44	464:44	6	)
STATEMENTS	465:12	465:12	6	
LEAF_NODE	465:12	465:12	7	return
LEAF_NODE	465:19	465:19	3	(
LEAF_NODE	465:20	465:20	3	PHOTOMETRIC_PALETTE
LEAF_NODE	465:39	465:39	3	)
LEAF_NODE	465:40	465:40	3	;
SELECTION	466:8	466:13	3	
KEYWORD	466:8	466:8	4	else
LEAF_NODE	466:8	466:8	5	else
STATEMENTS	466:13	466:13	4	
SELECTION	466:13	467:12	5	
KEYWORD	466:13	466:13	6	if
LEAF_NODE	466:13	466:13	7	if
LEAF_NODE	466:16	466:16	6	(
CONDITION	466:17	466:17	6	strcmp ( arg , "mask" ) == 0
EXPR	466:17	466:40	7	strcmp ( arg , "mask" ) == 0
FUNCTION_CALL	466:17	466:35	8	strcmp ( arg , "mask" )
CALLEE	466:17	466:17	9	strcmp
LEAF_NODE	466:17	466:17	10	strcmp
LEAF_NODE	466:23	466:23	9	(
ARGUMENT	466:24	466:24	9	arg
FIELD	466:24	466:24	10	arg
LEAF_NODE	466:24	466:24	11	arg
LEAF_NODE	466:27	466:27	9	,
ARGUMENT	466:29	466:29	9	"mask"
FIELD	466:29	466:29	10	"mask"
LEAF_NODE	466:29	466:29	11	"mask"
LEAF_NODE	466:35	466:35	9	)
EQ_OPERATOR	466:37	466:37	8	==
LEAF_NODE	466:37	466:37	9	==
FIELD	466:40	466:40	8	0
LEAF_NODE	466:40	466:40	9	0
LEAF_NODE	466:41	466:41	6	)
STATEMENTS	467:12	467:12	6	
LEAF_NODE	467:12	467:12	7	return
LEAF_NODE	467:19	467:19	3	(
LEAF_NODE	467:20	467:20	3	PHOTOMETRIC_MASK
LEAF_NODE	467:36	467:36	3	)
LEAF_NODE	467:37	467:37	3	;
SELECTION	468:8	468:13	3	
KEYWORD	468:8	468:8	4	else
LEAF_NODE	468:8	468:8	5	else
STATEMENTS	468:13	468:13	4	
SELECTION	468:13	469:12	5	
KEYWORD	468:13	468:13	6	if
LEAF_NODE	468:13	468:13	7	if
LEAF_NODE	468:16	468:16	6	(
CONDITION	468:17	468:17	6	strcmp ( arg , "separated" ) == 0
EXPR	468:17	468:45	7	strcmp ( arg , "separated" ) == 0
FUNCTION_CALL	468:17	468:40	8	strcmp ( arg , "separated" )
CALLEE	468:17	468:17	9	strcmp
LEAF_NODE	468:17	468:17	10	strcmp
LEAF_NODE	468:23	468:23	9	(
ARGUMENT	468:24	468:24	9	arg
FIELD	468:24	468:24	10	arg
LEAF_NODE	468:24	468:24	11	arg
LEAF_NODE	468:27	468:27	9	,
ARGUMENT	468:29	468:29	9	"separated"
FIELD	468:29	468:29	10	"separated"
LEAF_NODE	468:29	468:29	11	"separated"
LEAF_NODE	468:40	468:40	9	)
EQ_OPERATOR	468:42	468:42	8	==
LEAF_NODE	468:42	468:42	9	==
FIELD	468:45	468:45	8	0
LEAF_NODE	468:45	468:45	9	0
LEAF_NODE	468:46	468:46	6	)
STATEMENTS	469:12	469:12	6	
LEAF_NODE	469:12	469:12	7	return
LEAF_NODE	469:19	469:19	3	(
LEAF_NODE	469:20	469:20	3	PHOTOMETRIC_SEPARATED
LEAF_NODE	469:41	469:41	3	)
LEAF_NODE	469:42	469:42	3	;
SELECTION	470:8	470:13	3	
KEYWORD	470:8	470:8	4	else
LEAF_NODE	470:8	470:8	5	else
STATEMENTS	470:13	470:13	4	
SELECTION	470:13	471:12	5	
KEYWORD	470:13	470:13	6	if
LEAF_NODE	470:13	470:13	7	if
LEAF_NODE	470:16	470:16	6	(
CONDITION	470:17	470:17	6	strcmp ( arg , "ycbcr" ) == 0
EXPR	470:17	470:41	7	strcmp ( arg , "ycbcr" ) == 0
FUNCTION_CALL	470:17	470:36	8	strcmp ( arg , "ycbcr" )
CALLEE	470:17	470:17	9	strcmp
LEAF_NODE	470:17	470:17	10	strcmp
LEAF_NODE	470:23	470:23	9	(
ARGUMENT	470:24	470:24	9	arg
FIELD	470:24	470:24	10	arg
LEAF_NODE	470:24	470:24	11	arg
LEAF_NODE	470:27	470:27	9	,
ARGUMENT	470:29	470:29	9	"ycbcr"
FIELD	470:29	470:29	10	"ycbcr"
LEAF_NODE	470:29	470:29	11	"ycbcr"
LEAF_NODE	470:36	470:36	9	)
EQ_OPERATOR	470:38	470:38	8	==
LEAF_NODE	470:38	470:38	9	==
FIELD	470:41	470:41	8	0
LEAF_NODE	470:41	470:41	9	0
LEAF_NODE	470:42	470:42	6	)
STATEMENTS	471:12	471:12	6	
LEAF_NODE	471:12	471:12	7	return
LEAF_NODE	471:19	471:19	3	(
LEAF_NODE	471:20	471:20	3	PHOTOMETRIC_YCBCR
LEAF_NODE	471:37	471:37	3	)
LEAF_NODE	471:38	471:38	3	;
SELECTION	472:8	472:13	3	
KEYWORD	472:8	472:8	4	else
LEAF_NODE	472:8	472:8	5	else
STATEMENTS	472:13	472:13	4	
SELECTION	472:13	473:12	5	
KEYWORD	472:13	472:13	6	if
LEAF_NODE	472:13	472:13	7	if
LEAF_NODE	472:16	472:16	6	(
CONDITION	472:17	472:17	6	strcmp ( arg , "cielab" ) == 0
EXPR	472:17	472:42	7	strcmp ( arg , "cielab" ) == 0
FUNCTION_CALL	472:17	472:37	8	strcmp ( arg , "cielab" )
CALLEE	472:17	472:17	9	strcmp
LEAF_NODE	472:17	472:17	10	strcmp
LEAF_NODE	472:23	472:23	9	(
ARGUMENT	472:24	472:24	9	arg
FIELD	472:24	472:24	10	arg
LEAF_NODE	472:24	472:24	11	arg
LEAF_NODE	472:27	472:27	9	,
ARGUMENT	472:29	472:29	9	"cielab"
FIELD	472:29	472:29	10	"cielab"
LEAF_NODE	472:29	472:29	11	"cielab"
LEAF_NODE	472:37	472:37	9	)
EQ_OPERATOR	472:39	472:39	8	==
LEAF_NODE	472:39	472:39	9	==
FIELD	472:42	472:42	8	0
LEAF_NODE	472:42	472:42	9	0
LEAF_NODE	472:43	472:43	6	)
STATEMENTS	473:12	473:12	6	
LEAF_NODE	473:12	473:12	7	return
LEAF_NODE	473:19	473:19	3	(
LEAF_NODE	473:20	473:20	3	PHOTOMETRIC_CIELAB
LEAF_NODE	473:38	473:38	3	)
LEAF_NODE	473:39	473:39	3	;
SELECTION	474:8	474:13	3	
KEYWORD	474:8	474:8	4	else
LEAF_NODE	474:8	474:8	5	else
STATEMENTS	474:13	474:13	4	
SELECTION	474:13	475:12	5	
KEYWORD	474:13	474:13	6	if
LEAF_NODE	474:13	474:13	7	if
LEAF_NODE	474:16	474:16	6	(
CONDITION	474:17	474:17	6	strcmp ( arg , "logl" ) == 0
EXPR	474:17	474:40	7	strcmp ( arg , "logl" ) == 0
FUNCTION_CALL	474:17	474:35	8	strcmp ( arg , "logl" )
CALLEE	474:17	474:17	9	strcmp
LEAF_NODE	474:17	474:17	10	strcmp
LEAF_NODE	474:23	474:23	9	(
ARGUMENT	474:24	474:24	9	arg
FIELD	474:24	474:24	10	arg
LEAF_NODE	474:24	474:24	11	arg
LEAF_NODE	474:27	474:27	9	,
ARGUMENT	474:29	474:29	9	"logl"
FIELD	474:29	474:29	10	"logl"
LEAF_NODE	474:29	474:29	11	"logl"
LEAF_NODE	474:35	474:35	9	)
EQ_OPERATOR	474:37	474:37	8	==
LEAF_NODE	474:37	474:37	9	==
FIELD	474:40	474:40	8	0
LEAF_NODE	474:40	474:40	9	0
LEAF_NODE	474:41	474:41	6	)
STATEMENTS	475:12	475:12	6	
LEAF_NODE	475:12	475:12	7	return
LEAF_NODE	475:19	475:19	3	(
LEAF_NODE	475:20	475:20	3	PHOTOMETRIC_LOGL
LEAF_NODE	475:36	475:36	3	)
LEAF_NODE	475:37	475:37	3	;
SELECTION	476:8	476:13	3	
KEYWORD	476:8	476:8	4	else
LEAF_NODE	476:8	476:8	5	else
STATEMENTS	476:13	476:13	4	
SELECTION	476:13	477:12	5	
KEYWORD	476:13	476:13	6	if
LEAF_NODE	476:13	476:13	7	if
LEAF_NODE	476:16	476:16	6	(
CONDITION	476:17	476:17	6	strcmp ( arg , "logluv" ) == 0
EXPR	476:17	476:42	7	strcmp ( arg , "logluv" ) == 0
FUNCTION_CALL	476:17	476:37	8	strcmp ( arg , "logluv" )
CALLEE	476:17	476:17	9	strcmp
LEAF_NODE	476:17	476:17	10	strcmp
LEAF_NODE	476:23	476:23	9	(
ARGUMENT	476:24	476:24	9	arg
FIELD	476:24	476:24	10	arg
LEAF_NODE	476:24	476:24	11	arg
LEAF_NODE	476:27	476:27	9	,
ARGUMENT	476:29	476:29	9	"logluv"
FIELD	476:29	476:29	10	"logluv"
LEAF_NODE	476:29	476:29	11	"logluv"
LEAF_NODE	476:37	476:37	9	)
EQ_OPERATOR	476:39	476:39	8	==
LEAF_NODE	476:39	476:39	9	==
FIELD	476:42	476:42	8	0
LEAF_NODE	476:42	476:42	9	0
LEAF_NODE	476:43	476:43	6	)
STATEMENTS	477:12	477:12	6	
LEAF_NODE	477:12	477:12	7	return
LEAF_NODE	477:19	477:19	3	(
LEAF_NODE	477:20	477:20	3	PHOTOMETRIC_LOGLUV
LEAF_NODE	477:38	477:38	3	)
LEAF_NODE	477:39	477:39	3	;
SELECTION	478:8	479:12	3	
KEYWORD	478:8	478:8	4	else
LEAF_NODE	478:8	478:8	5	else
STATEMENTS	479:12	479:12	4	
JUMP_STATEMENT	479:12	479:32	5	return ( ( uint16 ) - 1 ) ;
KEYWORD	479:12	479:12	6	return
LEAF_NODE	479:12	479:12	7	return
DESTINATION	479:19	479:19	6	( ( uint16 ) - 1 )
EXPR	479:19	479:31	7	( ( uint16 ) - 1 )
LEAF_NODE	479:19	479:19	8	(
LEAF_NODE	479:20	479:20	8	(
TYPE_NAME	479:21	479:21	8	uint16
LEAF_NODE	479:21	479:21	9	uint16
LEAF_NODE	479:27	479:27	8	)
UNARY_EXPR	479:29	479:30	8	- 1
UNARY_OPERATOR	479:29	479:29	9	-
LEAF_NODE	479:29	479:29	10	-
FIELD	479:30	479:30	9	1
LEAF_NODE	479:30	479:30	10	1
LEAF_NODE	479:31	479:31	8	)
LEAF_NODE	479:32	479:32	6	;
LEAF_NODE	480:0	480:0	2	}
