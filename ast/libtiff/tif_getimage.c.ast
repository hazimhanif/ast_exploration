SOURCE_FILE	40:7	2954:0	0	
SIMPLE_DECL	40:7	40:45	1	int BuildMapUaToAa ; BuildMapUaToAa BuildMapUaToAa ( TIFFRGBAImage * img ) ;
VAR_DECL	40:7	40:11	2	int BuildMapUaToAa ; BuildMapUaToAa BuildMapUaToAa ( TIFFRGBAImage * img )
TYPE	40:7	40:7	3	int
TYPE_NAME	40:7	40:7	4	int
LEAF_NODE	40:7	40:7	5	int
NAME	40:11	40:11	3	BuildMapUaToAa
LEAF_NODE	40:11	40:11	4	BuildMapUaToAa
LEAF_NODE	0:0	0:0	3	;
INIT	40:11	40:11	3	BuildMapUaToAa BuildMapUaToAa ( TIFFRGBAImage * img )
ASSIGN	40:11	40:25	4	BuildMapUaToAa BuildMapUaToAa ( TIFFRGBAImage * img )
LVAL	40:11	40:11	5	BuildMapUaToAa
NAME	40:11	40:11	6	BuildMapUaToAa
LEAF_NODE	40:11	40:11	7	BuildMapUaToAa
ASSIGN_OP	40:11	40:11	5	BuildMapUaToAa
NAME	40:11	40:11	6	BuildMapUaToAa
LEAF_NODE	40:11	40:11	7	BuildMapUaToAa
RVAL	40:25	40:44	5	( TIFFRGBAImage * img )
LEAF_NODE	40:25	40:25	6	(
EXPR	40:26	40:41	6	TIFFRGBAImage * img
FIELD	40:26	40:26	7	TIFFRGBAImage
LEAF_NODE	40:26	40:26	8	TIFFRGBAImage
LEAF_NODE	40:39	40:39	7	*
FIELD	40:41	40:41	7	img
LEAF_NODE	40:41	40:41	8	img
LEAF_NODE	40:44	40:44	6	)
LEAF_NODE	40:45	40:45	2	;
SIMPLE_DECL	41:7	41:52	1	int BuildMapBitdepth16To8 ; BuildMapBitdepth16To8 BuildMapBitdepth16To8 ( TIFFRGBAImage * img ) ;
VAR_DECL	41:7	41:11	2	int BuildMapBitdepth16To8 ; BuildMapBitdepth16To8 BuildMapBitdepth16To8 ( TIFFRGBAImage * img )
TYPE	41:7	41:7	3	int
TYPE_NAME	41:7	41:7	4	int
LEAF_NODE	41:7	41:7	5	int
NAME	41:11	41:11	3	BuildMapBitdepth16To8
LEAF_NODE	41:11	41:11	4	BuildMapBitdepth16To8
LEAF_NODE	0:0	0:0	3	;
INIT	41:11	41:11	3	BuildMapBitdepth16To8 BuildMapBitdepth16To8 ( TIFFRGBAImage * img )
ASSIGN	41:11	41:32	4	BuildMapBitdepth16To8 BuildMapBitdepth16To8 ( TIFFRGBAImage * img )
LVAL	41:11	41:11	5	BuildMapBitdepth16To8
NAME	41:11	41:11	6	BuildMapBitdepth16To8
LEAF_NODE	41:11	41:11	7	BuildMapBitdepth16To8
ASSIGN_OP	41:11	41:11	5	BuildMapBitdepth16To8
NAME	41:11	41:11	6	BuildMapBitdepth16To8
LEAF_NODE	41:11	41:11	7	BuildMapBitdepth16To8
RVAL	41:32	41:51	5	( TIFFRGBAImage * img )
LEAF_NODE	41:32	41:32	6	(
EXPR	41:33	41:48	6	TIFFRGBAImage * img
FIELD	41:33	41:33	7	TIFFRGBAImage
LEAF_NODE	41:33	41:33	8	TIFFRGBAImage
LEAF_NODE	41:46	41:46	7	*
FIELD	41:48	41:48	7	img
LEAF_NODE	41:48	41:48	8	img
LEAF_NODE	41:51	41:51	6	)
LEAF_NODE	41:52	41:52	2	;
SIMPLE_DECL	43:7	43:58	1	const char [ ] photoTag ; photoTag = "PhotometricInterpretation" ;
VAR_DECL	43:7	43:18	2	const char [ ] photoTag ; photoTag = "PhotometricInterpretation"
TYPE	43:7	43:26	3	const char [ ]
TYPE_NAME	43:7	43:13	4	const char
LEAF_NODE	43:7	43:7	5	const
LEAF_NODE	43:13	43:13	5	char
TYPE_SUFFIX	43:26	43:27	4	[ ]
LEAF_NODE	43:26	43:26	5	[
LEAF_NODE	43:27	43:27	5	]
NAME	43:18	43:18	3	photoTag
LEAF_NODE	43:18	43:18	4	photoTag
LEAF_NODE	0:0	0:0	3	;
INIT	43:18	43:18	3	photoTag = "PhotometricInterpretation"
ASSIGN	43:18	43:31	4	photoTag = "PhotometricInterpretation"
LVAL	43:18	43:18	5	photoTag
NAME	43:18	43:18	6	photoTag
LEAF_NODE	43:18	43:18	7	photoTag
ASSIGN_OP	43:29	43:29	5	=
LEAF_NODE	43:29	43:29	6	=
RVAL	43:31	43:31	5	"PhotometricInterpretation"
FIELD	43:31	43:31	6	"PhotometricInterpretation"
LEAF_NODE	43:31	43:31	7	"PhotometricInterpretation"
LEAF_NODE	43:58	43:58	2	;
FUNCTION_DEF	73:0	211:0	1	
RETURN_TYPE	73:0	73:0	2	int
TYPE_NAME	73:0	73:0	3	int
LEAF_NODE	73:0	73:0	4	int
FUNCTION_NAME	74:0	74:0	2	TIFFRGBAImageOK
LEAF_NODE	74:0	74:0	3	TIFFRGBAImageOK
PARAMETER_LIST	74:15	74:42	2	( TIFF * tif , char [ 1024 ] emsg )
LEAF_NODE	74:15	74:15	3	(
PARAMETER_DECL	74:16	74:22	3	TIFF * tif
TYPE	74:16	74:20	4	TIFF *
TYPE_NAME	74:16	74:16	5	TIFF
LEAF_NODE	74:16	74:16	6	TIFF
POINTER	74:20	74:20	5	*
LEAF_NODE	74:20	74:20	6	*
NAME	74:22	74:22	4	tif
LEAF_NODE	74:22	74:22	5	tif
LEAF_NODE	74:25	74:25	3	,
PARAMETER_DECL	74:27	74:32	3	char [ 1024 ] emsg
TYPE	74:27	74:36	4	char [ 1024 ]
TYPE_NAME	74:27	74:27	5	char
LEAF_NODE	74:27	74:27	6	char
TYPE_SUFFIX	74:36	74:41	5	[ 1024 ]
LEAF_NODE	74:36	74:36	6	[
FIELD	74:37	74:37	6	1024
LEAF_NODE	74:37	74:37	7	1024
LEAF_NODE	74:41	74:41	6	]
NAME	74:32	74:32	4	emsg
LEAF_NODE	74:32	74:32	5	emsg
LEAF_NODE	74:42	74:42	3	)
LEAF_NODE	75:0	75:0	2	{
STATEMENTS	76:1	210:1	2	
SIMPLE_DECL	76:1	76:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	76:1	76:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	76:1	76:14	5	TIFFDirectory *
TYPE_NAME	76:1	76:1	6	TIFFDirectory
LEAF_NODE	76:1	76:1	7	TIFFDirectory
POINTER	76:14	76:14	6	*
LEAF_NODE	76:14	76:14	7	*
NAME	76:16	76:16	5	td
LEAF_NODE	76:16	76:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	76:16	76:16	5	td = & tif -> tif_dir
ASSIGN	76:16	76:21	6	td = & tif -> tif_dir
LVAL	76:16	76:16	7	td
NAME	76:16	76:16	8	td
LEAF_NODE	76:16	76:16	9	td
ASSIGN_OP	76:19	76:19	7	=
LEAF_NODE	76:19	76:19	8	=
RVAL	76:21	76:21	7	& tif -> tif_dir
UNARY_EXPR	76:21	76:22	8	& tif -> tif_dir
UNARY_OPERATOR	76:21	76:21	9	&
LEAF_NODE	76:21	76:21	10	&
FIELD	76:22	76:27	9	tif -> tif_dir
LEAF_NODE	76:22	76:22	10	tif
LEAF_NODE	76:25	76:25	10	->
LEAF_NODE	76:27	76:27	10	tif_dir
LEAF_NODE	76:34	76:34	4	;
SIMPLE_DECL	77:1	77:19	3	uint16 photometric ;
VAR_DECL	77:1	77:8	4	uint16 photometric
TYPE	77:1	77:1	5	uint16
TYPE_NAME	77:1	77:1	6	uint16
LEAF_NODE	77:1	77:1	7	uint16
NAME	77:8	77:8	5	photometric
LEAF_NODE	77:8	77:8	6	photometric
LEAF_NODE	77:19	77:19	4	;
SIMPLE_DECL	78:1	78:18	3	int colorchannels ;
VAR_DECL	78:1	78:5	4	int colorchannels
TYPE	78:1	78:1	5	int
TYPE_NAME	78:1	78:1	6	int
LEAF_NODE	78:1	78:1	7	int
NAME	78:5	78:5	5	colorchannels
LEAF_NODE	78:5	78:5	6	colorchannels
LEAF_NODE	78:18	78:18	4	;
SELECTION	80:1	80:29	3	
KEYWORD	80:1	80:1	4	if
LEAF_NODE	80:1	80:1	5	if
LEAF_NODE	80:4	80:4	4	(
CONDITION	80:5	80:5	4	! tif -> tif_decodestatus
EXPR	80:5	80:5	5	! tif -> tif_decodestatus
UNARY_EXPR	80:5	80:6	6	! tif -> tif_decodestatus
UNARY_OPERATOR	80:5	80:5	7	!
LEAF_NODE	80:5	80:5	8	!
FIELD	80:6	80:11	7	tif -> tif_decodestatus
LEAF_NODE	80:6	80:6	8	tif
LEAF_NODE	80:9	80:9	8	->
LEAF_NODE	80:11	80:11	8	tif_decodestatus
LEAF_NODE	80:27	80:27	4	)
STATEMENTS	80:29	83:1	4	
LEAF_NODE	80:29	80:29	5	{
STATEMENTS	81:2	82:2	5	
EXPR_STATEMENT	81:2	81:72	6	sprintf ( emsg , "Sorry, requested compression method is not configured" ) ;
EXPR	81:2	81:2	7	sprintf ( emsg , "Sorry, requested compression method is not configured" )
FUNCTION_CALL	81:2	81:71	8	sprintf ( emsg , "Sorry, requested compression method is not configured" )
CALLEE	81:2	81:2	9	sprintf
LEAF_NODE	81:2	81:2	10	sprintf
LEAF_NODE	81:9	81:9	9	(
ARGUMENT	81:10	81:10	9	emsg
FIELD	81:10	81:10	10	emsg
LEAF_NODE	81:10	81:10	11	emsg
LEAF_NODE	81:14	81:14	9	,
ARGUMENT	81:16	81:16	9	"Sorry, requested compression method is not configured"
FIELD	81:16	81:16	10	"Sorry, requested compression method is not configured"
LEAF_NODE	81:16	81:16	11	"Sorry, requested compression method is not configured"
LEAF_NODE	81:71	81:71	9	)
LEAF_NODE	81:72	81:72	7	;
JUMP_STATEMENT	82:2	82:12	6	return ( 0 ) ;
KEYWORD	82:2	82:2	7	return
LEAF_NODE	82:2	82:2	8	return
DESTINATION	82:9	82:9	7	( 0 )
EXPR	82:9	82:11	8	( 0 )
LEAF_NODE	82:9	82:9	9	(
FIELD	82:10	82:10	9	0
LEAF_NODE	82:10	82:10	10	0
LEAF_NODE	82:11	82:11	9	)
LEAF_NODE	82:12	82:12	7	;
LEAF_NODE	83:1	83:1	5	}
SELECTION	84:1	84:31	3	
KEYWORD	84:1	84:1	4	switch
LEAF_NODE	84:1	84:1	5	switch
LEAF_NODE	84:8	84:8	4	(
CONDITION	84:9	84:9	4	td -> td_bitspersample
EXPR	84:9	84:9	5	td -> td_bitspersample
FIELD	84:9	84:13	6	td -> td_bitspersample
LEAF_NODE	84:9	84:9	7	td
LEAF_NODE	84:11	84:11	7	->
LEAF_NODE	84:13	84:13	7	td_bitspersample
LEAF_NODE	84:29	84:29	4	)
STATEMENTS	84:31	95:1	4	
LEAF_NODE	84:31	84:31	5	{
STATEMENTS	85:2	94:3	5	
LABEL	85:2	85:8	6	case 1 :
LEAF_NODE	85:2	85:2	7	case
LEAF_NODE	85:7	85:7	7	1
LEAF_NODE	85:8	85:8	7	:
LABEL	86:2	86:8	6	case 2 :
LEAF_NODE	86:2	86:2	7	case
LEAF_NODE	86:7	86:7	7	2
LEAF_NODE	86:8	86:8	7	:
LABEL	87:2	87:8	6	case 4 :
LEAF_NODE	87:2	87:2	7	case
LEAF_NODE	87:7	87:7	7	4
LEAF_NODE	87:8	87:8	7	:
LABEL	88:2	88:8	6	case 8 :
LEAF_NODE	88:2	88:2	7	case
LEAF_NODE	88:7	88:7	7	8
LEAF_NODE	88:8	88:8	7	:
LABEL	89:2	89:9	6	case 16 :
LEAF_NODE	89:2	89:2	7	case
LEAF_NODE	89:7	89:7	7	16
LEAF_NODE	89:9	89:9	7	:
JUMP_STATEMENT	90:3	90:8	6	break DESTINATION ;
KEYWORD	90:3	90:3	7	break
LEAF_NODE	90:3	90:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	90:8	90:8	7	;
LABEL	91:2	91:9	6	default :
LEAF_NODE	91:2	91:2	7	default
LEAF_NODE	91:9	91:9	7	:
EXPR_STATEMENT	92:3	93:28	6	sprintf ( emsg , "Sorry, can not handle images with %d-bit samples" , td -> td_bitspersample ) ;
EXPR	92:3	92:3	7	sprintf ( emsg , "Sorry, can not handle images with %d-bit samples" , td -> td_bitspersample )
FUNCTION_CALL	92:3	93:27	8	sprintf ( emsg , "Sorry, can not handle images with %d-bit samples" , td -> td_bitspersample )
CALLEE	92:3	92:3	9	sprintf
LEAF_NODE	92:3	92:3	10	sprintf
LEAF_NODE	92:10	92:10	9	(
ARGUMENT	92:11	92:11	9	emsg
FIELD	92:11	92:11	10	emsg
LEAF_NODE	92:11	92:11	11	emsg
LEAF_NODE	92:15	92:15	9	,
ARGUMENT	92:17	92:17	9	"Sorry, can not handle images with %d-bit samples"
FIELD	92:17	92:17	10	"Sorry, can not handle images with %d-bit samples"
LEAF_NODE	92:17	92:17	11	"Sorry, can not handle images with %d-bit samples"
LEAF_NODE	92:67	92:67	9	,
ARGUMENT	93:7	93:7	9	td -> td_bitspersample
FIELD	93:7	93:11	10	td -> td_bitspersample
LEAF_NODE	93:7	93:7	11	td
LEAF_NODE	93:9	93:9	11	->
LEAF_NODE	93:11	93:11	11	td_bitspersample
LEAF_NODE	93:27	93:27	9	)
LEAF_NODE	93:28	93:28	7	;
JUMP_STATEMENT	94:3	94:13	6	return ( 0 ) ;
KEYWORD	94:3	94:3	7	return
LEAF_NODE	94:3	94:3	8	return
DESTINATION	94:10	94:10	7	( 0 )
EXPR	94:10	94:12	8	( 0 )
LEAF_NODE	94:10	94:10	9	(
FIELD	94:11	94:11	9	0
LEAF_NODE	94:11	94:11	10	0
LEAF_NODE	94:12	94:12	9	)
LEAF_NODE	94:13	94:13	7	;
LEAF_NODE	95:1	95:1	5	}
SELECTION	96:8	96:56	3	
KEYWORD	96:8	96:8	4	if
LEAF_NODE	96:8	96:8	5	if
LEAF_NODE	96:11	96:11	4	(
CONDITION	96:12	96:12	4	td -> td_sampleformat == SAMPLEFORMAT_IEEEFP
EXPR	96:12	96:35	5	td -> td_sampleformat == SAMPLEFORMAT_IEEEFP
FIELD	96:12	96:16	6	td -> td_sampleformat
LEAF_NODE	96:12	96:12	7	td
LEAF_NODE	96:14	96:14	7	->
LEAF_NODE	96:16	96:16	7	td_sampleformat
EQ_OPERATOR	96:32	96:32	6	==
LEAF_NODE	96:32	96:32	7	==
FIELD	96:35	96:35	6	SAMPLEFORMAT_IEEEFP
LEAF_NODE	96:35	96:35	7	SAMPLEFORMAT_IEEEFP
LEAF_NODE	96:54	96:54	4	)
STATEMENTS	96:56	99:8	4	
LEAF_NODE	96:56	96:56	5	{
STATEMENTS	97:16	98:16	5	
EXPR_STATEMENT	97:16	97:94	6	sprintf ( emsg , "Sorry, can not handle images with IEEE floating-point samples" ) ;
EXPR	97:16	97:16	7	sprintf ( emsg , "Sorry, can not handle images with IEEE floating-point samples" )
FUNCTION_CALL	97:16	97:93	8	sprintf ( emsg , "Sorry, can not handle images with IEEE floating-point samples" )
CALLEE	97:16	97:16	9	sprintf
LEAF_NODE	97:16	97:16	10	sprintf
LEAF_NODE	97:23	97:23	9	(
ARGUMENT	97:24	97:24	9	emsg
FIELD	97:24	97:24	10	emsg
LEAF_NODE	97:24	97:24	11	emsg
LEAF_NODE	97:28	97:28	9	,
ARGUMENT	97:30	97:30	9	"Sorry, can not handle images with IEEE floating-point samples"
FIELD	97:30	97:30	10	"Sorry, can not handle images with IEEE floating-point samples"
LEAF_NODE	97:30	97:30	11	"Sorry, can not handle images with IEEE floating-point samples"
LEAF_NODE	97:93	97:93	9	)
LEAF_NODE	97:94	97:94	7	;
JUMP_STATEMENT	98:16	98:26	6	return ( 0 ) ;
KEYWORD	98:16	98:16	7	return
LEAF_NODE	98:16	98:16	8	return
DESTINATION	98:23	98:23	7	( 0 )
EXPR	98:23	98:25	8	( 0 )
LEAF_NODE	98:23	98:23	9	(
FIELD	98:24	98:24	9	0
LEAF_NODE	98:24	98:24	10	0
LEAF_NODE	98:25	98:25	9	)
LEAF_NODE	98:26	98:26	7	;
LEAF_NODE	99:8	99:8	5	}
EXPR_STATEMENT	100:1	100:61	3	colorchannels = td -> td_samplesperpixel - td -> td_extrasamples ;
EXPR	100:1	100:1	4	colorchannels = td -> td_samplesperpixel - td -> td_extrasamples
ASSIGN	100:1	100:17	5	colorchannels = td -> td_samplesperpixel - td -> td_extrasamples
LVAL	100:1	100:1	6	colorchannels
FIELD	100:1	100:1	7	colorchannels
LEAF_NODE	100:1	100:1	8	colorchannels
ASSIGN_OP	100:15	100:15	6	=
LEAF_NODE	100:15	100:15	7	=
RVAL	100:17	100:42	6	td -> td_samplesperpixel - td -> td_extrasamples
FIELD	100:17	100:21	7	td -> td_samplesperpixel
LEAF_NODE	100:17	100:17	8	td
LEAF_NODE	100:19	100:19	8	->
LEAF_NODE	100:21	100:21	8	td_samplesperpixel
LEAF_NODE	100:40	100:40	7	-
FIELD	100:42	100:46	7	td -> td_extrasamples
LEAF_NODE	100:42	100:42	8	td
LEAF_NODE	100:44	100:44	8	->
LEAF_NODE	100:46	100:46	8	td_extrasamples
LEAF_NODE	100:61	100:61	4	;
SELECTION	101:1	101:60	3	
KEYWORD	101:1	101:1	4	if
LEAF_NODE	101:1	101:1	5	if
LEAF_NODE	101:4	101:4	4	(
CONDITION	101:5	101:5	4	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & photometric )
EXPR	101:5	101:5	5	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & photometric )
UNARY_EXPR	101:5	101:6	6	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & photometric )
UNARY_OPERATOR	101:5	101:5	7	!
LEAF_NODE	101:5	101:5	8	!
FUNCTION_CALL	101:6	101:57	7	TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & photometric )
CALLEE	101:6	101:6	8	TIFFGetField
LEAF_NODE	101:6	101:6	9	TIFFGetField
LEAF_NODE	101:18	101:18	8	(
ARGUMENT	101:19	101:19	8	tif
FIELD	101:19	101:19	9	tif
LEAF_NODE	101:19	101:19	10	tif
LEAF_NODE	101:22	101:22	8	,
ARGUMENT	101:24	101:24	8	TIFFTAG_PHOTOMETRIC
FIELD	101:24	101:24	9	TIFFTAG_PHOTOMETRIC
LEAF_NODE	101:24	101:24	10	TIFFTAG_PHOTOMETRIC
LEAF_NODE	101:43	101:43	8	,
ARGUMENT	101:45	101:45	8	& photometric
UNARY_EXPR	101:45	101:46	9	& photometric
UNARY_OPERATOR	101:45	101:45	10	&
LEAF_NODE	101:45	101:45	11	&
FIELD	101:46	101:46	10	photometric
LEAF_NODE	101:46	101:46	11	photometric
LEAF_NODE	101:57	101:57	8	)
LEAF_NODE	101:58	101:58	4	)
STATEMENTS	101:60	113:1	4	
LEAF_NODE	101:60	101:60	5	{
STATEMENTS	102:2	102:2	5	
SELECTION	102:2	102:25	6	
KEYWORD	102:2	102:2	7	switch
LEAF_NODE	102:2	102:2	8	switch
LEAF_NODE	102:9	102:9	7	(
CONDITION	102:10	102:10	7	colorchannels
EXPR	102:10	102:10	8	colorchannels
FIELD	102:10	102:10	9	colorchannels
LEAF_NODE	102:10	102:10	10	colorchannels
LEAF_NODE	102:23	102:23	7	)
STATEMENTS	102:25	112:2	7	
LEAF_NODE	102:25	102:25	8	{
STATEMENTS	103:3	111:4	8	
LABEL	103:3	103:9	9	case 1 :
LEAF_NODE	103:3	103:3	10	case
LEAF_NODE	103:8	103:8	10	1
LEAF_NODE	103:9	103:9	10	:
EXPR_STATEMENT	104:4	104:40	9	photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	104:4	104:4	10	photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	104:4	104:18	11	photometric = PHOTOMETRIC_MINISBLACK
LVAL	104:4	104:4	12	photometric
FIELD	104:4	104:4	13	photometric
LEAF_NODE	104:4	104:4	14	photometric
ASSIGN_OP	104:16	104:16	12	=
LEAF_NODE	104:16	104:16	13	=
RVAL	104:18	104:18	12	PHOTOMETRIC_MINISBLACK
FIELD	104:18	104:18	13	PHOTOMETRIC_MINISBLACK
LEAF_NODE	104:18	104:18	14	PHOTOMETRIC_MINISBLACK
LEAF_NODE	104:40	104:40	10	;
JUMP_STATEMENT	105:4	105:9	9	break DESTINATION ;
KEYWORD	105:4	105:4	10	break
LEAF_NODE	105:4	105:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	105:9	105:9	10	;
LABEL	106:3	106:9	9	case 3 :
LEAF_NODE	106:3	106:3	10	case
LEAF_NODE	106:8	106:8	10	3
LEAF_NODE	106:9	106:9	10	:
EXPR_STATEMENT	107:4	107:33	9	photometric = PHOTOMETRIC_RGB ;
EXPR	107:4	107:4	10	photometric = PHOTOMETRIC_RGB
ASSIGN	107:4	107:18	11	photometric = PHOTOMETRIC_RGB
LVAL	107:4	107:4	12	photometric
FIELD	107:4	107:4	13	photometric
LEAF_NODE	107:4	107:4	14	photometric
ASSIGN_OP	107:16	107:16	12	=
LEAF_NODE	107:16	107:16	13	=
RVAL	107:18	107:18	12	PHOTOMETRIC_RGB
FIELD	107:18	107:18	13	PHOTOMETRIC_RGB
LEAF_NODE	107:18	107:18	14	PHOTOMETRIC_RGB
LEAF_NODE	107:33	107:33	10	;
JUMP_STATEMENT	108:4	108:9	9	break DESTINATION ;
KEYWORD	108:4	108:4	10	break
LEAF_NODE	108:4	108:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	108:9	108:9	10	;
LABEL	109:3	109:10	9	default :
LEAF_NODE	109:3	109:3	10	default
LEAF_NODE	109:10	109:10	10	:
EXPR_STATEMENT	110:4	110:52	9	sprintf ( emsg , "Missing needed %s tag" , photoTag ) ;
EXPR	110:4	110:4	10	sprintf ( emsg , "Missing needed %s tag" , photoTag )
FUNCTION_CALL	110:4	110:51	11	sprintf ( emsg , "Missing needed %s tag" , photoTag )
CALLEE	110:4	110:4	12	sprintf
LEAF_NODE	110:4	110:4	13	sprintf
LEAF_NODE	110:11	110:11	12	(
ARGUMENT	110:12	110:12	12	emsg
FIELD	110:12	110:12	13	emsg
LEAF_NODE	110:12	110:12	14	emsg
LEAF_NODE	110:16	110:16	12	,
ARGUMENT	110:18	110:18	12	"Missing needed %s tag"
FIELD	110:18	110:18	13	"Missing needed %s tag"
LEAF_NODE	110:18	110:18	14	"Missing needed %s tag"
LEAF_NODE	110:41	110:41	12	,
ARGUMENT	110:43	110:43	12	photoTag
FIELD	110:43	110:43	13	photoTag
LEAF_NODE	110:43	110:43	14	photoTag
LEAF_NODE	110:51	110:51	12	)
LEAF_NODE	110:52	110:52	10	;
JUMP_STATEMENT	111:4	111:14	9	return ( 0 ) ;
KEYWORD	111:4	111:4	10	return
LEAF_NODE	111:4	111:4	11	return
DESTINATION	111:11	111:11	10	( 0 )
EXPR	111:11	111:13	11	( 0 )
LEAF_NODE	111:11	111:11	12	(
FIELD	111:12	111:12	12	0
LEAF_NODE	111:12	111:12	13	0
LEAF_NODE	111:13	111:13	12	)
LEAF_NODE	111:14	111:14	10	;
LEAF_NODE	112:2	112:2	8	}
LEAF_NODE	113:1	113:1	5	}
SELECTION	114:1	114:22	3	
KEYWORD	114:1	114:1	4	switch
LEAF_NODE	114:1	114:1	5	switch
LEAF_NODE	114:8	114:8	4	(
CONDITION	114:9	114:9	4	photometric
EXPR	114:9	114:9	5	photometric
FIELD	114:9	114:9	6	photometric
LEAF_NODE	114:9	114:9	7	photometric
LEAF_NODE	114:20	114:20	4	)
STATEMENTS	114:22	209:1	4	
LEAF_NODE	114:22	114:22	5	{
STATEMENTS	115:2	208:3	5	
LABEL	115:2	115:29	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	115:2	115:2	7	case
LEAF_NODE	115:7	115:7	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	115:29	115:29	7	:
LABEL	116:2	116:29	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	116:2	116:2	7	case
LEAF_NODE	116:7	116:7	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	116:29	116:29	7	:
LABEL	117:2	117:26	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	117:2	117:2	7	case
LEAF_NODE	117:7	117:7	7	PHOTOMETRIC_PALETTE
LEAF_NODE	117:26	117:26	7	:
SELECTION	118:3	120:37	6	
KEYWORD	118:3	118:3	7	if
LEAF_NODE	118:3	118:3	8	if
LEAF_NODE	118:6	118:6	7	(
CONDITION	118:7	118:7	7	td -> td_planarconfig == PLANARCONFIG_CONTIG && td -> td_samplesperpixel != 1 && td -> td_bitspersample < 8
EXPR	118:7	118:7	8	td -> td_planarconfig == PLANARCONFIG_CONTIG && td -> td_samplesperpixel != 1 && td -> td_bitspersample < 8
AND	118:7	119:10	9	td -> td_planarconfig == PLANARCONFIG_CONTIG && td -> td_samplesperpixel != 1 && td -> td_bitspersample < 8
EXPR	118:7	118:30	10	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	118:7	118:11	11	td -> td_planarconfig
LEAF_NODE	118:7	118:7	12	td
LEAF_NODE	118:9	118:9	12	->
LEAF_NODE	118:11	118:11	12	td_planarconfig
EQ_OPERATOR	118:27	118:27	11	==
LEAF_NODE	118:27	118:27	12	==
FIELD	118:30	118:30	11	PLANARCONFIG_CONTIG
LEAF_NODE	118:30	118:30	12	PLANARCONFIG_CONTIG
LEAF_NODE	119:7	119:7	10	&&
EXPR	119:10	119:10	10	td -> td_samplesperpixel != 1 && td -> td_bitspersample < 8
AND	119:10	120:10	11	td -> td_samplesperpixel != 1 && td -> td_bitspersample < 8
EXPR	119:10	119:36	12	td -> td_samplesperpixel != 1
FIELD	119:10	119:14	13	td -> td_samplesperpixel
LEAF_NODE	119:10	119:10	14	td
LEAF_NODE	119:12	119:12	14	->
LEAF_NODE	119:14	119:14	14	td_samplesperpixel
EQ_OPERATOR	119:33	119:33	13	!=
LEAF_NODE	119:33	119:33	14	!=
FIELD	119:36	119:36	13	1
LEAF_NODE	119:36	119:36	14	1
LEAF_NODE	120:7	120:7	12	&&
EXPR	120:10	120:33	12	td -> td_bitspersample < 8
FIELD	120:10	120:14	13	td -> td_bitspersample
LEAF_NODE	120:10	120:10	14	td
LEAF_NODE	120:12	120:12	14	->
LEAF_NODE	120:14	120:14	14	td_bitspersample
REL_OPERATOR	120:31	120:31	13	<
LEAF_NODE	120:31	120:31	14	<
FIELD	120:33	120:33	13	8
LEAF_NODE	120:33	120:33	14	8
LEAF_NODE	120:35	120:35	7	)
STATEMENTS	120:37	128:3	7	
LEAF_NODE	120:37	120:37	8	{
STATEMENTS	121:4	127:4	8	
LEAF_NODE	121:4	121:4	9	sprintf
LEAF_NODE	121:11	121:11	9	(
LEAF_NODE	121:12	121:12	9	emsg
LEAF_NODE	121:16	121:16	9	,
LEAF_NODE	122:8	122:8	9	"Sorry, can not handle contiguous data with %s=%d, "
LEAF_NODE	123:8	123:8	9	"and %s=%d and Bits/Sample=%d"
LEAF_NODE	123:38	123:38	9	,
LEAF_NODE	124:8	124:8	9	photoTag
LEAF_NODE	124:16	124:16	9	,
LEAF_NODE	124:18	124:18	9	photometric
LEAF_NODE	124:29	124:29	9	,
LEAF_NODE	125:8	125:8	9	"Samples/pixel"
LEAF_NODE	125:23	125:23	9	,
LEAF_NODE	125:25	125:25	9	td
LEAF_NODE	125:27	125:27	9	->
LEAF_NODE	125:29	125:29	9	td_samplesperpixel
LEAF_NODE	125:47	125:47	9	,
LEAF_NODE	126:8	126:8	9	td
LEAF_NODE	126:10	126:10	9	->
LEAF_NODE	126:12	126:12	9	td_bitspersample
LEAF_NODE	126:28	126:28	9	)
LEAF_NODE	126:29	126:29	9	;
JUMP_STATEMENT	127:4	127:14	9	return ( 0 ) ;
KEYWORD	127:4	127:4	10	return
LEAF_NODE	127:4	127:4	11	return
DESTINATION	127:11	127:11	10	( 0 )
EXPR	127:11	127:13	11	( 0 )
LEAF_NODE	127:11	127:11	12	(
FIELD	127:12	127:12	12	0
LEAF_NODE	127:12	127:12	13	0
LEAF_NODE	127:13	127:13	12	)
LEAF_NODE	127:14	127:14	10	;
LEAF_NODE	128:3	128:3	8	}
JUMP_STATEMENT	134:3	134:8	6	break DESTINATION ;
KEYWORD	134:3	134:3	7	break
LEAF_NODE	134:3	134:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	134:8	134:8	7	;
LABEL	135:2	135:24	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	135:2	135:2	7	case
LEAF_NODE	135:7	135:7	7	PHOTOMETRIC_YCBCR
LEAF_NODE	135:24	135:24	7	:
JUMP_STATEMENT	142:3	142:8	6	break DESTINATION ;
KEYWORD	142:3	142:3	7	break
LEAF_NODE	142:3	142:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	142:8	142:8	7	;
LABEL	143:2	143:22	6	case PHOTOMETRIC_RGB :
LEAF_NODE	143:2	143:2	7	case
LEAF_NODE	143:7	143:7	7	PHOTOMETRIC_RGB
LEAF_NODE	143:22	143:22	7	:
SELECTION	144:3	144:26	6	
KEYWORD	144:3	144:3	7	if
LEAF_NODE	144:3	144:3	8	if
LEAF_NODE	144:6	144:6	7	(
CONDITION	144:7	144:7	7	colorchannels < 3
EXPR	144:7	144:23	8	colorchannels < 3
FIELD	144:7	144:7	9	colorchannels
LEAF_NODE	144:7	144:7	10	colorchannels
REL_OPERATOR	144:21	144:21	9	<
LEAF_NODE	144:21	144:21	10	<
FIELD	144:23	144:23	9	3
LEAF_NODE	144:23	144:23	10	3
LEAF_NODE	144:24	144:24	7	)
STATEMENTS	144:26	148:3	7	
LEAF_NODE	144:26	144:26	8	{
STATEMENTS	145:4	147:4	8	
EXPR_STATEMENT	145:4	146:40	9	sprintf ( emsg , "Sorry, can not handle RGB image with %s=%d" , "Color channels" , colorchannels ) ;
EXPR	145:4	145:4	10	sprintf ( emsg , "Sorry, can not handle RGB image with %s=%d" , "Color channels" , colorchannels )
FUNCTION_CALL	145:4	146:39	11	sprintf ( emsg , "Sorry, can not handle RGB image with %s=%d" , "Color channels" , colorchannels )
CALLEE	145:4	145:4	12	sprintf
LEAF_NODE	145:4	145:4	13	sprintf
LEAF_NODE	145:11	145:11	12	(
ARGUMENT	145:12	145:12	12	emsg
FIELD	145:12	145:12	13	emsg
LEAF_NODE	145:12	145:12	14	emsg
LEAF_NODE	145:16	145:16	12	,
ARGUMENT	145:18	145:18	12	"Sorry, can not handle RGB image with %s=%d"
FIELD	145:18	145:18	13	"Sorry, can not handle RGB image with %s=%d"
LEAF_NODE	145:18	145:18	14	"Sorry, can not handle RGB image with %s=%d"
LEAF_NODE	145:62	145:62	12	,
ARGUMENT	146:8	146:8	12	"Color channels"
FIELD	146:8	146:8	13	"Color channels"
LEAF_NODE	146:8	146:8	14	"Color channels"
LEAF_NODE	146:24	146:24	12	,
ARGUMENT	146:26	146:26	12	colorchannels
FIELD	146:26	146:26	13	colorchannels
LEAF_NODE	146:26	146:26	14	colorchannels
LEAF_NODE	146:39	146:39	12	)
LEAF_NODE	146:40	146:40	10	;
JUMP_STATEMENT	147:4	147:14	9	return ( 0 ) ;
KEYWORD	147:4	147:4	10	return
LEAF_NODE	147:4	147:4	11	return
DESTINATION	147:11	147:11	10	( 0 )
EXPR	147:11	147:13	11	( 0 )
LEAF_NODE	147:11	147:11	12	(
FIELD	147:12	147:12	12	0
LEAF_NODE	147:12	147:12	13	0
LEAF_NODE	147:13	147:13	12	)
LEAF_NODE	147:14	147:14	10	;
LEAF_NODE	148:3	148:3	8	}
JUMP_STATEMENT	149:3	149:8	6	break DESTINATION ;
KEYWORD	149:3	149:3	7	break
LEAF_NODE	149:3	149:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	149:8	149:8	7	;
LABEL	150:2	150:28	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	150:2	150:2	7	case
LEAF_NODE	150:7	150:7	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	150:28	150:28	7	:
LEAF_NODE	151:3	151:3	6	{
STATEMENTS	152:4	166:4	6	
SIMPLE_DECL	152:4	152:17	7	uint16 inkset ;
VAR_DECL	152:4	152:11	8	uint16 inkset
TYPE	152:4	152:4	9	uint16
TYPE_NAME	152:4	152:4	10	uint16
LEAF_NODE	152:4	152:4	11	uint16
NAME	152:11	152:11	9	inkset
LEAF_NODE	152:11	152:11	10	inkset
LEAF_NODE	152:17	152:17	8	;
EXPR_STATEMENT	153:4	153:55	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_INKSET , & inkset ) ;
EXPR	153:4	153:4	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_INKSET , & inkset )
FUNCTION_CALL	153:4	153:54	9	TIFFGetFieldDefaulted ( tif , TIFFTAG_INKSET , & inkset )
CALLEE	153:4	153:4	10	TIFFGetFieldDefaulted
LEAF_NODE	153:4	153:4	11	TIFFGetFieldDefaulted
LEAF_NODE	153:25	153:25	10	(
ARGUMENT	153:26	153:26	10	tif
FIELD	153:26	153:26	11	tif
LEAF_NODE	153:26	153:26	12	tif
LEAF_NODE	153:29	153:29	10	,
ARGUMENT	153:31	153:31	10	TIFFTAG_INKSET
FIELD	153:31	153:31	11	TIFFTAG_INKSET
LEAF_NODE	153:31	153:31	12	TIFFTAG_INKSET
LEAF_NODE	153:45	153:45	10	,
ARGUMENT	153:47	153:47	10	& inkset
UNARY_EXPR	153:47	153:48	11	& inkset
UNARY_OPERATOR	153:47	153:47	12	&
LEAF_NODE	153:47	153:47	13	&
FIELD	153:48	153:48	12	inkset
LEAF_NODE	153:48	153:48	13	inkset
LEAF_NODE	153:54	153:54	10	)
LEAF_NODE	153:55	153:55	8	;
SELECTION	154:4	154:31	7	
KEYWORD	154:4	154:4	8	if
LEAF_NODE	154:4	154:4	9	if
LEAF_NODE	154:7	154:7	8	(
CONDITION	154:8	154:8	8	inkset != INKSET_CMYK
EXPR	154:8	154:18	9	inkset != INKSET_CMYK
FIELD	154:8	154:8	10	inkset
LEAF_NODE	154:8	154:8	11	inkset
EQ_OPERATOR	154:15	154:15	10	!=
LEAF_NODE	154:15	154:15	11	!=
FIELD	154:18	154:18	10	INKSET_CMYK
LEAF_NODE	154:18	154:18	11	INKSET_CMYK
LEAF_NODE	154:29	154:29	8	)
STATEMENTS	154:31	159:4	8	
LEAF_NODE	154:31	154:31	9	{
STATEMENTS	155:5	158:5	9	
EXPR_STATEMENT	155:5	157:26	10	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "InkSet" , inkset ) ;
EXPR	155:5	155:5	11	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "InkSet" , inkset )
FUNCTION_CALL	155:5	157:25	12	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "InkSet" , inkset )
CALLEE	155:5	155:5	13	sprintf
LEAF_NODE	155:5	155:5	14	sprintf
LEAF_NODE	155:12	155:12	13	(
ARGUMENT	155:13	155:13	13	emsg
FIELD	155:13	155:13	14	emsg
LEAF_NODE	155:13	155:13	15	emsg
LEAF_NODE	155:17	155:17	13	,
ARGUMENT	156:9	156:9	13	"Sorry, can not handle separated image with %s=%d"
FIELD	156:9	156:9	14	"Sorry, can not handle separated image with %s=%d"
LEAF_NODE	156:9	156:9	15	"Sorry, can not handle separated image with %s=%d"
LEAF_NODE	156:59	156:59	13	,
ARGUMENT	157:9	157:9	13	"InkSet"
FIELD	157:9	157:9	14	"InkSet"
LEAF_NODE	157:9	157:9	15	"InkSet"
LEAF_NODE	157:17	157:17	13	,
ARGUMENT	157:19	157:19	13	inkset
FIELD	157:19	157:19	14	inkset
LEAF_NODE	157:19	157:19	15	inkset
LEAF_NODE	157:25	157:25	13	)
LEAF_NODE	157:26	157:26	11	;
JUMP_STATEMENT	158:5	158:13	10	return 0 ;
KEYWORD	158:5	158:5	11	return
LEAF_NODE	158:5	158:5	12	return
DESTINATION	158:12	158:12	11	0
EXPR	158:12	158:12	12	0
FIELD	158:12	158:12	13	0
LEAF_NODE	158:12	158:12	14	0
LEAF_NODE	158:13	158:13	11	;
LEAF_NODE	159:4	159:4	9	}
SELECTION	160:4	160:36	7	
KEYWORD	160:4	160:4	8	if
LEAF_NODE	160:4	160:4	9	if
LEAF_NODE	160:7	160:7	8	(
CONDITION	160:8	160:8	8	td -> td_samplesperpixel < 4
EXPR	160:8	160:33	9	td -> td_samplesperpixel < 4
FIELD	160:8	160:12	10	td -> td_samplesperpixel
LEAF_NODE	160:8	160:8	11	td
LEAF_NODE	160:10	160:10	11	->
LEAF_NODE	160:12	160:12	11	td_samplesperpixel
REL_OPERATOR	160:31	160:31	10	<
LEAF_NODE	160:31	160:31	11	<
FIELD	160:33	160:33	10	4
LEAF_NODE	160:33	160:33	11	4
LEAF_NODE	160:34	160:34	8	)
STATEMENTS	160:36	165:4	8	
LEAF_NODE	160:36	160:36	9	{
STATEMENTS	161:5	164:5	9	
EXPR_STATEMENT	161:5	163:49	10	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "Samples/pixel" , td -> td_samplesperpixel ) ;
EXPR	161:5	161:5	11	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "Samples/pixel" , td -> td_samplesperpixel )
FUNCTION_CALL	161:5	163:48	12	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "Samples/pixel" , td -> td_samplesperpixel )
CALLEE	161:5	161:5	13	sprintf
LEAF_NODE	161:5	161:5	14	sprintf
LEAF_NODE	161:12	161:12	13	(
ARGUMENT	161:13	161:13	13	emsg
FIELD	161:13	161:13	14	emsg
LEAF_NODE	161:13	161:13	15	emsg
LEAF_NODE	161:17	161:17	13	,
ARGUMENT	162:9	162:9	13	"Sorry, can not handle separated image with %s=%d"
FIELD	162:9	162:9	14	"Sorry, can not handle separated image with %s=%d"
LEAF_NODE	162:9	162:9	15	"Sorry, can not handle separated image with %s=%d"
LEAF_NODE	162:59	162:59	13	,
ARGUMENT	163:9	163:9	13	"Samples/pixel"
FIELD	163:9	163:9	14	"Samples/pixel"
LEAF_NODE	163:9	163:9	15	"Samples/pixel"
LEAF_NODE	163:24	163:24	13	,
ARGUMENT	163:26	163:26	13	td -> td_samplesperpixel
FIELD	163:26	163:30	14	td -> td_samplesperpixel
LEAF_NODE	163:26	163:26	15	td
LEAF_NODE	163:28	163:28	15	->
LEAF_NODE	163:30	163:30	15	td_samplesperpixel
LEAF_NODE	163:48	163:48	13	)
LEAF_NODE	163:49	163:49	11	;
JUMP_STATEMENT	164:5	164:13	10	return 0 ;
KEYWORD	164:5	164:5	11	return
LEAF_NODE	164:5	164:5	12	return
DESTINATION	164:12	164:12	11	0
EXPR	164:12	164:12	12	0
FIELD	164:12	164:12	13	0
LEAF_NODE	164:12	164:12	14	0
LEAF_NODE	164:13	164:13	11	;
LEAF_NODE	165:4	165:4	9	}
JUMP_STATEMENT	166:4	166:9	7	break DESTINATION ;
KEYWORD	166:4	166:4	8	break
LEAF_NODE	166:4	166:4	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	166:9	166:9	8	;
LEAF_NODE	167:3	167:3	6	}
LABEL	168:2	168:23	6	case PHOTOMETRIC_LOGL :
LEAF_NODE	168:2	168:2	7	case
LEAF_NODE	168:7	168:7	7	PHOTOMETRIC_LOGL
LEAF_NODE	168:23	168:23	7	:
SELECTION	169:3	169:49	6	
KEYWORD	169:3	169:3	7	if
LEAF_NODE	169:3	169:3	8	if
LEAF_NODE	169:6	169:6	7	(
CONDITION	169:7	169:7	7	td -> td_compression != COMPRESSION_SGILOG
EXPR	169:7	169:29	8	td -> td_compression != COMPRESSION_SGILOG
FIELD	169:7	169:11	9	td -> td_compression
LEAF_NODE	169:7	169:7	10	td
LEAF_NODE	169:9	169:9	10	->
LEAF_NODE	169:11	169:11	10	td_compression
EQ_OPERATOR	169:26	169:26	9	!=
LEAF_NODE	169:26	169:26	10	!=
FIELD	169:29	169:29	9	COMPRESSION_SGILOG
LEAF_NODE	169:29	169:29	10	COMPRESSION_SGILOG
LEAF_NODE	169:47	169:47	7	)
STATEMENTS	169:49	173:3	7	
LEAF_NODE	169:49	169:49	8	{
STATEMENTS	170:4	172:4	8	
EXPR_STATEMENT	170:4	171:42	9	sprintf ( emsg , "Sorry, LogL data must have %s=%d" , "Compression" , COMPRESSION_SGILOG ) ;
EXPR	170:4	170:4	10	sprintf ( emsg , "Sorry, LogL data must have %s=%d" , "Compression" , COMPRESSION_SGILOG )
FUNCTION_CALL	170:4	171:41	11	sprintf ( emsg , "Sorry, LogL data must have %s=%d" , "Compression" , COMPRESSION_SGILOG )
CALLEE	170:4	170:4	12	sprintf
LEAF_NODE	170:4	170:4	13	sprintf
LEAF_NODE	170:11	170:11	12	(
ARGUMENT	170:12	170:12	12	emsg
FIELD	170:12	170:12	13	emsg
LEAF_NODE	170:12	170:12	14	emsg
LEAF_NODE	170:16	170:16	12	,
ARGUMENT	170:18	170:18	12	"Sorry, LogL data must have %s=%d"
FIELD	170:18	170:18	13	"Sorry, LogL data must have %s=%d"
LEAF_NODE	170:18	170:18	14	"Sorry, LogL data must have %s=%d"
LEAF_NODE	170:52	170:52	12	,
ARGUMENT	171:8	171:8	12	"Compression"
FIELD	171:8	171:8	13	"Compression"
LEAF_NODE	171:8	171:8	14	"Compression"
LEAF_NODE	171:21	171:21	12	,
ARGUMENT	171:23	171:23	12	COMPRESSION_SGILOG
FIELD	171:23	171:23	13	COMPRESSION_SGILOG
LEAF_NODE	171:23	171:23	14	COMPRESSION_SGILOG
LEAF_NODE	171:41	171:41	12	)
LEAF_NODE	171:42	171:42	10	;
JUMP_STATEMENT	172:4	172:14	9	return ( 0 ) ;
KEYWORD	172:4	172:4	10	return
LEAF_NODE	172:4	172:4	11	return
DESTINATION	172:11	172:11	10	( 0 )
EXPR	172:11	172:13	11	( 0 )
LEAF_NODE	172:11	172:11	12	(
FIELD	172:12	172:12	12	0
LEAF_NODE	172:12	172:12	13	0
LEAF_NODE	172:13	172:13	12	)
LEAF_NODE	172:14	172:14	10	;
LEAF_NODE	173:3	173:3	8	}
JUMP_STATEMENT	174:3	174:8	6	break DESTINATION ;
KEYWORD	174:3	174:3	7	break
LEAF_NODE	174:3	174:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	174:8	174:8	7	;
LABEL	175:2	175:25	6	case PHOTOMETRIC_LOGLUV :
LEAF_NODE	175:2	175:2	7	case
LEAF_NODE	175:7	175:7	7	PHOTOMETRIC_LOGLUV
LEAF_NODE	175:25	175:25	7	:
SELECTION	176:3	177:51	6	
KEYWORD	176:3	176:3	7	if
LEAF_NODE	176:3	176:3	8	if
LEAF_NODE	176:6	176:6	7	(
CONDITION	176:7	176:7	7	td -> td_compression != COMPRESSION_SGILOG && td -> td_compression != COMPRESSION_SGILOG24
EXPR	176:7	176:7	8	td -> td_compression != COMPRESSION_SGILOG && td -> td_compression != COMPRESSION_SGILOG24
AND	176:7	177:7	9	td -> td_compression != COMPRESSION_SGILOG && td -> td_compression != COMPRESSION_SGILOG24
EXPR	176:7	176:29	10	td -> td_compression != COMPRESSION_SGILOG
FIELD	176:7	176:11	11	td -> td_compression
LEAF_NODE	176:7	176:7	12	td
LEAF_NODE	176:9	176:9	12	->
LEAF_NODE	176:11	176:11	12	td_compression
EQ_OPERATOR	176:26	176:26	11	!=
LEAF_NODE	176:26	176:26	12	!=
FIELD	176:29	176:29	11	COMPRESSION_SGILOG
LEAF_NODE	176:29	176:29	12	COMPRESSION_SGILOG
LEAF_NODE	176:48	176:48	10	&&
EXPR	177:7	177:29	10	td -> td_compression != COMPRESSION_SGILOG24
FIELD	177:7	177:11	11	td -> td_compression
LEAF_NODE	177:7	177:7	12	td
LEAF_NODE	177:9	177:9	12	->
LEAF_NODE	177:11	177:11	12	td_compression
EQ_OPERATOR	177:26	177:26	11	!=
LEAF_NODE	177:26	177:26	12	!=
FIELD	177:29	177:29	11	COMPRESSION_SGILOG24
LEAF_NODE	177:29	177:29	12	COMPRESSION_SGILOG24
LEAF_NODE	177:49	177:49	7	)
STATEMENTS	177:51	181:3	7	
LEAF_NODE	177:51	177:51	8	{
STATEMENTS	178:4	180:4	8	
EXPR_STATEMENT	178:4	179:64	9	sprintf ( emsg , "Sorry, LogLuv data must have %s=%d or %d" , "Compression" , COMPRESSION_SGILOG , COMPRESSION_SGILOG24 ) ;
EXPR	178:4	178:4	10	sprintf ( emsg , "Sorry, LogLuv data must have %s=%d or %d" , "Compression" , COMPRESSION_SGILOG , COMPRESSION_SGILOG24 )
FUNCTION_CALL	178:4	179:63	11	sprintf ( emsg , "Sorry, LogLuv data must have %s=%d or %d" , "Compression" , COMPRESSION_SGILOG , COMPRESSION_SGILOG24 )
CALLEE	178:4	178:4	12	sprintf
LEAF_NODE	178:4	178:4	13	sprintf
LEAF_NODE	178:11	178:11	12	(
ARGUMENT	178:12	178:12	12	emsg
FIELD	178:12	178:12	13	emsg
LEAF_NODE	178:12	178:12	14	emsg
LEAF_NODE	178:16	178:16	12	,
ARGUMENT	178:18	178:18	12	"Sorry, LogLuv data must have %s=%d or %d"
FIELD	178:18	178:18	13	"Sorry, LogLuv data must have %s=%d or %d"
LEAF_NODE	178:18	178:18	14	"Sorry, LogLuv data must have %s=%d or %d"
LEAF_NODE	178:60	178:60	12	,
ARGUMENT	179:8	179:8	12	"Compression"
FIELD	179:8	179:8	13	"Compression"
LEAF_NODE	179:8	179:8	14	"Compression"
LEAF_NODE	179:21	179:21	12	,
ARGUMENT	179:23	179:23	12	COMPRESSION_SGILOG
FIELD	179:23	179:23	13	COMPRESSION_SGILOG
LEAF_NODE	179:23	179:23	14	COMPRESSION_SGILOG
LEAF_NODE	179:41	179:41	12	,
ARGUMENT	179:43	179:43	12	COMPRESSION_SGILOG24
FIELD	179:43	179:43	13	COMPRESSION_SGILOG24
LEAF_NODE	179:43	179:43	14	COMPRESSION_SGILOG24
LEAF_NODE	179:63	179:63	12	)
LEAF_NODE	179:64	179:64	10	;
JUMP_STATEMENT	180:4	180:14	9	return ( 0 ) ;
KEYWORD	180:4	180:4	10	return
LEAF_NODE	180:4	180:4	11	return
DESTINATION	180:11	180:11	10	( 0 )
EXPR	180:11	180:13	11	( 0 )
LEAF_NODE	180:11	180:11	12	(
FIELD	180:12	180:12	12	0
LEAF_NODE	180:12	180:12	13	0
LEAF_NODE	180:13	180:13	12	)
LEAF_NODE	180:14	180:14	10	;
LEAF_NODE	181:3	181:3	8	}
SELECTION	182:3	182:51	6	
KEYWORD	182:3	182:3	7	if
LEAF_NODE	182:3	182:3	8	if
LEAF_NODE	182:6	182:6	7	(
CONDITION	182:7	182:7	7	td -> td_planarconfig != PLANARCONFIG_CONTIG
EXPR	182:7	182:30	8	td -> td_planarconfig != PLANARCONFIG_CONTIG
FIELD	182:7	182:11	9	td -> td_planarconfig
LEAF_NODE	182:7	182:7	10	td
LEAF_NODE	182:9	182:9	10	->
LEAF_NODE	182:11	182:11	10	td_planarconfig
EQ_OPERATOR	182:27	182:27	9	!=
LEAF_NODE	182:27	182:27	10	!=
FIELD	182:30	182:30	9	PLANARCONFIG_CONTIG
LEAF_NODE	182:30	182:30	10	PLANARCONFIG_CONTIG
LEAF_NODE	182:49	182:49	7	)
STATEMENTS	182:51	186:3	7	
LEAF_NODE	182:51	182:51	8	{
STATEMENTS	183:4	185:4	8	
EXPR_STATEMENT	183:4	184:51	9	sprintf ( emsg , "Sorry, can not handle LogLuv images with %s=%d" , "Planarconfiguration" , td -> td_planarconfig ) ;
EXPR	183:4	183:4	10	sprintf ( emsg , "Sorry, can not handle LogLuv images with %s=%d" , "Planarconfiguration" , td -> td_planarconfig )
FUNCTION_CALL	183:4	184:50	11	sprintf ( emsg , "Sorry, can not handle LogLuv images with %s=%d" , "Planarconfiguration" , td -> td_planarconfig )
CALLEE	183:4	183:4	12	sprintf
LEAF_NODE	183:4	183:4	13	sprintf
LEAF_NODE	183:11	183:11	12	(
ARGUMENT	183:12	183:12	12	emsg
FIELD	183:12	183:12	13	emsg
LEAF_NODE	183:12	183:12	14	emsg
LEAF_NODE	183:16	183:16	12	,
ARGUMENT	183:18	183:18	12	"Sorry, can not handle LogLuv images with %s=%d"
FIELD	183:18	183:18	13	"Sorry, can not handle LogLuv images with %s=%d"
LEAF_NODE	183:18	183:18	14	"Sorry, can not handle LogLuv images with %s=%d"
LEAF_NODE	183:66	183:66	12	,
ARGUMENT	184:8	184:8	12	"Planarconfiguration"
FIELD	184:8	184:8	13	"Planarconfiguration"
LEAF_NODE	184:8	184:8	14	"Planarconfiguration"
LEAF_NODE	184:29	184:29	12	,
ARGUMENT	184:31	184:31	12	td -> td_planarconfig
FIELD	184:31	184:35	13	td -> td_planarconfig
LEAF_NODE	184:31	184:31	14	td
LEAF_NODE	184:33	184:33	14	->
LEAF_NODE	184:35	184:35	14	td_planarconfig
LEAF_NODE	184:50	184:50	12	)
LEAF_NODE	184:51	184:51	10	;
JUMP_STATEMENT	185:4	185:14	9	return ( 0 ) ;
KEYWORD	185:4	185:4	10	return
LEAF_NODE	185:4	185:4	11	return
DESTINATION	185:11	185:11	10	( 0 )
EXPR	185:11	185:13	11	( 0 )
LEAF_NODE	185:11	185:11	12	(
FIELD	185:12	185:12	12	0
LEAF_NODE	185:12	185:12	13	0
LEAF_NODE	185:13	185:13	12	)
LEAF_NODE	185:14	185:14	10	;
LEAF_NODE	186:3	186:3	8	}
SELECTION	187:3	187:60	6	
KEYWORD	187:3	187:3	7	if
LEAF_NODE	187:3	187:3	8	if
LEAF_NODE	187:6	187:6	7	(
CONDITION	187:8	187:8	7	td -> td_samplesperpixel != 3 || colorchannels != 3
EXPR	187:8	187:8	8	td -> td_samplesperpixel != 3 || colorchannels != 3
OR	187:8	187:39	9	td -> td_samplesperpixel != 3 || colorchannels != 3
EXPR	187:8	187:34	10	td -> td_samplesperpixel != 3
FIELD	187:8	187:12	11	td -> td_samplesperpixel
LEAF_NODE	187:8	187:8	12	td
LEAF_NODE	187:10	187:10	12	->
LEAF_NODE	187:12	187:12	12	td_samplesperpixel
EQ_OPERATOR	187:31	187:31	11	!=
LEAF_NODE	187:31	187:31	12	!=
FIELD	187:34	187:34	11	3
LEAF_NODE	187:34	187:34	12	3
LEAF_NODE	187:36	187:36	10	||
EXPR	187:39	187:56	10	colorchannels != 3
FIELD	187:39	187:39	11	colorchannels
LEAF_NODE	187:39	187:39	12	colorchannels
EQ_OPERATOR	187:53	187:53	11	!=
LEAF_NODE	187:53	187:53	12	!=
FIELD	187:56	187:56	11	3
LEAF_NODE	187:56	187:56	12	3
LEAF_NODE	187:58	187:58	7	)
STATEMENTS	187:60	193:24	7	
LEAF_NODE	187:60	187:60	8	{
STATEMENTS	188:32	192:32	8	
EXPR_STATEMENT	188:32	191:71	9	sprintf ( emsg , "Sorry, can not handle image with %s=%d, %s=%d" , "Samples/pixel" , td -> td_samplesperpixel , "colorchannels" , colorchannels ) ;
EXPR	188:32	188:32	10	sprintf ( emsg , "Sorry, can not handle image with %s=%d, %s=%d" , "Samples/pixel" , td -> td_samplesperpixel , "colorchannels" , colorchannels )
FUNCTION_CALL	188:32	191:70	11	sprintf ( emsg , "Sorry, can not handle image with %s=%d, %s=%d" , "Samples/pixel" , td -> td_samplesperpixel , "colorchannels" , colorchannels )
CALLEE	188:32	188:32	12	sprintf
LEAF_NODE	188:32	188:32	13	sprintf
LEAF_NODE	188:39	188:39	12	(
ARGUMENT	188:40	188:40	12	emsg
FIELD	188:40	188:40	13	emsg
LEAF_NODE	188:40	188:40	14	emsg
LEAF_NODE	188:44	188:44	12	,
ARGUMENT	189:40	189:40	12	"Sorry, can not handle image with %s=%d, %s=%d"
FIELD	189:40	189:40	13	"Sorry, can not handle image with %s=%d, %s=%d"
LEAF_NODE	189:40	189:40	14	"Sorry, can not handle image with %s=%d, %s=%d"
LEAF_NODE	189:87	189:87	12	,
ARGUMENT	190:40	190:40	12	"Samples/pixel"
FIELD	190:40	190:40	13	"Samples/pixel"
LEAF_NODE	190:40	190:40	14	"Samples/pixel"
LEAF_NODE	190:55	190:55	12	,
ARGUMENT	190:57	190:57	12	td -> td_samplesperpixel
FIELD	190:57	190:61	13	td -> td_samplesperpixel
LEAF_NODE	190:57	190:57	14	td
LEAF_NODE	190:59	190:59	14	->
LEAF_NODE	190:61	190:61	14	td_samplesperpixel
LEAF_NODE	190:79	190:79	12	,
ARGUMENT	191:40	191:40	12	"colorchannels"
FIELD	191:40	191:40	13	"colorchannels"
LEAF_NODE	191:40	191:40	14	"colorchannels"
LEAF_NODE	191:55	191:55	12	,
ARGUMENT	191:57	191:57	12	colorchannels
FIELD	191:57	191:57	13	colorchannels
LEAF_NODE	191:57	191:57	14	colorchannels
LEAF_NODE	191:70	191:70	12	)
LEAF_NODE	191:71	191:71	10	;
JUMP_STATEMENT	192:32	192:40	9	return 0 ;
KEYWORD	192:32	192:32	10	return
LEAF_NODE	192:32	192:32	11	return
DESTINATION	192:39	192:39	10	0
EXPR	192:39	192:39	11	0
FIELD	192:39	192:39	12	0
LEAF_NODE	192:39	192:39	13	0
LEAF_NODE	192:40	192:40	10	;
LEAF_NODE	193:24	193:24	8	}
JUMP_STATEMENT	194:3	194:8	6	break DESTINATION ;
KEYWORD	194:3	194:3	7	break
LEAF_NODE	194:3	194:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	194:8	194:8	7	;
LABEL	195:2	195:25	6	case PHOTOMETRIC_CIELAB :
LEAF_NODE	195:2	195:2	7	case
LEAF_NODE	195:7	195:7	7	PHOTOMETRIC_CIELAB
LEAF_NODE	195:25	195:25	7	:
SELECTION	196:24	196:110	6	
KEYWORD	196:24	196:24	7	if
LEAF_NODE	196:24	196:24	8	if
LEAF_NODE	196:27	196:27	7	(
CONDITION	196:29	196:29	7	td -> td_samplesperpixel != 3 || colorchannels != 3 || td -> td_bitspersample != 8
EXPR	196:29	196:29	8	td -> td_samplesperpixel != 3 || colorchannels != 3 || td -> td_bitspersample != 8
OR	196:29	196:60	9	td -> td_samplesperpixel != 3 || colorchannels != 3 || td -> td_bitspersample != 8
EXPR	196:29	196:55	10	td -> td_samplesperpixel != 3
FIELD	196:29	196:33	11	td -> td_samplesperpixel
LEAF_NODE	196:29	196:29	12	td
LEAF_NODE	196:31	196:31	12	->
LEAF_NODE	196:33	196:33	12	td_samplesperpixel
EQ_OPERATOR	196:52	196:52	11	!=
LEAF_NODE	196:52	196:52	12	!=
FIELD	196:55	196:55	11	3
LEAF_NODE	196:55	196:55	12	3
LEAF_NODE	196:57	196:57	10	||
EXPR	196:60	196:60	10	colorchannels != 3 || td -> td_bitspersample != 8
OR	196:60	196:82	11	colorchannels != 3 || td -> td_bitspersample != 8
EXPR	196:60	196:77	12	colorchannels != 3
FIELD	196:60	196:60	13	colorchannels
LEAF_NODE	196:60	196:60	14	colorchannels
EQ_OPERATOR	196:74	196:74	13	!=
LEAF_NODE	196:74	196:74	14	!=
FIELD	196:77	196:77	13	3
LEAF_NODE	196:77	196:77	14	3
LEAF_NODE	196:79	196:79	12	||
EXPR	196:82	196:106	12	td -> td_bitspersample != 8
FIELD	196:82	196:86	13	td -> td_bitspersample
LEAF_NODE	196:82	196:82	14	td
LEAF_NODE	196:84	196:84	14	->
LEAF_NODE	196:86	196:86	14	td_bitspersample
EQ_OPERATOR	196:103	196:103	13	!=
LEAF_NODE	196:103	196:103	14	!=
FIELD	196:106	196:106	13	8
LEAF_NODE	196:106	196:106	14	8
LEAF_NODE	196:108	196:108	7	)
STATEMENTS	196:110	203:24	7	
LEAF_NODE	196:110	196:110	8	{
STATEMENTS	197:32	202:32	8	
EXPR_STATEMENT	197:32	201:76	9	sprintf ( emsg , "Sorry, can not handle image with %s=%d, %s=%d and %s=%d" , "Samples/pixel" , td -> td_samplesperpixel , "colorchannels" , colorchannels , "Bits/sample" , td -> td_bitspersample ) ;
EXPR	197:32	197:32	10	sprintf ( emsg , "Sorry, can not handle image with %s=%d, %s=%d and %s=%d" , "Samples/pixel" , td -> td_samplesperpixel , "colorchannels" , colorchannels , "Bits/sample" , td -> td_bitspersample )
FUNCTION_CALL	197:32	201:75	11	sprintf ( emsg , "Sorry, can not handle image with %s=%d, %s=%d and %s=%d" , "Samples/pixel" , td -> td_samplesperpixel , "colorchannels" , colorchannels , "Bits/sample" , td -> td_bitspersample )
CALLEE	197:32	197:32	12	sprintf
LEAF_NODE	197:32	197:32	13	sprintf
LEAF_NODE	197:39	197:39	12	(
ARGUMENT	197:40	197:40	12	emsg
FIELD	197:40	197:40	13	emsg
LEAF_NODE	197:40	197:40	14	emsg
LEAF_NODE	197:44	197:44	12	,
ARGUMENT	198:40	198:40	12	"Sorry, can not handle image with %s=%d, %s=%d and %s=%d"
FIELD	198:40	198:40	13	"Sorry, can not handle image with %s=%d, %s=%d and %s=%d"
LEAF_NODE	198:40	198:40	14	"Sorry, can not handle image with %s=%d, %s=%d and %s=%d"
LEAF_NODE	198:97	198:97	12	,
ARGUMENT	199:40	199:40	12	"Samples/pixel"
FIELD	199:40	199:40	13	"Samples/pixel"
LEAF_NODE	199:40	199:40	14	"Samples/pixel"
LEAF_NODE	199:55	199:55	12	,
ARGUMENT	199:57	199:57	12	td -> td_samplesperpixel
FIELD	199:57	199:61	13	td -> td_samplesperpixel
LEAF_NODE	199:57	199:57	14	td
LEAF_NODE	199:59	199:59	14	->
LEAF_NODE	199:61	199:61	14	td_samplesperpixel
LEAF_NODE	199:79	199:79	12	,
ARGUMENT	200:40	200:40	12	"colorchannels"
FIELD	200:40	200:40	13	"colorchannels"
LEAF_NODE	200:40	200:40	14	"colorchannels"
LEAF_NODE	200:55	200:55	12	,
ARGUMENT	200:57	200:57	12	colorchannels
FIELD	200:57	200:57	13	colorchannels
LEAF_NODE	200:57	200:57	14	colorchannels
LEAF_NODE	200:70	200:70	12	,
ARGUMENT	201:40	201:40	12	"Bits/sample"
FIELD	201:40	201:40	13	"Bits/sample"
LEAF_NODE	201:40	201:40	14	"Bits/sample"
LEAF_NODE	201:53	201:53	12	,
ARGUMENT	201:55	201:55	12	td -> td_bitspersample
FIELD	201:55	201:59	13	td -> td_bitspersample
LEAF_NODE	201:55	201:55	14	td
LEAF_NODE	201:57	201:57	14	->
LEAF_NODE	201:59	201:59	14	td_bitspersample
LEAF_NODE	201:75	201:75	12	)
LEAF_NODE	201:76	201:76	10	;
JUMP_STATEMENT	202:32	202:40	9	return 0 ;
KEYWORD	202:32	202:32	10	return
LEAF_NODE	202:32	202:32	11	return
DESTINATION	202:39	202:39	10	0
EXPR	202:39	202:39	11	0
FIELD	202:39	202:39	12	0
LEAF_NODE	202:39	202:39	13	0
LEAF_NODE	202:40	202:40	10	;
LEAF_NODE	203:24	203:24	8	}
JUMP_STATEMENT	204:3	204:8	6	break DESTINATION ;
KEYWORD	204:3	204:3	7	break
LEAF_NODE	204:3	204:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	204:8	204:8	7	;
LABEL	205:16	205:23	6	default :
LEAF_NODE	205:16	205:16	7	default
LEAF_NODE	205:23	205:23	7	:
EXPR_STATEMENT	206:3	207:29	6	sprintf ( emsg , "Sorry, can not handle image with %s=%d" , photoTag , photometric ) ;
EXPR	206:3	206:3	7	sprintf ( emsg , "Sorry, can not handle image with %s=%d" , photoTag , photometric )
FUNCTION_CALL	206:3	207:28	8	sprintf ( emsg , "Sorry, can not handle image with %s=%d" , photoTag , photometric )
CALLEE	206:3	206:3	9	sprintf
LEAF_NODE	206:3	206:3	10	sprintf
LEAF_NODE	206:10	206:10	9	(
ARGUMENT	206:11	206:11	9	emsg
FIELD	206:11	206:11	10	emsg
LEAF_NODE	206:11	206:11	11	emsg
LEAF_NODE	206:15	206:15	9	,
ARGUMENT	206:17	206:17	9	"Sorry, can not handle image with %s=%d"
FIELD	206:17	206:17	10	"Sorry, can not handle image with %s=%d"
LEAF_NODE	206:17	206:17	11	"Sorry, can not handle image with %s=%d"
LEAF_NODE	206:57	206:57	9	,
ARGUMENT	207:7	207:7	9	photoTag
FIELD	207:7	207:7	10	photoTag
LEAF_NODE	207:7	207:7	11	photoTag
LEAF_NODE	207:15	207:15	9	,
ARGUMENT	207:17	207:17	9	photometric
FIELD	207:17	207:17	10	photometric
LEAF_NODE	207:17	207:17	11	photometric
LEAF_NODE	207:28	207:28	9	)
LEAF_NODE	207:29	207:29	7	;
JUMP_STATEMENT	208:3	208:13	6	return ( 0 ) ;
KEYWORD	208:3	208:3	7	return
LEAF_NODE	208:3	208:3	8	return
DESTINATION	208:10	208:10	7	( 0 )
EXPR	208:10	208:12	8	( 0 )
LEAF_NODE	208:10	208:10	9	(
FIELD	208:11	208:11	9	0
LEAF_NODE	208:11	208:11	10	0
LEAF_NODE	208:12	208:12	9	)
LEAF_NODE	208:13	208:13	7	;
LEAF_NODE	209:1	209:1	5	}
JUMP_STATEMENT	210:1	210:11	3	return ( 1 ) ;
KEYWORD	210:1	210:1	4	return
LEAF_NODE	210:1	210:1	5	return
DESTINATION	210:8	210:8	4	( 1 )
EXPR	210:8	210:10	5	( 1 )
LEAF_NODE	210:8	210:8	6	(
FIELD	210:9	210:9	6	1
LEAF_NODE	210:9	210:9	7	1
LEAF_NODE	210:10	210:10	6	)
LEAF_NODE	210:11	210:11	4	;
LEAF_NODE	211:0	211:0	2	}
FUNCTION_DEF	213:0	251:0	1	
RETURN_TYPE	213:0	213:0	2	void
TYPE_NAME	213:0	213:0	3	void
LEAF_NODE	213:0	213:0	4	void
FUNCTION_NAME	214:0	214:0	2	TIFFRGBAImageEnd
LEAF_NODE	214:0	214:0	3	TIFFRGBAImageEnd
PARAMETER_LIST	214:16	214:35	2	( TIFFRGBAImage * img )
LEAF_NODE	214:16	214:16	3	(
PARAMETER_DECL	214:17	214:32	3	TIFFRGBAImage * img
TYPE	214:17	214:30	4	TIFFRGBAImage *
TYPE_NAME	214:17	214:17	5	TIFFRGBAImage
LEAF_NODE	214:17	214:17	6	TIFFRGBAImage
POINTER	214:30	214:30	5	*
LEAF_NODE	214:30	214:30	6	*
NAME	214:32	214:32	4	img
LEAF_NODE	214:32	214:32	5	img
LEAF_NODE	214:35	214:35	3	)
LEAF_NODE	215:0	215:0	2	{
STATEMENTS	216:1	245:1	2	
SELECTION	216:1	216:15	3	
KEYWORD	216:1	216:1	4	if
LEAF_NODE	216:1	216:1	5	if
LEAF_NODE	216:4	216:4	4	(
CONDITION	216:5	216:5	4	img -> Map
EXPR	216:5	216:5	5	img -> Map
FIELD	216:5	216:10	6	img -> Map
LEAF_NODE	216:5	216:5	7	img
LEAF_NODE	216:8	216:8	7	->
LEAF_NODE	216:10	216:10	7	Map
LEAF_NODE	216:13	216:13	4	)
STATEMENTS	216:15	219:1	4	
LEAF_NODE	216:15	216:15	5	{
STATEMENTS	217:2	218:2	5	
EXPR_STATEMENT	217:2	217:21	6	_TIFFfree ( img -> Map ) ;
EXPR	217:2	217:2	7	_TIFFfree ( img -> Map )
FUNCTION_CALL	217:2	217:20	8	_TIFFfree ( img -> Map )
CALLEE	217:2	217:2	9	_TIFFfree
LEAF_NODE	217:2	217:2	10	_TIFFfree
LEAF_NODE	217:11	217:11	9	(
ARGUMENT	217:12	217:12	9	img -> Map
FIELD	217:12	217:17	10	img -> Map
LEAF_NODE	217:12	217:12	11	img
LEAF_NODE	217:15	217:15	11	->
LEAF_NODE	217:17	217:17	11	Map
LEAF_NODE	217:20	217:20	9	)
LEAF_NODE	217:21	217:21	7	;
EXPR_STATEMENT	218:2	218:17	6	img -> Map = NULL ;
EXPR	218:2	218:2	7	img -> Map = NULL
ASSIGN	218:2	218:13	8	img -> Map = NULL
LVAL	218:2	218:2	9	img -> Map
FIELD	218:2	218:7	10	img -> Map
LEAF_NODE	218:2	218:2	11	img
LEAF_NODE	218:5	218:5	11	->
LEAF_NODE	218:7	218:7	11	Map
ASSIGN_OP	218:11	218:11	9	=
LEAF_NODE	218:11	218:11	10	=
RVAL	218:13	218:13	9	NULL
FIELD	218:13	218:13	10	NULL
LEAF_NODE	218:13	218:13	11	NULL
LEAF_NODE	218:17	218:17	7	;
LEAF_NODE	219:1	219:1	5	}
SELECTION	220:1	220:17	3	
KEYWORD	220:1	220:1	4	if
LEAF_NODE	220:1	220:1	5	if
LEAF_NODE	220:4	220:4	4	(
CONDITION	220:5	220:5	4	img -> BWmap
EXPR	220:5	220:5	5	img -> BWmap
FIELD	220:5	220:10	6	img -> BWmap
LEAF_NODE	220:5	220:5	7	img
LEAF_NODE	220:8	220:8	7	->
LEAF_NODE	220:10	220:10	7	BWmap
LEAF_NODE	220:15	220:15	4	)
STATEMENTS	220:17	223:1	4	
LEAF_NODE	220:17	220:17	5	{
STATEMENTS	221:2	222:2	5	
EXPR_STATEMENT	221:2	221:23	6	_TIFFfree ( img -> BWmap ) ;
EXPR	221:2	221:2	7	_TIFFfree ( img -> BWmap )
FUNCTION_CALL	221:2	221:22	8	_TIFFfree ( img -> BWmap )
CALLEE	221:2	221:2	9	_TIFFfree
LEAF_NODE	221:2	221:2	10	_TIFFfree
LEAF_NODE	221:11	221:11	9	(
ARGUMENT	221:12	221:12	9	img -> BWmap
FIELD	221:12	221:17	10	img -> BWmap
LEAF_NODE	221:12	221:12	11	img
LEAF_NODE	221:15	221:15	11	->
LEAF_NODE	221:17	221:17	11	BWmap
LEAF_NODE	221:22	221:22	9	)
LEAF_NODE	221:23	221:23	7	;
EXPR_STATEMENT	222:2	222:19	6	img -> BWmap = NULL ;
EXPR	222:2	222:2	7	img -> BWmap = NULL
ASSIGN	222:2	222:15	8	img -> BWmap = NULL
LVAL	222:2	222:2	9	img -> BWmap
FIELD	222:2	222:7	10	img -> BWmap
LEAF_NODE	222:2	222:2	11	img
LEAF_NODE	222:5	222:5	11	->
LEAF_NODE	222:7	222:7	11	BWmap
ASSIGN_OP	222:13	222:13	9	=
LEAF_NODE	222:13	222:13	10	=
RVAL	222:15	222:15	9	NULL
FIELD	222:15	222:15	10	NULL
LEAF_NODE	222:15	222:15	11	NULL
LEAF_NODE	222:19	222:19	7	;
LEAF_NODE	223:1	223:1	5	}
SELECTION	224:1	224:18	3	
KEYWORD	224:1	224:1	4	if
LEAF_NODE	224:1	224:1	5	if
LEAF_NODE	224:4	224:4	4	(
CONDITION	224:5	224:5	4	img -> PALmap
EXPR	224:5	224:5	5	img -> PALmap
FIELD	224:5	224:10	6	img -> PALmap
LEAF_NODE	224:5	224:5	7	img
LEAF_NODE	224:8	224:8	7	->
LEAF_NODE	224:10	224:10	7	PALmap
LEAF_NODE	224:16	224:16	4	)
STATEMENTS	224:18	227:1	4	
LEAF_NODE	224:18	224:18	5	{
STATEMENTS	225:2	226:2	5	
EXPR_STATEMENT	225:2	225:24	6	_TIFFfree ( img -> PALmap ) ;
EXPR	225:2	225:2	7	_TIFFfree ( img -> PALmap )
FUNCTION_CALL	225:2	225:23	8	_TIFFfree ( img -> PALmap )
CALLEE	225:2	225:2	9	_TIFFfree
LEAF_NODE	225:2	225:2	10	_TIFFfree
LEAF_NODE	225:11	225:11	9	(
ARGUMENT	225:12	225:12	9	img -> PALmap
FIELD	225:12	225:17	10	img -> PALmap
LEAF_NODE	225:12	225:12	11	img
LEAF_NODE	225:15	225:15	11	->
LEAF_NODE	225:17	225:17	11	PALmap
LEAF_NODE	225:23	225:23	9	)
LEAF_NODE	225:24	225:24	7	;
EXPR_STATEMENT	226:2	226:20	6	img -> PALmap = NULL ;
EXPR	226:2	226:2	7	img -> PALmap = NULL
ASSIGN	226:2	226:16	8	img -> PALmap = NULL
LVAL	226:2	226:2	9	img -> PALmap
FIELD	226:2	226:7	10	img -> PALmap
LEAF_NODE	226:2	226:2	11	img
LEAF_NODE	226:5	226:5	11	->
LEAF_NODE	226:7	226:7	11	PALmap
ASSIGN_OP	226:14	226:14	9	=
LEAF_NODE	226:14	226:14	10	=
RVAL	226:16	226:16	9	NULL
FIELD	226:16	226:16	10	NULL
LEAF_NODE	226:16	226:16	11	NULL
LEAF_NODE	226:20	226:20	7	;
LEAF_NODE	227:1	227:1	5	}
SELECTION	228:1	228:17	3	
KEYWORD	228:1	228:1	4	if
LEAF_NODE	228:1	228:1	5	if
LEAF_NODE	228:4	228:4	4	(
CONDITION	228:5	228:5	4	img -> ycbcr
EXPR	228:5	228:5	5	img -> ycbcr
FIELD	228:5	228:10	6	img -> ycbcr
LEAF_NODE	228:5	228:5	7	img
LEAF_NODE	228:8	228:8	7	->
LEAF_NODE	228:10	228:10	7	ycbcr
LEAF_NODE	228:15	228:15	4	)
STATEMENTS	228:17	231:1	4	
LEAF_NODE	228:17	228:17	5	{
STATEMENTS	229:2	230:2	5	
EXPR_STATEMENT	229:2	229:23	6	_TIFFfree ( img -> ycbcr ) ;
EXPR	229:2	229:2	7	_TIFFfree ( img -> ycbcr )
FUNCTION_CALL	229:2	229:22	8	_TIFFfree ( img -> ycbcr )
CALLEE	229:2	229:2	9	_TIFFfree
LEAF_NODE	229:2	229:2	10	_TIFFfree
LEAF_NODE	229:11	229:11	9	(
ARGUMENT	229:12	229:12	9	img -> ycbcr
FIELD	229:12	229:17	10	img -> ycbcr
LEAF_NODE	229:12	229:12	11	img
LEAF_NODE	229:15	229:15	11	->
LEAF_NODE	229:17	229:17	11	ycbcr
LEAF_NODE	229:22	229:22	9	)
LEAF_NODE	229:23	229:23	7	;
EXPR_STATEMENT	230:2	230:19	6	img -> ycbcr = NULL ;
EXPR	230:2	230:2	7	img -> ycbcr = NULL
ASSIGN	230:2	230:15	8	img -> ycbcr = NULL
LVAL	230:2	230:2	9	img -> ycbcr
FIELD	230:2	230:7	10	img -> ycbcr
LEAF_NODE	230:2	230:2	11	img
LEAF_NODE	230:5	230:5	11	->
LEAF_NODE	230:7	230:7	11	ycbcr
ASSIGN_OP	230:13	230:13	9	=
LEAF_NODE	230:13	230:13	10	=
RVAL	230:15	230:15	9	NULL
FIELD	230:15	230:15	10	NULL
LEAF_NODE	230:15	230:15	11	NULL
LEAF_NODE	230:19	230:19	7	;
LEAF_NODE	231:1	231:1	5	}
SELECTION	232:1	232:18	3	
KEYWORD	232:1	232:1	4	if
LEAF_NODE	232:1	232:1	5	if
LEAF_NODE	232:4	232:4	4	(
CONDITION	232:5	232:5	4	img -> cielab
EXPR	232:5	232:5	5	img -> cielab
FIELD	232:5	232:10	6	img -> cielab
LEAF_NODE	232:5	232:5	7	img
LEAF_NODE	232:8	232:8	7	->
LEAF_NODE	232:10	232:10	7	cielab
LEAF_NODE	232:16	232:16	4	)
STATEMENTS	232:18	235:1	4	
LEAF_NODE	232:18	232:18	5	{
STATEMENTS	233:2	234:2	5	
EXPR_STATEMENT	233:2	233:24	6	_TIFFfree ( img -> cielab ) ;
EXPR	233:2	233:2	7	_TIFFfree ( img -> cielab )
FUNCTION_CALL	233:2	233:23	8	_TIFFfree ( img -> cielab )
CALLEE	233:2	233:2	9	_TIFFfree
LEAF_NODE	233:2	233:2	10	_TIFFfree
LEAF_NODE	233:11	233:11	9	(
ARGUMENT	233:12	233:12	9	img -> cielab
FIELD	233:12	233:17	10	img -> cielab
LEAF_NODE	233:12	233:12	11	img
LEAF_NODE	233:15	233:15	11	->
LEAF_NODE	233:17	233:17	11	cielab
LEAF_NODE	233:23	233:23	9	)
LEAF_NODE	233:24	233:24	7	;
EXPR_STATEMENT	234:2	234:20	6	img -> cielab = NULL ;
EXPR	234:2	234:2	7	img -> cielab = NULL
ASSIGN	234:2	234:16	8	img -> cielab = NULL
LVAL	234:2	234:2	9	img -> cielab
FIELD	234:2	234:7	10	img -> cielab
LEAF_NODE	234:2	234:2	11	img
LEAF_NODE	234:5	234:5	11	->
LEAF_NODE	234:7	234:7	11	cielab
ASSIGN_OP	234:14	234:14	9	=
LEAF_NODE	234:14	234:14	10	=
RVAL	234:16	234:16	9	NULL
FIELD	234:16	234:16	10	NULL
LEAF_NODE	234:16	234:16	11	NULL
LEAF_NODE	234:20	234:20	7	;
LEAF_NODE	235:1	235:1	5	}
SELECTION	236:1	236:18	3	
KEYWORD	236:1	236:1	4	if
LEAF_NODE	236:1	236:1	5	if
LEAF_NODE	236:4	236:4	4	(
CONDITION	236:5	236:5	4	img -> UaToAa
EXPR	236:5	236:5	5	img -> UaToAa
FIELD	236:5	236:10	6	img -> UaToAa
LEAF_NODE	236:5	236:5	7	img
LEAF_NODE	236:8	236:8	7	->
LEAF_NODE	236:10	236:10	7	UaToAa
LEAF_NODE	236:16	236:16	4	)
STATEMENTS	236:18	239:1	4	
LEAF_NODE	236:18	236:18	5	{
STATEMENTS	237:2	238:2	5	
EXPR_STATEMENT	237:2	237:24	6	_TIFFfree ( img -> UaToAa ) ;
EXPR	237:2	237:2	7	_TIFFfree ( img -> UaToAa )
FUNCTION_CALL	237:2	237:23	8	_TIFFfree ( img -> UaToAa )
CALLEE	237:2	237:2	9	_TIFFfree
LEAF_NODE	237:2	237:2	10	_TIFFfree
LEAF_NODE	237:11	237:11	9	(
ARGUMENT	237:12	237:12	9	img -> UaToAa
FIELD	237:12	237:17	10	img -> UaToAa
LEAF_NODE	237:12	237:12	11	img
LEAF_NODE	237:15	237:15	11	->
LEAF_NODE	237:17	237:17	11	UaToAa
LEAF_NODE	237:23	237:23	9	)
LEAF_NODE	237:24	237:24	7	;
EXPR_STATEMENT	238:2	238:20	6	img -> UaToAa = NULL ;
EXPR	238:2	238:2	7	img -> UaToAa = NULL
ASSIGN	238:2	238:16	8	img -> UaToAa = NULL
LVAL	238:2	238:2	9	img -> UaToAa
FIELD	238:2	238:7	10	img -> UaToAa
LEAF_NODE	238:2	238:2	11	img
LEAF_NODE	238:5	238:5	11	->
LEAF_NODE	238:7	238:7	11	UaToAa
ASSIGN_OP	238:14	238:14	9	=
LEAF_NODE	238:14	238:14	10	=
RVAL	238:16	238:16	9	NULL
FIELD	238:16	238:16	10	NULL
LEAF_NODE	238:16	238:16	11	NULL
LEAF_NODE	238:20	238:20	7	;
LEAF_NODE	239:1	239:1	5	}
SELECTION	240:1	240:25	3	
KEYWORD	240:1	240:1	4	if
LEAF_NODE	240:1	240:1	5	if
LEAF_NODE	240:4	240:4	4	(
CONDITION	240:5	240:5	4	img -> Bitdepth16To8
EXPR	240:5	240:5	5	img -> Bitdepth16To8
FIELD	240:5	240:10	6	img -> Bitdepth16To8
LEAF_NODE	240:5	240:5	7	img
LEAF_NODE	240:8	240:8	7	->
LEAF_NODE	240:10	240:10	7	Bitdepth16To8
LEAF_NODE	240:23	240:23	4	)
STATEMENTS	240:25	243:1	4	
LEAF_NODE	240:25	240:25	5	{
STATEMENTS	241:2	242:2	5	
EXPR_STATEMENT	241:2	241:31	6	_TIFFfree ( img -> Bitdepth16To8 ) ;
EXPR	241:2	241:2	7	_TIFFfree ( img -> Bitdepth16To8 )
FUNCTION_CALL	241:2	241:30	8	_TIFFfree ( img -> Bitdepth16To8 )
CALLEE	241:2	241:2	9	_TIFFfree
LEAF_NODE	241:2	241:2	10	_TIFFfree
LEAF_NODE	241:11	241:11	9	(
ARGUMENT	241:12	241:12	9	img -> Bitdepth16To8
FIELD	241:12	241:17	10	img -> Bitdepth16To8
LEAF_NODE	241:12	241:12	11	img
LEAF_NODE	241:15	241:15	11	->
LEAF_NODE	241:17	241:17	11	Bitdepth16To8
LEAF_NODE	241:30	241:30	9	)
LEAF_NODE	241:31	241:31	7	;
EXPR_STATEMENT	242:2	242:27	6	img -> Bitdepth16To8 = NULL ;
EXPR	242:2	242:2	7	img -> Bitdepth16To8 = NULL
ASSIGN	242:2	242:23	8	img -> Bitdepth16To8 = NULL
LVAL	242:2	242:2	9	img -> Bitdepth16To8
FIELD	242:2	242:7	10	img -> Bitdepth16To8
LEAF_NODE	242:2	242:2	11	img
LEAF_NODE	242:5	242:5	11	->
LEAF_NODE	242:7	242:7	11	Bitdepth16To8
ASSIGN_OP	242:21	242:21	9	=
LEAF_NODE	242:21	242:21	10	=
RVAL	242:23	242:23	9	NULL
FIELD	242:23	242:23	10	NULL
LEAF_NODE	242:23	242:23	11	NULL
LEAF_NODE	242:27	242:27	7	;
LEAF_NODE	243:1	243:1	5	}
SELECTION	245:1	245:20	3	
KEYWORD	245:1	245:1	4	if
LEAF_NODE	245:1	245:1	5	if
LEAF_NODE	245:3	245:3	4	(
CONDITION	245:5	245:5	4	img -> redcmap
EXPR	245:5	245:5	5	img -> redcmap
FIELD	245:5	245:10	6	img -> redcmap
LEAF_NODE	245:5	245:5	7	img
LEAF_NODE	245:8	245:8	7	->
LEAF_NODE	245:10	245:10	7	redcmap
LEAF_NODE	245:18	245:18	4	)
STATEMENTS	245:20	250:1	4	
LEAF_NODE	245:20	245:20	5	{
STATEMENTS	246:2	249:16	5	
EXPR_STATEMENT	246:2	246:27	6	_TIFFfree ( img -> redcmap ) ;
EXPR	246:2	246:2	7	_TIFFfree ( img -> redcmap )
FUNCTION_CALL	246:2	246:26	8	_TIFFfree ( img -> redcmap )
CALLEE	246:2	246:2	9	_TIFFfree
LEAF_NODE	246:2	246:2	10	_TIFFfree
LEAF_NODE	246:11	246:11	9	(
ARGUMENT	246:13	246:13	9	img -> redcmap
FIELD	246:13	246:18	10	img -> redcmap
LEAF_NODE	246:13	246:13	11	img
LEAF_NODE	246:16	246:16	11	->
LEAF_NODE	246:18	246:18	11	redcmap
LEAF_NODE	246:26	246:26	9	)
LEAF_NODE	246:27	246:27	7	;
EXPR_STATEMENT	247:2	247:29	6	_TIFFfree ( img -> greencmap ) ;
EXPR	247:2	247:2	7	_TIFFfree ( img -> greencmap )
FUNCTION_CALL	247:2	247:28	8	_TIFFfree ( img -> greencmap )
CALLEE	247:2	247:2	9	_TIFFfree
LEAF_NODE	247:2	247:2	10	_TIFFfree
LEAF_NODE	247:11	247:11	9	(
ARGUMENT	247:13	247:13	9	img -> greencmap
FIELD	247:13	247:18	10	img -> greencmap
LEAF_NODE	247:13	247:13	11	img
LEAF_NODE	247:16	247:16	11	->
LEAF_NODE	247:18	247:18	11	greencmap
LEAF_NODE	247:28	247:28	9	)
LEAF_NODE	247:29	247:29	7	;
EXPR_STATEMENT	248:2	248:28	6	_TIFFfree ( img -> bluecmap ) ;
EXPR	248:2	248:2	7	_TIFFfree ( img -> bluecmap )
FUNCTION_CALL	248:2	248:27	8	_TIFFfree ( img -> bluecmap )
CALLEE	248:2	248:2	9	_TIFFfree
LEAF_NODE	248:2	248:2	10	_TIFFfree
LEAF_NODE	248:11	248:11	9	(
ARGUMENT	248:13	248:13	9	img -> bluecmap
FIELD	248:13	248:18	10	img -> bluecmap
LEAF_NODE	248:13	248:13	11	img
LEAF_NODE	248:16	248:16	11	->
LEAF_NODE	248:18	248:18	11	bluecmap
LEAF_NODE	248:27	248:27	9	)
LEAF_NODE	248:28	248:28	7	;
EXPR_STATEMENT	249:16	249:68	6	img -> redcmap = img -> greencmap = img -> bluecmap = NULL ;
EXPR	249:16	249:16	7	img -> redcmap = img -> greencmap = img -> bluecmap = NULL
ASSIGN	249:16	249:31	8	img -> redcmap = img -> greencmap = img -> bluecmap = NULL
LVAL	249:16	249:16	9	img -> redcmap
FIELD	249:16	249:21	10	img -> redcmap
LEAF_NODE	249:16	249:16	11	img
LEAF_NODE	249:19	249:19	11	->
LEAF_NODE	249:21	249:21	11	redcmap
ASSIGN_OP	249:29	249:29	9	=
LEAF_NODE	249:29	249:29	10	=
RVAL	249:31	249:31	9	img -> greencmap = img -> bluecmap = NULL
ASSIGN	249:31	249:48	10	img -> greencmap = img -> bluecmap = NULL
LVAL	249:31	249:31	11	img -> greencmap
FIELD	249:31	249:36	12	img -> greencmap
LEAF_NODE	249:31	249:31	13	img
LEAF_NODE	249:34	249:34	13	->
LEAF_NODE	249:36	249:36	13	greencmap
ASSIGN_OP	249:46	249:46	11	=
LEAF_NODE	249:46	249:46	12	=
RVAL	249:48	249:48	11	img -> bluecmap = NULL
ASSIGN	249:48	249:64	12	img -> bluecmap = NULL
LVAL	249:48	249:48	13	img -> bluecmap
FIELD	249:48	249:53	14	img -> bluecmap
LEAF_NODE	249:48	249:48	15	img
LEAF_NODE	249:51	249:51	15	->
LEAF_NODE	249:53	249:53	15	bluecmap
ASSIGN_OP	249:62	249:62	13	=
LEAF_NODE	249:62	249:62	14	=
RVAL	249:64	249:64	13	NULL
FIELD	249:64	249:64	14	NULL
LEAF_NODE	249:64	249:64	15	NULL
LEAF_NODE	249:68	249:68	7	;
LEAF_NODE	250:1	250:1	5	}
LEAF_NODE	251:0	251:0	2	}
FUNCTION_DEF	253:0	262:0	1	
RETURN_TYPE	253:0	253:7	2	static int
LEAF_NODE	253:0	253:0	3	static
TYPE_NAME	253:7	253:7	3	int
LEAF_NODE	253:7	253:7	4	int
FUNCTION_NAME	254:0	254:0	2	isCCITTCompression
LEAF_NODE	254:0	254:0	3	isCCITTCompression
PARAMETER_LIST	254:18	254:28	2	( TIFF * tif )
LEAF_NODE	254:18	254:18	3	(
PARAMETER_DECL	254:19	254:25	3	TIFF * tif
TYPE	254:19	254:23	4	TIFF *
TYPE_NAME	254:19	254:19	5	TIFF
LEAF_NODE	254:19	254:19	6	TIFF
POINTER	254:23	254:23	5	*
LEAF_NODE	254:23	254:23	6	*
NAME	254:25	254:25	4	tif
LEAF_NODE	254:25	254:25	5	tif
LEAF_NODE	254:28	254:28	3	)
LEAF_NODE	255:0	255:0	2	{
STATEMENTS	256:4	258:4	2	
SIMPLE_DECL	256:4	256:19	3	uint16 compress ;
VAR_DECL	256:4	256:11	4	uint16 compress
TYPE	256:4	256:4	5	uint16
TYPE_NAME	256:4	256:4	6	uint16
LEAF_NODE	256:4	256:4	7	uint16
NAME	256:11	256:11	5	compress
LEAF_NODE	256:11	256:11	6	compress
LEAF_NODE	256:19	256:19	4	;
EXPR_STATEMENT	257:4	257:53	3	TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compress ) ;
EXPR	257:4	257:4	4	TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compress )
FUNCTION_CALL	257:4	257:52	5	TIFFGetField ( tif , TIFFTAG_COMPRESSION , & compress )
CALLEE	257:4	257:4	6	TIFFGetField
LEAF_NODE	257:4	257:4	7	TIFFGetField
LEAF_NODE	257:16	257:16	6	(
ARGUMENT	257:17	257:17	6	tif
FIELD	257:17	257:17	7	tif
LEAF_NODE	257:17	257:17	8	tif
LEAF_NODE	257:20	257:20	6	,
ARGUMENT	257:22	257:22	6	TIFFTAG_COMPRESSION
FIELD	257:22	257:22	7	TIFFTAG_COMPRESSION
LEAF_NODE	257:22	257:22	8	TIFFTAG_COMPRESSION
LEAF_NODE	257:41	257:41	6	,
ARGUMENT	257:43	257:43	6	& compress
UNARY_EXPR	257:43	257:44	7	& compress
UNARY_OPERATOR	257:43	257:43	8	&
LEAF_NODE	257:43	257:43	9	&
FIELD	257:44	257:44	8	compress
LEAF_NODE	257:44	257:44	9	compress
LEAF_NODE	257:52	257:52	6	)
LEAF_NODE	257:53	257:53	4	;
JUMP_STATEMENT	258:4	261:39	3	return ( compress == COMPRESSION_CCITTFAX3 || compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW ) ;
KEYWORD	258:4	258:4	4	return
LEAF_NODE	258:4	258:4	5	return
DESTINATION	258:11	258:11	4	( compress == COMPRESSION_CCITTFAX3 || compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW )
EXPR	258:11	261:38	5	( compress == COMPRESSION_CCITTFAX3 || compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW )
LEAF_NODE	258:11	258:11	6	(
OR	258:12	259:5	6	compress == COMPRESSION_CCITTFAX3 || compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW
EXPR	258:12	258:24	7	compress == COMPRESSION_CCITTFAX3
FIELD	258:12	258:12	8	compress
LEAF_NODE	258:12	258:12	9	compress
EQ_OPERATOR	258:21	258:21	8	==
LEAF_NODE	258:21	258:21	9	==
FIELD	258:24	258:24	8	COMPRESSION_CCITTFAX3
LEAF_NODE	258:24	258:24	9	COMPRESSION_CCITTFAX3
LEAF_NODE	258:46	258:46	7	||
EXPR	259:5	259:5	7	compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW
OR	259:5	260:5	8	compress == COMPRESSION_CCITTFAX4 || compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW
EXPR	259:5	259:17	9	compress == COMPRESSION_CCITTFAX4
FIELD	259:5	259:5	10	compress
LEAF_NODE	259:5	259:5	11	compress
EQ_OPERATOR	259:14	259:14	10	==
LEAF_NODE	259:14	259:14	11	==
FIELD	259:17	259:17	10	COMPRESSION_CCITTFAX4
LEAF_NODE	259:17	259:17	11	COMPRESSION_CCITTFAX4
LEAF_NODE	259:39	259:39	9	||
EXPR	260:5	260:5	9	compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW
OR	260:5	261:5	10	compress == COMPRESSION_CCITTRLE || compress == COMPRESSION_CCITTRLEW
EXPR	260:5	260:17	11	compress == COMPRESSION_CCITTRLE
FIELD	260:5	260:5	12	compress
LEAF_NODE	260:5	260:5	13	compress
EQ_OPERATOR	260:14	260:14	12	==
LEAF_NODE	260:14	260:14	13	==
FIELD	260:17	260:17	12	COMPRESSION_CCITTRLE
LEAF_NODE	260:17	260:17	13	COMPRESSION_CCITTRLE
LEAF_NODE	260:38	260:38	11	||
EXPR	261:5	261:17	11	compress == COMPRESSION_CCITTRLEW
FIELD	261:5	261:5	12	compress
LEAF_NODE	261:5	261:5	13	compress
EQ_OPERATOR	261:14	261:14	12	==
LEAF_NODE	261:14	261:14	13	==
FIELD	261:17	261:17	12	COMPRESSION_CCITTRLEW
LEAF_NODE	261:17	261:17	13	COMPRESSION_CCITTRLEW
LEAF_NODE	261:38	261:38	6	)
LEAF_NODE	261:39	261:39	4	;
LEAF_NODE	262:0	262:0	2	}
FUNCTION_DEF	264:0	497:0	1	
RETURN_TYPE	264:0	264:0	2	int
TYPE_NAME	264:0	264:0	3	int
LEAF_NODE	264:0	264:0	4	int
FUNCTION_NAME	265:0	265:0	2	TIFFRGBAImageBegin
LEAF_NODE	265:0	265:0	3	TIFFRGBAImageBegin
PARAMETER_LIST	265:18	265:75	2	( TIFFRGBAImage * img , TIFF * tif , int stop , char [ 1024 ] emsg )
LEAF_NODE	265:18	265:18	3	(
PARAMETER_DECL	265:19	265:34	3	TIFFRGBAImage * img
TYPE	265:19	265:32	4	TIFFRGBAImage *
TYPE_NAME	265:19	265:19	5	TIFFRGBAImage
LEAF_NODE	265:19	265:19	6	TIFFRGBAImage
POINTER	265:32	265:32	5	*
LEAF_NODE	265:32	265:32	6	*
NAME	265:34	265:34	4	img
LEAF_NODE	265:34	265:34	5	img
LEAF_NODE	265:37	265:37	3	,
PARAMETER_DECL	265:39	265:45	3	TIFF * tif
TYPE	265:39	265:43	4	TIFF *
TYPE_NAME	265:39	265:39	5	TIFF
LEAF_NODE	265:39	265:39	6	TIFF
POINTER	265:43	265:43	5	*
LEAF_NODE	265:43	265:43	6	*
NAME	265:45	265:45	4	tif
LEAF_NODE	265:45	265:45	5	tif
LEAF_NODE	265:48	265:48	3	,
PARAMETER_DECL	265:50	265:54	3	int stop
TYPE	265:50	265:50	4	int
TYPE_NAME	265:50	265:50	5	int
LEAF_NODE	265:50	265:50	6	int
NAME	265:54	265:54	4	stop
LEAF_NODE	265:54	265:54	5	stop
LEAF_NODE	265:58	265:58	3	,
PARAMETER_DECL	265:60	265:65	3	char [ 1024 ] emsg
TYPE	265:60	265:69	4	char [ 1024 ]
TYPE_NAME	265:60	265:60	5	char
LEAF_NODE	265:60	265:60	6	char
TYPE_SUFFIX	265:69	265:74	5	[ 1024 ]
LEAF_NODE	265:69	265:69	6	[
FIELD	265:70	265:70	6	1024
LEAF_NODE	265:70	265:70	7	1024
LEAF_NODE	265:74	265:74	6	]
NAME	265:65	265:65	4	emsg
LEAF_NODE	265:65	265:65	5	emsg
LEAF_NODE	265:75	265:75	3	)
LEAF_NODE	266:0	266:0	2	{
STATEMENTS	267:1	496:8	2	
SIMPLE_DECL	267:1	267:19	3	uint16 * sampleinfo ;
VAR_DECL	267:1	267:9	4	uint16 * sampleinfo
TYPE	267:1	267:7	5	uint16 *
TYPE_NAME	267:1	267:1	6	uint16
LEAF_NODE	267:1	267:1	7	uint16
POINTER	267:7	267:7	6	*
LEAF_NODE	267:7	267:7	7	*
NAME	267:9	267:9	5	sampleinfo
LEAF_NODE	267:9	267:9	6	sampleinfo
LEAF_NODE	267:19	267:19	4	;
SIMPLE_DECL	268:1	268:20	3	uint16 extrasamples ;
VAR_DECL	268:1	268:8	4	uint16 extrasamples
TYPE	268:1	268:1	5	uint16
TYPE_NAME	268:1	268:1	6	uint16
LEAF_NODE	268:1	268:1	7	uint16
NAME	268:8	268:8	5	extrasamples
LEAF_NODE	268:8	268:8	6	extrasamples
LEAF_NODE	268:20	268:20	4	;
SIMPLE_DECL	269:1	269:20	3	uint16 planarconfig ;
VAR_DECL	269:1	269:8	4	uint16 planarconfig
TYPE	269:1	269:1	5	uint16
TYPE_NAME	269:1	269:1	6	uint16
LEAF_NODE	269:1	269:1	7	uint16
NAME	269:8	269:8	5	planarconfig
LEAF_NODE	269:8	269:8	6	planarconfig
LEAF_NODE	269:20	269:20	4	;
SIMPLE_DECL	270:1	270:16	3	uint16 compress ;
VAR_DECL	270:1	270:8	4	uint16 compress
TYPE	270:1	270:1	5	uint16
TYPE_NAME	270:1	270:1	6	uint16
LEAF_NODE	270:1	270:1	7	uint16
NAME	270:8	270:8	5	compress
LEAF_NODE	270:8	270:8	6	compress
LEAF_NODE	270:16	270:16	4	;
SIMPLE_DECL	271:1	271:18	3	int colorchannels ;
VAR_DECL	271:1	271:5	4	int colorchannels
TYPE	271:1	271:1	5	int
TYPE_NAME	271:1	271:1	6	int
LEAF_NODE	271:1	271:1	7	int
NAME	271:5	271:5	5	colorchannels
LEAF_NODE	271:5	271:5	6	colorchannels
LEAF_NODE	271:18	271:18	4	;
SIMPLE_DECL	272:1	272:42	3	uint16 * red_orig , uint16 * green_orig , uint16 * blue_orig ;
INIT_DECL_LIST	272:1	272:1	4	uint16 * red_orig , uint16 * green_orig , uint16 * blue_orig
VAR_DECL	272:1	272:9	5	uint16 * red_orig
TYPE	272:1	272:8	6	uint16 *
TYPE_NAME	272:1	272:1	7	uint16
LEAF_NODE	272:1	272:1	8	uint16
POINTER	272:8	272:8	7	*
LEAF_NODE	272:8	272:8	8	*
NAME	272:9	272:9	6	red_orig
LEAF_NODE	272:9	272:9	7	red_orig
LEAF_NODE	272:17	272:17	5	,
INIT_DECL_LIST	272:1	272:1	5	uint16 * green_orig , uint16 * blue_orig
VAR_DECL	272:1	272:20	6	uint16 * green_orig
TYPE	272:1	272:19	7	uint16 *
TYPE_NAME	272:1	272:1	8	uint16
LEAF_NODE	272:1	272:1	9	uint16
POINTER	272:19	272:19	8	*
LEAF_NODE	272:19	272:19	9	*
NAME	272:20	272:20	7	green_orig
LEAF_NODE	272:20	272:20	8	green_orig
LEAF_NODE	272:30	272:30	6	,
VAR_DECL	272:1	272:33	6	uint16 * blue_orig
TYPE	272:1	272:32	7	uint16 *
TYPE_NAME	272:1	272:1	8	uint16
LEAF_NODE	272:1	272:1	9	uint16
POINTER	272:32	272:32	8	*
LEAF_NODE	272:32	272:32	9	*
NAME	272:33	272:33	7	blue_orig
LEAF_NODE	272:33	272:33	8	blue_orig
LEAF_NODE	272:42	272:42	4	;
SIMPLE_DECL	273:1	273:12	3	int n_color ;
VAR_DECL	273:1	273:5	4	int n_color
TYPE	273:1	273:1	5	int
TYPE_NAME	273:1	273:1	6	int
LEAF_NODE	273:1	273:1	7	int
NAME	273:5	273:5	5	n_color
LEAF_NODE	273:5	273:5	6	n_color
LEAF_NODE	273:12	273:12	4	;
SELECTION	275:1	276:2	3	
KEYWORD	275:1	275:1	4	if
LEAF_NODE	275:1	275:1	5	if
LEAF_NODE	275:3	275:3	4	(
CONDITION	275:5	275:5	4	! TIFFRGBAImageOK ( tif , emsg )
EXPR	275:5	275:5	5	! TIFFRGBAImageOK ( tif , emsg )
UNARY_EXPR	275:5	275:6	6	! TIFFRGBAImageOK ( tif , emsg )
UNARY_OPERATOR	275:5	275:5	7	!
LEAF_NODE	275:5	275:5	8	!
FUNCTION_CALL	275:6	275:31	7	TIFFRGBAImageOK ( tif , emsg )
CALLEE	275:6	275:6	8	TIFFRGBAImageOK
LEAF_NODE	275:6	275:6	9	TIFFRGBAImageOK
LEAF_NODE	275:21	275:21	8	(
ARGUMENT	275:22	275:22	8	tif
FIELD	275:22	275:22	9	tif
LEAF_NODE	275:22	275:22	10	tif
LEAF_NODE	275:25	275:25	8	,
ARGUMENT	275:27	275:27	8	emsg
FIELD	275:27	275:27	9	emsg
LEAF_NODE	275:27	275:27	10	emsg
LEAF_NODE	275:31	275:31	8	)
LEAF_NODE	275:33	275:33	4	)
STATEMENTS	276:2	276:2	4	
JUMP_STATEMENT	276:2	276:10	5	return 0 ;
KEYWORD	276:2	276:2	6	return
LEAF_NODE	276:2	276:2	7	return
DESTINATION	276:9	276:9	6	0
EXPR	276:9	276:9	7	0
FIELD	276:9	276:9	8	0
LEAF_NODE	276:9	276:9	9	0
LEAF_NODE	276:10	276:10	6	;
EXPR_STATEMENT	279:1	279:20	3	img -> row_offset = 0 ;
EXPR	279:1	279:1	4	img -> row_offset = 0
ASSIGN	279:1	279:19	5	img -> row_offset = 0
LVAL	279:1	279:1	6	img -> row_offset
FIELD	279:1	279:6	7	img -> row_offset
LEAF_NODE	279:1	279:1	8	img
LEAF_NODE	279:4	279:4	8	->
LEAF_NODE	279:6	279:6	8	row_offset
ASSIGN_OP	279:17	279:17	6	=
LEAF_NODE	279:17	279:17	7	=
RVAL	279:19	279:19	6	0
FIELD	279:19	279:19	7	0
LEAF_NODE	279:19	279:19	8	0
LEAF_NODE	279:20	279:20	4	;
EXPR_STATEMENT	280:1	280:20	3	img -> col_offset = 0 ;
EXPR	280:1	280:1	4	img -> col_offset = 0
ASSIGN	280:1	280:19	5	img -> col_offset = 0
LVAL	280:1	280:1	6	img -> col_offset
FIELD	280:1	280:6	7	img -> col_offset
LEAF_NODE	280:1	280:1	8	img
LEAF_NODE	280:4	280:4	8	->
LEAF_NODE	280:6	280:6	8	col_offset
ASSIGN_OP	280:17	280:17	6	=
LEAF_NODE	280:17	280:17	7	=
RVAL	280:19	280:19	6	0
FIELD	280:19	280:19	7	0
LEAF_NODE	280:19	280:19	8	0
LEAF_NODE	280:20	280:20	4	;
EXPR_STATEMENT	281:1	281:20	3	img -> redcmap = NULL ;
EXPR	281:1	281:1	4	img -> redcmap = NULL
ASSIGN	281:1	281:16	5	img -> redcmap = NULL
LVAL	281:1	281:1	6	img -> redcmap
FIELD	281:1	281:6	7	img -> redcmap
LEAF_NODE	281:1	281:1	8	img
LEAF_NODE	281:4	281:4	8	->
LEAF_NODE	281:6	281:6	8	redcmap
ASSIGN_OP	281:14	281:14	6	=
LEAF_NODE	281:14	281:14	7	=
RVAL	281:16	281:16	6	NULL
FIELD	281:16	281:16	7	NULL
LEAF_NODE	281:16	281:16	8	NULL
LEAF_NODE	281:20	281:20	4	;
EXPR_STATEMENT	282:1	282:22	3	img -> greencmap = NULL ;
EXPR	282:1	282:1	4	img -> greencmap = NULL
ASSIGN	282:1	282:18	5	img -> greencmap = NULL
LVAL	282:1	282:1	6	img -> greencmap
FIELD	282:1	282:6	7	img -> greencmap
LEAF_NODE	282:1	282:1	8	img
LEAF_NODE	282:4	282:4	8	->
LEAF_NODE	282:6	282:6	8	greencmap
ASSIGN_OP	282:16	282:16	6	=
LEAF_NODE	282:16	282:16	7	=
RVAL	282:18	282:18	6	NULL
FIELD	282:18	282:18	7	NULL
LEAF_NODE	282:18	282:18	8	NULL
LEAF_NODE	282:22	282:22	4	;
EXPR_STATEMENT	283:1	283:21	3	img -> bluecmap = NULL ;
EXPR	283:1	283:1	4	img -> bluecmap = NULL
ASSIGN	283:1	283:17	5	img -> bluecmap = NULL
LVAL	283:1	283:1	6	img -> bluecmap
FIELD	283:1	283:6	7	img -> bluecmap
LEAF_NODE	283:1	283:1	8	img
LEAF_NODE	283:4	283:4	8	->
LEAF_NODE	283:6	283:6	8	bluecmap
ASSIGN_OP	283:15	283:15	6	=
LEAF_NODE	283:15	283:15	7	=
RVAL	283:17	283:17	6	NULL
FIELD	283:17	283:17	7	NULL
LEAF_NODE	283:17	283:17	8	NULL
LEAF_NODE	283:21	283:21	4	;
EXPR_STATEMENT	284:1	284:16	3	img -> Map = NULL ;
EXPR	284:1	284:1	4	img -> Map = NULL
ASSIGN	284:1	284:12	5	img -> Map = NULL
LVAL	284:1	284:1	6	img -> Map
FIELD	284:1	284:6	7	img -> Map
LEAF_NODE	284:1	284:1	8	img
LEAF_NODE	284:4	284:4	8	->
LEAF_NODE	284:6	284:6	8	Map
ASSIGN_OP	284:10	284:10	6	=
LEAF_NODE	284:10	284:10	7	=
RVAL	284:12	284:12	6	NULL
FIELD	284:12	284:12	7	NULL
LEAF_NODE	284:12	284:12	8	NULL
LEAF_NODE	284:16	284:16	4	;
EXPR_STATEMENT	285:1	285:18	3	img -> BWmap = NULL ;
EXPR	285:1	285:1	4	img -> BWmap = NULL
ASSIGN	285:1	285:14	5	img -> BWmap = NULL
LVAL	285:1	285:1	6	img -> BWmap
FIELD	285:1	285:6	7	img -> BWmap
LEAF_NODE	285:1	285:1	8	img
LEAF_NODE	285:4	285:4	8	->
LEAF_NODE	285:6	285:6	8	BWmap
ASSIGN_OP	285:12	285:12	6	=
LEAF_NODE	285:12	285:12	7	=
RVAL	285:14	285:14	6	NULL
FIELD	285:14	285:14	7	NULL
LEAF_NODE	285:14	285:14	8	NULL
LEAF_NODE	285:18	285:18	4	;
EXPR_STATEMENT	286:1	286:19	3	img -> PALmap = NULL ;
EXPR	286:1	286:1	4	img -> PALmap = NULL
ASSIGN	286:1	286:15	5	img -> PALmap = NULL
LVAL	286:1	286:1	6	img -> PALmap
FIELD	286:1	286:6	7	img -> PALmap
LEAF_NODE	286:1	286:1	8	img
LEAF_NODE	286:4	286:4	8	->
LEAF_NODE	286:6	286:6	8	PALmap
ASSIGN_OP	286:13	286:13	6	=
LEAF_NODE	286:13	286:13	7	=
RVAL	286:15	286:15	6	NULL
FIELD	286:15	286:15	7	NULL
LEAF_NODE	286:15	286:15	8	NULL
LEAF_NODE	286:19	286:19	4	;
EXPR_STATEMENT	287:1	287:18	3	img -> ycbcr = NULL ;
EXPR	287:1	287:1	4	img -> ycbcr = NULL
ASSIGN	287:1	287:14	5	img -> ycbcr = NULL
LVAL	287:1	287:1	6	img -> ycbcr
FIELD	287:1	287:6	7	img -> ycbcr
LEAF_NODE	287:1	287:1	8	img
LEAF_NODE	287:4	287:4	8	->
LEAF_NODE	287:6	287:6	8	ycbcr
ASSIGN_OP	287:12	287:12	6	=
LEAF_NODE	287:12	287:12	7	=
RVAL	287:14	287:14	6	NULL
FIELD	287:14	287:14	7	NULL
LEAF_NODE	287:14	287:14	8	NULL
LEAF_NODE	287:18	287:18	4	;
EXPR_STATEMENT	288:1	288:19	3	img -> cielab = NULL ;
EXPR	288:1	288:1	4	img -> cielab = NULL
ASSIGN	288:1	288:15	5	img -> cielab = NULL
LVAL	288:1	288:1	6	img -> cielab
FIELD	288:1	288:6	7	img -> cielab
LEAF_NODE	288:1	288:1	8	img
LEAF_NODE	288:4	288:4	8	->
LEAF_NODE	288:6	288:6	8	cielab
ASSIGN_OP	288:13	288:13	6	=
LEAF_NODE	288:13	288:13	7	=
RVAL	288:15	288:15	6	NULL
FIELD	288:15	288:15	7	NULL
LEAF_NODE	288:15	288:15	8	NULL
LEAF_NODE	288:19	288:19	4	;
EXPR_STATEMENT	289:1	289:19	3	img -> UaToAa = NULL ;
EXPR	289:1	289:1	4	img -> UaToAa = NULL
ASSIGN	289:1	289:15	5	img -> UaToAa = NULL
LVAL	289:1	289:1	6	img -> UaToAa
FIELD	289:1	289:6	7	img -> UaToAa
LEAF_NODE	289:1	289:1	8	img
LEAF_NODE	289:4	289:4	8	->
LEAF_NODE	289:6	289:6	8	UaToAa
ASSIGN_OP	289:13	289:13	6	=
LEAF_NODE	289:13	289:13	7	=
RVAL	289:15	289:15	6	NULL
FIELD	289:15	289:15	7	NULL
LEAF_NODE	289:15	289:15	8	NULL
LEAF_NODE	289:19	289:19	4	;
EXPR_STATEMENT	290:1	290:26	3	img -> Bitdepth16To8 = NULL ;
EXPR	290:1	290:1	4	img -> Bitdepth16To8 = NULL
ASSIGN	290:1	290:22	5	img -> Bitdepth16To8 = NULL
LVAL	290:1	290:1	6	img -> Bitdepth16To8
FIELD	290:1	290:6	7	img -> Bitdepth16To8
LEAF_NODE	290:1	290:1	8	img
LEAF_NODE	290:4	290:4	8	->
LEAF_NODE	290:6	290:6	8	Bitdepth16To8
ASSIGN_OP	290:20	290:20	6	=
LEAF_NODE	290:20	290:20	7	=
RVAL	290:22	290:22	6	NULL
FIELD	290:22	290:22	7	NULL
LEAF_NODE	290:22	290:22	8	NULL
LEAF_NODE	290:26	290:26	4	;
EXPR_STATEMENT	291:1	291:43	3	img -> req_orientation = ORIENTATION_BOTLEFT ;
EXPR	291:1	291:1	4	img -> req_orientation = ORIENTATION_BOTLEFT
ASSIGN	291:1	291:24	5	img -> req_orientation = ORIENTATION_BOTLEFT
LVAL	291:1	291:1	6	img -> req_orientation
FIELD	291:1	291:6	7	img -> req_orientation
LEAF_NODE	291:1	291:1	8	img
LEAF_NODE	291:4	291:4	8	->
LEAF_NODE	291:6	291:6	8	req_orientation
ASSIGN_OP	291:22	291:22	6	=
LEAF_NODE	291:22	291:22	7	=
RVAL	291:24	291:24	6	ORIENTATION_BOTLEFT
FIELD	291:24	291:24	7	ORIENTATION_BOTLEFT
LEAF_NODE	291:24	291:24	8	ORIENTATION_BOTLEFT
LEAF_NODE	291:43	291:43	4	;
EXPR_STATEMENT	293:1	293:15	3	img -> tif = tif ;
EXPR	293:1	293:1	4	img -> tif = tif
ASSIGN	293:1	293:12	5	img -> tif = tif
LVAL	293:1	293:1	6	img -> tif
FIELD	293:1	293:6	7	img -> tif
LEAF_NODE	293:1	293:1	8	img
LEAF_NODE	293:4	293:4	8	->
LEAF_NODE	293:6	293:6	8	tif
ASSIGN_OP	293:10	293:10	6	=
LEAF_NODE	293:10	293:10	7	=
RVAL	293:12	293:12	6	tif
FIELD	293:12	293:12	7	tif
LEAF_NODE	293:12	293:12	8	tif
LEAF_NODE	293:15	293:15	4	;
EXPR_STATEMENT	294:1	294:22	3	img -> stoponerr = stop ;
EXPR	294:1	294:1	4	img -> stoponerr = stop
ASSIGN	294:1	294:18	5	img -> stoponerr = stop
LVAL	294:1	294:1	6	img -> stoponerr
FIELD	294:1	294:6	7	img -> stoponerr
LEAF_NODE	294:1	294:1	8	img
LEAF_NODE	294:4	294:4	8	->
LEAF_NODE	294:6	294:6	8	stoponerr
ASSIGN_OP	294:16	294:16	6	=
LEAF_NODE	294:16	294:16	7	=
RVAL	294:18	294:18	6	stop
FIELD	294:18	294:18	7	stop
LEAF_NODE	294:18	294:18	8	stop
LEAF_NODE	294:22	294:22	4	;
EXPR_STATEMENT	295:1	295:71	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_BITSPERSAMPLE , & img -> bitspersample ) ;
EXPR	295:1	295:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_BITSPERSAMPLE , & img -> bitspersample )
FUNCTION_CALL	295:1	295:70	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_BITSPERSAMPLE , & img -> bitspersample )
CALLEE	295:1	295:1	6	TIFFGetFieldDefaulted
LEAF_NODE	295:1	295:1	7	TIFFGetFieldDefaulted
LEAF_NODE	295:22	295:22	6	(
ARGUMENT	295:23	295:23	6	tif
FIELD	295:23	295:23	7	tif
LEAF_NODE	295:23	295:23	8	tif
LEAF_NODE	295:26	295:26	6	,
ARGUMENT	295:28	295:28	6	TIFFTAG_BITSPERSAMPLE
FIELD	295:28	295:28	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	295:28	295:28	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	295:49	295:49	6	,
ARGUMENT	295:51	295:51	6	& img -> bitspersample
UNARY_EXPR	295:51	295:52	7	& img -> bitspersample
UNARY_OPERATOR	295:51	295:51	8	&
LEAF_NODE	295:51	295:51	9	&
FIELD	295:52	295:57	8	img -> bitspersample
LEAF_NODE	295:52	295:52	9	img
LEAF_NODE	295:55	295:55	9	->
LEAF_NODE	295:57	295:57	9	bitspersample
LEAF_NODE	295:70	295:70	6	)
LEAF_NODE	295:71	295:71	4	;
SELECTION	296:1	296:29	3	
KEYWORD	296:1	296:1	4	switch
LEAF_NODE	296:1	296:1	5	switch
LEAF_NODE	296:8	296:8	4	(
CONDITION	296:9	296:9	4	img -> bitspersample
EXPR	296:9	296:9	5	img -> bitspersample
FIELD	296:9	296:14	6	img -> bitspersample
LEAF_NODE	296:9	296:9	7	img
LEAF_NODE	296:12	296:12	7	->
LEAF_NODE	296:14	296:14	7	bitspersample
LEAF_NODE	296:27	296:27	4	)
STATEMENTS	296:29	307:1	4	
LEAF_NODE	296:29	296:29	5	{
STATEMENTS	297:2	306:3	5	
LABEL	297:2	297:8	6	case 1 :
LEAF_NODE	297:2	297:2	7	case
LEAF_NODE	297:7	297:7	7	1
LEAF_NODE	297:8	297:8	7	:
LABEL	298:2	298:8	6	case 2 :
LEAF_NODE	298:2	298:2	7	case
LEAF_NODE	298:7	298:7	7	2
LEAF_NODE	298:8	298:8	7	:
LABEL	299:2	299:8	6	case 4 :
LEAF_NODE	299:2	299:2	7	case
LEAF_NODE	299:7	299:7	7	4
LEAF_NODE	299:8	299:8	7	:
LABEL	300:2	300:8	6	case 8 :
LEAF_NODE	300:2	300:2	7	case
LEAF_NODE	300:7	300:7	7	8
LEAF_NODE	300:8	300:8	7	:
LABEL	301:2	301:9	6	case 16 :
LEAF_NODE	301:2	301:2	7	case
LEAF_NODE	301:7	301:7	7	16
LEAF_NODE	301:9	301:9	7	:
JUMP_STATEMENT	302:3	302:8	6	break DESTINATION ;
KEYWORD	302:3	302:3	7	break
LEAF_NODE	302:3	302:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	302:8	302:8	7	;
LABEL	303:2	303:9	6	default :
LEAF_NODE	303:2	303:2	7	default
LEAF_NODE	303:9	303:9	7	:
EXPR_STATEMENT	304:3	305:26	6	sprintf ( emsg , "Sorry, can not handle images with %d-bit samples" , img -> bitspersample ) ;
EXPR	304:3	304:3	7	sprintf ( emsg , "Sorry, can not handle images with %d-bit samples" , img -> bitspersample )
FUNCTION_CALL	304:3	305:25	8	sprintf ( emsg , "Sorry, can not handle images with %d-bit samples" , img -> bitspersample )
CALLEE	304:3	304:3	9	sprintf
LEAF_NODE	304:3	304:3	10	sprintf
LEAF_NODE	304:10	304:10	9	(
ARGUMENT	304:11	304:11	9	emsg
FIELD	304:11	304:11	10	emsg
LEAF_NODE	304:11	304:11	11	emsg
LEAF_NODE	304:15	304:15	9	,
ARGUMENT	304:17	304:17	9	"Sorry, can not handle images with %d-bit samples"
FIELD	304:17	304:17	10	"Sorry, can not handle images with %d-bit samples"
LEAF_NODE	304:17	304:17	11	"Sorry, can not handle images with %d-bit samples"
LEAF_NODE	304:67	304:67	9	,
ARGUMENT	305:7	305:7	9	img -> bitspersample
FIELD	305:7	305:12	10	img -> bitspersample
LEAF_NODE	305:7	305:7	11	img
LEAF_NODE	305:10	305:10	11	->
LEAF_NODE	305:12	305:12	11	bitspersample
LEAF_NODE	305:25	305:25	9	)
LEAF_NODE	305:26	305:26	7	;
JUMP_STATEMENT	306:3	306:19	6	goto fail_return ;
KEYWORD	306:3	306:3	7	goto
LEAF_NODE	306:3	306:3	8	goto
DESTINATION	306:8	306:8	7	fail_return
LEAF_NODE	306:8	306:8	8	fail_return
LEAF_NODE	306:19	306:19	7	;
LEAF_NODE	307:1	307:1	5	}
EXPR_STATEMENT	308:1	308:15	3	img -> alpha = 0 ;
EXPR	308:1	308:1	4	img -> alpha = 0
ASSIGN	308:1	308:14	5	img -> alpha = 0
LVAL	308:1	308:1	6	img -> alpha
FIELD	308:1	308:6	7	img -> alpha
LEAF_NODE	308:1	308:1	8	img
LEAF_NODE	308:4	308:4	8	->
LEAF_NODE	308:6	308:6	8	alpha
ASSIGN_OP	308:12	308:12	6	=
LEAF_NODE	308:12	308:12	7	=
RVAL	308:14	308:14	6	0
FIELD	308:14	308:14	7	0
LEAF_NODE	308:14	308:14	8	0
LEAF_NODE	308:15	308:15	4	;
EXPR_STATEMENT	309:1	309:75	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_SAMPLESPERPIXEL , & img -> samplesperpixel ) ;
EXPR	309:1	309:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_SAMPLESPERPIXEL , & img -> samplesperpixel )
FUNCTION_CALL	309:1	309:74	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_SAMPLESPERPIXEL , & img -> samplesperpixel )
CALLEE	309:1	309:1	6	TIFFGetFieldDefaulted
LEAF_NODE	309:1	309:1	7	TIFFGetFieldDefaulted
LEAF_NODE	309:22	309:22	6	(
ARGUMENT	309:23	309:23	6	tif
FIELD	309:23	309:23	7	tif
LEAF_NODE	309:23	309:23	8	tif
LEAF_NODE	309:26	309:26	6	,
ARGUMENT	309:28	309:28	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	309:28	309:28	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	309:28	309:28	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	309:51	309:51	6	,
ARGUMENT	309:53	309:53	6	& img -> samplesperpixel
UNARY_EXPR	309:53	309:54	7	& img -> samplesperpixel
UNARY_OPERATOR	309:53	309:53	8	&
LEAF_NODE	309:53	309:53	9	&
FIELD	309:54	309:59	8	img -> samplesperpixel
LEAF_NODE	309:54	309:54	9	img
LEAF_NODE	309:57	309:57	9	->
LEAF_NODE	309:59	309:59	9	samplesperpixel
LEAF_NODE	309:74	309:74	6	)
LEAF_NODE	309:75	309:75	4	;
EXPR_STATEMENT	310:1	311:32	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_EXTRASAMPLES , & extrasamples , & sampleinfo ) ;
EXPR	310:1	310:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_EXTRASAMPLES , & extrasamples , & sampleinfo )
FUNCTION_CALL	310:1	311:31	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_EXTRASAMPLES , & extrasamples , & sampleinfo )
CALLEE	310:1	310:1	6	TIFFGetFieldDefaulted
LEAF_NODE	310:1	310:1	7	TIFFGetFieldDefaulted
LEAF_NODE	310:22	310:22	6	(
ARGUMENT	310:23	310:23	6	tif
FIELD	310:23	310:23	7	tif
LEAF_NODE	310:23	310:23	8	tif
LEAF_NODE	310:26	310:26	6	,
ARGUMENT	310:28	310:28	6	TIFFTAG_EXTRASAMPLES
FIELD	310:28	310:28	7	TIFFTAG_EXTRASAMPLES
LEAF_NODE	310:28	310:28	8	TIFFTAG_EXTRASAMPLES
LEAF_NODE	310:48	310:48	6	,
ARGUMENT	311:5	311:5	6	& extrasamples
UNARY_EXPR	311:5	311:6	7	& extrasamples
UNARY_OPERATOR	311:5	311:5	8	&
LEAF_NODE	311:5	311:5	9	&
FIELD	311:6	311:6	8	extrasamples
LEAF_NODE	311:6	311:6	9	extrasamples
LEAF_NODE	311:18	311:18	6	,
ARGUMENT	311:20	311:20	6	& sampleinfo
UNARY_EXPR	311:20	311:21	7	& sampleinfo
UNARY_OPERATOR	311:20	311:20	8	&
LEAF_NODE	311:20	311:20	9	&
FIELD	311:21	311:21	8	sampleinfo
LEAF_NODE	311:21	311:21	9	sampleinfo
LEAF_NODE	311:31	311:31	6	)
LEAF_NODE	311:32	311:32	4	;
SELECTION	312:1	313:1	3	
KEYWORD	312:1	312:1	4	if
LEAF_NODE	312:1	312:1	5	if
LEAF_NODE	312:4	312:4	4	(
CONDITION	312:5	312:5	4	extrasamples >= 1
EXPR	312:5	312:21	5	extrasamples >= 1
FIELD	312:5	312:5	6	extrasamples
LEAF_NODE	312:5	312:5	7	extrasamples
REL_OPERATOR	312:18	312:18	6	>=
LEAF_NODE	312:18	312:18	7	>=
FIELD	312:21	312:21	6	1
LEAF_NODE	312:21	312:21	7	1
LEAF_NODE	312:22	312:22	4	)
STATEMENTS	313:1	324:1	4	
LEAF_NODE	313:1	313:1	5	{
STATEMENTS	314:2	314:2	5	
SELECTION	314:2	314:25	6	
KEYWORD	314:2	314:2	7	switch
LEAF_NODE	314:2	314:2	8	switch
LEAF_NODE	314:9	314:9	7	(
CONDITION	314:10	314:10	7	sampleinfo [ 0 ]
EXPR	314:10	314:10	8	sampleinfo [ 0 ]
FIELD	314:10	314:22	9	sampleinfo [ 0 ]
LEAF_NODE	314:10	314:10	10	sampleinfo
LEAF_NODE	314:20	314:20	10	[
EXPR	314:21	314:21	10	0
FIELD	314:21	314:21	11	0
LEAF_NODE	314:21	314:21	12	0
LEAF_NODE	314:22	314:22	10	]
LEAF_NODE	314:23	314:23	7	)
STATEMENTS	314:25	323:2	7	
LEAF_NODE	314:25	314:25	8	{
STATEMENTS	315:3	322:4	8	
LABEL	315:3	315:31	9	case EXTRASAMPLE_UNSPECIFIED :
LEAF_NODE	315:3	315:3	10	case
LEAF_NODE	315:8	315:8	10	EXTRASAMPLE_UNSPECIFIED
LEAF_NODE	315:31	315:31	10	:
SELECTION	316:4	317:5	9	
KEYWORD	316:4	316:4	10	if
LEAF_NODE	316:4	316:4	11	if
LEAF_NODE	316:7	316:7	10	(
CONDITION	316:8	316:8	10	img -> samplesperpixel > 3
EXPR	316:8	316:31	11	img -> samplesperpixel > 3
FIELD	316:8	316:13	12	img -> samplesperpixel
LEAF_NODE	316:8	316:8	13	img
LEAF_NODE	316:11	316:11	13	->
LEAF_NODE	316:13	316:13	13	samplesperpixel
REL_OPERATOR	316:29	316:29	12	>
LEAF_NODE	316:29	316:29	13	>
FIELD	316:31	316:31	12	3
LEAF_NODE	316:31	316:31	13	3
LEAF_NODE	316:32	316:32	10	)
STATEMENTS	317:5	317:5	10	
EXPR_STATEMENT	317:5	317:40	11	img -> alpha = EXTRASAMPLE_ASSOCALPHA ;
EXPR	317:5	317:5	12	img -> alpha = EXTRASAMPLE_ASSOCALPHA
ASSIGN	317:5	317:18	13	img -> alpha = EXTRASAMPLE_ASSOCALPHA
LVAL	317:5	317:5	14	img -> alpha
FIELD	317:5	317:10	15	img -> alpha
LEAF_NODE	317:5	317:5	16	img
LEAF_NODE	317:8	317:8	16	->
LEAF_NODE	317:10	317:10	16	alpha
ASSIGN_OP	317:16	317:16	14	=
LEAF_NODE	317:16	317:16	15	=
RVAL	317:18	317:18	14	EXTRASAMPLE_ASSOCALPHA
FIELD	317:18	317:18	15	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	317:18	317:18	16	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	317:40	317:40	12	;
JUMP_STATEMENT	318:4	318:9	9	break DESTINATION ;
KEYWORD	318:4	318:4	10	break
LEAF_NODE	318:4	318:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	318:9	318:9	10	;
LABEL	319:3	319:30	9	case EXTRASAMPLE_ASSOCALPHA :
LEAF_NODE	319:3	319:3	10	case
LEAF_NODE	319:8	319:8	10	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	319:30	319:30	10	:
LABEL	320:3	320:30	9	case EXTRASAMPLE_UNASSALPHA :
LEAF_NODE	320:3	320:3	10	case
LEAF_NODE	320:8	320:8	10	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	320:30	320:30	10	:
EXPR_STATEMENT	321:4	321:30	9	img -> alpha = sampleinfo [ 0 ] ;
EXPR	321:4	321:4	10	img -> alpha = sampleinfo [ 0 ]
ASSIGN	321:4	321:17	11	img -> alpha = sampleinfo [ 0 ]
LVAL	321:4	321:4	12	img -> alpha
FIELD	321:4	321:9	13	img -> alpha
LEAF_NODE	321:4	321:4	14	img
LEAF_NODE	321:7	321:7	14	->
LEAF_NODE	321:9	321:9	14	alpha
ASSIGN_OP	321:15	321:15	12	=
LEAF_NODE	321:15	321:15	13	=
RVAL	321:17	321:17	12	sampleinfo [ 0 ]
FIELD	321:17	321:29	13	sampleinfo [ 0 ]
LEAF_NODE	321:17	321:17	14	sampleinfo
LEAF_NODE	321:27	321:27	14	[
EXPR	321:28	321:28	14	0
FIELD	321:28	321:28	15	0
LEAF_NODE	321:28	321:28	16	0
LEAF_NODE	321:29	321:29	14	]
LEAF_NODE	321:30	321:30	10	;
JUMP_STATEMENT	322:4	322:9	9	break DESTINATION ;
KEYWORD	322:4	322:4	10	break
LEAF_NODE	322:4	322:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	322:9	322:9	10	;
LEAF_NODE	323:2	323:2	8	}
LEAF_NODE	324:1	324:1	5	}
SELECTION	327:1	328:2	3	
KEYWORD	327:1	327:1	4	if
LEAF_NODE	327:1	327:1	5	if
LEAF_NODE	327:3	327:3	4	(
CONDITION	327:5	327:5	4	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & img -> photometric )
EXPR	327:5	327:5	5	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & img -> photometric )
UNARY_EXPR	327:5	327:6	6	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & img -> photometric )
UNARY_OPERATOR	327:5	327:5	7	!
LEAF_NODE	327:5	327:5	8	!
FUNCTION_CALL	327:6	327:62	7	TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & img -> photometric )
CALLEE	327:6	327:6	8	TIFFGetField
LEAF_NODE	327:6	327:6	9	TIFFGetField
LEAF_NODE	327:18	327:18	8	(
ARGUMENT	327:19	327:19	8	tif
FIELD	327:19	327:19	9	tif
LEAF_NODE	327:19	327:19	10	tif
LEAF_NODE	327:22	327:22	8	,
ARGUMENT	327:24	327:24	8	TIFFTAG_PHOTOMETRIC
FIELD	327:24	327:24	9	TIFFTAG_PHOTOMETRIC
LEAF_NODE	327:24	327:24	10	TIFFTAG_PHOTOMETRIC
LEAF_NODE	327:43	327:43	8	,
ARGUMENT	327:45	327:45	8	& img -> photometric
UNARY_EXPR	327:45	327:46	9	& img -> photometric
UNARY_OPERATOR	327:45	327:45	10	&
LEAF_NODE	327:45	327:45	11	&
FIELD	327:46	327:51	10	img -> photometric
LEAF_NODE	327:46	327:46	11	img
LEAF_NODE	327:49	327:49	11	->
LEAF_NODE	327:51	327:51	11	photometric
LEAF_NODE	327:62	327:62	8	)
LEAF_NODE	327:63	327:63	4	)
STATEMENTS	328:2	328:2	4	
EXPR_STATEMENT	328:2	328:43	5	img -> photometric = PHOTOMETRIC_MINISWHITE ;
EXPR	328:2	328:2	6	img -> photometric = PHOTOMETRIC_MINISWHITE
ASSIGN	328:2	328:21	7	img -> photometric = PHOTOMETRIC_MINISWHITE
LVAL	328:2	328:2	8	img -> photometric
FIELD	328:2	328:7	9	img -> photometric
LEAF_NODE	328:2	328:2	10	img
LEAF_NODE	328:5	328:5	10	->
LEAF_NODE	328:7	328:7	10	photometric
ASSIGN_OP	328:19	328:19	8	=
LEAF_NODE	328:19	328:19	9	=
RVAL	328:21	328:21	8	PHOTOMETRIC_MINISWHITE
FIELD	328:21	328:21	9	PHOTOMETRIC_MINISWHITE
LEAF_NODE	328:21	328:21	10	PHOTOMETRIC_MINISWHITE
LEAF_NODE	328:43	328:43	6	;
SELECTION	330:1	333:1	3	
KEYWORD	330:1	330:1	4	if
LEAF_NODE	330:1	330:1	5	if
LEAF_NODE	330:3	330:3	4	(
CONDITION	330:5	330:5	4	extrasamples == 0 && img -> samplesperpixel == 4 && img -> photometric == PHOTOMETRIC_RGB
EXPR	330:5	330:5	5	extrasamples == 0 && img -> samplesperpixel == 4 && img -> photometric == PHOTOMETRIC_RGB
AND	330:5	331:8	6	extrasamples == 0 && img -> samplesperpixel == 4 && img -> photometric == PHOTOMETRIC_RGB
EXPR	330:5	330:21	7	extrasamples == 0
FIELD	330:5	330:5	8	extrasamples
LEAF_NODE	330:5	330:5	9	extrasamples
EQ_OPERATOR	330:18	330:18	8	==
LEAF_NODE	330:18	330:18	9	==
FIELD	330:21	330:21	8	0
LEAF_NODE	330:21	330:21	9	0
LEAF_NODE	331:5	331:5	7	&&
EXPR	331:8	331:8	7	img -> samplesperpixel == 4 && img -> photometric == PHOTOMETRIC_RGB
AND	331:8	332:8	8	img -> samplesperpixel == 4 && img -> photometric == PHOTOMETRIC_RGB
EXPR	331:8	331:32	9	img -> samplesperpixel == 4
FIELD	331:8	331:13	10	img -> samplesperpixel
LEAF_NODE	331:8	331:8	11	img
LEAF_NODE	331:11	331:11	11	->
LEAF_NODE	331:13	331:13	11	samplesperpixel
EQ_OPERATOR	331:29	331:29	10	==
LEAF_NODE	331:29	331:29	11	==
FIELD	331:32	331:32	10	4
LEAF_NODE	331:32	331:32	11	4
LEAF_NODE	332:5	332:5	9	&&
EXPR	332:8	332:28	9	img -> photometric == PHOTOMETRIC_RGB
FIELD	332:8	332:13	10	img -> photometric
LEAF_NODE	332:8	332:8	11	img
LEAF_NODE	332:11	332:11	11	->
LEAF_NODE	332:13	332:13	11	photometric
EQ_OPERATOR	332:25	332:25	10	==
LEAF_NODE	332:25	332:25	11	==
FIELD	332:28	332:28	10	PHOTOMETRIC_RGB
LEAF_NODE	332:28	332:28	11	PHOTOMETRIC_RGB
LEAF_NODE	332:44	332:44	4	)
STATEMENTS	333:1	336:1	4	
LEAF_NODE	333:1	333:1	5	{
STATEMENTS	334:2	335:2	5	
EXPR_STATEMENT	334:2	334:37	6	img -> alpha = EXTRASAMPLE_ASSOCALPHA ;
EXPR	334:2	334:2	7	img -> alpha = EXTRASAMPLE_ASSOCALPHA
ASSIGN	334:2	334:15	8	img -> alpha = EXTRASAMPLE_ASSOCALPHA
LVAL	334:2	334:2	9	img -> alpha
FIELD	334:2	334:7	10	img -> alpha
LEAF_NODE	334:2	334:2	11	img
LEAF_NODE	334:5	334:5	11	->
LEAF_NODE	334:7	334:7	11	alpha
ASSIGN_OP	334:13	334:13	9	=
LEAF_NODE	334:13	334:13	10	=
RVAL	334:15	334:15	9	EXTRASAMPLE_ASSOCALPHA
FIELD	334:15	334:15	10	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	334:15	334:15	11	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	334:37	334:37	7	;
EXPR_STATEMENT	335:2	335:18	6	extrasamples = 1 ;
EXPR	335:2	335:2	7	extrasamples = 1
ASSIGN	335:2	335:17	8	extrasamples = 1
LVAL	335:2	335:2	9	extrasamples
FIELD	335:2	335:2	10	extrasamples
LEAF_NODE	335:2	335:2	11	extrasamples
ASSIGN_OP	335:15	335:15	9	=
LEAF_NODE	335:15	335:15	10	=
RVAL	335:17	335:17	9	1
FIELD	335:17	335:17	10	1
LEAF_NODE	335:17	335:17	11	1
LEAF_NODE	335:18	335:18	7	;
LEAF_NODE	336:1	336:1	5	}
EXPR_STATEMENT	339:1	339:52	3	colorchannels = img -> samplesperpixel - extrasamples ;
EXPR	339:1	339:1	4	colorchannels = img -> samplesperpixel - extrasamples
ASSIGN	339:1	339:17	5	colorchannels = img -> samplesperpixel - extrasamples
LVAL	339:1	339:1	6	colorchannels
FIELD	339:1	339:1	7	colorchannels
LEAF_NODE	339:1	339:1	8	colorchannels
ASSIGN_OP	339:15	339:15	6	=
LEAF_NODE	339:15	339:15	7	=
RVAL	339:17	339:40	6	img -> samplesperpixel - extrasamples
FIELD	339:17	339:22	7	img -> samplesperpixel
LEAF_NODE	339:17	339:17	8	img
LEAF_NODE	339:20	339:20	8	->
LEAF_NODE	339:22	339:22	8	samplesperpixel
LEAF_NODE	339:38	339:38	7	-
FIELD	339:40	339:40	7	extrasamples
LEAF_NODE	339:40	339:40	8	extrasamples
LEAF_NODE	339:52	339:52	4	;
EXPR_STATEMENT	340:1	340:59	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_COMPRESSION , & compress ) ;
EXPR	340:1	340:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_COMPRESSION , & compress )
FUNCTION_CALL	340:1	340:58	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_COMPRESSION , & compress )
CALLEE	340:1	340:1	6	TIFFGetFieldDefaulted
LEAF_NODE	340:1	340:1	7	TIFFGetFieldDefaulted
LEAF_NODE	340:22	340:22	6	(
ARGUMENT	340:23	340:23	6	tif
FIELD	340:23	340:23	7	tif
LEAF_NODE	340:23	340:23	8	tif
LEAF_NODE	340:26	340:26	6	,
ARGUMENT	340:28	340:28	6	TIFFTAG_COMPRESSION
FIELD	340:28	340:28	7	TIFFTAG_COMPRESSION
LEAF_NODE	340:28	340:28	8	TIFFTAG_COMPRESSION
LEAF_NODE	340:47	340:47	6	,
ARGUMENT	340:49	340:49	6	& compress
UNARY_EXPR	340:49	340:50	7	& compress
UNARY_OPERATOR	340:49	340:49	8	&
LEAF_NODE	340:49	340:49	9	&
FIELD	340:50	340:50	8	compress
LEAF_NODE	340:50	340:50	9	compress
LEAF_NODE	340:58	340:58	6	)
LEAF_NODE	340:59	340:59	4	;
EXPR_STATEMENT	341:1	341:64	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_PLANARCONFIG , & planarconfig ) ;
EXPR	341:1	341:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_PLANARCONFIG , & planarconfig )
FUNCTION_CALL	341:1	341:63	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_PLANARCONFIG , & planarconfig )
CALLEE	341:1	341:1	6	TIFFGetFieldDefaulted
LEAF_NODE	341:1	341:1	7	TIFFGetFieldDefaulted
LEAF_NODE	341:22	341:22	6	(
ARGUMENT	341:23	341:23	6	tif
FIELD	341:23	341:23	7	tif
LEAF_NODE	341:23	341:23	8	tif
LEAF_NODE	341:26	341:26	6	,
ARGUMENT	341:28	341:28	6	TIFFTAG_PLANARCONFIG
FIELD	341:28	341:28	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	341:28	341:28	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	341:48	341:48	6	,
ARGUMENT	341:50	341:50	6	& planarconfig
UNARY_EXPR	341:50	341:51	7	& planarconfig
UNARY_OPERATOR	341:50	341:50	8	&
LEAF_NODE	341:50	341:50	9	&
FIELD	341:51	341:51	8	planarconfig
LEAF_NODE	341:51	341:51	9	planarconfig
LEAF_NODE	341:63	341:63	6	)
LEAF_NODE	341:64	341:64	4	;
SELECTION	342:1	342:65	3	
KEYWORD	342:1	342:1	4	if
LEAF_NODE	342:1	342:1	5	if
LEAF_NODE	342:4	342:4	4	(
CONDITION	342:5	342:5	4	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & img -> photometric )
EXPR	342:5	342:5	5	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & img -> photometric )
UNARY_EXPR	342:5	342:6	6	! TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & img -> photometric )
UNARY_OPERATOR	342:5	342:5	7	!
LEAF_NODE	342:5	342:5	8	!
FUNCTION_CALL	342:6	342:62	7	TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & img -> photometric )
CALLEE	342:6	342:6	8	TIFFGetField
LEAF_NODE	342:6	342:6	9	TIFFGetField
LEAF_NODE	342:18	342:18	8	(
ARGUMENT	342:19	342:19	8	tif
FIELD	342:19	342:19	9	tif
LEAF_NODE	342:19	342:19	10	tif
LEAF_NODE	342:22	342:22	8	,
ARGUMENT	342:24	342:24	8	TIFFTAG_PHOTOMETRIC
FIELD	342:24	342:24	9	TIFFTAG_PHOTOMETRIC
LEAF_NODE	342:24	342:24	10	TIFFTAG_PHOTOMETRIC
LEAF_NODE	342:43	342:43	8	,
ARGUMENT	342:45	342:45	8	& img -> photometric
UNARY_EXPR	342:45	342:46	9	& img -> photometric
UNARY_OPERATOR	342:45	342:45	10	&
LEAF_NODE	342:45	342:45	11	&
FIELD	342:46	342:51	10	img -> photometric
LEAF_NODE	342:46	342:46	11	img
LEAF_NODE	342:49	342:49	11	->
LEAF_NODE	342:51	342:51	11	photometric
LEAF_NODE	342:62	342:62	8	)
LEAF_NODE	342:63	342:63	4	)
STATEMENTS	342:65	357:1	4	
LEAF_NODE	342:65	342:65	5	{
STATEMENTS	343:2	343:2	5	
SELECTION	343:2	343:25	6	
KEYWORD	343:2	343:2	7	switch
LEAF_NODE	343:2	343:2	8	switch
LEAF_NODE	343:9	343:9	7	(
CONDITION	343:10	343:10	7	colorchannels
EXPR	343:10	343:10	8	colorchannels
FIELD	343:10	343:10	9	colorchannels
LEAF_NODE	343:10	343:10	10	colorchannels
LEAF_NODE	343:23	343:23	7	)
STATEMENTS	343:25	356:2	7	
LEAF_NODE	343:25	343:25	8	{
STATEMENTS	344:3	355:32	8	
LABEL	344:3	344:9	9	case 1 :
LEAF_NODE	344:3	344:3	10	case
LEAF_NODE	344:8	344:8	10	1
LEAF_NODE	344:9	344:9	10	:
SELECTION	345:4	346:5	9	
KEYWORD	345:4	345:4	10	if
LEAF_NODE	345:4	345:4	11	if
LEAF_NODE	345:7	345:7	10	(
CONDITION	345:8	345:8	10	isCCITTCompression ( tif )
EXPR	345:8	345:8	11	isCCITTCompression ( tif )
FUNCTION_CALL	345:8	345:30	12	isCCITTCompression ( tif )
CALLEE	345:8	345:8	13	isCCITTCompression
LEAF_NODE	345:8	345:8	14	isCCITTCompression
LEAF_NODE	345:26	345:26	13	(
ARGUMENT	345:27	345:27	13	tif
FIELD	345:27	345:27	14	tif
LEAF_NODE	345:27	345:27	15	tif
LEAF_NODE	345:30	345:30	13	)
LEAF_NODE	345:31	345:31	10	)
STATEMENTS	346:5	346:5	10	
EXPR_STATEMENT	346:5	346:46	11	img -> photometric = PHOTOMETRIC_MINISWHITE ;
EXPR	346:5	346:5	12	img -> photometric = PHOTOMETRIC_MINISWHITE
ASSIGN	346:5	346:24	13	img -> photometric = PHOTOMETRIC_MINISWHITE
LVAL	346:5	346:5	14	img -> photometric
FIELD	346:5	346:10	15	img -> photometric
LEAF_NODE	346:5	346:5	16	img
LEAF_NODE	346:8	346:8	16	->
LEAF_NODE	346:10	346:10	16	photometric
ASSIGN_OP	346:22	346:22	14	=
LEAF_NODE	346:22	346:22	15	=
RVAL	346:24	346:24	14	PHOTOMETRIC_MINISWHITE
FIELD	346:24	346:24	15	PHOTOMETRIC_MINISWHITE
LEAF_NODE	346:24	346:24	16	PHOTOMETRIC_MINISWHITE
LEAF_NODE	346:46	346:46	12	;
SELECTION	347:4	348:5	9	
KEYWORD	347:4	347:4	10	else
LEAF_NODE	347:4	347:4	11	else
STATEMENTS	348:5	348:5	10	
EXPR_STATEMENT	348:5	348:46	11	img -> photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	348:5	348:5	12	img -> photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	348:5	348:24	13	img -> photometric = PHOTOMETRIC_MINISBLACK
LVAL	348:5	348:5	14	img -> photometric
FIELD	348:5	348:10	15	img -> photometric
LEAF_NODE	348:5	348:5	16	img
LEAF_NODE	348:8	348:8	16	->
LEAF_NODE	348:10	348:10	16	photometric
ASSIGN_OP	348:22	348:22	14	=
LEAF_NODE	348:22	348:22	15	=
RVAL	348:24	348:24	14	PHOTOMETRIC_MINISBLACK
FIELD	348:24	348:24	15	PHOTOMETRIC_MINISBLACK
LEAF_NODE	348:24	348:24	16	PHOTOMETRIC_MINISBLACK
LEAF_NODE	348:46	348:46	12	;
JUMP_STATEMENT	349:4	349:9	9	break DESTINATION ;
KEYWORD	349:4	349:4	10	break
LEAF_NODE	349:4	349:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	349:9	349:9	10	;
LABEL	350:3	350:9	9	case 3 :
LEAF_NODE	350:3	350:3	10	case
LEAF_NODE	350:8	350:8	10	3
LEAF_NODE	350:9	350:9	10	:
EXPR_STATEMENT	351:4	351:38	9	img -> photometric = PHOTOMETRIC_RGB ;
EXPR	351:4	351:4	10	img -> photometric = PHOTOMETRIC_RGB
ASSIGN	351:4	351:23	11	img -> photometric = PHOTOMETRIC_RGB
LVAL	351:4	351:4	12	img -> photometric
FIELD	351:4	351:9	13	img -> photometric
LEAF_NODE	351:4	351:4	14	img
LEAF_NODE	351:7	351:7	14	->
LEAF_NODE	351:9	351:9	14	photometric
ASSIGN_OP	351:21	351:21	12	=
LEAF_NODE	351:21	351:21	13	=
RVAL	351:23	351:23	12	PHOTOMETRIC_RGB
FIELD	351:23	351:23	13	PHOTOMETRIC_RGB
LEAF_NODE	351:23	351:23	14	PHOTOMETRIC_RGB
LEAF_NODE	351:38	351:38	10	;
JUMP_STATEMENT	352:4	352:9	9	break DESTINATION ;
KEYWORD	352:4	352:4	10	break
LEAF_NODE	352:4	352:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	352:9	352:9	10	;
LABEL	353:3	353:10	9	default :
LEAF_NODE	353:3	353:3	10	default
LEAF_NODE	353:10	353:10	10	:
EXPR_STATEMENT	354:4	354:52	9	sprintf ( emsg , "Missing needed %s tag" , photoTag ) ;
EXPR	354:4	354:4	10	sprintf ( emsg , "Missing needed %s tag" , photoTag )
FUNCTION_CALL	354:4	354:51	11	sprintf ( emsg , "Missing needed %s tag" , photoTag )
CALLEE	354:4	354:4	12	sprintf
LEAF_NODE	354:4	354:4	13	sprintf
LEAF_NODE	354:11	354:11	12	(
ARGUMENT	354:12	354:12	12	emsg
FIELD	354:12	354:12	13	emsg
LEAF_NODE	354:12	354:12	14	emsg
LEAF_NODE	354:16	354:16	12	,
ARGUMENT	354:18	354:18	12	"Missing needed %s tag"
FIELD	354:18	354:18	13	"Missing needed %s tag"
LEAF_NODE	354:18	354:18	14	"Missing needed %s tag"
LEAF_NODE	354:41	354:41	12	,
ARGUMENT	354:43	354:43	12	photoTag
FIELD	354:43	354:43	13	photoTag
LEAF_NODE	354:43	354:43	14	photoTag
LEAF_NODE	354:51	354:51	12	)
LEAF_NODE	354:52	354:52	10	;
JUMP_STATEMENT	355:32	355:48	9	goto fail_return ;
KEYWORD	355:32	355:32	10	goto
LEAF_NODE	355:32	355:32	11	goto
DESTINATION	355:37	355:37	10	fail_return
LEAF_NODE	355:37	355:37	11	fail_return
LEAF_NODE	355:48	355:48	10	;
LEAF_NODE	356:2	356:2	8	}
LEAF_NODE	357:1	357:1	5	}
SELECTION	358:1	358:27	3	
KEYWORD	358:1	358:1	4	switch
LEAF_NODE	358:1	358:1	5	switch
LEAF_NODE	358:8	358:8	4	(
CONDITION	358:9	358:9	4	img -> photometric
EXPR	358:9	358:9	5	img -> photometric
FIELD	358:9	358:14	6	img -> photometric
LEAF_NODE	358:9	358:9	7	img
LEAF_NODE	358:12	358:12	7	->
LEAF_NODE	358:14	358:14	7	photometric
LEAF_NODE	358:25	358:25	4	)
STATEMENTS	358:27	475:1	4	
LEAF_NODE	358:27	358:27	5	{
STATEMENTS	359:2	474:24	5	
LABEL	359:2	359:26	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	359:2	359:2	7	case
LEAF_NODE	359:7	359:7	7	PHOTOMETRIC_PALETTE
LEAF_NODE	359:26	359:26	7	:
SELECTION	360:3	361:44	6	
KEYWORD	360:3	360:3	7	if
LEAF_NODE	360:3	360:3	8	if
LEAF_NODE	360:6	360:6	7	(
CONDITION	360:7	360:7	7	! TIFFGetField ( tif , TIFFTAG_COLORMAP , & red_orig , & green_orig , & blue_orig )
EXPR	360:7	360:7	8	! TIFFGetField ( tif , TIFFTAG_COLORMAP , & red_orig , & green_orig , & blue_orig )
UNARY_EXPR	360:7	360:8	9	! TIFFGetField ( tif , TIFFTAG_COLORMAP , & red_orig , & green_orig , & blue_orig )
UNARY_OPERATOR	360:7	360:7	10	!
LEAF_NODE	360:7	360:7	11	!
FUNCTION_CALL	360:8	361:41	10	TIFFGetField ( tif , TIFFTAG_COLORMAP , & red_orig , & green_orig , & blue_orig )
CALLEE	360:8	360:8	11	TIFFGetField
LEAF_NODE	360:8	360:8	12	TIFFGetField
LEAF_NODE	360:20	360:20	11	(
ARGUMENT	360:21	360:21	11	tif
FIELD	360:21	360:21	12	tif
LEAF_NODE	360:21	360:21	13	tif
LEAF_NODE	360:24	360:24	11	,
ARGUMENT	360:26	360:26	11	TIFFTAG_COLORMAP
FIELD	360:26	360:26	12	TIFFTAG_COLORMAP
LEAF_NODE	360:26	360:26	13	TIFFTAG_COLORMAP
LEAF_NODE	360:42	360:42	11	,
ARGUMENT	361:7	361:7	11	& red_orig
UNARY_EXPR	361:7	361:8	12	& red_orig
UNARY_OPERATOR	361:7	361:7	13	&
LEAF_NODE	361:7	361:7	14	&
FIELD	361:8	361:8	13	red_orig
LEAF_NODE	361:8	361:8	14	red_orig
LEAF_NODE	361:16	361:16	11	,
ARGUMENT	361:18	361:18	11	& green_orig
UNARY_EXPR	361:18	361:19	12	& green_orig
UNARY_OPERATOR	361:18	361:18	13	&
LEAF_NODE	361:18	361:18	14	&
FIELD	361:19	361:19	13	green_orig
LEAF_NODE	361:19	361:19	14	green_orig
LEAF_NODE	361:29	361:29	11	,
ARGUMENT	361:31	361:31	11	& blue_orig
UNARY_EXPR	361:31	361:32	12	& blue_orig
UNARY_OPERATOR	361:31	361:31	13	&
LEAF_NODE	361:31	361:31	14	&
FIELD	361:32	361:32	13	blue_orig
LEAF_NODE	361:32	361:32	14	blue_orig
LEAF_NODE	361:41	361:41	11	)
LEAF_NODE	361:42	361:42	7	)
STATEMENTS	361:44	364:3	7	
LEAF_NODE	361:44	361:44	8	{
STATEMENTS	362:4	363:32	8	
EXPR_STATEMENT	362:4	362:54	9	sprintf ( emsg , "Missing required \"Colormap\" tag" ) ;
EXPR	362:4	362:4	10	sprintf ( emsg , "Missing required \"Colormap\" tag" )
FUNCTION_CALL	362:4	362:53	11	sprintf ( emsg , "Missing required \"Colormap\" tag" )
CALLEE	362:4	362:4	12	sprintf
LEAF_NODE	362:4	362:4	13	sprintf
LEAF_NODE	362:11	362:11	12	(
ARGUMENT	362:12	362:12	12	emsg
FIELD	362:12	362:12	13	emsg
LEAF_NODE	362:12	362:12	14	emsg
LEAF_NODE	362:16	362:16	12	,
ARGUMENT	362:18	362:18	12	"Missing required \"Colormap\" tag"
FIELD	362:18	362:18	13	"Missing required \"Colormap\" tag"
LEAF_NODE	362:18	362:18	14	"Missing required \"Colormap\" tag"
LEAF_NODE	362:53	362:53	12	)
LEAF_NODE	362:54	362:54	10	;
JUMP_STATEMENT	363:32	363:48	9	goto fail_return ;
KEYWORD	363:32	363:32	10	goto
LEAF_NODE	363:32	363:32	11	goto
DESTINATION	363:37	363:37	10	fail_return
LEAF_NODE	363:37	363:37	11	fail_return
LEAF_NODE	363:48	363:48	10	;
LEAF_NODE	364:3	364:3	8	}
EXPR_STATEMENT	367:3	367:39	6	n_color = ( 1U << img -> bitspersample ) ;
EXPR	367:3	367:3	7	n_color = ( 1U << img -> bitspersample )
ASSIGN	367:3	367:13	8	n_color = ( 1U << img -> bitspersample )
LVAL	367:3	367:3	9	n_color
FIELD	367:3	367:3	10	n_color
LEAF_NODE	367:3	367:3	11	n_color
ASSIGN_OP	367:11	367:11	9	=
LEAF_NODE	367:11	367:11	10	=
RVAL	367:13	367:38	9	( 1U << img -> bitspersample )
LEAF_NODE	367:13	367:13	10	(
FIELD	367:14	367:14	10	1U
LEAF_NODE	367:14	367:14	11	1U
LEAF_NODE	367:17	367:17	10	<<
FIELD	367:20	367:25	10	img -> bitspersample
LEAF_NODE	367:20	367:20	11	img
LEAF_NODE	367:23	367:23	11	->
LEAF_NODE	367:25	367:25	11	bitspersample
LEAF_NODE	367:38	367:38	10	)
LEAF_NODE	367:39	367:39	7	;
EXPR_STATEMENT	368:3	368:64	6	img -> redcmap = ( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color ) ;
EXPR	368:3	368:3	7	img -> redcmap = ( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color )
ASSIGN	368:3	368:18	8	img -> redcmap = ( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color )
LVAL	368:3	368:3	9	img -> redcmap
FIELD	368:3	368:8	10	img -> redcmap
LEAF_NODE	368:3	368:3	11	img
LEAF_NODE	368:6	368:6	11	->
LEAF_NODE	368:8	368:8	11	redcmap
ASSIGN_OP	368:16	368:16	9	=
LEAF_NODE	368:16	368:16	10	=
RVAL	368:18	368:29	9	( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color )
LEAF_NODE	368:18	368:18	10	(
TYPE_NAME	368:19	368:19	10	uint16
LEAF_NODE	368:19	368:19	11	uint16
LEAF_NODE	368:26	368:26	10	*
LEAF_NODE	368:27	368:27	10	)
FUNCTION_CALL	368:29	368:63	10	_TIFFmalloc ( sizeof ( uint16 ) * n_color )
CALLEE	368:29	368:29	11	_TIFFmalloc
LEAF_NODE	368:29	368:29	12	_TIFFmalloc
LEAF_NODE	368:40	368:40	11	(
ARGUMENT	368:41	368:56	11	sizeof ( uint16 ) * n_color
FUNCTION_CALL	368:41	368:54	12	sizeof ( uint16 )
CALLEE	368:41	368:41	13	sizeof
LEAF_NODE	368:41	368:41	14	sizeof
LEAF_NODE	368:47	368:47	13	(
ARGUMENT	368:48	368:48	13	uint16
FIELD	368:48	368:48	14	uint16
LEAF_NODE	368:48	368:48	15	uint16
LEAF_NODE	368:54	368:54	13	)
LEAF_NODE	368:55	368:55	12	*
FIELD	368:56	368:56	12	n_color
LEAF_NODE	368:56	368:56	13	n_color
LEAF_NODE	368:63	368:63	11	)
LEAF_NODE	368:64	368:64	7	;
EXPR_STATEMENT	369:3	369:66	6	img -> greencmap = ( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color ) ;
EXPR	369:3	369:3	7	img -> greencmap = ( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color )
ASSIGN	369:3	369:20	8	img -> greencmap = ( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color )
LVAL	369:3	369:3	9	img -> greencmap
FIELD	369:3	369:8	10	img -> greencmap
LEAF_NODE	369:3	369:3	11	img
LEAF_NODE	369:6	369:6	11	->
LEAF_NODE	369:8	369:8	11	greencmap
ASSIGN_OP	369:18	369:18	9	=
LEAF_NODE	369:18	369:18	10	=
RVAL	369:20	369:31	9	( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color )
LEAF_NODE	369:20	369:20	10	(
TYPE_NAME	369:21	369:21	10	uint16
LEAF_NODE	369:21	369:21	11	uint16
LEAF_NODE	369:28	369:28	10	*
LEAF_NODE	369:29	369:29	10	)
FUNCTION_CALL	369:31	369:65	10	_TIFFmalloc ( sizeof ( uint16 ) * n_color )
CALLEE	369:31	369:31	11	_TIFFmalloc
LEAF_NODE	369:31	369:31	12	_TIFFmalloc
LEAF_NODE	369:42	369:42	11	(
ARGUMENT	369:43	369:58	11	sizeof ( uint16 ) * n_color
FUNCTION_CALL	369:43	369:56	12	sizeof ( uint16 )
CALLEE	369:43	369:43	13	sizeof
LEAF_NODE	369:43	369:43	14	sizeof
LEAF_NODE	369:49	369:49	13	(
ARGUMENT	369:50	369:50	13	uint16
FIELD	369:50	369:50	14	uint16
LEAF_NODE	369:50	369:50	15	uint16
LEAF_NODE	369:56	369:56	13	)
LEAF_NODE	369:57	369:57	12	*
FIELD	369:58	369:58	12	n_color
LEAF_NODE	369:58	369:58	13	n_color
LEAF_NODE	369:65	369:65	11	)
LEAF_NODE	369:66	369:66	7	;
EXPR_STATEMENT	370:3	370:65	6	img -> bluecmap = ( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color ) ;
EXPR	370:3	370:3	7	img -> bluecmap = ( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color )
ASSIGN	370:3	370:19	8	img -> bluecmap = ( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color )
LVAL	370:3	370:3	9	img -> bluecmap
FIELD	370:3	370:8	10	img -> bluecmap
LEAF_NODE	370:3	370:3	11	img
LEAF_NODE	370:6	370:6	11	->
LEAF_NODE	370:8	370:8	11	bluecmap
ASSIGN_OP	370:17	370:17	9	=
LEAF_NODE	370:17	370:17	10	=
RVAL	370:19	370:30	9	( uint16 * ) _TIFFmalloc ( sizeof ( uint16 ) * n_color )
LEAF_NODE	370:19	370:19	10	(
TYPE_NAME	370:20	370:20	10	uint16
LEAF_NODE	370:20	370:20	11	uint16
LEAF_NODE	370:27	370:27	10	*
LEAF_NODE	370:28	370:28	10	)
FUNCTION_CALL	370:30	370:64	10	_TIFFmalloc ( sizeof ( uint16 ) * n_color )
CALLEE	370:30	370:30	11	_TIFFmalloc
LEAF_NODE	370:30	370:30	12	_TIFFmalloc
LEAF_NODE	370:41	370:41	11	(
ARGUMENT	370:42	370:57	11	sizeof ( uint16 ) * n_color
FUNCTION_CALL	370:42	370:55	12	sizeof ( uint16 )
CALLEE	370:42	370:42	13	sizeof
LEAF_NODE	370:42	370:42	14	sizeof
LEAF_NODE	370:48	370:48	13	(
ARGUMENT	370:49	370:49	13	uint16
FIELD	370:49	370:49	14	uint16
LEAF_NODE	370:49	370:49	15	uint16
LEAF_NODE	370:55	370:55	13	)
LEAF_NODE	370:56	370:56	12	*
FIELD	370:57	370:57	12	n_color
LEAF_NODE	370:57	370:57	13	n_color
LEAF_NODE	370:64	370:64	11	)
LEAF_NODE	370:65	370:65	7	;
SELECTION	371:3	371:60	6	
KEYWORD	371:3	371:3	7	if
LEAF_NODE	371:3	371:3	8	if
LEAF_NODE	371:5	371:5	7	(
CONDITION	371:7	371:7	7	! img -> redcmap || ! img -> greencmap || ! img -> bluecmap
EXPR	371:7	371:7	8	! img -> redcmap || ! img -> greencmap || ! img -> bluecmap
OR	371:7	371:24	9	! img -> redcmap || ! img -> greencmap || ! img -> bluecmap
EXPR	371:7	371:7	10	! img -> redcmap
UNARY_EXPR	371:7	371:8	11	! img -> redcmap
UNARY_OPERATOR	371:7	371:7	12	!
LEAF_NODE	371:7	371:7	13	!
FIELD	371:8	371:13	12	img -> redcmap
LEAF_NODE	371:8	371:8	13	img
LEAF_NODE	371:11	371:11	13	->
LEAF_NODE	371:13	371:13	13	redcmap
LEAF_NODE	371:21	371:21	10	||
EXPR	371:24	371:24	10	! img -> greencmap || ! img -> bluecmap
OR	371:24	371:43	11	! img -> greencmap || ! img -> bluecmap
EXPR	371:24	371:24	12	! img -> greencmap
UNARY_EXPR	371:24	371:25	13	! img -> greencmap
UNARY_OPERATOR	371:24	371:24	14	!
LEAF_NODE	371:24	371:24	15	!
FIELD	371:25	371:30	14	img -> greencmap
LEAF_NODE	371:25	371:25	15	img
LEAF_NODE	371:28	371:28	15	->
LEAF_NODE	371:30	371:30	15	greencmap
LEAF_NODE	371:40	371:40	12	||
EXPR	371:43	371:43	12	! img -> bluecmap
UNARY_EXPR	371:43	371:44	13	! img -> bluecmap
UNARY_OPERATOR	371:43	371:43	14	!
LEAF_NODE	371:43	371:43	15	!
FIELD	371:44	371:49	14	img -> bluecmap
LEAF_NODE	371:44	371:44	15	img
LEAF_NODE	371:47	371:47	15	->
LEAF_NODE	371:49	371:49	15	bluecmap
LEAF_NODE	371:58	371:58	7	)
STATEMENTS	371:60	374:3	7	
LEAF_NODE	371:60	371:60	8	{
STATEMENTS	372:4	373:32	8	
EXPR_STATEMENT	372:4	372:52	9	sprintf ( emsg , "Out of memory for colormap copy" ) ;
EXPR	372:4	372:4	10	sprintf ( emsg , "Out of memory for colormap copy" )
FUNCTION_CALL	372:4	372:51	11	sprintf ( emsg , "Out of memory for colormap copy" )
CALLEE	372:4	372:4	12	sprintf
LEAF_NODE	372:4	372:4	13	sprintf
LEAF_NODE	372:11	372:11	12	(
ARGUMENT	372:12	372:12	12	emsg
FIELD	372:12	372:12	13	emsg
LEAF_NODE	372:12	372:12	14	emsg
LEAF_NODE	372:16	372:16	12	,
ARGUMENT	372:18	372:18	12	"Out of memory for colormap copy"
FIELD	372:18	372:18	13	"Out of memory for colormap copy"
LEAF_NODE	372:18	372:18	14	"Out of memory for colormap copy"
LEAF_NODE	372:51	372:51	12	)
LEAF_NODE	372:52	372:52	10	;
JUMP_STATEMENT	373:32	373:48	9	goto fail_return ;
KEYWORD	373:32	373:32	10	goto
LEAF_NODE	373:32	373:32	11	goto
DESTINATION	373:37	373:37	10	fail_return
LEAF_NODE	373:37	373:37	11	fail_return
LEAF_NODE	373:48	373:48	10	;
LEAF_NODE	374:3	374:3	8	}
EXPR_STATEMENT	376:3	376:53	6	_TIFFmemcpy ( img -> redcmap , red_orig , n_color * 2 ) ;
EXPR	376:3	376:3	7	_TIFFmemcpy ( img -> redcmap , red_orig , n_color * 2 )
FUNCTION_CALL	376:3	376:52	8	_TIFFmemcpy ( img -> redcmap , red_orig , n_color * 2 )
CALLEE	376:3	376:3	9	_TIFFmemcpy
LEAF_NODE	376:3	376:3	10	_TIFFmemcpy
LEAF_NODE	376:14	376:14	9	(
ARGUMENT	376:16	376:16	9	img -> redcmap
FIELD	376:16	376:21	10	img -> redcmap
LEAF_NODE	376:16	376:16	11	img
LEAF_NODE	376:19	376:19	11	->
LEAF_NODE	376:21	376:21	11	redcmap
LEAF_NODE	376:28	376:28	9	,
ARGUMENT	376:30	376:30	9	red_orig
FIELD	376:30	376:30	10	red_orig
LEAF_NODE	376:30	376:30	11	red_orig
LEAF_NODE	376:38	376:38	9	,
ARGUMENT	376:40	376:50	9	n_color * 2
FIELD	376:40	376:40	10	n_color
LEAF_NODE	376:40	376:40	11	n_color
LEAF_NODE	376:48	376:48	10	*
FIELD	376:50	376:50	10	2
LEAF_NODE	376:50	376:50	11	2
LEAF_NODE	376:52	376:52	9	)
LEAF_NODE	376:53	376:53	7	;
EXPR_STATEMENT	377:3	377:57	6	_TIFFmemcpy ( img -> greencmap , green_orig , n_color * 2 ) ;
EXPR	377:3	377:3	7	_TIFFmemcpy ( img -> greencmap , green_orig , n_color * 2 )
FUNCTION_CALL	377:3	377:56	8	_TIFFmemcpy ( img -> greencmap , green_orig , n_color * 2 )
CALLEE	377:3	377:3	9	_TIFFmemcpy
LEAF_NODE	377:3	377:3	10	_TIFFmemcpy
LEAF_NODE	377:14	377:14	9	(
ARGUMENT	377:16	377:16	9	img -> greencmap
FIELD	377:16	377:21	10	img -> greencmap
LEAF_NODE	377:16	377:16	11	img
LEAF_NODE	377:19	377:19	11	->
LEAF_NODE	377:21	377:21	11	greencmap
LEAF_NODE	377:30	377:30	9	,
ARGUMENT	377:32	377:32	9	green_orig
FIELD	377:32	377:32	10	green_orig
LEAF_NODE	377:32	377:32	11	green_orig
LEAF_NODE	377:42	377:42	9	,
ARGUMENT	377:44	377:54	9	n_color * 2
FIELD	377:44	377:44	10	n_color
LEAF_NODE	377:44	377:44	11	n_color
LEAF_NODE	377:52	377:52	10	*
FIELD	377:54	377:54	10	2
LEAF_NODE	377:54	377:54	11	2
LEAF_NODE	377:56	377:56	9	)
LEAF_NODE	377:57	377:57	7	;
EXPR_STATEMENT	378:3	378:55	6	_TIFFmemcpy ( img -> bluecmap , blue_orig , n_color * 2 ) ;
EXPR	378:3	378:3	7	_TIFFmemcpy ( img -> bluecmap , blue_orig , n_color * 2 )
FUNCTION_CALL	378:3	378:54	8	_TIFFmemcpy ( img -> bluecmap , blue_orig , n_color * 2 )
CALLEE	378:3	378:3	9	_TIFFmemcpy
LEAF_NODE	378:3	378:3	10	_TIFFmemcpy
LEAF_NODE	378:14	378:14	9	(
ARGUMENT	378:16	378:16	9	img -> bluecmap
FIELD	378:16	378:21	10	img -> bluecmap
LEAF_NODE	378:16	378:16	11	img
LEAF_NODE	378:19	378:19	11	->
LEAF_NODE	378:21	378:21	11	bluecmap
LEAF_NODE	378:29	378:29	9	,
ARGUMENT	378:31	378:31	9	blue_orig
FIELD	378:31	378:31	10	blue_orig
LEAF_NODE	378:31	378:31	11	blue_orig
LEAF_NODE	378:40	378:40	9	,
ARGUMENT	378:42	378:52	9	n_color * 2
FIELD	378:42	378:42	10	n_color
LEAF_NODE	378:42	378:42	11	n_color
LEAF_NODE	378:50	378:50	10	*
FIELD	378:52	378:52	10	2
LEAF_NODE	378:52	378:52	11	2
LEAF_NODE	378:54	378:54	9	)
LEAF_NODE	378:55	378:55	7	;
LABEL	381:2	381:29	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	381:2	381:2	7	case
LEAF_NODE	381:7	381:7	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	381:29	381:29	7	:
LABEL	382:2	382:29	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	382:2	382:2	7	case
LEAF_NODE	382:7	382:7	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	382:29	382:29	7	:
SELECTION	383:3	385:35	6	
KEYWORD	383:3	383:3	7	if
LEAF_NODE	383:3	383:3	8	if
LEAF_NODE	383:6	383:6	7	(
CONDITION	383:7	383:7	7	planarconfig == PLANARCONFIG_CONTIG && img -> samplesperpixel != 1 && img -> bitspersample < 8
EXPR	383:7	383:7	8	planarconfig == PLANARCONFIG_CONTIG && img -> samplesperpixel != 1 && img -> bitspersample < 8
AND	383:7	384:10	9	planarconfig == PLANARCONFIG_CONTIG && img -> samplesperpixel != 1 && img -> bitspersample < 8
EXPR	383:7	383:23	10	planarconfig == PLANARCONFIG_CONTIG
FIELD	383:7	383:7	11	planarconfig
LEAF_NODE	383:7	383:7	12	planarconfig
EQ_OPERATOR	383:20	383:20	11	==
LEAF_NODE	383:20	383:20	12	==
FIELD	383:23	383:23	11	PLANARCONFIG_CONTIG
LEAF_NODE	383:23	383:23	12	PLANARCONFIG_CONTIG
LEAF_NODE	384:7	384:7	10	&&
EXPR	384:10	384:10	10	img -> samplesperpixel != 1 && img -> bitspersample < 8
AND	384:10	385:10	11	img -> samplesperpixel != 1 && img -> bitspersample < 8
EXPR	384:10	384:34	12	img -> samplesperpixel != 1
FIELD	384:10	384:15	13	img -> samplesperpixel
LEAF_NODE	384:10	384:10	14	img
LEAF_NODE	384:13	384:13	14	->
LEAF_NODE	384:15	384:15	14	samplesperpixel
EQ_OPERATOR	384:31	384:31	13	!=
LEAF_NODE	384:31	384:31	14	!=
FIELD	384:34	384:34	13	1
LEAF_NODE	384:34	384:34	14	1
LEAF_NODE	385:7	385:7	12	&&
EXPR	385:10	385:31	12	img -> bitspersample < 8
FIELD	385:10	385:15	13	img -> bitspersample
LEAF_NODE	385:10	385:10	14	img
LEAF_NODE	385:13	385:13	14	->
LEAF_NODE	385:15	385:15	14	bitspersample
REL_OPERATOR	385:29	385:29	13	<
LEAF_NODE	385:29	385:29	14	<
FIELD	385:31	385:31	13	8
LEAF_NODE	385:31	385:31	14	8
LEAF_NODE	385:33	385:33	7	)
STATEMENTS	385:35	393:3	7	
LEAF_NODE	385:35	385:35	8	{
STATEMENTS	386:4	392:32	8	
LEAF_NODE	386:4	386:4	9	sprintf
LEAF_NODE	386:11	386:11	9	(
LEAF_NODE	386:12	386:12	9	emsg
LEAF_NODE	386:16	386:16	9	,
LEAF_NODE	387:8	387:8	9	"Sorry, can not handle contiguous data with %s=%d, "
LEAF_NODE	388:8	388:8	9	"and %s=%d and Bits/Sample=%d"
LEAF_NODE	388:38	388:38	9	,
LEAF_NODE	389:8	389:8	9	photoTag
LEAF_NODE	389:16	389:16	9	,
LEAF_NODE	389:18	389:18	9	img
LEAF_NODE	389:21	389:21	9	->
LEAF_NODE	389:23	389:23	9	photometric
LEAF_NODE	389:34	389:34	9	,
LEAF_NODE	390:8	390:8	9	"Samples/pixel"
LEAF_NODE	390:23	390:23	9	,
LEAF_NODE	390:25	390:25	9	img
LEAF_NODE	390:28	390:28	9	->
LEAF_NODE	390:30	390:30	9	samplesperpixel
LEAF_NODE	390:45	390:45	9	,
LEAF_NODE	391:8	391:8	9	img
LEAF_NODE	391:11	391:11	9	->
LEAF_NODE	391:13	391:13	9	bitspersample
LEAF_NODE	391:26	391:26	9	)
LEAF_NODE	391:27	391:27	9	;
JUMP_STATEMENT	392:32	392:48	9	goto fail_return ;
KEYWORD	392:32	392:32	10	goto
LEAF_NODE	392:32	392:32	11	goto
DESTINATION	392:37	392:37	10	fail_return
LEAF_NODE	392:37	392:37	11	fail_return
LEAF_NODE	392:48	392:48	10	;
LEAF_NODE	393:3	393:3	8	}
JUMP_STATEMENT	394:3	394:8	6	break DESTINATION ;
KEYWORD	394:3	394:3	7	break
LEAF_NODE	394:3	394:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	394:8	394:8	7	;
LABEL	395:2	395:24	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	395:2	395:2	7	case
LEAF_NODE	395:7	395:7	7	PHOTOMETRIC_YCBCR
LEAF_NODE	395:24	395:24	7	:
SELECTION	397:3	400:4	6	
KEYWORD	397:3	397:3	7	if
LEAF_NODE	397:3	397:3	8	if
LEAF_NODE	397:6	397:6	7	(
CONDITION	397:7	397:7	7	planarconfig == PLANARCONFIG_CONTIG
EXPR	397:7	397:23	8	planarconfig == PLANARCONFIG_CONTIG
FIELD	397:7	397:7	9	planarconfig
LEAF_NODE	397:7	397:7	10	planarconfig
EQ_OPERATOR	397:20	397:20	9	==
LEAF_NODE	397:20	397:20	10	==
FIELD	397:23	397:23	9	PLANARCONFIG_CONTIG
LEAF_NODE	397:23	397:23	10	PLANARCONFIG_CONTIG
LEAF_NODE	397:42	397:42	7	)
STATEMENTS	400:4	400:4	7	
SELECTION	400:4	400:22	8	
KEYWORD	400:4	400:4	9	switch
LEAF_NODE	400:4	400:4	10	switch
LEAF_NODE	400:11	400:11	9	(
CONDITION	400:12	400:12	9	compress
EXPR	400:12	400:12	10	compress
FIELD	400:12	400:12	11	compress
LEAF_NODE	400:12	400:12	12	compress
LEAF_NODE	400:20	400:20	9	)
STATEMENTS	400:22	413:4	9	
LEAF_NODE	400:22	400:22	10	{
STATEMENTS	401:5	412:6	10	
LABEL	401:5	401:26	11	case COMPRESSION_JPEG :
LEAF_NODE	401:5	401:5	12	case
LEAF_NODE	401:10	401:10	12	COMPRESSION_JPEG
LEAF_NODE	401:26	401:26	12	:
EXPR_STATEMENT	407:6	407:65	11	TIFFSetField ( tif , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB ) ;
EXPR	407:6	407:6	12	TIFFSetField ( tif , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
FUNCTION_CALL	407:6	407:64	13	TIFFSetField ( tif , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
CALLEE	407:6	407:6	14	TIFFSetField
LEAF_NODE	407:6	407:6	15	TIFFSetField
LEAF_NODE	407:18	407:18	14	(
ARGUMENT	407:19	407:19	14	tif
FIELD	407:19	407:19	15	tif
LEAF_NODE	407:19	407:19	16	tif
LEAF_NODE	407:22	407:22	14	,
ARGUMENT	407:24	407:24	14	TIFFTAG_JPEGCOLORMODE
FIELD	407:24	407:24	15	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	407:24	407:24	16	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	407:45	407:45	14	,
ARGUMENT	407:47	407:47	14	JPEGCOLORMODE_RGB
FIELD	407:47	407:47	15	JPEGCOLORMODE_RGB
LEAF_NODE	407:47	407:47	16	JPEGCOLORMODE_RGB
LEAF_NODE	407:64	407:64	14	)
LEAF_NODE	407:65	407:65	12	;
EXPR_STATEMENT	408:6	408:40	11	img -> photometric = PHOTOMETRIC_RGB ;
EXPR	408:6	408:6	12	img -> photometric = PHOTOMETRIC_RGB
ASSIGN	408:6	408:25	13	img -> photometric = PHOTOMETRIC_RGB
LVAL	408:6	408:6	14	img -> photometric
FIELD	408:6	408:11	15	img -> photometric
LEAF_NODE	408:6	408:6	16	img
LEAF_NODE	408:9	408:9	16	->
LEAF_NODE	408:11	408:11	16	photometric
ASSIGN_OP	408:23	408:23	14	=
LEAF_NODE	408:23	408:23	15	=
RVAL	408:25	408:25	14	PHOTOMETRIC_RGB
FIELD	408:25	408:25	15	PHOTOMETRIC_RGB
LEAF_NODE	408:25	408:25	16	PHOTOMETRIC_RGB
LEAF_NODE	408:40	408:40	12	;
JUMP_STATEMENT	409:6	409:11	11	break DESTINATION ;
KEYWORD	409:6	409:6	12	break
LEAF_NODE	409:6	409:6	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	409:11	409:11	12	;
LABEL	410:5	410:12	11	default :
LEAF_NODE	410:5	410:5	12	default
LEAF_NODE	410:12	410:12	12	:
LEAF_NODE	411:22	411:22	11	;
JUMP_STATEMENT	412:6	412:11	11	break DESTINATION ;
KEYWORD	412:6	412:6	12	break
LEAF_NODE	412:6	412:6	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	412:11	412:11	12	;
LEAF_NODE	413:4	413:4	10	}
JUMP_STATEMENT	420:3	420:8	6	break DESTINATION ;
KEYWORD	420:3	420:3	7	break
LEAF_NODE	420:3	420:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	420:8	420:8	7	;
LABEL	421:2	421:22	6	case PHOTOMETRIC_RGB :
LEAF_NODE	421:2	421:2	7	case
LEAF_NODE	421:7	421:7	7	PHOTOMETRIC_RGB
LEAF_NODE	421:22	421:22	7	:
SELECTION	422:3	422:26	6	
KEYWORD	422:3	422:3	7	if
LEAF_NODE	422:3	422:3	8	if
LEAF_NODE	422:6	422:6	7	(
CONDITION	422:7	422:7	7	colorchannels < 3
EXPR	422:7	422:23	8	colorchannels < 3
FIELD	422:7	422:7	9	colorchannels
LEAF_NODE	422:7	422:7	10	colorchannels
REL_OPERATOR	422:21	422:21	9	<
LEAF_NODE	422:21	422:21	10	<
FIELD	422:23	422:23	9	3
LEAF_NODE	422:23	422:23	10	3
LEAF_NODE	422:24	422:24	7	)
STATEMENTS	422:26	426:3	7	
LEAF_NODE	422:26	422:26	8	{
STATEMENTS	423:4	425:32	8	
EXPR_STATEMENT	423:4	424:40	9	sprintf ( emsg , "Sorry, can not handle RGB image with %s=%d" , "Color channels" , colorchannels ) ;
EXPR	423:4	423:4	10	sprintf ( emsg , "Sorry, can not handle RGB image with %s=%d" , "Color channels" , colorchannels )
FUNCTION_CALL	423:4	424:39	11	sprintf ( emsg , "Sorry, can not handle RGB image with %s=%d" , "Color channels" , colorchannels )
CALLEE	423:4	423:4	12	sprintf
LEAF_NODE	423:4	423:4	13	sprintf
LEAF_NODE	423:11	423:11	12	(
ARGUMENT	423:12	423:12	12	emsg
FIELD	423:12	423:12	13	emsg
LEAF_NODE	423:12	423:12	14	emsg
LEAF_NODE	423:16	423:16	12	,
ARGUMENT	423:18	423:18	12	"Sorry, can not handle RGB image with %s=%d"
FIELD	423:18	423:18	13	"Sorry, can not handle RGB image with %s=%d"
LEAF_NODE	423:18	423:18	14	"Sorry, can not handle RGB image with %s=%d"
LEAF_NODE	423:62	423:62	12	,
ARGUMENT	424:8	424:8	12	"Color channels"
FIELD	424:8	424:8	13	"Color channels"
LEAF_NODE	424:8	424:8	14	"Color channels"
LEAF_NODE	424:24	424:24	12	,
ARGUMENT	424:26	424:26	12	colorchannels
FIELD	424:26	424:26	13	colorchannels
LEAF_NODE	424:26	424:26	14	colorchannels
LEAF_NODE	424:39	424:39	12	)
LEAF_NODE	424:40	424:40	10	;
JUMP_STATEMENT	425:32	425:48	9	goto fail_return ;
KEYWORD	425:32	425:32	10	goto
LEAF_NODE	425:32	425:32	11	goto
DESTINATION	425:37	425:37	10	fail_return
LEAF_NODE	425:37	425:37	11	fail_return
LEAF_NODE	425:48	425:48	10	;
LEAF_NODE	426:3	426:3	8	}
JUMP_STATEMENT	427:3	427:8	6	break DESTINATION ;
KEYWORD	427:3	427:3	7	break
LEAF_NODE	427:3	427:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	427:8	427:8	7	;
LABEL	428:2	428:28	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	428:2	428:2	7	case
LEAF_NODE	428:7	428:7	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	428:28	428:28	7	:
LEAF_NODE	429:3	429:3	6	{
STATEMENTS	430:4	437:4	6	
SIMPLE_DECL	430:4	430:17	7	uint16 inkset ;
VAR_DECL	430:4	430:11	8	uint16 inkset
TYPE	430:4	430:4	9	uint16
TYPE_NAME	430:4	430:4	10	uint16
LEAF_NODE	430:4	430:4	11	uint16
NAME	430:11	430:11	9	inkset
LEAF_NODE	430:11	430:11	10	inkset
LEAF_NODE	430:17	430:17	8	;
EXPR_STATEMENT	431:4	431:55	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_INKSET , & inkset ) ;
EXPR	431:4	431:4	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_INKSET , & inkset )
FUNCTION_CALL	431:4	431:54	9	TIFFGetFieldDefaulted ( tif , TIFFTAG_INKSET , & inkset )
CALLEE	431:4	431:4	10	TIFFGetFieldDefaulted
LEAF_NODE	431:4	431:4	11	TIFFGetFieldDefaulted
LEAF_NODE	431:25	431:25	10	(
ARGUMENT	431:26	431:26	10	tif
FIELD	431:26	431:26	11	tif
LEAF_NODE	431:26	431:26	12	tif
LEAF_NODE	431:29	431:29	10	,
ARGUMENT	431:31	431:31	10	TIFFTAG_INKSET
FIELD	431:31	431:31	11	TIFFTAG_INKSET
LEAF_NODE	431:31	431:31	12	TIFFTAG_INKSET
LEAF_NODE	431:45	431:45	10	,
ARGUMENT	431:47	431:47	10	& inkset
UNARY_EXPR	431:47	431:48	11	& inkset
UNARY_OPERATOR	431:47	431:47	12	&
LEAF_NODE	431:47	431:47	13	&
FIELD	431:48	431:48	12	inkset
LEAF_NODE	431:48	431:48	13	inkset
LEAF_NODE	431:54	431:54	10	)
LEAF_NODE	431:55	431:55	8	;
SELECTION	432:4	432:31	7	
KEYWORD	432:4	432:4	8	if
LEAF_NODE	432:4	432:4	9	if
LEAF_NODE	432:7	432:7	8	(
CONDITION	432:8	432:8	8	inkset != INKSET_CMYK
EXPR	432:8	432:18	9	inkset != INKSET_CMYK
FIELD	432:8	432:8	10	inkset
LEAF_NODE	432:8	432:8	11	inkset
EQ_OPERATOR	432:15	432:15	10	!=
LEAF_NODE	432:15	432:15	11	!=
FIELD	432:18	432:18	10	INKSET_CMYK
LEAF_NODE	432:18	432:18	11	INKSET_CMYK
LEAF_NODE	432:29	432:29	8	)
STATEMENTS	432:31	436:4	8	
LEAF_NODE	432:31	432:31	9	{
STATEMENTS	433:5	435:40	9	
EXPR_STATEMENT	433:5	434:26	10	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "InkSet" , inkset ) ;
EXPR	433:5	433:5	11	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "InkSet" , inkset )
FUNCTION_CALL	433:5	434:25	12	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "InkSet" , inkset )
CALLEE	433:5	433:5	13	sprintf
LEAF_NODE	433:5	433:5	14	sprintf
LEAF_NODE	433:12	433:12	13	(
ARGUMENT	433:13	433:13	13	emsg
FIELD	433:13	433:13	14	emsg
LEAF_NODE	433:13	433:13	15	emsg
LEAF_NODE	433:17	433:17	13	,
ARGUMENT	433:19	433:19	13	"Sorry, can not handle separated image with %s=%d"
FIELD	433:19	433:19	14	"Sorry, can not handle separated image with %s=%d"
LEAF_NODE	433:19	433:19	15	"Sorry, can not handle separated image with %s=%d"
LEAF_NODE	433:69	433:69	13	,
ARGUMENT	434:9	434:9	13	"InkSet"
FIELD	434:9	434:9	14	"InkSet"
LEAF_NODE	434:9	434:9	15	"InkSet"
LEAF_NODE	434:17	434:17	13	,
ARGUMENT	434:19	434:19	13	inkset
FIELD	434:19	434:19	14	inkset
LEAF_NODE	434:19	434:19	15	inkset
LEAF_NODE	434:25	434:25	13	)
LEAF_NODE	434:26	434:26	11	;
JUMP_STATEMENT	435:40	435:56	10	goto fail_return ;
KEYWORD	435:40	435:40	11	goto
LEAF_NODE	435:40	435:40	12	goto
DESTINATION	435:45	435:45	11	fail_return
LEAF_NODE	435:45	435:45	12	fail_return
LEAF_NODE	435:56	435:56	11	;
LEAF_NODE	436:4	436:4	9	}
SELECTION	437:4	437:34	7	
KEYWORD	437:4	437:4	8	if
LEAF_NODE	437:4	437:4	9	if
LEAF_NODE	437:7	437:7	8	(
CONDITION	437:8	437:8	8	img -> samplesperpixel < 4
EXPR	437:8	437:31	9	img -> samplesperpixel < 4
FIELD	437:8	437:13	10	img -> samplesperpixel
LEAF_NODE	437:8	437:8	11	img
LEAF_NODE	437:11	437:11	11	->
LEAF_NODE	437:13	437:13	11	samplesperpixel
REL_OPERATOR	437:29	437:29	10	<
LEAF_NODE	437:29	437:29	11	<
FIELD	437:31	437:31	10	4
LEAF_NODE	437:31	437:31	11	4
LEAF_NODE	437:32	437:32	8	)
STATEMENTS	437:34	441:4	8	
LEAF_NODE	437:34	437:34	9	{
STATEMENTS	438:5	440:40	9	
EXPR_STATEMENT	438:5	439:47	10	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "Samples/pixel" , img -> samplesperpixel ) ;
EXPR	438:5	438:5	11	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "Samples/pixel" , img -> samplesperpixel )
FUNCTION_CALL	438:5	439:46	12	sprintf ( emsg , "Sorry, can not handle separated image with %s=%d" , "Samples/pixel" , img -> samplesperpixel )
CALLEE	438:5	438:5	13	sprintf
LEAF_NODE	438:5	438:5	14	sprintf
LEAF_NODE	438:12	438:12	13	(
ARGUMENT	438:13	438:13	13	emsg
FIELD	438:13	438:13	14	emsg
LEAF_NODE	438:13	438:13	15	emsg
LEAF_NODE	438:17	438:17	13	,
ARGUMENT	438:19	438:19	13	"Sorry, can not handle separated image with %s=%d"
FIELD	438:19	438:19	14	"Sorry, can not handle separated image with %s=%d"
LEAF_NODE	438:19	438:19	15	"Sorry, can not handle separated image with %s=%d"
LEAF_NODE	438:69	438:69	13	,
ARGUMENT	439:9	439:9	13	"Samples/pixel"
FIELD	439:9	439:9	14	"Samples/pixel"
LEAF_NODE	439:9	439:9	15	"Samples/pixel"
LEAF_NODE	439:24	439:24	13	,
ARGUMENT	439:26	439:26	13	img -> samplesperpixel
FIELD	439:26	439:31	14	img -> samplesperpixel
LEAF_NODE	439:26	439:26	15	img
LEAF_NODE	439:29	439:29	15	->
LEAF_NODE	439:31	439:31	15	samplesperpixel
LEAF_NODE	439:46	439:46	13	)
LEAF_NODE	439:47	439:47	11	;
JUMP_STATEMENT	440:40	440:56	10	goto fail_return ;
KEYWORD	440:40	440:40	11	goto
LEAF_NODE	440:40	440:40	12	goto
DESTINATION	440:45	440:45	11	fail_return
LEAF_NODE	440:45	440:45	12	fail_return
LEAF_NODE	440:56	440:56	11	;
LEAF_NODE	441:4	441:4	9	}
LEAF_NODE	442:3	442:3	6	}
JUMP_STATEMENT	443:3	443:8	6	break DESTINATION ;
KEYWORD	443:3	443:3	7	break
LEAF_NODE	443:3	443:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	443:8	443:8	7	;
LABEL	444:2	444:23	6	case PHOTOMETRIC_LOGL :
LEAF_NODE	444:2	444:2	7	case
LEAF_NODE	444:7	444:7	7	PHOTOMETRIC_LOGL
LEAF_NODE	444:23	444:23	7	:
SELECTION	445:3	445:39	6	
KEYWORD	445:3	445:3	7	if
LEAF_NODE	445:3	445:3	8	if
LEAF_NODE	445:6	445:6	7	(
CONDITION	445:7	445:7	7	compress != COMPRESSION_SGILOG
EXPR	445:7	445:19	8	compress != COMPRESSION_SGILOG
FIELD	445:7	445:7	9	compress
LEAF_NODE	445:7	445:7	10	compress
EQ_OPERATOR	445:16	445:16	9	!=
LEAF_NODE	445:16	445:16	10	!=
FIELD	445:19	445:19	9	COMPRESSION_SGILOG
LEAF_NODE	445:19	445:19	10	COMPRESSION_SGILOG
LEAF_NODE	445:37	445:37	7	)
STATEMENTS	445:39	449:3	7	
LEAF_NODE	445:39	445:39	8	{
STATEMENTS	446:4	448:32	8	
EXPR_STATEMENT	446:4	447:42	9	sprintf ( emsg , "Sorry, LogL data must have %s=%d" , "Compression" , COMPRESSION_SGILOG ) ;
EXPR	446:4	446:4	10	sprintf ( emsg , "Sorry, LogL data must have %s=%d" , "Compression" , COMPRESSION_SGILOG )
FUNCTION_CALL	446:4	447:41	11	sprintf ( emsg , "Sorry, LogL data must have %s=%d" , "Compression" , COMPRESSION_SGILOG )
CALLEE	446:4	446:4	12	sprintf
LEAF_NODE	446:4	446:4	13	sprintf
LEAF_NODE	446:11	446:11	12	(
ARGUMENT	446:12	446:12	12	emsg
FIELD	446:12	446:12	13	emsg
LEAF_NODE	446:12	446:12	14	emsg
LEAF_NODE	446:16	446:16	12	,
ARGUMENT	446:18	446:18	12	"Sorry, LogL data must have %s=%d"
FIELD	446:18	446:18	13	"Sorry, LogL data must have %s=%d"
LEAF_NODE	446:18	446:18	14	"Sorry, LogL data must have %s=%d"
LEAF_NODE	446:52	446:52	12	,
ARGUMENT	447:8	447:8	12	"Compression"
FIELD	447:8	447:8	13	"Compression"
LEAF_NODE	447:8	447:8	14	"Compression"
LEAF_NODE	447:21	447:21	12	,
ARGUMENT	447:23	447:23	12	COMPRESSION_SGILOG
FIELD	447:23	447:23	13	COMPRESSION_SGILOG
LEAF_NODE	447:23	447:23	14	COMPRESSION_SGILOG
LEAF_NODE	447:41	447:41	12	)
LEAF_NODE	447:42	447:42	10	;
JUMP_STATEMENT	448:32	448:48	9	goto fail_return ;
KEYWORD	448:32	448:32	10	goto
LEAF_NODE	448:32	448:32	11	goto
DESTINATION	448:37	448:37	10	fail_return
LEAF_NODE	448:37	448:37	11	fail_return
LEAF_NODE	448:48	448:48	10	;
LEAF_NODE	449:3	449:3	8	}
EXPR_STATEMENT	450:3	450:63	6	TIFFSetField ( tif , TIFFTAG_SGILOGDATAFMT , SGILOGDATAFMT_8BIT ) ;
EXPR	450:3	450:3	7	TIFFSetField ( tif , TIFFTAG_SGILOGDATAFMT , SGILOGDATAFMT_8BIT )
FUNCTION_CALL	450:3	450:62	8	TIFFSetField ( tif , TIFFTAG_SGILOGDATAFMT , SGILOGDATAFMT_8BIT )
CALLEE	450:3	450:3	9	TIFFSetField
LEAF_NODE	450:3	450:3	10	TIFFSetField
LEAF_NODE	450:15	450:15	9	(
ARGUMENT	450:16	450:16	9	tif
FIELD	450:16	450:16	10	tif
LEAF_NODE	450:16	450:16	11	tif
LEAF_NODE	450:19	450:19	9	,
ARGUMENT	450:21	450:21	9	TIFFTAG_SGILOGDATAFMT
FIELD	450:21	450:21	10	TIFFTAG_SGILOGDATAFMT
LEAF_NODE	450:21	450:21	11	TIFFTAG_SGILOGDATAFMT
LEAF_NODE	450:42	450:42	9	,
ARGUMENT	450:44	450:44	9	SGILOGDATAFMT_8BIT
FIELD	450:44	450:44	10	SGILOGDATAFMT_8BIT
LEAF_NODE	450:44	450:44	11	SGILOGDATAFMT_8BIT
LEAF_NODE	450:62	450:62	9	)
LEAF_NODE	450:63	450:63	7	;
EXPR_STATEMENT	451:3	451:44	6	img -> photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	451:3	451:3	7	img -> photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	451:3	451:22	8	img -> photometric = PHOTOMETRIC_MINISBLACK
LVAL	451:3	451:3	9	img -> photometric
FIELD	451:3	451:8	10	img -> photometric
LEAF_NODE	451:3	451:3	11	img
LEAF_NODE	451:6	451:6	11	->
LEAF_NODE	451:8	451:8	11	photometric
ASSIGN_OP	451:20	451:20	9	=
LEAF_NODE	451:20	451:20	10	=
RVAL	451:22	451:22	9	PHOTOMETRIC_MINISBLACK
FIELD	451:22	451:22	10	PHOTOMETRIC_MINISBLACK
LEAF_NODE	451:22	451:22	11	PHOTOMETRIC_MINISBLACK
LEAF_NODE	451:44	451:44	7	;
EXPR_STATEMENT	452:3	452:25	6	img -> bitspersample = 8 ;
EXPR	452:3	452:3	7	img -> bitspersample = 8
ASSIGN	452:3	452:24	8	img -> bitspersample = 8
LVAL	452:3	452:3	9	img -> bitspersample
FIELD	452:3	452:8	10	img -> bitspersample
LEAF_NODE	452:3	452:3	11	img
LEAF_NODE	452:6	452:6	11	->
LEAF_NODE	452:8	452:8	11	bitspersample
ASSIGN_OP	452:22	452:22	9	=
LEAF_NODE	452:22	452:22	10	=
RVAL	452:24	452:24	9	8
FIELD	452:24	452:24	10	8
LEAF_NODE	452:24	452:24	11	8
LEAF_NODE	452:25	452:25	7	;
JUMP_STATEMENT	453:3	453:8	6	break DESTINATION ;
KEYWORD	453:3	453:3	7	break
LEAF_NODE	453:3	453:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	453:8	453:8	7	;
LABEL	454:2	454:25	6	case PHOTOMETRIC_LOGLUV :
LEAF_NODE	454:2	454:2	7	case
LEAF_NODE	454:7	454:7	7	PHOTOMETRIC_LOGLUV
LEAF_NODE	454:25	454:25	7	:
SELECTION	455:3	455:75	6	
KEYWORD	455:3	455:3	7	if
LEAF_NODE	455:3	455:3	8	if
LEAF_NODE	455:6	455:6	7	(
CONDITION	455:7	455:7	7	compress != COMPRESSION_SGILOG && compress != COMPRESSION_SGILOG24
EXPR	455:7	455:7	8	compress != COMPRESSION_SGILOG && compress != COMPRESSION_SGILOG24
AND	455:7	455:41	9	compress != COMPRESSION_SGILOG && compress != COMPRESSION_SGILOG24
EXPR	455:7	455:19	10	compress != COMPRESSION_SGILOG
FIELD	455:7	455:7	11	compress
LEAF_NODE	455:7	455:7	12	compress
EQ_OPERATOR	455:16	455:16	11	!=
LEAF_NODE	455:16	455:16	12	!=
FIELD	455:19	455:19	11	COMPRESSION_SGILOG
LEAF_NODE	455:19	455:19	12	COMPRESSION_SGILOG
LEAF_NODE	455:38	455:38	10	&&
EXPR	455:41	455:53	10	compress != COMPRESSION_SGILOG24
FIELD	455:41	455:41	11	compress
LEAF_NODE	455:41	455:41	12	compress
EQ_OPERATOR	455:50	455:50	11	!=
LEAF_NODE	455:50	455:50	12	!=
FIELD	455:53	455:53	11	COMPRESSION_SGILOG24
LEAF_NODE	455:53	455:53	12	COMPRESSION_SGILOG24
LEAF_NODE	455:73	455:73	7	)
STATEMENTS	455:75	459:3	7	
LEAF_NODE	455:75	455:75	8	{
STATEMENTS	456:4	458:32	8	
EXPR_STATEMENT	456:4	457:64	9	sprintf ( emsg , "Sorry, LogLuv data must have %s=%d or %d" , "Compression" , COMPRESSION_SGILOG , COMPRESSION_SGILOG24 ) ;
EXPR	456:4	456:4	10	sprintf ( emsg , "Sorry, LogLuv data must have %s=%d or %d" , "Compression" , COMPRESSION_SGILOG , COMPRESSION_SGILOG24 )
FUNCTION_CALL	456:4	457:63	11	sprintf ( emsg , "Sorry, LogLuv data must have %s=%d or %d" , "Compression" , COMPRESSION_SGILOG , COMPRESSION_SGILOG24 )
CALLEE	456:4	456:4	12	sprintf
LEAF_NODE	456:4	456:4	13	sprintf
LEAF_NODE	456:11	456:11	12	(
ARGUMENT	456:12	456:12	12	emsg
FIELD	456:12	456:12	13	emsg
LEAF_NODE	456:12	456:12	14	emsg
LEAF_NODE	456:16	456:16	12	,
ARGUMENT	456:18	456:18	12	"Sorry, LogLuv data must have %s=%d or %d"
FIELD	456:18	456:18	13	"Sorry, LogLuv data must have %s=%d or %d"
LEAF_NODE	456:18	456:18	14	"Sorry, LogLuv data must have %s=%d or %d"
LEAF_NODE	456:60	456:60	12	,
ARGUMENT	457:8	457:8	12	"Compression"
FIELD	457:8	457:8	13	"Compression"
LEAF_NODE	457:8	457:8	14	"Compression"
LEAF_NODE	457:21	457:21	12	,
ARGUMENT	457:23	457:23	12	COMPRESSION_SGILOG
FIELD	457:23	457:23	13	COMPRESSION_SGILOG
LEAF_NODE	457:23	457:23	14	COMPRESSION_SGILOG
LEAF_NODE	457:41	457:41	12	,
ARGUMENT	457:43	457:43	12	COMPRESSION_SGILOG24
FIELD	457:43	457:43	13	COMPRESSION_SGILOG24
LEAF_NODE	457:43	457:43	14	COMPRESSION_SGILOG24
LEAF_NODE	457:63	457:63	12	)
LEAF_NODE	457:64	457:64	10	;
JUMP_STATEMENT	458:32	458:48	9	goto fail_return ;
KEYWORD	458:32	458:32	10	goto
LEAF_NODE	458:32	458:32	11	goto
DESTINATION	458:37	458:37	10	fail_return
LEAF_NODE	458:37	458:37	11	fail_return
LEAF_NODE	458:48	458:48	10	;
LEAF_NODE	459:3	459:3	8	}
SELECTION	460:3	460:44	6	
KEYWORD	460:3	460:3	7	if
LEAF_NODE	460:3	460:3	8	if
LEAF_NODE	460:6	460:6	7	(
CONDITION	460:7	460:7	7	planarconfig != PLANARCONFIG_CONTIG
EXPR	460:7	460:23	8	planarconfig != PLANARCONFIG_CONTIG
FIELD	460:7	460:7	9	planarconfig
LEAF_NODE	460:7	460:7	10	planarconfig
EQ_OPERATOR	460:20	460:20	9	!=
LEAF_NODE	460:20	460:20	10	!=
FIELD	460:23	460:23	9	PLANARCONFIG_CONTIG
LEAF_NODE	460:23	460:23	10	PLANARCONFIG_CONTIG
LEAF_NODE	460:42	460:42	7	)
STATEMENTS	460:44	464:3	7	
LEAF_NODE	460:44	460:44	8	{
STATEMENTS	461:4	463:4	8	
EXPR_STATEMENT	461:4	462:44	9	sprintf ( emsg , "Sorry, can not handle LogLuv images with %s=%d" , "Planarconfiguration" , planarconfig ) ;
EXPR	461:4	461:4	10	sprintf ( emsg , "Sorry, can not handle LogLuv images with %s=%d" , "Planarconfiguration" , planarconfig )
FUNCTION_CALL	461:4	462:43	11	sprintf ( emsg , "Sorry, can not handle LogLuv images with %s=%d" , "Planarconfiguration" , planarconfig )
CALLEE	461:4	461:4	12	sprintf
LEAF_NODE	461:4	461:4	13	sprintf
LEAF_NODE	461:11	461:11	12	(
ARGUMENT	461:12	461:12	12	emsg
FIELD	461:12	461:12	13	emsg
LEAF_NODE	461:12	461:12	14	emsg
LEAF_NODE	461:16	461:16	12	,
ARGUMENT	461:18	461:18	12	"Sorry, can not handle LogLuv images with %s=%d"
FIELD	461:18	461:18	13	"Sorry, can not handle LogLuv images with %s=%d"
LEAF_NODE	461:18	461:18	14	"Sorry, can not handle LogLuv images with %s=%d"
LEAF_NODE	461:66	461:66	12	,
ARGUMENT	462:8	462:8	12	"Planarconfiguration"
FIELD	462:8	462:8	13	"Planarconfiguration"
LEAF_NODE	462:8	462:8	14	"Planarconfiguration"
LEAF_NODE	462:29	462:29	12	,
ARGUMENT	462:31	462:31	12	planarconfig
FIELD	462:31	462:31	13	planarconfig
LEAF_NODE	462:31	462:31	14	planarconfig
LEAF_NODE	462:43	462:43	12	)
LEAF_NODE	462:44	462:44	10	;
JUMP_STATEMENT	463:4	463:14	9	return ( 0 ) ;
KEYWORD	463:4	463:4	10	return
LEAF_NODE	463:4	463:4	11	return
DESTINATION	463:11	463:11	10	( 0 )
EXPR	463:11	463:13	11	( 0 )
LEAF_NODE	463:11	463:11	12	(
FIELD	463:12	463:12	12	0
LEAF_NODE	463:12	463:12	13	0
LEAF_NODE	463:13	463:13	12	)
LEAF_NODE	463:14	463:14	10	;
LEAF_NODE	464:3	464:3	8	}
EXPR_STATEMENT	465:3	465:63	6	TIFFSetField ( tif , TIFFTAG_SGILOGDATAFMT , SGILOGDATAFMT_8BIT ) ;
EXPR	465:3	465:3	7	TIFFSetField ( tif , TIFFTAG_SGILOGDATAFMT , SGILOGDATAFMT_8BIT )
FUNCTION_CALL	465:3	465:62	8	TIFFSetField ( tif , TIFFTAG_SGILOGDATAFMT , SGILOGDATAFMT_8BIT )
CALLEE	465:3	465:3	9	TIFFSetField
LEAF_NODE	465:3	465:3	10	TIFFSetField
LEAF_NODE	465:15	465:15	9	(
ARGUMENT	465:16	465:16	9	tif
FIELD	465:16	465:16	10	tif
LEAF_NODE	465:16	465:16	11	tif
LEAF_NODE	465:19	465:19	9	,
ARGUMENT	465:21	465:21	9	TIFFTAG_SGILOGDATAFMT
FIELD	465:21	465:21	10	TIFFTAG_SGILOGDATAFMT
LEAF_NODE	465:21	465:21	11	TIFFTAG_SGILOGDATAFMT
LEAF_NODE	465:42	465:42	9	,
ARGUMENT	465:44	465:44	9	SGILOGDATAFMT_8BIT
FIELD	465:44	465:44	10	SGILOGDATAFMT_8BIT
LEAF_NODE	465:44	465:44	11	SGILOGDATAFMT_8BIT
LEAF_NODE	465:62	465:62	9	)
LEAF_NODE	465:63	465:63	7	;
EXPR_STATEMENT	466:3	466:37	6	img -> photometric = PHOTOMETRIC_RGB ;
EXPR	466:3	466:3	7	img -> photometric = PHOTOMETRIC_RGB
ASSIGN	466:3	466:22	8	img -> photometric = PHOTOMETRIC_RGB
LVAL	466:3	466:3	9	img -> photometric
FIELD	466:3	466:8	10	img -> photometric
LEAF_NODE	466:3	466:3	11	img
LEAF_NODE	466:6	466:6	11	->
LEAF_NODE	466:8	466:8	11	photometric
ASSIGN_OP	466:20	466:20	9	=
LEAF_NODE	466:20	466:20	10	=
RVAL	466:22	466:22	9	PHOTOMETRIC_RGB
FIELD	466:22	466:22	10	PHOTOMETRIC_RGB
LEAF_NODE	466:22	466:22	11	PHOTOMETRIC_RGB
LEAF_NODE	466:37	466:37	7	;
EXPR_STATEMENT	467:3	467:25	6	img -> bitspersample = 8 ;
EXPR	467:3	467:3	7	img -> bitspersample = 8
ASSIGN	467:3	467:24	8	img -> bitspersample = 8
LVAL	467:3	467:3	9	img -> bitspersample
FIELD	467:3	467:8	10	img -> bitspersample
LEAF_NODE	467:3	467:3	11	img
LEAF_NODE	467:6	467:6	11	->
LEAF_NODE	467:8	467:8	11	bitspersample
ASSIGN_OP	467:22	467:22	9	=
LEAF_NODE	467:22	467:22	10	=
RVAL	467:24	467:24	9	8
FIELD	467:24	467:24	10	8
LEAF_NODE	467:24	467:24	11	8
LEAF_NODE	467:25	467:25	7	;
JUMP_STATEMENT	468:3	468:8	6	break DESTINATION ;
KEYWORD	468:3	468:3	7	break
LEAF_NODE	468:3	468:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	468:8	468:8	7	;
LABEL	469:2	469:25	6	case PHOTOMETRIC_CIELAB :
LEAF_NODE	469:2	469:2	7	case
LEAF_NODE	469:7	469:7	7	PHOTOMETRIC_CIELAB
LEAF_NODE	469:25	469:25	7	:
JUMP_STATEMENT	470:3	470:8	6	break DESTINATION ;
KEYWORD	470:3	470:3	7	break
LEAF_NODE	470:3	470:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	470:8	470:8	7	;
LABEL	471:2	471:9	6	default :
LEAF_NODE	471:2	471:2	7	default
LEAF_NODE	471:9	471:9	7	:
EXPR_STATEMENT	472:3	473:34	6	sprintf ( emsg , "Sorry, can not handle image with %s=%d" , photoTag , img -> photometric ) ;
EXPR	472:3	472:3	7	sprintf ( emsg , "Sorry, can not handle image with %s=%d" , photoTag , img -> photometric )
FUNCTION_CALL	472:3	473:33	8	sprintf ( emsg , "Sorry, can not handle image with %s=%d" , photoTag , img -> photometric )
CALLEE	472:3	472:3	9	sprintf
LEAF_NODE	472:3	472:3	10	sprintf
LEAF_NODE	472:10	472:10	9	(
ARGUMENT	472:11	472:11	9	emsg
FIELD	472:11	472:11	10	emsg
LEAF_NODE	472:11	472:11	11	emsg
LEAF_NODE	472:15	472:15	9	,
ARGUMENT	472:17	472:17	9	"Sorry, can not handle image with %s=%d"
FIELD	472:17	472:17	10	"Sorry, can not handle image with %s=%d"
LEAF_NODE	472:17	472:17	11	"Sorry, can not handle image with %s=%d"
LEAF_NODE	472:57	472:57	9	,
ARGUMENT	473:7	473:7	9	photoTag
FIELD	473:7	473:7	10	photoTag
LEAF_NODE	473:7	473:7	11	photoTag
LEAF_NODE	473:15	473:15	9	,
ARGUMENT	473:17	473:17	9	img -> photometric
FIELD	473:17	473:22	10	img -> photometric
LEAF_NODE	473:17	473:17	11	img
LEAF_NODE	473:20	473:20	11	->
LEAF_NODE	473:22	473:22	11	photometric
LEAF_NODE	473:33	473:33	9	)
LEAF_NODE	473:34	473:34	7	;
JUMP_STATEMENT	474:24	474:40	6	goto fail_return ;
KEYWORD	474:24	474:24	7	goto
LEAF_NODE	474:24	474:24	8	goto
DESTINATION	474:29	474:29	7	fail_return
LEAF_NODE	474:29	474:29	8	fail_return
LEAF_NODE	474:40	474:40	7	;
LEAF_NODE	475:1	475:1	5	}
EXPR_STATEMENT	476:1	476:51	3	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & img -> width ) ;
EXPR	476:1	476:1	4	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & img -> width )
FUNCTION_CALL	476:1	476:50	5	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & img -> width )
CALLEE	476:1	476:1	6	TIFFGetField
LEAF_NODE	476:1	476:1	7	TIFFGetField
LEAF_NODE	476:13	476:13	6	(
ARGUMENT	476:14	476:14	6	tif
FIELD	476:14	476:14	7	tif
LEAF_NODE	476:14	476:14	8	tif
LEAF_NODE	476:17	476:17	6	,
ARGUMENT	476:19	476:19	6	TIFFTAG_IMAGEWIDTH
FIELD	476:19	476:19	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	476:19	476:19	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	476:37	476:37	6	,
ARGUMENT	476:39	476:39	6	& img -> width
UNARY_EXPR	476:39	476:40	7	& img -> width
UNARY_OPERATOR	476:39	476:39	8	&
LEAF_NODE	476:39	476:39	9	&
FIELD	476:40	476:45	8	img -> width
LEAF_NODE	476:40	476:40	9	img
LEAF_NODE	476:43	476:43	9	->
LEAF_NODE	476:45	476:45	9	width
LEAF_NODE	476:50	476:50	6	)
LEAF_NODE	476:51	476:51	4	;
EXPR_STATEMENT	477:1	477:53	3	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & img -> height ) ;
EXPR	477:1	477:1	4	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & img -> height )
FUNCTION_CALL	477:1	477:52	5	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & img -> height )
CALLEE	477:1	477:1	6	TIFFGetField
LEAF_NODE	477:1	477:1	7	TIFFGetField
LEAF_NODE	477:13	477:13	6	(
ARGUMENT	477:14	477:14	6	tif
FIELD	477:14	477:14	7	tif
LEAF_NODE	477:14	477:14	8	tif
LEAF_NODE	477:17	477:17	6	,
ARGUMENT	477:19	477:19	6	TIFFTAG_IMAGELENGTH
FIELD	477:19	477:19	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	477:19	477:19	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	477:38	477:38	6	,
ARGUMENT	477:40	477:40	6	& img -> height
UNARY_EXPR	477:40	477:41	7	& img -> height
UNARY_OPERATOR	477:40	477:40	8	&
LEAF_NODE	477:40	477:40	9	&
FIELD	477:41	477:46	8	img -> height
LEAF_NODE	477:41	477:41	9	img
LEAF_NODE	477:44	477:44	9	->
LEAF_NODE	477:46	477:46	9	height
LEAF_NODE	477:52	477:52	6	)
LEAF_NODE	477:53	477:53	4	;
EXPR_STATEMENT	478:1	478:67	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_ORIENTATION , & img -> orientation ) ;
EXPR	478:1	478:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_ORIENTATION , & img -> orientation )
FUNCTION_CALL	478:1	478:66	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_ORIENTATION , & img -> orientation )
CALLEE	478:1	478:1	6	TIFFGetFieldDefaulted
LEAF_NODE	478:1	478:1	7	TIFFGetFieldDefaulted
LEAF_NODE	478:22	478:22	6	(
ARGUMENT	478:23	478:23	6	tif
FIELD	478:23	478:23	7	tif
LEAF_NODE	478:23	478:23	8	tif
LEAF_NODE	478:26	478:26	6	,
ARGUMENT	478:28	478:28	6	TIFFTAG_ORIENTATION
FIELD	478:28	478:28	7	TIFFTAG_ORIENTATION
LEAF_NODE	478:28	478:28	8	TIFFTAG_ORIENTATION
LEAF_NODE	478:47	478:47	6	,
ARGUMENT	478:49	478:49	6	& img -> orientation
UNARY_EXPR	478:49	478:50	7	& img -> orientation
UNARY_OPERATOR	478:49	478:49	8	&
LEAF_NODE	478:49	478:49	9	&
FIELD	478:50	478:55	8	img -> orientation
LEAF_NODE	478:50	478:50	9	img
LEAF_NODE	478:53	478:53	9	->
LEAF_NODE	478:55	478:55	9	orientation
LEAF_NODE	478:66	478:66	6	)
LEAF_NODE	478:67	478:67	4	;
EXPR_STATEMENT	479:1	480:73	3	img -> isContig = ! ( planarconfig == PLANARCONFIG_SEPARATE && img -> samplesperpixel > 1 ) ;
EXPR	479:1	479:1	4	img -> isContig = ! ( planarconfig == PLANARCONFIG_SEPARATE && img -> samplesperpixel > 1 )
ASSIGN	479:1	480:5	5	img -> isContig = ! ( planarconfig == PLANARCONFIG_SEPARATE && img -> samplesperpixel > 1 )
LVAL	479:1	479:1	6	img -> isContig
FIELD	479:1	479:6	7	img -> isContig
LEAF_NODE	479:1	479:1	8	img
LEAF_NODE	479:4	479:4	8	->
LEAF_NODE	479:6	479:6	8	isContig
ASSIGN_OP	479:15	479:15	6	=
LEAF_NODE	479:15	479:15	7	=
RVAL	480:5	480:5	6	! ( planarconfig == PLANARCONFIG_SEPARATE && img -> samplesperpixel > 1 )
UNARY_EXPR	480:5	480:72	7	! ( planarconfig == PLANARCONFIG_SEPARATE && img -> samplesperpixel > 1 )
UNARY_OPERATOR	480:5	480:5	8	!
LEAF_NODE	480:5	480:5	9	!
LEAF_NODE	480:6	480:6	8	(
AND	480:7	480:48	8	planarconfig == PLANARCONFIG_SEPARATE && img -> samplesperpixel > 1
EXPR	480:7	480:23	9	planarconfig == PLANARCONFIG_SEPARATE
FIELD	480:7	480:7	10	planarconfig
LEAF_NODE	480:7	480:7	11	planarconfig
EQ_OPERATOR	480:20	480:20	10	==
LEAF_NODE	480:20	480:20	11	==
FIELD	480:23	480:23	10	PLANARCONFIG_SEPARATE
LEAF_NODE	480:23	480:23	11	PLANARCONFIG_SEPARATE
LEAF_NODE	480:45	480:45	9	&&
EXPR	480:48	480:71	9	img -> samplesperpixel > 1
FIELD	480:48	480:53	10	img -> samplesperpixel
LEAF_NODE	480:48	480:48	11	img
LEAF_NODE	480:51	480:51	11	->
LEAF_NODE	480:53	480:53	11	samplesperpixel
REL_OPERATOR	480:69	480:69	10	>
LEAF_NODE	480:69	480:69	11	>
FIELD	480:71	480:71	10	1
LEAF_NODE	480:71	480:71	11	1
LEAF_NODE	480:72	480:72	8	)
LEAF_NODE	480:73	480:73	4	;
SELECTION	481:1	481:20	3	
KEYWORD	481:1	481:1	4	if
LEAF_NODE	481:1	481:1	5	if
LEAF_NODE	481:4	481:4	4	(
CONDITION	481:5	481:5	4	img -> isContig
EXPR	481:5	481:5	5	img -> isContig
FIELD	481:5	481:10	6	img -> isContig
LEAF_NODE	481:5	481:5	7	img
LEAF_NODE	481:8	481:8	7	->
LEAF_NODE	481:10	481:10	7	isContig
LEAF_NODE	481:18	481:18	4	)
STATEMENTS	481:20	486:1	4	
LEAF_NODE	481:20	481:20	5	{
STATEMENTS	482:2	482:2	5	
SELECTION	482:2	482:28	6	
KEYWORD	482:2	482:2	7	if
LEAF_NODE	482:2	482:2	8	if
LEAF_NODE	482:5	482:5	7	(
CONDITION	482:6	482:6	7	! PickContigCase ( img )
EXPR	482:6	482:6	8	! PickContigCase ( img )
UNARY_EXPR	482:6	482:7	9	! PickContigCase ( img )
UNARY_OPERATOR	482:6	482:6	10	!
LEAF_NODE	482:6	482:6	11	!
FUNCTION_CALL	482:7	482:25	10	PickContigCase ( img )
CALLEE	482:7	482:7	11	PickContigCase
LEAF_NODE	482:7	482:7	12	PickContigCase
LEAF_NODE	482:21	482:21	11	(
ARGUMENT	482:22	482:22	11	img
FIELD	482:22	482:22	12	img
LEAF_NODE	482:22	482:22	13	img
LEAF_NODE	482:25	482:25	11	)
LEAF_NODE	482:26	482:26	7	)
STATEMENTS	482:28	485:2	7	
LEAF_NODE	482:28	482:28	8	{
STATEMENTS	483:3	484:3	8	
EXPR_STATEMENT	483:3	483:47	9	sprintf ( emsg , "Sorry, can not handle image" ) ;
EXPR	483:3	483:3	10	sprintf ( emsg , "Sorry, can not handle image" )
FUNCTION_CALL	483:3	483:46	11	sprintf ( emsg , "Sorry, can not handle image" )
CALLEE	483:3	483:3	12	sprintf
LEAF_NODE	483:3	483:3	13	sprintf
LEAF_NODE	483:10	483:10	12	(
ARGUMENT	483:11	483:11	12	emsg
FIELD	483:11	483:11	13	emsg
LEAF_NODE	483:11	483:11	14	emsg
LEAF_NODE	483:15	483:15	12	,
ARGUMENT	483:17	483:17	12	"Sorry, can not handle image"
FIELD	483:17	483:17	13	"Sorry, can not handle image"
LEAF_NODE	483:17	483:17	14	"Sorry, can not handle image"
LEAF_NODE	483:46	483:46	12	)
LEAF_NODE	483:47	483:47	10	;
JUMP_STATEMENT	484:3	484:19	9	goto fail_return ;
KEYWORD	484:3	484:3	10	goto
LEAF_NODE	484:3	484:3	11	goto
DESTINATION	484:8	484:8	10	fail_return
LEAF_NODE	484:8	484:8	11	fail_return
LEAF_NODE	484:19	484:19	10	;
LEAF_NODE	485:2	485:2	8	}
LEAF_NODE	486:1	486:1	5	}
SELECTION	486:3	486:8	3	
KEYWORD	486:3	486:3	4	else
LEAF_NODE	486:3	486:3	5	else
STATEMENTS	486:8	491:1	4	
LEAF_NODE	486:8	486:8	5	{
STATEMENTS	487:2	487:2	5	
SELECTION	487:2	487:30	6	
KEYWORD	487:2	487:2	7	if
LEAF_NODE	487:2	487:2	8	if
LEAF_NODE	487:5	487:5	7	(
CONDITION	487:6	487:6	7	! PickSeparateCase ( img )
EXPR	487:6	487:6	8	! PickSeparateCase ( img )
UNARY_EXPR	487:6	487:7	9	! PickSeparateCase ( img )
UNARY_OPERATOR	487:6	487:6	10	!
LEAF_NODE	487:6	487:6	11	!
FUNCTION_CALL	487:7	487:27	10	PickSeparateCase ( img )
CALLEE	487:7	487:7	11	PickSeparateCase
LEAF_NODE	487:7	487:7	12	PickSeparateCase
LEAF_NODE	487:23	487:23	11	(
ARGUMENT	487:24	487:24	11	img
FIELD	487:24	487:24	12	img
LEAF_NODE	487:24	487:24	13	img
LEAF_NODE	487:27	487:27	11	)
LEAF_NODE	487:28	487:28	7	)
STATEMENTS	487:30	490:2	7	
LEAF_NODE	487:30	487:30	8	{
STATEMENTS	488:3	489:3	8	
EXPR_STATEMENT	488:3	488:47	9	sprintf ( emsg , "Sorry, can not handle image" ) ;
EXPR	488:3	488:3	10	sprintf ( emsg , "Sorry, can not handle image" )
FUNCTION_CALL	488:3	488:46	11	sprintf ( emsg , "Sorry, can not handle image" )
CALLEE	488:3	488:3	12	sprintf
LEAF_NODE	488:3	488:3	13	sprintf
LEAF_NODE	488:10	488:10	12	(
ARGUMENT	488:11	488:11	12	emsg
FIELD	488:11	488:11	13	emsg
LEAF_NODE	488:11	488:11	14	emsg
LEAF_NODE	488:15	488:15	12	,
ARGUMENT	488:17	488:17	12	"Sorry, can not handle image"
FIELD	488:17	488:17	13	"Sorry, can not handle image"
LEAF_NODE	488:17	488:17	14	"Sorry, can not handle image"
LEAF_NODE	488:46	488:46	12	)
LEAF_NODE	488:47	488:47	10	;
JUMP_STATEMENT	489:3	489:19	9	goto fail_return ;
KEYWORD	489:3	489:3	10	goto
LEAF_NODE	489:3	489:3	11	goto
DESTINATION	489:8	489:8	10	fail_return
LEAF_NODE	489:8	489:8	11	fail_return
LEAF_NODE	489:19	489:19	10	;
LEAF_NODE	490:2	490:2	8	}
LEAF_NODE	491:1	491:1	5	}
JUMP_STATEMENT	492:1	492:9	3	return 1 ;
KEYWORD	492:1	492:1	4	return
LEAF_NODE	492:1	492:1	5	return
DESTINATION	492:8	492:8	4	1
EXPR	492:8	492:8	5	1
FIELD	492:8	492:8	6	1
LEAF_NODE	492:8	492:8	7	1
LEAF_NODE	492:9	492:9	4	;
LABEL	494:2	494:13	3	fail_return :
LEAF_NODE	494:2	494:2	4	fail_return
LEAF_NODE	494:13	494:13	4	:
EXPR_STATEMENT	495:8	495:31	3	TIFFRGBAImageEnd ( img ) ;
EXPR	495:8	495:8	4	TIFFRGBAImageEnd ( img )
FUNCTION_CALL	495:8	495:30	5	TIFFRGBAImageEnd ( img )
CALLEE	495:8	495:8	6	TIFFRGBAImageEnd
LEAF_NODE	495:8	495:8	7	TIFFRGBAImageEnd
LEAF_NODE	495:24	495:24	6	(
ARGUMENT	495:26	495:26	6	img
FIELD	495:26	495:26	7	img
LEAF_NODE	495:26	495:26	8	img
LEAF_NODE	495:30	495:30	6	)
LEAF_NODE	495:31	495:31	4	;
JUMP_STATEMENT	496:8	496:16	3	return 0 ;
KEYWORD	496:8	496:8	4	return
LEAF_NODE	496:8	496:8	5	return
DESTINATION	496:15	496:15	4	0
EXPR	496:15	496:15	5	0
FIELD	496:15	496:15	6	0
LEAF_NODE	496:15	496:15	7	0
LEAF_NODE	496:16	496:16	4	;
LEAF_NODE	497:0	497:0	2	}
FUNCTION_DEF	499:0	512:0	1	
RETURN_TYPE	499:0	499:0	2	int
TYPE_NAME	499:0	499:0	3	int
LEAF_NODE	499:0	499:0	4	int
FUNCTION_NAME	500:0	500:0	2	TIFFRGBAImageGet
LEAF_NODE	500:0	500:0	3	TIFFRGBAImageGet
PARAMETER_LIST	500:16	500:71	2	( TIFFRGBAImage * img , uint32 * raster , uint32 w , uint32 h )
LEAF_NODE	500:16	500:16	3	(
PARAMETER_DECL	500:17	500:32	3	TIFFRGBAImage * img
TYPE	500:17	500:30	4	TIFFRGBAImage *
TYPE_NAME	500:17	500:17	5	TIFFRGBAImage
LEAF_NODE	500:17	500:17	6	TIFFRGBAImage
POINTER	500:30	500:30	5	*
LEAF_NODE	500:30	500:30	6	*
NAME	500:32	500:32	4	img
LEAF_NODE	500:32	500:32	5	img
LEAF_NODE	500:35	500:35	3	,
PARAMETER_DECL	500:37	500:45	3	uint32 * raster
TYPE	500:37	500:43	4	uint32 *
TYPE_NAME	500:37	500:37	5	uint32
LEAF_NODE	500:37	500:37	6	uint32
POINTER	500:43	500:43	5	*
LEAF_NODE	500:43	500:43	6	*
NAME	500:45	500:45	4	raster
LEAF_NODE	500:45	500:45	5	raster
LEAF_NODE	500:51	500:51	3	,
PARAMETER_DECL	500:53	500:60	3	uint32 w
TYPE	500:53	500:53	4	uint32
TYPE_NAME	500:53	500:53	5	uint32
LEAF_NODE	500:53	500:53	6	uint32
NAME	500:60	500:60	4	w
LEAF_NODE	500:60	500:60	5	w
LEAF_NODE	500:61	500:61	3	,
PARAMETER_DECL	500:63	500:70	3	uint32 h
TYPE	500:63	500:63	4	uint32
TYPE_NAME	500:63	500:63	5	uint32
LEAF_NODE	500:63	500:63	6	uint32
NAME	500:70	500:70	4	h
LEAF_NODE	500:70	500:70	5	h
LEAF_NODE	500:71	500:71	3	)
LEAF_NODE	501:0	501:0	2	{
STATEMENTS	502:4	511:4	2	
SELECTION	502:4	502:26	3	
KEYWORD	502:4	502:4	4	if
LEAF_NODE	502:4	502:4	5	if
LEAF_NODE	502:7	502:7	4	(
CONDITION	502:8	502:8	4	img -> get == NULL
EXPR	502:8	502:20	5	img -> get == NULL
FIELD	502:8	502:13	6	img -> get
LEAF_NODE	502:8	502:8	7	img
LEAF_NODE	502:11	502:11	7	->
LEAF_NODE	502:13	502:13	7	get
EQ_OPERATOR	502:17	502:17	6	==
LEAF_NODE	502:17	502:17	7	==
FIELD	502:20	502:20	6	NULL
LEAF_NODE	502:20	502:20	7	NULL
LEAF_NODE	502:24	502:24	4	)
STATEMENTS	502:26	505:1	4	
LEAF_NODE	502:26	502:26	5	{
STATEMENTS	503:2	504:2	5	
EXPR_STATEMENT	503:2	503:92	6	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No \"get\" routine setup" ) ;
EXPR	503:2	503:2	7	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No \"get\" routine setup" )
FUNCTION_CALL	503:2	503:91	8	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No \"get\" routine setup" )
CALLEE	503:2	503:2	9	TIFFErrorExt
LEAF_NODE	503:2	503:2	10	TIFFErrorExt
LEAF_NODE	503:14	503:14	9	(
ARGUMENT	503:15	503:15	9	img -> tif -> tif_clientdata
FIELD	503:15	503:25	10	img -> tif -> tif_clientdata
LEAF_NODE	503:15	503:15	11	img
LEAF_NODE	503:18	503:18	11	->
LEAF_NODE	503:20	503:20	11	tif
LEAF_NODE	503:23	503:23	11	->
LEAF_NODE	503:25	503:25	11	tif_clientdata
LEAF_NODE	503:39	503:39	9	,
ARGUMENT	503:41	503:41	9	TIFFFileName ( img -> tif )
FUNCTION_CALL	503:41	503:62	10	TIFFFileName ( img -> tif )
CALLEE	503:41	503:41	11	TIFFFileName
LEAF_NODE	503:41	503:41	12	TIFFFileName
LEAF_NODE	503:53	503:53	11	(
ARGUMENT	503:54	503:54	11	img -> tif
FIELD	503:54	503:59	12	img -> tif
LEAF_NODE	503:54	503:54	13	img
LEAF_NODE	503:57	503:57	13	->
LEAF_NODE	503:59	503:59	13	tif
LEAF_NODE	503:62	503:62	11	)
LEAF_NODE	503:63	503:63	9	,
ARGUMENT	503:65	503:65	9	"No \"get\" routine setup"
FIELD	503:65	503:65	10	"No \"get\" routine setup"
LEAF_NODE	503:65	503:65	11	"No \"get\" routine setup"
LEAF_NODE	503:91	503:91	9	)
LEAF_NODE	503:92	503:92	7	;
JUMP_STATEMENT	504:2	504:12	6	return ( 0 ) ;
KEYWORD	504:2	504:2	7	return
LEAF_NODE	504:2	504:2	8	return
DESTINATION	504:9	504:9	7	( 0 )
EXPR	504:9	504:11	8	( 0 )
LEAF_NODE	504:9	504:9	9	(
FIELD	504:10	504:10	9	0
LEAF_NODE	504:10	504:10	10	0
LEAF_NODE	504:11	504:11	9	)
LEAF_NODE	504:12	504:12	7	;
LEAF_NODE	505:1	505:1	5	}
SELECTION	506:1	506:27	3	
KEYWORD	506:1	506:1	4	if
LEAF_NODE	506:1	506:1	5	if
LEAF_NODE	506:4	506:4	4	(
CONDITION	506:5	506:5	4	img -> put . any == NULL
EXPR	506:5	506:21	5	img -> put . any == NULL
FIELD	506:5	506:14	6	img -> put . any
LEAF_NODE	506:5	506:5	7	img
LEAF_NODE	506:8	506:8	7	->
LEAF_NODE	506:10	506:10	7	put
LEAF_NODE	506:13	506:13	7	.
LEAF_NODE	506:14	506:14	7	any
EQ_OPERATOR	506:18	506:18	6	==
LEAF_NODE	506:18	506:18	7	==
FIELD	506:21	506:21	6	NULL
LEAF_NODE	506:21	506:21	7	NULL
LEAF_NODE	506:25	506:25	4	)
STATEMENTS	506:27	510:4	4	
LEAF_NODE	506:27	506:27	5	{
STATEMENTS	507:2	509:2	5	
EXPR_STATEMENT	507:2	508:68	6	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No \"put\" routine setupl; probably can not handle image format" ) ;
EXPR	507:2	507:2	7	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No \"put\" routine setupl; probably can not handle image format" )
FUNCTION_CALL	507:2	508:67	8	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No \"put\" routine setupl; probably can not handle image format" )
CALLEE	507:2	507:2	9	TIFFErrorExt
LEAF_NODE	507:2	507:2	10	TIFFErrorExt
LEAF_NODE	507:14	507:14	9	(
ARGUMENT	507:15	507:15	9	img -> tif -> tif_clientdata
FIELD	507:15	507:25	10	img -> tif -> tif_clientdata
LEAF_NODE	507:15	507:15	11	img
LEAF_NODE	507:18	507:18	11	->
LEAF_NODE	507:20	507:20	11	tif
LEAF_NODE	507:23	507:23	11	->
LEAF_NODE	507:25	507:25	11	tif_clientdata
LEAF_NODE	507:39	507:39	9	,
ARGUMENT	507:41	507:41	9	TIFFFileName ( img -> tif )
FUNCTION_CALL	507:41	507:62	10	TIFFFileName ( img -> tif )
CALLEE	507:41	507:41	11	TIFFFileName
LEAF_NODE	507:41	507:41	12	TIFFFileName
LEAF_NODE	507:53	507:53	11	(
ARGUMENT	507:54	507:54	11	img -> tif
FIELD	507:54	507:59	12	img -> tif
LEAF_NODE	507:54	507:54	13	img
LEAF_NODE	507:57	507:57	13	->
LEAF_NODE	507:59	507:59	13	tif
LEAF_NODE	507:62	507:62	11	)
LEAF_NODE	507:63	507:63	9	,
ARGUMENT	508:2	508:2	9	"No \"put\" routine setupl; probably can not handle image format"
FIELD	508:2	508:2	10	"No \"put\" routine setupl; probably can not handle image format"
LEAF_NODE	508:2	508:2	11	"No \"put\" routine setupl; probably can not handle image format"
LEAF_NODE	508:67	508:67	9	)
LEAF_NODE	508:68	508:68	7	;
JUMP_STATEMENT	509:2	509:12	6	return ( 0 ) ;
KEYWORD	509:2	509:2	7	return
LEAF_NODE	509:2	509:2	8	return
DESTINATION	509:9	509:9	7	( 0 )
EXPR	509:9	509:11	8	( 0 )
LEAF_NODE	509:9	509:9	9	(
FIELD	509:10	509:10	9	0
LEAF_NODE	509:10	509:10	10	0
LEAF_NODE	509:11	509:11	9	)
LEAF_NODE	509:12	509:12	7	;
LEAF_NODE	510:4	510:4	5	}
JUMP_STATEMENT	511:4	511:41	3	return ( * img -> get ) ( img , raster , w , h ) ;
KEYWORD	511:4	511:4	4	return
LEAF_NODE	511:4	511:4	5	return
DESTINATION	511:11	511:11	4	( * img -> get ) ( img , raster , w , h )
EXPR	511:11	511:11	5	( * img -> get ) ( img , raster , w , h )
FUNCTION_CALL	511:11	511:40	6	( * img -> get ) ( img , raster , w , h )
CALLEE	511:11	511:21	7	( * img -> get )
LEAF_NODE	511:11	511:11	8	(
UNARY_EXPR	511:12	511:13	8	* img -> get
UNARY_OPERATOR	511:12	511:12	9	*
LEAF_NODE	511:12	511:12	10	*
FIELD	511:13	511:18	9	img -> get
LEAF_NODE	511:13	511:13	10	img
LEAF_NODE	511:16	511:16	10	->
LEAF_NODE	511:18	511:18	10	get
LEAF_NODE	511:21	511:21	8	)
LEAF_NODE	511:22	511:22	7	(
ARGUMENT	511:23	511:23	7	img
FIELD	511:23	511:23	8	img
LEAF_NODE	511:23	511:23	9	img
LEAF_NODE	511:26	511:26	7	,
ARGUMENT	511:28	511:28	7	raster
FIELD	511:28	511:28	8	raster
LEAF_NODE	511:28	511:28	9	raster
LEAF_NODE	511:34	511:34	7	,
ARGUMENT	511:36	511:36	7	w
FIELD	511:36	511:36	8	w
LEAF_NODE	511:36	511:36	9	w
LEAF_NODE	511:37	511:37	7	,
ARGUMENT	511:39	511:39	7	h
FIELD	511:39	511:39	8	h
LEAF_NODE	511:39	511:39	9	h
LEAF_NODE	511:40	511:40	7	)
LEAF_NODE	511:41	511:41	4	;
LEAF_NODE	512:0	512:0	2	}
FUNCTION_DEF	518:0	538:0	1	
RETURN_TYPE	518:0	518:0	2	int
TYPE_NAME	518:0	518:0	3	int
LEAF_NODE	518:0	518:0	4	int
FUNCTION_NAME	519:0	519:0	2	TIFFReadRGBAImageOriented
LEAF_NODE	519:0	519:0	3	TIFFReadRGBAImageOriented
PARAMETER_LIST	519:25	521:30	2	( TIFF * tif , uint32 rwidth , uint32 rheight , uint32 * raster , int orientation , int stop )
LEAF_NODE	519:25	519:25	3	(
PARAMETER_DECL	519:26	519:32	3	TIFF * tif
TYPE	519:26	519:30	4	TIFF *
TYPE_NAME	519:26	519:26	5	TIFF
LEAF_NODE	519:26	519:26	6	TIFF
POINTER	519:30	519:30	5	*
LEAF_NODE	519:30	519:30	6	*
NAME	519:32	519:32	4	tif
LEAF_NODE	519:32	519:32	5	tif
LEAF_NODE	519:35	519:35	3	,
PARAMETER_DECL	520:5	520:12	3	uint32 rwidth
TYPE	520:5	520:5	4	uint32
TYPE_NAME	520:5	520:5	5	uint32
LEAF_NODE	520:5	520:5	6	uint32
NAME	520:12	520:12	4	rwidth
LEAF_NODE	520:12	520:12	5	rwidth
LEAF_NODE	520:18	520:18	3	,
PARAMETER_DECL	520:20	520:27	3	uint32 rheight
TYPE	520:20	520:20	4	uint32
TYPE_NAME	520:20	520:20	5	uint32
LEAF_NODE	520:20	520:20	6	uint32
NAME	520:27	520:27	4	rheight
LEAF_NODE	520:27	520:27	5	rheight
LEAF_NODE	520:34	520:34	3	,
PARAMETER_DECL	520:36	520:44	3	uint32 * raster
TYPE	520:36	520:42	4	uint32 *
TYPE_NAME	520:36	520:36	5	uint32
LEAF_NODE	520:36	520:36	6	uint32
POINTER	520:42	520:42	5	*
LEAF_NODE	520:42	520:42	6	*
NAME	520:44	520:44	4	raster
LEAF_NODE	520:44	520:44	5	raster
LEAF_NODE	520:50	520:50	3	,
PARAMETER_DECL	521:5	521:9	3	int orientation
TYPE	521:5	521:5	4	int
TYPE_NAME	521:5	521:5	5	int
LEAF_NODE	521:5	521:5	6	int
NAME	521:9	521:9	4	orientation
LEAF_NODE	521:9	521:9	5	orientation
LEAF_NODE	521:20	521:20	3	,
PARAMETER_DECL	521:22	521:26	3	int stop
TYPE	521:22	521:22	4	int
TYPE_NAME	521:22	521:22	5	int
LEAF_NODE	521:22	521:22	6	int
NAME	521:26	521:26	4	stop
LEAF_NODE	521:26	521:26	5	stop
LEAF_NODE	521:30	521:30	3	)
LEAF_NODE	522:0	522:0	2	{
STATEMENTS	523:4	537:15	2	
SIMPLE_DECL	523:4	523:24	3	char [ 1024 ] emsg ; emsg = "" ;
VAR_DECL	523:4	523:9	4	char [ 1024 ] emsg ; emsg = ""
TYPE	523:4	523:13	5	char [ 1024 ]
TYPE_NAME	523:4	523:4	6	char
LEAF_NODE	523:4	523:4	7	char
TYPE_SUFFIX	523:13	523:18	6	[ 1024 ]
LEAF_NODE	523:13	523:13	7	[
FIELD	523:14	523:14	7	1024
LEAF_NODE	523:14	523:14	8	1024
LEAF_NODE	523:18	523:18	7	]
NAME	523:9	523:9	5	emsg
LEAF_NODE	523:9	523:9	6	emsg
LEAF_NODE	0:0	0:0	5	;
INIT	523:9	523:9	5	emsg = ""
ASSIGN	523:9	523:22	6	emsg = ""
LVAL	523:9	523:9	7	emsg
NAME	523:9	523:9	8	emsg
LEAF_NODE	523:9	523:9	9	emsg
ASSIGN_OP	523:20	523:20	7	=
LEAF_NODE	523:20	523:20	8	=
RVAL	523:22	523:22	7	""
FIELD	523:22	523:22	8	""
LEAF_NODE	523:22	523:22	9	""
LEAF_NODE	523:24	523:24	4	;
SIMPLE_DECL	524:4	524:21	3	TIFFRGBAImage img ;
VAR_DECL	524:4	524:18	4	TIFFRGBAImage img
TYPE	524:4	524:4	5	TIFFRGBAImage
TYPE_NAME	524:4	524:4	6	TIFFRGBAImage
LEAF_NODE	524:4	524:4	7	TIFFRGBAImage
NAME	524:18	524:18	5	img
LEAF_NODE	524:18	524:18	6	img
LEAF_NODE	524:21	524:21	4	;
SIMPLE_DECL	525:4	525:10	3	int ok ;
VAR_DECL	525:4	525:8	4	int ok
TYPE	525:4	525:4	5	int
TYPE_NAME	525:4	525:4	6	int
LEAF_NODE	525:4	525:4	7	int
NAME	525:8	525:8	5	ok
LEAF_NODE	525:8	525:8	6	ok
LEAF_NODE	525:10	525:10	4	;
SELECTION	527:1	527:78	3	
KEYWORD	527:1	527:1	4	if
LEAF_NODE	527:1	527:1	5	if
LEAF_NODE	527:4	527:4	4	(
CONDITION	527:5	527:5	4	TIFFRGBAImageOK ( tif , emsg ) && TIFFRGBAImageBegin ( & img , tif , stop , emsg )
EXPR	527:5	527:5	5	TIFFRGBAImageOK ( tif , emsg ) && TIFFRGBAImageBegin ( & img , tif , stop , emsg )
AND	527:5	527:35	6	TIFFRGBAImageOK ( tif , emsg ) && TIFFRGBAImageBegin ( & img , tif , stop , emsg )
EXPR	527:5	527:5	7	TIFFRGBAImageOK ( tif , emsg )
FUNCTION_CALL	527:5	527:30	8	TIFFRGBAImageOK ( tif , emsg )
CALLEE	527:5	527:5	9	TIFFRGBAImageOK
LEAF_NODE	527:5	527:5	10	TIFFRGBAImageOK
LEAF_NODE	527:20	527:20	9	(
ARGUMENT	527:21	527:21	9	tif
FIELD	527:21	527:21	10	tif
LEAF_NODE	527:21	527:21	11	tif
LEAF_NODE	527:24	527:24	9	,
ARGUMENT	527:26	527:26	9	emsg
FIELD	527:26	527:26	10	emsg
LEAF_NODE	527:26	527:26	11	emsg
LEAF_NODE	527:30	527:30	9	)
LEAF_NODE	527:32	527:32	7	&&
EXPR	527:35	527:35	7	TIFFRGBAImageBegin ( & img , tif , stop , emsg )
FUNCTION_CALL	527:35	527:75	8	TIFFRGBAImageBegin ( & img , tif , stop , emsg )
CALLEE	527:35	527:35	9	TIFFRGBAImageBegin
LEAF_NODE	527:35	527:35	10	TIFFRGBAImageBegin
LEAF_NODE	527:53	527:53	9	(
ARGUMENT	527:54	527:54	9	& img
UNARY_EXPR	527:54	527:55	10	& img
UNARY_OPERATOR	527:54	527:54	11	&
LEAF_NODE	527:54	527:54	12	&
FIELD	527:55	527:55	11	img
LEAF_NODE	527:55	527:55	12	img
LEAF_NODE	527:58	527:58	9	,
ARGUMENT	527:60	527:60	9	tif
FIELD	527:60	527:60	10	tif
LEAF_NODE	527:60	527:60	11	tif
LEAF_NODE	527:63	527:63	9	,
ARGUMENT	527:65	527:65	9	stop
FIELD	527:65	527:65	10	stop
LEAF_NODE	527:65	527:65	11	stop
LEAF_NODE	527:69	527:69	9	,
ARGUMENT	527:71	527:71	9	emsg
FIELD	527:71	527:71	10	emsg
LEAF_NODE	527:71	527:71	11	emsg
LEAF_NODE	527:75	527:75	9	)
LEAF_NODE	527:76	527:76	4	)
STATEMENTS	527:78	533:1	4	
LEAF_NODE	527:78	527:78	5	{
STATEMENTS	528:2	532:2	5	
EXPR_STATEMENT	528:2	528:43	6	img . req_orientation = ( uint16 ) orientation ;
EXPR	528:2	528:2	7	img . req_orientation = ( uint16 ) orientation
ASSIGN	528:2	528:24	8	img . req_orientation = ( uint16 ) orientation
LVAL	528:2	528:2	9	img . req_orientation
FIELD	528:2	528:6	10	img . req_orientation
LEAF_NODE	528:2	528:2	11	img
LEAF_NODE	528:5	528:5	11	.
LEAF_NODE	528:6	528:6	11	req_orientation
ASSIGN_OP	528:22	528:22	9	=
LEAF_NODE	528:22	528:22	10	=
RVAL	528:24	528:32	9	( uint16 ) orientation
LEAF_NODE	528:24	528:24	10	(
TYPE_NAME	528:25	528:25	10	uint16
LEAF_NODE	528:25	528:25	11	uint16
LEAF_NODE	528:31	528:31	10	)
FIELD	528:32	528:32	10	orientation
LEAF_NODE	528:32	528:32	11	orientation
LEAF_NODE	528:43	528:43	7	;
EXPR_STATEMENT	530:2	531:22	6	ok = TIFFRGBAImageGet ( & img , raster + ( rheight - img . height ) * rwidth , rwidth , img . height ) ;
EXPR	530:2	530:2	7	ok = TIFFRGBAImageGet ( & img , raster + ( rheight - img . height ) * rwidth , rwidth , img . height )
ASSIGN	530:2	530:7	8	ok = TIFFRGBAImageGet ( & img , raster + ( rheight - img . height ) * rwidth , rwidth , img . height )
LVAL	530:2	530:2	9	ok
FIELD	530:2	530:2	10	ok
LEAF_NODE	530:2	530:2	11	ok
ASSIGN_OP	530:5	530:5	9	=
LEAF_NODE	530:5	530:5	10	=
RVAL	530:7	530:7	9	TIFFRGBAImageGet ( & img , raster + ( rheight - img . height ) * rwidth , rwidth , img . height )
FUNCTION_CALL	530:7	531:21	10	TIFFRGBAImageGet ( & img , raster + ( rheight - img . height ) * rwidth , rwidth , img . height )
CALLEE	530:7	530:7	11	TIFFRGBAImageGet
LEAF_NODE	530:7	530:7	12	TIFFRGBAImageGet
LEAF_NODE	530:23	530:23	11	(
ARGUMENT	530:24	530:24	11	& img
UNARY_EXPR	530:24	530:25	12	& img
UNARY_OPERATOR	530:24	530:24	13	&
LEAF_NODE	530:24	530:24	14	&
FIELD	530:25	530:25	13	img
LEAF_NODE	530:25	530:25	14	img
LEAF_NODE	530:28	530:28	11	,
ARGUMENT	530:30	530:58	11	raster + ( rheight - img . height ) * rwidth
FIELD	530:30	530:30	12	raster
LEAF_NODE	530:30	530:30	13	raster
LEAF_NODE	530:36	530:36	12	+
LEAF_NODE	530:37	530:37	12	(
FIELD	530:38	530:38	12	rheight
LEAF_NODE	530:38	530:38	13	rheight
LEAF_NODE	530:45	530:45	12	-
FIELD	530:46	530:50	12	img . height
LEAF_NODE	530:46	530:46	13	img
LEAF_NODE	530:49	530:49	13	.
LEAF_NODE	530:50	530:50	13	height
LEAF_NODE	530:56	530:56	12	)
LEAF_NODE	530:57	530:57	12	*
FIELD	530:58	530:58	12	rwidth
LEAF_NODE	530:58	530:58	13	rwidth
LEAF_NODE	530:64	530:64	11	,
ARGUMENT	531:3	531:3	11	rwidth
FIELD	531:3	531:3	12	rwidth
LEAF_NODE	531:3	531:3	13	rwidth
LEAF_NODE	531:9	531:9	11	,
ARGUMENT	531:11	531:11	11	img . height
FIELD	531:11	531:15	12	img . height
LEAF_NODE	531:11	531:11	13	img
LEAF_NODE	531:14	531:14	13	.
LEAF_NODE	531:15	531:15	13	height
LEAF_NODE	531:21	531:21	11	)
LEAF_NODE	531:22	531:22	7	;
EXPR_STATEMENT	532:2	532:24	6	TIFFRGBAImageEnd ( & img ) ;
EXPR	532:2	532:2	7	TIFFRGBAImageEnd ( & img )
FUNCTION_CALL	532:2	532:23	8	TIFFRGBAImageEnd ( & img )
CALLEE	532:2	532:2	9	TIFFRGBAImageEnd
LEAF_NODE	532:2	532:2	10	TIFFRGBAImageEnd
LEAF_NODE	532:18	532:18	9	(
ARGUMENT	532:19	532:19	9	& img
UNARY_EXPR	532:19	532:20	10	& img
UNARY_OPERATOR	532:19	532:19	11	&
LEAF_NODE	532:19	532:19	12	&
FIELD	532:20	532:20	11	img
LEAF_NODE	532:20	532:20	12	img
LEAF_NODE	532:23	532:23	9	)
LEAF_NODE	532:24	532:24	7	;
LEAF_NODE	533:1	533:1	5	}
SELECTION	533:3	533:8	3	
KEYWORD	533:3	533:3	4	else
LEAF_NODE	533:3	533:3	5	else
STATEMENTS	533:8	536:4	4	
LEAF_NODE	533:8	533:8	5	{
STATEMENTS	534:2	535:2	5	
EXPR_STATEMENT	534:2	534:66	6	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , emsg ) ;
EXPR	534:2	534:2	7	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , emsg )
FUNCTION_CALL	534:2	534:65	8	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , emsg )
CALLEE	534:2	534:2	9	TIFFErrorExt
LEAF_NODE	534:2	534:2	10	TIFFErrorExt
LEAF_NODE	534:14	534:14	9	(
ARGUMENT	534:15	534:15	9	tif -> tif_clientdata
FIELD	534:15	534:20	10	tif -> tif_clientdata
LEAF_NODE	534:15	534:15	11	tif
LEAF_NODE	534:18	534:18	11	->
LEAF_NODE	534:20	534:20	11	tif_clientdata
LEAF_NODE	534:34	534:34	9	,
ARGUMENT	534:36	534:36	9	TIFFFileName ( tif )
FUNCTION_CALL	534:36	534:52	10	TIFFFileName ( tif )
CALLEE	534:36	534:36	11	TIFFFileName
LEAF_NODE	534:36	534:36	12	TIFFFileName
LEAF_NODE	534:48	534:48	11	(
ARGUMENT	534:49	534:49	11	tif
FIELD	534:49	534:49	12	tif
LEAF_NODE	534:49	534:49	13	tif
LEAF_NODE	534:52	534:52	11	)
LEAF_NODE	534:53	534:53	9	,
ARGUMENT	534:55	534:55	9	"%s"
FIELD	534:55	534:55	10	"%s"
LEAF_NODE	534:55	534:55	11	"%s"
LEAF_NODE	534:59	534:59	9	,
ARGUMENT	534:61	534:61	9	emsg
FIELD	534:61	534:61	10	emsg
LEAF_NODE	534:61	534:61	11	emsg
LEAF_NODE	534:65	534:65	9	)
LEAF_NODE	534:66	534:66	7	;
EXPR_STATEMENT	535:2	535:8	6	ok = 0 ;
EXPR	535:2	535:2	7	ok = 0
ASSIGN	535:2	535:7	8	ok = 0
LVAL	535:2	535:2	9	ok
FIELD	535:2	535:2	10	ok
LEAF_NODE	535:2	535:2	11	ok
ASSIGN_OP	535:5	535:5	9	=
LEAF_NODE	535:5	535:5	10	=
RVAL	535:7	535:7	9	0
FIELD	535:7	535:7	10	0
LEAF_NODE	535:7	535:7	11	0
LEAF_NODE	535:8	535:8	7	;
LEAF_NODE	536:4	536:4	5	}
LEAF_NODE	537:4	537:4	3	return
LEAF_NODE	537:11	537:11	3	(
LEAF_NODE	537:12	537:12	3	ok
LEAF_NODE	537:14	537:14	3	)
LEAF_NODE	537:15	537:15	3	;
LEAF_NODE	538:0	538:0	2	}
FUNCTION_DEF	544:0	550:0	1	
RETURN_TYPE	544:0	544:0	2	int
TYPE_NAME	544:0	544:0	3	int
LEAF_NODE	544:0	544:0	4	int
FUNCTION_NAME	545:0	545:0	2	TIFFReadRGBAImage
LEAF_NODE	545:0	545:0	3	TIFFReadRGBAImage
PARAMETER_LIST	545:17	546:59	2	( TIFF * tif , uint32 rwidth , uint32 rheight , uint32 * raster , int stop )
LEAF_NODE	545:17	545:17	3	(
PARAMETER_DECL	545:18	545:24	3	TIFF * tif
TYPE	545:18	545:22	4	TIFF *
TYPE_NAME	545:18	545:18	5	TIFF
LEAF_NODE	545:18	545:18	6	TIFF
POINTER	545:22	545:22	5	*
LEAF_NODE	545:22	545:22	6	*
NAME	545:24	545:24	4	tif
LEAF_NODE	545:24	545:24	5	tif
LEAF_NODE	545:27	545:27	3	,
PARAMETER_DECL	546:4	546:11	3	uint32 rwidth
TYPE	546:4	546:4	4	uint32
TYPE_NAME	546:4	546:4	5	uint32
LEAF_NODE	546:4	546:4	6	uint32
NAME	546:11	546:11	4	rwidth
LEAF_NODE	546:11	546:11	5	rwidth
LEAF_NODE	546:17	546:17	3	,
PARAMETER_DECL	546:19	546:26	3	uint32 rheight
TYPE	546:19	546:19	4	uint32
TYPE_NAME	546:19	546:19	5	uint32
LEAF_NODE	546:19	546:19	6	uint32
NAME	546:26	546:26	4	rheight
LEAF_NODE	546:26	546:26	5	rheight
LEAF_NODE	546:33	546:33	3	,
PARAMETER_DECL	546:35	546:43	3	uint32 * raster
TYPE	546:35	546:41	4	uint32 *
TYPE_NAME	546:35	546:35	5	uint32
LEAF_NODE	546:35	546:35	6	uint32
POINTER	546:41	546:41	5	*
LEAF_NODE	546:41	546:41	6	*
NAME	546:43	546:43	4	raster
LEAF_NODE	546:43	546:43	5	raster
LEAF_NODE	546:49	546:49	3	,
PARAMETER_DECL	546:51	546:55	3	int stop
TYPE	546:51	546:51	4	int
TYPE_NAME	546:51	546:51	5	int
LEAF_NODE	546:51	546:51	6	int
NAME	546:55	546:55	4	stop
LEAF_NODE	546:55	546:55	5	stop
LEAF_NODE	546:59	546:59	3	)
LEAF_NODE	547:0	547:0	2	{
STATEMENTS	548:1	548:1	2	
JUMP_STATEMENT	548:1	549:32	3	return TIFFReadRGBAImageOriented ( tif , rwidth , rheight , raster , ORIENTATION_BOTLEFT , stop ) ;
KEYWORD	548:1	548:1	4	return
LEAF_NODE	548:1	548:1	5	return
DESTINATION	548:8	548:8	4	TIFFReadRGBAImageOriented ( tif , rwidth , rheight , raster , ORIENTATION_BOTLEFT , stop )
EXPR	548:8	548:8	5	TIFFReadRGBAImageOriented ( tif , rwidth , rheight , raster , ORIENTATION_BOTLEFT , stop )
FUNCTION_CALL	548:8	549:31	6	TIFFReadRGBAImageOriented ( tif , rwidth , rheight , raster , ORIENTATION_BOTLEFT , stop )
CALLEE	548:8	548:8	7	TIFFReadRGBAImageOriented
LEAF_NODE	548:8	548:8	8	TIFFReadRGBAImageOriented
LEAF_NODE	548:33	548:33	7	(
ARGUMENT	548:34	548:34	7	tif
FIELD	548:34	548:34	8	tif
LEAF_NODE	548:34	548:34	9	tif
LEAF_NODE	548:37	548:37	7	,
ARGUMENT	548:39	548:39	7	rwidth
FIELD	548:39	548:39	8	rwidth
LEAF_NODE	548:39	548:39	9	rwidth
LEAF_NODE	548:45	548:45	7	,
ARGUMENT	548:47	548:47	7	rheight
FIELD	548:47	548:47	8	rheight
LEAF_NODE	548:47	548:47	9	rheight
LEAF_NODE	548:54	548:54	7	,
ARGUMENT	548:56	548:56	7	raster
FIELD	548:56	548:56	8	raster
LEAF_NODE	548:56	548:56	9	raster
LEAF_NODE	548:62	548:62	7	,
ARGUMENT	549:6	549:6	7	ORIENTATION_BOTLEFT
FIELD	549:6	549:6	8	ORIENTATION_BOTLEFT
LEAF_NODE	549:6	549:6	9	ORIENTATION_BOTLEFT
LEAF_NODE	549:25	549:25	7	,
ARGUMENT	549:27	549:27	7	stop
FIELD	549:27	549:27	8	stop
LEAF_NODE	549:27	549:27	9	stop
LEAF_NODE	549:31	549:31	7	)
LEAF_NODE	549:32	549:32	4	;
LEAF_NODE	550:0	550:0	2	}
FUNCTION_DEF	552:0	611:0	1	
RETURN_TYPE	552:0	552:7	2	static int
LEAF_NODE	552:0	552:0	3	static
TYPE_NAME	552:7	552:7	3	int
LEAF_NODE	552:7	552:7	4	int
FUNCTION_NAME	553:0	553:0	2	setorientation
LEAF_NODE	553:0	553:0	3	setorientation
PARAMETER_LIST	553:14	553:33	2	( TIFFRGBAImage * img )
LEAF_NODE	553:14	553:14	3	(
PARAMETER_DECL	553:15	553:30	3	TIFFRGBAImage * img
TYPE	553:15	553:28	4	TIFFRGBAImage *
TYPE_NAME	553:15	553:15	5	TIFFRGBAImage
LEAF_NODE	553:15	553:15	6	TIFFRGBAImage
POINTER	553:28	553:28	5	*
LEAF_NODE	553:28	553:28	6	*
NAME	553:30	553:30	4	img
LEAF_NODE	553:30	553:30	5	img
LEAF_NODE	553:33	553:33	3	)
LEAF_NODE	554:0	554:0	2	{
STATEMENTS	555:1	555:1	2	
SELECTION	555:1	555:27	3	
KEYWORD	555:1	555:1	4	switch
LEAF_NODE	555:1	555:1	5	switch
LEAF_NODE	555:8	555:8	4	(
CONDITION	555:9	555:9	4	img -> orientation
EXPR	555:9	555:9	5	img -> orientation
FIELD	555:9	555:14	6	img -> orientation
LEAF_NODE	555:9	555:9	7	img
LEAF_NODE	555:12	555:12	7	->
LEAF_NODE	555:14	555:14	7	orientation
LEAF_NODE	555:25	555:25	4	)
STATEMENTS	555:27	610:1	4	
LEAF_NODE	555:27	555:27	5	{
STATEMENTS	556:2	609:3	5	
LABEL	556:2	556:26	6	case ORIENTATION_TOPLEFT :
LEAF_NODE	556:2	556:2	7	case
LEAF_NODE	556:7	556:7	7	ORIENTATION_TOPLEFT
LEAF_NODE	556:26	556:26	7	:
LABEL	557:2	557:26	6	case ORIENTATION_LEFTTOP :
LEAF_NODE	557:2	557:2	7	case
LEAF_NODE	557:7	557:7	7	ORIENTATION_LEFTTOP
LEAF_NODE	557:26	557:26	7	:
SELECTION	558:3	560:4	6	
KEYWORD	558:3	558:3	7	if
LEAF_NODE	558:3	558:3	8	if
LEAF_NODE	558:6	558:6	7	(
CONDITION	558:7	558:7	7	img -> req_orientation == ORIENTATION_TOPRIGHT || img -> req_orientation == ORIENTATION_RIGHTTOP
EXPR	558:7	558:7	8	img -> req_orientation == ORIENTATION_TOPRIGHT || img -> req_orientation == ORIENTATION_RIGHTTOP
OR	558:7	559:7	9	img -> req_orientation == ORIENTATION_TOPRIGHT || img -> req_orientation == ORIENTATION_RIGHTTOP
EXPR	558:7	558:31	10	img -> req_orientation == ORIENTATION_TOPRIGHT
FIELD	558:7	558:12	11	img -> req_orientation
LEAF_NODE	558:7	558:7	12	img
LEAF_NODE	558:10	558:10	12	->
LEAF_NODE	558:12	558:12	12	req_orientation
EQ_OPERATOR	558:28	558:28	11	==
LEAF_NODE	558:28	558:28	12	==
FIELD	558:31	558:31	11	ORIENTATION_TOPRIGHT
LEAF_NODE	558:31	558:31	12	ORIENTATION_TOPRIGHT
LEAF_NODE	558:52	558:52	10	||
EXPR	559:7	559:31	10	img -> req_orientation == ORIENTATION_RIGHTTOP
FIELD	559:7	559:12	11	img -> req_orientation
LEAF_NODE	559:7	559:7	12	img
LEAF_NODE	559:10	559:10	12	->
LEAF_NODE	559:12	559:12	12	req_orientation
EQ_OPERATOR	559:28	559:28	11	==
LEAF_NODE	559:28	559:28	12	==
FIELD	559:31	559:31	11	ORIENTATION_RIGHTTOP
LEAF_NODE	559:31	559:31	12	ORIENTATION_RIGHTTOP
LEAF_NODE	559:51	559:51	7	)
STATEMENTS	560:4	560:4	7	
JUMP_STATEMENT	560:4	560:28	8	return FLIP_HORIZONTALLY ;
KEYWORD	560:4	560:4	9	return
LEAF_NODE	560:4	560:4	10	return
DESTINATION	560:11	560:11	9	FLIP_HORIZONTALLY
EXPR	560:11	560:11	10	FLIP_HORIZONTALLY
FIELD	560:11	560:11	11	FLIP_HORIZONTALLY
LEAF_NODE	560:11	560:11	12	FLIP_HORIZONTALLY
LEAF_NODE	560:28	560:28	9	;
SELECTION	561:3	561:8	6	
KEYWORD	561:3	561:3	7	else
LEAF_NODE	561:3	561:3	8	else
STATEMENTS	561:8	561:8	7	
SELECTION	561:8	563:4	8	
KEYWORD	561:8	561:8	9	if
LEAF_NODE	561:8	561:8	10	if
LEAF_NODE	561:11	561:11	9	(
CONDITION	561:12	561:12	9	img -> req_orientation == ORIENTATION_BOTRIGHT || img -> req_orientation == ORIENTATION_RIGHTBOT
EXPR	561:12	561:12	10	img -> req_orientation == ORIENTATION_BOTRIGHT || img -> req_orientation == ORIENTATION_RIGHTBOT
OR	561:12	562:7	11	img -> req_orientation == ORIENTATION_BOTRIGHT || img -> req_orientation == ORIENTATION_RIGHTBOT
EXPR	561:12	561:36	12	img -> req_orientation == ORIENTATION_BOTRIGHT
FIELD	561:12	561:17	13	img -> req_orientation
LEAF_NODE	561:12	561:12	14	img
LEAF_NODE	561:15	561:15	14	->
LEAF_NODE	561:17	561:17	14	req_orientation
EQ_OPERATOR	561:33	561:33	13	==
LEAF_NODE	561:33	561:33	14	==
FIELD	561:36	561:36	13	ORIENTATION_BOTRIGHT
LEAF_NODE	561:36	561:36	14	ORIENTATION_BOTRIGHT
LEAF_NODE	561:57	561:57	12	||
EXPR	562:7	562:31	12	img -> req_orientation == ORIENTATION_RIGHTBOT
FIELD	562:7	562:12	13	img -> req_orientation
LEAF_NODE	562:7	562:7	14	img
LEAF_NODE	562:10	562:10	14	->
LEAF_NODE	562:12	562:12	14	req_orientation
EQ_OPERATOR	562:28	562:28	13	==
LEAF_NODE	562:28	562:28	14	==
FIELD	562:31	562:31	13	ORIENTATION_RIGHTBOT
LEAF_NODE	562:31	562:31	14	ORIENTATION_RIGHTBOT
LEAF_NODE	562:51	562:51	9	)
STATEMENTS	563:4	563:4	9	
JUMP_STATEMENT	563:4	563:46	10	return FLIP_HORIZONTALLY | FLIP_VERTICALLY ;
KEYWORD	563:4	563:4	11	return
LEAF_NODE	563:4	563:4	12	return
DESTINATION	563:11	563:11	11	FLIP_HORIZONTALLY | FLIP_VERTICALLY
EXPR	563:11	563:11	12	FLIP_HORIZONTALLY | FLIP_VERTICALLY
BIT_OR	563:11	563:31	13	FLIP_HORIZONTALLY | FLIP_VERTICALLY
BIT_OR_ELEM	563:11	563:11	14	FLIP_HORIZONTALLY
FIELD	563:11	563:11	15	FLIP_HORIZONTALLY
LEAF_NODE	563:11	563:11	16	FLIP_HORIZONTALLY
LEAF_NODE	563:29	563:29	14	|
BIT_OR_ELEM	563:31	563:31	14	FLIP_VERTICALLY
FIELD	563:31	563:31	15	FLIP_VERTICALLY
LEAF_NODE	563:31	563:31	16	FLIP_VERTICALLY
LEAF_NODE	563:46	563:46	11	;
SELECTION	564:3	564:8	6	
KEYWORD	564:3	564:3	7	else
LEAF_NODE	564:3	564:3	8	else
STATEMENTS	564:8	564:8	7	
SELECTION	564:8	566:4	8	
KEYWORD	564:8	564:8	9	if
LEAF_NODE	564:8	564:8	10	if
LEAF_NODE	564:11	564:11	9	(
CONDITION	564:12	564:12	9	img -> req_orientation == ORIENTATION_BOTLEFT || img -> req_orientation == ORIENTATION_LEFTBOT
EXPR	564:12	564:12	10	img -> req_orientation == ORIENTATION_BOTLEFT || img -> req_orientation == ORIENTATION_LEFTBOT
OR	564:12	565:7	11	img -> req_orientation == ORIENTATION_BOTLEFT || img -> req_orientation == ORIENTATION_LEFTBOT
EXPR	564:12	564:36	12	img -> req_orientation == ORIENTATION_BOTLEFT
FIELD	564:12	564:17	13	img -> req_orientation
LEAF_NODE	564:12	564:12	14	img
LEAF_NODE	564:15	564:15	14	->
LEAF_NODE	564:17	564:17	14	req_orientation
EQ_OPERATOR	564:33	564:33	13	==
LEAF_NODE	564:33	564:33	14	==
FIELD	564:36	564:36	13	ORIENTATION_BOTLEFT
LEAF_NODE	564:36	564:36	14	ORIENTATION_BOTLEFT
LEAF_NODE	564:56	564:56	12	||
EXPR	565:7	565:31	12	img -> req_orientation == ORIENTATION_LEFTBOT
FIELD	565:7	565:12	13	img -> req_orientation
LEAF_NODE	565:7	565:7	14	img
LEAF_NODE	565:10	565:10	14	->
LEAF_NODE	565:12	565:12	14	req_orientation
EQ_OPERATOR	565:28	565:28	13	==
LEAF_NODE	565:28	565:28	14	==
FIELD	565:31	565:31	13	ORIENTATION_LEFTBOT
LEAF_NODE	565:31	565:31	14	ORIENTATION_LEFTBOT
LEAF_NODE	565:50	565:50	9	)
STATEMENTS	566:4	566:4	9	
JUMP_STATEMENT	566:4	566:26	10	return FLIP_VERTICALLY ;
KEYWORD	566:4	566:4	11	return
LEAF_NODE	566:4	566:4	12	return
DESTINATION	566:11	566:11	11	FLIP_VERTICALLY
EXPR	566:11	566:11	12	FLIP_VERTICALLY
FIELD	566:11	566:11	13	FLIP_VERTICALLY
LEAF_NODE	566:11	566:11	14	FLIP_VERTICALLY
LEAF_NODE	566:26	566:26	11	;
SELECTION	567:3	568:4	6	
KEYWORD	567:3	567:3	7	else
LEAF_NODE	567:3	567:3	8	else
STATEMENTS	568:4	568:4	7	
JUMP_STATEMENT	568:4	568:12	8	return 0 ;
KEYWORD	568:4	568:4	9	return
LEAF_NODE	568:4	568:4	10	return
DESTINATION	568:11	568:11	9	0
EXPR	568:11	568:11	10	0
FIELD	568:11	568:11	11	0
LEAF_NODE	568:11	568:11	12	0
LEAF_NODE	568:12	568:12	9	;
LABEL	569:2	569:27	6	case ORIENTATION_TOPRIGHT :
LEAF_NODE	569:2	569:2	7	case
LEAF_NODE	569:7	569:7	7	ORIENTATION_TOPRIGHT
LEAF_NODE	569:27	569:27	7	:
LABEL	570:2	570:27	6	case ORIENTATION_RIGHTTOP :
LEAF_NODE	570:2	570:2	7	case
LEAF_NODE	570:7	570:7	7	ORIENTATION_RIGHTTOP
LEAF_NODE	570:27	570:27	7	:
SELECTION	571:3	573:4	6	
KEYWORD	571:3	571:3	7	if
LEAF_NODE	571:3	571:3	8	if
LEAF_NODE	571:6	571:6	7	(
CONDITION	571:7	571:7	7	img -> req_orientation == ORIENTATION_TOPLEFT || img -> req_orientation == ORIENTATION_LEFTTOP
EXPR	571:7	571:7	8	img -> req_orientation == ORIENTATION_TOPLEFT || img -> req_orientation == ORIENTATION_LEFTTOP
OR	571:7	572:7	9	img -> req_orientation == ORIENTATION_TOPLEFT || img -> req_orientation == ORIENTATION_LEFTTOP
EXPR	571:7	571:31	10	img -> req_orientation == ORIENTATION_TOPLEFT
FIELD	571:7	571:12	11	img -> req_orientation
LEAF_NODE	571:7	571:7	12	img
LEAF_NODE	571:10	571:10	12	->
LEAF_NODE	571:12	571:12	12	req_orientation
EQ_OPERATOR	571:28	571:28	11	==
LEAF_NODE	571:28	571:28	12	==
FIELD	571:31	571:31	11	ORIENTATION_TOPLEFT
LEAF_NODE	571:31	571:31	12	ORIENTATION_TOPLEFT
LEAF_NODE	571:51	571:51	10	||
EXPR	572:7	572:31	10	img -> req_orientation == ORIENTATION_LEFTTOP
FIELD	572:7	572:12	11	img -> req_orientation
LEAF_NODE	572:7	572:7	12	img
LEAF_NODE	572:10	572:10	12	->
LEAF_NODE	572:12	572:12	12	req_orientation
EQ_OPERATOR	572:28	572:28	11	==
LEAF_NODE	572:28	572:28	12	==
FIELD	572:31	572:31	11	ORIENTATION_LEFTTOP
LEAF_NODE	572:31	572:31	12	ORIENTATION_LEFTTOP
LEAF_NODE	572:50	572:50	7	)
STATEMENTS	573:4	573:4	7	
JUMP_STATEMENT	573:4	573:28	8	return FLIP_HORIZONTALLY ;
KEYWORD	573:4	573:4	9	return
LEAF_NODE	573:4	573:4	10	return
DESTINATION	573:11	573:11	9	FLIP_HORIZONTALLY
EXPR	573:11	573:11	10	FLIP_HORIZONTALLY
FIELD	573:11	573:11	11	FLIP_HORIZONTALLY
LEAF_NODE	573:11	573:11	12	FLIP_HORIZONTALLY
LEAF_NODE	573:28	573:28	9	;
SELECTION	574:3	574:8	6	
KEYWORD	574:3	574:3	7	else
LEAF_NODE	574:3	574:3	8	else
STATEMENTS	574:8	574:8	7	
SELECTION	574:8	576:4	8	
KEYWORD	574:8	574:8	9	if
LEAF_NODE	574:8	574:8	10	if
LEAF_NODE	574:11	574:11	9	(
CONDITION	574:12	574:12	9	img -> req_orientation == ORIENTATION_BOTRIGHT || img -> req_orientation == ORIENTATION_RIGHTBOT
EXPR	574:12	574:12	10	img -> req_orientation == ORIENTATION_BOTRIGHT || img -> req_orientation == ORIENTATION_RIGHTBOT
OR	574:12	575:7	11	img -> req_orientation == ORIENTATION_BOTRIGHT || img -> req_orientation == ORIENTATION_RIGHTBOT
EXPR	574:12	574:36	12	img -> req_orientation == ORIENTATION_BOTRIGHT
FIELD	574:12	574:17	13	img -> req_orientation
LEAF_NODE	574:12	574:12	14	img
LEAF_NODE	574:15	574:15	14	->
LEAF_NODE	574:17	574:17	14	req_orientation
EQ_OPERATOR	574:33	574:33	13	==
LEAF_NODE	574:33	574:33	14	==
FIELD	574:36	574:36	13	ORIENTATION_BOTRIGHT
LEAF_NODE	574:36	574:36	14	ORIENTATION_BOTRIGHT
LEAF_NODE	574:57	574:57	12	||
EXPR	575:7	575:31	12	img -> req_orientation == ORIENTATION_RIGHTBOT
FIELD	575:7	575:12	13	img -> req_orientation
LEAF_NODE	575:7	575:7	14	img
LEAF_NODE	575:10	575:10	14	->
LEAF_NODE	575:12	575:12	14	req_orientation
EQ_OPERATOR	575:28	575:28	13	==
LEAF_NODE	575:28	575:28	14	==
FIELD	575:31	575:31	13	ORIENTATION_RIGHTBOT
LEAF_NODE	575:31	575:31	14	ORIENTATION_RIGHTBOT
LEAF_NODE	575:51	575:51	9	)
STATEMENTS	576:4	576:4	9	
JUMP_STATEMENT	576:4	576:26	10	return FLIP_VERTICALLY ;
KEYWORD	576:4	576:4	11	return
LEAF_NODE	576:4	576:4	12	return
DESTINATION	576:11	576:11	11	FLIP_VERTICALLY
EXPR	576:11	576:11	12	FLIP_VERTICALLY
FIELD	576:11	576:11	13	FLIP_VERTICALLY
LEAF_NODE	576:11	576:11	14	FLIP_VERTICALLY
LEAF_NODE	576:26	576:26	11	;
SELECTION	577:3	577:8	6	
KEYWORD	577:3	577:3	7	else
LEAF_NODE	577:3	577:3	8	else
STATEMENTS	577:8	577:8	7	
SELECTION	577:8	579:4	8	
KEYWORD	577:8	577:8	9	if
LEAF_NODE	577:8	577:8	10	if
LEAF_NODE	577:11	577:11	9	(
CONDITION	577:12	577:12	9	img -> req_orientation == ORIENTATION_BOTLEFT || img -> req_orientation == ORIENTATION_LEFTBOT
EXPR	577:12	577:12	10	img -> req_orientation == ORIENTATION_BOTLEFT || img -> req_orientation == ORIENTATION_LEFTBOT
OR	577:12	578:7	11	img -> req_orientation == ORIENTATION_BOTLEFT || img -> req_orientation == ORIENTATION_LEFTBOT
EXPR	577:12	577:36	12	img -> req_orientation == ORIENTATION_BOTLEFT
FIELD	577:12	577:17	13	img -> req_orientation
LEAF_NODE	577:12	577:12	14	img
LEAF_NODE	577:15	577:15	14	->
LEAF_NODE	577:17	577:17	14	req_orientation
EQ_OPERATOR	577:33	577:33	13	==
LEAF_NODE	577:33	577:33	14	==
FIELD	577:36	577:36	13	ORIENTATION_BOTLEFT
LEAF_NODE	577:36	577:36	14	ORIENTATION_BOTLEFT
LEAF_NODE	577:56	577:56	12	||
EXPR	578:7	578:31	12	img -> req_orientation == ORIENTATION_LEFTBOT
FIELD	578:7	578:12	13	img -> req_orientation
LEAF_NODE	578:7	578:7	14	img
LEAF_NODE	578:10	578:10	14	->
LEAF_NODE	578:12	578:12	14	req_orientation
EQ_OPERATOR	578:28	578:28	13	==
LEAF_NODE	578:28	578:28	14	==
FIELD	578:31	578:31	13	ORIENTATION_LEFTBOT
LEAF_NODE	578:31	578:31	14	ORIENTATION_LEFTBOT
LEAF_NODE	578:50	578:50	9	)
STATEMENTS	579:4	579:4	9	
JUMP_STATEMENT	579:4	579:46	10	return FLIP_HORIZONTALLY | FLIP_VERTICALLY ;
KEYWORD	579:4	579:4	11	return
LEAF_NODE	579:4	579:4	12	return
DESTINATION	579:11	579:11	11	FLIP_HORIZONTALLY | FLIP_VERTICALLY
EXPR	579:11	579:11	12	FLIP_HORIZONTALLY | FLIP_VERTICALLY
BIT_OR	579:11	579:31	13	FLIP_HORIZONTALLY | FLIP_VERTICALLY
BIT_OR_ELEM	579:11	579:11	14	FLIP_HORIZONTALLY
FIELD	579:11	579:11	15	FLIP_HORIZONTALLY
LEAF_NODE	579:11	579:11	16	FLIP_HORIZONTALLY
LEAF_NODE	579:29	579:29	14	|
BIT_OR_ELEM	579:31	579:31	14	FLIP_VERTICALLY
FIELD	579:31	579:31	15	FLIP_VERTICALLY
LEAF_NODE	579:31	579:31	16	FLIP_VERTICALLY
LEAF_NODE	579:46	579:46	11	;
SELECTION	580:3	581:4	6	
KEYWORD	580:3	580:3	7	else
LEAF_NODE	580:3	580:3	8	else
STATEMENTS	581:4	581:4	7	
JUMP_STATEMENT	581:4	581:12	8	return 0 ;
KEYWORD	581:4	581:4	9	return
LEAF_NODE	581:4	581:4	10	return
DESTINATION	581:11	581:11	9	0
EXPR	581:11	581:11	10	0
FIELD	581:11	581:11	11	0
LEAF_NODE	581:11	581:11	12	0
LEAF_NODE	581:12	581:12	9	;
LABEL	582:2	582:27	6	case ORIENTATION_BOTRIGHT :
LEAF_NODE	582:2	582:2	7	case
LEAF_NODE	582:7	582:7	7	ORIENTATION_BOTRIGHT
LEAF_NODE	582:27	582:27	7	:
LABEL	583:2	583:27	6	case ORIENTATION_RIGHTBOT :
LEAF_NODE	583:2	583:2	7	case
LEAF_NODE	583:7	583:7	7	ORIENTATION_RIGHTBOT
LEAF_NODE	583:27	583:27	7	:
SELECTION	584:3	586:4	6	
KEYWORD	584:3	584:3	7	if
LEAF_NODE	584:3	584:3	8	if
LEAF_NODE	584:6	584:6	7	(
CONDITION	584:7	584:7	7	img -> req_orientation == ORIENTATION_TOPLEFT || img -> req_orientation == ORIENTATION_LEFTTOP
EXPR	584:7	584:7	8	img -> req_orientation == ORIENTATION_TOPLEFT || img -> req_orientation == ORIENTATION_LEFTTOP
OR	584:7	585:7	9	img -> req_orientation == ORIENTATION_TOPLEFT || img -> req_orientation == ORIENTATION_LEFTTOP
EXPR	584:7	584:31	10	img -> req_orientation == ORIENTATION_TOPLEFT
FIELD	584:7	584:12	11	img -> req_orientation
LEAF_NODE	584:7	584:7	12	img
LEAF_NODE	584:10	584:10	12	->
LEAF_NODE	584:12	584:12	12	req_orientation
EQ_OPERATOR	584:28	584:28	11	==
LEAF_NODE	584:28	584:28	12	==
FIELD	584:31	584:31	11	ORIENTATION_TOPLEFT
LEAF_NODE	584:31	584:31	12	ORIENTATION_TOPLEFT
LEAF_NODE	584:51	584:51	10	||
EXPR	585:7	585:31	10	img -> req_orientation == ORIENTATION_LEFTTOP
FIELD	585:7	585:12	11	img -> req_orientation
LEAF_NODE	585:7	585:7	12	img
LEAF_NODE	585:10	585:10	12	->
LEAF_NODE	585:12	585:12	12	req_orientation
EQ_OPERATOR	585:28	585:28	11	==
LEAF_NODE	585:28	585:28	12	==
FIELD	585:31	585:31	11	ORIENTATION_LEFTTOP
LEAF_NODE	585:31	585:31	12	ORIENTATION_LEFTTOP
LEAF_NODE	585:50	585:50	7	)
STATEMENTS	586:4	586:4	7	
JUMP_STATEMENT	586:4	586:46	8	return FLIP_HORIZONTALLY | FLIP_VERTICALLY ;
KEYWORD	586:4	586:4	9	return
LEAF_NODE	586:4	586:4	10	return
DESTINATION	586:11	586:11	9	FLIP_HORIZONTALLY | FLIP_VERTICALLY
EXPR	586:11	586:11	10	FLIP_HORIZONTALLY | FLIP_VERTICALLY
BIT_OR	586:11	586:31	11	FLIP_HORIZONTALLY | FLIP_VERTICALLY
BIT_OR_ELEM	586:11	586:11	12	FLIP_HORIZONTALLY
FIELD	586:11	586:11	13	FLIP_HORIZONTALLY
LEAF_NODE	586:11	586:11	14	FLIP_HORIZONTALLY
LEAF_NODE	586:29	586:29	12	|
BIT_OR_ELEM	586:31	586:31	12	FLIP_VERTICALLY
FIELD	586:31	586:31	13	FLIP_VERTICALLY
LEAF_NODE	586:31	586:31	14	FLIP_VERTICALLY
LEAF_NODE	586:46	586:46	9	;
SELECTION	587:3	587:8	6	
KEYWORD	587:3	587:3	7	else
LEAF_NODE	587:3	587:3	8	else
STATEMENTS	587:8	587:8	7	
SELECTION	587:8	589:4	8	
KEYWORD	587:8	587:8	9	if
LEAF_NODE	587:8	587:8	10	if
LEAF_NODE	587:11	587:11	9	(
CONDITION	587:12	587:12	9	img -> req_orientation == ORIENTATION_TOPRIGHT || img -> req_orientation == ORIENTATION_RIGHTTOP
EXPR	587:12	587:12	10	img -> req_orientation == ORIENTATION_TOPRIGHT || img -> req_orientation == ORIENTATION_RIGHTTOP
OR	587:12	588:7	11	img -> req_orientation == ORIENTATION_TOPRIGHT || img -> req_orientation == ORIENTATION_RIGHTTOP
EXPR	587:12	587:36	12	img -> req_orientation == ORIENTATION_TOPRIGHT
FIELD	587:12	587:17	13	img -> req_orientation
LEAF_NODE	587:12	587:12	14	img
LEAF_NODE	587:15	587:15	14	->
LEAF_NODE	587:17	587:17	14	req_orientation
EQ_OPERATOR	587:33	587:33	13	==
LEAF_NODE	587:33	587:33	14	==
FIELD	587:36	587:36	13	ORIENTATION_TOPRIGHT
LEAF_NODE	587:36	587:36	14	ORIENTATION_TOPRIGHT
LEAF_NODE	587:57	587:57	12	||
EXPR	588:7	588:31	12	img -> req_orientation == ORIENTATION_RIGHTTOP
FIELD	588:7	588:12	13	img -> req_orientation
LEAF_NODE	588:7	588:7	14	img
LEAF_NODE	588:10	588:10	14	->
LEAF_NODE	588:12	588:12	14	req_orientation
EQ_OPERATOR	588:28	588:28	13	==
LEAF_NODE	588:28	588:28	14	==
FIELD	588:31	588:31	13	ORIENTATION_RIGHTTOP
LEAF_NODE	588:31	588:31	14	ORIENTATION_RIGHTTOP
LEAF_NODE	588:51	588:51	9	)
STATEMENTS	589:4	589:4	9	
JUMP_STATEMENT	589:4	589:26	10	return FLIP_VERTICALLY ;
KEYWORD	589:4	589:4	11	return
LEAF_NODE	589:4	589:4	12	return
DESTINATION	589:11	589:11	11	FLIP_VERTICALLY
EXPR	589:11	589:11	12	FLIP_VERTICALLY
FIELD	589:11	589:11	13	FLIP_VERTICALLY
LEAF_NODE	589:11	589:11	14	FLIP_VERTICALLY
LEAF_NODE	589:26	589:26	11	;
SELECTION	590:3	590:8	6	
KEYWORD	590:3	590:3	7	else
LEAF_NODE	590:3	590:3	8	else
STATEMENTS	590:8	590:8	7	
SELECTION	590:8	592:4	8	
KEYWORD	590:8	590:8	9	if
LEAF_NODE	590:8	590:8	10	if
LEAF_NODE	590:11	590:11	9	(
CONDITION	590:12	590:12	9	img -> req_orientation == ORIENTATION_BOTLEFT || img -> req_orientation == ORIENTATION_LEFTBOT
EXPR	590:12	590:12	10	img -> req_orientation == ORIENTATION_BOTLEFT || img -> req_orientation == ORIENTATION_LEFTBOT
OR	590:12	591:7	11	img -> req_orientation == ORIENTATION_BOTLEFT || img -> req_orientation == ORIENTATION_LEFTBOT
EXPR	590:12	590:36	12	img -> req_orientation == ORIENTATION_BOTLEFT
FIELD	590:12	590:17	13	img -> req_orientation
LEAF_NODE	590:12	590:12	14	img
LEAF_NODE	590:15	590:15	14	->
LEAF_NODE	590:17	590:17	14	req_orientation
EQ_OPERATOR	590:33	590:33	13	==
LEAF_NODE	590:33	590:33	14	==
FIELD	590:36	590:36	13	ORIENTATION_BOTLEFT
LEAF_NODE	590:36	590:36	14	ORIENTATION_BOTLEFT
LEAF_NODE	590:56	590:56	12	||
EXPR	591:7	591:31	12	img -> req_orientation == ORIENTATION_LEFTBOT
FIELD	591:7	591:12	13	img -> req_orientation
LEAF_NODE	591:7	591:7	14	img
LEAF_NODE	591:10	591:10	14	->
LEAF_NODE	591:12	591:12	14	req_orientation
EQ_OPERATOR	591:28	591:28	13	==
LEAF_NODE	591:28	591:28	14	==
FIELD	591:31	591:31	13	ORIENTATION_LEFTBOT
LEAF_NODE	591:31	591:31	14	ORIENTATION_LEFTBOT
LEAF_NODE	591:50	591:50	9	)
STATEMENTS	592:4	592:4	9	
JUMP_STATEMENT	592:4	592:28	10	return FLIP_HORIZONTALLY ;
KEYWORD	592:4	592:4	11	return
LEAF_NODE	592:4	592:4	12	return
DESTINATION	592:11	592:11	11	FLIP_HORIZONTALLY
EXPR	592:11	592:11	12	FLIP_HORIZONTALLY
FIELD	592:11	592:11	13	FLIP_HORIZONTALLY
LEAF_NODE	592:11	592:11	14	FLIP_HORIZONTALLY
LEAF_NODE	592:28	592:28	11	;
SELECTION	593:3	594:4	6	
KEYWORD	593:3	593:3	7	else
LEAF_NODE	593:3	593:3	8	else
STATEMENTS	594:4	594:4	7	
JUMP_STATEMENT	594:4	594:12	8	return 0 ;
KEYWORD	594:4	594:4	9	return
LEAF_NODE	594:4	594:4	10	return
DESTINATION	594:11	594:11	9	0
EXPR	594:11	594:11	10	0
FIELD	594:11	594:11	11	0
LEAF_NODE	594:11	594:11	12	0
LEAF_NODE	594:12	594:12	9	;
LABEL	595:2	595:26	6	case ORIENTATION_BOTLEFT :
LEAF_NODE	595:2	595:2	7	case
LEAF_NODE	595:7	595:7	7	ORIENTATION_BOTLEFT
LEAF_NODE	595:26	595:26	7	:
LABEL	596:2	596:26	6	case ORIENTATION_LEFTBOT :
LEAF_NODE	596:2	596:2	7	case
LEAF_NODE	596:7	596:7	7	ORIENTATION_LEFTBOT
LEAF_NODE	596:26	596:26	7	:
SELECTION	597:3	599:4	6	
KEYWORD	597:3	597:3	7	if
LEAF_NODE	597:3	597:3	8	if
LEAF_NODE	597:6	597:6	7	(
CONDITION	597:7	597:7	7	img -> req_orientation == ORIENTATION_TOPLEFT || img -> req_orientation == ORIENTATION_LEFTTOP
EXPR	597:7	597:7	8	img -> req_orientation == ORIENTATION_TOPLEFT || img -> req_orientation == ORIENTATION_LEFTTOP
OR	597:7	598:7	9	img -> req_orientation == ORIENTATION_TOPLEFT || img -> req_orientation == ORIENTATION_LEFTTOP
EXPR	597:7	597:31	10	img -> req_orientation == ORIENTATION_TOPLEFT
FIELD	597:7	597:12	11	img -> req_orientation
LEAF_NODE	597:7	597:7	12	img
LEAF_NODE	597:10	597:10	12	->
LEAF_NODE	597:12	597:12	12	req_orientation
EQ_OPERATOR	597:28	597:28	11	==
LEAF_NODE	597:28	597:28	12	==
FIELD	597:31	597:31	11	ORIENTATION_TOPLEFT
LEAF_NODE	597:31	597:31	12	ORIENTATION_TOPLEFT
LEAF_NODE	597:51	597:51	10	||
EXPR	598:7	598:31	10	img -> req_orientation == ORIENTATION_LEFTTOP
FIELD	598:7	598:12	11	img -> req_orientation
LEAF_NODE	598:7	598:7	12	img
LEAF_NODE	598:10	598:10	12	->
LEAF_NODE	598:12	598:12	12	req_orientation
EQ_OPERATOR	598:28	598:28	11	==
LEAF_NODE	598:28	598:28	12	==
FIELD	598:31	598:31	11	ORIENTATION_LEFTTOP
LEAF_NODE	598:31	598:31	12	ORIENTATION_LEFTTOP
LEAF_NODE	598:50	598:50	7	)
STATEMENTS	599:4	599:4	7	
JUMP_STATEMENT	599:4	599:26	8	return FLIP_VERTICALLY ;
KEYWORD	599:4	599:4	9	return
LEAF_NODE	599:4	599:4	10	return
DESTINATION	599:11	599:11	9	FLIP_VERTICALLY
EXPR	599:11	599:11	10	FLIP_VERTICALLY
FIELD	599:11	599:11	11	FLIP_VERTICALLY
LEAF_NODE	599:11	599:11	12	FLIP_VERTICALLY
LEAF_NODE	599:26	599:26	9	;
SELECTION	600:3	600:8	6	
KEYWORD	600:3	600:3	7	else
LEAF_NODE	600:3	600:3	8	else
STATEMENTS	600:8	600:8	7	
SELECTION	600:8	602:4	8	
KEYWORD	600:8	600:8	9	if
LEAF_NODE	600:8	600:8	10	if
LEAF_NODE	600:11	600:11	9	(
CONDITION	600:12	600:12	9	img -> req_orientation == ORIENTATION_TOPRIGHT || img -> req_orientation == ORIENTATION_RIGHTTOP
EXPR	600:12	600:12	10	img -> req_orientation == ORIENTATION_TOPRIGHT || img -> req_orientation == ORIENTATION_RIGHTTOP
OR	600:12	601:7	11	img -> req_orientation == ORIENTATION_TOPRIGHT || img -> req_orientation == ORIENTATION_RIGHTTOP
EXPR	600:12	600:36	12	img -> req_orientation == ORIENTATION_TOPRIGHT
FIELD	600:12	600:17	13	img -> req_orientation
LEAF_NODE	600:12	600:12	14	img
LEAF_NODE	600:15	600:15	14	->
LEAF_NODE	600:17	600:17	14	req_orientation
EQ_OPERATOR	600:33	600:33	13	==
LEAF_NODE	600:33	600:33	14	==
FIELD	600:36	600:36	13	ORIENTATION_TOPRIGHT
LEAF_NODE	600:36	600:36	14	ORIENTATION_TOPRIGHT
LEAF_NODE	600:57	600:57	12	||
EXPR	601:7	601:31	12	img -> req_orientation == ORIENTATION_RIGHTTOP
FIELD	601:7	601:12	13	img -> req_orientation
LEAF_NODE	601:7	601:7	14	img
LEAF_NODE	601:10	601:10	14	->
LEAF_NODE	601:12	601:12	14	req_orientation
EQ_OPERATOR	601:28	601:28	13	==
LEAF_NODE	601:28	601:28	14	==
FIELD	601:31	601:31	13	ORIENTATION_RIGHTTOP
LEAF_NODE	601:31	601:31	14	ORIENTATION_RIGHTTOP
LEAF_NODE	601:51	601:51	9	)
STATEMENTS	602:4	602:4	9	
JUMP_STATEMENT	602:4	602:46	10	return FLIP_HORIZONTALLY | FLIP_VERTICALLY ;
KEYWORD	602:4	602:4	11	return
LEAF_NODE	602:4	602:4	12	return
DESTINATION	602:11	602:11	11	FLIP_HORIZONTALLY | FLIP_VERTICALLY
EXPR	602:11	602:11	12	FLIP_HORIZONTALLY | FLIP_VERTICALLY
BIT_OR	602:11	602:31	13	FLIP_HORIZONTALLY | FLIP_VERTICALLY
BIT_OR_ELEM	602:11	602:11	14	FLIP_HORIZONTALLY
FIELD	602:11	602:11	15	FLIP_HORIZONTALLY
LEAF_NODE	602:11	602:11	16	FLIP_HORIZONTALLY
LEAF_NODE	602:29	602:29	14	|
BIT_OR_ELEM	602:31	602:31	14	FLIP_VERTICALLY
FIELD	602:31	602:31	15	FLIP_VERTICALLY
LEAF_NODE	602:31	602:31	16	FLIP_VERTICALLY
LEAF_NODE	602:46	602:46	11	;
SELECTION	603:3	603:8	6	
KEYWORD	603:3	603:3	7	else
LEAF_NODE	603:3	603:3	8	else
STATEMENTS	603:8	603:8	7	
SELECTION	603:8	605:4	8	
KEYWORD	603:8	603:8	9	if
LEAF_NODE	603:8	603:8	10	if
LEAF_NODE	603:11	603:11	9	(
CONDITION	603:12	603:12	9	img -> req_orientation == ORIENTATION_BOTRIGHT || img -> req_orientation == ORIENTATION_RIGHTBOT
EXPR	603:12	603:12	10	img -> req_orientation == ORIENTATION_BOTRIGHT || img -> req_orientation == ORIENTATION_RIGHTBOT
OR	603:12	604:7	11	img -> req_orientation == ORIENTATION_BOTRIGHT || img -> req_orientation == ORIENTATION_RIGHTBOT
EXPR	603:12	603:36	12	img -> req_orientation == ORIENTATION_BOTRIGHT
FIELD	603:12	603:17	13	img -> req_orientation
LEAF_NODE	603:12	603:12	14	img
LEAF_NODE	603:15	603:15	14	->
LEAF_NODE	603:17	603:17	14	req_orientation
EQ_OPERATOR	603:33	603:33	13	==
LEAF_NODE	603:33	603:33	14	==
FIELD	603:36	603:36	13	ORIENTATION_BOTRIGHT
LEAF_NODE	603:36	603:36	14	ORIENTATION_BOTRIGHT
LEAF_NODE	603:57	603:57	12	||
EXPR	604:7	604:31	12	img -> req_orientation == ORIENTATION_RIGHTBOT
FIELD	604:7	604:12	13	img -> req_orientation
LEAF_NODE	604:7	604:7	14	img
LEAF_NODE	604:10	604:10	14	->
LEAF_NODE	604:12	604:12	14	req_orientation
EQ_OPERATOR	604:28	604:28	13	==
LEAF_NODE	604:28	604:28	14	==
FIELD	604:31	604:31	13	ORIENTATION_RIGHTBOT
LEAF_NODE	604:31	604:31	14	ORIENTATION_RIGHTBOT
LEAF_NODE	604:51	604:51	9	)
STATEMENTS	605:4	605:4	9	
JUMP_STATEMENT	605:4	605:28	10	return FLIP_HORIZONTALLY ;
KEYWORD	605:4	605:4	11	return
LEAF_NODE	605:4	605:4	12	return
DESTINATION	605:11	605:11	11	FLIP_HORIZONTALLY
EXPR	605:11	605:11	12	FLIP_HORIZONTALLY
FIELD	605:11	605:11	13	FLIP_HORIZONTALLY
LEAF_NODE	605:11	605:11	14	FLIP_HORIZONTALLY
LEAF_NODE	605:28	605:28	11	;
SELECTION	606:3	607:4	6	
KEYWORD	606:3	606:3	7	else
LEAF_NODE	606:3	606:3	8	else
STATEMENTS	607:4	607:4	7	
JUMP_STATEMENT	607:4	607:12	8	return 0 ;
KEYWORD	607:4	607:4	9	return
LEAF_NODE	607:4	607:4	10	return
DESTINATION	607:11	607:11	9	0
EXPR	607:11	607:11	10	0
FIELD	607:11	607:11	11	0
LEAF_NODE	607:11	607:11	12	0
LEAF_NODE	607:12	607:12	9	;
LABEL	608:2	608:9	6	default :
LEAF_NODE	608:2	608:2	7	default
LEAF_NODE	608:9	608:9	7	:
JUMP_STATEMENT	609:3	609:11	6	return 0 ;
KEYWORD	609:3	609:3	7	return
LEAF_NODE	609:3	609:3	8	return
DESTINATION	609:10	609:10	7	0
EXPR	609:10	609:10	8	0
FIELD	609:10	609:10	9	0
LEAF_NODE	609:10	609:10	10	0
LEAF_NODE	609:11	609:11	7	;
LEAF_NODE	610:1	610:1	5	}
LEAF_NODE	611:0	611:0	2	}
FUNCTION_DEF	619:0	724:0	1	
RETURN_TYPE	619:0	619:7	2	static int
LEAF_NODE	619:0	619:0	3	static
TYPE_NAME	619:7	619:7	3	int
LEAF_NODE	619:7	619:7	4	int
FUNCTION_NAME	620:0	620:0	2	gtTileContig
LEAF_NODE	620:0	620:0	3	gtTileContig
PARAMETER_LIST	620:12	620:67	2	( TIFFRGBAImage * img , uint32 * raster , uint32 w , uint32 h )
LEAF_NODE	620:12	620:12	3	(
PARAMETER_DECL	620:13	620:28	3	TIFFRGBAImage * img
TYPE	620:13	620:26	4	TIFFRGBAImage *
TYPE_NAME	620:13	620:13	5	TIFFRGBAImage
LEAF_NODE	620:13	620:13	6	TIFFRGBAImage
POINTER	620:26	620:26	5	*
LEAF_NODE	620:26	620:26	6	*
NAME	620:28	620:28	4	img
LEAF_NODE	620:28	620:28	5	img
LEAF_NODE	620:31	620:31	3	,
PARAMETER_DECL	620:33	620:41	3	uint32 * raster
TYPE	620:33	620:39	4	uint32 *
TYPE_NAME	620:33	620:33	5	uint32
LEAF_NODE	620:33	620:33	6	uint32
POINTER	620:39	620:39	5	*
LEAF_NODE	620:39	620:39	6	*
NAME	620:41	620:41	4	raster
LEAF_NODE	620:41	620:41	5	raster
LEAF_NODE	620:47	620:47	3	,
PARAMETER_DECL	620:49	620:56	3	uint32 w
TYPE	620:49	620:49	4	uint32
TYPE_NAME	620:49	620:49	5	uint32
LEAF_NODE	620:49	620:49	6	uint32
NAME	620:56	620:56	4	w
LEAF_NODE	620:56	620:56	5	w
LEAF_NODE	620:57	620:57	3	,
PARAMETER_DECL	620:59	620:66	3	uint32 h
TYPE	620:59	620:59	4	uint32
TYPE_NAME	620:59	620:59	5	uint32
LEAF_NODE	620:59	620:59	6	uint32
NAME	620:66	620:66	4	h
LEAF_NODE	620:66	620:66	5	h
LEAF_NODE	620:67	620:67	3	)
LEAF_NODE	621:0	621:0	2	{
STATEMENTS	622:4	723:16	2	
SIMPLE_DECL	622:4	622:24	3	TIFF * tif ; tif = img -> tif ;
VAR_DECL	622:4	622:10	4	TIFF * tif ; tif = img -> tif
TYPE	622:4	622:8	5	TIFF *
TYPE_NAME	622:4	622:4	6	TIFF
LEAF_NODE	622:4	622:4	7	TIFF
POINTER	622:8	622:8	6	*
LEAF_NODE	622:8	622:8	7	*
NAME	622:10	622:10	5	tif
LEAF_NODE	622:10	622:10	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	622:10	622:10	5	tif = img -> tif
ASSIGN	622:10	622:16	6	tif = img -> tif
LVAL	622:10	622:10	7	tif
NAME	622:10	622:10	8	tif
LEAF_NODE	622:10	622:10	9	tif
ASSIGN_OP	622:14	622:14	7	=
LEAF_NODE	622:14	622:14	8	=
RVAL	622:16	622:16	7	img -> tif
FIELD	622:16	622:21	8	img -> tif
LEAF_NODE	622:16	622:16	9	img
LEAF_NODE	622:19	622:19	9	->
LEAF_NODE	622:21	622:21	9	tif
LEAF_NODE	622:24	622:24	4	;
SIMPLE_DECL	623:4	623:43	3	tileContigRoutine put ; put = img -> put . contig ;
VAR_DECL	623:4	623:22	4	tileContigRoutine put ; put = img -> put . contig
TYPE	623:4	623:4	5	tileContigRoutine
TYPE_NAME	623:4	623:4	6	tileContigRoutine
LEAF_NODE	623:4	623:4	7	tileContigRoutine
NAME	623:22	623:22	5	put
LEAF_NODE	623:22	623:22	6	put
LEAF_NODE	0:0	0:0	5	;
INIT	623:22	623:22	5	put = img -> put . contig
ASSIGN	623:22	623:28	6	put = img -> put . contig
LVAL	623:22	623:22	7	put
NAME	623:22	623:22	8	put
LEAF_NODE	623:22	623:22	9	put
ASSIGN_OP	623:26	623:26	7	=
LEAF_NODE	623:26	623:26	8	=
RVAL	623:28	623:28	7	img -> put . contig
FIELD	623:28	623:37	8	img -> put . contig
LEAF_NODE	623:28	623:28	9	img
LEAF_NODE	623:31	623:31	9	->
LEAF_NODE	623:33	623:33	9	put
LEAF_NODE	623:36	623:36	9	.
LEAF_NODE	623:37	623:37	9	contig
LEAF_NODE	623:43	623:43	4	;
SIMPLE_DECL	624:4	624:34	3	uint32 col , uint32 row , uint32 y , uint32 rowstoread ;
INIT_DECL_LIST	624:4	624:4	4	uint32 col , uint32 row , uint32 y , uint32 rowstoread
VAR_DECL	624:4	624:11	5	uint32 col
TYPE	624:4	624:4	6	uint32
TYPE_NAME	624:4	624:4	7	uint32
LEAF_NODE	624:4	624:4	8	uint32
NAME	624:11	624:11	6	col
LEAF_NODE	624:11	624:11	7	col
LEAF_NODE	624:14	624:14	5	,
INIT_DECL_LIST	624:4	624:4	5	uint32 row , uint32 y , uint32 rowstoread
VAR_DECL	624:4	624:16	6	uint32 row
TYPE	624:4	624:4	7	uint32
TYPE_NAME	624:4	624:4	8	uint32
LEAF_NODE	624:4	624:4	9	uint32
NAME	624:16	624:16	7	row
LEAF_NODE	624:16	624:16	8	row
LEAF_NODE	624:19	624:19	6	,
INIT_DECL_LIST	624:4	624:4	6	uint32 y , uint32 rowstoread
VAR_DECL	624:4	624:21	7	uint32 y
TYPE	624:4	624:4	8	uint32
TYPE_NAME	624:4	624:4	9	uint32
LEAF_NODE	624:4	624:4	10	uint32
NAME	624:21	624:21	8	y
LEAF_NODE	624:21	624:21	9	y
LEAF_NODE	624:22	624:22	7	,
VAR_DECL	624:4	624:24	7	uint32 rowstoread
TYPE	624:4	624:4	8	uint32
TYPE_NAME	624:4	624:4	9	uint32
LEAF_NODE	624:4	624:4	10	uint32
NAME	624:24	624:24	8	rowstoread
LEAF_NODE	624:24	624:24	9	rowstoread
LEAF_NODE	624:34	624:34	4	;
SIMPLE_DECL	625:4	625:16	3	tmsize_t pos ;
VAR_DECL	625:4	625:13	4	tmsize_t pos
TYPE	625:4	625:4	5	tmsize_t
TYPE_NAME	625:4	625:4	6	tmsize_t
LEAF_NODE	625:4	625:4	7	tmsize_t
NAME	625:13	625:13	5	pos
LEAF_NODE	625:13	625:13	6	pos
LEAF_NODE	625:16	625:16	4	;
SIMPLE_DECL	626:4	626:17	3	uint32 tw , uint32 th ;
INIT_DECL_LIST	626:4	626:4	4	uint32 tw , uint32 th
VAR_DECL	626:4	626:11	5	uint32 tw
TYPE	626:4	626:4	6	uint32
TYPE_NAME	626:4	626:4	7	uint32
LEAF_NODE	626:4	626:4	8	uint32
NAME	626:11	626:11	6	tw
LEAF_NODE	626:11	626:11	7	tw
LEAF_NODE	626:13	626:13	5	,
VAR_DECL	626:4	626:15	5	uint32 th
TYPE	626:4	626:4	6	uint32
TYPE_NAME	626:4	626:4	7	uint32
LEAF_NODE	626:4	626:4	8	uint32
NAME	626:15	626:15	6	th
LEAF_NODE	626:15	626:15	7	th
LEAF_NODE	626:17	626:17	4	;
SIMPLE_DECL	627:4	627:29	3	unsigned char * buf ; buf = NULL ;
VAR_DECL	627:4	627:19	4	unsigned char * buf ; buf = NULL
TYPE	627:4	627:17	5	unsigned char *
TYPE_NAME	627:4	627:13	6	unsigned char
LEAF_NODE	627:4	627:4	7	unsigned
LEAF_NODE	627:13	627:13	7	char
POINTER	627:17	627:17	6	*
LEAF_NODE	627:17	627:17	7	*
NAME	627:19	627:19	5	buf
LEAF_NODE	627:19	627:19	6	buf
LEAF_NODE	0:0	0:0	5	;
INIT	627:19	627:19	5	buf = NULL
ASSIGN	627:19	627:25	6	buf = NULL
LVAL	627:19	627:19	7	buf
NAME	627:19	627:19	8	buf
LEAF_NODE	627:19	627:19	9	buf
ASSIGN_OP	627:23	627:23	7	=
LEAF_NODE	627:23	627:23	8	=
RVAL	627:25	627:25	7	NULL
FIELD	627:25	627:25	8	NULL
LEAF_NODE	627:25	627:25	9	NULL
LEAF_NODE	627:29	627:29	4	;
SIMPLE_DECL	628:4	628:26	3	int32 fromskew , int32 toskew ;
INIT_DECL_LIST	628:4	628:4	4	int32 fromskew , int32 toskew
VAR_DECL	628:4	628:10	5	int32 fromskew
TYPE	628:4	628:4	6	int32
TYPE_NAME	628:4	628:4	7	int32
LEAF_NODE	628:4	628:4	8	int32
NAME	628:10	628:10	6	fromskew
LEAF_NODE	628:10	628:10	7	fromskew
LEAF_NODE	628:18	628:18	5	,
VAR_DECL	628:4	628:20	5	int32 toskew
TYPE	628:4	628:4	6	int32
TYPE_NAME	628:4	628:4	7	int32
LEAF_NODE	628:4	628:4	8	int32
NAME	628:20	628:20	6	toskew
LEAF_NODE	628:20	628:20	7	toskew
LEAF_NODE	628:26	628:26	4	;
SIMPLE_DECL	629:4	629:15	3	uint32 nrow ;
VAR_DECL	629:4	629:11	4	uint32 nrow
TYPE	629:4	629:4	5	uint32
TYPE_NAME	629:4	629:4	6	uint32
LEAF_NODE	629:4	629:4	7	uint32
NAME	629:11	629:11	5	nrow
LEAF_NODE	629:11	629:11	6	nrow
LEAF_NODE	629:15	629:15	4	;
SIMPLE_DECL	630:4	630:21	3	int ret ; ret = 1 , int flip ;
INIT_DECL_LIST	630:4	630:4	4	int ret ; ret = 1 , int flip
VAR_DECL	630:4	630:8	5	int ret ; ret = 1
TYPE	630:4	630:4	6	int
TYPE_NAME	630:4	630:4	7	int
LEAF_NODE	630:4	630:4	8	int
NAME	630:8	630:8	6	ret
LEAF_NODE	630:8	630:8	7	ret
LEAF_NODE	0:0	0:0	6	;
INIT	630:8	630:8	6	ret = 1
ASSIGN	630:8	630:14	7	ret = 1
LVAL	630:8	630:8	8	ret
NAME	630:8	630:8	9	ret
LEAF_NODE	630:8	630:8	10	ret
ASSIGN_OP	630:12	630:12	8	=
LEAF_NODE	630:12	630:12	9	=
RVAL	630:14	630:14	8	1
FIELD	630:14	630:14	9	1
LEAF_NODE	630:14	630:14	10	1
LEAF_NODE	630:15	630:15	5	,
VAR_DECL	630:4	630:17	5	int flip
TYPE	630:4	630:4	6	int
TYPE_NAME	630:4	630:4	7	int
LEAF_NODE	630:4	630:4	8	int
NAME	630:17	630:17	6	flip
LEAF_NODE	630:17	630:17	7	flip
LEAF_NODE	630:21	630:21	4	;
SIMPLE_DECL	631:4	631:25	3	uint32 this_tw , uint32 tocol ;
INIT_DECL_LIST	631:4	631:4	4	uint32 this_tw , uint32 tocol
VAR_DECL	631:4	631:11	5	uint32 this_tw
TYPE	631:4	631:4	6	uint32
TYPE_NAME	631:4	631:4	7	uint32
LEAF_NODE	631:4	631:4	8	uint32
NAME	631:11	631:11	6	this_tw
LEAF_NODE	631:11	631:11	7	this_tw
LEAF_NODE	631:18	631:18	5	,
VAR_DECL	631:4	631:20	5	uint32 tocol
TYPE	631:4	631:4	6	uint32
TYPE_NAME	631:4	631:4	7	uint32
LEAF_NODE	631:4	631:4	8	uint32
NAME	631:20	631:20	6	tocol
LEAF_NODE	631:20	631:20	7	tocol
LEAF_NODE	631:25	631:25	4	;
SIMPLE_DECL	632:4	632:38	3	int32 this_toskew , int32 leftmost_toskew ;
INIT_DECL_LIST	632:4	632:4	4	int32 this_toskew , int32 leftmost_toskew
VAR_DECL	632:4	632:10	5	int32 this_toskew
TYPE	632:4	632:4	6	int32
TYPE_NAME	632:4	632:4	7	int32
LEAF_NODE	632:4	632:4	8	int32
NAME	632:10	632:10	6	this_toskew
LEAF_NODE	632:10	632:10	7	this_toskew
LEAF_NODE	632:21	632:21	5	,
VAR_DECL	632:4	632:23	5	int32 leftmost_toskew
TYPE	632:4	632:4	6	int32
TYPE_NAME	632:4	632:4	7	int32
LEAF_NODE	632:4	632:4	8	int32
NAME	632:23	632:23	6	leftmost_toskew
LEAF_NODE	632:23	632:23	7	leftmost_toskew
LEAF_NODE	632:38	632:38	4	;
SIMPLE_DECL	633:4	633:27	3	int32 leftmost_fromskew ;
VAR_DECL	633:4	633:10	4	int32 leftmost_fromskew
TYPE	633:4	633:4	5	int32
TYPE_NAME	633:4	633:4	6	int32
LEAF_NODE	633:4	633:4	7	int32
NAME	633:10	633:10	5	leftmost_fromskew
LEAF_NODE	633:10	633:10	6	leftmost_fromskew
LEAF_NODE	633:27	633:27	4	;
SIMPLE_DECL	634:4	634:22	3	uint32 leftmost_tw ;
VAR_DECL	634:4	634:11	4	uint32 leftmost_tw
TYPE	634:4	634:4	5	uint32
TYPE_NAME	634:4	634:4	6	uint32
LEAF_NODE	634:4	634:4	7	uint32
NAME	634:11	634:11	5	leftmost_tw
LEAF_NODE	634:11	634:11	6	leftmost_tw
LEAF_NODE	634:22	634:22	4	;
SIMPLE_DECL	635:4	635:20	3	tmsize_t bufsize ;
VAR_DECL	635:4	635:13	4	tmsize_t bufsize
TYPE	635:4	635:4	5	tmsize_t
TYPE_NAME	635:4	635:4	6	tmsize_t
LEAF_NODE	635:4	635:4	7	tmsize_t
NAME	635:13	635:13	5	bufsize
LEAF_NODE	635:13	635:13	6	bufsize
LEAF_NODE	635:20	635:20	4	;
EXPR_STATEMENT	637:4	637:31	3	bufsize = TIFFTileSize ( tif ) ;
EXPR	637:4	637:4	4	bufsize = TIFFTileSize ( tif )
ASSIGN	637:4	637:14	5	bufsize = TIFFTileSize ( tif )
LVAL	637:4	637:4	6	bufsize
FIELD	637:4	637:4	7	bufsize
LEAF_NODE	637:4	637:4	8	bufsize
ASSIGN_OP	637:12	637:12	6	=
LEAF_NODE	637:12	637:12	7	=
RVAL	637:14	637:14	6	TIFFTileSize ( tif )
FUNCTION_CALL	637:14	637:30	7	TIFFTileSize ( tif )
CALLEE	637:14	637:14	8	TIFFTileSize
LEAF_NODE	637:14	637:14	9	TIFFTileSize
LEAF_NODE	637:26	637:26	8	(
ARGUMENT	637:27	637:27	8	tif
FIELD	637:27	637:27	9	tif
LEAF_NODE	637:27	637:27	10	tif
LEAF_NODE	637:30	637:30	8	)
LEAF_NODE	637:31	637:31	4	;
SELECTION	638:4	638:22	3	
KEYWORD	638:4	638:4	4	if
LEAF_NODE	638:4	638:4	5	if
LEAF_NODE	638:7	638:7	4	(
CONDITION	638:8	638:8	4	bufsize == 0
EXPR	638:8	638:19	5	bufsize == 0
FIELD	638:8	638:8	6	bufsize
LEAF_NODE	638:8	638:8	7	bufsize
EQ_OPERATOR	638:16	638:16	6	==
LEAF_NODE	638:16	638:16	7	==
FIELD	638:19	638:19	6	0
LEAF_NODE	638:19	638:19	7	0
LEAF_NODE	638:20	638:20	4	)
STATEMENTS	638:22	641:4	4	
LEAF_NODE	638:22	638:22	5	{
STATEMENTS	639:8	640:8	5	
EXPR_STATEMENT	639:8	639:94	6	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , "No space for tile buffer" ) ;
EXPR	639:8	639:8	7	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , "No space for tile buffer" )
FUNCTION_CALL	639:8	639:93	8	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , "No space for tile buffer" )
CALLEE	639:8	639:8	9	TIFFErrorExt
LEAF_NODE	639:8	639:8	10	TIFFErrorExt
LEAF_NODE	639:20	639:20	9	(
ARGUMENT	639:21	639:21	9	tif -> tif_clientdata
FIELD	639:21	639:26	10	tif -> tif_clientdata
LEAF_NODE	639:21	639:21	11	tif
LEAF_NODE	639:24	639:24	11	->
LEAF_NODE	639:26	639:26	11	tif_clientdata
LEAF_NODE	639:40	639:40	9	,
ARGUMENT	639:42	639:42	9	TIFFFileName ( tif )
FUNCTION_CALL	639:42	639:58	10	TIFFFileName ( tif )
CALLEE	639:42	639:42	11	TIFFFileName
LEAF_NODE	639:42	639:42	12	TIFFFileName
LEAF_NODE	639:54	639:54	11	(
ARGUMENT	639:55	639:55	11	tif
FIELD	639:55	639:55	12	tif
LEAF_NODE	639:55	639:55	13	tif
LEAF_NODE	639:58	639:58	11	)
LEAF_NODE	639:59	639:59	9	,
ARGUMENT	639:61	639:61	9	"%s"
FIELD	639:61	639:61	10	"%s"
LEAF_NODE	639:61	639:61	11	"%s"
LEAF_NODE	639:65	639:65	9	,
ARGUMENT	639:67	639:67	9	"No space for tile buffer"
FIELD	639:67	639:67	10	"No space for tile buffer"
LEAF_NODE	639:67	639:67	11	"No space for tile buffer"
LEAF_NODE	639:93	639:93	9	)
LEAF_NODE	639:94	639:94	7	;
JUMP_STATEMENT	640:8	640:18	6	return ( 0 ) ;
KEYWORD	640:8	640:8	7	return
LEAF_NODE	640:8	640:8	8	return
DESTINATION	640:15	640:15	7	( 0 )
EXPR	640:15	640:17	8	( 0 )
LEAF_NODE	640:15	640:15	9	(
FIELD	640:16	640:16	9	0
LEAF_NODE	640:16	640:16	10	0
LEAF_NODE	640:17	640:17	9	)
LEAF_NODE	640:18	640:18	7	;
LEAF_NODE	641:4	641:4	5	}
EXPR_STATEMENT	643:4	643:45	3	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	643:4	643:4	4	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
FUNCTION_CALL	643:4	643:44	5	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
CALLEE	643:4	643:4	6	TIFFGetField
LEAF_NODE	643:4	643:4	7	TIFFGetField
LEAF_NODE	643:16	643:16	6	(
ARGUMENT	643:17	643:17	6	tif
FIELD	643:17	643:17	7	tif
LEAF_NODE	643:17	643:17	8	tif
LEAF_NODE	643:20	643:20	6	,
ARGUMENT	643:22	643:22	6	TIFFTAG_TILEWIDTH
FIELD	643:22	643:22	7	TIFFTAG_TILEWIDTH
LEAF_NODE	643:22	643:22	8	TIFFTAG_TILEWIDTH
LEAF_NODE	643:39	643:39	6	,
ARGUMENT	643:41	643:41	6	& tw
UNARY_EXPR	643:41	643:42	7	& tw
UNARY_OPERATOR	643:41	643:41	8	&
LEAF_NODE	643:41	643:41	9	&
FIELD	643:42	643:42	8	tw
LEAF_NODE	643:42	643:42	9	tw
LEAF_NODE	643:44	643:44	6	)
LEAF_NODE	643:45	643:45	4	;
EXPR_STATEMENT	644:4	644:46	3	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th ) ;
EXPR	644:4	644:4	4	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
FUNCTION_CALL	644:4	644:45	5	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
CALLEE	644:4	644:4	6	TIFFGetField
LEAF_NODE	644:4	644:4	7	TIFFGetField
LEAF_NODE	644:16	644:16	6	(
ARGUMENT	644:17	644:17	6	tif
FIELD	644:17	644:17	7	tif
LEAF_NODE	644:17	644:17	8	tif
LEAF_NODE	644:20	644:20	6	,
ARGUMENT	644:22	644:22	6	TIFFTAG_TILELENGTH
FIELD	644:22	644:22	7	TIFFTAG_TILELENGTH
LEAF_NODE	644:22	644:22	8	TIFFTAG_TILELENGTH
LEAF_NODE	644:40	644:40	6	,
ARGUMENT	644:42	644:42	6	& th
UNARY_EXPR	644:42	644:43	7	& th
UNARY_OPERATOR	644:42	644:42	8	&
LEAF_NODE	644:42	644:42	9	&
FIELD	644:43	644:43	8	th
LEAF_NODE	644:43	644:43	9	th
LEAF_NODE	644:45	644:45	6	)
LEAF_NODE	644:46	644:46	4	;
EXPR_STATEMENT	646:4	646:30	3	flip = setorientation ( img ) ;
EXPR	646:4	646:4	4	flip = setorientation ( img )
ASSIGN	646:4	646:11	5	flip = setorientation ( img )
LVAL	646:4	646:4	6	flip
FIELD	646:4	646:4	7	flip
LEAF_NODE	646:4	646:4	8	flip
ASSIGN_OP	646:9	646:9	6	=
LEAF_NODE	646:9	646:9	7	=
RVAL	646:11	646:11	6	setorientation ( img )
FUNCTION_CALL	646:11	646:29	7	setorientation ( img )
CALLEE	646:11	646:11	8	setorientation
LEAF_NODE	646:11	646:11	9	setorientation
LEAF_NODE	646:25	646:25	8	(
ARGUMENT	646:26	646:26	8	img
FIELD	646:26	646:26	9	img
LEAF_NODE	646:26	646:26	10	img
LEAF_NODE	646:29	646:29	8	)
LEAF_NODE	646:30	646:30	4	;
SELECTION	647:4	647:32	3	
KEYWORD	647:4	647:4	4	if
LEAF_NODE	647:4	647:4	5	if
LEAF_NODE	647:7	647:7	4	(
CONDITION	647:8	647:8	4	flip & FLIP_VERTICALLY
EXPR	647:8	647:15	5	flip & FLIP_VERTICALLY
FIELD	647:8	647:8	6	flip
LEAF_NODE	647:8	647:8	7	flip
LEAF_NODE	647:13	647:13	6	&
FIELD	647:15	647:15	6	FLIP_VERTICALLY
LEAF_NODE	647:15	647:15	7	FLIP_VERTICALLY
LEAF_NODE	647:30	647:30	4	)
STATEMENTS	647:32	650:4	4	
LEAF_NODE	647:32	647:32	5	{
STATEMENTS	648:5	649:5	5	
EXPR_STATEMENT	648:5	648:14	6	y = h - 1 ;
EXPR	648:5	648:5	7	y = h - 1
ASSIGN	648:5	648:9	8	y = h - 1
LVAL	648:5	648:5	9	y
FIELD	648:5	648:5	10	y
LEAF_NODE	648:5	648:5	11	y
ASSIGN_OP	648:7	648:7	9	=
LEAF_NODE	648:7	648:7	10	=
RVAL	648:9	648:13	9	h - 1
FIELD	648:9	648:9	10	h
LEAF_NODE	648:9	648:9	11	h
LEAF_NODE	648:11	648:11	10	-
FIELD	648:13	648:13	10	1
LEAF_NODE	648:13	648:13	11	1
LEAF_NODE	648:14	648:14	7	;
EXPR_STATEMENT	649:5	649:30	6	toskew = - ( int32 ) ( tw + w ) ;
EXPR	649:5	649:5	7	toskew = - ( int32 ) ( tw + w )
ASSIGN	649:5	649:14	8	toskew = - ( int32 ) ( tw + w )
LVAL	649:5	649:5	9	toskew
FIELD	649:5	649:5	10	toskew
LEAF_NODE	649:5	649:5	11	toskew
ASSIGN_OP	649:12	649:12	9	=
LEAF_NODE	649:12	649:12	10	=
RVAL	649:14	649:14	9	- ( int32 ) ( tw + w )
UNARY_EXPR	649:14	649:15	10	- ( int32 ) ( tw + w )
UNARY_OPERATOR	649:14	649:14	11	-
LEAF_NODE	649:14	649:14	12	-
FUNCTION_CALL	649:15	649:29	11	( int32 ) ( tw + w )
CALLEE	649:15	649:21	12	( int32 )
LEAF_NODE	649:15	649:15	13	(
FIELD	649:16	649:16	13	int32
LEAF_NODE	649:16	649:16	14	int32
LEAF_NODE	649:21	649:21	13	)
LEAF_NODE	649:22	649:22	12	(
ARGUMENT	649:23	649:28	12	tw + w
FIELD	649:23	649:23	13	tw
LEAF_NODE	649:23	649:23	14	tw
LEAF_NODE	649:26	649:26	13	+
FIELD	649:28	649:28	13	w
LEAF_NODE	649:28	649:28	14	w
LEAF_NODE	649:29	649:29	12	)
LEAF_NODE	649:30	649:30	7	;
LEAF_NODE	650:4	650:4	5	}
SELECTION	651:4	651:9	3	
KEYWORD	651:4	651:4	4	else
LEAF_NODE	651:4	651:4	5	else
STATEMENTS	651:9	654:4	4	
LEAF_NODE	651:9	651:9	5	{
STATEMENTS	652:5	653:5	5	
EXPR_STATEMENT	652:5	652:10	6	y = 0 ;
EXPR	652:5	652:5	7	y = 0
ASSIGN	652:5	652:9	8	y = 0
LVAL	652:5	652:5	9	y
FIELD	652:5	652:5	10	y
LEAF_NODE	652:5	652:5	11	y
ASSIGN_OP	652:7	652:7	9	=
LEAF_NODE	652:7	652:7	10	=
RVAL	652:9	652:9	9	0
FIELD	652:9	652:9	10	0
LEAF_NODE	652:9	652:9	11	0
LEAF_NODE	652:10	652:10	7	;
EXPR_STATEMENT	653:5	653:30	6	toskew = - ( int32 ) ( tw - w ) ;
EXPR	653:5	653:5	7	toskew = - ( int32 ) ( tw - w )
ASSIGN	653:5	653:14	8	toskew = - ( int32 ) ( tw - w )
LVAL	653:5	653:5	9	toskew
FIELD	653:5	653:5	10	toskew
LEAF_NODE	653:5	653:5	11	toskew
ASSIGN_OP	653:12	653:12	9	=
LEAF_NODE	653:12	653:12	10	=
RVAL	653:14	653:14	9	- ( int32 ) ( tw - w )
UNARY_EXPR	653:14	653:15	10	- ( int32 ) ( tw - w )
UNARY_OPERATOR	653:14	653:14	11	-
LEAF_NODE	653:14	653:14	12	-
FUNCTION_CALL	653:15	653:29	11	( int32 ) ( tw - w )
CALLEE	653:15	653:21	12	( int32 )
LEAF_NODE	653:15	653:15	13	(
FIELD	653:16	653:16	13	int32
LEAF_NODE	653:16	653:16	14	int32
LEAF_NODE	653:21	653:21	13	)
LEAF_NODE	653:22	653:22	12	(
ARGUMENT	653:23	653:28	12	tw - w
FIELD	653:23	653:23	13	tw
LEAF_NODE	653:23	653:23	14	tw
LEAF_NODE	653:26	653:26	13	-
FIELD	653:28	653:28	13	w
LEAF_NODE	653:28	653:28	14	w
LEAF_NODE	653:29	653:29	12	)
LEAF_NODE	653:30	653:30	7	;
LEAF_NODE	654:4	654:4	5	}
EXPR_STATEMENT	659:4	659:44	3	leftmost_fromskew = img -> col_offset % tw ;
EXPR	659:4	659:4	4	leftmost_fromskew = img -> col_offset % tw
ASSIGN	659:4	659:24	5	leftmost_fromskew = img -> col_offset % tw
LVAL	659:4	659:4	6	leftmost_fromskew
FIELD	659:4	659:4	7	leftmost_fromskew
LEAF_NODE	659:4	659:4	8	leftmost_fromskew
ASSIGN_OP	659:22	659:22	6	=
LEAF_NODE	659:22	659:22	7	=
RVAL	659:24	659:42	6	img -> col_offset % tw
FIELD	659:24	659:29	7	img -> col_offset
LEAF_NODE	659:24	659:24	8	img
LEAF_NODE	659:27	659:27	8	->
LEAF_NODE	659:29	659:29	8	col_offset
LEAF_NODE	659:40	659:40	7	%
FIELD	659:42	659:42	7	tw
LEAF_NODE	659:42	659:42	8	tw
LEAF_NODE	659:44	659:44	4	;
EXPR_STATEMENT	660:4	660:40	3	leftmost_tw = tw - leftmost_fromskew ;
EXPR	660:4	660:4	4	leftmost_tw = tw - leftmost_fromskew
ASSIGN	660:4	660:18	5	leftmost_tw = tw - leftmost_fromskew
LVAL	660:4	660:4	6	leftmost_tw
FIELD	660:4	660:4	7	leftmost_tw
LEAF_NODE	660:4	660:4	8	leftmost_tw
ASSIGN_OP	660:16	660:16	6	=
LEAF_NODE	660:16	660:16	7	=
RVAL	660:18	660:23	6	tw - leftmost_fromskew
FIELD	660:18	660:18	7	tw
LEAF_NODE	660:18	660:18	8	tw
LEAF_NODE	660:21	660:21	7	-
FIELD	660:23	660:23	7	leftmost_fromskew
LEAF_NODE	660:23	660:23	8	leftmost_fromskew
LEAF_NODE	660:40	660:40	4	;
EXPR_STATEMENT	661:4	661:48	3	leftmost_toskew = toskew + leftmost_fromskew ;
EXPR	661:4	661:4	4	leftmost_toskew = toskew + leftmost_fromskew
ASSIGN	661:4	661:22	5	leftmost_toskew = toskew + leftmost_fromskew
LVAL	661:4	661:4	6	leftmost_toskew
FIELD	661:4	661:4	7	leftmost_toskew
LEAF_NODE	661:4	661:4	8	leftmost_toskew
ASSIGN_OP	661:20	661:20	6	=
LEAF_NODE	661:20	661:20	7	=
RVAL	661:22	661:31	6	toskew + leftmost_fromskew
FIELD	661:22	661:22	7	toskew
LEAF_NODE	661:22	661:22	8	toskew
LEAF_NODE	661:29	661:29	7	+
FIELD	661:31	661:31	7	leftmost_fromskew
LEAF_NODE	661:31	661:31	8	leftmost_fromskew
LEAF_NODE	661:48	661:48	4	;
ITERATION	662:4	663:4	3	
KEYWORD	662:4	662:4	4	for
LEAF_NODE	662:4	662:4	5	for
LEAF_NODE	662:8	662:8	4	(
FOR_INIT	662:9	662:16	4	row = 0 ;
EXPR	662:9	662:9	5	row = 0
ASSIGN	662:9	662:15	6	row = 0
LVAL	662:9	662:9	7	row
FIELD	662:9	662:9	8	row
LEAF_NODE	662:9	662:9	9	row
ASSIGN_OP	662:13	662:13	7	=
LEAF_NODE	662:13	662:13	8	=
RVAL	662:15	662:15	7	0
FIELD	662:15	662:15	8	0
LEAF_NODE	662:15	662:15	9	0
LEAF_NODE	662:16	662:16	5	;
CONDITION	662:18	662:18	4	ret != 0 && row < h
EXPR	662:18	662:18	5	ret != 0 && row < h
AND	662:18	662:30	6	ret != 0 && row < h
EXPR	662:18	662:25	7	ret != 0
FIELD	662:18	662:18	8	ret
LEAF_NODE	662:18	662:18	9	ret
EQ_OPERATOR	662:22	662:22	8	!=
LEAF_NODE	662:22	662:22	9	!=
FIELD	662:25	662:25	8	0
LEAF_NODE	662:25	662:25	9	0
LEAF_NODE	662:27	662:27	7	&&
EXPR	662:30	662:36	7	row < h
FIELD	662:30	662:30	8	row
LEAF_NODE	662:30	662:30	9	row
REL_OPERATOR	662:34	662:34	8	<
LEAF_NODE	662:34	662:34	9	<
FIELD	662:36	662:36	8	h
LEAF_NODE	662:36	662:36	9	h
LEAF_NODE	662:37	662:37	4	;
FOR_EXPR	662:39	662:39	4	row += nrow
EXPR	662:39	662:39	5	row += nrow
ASSIGN	662:39	662:46	6	row += nrow
LVAL	662:39	662:39	7	row
FIELD	662:39	662:39	8	row
LEAF_NODE	662:39	662:39	9	row
ASSIGN_OP	662:43	662:43	7	+=
LEAF_NODE	662:43	662:43	8	+=
RVAL	662:46	662:46	7	nrow
FIELD	662:46	662:46	8	nrow
LEAF_NODE	662:46	662:46	9	nrow
LEAF_NODE	662:50	662:50	4	)
STATEMENTS	663:4	703:4	4	
LEAF_NODE	663:4	663:4	5	{
STATEMENTS	664:8	702:70	5	
EXPR_STATEMENT	664:8	664:54	6	rowstoread = th - ( row + img -> row_offset ) % th ;
EXPR	664:8	664:8	7	rowstoread = th - ( row + img -> row_offset ) % th
ASSIGN	664:8	664:21	8	rowstoread = th - ( row + img -> row_offset ) % th
LVAL	664:8	664:8	9	rowstoread
FIELD	664:8	664:8	10	rowstoread
LEAF_NODE	664:8	664:8	11	rowstoread
ASSIGN_OP	664:19	664:19	9	=
LEAF_NODE	664:19	664:19	10	=
RVAL	664:21	664:52	9	th - ( row + img -> row_offset ) % th
FIELD	664:21	664:21	10	th
LEAF_NODE	664:21	664:21	11	th
LEAF_NODE	664:24	664:24	10	-
LEAF_NODE	664:26	664:26	10	(
FIELD	664:27	664:27	10	row
LEAF_NODE	664:27	664:27	11	row
LEAF_NODE	664:31	664:31	10	+
FIELD	664:33	664:38	10	img -> row_offset
LEAF_NODE	664:33	664:33	11	img
LEAF_NODE	664:36	664:36	11	->
LEAF_NODE	664:38	664:38	11	row_offset
LEAF_NODE	664:48	664:48	10	)
LEAF_NODE	664:50	664:50	10	%
FIELD	664:52	664:52	10	th
LEAF_NODE	664:52	664:52	11	th
LEAF_NODE	664:54	664:54	7	;
EXPR_STATEMENT	665:5	665:57	6	nrow = ( row + rowstoread > h ? h - row : rowstoread ) ;
EXPR	665:5	665:5	7	nrow = ( row + rowstoread > h ? h - row : rowstoread )
ASSIGN	665:5	665:12	8	nrow = ( row + rowstoread > h ? h - row : rowstoread )
LVAL	665:5	665:5	9	nrow
FIELD	665:5	665:5	10	nrow
LEAF_NODE	665:5	665:5	11	nrow
ASSIGN_OP	665:10	665:10	9	=
LEAF_NODE	665:10	665:10	10	=
RVAL	665:12	665:56	9	( row + rowstoread > h ? h - row : rowstoread )
LEAF_NODE	665:12	665:12	10	(
COND_EXPR	665:13	665:46	10	row + rowstoread > h ? h - row : rowstoread
CONDITION	665:13	665:32	11	row + rowstoread > h
FIELD	665:13	665:13	12	row
LEAF_NODE	665:13	665:13	13	row
LEAF_NODE	665:17	665:17	12	+
FIELD	665:19	665:19	12	rowstoread
LEAF_NODE	665:19	665:19	13	rowstoread
REL_OPERATOR	665:30	665:30	12	>
LEAF_NODE	665:30	665:30	13	>
FIELD	665:32	665:32	12	h
LEAF_NODE	665:32	665:32	13	h
LEAF_NODE	665:34	665:34	11	?
EXPR	665:36	665:40	11	h - row
FIELD	665:36	665:36	12	h
LEAF_NODE	665:36	665:36	13	h
LEAF_NODE	665:38	665:38	12	-
FIELD	665:40	665:40	12	row
LEAF_NODE	665:40	665:40	13	row
LEAF_NODE	665:44	665:44	11	:
FIELD	665:46	665:46	11	rowstoread
LEAF_NODE	665:46	665:46	12	rowstoread
LEAF_NODE	665:56	665:56	10	)
LEAF_NODE	665:57	665:57	7	;
EXPR_STATEMENT	666:1	666:29	6	fromskew = leftmost_fromskew ;
EXPR	666:1	666:1	7	fromskew = leftmost_fromskew
ASSIGN	666:1	666:12	8	fromskew = leftmost_fromskew
LVAL	666:1	666:1	9	fromskew
FIELD	666:1	666:1	10	fromskew
LEAF_NODE	666:1	666:1	11	fromskew
ASSIGN_OP	666:10	666:10	9	=
LEAF_NODE	666:10	666:10	10	=
RVAL	666:12	666:12	9	leftmost_fromskew
FIELD	666:12	666:12	10	leftmost_fromskew
LEAF_NODE	666:12	666:12	11	leftmost_fromskew
LEAF_NODE	666:29	666:29	7	;
EXPR_STATEMENT	667:1	667:22	6	this_tw = leftmost_tw ;
EXPR	667:1	667:1	7	this_tw = leftmost_tw
ASSIGN	667:1	667:11	8	this_tw = leftmost_tw
LVAL	667:1	667:1	9	this_tw
FIELD	667:1	667:1	10	this_tw
LEAF_NODE	667:1	667:1	11	this_tw
ASSIGN_OP	667:9	667:9	9	=
LEAF_NODE	667:9	667:9	10	=
RVAL	667:11	667:11	9	leftmost_tw
FIELD	667:11	667:11	10	leftmost_tw
LEAF_NODE	667:11	667:11	11	leftmost_tw
LEAF_NODE	667:22	667:22	7	;
EXPR_STATEMENT	668:1	668:30	6	this_toskew = leftmost_toskew ;
EXPR	668:1	668:1	7	this_toskew = leftmost_toskew
ASSIGN	668:1	668:15	8	this_toskew = leftmost_toskew
LVAL	668:1	668:1	9	this_toskew
FIELD	668:1	668:1	10	this_toskew
LEAF_NODE	668:1	668:1	11	this_toskew
ASSIGN_OP	668:13	668:13	9	=
LEAF_NODE	668:13	668:13	10	=
RVAL	668:15	668:15	9	leftmost_toskew
FIELD	668:15	668:15	10	leftmost_toskew
LEAF_NODE	668:15	668:15	11	leftmost_toskew
LEAF_NODE	668:30	668:30	7	;
EXPR_STATEMENT	669:1	669:10	6	tocol = 0 ;
EXPR	669:1	669:1	7	tocol = 0
ASSIGN	669:1	669:9	8	tocol = 0
LVAL	669:1	669:1	9	tocol
FIELD	669:1	669:1	10	tocol
LEAF_NODE	669:1	669:1	11	tocol
ASSIGN_OP	669:7	669:7	9	=
LEAF_NODE	669:7	669:7	10	=
RVAL	669:9	669:9	9	0
FIELD	669:9	669:9	10	0
LEAF_NODE	669:9	669:9	11	0
LEAF_NODE	669:10	669:10	7	;
EXPR_STATEMENT	670:1	670:22	6	col = img -> col_offset ;
EXPR	670:1	670:1	7	col = img -> col_offset
ASSIGN	670:1	670:7	8	col = img -> col_offset
LVAL	670:1	670:1	9	col
FIELD	670:1	670:1	10	col
LEAF_NODE	670:1	670:1	11	col
ASSIGN_OP	670:5	670:5	9	=
LEAF_NODE	670:5	670:5	10	=
RVAL	670:7	670:7	9	img -> col_offset
FIELD	670:7	670:12	10	img -> col_offset
LEAF_NODE	670:7	670:7	11	img
LEAF_NODE	670:10	670:10	11	->
LEAF_NODE	670:12	670:12	11	col_offset
LEAF_NODE	670:22	670:22	7	;
ITERATION	671:1	672:8	6	
KEYWORD	671:1	671:1	7	while
LEAF_NODE	671:1	671:1	8	while
LEAF_NODE	671:7	671:7	7	(
CONDITION	671:8	671:8	7	tocol < w
EXPR	671:8	671:16	8	tocol < w
FIELD	671:8	671:8	9	tocol
LEAF_NODE	671:8	671:8	10	tocol
REL_OPERATOR	671:14	671:14	9	<
LEAF_NODE	671:14	671:14	10	<
FIELD	671:16	671:16	9	w
LEAF_NODE	671:16	671:16	10	w
LEAF_NODE	671:17	671:17	7	)
STATEMENTS	672:8	700:1	7	
LEAF_NODE	672:8	672:8	8	{
STATEMENTS	673:5	699:5	8	
SELECTION	673:5	676:12	9	
KEYWORD	673:5	673:5	10	if
LEAF_NODE	673:5	673:5	11	if
LEAF_NODE	673:8	673:8	10	(
CONDITION	673:9	673:9	10	_TIFFReadTileAndAllocBuffer ( tif , ( void * * ) & buf , bufsize , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
EXPR	673:9	673:9	11	_TIFFReadTileAndAllocBuffer ( tif , ( void * * ) & buf , bufsize , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
AND	673:9	675:16	12	_TIFFReadTileAndAllocBuffer ( tif , ( void * * ) & buf , bufsize , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
EXPR	673:9	674:49	13	_TIFFReadTileAndAllocBuffer ( tif , ( void * * ) & buf , bufsize , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	673:9	674:33	14	_TIFFReadTileAndAllocBuffer ( tif , ( void * * ) & buf , bufsize , col , row + img -> row_offset , 0 , 0 )
CALLEE	673:9	673:9	15	_TIFFReadTileAndAllocBuffer
LEAF_NODE	673:9	673:9	16	_TIFFReadTileAndAllocBuffer
LEAF_NODE	673:36	673:36	15	(
ARGUMENT	673:37	673:37	15	tif
FIELD	673:37	673:37	16	tif
LEAF_NODE	673:37	673:37	17	tif
LEAF_NODE	673:40	673:40	15	,
ARGUMENT	673:42	673:51	15	( void * * ) & buf
LEAF_NODE	673:42	673:42	16	(
TYPE_NAME	673:43	673:43	16	void
LEAF_NODE	673:43	673:43	17	void
LEAF_NODE	673:47	673:47	16	*
LEAF_NODE	673:48	673:48	16	*
LEAF_NODE	673:49	673:49	16	)
UNARY_EXPR	673:51	673:52	16	& buf
UNARY_OPERATOR	673:51	673:51	17	&
LEAF_NODE	673:51	673:51	18	&
FIELD	673:52	673:52	17	buf
LEAF_NODE	673:52	673:52	18	buf
LEAF_NODE	673:55	673:55	15	,
ARGUMENT	673:57	673:57	15	bufsize
FIELD	673:57	673:57	16	bufsize
LEAF_NODE	673:57	673:57	17	bufsize
LEAF_NODE	673:64	673:64	15	,
ARGUMENT	673:66	673:66	15	col
FIELD	673:66	673:66	16	col
LEAF_NODE	673:66	673:66	17	col
LEAF_NODE	673:69	673:69	15	,
ARGUMENT	674:8	674:12	15	row + img -> row_offset
FIELD	674:8	674:8	16	row
LEAF_NODE	674:8	674:8	17	row
LEAF_NODE	674:11	674:11	16	+
FIELD	674:12	674:17	16	img -> row_offset
LEAF_NODE	674:12	674:12	17	img
LEAF_NODE	674:15	674:15	17	->
LEAF_NODE	674:17	674:17	17	row_offset
LEAF_NODE	674:27	674:27	15	,
ARGUMENT	674:29	674:29	15	0
FIELD	674:29	674:29	16	0
LEAF_NODE	674:29	674:29	17	0
LEAF_NODE	674:30	674:30	15	,
ARGUMENT	674:32	674:32	15	0
FIELD	674:32	674:32	16	0
LEAF_NODE	674:32	674:32	17	0
LEAF_NODE	674:33	674:33	15	)
EQ_OPERATOR	674:34	674:34	14	==
LEAF_NODE	674:34	674:34	15	==
LEAF_NODE	674:36	674:36	14	(
TYPE_NAME	674:37	674:37	14	tmsize_t
LEAF_NODE	674:37	674:37	15	tmsize_t
LEAF_NODE	674:45	674:45	14	)
LEAF_NODE	674:46	674:46	14	(
UNARY_EXPR	674:47	674:48	14	- 1
UNARY_OPERATOR	674:47	674:47	15	-
LEAF_NODE	674:47	674:47	16	-
FIELD	674:48	674:48	15	1
LEAF_NODE	674:48	674:48	16	1
LEAF_NODE	674:49	674:49	14	)
LEAF_NODE	674:51	674:51	13	&&
EXPR	675:16	675:46	13	( buf == NULL || img -> stoponerr )
LEAF_NODE	675:16	675:16	14	(
OR	675:17	675:32	14	buf == NULL || img -> stoponerr
EXPR	675:17	675:24	15	buf == NULL
FIELD	675:17	675:17	16	buf
LEAF_NODE	675:17	675:17	17	buf
EQ_OPERATOR	675:21	675:21	16	==
LEAF_NODE	675:21	675:21	17	==
FIELD	675:24	675:24	16	NULL
LEAF_NODE	675:24	675:24	17	NULL
LEAF_NODE	675:29	675:29	15	||
EXPR	675:32	675:32	15	img -> stoponerr
FIELD	675:32	675:37	16	img -> stoponerr
LEAF_NODE	675:32	675:32	17	img
LEAF_NODE	675:35	675:35	17	->
LEAF_NODE	675:37	675:37	17	stoponerr
LEAF_NODE	675:46	675:46	14	)
LEAF_NODE	675:47	675:47	10	)
STATEMENTS	676:12	679:12	10	
LEAF_NODE	676:12	676:12	11	{
STATEMENTS	677:16	678:16	11	
EXPR_STATEMENT	677:16	677:23	12	ret = 0 ;
EXPR	677:16	677:16	13	ret = 0
ASSIGN	677:16	677:22	14	ret = 0
LVAL	677:16	677:16	15	ret
FIELD	677:16	677:16	16	ret
LEAF_NODE	677:16	677:16	17	ret
ASSIGN_OP	677:20	677:20	15	=
LEAF_NODE	677:20	677:20	16	=
RVAL	677:22	677:22	15	0
FIELD	677:22	677:22	16	0
LEAF_NODE	677:22	677:22	17	0
LEAF_NODE	677:23	677:23	13	;
JUMP_STATEMENT	678:16	678:21	12	break DESTINATION ;
KEYWORD	678:16	678:16	13	break
LEAF_NODE	678:16	678:16	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	678:21	678:21	13	;
LEAF_NODE	679:12	679:12	11	}
EXPR_STATEMENT	680:12	681:49	9	pos = ( ( row + img -> row_offset ) % th ) * TIFFTileRowSize ( tif ) + ( ( tmsize_t ) fromskew * img -> samplesperpixel ) ;
EXPR	680:12	680:12	10	pos = ( ( row + img -> row_offset ) % th ) * TIFFTileRowSize ( tif ) + ( ( tmsize_t ) fromskew * img -> samplesperpixel )
ASSIGN	680:12	680:18	11	pos = ( ( row + img -> row_offset ) % th ) * TIFFTileRowSize ( tif ) + ( ( tmsize_t ) fromskew * img -> samplesperpixel )
LVAL	680:12	680:12	12	pos
FIELD	680:12	680:12	13	pos
LEAF_NODE	680:12	680:12	14	pos
ASSIGN_OP	680:16	680:16	12	=
LEAF_NODE	680:16	680:16	13	=
RVAL	680:18	681:48	12	( ( row + img -> row_offset ) % th ) * TIFFTileRowSize ( tif ) + ( ( tmsize_t ) fromskew * img -> samplesperpixel )
LEAF_NODE	680:18	680:18	13	(
LEAF_NODE	680:19	680:19	13	(
FIELD	680:20	680:20	13	row
LEAF_NODE	680:20	680:20	14	row
LEAF_NODE	680:23	680:23	13	+
FIELD	680:24	680:29	13	img -> row_offset
LEAF_NODE	680:24	680:24	14	img
LEAF_NODE	680:27	680:27	14	->
LEAF_NODE	680:29	680:29	14	row_offset
LEAF_NODE	680:39	680:39	13	)
LEAF_NODE	680:41	680:41	13	%
FIELD	680:43	680:43	13	th
LEAF_NODE	680:43	680:43	14	th
LEAF_NODE	680:45	680:45	13	)
LEAF_NODE	680:47	680:47	13	*
FUNCTION_CALL	680:49	680:68	13	TIFFTileRowSize ( tif )
CALLEE	680:49	680:49	14	TIFFTileRowSize
LEAF_NODE	680:49	680:49	15	TIFFTileRowSize
LEAF_NODE	680:64	680:64	14	(
ARGUMENT	680:65	680:65	14	tif
FIELD	680:65	680:65	15	tif
LEAF_NODE	680:65	680:65	16	tif
LEAF_NODE	680:68	680:68	14	)
LEAF_NODE	680:70	680:70	13	+
LEAF_NODE	681:5	681:5	13	(
LEAF_NODE	681:6	681:6	13	(
TYPE_NAME	681:7	681:7	13	tmsize_t
LEAF_NODE	681:7	681:7	14	tmsize_t
LEAF_NODE	681:15	681:15	13	)
FIELD	681:17	681:17	13	fromskew
LEAF_NODE	681:17	681:17	14	fromskew
LEAF_NODE	681:26	681:26	13	*
FIELD	681:28	681:33	13	img -> samplesperpixel
LEAF_NODE	681:28	681:28	14	img
LEAF_NODE	681:31	681:31	14	->
LEAF_NODE	681:33	681:33	14	samplesperpixel
LEAF_NODE	681:48	681:48	13	)
LEAF_NODE	681:49	681:49	10	;
SELECTION	682:5	683:5	9	
KEYWORD	682:5	682:5	10	if
LEAF_NODE	682:5	682:5	11	if
LEAF_NODE	682:8	682:8	10	(
CONDITION	682:9	682:9	10	tocol + this_tw > w
EXPR	682:9	682:27	11	tocol + this_tw > w
FIELD	682:9	682:9	12	tocol
LEAF_NODE	682:9	682:9	13	tocol
LEAF_NODE	682:15	682:15	12	+
FIELD	682:17	682:17	12	this_tw
LEAF_NODE	682:17	682:17	13	this_tw
REL_OPERATOR	682:25	682:25	12	>
LEAF_NODE	682:25	682:25	13	>
FIELD	682:27	682:27	12	w
LEAF_NODE	682:27	682:27	13	w
LEAF_NODE	682:28	682:28	10	)
STATEMENTS	683:5	690:5	10	
LEAF_NODE	683:5	683:5	11	{
STATEMENTS	687:2	689:2	11	
EXPR_STATEMENT	687:2	687:29	12	fromskew = tw - ( w - tocol ) ;
EXPR	687:2	687:2	13	fromskew = tw - ( w - tocol )
ASSIGN	687:2	687:13	14	fromskew = tw - ( w - tocol )
LVAL	687:2	687:2	15	fromskew
FIELD	687:2	687:2	16	fromskew
LEAF_NODE	687:2	687:2	17	fromskew
ASSIGN_OP	687:11	687:11	15	=
LEAF_NODE	687:11	687:11	16	=
RVAL	687:13	687:28	15	tw - ( w - tocol )
FIELD	687:13	687:13	16	tw
LEAF_NODE	687:13	687:13	17	tw
LEAF_NODE	687:16	687:16	16	-
LEAF_NODE	687:18	687:18	16	(
FIELD	687:19	687:19	16	w
LEAF_NODE	687:19	687:19	17	w
LEAF_NODE	687:21	687:21	16	-
FIELD	687:23	687:23	16	tocol
LEAF_NODE	687:23	687:23	17	tocol
LEAF_NODE	687:28	687:28	16	)
LEAF_NODE	687:29	687:29	13	;
EXPR_STATEMENT	688:2	688:25	12	this_tw = tw - fromskew ;
EXPR	688:2	688:2	13	this_tw = tw - fromskew
ASSIGN	688:2	688:12	14	this_tw = tw - fromskew
LVAL	688:2	688:2	15	this_tw
FIELD	688:2	688:2	16	this_tw
LEAF_NODE	688:2	688:2	17	this_tw
ASSIGN_OP	688:10	688:10	15	=
LEAF_NODE	688:10	688:10	16	=
RVAL	688:12	688:17	15	tw - fromskew
FIELD	688:12	688:12	16	tw
LEAF_NODE	688:12	688:12	17	tw
LEAF_NODE	688:15	688:15	16	-
FIELD	688:17	688:17	16	fromskew
LEAF_NODE	688:17	688:17	17	fromskew
LEAF_NODE	688:25	688:25	13	;
EXPR_STATEMENT	689:2	689:33	12	this_toskew = toskew + fromskew ;
EXPR	689:2	689:2	13	this_toskew = toskew + fromskew
ASSIGN	689:2	689:16	14	this_toskew = toskew + fromskew
LVAL	689:2	689:2	15	this_toskew
FIELD	689:2	689:2	16	this_toskew
LEAF_NODE	689:2	689:2	17	this_toskew
ASSIGN_OP	689:14	689:14	15	=
LEAF_NODE	689:14	689:14	16	=
RVAL	689:16	689:25	15	toskew + fromskew
FIELD	689:16	689:16	16	toskew
LEAF_NODE	689:16	689:16	17	toskew
LEAF_NODE	689:23	689:23	16	+
FIELD	689:25	689:25	16	fromskew
LEAF_NODE	689:25	689:25	17	fromskew
LEAF_NODE	689:33	689:33	13	;
LEAF_NODE	690:5	690:5	11	}
EXPR_STATEMENT	691:5	691:93	9	( * put ) ( img , raster + y * w + tocol , tocol , y , this_tw , nrow , fromskew , this_toskew , buf + pos ) ;
EXPR	691:5	691:5	10	( * put ) ( img , raster + y * w + tocol , tocol , y , this_tw , nrow , fromskew , this_toskew , buf + pos )
FUNCTION_CALL	691:5	691:92	11	( * put ) ( img , raster + y * w + tocol , tocol , y , this_tw , nrow , fromskew , this_toskew , buf + pos )
CALLEE	691:5	691:10	12	( * put )
LEAF_NODE	691:5	691:5	13	(
UNARY_EXPR	691:6	691:7	13	* put
UNARY_OPERATOR	691:6	691:6	14	*
LEAF_NODE	691:6	691:6	15	*
FIELD	691:7	691:7	14	put
LEAF_NODE	691:7	691:7	15	put
LEAF_NODE	691:10	691:10	13	)
LEAF_NODE	691:11	691:11	12	(
ARGUMENT	691:12	691:12	12	img
FIELD	691:12	691:12	13	img
LEAF_NODE	691:12	691:12	14	img
LEAF_NODE	691:15	691:15	12	,
ARGUMENT	691:17	691:28	12	raster + y * w + tocol
FIELD	691:17	691:17	13	raster
LEAF_NODE	691:17	691:17	14	raster
LEAF_NODE	691:23	691:23	13	+
FIELD	691:24	691:24	13	y
LEAF_NODE	691:24	691:24	14	y
LEAF_NODE	691:25	691:25	13	*
FIELD	691:26	691:26	13	w
LEAF_NODE	691:26	691:26	14	w
LEAF_NODE	691:27	691:27	13	+
FIELD	691:28	691:28	13	tocol
LEAF_NODE	691:28	691:28	14	tocol
LEAF_NODE	691:33	691:33	12	,
ARGUMENT	691:35	691:35	12	tocol
FIELD	691:35	691:35	13	tocol
LEAF_NODE	691:35	691:35	14	tocol
LEAF_NODE	691:40	691:40	12	,
ARGUMENT	691:42	691:42	12	y
FIELD	691:42	691:42	13	y
LEAF_NODE	691:42	691:42	14	y
LEAF_NODE	691:43	691:43	12	,
ARGUMENT	691:45	691:45	12	this_tw
FIELD	691:45	691:45	13	this_tw
LEAF_NODE	691:45	691:45	14	this_tw
LEAF_NODE	691:52	691:52	12	,
ARGUMENT	691:54	691:54	12	nrow
FIELD	691:54	691:54	13	nrow
LEAF_NODE	691:54	691:54	14	nrow
LEAF_NODE	691:58	691:58	12	,
ARGUMENT	691:60	691:60	12	fromskew
FIELD	691:60	691:60	13	fromskew
LEAF_NODE	691:60	691:60	14	fromskew
LEAF_NODE	691:68	691:68	12	,
ARGUMENT	691:70	691:70	12	this_toskew
FIELD	691:70	691:70	13	this_toskew
LEAF_NODE	691:70	691:70	14	this_toskew
LEAF_NODE	691:81	691:81	12	,
ARGUMENT	691:83	691:89	12	buf + pos
FIELD	691:83	691:83	13	buf
LEAF_NODE	691:83	691:83	14	buf
LEAF_NODE	691:87	691:87	13	+
FIELD	691:89	691:89	13	pos
LEAF_NODE	691:89	691:89	14	pos
LEAF_NODE	691:92	691:92	12	)
LEAF_NODE	691:93	691:93	10	;
EXPR_STATEMENT	692:5	692:21	9	tocol += this_tw ;
EXPR	692:5	692:5	10	tocol += this_tw
ASSIGN	692:5	692:14	11	tocol += this_tw
LVAL	692:5	692:5	12	tocol
FIELD	692:5	692:5	13	tocol
LEAF_NODE	692:5	692:5	14	tocol
ASSIGN_OP	692:11	692:11	12	+=
LEAF_NODE	692:11	692:11	13	+=
RVAL	692:14	692:14	12	this_tw
FIELD	692:14	692:14	13	this_tw
LEAF_NODE	692:14	692:14	14	this_tw
LEAF_NODE	692:21	692:21	10	;
EXPR_STATEMENT	693:5	693:19	9	col += this_tw ;
EXPR	693:5	693:5	10	col += this_tw
ASSIGN	693:5	693:12	11	col += this_tw
LVAL	693:5	693:5	12	col
FIELD	693:5	693:5	13	col
LEAF_NODE	693:5	693:5	14	col
ASSIGN_OP	693:9	693:9	12	+=
LEAF_NODE	693:9	693:9	13	+=
RVAL	693:12	693:12	12	this_tw
FIELD	693:12	693:12	13	this_tw
LEAF_NODE	693:12	693:12	14	this_tw
LEAF_NODE	693:19	693:19	10	;
EXPR_STATEMENT	697:5	697:17	9	fromskew = 0 ;
EXPR	697:5	697:5	10	fromskew = 0
ASSIGN	697:5	697:16	11	fromskew = 0
LVAL	697:5	697:5	12	fromskew
FIELD	697:5	697:5	13	fromskew
LEAF_NODE	697:5	697:5	14	fromskew
ASSIGN_OP	697:14	697:14	12	=
LEAF_NODE	697:14	697:14	13	=
RVAL	697:16	697:16	12	0
FIELD	697:16	697:16	13	0
LEAF_NODE	697:16	697:16	14	0
LEAF_NODE	697:17	697:17	10	;
EXPR_STATEMENT	698:5	698:17	9	this_tw = tw ;
EXPR	698:5	698:5	10	this_tw = tw
ASSIGN	698:5	698:15	11	this_tw = tw
LVAL	698:5	698:5	12	this_tw
FIELD	698:5	698:5	13	this_tw
LEAF_NODE	698:5	698:5	14	this_tw
ASSIGN_OP	698:13	698:13	12	=
LEAF_NODE	698:13	698:13	13	=
RVAL	698:15	698:15	12	tw
FIELD	698:15	698:15	13	tw
LEAF_NODE	698:15	698:15	14	tw
LEAF_NODE	698:17	698:17	10	;
EXPR_STATEMENT	699:5	699:25	9	this_toskew = toskew ;
EXPR	699:5	699:5	10	this_toskew = toskew
ASSIGN	699:5	699:19	11	this_toskew = toskew
LVAL	699:5	699:5	12	this_toskew
FIELD	699:5	699:5	13	this_toskew
LEAF_NODE	699:5	699:5	14	this_toskew
ASSIGN_OP	699:17	699:17	12	=
LEAF_NODE	699:17	699:17	13	=
RVAL	699:19	699:19	12	toskew
FIELD	699:19	699:19	13	toskew
LEAF_NODE	699:19	699:19	14	toskew
LEAF_NODE	699:25	699:25	10	;
LEAF_NODE	700:1	700:1	8	}
LEAF_NODE	702:8	702:8	6	y
LEAF_NODE	702:10	702:10	6	+=
LEAF_NODE	702:13	702:13	6	(
LEAF_NODE	702:14	702:14	6	(
LEAF_NODE	702:15	702:15	6	flip
LEAF_NODE	702:20	702:20	6	&
LEAF_NODE	702:22	702:22	6	FLIP_VERTICALLY
LEAF_NODE	702:37	702:37	6	)
LEAF_NODE	702:39	702:39	6	?
LEAF_NODE	702:41	702:41	6	-
LEAF_NODE	702:42	702:42	6	(
LEAF_NODE	702:43	702:43	6	int32
LEAF_NODE	702:48	702:48	6	)
LABEL	702:50	702:55	6	nrow :
LEAF_NODE	702:50	702:50	7	nrow
LEAF_NODE	702:55	702:55	7	:
LEAF_NODE	702:57	702:57	6	(
LEAF_NODE	702:58	702:58	6	int32
LEAF_NODE	702:63	702:63	6	)
LEAF_NODE	702:65	702:65	6	nrow
LEAF_NODE	702:69	702:69	6	)
LEAF_NODE	702:70	702:70	6	;
LEAF_NODE	703:4	703:4	5	}
EXPR_STATEMENT	704:4	704:18	3	_TIFFfree ( buf ) ;
EXPR	704:4	704:4	4	_TIFFfree ( buf )
FUNCTION_CALL	704:4	704:17	5	_TIFFfree ( buf )
CALLEE	704:4	704:4	6	_TIFFfree
LEAF_NODE	704:4	704:4	7	_TIFFfree
LEAF_NODE	704:13	704:13	6	(
ARGUMENT	704:14	704:14	6	buf
FIELD	704:14	704:14	7	buf
LEAF_NODE	704:14	704:14	8	buf
LEAF_NODE	704:17	704:17	6	)
LEAF_NODE	704:18	704:18	4	;
SELECTION	706:4	706:34	3	
KEYWORD	706:4	706:4	4	if
LEAF_NODE	706:4	706:4	5	if
LEAF_NODE	706:7	706:7	4	(
CONDITION	706:8	706:8	4	flip & FLIP_HORIZONTALLY
EXPR	706:8	706:15	5	flip & FLIP_HORIZONTALLY
FIELD	706:8	706:8	6	flip
LEAF_NODE	706:8	706:8	7	flip
LEAF_NODE	706:13	706:13	6	&
FIELD	706:15	706:15	6	FLIP_HORIZONTALLY
LEAF_NODE	706:15	706:15	7	FLIP_HORIZONTALLY
LEAF_NODE	706:32	706:32	4	)
STATEMENTS	706:34	721:4	4	
LEAF_NODE	706:34	706:34	5	{
STATEMENTS	707:5	709:5	5	
SIMPLE_DECL	707:5	707:16	6	uint32 line ;
VAR_DECL	707:5	707:12	7	uint32 line
TYPE	707:5	707:5	8	uint32
TYPE_NAME	707:5	707:5	9	uint32
LEAF_NODE	707:5	707:5	10	uint32
NAME	707:12	707:12	8	line
LEAF_NODE	707:12	707:12	9	line
LEAF_NODE	707:16	707:16	7	;
ITERATION	709:5	709:38	6	
KEYWORD	709:5	709:5	7	for
LEAF_NODE	709:5	709:5	8	for
LEAF_NODE	709:9	709:9	7	(
FOR_INIT	709:10	709:18	7	line = 0 ;
EXPR	709:10	709:10	8	line = 0
ASSIGN	709:10	709:17	9	line = 0
LVAL	709:10	709:10	10	line
FIELD	709:10	709:10	11	line
LEAF_NODE	709:10	709:10	12	line
ASSIGN_OP	709:15	709:15	10	=
LEAF_NODE	709:15	709:15	11	=
RVAL	709:17	709:17	10	0
FIELD	709:17	709:17	11	0
LEAF_NODE	709:17	709:17	12	0
LEAF_NODE	709:18	709:18	8	;
CONDITION	709:20	709:20	7	line < h
EXPR	709:20	709:27	8	line < h
FIELD	709:20	709:20	9	line
LEAF_NODE	709:20	709:20	10	line
REL_OPERATOR	709:25	709:25	9	<
LEAF_NODE	709:25	709:25	10	<
FIELD	709:27	709:27	9	h
LEAF_NODE	709:27	709:27	10	h
LEAF_NODE	709:28	709:28	7	;
FOR_EXPR	709:30	709:30	7	line ++
EXPR	709:30	709:30	8	line ++
FIELD	709:30	709:34	9	line ++
LEAF_NODE	709:30	709:30	10	line
LEAF_NODE	709:34	709:34	10	++
LEAF_NODE	709:36	709:36	7	)
STATEMENTS	709:38	720:5	7	
LEAF_NODE	709:38	709:38	8	{
STATEMENTS	710:6	713:6	8	
SIMPLE_DECL	710:6	710:40	9	uint32 * left ; left = raster + ( line * w ) ;
VAR_DECL	710:6	710:14	10	uint32 * left ; left = raster + ( line * w )
TYPE	710:6	710:13	11	uint32 *
TYPE_NAME	710:6	710:6	12	uint32
LEAF_NODE	710:6	710:6	13	uint32
POINTER	710:13	710:13	12	*
LEAF_NODE	710:13	710:13	13	*
NAME	710:14	710:14	11	left
LEAF_NODE	710:14	710:14	12	left
LEAF_NODE	0:0	0:0	11	;
INIT	710:14	710:14	11	left = raster + ( line * w )
ASSIGN	710:14	710:21	12	left = raster + ( line * w )
LVAL	710:14	710:14	13	left
NAME	710:14	710:14	14	left
LEAF_NODE	710:14	710:14	15	left
ASSIGN_OP	710:19	710:19	13	=
LEAF_NODE	710:19	710:19	14	=
RVAL	710:21	710:39	13	raster + ( line * w )
FIELD	710:21	710:21	14	raster
LEAF_NODE	710:21	710:21	15	raster
LEAF_NODE	710:28	710:28	14	+
LEAF_NODE	710:30	710:30	14	(
FIELD	710:31	710:31	14	line
LEAF_NODE	710:31	710:31	15	line
LEAF_NODE	710:36	710:36	14	*
FIELD	710:38	710:38	14	w
LEAF_NODE	710:38	710:38	15	w
LEAF_NODE	710:39	710:39	14	)
LEAF_NODE	710:40	710:40	10	;
SIMPLE_DECL	711:6	711:34	9	uint32 * right ; right = left + w - 1 ;
VAR_DECL	711:6	711:14	10	uint32 * right ; right = left + w - 1
TYPE	711:6	711:13	11	uint32 *
TYPE_NAME	711:6	711:6	12	uint32
LEAF_NODE	711:6	711:6	13	uint32
POINTER	711:13	711:13	12	*
LEAF_NODE	711:13	711:13	13	*
NAME	711:14	711:14	11	right
LEAF_NODE	711:14	711:14	12	right
LEAF_NODE	0:0	0:0	11	;
INIT	711:14	711:14	11	right = left + w - 1
ASSIGN	711:14	711:22	12	right = left + w - 1
LVAL	711:14	711:14	13	right
NAME	711:14	711:14	14	right
LEAF_NODE	711:14	711:14	15	right
ASSIGN_OP	711:20	711:20	13	=
LEAF_NODE	711:20	711:20	14	=
RVAL	711:22	711:33	13	left + w - 1
FIELD	711:22	711:22	14	left
LEAF_NODE	711:22	711:22	15	left
LEAF_NODE	711:27	711:27	14	+
FIELD	711:29	711:29	14	w
LEAF_NODE	711:29	711:29	15	w
LEAF_NODE	711:31	711:31	14	-
FIELD	711:33	711:33	14	1
LEAF_NODE	711:33	711:33	15	1
LEAF_NODE	711:34	711:34	10	;
ITERATION	713:6	713:29	9	
KEYWORD	713:6	713:6	10	while
LEAF_NODE	713:6	713:6	11	while
LEAF_NODE	713:12	713:12	10	(
CONDITION	713:14	713:14	10	left < right
EXPR	713:14	713:21	11	left < right
FIELD	713:14	713:14	12	left
LEAF_NODE	713:14	713:14	13	left
REL_OPERATOR	713:19	713:19	12	<
LEAF_NODE	713:19	713:19	13	<
FIELD	713:21	713:21	12	right
LEAF_NODE	713:21	713:21	13	right
LEAF_NODE	713:27	713:27	10	)
STATEMENTS	713:29	719:6	10	
LEAF_NODE	713:29	713:29	11	{
STATEMENTS	714:7	718:4	11	
SIMPLE_DECL	714:7	714:26	12	uint32 temp ; temp = * left ;
VAR_DECL	714:7	714:14	13	uint32 temp ; temp = * left
TYPE	714:7	714:7	14	uint32
TYPE_NAME	714:7	714:7	15	uint32
LEAF_NODE	714:7	714:7	16	uint32
NAME	714:14	714:14	14	temp
LEAF_NODE	714:14	714:14	15	temp
LEAF_NODE	0:0	0:0	14	;
INIT	714:14	714:14	14	temp = * left
ASSIGN	714:14	714:21	15	temp = * left
LVAL	714:14	714:14	16	temp
NAME	714:14	714:14	17	temp
LEAF_NODE	714:14	714:14	18	temp
ASSIGN_OP	714:19	714:19	16	=
LEAF_NODE	714:19	714:19	17	=
RVAL	714:21	714:21	16	* left
UNARY_EXPR	714:21	714:22	17	* left
UNARY_OPERATOR	714:21	714:21	18	*
LEAF_NODE	714:21	714:21	19	*
FIELD	714:22	714:22	18	left
LEAF_NODE	714:22	714:22	19	left
LEAF_NODE	714:26	714:26	13	;
EXPR_STATEMENT	715:7	715:21	12	* left = * right ;
EXPR	715:7	715:7	13	* left = * right
ASSIGN	715:7	715:15	14	* left = * right
LVAL	715:7	715:7	15	* left
UNARY_EXPR	715:7	715:8	16	* left
UNARY_OPERATOR	715:7	715:7	17	*
LEAF_NODE	715:7	715:7	18	*
FIELD	715:8	715:8	17	left
LEAF_NODE	715:8	715:8	18	left
ASSIGN_OP	715:13	715:13	15	=
LEAF_NODE	715:13	715:13	16	=
RVAL	715:15	715:15	15	* right
UNARY_EXPR	715:15	715:16	16	* right
UNARY_OPERATOR	715:15	715:15	17	*
LEAF_NODE	715:15	715:15	18	*
FIELD	715:16	715:16	17	right
LEAF_NODE	715:16	715:16	18	right
LEAF_NODE	715:21	715:21	13	;
EXPR_STATEMENT	716:7	716:20	12	* right = temp ;
EXPR	716:7	716:7	13	* right = temp
ASSIGN	716:7	716:16	14	* right = temp
LVAL	716:7	716:7	15	* right
UNARY_EXPR	716:7	716:8	16	* right
UNARY_OPERATOR	716:7	716:7	17	*
LEAF_NODE	716:7	716:7	18	*
FIELD	716:8	716:8	17	right
LEAF_NODE	716:8	716:8	18	right
ASSIGN_OP	716:14	716:14	15	=
LEAF_NODE	716:14	716:14	16	=
RVAL	716:16	716:16	15	temp
FIELD	716:16	716:16	16	temp
LEAF_NODE	716:16	716:16	17	temp
LEAF_NODE	716:20	716:20	13	;
EXPR_STATEMENT	717:7	717:13	12	left ++ ;
EXPR	717:7	717:7	13	left ++
FIELD	717:7	717:11	14	left ++
LEAF_NODE	717:7	717:7	15	left
LEAF_NODE	717:11	717:11	15	++
LEAF_NODE	717:13	717:13	13	;
EXPR_STATEMENT	718:4	718:11	12	right -- ;
EXPR	718:4	718:4	13	right --
FIELD	718:4	718:9	14	right --
LEAF_NODE	718:4	718:4	15	right
LEAF_NODE	718:9	718:9	15	--
LEAF_NODE	718:11	718:11	13	;
LEAF_NODE	719:6	719:6	11	}
LEAF_NODE	720:5	720:5	8	}
LEAF_NODE	721:4	721:4	5	}
LEAF_NODE	723:4	723:4	3	return
LEAF_NODE	723:11	723:11	3	(
LEAF_NODE	723:12	723:12	3	ret
LEAF_NODE	723:15	723:15	3	)
LEAF_NODE	723:16	723:16	3	;
LEAF_NODE	724:0	724:0	2	}
FUNCTION_DEF	732:0	905:0	1	
RETURN_TYPE	732:0	732:7	2	static int
LEAF_NODE	732:0	732:0	3	static
TYPE_NAME	732:7	732:7	3	int
LEAF_NODE	732:7	732:7	4	int
FUNCTION_NAME	733:0	733:0	2	gtTileSeparate
LEAF_NODE	733:0	733:0	3	gtTileSeparate
PARAMETER_LIST	733:14	733:69	2	( TIFFRGBAImage * img , uint32 * raster , uint32 w , uint32 h )
LEAF_NODE	733:14	733:14	3	(
PARAMETER_DECL	733:15	733:30	3	TIFFRGBAImage * img
TYPE	733:15	733:28	4	TIFFRGBAImage *
TYPE_NAME	733:15	733:15	5	TIFFRGBAImage
LEAF_NODE	733:15	733:15	6	TIFFRGBAImage
POINTER	733:28	733:28	5	*
LEAF_NODE	733:28	733:28	6	*
NAME	733:30	733:30	4	img
LEAF_NODE	733:30	733:30	5	img
LEAF_NODE	733:33	733:33	3	,
PARAMETER_DECL	733:35	733:43	3	uint32 * raster
TYPE	733:35	733:41	4	uint32 *
TYPE_NAME	733:35	733:35	5	uint32
LEAF_NODE	733:35	733:35	6	uint32
POINTER	733:41	733:41	5	*
LEAF_NODE	733:41	733:41	6	*
NAME	733:43	733:43	4	raster
LEAF_NODE	733:43	733:43	5	raster
LEAF_NODE	733:49	733:49	3	,
PARAMETER_DECL	733:51	733:58	3	uint32 w
TYPE	733:51	733:51	4	uint32
TYPE_NAME	733:51	733:51	5	uint32
LEAF_NODE	733:51	733:51	6	uint32
NAME	733:58	733:58	4	w
LEAF_NODE	733:58	733:58	5	w
LEAF_NODE	733:59	733:59	3	,
PARAMETER_DECL	733:61	733:68	3	uint32 h
TYPE	733:61	733:61	4	uint32
TYPE_NAME	733:61	733:61	5	uint32
LEAF_NODE	733:61	733:61	6	uint32
NAME	733:68	733:68	4	h
LEAF_NODE	733:68	733:68	5	h
LEAF_NODE	733:69	733:69	3	)
LEAF_NODE	734:0	734:0	2	{
STATEMENTS	735:1	904:13	2	
SIMPLE_DECL	735:1	735:21	3	TIFF * tif ; tif = img -> tif ;
VAR_DECL	735:1	735:7	4	TIFF * tif ; tif = img -> tif
TYPE	735:1	735:5	5	TIFF *
TYPE_NAME	735:1	735:1	6	TIFF
LEAF_NODE	735:1	735:1	7	TIFF
POINTER	735:5	735:5	6	*
LEAF_NODE	735:5	735:5	7	*
NAME	735:7	735:7	5	tif
LEAF_NODE	735:7	735:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	735:7	735:7	5	tif = img -> tif
ASSIGN	735:7	735:13	6	tif = img -> tif
LVAL	735:7	735:7	7	tif
NAME	735:7	735:7	8	tif
LEAF_NODE	735:7	735:7	9	tif
ASSIGN_OP	735:11	735:11	7	=
LEAF_NODE	735:11	735:11	8	=
RVAL	735:13	735:13	7	img -> tif
FIELD	735:13	735:18	8	img -> tif
LEAF_NODE	735:13	735:13	9	img
LEAF_NODE	735:16	735:16	9	->
LEAF_NODE	735:18	735:18	9	tif
LEAF_NODE	735:21	735:21	4	;
SIMPLE_DECL	736:1	736:44	3	tileSeparateRoutine put ; put = img -> put . separate ;
VAR_DECL	736:1	736:21	4	tileSeparateRoutine put ; put = img -> put . separate
TYPE	736:1	736:1	5	tileSeparateRoutine
TYPE_NAME	736:1	736:1	6	tileSeparateRoutine
LEAF_NODE	736:1	736:1	7	tileSeparateRoutine
NAME	736:21	736:21	5	put
LEAF_NODE	736:21	736:21	6	put
LEAF_NODE	0:0	0:0	5	;
INIT	736:21	736:21	5	put = img -> put . separate
ASSIGN	736:21	736:27	6	put = img -> put . separate
LVAL	736:21	736:21	7	put
NAME	736:21	736:21	8	put
LEAF_NODE	736:21	736:21	9	put
ASSIGN_OP	736:25	736:25	7	=
LEAF_NODE	736:25	736:25	8	=
RVAL	736:27	736:27	7	img -> put . separate
FIELD	736:27	736:36	8	img -> put . separate
LEAF_NODE	736:27	736:27	9	img
LEAF_NODE	736:30	736:30	9	->
LEAF_NODE	736:32	736:32	9	put
LEAF_NODE	736:35	736:35	9	.
LEAF_NODE	736:36	736:36	9	separate
LEAF_NODE	736:44	736:44	4	;
SIMPLE_DECL	737:1	737:31	3	uint32 col , uint32 row , uint32 y , uint32 rowstoread ;
INIT_DECL_LIST	737:1	737:1	4	uint32 col , uint32 row , uint32 y , uint32 rowstoread
VAR_DECL	737:1	737:8	5	uint32 col
TYPE	737:1	737:1	6	uint32
TYPE_NAME	737:1	737:1	7	uint32
LEAF_NODE	737:1	737:1	8	uint32
NAME	737:8	737:8	6	col
LEAF_NODE	737:8	737:8	7	col
LEAF_NODE	737:11	737:11	5	,
INIT_DECL_LIST	737:1	737:1	5	uint32 row , uint32 y , uint32 rowstoread
VAR_DECL	737:1	737:13	6	uint32 row
TYPE	737:1	737:1	7	uint32
TYPE_NAME	737:1	737:1	8	uint32
LEAF_NODE	737:1	737:1	9	uint32
NAME	737:13	737:13	7	row
LEAF_NODE	737:13	737:13	8	row
LEAF_NODE	737:16	737:16	6	,
INIT_DECL_LIST	737:1	737:1	6	uint32 y , uint32 rowstoread
VAR_DECL	737:1	737:18	7	uint32 y
TYPE	737:1	737:1	8	uint32
TYPE_NAME	737:1	737:1	9	uint32
LEAF_NODE	737:1	737:1	10	uint32
NAME	737:18	737:18	8	y
LEAF_NODE	737:18	737:18	9	y
LEAF_NODE	737:19	737:19	7	,
VAR_DECL	737:1	737:21	7	uint32 rowstoread
TYPE	737:1	737:1	8	uint32
TYPE_NAME	737:1	737:1	9	uint32
LEAF_NODE	737:1	737:1	10	uint32
NAME	737:21	737:21	8	rowstoread
LEAF_NODE	737:21	737:21	9	rowstoread
LEAF_NODE	737:31	737:31	4	;
SIMPLE_DECL	738:1	738:13	3	tmsize_t pos ;
VAR_DECL	738:1	738:10	4	tmsize_t pos
TYPE	738:1	738:1	5	tmsize_t
TYPE_NAME	738:1	738:1	6	tmsize_t
LEAF_NODE	738:1	738:1	7	tmsize_t
NAME	738:10	738:10	5	pos
LEAF_NODE	738:10	738:10	6	pos
LEAF_NODE	738:13	738:13	4	;
SIMPLE_DECL	739:1	739:14	3	uint32 tw , uint32 th ;
INIT_DECL_LIST	739:1	739:1	4	uint32 tw , uint32 th
VAR_DECL	739:1	739:8	5	uint32 tw
TYPE	739:1	739:1	6	uint32
TYPE_NAME	739:1	739:1	7	uint32
LEAF_NODE	739:1	739:1	8	uint32
NAME	739:8	739:8	6	tw
LEAF_NODE	739:8	739:8	7	tw
LEAF_NODE	739:10	739:10	5	,
VAR_DECL	739:1	739:12	5	uint32 th
TYPE	739:1	739:1	6	uint32
TYPE_NAME	739:1	739:1	7	uint32
LEAF_NODE	739:1	739:1	8	uint32
NAME	739:12	739:12	6	th
LEAF_NODE	739:12	739:12	7	th
LEAF_NODE	739:14	739:14	4	;
SIMPLE_DECL	740:1	740:26	3	unsigned char * buf ; buf = NULL ;
VAR_DECL	740:1	740:16	4	unsigned char * buf ; buf = NULL
TYPE	740:1	740:14	5	unsigned char *
TYPE_NAME	740:1	740:10	6	unsigned char
LEAF_NODE	740:1	740:1	7	unsigned
LEAF_NODE	740:10	740:10	7	char
POINTER	740:14	740:14	6	*
LEAF_NODE	740:14	740:14	7	*
NAME	740:16	740:16	5	buf
LEAF_NODE	740:16	740:16	6	buf
LEAF_NODE	0:0	0:0	5	;
INIT	740:16	740:16	5	buf = NULL
ASSIGN	740:16	740:22	6	buf = NULL
LVAL	740:16	740:16	7	buf
NAME	740:16	740:16	8	buf
LEAF_NODE	740:16	740:16	9	buf
ASSIGN_OP	740:20	740:20	7	=
LEAF_NODE	740:20	740:20	8	=
RVAL	740:22	740:22	7	NULL
FIELD	740:22	740:22	8	NULL
LEAF_NODE	740:22	740:22	9	NULL
LEAF_NODE	740:26	740:26	4	;
SIMPLE_DECL	741:1	741:25	3	unsigned char * p0 ; p0 = NULL ;
VAR_DECL	741:1	741:16	4	unsigned char * p0 ; p0 = NULL
TYPE	741:1	741:14	5	unsigned char *
TYPE_NAME	741:1	741:10	6	unsigned char
LEAF_NODE	741:1	741:1	7	unsigned
LEAF_NODE	741:10	741:10	7	char
POINTER	741:14	741:14	6	*
LEAF_NODE	741:14	741:14	7	*
NAME	741:16	741:16	5	p0
LEAF_NODE	741:16	741:16	6	p0
LEAF_NODE	0:0	0:0	5	;
INIT	741:16	741:16	5	p0 = NULL
ASSIGN	741:16	741:21	6	p0 = NULL
LVAL	741:16	741:16	7	p0
NAME	741:16	741:16	8	p0
LEAF_NODE	741:16	741:16	9	p0
ASSIGN_OP	741:19	741:19	7	=
LEAF_NODE	741:19	741:19	8	=
RVAL	741:21	741:21	7	NULL
FIELD	741:21	741:21	8	NULL
LEAF_NODE	741:21	741:21	9	NULL
LEAF_NODE	741:25	741:25	4	;
SIMPLE_DECL	742:1	742:25	3	unsigned char * p1 ; p1 = NULL ;
VAR_DECL	742:1	742:16	4	unsigned char * p1 ; p1 = NULL
TYPE	742:1	742:14	5	unsigned char *
TYPE_NAME	742:1	742:10	6	unsigned char
LEAF_NODE	742:1	742:1	7	unsigned
LEAF_NODE	742:10	742:10	7	char
POINTER	742:14	742:14	6	*
LEAF_NODE	742:14	742:14	7	*
NAME	742:16	742:16	5	p1
LEAF_NODE	742:16	742:16	6	p1
LEAF_NODE	0:0	0:0	5	;
INIT	742:16	742:16	5	p1 = NULL
ASSIGN	742:16	742:21	6	p1 = NULL
LVAL	742:16	742:16	7	p1
NAME	742:16	742:16	8	p1
LEAF_NODE	742:16	742:16	9	p1
ASSIGN_OP	742:19	742:19	7	=
LEAF_NODE	742:19	742:19	8	=
RVAL	742:21	742:21	7	NULL
FIELD	742:21	742:21	8	NULL
LEAF_NODE	742:21	742:21	9	NULL
LEAF_NODE	742:25	742:25	4	;
SIMPLE_DECL	743:1	743:25	3	unsigned char * p2 ; p2 = NULL ;
VAR_DECL	743:1	743:16	4	unsigned char * p2 ; p2 = NULL
TYPE	743:1	743:14	5	unsigned char *
TYPE_NAME	743:1	743:10	6	unsigned char
LEAF_NODE	743:1	743:1	7	unsigned
LEAF_NODE	743:10	743:10	7	char
POINTER	743:14	743:14	6	*
LEAF_NODE	743:14	743:14	7	*
NAME	743:16	743:16	5	p2
LEAF_NODE	743:16	743:16	6	p2
LEAF_NODE	0:0	0:0	5	;
INIT	743:16	743:16	5	p2 = NULL
ASSIGN	743:16	743:21	6	p2 = NULL
LVAL	743:16	743:16	7	p2
NAME	743:16	743:16	8	p2
LEAF_NODE	743:16	743:16	9	p2
ASSIGN_OP	743:19	743:19	7	=
LEAF_NODE	743:19	743:19	8	=
RVAL	743:21	743:21	7	NULL
FIELD	743:21	743:21	8	NULL
LEAF_NODE	743:21	743:21	9	NULL
LEAF_NODE	743:25	743:25	4	;
SIMPLE_DECL	744:1	744:25	3	unsigned char * pa ; pa = NULL ;
VAR_DECL	744:1	744:16	4	unsigned char * pa ; pa = NULL
TYPE	744:1	744:14	5	unsigned char *
TYPE_NAME	744:1	744:10	6	unsigned char
LEAF_NODE	744:1	744:1	7	unsigned
LEAF_NODE	744:10	744:10	7	char
POINTER	744:14	744:14	6	*
LEAF_NODE	744:14	744:14	7	*
NAME	744:16	744:16	5	pa
LEAF_NODE	744:16	744:16	6	pa
LEAF_NODE	0:0	0:0	5	;
INIT	744:16	744:16	5	pa = NULL
ASSIGN	744:16	744:21	6	pa = NULL
LVAL	744:16	744:16	7	pa
NAME	744:16	744:16	8	pa
LEAF_NODE	744:16	744:16	9	pa
ASSIGN_OP	744:19	744:19	7	=
LEAF_NODE	744:19	744:19	8	=
RVAL	744:21	744:21	7	NULL
FIELD	744:21	744:21	8	NULL
LEAF_NODE	744:21	744:21	9	NULL
LEAF_NODE	744:25	744:25	4	;
SIMPLE_DECL	745:1	745:18	3	tmsize_t tilesize ;
VAR_DECL	745:1	745:10	4	tmsize_t tilesize
TYPE	745:1	745:1	5	tmsize_t
TYPE_NAME	745:1	745:1	6	tmsize_t
LEAF_NODE	745:1	745:1	7	tmsize_t
NAME	745:10	745:10	5	tilesize
LEAF_NODE	745:10	745:10	6	tilesize
LEAF_NODE	745:18	745:18	4	;
SIMPLE_DECL	746:1	746:17	3	tmsize_t bufsize ;
VAR_DECL	746:1	746:10	4	tmsize_t bufsize
TYPE	746:1	746:1	5	tmsize_t
TYPE_NAME	746:1	746:1	6	tmsize_t
LEAF_NODE	746:1	746:1	7	tmsize_t
NAME	746:10	746:10	5	bufsize
LEAF_NODE	746:10	746:10	6	bufsize
LEAF_NODE	746:17	746:17	4	;
SIMPLE_DECL	747:1	747:23	3	int32 fromskew , int32 toskew ;
INIT_DECL_LIST	747:1	747:1	4	int32 fromskew , int32 toskew
VAR_DECL	747:1	747:7	5	int32 fromskew
TYPE	747:1	747:1	6	int32
TYPE_NAME	747:1	747:1	7	int32
LEAF_NODE	747:1	747:1	8	int32
NAME	747:7	747:7	6	fromskew
LEAF_NODE	747:7	747:7	7	fromskew
LEAF_NODE	747:15	747:15	5	,
VAR_DECL	747:1	747:17	5	int32 toskew
TYPE	747:1	747:1	6	int32
TYPE_NAME	747:1	747:1	7	int32
LEAF_NODE	747:1	747:1	8	int32
NAME	747:17	747:17	6	toskew
LEAF_NODE	747:17	747:17	7	toskew
LEAF_NODE	747:23	747:23	4	;
SIMPLE_DECL	748:1	748:23	3	int alpha ; alpha = img -> alpha ;
VAR_DECL	748:1	748:5	4	int alpha ; alpha = img -> alpha
TYPE	748:1	748:1	5	int
TYPE_NAME	748:1	748:1	6	int
LEAF_NODE	748:1	748:1	7	int
NAME	748:5	748:5	5	alpha
LEAF_NODE	748:5	748:5	6	alpha
LEAF_NODE	0:0	0:0	5	;
INIT	748:5	748:5	5	alpha = img -> alpha
ASSIGN	748:5	748:13	6	alpha = img -> alpha
LVAL	748:5	748:5	7	alpha
NAME	748:5	748:5	8	alpha
LEAF_NODE	748:5	748:5	9	alpha
ASSIGN_OP	748:11	748:11	7	=
LEAF_NODE	748:11	748:11	8	=
RVAL	748:13	748:13	7	img -> alpha
FIELD	748:13	748:18	8	img -> alpha
LEAF_NODE	748:13	748:13	9	img
LEAF_NODE	748:16	748:16	9	->
LEAF_NODE	748:18	748:18	9	alpha
LEAF_NODE	748:23	748:23	4	;
SIMPLE_DECL	749:1	749:12	3	uint32 nrow ;
VAR_DECL	749:1	749:8	4	uint32 nrow
TYPE	749:1	749:1	5	uint32
TYPE_NAME	749:1	749:1	6	uint32
LEAF_NODE	749:1	749:1	7	uint32
NAME	749:8	749:8	5	nrow
LEAF_NODE	749:8	749:8	6	nrow
LEAF_NODE	749:12	749:12	4	;
SIMPLE_DECL	750:1	750:18	3	int ret ; ret = 1 , int flip ;
INIT_DECL_LIST	750:1	750:1	4	int ret ; ret = 1 , int flip
VAR_DECL	750:1	750:5	5	int ret ; ret = 1
TYPE	750:1	750:1	6	int
TYPE_NAME	750:1	750:1	7	int
LEAF_NODE	750:1	750:1	8	int
NAME	750:5	750:5	6	ret
LEAF_NODE	750:5	750:5	7	ret
LEAF_NODE	0:0	0:0	6	;
INIT	750:5	750:5	6	ret = 1
ASSIGN	750:5	750:11	7	ret = 1
LVAL	750:5	750:5	8	ret
NAME	750:5	750:5	9	ret
LEAF_NODE	750:5	750:5	10	ret
ASSIGN_OP	750:9	750:9	8	=
LEAF_NODE	750:9	750:9	9	=
RVAL	750:11	750:11	8	1
FIELD	750:11	750:11	9	1
LEAF_NODE	750:11	750:11	10	1
LEAF_NODE	750:12	750:12	5	,
VAR_DECL	750:1	750:14	5	int flip
TYPE	750:1	750:1	6	int
TYPE_NAME	750:1	750:1	7	int
LEAF_NODE	750:1	750:1	8	int
NAME	750:14	750:14	6	flip
LEAF_NODE	750:14	750:14	7	flip
LEAF_NODE	750:18	750:18	4	;
SIMPLE_DECL	751:8	751:28	3	uint16 colorchannels ;
VAR_DECL	751:8	751:15	4	uint16 colorchannels
TYPE	751:8	751:8	5	uint16
TYPE_NAME	751:8	751:8	6	uint16
LEAF_NODE	751:8	751:8	7	uint16
NAME	751:15	751:15	5	colorchannels
LEAF_NODE	751:15	751:15	6	colorchannels
LEAF_NODE	751:28	751:28	4	;
SIMPLE_DECL	752:1	752:22	3	uint32 this_tw , uint32 tocol ;
INIT_DECL_LIST	752:1	752:1	4	uint32 this_tw , uint32 tocol
VAR_DECL	752:1	752:8	5	uint32 this_tw
TYPE	752:1	752:1	6	uint32
TYPE_NAME	752:1	752:1	7	uint32
LEAF_NODE	752:1	752:1	8	uint32
NAME	752:8	752:8	6	this_tw
LEAF_NODE	752:8	752:8	7	this_tw
LEAF_NODE	752:15	752:15	5	,
VAR_DECL	752:1	752:17	5	uint32 tocol
TYPE	752:1	752:1	6	uint32
TYPE_NAME	752:1	752:1	7	uint32
LEAF_NODE	752:1	752:1	8	uint32
NAME	752:17	752:17	6	tocol
LEAF_NODE	752:17	752:17	7	tocol
LEAF_NODE	752:22	752:22	4	;
SIMPLE_DECL	753:1	753:35	3	int32 this_toskew , int32 leftmost_toskew ;
INIT_DECL_LIST	753:1	753:1	4	int32 this_toskew , int32 leftmost_toskew
VAR_DECL	753:1	753:7	5	int32 this_toskew
TYPE	753:1	753:1	6	int32
TYPE_NAME	753:1	753:1	7	int32
LEAF_NODE	753:1	753:1	8	int32
NAME	753:7	753:7	6	this_toskew
LEAF_NODE	753:7	753:7	7	this_toskew
LEAF_NODE	753:18	753:18	5	,
VAR_DECL	753:1	753:20	5	int32 leftmost_toskew
TYPE	753:1	753:1	6	int32
TYPE_NAME	753:1	753:1	7	int32
LEAF_NODE	753:1	753:1	8	int32
NAME	753:20	753:20	6	leftmost_toskew
LEAF_NODE	753:20	753:20	7	leftmost_toskew
LEAF_NODE	753:35	753:35	4	;
SIMPLE_DECL	754:1	754:24	3	int32 leftmost_fromskew ;
VAR_DECL	754:1	754:7	4	int32 leftmost_fromskew
TYPE	754:1	754:1	5	int32
TYPE_NAME	754:1	754:1	6	int32
LEAF_NODE	754:1	754:1	7	int32
NAME	754:7	754:7	5	leftmost_fromskew
LEAF_NODE	754:7	754:7	6	leftmost_fromskew
LEAF_NODE	754:24	754:24	4	;
SIMPLE_DECL	755:1	755:19	3	uint32 leftmost_tw ;
VAR_DECL	755:1	755:8	4	uint32 leftmost_tw
TYPE	755:1	755:1	5	uint32
TYPE_NAME	755:1	755:1	6	uint32
LEAF_NODE	755:1	755:1	7	uint32
NAME	755:8	755:8	5	leftmost_tw
LEAF_NODE	755:8	755:8	6	leftmost_tw
LEAF_NODE	755:19	755:19	4	;
EXPR_STATEMENT	757:1	757:29	3	tilesize = TIFFTileSize ( tif ) ;
EXPR	757:1	757:1	4	tilesize = TIFFTileSize ( tif )
ASSIGN	757:1	757:12	5	tilesize = TIFFTileSize ( tif )
LVAL	757:1	757:1	6	tilesize
FIELD	757:1	757:1	7	tilesize
LEAF_NODE	757:1	757:1	8	tilesize
ASSIGN_OP	757:10	757:10	6	=
LEAF_NODE	757:10	757:10	7	=
RVAL	757:12	757:12	6	TIFFTileSize ( tif )
FUNCTION_CALL	757:12	757:28	7	TIFFTileSize ( tif )
CALLEE	757:12	757:12	8	TIFFTileSize
LEAF_NODE	757:12	757:12	9	TIFFTileSize
LEAF_NODE	757:24	757:24	8	(
ARGUMENT	757:25	757:25	8	tif
FIELD	757:25	757:25	9	tif
LEAF_NODE	757:25	757:25	10	tif
LEAF_NODE	757:28	757:28	8	)
LEAF_NODE	757:29	757:29	4	;
EXPR_STATEMENT	758:1	758:72	3	bufsize = _TIFFMultiplySSize ( tif , alpha ? 4 : 3 , tilesize , "gtTileSeparate" ) ;
EXPR	758:1	758:1	4	bufsize = _TIFFMultiplySSize ( tif , alpha ? 4 : 3 , tilesize , "gtTileSeparate" )
ASSIGN	758:1	758:11	5	bufsize = _TIFFMultiplySSize ( tif , alpha ? 4 : 3 , tilesize , "gtTileSeparate" )
LVAL	758:1	758:1	6	bufsize
FIELD	758:1	758:1	7	bufsize
LEAF_NODE	758:1	758:1	8	bufsize
ASSIGN_OP	758:9	758:9	6	=
LEAF_NODE	758:9	758:9	7	=
RVAL	758:11	758:11	6	_TIFFMultiplySSize ( tif , alpha ? 4 : 3 , tilesize , "gtTileSeparate" )
FUNCTION_CALL	758:11	758:71	7	_TIFFMultiplySSize ( tif , alpha ? 4 : 3 , tilesize , "gtTileSeparate" )
CALLEE	758:11	758:11	8	_TIFFMultiplySSize
LEAF_NODE	758:11	758:11	9	_TIFFMultiplySSize
LEAF_NODE	758:29	758:29	8	(
ARGUMENT	758:30	758:30	8	tif
FIELD	758:30	758:30	9	tif
LEAF_NODE	758:30	758:30	10	tif
LEAF_NODE	758:33	758:33	8	,
ARGUMENT	758:35	758:35	8	alpha ? 4 : 3
COND_EXPR	758:35	758:43	9	alpha ? 4 : 3
CONDITION	758:35	758:35	10	alpha
FIELD	758:35	758:35	11	alpha
LEAF_NODE	758:35	758:35	12	alpha
LEAF_NODE	758:40	758:40	10	?
EXPR	758:41	758:41	10	4
FIELD	758:41	758:41	11	4
LEAF_NODE	758:41	758:41	12	4
LEAF_NODE	758:42	758:42	10	:
FIELD	758:43	758:43	10	3
LEAF_NODE	758:43	758:43	11	3
LEAF_NODE	758:44	758:44	8	,
ARGUMENT	758:45	758:45	8	tilesize
FIELD	758:45	758:45	9	tilesize
LEAF_NODE	758:45	758:45	10	tilesize
LEAF_NODE	758:53	758:53	8	,
ARGUMENT	758:55	758:55	8	"gtTileSeparate"
FIELD	758:55	758:55	9	"gtTileSeparate"
LEAF_NODE	758:55	758:55	10	"gtTileSeparate"
LEAF_NODE	758:71	758:71	8	)
LEAF_NODE	758:72	758:72	4	;
SELECTION	759:1	759:19	3	
KEYWORD	759:1	759:1	4	if
LEAF_NODE	759:1	759:1	5	if
LEAF_NODE	759:4	759:4	4	(
CONDITION	759:5	759:5	4	bufsize == 0
EXPR	759:5	759:16	5	bufsize == 0
FIELD	759:5	759:5	6	bufsize
LEAF_NODE	759:5	759:5	7	bufsize
EQ_OPERATOR	759:13	759:13	6	==
LEAF_NODE	759:13	759:13	7	==
FIELD	759:16	759:16	6	0
LEAF_NODE	759:16	759:16	7	0
LEAF_NODE	759:17	759:17	4	)
STATEMENTS	759:19	761:1	4	
LEAF_NODE	759:19	759:19	5	{
STATEMENTS	760:2	760:2	5	
JUMP_STATEMENT	760:2	760:12	6	return ( 0 ) ;
KEYWORD	760:2	760:2	7	return
LEAF_NODE	760:2	760:2	8	return
DESTINATION	760:9	760:9	7	( 0 )
EXPR	760:9	760:11	8	( 0 )
LEAF_NODE	760:9	760:9	9	(
FIELD	760:10	760:10	9	0
LEAF_NODE	760:10	760:10	10	0
LEAF_NODE	760:11	760:11	9	)
LEAF_NODE	760:12	760:12	7	;
LEAF_NODE	761:1	761:1	5	}
EXPR_STATEMENT	763:1	763:42	3	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	763:1	763:1	4	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
FUNCTION_CALL	763:1	763:41	5	TIFFGetField ( tif , TIFFTAG_TILEWIDTH , & tw )
CALLEE	763:1	763:1	6	TIFFGetField
LEAF_NODE	763:1	763:1	7	TIFFGetField
LEAF_NODE	763:13	763:13	6	(
ARGUMENT	763:14	763:14	6	tif
FIELD	763:14	763:14	7	tif
LEAF_NODE	763:14	763:14	8	tif
LEAF_NODE	763:17	763:17	6	,
ARGUMENT	763:19	763:19	6	TIFFTAG_TILEWIDTH
FIELD	763:19	763:19	7	TIFFTAG_TILEWIDTH
LEAF_NODE	763:19	763:19	8	TIFFTAG_TILEWIDTH
LEAF_NODE	763:36	763:36	6	,
ARGUMENT	763:38	763:38	6	& tw
UNARY_EXPR	763:38	763:39	7	& tw
UNARY_OPERATOR	763:38	763:38	8	&
LEAF_NODE	763:38	763:38	9	&
FIELD	763:39	763:39	8	tw
LEAF_NODE	763:39	763:39	9	tw
LEAF_NODE	763:41	763:41	6	)
LEAF_NODE	763:42	763:42	4	;
EXPR_STATEMENT	764:1	764:43	3	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th ) ;
EXPR	764:1	764:1	4	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
FUNCTION_CALL	764:1	764:42	5	TIFFGetField ( tif , TIFFTAG_TILELENGTH , & th )
CALLEE	764:1	764:1	6	TIFFGetField
LEAF_NODE	764:1	764:1	7	TIFFGetField
LEAF_NODE	764:13	764:13	6	(
ARGUMENT	764:14	764:14	6	tif
FIELD	764:14	764:14	7	tif
LEAF_NODE	764:14	764:14	8	tif
LEAF_NODE	764:17	764:17	6	,
ARGUMENT	764:19	764:19	6	TIFFTAG_TILELENGTH
FIELD	764:19	764:19	7	TIFFTAG_TILELENGTH
LEAF_NODE	764:19	764:19	8	TIFFTAG_TILELENGTH
LEAF_NODE	764:37	764:37	6	,
ARGUMENT	764:39	764:39	6	& th
UNARY_EXPR	764:39	764:40	7	& th
UNARY_OPERATOR	764:39	764:39	8	&
LEAF_NODE	764:39	764:39	9	&
FIELD	764:40	764:40	8	th
LEAF_NODE	764:40	764:40	9	th
LEAF_NODE	764:42	764:42	6	)
LEAF_NODE	764:43	764:43	4	;
EXPR_STATEMENT	766:1	766:27	3	flip = setorientation ( img ) ;
EXPR	766:1	766:1	4	flip = setorientation ( img )
ASSIGN	766:1	766:8	5	flip = setorientation ( img )
LVAL	766:1	766:1	6	flip
FIELD	766:1	766:1	7	flip
LEAF_NODE	766:1	766:1	8	flip
ASSIGN_OP	766:6	766:6	6	=
LEAF_NODE	766:6	766:6	7	=
RVAL	766:8	766:8	6	setorientation ( img )
FUNCTION_CALL	766:8	766:26	7	setorientation ( img )
CALLEE	766:8	766:8	8	setorientation
LEAF_NODE	766:8	766:8	9	setorientation
LEAF_NODE	766:22	766:22	8	(
ARGUMENT	766:23	766:23	8	img
FIELD	766:23	766:23	9	img
LEAF_NODE	766:23	766:23	10	img
LEAF_NODE	766:26	766:26	8	)
LEAF_NODE	766:27	766:27	4	;
SELECTION	767:1	767:29	3	
KEYWORD	767:1	767:1	4	if
LEAF_NODE	767:1	767:1	5	if
LEAF_NODE	767:4	767:4	4	(
CONDITION	767:5	767:5	4	flip & FLIP_VERTICALLY
EXPR	767:5	767:12	5	flip & FLIP_VERTICALLY
FIELD	767:5	767:5	6	flip
LEAF_NODE	767:5	767:5	7	flip
LEAF_NODE	767:10	767:10	6	&
FIELD	767:12	767:12	6	FLIP_VERTICALLY
LEAF_NODE	767:12	767:12	7	FLIP_VERTICALLY
LEAF_NODE	767:27	767:27	4	)
STATEMENTS	767:29	770:1	4	
LEAF_NODE	767:29	767:29	5	{
STATEMENTS	768:2	769:2	5	
EXPR_STATEMENT	768:2	768:11	6	y = h - 1 ;
EXPR	768:2	768:2	7	y = h - 1
ASSIGN	768:2	768:6	8	y = h - 1
LVAL	768:2	768:2	9	y
FIELD	768:2	768:2	10	y
LEAF_NODE	768:2	768:2	11	y
ASSIGN_OP	768:4	768:4	9	=
LEAF_NODE	768:4	768:4	10	=
RVAL	768:6	768:10	9	h - 1
FIELD	768:6	768:6	10	h
LEAF_NODE	768:6	768:6	11	h
LEAF_NODE	768:8	768:8	10	-
FIELD	768:10	768:10	10	1
LEAF_NODE	768:10	768:10	11	1
LEAF_NODE	768:11	768:11	7	;
EXPR_STATEMENT	769:2	769:27	6	toskew = - ( int32 ) ( tw + w ) ;
EXPR	769:2	769:2	7	toskew = - ( int32 ) ( tw + w )
ASSIGN	769:2	769:11	8	toskew = - ( int32 ) ( tw + w )
LVAL	769:2	769:2	9	toskew
FIELD	769:2	769:2	10	toskew
LEAF_NODE	769:2	769:2	11	toskew
ASSIGN_OP	769:9	769:9	9	=
LEAF_NODE	769:9	769:9	10	=
RVAL	769:11	769:11	9	- ( int32 ) ( tw + w )
UNARY_EXPR	769:11	769:12	10	- ( int32 ) ( tw + w )
UNARY_OPERATOR	769:11	769:11	11	-
LEAF_NODE	769:11	769:11	12	-
FUNCTION_CALL	769:12	769:26	11	( int32 ) ( tw + w )
CALLEE	769:12	769:18	12	( int32 )
LEAF_NODE	769:12	769:12	13	(
FIELD	769:13	769:13	13	int32
LEAF_NODE	769:13	769:13	14	int32
LEAF_NODE	769:18	769:18	13	)
LEAF_NODE	769:19	769:19	12	(
ARGUMENT	769:20	769:25	12	tw + w
FIELD	769:20	769:20	13	tw
LEAF_NODE	769:20	769:20	14	tw
LEAF_NODE	769:23	769:23	13	+
FIELD	769:25	769:25	13	w
LEAF_NODE	769:25	769:25	14	w
LEAF_NODE	769:26	769:26	12	)
LEAF_NODE	769:27	769:27	7	;
LEAF_NODE	770:1	770:1	5	}
SELECTION	771:1	771:6	3	
KEYWORD	771:1	771:1	4	else
LEAF_NODE	771:1	771:1	5	else
STATEMENTS	771:6	774:1	4	
LEAF_NODE	771:6	771:6	5	{
STATEMENTS	772:2	773:2	5	
EXPR_STATEMENT	772:2	772:7	6	y = 0 ;
EXPR	772:2	772:2	7	y = 0
ASSIGN	772:2	772:6	8	y = 0
LVAL	772:2	772:2	9	y
FIELD	772:2	772:2	10	y
LEAF_NODE	772:2	772:2	11	y
ASSIGN_OP	772:4	772:4	9	=
LEAF_NODE	772:4	772:4	10	=
RVAL	772:6	772:6	9	0
FIELD	772:6	772:6	10	0
LEAF_NODE	772:6	772:6	11	0
LEAF_NODE	772:7	772:7	7	;
EXPR_STATEMENT	773:2	773:27	6	toskew = - ( int32 ) ( tw - w ) ;
EXPR	773:2	773:2	7	toskew = - ( int32 ) ( tw - w )
ASSIGN	773:2	773:11	8	toskew = - ( int32 ) ( tw - w )
LVAL	773:2	773:2	9	toskew
FIELD	773:2	773:2	10	toskew
LEAF_NODE	773:2	773:2	11	toskew
ASSIGN_OP	773:9	773:9	9	=
LEAF_NODE	773:9	773:9	10	=
RVAL	773:11	773:11	9	- ( int32 ) ( tw - w )
UNARY_EXPR	773:11	773:12	10	- ( int32 ) ( tw - w )
UNARY_OPERATOR	773:11	773:11	11	-
LEAF_NODE	773:11	773:11	12	-
FUNCTION_CALL	773:12	773:26	11	( int32 ) ( tw - w )
CALLEE	773:12	773:18	12	( int32 )
LEAF_NODE	773:12	773:12	13	(
FIELD	773:13	773:13	13	int32
LEAF_NODE	773:13	773:13	14	int32
LEAF_NODE	773:18	773:18	13	)
LEAF_NODE	773:19	773:19	12	(
ARGUMENT	773:20	773:25	12	tw - w
FIELD	773:20	773:20	13	tw
LEAF_NODE	773:20	773:20	14	tw
LEAF_NODE	773:23	773:23	13	-
FIELD	773:25	773:25	13	w
LEAF_NODE	773:25	773:25	14	w
LEAF_NODE	773:26	773:26	12	)
LEAF_NODE	773:27	773:27	7	;
LEAF_NODE	774:1	774:1	5	}
SELECTION	776:8	777:8	3	
KEYWORD	776:8	776:8	4	switch
LEAF_NODE	776:8	776:8	5	switch
LEAF_NODE	776:14	776:14	4	(
CONDITION	776:16	776:16	4	img -> photometric
EXPR	776:16	776:16	5	img -> photometric
FIELD	776:16	776:21	6	img -> photometric
LEAF_NODE	776:16	776:16	7	img
LEAF_NODE	776:19	776:19	7	->
LEAF_NODE	776:21	776:21	7	photometric
LEAF_NODE	776:33	776:33	4	)
STATEMENTS	777:8	787:8	4	
LEAF_NODE	777:8	777:8	5	{
STATEMENTS	778:10	786:12	5	
LABEL	778:10	778:37	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	778:10	778:10	7	case
LEAF_NODE	778:15	778:15	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	778:37	778:37	7	:
LABEL	779:10	779:37	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	779:10	779:10	7	case
LEAF_NODE	779:15	779:15	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	779:37	779:37	7	:
LABEL	780:10	780:34	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	780:10	780:10	7	case
LEAF_NODE	780:15	780:15	7	PHOTOMETRIC_PALETTE
LEAF_NODE	780:34	780:34	7	:
EXPR_STATEMENT	781:12	781:29	6	colorchannels = 1 ;
EXPR	781:12	781:12	7	colorchannels = 1
ASSIGN	781:12	781:28	8	colorchannels = 1
LVAL	781:12	781:12	9	colorchannels
FIELD	781:12	781:12	10	colorchannels
LEAF_NODE	781:12	781:12	11	colorchannels
ASSIGN_OP	781:26	781:26	9	=
LEAF_NODE	781:26	781:26	10	=
RVAL	781:28	781:28	9	1
FIELD	781:28	781:28	10	1
LEAF_NODE	781:28	781:28	11	1
LEAF_NODE	781:29	781:29	7	;
JUMP_STATEMENT	782:12	782:17	6	break DESTINATION ;
KEYWORD	782:12	782:12	7	break
LEAF_NODE	782:12	782:12	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	782:17	782:17	7	;
LABEL	784:10	784:17	6	default :
LEAF_NODE	784:10	784:10	7	default
LEAF_NODE	784:17	784:17	7	:
EXPR_STATEMENT	785:12	785:29	6	colorchannels = 3 ;
EXPR	785:12	785:12	7	colorchannels = 3
ASSIGN	785:12	785:28	8	colorchannels = 3
LVAL	785:12	785:12	9	colorchannels
FIELD	785:12	785:12	10	colorchannels
LEAF_NODE	785:12	785:12	11	colorchannels
ASSIGN_OP	785:26	785:26	9	=
LEAF_NODE	785:26	785:26	10	=
RVAL	785:28	785:28	9	3
FIELD	785:28	785:28	10	3
LEAF_NODE	785:28	785:28	11	3
LEAF_NODE	785:29	785:29	7	;
JUMP_STATEMENT	786:12	786:17	6	break DESTINATION ;
KEYWORD	786:12	786:12	7	break
LEAF_NODE	786:12	786:12	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	786:17	786:17	7	;
LEAF_NODE	787:8	787:8	5	}
EXPR_STATEMENT	792:1	792:41	3	leftmost_fromskew = img -> col_offset % tw ;
EXPR	792:1	792:1	4	leftmost_fromskew = img -> col_offset % tw
ASSIGN	792:1	792:21	5	leftmost_fromskew = img -> col_offset % tw
LVAL	792:1	792:1	6	leftmost_fromskew
FIELD	792:1	792:1	7	leftmost_fromskew
LEAF_NODE	792:1	792:1	8	leftmost_fromskew
ASSIGN_OP	792:19	792:19	6	=
LEAF_NODE	792:19	792:19	7	=
RVAL	792:21	792:39	6	img -> col_offset % tw
FIELD	792:21	792:26	7	img -> col_offset
LEAF_NODE	792:21	792:21	8	img
LEAF_NODE	792:24	792:24	8	->
LEAF_NODE	792:26	792:26	8	col_offset
LEAF_NODE	792:37	792:37	7	%
FIELD	792:39	792:39	7	tw
LEAF_NODE	792:39	792:39	8	tw
LEAF_NODE	792:41	792:41	4	;
EXPR_STATEMENT	793:1	793:37	3	leftmost_tw = tw - leftmost_fromskew ;
EXPR	793:1	793:1	4	leftmost_tw = tw - leftmost_fromskew
ASSIGN	793:1	793:15	5	leftmost_tw = tw - leftmost_fromskew
LVAL	793:1	793:1	6	leftmost_tw
FIELD	793:1	793:1	7	leftmost_tw
LEAF_NODE	793:1	793:1	8	leftmost_tw
ASSIGN_OP	793:13	793:13	6	=
LEAF_NODE	793:13	793:13	7	=
RVAL	793:15	793:20	6	tw - leftmost_fromskew
FIELD	793:15	793:15	7	tw
LEAF_NODE	793:15	793:15	8	tw
LEAF_NODE	793:18	793:18	7	-
FIELD	793:20	793:20	7	leftmost_fromskew
LEAF_NODE	793:20	793:20	8	leftmost_fromskew
LEAF_NODE	793:37	793:37	4	;
EXPR_STATEMENT	794:1	794:45	3	leftmost_toskew = toskew + leftmost_fromskew ;
EXPR	794:1	794:1	4	leftmost_toskew = toskew + leftmost_fromskew
ASSIGN	794:1	794:19	5	leftmost_toskew = toskew + leftmost_fromskew
LVAL	794:1	794:1	6	leftmost_toskew
FIELD	794:1	794:1	7	leftmost_toskew
LEAF_NODE	794:1	794:1	8	leftmost_toskew
ASSIGN_OP	794:17	794:17	6	=
LEAF_NODE	794:17	794:17	7	=
RVAL	794:19	794:28	6	toskew + leftmost_fromskew
FIELD	794:19	794:19	7	toskew
LEAF_NODE	794:19	794:19	8	toskew
LEAF_NODE	794:26	794:26	7	+
FIELD	794:28	794:28	7	leftmost_fromskew
LEAF_NODE	794:28	794:28	8	leftmost_fromskew
LEAF_NODE	794:45	794:45	4	;
ITERATION	795:1	796:1	3	
KEYWORD	795:1	795:1	4	for
LEAF_NODE	795:1	795:1	5	for
LEAF_NODE	795:5	795:5	4	(
FOR_INIT	795:6	795:13	4	row = 0 ;
EXPR	795:6	795:6	5	row = 0
ASSIGN	795:6	795:12	6	row = 0
LVAL	795:6	795:6	7	row
FIELD	795:6	795:6	8	row
LEAF_NODE	795:6	795:6	9	row
ASSIGN_OP	795:10	795:10	7	=
LEAF_NODE	795:10	795:10	8	=
RVAL	795:12	795:12	7	0
FIELD	795:12	795:12	8	0
LEAF_NODE	795:12	795:12	9	0
LEAF_NODE	795:13	795:13	5	;
CONDITION	795:15	795:15	4	ret != 0 && row < h
EXPR	795:15	795:15	5	ret != 0 && row < h
AND	795:15	795:27	6	ret != 0 && row < h
EXPR	795:15	795:22	7	ret != 0
FIELD	795:15	795:15	8	ret
LEAF_NODE	795:15	795:15	9	ret
EQ_OPERATOR	795:19	795:19	8	!=
LEAF_NODE	795:19	795:19	9	!=
FIELD	795:22	795:22	8	0
LEAF_NODE	795:22	795:22	9	0
LEAF_NODE	795:24	795:24	7	&&
EXPR	795:27	795:33	7	row < h
FIELD	795:27	795:27	8	row
LEAF_NODE	795:27	795:27	9	row
REL_OPERATOR	795:31	795:31	8	<
LEAF_NODE	795:31	795:31	9	<
FIELD	795:33	795:33	8	h
LEAF_NODE	795:33	795:33	9	h
LEAF_NODE	795:34	795:34	4	;
FOR_EXPR	795:36	795:36	4	row += nrow
EXPR	795:36	795:36	5	row += nrow
ASSIGN	795:36	795:43	6	row += nrow
LVAL	795:36	795:36	7	row
FIELD	795:36	795:36	8	row
LEAF_NODE	795:36	795:36	9	row
ASSIGN_OP	795:40	795:40	7	+=
LEAF_NODE	795:40	795:40	8	+=
RVAL	795:43	795:43	7	nrow
FIELD	795:43	795:43	8	nrow
LEAF_NODE	795:43	795:43	9	nrow
LEAF_NODE	795:47	795:47	4	)
STATEMENTS	796:1	884:1	4	
LEAF_NODE	796:1	796:1	5	{
STATEMENTS	797:2	883:63	5	
EXPR_STATEMENT	797:2	797:48	6	rowstoread = th - ( row + img -> row_offset ) % th ;
EXPR	797:2	797:2	7	rowstoread = th - ( row + img -> row_offset ) % th
ASSIGN	797:2	797:15	8	rowstoread = th - ( row + img -> row_offset ) % th
LVAL	797:2	797:2	9	rowstoread
FIELD	797:2	797:2	10	rowstoread
LEAF_NODE	797:2	797:2	11	rowstoread
ASSIGN_OP	797:13	797:13	9	=
LEAF_NODE	797:13	797:13	10	=
RVAL	797:15	797:46	9	th - ( row + img -> row_offset ) % th
FIELD	797:15	797:15	10	th
LEAF_NODE	797:15	797:15	11	th
LEAF_NODE	797:18	797:18	10	-
LEAF_NODE	797:20	797:20	10	(
FIELD	797:21	797:21	10	row
LEAF_NODE	797:21	797:21	11	row
LEAF_NODE	797:25	797:25	10	+
FIELD	797:27	797:32	10	img -> row_offset
LEAF_NODE	797:27	797:27	11	img
LEAF_NODE	797:30	797:30	11	->
LEAF_NODE	797:32	797:32	11	row_offset
LEAF_NODE	797:42	797:42	10	)
LEAF_NODE	797:44	797:44	10	%
FIELD	797:46	797:46	10	th
LEAF_NODE	797:46	797:46	11	th
LEAF_NODE	797:48	797:48	7	;
EXPR_STATEMENT	798:2	798:54	6	nrow = ( row + rowstoread > h ? h - row : rowstoread ) ;
EXPR	798:2	798:2	7	nrow = ( row + rowstoread > h ? h - row : rowstoread )
ASSIGN	798:2	798:9	8	nrow = ( row + rowstoread > h ? h - row : rowstoread )
LVAL	798:2	798:2	9	nrow
FIELD	798:2	798:2	10	nrow
LEAF_NODE	798:2	798:2	11	nrow
ASSIGN_OP	798:7	798:7	9	=
LEAF_NODE	798:7	798:7	10	=
RVAL	798:9	798:53	9	( row + rowstoread > h ? h - row : rowstoread )
LEAF_NODE	798:9	798:9	10	(
COND_EXPR	798:10	798:43	10	row + rowstoread > h ? h - row : rowstoread
CONDITION	798:10	798:29	11	row + rowstoread > h
FIELD	798:10	798:10	12	row
LEAF_NODE	798:10	798:10	13	row
LEAF_NODE	798:14	798:14	12	+
FIELD	798:16	798:16	12	rowstoread
LEAF_NODE	798:16	798:16	13	rowstoread
REL_OPERATOR	798:27	798:27	12	>
LEAF_NODE	798:27	798:27	13	>
FIELD	798:29	798:29	12	h
LEAF_NODE	798:29	798:29	13	h
LEAF_NODE	798:31	798:31	11	?
EXPR	798:33	798:37	11	h - row
FIELD	798:33	798:33	12	h
LEAF_NODE	798:33	798:33	13	h
LEAF_NODE	798:35	798:35	12	-
FIELD	798:37	798:37	12	row
LEAF_NODE	798:37	798:37	13	row
LEAF_NODE	798:41	798:41	11	:
FIELD	798:43	798:43	11	rowstoread
LEAF_NODE	798:43	798:43	12	rowstoread
LEAF_NODE	798:53	798:53	10	)
LEAF_NODE	798:54	798:54	7	;
EXPR_STATEMENT	799:2	799:30	6	fromskew = leftmost_fromskew ;
EXPR	799:2	799:2	7	fromskew = leftmost_fromskew
ASSIGN	799:2	799:13	8	fromskew = leftmost_fromskew
LVAL	799:2	799:2	9	fromskew
FIELD	799:2	799:2	10	fromskew
LEAF_NODE	799:2	799:2	11	fromskew
ASSIGN_OP	799:11	799:11	9	=
LEAF_NODE	799:11	799:11	10	=
RVAL	799:13	799:13	9	leftmost_fromskew
FIELD	799:13	799:13	10	leftmost_fromskew
LEAF_NODE	799:13	799:13	11	leftmost_fromskew
LEAF_NODE	799:30	799:30	7	;
EXPR_STATEMENT	800:2	800:23	6	this_tw = leftmost_tw ;
EXPR	800:2	800:2	7	this_tw = leftmost_tw
ASSIGN	800:2	800:12	8	this_tw = leftmost_tw
LVAL	800:2	800:2	9	this_tw
FIELD	800:2	800:2	10	this_tw
LEAF_NODE	800:2	800:2	11	this_tw
ASSIGN_OP	800:10	800:10	9	=
LEAF_NODE	800:10	800:10	10	=
RVAL	800:12	800:12	9	leftmost_tw
FIELD	800:12	800:12	10	leftmost_tw
LEAF_NODE	800:12	800:12	11	leftmost_tw
LEAF_NODE	800:23	800:23	7	;
EXPR_STATEMENT	801:2	801:31	6	this_toskew = leftmost_toskew ;
EXPR	801:2	801:2	7	this_toskew = leftmost_toskew
ASSIGN	801:2	801:16	8	this_toskew = leftmost_toskew
LVAL	801:2	801:2	9	this_toskew
FIELD	801:2	801:2	10	this_toskew
LEAF_NODE	801:2	801:2	11	this_toskew
ASSIGN_OP	801:14	801:14	9	=
LEAF_NODE	801:14	801:14	10	=
RVAL	801:16	801:16	9	leftmost_toskew
FIELD	801:16	801:16	10	leftmost_toskew
LEAF_NODE	801:16	801:16	11	leftmost_toskew
LEAF_NODE	801:31	801:31	7	;
EXPR_STATEMENT	802:2	802:11	6	tocol = 0 ;
EXPR	802:2	802:2	7	tocol = 0
ASSIGN	802:2	802:10	8	tocol = 0
LVAL	802:2	802:2	9	tocol
FIELD	802:2	802:2	10	tocol
LEAF_NODE	802:2	802:2	11	tocol
ASSIGN_OP	802:8	802:8	9	=
LEAF_NODE	802:8	802:8	10	=
RVAL	802:10	802:10	9	0
FIELD	802:10	802:10	10	0
LEAF_NODE	802:10	802:10	11	0
LEAF_NODE	802:11	802:11	7	;
EXPR_STATEMENT	803:2	803:23	6	col = img -> col_offset ;
EXPR	803:2	803:2	7	col = img -> col_offset
ASSIGN	803:2	803:8	8	col = img -> col_offset
LVAL	803:2	803:2	9	col
FIELD	803:2	803:2	10	col
LEAF_NODE	803:2	803:2	11	col
ASSIGN_OP	803:6	803:6	9	=
LEAF_NODE	803:6	803:6	10	=
RVAL	803:8	803:8	9	img -> col_offset
FIELD	803:8	803:13	10	img -> col_offset
LEAF_NODE	803:8	803:8	11	img
LEAF_NODE	803:11	803:11	11	->
LEAF_NODE	803:13	803:13	11	col_offset
LEAF_NODE	803:23	803:23	7	;
ITERATION	804:2	805:2	6	
KEYWORD	804:2	804:2	7	while
LEAF_NODE	804:2	804:2	8	while
LEAF_NODE	804:8	804:8	7	(
CONDITION	804:9	804:9	7	tocol < w
EXPR	804:9	804:17	8	tocol < w
FIELD	804:9	804:9	9	tocol
LEAF_NODE	804:9	804:9	10	tocol
REL_OPERATOR	804:15	804:15	9	<
LEAF_NODE	804:15	804:15	10	<
FIELD	804:17	804:17	9	w
LEAF_NODE	804:17	804:17	10	w
LEAF_NODE	804:18	804:18	7	)
STATEMENTS	805:2	881:2	7	
LEAF_NODE	805:2	805:2	8	{
STATEMENTS	806:24	880:3	8	
SELECTION	806:24	807:24	9	
KEYWORD	806:24	806:24	10	if
LEAF_NODE	806:24	806:24	11	if
LEAF_NODE	806:26	806:26	10	(
CONDITION	806:28	806:28	10	buf == NULL
EXPR	806:28	806:35	11	buf == NULL
FIELD	806:28	806:28	12	buf
LEAF_NODE	806:28	806:28	13	buf
EQ_OPERATOR	806:32	806:32	12	==
LEAF_NODE	806:32	806:32	13	==
FIELD	806:35	806:35	12	NULL
LEAF_NODE	806:35	806:35	13	NULL
LEAF_NODE	806:40	806:40	10	)
STATEMENTS	807:24	828:24	10	
LEAF_NODE	807:24	807:24	11	{
STATEMENTS	808:28	822:28	11	
SELECTION	808:28	812:28	12	
KEYWORD	808:28	808:28	13	if
LEAF_NODE	808:28	808:28	14	if
LEAF_NODE	808:31	808:31	13	(
CONDITION	808:32	808:32	13	_TIFFReadTileAndAllocBuffer ( tif , ( void * * ) & buf , bufsize , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
EXPR	808:32	808:32	14	_TIFFReadTileAndAllocBuffer ( tif , ( void * * ) & buf , bufsize , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
AND	808:32	811:35	15	_TIFFReadTileAndAllocBuffer ( tif , ( void * * ) & buf , bufsize , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
EXPR	808:32	810:75	16	_TIFFReadTileAndAllocBuffer ( tif , ( void * * ) & buf , bufsize , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	808:32	810:59	17	_TIFFReadTileAndAllocBuffer ( tif , ( void * * ) & buf , bufsize , col , row + img -> row_offset , 0 , 0 )
CALLEE	808:32	808:32	18	_TIFFReadTileAndAllocBuffer
LEAF_NODE	808:32	808:32	19	_TIFFReadTileAndAllocBuffer
LEAF_NODE	808:59	808:59	18	(
ARGUMENT	809:36	809:36	18	tif
FIELD	809:36	809:36	19	tif
LEAF_NODE	809:36	809:36	20	tif
LEAF_NODE	809:39	809:39	18	,
ARGUMENT	809:41	809:50	18	( void * * ) & buf
LEAF_NODE	809:41	809:41	19	(
TYPE_NAME	809:42	809:42	19	void
LEAF_NODE	809:42	809:42	20	void
LEAF_NODE	809:46	809:46	19	*
LEAF_NODE	809:47	809:47	19	*
LEAF_NODE	809:48	809:48	19	)
UNARY_EXPR	809:50	809:51	19	& buf
UNARY_OPERATOR	809:50	809:50	20	&
LEAF_NODE	809:50	809:50	21	&
FIELD	809:51	809:51	20	buf
LEAF_NODE	809:51	809:51	21	buf
LEAF_NODE	809:54	809:54	18	,
ARGUMENT	809:56	809:56	18	bufsize
FIELD	809:56	809:56	19	bufsize
LEAF_NODE	809:56	809:56	20	bufsize
LEAF_NODE	809:63	809:63	18	,
ARGUMENT	809:65	809:65	18	col
FIELD	809:65	809:65	19	col
LEAF_NODE	809:65	809:65	20	col
LEAF_NODE	809:68	809:68	18	,
ARGUMENT	810:36	810:40	18	row + img -> row_offset
FIELD	810:36	810:36	19	row
LEAF_NODE	810:36	810:36	20	row
LEAF_NODE	810:39	810:39	19	+
FIELD	810:40	810:45	19	img -> row_offset
LEAF_NODE	810:40	810:40	20	img
LEAF_NODE	810:43	810:43	20	->
LEAF_NODE	810:45	810:45	20	row_offset
LEAF_NODE	810:55	810:55	18	,
ARGUMENT	810:56	810:56	18	0
FIELD	810:56	810:56	19	0
LEAF_NODE	810:56	810:56	20	0
LEAF_NODE	810:57	810:57	18	,
ARGUMENT	810:58	810:58	18	0
FIELD	810:58	810:58	19	0
LEAF_NODE	810:58	810:58	20	0
LEAF_NODE	810:59	810:59	18	)
EQ_OPERATOR	810:60	810:60	17	==
LEAF_NODE	810:60	810:60	18	==
LEAF_NODE	810:62	810:62	17	(
TYPE_NAME	810:63	810:63	17	tmsize_t
LEAF_NODE	810:63	810:63	18	tmsize_t
LEAF_NODE	810:71	810:71	17	)
LEAF_NODE	810:72	810:72	17	(
UNARY_EXPR	810:73	810:74	17	- 1
UNARY_OPERATOR	810:73	810:73	18	-
LEAF_NODE	810:73	810:73	19	-
FIELD	810:74	810:74	18	1
LEAF_NODE	810:74	810:74	19	1
LEAF_NODE	810:75	810:75	17	)
LEAF_NODE	811:32	811:32	16	&&
EXPR	811:35	811:65	16	( buf == NULL || img -> stoponerr )
LEAF_NODE	811:35	811:35	17	(
OR	811:36	811:51	17	buf == NULL || img -> stoponerr
EXPR	811:36	811:43	18	buf == NULL
FIELD	811:36	811:36	19	buf
LEAF_NODE	811:36	811:36	20	buf
EQ_OPERATOR	811:40	811:40	19	==
LEAF_NODE	811:40	811:40	20	==
FIELD	811:43	811:43	19	NULL
LEAF_NODE	811:43	811:43	20	NULL
LEAF_NODE	811:48	811:48	18	||
EXPR	811:51	811:51	18	img -> stoponerr
FIELD	811:51	811:56	19	img -> stoponerr
LEAF_NODE	811:51	811:51	20	img
LEAF_NODE	811:54	811:54	20	->
LEAF_NODE	811:56	811:56	20	stoponerr
LEAF_NODE	811:65	811:65	17	)
LEAF_NODE	811:66	811:66	13	)
STATEMENTS	812:28	815:28	13	
LEAF_NODE	812:28	812:28	14	{
STATEMENTS	813:36	814:36	14	
EXPR_STATEMENT	813:36	813:43	15	ret = 0 ;
EXPR	813:36	813:36	16	ret = 0
ASSIGN	813:36	813:42	17	ret = 0
LVAL	813:36	813:36	18	ret
FIELD	813:36	813:36	19	ret
LEAF_NODE	813:36	813:36	20	ret
ASSIGN_OP	813:40	813:40	18	=
LEAF_NODE	813:40	813:40	19	=
RVAL	813:42	813:42	18	0
FIELD	813:42	813:42	19	0
LEAF_NODE	813:42	813:42	20	0
LEAF_NODE	813:43	813:43	16	;
JUMP_STATEMENT	814:36	814:41	15	break DESTINATION ;
KEYWORD	814:36	814:36	16	break
LEAF_NODE	814:36	814:36	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	814:41	814:41	16	;
LEAF_NODE	815:28	815:28	14	}
EXPR_STATEMENT	816:28	816:36	12	p0 = buf ;
EXPR	816:28	816:28	13	p0 = buf
ASSIGN	816:28	816:33	14	p0 = buf
LVAL	816:28	816:28	15	p0
FIELD	816:28	816:28	16	p0
LEAF_NODE	816:28	816:28	17	p0
ASSIGN_OP	816:31	816:31	15	=
LEAF_NODE	816:31	816:31	16	=
RVAL	816:33	816:33	15	buf
FIELD	816:33	816:33	16	buf
LEAF_NODE	816:33	816:33	17	buf
LEAF_NODE	816:36	816:36	13	;
SELECTION	817:28	818:28	12	
KEYWORD	817:28	817:28	13	if
LEAF_NODE	817:28	817:28	14	if
LEAF_NODE	817:30	817:30	13	(
CONDITION	817:32	817:32	13	colorchannels == 1
EXPR	817:32	817:49	14	colorchannels == 1
FIELD	817:32	817:32	15	colorchannels
LEAF_NODE	817:32	817:32	16	colorchannels
EQ_OPERATOR	817:46	817:46	15	==
LEAF_NODE	817:46	817:46	16	==
FIELD	817:49	817:49	15	1
LEAF_NODE	817:49	817:49	16	1
LEAF_NODE	817:51	817:51	13	)
STATEMENTS	818:28	821:28	13	
LEAF_NODE	818:28	818:28	14	{
STATEMENTS	819:32	820:32	14	
EXPR_STATEMENT	819:32	819:44	15	p2 = p1 = p0 ;
EXPR	819:32	819:32	16	p2 = p1 = p0
ASSIGN	819:32	819:37	17	p2 = p1 = p0
LVAL	819:32	819:32	18	p2
FIELD	819:32	819:32	19	p2
LEAF_NODE	819:32	819:32	20	p2
ASSIGN_OP	819:35	819:35	18	=
LEAF_NODE	819:35	819:35	19	=
RVAL	819:37	819:37	18	p1 = p0
ASSIGN	819:37	819:42	19	p1 = p0
LVAL	819:37	819:37	20	p1
FIELD	819:37	819:37	21	p1
LEAF_NODE	819:37	819:37	22	p1
ASSIGN_OP	819:40	819:40	20	=
LEAF_NODE	819:40	819:40	21	=
RVAL	819:42	819:42	20	p0
FIELD	819:42	819:42	21	p0
LEAF_NODE	819:42	819:42	22	p0
LEAF_NODE	819:44	819:44	16	;
EXPR_STATEMENT	820:32	820:65	15	pa = ( alpha ? ( p0 + 3 * tilesize ) : NULL ) ;
EXPR	820:32	820:32	16	pa = ( alpha ? ( p0 + 3 * tilesize ) : NULL )
ASSIGN	820:32	820:37	17	pa = ( alpha ? ( p0 + 3 * tilesize ) : NULL )
LVAL	820:32	820:32	18	pa
FIELD	820:32	820:32	19	pa
LEAF_NODE	820:32	820:32	20	pa
ASSIGN_OP	820:35	820:35	18	=
LEAF_NODE	820:35	820:35	19	=
RVAL	820:37	820:64	18	( alpha ? ( p0 + 3 * tilesize ) : NULL )
LEAF_NODE	820:37	820:37	19	(
COND_EXPR	820:38	820:60	19	alpha ? ( p0 + 3 * tilesize ) : NULL
CONDITION	820:38	820:38	20	alpha
FIELD	820:38	820:38	21	alpha
LEAF_NODE	820:38	820:38	22	alpha
LEAF_NODE	820:43	820:43	20	?
EXPR	820:44	820:58	20	( p0 + 3 * tilesize )
LEAF_NODE	820:44	820:44	21	(
FIELD	820:45	820:45	21	p0
LEAF_NODE	820:45	820:45	22	p0
LEAF_NODE	820:47	820:47	21	+
FIELD	820:48	820:48	21	3
LEAF_NODE	820:48	820:48	22	3
LEAF_NODE	820:49	820:49	21	*
FIELD	820:50	820:50	21	tilesize
LEAF_NODE	820:50	820:50	22	tilesize
LEAF_NODE	820:58	820:58	21	)
LEAF_NODE	820:59	820:59	20	:
FIELD	820:60	820:60	20	NULL
LEAF_NODE	820:60	820:60	21	NULL
LEAF_NODE	820:64	820:64	19	)
LEAF_NODE	820:65	820:65	16	;
LEAF_NODE	821:28	821:28	14	}
SELECTION	822:28	823:28	12	
KEYWORD	822:28	822:28	13	else
LEAF_NODE	822:28	822:28	14	else
STATEMENTS	823:28	827:28	13	
LEAF_NODE	823:28	823:28	14	{
STATEMENTS	824:32	826:32	14	
EXPR_STATEMENT	824:32	824:50	15	p1 = p0 + tilesize ;
EXPR	824:32	824:32	16	p1 = p0 + tilesize
ASSIGN	824:32	824:37	17	p1 = p0 + tilesize
LVAL	824:32	824:32	18	p1
FIELD	824:32	824:32	19	p1
LEAF_NODE	824:32	824:32	20	p1
ASSIGN_OP	824:35	824:35	18	=
LEAF_NODE	824:35	824:35	19	=
RVAL	824:37	824:42	18	p0 + tilesize
FIELD	824:37	824:37	19	p0
LEAF_NODE	824:37	824:37	20	p0
LEAF_NODE	824:40	824:40	19	+
FIELD	824:42	824:42	19	tilesize
LEAF_NODE	824:42	824:42	20	tilesize
LEAF_NODE	824:50	824:50	16	;
EXPR_STATEMENT	825:32	825:50	15	p2 = p1 + tilesize ;
EXPR	825:32	825:32	16	p2 = p1 + tilesize
ASSIGN	825:32	825:37	17	p2 = p1 + tilesize
LVAL	825:32	825:32	18	p2
FIELD	825:32	825:32	19	p2
LEAF_NODE	825:32	825:32	20	p2
ASSIGN_OP	825:35	825:35	18	=
LEAF_NODE	825:35	825:35	19	=
RVAL	825:37	825:42	18	p1 + tilesize
FIELD	825:37	825:37	19	p1
LEAF_NODE	825:37	825:37	20	p1
LEAF_NODE	825:40	825:40	19	+
FIELD	825:42	825:42	19	tilesize
LEAF_NODE	825:42	825:42	20	tilesize
LEAF_NODE	825:50	825:50	16	;
EXPR_STATEMENT	826:32	826:63	15	pa = ( alpha ? ( p2 + tilesize ) : NULL ) ;
EXPR	826:32	826:32	16	pa = ( alpha ? ( p2 + tilesize ) : NULL )
ASSIGN	826:32	826:37	17	pa = ( alpha ? ( p2 + tilesize ) : NULL )
LVAL	826:32	826:32	18	pa
FIELD	826:32	826:32	19	pa
LEAF_NODE	826:32	826:32	20	pa
ASSIGN_OP	826:35	826:35	18	=
LEAF_NODE	826:35	826:35	19	=
RVAL	826:37	826:62	18	( alpha ? ( p2 + tilesize ) : NULL )
LEAF_NODE	826:37	826:37	19	(
COND_EXPR	826:38	826:58	19	alpha ? ( p2 + tilesize ) : NULL
CONDITION	826:38	826:38	20	alpha
FIELD	826:38	826:38	21	alpha
LEAF_NODE	826:38	826:38	22	alpha
LEAF_NODE	826:43	826:43	20	?
EXPR	826:44	826:56	20	( p2 + tilesize )
LEAF_NODE	826:44	826:44	21	(
FIELD	826:45	826:45	21	p2
LEAF_NODE	826:45	826:45	22	p2
LEAF_NODE	826:47	826:47	21	+
FIELD	826:48	826:48	21	tilesize
LEAF_NODE	826:48	826:48	22	tilesize
LEAF_NODE	826:56	826:56	21	)
LEAF_NODE	826:57	826:57	20	:
FIELD	826:58	826:58	20	NULL
LEAF_NODE	826:58	826:58	21	NULL
LEAF_NODE	826:62	826:62	19	)
LEAF_NODE	826:63	826:63	16	;
LEAF_NODE	827:28	827:28	14	}
LEAF_NODE	828:24	828:24	11	}
SELECTION	829:3	829:8	9	
KEYWORD	829:3	829:3	10	else
LEAF_NODE	829:3	829:3	11	else
STATEMENTS	829:8	829:8	10	
SELECTION	829:8	831:3	11	
KEYWORD	829:8	829:8	12	if
LEAF_NODE	829:8	829:8	13	if
LEAF_NODE	829:11	829:11	12	(
CONDITION	829:12	829:12	12	TIFFReadTile ( tif , p0 , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	829:12	829:12	13	TIFFReadTile ( tif , p0 , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	829:12	830:51	14	TIFFReadTile ( tif , p0 , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	829:12	830:46	15	TIFFReadTile ( tif , p0 , col , row + img -> row_offset , 0 , 0 ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	829:12	830:30	16	TIFFReadTile ( tif , p0 , col , row + img -> row_offset , 0 , 0 )
CALLEE	829:12	829:12	17	TIFFReadTile
LEAF_NODE	829:12	829:12	18	TIFFReadTile
LEAF_NODE	829:24	829:24	17	(
ARGUMENT	829:25	829:25	17	tif
FIELD	829:25	829:25	18	tif
LEAF_NODE	829:25	829:25	19	tif
LEAF_NODE	829:28	829:28	17	,
ARGUMENT	829:30	829:30	17	p0
FIELD	829:30	829:30	18	p0
LEAF_NODE	829:30	829:30	19	p0
LEAF_NODE	829:32	829:32	17	,
ARGUMENT	829:34	829:34	17	col
FIELD	829:34	829:34	18	col
LEAF_NODE	829:34	829:34	19	col
LEAF_NODE	829:37	829:37	17	,
ARGUMENT	830:7	830:11	17	row + img -> row_offset
FIELD	830:7	830:7	18	row
LEAF_NODE	830:7	830:7	19	row
LEAF_NODE	830:10	830:10	18	+
FIELD	830:11	830:16	18	img -> row_offset
LEAF_NODE	830:11	830:11	19	img
LEAF_NODE	830:14	830:14	19	->
LEAF_NODE	830:16	830:16	19	row_offset
LEAF_NODE	830:26	830:26	17	,
ARGUMENT	830:27	830:27	17	0
FIELD	830:27	830:27	18	0
LEAF_NODE	830:27	830:27	19	0
LEAF_NODE	830:28	830:28	17	,
ARGUMENT	830:29	830:29	17	0
FIELD	830:29	830:29	18	0
LEAF_NODE	830:29	830:29	19	0
LEAF_NODE	830:30	830:30	17	)
EQ_OPERATOR	830:31	830:31	16	==
LEAF_NODE	830:31	830:31	17	==
LEAF_NODE	830:33	830:33	16	(
TYPE_NAME	830:34	830:34	16	tmsize_t
LEAF_NODE	830:34	830:34	17	tmsize_t
LEAF_NODE	830:42	830:42	16	)
LEAF_NODE	830:43	830:43	16	(
UNARY_EXPR	830:44	830:45	16	- 1
UNARY_OPERATOR	830:44	830:44	17	-
LEAF_NODE	830:44	830:44	18	-
FIELD	830:45	830:45	17	1
LEAF_NODE	830:45	830:45	18	1
LEAF_NODE	830:46	830:46	16	)
LEAF_NODE	830:48	830:48	15	&&
EXPR	830:51	830:51	15	img -> stoponerr
FIELD	830:51	830:56	16	img -> stoponerr
LEAF_NODE	830:51	830:51	17	img
LEAF_NODE	830:54	830:54	17	->
LEAF_NODE	830:56	830:56	17	stoponerr
LEAF_NODE	830:65	830:65	12	)
STATEMENTS	831:3	834:3	12	
LEAF_NODE	831:3	831:3	13	{
STATEMENTS	832:4	833:4	13	
EXPR_STATEMENT	832:4	832:11	14	ret = 0 ;
EXPR	832:4	832:4	15	ret = 0
ASSIGN	832:4	832:10	16	ret = 0
LVAL	832:4	832:4	17	ret
FIELD	832:4	832:4	18	ret
LEAF_NODE	832:4	832:4	19	ret
ASSIGN_OP	832:8	832:8	17	=
LEAF_NODE	832:8	832:8	18	=
RVAL	832:10	832:10	17	0
FIELD	832:10	832:10	18	0
LEAF_NODE	832:10	832:10	19	0
LEAF_NODE	832:11	832:11	15	;
JUMP_STATEMENT	833:4	833:9	14	break DESTINATION ;
KEYWORD	833:4	833:4	15	break
LEAF_NODE	833:4	833:4	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	833:9	833:9	15	;
LEAF_NODE	834:3	834:3	13	}
SELECTION	835:3	839:3	9	
KEYWORD	835:3	835:3	10	if
LEAF_NODE	835:3	835:3	11	if
LEAF_NODE	835:6	835:6	10	(
CONDITION	835:7	835:7	10	colorchannels > 1 && TIFFReadTile ( tif , p1 , col , row + img -> row_offset , 0 , 1 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	835:7	835:7	11	colorchannels > 1 && TIFFReadTile ( tif , p1 , col , row + img -> row_offset , 0 , 1 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	835:7	836:31	12	colorchannels > 1 && TIFFReadTile ( tif , p1 , col , row + img -> row_offset , 0 , 1 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	835:7	835:23	13	colorchannels > 1
FIELD	835:7	835:7	14	colorchannels
LEAF_NODE	835:7	835:7	15	colorchannels
REL_OPERATOR	835:21	835:21	14	>
LEAF_NODE	835:21	835:21	15	>
FIELD	835:23	835:23	14	1
LEAF_NODE	835:23	835:23	15	1
LEAF_NODE	836:28	836:28	13	&&
EXPR	836:31	836:31	13	TIFFReadTile ( tif , p1 , col , row + img -> row_offset , 0 , 1 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	836:31	838:31	14	TIFFReadTile ( tif , p1 , col , row + img -> row_offset , 0 , 1 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	836:31	837:85	15	TIFFReadTile ( tif , p1 , col , row + img -> row_offset , 0 , 1 ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	836:31	837:67	16	TIFFReadTile ( tif , p1 , col , row + img -> row_offset , 0 , 1 )
CALLEE	836:31	836:31	17	TIFFReadTile
LEAF_NODE	836:31	836:31	18	TIFFReadTile
LEAF_NODE	836:43	836:43	17	(
ARGUMENT	836:44	836:44	17	tif
FIELD	836:44	836:44	18	tif
LEAF_NODE	836:44	836:44	19	tif
LEAF_NODE	836:47	836:47	17	,
ARGUMENT	836:49	836:49	17	p1
FIELD	836:49	836:49	18	p1
LEAF_NODE	836:49	836:49	19	p1
LEAF_NODE	836:51	836:51	17	,
ARGUMENT	836:53	836:53	17	col
FIELD	836:53	836:53	18	col
LEAF_NODE	836:53	836:53	19	col
LEAF_NODE	836:56	836:56	17	,
ARGUMENT	837:44	837:48	17	row + img -> row_offset
FIELD	837:44	837:44	18	row
LEAF_NODE	837:44	837:44	19	row
LEAF_NODE	837:47	837:47	18	+
FIELD	837:48	837:53	18	img -> row_offset
LEAF_NODE	837:48	837:48	19	img
LEAF_NODE	837:51	837:51	19	->
LEAF_NODE	837:53	837:53	19	row_offset
LEAF_NODE	837:63	837:63	17	,
ARGUMENT	837:64	837:64	17	0
FIELD	837:64	837:64	18	0
LEAF_NODE	837:64	837:64	19	0
LEAF_NODE	837:65	837:65	17	,
ARGUMENT	837:66	837:66	17	1
FIELD	837:66	837:66	18	1
LEAF_NODE	837:66	837:66	19	1
LEAF_NODE	837:67	837:67	17	)
EQ_OPERATOR	837:69	837:69	16	==
LEAF_NODE	837:69	837:69	17	==
LEAF_NODE	837:72	837:72	16	(
TYPE_NAME	837:73	837:73	16	tmsize_t
LEAF_NODE	837:73	837:73	17	tmsize_t
LEAF_NODE	837:81	837:81	16	)
LEAF_NODE	837:82	837:82	16	(
UNARY_EXPR	837:83	837:84	16	- 1
UNARY_OPERATOR	837:83	837:83	17	-
LEAF_NODE	837:83	837:83	18	-
FIELD	837:84	837:84	17	1
LEAF_NODE	837:84	837:84	18	1
LEAF_NODE	837:85	837:85	16	)
LEAF_NODE	838:28	838:28	15	&&
EXPR	838:31	838:31	15	img -> stoponerr
FIELD	838:31	838:36	16	img -> stoponerr
LEAF_NODE	838:31	838:31	17	img
LEAF_NODE	838:34	838:34	17	->
LEAF_NODE	838:36	838:36	17	stoponerr
LEAF_NODE	838:45	838:45	10	)
STATEMENTS	839:3	842:3	10	
LEAF_NODE	839:3	839:3	11	{
STATEMENTS	840:4	841:4	11	
EXPR_STATEMENT	840:4	840:11	12	ret = 0 ;
EXPR	840:4	840:4	13	ret = 0
ASSIGN	840:4	840:10	14	ret = 0
LVAL	840:4	840:4	15	ret
FIELD	840:4	840:4	16	ret
LEAF_NODE	840:4	840:4	17	ret
ASSIGN_OP	840:8	840:8	15	=
LEAF_NODE	840:8	840:8	16	=
RVAL	840:10	840:10	15	0
FIELD	840:10	840:10	16	0
LEAF_NODE	840:10	840:10	17	0
LEAF_NODE	840:11	840:11	13	;
JUMP_STATEMENT	841:4	841:9	12	break DESTINATION ;
KEYWORD	841:4	841:4	13	break
LEAF_NODE	841:4	841:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	841:9	841:9	13	;
LEAF_NODE	842:3	842:3	11	}
SELECTION	843:3	847:3	9	
KEYWORD	843:3	843:3	10	if
LEAF_NODE	843:3	843:3	11	if
LEAF_NODE	843:6	843:6	10	(
CONDITION	843:7	843:7	10	colorchannels > 1 && TIFFReadTile ( tif , p2 , col , row + img -> row_offset , 0 , 2 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	843:7	843:7	11	colorchannels > 1 && TIFFReadTile ( tif , p2 , col , row + img -> row_offset , 0 , 2 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	843:7	844:31	12	colorchannels > 1 && TIFFReadTile ( tif , p2 , col , row + img -> row_offset , 0 , 2 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	843:7	843:23	13	colorchannels > 1
FIELD	843:7	843:7	14	colorchannels
LEAF_NODE	843:7	843:7	15	colorchannels
REL_OPERATOR	843:21	843:21	14	>
LEAF_NODE	843:21	843:21	15	>
FIELD	843:23	843:23	14	1
LEAF_NODE	843:23	843:23	15	1
LEAF_NODE	844:28	844:28	13	&&
EXPR	844:31	844:31	13	TIFFReadTile ( tif , p2 , col , row + img -> row_offset , 0 , 2 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	844:31	846:31	14	TIFFReadTile ( tif , p2 , col , row + img -> row_offset , 0 , 2 ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	844:31	845:85	15	TIFFReadTile ( tif , p2 , col , row + img -> row_offset , 0 , 2 ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	844:31	845:67	16	TIFFReadTile ( tif , p2 , col , row + img -> row_offset , 0 , 2 )
CALLEE	844:31	844:31	17	TIFFReadTile
LEAF_NODE	844:31	844:31	18	TIFFReadTile
LEAF_NODE	844:43	844:43	17	(
ARGUMENT	844:44	844:44	17	tif
FIELD	844:44	844:44	18	tif
LEAF_NODE	844:44	844:44	19	tif
LEAF_NODE	844:47	844:47	17	,
ARGUMENT	844:49	844:49	17	p2
FIELD	844:49	844:49	18	p2
LEAF_NODE	844:49	844:49	19	p2
LEAF_NODE	844:51	844:51	17	,
ARGUMENT	844:53	844:53	17	col
FIELD	844:53	844:53	18	col
LEAF_NODE	844:53	844:53	19	col
LEAF_NODE	844:56	844:56	17	,
ARGUMENT	845:44	845:48	17	row + img -> row_offset
FIELD	845:44	845:44	18	row
LEAF_NODE	845:44	845:44	19	row
LEAF_NODE	845:47	845:47	18	+
FIELD	845:48	845:53	18	img -> row_offset
LEAF_NODE	845:48	845:48	19	img
LEAF_NODE	845:51	845:51	19	->
LEAF_NODE	845:53	845:53	19	row_offset
LEAF_NODE	845:63	845:63	17	,
ARGUMENT	845:64	845:64	17	0
FIELD	845:64	845:64	18	0
LEAF_NODE	845:64	845:64	19	0
LEAF_NODE	845:65	845:65	17	,
ARGUMENT	845:66	845:66	17	2
FIELD	845:66	845:66	18	2
LEAF_NODE	845:66	845:66	19	2
LEAF_NODE	845:67	845:67	17	)
EQ_OPERATOR	845:69	845:69	16	==
LEAF_NODE	845:69	845:69	17	==
LEAF_NODE	845:72	845:72	16	(
TYPE_NAME	845:73	845:73	16	tmsize_t
LEAF_NODE	845:73	845:73	17	tmsize_t
LEAF_NODE	845:81	845:81	16	)
LEAF_NODE	845:82	845:82	16	(
UNARY_EXPR	845:83	845:84	16	- 1
UNARY_OPERATOR	845:83	845:83	17	-
LEAF_NODE	845:83	845:83	18	-
FIELD	845:84	845:84	17	1
LEAF_NODE	845:84	845:84	18	1
LEAF_NODE	845:85	845:85	16	)
LEAF_NODE	846:28	846:28	15	&&
EXPR	846:31	846:31	15	img -> stoponerr
FIELD	846:31	846:36	16	img -> stoponerr
LEAF_NODE	846:31	846:31	17	img
LEAF_NODE	846:34	846:34	17	->
LEAF_NODE	846:36	846:36	17	stoponerr
LEAF_NODE	846:45	846:45	10	)
STATEMENTS	847:3	850:3	10	
LEAF_NODE	847:3	847:3	11	{
STATEMENTS	848:4	849:4	11	
EXPR_STATEMENT	848:4	848:11	12	ret = 0 ;
EXPR	848:4	848:4	13	ret = 0
ASSIGN	848:4	848:10	14	ret = 0
LVAL	848:4	848:4	15	ret
FIELD	848:4	848:4	16	ret
LEAF_NODE	848:4	848:4	17	ret
ASSIGN_OP	848:8	848:8	15	=
LEAF_NODE	848:8	848:8	16	=
RVAL	848:10	848:10	15	0
FIELD	848:10	848:10	16	0
LEAF_NODE	848:10	848:10	17	0
LEAF_NODE	848:11	848:11	13	;
JUMP_STATEMENT	849:4	849:9	12	break DESTINATION ;
KEYWORD	849:4	849:4	13	break
LEAF_NODE	849:4	849:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	849:9	849:9	13	;
LEAF_NODE	850:3	850:3	11	}
SELECTION	851:3	855:24	9	
KEYWORD	851:3	851:3	10	if
LEAF_NODE	851:3	851:3	11	if
LEAF_NODE	851:6	851:6	10	(
CONDITION	851:7	851:7	10	alpha && TIFFReadTile ( tif , pa , col , row + img -> row_offset , 0 , colorchannels ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	851:7	851:7	11	alpha && TIFFReadTile ( tif , pa , col , row + img -> row_offset , 0 , colorchannels ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	851:7	852:31	12	alpha && TIFFReadTile ( tif , pa , col , row + img -> row_offset , 0 , colorchannels ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	851:7	851:7	13	alpha
FIELD	851:7	851:7	14	alpha
LEAF_NODE	851:7	851:7	15	alpha
LEAF_NODE	852:28	852:28	13	&&
EXPR	852:31	852:31	13	TIFFReadTile ( tif , pa , col , row + img -> row_offset , 0 , colorchannels ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	852:31	854:31	14	TIFFReadTile ( tif , pa , col , row + img -> row_offset , 0 , colorchannels ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	852:31	853:97	15	TIFFReadTile ( tif , pa , col , row + img -> row_offset , 0 , colorchannels ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	852:31	853:79	16	TIFFReadTile ( tif , pa , col , row + img -> row_offset , 0 , colorchannels )
CALLEE	852:31	852:31	17	TIFFReadTile
LEAF_NODE	852:31	852:31	18	TIFFReadTile
LEAF_NODE	852:43	852:43	17	(
ARGUMENT	852:44	852:44	17	tif
FIELD	852:44	852:44	18	tif
LEAF_NODE	852:44	852:44	19	tif
LEAF_NODE	852:47	852:47	17	,
ARGUMENT	852:48	852:48	17	pa
FIELD	852:48	852:48	18	pa
LEAF_NODE	852:48	852:48	19	pa
LEAF_NODE	852:50	852:50	17	,
ARGUMENT	852:51	852:51	17	col
FIELD	852:51	852:51	18	col
LEAF_NODE	852:51	852:51	19	col
LEAF_NODE	852:54	852:54	17	,
ARGUMENT	853:44	853:48	17	row + img -> row_offset
FIELD	853:44	853:44	18	row
LEAF_NODE	853:44	853:44	19	row
LEAF_NODE	853:47	853:47	18	+
FIELD	853:48	853:53	18	img -> row_offset
LEAF_NODE	853:48	853:48	19	img
LEAF_NODE	853:51	853:51	19	->
LEAF_NODE	853:53	853:53	19	row_offset
LEAF_NODE	853:63	853:63	17	,
ARGUMENT	853:64	853:64	17	0
FIELD	853:64	853:64	18	0
LEAF_NODE	853:64	853:64	19	0
LEAF_NODE	853:65	853:65	17	,
ARGUMENT	853:66	853:66	17	colorchannels
FIELD	853:66	853:66	18	colorchannels
LEAF_NODE	853:66	853:66	19	colorchannels
LEAF_NODE	853:79	853:79	17	)
EQ_OPERATOR	853:81	853:81	16	==
LEAF_NODE	853:81	853:81	17	==
LEAF_NODE	853:84	853:84	16	(
TYPE_NAME	853:85	853:85	16	tmsize_t
LEAF_NODE	853:85	853:85	17	tmsize_t
LEAF_NODE	853:93	853:93	16	)
LEAF_NODE	853:94	853:94	16	(
UNARY_EXPR	853:95	853:96	16	- 1
UNARY_OPERATOR	853:95	853:95	17	-
LEAF_NODE	853:95	853:95	18	-
FIELD	853:96	853:96	17	1
LEAF_NODE	853:96	853:96	18	1
LEAF_NODE	853:97	853:97	16	)
LEAF_NODE	854:28	854:28	15	&&
EXPR	854:31	854:31	15	img -> stoponerr
FIELD	854:31	854:36	16	img -> stoponerr
LEAF_NODE	854:31	854:31	17	img
LEAF_NODE	854:34	854:34	17	->
LEAF_NODE	854:36	854:36	17	stoponerr
LEAF_NODE	854:45	854:45	10	)
STATEMENTS	855:24	858:3	10	
LEAF_NODE	855:24	855:24	11	{
STATEMENTS	856:28	857:28	11	
EXPR_STATEMENT	856:28	856:35	12	ret = 0 ;
EXPR	856:28	856:28	13	ret = 0
ASSIGN	856:28	856:34	14	ret = 0
LVAL	856:28	856:28	15	ret
FIELD	856:28	856:28	16	ret
LEAF_NODE	856:28	856:28	17	ret
ASSIGN_OP	856:32	856:32	15	=
LEAF_NODE	856:32	856:32	16	=
RVAL	856:34	856:34	15	0
FIELD	856:34	856:34	16	0
LEAF_NODE	856:34	856:34	17	0
LEAF_NODE	856:35	856:35	13	;
JUMP_STATEMENT	857:28	857:33	12	break DESTINATION ;
KEYWORD	857:28	857:28	13	break
LEAF_NODE	857:28	857:28	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	857:33	857:33	13	;
LEAF_NODE	858:3	858:3	11	}
EXPR_STATEMENT	860:3	861:50	9	pos = ( ( row + img -> row_offset ) % th ) * TIFFTileRowSize ( tif ) + ( ( tmsize_t ) fromskew * img -> samplesperpixel ) ;
EXPR	860:3	860:3	10	pos = ( ( row + img -> row_offset ) % th ) * TIFFTileRowSize ( tif ) + ( ( tmsize_t ) fromskew * img -> samplesperpixel )
ASSIGN	860:3	860:9	11	pos = ( ( row + img -> row_offset ) % th ) * TIFFTileRowSize ( tif ) + ( ( tmsize_t ) fromskew * img -> samplesperpixel )
LVAL	860:3	860:3	12	pos
FIELD	860:3	860:3	13	pos
LEAF_NODE	860:3	860:3	14	pos
ASSIGN_OP	860:7	860:7	12	=
LEAF_NODE	860:7	860:7	13	=
RVAL	860:9	861:49	12	( ( row + img -> row_offset ) % th ) * TIFFTileRowSize ( tif ) + ( ( tmsize_t ) fromskew * img -> samplesperpixel )
LEAF_NODE	860:9	860:9	13	(
LEAF_NODE	860:10	860:10	13	(
FIELD	860:11	860:11	13	row
LEAF_NODE	860:11	860:11	14	row
LEAF_NODE	860:14	860:14	13	+
FIELD	860:15	860:20	13	img -> row_offset
LEAF_NODE	860:15	860:15	14	img
LEAF_NODE	860:18	860:18	14	->
LEAF_NODE	860:20	860:20	14	row_offset
LEAF_NODE	860:30	860:30	13	)
LEAF_NODE	860:32	860:32	13	%
FIELD	860:34	860:34	13	th
LEAF_NODE	860:34	860:34	14	th
LEAF_NODE	860:36	860:36	13	)
LEAF_NODE	860:38	860:38	13	*
FUNCTION_CALL	860:40	860:59	13	TIFFTileRowSize ( tif )
CALLEE	860:40	860:40	14	TIFFTileRowSize
LEAF_NODE	860:40	860:40	15	TIFFTileRowSize
LEAF_NODE	860:55	860:55	14	(
ARGUMENT	860:56	860:56	14	tif
FIELD	860:56	860:56	15	tif
LEAF_NODE	860:56	860:56	16	tif
LEAF_NODE	860:59	860:59	14	)
LEAF_NODE	860:61	860:61	13	+
LEAF_NODE	861:6	861:6	13	(
LEAF_NODE	861:7	861:7	13	(
TYPE_NAME	861:8	861:8	13	tmsize_t
LEAF_NODE	861:8	861:8	14	tmsize_t
LEAF_NODE	861:16	861:16	13	)
FIELD	861:18	861:18	13	fromskew
LEAF_NODE	861:18	861:18	14	fromskew
LEAF_NODE	861:27	861:27	13	*
FIELD	861:29	861:34	13	img -> samplesperpixel
LEAF_NODE	861:29	861:29	14	img
LEAF_NODE	861:32	861:32	14	->
LEAF_NODE	861:34	861:34	14	samplesperpixel
LEAF_NODE	861:49	861:49	13	)
LEAF_NODE	861:50	861:50	10	;
SELECTION	862:3	863:3	9	
KEYWORD	862:3	862:3	10	if
LEAF_NODE	862:3	862:3	11	if
LEAF_NODE	862:6	862:6	10	(
CONDITION	862:7	862:7	10	tocol + this_tw > w
EXPR	862:7	862:25	11	tocol + this_tw > w
FIELD	862:7	862:7	12	tocol
LEAF_NODE	862:7	862:7	13	tocol
LEAF_NODE	862:13	862:13	12	+
FIELD	862:15	862:15	12	this_tw
LEAF_NODE	862:15	862:15	13	this_tw
REL_OPERATOR	862:23	862:23	12	>
LEAF_NODE	862:23	862:23	13	>
FIELD	862:25	862:25	12	w
LEAF_NODE	862:25	862:25	13	w
LEAF_NODE	862:26	862:26	10	)
STATEMENTS	863:3	870:3	10	
LEAF_NODE	863:3	863:3	11	{
STATEMENTS	867:4	869:4	11	
EXPR_STATEMENT	867:4	867:31	12	fromskew = tw - ( w - tocol ) ;
EXPR	867:4	867:4	13	fromskew = tw - ( w - tocol )
ASSIGN	867:4	867:15	14	fromskew = tw - ( w - tocol )
LVAL	867:4	867:4	15	fromskew
FIELD	867:4	867:4	16	fromskew
LEAF_NODE	867:4	867:4	17	fromskew
ASSIGN_OP	867:13	867:13	15	=
LEAF_NODE	867:13	867:13	16	=
RVAL	867:15	867:30	15	tw - ( w - tocol )
FIELD	867:15	867:15	16	tw
LEAF_NODE	867:15	867:15	17	tw
LEAF_NODE	867:18	867:18	16	-
LEAF_NODE	867:20	867:20	16	(
FIELD	867:21	867:21	16	w
LEAF_NODE	867:21	867:21	17	w
LEAF_NODE	867:23	867:23	16	-
FIELD	867:25	867:25	16	tocol
LEAF_NODE	867:25	867:25	17	tocol
LEAF_NODE	867:30	867:30	16	)
LEAF_NODE	867:31	867:31	13	;
EXPR_STATEMENT	868:4	868:27	12	this_tw = tw - fromskew ;
EXPR	868:4	868:4	13	this_tw = tw - fromskew
ASSIGN	868:4	868:14	14	this_tw = tw - fromskew
LVAL	868:4	868:4	15	this_tw
FIELD	868:4	868:4	16	this_tw
LEAF_NODE	868:4	868:4	17	this_tw
ASSIGN_OP	868:12	868:12	15	=
LEAF_NODE	868:12	868:12	16	=
RVAL	868:14	868:19	15	tw - fromskew
FIELD	868:14	868:14	16	tw
LEAF_NODE	868:14	868:14	17	tw
LEAF_NODE	868:17	868:17	16	-
FIELD	868:19	868:19	16	fromskew
LEAF_NODE	868:19	868:19	17	fromskew
LEAF_NODE	868:27	868:27	13	;
EXPR_STATEMENT	869:4	869:35	12	this_toskew = toskew + fromskew ;
EXPR	869:4	869:4	13	this_toskew = toskew + fromskew
ASSIGN	869:4	869:18	14	this_toskew = toskew + fromskew
LVAL	869:4	869:4	15	this_toskew
FIELD	869:4	869:4	16	this_toskew
LEAF_NODE	869:4	869:4	17	this_toskew
ASSIGN_OP	869:16	869:16	15	=
LEAF_NODE	869:16	869:16	16	=
RVAL	869:18	869:27	15	toskew + fromskew
FIELD	869:18	869:18	16	toskew
LEAF_NODE	869:18	869:18	17	toskew
LEAF_NODE	869:25	869:25	16	+
FIELD	869:27	869:27	16	fromskew
LEAF_NODE	869:27	869:27	17	fromskew
LEAF_NODE	869:35	869:35	13	;
LEAF_NODE	870:3	870:3	11	}
EXPR_STATEMENT	871:3	872:56	9	( * put ) ( img , raster + y * w + tocol , tocol , y , this_tw , nrow , fromskew , this_toskew , p0 + pos , p1 + pos , p2 + pos , ( alpha ? ( pa + pos ) : NULL ) ) ;
EXPR	871:3	871:3	10	( * put ) ( img , raster + y * w + tocol , tocol , y , this_tw , nrow , fromskew , this_toskew , p0 + pos , p1 + pos , p2 + pos , ( alpha ? ( pa + pos ) : NULL ) )
FUNCTION_CALL	871:3	872:55	11	( * put ) ( img , raster + y * w + tocol , tocol , y , this_tw , nrow , fromskew , this_toskew , p0 + pos , p1 + pos , p2 + pos , ( alpha ? ( pa + pos ) : NULL ) )
CALLEE	871:3	871:8	12	( * put )
LEAF_NODE	871:3	871:3	13	(
UNARY_EXPR	871:4	871:5	13	* put
UNARY_OPERATOR	871:4	871:4	14	*
LEAF_NODE	871:4	871:4	15	*
FIELD	871:5	871:5	14	put
LEAF_NODE	871:5	871:5	15	put
LEAF_NODE	871:8	871:8	13	)
LEAF_NODE	871:9	871:9	12	(
ARGUMENT	871:10	871:10	12	img
FIELD	871:10	871:10	13	img
LEAF_NODE	871:10	871:10	14	img
LEAF_NODE	871:13	871:13	12	,
ARGUMENT	871:15	871:26	12	raster + y * w + tocol
FIELD	871:15	871:15	13	raster
LEAF_NODE	871:15	871:15	14	raster
LEAF_NODE	871:21	871:21	13	+
FIELD	871:22	871:22	13	y
LEAF_NODE	871:22	871:22	14	y
LEAF_NODE	871:23	871:23	13	*
FIELD	871:24	871:24	13	w
LEAF_NODE	871:24	871:24	14	w
LEAF_NODE	871:25	871:25	13	+
FIELD	871:26	871:26	13	tocol
LEAF_NODE	871:26	871:26	14	tocol
LEAF_NODE	871:31	871:31	12	,
ARGUMENT	871:33	871:33	12	tocol
FIELD	871:33	871:33	13	tocol
LEAF_NODE	871:33	871:33	14	tocol
LEAF_NODE	871:38	871:38	12	,
ARGUMENT	871:40	871:40	12	y
FIELD	871:40	871:40	13	y
LEAF_NODE	871:40	871:40	14	y
LEAF_NODE	871:41	871:41	12	,
ARGUMENT	871:43	871:43	12	this_tw
FIELD	871:43	871:43	13	this_tw
LEAF_NODE	871:43	871:43	14	this_tw
LEAF_NODE	871:50	871:50	12	,
ARGUMENT	871:52	871:52	12	nrow
FIELD	871:52	871:52	13	nrow
LEAF_NODE	871:52	871:52	14	nrow
LEAF_NODE	871:56	871:56	12	,
ARGUMENT	871:58	871:58	12	fromskew
FIELD	871:58	871:58	13	fromskew
LEAF_NODE	871:58	871:58	14	fromskew
LEAF_NODE	871:66	871:66	12	,
ARGUMENT	871:68	871:68	12	this_toskew
FIELD	871:68	871:68	13	this_toskew
LEAF_NODE	871:68	871:68	14	this_toskew
LEAF_NODE	871:79	871:79	12	,
ARGUMENT	872:4	872:9	12	p0 + pos
FIELD	872:4	872:4	13	p0
LEAF_NODE	872:4	872:4	14	p0
LEAF_NODE	872:7	872:7	13	+
FIELD	872:9	872:9	13	pos
LEAF_NODE	872:9	872:9	14	pos
LEAF_NODE	872:12	872:12	12	,
ARGUMENT	872:14	872:19	12	p1 + pos
FIELD	872:14	872:14	13	p1
LEAF_NODE	872:14	872:14	14	p1
LEAF_NODE	872:17	872:17	13	+
FIELD	872:19	872:19	13	pos
LEAF_NODE	872:19	872:19	14	pos
LEAF_NODE	872:22	872:22	12	,
ARGUMENT	872:24	872:29	12	p2 + pos
FIELD	872:24	872:24	13	p2
LEAF_NODE	872:24	872:24	14	p2
LEAF_NODE	872:27	872:27	13	+
FIELD	872:29	872:29	13	pos
LEAF_NODE	872:29	872:29	14	pos
LEAF_NODE	872:32	872:32	12	,
ARGUMENT	872:34	872:54	12	( alpha ? ( pa + pos ) : NULL )
LEAF_NODE	872:34	872:34	13	(
COND_EXPR	872:35	872:50	13	alpha ? ( pa + pos ) : NULL
CONDITION	872:35	872:35	14	alpha
FIELD	872:35	872:35	15	alpha
LEAF_NODE	872:35	872:35	16	alpha
LEAF_NODE	872:40	872:40	14	?
EXPR	872:41	872:48	14	( pa + pos )
LEAF_NODE	872:41	872:41	15	(
FIELD	872:42	872:42	15	pa
LEAF_NODE	872:42	872:42	16	pa
LEAF_NODE	872:44	872:44	15	+
FIELD	872:45	872:45	15	pos
LEAF_NODE	872:45	872:45	16	pos
LEAF_NODE	872:48	872:48	15	)
LEAF_NODE	872:49	872:49	14	:
FIELD	872:50	872:50	14	NULL
LEAF_NODE	872:50	872:50	15	NULL
LEAF_NODE	872:54	872:54	13	)
LEAF_NODE	872:55	872:55	12	)
LEAF_NODE	872:56	872:56	10	;
EXPR_STATEMENT	873:3	873:19	9	tocol += this_tw ;
EXPR	873:3	873:3	10	tocol += this_tw
ASSIGN	873:3	873:12	11	tocol += this_tw
LVAL	873:3	873:3	12	tocol
FIELD	873:3	873:3	13	tocol
LEAF_NODE	873:3	873:3	14	tocol
ASSIGN_OP	873:9	873:9	12	+=
LEAF_NODE	873:9	873:9	13	+=
RVAL	873:12	873:12	12	this_tw
FIELD	873:12	873:12	13	this_tw
LEAF_NODE	873:12	873:12	14	this_tw
LEAF_NODE	873:19	873:19	10	;
EXPR_STATEMENT	874:3	874:17	9	col += this_tw ;
EXPR	874:3	874:3	10	col += this_tw
ASSIGN	874:3	874:10	11	col += this_tw
LVAL	874:3	874:3	12	col
FIELD	874:3	874:3	13	col
LEAF_NODE	874:3	874:3	14	col
ASSIGN_OP	874:7	874:7	12	+=
LEAF_NODE	874:7	874:7	13	+=
RVAL	874:10	874:10	12	this_tw
FIELD	874:10	874:10	13	this_tw
LEAF_NODE	874:10	874:10	14	this_tw
LEAF_NODE	874:17	874:17	10	;
EXPR_STATEMENT	878:3	878:15	9	fromskew = 0 ;
EXPR	878:3	878:3	10	fromskew = 0
ASSIGN	878:3	878:14	11	fromskew = 0
LVAL	878:3	878:3	12	fromskew
FIELD	878:3	878:3	13	fromskew
LEAF_NODE	878:3	878:3	14	fromskew
ASSIGN_OP	878:12	878:12	12	=
LEAF_NODE	878:12	878:12	13	=
RVAL	878:14	878:14	12	0
FIELD	878:14	878:14	13	0
LEAF_NODE	878:14	878:14	14	0
LEAF_NODE	878:15	878:15	10	;
EXPR_STATEMENT	879:3	879:15	9	this_tw = tw ;
EXPR	879:3	879:3	10	this_tw = tw
ASSIGN	879:3	879:13	11	this_tw = tw
LVAL	879:3	879:3	12	this_tw
FIELD	879:3	879:3	13	this_tw
LEAF_NODE	879:3	879:3	14	this_tw
ASSIGN_OP	879:11	879:11	12	=
LEAF_NODE	879:11	879:11	13	=
RVAL	879:13	879:13	12	tw
FIELD	879:13	879:13	13	tw
LEAF_NODE	879:13	879:13	14	tw
LEAF_NODE	879:15	879:15	10	;
EXPR_STATEMENT	880:3	880:23	9	this_toskew = toskew ;
EXPR	880:3	880:3	10	this_toskew = toskew
ASSIGN	880:3	880:17	11	this_toskew = toskew
LVAL	880:3	880:3	12	this_toskew
FIELD	880:3	880:3	13	this_toskew
LEAF_NODE	880:3	880:3	14	this_toskew
ASSIGN_OP	880:15	880:15	12	=
LEAF_NODE	880:15	880:15	13	=
RVAL	880:17	880:17	12	toskew
FIELD	880:17	880:17	13	toskew
LEAF_NODE	880:17	880:17	14	toskew
LEAF_NODE	880:23	880:23	10	;
LEAF_NODE	881:2	881:2	8	}
LEAF_NODE	883:2	883:2	6	y
LEAF_NODE	883:4	883:4	6	+=
LEAF_NODE	883:7	883:7	6	(
LEAF_NODE	883:8	883:8	6	(
LEAF_NODE	883:9	883:9	6	flip
LEAF_NODE	883:14	883:14	6	&
LEAF_NODE	883:16	883:16	6	FLIP_VERTICALLY
LEAF_NODE	883:31	883:31	6	)
LEAF_NODE	883:33	883:33	6	?
LEAF_NODE	883:34	883:34	6	-
LEAF_NODE	883:35	883:35	6	(
LEAF_NODE	883:36	883:36	6	int32
LEAF_NODE	883:41	883:41	6	)
LABEL	883:43	883:48	6	nrow :
LEAF_NODE	883:43	883:43	7	nrow
LEAF_NODE	883:48	883:48	7	:
LEAF_NODE	883:50	883:50	6	(
LEAF_NODE	883:51	883:51	6	int32
LEAF_NODE	883:56	883:56	6	)
LEAF_NODE	883:58	883:58	6	nrow
LEAF_NODE	883:62	883:62	6	)
LEAF_NODE	883:63	883:63	6	;
LEAF_NODE	884:1	884:1	5	}
SELECTION	886:1	886:31	3	
KEYWORD	886:1	886:1	4	if
LEAF_NODE	886:1	886:1	5	if
LEAF_NODE	886:4	886:4	4	(
CONDITION	886:5	886:5	4	flip & FLIP_HORIZONTALLY
EXPR	886:5	886:12	5	flip & FLIP_HORIZONTALLY
FIELD	886:5	886:5	6	flip
LEAF_NODE	886:5	886:5	7	flip
LEAF_NODE	886:10	886:10	6	&
FIELD	886:12	886:12	6	FLIP_HORIZONTALLY
LEAF_NODE	886:12	886:12	7	FLIP_HORIZONTALLY
LEAF_NODE	886:29	886:29	4	)
STATEMENTS	886:31	901:1	4	
LEAF_NODE	886:31	886:31	5	{
STATEMENTS	887:2	889:2	5	
SIMPLE_DECL	887:2	887:13	6	uint32 line ;
VAR_DECL	887:2	887:9	7	uint32 line
TYPE	887:2	887:2	8	uint32
TYPE_NAME	887:2	887:2	9	uint32
LEAF_NODE	887:2	887:2	10	uint32
NAME	887:9	887:9	8	line
LEAF_NODE	887:9	887:9	9	line
LEAF_NODE	887:13	887:13	7	;
ITERATION	889:2	889:35	6	
KEYWORD	889:2	889:2	7	for
LEAF_NODE	889:2	889:2	8	for
LEAF_NODE	889:6	889:6	7	(
FOR_INIT	889:7	889:15	7	line = 0 ;
EXPR	889:7	889:7	8	line = 0
ASSIGN	889:7	889:14	9	line = 0
LVAL	889:7	889:7	10	line
FIELD	889:7	889:7	11	line
LEAF_NODE	889:7	889:7	12	line
ASSIGN_OP	889:12	889:12	10	=
LEAF_NODE	889:12	889:12	11	=
RVAL	889:14	889:14	10	0
FIELD	889:14	889:14	11	0
LEAF_NODE	889:14	889:14	12	0
LEAF_NODE	889:15	889:15	8	;
CONDITION	889:17	889:17	7	line < h
EXPR	889:17	889:24	8	line < h
FIELD	889:17	889:17	9	line
LEAF_NODE	889:17	889:17	10	line
REL_OPERATOR	889:22	889:22	9	<
LEAF_NODE	889:22	889:22	10	<
FIELD	889:24	889:24	9	h
LEAF_NODE	889:24	889:24	10	h
LEAF_NODE	889:25	889:25	7	;
FOR_EXPR	889:27	889:27	7	line ++
EXPR	889:27	889:27	8	line ++
FIELD	889:27	889:31	9	line ++
LEAF_NODE	889:27	889:27	10	line
LEAF_NODE	889:31	889:31	10	++
LEAF_NODE	889:33	889:33	7	)
STATEMENTS	889:35	900:2	7	
LEAF_NODE	889:35	889:35	8	{
STATEMENTS	890:3	893:3	8	
SIMPLE_DECL	890:3	890:37	9	uint32 * left ; left = raster + ( line * w ) ;
VAR_DECL	890:3	890:11	10	uint32 * left ; left = raster + ( line * w )
TYPE	890:3	890:10	11	uint32 *
TYPE_NAME	890:3	890:3	12	uint32
LEAF_NODE	890:3	890:3	13	uint32
POINTER	890:10	890:10	12	*
LEAF_NODE	890:10	890:10	13	*
NAME	890:11	890:11	11	left
LEAF_NODE	890:11	890:11	12	left
LEAF_NODE	0:0	0:0	11	;
INIT	890:11	890:11	11	left = raster + ( line * w )
ASSIGN	890:11	890:18	12	left = raster + ( line * w )
LVAL	890:11	890:11	13	left
NAME	890:11	890:11	14	left
LEAF_NODE	890:11	890:11	15	left
ASSIGN_OP	890:16	890:16	13	=
LEAF_NODE	890:16	890:16	14	=
RVAL	890:18	890:36	13	raster + ( line * w )
FIELD	890:18	890:18	14	raster
LEAF_NODE	890:18	890:18	15	raster
LEAF_NODE	890:25	890:25	14	+
LEAF_NODE	890:27	890:27	14	(
FIELD	890:28	890:28	14	line
LEAF_NODE	890:28	890:28	15	line
LEAF_NODE	890:33	890:33	14	*
FIELD	890:35	890:35	14	w
LEAF_NODE	890:35	890:35	15	w
LEAF_NODE	890:36	890:36	14	)
LEAF_NODE	890:37	890:37	10	;
SIMPLE_DECL	891:3	891:31	9	uint32 * right ; right = left + w - 1 ;
VAR_DECL	891:3	891:11	10	uint32 * right ; right = left + w - 1
TYPE	891:3	891:10	11	uint32 *
TYPE_NAME	891:3	891:3	12	uint32
LEAF_NODE	891:3	891:3	13	uint32
POINTER	891:10	891:10	12	*
LEAF_NODE	891:10	891:10	13	*
NAME	891:11	891:11	11	right
LEAF_NODE	891:11	891:11	12	right
LEAF_NODE	0:0	0:0	11	;
INIT	891:11	891:11	11	right = left + w - 1
ASSIGN	891:11	891:19	12	right = left + w - 1
LVAL	891:11	891:11	13	right
NAME	891:11	891:11	14	right
LEAF_NODE	891:11	891:11	15	right
ASSIGN_OP	891:17	891:17	13	=
LEAF_NODE	891:17	891:17	14	=
RVAL	891:19	891:30	13	left + w - 1
FIELD	891:19	891:19	14	left
LEAF_NODE	891:19	891:19	15	left
LEAF_NODE	891:24	891:24	14	+
FIELD	891:26	891:26	14	w
LEAF_NODE	891:26	891:26	15	w
LEAF_NODE	891:28	891:28	14	-
FIELD	891:30	891:30	14	1
LEAF_NODE	891:30	891:30	15	1
LEAF_NODE	891:31	891:31	10	;
ITERATION	893:3	893:26	9	
KEYWORD	893:3	893:3	10	while
LEAF_NODE	893:3	893:3	11	while
LEAF_NODE	893:9	893:9	10	(
CONDITION	893:11	893:11	10	left < right
EXPR	893:11	893:18	11	left < right
FIELD	893:11	893:11	12	left
LEAF_NODE	893:11	893:11	13	left
REL_OPERATOR	893:16	893:16	12	<
LEAF_NODE	893:16	893:16	13	<
FIELD	893:18	893:18	12	right
LEAF_NODE	893:18	893:18	13	right
LEAF_NODE	893:24	893:24	10	)
STATEMENTS	893:26	899:3	10	
LEAF_NODE	893:26	893:26	11	{
STATEMENTS	894:4	898:4	11	
SIMPLE_DECL	894:4	894:23	12	uint32 temp ; temp = * left ;
VAR_DECL	894:4	894:11	13	uint32 temp ; temp = * left
TYPE	894:4	894:4	14	uint32
TYPE_NAME	894:4	894:4	15	uint32
LEAF_NODE	894:4	894:4	16	uint32
NAME	894:11	894:11	14	temp
LEAF_NODE	894:11	894:11	15	temp
LEAF_NODE	0:0	0:0	14	;
INIT	894:11	894:11	14	temp = * left
ASSIGN	894:11	894:18	15	temp = * left
LVAL	894:11	894:11	16	temp
NAME	894:11	894:11	17	temp
LEAF_NODE	894:11	894:11	18	temp
ASSIGN_OP	894:16	894:16	16	=
LEAF_NODE	894:16	894:16	17	=
RVAL	894:18	894:18	16	* left
UNARY_EXPR	894:18	894:19	17	* left
UNARY_OPERATOR	894:18	894:18	18	*
LEAF_NODE	894:18	894:18	19	*
FIELD	894:19	894:19	18	left
LEAF_NODE	894:19	894:19	19	left
LEAF_NODE	894:23	894:23	13	;
EXPR_STATEMENT	895:4	895:18	12	* left = * right ;
EXPR	895:4	895:4	13	* left = * right
ASSIGN	895:4	895:12	14	* left = * right
LVAL	895:4	895:4	15	* left
UNARY_EXPR	895:4	895:5	16	* left
UNARY_OPERATOR	895:4	895:4	17	*
LEAF_NODE	895:4	895:4	18	*
FIELD	895:5	895:5	17	left
LEAF_NODE	895:5	895:5	18	left
ASSIGN_OP	895:10	895:10	15	=
LEAF_NODE	895:10	895:10	16	=
RVAL	895:12	895:12	15	* right
UNARY_EXPR	895:12	895:13	16	* right
UNARY_OPERATOR	895:12	895:12	17	*
LEAF_NODE	895:12	895:12	18	*
FIELD	895:13	895:13	17	right
LEAF_NODE	895:13	895:13	18	right
LEAF_NODE	895:18	895:18	13	;
EXPR_STATEMENT	896:4	896:17	12	* right = temp ;
EXPR	896:4	896:4	13	* right = temp
ASSIGN	896:4	896:13	14	* right = temp
LVAL	896:4	896:4	15	* right
UNARY_EXPR	896:4	896:5	16	* right
UNARY_OPERATOR	896:4	896:4	17	*
LEAF_NODE	896:4	896:4	18	*
FIELD	896:5	896:5	17	right
LEAF_NODE	896:5	896:5	18	right
ASSIGN_OP	896:11	896:11	15	=
LEAF_NODE	896:11	896:11	16	=
RVAL	896:13	896:13	15	temp
FIELD	896:13	896:13	16	temp
LEAF_NODE	896:13	896:13	17	temp
LEAF_NODE	896:17	896:17	13	;
EXPR_STATEMENT	897:4	897:10	12	left ++ ;
EXPR	897:4	897:4	13	left ++
FIELD	897:4	897:8	14	left ++
LEAF_NODE	897:4	897:4	15	left
LEAF_NODE	897:8	897:8	15	++
LEAF_NODE	897:10	897:10	13	;
EXPR_STATEMENT	898:4	898:11	12	right -- ;
EXPR	898:4	898:4	13	right --
FIELD	898:4	898:9	14	right --
LEAF_NODE	898:4	898:4	15	right
LEAF_NODE	898:9	898:9	15	--
LEAF_NODE	898:11	898:11	13	;
LEAF_NODE	899:3	899:3	11	}
LEAF_NODE	900:2	900:2	8	}
LEAF_NODE	901:1	901:1	5	}
EXPR_STATEMENT	903:1	903:15	3	_TIFFfree ( buf ) ;
EXPR	903:1	903:1	4	_TIFFfree ( buf )
FUNCTION_CALL	903:1	903:14	5	_TIFFfree ( buf )
CALLEE	903:1	903:1	6	_TIFFfree
LEAF_NODE	903:1	903:1	7	_TIFFfree
LEAF_NODE	903:10	903:10	6	(
ARGUMENT	903:11	903:11	6	buf
FIELD	903:11	903:11	7	buf
LEAF_NODE	903:11	903:11	8	buf
LEAF_NODE	903:14	903:14	6	)
LEAF_NODE	903:15	903:15	4	;
LEAF_NODE	904:1	904:1	3	return
LEAF_NODE	904:8	904:8	3	(
LEAF_NODE	904:9	904:9	3	ret
LEAF_NODE	904:12	904:12	3	)
LEAF_NODE	904:13	904:13	3	;
LEAF_NODE	905:0	905:0	2	}
FUNCTION_DEF	913:0	1000:0	1	
RETURN_TYPE	913:0	913:7	2	static int
LEAF_NODE	913:0	913:0	3	static
TYPE_NAME	913:7	913:7	3	int
LEAF_NODE	913:7	913:7	4	int
FUNCTION_NAME	914:0	914:0	2	gtStripContig
LEAF_NODE	914:0	914:0	3	gtStripContig
PARAMETER_LIST	914:13	914:68	2	( TIFFRGBAImage * img , uint32 * raster , uint32 w , uint32 h )
LEAF_NODE	914:13	914:13	3	(
PARAMETER_DECL	914:14	914:29	3	TIFFRGBAImage * img
TYPE	914:14	914:27	4	TIFFRGBAImage *
TYPE_NAME	914:14	914:14	5	TIFFRGBAImage
LEAF_NODE	914:14	914:14	6	TIFFRGBAImage
POINTER	914:27	914:27	5	*
LEAF_NODE	914:27	914:27	6	*
NAME	914:29	914:29	4	img
LEAF_NODE	914:29	914:29	5	img
LEAF_NODE	914:32	914:32	3	,
PARAMETER_DECL	914:34	914:42	3	uint32 * raster
TYPE	914:34	914:40	4	uint32 *
TYPE_NAME	914:34	914:34	5	uint32
LEAF_NODE	914:34	914:34	6	uint32
POINTER	914:40	914:40	5	*
LEAF_NODE	914:40	914:40	6	*
NAME	914:42	914:42	4	raster
LEAF_NODE	914:42	914:42	5	raster
LEAF_NODE	914:48	914:48	3	,
PARAMETER_DECL	914:50	914:57	3	uint32 w
TYPE	914:50	914:50	4	uint32
TYPE_NAME	914:50	914:50	5	uint32
LEAF_NODE	914:50	914:50	6	uint32
NAME	914:57	914:57	4	w
LEAF_NODE	914:57	914:57	5	w
LEAF_NODE	914:58	914:58	3	,
PARAMETER_DECL	914:60	914:67	3	uint32 h
TYPE	914:60	914:60	4	uint32
TYPE_NAME	914:60	914:60	5	uint32
LEAF_NODE	914:60	914:60	6	uint32
NAME	914:67	914:67	4	h
LEAF_NODE	914:67	914:67	5	h
LEAF_NODE	914:68	914:68	3	)
LEAF_NODE	915:0	915:0	2	{
STATEMENTS	916:1	999:13	2	
SIMPLE_DECL	916:1	916:21	3	TIFF * tif ; tif = img -> tif ;
VAR_DECL	916:1	916:7	4	TIFF * tif ; tif = img -> tif
TYPE	916:1	916:5	5	TIFF *
TYPE_NAME	916:1	916:1	6	TIFF
LEAF_NODE	916:1	916:1	7	TIFF
POINTER	916:5	916:5	6	*
LEAF_NODE	916:5	916:5	7	*
NAME	916:7	916:7	5	tif
LEAF_NODE	916:7	916:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	916:7	916:7	5	tif = img -> tif
ASSIGN	916:7	916:13	6	tif = img -> tif
LVAL	916:7	916:7	7	tif
NAME	916:7	916:7	8	tif
LEAF_NODE	916:7	916:7	9	tif
ASSIGN_OP	916:11	916:11	7	=
LEAF_NODE	916:11	916:11	8	=
RVAL	916:13	916:13	7	img -> tif
FIELD	916:13	916:18	8	img -> tif
LEAF_NODE	916:13	916:13	9	img
LEAF_NODE	916:16	916:16	9	->
LEAF_NODE	916:18	916:18	9	tif
LEAF_NODE	916:21	916:21	4	;
SIMPLE_DECL	917:1	917:40	3	tileContigRoutine put ; put = img -> put . contig ;
VAR_DECL	917:1	917:19	4	tileContigRoutine put ; put = img -> put . contig
TYPE	917:1	917:1	5	tileContigRoutine
TYPE_NAME	917:1	917:1	6	tileContigRoutine
LEAF_NODE	917:1	917:1	7	tileContigRoutine
NAME	917:19	917:19	5	put
LEAF_NODE	917:19	917:19	6	put
LEAF_NODE	0:0	0:0	5	;
INIT	917:19	917:19	5	put = img -> put . contig
ASSIGN	917:19	917:25	6	put = img -> put . contig
LVAL	917:19	917:19	7	put
NAME	917:19	917:19	8	put
LEAF_NODE	917:19	917:19	9	put
ASSIGN_OP	917:23	917:23	7	=
LEAF_NODE	917:23	917:23	8	=
RVAL	917:25	917:25	7	img -> put . contig
FIELD	917:25	917:34	8	img -> put . contig
LEAF_NODE	917:25	917:25	9	img
LEAF_NODE	917:28	917:28	9	->
LEAF_NODE	917:30	917:30	9	put
LEAF_NODE	917:33	917:33	9	.
LEAF_NODE	917:34	917:34	9	contig
LEAF_NODE	917:40	917:40	4	;
SIMPLE_DECL	918:1	918:41	3	uint32 row , uint32 y , uint32 nrow , uint32 nrowsub , uint32 rowstoread ;
INIT_DECL_LIST	918:1	918:1	4	uint32 row , uint32 y , uint32 nrow , uint32 nrowsub , uint32 rowstoread
VAR_DECL	918:1	918:8	5	uint32 row
TYPE	918:1	918:1	6	uint32
TYPE_NAME	918:1	918:1	7	uint32
LEAF_NODE	918:1	918:1	8	uint32
NAME	918:8	918:8	6	row
LEAF_NODE	918:8	918:8	7	row
LEAF_NODE	918:11	918:11	5	,
INIT_DECL_LIST	918:1	918:1	5	uint32 y , uint32 nrow , uint32 nrowsub , uint32 rowstoread
VAR_DECL	918:1	918:13	6	uint32 y
TYPE	918:1	918:1	7	uint32
TYPE_NAME	918:1	918:1	8	uint32
LEAF_NODE	918:1	918:1	9	uint32
NAME	918:13	918:13	7	y
LEAF_NODE	918:13	918:13	8	y
LEAF_NODE	918:14	918:14	6	,
INIT_DECL_LIST	918:1	918:1	6	uint32 nrow , uint32 nrowsub , uint32 rowstoread
VAR_DECL	918:1	918:16	7	uint32 nrow
TYPE	918:1	918:1	8	uint32
TYPE_NAME	918:1	918:1	9	uint32
LEAF_NODE	918:1	918:1	10	uint32
NAME	918:16	918:16	8	nrow
LEAF_NODE	918:16	918:16	9	nrow
LEAF_NODE	918:20	918:20	7	,
INIT_DECL_LIST	918:1	918:1	7	uint32 nrowsub , uint32 rowstoread
VAR_DECL	918:1	918:22	8	uint32 nrowsub
TYPE	918:1	918:1	9	uint32
TYPE_NAME	918:1	918:1	10	uint32
LEAF_NODE	918:1	918:1	11	uint32
NAME	918:22	918:22	9	nrowsub
LEAF_NODE	918:22	918:22	10	nrowsub
LEAF_NODE	918:29	918:29	8	,
VAR_DECL	918:1	918:31	8	uint32 rowstoread
TYPE	918:1	918:1	9	uint32
TYPE_NAME	918:1	918:1	10	uint32
LEAF_NODE	918:1	918:1	11	uint32
NAME	918:31	918:31	9	rowstoread
LEAF_NODE	918:31	918:31	10	rowstoread
LEAF_NODE	918:41	918:41	4	;
SIMPLE_DECL	919:1	919:13	3	tmsize_t pos ;
VAR_DECL	919:1	919:10	4	tmsize_t pos
TYPE	919:1	919:1	5	tmsize_t
TYPE_NAME	919:1	919:1	6	tmsize_t
LEAF_NODE	919:1	919:1	7	tmsize_t
NAME	919:10	919:10	5	pos
LEAF_NODE	919:10	919:10	6	pos
LEAF_NODE	919:13	919:13	4	;
SIMPLE_DECL	920:1	920:26	3	unsigned char * buf ; buf = NULL ;
VAR_DECL	920:1	920:16	4	unsigned char * buf ; buf = NULL
TYPE	920:1	920:14	5	unsigned char *
TYPE_NAME	920:1	920:10	6	unsigned char
LEAF_NODE	920:1	920:1	7	unsigned
LEAF_NODE	920:10	920:10	7	char
POINTER	920:14	920:14	6	*
LEAF_NODE	920:14	920:14	7	*
NAME	920:16	920:16	5	buf
LEAF_NODE	920:16	920:16	6	buf
LEAF_NODE	0:0	0:0	5	;
INIT	920:16	920:16	5	buf = NULL
ASSIGN	920:16	920:22	6	buf = NULL
LVAL	920:16	920:16	7	buf
NAME	920:16	920:16	8	buf
LEAF_NODE	920:16	920:16	9	buf
ASSIGN_OP	920:20	920:20	7	=
LEAF_NODE	920:20	920:20	8	=
RVAL	920:22	920:22	7	NULL
FIELD	920:22	920:22	8	NULL
LEAF_NODE	920:22	920:22	9	NULL
LEAF_NODE	920:26	920:26	4	;
SIMPLE_DECL	921:1	921:20	3	uint32 rowsperstrip ;
VAR_DECL	921:1	921:8	4	uint32 rowsperstrip
TYPE	921:1	921:1	5	uint32
TYPE_NAME	921:1	921:1	6	uint32
LEAF_NODE	921:1	921:1	7	uint32
NAME	921:8	921:8	5	rowsperstrip
LEAF_NODE	921:8	921:8	6	rowsperstrip
LEAF_NODE	921:20	921:20	4	;
SIMPLE_DECL	922:1	922:37	3	uint16 subsamplinghor , uint16 subsamplingver ;
INIT_DECL_LIST	922:1	922:1	4	uint16 subsamplinghor , uint16 subsamplingver
VAR_DECL	922:1	922:8	5	uint16 subsamplinghor
TYPE	922:1	922:1	6	uint16
TYPE_NAME	922:1	922:1	7	uint16
LEAF_NODE	922:1	922:1	8	uint16
NAME	922:8	922:8	6	subsamplinghor
LEAF_NODE	922:8	922:8	7	subsamplinghor
LEAF_NODE	922:22	922:22	5	,
VAR_DECL	922:1	922:23	5	uint16 subsamplingver
TYPE	922:1	922:1	6	uint16
TYPE_NAME	922:1	922:1	7	uint16
LEAF_NODE	922:1	922:1	8	uint16
NAME	922:23	922:23	6	subsamplingver
LEAF_NODE	922:23	922:23	7	subsamplingver
LEAF_NODE	922:37	922:37	4	;
SIMPLE_DECL	923:1	923:31	3	uint32 imagewidth ; imagewidth = img -> width ;
VAR_DECL	923:1	923:8	4	uint32 imagewidth ; imagewidth = img -> width
TYPE	923:1	923:1	5	uint32
TYPE_NAME	923:1	923:1	6	uint32
LEAF_NODE	923:1	923:1	7	uint32
NAME	923:8	923:8	5	imagewidth
LEAF_NODE	923:8	923:8	6	imagewidth
LEAF_NODE	0:0	0:0	5	;
INIT	923:8	923:8	5	imagewidth = img -> width
ASSIGN	923:8	923:21	6	imagewidth = img -> width
LVAL	923:8	923:8	7	imagewidth
NAME	923:8	923:8	8	imagewidth
LEAF_NODE	923:8	923:8	9	imagewidth
ASSIGN_OP	923:19	923:19	7	=
LEAF_NODE	923:19	923:19	8	=
RVAL	923:21	923:21	7	img -> width
FIELD	923:21	923:26	8	img -> width
LEAF_NODE	923:21	923:21	9	img
LEAF_NODE	923:24	923:24	9	->
LEAF_NODE	923:26	923:26	9	width
LEAF_NODE	923:31	923:31	4	;
SIMPLE_DECL	924:1	924:18	3	tmsize_t scanline ;
VAR_DECL	924:1	924:10	4	tmsize_t scanline
TYPE	924:1	924:1	5	tmsize_t
TYPE_NAME	924:1	924:1	6	tmsize_t
LEAF_NODE	924:1	924:1	7	tmsize_t
NAME	924:10	924:10	5	scanline
LEAF_NODE	924:10	924:10	6	scanline
LEAF_NODE	924:18	924:18	4	;
SIMPLE_DECL	925:1	925:23	3	int32 fromskew , int32 toskew ;
INIT_DECL_LIST	925:1	925:1	4	int32 fromskew , int32 toskew
VAR_DECL	925:1	925:7	5	int32 fromskew
TYPE	925:1	925:1	6	int32
TYPE_NAME	925:1	925:1	7	int32
LEAF_NODE	925:1	925:1	8	int32
NAME	925:7	925:7	6	fromskew
LEAF_NODE	925:7	925:7	7	fromskew
LEAF_NODE	925:15	925:15	5	,
VAR_DECL	925:1	925:17	5	int32 toskew
TYPE	925:1	925:1	6	int32
TYPE_NAME	925:1	925:1	7	int32
LEAF_NODE	925:1	925:1	8	int32
NAME	925:17	925:17	6	toskew
LEAF_NODE	925:17	925:17	7	toskew
LEAF_NODE	925:23	925:23	4	;
SIMPLE_DECL	926:1	926:18	3	int ret ; ret = 1 , int flip ;
INIT_DECL_LIST	926:1	926:1	4	int ret ; ret = 1 , int flip
VAR_DECL	926:1	926:5	5	int ret ; ret = 1
TYPE	926:1	926:1	6	int
TYPE_NAME	926:1	926:1	7	int
LEAF_NODE	926:1	926:1	8	int
NAME	926:5	926:5	6	ret
LEAF_NODE	926:5	926:5	7	ret
LEAF_NODE	0:0	0:0	6	;
INIT	926:5	926:5	6	ret = 1
ASSIGN	926:5	926:11	7	ret = 1
LVAL	926:5	926:5	8	ret
NAME	926:5	926:5	9	ret
LEAF_NODE	926:5	926:5	10	ret
ASSIGN_OP	926:9	926:9	8	=
LEAF_NODE	926:9	926:9	9	=
RVAL	926:11	926:11	8	1
FIELD	926:11	926:11	9	1
LEAF_NODE	926:11	926:11	10	1
LEAF_NODE	926:12	926:12	5	,
VAR_DECL	926:1	926:14	5	int flip
TYPE	926:1	926:1	6	int
TYPE_NAME	926:1	926:1	7	int
LEAF_NODE	926:1	926:1	8	int
NAME	926:14	926:14	6	flip
LEAF_NODE	926:14	926:14	7	flip
LEAF_NODE	926:18	926:18	4	;
SIMPLE_DECL	927:8	927:29	3	tmsize_t maxstripsize ;
VAR_DECL	927:8	927:17	4	tmsize_t maxstripsize
TYPE	927:8	927:8	5	tmsize_t
TYPE_NAME	927:8	927:8	6	tmsize_t
LEAF_NODE	927:8	927:8	7	tmsize_t
NAME	927:17	927:17	5	maxstripsize
LEAF_NODE	927:17	927:17	6	maxstripsize
LEAF_NODE	927:29	927:29	4	;
EXPR_STATEMENT	929:1	929:87	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , & subsamplinghor , & subsamplingver ) ;
EXPR	929:1	929:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , & subsamplinghor , & subsamplingver )
FUNCTION_CALL	929:1	929:86	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , & subsamplinghor , & subsamplingver )
CALLEE	929:1	929:1	6	TIFFGetFieldDefaulted
LEAF_NODE	929:1	929:1	7	TIFFGetFieldDefaulted
LEAF_NODE	929:22	929:22	6	(
ARGUMENT	929:23	929:23	6	tif
FIELD	929:23	929:23	7	tif
LEAF_NODE	929:23	929:23	8	tif
LEAF_NODE	929:26	929:26	6	,
ARGUMENT	929:28	929:28	6	TIFFTAG_YCBCRSUBSAMPLING
FIELD	929:28	929:28	7	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	929:28	929:28	8	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	929:52	929:52	6	,
ARGUMENT	929:54	929:54	6	& subsamplinghor
UNARY_EXPR	929:54	929:55	7	& subsamplinghor
UNARY_OPERATOR	929:54	929:54	8	&
LEAF_NODE	929:54	929:54	9	&
FIELD	929:55	929:55	8	subsamplinghor
LEAF_NODE	929:55	929:55	9	subsamplinghor
LEAF_NODE	929:69	929:69	6	,
ARGUMENT	929:71	929:71	6	& subsamplingver
UNARY_EXPR	929:71	929:72	7	& subsamplingver
UNARY_OPERATOR	929:71	929:71	8	&
LEAF_NODE	929:71	929:71	9	&
FIELD	929:72	929:72	8	subsamplingver
LEAF_NODE	929:72	929:72	9	subsamplingver
LEAF_NODE	929:86	929:86	6	)
LEAF_NODE	929:87	929:87	4	;
SELECTION	930:1	930:27	3	
KEYWORD	930:1	930:1	4	if
LEAF_NODE	930:1	930:1	5	if
LEAF_NODE	930:3	930:3	4	(
CONDITION	930:5	930:5	4	subsamplingver == 0
EXPR	930:5	930:23	5	subsamplingver == 0
FIELD	930:5	930:5	6	subsamplingver
LEAF_NODE	930:5	930:5	7	subsamplingver
EQ_OPERATOR	930:20	930:20	6	==
LEAF_NODE	930:20	930:20	7	==
FIELD	930:23	930:23	6	0
LEAF_NODE	930:23	930:23	7	0
LEAF_NODE	930:25	930:25	4	)
STATEMENTS	930:27	933:1	4	
LEAF_NODE	930:27	930:27	5	{
STATEMENTS	931:2	932:2	5	
EXPR_STATEMENT	931:2	931:92	6	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Invalid vertical YCbCr subsampling" ) ;
EXPR	931:2	931:2	7	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Invalid vertical YCbCr subsampling" )
FUNCTION_CALL	931:2	931:91	8	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Invalid vertical YCbCr subsampling" )
CALLEE	931:2	931:2	9	TIFFErrorExt
LEAF_NODE	931:2	931:2	10	TIFFErrorExt
LEAF_NODE	931:14	931:14	9	(
ARGUMENT	931:15	931:15	9	tif -> tif_clientdata
FIELD	931:15	931:20	10	tif -> tif_clientdata
LEAF_NODE	931:15	931:15	11	tif
LEAF_NODE	931:18	931:18	11	->
LEAF_NODE	931:20	931:20	11	tif_clientdata
LEAF_NODE	931:34	931:34	9	,
ARGUMENT	931:36	931:36	9	TIFFFileName ( tif )
FUNCTION_CALL	931:36	931:52	10	TIFFFileName ( tif )
CALLEE	931:36	931:36	11	TIFFFileName
LEAF_NODE	931:36	931:36	12	TIFFFileName
LEAF_NODE	931:48	931:48	11	(
ARGUMENT	931:49	931:49	11	tif
FIELD	931:49	931:49	12	tif
LEAF_NODE	931:49	931:49	13	tif
LEAF_NODE	931:52	931:52	11	)
LEAF_NODE	931:53	931:53	9	,
ARGUMENT	931:55	931:55	9	"Invalid vertical YCbCr subsampling"
FIELD	931:55	931:55	10	"Invalid vertical YCbCr subsampling"
LEAF_NODE	931:55	931:55	11	"Invalid vertical YCbCr subsampling"
LEAF_NODE	931:91	931:91	9	)
LEAF_NODE	931:92	931:92	7	;
JUMP_STATEMENT	932:2	932:12	6	return ( 0 ) ;
KEYWORD	932:2	932:2	7	return
LEAF_NODE	932:2	932:2	8	return
DESTINATION	932:9	932:9	7	( 0 )
EXPR	932:9	932:11	8	( 0 )
LEAF_NODE	932:9	932:9	9	(
FIELD	932:10	932:10	9	0
LEAF_NODE	932:10	932:10	10	0
LEAF_NODE	932:11	932:11	9	)
LEAF_NODE	932:12	932:12	7	;
LEAF_NODE	933:1	933:1	5	}
EXPR_STATEMENT	935:1	935:34	3	maxstripsize = TIFFStripSize ( tif ) ;
EXPR	935:1	935:1	4	maxstripsize = TIFFStripSize ( tif )
ASSIGN	935:1	935:16	5	maxstripsize = TIFFStripSize ( tif )
LVAL	935:1	935:1	6	maxstripsize
FIELD	935:1	935:1	7	maxstripsize
LEAF_NODE	935:1	935:1	8	maxstripsize
ASSIGN_OP	935:14	935:14	6	=
LEAF_NODE	935:14	935:14	7	=
RVAL	935:16	935:16	6	TIFFStripSize ( tif )
FUNCTION_CALL	935:16	935:33	7	TIFFStripSize ( tif )
CALLEE	935:16	935:16	8	TIFFStripSize
LEAF_NODE	935:16	935:16	9	TIFFStripSize
LEAF_NODE	935:29	935:29	8	(
ARGUMENT	935:30	935:30	8	tif
FIELD	935:30	935:30	9	tif
LEAF_NODE	935:30	935:30	10	tif
LEAF_NODE	935:33	935:33	8	)
LEAF_NODE	935:34	935:34	4	;
EXPR_STATEMENT	937:1	937:27	3	flip = setorientation ( img ) ;
EXPR	937:1	937:1	4	flip = setorientation ( img )
ASSIGN	937:1	937:8	5	flip = setorientation ( img )
LVAL	937:1	937:1	6	flip
FIELD	937:1	937:1	7	flip
LEAF_NODE	937:1	937:1	8	flip
ASSIGN_OP	937:6	937:6	6	=
LEAF_NODE	937:6	937:6	7	=
RVAL	937:8	937:8	6	setorientation ( img )
FUNCTION_CALL	937:8	937:26	7	setorientation ( img )
CALLEE	937:8	937:8	8	setorientation
LEAF_NODE	937:8	937:8	9	setorientation
LEAF_NODE	937:22	937:22	8	(
ARGUMENT	937:23	937:23	8	img
FIELD	937:23	937:23	9	img
LEAF_NODE	937:23	937:23	10	img
LEAF_NODE	937:26	937:26	8	)
LEAF_NODE	937:27	937:27	4	;
SELECTION	938:1	938:29	3	
KEYWORD	938:1	938:1	4	if
LEAF_NODE	938:1	938:1	5	if
LEAF_NODE	938:4	938:4	4	(
CONDITION	938:5	938:5	4	flip & FLIP_VERTICALLY
EXPR	938:5	938:12	5	flip & FLIP_VERTICALLY
FIELD	938:5	938:5	6	flip
LEAF_NODE	938:5	938:5	7	flip
LEAF_NODE	938:10	938:10	6	&
FIELD	938:12	938:12	6	FLIP_VERTICALLY
LEAF_NODE	938:12	938:12	7	FLIP_VERTICALLY
LEAF_NODE	938:27	938:27	4	)
STATEMENTS	938:29	941:1	4	
LEAF_NODE	938:29	938:29	5	{
STATEMENTS	939:2	940:2	5	
EXPR_STATEMENT	939:2	939:11	6	y = h - 1 ;
EXPR	939:2	939:2	7	y = h - 1
ASSIGN	939:2	939:6	8	y = h - 1
LVAL	939:2	939:2	9	y
FIELD	939:2	939:2	10	y
LEAF_NODE	939:2	939:2	11	y
ASSIGN_OP	939:4	939:4	9	=
LEAF_NODE	939:4	939:4	10	=
RVAL	939:6	939:10	9	h - 1
FIELD	939:6	939:6	10	h
LEAF_NODE	939:6	939:6	11	h
LEAF_NODE	939:8	939:8	10	-
FIELD	939:10	939:10	10	1
LEAF_NODE	939:10	939:10	11	1
LEAF_NODE	939:11	939:11	7	;
EXPR_STATEMENT	940:2	940:26	6	toskew = - ( int32 ) ( w + w ) ;
EXPR	940:2	940:2	7	toskew = - ( int32 ) ( w + w )
ASSIGN	940:2	940:11	8	toskew = - ( int32 ) ( w + w )
LVAL	940:2	940:2	9	toskew
FIELD	940:2	940:2	10	toskew
LEAF_NODE	940:2	940:2	11	toskew
ASSIGN_OP	940:9	940:9	9	=
LEAF_NODE	940:9	940:9	10	=
RVAL	940:11	940:11	9	- ( int32 ) ( w + w )
UNARY_EXPR	940:11	940:12	10	- ( int32 ) ( w + w )
UNARY_OPERATOR	940:11	940:11	11	-
LEAF_NODE	940:11	940:11	12	-
FUNCTION_CALL	940:12	940:25	11	( int32 ) ( w + w )
CALLEE	940:12	940:18	12	( int32 )
LEAF_NODE	940:12	940:12	13	(
FIELD	940:13	940:13	13	int32
LEAF_NODE	940:13	940:13	14	int32
LEAF_NODE	940:18	940:18	13	)
LEAF_NODE	940:19	940:19	12	(
ARGUMENT	940:20	940:24	12	w + w
FIELD	940:20	940:20	13	w
LEAF_NODE	940:20	940:20	14	w
LEAF_NODE	940:22	940:22	13	+
FIELD	940:24	940:24	13	w
LEAF_NODE	940:24	940:24	14	w
LEAF_NODE	940:25	940:25	12	)
LEAF_NODE	940:26	940:26	7	;
LEAF_NODE	941:1	941:1	5	}
SELECTION	941:3	941:8	3	
KEYWORD	941:3	941:3	4	else
LEAF_NODE	941:3	941:3	5	else
STATEMENTS	941:8	944:1	4	
LEAF_NODE	941:8	941:8	5	{
STATEMENTS	942:2	943:2	5	
EXPR_STATEMENT	942:2	942:7	6	y = 0 ;
EXPR	942:2	942:2	7	y = 0
ASSIGN	942:2	942:6	8	y = 0
LVAL	942:2	942:2	9	y
FIELD	942:2	942:2	10	y
LEAF_NODE	942:2	942:2	11	y
ASSIGN_OP	942:4	942:4	9	=
LEAF_NODE	942:4	942:4	10	=
RVAL	942:6	942:6	9	0
FIELD	942:6	942:6	10	0
LEAF_NODE	942:6	942:6	11	0
LEAF_NODE	942:7	942:7	7	;
EXPR_STATEMENT	943:2	943:26	6	toskew = - ( int32 ) ( w - w ) ;
EXPR	943:2	943:2	7	toskew = - ( int32 ) ( w - w )
ASSIGN	943:2	943:11	8	toskew = - ( int32 ) ( w - w )
LVAL	943:2	943:2	9	toskew
FIELD	943:2	943:2	10	toskew
LEAF_NODE	943:2	943:2	11	toskew
ASSIGN_OP	943:9	943:9	9	=
LEAF_NODE	943:9	943:9	10	=
RVAL	943:11	943:11	9	- ( int32 ) ( w - w )
UNARY_EXPR	943:11	943:12	10	- ( int32 ) ( w - w )
UNARY_OPERATOR	943:11	943:11	11	-
LEAF_NODE	943:11	943:11	12	-
FUNCTION_CALL	943:12	943:25	11	( int32 ) ( w - w )
CALLEE	943:12	943:18	12	( int32 )
LEAF_NODE	943:12	943:12	13	(
FIELD	943:13	943:13	13	int32
LEAF_NODE	943:13	943:13	14	int32
LEAF_NODE	943:18	943:18	13	)
LEAF_NODE	943:19	943:19	12	(
ARGUMENT	943:20	943:24	12	w - w
FIELD	943:20	943:20	13	w
LEAF_NODE	943:20	943:20	14	w
LEAF_NODE	943:22	943:22	13	-
FIELD	943:24	943:24	13	w
LEAF_NODE	943:24	943:24	14	w
LEAF_NODE	943:25	943:25	12	)
LEAF_NODE	943:26	943:26	7	;
LEAF_NODE	944:1	944:1	5	}
EXPR_STATEMENT	946:1	946:64	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	946:1	946:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
FUNCTION_CALL	946:1	946:63	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	946:1	946:1	6	TIFFGetFieldDefaulted
LEAF_NODE	946:1	946:1	7	TIFFGetFieldDefaulted
LEAF_NODE	946:22	946:22	6	(
ARGUMENT	946:23	946:23	6	tif
FIELD	946:23	946:23	7	tif
LEAF_NODE	946:23	946:23	8	tif
LEAF_NODE	946:26	946:26	6	,
ARGUMENT	946:28	946:28	6	TIFFTAG_ROWSPERSTRIP
FIELD	946:28	946:28	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	946:28	946:28	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	946:48	946:48	6	,
ARGUMENT	946:50	946:50	6	& rowsperstrip
UNARY_EXPR	946:50	946:51	7	& rowsperstrip
UNARY_OPERATOR	946:50	946:50	8	&
LEAF_NODE	946:50	946:50	9	&
FIELD	946:51	946:51	8	rowsperstrip
LEAF_NODE	946:51	946:51	9	rowsperstrip
LEAF_NODE	946:63	946:63	6	)
LEAF_NODE	946:64	946:64	4	;
EXPR_STATEMENT	948:1	948:33	3	scanline = TIFFScanlineSize ( tif ) ;
EXPR	948:1	948:1	4	scanline = TIFFScanlineSize ( tif )
ASSIGN	948:1	948:12	5	scanline = TIFFScanlineSize ( tif )
LVAL	948:1	948:1	6	scanline
FIELD	948:1	948:1	7	scanline
LEAF_NODE	948:1	948:1	8	scanline
ASSIGN_OP	948:10	948:10	6	=
LEAF_NODE	948:10	948:10	7	=
RVAL	948:12	948:12	6	TIFFScanlineSize ( tif )
FUNCTION_CALL	948:12	948:32	7	TIFFScanlineSize ( tif )
CALLEE	948:12	948:12	8	TIFFScanlineSize
LEAF_NODE	948:12	948:12	9	TIFFScanlineSize
LEAF_NODE	948:28	948:28	8	(
ARGUMENT	948:29	948:29	8	tif
FIELD	948:29	948:29	9	tif
LEAF_NODE	948:29	948:29	10	tif
LEAF_NODE	948:32	948:32	8	)
LEAF_NODE	948:33	948:33	4	;
EXPR_STATEMENT	949:1	949:49	3	fromskew = ( w < imagewidth ? imagewidth - w : 0 ) ;
EXPR	949:1	949:1	4	fromskew = ( w < imagewidth ? imagewidth - w : 0 )
ASSIGN	949:1	949:12	5	fromskew = ( w < imagewidth ? imagewidth - w : 0 )
LVAL	949:1	949:1	6	fromskew
FIELD	949:1	949:1	7	fromskew
LEAF_NODE	949:1	949:1	8	fromskew
ASSIGN_OP	949:10	949:10	6	=
LEAF_NODE	949:10	949:10	7	=
RVAL	949:12	949:48	6	( w < imagewidth ? imagewidth - w : 0 )
LEAF_NODE	949:12	949:12	7	(
COND_EXPR	949:13	949:47	7	w < imagewidth ? imagewidth - w : 0
CONDITION	949:13	949:17	8	w < imagewidth
FIELD	949:13	949:13	9	w
LEAF_NODE	949:13	949:13	10	w
REL_OPERATOR	949:15	949:15	9	<
LEAF_NODE	949:15	949:15	10	<
FIELD	949:17	949:17	9	imagewidth
LEAF_NODE	949:17	949:17	10	imagewidth
LEAF_NODE	949:28	949:28	8	?
EXPR	949:30	949:43	8	imagewidth - w
FIELD	949:30	949:30	9	imagewidth
LEAF_NODE	949:30	949:30	10	imagewidth
LEAF_NODE	949:41	949:41	9	-
FIELD	949:43	949:43	9	w
LEAF_NODE	949:43	949:43	10	w
LEAF_NODE	949:45	949:45	8	:
FIELD	949:47	949:47	8	0
LEAF_NODE	949:47	949:47	9	0
LEAF_NODE	949:48	949:48	7	)
LEAF_NODE	949:49	949:49	4	;
ITERATION	950:1	951:1	3	
KEYWORD	950:1	950:1	4	for
LEAF_NODE	950:1	950:1	5	for
LEAF_NODE	950:5	950:5	4	(
FOR_INIT	950:6	950:13	4	row = 0 ;
EXPR	950:6	950:6	5	row = 0
ASSIGN	950:6	950:12	6	row = 0
LVAL	950:6	950:6	7	row
FIELD	950:6	950:6	8	row
LEAF_NODE	950:6	950:6	9	row
ASSIGN_OP	950:10	950:10	7	=
LEAF_NODE	950:10	950:10	8	=
RVAL	950:12	950:12	7	0
FIELD	950:12	950:12	8	0
LEAF_NODE	950:12	950:12	9	0
LEAF_NODE	950:13	950:13	5	;
CONDITION	950:15	950:15	4	row < h
EXPR	950:15	950:21	5	row < h
FIELD	950:15	950:15	6	row
LEAF_NODE	950:15	950:15	7	row
REL_OPERATOR	950:19	950:19	6	<
LEAF_NODE	950:19	950:19	7	<
FIELD	950:21	950:21	6	h
LEAF_NODE	950:21	950:21	7	h
LEAF_NODE	950:22	950:22	4	;
FOR_EXPR	950:24	950:24	4	row += nrow
EXPR	950:24	950:24	5	row += nrow
ASSIGN	950:24	950:31	6	row += nrow
LVAL	950:24	950:24	7	row
FIELD	950:24	950:24	8	row
LEAF_NODE	950:24	950:24	9	row
ASSIGN_OP	950:28	950:28	7	+=
LEAF_NODE	950:28	950:28	8	+=
RVAL	950:31	950:31	7	nrow
FIELD	950:31	950:31	8	nrow
LEAF_NODE	950:31	950:31	9	nrow
LEAF_NODE	950:35	950:35	4	)
STATEMENTS	951:1	979:1	4	
LEAF_NODE	951:1	951:1	5	{
STATEMENTS	952:2	978:64	5	
SIMPLE_DECL	952:2	952:13	6	uint32 temp ;
VAR_DECL	952:2	952:9	7	uint32 temp
TYPE	952:2	952:2	8	uint32
TYPE_NAME	952:2	952:2	9	uint32
LEAF_NODE	952:2	952:2	10	uint32
NAME	952:9	952:9	8	temp
LEAF_NODE	952:9	952:9	9	temp
LEAF_NODE	952:13	952:13	7	;
EXPR_STATEMENT	953:2	953:68	6	rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ;
EXPR	953:2	953:2	7	rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip
ASSIGN	953:2	953:15	8	rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip
LVAL	953:2	953:2	9	rowstoread
FIELD	953:2	953:2	10	rowstoread
LEAF_NODE	953:2	953:2	11	rowstoread
ASSIGN_OP	953:13	953:13	9	=
LEAF_NODE	953:13	953:13	10	=
RVAL	953:15	953:56	9	rowsperstrip - ( row + img -> row_offset ) % rowsperstrip
FIELD	953:15	953:15	10	rowsperstrip
LEAF_NODE	953:15	953:15	11	rowsperstrip
LEAF_NODE	953:28	953:28	10	-
LEAF_NODE	953:30	953:30	10	(
FIELD	953:31	953:31	10	row
LEAF_NODE	953:31	953:31	11	row
LEAF_NODE	953:35	953:35	10	+
FIELD	953:37	953:42	10	img -> row_offset
LEAF_NODE	953:37	953:37	11	img
LEAF_NODE	953:40	953:40	11	->
LEAF_NODE	953:42	953:42	11	row_offset
LEAF_NODE	953:52	953:52	10	)
LEAF_NODE	953:54	953:54	10	%
FIELD	953:56	953:56	10	rowsperstrip
LEAF_NODE	953:56	953:56	11	rowsperstrip
LEAF_NODE	953:68	953:68	7	;
EXPR_STATEMENT	954:2	954:54	6	nrow = ( row + rowstoread > h ? h - row : rowstoread ) ;
EXPR	954:2	954:2	7	nrow = ( row + rowstoread > h ? h - row : rowstoread )
ASSIGN	954:2	954:9	8	nrow = ( row + rowstoread > h ? h - row : rowstoread )
LVAL	954:2	954:2	9	nrow
FIELD	954:2	954:2	10	nrow
LEAF_NODE	954:2	954:2	11	nrow
ASSIGN_OP	954:7	954:7	9	=
LEAF_NODE	954:7	954:7	10	=
RVAL	954:9	954:53	9	( row + rowstoread > h ? h - row : rowstoread )
LEAF_NODE	954:9	954:9	10	(
COND_EXPR	954:10	954:43	10	row + rowstoread > h ? h - row : rowstoread
CONDITION	954:10	954:29	11	row + rowstoread > h
FIELD	954:10	954:10	12	row
LEAF_NODE	954:10	954:10	13	row
LEAF_NODE	954:14	954:14	12	+
FIELD	954:16	954:16	12	rowstoread
LEAF_NODE	954:16	954:16	13	rowstoread
REL_OPERATOR	954:27	954:27	12	>
LEAF_NODE	954:27	954:27	13	>
FIELD	954:29	954:29	12	h
LEAF_NODE	954:29	954:29	13	h
LEAF_NODE	954:31	954:31	11	?
EXPR	954:33	954:37	11	h - row
FIELD	954:33	954:33	12	h
LEAF_NODE	954:33	954:33	13	h
LEAF_NODE	954:35	954:35	12	-
FIELD	954:37	954:37	12	row
LEAF_NODE	954:37	954:37	13	row
LEAF_NODE	954:41	954:41	11	:
FIELD	954:43	954:43	11	rowstoread
LEAF_NODE	954:43	954:43	12	rowstoread
LEAF_NODE	954:53	954:53	10	)
LEAF_NODE	954:54	954:54	7	;
EXPR_STATEMENT	955:2	955:16	6	nrowsub = nrow ;
EXPR	955:2	955:2	7	nrowsub = nrow
ASSIGN	955:2	955:12	8	nrowsub = nrow
LVAL	955:2	955:2	9	nrowsub
FIELD	955:2	955:2	10	nrowsub
LEAF_NODE	955:2	955:2	11	nrowsub
ASSIGN_OP	955:10	955:10	9	=
LEAF_NODE	955:10	955:10	10	=
RVAL	955:12	955:12	9	nrow
FIELD	955:12	955:12	10	nrow
LEAF_NODE	955:12	955:12	11	nrow
LEAF_NODE	955:16	955:16	7	;
SELECTION	956:2	957:3	6	
KEYWORD	956:2	956:2	7	if
LEAF_NODE	956:2	956:2	8	if
LEAF_NODE	956:5	956:5	7	(
CONDITION	956:6	956:6	7	( nrowsub % subsamplingver ) != 0
EXPR	956:6	956:32	8	( nrowsub % subsamplingver ) != 0
LEAF_NODE	956:6	956:6	9	(
FIELD	956:7	956:7	9	nrowsub
LEAF_NODE	956:7	956:7	10	nrowsub
LEAF_NODE	956:14	956:14	9	%
FIELD	956:15	956:15	9	subsamplingver
LEAF_NODE	956:15	956:15	10	subsamplingver
LEAF_NODE	956:29	956:29	9	)
EQ_OPERATOR	956:30	956:30	9	!=
LEAF_NODE	956:30	956:30	10	!=
FIELD	956:32	956:32	9	0
LEAF_NODE	956:32	956:32	10	0
LEAF_NODE	956:33	956:33	7	)
STATEMENTS	957:3	957:3	7	
EXPR_STATEMENT	957:3	957:49	8	nrowsub += subsamplingver - nrowsub % subsamplingver ;
EXPR	957:3	957:3	9	nrowsub += subsamplingver - nrowsub % subsamplingver
ASSIGN	957:3	957:12	10	nrowsub += subsamplingver - nrowsub % subsamplingver
LVAL	957:3	957:3	11	nrowsub
FIELD	957:3	957:3	12	nrowsub
LEAF_NODE	957:3	957:3	13	nrowsub
ASSIGN_OP	957:10	957:10	11	+=
LEAF_NODE	957:10	957:10	12	+=
RVAL	957:12	957:35	11	subsamplingver - nrowsub % subsamplingver
FIELD	957:12	957:12	12	subsamplingver
LEAF_NODE	957:12	957:12	13	subsamplingver
LEAF_NODE	957:26	957:26	12	-
FIELD	957:27	957:27	12	nrowsub
LEAF_NODE	957:27	957:27	13	nrowsub
LEAF_NODE	957:34	957:34	12	%
FIELD	957:35	957:35	12	subsamplingver
LEAF_NODE	957:35	957:35	13	subsamplingver
LEAF_NODE	957:49	957:49	9	;
EXPR_STATEMENT	958:2	958:55	6	temp = ( row + img -> row_offset ) % rowsperstrip + nrowsub ;
EXPR	958:2	958:2	7	temp = ( row + img -> row_offset ) % rowsperstrip + nrowsub
ASSIGN	958:2	958:9	8	temp = ( row + img -> row_offset ) % rowsperstrip + nrowsub
LVAL	958:2	958:2	9	temp
FIELD	958:2	958:2	10	temp
LEAF_NODE	958:2	958:2	11	temp
ASSIGN_OP	958:7	958:7	9	=
LEAF_NODE	958:7	958:7	10	=
RVAL	958:9	958:48	9	( row + img -> row_offset ) % rowsperstrip + nrowsub
LEAF_NODE	958:9	958:9	10	(
FIELD	958:10	958:10	10	row
LEAF_NODE	958:10	958:10	11	row
LEAF_NODE	958:14	958:14	10	+
FIELD	958:16	958:21	10	img -> row_offset
LEAF_NODE	958:16	958:16	11	img
LEAF_NODE	958:19	958:19	11	->
LEAF_NODE	958:21	958:21	11	row_offset
LEAF_NODE	958:31	958:31	10	)
LEAF_NODE	958:32	958:32	10	%
FIELD	958:33	958:33	10	rowsperstrip
LEAF_NODE	958:33	958:33	11	rowsperstrip
LEAF_NODE	958:46	958:46	10	+
FIELD	958:48	958:48	10	nrowsub
LEAF_NODE	958:48	958:48	11	nrowsub
LEAF_NODE	958:55	958:55	7	;
SELECTION	959:2	960:2	6	
KEYWORD	959:2	959:2	7	if
LEAF_NODE	959:2	959:2	8	if
LEAF_NODE	959:4	959:4	7	(
CONDITION	959:6	959:6	7	scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline )
EXPR	959:6	959:6	8	scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline )
AND	959:6	959:22	9	scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline )
EXPR	959:6	959:17	10	scanline > 0
FIELD	959:6	959:6	11	scanline
LEAF_NODE	959:6	959:6	12	scanline
REL_OPERATOR	959:15	959:15	11	>
LEAF_NODE	959:15	959:15	12	>
FIELD	959:17	959:17	11	0
LEAF_NODE	959:17	959:17	12	0
LEAF_NODE	959:19	959:19	10	&&
EXPR	959:22	959:66	10	temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline )
FIELD	959:22	959:22	11	temp
LEAF_NODE	959:22	959:22	12	temp
REL_OPERATOR	959:27	959:27	11	>
LEAF_NODE	959:27	959:27	12	>
LEAF_NODE	959:29	959:29	11	(
TYPE_NAME	959:30	959:30	11	size_t
LEAF_NODE	959:30	959:30	12	size_t
LEAF_NODE	959:36	959:36	11	)
LEAF_NODE	959:37	959:37	11	(
FIELD	959:38	959:38	11	TIFF_TMSIZE_T_MAX
LEAF_NODE	959:38	959:38	12	TIFF_TMSIZE_T_MAX
LEAF_NODE	959:56	959:56	11	/
FIELD	959:58	959:58	11	scanline
LEAF_NODE	959:58	959:58	12	scanline
LEAF_NODE	959:66	959:66	11	)
LEAF_NODE	959:68	959:68	7	)
STATEMENTS	960:2	963:2	7	
LEAF_NODE	960:2	960:2	8	{
STATEMENTS	961:3	962:3	8	
EXPR_STATEMENT	961:3	961:92	9	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer overflow in gtStripContig" ) ;
EXPR	961:3	961:3	10	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer overflow in gtStripContig" )
FUNCTION_CALL	961:3	961:91	11	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer overflow in gtStripContig" )
CALLEE	961:3	961:3	12	TIFFErrorExt
LEAF_NODE	961:3	961:3	13	TIFFErrorExt
LEAF_NODE	961:15	961:15	12	(
ARGUMENT	961:16	961:16	12	tif -> tif_clientdata
FIELD	961:16	961:21	13	tif -> tif_clientdata
LEAF_NODE	961:16	961:16	14	tif
LEAF_NODE	961:19	961:19	14	->
LEAF_NODE	961:21	961:21	14	tif_clientdata
LEAF_NODE	961:35	961:35	12	,
ARGUMENT	961:37	961:37	12	TIFFFileName ( tif )
FUNCTION_CALL	961:37	961:53	13	TIFFFileName ( tif )
CALLEE	961:37	961:37	14	TIFFFileName
LEAF_NODE	961:37	961:37	15	TIFFFileName
LEAF_NODE	961:49	961:49	14	(
ARGUMENT	961:50	961:50	14	tif
FIELD	961:50	961:50	15	tif
LEAF_NODE	961:50	961:50	16	tif
LEAF_NODE	961:53	961:53	14	)
LEAF_NODE	961:54	961:54	12	,
ARGUMENT	961:56	961:56	12	"Integer overflow in gtStripContig"
FIELD	961:56	961:56	13	"Integer overflow in gtStripContig"
LEAF_NODE	961:56	961:56	14	"Integer overflow in gtStripContig"
LEAF_NODE	961:91	961:91	12	)
LEAF_NODE	961:92	961:92	10	;
JUMP_STATEMENT	962:3	962:11	9	return 0 ;
KEYWORD	962:3	962:3	10	return
LEAF_NODE	962:3	962:3	11	return
DESTINATION	962:10	962:10	10	0
EXPR	962:10	962:10	11	0
FIELD	962:10	962:10	12	0
LEAF_NODE	962:10	962:10	13	0
LEAF_NODE	962:11	962:11	10	;
LEAF_NODE	963:2	963:2	8	}
SELECTION	964:2	970:2	6	
KEYWORD	964:2	964:2	7	if
LEAF_NODE	964:2	964:2	8	if
LEAF_NODE	964:5	964:5	7	(
CONDITION	964:6	964:6	7	_TIFFReadEncodedStripAndAllocBuffer ( tif , TIFFComputeStrip ( tif , row + img -> row_offset , 0 ) , ( void * * ) ( & buf ) , maxstripsize , temp * scanline ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
EXPR	964:6	964:6	8	_TIFFReadEncodedStripAndAllocBuffer ( tif , TIFFComputeStrip ( tif , row + img -> row_offset , 0 ) , ( void * * ) ( & buf ) , maxstripsize , temp * scanline ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
AND	964:6	969:9	9	_TIFFReadEncodedStripAndAllocBuffer ( tif , TIFFComputeStrip ( tif , row + img -> row_offset , 0 ) , ( void * * ) ( & buf ) , maxstripsize , temp * scanline ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
EXPR	964:6	968:37	10	_TIFFReadEncodedStripAndAllocBuffer ( tif , TIFFComputeStrip ( tif , row + img -> row_offset , 0 ) , ( void * * ) ( & buf ) , maxstripsize , temp * scanline ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	964:6	968:21	11	_TIFFReadEncodedStripAndAllocBuffer ( tif , TIFFComputeStrip ( tif , row + img -> row_offset , 0 ) , ( void * * ) ( & buf ) , maxstripsize , temp * scanline )
CALLEE	964:6	964:6	12	_TIFFReadEncodedStripAndAllocBuffer
LEAF_NODE	964:6	964:6	13	_TIFFReadEncodedStripAndAllocBuffer
LEAF_NODE	964:41	964:41	12	(
ARGUMENT	964:42	964:42	12	tif
FIELD	964:42	964:42	13	tif
LEAF_NODE	964:42	964:42	14	tif
LEAF_NODE	964:45	964:45	12	,
ARGUMENT	965:6	965:6	12	TIFFComputeStrip ( tif , row + img -> row_offset , 0 )
FUNCTION_CALL	965:6	965:49	13	TIFFComputeStrip ( tif , row + img -> row_offset , 0 )
CALLEE	965:6	965:6	14	TIFFComputeStrip
LEAF_NODE	965:6	965:6	15	TIFFComputeStrip
LEAF_NODE	965:22	965:22	14	(
ARGUMENT	965:23	965:23	14	tif
FIELD	965:23	965:23	15	tif
LEAF_NODE	965:23	965:23	16	tif
LEAF_NODE	965:26	965:26	14	,
ARGUMENT	965:27	965:31	14	row + img -> row_offset
FIELD	965:27	965:27	15	row
LEAF_NODE	965:27	965:27	16	row
LEAF_NODE	965:30	965:30	15	+
FIELD	965:31	965:36	15	img -> row_offset
LEAF_NODE	965:31	965:31	16	img
LEAF_NODE	965:34	965:34	16	->
LEAF_NODE	965:36	965:36	16	row_offset
LEAF_NODE	965:46	965:46	14	,
ARGUMENT	965:48	965:48	14	0
FIELD	965:48	965:48	15	0
LEAF_NODE	965:48	965:48	16	0
LEAF_NODE	965:49	965:49	14	)
LEAF_NODE	965:50	965:50	12	,
ARGUMENT	966:6	966:19	12	( void * * ) ( & buf )
LEAF_NODE	966:6	966:6	13	(
TYPE_NAME	966:7	966:7	13	void
LEAF_NODE	966:7	966:7	14	void
LEAF_NODE	966:11	966:11	13	*
LEAF_NODE	966:12	966:12	13	*
LEAF_NODE	966:13	966:13	13	)
LEAF_NODE	966:14	966:14	13	(
UNARY_EXPR	966:15	966:16	13	& buf
UNARY_OPERATOR	966:15	966:15	14	&
LEAF_NODE	966:15	966:15	15	&
FIELD	966:16	966:16	14	buf
LEAF_NODE	966:16	966:16	15	buf
LEAF_NODE	966:19	966:19	13	)
LEAF_NODE	966:20	966:20	12	,
ARGUMENT	967:20	967:20	12	maxstripsize
FIELD	967:20	967:20	13	maxstripsize
LEAF_NODE	967:20	967:20	14	maxstripsize
LEAF_NODE	967:32	967:32	12	,
ARGUMENT	968:6	968:13	12	temp * scanline
FIELD	968:6	968:6	13	temp
LEAF_NODE	968:6	968:6	14	temp
LEAF_NODE	968:11	968:11	13	*
FIELD	968:13	968:13	13	scanline
LEAF_NODE	968:13	968:13	14	scanline
LEAF_NODE	968:21	968:21	12	)
EQ_OPERATOR	968:22	968:22	11	==
LEAF_NODE	968:22	968:22	12	==
LEAF_NODE	968:24	968:24	11	(
TYPE_NAME	968:25	968:25	11	tmsize_t
LEAF_NODE	968:25	968:25	12	tmsize_t
LEAF_NODE	968:33	968:33	11	)
LEAF_NODE	968:34	968:34	11	(
UNARY_EXPR	968:35	968:36	11	- 1
UNARY_OPERATOR	968:35	968:35	12	-
LEAF_NODE	968:35	968:35	13	-
FIELD	968:36	968:36	12	1
LEAF_NODE	968:36	968:36	13	1
LEAF_NODE	968:37	968:37	11	)
LEAF_NODE	969:6	969:6	10	&&
EXPR	969:9	969:39	10	( buf == NULL || img -> stoponerr )
LEAF_NODE	969:9	969:9	11	(
OR	969:10	969:25	11	buf == NULL || img -> stoponerr
EXPR	969:10	969:17	12	buf == NULL
FIELD	969:10	969:10	13	buf
LEAF_NODE	969:10	969:10	14	buf
EQ_OPERATOR	969:14	969:14	13	==
LEAF_NODE	969:14	969:14	14	==
FIELD	969:17	969:17	13	NULL
LEAF_NODE	969:17	969:17	14	NULL
LEAF_NODE	969:22	969:22	12	||
EXPR	969:25	969:25	12	img -> stoponerr
FIELD	969:25	969:30	13	img -> stoponerr
LEAF_NODE	969:25	969:25	14	img
LEAF_NODE	969:28	969:28	14	->
LEAF_NODE	969:30	969:30	14	stoponerr
LEAF_NODE	969:39	969:39	11	)
LEAF_NODE	969:40	969:40	7	)
STATEMENTS	970:2	973:2	7	
LEAF_NODE	970:2	970:2	8	{
STATEMENTS	971:3	972:3	8	
EXPR_STATEMENT	971:3	971:10	9	ret = 0 ;
EXPR	971:3	971:3	10	ret = 0
ASSIGN	971:3	971:9	11	ret = 0
LVAL	971:3	971:3	12	ret
FIELD	971:3	971:3	13	ret
LEAF_NODE	971:3	971:3	14	ret
ASSIGN_OP	971:7	971:7	12	=
LEAF_NODE	971:7	971:7	13	=
RVAL	971:9	971:9	12	0
FIELD	971:9	971:9	13	0
LEAF_NODE	971:9	971:9	14	0
LEAF_NODE	971:10	971:10	10	;
JUMP_STATEMENT	972:3	972:8	9	break DESTINATION ;
KEYWORD	972:3	972:3	10	break
LEAF_NODE	972:3	972:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	972:8	972:8	10	;
LEAF_NODE	973:2	973:2	8	}
EXPR_STATEMENT	975:2	976:54	6	pos = ( ( row + img -> row_offset ) % rowsperstrip ) * scanline + ( ( tmsize_t ) img -> col_offset * img -> samplesperpixel ) ;
EXPR	975:2	975:2	7	pos = ( ( row + img -> row_offset ) % rowsperstrip ) * scanline + ( ( tmsize_t ) img -> col_offset * img -> samplesperpixel )
ASSIGN	975:2	975:8	8	pos = ( ( row + img -> row_offset ) % rowsperstrip ) * scanline + ( ( tmsize_t ) img -> col_offset * img -> samplesperpixel )
LVAL	975:2	975:2	9	pos
FIELD	975:2	975:2	10	pos
LEAF_NODE	975:2	975:2	11	pos
ASSIGN_OP	975:6	975:6	9	=
LEAF_NODE	975:6	975:6	10	=
RVAL	975:8	976:53	9	( ( row + img -> row_offset ) % rowsperstrip ) * scanline + ( ( tmsize_t ) img -> col_offset * img -> samplesperpixel )
LEAF_NODE	975:8	975:8	10	(
LEAF_NODE	975:9	975:9	10	(
FIELD	975:10	975:10	10	row
LEAF_NODE	975:10	975:10	11	row
LEAF_NODE	975:14	975:14	10	+
FIELD	975:16	975:21	10	img -> row_offset
LEAF_NODE	975:16	975:16	11	img
LEAF_NODE	975:19	975:19	11	->
LEAF_NODE	975:21	975:21	11	row_offset
LEAF_NODE	975:31	975:31	10	)
LEAF_NODE	975:33	975:33	10	%
FIELD	975:35	975:35	10	rowsperstrip
LEAF_NODE	975:35	975:35	11	rowsperstrip
LEAF_NODE	975:47	975:47	10	)
LEAF_NODE	975:49	975:49	10	*
FIELD	975:51	975:51	10	scanline
LEAF_NODE	975:51	975:51	11	scanline
LEAF_NODE	975:60	975:60	10	+
LEAF_NODE	976:3	976:3	10	(
LEAF_NODE	976:4	976:4	10	(
TYPE_NAME	976:5	976:5	10	tmsize_t
LEAF_NODE	976:5	976:5	11	tmsize_t
LEAF_NODE	976:13	976:13	10	)
FIELD	976:15	976:20	10	img -> col_offset
LEAF_NODE	976:15	976:15	11	img
LEAF_NODE	976:18	976:18	11	->
LEAF_NODE	976:20	976:20	11	col_offset
LEAF_NODE	976:31	976:31	10	*
FIELD	976:33	976:38	10	img -> samplesperpixel
LEAF_NODE	976:33	976:33	11	img
LEAF_NODE	976:36	976:36	11	->
LEAF_NODE	976:38	976:38	11	samplesperpixel
LEAF_NODE	976:53	976:53	10	)
LEAF_NODE	976:54	976:54	7	;
EXPR_STATEMENT	977:2	977:69	6	( * put ) ( img , raster + y * w , 0 , y , w , nrow , fromskew , toskew , buf + pos ) ;
EXPR	977:2	977:2	7	( * put ) ( img , raster + y * w , 0 , y , w , nrow , fromskew , toskew , buf + pos )
FUNCTION_CALL	977:2	977:68	8	( * put ) ( img , raster + y * w , 0 , y , w , nrow , fromskew , toskew , buf + pos )
CALLEE	977:2	977:7	9	( * put )
LEAF_NODE	977:2	977:2	10	(
UNARY_EXPR	977:3	977:4	10	* put
UNARY_OPERATOR	977:3	977:3	11	*
LEAF_NODE	977:3	977:3	12	*
FIELD	977:4	977:4	11	put
LEAF_NODE	977:4	977:4	12	put
LEAF_NODE	977:7	977:7	10	)
LEAF_NODE	977:8	977:8	9	(
ARGUMENT	977:9	977:9	9	img
FIELD	977:9	977:9	10	img
LEAF_NODE	977:9	977:9	11	img
LEAF_NODE	977:12	977:12	9	,
ARGUMENT	977:14	977:23	9	raster + y * w
FIELD	977:14	977:14	10	raster
LEAF_NODE	977:14	977:14	11	raster
LEAF_NODE	977:20	977:20	10	+
FIELD	977:21	977:21	10	y
LEAF_NODE	977:21	977:21	11	y
LEAF_NODE	977:22	977:22	10	*
FIELD	977:23	977:23	10	w
LEAF_NODE	977:23	977:23	11	w
LEAF_NODE	977:24	977:24	9	,
ARGUMENT	977:26	977:26	9	0
FIELD	977:26	977:26	10	0
LEAF_NODE	977:26	977:26	11	0
LEAF_NODE	977:27	977:27	9	,
ARGUMENT	977:29	977:29	9	y
FIELD	977:29	977:29	10	y
LEAF_NODE	977:29	977:29	11	y
LEAF_NODE	977:30	977:30	9	,
ARGUMENT	977:32	977:32	9	w
FIELD	977:32	977:32	10	w
LEAF_NODE	977:32	977:32	11	w
LEAF_NODE	977:33	977:33	9	,
ARGUMENT	977:35	977:35	9	nrow
FIELD	977:35	977:35	10	nrow
LEAF_NODE	977:35	977:35	11	nrow
LEAF_NODE	977:39	977:39	9	,
ARGUMENT	977:41	977:41	9	fromskew
FIELD	977:41	977:41	10	fromskew
LEAF_NODE	977:41	977:41	11	fromskew
LEAF_NODE	977:49	977:49	9	,
ARGUMENT	977:51	977:51	9	toskew
FIELD	977:51	977:51	10	toskew
LEAF_NODE	977:51	977:51	11	toskew
LEAF_NODE	977:57	977:57	9	,
ARGUMENT	977:59	977:65	9	buf + pos
FIELD	977:59	977:59	10	buf
LEAF_NODE	977:59	977:59	11	buf
LEAF_NODE	977:63	977:63	10	+
FIELD	977:65	977:65	10	pos
LEAF_NODE	977:65	977:65	11	pos
LEAF_NODE	977:68	977:68	9	)
LEAF_NODE	977:69	977:69	7	;
LEAF_NODE	978:2	978:2	6	y
LEAF_NODE	978:4	978:4	6	+=
LEAF_NODE	978:7	978:7	6	(
LEAF_NODE	978:8	978:8	6	(
LEAF_NODE	978:9	978:9	6	flip
LEAF_NODE	978:14	978:14	6	&
LEAF_NODE	978:16	978:16	6	FLIP_VERTICALLY
LEAF_NODE	978:31	978:31	6	)
LEAF_NODE	978:33	978:33	6	?
LEAF_NODE	978:35	978:35	6	-
LEAF_NODE	978:36	978:36	6	(
LEAF_NODE	978:37	978:37	6	int32
LEAF_NODE	978:42	978:42	6	)
LABEL	978:44	978:49	6	nrow :
LEAF_NODE	978:44	978:44	7	nrow
LEAF_NODE	978:49	978:49	7	:
LEAF_NODE	978:51	978:51	6	(
LEAF_NODE	978:52	978:52	6	int32
LEAF_NODE	978:57	978:57	6	)
LEAF_NODE	978:59	978:59	6	nrow
LEAF_NODE	978:63	978:63	6	)
LEAF_NODE	978:64	978:64	6	;
LEAF_NODE	979:1	979:1	5	}
SELECTION	981:1	981:31	3	
KEYWORD	981:1	981:1	4	if
LEAF_NODE	981:1	981:1	5	if
LEAF_NODE	981:4	981:4	4	(
CONDITION	981:5	981:5	4	flip & FLIP_HORIZONTALLY
EXPR	981:5	981:12	5	flip & FLIP_HORIZONTALLY
FIELD	981:5	981:5	6	flip
LEAF_NODE	981:5	981:5	7	flip
LEAF_NODE	981:10	981:10	6	&
FIELD	981:12	981:12	6	FLIP_HORIZONTALLY
LEAF_NODE	981:12	981:12	7	FLIP_HORIZONTALLY
LEAF_NODE	981:29	981:29	4	)
STATEMENTS	981:31	996:1	4	
LEAF_NODE	981:31	981:31	5	{
STATEMENTS	982:2	984:2	5	
SIMPLE_DECL	982:2	982:13	6	uint32 line ;
VAR_DECL	982:2	982:9	7	uint32 line
TYPE	982:2	982:2	8	uint32
TYPE_NAME	982:2	982:2	9	uint32
LEAF_NODE	982:2	982:2	10	uint32
NAME	982:9	982:9	8	line
LEAF_NODE	982:9	982:9	9	line
LEAF_NODE	982:13	982:13	7	;
ITERATION	984:2	984:35	6	
KEYWORD	984:2	984:2	7	for
LEAF_NODE	984:2	984:2	8	for
LEAF_NODE	984:6	984:6	7	(
FOR_INIT	984:7	984:15	7	line = 0 ;
EXPR	984:7	984:7	8	line = 0
ASSIGN	984:7	984:14	9	line = 0
LVAL	984:7	984:7	10	line
FIELD	984:7	984:7	11	line
LEAF_NODE	984:7	984:7	12	line
ASSIGN_OP	984:12	984:12	10	=
LEAF_NODE	984:12	984:12	11	=
RVAL	984:14	984:14	10	0
FIELD	984:14	984:14	11	0
LEAF_NODE	984:14	984:14	12	0
LEAF_NODE	984:15	984:15	8	;
CONDITION	984:17	984:17	7	line < h
EXPR	984:17	984:24	8	line < h
FIELD	984:17	984:17	9	line
LEAF_NODE	984:17	984:17	10	line
REL_OPERATOR	984:22	984:22	9	<
LEAF_NODE	984:22	984:22	10	<
FIELD	984:24	984:24	9	h
LEAF_NODE	984:24	984:24	10	h
LEAF_NODE	984:25	984:25	7	;
FOR_EXPR	984:27	984:27	7	line ++
EXPR	984:27	984:27	8	line ++
FIELD	984:27	984:31	9	line ++
LEAF_NODE	984:27	984:27	10	line
LEAF_NODE	984:31	984:31	10	++
LEAF_NODE	984:33	984:33	7	)
STATEMENTS	984:35	995:2	7	
LEAF_NODE	984:35	984:35	8	{
STATEMENTS	985:3	988:3	8	
SIMPLE_DECL	985:3	985:37	9	uint32 * left ; left = raster + ( line * w ) ;
VAR_DECL	985:3	985:11	10	uint32 * left ; left = raster + ( line * w )
TYPE	985:3	985:10	11	uint32 *
TYPE_NAME	985:3	985:3	12	uint32
LEAF_NODE	985:3	985:3	13	uint32
POINTER	985:10	985:10	12	*
LEAF_NODE	985:10	985:10	13	*
NAME	985:11	985:11	11	left
LEAF_NODE	985:11	985:11	12	left
LEAF_NODE	0:0	0:0	11	;
INIT	985:11	985:11	11	left = raster + ( line * w )
ASSIGN	985:11	985:18	12	left = raster + ( line * w )
LVAL	985:11	985:11	13	left
NAME	985:11	985:11	14	left
LEAF_NODE	985:11	985:11	15	left
ASSIGN_OP	985:16	985:16	13	=
LEAF_NODE	985:16	985:16	14	=
RVAL	985:18	985:36	13	raster + ( line * w )
FIELD	985:18	985:18	14	raster
LEAF_NODE	985:18	985:18	15	raster
LEAF_NODE	985:25	985:25	14	+
LEAF_NODE	985:27	985:27	14	(
FIELD	985:28	985:28	14	line
LEAF_NODE	985:28	985:28	15	line
LEAF_NODE	985:33	985:33	14	*
FIELD	985:35	985:35	14	w
LEAF_NODE	985:35	985:35	15	w
LEAF_NODE	985:36	985:36	14	)
LEAF_NODE	985:37	985:37	10	;
SIMPLE_DECL	986:3	986:31	9	uint32 * right ; right = left + w - 1 ;
VAR_DECL	986:3	986:11	10	uint32 * right ; right = left + w - 1
TYPE	986:3	986:10	11	uint32 *
TYPE_NAME	986:3	986:3	12	uint32
LEAF_NODE	986:3	986:3	13	uint32
POINTER	986:10	986:10	12	*
LEAF_NODE	986:10	986:10	13	*
NAME	986:11	986:11	11	right
LEAF_NODE	986:11	986:11	12	right
LEAF_NODE	0:0	0:0	11	;
INIT	986:11	986:11	11	right = left + w - 1
ASSIGN	986:11	986:19	12	right = left + w - 1
LVAL	986:11	986:11	13	right
NAME	986:11	986:11	14	right
LEAF_NODE	986:11	986:11	15	right
ASSIGN_OP	986:17	986:17	13	=
LEAF_NODE	986:17	986:17	14	=
RVAL	986:19	986:30	13	left + w - 1
FIELD	986:19	986:19	14	left
LEAF_NODE	986:19	986:19	15	left
LEAF_NODE	986:24	986:24	14	+
FIELD	986:26	986:26	14	w
LEAF_NODE	986:26	986:26	15	w
LEAF_NODE	986:28	986:28	14	-
FIELD	986:30	986:30	14	1
LEAF_NODE	986:30	986:30	15	1
LEAF_NODE	986:31	986:31	10	;
ITERATION	988:3	988:26	9	
KEYWORD	988:3	988:3	10	while
LEAF_NODE	988:3	988:3	11	while
LEAF_NODE	988:9	988:9	10	(
CONDITION	988:11	988:11	10	left < right
EXPR	988:11	988:18	11	left < right
FIELD	988:11	988:11	12	left
LEAF_NODE	988:11	988:11	13	left
REL_OPERATOR	988:16	988:16	12	<
LEAF_NODE	988:16	988:16	13	<
FIELD	988:18	988:18	12	right
LEAF_NODE	988:18	988:18	13	right
LEAF_NODE	988:24	988:24	10	)
STATEMENTS	988:26	994:3	10	
LEAF_NODE	988:26	988:26	11	{
STATEMENTS	989:4	993:4	11	
SIMPLE_DECL	989:4	989:23	12	uint32 temp ; temp = * left ;
VAR_DECL	989:4	989:11	13	uint32 temp ; temp = * left
TYPE	989:4	989:4	14	uint32
TYPE_NAME	989:4	989:4	15	uint32
LEAF_NODE	989:4	989:4	16	uint32
NAME	989:11	989:11	14	temp
LEAF_NODE	989:11	989:11	15	temp
LEAF_NODE	0:0	0:0	14	;
INIT	989:11	989:11	14	temp = * left
ASSIGN	989:11	989:18	15	temp = * left
LVAL	989:11	989:11	16	temp
NAME	989:11	989:11	17	temp
LEAF_NODE	989:11	989:11	18	temp
ASSIGN_OP	989:16	989:16	16	=
LEAF_NODE	989:16	989:16	17	=
RVAL	989:18	989:18	16	* left
UNARY_EXPR	989:18	989:19	17	* left
UNARY_OPERATOR	989:18	989:18	18	*
LEAF_NODE	989:18	989:18	19	*
FIELD	989:19	989:19	18	left
LEAF_NODE	989:19	989:19	19	left
LEAF_NODE	989:23	989:23	13	;
EXPR_STATEMENT	990:4	990:18	12	* left = * right ;
EXPR	990:4	990:4	13	* left = * right
ASSIGN	990:4	990:12	14	* left = * right
LVAL	990:4	990:4	15	* left
UNARY_EXPR	990:4	990:5	16	* left
UNARY_OPERATOR	990:4	990:4	17	*
LEAF_NODE	990:4	990:4	18	*
FIELD	990:5	990:5	17	left
LEAF_NODE	990:5	990:5	18	left
ASSIGN_OP	990:10	990:10	15	=
LEAF_NODE	990:10	990:10	16	=
RVAL	990:12	990:12	15	* right
UNARY_EXPR	990:12	990:13	16	* right
UNARY_OPERATOR	990:12	990:12	17	*
LEAF_NODE	990:12	990:12	18	*
FIELD	990:13	990:13	17	right
LEAF_NODE	990:13	990:13	18	right
LEAF_NODE	990:18	990:18	13	;
EXPR_STATEMENT	991:4	991:17	12	* right = temp ;
EXPR	991:4	991:4	13	* right = temp
ASSIGN	991:4	991:13	14	* right = temp
LVAL	991:4	991:4	15	* right
UNARY_EXPR	991:4	991:5	16	* right
UNARY_OPERATOR	991:4	991:4	17	*
LEAF_NODE	991:4	991:4	18	*
FIELD	991:5	991:5	17	right
LEAF_NODE	991:5	991:5	18	right
ASSIGN_OP	991:11	991:11	15	=
LEAF_NODE	991:11	991:11	16	=
RVAL	991:13	991:13	15	temp
FIELD	991:13	991:13	16	temp
LEAF_NODE	991:13	991:13	17	temp
LEAF_NODE	991:17	991:17	13	;
EXPR_STATEMENT	992:4	992:10	12	left ++ ;
EXPR	992:4	992:4	13	left ++
FIELD	992:4	992:8	14	left ++
LEAF_NODE	992:4	992:4	15	left
LEAF_NODE	992:8	992:8	15	++
LEAF_NODE	992:10	992:10	13	;
EXPR_STATEMENT	993:4	993:11	12	right -- ;
EXPR	993:4	993:4	13	right --
FIELD	993:4	993:9	14	right --
LEAF_NODE	993:4	993:4	15	right
LEAF_NODE	993:9	993:9	15	--
LEAF_NODE	993:11	993:11	13	;
LEAF_NODE	994:3	994:3	11	}
LEAF_NODE	995:2	995:2	8	}
LEAF_NODE	996:1	996:1	5	}
EXPR_STATEMENT	998:1	998:15	3	_TIFFfree ( buf ) ;
EXPR	998:1	998:1	4	_TIFFfree ( buf )
FUNCTION_CALL	998:1	998:14	5	_TIFFfree ( buf )
CALLEE	998:1	998:1	6	_TIFFfree
LEAF_NODE	998:1	998:1	7	_TIFFfree
LEAF_NODE	998:10	998:10	6	(
ARGUMENT	998:11	998:11	6	buf
FIELD	998:11	998:11	7	buf
LEAF_NODE	998:11	998:11	8	buf
LEAF_NODE	998:14	998:14	6	)
LEAF_NODE	998:15	998:15	4	;
LEAF_NODE	999:1	999:1	3	return
LEAF_NODE	999:8	999:8	3	(
LEAF_NODE	999:9	999:9	3	ret
LEAF_NODE	999:12	999:12	3	)
LEAF_NODE	999:13	999:13	3	;
LEAF_NODE	1000:0	1000:0	2	}
FUNCTION_DEF	1008:0	1155:0	1	
RETURN_TYPE	1008:0	1008:7	2	static int
LEAF_NODE	1008:0	1008:0	3	static
TYPE_NAME	1008:7	1008:7	3	int
LEAF_NODE	1008:7	1008:7	4	int
FUNCTION_NAME	1009:0	1009:0	2	gtStripSeparate
LEAF_NODE	1009:0	1009:0	3	gtStripSeparate
PARAMETER_LIST	1009:15	1009:70	2	( TIFFRGBAImage * img , uint32 * raster , uint32 w , uint32 h )
LEAF_NODE	1009:15	1009:15	3	(
PARAMETER_DECL	1009:16	1009:31	3	TIFFRGBAImage * img
TYPE	1009:16	1009:29	4	TIFFRGBAImage *
TYPE_NAME	1009:16	1009:16	5	TIFFRGBAImage
LEAF_NODE	1009:16	1009:16	6	TIFFRGBAImage
POINTER	1009:29	1009:29	5	*
LEAF_NODE	1009:29	1009:29	6	*
NAME	1009:31	1009:31	4	img
LEAF_NODE	1009:31	1009:31	5	img
LEAF_NODE	1009:34	1009:34	3	,
PARAMETER_DECL	1009:36	1009:44	3	uint32 * raster
TYPE	1009:36	1009:42	4	uint32 *
TYPE_NAME	1009:36	1009:36	5	uint32
LEAF_NODE	1009:36	1009:36	6	uint32
POINTER	1009:42	1009:42	5	*
LEAF_NODE	1009:42	1009:42	6	*
NAME	1009:44	1009:44	4	raster
LEAF_NODE	1009:44	1009:44	5	raster
LEAF_NODE	1009:50	1009:50	3	,
PARAMETER_DECL	1009:52	1009:59	3	uint32 w
TYPE	1009:52	1009:52	4	uint32
TYPE_NAME	1009:52	1009:52	5	uint32
LEAF_NODE	1009:52	1009:52	6	uint32
NAME	1009:59	1009:59	4	w
LEAF_NODE	1009:59	1009:59	5	w
LEAF_NODE	1009:60	1009:60	3	,
PARAMETER_DECL	1009:62	1009:69	3	uint32 h
TYPE	1009:62	1009:62	4	uint32
TYPE_NAME	1009:62	1009:62	5	uint32
LEAF_NODE	1009:62	1009:62	6	uint32
NAME	1009:69	1009:69	4	h
LEAF_NODE	1009:69	1009:69	5	h
LEAF_NODE	1009:70	1009:70	3	)
LEAF_NODE	1010:0	1010:0	2	{
STATEMENTS	1011:1	1154:13	2	
SIMPLE_DECL	1011:1	1011:21	3	TIFF * tif ; tif = img -> tif ;
VAR_DECL	1011:1	1011:7	4	TIFF * tif ; tif = img -> tif
TYPE	1011:1	1011:5	5	TIFF *
TYPE_NAME	1011:1	1011:1	6	TIFF
LEAF_NODE	1011:1	1011:1	7	TIFF
POINTER	1011:5	1011:5	6	*
LEAF_NODE	1011:5	1011:5	7	*
NAME	1011:7	1011:7	5	tif
LEAF_NODE	1011:7	1011:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	1011:7	1011:7	5	tif = img -> tif
ASSIGN	1011:7	1011:13	6	tif = img -> tif
LVAL	1011:7	1011:7	7	tif
NAME	1011:7	1011:7	8	tif
LEAF_NODE	1011:7	1011:7	9	tif
ASSIGN_OP	1011:11	1011:11	7	=
LEAF_NODE	1011:11	1011:11	8	=
RVAL	1011:13	1011:13	7	img -> tif
FIELD	1011:13	1011:18	8	img -> tif
LEAF_NODE	1011:13	1011:13	9	img
LEAF_NODE	1011:16	1011:16	9	->
LEAF_NODE	1011:18	1011:18	9	tif
LEAF_NODE	1011:21	1011:21	4	;
SIMPLE_DECL	1012:1	1012:44	3	tileSeparateRoutine put ; put = img -> put . separate ;
VAR_DECL	1012:1	1012:21	4	tileSeparateRoutine put ; put = img -> put . separate
TYPE	1012:1	1012:1	5	tileSeparateRoutine
TYPE_NAME	1012:1	1012:1	6	tileSeparateRoutine
LEAF_NODE	1012:1	1012:1	7	tileSeparateRoutine
NAME	1012:21	1012:21	5	put
LEAF_NODE	1012:21	1012:21	6	put
LEAF_NODE	0:0	0:0	5	;
INIT	1012:21	1012:21	5	put = img -> put . separate
ASSIGN	1012:21	1012:27	6	put = img -> put . separate
LVAL	1012:21	1012:21	7	put
NAME	1012:21	1012:21	8	put
LEAF_NODE	1012:21	1012:21	9	put
ASSIGN_OP	1012:25	1012:25	7	=
LEAF_NODE	1012:25	1012:25	8	=
RVAL	1012:27	1012:27	7	img -> put . separate
FIELD	1012:27	1012:36	8	img -> put . separate
LEAF_NODE	1012:27	1012:27	9	img
LEAF_NODE	1012:30	1012:30	9	->
LEAF_NODE	1012:32	1012:32	9	put
LEAF_NODE	1012:35	1012:35	9	.
LEAF_NODE	1012:36	1012:36	9	separate
LEAF_NODE	1012:44	1012:44	4	;
SIMPLE_DECL	1013:1	1013:26	3	unsigned char * buf ; buf = NULL ;
VAR_DECL	1013:1	1013:16	4	unsigned char * buf ; buf = NULL
TYPE	1013:1	1013:15	5	unsigned char *
TYPE_NAME	1013:1	1013:10	6	unsigned char
LEAF_NODE	1013:1	1013:1	7	unsigned
LEAF_NODE	1013:10	1013:10	7	char
POINTER	1013:15	1013:15	6	*
LEAF_NODE	1013:15	1013:15	7	*
NAME	1013:16	1013:16	5	buf
LEAF_NODE	1013:16	1013:16	6	buf
LEAF_NODE	0:0	0:0	5	;
INIT	1013:16	1013:16	5	buf = NULL
ASSIGN	1013:16	1013:22	6	buf = NULL
LVAL	1013:16	1013:16	7	buf
NAME	1013:16	1013:16	8	buf
LEAF_NODE	1013:16	1013:16	9	buf
ASSIGN_OP	1013:20	1013:20	7	=
LEAF_NODE	1013:20	1013:20	8	=
RVAL	1013:22	1013:22	7	NULL
FIELD	1013:22	1013:22	8	NULL
LEAF_NODE	1013:22	1013:22	9	NULL
LEAF_NODE	1013:26	1013:26	4	;
SIMPLE_DECL	1014:1	1014:61	3	unsigned char * p0 ; p0 = NULL , unsigned char * p1 ; p1 = NULL , unsigned char * p2 ; p2 = NULL , unsigned char * pa ; pa = NULL ;
INIT_DECL_LIST	1014:1	1014:1	4	unsigned char * p0 ; p0 = NULL , unsigned char * p1 ; p1 = NULL , unsigned char * p2 ; p2 = NULL , unsigned char * pa ; pa = NULL
VAR_DECL	1014:1	1014:16	5	unsigned char * p0 ; p0 = NULL
TYPE	1014:1	1014:15	6	unsigned char *
TYPE_NAME	1014:1	1014:10	7	unsigned char
LEAF_NODE	1014:1	1014:1	8	unsigned
LEAF_NODE	1014:10	1014:10	8	char
POINTER	1014:15	1014:15	7	*
LEAF_NODE	1014:15	1014:15	8	*
NAME	1014:16	1014:16	6	p0
LEAF_NODE	1014:16	1014:16	7	p0
LEAF_NODE	0:0	0:0	6	;
INIT	1014:16	1014:16	6	p0 = NULL
ASSIGN	1014:16	1014:21	7	p0 = NULL
LVAL	1014:16	1014:16	8	p0
NAME	1014:16	1014:16	9	p0
LEAF_NODE	1014:16	1014:16	10	p0
ASSIGN_OP	1014:19	1014:19	8	=
LEAF_NODE	1014:19	1014:19	9	=
RVAL	1014:21	1014:21	8	NULL
FIELD	1014:21	1014:21	9	NULL
LEAF_NODE	1014:21	1014:21	10	NULL
LEAF_NODE	1014:25	1014:25	5	,
INIT_DECL_LIST	1014:1	1014:1	5	unsigned char * p1 ; p1 = NULL , unsigned char * p2 ; p2 = NULL , unsigned char * pa ; pa = NULL
VAR_DECL	1014:1	1014:28	6	unsigned char * p1 ; p1 = NULL
TYPE	1014:1	1014:27	7	unsigned char *
TYPE_NAME	1014:1	1014:10	8	unsigned char
LEAF_NODE	1014:1	1014:1	9	unsigned
LEAF_NODE	1014:10	1014:10	9	char
POINTER	1014:27	1014:27	8	*
LEAF_NODE	1014:27	1014:27	9	*
NAME	1014:28	1014:28	7	p1
LEAF_NODE	1014:28	1014:28	8	p1
LEAF_NODE	0:0	0:0	7	;
INIT	1014:28	1014:28	7	p1 = NULL
ASSIGN	1014:28	1014:33	8	p1 = NULL
LVAL	1014:28	1014:28	9	p1
NAME	1014:28	1014:28	10	p1
LEAF_NODE	1014:28	1014:28	11	p1
ASSIGN_OP	1014:31	1014:31	9	=
LEAF_NODE	1014:31	1014:31	10	=
RVAL	1014:33	1014:33	9	NULL
FIELD	1014:33	1014:33	10	NULL
LEAF_NODE	1014:33	1014:33	11	NULL
LEAF_NODE	1014:37	1014:37	6	,
INIT_DECL_LIST	1014:1	1014:1	6	unsigned char * p2 ; p2 = NULL , unsigned char * pa ; pa = NULL
VAR_DECL	1014:1	1014:40	7	unsigned char * p2 ; p2 = NULL
TYPE	1014:1	1014:39	8	unsigned char *
TYPE_NAME	1014:1	1014:10	9	unsigned char
LEAF_NODE	1014:1	1014:1	10	unsigned
LEAF_NODE	1014:10	1014:10	10	char
POINTER	1014:39	1014:39	9	*
LEAF_NODE	1014:39	1014:39	10	*
NAME	1014:40	1014:40	8	p2
LEAF_NODE	1014:40	1014:40	9	p2
LEAF_NODE	0:0	0:0	8	;
INIT	1014:40	1014:40	8	p2 = NULL
ASSIGN	1014:40	1014:45	9	p2 = NULL
LVAL	1014:40	1014:40	10	p2
NAME	1014:40	1014:40	11	p2
LEAF_NODE	1014:40	1014:40	12	p2
ASSIGN_OP	1014:43	1014:43	10	=
LEAF_NODE	1014:43	1014:43	11	=
RVAL	1014:45	1014:45	10	NULL
FIELD	1014:45	1014:45	11	NULL
LEAF_NODE	1014:45	1014:45	12	NULL
LEAF_NODE	1014:49	1014:49	7	,
VAR_DECL	1014:1	1014:52	7	unsigned char * pa ; pa = NULL
TYPE	1014:1	1014:51	8	unsigned char *
TYPE_NAME	1014:1	1014:10	9	unsigned char
LEAF_NODE	1014:1	1014:1	10	unsigned
LEAF_NODE	1014:10	1014:10	10	char
POINTER	1014:51	1014:51	9	*
LEAF_NODE	1014:51	1014:51	10	*
NAME	1014:52	1014:52	8	pa
LEAF_NODE	1014:52	1014:52	9	pa
LEAF_NODE	0:0	0:0	8	;
INIT	1014:52	1014:52	8	pa = NULL
ASSIGN	1014:52	1014:57	9	pa = NULL
LVAL	1014:52	1014:52	10	pa
NAME	1014:52	1014:52	11	pa
LEAF_NODE	1014:52	1014:52	12	pa
ASSIGN_OP	1014:55	1014:55	10	=
LEAF_NODE	1014:55	1014:55	11	=
RVAL	1014:57	1014:57	10	NULL
FIELD	1014:57	1014:57	11	NULL
LEAF_NODE	1014:57	1014:57	12	NULL
LEAF_NODE	1014:61	1014:61	4	;
SIMPLE_DECL	1015:1	1015:32	3	uint32 row , uint32 y , uint32 nrow , uint32 rowstoread ;
INIT_DECL_LIST	1015:1	1015:1	4	uint32 row , uint32 y , uint32 nrow , uint32 rowstoread
VAR_DECL	1015:1	1015:8	5	uint32 row
TYPE	1015:1	1015:1	6	uint32
TYPE_NAME	1015:1	1015:1	7	uint32
LEAF_NODE	1015:1	1015:1	8	uint32
NAME	1015:8	1015:8	6	row
LEAF_NODE	1015:8	1015:8	7	row
LEAF_NODE	1015:11	1015:11	5	,
INIT_DECL_LIST	1015:1	1015:1	5	uint32 y , uint32 nrow , uint32 rowstoread
VAR_DECL	1015:1	1015:13	6	uint32 y
TYPE	1015:1	1015:1	7	uint32
TYPE_NAME	1015:1	1015:1	8	uint32
LEAF_NODE	1015:1	1015:1	9	uint32
NAME	1015:13	1015:13	7	y
LEAF_NODE	1015:13	1015:13	8	y
LEAF_NODE	1015:14	1015:14	6	,
INIT_DECL_LIST	1015:1	1015:1	6	uint32 nrow , uint32 rowstoread
VAR_DECL	1015:1	1015:16	7	uint32 nrow
TYPE	1015:1	1015:1	8	uint32
TYPE_NAME	1015:1	1015:1	9	uint32
LEAF_NODE	1015:1	1015:1	10	uint32
NAME	1015:16	1015:16	8	nrow
LEAF_NODE	1015:16	1015:16	9	nrow
LEAF_NODE	1015:20	1015:20	7	,
VAR_DECL	1015:1	1015:22	7	uint32 rowstoread
TYPE	1015:1	1015:1	8	uint32
TYPE_NAME	1015:1	1015:1	9	uint32
LEAF_NODE	1015:1	1015:1	10	uint32
NAME	1015:22	1015:22	8	rowstoread
LEAF_NODE	1015:22	1015:22	9	rowstoread
LEAF_NODE	1015:32	1015:32	4	;
SIMPLE_DECL	1016:1	1016:13	3	tmsize_t pos ;
VAR_DECL	1016:1	1016:10	4	tmsize_t pos
TYPE	1016:1	1016:1	5	tmsize_t
TYPE_NAME	1016:1	1016:1	6	tmsize_t
LEAF_NODE	1016:1	1016:1	7	tmsize_t
NAME	1016:10	1016:10	5	pos
LEAF_NODE	1016:10	1016:10	6	pos
LEAF_NODE	1016:13	1016:13	4	;
SIMPLE_DECL	1017:1	1017:18	3	tmsize_t scanline ;
VAR_DECL	1017:1	1017:10	4	tmsize_t scanline
TYPE	1017:1	1017:1	5	tmsize_t
TYPE_NAME	1017:1	1017:1	6	tmsize_t
LEAF_NODE	1017:1	1017:1	7	tmsize_t
NAME	1017:10	1017:10	5	scanline
LEAF_NODE	1017:10	1017:10	6	scanline
LEAF_NODE	1017:18	1017:18	4	;
SIMPLE_DECL	1018:1	1018:32	3	uint32 rowsperstrip , uint32 offset_row ;
INIT_DECL_LIST	1018:1	1018:1	4	uint32 rowsperstrip , uint32 offset_row
VAR_DECL	1018:1	1018:8	5	uint32 rowsperstrip
TYPE	1018:1	1018:1	6	uint32
TYPE_NAME	1018:1	1018:1	7	uint32
LEAF_NODE	1018:1	1018:1	8	uint32
NAME	1018:8	1018:8	6	rowsperstrip
LEAF_NODE	1018:8	1018:8	7	rowsperstrip
LEAF_NODE	1018:20	1018:20	5	,
VAR_DECL	1018:1	1018:22	5	uint32 offset_row
TYPE	1018:1	1018:1	6	uint32
TYPE_NAME	1018:1	1018:1	7	uint32
LEAF_NODE	1018:1	1018:1	8	uint32
NAME	1018:22	1018:22	6	offset_row
LEAF_NODE	1018:22	1018:22	7	offset_row
LEAF_NODE	1018:32	1018:32	4	;
SIMPLE_DECL	1019:1	1019:31	3	uint32 imagewidth ; imagewidth = img -> width ;
VAR_DECL	1019:1	1019:8	4	uint32 imagewidth ; imagewidth = img -> width
TYPE	1019:1	1019:1	5	uint32
TYPE_NAME	1019:1	1019:1	6	uint32
LEAF_NODE	1019:1	1019:1	7	uint32
NAME	1019:8	1019:8	5	imagewidth
LEAF_NODE	1019:8	1019:8	6	imagewidth
LEAF_NODE	0:0	0:0	5	;
INIT	1019:8	1019:8	5	imagewidth = img -> width
ASSIGN	1019:8	1019:21	6	imagewidth = img -> width
LVAL	1019:8	1019:8	7	imagewidth
NAME	1019:8	1019:8	8	imagewidth
LEAF_NODE	1019:8	1019:8	9	imagewidth
ASSIGN_OP	1019:19	1019:19	7	=
LEAF_NODE	1019:19	1019:19	8	=
RVAL	1019:21	1019:21	7	img -> width
FIELD	1019:21	1019:26	8	img -> width
LEAF_NODE	1019:21	1019:21	9	img
LEAF_NODE	1019:24	1019:24	9	->
LEAF_NODE	1019:26	1019:26	9	width
LEAF_NODE	1019:31	1019:31	4	;
SIMPLE_DECL	1020:1	1020:19	3	tmsize_t stripsize ;
VAR_DECL	1020:1	1020:10	4	tmsize_t stripsize
TYPE	1020:1	1020:1	5	tmsize_t
TYPE_NAME	1020:1	1020:1	6	tmsize_t
LEAF_NODE	1020:1	1020:1	7	tmsize_t
NAME	1020:10	1020:10	5	stripsize
LEAF_NODE	1020:10	1020:10	6	stripsize
LEAF_NODE	1020:19	1020:19	4	;
SIMPLE_DECL	1021:1	1021:17	3	tmsize_t bufsize ;
VAR_DECL	1021:1	1021:10	4	tmsize_t bufsize
TYPE	1021:1	1021:1	5	tmsize_t
TYPE_NAME	1021:1	1021:1	6	tmsize_t
LEAF_NODE	1021:1	1021:1	7	tmsize_t
NAME	1021:10	1021:10	5	bufsize
LEAF_NODE	1021:10	1021:10	6	bufsize
LEAF_NODE	1021:17	1021:17	4	;
SIMPLE_DECL	1022:1	1022:23	3	int32 fromskew , int32 toskew ;
INIT_DECL_LIST	1022:1	1022:1	4	int32 fromskew , int32 toskew
VAR_DECL	1022:1	1022:7	5	int32 fromskew
TYPE	1022:1	1022:1	6	int32
TYPE_NAME	1022:1	1022:1	7	int32
LEAF_NODE	1022:1	1022:1	8	int32
NAME	1022:7	1022:7	6	fromskew
LEAF_NODE	1022:7	1022:7	7	fromskew
LEAF_NODE	1022:15	1022:15	5	,
VAR_DECL	1022:1	1022:17	5	int32 toskew
TYPE	1022:1	1022:1	6	int32
TYPE_NAME	1022:1	1022:1	7	int32
LEAF_NODE	1022:1	1022:1	8	int32
NAME	1022:17	1022:17	6	toskew
LEAF_NODE	1022:17	1022:17	7	toskew
LEAF_NODE	1022:23	1022:23	4	;
SIMPLE_DECL	1023:1	1023:23	3	int alpha ; alpha = img -> alpha ;
VAR_DECL	1023:1	1023:5	4	int alpha ; alpha = img -> alpha
TYPE	1023:1	1023:1	5	int
TYPE_NAME	1023:1	1023:1	6	int
LEAF_NODE	1023:1	1023:1	7	int
NAME	1023:5	1023:5	5	alpha
LEAF_NODE	1023:5	1023:5	6	alpha
LEAF_NODE	0:0	0:0	5	;
INIT	1023:5	1023:5	5	alpha = img -> alpha
ASSIGN	1023:5	1023:13	6	alpha = img -> alpha
LVAL	1023:5	1023:5	7	alpha
NAME	1023:5	1023:5	8	alpha
LEAF_NODE	1023:5	1023:5	9	alpha
ASSIGN_OP	1023:11	1023:11	7	=
LEAF_NODE	1023:11	1023:11	8	=
RVAL	1023:13	1023:13	7	img -> alpha
FIELD	1023:13	1023:18	8	img -> alpha
LEAF_NODE	1023:13	1023:13	9	img
LEAF_NODE	1023:16	1023:16	9	->
LEAF_NODE	1023:18	1023:18	9	alpha
LEAF_NODE	1023:23	1023:23	4	;
SIMPLE_DECL	1024:1	1024:18	3	int ret ; ret = 1 , int flip ;
INIT_DECL_LIST	1024:1	1024:1	4	int ret ; ret = 1 , int flip
VAR_DECL	1024:1	1024:5	5	int ret ; ret = 1
TYPE	1024:1	1024:1	6	int
TYPE_NAME	1024:1	1024:1	7	int
LEAF_NODE	1024:1	1024:1	8	int
NAME	1024:5	1024:5	6	ret
LEAF_NODE	1024:5	1024:5	7	ret
LEAF_NODE	0:0	0:0	6	;
INIT	1024:5	1024:5	6	ret = 1
ASSIGN	1024:5	1024:11	7	ret = 1
LVAL	1024:5	1024:5	8	ret
NAME	1024:5	1024:5	9	ret
LEAF_NODE	1024:5	1024:5	10	ret
ASSIGN_OP	1024:9	1024:9	8	=
LEAF_NODE	1024:9	1024:9	9	=
RVAL	1024:11	1024:11	8	1
FIELD	1024:11	1024:11	9	1
LEAF_NODE	1024:11	1024:11	10	1
LEAF_NODE	1024:12	1024:12	5	,
VAR_DECL	1024:1	1024:14	5	int flip
TYPE	1024:1	1024:1	6	int
TYPE_NAME	1024:1	1024:1	7	int
LEAF_NODE	1024:1	1024:1	8	int
NAME	1024:14	1024:14	6	flip
LEAF_NODE	1024:14	1024:14	7	flip
LEAF_NODE	1024:18	1024:18	4	;
SIMPLE_DECL	1025:8	1025:28	3	uint16 colorchannels ;
VAR_DECL	1025:8	1025:15	4	uint16 colorchannels
TYPE	1025:8	1025:8	5	uint16
TYPE_NAME	1025:8	1025:8	6	uint16
LEAF_NODE	1025:8	1025:8	7	uint16
NAME	1025:15	1025:15	5	colorchannels
LEAF_NODE	1025:15	1025:15	6	colorchannels
LEAF_NODE	1025:28	1025:28	4	;
EXPR_STATEMENT	1027:1	1027:31	3	stripsize = TIFFStripSize ( tif ) ;
EXPR	1027:1	1027:1	4	stripsize = TIFFStripSize ( tif )
ASSIGN	1027:1	1027:13	5	stripsize = TIFFStripSize ( tif )
LVAL	1027:1	1027:1	6	stripsize
FIELD	1027:1	1027:1	7	stripsize
LEAF_NODE	1027:1	1027:1	8	stripsize
ASSIGN_OP	1027:11	1027:11	6	=
LEAF_NODE	1027:11	1027:11	7	=
RVAL	1027:13	1027:13	6	TIFFStripSize ( tif )
FUNCTION_CALL	1027:13	1027:30	7	TIFFStripSize ( tif )
CALLEE	1027:13	1027:13	8	TIFFStripSize
LEAF_NODE	1027:13	1027:13	9	TIFFStripSize
LEAF_NODE	1027:26	1027:26	8	(
ARGUMENT	1027:27	1027:27	8	tif
FIELD	1027:27	1027:27	9	tif
LEAF_NODE	1027:27	1027:27	10	tif
LEAF_NODE	1027:30	1027:30	8	)
LEAF_NODE	1027:31	1027:31	4	;
EXPR_STATEMENT	1028:1	1028:73	3	bufsize = _TIFFMultiplySSize ( tif , alpha ? 4 : 3 , stripsize , "gtStripSeparate" ) ;
EXPR	1028:1	1028:1	4	bufsize = _TIFFMultiplySSize ( tif , alpha ? 4 : 3 , stripsize , "gtStripSeparate" )
ASSIGN	1028:1	1028:11	5	bufsize = _TIFFMultiplySSize ( tif , alpha ? 4 : 3 , stripsize , "gtStripSeparate" )
LVAL	1028:1	1028:1	6	bufsize
FIELD	1028:1	1028:1	7	bufsize
LEAF_NODE	1028:1	1028:1	8	bufsize
ASSIGN_OP	1028:9	1028:9	6	=
LEAF_NODE	1028:9	1028:9	7	=
RVAL	1028:11	1028:11	6	_TIFFMultiplySSize ( tif , alpha ? 4 : 3 , stripsize , "gtStripSeparate" )
FUNCTION_CALL	1028:11	1028:72	7	_TIFFMultiplySSize ( tif , alpha ? 4 : 3 , stripsize , "gtStripSeparate" )
CALLEE	1028:11	1028:11	8	_TIFFMultiplySSize
LEAF_NODE	1028:11	1028:11	9	_TIFFMultiplySSize
LEAF_NODE	1028:29	1028:29	8	(
ARGUMENT	1028:30	1028:30	8	tif
FIELD	1028:30	1028:30	9	tif
LEAF_NODE	1028:30	1028:30	10	tif
LEAF_NODE	1028:33	1028:33	8	,
ARGUMENT	1028:34	1028:34	8	alpha ? 4 : 3
COND_EXPR	1028:34	1028:42	9	alpha ? 4 : 3
CONDITION	1028:34	1028:34	10	alpha
FIELD	1028:34	1028:34	11	alpha
LEAF_NODE	1028:34	1028:34	12	alpha
LEAF_NODE	1028:39	1028:39	10	?
EXPR	1028:40	1028:40	10	4
FIELD	1028:40	1028:40	11	4
LEAF_NODE	1028:40	1028:40	12	4
LEAF_NODE	1028:41	1028:41	10	:
FIELD	1028:42	1028:42	10	3
LEAF_NODE	1028:42	1028:42	11	3
LEAF_NODE	1028:43	1028:43	8	,
ARGUMENT	1028:44	1028:44	8	stripsize
FIELD	1028:44	1028:44	9	stripsize
LEAF_NODE	1028:44	1028:44	10	stripsize
LEAF_NODE	1028:53	1028:53	8	,
ARGUMENT	1028:55	1028:55	8	"gtStripSeparate"
FIELD	1028:55	1028:55	9	"gtStripSeparate"
LEAF_NODE	1028:55	1028:55	10	"gtStripSeparate"
LEAF_NODE	1028:72	1028:72	8	)
LEAF_NODE	1028:73	1028:73	4	;
SELECTION	1029:1	1029:19	3	
KEYWORD	1029:1	1029:1	4	if
LEAF_NODE	1029:1	1029:1	5	if
LEAF_NODE	1029:4	1029:4	4	(
CONDITION	1029:5	1029:5	4	bufsize == 0
EXPR	1029:5	1029:16	5	bufsize == 0
FIELD	1029:5	1029:5	6	bufsize
LEAF_NODE	1029:5	1029:5	7	bufsize
EQ_OPERATOR	1029:13	1029:13	6	==
LEAF_NODE	1029:13	1029:13	7	==
FIELD	1029:16	1029:16	6	0
LEAF_NODE	1029:16	1029:16	7	0
LEAF_NODE	1029:17	1029:17	4	)
STATEMENTS	1029:19	1031:1	4	
LEAF_NODE	1029:19	1029:19	5	{
STATEMENTS	1030:2	1030:2	5	
JUMP_STATEMENT	1030:2	1030:12	6	return ( 0 ) ;
KEYWORD	1030:2	1030:2	7	return
LEAF_NODE	1030:2	1030:2	8	return
DESTINATION	1030:9	1030:9	7	( 0 )
EXPR	1030:9	1030:11	8	( 0 )
LEAF_NODE	1030:9	1030:9	9	(
FIELD	1030:10	1030:10	9	0
LEAF_NODE	1030:10	1030:10	10	0
LEAF_NODE	1030:11	1030:11	9	)
LEAF_NODE	1030:12	1030:12	7	;
LEAF_NODE	1031:1	1031:1	5	}
EXPR_STATEMENT	1033:1	1033:27	3	flip = setorientation ( img ) ;
EXPR	1033:1	1033:1	4	flip = setorientation ( img )
ASSIGN	1033:1	1033:8	5	flip = setorientation ( img )
LVAL	1033:1	1033:1	6	flip
FIELD	1033:1	1033:1	7	flip
LEAF_NODE	1033:1	1033:1	8	flip
ASSIGN_OP	1033:6	1033:6	6	=
LEAF_NODE	1033:6	1033:6	7	=
RVAL	1033:8	1033:8	6	setorientation ( img )
FUNCTION_CALL	1033:8	1033:26	7	setorientation ( img )
CALLEE	1033:8	1033:8	8	setorientation
LEAF_NODE	1033:8	1033:8	9	setorientation
LEAF_NODE	1033:22	1033:22	8	(
ARGUMENT	1033:23	1033:23	8	img
FIELD	1033:23	1033:23	9	img
LEAF_NODE	1033:23	1033:23	10	img
LEAF_NODE	1033:26	1033:26	8	)
LEAF_NODE	1033:27	1033:27	4	;
SELECTION	1034:1	1034:29	3	
KEYWORD	1034:1	1034:1	4	if
LEAF_NODE	1034:1	1034:1	5	if
LEAF_NODE	1034:4	1034:4	4	(
CONDITION	1034:5	1034:5	4	flip & FLIP_VERTICALLY
EXPR	1034:5	1034:12	5	flip & FLIP_VERTICALLY
FIELD	1034:5	1034:5	6	flip
LEAF_NODE	1034:5	1034:5	7	flip
LEAF_NODE	1034:10	1034:10	6	&
FIELD	1034:12	1034:12	6	FLIP_VERTICALLY
LEAF_NODE	1034:12	1034:12	7	FLIP_VERTICALLY
LEAF_NODE	1034:27	1034:27	4	)
STATEMENTS	1034:29	1037:1	4	
LEAF_NODE	1034:29	1034:29	5	{
STATEMENTS	1035:2	1036:2	5	
EXPR_STATEMENT	1035:2	1035:11	6	y = h - 1 ;
EXPR	1035:2	1035:2	7	y = h - 1
ASSIGN	1035:2	1035:6	8	y = h - 1
LVAL	1035:2	1035:2	9	y
FIELD	1035:2	1035:2	10	y
LEAF_NODE	1035:2	1035:2	11	y
ASSIGN_OP	1035:4	1035:4	9	=
LEAF_NODE	1035:4	1035:4	10	=
RVAL	1035:6	1035:10	9	h - 1
FIELD	1035:6	1035:6	10	h
LEAF_NODE	1035:6	1035:6	11	h
LEAF_NODE	1035:8	1035:8	10	-
FIELD	1035:10	1035:10	10	1
LEAF_NODE	1035:10	1035:10	11	1
LEAF_NODE	1035:11	1035:11	7	;
EXPR_STATEMENT	1036:2	1036:26	6	toskew = - ( int32 ) ( w + w ) ;
EXPR	1036:2	1036:2	7	toskew = - ( int32 ) ( w + w )
ASSIGN	1036:2	1036:11	8	toskew = - ( int32 ) ( w + w )
LVAL	1036:2	1036:2	9	toskew
FIELD	1036:2	1036:2	10	toskew
LEAF_NODE	1036:2	1036:2	11	toskew
ASSIGN_OP	1036:9	1036:9	9	=
LEAF_NODE	1036:9	1036:9	10	=
RVAL	1036:11	1036:11	9	- ( int32 ) ( w + w )
UNARY_EXPR	1036:11	1036:12	10	- ( int32 ) ( w + w )
UNARY_OPERATOR	1036:11	1036:11	11	-
LEAF_NODE	1036:11	1036:11	12	-
FUNCTION_CALL	1036:12	1036:25	11	( int32 ) ( w + w )
CALLEE	1036:12	1036:18	12	( int32 )
LEAF_NODE	1036:12	1036:12	13	(
FIELD	1036:13	1036:13	13	int32
LEAF_NODE	1036:13	1036:13	14	int32
LEAF_NODE	1036:18	1036:18	13	)
LEAF_NODE	1036:19	1036:19	12	(
ARGUMENT	1036:20	1036:24	12	w + w
FIELD	1036:20	1036:20	13	w
LEAF_NODE	1036:20	1036:20	14	w
LEAF_NODE	1036:22	1036:22	13	+
FIELD	1036:24	1036:24	13	w
LEAF_NODE	1036:24	1036:24	14	w
LEAF_NODE	1036:25	1036:25	12	)
LEAF_NODE	1036:26	1036:26	7	;
LEAF_NODE	1037:1	1037:1	5	}
SELECTION	1038:1	1038:6	3	
KEYWORD	1038:1	1038:1	4	else
LEAF_NODE	1038:1	1038:1	5	else
STATEMENTS	1038:6	1041:1	4	
LEAF_NODE	1038:6	1038:6	5	{
STATEMENTS	1039:2	1040:2	5	
EXPR_STATEMENT	1039:2	1039:7	6	y = 0 ;
EXPR	1039:2	1039:2	7	y = 0
ASSIGN	1039:2	1039:6	8	y = 0
LVAL	1039:2	1039:2	9	y
FIELD	1039:2	1039:2	10	y
LEAF_NODE	1039:2	1039:2	11	y
ASSIGN_OP	1039:4	1039:4	9	=
LEAF_NODE	1039:4	1039:4	10	=
RVAL	1039:6	1039:6	9	0
FIELD	1039:6	1039:6	10	0
LEAF_NODE	1039:6	1039:6	11	0
LEAF_NODE	1039:7	1039:7	7	;
EXPR_STATEMENT	1040:2	1040:26	6	toskew = - ( int32 ) ( w - w ) ;
EXPR	1040:2	1040:2	7	toskew = - ( int32 ) ( w - w )
ASSIGN	1040:2	1040:11	8	toskew = - ( int32 ) ( w - w )
LVAL	1040:2	1040:2	9	toskew
FIELD	1040:2	1040:2	10	toskew
LEAF_NODE	1040:2	1040:2	11	toskew
ASSIGN_OP	1040:9	1040:9	9	=
LEAF_NODE	1040:9	1040:9	10	=
RVAL	1040:11	1040:11	9	- ( int32 ) ( w - w )
UNARY_EXPR	1040:11	1040:12	10	- ( int32 ) ( w - w )
UNARY_OPERATOR	1040:11	1040:11	11	-
LEAF_NODE	1040:11	1040:11	12	-
FUNCTION_CALL	1040:12	1040:25	11	( int32 ) ( w - w )
CALLEE	1040:12	1040:18	12	( int32 )
LEAF_NODE	1040:12	1040:12	13	(
FIELD	1040:13	1040:13	13	int32
LEAF_NODE	1040:13	1040:13	14	int32
LEAF_NODE	1040:18	1040:18	13	)
LEAF_NODE	1040:19	1040:19	12	(
ARGUMENT	1040:20	1040:24	12	w - w
FIELD	1040:20	1040:20	13	w
LEAF_NODE	1040:20	1040:20	14	w
LEAF_NODE	1040:22	1040:22	13	-
FIELD	1040:24	1040:24	13	w
LEAF_NODE	1040:24	1040:24	14	w
LEAF_NODE	1040:25	1040:25	12	)
LEAF_NODE	1040:26	1040:26	7	;
LEAF_NODE	1041:1	1041:1	5	}
SELECTION	1043:8	1044:8	3	
KEYWORD	1043:8	1043:8	4	switch
LEAF_NODE	1043:8	1043:8	5	switch
LEAF_NODE	1043:14	1043:14	4	(
CONDITION	1043:16	1043:16	4	img -> photometric
EXPR	1043:16	1043:16	5	img -> photometric
FIELD	1043:16	1043:21	6	img -> photometric
LEAF_NODE	1043:16	1043:16	7	img
LEAF_NODE	1043:19	1043:19	7	->
LEAF_NODE	1043:21	1043:21	7	photometric
LEAF_NODE	1043:33	1043:33	4	)
STATEMENTS	1044:8	1054:8	4	
LEAF_NODE	1044:8	1044:8	5	{
STATEMENTS	1045:10	1053:12	5	
LABEL	1045:10	1045:37	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	1045:10	1045:10	7	case
LEAF_NODE	1045:15	1045:15	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1045:37	1045:37	7	:
LABEL	1046:10	1046:37	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	1046:10	1046:10	7	case
LEAF_NODE	1046:15	1046:15	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1046:37	1046:37	7	:
LABEL	1047:10	1047:34	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	1047:10	1047:10	7	case
LEAF_NODE	1047:15	1047:15	7	PHOTOMETRIC_PALETTE
LEAF_NODE	1047:34	1047:34	7	:
EXPR_STATEMENT	1048:12	1048:29	6	colorchannels = 1 ;
EXPR	1048:12	1048:12	7	colorchannels = 1
ASSIGN	1048:12	1048:28	8	colorchannels = 1
LVAL	1048:12	1048:12	9	colorchannels
FIELD	1048:12	1048:12	10	colorchannels
LEAF_NODE	1048:12	1048:12	11	colorchannels
ASSIGN_OP	1048:26	1048:26	9	=
LEAF_NODE	1048:26	1048:26	10	=
RVAL	1048:28	1048:28	9	1
FIELD	1048:28	1048:28	10	1
LEAF_NODE	1048:28	1048:28	11	1
LEAF_NODE	1048:29	1048:29	7	;
JUMP_STATEMENT	1049:12	1049:17	6	break DESTINATION ;
KEYWORD	1049:12	1049:12	7	break
LEAF_NODE	1049:12	1049:12	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1049:17	1049:17	7	;
LABEL	1051:10	1051:17	6	default :
LEAF_NODE	1051:10	1051:10	7	default
LEAF_NODE	1051:17	1051:17	7	:
EXPR_STATEMENT	1052:12	1052:29	6	colorchannels = 3 ;
EXPR	1052:12	1052:12	7	colorchannels = 3
ASSIGN	1052:12	1052:28	8	colorchannels = 3
LVAL	1052:12	1052:12	9	colorchannels
FIELD	1052:12	1052:12	10	colorchannels
LEAF_NODE	1052:12	1052:12	11	colorchannels
ASSIGN_OP	1052:26	1052:26	9	=
LEAF_NODE	1052:26	1052:26	10	=
RVAL	1052:28	1052:28	9	3
FIELD	1052:28	1052:28	10	3
LEAF_NODE	1052:28	1052:28	11	3
LEAF_NODE	1052:29	1052:29	7	;
JUMP_STATEMENT	1053:12	1053:17	6	break DESTINATION ;
KEYWORD	1053:12	1053:12	7	break
LEAF_NODE	1053:12	1053:12	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1053:17	1053:17	7	;
LEAF_NODE	1054:8	1054:8	5	}
EXPR_STATEMENT	1056:1	1056:64	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	1056:1	1056:1	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
FUNCTION_CALL	1056:1	1056:63	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	1056:1	1056:1	6	TIFFGetFieldDefaulted
LEAF_NODE	1056:1	1056:1	7	TIFFGetFieldDefaulted
LEAF_NODE	1056:22	1056:22	6	(
ARGUMENT	1056:23	1056:23	6	tif
FIELD	1056:23	1056:23	7	tif
LEAF_NODE	1056:23	1056:23	8	tif
LEAF_NODE	1056:26	1056:26	6	,
ARGUMENT	1056:28	1056:28	6	TIFFTAG_ROWSPERSTRIP
FIELD	1056:28	1056:28	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1056:28	1056:28	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1056:48	1056:48	6	,
ARGUMENT	1056:50	1056:50	6	& rowsperstrip
UNARY_EXPR	1056:50	1056:51	7	& rowsperstrip
UNARY_OPERATOR	1056:50	1056:50	8	&
LEAF_NODE	1056:50	1056:50	9	&
FIELD	1056:51	1056:51	8	rowsperstrip
LEAF_NODE	1056:51	1056:51	9	rowsperstrip
LEAF_NODE	1056:63	1056:63	6	)
LEAF_NODE	1056:64	1056:64	4	;
EXPR_STATEMENT	1057:1	1057:33	3	scanline = TIFFScanlineSize ( tif ) ;
EXPR	1057:1	1057:1	4	scanline = TIFFScanlineSize ( tif )
ASSIGN	1057:1	1057:12	5	scanline = TIFFScanlineSize ( tif )
LVAL	1057:1	1057:1	6	scanline
FIELD	1057:1	1057:1	7	scanline
LEAF_NODE	1057:1	1057:1	8	scanline
ASSIGN_OP	1057:10	1057:10	6	=
LEAF_NODE	1057:10	1057:10	7	=
RVAL	1057:12	1057:12	6	TIFFScanlineSize ( tif )
FUNCTION_CALL	1057:12	1057:32	7	TIFFScanlineSize ( tif )
CALLEE	1057:12	1057:12	8	TIFFScanlineSize
LEAF_NODE	1057:12	1057:12	9	TIFFScanlineSize
LEAF_NODE	1057:28	1057:28	8	(
ARGUMENT	1057:29	1057:29	8	tif
FIELD	1057:29	1057:29	9	tif
LEAF_NODE	1057:29	1057:29	10	tif
LEAF_NODE	1057:32	1057:32	8	)
LEAF_NODE	1057:33	1057:33	4	;
EXPR_STATEMENT	1058:1	1058:49	3	fromskew = ( w < imagewidth ? imagewidth - w : 0 ) ;
EXPR	1058:1	1058:1	4	fromskew = ( w < imagewidth ? imagewidth - w : 0 )
ASSIGN	1058:1	1058:12	5	fromskew = ( w < imagewidth ? imagewidth - w : 0 )
LVAL	1058:1	1058:1	6	fromskew
FIELD	1058:1	1058:1	7	fromskew
LEAF_NODE	1058:1	1058:1	8	fromskew
ASSIGN_OP	1058:10	1058:10	6	=
LEAF_NODE	1058:10	1058:10	7	=
RVAL	1058:12	1058:48	6	( w < imagewidth ? imagewidth - w : 0 )
LEAF_NODE	1058:12	1058:12	7	(
COND_EXPR	1058:13	1058:47	7	w < imagewidth ? imagewidth - w : 0
CONDITION	1058:13	1058:17	8	w < imagewidth
FIELD	1058:13	1058:13	9	w
LEAF_NODE	1058:13	1058:13	10	w
REL_OPERATOR	1058:15	1058:15	9	<
LEAF_NODE	1058:15	1058:15	10	<
FIELD	1058:17	1058:17	9	imagewidth
LEAF_NODE	1058:17	1058:17	10	imagewidth
LEAF_NODE	1058:28	1058:28	8	?
EXPR	1058:30	1058:43	8	imagewidth - w
FIELD	1058:30	1058:30	9	imagewidth
LEAF_NODE	1058:30	1058:30	10	imagewidth
LEAF_NODE	1058:41	1058:41	9	-
FIELD	1058:43	1058:43	9	w
LEAF_NODE	1058:43	1058:43	10	w
LEAF_NODE	1058:45	1058:45	8	:
FIELD	1058:47	1058:47	8	0
LEAF_NODE	1058:47	1058:47	9	0
LEAF_NODE	1058:48	1058:48	7	)
LEAF_NODE	1058:49	1058:49	4	;
ITERATION	1059:1	1060:1	3	
KEYWORD	1059:1	1059:1	4	for
LEAF_NODE	1059:1	1059:1	5	for
LEAF_NODE	1059:5	1059:5	4	(
FOR_INIT	1059:6	1059:13	4	row = 0 ;
EXPR	1059:6	1059:6	5	row = 0
ASSIGN	1059:6	1059:12	6	row = 0
LVAL	1059:6	1059:6	7	row
FIELD	1059:6	1059:6	8	row
LEAF_NODE	1059:6	1059:6	9	row
ASSIGN_OP	1059:10	1059:10	7	=
LEAF_NODE	1059:10	1059:10	8	=
RVAL	1059:12	1059:12	7	0
FIELD	1059:12	1059:12	8	0
LEAF_NODE	1059:12	1059:12	9	0
LEAF_NODE	1059:13	1059:13	5	;
CONDITION	1059:15	1059:15	4	row < h
EXPR	1059:15	1059:21	5	row < h
FIELD	1059:15	1059:15	6	row
LEAF_NODE	1059:15	1059:15	7	row
REL_OPERATOR	1059:19	1059:19	6	<
LEAF_NODE	1059:19	1059:19	7	<
FIELD	1059:21	1059:21	6	h
LEAF_NODE	1059:21	1059:21	7	h
LEAF_NODE	1059:22	1059:22	4	;
FOR_EXPR	1059:24	1059:24	4	row += nrow
EXPR	1059:24	1059:24	5	row += nrow
ASSIGN	1059:24	1059:31	6	row += nrow
LVAL	1059:24	1059:24	7	row
FIELD	1059:24	1059:24	8	row
LEAF_NODE	1059:24	1059:24	9	row
ASSIGN_OP	1059:28	1059:28	7	+=
LEAF_NODE	1059:28	1059:28	8	+=
RVAL	1059:31	1059:31	7	nrow
FIELD	1059:31	1059:31	8	nrow
LEAF_NODE	1059:31	1059:31	9	nrow
LEAF_NODE	1059:35	1059:35	4	)
STATEMENTS	1060:1	1134:1	4	
LEAF_NODE	1060:1	1060:1	5	{
STATEMENTS	1061:16	1133:64	5	
SIMPLE_DECL	1061:16	1061:27	6	uint32 temp ;
VAR_DECL	1061:16	1061:23	7	uint32 temp
TYPE	1061:16	1061:16	8	uint32
TYPE_NAME	1061:16	1061:16	9	uint32
LEAF_NODE	1061:16	1061:16	10	uint32
NAME	1061:23	1061:23	8	temp
LEAF_NODE	1061:23	1061:23	9	temp
LEAF_NODE	1061:27	1061:27	7	;
EXPR_STATEMENT	1062:2	1062:68	6	rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ;
EXPR	1062:2	1062:2	7	rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip
ASSIGN	1062:2	1062:15	8	rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip
LVAL	1062:2	1062:2	9	rowstoread
FIELD	1062:2	1062:2	10	rowstoread
LEAF_NODE	1062:2	1062:2	11	rowstoread
ASSIGN_OP	1062:13	1062:13	9	=
LEAF_NODE	1062:13	1062:13	10	=
RVAL	1062:15	1062:56	9	rowsperstrip - ( row + img -> row_offset ) % rowsperstrip
FIELD	1062:15	1062:15	10	rowsperstrip
LEAF_NODE	1062:15	1062:15	11	rowsperstrip
LEAF_NODE	1062:28	1062:28	10	-
LEAF_NODE	1062:30	1062:30	10	(
FIELD	1062:31	1062:31	10	row
LEAF_NODE	1062:31	1062:31	11	row
LEAF_NODE	1062:35	1062:35	10	+
FIELD	1062:37	1062:42	10	img -> row_offset
LEAF_NODE	1062:37	1062:37	11	img
LEAF_NODE	1062:40	1062:40	11	->
LEAF_NODE	1062:42	1062:42	11	row_offset
LEAF_NODE	1062:52	1062:52	10	)
LEAF_NODE	1062:54	1062:54	10	%
FIELD	1062:56	1062:56	10	rowsperstrip
LEAF_NODE	1062:56	1062:56	11	rowsperstrip
LEAF_NODE	1062:68	1062:68	7	;
EXPR_STATEMENT	1063:2	1063:54	6	nrow = ( row + rowstoread > h ? h - row : rowstoread ) ;
EXPR	1063:2	1063:2	7	nrow = ( row + rowstoread > h ? h - row : rowstoread )
ASSIGN	1063:2	1063:9	8	nrow = ( row + rowstoread > h ? h - row : rowstoread )
LVAL	1063:2	1063:2	9	nrow
FIELD	1063:2	1063:2	10	nrow
LEAF_NODE	1063:2	1063:2	11	nrow
ASSIGN_OP	1063:7	1063:7	9	=
LEAF_NODE	1063:7	1063:7	10	=
RVAL	1063:9	1063:53	9	( row + rowstoread > h ? h - row : rowstoread )
LEAF_NODE	1063:9	1063:9	10	(
COND_EXPR	1063:10	1063:43	10	row + rowstoread > h ? h - row : rowstoread
CONDITION	1063:10	1063:29	11	row + rowstoread > h
FIELD	1063:10	1063:10	12	row
LEAF_NODE	1063:10	1063:10	13	row
LEAF_NODE	1063:14	1063:14	12	+
FIELD	1063:16	1063:16	12	rowstoread
LEAF_NODE	1063:16	1063:16	13	rowstoread
REL_OPERATOR	1063:27	1063:27	12	>
LEAF_NODE	1063:27	1063:27	13	>
FIELD	1063:29	1063:29	12	h
LEAF_NODE	1063:29	1063:29	13	h
LEAF_NODE	1063:31	1063:31	11	?
EXPR	1063:33	1063:37	11	h - row
FIELD	1063:33	1063:33	12	h
LEAF_NODE	1063:33	1063:33	13	h
LEAF_NODE	1063:35	1063:35	12	-
FIELD	1063:37	1063:37	12	row
LEAF_NODE	1063:37	1063:37	13	row
LEAF_NODE	1063:41	1063:41	11	:
FIELD	1063:43	1063:43	11	rowstoread
LEAF_NODE	1063:43	1063:43	12	rowstoread
LEAF_NODE	1063:53	1063:53	10	)
LEAF_NODE	1063:54	1063:54	7	;
EXPR_STATEMENT	1064:2	1064:36	6	offset_row = row + img -> row_offset ;
EXPR	1064:2	1064:2	7	offset_row = row + img -> row_offset
ASSIGN	1064:2	1064:15	8	offset_row = row + img -> row_offset
LVAL	1064:2	1064:2	9	offset_row
FIELD	1064:2	1064:2	10	offset_row
LEAF_NODE	1064:2	1064:2	11	offset_row
ASSIGN_OP	1064:13	1064:13	9	=
LEAF_NODE	1064:13	1064:13	10	=
RVAL	1064:15	1064:21	9	row + img -> row_offset
FIELD	1064:15	1064:15	10	row
LEAF_NODE	1064:15	1064:15	11	row
LEAF_NODE	1064:19	1064:19	10	+
FIELD	1064:21	1064:26	10	img -> row_offset
LEAF_NODE	1064:21	1064:21	11	img
LEAF_NODE	1064:24	1064:24	11	->
LEAF_NODE	1064:26	1064:26	11	row_offset
LEAF_NODE	1064:36	1064:36	7	;
EXPR_STATEMENT	1065:16	1065:66	6	temp = ( row + img -> row_offset ) % rowsperstrip + nrow ;
EXPR	1065:16	1065:16	7	temp = ( row + img -> row_offset ) % rowsperstrip + nrow
ASSIGN	1065:16	1065:23	8	temp = ( row + img -> row_offset ) % rowsperstrip + nrow
LVAL	1065:16	1065:16	9	temp
FIELD	1065:16	1065:16	10	temp
LEAF_NODE	1065:16	1065:16	11	temp
ASSIGN_OP	1065:21	1065:21	9	=
LEAF_NODE	1065:21	1065:21	10	=
RVAL	1065:23	1065:62	9	( row + img -> row_offset ) % rowsperstrip + nrow
LEAF_NODE	1065:23	1065:23	10	(
FIELD	1065:24	1065:24	10	row
LEAF_NODE	1065:24	1065:24	11	row
LEAF_NODE	1065:28	1065:28	10	+
FIELD	1065:30	1065:35	10	img -> row_offset
LEAF_NODE	1065:30	1065:30	11	img
LEAF_NODE	1065:33	1065:33	11	->
LEAF_NODE	1065:35	1065:35	11	row_offset
LEAF_NODE	1065:45	1065:45	10	)
LEAF_NODE	1065:46	1065:46	10	%
FIELD	1065:47	1065:47	10	rowsperstrip
LEAF_NODE	1065:47	1065:47	11	rowsperstrip
LEAF_NODE	1065:60	1065:60	10	+
FIELD	1065:62	1065:62	10	nrow
LEAF_NODE	1065:62	1065:62	11	nrow
LEAF_NODE	1065:66	1065:66	7	;
SELECTION	1066:16	1067:16	6	
KEYWORD	1066:16	1066:16	7	if
LEAF_NODE	1066:16	1066:16	8	if
LEAF_NODE	1066:18	1066:18	7	(
CONDITION	1066:20	1066:20	7	scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline )
EXPR	1066:20	1066:20	8	scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline )
AND	1066:20	1066:36	9	scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline )
EXPR	1066:20	1066:31	10	scanline > 0
FIELD	1066:20	1066:20	11	scanline
LEAF_NODE	1066:20	1066:20	12	scanline
REL_OPERATOR	1066:29	1066:29	11	>
LEAF_NODE	1066:29	1066:29	12	>
FIELD	1066:31	1066:31	11	0
LEAF_NODE	1066:31	1066:31	12	0
LEAF_NODE	1066:33	1066:33	10	&&
EXPR	1066:36	1066:80	10	temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline )
FIELD	1066:36	1066:36	11	temp
LEAF_NODE	1066:36	1066:36	12	temp
REL_OPERATOR	1066:41	1066:41	11	>
LEAF_NODE	1066:41	1066:41	12	>
LEAF_NODE	1066:43	1066:43	11	(
TYPE_NAME	1066:44	1066:44	11	size_t
LEAF_NODE	1066:44	1066:44	12	size_t
LEAF_NODE	1066:50	1066:50	11	)
LEAF_NODE	1066:51	1066:51	11	(
FIELD	1066:52	1066:52	11	TIFF_TMSIZE_T_MAX
LEAF_NODE	1066:52	1066:52	12	TIFF_TMSIZE_T_MAX
LEAF_NODE	1066:70	1066:70	11	/
FIELD	1066:72	1066:72	11	scanline
LEAF_NODE	1066:72	1066:72	12	scanline
LEAF_NODE	1066:80	1066:80	11	)
LEAF_NODE	1066:82	1066:82	7	)
STATEMENTS	1067:16	1070:16	7	
LEAF_NODE	1067:16	1067:16	8	{
STATEMENTS	1068:24	1069:24	8	
EXPR_STATEMENT	1068:24	1068:115	9	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer overflow in gtStripSeparate" ) ;
EXPR	1068:24	1068:24	10	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer overflow in gtStripSeparate" )
FUNCTION_CALL	1068:24	1068:114	11	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer overflow in gtStripSeparate" )
CALLEE	1068:24	1068:24	12	TIFFErrorExt
LEAF_NODE	1068:24	1068:24	13	TIFFErrorExt
LEAF_NODE	1068:36	1068:36	12	(
ARGUMENT	1068:37	1068:37	12	tif -> tif_clientdata
FIELD	1068:37	1068:42	13	tif -> tif_clientdata
LEAF_NODE	1068:37	1068:37	14	tif
LEAF_NODE	1068:40	1068:40	14	->
LEAF_NODE	1068:42	1068:42	14	tif_clientdata
LEAF_NODE	1068:56	1068:56	12	,
ARGUMENT	1068:58	1068:58	12	TIFFFileName ( tif )
FUNCTION_CALL	1068:58	1068:74	13	TIFFFileName ( tif )
CALLEE	1068:58	1068:58	14	TIFFFileName
LEAF_NODE	1068:58	1068:58	15	TIFFFileName
LEAF_NODE	1068:70	1068:70	14	(
ARGUMENT	1068:71	1068:71	14	tif
FIELD	1068:71	1068:71	15	tif
LEAF_NODE	1068:71	1068:71	16	tif
LEAF_NODE	1068:74	1068:74	14	)
LEAF_NODE	1068:75	1068:75	12	,
ARGUMENT	1068:77	1068:77	12	"Integer overflow in gtStripSeparate"
FIELD	1068:77	1068:77	13	"Integer overflow in gtStripSeparate"
LEAF_NODE	1068:77	1068:77	14	"Integer overflow in gtStripSeparate"
LEAF_NODE	1068:114	1068:114	12	)
LEAF_NODE	1068:115	1068:115	10	;
JUMP_STATEMENT	1069:24	1069:32	9	return 0 ;
KEYWORD	1069:24	1069:24	10	return
LEAF_NODE	1069:24	1069:24	11	return
DESTINATION	1069:31	1069:31	10	0
EXPR	1069:31	1069:31	11	0
FIELD	1069:31	1069:31	12	0
LEAF_NODE	1069:31	1069:31	13	0
LEAF_NODE	1069:32	1069:32	10	;
LEAF_NODE	1070:16	1070:16	8	}
SELECTION	1071:16	1072:16	6	
KEYWORD	1071:16	1071:16	7	if
LEAF_NODE	1071:16	1071:16	8	if
LEAF_NODE	1071:18	1071:18	7	(
CONDITION	1071:20	1071:20	7	buf == NULL
EXPR	1071:20	1071:27	8	buf == NULL
FIELD	1071:20	1071:20	9	buf
LEAF_NODE	1071:20	1071:20	10	buf
EQ_OPERATOR	1071:24	1071:24	9	==
LEAF_NODE	1071:24	1071:24	10	==
FIELD	1071:27	1071:27	9	NULL
LEAF_NODE	1071:27	1071:27	10	NULL
LEAF_NODE	1071:32	1071:32	7	)
STATEMENTS	1072:16	1094:16	7	
LEAF_NODE	1072:16	1072:16	8	{
STATEMENTS	1073:20	1088:20	8	
SELECTION	1073:20	1078:20	9	
KEYWORD	1073:20	1073:20	10	if
LEAF_NODE	1073:20	1073:20	11	if
LEAF_NODE	1073:23	1073:23	10	(
CONDITION	1073:24	1073:24	10	_TIFFReadEncodedStripAndAllocBuffer ( tif , TIFFComputeStrip ( tif , offset_row , 0 ) , ( void * * ) & buf , bufsize , temp * scanline ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
EXPR	1073:24	1073:24	11	_TIFFReadEncodedStripAndAllocBuffer ( tif , TIFFComputeStrip ( tif , offset_row , 0 ) , ( void * * ) & buf , bufsize , temp * scanline ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
AND	1073:24	1077:27	12	_TIFFReadEncodedStripAndAllocBuffer ( tif , TIFFComputeStrip ( tif , offset_row , 0 ) , ( void * * ) & buf , bufsize , temp * scanline ) == ( tmsize_t ) ( - 1 ) && ( buf == NULL || img -> stoponerr )
EXPR	1073:24	1076:59	13	_TIFFReadEncodedStripAndAllocBuffer ( tif , TIFFComputeStrip ( tif , offset_row , 0 ) , ( void * * ) & buf , bufsize , temp * scanline ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	1073:24	1076:43	14	_TIFFReadEncodedStripAndAllocBuffer ( tif , TIFFComputeStrip ( tif , offset_row , 0 ) , ( void * * ) & buf , bufsize , temp * scanline )
CALLEE	1073:24	1073:24	15	_TIFFReadEncodedStripAndAllocBuffer
LEAF_NODE	1073:24	1073:24	16	_TIFFReadEncodedStripAndAllocBuffer
LEAF_NODE	1073:59	1073:59	15	(
ARGUMENT	1074:28	1074:28	15	tif
FIELD	1074:28	1074:28	16	tif
LEAF_NODE	1074:28	1074:28	17	tif
LEAF_NODE	1074:31	1074:31	15	,
ARGUMENT	1074:33	1074:33	15	TIFFComputeStrip ( tif , offset_row , 0 )
FUNCTION_CALL	1074:33	1074:68	16	TIFFComputeStrip ( tif , offset_row , 0 )
CALLEE	1074:33	1074:33	17	TIFFComputeStrip
LEAF_NODE	1074:33	1074:33	18	TIFFComputeStrip
LEAF_NODE	1074:49	1074:49	17	(
ARGUMENT	1074:50	1074:50	17	tif
FIELD	1074:50	1074:50	18	tif
LEAF_NODE	1074:50	1074:50	19	tif
LEAF_NODE	1074:53	1074:53	17	,
ARGUMENT	1074:55	1074:55	17	offset_row
FIELD	1074:55	1074:55	18	offset_row
LEAF_NODE	1074:55	1074:55	19	offset_row
LEAF_NODE	1074:65	1074:65	17	,
ARGUMENT	1074:67	1074:67	17	0
FIELD	1074:67	1074:67	18	0
LEAF_NODE	1074:67	1074:67	19	0
LEAF_NODE	1074:68	1074:68	17	)
LEAF_NODE	1074:69	1074:69	15	,
ARGUMENT	1075:28	1075:37	15	( void * * ) & buf
LEAF_NODE	1075:28	1075:28	16	(
TYPE_NAME	1075:29	1075:29	16	void
LEAF_NODE	1075:29	1075:29	17	void
LEAF_NODE	1075:33	1075:33	16	*
LEAF_NODE	1075:34	1075:34	16	*
LEAF_NODE	1075:35	1075:35	16	)
UNARY_EXPR	1075:37	1075:38	16	& buf
UNARY_OPERATOR	1075:37	1075:37	17	&
LEAF_NODE	1075:37	1075:37	18	&
FIELD	1075:38	1075:38	17	buf
LEAF_NODE	1075:38	1075:38	18	buf
LEAF_NODE	1075:41	1075:41	15	,
ARGUMENT	1075:43	1075:43	15	bufsize
FIELD	1075:43	1075:43	16	bufsize
LEAF_NODE	1075:43	1075:43	17	bufsize
LEAF_NODE	1075:50	1075:50	15	,
ARGUMENT	1076:28	1076:35	15	temp * scanline
FIELD	1076:28	1076:28	16	temp
LEAF_NODE	1076:28	1076:28	17	temp
LEAF_NODE	1076:33	1076:33	16	*
FIELD	1076:35	1076:35	16	scanline
LEAF_NODE	1076:35	1076:35	17	scanline
LEAF_NODE	1076:43	1076:43	15	)
EQ_OPERATOR	1076:44	1076:44	14	==
LEAF_NODE	1076:44	1076:44	15	==
LEAF_NODE	1076:46	1076:46	14	(
TYPE_NAME	1076:47	1076:47	14	tmsize_t
LEAF_NODE	1076:47	1076:47	15	tmsize_t
LEAF_NODE	1076:55	1076:55	14	)
LEAF_NODE	1076:56	1076:56	14	(
UNARY_EXPR	1076:57	1076:58	14	- 1
UNARY_OPERATOR	1076:57	1076:57	15	-
LEAF_NODE	1076:57	1076:57	16	-
FIELD	1076:58	1076:58	15	1
LEAF_NODE	1076:58	1076:58	16	1
LEAF_NODE	1076:59	1076:59	14	)
LEAF_NODE	1077:24	1077:24	13	&&
EXPR	1077:27	1077:57	13	( buf == NULL || img -> stoponerr )
LEAF_NODE	1077:27	1077:27	14	(
OR	1077:28	1077:43	14	buf == NULL || img -> stoponerr
EXPR	1077:28	1077:35	15	buf == NULL
FIELD	1077:28	1077:28	16	buf
LEAF_NODE	1077:28	1077:28	17	buf
EQ_OPERATOR	1077:32	1077:32	16	==
LEAF_NODE	1077:32	1077:32	17	==
FIELD	1077:35	1077:35	16	NULL
LEAF_NODE	1077:35	1077:35	17	NULL
LEAF_NODE	1077:40	1077:40	15	||
EXPR	1077:43	1077:43	15	img -> stoponerr
FIELD	1077:43	1077:48	16	img -> stoponerr
LEAF_NODE	1077:43	1077:43	17	img
LEAF_NODE	1077:46	1077:46	17	->
LEAF_NODE	1077:48	1077:48	17	stoponerr
LEAF_NODE	1077:57	1077:57	14	)
LEAF_NODE	1077:58	1077:58	10	)
STATEMENTS	1078:20	1081:20	10	
LEAF_NODE	1078:20	1078:20	11	{
STATEMENTS	1079:28	1080:28	11	
EXPR_STATEMENT	1079:28	1079:35	12	ret = 0 ;
EXPR	1079:28	1079:28	13	ret = 0
ASSIGN	1079:28	1079:34	14	ret = 0
LVAL	1079:28	1079:28	15	ret
FIELD	1079:28	1079:28	16	ret
LEAF_NODE	1079:28	1079:28	17	ret
ASSIGN_OP	1079:32	1079:32	15	=
LEAF_NODE	1079:32	1079:32	16	=
RVAL	1079:34	1079:34	15	0
FIELD	1079:34	1079:34	16	0
LEAF_NODE	1079:34	1079:34	17	0
LEAF_NODE	1079:35	1079:35	13	;
JUMP_STATEMENT	1080:28	1080:33	12	break DESTINATION ;
KEYWORD	1080:28	1080:28	13	break
LEAF_NODE	1080:28	1080:28	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1080:33	1080:33	13	;
LEAF_NODE	1081:20	1081:20	11	}
EXPR_STATEMENT	1082:20	1082:28	9	p0 = buf ;
EXPR	1082:20	1082:20	10	p0 = buf
ASSIGN	1082:20	1082:25	11	p0 = buf
LVAL	1082:20	1082:20	12	p0
FIELD	1082:20	1082:20	13	p0
LEAF_NODE	1082:20	1082:20	14	p0
ASSIGN_OP	1082:23	1082:23	12	=
LEAF_NODE	1082:23	1082:23	13	=
RVAL	1082:25	1082:25	12	buf
FIELD	1082:25	1082:25	13	buf
LEAF_NODE	1082:25	1082:25	14	buf
LEAF_NODE	1082:28	1082:28	10	;
SELECTION	1083:20	1084:20	9	
KEYWORD	1083:20	1083:20	10	if
LEAF_NODE	1083:20	1083:20	11	if
LEAF_NODE	1083:22	1083:22	10	(
CONDITION	1083:24	1083:24	10	colorchannels == 1
EXPR	1083:24	1083:41	11	colorchannels == 1
FIELD	1083:24	1083:24	12	colorchannels
LEAF_NODE	1083:24	1083:24	13	colorchannels
EQ_OPERATOR	1083:38	1083:38	12	==
LEAF_NODE	1083:38	1083:38	13	==
FIELD	1083:41	1083:41	12	1
LEAF_NODE	1083:41	1083:41	13	1
LEAF_NODE	1083:43	1083:43	10	)
STATEMENTS	1084:20	1087:20	10	
LEAF_NODE	1084:20	1084:20	11	{
STATEMENTS	1085:24	1086:24	11	
EXPR_STATEMENT	1085:24	1085:36	12	p2 = p1 = p0 ;
EXPR	1085:24	1085:24	13	p2 = p1 = p0
ASSIGN	1085:24	1085:29	14	p2 = p1 = p0
LVAL	1085:24	1085:24	15	p2
FIELD	1085:24	1085:24	16	p2
LEAF_NODE	1085:24	1085:24	17	p2
ASSIGN_OP	1085:27	1085:27	15	=
LEAF_NODE	1085:27	1085:27	16	=
RVAL	1085:29	1085:29	15	p1 = p0
ASSIGN	1085:29	1085:34	16	p1 = p0
LVAL	1085:29	1085:29	17	p1
FIELD	1085:29	1085:29	18	p1
LEAF_NODE	1085:29	1085:29	19	p1
ASSIGN_OP	1085:32	1085:32	17	=
LEAF_NODE	1085:32	1085:32	18	=
RVAL	1085:34	1085:34	17	p0
FIELD	1085:34	1085:34	18	p0
LEAF_NODE	1085:34	1085:34	19	p0
LEAF_NODE	1085:36	1085:36	13	;
EXPR_STATEMENT	1086:24	1086:58	12	pa = ( alpha ? ( p0 + 3 * stripsize ) : NULL ) ;
EXPR	1086:24	1086:24	13	pa = ( alpha ? ( p0 + 3 * stripsize ) : NULL )
ASSIGN	1086:24	1086:29	14	pa = ( alpha ? ( p0 + 3 * stripsize ) : NULL )
LVAL	1086:24	1086:24	15	pa
FIELD	1086:24	1086:24	16	pa
LEAF_NODE	1086:24	1086:24	17	pa
ASSIGN_OP	1086:27	1086:27	15	=
LEAF_NODE	1086:27	1086:27	16	=
RVAL	1086:29	1086:57	15	( alpha ? ( p0 + 3 * stripsize ) : NULL )
LEAF_NODE	1086:29	1086:29	16	(
COND_EXPR	1086:30	1086:53	16	alpha ? ( p0 + 3 * stripsize ) : NULL
CONDITION	1086:30	1086:30	17	alpha
FIELD	1086:30	1086:30	18	alpha
LEAF_NODE	1086:30	1086:30	19	alpha
LEAF_NODE	1086:35	1086:35	17	?
EXPR	1086:36	1086:51	17	( p0 + 3 * stripsize )
LEAF_NODE	1086:36	1086:36	18	(
FIELD	1086:37	1086:37	18	p0
LEAF_NODE	1086:37	1086:37	19	p0
LEAF_NODE	1086:39	1086:39	18	+
FIELD	1086:40	1086:40	18	3
LEAF_NODE	1086:40	1086:40	19	3
LEAF_NODE	1086:41	1086:41	18	*
FIELD	1086:42	1086:42	18	stripsize
LEAF_NODE	1086:42	1086:42	19	stripsize
LEAF_NODE	1086:51	1086:51	18	)
LEAF_NODE	1086:52	1086:52	17	:
FIELD	1086:53	1086:53	17	NULL
LEAF_NODE	1086:53	1086:53	18	NULL
LEAF_NODE	1086:57	1086:57	16	)
LEAF_NODE	1086:58	1086:58	13	;
LEAF_NODE	1087:20	1087:20	11	}
SELECTION	1088:20	1089:20	9	
KEYWORD	1088:20	1088:20	10	else
LEAF_NODE	1088:20	1088:20	11	else
STATEMENTS	1089:20	1093:20	10	
LEAF_NODE	1089:20	1089:20	11	{
STATEMENTS	1090:24	1092:24	11	
EXPR_STATEMENT	1090:24	1090:43	12	p1 = p0 + stripsize ;
EXPR	1090:24	1090:24	13	p1 = p0 + stripsize
ASSIGN	1090:24	1090:29	14	p1 = p0 + stripsize
LVAL	1090:24	1090:24	15	p1
FIELD	1090:24	1090:24	16	p1
LEAF_NODE	1090:24	1090:24	17	p1
ASSIGN_OP	1090:27	1090:27	15	=
LEAF_NODE	1090:27	1090:27	16	=
RVAL	1090:29	1090:34	15	p0 + stripsize
FIELD	1090:29	1090:29	16	p0
LEAF_NODE	1090:29	1090:29	17	p0
LEAF_NODE	1090:32	1090:32	16	+
FIELD	1090:34	1090:34	16	stripsize
LEAF_NODE	1090:34	1090:34	17	stripsize
LEAF_NODE	1090:43	1090:43	13	;
EXPR_STATEMENT	1091:24	1091:43	12	p2 = p1 + stripsize ;
EXPR	1091:24	1091:24	13	p2 = p1 + stripsize
ASSIGN	1091:24	1091:29	14	p2 = p1 + stripsize
LVAL	1091:24	1091:24	15	p2
FIELD	1091:24	1091:24	16	p2
LEAF_NODE	1091:24	1091:24	17	p2
ASSIGN_OP	1091:27	1091:27	15	=
LEAF_NODE	1091:27	1091:27	16	=
RVAL	1091:29	1091:34	15	p1 + stripsize
FIELD	1091:29	1091:29	16	p1
LEAF_NODE	1091:29	1091:29	17	p1
LEAF_NODE	1091:32	1091:32	16	+
FIELD	1091:34	1091:34	16	stripsize
LEAF_NODE	1091:34	1091:34	17	stripsize
LEAF_NODE	1091:43	1091:43	13	;
EXPR_STATEMENT	1092:24	1092:56	12	pa = ( alpha ? ( p2 + stripsize ) : NULL ) ;
EXPR	1092:24	1092:24	13	pa = ( alpha ? ( p2 + stripsize ) : NULL )
ASSIGN	1092:24	1092:29	14	pa = ( alpha ? ( p2 + stripsize ) : NULL )
LVAL	1092:24	1092:24	15	pa
FIELD	1092:24	1092:24	16	pa
LEAF_NODE	1092:24	1092:24	17	pa
ASSIGN_OP	1092:27	1092:27	15	=
LEAF_NODE	1092:27	1092:27	16	=
RVAL	1092:29	1092:55	15	( alpha ? ( p2 + stripsize ) : NULL )
LEAF_NODE	1092:29	1092:29	16	(
COND_EXPR	1092:30	1092:51	16	alpha ? ( p2 + stripsize ) : NULL
CONDITION	1092:30	1092:30	17	alpha
FIELD	1092:30	1092:30	18	alpha
LEAF_NODE	1092:30	1092:30	19	alpha
LEAF_NODE	1092:35	1092:35	17	?
EXPR	1092:36	1092:49	17	( p2 + stripsize )
LEAF_NODE	1092:36	1092:36	18	(
FIELD	1092:37	1092:37	18	p2
LEAF_NODE	1092:37	1092:37	19	p2
LEAF_NODE	1092:39	1092:39	18	+
FIELD	1092:40	1092:40	18	stripsize
LEAF_NODE	1092:40	1092:40	19	stripsize
LEAF_NODE	1092:49	1092:49	18	)
LEAF_NODE	1092:50	1092:50	17	:
FIELD	1092:51	1092:51	17	NULL
LEAF_NODE	1092:51	1092:51	18	NULL
LEAF_NODE	1092:55	1092:55	16	)
LEAF_NODE	1092:56	1092:56	13	;
LEAF_NODE	1093:20	1093:20	11	}
LEAF_NODE	1094:16	1094:16	8	}
SELECTION	1095:2	1095:7	6	
KEYWORD	1095:2	1095:2	7	else
LEAF_NODE	1095:2	1095:2	8	else
STATEMENTS	1095:7	1095:7	7	
SELECTION	1095:7	1098:2	8	
KEYWORD	1095:7	1095:7	9	if
LEAF_NODE	1095:7	1095:7	10	if
LEAF_NODE	1095:10	1095:10	9	(
CONDITION	1095:11	1095:11	9	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 0 ) , p0 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	1095:11	1095:11	10	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 0 ) , p0 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	1095:11	1097:9	11	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 0 ) , p0 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	1095:11	1096:41	12	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 0 ) , p0 , temp * scanline ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	1095:11	1096:25	13	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 0 ) , p0 , temp * scanline )
CALLEE	1095:11	1095:11	14	TIFFReadEncodedStrip
LEAF_NODE	1095:11	1095:11	15	TIFFReadEncodedStrip
LEAF_NODE	1095:31	1095:31	14	(
ARGUMENT	1095:32	1095:32	14	tif
FIELD	1095:32	1095:32	15	tif
LEAF_NODE	1095:32	1095:32	16	tif
LEAF_NODE	1095:35	1095:35	14	,
ARGUMENT	1095:37	1095:37	14	TIFFComputeStrip ( tif , offset_row , 0 )
FUNCTION_CALL	1095:37	1095:72	15	TIFFComputeStrip ( tif , offset_row , 0 )
CALLEE	1095:37	1095:37	16	TIFFComputeStrip
LEAF_NODE	1095:37	1095:37	17	TIFFComputeStrip
LEAF_NODE	1095:53	1095:53	16	(
ARGUMENT	1095:54	1095:54	16	tif
FIELD	1095:54	1095:54	17	tif
LEAF_NODE	1095:54	1095:54	18	tif
LEAF_NODE	1095:57	1095:57	16	,
ARGUMENT	1095:59	1095:59	16	offset_row
FIELD	1095:59	1095:59	17	offset_row
LEAF_NODE	1095:59	1095:59	18	offset_row
LEAF_NODE	1095:69	1095:69	16	,
ARGUMENT	1095:71	1095:71	16	0
FIELD	1095:71	1095:71	17	0
LEAF_NODE	1095:71	1095:71	18	0
LEAF_NODE	1095:72	1095:72	16	)
LEAF_NODE	1095:73	1095:73	14	,
ARGUMENT	1096:6	1096:6	14	p0
FIELD	1096:6	1096:6	15	p0
LEAF_NODE	1096:6	1096:6	16	p0
LEAF_NODE	1096:8	1096:8	14	,
ARGUMENT	1096:10	1096:17	14	temp * scanline
FIELD	1096:10	1096:10	15	temp
LEAF_NODE	1096:10	1096:10	16	temp
LEAF_NODE	1096:15	1096:15	15	*
FIELD	1096:17	1096:17	15	scanline
LEAF_NODE	1096:17	1096:17	16	scanline
LEAF_NODE	1096:25	1096:25	14	)
EQ_OPERATOR	1096:26	1096:26	13	==
LEAF_NODE	1096:26	1096:26	14	==
LEAF_NODE	1096:28	1096:28	13	(
TYPE_NAME	1096:29	1096:29	13	tmsize_t
LEAF_NODE	1096:29	1096:29	14	tmsize_t
LEAF_NODE	1096:37	1096:37	13	)
LEAF_NODE	1096:38	1096:38	13	(
UNARY_EXPR	1096:39	1096:40	13	- 1
UNARY_OPERATOR	1096:39	1096:39	14	-
LEAF_NODE	1096:39	1096:39	15	-
FIELD	1096:40	1096:40	14	1
LEAF_NODE	1096:40	1096:40	15	1
LEAF_NODE	1096:41	1096:41	13	)
LEAF_NODE	1097:6	1097:6	12	&&
EXPR	1097:9	1097:9	12	img -> stoponerr
FIELD	1097:9	1097:14	13	img -> stoponerr
LEAF_NODE	1097:9	1097:9	14	img
LEAF_NODE	1097:12	1097:12	14	->
LEAF_NODE	1097:14	1097:14	14	stoponerr
LEAF_NODE	1097:23	1097:23	9	)
STATEMENTS	1098:2	1101:2	9	
LEAF_NODE	1098:2	1098:2	10	{
STATEMENTS	1099:3	1100:3	10	
EXPR_STATEMENT	1099:3	1099:10	11	ret = 0 ;
EXPR	1099:3	1099:3	12	ret = 0
ASSIGN	1099:3	1099:9	13	ret = 0
LVAL	1099:3	1099:3	14	ret
FIELD	1099:3	1099:3	15	ret
LEAF_NODE	1099:3	1099:3	16	ret
ASSIGN_OP	1099:7	1099:7	14	=
LEAF_NODE	1099:7	1099:7	15	=
RVAL	1099:9	1099:9	14	0
FIELD	1099:9	1099:9	15	0
LEAF_NODE	1099:9	1099:9	16	0
LEAF_NODE	1099:10	1099:10	12	;
JUMP_STATEMENT	1100:3	1100:8	11	break DESTINATION ;
KEYWORD	1100:3	1100:3	12	break
LEAF_NODE	1100:3	1100:3	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	1100:8	1100:8	12	;
LEAF_NODE	1101:2	1101:2	10	}
SELECTION	1102:2	1106:2	6	
KEYWORD	1102:2	1102:2	7	if
LEAF_NODE	1102:2	1102:2	8	if
LEAF_NODE	1102:5	1102:5	7	(
CONDITION	1102:6	1102:6	7	colorchannels > 1 && TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 1 ) , p1 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	1102:6	1102:6	8	colorchannels > 1 && TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 1 ) , p1 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	1102:6	1103:23	9	colorchannels > 1 && TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 1 ) , p1 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	1102:6	1102:22	10	colorchannels > 1
FIELD	1102:6	1102:6	11	colorchannels
LEAF_NODE	1102:6	1102:6	12	colorchannels
REL_OPERATOR	1102:20	1102:20	11	>
LEAF_NODE	1102:20	1102:20	12	>
FIELD	1102:22	1102:22	11	1
LEAF_NODE	1102:22	1102:22	12	1
LEAF_NODE	1103:20	1103:20	10	&&
EXPR	1103:23	1103:23	10	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 1 ) , p1 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	1103:23	1105:9	11	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 1 ) , p1 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	1103:23	1104:81	12	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 1 ) , p1 , temp * scanline ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	1103:23	1104:63	13	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 1 ) , p1 , temp * scanline )
CALLEE	1103:23	1103:23	14	TIFFReadEncodedStrip
LEAF_NODE	1103:23	1103:23	15	TIFFReadEncodedStrip
LEAF_NODE	1103:43	1103:43	14	(
ARGUMENT	1103:44	1103:44	14	tif
FIELD	1103:44	1103:44	15	tif
LEAF_NODE	1103:44	1103:44	16	tif
LEAF_NODE	1103:47	1103:47	14	,
ARGUMENT	1103:49	1103:49	14	TIFFComputeStrip ( tif , offset_row , 1 )
FUNCTION_CALL	1103:49	1103:84	15	TIFFComputeStrip ( tif , offset_row , 1 )
CALLEE	1103:49	1103:49	16	TIFFComputeStrip
LEAF_NODE	1103:49	1103:49	17	TIFFComputeStrip
LEAF_NODE	1103:65	1103:65	16	(
ARGUMENT	1103:66	1103:66	16	tif
FIELD	1103:66	1103:66	17	tif
LEAF_NODE	1103:66	1103:66	18	tif
LEAF_NODE	1103:69	1103:69	16	,
ARGUMENT	1103:71	1103:71	16	offset_row
FIELD	1103:71	1103:71	17	offset_row
LEAF_NODE	1103:71	1103:71	18	offset_row
LEAF_NODE	1103:81	1103:81	16	,
ARGUMENT	1103:83	1103:83	16	1
FIELD	1103:83	1103:83	17	1
LEAF_NODE	1103:83	1103:83	18	1
LEAF_NODE	1103:84	1103:84	16	)
LEAF_NODE	1103:85	1103:85	14	,
ARGUMENT	1104:44	1104:44	14	p1
FIELD	1104:44	1104:44	15	p1
LEAF_NODE	1104:44	1104:44	16	p1
LEAF_NODE	1104:46	1104:46	14	,
ARGUMENT	1104:48	1104:55	14	temp * scanline
FIELD	1104:48	1104:48	15	temp
LEAF_NODE	1104:48	1104:48	16	temp
LEAF_NODE	1104:53	1104:53	15	*
FIELD	1104:55	1104:55	15	scanline
LEAF_NODE	1104:55	1104:55	16	scanline
LEAF_NODE	1104:63	1104:63	14	)
EQ_OPERATOR	1104:65	1104:65	13	==
LEAF_NODE	1104:65	1104:65	14	==
LEAF_NODE	1104:68	1104:68	13	(
TYPE_NAME	1104:69	1104:69	13	tmsize_t
LEAF_NODE	1104:69	1104:69	14	tmsize_t
LEAF_NODE	1104:77	1104:77	13	)
LEAF_NODE	1104:78	1104:78	13	(
UNARY_EXPR	1104:79	1104:80	13	- 1
UNARY_OPERATOR	1104:79	1104:79	14	-
LEAF_NODE	1104:79	1104:79	15	-
FIELD	1104:80	1104:80	14	1
LEAF_NODE	1104:80	1104:80	15	1
LEAF_NODE	1104:81	1104:81	13	)
LEAF_NODE	1105:6	1105:6	12	&&
EXPR	1105:9	1105:9	12	img -> stoponerr
FIELD	1105:9	1105:14	13	img -> stoponerr
LEAF_NODE	1105:9	1105:9	14	img
LEAF_NODE	1105:12	1105:12	14	->
LEAF_NODE	1105:14	1105:14	14	stoponerr
LEAF_NODE	1105:23	1105:23	7	)
STATEMENTS	1106:2	1109:2	7	
LEAF_NODE	1106:2	1106:2	8	{
STATEMENTS	1107:3	1108:3	8	
EXPR_STATEMENT	1107:3	1107:10	9	ret = 0 ;
EXPR	1107:3	1107:3	10	ret = 0
ASSIGN	1107:3	1107:9	11	ret = 0
LVAL	1107:3	1107:3	12	ret
FIELD	1107:3	1107:3	13	ret
LEAF_NODE	1107:3	1107:3	14	ret
ASSIGN_OP	1107:7	1107:7	12	=
LEAF_NODE	1107:7	1107:7	13	=
RVAL	1107:9	1107:9	12	0
FIELD	1107:9	1107:9	13	0
LEAF_NODE	1107:9	1107:9	14	0
LEAF_NODE	1107:10	1107:10	10	;
JUMP_STATEMENT	1108:3	1108:8	9	break DESTINATION ;
KEYWORD	1108:3	1108:3	10	break
LEAF_NODE	1108:3	1108:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1108:8	1108:8	10	;
LEAF_NODE	1109:2	1109:2	8	}
SELECTION	1110:2	1114:2	6	
KEYWORD	1110:2	1110:2	7	if
LEAF_NODE	1110:2	1110:2	8	if
LEAF_NODE	1110:5	1110:5	7	(
CONDITION	1110:6	1110:6	7	colorchannels > 1 && TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 2 ) , p2 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	1110:6	1110:6	8	colorchannels > 1 && TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 2 ) , p2 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	1110:6	1111:23	9	colorchannels > 1 && TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 2 ) , p2 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	1110:6	1110:22	10	colorchannels > 1
FIELD	1110:6	1110:6	11	colorchannels
LEAF_NODE	1110:6	1110:6	12	colorchannels
REL_OPERATOR	1110:20	1110:20	11	>
LEAF_NODE	1110:20	1110:20	12	>
FIELD	1110:22	1110:22	11	1
LEAF_NODE	1110:22	1110:22	12	1
LEAF_NODE	1111:20	1111:20	10	&&
EXPR	1111:23	1111:23	10	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 2 ) , p2 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	1111:23	1113:9	11	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 2 ) , p2 , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	1111:23	1112:81	12	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 2 ) , p2 , temp * scanline ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	1111:23	1112:63	13	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , 2 ) , p2 , temp * scanline )
CALLEE	1111:23	1111:23	14	TIFFReadEncodedStrip
LEAF_NODE	1111:23	1111:23	15	TIFFReadEncodedStrip
LEAF_NODE	1111:43	1111:43	14	(
ARGUMENT	1111:44	1111:44	14	tif
FIELD	1111:44	1111:44	15	tif
LEAF_NODE	1111:44	1111:44	16	tif
LEAF_NODE	1111:47	1111:47	14	,
ARGUMENT	1111:49	1111:49	14	TIFFComputeStrip ( tif , offset_row , 2 )
FUNCTION_CALL	1111:49	1111:84	15	TIFFComputeStrip ( tif , offset_row , 2 )
CALLEE	1111:49	1111:49	16	TIFFComputeStrip
LEAF_NODE	1111:49	1111:49	17	TIFFComputeStrip
LEAF_NODE	1111:65	1111:65	16	(
ARGUMENT	1111:66	1111:66	16	tif
FIELD	1111:66	1111:66	17	tif
LEAF_NODE	1111:66	1111:66	18	tif
LEAF_NODE	1111:69	1111:69	16	,
ARGUMENT	1111:71	1111:71	16	offset_row
FIELD	1111:71	1111:71	17	offset_row
LEAF_NODE	1111:71	1111:71	18	offset_row
LEAF_NODE	1111:81	1111:81	16	,
ARGUMENT	1111:83	1111:83	16	2
FIELD	1111:83	1111:83	17	2
LEAF_NODE	1111:83	1111:83	18	2
LEAF_NODE	1111:84	1111:84	16	)
LEAF_NODE	1111:85	1111:85	14	,
ARGUMENT	1112:44	1112:44	14	p2
FIELD	1112:44	1112:44	15	p2
LEAF_NODE	1112:44	1112:44	16	p2
LEAF_NODE	1112:46	1112:46	14	,
ARGUMENT	1112:48	1112:55	14	temp * scanline
FIELD	1112:48	1112:48	15	temp
LEAF_NODE	1112:48	1112:48	16	temp
LEAF_NODE	1112:53	1112:53	15	*
FIELD	1112:55	1112:55	15	scanline
LEAF_NODE	1112:55	1112:55	16	scanline
LEAF_NODE	1112:63	1112:63	14	)
EQ_OPERATOR	1112:65	1112:65	13	==
LEAF_NODE	1112:65	1112:65	14	==
LEAF_NODE	1112:68	1112:68	13	(
TYPE_NAME	1112:69	1112:69	13	tmsize_t
LEAF_NODE	1112:69	1112:69	14	tmsize_t
LEAF_NODE	1112:77	1112:77	13	)
LEAF_NODE	1112:78	1112:78	13	(
UNARY_EXPR	1112:79	1112:80	13	- 1
UNARY_OPERATOR	1112:79	1112:79	14	-
LEAF_NODE	1112:79	1112:79	15	-
FIELD	1112:80	1112:80	14	1
LEAF_NODE	1112:80	1112:80	15	1
LEAF_NODE	1112:81	1112:81	13	)
LEAF_NODE	1113:6	1113:6	12	&&
EXPR	1113:9	1113:9	12	img -> stoponerr
FIELD	1113:9	1113:14	13	img -> stoponerr
LEAF_NODE	1113:9	1113:9	14	img
LEAF_NODE	1113:12	1113:12	14	->
LEAF_NODE	1113:14	1113:14	14	stoponerr
LEAF_NODE	1113:23	1113:23	7	)
STATEMENTS	1114:2	1117:2	7	
LEAF_NODE	1114:2	1114:2	8	{
STATEMENTS	1115:3	1116:3	8	
EXPR_STATEMENT	1115:3	1115:10	9	ret = 0 ;
EXPR	1115:3	1115:3	10	ret = 0
ASSIGN	1115:3	1115:9	11	ret = 0
LVAL	1115:3	1115:3	12	ret
FIELD	1115:3	1115:3	13	ret
LEAF_NODE	1115:3	1115:3	14	ret
ASSIGN_OP	1115:7	1115:7	12	=
LEAF_NODE	1115:7	1115:7	13	=
RVAL	1115:9	1115:9	12	0
FIELD	1115:9	1115:9	13	0
LEAF_NODE	1115:9	1115:9	14	0
LEAF_NODE	1115:10	1115:10	10	;
JUMP_STATEMENT	1116:3	1116:8	9	break DESTINATION ;
KEYWORD	1116:3	1116:3	10	break
LEAF_NODE	1116:3	1116:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1116:8	1116:8	10	;
LEAF_NODE	1117:2	1117:2	8	}
SELECTION	1118:2	1119:2	6	
KEYWORD	1118:2	1118:2	7	if
LEAF_NODE	1118:2	1118:2	8	if
LEAF_NODE	1118:5	1118:5	7	(
CONDITION	1118:6	1118:6	7	alpha
EXPR	1118:6	1118:6	8	alpha
FIELD	1118:6	1118:6	9	alpha
LEAF_NODE	1118:6	1118:6	10	alpha
LEAF_NODE	1118:11	1118:11	7	)
STATEMENTS	1119:2	1127:2	7	
LEAF_NODE	1119:2	1119:2	8	{
STATEMENTS	1120:3	1120:3	8	
SELECTION	1120:3	1123:3	9	
KEYWORD	1120:3	1120:3	10	if
LEAF_NODE	1120:3	1120:3	11	if
LEAF_NODE	1120:6	1120:6	10	(
CONDITION	1120:7	1120:7	10	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , colorchannels ) , pa , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	1120:7	1120:7	11	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , colorchannels ) , pa , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
AND	1120:7	1122:10	12	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , colorchannels ) , pa , temp * scanline ) == ( tmsize_t ) ( - 1 ) && img -> stoponerr
EXPR	1120:7	1121:42	13	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , colorchannels ) , pa , temp * scanline ) == ( tmsize_t ) ( - 1 )
FUNCTION_CALL	1120:7	1121:26	14	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , offset_row , colorchannels ) , pa , temp * scanline )
CALLEE	1120:7	1120:7	15	TIFFReadEncodedStrip
LEAF_NODE	1120:7	1120:7	16	TIFFReadEncodedStrip
LEAF_NODE	1120:27	1120:27	15	(
ARGUMENT	1120:28	1120:28	15	tif
FIELD	1120:28	1120:28	16	tif
LEAF_NODE	1120:28	1120:28	17	tif
LEAF_NODE	1120:31	1120:31	15	,
ARGUMENT	1120:33	1120:33	15	TIFFComputeStrip ( tif , offset_row , colorchannels )
FUNCTION_CALL	1120:33	1120:80	16	TIFFComputeStrip ( tif , offset_row , colorchannels )
CALLEE	1120:33	1120:33	17	TIFFComputeStrip
LEAF_NODE	1120:33	1120:33	18	TIFFComputeStrip
LEAF_NODE	1120:49	1120:49	17	(
ARGUMENT	1120:50	1120:50	17	tif
FIELD	1120:50	1120:50	18	tif
LEAF_NODE	1120:50	1120:50	19	tif
LEAF_NODE	1120:53	1120:53	17	,
ARGUMENT	1120:55	1120:55	17	offset_row
FIELD	1120:55	1120:55	18	offset_row
LEAF_NODE	1120:55	1120:55	19	offset_row
LEAF_NODE	1120:65	1120:65	17	,
ARGUMENT	1120:67	1120:67	17	colorchannels
FIELD	1120:67	1120:67	18	colorchannels
LEAF_NODE	1120:67	1120:67	19	colorchannels
LEAF_NODE	1120:80	1120:80	17	)
LEAF_NODE	1120:81	1120:81	15	,
ARGUMENT	1121:7	1121:7	15	pa
FIELD	1121:7	1121:7	16	pa
LEAF_NODE	1121:7	1121:7	17	pa
LEAF_NODE	1121:9	1121:9	15	,
ARGUMENT	1121:11	1121:18	15	temp * scanline
FIELD	1121:11	1121:11	16	temp
LEAF_NODE	1121:11	1121:11	17	temp
LEAF_NODE	1121:16	1121:16	16	*
FIELD	1121:18	1121:18	16	scanline
LEAF_NODE	1121:18	1121:18	17	scanline
LEAF_NODE	1121:26	1121:26	15	)
EQ_OPERATOR	1121:27	1121:27	14	==
LEAF_NODE	1121:27	1121:27	15	==
LEAF_NODE	1121:29	1121:29	14	(
TYPE_NAME	1121:30	1121:30	14	tmsize_t
LEAF_NODE	1121:30	1121:30	15	tmsize_t
LEAF_NODE	1121:38	1121:38	14	)
LEAF_NODE	1121:39	1121:39	14	(
UNARY_EXPR	1121:40	1121:41	14	- 1
UNARY_OPERATOR	1121:40	1121:40	15	-
LEAF_NODE	1121:40	1121:40	16	-
FIELD	1121:41	1121:41	15	1
LEAF_NODE	1121:41	1121:41	16	1
LEAF_NODE	1121:42	1121:42	14	)
LEAF_NODE	1122:7	1122:7	13	&&
EXPR	1122:10	1122:10	13	img -> stoponerr
FIELD	1122:10	1122:15	14	img -> stoponerr
LEAF_NODE	1122:10	1122:10	15	img
LEAF_NODE	1122:13	1122:13	15	->
LEAF_NODE	1122:15	1122:15	15	stoponerr
LEAF_NODE	1122:24	1122:24	10	)
STATEMENTS	1123:3	1126:3	10	
LEAF_NODE	1123:3	1123:3	11	{
STATEMENTS	1124:4	1125:4	11	
EXPR_STATEMENT	1124:4	1124:11	12	ret = 0 ;
EXPR	1124:4	1124:4	13	ret = 0
ASSIGN	1124:4	1124:10	14	ret = 0
LVAL	1124:4	1124:4	15	ret
FIELD	1124:4	1124:4	16	ret
LEAF_NODE	1124:4	1124:4	17	ret
ASSIGN_OP	1124:8	1124:8	15	=
LEAF_NODE	1124:8	1124:8	16	=
RVAL	1124:10	1124:10	15	0
FIELD	1124:10	1124:10	16	0
LEAF_NODE	1124:10	1124:10	17	0
LEAF_NODE	1124:11	1124:11	13	;
JUMP_STATEMENT	1125:4	1125:9	12	break DESTINATION ;
KEYWORD	1125:4	1125:4	13	break
LEAF_NODE	1125:4	1125:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1125:9	1125:9	13	;
LEAF_NODE	1126:3	1126:3	11	}
LEAF_NODE	1127:2	1127:2	8	}
EXPR_STATEMENT	1129:2	1130:54	6	pos = ( ( row + img -> row_offset ) % rowsperstrip ) * scanline + ( ( tmsize_t ) img -> col_offset * img -> samplesperpixel ) ;
EXPR	1129:2	1129:2	7	pos = ( ( row + img -> row_offset ) % rowsperstrip ) * scanline + ( ( tmsize_t ) img -> col_offset * img -> samplesperpixel )
ASSIGN	1129:2	1129:8	8	pos = ( ( row + img -> row_offset ) % rowsperstrip ) * scanline + ( ( tmsize_t ) img -> col_offset * img -> samplesperpixel )
LVAL	1129:2	1129:2	9	pos
FIELD	1129:2	1129:2	10	pos
LEAF_NODE	1129:2	1129:2	11	pos
ASSIGN_OP	1129:6	1129:6	9	=
LEAF_NODE	1129:6	1129:6	10	=
RVAL	1129:8	1130:53	9	( ( row + img -> row_offset ) % rowsperstrip ) * scanline + ( ( tmsize_t ) img -> col_offset * img -> samplesperpixel )
LEAF_NODE	1129:8	1129:8	10	(
LEAF_NODE	1129:9	1129:9	10	(
FIELD	1129:10	1129:10	10	row
LEAF_NODE	1129:10	1129:10	11	row
LEAF_NODE	1129:14	1129:14	10	+
FIELD	1129:16	1129:21	10	img -> row_offset
LEAF_NODE	1129:16	1129:16	11	img
LEAF_NODE	1129:19	1129:19	11	->
LEAF_NODE	1129:21	1129:21	11	row_offset
LEAF_NODE	1129:31	1129:31	10	)
LEAF_NODE	1129:33	1129:33	10	%
FIELD	1129:35	1129:35	10	rowsperstrip
LEAF_NODE	1129:35	1129:35	11	rowsperstrip
LEAF_NODE	1129:47	1129:47	10	)
LEAF_NODE	1129:49	1129:49	10	*
FIELD	1129:51	1129:51	10	scanline
LEAF_NODE	1129:51	1129:51	11	scanline
LEAF_NODE	1129:60	1129:60	10	+
LEAF_NODE	1130:3	1130:3	10	(
LEAF_NODE	1130:4	1130:4	10	(
TYPE_NAME	1130:5	1130:5	10	tmsize_t
LEAF_NODE	1130:5	1130:5	11	tmsize_t
LEAF_NODE	1130:13	1130:13	10	)
FIELD	1130:15	1130:20	10	img -> col_offset
LEAF_NODE	1130:15	1130:15	11	img
LEAF_NODE	1130:18	1130:18	11	->
LEAF_NODE	1130:20	1130:20	11	col_offset
LEAF_NODE	1130:31	1130:31	10	*
FIELD	1130:33	1130:38	10	img -> samplesperpixel
LEAF_NODE	1130:33	1130:33	11	img
LEAF_NODE	1130:36	1130:36	11	->
LEAF_NODE	1130:38	1130:38	11	samplesperpixel
LEAF_NODE	1130:53	1130:53	10	)
LEAF_NODE	1130:54	1130:54	7	;
EXPR_STATEMENT	1131:2	1132:38	6	( * put ) ( img , raster + y * w , 0 , y , w , nrow , fromskew , toskew , p0 + pos , p1 + pos , p2 + pos , ( alpha ? ( pa + pos ) : NULL ) ) ;
EXPR	1131:2	1131:2	7	( * put ) ( img , raster + y * w , 0 , y , w , nrow , fromskew , toskew , p0 + pos , p1 + pos , p2 + pos , ( alpha ? ( pa + pos ) : NULL ) )
FUNCTION_CALL	1131:2	1132:37	8	( * put ) ( img , raster + y * w , 0 , y , w , nrow , fromskew , toskew , p0 + pos , p1 + pos , p2 + pos , ( alpha ? ( pa + pos ) : NULL ) )
CALLEE	1131:2	1131:7	9	( * put )
LEAF_NODE	1131:2	1131:2	10	(
UNARY_EXPR	1131:3	1131:4	10	* put
UNARY_OPERATOR	1131:3	1131:3	11	*
LEAF_NODE	1131:3	1131:3	12	*
FIELD	1131:4	1131:4	11	put
LEAF_NODE	1131:4	1131:4	12	put
LEAF_NODE	1131:7	1131:7	10	)
LEAF_NODE	1131:8	1131:8	9	(
ARGUMENT	1131:9	1131:9	9	img
FIELD	1131:9	1131:9	10	img
LEAF_NODE	1131:9	1131:9	11	img
LEAF_NODE	1131:12	1131:12	9	,
ARGUMENT	1131:14	1131:23	9	raster + y * w
FIELD	1131:14	1131:14	10	raster
LEAF_NODE	1131:14	1131:14	11	raster
LEAF_NODE	1131:20	1131:20	10	+
FIELD	1131:21	1131:21	10	y
LEAF_NODE	1131:21	1131:21	11	y
LEAF_NODE	1131:22	1131:22	10	*
FIELD	1131:23	1131:23	10	w
LEAF_NODE	1131:23	1131:23	11	w
LEAF_NODE	1131:24	1131:24	9	,
ARGUMENT	1131:26	1131:26	9	0
FIELD	1131:26	1131:26	10	0
LEAF_NODE	1131:26	1131:26	11	0
LEAF_NODE	1131:27	1131:27	9	,
ARGUMENT	1131:29	1131:29	9	y
FIELD	1131:29	1131:29	10	y
LEAF_NODE	1131:29	1131:29	11	y
LEAF_NODE	1131:30	1131:30	9	,
ARGUMENT	1131:32	1131:32	9	w
FIELD	1131:32	1131:32	10	w
LEAF_NODE	1131:32	1131:32	11	w
LEAF_NODE	1131:33	1131:33	9	,
ARGUMENT	1131:35	1131:35	9	nrow
FIELD	1131:35	1131:35	10	nrow
LEAF_NODE	1131:35	1131:35	11	nrow
LEAF_NODE	1131:39	1131:39	9	,
ARGUMENT	1131:41	1131:41	9	fromskew
FIELD	1131:41	1131:41	10	fromskew
LEAF_NODE	1131:41	1131:41	11	fromskew
LEAF_NODE	1131:49	1131:49	9	,
ARGUMENT	1131:51	1131:51	9	toskew
FIELD	1131:51	1131:51	10	toskew
LEAF_NODE	1131:51	1131:51	11	toskew
LEAF_NODE	1131:57	1131:57	9	,
ARGUMENT	1131:59	1131:64	9	p0 + pos
FIELD	1131:59	1131:59	10	p0
LEAF_NODE	1131:59	1131:59	11	p0
LEAF_NODE	1131:62	1131:62	10	+
FIELD	1131:64	1131:64	10	pos
LEAF_NODE	1131:64	1131:64	11	pos
LEAF_NODE	1131:67	1131:67	9	,
ARGUMENT	1131:69	1131:74	9	p1 + pos
FIELD	1131:69	1131:69	10	p1
LEAF_NODE	1131:69	1131:69	11	p1
LEAF_NODE	1131:72	1131:72	10	+
FIELD	1131:74	1131:74	10	pos
LEAF_NODE	1131:74	1131:74	11	pos
LEAF_NODE	1131:77	1131:77	9	,
ARGUMENT	1132:6	1132:11	9	p2 + pos
FIELD	1132:6	1132:6	10	p2
LEAF_NODE	1132:6	1132:6	11	p2
LEAF_NODE	1132:9	1132:9	10	+
FIELD	1132:11	1132:11	10	pos
LEAF_NODE	1132:11	1132:11	11	pos
LEAF_NODE	1132:14	1132:14	9	,
ARGUMENT	1132:16	1132:36	9	( alpha ? ( pa + pos ) : NULL )
LEAF_NODE	1132:16	1132:16	10	(
COND_EXPR	1132:17	1132:32	10	alpha ? ( pa + pos ) : NULL
CONDITION	1132:17	1132:17	11	alpha
FIELD	1132:17	1132:17	12	alpha
LEAF_NODE	1132:17	1132:17	13	alpha
LEAF_NODE	1132:22	1132:22	11	?
EXPR	1132:23	1132:30	11	( pa + pos )
LEAF_NODE	1132:23	1132:23	12	(
FIELD	1132:24	1132:24	12	pa
LEAF_NODE	1132:24	1132:24	13	pa
LEAF_NODE	1132:26	1132:26	12	+
FIELD	1132:27	1132:27	12	pos
LEAF_NODE	1132:27	1132:27	13	pos
LEAF_NODE	1132:30	1132:30	12	)
LEAF_NODE	1132:31	1132:31	11	:
FIELD	1132:32	1132:32	11	NULL
LEAF_NODE	1132:32	1132:32	12	NULL
LEAF_NODE	1132:36	1132:36	10	)
LEAF_NODE	1132:37	1132:37	9	)
LEAF_NODE	1132:38	1132:38	7	;
LEAF_NODE	1133:2	1133:2	6	y
LEAF_NODE	1133:4	1133:4	6	+=
LEAF_NODE	1133:7	1133:7	6	(
LEAF_NODE	1133:8	1133:8	6	(
LEAF_NODE	1133:9	1133:9	6	flip
LEAF_NODE	1133:14	1133:14	6	&
LEAF_NODE	1133:16	1133:16	6	FLIP_VERTICALLY
LEAF_NODE	1133:31	1133:31	6	)
LEAF_NODE	1133:33	1133:33	6	?
LEAF_NODE	1133:35	1133:35	6	-
LEAF_NODE	1133:36	1133:36	6	(
LEAF_NODE	1133:37	1133:37	6	int32
LEAF_NODE	1133:42	1133:42	6	)
LABEL	1133:44	1133:49	6	nrow :
LEAF_NODE	1133:44	1133:44	7	nrow
LEAF_NODE	1133:49	1133:49	7	:
LEAF_NODE	1133:51	1133:51	6	(
LEAF_NODE	1133:52	1133:52	6	int32
LEAF_NODE	1133:57	1133:57	6	)
LEAF_NODE	1133:59	1133:59	6	nrow
LEAF_NODE	1133:63	1133:63	6	)
LEAF_NODE	1133:64	1133:64	6	;
LEAF_NODE	1134:1	1134:1	5	}
SELECTION	1136:1	1136:31	3	
KEYWORD	1136:1	1136:1	4	if
LEAF_NODE	1136:1	1136:1	5	if
LEAF_NODE	1136:4	1136:4	4	(
CONDITION	1136:5	1136:5	4	flip & FLIP_HORIZONTALLY
EXPR	1136:5	1136:12	5	flip & FLIP_HORIZONTALLY
FIELD	1136:5	1136:5	6	flip
LEAF_NODE	1136:5	1136:5	7	flip
LEAF_NODE	1136:10	1136:10	6	&
FIELD	1136:12	1136:12	6	FLIP_HORIZONTALLY
LEAF_NODE	1136:12	1136:12	7	FLIP_HORIZONTALLY
LEAF_NODE	1136:29	1136:29	4	)
STATEMENTS	1136:31	1151:1	4	
LEAF_NODE	1136:31	1136:31	5	{
STATEMENTS	1137:2	1139:2	5	
SIMPLE_DECL	1137:2	1137:13	6	uint32 line ;
VAR_DECL	1137:2	1137:9	7	uint32 line
TYPE	1137:2	1137:2	8	uint32
TYPE_NAME	1137:2	1137:2	9	uint32
LEAF_NODE	1137:2	1137:2	10	uint32
NAME	1137:9	1137:9	8	line
LEAF_NODE	1137:9	1137:9	9	line
LEAF_NODE	1137:13	1137:13	7	;
ITERATION	1139:2	1139:35	6	
KEYWORD	1139:2	1139:2	7	for
LEAF_NODE	1139:2	1139:2	8	for
LEAF_NODE	1139:6	1139:6	7	(
FOR_INIT	1139:7	1139:15	7	line = 0 ;
EXPR	1139:7	1139:7	8	line = 0
ASSIGN	1139:7	1139:14	9	line = 0
LVAL	1139:7	1139:7	10	line
FIELD	1139:7	1139:7	11	line
LEAF_NODE	1139:7	1139:7	12	line
ASSIGN_OP	1139:12	1139:12	10	=
LEAF_NODE	1139:12	1139:12	11	=
RVAL	1139:14	1139:14	10	0
FIELD	1139:14	1139:14	11	0
LEAF_NODE	1139:14	1139:14	12	0
LEAF_NODE	1139:15	1139:15	8	;
CONDITION	1139:17	1139:17	7	line < h
EXPR	1139:17	1139:24	8	line < h
FIELD	1139:17	1139:17	9	line
LEAF_NODE	1139:17	1139:17	10	line
REL_OPERATOR	1139:22	1139:22	9	<
LEAF_NODE	1139:22	1139:22	10	<
FIELD	1139:24	1139:24	9	h
LEAF_NODE	1139:24	1139:24	10	h
LEAF_NODE	1139:25	1139:25	7	;
FOR_EXPR	1139:27	1139:27	7	line ++
EXPR	1139:27	1139:27	8	line ++
FIELD	1139:27	1139:31	9	line ++
LEAF_NODE	1139:27	1139:27	10	line
LEAF_NODE	1139:31	1139:31	10	++
LEAF_NODE	1139:33	1139:33	7	)
STATEMENTS	1139:35	1150:2	7	
LEAF_NODE	1139:35	1139:35	8	{
STATEMENTS	1140:3	1143:3	8	
SIMPLE_DECL	1140:3	1140:37	9	uint32 * left ; left = raster + ( line * w ) ;
VAR_DECL	1140:3	1140:11	10	uint32 * left ; left = raster + ( line * w )
TYPE	1140:3	1140:10	11	uint32 *
TYPE_NAME	1140:3	1140:3	12	uint32
LEAF_NODE	1140:3	1140:3	13	uint32
POINTER	1140:10	1140:10	12	*
LEAF_NODE	1140:10	1140:10	13	*
NAME	1140:11	1140:11	11	left
LEAF_NODE	1140:11	1140:11	12	left
LEAF_NODE	0:0	0:0	11	;
INIT	1140:11	1140:11	11	left = raster + ( line * w )
ASSIGN	1140:11	1140:18	12	left = raster + ( line * w )
LVAL	1140:11	1140:11	13	left
NAME	1140:11	1140:11	14	left
LEAF_NODE	1140:11	1140:11	15	left
ASSIGN_OP	1140:16	1140:16	13	=
LEAF_NODE	1140:16	1140:16	14	=
RVAL	1140:18	1140:36	13	raster + ( line * w )
FIELD	1140:18	1140:18	14	raster
LEAF_NODE	1140:18	1140:18	15	raster
LEAF_NODE	1140:25	1140:25	14	+
LEAF_NODE	1140:27	1140:27	14	(
FIELD	1140:28	1140:28	14	line
LEAF_NODE	1140:28	1140:28	15	line
LEAF_NODE	1140:33	1140:33	14	*
FIELD	1140:35	1140:35	14	w
LEAF_NODE	1140:35	1140:35	15	w
LEAF_NODE	1140:36	1140:36	14	)
LEAF_NODE	1140:37	1140:37	10	;
SIMPLE_DECL	1141:3	1141:31	9	uint32 * right ; right = left + w - 1 ;
VAR_DECL	1141:3	1141:11	10	uint32 * right ; right = left + w - 1
TYPE	1141:3	1141:10	11	uint32 *
TYPE_NAME	1141:3	1141:3	12	uint32
LEAF_NODE	1141:3	1141:3	13	uint32
POINTER	1141:10	1141:10	12	*
LEAF_NODE	1141:10	1141:10	13	*
NAME	1141:11	1141:11	11	right
LEAF_NODE	1141:11	1141:11	12	right
LEAF_NODE	0:0	0:0	11	;
INIT	1141:11	1141:11	11	right = left + w - 1
ASSIGN	1141:11	1141:19	12	right = left + w - 1
LVAL	1141:11	1141:11	13	right
NAME	1141:11	1141:11	14	right
LEAF_NODE	1141:11	1141:11	15	right
ASSIGN_OP	1141:17	1141:17	13	=
LEAF_NODE	1141:17	1141:17	14	=
RVAL	1141:19	1141:30	13	left + w - 1
FIELD	1141:19	1141:19	14	left
LEAF_NODE	1141:19	1141:19	15	left
LEAF_NODE	1141:24	1141:24	14	+
FIELD	1141:26	1141:26	14	w
LEAF_NODE	1141:26	1141:26	15	w
LEAF_NODE	1141:28	1141:28	14	-
FIELD	1141:30	1141:30	14	1
LEAF_NODE	1141:30	1141:30	15	1
LEAF_NODE	1141:31	1141:31	10	;
ITERATION	1143:3	1143:26	9	
KEYWORD	1143:3	1143:3	10	while
LEAF_NODE	1143:3	1143:3	11	while
LEAF_NODE	1143:9	1143:9	10	(
CONDITION	1143:11	1143:11	10	left < right
EXPR	1143:11	1143:18	11	left < right
FIELD	1143:11	1143:11	12	left
LEAF_NODE	1143:11	1143:11	13	left
REL_OPERATOR	1143:16	1143:16	12	<
LEAF_NODE	1143:16	1143:16	13	<
FIELD	1143:18	1143:18	12	right
LEAF_NODE	1143:18	1143:18	13	right
LEAF_NODE	1143:24	1143:24	10	)
STATEMENTS	1143:26	1149:3	10	
LEAF_NODE	1143:26	1143:26	11	{
STATEMENTS	1144:4	1148:4	11	
SIMPLE_DECL	1144:4	1144:23	12	uint32 temp ; temp = * left ;
VAR_DECL	1144:4	1144:11	13	uint32 temp ; temp = * left
TYPE	1144:4	1144:4	14	uint32
TYPE_NAME	1144:4	1144:4	15	uint32
LEAF_NODE	1144:4	1144:4	16	uint32
NAME	1144:11	1144:11	14	temp
LEAF_NODE	1144:11	1144:11	15	temp
LEAF_NODE	0:0	0:0	14	;
INIT	1144:11	1144:11	14	temp = * left
ASSIGN	1144:11	1144:18	15	temp = * left
LVAL	1144:11	1144:11	16	temp
NAME	1144:11	1144:11	17	temp
LEAF_NODE	1144:11	1144:11	18	temp
ASSIGN_OP	1144:16	1144:16	16	=
LEAF_NODE	1144:16	1144:16	17	=
RVAL	1144:18	1144:18	16	* left
UNARY_EXPR	1144:18	1144:19	17	* left
UNARY_OPERATOR	1144:18	1144:18	18	*
LEAF_NODE	1144:18	1144:18	19	*
FIELD	1144:19	1144:19	18	left
LEAF_NODE	1144:19	1144:19	19	left
LEAF_NODE	1144:23	1144:23	13	;
EXPR_STATEMENT	1145:4	1145:18	12	* left = * right ;
EXPR	1145:4	1145:4	13	* left = * right
ASSIGN	1145:4	1145:12	14	* left = * right
LVAL	1145:4	1145:4	15	* left
UNARY_EXPR	1145:4	1145:5	16	* left
UNARY_OPERATOR	1145:4	1145:4	17	*
LEAF_NODE	1145:4	1145:4	18	*
FIELD	1145:5	1145:5	17	left
LEAF_NODE	1145:5	1145:5	18	left
ASSIGN_OP	1145:10	1145:10	15	=
LEAF_NODE	1145:10	1145:10	16	=
RVAL	1145:12	1145:12	15	* right
UNARY_EXPR	1145:12	1145:13	16	* right
UNARY_OPERATOR	1145:12	1145:12	17	*
LEAF_NODE	1145:12	1145:12	18	*
FIELD	1145:13	1145:13	17	right
LEAF_NODE	1145:13	1145:13	18	right
LEAF_NODE	1145:18	1145:18	13	;
EXPR_STATEMENT	1146:4	1146:17	12	* right = temp ;
EXPR	1146:4	1146:4	13	* right = temp
ASSIGN	1146:4	1146:13	14	* right = temp
LVAL	1146:4	1146:4	15	* right
UNARY_EXPR	1146:4	1146:5	16	* right
UNARY_OPERATOR	1146:4	1146:4	17	*
LEAF_NODE	1146:4	1146:4	18	*
FIELD	1146:5	1146:5	17	right
LEAF_NODE	1146:5	1146:5	18	right
ASSIGN_OP	1146:11	1146:11	15	=
LEAF_NODE	1146:11	1146:11	16	=
RVAL	1146:13	1146:13	15	temp
FIELD	1146:13	1146:13	16	temp
LEAF_NODE	1146:13	1146:13	17	temp
LEAF_NODE	1146:17	1146:17	13	;
EXPR_STATEMENT	1147:4	1147:10	12	left ++ ;
EXPR	1147:4	1147:4	13	left ++
FIELD	1147:4	1147:8	14	left ++
LEAF_NODE	1147:4	1147:4	15	left
LEAF_NODE	1147:8	1147:8	15	++
LEAF_NODE	1147:10	1147:10	13	;
EXPR_STATEMENT	1148:4	1148:11	12	right -- ;
EXPR	1148:4	1148:4	13	right --
FIELD	1148:4	1148:9	14	right --
LEAF_NODE	1148:4	1148:4	15	right
LEAF_NODE	1148:9	1148:9	15	--
LEAF_NODE	1148:11	1148:11	13	;
LEAF_NODE	1149:3	1149:3	11	}
LEAF_NODE	1150:2	1150:2	8	}
LEAF_NODE	1151:1	1151:1	5	}
EXPR_STATEMENT	1153:1	1153:15	3	_TIFFfree ( buf ) ;
EXPR	1153:1	1153:1	4	_TIFFfree ( buf )
FUNCTION_CALL	1153:1	1153:14	5	_TIFFfree ( buf )
CALLEE	1153:1	1153:1	6	_TIFFfree
LEAF_NODE	1153:1	1153:1	7	_TIFFfree
LEAF_NODE	1153:10	1153:10	6	(
ARGUMENT	1153:11	1153:11	6	buf
FIELD	1153:11	1153:11	7	buf
LEAF_NODE	1153:11	1153:11	8	buf
LEAF_NODE	1153:14	1153:14	6	)
LEAF_NODE	1153:15	1153:15	4	;
LEAF_NODE	1154:1	1154:1	3	return
LEAF_NODE	1154:8	1154:8	3	(
LEAF_NODE	1154:9	1154:9	3	ret
LEAF_NODE	1154:12	1154:12	3	)
LEAF_NODE	1154:13	1154:13	3	;
LEAF_NODE	1155:0	1155:0	2	}
FUNCTION_DEF	0:0	1260:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1245:0	1245:0	2	DECLAREContigPutFunc
LEAF_NODE	1245:0	1245:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1245:20	1245:36	2	( put8bitcmaptile )
LEAF_NODE	1245:20	1245:20	3	(
PARAMETER_DECL	1245:21	1245:21	3	put8bitcmaptile
LEAF_NODE	1245:21	1245:21	4	put8bitcmaptile
LEAF_NODE	1245:36	1245:36	3	)
LEAF_NODE	1246:0	1246:0	2	{
STATEMENTS	1247:4	1251:4	2	
SIMPLE_DECL	1247:4	1247:33	3	uint32 * PALmap ; PALmap = img -> PALmap ;
VAR_DECL	1247:4	1247:13	4	uint32 * PALmap ; PALmap = img -> PALmap
TYPE	1247:4	1247:11	5	uint32 *
TYPE_NAME	1247:4	1247:4	6	uint32
LEAF_NODE	1247:4	1247:4	7	uint32
POINTER	1247:11	1247:11	6	*
LEAF_NODE	1247:11	1247:11	7	*
NAME	1247:13	1247:13	5	PALmap
LEAF_NODE	1247:13	1247:13	6	PALmap
LEAF_NODE	0:0	0:0	5	;
INIT	1247:13	1247:13	5	PALmap = img -> PALmap
ASSIGN	1247:13	1247:22	6	PALmap = img -> PALmap
LVAL	1247:13	1247:13	7	PALmap
NAME	1247:13	1247:13	8	PALmap
LEAF_NODE	1247:13	1247:13	9	PALmap
ASSIGN_OP	1247:20	1247:20	7	=
LEAF_NODE	1247:20	1247:20	8	=
RVAL	1247:22	1247:22	7	img -> PALmap
FIELD	1247:22	1247:27	8	img -> PALmap
LEAF_NODE	1247:22	1247:22	9	img
LEAF_NODE	1247:25	1247:25	9	->
LEAF_NODE	1247:27	1247:27	9	PALmap
LEAF_NODE	1247:33	1247:33	4	;
SIMPLE_DECL	1248:4	1248:46	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1248:4	1248:8	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1248:4	1248:4	5	int
TYPE_NAME	1248:4	1248:4	6	int
LEAF_NODE	1248:4	1248:4	7	int
NAME	1248:8	1248:8	5	samplesperpixel
LEAF_NODE	1248:8	1248:8	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1248:8	1248:8	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1248:8	1248:26	6	samplesperpixel = img -> samplesperpixel
LVAL	1248:8	1248:8	7	samplesperpixel
NAME	1248:8	1248:8	8	samplesperpixel
LEAF_NODE	1248:8	1248:8	9	samplesperpixel
ASSIGN_OP	1248:24	1248:24	7	=
LEAF_NODE	1248:24	1248:24	8	=
RVAL	1248:26	1248:26	7	img -> samplesperpixel
FIELD	1248:26	1248:31	8	img -> samplesperpixel
LEAF_NODE	1248:26	1248:26	9	img
LEAF_NODE	1248:29	1248:29	9	->
LEAF_NODE	1248:31	1248:31	9	samplesperpixel
LEAF_NODE	1248:46	1248:46	4	;
EXPR_STATEMENT	1250:4	1250:12	3	( void ) y ;
EXPR	1250:4	1250:11	4	( void ) y
LEAF_NODE	1250:4	1250:4	5	(
TYPE_NAME	1250:5	1250:5	5	void
LEAF_NODE	1250:5	1250:5	6	void
LEAF_NODE	1250:9	1250:9	5	)
FIELD	1250:11	1250:11	5	y
LEAF_NODE	1250:11	1250:11	6	y
LEAF_NODE	1250:12	1250:12	4	;
ITERATION	1251:4	1251:23	3	
KEYWORD	1251:4	1251:4	4	for
LEAF_NODE	1251:4	1251:4	5	for
LEAF_NODE	1251:7	1251:7	4	(
FOR_INIT	1251:9	1251:9	4	;
LEAF_NODE	1251:9	1251:9	5	;
CONDITION	1251:11	1251:11	4	h > 0
EXPR	1251:11	1251:15	5	h > 0
FIELD	1251:11	1251:11	6	h
LEAF_NODE	1251:11	1251:11	7	h
REL_OPERATOR	1251:13	1251:13	6	>
LEAF_NODE	1251:13	1251:13	7	>
FIELD	1251:15	1251:15	6	0
LEAF_NODE	1251:15	1251:15	7	0
LEAF_NODE	1251:16	1251:16	4	;
FOR_EXPR	1251:18	1251:18	4	-- h
EXPR	1251:18	1251:20	5	-- h
LEAF_NODE	1251:18	1251:18	6	--
FIELD	1251:20	1251:20	6	h
LEAF_NODE	1251:20	1251:20	7	h
LEAF_NODE	1251:21	1251:21	4	)
STATEMENTS	1251:23	1259:4	4	
LEAF_NODE	1251:23	1251:23	5	{
STATEMENTS	1252:1	1258:1	5	
ITERATION	1252:1	1253:8	6	
KEYWORD	1252:1	1252:1	7	for
LEAF_NODE	1252:1	1252:1	8	for
LEAF_NODE	1252:5	1252:5	7	(
FOR_INIT	1252:6	1252:11	7	x = w ;
EXPR	1252:6	1252:6	8	x = w
ASSIGN	1252:6	1252:10	9	x = w
LVAL	1252:6	1252:6	10	x
FIELD	1252:6	1252:6	11	x
LEAF_NODE	1252:6	1252:6	12	x
ASSIGN_OP	1252:8	1252:8	10	=
LEAF_NODE	1252:8	1252:8	11	=
RVAL	1252:10	1252:10	10	w
FIELD	1252:10	1252:10	11	w
LEAF_NODE	1252:10	1252:10	12	w
LEAF_NODE	1252:11	1252:11	8	;
CONDITION	1252:13	1252:13	7	x > 0
EXPR	1252:13	1252:17	8	x > 0
FIELD	1252:13	1252:13	9	x
LEAF_NODE	1252:13	1252:13	10	x
REL_OPERATOR	1252:15	1252:15	9	>
LEAF_NODE	1252:15	1252:15	10	>
FIELD	1252:17	1252:17	9	0
LEAF_NODE	1252:17	1252:17	10	0
LEAF_NODE	1252:18	1252:18	7	;
FOR_EXPR	1252:20	1252:20	7	-- x
EXPR	1252:20	1252:22	8	-- x
LEAF_NODE	1252:20	1252:20	9	--
FIELD	1252:22	1252:22	9	x
LEAF_NODE	1252:22	1252:22	10	x
LEAF_NODE	1252:23	1252:23	7	)
STATEMENTS	1253:8	1256:8	7	
LEAF_NODE	1253:8	1253:8	8	{
STATEMENTS	1254:5	1255:12	8	
EXPR_STATEMENT	1254:5	1254:27	9	* cp ++ = PALmap [ * pp ] [ 0 ] ;
EXPR	1254:5	1254:5	10	* cp ++ = PALmap [ * pp ] [ 0 ]
ASSIGN	1254:5	1254:13	11	* cp ++ = PALmap [ * pp ] [ 0 ]
LVAL	1254:5	1254:5	12	* cp ++
UNARY_EXPR	1254:5	1254:6	13	* cp ++
UNARY_OPERATOR	1254:5	1254:5	14	*
LEAF_NODE	1254:5	1254:5	15	*
FIELD	1254:6	1254:8	14	cp ++
LEAF_NODE	1254:6	1254:6	15	cp
LEAF_NODE	1254:8	1254:8	15	++
ASSIGN_OP	1254:11	1254:11	12	=
LEAF_NODE	1254:11	1254:11	13	=
RVAL	1254:13	1254:13	12	PALmap [ * pp ] [ 0 ]
FIELD	1254:13	1254:26	13	PALmap [ * pp ] [ 0 ]
LEAF_NODE	1254:13	1254:13	14	PALmap
LEAF_NODE	1254:19	1254:19	14	[
EXPR	1254:20	1254:20	14	* pp
UNARY_EXPR	1254:20	1254:21	15	* pp
UNARY_OPERATOR	1254:20	1254:20	16	*
LEAF_NODE	1254:20	1254:20	17	*
FIELD	1254:21	1254:21	16	pp
LEAF_NODE	1254:21	1254:21	17	pp
LEAF_NODE	1254:23	1254:23	14	]
LEAF_NODE	1254:24	1254:24	14	[
EXPR	1254:25	1254:25	14	0
FIELD	1254:25	1254:25	15	0
LEAF_NODE	1254:25	1254:25	16	0
LEAF_NODE	1254:26	1254:26	14	]
LEAF_NODE	1254:27	1254:27	10	;
EXPR_STATEMENT	1255:12	1255:33	9	pp += samplesperpixel ;
EXPR	1255:12	1255:12	10	pp += samplesperpixel
ASSIGN	1255:12	1255:18	11	pp += samplesperpixel
LVAL	1255:12	1255:12	12	pp
FIELD	1255:12	1255:12	13	pp
LEAF_NODE	1255:12	1255:12	14	pp
ASSIGN_OP	1255:15	1255:15	12	+=
LEAF_NODE	1255:15	1255:15	13	+=
RVAL	1255:18	1255:18	12	samplesperpixel
FIELD	1255:18	1255:18	13	samplesperpixel
LEAF_NODE	1255:18	1255:18	14	samplesperpixel
LEAF_NODE	1255:33	1255:33	10	;
LEAF_NODE	1256:8	1256:8	8	}
EXPR_STATEMENT	1257:1	1257:13	6	cp += toskew ;
EXPR	1257:1	1257:1	7	cp += toskew
ASSIGN	1257:1	1257:7	8	cp += toskew
LVAL	1257:1	1257:1	9	cp
FIELD	1257:1	1257:1	10	cp
LEAF_NODE	1257:1	1257:1	11	cp
ASSIGN_OP	1257:4	1257:4	9	+=
LEAF_NODE	1257:4	1257:4	10	+=
RVAL	1257:7	1257:7	9	toskew
FIELD	1257:7	1257:7	10	toskew
LEAF_NODE	1257:7	1257:7	11	toskew
LEAF_NODE	1257:13	1257:13	7	;
EXPR_STATEMENT	1258:1	1258:15	6	pp += fromskew ;
EXPR	1258:1	1258:1	7	pp += fromskew
ASSIGN	1258:1	1258:7	8	pp += fromskew
LVAL	1258:1	1258:1	9	pp
FIELD	1258:1	1258:1	10	pp
LEAF_NODE	1258:1	1258:1	11	pp
ASSIGN_OP	1258:4	1258:4	9	+=
LEAF_NODE	1258:4	1258:4	10	+=
RVAL	1258:7	1258:7	9	fromskew
FIELD	1258:7	1258:7	10	fromskew
LEAF_NODE	1258:7	1258:7	11	fromskew
LEAF_NODE	1258:15	1258:15	7	;
LEAF_NODE	1259:4	1259:4	5	}
LEAF_NODE	1260:0	1260:0	2	}
FUNCTION_DEF	0:0	1277:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1265:0	1265:0	2	DECLAREContigPutFunc
LEAF_NODE	1265:0	1265:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1265:20	1265:36	2	( put4bitcmaptile )
LEAF_NODE	1265:20	1265:20	3	(
PARAMETER_DECL	1265:21	1265:21	3	put4bitcmaptile
LEAF_NODE	1265:21	1265:21	4	put4bitcmaptile
LEAF_NODE	1265:36	1265:36	3	)
LEAF_NODE	1266:0	1266:0	2	{
STATEMENTS	1267:4	1271:4	2	
SIMPLE_DECL	1267:4	1267:33	3	uint32 * PALmap ; PALmap = img -> PALmap ;
VAR_DECL	1267:4	1267:13	4	uint32 * PALmap ; PALmap = img -> PALmap
TYPE	1267:4	1267:11	5	uint32 *
TYPE_NAME	1267:4	1267:4	6	uint32
LEAF_NODE	1267:4	1267:4	7	uint32
POINTER	1267:11	1267:11	6	*
LEAF_NODE	1267:11	1267:11	7	*
NAME	1267:13	1267:13	5	PALmap
LEAF_NODE	1267:13	1267:13	6	PALmap
LEAF_NODE	0:0	0:0	5	;
INIT	1267:13	1267:13	5	PALmap = img -> PALmap
ASSIGN	1267:13	1267:22	6	PALmap = img -> PALmap
LVAL	1267:13	1267:13	7	PALmap
NAME	1267:13	1267:13	8	PALmap
LEAF_NODE	1267:13	1267:13	9	PALmap
ASSIGN_OP	1267:20	1267:20	7	=
LEAF_NODE	1267:20	1267:20	8	=
RVAL	1267:22	1267:22	7	img -> PALmap
FIELD	1267:22	1267:27	8	img -> PALmap
LEAF_NODE	1267:22	1267:22	9	img
LEAF_NODE	1267:25	1267:25	9	->
LEAF_NODE	1267:27	1267:27	9	PALmap
LEAF_NODE	1267:33	1267:33	4	;
EXPR_STATEMENT	1269:4	1269:12	3	( void ) x ;
EXPR	1269:4	1269:11	4	( void ) x
LEAF_NODE	1269:4	1269:4	5	(
TYPE_NAME	1269:5	1269:5	5	void
LEAF_NODE	1269:5	1269:5	6	void
LEAF_NODE	1269:9	1269:9	5	)
FIELD	1269:11	1269:11	5	x
LEAF_NODE	1269:11	1269:11	6	x
LEAF_NODE	1269:12	1269:12	4	;
EXPR_STATEMENT	1269:14	1269:22	3	( void ) y ;
EXPR	1269:14	1269:21	4	( void ) y
LEAF_NODE	1269:14	1269:14	5	(
TYPE_NAME	1269:15	1269:15	5	void
LEAF_NODE	1269:15	1269:15	6	void
LEAF_NODE	1269:19	1269:19	5	)
FIELD	1269:21	1269:21	5	y
LEAF_NODE	1269:21	1269:21	6	y
LEAF_NODE	1269:22	1269:22	4	;
EXPR_STATEMENT	1270:4	1270:17	3	fromskew /= 2 ;
EXPR	1270:4	1270:4	4	fromskew /= 2
ASSIGN	1270:4	1270:16	5	fromskew /= 2
LVAL	1270:4	1270:4	6	fromskew
FIELD	1270:4	1270:4	7	fromskew
LEAF_NODE	1270:4	1270:4	8	fromskew
ASSIGN_OP	1270:13	1270:13	6	/=
LEAF_NODE	1270:13	1270:13	7	/=
RVAL	1270:16	1270:16	6	2
FIELD	1270:16	1270:16	7	2
LEAF_NODE	1270:16	1270:16	8	2
LEAF_NODE	1270:17	1270:17	4	;
ITERATION	1271:4	1271:23	3	
KEYWORD	1271:4	1271:4	4	for
LEAF_NODE	1271:4	1271:4	5	for
LEAF_NODE	1271:7	1271:7	4	(
FOR_INIT	1271:9	1271:9	4	;
LEAF_NODE	1271:9	1271:9	5	;
CONDITION	1271:11	1271:11	4	h > 0
EXPR	1271:11	1271:15	5	h > 0
FIELD	1271:11	1271:11	6	h
LEAF_NODE	1271:11	1271:11	7	h
REL_OPERATOR	1271:13	1271:13	6	>
LEAF_NODE	1271:13	1271:13	7	>
FIELD	1271:15	1271:15	6	0
LEAF_NODE	1271:15	1271:15	7	0
LEAF_NODE	1271:16	1271:16	4	;
FOR_EXPR	1271:18	1271:18	4	-- h
EXPR	1271:18	1271:20	5	-- h
LEAF_NODE	1271:18	1271:18	6	--
FIELD	1271:20	1271:20	6	h
LEAF_NODE	1271:20	1271:20	7	h
LEAF_NODE	1271:21	1271:21	4	)
STATEMENTS	1271:23	1276:4	4	
LEAF_NODE	1271:23	1271:23	5	{
STATEMENTS	1272:1	1275:1	5	
SIMPLE_DECL	1272:1	1272:11	6	uint32 * bw ;
VAR_DECL	1272:1	1272:9	7	uint32 * bw
TYPE	1272:1	1272:7	8	uint32 *
TYPE_NAME	1272:1	1272:1	9	uint32
LEAF_NODE	1272:1	1272:1	10	uint32
POINTER	1272:7	1272:7	9	*
LEAF_NODE	1272:7	1272:7	10	*
NAME	1272:9	1272:9	8	bw
LEAF_NODE	1272:9	1272:9	9	bw
LEAF_NODE	1272:11	1272:11	7	;
EXPR_STATEMENT	1273:1	1273:46	6	UNROLL2 ( w , bw = PALmap [ * pp ++ ] , * cp ++ = * bw ++ ) ;
EXPR	1273:1	1273:1	7	UNROLL2 ( w , bw = PALmap [ * pp ++ ] , * cp ++ = * bw ++ )
FUNCTION_CALL	1273:1	1273:45	8	UNROLL2 ( w , bw = PALmap [ * pp ++ ] , * cp ++ = * bw ++ )
CALLEE	1273:1	1273:1	9	UNROLL2
LEAF_NODE	1273:1	1273:1	10	UNROLL2
LEAF_NODE	1273:8	1273:8	9	(
ARGUMENT	1273:9	1273:9	9	w
FIELD	1273:9	1273:9	10	w
LEAF_NODE	1273:9	1273:9	11	w
LEAF_NODE	1273:10	1273:10	9	,
ARGUMENT	1273:12	1273:12	9	bw = PALmap [ * pp ++ ]
ASSIGN	1273:12	1273:17	10	bw = PALmap [ * pp ++ ]
LVAL	1273:12	1273:12	11	bw
FIELD	1273:12	1273:12	12	bw
LEAF_NODE	1273:12	1273:12	13	bw
ASSIGN_OP	1273:15	1273:15	11	=
LEAF_NODE	1273:15	1273:15	12	=
RVAL	1273:17	1273:17	11	PALmap [ * pp ++ ]
FIELD	1273:17	1273:29	12	PALmap [ * pp ++ ]
LEAF_NODE	1273:17	1273:17	13	PALmap
LEAF_NODE	1273:23	1273:23	13	[
EXPR	1273:24	1273:24	13	* pp ++
UNARY_EXPR	1273:24	1273:25	14	* pp ++
UNARY_OPERATOR	1273:24	1273:24	15	*
LEAF_NODE	1273:24	1273:24	16	*
FIELD	1273:25	1273:27	15	pp ++
LEAF_NODE	1273:25	1273:25	16	pp
LEAF_NODE	1273:27	1273:27	16	++
LEAF_NODE	1273:29	1273:29	13	]
LEAF_NODE	1273:30	1273:30	9	,
ARGUMENT	1273:32	1273:32	9	* cp ++ = * bw ++
ASSIGN	1273:32	1273:40	10	* cp ++ = * bw ++
LVAL	1273:32	1273:32	11	* cp ++
UNARY_EXPR	1273:32	1273:33	12	* cp ++
UNARY_OPERATOR	1273:32	1273:32	13	*
LEAF_NODE	1273:32	1273:32	14	*
FIELD	1273:33	1273:35	13	cp ++
LEAF_NODE	1273:33	1273:33	14	cp
LEAF_NODE	1273:35	1273:35	14	++
ASSIGN_OP	1273:38	1273:38	11	=
LEAF_NODE	1273:38	1273:38	12	=
RVAL	1273:40	1273:40	11	* bw ++
UNARY_EXPR	1273:40	1273:41	12	* bw ++
UNARY_OPERATOR	1273:40	1273:40	13	*
LEAF_NODE	1273:40	1273:40	14	*
FIELD	1273:41	1273:43	13	bw ++
LEAF_NODE	1273:41	1273:41	14	bw
LEAF_NODE	1273:43	1273:43	14	++
LEAF_NODE	1273:45	1273:45	9	)
LEAF_NODE	1273:46	1273:46	7	;
EXPR_STATEMENT	1274:1	1274:13	6	cp += toskew ;
EXPR	1274:1	1274:1	7	cp += toskew
ASSIGN	1274:1	1274:7	8	cp += toskew
LVAL	1274:1	1274:1	9	cp
FIELD	1274:1	1274:1	10	cp
LEAF_NODE	1274:1	1274:1	11	cp
ASSIGN_OP	1274:4	1274:4	9	+=
LEAF_NODE	1274:4	1274:4	10	+=
RVAL	1274:7	1274:7	9	toskew
FIELD	1274:7	1274:7	10	toskew
LEAF_NODE	1274:7	1274:7	11	toskew
LEAF_NODE	1274:13	1274:13	7	;
EXPR_STATEMENT	1275:1	1275:15	6	pp += fromskew ;
EXPR	1275:1	1275:1	7	pp += fromskew
ASSIGN	1275:1	1275:7	8	pp += fromskew
LVAL	1275:1	1275:1	9	pp
FIELD	1275:1	1275:1	10	pp
LEAF_NODE	1275:1	1275:1	11	pp
ASSIGN_OP	1275:4	1275:4	9	+=
LEAF_NODE	1275:4	1275:4	10	+=
RVAL	1275:7	1275:7	9	fromskew
FIELD	1275:7	1275:7	10	fromskew
LEAF_NODE	1275:7	1275:7	11	fromskew
LEAF_NODE	1275:15	1275:15	7	;
LEAF_NODE	1276:4	1276:4	5	}
LEAF_NODE	1277:0	1277:0	2	}
FUNCTION_DEF	0:0	1294:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1282:0	1282:0	2	DECLAREContigPutFunc
LEAF_NODE	1282:0	1282:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1282:20	1282:36	2	( put2bitcmaptile )
LEAF_NODE	1282:20	1282:20	3	(
PARAMETER_DECL	1282:21	1282:21	3	put2bitcmaptile
LEAF_NODE	1282:21	1282:21	4	put2bitcmaptile
LEAF_NODE	1282:36	1282:36	3	)
LEAF_NODE	1283:0	1283:0	2	{
STATEMENTS	1284:4	1288:4	2	
SIMPLE_DECL	1284:4	1284:33	3	uint32 * PALmap ; PALmap = img -> PALmap ;
VAR_DECL	1284:4	1284:13	4	uint32 * PALmap ; PALmap = img -> PALmap
TYPE	1284:4	1284:11	5	uint32 *
TYPE_NAME	1284:4	1284:4	6	uint32
LEAF_NODE	1284:4	1284:4	7	uint32
POINTER	1284:11	1284:11	6	*
LEAF_NODE	1284:11	1284:11	7	*
NAME	1284:13	1284:13	5	PALmap
LEAF_NODE	1284:13	1284:13	6	PALmap
LEAF_NODE	0:0	0:0	5	;
INIT	1284:13	1284:13	5	PALmap = img -> PALmap
ASSIGN	1284:13	1284:22	6	PALmap = img -> PALmap
LVAL	1284:13	1284:13	7	PALmap
NAME	1284:13	1284:13	8	PALmap
LEAF_NODE	1284:13	1284:13	9	PALmap
ASSIGN_OP	1284:20	1284:20	7	=
LEAF_NODE	1284:20	1284:20	8	=
RVAL	1284:22	1284:22	7	img -> PALmap
FIELD	1284:22	1284:27	8	img -> PALmap
LEAF_NODE	1284:22	1284:22	9	img
LEAF_NODE	1284:25	1284:25	9	->
LEAF_NODE	1284:27	1284:27	9	PALmap
LEAF_NODE	1284:33	1284:33	4	;
EXPR_STATEMENT	1286:4	1286:12	3	( void ) x ;
EXPR	1286:4	1286:11	4	( void ) x
LEAF_NODE	1286:4	1286:4	5	(
TYPE_NAME	1286:5	1286:5	5	void
LEAF_NODE	1286:5	1286:5	6	void
LEAF_NODE	1286:9	1286:9	5	)
FIELD	1286:11	1286:11	5	x
LEAF_NODE	1286:11	1286:11	6	x
LEAF_NODE	1286:12	1286:12	4	;
EXPR_STATEMENT	1286:14	1286:22	3	( void ) y ;
EXPR	1286:14	1286:21	4	( void ) y
LEAF_NODE	1286:14	1286:14	5	(
TYPE_NAME	1286:15	1286:15	5	void
LEAF_NODE	1286:15	1286:15	6	void
LEAF_NODE	1286:19	1286:19	5	)
FIELD	1286:21	1286:21	5	y
LEAF_NODE	1286:21	1286:21	6	y
LEAF_NODE	1286:22	1286:22	4	;
EXPR_STATEMENT	1287:4	1287:17	3	fromskew /= 4 ;
EXPR	1287:4	1287:4	4	fromskew /= 4
ASSIGN	1287:4	1287:16	5	fromskew /= 4
LVAL	1287:4	1287:4	6	fromskew
FIELD	1287:4	1287:4	7	fromskew
LEAF_NODE	1287:4	1287:4	8	fromskew
ASSIGN_OP	1287:13	1287:13	6	/=
LEAF_NODE	1287:13	1287:13	7	/=
RVAL	1287:16	1287:16	6	4
FIELD	1287:16	1287:16	7	4
LEAF_NODE	1287:16	1287:16	8	4
LEAF_NODE	1287:17	1287:17	4	;
ITERATION	1288:4	1288:23	3	
KEYWORD	1288:4	1288:4	4	for
LEAF_NODE	1288:4	1288:4	5	for
LEAF_NODE	1288:7	1288:7	4	(
FOR_INIT	1288:9	1288:9	4	;
LEAF_NODE	1288:9	1288:9	5	;
CONDITION	1288:11	1288:11	4	h > 0
EXPR	1288:11	1288:15	5	h > 0
FIELD	1288:11	1288:11	6	h
LEAF_NODE	1288:11	1288:11	7	h
REL_OPERATOR	1288:13	1288:13	6	>
LEAF_NODE	1288:13	1288:13	7	>
FIELD	1288:15	1288:15	6	0
LEAF_NODE	1288:15	1288:15	7	0
LEAF_NODE	1288:16	1288:16	4	;
FOR_EXPR	1288:18	1288:18	4	-- h
EXPR	1288:18	1288:20	5	-- h
LEAF_NODE	1288:18	1288:18	6	--
FIELD	1288:20	1288:20	6	h
LEAF_NODE	1288:20	1288:20	7	h
LEAF_NODE	1288:21	1288:21	4	)
STATEMENTS	1288:23	1293:4	4	
LEAF_NODE	1288:23	1288:23	5	{
STATEMENTS	1289:1	1292:1	5	
SIMPLE_DECL	1289:1	1289:11	6	uint32 * bw ;
VAR_DECL	1289:1	1289:9	7	uint32 * bw
TYPE	1289:1	1289:7	8	uint32 *
TYPE_NAME	1289:1	1289:1	9	uint32
LEAF_NODE	1289:1	1289:1	10	uint32
POINTER	1289:7	1289:7	9	*
LEAF_NODE	1289:7	1289:7	10	*
NAME	1289:9	1289:9	8	bw
LEAF_NODE	1289:9	1289:9	9	bw
LEAF_NODE	1289:11	1289:11	7	;
EXPR_STATEMENT	1290:1	1290:46	6	UNROLL4 ( w , bw = PALmap [ * pp ++ ] , * cp ++ = * bw ++ ) ;
EXPR	1290:1	1290:1	7	UNROLL4 ( w , bw = PALmap [ * pp ++ ] , * cp ++ = * bw ++ )
FUNCTION_CALL	1290:1	1290:45	8	UNROLL4 ( w , bw = PALmap [ * pp ++ ] , * cp ++ = * bw ++ )
CALLEE	1290:1	1290:1	9	UNROLL4
LEAF_NODE	1290:1	1290:1	10	UNROLL4
LEAF_NODE	1290:8	1290:8	9	(
ARGUMENT	1290:9	1290:9	9	w
FIELD	1290:9	1290:9	10	w
LEAF_NODE	1290:9	1290:9	11	w
LEAF_NODE	1290:10	1290:10	9	,
ARGUMENT	1290:12	1290:12	9	bw = PALmap [ * pp ++ ]
ASSIGN	1290:12	1290:17	10	bw = PALmap [ * pp ++ ]
LVAL	1290:12	1290:12	11	bw
FIELD	1290:12	1290:12	12	bw
LEAF_NODE	1290:12	1290:12	13	bw
ASSIGN_OP	1290:15	1290:15	11	=
LEAF_NODE	1290:15	1290:15	12	=
RVAL	1290:17	1290:17	11	PALmap [ * pp ++ ]
FIELD	1290:17	1290:29	12	PALmap [ * pp ++ ]
LEAF_NODE	1290:17	1290:17	13	PALmap
LEAF_NODE	1290:23	1290:23	13	[
EXPR	1290:24	1290:24	13	* pp ++
UNARY_EXPR	1290:24	1290:25	14	* pp ++
UNARY_OPERATOR	1290:24	1290:24	15	*
LEAF_NODE	1290:24	1290:24	16	*
FIELD	1290:25	1290:27	15	pp ++
LEAF_NODE	1290:25	1290:25	16	pp
LEAF_NODE	1290:27	1290:27	16	++
LEAF_NODE	1290:29	1290:29	13	]
LEAF_NODE	1290:30	1290:30	9	,
ARGUMENT	1290:32	1290:32	9	* cp ++ = * bw ++
ASSIGN	1290:32	1290:40	10	* cp ++ = * bw ++
LVAL	1290:32	1290:32	11	* cp ++
UNARY_EXPR	1290:32	1290:33	12	* cp ++
UNARY_OPERATOR	1290:32	1290:32	13	*
LEAF_NODE	1290:32	1290:32	14	*
FIELD	1290:33	1290:35	13	cp ++
LEAF_NODE	1290:33	1290:33	14	cp
LEAF_NODE	1290:35	1290:35	14	++
ASSIGN_OP	1290:38	1290:38	11	=
LEAF_NODE	1290:38	1290:38	12	=
RVAL	1290:40	1290:40	11	* bw ++
UNARY_EXPR	1290:40	1290:41	12	* bw ++
UNARY_OPERATOR	1290:40	1290:40	13	*
LEAF_NODE	1290:40	1290:40	14	*
FIELD	1290:41	1290:43	13	bw ++
LEAF_NODE	1290:41	1290:41	14	bw
LEAF_NODE	1290:43	1290:43	14	++
LEAF_NODE	1290:45	1290:45	9	)
LEAF_NODE	1290:46	1290:46	7	;
EXPR_STATEMENT	1291:1	1291:13	6	cp += toskew ;
EXPR	1291:1	1291:1	7	cp += toskew
ASSIGN	1291:1	1291:7	8	cp += toskew
LVAL	1291:1	1291:1	9	cp
FIELD	1291:1	1291:1	10	cp
LEAF_NODE	1291:1	1291:1	11	cp
ASSIGN_OP	1291:4	1291:4	9	+=
LEAF_NODE	1291:4	1291:4	10	+=
RVAL	1291:7	1291:7	9	toskew
FIELD	1291:7	1291:7	10	toskew
LEAF_NODE	1291:7	1291:7	11	toskew
LEAF_NODE	1291:13	1291:13	7	;
EXPR_STATEMENT	1292:1	1292:15	6	pp += fromskew ;
EXPR	1292:1	1292:1	7	pp += fromskew
ASSIGN	1292:1	1292:7	8	pp += fromskew
LVAL	1292:1	1292:1	9	pp
FIELD	1292:1	1292:1	10	pp
LEAF_NODE	1292:1	1292:1	11	pp
ASSIGN_OP	1292:4	1292:4	9	+=
LEAF_NODE	1292:4	1292:4	10	+=
RVAL	1292:7	1292:7	9	fromskew
FIELD	1292:7	1292:7	10	fromskew
LEAF_NODE	1292:7	1292:7	11	fromskew
LEAF_NODE	1292:15	1292:15	7	;
LEAF_NODE	1293:4	1293:4	5	}
LEAF_NODE	1294:0	1294:0	2	}
FUNCTION_DEF	0:0	1311:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1299:0	1299:0	2	DECLAREContigPutFunc
LEAF_NODE	1299:0	1299:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1299:20	1299:36	2	( put1bitcmaptile )
LEAF_NODE	1299:20	1299:20	3	(
PARAMETER_DECL	1299:21	1299:21	3	put1bitcmaptile
LEAF_NODE	1299:21	1299:21	4	put1bitcmaptile
LEAF_NODE	1299:36	1299:36	3	)
LEAF_NODE	1300:0	1300:0	2	{
STATEMENTS	1301:4	1305:4	2	
SIMPLE_DECL	1301:4	1301:33	3	uint32 * PALmap ; PALmap = img -> PALmap ;
VAR_DECL	1301:4	1301:13	4	uint32 * PALmap ; PALmap = img -> PALmap
TYPE	1301:4	1301:11	5	uint32 *
TYPE_NAME	1301:4	1301:4	6	uint32
LEAF_NODE	1301:4	1301:4	7	uint32
POINTER	1301:11	1301:11	6	*
LEAF_NODE	1301:11	1301:11	7	*
NAME	1301:13	1301:13	5	PALmap
LEAF_NODE	1301:13	1301:13	6	PALmap
LEAF_NODE	0:0	0:0	5	;
INIT	1301:13	1301:13	5	PALmap = img -> PALmap
ASSIGN	1301:13	1301:22	6	PALmap = img -> PALmap
LVAL	1301:13	1301:13	7	PALmap
NAME	1301:13	1301:13	8	PALmap
LEAF_NODE	1301:13	1301:13	9	PALmap
ASSIGN_OP	1301:20	1301:20	7	=
LEAF_NODE	1301:20	1301:20	8	=
RVAL	1301:22	1301:22	7	img -> PALmap
FIELD	1301:22	1301:27	8	img -> PALmap
LEAF_NODE	1301:22	1301:22	9	img
LEAF_NODE	1301:25	1301:25	9	->
LEAF_NODE	1301:27	1301:27	9	PALmap
LEAF_NODE	1301:33	1301:33	4	;
EXPR_STATEMENT	1303:4	1303:12	3	( void ) x ;
EXPR	1303:4	1303:11	4	( void ) x
LEAF_NODE	1303:4	1303:4	5	(
TYPE_NAME	1303:5	1303:5	5	void
LEAF_NODE	1303:5	1303:5	6	void
LEAF_NODE	1303:9	1303:9	5	)
FIELD	1303:11	1303:11	5	x
LEAF_NODE	1303:11	1303:11	6	x
LEAF_NODE	1303:12	1303:12	4	;
EXPR_STATEMENT	1303:14	1303:22	3	( void ) y ;
EXPR	1303:14	1303:21	4	( void ) y
LEAF_NODE	1303:14	1303:14	5	(
TYPE_NAME	1303:15	1303:15	5	void
LEAF_NODE	1303:15	1303:15	6	void
LEAF_NODE	1303:19	1303:19	5	)
FIELD	1303:21	1303:21	5	y
LEAF_NODE	1303:21	1303:21	6	y
LEAF_NODE	1303:22	1303:22	4	;
EXPR_STATEMENT	1304:4	1304:17	3	fromskew /= 8 ;
EXPR	1304:4	1304:4	4	fromskew /= 8
ASSIGN	1304:4	1304:16	5	fromskew /= 8
LVAL	1304:4	1304:4	6	fromskew
FIELD	1304:4	1304:4	7	fromskew
LEAF_NODE	1304:4	1304:4	8	fromskew
ASSIGN_OP	1304:13	1304:13	6	/=
LEAF_NODE	1304:13	1304:13	7	/=
RVAL	1304:16	1304:16	6	8
FIELD	1304:16	1304:16	7	8
LEAF_NODE	1304:16	1304:16	8	8
LEAF_NODE	1304:17	1304:17	4	;
ITERATION	1305:4	1305:23	3	
KEYWORD	1305:4	1305:4	4	for
LEAF_NODE	1305:4	1305:4	5	for
LEAF_NODE	1305:7	1305:7	4	(
FOR_INIT	1305:9	1305:9	4	;
LEAF_NODE	1305:9	1305:9	5	;
CONDITION	1305:11	1305:11	4	h > 0
EXPR	1305:11	1305:15	5	h > 0
FIELD	1305:11	1305:11	6	h
LEAF_NODE	1305:11	1305:11	7	h
REL_OPERATOR	1305:13	1305:13	6	>
LEAF_NODE	1305:13	1305:13	7	>
FIELD	1305:15	1305:15	6	0
LEAF_NODE	1305:15	1305:15	7	0
LEAF_NODE	1305:16	1305:16	4	;
FOR_EXPR	1305:18	1305:18	4	-- h
EXPR	1305:18	1305:20	5	-- h
LEAF_NODE	1305:18	1305:18	6	--
FIELD	1305:20	1305:20	6	h
LEAF_NODE	1305:20	1305:20	7	h
LEAF_NODE	1305:21	1305:21	4	)
STATEMENTS	1305:23	1310:4	4	
LEAF_NODE	1305:23	1305:23	5	{
STATEMENTS	1306:1	1309:1	5	
SIMPLE_DECL	1306:1	1306:11	6	uint32 * bw ;
VAR_DECL	1306:1	1306:9	7	uint32 * bw
TYPE	1306:1	1306:7	8	uint32 *
TYPE_NAME	1306:1	1306:1	9	uint32
LEAF_NODE	1306:1	1306:1	10	uint32
POINTER	1306:7	1306:7	9	*
LEAF_NODE	1306:7	1306:7	10	*
NAME	1306:9	1306:9	8	bw
LEAF_NODE	1306:9	1306:9	9	bw
LEAF_NODE	1306:11	1306:11	7	;
EXPR_STATEMENT	1307:1	1307:46	6	UNROLL8 ( w , bw = PALmap [ * pp ++ ] , * cp ++ = * bw ++ ) ;
EXPR	1307:1	1307:1	7	UNROLL8 ( w , bw = PALmap [ * pp ++ ] , * cp ++ = * bw ++ )
FUNCTION_CALL	1307:1	1307:45	8	UNROLL8 ( w , bw = PALmap [ * pp ++ ] , * cp ++ = * bw ++ )
CALLEE	1307:1	1307:1	9	UNROLL8
LEAF_NODE	1307:1	1307:1	10	UNROLL8
LEAF_NODE	1307:8	1307:8	9	(
ARGUMENT	1307:9	1307:9	9	w
FIELD	1307:9	1307:9	10	w
LEAF_NODE	1307:9	1307:9	11	w
LEAF_NODE	1307:10	1307:10	9	,
ARGUMENT	1307:12	1307:12	9	bw = PALmap [ * pp ++ ]
ASSIGN	1307:12	1307:17	10	bw = PALmap [ * pp ++ ]
LVAL	1307:12	1307:12	11	bw
FIELD	1307:12	1307:12	12	bw
LEAF_NODE	1307:12	1307:12	13	bw
ASSIGN_OP	1307:15	1307:15	11	=
LEAF_NODE	1307:15	1307:15	12	=
RVAL	1307:17	1307:17	11	PALmap [ * pp ++ ]
FIELD	1307:17	1307:29	12	PALmap [ * pp ++ ]
LEAF_NODE	1307:17	1307:17	13	PALmap
LEAF_NODE	1307:23	1307:23	13	[
EXPR	1307:24	1307:24	13	* pp ++
UNARY_EXPR	1307:24	1307:25	14	* pp ++
UNARY_OPERATOR	1307:24	1307:24	15	*
LEAF_NODE	1307:24	1307:24	16	*
FIELD	1307:25	1307:27	15	pp ++
LEAF_NODE	1307:25	1307:25	16	pp
LEAF_NODE	1307:27	1307:27	16	++
LEAF_NODE	1307:29	1307:29	13	]
LEAF_NODE	1307:30	1307:30	9	,
ARGUMENT	1307:32	1307:32	9	* cp ++ = * bw ++
ASSIGN	1307:32	1307:40	10	* cp ++ = * bw ++
LVAL	1307:32	1307:32	11	* cp ++
UNARY_EXPR	1307:32	1307:33	12	* cp ++
UNARY_OPERATOR	1307:32	1307:32	13	*
LEAF_NODE	1307:32	1307:32	14	*
FIELD	1307:33	1307:35	13	cp ++
LEAF_NODE	1307:33	1307:33	14	cp
LEAF_NODE	1307:35	1307:35	14	++
ASSIGN_OP	1307:38	1307:38	11	=
LEAF_NODE	1307:38	1307:38	12	=
RVAL	1307:40	1307:40	11	* bw ++
UNARY_EXPR	1307:40	1307:41	12	* bw ++
UNARY_OPERATOR	1307:40	1307:40	13	*
LEAF_NODE	1307:40	1307:40	14	*
FIELD	1307:41	1307:43	13	bw ++
LEAF_NODE	1307:41	1307:41	14	bw
LEAF_NODE	1307:43	1307:43	14	++
LEAF_NODE	1307:45	1307:45	9	)
LEAF_NODE	1307:46	1307:46	7	;
EXPR_STATEMENT	1308:1	1308:13	6	cp += toskew ;
EXPR	1308:1	1308:1	7	cp += toskew
ASSIGN	1308:1	1308:7	8	cp += toskew
LVAL	1308:1	1308:1	9	cp
FIELD	1308:1	1308:1	10	cp
LEAF_NODE	1308:1	1308:1	11	cp
ASSIGN_OP	1308:4	1308:4	9	+=
LEAF_NODE	1308:4	1308:4	10	+=
RVAL	1308:7	1308:7	9	toskew
FIELD	1308:7	1308:7	10	toskew
LEAF_NODE	1308:7	1308:7	11	toskew
LEAF_NODE	1308:13	1308:13	7	;
EXPR_STATEMENT	1309:1	1309:15	6	pp += fromskew ;
EXPR	1309:1	1309:1	7	pp += fromskew
ASSIGN	1309:1	1309:7	8	pp += fromskew
LVAL	1309:1	1309:1	9	pp
FIELD	1309:1	1309:1	10	pp
LEAF_NODE	1309:1	1309:1	11	pp
ASSIGN_OP	1309:4	1309:4	9	+=
LEAF_NODE	1309:4	1309:4	10	+=
RVAL	1309:7	1309:7	9	fromskew
FIELD	1309:7	1309:7	10	fromskew
LEAF_NODE	1309:7	1309:7	11	fromskew
LEAF_NODE	1309:15	1309:15	7	;
LEAF_NODE	1310:4	1310:4	5	}
LEAF_NODE	1311:0	1311:0	2	}
FUNCTION_DEF	0:0	1331:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1316:0	1316:0	2	DECLAREContigPutFunc
LEAF_NODE	1316:0	1316:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1316:20	1316:32	2	( putgreytile )
LEAF_NODE	1316:20	1316:20	3	(
PARAMETER_DECL	1316:21	1316:21	3	putgreytile
LEAF_NODE	1316:21	1316:21	4	putgreytile
LEAF_NODE	1316:32	1316:32	3	)
LEAF_NODE	1317:0	1317:0	2	{
STATEMENTS	1318:4	1322:4	2	
SIMPLE_DECL	1318:4	1318:46	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1318:4	1318:8	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1318:4	1318:4	5	int
TYPE_NAME	1318:4	1318:4	6	int
LEAF_NODE	1318:4	1318:4	7	int
NAME	1318:8	1318:8	5	samplesperpixel
LEAF_NODE	1318:8	1318:8	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1318:8	1318:8	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1318:8	1318:26	6	samplesperpixel = img -> samplesperpixel
LVAL	1318:8	1318:8	7	samplesperpixel
NAME	1318:8	1318:8	8	samplesperpixel
LEAF_NODE	1318:8	1318:8	9	samplesperpixel
ASSIGN_OP	1318:24	1318:24	7	=
LEAF_NODE	1318:24	1318:24	8	=
RVAL	1318:26	1318:26	7	img -> samplesperpixel
FIELD	1318:26	1318:31	8	img -> samplesperpixel
LEAF_NODE	1318:26	1318:26	9	img
LEAF_NODE	1318:29	1318:29	9	->
LEAF_NODE	1318:31	1318:31	9	samplesperpixel
LEAF_NODE	1318:46	1318:46	4	;
SIMPLE_DECL	1319:4	1319:31	3	uint32 * BWmap ; BWmap = img -> BWmap ;
VAR_DECL	1319:4	1319:13	4	uint32 * BWmap ; BWmap = img -> BWmap
TYPE	1319:4	1319:11	5	uint32 *
TYPE_NAME	1319:4	1319:4	6	uint32
LEAF_NODE	1319:4	1319:4	7	uint32
POINTER	1319:11	1319:11	6	*
LEAF_NODE	1319:11	1319:11	7	*
NAME	1319:13	1319:13	5	BWmap
LEAF_NODE	1319:13	1319:13	6	BWmap
LEAF_NODE	0:0	0:0	5	;
INIT	1319:13	1319:13	5	BWmap = img -> BWmap
ASSIGN	1319:13	1319:21	6	BWmap = img -> BWmap
LVAL	1319:13	1319:13	7	BWmap
NAME	1319:13	1319:13	8	BWmap
LEAF_NODE	1319:13	1319:13	9	BWmap
ASSIGN_OP	1319:19	1319:19	7	=
LEAF_NODE	1319:19	1319:19	8	=
RVAL	1319:21	1319:21	7	img -> BWmap
FIELD	1319:21	1319:26	8	img -> BWmap
LEAF_NODE	1319:21	1319:21	9	img
LEAF_NODE	1319:24	1319:24	9	->
LEAF_NODE	1319:26	1319:26	9	BWmap
LEAF_NODE	1319:31	1319:31	4	;
EXPR_STATEMENT	1321:4	1321:12	3	( void ) y ;
EXPR	1321:4	1321:11	4	( void ) y
LEAF_NODE	1321:4	1321:4	5	(
TYPE_NAME	1321:5	1321:5	5	void
LEAF_NODE	1321:5	1321:5	6	void
LEAF_NODE	1321:9	1321:9	5	)
FIELD	1321:11	1321:11	5	y
LEAF_NODE	1321:11	1321:11	6	y
LEAF_NODE	1321:12	1321:12	4	;
ITERATION	1322:4	1322:23	3	
KEYWORD	1322:4	1322:4	4	for
LEAF_NODE	1322:4	1322:4	5	for
LEAF_NODE	1322:7	1322:7	4	(
FOR_INIT	1322:9	1322:9	4	;
LEAF_NODE	1322:9	1322:9	5	;
CONDITION	1322:11	1322:11	4	h > 0
EXPR	1322:11	1322:15	5	h > 0
FIELD	1322:11	1322:11	6	h
LEAF_NODE	1322:11	1322:11	7	h
REL_OPERATOR	1322:13	1322:13	6	>
LEAF_NODE	1322:13	1322:13	7	>
FIELD	1322:15	1322:15	6	0
LEAF_NODE	1322:15	1322:15	7	0
LEAF_NODE	1322:16	1322:16	4	;
FOR_EXPR	1322:18	1322:18	4	-- h
EXPR	1322:18	1322:20	5	-- h
LEAF_NODE	1322:18	1322:18	6	--
FIELD	1322:20	1322:20	6	h
LEAF_NODE	1322:20	1322:20	7	h
LEAF_NODE	1322:21	1322:21	4	)
STATEMENTS	1322:23	1330:4	4	
LEAF_NODE	1322:23	1322:23	5	{
STATEMENTS	1323:1	1329:1	5	
ITERATION	1323:1	1324:8	6	
KEYWORD	1323:1	1323:1	7	for
LEAF_NODE	1323:1	1323:1	8	for
LEAF_NODE	1323:5	1323:5	7	(
FOR_INIT	1323:6	1323:11	7	x = w ;
EXPR	1323:6	1323:6	8	x = w
ASSIGN	1323:6	1323:10	9	x = w
LVAL	1323:6	1323:6	10	x
FIELD	1323:6	1323:6	11	x
LEAF_NODE	1323:6	1323:6	12	x
ASSIGN_OP	1323:8	1323:8	10	=
LEAF_NODE	1323:8	1323:8	11	=
RVAL	1323:10	1323:10	10	w
FIELD	1323:10	1323:10	11	w
LEAF_NODE	1323:10	1323:10	12	w
LEAF_NODE	1323:11	1323:11	8	;
CONDITION	1323:13	1323:13	7	x > 0
EXPR	1323:13	1323:17	8	x > 0
FIELD	1323:13	1323:13	9	x
LEAF_NODE	1323:13	1323:13	10	x
REL_OPERATOR	1323:15	1323:15	9	>
LEAF_NODE	1323:15	1323:15	10	>
FIELD	1323:17	1323:17	9	0
LEAF_NODE	1323:17	1323:17	10	0
LEAF_NODE	1323:18	1323:18	7	;
FOR_EXPR	1323:20	1323:20	7	-- x
EXPR	1323:20	1323:22	8	-- x
LEAF_NODE	1323:20	1323:20	9	--
FIELD	1323:22	1323:22	9	x
LEAF_NODE	1323:22	1323:22	10	x
LEAF_NODE	1323:23	1323:23	7	)
STATEMENTS	1324:8	1327:8	7	
LEAF_NODE	1324:8	1324:8	8	{
STATEMENTS	1325:5	1326:12	8	
EXPR_STATEMENT	1325:5	1325:26	9	* cp ++ = BWmap [ * pp ] [ 0 ] ;
EXPR	1325:5	1325:5	10	* cp ++ = BWmap [ * pp ] [ 0 ]
ASSIGN	1325:5	1325:13	11	* cp ++ = BWmap [ * pp ] [ 0 ]
LVAL	1325:5	1325:5	12	* cp ++
UNARY_EXPR	1325:5	1325:6	13	* cp ++
UNARY_OPERATOR	1325:5	1325:5	14	*
LEAF_NODE	1325:5	1325:5	15	*
FIELD	1325:6	1325:8	14	cp ++
LEAF_NODE	1325:6	1325:6	15	cp
LEAF_NODE	1325:8	1325:8	15	++
ASSIGN_OP	1325:11	1325:11	12	=
LEAF_NODE	1325:11	1325:11	13	=
RVAL	1325:13	1325:13	12	BWmap [ * pp ] [ 0 ]
FIELD	1325:13	1325:25	13	BWmap [ * pp ] [ 0 ]
LEAF_NODE	1325:13	1325:13	14	BWmap
LEAF_NODE	1325:18	1325:18	14	[
EXPR	1325:19	1325:19	14	* pp
UNARY_EXPR	1325:19	1325:20	15	* pp
UNARY_OPERATOR	1325:19	1325:19	16	*
LEAF_NODE	1325:19	1325:19	17	*
FIELD	1325:20	1325:20	16	pp
LEAF_NODE	1325:20	1325:20	17	pp
LEAF_NODE	1325:22	1325:22	14	]
LEAF_NODE	1325:23	1325:23	14	[
EXPR	1325:24	1325:24	14	0
FIELD	1325:24	1325:24	15	0
LEAF_NODE	1325:24	1325:24	16	0
LEAF_NODE	1325:25	1325:25	14	]
LEAF_NODE	1325:26	1325:26	10	;
EXPR_STATEMENT	1326:12	1326:33	9	pp += samplesperpixel ;
EXPR	1326:12	1326:12	10	pp += samplesperpixel
ASSIGN	1326:12	1326:18	11	pp += samplesperpixel
LVAL	1326:12	1326:12	12	pp
FIELD	1326:12	1326:12	13	pp
LEAF_NODE	1326:12	1326:12	14	pp
ASSIGN_OP	1326:15	1326:15	12	+=
LEAF_NODE	1326:15	1326:15	13	+=
RVAL	1326:18	1326:18	12	samplesperpixel
FIELD	1326:18	1326:18	13	samplesperpixel
LEAF_NODE	1326:18	1326:18	14	samplesperpixel
LEAF_NODE	1326:33	1326:33	10	;
LEAF_NODE	1327:8	1327:8	8	}
EXPR_STATEMENT	1328:1	1328:13	6	cp += toskew ;
EXPR	1328:1	1328:1	7	cp += toskew
ASSIGN	1328:1	1328:7	8	cp += toskew
LVAL	1328:1	1328:1	9	cp
FIELD	1328:1	1328:1	10	cp
LEAF_NODE	1328:1	1328:1	11	cp
ASSIGN_OP	1328:4	1328:4	9	+=
LEAF_NODE	1328:4	1328:4	10	+=
RVAL	1328:7	1328:7	9	toskew
FIELD	1328:7	1328:7	10	toskew
LEAF_NODE	1328:7	1328:7	11	toskew
LEAF_NODE	1328:13	1328:13	7	;
EXPR_STATEMENT	1329:1	1329:15	6	pp += fromskew ;
EXPR	1329:1	1329:1	7	pp += fromskew
ASSIGN	1329:1	1329:7	8	pp += fromskew
LVAL	1329:1	1329:1	9	pp
FIELD	1329:1	1329:1	10	pp
LEAF_NODE	1329:1	1329:1	11	pp
ASSIGN_OP	1329:4	1329:4	9	+=
LEAF_NODE	1329:4	1329:4	10	+=
RVAL	1329:7	1329:7	9	fromskew
FIELD	1329:7	1329:7	10	fromskew
LEAF_NODE	1329:7	1329:7	11	fromskew
LEAF_NODE	1329:15	1329:15	7	;
LEAF_NODE	1330:4	1330:4	5	}
LEAF_NODE	1331:0	1331:0	2	}
FUNCTION_DEF	0:0	1351:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1336:0	1336:0	2	DECLAREContigPutFunc
LEAF_NODE	1336:0	1336:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1336:20	1336:33	2	( putagreytile )
LEAF_NODE	1336:20	1336:20	3	(
PARAMETER_DECL	1336:21	1336:21	3	putagreytile
LEAF_NODE	1336:21	1336:21	4	putagreytile
LEAF_NODE	1336:33	1336:33	3	)
LEAF_NODE	1337:0	1337:0	2	{
STATEMENTS	1338:4	1342:4	2	
SIMPLE_DECL	1338:4	1338:46	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1338:4	1338:8	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1338:4	1338:4	5	int
TYPE_NAME	1338:4	1338:4	6	int
LEAF_NODE	1338:4	1338:4	7	int
NAME	1338:8	1338:8	5	samplesperpixel
LEAF_NODE	1338:8	1338:8	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1338:8	1338:8	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1338:8	1338:26	6	samplesperpixel = img -> samplesperpixel
LVAL	1338:8	1338:8	7	samplesperpixel
NAME	1338:8	1338:8	8	samplesperpixel
LEAF_NODE	1338:8	1338:8	9	samplesperpixel
ASSIGN_OP	1338:24	1338:24	7	=
LEAF_NODE	1338:24	1338:24	8	=
RVAL	1338:26	1338:26	7	img -> samplesperpixel
FIELD	1338:26	1338:31	8	img -> samplesperpixel
LEAF_NODE	1338:26	1338:26	9	img
LEAF_NODE	1338:29	1338:29	9	->
LEAF_NODE	1338:31	1338:31	9	samplesperpixel
LEAF_NODE	1338:46	1338:46	4	;
SIMPLE_DECL	1339:4	1339:31	3	uint32 * BWmap ; BWmap = img -> BWmap ;
VAR_DECL	1339:4	1339:13	4	uint32 * BWmap ; BWmap = img -> BWmap
TYPE	1339:4	1339:11	5	uint32 *
TYPE_NAME	1339:4	1339:4	6	uint32
LEAF_NODE	1339:4	1339:4	7	uint32
POINTER	1339:11	1339:11	6	*
LEAF_NODE	1339:11	1339:11	7	*
NAME	1339:13	1339:13	5	BWmap
LEAF_NODE	1339:13	1339:13	6	BWmap
LEAF_NODE	0:0	0:0	5	;
INIT	1339:13	1339:13	5	BWmap = img -> BWmap
ASSIGN	1339:13	1339:21	6	BWmap = img -> BWmap
LVAL	1339:13	1339:13	7	BWmap
NAME	1339:13	1339:13	8	BWmap
LEAF_NODE	1339:13	1339:13	9	BWmap
ASSIGN_OP	1339:19	1339:19	7	=
LEAF_NODE	1339:19	1339:19	8	=
RVAL	1339:21	1339:21	7	img -> BWmap
FIELD	1339:21	1339:26	8	img -> BWmap
LEAF_NODE	1339:21	1339:21	9	img
LEAF_NODE	1339:24	1339:24	9	->
LEAF_NODE	1339:26	1339:26	9	BWmap
LEAF_NODE	1339:31	1339:31	4	;
EXPR_STATEMENT	1341:4	1341:12	3	( void ) y ;
EXPR	1341:4	1341:11	4	( void ) y
LEAF_NODE	1341:4	1341:4	5	(
TYPE_NAME	1341:5	1341:5	5	void
LEAF_NODE	1341:5	1341:5	6	void
LEAF_NODE	1341:9	1341:9	5	)
FIELD	1341:11	1341:11	5	y
LEAF_NODE	1341:11	1341:11	6	y
LEAF_NODE	1341:12	1341:12	4	;
ITERATION	1342:4	1342:23	3	
KEYWORD	1342:4	1342:4	4	for
LEAF_NODE	1342:4	1342:4	5	for
LEAF_NODE	1342:7	1342:7	4	(
FOR_INIT	1342:9	1342:9	4	;
LEAF_NODE	1342:9	1342:9	5	;
CONDITION	1342:11	1342:11	4	h > 0
EXPR	1342:11	1342:15	5	h > 0
FIELD	1342:11	1342:11	6	h
LEAF_NODE	1342:11	1342:11	7	h
REL_OPERATOR	1342:13	1342:13	6	>
LEAF_NODE	1342:13	1342:13	7	>
FIELD	1342:15	1342:15	6	0
LEAF_NODE	1342:15	1342:15	7	0
LEAF_NODE	1342:16	1342:16	4	;
FOR_EXPR	1342:18	1342:18	4	-- h
EXPR	1342:18	1342:20	5	-- h
LEAF_NODE	1342:18	1342:18	6	--
FIELD	1342:20	1342:20	6	h
LEAF_NODE	1342:20	1342:20	7	h
LEAF_NODE	1342:21	1342:21	4	)
STATEMENTS	1342:23	1350:4	4	
LEAF_NODE	1342:23	1342:23	5	{
STATEMENTS	1343:1	1349:1	5	
ITERATION	1343:1	1344:8	6	
KEYWORD	1343:1	1343:1	7	for
LEAF_NODE	1343:1	1343:1	8	for
LEAF_NODE	1343:5	1343:5	7	(
FOR_INIT	1343:6	1343:11	7	x = w ;
EXPR	1343:6	1343:6	8	x = w
ASSIGN	1343:6	1343:10	9	x = w
LVAL	1343:6	1343:6	10	x
FIELD	1343:6	1343:6	11	x
LEAF_NODE	1343:6	1343:6	12	x
ASSIGN_OP	1343:8	1343:8	10	=
LEAF_NODE	1343:8	1343:8	11	=
RVAL	1343:10	1343:10	10	w
FIELD	1343:10	1343:10	11	w
LEAF_NODE	1343:10	1343:10	12	w
LEAF_NODE	1343:11	1343:11	8	;
CONDITION	1343:13	1343:13	7	x > 0
EXPR	1343:13	1343:17	8	x > 0
FIELD	1343:13	1343:13	9	x
LEAF_NODE	1343:13	1343:13	10	x
REL_OPERATOR	1343:15	1343:15	9	>
LEAF_NODE	1343:15	1343:15	10	>
FIELD	1343:17	1343:17	9	0
LEAF_NODE	1343:17	1343:17	10	0
LEAF_NODE	1343:18	1343:18	7	;
FOR_EXPR	1343:20	1343:20	7	-- x
EXPR	1343:20	1343:22	8	-- x
LEAF_NODE	1343:20	1343:20	9	--
FIELD	1343:22	1343:22	9	x
LEAF_NODE	1343:22	1343:22	10	x
LEAF_NODE	1343:23	1343:23	7	)
STATEMENTS	1344:8	1347:8	7	
LEAF_NODE	1344:8	1344:8	8	{
STATEMENTS	1345:12	1346:12	8	
EXPR_STATEMENT	1345:12	1345:65	9	* cp ++ = BWmap [ * pp ] [ 0 ] & ( ( uint32 ) * ( pp + 1 ) << 24 | ~A1 ) ;
EXPR	1345:12	1345:12	10	* cp ++ = BWmap [ * pp ] [ 0 ] & ( ( uint32 ) * ( pp + 1 ) << 24 | ~A1 )
ASSIGN	1345:12	1345:20	11	* cp ++ = BWmap [ * pp ] [ 0 ] & ( ( uint32 ) * ( pp + 1 ) << 24 | ~A1 )
LVAL	1345:12	1345:12	12	* cp ++
UNARY_EXPR	1345:12	1345:13	13	* cp ++
UNARY_OPERATOR	1345:12	1345:12	14	*
LEAF_NODE	1345:12	1345:12	15	*
FIELD	1345:13	1345:15	14	cp ++
LEAF_NODE	1345:13	1345:13	15	cp
LEAF_NODE	1345:15	1345:15	15	++
ASSIGN_OP	1345:18	1345:18	12	=
LEAF_NODE	1345:18	1345:18	13	=
RVAL	1345:20	1345:64	12	BWmap [ * pp ] [ 0 ] & ( ( uint32 ) * ( pp + 1 ) << 24 | ~A1 )
FIELD	1345:20	1345:32	13	BWmap [ * pp ] [ 0 ]
LEAF_NODE	1345:20	1345:20	14	BWmap
LEAF_NODE	1345:25	1345:25	14	[
EXPR	1345:26	1345:26	14	* pp
UNARY_EXPR	1345:26	1345:27	15	* pp
UNARY_OPERATOR	1345:26	1345:26	16	*
LEAF_NODE	1345:26	1345:26	17	*
FIELD	1345:27	1345:27	16	pp
LEAF_NODE	1345:27	1345:27	17	pp
LEAF_NODE	1345:29	1345:29	14	]
LEAF_NODE	1345:30	1345:30	14	[
EXPR	1345:31	1345:31	14	0
FIELD	1345:31	1345:31	15	0
LEAF_NODE	1345:31	1345:31	16	0
LEAF_NODE	1345:32	1345:32	14	]
LEAF_NODE	1345:34	1345:34	13	&
LEAF_NODE	1345:36	1345:36	13	(
BIT_OR	1345:37	1345:61	13	( uint32 ) * ( pp + 1 ) << 24 | ~A1
BIT_OR_ELEM	1345:37	1345:56	14	( uint32 ) * ( pp + 1 ) << 24
LEAF_NODE	1345:37	1345:37	15	(
TYPE_NAME	1345:38	1345:38	15	uint32
LEAF_NODE	1345:38	1345:38	16	uint32
LEAF_NODE	1345:44	1345:44	15	)
UNARY_EXPR	1345:45	1345:51	15	* ( pp + 1 )
UNARY_OPERATOR	1345:45	1345:45	16	*
LEAF_NODE	1345:45	1345:45	17	*
LEAF_NODE	1345:46	1345:46	16	(
FIELD	1345:47	1345:47	16	pp
LEAF_NODE	1345:47	1345:47	17	pp
LEAF_NODE	1345:49	1345:49	16	+
FIELD	1345:50	1345:50	16	1
LEAF_NODE	1345:50	1345:50	17	1
LEAF_NODE	1345:51	1345:51	16	)
LEAF_NODE	1345:53	1345:53	15	<<
FIELD	1345:56	1345:56	15	24
LEAF_NODE	1345:56	1345:56	16	24
LEAF_NODE	1345:59	1345:59	14	|
BIT_OR_ELEM	1345:61	1345:61	14	~A1
FIELD	1345:61	1345:61	15	~A1
LEAF_NODE	1345:61	1345:61	16	~A1
LEAF_NODE	1345:64	1345:64	13	)
LEAF_NODE	1345:65	1345:65	10	;
EXPR_STATEMENT	1346:12	1346:33	9	pp += samplesperpixel ;
EXPR	1346:12	1346:12	10	pp += samplesperpixel
ASSIGN	1346:12	1346:18	11	pp += samplesperpixel
LVAL	1346:12	1346:12	12	pp
FIELD	1346:12	1346:12	13	pp
LEAF_NODE	1346:12	1346:12	14	pp
ASSIGN_OP	1346:15	1346:15	12	+=
LEAF_NODE	1346:15	1346:15	13	+=
RVAL	1346:18	1346:18	12	samplesperpixel
FIELD	1346:18	1346:18	13	samplesperpixel
LEAF_NODE	1346:18	1346:18	14	samplesperpixel
LEAF_NODE	1346:33	1346:33	10	;
LEAF_NODE	1347:8	1347:8	8	}
EXPR_STATEMENT	1348:1	1348:13	6	cp += toskew ;
EXPR	1348:1	1348:1	7	cp += toskew
ASSIGN	1348:1	1348:7	8	cp += toskew
LVAL	1348:1	1348:1	9	cp
FIELD	1348:1	1348:1	10	cp
LEAF_NODE	1348:1	1348:1	11	cp
ASSIGN_OP	1348:4	1348:4	9	+=
LEAF_NODE	1348:4	1348:4	10	+=
RVAL	1348:7	1348:7	9	toskew
FIELD	1348:7	1348:7	10	toskew
LEAF_NODE	1348:7	1348:7	11	toskew
LEAF_NODE	1348:13	1348:13	7	;
EXPR_STATEMENT	1349:1	1349:15	6	pp += fromskew ;
EXPR	1349:1	1349:1	7	pp += fromskew
ASSIGN	1349:1	1349:7	8	pp += fromskew
LVAL	1349:1	1349:1	9	pp
FIELD	1349:1	1349:1	10	pp
LEAF_NODE	1349:1	1349:1	11	pp
ASSIGN_OP	1349:4	1349:4	9	+=
LEAF_NODE	1349:4	1349:4	10	+=
RVAL	1349:7	1349:7	9	fromskew
FIELD	1349:7	1349:7	10	fromskew
LEAF_NODE	1349:7	1349:7	11	fromskew
LEAF_NODE	1349:15	1349:15	7	;
LEAF_NODE	1350:4	1350:4	5	}
LEAF_NODE	1351:0	1351:0	2	}
FUNCTION_DEF	0:0	1376:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1356:0	1356:0	2	DECLAREContigPutFunc
LEAF_NODE	1356:0	1356:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1356:20	1356:35	2	( put16bitbwtile )
LEAF_NODE	1356:20	1356:20	3	(
PARAMETER_DECL	1356:21	1356:21	3	put16bitbwtile
LEAF_NODE	1356:21	1356:21	4	put16bitbwtile
LEAF_NODE	1356:35	1356:35	3	)
LEAF_NODE	1357:0	1357:0	2	{
STATEMENTS	1358:4	1362:4	2	
SIMPLE_DECL	1358:4	1358:46	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1358:4	1358:8	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1358:4	1358:4	5	int
TYPE_NAME	1358:4	1358:4	6	int
LEAF_NODE	1358:4	1358:4	7	int
NAME	1358:8	1358:8	5	samplesperpixel
LEAF_NODE	1358:8	1358:8	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1358:8	1358:8	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1358:8	1358:26	6	samplesperpixel = img -> samplesperpixel
LVAL	1358:8	1358:8	7	samplesperpixel
NAME	1358:8	1358:8	8	samplesperpixel
LEAF_NODE	1358:8	1358:8	9	samplesperpixel
ASSIGN_OP	1358:24	1358:24	7	=
LEAF_NODE	1358:24	1358:24	8	=
RVAL	1358:26	1358:26	7	img -> samplesperpixel
FIELD	1358:26	1358:31	8	img -> samplesperpixel
LEAF_NODE	1358:26	1358:26	9	img
LEAF_NODE	1358:29	1358:29	9	->
LEAF_NODE	1358:31	1358:31	9	samplesperpixel
LEAF_NODE	1358:46	1358:46	4	;
SIMPLE_DECL	1359:4	1359:31	3	uint32 * BWmap ; BWmap = img -> BWmap ;
VAR_DECL	1359:4	1359:13	4	uint32 * BWmap ; BWmap = img -> BWmap
TYPE	1359:4	1359:11	5	uint32 *
TYPE_NAME	1359:4	1359:4	6	uint32
LEAF_NODE	1359:4	1359:4	7	uint32
POINTER	1359:11	1359:11	6	*
LEAF_NODE	1359:11	1359:11	7	*
NAME	1359:13	1359:13	5	BWmap
LEAF_NODE	1359:13	1359:13	6	BWmap
LEAF_NODE	0:0	0:0	5	;
INIT	1359:13	1359:13	5	BWmap = img -> BWmap
ASSIGN	1359:13	1359:21	6	BWmap = img -> BWmap
LVAL	1359:13	1359:13	7	BWmap
NAME	1359:13	1359:13	8	BWmap
LEAF_NODE	1359:13	1359:13	9	BWmap
ASSIGN_OP	1359:19	1359:19	7	=
LEAF_NODE	1359:19	1359:19	8	=
RVAL	1359:21	1359:21	7	img -> BWmap
FIELD	1359:21	1359:26	8	img -> BWmap
LEAF_NODE	1359:21	1359:21	9	img
LEAF_NODE	1359:24	1359:24	9	->
LEAF_NODE	1359:26	1359:26	9	BWmap
LEAF_NODE	1359:31	1359:31	4	;
EXPR_STATEMENT	1361:4	1361:12	3	( void ) y ;
EXPR	1361:4	1361:11	4	( void ) y
LEAF_NODE	1361:4	1361:4	5	(
TYPE_NAME	1361:5	1361:5	5	void
LEAF_NODE	1361:5	1361:5	6	void
LEAF_NODE	1361:9	1361:9	5	)
FIELD	1361:11	1361:11	5	y
LEAF_NODE	1361:11	1361:11	6	y
LEAF_NODE	1361:12	1361:12	4	;
ITERATION	1362:4	1362:23	3	
KEYWORD	1362:4	1362:4	4	for
LEAF_NODE	1362:4	1362:4	5	for
LEAF_NODE	1362:7	1362:7	4	(
FOR_INIT	1362:9	1362:9	4	;
LEAF_NODE	1362:9	1362:9	5	;
CONDITION	1362:11	1362:11	4	h > 0
EXPR	1362:11	1362:15	5	h > 0
FIELD	1362:11	1362:11	6	h
LEAF_NODE	1362:11	1362:11	7	h
REL_OPERATOR	1362:13	1362:13	6	>
LEAF_NODE	1362:13	1362:13	7	>
FIELD	1362:15	1362:15	6	0
LEAF_NODE	1362:15	1362:15	7	0
LEAF_NODE	1362:16	1362:16	4	;
FOR_EXPR	1362:18	1362:18	4	-- h
EXPR	1362:18	1362:20	5	-- h
LEAF_NODE	1362:18	1362:18	6	--
FIELD	1362:20	1362:20	6	h
LEAF_NODE	1362:20	1362:20	7	h
LEAF_NODE	1362:21	1362:21	4	)
STATEMENTS	1362:23	1375:4	4	
LEAF_NODE	1362:23	1362:23	5	{
STATEMENTS	1363:8	1374:1	5	
SIMPLE_DECL	1363:8	1363:34	6	uint16 * wp ; wp = ( uint16 * ) pp ;
VAR_DECL	1363:8	1363:16	7	uint16 * wp ; wp = ( uint16 * ) pp
TYPE	1363:8	1363:15	8	uint16 *
TYPE_NAME	1363:8	1363:8	9	uint16
LEAF_NODE	1363:8	1363:8	10	uint16
POINTER	1363:15	1363:15	9	*
LEAF_NODE	1363:15	1363:15	10	*
NAME	1363:16	1363:16	8	wp
LEAF_NODE	1363:16	1363:16	9	wp
LEAF_NODE	0:0	0:0	8	;
INIT	1363:16	1363:16	8	wp = ( uint16 * ) pp
ASSIGN	1363:16	1363:21	9	wp = ( uint16 * ) pp
LVAL	1363:16	1363:16	10	wp
NAME	1363:16	1363:16	11	wp
LEAF_NODE	1363:16	1363:16	12	wp
ASSIGN_OP	1363:19	1363:19	10	=
LEAF_NODE	1363:19	1363:19	11	=
RVAL	1363:21	1363:32	10	( uint16 * ) pp
LEAF_NODE	1363:21	1363:21	11	(
TYPE_NAME	1363:22	1363:22	11	uint16
LEAF_NODE	1363:22	1363:22	12	uint16
LEAF_NODE	1363:29	1363:29	11	*
LEAF_NODE	1363:30	1363:30	11	)
FIELD	1363:32	1363:32	11	pp
LEAF_NODE	1363:32	1363:32	12	pp
LEAF_NODE	1363:34	1363:34	7	;
ITERATION	1365:1	1366:8	6	
KEYWORD	1365:1	1365:1	7	for
LEAF_NODE	1365:1	1365:1	8	for
LEAF_NODE	1365:5	1365:5	7	(
FOR_INIT	1365:6	1365:11	7	x = w ;
EXPR	1365:6	1365:6	8	x = w
ASSIGN	1365:6	1365:10	9	x = w
LVAL	1365:6	1365:6	10	x
FIELD	1365:6	1365:6	11	x
LEAF_NODE	1365:6	1365:6	12	x
ASSIGN_OP	1365:8	1365:8	10	=
LEAF_NODE	1365:8	1365:8	11	=
RVAL	1365:10	1365:10	10	w
FIELD	1365:10	1365:10	11	w
LEAF_NODE	1365:10	1365:10	12	w
LEAF_NODE	1365:11	1365:11	8	;
CONDITION	1365:13	1365:13	7	x > 0
EXPR	1365:13	1365:17	8	x > 0
FIELD	1365:13	1365:13	9	x
LEAF_NODE	1365:13	1365:13	10	x
REL_OPERATOR	1365:15	1365:15	9	>
LEAF_NODE	1365:15	1365:15	10	>
FIELD	1365:17	1365:17	9	0
LEAF_NODE	1365:17	1365:17	10	0
LEAF_NODE	1365:18	1365:18	7	;
FOR_EXPR	1365:20	1365:20	7	-- x
EXPR	1365:20	1365:22	8	-- x
LEAF_NODE	1365:20	1365:20	9	--
FIELD	1365:22	1365:22	9	x
LEAF_NODE	1365:22	1365:22	10	x
LEAF_NODE	1365:23	1365:23	7	)
STATEMENTS	1366:8	1372:8	7	
LEAF_NODE	1366:8	1366:8	8	{
STATEMENTS	1369:5	1371:12	8	
EXPR_STATEMENT	1369:5	1369:31	9	* cp ++ = BWmap [ * wp >> 8 ] [ 0 ] ;
EXPR	1369:5	1369:5	10	* cp ++ = BWmap [ * wp >> 8 ] [ 0 ]
ASSIGN	1369:5	1369:13	11	* cp ++ = BWmap [ * wp >> 8 ] [ 0 ]
LVAL	1369:5	1369:5	12	* cp ++
UNARY_EXPR	1369:5	1369:6	13	* cp ++
UNARY_OPERATOR	1369:5	1369:5	14	*
LEAF_NODE	1369:5	1369:5	15	*
FIELD	1369:6	1369:8	14	cp ++
LEAF_NODE	1369:6	1369:6	15	cp
LEAF_NODE	1369:8	1369:8	15	++
ASSIGN_OP	1369:11	1369:11	12	=
LEAF_NODE	1369:11	1369:11	13	=
RVAL	1369:13	1369:13	12	BWmap [ * wp >> 8 ] [ 0 ]
FIELD	1369:13	1369:30	13	BWmap [ * wp >> 8 ] [ 0 ]
LEAF_NODE	1369:13	1369:13	14	BWmap
LEAF_NODE	1369:18	1369:18	14	[
EXPR	1369:19	1369:26	14	* wp >> 8
UNARY_EXPR	1369:19	1369:20	15	* wp
UNARY_OPERATOR	1369:19	1369:19	16	*
LEAF_NODE	1369:19	1369:19	17	*
FIELD	1369:20	1369:20	16	wp
LEAF_NODE	1369:20	1369:20	17	wp
LEAF_NODE	1369:23	1369:23	15	>>
FIELD	1369:26	1369:26	15	8
LEAF_NODE	1369:26	1369:26	16	8
LEAF_NODE	1369:27	1369:27	14	]
LEAF_NODE	1369:28	1369:28	14	[
EXPR	1369:29	1369:29	14	0
FIELD	1369:29	1369:29	15	0
LEAF_NODE	1369:29	1369:29	16	0
LEAF_NODE	1369:30	1369:30	14	]
LEAF_NODE	1369:31	1369:31	10	;
EXPR_STATEMENT	1370:12	1370:37	9	pp += 2 * samplesperpixel ;
EXPR	1370:12	1370:12	10	pp += 2 * samplesperpixel
ASSIGN	1370:12	1370:18	11	pp += 2 * samplesperpixel
LVAL	1370:12	1370:12	12	pp
FIELD	1370:12	1370:12	13	pp
LEAF_NODE	1370:12	1370:12	14	pp
ASSIGN_OP	1370:15	1370:15	12	+=
LEAF_NODE	1370:15	1370:15	13	+=
RVAL	1370:18	1370:22	12	2 * samplesperpixel
FIELD	1370:18	1370:18	13	2
LEAF_NODE	1370:18	1370:18	14	2
LEAF_NODE	1370:20	1370:20	13	*
FIELD	1370:22	1370:22	13	samplesperpixel
LEAF_NODE	1370:22	1370:22	14	samplesperpixel
LEAF_NODE	1370:37	1370:37	10	;
EXPR_STATEMENT	1371:12	1371:33	9	wp += samplesperpixel ;
EXPR	1371:12	1371:12	10	wp += samplesperpixel
ASSIGN	1371:12	1371:18	11	wp += samplesperpixel
LVAL	1371:12	1371:12	12	wp
FIELD	1371:12	1371:12	13	wp
LEAF_NODE	1371:12	1371:12	14	wp
ASSIGN_OP	1371:15	1371:15	12	+=
LEAF_NODE	1371:15	1371:15	13	+=
RVAL	1371:18	1371:18	12	samplesperpixel
FIELD	1371:18	1371:18	13	samplesperpixel
LEAF_NODE	1371:18	1371:18	14	samplesperpixel
LEAF_NODE	1371:33	1371:33	10	;
LEAF_NODE	1372:8	1372:8	8	}
EXPR_STATEMENT	1373:1	1373:13	6	cp += toskew ;
EXPR	1373:1	1373:1	7	cp += toskew
ASSIGN	1373:1	1373:7	8	cp += toskew
LVAL	1373:1	1373:1	9	cp
FIELD	1373:1	1373:1	10	cp
LEAF_NODE	1373:1	1373:1	11	cp
ASSIGN_OP	1373:4	1373:4	9	+=
LEAF_NODE	1373:4	1373:4	10	+=
RVAL	1373:7	1373:7	9	toskew
FIELD	1373:7	1373:7	10	toskew
LEAF_NODE	1373:7	1373:7	11	toskew
LEAF_NODE	1373:13	1373:13	7	;
EXPR_STATEMENT	1374:1	1374:15	6	pp += fromskew ;
EXPR	1374:1	1374:1	7	pp += fromskew
ASSIGN	1374:1	1374:7	8	pp += fromskew
LVAL	1374:1	1374:1	9	pp
FIELD	1374:1	1374:1	10	pp
LEAF_NODE	1374:1	1374:1	11	pp
ASSIGN_OP	1374:4	1374:4	9	+=
LEAF_NODE	1374:4	1374:4	10	+=
RVAL	1374:7	1374:7	9	fromskew
FIELD	1374:7	1374:7	10	fromskew
LEAF_NODE	1374:7	1374:7	11	fromskew
LEAF_NODE	1374:15	1374:15	7	;
LEAF_NODE	1375:4	1375:4	5	}
LEAF_NODE	1376:0	1376:0	2	}
FUNCTION_DEF	0:0	1393:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1381:0	1381:0	2	DECLAREContigPutFunc
LEAF_NODE	1381:0	1381:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1381:20	1381:34	2	( put1bitbwtile )
LEAF_NODE	1381:20	1381:20	3	(
PARAMETER_DECL	1381:21	1381:21	3	put1bitbwtile
LEAF_NODE	1381:21	1381:21	4	put1bitbwtile
LEAF_NODE	1381:34	1381:34	3	)
LEAF_NODE	1382:0	1382:0	2	{
STATEMENTS	1383:4	1387:4	2	
SIMPLE_DECL	1383:4	1383:31	3	uint32 * BWmap ; BWmap = img -> BWmap ;
VAR_DECL	1383:4	1383:13	4	uint32 * BWmap ; BWmap = img -> BWmap
TYPE	1383:4	1383:11	5	uint32 *
TYPE_NAME	1383:4	1383:4	6	uint32
LEAF_NODE	1383:4	1383:4	7	uint32
POINTER	1383:11	1383:11	6	*
LEAF_NODE	1383:11	1383:11	7	*
NAME	1383:13	1383:13	5	BWmap
LEAF_NODE	1383:13	1383:13	6	BWmap
LEAF_NODE	0:0	0:0	5	;
INIT	1383:13	1383:13	5	BWmap = img -> BWmap
ASSIGN	1383:13	1383:21	6	BWmap = img -> BWmap
LVAL	1383:13	1383:13	7	BWmap
NAME	1383:13	1383:13	8	BWmap
LEAF_NODE	1383:13	1383:13	9	BWmap
ASSIGN_OP	1383:19	1383:19	7	=
LEAF_NODE	1383:19	1383:19	8	=
RVAL	1383:21	1383:21	7	img -> BWmap
FIELD	1383:21	1383:26	8	img -> BWmap
LEAF_NODE	1383:21	1383:21	9	img
LEAF_NODE	1383:24	1383:24	9	->
LEAF_NODE	1383:26	1383:26	9	BWmap
LEAF_NODE	1383:31	1383:31	4	;
EXPR_STATEMENT	1385:4	1385:12	3	( void ) x ;
EXPR	1385:4	1385:11	4	( void ) x
LEAF_NODE	1385:4	1385:4	5	(
TYPE_NAME	1385:5	1385:5	5	void
LEAF_NODE	1385:5	1385:5	6	void
LEAF_NODE	1385:9	1385:9	5	)
FIELD	1385:11	1385:11	5	x
LEAF_NODE	1385:11	1385:11	6	x
LEAF_NODE	1385:12	1385:12	4	;
EXPR_STATEMENT	1385:14	1385:22	3	( void ) y ;
EXPR	1385:14	1385:21	4	( void ) y
LEAF_NODE	1385:14	1385:14	5	(
TYPE_NAME	1385:15	1385:15	5	void
LEAF_NODE	1385:15	1385:15	6	void
LEAF_NODE	1385:19	1385:19	5	)
FIELD	1385:21	1385:21	5	y
LEAF_NODE	1385:21	1385:21	6	y
LEAF_NODE	1385:22	1385:22	4	;
EXPR_STATEMENT	1386:4	1386:17	3	fromskew /= 8 ;
EXPR	1386:4	1386:4	4	fromskew /= 8
ASSIGN	1386:4	1386:16	5	fromskew /= 8
LVAL	1386:4	1386:4	6	fromskew
FIELD	1386:4	1386:4	7	fromskew
LEAF_NODE	1386:4	1386:4	8	fromskew
ASSIGN_OP	1386:13	1386:13	6	/=
LEAF_NODE	1386:13	1386:13	7	/=
RVAL	1386:16	1386:16	6	8
FIELD	1386:16	1386:16	7	8
LEAF_NODE	1386:16	1386:16	8	8
LEAF_NODE	1386:17	1386:17	4	;
ITERATION	1387:4	1387:23	3	
KEYWORD	1387:4	1387:4	4	for
LEAF_NODE	1387:4	1387:4	5	for
LEAF_NODE	1387:7	1387:7	4	(
FOR_INIT	1387:9	1387:9	4	;
LEAF_NODE	1387:9	1387:9	5	;
CONDITION	1387:11	1387:11	4	h > 0
EXPR	1387:11	1387:15	5	h > 0
FIELD	1387:11	1387:11	6	h
LEAF_NODE	1387:11	1387:11	7	h
REL_OPERATOR	1387:13	1387:13	6	>
LEAF_NODE	1387:13	1387:13	7	>
FIELD	1387:15	1387:15	6	0
LEAF_NODE	1387:15	1387:15	7	0
LEAF_NODE	1387:16	1387:16	4	;
FOR_EXPR	1387:18	1387:18	4	-- h
EXPR	1387:18	1387:20	5	-- h
LEAF_NODE	1387:18	1387:18	6	--
FIELD	1387:20	1387:20	6	h
LEAF_NODE	1387:20	1387:20	7	h
LEAF_NODE	1387:21	1387:21	4	)
STATEMENTS	1387:23	1392:4	4	
LEAF_NODE	1387:23	1387:23	5	{
STATEMENTS	1388:1	1391:1	5	
SIMPLE_DECL	1388:1	1388:11	6	uint32 * bw ;
VAR_DECL	1388:1	1388:9	7	uint32 * bw
TYPE	1388:1	1388:7	8	uint32 *
TYPE_NAME	1388:1	1388:1	9	uint32
LEAF_NODE	1388:1	1388:1	10	uint32
POINTER	1388:7	1388:7	9	*
LEAF_NODE	1388:7	1388:7	10	*
NAME	1388:9	1388:9	8	bw
LEAF_NODE	1388:9	1388:9	9	bw
LEAF_NODE	1388:11	1388:11	7	;
EXPR_STATEMENT	1389:1	1389:45	6	UNROLL8 ( w , bw = BWmap [ * pp ++ ] , * cp ++ = * bw ++ ) ;
EXPR	1389:1	1389:1	7	UNROLL8 ( w , bw = BWmap [ * pp ++ ] , * cp ++ = * bw ++ )
FUNCTION_CALL	1389:1	1389:44	8	UNROLL8 ( w , bw = BWmap [ * pp ++ ] , * cp ++ = * bw ++ )
CALLEE	1389:1	1389:1	9	UNROLL8
LEAF_NODE	1389:1	1389:1	10	UNROLL8
LEAF_NODE	1389:8	1389:8	9	(
ARGUMENT	1389:9	1389:9	9	w
FIELD	1389:9	1389:9	10	w
LEAF_NODE	1389:9	1389:9	11	w
LEAF_NODE	1389:10	1389:10	9	,
ARGUMENT	1389:12	1389:12	9	bw = BWmap [ * pp ++ ]
ASSIGN	1389:12	1389:17	10	bw = BWmap [ * pp ++ ]
LVAL	1389:12	1389:12	11	bw
FIELD	1389:12	1389:12	12	bw
LEAF_NODE	1389:12	1389:12	13	bw
ASSIGN_OP	1389:15	1389:15	11	=
LEAF_NODE	1389:15	1389:15	12	=
RVAL	1389:17	1389:17	11	BWmap [ * pp ++ ]
FIELD	1389:17	1389:28	12	BWmap [ * pp ++ ]
LEAF_NODE	1389:17	1389:17	13	BWmap
LEAF_NODE	1389:22	1389:22	13	[
EXPR	1389:23	1389:23	13	* pp ++
UNARY_EXPR	1389:23	1389:24	14	* pp ++
UNARY_OPERATOR	1389:23	1389:23	15	*
LEAF_NODE	1389:23	1389:23	16	*
FIELD	1389:24	1389:26	15	pp ++
LEAF_NODE	1389:24	1389:24	16	pp
LEAF_NODE	1389:26	1389:26	16	++
LEAF_NODE	1389:28	1389:28	13	]
LEAF_NODE	1389:29	1389:29	9	,
ARGUMENT	1389:31	1389:31	9	* cp ++ = * bw ++
ASSIGN	1389:31	1389:39	10	* cp ++ = * bw ++
LVAL	1389:31	1389:31	11	* cp ++
UNARY_EXPR	1389:31	1389:32	12	* cp ++
UNARY_OPERATOR	1389:31	1389:31	13	*
LEAF_NODE	1389:31	1389:31	14	*
FIELD	1389:32	1389:34	13	cp ++
LEAF_NODE	1389:32	1389:32	14	cp
LEAF_NODE	1389:34	1389:34	14	++
ASSIGN_OP	1389:37	1389:37	11	=
LEAF_NODE	1389:37	1389:37	12	=
RVAL	1389:39	1389:39	11	* bw ++
UNARY_EXPR	1389:39	1389:40	12	* bw ++
UNARY_OPERATOR	1389:39	1389:39	13	*
LEAF_NODE	1389:39	1389:39	14	*
FIELD	1389:40	1389:42	13	bw ++
LEAF_NODE	1389:40	1389:40	14	bw
LEAF_NODE	1389:42	1389:42	14	++
LEAF_NODE	1389:44	1389:44	9	)
LEAF_NODE	1389:45	1389:45	7	;
EXPR_STATEMENT	1390:1	1390:13	6	cp += toskew ;
EXPR	1390:1	1390:1	7	cp += toskew
ASSIGN	1390:1	1390:7	8	cp += toskew
LVAL	1390:1	1390:1	9	cp
FIELD	1390:1	1390:1	10	cp
LEAF_NODE	1390:1	1390:1	11	cp
ASSIGN_OP	1390:4	1390:4	9	+=
LEAF_NODE	1390:4	1390:4	10	+=
RVAL	1390:7	1390:7	9	toskew
FIELD	1390:7	1390:7	10	toskew
LEAF_NODE	1390:7	1390:7	11	toskew
LEAF_NODE	1390:13	1390:13	7	;
EXPR_STATEMENT	1391:1	1391:15	6	pp += fromskew ;
EXPR	1391:1	1391:1	7	pp += fromskew
ASSIGN	1391:1	1391:7	8	pp += fromskew
LVAL	1391:1	1391:1	9	pp
FIELD	1391:1	1391:1	10	pp
LEAF_NODE	1391:1	1391:1	11	pp
ASSIGN_OP	1391:4	1391:4	9	+=
LEAF_NODE	1391:4	1391:4	10	+=
RVAL	1391:7	1391:7	9	fromskew
FIELD	1391:7	1391:7	10	fromskew
LEAF_NODE	1391:7	1391:7	11	fromskew
LEAF_NODE	1391:15	1391:15	7	;
LEAF_NODE	1392:4	1392:4	5	}
LEAF_NODE	1393:0	1393:0	2	}
FUNCTION_DEF	0:0	1410:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1398:0	1398:0	2	DECLAREContigPutFunc
LEAF_NODE	1398:0	1398:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1398:20	1398:34	2	( put2bitbwtile )
LEAF_NODE	1398:20	1398:20	3	(
PARAMETER_DECL	1398:21	1398:21	3	put2bitbwtile
LEAF_NODE	1398:21	1398:21	4	put2bitbwtile
LEAF_NODE	1398:34	1398:34	3	)
LEAF_NODE	1399:0	1399:0	2	{
STATEMENTS	1400:4	1404:4	2	
SIMPLE_DECL	1400:4	1400:31	3	uint32 * BWmap ; BWmap = img -> BWmap ;
VAR_DECL	1400:4	1400:13	4	uint32 * BWmap ; BWmap = img -> BWmap
TYPE	1400:4	1400:11	5	uint32 *
TYPE_NAME	1400:4	1400:4	6	uint32
LEAF_NODE	1400:4	1400:4	7	uint32
POINTER	1400:11	1400:11	6	*
LEAF_NODE	1400:11	1400:11	7	*
NAME	1400:13	1400:13	5	BWmap
LEAF_NODE	1400:13	1400:13	6	BWmap
LEAF_NODE	0:0	0:0	5	;
INIT	1400:13	1400:13	5	BWmap = img -> BWmap
ASSIGN	1400:13	1400:21	6	BWmap = img -> BWmap
LVAL	1400:13	1400:13	7	BWmap
NAME	1400:13	1400:13	8	BWmap
LEAF_NODE	1400:13	1400:13	9	BWmap
ASSIGN_OP	1400:19	1400:19	7	=
LEAF_NODE	1400:19	1400:19	8	=
RVAL	1400:21	1400:21	7	img -> BWmap
FIELD	1400:21	1400:26	8	img -> BWmap
LEAF_NODE	1400:21	1400:21	9	img
LEAF_NODE	1400:24	1400:24	9	->
LEAF_NODE	1400:26	1400:26	9	BWmap
LEAF_NODE	1400:31	1400:31	4	;
EXPR_STATEMENT	1402:4	1402:12	3	( void ) x ;
EXPR	1402:4	1402:11	4	( void ) x
LEAF_NODE	1402:4	1402:4	5	(
TYPE_NAME	1402:5	1402:5	5	void
LEAF_NODE	1402:5	1402:5	6	void
LEAF_NODE	1402:9	1402:9	5	)
FIELD	1402:11	1402:11	5	x
LEAF_NODE	1402:11	1402:11	6	x
LEAF_NODE	1402:12	1402:12	4	;
EXPR_STATEMENT	1402:14	1402:22	3	( void ) y ;
EXPR	1402:14	1402:21	4	( void ) y
LEAF_NODE	1402:14	1402:14	5	(
TYPE_NAME	1402:15	1402:15	5	void
LEAF_NODE	1402:15	1402:15	6	void
LEAF_NODE	1402:19	1402:19	5	)
FIELD	1402:21	1402:21	5	y
LEAF_NODE	1402:21	1402:21	6	y
LEAF_NODE	1402:22	1402:22	4	;
EXPR_STATEMENT	1403:4	1403:17	3	fromskew /= 4 ;
EXPR	1403:4	1403:4	4	fromskew /= 4
ASSIGN	1403:4	1403:16	5	fromskew /= 4
LVAL	1403:4	1403:4	6	fromskew
FIELD	1403:4	1403:4	7	fromskew
LEAF_NODE	1403:4	1403:4	8	fromskew
ASSIGN_OP	1403:13	1403:13	6	/=
LEAF_NODE	1403:13	1403:13	7	/=
RVAL	1403:16	1403:16	6	4
FIELD	1403:16	1403:16	7	4
LEAF_NODE	1403:16	1403:16	8	4
LEAF_NODE	1403:17	1403:17	4	;
ITERATION	1404:4	1404:23	3	
KEYWORD	1404:4	1404:4	4	for
LEAF_NODE	1404:4	1404:4	5	for
LEAF_NODE	1404:7	1404:7	4	(
FOR_INIT	1404:9	1404:9	4	;
LEAF_NODE	1404:9	1404:9	5	;
CONDITION	1404:11	1404:11	4	h > 0
EXPR	1404:11	1404:15	5	h > 0
FIELD	1404:11	1404:11	6	h
LEAF_NODE	1404:11	1404:11	7	h
REL_OPERATOR	1404:13	1404:13	6	>
LEAF_NODE	1404:13	1404:13	7	>
FIELD	1404:15	1404:15	6	0
LEAF_NODE	1404:15	1404:15	7	0
LEAF_NODE	1404:16	1404:16	4	;
FOR_EXPR	1404:18	1404:18	4	-- h
EXPR	1404:18	1404:20	5	-- h
LEAF_NODE	1404:18	1404:18	6	--
FIELD	1404:20	1404:20	6	h
LEAF_NODE	1404:20	1404:20	7	h
LEAF_NODE	1404:21	1404:21	4	)
STATEMENTS	1404:23	1409:4	4	
LEAF_NODE	1404:23	1404:23	5	{
STATEMENTS	1405:1	1408:1	5	
SIMPLE_DECL	1405:1	1405:11	6	uint32 * bw ;
VAR_DECL	1405:1	1405:9	7	uint32 * bw
TYPE	1405:1	1405:7	8	uint32 *
TYPE_NAME	1405:1	1405:1	9	uint32
LEAF_NODE	1405:1	1405:1	10	uint32
POINTER	1405:7	1405:7	9	*
LEAF_NODE	1405:7	1405:7	10	*
NAME	1405:9	1405:9	8	bw
LEAF_NODE	1405:9	1405:9	9	bw
LEAF_NODE	1405:11	1405:11	7	;
EXPR_STATEMENT	1406:1	1406:45	6	UNROLL4 ( w , bw = BWmap [ * pp ++ ] , * cp ++ = * bw ++ ) ;
EXPR	1406:1	1406:1	7	UNROLL4 ( w , bw = BWmap [ * pp ++ ] , * cp ++ = * bw ++ )
FUNCTION_CALL	1406:1	1406:44	8	UNROLL4 ( w , bw = BWmap [ * pp ++ ] , * cp ++ = * bw ++ )
CALLEE	1406:1	1406:1	9	UNROLL4
LEAF_NODE	1406:1	1406:1	10	UNROLL4
LEAF_NODE	1406:8	1406:8	9	(
ARGUMENT	1406:9	1406:9	9	w
FIELD	1406:9	1406:9	10	w
LEAF_NODE	1406:9	1406:9	11	w
LEAF_NODE	1406:10	1406:10	9	,
ARGUMENT	1406:12	1406:12	9	bw = BWmap [ * pp ++ ]
ASSIGN	1406:12	1406:17	10	bw = BWmap [ * pp ++ ]
LVAL	1406:12	1406:12	11	bw
FIELD	1406:12	1406:12	12	bw
LEAF_NODE	1406:12	1406:12	13	bw
ASSIGN_OP	1406:15	1406:15	11	=
LEAF_NODE	1406:15	1406:15	12	=
RVAL	1406:17	1406:17	11	BWmap [ * pp ++ ]
FIELD	1406:17	1406:28	12	BWmap [ * pp ++ ]
LEAF_NODE	1406:17	1406:17	13	BWmap
LEAF_NODE	1406:22	1406:22	13	[
EXPR	1406:23	1406:23	13	* pp ++
UNARY_EXPR	1406:23	1406:24	14	* pp ++
UNARY_OPERATOR	1406:23	1406:23	15	*
LEAF_NODE	1406:23	1406:23	16	*
FIELD	1406:24	1406:26	15	pp ++
LEAF_NODE	1406:24	1406:24	16	pp
LEAF_NODE	1406:26	1406:26	16	++
LEAF_NODE	1406:28	1406:28	13	]
LEAF_NODE	1406:29	1406:29	9	,
ARGUMENT	1406:31	1406:31	9	* cp ++ = * bw ++
ASSIGN	1406:31	1406:39	10	* cp ++ = * bw ++
LVAL	1406:31	1406:31	11	* cp ++
UNARY_EXPR	1406:31	1406:32	12	* cp ++
UNARY_OPERATOR	1406:31	1406:31	13	*
LEAF_NODE	1406:31	1406:31	14	*
FIELD	1406:32	1406:34	13	cp ++
LEAF_NODE	1406:32	1406:32	14	cp
LEAF_NODE	1406:34	1406:34	14	++
ASSIGN_OP	1406:37	1406:37	11	=
LEAF_NODE	1406:37	1406:37	12	=
RVAL	1406:39	1406:39	11	* bw ++
UNARY_EXPR	1406:39	1406:40	12	* bw ++
UNARY_OPERATOR	1406:39	1406:39	13	*
LEAF_NODE	1406:39	1406:39	14	*
FIELD	1406:40	1406:42	13	bw ++
LEAF_NODE	1406:40	1406:40	14	bw
LEAF_NODE	1406:42	1406:42	14	++
LEAF_NODE	1406:44	1406:44	9	)
LEAF_NODE	1406:45	1406:45	7	;
EXPR_STATEMENT	1407:1	1407:13	6	cp += toskew ;
EXPR	1407:1	1407:1	7	cp += toskew
ASSIGN	1407:1	1407:7	8	cp += toskew
LVAL	1407:1	1407:1	9	cp
FIELD	1407:1	1407:1	10	cp
LEAF_NODE	1407:1	1407:1	11	cp
ASSIGN_OP	1407:4	1407:4	9	+=
LEAF_NODE	1407:4	1407:4	10	+=
RVAL	1407:7	1407:7	9	toskew
FIELD	1407:7	1407:7	10	toskew
LEAF_NODE	1407:7	1407:7	11	toskew
LEAF_NODE	1407:13	1407:13	7	;
EXPR_STATEMENT	1408:1	1408:15	6	pp += fromskew ;
EXPR	1408:1	1408:1	7	pp += fromskew
ASSIGN	1408:1	1408:7	8	pp += fromskew
LVAL	1408:1	1408:1	9	pp
FIELD	1408:1	1408:1	10	pp
LEAF_NODE	1408:1	1408:1	11	pp
ASSIGN_OP	1408:4	1408:4	9	+=
LEAF_NODE	1408:4	1408:4	10	+=
RVAL	1408:7	1408:7	9	fromskew
FIELD	1408:7	1408:7	10	fromskew
LEAF_NODE	1408:7	1408:7	11	fromskew
LEAF_NODE	1408:15	1408:15	7	;
LEAF_NODE	1409:4	1409:4	5	}
LEAF_NODE	1410:0	1410:0	2	}
FUNCTION_DEF	0:0	1427:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1415:0	1415:0	2	DECLAREContigPutFunc
LEAF_NODE	1415:0	1415:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1415:20	1415:34	2	( put4bitbwtile )
LEAF_NODE	1415:20	1415:20	3	(
PARAMETER_DECL	1415:21	1415:21	3	put4bitbwtile
LEAF_NODE	1415:21	1415:21	4	put4bitbwtile
LEAF_NODE	1415:34	1415:34	3	)
LEAF_NODE	1416:0	1416:0	2	{
STATEMENTS	1417:4	1421:4	2	
SIMPLE_DECL	1417:4	1417:31	3	uint32 * BWmap ; BWmap = img -> BWmap ;
VAR_DECL	1417:4	1417:13	4	uint32 * BWmap ; BWmap = img -> BWmap
TYPE	1417:4	1417:11	5	uint32 *
TYPE_NAME	1417:4	1417:4	6	uint32
LEAF_NODE	1417:4	1417:4	7	uint32
POINTER	1417:11	1417:11	6	*
LEAF_NODE	1417:11	1417:11	7	*
NAME	1417:13	1417:13	5	BWmap
LEAF_NODE	1417:13	1417:13	6	BWmap
LEAF_NODE	0:0	0:0	5	;
INIT	1417:13	1417:13	5	BWmap = img -> BWmap
ASSIGN	1417:13	1417:21	6	BWmap = img -> BWmap
LVAL	1417:13	1417:13	7	BWmap
NAME	1417:13	1417:13	8	BWmap
LEAF_NODE	1417:13	1417:13	9	BWmap
ASSIGN_OP	1417:19	1417:19	7	=
LEAF_NODE	1417:19	1417:19	8	=
RVAL	1417:21	1417:21	7	img -> BWmap
FIELD	1417:21	1417:26	8	img -> BWmap
LEAF_NODE	1417:21	1417:21	9	img
LEAF_NODE	1417:24	1417:24	9	->
LEAF_NODE	1417:26	1417:26	9	BWmap
LEAF_NODE	1417:31	1417:31	4	;
EXPR_STATEMENT	1419:4	1419:12	3	( void ) x ;
EXPR	1419:4	1419:11	4	( void ) x
LEAF_NODE	1419:4	1419:4	5	(
TYPE_NAME	1419:5	1419:5	5	void
LEAF_NODE	1419:5	1419:5	6	void
LEAF_NODE	1419:9	1419:9	5	)
FIELD	1419:11	1419:11	5	x
LEAF_NODE	1419:11	1419:11	6	x
LEAF_NODE	1419:12	1419:12	4	;
EXPR_STATEMENT	1419:14	1419:22	3	( void ) y ;
EXPR	1419:14	1419:21	4	( void ) y
LEAF_NODE	1419:14	1419:14	5	(
TYPE_NAME	1419:15	1419:15	5	void
LEAF_NODE	1419:15	1419:15	6	void
LEAF_NODE	1419:19	1419:19	5	)
FIELD	1419:21	1419:21	5	y
LEAF_NODE	1419:21	1419:21	6	y
LEAF_NODE	1419:22	1419:22	4	;
EXPR_STATEMENT	1420:4	1420:17	3	fromskew /= 2 ;
EXPR	1420:4	1420:4	4	fromskew /= 2
ASSIGN	1420:4	1420:16	5	fromskew /= 2
LVAL	1420:4	1420:4	6	fromskew
FIELD	1420:4	1420:4	7	fromskew
LEAF_NODE	1420:4	1420:4	8	fromskew
ASSIGN_OP	1420:13	1420:13	6	/=
LEAF_NODE	1420:13	1420:13	7	/=
RVAL	1420:16	1420:16	6	2
FIELD	1420:16	1420:16	7	2
LEAF_NODE	1420:16	1420:16	8	2
LEAF_NODE	1420:17	1420:17	4	;
ITERATION	1421:4	1421:23	3	
KEYWORD	1421:4	1421:4	4	for
LEAF_NODE	1421:4	1421:4	5	for
LEAF_NODE	1421:7	1421:7	4	(
FOR_INIT	1421:9	1421:9	4	;
LEAF_NODE	1421:9	1421:9	5	;
CONDITION	1421:11	1421:11	4	h > 0
EXPR	1421:11	1421:15	5	h > 0
FIELD	1421:11	1421:11	6	h
LEAF_NODE	1421:11	1421:11	7	h
REL_OPERATOR	1421:13	1421:13	6	>
LEAF_NODE	1421:13	1421:13	7	>
FIELD	1421:15	1421:15	6	0
LEAF_NODE	1421:15	1421:15	7	0
LEAF_NODE	1421:16	1421:16	4	;
FOR_EXPR	1421:18	1421:18	4	-- h
EXPR	1421:18	1421:20	5	-- h
LEAF_NODE	1421:18	1421:18	6	--
FIELD	1421:20	1421:20	6	h
LEAF_NODE	1421:20	1421:20	7	h
LEAF_NODE	1421:21	1421:21	4	)
STATEMENTS	1421:23	1426:4	4	
LEAF_NODE	1421:23	1421:23	5	{
STATEMENTS	1422:1	1425:1	5	
SIMPLE_DECL	1422:1	1422:11	6	uint32 * bw ;
VAR_DECL	1422:1	1422:9	7	uint32 * bw
TYPE	1422:1	1422:7	8	uint32 *
TYPE_NAME	1422:1	1422:1	9	uint32
LEAF_NODE	1422:1	1422:1	10	uint32
POINTER	1422:7	1422:7	9	*
LEAF_NODE	1422:7	1422:7	10	*
NAME	1422:9	1422:9	8	bw
LEAF_NODE	1422:9	1422:9	9	bw
LEAF_NODE	1422:11	1422:11	7	;
EXPR_STATEMENT	1423:1	1423:45	6	UNROLL2 ( w , bw = BWmap [ * pp ++ ] , * cp ++ = * bw ++ ) ;
EXPR	1423:1	1423:1	7	UNROLL2 ( w , bw = BWmap [ * pp ++ ] , * cp ++ = * bw ++ )
FUNCTION_CALL	1423:1	1423:44	8	UNROLL2 ( w , bw = BWmap [ * pp ++ ] , * cp ++ = * bw ++ )
CALLEE	1423:1	1423:1	9	UNROLL2
LEAF_NODE	1423:1	1423:1	10	UNROLL2
LEAF_NODE	1423:8	1423:8	9	(
ARGUMENT	1423:9	1423:9	9	w
FIELD	1423:9	1423:9	10	w
LEAF_NODE	1423:9	1423:9	11	w
LEAF_NODE	1423:10	1423:10	9	,
ARGUMENT	1423:12	1423:12	9	bw = BWmap [ * pp ++ ]
ASSIGN	1423:12	1423:17	10	bw = BWmap [ * pp ++ ]
LVAL	1423:12	1423:12	11	bw
FIELD	1423:12	1423:12	12	bw
LEAF_NODE	1423:12	1423:12	13	bw
ASSIGN_OP	1423:15	1423:15	11	=
LEAF_NODE	1423:15	1423:15	12	=
RVAL	1423:17	1423:17	11	BWmap [ * pp ++ ]
FIELD	1423:17	1423:28	12	BWmap [ * pp ++ ]
LEAF_NODE	1423:17	1423:17	13	BWmap
LEAF_NODE	1423:22	1423:22	13	[
EXPR	1423:23	1423:23	13	* pp ++
UNARY_EXPR	1423:23	1423:24	14	* pp ++
UNARY_OPERATOR	1423:23	1423:23	15	*
LEAF_NODE	1423:23	1423:23	16	*
FIELD	1423:24	1423:26	15	pp ++
LEAF_NODE	1423:24	1423:24	16	pp
LEAF_NODE	1423:26	1423:26	16	++
LEAF_NODE	1423:28	1423:28	13	]
LEAF_NODE	1423:29	1423:29	9	,
ARGUMENT	1423:31	1423:31	9	* cp ++ = * bw ++
ASSIGN	1423:31	1423:39	10	* cp ++ = * bw ++
LVAL	1423:31	1423:31	11	* cp ++
UNARY_EXPR	1423:31	1423:32	12	* cp ++
UNARY_OPERATOR	1423:31	1423:31	13	*
LEAF_NODE	1423:31	1423:31	14	*
FIELD	1423:32	1423:34	13	cp ++
LEAF_NODE	1423:32	1423:32	14	cp
LEAF_NODE	1423:34	1423:34	14	++
ASSIGN_OP	1423:37	1423:37	11	=
LEAF_NODE	1423:37	1423:37	12	=
RVAL	1423:39	1423:39	11	* bw ++
UNARY_EXPR	1423:39	1423:40	12	* bw ++
UNARY_OPERATOR	1423:39	1423:39	13	*
LEAF_NODE	1423:39	1423:39	14	*
FIELD	1423:40	1423:42	13	bw ++
LEAF_NODE	1423:40	1423:40	14	bw
LEAF_NODE	1423:42	1423:42	14	++
LEAF_NODE	1423:44	1423:44	9	)
LEAF_NODE	1423:45	1423:45	7	;
EXPR_STATEMENT	1424:1	1424:13	6	cp += toskew ;
EXPR	1424:1	1424:1	7	cp += toskew
ASSIGN	1424:1	1424:7	8	cp += toskew
LVAL	1424:1	1424:1	9	cp
FIELD	1424:1	1424:1	10	cp
LEAF_NODE	1424:1	1424:1	11	cp
ASSIGN_OP	1424:4	1424:4	9	+=
LEAF_NODE	1424:4	1424:4	10	+=
RVAL	1424:7	1424:7	9	toskew
FIELD	1424:7	1424:7	10	toskew
LEAF_NODE	1424:7	1424:7	11	toskew
LEAF_NODE	1424:13	1424:13	7	;
EXPR_STATEMENT	1425:1	1425:15	6	pp += fromskew ;
EXPR	1425:1	1425:1	7	pp += fromskew
ASSIGN	1425:1	1425:7	8	pp += fromskew
LVAL	1425:1	1425:1	9	pp
FIELD	1425:1	1425:1	10	pp
LEAF_NODE	1425:1	1425:1	11	pp
ASSIGN_OP	1425:4	1425:4	9	+=
LEAF_NODE	1425:4	1425:4	10	+=
RVAL	1425:7	1425:7	9	fromskew
FIELD	1425:7	1425:7	10	fromskew
LEAF_NODE	1425:7	1425:7	11	fromskew
LEAF_NODE	1425:15	1425:15	7	;
LEAF_NODE	1426:4	1426:4	5	}
LEAF_NODE	1427:0	1427:0	2	}
FUNCTION_DEF	0:0	1445:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1432:0	1432:0	2	DECLAREContigPutFunc
LEAF_NODE	1432:0	1432:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1432:20	1432:41	2	( putRGBcontig8bittile )
LEAF_NODE	1432:20	1432:20	3	(
PARAMETER_DECL	1432:21	1432:21	3	putRGBcontig8bittile
LEAF_NODE	1432:21	1432:21	4	putRGBcontig8bittile
LEAF_NODE	1432:41	1432:41	3	)
LEAF_NODE	1433:0	1433:0	2	{
STATEMENTS	1434:4	1438:4	2	
SIMPLE_DECL	1434:4	1434:46	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1434:4	1434:8	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1434:4	1434:4	5	int
TYPE_NAME	1434:4	1434:4	6	int
LEAF_NODE	1434:4	1434:4	7	int
NAME	1434:8	1434:8	5	samplesperpixel
LEAF_NODE	1434:8	1434:8	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1434:8	1434:8	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1434:8	1434:26	6	samplesperpixel = img -> samplesperpixel
LVAL	1434:8	1434:8	7	samplesperpixel
NAME	1434:8	1434:8	8	samplesperpixel
LEAF_NODE	1434:8	1434:8	9	samplesperpixel
ASSIGN_OP	1434:24	1434:24	7	=
LEAF_NODE	1434:24	1434:24	8	=
RVAL	1434:26	1434:26	7	img -> samplesperpixel
FIELD	1434:26	1434:31	8	img -> samplesperpixel
LEAF_NODE	1434:26	1434:26	9	img
LEAF_NODE	1434:29	1434:29	9	->
LEAF_NODE	1434:31	1434:31	9	samplesperpixel
LEAF_NODE	1434:46	1434:46	4	;
EXPR_STATEMENT	1436:4	1436:12	3	( void ) x ;
EXPR	1436:4	1436:11	4	( void ) x
LEAF_NODE	1436:4	1436:4	5	(
TYPE_NAME	1436:5	1436:5	5	void
LEAF_NODE	1436:5	1436:5	6	void
LEAF_NODE	1436:9	1436:9	5	)
FIELD	1436:11	1436:11	5	x
LEAF_NODE	1436:11	1436:11	6	x
LEAF_NODE	1436:12	1436:12	4	;
EXPR_STATEMENT	1436:14	1436:22	3	( void ) y ;
EXPR	1436:14	1436:21	4	( void ) y
LEAF_NODE	1436:14	1436:14	5	(
TYPE_NAME	1436:15	1436:15	5	void
LEAF_NODE	1436:15	1436:15	6	void
LEAF_NODE	1436:19	1436:19	5	)
FIELD	1436:21	1436:21	5	y
LEAF_NODE	1436:21	1436:21	6	y
LEAF_NODE	1436:22	1436:22	4	;
EXPR_STATEMENT	1437:4	1437:31	3	fromskew *= samplesperpixel ;
EXPR	1437:4	1437:4	4	fromskew *= samplesperpixel
ASSIGN	1437:4	1437:16	5	fromskew *= samplesperpixel
LVAL	1437:4	1437:4	6	fromskew
FIELD	1437:4	1437:4	7	fromskew
LEAF_NODE	1437:4	1437:4	8	fromskew
ASSIGN_OP	1437:13	1437:13	6	*=
LEAF_NODE	1437:13	1437:13	7	*=
RVAL	1437:16	1437:16	6	samplesperpixel
FIELD	1437:16	1437:16	7	samplesperpixel
LEAF_NODE	1437:16	1437:16	8	samplesperpixel
LEAF_NODE	1437:31	1437:31	4	;
ITERATION	1438:4	1438:23	3	
KEYWORD	1438:4	1438:4	4	for
LEAF_NODE	1438:4	1438:4	5	for
LEAF_NODE	1438:7	1438:7	4	(
FOR_INIT	1438:9	1438:9	4	;
LEAF_NODE	1438:9	1438:9	5	;
CONDITION	1438:11	1438:11	4	h > 0
EXPR	1438:11	1438:15	5	h > 0
FIELD	1438:11	1438:11	6	h
LEAF_NODE	1438:11	1438:11	7	h
REL_OPERATOR	1438:13	1438:13	6	>
LEAF_NODE	1438:13	1438:13	7	>
FIELD	1438:15	1438:15	6	0
LEAF_NODE	1438:15	1438:15	7	0
LEAF_NODE	1438:16	1438:16	4	;
FOR_EXPR	1438:18	1438:18	4	-- h
EXPR	1438:18	1438:20	5	-- h
LEAF_NODE	1438:18	1438:18	6	--
FIELD	1438:20	1438:20	6	h
LEAF_NODE	1438:20	1438:20	7	h
LEAF_NODE	1438:21	1438:21	4	)
STATEMENTS	1438:23	1444:4	4	
LEAF_NODE	1438:23	1438:23	5	{
STATEMENTS	1439:1	1443:1	5	
LEAF_NODE	1439:1	1439:1	6	UNROLL8
LEAF_NODE	1439:8	1439:8	6	(
LEAF_NODE	1439:9	1439:9	6	w
LEAF_NODE	1439:10	1439:10	6	,
EXPR_STATEMENT	1439:12	1440:38	6	NOP , * cp ++ = PACK ( pp [ 0 ] , pp [ 1 ] , pp [ 2 ] ) ;
EXPR	1439:12	1440:5	7	NOP , * cp ++ = PACK ( pp [ 0 ] , pp [ 1 ] , pp [ 2 ] )
FIELD	1439:12	1439:12	8	NOP
LEAF_NODE	1439:12	1439:12	9	NOP
LEAF_NODE	1439:15	1439:15	8	,
ASSIGN	1440:5	1440:13	8	* cp ++ = PACK ( pp [ 0 ] , pp [ 1 ] , pp [ 2 ] )
LVAL	1440:5	1440:5	9	* cp ++
UNARY_EXPR	1440:5	1440:6	10	* cp ++
UNARY_OPERATOR	1440:5	1440:5	11	*
LEAF_NODE	1440:5	1440:5	12	*
FIELD	1440:6	1440:8	11	cp ++
LEAF_NODE	1440:6	1440:6	12	cp
LEAF_NODE	1440:8	1440:8	12	++
ASSIGN_OP	1440:11	1440:11	9	=
LEAF_NODE	1440:11	1440:11	10	=
RVAL	1440:13	1440:13	9	PACK ( pp [ 0 ] , pp [ 1 ] , pp [ 2 ] )
FUNCTION_CALL	1440:13	1440:37	10	PACK ( pp [ 0 ] , pp [ 1 ] , pp [ 2 ] )
CALLEE	1440:13	1440:13	11	PACK
LEAF_NODE	1440:13	1440:13	12	PACK
LEAF_NODE	1440:17	1440:17	11	(
ARGUMENT	1440:18	1440:18	11	pp [ 0 ]
FIELD	1440:18	1440:22	12	pp [ 0 ]
LEAF_NODE	1440:18	1440:18	13	pp
LEAF_NODE	1440:20	1440:20	13	[
EXPR	1440:21	1440:21	13	0
FIELD	1440:21	1440:21	14	0
LEAF_NODE	1440:21	1440:21	15	0
LEAF_NODE	1440:22	1440:22	13	]
LEAF_NODE	1440:23	1440:23	11	,
ARGUMENT	1440:25	1440:25	11	pp [ 1 ]
FIELD	1440:25	1440:29	12	pp [ 1 ]
LEAF_NODE	1440:25	1440:25	13	pp
LEAF_NODE	1440:27	1440:27	13	[
EXPR	1440:28	1440:28	13	1
FIELD	1440:28	1440:28	14	1
LEAF_NODE	1440:28	1440:28	15	1
LEAF_NODE	1440:29	1440:29	13	]
LEAF_NODE	1440:30	1440:30	11	,
ARGUMENT	1440:32	1440:32	11	pp [ 2 ]
FIELD	1440:32	1440:36	12	pp [ 2 ]
LEAF_NODE	1440:32	1440:32	13	pp
LEAF_NODE	1440:34	1440:34	13	[
EXPR	1440:35	1440:35	13	2
FIELD	1440:35	1440:35	14	2
LEAF_NODE	1440:35	1440:35	15	2
LEAF_NODE	1440:36	1440:36	13	]
LEAF_NODE	1440:37	1440:37	11	)
LEAF_NODE	1440:38	1440:38	7	;
LEAF_NODE	1441:5	1441:5	6	pp
LEAF_NODE	1441:8	1441:8	6	+=
LEAF_NODE	1441:11	1441:11	6	samplesperpixel
LEAF_NODE	1441:26	1441:26	6	)
LEAF_NODE	1441:27	1441:27	6	;
EXPR_STATEMENT	1442:1	1442:13	6	cp += toskew ;
EXPR	1442:1	1442:1	7	cp += toskew
ASSIGN	1442:1	1442:7	8	cp += toskew
LVAL	1442:1	1442:1	9	cp
FIELD	1442:1	1442:1	10	cp
LEAF_NODE	1442:1	1442:1	11	cp
ASSIGN_OP	1442:4	1442:4	9	+=
LEAF_NODE	1442:4	1442:4	10	+=
RVAL	1442:7	1442:7	9	toskew
FIELD	1442:7	1442:7	10	toskew
LEAF_NODE	1442:7	1442:7	11	toskew
LEAF_NODE	1442:13	1442:13	7	;
EXPR_STATEMENT	1443:1	1443:15	6	pp += fromskew ;
EXPR	1443:1	1443:1	7	pp += fromskew
ASSIGN	1443:1	1443:7	8	pp += fromskew
LVAL	1443:1	1443:1	9	pp
FIELD	1443:1	1443:1	10	pp
LEAF_NODE	1443:1	1443:1	11	pp
ASSIGN_OP	1443:4	1443:4	9	+=
LEAF_NODE	1443:4	1443:4	10	+=
RVAL	1443:7	1443:7	9	fromskew
FIELD	1443:7	1443:7	10	fromskew
LEAF_NODE	1443:7	1443:7	11	fromskew
LEAF_NODE	1443:15	1443:15	7	;
LEAF_NODE	1444:4	1444:4	5	}
LEAF_NODE	1445:0	1445:0	2	}
FUNCTION_DEF	0:0	1464:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1451:0	1451:0	2	DECLAREContigPutFunc
LEAF_NODE	1451:0	1451:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1451:20	1451:43	2	( putRGBAAcontig8bittile )
LEAF_NODE	1451:20	1451:20	3	(
PARAMETER_DECL	1451:21	1451:21	3	putRGBAAcontig8bittile
LEAF_NODE	1451:21	1451:21	4	putRGBAAcontig8bittile
LEAF_NODE	1451:43	1451:43	3	)
LEAF_NODE	1452:0	1452:0	2	{
STATEMENTS	1453:4	1457:4	2	
SIMPLE_DECL	1453:4	1453:46	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1453:4	1453:8	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1453:4	1453:4	5	int
TYPE_NAME	1453:4	1453:4	6	int
LEAF_NODE	1453:4	1453:4	7	int
NAME	1453:8	1453:8	5	samplesperpixel
LEAF_NODE	1453:8	1453:8	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1453:8	1453:8	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1453:8	1453:26	6	samplesperpixel = img -> samplesperpixel
LVAL	1453:8	1453:8	7	samplesperpixel
NAME	1453:8	1453:8	8	samplesperpixel
LEAF_NODE	1453:8	1453:8	9	samplesperpixel
ASSIGN_OP	1453:24	1453:24	7	=
LEAF_NODE	1453:24	1453:24	8	=
RVAL	1453:26	1453:26	7	img -> samplesperpixel
FIELD	1453:26	1453:31	8	img -> samplesperpixel
LEAF_NODE	1453:26	1453:26	9	img
LEAF_NODE	1453:29	1453:29	9	->
LEAF_NODE	1453:31	1453:31	9	samplesperpixel
LEAF_NODE	1453:46	1453:46	4	;
EXPR_STATEMENT	1455:4	1455:12	3	( void ) x ;
EXPR	1455:4	1455:11	4	( void ) x
LEAF_NODE	1455:4	1455:4	5	(
TYPE_NAME	1455:5	1455:5	5	void
LEAF_NODE	1455:5	1455:5	6	void
LEAF_NODE	1455:9	1455:9	5	)
FIELD	1455:11	1455:11	5	x
LEAF_NODE	1455:11	1455:11	6	x
LEAF_NODE	1455:12	1455:12	4	;
EXPR_STATEMENT	1455:14	1455:22	3	( void ) y ;
EXPR	1455:14	1455:21	4	( void ) y
LEAF_NODE	1455:14	1455:14	5	(
TYPE_NAME	1455:15	1455:15	5	void
LEAF_NODE	1455:15	1455:15	6	void
LEAF_NODE	1455:19	1455:19	5	)
FIELD	1455:21	1455:21	5	y
LEAF_NODE	1455:21	1455:21	6	y
LEAF_NODE	1455:22	1455:22	4	;
EXPR_STATEMENT	1456:4	1456:31	3	fromskew *= samplesperpixel ;
EXPR	1456:4	1456:4	4	fromskew *= samplesperpixel
ASSIGN	1456:4	1456:16	5	fromskew *= samplesperpixel
LVAL	1456:4	1456:4	6	fromskew
FIELD	1456:4	1456:4	7	fromskew
LEAF_NODE	1456:4	1456:4	8	fromskew
ASSIGN_OP	1456:13	1456:13	6	*=
LEAF_NODE	1456:13	1456:13	7	*=
RVAL	1456:16	1456:16	6	samplesperpixel
FIELD	1456:16	1456:16	7	samplesperpixel
LEAF_NODE	1456:16	1456:16	8	samplesperpixel
LEAF_NODE	1456:31	1456:31	4	;
ITERATION	1457:4	1457:23	3	
KEYWORD	1457:4	1457:4	4	for
LEAF_NODE	1457:4	1457:4	5	for
LEAF_NODE	1457:7	1457:7	4	(
FOR_INIT	1457:9	1457:9	4	;
LEAF_NODE	1457:9	1457:9	5	;
CONDITION	1457:11	1457:11	4	h > 0
EXPR	1457:11	1457:15	5	h > 0
FIELD	1457:11	1457:11	6	h
LEAF_NODE	1457:11	1457:11	7	h
REL_OPERATOR	1457:13	1457:13	6	>
LEAF_NODE	1457:13	1457:13	7	>
FIELD	1457:15	1457:15	6	0
LEAF_NODE	1457:15	1457:15	7	0
LEAF_NODE	1457:16	1457:16	4	;
FOR_EXPR	1457:18	1457:18	4	-- h
EXPR	1457:18	1457:20	5	-- h
LEAF_NODE	1457:18	1457:18	6	--
FIELD	1457:20	1457:20	6	h
LEAF_NODE	1457:20	1457:20	7	h
LEAF_NODE	1457:21	1457:21	4	)
STATEMENTS	1457:23	1463:4	4	
LEAF_NODE	1457:23	1457:23	5	{
STATEMENTS	1458:1	1462:1	5	
LEAF_NODE	1458:1	1458:1	6	UNROLL8
LEAF_NODE	1458:8	1458:8	6	(
LEAF_NODE	1458:9	1458:9	6	w
LEAF_NODE	1458:10	1458:10	6	,
EXPR_STATEMENT	1458:12	1459:46	6	NOP , * cp ++ = PACK4 ( pp [ 0 ] , pp [ 1 ] , pp [ 2 ] , pp [ 3 ] ) ;
EXPR	1458:12	1459:5	7	NOP , * cp ++ = PACK4 ( pp [ 0 ] , pp [ 1 ] , pp [ 2 ] , pp [ 3 ] )
FIELD	1458:12	1458:12	8	NOP
LEAF_NODE	1458:12	1458:12	9	NOP
LEAF_NODE	1458:15	1458:15	8	,
ASSIGN	1459:5	1459:13	8	* cp ++ = PACK4 ( pp [ 0 ] , pp [ 1 ] , pp [ 2 ] , pp [ 3 ] )
LVAL	1459:5	1459:5	9	* cp ++
UNARY_EXPR	1459:5	1459:6	10	* cp ++
UNARY_OPERATOR	1459:5	1459:5	11	*
LEAF_NODE	1459:5	1459:5	12	*
FIELD	1459:6	1459:8	11	cp ++
LEAF_NODE	1459:6	1459:6	12	cp
LEAF_NODE	1459:8	1459:8	12	++
ASSIGN_OP	1459:11	1459:11	9	=
LEAF_NODE	1459:11	1459:11	10	=
RVAL	1459:13	1459:13	9	PACK4 ( pp [ 0 ] , pp [ 1 ] , pp [ 2 ] , pp [ 3 ] )
FUNCTION_CALL	1459:13	1459:45	10	PACK4 ( pp [ 0 ] , pp [ 1 ] , pp [ 2 ] , pp [ 3 ] )
CALLEE	1459:13	1459:13	11	PACK4
LEAF_NODE	1459:13	1459:13	12	PACK4
LEAF_NODE	1459:18	1459:18	11	(
ARGUMENT	1459:19	1459:19	11	pp [ 0 ]
FIELD	1459:19	1459:23	12	pp [ 0 ]
LEAF_NODE	1459:19	1459:19	13	pp
LEAF_NODE	1459:21	1459:21	13	[
EXPR	1459:22	1459:22	13	0
FIELD	1459:22	1459:22	14	0
LEAF_NODE	1459:22	1459:22	15	0
LEAF_NODE	1459:23	1459:23	13	]
LEAF_NODE	1459:24	1459:24	11	,
ARGUMENT	1459:26	1459:26	11	pp [ 1 ]
FIELD	1459:26	1459:30	12	pp [ 1 ]
LEAF_NODE	1459:26	1459:26	13	pp
LEAF_NODE	1459:28	1459:28	13	[
EXPR	1459:29	1459:29	13	1
FIELD	1459:29	1459:29	14	1
LEAF_NODE	1459:29	1459:29	15	1
LEAF_NODE	1459:30	1459:30	13	]
LEAF_NODE	1459:31	1459:31	11	,
ARGUMENT	1459:33	1459:33	11	pp [ 2 ]
FIELD	1459:33	1459:37	12	pp [ 2 ]
LEAF_NODE	1459:33	1459:33	13	pp
LEAF_NODE	1459:35	1459:35	13	[
EXPR	1459:36	1459:36	13	2
FIELD	1459:36	1459:36	14	2
LEAF_NODE	1459:36	1459:36	15	2
LEAF_NODE	1459:37	1459:37	13	]
LEAF_NODE	1459:38	1459:38	11	,
ARGUMENT	1459:40	1459:40	11	pp [ 3 ]
FIELD	1459:40	1459:44	12	pp [ 3 ]
LEAF_NODE	1459:40	1459:40	13	pp
LEAF_NODE	1459:42	1459:42	13	[
EXPR	1459:43	1459:43	13	3
FIELD	1459:43	1459:43	14	3
LEAF_NODE	1459:43	1459:43	15	3
LEAF_NODE	1459:44	1459:44	13	]
LEAF_NODE	1459:45	1459:45	11	)
LEAF_NODE	1459:46	1459:46	7	;
LEAF_NODE	1460:5	1460:5	6	pp
LEAF_NODE	1460:8	1460:8	6	+=
LEAF_NODE	1460:11	1460:11	6	samplesperpixel
LEAF_NODE	1460:26	1460:26	6	)
LEAF_NODE	1460:27	1460:27	6	;
EXPR_STATEMENT	1461:1	1461:13	6	cp += toskew ;
EXPR	1461:1	1461:1	7	cp += toskew
ASSIGN	1461:1	1461:7	8	cp += toskew
LVAL	1461:1	1461:1	9	cp
FIELD	1461:1	1461:1	10	cp
LEAF_NODE	1461:1	1461:1	11	cp
ASSIGN_OP	1461:4	1461:4	9	+=
LEAF_NODE	1461:4	1461:4	10	+=
RVAL	1461:7	1461:7	9	toskew
FIELD	1461:7	1461:7	10	toskew
LEAF_NODE	1461:7	1461:7	11	toskew
LEAF_NODE	1461:13	1461:13	7	;
EXPR_STATEMENT	1462:1	1462:15	6	pp += fromskew ;
EXPR	1462:1	1462:1	7	pp += fromskew
ASSIGN	1462:1	1462:7	8	pp += fromskew
LVAL	1462:1	1462:1	9	pp
FIELD	1462:1	1462:1	10	pp
LEAF_NODE	1462:1	1462:1	11	pp
ASSIGN_OP	1462:4	1462:4	9	+=
LEAF_NODE	1462:4	1462:4	10	+=
RVAL	1462:7	1462:7	9	fromskew
FIELD	1462:7	1462:7	10	fromskew
LEAF_NODE	1462:7	1462:7	11	fromskew
LEAF_NODE	1462:15	1462:15	7	;
LEAF_NODE	1463:4	1463:4	5	}
LEAF_NODE	1464:0	1464:0	2	}
FUNCTION_DEF	0:0	1490:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1470:0	1470:0	2	DECLAREContigPutFunc
LEAF_NODE	1470:0	1470:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1470:20	1470:43	2	( putRGBUAcontig8bittile )
LEAF_NODE	1470:20	1470:20	3	(
PARAMETER_DECL	1470:21	1470:21	3	putRGBUAcontig8bittile
LEAF_NODE	1470:21	1470:21	4	putRGBUAcontig8bittile
LEAF_NODE	1470:43	1470:43	3	)
LEAF_NODE	1471:0	1471:0	2	{
STATEMENTS	1472:1	1475:1	2	
SIMPLE_DECL	1472:1	1472:43	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1472:1	1472:5	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1472:1	1472:1	5	int
TYPE_NAME	1472:1	1472:1	6	int
LEAF_NODE	1472:1	1472:1	7	int
NAME	1472:5	1472:5	5	samplesperpixel
LEAF_NODE	1472:5	1472:5	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1472:5	1472:5	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1472:5	1472:23	6	samplesperpixel = img -> samplesperpixel
LVAL	1472:5	1472:5	7	samplesperpixel
NAME	1472:5	1472:5	8	samplesperpixel
LEAF_NODE	1472:5	1472:5	9	samplesperpixel
ASSIGN_OP	1472:21	1472:21	7	=
LEAF_NODE	1472:21	1472:21	8	=
RVAL	1472:23	1472:23	7	img -> samplesperpixel
FIELD	1472:23	1472:28	8	img -> samplesperpixel
LEAF_NODE	1472:23	1472:23	9	img
LEAF_NODE	1472:26	1472:26	9	->
LEAF_NODE	1472:28	1472:28	9	samplesperpixel
LEAF_NODE	1472:43	1472:43	4	;
EXPR_STATEMENT	1473:1	1473:9	3	( void ) y ;
EXPR	1473:1	1473:8	4	( void ) y
LEAF_NODE	1473:1	1473:1	5	(
TYPE_NAME	1473:2	1473:2	5	void
LEAF_NODE	1473:2	1473:2	6	void
LEAF_NODE	1473:6	1473:6	5	)
FIELD	1473:8	1473:8	5	y
LEAF_NODE	1473:8	1473:8	6	y
LEAF_NODE	1473:9	1473:9	4	;
EXPR_STATEMENT	1474:1	1474:28	3	fromskew *= samplesperpixel ;
EXPR	1474:1	1474:1	4	fromskew *= samplesperpixel
ASSIGN	1474:1	1474:13	5	fromskew *= samplesperpixel
LVAL	1474:1	1474:1	6	fromskew
FIELD	1474:1	1474:1	7	fromskew
LEAF_NODE	1474:1	1474:1	8	fromskew
ASSIGN_OP	1474:10	1474:10	6	*=
LEAF_NODE	1474:10	1474:10	7	*=
RVAL	1474:13	1474:13	6	samplesperpixel
FIELD	1474:13	1474:13	7	samplesperpixel
LEAF_NODE	1474:13	1474:13	8	samplesperpixel
LEAF_NODE	1474:28	1474:28	4	;
ITERATION	1475:1	1475:20	3	
KEYWORD	1475:1	1475:1	4	for
LEAF_NODE	1475:1	1475:1	5	for
LEAF_NODE	1475:4	1475:4	4	(
FOR_INIT	1475:6	1475:6	4	;
LEAF_NODE	1475:6	1475:6	5	;
CONDITION	1475:8	1475:8	4	h > 0
EXPR	1475:8	1475:12	5	h > 0
FIELD	1475:8	1475:8	6	h
LEAF_NODE	1475:8	1475:8	7	h
REL_OPERATOR	1475:10	1475:10	6	>
LEAF_NODE	1475:10	1475:10	7	>
FIELD	1475:12	1475:12	6	0
LEAF_NODE	1475:12	1475:12	7	0
LEAF_NODE	1475:13	1475:13	4	;
FOR_EXPR	1475:15	1475:15	4	-- h
EXPR	1475:15	1475:17	5	-- h
LEAF_NODE	1475:15	1475:15	6	--
FIELD	1475:17	1475:17	6	h
LEAF_NODE	1475:17	1475:17	7	h
LEAF_NODE	1475:18	1475:18	4	)
STATEMENTS	1475:20	1489:1	4	
LEAF_NODE	1475:20	1475:20	5	{
STATEMENTS	1476:2	1488:2	5	
SIMPLE_DECL	1476:2	1476:19	6	uint32 r , uint32 g , uint32 b , uint32 a ;
INIT_DECL_LIST	1476:2	1476:2	7	uint32 r , uint32 g , uint32 b , uint32 a
VAR_DECL	1476:2	1476:9	8	uint32 r
TYPE	1476:2	1476:2	9	uint32
TYPE_NAME	1476:2	1476:2	10	uint32
LEAF_NODE	1476:2	1476:2	11	uint32
NAME	1476:9	1476:9	9	r
LEAF_NODE	1476:9	1476:9	10	r
LEAF_NODE	1476:10	1476:10	8	,
INIT_DECL_LIST	1476:2	1476:2	8	uint32 g , uint32 b , uint32 a
VAR_DECL	1476:2	1476:12	9	uint32 g
TYPE	1476:2	1476:2	10	uint32
TYPE_NAME	1476:2	1476:2	11	uint32
LEAF_NODE	1476:2	1476:2	12	uint32
NAME	1476:12	1476:12	10	g
LEAF_NODE	1476:12	1476:12	11	g
LEAF_NODE	1476:13	1476:13	9	,
INIT_DECL_LIST	1476:2	1476:2	9	uint32 b , uint32 a
VAR_DECL	1476:2	1476:15	10	uint32 b
TYPE	1476:2	1476:2	11	uint32
TYPE_NAME	1476:2	1476:2	12	uint32
LEAF_NODE	1476:2	1476:2	13	uint32
NAME	1476:15	1476:15	11	b
LEAF_NODE	1476:15	1476:15	12	b
LEAF_NODE	1476:16	1476:16	10	,
VAR_DECL	1476:2	1476:18	10	uint32 a
TYPE	1476:2	1476:2	11	uint32
TYPE_NAME	1476:2	1476:2	12	uint32
LEAF_NODE	1476:2	1476:2	13	uint32
NAME	1476:18	1476:18	11	a
LEAF_NODE	1476:18	1476:18	12	a
LEAF_NODE	1476:19	1476:19	7	;
SIMPLE_DECL	1477:2	1477:10	6	uint8 * m ;
VAR_DECL	1477:2	1477:9	7	uint8 * m
TYPE	1477:2	1477:7	8	uint8 *
TYPE_NAME	1477:2	1477:2	9	uint8
LEAF_NODE	1477:2	1477:2	10	uint8
POINTER	1477:7	1477:7	9	*
LEAF_NODE	1477:7	1477:7	10	*
NAME	1477:9	1477:9	8	m
LEAF_NODE	1477:9	1477:9	9	m
LEAF_NODE	1477:10	1477:10	7	;
ITERATION	1478:2	1478:26	6	
KEYWORD	1478:2	1478:2	7	for
LEAF_NODE	1478:2	1478:2	8	for
LEAF_NODE	1478:6	1478:6	7	(
FOR_INIT	1478:7	1478:12	7	x = w ;
EXPR	1478:7	1478:7	8	x = w
ASSIGN	1478:7	1478:11	9	x = w
LVAL	1478:7	1478:7	10	x
FIELD	1478:7	1478:7	11	x
LEAF_NODE	1478:7	1478:7	12	x
ASSIGN_OP	1478:9	1478:9	10	=
LEAF_NODE	1478:9	1478:9	11	=
RVAL	1478:11	1478:11	10	w
FIELD	1478:11	1478:11	11	w
LEAF_NODE	1478:11	1478:11	12	w
LEAF_NODE	1478:12	1478:12	8	;
CONDITION	1478:14	1478:14	7	x > 0
EXPR	1478:14	1478:18	8	x > 0
FIELD	1478:14	1478:14	9	x
LEAF_NODE	1478:14	1478:14	10	x
REL_OPERATOR	1478:16	1478:16	9	>
LEAF_NODE	1478:16	1478:16	10	>
FIELD	1478:18	1478:18	9	0
LEAF_NODE	1478:18	1478:18	10	0
LEAF_NODE	1478:19	1478:19	7	;
FOR_EXPR	1478:21	1478:21	7	-- x
EXPR	1478:21	1478:23	8	-- x
LEAF_NODE	1478:21	1478:21	9	--
FIELD	1478:23	1478:23	9	x
LEAF_NODE	1478:23	1478:23	10	x
LEAF_NODE	1478:24	1478:24	7	)
STATEMENTS	1478:26	1486:2	7	
LEAF_NODE	1478:26	1478:26	8	{
STATEMENTS	1479:3	1485:3	8	
EXPR_STATEMENT	1479:3	1479:12	9	a = pp [ 3 ] ;
EXPR	1479:3	1479:3	10	a = pp [ 3 ]
ASSIGN	1479:3	1479:7	11	a = pp [ 3 ]
LVAL	1479:3	1479:3	12	a
FIELD	1479:3	1479:3	13	a
LEAF_NODE	1479:3	1479:3	14	a
ASSIGN_OP	1479:5	1479:5	12	=
LEAF_NODE	1479:5	1479:5	13	=
RVAL	1479:7	1479:7	12	pp [ 3 ]
FIELD	1479:7	1479:11	13	pp [ 3 ]
LEAF_NODE	1479:7	1479:7	14	pp
LEAF_NODE	1479:9	1479:9	14	[
EXPR	1479:10	1479:10	14	3
FIELD	1479:10	1479:10	15	3
LEAF_NODE	1479:10	1479:10	16	3
LEAF_NODE	1479:11	1479:11	14	]
LEAF_NODE	1479:12	1479:12	10	;
EXPR_STATEMENT	1480:3	1480:34	9	m = img -> UaToAa + ( ( size_t ) a << 8 ) ;
EXPR	1480:3	1480:3	10	m = img -> UaToAa + ( ( size_t ) a << 8 )
ASSIGN	1480:3	1480:7	11	m = img -> UaToAa + ( ( size_t ) a << 8 )
LVAL	1480:3	1480:3	12	m
FIELD	1480:3	1480:3	13	m
LEAF_NODE	1480:3	1480:3	14	m
ASSIGN_OP	1480:5	1480:5	12	=
LEAF_NODE	1480:5	1480:5	13	=
RVAL	1480:7	1480:33	12	img -> UaToAa + ( ( size_t ) a << 8 )
FIELD	1480:7	1480:12	13	img -> UaToAa
LEAF_NODE	1480:7	1480:7	14	img
LEAF_NODE	1480:10	1480:10	14	->
LEAF_NODE	1480:12	1480:12	14	UaToAa
LEAF_NODE	1480:18	1480:18	13	+
LEAF_NODE	1480:19	1480:19	13	(
LEAF_NODE	1480:20	1480:20	13	(
TYPE_NAME	1480:21	1480:21	13	size_t
LEAF_NODE	1480:21	1480:21	14	size_t
LEAF_NODE	1480:27	1480:27	13	)
FIELD	1480:29	1480:29	13	a
LEAF_NODE	1480:29	1480:29	14	a
LEAF_NODE	1480:30	1480:30	13	<<
FIELD	1480:32	1480:32	13	8
LEAF_NODE	1480:32	1480:32	14	8
LEAF_NODE	1480:33	1480:33	13	)
LEAF_NODE	1480:34	1480:34	10	;
EXPR_STATEMENT	1481:3	1481:15	9	r = m [ pp [ 0 ] ] ;
EXPR	1481:3	1481:3	10	r = m [ pp [ 0 ] ]
ASSIGN	1481:3	1481:7	11	r = m [ pp [ 0 ] ]
LVAL	1481:3	1481:3	12	r
FIELD	1481:3	1481:3	13	r
LEAF_NODE	1481:3	1481:3	14	r
ASSIGN_OP	1481:5	1481:5	12	=
LEAF_NODE	1481:5	1481:5	13	=
RVAL	1481:7	1481:7	12	m [ pp [ 0 ] ]
FIELD	1481:7	1481:14	13	m [ pp [ 0 ] ]
LEAF_NODE	1481:7	1481:7	14	m
LEAF_NODE	1481:8	1481:8	14	[
EXPR	1481:9	1481:9	14	pp [ 0 ]
FIELD	1481:9	1481:13	15	pp [ 0 ]
LEAF_NODE	1481:9	1481:9	16	pp
LEAF_NODE	1481:11	1481:11	16	[
EXPR	1481:12	1481:12	16	0
FIELD	1481:12	1481:12	17	0
LEAF_NODE	1481:12	1481:12	18	0
LEAF_NODE	1481:13	1481:13	16	]
LEAF_NODE	1481:14	1481:14	14	]
LEAF_NODE	1481:15	1481:15	10	;
EXPR_STATEMENT	1482:3	1482:15	9	g = m [ pp [ 1 ] ] ;
EXPR	1482:3	1482:3	10	g = m [ pp [ 1 ] ]
ASSIGN	1482:3	1482:7	11	g = m [ pp [ 1 ] ]
LVAL	1482:3	1482:3	12	g
FIELD	1482:3	1482:3	13	g
LEAF_NODE	1482:3	1482:3	14	g
ASSIGN_OP	1482:5	1482:5	12	=
LEAF_NODE	1482:5	1482:5	13	=
RVAL	1482:7	1482:7	12	m [ pp [ 1 ] ]
FIELD	1482:7	1482:14	13	m [ pp [ 1 ] ]
LEAF_NODE	1482:7	1482:7	14	m
LEAF_NODE	1482:8	1482:8	14	[
EXPR	1482:9	1482:9	14	pp [ 1 ]
FIELD	1482:9	1482:13	15	pp [ 1 ]
LEAF_NODE	1482:9	1482:9	16	pp
LEAF_NODE	1482:11	1482:11	16	[
EXPR	1482:12	1482:12	16	1
FIELD	1482:12	1482:12	17	1
LEAF_NODE	1482:12	1482:12	18	1
LEAF_NODE	1482:13	1482:13	16	]
LEAF_NODE	1482:14	1482:14	14	]
LEAF_NODE	1482:15	1482:15	10	;
EXPR_STATEMENT	1483:3	1483:15	9	b = m [ pp [ 2 ] ] ;
EXPR	1483:3	1483:3	10	b = m [ pp [ 2 ] ]
ASSIGN	1483:3	1483:7	11	b = m [ pp [ 2 ] ]
LVAL	1483:3	1483:3	12	b
FIELD	1483:3	1483:3	13	b
LEAF_NODE	1483:3	1483:3	14	b
ASSIGN_OP	1483:5	1483:5	12	=
LEAF_NODE	1483:5	1483:5	13	=
RVAL	1483:7	1483:7	12	m [ pp [ 2 ] ]
FIELD	1483:7	1483:14	13	m [ pp [ 2 ] ]
LEAF_NODE	1483:7	1483:7	14	m
LEAF_NODE	1483:8	1483:8	14	[
EXPR	1483:9	1483:9	14	pp [ 2 ]
FIELD	1483:9	1483:13	15	pp [ 2 ]
LEAF_NODE	1483:9	1483:9	16	pp
LEAF_NODE	1483:11	1483:11	16	[
EXPR	1483:12	1483:12	16	2
FIELD	1483:12	1483:12	17	2
LEAF_NODE	1483:12	1483:12	18	2
LEAF_NODE	1483:13	1483:13	16	]
LEAF_NODE	1483:14	1483:14	14	]
LEAF_NODE	1483:15	1483:15	10	;
EXPR_STATEMENT	1484:3	1484:25	9	* cp ++ = PACK4 ( r , g , b , a ) ;
EXPR	1484:3	1484:3	10	* cp ++ = PACK4 ( r , g , b , a )
ASSIGN	1484:3	1484:11	11	* cp ++ = PACK4 ( r , g , b , a )
LVAL	1484:3	1484:3	12	* cp ++
UNARY_EXPR	1484:3	1484:4	13	* cp ++
UNARY_OPERATOR	1484:3	1484:3	14	*
LEAF_NODE	1484:3	1484:3	15	*
FIELD	1484:4	1484:6	14	cp ++
LEAF_NODE	1484:4	1484:4	15	cp
LEAF_NODE	1484:6	1484:6	15	++
ASSIGN_OP	1484:9	1484:9	12	=
LEAF_NODE	1484:9	1484:9	13	=
RVAL	1484:11	1484:11	12	PACK4 ( r , g , b , a )
FUNCTION_CALL	1484:11	1484:24	13	PACK4 ( r , g , b , a )
CALLEE	1484:11	1484:11	14	PACK4
LEAF_NODE	1484:11	1484:11	15	PACK4
LEAF_NODE	1484:16	1484:16	14	(
ARGUMENT	1484:17	1484:17	14	r
FIELD	1484:17	1484:17	15	r
LEAF_NODE	1484:17	1484:17	16	r
LEAF_NODE	1484:18	1484:18	14	,
ARGUMENT	1484:19	1484:19	14	g
FIELD	1484:19	1484:19	15	g
LEAF_NODE	1484:19	1484:19	16	g
LEAF_NODE	1484:20	1484:20	14	,
ARGUMENT	1484:21	1484:21	14	b
FIELD	1484:21	1484:21	15	b
LEAF_NODE	1484:21	1484:21	16	b
LEAF_NODE	1484:22	1484:22	14	,
ARGUMENT	1484:23	1484:23	14	a
FIELD	1484:23	1484:23	15	a
LEAF_NODE	1484:23	1484:23	16	a
LEAF_NODE	1484:24	1484:24	14	)
LEAF_NODE	1484:25	1484:25	10	;
EXPR_STATEMENT	1485:3	1485:24	9	pp += samplesperpixel ;
EXPR	1485:3	1485:3	10	pp += samplesperpixel
ASSIGN	1485:3	1485:9	11	pp += samplesperpixel
LVAL	1485:3	1485:3	12	pp
FIELD	1485:3	1485:3	13	pp
LEAF_NODE	1485:3	1485:3	14	pp
ASSIGN_OP	1485:6	1485:6	12	+=
LEAF_NODE	1485:6	1485:6	13	+=
RVAL	1485:9	1485:9	12	samplesperpixel
FIELD	1485:9	1485:9	13	samplesperpixel
LEAF_NODE	1485:9	1485:9	14	samplesperpixel
LEAF_NODE	1485:24	1485:24	10	;
LEAF_NODE	1486:2	1486:2	8	}
EXPR_STATEMENT	1487:2	1487:14	6	cp += toskew ;
EXPR	1487:2	1487:2	7	cp += toskew
ASSIGN	1487:2	1487:8	8	cp += toskew
LVAL	1487:2	1487:2	9	cp
FIELD	1487:2	1487:2	10	cp
LEAF_NODE	1487:2	1487:2	11	cp
ASSIGN_OP	1487:5	1487:5	9	+=
LEAF_NODE	1487:5	1487:5	10	+=
RVAL	1487:8	1487:8	9	toskew
FIELD	1487:8	1487:8	10	toskew
LEAF_NODE	1487:8	1487:8	11	toskew
LEAF_NODE	1487:14	1487:14	7	;
EXPR_STATEMENT	1488:2	1488:16	6	pp += fromskew ;
EXPR	1488:2	1488:2	7	pp += fromskew
ASSIGN	1488:2	1488:8	8	pp += fromskew
LVAL	1488:2	1488:2	9	pp
FIELD	1488:2	1488:2	10	pp
LEAF_NODE	1488:2	1488:2	11	pp
ASSIGN_OP	1488:5	1488:5	9	+=
LEAF_NODE	1488:5	1488:5	10	+=
RVAL	1488:8	1488:8	9	fromskew
FIELD	1488:8	1488:8	10	fromskew
LEAF_NODE	1488:8	1488:8	11	fromskew
LEAF_NODE	1488:16	1488:16	7	;
LEAF_NODE	1489:1	1489:1	5	}
LEAF_NODE	1490:0	1490:0	2	}
FUNCTION_DEF	0:0	1511:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1495:0	1495:0	2	DECLAREContigPutFunc
LEAF_NODE	1495:0	1495:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1495:20	1495:42	2	( putRGBcontig16bittile )
LEAF_NODE	1495:20	1495:20	3	(
PARAMETER_DECL	1495:21	1495:21	3	putRGBcontig16bittile
LEAF_NODE	1495:21	1495:21	4	putRGBcontig16bittile
LEAF_NODE	1495:42	1495:42	3	)
LEAF_NODE	1496:0	1496:0	2	{
STATEMENTS	1497:1	1501:1	2	
SIMPLE_DECL	1497:1	1497:43	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1497:1	1497:5	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1497:1	1497:1	5	int
TYPE_NAME	1497:1	1497:1	6	int
LEAF_NODE	1497:1	1497:1	7	int
NAME	1497:5	1497:5	5	samplesperpixel
LEAF_NODE	1497:5	1497:5	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1497:5	1497:5	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1497:5	1497:23	6	samplesperpixel = img -> samplesperpixel
LVAL	1497:5	1497:5	7	samplesperpixel
NAME	1497:5	1497:5	8	samplesperpixel
LEAF_NODE	1497:5	1497:5	9	samplesperpixel
ASSIGN_OP	1497:21	1497:21	7	=
LEAF_NODE	1497:21	1497:21	8	=
RVAL	1497:23	1497:23	7	img -> samplesperpixel
FIELD	1497:23	1497:28	8	img -> samplesperpixel
LEAF_NODE	1497:23	1497:23	9	img
LEAF_NODE	1497:26	1497:26	9	->
LEAF_NODE	1497:28	1497:28	9	samplesperpixel
LEAF_NODE	1497:43	1497:43	4	;
SIMPLE_DECL	1498:1	1498:26	3	uint16 * wp ; wp = ( uint16 * ) pp ;
VAR_DECL	1498:1	1498:9	4	uint16 * wp ; wp = ( uint16 * ) pp
TYPE	1498:1	1498:8	5	uint16 *
TYPE_NAME	1498:1	1498:1	6	uint16
LEAF_NODE	1498:1	1498:1	7	uint16
POINTER	1498:8	1498:8	6	*
LEAF_NODE	1498:8	1498:8	7	*
NAME	1498:9	1498:9	5	wp
LEAF_NODE	1498:9	1498:9	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	1498:9	1498:9	5	wp = ( uint16 * ) pp
ASSIGN	1498:9	1498:14	6	wp = ( uint16 * ) pp
LVAL	1498:9	1498:9	7	wp
NAME	1498:9	1498:9	8	wp
LEAF_NODE	1498:9	1498:9	9	wp
ASSIGN_OP	1498:12	1498:12	7	=
LEAF_NODE	1498:12	1498:12	8	=
RVAL	1498:14	1498:24	7	( uint16 * ) pp
LEAF_NODE	1498:14	1498:14	8	(
TYPE_NAME	1498:15	1498:15	8	uint16
LEAF_NODE	1498:15	1498:15	9	uint16
LEAF_NODE	1498:22	1498:22	8	*
LEAF_NODE	1498:23	1498:23	8	)
FIELD	1498:24	1498:24	8	pp
LEAF_NODE	1498:24	1498:24	9	pp
LEAF_NODE	1498:26	1498:26	4	;
EXPR_STATEMENT	1499:1	1499:9	3	( void ) y ;
EXPR	1499:1	1499:8	4	( void ) y
LEAF_NODE	1499:1	1499:1	5	(
TYPE_NAME	1499:2	1499:2	5	void
LEAF_NODE	1499:2	1499:2	6	void
LEAF_NODE	1499:6	1499:6	5	)
FIELD	1499:8	1499:8	5	y
LEAF_NODE	1499:8	1499:8	6	y
LEAF_NODE	1499:9	1499:9	4	;
EXPR_STATEMENT	1500:1	1500:28	3	fromskew *= samplesperpixel ;
EXPR	1500:1	1500:1	4	fromskew *= samplesperpixel
ASSIGN	1500:1	1500:13	5	fromskew *= samplesperpixel
LVAL	1500:1	1500:1	6	fromskew
FIELD	1500:1	1500:1	7	fromskew
LEAF_NODE	1500:1	1500:1	8	fromskew
ASSIGN_OP	1500:10	1500:10	6	*=
LEAF_NODE	1500:10	1500:10	7	*=
RVAL	1500:13	1500:13	6	samplesperpixel
FIELD	1500:13	1500:13	7	samplesperpixel
LEAF_NODE	1500:13	1500:13	8	samplesperpixel
LEAF_NODE	1500:28	1500:28	4	;
ITERATION	1501:1	1501:20	3	
KEYWORD	1501:1	1501:1	4	for
LEAF_NODE	1501:1	1501:1	5	for
LEAF_NODE	1501:4	1501:4	4	(
FOR_INIT	1501:6	1501:6	4	;
LEAF_NODE	1501:6	1501:6	5	;
CONDITION	1501:8	1501:8	4	h > 0
EXPR	1501:8	1501:12	5	h > 0
FIELD	1501:8	1501:8	6	h
LEAF_NODE	1501:8	1501:8	7	h
REL_OPERATOR	1501:10	1501:10	6	>
LEAF_NODE	1501:10	1501:10	7	>
FIELD	1501:12	1501:12	6	0
LEAF_NODE	1501:12	1501:12	7	0
LEAF_NODE	1501:13	1501:13	4	;
FOR_EXPR	1501:15	1501:15	4	-- h
EXPR	1501:15	1501:17	5	-- h
LEAF_NODE	1501:15	1501:15	6	--
FIELD	1501:17	1501:17	6	h
LEAF_NODE	1501:17	1501:17	7	h
LEAF_NODE	1501:18	1501:18	4	)
STATEMENTS	1501:20	1510:1	4	
LEAF_NODE	1501:20	1501:20	5	{
STATEMENTS	1502:2	1509:2	5	
ITERATION	1502:2	1502:26	6	
KEYWORD	1502:2	1502:2	7	for
LEAF_NODE	1502:2	1502:2	8	for
LEAF_NODE	1502:6	1502:6	7	(
FOR_INIT	1502:7	1502:12	7	x = w ;
EXPR	1502:7	1502:7	8	x = w
ASSIGN	1502:7	1502:11	9	x = w
LVAL	1502:7	1502:7	10	x
FIELD	1502:7	1502:7	11	x
LEAF_NODE	1502:7	1502:7	12	x
ASSIGN_OP	1502:9	1502:9	10	=
LEAF_NODE	1502:9	1502:9	11	=
RVAL	1502:11	1502:11	10	w
FIELD	1502:11	1502:11	11	w
LEAF_NODE	1502:11	1502:11	12	w
LEAF_NODE	1502:12	1502:12	8	;
CONDITION	1502:14	1502:14	7	x > 0
EXPR	1502:14	1502:18	8	x > 0
FIELD	1502:14	1502:14	9	x
LEAF_NODE	1502:14	1502:14	10	x
REL_OPERATOR	1502:16	1502:16	9	>
LEAF_NODE	1502:16	1502:16	10	>
FIELD	1502:18	1502:18	9	0
LEAF_NODE	1502:18	1502:18	10	0
LEAF_NODE	1502:19	1502:19	7	;
FOR_EXPR	1502:21	1502:21	7	-- x
EXPR	1502:21	1502:23	8	-- x
LEAF_NODE	1502:21	1502:21	9	--
FIELD	1502:23	1502:23	9	x
LEAF_NODE	1502:23	1502:23	10	x
LEAF_NODE	1502:24	1502:24	7	)
STATEMENTS	1502:26	1507:2	7	
LEAF_NODE	1502:26	1502:26	8	{
STATEMENTS	1503:3	1506:3	8	
EXPR_STATEMENT	1503:3	1505:33	9	* cp ++ = PACK ( img -> Bitdepth16To8 [ wp [ 0 ] ] , img -> Bitdepth16To8 [ wp [ 1 ] ] , img -> Bitdepth16To8 [ wp [ 2 ] ] ) ;
EXPR	1503:3	1503:3	10	* cp ++ = PACK ( img -> Bitdepth16To8 [ wp [ 0 ] ] , img -> Bitdepth16To8 [ wp [ 1 ] ] , img -> Bitdepth16To8 [ wp [ 2 ] ] )
ASSIGN	1503:3	1503:11	11	* cp ++ = PACK ( img -> Bitdepth16To8 [ wp [ 0 ] ] , img -> Bitdepth16To8 [ wp [ 1 ] ] , img -> Bitdepth16To8 [ wp [ 2 ] ] )
LVAL	1503:3	1503:3	12	* cp ++
UNARY_EXPR	1503:3	1503:4	13	* cp ++
UNARY_OPERATOR	1503:3	1503:3	14	*
LEAF_NODE	1503:3	1503:3	15	*
FIELD	1503:4	1503:6	14	cp ++
LEAF_NODE	1503:4	1503:4	15	cp
LEAF_NODE	1503:6	1503:6	15	++
ASSIGN_OP	1503:9	1503:9	12	=
LEAF_NODE	1503:9	1503:9	13	=
RVAL	1503:11	1503:11	12	PACK ( img -> Bitdepth16To8 [ wp [ 0 ] ] , img -> Bitdepth16To8 [ wp [ 1 ] ] , img -> Bitdepth16To8 [ wp [ 2 ] ] )
FUNCTION_CALL	1503:11	1505:32	13	PACK ( img -> Bitdepth16To8 [ wp [ 0 ] ] , img -> Bitdepth16To8 [ wp [ 1 ] ] , img -> Bitdepth16To8 [ wp [ 2 ] ] )
CALLEE	1503:11	1503:11	14	PACK
LEAF_NODE	1503:11	1503:11	15	PACK
LEAF_NODE	1503:15	1503:15	14	(
ARGUMENT	1503:16	1503:16	14	img -> Bitdepth16To8 [ wp [ 0 ] ]
FIELD	1503:16	1503:40	15	img -> Bitdepth16To8 [ wp [ 0 ] ]
LEAF_NODE	1503:16	1503:16	16	img
LEAF_NODE	1503:19	1503:19	16	->
LEAF_NODE	1503:21	1503:21	16	Bitdepth16To8
LEAF_NODE	1503:34	1503:34	16	[
EXPR	1503:35	1503:35	16	wp [ 0 ]
FIELD	1503:35	1503:39	17	wp [ 0 ]
LEAF_NODE	1503:35	1503:35	18	wp
LEAF_NODE	1503:37	1503:37	18	[
EXPR	1503:38	1503:38	18	0
FIELD	1503:38	1503:38	19	0
LEAF_NODE	1503:38	1503:38	20	0
LEAF_NODE	1503:39	1503:39	18	]
LEAF_NODE	1503:40	1503:40	16	]
LEAF_NODE	1503:41	1503:41	14	,
ARGUMENT	1504:7	1504:7	14	img -> Bitdepth16To8 [ wp [ 1 ] ]
FIELD	1504:7	1504:31	15	img -> Bitdepth16To8 [ wp [ 1 ] ]
LEAF_NODE	1504:7	1504:7	16	img
LEAF_NODE	1504:10	1504:10	16	->
LEAF_NODE	1504:12	1504:12	16	Bitdepth16To8
LEAF_NODE	1504:25	1504:25	16	[
EXPR	1504:26	1504:26	16	wp [ 1 ]
FIELD	1504:26	1504:30	17	wp [ 1 ]
LEAF_NODE	1504:26	1504:26	18	wp
LEAF_NODE	1504:28	1504:28	18	[
EXPR	1504:29	1504:29	18	1
FIELD	1504:29	1504:29	19	1
LEAF_NODE	1504:29	1504:29	20	1
LEAF_NODE	1504:30	1504:30	18	]
LEAF_NODE	1504:31	1504:31	16	]
LEAF_NODE	1504:32	1504:32	14	,
ARGUMENT	1505:7	1505:7	14	img -> Bitdepth16To8 [ wp [ 2 ] ]
FIELD	1505:7	1505:31	15	img -> Bitdepth16To8 [ wp [ 2 ] ]
LEAF_NODE	1505:7	1505:7	16	img
LEAF_NODE	1505:10	1505:10	16	->
LEAF_NODE	1505:12	1505:12	16	Bitdepth16To8
LEAF_NODE	1505:25	1505:25	16	[
EXPR	1505:26	1505:26	16	wp [ 2 ]
FIELD	1505:26	1505:30	17	wp [ 2 ]
LEAF_NODE	1505:26	1505:26	18	wp
LEAF_NODE	1505:28	1505:28	18	[
EXPR	1505:29	1505:29	18	2
FIELD	1505:29	1505:29	19	2
LEAF_NODE	1505:29	1505:29	20	2
LEAF_NODE	1505:30	1505:30	18	]
LEAF_NODE	1505:31	1505:31	16	]
LEAF_NODE	1505:32	1505:32	14	)
LEAF_NODE	1505:33	1505:33	10	;
EXPR_STATEMENT	1506:3	1506:24	9	wp += samplesperpixel ;
EXPR	1506:3	1506:3	10	wp += samplesperpixel
ASSIGN	1506:3	1506:9	11	wp += samplesperpixel
LVAL	1506:3	1506:3	12	wp
FIELD	1506:3	1506:3	13	wp
LEAF_NODE	1506:3	1506:3	14	wp
ASSIGN_OP	1506:6	1506:6	12	+=
LEAF_NODE	1506:6	1506:6	13	+=
RVAL	1506:9	1506:9	12	samplesperpixel
FIELD	1506:9	1506:9	13	samplesperpixel
LEAF_NODE	1506:9	1506:9	14	samplesperpixel
LEAF_NODE	1506:24	1506:24	10	;
LEAF_NODE	1507:2	1507:2	8	}
EXPR_STATEMENT	1508:2	1508:14	6	cp += toskew ;
EXPR	1508:2	1508:2	7	cp += toskew
ASSIGN	1508:2	1508:8	8	cp += toskew
LVAL	1508:2	1508:2	9	cp
FIELD	1508:2	1508:2	10	cp
LEAF_NODE	1508:2	1508:2	11	cp
ASSIGN_OP	1508:5	1508:5	9	+=
LEAF_NODE	1508:5	1508:5	10	+=
RVAL	1508:8	1508:8	9	toskew
FIELD	1508:8	1508:8	10	toskew
LEAF_NODE	1508:8	1508:8	11	toskew
LEAF_NODE	1508:14	1508:14	7	;
EXPR_STATEMENT	1509:2	1509:16	6	wp += fromskew ;
EXPR	1509:2	1509:2	7	wp += fromskew
ASSIGN	1509:2	1509:8	8	wp += fromskew
LVAL	1509:2	1509:2	9	wp
FIELD	1509:2	1509:2	10	wp
LEAF_NODE	1509:2	1509:2	11	wp
ASSIGN_OP	1509:5	1509:5	9	+=
LEAF_NODE	1509:5	1509:5	10	+=
RVAL	1509:8	1509:8	9	fromskew
FIELD	1509:8	1509:8	10	fromskew
LEAF_NODE	1509:8	1509:8	11	fromskew
LEAF_NODE	1509:16	1509:16	7	;
LEAF_NODE	1510:1	1510:1	5	}
LEAF_NODE	1511:0	1511:0	2	}
FUNCTION_DEF	0:0	1534:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1517:0	1517:0	2	DECLAREContigPutFunc
LEAF_NODE	1517:0	1517:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1517:20	1517:44	2	( putRGBAAcontig16bittile )
LEAF_NODE	1517:20	1517:20	3	(
PARAMETER_DECL	1517:21	1517:21	3	putRGBAAcontig16bittile
LEAF_NODE	1517:21	1517:21	4	putRGBAAcontig16bittile
LEAF_NODE	1517:44	1517:44	3	)
LEAF_NODE	1518:0	1518:0	2	{
STATEMENTS	1519:1	1523:1	2	
SIMPLE_DECL	1519:1	1519:43	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1519:1	1519:5	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1519:1	1519:1	5	int
TYPE_NAME	1519:1	1519:1	6	int
LEAF_NODE	1519:1	1519:1	7	int
NAME	1519:5	1519:5	5	samplesperpixel
LEAF_NODE	1519:5	1519:5	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1519:5	1519:5	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1519:5	1519:23	6	samplesperpixel = img -> samplesperpixel
LVAL	1519:5	1519:5	7	samplesperpixel
NAME	1519:5	1519:5	8	samplesperpixel
LEAF_NODE	1519:5	1519:5	9	samplesperpixel
ASSIGN_OP	1519:21	1519:21	7	=
LEAF_NODE	1519:21	1519:21	8	=
RVAL	1519:23	1519:23	7	img -> samplesperpixel
FIELD	1519:23	1519:28	8	img -> samplesperpixel
LEAF_NODE	1519:23	1519:23	9	img
LEAF_NODE	1519:26	1519:26	9	->
LEAF_NODE	1519:28	1519:28	9	samplesperpixel
LEAF_NODE	1519:43	1519:43	4	;
SIMPLE_DECL	1520:1	1520:26	3	uint16 * wp ; wp = ( uint16 * ) pp ;
VAR_DECL	1520:1	1520:9	4	uint16 * wp ; wp = ( uint16 * ) pp
TYPE	1520:1	1520:8	5	uint16 *
TYPE_NAME	1520:1	1520:1	6	uint16
LEAF_NODE	1520:1	1520:1	7	uint16
POINTER	1520:8	1520:8	6	*
LEAF_NODE	1520:8	1520:8	7	*
NAME	1520:9	1520:9	5	wp
LEAF_NODE	1520:9	1520:9	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	1520:9	1520:9	5	wp = ( uint16 * ) pp
ASSIGN	1520:9	1520:14	6	wp = ( uint16 * ) pp
LVAL	1520:9	1520:9	7	wp
NAME	1520:9	1520:9	8	wp
LEAF_NODE	1520:9	1520:9	9	wp
ASSIGN_OP	1520:12	1520:12	7	=
LEAF_NODE	1520:12	1520:12	8	=
RVAL	1520:14	1520:24	7	( uint16 * ) pp
LEAF_NODE	1520:14	1520:14	8	(
TYPE_NAME	1520:15	1520:15	8	uint16
LEAF_NODE	1520:15	1520:15	9	uint16
LEAF_NODE	1520:22	1520:22	8	*
LEAF_NODE	1520:23	1520:23	8	)
FIELD	1520:24	1520:24	8	pp
LEAF_NODE	1520:24	1520:24	9	pp
LEAF_NODE	1520:26	1520:26	4	;
EXPR_STATEMENT	1521:1	1521:9	3	( void ) y ;
EXPR	1521:1	1521:8	4	( void ) y
LEAF_NODE	1521:1	1521:1	5	(
TYPE_NAME	1521:2	1521:2	5	void
LEAF_NODE	1521:2	1521:2	6	void
LEAF_NODE	1521:6	1521:6	5	)
FIELD	1521:8	1521:8	5	y
LEAF_NODE	1521:8	1521:8	6	y
LEAF_NODE	1521:9	1521:9	4	;
EXPR_STATEMENT	1522:1	1522:28	3	fromskew *= samplesperpixel ;
EXPR	1522:1	1522:1	4	fromskew *= samplesperpixel
ASSIGN	1522:1	1522:13	5	fromskew *= samplesperpixel
LVAL	1522:1	1522:1	6	fromskew
FIELD	1522:1	1522:1	7	fromskew
LEAF_NODE	1522:1	1522:1	8	fromskew
ASSIGN_OP	1522:10	1522:10	6	*=
LEAF_NODE	1522:10	1522:10	7	*=
RVAL	1522:13	1522:13	6	samplesperpixel
FIELD	1522:13	1522:13	7	samplesperpixel
LEAF_NODE	1522:13	1522:13	8	samplesperpixel
LEAF_NODE	1522:28	1522:28	4	;
ITERATION	1523:1	1523:20	3	
KEYWORD	1523:1	1523:1	4	for
LEAF_NODE	1523:1	1523:1	5	for
LEAF_NODE	1523:4	1523:4	4	(
FOR_INIT	1523:6	1523:6	4	;
LEAF_NODE	1523:6	1523:6	5	;
CONDITION	1523:8	1523:8	4	h > 0
EXPR	1523:8	1523:12	5	h > 0
FIELD	1523:8	1523:8	6	h
LEAF_NODE	1523:8	1523:8	7	h
REL_OPERATOR	1523:10	1523:10	6	>
LEAF_NODE	1523:10	1523:10	7	>
FIELD	1523:12	1523:12	6	0
LEAF_NODE	1523:12	1523:12	7	0
LEAF_NODE	1523:13	1523:13	4	;
FOR_EXPR	1523:15	1523:15	4	-- h
EXPR	1523:15	1523:17	5	-- h
LEAF_NODE	1523:15	1523:15	6	--
FIELD	1523:17	1523:17	6	h
LEAF_NODE	1523:17	1523:17	7	h
LEAF_NODE	1523:18	1523:18	4	)
STATEMENTS	1523:20	1533:1	4	
LEAF_NODE	1523:20	1523:20	5	{
STATEMENTS	1524:2	1532:2	5	
ITERATION	1524:2	1524:26	6	
KEYWORD	1524:2	1524:2	7	for
LEAF_NODE	1524:2	1524:2	8	for
LEAF_NODE	1524:6	1524:6	7	(
FOR_INIT	1524:7	1524:12	7	x = w ;
EXPR	1524:7	1524:7	8	x = w
ASSIGN	1524:7	1524:11	9	x = w
LVAL	1524:7	1524:7	10	x
FIELD	1524:7	1524:7	11	x
LEAF_NODE	1524:7	1524:7	12	x
ASSIGN_OP	1524:9	1524:9	10	=
LEAF_NODE	1524:9	1524:9	11	=
RVAL	1524:11	1524:11	10	w
FIELD	1524:11	1524:11	11	w
LEAF_NODE	1524:11	1524:11	12	w
LEAF_NODE	1524:12	1524:12	8	;
CONDITION	1524:14	1524:14	7	x > 0
EXPR	1524:14	1524:18	8	x > 0
FIELD	1524:14	1524:14	9	x
LEAF_NODE	1524:14	1524:14	10	x
REL_OPERATOR	1524:16	1524:16	9	>
LEAF_NODE	1524:16	1524:16	10	>
FIELD	1524:18	1524:18	9	0
LEAF_NODE	1524:18	1524:18	10	0
LEAF_NODE	1524:19	1524:19	7	;
FOR_EXPR	1524:21	1524:21	7	-- x
EXPR	1524:21	1524:23	8	-- x
LEAF_NODE	1524:21	1524:21	9	--
FIELD	1524:23	1524:23	9	x
LEAF_NODE	1524:23	1524:23	10	x
LEAF_NODE	1524:24	1524:24	7	)
STATEMENTS	1524:26	1530:2	7	
LEAF_NODE	1524:26	1524:26	8	{
STATEMENTS	1525:3	1529:3	8	
EXPR_STATEMENT	1525:3	1528:33	9	* cp ++ = PACK4 ( img -> Bitdepth16To8 [ wp [ 0 ] ] , img -> Bitdepth16To8 [ wp [ 1 ] ] , img -> Bitdepth16To8 [ wp [ 2 ] ] , img -> Bitdepth16To8 [ wp [ 3 ] ] ) ;
EXPR	1525:3	1525:3	10	* cp ++ = PACK4 ( img -> Bitdepth16To8 [ wp [ 0 ] ] , img -> Bitdepth16To8 [ wp [ 1 ] ] , img -> Bitdepth16To8 [ wp [ 2 ] ] , img -> Bitdepth16To8 [ wp [ 3 ] ] )
ASSIGN	1525:3	1525:11	11	* cp ++ = PACK4 ( img -> Bitdepth16To8 [ wp [ 0 ] ] , img -> Bitdepth16To8 [ wp [ 1 ] ] , img -> Bitdepth16To8 [ wp [ 2 ] ] , img -> Bitdepth16To8 [ wp [ 3 ] ] )
LVAL	1525:3	1525:3	12	* cp ++
UNARY_EXPR	1525:3	1525:4	13	* cp ++
UNARY_OPERATOR	1525:3	1525:3	14	*
LEAF_NODE	1525:3	1525:3	15	*
FIELD	1525:4	1525:6	14	cp ++
LEAF_NODE	1525:4	1525:4	15	cp
LEAF_NODE	1525:6	1525:6	15	++
ASSIGN_OP	1525:9	1525:9	12	=
LEAF_NODE	1525:9	1525:9	13	=
RVAL	1525:11	1525:11	12	PACK4 ( img -> Bitdepth16To8 [ wp [ 0 ] ] , img -> Bitdepth16To8 [ wp [ 1 ] ] , img -> Bitdepth16To8 [ wp [ 2 ] ] , img -> Bitdepth16To8 [ wp [ 3 ] ] )
FUNCTION_CALL	1525:11	1528:32	13	PACK4 ( img -> Bitdepth16To8 [ wp [ 0 ] ] , img -> Bitdepth16To8 [ wp [ 1 ] ] , img -> Bitdepth16To8 [ wp [ 2 ] ] , img -> Bitdepth16To8 [ wp [ 3 ] ] )
CALLEE	1525:11	1525:11	14	PACK4
LEAF_NODE	1525:11	1525:11	15	PACK4
LEAF_NODE	1525:16	1525:16	14	(
ARGUMENT	1525:17	1525:17	14	img -> Bitdepth16To8 [ wp [ 0 ] ]
FIELD	1525:17	1525:41	15	img -> Bitdepth16To8 [ wp [ 0 ] ]
LEAF_NODE	1525:17	1525:17	16	img
LEAF_NODE	1525:20	1525:20	16	->
LEAF_NODE	1525:22	1525:22	16	Bitdepth16To8
LEAF_NODE	1525:35	1525:35	16	[
EXPR	1525:36	1525:36	16	wp [ 0 ]
FIELD	1525:36	1525:40	17	wp [ 0 ]
LEAF_NODE	1525:36	1525:36	18	wp
LEAF_NODE	1525:38	1525:38	18	[
EXPR	1525:39	1525:39	18	0
FIELD	1525:39	1525:39	19	0
LEAF_NODE	1525:39	1525:39	20	0
LEAF_NODE	1525:40	1525:40	18	]
LEAF_NODE	1525:41	1525:41	16	]
LEAF_NODE	1525:42	1525:42	14	,
ARGUMENT	1526:7	1526:7	14	img -> Bitdepth16To8 [ wp [ 1 ] ]
FIELD	1526:7	1526:31	15	img -> Bitdepth16To8 [ wp [ 1 ] ]
LEAF_NODE	1526:7	1526:7	16	img
LEAF_NODE	1526:10	1526:10	16	->
LEAF_NODE	1526:12	1526:12	16	Bitdepth16To8
LEAF_NODE	1526:25	1526:25	16	[
EXPR	1526:26	1526:26	16	wp [ 1 ]
FIELD	1526:26	1526:30	17	wp [ 1 ]
LEAF_NODE	1526:26	1526:26	18	wp
LEAF_NODE	1526:28	1526:28	18	[
EXPR	1526:29	1526:29	18	1
FIELD	1526:29	1526:29	19	1
LEAF_NODE	1526:29	1526:29	20	1
LEAF_NODE	1526:30	1526:30	18	]
LEAF_NODE	1526:31	1526:31	16	]
LEAF_NODE	1526:32	1526:32	14	,
ARGUMENT	1527:7	1527:7	14	img -> Bitdepth16To8 [ wp [ 2 ] ]
FIELD	1527:7	1527:31	15	img -> Bitdepth16To8 [ wp [ 2 ] ]
LEAF_NODE	1527:7	1527:7	16	img
LEAF_NODE	1527:10	1527:10	16	->
LEAF_NODE	1527:12	1527:12	16	Bitdepth16To8
LEAF_NODE	1527:25	1527:25	16	[
EXPR	1527:26	1527:26	16	wp [ 2 ]
FIELD	1527:26	1527:30	17	wp [ 2 ]
LEAF_NODE	1527:26	1527:26	18	wp
LEAF_NODE	1527:28	1527:28	18	[
EXPR	1527:29	1527:29	18	2
FIELD	1527:29	1527:29	19	2
LEAF_NODE	1527:29	1527:29	20	2
LEAF_NODE	1527:30	1527:30	18	]
LEAF_NODE	1527:31	1527:31	16	]
LEAF_NODE	1527:32	1527:32	14	,
ARGUMENT	1528:7	1528:7	14	img -> Bitdepth16To8 [ wp [ 3 ] ]
FIELD	1528:7	1528:31	15	img -> Bitdepth16To8 [ wp [ 3 ] ]
LEAF_NODE	1528:7	1528:7	16	img
LEAF_NODE	1528:10	1528:10	16	->
LEAF_NODE	1528:12	1528:12	16	Bitdepth16To8
LEAF_NODE	1528:25	1528:25	16	[
EXPR	1528:26	1528:26	16	wp [ 3 ]
FIELD	1528:26	1528:30	17	wp [ 3 ]
LEAF_NODE	1528:26	1528:26	18	wp
LEAF_NODE	1528:28	1528:28	18	[
EXPR	1528:29	1528:29	18	3
FIELD	1528:29	1528:29	19	3
LEAF_NODE	1528:29	1528:29	20	3
LEAF_NODE	1528:30	1528:30	18	]
LEAF_NODE	1528:31	1528:31	16	]
LEAF_NODE	1528:32	1528:32	14	)
LEAF_NODE	1528:33	1528:33	10	;
EXPR_STATEMENT	1529:3	1529:24	9	wp += samplesperpixel ;
EXPR	1529:3	1529:3	10	wp += samplesperpixel
ASSIGN	1529:3	1529:9	11	wp += samplesperpixel
LVAL	1529:3	1529:3	12	wp
FIELD	1529:3	1529:3	13	wp
LEAF_NODE	1529:3	1529:3	14	wp
ASSIGN_OP	1529:6	1529:6	12	+=
LEAF_NODE	1529:6	1529:6	13	+=
RVAL	1529:9	1529:9	12	samplesperpixel
FIELD	1529:9	1529:9	13	samplesperpixel
LEAF_NODE	1529:9	1529:9	14	samplesperpixel
LEAF_NODE	1529:24	1529:24	10	;
LEAF_NODE	1530:2	1530:2	8	}
EXPR_STATEMENT	1531:2	1531:14	6	cp += toskew ;
EXPR	1531:2	1531:2	7	cp += toskew
ASSIGN	1531:2	1531:8	8	cp += toskew
LVAL	1531:2	1531:2	9	cp
FIELD	1531:2	1531:2	10	cp
LEAF_NODE	1531:2	1531:2	11	cp
ASSIGN_OP	1531:5	1531:5	9	+=
LEAF_NODE	1531:5	1531:5	10	+=
RVAL	1531:8	1531:8	9	toskew
FIELD	1531:8	1531:8	10	toskew
LEAF_NODE	1531:8	1531:8	11	toskew
LEAF_NODE	1531:14	1531:14	7	;
EXPR_STATEMENT	1532:2	1532:16	6	wp += fromskew ;
EXPR	1532:2	1532:2	7	wp += fromskew
ASSIGN	1532:2	1532:8	8	wp += fromskew
LVAL	1532:2	1532:2	9	wp
FIELD	1532:2	1532:2	10	wp
LEAF_NODE	1532:2	1532:2	11	wp
ASSIGN_OP	1532:5	1532:5	9	+=
LEAF_NODE	1532:5	1532:5	10	+=
RVAL	1532:8	1532:8	9	fromskew
FIELD	1532:8	1532:8	10	fromskew
LEAF_NODE	1532:8	1532:8	11	fromskew
LEAF_NODE	1532:16	1532:16	7	;
LEAF_NODE	1533:1	1533:1	5	}
LEAF_NODE	1534:0	1534:0	2	}
FUNCTION_DEF	0:0	1561:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1540:0	1540:0	2	DECLAREContigPutFunc
LEAF_NODE	1540:0	1540:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1540:20	1540:44	2	( putRGBUAcontig16bittile )
LEAF_NODE	1540:20	1540:20	3	(
PARAMETER_DECL	1540:21	1540:21	3	putRGBUAcontig16bittile
LEAF_NODE	1540:21	1540:21	4	putRGBUAcontig16bittile
LEAF_NODE	1540:44	1540:44	3	)
LEAF_NODE	1541:0	1541:0	2	{
STATEMENTS	1542:1	1546:1	2	
SIMPLE_DECL	1542:1	1542:43	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1542:1	1542:5	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1542:1	1542:1	5	int
TYPE_NAME	1542:1	1542:1	6	int
LEAF_NODE	1542:1	1542:1	7	int
NAME	1542:5	1542:5	5	samplesperpixel
LEAF_NODE	1542:5	1542:5	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1542:5	1542:5	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1542:5	1542:23	6	samplesperpixel = img -> samplesperpixel
LVAL	1542:5	1542:5	7	samplesperpixel
NAME	1542:5	1542:5	8	samplesperpixel
LEAF_NODE	1542:5	1542:5	9	samplesperpixel
ASSIGN_OP	1542:21	1542:21	7	=
LEAF_NODE	1542:21	1542:21	8	=
RVAL	1542:23	1542:23	7	img -> samplesperpixel
FIELD	1542:23	1542:28	8	img -> samplesperpixel
LEAF_NODE	1542:23	1542:23	9	img
LEAF_NODE	1542:26	1542:26	9	->
LEAF_NODE	1542:28	1542:28	9	samplesperpixel
LEAF_NODE	1542:43	1542:43	4	;
SIMPLE_DECL	1543:1	1543:26	3	uint16 * wp ; wp = ( uint16 * ) pp ;
VAR_DECL	1543:1	1543:9	4	uint16 * wp ; wp = ( uint16 * ) pp
TYPE	1543:1	1543:8	5	uint16 *
TYPE_NAME	1543:1	1543:1	6	uint16
LEAF_NODE	1543:1	1543:1	7	uint16
POINTER	1543:8	1543:8	6	*
LEAF_NODE	1543:8	1543:8	7	*
NAME	1543:9	1543:9	5	wp
LEAF_NODE	1543:9	1543:9	6	wp
LEAF_NODE	0:0	0:0	5	;
INIT	1543:9	1543:9	5	wp = ( uint16 * ) pp
ASSIGN	1543:9	1543:14	6	wp = ( uint16 * ) pp
LVAL	1543:9	1543:9	7	wp
NAME	1543:9	1543:9	8	wp
LEAF_NODE	1543:9	1543:9	9	wp
ASSIGN_OP	1543:12	1543:12	7	=
LEAF_NODE	1543:12	1543:12	8	=
RVAL	1543:14	1543:24	7	( uint16 * ) pp
LEAF_NODE	1543:14	1543:14	8	(
TYPE_NAME	1543:15	1543:15	8	uint16
LEAF_NODE	1543:15	1543:15	9	uint16
LEAF_NODE	1543:22	1543:22	8	*
LEAF_NODE	1543:23	1543:23	8	)
FIELD	1543:24	1543:24	8	pp
LEAF_NODE	1543:24	1543:24	9	pp
LEAF_NODE	1543:26	1543:26	4	;
EXPR_STATEMENT	1544:1	1544:9	3	( void ) y ;
EXPR	1544:1	1544:8	4	( void ) y
LEAF_NODE	1544:1	1544:1	5	(
TYPE_NAME	1544:2	1544:2	5	void
LEAF_NODE	1544:2	1544:2	6	void
LEAF_NODE	1544:6	1544:6	5	)
FIELD	1544:8	1544:8	5	y
LEAF_NODE	1544:8	1544:8	6	y
LEAF_NODE	1544:9	1544:9	4	;
EXPR_STATEMENT	1545:1	1545:28	3	fromskew *= samplesperpixel ;
EXPR	1545:1	1545:1	4	fromskew *= samplesperpixel
ASSIGN	1545:1	1545:13	5	fromskew *= samplesperpixel
LVAL	1545:1	1545:1	6	fromskew
FIELD	1545:1	1545:1	7	fromskew
LEAF_NODE	1545:1	1545:1	8	fromskew
ASSIGN_OP	1545:10	1545:10	6	*=
LEAF_NODE	1545:10	1545:10	7	*=
RVAL	1545:13	1545:13	6	samplesperpixel
FIELD	1545:13	1545:13	7	samplesperpixel
LEAF_NODE	1545:13	1545:13	8	samplesperpixel
LEAF_NODE	1545:28	1545:28	4	;
ITERATION	1546:1	1546:20	3	
KEYWORD	1546:1	1546:1	4	for
LEAF_NODE	1546:1	1546:1	5	for
LEAF_NODE	1546:4	1546:4	4	(
FOR_INIT	1546:6	1546:6	4	;
LEAF_NODE	1546:6	1546:6	5	;
CONDITION	1546:8	1546:8	4	h > 0
EXPR	1546:8	1546:12	5	h > 0
FIELD	1546:8	1546:8	6	h
LEAF_NODE	1546:8	1546:8	7	h
REL_OPERATOR	1546:10	1546:10	6	>
LEAF_NODE	1546:10	1546:10	7	>
FIELD	1546:12	1546:12	6	0
LEAF_NODE	1546:12	1546:12	7	0
LEAF_NODE	1546:13	1546:13	4	;
FOR_EXPR	1546:15	1546:15	4	-- h
EXPR	1546:15	1546:17	5	-- h
LEAF_NODE	1546:15	1546:15	6	--
FIELD	1546:17	1546:17	6	h
LEAF_NODE	1546:17	1546:17	7	h
LEAF_NODE	1546:18	1546:18	4	)
STATEMENTS	1546:20	1560:1	4	
LEAF_NODE	1546:20	1546:20	5	{
STATEMENTS	1547:2	1559:2	5	
SIMPLE_DECL	1547:2	1547:16	6	uint32 r , uint32 g , uint32 b , uint32 a ;
INIT_DECL_LIST	1547:2	1547:2	7	uint32 r , uint32 g , uint32 b , uint32 a
VAR_DECL	1547:2	1547:9	8	uint32 r
TYPE	1547:2	1547:2	9	uint32
TYPE_NAME	1547:2	1547:2	10	uint32
LEAF_NODE	1547:2	1547:2	11	uint32
NAME	1547:9	1547:9	9	r
LEAF_NODE	1547:9	1547:9	10	r
LEAF_NODE	1547:10	1547:10	8	,
INIT_DECL_LIST	1547:2	1547:2	8	uint32 g , uint32 b , uint32 a
VAR_DECL	1547:2	1547:11	9	uint32 g
TYPE	1547:2	1547:2	10	uint32
TYPE_NAME	1547:2	1547:2	11	uint32
LEAF_NODE	1547:2	1547:2	12	uint32
NAME	1547:11	1547:11	10	g
LEAF_NODE	1547:11	1547:11	11	g
LEAF_NODE	1547:12	1547:12	9	,
INIT_DECL_LIST	1547:2	1547:2	9	uint32 b , uint32 a
VAR_DECL	1547:2	1547:13	10	uint32 b
TYPE	1547:2	1547:2	11	uint32
TYPE_NAME	1547:2	1547:2	12	uint32
LEAF_NODE	1547:2	1547:2	13	uint32
NAME	1547:13	1547:13	11	b
LEAF_NODE	1547:13	1547:13	12	b
LEAF_NODE	1547:14	1547:14	10	,
VAR_DECL	1547:2	1547:15	10	uint32 a
TYPE	1547:2	1547:2	11	uint32
TYPE_NAME	1547:2	1547:2	12	uint32
LEAF_NODE	1547:2	1547:2	13	uint32
NAME	1547:15	1547:15	11	a
LEAF_NODE	1547:15	1547:15	12	a
LEAF_NODE	1547:16	1547:16	7	;
SIMPLE_DECL	1548:2	1548:10	6	uint8 * m ;
VAR_DECL	1548:2	1548:9	7	uint8 * m
TYPE	1548:2	1548:7	8	uint8 *
TYPE_NAME	1548:2	1548:2	9	uint8
LEAF_NODE	1548:2	1548:2	10	uint8
POINTER	1548:7	1548:7	9	*
LEAF_NODE	1548:7	1548:7	10	*
NAME	1548:9	1548:9	8	m
LEAF_NODE	1548:9	1548:9	9	m
LEAF_NODE	1548:10	1548:10	7	;
ITERATION	1549:2	1549:26	6	
KEYWORD	1549:2	1549:2	7	for
LEAF_NODE	1549:2	1549:2	8	for
LEAF_NODE	1549:6	1549:6	7	(
FOR_INIT	1549:7	1549:12	7	x = w ;
EXPR	1549:7	1549:7	8	x = w
ASSIGN	1549:7	1549:11	9	x = w
LVAL	1549:7	1549:7	10	x
FIELD	1549:7	1549:7	11	x
LEAF_NODE	1549:7	1549:7	12	x
ASSIGN_OP	1549:9	1549:9	10	=
LEAF_NODE	1549:9	1549:9	11	=
RVAL	1549:11	1549:11	10	w
FIELD	1549:11	1549:11	11	w
LEAF_NODE	1549:11	1549:11	12	w
LEAF_NODE	1549:12	1549:12	8	;
CONDITION	1549:14	1549:14	7	x > 0
EXPR	1549:14	1549:18	8	x > 0
FIELD	1549:14	1549:14	9	x
LEAF_NODE	1549:14	1549:14	10	x
REL_OPERATOR	1549:16	1549:16	9	>
LEAF_NODE	1549:16	1549:16	10	>
FIELD	1549:18	1549:18	9	0
LEAF_NODE	1549:18	1549:18	10	0
LEAF_NODE	1549:19	1549:19	7	;
FOR_EXPR	1549:21	1549:21	7	-- x
EXPR	1549:21	1549:23	8	-- x
LEAF_NODE	1549:21	1549:21	9	--
FIELD	1549:23	1549:23	9	x
LEAF_NODE	1549:23	1549:23	10	x
LEAF_NODE	1549:24	1549:24	7	)
STATEMENTS	1549:26	1557:2	7	
LEAF_NODE	1549:26	1549:26	8	{
STATEMENTS	1550:3	1556:3	8	
EXPR_STATEMENT	1550:3	1550:32	9	a = img -> Bitdepth16To8 [ wp [ 3 ] ] ;
EXPR	1550:3	1550:3	10	a = img -> Bitdepth16To8 [ wp [ 3 ] ]
ASSIGN	1550:3	1550:7	11	a = img -> Bitdepth16To8 [ wp [ 3 ] ]
LVAL	1550:3	1550:3	12	a
FIELD	1550:3	1550:3	13	a
LEAF_NODE	1550:3	1550:3	14	a
ASSIGN_OP	1550:5	1550:5	12	=
LEAF_NODE	1550:5	1550:5	13	=
RVAL	1550:7	1550:7	12	img -> Bitdepth16To8 [ wp [ 3 ] ]
FIELD	1550:7	1550:31	13	img -> Bitdepth16To8 [ wp [ 3 ] ]
LEAF_NODE	1550:7	1550:7	14	img
LEAF_NODE	1550:10	1550:10	14	->
LEAF_NODE	1550:12	1550:12	14	Bitdepth16To8
LEAF_NODE	1550:25	1550:25	14	[
EXPR	1550:26	1550:26	14	wp [ 3 ]
FIELD	1550:26	1550:30	15	wp [ 3 ]
LEAF_NODE	1550:26	1550:26	16	wp
LEAF_NODE	1550:28	1550:28	16	[
EXPR	1550:29	1550:29	16	3
FIELD	1550:29	1550:29	17	3
LEAF_NODE	1550:29	1550:29	18	3
LEAF_NODE	1550:30	1550:30	16	]
LEAF_NODE	1550:31	1550:31	14	]
LEAF_NODE	1550:32	1550:32	10	;
EXPR_STATEMENT	1551:3	1551:34	9	m = img -> UaToAa + ( ( size_t ) a << 8 ) ;
EXPR	1551:3	1551:3	10	m = img -> UaToAa + ( ( size_t ) a << 8 )
ASSIGN	1551:3	1551:7	11	m = img -> UaToAa + ( ( size_t ) a << 8 )
LVAL	1551:3	1551:3	12	m
FIELD	1551:3	1551:3	13	m
LEAF_NODE	1551:3	1551:3	14	m
ASSIGN_OP	1551:5	1551:5	12	=
LEAF_NODE	1551:5	1551:5	13	=
RVAL	1551:7	1551:33	12	img -> UaToAa + ( ( size_t ) a << 8 )
FIELD	1551:7	1551:12	13	img -> UaToAa
LEAF_NODE	1551:7	1551:7	14	img
LEAF_NODE	1551:10	1551:10	14	->
LEAF_NODE	1551:12	1551:12	14	UaToAa
LEAF_NODE	1551:18	1551:18	13	+
LEAF_NODE	1551:19	1551:19	13	(
LEAF_NODE	1551:20	1551:20	13	(
TYPE_NAME	1551:21	1551:21	13	size_t
LEAF_NODE	1551:21	1551:21	14	size_t
LEAF_NODE	1551:27	1551:27	13	)
FIELD	1551:29	1551:29	13	a
LEAF_NODE	1551:29	1551:29	14	a
LEAF_NODE	1551:30	1551:30	13	<<
FIELD	1551:32	1551:32	13	8
LEAF_NODE	1551:32	1551:32	14	8
LEAF_NODE	1551:33	1551:33	13	)
LEAF_NODE	1551:34	1551:34	10	;
EXPR_STATEMENT	1552:3	1552:35	9	r = m [ img -> Bitdepth16To8 [ wp [ 0 ] ] ] ;
EXPR	1552:3	1552:3	10	r = m [ img -> Bitdepth16To8 [ wp [ 0 ] ] ]
ASSIGN	1552:3	1552:7	11	r = m [ img -> Bitdepth16To8 [ wp [ 0 ] ] ]
LVAL	1552:3	1552:3	12	r
FIELD	1552:3	1552:3	13	r
LEAF_NODE	1552:3	1552:3	14	r
ASSIGN_OP	1552:5	1552:5	12	=
LEAF_NODE	1552:5	1552:5	13	=
RVAL	1552:7	1552:7	12	m [ img -> Bitdepth16To8 [ wp [ 0 ] ] ]
FIELD	1552:7	1552:34	13	m [ img -> Bitdepth16To8 [ wp [ 0 ] ] ]
LEAF_NODE	1552:7	1552:7	14	m
LEAF_NODE	1552:8	1552:8	14	[
EXPR	1552:9	1552:9	14	img -> Bitdepth16To8 [ wp [ 0 ] ]
FIELD	1552:9	1552:33	15	img -> Bitdepth16To8 [ wp [ 0 ] ]
LEAF_NODE	1552:9	1552:9	16	img
LEAF_NODE	1552:12	1552:12	16	->
LEAF_NODE	1552:14	1552:14	16	Bitdepth16To8
LEAF_NODE	1552:27	1552:27	16	[
EXPR	1552:28	1552:28	16	wp [ 0 ]
FIELD	1552:28	1552:32	17	wp [ 0 ]
LEAF_NODE	1552:28	1552:28	18	wp
LEAF_NODE	1552:30	1552:30	18	[
EXPR	1552:31	1552:31	18	0
FIELD	1552:31	1552:31	19	0
LEAF_NODE	1552:31	1552:31	20	0
LEAF_NODE	1552:32	1552:32	18	]
LEAF_NODE	1552:33	1552:33	16	]
LEAF_NODE	1552:34	1552:34	14	]
LEAF_NODE	1552:35	1552:35	10	;
EXPR_STATEMENT	1553:3	1553:35	9	g = m [ img -> Bitdepth16To8 [ wp [ 1 ] ] ] ;
EXPR	1553:3	1553:3	10	g = m [ img -> Bitdepth16To8 [ wp [ 1 ] ] ]
ASSIGN	1553:3	1553:7	11	g = m [ img -> Bitdepth16To8 [ wp [ 1 ] ] ]
LVAL	1553:3	1553:3	12	g
FIELD	1553:3	1553:3	13	g
LEAF_NODE	1553:3	1553:3	14	g
ASSIGN_OP	1553:5	1553:5	12	=
LEAF_NODE	1553:5	1553:5	13	=
RVAL	1553:7	1553:7	12	m [ img -> Bitdepth16To8 [ wp [ 1 ] ] ]
FIELD	1553:7	1553:34	13	m [ img -> Bitdepth16To8 [ wp [ 1 ] ] ]
LEAF_NODE	1553:7	1553:7	14	m
LEAF_NODE	1553:8	1553:8	14	[
EXPR	1553:9	1553:9	14	img -> Bitdepth16To8 [ wp [ 1 ] ]
FIELD	1553:9	1553:33	15	img -> Bitdepth16To8 [ wp [ 1 ] ]
LEAF_NODE	1553:9	1553:9	16	img
LEAF_NODE	1553:12	1553:12	16	->
LEAF_NODE	1553:14	1553:14	16	Bitdepth16To8
LEAF_NODE	1553:27	1553:27	16	[
EXPR	1553:28	1553:28	16	wp [ 1 ]
FIELD	1553:28	1553:32	17	wp [ 1 ]
LEAF_NODE	1553:28	1553:28	18	wp
LEAF_NODE	1553:30	1553:30	18	[
EXPR	1553:31	1553:31	18	1
FIELD	1553:31	1553:31	19	1
LEAF_NODE	1553:31	1553:31	20	1
LEAF_NODE	1553:32	1553:32	18	]
LEAF_NODE	1553:33	1553:33	16	]
LEAF_NODE	1553:34	1553:34	14	]
LEAF_NODE	1553:35	1553:35	10	;
EXPR_STATEMENT	1554:3	1554:35	9	b = m [ img -> Bitdepth16To8 [ wp [ 2 ] ] ] ;
EXPR	1554:3	1554:3	10	b = m [ img -> Bitdepth16To8 [ wp [ 2 ] ] ]
ASSIGN	1554:3	1554:7	11	b = m [ img -> Bitdepth16To8 [ wp [ 2 ] ] ]
LVAL	1554:3	1554:3	12	b
FIELD	1554:3	1554:3	13	b
LEAF_NODE	1554:3	1554:3	14	b
ASSIGN_OP	1554:5	1554:5	12	=
LEAF_NODE	1554:5	1554:5	13	=
RVAL	1554:7	1554:7	12	m [ img -> Bitdepth16To8 [ wp [ 2 ] ] ]
FIELD	1554:7	1554:34	13	m [ img -> Bitdepth16To8 [ wp [ 2 ] ] ]
LEAF_NODE	1554:7	1554:7	14	m
LEAF_NODE	1554:8	1554:8	14	[
EXPR	1554:9	1554:9	14	img -> Bitdepth16To8 [ wp [ 2 ] ]
FIELD	1554:9	1554:33	15	img -> Bitdepth16To8 [ wp [ 2 ] ]
LEAF_NODE	1554:9	1554:9	16	img
LEAF_NODE	1554:12	1554:12	16	->
LEAF_NODE	1554:14	1554:14	16	Bitdepth16To8
LEAF_NODE	1554:27	1554:27	16	[
EXPR	1554:28	1554:28	16	wp [ 2 ]
FIELD	1554:28	1554:32	17	wp [ 2 ]
LEAF_NODE	1554:28	1554:28	18	wp
LEAF_NODE	1554:30	1554:30	18	[
EXPR	1554:31	1554:31	18	2
FIELD	1554:31	1554:31	19	2
LEAF_NODE	1554:31	1554:31	20	2
LEAF_NODE	1554:32	1554:32	18	]
LEAF_NODE	1554:33	1554:33	16	]
LEAF_NODE	1554:34	1554:34	14	]
LEAF_NODE	1554:35	1554:35	10	;
EXPR_STATEMENT	1555:3	1555:25	9	* cp ++ = PACK4 ( r , g , b , a ) ;
EXPR	1555:3	1555:3	10	* cp ++ = PACK4 ( r , g , b , a )
ASSIGN	1555:3	1555:11	11	* cp ++ = PACK4 ( r , g , b , a )
LVAL	1555:3	1555:3	12	* cp ++
UNARY_EXPR	1555:3	1555:4	13	* cp ++
UNARY_OPERATOR	1555:3	1555:3	14	*
LEAF_NODE	1555:3	1555:3	15	*
FIELD	1555:4	1555:6	14	cp ++
LEAF_NODE	1555:4	1555:4	15	cp
LEAF_NODE	1555:6	1555:6	15	++
ASSIGN_OP	1555:9	1555:9	12	=
LEAF_NODE	1555:9	1555:9	13	=
RVAL	1555:11	1555:11	12	PACK4 ( r , g , b , a )
FUNCTION_CALL	1555:11	1555:24	13	PACK4 ( r , g , b , a )
CALLEE	1555:11	1555:11	14	PACK4
LEAF_NODE	1555:11	1555:11	15	PACK4
LEAF_NODE	1555:16	1555:16	14	(
ARGUMENT	1555:17	1555:17	14	r
FIELD	1555:17	1555:17	15	r
LEAF_NODE	1555:17	1555:17	16	r
LEAF_NODE	1555:18	1555:18	14	,
ARGUMENT	1555:19	1555:19	14	g
FIELD	1555:19	1555:19	15	g
LEAF_NODE	1555:19	1555:19	16	g
LEAF_NODE	1555:20	1555:20	14	,
ARGUMENT	1555:21	1555:21	14	b
FIELD	1555:21	1555:21	15	b
LEAF_NODE	1555:21	1555:21	16	b
LEAF_NODE	1555:22	1555:22	14	,
ARGUMENT	1555:23	1555:23	14	a
FIELD	1555:23	1555:23	15	a
LEAF_NODE	1555:23	1555:23	16	a
LEAF_NODE	1555:24	1555:24	14	)
LEAF_NODE	1555:25	1555:25	10	;
EXPR_STATEMENT	1556:3	1556:24	9	wp += samplesperpixel ;
EXPR	1556:3	1556:3	10	wp += samplesperpixel
ASSIGN	1556:3	1556:9	11	wp += samplesperpixel
LVAL	1556:3	1556:3	12	wp
FIELD	1556:3	1556:3	13	wp
LEAF_NODE	1556:3	1556:3	14	wp
ASSIGN_OP	1556:6	1556:6	12	+=
LEAF_NODE	1556:6	1556:6	13	+=
RVAL	1556:9	1556:9	12	samplesperpixel
FIELD	1556:9	1556:9	13	samplesperpixel
LEAF_NODE	1556:9	1556:9	14	samplesperpixel
LEAF_NODE	1556:24	1556:24	10	;
LEAF_NODE	1557:2	1557:2	8	}
EXPR_STATEMENT	1558:2	1558:14	6	cp += toskew ;
EXPR	1558:2	1558:2	7	cp += toskew
ASSIGN	1558:2	1558:8	8	cp += toskew
LVAL	1558:2	1558:2	9	cp
FIELD	1558:2	1558:2	10	cp
LEAF_NODE	1558:2	1558:2	11	cp
ASSIGN_OP	1558:5	1558:5	9	+=
LEAF_NODE	1558:5	1558:5	10	+=
RVAL	1558:8	1558:8	9	toskew
FIELD	1558:8	1558:8	10	toskew
LEAF_NODE	1558:8	1558:8	11	toskew
LEAF_NODE	1558:14	1558:14	7	;
EXPR_STATEMENT	1559:2	1559:16	6	wp += fromskew ;
EXPR	1559:2	1559:2	7	wp += fromskew
ASSIGN	1559:2	1559:8	8	wp += fromskew
LVAL	1559:2	1559:2	9	wp
FIELD	1559:2	1559:2	10	wp
LEAF_NODE	1559:2	1559:2	11	wp
ASSIGN_OP	1559:5	1559:5	9	+=
LEAF_NODE	1559:5	1559:5	10	+=
RVAL	1559:8	1559:8	9	fromskew
FIELD	1559:8	1559:8	10	fromskew
LEAF_NODE	1559:8	1559:8	11	fromskew
LEAF_NODE	1559:16	1559:16	7	;
LEAF_NODE	1560:1	1560:1	5	}
LEAF_NODE	1561:0	1561:0	2	}
FUNCTION_DEF	0:0	1586:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1568:0	1568:0	2	DECLAREContigPutFunc
LEAF_NODE	1568:0	1568:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1568:20	1568:45	2	( putRGBcontig8bitCMYKtile )
LEAF_NODE	1568:20	1568:20	3	(
PARAMETER_DECL	1568:21	1568:21	3	putRGBcontig8bitCMYKtile
LEAF_NODE	1568:21	1568:21	4	putRGBcontig8bitCMYKtile
LEAF_NODE	1568:45	1568:45	3	)
LEAF_NODE	1569:0	1569:0	2	{
STATEMENTS	1570:4	1575:4	2	
SIMPLE_DECL	1570:4	1570:46	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1570:4	1570:8	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1570:4	1570:4	5	int
TYPE_NAME	1570:4	1570:4	6	int
LEAF_NODE	1570:4	1570:4	7	int
NAME	1570:8	1570:8	5	samplesperpixel
LEAF_NODE	1570:8	1570:8	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1570:8	1570:8	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1570:8	1570:26	6	samplesperpixel = img -> samplesperpixel
LVAL	1570:8	1570:8	7	samplesperpixel
NAME	1570:8	1570:8	8	samplesperpixel
LEAF_NODE	1570:8	1570:8	9	samplesperpixel
ASSIGN_OP	1570:24	1570:24	7	=
LEAF_NODE	1570:24	1570:24	8	=
RVAL	1570:26	1570:26	7	img -> samplesperpixel
FIELD	1570:26	1570:31	8	img -> samplesperpixel
LEAF_NODE	1570:26	1570:26	9	img
LEAF_NODE	1570:29	1570:29	9	->
LEAF_NODE	1570:31	1570:31	9	samplesperpixel
LEAF_NODE	1570:46	1570:46	4	;
SIMPLE_DECL	1571:4	1571:21	3	uint16 r , uint16 g , uint16 b , uint16 k ;
INIT_DECL_LIST	1571:4	1571:4	4	uint16 r , uint16 g , uint16 b , uint16 k
VAR_DECL	1571:4	1571:11	5	uint16 r
TYPE	1571:4	1571:4	6	uint16
TYPE_NAME	1571:4	1571:4	7	uint16
LEAF_NODE	1571:4	1571:4	8	uint16
NAME	1571:11	1571:11	6	r
LEAF_NODE	1571:11	1571:11	7	r
LEAF_NODE	1571:12	1571:12	5	,
INIT_DECL_LIST	1571:4	1571:4	5	uint16 g , uint16 b , uint16 k
VAR_DECL	1571:4	1571:14	6	uint16 g
TYPE	1571:4	1571:4	7	uint16
TYPE_NAME	1571:4	1571:4	8	uint16
LEAF_NODE	1571:4	1571:4	9	uint16
NAME	1571:14	1571:14	7	g
LEAF_NODE	1571:14	1571:14	8	g
LEAF_NODE	1571:15	1571:15	6	,
INIT_DECL_LIST	1571:4	1571:4	6	uint16 b , uint16 k
VAR_DECL	1571:4	1571:17	7	uint16 b
TYPE	1571:4	1571:4	8	uint16
TYPE_NAME	1571:4	1571:4	9	uint16
LEAF_NODE	1571:4	1571:4	10	uint16
NAME	1571:17	1571:17	8	b
LEAF_NODE	1571:17	1571:17	9	b
LEAF_NODE	1571:18	1571:18	7	,
VAR_DECL	1571:4	1571:20	7	uint16 k
TYPE	1571:4	1571:4	8	uint16
TYPE_NAME	1571:4	1571:4	9	uint16
LEAF_NODE	1571:4	1571:4	10	uint16
NAME	1571:20	1571:20	8	k
LEAF_NODE	1571:20	1571:20	9	k
LEAF_NODE	1571:21	1571:21	4	;
EXPR_STATEMENT	1573:4	1573:12	3	( void ) x ;
EXPR	1573:4	1573:11	4	( void ) x
LEAF_NODE	1573:4	1573:4	5	(
TYPE_NAME	1573:5	1573:5	5	void
LEAF_NODE	1573:5	1573:5	6	void
LEAF_NODE	1573:9	1573:9	5	)
FIELD	1573:11	1573:11	5	x
LEAF_NODE	1573:11	1573:11	6	x
LEAF_NODE	1573:12	1573:12	4	;
EXPR_STATEMENT	1573:14	1573:22	3	( void ) y ;
EXPR	1573:14	1573:21	4	( void ) y
LEAF_NODE	1573:14	1573:14	5	(
TYPE_NAME	1573:15	1573:15	5	void
LEAF_NODE	1573:15	1573:15	6	void
LEAF_NODE	1573:19	1573:19	5	)
FIELD	1573:21	1573:21	5	y
LEAF_NODE	1573:21	1573:21	6	y
LEAF_NODE	1573:22	1573:22	4	;
EXPR_STATEMENT	1574:4	1574:31	3	fromskew *= samplesperpixel ;
EXPR	1574:4	1574:4	4	fromskew *= samplesperpixel
ASSIGN	1574:4	1574:16	5	fromskew *= samplesperpixel
LVAL	1574:4	1574:4	6	fromskew
FIELD	1574:4	1574:4	7	fromskew
LEAF_NODE	1574:4	1574:4	8	fromskew
ASSIGN_OP	1574:13	1574:13	6	*=
LEAF_NODE	1574:13	1574:13	7	*=
RVAL	1574:16	1574:16	6	samplesperpixel
FIELD	1574:16	1574:16	7	samplesperpixel
LEAF_NODE	1574:16	1574:16	8	samplesperpixel
LEAF_NODE	1574:31	1574:31	4	;
ITERATION	1575:4	1575:23	3	
KEYWORD	1575:4	1575:4	4	for
LEAF_NODE	1575:4	1575:4	5	for
LEAF_NODE	1575:7	1575:7	4	(
FOR_INIT	1575:9	1575:9	4	;
LEAF_NODE	1575:9	1575:9	5	;
CONDITION	1575:11	1575:11	4	h > 0
EXPR	1575:11	1575:15	5	h > 0
FIELD	1575:11	1575:11	6	h
LEAF_NODE	1575:11	1575:11	7	h
REL_OPERATOR	1575:13	1575:13	6	>
LEAF_NODE	1575:13	1575:13	7	>
FIELD	1575:15	1575:15	6	0
LEAF_NODE	1575:15	1575:15	7	0
LEAF_NODE	1575:16	1575:16	4	;
FOR_EXPR	1575:18	1575:18	4	-- h
EXPR	1575:18	1575:20	5	-- h
LEAF_NODE	1575:18	1575:18	6	--
FIELD	1575:20	1575:20	6	h
LEAF_NODE	1575:20	1575:20	7	h
LEAF_NODE	1575:21	1575:21	4	)
STATEMENTS	1575:23	1585:4	4	
LEAF_NODE	1575:23	1575:23	5	{
STATEMENTS	1576:1	1584:1	5	
LEAF_NODE	1576:1	1576:1	6	UNROLL8
LEAF_NODE	1576:8	1576:8	6	(
LEAF_NODE	1576:9	1576:9	6	w
LEAF_NODE	1576:10	1576:10	6	,
EXPR_STATEMENT	1576:12	1577:20	6	NOP , k = 255 - pp [ 3 ] ;
EXPR	1576:12	1577:5	7	NOP , k = 255 - pp [ 3 ]
FIELD	1576:12	1576:12	8	NOP
LEAF_NODE	1576:12	1576:12	9	NOP
LEAF_NODE	1576:15	1576:15	8	,
ASSIGN	1577:5	1577:9	8	k = 255 - pp [ 3 ]
LVAL	1577:5	1577:5	9	k
FIELD	1577:5	1577:5	10	k
LEAF_NODE	1577:5	1577:5	11	k
ASSIGN_OP	1577:7	1577:7	9	=
LEAF_NODE	1577:7	1577:7	10	=
RVAL	1577:9	1577:15	9	255 - pp [ 3 ]
FIELD	1577:9	1577:9	10	255
LEAF_NODE	1577:9	1577:9	11	255
LEAF_NODE	1577:13	1577:13	10	-
FIELD	1577:15	1577:19	10	pp [ 3 ]
LEAF_NODE	1577:15	1577:15	11	pp
LEAF_NODE	1577:17	1577:17	11	[
EXPR	1577:18	1577:18	11	3
FIELD	1577:18	1577:18	12	3
LEAF_NODE	1577:18	1577:18	13	3
LEAF_NODE	1577:19	1577:19	11	]
LEAF_NODE	1577:20	1577:20	7	;
EXPR_STATEMENT	1578:5	1578:28	6	r = ( k * ( 255 - pp [ 0 ] ) ) / 255 ;
EXPR	1578:5	1578:5	7	r = ( k * ( 255 - pp [ 0 ] ) ) / 255
ASSIGN	1578:5	1578:9	8	r = ( k * ( 255 - pp [ 0 ] ) ) / 255
LVAL	1578:5	1578:5	9	r
FIELD	1578:5	1578:5	10	r
LEAF_NODE	1578:5	1578:5	11	r
ASSIGN_OP	1578:7	1578:7	9	=
LEAF_NODE	1578:7	1578:7	10	=
RVAL	1578:9	1578:25	9	( k * ( 255 - pp [ 0 ] ) ) / 255
LEAF_NODE	1578:9	1578:9	10	(
FIELD	1578:10	1578:10	10	k
LEAF_NODE	1578:10	1578:10	11	k
LEAF_NODE	1578:11	1578:11	10	*
LEAF_NODE	1578:12	1578:12	10	(
FIELD	1578:13	1578:13	10	255
LEAF_NODE	1578:13	1578:13	11	255
LEAF_NODE	1578:16	1578:16	10	-
FIELD	1578:17	1578:21	10	pp [ 0 ]
LEAF_NODE	1578:17	1578:17	11	pp
LEAF_NODE	1578:19	1578:19	11	[
EXPR	1578:20	1578:20	11	0
FIELD	1578:20	1578:20	12	0
LEAF_NODE	1578:20	1578:20	13	0
LEAF_NODE	1578:21	1578:21	11	]
LEAF_NODE	1578:22	1578:22	10	)
LEAF_NODE	1578:23	1578:23	10	)
LEAF_NODE	1578:24	1578:24	10	/
FIELD	1578:25	1578:25	10	255
LEAF_NODE	1578:25	1578:25	11	255
LEAF_NODE	1578:28	1578:28	7	;
EXPR_STATEMENT	1579:5	1579:28	6	g = ( k * ( 255 - pp [ 1 ] ) ) / 255 ;
EXPR	1579:5	1579:5	7	g = ( k * ( 255 - pp [ 1 ] ) ) / 255
ASSIGN	1579:5	1579:9	8	g = ( k * ( 255 - pp [ 1 ] ) ) / 255
LVAL	1579:5	1579:5	9	g
FIELD	1579:5	1579:5	10	g
LEAF_NODE	1579:5	1579:5	11	g
ASSIGN_OP	1579:7	1579:7	9	=
LEAF_NODE	1579:7	1579:7	10	=
RVAL	1579:9	1579:25	9	( k * ( 255 - pp [ 1 ] ) ) / 255
LEAF_NODE	1579:9	1579:9	10	(
FIELD	1579:10	1579:10	10	k
LEAF_NODE	1579:10	1579:10	11	k
LEAF_NODE	1579:11	1579:11	10	*
LEAF_NODE	1579:12	1579:12	10	(
FIELD	1579:13	1579:13	10	255
LEAF_NODE	1579:13	1579:13	11	255
LEAF_NODE	1579:16	1579:16	10	-
FIELD	1579:17	1579:21	10	pp [ 1 ]
LEAF_NODE	1579:17	1579:17	11	pp
LEAF_NODE	1579:19	1579:19	11	[
EXPR	1579:20	1579:20	11	1
FIELD	1579:20	1579:20	12	1
LEAF_NODE	1579:20	1579:20	13	1
LEAF_NODE	1579:21	1579:21	11	]
LEAF_NODE	1579:22	1579:22	10	)
LEAF_NODE	1579:23	1579:23	10	)
LEAF_NODE	1579:24	1579:24	10	/
FIELD	1579:25	1579:25	10	255
LEAF_NODE	1579:25	1579:25	11	255
LEAF_NODE	1579:28	1579:28	7	;
EXPR_STATEMENT	1580:5	1580:28	6	b = ( k * ( 255 - pp [ 2 ] ) ) / 255 ;
EXPR	1580:5	1580:5	7	b = ( k * ( 255 - pp [ 2 ] ) ) / 255
ASSIGN	1580:5	1580:9	8	b = ( k * ( 255 - pp [ 2 ] ) ) / 255
LVAL	1580:5	1580:5	9	b
FIELD	1580:5	1580:5	10	b
LEAF_NODE	1580:5	1580:5	11	b
ASSIGN_OP	1580:7	1580:7	9	=
LEAF_NODE	1580:7	1580:7	10	=
RVAL	1580:9	1580:25	9	( k * ( 255 - pp [ 2 ] ) ) / 255
LEAF_NODE	1580:9	1580:9	10	(
FIELD	1580:10	1580:10	10	k
LEAF_NODE	1580:10	1580:10	11	k
LEAF_NODE	1580:11	1580:11	10	*
LEAF_NODE	1580:12	1580:12	10	(
FIELD	1580:13	1580:13	10	255
LEAF_NODE	1580:13	1580:13	11	255
LEAF_NODE	1580:16	1580:16	10	-
FIELD	1580:17	1580:21	10	pp [ 2 ]
LEAF_NODE	1580:17	1580:17	11	pp
LEAF_NODE	1580:19	1580:19	11	[
EXPR	1580:20	1580:20	11	2
FIELD	1580:20	1580:20	12	2
LEAF_NODE	1580:20	1580:20	13	2
LEAF_NODE	1580:21	1580:21	11	]
LEAF_NODE	1580:22	1580:22	10	)
LEAF_NODE	1580:23	1580:23	10	)
LEAF_NODE	1580:24	1580:24	10	/
FIELD	1580:25	1580:25	10	255
LEAF_NODE	1580:25	1580:25	11	255
LEAF_NODE	1580:28	1580:28	7	;
EXPR_STATEMENT	1581:5	1581:26	6	* cp ++ = PACK ( r , g , b ) ;
EXPR	1581:5	1581:5	7	* cp ++ = PACK ( r , g , b )
ASSIGN	1581:5	1581:13	8	* cp ++ = PACK ( r , g , b )
LVAL	1581:5	1581:5	9	* cp ++
UNARY_EXPR	1581:5	1581:6	10	* cp ++
UNARY_OPERATOR	1581:5	1581:5	11	*
LEAF_NODE	1581:5	1581:5	12	*
FIELD	1581:6	1581:8	11	cp ++
LEAF_NODE	1581:6	1581:6	12	cp
LEAF_NODE	1581:8	1581:8	12	++
ASSIGN_OP	1581:11	1581:11	9	=
LEAF_NODE	1581:11	1581:11	10	=
RVAL	1581:13	1581:13	9	PACK ( r , g , b )
FUNCTION_CALL	1581:13	1581:25	10	PACK ( r , g , b )
CALLEE	1581:13	1581:13	11	PACK
LEAF_NODE	1581:13	1581:13	12	PACK
LEAF_NODE	1581:17	1581:17	11	(
ARGUMENT	1581:18	1581:18	11	r
FIELD	1581:18	1581:18	12	r
LEAF_NODE	1581:18	1581:18	13	r
LEAF_NODE	1581:19	1581:19	11	,
ARGUMENT	1581:21	1581:21	11	g
FIELD	1581:21	1581:21	12	g
LEAF_NODE	1581:21	1581:21	13	g
LEAF_NODE	1581:22	1581:22	11	,
ARGUMENT	1581:24	1581:24	11	b
FIELD	1581:24	1581:24	12	b
LEAF_NODE	1581:24	1581:24	13	b
LEAF_NODE	1581:25	1581:25	11	)
LEAF_NODE	1581:26	1581:26	7	;
LEAF_NODE	1582:5	1582:5	6	pp
LEAF_NODE	1582:8	1582:8	6	+=
LEAF_NODE	1582:11	1582:11	6	samplesperpixel
LEAF_NODE	1582:26	1582:26	6	)
LEAF_NODE	1582:27	1582:27	6	;
EXPR_STATEMENT	1583:1	1583:13	6	cp += toskew ;
EXPR	1583:1	1583:1	7	cp += toskew
ASSIGN	1583:1	1583:7	8	cp += toskew
LVAL	1583:1	1583:1	9	cp
FIELD	1583:1	1583:1	10	cp
LEAF_NODE	1583:1	1583:1	11	cp
ASSIGN_OP	1583:4	1583:4	9	+=
LEAF_NODE	1583:4	1583:4	10	+=
RVAL	1583:7	1583:7	9	toskew
FIELD	1583:7	1583:7	10	toskew
LEAF_NODE	1583:7	1583:7	11	toskew
LEAF_NODE	1583:13	1583:13	7	;
EXPR_STATEMENT	1584:1	1584:15	6	pp += fromskew ;
EXPR	1584:1	1584:1	7	pp += fromskew
ASSIGN	1584:1	1584:7	8	pp += fromskew
LVAL	1584:1	1584:1	9	pp
FIELD	1584:1	1584:1	10	pp
LEAF_NODE	1584:1	1584:1	11	pp
ASSIGN_OP	1584:4	1584:4	9	+=
LEAF_NODE	1584:4	1584:4	10	+=
RVAL	1584:7	1584:7	9	fromskew
FIELD	1584:7	1584:7	10	fromskew
LEAF_NODE	1584:7	1584:7	11	fromskew
LEAF_NODE	1584:15	1584:15	7	;
LEAF_NODE	1585:4	1585:4	5	}
LEAF_NODE	1586:0	1586:0	2	}
FUNCTION_DEF	0:0	1613:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1593:0	1593:0	2	DECLAREContigPutFunc
LEAF_NODE	1593:0	1593:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1593:20	1593:48	2	( putRGBcontig8bitCMYKMaptile )
LEAF_NODE	1593:20	1593:20	3	(
PARAMETER_DECL	1593:21	1593:21	3	putRGBcontig8bitCMYKMaptile
LEAF_NODE	1593:21	1593:21	4	putRGBcontig8bitCMYKMaptile
LEAF_NODE	1593:48	1593:48	3	)
LEAF_NODE	1594:0	1594:0	2	{
STATEMENTS	1595:4	1601:4	2	
SIMPLE_DECL	1595:4	1595:46	3	int samplesperpixel ; samplesperpixel = img -> samplesperpixel ;
VAR_DECL	1595:4	1595:8	4	int samplesperpixel ; samplesperpixel = img -> samplesperpixel
TYPE	1595:4	1595:4	5	int
TYPE_NAME	1595:4	1595:4	6	int
LEAF_NODE	1595:4	1595:4	7	int
NAME	1595:8	1595:8	5	samplesperpixel
LEAF_NODE	1595:8	1595:8	6	samplesperpixel
LEAF_NODE	0:0	0:0	5	;
INIT	1595:8	1595:8	5	samplesperpixel = img -> samplesperpixel
ASSIGN	1595:8	1595:26	6	samplesperpixel = img -> samplesperpixel
LVAL	1595:8	1595:8	7	samplesperpixel
NAME	1595:8	1595:8	8	samplesperpixel
LEAF_NODE	1595:8	1595:8	9	samplesperpixel
ASSIGN_OP	1595:24	1595:24	7	=
LEAF_NODE	1595:24	1595:24	8	=
RVAL	1595:26	1595:26	7	img -> samplesperpixel
FIELD	1595:26	1595:31	8	img -> samplesperpixel
LEAF_NODE	1595:26	1595:26	9	img
LEAF_NODE	1595:29	1595:29	9	->
LEAF_NODE	1595:31	1595:31	9	samplesperpixel
LEAF_NODE	1595:46	1595:46	4	;
SIMPLE_DECL	1596:4	1596:32	3	TIFFRGBValue * Map ; Map = img -> Map ;
VAR_DECL	1596:4	1596:18	4	TIFFRGBValue * Map ; Map = img -> Map
TYPE	1596:4	1596:16	5	TIFFRGBValue *
TYPE_NAME	1596:4	1596:4	6	TIFFRGBValue
LEAF_NODE	1596:4	1596:4	7	TIFFRGBValue
POINTER	1596:16	1596:16	6	*
LEAF_NODE	1596:16	1596:16	7	*
NAME	1596:18	1596:18	5	Map
LEAF_NODE	1596:18	1596:18	6	Map
LEAF_NODE	0:0	0:0	5	;
INIT	1596:18	1596:18	5	Map = img -> Map
ASSIGN	1596:18	1596:24	6	Map = img -> Map
LVAL	1596:18	1596:18	7	Map
NAME	1596:18	1596:18	8	Map
LEAF_NODE	1596:18	1596:18	9	Map
ASSIGN_OP	1596:22	1596:22	7	=
LEAF_NODE	1596:22	1596:22	8	=
RVAL	1596:24	1596:24	7	img -> Map
FIELD	1596:24	1596:29	8	img -> Map
LEAF_NODE	1596:24	1596:24	9	img
LEAF_NODE	1596:27	1596:27	9	->
LEAF_NODE	1596:29	1596:29	9	Map
LEAF_NODE	1596:32	1596:32	4	;
SIMPLE_DECL	1597:4	1597:21	3	uint16 r , uint16 g , uint16 b , uint16 k ;
INIT_DECL_LIST	1597:4	1597:4	4	uint16 r , uint16 g , uint16 b , uint16 k
VAR_DECL	1597:4	1597:11	5	uint16 r
TYPE	1597:4	1597:4	6	uint16
TYPE_NAME	1597:4	1597:4	7	uint16
LEAF_NODE	1597:4	1597:4	8	uint16
NAME	1597:11	1597:11	6	r
LEAF_NODE	1597:11	1597:11	7	r
LEAF_NODE	1597:12	1597:12	5	,
INIT_DECL_LIST	1597:4	1597:4	5	uint16 g , uint16 b , uint16 k
VAR_DECL	1597:4	1597:14	6	uint16 g
TYPE	1597:4	1597:4	7	uint16
TYPE_NAME	1597:4	1597:4	8	uint16
LEAF_NODE	1597:4	1597:4	9	uint16
NAME	1597:14	1597:14	7	g
LEAF_NODE	1597:14	1597:14	8	g
LEAF_NODE	1597:15	1597:15	6	,
INIT_DECL_LIST	1597:4	1597:4	6	uint16 b , uint16 k
VAR_DECL	1597:4	1597:17	7	uint16 b
TYPE	1597:4	1597:4	8	uint16
TYPE_NAME	1597:4	1597:4	9	uint16
LEAF_NODE	1597:4	1597:4	10	uint16
NAME	1597:17	1597:17	8	b
LEAF_NODE	1597:17	1597:17	9	b
LEAF_NODE	1597:18	1597:18	7	,
VAR_DECL	1597:4	1597:20	7	uint16 k
TYPE	1597:4	1597:4	8	uint16
TYPE_NAME	1597:4	1597:4	9	uint16
LEAF_NODE	1597:4	1597:4	10	uint16
NAME	1597:20	1597:20	8	k
LEAF_NODE	1597:20	1597:20	9	k
LEAF_NODE	1597:21	1597:21	4	;
EXPR_STATEMENT	1599:4	1599:12	3	( void ) y ;
EXPR	1599:4	1599:11	4	( void ) y
LEAF_NODE	1599:4	1599:4	5	(
TYPE_NAME	1599:5	1599:5	5	void
LEAF_NODE	1599:5	1599:5	6	void
LEAF_NODE	1599:9	1599:9	5	)
FIELD	1599:11	1599:11	5	y
LEAF_NODE	1599:11	1599:11	6	y
LEAF_NODE	1599:12	1599:12	4	;
EXPR_STATEMENT	1600:4	1600:31	3	fromskew *= samplesperpixel ;
EXPR	1600:4	1600:4	4	fromskew *= samplesperpixel
ASSIGN	1600:4	1600:16	5	fromskew *= samplesperpixel
LVAL	1600:4	1600:4	6	fromskew
FIELD	1600:4	1600:4	7	fromskew
LEAF_NODE	1600:4	1600:4	8	fromskew
ASSIGN_OP	1600:13	1600:13	6	*=
LEAF_NODE	1600:13	1600:13	7	*=
RVAL	1600:16	1600:16	6	samplesperpixel
FIELD	1600:16	1600:16	7	samplesperpixel
LEAF_NODE	1600:16	1600:16	8	samplesperpixel
LEAF_NODE	1600:31	1600:31	4	;
ITERATION	1601:4	1601:23	3	
KEYWORD	1601:4	1601:4	4	for
LEAF_NODE	1601:4	1601:4	5	for
LEAF_NODE	1601:7	1601:7	4	(
FOR_INIT	1601:9	1601:9	4	;
LEAF_NODE	1601:9	1601:9	5	;
CONDITION	1601:11	1601:11	4	h > 0
EXPR	1601:11	1601:15	5	h > 0
FIELD	1601:11	1601:11	6	h
LEAF_NODE	1601:11	1601:11	7	h
REL_OPERATOR	1601:13	1601:13	6	>
LEAF_NODE	1601:13	1601:13	7	>
FIELD	1601:15	1601:15	6	0
LEAF_NODE	1601:15	1601:15	7	0
LEAF_NODE	1601:16	1601:16	4	;
FOR_EXPR	1601:18	1601:18	4	-- h
EXPR	1601:18	1601:20	5	-- h
LEAF_NODE	1601:18	1601:18	6	--
FIELD	1601:20	1601:20	6	h
LEAF_NODE	1601:20	1601:20	7	h
LEAF_NODE	1601:21	1601:21	4	)
STATEMENTS	1601:23	1612:4	4	
LEAF_NODE	1601:23	1601:23	5	{
STATEMENTS	1602:1	1611:1	5	
ITERATION	1602:1	1602:25	6	
KEYWORD	1602:1	1602:1	7	for
LEAF_NODE	1602:1	1602:1	8	for
LEAF_NODE	1602:5	1602:5	7	(
FOR_INIT	1602:6	1602:11	7	x = w ;
EXPR	1602:6	1602:6	8	x = w
ASSIGN	1602:6	1602:10	9	x = w
LVAL	1602:6	1602:6	10	x
FIELD	1602:6	1602:6	11	x
LEAF_NODE	1602:6	1602:6	12	x
ASSIGN_OP	1602:8	1602:8	10	=
LEAF_NODE	1602:8	1602:8	11	=
RVAL	1602:10	1602:10	10	w
FIELD	1602:10	1602:10	11	w
LEAF_NODE	1602:10	1602:10	12	w
LEAF_NODE	1602:11	1602:11	8	;
CONDITION	1602:13	1602:13	7	x > 0
EXPR	1602:13	1602:17	8	x > 0
FIELD	1602:13	1602:13	9	x
LEAF_NODE	1602:13	1602:13	10	x
REL_OPERATOR	1602:15	1602:15	9	>
LEAF_NODE	1602:15	1602:15	10	>
FIELD	1602:17	1602:17	9	0
LEAF_NODE	1602:17	1602:17	10	0
LEAF_NODE	1602:18	1602:18	7	;
FOR_EXPR	1602:20	1602:20	7	-- x
EXPR	1602:20	1602:22	8	-- x
LEAF_NODE	1602:20	1602:20	9	--
FIELD	1602:22	1602:22	9	x
LEAF_NODE	1602:22	1602:22	10	x
LEAF_NODE	1602:23	1602:23	7	)
STATEMENTS	1602:25	1609:1	7	
LEAF_NODE	1602:25	1602:25	8	{
STATEMENTS	1603:5	1608:5	8	
EXPR_STATEMENT	1603:5	1603:20	9	k = 255 - pp [ 3 ] ;
EXPR	1603:5	1603:5	10	k = 255 - pp [ 3 ]
ASSIGN	1603:5	1603:9	11	k = 255 - pp [ 3 ]
LVAL	1603:5	1603:5	12	k
FIELD	1603:5	1603:5	13	k
LEAF_NODE	1603:5	1603:5	14	k
ASSIGN_OP	1603:7	1603:7	12	=
LEAF_NODE	1603:7	1603:7	13	=
RVAL	1603:9	1603:15	12	255 - pp [ 3 ]
FIELD	1603:9	1603:9	13	255
LEAF_NODE	1603:9	1603:9	14	255
LEAF_NODE	1603:13	1603:13	13	-
FIELD	1603:15	1603:19	13	pp [ 3 ]
LEAF_NODE	1603:15	1603:15	14	pp
LEAF_NODE	1603:17	1603:17	14	[
EXPR	1603:18	1603:18	14	3
FIELD	1603:18	1603:18	15	3
LEAF_NODE	1603:18	1603:18	16	3
LEAF_NODE	1603:19	1603:19	14	]
LEAF_NODE	1603:20	1603:20	10	;
EXPR_STATEMENT	1604:5	1604:28	9	r = ( k * ( 255 - pp [ 0 ] ) ) / 255 ;
EXPR	1604:5	1604:5	10	r = ( k * ( 255 - pp [ 0 ] ) ) / 255
ASSIGN	1604:5	1604:9	11	r = ( k * ( 255 - pp [ 0 ] ) ) / 255
LVAL	1604:5	1604:5	12	r
FIELD	1604:5	1604:5	13	r
LEAF_NODE	1604:5	1604:5	14	r
ASSIGN_OP	1604:7	1604:7	12	=
LEAF_NODE	1604:7	1604:7	13	=
RVAL	1604:9	1604:25	12	( k * ( 255 - pp [ 0 ] ) ) / 255
LEAF_NODE	1604:9	1604:9	13	(
FIELD	1604:10	1604:10	13	k
LEAF_NODE	1604:10	1604:10	14	k
LEAF_NODE	1604:11	1604:11	13	*
LEAF_NODE	1604:12	1604:12	13	(
FIELD	1604:13	1604:13	13	255
LEAF_NODE	1604:13	1604:13	14	255
LEAF_NODE	1604:16	1604:16	13	-
FIELD	1604:17	1604:21	13	pp [ 0 ]
LEAF_NODE	1604:17	1604:17	14	pp
LEAF_NODE	1604:19	1604:19	14	[
EXPR	1604:20	1604:20	14	0
FIELD	1604:20	1604:20	15	0
LEAF_NODE	1604:20	1604:20	16	0
LEAF_NODE	1604:21	1604:21	14	]
LEAF_NODE	1604:22	1604:22	13	)
LEAF_NODE	1604:23	1604:23	13	)
LEAF_NODE	1604:24	1604:24	13	/
FIELD	1604:25	1604:25	13	255
LEAF_NODE	1604:25	1604:25	14	255
LEAF_NODE	1604:28	1604:28	10	;
EXPR_STATEMENT	1605:5	1605:28	9	g = ( k * ( 255 - pp [ 1 ] ) ) / 255 ;
EXPR	1605:5	1605:5	10	g = ( k * ( 255 - pp [ 1 ] ) ) / 255
ASSIGN	1605:5	1605:9	11	g = ( k * ( 255 - pp [ 1 ] ) ) / 255
LVAL	1605:5	1605:5	12	g
FIELD	1605:5	1605:5	13	g
LEAF_NODE	1605:5	1605:5	14	g
ASSIGN_OP	1605:7	1605:7	12	=
LEAF_NODE	1605:7	1605:7	13	=
RVAL	1605:9	1605:25	12	( k * ( 255 - pp [ 1 ] ) ) / 255
LEAF_NODE	1605:9	1605:9	13	(
FIELD	1605:10	1605:10	13	k
LEAF_NODE	1605:10	1605:10	14	k
LEAF_NODE	1605:11	1605:11	13	*
LEAF_NODE	1605:12	1605:12	13	(
FIELD	1605:13	1605:13	13	255
LEAF_NODE	1605:13	1605:13	14	255
LEAF_NODE	1605:16	1605:16	13	-
FIELD	1605:17	1605:21	13	pp [ 1 ]
LEAF_NODE	1605:17	1605:17	14	pp
LEAF_NODE	1605:19	1605:19	14	[
EXPR	1605:20	1605:20	14	1
FIELD	1605:20	1605:20	15	1
LEAF_NODE	1605:20	1605:20	16	1
LEAF_NODE	1605:21	1605:21	14	]
LEAF_NODE	1605:22	1605:22	13	)
LEAF_NODE	1605:23	1605:23	13	)
LEAF_NODE	1605:24	1605:24	13	/
FIELD	1605:25	1605:25	13	255
LEAF_NODE	1605:25	1605:25	14	255
LEAF_NODE	1605:28	1605:28	10	;
EXPR_STATEMENT	1606:5	1606:28	9	b = ( k * ( 255 - pp [ 2 ] ) ) / 255 ;
EXPR	1606:5	1606:5	10	b = ( k * ( 255 - pp [ 2 ] ) ) / 255
ASSIGN	1606:5	1606:9	11	b = ( k * ( 255 - pp [ 2 ] ) ) / 255
LVAL	1606:5	1606:5	12	b
FIELD	1606:5	1606:5	13	b
LEAF_NODE	1606:5	1606:5	14	b
ASSIGN_OP	1606:7	1606:7	12	=
LEAF_NODE	1606:7	1606:7	13	=
RVAL	1606:9	1606:25	12	( k * ( 255 - pp [ 2 ] ) ) / 255
LEAF_NODE	1606:9	1606:9	13	(
FIELD	1606:10	1606:10	13	k
LEAF_NODE	1606:10	1606:10	14	k
LEAF_NODE	1606:11	1606:11	13	*
LEAF_NODE	1606:12	1606:12	13	(
FIELD	1606:13	1606:13	13	255
LEAF_NODE	1606:13	1606:13	14	255
LEAF_NODE	1606:16	1606:16	13	-
FIELD	1606:17	1606:21	13	pp [ 2 ]
LEAF_NODE	1606:17	1606:17	14	pp
LEAF_NODE	1606:19	1606:19	14	[
EXPR	1606:20	1606:20	14	2
FIELD	1606:20	1606:20	15	2
LEAF_NODE	1606:20	1606:20	16	2
LEAF_NODE	1606:21	1606:21	14	]
LEAF_NODE	1606:22	1606:22	13	)
LEAF_NODE	1606:23	1606:23	13	)
LEAF_NODE	1606:24	1606:24	13	/
FIELD	1606:25	1606:25	13	255
LEAF_NODE	1606:25	1606:25	14	255
LEAF_NODE	1606:28	1606:28	10	;
EXPR_STATEMENT	1607:5	1607:41	9	* cp ++ = PACK ( Map [ r ] , Map [ g ] , Map [ b ] ) ;
EXPR	1607:5	1607:5	10	* cp ++ = PACK ( Map [ r ] , Map [ g ] , Map [ b ] )
ASSIGN	1607:5	1607:13	11	* cp ++ = PACK ( Map [ r ] , Map [ g ] , Map [ b ] )
LVAL	1607:5	1607:5	12	* cp ++
UNARY_EXPR	1607:5	1607:6	13	* cp ++
UNARY_OPERATOR	1607:5	1607:5	14	*
LEAF_NODE	1607:5	1607:5	15	*
FIELD	1607:6	1607:8	14	cp ++
LEAF_NODE	1607:6	1607:6	15	cp
LEAF_NODE	1607:8	1607:8	15	++
ASSIGN_OP	1607:11	1607:11	12	=
LEAF_NODE	1607:11	1607:11	13	=
RVAL	1607:13	1607:13	12	PACK ( Map [ r ] , Map [ g ] , Map [ b ] )
FUNCTION_CALL	1607:13	1607:40	13	PACK ( Map [ r ] , Map [ g ] , Map [ b ] )
CALLEE	1607:13	1607:13	14	PACK
LEAF_NODE	1607:13	1607:13	15	PACK
LEAF_NODE	1607:17	1607:17	14	(
ARGUMENT	1607:18	1607:18	14	Map [ r ]
FIELD	1607:18	1607:23	15	Map [ r ]
LEAF_NODE	1607:18	1607:18	16	Map
LEAF_NODE	1607:21	1607:21	16	[
EXPR	1607:22	1607:22	16	r
FIELD	1607:22	1607:22	17	r
LEAF_NODE	1607:22	1607:22	18	r
LEAF_NODE	1607:23	1607:23	16	]
LEAF_NODE	1607:24	1607:24	14	,
ARGUMENT	1607:26	1607:26	14	Map [ g ]
FIELD	1607:26	1607:31	15	Map [ g ]
LEAF_NODE	1607:26	1607:26	16	Map
LEAF_NODE	1607:29	1607:29	16	[
EXPR	1607:30	1607:30	16	g
FIELD	1607:30	1607:30	17	g
LEAF_NODE	1607:30	1607:30	18	g
LEAF_NODE	1607:31	1607:31	16	]
LEAF_NODE	1607:32	1607:32	14	,
ARGUMENT	1607:34	1607:34	14	Map [ b ]
FIELD	1607:34	1607:39	15	Map [ b ]
LEAF_NODE	1607:34	1607:34	16	Map
LEAF_NODE	1607:37	1607:37	16	[
EXPR	1607:38	1607:38	16	b
FIELD	1607:38	1607:38	17	b
LEAF_NODE	1607:38	1607:38	18	b
LEAF_NODE	1607:39	1607:39	16	]
LEAF_NODE	1607:40	1607:40	14	)
LEAF_NODE	1607:41	1607:41	10	;
EXPR_STATEMENT	1608:5	1608:26	9	pp += samplesperpixel ;
EXPR	1608:5	1608:5	10	pp += samplesperpixel
ASSIGN	1608:5	1608:11	11	pp += samplesperpixel
LVAL	1608:5	1608:5	12	pp
FIELD	1608:5	1608:5	13	pp
LEAF_NODE	1608:5	1608:5	14	pp
ASSIGN_OP	1608:8	1608:8	12	+=
LEAF_NODE	1608:8	1608:8	13	+=
RVAL	1608:11	1608:11	12	samplesperpixel
FIELD	1608:11	1608:11	13	samplesperpixel
LEAF_NODE	1608:11	1608:11	14	samplesperpixel
LEAF_NODE	1608:26	1608:26	10	;
LEAF_NODE	1609:1	1609:1	8	}
EXPR_STATEMENT	1610:1	1610:15	6	pp += fromskew ;
EXPR	1610:1	1610:1	7	pp += fromskew
ASSIGN	1610:1	1610:7	8	pp += fromskew
LVAL	1610:1	1610:1	9	pp
FIELD	1610:1	1610:1	10	pp
LEAF_NODE	1610:1	1610:1	11	pp
ASSIGN_OP	1610:4	1610:4	9	+=
LEAF_NODE	1610:4	1610:4	10	+=
RVAL	1610:7	1610:7	9	fromskew
FIELD	1610:7	1610:7	10	fromskew
LEAF_NODE	1610:7	1610:7	11	fromskew
LEAF_NODE	1610:15	1610:15	7	;
EXPR_STATEMENT	1611:1	1611:13	6	cp += toskew ;
EXPR	1611:1	1611:1	7	cp += toskew
ASSIGN	1611:1	1611:7	8	cp += toskew
LVAL	1611:1	1611:1	9	cp
FIELD	1611:1	1611:1	10	cp
LEAF_NODE	1611:1	1611:1	11	cp
ASSIGN_OP	1611:4	1611:4	9	+=
LEAF_NODE	1611:4	1611:4	10	+=
RVAL	1611:7	1611:7	9	toskew
FIELD	1611:7	1611:7	10	toskew
LEAF_NODE	1611:7	1611:7	11	toskew
LEAF_NODE	1611:13	1611:13	7	;
LEAF_NODE	1612:4	1612:4	5	}
LEAF_NODE	1613:0	1613:0	2	}
FUNCTION_DEF	0:0	1636:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1628:0	1628:0	2	DECLARESepPutFunc
LEAF_NODE	1628:0	1628:0	3	DECLARESepPutFunc
PARAMETER_LIST	1628:17	1628:40	2	( putRGBseparate8bittile )
LEAF_NODE	1628:17	1628:17	3	(
PARAMETER_DECL	1628:18	1628:18	3	putRGBseparate8bittile
LEAF_NODE	1628:18	1628:18	4	putRGBseparate8bittile
LEAF_NODE	1628:40	1628:40	3	)
LEAF_NODE	1629:0	1629:0	2	{
STATEMENTS	1630:4	1631:4	2	
EXPR_STATEMENT	1630:4	1630:14	3	( void ) img ;
EXPR	1630:4	1630:11	4	( void ) img
LEAF_NODE	1630:4	1630:4	5	(
TYPE_NAME	1630:5	1630:5	5	void
LEAF_NODE	1630:5	1630:5	6	void
LEAF_NODE	1630:9	1630:9	5	)
FIELD	1630:11	1630:11	5	img
LEAF_NODE	1630:11	1630:11	6	img
LEAF_NODE	1630:14	1630:14	4	;
EXPR_STATEMENT	1630:16	1630:24	3	( void ) x ;
EXPR	1630:16	1630:23	4	( void ) x
LEAF_NODE	1630:16	1630:16	5	(
TYPE_NAME	1630:17	1630:17	5	void
LEAF_NODE	1630:17	1630:17	6	void
LEAF_NODE	1630:21	1630:21	5	)
FIELD	1630:23	1630:23	5	x
LEAF_NODE	1630:23	1630:23	6	x
LEAF_NODE	1630:24	1630:24	4	;
EXPR_STATEMENT	1630:26	1630:34	3	( void ) y ;
EXPR	1630:26	1630:33	4	( void ) y
LEAF_NODE	1630:26	1630:26	5	(
TYPE_NAME	1630:27	1630:27	5	void
LEAF_NODE	1630:27	1630:27	6	void
LEAF_NODE	1630:31	1630:31	5	)
FIELD	1630:33	1630:33	5	y
LEAF_NODE	1630:33	1630:33	6	y
LEAF_NODE	1630:34	1630:34	4	;
EXPR_STATEMENT	1630:36	1630:44	3	( void ) a ;
EXPR	1630:36	1630:43	4	( void ) a
LEAF_NODE	1630:36	1630:36	5	(
TYPE_NAME	1630:37	1630:37	5	void
LEAF_NODE	1630:37	1630:37	6	void
LEAF_NODE	1630:41	1630:41	5	)
FIELD	1630:43	1630:43	5	a
LEAF_NODE	1630:43	1630:43	6	a
LEAF_NODE	1630:44	1630:44	4	;
ITERATION	1631:4	1631:23	3	
KEYWORD	1631:4	1631:4	4	for
LEAF_NODE	1631:4	1631:4	5	for
LEAF_NODE	1631:7	1631:7	4	(
FOR_INIT	1631:9	1631:9	4	;
LEAF_NODE	1631:9	1631:9	5	;
CONDITION	1631:11	1631:11	4	h > 0
EXPR	1631:11	1631:15	5	h > 0
FIELD	1631:11	1631:11	6	h
LEAF_NODE	1631:11	1631:11	7	h
REL_OPERATOR	1631:13	1631:13	6	>
LEAF_NODE	1631:13	1631:13	7	>
FIELD	1631:15	1631:15	6	0
LEAF_NODE	1631:15	1631:15	7	0
LEAF_NODE	1631:16	1631:16	4	;
FOR_EXPR	1631:18	1631:18	4	-- h
EXPR	1631:18	1631:20	5	-- h
LEAF_NODE	1631:18	1631:18	6	--
FIELD	1631:20	1631:20	6	h
LEAF_NODE	1631:20	1631:20	7	h
LEAF_NODE	1631:21	1631:21	4	)
STATEMENTS	1631:23	1635:4	4	
LEAF_NODE	1631:23	1631:23	5	{
STATEMENTS	1632:1	1634:1	5	
EXPR_STATEMENT	1632:1	1632:48	6	UNROLL8 ( w , NOP , * cp ++ = PACK ( * r ++ , * g ++ , * b ++ ) ) ;
EXPR	1632:1	1632:1	7	UNROLL8 ( w , NOP , * cp ++ = PACK ( * r ++ , * g ++ , * b ++ ) )
FUNCTION_CALL	1632:1	1632:47	8	UNROLL8 ( w , NOP , * cp ++ = PACK ( * r ++ , * g ++ , * b ++ ) )
CALLEE	1632:1	1632:1	9	UNROLL8
LEAF_NODE	1632:1	1632:1	10	UNROLL8
LEAF_NODE	1632:8	1632:8	9	(
ARGUMENT	1632:9	1632:9	9	w
FIELD	1632:9	1632:9	10	w
LEAF_NODE	1632:9	1632:9	11	w
LEAF_NODE	1632:10	1632:10	9	,
ARGUMENT	1632:12	1632:12	9	NOP
FIELD	1632:12	1632:12	10	NOP
LEAF_NODE	1632:12	1632:12	11	NOP
LEAF_NODE	1632:15	1632:15	9	,
ARGUMENT	1632:17	1632:17	9	* cp ++ = PACK ( * r ++ , * g ++ , * b ++ )
ASSIGN	1632:17	1632:25	10	* cp ++ = PACK ( * r ++ , * g ++ , * b ++ )
LVAL	1632:17	1632:17	11	* cp ++
UNARY_EXPR	1632:17	1632:18	12	* cp ++
UNARY_OPERATOR	1632:17	1632:17	13	*
LEAF_NODE	1632:17	1632:17	14	*
FIELD	1632:18	1632:20	13	cp ++
LEAF_NODE	1632:18	1632:18	14	cp
LEAF_NODE	1632:20	1632:20	14	++
ASSIGN_OP	1632:23	1632:23	11	=
LEAF_NODE	1632:23	1632:23	12	=
RVAL	1632:25	1632:25	11	PACK ( * r ++ , * g ++ , * b ++ )
FUNCTION_CALL	1632:25	1632:46	12	PACK ( * r ++ , * g ++ , * b ++ )
CALLEE	1632:25	1632:25	13	PACK
LEAF_NODE	1632:25	1632:25	14	PACK
LEAF_NODE	1632:29	1632:29	13	(
ARGUMENT	1632:30	1632:30	13	* r ++
UNARY_EXPR	1632:30	1632:31	14	* r ++
UNARY_OPERATOR	1632:30	1632:30	15	*
LEAF_NODE	1632:30	1632:30	16	*
FIELD	1632:31	1632:32	15	r ++
LEAF_NODE	1632:31	1632:31	16	r
LEAF_NODE	1632:32	1632:32	16	++
LEAF_NODE	1632:34	1632:34	13	,
ARGUMENT	1632:36	1632:36	13	* g ++
UNARY_EXPR	1632:36	1632:37	14	* g ++
UNARY_OPERATOR	1632:36	1632:36	15	*
LEAF_NODE	1632:36	1632:36	16	*
FIELD	1632:37	1632:38	15	g ++
LEAF_NODE	1632:37	1632:37	16	g
LEAF_NODE	1632:38	1632:38	16	++
LEAF_NODE	1632:40	1632:40	13	,
ARGUMENT	1632:42	1632:42	13	* b ++
UNARY_EXPR	1632:42	1632:43	14	* b ++
UNARY_OPERATOR	1632:42	1632:42	15	*
LEAF_NODE	1632:42	1632:42	16	*
FIELD	1632:43	1632:44	15	b ++
LEAF_NODE	1632:43	1632:43	16	b
LEAF_NODE	1632:44	1632:44	16	++
LEAF_NODE	1632:46	1632:46	13	)
LEAF_NODE	1632:47	1632:47	9	)
LEAF_NODE	1632:48	1632:48	7	;
EXPR_STATEMENT	1633:1	1633:24	6	SKEW ( r , g , b , fromskew ) ;
EXPR	1633:1	1633:1	7	SKEW ( r , g , b , fromskew )
FUNCTION_CALL	1633:1	1633:23	8	SKEW ( r , g , b , fromskew )
CALLEE	1633:1	1633:1	9	SKEW
LEAF_NODE	1633:1	1633:1	10	SKEW
LEAF_NODE	1633:5	1633:5	9	(
ARGUMENT	1633:6	1633:6	9	r
FIELD	1633:6	1633:6	10	r
LEAF_NODE	1633:6	1633:6	11	r
LEAF_NODE	1633:7	1633:7	9	,
ARGUMENT	1633:9	1633:9	9	g
FIELD	1633:9	1633:9	10	g
LEAF_NODE	1633:9	1633:9	11	g
LEAF_NODE	1633:10	1633:10	9	,
ARGUMENT	1633:12	1633:12	9	b
FIELD	1633:12	1633:12	10	b
LEAF_NODE	1633:12	1633:12	11	b
LEAF_NODE	1633:13	1633:13	9	,
ARGUMENT	1633:15	1633:15	9	fromskew
FIELD	1633:15	1633:15	10	fromskew
LEAF_NODE	1633:15	1633:15	11	fromskew
LEAF_NODE	1633:23	1633:23	9	)
LEAF_NODE	1633:24	1633:24	7	;
EXPR_STATEMENT	1634:1	1634:13	6	cp += toskew ;
EXPR	1634:1	1634:1	7	cp += toskew
ASSIGN	1634:1	1634:7	8	cp += toskew
LVAL	1634:1	1634:1	9	cp
FIELD	1634:1	1634:1	10	cp
LEAF_NODE	1634:1	1634:1	11	cp
ASSIGN_OP	1634:4	1634:4	9	+=
LEAF_NODE	1634:4	1634:4	10	+=
RVAL	1634:7	1634:7	9	toskew
FIELD	1634:7	1634:7	10	toskew
LEAF_NODE	1634:7	1634:7	11	toskew
LEAF_NODE	1634:13	1634:13	7	;
LEAF_NODE	1635:4	1635:4	5	}
LEAF_NODE	1636:0	1636:0	2	}
FUNCTION_DEF	0:0	1649:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1641:0	1641:0	2	DECLARESepPutFunc
LEAF_NODE	1641:0	1641:0	3	DECLARESepPutFunc
PARAMETER_LIST	1641:17	1641:42	2	( putRGBAAseparate8bittile )
LEAF_NODE	1641:17	1641:17	3	(
PARAMETER_DECL	1641:18	1641:18	3	putRGBAAseparate8bittile
LEAF_NODE	1641:18	1641:18	4	putRGBAAseparate8bittile
LEAF_NODE	1641:42	1641:42	3	)
LEAF_NODE	1642:0	1642:0	2	{
STATEMENTS	1643:1	1644:1	2	
EXPR_STATEMENT	1643:1	1643:11	3	( void ) img ;
EXPR	1643:1	1643:8	4	( void ) img
LEAF_NODE	1643:1	1643:1	5	(
TYPE_NAME	1643:2	1643:2	5	void
LEAF_NODE	1643:2	1643:2	6	void
LEAF_NODE	1643:6	1643:6	5	)
FIELD	1643:8	1643:8	5	img
LEAF_NODE	1643:8	1643:8	6	img
LEAF_NODE	1643:11	1643:11	4	;
EXPR_STATEMENT	1643:13	1643:21	3	( void ) x ;
EXPR	1643:13	1643:20	4	( void ) x
LEAF_NODE	1643:13	1643:13	5	(
TYPE_NAME	1643:14	1643:14	5	void
LEAF_NODE	1643:14	1643:14	6	void
LEAF_NODE	1643:18	1643:18	5	)
FIELD	1643:20	1643:20	5	x
LEAF_NODE	1643:20	1643:20	6	x
LEAF_NODE	1643:21	1643:21	4	;
EXPR_STATEMENT	1643:23	1643:31	3	( void ) y ;
EXPR	1643:23	1643:30	4	( void ) y
LEAF_NODE	1643:23	1643:23	5	(
TYPE_NAME	1643:24	1643:24	5	void
LEAF_NODE	1643:24	1643:24	6	void
LEAF_NODE	1643:28	1643:28	5	)
FIELD	1643:30	1643:30	5	y
LEAF_NODE	1643:30	1643:30	6	y
LEAF_NODE	1643:31	1643:31	4	;
ITERATION	1644:1	1644:20	3	
KEYWORD	1644:1	1644:1	4	for
LEAF_NODE	1644:1	1644:1	5	for
LEAF_NODE	1644:4	1644:4	4	(
FOR_INIT	1644:6	1644:6	4	;
LEAF_NODE	1644:6	1644:6	5	;
CONDITION	1644:8	1644:8	4	h > 0
EXPR	1644:8	1644:12	5	h > 0
FIELD	1644:8	1644:8	6	h
LEAF_NODE	1644:8	1644:8	7	h
REL_OPERATOR	1644:10	1644:10	6	>
LEAF_NODE	1644:10	1644:10	7	>
FIELD	1644:12	1644:12	6	0
LEAF_NODE	1644:12	1644:12	7	0
LEAF_NODE	1644:13	1644:13	4	;
FOR_EXPR	1644:15	1644:15	4	-- h
EXPR	1644:15	1644:17	5	-- h
LEAF_NODE	1644:15	1644:15	6	--
FIELD	1644:17	1644:17	6	h
LEAF_NODE	1644:17	1644:17	7	h
LEAF_NODE	1644:18	1644:18	4	)
STATEMENTS	1644:20	1648:1	4	
LEAF_NODE	1644:20	1644:20	5	{
STATEMENTS	1645:2	1647:2	5	
EXPR_STATEMENT	1645:2	1645:56	6	UNROLL8 ( w , NOP , * cp ++ = PACK4 ( * r ++ , * g ++ , * b ++ , * a ++ ) ) ;
EXPR	1645:2	1645:2	7	UNROLL8 ( w , NOP , * cp ++ = PACK4 ( * r ++ , * g ++ , * b ++ , * a ++ ) )
FUNCTION_CALL	1645:2	1645:55	8	UNROLL8 ( w , NOP , * cp ++ = PACK4 ( * r ++ , * g ++ , * b ++ , * a ++ ) )
CALLEE	1645:2	1645:2	9	UNROLL8
LEAF_NODE	1645:2	1645:2	10	UNROLL8
LEAF_NODE	1645:9	1645:9	9	(
ARGUMENT	1645:10	1645:10	9	w
FIELD	1645:10	1645:10	10	w
LEAF_NODE	1645:10	1645:10	11	w
LEAF_NODE	1645:11	1645:11	9	,
ARGUMENT	1645:13	1645:13	9	NOP
FIELD	1645:13	1645:13	10	NOP
LEAF_NODE	1645:13	1645:13	11	NOP
LEAF_NODE	1645:16	1645:16	9	,
ARGUMENT	1645:18	1645:18	9	* cp ++ = PACK4 ( * r ++ , * g ++ , * b ++ , * a ++ )
ASSIGN	1645:18	1645:26	10	* cp ++ = PACK4 ( * r ++ , * g ++ , * b ++ , * a ++ )
LVAL	1645:18	1645:18	11	* cp ++
UNARY_EXPR	1645:18	1645:19	12	* cp ++
UNARY_OPERATOR	1645:18	1645:18	13	*
LEAF_NODE	1645:18	1645:18	14	*
FIELD	1645:19	1645:21	13	cp ++
LEAF_NODE	1645:19	1645:19	14	cp
LEAF_NODE	1645:21	1645:21	14	++
ASSIGN_OP	1645:24	1645:24	11	=
LEAF_NODE	1645:24	1645:24	12	=
RVAL	1645:26	1645:26	11	PACK4 ( * r ++ , * g ++ , * b ++ , * a ++ )
FUNCTION_CALL	1645:26	1645:54	12	PACK4 ( * r ++ , * g ++ , * b ++ , * a ++ )
CALLEE	1645:26	1645:26	13	PACK4
LEAF_NODE	1645:26	1645:26	14	PACK4
LEAF_NODE	1645:31	1645:31	13	(
ARGUMENT	1645:32	1645:32	13	* r ++
UNARY_EXPR	1645:32	1645:33	14	* r ++
UNARY_OPERATOR	1645:32	1645:32	15	*
LEAF_NODE	1645:32	1645:32	16	*
FIELD	1645:33	1645:34	15	r ++
LEAF_NODE	1645:33	1645:33	16	r
LEAF_NODE	1645:34	1645:34	16	++
LEAF_NODE	1645:36	1645:36	13	,
ARGUMENT	1645:38	1645:38	13	* g ++
UNARY_EXPR	1645:38	1645:39	14	* g ++
UNARY_OPERATOR	1645:38	1645:38	15	*
LEAF_NODE	1645:38	1645:38	16	*
FIELD	1645:39	1645:40	15	g ++
LEAF_NODE	1645:39	1645:39	16	g
LEAF_NODE	1645:40	1645:40	16	++
LEAF_NODE	1645:42	1645:42	13	,
ARGUMENT	1645:44	1645:44	13	* b ++
UNARY_EXPR	1645:44	1645:45	14	* b ++
UNARY_OPERATOR	1645:44	1645:44	15	*
LEAF_NODE	1645:44	1645:44	16	*
FIELD	1645:45	1645:46	15	b ++
LEAF_NODE	1645:45	1645:45	16	b
LEAF_NODE	1645:46	1645:46	16	++
LEAF_NODE	1645:48	1645:48	13	,
ARGUMENT	1645:50	1645:50	13	* a ++
UNARY_EXPR	1645:50	1645:51	14	* a ++
UNARY_OPERATOR	1645:50	1645:50	15	*
LEAF_NODE	1645:50	1645:50	16	*
FIELD	1645:51	1645:52	15	a ++
LEAF_NODE	1645:51	1645:51	16	a
LEAF_NODE	1645:52	1645:52	16	++
LEAF_NODE	1645:54	1645:54	13	)
LEAF_NODE	1645:55	1645:55	9	)
LEAF_NODE	1645:56	1645:56	7	;
EXPR_STATEMENT	1646:2	1646:29	6	SKEW4 ( r , g , b , a , fromskew ) ;
EXPR	1646:2	1646:2	7	SKEW4 ( r , g , b , a , fromskew )
FUNCTION_CALL	1646:2	1646:28	8	SKEW4 ( r , g , b , a , fromskew )
CALLEE	1646:2	1646:2	9	SKEW4
LEAF_NODE	1646:2	1646:2	10	SKEW4
LEAF_NODE	1646:7	1646:7	9	(
ARGUMENT	1646:8	1646:8	9	r
FIELD	1646:8	1646:8	10	r
LEAF_NODE	1646:8	1646:8	11	r
LEAF_NODE	1646:9	1646:9	9	,
ARGUMENT	1646:11	1646:11	9	g
FIELD	1646:11	1646:11	10	g
LEAF_NODE	1646:11	1646:11	11	g
LEAF_NODE	1646:12	1646:12	9	,
ARGUMENT	1646:14	1646:14	9	b
FIELD	1646:14	1646:14	10	b
LEAF_NODE	1646:14	1646:14	11	b
LEAF_NODE	1646:15	1646:15	9	,
ARGUMENT	1646:17	1646:17	9	a
FIELD	1646:17	1646:17	10	a
LEAF_NODE	1646:17	1646:17	11	a
LEAF_NODE	1646:18	1646:18	9	,
ARGUMENT	1646:20	1646:20	9	fromskew
FIELD	1646:20	1646:20	10	fromskew
LEAF_NODE	1646:20	1646:20	11	fromskew
LEAF_NODE	1646:28	1646:28	9	)
LEAF_NODE	1646:29	1646:29	7	;
EXPR_STATEMENT	1647:2	1647:14	6	cp += toskew ;
EXPR	1647:2	1647:2	7	cp += toskew
ASSIGN	1647:2	1647:8	8	cp += toskew
LVAL	1647:2	1647:2	9	cp
FIELD	1647:2	1647:2	10	cp
LEAF_NODE	1647:2	1647:2	11	cp
ASSIGN_OP	1647:5	1647:5	9	+=
LEAF_NODE	1647:5	1647:5	10	+=
RVAL	1647:8	1647:8	9	toskew
FIELD	1647:8	1647:8	10	toskew
LEAF_NODE	1647:8	1647:8	11	toskew
LEAF_NODE	1647:14	1647:14	7	;
LEAF_NODE	1648:1	1648:1	5	}
LEAF_NODE	1649:0	1649:0	2	}
FUNCTION_DEF	0:0	1669:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1654:0	1654:0	2	DECLARESepPutFunc
LEAF_NODE	1654:0	1654:0	3	DECLARESepPutFunc
PARAMETER_LIST	1654:17	1654:41	2	( putCMYKseparate8bittile )
LEAF_NODE	1654:17	1654:17	3	(
PARAMETER_DECL	1654:18	1654:18	3	putCMYKseparate8bittile
LEAF_NODE	1654:18	1654:18	4	putCMYKseparate8bittile
LEAF_NODE	1654:41	1654:41	3	)
LEAF_NODE	1655:0	1655:0	2	{
STATEMENTS	1656:1	1657:1	2	
EXPR_STATEMENT	1656:1	1656:11	3	( void ) img ;
EXPR	1656:1	1656:8	4	( void ) img
LEAF_NODE	1656:1	1656:1	5	(
TYPE_NAME	1656:2	1656:2	5	void
LEAF_NODE	1656:2	1656:2	6	void
LEAF_NODE	1656:6	1656:6	5	)
FIELD	1656:8	1656:8	5	img
LEAF_NODE	1656:8	1656:8	6	img
LEAF_NODE	1656:11	1656:11	4	;
EXPR_STATEMENT	1656:13	1656:21	3	( void ) y ;
EXPR	1656:13	1656:20	4	( void ) y
LEAF_NODE	1656:13	1656:13	5	(
TYPE_NAME	1656:14	1656:14	5	void
LEAF_NODE	1656:14	1656:14	6	void
LEAF_NODE	1656:18	1656:18	5	)
FIELD	1656:20	1656:20	5	y
LEAF_NODE	1656:20	1656:20	6	y
LEAF_NODE	1656:21	1656:21	4	;
ITERATION	1657:1	1657:20	3	
KEYWORD	1657:1	1657:1	4	for
LEAF_NODE	1657:1	1657:1	5	for
LEAF_NODE	1657:4	1657:4	4	(
FOR_INIT	1657:6	1657:6	4	;
LEAF_NODE	1657:6	1657:6	5	;
CONDITION	1657:8	1657:8	4	h > 0
EXPR	1657:8	1657:12	5	h > 0
FIELD	1657:8	1657:8	6	h
LEAF_NODE	1657:8	1657:8	7	h
REL_OPERATOR	1657:10	1657:10	6	>
LEAF_NODE	1657:10	1657:10	7	>
FIELD	1657:12	1657:12	6	0
LEAF_NODE	1657:12	1657:12	7	0
LEAF_NODE	1657:13	1657:13	4	;
FOR_EXPR	1657:15	1657:15	4	-- h
EXPR	1657:15	1657:17	5	-- h
LEAF_NODE	1657:15	1657:15	6	--
FIELD	1657:17	1657:17	6	h
LEAF_NODE	1657:17	1657:17	7	h
LEAF_NODE	1657:18	1657:18	4	)
STATEMENTS	1657:20	1668:1	4	
LEAF_NODE	1657:20	1657:20	5	{
STATEMENTS	1658:2	1667:2	5	
SIMPLE_DECL	1658:2	1658:23	6	uint32 rv , uint32 gv , uint32 bv , uint32 kv ;
INIT_DECL_LIST	1658:2	1658:2	7	uint32 rv , uint32 gv , uint32 bv , uint32 kv
VAR_DECL	1658:2	1658:9	8	uint32 rv
TYPE	1658:2	1658:2	9	uint32
TYPE_NAME	1658:2	1658:2	10	uint32
LEAF_NODE	1658:2	1658:2	11	uint32
NAME	1658:9	1658:9	9	rv
LEAF_NODE	1658:9	1658:9	10	rv
LEAF_NODE	1658:11	1658:11	8	,
INIT_DECL_LIST	1658:2	1658:2	8	uint32 gv , uint32 bv , uint32 kv
VAR_DECL	1658:2	1658:13	9	uint32 gv
TYPE	1658:2	1658:2	10	uint32
TYPE_NAME	1658:2	1658:2	11	uint32
LEAF_NODE	1658:2	1658:2	12	uint32
NAME	1658:13	1658:13	10	gv
LEAF_NODE	1658:13	1658:13	11	gv
LEAF_NODE	1658:15	1658:15	9	,
INIT_DECL_LIST	1658:2	1658:2	9	uint32 bv , uint32 kv
VAR_DECL	1658:2	1658:17	10	uint32 bv
TYPE	1658:2	1658:2	11	uint32
TYPE_NAME	1658:2	1658:2	12	uint32
LEAF_NODE	1658:2	1658:2	13	uint32
NAME	1658:17	1658:17	11	bv
LEAF_NODE	1658:17	1658:17	12	bv
LEAF_NODE	1658:19	1658:19	10	,
VAR_DECL	1658:2	1658:21	10	uint32 kv
TYPE	1658:2	1658:2	11	uint32
TYPE_NAME	1658:2	1658:2	12	uint32
LEAF_NODE	1658:2	1658:2	13	uint32
NAME	1658:21	1658:21	11	kv
LEAF_NODE	1658:21	1658:21	12	kv
LEAF_NODE	1658:23	1658:23	7	;
ITERATION	1659:2	1659:26	6	
KEYWORD	1659:2	1659:2	7	for
LEAF_NODE	1659:2	1659:2	8	for
LEAF_NODE	1659:6	1659:6	7	(
FOR_INIT	1659:7	1659:12	7	x = w ;
EXPR	1659:7	1659:7	8	x = w
ASSIGN	1659:7	1659:11	9	x = w
LVAL	1659:7	1659:7	10	x
FIELD	1659:7	1659:7	11	x
LEAF_NODE	1659:7	1659:7	12	x
ASSIGN_OP	1659:9	1659:9	10	=
LEAF_NODE	1659:9	1659:9	11	=
RVAL	1659:11	1659:11	10	w
FIELD	1659:11	1659:11	11	w
LEAF_NODE	1659:11	1659:11	12	w
LEAF_NODE	1659:12	1659:12	8	;
CONDITION	1659:14	1659:14	7	x > 0
EXPR	1659:14	1659:18	8	x > 0
FIELD	1659:14	1659:14	9	x
LEAF_NODE	1659:14	1659:14	10	x
REL_OPERATOR	1659:16	1659:16	9	>
LEAF_NODE	1659:16	1659:16	10	>
FIELD	1659:18	1659:18	9	0
LEAF_NODE	1659:18	1659:18	10	0
LEAF_NODE	1659:19	1659:19	7	;
FOR_EXPR	1659:21	1659:21	7	-- x
EXPR	1659:21	1659:23	8	-- x
LEAF_NODE	1659:21	1659:21	9	--
FIELD	1659:23	1659:23	9	x
LEAF_NODE	1659:23	1659:23	10	x
LEAF_NODE	1659:24	1659:24	7	)
STATEMENTS	1659:26	1665:2	7	
LEAF_NODE	1659:26	1659:26	8	{
STATEMENTS	1660:3	1664:3	8	
EXPR_STATEMENT	1660:3	1660:18	9	kv = 255 - * a ++ ;
EXPR	1660:3	1660:3	10	kv = 255 - * a ++
ASSIGN	1660:3	1660:8	11	kv = 255 - * a ++
LVAL	1660:3	1660:3	12	kv
FIELD	1660:3	1660:3	13	kv
LEAF_NODE	1660:3	1660:3	14	kv
ASSIGN_OP	1660:6	1660:6	12	=
LEAF_NODE	1660:6	1660:6	13	=
RVAL	1660:8	1660:14	12	255 - * a ++
FIELD	1660:8	1660:8	13	255
LEAF_NODE	1660:8	1660:8	14	255
LEAF_NODE	1660:12	1660:12	13	-
UNARY_EXPR	1660:14	1660:15	13	* a ++
UNARY_OPERATOR	1660:14	1660:14	14	*
LEAF_NODE	1660:14	1660:14	15	*
FIELD	1660:15	1660:16	14	a ++
LEAF_NODE	1660:15	1660:15	15	a
LEAF_NODE	1660:16	1660:16	15	++
LEAF_NODE	1660:18	1660:18	10	;
EXPR_STATEMENT	1661:3	1661:27	9	rv = ( kv * ( 255 - * r ++ ) ) / 255 ;
EXPR	1661:3	1661:3	10	rv = ( kv * ( 255 - * r ++ ) ) / 255
ASSIGN	1661:3	1661:8	11	rv = ( kv * ( 255 - * r ++ ) ) / 255
LVAL	1661:3	1661:3	12	rv
FIELD	1661:3	1661:3	13	rv
LEAF_NODE	1661:3	1661:3	14	rv
ASSIGN_OP	1661:6	1661:6	12	=
LEAF_NODE	1661:6	1661:6	13	=
RVAL	1661:8	1661:24	12	( kv * ( 255 - * r ++ ) ) / 255
LEAF_NODE	1661:8	1661:8	13	(
FIELD	1661:9	1661:9	13	kv
LEAF_NODE	1661:9	1661:9	14	kv
LEAF_NODE	1661:11	1661:11	13	*
LEAF_NODE	1661:12	1661:12	13	(
FIELD	1661:13	1661:13	13	255
LEAF_NODE	1661:13	1661:13	14	255
LEAF_NODE	1661:16	1661:16	13	-
UNARY_EXPR	1661:17	1661:18	13	* r ++
UNARY_OPERATOR	1661:17	1661:17	14	*
LEAF_NODE	1661:17	1661:17	15	*
FIELD	1661:18	1661:19	14	r ++
LEAF_NODE	1661:18	1661:18	15	r
LEAF_NODE	1661:19	1661:19	15	++
LEAF_NODE	1661:21	1661:21	13	)
LEAF_NODE	1661:22	1661:22	13	)
LEAF_NODE	1661:23	1661:23	13	/
FIELD	1661:24	1661:24	13	255
LEAF_NODE	1661:24	1661:24	14	255
LEAF_NODE	1661:27	1661:27	10	;
EXPR_STATEMENT	1662:3	1662:27	9	gv = ( kv * ( 255 - * g ++ ) ) / 255 ;
EXPR	1662:3	1662:3	10	gv = ( kv * ( 255 - * g ++ ) ) / 255
ASSIGN	1662:3	1662:8	11	gv = ( kv * ( 255 - * g ++ ) ) / 255
LVAL	1662:3	1662:3	12	gv
FIELD	1662:3	1662:3	13	gv
LEAF_NODE	1662:3	1662:3	14	gv
ASSIGN_OP	1662:6	1662:6	12	=
LEAF_NODE	1662:6	1662:6	13	=
RVAL	1662:8	1662:24	12	( kv * ( 255 - * g ++ ) ) / 255
LEAF_NODE	1662:8	1662:8	13	(
FIELD	1662:9	1662:9	13	kv
LEAF_NODE	1662:9	1662:9	14	kv
LEAF_NODE	1662:11	1662:11	13	*
LEAF_NODE	1662:12	1662:12	13	(
FIELD	1662:13	1662:13	13	255
LEAF_NODE	1662:13	1662:13	14	255
LEAF_NODE	1662:16	1662:16	13	-
UNARY_EXPR	1662:17	1662:18	13	* g ++
UNARY_OPERATOR	1662:17	1662:17	14	*
LEAF_NODE	1662:17	1662:17	15	*
FIELD	1662:18	1662:19	14	g ++
LEAF_NODE	1662:18	1662:18	15	g
LEAF_NODE	1662:19	1662:19	15	++
LEAF_NODE	1662:21	1662:21	13	)
LEAF_NODE	1662:22	1662:22	13	)
LEAF_NODE	1662:23	1662:23	13	/
FIELD	1662:24	1662:24	13	255
LEAF_NODE	1662:24	1662:24	14	255
LEAF_NODE	1662:27	1662:27	10	;
EXPR_STATEMENT	1663:3	1663:27	9	bv = ( kv * ( 255 - * b ++ ) ) / 255 ;
EXPR	1663:3	1663:3	10	bv = ( kv * ( 255 - * b ++ ) ) / 255
ASSIGN	1663:3	1663:8	11	bv = ( kv * ( 255 - * b ++ ) ) / 255
LVAL	1663:3	1663:3	12	bv
FIELD	1663:3	1663:3	13	bv
LEAF_NODE	1663:3	1663:3	14	bv
ASSIGN_OP	1663:6	1663:6	12	=
LEAF_NODE	1663:6	1663:6	13	=
RVAL	1663:8	1663:24	12	( kv * ( 255 - * b ++ ) ) / 255
LEAF_NODE	1663:8	1663:8	13	(
FIELD	1663:9	1663:9	13	kv
LEAF_NODE	1663:9	1663:9	14	kv
LEAF_NODE	1663:11	1663:11	13	*
LEAF_NODE	1663:12	1663:12	13	(
FIELD	1663:13	1663:13	13	255
LEAF_NODE	1663:13	1663:13	14	255
LEAF_NODE	1663:16	1663:16	13	-
UNARY_EXPR	1663:17	1663:18	13	* b ++
UNARY_OPERATOR	1663:17	1663:17	14	*
LEAF_NODE	1663:17	1663:17	15	*
FIELD	1663:18	1663:19	14	b ++
LEAF_NODE	1663:18	1663:18	15	b
LEAF_NODE	1663:19	1663:19	15	++
LEAF_NODE	1663:21	1663:21	13	)
LEAF_NODE	1663:22	1663:22	13	)
LEAF_NODE	1663:23	1663:23	13	/
FIELD	1663:24	1663:24	13	255
LEAF_NODE	1663:24	1663:24	14	255
LEAF_NODE	1663:27	1663:27	10	;
EXPR_STATEMENT	1664:3	1664:30	9	* cp ++ = PACK4 ( rv , gv , bv , 255 ) ;
EXPR	1664:3	1664:3	10	* cp ++ = PACK4 ( rv , gv , bv , 255 )
ASSIGN	1664:3	1664:11	11	* cp ++ = PACK4 ( rv , gv , bv , 255 )
LVAL	1664:3	1664:3	12	* cp ++
UNARY_EXPR	1664:3	1664:4	13	* cp ++
UNARY_OPERATOR	1664:3	1664:3	14	*
LEAF_NODE	1664:3	1664:3	15	*
FIELD	1664:4	1664:6	14	cp ++
LEAF_NODE	1664:4	1664:4	15	cp
LEAF_NODE	1664:6	1664:6	15	++
ASSIGN_OP	1664:9	1664:9	12	=
LEAF_NODE	1664:9	1664:9	13	=
RVAL	1664:11	1664:11	12	PACK4 ( rv , gv , bv , 255 )
FUNCTION_CALL	1664:11	1664:29	13	PACK4 ( rv , gv , bv , 255 )
CALLEE	1664:11	1664:11	14	PACK4
LEAF_NODE	1664:11	1664:11	15	PACK4
LEAF_NODE	1664:16	1664:16	14	(
ARGUMENT	1664:17	1664:17	14	rv
FIELD	1664:17	1664:17	15	rv
LEAF_NODE	1664:17	1664:17	16	rv
LEAF_NODE	1664:19	1664:19	14	,
ARGUMENT	1664:20	1664:20	14	gv
FIELD	1664:20	1664:20	15	gv
LEAF_NODE	1664:20	1664:20	16	gv
LEAF_NODE	1664:22	1664:22	14	,
ARGUMENT	1664:23	1664:23	14	bv
FIELD	1664:23	1664:23	15	bv
LEAF_NODE	1664:23	1664:23	16	bv
LEAF_NODE	1664:25	1664:25	14	,
ARGUMENT	1664:26	1664:26	14	255
FIELD	1664:26	1664:26	15	255
LEAF_NODE	1664:26	1664:26	16	255
LEAF_NODE	1664:29	1664:29	14	)
LEAF_NODE	1664:30	1664:30	10	;
LEAF_NODE	1665:2	1665:2	8	}
EXPR_STATEMENT	1666:2	1666:29	6	SKEW4 ( r , g , b , a , fromskew ) ;
EXPR	1666:2	1666:2	7	SKEW4 ( r , g , b , a , fromskew )
FUNCTION_CALL	1666:2	1666:28	8	SKEW4 ( r , g , b , a , fromskew )
CALLEE	1666:2	1666:2	9	SKEW4
LEAF_NODE	1666:2	1666:2	10	SKEW4
LEAF_NODE	1666:7	1666:7	9	(
ARGUMENT	1666:8	1666:8	9	r
FIELD	1666:8	1666:8	10	r
LEAF_NODE	1666:8	1666:8	11	r
LEAF_NODE	1666:9	1666:9	9	,
ARGUMENT	1666:11	1666:11	9	g
FIELD	1666:11	1666:11	10	g
LEAF_NODE	1666:11	1666:11	11	g
LEAF_NODE	1666:12	1666:12	9	,
ARGUMENT	1666:14	1666:14	9	b
FIELD	1666:14	1666:14	10	b
LEAF_NODE	1666:14	1666:14	11	b
LEAF_NODE	1666:15	1666:15	9	,
ARGUMENT	1666:17	1666:17	9	a
FIELD	1666:17	1666:17	10	a
LEAF_NODE	1666:17	1666:17	11	a
LEAF_NODE	1666:18	1666:18	9	,
ARGUMENT	1666:20	1666:20	9	fromskew
FIELD	1666:20	1666:20	10	fromskew
LEAF_NODE	1666:20	1666:20	11	fromskew
LEAF_NODE	1666:28	1666:28	9	)
LEAF_NODE	1666:29	1666:29	7	;
EXPR_STATEMENT	1667:2	1667:14	6	cp += toskew ;
EXPR	1667:2	1667:2	7	cp += toskew
ASSIGN	1667:2	1667:8	8	cp += toskew
LVAL	1667:2	1667:2	9	cp
FIELD	1667:2	1667:2	10	cp
LEAF_NODE	1667:2	1667:2	11	cp
ASSIGN_OP	1667:5	1667:5	9	+=
LEAF_NODE	1667:5	1667:5	10	+=
RVAL	1667:8	1667:8	9	toskew
FIELD	1667:8	1667:8	10	toskew
LEAF_NODE	1667:8	1667:8	11	toskew
LEAF_NODE	1667:14	1667:14	7	;
LEAF_NODE	1668:1	1668:1	5	}
LEAF_NODE	1669:0	1669:0	2	}
FUNCTION_DEF	0:0	1691:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1674:0	1674:0	2	DECLARESepPutFunc
LEAF_NODE	1674:0	1674:0	3	DECLARESepPutFunc
PARAMETER_LIST	1674:17	1674:42	2	( putRGBUAseparate8bittile )
LEAF_NODE	1674:17	1674:17	3	(
PARAMETER_DECL	1674:18	1674:18	3	putRGBUAseparate8bittile
LEAF_NODE	1674:18	1674:18	4	putRGBUAseparate8bittile
LEAF_NODE	1674:42	1674:42	3	)
LEAF_NODE	1675:0	1675:0	2	{
STATEMENTS	1676:1	1677:1	2	
EXPR_STATEMENT	1676:1	1676:11	3	( void ) img ;
EXPR	1676:1	1676:8	4	( void ) img
LEAF_NODE	1676:1	1676:1	5	(
TYPE_NAME	1676:2	1676:2	5	void
LEAF_NODE	1676:2	1676:2	6	void
LEAF_NODE	1676:6	1676:6	5	)
FIELD	1676:8	1676:8	5	img
LEAF_NODE	1676:8	1676:8	6	img
LEAF_NODE	1676:11	1676:11	4	;
EXPR_STATEMENT	1676:13	1676:21	3	( void ) y ;
EXPR	1676:13	1676:20	4	( void ) y
LEAF_NODE	1676:13	1676:13	5	(
TYPE_NAME	1676:14	1676:14	5	void
LEAF_NODE	1676:14	1676:14	6	void
LEAF_NODE	1676:18	1676:18	5	)
FIELD	1676:20	1676:20	5	y
LEAF_NODE	1676:20	1676:20	6	y
LEAF_NODE	1676:21	1676:21	4	;
ITERATION	1677:1	1677:20	3	
KEYWORD	1677:1	1677:1	4	for
LEAF_NODE	1677:1	1677:1	5	for
LEAF_NODE	1677:4	1677:4	4	(
FOR_INIT	1677:6	1677:6	4	;
LEAF_NODE	1677:6	1677:6	5	;
CONDITION	1677:8	1677:8	4	h > 0
EXPR	1677:8	1677:12	5	h > 0
FIELD	1677:8	1677:8	6	h
LEAF_NODE	1677:8	1677:8	7	h
REL_OPERATOR	1677:10	1677:10	6	>
LEAF_NODE	1677:10	1677:10	7	>
FIELD	1677:12	1677:12	6	0
LEAF_NODE	1677:12	1677:12	7	0
LEAF_NODE	1677:13	1677:13	4	;
FOR_EXPR	1677:15	1677:15	4	-- h
EXPR	1677:15	1677:17	5	-- h
LEAF_NODE	1677:15	1677:15	6	--
FIELD	1677:17	1677:17	6	h
LEAF_NODE	1677:17	1677:17	7	h
LEAF_NODE	1677:18	1677:18	4	)
STATEMENTS	1677:20	1690:1	4	
LEAF_NODE	1677:20	1677:20	5	{
STATEMENTS	1678:2	1689:2	5	
SIMPLE_DECL	1678:2	1678:23	6	uint32 rv , uint32 gv , uint32 bv , uint32 av ;
INIT_DECL_LIST	1678:2	1678:2	7	uint32 rv , uint32 gv , uint32 bv , uint32 av
VAR_DECL	1678:2	1678:9	8	uint32 rv
TYPE	1678:2	1678:2	9	uint32
TYPE_NAME	1678:2	1678:2	10	uint32
LEAF_NODE	1678:2	1678:2	11	uint32
NAME	1678:9	1678:9	9	rv
LEAF_NODE	1678:9	1678:9	10	rv
LEAF_NODE	1678:11	1678:11	8	,
INIT_DECL_LIST	1678:2	1678:2	8	uint32 gv , uint32 bv , uint32 av
VAR_DECL	1678:2	1678:13	9	uint32 gv
TYPE	1678:2	1678:2	10	uint32
TYPE_NAME	1678:2	1678:2	11	uint32
LEAF_NODE	1678:2	1678:2	12	uint32
NAME	1678:13	1678:13	10	gv
LEAF_NODE	1678:13	1678:13	11	gv
LEAF_NODE	1678:15	1678:15	9	,
INIT_DECL_LIST	1678:2	1678:2	9	uint32 bv , uint32 av
VAR_DECL	1678:2	1678:17	10	uint32 bv
TYPE	1678:2	1678:2	11	uint32
TYPE_NAME	1678:2	1678:2	12	uint32
LEAF_NODE	1678:2	1678:2	13	uint32
NAME	1678:17	1678:17	11	bv
LEAF_NODE	1678:17	1678:17	12	bv
LEAF_NODE	1678:19	1678:19	10	,
VAR_DECL	1678:2	1678:21	10	uint32 av
TYPE	1678:2	1678:2	11	uint32
TYPE_NAME	1678:2	1678:2	12	uint32
LEAF_NODE	1678:2	1678:2	13	uint32
NAME	1678:21	1678:21	11	av
LEAF_NODE	1678:21	1678:21	12	av
LEAF_NODE	1678:23	1678:23	7	;
SIMPLE_DECL	1679:2	1679:10	6	uint8 * m ;
VAR_DECL	1679:2	1679:9	7	uint8 * m
TYPE	1679:2	1679:7	8	uint8 *
TYPE_NAME	1679:2	1679:2	9	uint8
LEAF_NODE	1679:2	1679:2	10	uint8
POINTER	1679:7	1679:7	9	*
LEAF_NODE	1679:7	1679:7	10	*
NAME	1679:9	1679:9	8	m
LEAF_NODE	1679:9	1679:9	9	m
LEAF_NODE	1679:10	1679:10	7	;
ITERATION	1680:2	1680:26	6	
KEYWORD	1680:2	1680:2	7	for
LEAF_NODE	1680:2	1680:2	8	for
LEAF_NODE	1680:6	1680:6	7	(
FOR_INIT	1680:7	1680:12	7	x = w ;
EXPR	1680:7	1680:7	8	x = w
ASSIGN	1680:7	1680:11	9	x = w
LVAL	1680:7	1680:7	10	x
FIELD	1680:7	1680:7	11	x
LEAF_NODE	1680:7	1680:7	12	x
ASSIGN_OP	1680:9	1680:9	10	=
LEAF_NODE	1680:9	1680:9	11	=
RVAL	1680:11	1680:11	10	w
FIELD	1680:11	1680:11	11	w
LEAF_NODE	1680:11	1680:11	12	w
LEAF_NODE	1680:12	1680:12	8	;
CONDITION	1680:14	1680:14	7	x > 0
EXPR	1680:14	1680:18	8	x > 0
FIELD	1680:14	1680:14	9	x
LEAF_NODE	1680:14	1680:14	10	x
REL_OPERATOR	1680:16	1680:16	9	>
LEAF_NODE	1680:16	1680:16	10	>
FIELD	1680:18	1680:18	9	0
LEAF_NODE	1680:18	1680:18	10	0
LEAF_NODE	1680:19	1680:19	7	;
FOR_EXPR	1680:21	1680:21	7	-- x
EXPR	1680:21	1680:23	8	-- x
LEAF_NODE	1680:21	1680:21	9	--
FIELD	1680:23	1680:23	9	x
LEAF_NODE	1680:23	1680:23	10	x
LEAF_NODE	1680:24	1680:24	7	)
STATEMENTS	1680:26	1687:2	7	
LEAF_NODE	1680:26	1680:26	8	{
STATEMENTS	1681:3	1686:3	8	
EXPR_STATEMENT	1681:3	1681:12	9	av = * a ++ ;
EXPR	1681:3	1681:3	10	av = * a ++
ASSIGN	1681:3	1681:8	11	av = * a ++
LVAL	1681:3	1681:3	12	av
FIELD	1681:3	1681:3	13	av
LEAF_NODE	1681:3	1681:3	14	av
ASSIGN_OP	1681:6	1681:6	12	=
LEAF_NODE	1681:6	1681:6	13	=
RVAL	1681:8	1681:8	12	* a ++
UNARY_EXPR	1681:8	1681:9	13	* a ++
UNARY_OPERATOR	1681:8	1681:8	14	*
LEAF_NODE	1681:8	1681:8	15	*
FIELD	1681:9	1681:10	14	a ++
LEAF_NODE	1681:9	1681:9	15	a
LEAF_NODE	1681:10	1681:10	15	++
LEAF_NODE	1681:12	1681:12	10	;
EXPR_STATEMENT	1682:3	1682:35	9	m = img -> UaToAa + ( ( size_t ) av << 8 ) ;
EXPR	1682:3	1682:3	10	m = img -> UaToAa + ( ( size_t ) av << 8 )
ASSIGN	1682:3	1682:7	11	m = img -> UaToAa + ( ( size_t ) av << 8 )
LVAL	1682:3	1682:3	12	m
FIELD	1682:3	1682:3	13	m
LEAF_NODE	1682:3	1682:3	14	m
ASSIGN_OP	1682:5	1682:5	12	=
LEAF_NODE	1682:5	1682:5	13	=
RVAL	1682:7	1682:34	12	img -> UaToAa + ( ( size_t ) av << 8 )
FIELD	1682:7	1682:12	13	img -> UaToAa
LEAF_NODE	1682:7	1682:7	14	img
LEAF_NODE	1682:10	1682:10	14	->
LEAF_NODE	1682:12	1682:12	14	UaToAa
LEAF_NODE	1682:18	1682:18	13	+
LEAF_NODE	1682:19	1682:19	13	(
LEAF_NODE	1682:20	1682:20	13	(
TYPE_NAME	1682:21	1682:21	13	size_t
LEAF_NODE	1682:21	1682:21	14	size_t
LEAF_NODE	1682:27	1682:27	13	)
FIELD	1682:29	1682:29	13	av
LEAF_NODE	1682:29	1682:29	14	av
LEAF_NODE	1682:31	1682:31	13	<<
FIELD	1682:33	1682:33	13	8
LEAF_NODE	1682:33	1682:33	14	8
LEAF_NODE	1682:34	1682:34	13	)
LEAF_NODE	1682:35	1682:35	10	;
EXPR_STATEMENT	1683:3	1683:15	9	rv = m [ * r ++ ] ;
EXPR	1683:3	1683:3	10	rv = m [ * r ++ ]
ASSIGN	1683:3	1683:8	11	rv = m [ * r ++ ]
LVAL	1683:3	1683:3	12	rv
FIELD	1683:3	1683:3	13	rv
LEAF_NODE	1683:3	1683:3	14	rv
ASSIGN_OP	1683:6	1683:6	12	=
LEAF_NODE	1683:6	1683:6	13	=
RVAL	1683:8	1683:8	12	m [ * r ++ ]
FIELD	1683:8	1683:14	13	m [ * r ++ ]
LEAF_NODE	1683:8	1683:8	14	m
LEAF_NODE	1683:9	1683:9	14	[
EXPR	1683:10	1683:10	14	* r ++
UNARY_EXPR	1683:10	1683:11	15	* r ++
UNARY_OPERATOR	1683:10	1683:10	16	*
LEAF_NODE	1683:10	1683:10	17	*
FIELD	1683:11	1683:12	16	r ++
LEAF_NODE	1683:11	1683:11	17	r
LEAF_NODE	1683:12	1683:12	17	++
LEAF_NODE	1683:14	1683:14	14	]
LEAF_NODE	1683:15	1683:15	10	;
EXPR_STATEMENT	1684:3	1684:15	9	gv = m [ * g ++ ] ;
EXPR	1684:3	1684:3	10	gv = m [ * g ++ ]
ASSIGN	1684:3	1684:8	11	gv = m [ * g ++ ]
LVAL	1684:3	1684:3	12	gv
FIELD	1684:3	1684:3	13	gv
LEAF_NODE	1684:3	1684:3	14	gv
ASSIGN_OP	1684:6	1684:6	12	=
LEAF_NODE	1684:6	1684:6	13	=
RVAL	1684:8	1684:8	12	m [ * g ++ ]
FIELD	1684:8	1684:14	13	m [ * g ++ ]
LEAF_NODE	1684:8	1684:8	14	m
LEAF_NODE	1684:9	1684:9	14	[
EXPR	1684:10	1684:10	14	* g ++
UNARY_EXPR	1684:10	1684:11	15	* g ++
UNARY_OPERATOR	1684:10	1684:10	16	*
LEAF_NODE	1684:10	1684:10	17	*
FIELD	1684:11	1684:12	16	g ++
LEAF_NODE	1684:11	1684:11	17	g
LEAF_NODE	1684:12	1684:12	17	++
LEAF_NODE	1684:14	1684:14	14	]
LEAF_NODE	1684:15	1684:15	10	;
EXPR_STATEMENT	1685:3	1685:15	9	bv = m [ * b ++ ] ;
EXPR	1685:3	1685:3	10	bv = m [ * b ++ ]
ASSIGN	1685:3	1685:8	11	bv = m [ * b ++ ]
LVAL	1685:3	1685:3	12	bv
FIELD	1685:3	1685:3	13	bv
LEAF_NODE	1685:3	1685:3	14	bv
ASSIGN_OP	1685:6	1685:6	12	=
LEAF_NODE	1685:6	1685:6	13	=
RVAL	1685:8	1685:8	12	m [ * b ++ ]
FIELD	1685:8	1685:14	13	m [ * b ++ ]
LEAF_NODE	1685:8	1685:8	14	m
LEAF_NODE	1685:9	1685:9	14	[
EXPR	1685:10	1685:10	14	* b ++
UNARY_EXPR	1685:10	1685:11	15	* b ++
UNARY_OPERATOR	1685:10	1685:10	16	*
LEAF_NODE	1685:10	1685:10	17	*
FIELD	1685:11	1685:12	16	b ++
LEAF_NODE	1685:11	1685:11	17	b
LEAF_NODE	1685:12	1685:12	17	++
LEAF_NODE	1685:14	1685:14	14	]
LEAF_NODE	1685:15	1685:15	10	;
EXPR_STATEMENT	1686:3	1686:29	9	* cp ++ = PACK4 ( rv , gv , bv , av ) ;
EXPR	1686:3	1686:3	10	* cp ++ = PACK4 ( rv , gv , bv , av )
ASSIGN	1686:3	1686:11	11	* cp ++ = PACK4 ( rv , gv , bv , av )
LVAL	1686:3	1686:3	12	* cp ++
UNARY_EXPR	1686:3	1686:4	13	* cp ++
UNARY_OPERATOR	1686:3	1686:3	14	*
LEAF_NODE	1686:3	1686:3	15	*
FIELD	1686:4	1686:6	14	cp ++
LEAF_NODE	1686:4	1686:4	15	cp
LEAF_NODE	1686:6	1686:6	15	++
ASSIGN_OP	1686:9	1686:9	12	=
LEAF_NODE	1686:9	1686:9	13	=
RVAL	1686:11	1686:11	12	PACK4 ( rv , gv , bv , av )
FUNCTION_CALL	1686:11	1686:28	13	PACK4 ( rv , gv , bv , av )
CALLEE	1686:11	1686:11	14	PACK4
LEAF_NODE	1686:11	1686:11	15	PACK4
LEAF_NODE	1686:16	1686:16	14	(
ARGUMENT	1686:17	1686:17	14	rv
FIELD	1686:17	1686:17	15	rv
LEAF_NODE	1686:17	1686:17	16	rv
LEAF_NODE	1686:19	1686:19	14	,
ARGUMENT	1686:20	1686:20	14	gv
FIELD	1686:20	1686:20	15	gv
LEAF_NODE	1686:20	1686:20	16	gv
LEAF_NODE	1686:22	1686:22	14	,
ARGUMENT	1686:23	1686:23	14	bv
FIELD	1686:23	1686:23	15	bv
LEAF_NODE	1686:23	1686:23	16	bv
LEAF_NODE	1686:25	1686:25	14	,
ARGUMENT	1686:26	1686:26	14	av
FIELD	1686:26	1686:26	15	av
LEAF_NODE	1686:26	1686:26	16	av
LEAF_NODE	1686:28	1686:28	14	)
LEAF_NODE	1686:29	1686:29	10	;
LEAF_NODE	1687:2	1687:2	8	}
EXPR_STATEMENT	1688:2	1688:29	6	SKEW4 ( r , g , b , a , fromskew ) ;
EXPR	1688:2	1688:2	7	SKEW4 ( r , g , b , a , fromskew )
FUNCTION_CALL	1688:2	1688:28	8	SKEW4 ( r , g , b , a , fromskew )
CALLEE	1688:2	1688:2	9	SKEW4
LEAF_NODE	1688:2	1688:2	10	SKEW4
LEAF_NODE	1688:7	1688:7	9	(
ARGUMENT	1688:8	1688:8	9	r
FIELD	1688:8	1688:8	10	r
LEAF_NODE	1688:8	1688:8	11	r
LEAF_NODE	1688:9	1688:9	9	,
ARGUMENT	1688:11	1688:11	9	g
FIELD	1688:11	1688:11	10	g
LEAF_NODE	1688:11	1688:11	11	g
LEAF_NODE	1688:12	1688:12	9	,
ARGUMENT	1688:14	1688:14	9	b
FIELD	1688:14	1688:14	10	b
LEAF_NODE	1688:14	1688:14	11	b
LEAF_NODE	1688:15	1688:15	9	,
ARGUMENT	1688:17	1688:17	9	a
FIELD	1688:17	1688:17	10	a
LEAF_NODE	1688:17	1688:17	11	a
LEAF_NODE	1688:18	1688:18	9	,
ARGUMENT	1688:20	1688:20	9	fromskew
FIELD	1688:20	1688:20	10	fromskew
LEAF_NODE	1688:20	1688:20	11	fromskew
LEAF_NODE	1688:28	1688:28	9	)
LEAF_NODE	1688:29	1688:29	7	;
EXPR_STATEMENT	1689:2	1689:14	6	cp += toskew ;
EXPR	1689:2	1689:2	7	cp += toskew
ASSIGN	1689:2	1689:8	8	cp += toskew
LVAL	1689:2	1689:2	9	cp
FIELD	1689:2	1689:2	10	cp
LEAF_NODE	1689:2	1689:2	11	cp
ASSIGN_OP	1689:5	1689:5	9	+=
LEAF_NODE	1689:5	1689:5	10	+=
RVAL	1689:8	1689:8	9	toskew
FIELD	1689:8	1689:8	10	toskew
LEAF_NODE	1689:8	1689:8	11	toskew
LEAF_NODE	1689:14	1689:14	7	;
LEAF_NODE	1690:1	1690:1	5	}
LEAF_NODE	1691:0	1691:0	2	}
FUNCTION_DEF	0:0	1710:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1696:0	1696:0	2	DECLARESepPutFunc
LEAF_NODE	1696:0	1696:0	3	DECLARESepPutFunc
PARAMETER_LIST	1696:17	1696:41	2	( putRGBseparate16bittile )
LEAF_NODE	1696:17	1696:17	3	(
PARAMETER_DECL	1696:18	1696:18	3	putRGBseparate16bittile
LEAF_NODE	1696:18	1696:18	4	putRGBseparate16bittile
LEAF_NODE	1696:41	1696:41	3	)
LEAF_NODE	1697:0	1697:0	2	{
STATEMENTS	1698:1	1702:1	2	
SIMPLE_DECL	1698:1	1698:25	3	uint16 * wr ; wr = ( uint16 * ) r ;
VAR_DECL	1698:1	1698:9	4	uint16 * wr ; wr = ( uint16 * ) r
TYPE	1698:1	1698:8	5	uint16 *
TYPE_NAME	1698:1	1698:1	6	uint16
LEAF_NODE	1698:1	1698:1	7	uint16
POINTER	1698:8	1698:8	6	*
LEAF_NODE	1698:8	1698:8	7	*
NAME	1698:9	1698:9	5	wr
LEAF_NODE	1698:9	1698:9	6	wr
LEAF_NODE	0:0	0:0	5	;
INIT	1698:9	1698:9	5	wr = ( uint16 * ) r
ASSIGN	1698:9	1698:14	6	wr = ( uint16 * ) r
LVAL	1698:9	1698:9	7	wr
NAME	1698:9	1698:9	8	wr
LEAF_NODE	1698:9	1698:9	9	wr
ASSIGN_OP	1698:12	1698:12	7	=
LEAF_NODE	1698:12	1698:12	8	=
RVAL	1698:14	1698:24	7	( uint16 * ) r
LEAF_NODE	1698:14	1698:14	8	(
TYPE_NAME	1698:15	1698:15	8	uint16
LEAF_NODE	1698:15	1698:15	9	uint16
LEAF_NODE	1698:21	1698:21	8	*
LEAF_NODE	1698:22	1698:22	8	)
FIELD	1698:24	1698:24	8	r
LEAF_NODE	1698:24	1698:24	9	r
LEAF_NODE	1698:25	1698:25	4	;
SIMPLE_DECL	1699:1	1699:25	3	uint16 * wg ; wg = ( uint16 * ) g ;
VAR_DECL	1699:1	1699:9	4	uint16 * wg ; wg = ( uint16 * ) g
TYPE	1699:1	1699:8	5	uint16 *
TYPE_NAME	1699:1	1699:1	6	uint16
LEAF_NODE	1699:1	1699:1	7	uint16
POINTER	1699:8	1699:8	6	*
LEAF_NODE	1699:8	1699:8	7	*
NAME	1699:9	1699:9	5	wg
LEAF_NODE	1699:9	1699:9	6	wg
LEAF_NODE	0:0	0:0	5	;
INIT	1699:9	1699:9	5	wg = ( uint16 * ) g
ASSIGN	1699:9	1699:14	6	wg = ( uint16 * ) g
LVAL	1699:9	1699:9	7	wg
NAME	1699:9	1699:9	8	wg
LEAF_NODE	1699:9	1699:9	9	wg
ASSIGN_OP	1699:12	1699:12	7	=
LEAF_NODE	1699:12	1699:12	8	=
RVAL	1699:14	1699:24	7	( uint16 * ) g
LEAF_NODE	1699:14	1699:14	8	(
TYPE_NAME	1699:15	1699:15	8	uint16
LEAF_NODE	1699:15	1699:15	9	uint16
LEAF_NODE	1699:21	1699:21	8	*
LEAF_NODE	1699:22	1699:22	8	)
FIELD	1699:24	1699:24	8	g
LEAF_NODE	1699:24	1699:24	9	g
LEAF_NODE	1699:25	1699:25	4	;
SIMPLE_DECL	1700:1	1700:25	3	uint16 * wb ; wb = ( uint16 * ) b ;
VAR_DECL	1700:1	1700:9	4	uint16 * wb ; wb = ( uint16 * ) b
TYPE	1700:1	1700:8	5	uint16 *
TYPE_NAME	1700:1	1700:1	6	uint16
LEAF_NODE	1700:1	1700:1	7	uint16
POINTER	1700:8	1700:8	6	*
LEAF_NODE	1700:8	1700:8	7	*
NAME	1700:9	1700:9	5	wb
LEAF_NODE	1700:9	1700:9	6	wb
LEAF_NODE	0:0	0:0	5	;
INIT	1700:9	1700:9	5	wb = ( uint16 * ) b
ASSIGN	1700:9	1700:14	6	wb = ( uint16 * ) b
LVAL	1700:9	1700:9	7	wb
NAME	1700:9	1700:9	8	wb
LEAF_NODE	1700:9	1700:9	9	wb
ASSIGN_OP	1700:12	1700:12	7	=
LEAF_NODE	1700:12	1700:12	8	=
RVAL	1700:14	1700:24	7	( uint16 * ) b
LEAF_NODE	1700:14	1700:14	8	(
TYPE_NAME	1700:15	1700:15	8	uint16
LEAF_NODE	1700:15	1700:15	9	uint16
LEAF_NODE	1700:21	1700:21	8	*
LEAF_NODE	1700:22	1700:22	8	)
FIELD	1700:24	1700:24	8	b
LEAF_NODE	1700:24	1700:24	9	b
LEAF_NODE	1700:25	1700:25	4	;
EXPR_STATEMENT	1701:1	1701:11	3	( void ) img ;
EXPR	1701:1	1701:8	4	( void ) img
LEAF_NODE	1701:1	1701:1	5	(
TYPE_NAME	1701:2	1701:2	5	void
LEAF_NODE	1701:2	1701:2	6	void
LEAF_NODE	1701:6	1701:6	5	)
FIELD	1701:8	1701:8	5	img
LEAF_NODE	1701:8	1701:8	6	img
LEAF_NODE	1701:11	1701:11	4	;
EXPR_STATEMENT	1701:13	1701:21	3	( void ) y ;
EXPR	1701:13	1701:20	4	( void ) y
LEAF_NODE	1701:13	1701:13	5	(
TYPE_NAME	1701:14	1701:14	5	void
LEAF_NODE	1701:14	1701:14	6	void
LEAF_NODE	1701:18	1701:18	5	)
FIELD	1701:20	1701:20	5	y
LEAF_NODE	1701:20	1701:20	6	y
LEAF_NODE	1701:21	1701:21	4	;
EXPR_STATEMENT	1701:23	1701:31	3	( void ) a ;
EXPR	1701:23	1701:30	4	( void ) a
LEAF_NODE	1701:23	1701:23	5	(
TYPE_NAME	1701:24	1701:24	5	void
LEAF_NODE	1701:24	1701:24	6	void
LEAF_NODE	1701:28	1701:28	5	)
FIELD	1701:30	1701:30	5	a
LEAF_NODE	1701:30	1701:30	6	a
LEAF_NODE	1701:31	1701:31	4	;
ITERATION	1702:1	1702:20	3	
KEYWORD	1702:1	1702:1	4	for
LEAF_NODE	1702:1	1702:1	5	for
LEAF_NODE	1702:4	1702:4	4	(
FOR_INIT	1702:6	1702:6	4	;
LEAF_NODE	1702:6	1702:6	5	;
CONDITION	1702:8	1702:8	4	h > 0
EXPR	1702:8	1702:12	5	h > 0
FIELD	1702:8	1702:8	6	h
LEAF_NODE	1702:8	1702:8	7	h
REL_OPERATOR	1702:10	1702:10	6	>
LEAF_NODE	1702:10	1702:10	7	>
FIELD	1702:12	1702:12	6	0
LEAF_NODE	1702:12	1702:12	7	0
LEAF_NODE	1702:13	1702:13	4	;
FOR_EXPR	1702:15	1702:15	4	-- h
EXPR	1702:15	1702:17	5	-- h
LEAF_NODE	1702:15	1702:15	6	--
FIELD	1702:17	1702:17	6	h
LEAF_NODE	1702:17	1702:17	7	h
LEAF_NODE	1702:18	1702:18	4	)
STATEMENTS	1702:20	1709:1	4	
LEAF_NODE	1702:20	1702:20	5	{
STATEMENTS	1703:2	1708:2	5	
ITERATION	1703:2	1704:3	6	
KEYWORD	1703:2	1703:2	7	for
LEAF_NODE	1703:2	1703:2	8	for
LEAF_NODE	1703:6	1703:6	7	(
FOR_INIT	1703:7	1703:12	7	x = 0 ;
EXPR	1703:7	1703:7	8	x = 0
ASSIGN	1703:7	1703:11	9	x = 0
LVAL	1703:7	1703:7	10	x
FIELD	1703:7	1703:7	11	x
LEAF_NODE	1703:7	1703:7	12	x
ASSIGN_OP	1703:9	1703:9	10	=
LEAF_NODE	1703:9	1703:9	11	=
RVAL	1703:11	1703:11	10	0
FIELD	1703:11	1703:11	11	0
LEAF_NODE	1703:11	1703:11	12	0
LEAF_NODE	1703:12	1703:12	8	;
CONDITION	1703:14	1703:14	7	x < w
EXPR	1703:14	1703:18	8	x < w
FIELD	1703:14	1703:14	9	x
LEAF_NODE	1703:14	1703:14	10	x
REL_OPERATOR	1703:16	1703:16	9	<
LEAF_NODE	1703:16	1703:16	10	<
FIELD	1703:18	1703:18	9	w
LEAF_NODE	1703:18	1703:18	10	w
LEAF_NODE	1703:19	1703:19	7	;
FOR_EXPR	1703:21	1703:21	7	x ++
EXPR	1703:21	1703:21	8	x ++
FIELD	1703:21	1703:22	9	x ++
LEAF_NODE	1703:21	1703:21	10	x
LEAF_NODE	1703:22	1703:22	10	++
LEAF_NODE	1703:24	1703:24	7	)
STATEMENTS	1704:3	1704:3	7	
EXPR_STATEMENT	1704:3	1706:33	8	* cp ++ = PACK ( img -> Bitdepth16To8 [ * wr ++ ] , img -> Bitdepth16To8 [ * wg ++ ] , img -> Bitdepth16To8 [ * wb ++ ] ) ;
EXPR	1704:3	1704:3	9	* cp ++ = PACK ( img -> Bitdepth16To8 [ * wr ++ ] , img -> Bitdepth16To8 [ * wg ++ ] , img -> Bitdepth16To8 [ * wb ++ ] )
ASSIGN	1704:3	1704:11	10	* cp ++ = PACK ( img -> Bitdepth16To8 [ * wr ++ ] , img -> Bitdepth16To8 [ * wg ++ ] , img -> Bitdepth16To8 [ * wb ++ ] )
LVAL	1704:3	1704:3	11	* cp ++
UNARY_EXPR	1704:3	1704:4	12	* cp ++
UNARY_OPERATOR	1704:3	1704:3	13	*
LEAF_NODE	1704:3	1704:3	14	*
FIELD	1704:4	1704:6	13	cp ++
LEAF_NODE	1704:4	1704:4	14	cp
LEAF_NODE	1704:6	1704:6	14	++
ASSIGN_OP	1704:9	1704:9	11	=
LEAF_NODE	1704:9	1704:9	12	=
RVAL	1704:11	1704:11	11	PACK ( img -> Bitdepth16To8 [ * wr ++ ] , img -> Bitdepth16To8 [ * wg ++ ] , img -> Bitdepth16To8 [ * wb ++ ] )
FUNCTION_CALL	1704:11	1706:32	12	PACK ( img -> Bitdepth16To8 [ * wr ++ ] , img -> Bitdepth16To8 [ * wg ++ ] , img -> Bitdepth16To8 [ * wb ++ ] )
CALLEE	1704:11	1704:11	13	PACK
LEAF_NODE	1704:11	1704:11	14	PACK
LEAF_NODE	1704:15	1704:15	13	(
ARGUMENT	1704:16	1704:16	13	img -> Bitdepth16To8 [ * wr ++ ]
FIELD	1704:16	1704:40	14	img -> Bitdepth16To8 [ * wr ++ ]
LEAF_NODE	1704:16	1704:16	15	img
LEAF_NODE	1704:19	1704:19	15	->
LEAF_NODE	1704:21	1704:21	15	Bitdepth16To8
LEAF_NODE	1704:34	1704:34	15	[
EXPR	1704:35	1704:35	15	* wr ++
UNARY_EXPR	1704:35	1704:36	16	* wr ++
UNARY_OPERATOR	1704:35	1704:35	17	*
LEAF_NODE	1704:35	1704:35	18	*
FIELD	1704:36	1704:38	17	wr ++
LEAF_NODE	1704:36	1704:36	18	wr
LEAF_NODE	1704:38	1704:38	18	++
LEAF_NODE	1704:40	1704:40	15	]
LEAF_NODE	1704:41	1704:41	13	,
ARGUMENT	1705:7	1705:7	13	img -> Bitdepth16To8 [ * wg ++ ]
FIELD	1705:7	1705:31	14	img -> Bitdepth16To8 [ * wg ++ ]
LEAF_NODE	1705:7	1705:7	15	img
LEAF_NODE	1705:10	1705:10	15	->
LEAF_NODE	1705:12	1705:12	15	Bitdepth16To8
LEAF_NODE	1705:25	1705:25	15	[
EXPR	1705:26	1705:26	15	* wg ++
UNARY_EXPR	1705:26	1705:27	16	* wg ++
UNARY_OPERATOR	1705:26	1705:26	17	*
LEAF_NODE	1705:26	1705:26	18	*
FIELD	1705:27	1705:29	17	wg ++
LEAF_NODE	1705:27	1705:27	18	wg
LEAF_NODE	1705:29	1705:29	18	++
LEAF_NODE	1705:31	1705:31	15	]
LEAF_NODE	1705:32	1705:32	13	,
ARGUMENT	1706:7	1706:7	13	img -> Bitdepth16To8 [ * wb ++ ]
FIELD	1706:7	1706:31	14	img -> Bitdepth16To8 [ * wb ++ ]
LEAF_NODE	1706:7	1706:7	15	img
LEAF_NODE	1706:10	1706:10	15	->
LEAF_NODE	1706:12	1706:12	15	Bitdepth16To8
LEAF_NODE	1706:25	1706:25	15	[
EXPR	1706:26	1706:26	15	* wb ++
UNARY_EXPR	1706:26	1706:27	16	* wb ++
UNARY_OPERATOR	1706:26	1706:26	17	*
LEAF_NODE	1706:26	1706:26	18	*
FIELD	1706:27	1706:29	17	wb ++
LEAF_NODE	1706:27	1706:27	18	wb
LEAF_NODE	1706:29	1706:29	18	++
LEAF_NODE	1706:31	1706:31	15	]
LEAF_NODE	1706:32	1706:32	13	)
LEAF_NODE	1706:33	1706:33	9	;
EXPR_STATEMENT	1707:2	1707:28	6	SKEW ( wr , wg , wb , fromskew ) ;
EXPR	1707:2	1707:2	7	SKEW ( wr , wg , wb , fromskew )
FUNCTION_CALL	1707:2	1707:27	8	SKEW ( wr , wg , wb , fromskew )
CALLEE	1707:2	1707:2	9	SKEW
LEAF_NODE	1707:2	1707:2	10	SKEW
LEAF_NODE	1707:6	1707:6	9	(
ARGUMENT	1707:7	1707:7	9	wr
FIELD	1707:7	1707:7	10	wr
LEAF_NODE	1707:7	1707:7	11	wr
LEAF_NODE	1707:9	1707:9	9	,
ARGUMENT	1707:11	1707:11	9	wg
FIELD	1707:11	1707:11	10	wg
LEAF_NODE	1707:11	1707:11	11	wg
LEAF_NODE	1707:13	1707:13	9	,
ARGUMENT	1707:15	1707:15	9	wb
FIELD	1707:15	1707:15	10	wb
LEAF_NODE	1707:15	1707:15	11	wb
LEAF_NODE	1707:17	1707:17	9	,
ARGUMENT	1707:19	1707:19	9	fromskew
FIELD	1707:19	1707:19	10	fromskew
LEAF_NODE	1707:19	1707:19	11	fromskew
LEAF_NODE	1707:27	1707:27	9	)
LEAF_NODE	1707:28	1707:28	7	;
EXPR_STATEMENT	1708:2	1708:14	6	cp += toskew ;
EXPR	1708:2	1708:2	7	cp += toskew
ASSIGN	1708:2	1708:8	8	cp += toskew
LVAL	1708:2	1708:2	9	cp
FIELD	1708:2	1708:2	10	cp
LEAF_NODE	1708:2	1708:2	11	cp
ASSIGN_OP	1708:5	1708:5	9	+=
LEAF_NODE	1708:5	1708:5	10	+=
RVAL	1708:8	1708:8	9	toskew
FIELD	1708:8	1708:8	10	toskew
LEAF_NODE	1708:8	1708:8	11	toskew
LEAF_NODE	1708:14	1708:14	7	;
LEAF_NODE	1709:1	1709:1	5	}
LEAF_NODE	1710:0	1710:0	2	}
FUNCTION_DEF	0:0	1731:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1715:0	1715:0	2	DECLARESepPutFunc
LEAF_NODE	1715:0	1715:0	3	DECLARESepPutFunc
PARAMETER_LIST	1715:17	1715:43	2	( putRGBAAseparate16bittile )
LEAF_NODE	1715:17	1715:17	3	(
PARAMETER_DECL	1715:18	1715:18	3	putRGBAAseparate16bittile
LEAF_NODE	1715:18	1715:18	4	putRGBAAseparate16bittile
LEAF_NODE	1715:43	1715:43	3	)
LEAF_NODE	1716:0	1716:0	2	{
STATEMENTS	1717:1	1722:1	2	
SIMPLE_DECL	1717:1	1717:25	3	uint16 * wr ; wr = ( uint16 * ) r ;
VAR_DECL	1717:1	1717:9	4	uint16 * wr ; wr = ( uint16 * ) r
TYPE	1717:1	1717:8	5	uint16 *
TYPE_NAME	1717:1	1717:1	6	uint16
LEAF_NODE	1717:1	1717:1	7	uint16
POINTER	1717:8	1717:8	6	*
LEAF_NODE	1717:8	1717:8	7	*
NAME	1717:9	1717:9	5	wr
LEAF_NODE	1717:9	1717:9	6	wr
LEAF_NODE	0:0	0:0	5	;
INIT	1717:9	1717:9	5	wr = ( uint16 * ) r
ASSIGN	1717:9	1717:14	6	wr = ( uint16 * ) r
LVAL	1717:9	1717:9	7	wr
NAME	1717:9	1717:9	8	wr
LEAF_NODE	1717:9	1717:9	9	wr
ASSIGN_OP	1717:12	1717:12	7	=
LEAF_NODE	1717:12	1717:12	8	=
RVAL	1717:14	1717:24	7	( uint16 * ) r
LEAF_NODE	1717:14	1717:14	8	(
TYPE_NAME	1717:15	1717:15	8	uint16
LEAF_NODE	1717:15	1717:15	9	uint16
LEAF_NODE	1717:21	1717:21	8	*
LEAF_NODE	1717:22	1717:22	8	)
FIELD	1717:24	1717:24	8	r
LEAF_NODE	1717:24	1717:24	9	r
LEAF_NODE	1717:25	1717:25	4	;
SIMPLE_DECL	1718:1	1718:25	3	uint16 * wg ; wg = ( uint16 * ) g ;
VAR_DECL	1718:1	1718:9	4	uint16 * wg ; wg = ( uint16 * ) g
TYPE	1718:1	1718:8	5	uint16 *
TYPE_NAME	1718:1	1718:1	6	uint16
LEAF_NODE	1718:1	1718:1	7	uint16
POINTER	1718:8	1718:8	6	*
LEAF_NODE	1718:8	1718:8	7	*
NAME	1718:9	1718:9	5	wg
LEAF_NODE	1718:9	1718:9	6	wg
LEAF_NODE	0:0	0:0	5	;
INIT	1718:9	1718:9	5	wg = ( uint16 * ) g
ASSIGN	1718:9	1718:14	6	wg = ( uint16 * ) g
LVAL	1718:9	1718:9	7	wg
NAME	1718:9	1718:9	8	wg
LEAF_NODE	1718:9	1718:9	9	wg
ASSIGN_OP	1718:12	1718:12	7	=
LEAF_NODE	1718:12	1718:12	8	=
RVAL	1718:14	1718:24	7	( uint16 * ) g
LEAF_NODE	1718:14	1718:14	8	(
TYPE_NAME	1718:15	1718:15	8	uint16
LEAF_NODE	1718:15	1718:15	9	uint16
LEAF_NODE	1718:21	1718:21	8	*
LEAF_NODE	1718:22	1718:22	8	)
FIELD	1718:24	1718:24	8	g
LEAF_NODE	1718:24	1718:24	9	g
LEAF_NODE	1718:25	1718:25	4	;
SIMPLE_DECL	1719:1	1719:25	3	uint16 * wb ; wb = ( uint16 * ) b ;
VAR_DECL	1719:1	1719:9	4	uint16 * wb ; wb = ( uint16 * ) b
TYPE	1719:1	1719:8	5	uint16 *
TYPE_NAME	1719:1	1719:1	6	uint16
LEAF_NODE	1719:1	1719:1	7	uint16
POINTER	1719:8	1719:8	6	*
LEAF_NODE	1719:8	1719:8	7	*
NAME	1719:9	1719:9	5	wb
LEAF_NODE	1719:9	1719:9	6	wb
LEAF_NODE	0:0	0:0	5	;
INIT	1719:9	1719:9	5	wb = ( uint16 * ) b
ASSIGN	1719:9	1719:14	6	wb = ( uint16 * ) b
LVAL	1719:9	1719:9	7	wb
NAME	1719:9	1719:9	8	wb
LEAF_NODE	1719:9	1719:9	9	wb
ASSIGN_OP	1719:12	1719:12	7	=
LEAF_NODE	1719:12	1719:12	8	=
RVAL	1719:14	1719:24	7	( uint16 * ) b
LEAF_NODE	1719:14	1719:14	8	(
TYPE_NAME	1719:15	1719:15	8	uint16
LEAF_NODE	1719:15	1719:15	9	uint16
LEAF_NODE	1719:21	1719:21	8	*
LEAF_NODE	1719:22	1719:22	8	)
FIELD	1719:24	1719:24	8	b
LEAF_NODE	1719:24	1719:24	9	b
LEAF_NODE	1719:25	1719:25	4	;
SIMPLE_DECL	1720:1	1720:25	3	uint16 * wa ; wa = ( uint16 * ) a ;
VAR_DECL	1720:1	1720:9	4	uint16 * wa ; wa = ( uint16 * ) a
TYPE	1720:1	1720:8	5	uint16 *
TYPE_NAME	1720:1	1720:1	6	uint16
LEAF_NODE	1720:1	1720:1	7	uint16
POINTER	1720:8	1720:8	6	*
LEAF_NODE	1720:8	1720:8	7	*
NAME	1720:9	1720:9	5	wa
LEAF_NODE	1720:9	1720:9	6	wa
LEAF_NODE	0:0	0:0	5	;
INIT	1720:9	1720:9	5	wa = ( uint16 * ) a
ASSIGN	1720:9	1720:14	6	wa = ( uint16 * ) a
LVAL	1720:9	1720:9	7	wa
NAME	1720:9	1720:9	8	wa
LEAF_NODE	1720:9	1720:9	9	wa
ASSIGN_OP	1720:12	1720:12	7	=
LEAF_NODE	1720:12	1720:12	8	=
RVAL	1720:14	1720:24	7	( uint16 * ) a
LEAF_NODE	1720:14	1720:14	8	(
TYPE_NAME	1720:15	1720:15	8	uint16
LEAF_NODE	1720:15	1720:15	9	uint16
LEAF_NODE	1720:21	1720:21	8	*
LEAF_NODE	1720:22	1720:22	8	)
FIELD	1720:24	1720:24	8	a
LEAF_NODE	1720:24	1720:24	9	a
LEAF_NODE	1720:25	1720:25	4	;
EXPR_STATEMENT	1721:1	1721:11	3	( void ) img ;
EXPR	1721:1	1721:8	4	( void ) img
LEAF_NODE	1721:1	1721:1	5	(
TYPE_NAME	1721:2	1721:2	5	void
LEAF_NODE	1721:2	1721:2	6	void
LEAF_NODE	1721:6	1721:6	5	)
FIELD	1721:8	1721:8	5	img
LEAF_NODE	1721:8	1721:8	6	img
LEAF_NODE	1721:11	1721:11	4	;
EXPR_STATEMENT	1721:13	1721:21	3	( void ) y ;
EXPR	1721:13	1721:20	4	( void ) y
LEAF_NODE	1721:13	1721:13	5	(
TYPE_NAME	1721:14	1721:14	5	void
LEAF_NODE	1721:14	1721:14	6	void
LEAF_NODE	1721:18	1721:18	5	)
FIELD	1721:20	1721:20	5	y
LEAF_NODE	1721:20	1721:20	6	y
LEAF_NODE	1721:21	1721:21	4	;
ITERATION	1722:1	1722:20	3	
KEYWORD	1722:1	1722:1	4	for
LEAF_NODE	1722:1	1722:1	5	for
LEAF_NODE	1722:4	1722:4	4	(
FOR_INIT	1722:6	1722:6	4	;
LEAF_NODE	1722:6	1722:6	5	;
CONDITION	1722:8	1722:8	4	h > 0
EXPR	1722:8	1722:12	5	h > 0
FIELD	1722:8	1722:8	6	h
LEAF_NODE	1722:8	1722:8	7	h
REL_OPERATOR	1722:10	1722:10	6	>
LEAF_NODE	1722:10	1722:10	7	>
FIELD	1722:12	1722:12	6	0
LEAF_NODE	1722:12	1722:12	7	0
LEAF_NODE	1722:13	1722:13	4	;
FOR_EXPR	1722:15	1722:15	4	-- h
EXPR	1722:15	1722:17	5	-- h
LEAF_NODE	1722:15	1722:15	6	--
FIELD	1722:17	1722:17	6	h
LEAF_NODE	1722:17	1722:17	7	h
LEAF_NODE	1722:18	1722:18	4	)
STATEMENTS	1722:20	1730:1	4	
LEAF_NODE	1722:20	1722:20	5	{
STATEMENTS	1723:2	1729:2	5	
ITERATION	1723:2	1724:3	6	
KEYWORD	1723:2	1723:2	7	for
LEAF_NODE	1723:2	1723:2	8	for
LEAF_NODE	1723:6	1723:6	7	(
FOR_INIT	1723:7	1723:12	7	x = 0 ;
EXPR	1723:7	1723:7	8	x = 0
ASSIGN	1723:7	1723:11	9	x = 0
LVAL	1723:7	1723:7	10	x
FIELD	1723:7	1723:7	11	x
LEAF_NODE	1723:7	1723:7	12	x
ASSIGN_OP	1723:9	1723:9	10	=
LEAF_NODE	1723:9	1723:9	11	=
RVAL	1723:11	1723:11	10	0
FIELD	1723:11	1723:11	11	0
LEAF_NODE	1723:11	1723:11	12	0
LEAF_NODE	1723:12	1723:12	8	;
CONDITION	1723:14	1723:14	7	x < w
EXPR	1723:14	1723:18	8	x < w
FIELD	1723:14	1723:14	9	x
LEAF_NODE	1723:14	1723:14	10	x
REL_OPERATOR	1723:16	1723:16	9	<
LEAF_NODE	1723:16	1723:16	10	<
FIELD	1723:18	1723:18	9	w
LEAF_NODE	1723:18	1723:18	10	w
LEAF_NODE	1723:19	1723:19	7	;
FOR_EXPR	1723:21	1723:21	7	x ++
EXPR	1723:21	1723:21	8	x ++
FIELD	1723:21	1723:22	9	x ++
LEAF_NODE	1723:21	1723:21	10	x
LEAF_NODE	1723:22	1723:22	10	++
LEAF_NODE	1723:24	1723:24	7	)
STATEMENTS	1724:3	1724:3	7	
EXPR_STATEMENT	1724:3	1727:33	8	* cp ++ = PACK4 ( img -> Bitdepth16To8 [ * wr ++ ] , img -> Bitdepth16To8 [ * wg ++ ] , img -> Bitdepth16To8 [ * wb ++ ] , img -> Bitdepth16To8 [ * wa ++ ] ) ;
EXPR	1724:3	1724:3	9	* cp ++ = PACK4 ( img -> Bitdepth16To8 [ * wr ++ ] , img -> Bitdepth16To8 [ * wg ++ ] , img -> Bitdepth16To8 [ * wb ++ ] , img -> Bitdepth16To8 [ * wa ++ ] )
ASSIGN	1724:3	1724:11	10	* cp ++ = PACK4 ( img -> Bitdepth16To8 [ * wr ++ ] , img -> Bitdepth16To8 [ * wg ++ ] , img -> Bitdepth16To8 [ * wb ++ ] , img -> Bitdepth16To8 [ * wa ++ ] )
LVAL	1724:3	1724:3	11	* cp ++
UNARY_EXPR	1724:3	1724:4	12	* cp ++
UNARY_OPERATOR	1724:3	1724:3	13	*
LEAF_NODE	1724:3	1724:3	14	*
FIELD	1724:4	1724:6	13	cp ++
LEAF_NODE	1724:4	1724:4	14	cp
LEAF_NODE	1724:6	1724:6	14	++
ASSIGN_OP	1724:9	1724:9	11	=
LEAF_NODE	1724:9	1724:9	12	=
RVAL	1724:11	1724:11	11	PACK4 ( img -> Bitdepth16To8 [ * wr ++ ] , img -> Bitdepth16To8 [ * wg ++ ] , img -> Bitdepth16To8 [ * wb ++ ] , img -> Bitdepth16To8 [ * wa ++ ] )
FUNCTION_CALL	1724:11	1727:32	12	PACK4 ( img -> Bitdepth16To8 [ * wr ++ ] , img -> Bitdepth16To8 [ * wg ++ ] , img -> Bitdepth16To8 [ * wb ++ ] , img -> Bitdepth16To8 [ * wa ++ ] )
CALLEE	1724:11	1724:11	13	PACK4
LEAF_NODE	1724:11	1724:11	14	PACK4
LEAF_NODE	1724:16	1724:16	13	(
ARGUMENT	1724:17	1724:17	13	img -> Bitdepth16To8 [ * wr ++ ]
FIELD	1724:17	1724:41	14	img -> Bitdepth16To8 [ * wr ++ ]
LEAF_NODE	1724:17	1724:17	15	img
LEAF_NODE	1724:20	1724:20	15	->
LEAF_NODE	1724:22	1724:22	15	Bitdepth16To8
LEAF_NODE	1724:35	1724:35	15	[
EXPR	1724:36	1724:36	15	* wr ++
UNARY_EXPR	1724:36	1724:37	16	* wr ++
UNARY_OPERATOR	1724:36	1724:36	17	*
LEAF_NODE	1724:36	1724:36	18	*
FIELD	1724:37	1724:39	17	wr ++
LEAF_NODE	1724:37	1724:37	18	wr
LEAF_NODE	1724:39	1724:39	18	++
LEAF_NODE	1724:41	1724:41	15	]
LEAF_NODE	1724:42	1724:42	13	,
ARGUMENT	1725:7	1725:7	13	img -> Bitdepth16To8 [ * wg ++ ]
FIELD	1725:7	1725:31	14	img -> Bitdepth16To8 [ * wg ++ ]
LEAF_NODE	1725:7	1725:7	15	img
LEAF_NODE	1725:10	1725:10	15	->
LEAF_NODE	1725:12	1725:12	15	Bitdepth16To8
LEAF_NODE	1725:25	1725:25	15	[
EXPR	1725:26	1725:26	15	* wg ++
UNARY_EXPR	1725:26	1725:27	16	* wg ++
UNARY_OPERATOR	1725:26	1725:26	17	*
LEAF_NODE	1725:26	1725:26	18	*
FIELD	1725:27	1725:29	17	wg ++
LEAF_NODE	1725:27	1725:27	18	wg
LEAF_NODE	1725:29	1725:29	18	++
LEAF_NODE	1725:31	1725:31	15	]
LEAF_NODE	1725:32	1725:32	13	,
ARGUMENT	1726:7	1726:7	13	img -> Bitdepth16To8 [ * wb ++ ]
FIELD	1726:7	1726:31	14	img -> Bitdepth16To8 [ * wb ++ ]
LEAF_NODE	1726:7	1726:7	15	img
LEAF_NODE	1726:10	1726:10	15	->
LEAF_NODE	1726:12	1726:12	15	Bitdepth16To8
LEAF_NODE	1726:25	1726:25	15	[
EXPR	1726:26	1726:26	15	* wb ++
UNARY_EXPR	1726:26	1726:27	16	* wb ++
UNARY_OPERATOR	1726:26	1726:26	17	*
LEAF_NODE	1726:26	1726:26	18	*
FIELD	1726:27	1726:29	17	wb ++
LEAF_NODE	1726:27	1726:27	18	wb
LEAF_NODE	1726:29	1726:29	18	++
LEAF_NODE	1726:31	1726:31	15	]
LEAF_NODE	1726:32	1726:32	13	,
ARGUMENT	1727:7	1727:7	13	img -> Bitdepth16To8 [ * wa ++ ]
FIELD	1727:7	1727:31	14	img -> Bitdepth16To8 [ * wa ++ ]
LEAF_NODE	1727:7	1727:7	15	img
LEAF_NODE	1727:10	1727:10	15	->
LEAF_NODE	1727:12	1727:12	15	Bitdepth16To8
LEAF_NODE	1727:25	1727:25	15	[
EXPR	1727:26	1727:26	15	* wa ++
UNARY_EXPR	1727:26	1727:27	16	* wa ++
UNARY_OPERATOR	1727:26	1727:26	17	*
LEAF_NODE	1727:26	1727:26	18	*
FIELD	1727:27	1727:29	17	wa ++
LEAF_NODE	1727:27	1727:27	18	wa
LEAF_NODE	1727:29	1727:29	18	++
LEAF_NODE	1727:31	1727:31	15	]
LEAF_NODE	1727:32	1727:32	13	)
LEAF_NODE	1727:33	1727:33	9	;
EXPR_STATEMENT	1728:2	1728:33	6	SKEW4 ( wr , wg , wb , wa , fromskew ) ;
EXPR	1728:2	1728:2	7	SKEW4 ( wr , wg , wb , wa , fromskew )
FUNCTION_CALL	1728:2	1728:32	8	SKEW4 ( wr , wg , wb , wa , fromskew )
CALLEE	1728:2	1728:2	9	SKEW4
LEAF_NODE	1728:2	1728:2	10	SKEW4
LEAF_NODE	1728:7	1728:7	9	(
ARGUMENT	1728:8	1728:8	9	wr
FIELD	1728:8	1728:8	10	wr
LEAF_NODE	1728:8	1728:8	11	wr
LEAF_NODE	1728:10	1728:10	9	,
ARGUMENT	1728:12	1728:12	9	wg
FIELD	1728:12	1728:12	10	wg
LEAF_NODE	1728:12	1728:12	11	wg
LEAF_NODE	1728:14	1728:14	9	,
ARGUMENT	1728:16	1728:16	9	wb
FIELD	1728:16	1728:16	10	wb
LEAF_NODE	1728:16	1728:16	11	wb
LEAF_NODE	1728:18	1728:18	9	,
ARGUMENT	1728:20	1728:20	9	wa
FIELD	1728:20	1728:20	10	wa
LEAF_NODE	1728:20	1728:20	11	wa
LEAF_NODE	1728:22	1728:22	9	,
ARGUMENT	1728:24	1728:24	9	fromskew
FIELD	1728:24	1728:24	10	fromskew
LEAF_NODE	1728:24	1728:24	11	fromskew
LEAF_NODE	1728:32	1728:32	9	)
LEAF_NODE	1728:33	1728:33	7	;
EXPR_STATEMENT	1729:2	1729:14	6	cp += toskew ;
EXPR	1729:2	1729:2	7	cp += toskew
ASSIGN	1729:2	1729:8	8	cp += toskew
LVAL	1729:2	1729:2	9	cp
FIELD	1729:2	1729:2	10	cp
LEAF_NODE	1729:2	1729:2	11	cp
ASSIGN_OP	1729:5	1729:5	9	+=
LEAF_NODE	1729:5	1729:5	10	+=
RVAL	1729:8	1729:8	9	toskew
FIELD	1729:8	1729:8	10	toskew
LEAF_NODE	1729:8	1729:8	11	toskew
LEAF_NODE	1729:14	1729:14	7	;
LEAF_NODE	1730:1	1730:1	5	}
LEAF_NODE	1731:0	1731:0	2	}
FUNCTION_DEF	0:0	1757:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1736:0	1736:0	2	DECLARESepPutFunc
LEAF_NODE	1736:0	1736:0	3	DECLARESepPutFunc
PARAMETER_LIST	1736:17	1736:43	2	( putRGBUAseparate16bittile )
LEAF_NODE	1736:17	1736:17	3	(
PARAMETER_DECL	1736:18	1736:18	3	putRGBUAseparate16bittile
LEAF_NODE	1736:18	1736:18	4	putRGBUAseparate16bittile
LEAF_NODE	1736:43	1736:43	3	)
LEAF_NODE	1737:0	1737:0	2	{
STATEMENTS	1738:1	1743:1	2	
SIMPLE_DECL	1738:1	1738:25	3	uint16 * wr ; wr = ( uint16 * ) r ;
VAR_DECL	1738:1	1738:9	4	uint16 * wr ; wr = ( uint16 * ) r
TYPE	1738:1	1738:8	5	uint16 *
TYPE_NAME	1738:1	1738:1	6	uint16
LEAF_NODE	1738:1	1738:1	7	uint16
POINTER	1738:8	1738:8	6	*
LEAF_NODE	1738:8	1738:8	7	*
NAME	1738:9	1738:9	5	wr
LEAF_NODE	1738:9	1738:9	6	wr
LEAF_NODE	0:0	0:0	5	;
INIT	1738:9	1738:9	5	wr = ( uint16 * ) r
ASSIGN	1738:9	1738:14	6	wr = ( uint16 * ) r
LVAL	1738:9	1738:9	7	wr
NAME	1738:9	1738:9	8	wr
LEAF_NODE	1738:9	1738:9	9	wr
ASSIGN_OP	1738:12	1738:12	7	=
LEAF_NODE	1738:12	1738:12	8	=
RVAL	1738:14	1738:24	7	( uint16 * ) r
LEAF_NODE	1738:14	1738:14	8	(
TYPE_NAME	1738:15	1738:15	8	uint16
LEAF_NODE	1738:15	1738:15	9	uint16
LEAF_NODE	1738:21	1738:21	8	*
LEAF_NODE	1738:22	1738:22	8	)
FIELD	1738:24	1738:24	8	r
LEAF_NODE	1738:24	1738:24	9	r
LEAF_NODE	1738:25	1738:25	4	;
SIMPLE_DECL	1739:1	1739:25	3	uint16 * wg ; wg = ( uint16 * ) g ;
VAR_DECL	1739:1	1739:9	4	uint16 * wg ; wg = ( uint16 * ) g
TYPE	1739:1	1739:8	5	uint16 *
TYPE_NAME	1739:1	1739:1	6	uint16
LEAF_NODE	1739:1	1739:1	7	uint16
POINTER	1739:8	1739:8	6	*
LEAF_NODE	1739:8	1739:8	7	*
NAME	1739:9	1739:9	5	wg
LEAF_NODE	1739:9	1739:9	6	wg
LEAF_NODE	0:0	0:0	5	;
INIT	1739:9	1739:9	5	wg = ( uint16 * ) g
ASSIGN	1739:9	1739:14	6	wg = ( uint16 * ) g
LVAL	1739:9	1739:9	7	wg
NAME	1739:9	1739:9	8	wg
LEAF_NODE	1739:9	1739:9	9	wg
ASSIGN_OP	1739:12	1739:12	7	=
LEAF_NODE	1739:12	1739:12	8	=
RVAL	1739:14	1739:24	7	( uint16 * ) g
LEAF_NODE	1739:14	1739:14	8	(
TYPE_NAME	1739:15	1739:15	8	uint16
LEAF_NODE	1739:15	1739:15	9	uint16
LEAF_NODE	1739:21	1739:21	8	*
LEAF_NODE	1739:22	1739:22	8	)
FIELD	1739:24	1739:24	8	g
LEAF_NODE	1739:24	1739:24	9	g
LEAF_NODE	1739:25	1739:25	4	;
SIMPLE_DECL	1740:1	1740:25	3	uint16 * wb ; wb = ( uint16 * ) b ;
VAR_DECL	1740:1	1740:9	4	uint16 * wb ; wb = ( uint16 * ) b
TYPE	1740:1	1740:8	5	uint16 *
TYPE_NAME	1740:1	1740:1	6	uint16
LEAF_NODE	1740:1	1740:1	7	uint16
POINTER	1740:8	1740:8	6	*
LEAF_NODE	1740:8	1740:8	7	*
NAME	1740:9	1740:9	5	wb
LEAF_NODE	1740:9	1740:9	6	wb
LEAF_NODE	0:0	0:0	5	;
INIT	1740:9	1740:9	5	wb = ( uint16 * ) b
ASSIGN	1740:9	1740:14	6	wb = ( uint16 * ) b
LVAL	1740:9	1740:9	7	wb
NAME	1740:9	1740:9	8	wb
LEAF_NODE	1740:9	1740:9	9	wb
ASSIGN_OP	1740:12	1740:12	7	=
LEAF_NODE	1740:12	1740:12	8	=
RVAL	1740:14	1740:24	7	( uint16 * ) b
LEAF_NODE	1740:14	1740:14	8	(
TYPE_NAME	1740:15	1740:15	8	uint16
LEAF_NODE	1740:15	1740:15	9	uint16
LEAF_NODE	1740:21	1740:21	8	*
LEAF_NODE	1740:22	1740:22	8	)
FIELD	1740:24	1740:24	8	b
LEAF_NODE	1740:24	1740:24	9	b
LEAF_NODE	1740:25	1740:25	4	;
SIMPLE_DECL	1741:1	1741:25	3	uint16 * wa ; wa = ( uint16 * ) a ;
VAR_DECL	1741:1	1741:9	4	uint16 * wa ; wa = ( uint16 * ) a
TYPE	1741:1	1741:8	5	uint16 *
TYPE_NAME	1741:1	1741:1	6	uint16
LEAF_NODE	1741:1	1741:1	7	uint16
POINTER	1741:8	1741:8	6	*
LEAF_NODE	1741:8	1741:8	7	*
NAME	1741:9	1741:9	5	wa
LEAF_NODE	1741:9	1741:9	6	wa
LEAF_NODE	0:0	0:0	5	;
INIT	1741:9	1741:9	5	wa = ( uint16 * ) a
ASSIGN	1741:9	1741:14	6	wa = ( uint16 * ) a
LVAL	1741:9	1741:9	7	wa
NAME	1741:9	1741:9	8	wa
LEAF_NODE	1741:9	1741:9	9	wa
ASSIGN_OP	1741:12	1741:12	7	=
LEAF_NODE	1741:12	1741:12	8	=
RVAL	1741:14	1741:24	7	( uint16 * ) a
LEAF_NODE	1741:14	1741:14	8	(
TYPE_NAME	1741:15	1741:15	8	uint16
LEAF_NODE	1741:15	1741:15	9	uint16
LEAF_NODE	1741:21	1741:21	8	*
LEAF_NODE	1741:22	1741:22	8	)
FIELD	1741:24	1741:24	8	a
LEAF_NODE	1741:24	1741:24	9	a
LEAF_NODE	1741:25	1741:25	4	;
EXPR_STATEMENT	1742:1	1742:11	3	( void ) img ;
EXPR	1742:1	1742:8	4	( void ) img
LEAF_NODE	1742:1	1742:1	5	(
TYPE_NAME	1742:2	1742:2	5	void
LEAF_NODE	1742:2	1742:2	6	void
LEAF_NODE	1742:6	1742:6	5	)
FIELD	1742:8	1742:8	5	img
LEAF_NODE	1742:8	1742:8	6	img
LEAF_NODE	1742:11	1742:11	4	;
EXPR_STATEMENT	1742:13	1742:21	3	( void ) y ;
EXPR	1742:13	1742:20	4	( void ) y
LEAF_NODE	1742:13	1742:13	5	(
TYPE_NAME	1742:14	1742:14	5	void
LEAF_NODE	1742:14	1742:14	6	void
LEAF_NODE	1742:18	1742:18	5	)
FIELD	1742:20	1742:20	5	y
LEAF_NODE	1742:20	1742:20	6	y
LEAF_NODE	1742:21	1742:21	4	;
ITERATION	1743:1	1743:20	3	
KEYWORD	1743:1	1743:1	4	for
LEAF_NODE	1743:1	1743:1	5	for
LEAF_NODE	1743:4	1743:4	4	(
FOR_INIT	1743:6	1743:6	4	;
LEAF_NODE	1743:6	1743:6	5	;
CONDITION	1743:8	1743:8	4	h > 0
EXPR	1743:8	1743:12	5	h > 0
FIELD	1743:8	1743:8	6	h
LEAF_NODE	1743:8	1743:8	7	h
REL_OPERATOR	1743:10	1743:10	6	>
LEAF_NODE	1743:10	1743:10	7	>
FIELD	1743:12	1743:12	6	0
LEAF_NODE	1743:12	1743:12	7	0
LEAF_NODE	1743:13	1743:13	4	;
FOR_EXPR	1743:15	1743:15	4	-- h
EXPR	1743:15	1743:17	5	-- h
LEAF_NODE	1743:15	1743:15	6	--
FIELD	1743:17	1743:17	6	h
LEAF_NODE	1743:17	1743:17	7	h
LEAF_NODE	1743:18	1743:18	4	)
STATEMENTS	1743:20	1756:1	4	
LEAF_NODE	1743:20	1743:20	5	{
STATEMENTS	1744:2	1755:2	5	
SIMPLE_DECL	1744:2	1744:20	6	uint32 r2 , uint32 g2 , uint32 b2 , uint32 a2 ;
INIT_DECL_LIST	1744:2	1744:2	7	uint32 r2 , uint32 g2 , uint32 b2 , uint32 a2
VAR_DECL	1744:2	1744:9	8	uint32 r2
TYPE	1744:2	1744:2	9	uint32
TYPE_NAME	1744:2	1744:2	10	uint32
LEAF_NODE	1744:2	1744:2	11	uint32
NAME	1744:9	1744:9	9	r2
LEAF_NODE	1744:9	1744:9	10	r2
LEAF_NODE	1744:11	1744:11	8	,
INIT_DECL_LIST	1744:2	1744:2	8	uint32 g2 , uint32 b2 , uint32 a2
VAR_DECL	1744:2	1744:12	9	uint32 g2
TYPE	1744:2	1744:2	10	uint32
TYPE_NAME	1744:2	1744:2	11	uint32
LEAF_NODE	1744:2	1744:2	12	uint32
NAME	1744:12	1744:12	10	g2
LEAF_NODE	1744:12	1744:12	11	g2
LEAF_NODE	1744:14	1744:14	9	,
INIT_DECL_LIST	1744:2	1744:2	9	uint32 b2 , uint32 a2
VAR_DECL	1744:2	1744:15	10	uint32 b2
TYPE	1744:2	1744:2	11	uint32
TYPE_NAME	1744:2	1744:2	12	uint32
LEAF_NODE	1744:2	1744:2	13	uint32
NAME	1744:15	1744:15	11	b2
LEAF_NODE	1744:15	1744:15	12	b2
LEAF_NODE	1744:17	1744:17	10	,
VAR_DECL	1744:2	1744:18	10	uint32 a2
TYPE	1744:2	1744:2	11	uint32
TYPE_NAME	1744:2	1744:2	12	uint32
LEAF_NODE	1744:2	1744:2	13	uint32
NAME	1744:18	1744:18	11	a2
LEAF_NODE	1744:18	1744:18	12	a2
LEAF_NODE	1744:20	1744:20	7	;
SIMPLE_DECL	1745:2	1745:10	6	uint8 * m ;
VAR_DECL	1745:2	1745:9	7	uint8 * m
TYPE	1745:2	1745:7	8	uint8 *
TYPE_NAME	1745:2	1745:2	9	uint8
LEAF_NODE	1745:2	1745:2	10	uint8
POINTER	1745:7	1745:7	9	*
LEAF_NODE	1745:7	1745:7	10	*
NAME	1745:9	1745:9	8	m
LEAF_NODE	1745:9	1745:9	9	m
LEAF_NODE	1745:10	1745:10	7	;
ITERATION	1746:2	1746:26	6	
KEYWORD	1746:2	1746:2	7	for
LEAF_NODE	1746:2	1746:2	8	for
LEAF_NODE	1746:6	1746:6	7	(
FOR_INIT	1746:7	1746:12	7	x = w ;
EXPR	1746:7	1746:7	8	x = w
ASSIGN	1746:7	1746:11	9	x = w
LVAL	1746:7	1746:7	10	x
FIELD	1746:7	1746:7	11	x
LEAF_NODE	1746:7	1746:7	12	x
ASSIGN_OP	1746:9	1746:9	10	=
LEAF_NODE	1746:9	1746:9	11	=
RVAL	1746:11	1746:11	10	w
FIELD	1746:11	1746:11	11	w
LEAF_NODE	1746:11	1746:11	12	w
LEAF_NODE	1746:12	1746:12	8	;
CONDITION	1746:14	1746:14	7	x > 0
EXPR	1746:14	1746:18	8	x > 0
FIELD	1746:14	1746:14	9	x
LEAF_NODE	1746:14	1746:14	10	x
REL_OPERATOR	1746:16	1746:16	9	>
LEAF_NODE	1746:16	1746:16	10	>
FIELD	1746:18	1746:18	9	0
LEAF_NODE	1746:18	1746:18	10	0
LEAF_NODE	1746:19	1746:19	7	;
FOR_EXPR	1746:21	1746:21	7	-- x
EXPR	1746:21	1746:23	8	-- x
LEAF_NODE	1746:21	1746:21	9	--
FIELD	1746:23	1746:23	9	x
LEAF_NODE	1746:23	1746:23	10	x
LEAF_NODE	1746:24	1746:24	7	)
STATEMENTS	1746:26	1753:2	7	
LEAF_NODE	1746:26	1746:26	8	{
STATEMENTS	1747:3	1752:3	8	
EXPR_STATEMENT	1747:3	1747:33	9	a2 = img -> Bitdepth16To8 [ * wa ++ ] ;
EXPR	1747:3	1747:3	10	a2 = img -> Bitdepth16To8 [ * wa ++ ]
ASSIGN	1747:3	1747:8	11	a2 = img -> Bitdepth16To8 [ * wa ++ ]
LVAL	1747:3	1747:3	12	a2
FIELD	1747:3	1747:3	13	a2
LEAF_NODE	1747:3	1747:3	14	a2
ASSIGN_OP	1747:6	1747:6	12	=
LEAF_NODE	1747:6	1747:6	13	=
RVAL	1747:8	1747:8	12	img -> Bitdepth16To8 [ * wa ++ ]
FIELD	1747:8	1747:32	13	img -> Bitdepth16To8 [ * wa ++ ]
LEAF_NODE	1747:8	1747:8	14	img
LEAF_NODE	1747:11	1747:11	14	->
LEAF_NODE	1747:13	1747:13	14	Bitdepth16To8
LEAF_NODE	1747:26	1747:26	14	[
EXPR	1747:27	1747:27	14	* wa ++
UNARY_EXPR	1747:27	1747:28	15	* wa ++
UNARY_OPERATOR	1747:27	1747:27	16	*
LEAF_NODE	1747:27	1747:27	17	*
FIELD	1747:28	1747:30	16	wa ++
LEAF_NODE	1747:28	1747:28	17	wa
LEAF_NODE	1747:30	1747:30	17	++
LEAF_NODE	1747:32	1747:32	14	]
LEAF_NODE	1747:33	1747:33	10	;
EXPR_STATEMENT	1748:3	1748:35	9	m = img -> UaToAa + ( ( size_t ) a2 << 8 ) ;
EXPR	1748:3	1748:3	10	m = img -> UaToAa + ( ( size_t ) a2 << 8 )
ASSIGN	1748:3	1748:7	11	m = img -> UaToAa + ( ( size_t ) a2 << 8 )
LVAL	1748:3	1748:3	12	m
FIELD	1748:3	1748:3	13	m
LEAF_NODE	1748:3	1748:3	14	m
ASSIGN_OP	1748:5	1748:5	12	=
LEAF_NODE	1748:5	1748:5	13	=
RVAL	1748:7	1748:34	12	img -> UaToAa + ( ( size_t ) a2 << 8 )
FIELD	1748:7	1748:12	13	img -> UaToAa
LEAF_NODE	1748:7	1748:7	14	img
LEAF_NODE	1748:10	1748:10	14	->
LEAF_NODE	1748:12	1748:12	14	UaToAa
LEAF_NODE	1748:18	1748:18	13	+
LEAF_NODE	1748:19	1748:19	13	(
LEAF_NODE	1748:20	1748:20	13	(
TYPE_NAME	1748:21	1748:21	13	size_t
LEAF_NODE	1748:21	1748:21	14	size_t
LEAF_NODE	1748:27	1748:27	13	)
FIELD	1748:29	1748:29	13	a2
LEAF_NODE	1748:29	1748:29	14	a2
LEAF_NODE	1748:31	1748:31	13	<<
FIELD	1748:33	1748:33	13	8
LEAF_NODE	1748:33	1748:33	14	8
LEAF_NODE	1748:34	1748:34	13	)
LEAF_NODE	1748:35	1748:35	10	;
EXPR_STATEMENT	1749:3	1749:36	9	r2 = m [ img -> Bitdepth16To8 [ * wr ++ ] ] ;
EXPR	1749:3	1749:3	10	r2 = m [ img -> Bitdepth16To8 [ * wr ++ ] ]
ASSIGN	1749:3	1749:8	11	r2 = m [ img -> Bitdepth16To8 [ * wr ++ ] ]
LVAL	1749:3	1749:3	12	r2
FIELD	1749:3	1749:3	13	r2
LEAF_NODE	1749:3	1749:3	14	r2
ASSIGN_OP	1749:6	1749:6	12	=
LEAF_NODE	1749:6	1749:6	13	=
RVAL	1749:8	1749:8	12	m [ img -> Bitdepth16To8 [ * wr ++ ] ]
FIELD	1749:8	1749:35	13	m [ img -> Bitdepth16To8 [ * wr ++ ] ]
LEAF_NODE	1749:8	1749:8	14	m
LEAF_NODE	1749:9	1749:9	14	[
EXPR	1749:10	1749:10	14	img -> Bitdepth16To8 [ * wr ++ ]
FIELD	1749:10	1749:34	15	img -> Bitdepth16To8 [ * wr ++ ]
LEAF_NODE	1749:10	1749:10	16	img
LEAF_NODE	1749:13	1749:13	16	->
LEAF_NODE	1749:15	1749:15	16	Bitdepth16To8
LEAF_NODE	1749:28	1749:28	16	[
EXPR	1749:29	1749:29	16	* wr ++
UNARY_EXPR	1749:29	1749:30	17	* wr ++
UNARY_OPERATOR	1749:29	1749:29	18	*
LEAF_NODE	1749:29	1749:29	19	*
FIELD	1749:30	1749:32	18	wr ++
LEAF_NODE	1749:30	1749:30	19	wr
LEAF_NODE	1749:32	1749:32	19	++
LEAF_NODE	1749:34	1749:34	16	]
LEAF_NODE	1749:35	1749:35	14	]
LEAF_NODE	1749:36	1749:36	10	;
EXPR_STATEMENT	1750:3	1750:36	9	g2 = m [ img -> Bitdepth16To8 [ * wg ++ ] ] ;
EXPR	1750:3	1750:3	10	g2 = m [ img -> Bitdepth16To8 [ * wg ++ ] ]
ASSIGN	1750:3	1750:8	11	g2 = m [ img -> Bitdepth16To8 [ * wg ++ ] ]
LVAL	1750:3	1750:3	12	g2
FIELD	1750:3	1750:3	13	g2
LEAF_NODE	1750:3	1750:3	14	g2
ASSIGN_OP	1750:6	1750:6	12	=
LEAF_NODE	1750:6	1750:6	13	=
RVAL	1750:8	1750:8	12	m [ img -> Bitdepth16To8 [ * wg ++ ] ]
FIELD	1750:8	1750:35	13	m [ img -> Bitdepth16To8 [ * wg ++ ] ]
LEAF_NODE	1750:8	1750:8	14	m
LEAF_NODE	1750:9	1750:9	14	[
EXPR	1750:10	1750:10	14	img -> Bitdepth16To8 [ * wg ++ ]
FIELD	1750:10	1750:34	15	img -> Bitdepth16To8 [ * wg ++ ]
LEAF_NODE	1750:10	1750:10	16	img
LEAF_NODE	1750:13	1750:13	16	->
LEAF_NODE	1750:15	1750:15	16	Bitdepth16To8
LEAF_NODE	1750:28	1750:28	16	[
EXPR	1750:29	1750:29	16	* wg ++
UNARY_EXPR	1750:29	1750:30	17	* wg ++
UNARY_OPERATOR	1750:29	1750:29	18	*
LEAF_NODE	1750:29	1750:29	19	*
FIELD	1750:30	1750:32	18	wg ++
LEAF_NODE	1750:30	1750:30	19	wg
LEAF_NODE	1750:32	1750:32	19	++
LEAF_NODE	1750:34	1750:34	16	]
LEAF_NODE	1750:35	1750:35	14	]
LEAF_NODE	1750:36	1750:36	10	;
EXPR_STATEMENT	1751:3	1751:36	9	b2 = m [ img -> Bitdepth16To8 [ * wb ++ ] ] ;
EXPR	1751:3	1751:3	10	b2 = m [ img -> Bitdepth16To8 [ * wb ++ ] ]
ASSIGN	1751:3	1751:8	11	b2 = m [ img -> Bitdepth16To8 [ * wb ++ ] ]
LVAL	1751:3	1751:3	12	b2
FIELD	1751:3	1751:3	13	b2
LEAF_NODE	1751:3	1751:3	14	b2
ASSIGN_OP	1751:6	1751:6	12	=
LEAF_NODE	1751:6	1751:6	13	=
RVAL	1751:8	1751:8	12	m [ img -> Bitdepth16To8 [ * wb ++ ] ]
FIELD	1751:8	1751:35	13	m [ img -> Bitdepth16To8 [ * wb ++ ] ]
LEAF_NODE	1751:8	1751:8	14	m
LEAF_NODE	1751:9	1751:9	14	[
EXPR	1751:10	1751:10	14	img -> Bitdepth16To8 [ * wb ++ ]
FIELD	1751:10	1751:34	15	img -> Bitdepth16To8 [ * wb ++ ]
LEAF_NODE	1751:10	1751:10	16	img
LEAF_NODE	1751:13	1751:13	16	->
LEAF_NODE	1751:15	1751:15	16	Bitdepth16To8
LEAF_NODE	1751:28	1751:28	16	[
EXPR	1751:29	1751:29	16	* wb ++
UNARY_EXPR	1751:29	1751:30	17	* wb ++
UNARY_OPERATOR	1751:29	1751:29	18	*
LEAF_NODE	1751:29	1751:29	19	*
FIELD	1751:30	1751:32	18	wb ++
LEAF_NODE	1751:30	1751:30	19	wb
LEAF_NODE	1751:32	1751:32	19	++
LEAF_NODE	1751:34	1751:34	16	]
LEAF_NODE	1751:35	1751:35	14	]
LEAF_NODE	1751:36	1751:36	10	;
EXPR_STATEMENT	1752:3	1752:29	9	* cp ++ = PACK4 ( r2 , g2 , b2 , a2 ) ;
EXPR	1752:3	1752:3	10	* cp ++ = PACK4 ( r2 , g2 , b2 , a2 )
ASSIGN	1752:3	1752:11	11	* cp ++ = PACK4 ( r2 , g2 , b2 , a2 )
LVAL	1752:3	1752:3	12	* cp ++
UNARY_EXPR	1752:3	1752:4	13	* cp ++
UNARY_OPERATOR	1752:3	1752:3	14	*
LEAF_NODE	1752:3	1752:3	15	*
FIELD	1752:4	1752:6	14	cp ++
LEAF_NODE	1752:4	1752:4	15	cp
LEAF_NODE	1752:6	1752:6	15	++
ASSIGN_OP	1752:9	1752:9	12	=
LEAF_NODE	1752:9	1752:9	13	=
RVAL	1752:11	1752:11	12	PACK4 ( r2 , g2 , b2 , a2 )
FUNCTION_CALL	1752:11	1752:28	13	PACK4 ( r2 , g2 , b2 , a2 )
CALLEE	1752:11	1752:11	14	PACK4
LEAF_NODE	1752:11	1752:11	15	PACK4
LEAF_NODE	1752:16	1752:16	14	(
ARGUMENT	1752:17	1752:17	14	r2
FIELD	1752:17	1752:17	15	r2
LEAF_NODE	1752:17	1752:17	16	r2
LEAF_NODE	1752:19	1752:19	14	,
ARGUMENT	1752:20	1752:20	14	g2
FIELD	1752:20	1752:20	15	g2
LEAF_NODE	1752:20	1752:20	16	g2
LEAF_NODE	1752:22	1752:22	14	,
ARGUMENT	1752:23	1752:23	14	b2
FIELD	1752:23	1752:23	15	b2
LEAF_NODE	1752:23	1752:23	16	b2
LEAF_NODE	1752:25	1752:25	14	,
ARGUMENT	1752:26	1752:26	14	a2
FIELD	1752:26	1752:26	15	a2
LEAF_NODE	1752:26	1752:26	16	a2
LEAF_NODE	1752:28	1752:28	14	)
LEAF_NODE	1752:29	1752:29	10	;
LEAF_NODE	1753:2	1753:2	8	}
EXPR_STATEMENT	1754:2	1754:33	6	SKEW4 ( wr , wg , wb , wa , fromskew ) ;
EXPR	1754:2	1754:2	7	SKEW4 ( wr , wg , wb , wa , fromskew )
FUNCTION_CALL	1754:2	1754:32	8	SKEW4 ( wr , wg , wb , wa , fromskew )
CALLEE	1754:2	1754:2	9	SKEW4
LEAF_NODE	1754:2	1754:2	10	SKEW4
LEAF_NODE	1754:7	1754:7	9	(
ARGUMENT	1754:8	1754:8	9	wr
FIELD	1754:8	1754:8	10	wr
LEAF_NODE	1754:8	1754:8	11	wr
LEAF_NODE	1754:10	1754:10	9	,
ARGUMENT	1754:12	1754:12	9	wg
FIELD	1754:12	1754:12	10	wg
LEAF_NODE	1754:12	1754:12	11	wg
LEAF_NODE	1754:14	1754:14	9	,
ARGUMENT	1754:16	1754:16	9	wb
FIELD	1754:16	1754:16	10	wb
LEAF_NODE	1754:16	1754:16	11	wb
LEAF_NODE	1754:18	1754:18	9	,
ARGUMENT	1754:20	1754:20	9	wa
FIELD	1754:20	1754:20	10	wa
LEAF_NODE	1754:20	1754:20	11	wa
LEAF_NODE	1754:22	1754:22	9	,
ARGUMENT	1754:24	1754:24	9	fromskew
FIELD	1754:24	1754:24	10	fromskew
LEAF_NODE	1754:24	1754:24	11	fromskew
LEAF_NODE	1754:32	1754:32	9	)
LEAF_NODE	1754:33	1754:33	7	;
EXPR_STATEMENT	1755:2	1755:14	6	cp += toskew ;
EXPR	1755:2	1755:2	7	cp += toskew
ASSIGN	1755:2	1755:8	8	cp += toskew
LVAL	1755:2	1755:2	9	cp
FIELD	1755:2	1755:2	10	cp
LEAF_NODE	1755:2	1755:2	11	cp
ASSIGN_OP	1755:5	1755:5	9	+=
LEAF_NODE	1755:5	1755:5	10	+=
RVAL	1755:8	1755:8	9	toskew
FIELD	1755:8	1755:8	10	toskew
LEAF_NODE	1755:8	1755:8	11	toskew
LEAF_NODE	1755:14	1755:14	7	;
LEAF_NODE	1756:1	1756:1	5	}
LEAF_NODE	1757:0	1757:0	2	}
FUNCTION_DEF	0:0	1782:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1762:0	1762:0	2	DECLAREContigPutFunc
LEAF_NODE	1762:0	1762:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1762:20	1762:40	2	( putcontig8bitCIELab )
LEAF_NODE	1762:20	1762:20	3	(
PARAMETER_DECL	1762:21	1762:21	3	putcontig8bitCIELab
LEAF_NODE	1762:21	1762:21	4	putcontig8bitCIELab
LEAF_NODE	1762:40	1762:40	3	)
LEAF_NODE	1763:0	1763:0	2	{
STATEMENTS	1764:1	1768:1	2	
SIMPLE_DECL	1764:1	1764:14	3	float X , float Y , float Z ;
INIT_DECL_LIST	1764:1	1764:1	4	float X , float Y , float Z
VAR_DECL	1764:1	1764:7	5	float X
TYPE	1764:1	1764:1	6	float
TYPE_NAME	1764:1	1764:1	7	float
LEAF_NODE	1764:1	1764:1	8	float
NAME	1764:7	1764:7	6	X
LEAF_NODE	1764:7	1764:7	7	X
LEAF_NODE	1764:8	1764:8	5	,
INIT_DECL_LIST	1764:1	1764:1	5	float Y , float Z
VAR_DECL	1764:1	1764:10	6	float Y
TYPE	1764:1	1764:1	7	float
TYPE_NAME	1764:1	1764:1	8	float
LEAF_NODE	1764:1	1764:1	9	float
NAME	1764:10	1764:10	7	Y
LEAF_NODE	1764:10	1764:10	8	Y
LEAF_NODE	1764:11	1764:11	6	,
VAR_DECL	1764:1	1764:13	6	float Z
TYPE	1764:1	1764:1	7	float
TYPE_NAME	1764:1	1764:1	8	float
LEAF_NODE	1764:1	1764:1	9	float
NAME	1764:13	1764:13	7	Z
LEAF_NODE	1764:13	1764:13	8	Z
LEAF_NODE	1764:14	1764:14	4	;
SIMPLE_DECL	1765:1	1765:15	3	uint32 r , uint32 g , uint32 b ;
INIT_DECL_LIST	1765:1	1765:1	4	uint32 r , uint32 g , uint32 b
VAR_DECL	1765:1	1765:8	5	uint32 r
TYPE	1765:1	1765:1	6	uint32
TYPE_NAME	1765:1	1765:1	7	uint32
LEAF_NODE	1765:1	1765:1	8	uint32
NAME	1765:8	1765:8	6	r
LEAF_NODE	1765:8	1765:8	7	r
LEAF_NODE	1765:9	1765:9	5	,
INIT_DECL_LIST	1765:1	1765:1	5	uint32 g , uint32 b
VAR_DECL	1765:1	1765:11	6	uint32 g
TYPE	1765:1	1765:1	7	uint32
TYPE_NAME	1765:1	1765:1	8	uint32
LEAF_NODE	1765:1	1765:1	9	uint32
NAME	1765:11	1765:11	7	g
LEAF_NODE	1765:11	1765:11	8	g
LEAF_NODE	1765:12	1765:12	6	,
VAR_DECL	1765:1	1765:14	6	uint32 b
TYPE	1765:1	1765:1	7	uint32
TYPE_NAME	1765:1	1765:1	8	uint32
LEAF_NODE	1765:1	1765:1	9	uint32
NAME	1765:14	1765:14	7	b
LEAF_NODE	1765:14	1765:14	8	b
LEAF_NODE	1765:15	1765:15	4	;
EXPR_STATEMENT	1766:1	1766:9	3	( void ) y ;
EXPR	1766:1	1766:8	4	( void ) y
LEAF_NODE	1766:1	1766:1	5	(
TYPE_NAME	1766:2	1766:2	5	void
LEAF_NODE	1766:2	1766:2	6	void
LEAF_NODE	1766:6	1766:6	5	)
FIELD	1766:8	1766:8	5	y
LEAF_NODE	1766:8	1766:8	6	y
LEAF_NODE	1766:9	1766:9	4	;
EXPR_STATEMENT	1767:1	1767:14	3	fromskew *= 3 ;
EXPR	1767:1	1767:1	4	fromskew *= 3
ASSIGN	1767:1	1767:13	5	fromskew *= 3
LVAL	1767:1	1767:1	6	fromskew
FIELD	1767:1	1767:1	7	fromskew
LEAF_NODE	1767:1	1767:1	8	fromskew
ASSIGN_OP	1767:10	1767:10	6	*=
LEAF_NODE	1767:10	1767:10	7	*=
RVAL	1767:13	1767:13	6	3
FIELD	1767:13	1767:13	7	3
LEAF_NODE	1767:13	1767:13	8	3
LEAF_NODE	1767:14	1767:14	4	;
ITERATION	1768:1	1768:20	3	
KEYWORD	1768:1	1768:1	4	for
LEAF_NODE	1768:1	1768:1	5	for
LEAF_NODE	1768:4	1768:4	4	(
FOR_INIT	1768:6	1768:6	4	;
LEAF_NODE	1768:6	1768:6	5	;
CONDITION	1768:8	1768:8	4	h > 0
EXPR	1768:8	1768:12	5	h > 0
FIELD	1768:8	1768:8	6	h
LEAF_NODE	1768:8	1768:8	7	h
REL_OPERATOR	1768:10	1768:10	6	>
LEAF_NODE	1768:10	1768:10	7	>
FIELD	1768:12	1768:12	6	0
LEAF_NODE	1768:12	1768:12	7	0
LEAF_NODE	1768:13	1768:13	4	;
FOR_EXPR	1768:15	1768:15	4	-- h
EXPR	1768:15	1768:17	5	-- h
LEAF_NODE	1768:15	1768:15	6	--
FIELD	1768:17	1768:17	6	h
LEAF_NODE	1768:17	1768:17	7	h
LEAF_NODE	1768:18	1768:18	4	)
STATEMENTS	1768:20	1781:1	4	
LEAF_NODE	1768:20	1768:20	5	{
STATEMENTS	1769:2	1780:2	5	
ITERATION	1769:2	1769:26	6	
KEYWORD	1769:2	1769:2	7	for
LEAF_NODE	1769:2	1769:2	8	for
LEAF_NODE	1769:6	1769:6	7	(
FOR_INIT	1769:7	1769:12	7	x = w ;
EXPR	1769:7	1769:7	8	x = w
ASSIGN	1769:7	1769:11	9	x = w
LVAL	1769:7	1769:7	10	x
FIELD	1769:7	1769:7	11	x
LEAF_NODE	1769:7	1769:7	12	x
ASSIGN_OP	1769:9	1769:9	10	=
LEAF_NODE	1769:9	1769:9	11	=
RVAL	1769:11	1769:11	10	w
FIELD	1769:11	1769:11	11	w
LEAF_NODE	1769:11	1769:11	12	w
LEAF_NODE	1769:12	1769:12	8	;
CONDITION	1769:14	1769:14	7	x > 0
EXPR	1769:14	1769:18	8	x > 0
FIELD	1769:14	1769:14	9	x
LEAF_NODE	1769:14	1769:14	10	x
REL_OPERATOR	1769:16	1769:16	9	>
LEAF_NODE	1769:16	1769:16	10	>
FIELD	1769:18	1769:18	9	0
LEAF_NODE	1769:18	1769:18	10	0
LEAF_NODE	1769:19	1769:19	7	;
FOR_EXPR	1769:21	1769:21	7	-- x
EXPR	1769:21	1769:23	8	-- x
LEAF_NODE	1769:21	1769:21	9	--
FIELD	1769:23	1769:23	9	x
LEAF_NODE	1769:23	1769:23	10	x
LEAF_NODE	1769:24	1769:24	7	)
STATEMENTS	1769:26	1778:2	7	
LEAF_NODE	1769:26	1769:26	8	{
STATEMENTS	1770:3	1777:3	8	
EXPR_STATEMENT	1770:3	1774:16	9	TIFFCIELabToXYZ ( img -> cielab , ( unsigned char ) pp [ 0 ] , ( signed char ) pp [ 1 ] , ( signed char ) pp [ 2 ] , & X , & Y , & Z ) ;
EXPR	1770:3	1770:3	10	TIFFCIELabToXYZ ( img -> cielab , ( unsigned char ) pp [ 0 ] , ( signed char ) pp [ 1 ] , ( signed char ) pp [ 2 ] , & X , & Y , & Z )
FUNCTION_CALL	1770:3	1774:15	11	TIFFCIELabToXYZ ( img -> cielab , ( unsigned char ) pp [ 0 ] , ( signed char ) pp [ 1 ] , ( signed char ) pp [ 2 ] , & X , & Y , & Z )
CALLEE	1770:3	1770:3	12	TIFFCIELabToXYZ
LEAF_NODE	1770:3	1770:3	13	TIFFCIELabToXYZ
LEAF_NODE	1770:18	1770:18	12	(
ARGUMENT	1770:19	1770:19	12	img -> cielab
FIELD	1770:19	1770:24	13	img -> cielab
LEAF_NODE	1770:19	1770:19	14	img
LEAF_NODE	1770:22	1770:22	14	->
LEAF_NODE	1770:24	1770:24	14	cielab
LEAF_NODE	1770:30	1770:30	12	,
ARGUMENT	1771:5	1771:20	12	( unsigned char ) pp [ 0 ]
LEAF_NODE	1771:5	1771:5	13	(
TYPE_NAME	1771:6	1771:15	13	unsigned char
LEAF_NODE	1771:6	1771:6	14	unsigned
LEAF_NODE	1771:15	1771:15	14	char
LEAF_NODE	1771:19	1771:19	13	)
FIELD	1771:20	1771:24	13	pp [ 0 ]
LEAF_NODE	1771:20	1771:20	14	pp
LEAF_NODE	1771:22	1771:22	14	[
EXPR	1771:23	1771:23	14	0
FIELD	1771:23	1771:23	15	0
LEAF_NODE	1771:23	1771:23	16	0
LEAF_NODE	1771:24	1771:24	14	]
LEAF_NODE	1771:25	1771:25	12	,
ARGUMENT	1772:5	1772:18	12	( signed char ) pp [ 1 ]
LEAF_NODE	1772:5	1772:5	13	(
TYPE_NAME	1772:6	1772:13	13	signed char
LEAF_NODE	1772:6	1772:6	14	signed
LEAF_NODE	1772:13	1772:13	14	char
LEAF_NODE	1772:17	1772:17	13	)
FIELD	1772:18	1772:22	13	pp [ 1 ]
LEAF_NODE	1772:18	1772:18	14	pp
LEAF_NODE	1772:20	1772:20	14	[
EXPR	1772:21	1772:21	14	1
FIELD	1772:21	1772:21	15	1
LEAF_NODE	1772:21	1772:21	16	1
LEAF_NODE	1772:22	1772:22	14	]
LEAF_NODE	1772:23	1772:23	12	,
ARGUMENT	1773:5	1773:18	12	( signed char ) pp [ 2 ]
LEAF_NODE	1773:5	1773:5	13	(
TYPE_NAME	1773:6	1773:13	13	signed char
LEAF_NODE	1773:6	1773:6	14	signed
LEAF_NODE	1773:13	1773:13	14	char
LEAF_NODE	1773:17	1773:17	13	)
FIELD	1773:18	1773:22	13	pp [ 2 ]
LEAF_NODE	1773:18	1773:18	14	pp
LEAF_NODE	1773:20	1773:20	14	[
EXPR	1773:21	1773:21	14	2
FIELD	1773:21	1773:21	15	2
LEAF_NODE	1773:21	1773:21	16	2
LEAF_NODE	1773:22	1773:22	14	]
LEAF_NODE	1773:23	1773:23	12	,
ARGUMENT	1774:5	1774:5	12	& X
UNARY_EXPR	1774:5	1774:6	13	& X
UNARY_OPERATOR	1774:5	1774:5	14	&
LEAF_NODE	1774:5	1774:5	15	&
FIELD	1774:6	1774:6	14	X
LEAF_NODE	1774:6	1774:6	15	X
LEAF_NODE	1774:7	1774:7	12	,
ARGUMENT	1774:9	1774:9	12	& Y
UNARY_EXPR	1774:9	1774:10	13	& Y
UNARY_OPERATOR	1774:9	1774:9	14	&
LEAF_NODE	1774:9	1774:9	15	&
FIELD	1774:10	1774:10	14	Y
LEAF_NODE	1774:10	1774:10	15	Y
LEAF_NODE	1774:11	1774:11	12	,
ARGUMENT	1774:13	1774:13	12	& Z
UNARY_EXPR	1774:13	1774:14	13	& Z
UNARY_OPERATOR	1774:13	1774:13	14	&
LEAF_NODE	1774:13	1774:13	15	&
FIELD	1774:14	1774:14	14	Z
LEAF_NODE	1774:14	1774:14	15	Z
LEAF_NODE	1774:15	1774:15	12	)
LEAF_NODE	1774:16	1774:16	10	;
EXPR_STATEMENT	1775:3	1775:49	9	TIFFXYZToRGB ( img -> cielab , X , Y , Z , & r , & g , & b ) ;
EXPR	1775:3	1775:3	10	TIFFXYZToRGB ( img -> cielab , X , Y , Z , & r , & g , & b )
FUNCTION_CALL	1775:3	1775:48	11	TIFFXYZToRGB ( img -> cielab , X , Y , Z , & r , & g , & b )
CALLEE	1775:3	1775:3	12	TIFFXYZToRGB
LEAF_NODE	1775:3	1775:3	13	TIFFXYZToRGB
LEAF_NODE	1775:15	1775:15	12	(
ARGUMENT	1775:16	1775:16	12	img -> cielab
FIELD	1775:16	1775:21	13	img -> cielab
LEAF_NODE	1775:16	1775:16	14	img
LEAF_NODE	1775:19	1775:19	14	->
LEAF_NODE	1775:21	1775:21	14	cielab
LEAF_NODE	1775:27	1775:27	12	,
ARGUMENT	1775:29	1775:29	12	X
FIELD	1775:29	1775:29	13	X
LEAF_NODE	1775:29	1775:29	14	X
LEAF_NODE	1775:30	1775:30	12	,
ARGUMENT	1775:32	1775:32	12	Y
FIELD	1775:32	1775:32	13	Y
LEAF_NODE	1775:32	1775:32	14	Y
LEAF_NODE	1775:33	1775:33	12	,
ARGUMENT	1775:35	1775:35	12	Z
FIELD	1775:35	1775:35	13	Z
LEAF_NODE	1775:35	1775:35	14	Z
LEAF_NODE	1775:36	1775:36	12	,
ARGUMENT	1775:38	1775:38	12	& r
UNARY_EXPR	1775:38	1775:39	13	& r
UNARY_OPERATOR	1775:38	1775:38	14	&
LEAF_NODE	1775:38	1775:38	15	&
FIELD	1775:39	1775:39	14	r
LEAF_NODE	1775:39	1775:39	15	r
LEAF_NODE	1775:40	1775:40	12	,
ARGUMENT	1775:42	1775:42	12	& g
UNARY_EXPR	1775:42	1775:43	13	& g
UNARY_OPERATOR	1775:42	1775:42	14	&
LEAF_NODE	1775:42	1775:42	15	&
FIELD	1775:43	1775:43	14	g
LEAF_NODE	1775:43	1775:43	15	g
LEAF_NODE	1775:44	1775:44	12	,
ARGUMENT	1775:46	1775:46	12	& b
UNARY_EXPR	1775:46	1775:47	13	& b
UNARY_OPERATOR	1775:46	1775:46	14	&
LEAF_NODE	1775:46	1775:46	15	&
FIELD	1775:47	1775:47	14	b
LEAF_NODE	1775:47	1775:47	15	b
LEAF_NODE	1775:48	1775:48	12	)
LEAF_NODE	1775:49	1775:49	10	;
EXPR_STATEMENT	1776:3	1776:24	9	* cp ++ = PACK ( r , g , b ) ;
EXPR	1776:3	1776:3	10	* cp ++ = PACK ( r , g , b )
ASSIGN	1776:3	1776:11	11	* cp ++ = PACK ( r , g , b )
LVAL	1776:3	1776:3	12	* cp ++
UNARY_EXPR	1776:3	1776:4	13	* cp ++
UNARY_OPERATOR	1776:3	1776:3	14	*
LEAF_NODE	1776:3	1776:3	15	*
FIELD	1776:4	1776:6	14	cp ++
LEAF_NODE	1776:4	1776:4	15	cp
LEAF_NODE	1776:6	1776:6	15	++
ASSIGN_OP	1776:9	1776:9	12	=
LEAF_NODE	1776:9	1776:9	13	=
RVAL	1776:11	1776:11	12	PACK ( r , g , b )
FUNCTION_CALL	1776:11	1776:23	13	PACK ( r , g , b )
CALLEE	1776:11	1776:11	14	PACK
LEAF_NODE	1776:11	1776:11	15	PACK
LEAF_NODE	1776:15	1776:15	14	(
ARGUMENT	1776:16	1776:16	14	r
FIELD	1776:16	1776:16	15	r
LEAF_NODE	1776:16	1776:16	16	r
LEAF_NODE	1776:17	1776:17	14	,
ARGUMENT	1776:19	1776:19	14	g
FIELD	1776:19	1776:19	15	g
LEAF_NODE	1776:19	1776:19	16	g
LEAF_NODE	1776:20	1776:20	14	,
ARGUMENT	1776:22	1776:22	14	b
FIELD	1776:22	1776:22	15	b
LEAF_NODE	1776:22	1776:22	16	b
LEAF_NODE	1776:23	1776:23	14	)
LEAF_NODE	1776:24	1776:24	10	;
EXPR_STATEMENT	1777:3	1777:10	9	pp += 3 ;
EXPR	1777:3	1777:3	10	pp += 3
ASSIGN	1777:3	1777:9	11	pp += 3
LVAL	1777:3	1777:3	12	pp
FIELD	1777:3	1777:3	13	pp
LEAF_NODE	1777:3	1777:3	14	pp
ASSIGN_OP	1777:6	1777:6	12	+=
LEAF_NODE	1777:6	1777:6	13	+=
RVAL	1777:9	1777:9	12	3
FIELD	1777:9	1777:9	13	3
LEAF_NODE	1777:9	1777:9	14	3
LEAF_NODE	1777:10	1777:10	10	;
LEAF_NODE	1778:2	1778:2	8	}
EXPR_STATEMENT	1779:2	1779:14	6	cp += toskew ;
EXPR	1779:2	1779:2	7	cp += toskew
ASSIGN	1779:2	1779:8	8	cp += toskew
LVAL	1779:2	1779:2	9	cp
FIELD	1779:2	1779:2	10	cp
LEAF_NODE	1779:2	1779:2	11	cp
ASSIGN_OP	1779:5	1779:5	9	+=
LEAF_NODE	1779:5	1779:5	10	+=
RVAL	1779:8	1779:8	9	toskew
FIELD	1779:8	1779:8	10	toskew
LEAF_NODE	1779:8	1779:8	11	toskew
LEAF_NODE	1779:14	1779:14	7	;
EXPR_STATEMENT	1780:2	1780:16	6	pp += fromskew ;
EXPR	1780:2	1780:2	7	pp += fromskew
ASSIGN	1780:2	1780:8	8	pp += fromskew
LVAL	1780:2	1780:2	9	pp
FIELD	1780:2	1780:2	10	pp
LEAF_NODE	1780:2	1780:2	11	pp
ASSIGN_OP	1780:5	1780:5	9	+=
LEAF_NODE	1780:5	1780:5	10	+=
RVAL	1780:8	1780:8	9	fromskew
FIELD	1780:8	1780:8	10	fromskew
LEAF_NODE	1780:8	1780:8	11	fromskew
LEAF_NODE	1780:16	1780:16	7	;
LEAF_NODE	1781:1	1781:1	5	}
LEAF_NODE	1782:0	1782:0	2	}
FUNCTION_DEF	1803:0	1867:0	1	
RETURN_TYPE	1803:0	1803:7	2	static void
LEAF_NODE	1803:0	1803:0	3	static
TYPE_NAME	1803:7	1803:7	3	void
LEAF_NODE	1803:7	1803:7	4	void
FUNCTION_NAME	1803:12	1803:12	2	putcontig8bitYCbCrGenericTile
LEAF_NODE	1803:12	1803:12	3	putcontig8bitYCbCrGenericTile
PARAMETER_LIST	1803:41	1811:16	2	( TIFFRGBAImage * img , uint32 * cp , uint32 x , uint32 y , uint32 w , uint32 h , int32 fromskew , int32 toskew , unsigned char * pp , int h_group , int v_group )
LEAF_NODE	1803:41	1803:41	3	(
PARAMETER_DECL	1804:4	1804:19	3	TIFFRGBAImage * img
TYPE	1804:4	1804:17	4	TIFFRGBAImage *
TYPE_NAME	1804:4	1804:4	5	TIFFRGBAImage
LEAF_NODE	1804:4	1804:4	6	TIFFRGBAImage
POINTER	1804:17	1804:17	5	*
LEAF_NODE	1804:17	1804:17	6	*
NAME	1804:19	1804:19	4	img
LEAF_NODE	1804:19	1804:19	5	img
LEAF_NODE	1804:22	1804:22	3	,
PARAMETER_DECL	1805:4	1805:12	3	uint32 * cp
TYPE	1805:4	1805:10	4	uint32 *
TYPE_NAME	1805:4	1805:4	5	uint32
LEAF_NODE	1805:4	1805:4	6	uint32
POINTER	1805:10	1805:10	5	*
LEAF_NODE	1805:10	1805:10	6	*
NAME	1805:12	1805:12	4	cp
LEAF_NODE	1805:12	1805:12	5	cp
LEAF_NODE	1805:14	1805:14	3	,
PARAMETER_DECL	1806:4	1806:11	3	uint32 x
TYPE	1806:4	1806:4	4	uint32
TYPE_NAME	1806:4	1806:4	5	uint32
LEAF_NODE	1806:4	1806:4	6	uint32
NAME	1806:11	1806:11	4	x
LEAF_NODE	1806:11	1806:11	5	x
LEAF_NODE	1806:12	1806:12	3	,
PARAMETER_DECL	1806:14	1806:21	3	uint32 y
TYPE	1806:14	1806:14	4	uint32
TYPE_NAME	1806:14	1806:14	5	uint32
LEAF_NODE	1806:14	1806:14	6	uint32
NAME	1806:21	1806:21	4	y
LEAF_NODE	1806:21	1806:21	5	y
LEAF_NODE	1806:22	1806:22	3	,
PARAMETER_DECL	1807:4	1807:11	3	uint32 w
TYPE	1807:4	1807:4	4	uint32
TYPE_NAME	1807:4	1807:4	5	uint32
LEAF_NODE	1807:4	1807:4	6	uint32
NAME	1807:11	1807:11	4	w
LEAF_NODE	1807:11	1807:11	5	w
LEAF_NODE	1807:12	1807:12	3	,
PARAMETER_DECL	1807:14	1807:21	3	uint32 h
TYPE	1807:14	1807:14	4	uint32
TYPE_NAME	1807:14	1807:14	5	uint32
LEAF_NODE	1807:14	1807:14	6	uint32
NAME	1807:21	1807:21	4	h
LEAF_NODE	1807:21	1807:21	5	h
LEAF_NODE	1807:22	1807:22	3	,
PARAMETER_DECL	1808:4	1808:10	3	int32 fromskew
TYPE	1808:4	1808:4	4	int32
TYPE_NAME	1808:4	1808:4	5	int32
LEAF_NODE	1808:4	1808:4	6	int32
NAME	1808:10	1808:10	4	fromskew
LEAF_NODE	1808:10	1808:10	5	fromskew
LEAF_NODE	1808:18	1808:18	3	,
PARAMETER_DECL	1808:20	1808:26	3	int32 toskew
TYPE	1808:20	1808:20	4	int32
TYPE_NAME	1808:20	1808:20	5	int32
LEAF_NODE	1808:20	1808:20	6	int32
NAME	1808:26	1808:26	4	toskew
LEAF_NODE	1808:26	1808:26	5	toskew
LEAF_NODE	1808:32	1808:32	3	,
PARAMETER_DECL	1809:4	1809:19	3	unsigned char * pp
TYPE	1809:4	1809:17	4	unsigned char *
TYPE_NAME	1809:4	1809:13	5	unsigned char
LEAF_NODE	1809:4	1809:4	6	unsigned
LEAF_NODE	1809:13	1809:13	6	char
POINTER	1809:17	1809:17	5	*
LEAF_NODE	1809:17	1809:17	6	*
NAME	1809:19	1809:19	4	pp
LEAF_NODE	1809:19	1809:19	5	pp
LEAF_NODE	1809:21	1809:21	3	,
PARAMETER_DECL	1810:4	1810:8	3	int h_group
TYPE	1810:4	1810:4	4	int
TYPE_NAME	1810:4	1810:4	5	int
LEAF_NODE	1810:4	1810:4	6	int
NAME	1810:8	1810:8	4	h_group
LEAF_NODE	1810:8	1810:8	5	h_group
LEAF_NODE	1810:15	1810:15	3	,
PARAMETER_DECL	1811:4	1811:8	3	int v_group
TYPE	1811:4	1811:4	4	int
TYPE_NAME	1811:4	1811:4	5	int
LEAF_NODE	1811:4	1811:4	6	int
NAME	1811:8	1811:8	4	v_group
LEAF_NODE	1811:8	1811:8	5	v_group
LEAF_NODE	1811:16	1811:16	3	)
LEAF_NODE	1813:0	1813:0	2	{
STATEMENTS	1814:4	1838:4	2	
SIMPLE_DECL	1814:4	1814:29	3	uint32 * cp1 ; cp1 = cp + w + toskew ;
VAR_DECL	1814:4	1814:12	4	uint32 * cp1 ; cp1 = cp + w + toskew
TYPE	1814:4	1814:10	5	uint32 *
TYPE_NAME	1814:4	1814:4	6	uint32
LEAF_NODE	1814:4	1814:4	7	uint32
POINTER	1814:10	1814:10	6	*
LEAF_NODE	1814:10	1814:10	7	*
NAME	1814:12	1814:12	5	cp1
LEAF_NODE	1814:12	1814:12	6	cp1
LEAF_NODE	0:0	0:0	5	;
INIT	1814:12	1814:12	5	cp1 = cp + w + toskew
ASSIGN	1814:12	1814:18	6	cp1 = cp + w + toskew
LVAL	1814:12	1814:12	7	cp1
NAME	1814:12	1814:12	8	cp1
LEAF_NODE	1814:12	1814:12	9	cp1
ASSIGN_OP	1814:16	1814:16	7	=
LEAF_NODE	1814:16	1814:16	8	=
RVAL	1814:18	1814:23	7	cp + w + toskew
FIELD	1814:18	1814:18	8	cp
LEAF_NODE	1814:18	1814:18	9	cp
LEAF_NODE	1814:20	1814:20	8	+
FIELD	1814:21	1814:21	8	w
LEAF_NODE	1814:21	1814:21	9	w
LEAF_NODE	1814:22	1814:22	8	+
FIELD	1814:23	1814:23	8	toskew
LEAF_NODE	1814:23	1814:23	9	toskew
LEAF_NODE	1814:29	1814:29	4	;
SIMPLE_DECL	1815:4	1815:30	3	uint32 * cp2 ; cp2 = cp1 + w + toskew ;
VAR_DECL	1815:4	1815:12	4	uint32 * cp2 ; cp2 = cp1 + w + toskew
TYPE	1815:4	1815:10	5	uint32 *
TYPE_NAME	1815:4	1815:4	6	uint32
LEAF_NODE	1815:4	1815:4	7	uint32
POINTER	1815:10	1815:10	6	*
LEAF_NODE	1815:10	1815:10	7	*
NAME	1815:12	1815:12	5	cp2
LEAF_NODE	1815:12	1815:12	6	cp2
LEAF_NODE	0:0	0:0	5	;
INIT	1815:12	1815:12	5	cp2 = cp1 + w + toskew
ASSIGN	1815:12	1815:18	6	cp2 = cp1 + w + toskew
LVAL	1815:12	1815:12	7	cp2
NAME	1815:12	1815:12	8	cp2
LEAF_NODE	1815:12	1815:12	9	cp2
ASSIGN_OP	1815:16	1815:16	7	=
LEAF_NODE	1815:16	1815:16	8	=
RVAL	1815:18	1815:24	7	cp1 + w + toskew
FIELD	1815:18	1815:18	8	cp1
LEAF_NODE	1815:18	1815:18	9	cp1
LEAF_NODE	1815:21	1815:21	8	+
FIELD	1815:22	1815:22	8	w
LEAF_NODE	1815:22	1815:22	9	w
LEAF_NODE	1815:23	1815:23	8	+
FIELD	1815:24	1815:24	8	toskew
LEAF_NODE	1815:24	1815:24	9	toskew
LEAF_NODE	1815:30	1815:30	4	;
SIMPLE_DECL	1816:4	1816:30	3	uint32 * cp3 ; cp3 = cp2 + w + toskew ;
VAR_DECL	1816:4	1816:12	4	uint32 * cp3 ; cp3 = cp2 + w + toskew
TYPE	1816:4	1816:10	5	uint32 *
TYPE_NAME	1816:4	1816:4	6	uint32
LEAF_NODE	1816:4	1816:4	7	uint32
POINTER	1816:10	1816:10	6	*
LEAF_NODE	1816:10	1816:10	7	*
NAME	1816:12	1816:12	5	cp3
LEAF_NODE	1816:12	1816:12	6	cp3
LEAF_NODE	0:0	0:0	5	;
INIT	1816:12	1816:12	5	cp3 = cp2 + w + toskew
ASSIGN	1816:12	1816:18	6	cp3 = cp2 + w + toskew
LVAL	1816:12	1816:12	7	cp3
NAME	1816:12	1816:12	8	cp3
LEAF_NODE	1816:12	1816:12	9	cp3
ASSIGN_OP	1816:16	1816:16	7	=
LEAF_NODE	1816:16	1816:16	8	=
RVAL	1816:18	1816:24	7	cp2 + w + toskew
FIELD	1816:18	1816:18	8	cp2
LEAF_NODE	1816:18	1816:18	9	cp2
LEAF_NODE	1816:21	1816:21	8	+
FIELD	1816:22	1816:22	8	w
LEAF_NODE	1816:22	1816:22	9	w
LEAF_NODE	1816:23	1816:23	8	+
FIELD	1816:24	1816:24	8	toskew
LEAF_NODE	1816:24	1816:24	9	toskew
LEAF_NODE	1816:30	1816:30	4	;
SIMPLE_DECL	1817:4	1817:29	3	int32 incr ; incr = 3 * w + 4 * toskew ;
VAR_DECL	1817:4	1817:10	4	int32 incr ; incr = 3 * w + 4 * toskew
TYPE	1817:4	1817:4	5	int32
TYPE_NAME	1817:4	1817:4	6	int32
LEAF_NODE	1817:4	1817:4	7	int32
NAME	1817:10	1817:10	5	incr
LEAF_NODE	1817:10	1817:10	6	incr
LEAF_NODE	0:0	0:0	5	;
INIT	1817:10	1817:10	5	incr = 3 * w + 4 * toskew
ASSIGN	1817:10	1817:17	6	incr = 3 * w + 4 * toskew
LVAL	1817:10	1817:10	7	incr
NAME	1817:10	1817:10	8	incr
LEAF_NODE	1817:10	1817:10	9	incr
ASSIGN_OP	1817:15	1817:15	7	=
LEAF_NODE	1817:15	1817:15	8	=
RVAL	1817:17	1817:23	7	3 * w + 4 * toskew
FIELD	1817:17	1817:17	8	3
LEAF_NODE	1817:17	1817:17	9	3
LEAF_NODE	1817:18	1817:18	8	*
FIELD	1817:19	1817:19	8	w
LEAF_NODE	1817:19	1817:19	9	w
LEAF_NODE	1817:20	1817:20	8	+
FIELD	1817:21	1817:21	8	4
LEAF_NODE	1817:21	1817:21	9	4
LEAF_NODE	1817:22	1817:22	8	*
FIELD	1817:23	1817:23	8	toskew
LEAF_NODE	1817:23	1817:23	9	toskew
LEAF_NODE	1817:29	1817:29	4	;
SIMPLE_DECL	1818:4	1818:18	3	int32 Cb , int32 Cr ;
INIT_DECL_LIST	1818:4	1818:4	4	int32 Cb , int32 Cr
VAR_DECL	1818:4	1818:12	5	int32 Cb
TYPE	1818:4	1818:4	6	int32
TYPE_NAME	1818:4	1818:4	7	int32
LEAF_NODE	1818:4	1818:4	8	int32
NAME	1818:12	1818:12	6	Cb
LEAF_NODE	1818:12	1818:12	7	Cb
LEAF_NODE	1818:14	1818:14	5	,
VAR_DECL	1818:4	1818:16	5	int32 Cr
TYPE	1818:4	1818:4	6	int32
TYPE_NAME	1818:4	1818:4	7	int32
LEAF_NODE	1818:4	1818:4	8	int32
NAME	1818:16	1818:16	6	Cr
LEAF_NODE	1818:16	1818:16	7	Cr
LEAF_NODE	1818:18	1818:18	4	;
SIMPLE_DECL	1819:4	1819:46	3	int group_size ; group_size = v_group * h_group + 2 ;
VAR_DECL	1819:4	1819:12	4	int group_size ; group_size = v_group * h_group + 2
TYPE	1819:4	1819:4	5	int
TYPE_NAME	1819:4	1819:4	6	int
LEAF_NODE	1819:4	1819:4	7	int
NAME	1819:12	1819:12	5	group_size
LEAF_NODE	1819:12	1819:12	6	group_size
LEAF_NODE	0:0	0:0	5	;
INIT	1819:12	1819:12	5	group_size = v_group * h_group + 2
ASSIGN	1819:12	1819:25	6	group_size = v_group * h_group + 2
LVAL	1819:12	1819:12	7	group_size
NAME	1819:12	1819:12	8	group_size
LEAF_NODE	1819:12	1819:12	9	group_size
ASSIGN_OP	1819:23	1819:23	7	=
LEAF_NODE	1819:23	1819:23	8	=
RVAL	1819:25	1819:45	7	v_group * h_group + 2
FIELD	1819:25	1819:25	8	v_group
LEAF_NODE	1819:25	1819:25	9	v_group
LEAF_NODE	1819:33	1819:33	8	*
FIELD	1819:35	1819:35	8	h_group
LEAF_NODE	1819:35	1819:35	9	h_group
LEAF_NODE	1819:43	1819:43	8	+
FIELD	1819:45	1819:45	8	2
LEAF_NODE	1819:45	1819:45	9	2
LEAF_NODE	1819:46	1819:46	4	;
EXPR_STATEMENT	1821:4	1821:12	3	( void ) y ;
EXPR	1821:4	1821:11	4	( void ) y
LEAF_NODE	1821:4	1821:4	5	(
TYPE_NAME	1821:5	1821:5	5	void
LEAF_NODE	1821:5	1821:5	6	void
LEAF_NODE	1821:9	1821:9	5	)
FIELD	1821:11	1821:11	5	y
LEAF_NODE	1821:11	1821:11	6	y
LEAF_NODE	1821:12	1821:12	4	;
EXPR_STATEMENT	1822:4	1822:48	3	fromskew = ( fromskew * group_size ) / h_group ;
EXPR	1822:4	1822:4	4	fromskew = ( fromskew * group_size ) / h_group
ASSIGN	1822:4	1822:15	5	fromskew = ( fromskew * group_size ) / h_group
LVAL	1822:4	1822:4	6	fromskew
FIELD	1822:4	1822:4	7	fromskew
LEAF_NODE	1822:4	1822:4	8	fromskew
ASSIGN_OP	1822:13	1822:13	6	=
LEAF_NODE	1822:13	1822:13	7	=
RVAL	1822:15	1822:41	6	( fromskew * group_size ) / h_group
LEAF_NODE	1822:15	1822:15	7	(
FIELD	1822:16	1822:16	7	fromskew
LEAF_NODE	1822:16	1822:16	8	fromskew
LEAF_NODE	1822:25	1822:25	7	*
FIELD	1822:27	1822:27	7	group_size
LEAF_NODE	1822:27	1822:27	8	group_size
LEAF_NODE	1822:37	1822:37	7	)
LEAF_NODE	1822:39	1822:39	7	/
FIELD	1822:41	1822:41	7	h_group
LEAF_NODE	1822:41	1822:41	8	h_group
LEAF_NODE	1822:48	1822:48	4	;
ITERATION	1824:4	1825:4	3	
KEYWORD	1824:4	1824:4	4	for
LEAF_NODE	1824:4	1824:4	5	for
LEAF_NODE	1824:7	1824:7	4	(
FOR_INIT	1824:9	1824:15	4	yy = 0 ;
EXPR	1824:9	1824:9	5	yy = 0
ASSIGN	1824:9	1824:14	6	yy = 0
LVAL	1824:9	1824:9	7	yy
FIELD	1824:9	1824:9	8	yy
LEAF_NODE	1824:9	1824:9	9	yy
ASSIGN_OP	1824:12	1824:12	7	=
LEAF_NODE	1824:12	1824:12	8	=
RVAL	1824:14	1824:14	7	0
FIELD	1824:14	1824:14	8	0
LEAF_NODE	1824:14	1824:14	9	0
LEAF_NODE	1824:15	1824:15	5	;
CONDITION	1824:17	1824:17	4	yy < h
EXPR	1824:17	1824:22	5	yy < h
FIELD	1824:17	1824:17	6	yy
LEAF_NODE	1824:17	1824:17	7	yy
REL_OPERATOR	1824:20	1824:20	6	<
LEAF_NODE	1824:20	1824:20	7	<
FIELD	1824:22	1824:22	6	h
LEAF_NODE	1824:22	1824:22	7	h
LEAF_NODE	1824:23	1824:23	4	;
FOR_EXPR	1824:25	1824:25	4	yy ++
EXPR	1824:25	1824:25	5	yy ++
FIELD	1824:25	1824:27	6	yy ++
LEAF_NODE	1824:25	1824:25	7	yy
LEAF_NODE	1824:27	1824:27	7	++
LEAF_NODE	1824:30	1824:30	4	)
STATEMENTS	1825:4	1837:4	4	
LEAF_NODE	1825:4	1825:4	5	{
STATEMENTS	1826:8	1833:8	5	
SIMPLE_DECL	1826:8	1826:30	6	unsigned char * pp_line ;
VAR_DECL	1826:8	1826:23	7	unsigned char * pp_line
TYPE	1826:8	1826:22	8	unsigned char *
TYPE_NAME	1826:8	1826:17	9	unsigned char
LEAF_NODE	1826:8	1826:8	10	unsigned
LEAF_NODE	1826:17	1826:17	10	char
POINTER	1826:22	1826:22	9	*
LEAF_NODE	1826:22	1826:22	10	*
NAME	1826:23	1826:23	8	pp_line
LEAF_NODE	1826:23	1826:23	9	pp_line
LEAF_NODE	1826:30	1826:30	7	;
SIMPLE_DECL	1827:8	1827:43	6	int y_line_group ; y_line_group = yy / v_group ;
VAR_DECL	1827:8	1827:16	7	int y_line_group ; y_line_group = yy / v_group
TYPE	1827:8	1827:8	8	int
TYPE_NAME	1827:8	1827:8	9	int
LEAF_NODE	1827:8	1827:8	10	int
NAME	1827:16	1827:16	8	y_line_group
LEAF_NODE	1827:16	1827:16	9	y_line_group
LEAF_NODE	0:0	0:0	8	;
INIT	1827:16	1827:16	8	y_line_group = yy / v_group
ASSIGN	1827:16	1827:31	9	y_line_group = yy / v_group
LVAL	1827:16	1827:16	10	y_line_group
NAME	1827:16	1827:16	11	y_line_group
LEAF_NODE	1827:16	1827:16	12	y_line_group
ASSIGN_OP	1827:29	1827:29	10	=
LEAF_NODE	1827:29	1827:29	11	=
RVAL	1827:31	1827:36	10	yy / v_group
FIELD	1827:31	1827:31	11	yy
LEAF_NODE	1827:31	1827:31	12	yy
LEAF_NODE	1827:34	1827:34	11	/
FIELD	1827:36	1827:36	11	v_group
LEAF_NODE	1827:36	1827:36	12	v_group
LEAF_NODE	1827:43	1827:43	7	;
SIMPLE_DECL	1828:8	1828:57	6	int y_remainder ; y_remainder = yy - y_line_group * v_group ;
VAR_DECL	1828:8	1828:16	7	int y_remainder ; y_remainder = yy - y_line_group * v_group
TYPE	1828:8	1828:8	8	int
TYPE_NAME	1828:8	1828:8	9	int
LEAF_NODE	1828:8	1828:8	10	int
NAME	1828:16	1828:16	8	y_remainder
LEAF_NODE	1828:16	1828:16	9	y_remainder
LEAF_NODE	0:0	0:0	8	;
INIT	1828:16	1828:16	8	y_remainder = yy - y_line_group * v_group
ASSIGN	1828:16	1828:30	9	y_remainder = yy - y_line_group * v_group
LVAL	1828:16	1828:16	10	y_remainder
NAME	1828:16	1828:16	11	y_remainder
LEAF_NODE	1828:16	1828:16	12	y_remainder
ASSIGN_OP	1828:28	1828:28	10	=
LEAF_NODE	1828:28	1828:28	11	=
RVAL	1828:30	1828:50	10	yy - y_line_group * v_group
FIELD	1828:30	1828:30	11	yy
LEAF_NODE	1828:30	1828:30	12	yy
LEAF_NODE	1828:33	1828:33	11	-
FIELD	1828:35	1828:35	11	y_line_group
LEAF_NODE	1828:35	1828:35	12	y_line_group
LEAF_NODE	1828:48	1828:48	11	*
FIELD	1828:50	1828:50	11	v_group
LEAF_NODE	1828:50	1828:50	12	v_group
LEAF_NODE	1828:57	1828:57	7	;
LEAF_NODE	1830:8	1830:8	6	pp_line
LEAF_NODE	1830:16	1830:16	6	=
LEAF_NODE	1830:18	1830:18	6	pp
LEAF_NODE	1830:21	1830:21	6	+
LEAF_NODE	1830:23	1830:23	6	v_line_group
LEAF_NODE	1830:36	1830:36	6	*
ITERATION	1833:8	1834:8	6	
KEYWORD	1833:8	1833:8	7	for
LEAF_NODE	1833:8	1833:8	8	for
LEAF_NODE	1833:11	1833:11	7	(
FOR_INIT	1833:13	1833:19	7	xx = 0 ;
EXPR	1833:13	1833:13	8	xx = 0
ASSIGN	1833:13	1833:18	9	xx = 0
LVAL	1833:13	1833:13	10	xx
FIELD	1833:13	1833:13	11	xx
LEAF_NODE	1833:13	1833:13	12	xx
ASSIGN_OP	1833:16	1833:16	10	=
LEAF_NODE	1833:16	1833:16	11	=
RVAL	1833:18	1833:18	10	0
FIELD	1833:18	1833:18	11	0
LEAF_NODE	1833:18	1833:18	12	0
LEAF_NODE	1833:19	1833:19	8	;
CONDITION	1833:21	1833:21	7	xx < w
EXPR	1833:21	1833:26	8	xx < w
FIELD	1833:21	1833:21	9	xx
LEAF_NODE	1833:21	1833:21	10	xx
REL_OPERATOR	1833:24	1833:24	9	<
LEAF_NODE	1833:24	1833:24	10	<
FIELD	1833:26	1833:26	9	w
LEAF_NODE	1833:26	1833:26	10	w
LEAF_NODE	1833:27	1833:27	7	;
FOR_EXPR	1833:29	1833:29	7	xx ++
EXPR	1833:29	1833:29	8	xx ++
FIELD	1833:29	1833:31	9	xx ++
LEAF_NODE	1833:29	1833:29	10	xx
LEAF_NODE	1833:31	1833:31	10	++
LEAF_NODE	1833:34	1833:34	7	)
STATEMENTS	1834:8	1836:8	7	
LEAF_NODE	1834:8	1834:8	8	{
STATEMENTS	1835:12	1835:17	8	
LEAF_NODE	1835:12	1835:12	9	Cb
LEAF_NODE	1835:15	1835:15	9	=
LEAF_NODE	1835:17	1835:17	9	pp
LEAF_NODE	1836:8	1836:8	8	}
LEAF_NODE	1837:4	1837:4	5	}
ITERATION	1838:4	1838:27	3	
KEYWORD	1838:4	1838:4	4	for
LEAF_NODE	1838:4	1838:4	5	for
LEAF_NODE	1838:8	1838:8	4	(
FOR_INIT	1838:9	1838:9	4	;
LEAF_NODE	1838:9	1838:9	5	;
CONDITION	1838:11	1838:11	4	h >= 4
EXPR	1838:11	1838:16	5	h >= 4
FIELD	1838:11	1838:11	6	h
LEAF_NODE	1838:11	1838:11	7	h
REL_OPERATOR	1838:13	1838:13	6	>=
LEAF_NODE	1838:13	1838:13	7	>=
FIELD	1838:16	1838:16	6	4
LEAF_NODE	1838:16	1838:16	7	4
LEAF_NODE	1838:17	1838:17	4	;
FOR_EXPR	1838:19	1838:19	4	h -= 4
EXPR	1838:19	1838:19	5	h -= 4
ASSIGN	1838:19	1838:24	6	h -= 4
LVAL	1838:19	1838:19	7	h
FIELD	1838:19	1838:19	8	h
LEAF_NODE	1838:19	1838:19	9	h
ASSIGN_OP	1838:21	1838:21	7	-=
LEAF_NODE	1838:21	1838:21	8	-=
RVAL	1838:24	1838:24	7	4
FIELD	1838:24	1838:24	8	4
LEAF_NODE	1838:24	1838:24	9	4
LEAF_NODE	1838:25	1838:25	4	)
STATEMENTS	1838:27	1866:4	4	
LEAF_NODE	1838:27	1838:27	5	{
STATEMENTS	1839:1	1865:1	5	
EXPR_STATEMENT	1839:1	1839:9	6	x = w >> 2 ;
EXPR	1839:1	1839:1	7	x = w >> 2
ASSIGN	1839:1	1839:5	8	x = w >> 2
LVAL	1839:1	1839:1	9	x
FIELD	1839:1	1839:1	10	x
LEAF_NODE	1839:1	1839:1	11	x
ASSIGN_OP	1839:3	1839:3	9	=
LEAF_NODE	1839:3	1839:3	10	=
RVAL	1839:5	1839:8	9	w >> 2
FIELD	1839:5	1839:5	10	w
LEAF_NODE	1839:5	1839:5	11	w
LEAF_NODE	1839:6	1839:6	10	>>
FIELD	1839:8	1839:8	10	2
LEAF_NODE	1839:8	1839:8	11	2
LEAF_NODE	1839:9	1839:9	7	;
ITERATION	1840:1	1840:4	6	
KEYWORD	1840:1	1840:1	7	do
LEAF_NODE	1840:1	1840:1	8	do
LEAF_NODE	1863:9	1863:9	7	(
CONDITION	1863:10	1863:10	7	-- x
EXPR	1863:10	1863:12	8	-- x
LEAF_NODE	1863:10	1863:10	9	--
FIELD	1863:12	1863:12	9	x
LEAF_NODE	1863:12	1863:12	10	x
LEAF_NODE	1863:13	1863:13	7	)
STATEMENTS	1840:4	1863:1	7	
LEAF_NODE	1840:4	1840:4	8	{
STATEMENTS	1841:5	1862:5	8	
EXPR_STATEMENT	1841:5	1841:16	9	Cb = pp [ 16 ] ;
EXPR	1841:5	1841:5	10	Cb = pp [ 16 ]
ASSIGN	1841:5	1841:10	11	Cb = pp [ 16 ]
LVAL	1841:5	1841:5	12	Cb
FIELD	1841:5	1841:5	13	Cb
LEAF_NODE	1841:5	1841:5	14	Cb
ASSIGN_OP	1841:8	1841:8	12	=
LEAF_NODE	1841:8	1841:8	13	=
RVAL	1841:10	1841:10	12	pp [ 16 ]
FIELD	1841:10	1841:15	13	pp [ 16 ]
LEAF_NODE	1841:10	1841:10	14	pp
LEAF_NODE	1841:12	1841:12	14	[
EXPR	1841:13	1841:13	14	16
FIELD	1841:13	1841:13	15	16
LEAF_NODE	1841:13	1841:13	16	16
LEAF_NODE	1841:15	1841:15	14	]
LEAF_NODE	1841:16	1841:16	10	;
EXPR_STATEMENT	1842:5	1842:16	9	Cr = pp [ 17 ] ;
EXPR	1842:5	1842:5	10	Cr = pp [ 17 ]
ASSIGN	1842:5	1842:10	11	Cr = pp [ 17 ]
LVAL	1842:5	1842:5	12	Cr
FIELD	1842:5	1842:5	13	Cr
LEAF_NODE	1842:5	1842:5	14	Cr
ASSIGN_OP	1842:8	1842:8	12	=
LEAF_NODE	1842:8	1842:8	13	=
RVAL	1842:10	1842:10	12	pp [ 17 ]
FIELD	1842:10	1842:15	13	pp [ 17 ]
LEAF_NODE	1842:10	1842:10	14	pp
LEAF_NODE	1842:12	1842:12	14	[
EXPR	1842:13	1842:13	14	17
FIELD	1842:13	1842:13	15	17
LEAF_NODE	1842:13	1842:13	16	17
LEAF_NODE	1842:15	1842:15	14	]
LEAF_NODE	1842:16	1842:16	10	;
EXPR_STATEMENT	1844:5	1844:31	9	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	1844:5	1844:5	10	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	1844:5	1844:30	11	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	1844:5	1844:5	12	YCbCrtoRGB
LEAF_NODE	1844:5	1844:5	13	YCbCrtoRGB
LEAF_NODE	1844:15	1844:15	12	(
ARGUMENT	1844:16	1844:16	12	cp [ 0 ]
FIELD	1844:16	1844:21	13	cp [ 0 ]
LEAF_NODE	1844:16	1844:16	14	cp
LEAF_NODE	1844:19	1844:19	14	[
EXPR	1844:20	1844:20	14	0
FIELD	1844:20	1844:20	15	0
LEAF_NODE	1844:20	1844:20	16	0
LEAF_NODE	1844:21	1844:21	14	]
LEAF_NODE	1844:22	1844:22	12	,
ARGUMENT	1844:24	1844:24	12	pp [ 0 ]
FIELD	1844:24	1844:29	13	pp [ 0 ]
LEAF_NODE	1844:24	1844:24	14	pp
LEAF_NODE	1844:26	1844:26	14	[
EXPR	1844:28	1844:28	14	0
FIELD	1844:28	1844:28	15	0
LEAF_NODE	1844:28	1844:28	16	0
LEAF_NODE	1844:29	1844:29	14	]
LEAF_NODE	1844:30	1844:30	12	)
LEAF_NODE	1844:31	1844:31	10	;
EXPR_STATEMENT	1845:5	1845:31	9	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] ) ;
EXPR	1845:5	1845:5	10	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
FUNCTION_CALL	1845:5	1845:30	11	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
CALLEE	1845:5	1845:5	12	YCbCrtoRGB
LEAF_NODE	1845:5	1845:5	13	YCbCrtoRGB
LEAF_NODE	1845:15	1845:15	12	(
ARGUMENT	1845:16	1845:16	12	cp [ 1 ]
FIELD	1845:16	1845:21	13	cp [ 1 ]
LEAF_NODE	1845:16	1845:16	14	cp
LEAF_NODE	1845:19	1845:19	14	[
EXPR	1845:20	1845:20	14	1
FIELD	1845:20	1845:20	15	1
LEAF_NODE	1845:20	1845:20	16	1
LEAF_NODE	1845:21	1845:21	14	]
LEAF_NODE	1845:22	1845:22	12	,
ARGUMENT	1845:24	1845:24	12	pp [ 1 ]
FIELD	1845:24	1845:29	13	pp [ 1 ]
LEAF_NODE	1845:24	1845:24	14	pp
LEAF_NODE	1845:26	1845:26	14	[
EXPR	1845:28	1845:28	14	1
FIELD	1845:28	1845:28	15	1
LEAF_NODE	1845:28	1845:28	16	1
LEAF_NODE	1845:29	1845:29	14	]
LEAF_NODE	1845:30	1845:30	12	)
LEAF_NODE	1845:31	1845:31	10	;
EXPR_STATEMENT	1846:5	1846:31	9	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] ) ;
EXPR	1846:5	1846:5	10	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
FUNCTION_CALL	1846:5	1846:30	11	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
CALLEE	1846:5	1846:5	12	YCbCrtoRGB
LEAF_NODE	1846:5	1846:5	13	YCbCrtoRGB
LEAF_NODE	1846:15	1846:15	12	(
ARGUMENT	1846:16	1846:16	12	cp [ 2 ]
FIELD	1846:16	1846:21	13	cp [ 2 ]
LEAF_NODE	1846:16	1846:16	14	cp
LEAF_NODE	1846:19	1846:19	14	[
EXPR	1846:20	1846:20	14	2
FIELD	1846:20	1846:20	15	2
LEAF_NODE	1846:20	1846:20	16	2
LEAF_NODE	1846:21	1846:21	14	]
LEAF_NODE	1846:22	1846:22	12	,
ARGUMENT	1846:24	1846:24	12	pp [ 2 ]
FIELD	1846:24	1846:29	13	pp [ 2 ]
LEAF_NODE	1846:24	1846:24	14	pp
LEAF_NODE	1846:26	1846:26	14	[
EXPR	1846:28	1846:28	14	2
FIELD	1846:28	1846:28	15	2
LEAF_NODE	1846:28	1846:28	16	2
LEAF_NODE	1846:29	1846:29	14	]
LEAF_NODE	1846:30	1846:30	12	)
LEAF_NODE	1846:31	1846:31	10	;
EXPR_STATEMENT	1847:5	1847:31	9	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] ) ;
EXPR	1847:5	1847:5	10	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
FUNCTION_CALL	1847:5	1847:30	11	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
CALLEE	1847:5	1847:5	12	YCbCrtoRGB
LEAF_NODE	1847:5	1847:5	13	YCbCrtoRGB
LEAF_NODE	1847:15	1847:15	12	(
ARGUMENT	1847:16	1847:16	12	cp [ 3 ]
FIELD	1847:16	1847:21	13	cp [ 3 ]
LEAF_NODE	1847:16	1847:16	14	cp
LEAF_NODE	1847:19	1847:19	14	[
EXPR	1847:20	1847:20	14	3
FIELD	1847:20	1847:20	15	3
LEAF_NODE	1847:20	1847:20	16	3
LEAF_NODE	1847:21	1847:21	14	]
LEAF_NODE	1847:22	1847:22	12	,
ARGUMENT	1847:24	1847:24	12	pp [ 3 ]
FIELD	1847:24	1847:29	13	pp [ 3 ]
LEAF_NODE	1847:24	1847:24	14	pp
LEAF_NODE	1847:26	1847:26	14	[
EXPR	1847:28	1847:28	14	3
FIELD	1847:28	1847:28	15	3
LEAF_NODE	1847:28	1847:28	16	3
LEAF_NODE	1847:29	1847:29	14	]
LEAF_NODE	1847:30	1847:30	12	)
LEAF_NODE	1847:31	1847:31	10	;
EXPR_STATEMENT	1848:5	1848:31	9	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] ) ;
EXPR	1848:5	1848:5	10	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] )
FUNCTION_CALL	1848:5	1848:30	11	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] )
CALLEE	1848:5	1848:5	12	YCbCrtoRGB
LEAF_NODE	1848:5	1848:5	13	YCbCrtoRGB
LEAF_NODE	1848:15	1848:15	12	(
ARGUMENT	1848:16	1848:16	12	cp1 [ 0 ]
FIELD	1848:16	1848:21	13	cp1 [ 0 ]
LEAF_NODE	1848:16	1848:16	14	cp1
LEAF_NODE	1848:19	1848:19	14	[
EXPR	1848:20	1848:20	14	0
FIELD	1848:20	1848:20	15	0
LEAF_NODE	1848:20	1848:20	16	0
LEAF_NODE	1848:21	1848:21	14	]
LEAF_NODE	1848:22	1848:22	12	,
ARGUMENT	1848:24	1848:24	12	pp [ 4 ]
FIELD	1848:24	1848:29	13	pp [ 4 ]
LEAF_NODE	1848:24	1848:24	14	pp
LEAF_NODE	1848:26	1848:26	14	[
EXPR	1848:28	1848:28	14	4
FIELD	1848:28	1848:28	15	4
LEAF_NODE	1848:28	1848:28	16	4
LEAF_NODE	1848:29	1848:29	14	]
LEAF_NODE	1848:30	1848:30	12	)
LEAF_NODE	1848:31	1848:31	10	;
EXPR_STATEMENT	1849:5	1849:31	9	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] ) ;
EXPR	1849:5	1849:5	10	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] )
FUNCTION_CALL	1849:5	1849:30	11	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] )
CALLEE	1849:5	1849:5	12	YCbCrtoRGB
LEAF_NODE	1849:5	1849:5	13	YCbCrtoRGB
LEAF_NODE	1849:15	1849:15	12	(
ARGUMENT	1849:16	1849:16	12	cp1 [ 1 ]
FIELD	1849:16	1849:21	13	cp1 [ 1 ]
LEAF_NODE	1849:16	1849:16	14	cp1
LEAF_NODE	1849:19	1849:19	14	[
EXPR	1849:20	1849:20	14	1
FIELD	1849:20	1849:20	15	1
LEAF_NODE	1849:20	1849:20	16	1
LEAF_NODE	1849:21	1849:21	14	]
LEAF_NODE	1849:22	1849:22	12	,
ARGUMENT	1849:24	1849:24	12	pp [ 5 ]
FIELD	1849:24	1849:29	13	pp [ 5 ]
LEAF_NODE	1849:24	1849:24	14	pp
LEAF_NODE	1849:26	1849:26	14	[
EXPR	1849:28	1849:28	14	5
FIELD	1849:28	1849:28	15	5
LEAF_NODE	1849:28	1849:28	16	5
LEAF_NODE	1849:29	1849:29	14	]
LEAF_NODE	1849:30	1849:30	12	)
LEAF_NODE	1849:31	1849:31	10	;
EXPR_STATEMENT	1850:5	1850:31	9	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] ) ;
EXPR	1850:5	1850:5	10	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] )
FUNCTION_CALL	1850:5	1850:30	11	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] )
CALLEE	1850:5	1850:5	12	YCbCrtoRGB
LEAF_NODE	1850:5	1850:5	13	YCbCrtoRGB
LEAF_NODE	1850:15	1850:15	12	(
ARGUMENT	1850:16	1850:16	12	cp1 [ 2 ]
FIELD	1850:16	1850:21	13	cp1 [ 2 ]
LEAF_NODE	1850:16	1850:16	14	cp1
LEAF_NODE	1850:19	1850:19	14	[
EXPR	1850:20	1850:20	14	2
FIELD	1850:20	1850:20	15	2
LEAF_NODE	1850:20	1850:20	16	2
LEAF_NODE	1850:21	1850:21	14	]
LEAF_NODE	1850:22	1850:22	12	,
ARGUMENT	1850:24	1850:24	12	pp [ 6 ]
FIELD	1850:24	1850:29	13	pp [ 6 ]
LEAF_NODE	1850:24	1850:24	14	pp
LEAF_NODE	1850:26	1850:26	14	[
EXPR	1850:28	1850:28	14	6
FIELD	1850:28	1850:28	15	6
LEAF_NODE	1850:28	1850:28	16	6
LEAF_NODE	1850:29	1850:29	14	]
LEAF_NODE	1850:30	1850:30	12	)
LEAF_NODE	1850:31	1850:31	10	;
EXPR_STATEMENT	1851:5	1851:31	9	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] ) ;
EXPR	1851:5	1851:5	10	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] )
FUNCTION_CALL	1851:5	1851:30	11	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] )
CALLEE	1851:5	1851:5	12	YCbCrtoRGB
LEAF_NODE	1851:5	1851:5	13	YCbCrtoRGB
LEAF_NODE	1851:15	1851:15	12	(
ARGUMENT	1851:16	1851:16	12	cp1 [ 3 ]
FIELD	1851:16	1851:21	13	cp1 [ 3 ]
LEAF_NODE	1851:16	1851:16	14	cp1
LEAF_NODE	1851:19	1851:19	14	[
EXPR	1851:20	1851:20	14	3
FIELD	1851:20	1851:20	15	3
LEAF_NODE	1851:20	1851:20	16	3
LEAF_NODE	1851:21	1851:21	14	]
LEAF_NODE	1851:22	1851:22	12	,
ARGUMENT	1851:24	1851:24	12	pp [ 7 ]
FIELD	1851:24	1851:29	13	pp [ 7 ]
LEAF_NODE	1851:24	1851:24	14	pp
LEAF_NODE	1851:26	1851:26	14	[
EXPR	1851:28	1851:28	14	7
FIELD	1851:28	1851:28	15	7
LEAF_NODE	1851:28	1851:28	16	7
LEAF_NODE	1851:29	1851:29	14	]
LEAF_NODE	1851:30	1851:30	12	)
LEAF_NODE	1851:31	1851:31	10	;
EXPR_STATEMENT	1852:5	1852:31	9	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 8 ] ) ;
EXPR	1852:5	1852:5	10	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 8 ] )
FUNCTION_CALL	1852:5	1852:30	11	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 8 ] )
CALLEE	1852:5	1852:5	12	YCbCrtoRGB
LEAF_NODE	1852:5	1852:5	13	YCbCrtoRGB
LEAF_NODE	1852:15	1852:15	12	(
ARGUMENT	1852:16	1852:16	12	cp2 [ 0 ]
FIELD	1852:16	1852:21	13	cp2 [ 0 ]
LEAF_NODE	1852:16	1852:16	14	cp2
LEAF_NODE	1852:19	1852:19	14	[
EXPR	1852:20	1852:20	14	0
FIELD	1852:20	1852:20	15	0
LEAF_NODE	1852:20	1852:20	16	0
LEAF_NODE	1852:21	1852:21	14	]
LEAF_NODE	1852:22	1852:22	12	,
ARGUMENT	1852:24	1852:24	12	pp [ 8 ]
FIELD	1852:24	1852:29	13	pp [ 8 ]
LEAF_NODE	1852:24	1852:24	14	pp
LEAF_NODE	1852:26	1852:26	14	[
EXPR	1852:28	1852:28	14	8
FIELD	1852:28	1852:28	15	8
LEAF_NODE	1852:28	1852:28	16	8
LEAF_NODE	1852:29	1852:29	14	]
LEAF_NODE	1852:30	1852:30	12	)
LEAF_NODE	1852:31	1852:31	10	;
EXPR_STATEMENT	1853:5	1853:31	9	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 9 ] ) ;
EXPR	1853:5	1853:5	10	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 9 ] )
FUNCTION_CALL	1853:5	1853:30	11	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 9 ] )
CALLEE	1853:5	1853:5	12	YCbCrtoRGB
LEAF_NODE	1853:5	1853:5	13	YCbCrtoRGB
LEAF_NODE	1853:15	1853:15	12	(
ARGUMENT	1853:16	1853:16	12	cp2 [ 1 ]
FIELD	1853:16	1853:21	13	cp2 [ 1 ]
LEAF_NODE	1853:16	1853:16	14	cp2
LEAF_NODE	1853:19	1853:19	14	[
EXPR	1853:20	1853:20	14	1
FIELD	1853:20	1853:20	15	1
LEAF_NODE	1853:20	1853:20	16	1
LEAF_NODE	1853:21	1853:21	14	]
LEAF_NODE	1853:22	1853:22	12	,
ARGUMENT	1853:24	1853:24	12	pp [ 9 ]
FIELD	1853:24	1853:29	13	pp [ 9 ]
LEAF_NODE	1853:24	1853:24	14	pp
LEAF_NODE	1853:26	1853:26	14	[
EXPR	1853:28	1853:28	14	9
FIELD	1853:28	1853:28	15	9
LEAF_NODE	1853:28	1853:28	16	9
LEAF_NODE	1853:29	1853:29	14	]
LEAF_NODE	1853:30	1853:30	12	)
LEAF_NODE	1853:31	1853:31	10	;
EXPR_STATEMENT	1854:5	1854:31	9	YCbCrtoRGB ( cp2 [ 2 ] , pp [ 10 ] ) ;
EXPR	1854:5	1854:5	10	YCbCrtoRGB ( cp2 [ 2 ] , pp [ 10 ] )
FUNCTION_CALL	1854:5	1854:30	11	YCbCrtoRGB ( cp2 [ 2 ] , pp [ 10 ] )
CALLEE	1854:5	1854:5	12	YCbCrtoRGB
LEAF_NODE	1854:5	1854:5	13	YCbCrtoRGB
LEAF_NODE	1854:15	1854:15	12	(
ARGUMENT	1854:16	1854:16	12	cp2 [ 2 ]
FIELD	1854:16	1854:21	13	cp2 [ 2 ]
LEAF_NODE	1854:16	1854:16	14	cp2
LEAF_NODE	1854:19	1854:19	14	[
EXPR	1854:20	1854:20	14	2
FIELD	1854:20	1854:20	15	2
LEAF_NODE	1854:20	1854:20	16	2
LEAF_NODE	1854:21	1854:21	14	]
LEAF_NODE	1854:22	1854:22	12	,
ARGUMENT	1854:24	1854:24	12	pp [ 10 ]
FIELD	1854:24	1854:29	13	pp [ 10 ]
LEAF_NODE	1854:24	1854:24	14	pp
LEAF_NODE	1854:26	1854:26	14	[
EXPR	1854:27	1854:27	14	10
FIELD	1854:27	1854:27	15	10
LEAF_NODE	1854:27	1854:27	16	10
LEAF_NODE	1854:29	1854:29	14	]
LEAF_NODE	1854:30	1854:30	12	)
LEAF_NODE	1854:31	1854:31	10	;
EXPR_STATEMENT	1855:5	1855:31	9	YCbCrtoRGB ( cp2 [ 3 ] , pp [ 11 ] ) ;
EXPR	1855:5	1855:5	10	YCbCrtoRGB ( cp2 [ 3 ] , pp [ 11 ] )
FUNCTION_CALL	1855:5	1855:30	11	YCbCrtoRGB ( cp2 [ 3 ] , pp [ 11 ] )
CALLEE	1855:5	1855:5	12	YCbCrtoRGB
LEAF_NODE	1855:5	1855:5	13	YCbCrtoRGB
LEAF_NODE	1855:15	1855:15	12	(
ARGUMENT	1855:16	1855:16	12	cp2 [ 3 ]
FIELD	1855:16	1855:21	13	cp2 [ 3 ]
LEAF_NODE	1855:16	1855:16	14	cp2
LEAF_NODE	1855:19	1855:19	14	[
EXPR	1855:20	1855:20	14	3
FIELD	1855:20	1855:20	15	3
LEAF_NODE	1855:20	1855:20	16	3
LEAF_NODE	1855:21	1855:21	14	]
LEAF_NODE	1855:22	1855:22	12	,
ARGUMENT	1855:24	1855:24	12	pp [ 11 ]
FIELD	1855:24	1855:29	13	pp [ 11 ]
LEAF_NODE	1855:24	1855:24	14	pp
LEAF_NODE	1855:26	1855:26	14	[
EXPR	1855:27	1855:27	14	11
FIELD	1855:27	1855:27	15	11
LEAF_NODE	1855:27	1855:27	16	11
LEAF_NODE	1855:29	1855:29	14	]
LEAF_NODE	1855:30	1855:30	12	)
LEAF_NODE	1855:31	1855:31	10	;
EXPR_STATEMENT	1856:5	1856:31	9	YCbCrtoRGB ( cp3 [ 0 ] , pp [ 12 ] ) ;
EXPR	1856:5	1856:5	10	YCbCrtoRGB ( cp3 [ 0 ] , pp [ 12 ] )
FUNCTION_CALL	1856:5	1856:30	11	YCbCrtoRGB ( cp3 [ 0 ] , pp [ 12 ] )
CALLEE	1856:5	1856:5	12	YCbCrtoRGB
LEAF_NODE	1856:5	1856:5	13	YCbCrtoRGB
LEAF_NODE	1856:15	1856:15	12	(
ARGUMENT	1856:16	1856:16	12	cp3 [ 0 ]
FIELD	1856:16	1856:21	13	cp3 [ 0 ]
LEAF_NODE	1856:16	1856:16	14	cp3
LEAF_NODE	1856:19	1856:19	14	[
EXPR	1856:20	1856:20	14	0
FIELD	1856:20	1856:20	15	0
LEAF_NODE	1856:20	1856:20	16	0
LEAF_NODE	1856:21	1856:21	14	]
LEAF_NODE	1856:22	1856:22	12	,
ARGUMENT	1856:24	1856:24	12	pp [ 12 ]
FIELD	1856:24	1856:29	13	pp [ 12 ]
LEAF_NODE	1856:24	1856:24	14	pp
LEAF_NODE	1856:26	1856:26	14	[
EXPR	1856:27	1856:27	14	12
FIELD	1856:27	1856:27	15	12
LEAF_NODE	1856:27	1856:27	16	12
LEAF_NODE	1856:29	1856:29	14	]
LEAF_NODE	1856:30	1856:30	12	)
LEAF_NODE	1856:31	1856:31	10	;
EXPR_STATEMENT	1857:5	1857:31	9	YCbCrtoRGB ( cp3 [ 1 ] , pp [ 13 ] ) ;
EXPR	1857:5	1857:5	10	YCbCrtoRGB ( cp3 [ 1 ] , pp [ 13 ] )
FUNCTION_CALL	1857:5	1857:30	11	YCbCrtoRGB ( cp3 [ 1 ] , pp [ 13 ] )
CALLEE	1857:5	1857:5	12	YCbCrtoRGB
LEAF_NODE	1857:5	1857:5	13	YCbCrtoRGB
LEAF_NODE	1857:15	1857:15	12	(
ARGUMENT	1857:16	1857:16	12	cp3 [ 1 ]
FIELD	1857:16	1857:21	13	cp3 [ 1 ]
LEAF_NODE	1857:16	1857:16	14	cp3
LEAF_NODE	1857:19	1857:19	14	[
EXPR	1857:20	1857:20	14	1
FIELD	1857:20	1857:20	15	1
LEAF_NODE	1857:20	1857:20	16	1
LEAF_NODE	1857:21	1857:21	14	]
LEAF_NODE	1857:22	1857:22	12	,
ARGUMENT	1857:24	1857:24	12	pp [ 13 ]
FIELD	1857:24	1857:29	13	pp [ 13 ]
LEAF_NODE	1857:24	1857:24	14	pp
LEAF_NODE	1857:26	1857:26	14	[
EXPR	1857:27	1857:27	14	13
FIELD	1857:27	1857:27	15	13
LEAF_NODE	1857:27	1857:27	16	13
LEAF_NODE	1857:29	1857:29	14	]
LEAF_NODE	1857:30	1857:30	12	)
LEAF_NODE	1857:31	1857:31	10	;
EXPR_STATEMENT	1858:5	1858:31	9	YCbCrtoRGB ( cp3 [ 2 ] , pp [ 14 ] ) ;
EXPR	1858:5	1858:5	10	YCbCrtoRGB ( cp3 [ 2 ] , pp [ 14 ] )
FUNCTION_CALL	1858:5	1858:30	11	YCbCrtoRGB ( cp3 [ 2 ] , pp [ 14 ] )
CALLEE	1858:5	1858:5	12	YCbCrtoRGB
LEAF_NODE	1858:5	1858:5	13	YCbCrtoRGB
LEAF_NODE	1858:15	1858:15	12	(
ARGUMENT	1858:16	1858:16	12	cp3 [ 2 ]
FIELD	1858:16	1858:21	13	cp3 [ 2 ]
LEAF_NODE	1858:16	1858:16	14	cp3
LEAF_NODE	1858:19	1858:19	14	[
EXPR	1858:20	1858:20	14	2
FIELD	1858:20	1858:20	15	2
LEAF_NODE	1858:20	1858:20	16	2
LEAF_NODE	1858:21	1858:21	14	]
LEAF_NODE	1858:22	1858:22	12	,
ARGUMENT	1858:24	1858:24	12	pp [ 14 ]
FIELD	1858:24	1858:29	13	pp [ 14 ]
LEAF_NODE	1858:24	1858:24	14	pp
LEAF_NODE	1858:26	1858:26	14	[
EXPR	1858:27	1858:27	14	14
FIELD	1858:27	1858:27	15	14
LEAF_NODE	1858:27	1858:27	16	14
LEAF_NODE	1858:29	1858:29	14	]
LEAF_NODE	1858:30	1858:30	12	)
LEAF_NODE	1858:31	1858:31	10	;
EXPR_STATEMENT	1859:5	1859:31	9	YCbCrtoRGB ( cp3 [ 3 ] , pp [ 15 ] ) ;
EXPR	1859:5	1859:5	10	YCbCrtoRGB ( cp3 [ 3 ] , pp [ 15 ] )
FUNCTION_CALL	1859:5	1859:30	11	YCbCrtoRGB ( cp3 [ 3 ] , pp [ 15 ] )
CALLEE	1859:5	1859:5	12	YCbCrtoRGB
LEAF_NODE	1859:5	1859:5	13	YCbCrtoRGB
LEAF_NODE	1859:15	1859:15	12	(
ARGUMENT	1859:16	1859:16	12	cp3 [ 3 ]
FIELD	1859:16	1859:21	13	cp3 [ 3 ]
LEAF_NODE	1859:16	1859:16	14	cp3
LEAF_NODE	1859:19	1859:19	14	[
EXPR	1859:20	1859:20	14	3
FIELD	1859:20	1859:20	15	3
LEAF_NODE	1859:20	1859:20	16	3
LEAF_NODE	1859:21	1859:21	14	]
LEAF_NODE	1859:22	1859:22	12	,
ARGUMENT	1859:24	1859:24	12	pp [ 15 ]
FIELD	1859:24	1859:29	13	pp [ 15 ]
LEAF_NODE	1859:24	1859:24	14	pp
LEAF_NODE	1859:26	1859:26	14	[
EXPR	1859:27	1859:27	14	15
FIELD	1859:27	1859:27	15	15
LEAF_NODE	1859:27	1859:27	16	15
LEAF_NODE	1859:29	1859:29	14	]
LEAF_NODE	1859:30	1859:30	12	)
LEAF_NODE	1859:31	1859:31	10	;
LEAF_NODE	1861:5	1861:5	9	cp
LEAF_NODE	1861:8	1861:8	9	+=
LEAF_NODE	1861:11	1861:11	9	4
LEAF_NODE	1861:12	1861:12	9	,
LEAF_NODE	1861:14	1861:14	9	cp1
LEAF_NODE	1861:18	1861:18	9	+=
LEAF_NODE	1861:21	1861:21	9	4
LEAF_NODE	1861:22	1861:22	9	,
EXPR_STATEMENT	1861:24	1861:42	9	cp2 += 4 , cp3 += 4 ;
EXPR	1861:24	1861:34	10	cp2 += 4 , cp3 += 4
ASSIGN	1861:24	1861:31	11	cp2 += 4
LVAL	1861:24	1861:24	12	cp2
FIELD	1861:24	1861:24	13	cp2
LEAF_NODE	1861:24	1861:24	14	cp2
ASSIGN_OP	1861:28	1861:28	12	+=
LEAF_NODE	1861:28	1861:28	13	+=
RVAL	1861:31	1861:31	12	4
FIELD	1861:31	1861:31	13	4
LEAF_NODE	1861:31	1861:31	14	4
LEAF_NODE	1861:32	1861:32	11	,
ASSIGN	1861:34	1861:41	11	cp3 += 4
LVAL	1861:34	1861:34	12	cp3
FIELD	1861:34	1861:34	13	cp3
LEAF_NODE	1861:34	1861:34	14	cp3
ASSIGN_OP	1861:38	1861:38	12	+=
LEAF_NODE	1861:38	1861:38	13	+=
RVAL	1861:41	1861:41	12	4
FIELD	1861:41	1861:41	13	4
LEAF_NODE	1861:41	1861:41	14	4
LEAF_NODE	1861:42	1861:42	10	;
EXPR_STATEMENT	1862:5	1862:13	9	pp += 18 ;
EXPR	1862:5	1862:5	10	pp += 18
ASSIGN	1862:5	1862:11	11	pp += 18
LVAL	1862:5	1862:5	12	pp
FIELD	1862:5	1862:5	13	pp
LEAF_NODE	1862:5	1862:5	14	pp
ASSIGN_OP	1862:8	1862:8	12	+=
LEAF_NODE	1862:8	1862:8	13	+=
RVAL	1862:11	1862:11	12	18
FIELD	1862:11	1862:11	13	18
LEAF_NODE	1862:11	1862:11	14	18
LEAF_NODE	1862:13	1862:13	10	;
LEAF_NODE	1863:1	1863:1	8	}
LEAF_NODE	1863:14	1863:14	6	;
LEAF_NODE	1864:1	1864:1	6	cp
LEAF_NODE	1864:4	1864:4	6	+=
LEAF_NODE	1864:7	1864:7	6	incr
LEAF_NODE	1864:11	1864:11	6	,
LEAF_NODE	1864:13	1864:13	6	cp1
LEAF_NODE	1864:17	1864:17	6	+=
LEAF_NODE	1864:20	1864:20	6	incr
LEAF_NODE	1864:24	1864:24	6	,
EXPR_STATEMENT	1864:26	1864:50	6	cp2 += incr , cp3 += incr ;
EXPR	1864:26	1864:39	7	cp2 += incr , cp3 += incr
ASSIGN	1864:26	1864:33	8	cp2 += incr
LVAL	1864:26	1864:26	9	cp2
FIELD	1864:26	1864:26	10	cp2
LEAF_NODE	1864:26	1864:26	11	cp2
ASSIGN_OP	1864:30	1864:30	9	+=
LEAF_NODE	1864:30	1864:30	10	+=
RVAL	1864:33	1864:33	9	incr
FIELD	1864:33	1864:33	10	incr
LEAF_NODE	1864:33	1864:33	11	incr
LEAF_NODE	1864:37	1864:37	8	,
ASSIGN	1864:39	1864:46	8	cp3 += incr
LVAL	1864:39	1864:39	9	cp3
FIELD	1864:39	1864:39	10	cp3
LEAF_NODE	1864:39	1864:39	11	cp3
ASSIGN_OP	1864:43	1864:43	9	+=
LEAF_NODE	1864:43	1864:43	10	+=
RVAL	1864:46	1864:46	9	incr
FIELD	1864:46	1864:46	10	incr
LEAF_NODE	1864:46	1864:46	11	incr
LEAF_NODE	1864:50	1864:50	7	;
EXPR_STATEMENT	1865:1	1865:15	6	pp += fromskew ;
EXPR	1865:1	1865:1	7	pp += fromskew
ASSIGN	1865:1	1865:7	8	pp += fromskew
LVAL	1865:1	1865:1	9	pp
FIELD	1865:1	1865:1	10	pp
LEAF_NODE	1865:1	1865:1	11	pp
ASSIGN_OP	1865:4	1865:4	9	+=
LEAF_NODE	1865:4	1865:4	10	+=
RVAL	1865:7	1865:7	9	fromskew
FIELD	1865:7	1865:7	10	fromskew
LEAF_NODE	1865:7	1865:7	11	fromskew
LEAF_NODE	1865:15	1865:15	7	;
LEAF_NODE	1866:4	1866:4	5	}
LEAF_NODE	1867:0	1867:0	2	}
FUNCTION_DEF	0:0	1974:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1873:0	1873:0	2	DECLAREContigPutFunc
LEAF_NODE	1873:0	1873:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1873:20	1873:45	2	( putcontig8bitYCbCr44tile )
LEAF_NODE	1873:20	1873:20	3	(
PARAMETER_DECL	1873:21	1873:21	3	putcontig8bitYCbCr44tile
LEAF_NODE	1873:21	1873:21	4	putcontig8bitYCbCr44tile
LEAF_NODE	1873:45	1873:45	3	)
LEAF_NODE	1874:0	1874:0	2	{
STATEMENTS	1875:4	1919:6	2	
SIMPLE_DECL	1875:4	1875:29	3	uint32 * cp1 ; cp1 = cp + w + toskew ;
VAR_DECL	1875:4	1875:12	4	uint32 * cp1 ; cp1 = cp + w + toskew
TYPE	1875:4	1875:10	5	uint32 *
TYPE_NAME	1875:4	1875:4	6	uint32
LEAF_NODE	1875:4	1875:4	7	uint32
POINTER	1875:10	1875:10	6	*
LEAF_NODE	1875:10	1875:10	7	*
NAME	1875:12	1875:12	5	cp1
LEAF_NODE	1875:12	1875:12	6	cp1
LEAF_NODE	0:0	0:0	5	;
INIT	1875:12	1875:12	5	cp1 = cp + w + toskew
ASSIGN	1875:12	1875:18	6	cp1 = cp + w + toskew
LVAL	1875:12	1875:12	7	cp1
NAME	1875:12	1875:12	8	cp1
LEAF_NODE	1875:12	1875:12	9	cp1
ASSIGN_OP	1875:16	1875:16	7	=
LEAF_NODE	1875:16	1875:16	8	=
RVAL	1875:18	1875:23	7	cp + w + toskew
FIELD	1875:18	1875:18	8	cp
LEAF_NODE	1875:18	1875:18	9	cp
LEAF_NODE	1875:20	1875:20	8	+
FIELD	1875:21	1875:21	8	w
LEAF_NODE	1875:21	1875:21	9	w
LEAF_NODE	1875:22	1875:22	8	+
FIELD	1875:23	1875:23	8	toskew
LEAF_NODE	1875:23	1875:23	9	toskew
LEAF_NODE	1875:29	1875:29	4	;
SIMPLE_DECL	1876:4	1876:30	3	uint32 * cp2 ; cp2 = cp1 + w + toskew ;
VAR_DECL	1876:4	1876:12	4	uint32 * cp2 ; cp2 = cp1 + w + toskew
TYPE	1876:4	1876:10	5	uint32 *
TYPE_NAME	1876:4	1876:4	6	uint32
LEAF_NODE	1876:4	1876:4	7	uint32
POINTER	1876:10	1876:10	6	*
LEAF_NODE	1876:10	1876:10	7	*
NAME	1876:12	1876:12	5	cp2
LEAF_NODE	1876:12	1876:12	6	cp2
LEAF_NODE	0:0	0:0	5	;
INIT	1876:12	1876:12	5	cp2 = cp1 + w + toskew
ASSIGN	1876:12	1876:18	6	cp2 = cp1 + w + toskew
LVAL	1876:12	1876:12	7	cp2
NAME	1876:12	1876:12	8	cp2
LEAF_NODE	1876:12	1876:12	9	cp2
ASSIGN_OP	1876:16	1876:16	7	=
LEAF_NODE	1876:16	1876:16	8	=
RVAL	1876:18	1876:24	7	cp1 + w + toskew
FIELD	1876:18	1876:18	8	cp1
LEAF_NODE	1876:18	1876:18	9	cp1
LEAF_NODE	1876:21	1876:21	8	+
FIELD	1876:22	1876:22	8	w
LEAF_NODE	1876:22	1876:22	9	w
LEAF_NODE	1876:23	1876:23	8	+
FIELD	1876:24	1876:24	8	toskew
LEAF_NODE	1876:24	1876:24	9	toskew
LEAF_NODE	1876:30	1876:30	4	;
SIMPLE_DECL	1877:4	1877:30	3	uint32 * cp3 ; cp3 = cp2 + w + toskew ;
VAR_DECL	1877:4	1877:12	4	uint32 * cp3 ; cp3 = cp2 + w + toskew
TYPE	1877:4	1877:10	5	uint32 *
TYPE_NAME	1877:4	1877:4	6	uint32
LEAF_NODE	1877:4	1877:4	7	uint32
POINTER	1877:10	1877:10	6	*
LEAF_NODE	1877:10	1877:10	7	*
NAME	1877:12	1877:12	5	cp3
LEAF_NODE	1877:12	1877:12	6	cp3
LEAF_NODE	0:0	0:0	5	;
INIT	1877:12	1877:12	5	cp3 = cp2 + w + toskew
ASSIGN	1877:12	1877:18	6	cp3 = cp2 + w + toskew
LVAL	1877:12	1877:12	7	cp3
NAME	1877:12	1877:12	8	cp3
LEAF_NODE	1877:12	1877:12	9	cp3
ASSIGN_OP	1877:16	1877:16	7	=
LEAF_NODE	1877:16	1877:16	8	=
RVAL	1877:18	1877:24	7	cp2 + w + toskew
FIELD	1877:18	1877:18	8	cp2
LEAF_NODE	1877:18	1877:18	9	cp2
LEAF_NODE	1877:21	1877:21	8	+
FIELD	1877:22	1877:22	8	w
LEAF_NODE	1877:22	1877:22	9	w
LEAF_NODE	1877:23	1877:23	8	+
FIELD	1877:24	1877:24	8	toskew
LEAF_NODE	1877:24	1877:24	9	toskew
LEAF_NODE	1877:30	1877:30	4	;
SIMPLE_DECL	1878:4	1878:29	3	int32 incr ; incr = 3 * w + 4 * toskew ;
VAR_DECL	1878:4	1878:10	4	int32 incr ; incr = 3 * w + 4 * toskew
TYPE	1878:4	1878:4	5	int32
TYPE_NAME	1878:4	1878:4	6	int32
LEAF_NODE	1878:4	1878:4	7	int32
NAME	1878:10	1878:10	5	incr
LEAF_NODE	1878:10	1878:10	6	incr
LEAF_NODE	0:0	0:0	5	;
INIT	1878:10	1878:10	5	incr = 3 * w + 4 * toskew
ASSIGN	1878:10	1878:17	6	incr = 3 * w + 4 * toskew
LVAL	1878:10	1878:10	7	incr
NAME	1878:10	1878:10	8	incr
LEAF_NODE	1878:10	1878:10	9	incr
ASSIGN_OP	1878:15	1878:15	7	=
LEAF_NODE	1878:15	1878:15	8	=
RVAL	1878:17	1878:23	7	3 * w + 4 * toskew
FIELD	1878:17	1878:17	8	3
LEAF_NODE	1878:17	1878:17	9	3
LEAF_NODE	1878:18	1878:18	8	*
FIELD	1878:19	1878:19	8	w
LEAF_NODE	1878:19	1878:19	9	w
LEAF_NODE	1878:20	1878:20	8	+
FIELD	1878:21	1878:21	8	4
LEAF_NODE	1878:21	1878:21	9	4
LEAF_NODE	1878:22	1878:22	8	*
FIELD	1878:23	1878:23	8	toskew
LEAF_NODE	1878:23	1878:23	9	toskew
LEAF_NODE	1878:29	1878:29	4	;
EXPR_STATEMENT	1880:4	1880:12	3	( void ) y ;
EXPR	1880:4	1880:11	4	( void ) y
LEAF_NODE	1880:4	1880:4	5	(
TYPE_NAME	1880:5	1880:5	5	void
LEAF_NODE	1880:5	1880:5	6	void
LEAF_NODE	1880:9	1880:9	5	)
FIELD	1880:11	1880:11	5	y
LEAF_NODE	1880:11	1880:11	6	y
LEAF_NODE	1880:12	1880:12	4	;
EXPR_STATEMENT	1882:4	1882:39	3	fromskew = ( fromskew / 4 ) * ( 4 * 2 + 2 ) ;
EXPR	1882:4	1882:4	4	fromskew = ( fromskew / 4 ) * ( 4 * 2 + 2 )
ASSIGN	1882:4	1882:15	5	fromskew = ( fromskew / 4 ) * ( 4 * 2 + 2 )
LVAL	1882:4	1882:4	6	fromskew
FIELD	1882:4	1882:4	7	fromskew
LEAF_NODE	1882:4	1882:4	8	fromskew
ASSIGN_OP	1882:13	1882:13	6	=
LEAF_NODE	1882:13	1882:13	7	=
RVAL	1882:15	1882:38	6	( fromskew / 4 ) * ( 4 * 2 + 2 )
LEAF_NODE	1882:15	1882:15	7	(
FIELD	1882:16	1882:16	7	fromskew
LEAF_NODE	1882:16	1882:16	8	fromskew
LEAF_NODE	1882:25	1882:25	7	/
FIELD	1882:27	1882:27	7	4
LEAF_NODE	1882:27	1882:27	8	4
LEAF_NODE	1882:28	1882:28	7	)
LEAF_NODE	1882:30	1882:30	7	*
LEAF_NODE	1882:32	1882:32	7	(
FIELD	1882:33	1882:33	7	4
LEAF_NODE	1882:33	1882:33	8	4
LEAF_NODE	1882:34	1882:34	7	*
FIELD	1882:35	1882:35	7	2
LEAF_NODE	1882:35	1882:35	8	2
LEAF_NODE	1882:36	1882:36	7	+
FIELD	1882:37	1882:37	7	2
LEAF_NODE	1882:37	1882:37	8	2
LEAF_NODE	1882:38	1882:38	7	)
LEAF_NODE	1882:39	1882:39	4	;
SELECTION	1883:4	1883:38	3	
KEYWORD	1883:4	1883:4	4	if
LEAF_NODE	1883:4	1883:4	5	if
LEAF_NODE	1883:7	1883:7	4	(
CONDITION	1883:8	1883:8	4	( h & 3 ) == 0 && ( w & 3 ) == 0
EXPR	1883:8	1883:8	5	( h & 3 ) == 0 && ( w & 3 ) == 0
AND	1883:8	1883:24	6	( h & 3 ) == 0 && ( w & 3 ) == 0
EXPR	1883:8	1883:19	7	( h & 3 ) == 0
LEAF_NODE	1883:8	1883:8	8	(
FIELD	1883:9	1883:9	8	h
LEAF_NODE	1883:9	1883:9	9	h
LEAF_NODE	1883:11	1883:11	8	&
FIELD	1883:13	1883:13	8	3
LEAF_NODE	1883:13	1883:13	9	3
LEAF_NODE	1883:14	1883:14	8	)
EQ_OPERATOR	1883:16	1883:16	8	==
LEAF_NODE	1883:16	1883:16	9	==
FIELD	1883:19	1883:19	8	0
LEAF_NODE	1883:19	1883:19	9	0
LEAF_NODE	1883:21	1883:21	7	&&
EXPR	1883:24	1883:35	7	( w & 3 ) == 0
LEAF_NODE	1883:24	1883:24	8	(
FIELD	1883:25	1883:25	8	w
LEAF_NODE	1883:25	1883:25	9	w
LEAF_NODE	1883:27	1883:27	8	&
FIELD	1883:29	1883:29	8	3
LEAF_NODE	1883:29	1883:29	9	3
LEAF_NODE	1883:30	1883:30	8	)
EQ_OPERATOR	1883:32	1883:32	8	==
LEAF_NODE	1883:32	1883:32	9	==
FIELD	1883:35	1883:35	8	0
LEAF_NODE	1883:35	1883:35	9	0
LEAF_NODE	1883:36	1883:36	4	)
STATEMENTS	1883:38	1919:4	4	
LEAF_NODE	1883:38	1883:38	5	{
STATEMENTS	1884:8	1884:8	5	
ITERATION	1884:8	1884:31	6	
KEYWORD	1884:8	1884:8	7	for
LEAF_NODE	1884:8	1884:8	8	for
LEAF_NODE	1884:12	1884:12	7	(
FOR_INIT	1884:13	1884:13	7	;
LEAF_NODE	1884:13	1884:13	8	;
CONDITION	1884:15	1884:15	7	h >= 4
EXPR	1884:15	1884:20	8	h >= 4
FIELD	1884:15	1884:15	9	h
LEAF_NODE	1884:15	1884:15	10	h
REL_OPERATOR	1884:17	1884:17	9	>=
LEAF_NODE	1884:17	1884:17	10	>=
FIELD	1884:20	1884:20	9	4
LEAF_NODE	1884:20	1884:20	10	4
LEAF_NODE	1884:21	1884:21	7	;
FOR_EXPR	1884:23	1884:23	7	h -= 4
EXPR	1884:23	1884:23	8	h -= 4
ASSIGN	1884:23	1884:28	9	h -= 4
LVAL	1884:23	1884:23	10	h
FIELD	1884:23	1884:23	11	h
LEAF_NODE	1884:23	1884:23	12	h
ASSIGN_OP	1884:25	1884:25	10	-=
LEAF_NODE	1884:25	1884:25	11	-=
RVAL	1884:28	1884:28	10	4
FIELD	1884:28	1884:28	11	4
LEAF_NODE	1884:28	1884:28	12	4
LEAF_NODE	1884:29	1884:29	7	)
STATEMENTS	1884:31	1918:8	7	
LEAF_NODE	1884:31	1884:31	8	{
STATEMENTS	1885:12	1917:12	8	
EXPR_STATEMENT	1885:12	1885:20	9	x = w >> 2 ;
EXPR	1885:12	1885:12	10	x = w >> 2
ASSIGN	1885:12	1885:16	11	x = w >> 2
LVAL	1885:12	1885:12	12	x
FIELD	1885:12	1885:12	13	x
LEAF_NODE	1885:12	1885:12	14	x
ASSIGN_OP	1885:14	1885:14	12	=
LEAF_NODE	1885:14	1885:14	13	=
RVAL	1885:16	1885:19	12	w >> 2
FIELD	1885:16	1885:16	13	w
LEAF_NODE	1885:16	1885:16	14	w
LEAF_NODE	1885:17	1885:17	13	>>
FIELD	1885:19	1885:19	13	2
LEAF_NODE	1885:19	1885:19	14	2
LEAF_NODE	1885:20	1885:20	10	;
ITERATION	1886:12	1886:15	9	
KEYWORD	1886:12	1886:12	10	do
LEAF_NODE	1886:12	1886:12	11	do
LEAF_NODE	1912:20	1912:20	10	(
CONDITION	1912:21	1912:21	10	-- x
EXPR	1912:21	1912:23	11	-- x
LEAF_NODE	1912:21	1912:21	12	--
FIELD	1912:23	1912:23	12	x
LEAF_NODE	1912:23	1912:23	13	x
LEAF_NODE	1912:24	1912:24	10	)
STATEMENTS	1886:15	1912:12	10	
LEAF_NODE	1886:15	1886:15	11	{
STATEMENTS	1887:16	1911:16	11	
SIMPLE_DECL	1887:16	1887:33	12	int32 Cb ; Cb = pp [ 16 ] ;
VAR_DECL	1887:16	1887:22	13	int32 Cb ; Cb = pp [ 16 ]
TYPE	1887:16	1887:16	14	int32
TYPE_NAME	1887:16	1887:16	15	int32
LEAF_NODE	1887:16	1887:16	16	int32
NAME	1887:22	1887:22	14	Cb
LEAF_NODE	1887:22	1887:22	15	Cb
LEAF_NODE	0:0	0:0	14	;
INIT	1887:22	1887:22	14	Cb = pp [ 16 ]
ASSIGN	1887:22	1887:27	15	Cb = pp [ 16 ]
LVAL	1887:22	1887:22	16	Cb
NAME	1887:22	1887:22	17	Cb
LEAF_NODE	1887:22	1887:22	18	Cb
ASSIGN_OP	1887:25	1887:25	16	=
LEAF_NODE	1887:25	1887:25	17	=
RVAL	1887:27	1887:27	16	pp [ 16 ]
FIELD	1887:27	1887:32	17	pp [ 16 ]
LEAF_NODE	1887:27	1887:27	18	pp
LEAF_NODE	1887:29	1887:29	18	[
EXPR	1887:30	1887:30	18	16
FIELD	1887:30	1887:30	19	16
LEAF_NODE	1887:30	1887:30	20	16
LEAF_NODE	1887:32	1887:32	18	]
LEAF_NODE	1887:33	1887:33	13	;
SIMPLE_DECL	1888:16	1888:33	12	int32 Cr ; Cr = pp [ 17 ] ;
VAR_DECL	1888:16	1888:22	13	int32 Cr ; Cr = pp [ 17 ]
TYPE	1888:16	1888:16	14	int32
TYPE_NAME	1888:16	1888:16	15	int32
LEAF_NODE	1888:16	1888:16	16	int32
NAME	1888:22	1888:22	14	Cr
LEAF_NODE	1888:22	1888:22	15	Cr
LEAF_NODE	0:0	0:0	14	;
INIT	1888:22	1888:22	14	Cr = pp [ 17 ]
ASSIGN	1888:22	1888:27	15	Cr = pp [ 17 ]
LVAL	1888:22	1888:22	16	Cr
NAME	1888:22	1888:22	17	Cr
LEAF_NODE	1888:22	1888:22	18	Cr
ASSIGN_OP	1888:25	1888:25	16	=
LEAF_NODE	1888:25	1888:25	17	=
RVAL	1888:27	1888:27	16	pp [ 17 ]
FIELD	1888:27	1888:32	17	pp [ 17 ]
LEAF_NODE	1888:27	1888:27	18	pp
LEAF_NODE	1888:29	1888:29	18	[
EXPR	1888:30	1888:30	18	17
FIELD	1888:30	1888:30	19	17
LEAF_NODE	1888:30	1888:30	20	17
LEAF_NODE	1888:32	1888:32	18	]
LEAF_NODE	1888:33	1888:33	13	;
EXPR_STATEMENT	1890:16	1890:42	12	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	1890:16	1890:16	13	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	1890:16	1890:41	14	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	1890:16	1890:16	15	YCbCrtoRGB
LEAF_NODE	1890:16	1890:16	16	YCbCrtoRGB
LEAF_NODE	1890:26	1890:26	15	(
ARGUMENT	1890:27	1890:27	15	cp [ 0 ]
FIELD	1890:27	1890:32	16	cp [ 0 ]
LEAF_NODE	1890:27	1890:27	17	cp
LEAF_NODE	1890:30	1890:30	17	[
EXPR	1890:31	1890:31	17	0
FIELD	1890:31	1890:31	18	0
LEAF_NODE	1890:31	1890:31	19	0
LEAF_NODE	1890:32	1890:32	17	]
LEAF_NODE	1890:33	1890:33	15	,
ARGUMENT	1890:35	1890:35	15	pp [ 0 ]
FIELD	1890:35	1890:40	16	pp [ 0 ]
LEAF_NODE	1890:35	1890:35	17	pp
LEAF_NODE	1890:37	1890:37	17	[
EXPR	1890:39	1890:39	17	0
FIELD	1890:39	1890:39	18	0
LEAF_NODE	1890:39	1890:39	19	0
LEAF_NODE	1890:40	1890:40	17	]
LEAF_NODE	1890:41	1890:41	15	)
LEAF_NODE	1890:42	1890:42	13	;
EXPR_STATEMENT	1891:16	1891:42	12	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] ) ;
EXPR	1891:16	1891:16	13	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
FUNCTION_CALL	1891:16	1891:41	14	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
CALLEE	1891:16	1891:16	15	YCbCrtoRGB
LEAF_NODE	1891:16	1891:16	16	YCbCrtoRGB
LEAF_NODE	1891:26	1891:26	15	(
ARGUMENT	1891:27	1891:27	15	cp [ 1 ]
FIELD	1891:27	1891:32	16	cp [ 1 ]
LEAF_NODE	1891:27	1891:27	17	cp
LEAF_NODE	1891:30	1891:30	17	[
EXPR	1891:31	1891:31	17	1
FIELD	1891:31	1891:31	18	1
LEAF_NODE	1891:31	1891:31	19	1
LEAF_NODE	1891:32	1891:32	17	]
LEAF_NODE	1891:33	1891:33	15	,
ARGUMENT	1891:35	1891:35	15	pp [ 1 ]
FIELD	1891:35	1891:40	16	pp [ 1 ]
LEAF_NODE	1891:35	1891:35	17	pp
LEAF_NODE	1891:37	1891:37	17	[
EXPR	1891:39	1891:39	17	1
FIELD	1891:39	1891:39	18	1
LEAF_NODE	1891:39	1891:39	19	1
LEAF_NODE	1891:40	1891:40	17	]
LEAF_NODE	1891:41	1891:41	15	)
LEAF_NODE	1891:42	1891:42	13	;
EXPR_STATEMENT	1892:16	1892:42	12	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] ) ;
EXPR	1892:16	1892:16	13	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
FUNCTION_CALL	1892:16	1892:41	14	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
CALLEE	1892:16	1892:16	15	YCbCrtoRGB
LEAF_NODE	1892:16	1892:16	16	YCbCrtoRGB
LEAF_NODE	1892:26	1892:26	15	(
ARGUMENT	1892:27	1892:27	15	cp [ 2 ]
FIELD	1892:27	1892:32	16	cp [ 2 ]
LEAF_NODE	1892:27	1892:27	17	cp
LEAF_NODE	1892:30	1892:30	17	[
EXPR	1892:31	1892:31	17	2
FIELD	1892:31	1892:31	18	2
LEAF_NODE	1892:31	1892:31	19	2
LEAF_NODE	1892:32	1892:32	17	]
LEAF_NODE	1892:33	1892:33	15	,
ARGUMENT	1892:35	1892:35	15	pp [ 2 ]
FIELD	1892:35	1892:40	16	pp [ 2 ]
LEAF_NODE	1892:35	1892:35	17	pp
LEAF_NODE	1892:37	1892:37	17	[
EXPR	1892:39	1892:39	17	2
FIELD	1892:39	1892:39	18	2
LEAF_NODE	1892:39	1892:39	19	2
LEAF_NODE	1892:40	1892:40	17	]
LEAF_NODE	1892:41	1892:41	15	)
LEAF_NODE	1892:42	1892:42	13	;
EXPR_STATEMENT	1893:16	1893:42	12	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] ) ;
EXPR	1893:16	1893:16	13	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
FUNCTION_CALL	1893:16	1893:41	14	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
CALLEE	1893:16	1893:16	15	YCbCrtoRGB
LEAF_NODE	1893:16	1893:16	16	YCbCrtoRGB
LEAF_NODE	1893:26	1893:26	15	(
ARGUMENT	1893:27	1893:27	15	cp [ 3 ]
FIELD	1893:27	1893:32	16	cp [ 3 ]
LEAF_NODE	1893:27	1893:27	17	cp
LEAF_NODE	1893:30	1893:30	17	[
EXPR	1893:31	1893:31	17	3
FIELD	1893:31	1893:31	18	3
LEAF_NODE	1893:31	1893:31	19	3
LEAF_NODE	1893:32	1893:32	17	]
LEAF_NODE	1893:33	1893:33	15	,
ARGUMENT	1893:35	1893:35	15	pp [ 3 ]
FIELD	1893:35	1893:40	16	pp [ 3 ]
LEAF_NODE	1893:35	1893:35	17	pp
LEAF_NODE	1893:37	1893:37	17	[
EXPR	1893:39	1893:39	17	3
FIELD	1893:39	1893:39	18	3
LEAF_NODE	1893:39	1893:39	19	3
LEAF_NODE	1893:40	1893:40	17	]
LEAF_NODE	1893:41	1893:41	15	)
LEAF_NODE	1893:42	1893:42	13	;
EXPR_STATEMENT	1894:16	1894:42	12	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] ) ;
EXPR	1894:16	1894:16	13	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] )
FUNCTION_CALL	1894:16	1894:41	14	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] )
CALLEE	1894:16	1894:16	15	YCbCrtoRGB
LEAF_NODE	1894:16	1894:16	16	YCbCrtoRGB
LEAF_NODE	1894:26	1894:26	15	(
ARGUMENT	1894:27	1894:27	15	cp1 [ 0 ]
FIELD	1894:27	1894:32	16	cp1 [ 0 ]
LEAF_NODE	1894:27	1894:27	17	cp1
LEAF_NODE	1894:30	1894:30	17	[
EXPR	1894:31	1894:31	17	0
FIELD	1894:31	1894:31	18	0
LEAF_NODE	1894:31	1894:31	19	0
LEAF_NODE	1894:32	1894:32	17	]
LEAF_NODE	1894:33	1894:33	15	,
ARGUMENT	1894:35	1894:35	15	pp [ 4 ]
FIELD	1894:35	1894:40	16	pp [ 4 ]
LEAF_NODE	1894:35	1894:35	17	pp
LEAF_NODE	1894:37	1894:37	17	[
EXPR	1894:39	1894:39	17	4
FIELD	1894:39	1894:39	18	4
LEAF_NODE	1894:39	1894:39	19	4
LEAF_NODE	1894:40	1894:40	17	]
LEAF_NODE	1894:41	1894:41	15	)
LEAF_NODE	1894:42	1894:42	13	;
EXPR_STATEMENT	1895:16	1895:42	12	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] ) ;
EXPR	1895:16	1895:16	13	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] )
FUNCTION_CALL	1895:16	1895:41	14	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] )
CALLEE	1895:16	1895:16	15	YCbCrtoRGB
LEAF_NODE	1895:16	1895:16	16	YCbCrtoRGB
LEAF_NODE	1895:26	1895:26	15	(
ARGUMENT	1895:27	1895:27	15	cp1 [ 1 ]
FIELD	1895:27	1895:32	16	cp1 [ 1 ]
LEAF_NODE	1895:27	1895:27	17	cp1
LEAF_NODE	1895:30	1895:30	17	[
EXPR	1895:31	1895:31	17	1
FIELD	1895:31	1895:31	18	1
LEAF_NODE	1895:31	1895:31	19	1
LEAF_NODE	1895:32	1895:32	17	]
LEAF_NODE	1895:33	1895:33	15	,
ARGUMENT	1895:35	1895:35	15	pp [ 5 ]
FIELD	1895:35	1895:40	16	pp [ 5 ]
LEAF_NODE	1895:35	1895:35	17	pp
LEAF_NODE	1895:37	1895:37	17	[
EXPR	1895:39	1895:39	17	5
FIELD	1895:39	1895:39	18	5
LEAF_NODE	1895:39	1895:39	19	5
LEAF_NODE	1895:40	1895:40	17	]
LEAF_NODE	1895:41	1895:41	15	)
LEAF_NODE	1895:42	1895:42	13	;
EXPR_STATEMENT	1896:16	1896:42	12	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] ) ;
EXPR	1896:16	1896:16	13	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] )
FUNCTION_CALL	1896:16	1896:41	14	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] )
CALLEE	1896:16	1896:16	15	YCbCrtoRGB
LEAF_NODE	1896:16	1896:16	16	YCbCrtoRGB
LEAF_NODE	1896:26	1896:26	15	(
ARGUMENT	1896:27	1896:27	15	cp1 [ 2 ]
FIELD	1896:27	1896:32	16	cp1 [ 2 ]
LEAF_NODE	1896:27	1896:27	17	cp1
LEAF_NODE	1896:30	1896:30	17	[
EXPR	1896:31	1896:31	17	2
FIELD	1896:31	1896:31	18	2
LEAF_NODE	1896:31	1896:31	19	2
LEAF_NODE	1896:32	1896:32	17	]
LEAF_NODE	1896:33	1896:33	15	,
ARGUMENT	1896:35	1896:35	15	pp [ 6 ]
FIELD	1896:35	1896:40	16	pp [ 6 ]
LEAF_NODE	1896:35	1896:35	17	pp
LEAF_NODE	1896:37	1896:37	17	[
EXPR	1896:39	1896:39	17	6
FIELD	1896:39	1896:39	18	6
LEAF_NODE	1896:39	1896:39	19	6
LEAF_NODE	1896:40	1896:40	17	]
LEAF_NODE	1896:41	1896:41	15	)
LEAF_NODE	1896:42	1896:42	13	;
EXPR_STATEMENT	1897:16	1897:42	12	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] ) ;
EXPR	1897:16	1897:16	13	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] )
FUNCTION_CALL	1897:16	1897:41	14	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] )
CALLEE	1897:16	1897:16	15	YCbCrtoRGB
LEAF_NODE	1897:16	1897:16	16	YCbCrtoRGB
LEAF_NODE	1897:26	1897:26	15	(
ARGUMENT	1897:27	1897:27	15	cp1 [ 3 ]
FIELD	1897:27	1897:32	16	cp1 [ 3 ]
LEAF_NODE	1897:27	1897:27	17	cp1
LEAF_NODE	1897:30	1897:30	17	[
EXPR	1897:31	1897:31	17	3
FIELD	1897:31	1897:31	18	3
LEAF_NODE	1897:31	1897:31	19	3
LEAF_NODE	1897:32	1897:32	17	]
LEAF_NODE	1897:33	1897:33	15	,
ARGUMENT	1897:35	1897:35	15	pp [ 7 ]
FIELD	1897:35	1897:40	16	pp [ 7 ]
LEAF_NODE	1897:35	1897:35	17	pp
LEAF_NODE	1897:37	1897:37	17	[
EXPR	1897:39	1897:39	17	7
FIELD	1897:39	1897:39	18	7
LEAF_NODE	1897:39	1897:39	19	7
LEAF_NODE	1897:40	1897:40	17	]
LEAF_NODE	1897:41	1897:41	15	)
LEAF_NODE	1897:42	1897:42	13	;
EXPR_STATEMENT	1898:16	1898:42	12	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 8 ] ) ;
EXPR	1898:16	1898:16	13	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 8 ] )
FUNCTION_CALL	1898:16	1898:41	14	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 8 ] )
CALLEE	1898:16	1898:16	15	YCbCrtoRGB
LEAF_NODE	1898:16	1898:16	16	YCbCrtoRGB
LEAF_NODE	1898:26	1898:26	15	(
ARGUMENT	1898:27	1898:27	15	cp2 [ 0 ]
FIELD	1898:27	1898:32	16	cp2 [ 0 ]
LEAF_NODE	1898:27	1898:27	17	cp2
LEAF_NODE	1898:30	1898:30	17	[
EXPR	1898:31	1898:31	17	0
FIELD	1898:31	1898:31	18	0
LEAF_NODE	1898:31	1898:31	19	0
LEAF_NODE	1898:32	1898:32	17	]
LEAF_NODE	1898:33	1898:33	15	,
ARGUMENT	1898:35	1898:35	15	pp [ 8 ]
FIELD	1898:35	1898:40	16	pp [ 8 ]
LEAF_NODE	1898:35	1898:35	17	pp
LEAF_NODE	1898:37	1898:37	17	[
EXPR	1898:39	1898:39	17	8
FIELD	1898:39	1898:39	18	8
LEAF_NODE	1898:39	1898:39	19	8
LEAF_NODE	1898:40	1898:40	17	]
LEAF_NODE	1898:41	1898:41	15	)
LEAF_NODE	1898:42	1898:42	13	;
EXPR_STATEMENT	1899:16	1899:42	12	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 9 ] ) ;
EXPR	1899:16	1899:16	13	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 9 ] )
FUNCTION_CALL	1899:16	1899:41	14	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 9 ] )
CALLEE	1899:16	1899:16	15	YCbCrtoRGB
LEAF_NODE	1899:16	1899:16	16	YCbCrtoRGB
LEAF_NODE	1899:26	1899:26	15	(
ARGUMENT	1899:27	1899:27	15	cp2 [ 1 ]
FIELD	1899:27	1899:32	16	cp2 [ 1 ]
LEAF_NODE	1899:27	1899:27	17	cp2
LEAF_NODE	1899:30	1899:30	17	[
EXPR	1899:31	1899:31	17	1
FIELD	1899:31	1899:31	18	1
LEAF_NODE	1899:31	1899:31	19	1
LEAF_NODE	1899:32	1899:32	17	]
LEAF_NODE	1899:33	1899:33	15	,
ARGUMENT	1899:35	1899:35	15	pp [ 9 ]
FIELD	1899:35	1899:40	16	pp [ 9 ]
LEAF_NODE	1899:35	1899:35	17	pp
LEAF_NODE	1899:37	1899:37	17	[
EXPR	1899:39	1899:39	17	9
FIELD	1899:39	1899:39	18	9
LEAF_NODE	1899:39	1899:39	19	9
LEAF_NODE	1899:40	1899:40	17	]
LEAF_NODE	1899:41	1899:41	15	)
LEAF_NODE	1899:42	1899:42	13	;
EXPR_STATEMENT	1900:16	1900:42	12	YCbCrtoRGB ( cp2 [ 2 ] , pp [ 10 ] ) ;
EXPR	1900:16	1900:16	13	YCbCrtoRGB ( cp2 [ 2 ] , pp [ 10 ] )
FUNCTION_CALL	1900:16	1900:41	14	YCbCrtoRGB ( cp2 [ 2 ] , pp [ 10 ] )
CALLEE	1900:16	1900:16	15	YCbCrtoRGB
LEAF_NODE	1900:16	1900:16	16	YCbCrtoRGB
LEAF_NODE	1900:26	1900:26	15	(
ARGUMENT	1900:27	1900:27	15	cp2 [ 2 ]
FIELD	1900:27	1900:32	16	cp2 [ 2 ]
LEAF_NODE	1900:27	1900:27	17	cp2
LEAF_NODE	1900:30	1900:30	17	[
EXPR	1900:31	1900:31	17	2
FIELD	1900:31	1900:31	18	2
LEAF_NODE	1900:31	1900:31	19	2
LEAF_NODE	1900:32	1900:32	17	]
LEAF_NODE	1900:33	1900:33	15	,
ARGUMENT	1900:35	1900:35	15	pp [ 10 ]
FIELD	1900:35	1900:40	16	pp [ 10 ]
LEAF_NODE	1900:35	1900:35	17	pp
LEAF_NODE	1900:37	1900:37	17	[
EXPR	1900:38	1900:38	17	10
FIELD	1900:38	1900:38	18	10
LEAF_NODE	1900:38	1900:38	19	10
LEAF_NODE	1900:40	1900:40	17	]
LEAF_NODE	1900:41	1900:41	15	)
LEAF_NODE	1900:42	1900:42	13	;
EXPR_STATEMENT	1901:16	1901:42	12	YCbCrtoRGB ( cp2 [ 3 ] , pp [ 11 ] ) ;
EXPR	1901:16	1901:16	13	YCbCrtoRGB ( cp2 [ 3 ] , pp [ 11 ] )
FUNCTION_CALL	1901:16	1901:41	14	YCbCrtoRGB ( cp2 [ 3 ] , pp [ 11 ] )
CALLEE	1901:16	1901:16	15	YCbCrtoRGB
LEAF_NODE	1901:16	1901:16	16	YCbCrtoRGB
LEAF_NODE	1901:26	1901:26	15	(
ARGUMENT	1901:27	1901:27	15	cp2 [ 3 ]
FIELD	1901:27	1901:32	16	cp2 [ 3 ]
LEAF_NODE	1901:27	1901:27	17	cp2
LEAF_NODE	1901:30	1901:30	17	[
EXPR	1901:31	1901:31	17	3
FIELD	1901:31	1901:31	18	3
LEAF_NODE	1901:31	1901:31	19	3
LEAF_NODE	1901:32	1901:32	17	]
LEAF_NODE	1901:33	1901:33	15	,
ARGUMENT	1901:35	1901:35	15	pp [ 11 ]
FIELD	1901:35	1901:40	16	pp [ 11 ]
LEAF_NODE	1901:35	1901:35	17	pp
LEAF_NODE	1901:37	1901:37	17	[
EXPR	1901:38	1901:38	17	11
FIELD	1901:38	1901:38	18	11
LEAF_NODE	1901:38	1901:38	19	11
LEAF_NODE	1901:40	1901:40	17	]
LEAF_NODE	1901:41	1901:41	15	)
LEAF_NODE	1901:42	1901:42	13	;
EXPR_STATEMENT	1902:16	1902:42	12	YCbCrtoRGB ( cp3 [ 0 ] , pp [ 12 ] ) ;
EXPR	1902:16	1902:16	13	YCbCrtoRGB ( cp3 [ 0 ] , pp [ 12 ] )
FUNCTION_CALL	1902:16	1902:41	14	YCbCrtoRGB ( cp3 [ 0 ] , pp [ 12 ] )
CALLEE	1902:16	1902:16	15	YCbCrtoRGB
LEAF_NODE	1902:16	1902:16	16	YCbCrtoRGB
LEAF_NODE	1902:26	1902:26	15	(
ARGUMENT	1902:27	1902:27	15	cp3 [ 0 ]
FIELD	1902:27	1902:32	16	cp3 [ 0 ]
LEAF_NODE	1902:27	1902:27	17	cp3
LEAF_NODE	1902:30	1902:30	17	[
EXPR	1902:31	1902:31	17	0
FIELD	1902:31	1902:31	18	0
LEAF_NODE	1902:31	1902:31	19	0
LEAF_NODE	1902:32	1902:32	17	]
LEAF_NODE	1902:33	1902:33	15	,
ARGUMENT	1902:35	1902:35	15	pp [ 12 ]
FIELD	1902:35	1902:40	16	pp [ 12 ]
LEAF_NODE	1902:35	1902:35	17	pp
LEAF_NODE	1902:37	1902:37	17	[
EXPR	1902:38	1902:38	17	12
FIELD	1902:38	1902:38	18	12
LEAF_NODE	1902:38	1902:38	19	12
LEAF_NODE	1902:40	1902:40	17	]
LEAF_NODE	1902:41	1902:41	15	)
LEAF_NODE	1902:42	1902:42	13	;
EXPR_STATEMENT	1903:16	1903:42	12	YCbCrtoRGB ( cp3 [ 1 ] , pp [ 13 ] ) ;
EXPR	1903:16	1903:16	13	YCbCrtoRGB ( cp3 [ 1 ] , pp [ 13 ] )
FUNCTION_CALL	1903:16	1903:41	14	YCbCrtoRGB ( cp3 [ 1 ] , pp [ 13 ] )
CALLEE	1903:16	1903:16	15	YCbCrtoRGB
LEAF_NODE	1903:16	1903:16	16	YCbCrtoRGB
LEAF_NODE	1903:26	1903:26	15	(
ARGUMENT	1903:27	1903:27	15	cp3 [ 1 ]
FIELD	1903:27	1903:32	16	cp3 [ 1 ]
LEAF_NODE	1903:27	1903:27	17	cp3
LEAF_NODE	1903:30	1903:30	17	[
EXPR	1903:31	1903:31	17	1
FIELD	1903:31	1903:31	18	1
LEAF_NODE	1903:31	1903:31	19	1
LEAF_NODE	1903:32	1903:32	17	]
LEAF_NODE	1903:33	1903:33	15	,
ARGUMENT	1903:35	1903:35	15	pp [ 13 ]
FIELD	1903:35	1903:40	16	pp [ 13 ]
LEAF_NODE	1903:35	1903:35	17	pp
LEAF_NODE	1903:37	1903:37	17	[
EXPR	1903:38	1903:38	17	13
FIELD	1903:38	1903:38	18	13
LEAF_NODE	1903:38	1903:38	19	13
LEAF_NODE	1903:40	1903:40	17	]
LEAF_NODE	1903:41	1903:41	15	)
LEAF_NODE	1903:42	1903:42	13	;
EXPR_STATEMENT	1904:16	1904:42	12	YCbCrtoRGB ( cp3 [ 2 ] , pp [ 14 ] ) ;
EXPR	1904:16	1904:16	13	YCbCrtoRGB ( cp3 [ 2 ] , pp [ 14 ] )
FUNCTION_CALL	1904:16	1904:41	14	YCbCrtoRGB ( cp3 [ 2 ] , pp [ 14 ] )
CALLEE	1904:16	1904:16	15	YCbCrtoRGB
LEAF_NODE	1904:16	1904:16	16	YCbCrtoRGB
LEAF_NODE	1904:26	1904:26	15	(
ARGUMENT	1904:27	1904:27	15	cp3 [ 2 ]
FIELD	1904:27	1904:32	16	cp3 [ 2 ]
LEAF_NODE	1904:27	1904:27	17	cp3
LEAF_NODE	1904:30	1904:30	17	[
EXPR	1904:31	1904:31	17	2
FIELD	1904:31	1904:31	18	2
LEAF_NODE	1904:31	1904:31	19	2
LEAF_NODE	1904:32	1904:32	17	]
LEAF_NODE	1904:33	1904:33	15	,
ARGUMENT	1904:35	1904:35	15	pp [ 14 ]
FIELD	1904:35	1904:40	16	pp [ 14 ]
LEAF_NODE	1904:35	1904:35	17	pp
LEAF_NODE	1904:37	1904:37	17	[
EXPR	1904:38	1904:38	17	14
FIELD	1904:38	1904:38	18	14
LEAF_NODE	1904:38	1904:38	19	14
LEAF_NODE	1904:40	1904:40	17	]
LEAF_NODE	1904:41	1904:41	15	)
LEAF_NODE	1904:42	1904:42	13	;
EXPR_STATEMENT	1905:16	1905:42	12	YCbCrtoRGB ( cp3 [ 3 ] , pp [ 15 ] ) ;
EXPR	1905:16	1905:16	13	YCbCrtoRGB ( cp3 [ 3 ] , pp [ 15 ] )
FUNCTION_CALL	1905:16	1905:41	14	YCbCrtoRGB ( cp3 [ 3 ] , pp [ 15 ] )
CALLEE	1905:16	1905:16	15	YCbCrtoRGB
LEAF_NODE	1905:16	1905:16	16	YCbCrtoRGB
LEAF_NODE	1905:26	1905:26	15	(
ARGUMENT	1905:27	1905:27	15	cp3 [ 3 ]
FIELD	1905:27	1905:32	16	cp3 [ 3 ]
LEAF_NODE	1905:27	1905:27	17	cp3
LEAF_NODE	1905:30	1905:30	17	[
EXPR	1905:31	1905:31	17	3
FIELD	1905:31	1905:31	18	3
LEAF_NODE	1905:31	1905:31	19	3
LEAF_NODE	1905:32	1905:32	17	]
LEAF_NODE	1905:33	1905:33	15	,
ARGUMENT	1905:35	1905:35	15	pp [ 15 ]
FIELD	1905:35	1905:40	16	pp [ 15 ]
LEAF_NODE	1905:35	1905:35	17	pp
LEAF_NODE	1905:37	1905:37	17	[
EXPR	1905:38	1905:38	17	15
FIELD	1905:38	1905:38	18	15
LEAF_NODE	1905:38	1905:38	19	15
LEAF_NODE	1905:40	1905:40	17	]
LEAF_NODE	1905:41	1905:41	15	)
LEAF_NODE	1905:42	1905:42	13	;
EXPR_STATEMENT	1907:16	1907:23	12	cp += 4 ;
EXPR	1907:16	1907:16	13	cp += 4
ASSIGN	1907:16	1907:22	14	cp += 4
LVAL	1907:16	1907:16	15	cp
FIELD	1907:16	1907:16	16	cp
LEAF_NODE	1907:16	1907:16	17	cp
ASSIGN_OP	1907:19	1907:19	15	+=
LEAF_NODE	1907:19	1907:19	16	+=
RVAL	1907:22	1907:22	15	4
FIELD	1907:22	1907:22	16	4
LEAF_NODE	1907:22	1907:22	17	4
LEAF_NODE	1907:23	1907:23	13	;
EXPR_STATEMENT	1908:16	1908:24	12	cp1 += 4 ;
EXPR	1908:16	1908:16	13	cp1 += 4
ASSIGN	1908:16	1908:23	14	cp1 += 4
LVAL	1908:16	1908:16	15	cp1
FIELD	1908:16	1908:16	16	cp1
LEAF_NODE	1908:16	1908:16	17	cp1
ASSIGN_OP	1908:20	1908:20	15	+=
LEAF_NODE	1908:20	1908:20	16	+=
RVAL	1908:23	1908:23	15	4
FIELD	1908:23	1908:23	16	4
LEAF_NODE	1908:23	1908:23	17	4
LEAF_NODE	1908:24	1908:24	13	;
EXPR_STATEMENT	1909:16	1909:24	12	cp2 += 4 ;
EXPR	1909:16	1909:16	13	cp2 += 4
ASSIGN	1909:16	1909:23	14	cp2 += 4
LVAL	1909:16	1909:16	15	cp2
FIELD	1909:16	1909:16	16	cp2
LEAF_NODE	1909:16	1909:16	17	cp2
ASSIGN_OP	1909:20	1909:20	15	+=
LEAF_NODE	1909:20	1909:20	16	+=
RVAL	1909:23	1909:23	15	4
FIELD	1909:23	1909:23	16	4
LEAF_NODE	1909:23	1909:23	17	4
LEAF_NODE	1909:24	1909:24	13	;
EXPR_STATEMENT	1910:16	1910:24	12	cp3 += 4 ;
EXPR	1910:16	1910:16	13	cp3 += 4
ASSIGN	1910:16	1910:23	14	cp3 += 4
LVAL	1910:16	1910:16	15	cp3
FIELD	1910:16	1910:16	16	cp3
LEAF_NODE	1910:16	1910:16	17	cp3
ASSIGN_OP	1910:20	1910:20	15	+=
LEAF_NODE	1910:20	1910:20	16	+=
RVAL	1910:23	1910:23	15	4
FIELD	1910:23	1910:23	16	4
LEAF_NODE	1910:23	1910:23	17	4
LEAF_NODE	1910:24	1910:24	13	;
EXPR_STATEMENT	1911:16	1911:24	12	pp += 18 ;
EXPR	1911:16	1911:16	13	pp += 18
ASSIGN	1911:16	1911:22	14	pp += 18
LVAL	1911:16	1911:16	15	pp
FIELD	1911:16	1911:16	16	pp
LEAF_NODE	1911:16	1911:16	17	pp
ASSIGN_OP	1911:19	1911:19	15	+=
LEAF_NODE	1911:19	1911:19	16	+=
RVAL	1911:22	1911:22	15	18
FIELD	1911:22	1911:22	16	18
LEAF_NODE	1911:22	1911:22	17	18
LEAF_NODE	1911:24	1911:24	13	;
LEAF_NODE	1912:12	1912:12	11	}
LEAF_NODE	1912:25	1912:25	9	;
EXPR_STATEMENT	1913:12	1913:22	9	cp += incr ;
EXPR	1913:12	1913:12	10	cp += incr
ASSIGN	1913:12	1913:18	11	cp += incr
LVAL	1913:12	1913:12	12	cp
FIELD	1913:12	1913:12	13	cp
LEAF_NODE	1913:12	1913:12	14	cp
ASSIGN_OP	1913:15	1913:15	12	+=
LEAF_NODE	1913:15	1913:15	13	+=
RVAL	1913:18	1913:18	12	incr
FIELD	1913:18	1913:18	13	incr
LEAF_NODE	1913:18	1913:18	14	incr
LEAF_NODE	1913:22	1913:22	10	;
EXPR_STATEMENT	1914:12	1914:23	9	cp1 += incr ;
EXPR	1914:12	1914:12	10	cp1 += incr
ASSIGN	1914:12	1914:19	11	cp1 += incr
LVAL	1914:12	1914:12	12	cp1
FIELD	1914:12	1914:12	13	cp1
LEAF_NODE	1914:12	1914:12	14	cp1
ASSIGN_OP	1914:16	1914:16	12	+=
LEAF_NODE	1914:16	1914:16	13	+=
RVAL	1914:19	1914:19	12	incr
FIELD	1914:19	1914:19	13	incr
LEAF_NODE	1914:19	1914:19	14	incr
LEAF_NODE	1914:23	1914:23	10	;
EXPR_STATEMENT	1915:12	1915:23	9	cp2 += incr ;
EXPR	1915:12	1915:12	10	cp2 += incr
ASSIGN	1915:12	1915:19	11	cp2 += incr
LVAL	1915:12	1915:12	12	cp2
FIELD	1915:12	1915:12	13	cp2
LEAF_NODE	1915:12	1915:12	14	cp2
ASSIGN_OP	1915:16	1915:16	12	+=
LEAF_NODE	1915:16	1915:16	13	+=
RVAL	1915:19	1915:19	12	incr
FIELD	1915:19	1915:19	13	incr
LEAF_NODE	1915:19	1915:19	14	incr
LEAF_NODE	1915:23	1915:23	10	;
EXPR_STATEMENT	1916:12	1916:23	9	cp3 += incr ;
EXPR	1916:12	1916:12	10	cp3 += incr
ASSIGN	1916:12	1916:19	11	cp3 += incr
LVAL	1916:12	1916:12	12	cp3
FIELD	1916:12	1916:12	13	cp3
LEAF_NODE	1916:12	1916:12	14	cp3
ASSIGN_OP	1916:16	1916:16	12	+=
LEAF_NODE	1916:16	1916:16	13	+=
RVAL	1916:19	1916:19	12	incr
FIELD	1916:19	1916:19	13	incr
LEAF_NODE	1916:19	1916:19	14	incr
LEAF_NODE	1916:23	1916:23	10	;
EXPR_STATEMENT	1917:12	1917:26	9	pp += fromskew ;
EXPR	1917:12	1917:12	10	pp += fromskew
ASSIGN	1917:12	1917:18	11	pp += fromskew
LVAL	1917:12	1917:12	12	pp
FIELD	1917:12	1917:12	13	pp
LEAF_NODE	1917:12	1917:12	14	pp
ASSIGN_OP	1917:15	1917:15	12	+=
LEAF_NODE	1917:15	1917:15	13	+=
RVAL	1917:18	1917:18	12	fromskew
FIELD	1917:18	1917:18	13	fromskew
LEAF_NODE	1917:18	1917:18	14	fromskew
LEAF_NODE	1917:26	1917:26	10	;
LEAF_NODE	1918:8	1918:8	8	}
LEAF_NODE	1919:4	1919:4	5	}
SELECTION	1919:6	1919:11	3	
KEYWORD	1919:6	1919:6	4	else
LEAF_NODE	1919:6	1919:6	5	else
STATEMENTS	1919:11	1973:4	4	
LEAF_NODE	1919:11	1919:11	5	{
STATEMENTS	1920:8	1920:8	5	
ITERATION	1920:8	1920:22	6	
KEYWORD	1920:8	1920:8	7	while
LEAF_NODE	1920:8	1920:8	8	while
LEAF_NODE	1920:14	1920:14	7	(
CONDITION	1920:15	1920:15	7	h > 0
EXPR	1920:15	1920:19	8	h > 0
FIELD	1920:15	1920:15	9	h
LEAF_NODE	1920:15	1920:15	10	h
REL_OPERATOR	1920:17	1920:17	9	>
LEAF_NODE	1920:17	1920:17	10	>
FIELD	1920:19	1920:19	9	0
LEAF_NODE	1920:19	1920:19	10	0
LEAF_NODE	1920:20	1920:20	7	)
STATEMENTS	1920:22	1972:8	7	
LEAF_NODE	1920:22	1920:22	8	{
STATEMENTS	1921:12	1971:12	8	
ITERATION	1921:12	1921:32	9	
KEYWORD	1921:12	1921:12	10	for
LEAF_NODE	1921:12	1921:12	11	for
LEAF_NODE	1921:16	1921:16	10	(
FOR_INIT	1921:17	1921:22	10	x = w ;
EXPR	1921:17	1921:17	11	x = w
ASSIGN	1921:17	1921:21	12	x = w
LVAL	1921:17	1921:17	13	x
FIELD	1921:17	1921:17	14	x
LEAF_NODE	1921:17	1921:17	15	x
ASSIGN_OP	1921:19	1921:19	13	=
LEAF_NODE	1921:19	1921:19	14	=
RVAL	1921:21	1921:21	13	w
FIELD	1921:21	1921:21	14	w
LEAF_NODE	1921:21	1921:21	15	w
LEAF_NODE	1921:22	1921:22	11	;
CONDITION	1921:24	1921:24	10	x > 0
EXPR	1921:24	1921:28	11	x > 0
FIELD	1921:24	1921:24	12	x
LEAF_NODE	1921:24	1921:24	13	x
REL_OPERATOR	1921:26	1921:26	12	>
LEAF_NODE	1921:26	1921:26	13	>
FIELD	1921:28	1921:28	12	0
LEAF_NODE	1921:28	1921:28	13	0
LEAF_NODE	1921:29	1921:29	10	;
LEAF_NODE	0:0	0:0	10	FOR_EXPR
LEAF_NODE	1921:30	1921:30	10	)
STATEMENTS	1921:32	1963:12	10	
LEAF_NODE	1921:32	1921:32	11	{
STATEMENTS	1922:16	1962:16	11	
SIMPLE_DECL	1922:16	1922:33	12	int32 Cb ; Cb = pp [ 16 ] ;
VAR_DECL	1922:16	1922:22	13	int32 Cb ; Cb = pp [ 16 ]
TYPE	1922:16	1922:16	14	int32
TYPE_NAME	1922:16	1922:16	15	int32
LEAF_NODE	1922:16	1922:16	16	int32
NAME	1922:22	1922:22	14	Cb
LEAF_NODE	1922:22	1922:22	15	Cb
LEAF_NODE	0:0	0:0	14	;
INIT	1922:22	1922:22	14	Cb = pp [ 16 ]
ASSIGN	1922:22	1922:27	15	Cb = pp [ 16 ]
LVAL	1922:22	1922:22	16	Cb
NAME	1922:22	1922:22	17	Cb
LEAF_NODE	1922:22	1922:22	18	Cb
ASSIGN_OP	1922:25	1922:25	16	=
LEAF_NODE	1922:25	1922:25	17	=
RVAL	1922:27	1922:27	16	pp [ 16 ]
FIELD	1922:27	1922:32	17	pp [ 16 ]
LEAF_NODE	1922:27	1922:27	18	pp
LEAF_NODE	1922:29	1922:29	18	[
EXPR	1922:30	1922:30	18	16
FIELD	1922:30	1922:30	19	16
LEAF_NODE	1922:30	1922:30	20	16
LEAF_NODE	1922:32	1922:32	18	]
LEAF_NODE	1922:33	1922:33	13	;
SIMPLE_DECL	1923:16	1923:33	12	int32 Cr ; Cr = pp [ 17 ] ;
VAR_DECL	1923:16	1923:22	13	int32 Cr ; Cr = pp [ 17 ]
TYPE	1923:16	1923:16	14	int32
TYPE_NAME	1923:16	1923:16	15	int32
LEAF_NODE	1923:16	1923:16	16	int32
NAME	1923:22	1923:22	14	Cr
LEAF_NODE	1923:22	1923:22	15	Cr
LEAF_NODE	0:0	0:0	14	;
INIT	1923:22	1923:22	14	Cr = pp [ 17 ]
ASSIGN	1923:22	1923:27	15	Cr = pp [ 17 ]
LVAL	1923:22	1923:22	16	Cr
NAME	1923:22	1923:22	17	Cr
LEAF_NODE	1923:22	1923:22	18	Cr
ASSIGN_OP	1923:25	1923:25	16	=
LEAF_NODE	1923:25	1923:25	17	=
RVAL	1923:27	1923:27	16	pp [ 17 ]
FIELD	1923:27	1923:32	17	pp [ 17 ]
LEAF_NODE	1923:27	1923:27	18	pp
LEAF_NODE	1923:29	1923:29	18	[
EXPR	1923:30	1923:30	18	17
FIELD	1923:30	1923:30	19	17
LEAF_NODE	1923:30	1923:30	20	17
LEAF_NODE	1923:32	1923:32	18	]
LEAF_NODE	1923:33	1923:33	13	;
SELECTION	1924:16	1924:27	12	
KEYWORD	1924:16	1924:16	13	switch
LEAF_NODE	1924:16	1924:16	14	switch
LEAF_NODE	1924:23	1924:23	13	(
CONDITION	1924:24	1924:24	13	x
EXPR	1924:24	1924:24	14	x
FIELD	1924:24	1924:24	15	x
LEAF_NODE	1924:24	1924:24	16	x
LEAF_NODE	1924:25	1924:25	13	)
STATEMENTS	1924:27	1953:16	13	
LEAF_NODE	1924:27	1924:27	14	{
STATEMENTS	1925:16	1947:20	14	
LABEL	1925:16	1925:23	15	default :
LEAF_NODE	1925:16	1925:16	16	default
LEAF_NODE	1925:23	1925:23	16	:
SELECTION	1926:20	1926:31	15	
KEYWORD	1926:20	1926:20	16	switch
LEAF_NODE	1926:20	1926:20	17	switch
LEAF_NODE	1926:27	1926:27	16	(
CONDITION	1926:28	1926:28	16	h
EXPR	1926:28	1926:28	17	h
FIELD	1926:28	1926:28	18	h
LEAF_NODE	1926:28	1926:28	19	h
LEAF_NODE	1926:29	1926:29	16	)
STATEMENTS	1926:31	1931:20	16	
LEAF_NODE	1926:31	1926:31	17	{
STATEMENTS	1927:20	1930:29	17	
LABEL	1927:20	1927:27	18	default :
LEAF_NODE	1927:20	1927:20	19	default
LEAF_NODE	1927:27	1927:27	19	:
EXPR_STATEMENT	1927:29	1927:55	18	YCbCrtoRGB ( cp3 [ 3 ] , pp [ 15 ] ) ;
EXPR	1927:29	1927:29	19	YCbCrtoRGB ( cp3 [ 3 ] , pp [ 15 ] )
FUNCTION_CALL	1927:29	1927:54	20	YCbCrtoRGB ( cp3 [ 3 ] , pp [ 15 ] )
CALLEE	1927:29	1927:29	21	YCbCrtoRGB
LEAF_NODE	1927:29	1927:29	22	YCbCrtoRGB
LEAF_NODE	1927:39	1927:39	21	(
ARGUMENT	1927:40	1927:40	21	cp3 [ 3 ]
FIELD	1927:40	1927:45	22	cp3 [ 3 ]
LEAF_NODE	1927:40	1927:40	23	cp3
LEAF_NODE	1927:43	1927:43	23	[
EXPR	1927:44	1927:44	23	3
FIELD	1927:44	1927:44	24	3
LEAF_NODE	1927:44	1927:44	25	3
LEAF_NODE	1927:45	1927:45	23	]
LEAF_NODE	1927:46	1927:46	21	,
ARGUMENT	1927:48	1927:48	21	pp [ 15 ]
FIELD	1927:48	1927:53	22	pp [ 15 ]
LEAF_NODE	1927:48	1927:48	23	pp
LEAF_NODE	1927:50	1927:50	23	[
EXPR	1927:51	1927:51	23	15
FIELD	1927:51	1927:51	24	15
LEAF_NODE	1927:51	1927:51	25	15
LEAF_NODE	1927:53	1927:53	23	]
LEAF_NODE	1927:54	1927:54	21	)
LEAF_NODE	1927:55	1927:55	19	;
LABEL	1928:20	1928:26	18	case 3 :
LEAF_NODE	1928:20	1928:20	19	case
LEAF_NODE	1928:25	1928:25	19	3
LEAF_NODE	1928:26	1928:26	19	:
EXPR_STATEMENT	1928:29	1928:55	18	YCbCrtoRGB ( cp2 [ 3 ] , pp [ 11 ] ) ;
EXPR	1928:29	1928:29	19	YCbCrtoRGB ( cp2 [ 3 ] , pp [ 11 ] )
FUNCTION_CALL	1928:29	1928:54	20	YCbCrtoRGB ( cp2 [ 3 ] , pp [ 11 ] )
CALLEE	1928:29	1928:29	21	YCbCrtoRGB
LEAF_NODE	1928:29	1928:29	22	YCbCrtoRGB
LEAF_NODE	1928:39	1928:39	21	(
ARGUMENT	1928:40	1928:40	21	cp2 [ 3 ]
FIELD	1928:40	1928:45	22	cp2 [ 3 ]
LEAF_NODE	1928:40	1928:40	23	cp2
LEAF_NODE	1928:43	1928:43	23	[
EXPR	1928:44	1928:44	23	3
FIELD	1928:44	1928:44	24	3
LEAF_NODE	1928:44	1928:44	25	3
LEAF_NODE	1928:45	1928:45	23	]
LEAF_NODE	1928:46	1928:46	21	,
ARGUMENT	1928:48	1928:48	21	pp [ 11 ]
FIELD	1928:48	1928:53	22	pp [ 11 ]
LEAF_NODE	1928:48	1928:48	23	pp
LEAF_NODE	1928:50	1928:50	23	[
EXPR	1928:51	1928:51	23	11
FIELD	1928:51	1928:51	24	11
LEAF_NODE	1928:51	1928:51	25	11
LEAF_NODE	1928:53	1928:53	23	]
LEAF_NODE	1928:54	1928:54	21	)
LEAF_NODE	1928:55	1928:55	19	;
LABEL	1929:20	1929:26	18	case 2 :
LEAF_NODE	1929:20	1929:20	19	case
LEAF_NODE	1929:25	1929:25	19	2
LEAF_NODE	1929:26	1929:26	19	:
EXPR_STATEMENT	1929:29	1929:55	18	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] ) ;
EXPR	1929:29	1929:29	19	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] )
FUNCTION_CALL	1929:29	1929:54	20	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] )
CALLEE	1929:29	1929:29	21	YCbCrtoRGB
LEAF_NODE	1929:29	1929:29	22	YCbCrtoRGB
LEAF_NODE	1929:39	1929:39	21	(
ARGUMENT	1929:40	1929:40	21	cp1 [ 3 ]
FIELD	1929:40	1929:45	22	cp1 [ 3 ]
LEAF_NODE	1929:40	1929:40	23	cp1
LEAF_NODE	1929:43	1929:43	23	[
EXPR	1929:44	1929:44	23	3
FIELD	1929:44	1929:44	24	3
LEAF_NODE	1929:44	1929:44	25	3
LEAF_NODE	1929:45	1929:45	23	]
LEAF_NODE	1929:46	1929:46	21	,
ARGUMENT	1929:48	1929:48	21	pp [ 7 ]
FIELD	1929:48	1929:53	22	pp [ 7 ]
LEAF_NODE	1929:48	1929:48	23	pp
LEAF_NODE	1929:50	1929:50	23	[
EXPR	1929:52	1929:52	23	7
FIELD	1929:52	1929:52	24	7
LEAF_NODE	1929:52	1929:52	25	7
LEAF_NODE	1929:53	1929:53	23	]
LEAF_NODE	1929:54	1929:54	21	)
LEAF_NODE	1929:55	1929:55	19	;
LABEL	1930:20	1930:26	18	case 1 :
LEAF_NODE	1930:20	1930:20	19	case
LEAF_NODE	1930:25	1930:25	19	1
LEAF_NODE	1930:26	1930:26	19	:
EXPR_STATEMENT	1930:29	1930:55	18	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] ) ;
EXPR	1930:29	1930:29	19	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
FUNCTION_CALL	1930:29	1930:54	20	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
CALLEE	1930:29	1930:29	21	YCbCrtoRGB
LEAF_NODE	1930:29	1930:29	22	YCbCrtoRGB
LEAF_NODE	1930:39	1930:39	21	(
ARGUMENT	1930:40	1930:40	21	cp [ 3 ]
FIELD	1930:40	1930:45	22	cp [ 3 ]
LEAF_NODE	1930:40	1930:40	23	cp
LEAF_NODE	1930:43	1930:43	23	[
EXPR	1930:44	1930:44	23	3
FIELD	1930:44	1930:44	24	3
LEAF_NODE	1930:44	1930:44	25	3
LEAF_NODE	1930:45	1930:45	23	]
LEAF_NODE	1930:46	1930:46	21	,
ARGUMENT	1930:48	1930:48	21	pp [ 3 ]
FIELD	1930:48	1930:53	22	pp [ 3 ]
LEAF_NODE	1930:48	1930:48	23	pp
LEAF_NODE	1930:50	1930:50	23	[
EXPR	1930:52	1930:52	23	3
FIELD	1930:52	1930:52	24	3
LEAF_NODE	1930:52	1930:52	25	3
LEAF_NODE	1930:53	1930:53	23	]
LEAF_NODE	1930:54	1930:54	21	)
LEAF_NODE	1930:55	1930:55	19	;
LEAF_NODE	1931:20	1931:20	17	}
LABEL	1932:16	1932:22	15	case 3 :
LEAF_NODE	1932:16	1932:16	16	case
LEAF_NODE	1932:21	1932:21	16	3
LEAF_NODE	1932:22	1932:22	16	:
SELECTION	1933:20	1933:31	15	
KEYWORD	1933:20	1933:20	16	switch
LEAF_NODE	1933:20	1933:20	17	switch
LEAF_NODE	1933:27	1933:27	16	(
CONDITION	1933:28	1933:28	16	h
EXPR	1933:28	1933:28	17	h
FIELD	1933:28	1933:28	18	h
LEAF_NODE	1933:28	1933:28	19	h
LEAF_NODE	1933:29	1933:29	16	)
STATEMENTS	1933:31	1938:20	16	
LEAF_NODE	1933:31	1933:31	17	{
STATEMENTS	1934:20	1937:29	17	
LABEL	1934:20	1934:27	18	default :
LEAF_NODE	1934:20	1934:20	19	default
LEAF_NODE	1934:27	1934:27	19	:
EXPR_STATEMENT	1934:29	1934:55	18	YCbCrtoRGB ( cp3 [ 2 ] , pp [ 14 ] ) ;
EXPR	1934:29	1934:29	19	YCbCrtoRGB ( cp3 [ 2 ] , pp [ 14 ] )
FUNCTION_CALL	1934:29	1934:54	20	YCbCrtoRGB ( cp3 [ 2 ] , pp [ 14 ] )
CALLEE	1934:29	1934:29	21	YCbCrtoRGB
LEAF_NODE	1934:29	1934:29	22	YCbCrtoRGB
LEAF_NODE	1934:39	1934:39	21	(
ARGUMENT	1934:40	1934:40	21	cp3 [ 2 ]
FIELD	1934:40	1934:45	22	cp3 [ 2 ]
LEAF_NODE	1934:40	1934:40	23	cp3
LEAF_NODE	1934:43	1934:43	23	[
EXPR	1934:44	1934:44	23	2
FIELD	1934:44	1934:44	24	2
LEAF_NODE	1934:44	1934:44	25	2
LEAF_NODE	1934:45	1934:45	23	]
LEAF_NODE	1934:46	1934:46	21	,
ARGUMENT	1934:48	1934:48	21	pp [ 14 ]
FIELD	1934:48	1934:53	22	pp [ 14 ]
LEAF_NODE	1934:48	1934:48	23	pp
LEAF_NODE	1934:50	1934:50	23	[
EXPR	1934:51	1934:51	23	14
FIELD	1934:51	1934:51	24	14
LEAF_NODE	1934:51	1934:51	25	14
LEAF_NODE	1934:53	1934:53	23	]
LEAF_NODE	1934:54	1934:54	21	)
LEAF_NODE	1934:55	1934:55	19	;
LABEL	1935:20	1935:26	18	case 3 :
LEAF_NODE	1935:20	1935:20	19	case
LEAF_NODE	1935:25	1935:25	19	3
LEAF_NODE	1935:26	1935:26	19	:
EXPR_STATEMENT	1935:29	1935:55	18	YCbCrtoRGB ( cp2 [ 2 ] , pp [ 10 ] ) ;
EXPR	1935:29	1935:29	19	YCbCrtoRGB ( cp2 [ 2 ] , pp [ 10 ] )
FUNCTION_CALL	1935:29	1935:54	20	YCbCrtoRGB ( cp2 [ 2 ] , pp [ 10 ] )
CALLEE	1935:29	1935:29	21	YCbCrtoRGB
LEAF_NODE	1935:29	1935:29	22	YCbCrtoRGB
LEAF_NODE	1935:39	1935:39	21	(
ARGUMENT	1935:40	1935:40	21	cp2 [ 2 ]
FIELD	1935:40	1935:45	22	cp2 [ 2 ]
LEAF_NODE	1935:40	1935:40	23	cp2
LEAF_NODE	1935:43	1935:43	23	[
EXPR	1935:44	1935:44	23	2
FIELD	1935:44	1935:44	24	2
LEAF_NODE	1935:44	1935:44	25	2
LEAF_NODE	1935:45	1935:45	23	]
LEAF_NODE	1935:46	1935:46	21	,
ARGUMENT	1935:48	1935:48	21	pp [ 10 ]
FIELD	1935:48	1935:53	22	pp [ 10 ]
LEAF_NODE	1935:48	1935:48	23	pp
LEAF_NODE	1935:50	1935:50	23	[
EXPR	1935:51	1935:51	23	10
FIELD	1935:51	1935:51	24	10
LEAF_NODE	1935:51	1935:51	25	10
LEAF_NODE	1935:53	1935:53	23	]
LEAF_NODE	1935:54	1935:54	21	)
LEAF_NODE	1935:55	1935:55	19	;
LABEL	1936:20	1936:26	18	case 2 :
LEAF_NODE	1936:20	1936:20	19	case
LEAF_NODE	1936:25	1936:25	19	2
LEAF_NODE	1936:26	1936:26	19	:
EXPR_STATEMENT	1936:29	1936:55	18	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] ) ;
EXPR	1936:29	1936:29	19	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] )
FUNCTION_CALL	1936:29	1936:54	20	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] )
CALLEE	1936:29	1936:29	21	YCbCrtoRGB
LEAF_NODE	1936:29	1936:29	22	YCbCrtoRGB
LEAF_NODE	1936:39	1936:39	21	(
ARGUMENT	1936:40	1936:40	21	cp1 [ 2 ]
FIELD	1936:40	1936:45	22	cp1 [ 2 ]
LEAF_NODE	1936:40	1936:40	23	cp1
LEAF_NODE	1936:43	1936:43	23	[
EXPR	1936:44	1936:44	23	2
FIELD	1936:44	1936:44	24	2
LEAF_NODE	1936:44	1936:44	25	2
LEAF_NODE	1936:45	1936:45	23	]
LEAF_NODE	1936:46	1936:46	21	,
ARGUMENT	1936:48	1936:48	21	pp [ 6 ]
FIELD	1936:48	1936:53	22	pp [ 6 ]
LEAF_NODE	1936:48	1936:48	23	pp
LEAF_NODE	1936:50	1936:50	23	[
EXPR	1936:52	1936:52	23	6
FIELD	1936:52	1936:52	24	6
LEAF_NODE	1936:52	1936:52	25	6
LEAF_NODE	1936:53	1936:53	23	]
LEAF_NODE	1936:54	1936:54	21	)
LEAF_NODE	1936:55	1936:55	19	;
LABEL	1937:20	1937:26	18	case 1 :
LEAF_NODE	1937:20	1937:20	19	case
LEAF_NODE	1937:25	1937:25	19	1
LEAF_NODE	1937:26	1937:26	19	:
EXPR_STATEMENT	1937:29	1937:55	18	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] ) ;
EXPR	1937:29	1937:29	19	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
FUNCTION_CALL	1937:29	1937:54	20	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
CALLEE	1937:29	1937:29	21	YCbCrtoRGB
LEAF_NODE	1937:29	1937:29	22	YCbCrtoRGB
LEAF_NODE	1937:39	1937:39	21	(
ARGUMENT	1937:40	1937:40	21	cp [ 2 ]
FIELD	1937:40	1937:45	22	cp [ 2 ]
LEAF_NODE	1937:40	1937:40	23	cp
LEAF_NODE	1937:43	1937:43	23	[
EXPR	1937:44	1937:44	23	2
FIELD	1937:44	1937:44	24	2
LEAF_NODE	1937:44	1937:44	25	2
LEAF_NODE	1937:45	1937:45	23	]
LEAF_NODE	1937:46	1937:46	21	,
ARGUMENT	1937:48	1937:48	21	pp [ 2 ]
FIELD	1937:48	1937:53	22	pp [ 2 ]
LEAF_NODE	1937:48	1937:48	23	pp
LEAF_NODE	1937:50	1937:50	23	[
EXPR	1937:52	1937:52	23	2
FIELD	1937:52	1937:52	24	2
LEAF_NODE	1937:52	1937:52	25	2
LEAF_NODE	1937:53	1937:53	23	]
LEAF_NODE	1937:54	1937:54	21	)
LEAF_NODE	1937:55	1937:55	19	;
LEAF_NODE	1938:20	1938:20	17	}
LABEL	1939:16	1939:22	15	case 2 :
LEAF_NODE	1939:16	1939:16	16	case
LEAF_NODE	1939:21	1939:21	16	2
LEAF_NODE	1939:22	1939:22	16	:
SELECTION	1940:20	1940:31	15	
KEYWORD	1940:20	1940:20	16	switch
LEAF_NODE	1940:20	1940:20	17	switch
LEAF_NODE	1940:27	1940:27	16	(
CONDITION	1940:28	1940:28	16	h
EXPR	1940:28	1940:28	17	h
FIELD	1940:28	1940:28	18	h
LEAF_NODE	1940:28	1940:28	19	h
LEAF_NODE	1940:29	1940:29	16	)
STATEMENTS	1940:31	1945:20	16	
LEAF_NODE	1940:31	1940:31	17	{
STATEMENTS	1941:20	1944:29	17	
LABEL	1941:20	1941:27	18	default :
LEAF_NODE	1941:20	1941:20	19	default
LEAF_NODE	1941:27	1941:27	19	:
EXPR_STATEMENT	1941:29	1941:55	18	YCbCrtoRGB ( cp3 [ 1 ] , pp [ 13 ] ) ;
EXPR	1941:29	1941:29	19	YCbCrtoRGB ( cp3 [ 1 ] , pp [ 13 ] )
FUNCTION_CALL	1941:29	1941:54	20	YCbCrtoRGB ( cp3 [ 1 ] , pp [ 13 ] )
CALLEE	1941:29	1941:29	21	YCbCrtoRGB
LEAF_NODE	1941:29	1941:29	22	YCbCrtoRGB
LEAF_NODE	1941:39	1941:39	21	(
ARGUMENT	1941:40	1941:40	21	cp3 [ 1 ]
FIELD	1941:40	1941:45	22	cp3 [ 1 ]
LEAF_NODE	1941:40	1941:40	23	cp3
LEAF_NODE	1941:43	1941:43	23	[
EXPR	1941:44	1941:44	23	1
FIELD	1941:44	1941:44	24	1
LEAF_NODE	1941:44	1941:44	25	1
LEAF_NODE	1941:45	1941:45	23	]
LEAF_NODE	1941:46	1941:46	21	,
ARGUMENT	1941:48	1941:48	21	pp [ 13 ]
FIELD	1941:48	1941:53	22	pp [ 13 ]
LEAF_NODE	1941:48	1941:48	23	pp
LEAF_NODE	1941:50	1941:50	23	[
EXPR	1941:51	1941:51	23	13
FIELD	1941:51	1941:51	24	13
LEAF_NODE	1941:51	1941:51	25	13
LEAF_NODE	1941:53	1941:53	23	]
LEAF_NODE	1941:54	1941:54	21	)
LEAF_NODE	1941:55	1941:55	19	;
LABEL	1942:20	1942:26	18	case 3 :
LEAF_NODE	1942:20	1942:20	19	case
LEAF_NODE	1942:25	1942:25	19	3
LEAF_NODE	1942:26	1942:26	19	:
EXPR_STATEMENT	1942:29	1942:55	18	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 9 ] ) ;
EXPR	1942:29	1942:29	19	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 9 ] )
FUNCTION_CALL	1942:29	1942:54	20	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 9 ] )
CALLEE	1942:29	1942:29	21	YCbCrtoRGB
LEAF_NODE	1942:29	1942:29	22	YCbCrtoRGB
LEAF_NODE	1942:39	1942:39	21	(
ARGUMENT	1942:40	1942:40	21	cp2 [ 1 ]
FIELD	1942:40	1942:45	22	cp2 [ 1 ]
LEAF_NODE	1942:40	1942:40	23	cp2
LEAF_NODE	1942:43	1942:43	23	[
EXPR	1942:44	1942:44	23	1
FIELD	1942:44	1942:44	24	1
LEAF_NODE	1942:44	1942:44	25	1
LEAF_NODE	1942:45	1942:45	23	]
LEAF_NODE	1942:46	1942:46	21	,
ARGUMENT	1942:48	1942:48	21	pp [ 9 ]
FIELD	1942:48	1942:53	22	pp [ 9 ]
LEAF_NODE	1942:48	1942:48	23	pp
LEAF_NODE	1942:50	1942:50	23	[
EXPR	1942:52	1942:52	23	9
FIELD	1942:52	1942:52	24	9
LEAF_NODE	1942:52	1942:52	25	9
LEAF_NODE	1942:53	1942:53	23	]
LEAF_NODE	1942:54	1942:54	21	)
LEAF_NODE	1942:55	1942:55	19	;
LABEL	1943:20	1943:26	18	case 2 :
LEAF_NODE	1943:20	1943:20	19	case
LEAF_NODE	1943:25	1943:25	19	2
LEAF_NODE	1943:26	1943:26	19	:
EXPR_STATEMENT	1943:29	1943:55	18	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] ) ;
EXPR	1943:29	1943:29	19	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] )
FUNCTION_CALL	1943:29	1943:54	20	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] )
CALLEE	1943:29	1943:29	21	YCbCrtoRGB
LEAF_NODE	1943:29	1943:29	22	YCbCrtoRGB
LEAF_NODE	1943:39	1943:39	21	(
ARGUMENT	1943:40	1943:40	21	cp1 [ 1 ]
FIELD	1943:40	1943:45	22	cp1 [ 1 ]
LEAF_NODE	1943:40	1943:40	23	cp1
LEAF_NODE	1943:43	1943:43	23	[
EXPR	1943:44	1943:44	23	1
FIELD	1943:44	1943:44	24	1
LEAF_NODE	1943:44	1943:44	25	1
LEAF_NODE	1943:45	1943:45	23	]
LEAF_NODE	1943:46	1943:46	21	,
ARGUMENT	1943:48	1943:48	21	pp [ 5 ]
FIELD	1943:48	1943:53	22	pp [ 5 ]
LEAF_NODE	1943:48	1943:48	23	pp
LEAF_NODE	1943:50	1943:50	23	[
EXPR	1943:52	1943:52	23	5
FIELD	1943:52	1943:52	24	5
LEAF_NODE	1943:52	1943:52	25	5
LEAF_NODE	1943:53	1943:53	23	]
LEAF_NODE	1943:54	1943:54	21	)
LEAF_NODE	1943:55	1943:55	19	;
LABEL	1944:20	1944:26	18	case 1 :
LEAF_NODE	1944:20	1944:20	19	case
LEAF_NODE	1944:25	1944:25	19	1
LEAF_NODE	1944:26	1944:26	19	:
EXPR_STATEMENT	1944:29	1944:55	18	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] ) ;
EXPR	1944:29	1944:29	19	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
FUNCTION_CALL	1944:29	1944:54	20	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
CALLEE	1944:29	1944:29	21	YCbCrtoRGB
LEAF_NODE	1944:29	1944:29	22	YCbCrtoRGB
LEAF_NODE	1944:39	1944:39	21	(
ARGUMENT	1944:40	1944:40	21	cp [ 1 ]
FIELD	1944:40	1944:45	22	cp [ 1 ]
LEAF_NODE	1944:40	1944:40	23	cp
LEAF_NODE	1944:43	1944:43	23	[
EXPR	1944:44	1944:44	23	1
FIELD	1944:44	1944:44	24	1
LEAF_NODE	1944:44	1944:44	25	1
LEAF_NODE	1944:45	1944:45	23	]
LEAF_NODE	1944:46	1944:46	21	,
ARGUMENT	1944:48	1944:48	21	pp [ 1 ]
FIELD	1944:48	1944:53	22	pp [ 1 ]
LEAF_NODE	1944:48	1944:48	23	pp
LEAF_NODE	1944:50	1944:50	23	[
EXPR	1944:52	1944:52	23	1
FIELD	1944:52	1944:52	24	1
LEAF_NODE	1944:52	1944:52	25	1
LEAF_NODE	1944:53	1944:53	23	]
LEAF_NODE	1944:54	1944:54	21	)
LEAF_NODE	1944:55	1944:55	19	;
LEAF_NODE	1945:20	1945:20	17	}
LABEL	1946:16	1946:22	15	case 1 :
LEAF_NODE	1946:16	1946:16	16	case
LEAF_NODE	1946:21	1946:21	16	1
LEAF_NODE	1946:22	1946:22	16	:
SELECTION	1947:20	1947:31	15	
KEYWORD	1947:20	1947:20	16	switch
LEAF_NODE	1947:20	1947:20	17	switch
LEAF_NODE	1947:27	1947:27	16	(
CONDITION	1947:28	1947:28	16	h
EXPR	1947:28	1947:28	17	h
FIELD	1947:28	1947:28	18	h
LEAF_NODE	1947:28	1947:28	19	h
LEAF_NODE	1947:29	1947:29	16	)
STATEMENTS	1947:31	1952:20	16	
LEAF_NODE	1947:31	1947:31	17	{
STATEMENTS	1948:20	1951:29	17	
LABEL	1948:20	1948:27	18	default :
LEAF_NODE	1948:20	1948:20	19	default
LEAF_NODE	1948:27	1948:27	19	:
EXPR_STATEMENT	1948:29	1948:55	18	YCbCrtoRGB ( cp3 [ 0 ] , pp [ 12 ] ) ;
EXPR	1948:29	1948:29	19	YCbCrtoRGB ( cp3 [ 0 ] , pp [ 12 ] )
FUNCTION_CALL	1948:29	1948:54	20	YCbCrtoRGB ( cp3 [ 0 ] , pp [ 12 ] )
CALLEE	1948:29	1948:29	21	YCbCrtoRGB
LEAF_NODE	1948:29	1948:29	22	YCbCrtoRGB
LEAF_NODE	1948:39	1948:39	21	(
ARGUMENT	1948:40	1948:40	21	cp3 [ 0 ]
FIELD	1948:40	1948:45	22	cp3 [ 0 ]
LEAF_NODE	1948:40	1948:40	23	cp3
LEAF_NODE	1948:43	1948:43	23	[
EXPR	1948:44	1948:44	23	0
FIELD	1948:44	1948:44	24	0
LEAF_NODE	1948:44	1948:44	25	0
LEAF_NODE	1948:45	1948:45	23	]
LEAF_NODE	1948:46	1948:46	21	,
ARGUMENT	1948:48	1948:48	21	pp [ 12 ]
FIELD	1948:48	1948:53	22	pp [ 12 ]
LEAF_NODE	1948:48	1948:48	23	pp
LEAF_NODE	1948:50	1948:50	23	[
EXPR	1948:51	1948:51	23	12
FIELD	1948:51	1948:51	24	12
LEAF_NODE	1948:51	1948:51	25	12
LEAF_NODE	1948:53	1948:53	23	]
LEAF_NODE	1948:54	1948:54	21	)
LEAF_NODE	1948:55	1948:55	19	;
LABEL	1949:20	1949:26	18	case 3 :
LEAF_NODE	1949:20	1949:20	19	case
LEAF_NODE	1949:25	1949:25	19	3
LEAF_NODE	1949:26	1949:26	19	:
EXPR_STATEMENT	1949:29	1949:55	18	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 8 ] ) ;
EXPR	1949:29	1949:29	19	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 8 ] )
FUNCTION_CALL	1949:29	1949:54	20	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 8 ] )
CALLEE	1949:29	1949:29	21	YCbCrtoRGB
LEAF_NODE	1949:29	1949:29	22	YCbCrtoRGB
LEAF_NODE	1949:39	1949:39	21	(
ARGUMENT	1949:40	1949:40	21	cp2 [ 0 ]
FIELD	1949:40	1949:45	22	cp2 [ 0 ]
LEAF_NODE	1949:40	1949:40	23	cp2
LEAF_NODE	1949:43	1949:43	23	[
EXPR	1949:44	1949:44	23	0
FIELD	1949:44	1949:44	24	0
LEAF_NODE	1949:44	1949:44	25	0
LEAF_NODE	1949:45	1949:45	23	]
LEAF_NODE	1949:46	1949:46	21	,
ARGUMENT	1949:48	1949:48	21	pp [ 8 ]
FIELD	1949:48	1949:53	22	pp [ 8 ]
LEAF_NODE	1949:48	1949:48	23	pp
LEAF_NODE	1949:50	1949:50	23	[
EXPR	1949:52	1949:52	23	8
FIELD	1949:52	1949:52	24	8
LEAF_NODE	1949:52	1949:52	25	8
LEAF_NODE	1949:53	1949:53	23	]
LEAF_NODE	1949:54	1949:54	21	)
LEAF_NODE	1949:55	1949:55	19	;
LABEL	1950:20	1950:26	18	case 2 :
LEAF_NODE	1950:20	1950:20	19	case
LEAF_NODE	1950:25	1950:25	19	2
LEAF_NODE	1950:26	1950:26	19	:
EXPR_STATEMENT	1950:29	1950:55	18	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] ) ;
EXPR	1950:29	1950:29	19	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] )
FUNCTION_CALL	1950:29	1950:54	20	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] )
CALLEE	1950:29	1950:29	21	YCbCrtoRGB
LEAF_NODE	1950:29	1950:29	22	YCbCrtoRGB
LEAF_NODE	1950:39	1950:39	21	(
ARGUMENT	1950:40	1950:40	21	cp1 [ 0 ]
FIELD	1950:40	1950:45	22	cp1 [ 0 ]
LEAF_NODE	1950:40	1950:40	23	cp1
LEAF_NODE	1950:43	1950:43	23	[
EXPR	1950:44	1950:44	23	0
FIELD	1950:44	1950:44	24	0
LEAF_NODE	1950:44	1950:44	25	0
LEAF_NODE	1950:45	1950:45	23	]
LEAF_NODE	1950:46	1950:46	21	,
ARGUMENT	1950:48	1950:48	21	pp [ 4 ]
FIELD	1950:48	1950:53	22	pp [ 4 ]
LEAF_NODE	1950:48	1950:48	23	pp
LEAF_NODE	1950:50	1950:50	23	[
EXPR	1950:52	1950:52	23	4
FIELD	1950:52	1950:52	24	4
LEAF_NODE	1950:52	1950:52	25	4
LEAF_NODE	1950:53	1950:53	23	]
LEAF_NODE	1950:54	1950:54	21	)
LEAF_NODE	1950:55	1950:55	19	;
LABEL	1951:20	1951:26	18	case 1 :
LEAF_NODE	1951:20	1951:20	19	case
LEAF_NODE	1951:25	1951:25	19	1
LEAF_NODE	1951:26	1951:26	19	:
EXPR_STATEMENT	1951:29	1951:55	18	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	1951:29	1951:29	19	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	1951:29	1951:54	20	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	1951:29	1951:29	21	YCbCrtoRGB
LEAF_NODE	1951:29	1951:29	22	YCbCrtoRGB
LEAF_NODE	1951:39	1951:39	21	(
ARGUMENT	1951:40	1951:40	21	cp [ 0 ]
FIELD	1951:40	1951:45	22	cp [ 0 ]
LEAF_NODE	1951:40	1951:40	23	cp
LEAF_NODE	1951:43	1951:43	23	[
EXPR	1951:44	1951:44	23	0
FIELD	1951:44	1951:44	24	0
LEAF_NODE	1951:44	1951:44	25	0
LEAF_NODE	1951:45	1951:45	23	]
LEAF_NODE	1951:46	1951:46	21	,
ARGUMENT	1951:48	1951:48	21	pp [ 0 ]
FIELD	1951:48	1951:53	22	pp [ 0 ]
LEAF_NODE	1951:48	1951:48	23	pp
LEAF_NODE	1951:50	1951:50	23	[
EXPR	1951:52	1951:52	23	0
FIELD	1951:52	1951:52	24	0
LEAF_NODE	1951:52	1951:52	25	0
LEAF_NODE	1951:53	1951:53	23	]
LEAF_NODE	1951:54	1951:54	21	)
LEAF_NODE	1951:55	1951:55	19	;
LEAF_NODE	1952:20	1952:20	17	}
LEAF_NODE	1953:16	1953:16	14	}
SELECTION	1954:16	1954:27	12	
KEYWORD	1954:16	1954:16	13	if
LEAF_NODE	1954:16	1954:16	14	if
LEAF_NODE	1954:19	1954:19	13	(
CONDITION	1954:20	1954:20	13	x < 4
EXPR	1954:20	1954:24	14	x < 4
FIELD	1954:20	1954:20	15	x
LEAF_NODE	1954:20	1954:20	16	x
REL_OPERATOR	1954:22	1954:22	15	<
LEAF_NODE	1954:22	1954:22	16	<
FIELD	1954:24	1954:24	15	4
LEAF_NODE	1954:24	1954:24	16	4
LEAF_NODE	1954:25	1954:25	13	)
STATEMENTS	1954:27	1957:16	13	
LEAF_NODE	1954:27	1954:27	14	{
STATEMENTS	1955:20	1956:20	14	
EXPR_STATEMENT	1955:20	1955:27	15	cp += x ;
EXPR	1955:20	1955:20	16	cp += x
ASSIGN	1955:20	1955:26	17	cp += x
LVAL	1955:20	1955:20	18	cp
FIELD	1955:20	1955:20	19	cp
LEAF_NODE	1955:20	1955:20	20	cp
ASSIGN_OP	1955:23	1955:23	18	+=
LEAF_NODE	1955:23	1955:23	19	+=
RVAL	1955:26	1955:26	18	x
FIELD	1955:26	1955:26	19	x
LEAF_NODE	1955:26	1955:26	20	x
LEAF_NODE	1955:27	1955:27	16	;
EXPR_STATEMENT	1955:29	1955:37	15	cp1 += x ;
EXPR	1955:29	1955:29	16	cp1 += x
ASSIGN	1955:29	1955:36	17	cp1 += x
LVAL	1955:29	1955:29	18	cp1
FIELD	1955:29	1955:29	19	cp1
LEAF_NODE	1955:29	1955:29	20	cp1
ASSIGN_OP	1955:33	1955:33	18	+=
LEAF_NODE	1955:33	1955:33	19	+=
RVAL	1955:36	1955:36	18	x
FIELD	1955:36	1955:36	19	x
LEAF_NODE	1955:36	1955:36	20	x
LEAF_NODE	1955:37	1955:37	16	;
EXPR_STATEMENT	1955:39	1955:47	15	cp2 += x ;
EXPR	1955:39	1955:39	16	cp2 += x
ASSIGN	1955:39	1955:46	17	cp2 += x
LVAL	1955:39	1955:39	18	cp2
FIELD	1955:39	1955:39	19	cp2
LEAF_NODE	1955:39	1955:39	20	cp2
ASSIGN_OP	1955:43	1955:43	18	+=
LEAF_NODE	1955:43	1955:43	19	+=
RVAL	1955:46	1955:46	18	x
FIELD	1955:46	1955:46	19	x
LEAF_NODE	1955:46	1955:46	20	x
LEAF_NODE	1955:47	1955:47	16	;
EXPR_STATEMENT	1955:49	1955:57	15	cp3 += x ;
EXPR	1955:49	1955:49	16	cp3 += x
ASSIGN	1955:49	1955:56	17	cp3 += x
LVAL	1955:49	1955:49	18	cp3
FIELD	1955:49	1955:49	19	cp3
LEAF_NODE	1955:49	1955:49	20	cp3
ASSIGN_OP	1955:53	1955:53	18	+=
LEAF_NODE	1955:53	1955:53	19	+=
RVAL	1955:56	1955:56	18	x
FIELD	1955:56	1955:56	19	x
LEAF_NODE	1955:56	1955:56	20	x
LEAF_NODE	1955:57	1955:57	16	;
EXPR_STATEMENT	1956:20	1956:25	15	x = 0 ;
EXPR	1956:20	1956:20	16	x = 0
ASSIGN	1956:20	1956:24	17	x = 0
LVAL	1956:20	1956:20	18	x
FIELD	1956:20	1956:20	19	x
LEAF_NODE	1956:20	1956:20	20	x
ASSIGN_OP	1956:22	1956:22	18	=
LEAF_NODE	1956:22	1956:22	19	=
RVAL	1956:24	1956:24	18	0
FIELD	1956:24	1956:24	19	0
LEAF_NODE	1956:24	1956:24	20	0
LEAF_NODE	1956:25	1956:25	16	;
LEAF_NODE	1957:16	1957:16	14	}
SELECTION	1958:16	1958:21	12	
KEYWORD	1958:16	1958:16	13	else
LEAF_NODE	1958:16	1958:16	14	else
STATEMENTS	1958:21	1961:16	13	
LEAF_NODE	1958:21	1958:21	14	{
STATEMENTS	1959:20	1960:20	14	
EXPR_STATEMENT	1959:20	1959:27	15	cp += 4 ;
EXPR	1959:20	1959:20	16	cp += 4
ASSIGN	1959:20	1959:26	17	cp += 4
LVAL	1959:20	1959:20	18	cp
FIELD	1959:20	1959:20	19	cp
LEAF_NODE	1959:20	1959:20	20	cp
ASSIGN_OP	1959:23	1959:23	18	+=
LEAF_NODE	1959:23	1959:23	19	+=
RVAL	1959:26	1959:26	18	4
FIELD	1959:26	1959:26	19	4
LEAF_NODE	1959:26	1959:26	20	4
LEAF_NODE	1959:27	1959:27	16	;
EXPR_STATEMENT	1959:29	1959:37	15	cp1 += 4 ;
EXPR	1959:29	1959:29	16	cp1 += 4
ASSIGN	1959:29	1959:36	17	cp1 += 4
LVAL	1959:29	1959:29	18	cp1
FIELD	1959:29	1959:29	19	cp1
LEAF_NODE	1959:29	1959:29	20	cp1
ASSIGN_OP	1959:33	1959:33	18	+=
LEAF_NODE	1959:33	1959:33	19	+=
RVAL	1959:36	1959:36	18	4
FIELD	1959:36	1959:36	19	4
LEAF_NODE	1959:36	1959:36	20	4
LEAF_NODE	1959:37	1959:37	16	;
EXPR_STATEMENT	1959:39	1959:47	15	cp2 += 4 ;
EXPR	1959:39	1959:39	16	cp2 += 4
ASSIGN	1959:39	1959:46	17	cp2 += 4
LVAL	1959:39	1959:39	18	cp2
FIELD	1959:39	1959:39	19	cp2
LEAF_NODE	1959:39	1959:39	20	cp2
ASSIGN_OP	1959:43	1959:43	18	+=
LEAF_NODE	1959:43	1959:43	19	+=
RVAL	1959:46	1959:46	18	4
FIELD	1959:46	1959:46	19	4
LEAF_NODE	1959:46	1959:46	20	4
LEAF_NODE	1959:47	1959:47	16	;
EXPR_STATEMENT	1959:49	1959:57	15	cp3 += 4 ;
EXPR	1959:49	1959:49	16	cp3 += 4
ASSIGN	1959:49	1959:56	17	cp3 += 4
LVAL	1959:49	1959:49	18	cp3
FIELD	1959:49	1959:49	19	cp3
LEAF_NODE	1959:49	1959:49	20	cp3
ASSIGN_OP	1959:53	1959:53	18	+=
LEAF_NODE	1959:53	1959:53	19	+=
RVAL	1959:56	1959:56	18	4
FIELD	1959:56	1959:56	19	4
LEAF_NODE	1959:56	1959:56	20	4
LEAF_NODE	1959:57	1959:57	16	;
EXPR_STATEMENT	1960:20	1960:26	15	x -= 4 ;
EXPR	1960:20	1960:20	16	x -= 4
ASSIGN	1960:20	1960:25	17	x -= 4
LVAL	1960:20	1960:20	18	x
FIELD	1960:20	1960:20	19	x
LEAF_NODE	1960:20	1960:20	20	x
ASSIGN_OP	1960:22	1960:22	18	-=
LEAF_NODE	1960:22	1960:22	19	-=
RVAL	1960:25	1960:25	18	4
FIELD	1960:25	1960:25	19	4
LEAF_NODE	1960:25	1960:25	20	4
LEAF_NODE	1960:26	1960:26	16	;
LEAF_NODE	1961:16	1961:16	14	}
EXPR_STATEMENT	1962:16	1962:24	12	pp += 18 ;
EXPR	1962:16	1962:16	13	pp += 18
ASSIGN	1962:16	1962:22	14	pp += 18
LVAL	1962:16	1962:16	15	pp
FIELD	1962:16	1962:16	16	pp
LEAF_NODE	1962:16	1962:16	17	pp
ASSIGN_OP	1962:19	1962:19	15	+=
LEAF_NODE	1962:19	1962:19	16	+=
RVAL	1962:22	1962:22	15	18
FIELD	1962:22	1962:22	16	18
LEAF_NODE	1962:22	1962:22	17	18
LEAF_NODE	1962:24	1962:24	13	;
LEAF_NODE	1963:12	1963:12	11	}
SELECTION	1964:12	1965:16	9	
KEYWORD	1964:12	1964:12	10	if
LEAF_NODE	1964:12	1964:12	11	if
LEAF_NODE	1964:15	1964:15	10	(
CONDITION	1964:16	1964:16	10	h <= 4
EXPR	1964:16	1964:21	11	h <= 4
FIELD	1964:16	1964:16	12	h
LEAF_NODE	1964:16	1964:16	13	h
REL_OPERATOR	1964:18	1964:18	12	<=
LEAF_NODE	1964:18	1964:18	13	<=
FIELD	1964:21	1964:21	12	4
LEAF_NODE	1964:21	1964:21	13	4
LEAF_NODE	1964:22	1964:22	10	)
STATEMENTS	1965:16	1965:16	10	
JUMP_STATEMENT	1965:16	1965:21	11	break DESTINATION ;
KEYWORD	1965:16	1965:16	12	break
LEAF_NODE	1965:16	1965:16	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	1965:21	1965:21	12	;
EXPR_STATEMENT	1966:12	1966:18	9	h -= 4 ;
EXPR	1966:12	1966:12	10	h -= 4
ASSIGN	1966:12	1966:17	11	h -= 4
LVAL	1966:12	1966:12	12	h
FIELD	1966:12	1966:12	13	h
LEAF_NODE	1966:12	1966:12	14	h
ASSIGN_OP	1966:14	1966:14	12	-=
LEAF_NODE	1966:14	1966:14	13	-=
RVAL	1966:17	1966:17	12	4
FIELD	1966:17	1966:17	13	4
LEAF_NODE	1966:17	1966:17	14	4
LEAF_NODE	1966:18	1966:18	10	;
EXPR_STATEMENT	1967:12	1967:22	9	cp += incr ;
EXPR	1967:12	1967:12	10	cp += incr
ASSIGN	1967:12	1967:18	11	cp += incr
LVAL	1967:12	1967:12	12	cp
FIELD	1967:12	1967:12	13	cp
LEAF_NODE	1967:12	1967:12	14	cp
ASSIGN_OP	1967:15	1967:15	12	+=
LEAF_NODE	1967:15	1967:15	13	+=
RVAL	1967:18	1967:18	12	incr
FIELD	1967:18	1967:18	13	incr
LEAF_NODE	1967:18	1967:18	14	incr
LEAF_NODE	1967:22	1967:22	10	;
EXPR_STATEMENT	1968:12	1968:23	9	cp1 += incr ;
EXPR	1968:12	1968:12	10	cp1 += incr
ASSIGN	1968:12	1968:19	11	cp1 += incr
LVAL	1968:12	1968:12	12	cp1
FIELD	1968:12	1968:12	13	cp1
LEAF_NODE	1968:12	1968:12	14	cp1
ASSIGN_OP	1968:16	1968:16	12	+=
LEAF_NODE	1968:16	1968:16	13	+=
RVAL	1968:19	1968:19	12	incr
FIELD	1968:19	1968:19	13	incr
LEAF_NODE	1968:19	1968:19	14	incr
LEAF_NODE	1968:23	1968:23	10	;
EXPR_STATEMENT	1969:12	1969:23	9	cp2 += incr ;
EXPR	1969:12	1969:12	10	cp2 += incr
ASSIGN	1969:12	1969:19	11	cp2 += incr
LVAL	1969:12	1969:12	12	cp2
FIELD	1969:12	1969:12	13	cp2
LEAF_NODE	1969:12	1969:12	14	cp2
ASSIGN_OP	1969:16	1969:16	12	+=
LEAF_NODE	1969:16	1969:16	13	+=
RVAL	1969:19	1969:19	12	incr
FIELD	1969:19	1969:19	13	incr
LEAF_NODE	1969:19	1969:19	14	incr
LEAF_NODE	1969:23	1969:23	10	;
EXPR_STATEMENT	1970:12	1970:23	9	cp3 += incr ;
EXPR	1970:12	1970:12	10	cp3 += incr
ASSIGN	1970:12	1970:19	11	cp3 += incr
LVAL	1970:12	1970:12	12	cp3
FIELD	1970:12	1970:12	13	cp3
LEAF_NODE	1970:12	1970:12	14	cp3
ASSIGN_OP	1970:16	1970:16	12	+=
LEAF_NODE	1970:16	1970:16	13	+=
RVAL	1970:19	1970:19	12	incr
FIELD	1970:19	1970:19	13	incr
LEAF_NODE	1970:19	1970:19	14	incr
LEAF_NODE	1970:23	1970:23	10	;
EXPR_STATEMENT	1971:12	1971:26	9	pp += fromskew ;
EXPR	1971:12	1971:12	10	pp += fromskew
ASSIGN	1971:12	1971:18	11	pp += fromskew
LVAL	1971:12	1971:12	12	pp
FIELD	1971:12	1971:12	13	pp
LEAF_NODE	1971:12	1971:12	14	pp
ASSIGN_OP	1971:15	1971:15	12	+=
LEAF_NODE	1971:15	1971:15	13	+=
RVAL	1971:18	1971:18	12	fromskew
FIELD	1971:18	1971:18	13	fromskew
LEAF_NODE	1971:18	1971:18	14	fromskew
LEAF_NODE	1971:26	1971:26	10	;
LEAF_NODE	1972:8	1972:8	8	}
LEAF_NODE	1973:4	1973:4	5	}
LEAF_NODE	1974:0	1974:0	2	}
FUNCTION_DEF	0:0	2055:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1979:0	1979:0	2	DECLAREContigPutFunc
LEAF_NODE	1979:0	1979:0	3	DECLAREContigPutFunc
PARAMETER_LIST	1979:20	1979:45	2	( putcontig8bitYCbCr42tile )
LEAF_NODE	1979:20	1979:20	3	(
PARAMETER_DECL	1979:21	1979:21	3	putcontig8bitYCbCr42tile
LEAF_NODE	1979:21	1979:21	4	putcontig8bitYCbCr42tile
LEAF_NODE	1979:45	1979:45	3	)
LEAF_NODE	1980:0	1980:0	2	{
STATEMENTS	1981:4	2010:6	2	
SIMPLE_DECL	1981:4	1981:29	3	uint32 * cp1 ; cp1 = cp + w + toskew ;
VAR_DECL	1981:4	1981:12	4	uint32 * cp1 ; cp1 = cp + w + toskew
TYPE	1981:4	1981:10	5	uint32 *
TYPE_NAME	1981:4	1981:4	6	uint32
LEAF_NODE	1981:4	1981:4	7	uint32
POINTER	1981:10	1981:10	6	*
LEAF_NODE	1981:10	1981:10	7	*
NAME	1981:12	1981:12	5	cp1
LEAF_NODE	1981:12	1981:12	6	cp1
LEAF_NODE	0:0	0:0	5	;
INIT	1981:12	1981:12	5	cp1 = cp + w + toskew
ASSIGN	1981:12	1981:18	6	cp1 = cp + w + toskew
LVAL	1981:12	1981:12	7	cp1
NAME	1981:12	1981:12	8	cp1
LEAF_NODE	1981:12	1981:12	9	cp1
ASSIGN_OP	1981:16	1981:16	7	=
LEAF_NODE	1981:16	1981:16	8	=
RVAL	1981:18	1981:23	7	cp + w + toskew
FIELD	1981:18	1981:18	8	cp
LEAF_NODE	1981:18	1981:18	9	cp
LEAF_NODE	1981:20	1981:20	8	+
FIELD	1981:21	1981:21	8	w
LEAF_NODE	1981:21	1981:21	9	w
LEAF_NODE	1981:22	1981:22	8	+
FIELD	1981:23	1981:23	8	toskew
LEAF_NODE	1981:23	1981:23	9	toskew
LEAF_NODE	1981:29	1981:29	4	;
SIMPLE_DECL	1982:4	1982:27	3	int32 incr ; incr = 2 * toskew + w ;
VAR_DECL	1982:4	1982:10	4	int32 incr ; incr = 2 * toskew + w
TYPE	1982:4	1982:4	5	int32
TYPE_NAME	1982:4	1982:4	6	int32
LEAF_NODE	1982:4	1982:4	7	int32
NAME	1982:10	1982:10	5	incr
LEAF_NODE	1982:10	1982:10	6	incr
LEAF_NODE	0:0	0:0	5	;
INIT	1982:10	1982:10	5	incr = 2 * toskew + w
ASSIGN	1982:10	1982:17	6	incr = 2 * toskew + w
LVAL	1982:10	1982:10	7	incr
NAME	1982:10	1982:10	8	incr
LEAF_NODE	1982:10	1982:10	9	incr
ASSIGN_OP	1982:15	1982:15	7	=
LEAF_NODE	1982:15	1982:15	8	=
RVAL	1982:17	1982:26	7	2 * toskew + w
FIELD	1982:17	1982:17	8	2
LEAF_NODE	1982:17	1982:17	9	2
LEAF_NODE	1982:18	1982:18	8	*
FIELD	1982:19	1982:19	8	toskew
LEAF_NODE	1982:19	1982:19	9	toskew
LEAF_NODE	1982:25	1982:25	8	+
FIELD	1982:26	1982:26	8	w
LEAF_NODE	1982:26	1982:26	9	w
LEAF_NODE	1982:27	1982:27	4	;
EXPR_STATEMENT	1984:4	1984:12	3	( void ) y ;
EXPR	1984:4	1984:11	4	( void ) y
LEAF_NODE	1984:4	1984:4	5	(
TYPE_NAME	1984:5	1984:5	5	void
LEAF_NODE	1984:5	1984:5	6	void
LEAF_NODE	1984:9	1984:9	5	)
FIELD	1984:11	1984:11	5	y
LEAF_NODE	1984:11	1984:11	6	y
LEAF_NODE	1984:12	1984:12	4	;
EXPR_STATEMENT	1985:4	1985:39	3	fromskew = ( fromskew / 4 ) * ( 4 * 2 + 2 ) ;
EXPR	1985:4	1985:4	4	fromskew = ( fromskew / 4 ) * ( 4 * 2 + 2 )
ASSIGN	1985:4	1985:15	5	fromskew = ( fromskew / 4 ) * ( 4 * 2 + 2 )
LVAL	1985:4	1985:4	6	fromskew
FIELD	1985:4	1985:4	7	fromskew
LEAF_NODE	1985:4	1985:4	8	fromskew
ASSIGN_OP	1985:13	1985:13	6	=
LEAF_NODE	1985:13	1985:13	7	=
RVAL	1985:15	1985:38	6	( fromskew / 4 ) * ( 4 * 2 + 2 )
LEAF_NODE	1985:15	1985:15	7	(
FIELD	1985:16	1985:16	7	fromskew
LEAF_NODE	1985:16	1985:16	8	fromskew
LEAF_NODE	1985:25	1985:25	7	/
FIELD	1985:27	1985:27	7	4
LEAF_NODE	1985:27	1985:27	8	4
LEAF_NODE	1985:28	1985:28	7	)
LEAF_NODE	1985:30	1985:30	7	*
LEAF_NODE	1985:32	1985:32	7	(
FIELD	1985:33	1985:33	7	4
LEAF_NODE	1985:33	1985:33	8	4
LEAF_NODE	1985:34	1985:34	7	*
FIELD	1985:35	1985:35	7	2
LEAF_NODE	1985:35	1985:35	8	2
LEAF_NODE	1985:36	1985:36	7	+
FIELD	1985:37	1985:37	7	2
LEAF_NODE	1985:37	1985:37	8	2
LEAF_NODE	1985:38	1985:38	7	)
LEAF_NODE	1985:39	1985:39	4	;
SELECTION	1986:4	1986:38	3	
KEYWORD	1986:4	1986:4	4	if
LEAF_NODE	1986:4	1986:4	5	if
LEAF_NODE	1986:7	1986:7	4	(
CONDITION	1986:8	1986:8	4	( w & 3 ) == 0 && ( h & 1 ) == 0
EXPR	1986:8	1986:8	5	( w & 3 ) == 0 && ( h & 1 ) == 0
AND	1986:8	1986:24	6	( w & 3 ) == 0 && ( h & 1 ) == 0
EXPR	1986:8	1986:19	7	( w & 3 ) == 0
LEAF_NODE	1986:8	1986:8	8	(
FIELD	1986:9	1986:9	8	w
LEAF_NODE	1986:9	1986:9	9	w
LEAF_NODE	1986:11	1986:11	8	&
FIELD	1986:13	1986:13	8	3
LEAF_NODE	1986:13	1986:13	9	3
LEAF_NODE	1986:14	1986:14	8	)
EQ_OPERATOR	1986:16	1986:16	8	==
LEAF_NODE	1986:16	1986:16	9	==
FIELD	1986:19	1986:19	8	0
LEAF_NODE	1986:19	1986:19	9	0
LEAF_NODE	1986:21	1986:21	7	&&
EXPR	1986:24	1986:35	7	( h & 1 ) == 0
LEAF_NODE	1986:24	1986:24	8	(
FIELD	1986:25	1986:25	8	h
LEAF_NODE	1986:25	1986:25	9	h
LEAF_NODE	1986:27	1986:27	8	&
FIELD	1986:29	1986:29	8	1
LEAF_NODE	1986:29	1986:29	9	1
LEAF_NODE	1986:30	1986:30	8	)
EQ_OPERATOR	1986:32	1986:32	8	==
LEAF_NODE	1986:32	1986:32	9	==
FIELD	1986:35	1986:35	8	0
LEAF_NODE	1986:35	1986:35	9	0
LEAF_NODE	1986:36	1986:36	4	)
STATEMENTS	1986:38	2010:4	4	
LEAF_NODE	1986:38	1986:38	5	{
STATEMENTS	1987:8	1987:8	5	
ITERATION	1987:8	1987:31	6	
KEYWORD	1987:8	1987:8	7	for
LEAF_NODE	1987:8	1987:8	8	for
LEAF_NODE	1987:12	1987:12	7	(
FOR_INIT	1987:13	1987:13	7	;
LEAF_NODE	1987:13	1987:13	8	;
CONDITION	1987:15	1987:15	7	h >= 2
EXPR	1987:15	1987:20	8	h >= 2
FIELD	1987:15	1987:15	9	h
LEAF_NODE	1987:15	1987:15	10	h
REL_OPERATOR	1987:17	1987:17	9	>=
LEAF_NODE	1987:17	1987:17	10	>=
FIELD	1987:20	1987:20	9	2
LEAF_NODE	1987:20	1987:20	10	2
LEAF_NODE	1987:21	1987:21	7	;
FOR_EXPR	1987:23	1987:23	7	h -= 2
EXPR	1987:23	1987:23	8	h -= 2
ASSIGN	1987:23	1987:28	9	h -= 2
LVAL	1987:23	1987:23	10	h
FIELD	1987:23	1987:23	11	h
LEAF_NODE	1987:23	1987:23	12	h
ASSIGN_OP	1987:25	1987:25	10	-=
LEAF_NODE	1987:25	1987:25	11	-=
RVAL	1987:28	1987:28	10	2
FIELD	1987:28	1987:28	11	2
LEAF_NODE	1987:28	1987:28	12	2
LEAF_NODE	1987:29	1987:29	7	)
STATEMENTS	1987:31	2009:8	7	
LEAF_NODE	1987:31	1987:31	8	{
STATEMENTS	1988:12	2008:12	8	
EXPR_STATEMENT	1988:12	1988:20	9	x = w >> 2 ;
EXPR	1988:12	1988:12	10	x = w >> 2
ASSIGN	1988:12	1988:16	11	x = w >> 2
LVAL	1988:12	1988:12	12	x
FIELD	1988:12	1988:12	13	x
LEAF_NODE	1988:12	1988:12	14	x
ASSIGN_OP	1988:14	1988:14	12	=
LEAF_NODE	1988:14	1988:14	13	=
RVAL	1988:16	1988:19	12	w >> 2
FIELD	1988:16	1988:16	13	w
LEAF_NODE	1988:16	1988:16	14	w
LEAF_NODE	1988:17	1988:17	13	>>
FIELD	1988:19	1988:19	13	2
LEAF_NODE	1988:19	1988:19	14	2
LEAF_NODE	1988:20	1988:20	10	;
ITERATION	1989:12	1989:15	9	
KEYWORD	1989:12	1989:12	10	do
LEAF_NODE	1989:12	1989:12	11	do
LEAF_NODE	2005:20	2005:20	10	(
CONDITION	2005:21	2005:21	10	-- x
EXPR	2005:21	2005:23	11	-- x
LEAF_NODE	2005:21	2005:21	12	--
FIELD	2005:23	2005:23	12	x
LEAF_NODE	2005:23	2005:23	13	x
LEAF_NODE	2005:24	2005:24	10	)
STATEMENTS	1989:15	2005:12	10	
LEAF_NODE	1989:15	1989:15	11	{
STATEMENTS	1990:16	2004:16	11	
SIMPLE_DECL	1990:16	1990:32	12	int32 Cb ; Cb = pp [ 8 ] ;
VAR_DECL	1990:16	1990:22	13	int32 Cb ; Cb = pp [ 8 ]
TYPE	1990:16	1990:16	14	int32
TYPE_NAME	1990:16	1990:16	15	int32
LEAF_NODE	1990:16	1990:16	16	int32
NAME	1990:22	1990:22	14	Cb
LEAF_NODE	1990:22	1990:22	15	Cb
LEAF_NODE	0:0	0:0	14	;
INIT	1990:22	1990:22	14	Cb = pp [ 8 ]
ASSIGN	1990:22	1990:27	15	Cb = pp [ 8 ]
LVAL	1990:22	1990:22	16	Cb
NAME	1990:22	1990:22	17	Cb
LEAF_NODE	1990:22	1990:22	18	Cb
ASSIGN_OP	1990:25	1990:25	16	=
LEAF_NODE	1990:25	1990:25	17	=
RVAL	1990:27	1990:27	16	pp [ 8 ]
FIELD	1990:27	1990:31	17	pp [ 8 ]
LEAF_NODE	1990:27	1990:27	18	pp
LEAF_NODE	1990:29	1990:29	18	[
EXPR	1990:30	1990:30	18	8
FIELD	1990:30	1990:30	19	8
LEAF_NODE	1990:30	1990:30	20	8
LEAF_NODE	1990:31	1990:31	18	]
LEAF_NODE	1990:32	1990:32	13	;
SIMPLE_DECL	1991:16	1991:32	12	int32 Cr ; Cr = pp [ 9 ] ;
VAR_DECL	1991:16	1991:22	13	int32 Cr ; Cr = pp [ 9 ]
TYPE	1991:16	1991:16	14	int32
TYPE_NAME	1991:16	1991:16	15	int32
LEAF_NODE	1991:16	1991:16	16	int32
NAME	1991:22	1991:22	14	Cr
LEAF_NODE	1991:22	1991:22	15	Cr
LEAF_NODE	0:0	0:0	14	;
INIT	1991:22	1991:22	14	Cr = pp [ 9 ]
ASSIGN	1991:22	1991:27	15	Cr = pp [ 9 ]
LVAL	1991:22	1991:22	16	Cr
NAME	1991:22	1991:22	17	Cr
LEAF_NODE	1991:22	1991:22	18	Cr
ASSIGN_OP	1991:25	1991:25	16	=
LEAF_NODE	1991:25	1991:25	17	=
RVAL	1991:27	1991:27	16	pp [ 9 ]
FIELD	1991:27	1991:31	17	pp [ 9 ]
LEAF_NODE	1991:27	1991:27	18	pp
LEAF_NODE	1991:29	1991:29	18	[
EXPR	1991:30	1991:30	18	9
FIELD	1991:30	1991:30	19	9
LEAF_NODE	1991:30	1991:30	20	9
LEAF_NODE	1991:31	1991:31	18	]
LEAF_NODE	1991:32	1991:32	13	;
EXPR_STATEMENT	1993:16	1993:41	12	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	1993:16	1993:16	13	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	1993:16	1993:40	14	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	1993:16	1993:16	15	YCbCrtoRGB
LEAF_NODE	1993:16	1993:16	16	YCbCrtoRGB
LEAF_NODE	1993:26	1993:26	15	(
ARGUMENT	1993:27	1993:27	15	cp [ 0 ]
FIELD	1993:27	1993:32	16	cp [ 0 ]
LEAF_NODE	1993:27	1993:27	17	cp
LEAF_NODE	1993:30	1993:30	17	[
EXPR	1993:31	1993:31	17	0
FIELD	1993:31	1993:31	18	0
LEAF_NODE	1993:31	1993:31	19	0
LEAF_NODE	1993:32	1993:32	17	]
LEAF_NODE	1993:33	1993:33	15	,
ARGUMENT	1993:35	1993:35	15	pp [ 0 ]
FIELD	1993:35	1993:39	16	pp [ 0 ]
LEAF_NODE	1993:35	1993:35	17	pp
LEAF_NODE	1993:37	1993:37	17	[
EXPR	1993:38	1993:38	17	0
FIELD	1993:38	1993:38	18	0
LEAF_NODE	1993:38	1993:38	19	0
LEAF_NODE	1993:39	1993:39	17	]
LEAF_NODE	1993:40	1993:40	15	)
LEAF_NODE	1993:41	1993:41	13	;
EXPR_STATEMENT	1994:16	1994:41	12	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] ) ;
EXPR	1994:16	1994:16	13	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
FUNCTION_CALL	1994:16	1994:40	14	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
CALLEE	1994:16	1994:16	15	YCbCrtoRGB
LEAF_NODE	1994:16	1994:16	16	YCbCrtoRGB
LEAF_NODE	1994:26	1994:26	15	(
ARGUMENT	1994:27	1994:27	15	cp [ 1 ]
FIELD	1994:27	1994:32	16	cp [ 1 ]
LEAF_NODE	1994:27	1994:27	17	cp
LEAF_NODE	1994:30	1994:30	17	[
EXPR	1994:31	1994:31	17	1
FIELD	1994:31	1994:31	18	1
LEAF_NODE	1994:31	1994:31	19	1
LEAF_NODE	1994:32	1994:32	17	]
LEAF_NODE	1994:33	1994:33	15	,
ARGUMENT	1994:35	1994:35	15	pp [ 1 ]
FIELD	1994:35	1994:39	16	pp [ 1 ]
LEAF_NODE	1994:35	1994:35	17	pp
LEAF_NODE	1994:37	1994:37	17	[
EXPR	1994:38	1994:38	17	1
FIELD	1994:38	1994:38	18	1
LEAF_NODE	1994:38	1994:38	19	1
LEAF_NODE	1994:39	1994:39	17	]
LEAF_NODE	1994:40	1994:40	15	)
LEAF_NODE	1994:41	1994:41	13	;
EXPR_STATEMENT	1995:16	1995:41	12	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] ) ;
EXPR	1995:16	1995:16	13	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
FUNCTION_CALL	1995:16	1995:40	14	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
CALLEE	1995:16	1995:16	15	YCbCrtoRGB
LEAF_NODE	1995:16	1995:16	16	YCbCrtoRGB
LEAF_NODE	1995:26	1995:26	15	(
ARGUMENT	1995:27	1995:27	15	cp [ 2 ]
FIELD	1995:27	1995:32	16	cp [ 2 ]
LEAF_NODE	1995:27	1995:27	17	cp
LEAF_NODE	1995:30	1995:30	17	[
EXPR	1995:31	1995:31	17	2
FIELD	1995:31	1995:31	18	2
LEAF_NODE	1995:31	1995:31	19	2
LEAF_NODE	1995:32	1995:32	17	]
LEAF_NODE	1995:33	1995:33	15	,
ARGUMENT	1995:35	1995:35	15	pp [ 2 ]
FIELD	1995:35	1995:39	16	pp [ 2 ]
LEAF_NODE	1995:35	1995:35	17	pp
LEAF_NODE	1995:37	1995:37	17	[
EXPR	1995:38	1995:38	17	2
FIELD	1995:38	1995:38	18	2
LEAF_NODE	1995:38	1995:38	19	2
LEAF_NODE	1995:39	1995:39	17	]
LEAF_NODE	1995:40	1995:40	15	)
LEAF_NODE	1995:41	1995:41	13	;
EXPR_STATEMENT	1996:16	1996:41	12	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] ) ;
EXPR	1996:16	1996:16	13	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
FUNCTION_CALL	1996:16	1996:40	14	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
CALLEE	1996:16	1996:16	15	YCbCrtoRGB
LEAF_NODE	1996:16	1996:16	16	YCbCrtoRGB
LEAF_NODE	1996:26	1996:26	15	(
ARGUMENT	1996:27	1996:27	15	cp [ 3 ]
FIELD	1996:27	1996:32	16	cp [ 3 ]
LEAF_NODE	1996:27	1996:27	17	cp
LEAF_NODE	1996:30	1996:30	17	[
EXPR	1996:31	1996:31	17	3
FIELD	1996:31	1996:31	18	3
LEAF_NODE	1996:31	1996:31	19	3
LEAF_NODE	1996:32	1996:32	17	]
LEAF_NODE	1996:33	1996:33	15	,
ARGUMENT	1996:35	1996:35	15	pp [ 3 ]
FIELD	1996:35	1996:39	16	pp [ 3 ]
LEAF_NODE	1996:35	1996:35	17	pp
LEAF_NODE	1996:37	1996:37	17	[
EXPR	1996:38	1996:38	17	3
FIELD	1996:38	1996:38	18	3
LEAF_NODE	1996:38	1996:38	19	3
LEAF_NODE	1996:39	1996:39	17	]
LEAF_NODE	1996:40	1996:40	15	)
LEAF_NODE	1996:41	1996:41	13	;
EXPR_STATEMENT	1997:16	1997:41	12	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] ) ;
EXPR	1997:16	1997:16	13	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] )
FUNCTION_CALL	1997:16	1997:40	14	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] )
CALLEE	1997:16	1997:16	15	YCbCrtoRGB
LEAF_NODE	1997:16	1997:16	16	YCbCrtoRGB
LEAF_NODE	1997:26	1997:26	15	(
ARGUMENT	1997:27	1997:27	15	cp1 [ 0 ]
FIELD	1997:27	1997:32	16	cp1 [ 0 ]
LEAF_NODE	1997:27	1997:27	17	cp1
LEAF_NODE	1997:30	1997:30	17	[
EXPR	1997:31	1997:31	17	0
FIELD	1997:31	1997:31	18	0
LEAF_NODE	1997:31	1997:31	19	0
LEAF_NODE	1997:32	1997:32	17	]
LEAF_NODE	1997:33	1997:33	15	,
ARGUMENT	1997:35	1997:35	15	pp [ 4 ]
FIELD	1997:35	1997:39	16	pp [ 4 ]
LEAF_NODE	1997:35	1997:35	17	pp
LEAF_NODE	1997:37	1997:37	17	[
EXPR	1997:38	1997:38	17	4
FIELD	1997:38	1997:38	18	4
LEAF_NODE	1997:38	1997:38	19	4
LEAF_NODE	1997:39	1997:39	17	]
LEAF_NODE	1997:40	1997:40	15	)
LEAF_NODE	1997:41	1997:41	13	;
EXPR_STATEMENT	1998:16	1998:41	12	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] ) ;
EXPR	1998:16	1998:16	13	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] )
FUNCTION_CALL	1998:16	1998:40	14	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] )
CALLEE	1998:16	1998:16	15	YCbCrtoRGB
LEAF_NODE	1998:16	1998:16	16	YCbCrtoRGB
LEAF_NODE	1998:26	1998:26	15	(
ARGUMENT	1998:27	1998:27	15	cp1 [ 1 ]
FIELD	1998:27	1998:32	16	cp1 [ 1 ]
LEAF_NODE	1998:27	1998:27	17	cp1
LEAF_NODE	1998:30	1998:30	17	[
EXPR	1998:31	1998:31	17	1
FIELD	1998:31	1998:31	18	1
LEAF_NODE	1998:31	1998:31	19	1
LEAF_NODE	1998:32	1998:32	17	]
LEAF_NODE	1998:33	1998:33	15	,
ARGUMENT	1998:35	1998:35	15	pp [ 5 ]
FIELD	1998:35	1998:39	16	pp [ 5 ]
LEAF_NODE	1998:35	1998:35	17	pp
LEAF_NODE	1998:37	1998:37	17	[
EXPR	1998:38	1998:38	17	5
FIELD	1998:38	1998:38	18	5
LEAF_NODE	1998:38	1998:38	19	5
LEAF_NODE	1998:39	1998:39	17	]
LEAF_NODE	1998:40	1998:40	15	)
LEAF_NODE	1998:41	1998:41	13	;
EXPR_STATEMENT	1999:16	1999:41	12	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] ) ;
EXPR	1999:16	1999:16	13	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] )
FUNCTION_CALL	1999:16	1999:40	14	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] )
CALLEE	1999:16	1999:16	15	YCbCrtoRGB
LEAF_NODE	1999:16	1999:16	16	YCbCrtoRGB
LEAF_NODE	1999:26	1999:26	15	(
ARGUMENT	1999:27	1999:27	15	cp1 [ 2 ]
FIELD	1999:27	1999:32	16	cp1 [ 2 ]
LEAF_NODE	1999:27	1999:27	17	cp1
LEAF_NODE	1999:30	1999:30	17	[
EXPR	1999:31	1999:31	17	2
FIELD	1999:31	1999:31	18	2
LEAF_NODE	1999:31	1999:31	19	2
LEAF_NODE	1999:32	1999:32	17	]
LEAF_NODE	1999:33	1999:33	15	,
ARGUMENT	1999:35	1999:35	15	pp [ 6 ]
FIELD	1999:35	1999:39	16	pp [ 6 ]
LEAF_NODE	1999:35	1999:35	17	pp
LEAF_NODE	1999:37	1999:37	17	[
EXPR	1999:38	1999:38	17	6
FIELD	1999:38	1999:38	18	6
LEAF_NODE	1999:38	1999:38	19	6
LEAF_NODE	1999:39	1999:39	17	]
LEAF_NODE	1999:40	1999:40	15	)
LEAF_NODE	1999:41	1999:41	13	;
EXPR_STATEMENT	2000:16	2000:41	12	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] ) ;
EXPR	2000:16	2000:16	13	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] )
FUNCTION_CALL	2000:16	2000:40	14	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] )
CALLEE	2000:16	2000:16	15	YCbCrtoRGB
LEAF_NODE	2000:16	2000:16	16	YCbCrtoRGB
LEAF_NODE	2000:26	2000:26	15	(
ARGUMENT	2000:27	2000:27	15	cp1 [ 3 ]
FIELD	2000:27	2000:32	16	cp1 [ 3 ]
LEAF_NODE	2000:27	2000:27	17	cp1
LEAF_NODE	2000:30	2000:30	17	[
EXPR	2000:31	2000:31	17	3
FIELD	2000:31	2000:31	18	3
LEAF_NODE	2000:31	2000:31	19	3
LEAF_NODE	2000:32	2000:32	17	]
LEAF_NODE	2000:33	2000:33	15	,
ARGUMENT	2000:35	2000:35	15	pp [ 7 ]
FIELD	2000:35	2000:39	16	pp [ 7 ]
LEAF_NODE	2000:35	2000:35	17	pp
LEAF_NODE	2000:37	2000:37	17	[
EXPR	2000:38	2000:38	17	7
FIELD	2000:38	2000:38	18	7
LEAF_NODE	2000:38	2000:38	19	7
LEAF_NODE	2000:39	2000:39	17	]
LEAF_NODE	2000:40	2000:40	15	)
LEAF_NODE	2000:41	2000:41	13	;
EXPR_STATEMENT	2002:16	2002:23	12	cp += 4 ;
EXPR	2002:16	2002:16	13	cp += 4
ASSIGN	2002:16	2002:22	14	cp += 4
LVAL	2002:16	2002:16	15	cp
FIELD	2002:16	2002:16	16	cp
LEAF_NODE	2002:16	2002:16	17	cp
ASSIGN_OP	2002:19	2002:19	15	+=
LEAF_NODE	2002:19	2002:19	16	+=
RVAL	2002:22	2002:22	15	4
FIELD	2002:22	2002:22	16	4
LEAF_NODE	2002:22	2002:22	17	4
LEAF_NODE	2002:23	2002:23	13	;
EXPR_STATEMENT	2003:16	2003:24	12	cp1 += 4 ;
EXPR	2003:16	2003:16	13	cp1 += 4
ASSIGN	2003:16	2003:23	14	cp1 += 4
LVAL	2003:16	2003:16	15	cp1
FIELD	2003:16	2003:16	16	cp1
LEAF_NODE	2003:16	2003:16	17	cp1
ASSIGN_OP	2003:20	2003:20	15	+=
LEAF_NODE	2003:20	2003:20	16	+=
RVAL	2003:23	2003:23	15	4
FIELD	2003:23	2003:23	16	4
LEAF_NODE	2003:23	2003:23	17	4
LEAF_NODE	2003:24	2003:24	13	;
EXPR_STATEMENT	2004:16	2004:24	12	pp += 10 ;
EXPR	2004:16	2004:16	13	pp += 10
ASSIGN	2004:16	2004:22	14	pp += 10
LVAL	2004:16	2004:16	15	pp
FIELD	2004:16	2004:16	16	pp
LEAF_NODE	2004:16	2004:16	17	pp
ASSIGN_OP	2004:19	2004:19	15	+=
LEAF_NODE	2004:19	2004:19	16	+=
RVAL	2004:22	2004:22	15	10
FIELD	2004:22	2004:22	16	10
LEAF_NODE	2004:22	2004:22	17	10
LEAF_NODE	2004:24	2004:24	13	;
LEAF_NODE	2005:12	2005:12	11	}
LEAF_NODE	2005:25	2005:25	9	;
EXPR_STATEMENT	2006:12	2006:22	9	cp += incr ;
EXPR	2006:12	2006:12	10	cp += incr
ASSIGN	2006:12	2006:18	11	cp += incr
LVAL	2006:12	2006:12	12	cp
FIELD	2006:12	2006:12	13	cp
LEAF_NODE	2006:12	2006:12	14	cp
ASSIGN_OP	2006:15	2006:15	12	+=
LEAF_NODE	2006:15	2006:15	13	+=
RVAL	2006:18	2006:18	12	incr
FIELD	2006:18	2006:18	13	incr
LEAF_NODE	2006:18	2006:18	14	incr
LEAF_NODE	2006:22	2006:22	10	;
EXPR_STATEMENT	2007:12	2007:23	9	cp1 += incr ;
EXPR	2007:12	2007:12	10	cp1 += incr
ASSIGN	2007:12	2007:19	11	cp1 += incr
LVAL	2007:12	2007:12	12	cp1
FIELD	2007:12	2007:12	13	cp1
LEAF_NODE	2007:12	2007:12	14	cp1
ASSIGN_OP	2007:16	2007:16	12	+=
LEAF_NODE	2007:16	2007:16	13	+=
RVAL	2007:19	2007:19	12	incr
FIELD	2007:19	2007:19	13	incr
LEAF_NODE	2007:19	2007:19	14	incr
LEAF_NODE	2007:23	2007:23	10	;
EXPR_STATEMENT	2008:12	2008:26	9	pp += fromskew ;
EXPR	2008:12	2008:12	10	pp += fromskew
ASSIGN	2008:12	2008:18	11	pp += fromskew
LVAL	2008:12	2008:12	12	pp
FIELD	2008:12	2008:12	13	pp
LEAF_NODE	2008:12	2008:12	14	pp
ASSIGN_OP	2008:15	2008:15	12	+=
LEAF_NODE	2008:15	2008:15	13	+=
RVAL	2008:18	2008:18	12	fromskew
FIELD	2008:18	2008:18	13	fromskew
LEAF_NODE	2008:18	2008:18	14	fromskew
LEAF_NODE	2008:26	2008:26	10	;
LEAF_NODE	2009:8	2009:8	8	}
LEAF_NODE	2010:4	2010:4	5	}
SELECTION	2010:6	2010:11	3	
KEYWORD	2010:6	2010:6	4	else
LEAF_NODE	2010:6	2010:6	5	else
STATEMENTS	2010:11	2054:4	4	
LEAF_NODE	2010:11	2010:11	5	{
STATEMENTS	2011:8	2011:8	5	
ITERATION	2011:8	2011:22	6	
KEYWORD	2011:8	2011:8	7	while
LEAF_NODE	2011:8	2011:8	8	while
LEAF_NODE	2011:14	2011:14	7	(
CONDITION	2011:15	2011:15	7	h > 0
EXPR	2011:15	2011:19	8	h > 0
FIELD	2011:15	2011:15	9	h
LEAF_NODE	2011:15	2011:15	10	h
REL_OPERATOR	2011:17	2011:17	9	>
LEAF_NODE	2011:17	2011:17	10	>
FIELD	2011:19	2011:19	9	0
LEAF_NODE	2011:19	2011:19	10	0
LEAF_NODE	2011:20	2011:20	7	)
STATEMENTS	2011:22	2053:8	7	
LEAF_NODE	2011:22	2011:22	8	{
STATEMENTS	2012:12	2052:12	8	
ITERATION	2012:12	2012:32	9	
KEYWORD	2012:12	2012:12	10	for
LEAF_NODE	2012:12	2012:12	11	for
LEAF_NODE	2012:16	2012:16	10	(
FOR_INIT	2012:17	2012:22	10	x = w ;
EXPR	2012:17	2012:17	11	x = w
ASSIGN	2012:17	2012:21	12	x = w
LVAL	2012:17	2012:17	13	x
FIELD	2012:17	2012:17	14	x
LEAF_NODE	2012:17	2012:17	15	x
ASSIGN_OP	2012:19	2012:19	13	=
LEAF_NODE	2012:19	2012:19	14	=
RVAL	2012:21	2012:21	13	w
FIELD	2012:21	2012:21	14	w
LEAF_NODE	2012:21	2012:21	15	w
LEAF_NODE	2012:22	2012:22	11	;
CONDITION	2012:24	2012:24	10	x > 0
EXPR	2012:24	2012:28	11	x > 0
FIELD	2012:24	2012:24	12	x
LEAF_NODE	2012:24	2012:24	13	x
REL_OPERATOR	2012:26	2012:26	12	>
LEAF_NODE	2012:26	2012:26	13	>
FIELD	2012:28	2012:28	12	0
LEAF_NODE	2012:28	2012:28	13	0
LEAF_NODE	2012:29	2012:29	10	;
LEAF_NODE	0:0	0:0	10	FOR_EXPR
LEAF_NODE	2012:30	2012:30	10	)
STATEMENTS	2012:32	2046:12	10	
LEAF_NODE	2012:32	2012:32	11	{
STATEMENTS	2013:16	2045:16	11	
SIMPLE_DECL	2013:16	2013:32	12	int32 Cb ; Cb = pp [ 8 ] ;
VAR_DECL	2013:16	2013:22	13	int32 Cb ; Cb = pp [ 8 ]
TYPE	2013:16	2013:16	14	int32
TYPE_NAME	2013:16	2013:16	15	int32
LEAF_NODE	2013:16	2013:16	16	int32
NAME	2013:22	2013:22	14	Cb
LEAF_NODE	2013:22	2013:22	15	Cb
LEAF_NODE	0:0	0:0	14	;
INIT	2013:22	2013:22	14	Cb = pp [ 8 ]
ASSIGN	2013:22	2013:27	15	Cb = pp [ 8 ]
LVAL	2013:22	2013:22	16	Cb
NAME	2013:22	2013:22	17	Cb
LEAF_NODE	2013:22	2013:22	18	Cb
ASSIGN_OP	2013:25	2013:25	16	=
LEAF_NODE	2013:25	2013:25	17	=
RVAL	2013:27	2013:27	16	pp [ 8 ]
FIELD	2013:27	2013:31	17	pp [ 8 ]
LEAF_NODE	2013:27	2013:27	18	pp
LEAF_NODE	2013:29	2013:29	18	[
EXPR	2013:30	2013:30	18	8
FIELD	2013:30	2013:30	19	8
LEAF_NODE	2013:30	2013:30	20	8
LEAF_NODE	2013:31	2013:31	18	]
LEAF_NODE	2013:32	2013:32	13	;
SIMPLE_DECL	2014:16	2014:32	12	int32 Cr ; Cr = pp [ 9 ] ;
VAR_DECL	2014:16	2014:22	13	int32 Cr ; Cr = pp [ 9 ]
TYPE	2014:16	2014:16	14	int32
TYPE_NAME	2014:16	2014:16	15	int32
LEAF_NODE	2014:16	2014:16	16	int32
NAME	2014:22	2014:22	14	Cr
LEAF_NODE	2014:22	2014:22	15	Cr
LEAF_NODE	0:0	0:0	14	;
INIT	2014:22	2014:22	14	Cr = pp [ 9 ]
ASSIGN	2014:22	2014:27	15	Cr = pp [ 9 ]
LVAL	2014:22	2014:22	16	Cr
NAME	2014:22	2014:22	17	Cr
LEAF_NODE	2014:22	2014:22	18	Cr
ASSIGN_OP	2014:25	2014:25	16	=
LEAF_NODE	2014:25	2014:25	17	=
RVAL	2014:27	2014:27	16	pp [ 9 ]
FIELD	2014:27	2014:31	17	pp [ 9 ]
LEAF_NODE	2014:27	2014:27	18	pp
LEAF_NODE	2014:29	2014:29	18	[
EXPR	2014:30	2014:30	18	9
FIELD	2014:30	2014:30	19	9
LEAF_NODE	2014:30	2014:30	20	9
LEAF_NODE	2014:31	2014:31	18	]
LEAF_NODE	2014:32	2014:32	13	;
SELECTION	2015:16	2015:27	12	
KEYWORD	2015:16	2015:16	13	switch
LEAF_NODE	2015:16	2015:16	14	switch
LEAF_NODE	2015:23	2015:23	13	(
CONDITION	2015:24	2015:24	13	x
EXPR	2015:24	2015:24	14	x
FIELD	2015:24	2015:24	15	x
LEAF_NODE	2015:24	2015:24	16	x
LEAF_NODE	2015:25	2015:25	13	)
STATEMENTS	2015:27	2036:16	13	
LEAF_NODE	2015:27	2015:27	14	{
STATEMENTS	2016:16	2032:20	14	
LABEL	2016:16	2016:23	15	default :
LEAF_NODE	2016:16	2016:16	16	default
LEAF_NODE	2016:23	2016:23	16	:
SELECTION	2017:20	2017:31	15	
KEYWORD	2017:20	2017:20	16	switch
LEAF_NODE	2017:20	2017:20	17	switch
LEAF_NODE	2017:27	2017:27	16	(
CONDITION	2017:28	2017:28	16	h
EXPR	2017:28	2017:28	17	h
FIELD	2017:28	2017:28	18	h
LEAF_NODE	2017:28	2017:28	19	h
LEAF_NODE	2017:29	2017:29	16	)
STATEMENTS	2017:31	2020:20	16	
LEAF_NODE	2017:31	2017:31	17	{
STATEMENTS	2018:20	2019:29	17	
LABEL	2018:20	2018:27	18	default :
LEAF_NODE	2018:20	2018:20	19	default
LEAF_NODE	2018:27	2018:27	19	:
EXPR_STATEMENT	2018:29	2018:55	18	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] ) ;
EXPR	2018:29	2018:29	19	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] )
FUNCTION_CALL	2018:29	2018:54	20	YCbCrtoRGB ( cp1 [ 3 ] , pp [ 7 ] )
CALLEE	2018:29	2018:29	21	YCbCrtoRGB
LEAF_NODE	2018:29	2018:29	22	YCbCrtoRGB
LEAF_NODE	2018:39	2018:39	21	(
ARGUMENT	2018:40	2018:40	21	cp1 [ 3 ]
FIELD	2018:40	2018:45	22	cp1 [ 3 ]
LEAF_NODE	2018:40	2018:40	23	cp1
LEAF_NODE	2018:43	2018:43	23	[
EXPR	2018:44	2018:44	23	3
FIELD	2018:44	2018:44	24	3
LEAF_NODE	2018:44	2018:44	25	3
LEAF_NODE	2018:45	2018:45	23	]
LEAF_NODE	2018:46	2018:46	21	,
ARGUMENT	2018:48	2018:48	21	pp [ 7 ]
FIELD	2018:48	2018:53	22	pp [ 7 ]
LEAF_NODE	2018:48	2018:48	23	pp
LEAF_NODE	2018:50	2018:50	23	[
EXPR	2018:52	2018:52	23	7
FIELD	2018:52	2018:52	24	7
LEAF_NODE	2018:52	2018:52	25	7
LEAF_NODE	2018:53	2018:53	23	]
LEAF_NODE	2018:54	2018:54	21	)
LEAF_NODE	2018:55	2018:55	19	;
LABEL	2019:20	2019:26	18	case 1 :
LEAF_NODE	2019:20	2019:20	19	case
LEAF_NODE	2019:25	2019:25	19	1
LEAF_NODE	2019:26	2019:26	19	:
EXPR_STATEMENT	2019:29	2019:55	18	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] ) ;
EXPR	2019:29	2019:29	19	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
FUNCTION_CALL	2019:29	2019:54	20	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
CALLEE	2019:29	2019:29	21	YCbCrtoRGB
LEAF_NODE	2019:29	2019:29	22	YCbCrtoRGB
LEAF_NODE	2019:39	2019:39	21	(
ARGUMENT	2019:40	2019:40	21	cp [ 3 ]
FIELD	2019:40	2019:45	22	cp [ 3 ]
LEAF_NODE	2019:40	2019:40	23	cp
LEAF_NODE	2019:43	2019:43	23	[
EXPR	2019:44	2019:44	23	3
FIELD	2019:44	2019:44	24	3
LEAF_NODE	2019:44	2019:44	25	3
LEAF_NODE	2019:45	2019:45	23	]
LEAF_NODE	2019:46	2019:46	21	,
ARGUMENT	2019:48	2019:48	21	pp [ 3 ]
FIELD	2019:48	2019:53	22	pp [ 3 ]
LEAF_NODE	2019:48	2019:48	23	pp
LEAF_NODE	2019:50	2019:50	23	[
EXPR	2019:52	2019:52	23	3
FIELD	2019:52	2019:52	24	3
LEAF_NODE	2019:52	2019:52	25	3
LEAF_NODE	2019:53	2019:53	23	]
LEAF_NODE	2019:54	2019:54	21	)
LEAF_NODE	2019:55	2019:55	19	;
LEAF_NODE	2020:20	2020:20	17	}
LABEL	2021:16	2021:22	15	case 3 :
LEAF_NODE	2021:16	2021:16	16	case
LEAF_NODE	2021:21	2021:21	16	3
LEAF_NODE	2021:22	2021:22	16	:
SELECTION	2022:20	2022:31	15	
KEYWORD	2022:20	2022:20	16	switch
LEAF_NODE	2022:20	2022:20	17	switch
LEAF_NODE	2022:27	2022:27	16	(
CONDITION	2022:28	2022:28	16	h
EXPR	2022:28	2022:28	17	h
FIELD	2022:28	2022:28	18	h
LEAF_NODE	2022:28	2022:28	19	h
LEAF_NODE	2022:29	2022:29	16	)
STATEMENTS	2022:31	2025:20	16	
LEAF_NODE	2022:31	2022:31	17	{
STATEMENTS	2023:20	2024:29	17	
LABEL	2023:20	2023:27	18	default :
LEAF_NODE	2023:20	2023:20	19	default
LEAF_NODE	2023:27	2023:27	19	:
EXPR_STATEMENT	2023:29	2023:55	18	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] ) ;
EXPR	2023:29	2023:29	19	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] )
FUNCTION_CALL	2023:29	2023:54	20	YCbCrtoRGB ( cp1 [ 2 ] , pp [ 6 ] )
CALLEE	2023:29	2023:29	21	YCbCrtoRGB
LEAF_NODE	2023:29	2023:29	22	YCbCrtoRGB
LEAF_NODE	2023:39	2023:39	21	(
ARGUMENT	2023:40	2023:40	21	cp1 [ 2 ]
FIELD	2023:40	2023:45	22	cp1 [ 2 ]
LEAF_NODE	2023:40	2023:40	23	cp1
LEAF_NODE	2023:43	2023:43	23	[
EXPR	2023:44	2023:44	23	2
FIELD	2023:44	2023:44	24	2
LEAF_NODE	2023:44	2023:44	25	2
LEAF_NODE	2023:45	2023:45	23	]
LEAF_NODE	2023:46	2023:46	21	,
ARGUMENT	2023:48	2023:48	21	pp [ 6 ]
FIELD	2023:48	2023:53	22	pp [ 6 ]
LEAF_NODE	2023:48	2023:48	23	pp
LEAF_NODE	2023:50	2023:50	23	[
EXPR	2023:52	2023:52	23	6
FIELD	2023:52	2023:52	24	6
LEAF_NODE	2023:52	2023:52	25	6
LEAF_NODE	2023:53	2023:53	23	]
LEAF_NODE	2023:54	2023:54	21	)
LEAF_NODE	2023:55	2023:55	19	;
LABEL	2024:20	2024:26	18	case 1 :
LEAF_NODE	2024:20	2024:20	19	case
LEAF_NODE	2024:25	2024:25	19	1
LEAF_NODE	2024:26	2024:26	19	:
EXPR_STATEMENT	2024:29	2024:55	18	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] ) ;
EXPR	2024:29	2024:29	19	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
FUNCTION_CALL	2024:29	2024:54	20	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
CALLEE	2024:29	2024:29	21	YCbCrtoRGB
LEAF_NODE	2024:29	2024:29	22	YCbCrtoRGB
LEAF_NODE	2024:39	2024:39	21	(
ARGUMENT	2024:40	2024:40	21	cp [ 2 ]
FIELD	2024:40	2024:45	22	cp [ 2 ]
LEAF_NODE	2024:40	2024:40	23	cp
LEAF_NODE	2024:43	2024:43	23	[
EXPR	2024:44	2024:44	23	2
FIELD	2024:44	2024:44	24	2
LEAF_NODE	2024:44	2024:44	25	2
LEAF_NODE	2024:45	2024:45	23	]
LEAF_NODE	2024:46	2024:46	21	,
ARGUMENT	2024:48	2024:48	21	pp [ 2 ]
FIELD	2024:48	2024:53	22	pp [ 2 ]
LEAF_NODE	2024:48	2024:48	23	pp
LEAF_NODE	2024:50	2024:50	23	[
EXPR	2024:52	2024:52	23	2
FIELD	2024:52	2024:52	24	2
LEAF_NODE	2024:52	2024:52	25	2
LEAF_NODE	2024:53	2024:53	23	]
LEAF_NODE	2024:54	2024:54	21	)
LEAF_NODE	2024:55	2024:55	19	;
LEAF_NODE	2025:20	2025:20	17	}
LABEL	2026:16	2026:22	15	case 2 :
LEAF_NODE	2026:16	2026:16	16	case
LEAF_NODE	2026:21	2026:21	16	2
LEAF_NODE	2026:22	2026:22	16	:
SELECTION	2027:20	2027:31	15	
KEYWORD	2027:20	2027:20	16	switch
LEAF_NODE	2027:20	2027:20	17	switch
LEAF_NODE	2027:27	2027:27	16	(
CONDITION	2027:28	2027:28	16	h
EXPR	2027:28	2027:28	17	h
FIELD	2027:28	2027:28	18	h
LEAF_NODE	2027:28	2027:28	19	h
LEAF_NODE	2027:29	2027:29	16	)
STATEMENTS	2027:31	2030:20	16	
LEAF_NODE	2027:31	2027:31	17	{
STATEMENTS	2028:20	2029:29	17	
LABEL	2028:20	2028:27	18	default :
LEAF_NODE	2028:20	2028:20	19	default
LEAF_NODE	2028:27	2028:27	19	:
EXPR_STATEMENT	2028:29	2028:55	18	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] ) ;
EXPR	2028:29	2028:29	19	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] )
FUNCTION_CALL	2028:29	2028:54	20	YCbCrtoRGB ( cp1 [ 1 ] , pp [ 5 ] )
CALLEE	2028:29	2028:29	21	YCbCrtoRGB
LEAF_NODE	2028:29	2028:29	22	YCbCrtoRGB
LEAF_NODE	2028:39	2028:39	21	(
ARGUMENT	2028:40	2028:40	21	cp1 [ 1 ]
FIELD	2028:40	2028:45	22	cp1 [ 1 ]
LEAF_NODE	2028:40	2028:40	23	cp1
LEAF_NODE	2028:43	2028:43	23	[
EXPR	2028:44	2028:44	23	1
FIELD	2028:44	2028:44	24	1
LEAF_NODE	2028:44	2028:44	25	1
LEAF_NODE	2028:45	2028:45	23	]
LEAF_NODE	2028:46	2028:46	21	,
ARGUMENT	2028:48	2028:48	21	pp [ 5 ]
FIELD	2028:48	2028:53	22	pp [ 5 ]
LEAF_NODE	2028:48	2028:48	23	pp
LEAF_NODE	2028:50	2028:50	23	[
EXPR	2028:52	2028:52	23	5
FIELD	2028:52	2028:52	24	5
LEAF_NODE	2028:52	2028:52	25	5
LEAF_NODE	2028:53	2028:53	23	]
LEAF_NODE	2028:54	2028:54	21	)
LEAF_NODE	2028:55	2028:55	19	;
LABEL	2029:20	2029:26	18	case 1 :
LEAF_NODE	2029:20	2029:20	19	case
LEAF_NODE	2029:25	2029:25	19	1
LEAF_NODE	2029:26	2029:26	19	:
EXPR_STATEMENT	2029:29	2029:55	18	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] ) ;
EXPR	2029:29	2029:29	19	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
FUNCTION_CALL	2029:29	2029:54	20	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
CALLEE	2029:29	2029:29	21	YCbCrtoRGB
LEAF_NODE	2029:29	2029:29	22	YCbCrtoRGB
LEAF_NODE	2029:39	2029:39	21	(
ARGUMENT	2029:40	2029:40	21	cp [ 1 ]
FIELD	2029:40	2029:45	22	cp [ 1 ]
LEAF_NODE	2029:40	2029:40	23	cp
LEAF_NODE	2029:43	2029:43	23	[
EXPR	2029:44	2029:44	23	1
FIELD	2029:44	2029:44	24	1
LEAF_NODE	2029:44	2029:44	25	1
LEAF_NODE	2029:45	2029:45	23	]
LEAF_NODE	2029:46	2029:46	21	,
ARGUMENT	2029:48	2029:48	21	pp [ 1 ]
FIELD	2029:48	2029:53	22	pp [ 1 ]
LEAF_NODE	2029:48	2029:48	23	pp
LEAF_NODE	2029:50	2029:50	23	[
EXPR	2029:52	2029:52	23	1
FIELD	2029:52	2029:52	24	1
LEAF_NODE	2029:52	2029:52	25	1
LEAF_NODE	2029:53	2029:53	23	]
LEAF_NODE	2029:54	2029:54	21	)
LEAF_NODE	2029:55	2029:55	19	;
LEAF_NODE	2030:20	2030:20	17	}
LABEL	2031:16	2031:22	15	case 1 :
LEAF_NODE	2031:16	2031:16	16	case
LEAF_NODE	2031:21	2031:21	16	1
LEAF_NODE	2031:22	2031:22	16	:
SELECTION	2032:20	2032:31	15	
KEYWORD	2032:20	2032:20	16	switch
LEAF_NODE	2032:20	2032:20	17	switch
LEAF_NODE	2032:27	2032:27	16	(
CONDITION	2032:28	2032:28	16	h
EXPR	2032:28	2032:28	17	h
FIELD	2032:28	2032:28	18	h
LEAF_NODE	2032:28	2032:28	19	h
LEAF_NODE	2032:29	2032:29	16	)
STATEMENTS	2032:31	2035:20	16	
LEAF_NODE	2032:31	2032:31	17	{
STATEMENTS	2033:20	2034:29	17	
LABEL	2033:20	2033:27	18	default :
LEAF_NODE	2033:20	2033:20	19	default
LEAF_NODE	2033:27	2033:27	19	:
EXPR_STATEMENT	2033:29	2033:55	18	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] ) ;
EXPR	2033:29	2033:29	19	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] )
FUNCTION_CALL	2033:29	2033:54	20	YCbCrtoRGB ( cp1 [ 0 ] , pp [ 4 ] )
CALLEE	2033:29	2033:29	21	YCbCrtoRGB
LEAF_NODE	2033:29	2033:29	22	YCbCrtoRGB
LEAF_NODE	2033:39	2033:39	21	(
ARGUMENT	2033:40	2033:40	21	cp1 [ 0 ]
FIELD	2033:40	2033:45	22	cp1 [ 0 ]
LEAF_NODE	2033:40	2033:40	23	cp1
LEAF_NODE	2033:43	2033:43	23	[
EXPR	2033:44	2033:44	23	0
FIELD	2033:44	2033:44	24	0
LEAF_NODE	2033:44	2033:44	25	0
LEAF_NODE	2033:45	2033:45	23	]
LEAF_NODE	2033:46	2033:46	21	,
ARGUMENT	2033:48	2033:48	21	pp [ 4 ]
FIELD	2033:48	2033:53	22	pp [ 4 ]
LEAF_NODE	2033:48	2033:48	23	pp
LEAF_NODE	2033:50	2033:50	23	[
EXPR	2033:52	2033:52	23	4
FIELD	2033:52	2033:52	24	4
LEAF_NODE	2033:52	2033:52	25	4
LEAF_NODE	2033:53	2033:53	23	]
LEAF_NODE	2033:54	2033:54	21	)
LEAF_NODE	2033:55	2033:55	19	;
LABEL	2034:20	2034:26	18	case 1 :
LEAF_NODE	2034:20	2034:20	19	case
LEAF_NODE	2034:25	2034:25	19	1
LEAF_NODE	2034:26	2034:26	19	:
EXPR_STATEMENT	2034:29	2034:55	18	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2034:29	2034:29	19	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2034:29	2034:54	20	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2034:29	2034:29	21	YCbCrtoRGB
LEAF_NODE	2034:29	2034:29	22	YCbCrtoRGB
LEAF_NODE	2034:39	2034:39	21	(
ARGUMENT	2034:40	2034:40	21	cp [ 0 ]
FIELD	2034:40	2034:45	22	cp [ 0 ]
LEAF_NODE	2034:40	2034:40	23	cp
LEAF_NODE	2034:43	2034:43	23	[
EXPR	2034:44	2034:44	23	0
FIELD	2034:44	2034:44	24	0
LEAF_NODE	2034:44	2034:44	25	0
LEAF_NODE	2034:45	2034:45	23	]
LEAF_NODE	2034:46	2034:46	21	,
ARGUMENT	2034:48	2034:48	21	pp [ 0 ]
FIELD	2034:48	2034:53	22	pp [ 0 ]
LEAF_NODE	2034:48	2034:48	23	pp
LEAF_NODE	2034:50	2034:50	23	[
EXPR	2034:52	2034:52	23	0
FIELD	2034:52	2034:52	24	0
LEAF_NODE	2034:52	2034:52	25	0
LEAF_NODE	2034:53	2034:53	23	]
LEAF_NODE	2034:54	2034:54	21	)
LEAF_NODE	2034:55	2034:55	19	;
LEAF_NODE	2035:20	2035:20	17	}
LEAF_NODE	2036:16	2036:16	14	}
SELECTION	2037:16	2037:27	12	
KEYWORD	2037:16	2037:16	13	if
LEAF_NODE	2037:16	2037:16	14	if
LEAF_NODE	2037:19	2037:19	13	(
CONDITION	2037:20	2037:20	13	x < 4
EXPR	2037:20	2037:24	14	x < 4
FIELD	2037:20	2037:20	15	x
LEAF_NODE	2037:20	2037:20	16	x
REL_OPERATOR	2037:22	2037:22	15	<
LEAF_NODE	2037:22	2037:22	16	<
FIELD	2037:24	2037:24	15	4
LEAF_NODE	2037:24	2037:24	16	4
LEAF_NODE	2037:25	2037:25	13	)
STATEMENTS	2037:27	2040:16	13	
LEAF_NODE	2037:27	2037:27	14	{
STATEMENTS	2038:20	2039:20	14	
EXPR_STATEMENT	2038:20	2038:27	15	cp += x ;
EXPR	2038:20	2038:20	16	cp += x
ASSIGN	2038:20	2038:26	17	cp += x
LVAL	2038:20	2038:20	18	cp
FIELD	2038:20	2038:20	19	cp
LEAF_NODE	2038:20	2038:20	20	cp
ASSIGN_OP	2038:23	2038:23	18	+=
LEAF_NODE	2038:23	2038:23	19	+=
RVAL	2038:26	2038:26	18	x
FIELD	2038:26	2038:26	19	x
LEAF_NODE	2038:26	2038:26	20	x
LEAF_NODE	2038:27	2038:27	16	;
EXPR_STATEMENT	2038:29	2038:37	15	cp1 += x ;
EXPR	2038:29	2038:29	16	cp1 += x
ASSIGN	2038:29	2038:36	17	cp1 += x
LVAL	2038:29	2038:29	18	cp1
FIELD	2038:29	2038:29	19	cp1
LEAF_NODE	2038:29	2038:29	20	cp1
ASSIGN_OP	2038:33	2038:33	18	+=
LEAF_NODE	2038:33	2038:33	19	+=
RVAL	2038:36	2038:36	18	x
FIELD	2038:36	2038:36	19	x
LEAF_NODE	2038:36	2038:36	20	x
LEAF_NODE	2038:37	2038:37	16	;
EXPR_STATEMENT	2039:20	2039:25	15	x = 0 ;
EXPR	2039:20	2039:20	16	x = 0
ASSIGN	2039:20	2039:24	17	x = 0
LVAL	2039:20	2039:20	18	x
FIELD	2039:20	2039:20	19	x
LEAF_NODE	2039:20	2039:20	20	x
ASSIGN_OP	2039:22	2039:22	18	=
LEAF_NODE	2039:22	2039:22	19	=
RVAL	2039:24	2039:24	18	0
FIELD	2039:24	2039:24	19	0
LEAF_NODE	2039:24	2039:24	20	0
LEAF_NODE	2039:25	2039:25	16	;
LEAF_NODE	2040:16	2040:16	14	}
SELECTION	2041:16	2041:21	12	
KEYWORD	2041:16	2041:16	13	else
LEAF_NODE	2041:16	2041:16	14	else
STATEMENTS	2041:21	2044:16	13	
LEAF_NODE	2041:21	2041:21	14	{
STATEMENTS	2042:20	2043:20	14	
EXPR_STATEMENT	2042:20	2042:27	15	cp += 4 ;
EXPR	2042:20	2042:20	16	cp += 4
ASSIGN	2042:20	2042:26	17	cp += 4
LVAL	2042:20	2042:20	18	cp
FIELD	2042:20	2042:20	19	cp
LEAF_NODE	2042:20	2042:20	20	cp
ASSIGN_OP	2042:23	2042:23	18	+=
LEAF_NODE	2042:23	2042:23	19	+=
RVAL	2042:26	2042:26	18	4
FIELD	2042:26	2042:26	19	4
LEAF_NODE	2042:26	2042:26	20	4
LEAF_NODE	2042:27	2042:27	16	;
EXPR_STATEMENT	2042:29	2042:37	15	cp1 += 4 ;
EXPR	2042:29	2042:29	16	cp1 += 4
ASSIGN	2042:29	2042:36	17	cp1 += 4
LVAL	2042:29	2042:29	18	cp1
FIELD	2042:29	2042:29	19	cp1
LEAF_NODE	2042:29	2042:29	20	cp1
ASSIGN_OP	2042:33	2042:33	18	+=
LEAF_NODE	2042:33	2042:33	19	+=
RVAL	2042:36	2042:36	18	4
FIELD	2042:36	2042:36	19	4
LEAF_NODE	2042:36	2042:36	20	4
LEAF_NODE	2042:37	2042:37	16	;
EXPR_STATEMENT	2043:20	2043:26	15	x -= 4 ;
EXPR	2043:20	2043:20	16	x -= 4
ASSIGN	2043:20	2043:25	17	x -= 4
LVAL	2043:20	2043:20	18	x
FIELD	2043:20	2043:20	19	x
LEAF_NODE	2043:20	2043:20	20	x
ASSIGN_OP	2043:22	2043:22	18	-=
LEAF_NODE	2043:22	2043:22	19	-=
RVAL	2043:25	2043:25	18	4
FIELD	2043:25	2043:25	19	4
LEAF_NODE	2043:25	2043:25	20	4
LEAF_NODE	2043:26	2043:26	16	;
LEAF_NODE	2044:16	2044:16	14	}
EXPR_STATEMENT	2045:16	2045:24	12	pp += 10 ;
EXPR	2045:16	2045:16	13	pp += 10
ASSIGN	2045:16	2045:22	14	pp += 10
LVAL	2045:16	2045:16	15	pp
FIELD	2045:16	2045:16	16	pp
LEAF_NODE	2045:16	2045:16	17	pp
ASSIGN_OP	2045:19	2045:19	15	+=
LEAF_NODE	2045:19	2045:19	16	+=
RVAL	2045:22	2045:22	15	10
FIELD	2045:22	2045:22	16	10
LEAF_NODE	2045:22	2045:22	17	10
LEAF_NODE	2045:24	2045:24	13	;
LEAF_NODE	2046:12	2046:12	11	}
SELECTION	2047:12	2048:16	9	
KEYWORD	2047:12	2047:12	10	if
LEAF_NODE	2047:12	2047:12	11	if
LEAF_NODE	2047:15	2047:15	10	(
CONDITION	2047:16	2047:16	10	h <= 2
EXPR	2047:16	2047:21	11	h <= 2
FIELD	2047:16	2047:16	12	h
LEAF_NODE	2047:16	2047:16	13	h
REL_OPERATOR	2047:18	2047:18	12	<=
LEAF_NODE	2047:18	2047:18	13	<=
FIELD	2047:21	2047:21	12	2
LEAF_NODE	2047:21	2047:21	13	2
LEAF_NODE	2047:22	2047:22	10	)
STATEMENTS	2048:16	2048:16	10	
JUMP_STATEMENT	2048:16	2048:21	11	break DESTINATION ;
KEYWORD	2048:16	2048:16	12	break
LEAF_NODE	2048:16	2048:16	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	2048:21	2048:21	12	;
EXPR_STATEMENT	2049:12	2049:18	9	h -= 2 ;
EXPR	2049:12	2049:12	10	h -= 2
ASSIGN	2049:12	2049:17	11	h -= 2
LVAL	2049:12	2049:12	12	h
FIELD	2049:12	2049:12	13	h
LEAF_NODE	2049:12	2049:12	14	h
ASSIGN_OP	2049:14	2049:14	12	-=
LEAF_NODE	2049:14	2049:14	13	-=
RVAL	2049:17	2049:17	12	2
FIELD	2049:17	2049:17	13	2
LEAF_NODE	2049:17	2049:17	14	2
LEAF_NODE	2049:18	2049:18	10	;
EXPR_STATEMENT	2050:12	2050:22	9	cp += incr ;
EXPR	2050:12	2050:12	10	cp += incr
ASSIGN	2050:12	2050:18	11	cp += incr
LVAL	2050:12	2050:12	12	cp
FIELD	2050:12	2050:12	13	cp
LEAF_NODE	2050:12	2050:12	14	cp
ASSIGN_OP	2050:15	2050:15	12	+=
LEAF_NODE	2050:15	2050:15	13	+=
RVAL	2050:18	2050:18	12	incr
FIELD	2050:18	2050:18	13	incr
LEAF_NODE	2050:18	2050:18	14	incr
LEAF_NODE	2050:22	2050:22	10	;
EXPR_STATEMENT	2051:12	2051:23	9	cp1 += incr ;
EXPR	2051:12	2051:12	10	cp1 += incr
ASSIGN	2051:12	2051:19	11	cp1 += incr
LVAL	2051:12	2051:12	12	cp1
FIELD	2051:12	2051:12	13	cp1
LEAF_NODE	2051:12	2051:12	14	cp1
ASSIGN_OP	2051:16	2051:16	12	+=
LEAF_NODE	2051:16	2051:16	13	+=
RVAL	2051:19	2051:19	12	incr
FIELD	2051:19	2051:19	13	incr
LEAF_NODE	2051:19	2051:19	14	incr
LEAF_NODE	2051:23	2051:23	10	;
EXPR_STATEMENT	2052:12	2052:26	9	pp += fromskew ;
EXPR	2052:12	2052:12	10	pp += fromskew
ASSIGN	2052:12	2052:18	11	pp += fromskew
LVAL	2052:12	2052:12	12	pp
FIELD	2052:12	2052:12	13	pp
LEAF_NODE	2052:12	2052:12	14	pp
ASSIGN_OP	2052:15	2052:15	12	+=
LEAF_NODE	2052:15	2052:15	13	+=
RVAL	2052:18	2052:18	12	fromskew
FIELD	2052:18	2052:18	13	fromskew
LEAF_NODE	2052:18	2052:18	14	fromskew
LEAF_NODE	2052:26	2052:26	10	;
LEAF_NODE	2053:8	2053:8	8	}
LEAF_NODE	2054:4	2054:4	5	}
LEAF_NODE	2055:0	2055:0	2	}
FUNCTION_DEF	0:0	2100:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	2060:0	2060:0	2	DECLAREContigPutFunc
LEAF_NODE	2060:0	2060:0	3	DECLAREContigPutFunc
PARAMETER_LIST	2060:20	2060:45	2	( putcontig8bitYCbCr41tile )
LEAF_NODE	2060:20	2060:20	3	(
PARAMETER_DECL	2060:21	2060:21	3	putcontig8bitYCbCr41tile
LEAF_NODE	2060:21	2060:21	4	putcontig8bitYCbCr41tile
LEAF_NODE	2060:45	2060:45	3	)
LEAF_NODE	2061:0	2061:0	2	{
STATEMENTS	2062:4	2098:17	2	
EXPR_STATEMENT	2062:4	2062:12	3	( void ) y ;
EXPR	2062:4	2062:11	4	( void ) y
LEAF_NODE	2062:4	2062:4	5	(
TYPE_NAME	2062:5	2062:5	5	void
LEAF_NODE	2062:5	2062:5	6	void
LEAF_NODE	2062:9	2062:9	5	)
FIELD	2062:11	2062:11	5	y
LEAF_NODE	2062:11	2062:11	6	y
LEAF_NODE	2062:12	2062:12	4	;
EXPR_STATEMENT	2063:4	2063:39	3	fromskew = ( fromskew / 4 ) * ( 4 * 1 + 2 ) ;
EXPR	2063:4	2063:4	4	fromskew = ( fromskew / 4 ) * ( 4 * 1 + 2 )
ASSIGN	2063:4	2063:15	5	fromskew = ( fromskew / 4 ) * ( 4 * 1 + 2 )
LVAL	2063:4	2063:4	6	fromskew
FIELD	2063:4	2063:4	7	fromskew
LEAF_NODE	2063:4	2063:4	8	fromskew
ASSIGN_OP	2063:13	2063:13	6	=
LEAF_NODE	2063:13	2063:13	7	=
RVAL	2063:15	2063:38	6	( fromskew / 4 ) * ( 4 * 1 + 2 )
LEAF_NODE	2063:15	2063:15	7	(
FIELD	2063:16	2063:16	7	fromskew
LEAF_NODE	2063:16	2063:16	8	fromskew
LEAF_NODE	2063:25	2063:25	7	/
FIELD	2063:27	2063:27	7	4
LEAF_NODE	2063:27	2063:27	8	4
LEAF_NODE	2063:28	2063:28	7	)
LEAF_NODE	2063:30	2063:30	7	*
LEAF_NODE	2063:32	2063:32	7	(
FIELD	2063:33	2063:33	7	4
LEAF_NODE	2063:33	2063:33	8	4
LEAF_NODE	2063:34	2063:34	7	*
FIELD	2063:35	2063:35	7	1
LEAF_NODE	2063:35	2063:35	8	1
LEAF_NODE	2063:36	2063:36	7	+
FIELD	2063:37	2063:37	7	2
LEAF_NODE	2063:37	2063:37	8	2
LEAF_NODE	2063:38	2063:38	7	)
LEAF_NODE	2063:39	2063:39	4	;
ITERATION	2064:4	2064:7	3	
KEYWORD	2064:4	2064:4	4	do
LEAF_NODE	2064:4	2064:4	5	do
LEAF_NODE	2098:12	2098:12	4	(
CONDITION	2098:13	2098:13	4	-- h
EXPR	2098:13	2098:15	5	-- h
LEAF_NODE	2098:13	2098:13	6	--
FIELD	2098:15	2098:15	6	h
LEAF_NODE	2098:15	2098:15	7	h
LEAF_NODE	2098:16	2098:16	4	)
STATEMENTS	2064:7	2098:4	4	
LEAF_NODE	2064:7	2064:7	5	{
STATEMENTS	2065:1	2097:1	5	
EXPR_STATEMENT	2065:1	2065:9	6	x = w >> 2 ;
EXPR	2065:1	2065:1	7	x = w >> 2
ASSIGN	2065:1	2065:5	8	x = w >> 2
LVAL	2065:1	2065:1	9	x
FIELD	2065:1	2065:1	10	x
LEAF_NODE	2065:1	2065:1	11	x
ASSIGN_OP	2065:3	2065:3	9	=
LEAF_NODE	2065:3	2065:3	10	=
RVAL	2065:5	2065:8	9	w >> 2
FIELD	2065:5	2065:5	10	w
LEAF_NODE	2065:5	2065:5	11	w
LEAF_NODE	2065:6	2065:6	10	>>
FIELD	2065:8	2065:8	10	2
LEAF_NODE	2065:8	2065:8	11	2
LEAF_NODE	2065:9	2065:9	7	;
ITERATION	2066:1	2066:12	6	
KEYWORD	2066:1	2066:1	7	while
LEAF_NODE	2066:1	2066:1	8	while
LEAF_NODE	2066:6	2066:6	7	(
CONDITION	2066:7	2066:7	7	x > 0
EXPR	2066:7	2066:9	8	x > 0
FIELD	2066:7	2066:7	9	x
LEAF_NODE	2066:7	2066:7	10	x
REL_OPERATOR	2066:8	2066:8	9	>
LEAF_NODE	2066:8	2066:8	10	>
FIELD	2066:9	2066:9	9	0
LEAF_NODE	2066:9	2066:9	10	0
LEAF_NODE	2066:10	2066:10	7	)
STATEMENTS	2066:12	2078:1	7	
LEAF_NODE	2066:12	2066:12	8	{
STATEMENTS	2067:5	2077:2	8	
SIMPLE_DECL	2067:5	2067:21	9	int32 Cb ; Cb = pp [ 4 ] ;
VAR_DECL	2067:5	2067:11	10	int32 Cb ; Cb = pp [ 4 ]
TYPE	2067:5	2067:5	11	int32
TYPE_NAME	2067:5	2067:5	12	int32
LEAF_NODE	2067:5	2067:5	13	int32
NAME	2067:11	2067:11	11	Cb
LEAF_NODE	2067:11	2067:11	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2067:11	2067:11	11	Cb = pp [ 4 ]
ASSIGN	2067:11	2067:16	12	Cb = pp [ 4 ]
LVAL	2067:11	2067:11	13	Cb
NAME	2067:11	2067:11	14	Cb
LEAF_NODE	2067:11	2067:11	15	Cb
ASSIGN_OP	2067:14	2067:14	13	=
LEAF_NODE	2067:14	2067:14	14	=
RVAL	2067:16	2067:16	13	pp [ 4 ]
FIELD	2067:16	2067:20	14	pp [ 4 ]
LEAF_NODE	2067:16	2067:16	15	pp
LEAF_NODE	2067:18	2067:18	15	[
EXPR	2067:19	2067:19	15	4
FIELD	2067:19	2067:19	16	4
LEAF_NODE	2067:19	2067:19	17	4
LEAF_NODE	2067:20	2067:20	15	]
LEAF_NODE	2067:21	2067:21	10	;
SIMPLE_DECL	2068:5	2068:21	9	int32 Cr ; Cr = pp [ 5 ] ;
VAR_DECL	2068:5	2068:11	10	int32 Cr ; Cr = pp [ 5 ]
TYPE	2068:5	2068:5	11	int32
TYPE_NAME	2068:5	2068:5	12	int32
LEAF_NODE	2068:5	2068:5	13	int32
NAME	2068:11	2068:11	11	Cr
LEAF_NODE	2068:11	2068:11	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2068:11	2068:11	11	Cr = pp [ 5 ]
ASSIGN	2068:11	2068:16	12	Cr = pp [ 5 ]
LVAL	2068:11	2068:11	13	Cr
NAME	2068:11	2068:11	14	Cr
LEAF_NODE	2068:11	2068:11	15	Cr
ASSIGN_OP	2068:14	2068:14	13	=
LEAF_NODE	2068:14	2068:14	14	=
RVAL	2068:16	2068:16	13	pp [ 5 ]
FIELD	2068:16	2068:20	14	pp [ 5 ]
LEAF_NODE	2068:16	2068:16	15	pp
LEAF_NODE	2068:18	2068:18	15	[
EXPR	2068:19	2068:19	15	5
FIELD	2068:19	2068:19	16	5
LEAF_NODE	2068:19	2068:19	17	5
LEAF_NODE	2068:20	2068:20	15	]
LEAF_NODE	2068:21	2068:21	10	;
EXPR_STATEMENT	2070:5	2070:30	9	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2070:5	2070:5	10	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2070:5	2070:29	11	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2070:5	2070:5	12	YCbCrtoRGB
LEAF_NODE	2070:5	2070:5	13	YCbCrtoRGB
LEAF_NODE	2070:15	2070:15	12	(
ARGUMENT	2070:16	2070:16	12	cp [ 0 ]
FIELD	2070:16	2070:21	13	cp [ 0 ]
LEAF_NODE	2070:16	2070:16	14	cp
LEAF_NODE	2070:19	2070:19	14	[
EXPR	2070:20	2070:20	14	0
FIELD	2070:20	2070:20	15	0
LEAF_NODE	2070:20	2070:20	16	0
LEAF_NODE	2070:21	2070:21	14	]
LEAF_NODE	2070:22	2070:22	12	,
ARGUMENT	2070:24	2070:24	12	pp [ 0 ]
FIELD	2070:24	2070:28	13	pp [ 0 ]
LEAF_NODE	2070:24	2070:24	14	pp
LEAF_NODE	2070:26	2070:26	14	[
EXPR	2070:27	2070:27	14	0
FIELD	2070:27	2070:27	15	0
LEAF_NODE	2070:27	2070:27	16	0
LEAF_NODE	2070:28	2070:28	14	]
LEAF_NODE	2070:29	2070:29	12	)
LEAF_NODE	2070:30	2070:30	10	;
EXPR_STATEMENT	2071:5	2071:30	9	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] ) ;
EXPR	2071:5	2071:5	10	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
FUNCTION_CALL	2071:5	2071:29	11	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
CALLEE	2071:5	2071:5	12	YCbCrtoRGB
LEAF_NODE	2071:5	2071:5	13	YCbCrtoRGB
LEAF_NODE	2071:15	2071:15	12	(
ARGUMENT	2071:16	2071:16	12	cp [ 1 ]
FIELD	2071:16	2071:21	13	cp [ 1 ]
LEAF_NODE	2071:16	2071:16	14	cp
LEAF_NODE	2071:19	2071:19	14	[
EXPR	2071:20	2071:20	14	1
FIELD	2071:20	2071:20	15	1
LEAF_NODE	2071:20	2071:20	16	1
LEAF_NODE	2071:21	2071:21	14	]
LEAF_NODE	2071:22	2071:22	12	,
ARGUMENT	2071:24	2071:24	12	pp [ 1 ]
FIELD	2071:24	2071:28	13	pp [ 1 ]
LEAF_NODE	2071:24	2071:24	14	pp
LEAF_NODE	2071:26	2071:26	14	[
EXPR	2071:27	2071:27	14	1
FIELD	2071:27	2071:27	15	1
LEAF_NODE	2071:27	2071:27	16	1
LEAF_NODE	2071:28	2071:28	14	]
LEAF_NODE	2071:29	2071:29	12	)
LEAF_NODE	2071:30	2071:30	10	;
EXPR_STATEMENT	2072:5	2072:30	9	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] ) ;
EXPR	2072:5	2072:5	10	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
FUNCTION_CALL	2072:5	2072:29	11	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
CALLEE	2072:5	2072:5	12	YCbCrtoRGB
LEAF_NODE	2072:5	2072:5	13	YCbCrtoRGB
LEAF_NODE	2072:15	2072:15	12	(
ARGUMENT	2072:16	2072:16	12	cp [ 2 ]
FIELD	2072:16	2072:21	13	cp [ 2 ]
LEAF_NODE	2072:16	2072:16	14	cp
LEAF_NODE	2072:19	2072:19	14	[
EXPR	2072:20	2072:20	14	2
FIELD	2072:20	2072:20	15	2
LEAF_NODE	2072:20	2072:20	16	2
LEAF_NODE	2072:21	2072:21	14	]
LEAF_NODE	2072:22	2072:22	12	,
ARGUMENT	2072:24	2072:24	12	pp [ 2 ]
FIELD	2072:24	2072:28	13	pp [ 2 ]
LEAF_NODE	2072:24	2072:24	14	pp
LEAF_NODE	2072:26	2072:26	14	[
EXPR	2072:27	2072:27	14	2
FIELD	2072:27	2072:27	15	2
LEAF_NODE	2072:27	2072:27	16	2
LEAF_NODE	2072:28	2072:28	14	]
LEAF_NODE	2072:29	2072:29	12	)
LEAF_NODE	2072:30	2072:30	10	;
EXPR_STATEMENT	2073:5	2073:30	9	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] ) ;
EXPR	2073:5	2073:5	10	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
FUNCTION_CALL	2073:5	2073:29	11	YCbCrtoRGB ( cp [ 3 ] , pp [ 3 ] )
CALLEE	2073:5	2073:5	12	YCbCrtoRGB
LEAF_NODE	2073:5	2073:5	13	YCbCrtoRGB
LEAF_NODE	2073:15	2073:15	12	(
ARGUMENT	2073:16	2073:16	12	cp [ 3 ]
FIELD	2073:16	2073:21	13	cp [ 3 ]
LEAF_NODE	2073:16	2073:16	14	cp
LEAF_NODE	2073:19	2073:19	14	[
EXPR	2073:20	2073:20	14	3
FIELD	2073:20	2073:20	15	3
LEAF_NODE	2073:20	2073:20	16	3
LEAF_NODE	2073:21	2073:21	14	]
LEAF_NODE	2073:22	2073:22	12	,
ARGUMENT	2073:24	2073:24	12	pp [ 3 ]
FIELD	2073:24	2073:28	13	pp [ 3 ]
LEAF_NODE	2073:24	2073:24	14	pp
LEAF_NODE	2073:26	2073:26	14	[
EXPR	2073:27	2073:27	14	3
FIELD	2073:27	2073:27	15	3
LEAF_NODE	2073:27	2073:27	16	3
LEAF_NODE	2073:28	2073:28	14	]
LEAF_NODE	2073:29	2073:29	12	)
LEAF_NODE	2073:30	2073:30	10	;
EXPR_STATEMENT	2075:5	2075:12	9	cp += 4 ;
EXPR	2075:5	2075:5	10	cp += 4
ASSIGN	2075:5	2075:11	11	cp += 4
LVAL	2075:5	2075:5	12	cp
FIELD	2075:5	2075:5	13	cp
LEAF_NODE	2075:5	2075:5	14	cp
ASSIGN_OP	2075:8	2075:8	12	+=
LEAF_NODE	2075:8	2075:8	13	+=
RVAL	2075:11	2075:11	12	4
FIELD	2075:11	2075:11	13	4
LEAF_NODE	2075:11	2075:11	14	4
LEAF_NODE	2075:12	2075:12	10	;
EXPR_STATEMENT	2076:5	2076:12	9	pp += 6 ;
EXPR	2076:5	2076:5	10	pp += 6
ASSIGN	2076:5	2076:11	11	pp += 6
LVAL	2076:5	2076:5	12	pp
FIELD	2076:5	2076:5	13	pp
LEAF_NODE	2076:5	2076:5	14	pp
ASSIGN_OP	2076:8	2076:8	12	+=
LEAF_NODE	2076:8	2076:8	13	+=
RVAL	2076:11	2076:11	12	6
FIELD	2076:11	2076:11	13	6
LEAF_NODE	2076:11	2076:11	14	6
LEAF_NODE	2076:12	2076:12	10	;
EXPR_STATEMENT	2077:2	2077:5	9	x -- ;
EXPR	2077:2	2077:2	10	x --
FIELD	2077:2	2077:3	11	x --
LEAF_NODE	2077:2	2077:2	12	x
LEAF_NODE	2077:3	2077:3	12	--
LEAF_NODE	2077:5	2077:5	10	;
LEAF_NODE	2078:1	2078:1	8	}
SELECTION	2080:8	2081:8	6	
KEYWORD	2080:8	2080:8	7	if
LEAF_NODE	2080:8	2080:8	8	if
LEAF_NODE	2080:10	2080:10	7	(
CONDITION	2080:12	2080:12	7	( w & 3 ) != 0
EXPR	2080:12	2080:21	8	( w & 3 ) != 0
LEAF_NODE	2080:12	2080:12	9	(
FIELD	2080:13	2080:13	9	w
LEAF_NODE	2080:13	2080:13	10	w
LEAF_NODE	2080:14	2080:14	9	&
FIELD	2080:15	2080:15	9	3
LEAF_NODE	2080:15	2080:15	10	3
LEAF_NODE	2080:16	2080:16	9	)
EQ_OPERATOR	2080:18	2080:18	9	!=
LEAF_NODE	2080:18	2080:18	10	!=
FIELD	2080:21	2080:21	9	0
LEAF_NODE	2080:21	2080:21	10	0
LEAF_NODE	2080:23	2080:23	7	)
STATEMENTS	2081:8	2094:8	7	
LEAF_NODE	2081:8	2081:8	8	{
STATEMENTS	2082:5	2093:12	8	
SIMPLE_DECL	2082:5	2082:21	9	int32 Cb ; Cb = pp [ 4 ] ;
VAR_DECL	2082:5	2082:11	10	int32 Cb ; Cb = pp [ 4 ]
TYPE	2082:5	2082:5	11	int32
TYPE_NAME	2082:5	2082:5	12	int32
LEAF_NODE	2082:5	2082:5	13	int32
NAME	2082:11	2082:11	11	Cb
LEAF_NODE	2082:11	2082:11	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2082:11	2082:11	11	Cb = pp [ 4 ]
ASSIGN	2082:11	2082:16	12	Cb = pp [ 4 ]
LVAL	2082:11	2082:11	13	Cb
NAME	2082:11	2082:11	14	Cb
LEAF_NODE	2082:11	2082:11	15	Cb
ASSIGN_OP	2082:14	2082:14	13	=
LEAF_NODE	2082:14	2082:14	14	=
RVAL	2082:16	2082:16	13	pp [ 4 ]
FIELD	2082:16	2082:20	14	pp [ 4 ]
LEAF_NODE	2082:16	2082:16	15	pp
LEAF_NODE	2082:18	2082:18	15	[
EXPR	2082:19	2082:19	15	4
FIELD	2082:19	2082:19	16	4
LEAF_NODE	2082:19	2082:19	17	4
LEAF_NODE	2082:20	2082:20	15	]
LEAF_NODE	2082:21	2082:21	10	;
SIMPLE_DECL	2083:5	2083:21	9	int32 Cr ; Cr = pp [ 5 ] ;
VAR_DECL	2083:5	2083:11	10	int32 Cr ; Cr = pp [ 5 ]
TYPE	2083:5	2083:5	11	int32
TYPE_NAME	2083:5	2083:5	12	int32
LEAF_NODE	2083:5	2083:5	13	int32
NAME	2083:11	2083:11	11	Cr
LEAF_NODE	2083:11	2083:11	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2083:11	2083:11	11	Cr = pp [ 5 ]
ASSIGN	2083:11	2083:16	12	Cr = pp [ 5 ]
LVAL	2083:11	2083:11	13	Cr
NAME	2083:11	2083:11	14	Cr
LEAF_NODE	2083:11	2083:11	15	Cr
ASSIGN_OP	2083:14	2083:14	13	=
LEAF_NODE	2083:14	2083:14	14	=
RVAL	2083:16	2083:16	13	pp [ 5 ]
FIELD	2083:16	2083:20	14	pp [ 5 ]
LEAF_NODE	2083:16	2083:16	15	pp
LEAF_NODE	2083:18	2083:18	15	[
EXPR	2083:19	2083:19	15	5
FIELD	2083:19	2083:19	16	5
LEAF_NODE	2083:19	2083:19	17	5
LEAF_NODE	2083:20	2083:20	15	]
LEAF_NODE	2083:21	2083:21	10	;
SELECTION	2085:12	2085:28	9	
KEYWORD	2085:12	2085:12	10	switch
LEAF_NODE	2085:12	2085:12	11	switch
LEAF_NODE	2085:18	2085:18	10	(
CONDITION	2085:20	2085:20	10	( w & 3 )
EXPR	2085:20	2085:24	11	( w & 3 )
LEAF_NODE	2085:20	2085:20	12	(
FIELD	2085:21	2085:21	12	w
LEAF_NODE	2085:21	2085:21	13	w
LEAF_NODE	2085:22	2085:22	12	&
FIELD	2085:23	2085:23	12	3
LEAF_NODE	2085:23	2085:23	13	3
LEAF_NODE	2085:24	2085:24	12	)
LEAF_NODE	2085:26	2085:26	10	)
STATEMENTS	2085:28	2090:12	10	
LEAF_NODE	2085:28	2085:28	11	{
STATEMENTS	2086:14	2089:22	11	
LABEL	2086:14	2086:20	12	case 3 :
LEAF_NODE	2086:14	2086:14	13	case
LEAF_NODE	2086:19	2086:19	13	3
LEAF_NODE	2086:20	2086:20	13	:
EXPR_STATEMENT	2086:22	2086:47	12	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] ) ;
EXPR	2086:22	2086:22	13	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
FUNCTION_CALL	2086:22	2086:46	14	YCbCrtoRGB ( cp [ 2 ] , pp [ 2 ] )
CALLEE	2086:22	2086:22	15	YCbCrtoRGB
LEAF_NODE	2086:22	2086:22	16	YCbCrtoRGB
LEAF_NODE	2086:32	2086:32	15	(
ARGUMENT	2086:33	2086:33	15	cp [ 2 ]
FIELD	2086:33	2086:38	16	cp [ 2 ]
LEAF_NODE	2086:33	2086:33	17	cp
LEAF_NODE	2086:36	2086:36	17	[
EXPR	2086:37	2086:37	17	2
FIELD	2086:37	2086:37	18	2
LEAF_NODE	2086:37	2086:37	19	2
LEAF_NODE	2086:38	2086:38	17	]
LEAF_NODE	2086:39	2086:39	15	,
ARGUMENT	2086:41	2086:41	15	pp [ 2 ]
FIELD	2086:41	2086:45	16	pp [ 2 ]
LEAF_NODE	2086:41	2086:41	17	pp
LEAF_NODE	2086:43	2086:43	17	[
EXPR	2086:44	2086:44	17	2
FIELD	2086:44	2086:44	18	2
LEAF_NODE	2086:44	2086:44	19	2
LEAF_NODE	2086:45	2086:45	17	]
LEAF_NODE	2086:46	2086:46	15	)
LEAF_NODE	2086:47	2086:47	13	;
LABEL	2087:14	2087:20	12	case 2 :
LEAF_NODE	2087:14	2087:14	13	case
LEAF_NODE	2087:19	2087:19	13	2
LEAF_NODE	2087:20	2087:20	13	:
EXPR_STATEMENT	2087:22	2087:47	12	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] ) ;
EXPR	2087:22	2087:22	13	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
FUNCTION_CALL	2087:22	2087:46	14	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
CALLEE	2087:22	2087:22	15	YCbCrtoRGB
LEAF_NODE	2087:22	2087:22	16	YCbCrtoRGB
LEAF_NODE	2087:32	2087:32	15	(
ARGUMENT	2087:33	2087:33	15	cp [ 1 ]
FIELD	2087:33	2087:38	16	cp [ 1 ]
LEAF_NODE	2087:33	2087:33	17	cp
LEAF_NODE	2087:36	2087:36	17	[
EXPR	2087:37	2087:37	17	1
FIELD	2087:37	2087:37	18	1
LEAF_NODE	2087:37	2087:37	19	1
LEAF_NODE	2087:38	2087:38	17	]
LEAF_NODE	2087:39	2087:39	15	,
ARGUMENT	2087:41	2087:41	15	pp [ 1 ]
FIELD	2087:41	2087:45	16	pp [ 1 ]
LEAF_NODE	2087:41	2087:41	17	pp
LEAF_NODE	2087:43	2087:43	17	[
EXPR	2087:44	2087:44	17	1
FIELD	2087:44	2087:44	18	1
LEAF_NODE	2087:44	2087:44	19	1
LEAF_NODE	2087:45	2087:45	17	]
LEAF_NODE	2087:46	2087:46	15	)
LEAF_NODE	2087:47	2087:47	13	;
LABEL	2088:14	2088:20	12	case 1 :
LEAF_NODE	2088:14	2088:14	13	case
LEAF_NODE	2088:19	2088:19	13	1
LEAF_NODE	2088:20	2088:20	13	:
EXPR_STATEMENT	2088:22	2088:47	12	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2088:22	2088:22	13	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2088:22	2088:46	14	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2088:22	2088:22	15	YCbCrtoRGB
LEAF_NODE	2088:22	2088:22	16	YCbCrtoRGB
LEAF_NODE	2088:32	2088:32	15	(
ARGUMENT	2088:33	2088:33	15	cp [ 0 ]
FIELD	2088:33	2088:38	16	cp [ 0 ]
LEAF_NODE	2088:33	2088:33	17	cp
LEAF_NODE	2088:36	2088:36	17	[
EXPR	2088:37	2088:37	17	0
FIELD	2088:37	2088:37	18	0
LEAF_NODE	2088:37	2088:37	19	0
LEAF_NODE	2088:38	2088:38	17	]
LEAF_NODE	2088:39	2088:39	15	,
ARGUMENT	2088:41	2088:41	15	pp [ 0 ]
FIELD	2088:41	2088:45	16	pp [ 0 ]
LEAF_NODE	2088:41	2088:41	17	pp
LEAF_NODE	2088:43	2088:43	17	[
EXPR	2088:44	2088:44	17	0
FIELD	2088:44	2088:44	18	0
LEAF_NODE	2088:44	2088:44	19	0
LEAF_NODE	2088:45	2088:45	17	]
LEAF_NODE	2088:46	2088:46	15	)
LEAF_NODE	2088:47	2088:47	13	;
LABEL	2089:14	2089:20	12	case 0 :
LEAF_NODE	2089:14	2089:14	13	case
LEAF_NODE	2089:19	2089:19	13	0
LEAF_NODE	2089:20	2089:20	13	:
JUMP_STATEMENT	2089:22	2089:27	12	break DESTINATION ;
KEYWORD	2089:22	2089:22	13	break
LEAF_NODE	2089:22	2089:22	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2089:27	2089:27	13	;
LEAF_NODE	2090:12	2090:12	11	}
EXPR_STATEMENT	2092:12	2092:23	9	cp += ( w & 3 ) ;
EXPR	2092:12	2092:12	10	cp += ( w & 3 )
ASSIGN	2092:12	2092:18	11	cp += ( w & 3 )
LVAL	2092:12	2092:12	12	cp
FIELD	2092:12	2092:12	13	cp
LEAF_NODE	2092:12	2092:12	14	cp
ASSIGN_OP	2092:15	2092:15	12	+=
LEAF_NODE	2092:15	2092:15	13	+=
RVAL	2092:18	2092:22	12	( w & 3 )
LEAF_NODE	2092:18	2092:18	13	(
FIELD	2092:19	2092:19	13	w
LEAF_NODE	2092:19	2092:19	14	w
LEAF_NODE	2092:20	2092:20	13	&
FIELD	2092:21	2092:21	13	3
LEAF_NODE	2092:21	2092:21	14	3
LEAF_NODE	2092:22	2092:22	13	)
LEAF_NODE	2092:23	2092:23	10	;
EXPR_STATEMENT	2093:12	2093:19	9	pp += 6 ;
EXPR	2093:12	2093:12	10	pp += 6
ASSIGN	2093:12	2093:18	11	pp += 6
LVAL	2093:12	2093:12	12	pp
FIELD	2093:12	2093:12	13	pp
LEAF_NODE	2093:12	2093:12	14	pp
ASSIGN_OP	2093:15	2093:15	12	+=
LEAF_NODE	2093:15	2093:15	13	+=
RVAL	2093:18	2093:18	12	6
FIELD	2093:18	2093:18	13	6
LEAF_NODE	2093:18	2093:18	14	6
LEAF_NODE	2093:19	2093:19	10	;
LEAF_NODE	2094:8	2094:8	8	}
EXPR_STATEMENT	2096:1	2096:13	6	cp += toskew ;
EXPR	2096:1	2096:1	7	cp += toskew
ASSIGN	2096:1	2096:7	8	cp += toskew
LVAL	2096:1	2096:1	9	cp
FIELD	2096:1	2096:1	10	cp
LEAF_NODE	2096:1	2096:1	11	cp
ASSIGN_OP	2096:4	2096:4	9	+=
LEAF_NODE	2096:4	2096:4	10	+=
RVAL	2096:7	2096:7	9	toskew
FIELD	2096:7	2096:7	10	toskew
LEAF_NODE	2096:7	2096:7	11	toskew
LEAF_NODE	2096:13	2096:13	7	;
EXPR_STATEMENT	2097:1	2097:15	6	pp += fromskew ;
EXPR	2097:1	2097:1	7	pp += fromskew
ASSIGN	2097:1	2097:7	8	pp += fromskew
LVAL	2097:1	2097:1	9	pp
FIELD	2097:1	2097:1	10	pp
LEAF_NODE	2097:1	2097:1	11	pp
ASSIGN_OP	2097:4	2097:4	9	+=
LEAF_NODE	2097:4	2097:4	10	+=
RVAL	2097:7	2097:7	9	fromskew
FIELD	2097:7	2097:7	10	fromskew
LEAF_NODE	2097:7	2097:7	11	fromskew
LEAF_NODE	2097:15	2097:15	7	;
LEAF_NODE	2098:4	2098:4	5	}
LEAF_NODE	2098:17	2098:17	3	;
LEAF_NODE	2100:0	2100:0	2	}
FUNCTION_DEF	0:0	2158:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	2105:0	2105:0	2	DECLAREContigPutFunc
LEAF_NODE	2105:0	2105:0	3	DECLAREContigPutFunc
PARAMETER_LIST	2105:20	2105:45	2	( putcontig8bitYCbCr22tile )
LEAF_NODE	2105:20	2105:20	3	(
PARAMETER_DECL	2105:21	2105:21	3	putcontig8bitYCbCr22tile
LEAF_NODE	2105:21	2105:21	4	putcontig8bitYCbCr22tile
LEAF_NODE	2105:45	2105:45	3	)
LEAF_NODE	2106:0	2106:0	2	{
STATEMENTS	2107:1	2140:1	2	
SIMPLE_DECL	2107:1	2107:12	3	uint32 * cp2 ;
VAR_DECL	2107:1	2107:9	4	uint32 * cp2
TYPE	2107:1	2107:7	5	uint32 *
TYPE_NAME	2107:1	2107:1	6	uint32
LEAF_NODE	2107:1	2107:1	7	uint32
POINTER	2107:7	2107:7	6	*
LEAF_NODE	2107:7	2107:7	7	*
NAME	2107:9	2107:9	5	cp2
LEAF_NODE	2107:9	2107:9	6	cp2
LEAF_NODE	2107:12	2107:12	4	;
SIMPLE_DECL	2108:1	2108:24	3	int32 incr ; incr = 2 * toskew + w ;
VAR_DECL	2108:1	2108:7	4	int32 incr ; incr = 2 * toskew + w
TYPE	2108:1	2108:1	5	int32
TYPE_NAME	2108:1	2108:1	6	int32
LEAF_NODE	2108:1	2108:1	7	int32
NAME	2108:7	2108:7	5	incr
LEAF_NODE	2108:7	2108:7	6	incr
LEAF_NODE	0:0	0:0	5	;
INIT	2108:7	2108:7	5	incr = 2 * toskew + w
ASSIGN	2108:7	2108:14	6	incr = 2 * toskew + w
LVAL	2108:7	2108:7	7	incr
NAME	2108:7	2108:7	8	incr
LEAF_NODE	2108:7	2108:7	9	incr
ASSIGN_OP	2108:12	2108:12	7	=
LEAF_NODE	2108:12	2108:12	8	=
RVAL	2108:14	2108:23	7	2 * toskew + w
FIELD	2108:14	2108:14	8	2
LEAF_NODE	2108:14	2108:14	9	2
LEAF_NODE	2108:15	2108:15	8	*
FIELD	2108:16	2108:16	8	toskew
LEAF_NODE	2108:16	2108:16	9	toskew
LEAF_NODE	2108:22	2108:22	8	+
FIELD	2108:23	2108:23	8	w
LEAF_NODE	2108:23	2108:23	9	w
LEAF_NODE	2108:24	2108:24	4	;
EXPR_STATEMENT	2109:1	2109:9	3	( void ) y ;
EXPR	2109:1	2109:8	4	( void ) y
LEAF_NODE	2109:1	2109:1	5	(
TYPE_NAME	2109:2	2109:2	5	void
LEAF_NODE	2109:2	2109:2	6	void
LEAF_NODE	2109:6	2109:6	5	)
FIELD	2109:8	2109:8	5	y
LEAF_NODE	2109:8	2109:8	6	y
LEAF_NODE	2109:9	2109:9	4	;
EXPR_STATEMENT	2110:1	2110:36	3	fromskew = ( fromskew / 2 ) * ( 2 * 2 + 2 ) ;
EXPR	2110:1	2110:1	4	fromskew = ( fromskew / 2 ) * ( 2 * 2 + 2 )
ASSIGN	2110:1	2110:12	5	fromskew = ( fromskew / 2 ) * ( 2 * 2 + 2 )
LVAL	2110:1	2110:1	6	fromskew
FIELD	2110:1	2110:1	7	fromskew
LEAF_NODE	2110:1	2110:1	8	fromskew
ASSIGN_OP	2110:10	2110:10	6	=
LEAF_NODE	2110:10	2110:10	7	=
RVAL	2110:12	2110:35	6	( fromskew / 2 ) * ( 2 * 2 + 2 )
LEAF_NODE	2110:12	2110:12	7	(
FIELD	2110:13	2110:13	7	fromskew
LEAF_NODE	2110:13	2110:13	8	fromskew
LEAF_NODE	2110:22	2110:22	7	/
FIELD	2110:24	2110:24	7	2
LEAF_NODE	2110:24	2110:24	8	2
LEAF_NODE	2110:25	2110:25	7	)
LEAF_NODE	2110:27	2110:27	7	*
LEAF_NODE	2110:29	2110:29	7	(
FIELD	2110:30	2110:30	7	2
LEAF_NODE	2110:30	2110:30	8	2
LEAF_NODE	2110:31	2110:31	7	*
FIELD	2110:32	2110:32	7	2
LEAF_NODE	2110:32	2110:32	8	2
LEAF_NODE	2110:33	2110:33	7	+
FIELD	2110:34	2110:34	7	2
LEAF_NODE	2110:34	2110:34	8	2
LEAF_NODE	2110:35	2110:35	7	)
LEAF_NODE	2110:36	2110:36	4	;
EXPR_STATEMENT	2111:1	2111:18	3	cp2 = cp + w + toskew ;
EXPR	2111:1	2111:1	4	cp2 = cp + w + toskew
ASSIGN	2111:1	2111:7	5	cp2 = cp + w + toskew
LVAL	2111:1	2111:1	6	cp2
FIELD	2111:1	2111:1	7	cp2
LEAF_NODE	2111:1	2111:1	8	cp2
ASSIGN_OP	2111:5	2111:5	6	=
LEAF_NODE	2111:5	2111:5	7	=
RVAL	2111:7	2111:12	6	cp + w + toskew
FIELD	2111:7	2111:7	7	cp
LEAF_NODE	2111:7	2111:7	8	cp
LEAF_NODE	2111:9	2111:9	7	+
FIELD	2111:10	2111:10	7	w
LEAF_NODE	2111:10	2111:10	8	w
LEAF_NODE	2111:11	2111:11	7	+
FIELD	2111:12	2111:12	7	toskew
LEAF_NODE	2111:12	2111:12	8	toskew
LEAF_NODE	2111:18	2111:18	4	;
ITERATION	2112:1	2112:14	3	
KEYWORD	2112:1	2112:1	4	while
LEAF_NODE	2112:1	2112:1	5	while
LEAF_NODE	2112:7	2112:7	4	(
CONDITION	2112:8	2112:8	4	h >= 2
EXPR	2112:8	2112:11	5	h >= 2
FIELD	2112:8	2112:8	6	h
LEAF_NODE	2112:8	2112:8	7	h
REL_OPERATOR	2112:9	2112:9	6	>=
LEAF_NODE	2112:9	2112:9	7	>=
FIELD	2112:11	2112:11	6	2
LEAF_NODE	2112:11	2112:11	7	2
LEAF_NODE	2112:12	2112:12	4	)
STATEMENTS	2112:14	2139:1	4	
LEAF_NODE	2112:14	2112:14	5	{
STATEMENTS	2113:2	2138:2	5	
EXPR_STATEMENT	2113:2	2113:7	6	x = w ;
EXPR	2113:2	2113:2	7	x = w
ASSIGN	2113:2	2113:6	8	x = w
LVAL	2113:2	2113:2	9	x
FIELD	2113:2	2113:2	10	x
LEAF_NODE	2113:2	2113:2	11	x
ASSIGN_OP	2113:4	2113:4	9	=
LEAF_NODE	2113:4	2113:4	10	=
RVAL	2113:6	2113:6	9	w
FIELD	2113:6	2113:6	10	w
LEAF_NODE	2113:6	2113:6	11	w
LEAF_NODE	2113:7	2113:7	7	;
ITERATION	2114:2	2114:15	6	
KEYWORD	2114:2	2114:2	7	while
LEAF_NODE	2114:2	2114:2	8	while
LEAF_NODE	2114:8	2114:8	7	(
CONDITION	2114:9	2114:9	7	x >= 2
EXPR	2114:9	2114:12	8	x >= 2
FIELD	2114:9	2114:9	9	x
LEAF_NODE	2114:9	2114:9	10	x
REL_OPERATOR	2114:10	2114:10	9	>=
LEAF_NODE	2114:10	2114:10	10	>=
FIELD	2114:12	2114:12	9	2
LEAF_NODE	2114:12	2114:12	10	2
LEAF_NODE	2114:13	2114:13	7	)
STATEMENTS	2114:15	2125:2	7	
LEAF_NODE	2114:15	2114:15	8	{
STATEMENTS	2115:3	2124:3	8	
SIMPLE_DECL	2115:3	2115:20	9	uint32 Cb ; Cb = pp [ 4 ] ;
VAR_DECL	2115:3	2115:10	10	uint32 Cb ; Cb = pp [ 4 ]
TYPE	2115:3	2115:3	11	uint32
TYPE_NAME	2115:3	2115:3	12	uint32
LEAF_NODE	2115:3	2115:3	13	uint32
NAME	2115:10	2115:10	11	Cb
LEAF_NODE	2115:10	2115:10	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2115:10	2115:10	11	Cb = pp [ 4 ]
ASSIGN	2115:10	2115:15	12	Cb = pp [ 4 ]
LVAL	2115:10	2115:10	13	Cb
NAME	2115:10	2115:10	14	Cb
LEAF_NODE	2115:10	2115:10	15	Cb
ASSIGN_OP	2115:13	2115:13	13	=
LEAF_NODE	2115:13	2115:13	14	=
RVAL	2115:15	2115:15	13	pp [ 4 ]
FIELD	2115:15	2115:19	14	pp [ 4 ]
LEAF_NODE	2115:15	2115:15	15	pp
LEAF_NODE	2115:17	2115:17	15	[
EXPR	2115:18	2115:18	15	4
FIELD	2115:18	2115:18	16	4
LEAF_NODE	2115:18	2115:18	17	4
LEAF_NODE	2115:19	2115:19	15	]
LEAF_NODE	2115:20	2115:20	10	;
SIMPLE_DECL	2116:3	2116:20	9	uint32 Cr ; Cr = pp [ 5 ] ;
VAR_DECL	2116:3	2116:10	10	uint32 Cr ; Cr = pp [ 5 ]
TYPE	2116:3	2116:3	11	uint32
TYPE_NAME	2116:3	2116:3	12	uint32
LEAF_NODE	2116:3	2116:3	13	uint32
NAME	2116:10	2116:10	11	Cr
LEAF_NODE	2116:10	2116:10	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2116:10	2116:10	11	Cr = pp [ 5 ]
ASSIGN	2116:10	2116:15	12	Cr = pp [ 5 ]
LVAL	2116:10	2116:10	13	Cr
NAME	2116:10	2116:10	14	Cr
LEAF_NODE	2116:10	2116:10	15	Cr
ASSIGN_OP	2116:13	2116:13	13	=
LEAF_NODE	2116:13	2116:13	14	=
RVAL	2116:15	2116:15	13	pp [ 5 ]
FIELD	2116:15	2116:19	14	pp [ 5 ]
LEAF_NODE	2116:15	2116:15	15	pp
LEAF_NODE	2116:17	2116:17	15	[
EXPR	2116:18	2116:18	15	5
FIELD	2116:18	2116:18	16	5
LEAF_NODE	2116:18	2116:18	17	5
LEAF_NODE	2116:19	2116:19	15	]
LEAF_NODE	2116:20	2116:20	10	;
EXPR_STATEMENT	2117:3	2117:27	9	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2117:3	2117:3	10	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2117:3	2117:26	11	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2117:3	2117:3	12	YCbCrtoRGB
LEAF_NODE	2117:3	2117:3	13	YCbCrtoRGB
LEAF_NODE	2117:13	2117:13	12	(
ARGUMENT	2117:14	2117:14	12	cp [ 0 ]
FIELD	2117:14	2117:18	13	cp [ 0 ]
LEAF_NODE	2117:14	2117:14	14	cp
LEAF_NODE	2117:16	2117:16	14	[
EXPR	2117:17	2117:17	14	0
FIELD	2117:17	2117:17	15	0
LEAF_NODE	2117:17	2117:17	16	0
LEAF_NODE	2117:18	2117:18	14	]
LEAF_NODE	2117:19	2117:19	12	,
ARGUMENT	2117:21	2117:21	12	pp [ 0 ]
FIELD	2117:21	2117:25	13	pp [ 0 ]
LEAF_NODE	2117:21	2117:21	14	pp
LEAF_NODE	2117:23	2117:23	14	[
EXPR	2117:24	2117:24	14	0
FIELD	2117:24	2117:24	15	0
LEAF_NODE	2117:24	2117:24	16	0
LEAF_NODE	2117:25	2117:25	14	]
LEAF_NODE	2117:26	2117:26	12	)
LEAF_NODE	2117:27	2117:27	10	;
EXPR_STATEMENT	2118:3	2118:27	9	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] ) ;
EXPR	2118:3	2118:3	10	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
FUNCTION_CALL	2118:3	2118:26	11	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
CALLEE	2118:3	2118:3	12	YCbCrtoRGB
LEAF_NODE	2118:3	2118:3	13	YCbCrtoRGB
LEAF_NODE	2118:13	2118:13	12	(
ARGUMENT	2118:14	2118:14	12	cp [ 1 ]
FIELD	2118:14	2118:18	13	cp [ 1 ]
LEAF_NODE	2118:14	2118:14	14	cp
LEAF_NODE	2118:16	2118:16	14	[
EXPR	2118:17	2118:17	14	1
FIELD	2118:17	2118:17	15	1
LEAF_NODE	2118:17	2118:17	16	1
LEAF_NODE	2118:18	2118:18	14	]
LEAF_NODE	2118:19	2118:19	12	,
ARGUMENT	2118:21	2118:21	12	pp [ 1 ]
FIELD	2118:21	2118:25	13	pp [ 1 ]
LEAF_NODE	2118:21	2118:21	14	pp
LEAF_NODE	2118:23	2118:23	14	[
EXPR	2118:24	2118:24	14	1
FIELD	2118:24	2118:24	15	1
LEAF_NODE	2118:24	2118:24	16	1
LEAF_NODE	2118:25	2118:25	14	]
LEAF_NODE	2118:26	2118:26	12	)
LEAF_NODE	2118:27	2118:27	10	;
EXPR_STATEMENT	2119:3	2119:28	9	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 2 ] ) ;
EXPR	2119:3	2119:3	10	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 2 ] )
FUNCTION_CALL	2119:3	2119:27	11	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 2 ] )
CALLEE	2119:3	2119:3	12	YCbCrtoRGB
LEAF_NODE	2119:3	2119:3	13	YCbCrtoRGB
LEAF_NODE	2119:13	2119:13	12	(
ARGUMENT	2119:14	2119:14	12	cp2 [ 0 ]
FIELD	2119:14	2119:19	13	cp2 [ 0 ]
LEAF_NODE	2119:14	2119:14	14	cp2
LEAF_NODE	2119:17	2119:17	14	[
EXPR	2119:18	2119:18	14	0
FIELD	2119:18	2119:18	15	0
LEAF_NODE	2119:18	2119:18	16	0
LEAF_NODE	2119:19	2119:19	14	]
LEAF_NODE	2119:20	2119:20	12	,
ARGUMENT	2119:22	2119:22	12	pp [ 2 ]
FIELD	2119:22	2119:26	13	pp [ 2 ]
LEAF_NODE	2119:22	2119:22	14	pp
LEAF_NODE	2119:24	2119:24	14	[
EXPR	2119:25	2119:25	14	2
FIELD	2119:25	2119:25	15	2
LEAF_NODE	2119:25	2119:25	16	2
LEAF_NODE	2119:26	2119:26	14	]
LEAF_NODE	2119:27	2119:27	12	)
LEAF_NODE	2119:28	2119:28	10	;
EXPR_STATEMENT	2120:3	2120:28	9	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 3 ] ) ;
EXPR	2120:3	2120:3	10	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 3 ] )
FUNCTION_CALL	2120:3	2120:27	11	YCbCrtoRGB ( cp2 [ 1 ] , pp [ 3 ] )
CALLEE	2120:3	2120:3	12	YCbCrtoRGB
LEAF_NODE	2120:3	2120:3	13	YCbCrtoRGB
LEAF_NODE	2120:13	2120:13	12	(
ARGUMENT	2120:14	2120:14	12	cp2 [ 1 ]
FIELD	2120:14	2120:19	13	cp2 [ 1 ]
LEAF_NODE	2120:14	2120:14	14	cp2
LEAF_NODE	2120:17	2120:17	14	[
EXPR	2120:18	2120:18	14	1
FIELD	2120:18	2120:18	15	1
LEAF_NODE	2120:18	2120:18	16	1
LEAF_NODE	2120:19	2120:19	14	]
LEAF_NODE	2120:20	2120:20	12	,
ARGUMENT	2120:22	2120:22	12	pp [ 3 ]
FIELD	2120:22	2120:26	13	pp [ 3 ]
LEAF_NODE	2120:22	2120:22	14	pp
LEAF_NODE	2120:24	2120:24	14	[
EXPR	2120:25	2120:25	14	3
FIELD	2120:25	2120:25	15	3
LEAF_NODE	2120:25	2120:25	16	3
LEAF_NODE	2120:26	2120:26	14	]
LEAF_NODE	2120:27	2120:27	12	)
LEAF_NODE	2120:28	2120:28	10	;
EXPR_STATEMENT	2121:3	2121:10	9	cp += 2 ;
EXPR	2121:3	2121:3	10	cp += 2
ASSIGN	2121:3	2121:9	11	cp += 2
LVAL	2121:3	2121:3	12	cp
FIELD	2121:3	2121:3	13	cp
LEAF_NODE	2121:3	2121:3	14	cp
ASSIGN_OP	2121:6	2121:6	12	+=
LEAF_NODE	2121:6	2121:6	13	+=
RVAL	2121:9	2121:9	12	2
FIELD	2121:9	2121:9	13	2
LEAF_NODE	2121:9	2121:9	14	2
LEAF_NODE	2121:10	2121:10	10	;
EXPR_STATEMENT	2122:3	2122:11	9	cp2 += 2 ;
EXPR	2122:3	2122:3	10	cp2 += 2
ASSIGN	2122:3	2122:10	11	cp2 += 2
LVAL	2122:3	2122:3	12	cp2
FIELD	2122:3	2122:3	13	cp2
LEAF_NODE	2122:3	2122:3	14	cp2
ASSIGN_OP	2122:7	2122:7	12	+=
LEAF_NODE	2122:7	2122:7	13	+=
RVAL	2122:10	2122:10	12	2
FIELD	2122:10	2122:10	13	2
LEAF_NODE	2122:10	2122:10	14	2
LEAF_NODE	2122:11	2122:11	10	;
EXPR_STATEMENT	2123:3	2123:10	9	pp += 6 ;
EXPR	2123:3	2123:3	10	pp += 6
ASSIGN	2123:3	2123:9	11	pp += 6
LVAL	2123:3	2123:3	12	pp
FIELD	2123:3	2123:3	13	pp
LEAF_NODE	2123:3	2123:3	14	pp
ASSIGN_OP	2123:6	2123:6	12	+=
LEAF_NODE	2123:6	2123:6	13	+=
RVAL	2123:9	2123:9	12	6
FIELD	2123:9	2123:9	13	6
LEAF_NODE	2123:9	2123:9	14	6
LEAF_NODE	2123:10	2123:10	10	;
EXPR_STATEMENT	2124:3	2124:9	9	x -= 2 ;
EXPR	2124:3	2124:3	10	x -= 2
ASSIGN	2124:3	2124:8	11	x -= 2
LVAL	2124:3	2124:3	12	x
FIELD	2124:3	2124:3	13	x
LEAF_NODE	2124:3	2124:3	14	x
ASSIGN_OP	2124:5	2124:5	12	-=
LEAF_NODE	2124:5	2124:5	13	-=
RVAL	2124:8	2124:8	12	2
FIELD	2124:8	2124:8	13	2
LEAF_NODE	2124:8	2124:8	14	2
LEAF_NODE	2124:9	2124:9	10	;
LEAF_NODE	2125:2	2125:2	8	}
SELECTION	2126:2	2126:12	6	
KEYWORD	2126:2	2126:2	7	if
LEAF_NODE	2126:2	2126:2	8	if
LEAF_NODE	2126:5	2126:5	7	(
CONDITION	2126:6	2126:6	7	x == 1
EXPR	2126:6	2126:9	8	x == 1
FIELD	2126:6	2126:6	9	x
LEAF_NODE	2126:6	2126:6	10	x
EQ_OPERATOR	2126:7	2126:7	9	==
LEAF_NODE	2126:7	2126:7	10	==
FIELD	2126:9	2126:9	9	1
LEAF_NODE	2126:9	2126:9	10	1
LEAF_NODE	2126:10	2126:10	7	)
STATEMENTS	2126:12	2134:2	7	
LEAF_NODE	2126:12	2126:12	8	{
STATEMENTS	2127:3	2133:3	8	
SIMPLE_DECL	2127:3	2127:20	9	uint32 Cb ; Cb = pp [ 4 ] ;
VAR_DECL	2127:3	2127:10	10	uint32 Cb ; Cb = pp [ 4 ]
TYPE	2127:3	2127:3	11	uint32
TYPE_NAME	2127:3	2127:3	12	uint32
LEAF_NODE	2127:3	2127:3	13	uint32
NAME	2127:10	2127:10	11	Cb
LEAF_NODE	2127:10	2127:10	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2127:10	2127:10	11	Cb = pp [ 4 ]
ASSIGN	2127:10	2127:15	12	Cb = pp [ 4 ]
LVAL	2127:10	2127:10	13	Cb
NAME	2127:10	2127:10	14	Cb
LEAF_NODE	2127:10	2127:10	15	Cb
ASSIGN_OP	2127:13	2127:13	13	=
LEAF_NODE	2127:13	2127:13	14	=
RVAL	2127:15	2127:15	13	pp [ 4 ]
FIELD	2127:15	2127:19	14	pp [ 4 ]
LEAF_NODE	2127:15	2127:15	15	pp
LEAF_NODE	2127:17	2127:17	15	[
EXPR	2127:18	2127:18	15	4
FIELD	2127:18	2127:18	16	4
LEAF_NODE	2127:18	2127:18	17	4
LEAF_NODE	2127:19	2127:19	15	]
LEAF_NODE	2127:20	2127:20	10	;
SIMPLE_DECL	2128:3	2128:20	9	uint32 Cr ; Cr = pp [ 5 ] ;
VAR_DECL	2128:3	2128:10	10	uint32 Cr ; Cr = pp [ 5 ]
TYPE	2128:3	2128:3	11	uint32
TYPE_NAME	2128:3	2128:3	12	uint32
LEAF_NODE	2128:3	2128:3	13	uint32
NAME	2128:10	2128:10	11	Cr
LEAF_NODE	2128:10	2128:10	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2128:10	2128:10	11	Cr = pp [ 5 ]
ASSIGN	2128:10	2128:15	12	Cr = pp [ 5 ]
LVAL	2128:10	2128:10	13	Cr
NAME	2128:10	2128:10	14	Cr
LEAF_NODE	2128:10	2128:10	15	Cr
ASSIGN_OP	2128:13	2128:13	13	=
LEAF_NODE	2128:13	2128:13	14	=
RVAL	2128:15	2128:15	13	pp [ 5 ]
FIELD	2128:15	2128:19	14	pp [ 5 ]
LEAF_NODE	2128:15	2128:15	15	pp
LEAF_NODE	2128:17	2128:17	15	[
EXPR	2128:18	2128:18	15	5
FIELD	2128:18	2128:18	16	5
LEAF_NODE	2128:18	2128:18	17	5
LEAF_NODE	2128:19	2128:19	15	]
LEAF_NODE	2128:20	2128:20	10	;
EXPR_STATEMENT	2129:3	2129:27	9	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2129:3	2129:3	10	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2129:3	2129:26	11	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2129:3	2129:3	12	YCbCrtoRGB
LEAF_NODE	2129:3	2129:3	13	YCbCrtoRGB
LEAF_NODE	2129:13	2129:13	12	(
ARGUMENT	2129:14	2129:14	12	cp [ 0 ]
FIELD	2129:14	2129:18	13	cp [ 0 ]
LEAF_NODE	2129:14	2129:14	14	cp
LEAF_NODE	2129:16	2129:16	14	[
EXPR	2129:17	2129:17	14	0
FIELD	2129:17	2129:17	15	0
LEAF_NODE	2129:17	2129:17	16	0
LEAF_NODE	2129:18	2129:18	14	]
LEAF_NODE	2129:19	2129:19	12	,
ARGUMENT	2129:21	2129:21	12	pp [ 0 ]
FIELD	2129:21	2129:25	13	pp [ 0 ]
LEAF_NODE	2129:21	2129:21	14	pp
LEAF_NODE	2129:23	2129:23	14	[
EXPR	2129:24	2129:24	14	0
FIELD	2129:24	2129:24	15	0
LEAF_NODE	2129:24	2129:24	16	0
LEAF_NODE	2129:25	2129:25	14	]
LEAF_NODE	2129:26	2129:26	12	)
LEAF_NODE	2129:27	2129:27	10	;
EXPR_STATEMENT	2130:3	2130:28	9	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 2 ] ) ;
EXPR	2130:3	2130:3	10	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 2 ] )
FUNCTION_CALL	2130:3	2130:27	11	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 2 ] )
CALLEE	2130:3	2130:3	12	YCbCrtoRGB
LEAF_NODE	2130:3	2130:3	13	YCbCrtoRGB
LEAF_NODE	2130:13	2130:13	12	(
ARGUMENT	2130:14	2130:14	12	cp2 [ 0 ]
FIELD	2130:14	2130:19	13	cp2 [ 0 ]
LEAF_NODE	2130:14	2130:14	14	cp2
LEAF_NODE	2130:17	2130:17	14	[
EXPR	2130:18	2130:18	14	0
FIELD	2130:18	2130:18	15	0
LEAF_NODE	2130:18	2130:18	16	0
LEAF_NODE	2130:19	2130:19	14	]
LEAF_NODE	2130:20	2130:20	12	,
ARGUMENT	2130:22	2130:22	12	pp [ 2 ]
FIELD	2130:22	2130:26	13	pp [ 2 ]
LEAF_NODE	2130:22	2130:22	14	pp
LEAF_NODE	2130:24	2130:24	14	[
EXPR	2130:25	2130:25	14	2
FIELD	2130:25	2130:25	15	2
LEAF_NODE	2130:25	2130:25	16	2
LEAF_NODE	2130:26	2130:26	14	]
LEAF_NODE	2130:27	2130:27	12	)
LEAF_NODE	2130:28	2130:28	10	;
EXPR_STATEMENT	2131:3	2131:9	9	cp ++ ;
EXPR	2131:3	2131:3	10	cp ++
FIELD	2131:3	2131:6	11	cp ++
LEAF_NODE	2131:3	2131:3	12	cp
LEAF_NODE	2131:6	2131:6	12	++
LEAF_NODE	2131:9	2131:9	10	;
EXPR_STATEMENT	2132:3	2132:10	9	cp2 ++ ;
EXPR	2132:3	2132:3	10	cp2 ++
FIELD	2132:3	2132:7	11	cp2 ++
LEAF_NODE	2132:3	2132:3	12	cp2
LEAF_NODE	2132:7	2132:7	12	++
LEAF_NODE	2132:10	2132:10	10	;
EXPR_STATEMENT	2133:3	2133:10	9	pp += 6 ;
EXPR	2133:3	2133:3	10	pp += 6
ASSIGN	2133:3	2133:9	11	pp += 6
LVAL	2133:3	2133:3	12	pp
FIELD	2133:3	2133:3	13	pp
LEAF_NODE	2133:3	2133:3	14	pp
ASSIGN_OP	2133:6	2133:6	12	+=
LEAF_NODE	2133:6	2133:6	13	+=
RVAL	2133:9	2133:9	12	6
FIELD	2133:9	2133:9	13	6
LEAF_NODE	2133:9	2133:9	14	6
LEAF_NODE	2133:10	2133:10	10	;
LEAF_NODE	2134:2	2134:2	8	}
EXPR_STATEMENT	2135:2	2135:12	6	cp += incr ;
EXPR	2135:2	2135:2	7	cp += incr
ASSIGN	2135:2	2135:8	8	cp += incr
LVAL	2135:2	2135:2	9	cp
FIELD	2135:2	2135:2	10	cp
LEAF_NODE	2135:2	2135:2	11	cp
ASSIGN_OP	2135:5	2135:5	9	+=
LEAF_NODE	2135:5	2135:5	10	+=
RVAL	2135:8	2135:8	9	incr
FIELD	2135:8	2135:8	10	incr
LEAF_NODE	2135:8	2135:8	11	incr
LEAF_NODE	2135:12	2135:12	7	;
EXPR_STATEMENT	2136:2	2136:13	6	cp2 += incr ;
EXPR	2136:2	2136:2	7	cp2 += incr
ASSIGN	2136:2	2136:9	8	cp2 += incr
LVAL	2136:2	2136:2	9	cp2
FIELD	2136:2	2136:2	10	cp2
LEAF_NODE	2136:2	2136:2	11	cp2
ASSIGN_OP	2136:6	2136:6	9	+=
LEAF_NODE	2136:6	2136:6	10	+=
RVAL	2136:9	2136:9	9	incr
FIELD	2136:9	2136:9	10	incr
LEAF_NODE	2136:9	2136:9	11	incr
LEAF_NODE	2136:13	2136:13	7	;
EXPR_STATEMENT	2137:2	2137:16	6	pp += fromskew ;
EXPR	2137:2	2137:2	7	pp += fromskew
ASSIGN	2137:2	2137:8	8	pp += fromskew
LVAL	2137:2	2137:2	9	pp
FIELD	2137:2	2137:2	10	pp
LEAF_NODE	2137:2	2137:2	11	pp
ASSIGN_OP	2137:5	2137:5	9	+=
LEAF_NODE	2137:5	2137:5	10	+=
RVAL	2137:8	2137:8	9	fromskew
FIELD	2137:8	2137:8	10	fromskew
LEAF_NODE	2137:8	2137:8	11	fromskew
LEAF_NODE	2137:16	2137:16	7	;
EXPR_STATEMENT	2138:2	2138:6	6	h -= 2 ;
EXPR	2138:2	2138:2	7	h -= 2
ASSIGN	2138:2	2138:5	8	h -= 2
LVAL	2138:2	2138:2	9	h
FIELD	2138:2	2138:2	10	h
LEAF_NODE	2138:2	2138:2	11	h
ASSIGN_OP	2138:3	2138:3	9	-=
LEAF_NODE	2138:3	2138:3	10	-=
RVAL	2138:5	2138:5	9	2
FIELD	2138:5	2138:5	10	2
LEAF_NODE	2138:5	2138:5	11	2
LEAF_NODE	2138:6	2138:6	7	;
LEAF_NODE	2139:1	2139:1	5	}
SELECTION	2140:1	2140:11	3	
KEYWORD	2140:1	2140:1	4	if
LEAF_NODE	2140:1	2140:1	5	if
LEAF_NODE	2140:4	2140:4	4	(
CONDITION	2140:5	2140:5	4	h == 1
EXPR	2140:5	2140:8	5	h == 1
FIELD	2140:5	2140:5	6	h
LEAF_NODE	2140:5	2140:5	7	h
EQ_OPERATOR	2140:6	2140:6	6	==
LEAF_NODE	2140:6	2140:6	7	==
FIELD	2140:8	2140:8	6	1
LEAF_NODE	2140:8	2140:8	7	1
LEAF_NODE	2140:9	2140:9	4	)
STATEMENTS	2140:11	2157:1	4	
LEAF_NODE	2140:11	2140:11	5	{
STATEMENTS	2141:2	2152:2	5	
EXPR_STATEMENT	2141:2	2141:7	6	x = w ;
EXPR	2141:2	2141:2	7	x = w
ASSIGN	2141:2	2141:6	8	x = w
LVAL	2141:2	2141:2	9	x
FIELD	2141:2	2141:2	10	x
LEAF_NODE	2141:2	2141:2	11	x
ASSIGN_OP	2141:4	2141:4	9	=
LEAF_NODE	2141:4	2141:4	10	=
RVAL	2141:6	2141:6	9	w
FIELD	2141:6	2141:6	10	w
LEAF_NODE	2141:6	2141:6	11	w
LEAF_NODE	2141:7	2141:7	7	;
ITERATION	2142:2	2142:15	6	
KEYWORD	2142:2	2142:2	7	while
LEAF_NODE	2142:2	2142:2	8	while
LEAF_NODE	2142:8	2142:8	7	(
CONDITION	2142:9	2142:9	7	x >= 2
EXPR	2142:9	2142:12	8	x >= 2
FIELD	2142:9	2142:9	9	x
LEAF_NODE	2142:9	2142:9	10	x
REL_OPERATOR	2142:10	2142:10	9	>=
LEAF_NODE	2142:10	2142:10	10	>=
FIELD	2142:12	2142:12	9	2
LEAF_NODE	2142:12	2142:12	10	2
LEAF_NODE	2142:13	2142:13	7	)
STATEMENTS	2142:15	2151:2	7	
LEAF_NODE	2142:15	2142:15	8	{
STATEMENTS	2143:3	2150:3	8	
SIMPLE_DECL	2143:3	2143:20	9	uint32 Cb ; Cb = pp [ 4 ] ;
VAR_DECL	2143:3	2143:10	10	uint32 Cb ; Cb = pp [ 4 ]
TYPE	2143:3	2143:3	11	uint32
TYPE_NAME	2143:3	2143:3	12	uint32
LEAF_NODE	2143:3	2143:3	13	uint32
NAME	2143:10	2143:10	11	Cb
LEAF_NODE	2143:10	2143:10	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2143:10	2143:10	11	Cb = pp [ 4 ]
ASSIGN	2143:10	2143:15	12	Cb = pp [ 4 ]
LVAL	2143:10	2143:10	13	Cb
NAME	2143:10	2143:10	14	Cb
LEAF_NODE	2143:10	2143:10	15	Cb
ASSIGN_OP	2143:13	2143:13	13	=
LEAF_NODE	2143:13	2143:13	14	=
RVAL	2143:15	2143:15	13	pp [ 4 ]
FIELD	2143:15	2143:19	14	pp [ 4 ]
LEAF_NODE	2143:15	2143:15	15	pp
LEAF_NODE	2143:17	2143:17	15	[
EXPR	2143:18	2143:18	15	4
FIELD	2143:18	2143:18	16	4
LEAF_NODE	2143:18	2143:18	17	4
LEAF_NODE	2143:19	2143:19	15	]
LEAF_NODE	2143:20	2143:20	10	;
SIMPLE_DECL	2144:3	2144:20	9	uint32 Cr ; Cr = pp [ 5 ] ;
VAR_DECL	2144:3	2144:10	10	uint32 Cr ; Cr = pp [ 5 ]
TYPE	2144:3	2144:3	11	uint32
TYPE_NAME	2144:3	2144:3	12	uint32
LEAF_NODE	2144:3	2144:3	13	uint32
NAME	2144:10	2144:10	11	Cr
LEAF_NODE	2144:10	2144:10	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2144:10	2144:10	11	Cr = pp [ 5 ]
ASSIGN	2144:10	2144:15	12	Cr = pp [ 5 ]
LVAL	2144:10	2144:10	13	Cr
NAME	2144:10	2144:10	14	Cr
LEAF_NODE	2144:10	2144:10	15	Cr
ASSIGN_OP	2144:13	2144:13	13	=
LEAF_NODE	2144:13	2144:13	14	=
RVAL	2144:15	2144:15	13	pp [ 5 ]
FIELD	2144:15	2144:19	14	pp [ 5 ]
LEAF_NODE	2144:15	2144:15	15	pp
LEAF_NODE	2144:17	2144:17	15	[
EXPR	2144:18	2144:18	15	5
FIELD	2144:18	2144:18	16	5
LEAF_NODE	2144:18	2144:18	17	5
LEAF_NODE	2144:19	2144:19	15	]
LEAF_NODE	2144:20	2144:20	10	;
EXPR_STATEMENT	2145:3	2145:27	9	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2145:3	2145:3	10	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2145:3	2145:26	11	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2145:3	2145:3	12	YCbCrtoRGB
LEAF_NODE	2145:3	2145:3	13	YCbCrtoRGB
LEAF_NODE	2145:13	2145:13	12	(
ARGUMENT	2145:14	2145:14	12	cp [ 0 ]
FIELD	2145:14	2145:18	13	cp [ 0 ]
LEAF_NODE	2145:14	2145:14	14	cp
LEAF_NODE	2145:16	2145:16	14	[
EXPR	2145:17	2145:17	14	0
FIELD	2145:17	2145:17	15	0
LEAF_NODE	2145:17	2145:17	16	0
LEAF_NODE	2145:18	2145:18	14	]
LEAF_NODE	2145:19	2145:19	12	,
ARGUMENT	2145:21	2145:21	12	pp [ 0 ]
FIELD	2145:21	2145:25	13	pp [ 0 ]
LEAF_NODE	2145:21	2145:21	14	pp
LEAF_NODE	2145:23	2145:23	14	[
EXPR	2145:24	2145:24	14	0
FIELD	2145:24	2145:24	15	0
LEAF_NODE	2145:24	2145:24	16	0
LEAF_NODE	2145:25	2145:25	14	]
LEAF_NODE	2145:26	2145:26	12	)
LEAF_NODE	2145:27	2145:27	10	;
EXPR_STATEMENT	2146:3	2146:27	9	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] ) ;
EXPR	2146:3	2146:3	10	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
FUNCTION_CALL	2146:3	2146:26	11	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
CALLEE	2146:3	2146:3	12	YCbCrtoRGB
LEAF_NODE	2146:3	2146:3	13	YCbCrtoRGB
LEAF_NODE	2146:13	2146:13	12	(
ARGUMENT	2146:14	2146:14	12	cp [ 1 ]
FIELD	2146:14	2146:18	13	cp [ 1 ]
LEAF_NODE	2146:14	2146:14	14	cp
LEAF_NODE	2146:16	2146:16	14	[
EXPR	2146:17	2146:17	14	1
FIELD	2146:17	2146:17	15	1
LEAF_NODE	2146:17	2146:17	16	1
LEAF_NODE	2146:18	2146:18	14	]
LEAF_NODE	2146:19	2146:19	12	,
ARGUMENT	2146:21	2146:21	12	pp [ 1 ]
FIELD	2146:21	2146:25	13	pp [ 1 ]
LEAF_NODE	2146:21	2146:21	14	pp
LEAF_NODE	2146:23	2146:23	14	[
EXPR	2146:24	2146:24	14	1
FIELD	2146:24	2146:24	15	1
LEAF_NODE	2146:24	2146:24	16	1
LEAF_NODE	2146:25	2146:25	14	]
LEAF_NODE	2146:26	2146:26	12	)
LEAF_NODE	2146:27	2146:27	10	;
EXPR_STATEMENT	2147:3	2147:10	9	cp += 2 ;
EXPR	2147:3	2147:3	10	cp += 2
ASSIGN	2147:3	2147:9	11	cp += 2
LVAL	2147:3	2147:3	12	cp
FIELD	2147:3	2147:3	13	cp
LEAF_NODE	2147:3	2147:3	14	cp
ASSIGN_OP	2147:6	2147:6	12	+=
LEAF_NODE	2147:6	2147:6	13	+=
RVAL	2147:9	2147:9	12	2
FIELD	2147:9	2147:9	13	2
LEAF_NODE	2147:9	2147:9	14	2
LEAF_NODE	2147:10	2147:10	10	;
EXPR_STATEMENT	2148:3	2148:11	9	cp2 += 2 ;
EXPR	2148:3	2148:3	10	cp2 += 2
ASSIGN	2148:3	2148:10	11	cp2 += 2
LVAL	2148:3	2148:3	12	cp2
FIELD	2148:3	2148:3	13	cp2
LEAF_NODE	2148:3	2148:3	14	cp2
ASSIGN_OP	2148:7	2148:7	12	+=
LEAF_NODE	2148:7	2148:7	13	+=
RVAL	2148:10	2148:10	12	2
FIELD	2148:10	2148:10	13	2
LEAF_NODE	2148:10	2148:10	14	2
LEAF_NODE	2148:11	2148:11	10	;
EXPR_STATEMENT	2149:3	2149:10	9	pp += 6 ;
EXPR	2149:3	2149:3	10	pp += 6
ASSIGN	2149:3	2149:9	11	pp += 6
LVAL	2149:3	2149:3	12	pp
FIELD	2149:3	2149:3	13	pp
LEAF_NODE	2149:3	2149:3	14	pp
ASSIGN_OP	2149:6	2149:6	12	+=
LEAF_NODE	2149:6	2149:6	13	+=
RVAL	2149:9	2149:9	12	6
FIELD	2149:9	2149:9	13	6
LEAF_NODE	2149:9	2149:9	14	6
LEAF_NODE	2149:10	2149:10	10	;
EXPR_STATEMENT	2150:3	2150:9	9	x -= 2 ;
EXPR	2150:3	2150:3	10	x -= 2
ASSIGN	2150:3	2150:8	11	x -= 2
LVAL	2150:3	2150:3	12	x
FIELD	2150:3	2150:3	13	x
LEAF_NODE	2150:3	2150:3	14	x
ASSIGN_OP	2150:5	2150:5	12	-=
LEAF_NODE	2150:5	2150:5	13	-=
RVAL	2150:8	2150:8	12	2
FIELD	2150:8	2150:8	13	2
LEAF_NODE	2150:8	2150:8	14	2
LEAF_NODE	2150:9	2150:9	10	;
LEAF_NODE	2151:2	2151:2	8	}
SELECTION	2152:2	2152:12	6	
KEYWORD	2152:2	2152:2	7	if
LEAF_NODE	2152:2	2152:2	8	if
LEAF_NODE	2152:5	2152:5	7	(
CONDITION	2152:6	2152:6	7	x == 1
EXPR	2152:6	2152:9	8	x == 1
FIELD	2152:6	2152:6	9	x
LEAF_NODE	2152:6	2152:6	10	x
EQ_OPERATOR	2152:7	2152:7	9	==
LEAF_NODE	2152:7	2152:7	10	==
FIELD	2152:9	2152:9	9	1
LEAF_NODE	2152:9	2152:9	10	1
LEAF_NODE	2152:10	2152:10	7	)
STATEMENTS	2152:12	2156:2	7	
LEAF_NODE	2152:12	2152:12	8	{
STATEMENTS	2153:3	2155:3	8	
SIMPLE_DECL	2153:3	2153:20	9	uint32 Cb ; Cb = pp [ 4 ] ;
VAR_DECL	2153:3	2153:10	10	uint32 Cb ; Cb = pp [ 4 ]
TYPE	2153:3	2153:3	11	uint32
TYPE_NAME	2153:3	2153:3	12	uint32
LEAF_NODE	2153:3	2153:3	13	uint32
NAME	2153:10	2153:10	11	Cb
LEAF_NODE	2153:10	2153:10	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2153:10	2153:10	11	Cb = pp [ 4 ]
ASSIGN	2153:10	2153:15	12	Cb = pp [ 4 ]
LVAL	2153:10	2153:10	13	Cb
NAME	2153:10	2153:10	14	Cb
LEAF_NODE	2153:10	2153:10	15	Cb
ASSIGN_OP	2153:13	2153:13	13	=
LEAF_NODE	2153:13	2153:13	14	=
RVAL	2153:15	2153:15	13	pp [ 4 ]
FIELD	2153:15	2153:19	14	pp [ 4 ]
LEAF_NODE	2153:15	2153:15	15	pp
LEAF_NODE	2153:17	2153:17	15	[
EXPR	2153:18	2153:18	15	4
FIELD	2153:18	2153:18	16	4
LEAF_NODE	2153:18	2153:18	17	4
LEAF_NODE	2153:19	2153:19	15	]
LEAF_NODE	2153:20	2153:20	10	;
SIMPLE_DECL	2154:3	2154:20	9	uint32 Cr ; Cr = pp [ 5 ] ;
VAR_DECL	2154:3	2154:10	10	uint32 Cr ; Cr = pp [ 5 ]
TYPE	2154:3	2154:3	11	uint32
TYPE_NAME	2154:3	2154:3	12	uint32
LEAF_NODE	2154:3	2154:3	13	uint32
NAME	2154:10	2154:10	11	Cr
LEAF_NODE	2154:10	2154:10	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2154:10	2154:10	11	Cr = pp [ 5 ]
ASSIGN	2154:10	2154:15	12	Cr = pp [ 5 ]
LVAL	2154:10	2154:10	13	Cr
NAME	2154:10	2154:10	14	Cr
LEAF_NODE	2154:10	2154:10	15	Cr
ASSIGN_OP	2154:13	2154:13	13	=
LEAF_NODE	2154:13	2154:13	14	=
RVAL	2154:15	2154:15	13	pp [ 5 ]
FIELD	2154:15	2154:19	14	pp [ 5 ]
LEAF_NODE	2154:15	2154:15	15	pp
LEAF_NODE	2154:17	2154:17	15	[
EXPR	2154:18	2154:18	15	5
FIELD	2154:18	2154:18	16	5
LEAF_NODE	2154:18	2154:18	17	5
LEAF_NODE	2154:19	2154:19	15	]
LEAF_NODE	2154:20	2154:20	10	;
EXPR_STATEMENT	2155:3	2155:27	9	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2155:3	2155:3	10	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2155:3	2155:26	11	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2155:3	2155:3	12	YCbCrtoRGB
LEAF_NODE	2155:3	2155:3	13	YCbCrtoRGB
LEAF_NODE	2155:13	2155:13	12	(
ARGUMENT	2155:14	2155:14	12	cp [ 0 ]
FIELD	2155:14	2155:18	13	cp [ 0 ]
LEAF_NODE	2155:14	2155:14	14	cp
LEAF_NODE	2155:16	2155:16	14	[
EXPR	2155:17	2155:17	14	0
FIELD	2155:17	2155:17	15	0
LEAF_NODE	2155:17	2155:17	16	0
LEAF_NODE	2155:18	2155:18	14	]
LEAF_NODE	2155:19	2155:19	12	,
ARGUMENT	2155:21	2155:21	12	pp [ 0 ]
FIELD	2155:21	2155:25	13	pp [ 0 ]
LEAF_NODE	2155:21	2155:21	14	pp
LEAF_NODE	2155:23	2155:23	14	[
EXPR	2155:24	2155:24	14	0
FIELD	2155:24	2155:24	15	0
LEAF_NODE	2155:24	2155:24	16	0
LEAF_NODE	2155:25	2155:25	14	]
LEAF_NODE	2155:26	2155:26	12	)
LEAF_NODE	2155:27	2155:27	10	;
LEAF_NODE	2156:2	2156:2	8	}
LEAF_NODE	2157:1	2157:1	5	}
LEAF_NODE	2158:0	2158:0	2	}
FUNCTION_DEF	0:0	2195:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	2163:0	2163:0	2	DECLAREContigPutFunc
LEAF_NODE	2163:0	2163:0	3	DECLAREContigPutFunc
PARAMETER_LIST	2163:20	2163:45	2	( putcontig8bitYCbCr21tile )
LEAF_NODE	2163:20	2163:20	3	(
PARAMETER_DECL	2163:21	2163:21	3	putcontig8bitYCbCr21tile
LEAF_NODE	2163:21	2163:21	4	putcontig8bitYCbCr21tile
LEAF_NODE	2163:45	2163:45	3	)
LEAF_NODE	2164:0	2164:0	2	{
STATEMENTS	2165:1	2194:14	2	
EXPR_STATEMENT	2165:1	2165:9	3	( void ) y ;
EXPR	2165:1	2165:8	4	( void ) y
LEAF_NODE	2165:1	2165:1	5	(
TYPE_NAME	2165:2	2165:2	5	void
LEAF_NODE	2165:2	2165:2	6	void
LEAF_NODE	2165:6	2165:6	5	)
FIELD	2165:8	2165:8	5	y
LEAF_NODE	2165:8	2165:8	6	y
LEAF_NODE	2165:9	2165:9	4	;
EXPR_STATEMENT	2166:1	2166:36	3	fromskew = ( fromskew / 2 ) * ( 2 * 1 + 2 ) ;
EXPR	2166:1	2166:1	4	fromskew = ( fromskew / 2 ) * ( 2 * 1 + 2 )
ASSIGN	2166:1	2166:12	5	fromskew = ( fromskew / 2 ) * ( 2 * 1 + 2 )
LVAL	2166:1	2166:1	6	fromskew
FIELD	2166:1	2166:1	7	fromskew
LEAF_NODE	2166:1	2166:1	8	fromskew
ASSIGN_OP	2166:10	2166:10	6	=
LEAF_NODE	2166:10	2166:10	7	=
RVAL	2166:12	2166:35	6	( fromskew / 2 ) * ( 2 * 1 + 2 )
LEAF_NODE	2166:12	2166:12	7	(
FIELD	2166:13	2166:13	7	fromskew
LEAF_NODE	2166:13	2166:13	8	fromskew
LEAF_NODE	2166:22	2166:22	7	/
FIELD	2166:24	2166:24	7	2
LEAF_NODE	2166:24	2166:24	8	2
LEAF_NODE	2166:25	2166:25	7	)
LEAF_NODE	2166:27	2166:27	7	*
LEAF_NODE	2166:29	2166:29	7	(
FIELD	2166:30	2166:30	7	2
LEAF_NODE	2166:30	2166:30	8	2
LEAF_NODE	2166:31	2166:31	7	*
FIELD	2166:32	2166:32	7	1
LEAF_NODE	2166:32	2166:32	8	1
LEAF_NODE	2166:33	2166:33	7	+
FIELD	2166:34	2166:34	7	2
LEAF_NODE	2166:34	2166:34	8	2
LEAF_NODE	2166:35	2166:35	7	)
LEAF_NODE	2166:36	2166:36	4	;
ITERATION	2167:1	2167:4	3	
KEYWORD	2167:1	2167:1	4	do
LEAF_NODE	2167:1	2167:1	5	do
LEAF_NODE	2194:9	2194:9	4	(
CONDITION	2194:10	2194:10	4	-- h
EXPR	2194:10	2194:12	5	-- h
LEAF_NODE	2194:10	2194:10	6	--
FIELD	2194:12	2194:12	6	h
LEAF_NODE	2194:12	2194:12	7	h
LEAF_NODE	2194:13	2194:13	4	)
STATEMENTS	2167:4	2194:1	4	
LEAF_NODE	2167:4	2167:4	5	{
STATEMENTS	2168:2	2193:2	5	
EXPR_STATEMENT	2168:2	2168:10	6	x = w >> 1 ;
EXPR	2168:2	2168:2	7	x = w >> 1
ASSIGN	2168:2	2168:6	8	x = w >> 1
LVAL	2168:2	2168:2	9	x
FIELD	2168:2	2168:2	10	x
LEAF_NODE	2168:2	2168:2	11	x
ASSIGN_OP	2168:4	2168:4	9	=
LEAF_NODE	2168:4	2168:4	10	=
RVAL	2168:6	2168:9	9	w >> 1
FIELD	2168:6	2168:6	10	w
LEAF_NODE	2168:6	2168:6	11	w
LEAF_NODE	2168:7	2168:7	10	>>
FIELD	2168:9	2168:9	10	1
LEAF_NODE	2168:9	2168:9	11	1
LEAF_NODE	2168:10	2168:10	7	;
ITERATION	2169:2	2169:13	6	
KEYWORD	2169:2	2169:2	7	while
LEAF_NODE	2169:2	2169:2	8	while
LEAF_NODE	2169:7	2169:7	7	(
CONDITION	2169:8	2169:8	7	x > 0
EXPR	2169:8	2169:10	8	x > 0
FIELD	2169:8	2169:8	9	x
LEAF_NODE	2169:8	2169:8	10	x
REL_OPERATOR	2169:9	2169:9	9	>
LEAF_NODE	2169:9	2169:9	10	>
FIELD	2169:10	2169:10	9	0
LEAF_NODE	2169:10	2169:10	10	0
LEAF_NODE	2169:11	2169:11	7	)
STATEMENTS	2169:13	2179:2	7	
LEAF_NODE	2169:13	2169:13	8	{
STATEMENTS	2170:3	2178:3	8	
SIMPLE_DECL	2170:3	2170:19	9	int32 Cb ; Cb = pp [ 2 ] ;
VAR_DECL	2170:3	2170:9	10	int32 Cb ; Cb = pp [ 2 ]
TYPE	2170:3	2170:3	11	int32
TYPE_NAME	2170:3	2170:3	12	int32
LEAF_NODE	2170:3	2170:3	13	int32
NAME	2170:9	2170:9	11	Cb
LEAF_NODE	2170:9	2170:9	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2170:9	2170:9	11	Cb = pp [ 2 ]
ASSIGN	2170:9	2170:14	12	Cb = pp [ 2 ]
LVAL	2170:9	2170:9	13	Cb
NAME	2170:9	2170:9	14	Cb
LEAF_NODE	2170:9	2170:9	15	Cb
ASSIGN_OP	2170:12	2170:12	13	=
LEAF_NODE	2170:12	2170:12	14	=
RVAL	2170:14	2170:14	13	pp [ 2 ]
FIELD	2170:14	2170:18	14	pp [ 2 ]
LEAF_NODE	2170:14	2170:14	15	pp
LEAF_NODE	2170:16	2170:16	15	[
EXPR	2170:17	2170:17	15	2
FIELD	2170:17	2170:17	16	2
LEAF_NODE	2170:17	2170:17	17	2
LEAF_NODE	2170:18	2170:18	15	]
LEAF_NODE	2170:19	2170:19	10	;
SIMPLE_DECL	2171:3	2171:19	9	int32 Cr ; Cr = pp [ 3 ] ;
VAR_DECL	2171:3	2171:9	10	int32 Cr ; Cr = pp [ 3 ]
TYPE	2171:3	2171:3	11	int32
TYPE_NAME	2171:3	2171:3	12	int32
LEAF_NODE	2171:3	2171:3	13	int32
NAME	2171:9	2171:9	11	Cr
LEAF_NODE	2171:9	2171:9	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2171:9	2171:9	11	Cr = pp [ 3 ]
ASSIGN	2171:9	2171:14	12	Cr = pp [ 3 ]
LVAL	2171:9	2171:9	13	Cr
NAME	2171:9	2171:9	14	Cr
LEAF_NODE	2171:9	2171:9	15	Cr
ASSIGN_OP	2171:12	2171:12	13	=
LEAF_NODE	2171:12	2171:12	14	=
RVAL	2171:14	2171:14	13	pp [ 3 ]
FIELD	2171:14	2171:18	14	pp [ 3 ]
LEAF_NODE	2171:14	2171:14	15	pp
LEAF_NODE	2171:16	2171:16	15	[
EXPR	2171:17	2171:17	15	3
FIELD	2171:17	2171:17	16	3
LEAF_NODE	2171:17	2171:17	17	3
LEAF_NODE	2171:18	2171:18	15	]
LEAF_NODE	2171:19	2171:19	10	;
EXPR_STATEMENT	2173:3	2173:27	9	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2173:3	2173:3	10	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2173:3	2173:26	11	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2173:3	2173:3	12	YCbCrtoRGB
LEAF_NODE	2173:3	2173:3	13	YCbCrtoRGB
LEAF_NODE	2173:13	2173:13	12	(
ARGUMENT	2173:14	2173:14	12	cp [ 0 ]
FIELD	2173:14	2173:18	13	cp [ 0 ]
LEAF_NODE	2173:14	2173:14	14	cp
LEAF_NODE	2173:16	2173:16	14	[
EXPR	2173:17	2173:17	14	0
FIELD	2173:17	2173:17	15	0
LEAF_NODE	2173:17	2173:17	16	0
LEAF_NODE	2173:18	2173:18	14	]
LEAF_NODE	2173:19	2173:19	12	,
ARGUMENT	2173:21	2173:21	12	pp [ 0 ]
FIELD	2173:21	2173:25	13	pp [ 0 ]
LEAF_NODE	2173:21	2173:21	14	pp
LEAF_NODE	2173:23	2173:23	14	[
EXPR	2173:24	2173:24	14	0
FIELD	2173:24	2173:24	15	0
LEAF_NODE	2173:24	2173:24	16	0
LEAF_NODE	2173:25	2173:25	14	]
LEAF_NODE	2173:26	2173:26	12	)
LEAF_NODE	2173:27	2173:27	10	;
EXPR_STATEMENT	2174:3	2174:27	9	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] ) ;
EXPR	2174:3	2174:3	10	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
FUNCTION_CALL	2174:3	2174:26	11	YCbCrtoRGB ( cp [ 1 ] , pp [ 1 ] )
CALLEE	2174:3	2174:3	12	YCbCrtoRGB
LEAF_NODE	2174:3	2174:3	13	YCbCrtoRGB
LEAF_NODE	2174:13	2174:13	12	(
ARGUMENT	2174:14	2174:14	12	cp [ 1 ]
FIELD	2174:14	2174:18	13	cp [ 1 ]
LEAF_NODE	2174:14	2174:14	14	cp
LEAF_NODE	2174:16	2174:16	14	[
EXPR	2174:17	2174:17	14	1
FIELD	2174:17	2174:17	15	1
LEAF_NODE	2174:17	2174:17	16	1
LEAF_NODE	2174:18	2174:18	14	]
LEAF_NODE	2174:19	2174:19	12	,
ARGUMENT	2174:21	2174:21	12	pp [ 1 ]
FIELD	2174:21	2174:25	13	pp [ 1 ]
LEAF_NODE	2174:21	2174:21	14	pp
LEAF_NODE	2174:23	2174:23	14	[
EXPR	2174:24	2174:24	14	1
FIELD	2174:24	2174:24	15	1
LEAF_NODE	2174:24	2174:24	16	1
LEAF_NODE	2174:25	2174:25	14	]
LEAF_NODE	2174:26	2174:26	12	)
LEAF_NODE	2174:27	2174:27	10	;
EXPR_STATEMENT	2176:3	2176:10	9	cp += 2 ;
EXPR	2176:3	2176:3	10	cp += 2
ASSIGN	2176:3	2176:9	11	cp += 2
LVAL	2176:3	2176:3	12	cp
FIELD	2176:3	2176:3	13	cp
LEAF_NODE	2176:3	2176:3	14	cp
ASSIGN_OP	2176:6	2176:6	12	+=
LEAF_NODE	2176:6	2176:6	13	+=
RVAL	2176:9	2176:9	12	2
FIELD	2176:9	2176:9	13	2
LEAF_NODE	2176:9	2176:9	14	2
LEAF_NODE	2176:10	2176:10	10	;
EXPR_STATEMENT	2177:3	2177:10	9	pp += 4 ;
EXPR	2177:3	2177:3	10	pp += 4
ASSIGN	2177:3	2177:9	11	pp += 4
LVAL	2177:3	2177:3	12	pp
FIELD	2177:3	2177:3	13	pp
LEAF_NODE	2177:3	2177:3	14	pp
ASSIGN_OP	2177:6	2177:6	12	+=
LEAF_NODE	2177:6	2177:6	13	+=
RVAL	2177:9	2177:9	12	4
FIELD	2177:9	2177:9	13	4
LEAF_NODE	2177:9	2177:9	14	4
LEAF_NODE	2177:10	2177:10	10	;
EXPR_STATEMENT	2178:3	2178:7	9	x -- ;
EXPR	2178:3	2178:3	10	x --
FIELD	2178:3	2178:5	11	x --
LEAF_NODE	2178:3	2178:3	12	x
LEAF_NODE	2178:5	2178:5	12	--
LEAF_NODE	2178:7	2178:7	10	;
LEAF_NODE	2179:2	2179:2	8	}
SELECTION	2181:2	2182:2	6	
KEYWORD	2181:2	2181:2	7	if
LEAF_NODE	2181:2	2181:2	8	if
LEAF_NODE	2181:4	2181:4	7	(
CONDITION	2181:6	2181:6	7	( w & 1 ) != 0
EXPR	2181:6	2181:15	8	( w & 1 ) != 0
LEAF_NODE	2181:6	2181:6	9	(
FIELD	2181:7	2181:7	9	w
LEAF_NODE	2181:7	2181:7	10	w
LEAF_NODE	2181:8	2181:8	9	&
FIELD	2181:9	2181:9	9	1
LEAF_NODE	2181:9	2181:9	10	1
LEAF_NODE	2181:10	2181:10	9	)
EQ_OPERATOR	2181:12	2181:12	9	!=
LEAF_NODE	2181:12	2181:12	10	!=
FIELD	2181:15	2181:15	9	0
LEAF_NODE	2181:15	2181:15	10	0
LEAF_NODE	2181:17	2181:17	7	)
STATEMENTS	2182:2	2190:2	7	
LEAF_NODE	2182:2	2182:2	8	{
STATEMENTS	2183:3	2189:3	8	
SIMPLE_DECL	2183:3	2183:19	9	int32 Cb ; Cb = pp [ 2 ] ;
VAR_DECL	2183:3	2183:9	10	int32 Cb ; Cb = pp [ 2 ]
TYPE	2183:3	2183:3	11	int32
TYPE_NAME	2183:3	2183:3	12	int32
LEAF_NODE	2183:3	2183:3	13	int32
NAME	2183:9	2183:9	11	Cb
LEAF_NODE	2183:9	2183:9	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2183:9	2183:9	11	Cb = pp [ 2 ]
ASSIGN	2183:9	2183:14	12	Cb = pp [ 2 ]
LVAL	2183:9	2183:9	13	Cb
NAME	2183:9	2183:9	14	Cb
LEAF_NODE	2183:9	2183:9	15	Cb
ASSIGN_OP	2183:12	2183:12	13	=
LEAF_NODE	2183:12	2183:12	14	=
RVAL	2183:14	2183:14	13	pp [ 2 ]
FIELD	2183:14	2183:18	14	pp [ 2 ]
LEAF_NODE	2183:14	2183:14	15	pp
LEAF_NODE	2183:16	2183:16	15	[
EXPR	2183:17	2183:17	15	2
FIELD	2183:17	2183:17	16	2
LEAF_NODE	2183:17	2183:17	17	2
LEAF_NODE	2183:18	2183:18	15	]
LEAF_NODE	2183:19	2183:19	10	;
SIMPLE_DECL	2184:3	2184:19	9	int32 Cr ; Cr = pp [ 3 ] ;
VAR_DECL	2184:3	2184:9	10	int32 Cr ; Cr = pp [ 3 ]
TYPE	2184:3	2184:3	11	int32
TYPE_NAME	2184:3	2184:3	12	int32
LEAF_NODE	2184:3	2184:3	13	int32
NAME	2184:9	2184:9	11	Cr
LEAF_NODE	2184:9	2184:9	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2184:9	2184:9	11	Cr = pp [ 3 ]
ASSIGN	2184:9	2184:14	12	Cr = pp [ 3 ]
LVAL	2184:9	2184:9	13	Cr
NAME	2184:9	2184:9	14	Cr
LEAF_NODE	2184:9	2184:9	15	Cr
ASSIGN_OP	2184:12	2184:12	13	=
LEAF_NODE	2184:12	2184:12	14	=
RVAL	2184:14	2184:14	13	pp [ 3 ]
FIELD	2184:14	2184:18	14	pp [ 3 ]
LEAF_NODE	2184:14	2184:14	15	pp
LEAF_NODE	2184:16	2184:16	15	[
EXPR	2184:17	2184:17	15	3
FIELD	2184:17	2184:17	16	3
LEAF_NODE	2184:17	2184:17	17	3
LEAF_NODE	2184:18	2184:18	15	]
LEAF_NODE	2184:19	2184:19	10	;
EXPR_STATEMENT	2186:3	2186:27	9	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2186:3	2186:3	10	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2186:3	2186:26	11	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2186:3	2186:3	12	YCbCrtoRGB
LEAF_NODE	2186:3	2186:3	13	YCbCrtoRGB
LEAF_NODE	2186:13	2186:13	12	(
ARGUMENT	2186:14	2186:14	12	cp [ 0 ]
FIELD	2186:14	2186:18	13	cp [ 0 ]
LEAF_NODE	2186:14	2186:14	14	cp
LEAF_NODE	2186:16	2186:16	14	[
EXPR	2186:17	2186:17	14	0
FIELD	2186:17	2186:17	15	0
LEAF_NODE	2186:17	2186:17	16	0
LEAF_NODE	2186:18	2186:18	14	]
LEAF_NODE	2186:19	2186:19	12	,
ARGUMENT	2186:21	2186:21	12	pp [ 0 ]
FIELD	2186:21	2186:25	13	pp [ 0 ]
LEAF_NODE	2186:21	2186:21	14	pp
LEAF_NODE	2186:23	2186:23	14	[
EXPR	2186:24	2186:24	14	0
FIELD	2186:24	2186:24	15	0
LEAF_NODE	2186:24	2186:24	16	0
LEAF_NODE	2186:25	2186:25	14	]
LEAF_NODE	2186:26	2186:26	12	)
LEAF_NODE	2186:27	2186:27	10	;
EXPR_STATEMENT	2188:3	2188:10	9	cp += 1 ;
EXPR	2188:3	2188:3	10	cp += 1
ASSIGN	2188:3	2188:9	11	cp += 1
LVAL	2188:3	2188:3	12	cp
FIELD	2188:3	2188:3	13	cp
LEAF_NODE	2188:3	2188:3	14	cp
ASSIGN_OP	2188:6	2188:6	12	+=
LEAF_NODE	2188:6	2188:6	13	+=
RVAL	2188:9	2188:9	12	1
FIELD	2188:9	2188:9	13	1
LEAF_NODE	2188:9	2188:9	14	1
LEAF_NODE	2188:10	2188:10	10	;
EXPR_STATEMENT	2189:3	2189:10	9	pp += 4 ;
EXPR	2189:3	2189:3	10	pp += 4
ASSIGN	2189:3	2189:9	11	pp += 4
LVAL	2189:3	2189:3	12	pp
FIELD	2189:3	2189:3	13	pp
LEAF_NODE	2189:3	2189:3	14	pp
ASSIGN_OP	2189:6	2189:6	12	+=
LEAF_NODE	2189:6	2189:6	13	+=
RVAL	2189:9	2189:9	12	4
FIELD	2189:9	2189:9	13	4
LEAF_NODE	2189:9	2189:9	14	4
LEAF_NODE	2189:10	2189:10	10	;
LEAF_NODE	2190:2	2190:2	8	}
EXPR_STATEMENT	2192:2	2192:14	6	cp += toskew ;
EXPR	2192:2	2192:2	7	cp += toskew
ASSIGN	2192:2	2192:8	8	cp += toskew
LVAL	2192:2	2192:2	9	cp
FIELD	2192:2	2192:2	10	cp
LEAF_NODE	2192:2	2192:2	11	cp
ASSIGN_OP	2192:5	2192:5	9	+=
LEAF_NODE	2192:5	2192:5	10	+=
RVAL	2192:8	2192:8	9	toskew
FIELD	2192:8	2192:8	10	toskew
LEAF_NODE	2192:8	2192:8	11	toskew
LEAF_NODE	2192:14	2192:14	7	;
EXPR_STATEMENT	2193:2	2193:16	6	pp += fromskew ;
EXPR	2193:2	2193:2	7	pp += fromskew
ASSIGN	2193:2	2193:8	8	pp += fromskew
LVAL	2193:2	2193:2	9	pp
FIELD	2193:2	2193:2	10	pp
LEAF_NODE	2193:2	2193:2	11	pp
ASSIGN_OP	2193:5	2193:5	9	+=
LEAF_NODE	2193:5	2193:5	10	+=
RVAL	2193:8	2193:8	9	fromskew
FIELD	2193:8	2193:8	10	fromskew
LEAF_NODE	2193:8	2193:8	11	fromskew
LEAF_NODE	2193:16	2193:16	7	;
LEAF_NODE	2194:1	2194:1	5	}
LEAF_NODE	2194:14	2194:14	3	;
LEAF_NODE	2195:0	2195:0	2	}
FUNCTION_DEF	0:0	2233:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	2200:0	2200:0	2	DECLAREContigPutFunc
LEAF_NODE	2200:0	2200:0	3	DECLAREContigPutFunc
PARAMETER_LIST	2200:20	2200:45	2	( putcontig8bitYCbCr12tile )
LEAF_NODE	2200:20	2200:20	3	(
PARAMETER_DECL	2200:21	2200:21	3	putcontig8bitYCbCr12tile
LEAF_NODE	2200:21	2200:21	4	putcontig8bitYCbCr12tile
LEAF_NODE	2200:45	2200:45	3	)
LEAF_NODE	2201:0	2201:0	2	{
STATEMENTS	2202:1	2223:1	2	
SIMPLE_DECL	2202:1	2202:12	3	uint32 * cp2 ;
VAR_DECL	2202:1	2202:9	4	uint32 * cp2
TYPE	2202:1	2202:7	5	uint32 *
TYPE_NAME	2202:1	2202:1	6	uint32
LEAF_NODE	2202:1	2202:1	7	uint32
POINTER	2202:7	2202:7	6	*
LEAF_NODE	2202:7	2202:7	7	*
NAME	2202:9	2202:9	5	cp2
LEAF_NODE	2202:9	2202:9	6	cp2
LEAF_NODE	2202:12	2202:12	4	;
SIMPLE_DECL	2203:1	2203:24	3	int32 incr ; incr = 2 * toskew + w ;
VAR_DECL	2203:1	2203:7	4	int32 incr ; incr = 2 * toskew + w
TYPE	2203:1	2203:1	5	int32
TYPE_NAME	2203:1	2203:1	6	int32
LEAF_NODE	2203:1	2203:1	7	int32
NAME	2203:7	2203:7	5	incr
LEAF_NODE	2203:7	2203:7	6	incr
LEAF_NODE	0:0	0:0	5	;
INIT	2203:7	2203:7	5	incr = 2 * toskew + w
ASSIGN	2203:7	2203:14	6	incr = 2 * toskew + w
LVAL	2203:7	2203:7	7	incr
NAME	2203:7	2203:7	8	incr
LEAF_NODE	2203:7	2203:7	9	incr
ASSIGN_OP	2203:12	2203:12	7	=
LEAF_NODE	2203:12	2203:12	8	=
RVAL	2203:14	2203:23	7	2 * toskew + w
FIELD	2203:14	2203:14	8	2
LEAF_NODE	2203:14	2203:14	9	2
LEAF_NODE	2203:15	2203:15	8	*
FIELD	2203:16	2203:16	8	toskew
LEAF_NODE	2203:16	2203:16	9	toskew
LEAF_NODE	2203:22	2203:22	8	+
FIELD	2203:23	2203:23	8	w
LEAF_NODE	2203:23	2203:23	9	w
LEAF_NODE	2203:24	2203:24	4	;
EXPR_STATEMENT	2204:1	2204:9	3	( void ) y ;
EXPR	2204:1	2204:8	4	( void ) y
LEAF_NODE	2204:1	2204:1	5	(
TYPE_NAME	2204:2	2204:2	5	void
LEAF_NODE	2204:2	2204:2	6	void
LEAF_NODE	2204:6	2204:6	5	)
FIELD	2204:8	2204:8	5	y
LEAF_NODE	2204:8	2204:8	6	y
LEAF_NODE	2204:9	2204:9	4	;
EXPR_STATEMENT	2205:1	2205:40	3	fromskew = ( fromskew / 1 ) * ( 1 * 2 + 2 ) ;
EXPR	2205:1	2205:1	4	fromskew = ( fromskew / 1 ) * ( 1 * 2 + 2 )
ASSIGN	2205:1	2205:12	5	fromskew = ( fromskew / 1 ) * ( 1 * 2 + 2 )
LVAL	2205:1	2205:1	6	fromskew
FIELD	2205:1	2205:1	7	fromskew
LEAF_NODE	2205:1	2205:1	8	fromskew
ASSIGN_OP	2205:10	2205:10	6	=
LEAF_NODE	2205:10	2205:10	7	=
RVAL	2205:12	2205:39	6	( fromskew / 1 ) * ( 1 * 2 + 2 )
LEAF_NODE	2205:12	2205:12	7	(
FIELD	2205:13	2205:13	7	fromskew
LEAF_NODE	2205:13	2205:13	8	fromskew
LEAF_NODE	2205:22	2205:22	7	/
FIELD	2205:24	2205:24	7	1
LEAF_NODE	2205:24	2205:24	8	1
LEAF_NODE	2205:25	2205:25	7	)
LEAF_NODE	2205:27	2205:27	7	*
LEAF_NODE	2205:29	2205:29	7	(
FIELD	2205:30	2205:30	7	1
LEAF_NODE	2205:30	2205:30	8	1
LEAF_NODE	2205:32	2205:32	7	*
FIELD	2205:34	2205:34	7	2
LEAF_NODE	2205:34	2205:34	8	2
LEAF_NODE	2205:36	2205:36	7	+
FIELD	2205:38	2205:38	7	2
LEAF_NODE	2205:38	2205:38	8	2
LEAF_NODE	2205:39	2205:39	7	)
LEAF_NODE	2205:40	2205:40	4	;
EXPR_STATEMENT	2206:1	2206:18	3	cp2 = cp + w + toskew ;
EXPR	2206:1	2206:1	4	cp2 = cp + w + toskew
ASSIGN	2206:1	2206:7	5	cp2 = cp + w + toskew
LVAL	2206:1	2206:1	6	cp2
FIELD	2206:1	2206:1	7	cp2
LEAF_NODE	2206:1	2206:1	8	cp2
ASSIGN_OP	2206:5	2206:5	6	=
LEAF_NODE	2206:5	2206:5	7	=
RVAL	2206:7	2206:12	6	cp + w + toskew
FIELD	2206:7	2206:7	7	cp
LEAF_NODE	2206:7	2206:7	8	cp
LEAF_NODE	2206:9	2206:9	7	+
FIELD	2206:10	2206:10	7	w
LEAF_NODE	2206:10	2206:10	8	w
LEAF_NODE	2206:11	2206:11	7	+
FIELD	2206:12	2206:12	7	toskew
LEAF_NODE	2206:12	2206:12	8	toskew
LEAF_NODE	2206:18	2206:18	4	;
ITERATION	2207:1	2207:14	3	
KEYWORD	2207:1	2207:1	4	while
LEAF_NODE	2207:1	2207:1	5	while
LEAF_NODE	2207:7	2207:7	4	(
CONDITION	2207:8	2207:8	4	h >= 2
EXPR	2207:8	2207:11	5	h >= 2
FIELD	2207:8	2207:8	6	h
LEAF_NODE	2207:8	2207:8	7	h
REL_OPERATOR	2207:9	2207:9	6	>=
LEAF_NODE	2207:9	2207:9	7	>=
FIELD	2207:11	2207:11	6	2
LEAF_NODE	2207:11	2207:11	7	2
LEAF_NODE	2207:12	2207:12	4	)
STATEMENTS	2207:14	2222:1	4	
LEAF_NODE	2207:14	2207:14	5	{
STATEMENTS	2208:2	2221:2	5	
EXPR_STATEMENT	2208:2	2208:7	6	x = w ;
EXPR	2208:2	2208:2	7	x = w
ASSIGN	2208:2	2208:6	8	x = w
LVAL	2208:2	2208:2	9	x
FIELD	2208:2	2208:2	10	x
LEAF_NODE	2208:2	2208:2	11	x
ASSIGN_OP	2208:4	2208:4	9	=
LEAF_NODE	2208:4	2208:4	10	=
RVAL	2208:6	2208:6	9	w
FIELD	2208:6	2208:6	10	w
LEAF_NODE	2208:6	2208:6	11	w
LEAF_NODE	2208:7	2208:7	7	;
ITERATION	2209:2	2209:5	6	
KEYWORD	2209:2	2209:2	7	do
LEAF_NODE	2209:2	2209:2	8	do
LEAF_NODE	2217:10	2217:10	7	(
CONDITION	2217:11	2217:11	7	-- x
EXPR	2217:11	2217:13	8	-- x
LEAF_NODE	2217:11	2217:11	9	--
FIELD	2217:13	2217:13	9	x
LEAF_NODE	2217:13	2217:13	10	x
LEAF_NODE	2217:14	2217:14	7	)
STATEMENTS	2209:5	2217:2	7	
LEAF_NODE	2209:5	2209:5	8	{
STATEMENTS	2210:3	2216:3	8	
SIMPLE_DECL	2210:3	2210:20	9	uint32 Cb ; Cb = pp [ 2 ] ;
VAR_DECL	2210:3	2210:10	10	uint32 Cb ; Cb = pp [ 2 ]
TYPE	2210:3	2210:3	11	uint32
TYPE_NAME	2210:3	2210:3	12	uint32
LEAF_NODE	2210:3	2210:3	13	uint32
NAME	2210:10	2210:10	11	Cb
LEAF_NODE	2210:10	2210:10	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2210:10	2210:10	11	Cb = pp [ 2 ]
ASSIGN	2210:10	2210:15	12	Cb = pp [ 2 ]
LVAL	2210:10	2210:10	13	Cb
NAME	2210:10	2210:10	14	Cb
LEAF_NODE	2210:10	2210:10	15	Cb
ASSIGN_OP	2210:13	2210:13	13	=
LEAF_NODE	2210:13	2210:13	14	=
RVAL	2210:15	2210:15	13	pp [ 2 ]
FIELD	2210:15	2210:19	14	pp [ 2 ]
LEAF_NODE	2210:15	2210:15	15	pp
LEAF_NODE	2210:17	2210:17	15	[
EXPR	2210:18	2210:18	15	2
FIELD	2210:18	2210:18	16	2
LEAF_NODE	2210:18	2210:18	17	2
LEAF_NODE	2210:19	2210:19	15	]
LEAF_NODE	2210:20	2210:20	10	;
SIMPLE_DECL	2211:3	2211:20	9	uint32 Cr ; Cr = pp [ 3 ] ;
VAR_DECL	2211:3	2211:10	10	uint32 Cr ; Cr = pp [ 3 ]
TYPE	2211:3	2211:3	11	uint32
TYPE_NAME	2211:3	2211:3	12	uint32
LEAF_NODE	2211:3	2211:3	13	uint32
NAME	2211:10	2211:10	11	Cr
LEAF_NODE	2211:10	2211:10	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2211:10	2211:10	11	Cr = pp [ 3 ]
ASSIGN	2211:10	2211:15	12	Cr = pp [ 3 ]
LVAL	2211:10	2211:10	13	Cr
NAME	2211:10	2211:10	14	Cr
LEAF_NODE	2211:10	2211:10	15	Cr
ASSIGN_OP	2211:13	2211:13	13	=
LEAF_NODE	2211:13	2211:13	14	=
RVAL	2211:15	2211:15	13	pp [ 3 ]
FIELD	2211:15	2211:19	14	pp [ 3 ]
LEAF_NODE	2211:15	2211:15	15	pp
LEAF_NODE	2211:17	2211:17	15	[
EXPR	2211:18	2211:18	15	3
FIELD	2211:18	2211:18	16	3
LEAF_NODE	2211:18	2211:18	17	3
LEAF_NODE	2211:19	2211:19	15	]
LEAF_NODE	2211:20	2211:20	10	;
EXPR_STATEMENT	2212:3	2212:27	9	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2212:3	2212:3	10	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2212:3	2212:26	11	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2212:3	2212:3	12	YCbCrtoRGB
LEAF_NODE	2212:3	2212:3	13	YCbCrtoRGB
LEAF_NODE	2212:13	2212:13	12	(
ARGUMENT	2212:14	2212:14	12	cp [ 0 ]
FIELD	2212:14	2212:18	13	cp [ 0 ]
LEAF_NODE	2212:14	2212:14	14	cp
LEAF_NODE	2212:16	2212:16	14	[
EXPR	2212:17	2212:17	14	0
FIELD	2212:17	2212:17	15	0
LEAF_NODE	2212:17	2212:17	16	0
LEAF_NODE	2212:18	2212:18	14	]
LEAF_NODE	2212:19	2212:19	12	,
ARGUMENT	2212:21	2212:21	12	pp [ 0 ]
FIELD	2212:21	2212:25	13	pp [ 0 ]
LEAF_NODE	2212:21	2212:21	14	pp
LEAF_NODE	2212:23	2212:23	14	[
EXPR	2212:24	2212:24	14	0
FIELD	2212:24	2212:24	15	0
LEAF_NODE	2212:24	2212:24	16	0
LEAF_NODE	2212:25	2212:25	14	]
LEAF_NODE	2212:26	2212:26	12	)
LEAF_NODE	2212:27	2212:27	10	;
EXPR_STATEMENT	2213:3	2213:28	9	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 1 ] ) ;
EXPR	2213:3	2213:3	10	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 1 ] )
FUNCTION_CALL	2213:3	2213:27	11	YCbCrtoRGB ( cp2 [ 0 ] , pp [ 1 ] )
CALLEE	2213:3	2213:3	12	YCbCrtoRGB
LEAF_NODE	2213:3	2213:3	13	YCbCrtoRGB
LEAF_NODE	2213:13	2213:13	12	(
ARGUMENT	2213:14	2213:14	12	cp2 [ 0 ]
FIELD	2213:14	2213:19	13	cp2 [ 0 ]
LEAF_NODE	2213:14	2213:14	14	cp2
LEAF_NODE	2213:17	2213:17	14	[
EXPR	2213:18	2213:18	14	0
FIELD	2213:18	2213:18	15	0
LEAF_NODE	2213:18	2213:18	16	0
LEAF_NODE	2213:19	2213:19	14	]
LEAF_NODE	2213:20	2213:20	12	,
ARGUMENT	2213:22	2213:22	12	pp [ 1 ]
FIELD	2213:22	2213:26	13	pp [ 1 ]
LEAF_NODE	2213:22	2213:22	14	pp
LEAF_NODE	2213:24	2213:24	14	[
EXPR	2213:25	2213:25	14	1
FIELD	2213:25	2213:25	15	1
LEAF_NODE	2213:25	2213:25	16	1
LEAF_NODE	2213:26	2213:26	14	]
LEAF_NODE	2213:27	2213:27	12	)
LEAF_NODE	2213:28	2213:28	10	;
EXPR_STATEMENT	2214:3	2214:8	9	cp ++ ;
EXPR	2214:3	2214:3	10	cp ++
FIELD	2214:3	2214:6	11	cp ++
LEAF_NODE	2214:3	2214:3	12	cp
LEAF_NODE	2214:6	2214:6	12	++
LEAF_NODE	2214:8	2214:8	10	;
EXPR_STATEMENT	2215:3	2215:9	9	cp2 ++ ;
EXPR	2215:3	2215:3	10	cp2 ++
FIELD	2215:3	2215:7	11	cp2 ++
LEAF_NODE	2215:3	2215:3	12	cp2
LEAF_NODE	2215:7	2215:7	12	++
LEAF_NODE	2215:9	2215:9	10	;
EXPR_STATEMENT	2216:3	2216:10	9	pp += 4 ;
EXPR	2216:3	2216:3	10	pp += 4
ASSIGN	2216:3	2216:9	11	pp += 4
LVAL	2216:3	2216:3	12	pp
FIELD	2216:3	2216:3	13	pp
LEAF_NODE	2216:3	2216:3	14	pp
ASSIGN_OP	2216:6	2216:6	12	+=
LEAF_NODE	2216:6	2216:6	13	+=
RVAL	2216:9	2216:9	12	4
FIELD	2216:9	2216:9	13	4
LEAF_NODE	2216:9	2216:9	14	4
LEAF_NODE	2216:10	2216:10	10	;
LEAF_NODE	2217:2	2217:2	8	}
LEAF_NODE	2217:15	2217:15	6	;
EXPR_STATEMENT	2218:2	2218:12	6	cp += incr ;
EXPR	2218:2	2218:2	7	cp += incr
ASSIGN	2218:2	2218:8	8	cp += incr
LVAL	2218:2	2218:2	9	cp
FIELD	2218:2	2218:2	10	cp
LEAF_NODE	2218:2	2218:2	11	cp
ASSIGN_OP	2218:5	2218:5	9	+=
LEAF_NODE	2218:5	2218:5	10	+=
RVAL	2218:8	2218:8	9	incr
FIELD	2218:8	2218:8	10	incr
LEAF_NODE	2218:8	2218:8	11	incr
LEAF_NODE	2218:12	2218:12	7	;
EXPR_STATEMENT	2219:2	2219:13	6	cp2 += incr ;
EXPR	2219:2	2219:2	7	cp2 += incr
ASSIGN	2219:2	2219:9	8	cp2 += incr
LVAL	2219:2	2219:2	9	cp2
FIELD	2219:2	2219:2	10	cp2
LEAF_NODE	2219:2	2219:2	11	cp2
ASSIGN_OP	2219:6	2219:6	9	+=
LEAF_NODE	2219:6	2219:6	10	+=
RVAL	2219:9	2219:9	9	incr
FIELD	2219:9	2219:9	10	incr
LEAF_NODE	2219:9	2219:9	11	incr
LEAF_NODE	2219:13	2219:13	7	;
EXPR_STATEMENT	2220:2	2220:16	6	pp += fromskew ;
EXPR	2220:2	2220:2	7	pp += fromskew
ASSIGN	2220:2	2220:8	8	pp += fromskew
LVAL	2220:2	2220:2	9	pp
FIELD	2220:2	2220:2	10	pp
LEAF_NODE	2220:2	2220:2	11	pp
ASSIGN_OP	2220:5	2220:5	9	+=
LEAF_NODE	2220:5	2220:5	10	+=
RVAL	2220:8	2220:8	9	fromskew
FIELD	2220:8	2220:8	10	fromskew
LEAF_NODE	2220:8	2220:8	11	fromskew
LEAF_NODE	2220:16	2220:16	7	;
EXPR_STATEMENT	2221:2	2221:6	6	h -= 2 ;
EXPR	2221:2	2221:2	7	h -= 2
ASSIGN	2221:2	2221:5	8	h -= 2
LVAL	2221:2	2221:2	9	h
FIELD	2221:2	2221:2	10	h
LEAF_NODE	2221:2	2221:2	11	h
ASSIGN_OP	2221:3	2221:3	9	-=
LEAF_NODE	2221:3	2221:3	10	-=
RVAL	2221:5	2221:5	9	2
FIELD	2221:5	2221:5	10	2
LEAF_NODE	2221:5	2221:5	11	2
LEAF_NODE	2221:6	2221:6	7	;
LEAF_NODE	2222:1	2222:1	5	}
SELECTION	2223:1	2223:11	3	
KEYWORD	2223:1	2223:1	4	if
LEAF_NODE	2223:1	2223:1	5	if
LEAF_NODE	2223:4	2223:4	4	(
CONDITION	2223:5	2223:5	4	h == 1
EXPR	2223:5	2223:8	5	h == 1
FIELD	2223:5	2223:5	6	h
LEAF_NODE	2223:5	2223:5	7	h
EQ_OPERATOR	2223:6	2223:6	6	==
LEAF_NODE	2223:6	2223:6	7	==
FIELD	2223:8	2223:8	6	1
LEAF_NODE	2223:8	2223:8	7	1
LEAF_NODE	2223:9	2223:9	4	)
STATEMENTS	2223:11	2232:1	4	
LEAF_NODE	2223:11	2223:11	5	{
STATEMENTS	2224:2	2231:15	5	
EXPR_STATEMENT	2224:2	2224:7	6	x = w ;
EXPR	2224:2	2224:2	7	x = w
ASSIGN	2224:2	2224:6	8	x = w
LVAL	2224:2	2224:2	9	x
FIELD	2224:2	2224:2	10	x
LEAF_NODE	2224:2	2224:2	11	x
ASSIGN_OP	2224:4	2224:4	9	=
LEAF_NODE	2224:4	2224:4	10	=
RVAL	2224:6	2224:6	9	w
FIELD	2224:6	2224:6	10	w
LEAF_NODE	2224:6	2224:6	11	w
LEAF_NODE	2224:7	2224:7	7	;
ITERATION	2225:2	2225:5	6	
KEYWORD	2225:2	2225:2	7	do
LEAF_NODE	2225:2	2225:2	8	do
LEAF_NODE	2231:10	2231:10	7	(
CONDITION	2231:11	2231:11	7	-- x
EXPR	2231:11	2231:13	8	-- x
LEAF_NODE	2231:11	2231:11	9	--
FIELD	2231:13	2231:13	9	x
LEAF_NODE	2231:13	2231:13	10	x
LEAF_NODE	2231:14	2231:14	7	)
STATEMENTS	2225:5	2231:2	7	
LEAF_NODE	2225:5	2225:5	8	{
STATEMENTS	2226:3	2230:3	8	
SIMPLE_DECL	2226:3	2226:20	9	uint32 Cb ; Cb = pp [ 2 ] ;
VAR_DECL	2226:3	2226:10	10	uint32 Cb ; Cb = pp [ 2 ]
TYPE	2226:3	2226:3	11	uint32
TYPE_NAME	2226:3	2226:3	12	uint32
LEAF_NODE	2226:3	2226:3	13	uint32
NAME	2226:10	2226:10	11	Cb
LEAF_NODE	2226:10	2226:10	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2226:10	2226:10	11	Cb = pp [ 2 ]
ASSIGN	2226:10	2226:15	12	Cb = pp [ 2 ]
LVAL	2226:10	2226:10	13	Cb
NAME	2226:10	2226:10	14	Cb
LEAF_NODE	2226:10	2226:10	15	Cb
ASSIGN_OP	2226:13	2226:13	13	=
LEAF_NODE	2226:13	2226:13	14	=
RVAL	2226:15	2226:15	13	pp [ 2 ]
FIELD	2226:15	2226:19	14	pp [ 2 ]
LEAF_NODE	2226:15	2226:15	15	pp
LEAF_NODE	2226:17	2226:17	15	[
EXPR	2226:18	2226:18	15	2
FIELD	2226:18	2226:18	16	2
LEAF_NODE	2226:18	2226:18	17	2
LEAF_NODE	2226:19	2226:19	15	]
LEAF_NODE	2226:20	2226:20	10	;
SIMPLE_DECL	2227:3	2227:20	9	uint32 Cr ; Cr = pp [ 3 ] ;
VAR_DECL	2227:3	2227:10	10	uint32 Cr ; Cr = pp [ 3 ]
TYPE	2227:3	2227:3	11	uint32
TYPE_NAME	2227:3	2227:3	12	uint32
LEAF_NODE	2227:3	2227:3	13	uint32
NAME	2227:10	2227:10	11	Cr
LEAF_NODE	2227:10	2227:10	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2227:10	2227:10	11	Cr = pp [ 3 ]
ASSIGN	2227:10	2227:15	12	Cr = pp [ 3 ]
LVAL	2227:10	2227:10	13	Cr
NAME	2227:10	2227:10	14	Cr
LEAF_NODE	2227:10	2227:10	15	Cr
ASSIGN_OP	2227:13	2227:13	13	=
LEAF_NODE	2227:13	2227:13	14	=
RVAL	2227:15	2227:15	13	pp [ 3 ]
FIELD	2227:15	2227:19	14	pp [ 3 ]
LEAF_NODE	2227:15	2227:15	15	pp
LEAF_NODE	2227:17	2227:17	15	[
EXPR	2227:18	2227:18	15	3
FIELD	2227:18	2227:18	16	3
LEAF_NODE	2227:18	2227:18	17	3
LEAF_NODE	2227:19	2227:19	15	]
LEAF_NODE	2227:20	2227:20	10	;
EXPR_STATEMENT	2228:3	2228:27	9	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] ) ;
EXPR	2228:3	2228:3	10	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
FUNCTION_CALL	2228:3	2228:26	11	YCbCrtoRGB ( cp [ 0 ] , pp [ 0 ] )
CALLEE	2228:3	2228:3	12	YCbCrtoRGB
LEAF_NODE	2228:3	2228:3	13	YCbCrtoRGB
LEAF_NODE	2228:13	2228:13	12	(
ARGUMENT	2228:14	2228:14	12	cp [ 0 ]
FIELD	2228:14	2228:18	13	cp [ 0 ]
LEAF_NODE	2228:14	2228:14	14	cp
LEAF_NODE	2228:16	2228:16	14	[
EXPR	2228:17	2228:17	14	0
FIELD	2228:17	2228:17	15	0
LEAF_NODE	2228:17	2228:17	16	0
LEAF_NODE	2228:18	2228:18	14	]
LEAF_NODE	2228:19	2228:19	12	,
ARGUMENT	2228:21	2228:21	12	pp [ 0 ]
FIELD	2228:21	2228:25	13	pp [ 0 ]
LEAF_NODE	2228:21	2228:21	14	pp
LEAF_NODE	2228:23	2228:23	14	[
EXPR	2228:24	2228:24	14	0
FIELD	2228:24	2228:24	15	0
LEAF_NODE	2228:24	2228:24	16	0
LEAF_NODE	2228:25	2228:25	14	]
LEAF_NODE	2228:26	2228:26	12	)
LEAF_NODE	2228:27	2228:27	10	;
EXPR_STATEMENT	2229:3	2229:8	9	cp ++ ;
EXPR	2229:3	2229:3	10	cp ++
FIELD	2229:3	2229:6	11	cp ++
LEAF_NODE	2229:3	2229:3	12	cp
LEAF_NODE	2229:6	2229:6	12	++
LEAF_NODE	2229:8	2229:8	10	;
EXPR_STATEMENT	2230:3	2230:10	9	pp += 4 ;
EXPR	2230:3	2230:3	10	pp += 4
ASSIGN	2230:3	2230:9	11	pp += 4
LVAL	2230:3	2230:3	12	pp
FIELD	2230:3	2230:3	13	pp
LEAF_NODE	2230:3	2230:3	14	pp
ASSIGN_OP	2230:6	2230:6	12	+=
LEAF_NODE	2230:6	2230:6	13	+=
RVAL	2230:9	2230:9	12	4
FIELD	2230:9	2230:9	13	4
LEAF_NODE	2230:9	2230:9	14	4
LEAF_NODE	2230:10	2230:10	10	;
LEAF_NODE	2231:2	2231:2	8	}
LEAF_NODE	2231:15	2231:15	6	;
LEAF_NODE	2232:1	2232:1	5	}
LEAF_NODE	2233:0	2233:0	2	}
FUNCTION_DEF	0:0	2255:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	2238:0	2238:0	2	DECLAREContigPutFunc
LEAF_NODE	2238:0	2238:0	3	DECLAREContigPutFunc
PARAMETER_LIST	2238:20	2238:45	2	( putcontig8bitYCbCr11tile )
LEAF_NODE	2238:20	2238:20	3	(
PARAMETER_DECL	2238:21	2238:21	3	putcontig8bitYCbCr11tile
LEAF_NODE	2238:21	2238:21	4	putcontig8bitYCbCr11tile
LEAF_NODE	2238:45	2238:45	3	)
LEAF_NODE	2239:0	2239:0	2	{
STATEMENTS	2240:1	2254:14	2	
EXPR_STATEMENT	2240:1	2240:9	3	( void ) y ;
EXPR	2240:1	2240:8	4	( void ) y
LEAF_NODE	2240:1	2240:1	5	(
TYPE_NAME	2240:2	2240:2	5	void
LEAF_NODE	2240:2	2240:2	6	void
LEAF_NODE	2240:6	2240:6	5	)
FIELD	2240:8	2240:8	5	y
LEAF_NODE	2240:8	2240:8	6	y
LEAF_NODE	2240:9	2240:9	4	;
EXPR_STATEMENT	2241:1	2241:40	3	fromskew = ( fromskew / 1 ) * ( 1 * 1 + 2 ) ;
EXPR	2241:1	2241:1	4	fromskew = ( fromskew / 1 ) * ( 1 * 1 + 2 )
ASSIGN	2241:1	2241:12	5	fromskew = ( fromskew / 1 ) * ( 1 * 1 + 2 )
LVAL	2241:1	2241:1	6	fromskew
FIELD	2241:1	2241:1	7	fromskew
LEAF_NODE	2241:1	2241:1	8	fromskew
ASSIGN_OP	2241:10	2241:10	6	=
LEAF_NODE	2241:10	2241:10	7	=
RVAL	2241:12	2241:39	6	( fromskew / 1 ) * ( 1 * 1 + 2 )
LEAF_NODE	2241:12	2241:12	7	(
FIELD	2241:13	2241:13	7	fromskew
LEAF_NODE	2241:13	2241:13	8	fromskew
LEAF_NODE	2241:22	2241:22	7	/
FIELD	2241:24	2241:24	7	1
LEAF_NODE	2241:24	2241:24	8	1
LEAF_NODE	2241:25	2241:25	7	)
LEAF_NODE	2241:27	2241:27	7	*
LEAF_NODE	2241:29	2241:29	7	(
FIELD	2241:30	2241:30	7	1
LEAF_NODE	2241:30	2241:30	8	1
LEAF_NODE	2241:32	2241:32	7	*
FIELD	2241:34	2241:34	7	1
LEAF_NODE	2241:34	2241:34	8	1
LEAF_NODE	2241:36	2241:36	7	+
FIELD	2241:38	2241:38	7	2
LEAF_NODE	2241:38	2241:38	8	2
LEAF_NODE	2241:39	2241:39	7	)
LEAF_NODE	2241:40	2241:40	4	;
ITERATION	2242:1	2242:4	3	
KEYWORD	2242:1	2242:1	4	do
LEAF_NODE	2242:1	2242:1	5	do
LEAF_NODE	2254:9	2254:9	4	(
CONDITION	2254:10	2254:10	4	-- h
EXPR	2254:10	2254:12	5	-- h
LEAF_NODE	2254:10	2254:10	6	--
FIELD	2254:12	2254:12	6	h
LEAF_NODE	2254:12	2254:12	7	h
LEAF_NODE	2254:13	2254:13	4	)
STATEMENTS	2242:4	2254:1	4	
LEAF_NODE	2242:4	2242:4	5	{
STATEMENTS	2243:2	2253:2	5	
EXPR_STATEMENT	2243:2	2243:7	6	x = w ;
EXPR	2243:2	2243:2	7	x = w
ASSIGN	2243:2	2243:6	8	x = w
LVAL	2243:2	2243:2	9	x
FIELD	2243:2	2243:2	10	x
LEAF_NODE	2243:2	2243:2	11	x
ASSIGN_OP	2243:4	2243:4	9	=
LEAF_NODE	2243:4	2243:4	10	=
RVAL	2243:6	2243:6	9	w
FIELD	2243:6	2243:6	10	w
LEAF_NODE	2243:6	2243:6	11	w
LEAF_NODE	2243:7	2243:7	7	;
ITERATION	2244:2	2244:5	6	
KEYWORD	2244:2	2244:2	7	do
LEAF_NODE	2244:2	2244:2	8	do
LEAF_NODE	2251:10	2251:10	7	(
CONDITION	2251:11	2251:11	7	-- x
EXPR	2251:11	2251:13	8	-- x
LEAF_NODE	2251:11	2251:11	9	--
FIELD	2251:13	2251:13	9	x
LEAF_NODE	2251:13	2251:13	10	x
LEAF_NODE	2251:14	2251:14	7	)
STATEMENTS	2244:5	2251:2	7	
LEAF_NODE	2244:5	2244:5	8	{
STATEMENTS	2245:3	2250:3	8	
SIMPLE_DECL	2245:3	2245:19	9	int32 Cb ; Cb = pp [ 1 ] ;
VAR_DECL	2245:3	2245:9	10	int32 Cb ; Cb = pp [ 1 ]
TYPE	2245:3	2245:3	11	int32
TYPE_NAME	2245:3	2245:3	12	int32
LEAF_NODE	2245:3	2245:3	13	int32
NAME	2245:9	2245:9	11	Cb
LEAF_NODE	2245:9	2245:9	12	Cb
LEAF_NODE	0:0	0:0	11	;
INIT	2245:9	2245:9	11	Cb = pp [ 1 ]
ASSIGN	2245:9	2245:14	12	Cb = pp [ 1 ]
LVAL	2245:9	2245:9	13	Cb
NAME	2245:9	2245:9	14	Cb
LEAF_NODE	2245:9	2245:9	15	Cb
ASSIGN_OP	2245:12	2245:12	13	=
LEAF_NODE	2245:12	2245:12	14	=
RVAL	2245:14	2245:14	13	pp [ 1 ]
FIELD	2245:14	2245:18	14	pp [ 1 ]
LEAF_NODE	2245:14	2245:14	15	pp
LEAF_NODE	2245:16	2245:16	15	[
EXPR	2245:17	2245:17	15	1
FIELD	2245:17	2245:17	16	1
LEAF_NODE	2245:17	2245:17	17	1
LEAF_NODE	2245:18	2245:18	15	]
LEAF_NODE	2245:19	2245:19	10	;
SIMPLE_DECL	2246:3	2246:19	9	int32 Cr ; Cr = pp [ 2 ] ;
VAR_DECL	2246:3	2246:9	10	int32 Cr ; Cr = pp [ 2 ]
TYPE	2246:3	2246:3	11	int32
TYPE_NAME	2246:3	2246:3	12	int32
LEAF_NODE	2246:3	2246:3	13	int32
NAME	2246:9	2246:9	11	Cr
LEAF_NODE	2246:9	2246:9	12	Cr
LEAF_NODE	0:0	0:0	11	;
INIT	2246:9	2246:9	11	Cr = pp [ 2 ]
ASSIGN	2246:9	2246:14	12	Cr = pp [ 2 ]
LVAL	2246:9	2246:9	13	Cr
NAME	2246:9	2246:9	14	Cr
LEAF_NODE	2246:9	2246:9	15	Cr
ASSIGN_OP	2246:12	2246:12	13	=
LEAF_NODE	2246:12	2246:12	14	=
RVAL	2246:14	2246:14	13	pp [ 2 ]
FIELD	2246:14	2246:18	14	pp [ 2 ]
LEAF_NODE	2246:14	2246:14	15	pp
LEAF_NODE	2246:16	2246:16	15	[
EXPR	2246:17	2246:17	15	2
FIELD	2246:17	2246:17	16	2
LEAF_NODE	2246:17	2246:17	17	2
LEAF_NODE	2246:18	2246:18	15	]
LEAF_NODE	2246:19	2246:19	10	;
EXPR_STATEMENT	2248:3	2248:27	9	YCbCrtoRGB ( * cp ++ , pp [ 0 ] ) ;
EXPR	2248:3	2248:3	10	YCbCrtoRGB ( * cp ++ , pp [ 0 ] )
FUNCTION_CALL	2248:3	2248:26	11	YCbCrtoRGB ( * cp ++ , pp [ 0 ] )
CALLEE	2248:3	2248:3	12	YCbCrtoRGB
LEAF_NODE	2248:3	2248:3	13	YCbCrtoRGB
LEAF_NODE	2248:13	2248:13	12	(
ARGUMENT	2248:14	2248:14	12	* cp ++
UNARY_EXPR	2248:14	2248:15	13	* cp ++
UNARY_OPERATOR	2248:14	2248:14	14	*
LEAF_NODE	2248:14	2248:14	15	*
FIELD	2248:15	2248:17	14	cp ++
LEAF_NODE	2248:15	2248:15	15	cp
LEAF_NODE	2248:17	2248:17	15	++
LEAF_NODE	2248:19	2248:19	12	,
ARGUMENT	2248:21	2248:21	12	pp [ 0 ]
FIELD	2248:21	2248:25	13	pp [ 0 ]
LEAF_NODE	2248:21	2248:21	14	pp
LEAF_NODE	2248:23	2248:23	14	[
EXPR	2248:24	2248:24	14	0
FIELD	2248:24	2248:24	15	0
LEAF_NODE	2248:24	2248:24	16	0
LEAF_NODE	2248:25	2248:25	14	]
LEAF_NODE	2248:26	2248:26	12	)
LEAF_NODE	2248:27	2248:27	10	;
EXPR_STATEMENT	2250:3	2250:10	9	pp += 3 ;
EXPR	2250:3	2250:3	10	pp += 3
ASSIGN	2250:3	2250:9	11	pp += 3
LVAL	2250:3	2250:3	12	pp
FIELD	2250:3	2250:3	13	pp
LEAF_NODE	2250:3	2250:3	14	pp
ASSIGN_OP	2250:6	2250:6	12	+=
LEAF_NODE	2250:6	2250:6	13	+=
RVAL	2250:9	2250:9	12	3
FIELD	2250:9	2250:9	13	3
LEAF_NODE	2250:9	2250:9	14	3
LEAF_NODE	2250:10	2250:10	10	;
LEAF_NODE	2251:2	2251:2	8	}
LEAF_NODE	2251:15	2251:15	6	;
EXPR_STATEMENT	2252:2	2252:14	6	cp += toskew ;
EXPR	2252:2	2252:2	7	cp += toskew
ASSIGN	2252:2	2252:8	8	cp += toskew
LVAL	2252:2	2252:2	9	cp
FIELD	2252:2	2252:2	10	cp
LEAF_NODE	2252:2	2252:2	11	cp
ASSIGN_OP	2252:5	2252:5	9	+=
LEAF_NODE	2252:5	2252:5	10	+=
RVAL	2252:8	2252:8	9	toskew
FIELD	2252:8	2252:8	10	toskew
LEAF_NODE	2252:8	2252:8	11	toskew
LEAF_NODE	2252:14	2252:14	7	;
EXPR_STATEMENT	2253:2	2253:16	6	pp += fromskew ;
EXPR	2253:2	2253:2	7	pp += fromskew
ASSIGN	2253:2	2253:8	8	pp += fromskew
LVAL	2253:2	2253:2	9	pp
FIELD	2253:2	2253:2	10	pp
LEAF_NODE	2253:2	2253:2	11	pp
ASSIGN_OP	2253:5	2253:5	9	+=
LEAF_NODE	2253:5	2253:5	10	+=
RVAL	2253:8	2253:8	9	fromskew
FIELD	2253:8	2253:8	10	fromskew
LEAF_NODE	2253:8	2253:8	11	fromskew
LEAF_NODE	2253:16	2253:16	7	;
LEAF_NODE	2254:1	2254:1	5	}
LEAF_NODE	2254:14	2254:14	3	;
LEAF_NODE	2255:0	2255:0	2	}
FUNCTION_DEF	0:0	2275:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	2260:0	2260:0	2	DECLARESepPutFunc
LEAF_NODE	2260:0	2260:0	3	DECLARESepPutFunc
PARAMETER_LIST	2260:17	2260:44	2	( putseparate8bitYCbCr11tile )
LEAF_NODE	2260:17	2260:17	3	(
PARAMETER_DECL	2260:18	2260:18	3	putseparate8bitYCbCr11tile
LEAF_NODE	2260:18	2260:18	4	putseparate8bitYCbCr11tile
LEAF_NODE	2260:44	2260:44	3	)
LEAF_NODE	2261:0	2261:0	2	{
STATEMENTS	2262:1	2265:1	2	
EXPR_STATEMENT	2262:1	2262:9	3	( void ) y ;
EXPR	2262:1	2262:8	4	( void ) y
LEAF_NODE	2262:1	2262:1	5	(
TYPE_NAME	2262:2	2262:2	5	void
LEAF_NODE	2262:2	2262:2	6	void
LEAF_NODE	2262:6	2262:6	5	)
FIELD	2262:8	2262:8	5	y
LEAF_NODE	2262:8	2262:8	6	y
LEAF_NODE	2262:9	2262:9	4	;
EXPR_STATEMENT	2263:1	2263:9	3	( void ) a ;
EXPR	2263:1	2263:8	4	( void ) a
LEAF_NODE	2263:1	2263:1	5	(
TYPE_NAME	2263:2	2263:2	5	void
LEAF_NODE	2263:2	2263:2	6	void
LEAF_NODE	2263:6	2263:6	5	)
FIELD	2263:8	2263:8	5	a
LEAF_NODE	2263:8	2263:8	6	a
LEAF_NODE	2263:9	2263:9	4	;
ITERATION	2265:1	2265:20	3	
KEYWORD	2265:1	2265:1	4	for
LEAF_NODE	2265:1	2265:1	5	for
LEAF_NODE	2265:4	2265:4	4	(
FOR_INIT	2265:6	2265:6	4	;
LEAF_NODE	2265:6	2265:6	5	;
CONDITION	2265:8	2265:8	4	h > 0
EXPR	2265:8	2265:12	5	h > 0
FIELD	2265:8	2265:8	6	h
LEAF_NODE	2265:8	2265:8	7	h
REL_OPERATOR	2265:10	2265:10	6	>
LEAF_NODE	2265:10	2265:10	7	>
FIELD	2265:12	2265:12	6	0
LEAF_NODE	2265:12	2265:12	7	0
LEAF_NODE	2265:13	2265:13	4	;
FOR_EXPR	2265:15	2265:15	4	-- h
EXPR	2265:15	2265:17	5	-- h
LEAF_NODE	2265:15	2265:15	6	--
FIELD	2265:17	2265:17	6	h
LEAF_NODE	2265:17	2265:17	7	h
LEAF_NODE	2265:18	2265:18	4	)
STATEMENTS	2265:20	2274:1	4	
LEAF_NODE	2265:20	2265:20	5	{
STATEMENTS	2266:2	2273:2	5	
EXPR_STATEMENT	2266:2	2266:7	6	x = w ;
EXPR	2266:2	2266:2	7	x = w
ASSIGN	2266:2	2266:6	8	x = w
LVAL	2266:2	2266:2	9	x
FIELD	2266:2	2266:2	10	x
LEAF_NODE	2266:2	2266:2	11	x
ASSIGN_OP	2266:4	2266:4	9	=
LEAF_NODE	2266:4	2266:4	10	=
RVAL	2266:6	2266:6	9	w
FIELD	2266:6	2266:6	10	w
LEAF_NODE	2266:6	2266:6	11	w
LEAF_NODE	2266:7	2266:7	7	;
ITERATION	2267:2	2267:5	6	
KEYWORD	2267:2	2267:2	7	do
LEAF_NODE	2267:2	2267:2	8	do
LEAF_NODE	2271:10	2271:10	7	(
CONDITION	2271:11	2271:11	7	-- x
EXPR	2271:11	2271:13	8	-- x
LEAF_NODE	2271:11	2271:11	9	--
FIELD	2271:13	2271:13	9	x
LEAF_NODE	2271:13	2271:13	10	x
LEAF_NODE	2271:14	2271:14	7	)
STATEMENTS	2267:5	2271:2	7	
LEAF_NODE	2267:5	2267:5	8	{
STATEMENTS	2268:3	2270:3	8	
SIMPLE_DECL	2268:3	2268:20	9	uint32 dr , uint32 dg , uint32 db ;
INIT_DECL_LIST	2268:3	2268:3	10	uint32 dr , uint32 dg , uint32 db
VAR_DECL	2268:3	2268:10	11	uint32 dr
TYPE	2268:3	2268:3	12	uint32
TYPE_NAME	2268:3	2268:3	13	uint32
LEAF_NODE	2268:3	2268:3	14	uint32
NAME	2268:10	2268:10	12	dr
LEAF_NODE	2268:10	2268:10	13	dr
LEAF_NODE	2268:12	2268:12	11	,
INIT_DECL_LIST	2268:3	2268:3	11	uint32 dg , uint32 db
VAR_DECL	2268:3	2268:14	12	uint32 dg
TYPE	2268:3	2268:3	13	uint32
TYPE_NAME	2268:3	2268:3	14	uint32
LEAF_NODE	2268:3	2268:3	15	uint32
NAME	2268:14	2268:14	13	dg
LEAF_NODE	2268:14	2268:14	14	dg
LEAF_NODE	2268:16	2268:16	12	,
VAR_DECL	2268:3	2268:18	12	uint32 db
TYPE	2268:3	2268:3	13	uint32
TYPE_NAME	2268:3	2268:3	14	uint32
LEAF_NODE	2268:3	2268:3	15	uint32
NAME	2268:18	2268:18	13	db
LEAF_NODE	2268:18	2268:18	14	db
LEAF_NODE	2268:20	2268:20	10	;
EXPR_STATEMENT	2269:3	2269:56	9	TIFFYCbCrtoRGB ( img -> ycbcr , * r ++ , * g ++ , * b ++ , & dr , & dg , & db ) ;
EXPR	2269:3	2269:3	10	TIFFYCbCrtoRGB ( img -> ycbcr , * r ++ , * g ++ , * b ++ , & dr , & dg , & db )
FUNCTION_CALL	2269:3	2269:55	11	TIFFYCbCrtoRGB ( img -> ycbcr , * r ++ , * g ++ , * b ++ , & dr , & dg , & db )
CALLEE	2269:3	2269:3	12	TIFFYCbCrtoRGB
LEAF_NODE	2269:3	2269:3	13	TIFFYCbCrtoRGB
LEAF_NODE	2269:17	2269:17	12	(
ARGUMENT	2269:18	2269:18	12	img -> ycbcr
FIELD	2269:18	2269:23	13	img -> ycbcr
LEAF_NODE	2269:18	2269:18	14	img
LEAF_NODE	2269:21	2269:21	14	->
LEAF_NODE	2269:23	2269:23	14	ycbcr
LEAF_NODE	2269:28	2269:28	12	,
ARGUMENT	2269:29	2269:29	12	* r ++
UNARY_EXPR	2269:29	2269:30	13	* r ++
UNARY_OPERATOR	2269:29	2269:29	14	*
LEAF_NODE	2269:29	2269:29	15	*
FIELD	2269:30	2269:31	14	r ++
LEAF_NODE	2269:30	2269:30	15	r
LEAF_NODE	2269:31	2269:31	15	++
LEAF_NODE	2269:33	2269:33	12	,
ARGUMENT	2269:34	2269:34	12	* g ++
UNARY_EXPR	2269:34	2269:35	13	* g ++
UNARY_OPERATOR	2269:34	2269:34	14	*
LEAF_NODE	2269:34	2269:34	15	*
FIELD	2269:35	2269:36	14	g ++
LEAF_NODE	2269:35	2269:35	15	g
LEAF_NODE	2269:36	2269:36	15	++
LEAF_NODE	2269:38	2269:38	12	,
ARGUMENT	2269:39	2269:39	12	* b ++
UNARY_EXPR	2269:39	2269:40	13	* b ++
UNARY_OPERATOR	2269:39	2269:39	14	*
LEAF_NODE	2269:39	2269:39	15	*
FIELD	2269:40	2269:41	14	b ++
LEAF_NODE	2269:40	2269:40	15	b
LEAF_NODE	2269:41	2269:41	15	++
LEAF_NODE	2269:43	2269:43	12	,
ARGUMENT	2269:44	2269:44	12	& dr
UNARY_EXPR	2269:44	2269:45	13	& dr
UNARY_OPERATOR	2269:44	2269:44	14	&
LEAF_NODE	2269:44	2269:44	15	&
FIELD	2269:45	2269:45	14	dr
LEAF_NODE	2269:45	2269:45	15	dr
LEAF_NODE	2269:47	2269:47	12	,
ARGUMENT	2269:48	2269:48	12	& dg
UNARY_EXPR	2269:48	2269:49	13	& dg
UNARY_OPERATOR	2269:48	2269:48	14	&
LEAF_NODE	2269:48	2269:48	15	&
FIELD	2269:49	2269:49	14	dg
LEAF_NODE	2269:49	2269:49	15	dg
LEAF_NODE	2269:51	2269:51	12	,
ARGUMENT	2269:52	2269:52	12	& db
UNARY_EXPR	2269:52	2269:53	13	& db
UNARY_OPERATOR	2269:52	2269:52	14	&
LEAF_NODE	2269:52	2269:52	15	&
FIELD	2269:53	2269:53	14	db
LEAF_NODE	2269:53	2269:53	15	db
LEAF_NODE	2269:55	2269:55	12	)
LEAF_NODE	2269:56	2269:56	10	;
EXPR_STATEMENT	2270:3	2270:25	9	* cp ++ = PACK ( dr , dg , db ) ;
EXPR	2270:3	2270:3	10	* cp ++ = PACK ( dr , dg , db )
ASSIGN	2270:3	2270:11	11	* cp ++ = PACK ( dr , dg , db )
LVAL	2270:3	2270:3	12	* cp ++
UNARY_EXPR	2270:3	2270:4	13	* cp ++
UNARY_OPERATOR	2270:3	2270:3	14	*
LEAF_NODE	2270:3	2270:3	15	*
FIELD	2270:4	2270:6	14	cp ++
LEAF_NODE	2270:4	2270:4	15	cp
LEAF_NODE	2270:6	2270:6	15	++
ASSIGN_OP	2270:9	2270:9	12	=
LEAF_NODE	2270:9	2270:9	13	=
RVAL	2270:11	2270:11	12	PACK ( dr , dg , db )
FUNCTION_CALL	2270:11	2270:24	13	PACK ( dr , dg , db )
CALLEE	2270:11	2270:11	14	PACK
LEAF_NODE	2270:11	2270:11	15	PACK
LEAF_NODE	2270:15	2270:15	14	(
ARGUMENT	2270:16	2270:16	14	dr
FIELD	2270:16	2270:16	15	dr
LEAF_NODE	2270:16	2270:16	16	dr
LEAF_NODE	2270:18	2270:18	14	,
ARGUMENT	2270:19	2270:19	14	dg
FIELD	2270:19	2270:19	15	dg
LEAF_NODE	2270:19	2270:19	16	dg
LEAF_NODE	2270:21	2270:21	14	,
ARGUMENT	2270:22	2270:22	14	db
FIELD	2270:22	2270:22	15	db
LEAF_NODE	2270:22	2270:22	16	db
LEAF_NODE	2270:24	2270:24	14	)
LEAF_NODE	2270:25	2270:25	10	;
LEAF_NODE	2271:2	2271:2	8	}
LEAF_NODE	2271:15	2271:15	6	;
EXPR_STATEMENT	2272:2	2272:25	6	SKEW ( r , g , b , fromskew ) ;
EXPR	2272:2	2272:2	7	SKEW ( r , g , b , fromskew )
FUNCTION_CALL	2272:2	2272:24	8	SKEW ( r , g , b , fromskew )
CALLEE	2272:2	2272:2	9	SKEW
LEAF_NODE	2272:2	2272:2	10	SKEW
LEAF_NODE	2272:6	2272:6	9	(
ARGUMENT	2272:7	2272:7	9	r
FIELD	2272:7	2272:7	10	r
LEAF_NODE	2272:7	2272:7	11	r
LEAF_NODE	2272:8	2272:8	9	,
ARGUMENT	2272:10	2272:10	9	g
FIELD	2272:10	2272:10	10	g
LEAF_NODE	2272:10	2272:10	11	g
LEAF_NODE	2272:11	2272:11	9	,
ARGUMENT	2272:13	2272:13	9	b
FIELD	2272:13	2272:13	10	b
LEAF_NODE	2272:13	2272:13	11	b
LEAF_NODE	2272:14	2272:14	9	,
ARGUMENT	2272:16	2272:16	9	fromskew
FIELD	2272:16	2272:16	10	fromskew
LEAF_NODE	2272:16	2272:16	11	fromskew
LEAF_NODE	2272:24	2272:24	9	)
LEAF_NODE	2272:25	2272:25	7	;
EXPR_STATEMENT	2273:2	2273:14	6	cp += toskew ;
EXPR	2273:2	2273:2	7	cp += toskew
ASSIGN	2273:2	2273:8	8	cp += toskew
LVAL	2273:2	2273:2	9	cp
FIELD	2273:2	2273:2	10	cp
LEAF_NODE	2273:2	2273:2	11	cp
ASSIGN_OP	2273:5	2273:5	9	+=
LEAF_NODE	2273:5	2273:5	10	+=
RVAL	2273:8	2273:8	9	toskew
FIELD	2273:8	2273:8	10	toskew
LEAF_NODE	2273:8	2273:8	11	toskew
LEAF_NODE	2273:14	2273:14	7	;
LEAF_NODE	2274:1	2274:1	5	}
LEAF_NODE	2275:0	2275:0	2	}
FUNCTION_DEF	2278:0	2281:0	1	
RETURN_TYPE	2278:0	2278:7	2	static int
LEAF_NODE	2278:0	2278:0	3	static
TYPE_NAME	2278:7	2278:7	3	int
LEAF_NODE	2278:7	2278:7	4	int
FUNCTION_NAME	2278:11	2278:11	2	isInRefBlackWhiteRange
LEAF_NODE	2278:11	2278:11	3	isInRefBlackWhiteRange
PARAMETER_LIST	2278:33	2278:41	2	( float f )
LEAF_NODE	2278:33	2278:33	3	(
PARAMETER_DECL	2278:34	2278:40	3	float f
TYPE	2278:34	2278:34	4	float
TYPE_NAME	2278:34	2278:34	5	float
LEAF_NODE	2278:34	2278:34	6	float
NAME	2278:40	2278:40	4	f
LEAF_NODE	2278:40	2278:40	5	f
LEAF_NODE	2278:41	2278:41	3	)
LEAF_NODE	2279:0	2279:0	2	{
STATEMENTS	2280:4	2280:4	2	
JUMP_STATEMENT	2280:4	2280:66	3	return f > ( float ) ( - 0x7FFFFFFF + 128 ) && f < ( float ) 0x7FFFFFFF ;
KEYWORD	2280:4	2280:4	4	return
LEAF_NODE	2280:4	2280:4	5	return
DESTINATION	2280:11	2280:11	4	f > ( float ) ( - 0x7FFFFFFF + 128 ) && f < ( float ) 0x7FFFFFFF
EXPR	2280:11	2280:11	5	f > ( float ) ( - 0x7FFFFFFF + 128 ) && f < ( float ) 0x7FFFFFFF
AND	2280:11	2280:45	6	f > ( float ) ( - 0x7FFFFFFF + 128 ) && f < ( float ) 0x7FFFFFFF
EXPR	2280:11	2280:40	7	f > ( float ) ( - 0x7FFFFFFF + 128 )
FIELD	2280:11	2280:11	8	f
LEAF_NODE	2280:11	2280:11	9	f
REL_OPERATOR	2280:13	2280:13	8	>
LEAF_NODE	2280:13	2280:13	9	>
LEAF_NODE	2280:15	2280:15	8	(
TYPE_NAME	2280:16	2280:16	8	float
LEAF_NODE	2280:16	2280:16	9	float
LEAF_NODE	2280:21	2280:21	8	)
LEAF_NODE	2280:22	2280:22	8	(
UNARY_EXPR	2280:23	2280:24	8	- 0x7FFFFFFF
UNARY_OPERATOR	2280:23	2280:23	9	-
LEAF_NODE	2280:23	2280:23	10	-
FIELD	2280:24	2280:24	9	0x7FFFFFFF
LEAF_NODE	2280:24	2280:24	10	0x7FFFFFFF
LEAF_NODE	2280:35	2280:35	8	+
FIELD	2280:37	2280:37	8	128
LEAF_NODE	2280:37	2280:37	9	128
LEAF_NODE	2280:40	2280:40	8	)
LEAF_NODE	2280:42	2280:42	7	&&
EXPR	2280:45	2280:56	7	f < ( float ) 0x7FFFFFFF
FIELD	2280:45	2280:45	8	f
LEAF_NODE	2280:45	2280:45	9	f
REL_OPERATOR	2280:47	2280:47	8	<
LEAF_NODE	2280:47	2280:47	9	<
LEAF_NODE	2280:49	2280:49	8	(
TYPE_NAME	2280:50	2280:50	8	float
LEAF_NODE	2280:50	2280:50	9	float
LEAF_NODE	2280:55	2280:55	8	)
FIELD	2280:56	2280:56	8	0x7FFFFFFF
LEAF_NODE	2280:56	2280:56	9	0x7FFFFFFF
LEAF_NODE	2280:66	2280:66	4	;
LEAF_NODE	2281:0	2281:0	2	}
FUNCTION_DEF	2283:0	2335:0	1	
RETURN_TYPE	2283:0	2283:7	2	static int
LEAF_NODE	2283:0	2283:0	3	static
TYPE_NAME	2283:7	2283:7	3	int
LEAF_NODE	2283:7	2283:7	4	int
FUNCTION_NAME	2284:0	2284:0	2	initYCbCrConversion
LEAF_NODE	2284:0	2284:0	3	initYCbCrConversion
PARAMETER_LIST	2284:19	2284:38	2	( TIFFRGBAImage * img )
LEAF_NODE	2284:19	2284:19	3	(
PARAMETER_DECL	2284:20	2284:35	3	TIFFRGBAImage * img
TYPE	2284:20	2284:33	4	TIFFRGBAImage *
TYPE_NAME	2284:20	2284:20	5	TIFFRGBAImage
LEAF_NODE	2284:20	2284:20	6	TIFFRGBAImage
POINTER	2284:33	2284:33	5	*
LEAF_NODE	2284:33	2284:33	6	*
NAME	2284:35	2284:35	4	img
LEAF_NODE	2284:35	2284:35	5	img
LEAF_NODE	2284:38	2284:38	3	)
LEAF_NODE	2285:0	2285:0	2	{
STATEMENTS	2286:1	2334:1	2	
LEAF_NODE	2286:1	2286:1	3	static
SIMPLE_DECL	2286:8	2286:51	3	const char [ ] module ; module = "initYCbCrConversion" ;
VAR_DECL	2286:8	2286:19	4	const char [ ] module ; module = "initYCbCrConversion"
TYPE	2286:8	2286:25	5	const char [ ]
TYPE_NAME	2286:8	2286:14	6	const char
LEAF_NODE	2286:8	2286:8	7	const
LEAF_NODE	2286:14	2286:14	7	char
TYPE_SUFFIX	2286:25	2286:26	6	[ ]
LEAF_NODE	2286:25	2286:25	7	[
LEAF_NODE	2286:26	2286:26	7	]
NAME	2286:19	2286:19	5	module
LEAF_NODE	2286:19	2286:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2286:19	2286:19	5	module = "initYCbCrConversion"
ASSIGN	2286:19	2286:30	6	module = "initYCbCrConversion"
LVAL	2286:19	2286:19	7	module
NAME	2286:19	2286:19	8	module
LEAF_NODE	2286:19	2286:19	9	module
ASSIGN_OP	2286:28	2286:28	7	=
LEAF_NODE	2286:28	2286:28	8	=
RVAL	2286:30	2286:30	7	"initYCbCrConversion"
FIELD	2286:30	2286:30	8	"initYCbCrConversion"
LEAF_NODE	2286:30	2286:30	9	"initYCbCrConversion"
LEAF_NODE	2286:51	2286:51	4	;
SIMPLE_DECL	2288:1	2288:28	3	float * luma , float * refBlackWhite ;
INIT_DECL_LIST	2288:1	2288:1	4	float * luma , float * refBlackWhite
VAR_DECL	2288:1	2288:8	5	float * luma
TYPE	2288:1	2288:7	6	float *
TYPE_NAME	2288:1	2288:1	7	float
LEAF_NODE	2288:1	2288:1	8	float
POINTER	2288:7	2288:7	7	*
LEAF_NODE	2288:7	2288:7	8	*
NAME	2288:8	2288:8	6	luma
LEAF_NODE	2288:8	2288:8	7	luma
LEAF_NODE	2288:12	2288:12	5	,
VAR_DECL	2288:1	2288:15	5	float * refBlackWhite
TYPE	2288:1	2288:14	6	float *
TYPE_NAME	2288:1	2288:1	7	float
LEAF_NODE	2288:1	2288:1	8	float
POINTER	2288:14	2288:14	7	*
LEAF_NODE	2288:14	2288:14	8	*
NAME	2288:15	2288:15	6	refBlackWhite
LEAF_NODE	2288:15	2288:15	7	refBlackWhite
LEAF_NODE	2288:28	2288:28	4	;
SELECTION	2290:1	2290:25	3	
KEYWORD	2290:1	2290:1	4	if
LEAF_NODE	2290:1	2290:1	5	if
LEAF_NODE	2290:4	2290:4	4	(
CONDITION	2290:5	2290:5	4	img -> ycbcr == NULL
EXPR	2290:5	2290:19	5	img -> ycbcr == NULL
FIELD	2290:5	2290:10	6	img -> ycbcr
LEAF_NODE	2290:5	2290:5	7	img
LEAF_NODE	2290:8	2290:8	7	->
LEAF_NODE	2290:10	2290:10	7	ycbcr
EQ_OPERATOR	2290:16	2290:16	6	==
LEAF_NODE	2290:16	2290:16	7	==
FIELD	2290:19	2290:19	6	NULL
LEAF_NODE	2290:19	2290:19	7	NULL
LEAF_NODE	2290:23	2290:23	4	)
STATEMENTS	2290:25	2302:1	4	
LEAF_NODE	2290:25	2290:25	5	{
STATEMENTS	2291:2	2297:2	5	
LEAF_NODE	2291:2	2291:2	6	img
LEAF_NODE	2291:5	2291:5	6	->
LEAF_NODE	2291:7	2291:7	6	ycbcr
LEAF_NODE	2291:13	2291:13	6	=
LEAF_NODE	2291:15	2291:15	6	(
LEAF_NODE	2291:16	2291:16	6	TIFFYCbCrToRGB
LEAF_NODE	2291:30	2291:30	6	*
LEAF_NODE	2291:31	2291:31	6	)
LEAF_NODE	2291:33	2291:33	6	_TIFFmalloc
LEAF_NODE	2291:44	2291:44	6	(
LEAF_NODE	2292:6	2292:6	6	TIFFroundup_32
LEAF_NODE	2292:20	2292:20	6	(
LEAF_NODE	2292:21	2292:21	6	sizeof
LEAF_NODE	2292:28	2292:28	6	(
LEAF_NODE	2292:29	2292:29	6	TIFFYCbCrToRGB
LEAF_NODE	2292:43	2292:43	6	)
LEAF_NODE	2292:44	2292:44	6	,
LEAF_NODE	2292:46	2292:46	6	sizeof
LEAF_NODE	2292:53	2292:53	6	(
LEAF_NODE	2292:54	2292:54	6	long
LEAF_NODE	2292:58	2292:58	6	)
LEAF_NODE	2292:59	2292:59	6	)
LEAF_NODE	2293:6	2293:6	6	+
LEAF_NODE	2293:8	2293:8	6	4
LEAF_NODE	2293:9	2293:9	6	*
LEAF_NODE	2293:10	2293:10	6	256
LEAF_NODE	2293:13	2293:13	6	*
LEAF_NODE	2293:14	2293:14	6	sizeof
LEAF_NODE	2293:21	2293:21	6	(
LEAF_NODE	2293:22	2293:22	6	TIFFRGBValue
LEAF_NODE	2293:34	2293:34	6	)
LEAF_NODE	2294:6	2294:6	6	+
LEAF_NODE	2294:8	2294:8	6	2
LEAF_NODE	2294:9	2294:9	6	*
LEAF_NODE	2294:10	2294:10	6	256
LEAF_NODE	2294:13	2294:13	6	*
LEAF_NODE	2294:14	2294:14	6	sizeof
LEAF_NODE	2294:21	2294:21	6	(
LEAF_NODE	2294:22	2294:22	6	int
LEAF_NODE	2294:25	2294:25	6	)
LEAF_NODE	2295:6	2295:6	6	+
LEAF_NODE	2295:8	2295:8	6	3
LEAF_NODE	2295:9	2295:9	6	*
LEAF_NODE	2295:10	2295:10	6	256
LEAF_NODE	2295:13	2295:13	6	*
LEAF_NODE	2295:14	2295:14	6	sizeof
LEAF_NODE	2295:21	2295:21	6	(
LEAF_NODE	2295:22	2295:22	6	int32
LEAF_NODE	2295:27	2295:27	6	)
LEAF_NODE	2296:6	2296:6	6	)
LEAF_NODE	2296:7	2296:7	6	;
SELECTION	2297:2	2297:26	6	
KEYWORD	2297:2	2297:2	7	if
LEAF_NODE	2297:2	2297:2	8	if
LEAF_NODE	2297:5	2297:5	7	(
CONDITION	2297:6	2297:6	7	img -> ycbcr == NULL
EXPR	2297:6	2297:20	8	img -> ycbcr == NULL
FIELD	2297:6	2297:11	9	img -> ycbcr
LEAF_NODE	2297:6	2297:6	10	img
LEAF_NODE	2297:9	2297:9	10	->
LEAF_NODE	2297:11	2297:11	10	ycbcr
EQ_OPERATOR	2297:17	2297:17	9	==
LEAF_NODE	2297:17	2297:17	10	==
FIELD	2297:20	2297:20	9	NULL
LEAF_NODE	2297:20	2297:20	10	NULL
LEAF_NODE	2297:24	2297:24	7	)
STATEMENTS	2297:26	2301:2	7	
LEAF_NODE	2297:26	2297:26	8	{
STATEMENTS	2298:3	2300:3	8	
EXPR_STATEMENT	2298:3	2299:50	9	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "No space for YCbCr->RGB conversion state" ) ;
EXPR	2298:3	2298:3	10	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "No space for YCbCr->RGB conversion state" )
FUNCTION_CALL	2298:3	2299:49	11	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "No space for YCbCr->RGB conversion state" )
CALLEE	2298:3	2298:3	12	TIFFErrorExt
LEAF_NODE	2298:3	2298:3	13	TIFFErrorExt
LEAF_NODE	2298:15	2298:15	12	(
ARGUMENT	2298:16	2298:16	12	img -> tif -> tif_clientdata
FIELD	2298:16	2298:26	13	img -> tif -> tif_clientdata
LEAF_NODE	2298:16	2298:16	14	img
LEAF_NODE	2298:19	2298:19	14	->
LEAF_NODE	2298:21	2298:21	14	tif
LEAF_NODE	2298:24	2298:24	14	->
LEAF_NODE	2298:26	2298:26	14	tif_clientdata
LEAF_NODE	2298:40	2298:40	12	,
ARGUMENT	2298:42	2298:42	12	module
FIELD	2298:42	2298:42	13	module
LEAF_NODE	2298:42	2298:42	14	module
LEAF_NODE	2298:48	2298:48	12	,
ARGUMENT	2299:7	2299:7	12	"No space for YCbCr->RGB conversion state"
FIELD	2299:7	2299:7	13	"No space for YCbCr->RGB conversion state"
LEAF_NODE	2299:7	2299:7	14	"No space for YCbCr->RGB conversion state"
LEAF_NODE	2299:49	2299:49	12	)
LEAF_NODE	2299:50	2299:50	10	;
JUMP_STATEMENT	2300:3	2300:13	9	return ( 0 ) ;
KEYWORD	2300:3	2300:3	10	return
LEAF_NODE	2300:3	2300:3	11	return
DESTINATION	2300:10	2300:10	10	( 0 )
EXPR	2300:10	2300:12	11	( 0 )
LEAF_NODE	2300:10	2300:10	12	(
FIELD	2300:11	2300:11	12	0
LEAF_NODE	2300:11	2300:11	13	0
LEAF_NODE	2300:12	2300:12	12	)
LEAF_NODE	2300:13	2300:13	10	;
LEAF_NODE	2301:2	2301:2	8	}
LEAF_NODE	2302:1	2302:1	5	}
EXPR_STATEMENT	2304:1	2304:66	3	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_YCBCRCOEFFICIENTS , & luma ) ;
EXPR	2304:1	2304:1	4	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_YCBCRCOEFFICIENTS , & luma )
FUNCTION_CALL	2304:1	2304:65	5	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_YCBCRCOEFFICIENTS , & luma )
CALLEE	2304:1	2304:1	6	TIFFGetFieldDefaulted
LEAF_NODE	2304:1	2304:1	7	TIFFGetFieldDefaulted
LEAF_NODE	2304:22	2304:22	6	(
ARGUMENT	2304:23	2304:23	6	img -> tif
FIELD	2304:23	2304:28	7	img -> tif
LEAF_NODE	2304:23	2304:23	8	img
LEAF_NODE	2304:26	2304:26	8	->
LEAF_NODE	2304:28	2304:28	8	tif
LEAF_NODE	2304:31	2304:31	6	,
ARGUMENT	2304:33	2304:33	6	TIFFTAG_YCBCRCOEFFICIENTS
FIELD	2304:33	2304:33	7	TIFFTAG_YCBCRCOEFFICIENTS
LEAF_NODE	2304:33	2304:33	8	TIFFTAG_YCBCRCOEFFICIENTS
LEAF_NODE	2304:58	2304:58	6	,
ARGUMENT	2304:60	2304:60	6	& luma
UNARY_EXPR	2304:60	2304:61	7	& luma
UNARY_OPERATOR	2304:60	2304:60	8	&
LEAF_NODE	2304:60	2304:60	9	&
FIELD	2304:61	2304:61	8	luma
LEAF_NODE	2304:61	2304:61	9	luma
LEAF_NODE	2304:65	2304:65	6	)
LEAF_NODE	2304:66	2304:66	4	;
EXPR_STATEMENT	2305:1	2306:20	3	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_REFERENCEBLACKWHITE , & refBlackWhite ) ;
EXPR	2305:1	2305:1	4	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_REFERENCEBLACKWHITE , & refBlackWhite )
FUNCTION_CALL	2305:1	2306:19	5	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_REFERENCEBLACKWHITE , & refBlackWhite )
CALLEE	2305:1	2305:1	6	TIFFGetFieldDefaulted
LEAF_NODE	2305:1	2305:1	7	TIFFGetFieldDefaulted
LEAF_NODE	2305:22	2305:22	6	(
ARGUMENT	2305:23	2305:23	6	img -> tif
FIELD	2305:23	2305:28	7	img -> tif
LEAF_NODE	2305:23	2305:23	8	img
LEAF_NODE	2305:26	2305:26	8	->
LEAF_NODE	2305:28	2305:28	8	tif
LEAF_NODE	2305:31	2305:31	6	,
ARGUMENT	2305:33	2305:33	6	TIFFTAG_REFERENCEBLACKWHITE
FIELD	2305:33	2305:33	7	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	2305:33	2305:33	8	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	2305:60	2305:60	6	,
ARGUMENT	2306:5	2306:5	6	& refBlackWhite
UNARY_EXPR	2306:5	2306:6	7	& refBlackWhite
UNARY_OPERATOR	2306:5	2306:5	8	&
LEAF_NODE	2306:5	2306:5	9	&
FIELD	2306:6	2306:6	8	refBlackWhite
LEAF_NODE	2306:6	2306:6	9	refBlackWhite
LEAF_NODE	2306:19	2306:19	6	)
LEAF_NODE	2306:20	2306:20	4	;
SELECTION	2310:8	2314:8	3	
KEYWORD	2310:8	2310:8	4	if
LEAF_NODE	2310:8	2310:8	5	if
LEAF_NODE	2310:10	2310:10	4	(
CONDITION	2310:12	2310:12	4	luma [ 0 ] != luma [ 0 ] || luma [ 1 ] != luma [ 1 ] || luma [ 1 ] == 0.0 || luma [ 2 ] != luma [ 2 ]
EXPR	2310:12	2310:12	5	luma [ 0 ] != luma [ 0 ] || luma [ 1 ] != luma [ 1 ] || luma [ 1 ] == 0.0 || luma [ 2 ] != luma [ 2 ]
OR	2310:12	2311:12	6	luma [ 0 ] != luma [ 0 ] || luma [ 1 ] != luma [ 1 ] || luma [ 1 ] == 0.0 || luma [ 2 ] != luma [ 2 ]
EXPR	2310:12	2310:23	7	luma [ 0 ] != luma [ 0 ]
FIELD	2310:12	2310:18	8	luma [ 0 ]
LEAF_NODE	2310:12	2310:12	9	luma
LEAF_NODE	2310:16	2310:16	9	[
EXPR	2310:17	2310:17	9	0
FIELD	2310:17	2310:17	10	0
LEAF_NODE	2310:17	2310:17	11	0
LEAF_NODE	2310:18	2310:18	9	]
EQ_OPERATOR	2310:20	2310:20	8	!=
LEAF_NODE	2310:20	2310:20	9	!=
FIELD	2310:23	2310:29	8	luma [ 0 ]
LEAF_NODE	2310:23	2310:23	9	luma
LEAF_NODE	2310:27	2310:27	9	[
EXPR	2310:28	2310:28	9	0
FIELD	2310:28	2310:28	10	0
LEAF_NODE	2310:28	2310:28	11	0
LEAF_NODE	2310:29	2310:29	9	]
LEAF_NODE	2310:31	2310:31	7	||
EXPR	2311:12	2311:12	7	luma [ 1 ] != luma [ 1 ] || luma [ 1 ] == 0.0 || luma [ 2 ] != luma [ 2 ]
OR	2311:12	2312:12	8	luma [ 1 ] != luma [ 1 ] || luma [ 1 ] == 0.0 || luma [ 2 ] != luma [ 2 ]
EXPR	2311:12	2311:23	9	luma [ 1 ] != luma [ 1 ]
FIELD	2311:12	2311:18	10	luma [ 1 ]
LEAF_NODE	2311:12	2311:12	11	luma
LEAF_NODE	2311:16	2311:16	11	[
EXPR	2311:17	2311:17	11	1
FIELD	2311:17	2311:17	12	1
LEAF_NODE	2311:17	2311:17	13	1
LEAF_NODE	2311:18	2311:18	11	]
EQ_OPERATOR	2311:20	2311:20	10	!=
LEAF_NODE	2311:20	2311:20	11	!=
FIELD	2311:23	2311:29	10	luma [ 1 ]
LEAF_NODE	2311:23	2311:23	11	luma
LEAF_NODE	2311:27	2311:27	11	[
EXPR	2311:28	2311:28	11	1
FIELD	2311:28	2311:28	12	1
LEAF_NODE	2311:28	2311:28	13	1
LEAF_NODE	2311:29	2311:29	11	]
LEAF_NODE	2311:31	2311:31	9	||
EXPR	2312:12	2312:12	9	luma [ 1 ] == 0.0 || luma [ 2 ] != luma [ 2 ]
OR	2312:12	2313:12	10	luma [ 1 ] == 0.0 || luma [ 2 ] != luma [ 2 ]
EXPR	2312:12	2312:23	11	luma [ 1 ] == 0.0
FIELD	2312:12	2312:18	12	luma [ 1 ]
LEAF_NODE	2312:12	2312:12	13	luma
LEAF_NODE	2312:16	2312:16	13	[
EXPR	2312:17	2312:17	13	1
FIELD	2312:17	2312:17	14	1
LEAF_NODE	2312:17	2312:17	15	1
LEAF_NODE	2312:18	2312:18	13	]
EQ_OPERATOR	2312:20	2312:20	12	==
LEAF_NODE	2312:20	2312:20	13	==
FIELD	2312:23	2312:23	12	0.0
LEAF_NODE	2312:23	2312:23	13	0.0
LEAF_NODE	2312:27	2312:27	11	||
EXPR	2313:12	2313:23	11	luma [ 2 ] != luma [ 2 ]
FIELD	2313:12	2313:18	12	luma [ 2 ]
LEAF_NODE	2313:12	2313:12	13	luma
LEAF_NODE	2313:16	2313:16	13	[
EXPR	2313:17	2313:17	13	2
FIELD	2313:17	2313:17	14	2
LEAF_NODE	2313:17	2313:17	15	2
LEAF_NODE	2313:18	2313:18	13	]
EQ_OPERATOR	2313:20	2313:20	12	!=
LEAF_NODE	2313:20	2313:20	13	!=
FIELD	2313:23	2313:29	12	luma [ 2 ]
LEAF_NODE	2313:23	2313:23	13	luma
LEAF_NODE	2313:27	2313:27	13	[
EXPR	2313:28	2313:28	13	2
FIELD	2313:28	2313:28	14	2
LEAF_NODE	2313:28	2313:28	15	2
LEAF_NODE	2313:29	2313:29	13	]
LEAF_NODE	2313:31	2313:31	4	)
STATEMENTS	2314:8	2318:8	4	
LEAF_NODE	2314:8	2314:8	5	{
STATEMENTS	2315:12	2317:12	5	
EXPR_STATEMENT	2315:12	2316:59	6	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Invalid values for YCbCrCoefficients tag" ) ;
EXPR	2315:12	2315:12	7	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Invalid values for YCbCrCoefficients tag" )
FUNCTION_CALL	2315:12	2316:58	8	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Invalid values for YCbCrCoefficients tag" )
CALLEE	2315:12	2315:12	9	TIFFErrorExt
LEAF_NODE	2315:12	2315:12	10	TIFFErrorExt
LEAF_NODE	2315:24	2315:24	9	(
ARGUMENT	2315:25	2315:25	9	img -> tif -> tif_clientdata
FIELD	2315:25	2315:35	10	img -> tif -> tif_clientdata
LEAF_NODE	2315:25	2315:25	11	img
LEAF_NODE	2315:28	2315:28	11	->
LEAF_NODE	2315:30	2315:30	11	tif
LEAF_NODE	2315:33	2315:33	11	->
LEAF_NODE	2315:35	2315:35	11	tif_clientdata
LEAF_NODE	2315:49	2315:49	9	,
ARGUMENT	2315:51	2315:51	9	module
FIELD	2315:51	2315:51	10	module
LEAF_NODE	2315:51	2315:51	11	module
LEAF_NODE	2315:57	2315:57	9	,
ARGUMENT	2316:16	2316:16	9	"Invalid values for YCbCrCoefficients tag"
FIELD	2316:16	2316:16	10	"Invalid values for YCbCrCoefficients tag"
LEAF_NODE	2316:16	2316:16	11	"Invalid values for YCbCrCoefficients tag"
LEAF_NODE	2316:58	2316:58	9	)
LEAF_NODE	2316:59	2316:59	7	;
JUMP_STATEMENT	2317:12	2317:22	6	return ( 0 ) ;
KEYWORD	2317:12	2317:12	7	return
LEAF_NODE	2317:12	2317:12	8	return
DESTINATION	2317:19	2317:19	7	( 0 )
EXPR	2317:19	2317:21	8	( 0 )
LEAF_NODE	2317:19	2317:19	9	(
FIELD	2317:20	2317:20	9	0
LEAF_NODE	2317:20	2317:20	10	0
LEAF_NODE	2317:21	2317:21	9	)
LEAF_NODE	2317:22	2317:22	7	;
LEAF_NODE	2318:8	2318:8	5	}
SELECTION	2320:8	2326:8	3	
KEYWORD	2320:8	2320:8	4	if
LEAF_NODE	2320:8	2320:8	5	if
LEAF_NODE	2320:10	2320:10	4	(
CONDITION	2320:12	2320:12	4	! isInRefBlackWhiteRange ( refBlackWhite [ 0 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 1 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 2 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
EXPR	2320:12	2320:12	5	! isInRefBlackWhiteRange ( refBlackWhite [ 0 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 1 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 2 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
OR	2320:12	2321:12	6	! isInRefBlackWhiteRange ( refBlackWhite [ 0 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 1 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 2 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
EXPR	2320:12	2320:12	7	! isInRefBlackWhiteRange ( refBlackWhite [ 0 ] )
UNARY_EXPR	2320:12	2320:13	8	! isInRefBlackWhiteRange ( refBlackWhite [ 0 ] )
UNARY_OPERATOR	2320:12	2320:12	9	!
LEAF_NODE	2320:12	2320:12	10	!
FUNCTION_CALL	2320:13	2320:52	9	isInRefBlackWhiteRange ( refBlackWhite [ 0 ] )
CALLEE	2320:13	2320:13	10	isInRefBlackWhiteRange
LEAF_NODE	2320:13	2320:13	11	isInRefBlackWhiteRange
LEAF_NODE	2320:35	2320:35	10	(
ARGUMENT	2320:36	2320:36	10	refBlackWhite [ 0 ]
FIELD	2320:36	2320:51	11	refBlackWhite [ 0 ]
LEAF_NODE	2320:36	2320:36	12	refBlackWhite
LEAF_NODE	2320:49	2320:49	12	[
EXPR	2320:50	2320:50	12	0
FIELD	2320:50	2320:50	13	0
LEAF_NODE	2320:50	2320:50	14	0
LEAF_NODE	2320:51	2320:51	12	]
LEAF_NODE	2320:52	2320:52	10	)
LEAF_NODE	2320:54	2320:54	7	||
EXPR	2321:12	2321:12	7	! isInRefBlackWhiteRange ( refBlackWhite [ 1 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 2 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
OR	2321:12	2322:12	8	! isInRefBlackWhiteRange ( refBlackWhite [ 1 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 2 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
EXPR	2321:12	2321:12	9	! isInRefBlackWhiteRange ( refBlackWhite [ 1 ] )
UNARY_EXPR	2321:12	2321:13	10	! isInRefBlackWhiteRange ( refBlackWhite [ 1 ] )
UNARY_OPERATOR	2321:12	2321:12	11	!
LEAF_NODE	2321:12	2321:12	12	!
FUNCTION_CALL	2321:13	2321:52	11	isInRefBlackWhiteRange ( refBlackWhite [ 1 ] )
CALLEE	2321:13	2321:13	12	isInRefBlackWhiteRange
LEAF_NODE	2321:13	2321:13	13	isInRefBlackWhiteRange
LEAF_NODE	2321:35	2321:35	12	(
ARGUMENT	2321:36	2321:36	12	refBlackWhite [ 1 ]
FIELD	2321:36	2321:51	13	refBlackWhite [ 1 ]
LEAF_NODE	2321:36	2321:36	14	refBlackWhite
LEAF_NODE	2321:49	2321:49	14	[
EXPR	2321:50	2321:50	14	1
FIELD	2321:50	2321:50	15	1
LEAF_NODE	2321:50	2321:50	16	1
LEAF_NODE	2321:51	2321:51	14	]
LEAF_NODE	2321:52	2321:52	12	)
LEAF_NODE	2321:54	2321:54	9	||
EXPR	2322:12	2322:12	9	! isInRefBlackWhiteRange ( refBlackWhite [ 2 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
OR	2322:12	2323:12	10	! isInRefBlackWhiteRange ( refBlackWhite [ 2 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
EXPR	2322:12	2322:12	11	! isInRefBlackWhiteRange ( refBlackWhite [ 2 ] )
UNARY_EXPR	2322:12	2322:13	12	! isInRefBlackWhiteRange ( refBlackWhite [ 2 ] )
UNARY_OPERATOR	2322:12	2322:12	13	!
LEAF_NODE	2322:12	2322:12	14	!
FUNCTION_CALL	2322:13	2322:52	13	isInRefBlackWhiteRange ( refBlackWhite [ 2 ] )
CALLEE	2322:13	2322:13	14	isInRefBlackWhiteRange
LEAF_NODE	2322:13	2322:13	15	isInRefBlackWhiteRange
LEAF_NODE	2322:35	2322:35	14	(
ARGUMENT	2322:36	2322:36	14	refBlackWhite [ 2 ]
FIELD	2322:36	2322:51	15	refBlackWhite [ 2 ]
LEAF_NODE	2322:36	2322:36	16	refBlackWhite
LEAF_NODE	2322:49	2322:49	16	[
EXPR	2322:50	2322:50	16	2
FIELD	2322:50	2322:50	17	2
LEAF_NODE	2322:50	2322:50	18	2
LEAF_NODE	2322:51	2322:51	16	]
LEAF_NODE	2322:52	2322:52	14	)
LEAF_NODE	2322:54	2322:54	11	||
EXPR	2323:12	2323:12	11	! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
OR	2323:12	2324:12	12	! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
EXPR	2323:12	2323:12	13	! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] )
UNARY_EXPR	2323:12	2323:13	14	! isInRefBlackWhiteRange ( refBlackWhite [ 3 ] )
UNARY_OPERATOR	2323:12	2323:12	15	!
LEAF_NODE	2323:12	2323:12	16	!
FUNCTION_CALL	2323:13	2323:52	15	isInRefBlackWhiteRange ( refBlackWhite [ 3 ] )
CALLEE	2323:13	2323:13	16	isInRefBlackWhiteRange
LEAF_NODE	2323:13	2323:13	17	isInRefBlackWhiteRange
LEAF_NODE	2323:35	2323:35	16	(
ARGUMENT	2323:36	2323:36	16	refBlackWhite [ 3 ]
FIELD	2323:36	2323:51	17	refBlackWhite [ 3 ]
LEAF_NODE	2323:36	2323:36	18	refBlackWhite
LEAF_NODE	2323:49	2323:49	18	[
EXPR	2323:50	2323:50	18	3
FIELD	2323:50	2323:50	19	3
LEAF_NODE	2323:50	2323:50	20	3
LEAF_NODE	2323:51	2323:51	18	]
LEAF_NODE	2323:52	2323:52	16	)
LEAF_NODE	2323:54	2323:54	13	||
EXPR	2324:12	2324:12	13	! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
OR	2324:12	2325:12	14	! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] ) || ! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
EXPR	2324:12	2324:12	15	! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] )
UNARY_EXPR	2324:12	2324:13	16	! isInRefBlackWhiteRange ( refBlackWhite [ 4 ] )
UNARY_OPERATOR	2324:12	2324:12	17	!
LEAF_NODE	2324:12	2324:12	18	!
FUNCTION_CALL	2324:13	2324:52	17	isInRefBlackWhiteRange ( refBlackWhite [ 4 ] )
CALLEE	2324:13	2324:13	18	isInRefBlackWhiteRange
LEAF_NODE	2324:13	2324:13	19	isInRefBlackWhiteRange
LEAF_NODE	2324:35	2324:35	18	(
ARGUMENT	2324:36	2324:36	18	refBlackWhite [ 4 ]
FIELD	2324:36	2324:51	19	refBlackWhite [ 4 ]
LEAF_NODE	2324:36	2324:36	20	refBlackWhite
LEAF_NODE	2324:49	2324:49	20	[
EXPR	2324:50	2324:50	20	4
FIELD	2324:50	2324:50	21	4
LEAF_NODE	2324:50	2324:50	22	4
LEAF_NODE	2324:51	2324:51	20	]
LEAF_NODE	2324:52	2324:52	18	)
LEAF_NODE	2324:54	2324:54	15	||
EXPR	2325:12	2325:12	15	! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
UNARY_EXPR	2325:12	2325:13	16	! isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
UNARY_OPERATOR	2325:12	2325:12	17	!
LEAF_NODE	2325:12	2325:12	18	!
FUNCTION_CALL	2325:13	2325:52	17	isInRefBlackWhiteRange ( refBlackWhite [ 5 ] )
CALLEE	2325:13	2325:13	18	isInRefBlackWhiteRange
LEAF_NODE	2325:13	2325:13	19	isInRefBlackWhiteRange
LEAF_NODE	2325:35	2325:35	18	(
ARGUMENT	2325:36	2325:36	18	refBlackWhite [ 5 ]
FIELD	2325:36	2325:51	19	refBlackWhite [ 5 ]
LEAF_NODE	2325:36	2325:36	20	refBlackWhite
LEAF_NODE	2325:49	2325:49	20	[
EXPR	2325:50	2325:50	20	5
FIELD	2325:50	2325:50	21	5
LEAF_NODE	2325:50	2325:50	22	5
LEAF_NODE	2325:51	2325:51	20	]
LEAF_NODE	2325:52	2325:52	18	)
LEAF_NODE	2325:54	2325:54	4	)
STATEMENTS	2326:8	2330:8	4	
LEAF_NODE	2326:8	2326:8	5	{
STATEMENTS	2327:12	2329:12	5	
EXPR_STATEMENT	2327:12	2328:61	6	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Invalid values for ReferenceBlackWhite tag" ) ;
EXPR	2327:12	2327:12	7	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Invalid values for ReferenceBlackWhite tag" )
FUNCTION_CALL	2327:12	2328:60	8	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Invalid values for ReferenceBlackWhite tag" )
CALLEE	2327:12	2327:12	9	TIFFErrorExt
LEAF_NODE	2327:12	2327:12	10	TIFFErrorExt
LEAF_NODE	2327:24	2327:24	9	(
ARGUMENT	2327:25	2327:25	9	img -> tif -> tif_clientdata
FIELD	2327:25	2327:35	10	img -> tif -> tif_clientdata
LEAF_NODE	2327:25	2327:25	11	img
LEAF_NODE	2327:28	2327:28	11	->
LEAF_NODE	2327:30	2327:30	11	tif
LEAF_NODE	2327:33	2327:33	11	->
LEAF_NODE	2327:35	2327:35	11	tif_clientdata
LEAF_NODE	2327:49	2327:49	9	,
ARGUMENT	2327:51	2327:51	9	module
FIELD	2327:51	2327:51	10	module
LEAF_NODE	2327:51	2327:51	11	module
LEAF_NODE	2327:57	2327:57	9	,
ARGUMENT	2328:16	2328:16	9	"Invalid values for ReferenceBlackWhite tag"
FIELD	2328:16	2328:16	10	"Invalid values for ReferenceBlackWhite tag"
LEAF_NODE	2328:16	2328:16	11	"Invalid values for ReferenceBlackWhite tag"
LEAF_NODE	2328:60	2328:60	9	)
LEAF_NODE	2328:61	2328:61	7	;
JUMP_STATEMENT	2329:12	2329:22	6	return ( 0 ) ;
KEYWORD	2329:12	2329:12	7	return
LEAF_NODE	2329:12	2329:12	8	return
DESTINATION	2329:19	2329:19	7	( 0 )
EXPR	2329:19	2329:21	8	( 0 )
LEAF_NODE	2329:19	2329:19	9	(
FIELD	2329:20	2329:20	9	0
LEAF_NODE	2329:20	2329:20	10	0
LEAF_NODE	2329:21	2329:21	9	)
LEAF_NODE	2329:22	2329:22	7	;
LEAF_NODE	2330:8	2330:8	5	}
SELECTION	2332:1	2333:2	3	
KEYWORD	2332:1	2332:1	4	if
LEAF_NODE	2332:1	2332:1	5	if
LEAF_NODE	2332:4	2332:4	4	(
CONDITION	2332:5	2332:5	4	TIFFYCbCrToRGBInit ( img -> ycbcr , luma , refBlackWhite ) < 0
EXPR	2332:5	2332:59	5	TIFFYCbCrToRGBInit ( img -> ycbcr , luma , refBlackWhite ) < 0
FUNCTION_CALL	2332:5	2332:55	6	TIFFYCbCrToRGBInit ( img -> ycbcr , luma , refBlackWhite )
CALLEE	2332:5	2332:5	7	TIFFYCbCrToRGBInit
LEAF_NODE	2332:5	2332:5	8	TIFFYCbCrToRGBInit
LEAF_NODE	2332:23	2332:23	7	(
ARGUMENT	2332:24	2332:24	7	img -> ycbcr
FIELD	2332:24	2332:29	8	img -> ycbcr
LEAF_NODE	2332:24	2332:24	9	img
LEAF_NODE	2332:27	2332:27	9	->
LEAF_NODE	2332:29	2332:29	9	ycbcr
LEAF_NODE	2332:34	2332:34	7	,
ARGUMENT	2332:36	2332:36	7	luma
FIELD	2332:36	2332:36	8	luma
LEAF_NODE	2332:36	2332:36	9	luma
LEAF_NODE	2332:40	2332:40	7	,
ARGUMENT	2332:42	2332:42	7	refBlackWhite
FIELD	2332:42	2332:42	8	refBlackWhite
LEAF_NODE	2332:42	2332:42	9	refBlackWhite
LEAF_NODE	2332:55	2332:55	7	)
REL_OPERATOR	2332:57	2332:57	6	<
LEAF_NODE	2332:57	2332:57	7	<
FIELD	2332:59	2332:59	6	0
LEAF_NODE	2332:59	2332:59	7	0
LEAF_NODE	2332:60	2332:60	4	)
STATEMENTS	2333:2	2333:2	4	
JUMP_STATEMENT	2333:2	2333:11	5	return ( 0 ) ;
KEYWORD	2333:2	2333:2	6	return
LEAF_NODE	2333:2	2333:2	7	return
DESTINATION	2333:8	2333:8	6	( 0 )
EXPR	2333:8	2333:10	7	( 0 )
LEAF_NODE	2333:8	2333:8	8	(
FIELD	2333:9	2333:9	8	0
LEAF_NODE	2333:9	2333:9	9	0
LEAF_NODE	2333:10	2333:10	8	)
LEAF_NODE	2333:11	2333:11	6	;
JUMP_STATEMENT	2334:1	2334:11	3	return ( 1 ) ;
KEYWORD	2334:1	2334:1	4	return
LEAF_NODE	2334:1	2334:1	5	return
DESTINATION	2334:8	2334:8	4	( 1 )
EXPR	2334:8	2334:10	5	( 1 )
LEAF_NODE	2334:8	2334:8	6	(
FIELD	2334:9	2334:9	6	1
LEAF_NODE	2334:9	2334:9	7	1
LEAF_NODE	2334:10	2334:10	6	)
LEAF_NODE	2334:11	2334:11	4	;
LEAF_NODE	2335:0	2335:0	2	}
FUNCTION_DEF	2337:0	2374:0	1	
RETURN_TYPE	2337:0	2337:7	2	static tileContigRoutine
LEAF_NODE	2337:0	2337:0	3	static
TYPE_NAME	2337:7	2337:7	3	tileContigRoutine
LEAF_NODE	2337:7	2337:7	4	tileContigRoutine
FUNCTION_NAME	2338:0	2338:0	2	initCIELabConversion
LEAF_NODE	2338:0	2338:0	3	initCIELabConversion
PARAMETER_LIST	2338:20	2338:39	2	( TIFFRGBAImage * img )
LEAF_NODE	2338:20	2338:20	3	(
PARAMETER_DECL	2338:21	2338:36	3	TIFFRGBAImage * img
TYPE	2338:21	2338:34	4	TIFFRGBAImage *
TYPE_NAME	2338:21	2338:21	5	TIFFRGBAImage
LEAF_NODE	2338:21	2338:21	6	TIFFRGBAImage
POINTER	2338:34	2338:34	5	*
LEAF_NODE	2338:34	2338:34	6	*
NAME	2338:36	2338:36	4	img
LEAF_NODE	2338:36	2338:36	5	img
LEAF_NODE	2338:39	2338:39	3	)
LEAF_NODE	2339:0	2339:0	2	{
STATEMENTS	2340:1	2373:1	2	
LEAF_NODE	2340:1	2340:1	3	static
SIMPLE_DECL	2340:8	2340:52	3	const char [ ] module ; module = "initCIELabConversion" ;
VAR_DECL	2340:8	2340:19	4	const char [ ] module ; module = "initCIELabConversion"
TYPE	2340:8	2340:25	5	const char [ ]
TYPE_NAME	2340:8	2340:14	6	const char
LEAF_NODE	2340:8	2340:8	7	const
LEAF_NODE	2340:14	2340:14	7	char
TYPE_SUFFIX	2340:25	2340:26	6	[ ]
LEAF_NODE	2340:25	2340:25	7	[
LEAF_NODE	2340:26	2340:26	7	]
NAME	2340:19	2340:19	5	module
LEAF_NODE	2340:19	2340:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2340:19	2340:19	5	module = "initCIELabConversion"
ASSIGN	2340:19	2340:30	6	module = "initCIELabConversion"
LVAL	2340:19	2340:19	7	module
NAME	2340:19	2340:19	8	module
LEAF_NODE	2340:19	2340:19	9	module
ASSIGN_OP	2340:28	2340:28	7	=
LEAF_NODE	2340:28	2340:28	8	=
RVAL	2340:30	2340:30	7	"initCIELabConversion"
FIELD	2340:30	2340:30	8	"initCIELabConversion"
LEAF_NODE	2340:30	2340:30	9	"initCIELabConversion"
LEAF_NODE	2340:52	2340:52	4	;
SIMPLE_DECL	2342:1	2342:20	3	float * whitePoint ;
VAR_DECL	2342:1	2342:10	4	float * whitePoint
TYPE	2342:1	2342:9	5	float *
TYPE_NAME	2342:1	2342:1	6	float
LEAF_NODE	2342:1	2342:1	7	float
POINTER	2342:9	2342:9	6	*
LEAF_NODE	2342:9	2342:9	7	*
NAME	2342:10	2342:10	5	whitePoint
LEAF_NODE	2342:10	2342:10	6	whitePoint
LEAF_NODE	2342:20	2342:20	4	;
SIMPLE_DECL	2343:1	2343:20	3	float [ 3 ] refWhite ;
VAR_DECL	2343:1	2343:9	4	float [ 3 ] refWhite
TYPE	2343:1	2343:17	5	float [ 3 ]
TYPE_NAME	2343:1	2343:1	6	float
LEAF_NODE	2343:1	2343:1	7	float
TYPE_SUFFIX	2343:17	2343:19	6	[ 3 ]
LEAF_NODE	2343:17	2343:17	7	[
FIELD	2343:18	2343:18	7	3
LEAF_NODE	2343:18	2343:18	8	3
LEAF_NODE	2343:19	2343:19	7	]
NAME	2343:9	2343:9	5	refWhite
LEAF_NODE	2343:9	2343:9	6	refWhite
LEAF_NODE	2343:20	2343:20	4	;
EXPR_STATEMENT	2345:1	2345:65	3	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_WHITEPOINT , & whitePoint ) ;
EXPR	2345:1	2345:1	4	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_WHITEPOINT , & whitePoint )
FUNCTION_CALL	2345:1	2345:64	5	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_WHITEPOINT , & whitePoint )
CALLEE	2345:1	2345:1	6	TIFFGetFieldDefaulted
LEAF_NODE	2345:1	2345:1	7	TIFFGetFieldDefaulted
LEAF_NODE	2345:22	2345:22	6	(
ARGUMENT	2345:23	2345:23	6	img -> tif
FIELD	2345:23	2345:28	7	img -> tif
LEAF_NODE	2345:23	2345:23	8	img
LEAF_NODE	2345:26	2345:26	8	->
LEAF_NODE	2345:28	2345:28	8	tif
LEAF_NODE	2345:31	2345:31	6	,
ARGUMENT	2345:33	2345:33	6	TIFFTAG_WHITEPOINT
FIELD	2345:33	2345:33	7	TIFFTAG_WHITEPOINT
LEAF_NODE	2345:33	2345:33	8	TIFFTAG_WHITEPOINT
LEAF_NODE	2345:51	2345:51	6	,
ARGUMENT	2345:53	2345:53	6	& whitePoint
UNARY_EXPR	2345:53	2345:54	7	& whitePoint
UNARY_OPERATOR	2345:53	2345:53	8	&
LEAF_NODE	2345:53	2345:53	9	&
FIELD	2345:54	2345:54	8	whitePoint
LEAF_NODE	2345:54	2345:54	9	whitePoint
LEAF_NODE	2345:64	2345:64	6	)
LEAF_NODE	2345:65	2345:65	4	;
SELECTION	2346:1	2346:29	3	
KEYWORD	2346:1	2346:1	4	if
LEAF_NODE	2346:1	2346:1	5	if
LEAF_NODE	2346:4	2346:4	4	(
CONDITION	2346:5	2346:5	4	whitePoint [ 1 ] == 0.0f
EXPR	2346:5	2346:22	5	whitePoint [ 1 ] == 0.0f
FIELD	2346:5	2346:17	6	whitePoint [ 1 ]
LEAF_NODE	2346:5	2346:5	7	whitePoint
LEAF_NODE	2346:15	2346:15	7	[
EXPR	2346:16	2346:16	7	1
FIELD	2346:16	2346:16	8	1
LEAF_NODE	2346:16	2346:16	9	1
LEAF_NODE	2346:17	2346:17	7	]
EQ_OPERATOR	2346:19	2346:19	6	==
LEAF_NODE	2346:19	2346:19	7	==
FIELD	2346:22	2346:22	6	0.0f
LEAF_NODE	2346:22	2346:22	7	0.0f
LEAF_NODE	2346:27	2346:27	4	)
STATEMENTS	2346:29	2350:8	4	
LEAF_NODE	2346:29	2346:29	5	{
STATEMENTS	2347:2	2349:2	5	
EXPR_STATEMENT	2347:2	2348:42	6	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Invalid value for WhitePoint tag." ) ;
EXPR	2347:2	2347:2	7	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Invalid value for WhitePoint tag." )
FUNCTION_CALL	2347:2	2348:41	8	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Invalid value for WhitePoint tag." )
CALLEE	2347:2	2347:2	9	TIFFErrorExt
LEAF_NODE	2347:2	2347:2	10	TIFFErrorExt
LEAF_NODE	2347:14	2347:14	9	(
ARGUMENT	2347:15	2347:15	9	img -> tif -> tif_clientdata
FIELD	2347:15	2347:25	10	img -> tif -> tif_clientdata
LEAF_NODE	2347:15	2347:15	11	img
LEAF_NODE	2347:18	2347:18	11	->
LEAF_NODE	2347:20	2347:20	11	tif
LEAF_NODE	2347:23	2347:23	11	->
LEAF_NODE	2347:25	2347:25	11	tif_clientdata
LEAF_NODE	2347:39	2347:39	9	,
ARGUMENT	2347:41	2347:41	9	module
FIELD	2347:41	2347:41	10	module
LEAF_NODE	2347:41	2347:41	11	module
LEAF_NODE	2347:47	2347:47	9	,
ARGUMENT	2348:6	2348:6	9	"Invalid value for WhitePoint tag."
FIELD	2348:6	2348:6	10	"Invalid value for WhitePoint tag."
LEAF_NODE	2348:6	2348:6	11	"Invalid value for WhitePoint tag."
LEAF_NODE	2348:41	2348:41	9	)
LEAF_NODE	2348:42	2348:42	7	;
JUMP_STATEMENT	2349:2	2349:13	6	return NULL ;
KEYWORD	2349:2	2349:2	7	return
LEAF_NODE	2349:2	2349:2	8	return
DESTINATION	2349:9	2349:9	7	NULL
EXPR	2349:9	2349:9	8	NULL
FIELD	2349:9	2349:9	9	NULL
LEAF_NODE	2349:9	2349:9	10	NULL
LEAF_NODE	2349:13	2349:13	7	;
LEAF_NODE	2350:8	2350:8	5	}
SELECTION	2352:1	2352:19	3	
KEYWORD	2352:1	2352:1	4	if
LEAF_NODE	2352:1	2352:1	5	if
LEAF_NODE	2352:4	2352:4	4	(
CONDITION	2352:5	2352:5	4	! img -> cielab
EXPR	2352:5	2352:5	5	! img -> cielab
UNARY_EXPR	2352:5	2352:6	6	! img -> cielab
UNARY_OPERATOR	2352:5	2352:5	7	!
LEAF_NODE	2352:5	2352:5	8	!
FIELD	2352:6	2352:11	7	img -> cielab
LEAF_NODE	2352:6	2352:6	8	img
LEAF_NODE	2352:9	2352:9	8	->
LEAF_NODE	2352:11	2352:11	8	cielab
LEAF_NODE	2352:17	2352:17	4	)
STATEMENTS	2352:19	2360:1	4	
LEAF_NODE	2352:19	2352:19	5	{
STATEMENTS	2353:2	2355:2	5	
EXPR_STATEMENT	2353:2	2354:39	6	img -> cielab = ( TIFFCIELabToRGB * ) _TIFFmalloc ( sizeof ( TIFFCIELabToRGB ) ) ;
EXPR	2353:2	2353:2	7	img -> cielab = ( TIFFCIELabToRGB * ) _TIFFmalloc ( sizeof ( TIFFCIELabToRGB ) )
ASSIGN	2353:2	2353:16	8	img -> cielab = ( TIFFCIELabToRGB * ) _TIFFmalloc ( sizeof ( TIFFCIELabToRGB ) )
LVAL	2353:2	2353:2	9	img -> cielab
FIELD	2353:2	2353:7	10	img -> cielab
LEAF_NODE	2353:2	2353:2	11	img
LEAF_NODE	2353:5	2353:5	11	->
LEAF_NODE	2353:7	2353:7	11	cielab
ASSIGN_OP	2353:14	2353:14	9	=
LEAF_NODE	2353:14	2353:14	10	=
RVAL	2353:16	2354:3	9	( TIFFCIELabToRGB * ) _TIFFmalloc ( sizeof ( TIFFCIELabToRGB ) )
LEAF_NODE	2353:16	2353:16	10	(
TYPE_NAME	2353:17	2353:17	10	TIFFCIELabToRGB
LEAF_NODE	2353:17	2353:17	11	TIFFCIELabToRGB
LEAF_NODE	2353:33	2353:33	10	*
LEAF_NODE	2353:34	2353:34	10	)
FUNCTION_CALL	2354:3	2354:38	10	_TIFFmalloc ( sizeof ( TIFFCIELabToRGB ) )
CALLEE	2354:3	2354:3	11	_TIFFmalloc
LEAF_NODE	2354:3	2354:3	12	_TIFFmalloc
LEAF_NODE	2354:14	2354:14	11	(
ARGUMENT	2354:15	2354:15	11	sizeof ( TIFFCIELabToRGB )
FUNCTION_CALL	2354:15	2354:37	12	sizeof ( TIFFCIELabToRGB )
CALLEE	2354:15	2354:15	13	sizeof
LEAF_NODE	2354:15	2354:15	14	sizeof
LEAF_NODE	2354:21	2354:21	13	(
ARGUMENT	2354:22	2354:22	13	TIFFCIELabToRGB
FIELD	2354:22	2354:22	14	TIFFCIELabToRGB
LEAF_NODE	2354:22	2354:22	15	TIFFCIELabToRGB
LEAF_NODE	2354:37	2354:37	13	)
LEAF_NODE	2354:38	2354:38	11	)
LEAF_NODE	2354:39	2354:39	7	;
SELECTION	2355:2	2355:20	6	
KEYWORD	2355:2	2355:2	7	if
LEAF_NODE	2355:2	2355:2	8	if
LEAF_NODE	2355:5	2355:5	7	(
CONDITION	2355:6	2355:6	7	! img -> cielab
EXPR	2355:6	2355:6	8	! img -> cielab
UNARY_EXPR	2355:6	2355:7	9	! img -> cielab
UNARY_OPERATOR	2355:6	2355:6	10	!
LEAF_NODE	2355:6	2355:6	11	!
FIELD	2355:7	2355:12	10	img -> cielab
LEAF_NODE	2355:7	2355:7	11	img
LEAF_NODE	2355:10	2355:10	11	->
LEAF_NODE	2355:12	2355:12	11	cielab
LEAF_NODE	2355:18	2355:18	7	)
STATEMENTS	2355:20	2359:2	7	
LEAF_NODE	2355:20	2355:20	8	{
STATEMENTS	2356:3	2358:3	8	
EXPR_STATEMENT	2356:3	2357:56	9	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "No space for CIE L*a*b*->RGB conversion state." ) ;
EXPR	2356:3	2356:3	10	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "No space for CIE L*a*b*->RGB conversion state." )
FUNCTION_CALL	2356:3	2357:55	11	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "No space for CIE L*a*b*->RGB conversion state." )
CALLEE	2356:3	2356:3	12	TIFFErrorExt
LEAF_NODE	2356:3	2356:3	13	TIFFErrorExt
LEAF_NODE	2356:15	2356:15	12	(
ARGUMENT	2356:16	2356:16	12	img -> tif -> tif_clientdata
FIELD	2356:16	2356:26	13	img -> tif -> tif_clientdata
LEAF_NODE	2356:16	2356:16	14	img
LEAF_NODE	2356:19	2356:19	14	->
LEAF_NODE	2356:21	2356:21	14	tif
LEAF_NODE	2356:24	2356:24	14	->
LEAF_NODE	2356:26	2356:26	14	tif_clientdata
LEAF_NODE	2356:40	2356:40	12	,
ARGUMENT	2356:42	2356:42	12	module
FIELD	2356:42	2356:42	13	module
LEAF_NODE	2356:42	2356:42	14	module
LEAF_NODE	2356:48	2356:48	12	,
ARGUMENT	2357:7	2357:7	12	"No space for CIE L*a*b*->RGB conversion state."
FIELD	2357:7	2357:7	13	"No space for CIE L*a*b*->RGB conversion state."
LEAF_NODE	2357:7	2357:7	14	"No space for CIE L*a*b*->RGB conversion state."
LEAF_NODE	2357:55	2357:55	12	)
LEAF_NODE	2357:56	2357:56	10	;
JUMP_STATEMENT	2358:3	2358:14	9	return NULL ;
KEYWORD	2358:3	2358:3	10	return
LEAF_NODE	2358:3	2358:3	11	return
DESTINATION	2358:10	2358:10	10	NULL
EXPR	2358:10	2358:10	11	NULL
FIELD	2358:10	2358:10	12	NULL
LEAF_NODE	2358:10	2358:10	13	NULL
LEAF_NODE	2358:14	2358:14	10	;
LEAF_NODE	2359:2	2359:2	8	}
LEAF_NODE	2360:1	2360:1	5	}
EXPR_STATEMENT	2362:1	2362:21	3	refWhite [ 1 ] = 100.0F ;
EXPR	2362:1	2362:1	4	refWhite [ 1 ] = 100.0F
ASSIGN	2362:1	2362:15	5	refWhite [ 1 ] = 100.0F
LVAL	2362:1	2362:1	6	refWhite [ 1 ]
FIELD	2362:1	2362:11	7	refWhite [ 1 ]
LEAF_NODE	2362:1	2362:1	8	refWhite
LEAF_NODE	2362:9	2362:9	8	[
EXPR	2362:10	2362:10	8	1
FIELD	2362:10	2362:10	9	1
LEAF_NODE	2362:10	2362:10	10	1
LEAF_NODE	2362:11	2362:11	8	]
ASSIGN_OP	2362:13	2362:13	6	=
LEAF_NODE	2362:13	2362:13	7	=
RVAL	2362:15	2362:15	6	100.0F
FIELD	2362:15	2362:15	7	100.0F
LEAF_NODE	2362:15	2362:15	8	100.0F
LEAF_NODE	2362:21	2362:21	4	;
LEAF_NODE	2363:1	2363:1	3	refWhite
LEAF_NODE	2363:9	2363:9	3	[
LEAF_NODE	2363:10	2363:10	3	0
LEAF_NODE	2363:11	2363:11	3	]
LEAF_NODE	2363:13	2363:13	3	=
LEAF_NODE	2363:15	2363:15	3	whitePoint
LEAF_NODE	2363:25	2363:25	3	[
LEAF_NODE	2363:26	2363:26	3	0
LEAF_NODE	2363:27	2363:27	3	]
LEAF_NODE	2363:29	2363:29	3	/
EXPR_STATEMENT	2363:31	2363:58	3	whitePoint [ 1 ] * refWhite [ 1 ] ;
EXPR	2363:31	2363:47	4	whitePoint [ 1 ] * refWhite [ 1 ]
FIELD	2363:31	2363:43	5	whitePoint [ 1 ]
LEAF_NODE	2363:31	2363:31	6	whitePoint
LEAF_NODE	2363:41	2363:41	6	[
EXPR	2363:42	2363:42	6	1
FIELD	2363:42	2363:42	7	1
LEAF_NODE	2363:42	2363:42	8	1
LEAF_NODE	2363:43	2363:43	6	]
LEAF_NODE	2363:45	2363:45	5	*
FIELD	2363:47	2363:57	5	refWhite [ 1 ]
LEAF_NODE	2363:47	2363:47	6	refWhite
LEAF_NODE	2363:55	2363:55	6	[
EXPR	2363:56	2363:56	6	1
FIELD	2363:56	2363:56	7	1
LEAF_NODE	2363:56	2363:56	8	1
LEAF_NODE	2363:57	2363:57	6	]
LEAF_NODE	2363:58	2363:58	4	;
LEAF_NODE	2364:1	2364:1	3	refWhite
LEAF_NODE	2364:9	2364:9	3	[
LEAF_NODE	2364:10	2364:10	3	2
LEAF_NODE	2364:11	2364:11	3	]
LEAF_NODE	2364:13	2364:13	3	=
LEAF_NODE	2364:15	2364:15	3	(
LEAF_NODE	2364:16	2364:16	3	1.0F
LEAF_NODE	2364:21	2364:21	3	-
LEAF_NODE	2364:23	2364:23	3	whitePoint
LEAF_NODE	2364:33	2364:33	3	[
LEAF_NODE	2364:34	2364:34	3	0
LEAF_NODE	2364:35	2364:35	3	]
LEAF_NODE	2364:37	2364:37	3	-
LEAF_NODE	2364:39	2364:39	3	whitePoint
LEAF_NODE	2364:49	2364:49	3	[
LEAF_NODE	2364:50	2364:50	3	1
LEAF_NODE	2364:51	2364:51	3	]
LEAF_NODE	2364:52	2364:52	3	)
LEAF_NODE	2365:8	2365:8	3	/
EXPR_STATEMENT	2365:10	2365:37	3	whitePoint [ 1 ] * refWhite [ 1 ] ;
EXPR	2365:10	2365:26	4	whitePoint [ 1 ] * refWhite [ 1 ]
FIELD	2365:10	2365:22	5	whitePoint [ 1 ]
LEAF_NODE	2365:10	2365:10	6	whitePoint
LEAF_NODE	2365:20	2365:20	6	[
EXPR	2365:21	2365:21	6	1
FIELD	2365:21	2365:21	7	1
LEAF_NODE	2365:21	2365:21	8	1
LEAF_NODE	2365:22	2365:22	6	]
LEAF_NODE	2365:24	2365:24	5	*
FIELD	2365:26	2365:36	5	refWhite [ 1 ]
LEAF_NODE	2365:26	2365:26	6	refWhite
LEAF_NODE	2365:34	2365:34	6	[
EXPR	2365:35	2365:35	6	1
FIELD	2365:35	2365:35	7	1
LEAF_NODE	2365:35	2365:35	8	1
LEAF_NODE	2365:36	2365:36	6	]
LEAF_NODE	2365:37	2365:37	4	;
SELECTION	2366:1	2366:68	3	
KEYWORD	2366:1	2366:1	4	if
LEAF_NODE	2366:1	2366:1	5	if
LEAF_NODE	2366:4	2366:4	4	(
CONDITION	2366:5	2366:5	4	TIFFCIELabToRGBInit ( img -> cielab , & display_sRGB , refWhite ) < 0
EXPR	2366:5	2366:65	5	TIFFCIELabToRGBInit ( img -> cielab , & display_sRGB , refWhite ) < 0
FUNCTION_CALL	2366:5	2366:61	6	TIFFCIELabToRGBInit ( img -> cielab , & display_sRGB , refWhite )
CALLEE	2366:5	2366:5	7	TIFFCIELabToRGBInit
LEAF_NODE	2366:5	2366:5	8	TIFFCIELabToRGBInit
LEAF_NODE	2366:24	2366:24	7	(
ARGUMENT	2366:25	2366:25	7	img -> cielab
FIELD	2366:25	2366:30	8	img -> cielab
LEAF_NODE	2366:25	2366:25	9	img
LEAF_NODE	2366:28	2366:28	9	->
LEAF_NODE	2366:30	2366:30	9	cielab
LEAF_NODE	2366:36	2366:36	7	,
ARGUMENT	2366:38	2366:38	7	& display_sRGB
UNARY_EXPR	2366:38	2366:39	8	& display_sRGB
UNARY_OPERATOR	2366:38	2366:38	9	&
LEAF_NODE	2366:38	2366:38	10	&
FIELD	2366:39	2366:39	9	display_sRGB
LEAF_NODE	2366:39	2366:39	10	display_sRGB
LEAF_NODE	2366:51	2366:51	7	,
ARGUMENT	2366:53	2366:53	7	refWhite
FIELD	2366:53	2366:53	8	refWhite
LEAF_NODE	2366:53	2366:53	9	refWhite
LEAF_NODE	2366:61	2366:61	7	)
REL_OPERATOR	2366:63	2366:63	6	<
LEAF_NODE	2366:63	2366:63	7	<
FIELD	2366:65	2366:65	6	0
LEAF_NODE	2366:65	2366:65	7	0
LEAF_NODE	2366:66	2366:66	4	)
STATEMENTS	2366:68	2371:1	4	
LEAF_NODE	2366:68	2366:68	5	{
STATEMENTS	2367:2	2370:2	5	
EXPR_STATEMENT	2367:2	2368:63	6	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Failed to initialize CIE L*a*b*->RGB conversion state." ) ;
EXPR	2367:2	2367:2	7	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Failed to initialize CIE L*a*b*->RGB conversion state." )
FUNCTION_CALL	2367:2	2368:62	8	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Failed to initialize CIE L*a*b*->RGB conversion state." )
CALLEE	2367:2	2367:2	9	TIFFErrorExt
LEAF_NODE	2367:2	2367:2	10	TIFFErrorExt
LEAF_NODE	2367:14	2367:14	9	(
ARGUMENT	2367:15	2367:15	9	img -> tif -> tif_clientdata
FIELD	2367:15	2367:25	10	img -> tif -> tif_clientdata
LEAF_NODE	2367:15	2367:15	11	img
LEAF_NODE	2367:18	2367:18	11	->
LEAF_NODE	2367:20	2367:20	11	tif
LEAF_NODE	2367:23	2367:23	11	->
LEAF_NODE	2367:25	2367:25	11	tif_clientdata
LEAF_NODE	2367:39	2367:39	9	,
ARGUMENT	2367:41	2367:41	9	module
FIELD	2367:41	2367:41	10	module
LEAF_NODE	2367:41	2367:41	11	module
LEAF_NODE	2367:47	2367:47	9	,
ARGUMENT	2368:6	2368:6	9	"Failed to initialize CIE L*a*b*->RGB conversion state."
FIELD	2368:6	2368:6	10	"Failed to initialize CIE L*a*b*->RGB conversion state."
LEAF_NODE	2368:6	2368:6	11	"Failed to initialize CIE L*a*b*->RGB conversion state."
LEAF_NODE	2368:62	2368:62	9	)
LEAF_NODE	2368:63	2368:63	7	;
EXPR_STATEMENT	2369:2	2369:24	6	_TIFFfree ( img -> cielab ) ;
EXPR	2369:2	2369:2	7	_TIFFfree ( img -> cielab )
FUNCTION_CALL	2369:2	2369:23	8	_TIFFfree ( img -> cielab )
CALLEE	2369:2	2369:2	9	_TIFFfree
LEAF_NODE	2369:2	2369:2	10	_TIFFfree
LEAF_NODE	2369:11	2369:11	9	(
ARGUMENT	2369:12	2369:12	9	img -> cielab
FIELD	2369:12	2369:17	10	img -> cielab
LEAF_NODE	2369:12	2369:12	11	img
LEAF_NODE	2369:15	2369:15	11	->
LEAF_NODE	2369:17	2369:17	11	cielab
LEAF_NODE	2369:23	2369:23	9	)
LEAF_NODE	2369:24	2369:24	7	;
JUMP_STATEMENT	2370:2	2370:13	6	return NULL ;
KEYWORD	2370:2	2370:2	7	return
LEAF_NODE	2370:2	2370:2	8	return
DESTINATION	2370:9	2370:9	7	NULL
EXPR	2370:9	2370:9	8	NULL
FIELD	2370:9	2370:9	9	NULL
LEAF_NODE	2370:9	2370:9	10	NULL
LEAF_NODE	2370:13	2370:13	7	;
LEAF_NODE	2371:1	2371:1	5	}
JUMP_STATEMENT	2373:1	2373:27	3	return putcontig8bitCIELab ;
KEYWORD	2373:1	2373:1	4	return
LEAF_NODE	2373:1	2373:1	5	return
DESTINATION	2373:8	2373:8	4	putcontig8bitCIELab
EXPR	2373:8	2373:8	5	putcontig8bitCIELab
FIELD	2373:8	2373:8	6	putcontig8bitCIELab
LEAF_NODE	2373:8	2373:8	7	putcontig8bitCIELab
LEAF_NODE	2373:27	2373:27	4	;
LEAF_NODE	2374:0	2374:0	2	}
FUNCTION_DEF	2383:0	2435:0	1	
RETURN_TYPE	2383:0	2383:7	2	static int
LEAF_NODE	2383:0	2383:0	3	static
TYPE_NAME	2383:7	2383:7	3	int
LEAF_NODE	2383:7	2383:7	4	int
FUNCTION_NAME	2384:0	2384:0	2	makebwmap
LEAF_NODE	2384:0	2384:0	3	makebwmap
PARAMETER_LIST	2384:9	2384:28	2	( TIFFRGBAImage * img )
LEAF_NODE	2384:9	2384:9	3	(
PARAMETER_DECL	2384:10	2384:25	3	TIFFRGBAImage * img
TYPE	2384:10	2384:23	4	TIFFRGBAImage *
TYPE_NAME	2384:10	2384:10	5	TIFFRGBAImage
LEAF_NODE	2384:10	2384:10	6	TIFFRGBAImage
POINTER	2384:23	2384:23	5	*
LEAF_NODE	2384:23	2384:23	6	*
NAME	2384:25	2384:25	4	img
LEAF_NODE	2384:25	2384:25	5	img
LEAF_NODE	2384:28	2384:28	3	)
LEAF_NODE	2385:0	2385:0	2	{
STATEMENTS	2386:4	2434:4	2	
SIMPLE_DECL	2386:4	2386:32	3	TIFFRGBValue * Map ; Map = img -> Map ;
VAR_DECL	2386:4	2386:18	4	TIFFRGBValue * Map ; Map = img -> Map
TYPE	2386:4	2386:16	5	TIFFRGBValue *
TYPE_NAME	2386:4	2386:4	6	TIFFRGBValue
LEAF_NODE	2386:4	2386:4	7	TIFFRGBValue
POINTER	2386:16	2386:16	6	*
LEAF_NODE	2386:16	2386:16	7	*
NAME	2386:18	2386:18	5	Map
LEAF_NODE	2386:18	2386:18	6	Map
LEAF_NODE	0:0	0:0	5	;
INIT	2386:18	2386:18	5	Map = img -> Map
ASSIGN	2386:18	2386:24	6	Map = img -> Map
LVAL	2386:18	2386:18	7	Map
NAME	2386:18	2386:18	8	Map
LEAF_NODE	2386:18	2386:18	9	Map
ASSIGN_OP	2386:22	2386:22	7	=
LEAF_NODE	2386:22	2386:22	8	=
RVAL	2386:24	2386:24	7	img -> Map
FIELD	2386:24	2386:29	8	img -> Map
LEAF_NODE	2386:24	2386:24	9	img
LEAF_NODE	2386:27	2386:27	9	->
LEAF_NODE	2386:29	2386:29	9	Map
LEAF_NODE	2386:32	2386:32	4	;
SIMPLE_DECL	2387:4	2387:42	3	int bitspersample ; bitspersample = img -> bitspersample ;
VAR_DECL	2387:4	2387:8	4	int bitspersample ; bitspersample = img -> bitspersample
TYPE	2387:4	2387:4	5	int
TYPE_NAME	2387:4	2387:4	6	int
LEAF_NODE	2387:4	2387:4	7	int
NAME	2387:8	2387:8	5	bitspersample
LEAF_NODE	2387:8	2387:8	6	bitspersample
LEAF_NODE	0:0	0:0	5	;
INIT	2387:8	2387:8	5	bitspersample = img -> bitspersample
ASSIGN	2387:8	2387:24	6	bitspersample = img -> bitspersample
LVAL	2387:8	2387:8	7	bitspersample
NAME	2387:8	2387:8	8	bitspersample
LEAF_NODE	2387:8	2387:8	9	bitspersample
ASSIGN_OP	2387:22	2387:22	7	=
LEAF_NODE	2387:22	2387:22	8	=
RVAL	2387:24	2387:24	7	img -> bitspersample
FIELD	2387:24	2387:29	8	img -> bitspersample
LEAF_NODE	2387:24	2387:24	9	img
LEAF_NODE	2387:27	2387:27	9	->
LEAF_NODE	2387:29	2387:29	9	bitspersample
LEAF_NODE	2387:42	2387:42	4	;
SIMPLE_DECL	2388:4	2388:36	3	int nsamples ; nsamples = 8 / bitspersample ;
VAR_DECL	2388:4	2388:8	4	int nsamples ; nsamples = 8 / bitspersample
TYPE	2388:4	2388:4	5	int
TYPE_NAME	2388:4	2388:4	6	int
LEAF_NODE	2388:4	2388:4	7	int
NAME	2388:8	2388:8	5	nsamples
LEAF_NODE	2388:8	2388:8	6	nsamples
LEAF_NODE	0:0	0:0	5	;
INIT	2388:8	2388:8	5	nsamples = 8 / bitspersample
ASSIGN	2388:8	2388:19	6	nsamples = 8 / bitspersample
LVAL	2388:8	2388:8	7	nsamples
NAME	2388:8	2388:8	8	nsamples
LEAF_NODE	2388:8	2388:8	9	nsamples
ASSIGN_OP	2388:17	2388:17	7	=
LEAF_NODE	2388:17	2388:17	8	=
RVAL	2388:19	2388:23	7	8 / bitspersample
FIELD	2388:19	2388:19	8	8
LEAF_NODE	2388:19	2388:19	9	8
LEAF_NODE	2388:21	2388:21	8	/
FIELD	2388:23	2388:23	8	bitspersample
LEAF_NODE	2388:23	2388:23	9	bitspersample
LEAF_NODE	2388:36	2388:36	4	;
SIMPLE_DECL	2389:4	2389:9	3	int i ;
VAR_DECL	2389:4	2389:8	4	int i
TYPE	2389:4	2389:4	5	int
TYPE_NAME	2389:4	2389:4	6	int
LEAF_NODE	2389:4	2389:4	7	int
NAME	2389:8	2389:8	5	i
LEAF_NODE	2389:8	2389:8	6	i
LEAF_NODE	2389:9	2389:9	4	;
SIMPLE_DECL	2390:4	2390:13	3	uint32 * p ;
VAR_DECL	2390:4	2390:12	4	uint32 * p
TYPE	2390:4	2390:10	5	uint32 *
TYPE_NAME	2390:4	2390:4	6	uint32
LEAF_NODE	2390:4	2390:4	7	uint32
POINTER	2390:10	2390:10	6	*
LEAF_NODE	2390:10	2390:10	7	*
NAME	2390:12	2390:12	5	p
LEAF_NODE	2390:12	2390:12	6	p
LEAF_NODE	2390:13	2390:13	4	;
SELECTION	2392:4	2393:8	3	
KEYWORD	2392:4	2392:4	4	if
LEAF_NODE	2392:4	2392:4	5	if
LEAF_NODE	2392:6	2392:6	4	(
CONDITION	2392:8	2392:8	4	nsamples == 0
EXPR	2392:8	2392:20	5	nsamples == 0
FIELD	2392:8	2392:8	6	nsamples
LEAF_NODE	2392:8	2392:8	7	nsamples
EQ_OPERATOR	2392:17	2392:17	6	==
LEAF_NODE	2392:17	2392:17	7	==
FIELD	2392:20	2392:20	6	0
LEAF_NODE	2392:20	2392:20	7	0
LEAF_NODE	2392:22	2392:22	4	)
STATEMENTS	2393:8	2393:8	4	
EXPR_STATEMENT	2393:8	2393:20	5	nsamples = 1 ;
EXPR	2393:8	2393:8	6	nsamples = 1
ASSIGN	2393:8	2393:19	7	nsamples = 1
LVAL	2393:8	2393:8	8	nsamples
FIELD	2393:8	2393:8	9	nsamples
LEAF_NODE	2393:8	2393:8	10	nsamples
ASSIGN_OP	2393:17	2393:17	8	=
LEAF_NODE	2393:17	2393:17	9	=
RVAL	2393:19	2393:19	8	1
FIELD	2393:19	2393:19	9	1
LEAF_NODE	2393:19	2393:19	10	1
LEAF_NODE	2393:20	2393:20	6	;
LEAF_NODE	2395:4	2395:4	3	img
LEAF_NODE	2395:7	2395:7	3	->
LEAF_NODE	2395:9	2395:9	3	BWmap
LEAF_NODE	2395:15	2395:15	3	=
LEAF_NODE	2395:17	2395:17	3	(
LEAF_NODE	2395:18	2395:18	3	uint32
LEAF_NODE	2395:24	2395:24	3	*
LEAF_NODE	2395:25	2395:25	3	*
LEAF_NODE	2395:26	2395:26	3	)
LEAF_NODE	2395:28	2395:28	3	_TIFFmalloc
LEAF_NODE	2395:39	2395:39	3	(
LEAF_NODE	2396:1	2396:1	3	256
LEAF_NODE	2396:4	2396:4	3	*
LEAF_NODE	2396:5	2396:5	3	sizeof
LEAF_NODE	2396:12	2396:12	3	(
LEAF_NODE	2396:13	2396:13	3	uint32
LEAF_NODE	2396:20	2396:20	3	*
LEAF_NODE	2396:21	2396:21	3	)
LEAF_NODE	2396:22	2396:22	3	+
LEAF_NODE	2396:23	2396:23	3	(
LEAF_NODE	2396:24	2396:24	3	256
LEAF_NODE	2396:27	2396:27	3	*
LEAF_NODE	2396:28	2396:28	3	nsamples
LEAF_NODE	2396:36	2396:36	3	*
LEAF_NODE	2396:37	2396:37	3	sizeof
LEAF_NODE	2396:43	2396:43	3	(
LEAF_NODE	2396:44	2396:44	3	uint32
LEAF_NODE	2396:50	2396:50	3	)
LEAF_NODE	2396:51	2396:51	3	)
LEAF_NODE	2396:52	2396:52	3	)
LEAF_NODE	2396:53	2396:53	3	;
SELECTION	2397:4	2397:28	3	
KEYWORD	2397:4	2397:4	4	if
LEAF_NODE	2397:4	2397:4	5	if
LEAF_NODE	2397:7	2397:7	4	(
CONDITION	2397:8	2397:8	4	img -> BWmap == NULL
EXPR	2397:8	2397:22	5	img -> BWmap == NULL
FIELD	2397:8	2397:13	6	img -> BWmap
LEAF_NODE	2397:8	2397:8	7	img
LEAF_NODE	2397:11	2397:11	7	->
LEAF_NODE	2397:13	2397:13	7	BWmap
EQ_OPERATOR	2397:19	2397:19	6	==
LEAF_NODE	2397:19	2397:19	7	==
FIELD	2397:22	2397:22	6	NULL
LEAF_NODE	2397:22	2397:22	7	NULL
LEAF_NODE	2397:26	2397:26	4	)
STATEMENTS	2397:28	2400:4	4	
LEAF_NODE	2397:28	2397:28	5	{
STATEMENTS	2398:2	2399:2	5	
EXPR_STATEMENT	2398:2	2398:98	6	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No space for B&W mapping table" ) ;
EXPR	2398:2	2398:2	7	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No space for B&W mapping table" )
FUNCTION_CALL	2398:2	2398:97	8	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No space for B&W mapping table" )
CALLEE	2398:2	2398:2	9	TIFFErrorExt
LEAF_NODE	2398:2	2398:2	10	TIFFErrorExt
LEAF_NODE	2398:14	2398:14	9	(
ARGUMENT	2398:15	2398:15	9	img -> tif -> tif_clientdata
FIELD	2398:15	2398:25	10	img -> tif -> tif_clientdata
LEAF_NODE	2398:15	2398:15	11	img
LEAF_NODE	2398:18	2398:18	11	->
LEAF_NODE	2398:20	2398:20	11	tif
LEAF_NODE	2398:23	2398:23	11	->
LEAF_NODE	2398:25	2398:25	11	tif_clientdata
LEAF_NODE	2398:39	2398:39	9	,
ARGUMENT	2398:41	2398:41	9	TIFFFileName ( img -> tif )
FUNCTION_CALL	2398:41	2398:62	10	TIFFFileName ( img -> tif )
CALLEE	2398:41	2398:41	11	TIFFFileName
LEAF_NODE	2398:41	2398:41	12	TIFFFileName
LEAF_NODE	2398:53	2398:53	11	(
ARGUMENT	2398:54	2398:54	11	img -> tif
FIELD	2398:54	2398:59	12	img -> tif
LEAF_NODE	2398:54	2398:54	13	img
LEAF_NODE	2398:57	2398:57	13	->
LEAF_NODE	2398:59	2398:59	13	tif
LEAF_NODE	2398:62	2398:62	11	)
LEAF_NODE	2398:63	2398:63	9	,
ARGUMENT	2398:65	2398:65	9	"No space for B&W mapping table"
FIELD	2398:65	2398:65	10	"No space for B&W mapping table"
LEAF_NODE	2398:65	2398:65	11	"No space for B&W mapping table"
LEAF_NODE	2398:97	2398:97	9	)
LEAF_NODE	2398:98	2398:98	7	;
JUMP_STATEMENT	2399:2	2399:12	6	return ( 0 ) ;
KEYWORD	2399:2	2399:2	7	return
LEAF_NODE	2399:2	2399:2	8	return
DESTINATION	2399:9	2399:9	7	( 0 )
EXPR	2399:9	2399:11	8	( 0 )
LEAF_NODE	2399:9	2399:9	9	(
FIELD	2399:10	2399:10	9	0
LEAF_NODE	2399:10	2399:10	10	0
LEAF_NODE	2399:11	2399:11	9	)
LEAF_NODE	2399:12	2399:12	7	;
LEAF_NODE	2400:4	2400:4	5	}
EXPR_STATEMENT	2401:4	2401:35	3	p = ( uint32 * ) ( img -> BWmap + 256 ) ;
EXPR	2401:4	2401:4	4	p = ( uint32 * ) ( img -> BWmap + 256 )
ASSIGN	2401:4	2401:8	5	p = ( uint32 * ) ( img -> BWmap + 256 )
LVAL	2401:4	2401:4	6	p
FIELD	2401:4	2401:4	7	p
LEAF_NODE	2401:4	2401:4	8	p
ASSIGN_OP	2401:6	2401:6	6	=
LEAF_NODE	2401:6	2401:6	7	=
RVAL	2401:8	2401:34	6	( uint32 * ) ( img -> BWmap + 256 )
LEAF_NODE	2401:8	2401:8	7	(
TYPE_NAME	2401:9	2401:9	7	uint32
LEAF_NODE	2401:9	2401:9	8	uint32
LEAF_NODE	2401:15	2401:15	7	*
LEAF_NODE	2401:16	2401:16	7	)
LEAF_NODE	2401:17	2401:17	7	(
FIELD	2401:18	2401:23	7	img -> BWmap
LEAF_NODE	2401:18	2401:18	8	img
LEAF_NODE	2401:21	2401:21	8	->
LEAF_NODE	2401:23	2401:23	8	BWmap
LEAF_NODE	2401:29	2401:29	7	+
FIELD	2401:31	2401:31	7	256
LEAF_NODE	2401:31	2401:31	8	256
LEAF_NODE	2401:34	2401:34	7	)
LEAF_NODE	2401:35	2401:35	4	;
ITERATION	2402:4	2402:30	3	
KEYWORD	2402:4	2402:4	4	for
LEAF_NODE	2402:4	2402:4	5	for
LEAF_NODE	2402:8	2402:8	4	(
FOR_INIT	2402:9	2402:14	4	i = 0 ;
EXPR	2402:9	2402:9	5	i = 0
ASSIGN	2402:9	2402:13	6	i = 0
LVAL	2402:9	2402:9	7	i
FIELD	2402:9	2402:9	8	i
LEAF_NODE	2402:9	2402:9	9	i
ASSIGN_OP	2402:11	2402:11	7	=
LEAF_NODE	2402:11	2402:11	8	=
RVAL	2402:13	2402:13	7	0
FIELD	2402:13	2402:13	8	0
LEAF_NODE	2402:13	2402:13	9	0
LEAF_NODE	2402:14	2402:14	5	;
CONDITION	2402:16	2402:16	4	i < 256
EXPR	2402:16	2402:20	5	i < 256
FIELD	2402:16	2402:16	6	i
LEAF_NODE	2402:16	2402:16	7	i
REL_OPERATOR	2402:18	2402:18	6	<
LEAF_NODE	2402:18	2402:18	7	<
FIELD	2402:20	2402:20	6	256
LEAF_NODE	2402:20	2402:20	7	256
LEAF_NODE	2402:23	2402:23	4	;
FOR_EXPR	2402:25	2402:25	4	i ++
EXPR	2402:25	2402:25	5	i ++
FIELD	2402:25	2402:26	6	i ++
LEAF_NODE	2402:25	2402:25	7	i
LEAF_NODE	2402:26	2402:26	7	++
LEAF_NODE	2402:28	2402:28	4	)
STATEMENTS	2402:30	2433:4	4	
LEAF_NODE	2402:30	2402:30	5	{
STATEMENTS	2403:1	2405:1	5	
SIMPLE_DECL	2403:1	2403:15	6	TIFFRGBValue c ;
VAR_DECL	2403:1	2403:14	7	TIFFRGBValue c
TYPE	2403:1	2403:1	8	TIFFRGBValue
TYPE_NAME	2403:1	2403:1	9	TIFFRGBValue
LEAF_NODE	2403:1	2403:1	10	TIFFRGBValue
NAME	2403:14	2403:14	8	c
LEAF_NODE	2403:14	2403:14	9	c
LEAF_NODE	2403:15	2403:15	7	;
EXPR_STATEMENT	2404:1	2404:18	6	img -> BWmap [ i ] = p ;
EXPR	2404:1	2404:1	7	img -> BWmap [ i ] = p
ASSIGN	2404:1	2404:17	8	img -> BWmap [ i ] = p
LVAL	2404:1	2404:1	9	img -> BWmap [ i ]
FIELD	2404:1	2404:13	10	img -> BWmap [ i ]
LEAF_NODE	2404:1	2404:1	11	img
LEAF_NODE	2404:4	2404:4	11	->
LEAF_NODE	2404:6	2404:6	11	BWmap
LEAF_NODE	2404:11	2404:11	11	[
EXPR	2404:12	2404:12	11	i
FIELD	2404:12	2404:12	12	i
LEAF_NODE	2404:12	2404:12	13	i
LEAF_NODE	2404:13	2404:13	11	]
ASSIGN_OP	2404:15	2404:15	9	=
LEAF_NODE	2404:15	2404:15	10	=
RVAL	2404:17	2404:17	9	p
FIELD	2404:17	2404:17	10	p
LEAF_NODE	2404:17	2404:17	11	p
LEAF_NODE	2404:18	2404:18	7	;
SELECTION	2405:1	2405:24	6	
KEYWORD	2405:1	2405:1	7	switch
LEAF_NODE	2405:1	2405:1	8	switch
LEAF_NODE	2405:8	2405:8	7	(
CONDITION	2405:9	2405:9	7	bitspersample
EXPR	2405:9	2405:9	8	bitspersample
FIELD	2405:9	2405:9	9	bitspersample
LEAF_NODE	2405:9	2405:9	10	bitspersample
LEAF_NODE	2405:22	2405:22	7	)
STATEMENTS	2405:24	2431:1	7	
LEAF_NODE	2405:24	2405:24	8	{
STATEMENTS	2407:1	2430:5	8	
LABEL	2407:1	2407:7	9	case 1 :
LEAF_NODE	2407:1	2407:1	10	case
LEAF_NODE	2407:6	2407:6	10	1
LEAF_NODE	2407:7	2407:7	10	:
EXPR_STATEMENT	2408:5	2408:15	9	GREY ( i >> 7 ) ;
EXPR	2408:5	2408:5	10	GREY ( i >> 7 )
FUNCTION_CALL	2408:5	2408:14	11	GREY ( i >> 7 )
CALLEE	2408:5	2408:5	12	GREY
LEAF_NODE	2408:5	2408:5	13	GREY
LEAF_NODE	2408:9	2408:9	12	(
ARGUMENT	2408:10	2408:13	12	i >> 7
FIELD	2408:10	2408:10	13	i
LEAF_NODE	2408:10	2408:10	14	i
LEAF_NODE	2408:11	2408:11	13	>>
FIELD	2408:13	2408:13	13	7
LEAF_NODE	2408:13	2408:13	14	7
LEAF_NODE	2408:14	2408:14	12	)
LEAF_NODE	2408:15	2408:15	10	;
EXPR_STATEMENT	2409:5	2409:19	9	GREY ( ( i >> 6 ) & 1 ) ;
EXPR	2409:5	2409:5	10	GREY ( ( i >> 6 ) & 1 )
FUNCTION_CALL	2409:5	2409:18	11	GREY ( ( i >> 6 ) & 1 )
CALLEE	2409:5	2409:5	12	GREY
LEAF_NODE	2409:5	2409:5	13	GREY
LEAF_NODE	2409:9	2409:9	12	(
ARGUMENT	2409:10	2409:17	12	( i >> 6 ) & 1
LEAF_NODE	2409:10	2409:10	13	(
FIELD	2409:11	2409:11	13	i
LEAF_NODE	2409:11	2409:11	14	i
LEAF_NODE	2409:12	2409:12	13	>>
FIELD	2409:14	2409:14	13	6
LEAF_NODE	2409:14	2409:14	14	6
LEAF_NODE	2409:15	2409:15	13	)
LEAF_NODE	2409:16	2409:16	13	&
FIELD	2409:17	2409:17	13	1
LEAF_NODE	2409:17	2409:17	14	1
LEAF_NODE	2409:18	2409:18	12	)
LEAF_NODE	2409:19	2409:19	10	;
EXPR_STATEMENT	2410:5	2410:19	9	GREY ( ( i >> 5 ) & 1 ) ;
EXPR	2410:5	2410:5	10	GREY ( ( i >> 5 ) & 1 )
FUNCTION_CALL	2410:5	2410:18	11	GREY ( ( i >> 5 ) & 1 )
CALLEE	2410:5	2410:5	12	GREY
LEAF_NODE	2410:5	2410:5	13	GREY
LEAF_NODE	2410:9	2410:9	12	(
ARGUMENT	2410:10	2410:17	12	( i >> 5 ) & 1
LEAF_NODE	2410:10	2410:10	13	(
FIELD	2410:11	2410:11	13	i
LEAF_NODE	2410:11	2410:11	14	i
LEAF_NODE	2410:12	2410:12	13	>>
FIELD	2410:14	2410:14	13	5
LEAF_NODE	2410:14	2410:14	14	5
LEAF_NODE	2410:15	2410:15	13	)
LEAF_NODE	2410:16	2410:16	13	&
FIELD	2410:17	2410:17	13	1
LEAF_NODE	2410:17	2410:17	14	1
LEAF_NODE	2410:18	2410:18	12	)
LEAF_NODE	2410:19	2410:19	10	;
EXPR_STATEMENT	2411:5	2411:19	9	GREY ( ( i >> 4 ) & 1 ) ;
EXPR	2411:5	2411:5	10	GREY ( ( i >> 4 ) & 1 )
FUNCTION_CALL	2411:5	2411:18	11	GREY ( ( i >> 4 ) & 1 )
CALLEE	2411:5	2411:5	12	GREY
LEAF_NODE	2411:5	2411:5	13	GREY
LEAF_NODE	2411:9	2411:9	12	(
ARGUMENT	2411:10	2411:17	12	( i >> 4 ) & 1
LEAF_NODE	2411:10	2411:10	13	(
FIELD	2411:11	2411:11	13	i
LEAF_NODE	2411:11	2411:11	14	i
LEAF_NODE	2411:12	2411:12	13	>>
FIELD	2411:14	2411:14	13	4
LEAF_NODE	2411:14	2411:14	14	4
LEAF_NODE	2411:15	2411:15	13	)
LEAF_NODE	2411:16	2411:16	13	&
FIELD	2411:17	2411:17	13	1
LEAF_NODE	2411:17	2411:17	14	1
LEAF_NODE	2411:18	2411:18	12	)
LEAF_NODE	2411:19	2411:19	10	;
EXPR_STATEMENT	2412:5	2412:19	9	GREY ( ( i >> 3 ) & 1 ) ;
EXPR	2412:5	2412:5	10	GREY ( ( i >> 3 ) & 1 )
FUNCTION_CALL	2412:5	2412:18	11	GREY ( ( i >> 3 ) & 1 )
CALLEE	2412:5	2412:5	12	GREY
LEAF_NODE	2412:5	2412:5	13	GREY
LEAF_NODE	2412:9	2412:9	12	(
ARGUMENT	2412:10	2412:17	12	( i >> 3 ) & 1
LEAF_NODE	2412:10	2412:10	13	(
FIELD	2412:11	2412:11	13	i
LEAF_NODE	2412:11	2412:11	14	i
LEAF_NODE	2412:12	2412:12	13	>>
FIELD	2412:14	2412:14	13	3
LEAF_NODE	2412:14	2412:14	14	3
LEAF_NODE	2412:15	2412:15	13	)
LEAF_NODE	2412:16	2412:16	13	&
FIELD	2412:17	2412:17	13	1
LEAF_NODE	2412:17	2412:17	14	1
LEAF_NODE	2412:18	2412:18	12	)
LEAF_NODE	2412:19	2412:19	10	;
EXPR_STATEMENT	2413:5	2413:19	9	GREY ( ( i >> 2 ) & 1 ) ;
EXPR	2413:5	2413:5	10	GREY ( ( i >> 2 ) & 1 )
FUNCTION_CALL	2413:5	2413:18	11	GREY ( ( i >> 2 ) & 1 )
CALLEE	2413:5	2413:5	12	GREY
LEAF_NODE	2413:5	2413:5	13	GREY
LEAF_NODE	2413:9	2413:9	12	(
ARGUMENT	2413:10	2413:17	12	( i >> 2 ) & 1
LEAF_NODE	2413:10	2413:10	13	(
FIELD	2413:11	2413:11	13	i
LEAF_NODE	2413:11	2413:11	14	i
LEAF_NODE	2413:12	2413:12	13	>>
FIELD	2413:14	2413:14	13	2
LEAF_NODE	2413:14	2413:14	14	2
LEAF_NODE	2413:15	2413:15	13	)
LEAF_NODE	2413:16	2413:16	13	&
FIELD	2413:17	2413:17	13	1
LEAF_NODE	2413:17	2413:17	14	1
LEAF_NODE	2413:18	2413:18	12	)
LEAF_NODE	2413:19	2413:19	10	;
EXPR_STATEMENT	2414:5	2414:19	9	GREY ( ( i >> 1 ) & 1 ) ;
EXPR	2414:5	2414:5	10	GREY ( ( i >> 1 ) & 1 )
FUNCTION_CALL	2414:5	2414:18	11	GREY ( ( i >> 1 ) & 1 )
CALLEE	2414:5	2414:5	12	GREY
LEAF_NODE	2414:5	2414:5	13	GREY
LEAF_NODE	2414:9	2414:9	12	(
ARGUMENT	2414:10	2414:17	12	( i >> 1 ) & 1
LEAF_NODE	2414:10	2414:10	13	(
FIELD	2414:11	2414:11	13	i
LEAF_NODE	2414:11	2414:11	14	i
LEAF_NODE	2414:12	2414:12	13	>>
FIELD	2414:14	2414:14	13	1
LEAF_NODE	2414:14	2414:14	14	1
LEAF_NODE	2414:15	2414:15	13	)
LEAF_NODE	2414:16	2414:16	13	&
FIELD	2414:17	2414:17	13	1
LEAF_NODE	2414:17	2414:17	14	1
LEAF_NODE	2414:18	2414:18	12	)
LEAF_NODE	2414:19	2414:19	10	;
EXPR_STATEMENT	2415:5	2415:14	9	GREY ( i & 1 ) ;
EXPR	2415:5	2415:5	10	GREY ( i & 1 )
FUNCTION_CALL	2415:5	2415:13	11	GREY ( i & 1 )
CALLEE	2415:5	2415:5	12	GREY
LEAF_NODE	2415:5	2415:5	13	GREY
LEAF_NODE	2415:9	2415:9	12	(
ARGUMENT	2415:10	2415:12	12	i & 1
FIELD	2415:10	2415:10	13	i
LEAF_NODE	2415:10	2415:10	14	i
LEAF_NODE	2415:11	2415:11	13	&
FIELD	2415:12	2415:12	13	1
LEAF_NODE	2415:12	2415:12	14	1
LEAF_NODE	2415:13	2415:13	12	)
LEAF_NODE	2415:14	2415:14	10	;
JUMP_STATEMENT	2416:5	2416:10	9	break DESTINATION ;
KEYWORD	2416:5	2416:5	10	break
LEAF_NODE	2416:5	2416:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2416:10	2416:10	10	;
LABEL	2417:1	2417:7	9	case 2 :
LEAF_NODE	2417:1	2417:1	10	case
LEAF_NODE	2417:6	2417:6	10	2
LEAF_NODE	2417:7	2417:7	10	:
EXPR_STATEMENT	2418:5	2418:15	9	GREY ( i >> 6 ) ;
EXPR	2418:5	2418:5	10	GREY ( i >> 6 )
FUNCTION_CALL	2418:5	2418:14	11	GREY ( i >> 6 )
CALLEE	2418:5	2418:5	12	GREY
LEAF_NODE	2418:5	2418:5	13	GREY
LEAF_NODE	2418:9	2418:9	12	(
ARGUMENT	2418:10	2418:13	12	i >> 6
FIELD	2418:10	2418:10	13	i
LEAF_NODE	2418:10	2418:10	14	i
LEAF_NODE	2418:11	2418:11	13	>>
FIELD	2418:13	2418:13	13	6
LEAF_NODE	2418:13	2418:13	14	6
LEAF_NODE	2418:14	2418:14	12	)
LEAF_NODE	2418:15	2418:15	10	;
EXPR_STATEMENT	2419:5	2419:19	9	GREY ( ( i >> 4 ) & 3 ) ;
EXPR	2419:5	2419:5	10	GREY ( ( i >> 4 ) & 3 )
FUNCTION_CALL	2419:5	2419:18	11	GREY ( ( i >> 4 ) & 3 )
CALLEE	2419:5	2419:5	12	GREY
LEAF_NODE	2419:5	2419:5	13	GREY
LEAF_NODE	2419:9	2419:9	12	(
ARGUMENT	2419:10	2419:17	12	( i >> 4 ) & 3
LEAF_NODE	2419:10	2419:10	13	(
FIELD	2419:11	2419:11	13	i
LEAF_NODE	2419:11	2419:11	14	i
LEAF_NODE	2419:12	2419:12	13	>>
FIELD	2419:14	2419:14	13	4
LEAF_NODE	2419:14	2419:14	14	4
LEAF_NODE	2419:15	2419:15	13	)
LEAF_NODE	2419:16	2419:16	13	&
FIELD	2419:17	2419:17	13	3
LEAF_NODE	2419:17	2419:17	14	3
LEAF_NODE	2419:18	2419:18	12	)
LEAF_NODE	2419:19	2419:19	10	;
EXPR_STATEMENT	2420:5	2420:19	9	GREY ( ( i >> 2 ) & 3 ) ;
EXPR	2420:5	2420:5	10	GREY ( ( i >> 2 ) & 3 )
FUNCTION_CALL	2420:5	2420:18	11	GREY ( ( i >> 2 ) & 3 )
CALLEE	2420:5	2420:5	12	GREY
LEAF_NODE	2420:5	2420:5	13	GREY
LEAF_NODE	2420:9	2420:9	12	(
ARGUMENT	2420:10	2420:17	12	( i >> 2 ) & 3
LEAF_NODE	2420:10	2420:10	13	(
FIELD	2420:11	2420:11	13	i
LEAF_NODE	2420:11	2420:11	14	i
LEAF_NODE	2420:12	2420:12	13	>>
FIELD	2420:14	2420:14	13	2
LEAF_NODE	2420:14	2420:14	14	2
LEAF_NODE	2420:15	2420:15	13	)
LEAF_NODE	2420:16	2420:16	13	&
FIELD	2420:17	2420:17	13	3
LEAF_NODE	2420:17	2420:17	14	3
LEAF_NODE	2420:18	2420:18	12	)
LEAF_NODE	2420:19	2420:19	10	;
EXPR_STATEMENT	2421:5	2421:14	9	GREY ( i & 3 ) ;
EXPR	2421:5	2421:5	10	GREY ( i & 3 )
FUNCTION_CALL	2421:5	2421:13	11	GREY ( i & 3 )
CALLEE	2421:5	2421:5	12	GREY
LEAF_NODE	2421:5	2421:5	13	GREY
LEAF_NODE	2421:9	2421:9	12	(
ARGUMENT	2421:10	2421:12	12	i & 3
FIELD	2421:10	2421:10	13	i
LEAF_NODE	2421:10	2421:10	14	i
LEAF_NODE	2421:11	2421:11	13	&
FIELD	2421:12	2421:12	13	3
LEAF_NODE	2421:12	2421:12	14	3
LEAF_NODE	2421:13	2421:13	12	)
LEAF_NODE	2421:14	2421:14	10	;
JUMP_STATEMENT	2422:5	2422:10	9	break DESTINATION ;
KEYWORD	2422:5	2422:5	10	break
LEAF_NODE	2422:5	2422:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2422:10	2422:10	10	;
LABEL	2423:1	2423:7	9	case 4 :
LEAF_NODE	2423:1	2423:1	10	case
LEAF_NODE	2423:6	2423:6	10	4
LEAF_NODE	2423:7	2423:7	10	:
EXPR_STATEMENT	2424:5	2424:15	9	GREY ( i >> 4 ) ;
EXPR	2424:5	2424:5	10	GREY ( i >> 4 )
FUNCTION_CALL	2424:5	2424:14	11	GREY ( i >> 4 )
CALLEE	2424:5	2424:5	12	GREY
LEAF_NODE	2424:5	2424:5	13	GREY
LEAF_NODE	2424:9	2424:9	12	(
ARGUMENT	2424:10	2424:13	12	i >> 4
FIELD	2424:10	2424:10	13	i
LEAF_NODE	2424:10	2424:10	14	i
LEAF_NODE	2424:11	2424:11	13	>>
FIELD	2424:13	2424:13	13	4
LEAF_NODE	2424:13	2424:13	14	4
LEAF_NODE	2424:14	2424:14	12	)
LEAF_NODE	2424:15	2424:15	10	;
EXPR_STATEMENT	2425:5	2425:16	9	GREY ( i & 0xf ) ;
EXPR	2425:5	2425:5	10	GREY ( i & 0xf )
FUNCTION_CALL	2425:5	2425:15	11	GREY ( i & 0xf )
CALLEE	2425:5	2425:5	12	GREY
LEAF_NODE	2425:5	2425:5	13	GREY
LEAF_NODE	2425:9	2425:9	12	(
ARGUMENT	2425:10	2425:12	12	i & 0xf
FIELD	2425:10	2425:10	13	i
LEAF_NODE	2425:10	2425:10	14	i
LEAF_NODE	2425:11	2425:11	13	&
FIELD	2425:12	2425:12	13	0xf
LEAF_NODE	2425:12	2425:12	14	0xf
LEAF_NODE	2425:15	2425:15	12	)
LEAF_NODE	2425:16	2425:16	10	;
JUMP_STATEMENT	2426:5	2426:10	9	break DESTINATION ;
KEYWORD	2426:5	2426:5	10	break
LEAF_NODE	2426:5	2426:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2426:10	2426:10	10	;
LABEL	2427:1	2427:7	9	case 8 :
LEAF_NODE	2427:1	2427:1	10	case
LEAF_NODE	2427:6	2427:6	10	8
LEAF_NODE	2427:7	2427:7	10	:
LABEL	2428:8	2428:15	9	case 16 :
LEAF_NODE	2428:8	2428:8	10	case
LEAF_NODE	2428:13	2428:13	10	16
LEAF_NODE	2428:15	2428:15	10	:
EXPR_STATEMENT	2429:5	2429:12	9	GREY ( i ) ;
EXPR	2429:5	2429:5	10	GREY ( i )
FUNCTION_CALL	2429:5	2429:11	11	GREY ( i )
CALLEE	2429:5	2429:5	12	GREY
LEAF_NODE	2429:5	2429:5	13	GREY
LEAF_NODE	2429:9	2429:9	12	(
ARGUMENT	2429:10	2429:10	12	i
FIELD	2429:10	2429:10	13	i
LEAF_NODE	2429:10	2429:10	14	i
LEAF_NODE	2429:11	2429:11	12	)
LEAF_NODE	2429:12	2429:12	10	;
JUMP_STATEMENT	2430:5	2430:10	9	break DESTINATION ;
KEYWORD	2430:5	2430:5	10	break
LEAF_NODE	2430:5	2430:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2430:10	2430:10	10	;
LEAF_NODE	2431:1	2431:1	8	}
LEAF_NODE	2433:4	2433:4	5	}
JUMP_STATEMENT	2434:4	2434:14	3	return ( 1 ) ;
KEYWORD	2434:4	2434:4	4	return
LEAF_NODE	2434:4	2434:4	5	return
DESTINATION	2434:11	2434:11	4	( 1 )
EXPR	2434:11	2434:13	5	( 1 )
LEAF_NODE	2434:11	2434:11	6	(
FIELD	2434:12	2434:12	6	1
LEAF_NODE	2434:12	2434:12	7	1
LEAF_NODE	2434:13	2434:13	6	)
LEAF_NODE	2434:14	2434:14	4	;
LEAF_NODE	2435:0	2435:0	2	}
FUNCTION_DEF	2442:0	2480:0	1	
RETURN_TYPE	2442:0	2442:7	2	static int
LEAF_NODE	2442:0	2442:0	3	static
TYPE_NAME	2442:7	2442:7	3	int
LEAF_NODE	2442:7	2442:7	4	int
FUNCTION_NAME	2443:0	2443:0	2	setupMap
LEAF_NODE	2443:0	2443:0	3	setupMap
PARAMETER_LIST	2443:8	2443:27	2	( TIFFRGBAImage * img )
LEAF_NODE	2443:8	2443:8	3	(
PARAMETER_DECL	2443:9	2443:24	3	TIFFRGBAImage * img
TYPE	2443:9	2443:22	4	TIFFRGBAImage *
TYPE_NAME	2443:9	2443:9	5	TIFFRGBAImage
LEAF_NODE	2443:9	2443:9	6	TIFFRGBAImage
POINTER	2443:22	2443:22	5	*
LEAF_NODE	2443:22	2443:22	6	*
NAME	2443:24	2443:24	4	img
LEAF_NODE	2443:24	2443:24	5	img
LEAF_NODE	2443:27	2443:27	3	)
LEAF_NODE	2444:0	2444:0	2	{
STATEMENTS	2445:4	2479:4	2	
SIMPLE_DECL	2445:4	2445:18	3	int32 x , int32 range ;
INIT_DECL_LIST	2445:4	2445:4	4	int32 x , int32 range
VAR_DECL	2445:4	2445:10	5	int32 x
TYPE	2445:4	2445:4	6	int32
TYPE_NAME	2445:4	2445:4	7	int32
LEAF_NODE	2445:4	2445:4	8	int32
NAME	2445:10	2445:10	6	x
LEAF_NODE	2445:10	2445:10	7	x
LEAF_NODE	2445:11	2445:11	5	,
VAR_DECL	2445:4	2445:13	5	int32 range
TYPE	2445:4	2445:4	6	int32
TYPE_NAME	2445:4	2445:4	7	int32
LEAF_NODE	2445:4	2445:4	8	int32
NAME	2445:13	2445:13	6	range
LEAF_NODE	2445:13	2445:13	7	range
LEAF_NODE	2445:18	2445:18	4	;
EXPR_STATEMENT	2447:4	2447:47	3	range = ( int32 ) ( ( 1L << img -> bitspersample ) - 1 ) ;
EXPR	2447:4	2447:4	4	range = ( int32 ) ( ( 1L << img -> bitspersample ) - 1 )
ASSIGN	2447:4	2447:12	5	range = ( int32 ) ( ( 1L << img -> bitspersample ) - 1 )
LVAL	2447:4	2447:4	6	range
FIELD	2447:4	2447:4	7	range
LEAF_NODE	2447:4	2447:4	8	range
ASSIGN_OP	2447:10	2447:10	6	=
LEAF_NODE	2447:10	2447:10	7	=
RVAL	2447:12	2447:46	6	( int32 ) ( ( 1L << img -> bitspersample ) - 1 )
LEAF_NODE	2447:12	2447:12	7	(
TYPE_NAME	2447:13	2447:13	7	int32
LEAF_NODE	2447:13	2447:13	8	int32
LEAF_NODE	2447:18	2447:18	7	)
LEAF_NODE	2447:19	2447:19	7	(
LEAF_NODE	2447:20	2447:20	7	(
FIELD	2447:21	2447:21	7	1L
LEAF_NODE	2447:21	2447:21	8	1L
LEAF_NODE	2447:23	2447:23	7	<<
FIELD	2447:25	2447:30	7	img -> bitspersample
LEAF_NODE	2447:25	2447:25	8	img
LEAF_NODE	2447:28	2447:28	8	->
LEAF_NODE	2447:30	2447:30	8	bitspersample
LEAF_NODE	2447:43	2447:43	7	)
LEAF_NODE	2447:44	2447:44	7	-
FIELD	2447:45	2447:45	7	1
LEAF_NODE	2447:45	2447:45	8	1
LEAF_NODE	2447:46	2447:46	7	)
LEAF_NODE	2447:47	2447:47	4	;
SELECTION	2450:4	2451:8	3	
KEYWORD	2450:4	2450:4	4	if
LEAF_NODE	2450:4	2450:4	5	if
LEAF_NODE	2450:6	2450:6	4	(
CONDITION	2450:8	2450:8	4	img -> bitspersample == 16
EXPR	2450:8	2450:30	5	img -> bitspersample == 16
FIELD	2450:8	2450:13	6	img -> bitspersample
LEAF_NODE	2450:8	2450:8	7	img
LEAF_NODE	2450:11	2450:11	7	->
LEAF_NODE	2450:13	2450:13	7	bitspersample
EQ_OPERATOR	2450:27	2450:27	6	==
LEAF_NODE	2450:27	2450:27	7	==
FIELD	2450:30	2450:30	6	16
LEAF_NODE	2450:30	2450:30	7	16
LEAF_NODE	2450:33	2450:33	4	)
STATEMENTS	2451:8	2451:8	4	
EXPR_STATEMENT	2451:8	2451:27	5	range = ( int32 ) 255 ;
EXPR	2451:8	2451:8	6	range = ( int32 ) 255
ASSIGN	2451:8	2451:16	7	range = ( int32 ) 255
LVAL	2451:8	2451:8	8	range
FIELD	2451:8	2451:8	9	range
LEAF_NODE	2451:8	2451:8	10	range
ASSIGN_OP	2451:14	2451:14	8	=
LEAF_NODE	2451:14	2451:14	9	=
RVAL	2451:16	2451:24	8	( int32 ) 255
LEAF_NODE	2451:16	2451:16	9	(
TYPE_NAME	2451:17	2451:17	9	int32
LEAF_NODE	2451:17	2451:17	10	int32
LEAF_NODE	2451:22	2451:22	9	)
FIELD	2451:24	2451:24	9	255
LEAF_NODE	2451:24	2451:24	10	255
LEAF_NODE	2451:27	2451:27	6	;
EXPR_STATEMENT	2453:4	2453:77	3	img -> Map = ( TIFFRGBValue * ) _TIFFmalloc ( ( range + 1 ) * sizeof ( TIFFRGBValue ) ) ;
EXPR	2453:4	2453:4	4	img -> Map = ( TIFFRGBValue * ) _TIFFmalloc ( ( range + 1 ) * sizeof ( TIFFRGBValue ) )
ASSIGN	2453:4	2453:15	5	img -> Map = ( TIFFRGBValue * ) _TIFFmalloc ( ( range + 1 ) * sizeof ( TIFFRGBValue ) )
LVAL	2453:4	2453:4	6	img -> Map
FIELD	2453:4	2453:9	7	img -> Map
LEAF_NODE	2453:4	2453:4	8	img
LEAF_NODE	2453:7	2453:7	8	->
LEAF_NODE	2453:9	2453:9	8	Map
ASSIGN_OP	2453:13	2453:13	6	=
LEAF_NODE	2453:13	2453:13	7	=
RVAL	2453:15	2453:31	6	( TIFFRGBValue * ) _TIFFmalloc ( ( range + 1 ) * sizeof ( TIFFRGBValue ) )
LEAF_NODE	2453:15	2453:15	7	(
TYPE_NAME	2453:16	2453:16	7	TIFFRGBValue
LEAF_NODE	2453:16	2453:16	8	TIFFRGBValue
LEAF_NODE	2453:28	2453:28	7	*
LEAF_NODE	2453:29	2453:29	7	)
FUNCTION_CALL	2453:31	2453:76	7	_TIFFmalloc ( ( range + 1 ) * sizeof ( TIFFRGBValue ) )
CALLEE	2453:31	2453:31	8	_TIFFmalloc
LEAF_NODE	2453:31	2453:31	9	_TIFFmalloc
LEAF_NODE	2453:42	2453:42	8	(
ARGUMENT	2453:43	2453:55	8	( range + 1 ) * sizeof ( TIFFRGBValue )
LEAF_NODE	2453:43	2453:43	9	(
FIELD	2453:44	2453:44	9	range
LEAF_NODE	2453:44	2453:44	10	range
LEAF_NODE	2453:49	2453:49	9	+
FIELD	2453:50	2453:50	9	1
LEAF_NODE	2453:50	2453:50	10	1
LEAF_NODE	2453:51	2453:51	9	)
LEAF_NODE	2453:53	2453:53	9	*
FUNCTION_CALL	2453:55	2453:75	9	sizeof ( TIFFRGBValue )
CALLEE	2453:55	2453:55	10	sizeof
LEAF_NODE	2453:55	2453:55	11	sizeof
LEAF_NODE	2453:62	2453:62	10	(
ARGUMENT	2453:63	2453:63	10	TIFFRGBValue
FIELD	2453:63	2453:63	11	TIFFRGBValue
LEAF_NODE	2453:63	2453:63	12	TIFFRGBValue
LEAF_NODE	2453:75	2453:75	10	)
LEAF_NODE	2453:76	2453:76	8	)
LEAF_NODE	2453:77	2453:77	4	;
SELECTION	2454:4	2454:26	3	
KEYWORD	2454:4	2454:4	4	if
LEAF_NODE	2454:4	2454:4	5	if
LEAF_NODE	2454:7	2454:7	4	(
CONDITION	2454:8	2454:8	4	img -> Map == NULL
EXPR	2454:8	2454:20	5	img -> Map == NULL
FIELD	2454:8	2454:13	6	img -> Map
LEAF_NODE	2454:8	2454:8	7	img
LEAF_NODE	2454:11	2454:11	7	->
LEAF_NODE	2454:13	2454:13	7	Map
EQ_OPERATOR	2454:17	2454:17	6	==
LEAF_NODE	2454:17	2454:17	7	==
FIELD	2454:20	2454:20	6	NULL
LEAF_NODE	2454:20	2454:20	7	NULL
LEAF_NODE	2454:24	2454:24	4	)
STATEMENTS	2454:26	2458:4	4	
LEAF_NODE	2454:26	2454:26	5	{
STATEMENTS	2455:2	2457:2	5	
EXPR_STATEMENT	2455:2	2456:47	6	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No space for photometric conversion table" ) ;
EXPR	2455:2	2455:2	7	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No space for photometric conversion table" )
FUNCTION_CALL	2455:2	2456:46	8	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No space for photometric conversion table" )
CALLEE	2455:2	2455:2	9	TIFFErrorExt
LEAF_NODE	2455:2	2455:2	10	TIFFErrorExt
LEAF_NODE	2455:14	2455:14	9	(
ARGUMENT	2455:15	2455:15	9	img -> tif -> tif_clientdata
FIELD	2455:15	2455:25	10	img -> tif -> tif_clientdata
LEAF_NODE	2455:15	2455:15	11	img
LEAF_NODE	2455:18	2455:18	11	->
LEAF_NODE	2455:20	2455:20	11	tif
LEAF_NODE	2455:23	2455:23	11	->
LEAF_NODE	2455:25	2455:25	11	tif_clientdata
LEAF_NODE	2455:39	2455:39	9	,
ARGUMENT	2455:41	2455:41	9	TIFFFileName ( img -> tif )
FUNCTION_CALL	2455:41	2455:62	10	TIFFFileName ( img -> tif )
CALLEE	2455:41	2455:41	11	TIFFFileName
LEAF_NODE	2455:41	2455:41	12	TIFFFileName
LEAF_NODE	2455:53	2455:53	11	(
ARGUMENT	2455:54	2455:54	11	img -> tif
FIELD	2455:54	2455:59	12	img -> tif
LEAF_NODE	2455:54	2455:54	13	img
LEAF_NODE	2455:57	2455:57	13	->
LEAF_NODE	2455:59	2455:59	13	tif
LEAF_NODE	2455:62	2455:62	11	)
LEAF_NODE	2455:63	2455:63	9	,
ARGUMENT	2456:3	2456:3	9	"No space for photometric conversion table"
FIELD	2456:3	2456:3	10	"No space for photometric conversion table"
LEAF_NODE	2456:3	2456:3	11	"No space for photometric conversion table"
LEAF_NODE	2456:46	2456:46	9	)
LEAF_NODE	2456:47	2456:47	7	;
JUMP_STATEMENT	2457:2	2457:12	6	return ( 0 ) ;
KEYWORD	2457:2	2457:2	7	return
LEAF_NODE	2457:2	2457:2	8	return
DESTINATION	2457:9	2457:9	7	( 0 )
EXPR	2457:9	2457:11	8	( 0 )
LEAF_NODE	2457:9	2457:9	9	(
FIELD	2457:10	2457:10	9	0
LEAF_NODE	2457:10	2457:10	10	0
LEAF_NODE	2457:11	2457:11	9	)
LEAF_NODE	2457:12	2457:12	7	;
LEAF_NODE	2458:4	2458:4	5	}
SELECTION	2459:4	2459:52	3	
KEYWORD	2459:4	2459:4	4	if
LEAF_NODE	2459:4	2459:4	5	if
LEAF_NODE	2459:7	2459:7	4	(
CONDITION	2459:8	2459:8	4	img -> photometric == PHOTOMETRIC_MINISWHITE
EXPR	2459:8	2459:28	5	img -> photometric == PHOTOMETRIC_MINISWHITE
FIELD	2459:8	2459:13	6	img -> photometric
LEAF_NODE	2459:8	2459:8	7	img
LEAF_NODE	2459:11	2459:11	7	->
LEAF_NODE	2459:13	2459:13	7	photometric
EQ_OPERATOR	2459:25	2459:25	6	==
LEAF_NODE	2459:25	2459:25	7	==
FIELD	2459:28	2459:28	6	PHOTOMETRIC_MINISWHITE
LEAF_NODE	2459:28	2459:28	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	2459:50	2459:50	4	)
STATEMENTS	2459:52	2462:4	4	
LEAF_NODE	2459:52	2459:52	5	{
STATEMENTS	2460:1	2460:1	5	
ITERATION	2460:1	2461:5	6	
KEYWORD	2460:1	2460:1	7	for
LEAF_NODE	2460:1	2460:1	8	for
LEAF_NODE	2460:5	2460:5	7	(
FOR_INIT	2460:6	2460:11	7	x = 0 ;
EXPR	2460:6	2460:6	8	x = 0
ASSIGN	2460:6	2460:10	9	x = 0
LVAL	2460:6	2460:6	10	x
FIELD	2460:6	2460:6	11	x
LEAF_NODE	2460:6	2460:6	12	x
ASSIGN_OP	2460:8	2460:8	10	=
LEAF_NODE	2460:8	2460:8	11	=
RVAL	2460:10	2460:10	10	0
FIELD	2460:10	2460:10	11	0
LEAF_NODE	2460:10	2460:10	12	0
LEAF_NODE	2460:11	2460:11	8	;
CONDITION	2460:13	2460:13	7	x <= range
EXPR	2460:13	2460:18	8	x <= range
FIELD	2460:13	2460:13	9	x
LEAF_NODE	2460:13	2460:13	10	x
REL_OPERATOR	2460:15	2460:15	9	<=
LEAF_NODE	2460:15	2460:15	10	<=
FIELD	2460:18	2460:18	9	range
LEAF_NODE	2460:18	2460:18	10	range
LEAF_NODE	2460:23	2460:23	7	;
FOR_EXPR	2460:25	2460:25	7	x ++
EXPR	2460:25	2460:25	8	x ++
FIELD	2460:25	2460:26	9	x ++
LEAF_NODE	2460:25	2460:25	10	x
LEAF_NODE	2460:26	2460:26	10	++
LEAF_NODE	2460:28	2460:28	7	)
STATEMENTS	2461:5	2461:5	7	
EXPR_STATEMENT	2461:5	2461:63	8	img -> Map [ x ] = ( TIFFRGBValue ) ( ( ( range - x ) * 255 ) / range ) ;
EXPR	2461:5	2461:5	9	img -> Map [ x ] = ( TIFFRGBValue ) ( ( ( range - x ) * 255 ) / range )
ASSIGN	2461:5	2461:19	10	img -> Map [ x ] = ( TIFFRGBValue ) ( ( ( range - x ) * 255 ) / range )
LVAL	2461:5	2461:5	11	img -> Map [ x ]
FIELD	2461:5	2461:15	12	img -> Map [ x ]
LEAF_NODE	2461:5	2461:5	13	img
LEAF_NODE	2461:8	2461:8	13	->
LEAF_NODE	2461:10	2461:10	13	Map
LEAF_NODE	2461:13	2461:13	13	[
EXPR	2461:14	2461:14	13	x
FIELD	2461:14	2461:14	14	x
LEAF_NODE	2461:14	2461:14	15	x
LEAF_NODE	2461:15	2461:15	13	]
ASSIGN_OP	2461:17	2461:17	11	=
LEAF_NODE	2461:17	2461:17	12	=
RVAL	2461:19	2461:62	11	( TIFFRGBValue ) ( ( ( range - x ) * 255 ) / range )
LEAF_NODE	2461:19	2461:19	12	(
TYPE_NAME	2461:20	2461:20	12	TIFFRGBValue
LEAF_NODE	2461:20	2461:20	13	TIFFRGBValue
LEAF_NODE	2461:32	2461:32	12	)
LEAF_NODE	2461:34	2461:34	12	(
LEAF_NODE	2461:35	2461:35	12	(
LEAF_NODE	2461:36	2461:36	12	(
FIELD	2461:37	2461:37	12	range
LEAF_NODE	2461:37	2461:37	13	range
LEAF_NODE	2461:43	2461:43	12	-
FIELD	2461:45	2461:45	12	x
LEAF_NODE	2461:45	2461:45	13	x
LEAF_NODE	2461:46	2461:46	12	)
LEAF_NODE	2461:48	2461:48	12	*
FIELD	2461:50	2461:50	12	255
LEAF_NODE	2461:50	2461:50	13	255
LEAF_NODE	2461:53	2461:53	12	)
LEAF_NODE	2461:55	2461:55	12	/
FIELD	2461:57	2461:57	12	range
LEAF_NODE	2461:57	2461:57	13	range
LEAF_NODE	2461:62	2461:62	12	)
LEAF_NODE	2461:63	2461:63	9	;
LEAF_NODE	2462:4	2462:4	5	}
SELECTION	2462:6	2462:11	3	
KEYWORD	2462:6	2462:6	4	else
LEAF_NODE	2462:6	2462:6	5	else
STATEMENTS	2462:11	2465:4	4	
LEAF_NODE	2462:11	2462:11	5	{
STATEMENTS	2463:1	2463:1	5	
ITERATION	2463:1	2464:5	6	
KEYWORD	2463:1	2463:1	7	for
LEAF_NODE	2463:1	2463:1	8	for
LEAF_NODE	2463:5	2463:5	7	(
FOR_INIT	2463:6	2463:11	7	x = 0 ;
EXPR	2463:6	2463:6	8	x = 0
ASSIGN	2463:6	2463:10	9	x = 0
LVAL	2463:6	2463:6	10	x
FIELD	2463:6	2463:6	11	x
LEAF_NODE	2463:6	2463:6	12	x
ASSIGN_OP	2463:8	2463:8	10	=
LEAF_NODE	2463:8	2463:8	11	=
RVAL	2463:10	2463:10	10	0
FIELD	2463:10	2463:10	11	0
LEAF_NODE	2463:10	2463:10	12	0
LEAF_NODE	2463:11	2463:11	8	;
CONDITION	2463:13	2463:13	7	x <= range
EXPR	2463:13	2463:18	8	x <= range
FIELD	2463:13	2463:13	9	x
LEAF_NODE	2463:13	2463:13	10	x
REL_OPERATOR	2463:15	2463:15	9	<=
LEAF_NODE	2463:15	2463:15	10	<=
FIELD	2463:18	2463:18	9	range
LEAF_NODE	2463:18	2463:18	10	range
LEAF_NODE	2463:23	2463:23	7	;
FOR_EXPR	2463:25	2463:25	7	x ++
EXPR	2463:25	2463:25	8	x ++
FIELD	2463:25	2463:26	9	x ++
LEAF_NODE	2463:25	2463:25	10	x
LEAF_NODE	2463:26	2463:26	10	++
LEAF_NODE	2463:28	2463:28	7	)
STATEMENTS	2464:5	2464:5	7	
EXPR_STATEMENT	2464:5	2464:53	8	img -> Map [ x ] = ( TIFFRGBValue ) ( ( x * 255 ) / range ) ;
EXPR	2464:5	2464:5	9	img -> Map [ x ] = ( TIFFRGBValue ) ( ( x * 255 ) / range )
ASSIGN	2464:5	2464:19	10	img -> Map [ x ] = ( TIFFRGBValue ) ( ( x * 255 ) / range )
LVAL	2464:5	2464:5	11	img -> Map [ x ]
FIELD	2464:5	2464:15	12	img -> Map [ x ]
LEAF_NODE	2464:5	2464:5	13	img
LEAF_NODE	2464:8	2464:8	13	->
LEAF_NODE	2464:10	2464:10	13	Map
LEAF_NODE	2464:13	2464:13	13	[
EXPR	2464:14	2464:14	13	x
FIELD	2464:14	2464:14	14	x
LEAF_NODE	2464:14	2464:14	15	x
LEAF_NODE	2464:15	2464:15	13	]
ASSIGN_OP	2464:17	2464:17	11	=
LEAF_NODE	2464:17	2464:17	12	=
RVAL	2464:19	2464:52	11	( TIFFRGBValue ) ( ( x * 255 ) / range )
LEAF_NODE	2464:19	2464:19	12	(
TYPE_NAME	2464:20	2464:20	12	TIFFRGBValue
LEAF_NODE	2464:20	2464:20	13	TIFFRGBValue
LEAF_NODE	2464:32	2464:32	12	)
LEAF_NODE	2464:34	2464:34	12	(
LEAF_NODE	2464:35	2464:35	12	(
FIELD	2464:36	2464:36	12	x
LEAF_NODE	2464:36	2464:36	13	x
LEAF_NODE	2464:38	2464:38	12	*
FIELD	2464:40	2464:40	12	255
LEAF_NODE	2464:40	2464:40	13	255
LEAF_NODE	2464:43	2464:43	12	)
LEAF_NODE	2464:45	2464:45	12	/
FIELD	2464:47	2464:47	12	range
LEAF_NODE	2464:47	2464:47	13	range
LEAF_NODE	2464:52	2464:52	12	)
LEAF_NODE	2464:53	2464:53	9	;
LEAF_NODE	2465:4	2465:4	5	}
SELECTION	2466:4	2468:47	3	
KEYWORD	2466:4	2466:4	4	if
LEAF_NODE	2466:4	2466:4	5	if
LEAF_NODE	2466:7	2466:7	4	(
CONDITION	2466:8	2466:8	4	img -> bitspersample <= 16 && ( img -> photometric == PHOTOMETRIC_MINISBLACK || img -> photometric == PHOTOMETRIC_MINISWHITE )
EXPR	2466:8	2466:8	5	img -> bitspersample <= 16 && ( img -> photometric == PHOTOMETRIC_MINISBLACK || img -> photometric == PHOTOMETRIC_MINISWHITE )
AND	2466:8	2467:1	6	img -> bitspersample <= 16 && ( img -> photometric == PHOTOMETRIC_MINISBLACK || img -> photometric == PHOTOMETRIC_MINISWHITE )
EXPR	2466:8	2466:30	7	img -> bitspersample <= 16
FIELD	2466:8	2466:13	8	img -> bitspersample
LEAF_NODE	2466:8	2466:8	9	img
LEAF_NODE	2466:11	2466:11	9	->
LEAF_NODE	2466:13	2466:13	9	bitspersample
REL_OPERATOR	2466:27	2466:27	8	<=
LEAF_NODE	2466:27	2466:27	9	<=
FIELD	2466:30	2466:30	8	16
LEAF_NODE	2466:30	2466:30	9	16
LEAF_NODE	2466:33	2466:33	7	&&
EXPR	2467:1	2468:44	7	( img -> photometric == PHOTOMETRIC_MINISBLACK || img -> photometric == PHOTOMETRIC_MINISWHITE )
LEAF_NODE	2467:1	2467:1	8	(
OR	2467:2	2468:2	8	img -> photometric == PHOTOMETRIC_MINISBLACK || img -> photometric == PHOTOMETRIC_MINISWHITE
EXPR	2467:2	2467:22	9	img -> photometric == PHOTOMETRIC_MINISBLACK
FIELD	2467:2	2467:7	10	img -> photometric
LEAF_NODE	2467:2	2467:2	11	img
LEAF_NODE	2467:5	2467:5	11	->
LEAF_NODE	2467:7	2467:7	11	photometric
EQ_OPERATOR	2467:19	2467:19	10	==
LEAF_NODE	2467:19	2467:19	11	==
FIELD	2467:22	2467:22	10	PHOTOMETRIC_MINISBLACK
LEAF_NODE	2467:22	2467:22	11	PHOTOMETRIC_MINISBLACK
LEAF_NODE	2467:45	2467:45	9	||
EXPR	2468:2	2468:22	9	img -> photometric == PHOTOMETRIC_MINISWHITE
FIELD	2468:2	2468:7	10	img -> photometric
LEAF_NODE	2468:2	2468:2	11	img
LEAF_NODE	2468:5	2468:5	11	->
LEAF_NODE	2468:7	2468:7	11	photometric
EQ_OPERATOR	2468:19	2468:19	10	==
LEAF_NODE	2468:19	2468:19	11	==
FIELD	2468:22	2468:22	10	PHOTOMETRIC_MINISWHITE
LEAF_NODE	2468:22	2468:22	11	PHOTOMETRIC_MINISWHITE
LEAF_NODE	2468:44	2468:44	8	)
LEAF_NODE	2468:45	2468:45	4	)
STATEMENTS	2468:47	2478:4	4	
LEAF_NODE	2468:47	2468:47	5	{
STATEMENTS	2473:1	2477:1	5	
SELECTION	2473:1	2474:5	6	
KEYWORD	2473:1	2473:1	7	if
LEAF_NODE	2473:1	2473:1	8	if
LEAF_NODE	2473:4	2473:4	7	(
CONDITION	2473:5	2473:5	7	! makebwmap ( img )
EXPR	2473:5	2473:5	8	! makebwmap ( img )
UNARY_EXPR	2473:5	2473:6	9	! makebwmap ( img )
UNARY_OPERATOR	2473:5	2473:5	10	!
LEAF_NODE	2473:5	2473:5	11	!
FUNCTION_CALL	2473:6	2473:19	10	makebwmap ( img )
CALLEE	2473:6	2473:6	11	makebwmap
LEAF_NODE	2473:6	2473:6	12	makebwmap
LEAF_NODE	2473:15	2473:15	11	(
ARGUMENT	2473:16	2473:16	11	img
FIELD	2473:16	2473:16	12	img
LEAF_NODE	2473:16	2473:16	13	img
LEAF_NODE	2473:19	2473:19	11	)
LEAF_NODE	2473:20	2473:20	7	)
STATEMENTS	2474:5	2474:5	7	
JUMP_STATEMENT	2474:5	2474:15	8	return ( 0 ) ;
KEYWORD	2474:5	2474:5	9	return
LEAF_NODE	2474:5	2474:5	10	return
DESTINATION	2474:12	2474:12	9	( 0 )
EXPR	2474:12	2474:14	10	( 0 )
LEAF_NODE	2474:12	2474:12	11	(
FIELD	2474:13	2474:13	11	0
LEAF_NODE	2474:13	2474:13	12	0
LEAF_NODE	2474:14	2474:14	11	)
LEAF_NODE	2474:15	2474:15	9	;
EXPR_STATEMENT	2476:1	2476:20	6	_TIFFfree ( img -> Map ) ;
EXPR	2476:1	2476:1	7	_TIFFfree ( img -> Map )
FUNCTION_CALL	2476:1	2476:19	8	_TIFFfree ( img -> Map )
CALLEE	2476:1	2476:1	9	_TIFFfree
LEAF_NODE	2476:1	2476:1	10	_TIFFfree
LEAF_NODE	2476:10	2476:10	9	(
ARGUMENT	2476:11	2476:11	9	img -> Map
FIELD	2476:11	2476:16	10	img -> Map
LEAF_NODE	2476:11	2476:11	11	img
LEAF_NODE	2476:14	2476:14	11	->
LEAF_NODE	2476:16	2476:16	11	Map
LEAF_NODE	2476:19	2476:19	9	)
LEAF_NODE	2476:20	2476:20	7	;
EXPR_STATEMENT	2477:1	2477:16	6	img -> Map = NULL ;
EXPR	2477:1	2477:1	7	img -> Map = NULL
ASSIGN	2477:1	2477:12	8	img -> Map = NULL
LVAL	2477:1	2477:1	9	img -> Map
FIELD	2477:1	2477:6	10	img -> Map
LEAF_NODE	2477:1	2477:1	11	img
LEAF_NODE	2477:4	2477:4	11	->
LEAF_NODE	2477:6	2477:6	11	Map
ASSIGN_OP	2477:10	2477:10	9	=
LEAF_NODE	2477:10	2477:10	10	=
RVAL	2477:12	2477:12	9	NULL
FIELD	2477:12	2477:12	10	NULL
LEAF_NODE	2477:12	2477:12	11	NULL
LEAF_NODE	2477:16	2477:16	7	;
LEAF_NODE	2478:4	2478:4	5	}
JUMP_STATEMENT	2479:4	2479:14	3	return ( 1 ) ;
KEYWORD	2479:4	2479:4	4	return
LEAF_NODE	2479:4	2479:4	5	return
DESTINATION	2479:11	2479:11	4	( 1 )
EXPR	2479:11	2479:13	5	( 1 )
LEAF_NODE	2479:11	2479:11	6	(
FIELD	2479:12	2479:12	6	1
LEAF_NODE	2479:12	2479:12	7	1
LEAF_NODE	2479:13	2479:13	6	)
LEAF_NODE	2479:14	2479:14	4	;
LEAF_NODE	2480:0	2480:0	2	}
FUNCTION_DEF	2482:0	2494:0	1	
RETURN_TYPE	2482:0	2482:7	2	static int
LEAF_NODE	2482:0	2482:0	3	static
TYPE_NAME	2482:7	2482:7	3	int
LEAF_NODE	2482:7	2482:7	4	int
FUNCTION_NAME	2483:0	2483:0	2	checkcmap
LEAF_NODE	2483:0	2483:0	3	checkcmap
PARAMETER_LIST	2483:9	2483:28	2	( TIFFRGBAImage * img )
LEAF_NODE	2483:9	2483:9	3	(
PARAMETER_DECL	2483:10	2483:25	3	TIFFRGBAImage * img
TYPE	2483:10	2483:23	4	TIFFRGBAImage *
TYPE_NAME	2483:10	2483:10	5	TIFFRGBAImage
LEAF_NODE	2483:10	2483:10	6	TIFFRGBAImage
POINTER	2483:23	2483:23	5	*
LEAF_NODE	2483:23	2483:23	6	*
NAME	2483:25	2483:25	4	img
LEAF_NODE	2483:25	2483:25	5	img
LEAF_NODE	2483:28	2483:28	3	)
LEAF_NODE	2484:0	2484:0	2	{
STATEMENTS	2485:4	2493:4	2	
SIMPLE_DECL	2485:4	2485:28	3	uint16 * r ; r = img -> redcmap ;
VAR_DECL	2485:4	2485:12	4	uint16 * r ; r = img -> redcmap
TYPE	2485:4	2485:10	5	uint16 *
TYPE_NAME	2485:4	2485:4	6	uint16
LEAF_NODE	2485:4	2485:4	7	uint16
POINTER	2485:10	2485:10	6	*
LEAF_NODE	2485:10	2485:10	7	*
NAME	2485:12	2485:12	5	r
LEAF_NODE	2485:12	2485:12	6	r
LEAF_NODE	0:0	0:0	5	;
INIT	2485:12	2485:12	5	r = img -> redcmap
ASSIGN	2485:12	2485:16	6	r = img -> redcmap
LVAL	2485:12	2485:12	7	r
NAME	2485:12	2485:12	8	r
LEAF_NODE	2485:12	2485:12	9	r
ASSIGN_OP	2485:14	2485:14	7	=
LEAF_NODE	2485:14	2485:14	8	=
RVAL	2485:16	2485:16	7	img -> redcmap
FIELD	2485:16	2485:21	8	img -> redcmap
LEAF_NODE	2485:16	2485:16	9	img
LEAF_NODE	2485:19	2485:19	9	->
LEAF_NODE	2485:21	2485:21	9	redcmap
LEAF_NODE	2485:28	2485:28	4	;
SIMPLE_DECL	2486:4	2486:30	3	uint16 * g ; g = img -> greencmap ;
VAR_DECL	2486:4	2486:12	4	uint16 * g ; g = img -> greencmap
TYPE	2486:4	2486:10	5	uint16 *
TYPE_NAME	2486:4	2486:4	6	uint16
LEAF_NODE	2486:4	2486:4	7	uint16
POINTER	2486:10	2486:10	6	*
LEAF_NODE	2486:10	2486:10	7	*
NAME	2486:12	2486:12	5	g
LEAF_NODE	2486:12	2486:12	6	g
LEAF_NODE	0:0	0:0	5	;
INIT	2486:12	2486:12	5	g = img -> greencmap
ASSIGN	2486:12	2486:16	6	g = img -> greencmap
LVAL	2486:12	2486:12	7	g
NAME	2486:12	2486:12	8	g
LEAF_NODE	2486:12	2486:12	9	g
ASSIGN_OP	2486:14	2486:14	7	=
LEAF_NODE	2486:14	2486:14	8	=
RVAL	2486:16	2486:16	7	img -> greencmap
FIELD	2486:16	2486:21	8	img -> greencmap
LEAF_NODE	2486:16	2486:16	9	img
LEAF_NODE	2486:19	2486:19	9	->
LEAF_NODE	2486:21	2486:21	9	greencmap
LEAF_NODE	2486:30	2486:30	4	;
SIMPLE_DECL	2487:4	2487:29	3	uint16 * b ; b = img -> bluecmap ;
VAR_DECL	2487:4	2487:12	4	uint16 * b ; b = img -> bluecmap
TYPE	2487:4	2487:10	5	uint16 *
TYPE_NAME	2487:4	2487:4	6	uint16
LEAF_NODE	2487:4	2487:4	7	uint16
POINTER	2487:10	2487:10	6	*
LEAF_NODE	2487:10	2487:10	7	*
NAME	2487:12	2487:12	5	b
LEAF_NODE	2487:12	2487:12	6	b
LEAF_NODE	0:0	0:0	5	;
INIT	2487:12	2487:12	5	b = img -> bluecmap
ASSIGN	2487:12	2487:16	6	b = img -> bluecmap
LVAL	2487:12	2487:12	7	b
NAME	2487:12	2487:12	8	b
LEAF_NODE	2487:12	2487:12	9	b
ASSIGN_OP	2487:14	2487:14	7	=
LEAF_NODE	2487:14	2487:14	8	=
RVAL	2487:16	2487:16	7	img -> bluecmap
FIELD	2487:16	2487:21	8	img -> bluecmap
LEAF_NODE	2487:16	2487:16	9	img
LEAF_NODE	2487:19	2487:19	9	->
LEAF_NODE	2487:21	2487:21	9	bluecmap
LEAF_NODE	2487:29	2487:29	4	;
SIMPLE_DECL	2488:4	2488:35	3	long n ; n = 1L << img -> bitspersample ;
VAR_DECL	2488:4	2488:9	4	long n ; n = 1L << img -> bitspersample
TYPE	2488:4	2488:4	5	long
TYPE_NAME	2488:4	2488:4	6	long
LEAF_NODE	2488:4	2488:4	7	long
NAME	2488:9	2488:9	5	n
LEAF_NODE	2488:9	2488:9	6	n
LEAF_NODE	0:0	0:0	5	;
INIT	2488:9	2488:9	5	n = 1L << img -> bitspersample
ASSIGN	2488:9	2488:13	6	n = 1L << img -> bitspersample
LVAL	2488:9	2488:9	7	n
NAME	2488:9	2488:9	8	n
LEAF_NODE	2488:9	2488:9	9	n
ASSIGN_OP	2488:11	2488:11	7	=
LEAF_NODE	2488:11	2488:11	8	=
RVAL	2488:13	2488:17	7	1L << img -> bitspersample
FIELD	2488:13	2488:13	8	1L
LEAF_NODE	2488:13	2488:13	9	1L
LEAF_NODE	2488:15	2488:15	8	<<
FIELD	2488:17	2488:22	8	img -> bitspersample
LEAF_NODE	2488:17	2488:17	9	img
LEAF_NODE	2488:20	2488:20	9	->
LEAF_NODE	2488:22	2488:22	9	bitspersample
LEAF_NODE	2488:35	2488:35	4	;
ITERATION	2490:4	2491:1	3	
KEYWORD	2490:4	2490:4	4	while
LEAF_NODE	2490:4	2490:4	5	while
LEAF_NODE	2490:10	2490:10	4	(
CONDITION	2490:11	2490:11	4	n -- > 0
EXPR	2490:11	2490:17	5	n -- > 0
FIELD	2490:11	2490:12	6	n --
LEAF_NODE	2490:11	2490:11	7	n
LEAF_NODE	2490:12	2490:12	7	--
REL_OPERATOR	2490:15	2490:15	6	>
LEAF_NODE	2490:15	2490:15	7	>
FIELD	2490:17	2490:17	6	0
LEAF_NODE	2490:17	2490:17	7	0
LEAF_NODE	2490:18	2490:18	4	)
STATEMENTS	2491:1	2491:1	4	
SELECTION	2491:1	2492:5	5	
KEYWORD	2491:1	2491:1	6	if
LEAF_NODE	2491:1	2491:1	7	if
LEAF_NODE	2491:4	2491:4	6	(
CONDITION	2491:5	2491:5	6	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
EXPR	2491:5	2491:5	7	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
OR	2491:5	2491:20	8	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
EXPR	2491:5	2491:13	9	* r ++ >= 256
UNARY_EXPR	2491:5	2491:6	10	* r ++
UNARY_OPERATOR	2491:5	2491:5	11	*
LEAF_NODE	2491:5	2491:5	12	*
FIELD	2491:6	2491:7	11	r ++
LEAF_NODE	2491:6	2491:6	12	r
LEAF_NODE	2491:7	2491:7	12	++
REL_OPERATOR	2491:10	2491:10	10	>=
LEAF_NODE	2491:10	2491:10	11	>=
FIELD	2491:13	2491:13	10	256
LEAF_NODE	2491:13	2491:13	11	256
LEAF_NODE	2491:17	2491:17	9	||
EXPR	2491:20	2491:20	9	* g ++ >= 256 || * b ++ >= 256
OR	2491:20	2491:35	10	* g ++ >= 256 || * b ++ >= 256
EXPR	2491:20	2491:28	11	* g ++ >= 256
UNARY_EXPR	2491:20	2491:21	12	* g ++
UNARY_OPERATOR	2491:20	2491:20	13	*
LEAF_NODE	2491:20	2491:20	14	*
FIELD	2491:21	2491:22	13	g ++
LEAF_NODE	2491:21	2491:21	14	g
LEAF_NODE	2491:22	2491:22	14	++
REL_OPERATOR	2491:25	2491:25	12	>=
LEAF_NODE	2491:25	2491:25	13	>=
FIELD	2491:28	2491:28	12	256
LEAF_NODE	2491:28	2491:28	13	256
LEAF_NODE	2491:32	2491:32	11	||
EXPR	2491:35	2491:43	11	* b ++ >= 256
UNARY_EXPR	2491:35	2491:36	12	* b ++
UNARY_OPERATOR	2491:35	2491:35	13	*
LEAF_NODE	2491:35	2491:35	14	*
FIELD	2491:36	2491:37	13	b ++
LEAF_NODE	2491:36	2491:36	14	b
LEAF_NODE	2491:37	2491:37	14	++
REL_OPERATOR	2491:40	2491:40	12	>=
LEAF_NODE	2491:40	2491:40	13	>=
FIELD	2491:43	2491:43	12	256
LEAF_NODE	2491:43	2491:43	13	256
LEAF_NODE	2491:46	2491:46	6	)
STATEMENTS	2492:5	2492:5	6	
JUMP_STATEMENT	2492:5	2492:16	7	return ( 16 ) ;
KEYWORD	2492:5	2492:5	8	return
LEAF_NODE	2492:5	2492:5	9	return
DESTINATION	2492:12	2492:12	8	( 16 )
EXPR	2492:12	2492:15	9	( 16 )
LEAF_NODE	2492:12	2492:12	10	(
FIELD	2492:13	2492:13	10	16
LEAF_NODE	2492:13	2492:13	11	16
LEAF_NODE	2492:15	2492:15	10	)
LEAF_NODE	2492:16	2492:16	8	;
JUMP_STATEMENT	2493:4	2493:14	3	return ( 8 ) ;
KEYWORD	2493:4	2493:4	4	return
LEAF_NODE	2493:4	2493:4	5	return
DESTINATION	2493:11	2493:11	4	( 8 )
EXPR	2493:11	2493:13	5	( 8 )
LEAF_NODE	2493:11	2493:11	6	(
FIELD	2493:12	2493:12	6	8
LEAF_NODE	2493:12	2493:12	7	8
LEAF_NODE	2493:13	2493:13	6	)
LEAF_NODE	2493:14	2493:14	4	;
LEAF_NODE	2494:0	2494:0	2	}
FUNCTION_DEF	2496:0	2511:0	1	
RETURN_TYPE	2496:0	2496:7	2	static void
LEAF_NODE	2496:0	2496:0	3	static
TYPE_NAME	2496:7	2496:7	3	void
LEAF_NODE	2496:7	2496:7	4	void
FUNCTION_NAME	2497:0	2497:0	2	cvtcmap
LEAF_NODE	2497:0	2497:0	3	cvtcmap
PARAMETER_LIST	2497:7	2497:26	2	( TIFFRGBAImage * img )
LEAF_NODE	2497:7	2497:7	3	(
PARAMETER_DECL	2497:8	2497:23	3	TIFFRGBAImage * img
TYPE	2497:8	2497:21	4	TIFFRGBAImage *
TYPE_NAME	2497:8	2497:8	5	TIFFRGBAImage
LEAF_NODE	2497:8	2497:8	6	TIFFRGBAImage
POINTER	2497:21	2497:21	5	*
LEAF_NODE	2497:21	2497:21	6	*
NAME	2497:23	2497:23	4	img
LEAF_NODE	2497:23	2497:23	5	img
LEAF_NODE	2497:26	2497:26	3	)
LEAF_NODE	2498:0	2498:0	2	{
STATEMENTS	2499:4	2504:4	2	
SIMPLE_DECL	2499:4	2499:28	3	uint16 * r ; r = img -> redcmap ;
VAR_DECL	2499:4	2499:12	4	uint16 * r ; r = img -> redcmap
TYPE	2499:4	2499:10	5	uint16 *
TYPE_NAME	2499:4	2499:4	6	uint16
LEAF_NODE	2499:4	2499:4	7	uint16
POINTER	2499:10	2499:10	6	*
LEAF_NODE	2499:10	2499:10	7	*
NAME	2499:12	2499:12	5	r
LEAF_NODE	2499:12	2499:12	6	r
LEAF_NODE	0:0	0:0	5	;
INIT	2499:12	2499:12	5	r = img -> redcmap
ASSIGN	2499:12	2499:16	6	r = img -> redcmap
LVAL	2499:12	2499:12	7	r
NAME	2499:12	2499:12	8	r
LEAF_NODE	2499:12	2499:12	9	r
ASSIGN_OP	2499:14	2499:14	7	=
LEAF_NODE	2499:14	2499:14	8	=
RVAL	2499:16	2499:16	7	img -> redcmap
FIELD	2499:16	2499:21	8	img -> redcmap
LEAF_NODE	2499:16	2499:16	9	img
LEAF_NODE	2499:19	2499:19	9	->
LEAF_NODE	2499:21	2499:21	9	redcmap
LEAF_NODE	2499:28	2499:28	4	;
SIMPLE_DECL	2500:4	2500:30	3	uint16 * g ; g = img -> greencmap ;
VAR_DECL	2500:4	2500:12	4	uint16 * g ; g = img -> greencmap
TYPE	2500:4	2500:10	5	uint16 *
TYPE_NAME	2500:4	2500:4	6	uint16
LEAF_NODE	2500:4	2500:4	7	uint16
POINTER	2500:10	2500:10	6	*
LEAF_NODE	2500:10	2500:10	7	*
NAME	2500:12	2500:12	5	g
LEAF_NODE	2500:12	2500:12	6	g
LEAF_NODE	0:0	0:0	5	;
INIT	2500:12	2500:12	5	g = img -> greencmap
ASSIGN	2500:12	2500:16	6	g = img -> greencmap
LVAL	2500:12	2500:12	7	g
NAME	2500:12	2500:12	8	g
LEAF_NODE	2500:12	2500:12	9	g
ASSIGN_OP	2500:14	2500:14	7	=
LEAF_NODE	2500:14	2500:14	8	=
RVAL	2500:16	2500:16	7	img -> greencmap
FIELD	2500:16	2500:21	8	img -> greencmap
LEAF_NODE	2500:16	2500:16	9	img
LEAF_NODE	2500:19	2500:19	9	->
LEAF_NODE	2500:21	2500:21	9	greencmap
LEAF_NODE	2500:30	2500:30	4	;
SIMPLE_DECL	2501:4	2501:29	3	uint16 * b ; b = img -> bluecmap ;
VAR_DECL	2501:4	2501:12	4	uint16 * b ; b = img -> bluecmap
TYPE	2501:4	2501:10	5	uint16 *
TYPE_NAME	2501:4	2501:4	6	uint16
LEAF_NODE	2501:4	2501:4	7	uint16
POINTER	2501:10	2501:10	6	*
LEAF_NODE	2501:10	2501:10	7	*
NAME	2501:12	2501:12	5	b
LEAF_NODE	2501:12	2501:12	6	b
LEAF_NODE	0:0	0:0	5	;
INIT	2501:12	2501:12	5	b = img -> bluecmap
ASSIGN	2501:12	2501:16	6	b = img -> bluecmap
LVAL	2501:12	2501:12	7	b
NAME	2501:12	2501:12	8	b
LEAF_NODE	2501:12	2501:12	9	b
ASSIGN_OP	2501:14	2501:14	7	=
LEAF_NODE	2501:14	2501:14	8	=
RVAL	2501:16	2501:16	7	img -> bluecmap
FIELD	2501:16	2501:21	8	img -> bluecmap
LEAF_NODE	2501:16	2501:16	9	img
LEAF_NODE	2501:19	2501:19	9	->
LEAF_NODE	2501:21	2501:21	9	bluecmap
LEAF_NODE	2501:29	2501:29	4	;
SIMPLE_DECL	2502:4	2502:10	3	long i ;
VAR_DECL	2502:4	2502:9	4	long i
TYPE	2502:4	2502:4	5	long
TYPE_NAME	2502:4	2502:4	6	long
LEAF_NODE	2502:4	2502:4	7	long
NAME	2502:9	2502:9	5	i
LEAF_NODE	2502:9	2502:9	6	i
LEAF_NODE	2502:10	2502:10	4	;
ITERATION	2504:4	2504:54	3	
KEYWORD	2504:4	2504:4	4	for
LEAF_NODE	2504:4	2504:4	5	for
LEAF_NODE	2504:8	2504:8	4	(
FOR_INIT	2504:9	2504:39	4	i = ( 1L << img -> bitspersample ) - 1 ;
EXPR	2504:9	2504:9	5	i = ( 1L << img -> bitspersample ) - 1
ASSIGN	2504:9	2504:13	6	i = ( 1L << img -> bitspersample ) - 1
LVAL	2504:9	2504:9	7	i
FIELD	2504:9	2504:9	8	i
LEAF_NODE	2504:9	2504:9	9	i
ASSIGN_OP	2504:11	2504:11	7	=
LEAF_NODE	2504:11	2504:11	8	=
RVAL	2504:13	2504:38	7	( 1L << img -> bitspersample ) - 1
LEAF_NODE	2504:13	2504:13	8	(
FIELD	2504:14	2504:14	8	1L
LEAF_NODE	2504:14	2504:14	9	1L
LEAF_NODE	2504:16	2504:16	8	<<
FIELD	2504:18	2504:23	8	img -> bitspersample
LEAF_NODE	2504:18	2504:18	9	img
LEAF_NODE	2504:21	2504:21	9	->
LEAF_NODE	2504:23	2504:23	9	bitspersample
LEAF_NODE	2504:36	2504:36	8	)
LEAF_NODE	2504:37	2504:37	8	-
FIELD	2504:38	2504:38	8	1
LEAF_NODE	2504:38	2504:38	9	1
LEAF_NODE	2504:39	2504:39	5	;
CONDITION	2504:41	2504:41	4	i >= 0
EXPR	2504:41	2504:46	5	i >= 0
FIELD	2504:41	2504:41	6	i
LEAF_NODE	2504:41	2504:41	7	i
REL_OPERATOR	2504:43	2504:43	6	>=
LEAF_NODE	2504:43	2504:43	7	>=
FIELD	2504:46	2504:46	6	0
LEAF_NODE	2504:46	2504:46	7	0
LEAF_NODE	2504:47	2504:47	4	;
FOR_EXPR	2504:49	2504:49	4	i --
EXPR	2504:49	2504:49	5	i --
FIELD	2504:49	2504:50	6	i --
LEAF_NODE	2504:49	2504:49	7	i
LEAF_NODE	2504:50	2504:50	7	--
LEAF_NODE	2504:52	2504:52	4	)
STATEMENTS	2504:54	2510:4	4	
LEAF_NODE	2504:54	2504:54	5	{
STATEMENTS	2506:1	2508:1	5	
EXPR_STATEMENT	2506:1	2506:17	6	r [ i ] = CVT ( r [ i ] ) ;
EXPR	2506:1	2506:1	7	r [ i ] = CVT ( r [ i ] )
ASSIGN	2506:1	2506:8	8	r [ i ] = CVT ( r [ i ] )
LVAL	2506:1	2506:1	9	r [ i ]
FIELD	2506:1	2506:4	10	r [ i ]
LEAF_NODE	2506:1	2506:1	11	r
LEAF_NODE	2506:2	2506:2	11	[
EXPR	2506:3	2506:3	11	i
FIELD	2506:3	2506:3	12	i
LEAF_NODE	2506:3	2506:3	13	i
LEAF_NODE	2506:4	2506:4	11	]
ASSIGN_OP	2506:6	2506:6	9	=
LEAF_NODE	2506:6	2506:6	10	=
RVAL	2506:8	2506:8	9	CVT ( r [ i ] )
FUNCTION_CALL	2506:8	2506:16	10	CVT ( r [ i ] )
CALLEE	2506:8	2506:8	11	CVT
LEAF_NODE	2506:8	2506:8	12	CVT
LEAF_NODE	2506:11	2506:11	11	(
ARGUMENT	2506:12	2506:12	11	r [ i ]
FIELD	2506:12	2506:15	12	r [ i ]
LEAF_NODE	2506:12	2506:12	13	r
LEAF_NODE	2506:13	2506:13	13	[
EXPR	2506:14	2506:14	13	i
FIELD	2506:14	2506:14	14	i
LEAF_NODE	2506:14	2506:14	15	i
LEAF_NODE	2506:15	2506:15	13	]
LEAF_NODE	2506:16	2506:16	11	)
LEAF_NODE	2506:17	2506:17	7	;
EXPR_STATEMENT	2507:1	2507:17	6	g [ i ] = CVT ( g [ i ] ) ;
EXPR	2507:1	2507:1	7	g [ i ] = CVT ( g [ i ] )
ASSIGN	2507:1	2507:8	8	g [ i ] = CVT ( g [ i ] )
LVAL	2507:1	2507:1	9	g [ i ]
FIELD	2507:1	2507:4	10	g [ i ]
LEAF_NODE	2507:1	2507:1	11	g
LEAF_NODE	2507:2	2507:2	11	[
EXPR	2507:3	2507:3	11	i
FIELD	2507:3	2507:3	12	i
LEAF_NODE	2507:3	2507:3	13	i
LEAF_NODE	2507:4	2507:4	11	]
ASSIGN_OP	2507:6	2507:6	9	=
LEAF_NODE	2507:6	2507:6	10	=
RVAL	2507:8	2507:8	9	CVT ( g [ i ] )
FUNCTION_CALL	2507:8	2507:16	10	CVT ( g [ i ] )
CALLEE	2507:8	2507:8	11	CVT
LEAF_NODE	2507:8	2507:8	12	CVT
LEAF_NODE	2507:11	2507:11	11	(
ARGUMENT	2507:12	2507:12	11	g [ i ]
FIELD	2507:12	2507:15	12	g [ i ]
LEAF_NODE	2507:12	2507:12	13	g
LEAF_NODE	2507:13	2507:13	13	[
EXPR	2507:14	2507:14	13	i
FIELD	2507:14	2507:14	14	i
LEAF_NODE	2507:14	2507:14	15	i
LEAF_NODE	2507:15	2507:15	13	]
LEAF_NODE	2507:16	2507:16	11	)
LEAF_NODE	2507:17	2507:17	7	;
EXPR_STATEMENT	2508:1	2508:17	6	b [ i ] = CVT ( b [ i ] ) ;
EXPR	2508:1	2508:1	7	b [ i ] = CVT ( b [ i ] )
ASSIGN	2508:1	2508:8	8	b [ i ] = CVT ( b [ i ] )
LVAL	2508:1	2508:1	9	b [ i ]
FIELD	2508:1	2508:4	10	b [ i ]
LEAF_NODE	2508:1	2508:1	11	b
LEAF_NODE	2508:2	2508:2	11	[
EXPR	2508:3	2508:3	11	i
FIELD	2508:3	2508:3	12	i
LEAF_NODE	2508:3	2508:3	13	i
LEAF_NODE	2508:4	2508:4	11	]
ASSIGN_OP	2508:6	2508:6	9	=
LEAF_NODE	2508:6	2508:6	10	=
RVAL	2508:8	2508:8	9	CVT ( b [ i ] )
FUNCTION_CALL	2508:8	2508:16	10	CVT ( b [ i ] )
CALLEE	2508:8	2508:8	11	CVT
LEAF_NODE	2508:8	2508:8	12	CVT
LEAF_NODE	2508:11	2508:11	11	(
ARGUMENT	2508:12	2508:12	11	b [ i ]
FIELD	2508:12	2508:15	12	b [ i ]
LEAF_NODE	2508:12	2508:12	13	b
LEAF_NODE	2508:13	2508:13	13	[
EXPR	2508:14	2508:14	13	i
FIELD	2508:14	2508:14	14	i
LEAF_NODE	2508:14	2508:14	15	i
LEAF_NODE	2508:15	2508:15	13	]
LEAF_NODE	2508:16	2508:16	11	)
LEAF_NODE	2508:17	2508:17	7	;
LEAF_NODE	2510:4	2510:4	5	}
LEAF_NODE	2511:0	2511:0	2	}
FUNCTION_DEF	2520:0	2570:0	1	
RETURN_TYPE	2520:0	2520:7	2	static int
LEAF_NODE	2520:0	2520:0	3	static
TYPE_NAME	2520:7	2520:7	3	int
LEAF_NODE	2520:7	2520:7	4	int
FUNCTION_NAME	2521:0	2521:0	2	makecmap
LEAF_NODE	2521:0	2521:0	3	makecmap
PARAMETER_LIST	2521:8	2521:27	2	( TIFFRGBAImage * img )
LEAF_NODE	2521:8	2521:8	3	(
PARAMETER_DECL	2521:9	2521:24	3	TIFFRGBAImage * img
TYPE	2521:9	2521:22	4	TIFFRGBAImage *
TYPE_NAME	2521:9	2521:9	5	TIFFRGBAImage
LEAF_NODE	2521:9	2521:9	6	TIFFRGBAImage
POINTER	2521:22	2521:22	5	*
LEAF_NODE	2521:22	2521:22	6	*
NAME	2521:24	2521:24	4	img
LEAF_NODE	2521:24	2521:24	5	img
LEAF_NODE	2521:27	2521:27	3	)
LEAF_NODE	2522:0	2522:0	2	{
STATEMENTS	2523:4	2569:4	2	
SIMPLE_DECL	2523:4	2523:42	3	int bitspersample ; bitspersample = img -> bitspersample ;
VAR_DECL	2523:4	2523:8	4	int bitspersample ; bitspersample = img -> bitspersample
TYPE	2523:4	2523:4	5	int
TYPE_NAME	2523:4	2523:4	6	int
LEAF_NODE	2523:4	2523:4	7	int
NAME	2523:8	2523:8	5	bitspersample
LEAF_NODE	2523:8	2523:8	6	bitspersample
LEAF_NODE	0:0	0:0	5	;
INIT	2523:8	2523:8	5	bitspersample = img -> bitspersample
ASSIGN	2523:8	2523:24	6	bitspersample = img -> bitspersample
LVAL	2523:8	2523:8	7	bitspersample
NAME	2523:8	2523:8	8	bitspersample
LEAF_NODE	2523:8	2523:8	9	bitspersample
ASSIGN_OP	2523:22	2523:22	7	=
LEAF_NODE	2523:22	2523:22	8	=
RVAL	2523:24	2523:24	7	img -> bitspersample
FIELD	2523:24	2523:29	8	img -> bitspersample
LEAF_NODE	2523:24	2523:24	9	img
LEAF_NODE	2523:27	2523:27	9	->
LEAF_NODE	2523:29	2523:29	9	bitspersample
LEAF_NODE	2523:42	2523:42	4	;
SIMPLE_DECL	2524:4	2524:36	3	int nsamples ; nsamples = 8 / bitspersample ;
VAR_DECL	2524:4	2524:8	4	int nsamples ; nsamples = 8 / bitspersample
TYPE	2524:4	2524:4	5	int
TYPE_NAME	2524:4	2524:4	6	int
LEAF_NODE	2524:4	2524:4	7	int
NAME	2524:8	2524:8	5	nsamples
LEAF_NODE	2524:8	2524:8	6	nsamples
LEAF_NODE	0:0	0:0	5	;
INIT	2524:8	2524:8	5	nsamples = 8 / bitspersample
ASSIGN	2524:8	2524:19	6	nsamples = 8 / bitspersample
LVAL	2524:8	2524:8	7	nsamples
NAME	2524:8	2524:8	8	nsamples
LEAF_NODE	2524:8	2524:8	9	nsamples
ASSIGN_OP	2524:17	2524:17	7	=
LEAF_NODE	2524:17	2524:17	8	=
RVAL	2524:19	2524:23	7	8 / bitspersample
FIELD	2524:19	2524:19	8	8
LEAF_NODE	2524:19	2524:19	9	8
LEAF_NODE	2524:21	2524:21	8	/
FIELD	2524:23	2524:23	8	bitspersample
LEAF_NODE	2524:23	2524:23	9	bitspersample
LEAF_NODE	2524:36	2524:36	4	;
SIMPLE_DECL	2525:4	2525:28	3	uint16 * r ; r = img -> redcmap ;
VAR_DECL	2525:4	2525:12	4	uint16 * r ; r = img -> redcmap
TYPE	2525:4	2525:10	5	uint16 *
TYPE_NAME	2525:4	2525:4	6	uint16
LEAF_NODE	2525:4	2525:4	7	uint16
POINTER	2525:10	2525:10	6	*
LEAF_NODE	2525:10	2525:10	7	*
NAME	2525:12	2525:12	5	r
LEAF_NODE	2525:12	2525:12	6	r
LEAF_NODE	0:0	0:0	5	;
INIT	2525:12	2525:12	5	r = img -> redcmap
ASSIGN	2525:12	2525:16	6	r = img -> redcmap
LVAL	2525:12	2525:12	7	r
NAME	2525:12	2525:12	8	r
LEAF_NODE	2525:12	2525:12	9	r
ASSIGN_OP	2525:14	2525:14	7	=
LEAF_NODE	2525:14	2525:14	8	=
RVAL	2525:16	2525:16	7	img -> redcmap
FIELD	2525:16	2525:21	8	img -> redcmap
LEAF_NODE	2525:16	2525:16	9	img
LEAF_NODE	2525:19	2525:19	9	->
LEAF_NODE	2525:21	2525:21	9	redcmap
LEAF_NODE	2525:28	2525:28	4	;
SIMPLE_DECL	2526:4	2526:30	3	uint16 * g ; g = img -> greencmap ;
VAR_DECL	2526:4	2526:12	4	uint16 * g ; g = img -> greencmap
TYPE	2526:4	2526:10	5	uint16 *
TYPE_NAME	2526:4	2526:4	6	uint16
LEAF_NODE	2526:4	2526:4	7	uint16
POINTER	2526:10	2526:10	6	*
LEAF_NODE	2526:10	2526:10	7	*
NAME	2526:12	2526:12	5	g
LEAF_NODE	2526:12	2526:12	6	g
LEAF_NODE	0:0	0:0	5	;
INIT	2526:12	2526:12	5	g = img -> greencmap
ASSIGN	2526:12	2526:16	6	g = img -> greencmap
LVAL	2526:12	2526:12	7	g
NAME	2526:12	2526:12	8	g
LEAF_NODE	2526:12	2526:12	9	g
ASSIGN_OP	2526:14	2526:14	7	=
LEAF_NODE	2526:14	2526:14	8	=
RVAL	2526:16	2526:16	7	img -> greencmap
FIELD	2526:16	2526:21	8	img -> greencmap
LEAF_NODE	2526:16	2526:16	9	img
LEAF_NODE	2526:19	2526:19	9	->
LEAF_NODE	2526:21	2526:21	9	greencmap
LEAF_NODE	2526:30	2526:30	4	;
SIMPLE_DECL	2527:4	2527:29	3	uint16 * b ; b = img -> bluecmap ;
VAR_DECL	2527:4	2527:12	4	uint16 * b ; b = img -> bluecmap
TYPE	2527:4	2527:10	5	uint16 *
TYPE_NAME	2527:4	2527:4	6	uint16
LEAF_NODE	2527:4	2527:4	7	uint16
POINTER	2527:10	2527:10	6	*
LEAF_NODE	2527:10	2527:10	7	*
NAME	2527:12	2527:12	5	b
LEAF_NODE	2527:12	2527:12	6	b
LEAF_NODE	0:0	0:0	5	;
INIT	2527:12	2527:12	5	b = img -> bluecmap
ASSIGN	2527:12	2527:16	6	b = img -> bluecmap
LVAL	2527:12	2527:12	7	b
NAME	2527:12	2527:12	8	b
LEAF_NODE	2527:12	2527:12	9	b
ASSIGN_OP	2527:14	2527:14	7	=
LEAF_NODE	2527:14	2527:14	8	=
RVAL	2527:16	2527:16	7	img -> bluecmap
FIELD	2527:16	2527:21	8	img -> bluecmap
LEAF_NODE	2527:16	2527:16	9	img
LEAF_NODE	2527:19	2527:19	9	->
LEAF_NODE	2527:21	2527:21	9	bluecmap
LEAF_NODE	2527:29	2527:29	4	;
SIMPLE_DECL	2528:4	2528:13	3	uint32 * p ;
VAR_DECL	2528:4	2528:12	4	uint32 * p
TYPE	2528:4	2528:11	5	uint32 *
TYPE_NAME	2528:4	2528:4	6	uint32
LEAF_NODE	2528:4	2528:4	7	uint32
POINTER	2528:11	2528:11	6	*
LEAF_NODE	2528:11	2528:11	7	*
NAME	2528:12	2528:12	5	p
LEAF_NODE	2528:12	2528:12	6	p
LEAF_NODE	2528:13	2528:13	4	;
SIMPLE_DECL	2529:4	2529:9	3	int i ;
VAR_DECL	2529:4	2529:8	4	int i
TYPE	2529:4	2529:4	5	int
TYPE_NAME	2529:4	2529:4	6	int
LEAF_NODE	2529:4	2529:4	7	int
NAME	2529:8	2529:8	5	i
LEAF_NODE	2529:8	2529:8	6	i
LEAF_NODE	2529:9	2529:9	4	;
LEAF_NODE	2531:4	2531:4	3	img
LEAF_NODE	2531:7	2531:7	3	->
LEAF_NODE	2531:9	2531:9	3	PALmap
LEAF_NODE	2531:16	2531:16	3	=
LEAF_NODE	2531:18	2531:18	3	(
LEAF_NODE	2531:19	2531:19	3	uint32
LEAF_NODE	2531:25	2531:25	3	*
LEAF_NODE	2531:26	2531:26	3	*
LEAF_NODE	2531:27	2531:27	3	)
LEAF_NODE	2531:29	2531:29	3	_TIFFmalloc
LEAF_NODE	2531:40	2531:40	3	(
LEAF_NODE	2532:1	2532:1	3	256
LEAF_NODE	2532:4	2532:4	3	*
LEAF_NODE	2532:5	2532:5	3	sizeof
LEAF_NODE	2532:12	2532:12	3	(
LEAF_NODE	2532:13	2532:13	3	uint32
LEAF_NODE	2532:20	2532:20	3	*
LEAF_NODE	2532:21	2532:21	3	)
LEAF_NODE	2532:22	2532:22	3	+
LEAF_NODE	2532:23	2532:23	3	(
LEAF_NODE	2532:24	2532:24	3	256
LEAF_NODE	2532:27	2532:27	3	*
LEAF_NODE	2532:28	2532:28	3	nsamples
LEAF_NODE	2532:36	2532:36	3	*
LEAF_NODE	2532:37	2532:37	3	sizeof
LEAF_NODE	2532:43	2532:43	3	(
LEAF_NODE	2532:44	2532:44	3	uint32
LEAF_NODE	2532:50	2532:50	3	)
LEAF_NODE	2532:51	2532:51	3	)
LEAF_NODE	2532:52	2532:52	3	)
LEAF_NODE	2532:53	2532:53	3	;
SELECTION	2533:4	2533:29	3	
KEYWORD	2533:4	2533:4	4	if
LEAF_NODE	2533:4	2533:4	5	if
LEAF_NODE	2533:7	2533:7	4	(
CONDITION	2533:8	2533:8	4	img -> PALmap == NULL
EXPR	2533:8	2533:23	5	img -> PALmap == NULL
FIELD	2533:8	2533:13	6	img -> PALmap
LEAF_NODE	2533:8	2533:8	7	img
LEAF_NODE	2533:11	2533:11	7	->
LEAF_NODE	2533:13	2533:13	7	PALmap
EQ_OPERATOR	2533:20	2533:20	6	==
LEAF_NODE	2533:20	2533:20	7	==
FIELD	2533:23	2533:23	6	NULL
LEAF_NODE	2533:23	2533:23	7	NULL
LEAF_NODE	2533:27	2533:27	4	)
STATEMENTS	2533:29	2536:1	4	
LEAF_NODE	2533:29	2533:29	5	{
STATEMENTS	2534:2	2535:2	5	
EXPR_STATEMENT	2534:2	2534:102	6	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No space for Palette mapping table" ) ;
EXPR	2534:2	2534:2	7	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No space for Palette mapping table" )
FUNCTION_CALL	2534:2	2534:101	8	TIFFErrorExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "No space for Palette mapping table" )
CALLEE	2534:2	2534:2	9	TIFFErrorExt
LEAF_NODE	2534:2	2534:2	10	TIFFErrorExt
LEAF_NODE	2534:14	2534:14	9	(
ARGUMENT	2534:15	2534:15	9	img -> tif -> tif_clientdata
FIELD	2534:15	2534:25	10	img -> tif -> tif_clientdata
LEAF_NODE	2534:15	2534:15	11	img
LEAF_NODE	2534:18	2534:18	11	->
LEAF_NODE	2534:20	2534:20	11	tif
LEAF_NODE	2534:23	2534:23	11	->
LEAF_NODE	2534:25	2534:25	11	tif_clientdata
LEAF_NODE	2534:39	2534:39	9	,
ARGUMENT	2534:41	2534:41	9	TIFFFileName ( img -> tif )
FUNCTION_CALL	2534:41	2534:62	10	TIFFFileName ( img -> tif )
CALLEE	2534:41	2534:41	11	TIFFFileName
LEAF_NODE	2534:41	2534:41	12	TIFFFileName
LEAF_NODE	2534:53	2534:53	11	(
ARGUMENT	2534:54	2534:54	11	img -> tif
FIELD	2534:54	2534:59	12	img -> tif
LEAF_NODE	2534:54	2534:54	13	img
LEAF_NODE	2534:57	2534:57	13	->
LEAF_NODE	2534:59	2534:59	13	tif
LEAF_NODE	2534:62	2534:62	11	)
LEAF_NODE	2534:63	2534:63	9	,
ARGUMENT	2534:65	2534:65	9	"No space for Palette mapping table"
FIELD	2534:65	2534:65	10	"No space for Palette mapping table"
LEAF_NODE	2534:65	2534:65	11	"No space for Palette mapping table"
LEAF_NODE	2534:101	2534:101	9	)
LEAF_NODE	2534:102	2534:102	7	;
JUMP_STATEMENT	2535:2	2535:12	6	return ( 0 ) ;
KEYWORD	2535:2	2535:2	7	return
LEAF_NODE	2535:2	2535:2	8	return
DESTINATION	2535:9	2535:9	7	( 0 )
EXPR	2535:9	2535:11	8	( 0 )
LEAF_NODE	2535:9	2535:9	9	(
FIELD	2535:10	2535:10	9	0
LEAF_NODE	2535:10	2535:10	10	0
LEAF_NODE	2535:11	2535:11	9	)
LEAF_NODE	2535:12	2535:12	7	;
LEAF_NODE	2536:1	2536:1	5	}
EXPR_STATEMENT	2537:4	2537:36	3	p = ( uint32 * ) ( img -> PALmap + 256 ) ;
EXPR	2537:4	2537:4	4	p = ( uint32 * ) ( img -> PALmap + 256 )
ASSIGN	2537:4	2537:8	5	p = ( uint32 * ) ( img -> PALmap + 256 )
LVAL	2537:4	2537:4	6	p
FIELD	2537:4	2537:4	7	p
LEAF_NODE	2537:4	2537:4	8	p
ASSIGN_OP	2537:6	2537:6	6	=
LEAF_NODE	2537:6	2537:6	7	=
RVAL	2537:8	2537:35	6	( uint32 * ) ( img -> PALmap + 256 )
LEAF_NODE	2537:8	2537:8	7	(
TYPE_NAME	2537:9	2537:9	7	uint32
LEAF_NODE	2537:9	2537:9	8	uint32
LEAF_NODE	2537:15	2537:15	7	*
LEAF_NODE	2537:16	2537:16	7	)
LEAF_NODE	2537:17	2537:17	7	(
FIELD	2537:18	2537:23	7	img -> PALmap
LEAF_NODE	2537:18	2537:18	8	img
LEAF_NODE	2537:21	2537:21	8	->
LEAF_NODE	2537:23	2537:23	8	PALmap
LEAF_NODE	2537:30	2537:30	7	+
FIELD	2537:32	2537:32	7	256
LEAF_NODE	2537:32	2537:32	8	256
LEAF_NODE	2537:35	2537:35	7	)
LEAF_NODE	2537:36	2537:36	4	;
ITERATION	2538:4	2538:30	3	
KEYWORD	2538:4	2538:4	4	for
LEAF_NODE	2538:4	2538:4	5	for
LEAF_NODE	2538:8	2538:8	4	(
FOR_INIT	2538:9	2538:14	4	i = 0 ;
EXPR	2538:9	2538:9	5	i = 0
ASSIGN	2538:9	2538:13	6	i = 0
LVAL	2538:9	2538:9	7	i
FIELD	2538:9	2538:9	8	i
LEAF_NODE	2538:9	2538:9	9	i
ASSIGN_OP	2538:11	2538:11	7	=
LEAF_NODE	2538:11	2538:11	8	=
RVAL	2538:13	2538:13	7	0
FIELD	2538:13	2538:13	8	0
LEAF_NODE	2538:13	2538:13	9	0
LEAF_NODE	2538:14	2538:14	5	;
CONDITION	2538:16	2538:16	4	i < 256
EXPR	2538:16	2538:20	5	i < 256
FIELD	2538:16	2538:16	6	i
LEAF_NODE	2538:16	2538:16	7	i
REL_OPERATOR	2538:18	2538:18	6	<
LEAF_NODE	2538:18	2538:18	7	<
FIELD	2538:20	2538:20	6	256
LEAF_NODE	2538:20	2538:20	7	256
LEAF_NODE	2538:23	2538:23	4	;
FOR_EXPR	2538:25	2538:25	4	i ++
EXPR	2538:25	2538:25	5	i ++
FIELD	2538:25	2538:26	6	i ++
LEAF_NODE	2538:25	2538:25	7	i
LEAF_NODE	2538:26	2538:26	7	++
LEAF_NODE	2538:28	2538:28	4	)
STATEMENTS	2538:30	2568:4	4	
LEAF_NODE	2538:30	2538:30	5	{
STATEMENTS	2539:1	2542:1	5	
SIMPLE_DECL	2539:1	2539:15	6	TIFFRGBValue c ;
VAR_DECL	2539:1	2539:14	7	TIFFRGBValue c
TYPE	2539:1	2539:1	8	TIFFRGBValue
TYPE_NAME	2539:1	2539:1	9	TIFFRGBValue
LEAF_NODE	2539:1	2539:1	10	TIFFRGBValue
NAME	2539:14	2539:14	8	c
LEAF_NODE	2539:14	2539:14	9	c
LEAF_NODE	2539:15	2539:15	7	;
EXPR_STATEMENT	2540:1	2540:19	6	img -> PALmap [ i ] = p ;
EXPR	2540:1	2540:1	7	img -> PALmap [ i ] = p
ASSIGN	2540:1	2540:18	8	img -> PALmap [ i ] = p
LVAL	2540:1	2540:1	9	img -> PALmap [ i ]
FIELD	2540:1	2540:14	10	img -> PALmap [ i ]
LEAF_NODE	2540:1	2540:1	11	img
LEAF_NODE	2540:4	2540:4	11	->
LEAF_NODE	2540:6	2540:6	11	PALmap
LEAF_NODE	2540:12	2540:12	11	[
EXPR	2540:13	2540:13	11	i
FIELD	2540:13	2540:13	12	i
LEAF_NODE	2540:13	2540:13	13	i
LEAF_NODE	2540:14	2540:14	11	]
ASSIGN_OP	2540:16	2540:16	9	=
LEAF_NODE	2540:16	2540:16	10	=
RVAL	2540:18	2540:18	9	p
FIELD	2540:18	2540:18	10	p
LEAF_NODE	2540:18	2540:18	11	p
LEAF_NODE	2540:19	2540:19	7	;
SELECTION	2542:1	2542:24	6	
KEYWORD	2542:1	2542:1	7	switch
LEAF_NODE	2542:1	2542:1	8	switch
LEAF_NODE	2542:8	2542:8	7	(
CONDITION	2542:9	2542:9	7	bitspersample
EXPR	2542:9	2542:9	8	bitspersample
FIELD	2542:9	2542:9	9	bitspersample
LEAF_NODE	2542:9	2542:9	10	bitspersample
LEAF_NODE	2542:22	2542:22	7	)
STATEMENTS	2542:24	2566:1	7	
LEAF_NODE	2542:24	2542:24	8	{
STATEMENTS	2543:1	2565:5	8	
LABEL	2543:1	2543:7	9	case 1 :
LEAF_NODE	2543:1	2543:1	10	case
LEAF_NODE	2543:6	2543:6	10	1
LEAF_NODE	2543:7	2543:7	10	:
EXPR_STATEMENT	2544:5	2544:15	9	CMAP ( i >> 7 ) ;
EXPR	2544:5	2544:5	10	CMAP ( i >> 7 )
FUNCTION_CALL	2544:5	2544:14	11	CMAP ( i >> 7 )
CALLEE	2544:5	2544:5	12	CMAP
LEAF_NODE	2544:5	2544:5	13	CMAP
LEAF_NODE	2544:9	2544:9	12	(
ARGUMENT	2544:10	2544:13	12	i >> 7
FIELD	2544:10	2544:10	13	i
LEAF_NODE	2544:10	2544:10	14	i
LEAF_NODE	2544:11	2544:11	13	>>
FIELD	2544:13	2544:13	13	7
LEAF_NODE	2544:13	2544:13	14	7
LEAF_NODE	2544:14	2544:14	12	)
LEAF_NODE	2544:15	2544:15	10	;
EXPR_STATEMENT	2545:5	2545:19	9	CMAP ( ( i >> 6 ) & 1 ) ;
EXPR	2545:5	2545:5	10	CMAP ( ( i >> 6 ) & 1 )
FUNCTION_CALL	2545:5	2545:18	11	CMAP ( ( i >> 6 ) & 1 )
CALLEE	2545:5	2545:5	12	CMAP
LEAF_NODE	2545:5	2545:5	13	CMAP
LEAF_NODE	2545:9	2545:9	12	(
ARGUMENT	2545:10	2545:17	12	( i >> 6 ) & 1
LEAF_NODE	2545:10	2545:10	13	(
FIELD	2545:11	2545:11	13	i
LEAF_NODE	2545:11	2545:11	14	i
LEAF_NODE	2545:12	2545:12	13	>>
FIELD	2545:14	2545:14	13	6
LEAF_NODE	2545:14	2545:14	14	6
LEAF_NODE	2545:15	2545:15	13	)
LEAF_NODE	2545:16	2545:16	13	&
FIELD	2545:17	2545:17	13	1
LEAF_NODE	2545:17	2545:17	14	1
LEAF_NODE	2545:18	2545:18	12	)
LEAF_NODE	2545:19	2545:19	10	;
EXPR_STATEMENT	2546:5	2546:19	9	CMAP ( ( i >> 5 ) & 1 ) ;
EXPR	2546:5	2546:5	10	CMAP ( ( i >> 5 ) & 1 )
FUNCTION_CALL	2546:5	2546:18	11	CMAP ( ( i >> 5 ) & 1 )
CALLEE	2546:5	2546:5	12	CMAP
LEAF_NODE	2546:5	2546:5	13	CMAP
LEAF_NODE	2546:9	2546:9	12	(
ARGUMENT	2546:10	2546:17	12	( i >> 5 ) & 1
LEAF_NODE	2546:10	2546:10	13	(
FIELD	2546:11	2546:11	13	i
LEAF_NODE	2546:11	2546:11	14	i
LEAF_NODE	2546:12	2546:12	13	>>
FIELD	2546:14	2546:14	13	5
LEAF_NODE	2546:14	2546:14	14	5
LEAF_NODE	2546:15	2546:15	13	)
LEAF_NODE	2546:16	2546:16	13	&
FIELD	2546:17	2546:17	13	1
LEAF_NODE	2546:17	2546:17	14	1
LEAF_NODE	2546:18	2546:18	12	)
LEAF_NODE	2546:19	2546:19	10	;
EXPR_STATEMENT	2547:5	2547:19	9	CMAP ( ( i >> 4 ) & 1 ) ;
EXPR	2547:5	2547:5	10	CMAP ( ( i >> 4 ) & 1 )
FUNCTION_CALL	2547:5	2547:18	11	CMAP ( ( i >> 4 ) & 1 )
CALLEE	2547:5	2547:5	12	CMAP
LEAF_NODE	2547:5	2547:5	13	CMAP
LEAF_NODE	2547:9	2547:9	12	(
ARGUMENT	2547:10	2547:17	12	( i >> 4 ) & 1
LEAF_NODE	2547:10	2547:10	13	(
FIELD	2547:11	2547:11	13	i
LEAF_NODE	2547:11	2547:11	14	i
LEAF_NODE	2547:12	2547:12	13	>>
FIELD	2547:14	2547:14	13	4
LEAF_NODE	2547:14	2547:14	14	4
LEAF_NODE	2547:15	2547:15	13	)
LEAF_NODE	2547:16	2547:16	13	&
FIELD	2547:17	2547:17	13	1
LEAF_NODE	2547:17	2547:17	14	1
LEAF_NODE	2547:18	2547:18	12	)
LEAF_NODE	2547:19	2547:19	10	;
EXPR_STATEMENT	2548:5	2548:19	9	CMAP ( ( i >> 3 ) & 1 ) ;
EXPR	2548:5	2548:5	10	CMAP ( ( i >> 3 ) & 1 )
FUNCTION_CALL	2548:5	2548:18	11	CMAP ( ( i >> 3 ) & 1 )
CALLEE	2548:5	2548:5	12	CMAP
LEAF_NODE	2548:5	2548:5	13	CMAP
LEAF_NODE	2548:9	2548:9	12	(
ARGUMENT	2548:10	2548:17	12	( i >> 3 ) & 1
LEAF_NODE	2548:10	2548:10	13	(
FIELD	2548:11	2548:11	13	i
LEAF_NODE	2548:11	2548:11	14	i
LEAF_NODE	2548:12	2548:12	13	>>
FIELD	2548:14	2548:14	13	3
LEAF_NODE	2548:14	2548:14	14	3
LEAF_NODE	2548:15	2548:15	13	)
LEAF_NODE	2548:16	2548:16	13	&
FIELD	2548:17	2548:17	13	1
LEAF_NODE	2548:17	2548:17	14	1
LEAF_NODE	2548:18	2548:18	12	)
LEAF_NODE	2548:19	2548:19	10	;
EXPR_STATEMENT	2549:5	2549:19	9	CMAP ( ( i >> 2 ) & 1 ) ;
EXPR	2549:5	2549:5	10	CMAP ( ( i >> 2 ) & 1 )
FUNCTION_CALL	2549:5	2549:18	11	CMAP ( ( i >> 2 ) & 1 )
CALLEE	2549:5	2549:5	12	CMAP
LEAF_NODE	2549:5	2549:5	13	CMAP
LEAF_NODE	2549:9	2549:9	12	(
ARGUMENT	2549:10	2549:17	12	( i >> 2 ) & 1
LEAF_NODE	2549:10	2549:10	13	(
FIELD	2549:11	2549:11	13	i
LEAF_NODE	2549:11	2549:11	14	i
LEAF_NODE	2549:12	2549:12	13	>>
FIELD	2549:14	2549:14	13	2
LEAF_NODE	2549:14	2549:14	14	2
LEAF_NODE	2549:15	2549:15	13	)
LEAF_NODE	2549:16	2549:16	13	&
FIELD	2549:17	2549:17	13	1
LEAF_NODE	2549:17	2549:17	14	1
LEAF_NODE	2549:18	2549:18	12	)
LEAF_NODE	2549:19	2549:19	10	;
EXPR_STATEMENT	2550:5	2550:19	9	CMAP ( ( i >> 1 ) & 1 ) ;
EXPR	2550:5	2550:5	10	CMAP ( ( i >> 1 ) & 1 )
FUNCTION_CALL	2550:5	2550:18	11	CMAP ( ( i >> 1 ) & 1 )
CALLEE	2550:5	2550:5	12	CMAP
LEAF_NODE	2550:5	2550:5	13	CMAP
LEAF_NODE	2550:9	2550:9	12	(
ARGUMENT	2550:10	2550:17	12	( i >> 1 ) & 1
LEAF_NODE	2550:10	2550:10	13	(
FIELD	2550:11	2550:11	13	i
LEAF_NODE	2550:11	2550:11	14	i
LEAF_NODE	2550:12	2550:12	13	>>
FIELD	2550:14	2550:14	13	1
LEAF_NODE	2550:14	2550:14	14	1
LEAF_NODE	2550:15	2550:15	13	)
LEAF_NODE	2550:16	2550:16	13	&
FIELD	2550:17	2550:17	13	1
LEAF_NODE	2550:17	2550:17	14	1
LEAF_NODE	2550:18	2550:18	12	)
LEAF_NODE	2550:19	2550:19	10	;
EXPR_STATEMENT	2551:5	2551:14	9	CMAP ( i & 1 ) ;
EXPR	2551:5	2551:5	10	CMAP ( i & 1 )
FUNCTION_CALL	2551:5	2551:13	11	CMAP ( i & 1 )
CALLEE	2551:5	2551:5	12	CMAP
LEAF_NODE	2551:5	2551:5	13	CMAP
LEAF_NODE	2551:9	2551:9	12	(
ARGUMENT	2551:10	2551:12	12	i & 1
FIELD	2551:10	2551:10	13	i
LEAF_NODE	2551:10	2551:10	14	i
LEAF_NODE	2551:11	2551:11	13	&
FIELD	2551:12	2551:12	13	1
LEAF_NODE	2551:12	2551:12	14	1
LEAF_NODE	2551:13	2551:13	12	)
LEAF_NODE	2551:14	2551:14	10	;
JUMP_STATEMENT	2552:5	2552:10	9	break DESTINATION ;
KEYWORD	2552:5	2552:5	10	break
LEAF_NODE	2552:5	2552:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2552:10	2552:10	10	;
LABEL	2553:1	2553:7	9	case 2 :
LEAF_NODE	2553:1	2553:1	10	case
LEAF_NODE	2553:6	2553:6	10	2
LEAF_NODE	2553:7	2553:7	10	:
EXPR_STATEMENT	2554:5	2554:15	9	CMAP ( i >> 6 ) ;
EXPR	2554:5	2554:5	10	CMAP ( i >> 6 )
FUNCTION_CALL	2554:5	2554:14	11	CMAP ( i >> 6 )
CALLEE	2554:5	2554:5	12	CMAP
LEAF_NODE	2554:5	2554:5	13	CMAP
LEAF_NODE	2554:9	2554:9	12	(
ARGUMENT	2554:10	2554:13	12	i >> 6
FIELD	2554:10	2554:10	13	i
LEAF_NODE	2554:10	2554:10	14	i
LEAF_NODE	2554:11	2554:11	13	>>
FIELD	2554:13	2554:13	13	6
LEAF_NODE	2554:13	2554:13	14	6
LEAF_NODE	2554:14	2554:14	12	)
LEAF_NODE	2554:15	2554:15	10	;
EXPR_STATEMENT	2555:5	2555:19	9	CMAP ( ( i >> 4 ) & 3 ) ;
EXPR	2555:5	2555:5	10	CMAP ( ( i >> 4 ) & 3 )
FUNCTION_CALL	2555:5	2555:18	11	CMAP ( ( i >> 4 ) & 3 )
CALLEE	2555:5	2555:5	12	CMAP
LEAF_NODE	2555:5	2555:5	13	CMAP
LEAF_NODE	2555:9	2555:9	12	(
ARGUMENT	2555:10	2555:17	12	( i >> 4 ) & 3
LEAF_NODE	2555:10	2555:10	13	(
FIELD	2555:11	2555:11	13	i
LEAF_NODE	2555:11	2555:11	14	i
LEAF_NODE	2555:12	2555:12	13	>>
FIELD	2555:14	2555:14	13	4
LEAF_NODE	2555:14	2555:14	14	4
LEAF_NODE	2555:15	2555:15	13	)
LEAF_NODE	2555:16	2555:16	13	&
FIELD	2555:17	2555:17	13	3
LEAF_NODE	2555:17	2555:17	14	3
LEAF_NODE	2555:18	2555:18	12	)
LEAF_NODE	2555:19	2555:19	10	;
EXPR_STATEMENT	2556:5	2556:19	9	CMAP ( ( i >> 2 ) & 3 ) ;
EXPR	2556:5	2556:5	10	CMAP ( ( i >> 2 ) & 3 )
FUNCTION_CALL	2556:5	2556:18	11	CMAP ( ( i >> 2 ) & 3 )
CALLEE	2556:5	2556:5	12	CMAP
LEAF_NODE	2556:5	2556:5	13	CMAP
LEAF_NODE	2556:9	2556:9	12	(
ARGUMENT	2556:10	2556:17	12	( i >> 2 ) & 3
LEAF_NODE	2556:10	2556:10	13	(
FIELD	2556:11	2556:11	13	i
LEAF_NODE	2556:11	2556:11	14	i
LEAF_NODE	2556:12	2556:12	13	>>
FIELD	2556:14	2556:14	13	2
LEAF_NODE	2556:14	2556:14	14	2
LEAF_NODE	2556:15	2556:15	13	)
LEAF_NODE	2556:16	2556:16	13	&
FIELD	2556:17	2556:17	13	3
LEAF_NODE	2556:17	2556:17	14	3
LEAF_NODE	2556:18	2556:18	12	)
LEAF_NODE	2556:19	2556:19	10	;
EXPR_STATEMENT	2557:5	2557:14	9	CMAP ( i & 3 ) ;
EXPR	2557:5	2557:5	10	CMAP ( i & 3 )
FUNCTION_CALL	2557:5	2557:13	11	CMAP ( i & 3 )
CALLEE	2557:5	2557:5	12	CMAP
LEAF_NODE	2557:5	2557:5	13	CMAP
LEAF_NODE	2557:9	2557:9	12	(
ARGUMENT	2557:10	2557:12	12	i & 3
FIELD	2557:10	2557:10	13	i
LEAF_NODE	2557:10	2557:10	14	i
LEAF_NODE	2557:11	2557:11	13	&
FIELD	2557:12	2557:12	13	3
LEAF_NODE	2557:12	2557:12	14	3
LEAF_NODE	2557:13	2557:13	12	)
LEAF_NODE	2557:14	2557:14	10	;
JUMP_STATEMENT	2558:5	2558:10	9	break DESTINATION ;
KEYWORD	2558:5	2558:5	10	break
LEAF_NODE	2558:5	2558:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2558:10	2558:10	10	;
LABEL	2559:1	2559:7	9	case 4 :
LEAF_NODE	2559:1	2559:1	10	case
LEAF_NODE	2559:6	2559:6	10	4
LEAF_NODE	2559:7	2559:7	10	:
EXPR_STATEMENT	2560:5	2560:15	9	CMAP ( i >> 4 ) ;
EXPR	2560:5	2560:5	10	CMAP ( i >> 4 )
FUNCTION_CALL	2560:5	2560:14	11	CMAP ( i >> 4 )
CALLEE	2560:5	2560:5	12	CMAP
LEAF_NODE	2560:5	2560:5	13	CMAP
LEAF_NODE	2560:9	2560:9	12	(
ARGUMENT	2560:10	2560:13	12	i >> 4
FIELD	2560:10	2560:10	13	i
LEAF_NODE	2560:10	2560:10	14	i
LEAF_NODE	2560:11	2560:11	13	>>
FIELD	2560:13	2560:13	13	4
LEAF_NODE	2560:13	2560:13	14	4
LEAF_NODE	2560:14	2560:14	12	)
LEAF_NODE	2560:15	2560:15	10	;
EXPR_STATEMENT	2561:5	2561:16	9	CMAP ( i & 0xf ) ;
EXPR	2561:5	2561:5	10	CMAP ( i & 0xf )
FUNCTION_CALL	2561:5	2561:15	11	CMAP ( i & 0xf )
CALLEE	2561:5	2561:5	12	CMAP
LEAF_NODE	2561:5	2561:5	13	CMAP
LEAF_NODE	2561:9	2561:9	12	(
ARGUMENT	2561:10	2561:12	12	i & 0xf
FIELD	2561:10	2561:10	13	i
LEAF_NODE	2561:10	2561:10	14	i
LEAF_NODE	2561:11	2561:11	13	&
FIELD	2561:12	2561:12	13	0xf
LEAF_NODE	2561:12	2561:12	14	0xf
LEAF_NODE	2561:15	2561:15	12	)
LEAF_NODE	2561:16	2561:16	10	;
JUMP_STATEMENT	2562:5	2562:10	9	break DESTINATION ;
KEYWORD	2562:5	2562:5	10	break
LEAF_NODE	2562:5	2562:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2562:10	2562:10	10	;
LABEL	2563:1	2563:7	9	case 8 :
LEAF_NODE	2563:1	2563:1	10	case
LEAF_NODE	2563:6	2563:6	10	8
LEAF_NODE	2563:7	2563:7	10	:
EXPR_STATEMENT	2564:5	2564:12	9	CMAP ( i ) ;
EXPR	2564:5	2564:5	10	CMAP ( i )
FUNCTION_CALL	2564:5	2564:11	11	CMAP ( i )
CALLEE	2564:5	2564:5	12	CMAP
LEAF_NODE	2564:5	2564:5	13	CMAP
LEAF_NODE	2564:9	2564:9	12	(
ARGUMENT	2564:10	2564:10	12	i
FIELD	2564:10	2564:10	13	i
LEAF_NODE	2564:10	2564:10	14	i
LEAF_NODE	2564:11	2564:11	12	)
LEAF_NODE	2564:12	2564:12	10	;
JUMP_STATEMENT	2565:5	2565:10	9	break DESTINATION ;
KEYWORD	2565:5	2565:5	10	break
LEAF_NODE	2565:5	2565:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2565:10	2565:10	10	;
LEAF_NODE	2566:1	2566:1	8	}
LEAF_NODE	2568:4	2568:4	5	}
JUMP_STATEMENT	2569:4	2569:14	3	return ( 1 ) ;
KEYWORD	2569:4	2569:4	4	return
LEAF_NODE	2569:4	2569:4	5	return
DESTINATION	2569:11	2569:11	4	( 1 )
EXPR	2569:11	2569:13	5	( 1 )
LEAF_NODE	2569:11	2569:11	6	(
FIELD	2569:12	2569:12	6	1
LEAF_NODE	2569:12	2569:12	7	1
LEAF_NODE	2569:13	2569:13	6	)
LEAF_NODE	2569:14	2569:14	4	;
LEAF_NODE	2570:0	2570:0	2	}
FUNCTION_DEF	2576:0	2609:0	1	
RETURN_TYPE	2576:0	2576:7	2	static int
LEAF_NODE	2576:0	2576:0	3	static
TYPE_NAME	2576:7	2576:7	3	int
LEAF_NODE	2576:7	2576:7	4	int
FUNCTION_NAME	2577:0	2577:0	2	buildMap
LEAF_NODE	2577:0	2577:0	3	buildMap
PARAMETER_LIST	2577:8	2577:27	2	( TIFFRGBAImage * img )
LEAF_NODE	2577:8	2577:8	3	(
PARAMETER_DECL	2577:9	2577:24	3	TIFFRGBAImage * img
TYPE	2577:9	2577:22	4	TIFFRGBAImage *
TYPE_NAME	2577:9	2577:9	5	TIFFRGBAImage
LEAF_NODE	2577:9	2577:9	6	TIFFRGBAImage
POINTER	2577:22	2577:22	5	*
LEAF_NODE	2577:22	2577:22	6	*
NAME	2577:24	2577:24	4	img
LEAF_NODE	2577:24	2577:24	5	img
LEAF_NODE	2577:27	2577:27	3	)
LEAF_NODE	2578:0	2578:0	2	{
STATEMENTS	2579:4	2608:4	2	
SELECTION	2579:4	2579:30	3	
KEYWORD	2579:4	2579:4	4	switch
LEAF_NODE	2579:4	2579:4	5	switch
LEAF_NODE	2579:11	2579:11	4	(
CONDITION	2579:12	2579:12	4	img -> photometric
EXPR	2579:12	2579:12	5	img -> photometric
FIELD	2579:12	2579:17	6	img -> photometric
LEAF_NODE	2579:12	2579:12	7	img
LEAF_NODE	2579:15	2579:15	7	->
LEAF_NODE	2579:17	2579:17	7	photometric
LEAF_NODE	2579:28	2579:28	4	)
STATEMENTS	2579:30	2607:4	4	
LEAF_NODE	2579:30	2579:30	5	{
STATEMENTS	2580:4	2606:1	5	
LABEL	2580:4	2580:24	6	case PHOTOMETRIC_RGB :
LEAF_NODE	2580:4	2580:4	7	case
LEAF_NODE	2580:9	2580:9	7	PHOTOMETRIC_RGB
LEAF_NODE	2580:24	2580:24	7	:
LABEL	2581:4	2581:26	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	2581:4	2581:4	7	case
LEAF_NODE	2581:9	2581:9	7	PHOTOMETRIC_YCBCR
LEAF_NODE	2581:26	2581:26	7	:
LABEL	2582:4	2582:30	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	2582:4	2582:4	7	case
LEAF_NODE	2582:9	2582:9	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	2582:30	2582:30	7	:
SELECTION	2583:1	2584:5	6	
KEYWORD	2583:1	2583:1	7	if
LEAF_NODE	2583:1	2583:1	8	if
LEAF_NODE	2583:4	2583:4	7	(
CONDITION	2583:5	2583:5	7	img -> bitspersample == 8
EXPR	2583:5	2583:27	8	img -> bitspersample == 8
FIELD	2583:5	2583:10	9	img -> bitspersample
LEAF_NODE	2583:5	2583:5	10	img
LEAF_NODE	2583:8	2583:8	10	->
LEAF_NODE	2583:10	2583:10	10	bitspersample
EQ_OPERATOR	2583:24	2583:24	9	==
LEAF_NODE	2583:24	2583:24	10	==
FIELD	2583:27	2583:27	9	8
LEAF_NODE	2583:27	2583:27	10	8
LEAF_NODE	2583:28	2583:28	7	)
STATEMENTS	2584:5	2584:5	7	
JUMP_STATEMENT	2584:5	2584:10	8	break DESTINATION ;
KEYWORD	2584:5	2584:5	9	break
LEAF_NODE	2584:5	2584:5	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	2584:10	2584:10	9	;
LABEL	2586:4	2586:31	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	2586:4	2586:4	7	case
LEAF_NODE	2586:9	2586:9	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	2586:31	2586:31	7	:
LABEL	2587:4	2587:31	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	2587:4	2587:4	7	case
LEAF_NODE	2587:9	2587:9	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	2587:31	2587:31	7	:
SELECTION	2588:1	2589:5	6	
KEYWORD	2588:1	2588:1	7	if
LEAF_NODE	2588:1	2588:1	8	if
LEAF_NODE	2588:4	2588:4	7	(
CONDITION	2588:5	2588:5	7	! setupMap ( img )
EXPR	2588:5	2588:5	8	! setupMap ( img )
UNARY_EXPR	2588:5	2588:6	9	! setupMap ( img )
UNARY_OPERATOR	2588:5	2588:5	10	!
LEAF_NODE	2588:5	2588:5	11	!
FUNCTION_CALL	2588:6	2588:18	10	setupMap ( img )
CALLEE	2588:6	2588:6	11	setupMap
LEAF_NODE	2588:6	2588:6	12	setupMap
LEAF_NODE	2588:14	2588:14	11	(
ARGUMENT	2588:15	2588:15	11	img
FIELD	2588:15	2588:15	12	img
LEAF_NODE	2588:15	2588:15	13	img
LEAF_NODE	2588:18	2588:18	11	)
LEAF_NODE	2588:19	2588:19	7	)
STATEMENTS	2589:5	2589:5	7	
JUMP_STATEMENT	2589:5	2589:15	8	return ( 0 ) ;
KEYWORD	2589:5	2589:5	9	return
LEAF_NODE	2589:5	2589:5	10	return
DESTINATION	2589:12	2589:12	9	( 0 )
EXPR	2589:12	2589:14	10	( 0 )
LEAF_NODE	2589:12	2589:12	11	(
FIELD	2589:13	2589:13	11	0
LEAF_NODE	2589:13	2589:13	12	0
LEAF_NODE	2589:14	2589:14	11	)
LEAF_NODE	2589:15	2589:15	9	;
JUMP_STATEMENT	2590:1	2590:6	6	break DESTINATION ;
KEYWORD	2590:1	2590:1	7	break
LEAF_NODE	2590:1	2590:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2590:6	2590:6	7	;
LABEL	2591:4	2591:28	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	2591:4	2591:4	7	case
LEAF_NODE	2591:9	2591:9	7	PHOTOMETRIC_PALETTE
LEAF_NODE	2591:28	2591:28	7	:
SELECTION	2596:1	2597:5	6	
KEYWORD	2596:1	2596:1	7	if
LEAF_NODE	2596:1	2596:1	8	if
LEAF_NODE	2596:4	2596:4	7	(
CONDITION	2596:5	2596:5	7	checkcmap ( img ) == 16
EXPR	2596:5	2596:23	8	checkcmap ( img ) == 16
FUNCTION_CALL	2596:5	2596:18	9	checkcmap ( img )
CALLEE	2596:5	2596:5	10	checkcmap
LEAF_NODE	2596:5	2596:5	11	checkcmap
LEAF_NODE	2596:14	2596:14	10	(
ARGUMENT	2596:15	2596:15	10	img
FIELD	2596:15	2596:15	11	img
LEAF_NODE	2596:15	2596:15	12	img
LEAF_NODE	2596:18	2596:18	10	)
EQ_OPERATOR	2596:20	2596:20	9	==
LEAF_NODE	2596:20	2596:20	10	==
FIELD	2596:23	2596:23	9	16
LEAF_NODE	2596:23	2596:23	10	16
LEAF_NODE	2596:25	2596:25	7	)
STATEMENTS	2597:5	2597:5	7	
EXPR_STATEMENT	2597:5	2597:17	8	cvtcmap ( img ) ;
EXPR	2597:5	2597:5	9	cvtcmap ( img )
FUNCTION_CALL	2597:5	2597:16	10	cvtcmap ( img )
CALLEE	2597:5	2597:5	11	cvtcmap
LEAF_NODE	2597:5	2597:5	12	cvtcmap
LEAF_NODE	2597:12	2597:12	11	(
ARGUMENT	2597:13	2597:13	11	img
FIELD	2597:13	2597:13	12	img
LEAF_NODE	2597:13	2597:13	13	img
LEAF_NODE	2597:16	2597:16	11	)
LEAF_NODE	2597:17	2597:17	9	;
SELECTION	2598:1	2599:5	6	
KEYWORD	2598:1	2598:1	7	else
LEAF_NODE	2598:1	2598:1	8	else
STATEMENTS	2599:5	2599:5	7	
EXPR_STATEMENT	2599:5	2599:96	8	TIFFWarningExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "Assuming 8-bit colormap" ) ;
EXPR	2599:5	2599:5	9	TIFFWarningExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "Assuming 8-bit colormap" )
FUNCTION_CALL	2599:5	2599:95	10	TIFFWarningExt ( img -> tif -> tif_clientdata , TIFFFileName ( img -> tif ) , "Assuming 8-bit colormap" )
CALLEE	2599:5	2599:5	11	TIFFWarningExt
LEAF_NODE	2599:5	2599:5	12	TIFFWarningExt
LEAF_NODE	2599:19	2599:19	11	(
ARGUMENT	2599:20	2599:20	11	img -> tif -> tif_clientdata
FIELD	2599:20	2599:30	12	img -> tif -> tif_clientdata
LEAF_NODE	2599:20	2599:20	13	img
LEAF_NODE	2599:23	2599:23	13	->
LEAF_NODE	2599:25	2599:25	13	tif
LEAF_NODE	2599:28	2599:28	13	->
LEAF_NODE	2599:30	2599:30	13	tif_clientdata
LEAF_NODE	2599:44	2599:44	11	,
ARGUMENT	2599:46	2599:46	11	TIFFFileName ( img -> tif )
FUNCTION_CALL	2599:46	2599:67	12	TIFFFileName ( img -> tif )
CALLEE	2599:46	2599:46	13	TIFFFileName
LEAF_NODE	2599:46	2599:46	14	TIFFFileName
LEAF_NODE	2599:58	2599:58	13	(
ARGUMENT	2599:59	2599:59	13	img -> tif
FIELD	2599:59	2599:64	14	img -> tif
LEAF_NODE	2599:59	2599:59	15	img
LEAF_NODE	2599:62	2599:62	15	->
LEAF_NODE	2599:64	2599:64	15	tif
LEAF_NODE	2599:67	2599:67	13	)
LEAF_NODE	2599:68	2599:68	11	,
ARGUMENT	2599:70	2599:70	11	"Assuming 8-bit colormap"
FIELD	2599:70	2599:70	12	"Assuming 8-bit colormap"
LEAF_NODE	2599:70	2599:70	13	"Assuming 8-bit colormap"
LEAF_NODE	2599:95	2599:95	11	)
LEAF_NODE	2599:96	2599:96	9	;
SELECTION	2604:1	2605:5	6	
KEYWORD	2604:1	2604:1	7	if
LEAF_NODE	2604:1	2604:1	8	if
LEAF_NODE	2604:4	2604:4	7	(
CONDITION	2604:5	2604:5	7	img -> bitspersample <= 8 && ! makecmap ( img )
EXPR	2604:5	2604:5	8	img -> bitspersample <= 8 && ! makecmap ( img )
AND	2604:5	2604:32	9	img -> bitspersample <= 8 && ! makecmap ( img )
EXPR	2604:5	2604:27	10	img -> bitspersample <= 8
FIELD	2604:5	2604:10	11	img -> bitspersample
LEAF_NODE	2604:5	2604:5	12	img
LEAF_NODE	2604:8	2604:8	12	->
LEAF_NODE	2604:10	2604:10	12	bitspersample
REL_OPERATOR	2604:24	2604:24	11	<=
LEAF_NODE	2604:24	2604:24	12	<=
FIELD	2604:27	2604:27	11	8
LEAF_NODE	2604:27	2604:27	12	8
LEAF_NODE	2604:29	2604:29	10	&&
EXPR	2604:32	2604:32	10	! makecmap ( img )
UNARY_EXPR	2604:32	2604:33	11	! makecmap ( img )
UNARY_OPERATOR	2604:32	2604:32	12	!
LEAF_NODE	2604:32	2604:32	13	!
FUNCTION_CALL	2604:33	2604:45	12	makecmap ( img )
CALLEE	2604:33	2604:33	13	makecmap
LEAF_NODE	2604:33	2604:33	14	makecmap
LEAF_NODE	2604:41	2604:41	13	(
ARGUMENT	2604:42	2604:42	13	img
FIELD	2604:42	2604:42	14	img
LEAF_NODE	2604:42	2604:42	15	img
LEAF_NODE	2604:45	2604:45	13	)
LEAF_NODE	2604:46	2604:46	7	)
STATEMENTS	2605:5	2605:5	7	
JUMP_STATEMENT	2605:5	2605:15	8	return ( 0 ) ;
KEYWORD	2605:5	2605:5	9	return
LEAF_NODE	2605:5	2605:5	10	return
DESTINATION	2605:12	2605:12	9	( 0 )
EXPR	2605:12	2605:14	10	( 0 )
LEAF_NODE	2605:12	2605:12	11	(
FIELD	2605:13	2605:13	11	0
LEAF_NODE	2605:13	2605:13	12	0
LEAF_NODE	2605:14	2605:14	11	)
LEAF_NODE	2605:15	2605:15	9	;
JUMP_STATEMENT	2606:1	2606:6	6	break DESTINATION ;
KEYWORD	2606:1	2606:1	7	break
LEAF_NODE	2606:1	2606:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2606:6	2606:6	7	;
LEAF_NODE	2607:4	2607:4	5	}
JUMP_STATEMENT	2608:4	2608:14	3	return ( 1 ) ;
KEYWORD	2608:4	2608:4	4	return
LEAF_NODE	2608:4	2608:4	5	return
DESTINATION	2608:11	2608:11	4	( 1 )
EXPR	2608:11	2608:13	5	( 1 )
LEAF_NODE	2608:11	2608:11	6	(
FIELD	2608:12	2608:12	6	1
LEAF_NODE	2608:12	2608:12	7	1
LEAF_NODE	2608:13	2608:13	6	)
LEAF_NODE	2608:14	2608:14	4	;
LEAF_NODE	2609:0	2609:0	2	}
FUNCTION_DEF	2614:0	2761:0	1	
RETURN_TYPE	2614:0	2614:7	2	static int
LEAF_NODE	2614:0	2614:0	3	static
TYPE_NAME	2614:7	2614:7	3	int
LEAF_NODE	2614:7	2614:7	4	int
FUNCTION_NAME	2615:0	2615:0	2	PickContigCase
LEAF_NODE	2615:0	2615:0	3	PickContigCase
PARAMETER_LIST	2615:14	2615:33	2	( TIFFRGBAImage * img )
LEAF_NODE	2615:14	2615:14	3	(
PARAMETER_DECL	2615:15	2615:30	3	TIFFRGBAImage * img
TYPE	2615:15	2615:28	4	TIFFRGBAImage *
TYPE_NAME	2615:15	2615:15	5	TIFFRGBAImage
LEAF_NODE	2615:15	2615:15	6	TIFFRGBAImage
POINTER	2615:28	2615:28	5	*
LEAF_NODE	2615:28	2615:28	6	*
NAME	2615:30	2615:30	4	img
LEAF_NODE	2615:30	2615:30	5	img
LEAF_NODE	2615:33	2615:33	3	)
LEAF_NODE	2616:0	2616:0	2	{
STATEMENTS	2617:1	2760:1	2	
EXPR_STATEMENT	2617:1	2617:64	3	img -> get = TIFFIsTiled ( img -> tif ) ? gtTileContig : gtStripContig ;
EXPR	2617:1	2617:1	4	img -> get = TIFFIsTiled ( img -> tif ) ? gtTileContig : gtStripContig
ASSIGN	2617:1	2617:12	5	img -> get = TIFFIsTiled ( img -> tif ) ? gtTileContig : gtStripContig
LVAL	2617:1	2617:1	6	img -> get
FIELD	2617:1	2617:6	7	img -> get
LEAF_NODE	2617:1	2617:1	8	img
LEAF_NODE	2617:4	2617:4	8	->
LEAF_NODE	2617:6	2617:6	8	get
ASSIGN_OP	2617:10	2617:10	6	=
LEAF_NODE	2617:10	2617:10	7	=
RVAL	2617:12	2617:12	6	TIFFIsTiled ( img -> tif ) ? gtTileContig : gtStripContig
COND_EXPR	2617:12	2617:51	7	TIFFIsTiled ( img -> tif ) ? gtTileContig : gtStripContig
CONDITION	2617:12	2617:12	8	TIFFIsTiled ( img -> tif )
FUNCTION_CALL	2617:12	2617:32	9	TIFFIsTiled ( img -> tif )
CALLEE	2617:12	2617:12	10	TIFFIsTiled
LEAF_NODE	2617:12	2617:12	11	TIFFIsTiled
LEAF_NODE	2617:23	2617:23	10	(
ARGUMENT	2617:24	2617:24	10	img -> tif
FIELD	2617:24	2617:29	11	img -> tif
LEAF_NODE	2617:24	2617:24	12	img
LEAF_NODE	2617:27	2617:27	12	->
LEAF_NODE	2617:29	2617:29	12	tif
LEAF_NODE	2617:32	2617:32	10	)
LEAF_NODE	2617:34	2617:34	8	?
EXPR	2617:36	2617:36	8	gtTileContig
FIELD	2617:36	2617:36	9	gtTileContig
LEAF_NODE	2617:36	2617:36	10	gtTileContig
LEAF_NODE	2617:49	2617:49	8	:
FIELD	2617:51	2617:51	8	gtStripContig
LEAF_NODE	2617:51	2617:51	9	gtStripContig
LEAF_NODE	2617:64	2617:64	4	;
EXPR_STATEMENT	2618:1	2618:23	3	img -> put . contig = NULL ;
EXPR	2618:1	2618:1	4	img -> put . contig = NULL
ASSIGN	2618:1	2618:19	5	img -> put . contig = NULL
LVAL	2618:1	2618:1	6	img -> put . contig
FIELD	2618:1	2618:10	7	img -> put . contig
LEAF_NODE	2618:1	2618:1	8	img
LEAF_NODE	2618:4	2618:4	8	->
LEAF_NODE	2618:6	2618:6	8	put
LEAF_NODE	2618:9	2618:9	8	.
LEAF_NODE	2618:10	2618:10	8	contig
ASSIGN_OP	2618:17	2618:17	6	=
LEAF_NODE	2618:17	2618:17	7	=
RVAL	2618:19	2618:19	6	NULL
FIELD	2618:19	2618:19	7	NULL
LEAF_NODE	2618:19	2618:19	8	NULL
LEAF_NODE	2618:23	2618:23	4	;
SELECTION	2619:1	2619:27	3	
KEYWORD	2619:1	2619:1	4	switch
LEAF_NODE	2619:1	2619:1	5	switch
LEAF_NODE	2619:8	2619:8	4	(
CONDITION	2619:9	2619:9	4	img -> photometric
EXPR	2619:9	2619:9	5	img -> photometric
FIELD	2619:9	2619:14	6	img -> photometric
LEAF_NODE	2619:9	2619:9	7	img
LEAF_NODE	2619:12	2619:12	7	->
LEAF_NODE	2619:14	2619:14	7	photometric
LEAF_NODE	2619:25	2619:25	4	)
STATEMENTS	2619:27	2759:1	4	
LEAF_NODE	2619:27	2619:27	5	{
STATEMENTS	2620:2	2754:3	5	
LABEL	2620:2	2620:22	6	case PHOTOMETRIC_RGB :
LEAF_NODE	2620:2	2620:2	7	case
LEAF_NODE	2620:7	2620:7	7	PHOTOMETRIC_RGB
LEAF_NODE	2620:22	2620:22	7	:
SELECTION	2621:3	2621:31	6	
KEYWORD	2621:3	2621:3	7	switch
LEAF_NODE	2621:3	2621:3	8	switch
LEAF_NODE	2621:10	2621:10	7	(
CONDITION	2621:11	2621:11	7	img -> bitspersample
EXPR	2621:11	2621:11	8	img -> bitspersample
FIELD	2621:11	2621:16	9	img -> bitspersample
LEAF_NODE	2621:11	2621:11	10	img
LEAF_NODE	2621:14	2621:14	10	->
LEAF_NODE	2621:16	2621:16	10	bitspersample
LEAF_NODE	2621:29	2621:29	7	)
STATEMENTS	2621:31	2655:3	7	
LEAF_NODE	2621:31	2621:31	8	{
STATEMENTS	2622:4	2654:5	8	
LABEL	2622:4	2622:10	9	case 8 :
LEAF_NODE	2622:4	2622:4	10	case
LEAF_NODE	2622:9	2622:9	10	8
LEAF_NODE	2622:10	2622:10	10	:
SELECTION	2623:5	2625:6	9	
KEYWORD	2623:5	2623:5	10	if
LEAF_NODE	2623:5	2623:5	11	if
LEAF_NODE	2623:8	2623:8	10	(
CONDITION	2623:9	2623:9	10	img -> alpha == EXTRASAMPLE_ASSOCALPHA && img -> samplesperpixel >= 4
EXPR	2623:9	2623:9	11	img -> alpha == EXTRASAMPLE_ASSOCALPHA && img -> samplesperpixel >= 4
AND	2623:9	2624:6	12	img -> alpha == EXTRASAMPLE_ASSOCALPHA && img -> samplesperpixel >= 4
EXPR	2623:9	2623:23	13	img -> alpha == EXTRASAMPLE_ASSOCALPHA
FIELD	2623:9	2623:14	14	img -> alpha
LEAF_NODE	2623:9	2623:9	15	img
LEAF_NODE	2623:12	2623:12	15	->
LEAF_NODE	2623:14	2623:14	15	alpha
EQ_OPERATOR	2623:20	2623:20	14	==
LEAF_NODE	2623:20	2623:20	15	==
FIELD	2623:23	2623:23	14	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	2623:23	2623:23	15	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	2623:46	2623:46	13	&&
EXPR	2624:6	2624:30	13	img -> samplesperpixel >= 4
FIELD	2624:6	2624:11	14	img -> samplesperpixel
LEAF_NODE	2624:6	2624:6	15	img
LEAF_NODE	2624:9	2624:9	15	->
LEAF_NODE	2624:11	2624:11	15	samplesperpixel
REL_OPERATOR	2624:27	2624:27	14	>=
LEAF_NODE	2624:27	2624:27	15	>=
FIELD	2624:30	2624:30	14	4
LEAF_NODE	2624:30	2624:30	15	4
LEAF_NODE	2624:31	2624:31	10	)
STATEMENTS	2625:6	2625:6	10	
EXPR_STATEMENT	2625:6	2625:46	11	img -> put . contig = putRGBAAcontig8bittile ;
EXPR	2625:6	2625:6	12	img -> put . contig = putRGBAAcontig8bittile
ASSIGN	2625:6	2625:24	13	img -> put . contig = putRGBAAcontig8bittile
LVAL	2625:6	2625:6	14	img -> put . contig
FIELD	2625:6	2625:15	15	img -> put . contig
LEAF_NODE	2625:6	2625:6	16	img
LEAF_NODE	2625:9	2625:9	16	->
LEAF_NODE	2625:11	2625:11	16	put
LEAF_NODE	2625:14	2625:14	16	.
LEAF_NODE	2625:15	2625:15	16	contig
ASSIGN_OP	2625:22	2625:22	14	=
LEAF_NODE	2625:22	2625:22	15	=
RVAL	2625:24	2625:24	14	putRGBAAcontig8bittile
FIELD	2625:24	2625:24	15	putRGBAAcontig8bittile
LEAF_NODE	2625:24	2625:24	16	putRGBAAcontig8bittile
LEAF_NODE	2625:46	2625:46	12	;
SELECTION	2626:5	2626:10	9	
KEYWORD	2626:5	2626:5	10	else
LEAF_NODE	2626:5	2626:5	11	else
STATEMENTS	2626:10	2626:10	10	
SELECTION	2626:10	2628:5	11	
KEYWORD	2626:10	2626:10	12	if
LEAF_NODE	2626:10	2626:10	13	if
LEAF_NODE	2626:13	2626:13	12	(
CONDITION	2626:14	2626:14	12	img -> alpha == EXTRASAMPLE_UNASSALPHA && img -> samplesperpixel >= 4
EXPR	2626:14	2626:14	13	img -> alpha == EXTRASAMPLE_UNASSALPHA && img -> samplesperpixel >= 4
AND	2626:14	2627:8	14	img -> alpha == EXTRASAMPLE_UNASSALPHA && img -> samplesperpixel >= 4
EXPR	2626:14	2626:28	15	img -> alpha == EXTRASAMPLE_UNASSALPHA
FIELD	2626:14	2626:19	16	img -> alpha
LEAF_NODE	2626:14	2626:14	17	img
LEAF_NODE	2626:17	2626:17	17	->
LEAF_NODE	2626:19	2626:19	17	alpha
EQ_OPERATOR	2626:25	2626:25	16	==
LEAF_NODE	2626:25	2626:25	17	==
FIELD	2626:28	2626:28	16	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	2626:28	2626:28	17	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	2626:51	2626:51	15	&&
EXPR	2627:8	2627:32	15	img -> samplesperpixel >= 4
FIELD	2627:8	2627:13	16	img -> samplesperpixel
LEAF_NODE	2627:8	2627:8	17	img
LEAF_NODE	2627:11	2627:11	17	->
LEAF_NODE	2627:13	2627:13	17	samplesperpixel
REL_OPERATOR	2627:29	2627:29	16	>=
LEAF_NODE	2627:29	2627:29	17	>=
FIELD	2627:32	2627:32	16	4
LEAF_NODE	2627:32	2627:32	17	4
LEAF_NODE	2627:33	2627:33	12	)
STATEMENTS	2628:5	2631:5	12	
LEAF_NODE	2628:5	2628:5	13	{
STATEMENTS	2629:6	2629:6	13	
SELECTION	2629:6	2630:7	14	
KEYWORD	2629:6	2629:6	15	if
LEAF_NODE	2629:6	2629:6	16	if
LEAF_NODE	2629:9	2629:9	15	(
CONDITION	2629:10	2629:10	15	BuildMapUaToAa ( img )
EXPR	2629:10	2629:10	16	BuildMapUaToAa ( img )
FUNCTION_CALL	2629:10	2629:28	17	BuildMapUaToAa ( img )
CALLEE	2629:10	2629:10	18	BuildMapUaToAa
LEAF_NODE	2629:10	2629:10	19	BuildMapUaToAa
LEAF_NODE	2629:24	2629:24	18	(
ARGUMENT	2629:25	2629:25	18	img
FIELD	2629:25	2629:25	19	img
LEAF_NODE	2629:25	2629:25	20	img
LEAF_NODE	2629:28	2629:28	18	)
LEAF_NODE	2629:29	2629:29	15	)
STATEMENTS	2630:7	2630:7	15	
EXPR_STATEMENT	2630:7	2630:47	16	img -> put . contig = putRGBUAcontig8bittile ;
EXPR	2630:7	2630:7	17	img -> put . contig = putRGBUAcontig8bittile
ASSIGN	2630:7	2630:25	18	img -> put . contig = putRGBUAcontig8bittile
LVAL	2630:7	2630:7	19	img -> put . contig
FIELD	2630:7	2630:16	20	img -> put . contig
LEAF_NODE	2630:7	2630:7	21	img
LEAF_NODE	2630:10	2630:10	21	->
LEAF_NODE	2630:12	2630:12	21	put
LEAF_NODE	2630:15	2630:15	21	.
LEAF_NODE	2630:16	2630:16	21	contig
ASSIGN_OP	2630:23	2630:23	19	=
LEAF_NODE	2630:23	2630:23	20	=
RVAL	2630:25	2630:25	19	putRGBUAcontig8bittile
FIELD	2630:25	2630:25	20	putRGBUAcontig8bittile
LEAF_NODE	2630:25	2630:25	21	putRGBUAcontig8bittile
LEAF_NODE	2630:47	2630:47	17	;
LEAF_NODE	2631:5	2631:5	13	}
SELECTION	2632:5	2632:10	9	
KEYWORD	2632:5	2632:5	10	else
LEAF_NODE	2632:5	2632:5	11	else
STATEMENTS	2632:10	2632:10	10	
SELECTION	2632:10	2633:6	11	
KEYWORD	2632:10	2632:10	12	if
LEAF_NODE	2632:10	2632:10	13	if
LEAF_NODE	2632:12	2632:12	12	(
CONDITION	2632:14	2632:14	12	img -> samplesperpixel >= 3
EXPR	2632:14	2632:38	13	img -> samplesperpixel >= 3
FIELD	2632:14	2632:19	14	img -> samplesperpixel
LEAF_NODE	2632:14	2632:14	15	img
LEAF_NODE	2632:17	2632:17	15	->
LEAF_NODE	2632:19	2632:19	15	samplesperpixel
REL_OPERATOR	2632:35	2632:35	14	>=
LEAF_NODE	2632:35	2632:35	15	>=
FIELD	2632:38	2632:38	14	3
LEAF_NODE	2632:38	2632:38	15	3
LEAF_NODE	2632:40	2632:40	12	)
STATEMENTS	2633:6	2633:6	12	
EXPR_STATEMENT	2633:6	2633:44	13	img -> put . contig = putRGBcontig8bittile ;
EXPR	2633:6	2633:6	14	img -> put . contig = putRGBcontig8bittile
ASSIGN	2633:6	2633:24	15	img -> put . contig = putRGBcontig8bittile
LVAL	2633:6	2633:6	16	img -> put . contig
FIELD	2633:6	2633:15	17	img -> put . contig
LEAF_NODE	2633:6	2633:6	18	img
LEAF_NODE	2633:9	2633:9	18	->
LEAF_NODE	2633:11	2633:11	18	put
LEAF_NODE	2633:14	2633:14	18	.
LEAF_NODE	2633:15	2633:15	18	contig
ASSIGN_OP	2633:22	2633:22	16	=
LEAF_NODE	2633:22	2633:22	17	=
RVAL	2633:24	2633:24	16	putRGBcontig8bittile
FIELD	2633:24	2633:24	17	putRGBcontig8bittile
LEAF_NODE	2633:24	2633:24	18	putRGBcontig8bittile
LEAF_NODE	2633:44	2633:44	14	;
JUMP_STATEMENT	2634:5	2634:10	9	break DESTINATION ;
KEYWORD	2634:5	2634:5	10	break
LEAF_NODE	2634:5	2634:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2634:10	2634:10	10	;
LABEL	2635:4	2635:11	9	case 16 :
LEAF_NODE	2635:4	2635:4	10	case
LEAF_NODE	2635:9	2635:9	10	16
LEAF_NODE	2635:11	2635:11	10	:
SELECTION	2636:5	2638:5	9	
KEYWORD	2636:5	2636:5	10	if
LEAF_NODE	2636:5	2636:5	11	if
LEAF_NODE	2636:8	2636:8	10	(
CONDITION	2636:9	2636:9	10	img -> alpha == EXTRASAMPLE_ASSOCALPHA && img -> samplesperpixel >= 4
EXPR	2636:9	2636:9	11	img -> alpha == EXTRASAMPLE_ASSOCALPHA && img -> samplesperpixel >= 4
AND	2636:9	2637:6	12	img -> alpha == EXTRASAMPLE_ASSOCALPHA && img -> samplesperpixel >= 4
EXPR	2636:9	2636:23	13	img -> alpha == EXTRASAMPLE_ASSOCALPHA
FIELD	2636:9	2636:14	14	img -> alpha
LEAF_NODE	2636:9	2636:9	15	img
LEAF_NODE	2636:12	2636:12	15	->
LEAF_NODE	2636:14	2636:14	15	alpha
EQ_OPERATOR	2636:20	2636:20	14	==
LEAF_NODE	2636:20	2636:20	15	==
FIELD	2636:23	2636:23	14	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	2636:23	2636:23	15	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	2636:46	2636:46	13	&&
EXPR	2637:6	2637:29	13	img -> samplesperpixel >= 4
FIELD	2637:6	2637:11	14	img -> samplesperpixel
LEAF_NODE	2637:6	2637:6	15	img
LEAF_NODE	2637:9	2637:9	15	->
LEAF_NODE	2637:11	2637:11	15	samplesperpixel
REL_OPERATOR	2637:27	2637:27	14	>=
LEAF_NODE	2637:27	2637:27	15	>=
FIELD	2637:29	2637:29	14	4
LEAF_NODE	2637:29	2637:29	15	4
LEAF_NODE	2637:31	2637:31	10	)
STATEMENTS	2638:5	2641:5	10	
LEAF_NODE	2638:5	2638:5	11	{
STATEMENTS	2639:6	2639:6	11	
SELECTION	2639:6	2640:7	12	
KEYWORD	2639:6	2639:6	13	if
LEAF_NODE	2639:6	2639:6	14	if
LEAF_NODE	2639:9	2639:9	13	(
CONDITION	2639:10	2639:10	13	BuildMapBitdepth16To8 ( img )
EXPR	2639:10	2639:10	14	BuildMapBitdepth16To8 ( img )
FUNCTION_CALL	2639:10	2639:35	15	BuildMapBitdepth16To8 ( img )
CALLEE	2639:10	2639:10	16	BuildMapBitdepth16To8
LEAF_NODE	2639:10	2639:10	17	BuildMapBitdepth16To8
LEAF_NODE	2639:31	2639:31	16	(
ARGUMENT	2639:32	2639:32	16	img
FIELD	2639:32	2639:32	17	img
LEAF_NODE	2639:32	2639:32	18	img
LEAF_NODE	2639:35	2639:35	16	)
LEAF_NODE	2639:36	2639:36	13	)
STATEMENTS	2640:7	2640:7	13	
EXPR_STATEMENT	2640:7	2640:48	14	img -> put . contig = putRGBAAcontig16bittile ;
EXPR	2640:7	2640:7	15	img -> put . contig = putRGBAAcontig16bittile
ASSIGN	2640:7	2640:25	16	img -> put . contig = putRGBAAcontig16bittile
LVAL	2640:7	2640:7	17	img -> put . contig
FIELD	2640:7	2640:16	18	img -> put . contig
LEAF_NODE	2640:7	2640:7	19	img
LEAF_NODE	2640:10	2640:10	19	->
LEAF_NODE	2640:12	2640:12	19	put
LEAF_NODE	2640:15	2640:15	19	.
LEAF_NODE	2640:16	2640:16	19	contig
ASSIGN_OP	2640:23	2640:23	17	=
LEAF_NODE	2640:23	2640:23	18	=
RVAL	2640:25	2640:25	17	putRGBAAcontig16bittile
FIELD	2640:25	2640:25	18	putRGBAAcontig16bittile
LEAF_NODE	2640:25	2640:25	19	putRGBAAcontig16bittile
LEAF_NODE	2640:48	2640:48	15	;
LEAF_NODE	2641:5	2641:5	11	}
SELECTION	2642:5	2642:10	9	
KEYWORD	2642:5	2642:5	10	else
LEAF_NODE	2642:5	2642:5	11	else
STATEMENTS	2642:10	2642:10	10	
SELECTION	2642:10	2644:5	11	
KEYWORD	2642:10	2642:10	12	if
LEAF_NODE	2642:10	2642:10	13	if
LEAF_NODE	2642:13	2642:13	12	(
CONDITION	2642:14	2642:14	12	img -> alpha == EXTRASAMPLE_UNASSALPHA && img -> samplesperpixel >= 4
EXPR	2642:14	2642:14	13	img -> alpha == EXTRASAMPLE_UNASSALPHA && img -> samplesperpixel >= 4
AND	2642:14	2643:8	14	img -> alpha == EXTRASAMPLE_UNASSALPHA && img -> samplesperpixel >= 4
EXPR	2642:14	2642:28	15	img -> alpha == EXTRASAMPLE_UNASSALPHA
FIELD	2642:14	2642:19	16	img -> alpha
LEAF_NODE	2642:14	2642:14	17	img
LEAF_NODE	2642:17	2642:17	17	->
LEAF_NODE	2642:19	2642:19	17	alpha
EQ_OPERATOR	2642:25	2642:25	16	==
LEAF_NODE	2642:25	2642:25	17	==
FIELD	2642:28	2642:28	16	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	2642:28	2642:28	17	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	2642:51	2642:51	15	&&
EXPR	2643:8	2643:31	15	img -> samplesperpixel >= 4
FIELD	2643:8	2643:13	16	img -> samplesperpixel
LEAF_NODE	2643:8	2643:8	17	img
LEAF_NODE	2643:11	2643:11	17	->
LEAF_NODE	2643:13	2643:13	17	samplesperpixel
REL_OPERATOR	2643:29	2643:29	16	>=
LEAF_NODE	2643:29	2643:29	17	>=
FIELD	2643:31	2643:31	16	4
LEAF_NODE	2643:31	2643:31	17	4
LEAF_NODE	2643:33	2643:33	12	)
STATEMENTS	2644:5	2648:5	12	
LEAF_NODE	2644:5	2644:5	13	{
STATEMENTS	2645:6	2645:6	13	
SELECTION	2645:6	2647:7	14	
KEYWORD	2645:6	2645:6	15	if
LEAF_NODE	2645:6	2645:6	16	if
LEAF_NODE	2645:9	2645:9	15	(
CONDITION	2645:10	2645:10	15	BuildMapBitdepth16To8 ( img ) && BuildMapUaToAa ( img )
EXPR	2645:10	2645:10	16	BuildMapBitdepth16To8 ( img ) && BuildMapUaToAa ( img )
AND	2645:10	2646:10	17	BuildMapBitdepth16To8 ( img ) && BuildMapUaToAa ( img )
EXPR	2645:10	2645:10	18	BuildMapBitdepth16To8 ( img )
FUNCTION_CALL	2645:10	2645:35	19	BuildMapBitdepth16To8 ( img )
CALLEE	2645:10	2645:10	20	BuildMapBitdepth16To8
LEAF_NODE	2645:10	2645:10	21	BuildMapBitdepth16To8
LEAF_NODE	2645:31	2645:31	20	(
ARGUMENT	2645:32	2645:32	20	img
FIELD	2645:32	2645:32	21	img
LEAF_NODE	2645:32	2645:32	22	img
LEAF_NODE	2645:35	2645:35	20	)
LEAF_NODE	2645:37	2645:37	18	&&
EXPR	2646:10	2646:10	18	BuildMapUaToAa ( img )
FUNCTION_CALL	2646:10	2646:28	19	BuildMapUaToAa ( img )
CALLEE	2646:10	2646:10	20	BuildMapUaToAa
LEAF_NODE	2646:10	2646:10	21	BuildMapUaToAa
LEAF_NODE	2646:24	2646:24	20	(
ARGUMENT	2646:25	2646:25	20	img
FIELD	2646:25	2646:25	21	img
LEAF_NODE	2646:25	2646:25	22	img
LEAF_NODE	2646:28	2646:28	20	)
LEAF_NODE	2646:29	2646:29	15	)
STATEMENTS	2647:7	2647:7	15	
EXPR_STATEMENT	2647:7	2647:48	16	img -> put . contig = putRGBUAcontig16bittile ;
EXPR	2647:7	2647:7	17	img -> put . contig = putRGBUAcontig16bittile
ASSIGN	2647:7	2647:25	18	img -> put . contig = putRGBUAcontig16bittile
LVAL	2647:7	2647:7	19	img -> put . contig
FIELD	2647:7	2647:16	20	img -> put . contig
LEAF_NODE	2647:7	2647:7	21	img
LEAF_NODE	2647:10	2647:10	21	->
LEAF_NODE	2647:12	2647:12	21	put
LEAF_NODE	2647:15	2647:15	21	.
LEAF_NODE	2647:16	2647:16	21	contig
ASSIGN_OP	2647:23	2647:23	19	=
LEAF_NODE	2647:23	2647:23	20	=
RVAL	2647:25	2647:25	19	putRGBUAcontig16bittile
FIELD	2647:25	2647:25	20	putRGBUAcontig16bittile
LEAF_NODE	2647:25	2647:25	21	putRGBUAcontig16bittile
LEAF_NODE	2647:48	2647:48	17	;
LEAF_NODE	2648:5	2648:5	13	}
SELECTION	2649:5	2649:10	9	
KEYWORD	2649:5	2649:5	10	else
LEAF_NODE	2649:5	2649:5	11	else
STATEMENTS	2649:10	2649:10	10	
SELECTION	2649:10	2650:5	11	
KEYWORD	2649:10	2649:10	12	if
LEAF_NODE	2649:10	2649:10	13	if
LEAF_NODE	2649:12	2649:12	12	(
CONDITION	2649:14	2649:14	12	img -> samplesperpixel >= 3
EXPR	2649:14	2649:37	13	img -> samplesperpixel >= 3
FIELD	2649:14	2649:19	14	img -> samplesperpixel
LEAF_NODE	2649:14	2649:14	15	img
LEAF_NODE	2649:17	2649:17	15	->
LEAF_NODE	2649:19	2649:19	15	samplesperpixel
REL_OPERATOR	2649:35	2649:35	14	>=
LEAF_NODE	2649:35	2649:35	15	>=
FIELD	2649:37	2649:37	14	3
LEAF_NODE	2649:37	2649:37	15	3
LEAF_NODE	2649:39	2649:39	12	)
STATEMENTS	2650:5	2653:5	12	
LEAF_NODE	2650:5	2650:5	13	{
STATEMENTS	2651:6	2651:6	13	
SELECTION	2651:6	2652:7	14	
KEYWORD	2651:6	2651:6	15	if
LEAF_NODE	2651:6	2651:6	16	if
LEAF_NODE	2651:9	2651:9	15	(
CONDITION	2651:10	2651:10	15	BuildMapBitdepth16To8 ( img )
EXPR	2651:10	2651:10	16	BuildMapBitdepth16To8 ( img )
FUNCTION_CALL	2651:10	2651:35	17	BuildMapBitdepth16To8 ( img )
CALLEE	2651:10	2651:10	18	BuildMapBitdepth16To8
LEAF_NODE	2651:10	2651:10	19	BuildMapBitdepth16To8
LEAF_NODE	2651:31	2651:31	18	(
ARGUMENT	2651:32	2651:32	18	img
FIELD	2651:32	2651:32	19	img
LEAF_NODE	2651:32	2651:32	20	img
LEAF_NODE	2651:35	2651:35	18	)
LEAF_NODE	2651:36	2651:36	15	)
STATEMENTS	2652:7	2652:7	15	
EXPR_STATEMENT	2652:7	2652:46	16	img -> put . contig = putRGBcontig16bittile ;
EXPR	2652:7	2652:7	17	img -> put . contig = putRGBcontig16bittile
ASSIGN	2652:7	2652:25	18	img -> put . contig = putRGBcontig16bittile
LVAL	2652:7	2652:7	19	img -> put . contig
FIELD	2652:7	2652:16	20	img -> put . contig
LEAF_NODE	2652:7	2652:7	21	img
LEAF_NODE	2652:10	2652:10	21	->
LEAF_NODE	2652:12	2652:12	21	put
LEAF_NODE	2652:15	2652:15	21	.
LEAF_NODE	2652:16	2652:16	21	contig
ASSIGN_OP	2652:23	2652:23	19	=
LEAF_NODE	2652:23	2652:23	20	=
RVAL	2652:25	2652:25	19	putRGBcontig16bittile
FIELD	2652:25	2652:25	20	putRGBcontig16bittile
LEAF_NODE	2652:25	2652:25	21	putRGBcontig16bittile
LEAF_NODE	2652:46	2652:46	17	;
LEAF_NODE	2653:5	2653:5	13	}
JUMP_STATEMENT	2654:5	2654:10	9	break DESTINATION ;
KEYWORD	2654:5	2654:5	10	break
LEAF_NODE	2654:5	2654:5	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2654:10	2654:10	10	;
LEAF_NODE	2655:3	2655:3	8	}
JUMP_STATEMENT	2656:3	2656:8	6	break DESTINATION ;
KEYWORD	2656:3	2656:3	7	break
LEAF_NODE	2656:3	2656:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2656:8	2656:8	7	;
LABEL	2657:2	2657:28	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	2657:2	2657:2	7	case
LEAF_NODE	2657:7	2657:7	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	2657:28	2657:28	7	:
SELECTION	2658:3	2658:50	6	
KEYWORD	2658:3	2658:3	7	if
LEAF_NODE	2658:3	2658:3	8	if
LEAF_NODE	2658:6	2658:6	7	(
CONDITION	2658:7	2658:7	7	img -> samplesperpixel >= 4 && buildMap ( img )
EXPR	2658:7	2658:7	8	img -> samplesperpixel >= 4 && buildMap ( img )
AND	2658:7	2658:35	9	img -> samplesperpixel >= 4 && buildMap ( img )
EXPR	2658:7	2658:30	10	img -> samplesperpixel >= 4
FIELD	2658:7	2658:12	11	img -> samplesperpixel
LEAF_NODE	2658:7	2658:7	12	img
LEAF_NODE	2658:10	2658:10	12	->
LEAF_NODE	2658:12	2658:12	12	samplesperpixel
REL_OPERATOR	2658:28	2658:28	11	>=
LEAF_NODE	2658:28	2658:28	12	>=
FIELD	2658:30	2658:30	11	4
LEAF_NODE	2658:30	2658:30	12	4
LEAF_NODE	2658:32	2658:32	10	&&
EXPR	2658:35	2658:35	10	buildMap ( img )
FUNCTION_CALL	2658:35	2658:47	11	buildMap ( img )
CALLEE	2658:35	2658:35	12	buildMap
LEAF_NODE	2658:35	2658:35	13	buildMap
LEAF_NODE	2658:43	2658:43	12	(
ARGUMENT	2658:44	2658:44	12	img
FIELD	2658:44	2658:44	13	img
LEAF_NODE	2658:44	2658:44	14	img
LEAF_NODE	2658:47	2658:47	12	)
LEAF_NODE	2658:48	2658:48	7	)
STATEMENTS	2658:50	2665:3	7	
LEAF_NODE	2658:50	2658:50	8	{
STATEMENTS	2659:4	2659:4	8	
SELECTION	2659:4	2659:33	9	
KEYWORD	2659:4	2659:4	10	if
LEAF_NODE	2659:4	2659:4	11	if
LEAF_NODE	2659:7	2659:7	10	(
CONDITION	2659:8	2659:8	10	img -> bitspersample == 8
EXPR	2659:8	2659:30	11	img -> bitspersample == 8
FIELD	2659:8	2659:13	12	img -> bitspersample
LEAF_NODE	2659:8	2659:8	13	img
LEAF_NODE	2659:11	2659:11	13	->
LEAF_NODE	2659:13	2659:13	13	bitspersample
EQ_OPERATOR	2659:27	2659:27	12	==
LEAF_NODE	2659:27	2659:27	13	==
FIELD	2659:30	2659:30	12	8
LEAF_NODE	2659:30	2659:30	13	8
LEAF_NODE	2659:31	2659:31	10	)
STATEMENTS	2659:33	2664:4	10	
LEAF_NODE	2659:33	2659:33	11	{
STATEMENTS	2660:5	2662:5	11	
SELECTION	2660:5	2661:6	12	
KEYWORD	2660:5	2660:5	13	if
LEAF_NODE	2660:5	2660:5	14	if
LEAF_NODE	2660:8	2660:8	13	(
CONDITION	2660:9	2660:9	13	! img -> Map
EXPR	2660:9	2660:9	14	! img -> Map
UNARY_EXPR	2660:9	2660:10	15	! img -> Map
UNARY_OPERATOR	2660:9	2660:9	16	!
LEAF_NODE	2660:9	2660:9	17	!
FIELD	2660:10	2660:15	16	img -> Map
LEAF_NODE	2660:10	2660:10	17	img
LEAF_NODE	2660:13	2660:13	17	->
LEAF_NODE	2660:15	2660:15	17	Map
LEAF_NODE	2660:18	2660:18	13	)
STATEMENTS	2661:6	2661:6	13	
EXPR_STATEMENT	2661:6	2661:48	14	img -> put . contig = putRGBcontig8bitCMYKtile ;
EXPR	2661:6	2661:6	15	img -> put . contig = putRGBcontig8bitCMYKtile
ASSIGN	2661:6	2661:24	16	img -> put . contig = putRGBcontig8bitCMYKtile
LVAL	2661:6	2661:6	17	img -> put . contig
FIELD	2661:6	2661:15	18	img -> put . contig
LEAF_NODE	2661:6	2661:6	19	img
LEAF_NODE	2661:9	2661:9	19	->
LEAF_NODE	2661:11	2661:11	19	put
LEAF_NODE	2661:14	2661:14	19	.
LEAF_NODE	2661:15	2661:15	19	contig
ASSIGN_OP	2661:22	2661:22	17	=
LEAF_NODE	2661:22	2661:22	18	=
RVAL	2661:24	2661:24	17	putRGBcontig8bitCMYKtile
FIELD	2661:24	2661:24	18	putRGBcontig8bitCMYKtile
LEAF_NODE	2661:24	2661:24	19	putRGBcontig8bitCMYKtile
LEAF_NODE	2661:48	2661:48	15	;
SELECTION	2662:5	2663:6	12	
KEYWORD	2662:5	2662:5	13	else
LEAF_NODE	2662:5	2662:5	14	else
STATEMENTS	2663:6	2663:6	13	
EXPR_STATEMENT	2663:6	2663:51	14	img -> put . contig = putRGBcontig8bitCMYKMaptile ;
EXPR	2663:6	2663:6	15	img -> put . contig = putRGBcontig8bitCMYKMaptile
ASSIGN	2663:6	2663:24	16	img -> put . contig = putRGBcontig8bitCMYKMaptile
LVAL	2663:6	2663:6	17	img -> put . contig
FIELD	2663:6	2663:15	18	img -> put . contig
LEAF_NODE	2663:6	2663:6	19	img
LEAF_NODE	2663:9	2663:9	19	->
LEAF_NODE	2663:11	2663:11	19	put
LEAF_NODE	2663:14	2663:14	19	.
LEAF_NODE	2663:15	2663:15	19	contig
ASSIGN_OP	2663:22	2663:22	17	=
LEAF_NODE	2663:22	2663:22	18	=
RVAL	2663:24	2663:24	17	putRGBcontig8bitCMYKMaptile
FIELD	2663:24	2663:24	18	putRGBcontig8bitCMYKMaptile
LEAF_NODE	2663:24	2663:24	19	putRGBcontig8bitCMYKMaptile
LEAF_NODE	2663:51	2663:51	15	;
LEAF_NODE	2664:4	2664:4	11	}
LEAF_NODE	2665:3	2665:3	8	}
JUMP_STATEMENT	2666:3	2666:8	6	break DESTINATION ;
KEYWORD	2666:3	2666:3	7	break
LEAF_NODE	2666:3	2666:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2666:8	2666:8	7	;
LABEL	2667:2	2667:26	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	2667:2	2667:2	7	case
LEAF_NODE	2667:7	2667:7	7	PHOTOMETRIC_PALETTE
LEAF_NODE	2667:26	2667:26	7	:
SELECTION	2668:3	2668:22	6	
KEYWORD	2668:3	2668:3	7	if
LEAF_NODE	2668:3	2668:3	8	if
LEAF_NODE	2668:6	2668:6	7	(
CONDITION	2668:7	2668:7	7	buildMap ( img )
EXPR	2668:7	2668:7	8	buildMap ( img )
FUNCTION_CALL	2668:7	2668:19	9	buildMap ( img )
CALLEE	2668:7	2668:7	10	buildMap
LEAF_NODE	2668:7	2668:7	11	buildMap
LEAF_NODE	2668:15	2668:15	10	(
ARGUMENT	2668:16	2668:16	10	img
FIELD	2668:16	2668:16	11	img
LEAF_NODE	2668:16	2668:16	12	img
LEAF_NODE	2668:19	2668:19	10	)
LEAF_NODE	2668:20	2668:20	7	)
STATEMENTS	2668:22	2683:3	7	
LEAF_NODE	2668:22	2668:22	8	{
STATEMENTS	2669:4	2669:4	8	
SELECTION	2669:4	2669:32	9	
KEYWORD	2669:4	2669:4	10	switch
LEAF_NODE	2669:4	2669:4	11	switch
LEAF_NODE	2669:11	2669:11	10	(
CONDITION	2669:12	2669:12	10	img -> bitspersample
EXPR	2669:12	2669:12	11	img -> bitspersample
FIELD	2669:12	2669:17	12	img -> bitspersample
LEAF_NODE	2669:12	2669:12	13	img
LEAF_NODE	2669:15	2669:15	13	->
LEAF_NODE	2669:17	2669:17	13	bitspersample
LEAF_NODE	2669:30	2669:30	10	)
STATEMENTS	2669:32	2682:4	10	
LEAF_NODE	2669:32	2669:32	11	{
STATEMENTS	2670:5	2681:6	11	
LABEL	2670:5	2670:11	12	case 8 :
LEAF_NODE	2670:5	2670:5	13	case
LEAF_NODE	2670:10	2670:10	13	8
LEAF_NODE	2670:11	2670:11	13	:
EXPR_STATEMENT	2671:6	2671:39	12	img -> put . contig = put8bitcmaptile ;
EXPR	2671:6	2671:6	13	img -> put . contig = put8bitcmaptile
ASSIGN	2671:6	2671:24	14	img -> put . contig = put8bitcmaptile
LVAL	2671:6	2671:6	15	img -> put . contig
FIELD	2671:6	2671:15	16	img -> put . contig
LEAF_NODE	2671:6	2671:6	17	img
LEAF_NODE	2671:9	2671:9	17	->
LEAF_NODE	2671:11	2671:11	17	put
LEAF_NODE	2671:14	2671:14	17	.
LEAF_NODE	2671:15	2671:15	17	contig
ASSIGN_OP	2671:22	2671:22	15	=
LEAF_NODE	2671:22	2671:22	16	=
RVAL	2671:24	2671:24	15	put8bitcmaptile
FIELD	2671:24	2671:24	16	put8bitcmaptile
LEAF_NODE	2671:24	2671:24	17	put8bitcmaptile
LEAF_NODE	2671:39	2671:39	13	;
JUMP_STATEMENT	2672:6	2672:11	12	break DESTINATION ;
KEYWORD	2672:6	2672:6	13	break
LEAF_NODE	2672:6	2672:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2672:11	2672:11	13	;
LABEL	2673:5	2673:11	12	case 4 :
LEAF_NODE	2673:5	2673:5	13	case
LEAF_NODE	2673:10	2673:10	13	4
LEAF_NODE	2673:11	2673:11	13	:
EXPR_STATEMENT	2674:6	2674:39	12	img -> put . contig = put4bitcmaptile ;
EXPR	2674:6	2674:6	13	img -> put . contig = put4bitcmaptile
ASSIGN	2674:6	2674:24	14	img -> put . contig = put4bitcmaptile
LVAL	2674:6	2674:6	15	img -> put . contig
FIELD	2674:6	2674:15	16	img -> put . contig
LEAF_NODE	2674:6	2674:6	17	img
LEAF_NODE	2674:9	2674:9	17	->
LEAF_NODE	2674:11	2674:11	17	put
LEAF_NODE	2674:14	2674:14	17	.
LEAF_NODE	2674:15	2674:15	17	contig
ASSIGN_OP	2674:22	2674:22	15	=
LEAF_NODE	2674:22	2674:22	16	=
RVAL	2674:24	2674:24	15	put4bitcmaptile
FIELD	2674:24	2674:24	16	put4bitcmaptile
LEAF_NODE	2674:24	2674:24	17	put4bitcmaptile
LEAF_NODE	2674:39	2674:39	13	;
JUMP_STATEMENT	2675:6	2675:11	12	break DESTINATION ;
KEYWORD	2675:6	2675:6	13	break
LEAF_NODE	2675:6	2675:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2675:11	2675:11	13	;
LABEL	2676:5	2676:11	12	case 2 :
LEAF_NODE	2676:5	2676:5	13	case
LEAF_NODE	2676:10	2676:10	13	2
LEAF_NODE	2676:11	2676:11	13	:
EXPR_STATEMENT	2677:6	2677:39	12	img -> put . contig = put2bitcmaptile ;
EXPR	2677:6	2677:6	13	img -> put . contig = put2bitcmaptile
ASSIGN	2677:6	2677:24	14	img -> put . contig = put2bitcmaptile
LVAL	2677:6	2677:6	15	img -> put . contig
FIELD	2677:6	2677:15	16	img -> put . contig
LEAF_NODE	2677:6	2677:6	17	img
LEAF_NODE	2677:9	2677:9	17	->
LEAF_NODE	2677:11	2677:11	17	put
LEAF_NODE	2677:14	2677:14	17	.
LEAF_NODE	2677:15	2677:15	17	contig
ASSIGN_OP	2677:22	2677:22	15	=
LEAF_NODE	2677:22	2677:22	16	=
RVAL	2677:24	2677:24	15	put2bitcmaptile
FIELD	2677:24	2677:24	16	put2bitcmaptile
LEAF_NODE	2677:24	2677:24	17	put2bitcmaptile
LEAF_NODE	2677:39	2677:39	13	;
JUMP_STATEMENT	2678:6	2678:11	12	break DESTINATION ;
KEYWORD	2678:6	2678:6	13	break
LEAF_NODE	2678:6	2678:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2678:11	2678:11	13	;
LABEL	2679:5	2679:11	12	case 1 :
LEAF_NODE	2679:5	2679:5	13	case
LEAF_NODE	2679:10	2679:10	13	1
LEAF_NODE	2679:11	2679:11	13	:
EXPR_STATEMENT	2680:6	2680:39	12	img -> put . contig = put1bitcmaptile ;
EXPR	2680:6	2680:6	13	img -> put . contig = put1bitcmaptile
ASSIGN	2680:6	2680:24	14	img -> put . contig = put1bitcmaptile
LVAL	2680:6	2680:6	15	img -> put . contig
FIELD	2680:6	2680:15	16	img -> put . contig
LEAF_NODE	2680:6	2680:6	17	img
LEAF_NODE	2680:9	2680:9	17	->
LEAF_NODE	2680:11	2680:11	17	put
LEAF_NODE	2680:14	2680:14	17	.
LEAF_NODE	2680:15	2680:15	17	contig
ASSIGN_OP	2680:22	2680:22	15	=
LEAF_NODE	2680:22	2680:22	16	=
RVAL	2680:24	2680:24	15	put1bitcmaptile
FIELD	2680:24	2680:24	16	put1bitcmaptile
LEAF_NODE	2680:24	2680:24	17	put1bitcmaptile
LEAF_NODE	2680:39	2680:39	13	;
JUMP_STATEMENT	2681:6	2681:11	12	break DESTINATION ;
KEYWORD	2681:6	2681:6	13	break
LEAF_NODE	2681:6	2681:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2681:11	2681:11	13	;
LEAF_NODE	2682:4	2682:4	11	}
LEAF_NODE	2683:3	2683:3	8	}
JUMP_STATEMENT	2684:3	2684:8	6	break DESTINATION ;
KEYWORD	2684:3	2684:3	7	break
LEAF_NODE	2684:3	2684:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2684:8	2684:8	7	;
LABEL	2685:2	2685:29	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	2685:2	2685:2	7	case
LEAF_NODE	2685:7	2685:7	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	2685:29	2685:29	7	:
LABEL	2686:2	2686:29	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	2686:2	2686:2	7	case
LEAF_NODE	2686:7	2686:7	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	2686:29	2686:29	7	:
SELECTION	2687:3	2687:22	6	
KEYWORD	2687:3	2687:3	7	if
LEAF_NODE	2687:3	2687:3	8	if
LEAF_NODE	2687:6	2687:6	7	(
CONDITION	2687:7	2687:7	7	buildMap ( img )
EXPR	2687:7	2687:7	8	buildMap ( img )
FUNCTION_CALL	2687:7	2687:19	9	buildMap ( img )
CALLEE	2687:7	2687:7	10	buildMap
LEAF_NODE	2687:7	2687:7	11	buildMap
LEAF_NODE	2687:15	2687:15	10	(
ARGUMENT	2687:16	2687:16	10	img
FIELD	2687:16	2687:16	11	img
LEAF_NODE	2687:16	2687:16	12	img
LEAF_NODE	2687:19	2687:19	10	)
LEAF_NODE	2687:20	2687:20	7	)
STATEMENTS	2687:22	2708:3	7	
LEAF_NODE	2687:22	2687:22	8	{
STATEMENTS	2688:4	2688:4	8	
SELECTION	2688:4	2688:32	9	
KEYWORD	2688:4	2688:4	10	switch
LEAF_NODE	2688:4	2688:4	11	switch
LEAF_NODE	2688:11	2688:11	10	(
CONDITION	2688:12	2688:12	10	img -> bitspersample
EXPR	2688:12	2688:12	11	img -> bitspersample
FIELD	2688:12	2688:17	12	img -> bitspersample
LEAF_NODE	2688:12	2688:12	13	img
LEAF_NODE	2688:15	2688:15	13	->
LEAF_NODE	2688:17	2688:17	13	bitspersample
LEAF_NODE	2688:30	2688:30	10	)
STATEMENTS	2688:32	2707:4	10	
LEAF_NODE	2688:32	2688:32	11	{
STATEMENTS	2689:5	2706:6	11	
LABEL	2689:5	2689:12	12	case 16 :
LEAF_NODE	2689:5	2689:5	13	case
LEAF_NODE	2689:10	2689:10	13	16
LEAF_NODE	2689:12	2689:12	13	:
EXPR_STATEMENT	2690:6	2690:38	12	img -> put . contig = put16bitbwtile ;
EXPR	2690:6	2690:6	13	img -> put . contig = put16bitbwtile
ASSIGN	2690:6	2690:24	14	img -> put . contig = put16bitbwtile
LVAL	2690:6	2690:6	15	img -> put . contig
FIELD	2690:6	2690:15	16	img -> put . contig
LEAF_NODE	2690:6	2690:6	17	img
LEAF_NODE	2690:9	2690:9	17	->
LEAF_NODE	2690:11	2690:11	17	put
LEAF_NODE	2690:14	2690:14	17	.
LEAF_NODE	2690:15	2690:15	17	contig
ASSIGN_OP	2690:22	2690:22	15	=
LEAF_NODE	2690:22	2690:22	16	=
RVAL	2690:24	2690:24	15	put16bitbwtile
FIELD	2690:24	2690:24	16	put16bitbwtile
LEAF_NODE	2690:24	2690:24	17	put16bitbwtile
LEAF_NODE	2690:38	2690:38	13	;
JUMP_STATEMENT	2691:6	2691:11	12	break DESTINATION ;
KEYWORD	2691:6	2691:6	13	break
LEAF_NODE	2691:6	2691:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2691:11	2691:11	13	;
LABEL	2692:5	2692:11	12	case 8 :
LEAF_NODE	2692:5	2692:5	13	case
LEAF_NODE	2692:10	2692:10	13	8
LEAF_NODE	2692:11	2692:11	13	:
SELECTION	2693:6	2694:7	12	
KEYWORD	2693:6	2693:6	13	if
LEAF_NODE	2693:6	2693:6	14	if
LEAF_NODE	2693:9	2693:9	13	(
CONDITION	2693:10	2693:10	13	img -> alpha && img -> samplesperpixel == 2
EXPR	2693:10	2693:10	14	img -> alpha && img -> samplesperpixel == 2
AND	2693:10	2693:24	15	img -> alpha && img -> samplesperpixel == 2
EXPR	2693:10	2693:10	16	img -> alpha
FIELD	2693:10	2693:15	17	img -> alpha
LEAF_NODE	2693:10	2693:10	18	img
LEAF_NODE	2693:13	2693:13	18	->
LEAF_NODE	2693:15	2693:15	18	alpha
LEAF_NODE	2693:21	2693:21	16	&&
EXPR	2693:24	2693:48	16	img -> samplesperpixel == 2
FIELD	2693:24	2693:29	17	img -> samplesperpixel
LEAF_NODE	2693:24	2693:24	18	img
LEAF_NODE	2693:27	2693:27	18	->
LEAF_NODE	2693:29	2693:29	18	samplesperpixel
EQ_OPERATOR	2693:45	2693:45	17	==
LEAF_NODE	2693:45	2693:45	18	==
FIELD	2693:48	2693:48	17	2
LEAF_NODE	2693:48	2693:48	18	2
LEAF_NODE	2693:49	2693:49	13	)
STATEMENTS	2694:7	2694:7	13	
EXPR_STATEMENT	2694:7	2694:37	14	img -> put . contig = putagreytile ;
EXPR	2694:7	2694:7	15	img -> put . contig = putagreytile
ASSIGN	2694:7	2694:25	16	img -> put . contig = putagreytile
LVAL	2694:7	2694:7	17	img -> put . contig
FIELD	2694:7	2694:16	18	img -> put . contig
LEAF_NODE	2694:7	2694:7	19	img
LEAF_NODE	2694:10	2694:10	19	->
LEAF_NODE	2694:12	2694:12	19	put
LEAF_NODE	2694:15	2694:15	19	.
LEAF_NODE	2694:16	2694:16	19	contig
ASSIGN_OP	2694:23	2694:23	17	=
LEAF_NODE	2694:23	2694:23	18	=
RVAL	2694:25	2694:25	17	putagreytile
FIELD	2694:25	2694:25	18	putagreytile
LEAF_NODE	2694:25	2694:25	19	putagreytile
LEAF_NODE	2694:37	2694:37	15	;
SELECTION	2695:6	2696:7	12	
KEYWORD	2695:6	2695:6	13	else
LEAF_NODE	2695:6	2695:6	14	else
STATEMENTS	2696:7	2696:7	13	
EXPR_STATEMENT	2696:7	2696:36	14	img -> put . contig = putgreytile ;
EXPR	2696:7	2696:7	15	img -> put . contig = putgreytile
ASSIGN	2696:7	2696:25	16	img -> put . contig = putgreytile
LVAL	2696:7	2696:7	17	img -> put . contig
FIELD	2696:7	2696:16	18	img -> put . contig
LEAF_NODE	2696:7	2696:7	19	img
LEAF_NODE	2696:10	2696:10	19	->
LEAF_NODE	2696:12	2696:12	19	put
LEAF_NODE	2696:15	2696:15	19	.
LEAF_NODE	2696:16	2696:16	19	contig
ASSIGN_OP	2696:23	2696:23	17	=
LEAF_NODE	2696:23	2696:23	18	=
RVAL	2696:25	2696:25	17	putgreytile
FIELD	2696:25	2696:25	18	putgreytile
LEAF_NODE	2696:25	2696:25	19	putgreytile
LEAF_NODE	2696:36	2696:36	15	;
JUMP_STATEMENT	2697:6	2697:11	12	break DESTINATION ;
KEYWORD	2697:6	2697:6	13	break
LEAF_NODE	2697:6	2697:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2697:11	2697:11	13	;
LABEL	2698:5	2698:11	12	case 4 :
LEAF_NODE	2698:5	2698:5	13	case
LEAF_NODE	2698:10	2698:10	13	4
LEAF_NODE	2698:11	2698:11	13	:
EXPR_STATEMENT	2699:6	2699:37	12	img -> put . contig = put4bitbwtile ;
EXPR	2699:6	2699:6	13	img -> put . contig = put4bitbwtile
ASSIGN	2699:6	2699:24	14	img -> put . contig = put4bitbwtile
LVAL	2699:6	2699:6	15	img -> put . contig
FIELD	2699:6	2699:15	16	img -> put . contig
LEAF_NODE	2699:6	2699:6	17	img
LEAF_NODE	2699:9	2699:9	17	->
LEAF_NODE	2699:11	2699:11	17	put
LEAF_NODE	2699:14	2699:14	17	.
LEAF_NODE	2699:15	2699:15	17	contig
ASSIGN_OP	2699:22	2699:22	15	=
LEAF_NODE	2699:22	2699:22	16	=
RVAL	2699:24	2699:24	15	put4bitbwtile
FIELD	2699:24	2699:24	16	put4bitbwtile
LEAF_NODE	2699:24	2699:24	17	put4bitbwtile
LEAF_NODE	2699:37	2699:37	13	;
JUMP_STATEMENT	2700:6	2700:11	12	break DESTINATION ;
KEYWORD	2700:6	2700:6	13	break
LEAF_NODE	2700:6	2700:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2700:11	2700:11	13	;
LABEL	2701:5	2701:11	12	case 2 :
LEAF_NODE	2701:5	2701:5	13	case
LEAF_NODE	2701:10	2701:10	13	2
LEAF_NODE	2701:11	2701:11	13	:
EXPR_STATEMENT	2702:6	2702:37	12	img -> put . contig = put2bitbwtile ;
EXPR	2702:6	2702:6	13	img -> put . contig = put2bitbwtile
ASSIGN	2702:6	2702:24	14	img -> put . contig = put2bitbwtile
LVAL	2702:6	2702:6	15	img -> put . contig
FIELD	2702:6	2702:15	16	img -> put . contig
LEAF_NODE	2702:6	2702:6	17	img
LEAF_NODE	2702:9	2702:9	17	->
LEAF_NODE	2702:11	2702:11	17	put
LEAF_NODE	2702:14	2702:14	17	.
LEAF_NODE	2702:15	2702:15	17	contig
ASSIGN_OP	2702:22	2702:22	15	=
LEAF_NODE	2702:22	2702:22	16	=
RVAL	2702:24	2702:24	15	put2bitbwtile
FIELD	2702:24	2702:24	16	put2bitbwtile
LEAF_NODE	2702:24	2702:24	17	put2bitbwtile
LEAF_NODE	2702:37	2702:37	13	;
JUMP_STATEMENT	2703:6	2703:11	12	break DESTINATION ;
KEYWORD	2703:6	2703:6	13	break
LEAF_NODE	2703:6	2703:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2703:11	2703:11	13	;
LABEL	2704:5	2704:11	12	case 1 :
LEAF_NODE	2704:5	2704:5	13	case
LEAF_NODE	2704:10	2704:10	13	1
LEAF_NODE	2704:11	2704:11	13	:
EXPR_STATEMENT	2705:6	2705:37	12	img -> put . contig = put1bitbwtile ;
EXPR	2705:6	2705:6	13	img -> put . contig = put1bitbwtile
ASSIGN	2705:6	2705:24	14	img -> put . contig = put1bitbwtile
LVAL	2705:6	2705:6	15	img -> put . contig
FIELD	2705:6	2705:15	16	img -> put . contig
LEAF_NODE	2705:6	2705:6	17	img
LEAF_NODE	2705:9	2705:9	17	->
LEAF_NODE	2705:11	2705:11	17	put
LEAF_NODE	2705:14	2705:14	17	.
LEAF_NODE	2705:15	2705:15	17	contig
ASSIGN_OP	2705:22	2705:22	15	=
LEAF_NODE	2705:22	2705:22	16	=
RVAL	2705:24	2705:24	15	put1bitbwtile
FIELD	2705:24	2705:24	16	put1bitbwtile
LEAF_NODE	2705:24	2705:24	17	put1bitbwtile
LEAF_NODE	2705:37	2705:37	13	;
JUMP_STATEMENT	2706:6	2706:11	12	break DESTINATION ;
KEYWORD	2706:6	2706:6	13	break
LEAF_NODE	2706:6	2706:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2706:11	2706:11	13	;
LEAF_NODE	2707:4	2707:4	11	}
LEAF_NODE	2708:3	2708:3	8	}
JUMP_STATEMENT	2709:3	2709:8	6	break DESTINATION ;
KEYWORD	2709:3	2709:3	7	break
LEAF_NODE	2709:3	2709:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2709:8	2709:8	7	;
LABEL	2710:2	2710:24	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	2710:2	2710:2	7	case
LEAF_NODE	2710:7	2710:7	7	PHOTOMETRIC_YCBCR
LEAF_NODE	2710:24	2710:24	7	:
SELECTION	2711:3	2712:3	6	
KEYWORD	2711:3	2711:3	7	if
LEAF_NODE	2711:3	2711:3	8	if
LEAF_NODE	2711:6	2711:6	7	(
CONDITION	2711:7	2711:7	7	( img -> bitspersample == 8 ) && ( img -> samplesperpixel == 3 )
EXPR	2711:7	2711:7	8	( img -> bitspersample == 8 ) && ( img -> samplesperpixel == 3 )
AND	2711:7	2711:34	9	( img -> bitspersample == 8 ) && ( img -> samplesperpixel == 3 )
EXPR	2711:7	2711:29	10	( img -> bitspersample == 8 )
LEAF_NODE	2711:7	2711:7	11	(
FIELD	2711:8	2711:13	11	img -> bitspersample
LEAF_NODE	2711:8	2711:8	12	img
LEAF_NODE	2711:11	2711:11	12	->
LEAF_NODE	2711:13	2711:13	12	bitspersample
EQ_OPERATOR	2711:26	2711:26	11	==
LEAF_NODE	2711:26	2711:26	12	==
FIELD	2711:28	2711:28	11	8
LEAF_NODE	2711:28	2711:28	12	8
LEAF_NODE	2711:29	2711:29	11	)
LEAF_NODE	2711:31	2711:31	10	&&
EXPR	2711:34	2711:58	10	( img -> samplesperpixel == 3 )
LEAF_NODE	2711:34	2711:34	11	(
FIELD	2711:35	2711:40	11	img -> samplesperpixel
LEAF_NODE	2711:35	2711:35	12	img
LEAF_NODE	2711:38	2711:38	12	->
LEAF_NODE	2711:40	2711:40	12	samplesperpixel
EQ_OPERATOR	2711:55	2711:55	11	==
LEAF_NODE	2711:55	2711:55	12	==
FIELD	2711:57	2711:57	11	3
LEAF_NODE	2711:57	2711:57	12	3
LEAF_NODE	2711:58	2711:58	11	)
LEAF_NODE	2711:59	2711:59	7	)
STATEMENTS	2712:3	2751:3	7	
LEAF_NODE	2712:3	2712:3	8	{
STATEMENTS	2713:4	2713:4	8	
SELECTION	2713:4	2714:4	9	
KEYWORD	2713:4	2713:4	10	if
LEAF_NODE	2713:4	2713:4	11	if
LEAF_NODE	2713:7	2713:7	10	(
CONDITION	2713:8	2713:8	10	initYCbCrConversion ( img ) != 0
EXPR	2713:8	2713:34	11	initYCbCrConversion ( img ) != 0
FUNCTION_CALL	2713:8	2713:31	12	initYCbCrConversion ( img )
CALLEE	2713:8	2713:8	13	initYCbCrConversion
LEAF_NODE	2713:8	2713:8	14	initYCbCrConversion
LEAF_NODE	2713:27	2713:27	13	(
ARGUMENT	2713:28	2713:28	13	img
FIELD	2713:28	2713:28	14	img
LEAF_NODE	2713:28	2713:28	15	img
LEAF_NODE	2713:31	2713:31	13	)
EQ_OPERATOR	2713:32	2713:32	12	!=
LEAF_NODE	2713:32	2713:32	13	!=
FIELD	2713:34	2713:34	12	0
LEAF_NODE	2713:34	2713:34	13	0
LEAF_NODE	2713:35	2713:35	10	)
STATEMENTS	2714:4	2750:4	10	
LEAF_NODE	2714:4	2714:4	11	{
STATEMENTS	2724:5	2727:5	11	
SIMPLE_DECL	2724:5	2724:26	12	uint16 SubsamplingHor ;
VAR_DECL	2724:5	2724:12	13	uint16 SubsamplingHor
TYPE	2724:5	2724:5	14	uint16
TYPE_NAME	2724:5	2724:5	15	uint16
LEAF_NODE	2724:5	2724:5	16	uint16
NAME	2724:12	2724:12	14	SubsamplingHor
LEAF_NODE	2724:12	2724:12	15	SubsamplingHor
LEAF_NODE	2724:26	2724:26	13	;
SIMPLE_DECL	2725:5	2725:26	12	uint16 SubsamplingVer ;
VAR_DECL	2725:5	2725:12	13	uint16 SubsamplingVer
TYPE	2725:5	2725:5	14	uint16
TYPE_NAME	2725:5	2725:5	15	uint16
LEAF_NODE	2725:5	2725:5	16	uint16
NAME	2725:12	2725:12	14	SubsamplingVer
LEAF_NODE	2725:12	2725:12	15	SubsamplingVer
LEAF_NODE	2725:26	2725:26	13	;
EXPR_STATEMENT	2726:5	2726:96	12	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_YCBCRSUBSAMPLING , & SubsamplingHor , & SubsamplingVer ) ;
EXPR	2726:5	2726:5	13	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_YCBCRSUBSAMPLING , & SubsamplingHor , & SubsamplingVer )
FUNCTION_CALL	2726:5	2726:95	14	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_YCBCRSUBSAMPLING , & SubsamplingHor , & SubsamplingVer )
CALLEE	2726:5	2726:5	15	TIFFGetFieldDefaulted
LEAF_NODE	2726:5	2726:5	16	TIFFGetFieldDefaulted
LEAF_NODE	2726:26	2726:26	15	(
ARGUMENT	2726:27	2726:27	15	img -> tif
FIELD	2726:27	2726:32	16	img -> tif
LEAF_NODE	2726:27	2726:27	17	img
LEAF_NODE	2726:30	2726:30	17	->
LEAF_NODE	2726:32	2726:32	17	tif
LEAF_NODE	2726:35	2726:35	15	,
ARGUMENT	2726:37	2726:37	15	TIFFTAG_YCBCRSUBSAMPLING
FIELD	2726:37	2726:37	16	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2726:37	2726:37	17	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2726:61	2726:61	15	,
ARGUMENT	2726:63	2726:63	15	& SubsamplingHor
UNARY_EXPR	2726:63	2726:64	16	& SubsamplingHor
UNARY_OPERATOR	2726:63	2726:63	17	&
LEAF_NODE	2726:63	2726:63	18	&
FIELD	2726:64	2726:64	17	SubsamplingHor
LEAF_NODE	2726:64	2726:64	18	SubsamplingHor
LEAF_NODE	2726:78	2726:78	15	,
ARGUMENT	2726:80	2726:80	15	& SubsamplingVer
UNARY_EXPR	2726:80	2726:81	16	& SubsamplingVer
UNARY_OPERATOR	2726:80	2726:80	17	&
LEAF_NODE	2726:80	2726:80	18	&
FIELD	2726:81	2726:81	17	SubsamplingVer
LEAF_NODE	2726:81	2726:81	18	SubsamplingVer
LEAF_NODE	2726:95	2726:95	15	)
LEAF_NODE	2726:96	2726:96	13	;
SELECTION	2727:5	2727:49	12	
KEYWORD	2727:5	2727:5	13	switch
LEAF_NODE	2727:5	2727:5	14	switch
LEAF_NODE	2727:12	2727:12	13	(
CONDITION	2727:13	2727:13	13	( SubsamplingHor << 4 ) | SubsamplingVer
EXPR	2727:13	2727:13	14	( SubsamplingHor << 4 ) | SubsamplingVer
BIT_OR	2727:13	2727:33	15	( SubsamplingHor << 4 ) | SubsamplingVer
BIT_OR_ELEM	2727:13	2727:31	16	( SubsamplingHor << 4 )
LEAF_NODE	2727:13	2727:13	17	(
FIELD	2727:14	2727:14	17	SubsamplingHor
LEAF_NODE	2727:14	2727:14	18	SubsamplingHor
LEAF_NODE	2727:28	2727:28	17	<<
FIELD	2727:30	2727:30	17	4
LEAF_NODE	2727:30	2727:30	18	4
LEAF_NODE	2727:31	2727:31	17	)
LEAF_NODE	2727:32	2727:32	16	|
BIT_OR_ELEM	2727:33	2727:33	16	SubsamplingVer
FIELD	2727:33	2727:33	17	SubsamplingVer
LEAF_NODE	2727:33	2727:33	18	SubsamplingVer
LEAF_NODE	2727:47	2727:47	13	)
STATEMENTS	2727:49	2749:5	13	
LEAF_NODE	2727:49	2727:49	14	{
STATEMENTS	2728:6	2748:7	14	
LABEL	2728:6	2728:15	15	case 0x44 :
LEAF_NODE	2728:6	2728:6	16	case
LEAF_NODE	2728:11	2728:11	16	0x44
LEAF_NODE	2728:15	2728:15	16	:
EXPR_STATEMENT	2729:7	2729:49	15	img -> put . contig = putcontig8bitYCbCr44tile ;
EXPR	2729:7	2729:7	16	img -> put . contig = putcontig8bitYCbCr44tile
ASSIGN	2729:7	2729:25	17	img -> put . contig = putcontig8bitYCbCr44tile
LVAL	2729:7	2729:7	18	img -> put . contig
FIELD	2729:7	2729:16	19	img -> put . contig
LEAF_NODE	2729:7	2729:7	20	img
LEAF_NODE	2729:10	2729:10	20	->
LEAF_NODE	2729:12	2729:12	20	put
LEAF_NODE	2729:15	2729:15	20	.
LEAF_NODE	2729:16	2729:16	20	contig
ASSIGN_OP	2729:23	2729:23	18	=
LEAF_NODE	2729:23	2729:23	19	=
RVAL	2729:25	2729:25	18	putcontig8bitYCbCr44tile
FIELD	2729:25	2729:25	19	putcontig8bitYCbCr44tile
LEAF_NODE	2729:25	2729:25	20	putcontig8bitYCbCr44tile
LEAF_NODE	2729:49	2729:49	16	;
JUMP_STATEMENT	2730:7	2730:12	15	break DESTINATION ;
KEYWORD	2730:7	2730:7	16	break
LEAF_NODE	2730:7	2730:7	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2730:12	2730:12	16	;
LABEL	2731:6	2731:15	15	case 0x42 :
LEAF_NODE	2731:6	2731:6	16	case
LEAF_NODE	2731:11	2731:11	16	0x42
LEAF_NODE	2731:15	2731:15	16	:
EXPR_STATEMENT	2732:7	2732:49	15	img -> put . contig = putcontig8bitYCbCr42tile ;
EXPR	2732:7	2732:7	16	img -> put . contig = putcontig8bitYCbCr42tile
ASSIGN	2732:7	2732:25	17	img -> put . contig = putcontig8bitYCbCr42tile
LVAL	2732:7	2732:7	18	img -> put . contig
FIELD	2732:7	2732:16	19	img -> put . contig
LEAF_NODE	2732:7	2732:7	20	img
LEAF_NODE	2732:10	2732:10	20	->
LEAF_NODE	2732:12	2732:12	20	put
LEAF_NODE	2732:15	2732:15	20	.
LEAF_NODE	2732:16	2732:16	20	contig
ASSIGN_OP	2732:23	2732:23	18	=
LEAF_NODE	2732:23	2732:23	19	=
RVAL	2732:25	2732:25	18	putcontig8bitYCbCr42tile
FIELD	2732:25	2732:25	19	putcontig8bitYCbCr42tile
LEAF_NODE	2732:25	2732:25	20	putcontig8bitYCbCr42tile
LEAF_NODE	2732:49	2732:49	16	;
JUMP_STATEMENT	2733:7	2733:12	15	break DESTINATION ;
KEYWORD	2733:7	2733:7	16	break
LEAF_NODE	2733:7	2733:7	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2733:12	2733:12	16	;
LABEL	2734:6	2734:15	15	case 0x41 :
LEAF_NODE	2734:6	2734:6	16	case
LEAF_NODE	2734:11	2734:11	16	0x41
LEAF_NODE	2734:15	2734:15	16	:
EXPR_STATEMENT	2735:7	2735:49	15	img -> put . contig = putcontig8bitYCbCr41tile ;
EXPR	2735:7	2735:7	16	img -> put . contig = putcontig8bitYCbCr41tile
ASSIGN	2735:7	2735:25	17	img -> put . contig = putcontig8bitYCbCr41tile
LVAL	2735:7	2735:7	18	img -> put . contig
FIELD	2735:7	2735:16	19	img -> put . contig
LEAF_NODE	2735:7	2735:7	20	img
LEAF_NODE	2735:10	2735:10	20	->
LEAF_NODE	2735:12	2735:12	20	put
LEAF_NODE	2735:15	2735:15	20	.
LEAF_NODE	2735:16	2735:16	20	contig
ASSIGN_OP	2735:23	2735:23	18	=
LEAF_NODE	2735:23	2735:23	19	=
RVAL	2735:25	2735:25	18	putcontig8bitYCbCr41tile
FIELD	2735:25	2735:25	19	putcontig8bitYCbCr41tile
LEAF_NODE	2735:25	2735:25	20	putcontig8bitYCbCr41tile
LEAF_NODE	2735:49	2735:49	16	;
JUMP_STATEMENT	2736:7	2736:12	15	break DESTINATION ;
KEYWORD	2736:7	2736:7	16	break
LEAF_NODE	2736:7	2736:7	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2736:12	2736:12	16	;
LABEL	2737:6	2737:15	15	case 0x22 :
LEAF_NODE	2737:6	2737:6	16	case
LEAF_NODE	2737:11	2737:11	16	0x22
LEAF_NODE	2737:15	2737:15	16	:
EXPR_STATEMENT	2738:7	2738:49	15	img -> put . contig = putcontig8bitYCbCr22tile ;
EXPR	2738:7	2738:7	16	img -> put . contig = putcontig8bitYCbCr22tile
ASSIGN	2738:7	2738:25	17	img -> put . contig = putcontig8bitYCbCr22tile
LVAL	2738:7	2738:7	18	img -> put . contig
FIELD	2738:7	2738:16	19	img -> put . contig
LEAF_NODE	2738:7	2738:7	20	img
LEAF_NODE	2738:10	2738:10	20	->
LEAF_NODE	2738:12	2738:12	20	put
LEAF_NODE	2738:15	2738:15	20	.
LEAF_NODE	2738:16	2738:16	20	contig
ASSIGN_OP	2738:23	2738:23	18	=
LEAF_NODE	2738:23	2738:23	19	=
RVAL	2738:25	2738:25	18	putcontig8bitYCbCr22tile
FIELD	2738:25	2738:25	19	putcontig8bitYCbCr22tile
LEAF_NODE	2738:25	2738:25	20	putcontig8bitYCbCr22tile
LEAF_NODE	2738:49	2738:49	16	;
JUMP_STATEMENT	2739:7	2739:12	15	break DESTINATION ;
KEYWORD	2739:7	2739:7	16	break
LEAF_NODE	2739:7	2739:7	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2739:12	2739:12	16	;
LABEL	2740:6	2740:15	15	case 0x21 :
LEAF_NODE	2740:6	2740:6	16	case
LEAF_NODE	2740:11	2740:11	16	0x21
LEAF_NODE	2740:15	2740:15	16	:
EXPR_STATEMENT	2741:7	2741:49	15	img -> put . contig = putcontig8bitYCbCr21tile ;
EXPR	2741:7	2741:7	16	img -> put . contig = putcontig8bitYCbCr21tile
ASSIGN	2741:7	2741:25	17	img -> put . contig = putcontig8bitYCbCr21tile
LVAL	2741:7	2741:7	18	img -> put . contig
FIELD	2741:7	2741:16	19	img -> put . contig
LEAF_NODE	2741:7	2741:7	20	img
LEAF_NODE	2741:10	2741:10	20	->
LEAF_NODE	2741:12	2741:12	20	put
LEAF_NODE	2741:15	2741:15	20	.
LEAF_NODE	2741:16	2741:16	20	contig
ASSIGN_OP	2741:23	2741:23	18	=
LEAF_NODE	2741:23	2741:23	19	=
RVAL	2741:25	2741:25	18	putcontig8bitYCbCr21tile
FIELD	2741:25	2741:25	19	putcontig8bitYCbCr21tile
LEAF_NODE	2741:25	2741:25	20	putcontig8bitYCbCr21tile
LEAF_NODE	2741:49	2741:49	16	;
JUMP_STATEMENT	2742:7	2742:12	15	break DESTINATION ;
KEYWORD	2742:7	2742:7	16	break
LEAF_NODE	2742:7	2742:7	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2742:12	2742:12	16	;
LABEL	2743:6	2743:15	15	case 0x12 :
LEAF_NODE	2743:6	2743:6	16	case
LEAF_NODE	2743:11	2743:11	16	0x12
LEAF_NODE	2743:15	2743:15	16	:
EXPR_STATEMENT	2744:7	2744:49	15	img -> put . contig = putcontig8bitYCbCr12tile ;
EXPR	2744:7	2744:7	16	img -> put . contig = putcontig8bitYCbCr12tile
ASSIGN	2744:7	2744:25	17	img -> put . contig = putcontig8bitYCbCr12tile
LVAL	2744:7	2744:7	18	img -> put . contig
FIELD	2744:7	2744:16	19	img -> put . contig
LEAF_NODE	2744:7	2744:7	20	img
LEAF_NODE	2744:10	2744:10	20	->
LEAF_NODE	2744:12	2744:12	20	put
LEAF_NODE	2744:15	2744:15	20	.
LEAF_NODE	2744:16	2744:16	20	contig
ASSIGN_OP	2744:23	2744:23	18	=
LEAF_NODE	2744:23	2744:23	19	=
RVAL	2744:25	2744:25	18	putcontig8bitYCbCr12tile
FIELD	2744:25	2744:25	19	putcontig8bitYCbCr12tile
LEAF_NODE	2744:25	2744:25	20	putcontig8bitYCbCr12tile
LEAF_NODE	2744:49	2744:49	16	;
JUMP_STATEMENT	2745:7	2745:12	15	break DESTINATION ;
KEYWORD	2745:7	2745:7	16	break
LEAF_NODE	2745:7	2745:7	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2745:12	2745:12	16	;
LABEL	2746:6	2746:15	15	case 0x11 :
LEAF_NODE	2746:6	2746:6	16	case
LEAF_NODE	2746:11	2746:11	16	0x11
LEAF_NODE	2746:15	2746:15	16	:
EXPR_STATEMENT	2747:7	2747:49	15	img -> put . contig = putcontig8bitYCbCr11tile ;
EXPR	2747:7	2747:7	16	img -> put . contig = putcontig8bitYCbCr11tile
ASSIGN	2747:7	2747:25	17	img -> put . contig = putcontig8bitYCbCr11tile
LVAL	2747:7	2747:7	18	img -> put . contig
FIELD	2747:7	2747:16	19	img -> put . contig
LEAF_NODE	2747:7	2747:7	20	img
LEAF_NODE	2747:10	2747:10	20	->
LEAF_NODE	2747:12	2747:12	20	put
LEAF_NODE	2747:15	2747:15	20	.
LEAF_NODE	2747:16	2747:16	20	contig
ASSIGN_OP	2747:23	2747:23	18	=
LEAF_NODE	2747:23	2747:23	19	=
RVAL	2747:25	2747:25	18	putcontig8bitYCbCr11tile
FIELD	2747:25	2747:25	19	putcontig8bitYCbCr11tile
LEAF_NODE	2747:25	2747:25	20	putcontig8bitYCbCr11tile
LEAF_NODE	2747:49	2747:49	16	;
JUMP_STATEMENT	2748:7	2748:12	15	break DESTINATION ;
KEYWORD	2748:7	2748:7	16	break
LEAF_NODE	2748:7	2748:7	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2748:12	2748:12	16	;
LEAF_NODE	2749:5	2749:5	14	}
LEAF_NODE	2750:4	2750:4	11	}
LEAF_NODE	2751:3	2751:3	8	}
JUMP_STATEMENT	2752:3	2752:8	6	break DESTINATION ;
KEYWORD	2752:3	2752:3	7	break
LEAF_NODE	2752:3	2752:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2752:8	2752:8	7	;
LABEL	2753:2	2753:25	6	case PHOTOMETRIC_CIELAB :
LEAF_NODE	2753:2	2753:2	7	case
LEAF_NODE	2753:7	2753:7	7	PHOTOMETRIC_CIELAB
LEAF_NODE	2753:25	2753:25	7	:
SELECTION	2754:3	2754:51	6	
KEYWORD	2754:3	2754:3	7	if
LEAF_NODE	2754:3	2754:3	8	if
LEAF_NODE	2754:6	2754:6	7	(
CONDITION	2754:7	2754:7	7	img -> samplesperpixel == 3 && buildMap ( img )
EXPR	2754:7	2754:7	8	img -> samplesperpixel == 3 && buildMap ( img )
AND	2754:7	2754:36	9	img -> samplesperpixel == 3 && buildMap ( img )
EXPR	2754:7	2754:31	10	img -> samplesperpixel == 3
FIELD	2754:7	2754:12	11	img -> samplesperpixel
LEAF_NODE	2754:7	2754:7	12	img
LEAF_NODE	2754:10	2754:10	12	->
LEAF_NODE	2754:12	2754:12	12	samplesperpixel
EQ_OPERATOR	2754:28	2754:28	11	==
LEAF_NODE	2754:28	2754:28	12	==
FIELD	2754:31	2754:31	11	3
LEAF_NODE	2754:31	2754:31	12	3
LEAF_NODE	2754:33	2754:33	10	&&
EXPR	2754:36	2754:36	10	buildMap ( img )
FUNCTION_CALL	2754:36	2754:48	11	buildMap ( img )
CALLEE	2754:36	2754:36	12	buildMap
LEAF_NODE	2754:36	2754:36	13	buildMap
LEAF_NODE	2754:44	2754:44	12	(
ARGUMENT	2754:45	2754:45	12	img
FIELD	2754:45	2754:45	13	img
LEAF_NODE	2754:45	2754:45	14	img
LEAF_NODE	2754:48	2754:48	12	)
LEAF_NODE	2754:49	2754:49	7	)
STATEMENTS	2754:51	2758:3	7	
LEAF_NODE	2754:51	2754:51	8	{
STATEMENTS	2755:4	2757:4	8	
SELECTION	2755:4	2756:5	9	
KEYWORD	2755:4	2755:4	10	if
LEAF_NODE	2755:4	2755:4	11	if
LEAF_NODE	2755:7	2755:7	10	(
CONDITION	2755:8	2755:8	10	img -> bitspersample == 8
EXPR	2755:8	2755:30	11	img -> bitspersample == 8
FIELD	2755:8	2755:13	12	img -> bitspersample
LEAF_NODE	2755:8	2755:8	13	img
LEAF_NODE	2755:11	2755:11	13	->
LEAF_NODE	2755:13	2755:13	13	bitspersample
EQ_OPERATOR	2755:27	2755:27	12	==
LEAF_NODE	2755:27	2755:27	13	==
FIELD	2755:30	2755:30	12	8
LEAF_NODE	2755:30	2755:30	13	8
LEAF_NODE	2755:31	2755:31	10	)
STATEMENTS	2756:5	2756:5	10	
EXPR_STATEMENT	2756:5	2756:48	11	img -> put . contig = initCIELabConversion ( img ) ;
EXPR	2756:5	2756:5	12	img -> put . contig = initCIELabConversion ( img )
ASSIGN	2756:5	2756:23	13	img -> put . contig = initCIELabConversion ( img )
LVAL	2756:5	2756:5	14	img -> put . contig
FIELD	2756:5	2756:14	15	img -> put . contig
LEAF_NODE	2756:5	2756:5	16	img
LEAF_NODE	2756:8	2756:8	16	->
LEAF_NODE	2756:10	2756:10	16	put
LEAF_NODE	2756:13	2756:13	16	.
LEAF_NODE	2756:14	2756:14	16	contig
ASSIGN_OP	2756:21	2756:21	14	=
LEAF_NODE	2756:21	2756:21	15	=
RVAL	2756:23	2756:23	14	initCIELabConversion ( img )
FUNCTION_CALL	2756:23	2756:47	15	initCIELabConversion ( img )
CALLEE	2756:23	2756:23	16	initCIELabConversion
LEAF_NODE	2756:23	2756:23	17	initCIELabConversion
LEAF_NODE	2756:43	2756:43	16	(
ARGUMENT	2756:44	2756:44	16	img
FIELD	2756:44	2756:44	17	img
LEAF_NODE	2756:44	2756:44	18	img
LEAF_NODE	2756:47	2756:47	16	)
LEAF_NODE	2756:48	2756:48	12	;
JUMP_STATEMENT	2757:4	2757:9	9	break DESTINATION ;
KEYWORD	2757:4	2757:4	10	break
LEAF_NODE	2757:4	2757:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2757:9	2757:9	10	;
LEAF_NODE	2758:3	2758:3	8	}
LEAF_NODE	2759:1	2759:1	5	}
JUMP_STATEMENT	2760:1	2760:53	3	return ( ( img -> get != NULL ) && ( img -> put . contig != NULL ) ) ;
KEYWORD	2760:1	2760:1	4	return
LEAF_NODE	2760:1	2760:1	5	return
DESTINATION	2760:8	2760:8	4	( ( img -> get != NULL ) && ( img -> put . contig != NULL ) )
EXPR	2760:8	2760:52	5	( ( img -> get != NULL ) && ( img -> put . contig != NULL ) )
LEAF_NODE	2760:8	2760:8	6	(
AND	2760:9	2760:29	6	( img -> get != NULL ) && ( img -> put . contig != NULL )
EXPR	2760:9	2760:24	7	( img -> get != NULL )
LEAF_NODE	2760:9	2760:9	8	(
FIELD	2760:10	2760:15	8	img -> get
LEAF_NODE	2760:10	2760:10	9	img
LEAF_NODE	2760:13	2760:13	9	->
LEAF_NODE	2760:15	2760:15	9	get
EQ_OPERATOR	2760:18	2760:18	8	!=
LEAF_NODE	2760:18	2760:18	9	!=
FIELD	2760:20	2760:20	8	NULL
LEAF_NODE	2760:20	2760:20	9	NULL
LEAF_NODE	2760:24	2760:24	8	)
LEAF_NODE	2760:26	2760:26	7	&&
EXPR	2760:29	2760:51	7	( img -> put . contig != NULL )
LEAF_NODE	2760:29	2760:29	8	(
FIELD	2760:30	2760:39	8	img -> put . contig
LEAF_NODE	2760:30	2760:30	9	img
LEAF_NODE	2760:33	2760:33	9	->
LEAF_NODE	2760:35	2760:35	9	put
LEAF_NODE	2760:38	2760:38	9	.
LEAF_NODE	2760:39	2760:39	9	contig
EQ_OPERATOR	2760:45	2760:45	8	!=
LEAF_NODE	2760:45	2760:45	9	!=
FIELD	2760:47	2760:47	8	NULL
LEAF_NODE	2760:47	2760:47	9	NULL
LEAF_NODE	2760:51	2760:51	8	)
LEAF_NODE	2760:52	2760:52	6	)
LEAF_NODE	2760:53	2760:53	4	;
LEAF_NODE	2761:0	2761:0	2	}
FUNCTION_DEF	2769:0	2836:0	1	
RETURN_TYPE	2769:0	2769:7	2	static int
LEAF_NODE	2769:0	2769:0	3	static
TYPE_NAME	2769:7	2769:7	3	int
LEAF_NODE	2769:7	2769:7	4	int
FUNCTION_NAME	2770:0	2770:0	2	PickSeparateCase
LEAF_NODE	2770:0	2770:0	3	PickSeparateCase
PARAMETER_LIST	2770:16	2770:35	2	( TIFFRGBAImage * img )
LEAF_NODE	2770:16	2770:16	3	(
PARAMETER_DECL	2770:17	2770:32	3	TIFFRGBAImage * img
TYPE	2770:17	2770:30	4	TIFFRGBAImage *
TYPE_NAME	2770:17	2770:17	5	TIFFRGBAImage
LEAF_NODE	2770:17	2770:17	6	TIFFRGBAImage
POINTER	2770:30	2770:30	5	*
LEAF_NODE	2770:30	2770:30	6	*
NAME	2770:32	2770:32	4	img
LEAF_NODE	2770:32	2770:32	5	img
LEAF_NODE	2770:35	2770:35	3	)
LEAF_NODE	2771:0	2771:0	2	{
STATEMENTS	2772:1	2835:1	2	
EXPR_STATEMENT	2772:1	2772:68	3	img -> get = TIFFIsTiled ( img -> tif ) ? gtTileSeparate : gtStripSeparate ;
EXPR	2772:1	2772:1	4	img -> get = TIFFIsTiled ( img -> tif ) ? gtTileSeparate : gtStripSeparate
ASSIGN	2772:1	2772:12	5	img -> get = TIFFIsTiled ( img -> tif ) ? gtTileSeparate : gtStripSeparate
LVAL	2772:1	2772:1	6	img -> get
FIELD	2772:1	2772:6	7	img -> get
LEAF_NODE	2772:1	2772:1	8	img
LEAF_NODE	2772:4	2772:4	8	->
LEAF_NODE	2772:6	2772:6	8	get
ASSIGN_OP	2772:10	2772:10	6	=
LEAF_NODE	2772:10	2772:10	7	=
RVAL	2772:12	2772:12	6	TIFFIsTiled ( img -> tif ) ? gtTileSeparate : gtStripSeparate
COND_EXPR	2772:12	2772:53	7	TIFFIsTiled ( img -> tif ) ? gtTileSeparate : gtStripSeparate
CONDITION	2772:12	2772:12	8	TIFFIsTiled ( img -> tif )
FUNCTION_CALL	2772:12	2772:32	9	TIFFIsTiled ( img -> tif )
CALLEE	2772:12	2772:12	10	TIFFIsTiled
LEAF_NODE	2772:12	2772:12	11	TIFFIsTiled
LEAF_NODE	2772:23	2772:23	10	(
ARGUMENT	2772:24	2772:24	10	img -> tif
FIELD	2772:24	2772:29	11	img -> tif
LEAF_NODE	2772:24	2772:24	12	img
LEAF_NODE	2772:27	2772:27	12	->
LEAF_NODE	2772:29	2772:29	12	tif
LEAF_NODE	2772:32	2772:32	10	)
LEAF_NODE	2772:34	2772:34	8	?
EXPR	2772:36	2772:36	8	gtTileSeparate
FIELD	2772:36	2772:36	9	gtTileSeparate
LEAF_NODE	2772:36	2772:36	10	gtTileSeparate
LEAF_NODE	2772:51	2772:51	8	:
FIELD	2772:53	2772:53	8	gtStripSeparate
LEAF_NODE	2772:53	2772:53	9	gtStripSeparate
LEAF_NODE	2772:68	2772:68	4	;
EXPR_STATEMENT	2773:1	2773:25	3	img -> put . separate = NULL ;
EXPR	2773:1	2773:1	4	img -> put . separate = NULL
ASSIGN	2773:1	2773:21	5	img -> put . separate = NULL
LVAL	2773:1	2773:1	6	img -> put . separate
FIELD	2773:1	2773:10	7	img -> put . separate
LEAF_NODE	2773:1	2773:1	8	img
LEAF_NODE	2773:4	2773:4	8	->
LEAF_NODE	2773:6	2773:6	8	put
LEAF_NODE	2773:9	2773:9	8	.
LEAF_NODE	2773:10	2773:10	8	separate
ASSIGN_OP	2773:19	2773:19	6	=
LEAF_NODE	2773:19	2773:19	7	=
RVAL	2773:21	2773:21	6	NULL
FIELD	2773:21	2773:21	7	NULL
LEAF_NODE	2773:21	2773:21	8	NULL
LEAF_NODE	2773:25	2773:25	4	;
SELECTION	2774:1	2774:27	3	
KEYWORD	2774:1	2774:1	4	switch
LEAF_NODE	2774:1	2774:1	5	switch
LEAF_NODE	2774:8	2774:8	4	(
CONDITION	2774:9	2774:9	4	img -> photometric
EXPR	2774:9	2774:9	5	img -> photometric
FIELD	2774:9	2774:14	6	img -> photometric
LEAF_NODE	2774:9	2774:9	7	img
LEAF_NODE	2774:12	2774:12	7	->
LEAF_NODE	2774:14	2774:14	7	photometric
LEAF_NODE	2774:25	2774:25	4	)
STATEMENTS	2774:27	2834:1	4	
LEAF_NODE	2774:27	2774:27	5	{
STATEMENTS	2775:1	2833:2	5	
LABEL	2775:1	2775:28	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	2775:1	2775:1	7	case
LEAF_NODE	2775:6	2775:6	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	2775:28	2775:28	7	:
LABEL	2776:1	2776:28	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	2776:1	2776:1	7	case
LEAF_NODE	2776:6	2776:6	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	2776:28	2776:28	7	:
LABEL	2778:1	2778:21	6	case PHOTOMETRIC_RGB :
LEAF_NODE	2778:1	2778:1	7	case
LEAF_NODE	2778:6	2778:6	7	PHOTOMETRIC_RGB
LEAF_NODE	2778:21	2778:21	7	:
SELECTION	2779:2	2779:30	6	
KEYWORD	2779:2	2779:2	7	switch
LEAF_NODE	2779:2	2779:2	8	switch
LEAF_NODE	2779:9	2779:9	7	(
CONDITION	2779:10	2779:10	7	img -> bitspersample
EXPR	2779:10	2779:10	8	img -> bitspersample
FIELD	2779:10	2779:15	9	img -> bitspersample
LEAF_NODE	2779:10	2779:10	10	img
LEAF_NODE	2779:13	2779:13	10	->
LEAF_NODE	2779:15	2779:15	10	bitspersample
LEAF_NODE	2779:28	2779:28	7	)
STATEMENTS	2779:30	2809:2	7	
LEAF_NODE	2779:30	2779:30	8	{
STATEMENTS	2780:2	2808:3	8	
LABEL	2780:2	2780:8	9	case 8 :
LEAF_NODE	2780:2	2780:2	10	case
LEAF_NODE	2780:7	2780:7	10	8
LEAF_NODE	2780:8	2780:8	10	:
SELECTION	2781:3	2782:4	9	
KEYWORD	2781:3	2781:3	10	if
LEAF_NODE	2781:3	2781:3	11	if
LEAF_NODE	2781:6	2781:6	10	(
CONDITION	2781:7	2781:7	10	img -> alpha == EXTRASAMPLE_ASSOCALPHA
EXPR	2781:7	2781:21	11	img -> alpha == EXTRASAMPLE_ASSOCALPHA
FIELD	2781:7	2781:12	12	img -> alpha
LEAF_NODE	2781:7	2781:7	13	img
LEAF_NODE	2781:10	2781:10	13	->
LEAF_NODE	2781:12	2781:12	13	alpha
EQ_OPERATOR	2781:18	2781:18	12	==
LEAF_NODE	2781:18	2781:18	13	==
FIELD	2781:21	2781:21	12	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	2781:21	2781:21	13	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	2781:43	2781:43	10	)
STATEMENTS	2782:4	2782:4	10	
EXPR_STATEMENT	2782:4	2782:48	11	img -> put . separate = putRGBAAseparate8bittile ;
EXPR	2782:4	2782:4	12	img -> put . separate = putRGBAAseparate8bittile
ASSIGN	2782:4	2782:24	13	img -> put . separate = putRGBAAseparate8bittile
LVAL	2782:4	2782:4	14	img -> put . separate
FIELD	2782:4	2782:13	15	img -> put . separate
LEAF_NODE	2782:4	2782:4	16	img
LEAF_NODE	2782:7	2782:7	16	->
LEAF_NODE	2782:9	2782:9	16	put
LEAF_NODE	2782:12	2782:12	16	.
LEAF_NODE	2782:13	2782:13	16	separate
ASSIGN_OP	2782:22	2782:22	14	=
LEAF_NODE	2782:22	2782:22	15	=
RVAL	2782:24	2782:24	14	putRGBAAseparate8bittile
FIELD	2782:24	2782:24	15	putRGBAAseparate8bittile
LEAF_NODE	2782:24	2782:24	16	putRGBAAseparate8bittile
LEAF_NODE	2782:48	2782:48	12	;
SELECTION	2783:3	2783:8	9	
KEYWORD	2783:3	2783:3	10	else
LEAF_NODE	2783:3	2783:3	11	else
STATEMENTS	2783:8	2783:8	10	
SELECTION	2783:8	2784:3	11	
KEYWORD	2783:8	2783:8	12	if
LEAF_NODE	2783:8	2783:8	13	if
LEAF_NODE	2783:11	2783:11	12	(
CONDITION	2783:12	2783:12	12	img -> alpha == EXTRASAMPLE_UNASSALPHA
EXPR	2783:12	2783:26	13	img -> alpha == EXTRASAMPLE_UNASSALPHA
FIELD	2783:12	2783:17	14	img -> alpha
LEAF_NODE	2783:12	2783:12	15	img
LEAF_NODE	2783:15	2783:15	15	->
LEAF_NODE	2783:17	2783:17	15	alpha
EQ_OPERATOR	2783:23	2783:23	14	==
LEAF_NODE	2783:23	2783:23	15	==
FIELD	2783:26	2783:26	14	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	2783:26	2783:26	15	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	2783:48	2783:48	12	)
STATEMENTS	2784:3	2787:3	12	
LEAF_NODE	2784:3	2784:3	13	{
STATEMENTS	2785:4	2785:4	13	
SELECTION	2785:4	2786:5	14	
KEYWORD	2785:4	2785:4	15	if
LEAF_NODE	2785:4	2785:4	16	if
LEAF_NODE	2785:7	2785:7	15	(
CONDITION	2785:8	2785:8	15	BuildMapUaToAa ( img )
EXPR	2785:8	2785:8	16	BuildMapUaToAa ( img )
FUNCTION_CALL	2785:8	2785:26	17	BuildMapUaToAa ( img )
CALLEE	2785:8	2785:8	18	BuildMapUaToAa
LEAF_NODE	2785:8	2785:8	19	BuildMapUaToAa
LEAF_NODE	2785:22	2785:22	18	(
ARGUMENT	2785:23	2785:23	18	img
FIELD	2785:23	2785:23	19	img
LEAF_NODE	2785:23	2785:23	20	img
LEAF_NODE	2785:26	2785:26	18	)
LEAF_NODE	2785:27	2785:27	15	)
STATEMENTS	2786:5	2786:5	15	
EXPR_STATEMENT	2786:5	2786:49	16	img -> put . separate = putRGBUAseparate8bittile ;
EXPR	2786:5	2786:5	17	img -> put . separate = putRGBUAseparate8bittile
ASSIGN	2786:5	2786:25	18	img -> put . separate = putRGBUAseparate8bittile
LVAL	2786:5	2786:5	19	img -> put . separate
FIELD	2786:5	2786:14	20	img -> put . separate
LEAF_NODE	2786:5	2786:5	21	img
LEAF_NODE	2786:8	2786:8	21	->
LEAF_NODE	2786:10	2786:10	21	put
LEAF_NODE	2786:13	2786:13	21	.
LEAF_NODE	2786:14	2786:14	21	separate
ASSIGN_OP	2786:23	2786:23	19	=
LEAF_NODE	2786:23	2786:23	20	=
RVAL	2786:25	2786:25	19	putRGBUAseparate8bittile
FIELD	2786:25	2786:25	20	putRGBUAseparate8bittile
LEAF_NODE	2786:25	2786:25	21	putRGBUAseparate8bittile
LEAF_NODE	2786:49	2786:49	17	;
LEAF_NODE	2787:3	2787:3	13	}
SELECTION	2788:3	2789:4	9	
KEYWORD	2788:3	2788:3	10	else
LEAF_NODE	2788:3	2788:3	11	else
STATEMENTS	2789:4	2789:4	10	
EXPR_STATEMENT	2789:4	2789:46	11	img -> put . separate = putRGBseparate8bittile ;
EXPR	2789:4	2789:4	12	img -> put . separate = putRGBseparate8bittile
ASSIGN	2789:4	2789:24	13	img -> put . separate = putRGBseparate8bittile
LVAL	2789:4	2789:4	14	img -> put . separate
FIELD	2789:4	2789:13	15	img -> put . separate
LEAF_NODE	2789:4	2789:4	16	img
LEAF_NODE	2789:7	2789:7	16	->
LEAF_NODE	2789:9	2789:9	16	put
LEAF_NODE	2789:12	2789:12	16	.
LEAF_NODE	2789:13	2789:13	16	separate
ASSIGN_OP	2789:22	2789:22	14	=
LEAF_NODE	2789:22	2789:22	15	=
RVAL	2789:24	2789:24	14	putRGBseparate8bittile
FIELD	2789:24	2789:24	15	putRGBseparate8bittile
LEAF_NODE	2789:24	2789:24	16	putRGBseparate8bittile
LEAF_NODE	2789:46	2789:46	12	;
JUMP_STATEMENT	2790:3	2790:8	9	break DESTINATION ;
KEYWORD	2790:3	2790:3	10	break
LEAF_NODE	2790:3	2790:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2790:8	2790:8	10	;
LABEL	2791:2	2791:9	9	case 16 :
LEAF_NODE	2791:2	2791:2	10	case
LEAF_NODE	2791:7	2791:7	10	16
LEAF_NODE	2791:9	2791:9	10	:
SELECTION	2792:3	2793:3	9	
KEYWORD	2792:3	2792:3	10	if
LEAF_NODE	2792:3	2792:3	11	if
LEAF_NODE	2792:6	2792:6	10	(
CONDITION	2792:7	2792:7	10	img -> alpha == EXTRASAMPLE_ASSOCALPHA
EXPR	2792:7	2792:21	11	img -> alpha == EXTRASAMPLE_ASSOCALPHA
FIELD	2792:7	2792:12	12	img -> alpha
LEAF_NODE	2792:7	2792:7	13	img
LEAF_NODE	2792:10	2792:10	13	->
LEAF_NODE	2792:12	2792:12	13	alpha
EQ_OPERATOR	2792:18	2792:18	12	==
LEAF_NODE	2792:18	2792:18	13	==
FIELD	2792:21	2792:21	12	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	2792:21	2792:21	13	EXTRASAMPLE_ASSOCALPHA
LEAF_NODE	2792:43	2792:43	10	)
STATEMENTS	2793:3	2796:3	10	
LEAF_NODE	2793:3	2793:3	11	{
STATEMENTS	2794:4	2794:4	11	
SELECTION	2794:4	2795:5	12	
KEYWORD	2794:4	2794:4	13	if
LEAF_NODE	2794:4	2794:4	14	if
LEAF_NODE	2794:7	2794:7	13	(
CONDITION	2794:8	2794:8	13	BuildMapBitdepth16To8 ( img )
EXPR	2794:8	2794:8	14	BuildMapBitdepth16To8 ( img )
FUNCTION_CALL	2794:8	2794:33	15	BuildMapBitdepth16To8 ( img )
CALLEE	2794:8	2794:8	16	BuildMapBitdepth16To8
LEAF_NODE	2794:8	2794:8	17	BuildMapBitdepth16To8
LEAF_NODE	2794:29	2794:29	16	(
ARGUMENT	2794:30	2794:30	16	img
FIELD	2794:30	2794:30	17	img
LEAF_NODE	2794:30	2794:30	18	img
LEAF_NODE	2794:33	2794:33	16	)
LEAF_NODE	2794:34	2794:34	13	)
STATEMENTS	2795:5	2795:5	13	
EXPR_STATEMENT	2795:5	2795:50	14	img -> put . separate = putRGBAAseparate16bittile ;
EXPR	2795:5	2795:5	15	img -> put . separate = putRGBAAseparate16bittile
ASSIGN	2795:5	2795:25	16	img -> put . separate = putRGBAAseparate16bittile
LVAL	2795:5	2795:5	17	img -> put . separate
FIELD	2795:5	2795:14	18	img -> put . separate
LEAF_NODE	2795:5	2795:5	19	img
LEAF_NODE	2795:8	2795:8	19	->
LEAF_NODE	2795:10	2795:10	19	put
LEAF_NODE	2795:13	2795:13	19	.
LEAF_NODE	2795:14	2795:14	19	separate
ASSIGN_OP	2795:23	2795:23	17	=
LEAF_NODE	2795:23	2795:23	18	=
RVAL	2795:25	2795:25	17	putRGBAAseparate16bittile
FIELD	2795:25	2795:25	18	putRGBAAseparate16bittile
LEAF_NODE	2795:25	2795:25	19	putRGBAAseparate16bittile
LEAF_NODE	2795:50	2795:50	15	;
LEAF_NODE	2796:3	2796:3	11	}
SELECTION	2797:3	2797:8	9	
KEYWORD	2797:3	2797:3	10	else
LEAF_NODE	2797:3	2797:3	11	else
STATEMENTS	2797:8	2797:8	10	
SELECTION	2797:8	2798:3	11	
KEYWORD	2797:8	2797:8	12	if
LEAF_NODE	2797:8	2797:8	13	if
LEAF_NODE	2797:11	2797:11	12	(
CONDITION	2797:12	2797:12	12	img -> alpha == EXTRASAMPLE_UNASSALPHA
EXPR	2797:12	2797:26	13	img -> alpha == EXTRASAMPLE_UNASSALPHA
FIELD	2797:12	2797:17	14	img -> alpha
LEAF_NODE	2797:12	2797:12	15	img
LEAF_NODE	2797:15	2797:15	15	->
LEAF_NODE	2797:17	2797:17	15	alpha
EQ_OPERATOR	2797:23	2797:23	14	==
LEAF_NODE	2797:23	2797:23	15	==
FIELD	2797:26	2797:26	14	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	2797:26	2797:26	15	EXTRASAMPLE_UNASSALPHA
LEAF_NODE	2797:48	2797:48	12	)
STATEMENTS	2798:3	2802:3	12	
LEAF_NODE	2798:3	2798:3	13	{
STATEMENTS	2799:4	2799:4	13	
SELECTION	2799:4	2801:5	14	
KEYWORD	2799:4	2799:4	15	if
LEAF_NODE	2799:4	2799:4	16	if
LEAF_NODE	2799:7	2799:7	15	(
CONDITION	2799:8	2799:8	15	BuildMapBitdepth16To8 ( img ) && BuildMapUaToAa ( img )
EXPR	2799:8	2799:8	16	BuildMapBitdepth16To8 ( img ) && BuildMapUaToAa ( img )
AND	2799:8	2800:8	17	BuildMapBitdepth16To8 ( img ) && BuildMapUaToAa ( img )
EXPR	2799:8	2799:8	18	BuildMapBitdepth16To8 ( img )
FUNCTION_CALL	2799:8	2799:33	19	BuildMapBitdepth16To8 ( img )
CALLEE	2799:8	2799:8	20	BuildMapBitdepth16To8
LEAF_NODE	2799:8	2799:8	21	BuildMapBitdepth16To8
LEAF_NODE	2799:29	2799:29	20	(
ARGUMENT	2799:30	2799:30	20	img
FIELD	2799:30	2799:30	21	img
LEAF_NODE	2799:30	2799:30	22	img
LEAF_NODE	2799:33	2799:33	20	)
LEAF_NODE	2799:35	2799:35	18	&&
EXPR	2800:8	2800:8	18	BuildMapUaToAa ( img )
FUNCTION_CALL	2800:8	2800:26	19	BuildMapUaToAa ( img )
CALLEE	2800:8	2800:8	20	BuildMapUaToAa
LEAF_NODE	2800:8	2800:8	21	BuildMapUaToAa
LEAF_NODE	2800:22	2800:22	20	(
ARGUMENT	2800:23	2800:23	20	img
FIELD	2800:23	2800:23	21	img
LEAF_NODE	2800:23	2800:23	22	img
LEAF_NODE	2800:26	2800:26	20	)
LEAF_NODE	2800:27	2800:27	15	)
STATEMENTS	2801:5	2801:5	15	
EXPR_STATEMENT	2801:5	2801:50	16	img -> put . separate = putRGBUAseparate16bittile ;
EXPR	2801:5	2801:5	17	img -> put . separate = putRGBUAseparate16bittile
ASSIGN	2801:5	2801:25	18	img -> put . separate = putRGBUAseparate16bittile
LVAL	2801:5	2801:5	19	img -> put . separate
FIELD	2801:5	2801:14	20	img -> put . separate
LEAF_NODE	2801:5	2801:5	21	img
LEAF_NODE	2801:8	2801:8	21	->
LEAF_NODE	2801:10	2801:10	21	put
LEAF_NODE	2801:13	2801:13	21	.
LEAF_NODE	2801:14	2801:14	21	separate
ASSIGN_OP	2801:23	2801:23	19	=
LEAF_NODE	2801:23	2801:23	20	=
RVAL	2801:25	2801:25	19	putRGBUAseparate16bittile
FIELD	2801:25	2801:25	20	putRGBUAseparate16bittile
LEAF_NODE	2801:25	2801:25	21	putRGBUAseparate16bittile
LEAF_NODE	2801:50	2801:50	17	;
LEAF_NODE	2802:3	2802:3	13	}
SELECTION	2803:3	2804:3	9	
KEYWORD	2803:3	2803:3	10	else
LEAF_NODE	2803:3	2803:3	11	else
STATEMENTS	2804:3	2807:3	10	
LEAF_NODE	2804:3	2804:3	11	{
STATEMENTS	2805:4	2805:4	11	
SELECTION	2805:4	2806:5	12	
KEYWORD	2805:4	2805:4	13	if
LEAF_NODE	2805:4	2805:4	14	if
LEAF_NODE	2805:7	2805:7	13	(
CONDITION	2805:8	2805:8	13	BuildMapBitdepth16To8 ( img )
EXPR	2805:8	2805:8	14	BuildMapBitdepth16To8 ( img )
FUNCTION_CALL	2805:8	2805:33	15	BuildMapBitdepth16To8 ( img )
CALLEE	2805:8	2805:8	16	BuildMapBitdepth16To8
LEAF_NODE	2805:8	2805:8	17	BuildMapBitdepth16To8
LEAF_NODE	2805:29	2805:29	16	(
ARGUMENT	2805:30	2805:30	16	img
FIELD	2805:30	2805:30	17	img
LEAF_NODE	2805:30	2805:30	18	img
LEAF_NODE	2805:33	2805:33	16	)
LEAF_NODE	2805:34	2805:34	13	)
STATEMENTS	2806:5	2806:5	13	
EXPR_STATEMENT	2806:5	2806:48	14	img -> put . separate = putRGBseparate16bittile ;
EXPR	2806:5	2806:5	15	img -> put . separate = putRGBseparate16bittile
ASSIGN	2806:5	2806:25	16	img -> put . separate = putRGBseparate16bittile
LVAL	2806:5	2806:5	17	img -> put . separate
FIELD	2806:5	2806:14	18	img -> put . separate
LEAF_NODE	2806:5	2806:5	19	img
LEAF_NODE	2806:8	2806:8	19	->
LEAF_NODE	2806:10	2806:10	19	put
LEAF_NODE	2806:13	2806:13	19	.
LEAF_NODE	2806:14	2806:14	19	separate
ASSIGN_OP	2806:23	2806:23	17	=
LEAF_NODE	2806:23	2806:23	18	=
RVAL	2806:25	2806:25	17	putRGBseparate16bittile
FIELD	2806:25	2806:25	18	putRGBseparate16bittile
LEAF_NODE	2806:25	2806:25	19	putRGBseparate16bittile
LEAF_NODE	2806:48	2806:48	15	;
LEAF_NODE	2807:3	2807:3	11	}
JUMP_STATEMENT	2808:3	2808:8	9	break DESTINATION ;
KEYWORD	2808:3	2808:3	10	break
LEAF_NODE	2808:3	2808:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2808:8	2808:8	10	;
LEAF_NODE	2809:2	2809:2	8	}
JUMP_STATEMENT	2810:2	2810:7	6	break DESTINATION ;
KEYWORD	2810:2	2810:2	7	break
LEAF_NODE	2810:2	2810:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2810:7	2810:7	7	;
LABEL	2811:1	2811:27	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	2811:1	2811:1	7	case
LEAF_NODE	2811:6	2811:6	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	2811:27	2811:27	7	:
SELECTION	2812:2	2813:2	6	
KEYWORD	2812:2	2812:2	7	if
LEAF_NODE	2812:2	2812:2	8	if
LEAF_NODE	2812:5	2812:5	7	(
CONDITION	2812:6	2812:6	7	img -> bitspersample == 8 && img -> samplesperpixel == 4
EXPR	2812:6	2812:6	8	img -> bitspersample == 8 && img -> samplesperpixel == 4
AND	2812:6	2812:33	9	img -> bitspersample == 8 && img -> samplesperpixel == 4
EXPR	2812:6	2812:28	10	img -> bitspersample == 8
FIELD	2812:6	2812:11	11	img -> bitspersample
LEAF_NODE	2812:6	2812:6	12	img
LEAF_NODE	2812:9	2812:9	12	->
LEAF_NODE	2812:11	2812:11	12	bitspersample
EQ_OPERATOR	2812:25	2812:25	11	==
LEAF_NODE	2812:25	2812:25	12	==
FIELD	2812:28	2812:28	11	8
LEAF_NODE	2812:28	2812:28	12	8
LEAF_NODE	2812:30	2812:30	10	&&
EXPR	2812:33	2812:57	10	img -> samplesperpixel == 4
FIELD	2812:33	2812:38	11	img -> samplesperpixel
LEAF_NODE	2812:33	2812:33	12	img
LEAF_NODE	2812:36	2812:36	12	->
LEAF_NODE	2812:38	2812:38	12	samplesperpixel
EQ_OPERATOR	2812:54	2812:54	11	==
LEAF_NODE	2812:54	2812:54	12	==
FIELD	2812:57	2812:57	11	4
LEAF_NODE	2812:57	2812:57	12	4
LEAF_NODE	2812:58	2812:58	7	)
STATEMENTS	2813:2	2816:2	7	
LEAF_NODE	2813:2	2813:2	8	{
STATEMENTS	2814:3	2815:3	8	
EXPR_STATEMENT	2814:3	2814:17	9	img -> alpha = 1 ;
EXPR	2814:3	2814:3	10	img -> alpha = 1
ASSIGN	2814:3	2814:16	11	img -> alpha = 1
LVAL	2814:3	2814:3	12	img -> alpha
FIELD	2814:3	2814:8	13	img -> alpha
LEAF_NODE	2814:3	2814:3	14	img
LEAF_NODE	2814:6	2814:6	14	->
LEAF_NODE	2814:8	2814:8	14	alpha
ASSIGN_OP	2814:14	2814:14	12	=
LEAF_NODE	2814:14	2814:14	13	=
RVAL	2814:16	2814:16	12	1
FIELD	2814:16	2814:16	13	1
LEAF_NODE	2814:16	2814:16	14	1
LEAF_NODE	2814:17	2814:17	10	;
EXPR_STATEMENT	2815:3	2815:46	9	img -> put . separate = putCMYKseparate8bittile ;
EXPR	2815:3	2815:3	10	img -> put . separate = putCMYKseparate8bittile
ASSIGN	2815:3	2815:23	11	img -> put . separate = putCMYKseparate8bittile
LVAL	2815:3	2815:3	12	img -> put . separate
FIELD	2815:3	2815:12	13	img -> put . separate
LEAF_NODE	2815:3	2815:3	14	img
LEAF_NODE	2815:6	2815:6	14	->
LEAF_NODE	2815:8	2815:8	14	put
LEAF_NODE	2815:11	2815:11	14	.
LEAF_NODE	2815:12	2815:12	14	separate
ASSIGN_OP	2815:21	2815:21	12	=
LEAF_NODE	2815:21	2815:21	13	=
RVAL	2815:23	2815:23	12	putCMYKseparate8bittile
FIELD	2815:23	2815:23	13	putCMYKseparate8bittile
LEAF_NODE	2815:23	2815:23	14	putCMYKseparate8bittile
LEAF_NODE	2815:46	2815:46	10	;
LEAF_NODE	2816:2	2816:2	8	}
JUMP_STATEMENT	2817:2	2817:7	6	break DESTINATION ;
KEYWORD	2817:2	2817:2	7	break
LEAF_NODE	2817:2	2817:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2817:7	2817:7	7	;
LABEL	2818:1	2818:23	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	2818:1	2818:1	7	case
LEAF_NODE	2818:6	2818:6	7	PHOTOMETRIC_YCBCR
LEAF_NODE	2818:23	2818:23	7	:
SELECTION	2819:2	2820:2	6	
KEYWORD	2819:2	2819:2	7	if
LEAF_NODE	2819:2	2819:2	8	if
LEAF_NODE	2819:5	2819:5	7	(
CONDITION	2819:6	2819:6	7	( img -> bitspersample == 8 ) && ( img -> samplesperpixel == 3 )
EXPR	2819:6	2819:6	8	( img -> bitspersample == 8 ) && ( img -> samplesperpixel == 3 )
AND	2819:6	2819:33	9	( img -> bitspersample == 8 ) && ( img -> samplesperpixel == 3 )
EXPR	2819:6	2819:28	10	( img -> bitspersample == 8 )
LEAF_NODE	2819:6	2819:6	11	(
FIELD	2819:7	2819:12	11	img -> bitspersample
LEAF_NODE	2819:7	2819:7	12	img
LEAF_NODE	2819:10	2819:10	12	->
LEAF_NODE	2819:12	2819:12	12	bitspersample
EQ_OPERATOR	2819:25	2819:25	11	==
LEAF_NODE	2819:25	2819:25	12	==
FIELD	2819:27	2819:27	11	8
LEAF_NODE	2819:27	2819:27	12	8
LEAF_NODE	2819:28	2819:28	11	)
LEAF_NODE	2819:30	2819:30	10	&&
EXPR	2819:33	2819:57	10	( img -> samplesperpixel == 3 )
LEAF_NODE	2819:33	2819:33	11	(
FIELD	2819:34	2819:39	11	img -> samplesperpixel
LEAF_NODE	2819:34	2819:34	12	img
LEAF_NODE	2819:37	2819:37	12	->
LEAF_NODE	2819:39	2819:39	12	samplesperpixel
EQ_OPERATOR	2819:54	2819:54	11	==
LEAF_NODE	2819:54	2819:54	12	==
FIELD	2819:56	2819:56	11	3
LEAF_NODE	2819:56	2819:56	12	3
LEAF_NODE	2819:57	2819:57	11	)
LEAF_NODE	2819:58	2819:58	7	)
STATEMENTS	2820:2	2832:2	7	
LEAF_NODE	2820:2	2820:2	8	{
STATEMENTS	2821:3	2821:3	8	
SELECTION	2821:3	2822:3	9	
KEYWORD	2821:3	2821:3	10	if
LEAF_NODE	2821:3	2821:3	11	if
LEAF_NODE	2821:6	2821:6	10	(
CONDITION	2821:7	2821:7	10	initYCbCrConversion ( img ) != 0
EXPR	2821:7	2821:33	11	initYCbCrConversion ( img ) != 0
FUNCTION_CALL	2821:7	2821:30	12	initYCbCrConversion ( img )
CALLEE	2821:7	2821:7	13	initYCbCrConversion
LEAF_NODE	2821:7	2821:7	14	initYCbCrConversion
LEAF_NODE	2821:26	2821:26	13	(
ARGUMENT	2821:27	2821:27	13	img
FIELD	2821:27	2821:27	14	img
LEAF_NODE	2821:27	2821:27	15	img
LEAF_NODE	2821:30	2821:30	13	)
EQ_OPERATOR	2821:31	2821:31	12	!=
LEAF_NODE	2821:31	2821:31	13	!=
FIELD	2821:33	2821:33	12	0
LEAF_NODE	2821:33	2821:33	13	0
LEAF_NODE	2821:34	2821:34	10	)
STATEMENTS	2822:3	2831:3	10	
LEAF_NODE	2822:3	2822:3	11	{
STATEMENTS	2823:4	2825:4	11	
SIMPLE_DECL	2823:4	2823:17	12	uint16 hs , uint16 vs ;
INIT_DECL_LIST	2823:4	2823:4	13	uint16 hs , uint16 vs
VAR_DECL	2823:4	2823:11	14	uint16 hs
TYPE	2823:4	2823:4	15	uint16
TYPE_NAME	2823:4	2823:4	16	uint16
LEAF_NODE	2823:4	2823:4	17	uint16
NAME	2823:11	2823:11	15	hs
LEAF_NODE	2823:11	2823:11	16	hs
LEAF_NODE	2823:13	2823:13	14	,
VAR_DECL	2823:4	2823:15	14	uint16 vs
TYPE	2823:4	2823:4	15	uint16
TYPE_NAME	2823:4	2823:4	16	uint16
LEAF_NODE	2823:4	2823:4	17	uint16
NAME	2823:15	2823:15	15	vs
LEAF_NODE	2823:15	2823:15	16	vs
LEAF_NODE	2823:17	2823:17	13	;
EXPR_STATEMENT	2824:4	2824:71	12	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_YCBCRSUBSAMPLING , & hs , & vs ) ;
EXPR	2824:4	2824:4	13	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_YCBCRSUBSAMPLING , & hs , & vs )
FUNCTION_CALL	2824:4	2824:70	14	TIFFGetFieldDefaulted ( img -> tif , TIFFTAG_YCBCRSUBSAMPLING , & hs , & vs )
CALLEE	2824:4	2824:4	15	TIFFGetFieldDefaulted
LEAF_NODE	2824:4	2824:4	16	TIFFGetFieldDefaulted
LEAF_NODE	2824:25	2824:25	15	(
ARGUMENT	2824:26	2824:26	15	img -> tif
FIELD	2824:26	2824:31	16	img -> tif
LEAF_NODE	2824:26	2824:26	17	img
LEAF_NODE	2824:29	2824:29	17	->
LEAF_NODE	2824:31	2824:31	17	tif
LEAF_NODE	2824:34	2824:34	15	,
ARGUMENT	2824:36	2824:36	15	TIFFTAG_YCBCRSUBSAMPLING
FIELD	2824:36	2824:36	16	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2824:36	2824:36	17	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2824:60	2824:60	15	,
ARGUMENT	2824:62	2824:62	15	& hs
UNARY_EXPR	2824:62	2824:63	16	& hs
UNARY_OPERATOR	2824:62	2824:62	17	&
LEAF_NODE	2824:62	2824:62	18	&
FIELD	2824:63	2824:63	17	hs
LEAF_NODE	2824:63	2824:63	18	hs
LEAF_NODE	2824:65	2824:65	15	,
ARGUMENT	2824:67	2824:67	15	& vs
UNARY_EXPR	2824:67	2824:68	16	& vs
UNARY_OPERATOR	2824:67	2824:67	17	&
LEAF_NODE	2824:67	2824:67	18	&
FIELD	2824:68	2824:68	17	vs
LEAF_NODE	2824:68	2824:68	18	vs
LEAF_NODE	2824:70	2824:70	15	)
LEAF_NODE	2824:71	2824:71	13	;
SELECTION	2825:4	2825:24	12	
KEYWORD	2825:4	2825:4	13	switch
LEAF_NODE	2825:4	2825:4	14	switch
LEAF_NODE	2825:11	2825:11	13	(
CONDITION	2825:12	2825:12	13	( hs << 4 ) | vs
EXPR	2825:12	2825:12	14	( hs << 4 ) | vs
BIT_OR	2825:12	2825:20	15	( hs << 4 ) | vs
BIT_OR_ELEM	2825:12	2825:18	16	( hs << 4 )
LEAF_NODE	2825:12	2825:12	17	(
FIELD	2825:13	2825:13	17	hs
LEAF_NODE	2825:13	2825:13	18	hs
LEAF_NODE	2825:15	2825:15	17	<<
FIELD	2825:17	2825:17	17	4
LEAF_NODE	2825:17	2825:17	18	4
LEAF_NODE	2825:18	2825:18	17	)
LEAF_NODE	2825:19	2825:19	16	|
BIT_OR_ELEM	2825:20	2825:20	16	vs
FIELD	2825:20	2825:20	17	vs
LEAF_NODE	2825:20	2825:20	18	vs
LEAF_NODE	2825:22	2825:22	13	)
STATEMENTS	2825:24	2830:4	13	
LEAF_NODE	2825:24	2825:24	14	{
STATEMENTS	2826:4	2828:5	14	
LABEL	2826:4	2826:13	15	case 0x11 :
LEAF_NODE	2826:4	2826:4	16	case
LEAF_NODE	2826:9	2826:9	16	0x11
LEAF_NODE	2826:13	2826:13	16	:
EXPR_STATEMENT	2827:5	2827:51	15	img -> put . separate = putseparate8bitYCbCr11tile ;
EXPR	2827:5	2827:5	16	img -> put . separate = putseparate8bitYCbCr11tile
ASSIGN	2827:5	2827:25	17	img -> put . separate = putseparate8bitYCbCr11tile
LVAL	2827:5	2827:5	18	img -> put . separate
FIELD	2827:5	2827:14	19	img -> put . separate
LEAF_NODE	2827:5	2827:5	20	img
LEAF_NODE	2827:8	2827:8	20	->
LEAF_NODE	2827:10	2827:10	20	put
LEAF_NODE	2827:13	2827:13	20	.
LEAF_NODE	2827:14	2827:14	20	separate
ASSIGN_OP	2827:23	2827:23	18	=
LEAF_NODE	2827:23	2827:23	19	=
RVAL	2827:25	2827:25	18	putseparate8bitYCbCr11tile
FIELD	2827:25	2827:25	19	putseparate8bitYCbCr11tile
LEAF_NODE	2827:25	2827:25	20	putseparate8bitYCbCr11tile
LEAF_NODE	2827:51	2827:51	16	;
JUMP_STATEMENT	2828:5	2828:10	15	break DESTINATION ;
KEYWORD	2828:5	2828:5	16	break
LEAF_NODE	2828:5	2828:5	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	2828:10	2828:10	16	;
LEAF_NODE	2830:4	2830:4	14	}
LEAF_NODE	2831:3	2831:3	11	}
LEAF_NODE	2832:2	2832:2	8	}
JUMP_STATEMENT	2833:2	2833:7	6	break DESTINATION ;
KEYWORD	2833:2	2833:2	7	break
LEAF_NODE	2833:2	2833:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2833:7	2833:7	7	;
LEAF_NODE	2834:1	2834:1	5	}
JUMP_STATEMENT	2835:1	2835:55	3	return ( ( img -> get != NULL ) && ( img -> put . separate != NULL ) ) ;
KEYWORD	2835:1	2835:1	4	return
LEAF_NODE	2835:1	2835:1	5	return
DESTINATION	2835:8	2835:8	4	( ( img -> get != NULL ) && ( img -> put . separate != NULL ) )
EXPR	2835:8	2835:54	5	( ( img -> get != NULL ) && ( img -> put . separate != NULL ) )
LEAF_NODE	2835:8	2835:8	6	(
AND	2835:9	2835:29	6	( img -> get != NULL ) && ( img -> put . separate != NULL )
EXPR	2835:9	2835:24	7	( img -> get != NULL )
LEAF_NODE	2835:9	2835:9	8	(
FIELD	2835:10	2835:15	8	img -> get
LEAF_NODE	2835:10	2835:10	9	img
LEAF_NODE	2835:13	2835:13	9	->
LEAF_NODE	2835:15	2835:15	9	get
EQ_OPERATOR	2835:18	2835:18	8	!=
LEAF_NODE	2835:18	2835:18	9	!=
FIELD	2835:20	2835:20	8	NULL
LEAF_NODE	2835:20	2835:20	9	NULL
LEAF_NODE	2835:24	2835:24	8	)
LEAF_NODE	2835:26	2835:26	7	&&
EXPR	2835:29	2835:53	7	( img -> put . separate != NULL )
LEAF_NODE	2835:29	2835:29	8	(
FIELD	2835:30	2835:39	8	img -> put . separate
LEAF_NODE	2835:30	2835:30	9	img
LEAF_NODE	2835:33	2835:33	9	->
LEAF_NODE	2835:35	2835:35	9	put
LEAF_NODE	2835:38	2835:38	9	.
LEAF_NODE	2835:39	2835:39	9	separate
EQ_OPERATOR	2835:47	2835:47	8	!=
LEAF_NODE	2835:47	2835:47	9	!=
FIELD	2835:49	2835:49	8	NULL
LEAF_NODE	2835:49	2835:49	9	NULL
LEAF_NODE	2835:53	2835:53	8	)
LEAF_NODE	2835:54	2835:54	6	)
LEAF_NODE	2835:55	2835:55	4	;
LEAF_NODE	2836:0	2836:0	2	}
FUNCTION_DEF	2838:0	2858:0	1	
RETURN_TYPE	2838:0	2838:7	2	static int
LEAF_NODE	2838:0	2838:0	3	static
TYPE_NAME	2838:7	2838:7	3	int
LEAF_NODE	2838:7	2838:7	4	int
FUNCTION_NAME	2839:0	2839:0	2	BuildMapUaToAa
LEAF_NODE	2839:0	2839:0	3	BuildMapUaToAa
PARAMETER_LIST	2839:14	2839:33	2	( TIFFRGBAImage * img )
LEAF_NODE	2839:14	2839:14	3	(
PARAMETER_DECL	2839:15	2839:30	3	TIFFRGBAImage * img
TYPE	2839:15	2839:28	4	TIFFRGBAImage *
TYPE_NAME	2839:15	2839:15	5	TIFFRGBAImage
LEAF_NODE	2839:15	2839:15	6	TIFFRGBAImage
POINTER	2839:28	2839:28	5	*
LEAF_NODE	2839:28	2839:28	6	*
NAME	2839:30	2839:30	4	img
LEAF_NODE	2839:30	2839:30	5	img
LEAF_NODE	2839:33	2839:33	3	)
LEAF_NODE	2840:0	2840:0	2	{
STATEMENTS	2841:1	2857:1	2	
LEAF_NODE	2841:1	2841:1	3	static
SIMPLE_DECL	2841:8	2841:44	3	const char [ ] module ; module = "BuildMapUaToAa" ;
VAR_DECL	2841:8	2841:19	4	const char [ ] module ; module = "BuildMapUaToAa"
TYPE	2841:8	2841:25	5	const char [ ]
TYPE_NAME	2841:8	2841:14	6	const char
LEAF_NODE	2841:8	2841:8	7	const
LEAF_NODE	2841:14	2841:14	7	char
TYPE_SUFFIX	2841:25	2841:26	6	[ ]
LEAF_NODE	2841:25	2841:25	7	[
LEAF_NODE	2841:26	2841:26	7	]
NAME	2841:19	2841:19	5	module
LEAF_NODE	2841:19	2841:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2841:19	2841:19	5	module = "BuildMapUaToAa"
ASSIGN	2841:19	2841:28	6	module = "BuildMapUaToAa"
LVAL	2841:19	2841:19	7	module
NAME	2841:19	2841:19	8	module
LEAF_NODE	2841:19	2841:19	9	module
ASSIGN_OP	2841:27	2841:27	7	=
LEAF_NODE	2841:27	2841:27	8	=
RVAL	2841:28	2841:28	7	"BuildMapUaToAa"
FIELD	2841:28	2841:28	8	"BuildMapUaToAa"
LEAF_NODE	2841:28	2841:28	9	"BuildMapUaToAa"
LEAF_NODE	2841:44	2841:44	4	;
SIMPLE_DECL	2842:1	2842:9	3	uint8 * m ;
VAR_DECL	2842:1	2842:8	4	uint8 * m
TYPE	2842:1	2842:6	5	uint8 *
TYPE_NAME	2842:1	2842:1	6	uint8
LEAF_NODE	2842:1	2842:1	7	uint8
POINTER	2842:6	2842:6	6	*
LEAF_NODE	2842:6	2842:6	7	*
NAME	2842:8	2842:8	5	m
LEAF_NODE	2842:8	2842:8	6	m
LEAF_NODE	2842:9	2842:9	4	;
SIMPLE_DECL	2843:1	2843:13	3	uint16 na , uint16 nv ;
INIT_DECL_LIST	2843:1	2843:1	4	uint16 na , uint16 nv
VAR_DECL	2843:1	2843:8	5	uint16 na
TYPE	2843:1	2843:1	6	uint16
TYPE_NAME	2843:1	2843:1	7	uint16
LEAF_NODE	2843:1	2843:1	8	uint16
NAME	2843:8	2843:8	6	na
LEAF_NODE	2843:8	2843:8	7	na
LEAF_NODE	2843:10	2843:10	5	,
VAR_DECL	2843:1	2843:11	5	uint16 nv
TYPE	2843:1	2843:1	6	uint16
TYPE_NAME	2843:1	2843:1	7	uint16
LEAF_NODE	2843:1	2843:1	8	uint16
NAME	2843:11	2843:11	6	nv
LEAF_NODE	2843:11	2843:11	7	nv
LEAF_NODE	2843:13	2843:13	4	;
EXPR_STATEMENT	2844:1	2844:26	3	assert ( img -> UaToAa == NULL ) ;
EXPR	2844:1	2844:1	4	assert ( img -> UaToAa == NULL )
FUNCTION_CALL	2844:1	2844:25	5	assert ( img -> UaToAa == NULL )
CALLEE	2844:1	2844:1	6	assert
LEAF_NODE	2844:1	2844:1	7	assert
LEAF_NODE	2844:7	2844:7	6	(
ARGUMENT	2844:8	2844:21	6	img -> UaToAa == NULL
FIELD	2844:8	2844:13	7	img -> UaToAa
LEAF_NODE	2844:8	2844:8	8	img
LEAF_NODE	2844:11	2844:11	8	->
LEAF_NODE	2844:13	2844:13	8	UaToAa
EQ_OPERATOR	2844:19	2844:19	7	==
LEAF_NODE	2844:19	2844:19	8	==
FIELD	2844:21	2844:21	7	NULL
LEAF_NODE	2844:21	2844:21	8	NULL
LEAF_NODE	2844:25	2844:25	6	)
LEAF_NODE	2844:26	2844:26	4	;
EXPR_STATEMENT	2845:1	2845:31	3	img -> UaToAa = _TIFFmalloc ( 65536 ) ;
EXPR	2845:1	2845:1	4	img -> UaToAa = _TIFFmalloc ( 65536 )
ASSIGN	2845:1	2845:13	5	img -> UaToAa = _TIFFmalloc ( 65536 )
LVAL	2845:1	2845:1	6	img -> UaToAa
FIELD	2845:1	2845:6	7	img -> UaToAa
LEAF_NODE	2845:1	2845:1	8	img
LEAF_NODE	2845:4	2845:4	8	->
LEAF_NODE	2845:6	2845:6	8	UaToAa
ASSIGN_OP	2845:12	2845:12	6	=
LEAF_NODE	2845:12	2845:12	7	=
RVAL	2845:13	2845:13	6	_TIFFmalloc ( 65536 )
FUNCTION_CALL	2845:13	2845:30	7	_TIFFmalloc ( 65536 )
CALLEE	2845:13	2845:13	8	_TIFFmalloc
LEAF_NODE	2845:13	2845:13	9	_TIFFmalloc
LEAF_NODE	2845:24	2845:24	8	(
ARGUMENT	2845:25	2845:25	8	65536
FIELD	2845:25	2845:25	9	65536
LEAF_NODE	2845:25	2845:25	10	65536
LEAF_NODE	2845:30	2845:30	8	)
LEAF_NODE	2845:31	2845:31	4	;
SELECTION	2846:1	2847:1	3	
KEYWORD	2846:1	2846:1	4	if
LEAF_NODE	2846:1	2846:1	5	if
LEAF_NODE	2846:4	2846:4	4	(
CONDITION	2846:5	2846:5	4	img -> UaToAa == NULL
EXPR	2846:5	2846:18	5	img -> UaToAa == NULL
FIELD	2846:5	2846:10	6	img -> UaToAa
LEAF_NODE	2846:5	2846:5	7	img
LEAF_NODE	2846:8	2846:8	7	->
LEAF_NODE	2846:10	2846:10	7	UaToAa
EQ_OPERATOR	2846:16	2846:16	6	==
LEAF_NODE	2846:16	2846:16	7	==
FIELD	2846:18	2846:18	6	NULL
LEAF_NODE	2846:18	2846:18	7	NULL
LEAF_NODE	2846:22	2846:22	4	)
STATEMENTS	2847:1	2850:1	4	
LEAF_NODE	2847:1	2847:1	5	{
STATEMENTS	2848:2	2849:2	5	
EXPR_STATEMENT	2848:2	2848:63	6	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	2848:2	2848:2	7	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	2848:2	2848:62	8	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Out of memory" )
CALLEE	2848:2	2848:2	9	TIFFErrorExt
LEAF_NODE	2848:2	2848:2	10	TIFFErrorExt
LEAF_NODE	2848:14	2848:14	9	(
ARGUMENT	2848:15	2848:15	9	img -> tif -> tif_clientdata
FIELD	2848:15	2848:25	10	img -> tif -> tif_clientdata
LEAF_NODE	2848:15	2848:15	11	img
LEAF_NODE	2848:18	2848:18	11	->
LEAF_NODE	2848:20	2848:20	11	tif
LEAF_NODE	2848:23	2848:23	11	->
LEAF_NODE	2848:25	2848:25	11	tif_clientdata
LEAF_NODE	2848:39	2848:39	9	,
ARGUMENT	2848:40	2848:40	9	module
FIELD	2848:40	2848:40	10	module
LEAF_NODE	2848:40	2848:40	11	module
LEAF_NODE	2848:46	2848:46	9	,
ARGUMENT	2848:47	2848:47	9	"Out of memory"
FIELD	2848:47	2848:47	10	"Out of memory"
LEAF_NODE	2848:47	2848:47	11	"Out of memory"
LEAF_NODE	2848:62	2848:62	9	)
LEAF_NODE	2848:63	2848:63	7	;
JUMP_STATEMENT	2849:2	2849:11	6	return ( 0 ) ;
KEYWORD	2849:2	2849:2	7	return
LEAF_NODE	2849:2	2849:2	8	return
DESTINATION	2849:8	2849:8	7	( 0 )
EXPR	2849:8	2849:10	8	( 0 )
LEAF_NODE	2849:8	2849:8	9	(
FIELD	2849:9	2849:9	9	0
LEAF_NODE	2849:9	2849:9	10	0
LEAF_NODE	2849:10	2849:10	9	)
LEAF_NODE	2849:11	2849:11	7	;
LEAF_NODE	2850:1	2850:1	5	}
EXPR_STATEMENT	2851:1	2851:14	3	m = img -> UaToAa ;
EXPR	2851:1	2851:1	4	m = img -> UaToAa
ASSIGN	2851:1	2851:3	5	m = img -> UaToAa
LVAL	2851:1	2851:1	6	m
FIELD	2851:1	2851:1	7	m
LEAF_NODE	2851:1	2851:1	8	m
ASSIGN_OP	2851:2	2851:2	6	=
LEAF_NODE	2851:2	2851:2	7	=
RVAL	2851:3	2851:3	6	img -> UaToAa
FIELD	2851:3	2851:8	7	img -> UaToAa
LEAF_NODE	2851:3	2851:3	8	img
LEAF_NODE	2851:6	2851:6	8	->
LEAF_NODE	2851:8	2851:8	8	UaToAa
LEAF_NODE	2851:14	2851:14	4	;
ITERATION	2852:1	2853:1	3	
KEYWORD	2852:1	2852:1	4	for
LEAF_NODE	2852:1	2852:1	5	for
LEAF_NODE	2852:5	2852:5	4	(
FOR_INIT	2852:6	2852:10	4	na = 0 ;
EXPR	2852:6	2852:6	5	na = 0
ASSIGN	2852:6	2852:9	6	na = 0
LVAL	2852:6	2852:6	7	na
FIELD	2852:6	2852:6	8	na
LEAF_NODE	2852:6	2852:6	9	na
ASSIGN_OP	2852:8	2852:8	7	=
LEAF_NODE	2852:8	2852:8	8	=
RVAL	2852:9	2852:9	7	0
FIELD	2852:9	2852:9	8	0
LEAF_NODE	2852:9	2852:9	9	0
LEAF_NODE	2852:10	2852:10	5	;
CONDITION	2852:12	2852:12	4	na < 256
EXPR	2852:12	2852:15	5	na < 256
FIELD	2852:12	2852:12	6	na
LEAF_NODE	2852:12	2852:12	7	na
REL_OPERATOR	2852:14	2852:14	6	<
LEAF_NODE	2852:14	2852:14	7	<
FIELD	2852:15	2852:15	6	256
LEAF_NODE	2852:15	2852:15	7	256
LEAF_NODE	2852:18	2852:18	4	;
FOR_EXPR	2852:20	2852:20	4	na ++
EXPR	2852:20	2852:20	5	na ++
FIELD	2852:20	2852:22	6	na ++
LEAF_NODE	2852:20	2852:20	7	na
LEAF_NODE	2852:22	2852:22	7	++
LEAF_NODE	2852:24	2852:24	4	)
STATEMENTS	2853:1	2856:1	4	
LEAF_NODE	2853:1	2853:1	5	{
STATEMENTS	2854:2	2854:2	5	
ITERATION	2854:2	2855:3	6	
KEYWORD	2854:2	2854:2	7	for
LEAF_NODE	2854:2	2854:2	8	for
LEAF_NODE	2854:6	2854:6	7	(
FOR_INIT	2854:7	2854:11	7	nv = 0 ;
EXPR	2854:7	2854:7	8	nv = 0
ASSIGN	2854:7	2854:10	9	nv = 0
LVAL	2854:7	2854:7	10	nv
FIELD	2854:7	2854:7	11	nv
LEAF_NODE	2854:7	2854:7	12	nv
ASSIGN_OP	2854:9	2854:9	10	=
LEAF_NODE	2854:9	2854:9	11	=
RVAL	2854:10	2854:10	10	0
FIELD	2854:10	2854:10	11	0
LEAF_NODE	2854:10	2854:10	12	0
LEAF_NODE	2854:11	2854:11	8	;
CONDITION	2854:13	2854:13	7	nv < 256
EXPR	2854:13	2854:16	8	nv < 256
FIELD	2854:13	2854:13	9	nv
LEAF_NODE	2854:13	2854:13	10	nv
REL_OPERATOR	2854:15	2854:15	9	<
LEAF_NODE	2854:15	2854:15	10	<
FIELD	2854:16	2854:16	9	256
LEAF_NODE	2854:16	2854:16	10	256
LEAF_NODE	2854:19	2854:19	7	;
FOR_EXPR	2854:21	2854:21	7	nv ++
EXPR	2854:21	2854:21	8	nv ++
FIELD	2854:21	2854:23	9	nv ++
LEAF_NODE	2854:21	2854:21	10	nv
LEAF_NODE	2854:23	2854:23	10	++
LEAF_NODE	2854:25	2854:25	7	)
STATEMENTS	2855:3	2855:3	7	
EXPR_STATEMENT	2855:3	2855:32	8	* m ++ = ( uint8 ) ( ( nv * na + 127 ) / 255 ) ;
EXPR	2855:3	2855:3	9	* m ++ = ( uint8 ) ( ( nv * na + 127 ) / 255 )
ASSIGN	2855:3	2855:8	10	* m ++ = ( uint8 ) ( ( nv * na + 127 ) / 255 )
LVAL	2855:3	2855:3	11	* m ++
UNARY_EXPR	2855:3	2855:4	12	* m ++
UNARY_OPERATOR	2855:3	2855:3	13	*
LEAF_NODE	2855:3	2855:3	14	*
FIELD	2855:4	2855:5	13	m ++
LEAF_NODE	2855:4	2855:4	14	m
LEAF_NODE	2855:5	2855:5	14	++
ASSIGN_OP	2855:7	2855:7	11	=
LEAF_NODE	2855:7	2855:7	12	=
RVAL	2855:8	2855:31	11	( uint8 ) ( ( nv * na + 127 ) / 255 )
LEAF_NODE	2855:8	2855:8	12	(
TYPE_NAME	2855:9	2855:9	12	uint8
LEAF_NODE	2855:9	2855:9	13	uint8
LEAF_NODE	2855:14	2855:14	12	)
LEAF_NODE	2855:15	2855:15	12	(
LEAF_NODE	2855:16	2855:16	12	(
FIELD	2855:17	2855:17	12	nv
LEAF_NODE	2855:17	2855:17	13	nv
LEAF_NODE	2855:19	2855:19	12	*
FIELD	2855:20	2855:20	12	na
LEAF_NODE	2855:20	2855:20	13	na
LEAF_NODE	2855:22	2855:22	12	+
FIELD	2855:23	2855:23	12	127
LEAF_NODE	2855:23	2855:23	13	127
LEAF_NODE	2855:26	2855:26	12	)
LEAF_NODE	2855:27	2855:27	12	/
FIELD	2855:28	2855:28	12	255
LEAF_NODE	2855:28	2855:28	13	255
LEAF_NODE	2855:31	2855:31	12	)
LEAF_NODE	2855:32	2855:32	9	;
LEAF_NODE	2856:1	2856:1	5	}
JUMP_STATEMENT	2857:1	2857:10	3	return ( 1 ) ;
KEYWORD	2857:1	2857:1	4	return
LEAF_NODE	2857:1	2857:1	5	return
DESTINATION	2857:7	2857:7	4	( 1 )
EXPR	2857:7	2857:9	5	( 1 )
LEAF_NODE	2857:7	2857:7	6	(
FIELD	2857:8	2857:8	6	1
LEAF_NODE	2857:8	2857:8	7	1
LEAF_NODE	2857:9	2857:9	6	)
LEAF_NODE	2857:10	2857:10	4	;
LEAF_NODE	2858:0	2858:0	2	}
FUNCTION_DEF	2860:0	2877:0	1	
RETURN_TYPE	2860:0	2860:7	2	static int
LEAF_NODE	2860:0	2860:0	3	static
TYPE_NAME	2860:7	2860:7	3	int
LEAF_NODE	2860:7	2860:7	4	int
FUNCTION_NAME	2861:0	2861:0	2	BuildMapBitdepth16To8
LEAF_NODE	2861:0	2861:0	3	BuildMapBitdepth16To8
PARAMETER_LIST	2861:21	2861:40	2	( TIFFRGBAImage * img )
LEAF_NODE	2861:21	2861:21	3	(
PARAMETER_DECL	2861:22	2861:37	3	TIFFRGBAImage * img
TYPE	2861:22	2861:35	4	TIFFRGBAImage *
TYPE_NAME	2861:22	2861:22	5	TIFFRGBAImage
LEAF_NODE	2861:22	2861:22	6	TIFFRGBAImage
POINTER	2861:35	2861:35	5	*
LEAF_NODE	2861:35	2861:35	6	*
NAME	2861:37	2861:37	4	img
LEAF_NODE	2861:37	2861:37	5	img
LEAF_NODE	2861:40	2861:40	3	)
LEAF_NODE	2862:0	2862:0	2	{
STATEMENTS	2863:1	2876:1	2	
LEAF_NODE	2863:1	2863:1	3	static
SIMPLE_DECL	2863:8	2863:51	3	const char [ ] module ; module = "BuildMapBitdepth16To8" ;
VAR_DECL	2863:8	2863:19	4	const char [ ] module ; module = "BuildMapBitdepth16To8"
TYPE	2863:8	2863:25	5	const char [ ]
TYPE_NAME	2863:8	2863:14	6	const char
LEAF_NODE	2863:8	2863:8	7	const
LEAF_NODE	2863:14	2863:14	7	char
TYPE_SUFFIX	2863:25	2863:26	6	[ ]
LEAF_NODE	2863:25	2863:25	7	[
LEAF_NODE	2863:26	2863:26	7	]
NAME	2863:19	2863:19	5	module
LEAF_NODE	2863:19	2863:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	2863:19	2863:19	5	module = "BuildMapBitdepth16To8"
ASSIGN	2863:19	2863:28	6	module = "BuildMapBitdepth16To8"
LVAL	2863:19	2863:19	7	module
NAME	2863:19	2863:19	8	module
LEAF_NODE	2863:19	2863:19	9	module
ASSIGN_OP	2863:27	2863:27	7	=
LEAF_NODE	2863:27	2863:27	8	=
RVAL	2863:28	2863:28	7	"BuildMapBitdepth16To8"
FIELD	2863:28	2863:28	8	"BuildMapBitdepth16To8"
LEAF_NODE	2863:28	2863:28	9	"BuildMapBitdepth16To8"
LEAF_NODE	2863:51	2863:51	4	;
SIMPLE_DECL	2864:1	2864:9	3	uint8 * m ;
VAR_DECL	2864:1	2864:8	4	uint8 * m
TYPE	2864:1	2864:6	5	uint8 *
TYPE_NAME	2864:1	2864:1	6	uint8
LEAF_NODE	2864:1	2864:1	7	uint8
POINTER	2864:6	2864:6	6	*
LEAF_NODE	2864:6	2864:6	7	*
NAME	2864:8	2864:8	5	m
LEAF_NODE	2864:8	2864:8	6	m
LEAF_NODE	2864:9	2864:9	4	;
SIMPLE_DECL	2865:1	2865:9	3	uint32 n ;
VAR_DECL	2865:1	2865:8	4	uint32 n
TYPE	2865:1	2865:1	5	uint32
TYPE_NAME	2865:1	2865:1	6	uint32
LEAF_NODE	2865:1	2865:1	7	uint32
NAME	2865:8	2865:8	5	n
LEAF_NODE	2865:8	2865:8	6	n
LEAF_NODE	2865:9	2865:9	4	;
EXPR_STATEMENT	2866:1	2866:33	3	assert ( img -> Bitdepth16To8 == NULL ) ;
EXPR	2866:1	2866:1	4	assert ( img -> Bitdepth16To8 == NULL )
FUNCTION_CALL	2866:1	2866:32	5	assert ( img -> Bitdepth16To8 == NULL )
CALLEE	2866:1	2866:1	6	assert
LEAF_NODE	2866:1	2866:1	7	assert
LEAF_NODE	2866:7	2866:7	6	(
ARGUMENT	2866:8	2866:28	6	img -> Bitdepth16To8 == NULL
FIELD	2866:8	2866:13	7	img -> Bitdepth16To8
LEAF_NODE	2866:8	2866:8	8	img
LEAF_NODE	2866:11	2866:11	8	->
LEAF_NODE	2866:13	2866:13	8	Bitdepth16To8
EQ_OPERATOR	2866:26	2866:26	7	==
LEAF_NODE	2866:26	2866:26	8	==
FIELD	2866:28	2866:28	7	NULL
LEAF_NODE	2866:28	2866:28	8	NULL
LEAF_NODE	2866:32	2866:32	6	)
LEAF_NODE	2866:33	2866:33	4	;
EXPR_STATEMENT	2867:1	2867:38	3	img -> Bitdepth16To8 = _TIFFmalloc ( 65536 ) ;
EXPR	2867:1	2867:1	4	img -> Bitdepth16To8 = _TIFFmalloc ( 65536 )
ASSIGN	2867:1	2867:20	5	img -> Bitdepth16To8 = _TIFFmalloc ( 65536 )
LVAL	2867:1	2867:1	6	img -> Bitdepth16To8
FIELD	2867:1	2867:6	7	img -> Bitdepth16To8
LEAF_NODE	2867:1	2867:1	8	img
LEAF_NODE	2867:4	2867:4	8	->
LEAF_NODE	2867:6	2867:6	8	Bitdepth16To8
ASSIGN_OP	2867:19	2867:19	6	=
LEAF_NODE	2867:19	2867:19	7	=
RVAL	2867:20	2867:20	6	_TIFFmalloc ( 65536 )
FUNCTION_CALL	2867:20	2867:37	7	_TIFFmalloc ( 65536 )
CALLEE	2867:20	2867:20	8	_TIFFmalloc
LEAF_NODE	2867:20	2867:20	9	_TIFFmalloc
LEAF_NODE	2867:31	2867:31	8	(
ARGUMENT	2867:32	2867:32	8	65536
FIELD	2867:32	2867:32	9	65536
LEAF_NODE	2867:32	2867:32	10	65536
LEAF_NODE	2867:37	2867:37	8	)
LEAF_NODE	2867:38	2867:38	4	;
SELECTION	2868:1	2869:1	3	
KEYWORD	2868:1	2868:1	4	if
LEAF_NODE	2868:1	2868:1	5	if
LEAF_NODE	2868:4	2868:4	4	(
CONDITION	2868:5	2868:5	4	img -> Bitdepth16To8 == NULL
EXPR	2868:5	2868:25	5	img -> Bitdepth16To8 == NULL
FIELD	2868:5	2868:10	6	img -> Bitdepth16To8
LEAF_NODE	2868:5	2868:5	7	img
LEAF_NODE	2868:8	2868:8	7	->
LEAF_NODE	2868:10	2868:10	7	Bitdepth16To8
EQ_OPERATOR	2868:23	2868:23	6	==
LEAF_NODE	2868:23	2868:23	7	==
FIELD	2868:25	2868:25	6	NULL
LEAF_NODE	2868:25	2868:25	7	NULL
LEAF_NODE	2868:29	2868:29	4	)
STATEMENTS	2869:1	2872:1	4	
LEAF_NODE	2869:1	2869:1	5	{
STATEMENTS	2870:2	2871:2	5	
EXPR_STATEMENT	2870:2	2870:63	6	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	2870:2	2870:2	7	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	2870:2	2870:62	8	TIFFErrorExt ( img -> tif -> tif_clientdata , module , "Out of memory" )
CALLEE	2870:2	2870:2	9	TIFFErrorExt
LEAF_NODE	2870:2	2870:2	10	TIFFErrorExt
LEAF_NODE	2870:14	2870:14	9	(
ARGUMENT	2870:15	2870:15	9	img -> tif -> tif_clientdata
FIELD	2870:15	2870:25	10	img -> tif -> tif_clientdata
LEAF_NODE	2870:15	2870:15	11	img
LEAF_NODE	2870:18	2870:18	11	->
LEAF_NODE	2870:20	2870:20	11	tif
LEAF_NODE	2870:23	2870:23	11	->
LEAF_NODE	2870:25	2870:25	11	tif_clientdata
LEAF_NODE	2870:39	2870:39	9	,
ARGUMENT	2870:40	2870:40	9	module
FIELD	2870:40	2870:40	10	module
LEAF_NODE	2870:40	2870:40	11	module
LEAF_NODE	2870:46	2870:46	9	,
ARGUMENT	2870:47	2870:47	9	"Out of memory"
FIELD	2870:47	2870:47	10	"Out of memory"
LEAF_NODE	2870:47	2870:47	11	"Out of memory"
LEAF_NODE	2870:62	2870:62	9	)
LEAF_NODE	2870:63	2870:63	7	;
JUMP_STATEMENT	2871:2	2871:11	6	return ( 0 ) ;
KEYWORD	2871:2	2871:2	7	return
LEAF_NODE	2871:2	2871:2	8	return
DESTINATION	2871:8	2871:8	7	( 0 )
EXPR	2871:8	2871:10	8	( 0 )
LEAF_NODE	2871:8	2871:8	9	(
FIELD	2871:9	2871:9	9	0
LEAF_NODE	2871:9	2871:9	10	0
LEAF_NODE	2871:10	2871:10	9	)
LEAF_NODE	2871:11	2871:11	7	;
LEAF_NODE	2872:1	2872:1	5	}
EXPR_STATEMENT	2873:1	2873:21	3	m = img -> Bitdepth16To8 ;
EXPR	2873:1	2873:1	4	m = img -> Bitdepth16To8
ASSIGN	2873:1	2873:3	5	m = img -> Bitdepth16To8
LVAL	2873:1	2873:1	6	m
FIELD	2873:1	2873:1	7	m
LEAF_NODE	2873:1	2873:1	8	m
ASSIGN_OP	2873:2	2873:2	6	=
LEAF_NODE	2873:2	2873:2	7	=
RVAL	2873:3	2873:3	6	img -> Bitdepth16To8
FIELD	2873:3	2873:8	7	img -> Bitdepth16To8
LEAF_NODE	2873:3	2873:3	8	img
LEAF_NODE	2873:6	2873:6	8	->
LEAF_NODE	2873:8	2873:8	8	Bitdepth16To8
LEAF_NODE	2873:21	2873:21	4	;
ITERATION	2874:1	2875:2	3	
KEYWORD	2874:1	2874:1	4	for
LEAF_NODE	2874:1	2874:1	5	for
LEAF_NODE	2874:5	2874:5	4	(
FOR_INIT	2874:6	2874:9	4	n = 0 ;
EXPR	2874:6	2874:6	5	n = 0
ASSIGN	2874:6	2874:8	6	n = 0
LVAL	2874:6	2874:6	7	n
FIELD	2874:6	2874:6	8	n
LEAF_NODE	2874:6	2874:6	9	n
ASSIGN_OP	2874:7	2874:7	7	=
LEAF_NODE	2874:7	2874:7	8	=
RVAL	2874:8	2874:8	7	0
FIELD	2874:8	2874:8	8	0
LEAF_NODE	2874:8	2874:8	9	0
LEAF_NODE	2874:9	2874:9	5	;
CONDITION	2874:11	2874:11	4	n < 65536
EXPR	2874:11	2874:13	5	n < 65536
FIELD	2874:11	2874:11	6	n
LEAF_NODE	2874:11	2874:11	7	n
REL_OPERATOR	2874:12	2874:12	6	<
LEAF_NODE	2874:12	2874:12	7	<
FIELD	2874:13	2874:13	6	65536
LEAF_NODE	2874:13	2874:13	7	65536
LEAF_NODE	2874:18	2874:18	4	;
FOR_EXPR	2874:20	2874:20	4	n ++
EXPR	2874:20	2874:20	5	n ++
FIELD	2874:20	2874:21	6	n ++
LEAF_NODE	2874:20	2874:20	7	n
LEAF_NODE	2874:21	2874:21	7	++
LEAF_NODE	2874:23	2874:23	4	)
STATEMENTS	2875:2	2875:2	4	
EXPR_STATEMENT	2875:2	2875:27	5	* m ++ = ( uint8 ) ( ( n + 128 ) / 257 ) ;
EXPR	2875:2	2875:2	6	* m ++ = ( uint8 ) ( ( n + 128 ) / 257 )
ASSIGN	2875:2	2875:7	7	* m ++ = ( uint8 ) ( ( n + 128 ) / 257 )
LVAL	2875:2	2875:2	8	* m ++
UNARY_EXPR	2875:2	2875:3	9	* m ++
UNARY_OPERATOR	2875:2	2875:2	10	*
LEAF_NODE	2875:2	2875:2	11	*
FIELD	2875:3	2875:4	10	m ++
LEAF_NODE	2875:3	2875:3	11	m
LEAF_NODE	2875:4	2875:4	11	++
ASSIGN_OP	2875:6	2875:6	8	=
LEAF_NODE	2875:6	2875:6	9	=
RVAL	2875:7	2875:26	8	( uint8 ) ( ( n + 128 ) / 257 )
LEAF_NODE	2875:7	2875:7	9	(
TYPE_NAME	2875:8	2875:8	9	uint8
LEAF_NODE	2875:8	2875:8	10	uint8
LEAF_NODE	2875:13	2875:13	9	)
LEAF_NODE	2875:14	2875:14	9	(
LEAF_NODE	2875:15	2875:15	9	(
FIELD	2875:16	2875:16	9	n
LEAF_NODE	2875:16	2875:16	10	n
LEAF_NODE	2875:17	2875:17	9	+
FIELD	2875:18	2875:18	9	128
LEAF_NODE	2875:18	2875:18	10	128
LEAF_NODE	2875:21	2875:21	9	)
LEAF_NODE	2875:22	2875:22	9	/
FIELD	2875:23	2875:23	9	257
LEAF_NODE	2875:23	2875:23	10	257
LEAF_NODE	2875:26	2875:26	9	)
LEAF_NODE	2875:27	2875:27	6	;
JUMP_STATEMENT	2876:1	2876:10	3	return ( 1 ) ;
KEYWORD	2876:1	2876:1	4	return
LEAF_NODE	2876:1	2876:1	5	return
DESTINATION	2876:7	2876:7	4	( 1 )
EXPR	2876:7	2876:9	5	( 1 )
LEAF_NODE	2876:7	2876:7	6	(
FIELD	2876:8	2876:8	6	1
LEAF_NODE	2876:8	2876:8	7	1
LEAF_NODE	2876:9	2876:9	6	)
LEAF_NODE	2876:10	2876:10	4	;
LEAF_NODE	2877:0	2877:0	2	}
FUNCTION_DEF	2888:0	2893:0	1	
RETURN_TYPE	2888:0	2888:0	2	int
TYPE_NAME	2888:0	2888:0	3	int
LEAF_NODE	2888:0	2888:0	4	int
FUNCTION_NAME	2889:0	2889:0	2	TIFFReadRGBAStrip
LEAF_NODE	2889:0	2889:0	3	TIFFReadRGBAStrip
PARAMETER_LIST	2889:17	2889:57	2	( TIFF * tif , uint32 row , uint32 * raster )
LEAF_NODE	2889:17	2889:17	3	(
PARAMETER_DECL	2889:18	2889:24	3	TIFF * tif
TYPE	2889:18	2889:22	4	TIFF *
TYPE_NAME	2889:18	2889:18	5	TIFF
LEAF_NODE	2889:18	2889:18	6	TIFF
POINTER	2889:22	2889:22	5	*
LEAF_NODE	2889:22	2889:22	6	*
NAME	2889:24	2889:24	4	tif
LEAF_NODE	2889:24	2889:24	5	tif
LEAF_NODE	2889:27	2889:27	3	,
PARAMETER_DECL	2889:29	2889:36	3	uint32 row
TYPE	2889:29	2889:29	4	uint32
TYPE_NAME	2889:29	2889:29	5	uint32
LEAF_NODE	2889:29	2889:29	6	uint32
NAME	2889:36	2889:36	4	row
LEAF_NODE	2889:36	2889:36	5	row
LEAF_NODE	2889:39	2889:39	3	,
PARAMETER_DECL	2889:41	2889:50	3	uint32 * raster
TYPE	2889:41	2889:48	4	uint32 *
TYPE_NAME	2889:41	2889:41	5	uint32
LEAF_NODE	2889:41	2889:41	6	uint32
POINTER	2889:48	2889:48	5	*
LEAF_NODE	2889:48	2889:48	6	*
NAME	2889:50	2889:50	4	raster
LEAF_NODE	2889:50	2889:50	5	raster
LEAF_NODE	2889:57	2889:57	3	)
LEAF_NODE	2891:0	2891:0	2	{
STATEMENTS	2892:4	2892:4	2	
JUMP_STATEMENT	2892:4	2892:53	3	return TIFFReadRGBAStripExt ( tif , row , raster , 0 ) ;
KEYWORD	2892:4	2892:4	4	return
LEAF_NODE	2892:4	2892:4	5	return
DESTINATION	2892:11	2892:11	4	TIFFReadRGBAStripExt ( tif , row , raster , 0 )
EXPR	2892:11	2892:11	5	TIFFReadRGBAStripExt ( tif , row , raster , 0 )
FUNCTION_CALL	2892:11	2892:52	6	TIFFReadRGBAStripExt ( tif , row , raster , 0 )
CALLEE	2892:11	2892:11	7	TIFFReadRGBAStripExt
LEAF_NODE	2892:11	2892:11	8	TIFFReadRGBAStripExt
LEAF_NODE	2892:31	2892:31	7	(
ARGUMENT	2892:32	2892:32	7	tif
FIELD	2892:32	2892:32	8	tif
LEAF_NODE	2892:32	2892:32	9	tif
LEAF_NODE	2892:35	2892:35	7	,
ARGUMENT	2892:37	2892:37	7	row
FIELD	2892:37	2892:37	8	row
LEAF_NODE	2892:37	2892:37	9	row
LEAF_NODE	2892:40	2892:40	7	,
ARGUMENT	2892:42	2892:42	7	raster
FIELD	2892:42	2892:42	8	raster
LEAF_NODE	2892:42	2892:42	9	raster
LEAF_NODE	2892:48	2892:48	7	,
ARGUMENT	2892:50	2892:50	7	0
FIELD	2892:50	2892:50	8	0
LEAF_NODE	2892:50	2892:50	9	0
LEAF_NODE	2892:52	2892:52	7	)
LEAF_NODE	2892:53	2892:53	4	;
LEAF_NODE	2893:0	2893:0	2	}
FUNCTION_DEF	2895:0	2938:0	1	
RETURN_TYPE	2895:0	2895:0	2	int
TYPE_NAME	2895:0	2895:0	3	int
LEAF_NODE	2895:0	2895:0	4	int
FUNCTION_NAME	2896:0	2896:0	2	TIFFReadRGBAStripExt
LEAF_NODE	2896:0	2896:0	3	TIFFReadRGBAStripExt
PARAMETER_LIST	2896:20	2896:78	2	( TIFF * tif , uint32 row , uint32 * raster , int stop_on_error )
LEAF_NODE	2896:20	2896:20	3	(
PARAMETER_DECL	2896:21	2896:27	3	TIFF * tif
TYPE	2896:21	2896:25	4	TIFF *
TYPE_NAME	2896:21	2896:21	5	TIFF
LEAF_NODE	2896:21	2896:21	6	TIFF
POINTER	2896:25	2896:25	5	*
LEAF_NODE	2896:25	2896:25	6	*
NAME	2896:27	2896:27	4	tif
LEAF_NODE	2896:27	2896:27	5	tif
LEAF_NODE	2896:30	2896:30	3	,
PARAMETER_DECL	2896:32	2896:39	3	uint32 row
TYPE	2896:32	2896:32	4	uint32
TYPE_NAME	2896:32	2896:32	5	uint32
LEAF_NODE	2896:32	2896:32	6	uint32
NAME	2896:39	2896:39	4	row
LEAF_NODE	2896:39	2896:39	5	row
LEAF_NODE	2896:42	2896:42	3	,
PARAMETER_DECL	2896:44	2896:53	3	uint32 * raster
TYPE	2896:44	2896:51	4	uint32 *
TYPE_NAME	2896:44	2896:44	5	uint32
LEAF_NODE	2896:44	2896:44	6	uint32
POINTER	2896:51	2896:51	5	*
LEAF_NODE	2896:51	2896:51	6	*
NAME	2896:53	2896:53	4	raster
LEAF_NODE	2896:53	2896:53	5	raster
LEAF_NODE	2896:59	2896:59	3	,
PARAMETER_DECL	2896:61	2896:65	3	int stop_on_error
TYPE	2896:61	2896:61	4	int
TYPE_NAME	2896:61	2896:61	5	int
LEAF_NODE	2896:61	2896:61	6	int
NAME	2896:65	2896:65	4	stop_on_error
LEAF_NODE	2896:65	2896:65	5	stop_on_error
LEAF_NODE	2896:78	2896:78	3	)
LEAF_NODE	2898:0	2898:0	2	{
STATEMENTS	2899:4	2937:15	2	
SIMPLE_DECL	2899:4	2899:25	3	char [ 1024 ] emsg ; emsg = "" ;
VAR_DECL	2899:4	2899:10	4	char [ 1024 ] emsg ; emsg = ""
TYPE	2899:4	2899:14	5	char [ 1024 ]
TYPE_NAME	2899:4	2899:4	6	char
LEAF_NODE	2899:4	2899:4	7	char
TYPE_SUFFIX	2899:14	2899:19	6	[ 1024 ]
LEAF_NODE	2899:14	2899:14	7	[
FIELD	2899:15	2899:15	7	1024
LEAF_NODE	2899:15	2899:15	8	1024
LEAF_NODE	2899:19	2899:19	7	]
NAME	2899:10	2899:10	5	emsg
LEAF_NODE	2899:10	2899:10	6	emsg
LEAF_NODE	0:0	0:0	5	;
INIT	2899:10	2899:10	5	emsg = ""
ASSIGN	2899:10	2899:23	6	emsg = ""
LVAL	2899:10	2899:10	7	emsg
NAME	2899:10	2899:10	8	emsg
LEAF_NODE	2899:10	2899:10	9	emsg
ASSIGN_OP	2899:21	2899:21	7	=
LEAF_NODE	2899:21	2899:21	8	=
RVAL	2899:23	2899:23	7	""
FIELD	2899:23	2899:23	8	""
LEAF_NODE	2899:23	2899:23	9	""
LEAF_NODE	2899:25	2899:25	4	;
SIMPLE_DECL	2900:4	2900:21	3	TIFFRGBAImage img ;
VAR_DECL	2900:4	2900:18	4	TIFFRGBAImage img
TYPE	2900:4	2900:4	5	TIFFRGBAImage
TYPE_NAME	2900:4	2900:4	6	TIFFRGBAImage
LEAF_NODE	2900:4	2900:4	7	TIFFRGBAImage
NAME	2900:18	2900:18	5	img
LEAF_NODE	2900:18	2900:18	6	img
LEAF_NODE	2900:21	2900:21	4	;
SIMPLE_DECL	2901:4	2901:11	3	int ok ;
VAR_DECL	2901:4	2901:9	4	int ok
TYPE	2901:4	2901:4	5	int
TYPE_NAME	2901:4	2901:4	6	int
LEAF_NODE	2901:4	2901:4	7	int
NAME	2901:9	2901:9	5	ok
LEAF_NODE	2901:9	2901:9	6	ok
LEAF_NODE	2901:11	2901:11	4	;
SIMPLE_DECL	2902:4	2902:37	3	uint32 rowsperstrip , uint32 rows_to_read ;
INIT_DECL_LIST	2902:4	2902:4	4	uint32 rowsperstrip , uint32 rows_to_read
VAR_DECL	2902:4	2902:11	5	uint32 rowsperstrip
TYPE	2902:4	2902:4	6	uint32
TYPE_NAME	2902:4	2902:4	7	uint32
LEAF_NODE	2902:4	2902:4	8	uint32
NAME	2902:11	2902:11	6	rowsperstrip
LEAF_NODE	2902:11	2902:11	7	rowsperstrip
LEAF_NODE	2902:23	2902:23	5	,
VAR_DECL	2902:4	2902:25	5	uint32 rows_to_read
TYPE	2902:4	2902:4	6	uint32
TYPE_NAME	2902:4	2902:4	7	uint32
LEAF_NODE	2902:4	2902:4	8	uint32
NAME	2902:25	2902:25	6	rows_to_read
LEAF_NODE	2902:25	2902:25	7	rows_to_read
LEAF_NODE	2902:37	2902:37	4	;
SELECTION	2904:4	2905:4	3	
KEYWORD	2904:4	2904:4	4	if
LEAF_NODE	2904:4	2904:4	5	if
LEAF_NODE	2904:6	2904:6	4	(
CONDITION	2904:8	2904:8	4	TIFFIsTiled ( tif )
EXPR	2904:8	2904:8	5	TIFFIsTiled ( tif )
FUNCTION_CALL	2904:8	2904:25	6	TIFFIsTiled ( tif )
CALLEE	2904:8	2904:8	7	TIFFIsTiled
LEAF_NODE	2904:8	2904:8	8	TIFFIsTiled
LEAF_NODE	2904:19	2904:19	7	(
ARGUMENT	2904:21	2904:21	7	tif
FIELD	2904:21	2904:21	8	tif
LEAF_NODE	2904:21	2904:21	9	tif
LEAF_NODE	2904:25	2904:25	7	)
LEAF_NODE	2904:27	2904:27	4	)
STATEMENTS	2905:4	2909:4	4	
LEAF_NODE	2905:4	2905:4	5	{
STATEMENTS	2906:2	2908:1	5	
EXPR_STATEMENT	2906:2	2907:67	6	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Can't use TIFFReadRGBAStrip() with tiled file." ) ;
EXPR	2906:2	2906:2	7	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Can't use TIFFReadRGBAStrip() with tiled file." )
FUNCTION_CALL	2906:2	2907:66	8	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Can't use TIFFReadRGBAStrip() with tiled file." )
CALLEE	2906:2	2906:2	9	TIFFErrorExt
LEAF_NODE	2906:2	2906:2	10	TIFFErrorExt
LEAF_NODE	2906:14	2906:14	9	(
ARGUMENT	2906:15	2906:15	9	tif -> tif_clientdata
FIELD	2906:15	2906:20	10	tif -> tif_clientdata
LEAF_NODE	2906:15	2906:15	11	tif
LEAF_NODE	2906:18	2906:18	11	->
LEAF_NODE	2906:20	2906:20	11	tif_clientdata
LEAF_NODE	2906:34	2906:34	9	,
ARGUMENT	2906:36	2906:36	9	TIFFFileName ( tif )
FUNCTION_CALL	2906:36	2906:52	10	TIFFFileName ( tif )
CALLEE	2906:36	2906:36	11	TIFFFileName
LEAF_NODE	2906:36	2906:36	12	TIFFFileName
LEAF_NODE	2906:48	2906:48	11	(
ARGUMENT	2906:49	2906:49	11	tif
FIELD	2906:49	2906:49	12	tif
LEAF_NODE	2906:49	2906:49	13	tif
LEAF_NODE	2906:52	2906:52	11	)
LEAF_NODE	2906:53	2906:53	9	,
ARGUMENT	2907:18	2907:18	9	"Can't use TIFFReadRGBAStrip() with tiled file."
FIELD	2907:18	2907:18	10	"Can't use TIFFReadRGBAStrip() with tiled file."
LEAF_NODE	2907:18	2907:18	11	"Can't use TIFFReadRGBAStrip() with tiled file."
LEAF_NODE	2907:66	2907:66	9	)
LEAF_NODE	2907:67	2907:67	7	;
JUMP_STATEMENT	2908:1	2908:11	6	return ( 0 ) ;
KEYWORD	2908:1	2908:1	7	return
LEAF_NODE	2908:1	2908:1	8	return
DESTINATION	2908:8	2908:8	7	( 0 )
EXPR	2908:8	2908:10	8	( 0 )
LEAF_NODE	2908:8	2908:8	9	(
FIELD	2908:9	2908:9	9	0
LEAF_NODE	2908:9	2908:9	10	0
LEAF_NODE	2908:10	2908:10	9	)
LEAF_NODE	2908:11	2908:11	7	;
LEAF_NODE	2909:4	2909:4	5	}
EXPR_STATEMENT	2911:4	2911:67	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	2911:4	2911:4	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
FUNCTION_CALL	2911:4	2911:66	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	2911:4	2911:4	6	TIFFGetFieldDefaulted
LEAF_NODE	2911:4	2911:4	7	TIFFGetFieldDefaulted
LEAF_NODE	2911:25	2911:25	6	(
ARGUMENT	2911:26	2911:26	6	tif
FIELD	2911:26	2911:26	7	tif
LEAF_NODE	2911:26	2911:26	8	tif
LEAF_NODE	2911:29	2911:29	6	,
ARGUMENT	2911:31	2911:31	6	TIFFTAG_ROWSPERSTRIP
FIELD	2911:31	2911:31	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	2911:31	2911:31	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	2911:51	2911:51	6	,
ARGUMENT	2911:53	2911:53	6	& rowsperstrip
UNARY_EXPR	2911:53	2911:54	7	& rowsperstrip
UNARY_OPERATOR	2911:53	2911:53	8	&
LEAF_NODE	2911:53	2911:53	9	&
FIELD	2911:54	2911:54	8	rowsperstrip
LEAF_NODE	2911:54	2911:54	9	rowsperstrip
LEAF_NODE	2911:66	2911:66	6	)
LEAF_NODE	2911:67	2911:67	4	;
SELECTION	2912:4	2913:4	3	
KEYWORD	2912:4	2912:4	4	if
LEAF_NODE	2912:4	2912:4	5	if
LEAF_NODE	2912:6	2912:6	4	(
CONDITION	2912:8	2912:8	4	( row % rowsperstrip ) != 0
EXPR	2912:8	2912:32	5	( row % rowsperstrip ) != 0
LEAF_NODE	2912:8	2912:8	6	(
FIELD	2912:9	2912:9	6	row
LEAF_NODE	2912:9	2912:9	7	row
LEAF_NODE	2912:13	2912:13	6	%
FIELD	2912:15	2912:15	6	rowsperstrip
LEAF_NODE	2912:15	2912:15	7	rowsperstrip
LEAF_NODE	2912:27	2912:27	6	)
EQ_OPERATOR	2912:29	2912:29	6	!=
LEAF_NODE	2912:29	2912:29	7	!=
FIELD	2912:32	2912:32	6	0
LEAF_NODE	2912:32	2912:32	7	0
LEAF_NODE	2912:34	2912:34	4	)
STATEMENTS	2913:4	2917:4	4	
LEAF_NODE	2913:4	2913:4	5	{
STATEMENTS	2914:2	2916:2	5	
EXPR_STATEMENT	2914:2	2915:66	6	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Row passed to TIFFReadRGBAStrip() must be first in a strip." ) ;
EXPR	2914:2	2914:2	7	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Row passed to TIFFReadRGBAStrip() must be first in a strip." )
FUNCTION_CALL	2914:2	2915:65	8	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Row passed to TIFFReadRGBAStrip() must be first in a strip." )
CALLEE	2914:2	2914:2	9	TIFFErrorExt
LEAF_NODE	2914:2	2914:2	10	TIFFErrorExt
LEAF_NODE	2914:14	2914:14	9	(
ARGUMENT	2914:15	2914:15	9	tif -> tif_clientdata
FIELD	2914:15	2914:20	10	tif -> tif_clientdata
LEAF_NODE	2914:15	2914:15	11	tif
LEAF_NODE	2914:18	2914:18	11	->
LEAF_NODE	2914:20	2914:20	11	tif_clientdata
LEAF_NODE	2914:34	2914:34	9	,
ARGUMENT	2914:36	2914:36	9	TIFFFileName ( tif )
FUNCTION_CALL	2914:36	2914:52	10	TIFFFileName ( tif )
CALLEE	2914:36	2914:36	11	TIFFFileName
LEAF_NODE	2914:36	2914:36	12	TIFFFileName
LEAF_NODE	2914:48	2914:48	11	(
ARGUMENT	2914:49	2914:49	11	tif
FIELD	2914:49	2914:49	12	tif
LEAF_NODE	2914:49	2914:49	13	tif
LEAF_NODE	2914:52	2914:52	11	)
LEAF_NODE	2914:53	2914:53	9	,
ARGUMENT	2915:4	2915:4	9	"Row passed to TIFFReadRGBAStrip() must be first in a strip."
FIELD	2915:4	2915:4	10	"Row passed to TIFFReadRGBAStrip() must be first in a strip."
LEAF_NODE	2915:4	2915:4	11	"Row passed to TIFFReadRGBAStrip() must be first in a strip."
LEAF_NODE	2915:65	2915:65	9	)
LEAF_NODE	2915:66	2915:66	7	;
JUMP_STATEMENT	2916:2	2916:12	6	return ( 0 ) ;
KEYWORD	2916:2	2916:2	7	return
LEAF_NODE	2916:2	2916:2	8	return
DESTINATION	2916:9	2916:9	7	( 0 )
EXPR	2916:9	2916:11	8	( 0 )
LEAF_NODE	2916:9	2916:9	9	(
FIELD	2916:10	2916:10	9	0
LEAF_NODE	2916:10	2916:10	10	0
LEAF_NODE	2916:11	2916:11	9	)
LEAF_NODE	2916:12	2916:12	7	;
LEAF_NODE	2917:4	2917:4	5	}
SELECTION	2919:4	2919:90	3	
KEYWORD	2919:4	2919:4	4	if
LEAF_NODE	2919:4	2919:4	5	if
LEAF_NODE	2919:7	2919:7	4	(
CONDITION	2919:8	2919:8	4	TIFFRGBAImageOK ( tif , emsg ) && TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
EXPR	2919:8	2919:8	5	TIFFRGBAImageOK ( tif , emsg ) && TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
AND	2919:8	2919:38	6	TIFFRGBAImageOK ( tif , emsg ) && TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
EXPR	2919:8	2919:8	7	TIFFRGBAImageOK ( tif , emsg )
FUNCTION_CALL	2919:8	2919:33	8	TIFFRGBAImageOK ( tif , emsg )
CALLEE	2919:8	2919:8	9	TIFFRGBAImageOK
LEAF_NODE	2919:8	2919:8	10	TIFFRGBAImageOK
LEAF_NODE	2919:23	2919:23	9	(
ARGUMENT	2919:24	2919:24	9	tif
FIELD	2919:24	2919:24	10	tif
LEAF_NODE	2919:24	2919:24	11	tif
LEAF_NODE	2919:27	2919:27	9	,
ARGUMENT	2919:29	2919:29	9	emsg
FIELD	2919:29	2919:29	10	emsg
LEAF_NODE	2919:29	2919:29	11	emsg
LEAF_NODE	2919:33	2919:33	9	)
LEAF_NODE	2919:35	2919:35	7	&&
EXPR	2919:38	2919:38	7	TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
FUNCTION_CALL	2919:38	2919:87	8	TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
CALLEE	2919:38	2919:38	9	TIFFRGBAImageBegin
LEAF_NODE	2919:38	2919:38	10	TIFFRGBAImageBegin
LEAF_NODE	2919:56	2919:56	9	(
ARGUMENT	2919:57	2919:57	9	& img
UNARY_EXPR	2919:57	2919:58	10	& img
UNARY_OPERATOR	2919:57	2919:57	11	&
LEAF_NODE	2919:57	2919:57	12	&
FIELD	2919:58	2919:58	11	img
LEAF_NODE	2919:58	2919:58	12	img
LEAF_NODE	2919:61	2919:61	9	,
ARGUMENT	2919:63	2919:63	9	tif
FIELD	2919:63	2919:63	10	tif
LEAF_NODE	2919:63	2919:63	11	tif
LEAF_NODE	2919:66	2919:66	9	,
ARGUMENT	2919:68	2919:68	9	stop_on_error
FIELD	2919:68	2919:68	10	stop_on_error
LEAF_NODE	2919:68	2919:68	11	stop_on_error
LEAF_NODE	2919:81	2919:81	9	,
ARGUMENT	2919:83	2919:83	9	emsg
FIELD	2919:83	2919:83	10	emsg
LEAF_NODE	2919:83	2919:83	11	emsg
LEAF_NODE	2919:87	2919:87	9	)
LEAF_NODE	2919:88	2919:88	4	)
STATEMENTS	2919:90	2932:4	4	
LEAF_NODE	2919:90	2919:90	5	{
STATEMENTS	2921:8	2931:1	5	
EXPR_STATEMENT	2921:8	2921:28	6	img . row_offset = row ;
EXPR	2921:8	2921:8	7	img . row_offset = row
ASSIGN	2921:8	2921:25	8	img . row_offset = row
LVAL	2921:8	2921:8	9	img . row_offset
FIELD	2921:8	2921:12	10	img . row_offset
LEAF_NODE	2921:8	2921:8	11	img
LEAF_NODE	2921:11	2921:11	11	.
LEAF_NODE	2921:12	2921:12	11	row_offset
ASSIGN_OP	2921:23	2921:23	9	=
LEAF_NODE	2921:23	2921:23	10	=
RVAL	2921:25	2921:25	9	row
FIELD	2921:25	2921:25	10	row
LEAF_NODE	2921:25	2921:25	11	row
LEAF_NODE	2921:28	2921:28	7	;
EXPR_STATEMENT	2922:8	2922:26	6	img . col_offset = 0 ;
EXPR	2922:8	2922:8	7	img . col_offset = 0
ASSIGN	2922:8	2922:25	8	img . col_offset = 0
LVAL	2922:8	2922:8	9	img . col_offset
FIELD	2922:8	2922:12	10	img . col_offset
LEAF_NODE	2922:8	2922:8	11	img
LEAF_NODE	2922:11	2922:11	11	.
LEAF_NODE	2922:12	2922:12	11	col_offset
ASSIGN_OP	2922:23	2922:23	9	=
LEAF_NODE	2922:23	2922:23	10	=
RVAL	2922:25	2922:25	9	0
FIELD	2922:25	2922:25	10	0
LEAF_NODE	2922:25	2922:25	11	0
LEAF_NODE	2922:26	2922:26	7	;
SELECTION	2924:8	2925:12	6	
KEYWORD	2924:8	2924:8	7	if
LEAF_NODE	2924:8	2924:8	8	if
LEAF_NODE	2924:10	2924:10	7	(
CONDITION	2924:12	2924:12	7	row + rowsperstrip > img . height
EXPR	2924:12	2924:33	8	row + rowsperstrip > img . height
FIELD	2924:12	2924:12	9	row
LEAF_NODE	2924:12	2924:12	10	row
LEAF_NODE	2924:16	2924:16	9	+
FIELD	2924:18	2924:18	9	rowsperstrip
LEAF_NODE	2924:18	2924:18	10	rowsperstrip
REL_OPERATOR	2924:31	2924:31	9	>
LEAF_NODE	2924:31	2924:31	10	>
FIELD	2924:33	2924:37	9	img . height
LEAF_NODE	2924:33	2924:33	10	img
LEAF_NODE	2924:36	2924:36	10	.
LEAF_NODE	2924:37	2924:37	10	height
LEAF_NODE	2924:44	2924:44	7	)
STATEMENTS	2925:12	2925:12	7	
EXPR_STATEMENT	2925:12	2925:43	8	rows_to_read = img . height - row ;
EXPR	2925:12	2925:12	9	rows_to_read = img . height - row
ASSIGN	2925:12	2925:27	10	rows_to_read = img . height - row
LVAL	2925:12	2925:12	11	rows_to_read
FIELD	2925:12	2925:12	12	rows_to_read
LEAF_NODE	2925:12	2925:12	13	rows_to_read
ASSIGN_OP	2925:25	2925:25	11	=
LEAF_NODE	2925:25	2925:25	12	=
RVAL	2925:27	2925:40	11	img . height - row
FIELD	2925:27	2925:31	12	img . height
LEAF_NODE	2925:27	2925:27	13	img
LEAF_NODE	2925:30	2925:30	13	.
LEAF_NODE	2925:31	2925:31	13	height
LEAF_NODE	2925:38	2925:38	12	-
FIELD	2925:40	2925:40	12	row
LEAF_NODE	2925:40	2925:40	13	row
LEAF_NODE	2925:43	2925:43	9	;
SELECTION	2926:8	2927:12	6	
KEYWORD	2926:8	2926:8	7	else
LEAF_NODE	2926:8	2926:8	8	else
STATEMENTS	2927:12	2927:12	7	
EXPR_STATEMENT	2927:12	2927:39	8	rows_to_read = rowsperstrip ;
EXPR	2927:12	2927:12	9	rows_to_read = rowsperstrip
ASSIGN	2927:12	2927:27	10	rows_to_read = rowsperstrip
LVAL	2927:12	2927:12	11	rows_to_read
FIELD	2927:12	2927:12	12	rows_to_read
LEAF_NODE	2927:12	2927:12	13	rows_to_read
ASSIGN_OP	2927:25	2927:25	11	=
LEAF_NODE	2927:25	2927:25	12	=
RVAL	2927:27	2927:27	11	rowsperstrip
FIELD	2927:27	2927:27	12	rowsperstrip
LEAF_NODE	2927:27	2927:27	13	rowsperstrip
LEAF_NODE	2927:39	2927:39	9	;
EXPR_STATEMENT	2929:1	2929:62	6	ok = TIFFRGBAImageGet ( & img , raster , img . width , rows_to_read ) ;
EXPR	2929:1	2929:1	7	ok = TIFFRGBAImageGet ( & img , raster , img . width , rows_to_read )
ASSIGN	2929:1	2929:6	8	ok = TIFFRGBAImageGet ( & img , raster , img . width , rows_to_read )
LVAL	2929:1	2929:1	9	ok
FIELD	2929:1	2929:1	10	ok
LEAF_NODE	2929:1	2929:1	11	ok
ASSIGN_OP	2929:4	2929:4	9	=
LEAF_NODE	2929:4	2929:4	10	=
RVAL	2929:6	2929:6	9	TIFFRGBAImageGet ( & img , raster , img . width , rows_to_read )
FUNCTION_CALL	2929:6	2929:61	10	TIFFRGBAImageGet ( & img , raster , img . width , rows_to_read )
CALLEE	2929:6	2929:6	11	TIFFRGBAImageGet
LEAF_NODE	2929:6	2929:6	12	TIFFRGBAImageGet
LEAF_NODE	2929:22	2929:22	11	(
ARGUMENT	2929:23	2929:23	11	& img
UNARY_EXPR	2929:23	2929:24	12	& img
UNARY_OPERATOR	2929:23	2929:23	13	&
LEAF_NODE	2929:23	2929:23	14	&
FIELD	2929:24	2929:24	13	img
LEAF_NODE	2929:24	2929:24	14	img
LEAF_NODE	2929:27	2929:27	11	,
ARGUMENT	2929:29	2929:29	11	raster
FIELD	2929:29	2929:29	12	raster
LEAF_NODE	2929:29	2929:29	13	raster
LEAF_NODE	2929:35	2929:35	11	,
ARGUMENT	2929:37	2929:37	11	img . width
FIELD	2929:37	2929:41	12	img . width
LEAF_NODE	2929:37	2929:37	13	img
LEAF_NODE	2929:40	2929:40	13	.
LEAF_NODE	2929:41	2929:41	13	width
LEAF_NODE	2929:46	2929:46	11	,
ARGUMENT	2929:48	2929:48	11	rows_to_read
FIELD	2929:48	2929:48	12	rows_to_read
LEAF_NODE	2929:48	2929:48	13	rows_to_read
LEAF_NODE	2929:61	2929:61	11	)
LEAF_NODE	2929:62	2929:62	7	;
EXPR_STATEMENT	2931:1	2931:23	6	TIFFRGBAImageEnd ( & img ) ;
EXPR	2931:1	2931:1	7	TIFFRGBAImageEnd ( & img )
FUNCTION_CALL	2931:1	2931:22	8	TIFFRGBAImageEnd ( & img )
CALLEE	2931:1	2931:1	9	TIFFRGBAImageEnd
LEAF_NODE	2931:1	2931:1	10	TIFFRGBAImageEnd
LEAF_NODE	2931:17	2931:17	9	(
ARGUMENT	2931:18	2931:18	9	& img
UNARY_EXPR	2931:18	2931:19	10	& img
UNARY_OPERATOR	2931:18	2931:18	11	&
LEAF_NODE	2931:18	2931:18	12	&
FIELD	2931:19	2931:19	11	img
LEAF_NODE	2931:19	2931:19	12	img
LEAF_NODE	2931:22	2931:22	9	)
LEAF_NODE	2931:23	2931:23	7	;
LEAF_NODE	2932:4	2932:4	5	}
SELECTION	2932:6	2932:11	3	
KEYWORD	2932:6	2932:6	4	else
LEAF_NODE	2932:6	2932:6	5	else
STATEMENTS	2932:11	2935:4	4	
LEAF_NODE	2932:11	2932:11	5	{
STATEMENTS	2933:2	2934:2	5	
EXPR_STATEMENT	2933:2	2933:66	6	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , emsg ) ;
EXPR	2933:2	2933:2	7	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , emsg )
FUNCTION_CALL	2933:2	2933:65	8	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , emsg )
CALLEE	2933:2	2933:2	9	TIFFErrorExt
LEAF_NODE	2933:2	2933:2	10	TIFFErrorExt
LEAF_NODE	2933:14	2933:14	9	(
ARGUMENT	2933:15	2933:15	9	tif -> tif_clientdata
FIELD	2933:15	2933:20	10	tif -> tif_clientdata
LEAF_NODE	2933:15	2933:15	11	tif
LEAF_NODE	2933:18	2933:18	11	->
LEAF_NODE	2933:20	2933:20	11	tif_clientdata
LEAF_NODE	2933:34	2933:34	9	,
ARGUMENT	2933:36	2933:36	9	TIFFFileName ( tif )
FUNCTION_CALL	2933:36	2933:52	10	TIFFFileName ( tif )
CALLEE	2933:36	2933:36	11	TIFFFileName
LEAF_NODE	2933:36	2933:36	12	TIFFFileName
LEAF_NODE	2933:48	2933:48	11	(
ARGUMENT	2933:49	2933:49	11	tif
FIELD	2933:49	2933:49	12	tif
LEAF_NODE	2933:49	2933:49	13	tif
LEAF_NODE	2933:52	2933:52	11	)
LEAF_NODE	2933:53	2933:53	9	,
ARGUMENT	2933:55	2933:55	9	"%s"
FIELD	2933:55	2933:55	10	"%s"
LEAF_NODE	2933:55	2933:55	11	"%s"
LEAF_NODE	2933:59	2933:59	9	,
ARGUMENT	2933:61	2933:61	9	emsg
FIELD	2933:61	2933:61	10	emsg
LEAF_NODE	2933:61	2933:61	11	emsg
LEAF_NODE	2933:65	2933:65	9	)
LEAF_NODE	2933:66	2933:66	7	;
EXPR_STATEMENT	2934:2	2934:8	6	ok = 0 ;
EXPR	2934:2	2934:2	7	ok = 0
ASSIGN	2934:2	2934:7	8	ok = 0
LVAL	2934:2	2934:2	9	ok
FIELD	2934:2	2934:2	10	ok
LEAF_NODE	2934:2	2934:2	11	ok
ASSIGN_OP	2934:5	2934:5	9	=
LEAF_NODE	2934:5	2934:5	10	=
RVAL	2934:7	2934:7	9	0
FIELD	2934:7	2934:7	10	0
LEAF_NODE	2934:7	2934:7	11	0
LEAF_NODE	2934:8	2934:8	7	;
LEAF_NODE	2935:4	2935:4	5	}
LEAF_NODE	2937:4	2937:4	3	return
LEAF_NODE	2937:11	2937:11	3	(
LEAF_NODE	2937:12	2937:12	3	ok
LEAF_NODE	2937:14	2937:14	3	)
LEAF_NODE	2937:15	2937:15	3	;
LEAF_NODE	2938:0	2938:0	2	}
FUNCTION_DEF	2946:0	2951:0	1	
RETURN_TYPE	2946:0	2946:0	2	int
TYPE_NAME	2946:0	2946:0	3	int
LEAF_NODE	2946:0	2946:0	4	int
FUNCTION_NAME	2947:0	2947:0	2	TIFFReadRGBATile
LEAF_NODE	2947:0	2947:0	3	TIFFReadRGBATile
PARAMETER_LIST	2947:16	2947:67	2	( TIFF * tif , uint32 col , uint32 row , uint32 * raster )
LEAF_NODE	2947:16	2947:16	3	(
PARAMETER_DECL	2947:17	2947:23	3	TIFF * tif
TYPE	2947:17	2947:21	4	TIFF *
TYPE_NAME	2947:17	2947:17	5	TIFF
LEAF_NODE	2947:17	2947:17	6	TIFF
POINTER	2947:21	2947:21	5	*
LEAF_NODE	2947:21	2947:21	6	*
NAME	2947:23	2947:23	4	tif
LEAF_NODE	2947:23	2947:23	5	tif
LEAF_NODE	2947:26	2947:26	3	,
PARAMETER_DECL	2947:28	2947:35	3	uint32 col
TYPE	2947:28	2947:28	4	uint32
TYPE_NAME	2947:28	2947:28	5	uint32
LEAF_NODE	2947:28	2947:28	6	uint32
NAME	2947:35	2947:35	4	col
LEAF_NODE	2947:35	2947:35	5	col
LEAF_NODE	2947:38	2947:38	3	,
PARAMETER_DECL	2947:40	2947:47	3	uint32 row
TYPE	2947:40	2947:40	4	uint32
TYPE_NAME	2947:40	2947:40	5	uint32
LEAF_NODE	2947:40	2947:40	6	uint32
NAME	2947:47	2947:47	4	row
LEAF_NODE	2947:47	2947:47	5	row
LEAF_NODE	2947:50	2947:50	3	,
PARAMETER_DECL	2947:52	2947:61	3	uint32 * raster
TYPE	2947:52	2947:59	4	uint32 *
TYPE_NAME	2947:52	2947:52	5	uint32
LEAF_NODE	2947:52	2947:52	6	uint32
POINTER	2947:59	2947:59	5	*
LEAF_NODE	2947:59	2947:59	6	*
NAME	2947:61	2947:61	4	raster
LEAF_NODE	2947:61	2947:61	5	raster
LEAF_NODE	2947:67	2947:67	3	)
LEAF_NODE	2949:0	2949:0	2	{
STATEMENTS	2950:4	2950:4	2	
JUMP_STATEMENT	2950:4	2950:57	3	return TIFFReadRGBATileExt ( tif , col , row , raster , 0 ) ;
KEYWORD	2950:4	2950:4	4	return
LEAF_NODE	2950:4	2950:4	5	return
DESTINATION	2950:11	2950:11	4	TIFFReadRGBATileExt ( tif , col , row , raster , 0 )
EXPR	2950:11	2950:11	5	TIFFReadRGBATileExt ( tif , col , row , raster , 0 )
FUNCTION_CALL	2950:11	2950:56	6	TIFFReadRGBATileExt ( tif , col , row , raster , 0 )
CALLEE	2950:11	2950:11	7	TIFFReadRGBATileExt
LEAF_NODE	2950:11	2950:11	8	TIFFReadRGBATileExt
LEAF_NODE	2950:30	2950:30	7	(
ARGUMENT	2950:31	2950:31	7	tif
FIELD	2950:31	2950:31	8	tif
LEAF_NODE	2950:31	2950:31	9	tif
LEAF_NODE	2950:34	2950:34	7	,
ARGUMENT	2950:36	2950:36	7	col
FIELD	2950:36	2950:36	8	col
LEAF_NODE	2950:36	2950:36	9	col
LEAF_NODE	2950:39	2950:39	7	,
ARGUMENT	2950:41	2950:41	7	row
FIELD	2950:41	2950:41	8	row
LEAF_NODE	2950:41	2950:41	9	row
LEAF_NODE	2950:44	2950:44	7	,
ARGUMENT	2950:46	2950:46	7	raster
FIELD	2950:46	2950:46	8	raster
LEAF_NODE	2950:46	2950:46	9	raster
LEAF_NODE	2950:52	2950:52	7	,
ARGUMENT	2950:54	2950:54	7	0
FIELD	2950:54	2950:54	8	0
LEAF_NODE	2950:54	2950:54	9	0
LEAF_NODE	2950:56	2950:56	7	)
LEAF_NODE	2950:57	2950:57	4	;
LEAF_NODE	2951:0	2951:0	2	}
FUNCTION_DEF	2954:0	3049:0	1	
RETURN_TYPE	2954:0	2954:0	2	int
TYPE_NAME	2954:0	2954:0	3	int
LEAF_NODE	2954:0	2954:0	4	int
FUNCTION_NAME	2955:0	2955:0	2	TIFFReadRGBATileExt
LEAF_NODE	2955:0	2955:0	3	TIFFReadRGBATileExt
PARAMETER_LIST	2955:19	2955:90	2	( TIFF * tif , uint32 col , uint32 row , uint32 * raster , int stop_on_error )
LEAF_NODE	2955:19	2955:19	3	(
PARAMETER_DECL	2955:20	2955:26	3	TIFF * tif
TYPE	2955:20	2955:24	4	TIFF *
TYPE_NAME	2955:20	2955:20	5	TIFF
LEAF_NODE	2955:20	2955:20	6	TIFF
POINTER	2955:24	2955:24	5	*
LEAF_NODE	2955:24	2955:24	6	*
NAME	2955:26	2955:26	4	tif
LEAF_NODE	2955:26	2955:26	5	tif
LEAF_NODE	2955:29	2955:29	3	,
PARAMETER_DECL	2955:31	2955:38	3	uint32 col
TYPE	2955:31	2955:31	4	uint32
TYPE_NAME	2955:31	2955:31	5	uint32
LEAF_NODE	2955:31	2955:31	6	uint32
NAME	2955:38	2955:38	4	col
LEAF_NODE	2955:38	2955:38	5	col
LEAF_NODE	2955:41	2955:41	3	,
PARAMETER_DECL	2955:43	2955:50	3	uint32 row
TYPE	2955:43	2955:43	4	uint32
TYPE_NAME	2955:43	2955:43	5	uint32
LEAF_NODE	2955:43	2955:43	6	uint32
NAME	2955:50	2955:50	4	row
LEAF_NODE	2955:50	2955:50	5	row
LEAF_NODE	2955:53	2955:53	3	,
PARAMETER_DECL	2955:55	2955:64	3	uint32 * raster
TYPE	2955:55	2955:62	4	uint32 *
TYPE_NAME	2955:55	2955:55	5	uint32
LEAF_NODE	2955:55	2955:55	6	uint32
POINTER	2955:62	2955:62	5	*
LEAF_NODE	2955:62	2955:62	6	*
NAME	2955:64	2955:64	4	raster
LEAF_NODE	2955:64	2955:64	5	raster
LEAF_NODE	2955:70	2955:70	3	,
PARAMETER_DECL	2955:72	2955:76	3	int stop_on_error
TYPE	2955:72	2955:72	4	int
TYPE_NAME	2955:72	2955:72	5	int
LEAF_NODE	2955:72	2955:72	6	int
NAME	2955:76	2955:76	4	stop_on_error
LEAF_NODE	2955:76	2955:76	5	stop_on_error
LEAF_NODE	2955:90	2955:90	3	)
LEAF_NODE	2956:0	2956:0	2	{
STATEMENTS	2957:4	3048:15	2	
SIMPLE_DECL	2957:4	2957:25	3	char [ 1024 ] emsg ; emsg = "" ;
VAR_DECL	2957:4	2957:10	4	char [ 1024 ] emsg ; emsg = ""
TYPE	2957:4	2957:14	5	char [ 1024 ]
TYPE_NAME	2957:4	2957:4	6	char
LEAF_NODE	2957:4	2957:4	7	char
TYPE_SUFFIX	2957:14	2957:19	6	[ 1024 ]
LEAF_NODE	2957:14	2957:14	7	[
FIELD	2957:15	2957:15	7	1024
LEAF_NODE	2957:15	2957:15	8	1024
LEAF_NODE	2957:19	2957:19	7	]
NAME	2957:10	2957:10	5	emsg
LEAF_NODE	2957:10	2957:10	6	emsg
LEAF_NODE	0:0	0:0	5	;
INIT	2957:10	2957:10	5	emsg = ""
ASSIGN	2957:10	2957:23	6	emsg = ""
LVAL	2957:10	2957:10	7	emsg
NAME	2957:10	2957:10	8	emsg
LEAF_NODE	2957:10	2957:10	9	emsg
ASSIGN_OP	2957:21	2957:21	7	=
LEAF_NODE	2957:21	2957:21	8	=
RVAL	2957:23	2957:23	7	""
FIELD	2957:23	2957:23	8	""
LEAF_NODE	2957:23	2957:23	9	""
LEAF_NODE	2957:25	2957:25	4	;
SIMPLE_DECL	2958:4	2958:21	3	TIFFRGBAImage img ;
VAR_DECL	2958:4	2958:18	4	TIFFRGBAImage img
TYPE	2958:4	2958:4	5	TIFFRGBAImage
TYPE_NAME	2958:4	2958:4	6	TIFFRGBAImage
LEAF_NODE	2958:4	2958:4	7	TIFFRGBAImage
NAME	2958:18	2958:18	5	img
LEAF_NODE	2958:18	2958:18	6	img
LEAF_NODE	2958:21	2958:21	4	;
SIMPLE_DECL	2959:4	2959:11	3	int ok ;
VAR_DECL	2959:4	2959:9	4	int ok
TYPE	2959:4	2959:4	5	int
TYPE_NAME	2959:4	2959:4	6	int
LEAF_NODE	2959:4	2959:4	7	int
NAME	2959:9	2959:9	5	ok
LEAF_NODE	2959:9	2959:9	6	ok
LEAF_NODE	2959:11	2959:11	4	;
SIMPLE_DECL	2960:4	2960:33	3	uint32 tile_xsize , uint32 tile_ysize ;
INIT_DECL_LIST	2960:4	2960:4	4	uint32 tile_xsize , uint32 tile_ysize
VAR_DECL	2960:4	2960:11	5	uint32 tile_xsize
TYPE	2960:4	2960:4	6	uint32
TYPE_NAME	2960:4	2960:4	7	uint32
LEAF_NODE	2960:4	2960:4	8	uint32
NAME	2960:11	2960:11	6	tile_xsize
LEAF_NODE	2960:11	2960:11	7	tile_xsize
LEAF_NODE	2960:21	2960:21	5	,
VAR_DECL	2960:4	2960:23	5	uint32 tile_ysize
TYPE	2960:4	2960:4	6	uint32
TYPE_NAME	2960:4	2960:4	7	uint32
LEAF_NODE	2960:4	2960:4	8	uint32
NAME	2960:23	2960:23	6	tile_ysize
LEAF_NODE	2960:23	2960:23	7	tile_ysize
LEAF_NODE	2960:33	2960:33	4	;
SIMPLE_DECL	2961:4	2961:33	3	uint32 read_xsize , uint32 read_ysize ;
INIT_DECL_LIST	2961:4	2961:4	4	uint32 read_xsize , uint32 read_ysize
VAR_DECL	2961:4	2961:11	5	uint32 read_xsize
TYPE	2961:4	2961:4	6	uint32
TYPE_NAME	2961:4	2961:4	7	uint32
LEAF_NODE	2961:4	2961:4	8	uint32
NAME	2961:11	2961:11	6	read_xsize
LEAF_NODE	2961:11	2961:11	7	read_xsize
LEAF_NODE	2961:21	2961:21	5	,
VAR_DECL	2961:4	2961:23	5	uint32 read_ysize
TYPE	2961:4	2961:4	6	uint32
TYPE_NAME	2961:4	2961:4	7	uint32
LEAF_NODE	2961:4	2961:4	8	uint32
NAME	2961:23	2961:23	6	read_ysize
LEAF_NODE	2961:23	2961:23	7	read_ysize
LEAF_NODE	2961:33	2961:33	4	;
SIMPLE_DECL	2962:4	2962:16	3	uint32 i_row ;
VAR_DECL	2962:4	2962:11	4	uint32 i_row
TYPE	2962:4	2962:4	5	uint32
TYPE_NAME	2962:4	2962:4	6	uint32
LEAF_NODE	2962:4	2962:4	7	uint32
NAME	2962:11	2962:11	5	i_row
LEAF_NODE	2962:11	2962:11	6	i_row
LEAF_NODE	2962:16	2962:16	4	;
SELECTION	2969:4	2970:4	3	
KEYWORD	2969:4	2969:4	4	if
LEAF_NODE	2969:4	2969:4	5	if
LEAF_NODE	2969:6	2969:6	4	(
CONDITION	2969:8	2969:8	4	! TIFFIsTiled ( tif )
EXPR	2969:8	2969:8	5	! TIFFIsTiled ( tif )
UNARY_EXPR	2969:8	2969:9	6	! TIFFIsTiled ( tif )
UNARY_OPERATOR	2969:8	2969:8	7	!
LEAF_NODE	2969:8	2969:8	8	!
FUNCTION_CALL	2969:9	2969:26	7	TIFFIsTiled ( tif )
CALLEE	2969:9	2969:9	8	TIFFIsTiled
LEAF_NODE	2969:9	2969:9	9	TIFFIsTiled
LEAF_NODE	2969:20	2969:20	8	(
ARGUMENT	2969:22	2969:22	8	tif
FIELD	2969:22	2969:22	9	tif
LEAF_NODE	2969:22	2969:22	10	tif
LEAF_NODE	2969:26	2969:26	8	)
LEAF_NODE	2969:28	2969:28	4	)
STATEMENTS	2970:4	2974:4	4	
LEAF_NODE	2970:4	2970:4	5	{
STATEMENTS	2971:2	2973:2	5	
EXPR_STATEMENT	2971:2	2972:56	6	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Can't use TIFFReadRGBATile() with striped file." ) ;
EXPR	2971:2	2971:2	7	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Can't use TIFFReadRGBATile() with striped file." )
FUNCTION_CALL	2971:2	2972:55	8	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Can't use TIFFReadRGBATile() with striped file." )
CALLEE	2971:2	2971:2	9	TIFFErrorExt
LEAF_NODE	2971:2	2971:2	10	TIFFErrorExt
LEAF_NODE	2971:14	2971:14	9	(
ARGUMENT	2971:15	2971:15	9	tif -> tif_clientdata
FIELD	2971:15	2971:20	10	tif -> tif_clientdata
LEAF_NODE	2971:15	2971:15	11	tif
LEAF_NODE	2971:18	2971:18	11	->
LEAF_NODE	2971:20	2971:20	11	tif_clientdata
LEAF_NODE	2971:34	2971:34	9	,
ARGUMENT	2971:36	2971:36	9	TIFFFileName ( tif )
FUNCTION_CALL	2971:36	2971:52	10	TIFFFileName ( tif )
CALLEE	2971:36	2971:36	11	TIFFFileName
LEAF_NODE	2971:36	2971:36	12	TIFFFileName
LEAF_NODE	2971:48	2971:48	11	(
ARGUMENT	2971:49	2971:49	11	tif
FIELD	2971:49	2971:49	12	tif
LEAF_NODE	2971:49	2971:49	13	tif
LEAF_NODE	2971:52	2971:52	11	)
LEAF_NODE	2971:53	2971:53	9	,
ARGUMENT	2972:6	2972:6	9	"Can't use TIFFReadRGBATile() with striped file."
FIELD	2972:6	2972:6	10	"Can't use TIFFReadRGBATile() with striped file."
LEAF_NODE	2972:6	2972:6	11	"Can't use TIFFReadRGBATile() with striped file."
LEAF_NODE	2972:55	2972:55	9	)
LEAF_NODE	2972:56	2972:56	7	;
JUMP_STATEMENT	2973:2	2973:12	6	return ( 0 ) ;
KEYWORD	2973:2	2973:2	7	return
LEAF_NODE	2973:2	2973:2	8	return
DESTINATION	2973:9	2973:9	7	( 0 )
EXPR	2973:9	2973:11	8	( 0 )
LEAF_NODE	2973:9	2973:9	9	(
FIELD	2973:10	2973:10	9	0
LEAF_NODE	2973:10	2973:10	10	0
LEAF_NODE	2973:11	2973:11	9	)
LEAF_NODE	2973:12	2973:12	7	;
LEAF_NODE	2974:4	2974:4	5	}
EXPR_STATEMENT	2976:4	2976:62	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_TILEWIDTH , & tile_xsize ) ;
EXPR	2976:4	2976:4	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_TILEWIDTH , & tile_xsize )
FUNCTION_CALL	2976:4	2976:61	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_TILEWIDTH , & tile_xsize )
CALLEE	2976:4	2976:4	6	TIFFGetFieldDefaulted
LEAF_NODE	2976:4	2976:4	7	TIFFGetFieldDefaulted
LEAF_NODE	2976:25	2976:25	6	(
ARGUMENT	2976:26	2976:26	6	tif
FIELD	2976:26	2976:26	7	tif
LEAF_NODE	2976:26	2976:26	8	tif
LEAF_NODE	2976:29	2976:29	6	,
ARGUMENT	2976:31	2976:31	6	TIFFTAG_TILEWIDTH
FIELD	2976:31	2976:31	7	TIFFTAG_TILEWIDTH
LEAF_NODE	2976:31	2976:31	8	TIFFTAG_TILEWIDTH
LEAF_NODE	2976:48	2976:48	6	,
ARGUMENT	2976:50	2976:50	6	& tile_xsize
UNARY_EXPR	2976:50	2976:51	7	& tile_xsize
UNARY_OPERATOR	2976:50	2976:50	8	&
LEAF_NODE	2976:50	2976:50	9	&
FIELD	2976:51	2976:51	8	tile_xsize
LEAF_NODE	2976:51	2976:51	9	tile_xsize
LEAF_NODE	2976:61	2976:61	6	)
LEAF_NODE	2976:62	2976:62	4	;
EXPR_STATEMENT	2977:4	2977:63	3	TIFFGetFieldDefaulted ( tif , TIFFTAG_TILELENGTH , & tile_ysize ) ;
EXPR	2977:4	2977:4	4	TIFFGetFieldDefaulted ( tif , TIFFTAG_TILELENGTH , & tile_ysize )
FUNCTION_CALL	2977:4	2977:62	5	TIFFGetFieldDefaulted ( tif , TIFFTAG_TILELENGTH , & tile_ysize )
CALLEE	2977:4	2977:4	6	TIFFGetFieldDefaulted
LEAF_NODE	2977:4	2977:4	7	TIFFGetFieldDefaulted
LEAF_NODE	2977:25	2977:25	6	(
ARGUMENT	2977:26	2977:26	6	tif
FIELD	2977:26	2977:26	7	tif
LEAF_NODE	2977:26	2977:26	8	tif
LEAF_NODE	2977:29	2977:29	6	,
ARGUMENT	2977:31	2977:31	6	TIFFTAG_TILELENGTH
FIELD	2977:31	2977:31	7	TIFFTAG_TILELENGTH
LEAF_NODE	2977:31	2977:31	8	TIFFTAG_TILELENGTH
LEAF_NODE	2977:49	2977:49	6	,
ARGUMENT	2977:51	2977:51	6	& tile_ysize
UNARY_EXPR	2977:51	2977:52	7	& tile_ysize
UNARY_OPERATOR	2977:51	2977:51	8	&
LEAF_NODE	2977:51	2977:51	9	&
FIELD	2977:52	2977:52	8	tile_ysize
LEAF_NODE	2977:52	2977:52	9	tile_ysize
LEAF_NODE	2977:62	2977:62	6	)
LEAF_NODE	2977:63	2977:63	4	;
SELECTION	2978:4	2979:4	3	
KEYWORD	2978:4	2978:4	4	if
LEAF_NODE	2978:4	2978:4	5	if
LEAF_NODE	2978:6	2978:6	4	(
CONDITION	2978:8	2978:8	4	( col % tile_xsize ) != 0 || ( row % tile_ysize ) != 0
EXPR	2978:8	2978:8	5	( col % tile_xsize ) != 0 || ( row % tile_ysize ) != 0
OR	2978:8	2978:35	6	( col % tile_xsize ) != 0 || ( row % tile_ysize ) != 0
EXPR	2978:8	2978:30	7	( col % tile_xsize ) != 0
LEAF_NODE	2978:8	2978:8	8	(
FIELD	2978:9	2978:9	8	col
LEAF_NODE	2978:9	2978:9	9	col
LEAF_NODE	2978:13	2978:13	8	%
FIELD	2978:15	2978:15	8	tile_xsize
LEAF_NODE	2978:15	2978:15	9	tile_xsize
LEAF_NODE	2978:25	2978:25	8	)
EQ_OPERATOR	2978:27	2978:27	8	!=
LEAF_NODE	2978:27	2978:27	9	!=
FIELD	2978:30	2978:30	8	0
LEAF_NODE	2978:30	2978:30	9	0
LEAF_NODE	2978:32	2978:32	7	||
EXPR	2978:35	2978:57	7	( row % tile_ysize ) != 0
LEAF_NODE	2978:35	2978:35	8	(
FIELD	2978:36	2978:36	8	row
LEAF_NODE	2978:36	2978:36	9	row
LEAF_NODE	2978:40	2978:40	8	%
FIELD	2978:42	2978:42	8	tile_ysize
LEAF_NODE	2978:42	2978:42	9	tile_ysize
LEAF_NODE	2978:52	2978:52	8	)
EQ_OPERATOR	2978:54	2978:54	8	!=
LEAF_NODE	2978:54	2978:54	9	!=
FIELD	2978:57	2978:57	8	0
LEAF_NODE	2978:57	2978:57	9	0
LEAF_NODE	2978:59	2978:59	4	)
STATEMENTS	2979:4	2984:4	4	
LEAF_NODE	2979:4	2979:4	5	{
STATEMENTS	2980:2	2983:1	5	
LEAF_NODE	2980:2	2980:2	6	TIFFErrorExt
LEAF_NODE	2980:14	2980:14	6	(
LEAF_NODE	2980:15	2980:15	6	tif
LEAF_NODE	2980:18	2980:18	6	->
LEAF_NODE	2980:20	2980:20	6	tif_clientdata
LEAF_NODE	2980:34	2980:34	6	,
LEAF_NODE	2980:36	2980:36	6	TIFFFileName
LEAF_NODE	2980:48	2980:48	6	(
LEAF_NODE	2980:49	2980:49	6	tif
LEAF_NODE	2980:52	2980:52	6	)
LEAF_NODE	2980:53	2980:53	6	,
LEAF_NODE	2981:18	2981:18	6	"Row/col passed to TIFFReadRGBATile() must be top"
LEAF_NODE	2982:18	2982:18	6	"left corner of a tile."
LEAF_NODE	2982:42	2982:42	6	)
LEAF_NODE	2982:43	2982:43	6	;
JUMP_STATEMENT	2983:1	2983:11	6	return ( 0 ) ;
KEYWORD	2983:1	2983:1	7	return
LEAF_NODE	2983:1	2983:1	8	return
DESTINATION	2983:8	2983:8	7	( 0 )
EXPR	2983:8	2983:10	8	( 0 )
LEAF_NODE	2983:8	2983:8	9	(
FIELD	2983:9	2983:9	9	0
LEAF_NODE	2983:9	2983:9	10	0
LEAF_NODE	2983:10	2983:10	9	)
LEAF_NODE	2983:11	2983:11	7	;
LEAF_NODE	2984:4	2984:4	5	}
SELECTION	2990:4	2991:57	3	
KEYWORD	2990:4	2990:4	4	if
LEAF_NODE	2990:4	2990:4	5	if
LEAF_NODE	2990:7	2990:7	4	(
CONDITION	2990:8	2990:8	4	! TIFFRGBAImageOK ( tif , emsg ) || ! TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
EXPR	2990:8	2990:8	5	! TIFFRGBAImageOK ( tif , emsg ) || ! TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
OR	2990:8	2991:4	6	! TIFFRGBAImageOK ( tif , emsg ) || ! TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
EXPR	2990:8	2990:8	7	! TIFFRGBAImageOK ( tif , emsg )
UNARY_EXPR	2990:8	2990:9	8	! TIFFRGBAImageOK ( tif , emsg )
UNARY_OPERATOR	2990:8	2990:8	9	!
LEAF_NODE	2990:8	2990:8	10	!
FUNCTION_CALL	2990:9	2990:34	9	TIFFRGBAImageOK ( tif , emsg )
CALLEE	2990:9	2990:9	10	TIFFRGBAImageOK
LEAF_NODE	2990:9	2990:9	11	TIFFRGBAImageOK
LEAF_NODE	2990:24	2990:24	10	(
ARGUMENT	2990:25	2990:25	10	tif
FIELD	2990:25	2990:25	11	tif
LEAF_NODE	2990:25	2990:25	12	tif
LEAF_NODE	2990:28	2990:28	10	,
ARGUMENT	2990:30	2990:30	10	emsg
FIELD	2990:30	2990:30	11	emsg
LEAF_NODE	2990:30	2990:30	12	emsg
LEAF_NODE	2990:34	2990:34	10	)
LEAF_NODE	2991:1	2991:1	7	||
EXPR	2991:4	2991:4	7	! TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
UNARY_EXPR	2991:4	2991:5	8	! TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
UNARY_OPERATOR	2991:4	2991:4	9	!
LEAF_NODE	2991:4	2991:4	10	!
FUNCTION_CALL	2991:5	2991:54	9	TIFFRGBAImageBegin ( & img , tif , stop_on_error , emsg )
CALLEE	2991:5	2991:5	10	TIFFRGBAImageBegin
LEAF_NODE	2991:5	2991:5	11	TIFFRGBAImageBegin
LEAF_NODE	2991:23	2991:23	10	(
ARGUMENT	2991:24	2991:24	10	& img
UNARY_EXPR	2991:24	2991:25	11	& img
UNARY_OPERATOR	2991:24	2991:24	12	&
LEAF_NODE	2991:24	2991:24	13	&
FIELD	2991:25	2991:25	12	img
LEAF_NODE	2991:25	2991:25	13	img
LEAF_NODE	2991:28	2991:28	10	,
ARGUMENT	2991:30	2991:30	10	tif
FIELD	2991:30	2991:30	11	tif
LEAF_NODE	2991:30	2991:30	12	tif
LEAF_NODE	2991:33	2991:33	10	,
ARGUMENT	2991:35	2991:35	10	stop_on_error
FIELD	2991:35	2991:35	11	stop_on_error
LEAF_NODE	2991:35	2991:35	12	stop_on_error
LEAF_NODE	2991:48	2991:48	10	,
ARGUMENT	2991:50	2991:50	10	emsg
FIELD	2991:50	2991:50	11	emsg
LEAF_NODE	2991:50	2991:50	12	emsg
LEAF_NODE	2991:54	2991:54	10	)
LEAF_NODE	2991:55	2991:55	4	)
STATEMENTS	2991:57	2994:4	4	
LEAF_NODE	2991:57	2991:57	5	{
STATEMENTS	2992:5	2993:5	5	
EXPR_STATEMENT	2992:5	2992:69	6	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , emsg ) ;
EXPR	2992:5	2992:5	7	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , emsg )
FUNCTION_CALL	2992:5	2992:68	8	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "%s" , emsg )
CALLEE	2992:5	2992:5	9	TIFFErrorExt
LEAF_NODE	2992:5	2992:5	10	TIFFErrorExt
LEAF_NODE	2992:17	2992:17	9	(
ARGUMENT	2992:18	2992:18	9	tif -> tif_clientdata
FIELD	2992:18	2992:23	10	tif -> tif_clientdata
LEAF_NODE	2992:18	2992:18	11	tif
LEAF_NODE	2992:21	2992:21	11	->
LEAF_NODE	2992:23	2992:23	11	tif_clientdata
LEAF_NODE	2992:37	2992:37	9	,
ARGUMENT	2992:39	2992:39	9	TIFFFileName ( tif )
FUNCTION_CALL	2992:39	2992:55	10	TIFFFileName ( tif )
CALLEE	2992:39	2992:39	11	TIFFFileName
LEAF_NODE	2992:39	2992:39	12	TIFFFileName
LEAF_NODE	2992:51	2992:51	11	(
ARGUMENT	2992:52	2992:52	11	tif
FIELD	2992:52	2992:52	12	tif
LEAF_NODE	2992:52	2992:52	13	tif
LEAF_NODE	2992:55	2992:55	11	)
LEAF_NODE	2992:56	2992:56	9	,
ARGUMENT	2992:58	2992:58	9	"%s"
FIELD	2992:58	2992:58	10	"%s"
LEAF_NODE	2992:58	2992:58	11	"%s"
LEAF_NODE	2992:62	2992:62	9	,
ARGUMENT	2992:64	2992:64	9	emsg
FIELD	2992:64	2992:64	10	emsg
LEAF_NODE	2992:64	2992:64	11	emsg
LEAF_NODE	2992:68	2992:68	9	)
LEAF_NODE	2992:69	2992:69	7	;
JUMP_STATEMENT	2993:5	2993:16	6	return ( 0 ) ;
KEYWORD	2993:5	2993:5	7	return
LEAF_NODE	2993:5	2993:5	8	return
DESTINATION	2993:11	2993:11	7	( 0 )
EXPR	2993:11	2993:15	8	( 0 )
LEAF_NODE	2993:11	2993:11	9	(
FIELD	2993:13	2993:13	9	0
LEAF_NODE	2993:13	2993:13	10	0
LEAF_NODE	2993:15	2993:15	9	)
LEAF_NODE	2993:16	2993:16	7	;
LEAF_NODE	2994:4	2994:4	5	}
SELECTION	3003:4	3004:8	3	
KEYWORD	3003:4	3003:4	4	if
LEAF_NODE	3003:4	3003:4	5	if
LEAF_NODE	3003:6	3003:6	4	(
CONDITION	3003:8	3003:8	4	row + tile_ysize > img . height
EXPR	3003:8	3003:27	5	row + tile_ysize > img . height
FIELD	3003:8	3003:8	6	row
LEAF_NODE	3003:8	3003:8	7	row
LEAF_NODE	3003:12	3003:12	6	+
FIELD	3003:14	3003:14	6	tile_ysize
LEAF_NODE	3003:14	3003:14	7	tile_ysize
REL_OPERATOR	3003:25	3003:25	6	>
LEAF_NODE	3003:25	3003:25	7	>
FIELD	3003:27	3003:31	6	img . height
LEAF_NODE	3003:27	3003:27	7	img
LEAF_NODE	3003:30	3003:30	7	.
LEAF_NODE	3003:31	3003:31	7	height
LEAF_NODE	3003:38	3003:38	4	)
STATEMENTS	3004:8	3004:8	4	
EXPR_STATEMENT	3004:8	3004:37	5	read_ysize = img . height - row ;
EXPR	3004:8	3004:8	6	read_ysize = img . height - row
ASSIGN	3004:8	3004:21	7	read_ysize = img . height - row
LVAL	3004:8	3004:8	8	read_ysize
FIELD	3004:8	3004:8	9	read_ysize
LEAF_NODE	3004:8	3004:8	10	read_ysize
ASSIGN_OP	3004:19	3004:19	8	=
LEAF_NODE	3004:19	3004:19	9	=
RVAL	3004:21	3004:34	8	img . height - row
FIELD	3004:21	3004:25	9	img . height
LEAF_NODE	3004:21	3004:21	10	img
LEAF_NODE	3004:24	3004:24	10	.
LEAF_NODE	3004:25	3004:25	10	height
LEAF_NODE	3004:32	3004:32	9	-
FIELD	3004:34	3004:34	9	row
LEAF_NODE	3004:34	3004:34	10	row
LEAF_NODE	3004:37	3004:37	6	;
SELECTION	3005:4	3006:8	3	
KEYWORD	3005:4	3005:4	4	else
LEAF_NODE	3005:4	3005:4	5	else
STATEMENTS	3006:8	3006:8	4	
EXPR_STATEMENT	3006:8	3006:31	5	read_ysize = tile_ysize ;
EXPR	3006:8	3006:8	6	read_ysize = tile_ysize
ASSIGN	3006:8	3006:21	7	read_ysize = tile_ysize
LVAL	3006:8	3006:8	8	read_ysize
FIELD	3006:8	3006:8	9	read_ysize
LEAF_NODE	3006:8	3006:8	10	read_ysize
ASSIGN_OP	3006:19	3006:19	8	=
LEAF_NODE	3006:19	3006:19	9	=
RVAL	3006:21	3006:21	8	tile_ysize
FIELD	3006:21	3006:21	9	tile_ysize
LEAF_NODE	3006:21	3006:21	10	tile_ysize
LEAF_NODE	3006:31	3006:31	6	;
SELECTION	3008:4	3009:8	3	
KEYWORD	3008:4	3008:4	4	if
LEAF_NODE	3008:4	3008:4	5	if
LEAF_NODE	3008:6	3008:6	4	(
CONDITION	3008:8	3008:8	4	col + tile_xsize > img . width
EXPR	3008:8	3008:27	5	col + tile_xsize > img . width
FIELD	3008:8	3008:8	6	col
LEAF_NODE	3008:8	3008:8	7	col
LEAF_NODE	3008:12	3008:12	6	+
FIELD	3008:14	3008:14	6	tile_xsize
LEAF_NODE	3008:14	3008:14	7	tile_xsize
REL_OPERATOR	3008:25	3008:25	6	>
LEAF_NODE	3008:25	3008:25	7	>
FIELD	3008:27	3008:31	6	img . width
LEAF_NODE	3008:27	3008:27	7	img
LEAF_NODE	3008:30	3008:30	7	.
LEAF_NODE	3008:31	3008:31	7	width
LEAF_NODE	3008:37	3008:37	4	)
STATEMENTS	3009:8	3009:8	4	
EXPR_STATEMENT	3009:8	3009:36	5	read_xsize = img . width - col ;
EXPR	3009:8	3009:8	6	read_xsize = img . width - col
ASSIGN	3009:8	3009:21	7	read_xsize = img . width - col
LVAL	3009:8	3009:8	8	read_xsize
FIELD	3009:8	3009:8	9	read_xsize
LEAF_NODE	3009:8	3009:8	10	read_xsize
ASSIGN_OP	3009:19	3009:19	8	=
LEAF_NODE	3009:19	3009:19	9	=
RVAL	3009:21	3009:33	8	img . width - col
FIELD	3009:21	3009:25	9	img . width
LEAF_NODE	3009:21	3009:21	10	img
LEAF_NODE	3009:24	3009:24	10	.
LEAF_NODE	3009:25	3009:25	10	width
LEAF_NODE	3009:31	3009:31	9	-
FIELD	3009:33	3009:33	9	col
LEAF_NODE	3009:33	3009:33	10	col
LEAF_NODE	3009:36	3009:36	6	;
SELECTION	3010:4	3011:8	3	
KEYWORD	3010:4	3010:4	4	else
LEAF_NODE	3010:4	3010:4	5	else
STATEMENTS	3011:8	3011:8	4	
EXPR_STATEMENT	3011:8	3011:31	5	read_xsize = tile_xsize ;
EXPR	3011:8	3011:8	6	read_xsize = tile_xsize
ASSIGN	3011:8	3011:21	7	read_xsize = tile_xsize
LVAL	3011:8	3011:8	8	read_xsize
FIELD	3011:8	3011:8	9	read_xsize
LEAF_NODE	3011:8	3011:8	10	read_xsize
ASSIGN_OP	3011:19	3011:19	8	=
LEAF_NODE	3011:19	3011:19	9	=
RVAL	3011:21	3011:21	8	tile_xsize
FIELD	3011:21	3011:21	9	tile_xsize
LEAF_NODE	3011:21	3011:21	10	tile_xsize
LEAF_NODE	3011:31	3011:31	6	;
EXPR_STATEMENT	3017:4	3017:24	3	img . row_offset = row ;
EXPR	3017:4	3017:4	4	img . row_offset = row
ASSIGN	3017:4	3017:21	5	img . row_offset = row
LVAL	3017:4	3017:4	6	img . row_offset
FIELD	3017:4	3017:8	7	img . row_offset
LEAF_NODE	3017:4	3017:4	8	img
LEAF_NODE	3017:7	3017:7	8	.
LEAF_NODE	3017:8	3017:8	8	row_offset
ASSIGN_OP	3017:19	3017:19	6	=
LEAF_NODE	3017:19	3017:19	7	=
RVAL	3017:21	3017:21	6	row
FIELD	3017:21	3017:21	7	row
LEAF_NODE	3017:21	3017:21	8	row
LEAF_NODE	3017:24	3017:24	4	;
EXPR_STATEMENT	3018:4	3018:24	3	img . col_offset = col ;
EXPR	3018:4	3018:4	4	img . col_offset = col
ASSIGN	3018:4	3018:21	5	img . col_offset = col
LVAL	3018:4	3018:4	6	img . col_offset
FIELD	3018:4	3018:8	7	img . col_offset
LEAF_NODE	3018:4	3018:4	8	img
LEAF_NODE	3018:7	3018:7	8	.
LEAF_NODE	3018:8	3018:8	8	col_offset
ASSIGN_OP	3018:19	3018:19	6	=
LEAF_NODE	3018:19	3018:19	7	=
RVAL	3018:21	3018:21	6	col
FIELD	3018:21	3018:21	7	col
LEAF_NODE	3018:21	3018:21	8	col
LEAF_NODE	3018:24	3018:24	4	;
EXPR_STATEMENT	3020:4	3020:64	3	ok = TIFFRGBAImageGet ( & img , raster , read_xsize , read_ysize ) ;
EXPR	3020:4	3020:4	4	ok = TIFFRGBAImageGet ( & img , raster , read_xsize , read_ysize )
ASSIGN	3020:4	3020:9	5	ok = TIFFRGBAImageGet ( & img , raster , read_xsize , read_ysize )
LVAL	3020:4	3020:4	6	ok
FIELD	3020:4	3020:4	7	ok
LEAF_NODE	3020:4	3020:4	8	ok
ASSIGN_OP	3020:7	3020:7	6	=
LEAF_NODE	3020:7	3020:7	7	=
RVAL	3020:9	3020:9	6	TIFFRGBAImageGet ( & img , raster , read_xsize , read_ysize )
FUNCTION_CALL	3020:9	3020:63	7	TIFFRGBAImageGet ( & img , raster , read_xsize , read_ysize )
CALLEE	3020:9	3020:9	8	TIFFRGBAImageGet
LEAF_NODE	3020:9	3020:9	9	TIFFRGBAImageGet
LEAF_NODE	3020:25	3020:25	8	(
ARGUMENT	3020:26	3020:26	8	& img
UNARY_EXPR	3020:26	3020:27	9	& img
UNARY_OPERATOR	3020:26	3020:26	10	&
LEAF_NODE	3020:26	3020:26	11	&
FIELD	3020:27	3020:27	10	img
LEAF_NODE	3020:27	3020:27	11	img
LEAF_NODE	3020:30	3020:30	8	,
ARGUMENT	3020:32	3020:32	8	raster
FIELD	3020:32	3020:32	9	raster
LEAF_NODE	3020:32	3020:32	10	raster
LEAF_NODE	3020:38	3020:38	8	,
ARGUMENT	3020:40	3020:40	8	read_xsize
FIELD	3020:40	3020:40	9	read_xsize
LEAF_NODE	3020:40	3020:40	10	read_xsize
LEAF_NODE	3020:50	3020:50	8	,
ARGUMENT	3020:52	3020:52	8	read_ysize
FIELD	3020:52	3020:52	9	read_ysize
LEAF_NODE	3020:52	3020:52	10	read_ysize
LEAF_NODE	3020:63	3020:63	8	)
LEAF_NODE	3020:64	3020:64	4	;
EXPR_STATEMENT	3022:4	3022:26	3	TIFFRGBAImageEnd ( & img ) ;
EXPR	3022:4	3022:4	4	TIFFRGBAImageEnd ( & img )
FUNCTION_CALL	3022:4	3022:25	5	TIFFRGBAImageEnd ( & img )
CALLEE	3022:4	3022:4	6	TIFFRGBAImageEnd
LEAF_NODE	3022:4	3022:4	7	TIFFRGBAImageEnd
LEAF_NODE	3022:20	3022:20	6	(
ARGUMENT	3022:21	3022:21	6	& img
UNARY_EXPR	3022:21	3022:22	7	& img
UNARY_OPERATOR	3022:21	3022:21	8	&
LEAF_NODE	3022:21	3022:21	9	&
FIELD	3022:22	3022:22	8	img
LEAF_NODE	3022:22	3022:22	9	img
LEAF_NODE	3022:25	3022:25	6	)
LEAF_NODE	3022:26	3022:26	4	;
SELECTION	3032:4	3033:8	3	
KEYWORD	3032:4	3032:4	4	if
LEAF_NODE	3032:4	3032:4	5	if
LEAF_NODE	3032:6	3032:6	4	(
CONDITION	3032:8	3032:8	4	read_xsize == tile_xsize && read_ysize == tile_ysize
EXPR	3032:8	3032:8	5	read_xsize == tile_xsize && read_ysize == tile_ysize
AND	3032:8	3032:36	6	read_xsize == tile_xsize && read_ysize == tile_ysize
EXPR	3032:8	3032:22	7	read_xsize == tile_xsize
FIELD	3032:8	3032:8	8	read_xsize
LEAF_NODE	3032:8	3032:8	9	read_xsize
EQ_OPERATOR	3032:19	3032:19	8	==
LEAF_NODE	3032:19	3032:19	9	==
FIELD	3032:22	3032:22	8	tile_xsize
LEAF_NODE	3032:22	3032:22	9	tile_xsize
LEAF_NODE	3032:33	3032:33	7	&&
EXPR	3032:36	3032:50	7	read_ysize == tile_ysize
FIELD	3032:36	3032:36	8	read_ysize
LEAF_NODE	3032:36	3032:36	9	read_ysize
EQ_OPERATOR	3032:47	3032:47	8	==
LEAF_NODE	3032:47	3032:47	9	==
FIELD	3032:50	3032:50	8	tile_ysize
LEAF_NODE	3032:50	3032:50	9	tile_ysize
LEAF_NODE	3032:61	3032:61	4	)
STATEMENTS	3033:8	3033:8	4	
LEAF_NODE	3033:8	3033:8	5	return
LEAF_NODE	3033:14	3033:14	3	(
LEAF_NODE	3033:16	3033:16	3	ok
LEAF_NODE	3033:19	3033:19	3	)
LEAF_NODE	3033:20	3033:20	3	;
ITERATION	3035:4	3035:50	3	
KEYWORD	3035:4	3035:4	4	for
LEAF_NODE	3035:4	3035:4	5	for
LEAF_NODE	3035:7	3035:7	4	(
FOR_INIT	3035:9	3035:18	4	i_row = 0 ;
EXPR	3035:9	3035:9	5	i_row = 0
ASSIGN	3035:9	3035:17	6	i_row = 0
LVAL	3035:9	3035:9	7	i_row
FIELD	3035:9	3035:9	8	i_row
LEAF_NODE	3035:9	3035:9	9	i_row
ASSIGN_OP	3035:15	3035:15	7	=
LEAF_NODE	3035:15	3035:15	8	=
RVAL	3035:17	3035:17	7	0
FIELD	3035:17	3035:17	8	0
LEAF_NODE	3035:17	3035:17	9	0
LEAF_NODE	3035:18	3035:18	5	;
CONDITION	3035:20	3035:20	4	i_row < read_ysize
EXPR	3035:20	3035:28	5	i_row < read_ysize
FIELD	3035:20	3035:20	6	i_row
LEAF_NODE	3035:20	3035:20	7	i_row
REL_OPERATOR	3035:26	3035:26	6	<
LEAF_NODE	3035:26	3035:26	7	<
FIELD	3035:28	3035:28	6	read_ysize
LEAF_NODE	3035:28	3035:28	7	read_ysize
LEAF_NODE	3035:38	3035:38	4	;
FOR_EXPR	3035:40	3035:40	4	i_row ++
EXPR	3035:40	3035:40	5	i_row ++
FIELD	3035:40	3035:45	6	i_row ++
LEAF_NODE	3035:40	3035:40	7	i_row
LEAF_NODE	3035:45	3035:45	7	++
LEAF_NODE	3035:48	3035:48	4	)
STATEMENTS	3035:50	3041:4	4	
LEAF_NODE	3035:50	3035:50	5	{
STATEMENTS	3036:8	3039:8	5	
EXPR_STATEMENT	3036:8	3038:46	6	memmove ( raster + ( tile_ysize - i_row - 1 ) * tile_xsize , raster + ( read_ysize - i_row - 1 ) * read_xsize , read_xsize * sizeof ( uint32 ) ) ;
EXPR	3036:8	3036:8	7	memmove ( raster + ( tile_ysize - i_row - 1 ) * tile_xsize , raster + ( read_ysize - i_row - 1 ) * read_xsize , read_xsize * sizeof ( uint32 ) )
FUNCTION_CALL	3036:8	3038:45	8	memmove ( raster + ( tile_ysize - i_row - 1 ) * tile_xsize , raster + ( read_ysize - i_row - 1 ) * read_xsize , read_xsize * sizeof ( uint32 ) )
CALLEE	3036:8	3036:8	9	memmove
LEAF_NODE	3036:8	3036:8	10	memmove
LEAF_NODE	3036:15	3036:15	9	(
ARGUMENT	3036:17	3036:53	9	raster + ( tile_ysize - i_row - 1 ) * tile_xsize
FIELD	3036:17	3036:17	10	raster
LEAF_NODE	3036:17	3036:17	11	raster
LEAF_NODE	3036:24	3036:24	10	+
LEAF_NODE	3036:26	3036:26	10	(
FIELD	3036:27	3036:27	10	tile_ysize
LEAF_NODE	3036:27	3036:27	11	tile_ysize
LEAF_NODE	3036:38	3036:38	10	-
FIELD	3036:40	3036:40	10	i_row
LEAF_NODE	3036:40	3036:40	11	i_row
LEAF_NODE	3036:46	3036:46	10	-
FIELD	3036:48	3036:48	10	1
LEAF_NODE	3036:48	3036:48	11	1
LEAF_NODE	3036:49	3036:49	10	)
LEAF_NODE	3036:51	3036:51	10	*
FIELD	3036:53	3036:53	10	tile_xsize
LEAF_NODE	3036:53	3036:53	11	tile_xsize
LEAF_NODE	3036:63	3036:63	9	,
ARGUMENT	3037:17	3037:53	9	raster + ( read_ysize - i_row - 1 ) * read_xsize
FIELD	3037:17	3037:17	10	raster
LEAF_NODE	3037:17	3037:17	11	raster
LEAF_NODE	3037:24	3037:24	10	+
LEAF_NODE	3037:26	3037:26	10	(
FIELD	3037:27	3037:27	10	read_ysize
LEAF_NODE	3037:27	3037:27	11	read_ysize
LEAF_NODE	3037:38	3037:38	10	-
FIELD	3037:40	3037:40	10	i_row
LEAF_NODE	3037:40	3037:40	11	i_row
LEAF_NODE	3037:46	3037:46	10	-
FIELD	3037:48	3037:48	10	1
LEAF_NODE	3037:48	3037:48	11	1
LEAF_NODE	3037:49	3037:49	10	)
LEAF_NODE	3037:51	3037:51	10	*
FIELD	3037:53	3037:53	10	read_xsize
LEAF_NODE	3037:53	3037:53	11	read_xsize
LEAF_NODE	3037:63	3037:63	9	,
ARGUMENT	3038:17	3038:30	9	read_xsize * sizeof ( uint32 )
FIELD	3038:17	3038:17	10	read_xsize
LEAF_NODE	3038:17	3038:17	11	read_xsize
LEAF_NODE	3038:28	3038:28	10	*
FUNCTION_CALL	3038:30	3038:43	10	sizeof ( uint32 )
CALLEE	3038:30	3038:30	11	sizeof
LEAF_NODE	3038:30	3038:30	12	sizeof
LEAF_NODE	3038:36	3038:36	11	(
ARGUMENT	3038:37	3038:37	11	uint32
FIELD	3038:37	3038:37	12	uint32
LEAF_NODE	3038:37	3038:37	13	uint32
LEAF_NODE	3038:43	3038:43	11	)
LEAF_NODE	3038:45	3038:45	9	)
LEAF_NODE	3038:46	3038:46	7	;
EXPR_STATEMENT	3039:8	3040:68	6	_TIFFmemset ( raster + ( tile_ysize - i_row - 1 ) * tile_xsize + read_xsize , 0 , sizeof ( uint32 ) * ( tile_xsize - read_xsize ) ) ;
EXPR	3039:8	3039:8	7	_TIFFmemset ( raster + ( tile_ysize - i_row - 1 ) * tile_xsize + read_xsize , 0 , sizeof ( uint32 ) * ( tile_xsize - read_xsize ) )
FUNCTION_CALL	3039:8	3040:67	8	_TIFFmemset ( raster + ( tile_ysize - i_row - 1 ) * tile_xsize + read_xsize , 0 , sizeof ( uint32 ) * ( tile_xsize - read_xsize ) )
CALLEE	3039:8	3039:8	9	_TIFFmemset
LEAF_NODE	3039:8	3039:8	10	_TIFFmemset
LEAF_NODE	3039:19	3039:19	9	(
ARGUMENT	3039:21	3039:68	9	raster + ( tile_ysize - i_row - 1 ) * tile_xsize + read_xsize
FIELD	3039:21	3039:21	10	raster
LEAF_NODE	3039:21	3039:21	11	raster
LEAF_NODE	3039:28	3039:28	10	+
LEAF_NODE	3039:30	3039:30	10	(
FIELD	3039:31	3039:31	10	tile_ysize
LEAF_NODE	3039:31	3039:31	11	tile_ysize
LEAF_NODE	3039:42	3039:42	10	-
FIELD	3039:44	3039:44	10	i_row
LEAF_NODE	3039:44	3039:44	11	i_row
LEAF_NODE	3039:50	3039:50	10	-
FIELD	3039:52	3039:52	10	1
LEAF_NODE	3039:52	3039:52	11	1
LEAF_NODE	3039:53	3039:53	10	)
LEAF_NODE	3039:55	3039:55	10	*
FIELD	3039:57	3039:57	10	tile_xsize
LEAF_NODE	3039:57	3039:57	11	tile_xsize
LEAF_NODE	3039:67	3039:67	10	+
FIELD	3039:68	3039:68	10	read_xsize
LEAF_NODE	3039:68	3039:68	11	read_xsize
LEAF_NODE	3039:78	3039:78	9	,
ARGUMENT	3040:21	3040:21	9	0
FIELD	3040:21	3040:21	10	0
LEAF_NODE	3040:21	3040:21	11	0
LEAF_NODE	3040:22	3040:22	9	,
ARGUMENT	3040:24	3040:65	9	sizeof ( uint32 ) * ( tile_xsize - read_xsize )
FUNCTION_CALL	3040:24	3040:37	10	sizeof ( uint32 )
CALLEE	3040:24	3040:24	11	sizeof
LEAF_NODE	3040:24	3040:24	12	sizeof
LEAF_NODE	3040:30	3040:30	11	(
ARGUMENT	3040:31	3040:31	11	uint32
FIELD	3040:31	3040:31	12	uint32
LEAF_NODE	3040:31	3040:31	13	uint32
LEAF_NODE	3040:37	3040:37	11	)
LEAF_NODE	3040:39	3040:39	10	*
LEAF_NODE	3040:41	3040:41	10	(
FIELD	3040:42	3040:42	10	tile_xsize
LEAF_NODE	3040:42	3040:42	11	tile_xsize
LEAF_NODE	3040:53	3040:53	10	-
FIELD	3040:55	3040:55	10	read_xsize
LEAF_NODE	3040:55	3040:55	11	read_xsize
LEAF_NODE	3040:65	3040:65	10	)
LEAF_NODE	3040:67	3040:67	9	)
LEAF_NODE	3040:68	3040:68	7	;
LEAF_NODE	3041:4	3041:4	5	}
ITERATION	3043:4	3043:59	3	
KEYWORD	3043:4	3043:4	4	for
LEAF_NODE	3043:4	3043:4	5	for
LEAF_NODE	3043:7	3043:7	4	(
FOR_INIT	3043:9	3043:27	4	i_row = read_ysize ;
EXPR	3043:9	3043:9	5	i_row = read_ysize
ASSIGN	3043:9	3043:17	6	i_row = read_ysize
LVAL	3043:9	3043:9	7	i_row
FIELD	3043:9	3043:9	8	i_row
LEAF_NODE	3043:9	3043:9	9	i_row
ASSIGN_OP	3043:15	3043:15	7	=
LEAF_NODE	3043:15	3043:15	8	=
RVAL	3043:17	3043:17	7	read_ysize
FIELD	3043:17	3043:17	8	read_ysize
LEAF_NODE	3043:17	3043:17	9	read_ysize
LEAF_NODE	3043:27	3043:27	5	;
CONDITION	3043:29	3043:29	4	i_row < tile_ysize
EXPR	3043:29	3043:37	5	i_row < tile_ysize
FIELD	3043:29	3043:29	6	i_row
LEAF_NODE	3043:29	3043:29	7	i_row
REL_OPERATOR	3043:35	3043:35	6	<
LEAF_NODE	3043:35	3043:35	7	<
FIELD	3043:37	3043:37	6	tile_ysize
LEAF_NODE	3043:37	3043:37	7	tile_ysize
LEAF_NODE	3043:47	3043:47	4	;
FOR_EXPR	3043:49	3043:49	4	i_row ++
EXPR	3043:49	3043:49	5	i_row ++
FIELD	3043:49	3043:54	6	i_row ++
LEAF_NODE	3043:49	3043:49	7	i_row
LEAF_NODE	3043:54	3043:54	7	++
LEAF_NODE	3043:57	3043:57	4	)
STATEMENTS	3043:59	3046:4	4	
LEAF_NODE	3043:59	3043:59	5	{
STATEMENTS	3044:8	3044:8	5	
EXPR_STATEMENT	3044:8	3045:53	6	_TIFFmemset ( raster + ( tile_ysize - i_row - 1 ) * tile_xsize , 0 , sizeof ( uint32 ) * tile_xsize ) ;
EXPR	3044:8	3044:8	7	_TIFFmemset ( raster + ( tile_ysize - i_row - 1 ) * tile_xsize , 0 , sizeof ( uint32 ) * tile_xsize )
FUNCTION_CALL	3044:8	3045:52	8	_TIFFmemset ( raster + ( tile_ysize - i_row - 1 ) * tile_xsize , 0 , sizeof ( uint32 ) * tile_xsize )
CALLEE	3044:8	3044:8	9	_TIFFmemset
LEAF_NODE	3044:8	3044:8	10	_TIFFmemset
LEAF_NODE	3044:19	3044:19	9	(
ARGUMENT	3044:21	3044:57	9	raster + ( tile_ysize - i_row - 1 ) * tile_xsize
FIELD	3044:21	3044:21	10	raster
LEAF_NODE	3044:21	3044:21	11	raster
LEAF_NODE	3044:28	3044:28	10	+
LEAF_NODE	3044:30	3044:30	10	(
FIELD	3044:31	3044:31	10	tile_ysize
LEAF_NODE	3044:31	3044:31	11	tile_ysize
LEAF_NODE	3044:42	3044:42	10	-
FIELD	3044:44	3044:44	10	i_row
LEAF_NODE	3044:44	3044:44	11	i_row
LEAF_NODE	3044:50	3044:50	10	-
FIELD	3044:52	3044:52	10	1
LEAF_NODE	3044:52	3044:52	11	1
LEAF_NODE	3044:53	3044:53	10	)
LEAF_NODE	3044:55	3044:55	10	*
FIELD	3044:57	3044:57	10	tile_xsize
LEAF_NODE	3044:57	3044:57	11	tile_xsize
LEAF_NODE	3044:67	3044:67	9	,
ARGUMENT	3045:21	3045:21	9	0
FIELD	3045:21	3045:21	10	0
LEAF_NODE	3045:21	3045:21	11	0
LEAF_NODE	3045:22	3045:22	9	,
ARGUMENT	3045:24	3045:41	9	sizeof ( uint32 ) * tile_xsize
FUNCTION_CALL	3045:24	3045:37	10	sizeof ( uint32 )
CALLEE	3045:24	3045:24	11	sizeof
LEAF_NODE	3045:24	3045:24	12	sizeof
LEAF_NODE	3045:30	3045:30	11	(
ARGUMENT	3045:31	3045:31	11	uint32
FIELD	3045:31	3045:31	12	uint32
LEAF_NODE	3045:31	3045:31	13	uint32
LEAF_NODE	3045:37	3045:37	11	)
LEAF_NODE	3045:39	3045:39	10	*
FIELD	3045:41	3045:41	10	tile_xsize
LEAF_NODE	3045:41	3045:41	11	tile_xsize
LEAF_NODE	3045:52	3045:52	9	)
LEAF_NODE	3045:53	3045:53	7	;
LEAF_NODE	3046:4	3046:4	5	}
LEAF_NODE	3048:4	3048:4	3	return
LEAF_NODE	3048:11	3048:11	3	(
LEAF_NODE	3048:12	3048:12	3	ok
LEAF_NODE	3048:14	3048:14	3	)
LEAF_NODE	3048:15	3048:15	3	;
LEAF_NODE	3049:0	3049:0	2	}
