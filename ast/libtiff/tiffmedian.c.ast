SOURCE_FILE	73:8	811:0	0	
SIMPLE_DECL	73:8	79:10	1	struct colorbox BASE_CLASSES { struct colorbox * next , struct colorbox * prev ; int rmin , int rmax ; int gmin , int gmax ; int bmin , int bmax ; uint32 total ; } Colorbox ;
VAR_DECL	73:8	79:2	2	struct colorbox BASE_CLASSES { struct colorbox * next , struct colorbox * prev ; int rmin , int rmax ; int gmin , int gmax ; int bmin , int bmax ; uint32 total ; } Colorbox
TYPE	73:8	73:8	3	struct colorbox BASE_CLASSES { struct colorbox * next , struct colorbox * prev ; int rmin , int rmax ; int gmin , int gmax ; int bmin , int bmax ; uint32 total ; }
CLASS_DEF	73:8	79:0	4	struct colorbox BASE_CLASSES { struct colorbox * next , struct colorbox * prev ; int rmin , int rmax ; int gmin , int gmax ; int bmin , int bmax ; uint32 total ; }
LEAF_NODE	73:8	73:8	5	struct
CLASS_NAME	73:15	73:15	5	colorbox
LEAF_NODE	73:15	73:15	6	colorbox
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	73:24	73:24	5	{
CLASS_CONTENT	74:1	78:1	5	struct colorbox * next , struct colorbox * prev ; int rmin , int rmax ; int gmin , int gmax ; int bmin , int bmax ; uint32 total ;
SIMPLE_DECL	74:1	74:29	6	struct colorbox * next , struct colorbox * prev ;
INIT_DECL_LIST	74:1	74:1	7	struct colorbox * next , struct colorbox * prev
VAR_DECL	74:1	74:18	8	struct colorbox * next
TYPE	74:1	74:17	9	struct colorbox *
TYPE_NAME	74:1	74:8	10	struct colorbox
LEAF_NODE	74:1	74:1	11	struct
LEAF_NODE	74:8	74:8	11	colorbox
POINTER	74:17	74:17	10	*
LEAF_NODE	74:17	74:17	11	*
NAME	74:18	74:18	9	next
LEAF_NODE	74:18	74:18	10	next
LEAF_NODE	74:22	74:22	8	,
VAR_DECL	74:1	74:25	8	struct colorbox * prev
TYPE	74:1	74:24	9	struct colorbox *
TYPE_NAME	74:1	74:8	10	struct colorbox
LEAF_NODE	74:1	74:1	11	struct
LEAF_NODE	74:8	74:8	11	colorbox
POINTER	74:24	74:24	10	*
LEAF_NODE	74:24	74:24	11	*
NAME	74:25	74:25	9	prev
LEAF_NODE	74:25	74:25	10	prev
LEAF_NODE	74:29	74:29	7	;
SIMPLE_DECL	75:1	75:15	6	int rmin , int rmax ;
INIT_DECL_LIST	75:1	75:1	7	int rmin , int rmax
VAR_DECL	75:1	75:5	8	int rmin
TYPE	75:1	75:1	9	int
TYPE_NAME	75:1	75:1	10	int
LEAF_NODE	75:1	75:1	11	int
NAME	75:5	75:5	9	rmin
LEAF_NODE	75:5	75:5	10	rmin
LEAF_NODE	75:9	75:9	8	,
VAR_DECL	75:1	75:11	8	int rmax
TYPE	75:1	75:1	9	int
TYPE_NAME	75:1	75:1	10	int
LEAF_NODE	75:1	75:1	11	int
NAME	75:11	75:11	9	rmax
LEAF_NODE	75:11	75:11	10	rmax
LEAF_NODE	75:15	75:15	7	;
SIMPLE_DECL	76:1	76:15	6	int gmin , int gmax ;
INIT_DECL_LIST	76:1	76:1	7	int gmin , int gmax
VAR_DECL	76:1	76:5	8	int gmin
TYPE	76:1	76:1	9	int
TYPE_NAME	76:1	76:1	10	int
LEAF_NODE	76:1	76:1	11	int
NAME	76:5	76:5	9	gmin
LEAF_NODE	76:5	76:5	10	gmin
LEAF_NODE	76:9	76:9	8	,
VAR_DECL	76:1	76:11	8	int gmax
TYPE	76:1	76:1	9	int
TYPE_NAME	76:1	76:1	10	int
LEAF_NODE	76:1	76:1	11	int
NAME	76:11	76:11	9	gmax
LEAF_NODE	76:11	76:11	10	gmax
LEAF_NODE	76:15	76:15	7	;
SIMPLE_DECL	77:1	77:15	6	int bmin , int bmax ;
INIT_DECL_LIST	77:1	77:1	7	int bmin , int bmax
VAR_DECL	77:1	77:5	8	int bmin
TYPE	77:1	77:1	9	int
TYPE_NAME	77:1	77:1	10	int
LEAF_NODE	77:1	77:1	11	int
NAME	77:5	77:5	9	bmin
LEAF_NODE	77:5	77:5	10	bmin
LEAF_NODE	77:9	77:9	8	,
VAR_DECL	77:1	77:11	8	int bmax
TYPE	77:1	77:1	9	int
TYPE_NAME	77:1	77:1	10	int
LEAF_NODE	77:1	77:1	11	int
NAME	77:11	77:11	9	bmax
LEAF_NODE	77:11	77:11	10	bmax
LEAF_NODE	77:15	77:15	7	;
SIMPLE_DECL	78:1	78:13	6	uint32 total ;
VAR_DECL	78:1	78:8	7	uint32 total
TYPE	78:1	78:1	8	uint32
TYPE_NAME	78:1	78:1	9	uint32
LEAF_NODE	78:1	78:1	10	uint32
NAME	78:8	78:8	8	total
LEAF_NODE	78:8	78:8	9	total
LEAF_NODE	78:13	78:13	7	;
LEAF_NODE	79:0	79:0	5	}
NAME	79:2	79:2	3	Colorbox
LEAF_NODE	79:2	79:2	4	Colorbox
LEAF_NODE	79:10	79:10	2	;
SIMPLE_DECL	81:8	84:8	1	struct CLASS_NAME BASE_CLASSES { int num_ents ; int entries [ MAX_CMAP_SIZE ] [ 2 ] ; } C_cell ;
VAR_DECL	81:8	84:2	2	struct CLASS_NAME BASE_CLASSES { int num_ents ; int entries [ MAX_CMAP_SIZE ] [ 2 ] ; } C_cell
TYPE	81:8	81:8	3	struct CLASS_NAME BASE_CLASSES { int num_ents ; int entries [ MAX_CMAP_SIZE ] [ 2 ] ; }
CLASS_DEF	81:8	84:0	4	struct CLASS_NAME BASE_CLASSES { int num_ents ; int entries [ MAX_CMAP_SIZE ] [ 2 ] ; }
LEAF_NODE	81:8	81:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	81:15	81:15	5	{
CLASS_CONTENT	82:1	83:30	5	int num_ents ; int entries [ MAX_CMAP_SIZE ] [ 2 ] ;
SIMPLE_DECL	82:1	82:13	6	int num_ents ;
VAR_DECL	82:1	82:5	7	int num_ents
TYPE	82:1	82:1	8	int
TYPE_NAME	82:1	82:1	9	int
LEAF_NODE	82:1	82:1	10	int
NAME	82:5	82:5	8	num_ents
LEAF_NODE	82:5	82:5	9	num_ents
LEAF_NODE	82:13	82:13	7	;
LEAF_NODE	83:1	83:1	6	int
LEAF_NODE	83:5	83:5	6	entries
LEAF_NODE	83:12	83:12	6	[
LEAF_NODE	83:13	83:13	6	MAX_CMAP_SIZE
LEAF_NODE	83:26	83:26	6	]
LEAF_NODE	83:27	83:27	6	[
LEAF_NODE	83:28	83:28	6	2
LEAF_NODE	83:29	83:29	6	]
LEAF_NODE	83:30	83:30	6	;
LEAF_NODE	84:0	84:0	5	}
NAME	84:2	84:2	3	C_cell
LEAF_NODE	84:2	84:2	4	C_cell
LEAF_NODE	84:8	84:8	2	;
SIMPLE_DECL	86:0	86:62	1	uint16 [ MAX_CMAP_SIZE ] rm , uint16 [ MAX_CMAP_SIZE ] gm , uint16 [ MAX_CMAP_SIZE ] bm ;
INIT_DECL_LIST	86:0	86:0	2	uint16 [ MAX_CMAP_SIZE ] rm , uint16 [ MAX_CMAP_SIZE ] gm , uint16 [ MAX_CMAP_SIZE ] bm
VAR_DECL	86:0	86:7	3	uint16 [ MAX_CMAP_SIZE ] rm
TYPE	86:0	86:9	4	uint16 [ MAX_CMAP_SIZE ]
TYPE_NAME	86:0	86:0	5	uint16
LEAF_NODE	86:0	86:0	6	uint16
TYPE_SUFFIX	86:9	86:23	5	[ MAX_CMAP_SIZE ]
LEAF_NODE	86:9	86:9	6	[
FIELD	86:10	86:10	6	MAX_CMAP_SIZE
LEAF_NODE	86:10	86:10	7	MAX_CMAP_SIZE
LEAF_NODE	86:23	86:23	6	]
NAME	86:7	86:7	4	rm
LEAF_NODE	86:7	86:7	5	rm
LEAF_NODE	86:24	86:24	3	,
INIT_DECL_LIST	86:0	86:0	3	uint16 [ MAX_CMAP_SIZE ] gm , uint16 [ MAX_CMAP_SIZE ] bm
VAR_DECL	86:0	86:26	4	uint16 [ MAX_CMAP_SIZE ] gm
TYPE	86:0	86:28	5	uint16 [ MAX_CMAP_SIZE ]
TYPE_NAME	86:0	86:0	6	uint16
LEAF_NODE	86:0	86:0	7	uint16
TYPE_SUFFIX	86:28	86:42	6	[ MAX_CMAP_SIZE ]
LEAF_NODE	86:28	86:28	7	[
FIELD	86:29	86:29	7	MAX_CMAP_SIZE
LEAF_NODE	86:29	86:29	8	MAX_CMAP_SIZE
LEAF_NODE	86:42	86:42	7	]
NAME	86:26	86:26	5	gm
LEAF_NODE	86:26	86:26	6	gm
LEAF_NODE	86:43	86:43	4	,
VAR_DECL	86:0	86:45	4	uint16 [ MAX_CMAP_SIZE ] bm
TYPE	86:0	86:47	5	uint16 [ MAX_CMAP_SIZE ]
TYPE_NAME	86:0	86:0	6	uint16
LEAF_NODE	86:0	86:0	7	uint16
TYPE_SUFFIX	86:47	86:61	6	[ MAX_CMAP_SIZE ]
LEAF_NODE	86:47	86:47	7	[
FIELD	86:48	86:48	7	MAX_CMAP_SIZE
LEAF_NODE	86:48	86:48	8	MAX_CMAP_SIZE
LEAF_NODE	86:61	86:61	7	]
NAME	86:45	86:45	5	bm
LEAF_NODE	86:45	86:45	6	bm
LEAF_NODE	86:62	86:62	2	;
SIMPLE_DECL	87:0	87:14	1	int num_colors ;
VAR_DECL	87:0	87:4	2	int num_colors
TYPE	87:0	87:0	3	int
TYPE_NAME	87:0	87:0	4	int
LEAF_NODE	87:0	87:0	5	int
NAME	87:4	87:4	3	num_colors
LEAF_NODE	87:4	87:4	4	num_colors
LEAF_NODE	87:14	87:14	2	;
SIMPLE_DECL	89:0	89:19	1	Colorbox * freeboxes ;
VAR_DECL	89:0	89:10	2	Colorbox * freeboxes
TYPE	89:0	89:9	3	Colorbox *
TYPE_NAME	89:0	89:0	4	Colorbox
LEAF_NODE	89:0	89:0	5	Colorbox
POINTER	89:9	89:9	4	*
LEAF_NODE	89:9	89:9	5	*
NAME	89:10	89:10	3	freeboxes
LEAF_NODE	89:10	89:10	4	freeboxes
LEAF_NODE	89:19	89:19	2	;
SIMPLE_DECL	90:0	90:19	1	Colorbox * usedboxes ;
VAR_DECL	90:0	90:10	2	Colorbox * usedboxes
TYPE	90:0	90:9	3	Colorbox *
TYPE_NAME	90:0	90:0	4	Colorbox
LEAF_NODE	90:0	90:0	5	Colorbox
POINTER	90:9	90:9	4	*
LEAF_NODE	90:9	90:9	5	*
NAME	90:10	90:10	3	usedboxes
LEAF_NODE	90:10	90:10	4	usedboxes
LEAF_NODE	90:19	90:19	2	;
SIMPLE_DECL	91:0	91:19	1	C_cell * ColorCells ;
VAR_DECL	91:0	91:9	2	C_cell * ColorCells
TYPE	91:0	91:8	3	C_cell *
TYPE_NAME	91:0	91:0	4	C_cell
LEAF_NODE	91:0	91:0	5	C_cell
POINTER	91:8	91:8	4	*
LEAF_NODE	91:8	91:8	5	*
NAME	91:9	91:9	3	ColorCells
LEAF_NODE	91:9	91:9	4	ColorCells
LEAF_NODE	91:19	91:19	2	;
SIMPLE_DECL	92:0	92:14	1	TIFF * in , TIFF * out ;
INIT_DECL_LIST	92:0	92:0	2	TIFF * in , TIFF * out
VAR_DECL	92:0	92:6	3	TIFF * in
TYPE	92:0	92:5	4	TIFF *
TYPE_NAME	92:0	92:0	5	TIFF
LEAF_NODE	92:0	92:0	6	TIFF
POINTER	92:5	92:5	5	*
LEAF_NODE	92:5	92:5	6	*
NAME	92:6	92:6	4	in
LEAF_NODE	92:6	92:6	5	in
LEAF_NODE	92:8	92:8	3	,
VAR_DECL	92:0	92:11	3	TIFF * out
TYPE	92:0	92:10	4	TIFF *
TYPE_NAME	92:0	92:0	5	TIFF
LEAF_NODE	92:0	92:0	6	TIFF
POINTER	92:10	92:10	5	*
LEAF_NODE	92:10	92:10	6	*
NAME	92:11	92:11	4	out
LEAF_NODE	92:11	92:11	5	out
LEAF_NODE	92:14	92:14	2	;
SIMPLE_DECL	93:0	93:33	1	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	93:0	93:7	2	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	93:0	93:0	3	uint32
TYPE_NAME	93:0	93:0	4	uint32
LEAF_NODE	93:0	93:0	5	uint32
NAME	93:7	93:7	3	rowsperstrip
LEAF_NODE	93:7	93:7	4	rowsperstrip
LEAF_NODE	0:0	0:0	3	;
INIT	93:7	93:7	3	rowsperstrip = ( uint32 ) - 1
ASSIGN	93:7	93:22	4	rowsperstrip = ( uint32 ) - 1
LVAL	93:7	93:7	5	rowsperstrip
NAME	93:7	93:7	6	rowsperstrip
LEAF_NODE	93:7	93:7	7	rowsperstrip
ASSIGN_OP	93:20	93:20	5	=
LEAF_NODE	93:20	93:20	6	=
RVAL	93:22	93:31	5	( uint32 ) - 1
LEAF_NODE	93:22	93:22	6	(
TYPE_NAME	93:23	93:23	6	uint32
LEAF_NODE	93:23	93:23	7	uint32
LEAF_NODE	93:29	93:29	6	)
UNARY_EXPR	93:31	93:32	6	- 1
UNARY_OPERATOR	93:31	93:31	7	-
LEAF_NODE	93:31	93:31	8	-
FIELD	93:32	93:32	7	1
LEAF_NODE	93:32	93:32	8	1
LEAF_NODE	93:33	93:33	2	;
SIMPLE_DECL	94:0	94:32	1	uint16 compression ; compression = ( uint16 ) - 1 ;
VAR_DECL	94:0	94:7	2	uint16 compression ; compression = ( uint16 ) - 1
TYPE	94:0	94:0	3	uint16
TYPE_NAME	94:0	94:0	4	uint16
LEAF_NODE	94:0	94:0	5	uint16
NAME	94:7	94:7	3	compression
LEAF_NODE	94:7	94:7	4	compression
LEAF_NODE	0:0	0:0	3	;
INIT	94:7	94:7	3	compression = ( uint16 ) - 1
ASSIGN	94:7	94:21	4	compression = ( uint16 ) - 1
LVAL	94:7	94:7	5	compression
NAME	94:7	94:7	6	compression
LEAF_NODE	94:7	94:7	7	compression
ASSIGN_OP	94:19	94:19	5	=
LEAF_NODE	94:19	94:19	6	=
RVAL	94:21	94:30	5	( uint16 ) - 1
LEAF_NODE	94:21	94:21	6	(
TYPE_NAME	94:22	94:22	6	uint16
LEAF_NODE	94:22	94:22	7	uint16
LEAF_NODE	94:28	94:28	6	)
UNARY_EXPR	94:30	94:31	6	- 1
UNARY_OPERATOR	94:30	94:30	7	-
LEAF_NODE	94:30	94:30	8	-
FIELD	94:31	94:31	7	1
LEAF_NODE	94:31	94:31	8	1
LEAF_NODE	94:32	94:32	2	;
SIMPLE_DECL	95:0	95:24	1	uint16 bitspersample ; bitspersample = 1 ;
VAR_DECL	95:0	95:7	2	uint16 bitspersample ; bitspersample = 1
TYPE	95:0	95:0	3	uint16
TYPE_NAME	95:0	95:0	4	uint16
LEAF_NODE	95:0	95:0	5	uint16
NAME	95:7	95:7	3	bitspersample
LEAF_NODE	95:7	95:7	4	bitspersample
LEAF_NODE	0:0	0:0	3	;
INIT	95:7	95:7	3	bitspersample = 1
ASSIGN	95:7	95:23	4	bitspersample = 1
LVAL	95:7	95:7	5	bitspersample
NAME	95:7	95:7	6	bitspersample
LEAF_NODE	95:7	95:7	7	bitspersample
ASSIGN_OP	95:21	95:21	5	=
LEAF_NODE	95:21	95:21	6	=
RVAL	95:23	95:23	5	1
FIELD	95:23	95:23	6	1
LEAF_NODE	95:23	95:23	7	1
LEAF_NODE	95:24	95:24	2	;
SIMPLE_DECL	96:0	96:22	1	uint16 samplesperpixel ;
VAR_DECL	96:0	96:7	2	uint16 samplesperpixel
TYPE	96:0	96:0	3	uint16
TYPE_NAME	96:0	96:0	4	uint16
LEAF_NODE	96:0	96:0	5	uint16
NAME	96:7	96:7	3	samplesperpixel
LEAF_NODE	96:7	96:7	4	samplesperpixel
LEAF_NODE	96:22	96:22	2	;
SIMPLE_DECL	97:0	97:17	1	uint32 imagewidth ;
VAR_DECL	97:0	97:7	2	uint32 imagewidth
TYPE	97:0	97:0	3	uint32
TYPE_NAME	97:0	97:0	4	uint32
LEAF_NODE	97:0	97:0	5	uint32
NAME	97:7	97:7	3	imagewidth
LEAF_NODE	97:7	97:7	4	imagewidth
LEAF_NODE	97:17	97:17	2	;
SIMPLE_DECL	98:0	98:18	1	uint32 imagelength ;
VAR_DECL	98:0	98:7	2	uint32 imagelength
TYPE	98:0	98:0	3	uint32
TYPE_NAME	98:0	98:0	4	uint32
LEAF_NODE	98:0	98:0	5	uint32
NAME	98:7	98:7	3	imagelength
LEAF_NODE	98:7	98:7	4	imagelength
LEAF_NODE	98:18	98:18	2	;
SIMPLE_DECL	99:0	99:20	1	uint16 predictor ; predictor = 0 ;
VAR_DECL	99:0	99:7	2	uint16 predictor ; predictor = 0
TYPE	99:0	99:0	3	uint16
TYPE_NAME	99:0	99:0	4	uint16
LEAF_NODE	99:0	99:0	5	uint16
NAME	99:7	99:7	3	predictor
LEAF_NODE	99:7	99:7	4	predictor
LEAF_NODE	0:0	0:0	3	;
INIT	99:7	99:7	3	predictor = 0
ASSIGN	99:7	99:19	4	predictor = 0
LVAL	99:7	99:7	5	predictor
NAME	99:7	99:7	6	predictor
LEAF_NODE	99:7	99:7	7	predictor
ASSIGN_OP	99:17	99:17	5	=
LEAF_NODE	99:17	99:17	6	=
RVAL	99:19	99:19	5	0
FIELD	99:19	99:19	6	0
LEAF_NODE	99:19	99:19	7	0
LEAF_NODE	99:20	99:20	2	;
SIMPLE_DECL	104:7	104:32	1	void map_colortable ; map_colortable map_colortable ( void ) ;
VAR_DECL	104:7	104:12	2	void map_colortable ; map_colortable map_colortable ( void )
TYPE	104:7	104:7	3	void
TYPE_NAME	104:7	104:7	4	void
LEAF_NODE	104:7	104:7	5	void
NAME	104:12	104:12	3	map_colortable
LEAF_NODE	104:12	104:12	4	map_colortable
LEAF_NODE	0:0	0:0	3	;
INIT	104:12	104:12	3	map_colortable map_colortable ( void )
ASSIGN	104:12	104:26	4	map_colortable map_colortable ( void )
LVAL	104:12	104:12	5	map_colortable
NAME	104:12	104:12	6	map_colortable
LEAF_NODE	104:12	104:12	7	map_colortable
ASSIGN_OP	104:12	104:12	5	map_colortable
NAME	104:12	104:12	6	map_colortable
LEAF_NODE	104:12	104:12	7	map_colortable
RVAL	104:26	104:31	5	( void )
LEAF_NODE	104:26	104:26	6	(
EXPR	104:27	104:27	6	void
FIELD	104:27	104:27	7	void
LEAF_NODE	104:27	104:27	8	void
LEAF_NODE	104:31	104:31	6	)
LEAF_NODE	104:32	104:32	2	;
SIMPLE_DECL	107:7	107:34	1	Colorbox * largest_box ; largest_box largest_box ( void ) ;
VAR_DECL	107:7	107:17	2	Colorbox * largest_box ; largest_box largest_box ( void )
TYPE	107:7	107:15	3	Colorbox *
TYPE_NAME	107:7	107:7	4	Colorbox
LEAF_NODE	107:7	107:7	5	Colorbox
POINTER	107:15	107:15	4	*
LEAF_NODE	107:15	107:15	5	*
NAME	107:17	107:17	3	largest_box
LEAF_NODE	107:17	107:17	4	largest_box
LEAF_NODE	0:0	0:0	3	;
INIT	107:17	107:17	3	largest_box largest_box ( void )
ASSIGN	107:17	107:28	4	largest_box largest_box ( void )
LVAL	107:17	107:17	5	largest_box
NAME	107:17	107:17	6	largest_box
LEAF_NODE	107:17	107:17	7	largest_box
ASSIGN_OP	107:17	107:17	5	largest_box
NAME	107:17	107:17	6	largest_box
LEAF_NODE	107:17	107:17	7	largest_box
RVAL	107:28	107:33	5	( void )
LEAF_NODE	107:28	107:28	6	(
EXPR	107:29	107:29	6	void
FIELD	107:29	107:29	7	void
LEAF_NODE	107:29	107:29	8	void
LEAF_NODE	107:33	107:33	6	)
LEAF_NODE	107:34	107:34	2	;
SIMPLE_DECL	109:7	109:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	109:7	109:12	2	void usage ; usage usage ( void )
TYPE	109:7	109:7	3	void
TYPE_NAME	109:7	109:7	4	void
LEAF_NODE	109:7	109:7	5	void
NAME	109:12	109:12	3	usage
LEAF_NODE	109:12	109:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	109:12	109:12	3	usage usage ( void )
ASSIGN	109:12	109:17	4	usage usage ( void )
LVAL	109:12	109:12	5	usage
NAME	109:12	109:12	6	usage
LEAF_NODE	109:12	109:12	7	usage
ASSIGN_OP	109:12	109:12	5	usage
NAME	109:12	109:12	6	usage
LEAF_NODE	109:12	109:12	7	usage
RVAL	109:17	109:22	5	( void )
LEAF_NODE	109:17	109:17	6	(
EXPR	109:18	109:18	6	void
FIELD	109:18	109:18	7	void
LEAF_NODE	109:18	109:18	8	void
LEAF_NODE	109:22	109:22	6	)
LEAF_NODE	109:23	109:23	2	;
FUNCTION_DEF	115:0	294:0	1	
RETURN_TYPE	115:0	115:0	2	int
TYPE_NAME	115:0	115:0	3	int
LEAF_NODE	115:0	115:0	4	int
FUNCTION_NAME	116:0	116:0	2	main
LEAF_NODE	116:0	116:0	3	main
PARAMETER_LIST	116:4	116:27	2	( int argc , char * [ ] argv )
LEAF_NODE	116:4	116:4	3	(
PARAMETER_DECL	116:5	116:9	3	int argc
TYPE	116:5	116:5	4	int
TYPE_NAME	116:5	116:5	5	int
LEAF_NODE	116:5	116:5	6	int
NAME	116:9	116:9	4	argc
LEAF_NODE	116:9	116:9	5	argc
LEAF_NODE	116:13	116:13	3	,
PARAMETER_DECL	116:15	116:21	3	char * [ ] argv
TYPE	116:15	116:25	4	char * [ ]
TYPE_NAME	116:15	116:15	5	char
LEAF_NODE	116:15	116:15	6	char
POINTER	116:19	116:19	5	*
LEAF_NODE	116:19	116:19	6	*
TYPE_SUFFIX	116:25	116:26	5	[ ]
LEAF_NODE	116:25	116:25	6	[
LEAF_NODE	116:26	116:26	6	]
NAME	116:21	116:21	4	argv
LEAF_NODE	116:21	116:21	5	argv
LEAF_NODE	116:27	116:27	3	)
LEAF_NODE	117:0	117:0	2	{
STATEMENTS	118:1	293:1	2	
SIMPLE_DECL	118:1	118:18	3	int i , int dither ; dither = 0 ;
INIT_DECL_LIST	118:1	118:1	4	int i , int dither ; dither = 0
VAR_DECL	118:1	118:5	5	int i
TYPE	118:1	118:1	6	int
TYPE_NAME	118:1	118:1	7	int
LEAF_NODE	118:1	118:1	8	int
NAME	118:5	118:5	6	i
LEAF_NODE	118:5	118:5	7	i
LEAF_NODE	118:6	118:6	5	,
VAR_DECL	118:1	118:8	5	int dither ; dither = 0
TYPE	118:1	118:1	6	int
TYPE_NAME	118:1	118:1	7	int
LEAF_NODE	118:1	118:1	8	int
NAME	118:8	118:8	6	dither
LEAF_NODE	118:8	118:8	7	dither
LEAF_NODE	0:0	0:0	6	;
INIT	118:8	118:8	6	dither = 0
ASSIGN	118:8	118:17	7	dither = 0
LVAL	118:8	118:8	8	dither
NAME	118:8	118:8	9	dither
LEAF_NODE	118:8	118:8	10	dither
ASSIGN_OP	118:15	118:15	8	=
LEAF_NODE	118:15	118:15	9	=
RVAL	118:17	118:17	8	0
FIELD	118:17	118:17	9	0
LEAF_NODE	118:17	118:17	10	0
LEAF_NODE	118:18	118:18	4	;
SIMPLE_DECL	119:1	119:35	3	uint16 shortv , uint16 config , uint16 photometric ;
INIT_DECL_LIST	119:1	119:1	4	uint16 shortv , uint16 config , uint16 photometric
VAR_DECL	119:1	119:8	5	uint16 shortv
TYPE	119:1	119:1	6	uint16
TYPE_NAME	119:1	119:1	7	uint16
LEAF_NODE	119:1	119:1	8	uint16
NAME	119:8	119:8	6	shortv
LEAF_NODE	119:8	119:8	7	shortv
LEAF_NODE	119:14	119:14	5	,
INIT_DECL_LIST	119:1	119:1	5	uint16 config , uint16 photometric
VAR_DECL	119:1	119:16	6	uint16 config
TYPE	119:1	119:1	7	uint16
TYPE_NAME	119:1	119:1	8	uint16
LEAF_NODE	119:1	119:1	9	uint16
NAME	119:16	119:16	7	config
LEAF_NODE	119:16	119:16	8	config
LEAF_NODE	119:22	119:22	6	,
VAR_DECL	119:1	119:24	6	uint16 photometric
TYPE	119:1	119:1	7	uint16
TYPE_NAME	119:1	119:1	8	uint16
LEAF_NODE	119:1	119:1	9	uint16
NAME	119:24	119:24	7	photometric
LEAF_NODE	119:24	119:24	8	photometric
LEAF_NODE	119:35	119:35	4	;
SIMPLE_DECL	120:1	120:25	3	Colorbox * box_list , Colorbox * ptr ;
INIT_DECL_LIST	120:1	120:1	4	Colorbox * box_list , Colorbox * ptr
VAR_DECL	120:1	120:11	5	Colorbox * box_list
TYPE	120:1	120:10	6	Colorbox *
TYPE_NAME	120:1	120:1	7	Colorbox
LEAF_NODE	120:1	120:1	8	Colorbox
POINTER	120:10	120:10	7	*
LEAF_NODE	120:10	120:10	8	*
NAME	120:11	120:11	6	box_list
LEAF_NODE	120:11	120:11	7	box_list
LEAF_NODE	120:19	120:19	5	,
VAR_DECL	120:1	120:22	5	Colorbox * ptr
TYPE	120:1	120:21	6	Colorbox *
TYPE_NAME	120:1	120:1	7	Colorbox
LEAF_NODE	120:1	120:1	8	Colorbox
POINTER	120:21	120:21	7	*
LEAF_NODE	120:21	120:21	8	*
NAME	120:22	120:22	6	ptr
LEAF_NODE	120:22	120:22	7	ptr
LEAF_NODE	120:25	120:25	4	;
SIMPLE_DECL	121:1	121:13	3	float floatv ;
VAR_DECL	121:1	121:7	4	float floatv
TYPE	121:1	121:1	5	float
TYPE_NAME	121:1	121:1	6	float
LEAF_NODE	121:1	121:1	7	float
NAME	121:7	121:7	5	floatv
LEAF_NODE	121:7	121:7	6	floatv
LEAF_NODE	121:13	121:13	4	;
SIMPLE_DECL	122:1	122:13	3	uint32 longv ;
VAR_DECL	122:1	122:8	4	uint32 longv
TYPE	122:1	122:1	5	uint32
TYPE_NAME	122:1	122:1	6	uint32
LEAF_NODE	122:1	122:1	7	uint32
NAME	122:8	122:8	5	longv
LEAF_NODE	122:8	122:8	6	longv
LEAF_NODE	122:13	122:13	4	;
SIMPLE_DECL	123:1	123:6	3	int c ;
VAR_DECL	123:1	123:5	4	int c
TYPE	123:1	123:1	5	int
TYPE_NAME	123:1	123:1	6	int
LEAF_NODE	123:1	123:1	7	int
NAME	123:5	123:5	5	c
LEAF_NODE	123:5	123:5	6	c
LEAF_NODE	123:6	123:6	4	;
LEAF_NODE	125:1	125:1	3	extern
SIMPLE_DECL	125:8	125:18	3	int optind ;
VAR_DECL	125:8	125:12	4	int optind
TYPE	125:8	125:8	5	int
TYPE_NAME	125:8	125:8	6	int
LEAF_NODE	125:8	125:8	7	int
NAME	125:12	125:12	5	optind
LEAF_NODE	125:12	125:12	6	optind
LEAF_NODE	125:18	125:18	4	;
LEAF_NODE	126:1	126:1	3	extern
SIMPLE_DECL	126:8	126:20	3	char * optarg ;
VAR_DECL	126:8	126:14	4	char * optarg
TYPE	126:8	126:12	5	char *
TYPE_NAME	126:8	126:8	6	char
LEAF_NODE	126:8	126:8	7	char
POINTER	126:12	126:12	6	*
LEAF_NODE	126:12	126:12	7	*
NAME	126:14	126:14	5	optarg
LEAF_NODE	126:14	126:14	6	optarg
LEAF_NODE	126:20	126:20	4	;
EXPR_STATEMENT	129:1	129:27	3	num_colors = MAX_CMAP_SIZE ;
EXPR	129:1	129:1	4	num_colors = MAX_CMAP_SIZE
ASSIGN	129:1	129:14	5	num_colors = MAX_CMAP_SIZE
LVAL	129:1	129:1	6	num_colors
FIELD	129:1	129:1	7	num_colors
LEAF_NODE	129:1	129:1	8	num_colors
ASSIGN_OP	129:12	129:12	6	=
LEAF_NODE	129:12	129:12	7	=
RVAL	129:14	129:14	6	MAX_CMAP_SIZE
FIELD	129:14	129:14	7	MAX_CMAP_SIZE
LEAF_NODE	129:14	129:14	8	MAX_CMAP_SIZE
LEAF_NODE	129:27	129:27	4	;
ITERATION	130:1	131:2	3	
KEYWORD	130:1	130:1	4	while
LEAF_NODE	130:1	130:1	5	while
LEAF_NODE	130:7	130:7	4	(
CONDITION	130:8	130:8	4	( c = getopt ( argc , argv , "c:C:r:f" ) ) != - 1
EXPR	130:8	130:47	5	( c = getopt ( argc , argv , "c:C:r:f" ) ) != - 1
LEAF_NODE	130:8	130:8	6	(
ASSIGN	130:9	130:13	6	c = getopt ( argc , argv , "c:C:r:f" )
LVAL	130:9	130:9	7	c
FIELD	130:9	130:9	8	c
LEAF_NODE	130:9	130:9	9	c
ASSIGN_OP	130:11	130:11	7	=
LEAF_NODE	130:11	130:11	8	=
RVAL	130:13	130:13	7	getopt ( argc , argv , "c:C:r:f" )
FUNCTION_CALL	130:13	130:41	8	getopt ( argc , argv , "c:C:r:f" )
CALLEE	130:13	130:13	9	getopt
LEAF_NODE	130:13	130:13	10	getopt
LEAF_NODE	130:19	130:19	9	(
ARGUMENT	130:20	130:20	9	argc
FIELD	130:20	130:20	10	argc
LEAF_NODE	130:20	130:20	11	argc
LEAF_NODE	130:24	130:24	9	,
ARGUMENT	130:26	130:26	9	argv
FIELD	130:26	130:26	10	argv
LEAF_NODE	130:26	130:26	11	argv
LEAF_NODE	130:30	130:30	9	,
ARGUMENT	130:32	130:32	9	"c:C:r:f"
FIELD	130:32	130:32	10	"c:C:r:f"
LEAF_NODE	130:32	130:32	11	"c:C:r:f"
LEAF_NODE	130:41	130:41	9	)
LEAF_NODE	130:42	130:42	6	)
EQ_OPERATOR	130:44	130:44	6	!=
LEAF_NODE	130:44	130:44	7	!=
UNARY_EXPR	130:47	130:48	6	- 1
UNARY_OPERATOR	130:47	130:47	7	-
LEAF_NODE	130:47	130:47	8	-
FIELD	130:48	130:48	7	1
LEAF_NODE	130:48	130:48	8	1
LEAF_NODE	130:49	130:49	4	)
STATEMENTS	131:2	131:2	4	
SELECTION	131:2	131:13	5	
KEYWORD	131:2	131:2	6	switch
LEAF_NODE	131:2	131:2	7	switch
LEAF_NODE	131:9	131:9	6	(
CONDITION	131:10	131:10	6	c
EXPR	131:10	131:10	7	c
FIELD	131:10	131:10	8	c
LEAF_NODE	131:10	131:10	9	c
LEAF_NODE	131:11	131:11	6	)
STATEMENTS	131:13	154:2	6	
LEAF_NODE	131:13	131:13	7	{
STATEMENTS	132:2	152:3	7	
LEAF_NODE	132:2	132:2	8	case
LEAF_NODE	132:7	132:7	8	'c'
LEAF_NODE	132:10	132:10	8	:
SELECTION	133:3	134:4	8	
KEYWORD	133:3	133:3	9	if
LEAF_NODE	133:3	133:3	10	if
LEAF_NODE	133:6	133:6	9	(
CONDITION	133:7	133:7	9	! processCompressOptions ( optarg )
EXPR	133:7	133:7	10	! processCompressOptions ( optarg )
UNARY_EXPR	133:7	133:8	11	! processCompressOptions ( optarg )
UNARY_OPERATOR	133:7	133:7	12	!
LEAF_NODE	133:7	133:7	13	!
FUNCTION_CALL	133:8	133:37	12	processCompressOptions ( optarg )
CALLEE	133:8	133:8	13	processCompressOptions
LEAF_NODE	133:8	133:8	14	processCompressOptions
LEAF_NODE	133:30	133:30	13	(
ARGUMENT	133:31	133:31	13	optarg
FIELD	133:31	133:31	14	optarg
LEAF_NODE	133:31	133:31	15	optarg
LEAF_NODE	133:37	133:37	13	)
LEAF_NODE	133:38	133:38	9	)
STATEMENTS	134:4	134:4	9	
EXPR_STATEMENT	134:4	134:11	10	usage ( ) ;
EXPR	134:4	134:4	11	usage ( )
FUNCTION_CALL	134:4	134:10	12	usage ( )
CALLEE	134:4	134:4	13	usage
LEAF_NODE	134:4	134:4	14	usage
LEAF_NODE	134:9	134:9	13	(
LEAF_NODE	134:10	134:10	13	)
LEAF_NODE	134:11	134:11	11	;
JUMP_STATEMENT	135:3	135:8	8	break DESTINATION ;
KEYWORD	135:3	135:3	9	break
LEAF_NODE	135:3	135:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	135:8	135:8	9	;
LEAF_NODE	136:2	136:2	8	case
LEAF_NODE	136:7	136:7	8	'C'
LEAF_NODE	136:10	136:10	8	:
EXPR_STATEMENT	137:3	137:28	8	num_colors = atoi ( optarg ) ;
EXPR	137:3	137:3	9	num_colors = atoi ( optarg )
ASSIGN	137:3	137:16	10	num_colors = atoi ( optarg )
LVAL	137:3	137:3	11	num_colors
FIELD	137:3	137:3	12	num_colors
LEAF_NODE	137:3	137:3	13	num_colors
ASSIGN_OP	137:14	137:14	11	=
LEAF_NODE	137:14	137:14	12	=
RVAL	137:16	137:16	11	atoi ( optarg )
FUNCTION_CALL	137:16	137:27	12	atoi ( optarg )
CALLEE	137:16	137:16	13	atoi
LEAF_NODE	137:16	137:16	14	atoi
LEAF_NODE	137:20	137:20	13	(
ARGUMENT	137:21	137:21	13	optarg
FIELD	137:21	137:21	14	optarg
LEAF_NODE	137:21	137:21	15	optarg
LEAF_NODE	137:27	137:27	13	)
LEAF_NODE	137:28	137:28	9	;
SELECTION	138:3	138:35	8	
KEYWORD	138:3	138:3	9	if
LEAF_NODE	138:3	138:3	10	if
LEAF_NODE	138:6	138:6	9	(
CONDITION	138:7	138:7	9	num_colors > MAX_CMAP_SIZE
EXPR	138:7	138:20	10	num_colors > MAX_CMAP_SIZE
FIELD	138:7	138:7	11	num_colors
LEAF_NODE	138:7	138:7	12	num_colors
REL_OPERATOR	138:18	138:18	11	>
LEAF_NODE	138:18	138:18	12	>
FIELD	138:20	138:20	11	MAX_CMAP_SIZE
LEAF_NODE	138:20	138:20	12	MAX_CMAP_SIZE
LEAF_NODE	138:33	138:33	9	)
STATEMENTS	138:35	143:3	9	
LEAF_NODE	138:35	138:35	10	{
STATEMENTS	139:4	142:4	10	
EXPR_STATEMENT	139:4	141:21	11	fprintf ( stderr , "-c: colormap too big, max %d\n" , MAX_CMAP_SIZE ) ;
EXPR	139:4	139:4	12	fprintf ( stderr , "-c: colormap too big, max %d\n" , MAX_CMAP_SIZE )
FUNCTION_CALL	139:4	141:20	13	fprintf ( stderr , "-c: colormap too big, max %d\n" , MAX_CMAP_SIZE )
CALLEE	139:4	139:4	14	fprintf
LEAF_NODE	139:4	139:4	15	fprintf
LEAF_NODE	139:11	139:11	14	(
ARGUMENT	139:12	139:12	14	stderr
FIELD	139:12	139:12	15	stderr
LEAF_NODE	139:12	139:12	16	stderr
LEAF_NODE	139:18	139:18	14	,
ARGUMENT	140:7	140:7	14	"-c: colormap too big, max %d\n"
FIELD	140:7	140:7	15	"-c: colormap too big, max %d\n"
LEAF_NODE	140:7	140:7	16	"-c: colormap too big, max %d\n"
LEAF_NODE	140:39	140:39	14	,
ARGUMENT	141:7	141:7	14	MAX_CMAP_SIZE
FIELD	141:7	141:7	15	MAX_CMAP_SIZE
LEAF_NODE	141:7	141:7	16	MAX_CMAP_SIZE
LEAF_NODE	141:20	141:20	14	)
LEAF_NODE	141:21	141:21	12	;
EXPR_STATEMENT	142:4	142:11	11	usage ( ) ;
EXPR	142:4	142:4	12	usage ( )
FUNCTION_CALL	142:4	142:10	13	usage ( )
CALLEE	142:4	142:4	14	usage
LEAF_NODE	142:4	142:4	15	usage
LEAF_NODE	142:9	142:9	14	(
LEAF_NODE	142:10	142:10	14	)
LEAF_NODE	142:11	142:11	12	;
LEAF_NODE	143:3	143:3	10	}
JUMP_STATEMENT	144:3	144:8	8	break DESTINATION ;
KEYWORD	144:3	144:3	9	break
LEAF_NODE	144:3	144:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	144:8	144:8	9	;
LEAF_NODE	145:2	145:2	8	case
LEAF_NODE	145:7	145:7	8	'f'
LEAF_NODE	145:10	145:10	8	:
EXPR_STATEMENT	146:3	146:13	8	dither = 1 ;
EXPR	146:3	146:3	9	dither = 1
ASSIGN	146:3	146:12	10	dither = 1
LVAL	146:3	146:3	11	dither
FIELD	146:3	146:3	12	dither
LEAF_NODE	146:3	146:3	13	dither
ASSIGN_OP	146:10	146:10	11	=
LEAF_NODE	146:10	146:10	12	=
RVAL	146:12	146:12	11	1
FIELD	146:12	146:12	12	1
LEAF_NODE	146:12	146:12	13	1
LEAF_NODE	146:13	146:13	9	;
JUMP_STATEMENT	147:3	147:8	8	break DESTINATION ;
KEYWORD	147:3	147:3	9	break
LEAF_NODE	147:3	147:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	147:8	147:8	9	;
LEAF_NODE	148:2	148:2	8	case
LEAF_NODE	148:7	148:7	8	'r'
LEAF_NODE	148:10	148:10	8	:
EXPR_STATEMENT	149:3	149:30	8	rowsperstrip = atoi ( optarg ) ;
EXPR	149:3	149:3	9	rowsperstrip = atoi ( optarg )
ASSIGN	149:3	149:18	10	rowsperstrip = atoi ( optarg )
LVAL	149:3	149:3	11	rowsperstrip
FIELD	149:3	149:3	12	rowsperstrip
LEAF_NODE	149:3	149:3	13	rowsperstrip
ASSIGN_OP	149:16	149:16	11	=
LEAF_NODE	149:16	149:16	12	=
RVAL	149:18	149:18	11	atoi ( optarg )
FUNCTION_CALL	149:18	149:29	12	atoi ( optarg )
CALLEE	149:18	149:18	13	atoi
LEAF_NODE	149:18	149:18	14	atoi
LEAF_NODE	149:22	149:22	13	(
ARGUMENT	149:23	149:23	13	optarg
FIELD	149:23	149:23	14	optarg
LEAF_NODE	149:23	149:23	15	optarg
LEAF_NODE	149:29	149:29	13	)
LEAF_NODE	149:30	149:30	9	;
JUMP_STATEMENT	150:3	150:8	8	break DESTINATION ;
KEYWORD	150:3	150:3	9	break
LEAF_NODE	150:3	150:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	150:8	150:8	9	;
LEAF_NODE	151:2	151:2	8	case
LEAF_NODE	151:7	151:7	8	'?'
LEAF_NODE	151:10	151:10	8	:
EXPR_STATEMENT	152:3	152:10	8	usage ( ) ;
EXPR	152:3	152:3	9	usage ( )
FUNCTION_CALL	152:3	152:9	10	usage ( )
CALLEE	152:3	152:3	11	usage
LEAF_NODE	152:3	152:3	12	usage
LEAF_NODE	152:8	152:8	11	(
LEAF_NODE	152:9	152:9	11	)
LEAF_NODE	152:10	152:10	9	;
LEAF_NODE	154:2	154:2	7	}
SELECTION	155:1	156:2	3	
KEYWORD	155:1	155:1	4	if
LEAF_NODE	155:1	155:1	5	if
LEAF_NODE	155:4	155:4	4	(
CONDITION	155:5	155:5	4	argc - optind != 2
EXPR	155:5	155:22	5	argc - optind != 2
FIELD	155:5	155:5	6	argc
LEAF_NODE	155:5	155:5	7	argc
LEAF_NODE	155:10	155:10	6	-
FIELD	155:12	155:12	6	optind
LEAF_NODE	155:12	155:12	7	optind
EQ_OPERATOR	155:19	155:19	6	!=
LEAF_NODE	155:19	155:19	7	!=
FIELD	155:22	155:22	6	2
LEAF_NODE	155:22	155:22	7	2
LEAF_NODE	155:23	155:23	4	)
STATEMENTS	156:2	156:2	4	
EXPR_STATEMENT	156:2	156:9	5	usage ( ) ;
EXPR	156:2	156:2	6	usage ( )
FUNCTION_CALL	156:2	156:8	7	usage ( )
CALLEE	156:2	156:2	8	usage
LEAF_NODE	156:2	156:2	9	usage
LEAF_NODE	156:7	156:7	8	(
LEAF_NODE	156:8	156:8	8	)
LEAF_NODE	156:9	156:9	6	;
EXPR_STATEMENT	157:1	157:33	3	in = TIFFOpen ( argv [ optind ] , "r" ) ;
EXPR	157:1	157:1	4	in = TIFFOpen ( argv [ optind ] , "r" )
ASSIGN	157:1	157:6	5	in = TIFFOpen ( argv [ optind ] , "r" )
LVAL	157:1	157:1	6	in
FIELD	157:1	157:1	7	in
LEAF_NODE	157:1	157:1	8	in
ASSIGN_OP	157:4	157:4	6	=
LEAF_NODE	157:4	157:4	7	=
RVAL	157:6	157:6	6	TIFFOpen ( argv [ optind ] , "r" )
FUNCTION_CALL	157:6	157:32	7	TIFFOpen ( argv [ optind ] , "r" )
CALLEE	157:6	157:6	8	TIFFOpen
LEAF_NODE	157:6	157:6	9	TIFFOpen
LEAF_NODE	157:14	157:14	8	(
ARGUMENT	157:15	157:15	8	argv [ optind ]
FIELD	157:15	157:26	9	argv [ optind ]
LEAF_NODE	157:15	157:15	10	argv
LEAF_NODE	157:19	157:19	10	[
EXPR	157:20	157:20	10	optind
FIELD	157:20	157:20	11	optind
LEAF_NODE	157:20	157:20	12	optind
LEAF_NODE	157:26	157:26	10	]
LEAF_NODE	157:27	157:27	8	,
ARGUMENT	157:29	157:29	8	"r"
FIELD	157:29	157:29	9	"r"
LEAF_NODE	157:29	157:29	10	"r"
LEAF_NODE	157:32	157:32	8	)
LEAF_NODE	157:33	157:33	4	;
SELECTION	158:1	159:2	3	
KEYWORD	158:1	158:1	4	if
LEAF_NODE	158:1	158:1	5	if
LEAF_NODE	158:4	158:4	4	(
CONDITION	158:5	158:5	4	in == NULL
EXPR	158:5	158:11	5	in == NULL
FIELD	158:5	158:5	6	in
LEAF_NODE	158:5	158:5	7	in
EQ_OPERATOR	158:8	158:8	6	==
LEAF_NODE	158:8	158:8	7	==
FIELD	158:11	158:11	6	NULL
LEAF_NODE	158:11	158:11	7	NULL
LEAF_NODE	158:15	158:15	4	)
STATEMENTS	159:2	159:2	4	
JUMP_STATEMENT	159:2	159:13	5	return ( - 1 ) ;
KEYWORD	159:2	159:2	6	return
LEAF_NODE	159:2	159:2	7	return
DESTINATION	159:9	159:9	6	( - 1 )
EXPR	159:9	159:12	7	( - 1 )
LEAF_NODE	159:9	159:9	8	(
UNARY_EXPR	159:10	159:11	8	- 1
UNARY_OPERATOR	159:10	159:10	9	-
LEAF_NODE	159:10	159:10	10	-
FIELD	159:11	159:11	9	1
LEAF_NODE	159:11	159:11	10	1
LEAF_NODE	159:12	159:12	8	)
LEAF_NODE	159:13	159:13	6	;
EXPR_STATEMENT	160:1	160:50	3	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & imagewidth ) ;
EXPR	160:1	160:1	4	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & imagewidth )
FUNCTION_CALL	160:1	160:49	5	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & imagewidth )
CALLEE	160:1	160:1	6	TIFFGetField
LEAF_NODE	160:1	160:1	7	TIFFGetField
LEAF_NODE	160:13	160:13	6	(
ARGUMENT	160:14	160:14	6	in
FIELD	160:14	160:14	7	in
LEAF_NODE	160:14	160:14	8	in
LEAF_NODE	160:16	160:16	6	,
ARGUMENT	160:18	160:18	6	TIFFTAG_IMAGEWIDTH
FIELD	160:18	160:18	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	160:18	160:18	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	160:36	160:36	6	,
ARGUMENT	160:38	160:38	6	& imagewidth
UNARY_EXPR	160:38	160:39	7	& imagewidth
UNARY_OPERATOR	160:38	160:38	8	&
LEAF_NODE	160:38	160:38	9	&
FIELD	160:39	160:39	8	imagewidth
LEAF_NODE	160:39	160:39	9	imagewidth
LEAF_NODE	160:49	160:49	6	)
LEAF_NODE	160:50	160:50	4	;
EXPR_STATEMENT	161:1	161:52	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & imagelength ) ;
EXPR	161:1	161:1	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & imagelength )
FUNCTION_CALL	161:1	161:51	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & imagelength )
CALLEE	161:1	161:1	6	TIFFGetField
LEAF_NODE	161:1	161:1	7	TIFFGetField
LEAF_NODE	161:13	161:13	6	(
ARGUMENT	161:14	161:14	6	in
FIELD	161:14	161:14	7	in
LEAF_NODE	161:14	161:14	8	in
LEAF_NODE	161:16	161:16	6	,
ARGUMENT	161:18	161:18	6	TIFFTAG_IMAGELENGTH
FIELD	161:18	161:18	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	161:18	161:18	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	161:37	161:37	6	,
ARGUMENT	161:39	161:39	6	& imagelength
UNARY_EXPR	161:39	161:40	7	& imagelength
UNARY_OPERATOR	161:39	161:39	8	&
LEAF_NODE	161:39	161:39	9	&
FIELD	161:40	161:40	8	imagelength
LEAF_NODE	161:40	161:40	9	imagelength
LEAF_NODE	161:51	161:51	6	)
LEAF_NODE	161:52	161:52	4	;
EXPR_STATEMENT	162:1	162:56	3	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample ) ;
EXPR	162:1	162:1	4	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample )
FUNCTION_CALL	162:1	162:55	5	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample )
CALLEE	162:1	162:1	6	TIFFGetField
LEAF_NODE	162:1	162:1	7	TIFFGetField
LEAF_NODE	162:13	162:13	6	(
ARGUMENT	162:14	162:14	6	in
FIELD	162:14	162:14	7	in
LEAF_NODE	162:14	162:14	8	in
LEAF_NODE	162:16	162:16	6	,
ARGUMENT	162:18	162:18	6	TIFFTAG_BITSPERSAMPLE
FIELD	162:18	162:18	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	162:18	162:18	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	162:39	162:39	6	,
ARGUMENT	162:41	162:41	6	& bitspersample
UNARY_EXPR	162:41	162:42	7	& bitspersample
UNARY_OPERATOR	162:41	162:41	8	&
LEAF_NODE	162:41	162:41	9	&
FIELD	162:42	162:42	8	bitspersample
LEAF_NODE	162:42	162:42	9	bitspersample
LEAF_NODE	162:55	162:55	6	)
LEAF_NODE	162:56	162:56	4	;
EXPR_STATEMENT	163:1	163:60	3	TIFFGetField ( in , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel ) ;
EXPR	163:1	163:1	4	TIFFGetField ( in , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
FUNCTION_CALL	163:1	163:59	5	TIFFGetField ( in , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
CALLEE	163:1	163:1	6	TIFFGetField
LEAF_NODE	163:1	163:1	7	TIFFGetField
LEAF_NODE	163:13	163:13	6	(
ARGUMENT	163:14	163:14	6	in
FIELD	163:14	163:14	7	in
LEAF_NODE	163:14	163:14	8	in
LEAF_NODE	163:16	163:16	6	,
ARGUMENT	163:18	163:18	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	163:18	163:18	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	163:18	163:18	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	163:41	163:41	6	,
ARGUMENT	163:43	163:43	6	& samplesperpixel
UNARY_EXPR	163:43	163:44	7	& samplesperpixel
UNARY_OPERATOR	163:43	163:43	8	&
LEAF_NODE	163:43	163:43	9	&
FIELD	163:44	163:44	8	samplesperpixel
LEAF_NODE	163:44	163:44	9	samplesperpixel
LEAF_NODE	163:59	163:59	6	)
LEAF_NODE	163:60	163:60	4	;
SELECTION	164:1	164:48	3	
KEYWORD	164:1	164:1	4	if
LEAF_NODE	164:1	164:1	5	if
LEAF_NODE	164:4	164:4	4	(
CONDITION	164:5	164:5	4	bitspersample != 8 && bitspersample != 16
EXPR	164:5	164:5	5	bitspersample != 8 && bitspersample != 16
AND	164:5	164:27	6	bitspersample != 8 && bitspersample != 16
EXPR	164:5	164:22	7	bitspersample != 8
FIELD	164:5	164:5	8	bitspersample
LEAF_NODE	164:5	164:5	9	bitspersample
EQ_OPERATOR	164:19	164:19	8	!=
LEAF_NODE	164:19	164:19	9	!=
FIELD	164:22	164:22	8	8
LEAF_NODE	164:22	164:22	9	8
LEAF_NODE	164:24	164:24	7	&&
EXPR	164:27	164:44	7	bitspersample != 16
FIELD	164:27	164:27	8	bitspersample
LEAF_NODE	164:27	164:27	9	bitspersample
EQ_OPERATOR	164:41	164:41	8	!=
LEAF_NODE	164:41	164:41	9	!=
FIELD	164:44	164:44	8	16
LEAF_NODE	164:44	164:44	9	16
LEAF_NODE	164:46	164:46	4	)
STATEMENTS	164:48	168:1	4	
LEAF_NODE	164:48	164:48	5	{
STATEMENTS	165:2	167:2	5	
EXPR_STATEMENT	165:2	166:19	6	fprintf ( stderr , "%s: Image must have at least 8-bits/sample\n" , argv [ optind ] ) ;
EXPR	165:2	165:2	7	fprintf ( stderr , "%s: Image must have at least 8-bits/sample\n" , argv [ optind ] )
FUNCTION_CALL	165:2	166:18	8	fprintf ( stderr , "%s: Image must have at least 8-bits/sample\n" , argv [ optind ] )
CALLEE	165:2	165:2	9	fprintf
LEAF_NODE	165:2	165:2	10	fprintf
LEAF_NODE	165:9	165:9	9	(
ARGUMENT	165:10	165:10	9	stderr
FIELD	165:10	165:10	10	stderr
LEAF_NODE	165:10	165:10	11	stderr
LEAF_NODE	165:16	165:16	9	,
ARGUMENT	165:18	165:18	9	"%s: Image must have at least 8-bits/sample\n"
FIELD	165:18	165:18	10	"%s: Image must have at least 8-bits/sample\n"
LEAF_NODE	165:18	165:18	11	"%s: Image must have at least 8-bits/sample\n"
LEAF_NODE	165:64	165:64	9	,
ARGUMENT	166:6	166:6	9	argv [ optind ]
FIELD	166:6	166:17	10	argv [ optind ]
LEAF_NODE	166:6	166:6	11	argv
LEAF_NODE	166:10	166:10	11	[
EXPR	166:11	166:11	11	optind
FIELD	166:11	166:11	12	optind
LEAF_NODE	166:11	166:11	13	optind
LEAF_NODE	166:17	166:17	11	]
LEAF_NODE	166:18	166:18	9	)
LEAF_NODE	166:19	166:19	7	;
JUMP_STATEMENT	167:2	167:13	6	return ( - 3 ) ;
KEYWORD	167:2	167:2	7	return
LEAF_NODE	167:2	167:2	8	return
DESTINATION	167:9	167:9	7	( - 3 )
EXPR	167:9	167:12	8	( - 3 )
LEAF_NODE	167:9	167:9	9	(
UNARY_EXPR	167:10	167:11	9	- 3
UNARY_OPERATOR	167:10	167:10	10	-
LEAF_NODE	167:10	167:10	11	-
FIELD	167:11	167:11	10	3
LEAF_NODE	167:11	167:11	11	3
LEAF_NODE	167:12	167:12	9	)
LEAF_NODE	167:13	167:13	7	;
LEAF_NODE	168:1	168:1	5	}
SELECTION	169:1	170:60	3	
KEYWORD	169:1	169:1	4	if
LEAF_NODE	169:1	169:1	5	if
LEAF_NODE	169:4	169:4	4	(
CONDITION	169:5	169:5	4	! TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric ) || photometric != PHOTOMETRIC_RGB || samplesperpixel < 3
EXPR	169:5	169:5	5	! TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric ) || photometric != PHOTOMETRIC_RGB || samplesperpixel < 3
OR	169:5	170:5	6	! TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric ) || photometric != PHOTOMETRIC_RGB || samplesperpixel < 3
EXPR	169:5	169:5	7	! TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric )
UNARY_EXPR	169:5	169:6	8	! TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric )
UNARY_OPERATOR	169:5	169:5	9	!
LEAF_NODE	169:5	169:5	10	!
FUNCTION_CALL	169:6	169:56	9	TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & photometric )
CALLEE	169:6	169:6	10	TIFFGetField
LEAF_NODE	169:6	169:6	11	TIFFGetField
LEAF_NODE	169:18	169:18	10	(
ARGUMENT	169:19	169:19	10	in
FIELD	169:19	169:19	11	in
LEAF_NODE	169:19	169:19	12	in
LEAF_NODE	169:21	169:21	10	,
ARGUMENT	169:23	169:23	10	TIFFTAG_PHOTOMETRIC
FIELD	169:23	169:23	11	TIFFTAG_PHOTOMETRIC
LEAF_NODE	169:23	169:23	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	169:42	169:42	10	,
ARGUMENT	169:44	169:44	10	& photometric
UNARY_EXPR	169:44	169:45	11	& photometric
UNARY_OPERATOR	169:44	169:44	12	&
LEAF_NODE	169:44	169:44	13	&
FIELD	169:45	169:45	12	photometric
LEAF_NODE	169:45	169:45	13	photometric
LEAF_NODE	169:56	169:56	10	)
LEAF_NODE	169:58	169:58	7	||
EXPR	170:5	170:5	7	photometric != PHOTOMETRIC_RGB || samplesperpixel < 3
OR	170:5	170:39	8	photometric != PHOTOMETRIC_RGB || samplesperpixel < 3
EXPR	170:5	170:20	9	photometric != PHOTOMETRIC_RGB
FIELD	170:5	170:5	10	photometric
LEAF_NODE	170:5	170:5	11	photometric
EQ_OPERATOR	170:17	170:17	10	!=
LEAF_NODE	170:17	170:17	11	!=
FIELD	170:20	170:20	10	PHOTOMETRIC_RGB
LEAF_NODE	170:20	170:20	11	PHOTOMETRIC_RGB
LEAF_NODE	170:36	170:36	9	||
EXPR	170:39	170:57	9	samplesperpixel < 3
FIELD	170:39	170:39	10	samplesperpixel
LEAF_NODE	170:39	170:39	11	samplesperpixel
REL_OPERATOR	170:55	170:55	10	<
LEAF_NODE	170:55	170:55	11	<
FIELD	170:57	170:57	10	3
LEAF_NODE	170:57	170:57	11	3
LEAF_NODE	170:58	170:58	4	)
STATEMENTS	170:60	173:1	4	
LEAF_NODE	170:60	170:60	5	{
STATEMENTS	171:2	172:2	5	
EXPR_STATEMENT	171:2	171:65	6	fprintf ( stderr , "%s: Image must have RGB data\n" , argv [ optind ] ) ;
EXPR	171:2	171:2	7	fprintf ( stderr , "%s: Image must have RGB data\n" , argv [ optind ] )
FUNCTION_CALL	171:2	171:64	8	fprintf ( stderr , "%s: Image must have RGB data\n" , argv [ optind ] )
CALLEE	171:2	171:2	9	fprintf
LEAF_NODE	171:2	171:2	10	fprintf
LEAF_NODE	171:9	171:9	9	(
ARGUMENT	171:10	171:10	9	stderr
FIELD	171:10	171:10	10	stderr
LEAF_NODE	171:10	171:10	11	stderr
LEAF_NODE	171:16	171:16	9	,
ARGUMENT	171:18	171:18	9	"%s: Image must have RGB data\n"
FIELD	171:18	171:18	10	"%s: Image must have RGB data\n"
LEAF_NODE	171:18	171:18	11	"%s: Image must have RGB data\n"
LEAF_NODE	171:50	171:50	9	,
ARGUMENT	171:52	171:52	9	argv [ optind ]
FIELD	171:52	171:63	10	argv [ optind ]
LEAF_NODE	171:52	171:52	11	argv
LEAF_NODE	171:56	171:56	11	[
EXPR	171:57	171:57	11	optind
FIELD	171:57	171:57	12	optind
LEAF_NODE	171:57	171:57	13	optind
LEAF_NODE	171:63	171:63	11	]
LEAF_NODE	171:64	171:64	9	)
LEAF_NODE	171:65	171:65	7	;
JUMP_STATEMENT	172:2	172:13	6	return ( - 4 ) ;
KEYWORD	172:2	172:2	7	return
LEAF_NODE	172:2	172:2	8	return
DESTINATION	172:9	172:9	7	( - 4 )
EXPR	172:9	172:12	8	( - 4 )
LEAF_NODE	172:9	172:9	9	(
UNARY_EXPR	172:10	172:11	9	- 4
UNARY_OPERATOR	172:10	172:10	10	-
LEAF_NODE	172:10	172:10	11	-
FIELD	172:11	172:11	10	4
LEAF_NODE	172:11	172:11	11	4
LEAF_NODE	172:12	172:12	9	)
LEAF_NODE	172:13	172:13	7	;
LEAF_NODE	173:1	173:1	5	}
EXPR_STATEMENT	174:1	174:48	3	TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & config ) ;
EXPR	174:1	174:1	4	TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & config )
FUNCTION_CALL	174:1	174:47	5	TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & config )
CALLEE	174:1	174:1	6	TIFFGetField
LEAF_NODE	174:1	174:1	7	TIFFGetField
LEAF_NODE	174:13	174:13	6	(
ARGUMENT	174:14	174:14	6	in
FIELD	174:14	174:14	7	in
LEAF_NODE	174:14	174:14	8	in
LEAF_NODE	174:16	174:16	6	,
ARGUMENT	174:18	174:18	6	TIFFTAG_PLANARCONFIG
FIELD	174:18	174:18	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	174:18	174:18	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	174:38	174:38	6	,
ARGUMENT	174:40	174:40	6	& config
UNARY_EXPR	174:40	174:41	7	& config
UNARY_OPERATOR	174:40	174:40	8	&
LEAF_NODE	174:40	174:40	9	&
FIELD	174:41	174:41	8	config
LEAF_NODE	174:41	174:41	9	config
LEAF_NODE	174:47	174:47	6	)
LEAF_NODE	174:48	174:48	4	;
SELECTION	175:1	175:36	3	
KEYWORD	175:1	175:1	4	if
LEAF_NODE	175:1	175:1	5	if
LEAF_NODE	175:4	175:4	4	(
CONDITION	175:5	175:5	4	config != PLANARCONFIG_CONTIG
EXPR	175:5	175:15	5	config != PLANARCONFIG_CONTIG
FIELD	175:5	175:5	6	config
LEAF_NODE	175:5	175:5	7	config
EQ_OPERATOR	175:12	175:12	6	!=
LEAF_NODE	175:12	175:12	7	!=
FIELD	175:15	175:15	6	PLANARCONFIG_CONTIG
LEAF_NODE	175:15	175:15	7	PLANARCONFIG_CONTIG
LEAF_NODE	175:34	175:34	4	)
STATEMENTS	175:36	179:1	4	
LEAF_NODE	175:36	175:36	5	{
STATEMENTS	176:2	178:2	5	
EXPR_STATEMENT	176:2	177:19	6	fprintf ( stderr , "%s: Can only handle contiguous data packing\n" , argv [ optind ] ) ;
EXPR	176:2	176:2	7	fprintf ( stderr , "%s: Can only handle contiguous data packing\n" , argv [ optind ] )
FUNCTION_CALL	176:2	177:18	8	fprintf ( stderr , "%s: Can only handle contiguous data packing\n" , argv [ optind ] )
CALLEE	176:2	176:2	9	fprintf
LEAF_NODE	176:2	176:2	10	fprintf
LEAF_NODE	176:9	176:9	9	(
ARGUMENT	176:10	176:10	9	stderr
FIELD	176:10	176:10	10	stderr
LEAF_NODE	176:10	176:10	11	stderr
LEAF_NODE	176:16	176:16	9	,
ARGUMENT	176:18	176:18	9	"%s: Can only handle contiguous data packing\n"
FIELD	176:18	176:18	10	"%s: Can only handle contiguous data packing\n"
LEAF_NODE	176:18	176:18	11	"%s: Can only handle contiguous data packing\n"
LEAF_NODE	176:65	176:65	9	,
ARGUMENT	177:6	177:6	9	argv [ optind ]
FIELD	177:6	177:17	10	argv [ optind ]
LEAF_NODE	177:6	177:6	11	argv
LEAF_NODE	177:10	177:10	11	[
EXPR	177:11	177:11	11	optind
FIELD	177:11	177:11	12	optind
LEAF_NODE	177:11	177:11	13	optind
LEAF_NODE	177:17	177:17	11	]
LEAF_NODE	177:18	177:18	9	)
LEAF_NODE	177:19	177:19	7	;
JUMP_STATEMENT	178:2	178:13	6	return ( - 5 ) ;
KEYWORD	178:2	178:2	7	return
LEAF_NODE	178:2	178:2	8	return
DESTINATION	178:9	178:9	7	( - 5 )
EXPR	178:9	178:12	8	( - 5 )
LEAF_NODE	178:9	178:9	9	(
UNARY_EXPR	178:10	178:11	9	- 5
UNARY_OPERATOR	178:10	178:10	10	-
LEAF_NODE	178:10	178:10	11	-
FIELD	178:11	178:11	10	5
LEAF_NODE	178:11	178:11	11	5
LEAF_NODE	178:12	178:12	9	)
LEAF_NODE	178:13	178:13	7	;
LEAF_NODE	179:1	179:1	5	}
EXPR_STATEMENT	184:1	184:17	3	usedboxes = NULL ;
EXPR	184:1	184:1	4	usedboxes = NULL
ASSIGN	184:1	184:13	5	usedboxes = NULL
LVAL	184:1	184:1	6	usedboxes
FIELD	184:1	184:1	7	usedboxes
LEAF_NODE	184:1	184:1	8	usedboxes
ASSIGN_OP	184:11	184:11	6	=
LEAF_NODE	184:11	184:11	7	=
RVAL	184:13	184:13	6	NULL
FIELD	184:13	184:13	7	NULL
LEAF_NODE	184:13	184:13	8	NULL
LEAF_NODE	184:17	184:17	4	;
EXPR_STATEMENT	185:1	185:77	3	box_list = freeboxes = ( Colorbox * ) _TIFFmalloc ( num_colors * sizeof ( Colorbox ) ) ;
EXPR	185:1	185:1	4	box_list = freeboxes = ( Colorbox * ) _TIFFmalloc ( num_colors * sizeof ( Colorbox ) )
ASSIGN	185:1	185:12	5	box_list = freeboxes = ( Colorbox * ) _TIFFmalloc ( num_colors * sizeof ( Colorbox ) )
LVAL	185:1	185:1	6	box_list
FIELD	185:1	185:1	7	box_list
LEAF_NODE	185:1	185:1	8	box_list
ASSIGN_OP	185:10	185:10	6	=
LEAF_NODE	185:10	185:10	7	=
RVAL	185:12	185:12	6	freeboxes = ( Colorbox * ) _TIFFmalloc ( num_colors * sizeof ( Colorbox ) )
ASSIGN	185:12	185:24	7	freeboxes = ( Colorbox * ) _TIFFmalloc ( num_colors * sizeof ( Colorbox ) )
LVAL	185:12	185:12	8	freeboxes
FIELD	185:12	185:12	9	freeboxes
LEAF_NODE	185:12	185:12	10	freeboxes
ASSIGN_OP	185:22	185:22	8	=
LEAF_NODE	185:22	185:22	9	=
RVAL	185:24	185:36	8	( Colorbox * ) _TIFFmalloc ( num_colors * sizeof ( Colorbox ) )
LEAF_NODE	185:24	185:24	9	(
TYPE_NAME	185:25	185:25	9	Colorbox
LEAF_NODE	185:25	185:25	10	Colorbox
LEAF_NODE	185:34	185:34	9	*
LEAF_NODE	185:35	185:35	9	)
FUNCTION_CALL	185:36	185:76	9	_TIFFmalloc ( num_colors * sizeof ( Colorbox ) )
CALLEE	185:36	185:36	10	_TIFFmalloc
LEAF_NODE	185:36	185:36	11	_TIFFmalloc
LEAF_NODE	185:47	185:47	10	(
ARGUMENT	185:48	185:59	10	num_colors * sizeof ( Colorbox )
FIELD	185:48	185:48	11	num_colors
LEAF_NODE	185:48	185:48	12	num_colors
LEAF_NODE	185:58	185:58	11	*
FUNCTION_CALL	185:59	185:75	11	sizeof ( Colorbox )
CALLEE	185:59	185:59	12	sizeof
LEAF_NODE	185:59	185:59	13	sizeof
LEAF_NODE	185:66	185:66	12	(
ARGUMENT	185:67	185:67	12	Colorbox
FIELD	185:67	185:67	13	Colorbox
LEAF_NODE	185:67	185:67	14	Colorbox
LEAF_NODE	185:75	185:75	12	)
LEAF_NODE	185:76	185:76	10	)
LEAF_NODE	185:77	185:77	4	;
EXPR_STATEMENT	186:1	186:34	3	freeboxes [ 0 ] . next = & freeboxes [ 1 ] ;
EXPR	186:1	186:1	4	freeboxes [ 0 ] . next = & freeboxes [ 1 ]
ASSIGN	186:1	186:21	5	freeboxes [ 0 ] . next = & freeboxes [ 1 ]
LVAL	186:1	186:1	6	freeboxes [ 0 ] . next
FIELD	186:1	186:14	7	freeboxes [ 0 ] . next
LEAF_NODE	186:1	186:1	8	freeboxes
LEAF_NODE	186:10	186:10	8	[
EXPR	186:11	186:11	8	0
FIELD	186:11	186:11	9	0
LEAF_NODE	186:11	186:11	10	0
LEAF_NODE	186:12	186:12	8	]
LEAF_NODE	186:13	186:13	8	.
LEAF_NODE	186:14	186:14	8	next
ASSIGN_OP	186:19	186:19	6	=
LEAF_NODE	186:19	186:19	7	=
RVAL	186:21	186:21	6	& freeboxes [ 1 ]
UNARY_EXPR	186:21	186:22	7	& freeboxes [ 1 ]
UNARY_OPERATOR	186:21	186:21	8	&
LEAF_NODE	186:21	186:21	9	&
FIELD	186:22	186:33	8	freeboxes [ 1 ]
LEAF_NODE	186:22	186:22	9	freeboxes
LEAF_NODE	186:31	186:31	9	[
EXPR	186:32	186:32	9	1
FIELD	186:32	186:32	10	1
LEAF_NODE	186:32	186:32	11	1
LEAF_NODE	186:33	186:33	9	]
LEAF_NODE	186:34	186:34	4	;
EXPR_STATEMENT	187:1	187:25	3	freeboxes [ 0 ] . prev = NULL ;
EXPR	187:1	187:1	4	freeboxes [ 0 ] . prev = NULL
ASSIGN	187:1	187:21	5	freeboxes [ 0 ] . prev = NULL
LVAL	187:1	187:1	6	freeboxes [ 0 ] . prev
FIELD	187:1	187:14	7	freeboxes [ 0 ] . prev
LEAF_NODE	187:1	187:1	8	freeboxes
LEAF_NODE	187:10	187:10	8	[
EXPR	187:11	187:11	8	0
FIELD	187:11	187:11	9	0
LEAF_NODE	187:11	187:11	10	0
LEAF_NODE	187:12	187:12	8	]
LEAF_NODE	187:13	187:13	8	.
LEAF_NODE	187:14	187:14	8	prev
ASSIGN_OP	187:19	187:19	6	=
LEAF_NODE	187:19	187:19	7	=
RVAL	187:21	187:21	6	NULL
FIELD	187:21	187:21	7	NULL
LEAF_NODE	187:21	187:21	8	NULL
LEAF_NODE	187:25	187:25	4	;
ITERATION	188:1	188:36	3	
KEYWORD	188:1	188:1	4	for
LEAF_NODE	188:1	188:1	5	for
LEAF_NODE	188:5	188:5	4	(
FOR_INIT	188:6	188:11	4	i = 1 ;
EXPR	188:6	188:6	5	i = 1
ASSIGN	188:6	188:10	6	i = 1
LVAL	188:6	188:6	7	i
FIELD	188:6	188:6	8	i
LEAF_NODE	188:6	188:6	9	i
ASSIGN_OP	188:8	188:8	7	=
LEAF_NODE	188:8	188:8	8	=
RVAL	188:10	188:10	7	1
FIELD	188:10	188:10	8	1
LEAF_NODE	188:10	188:10	9	1
LEAF_NODE	188:11	188:11	5	;
CONDITION	188:13	188:13	4	i < num_colors - 1
EXPR	188:13	188:28	5	i < num_colors - 1
FIELD	188:13	188:13	6	i
LEAF_NODE	188:13	188:13	7	i
REL_OPERATOR	188:15	188:15	6	<
LEAF_NODE	188:15	188:15	7	<
FIELD	188:17	188:17	6	num_colors
LEAF_NODE	188:17	188:17	7	num_colors
LEAF_NODE	188:27	188:27	6	-
FIELD	188:28	188:28	6	1
LEAF_NODE	188:28	188:28	7	1
LEAF_NODE	188:29	188:29	4	;
FOR_EXPR	188:31	188:31	4	++ i
EXPR	188:31	188:33	5	++ i
LEAF_NODE	188:31	188:31	6	++
FIELD	188:33	188:33	6	i
LEAF_NODE	188:33	188:33	7	i
LEAF_NODE	188:34	188:34	4	)
STATEMENTS	188:36	191:1	4	
LEAF_NODE	188:36	188:36	5	{
STATEMENTS	189:2	190:2	5	
EXPR_STATEMENT	189:2	189:37	6	freeboxes [ i ] . next = & freeboxes [ i + 1 ] ;
EXPR	189:2	189:2	7	freeboxes [ i ] . next = & freeboxes [ i + 1 ]
ASSIGN	189:2	189:22	8	freeboxes [ i ] . next = & freeboxes [ i + 1 ]
LVAL	189:2	189:2	9	freeboxes [ i ] . next
FIELD	189:2	189:15	10	freeboxes [ i ] . next
LEAF_NODE	189:2	189:2	11	freeboxes
LEAF_NODE	189:11	189:11	11	[
EXPR	189:12	189:12	11	i
FIELD	189:12	189:12	12	i
LEAF_NODE	189:12	189:12	13	i
LEAF_NODE	189:13	189:13	11	]
LEAF_NODE	189:14	189:14	11	.
LEAF_NODE	189:15	189:15	11	next
ASSIGN_OP	189:20	189:20	9	=
LEAF_NODE	189:20	189:20	10	=
RVAL	189:22	189:22	9	& freeboxes [ i + 1 ]
UNARY_EXPR	189:22	189:23	10	& freeboxes [ i + 1 ]
UNARY_OPERATOR	189:22	189:22	11	&
LEAF_NODE	189:22	189:22	12	&
FIELD	189:23	189:36	11	freeboxes [ i + 1 ]
LEAF_NODE	189:23	189:23	12	freeboxes
LEAF_NODE	189:32	189:32	12	[
EXPR	189:33	189:35	12	i + 1
FIELD	189:33	189:33	13	i
LEAF_NODE	189:33	189:33	14	i
LEAF_NODE	189:34	189:34	13	+
FIELD	189:35	189:35	13	1
LEAF_NODE	189:35	189:35	14	1
LEAF_NODE	189:36	189:36	12	]
LEAF_NODE	189:37	189:37	7	;
EXPR_STATEMENT	190:2	190:37	6	freeboxes [ i ] . prev = & freeboxes [ i - 1 ] ;
EXPR	190:2	190:2	7	freeboxes [ i ] . prev = & freeboxes [ i - 1 ]
ASSIGN	190:2	190:22	8	freeboxes [ i ] . prev = & freeboxes [ i - 1 ]
LVAL	190:2	190:2	9	freeboxes [ i ] . prev
FIELD	190:2	190:15	10	freeboxes [ i ] . prev
LEAF_NODE	190:2	190:2	11	freeboxes
LEAF_NODE	190:11	190:11	11	[
EXPR	190:12	190:12	11	i
FIELD	190:12	190:12	12	i
LEAF_NODE	190:12	190:12	13	i
LEAF_NODE	190:13	190:13	11	]
LEAF_NODE	190:14	190:14	11	.
LEAF_NODE	190:15	190:15	11	prev
ASSIGN_OP	190:20	190:20	9	=
LEAF_NODE	190:20	190:20	10	=
RVAL	190:22	190:22	9	& freeboxes [ i - 1 ]
UNARY_EXPR	190:22	190:23	10	& freeboxes [ i - 1 ]
UNARY_OPERATOR	190:22	190:22	11	&
LEAF_NODE	190:22	190:22	12	&
FIELD	190:23	190:36	11	freeboxes [ i - 1 ]
LEAF_NODE	190:23	190:23	12	freeboxes
LEAF_NODE	190:32	190:32	12	[
EXPR	190:33	190:35	12	i - 1
FIELD	190:33	190:33	13	i
LEAF_NODE	190:33	190:33	14	i
LEAF_NODE	190:34	190:34	13	-
FIELD	190:35	190:35	13	1
LEAF_NODE	190:35	190:35	14	1
LEAF_NODE	190:36	190:36	12	]
LEAF_NODE	190:37	190:37	7	;
LEAF_NODE	191:1	191:1	5	}
EXPR_STATEMENT	192:1	192:36	3	freeboxes [ num_colors - 1 ] . next = NULL ;
EXPR	192:1	192:1	4	freeboxes [ num_colors - 1 ] . next = NULL
ASSIGN	192:1	192:32	5	freeboxes [ num_colors - 1 ] . next = NULL
LVAL	192:1	192:1	6	freeboxes [ num_colors - 1 ] . next
FIELD	192:1	192:25	7	freeboxes [ num_colors - 1 ] . next
LEAF_NODE	192:1	192:1	8	freeboxes
LEAF_NODE	192:10	192:10	8	[
EXPR	192:11	192:22	8	num_colors - 1
FIELD	192:11	192:11	9	num_colors
LEAF_NODE	192:11	192:11	10	num_colors
LEAF_NODE	192:21	192:21	9	-
FIELD	192:22	192:22	9	1
LEAF_NODE	192:22	192:22	10	1
LEAF_NODE	192:23	192:23	8	]
LEAF_NODE	192:24	192:24	8	.
LEAF_NODE	192:25	192:25	8	next
ASSIGN_OP	192:30	192:30	6	=
LEAF_NODE	192:30	192:30	7	=
RVAL	192:32	192:32	6	NULL
FIELD	192:32	192:32	7	NULL
LEAF_NODE	192:32	192:32	8	NULL
LEAF_NODE	192:36	192:36	4	;
EXPR_STATEMENT	193:1	193:56	3	freeboxes [ num_colors - 1 ] . prev = & freeboxes [ num_colors - 2 ] ;
EXPR	193:1	193:1	4	freeboxes [ num_colors - 1 ] . prev = & freeboxes [ num_colors - 2 ]
ASSIGN	193:1	193:32	5	freeboxes [ num_colors - 1 ] . prev = & freeboxes [ num_colors - 2 ]
LVAL	193:1	193:1	6	freeboxes [ num_colors - 1 ] . prev
FIELD	193:1	193:25	7	freeboxes [ num_colors - 1 ] . prev
LEAF_NODE	193:1	193:1	8	freeboxes
LEAF_NODE	193:10	193:10	8	[
EXPR	193:11	193:22	8	num_colors - 1
FIELD	193:11	193:11	9	num_colors
LEAF_NODE	193:11	193:11	10	num_colors
LEAF_NODE	193:21	193:21	9	-
FIELD	193:22	193:22	9	1
LEAF_NODE	193:22	193:22	10	1
LEAF_NODE	193:23	193:23	8	]
LEAF_NODE	193:24	193:24	8	.
LEAF_NODE	193:25	193:25	8	prev
ASSIGN_OP	193:30	193:30	6	=
LEAF_NODE	193:30	193:30	7	=
RVAL	193:32	193:32	6	& freeboxes [ num_colors - 2 ]
UNARY_EXPR	193:32	193:33	7	& freeboxes [ num_colors - 2 ]
UNARY_OPERATOR	193:32	193:32	8	&
LEAF_NODE	193:32	193:32	9	&
FIELD	193:33	193:55	8	freeboxes [ num_colors - 2 ]
LEAF_NODE	193:33	193:33	9	freeboxes
LEAF_NODE	193:42	193:42	9	[
EXPR	193:43	193:54	9	num_colors - 2
FIELD	193:43	193:43	10	num_colors
LEAF_NODE	193:43	193:43	11	num_colors
LEAF_NODE	193:53	193:53	10	-
FIELD	193:54	193:54	10	2
LEAF_NODE	193:54	193:54	11	2
LEAF_NODE	193:55	193:55	9	]
LEAF_NODE	193:56	193:56	4	;
EXPR_STATEMENT	198:1	198:16	3	ptr = freeboxes ;
EXPR	198:1	198:1	4	ptr = freeboxes
ASSIGN	198:1	198:7	5	ptr = freeboxes
LVAL	198:1	198:1	6	ptr
FIELD	198:1	198:1	7	ptr
LEAF_NODE	198:1	198:1	8	ptr
ASSIGN_OP	198:5	198:5	6	=
LEAF_NODE	198:5	198:5	7	=
RVAL	198:7	198:7	6	freeboxes
FIELD	198:7	198:7	7	freeboxes
LEAF_NODE	198:7	198:7	8	freeboxes
LEAF_NODE	198:16	198:16	4	;
EXPR_STATEMENT	199:1	199:22	3	freeboxes = ptr -> next ;
EXPR	199:1	199:1	4	freeboxes = ptr -> next
ASSIGN	199:1	199:13	5	freeboxes = ptr -> next
LVAL	199:1	199:1	6	freeboxes
FIELD	199:1	199:1	7	freeboxes
LEAF_NODE	199:1	199:1	8	freeboxes
ASSIGN_OP	199:11	199:11	6	=
LEAF_NODE	199:11	199:11	7	=
RVAL	199:13	199:13	6	ptr -> next
FIELD	199:13	199:18	7	ptr -> next
LEAF_NODE	199:13	199:13	8	ptr
LEAF_NODE	199:16	199:16	8	->
LEAF_NODE	199:18	199:18	8	next
LEAF_NODE	199:22	199:22	4	;
SELECTION	200:1	201:2	3	
KEYWORD	200:1	200:1	4	if
LEAF_NODE	200:1	200:1	5	if
LEAF_NODE	200:4	200:4	4	(
CONDITION	200:5	200:5	4	freeboxes
EXPR	200:5	200:5	5	freeboxes
FIELD	200:5	200:5	6	freeboxes
LEAF_NODE	200:5	200:5	7	freeboxes
LEAF_NODE	200:14	200:14	4	)
STATEMENTS	201:2	201:2	4	
EXPR_STATEMENT	201:2	201:24	5	freeboxes -> prev = NULL ;
EXPR	201:2	201:2	6	freeboxes -> prev = NULL
ASSIGN	201:2	201:20	7	freeboxes -> prev = NULL
LVAL	201:2	201:2	8	freeboxes -> prev
FIELD	201:2	201:13	9	freeboxes -> prev
LEAF_NODE	201:2	201:2	10	freeboxes
LEAF_NODE	201:11	201:11	10	->
LEAF_NODE	201:13	201:13	10	prev
ASSIGN_OP	201:18	201:18	8	=
LEAF_NODE	201:18	201:18	9	=
RVAL	201:20	201:20	8	NULL
FIELD	201:20	201:20	9	NULL
LEAF_NODE	201:20	201:20	10	NULL
LEAF_NODE	201:24	201:24	6	;
EXPR_STATEMENT	202:1	202:22	3	ptr -> next = usedboxes ;
EXPR	202:1	202:1	4	ptr -> next = usedboxes
ASSIGN	202:1	202:13	5	ptr -> next = usedboxes
LVAL	202:1	202:1	6	ptr -> next
FIELD	202:1	202:6	7	ptr -> next
LEAF_NODE	202:1	202:1	8	ptr
LEAF_NODE	202:4	202:4	8	->
LEAF_NODE	202:6	202:6	8	next
ASSIGN_OP	202:11	202:11	6	=
LEAF_NODE	202:11	202:11	7	=
RVAL	202:13	202:13	6	usedboxes
FIELD	202:13	202:13	7	usedboxes
LEAF_NODE	202:13	202:13	8	usedboxes
LEAF_NODE	202:22	202:22	4	;
EXPR_STATEMENT	203:1	203:16	3	usedboxes = ptr ;
EXPR	203:1	203:1	4	usedboxes = ptr
ASSIGN	203:1	203:13	5	usedboxes = ptr
LVAL	203:1	203:1	6	usedboxes
FIELD	203:1	203:1	7	usedboxes
LEAF_NODE	203:1	203:1	8	usedboxes
ASSIGN_OP	203:11	203:11	6	=
LEAF_NODE	203:11	203:11	7	=
RVAL	203:13	203:13	6	ptr
FIELD	203:13	203:13	7	ptr
LEAF_NODE	203:13	203:13	8	ptr
LEAF_NODE	203:16	203:16	4	;
SELECTION	204:1	205:2	3	
KEYWORD	204:1	204:1	4	if
LEAF_NODE	204:1	204:1	5	if
LEAF_NODE	204:4	204:4	4	(
CONDITION	204:5	204:5	4	ptr -> next
EXPR	204:5	204:5	5	ptr -> next
FIELD	204:5	204:10	6	ptr -> next
LEAF_NODE	204:5	204:5	7	ptr
LEAF_NODE	204:8	204:8	7	->
LEAF_NODE	204:10	204:10	7	next
LEAF_NODE	204:14	204:14	4	)
STATEMENTS	205:2	205:2	4	
EXPR_STATEMENT	205:2	205:23	5	ptr -> next -> prev = ptr ;
EXPR	205:2	205:2	6	ptr -> next -> prev = ptr
ASSIGN	205:2	205:20	7	ptr -> next -> prev = ptr
LVAL	205:2	205:2	8	ptr -> next -> prev
FIELD	205:2	205:13	9	ptr -> next -> prev
LEAF_NODE	205:2	205:2	10	ptr
LEAF_NODE	205:5	205:5	10	->
LEAF_NODE	205:7	205:7	10	next
LEAF_NODE	205:11	205:11	10	->
LEAF_NODE	205:13	205:13	10	prev
ASSIGN_OP	205:18	205:18	8	=
LEAF_NODE	205:18	205:18	9	=
RVAL	205:20	205:20	8	ptr
FIELD	205:20	205:20	9	ptr
LEAF_NODE	205:20	205:20	10	ptr
LEAF_NODE	205:23	205:23	6	;
EXPR_STATEMENT	206:1	206:23	3	get_histogram ( in , ptr ) ;
EXPR	206:1	206:1	4	get_histogram ( in , ptr )
FUNCTION_CALL	206:1	206:22	5	get_histogram ( in , ptr )
CALLEE	206:1	206:1	6	get_histogram
LEAF_NODE	206:1	206:1	7	get_histogram
LEAF_NODE	206:14	206:14	6	(
ARGUMENT	206:15	206:15	6	in
FIELD	206:15	206:15	7	in
LEAF_NODE	206:15	206:15	8	in
LEAF_NODE	206:17	206:17	6	,
ARGUMENT	206:19	206:19	6	ptr
FIELD	206:19	206:19	7	ptr
LEAF_NODE	206:19	206:19	8	ptr
LEAF_NODE	206:22	206:22	6	)
LEAF_NODE	206:23	206:23	4	;
ITERATION	212:1	212:27	3	
KEYWORD	212:1	212:1	4	while
LEAF_NODE	212:1	212:1	5	while
LEAF_NODE	212:7	212:7	4	(
CONDITION	212:8	212:8	4	freeboxes != NULL
EXPR	212:8	212:21	5	freeboxes != NULL
FIELD	212:8	212:8	6	freeboxes
LEAF_NODE	212:8	212:8	7	freeboxes
EQ_OPERATOR	212:18	212:18	6	!=
LEAF_NODE	212:18	212:18	7	!=
FIELD	212:21	212:21	6	NULL
LEAF_NODE	212:21	212:21	7	NULL
LEAF_NODE	212:25	212:25	4	)
STATEMENTS	212:27	218:1	4	
LEAF_NODE	212:27	212:27	5	{
STATEMENTS	213:2	216:2	5	
EXPR_STATEMENT	213:2	213:21	6	ptr = largest_box ( ) ;
EXPR	213:2	213:2	7	ptr = largest_box ( )
ASSIGN	213:2	213:8	8	ptr = largest_box ( )
LVAL	213:2	213:2	9	ptr
FIELD	213:2	213:2	10	ptr
LEAF_NODE	213:2	213:2	11	ptr
ASSIGN_OP	213:6	213:6	9	=
LEAF_NODE	213:6	213:6	10	=
RVAL	213:8	213:8	9	largest_box ( )
FUNCTION_CALL	213:8	213:20	10	largest_box ( )
CALLEE	213:8	213:8	11	largest_box
LEAF_NODE	213:8	213:8	12	largest_box
LEAF_NODE	213:19	213:19	11	(
LEAF_NODE	213:20	213:20	11	)
LEAF_NODE	213:21	213:21	7	;
SELECTION	214:2	215:3	6	
KEYWORD	214:2	214:2	7	if
LEAF_NODE	214:2	214:2	8	if
LEAF_NODE	214:5	214:5	7	(
CONDITION	214:6	214:6	7	ptr != NULL
EXPR	214:6	214:13	8	ptr != NULL
FIELD	214:6	214:6	9	ptr
LEAF_NODE	214:6	214:6	10	ptr
EQ_OPERATOR	214:10	214:10	9	!=
LEAF_NODE	214:10	214:10	10	!=
FIELD	214:13	214:13	9	NULL
LEAF_NODE	214:13	214:13	10	NULL
LEAF_NODE	214:17	214:17	7	)
STATEMENTS	215:3	215:3	7	
EXPR_STATEMENT	215:3	215:16	8	splitbox ( ptr ) ;
EXPR	215:3	215:3	9	splitbox ( ptr )
FUNCTION_CALL	215:3	215:15	10	splitbox ( ptr )
CALLEE	215:3	215:3	11	splitbox
LEAF_NODE	215:3	215:3	12	splitbox
LEAF_NODE	215:11	215:11	11	(
ARGUMENT	215:12	215:12	11	ptr
FIELD	215:12	215:12	12	ptr
LEAF_NODE	215:12	215:12	13	ptr
LEAF_NODE	215:15	215:15	11	)
LEAF_NODE	215:16	215:16	9	;
SELECTION	216:2	217:3	6	
KEYWORD	216:2	216:2	7	else
LEAF_NODE	216:2	216:2	8	else
STATEMENTS	217:3	217:3	7	
EXPR_STATEMENT	217:3	217:19	8	freeboxes = NULL ;
EXPR	217:3	217:3	9	freeboxes = NULL
ASSIGN	217:3	217:15	10	freeboxes = NULL
LVAL	217:3	217:3	11	freeboxes
FIELD	217:3	217:3	12	freeboxes
LEAF_NODE	217:3	217:3	13	freeboxes
ASSIGN_OP	217:13	217:13	11	=
LEAF_NODE	217:13	217:13	12	=
RVAL	217:15	217:15	11	NULL
FIELD	217:15	217:15	12	NULL
LEAF_NODE	217:15	217:15	13	NULL
LEAF_NODE	217:19	217:19	9	;
LEAF_NODE	218:1	218:1	5	}
ITERATION	223:1	223:65	3	
KEYWORD	223:1	223:1	4	for
LEAF_NODE	223:1	223:1	5	for
LEAF_NODE	223:5	223:5	4	(
FOR_INIT	223:6	223:28	4	i = 0 , ptr = usedboxes ;
EXPR	223:6	223:13	5	i = 0 , ptr = usedboxes
ASSIGN	223:6	223:10	6	i = 0
LVAL	223:6	223:6	7	i
FIELD	223:6	223:6	8	i
LEAF_NODE	223:6	223:6	9	i
ASSIGN_OP	223:8	223:8	7	=
LEAF_NODE	223:8	223:8	8	=
RVAL	223:10	223:10	7	0
FIELD	223:10	223:10	8	0
LEAF_NODE	223:10	223:10	9	0
LEAF_NODE	223:11	223:11	6	,
ASSIGN	223:13	223:19	6	ptr = usedboxes
LVAL	223:13	223:13	7	ptr
FIELD	223:13	223:13	8	ptr
LEAF_NODE	223:13	223:13	9	ptr
ASSIGN_OP	223:17	223:17	7	=
LEAF_NODE	223:17	223:17	8	=
RVAL	223:19	223:19	7	usedboxes
FIELD	223:19	223:19	8	usedboxes
LEAF_NODE	223:19	223:19	9	usedboxes
LEAF_NODE	223:28	223:28	5	;
CONDITION	223:30	223:30	4	ptr != NULL
EXPR	223:30	223:37	5	ptr != NULL
FIELD	223:30	223:30	6	ptr
LEAF_NODE	223:30	223:30	7	ptr
EQ_OPERATOR	223:34	223:34	6	!=
LEAF_NODE	223:34	223:34	7	!=
FIELD	223:37	223:37	6	NULL
LEAF_NODE	223:37	223:37	7	NULL
LEAF_NODE	223:41	223:41	4	;
FOR_EXPR	223:43	223:43	4	++ i , ptr = ptr -> next
EXPR	223:43	223:48	5	++ i , ptr = ptr -> next
LEAF_NODE	223:43	223:43	6	++
FIELD	223:45	223:45	6	i
LEAF_NODE	223:45	223:45	7	i
LEAF_NODE	223:46	223:46	6	,
ASSIGN	223:48	223:54	6	ptr = ptr -> next
LVAL	223:48	223:48	7	ptr
FIELD	223:48	223:48	8	ptr
LEAF_NODE	223:48	223:48	9	ptr
ASSIGN_OP	223:52	223:52	7	=
LEAF_NODE	223:52	223:52	8	=
RVAL	223:54	223:54	7	ptr -> next
FIELD	223:54	223:59	8	ptr -> next
LEAF_NODE	223:54	223:54	9	ptr
LEAF_NODE	223:57	223:57	9	->
LEAF_NODE	223:59	223:59	9	next
LEAF_NODE	223:63	223:63	4	)
STATEMENTS	223:65	227:1	4	
LEAF_NODE	223:65	223:65	5	{
STATEMENTS	224:2	226:2	5	
EXPR_STATEMENT	224:2	224:54	6	rm [ i ] = ( ( ptr -> rmin + ptr -> rmax ) << COLOR_SHIFT ) / 2 ;
EXPR	224:2	224:2	7	rm [ i ] = ( ( ptr -> rmin + ptr -> rmax ) << COLOR_SHIFT ) / 2
ASSIGN	224:2	224:10	8	rm [ i ] = ( ( ptr -> rmin + ptr -> rmax ) << COLOR_SHIFT ) / 2
LVAL	224:2	224:2	9	rm [ i ]
FIELD	224:2	224:6	10	rm [ i ]
LEAF_NODE	224:2	224:2	11	rm
LEAF_NODE	224:4	224:4	11	[
EXPR	224:5	224:5	11	i
FIELD	224:5	224:5	12	i
LEAF_NODE	224:5	224:5	13	i
LEAF_NODE	224:6	224:6	11	]
ASSIGN_OP	224:8	224:8	9	=
LEAF_NODE	224:8	224:8	10	=
RVAL	224:10	224:53	9	( ( ptr -> rmin + ptr -> rmax ) << COLOR_SHIFT ) / 2
LEAF_NODE	224:10	224:10	10	(
LEAF_NODE	224:11	224:11	10	(
FIELD	224:12	224:17	10	ptr -> rmin
LEAF_NODE	224:12	224:12	11	ptr
LEAF_NODE	224:15	224:15	11	->
LEAF_NODE	224:17	224:17	11	rmin
LEAF_NODE	224:22	224:22	10	+
FIELD	224:24	224:29	10	ptr -> rmax
LEAF_NODE	224:24	224:24	11	ptr
LEAF_NODE	224:27	224:27	11	->
LEAF_NODE	224:29	224:29	11	rmax
LEAF_NODE	224:33	224:33	10	)
LEAF_NODE	224:35	224:35	10	<<
FIELD	224:38	224:38	10	COLOR_SHIFT
LEAF_NODE	224:38	224:38	11	COLOR_SHIFT
LEAF_NODE	224:49	224:49	10	)
LEAF_NODE	224:51	224:51	10	/
FIELD	224:53	224:53	10	2
LEAF_NODE	224:53	224:53	11	2
LEAF_NODE	224:54	224:54	7	;
EXPR_STATEMENT	225:2	225:54	6	gm [ i ] = ( ( ptr -> gmin + ptr -> gmax ) << COLOR_SHIFT ) / 2 ;
EXPR	225:2	225:2	7	gm [ i ] = ( ( ptr -> gmin + ptr -> gmax ) << COLOR_SHIFT ) / 2
ASSIGN	225:2	225:10	8	gm [ i ] = ( ( ptr -> gmin + ptr -> gmax ) << COLOR_SHIFT ) / 2
LVAL	225:2	225:2	9	gm [ i ]
FIELD	225:2	225:6	10	gm [ i ]
LEAF_NODE	225:2	225:2	11	gm
LEAF_NODE	225:4	225:4	11	[
EXPR	225:5	225:5	11	i
FIELD	225:5	225:5	12	i
LEAF_NODE	225:5	225:5	13	i
LEAF_NODE	225:6	225:6	11	]
ASSIGN_OP	225:8	225:8	9	=
LEAF_NODE	225:8	225:8	10	=
RVAL	225:10	225:53	9	( ( ptr -> gmin + ptr -> gmax ) << COLOR_SHIFT ) / 2
LEAF_NODE	225:10	225:10	10	(
LEAF_NODE	225:11	225:11	10	(
FIELD	225:12	225:17	10	ptr -> gmin
LEAF_NODE	225:12	225:12	11	ptr
LEAF_NODE	225:15	225:15	11	->
LEAF_NODE	225:17	225:17	11	gmin
LEAF_NODE	225:22	225:22	10	+
FIELD	225:24	225:29	10	ptr -> gmax
LEAF_NODE	225:24	225:24	11	ptr
LEAF_NODE	225:27	225:27	11	->
LEAF_NODE	225:29	225:29	11	gmax
LEAF_NODE	225:33	225:33	10	)
LEAF_NODE	225:35	225:35	10	<<
FIELD	225:38	225:38	10	COLOR_SHIFT
LEAF_NODE	225:38	225:38	11	COLOR_SHIFT
LEAF_NODE	225:49	225:49	10	)
LEAF_NODE	225:51	225:51	10	/
FIELD	225:53	225:53	10	2
LEAF_NODE	225:53	225:53	11	2
LEAF_NODE	225:54	225:54	7	;
EXPR_STATEMENT	226:2	226:54	6	bm [ i ] = ( ( ptr -> bmin + ptr -> bmax ) << COLOR_SHIFT ) / 2 ;
EXPR	226:2	226:2	7	bm [ i ] = ( ( ptr -> bmin + ptr -> bmax ) << COLOR_SHIFT ) / 2
ASSIGN	226:2	226:10	8	bm [ i ] = ( ( ptr -> bmin + ptr -> bmax ) << COLOR_SHIFT ) / 2
LVAL	226:2	226:2	9	bm [ i ]
FIELD	226:2	226:6	10	bm [ i ]
LEAF_NODE	226:2	226:2	11	bm
LEAF_NODE	226:4	226:4	11	[
EXPR	226:5	226:5	11	i
FIELD	226:5	226:5	12	i
LEAF_NODE	226:5	226:5	13	i
LEAF_NODE	226:6	226:6	11	]
ASSIGN_OP	226:8	226:8	9	=
LEAF_NODE	226:8	226:8	10	=
RVAL	226:10	226:53	9	( ( ptr -> bmin + ptr -> bmax ) << COLOR_SHIFT ) / 2
LEAF_NODE	226:10	226:10	10	(
LEAF_NODE	226:11	226:11	10	(
FIELD	226:12	226:17	10	ptr -> bmin
LEAF_NODE	226:12	226:12	11	ptr
LEAF_NODE	226:15	226:15	11	->
LEAF_NODE	226:17	226:17	11	bmin
LEAF_NODE	226:22	226:22	10	+
FIELD	226:24	226:29	10	ptr -> bmax
LEAF_NODE	226:24	226:24	11	ptr
LEAF_NODE	226:27	226:27	11	->
LEAF_NODE	226:29	226:29	11	bmax
LEAF_NODE	226:33	226:33	10	)
LEAF_NODE	226:35	226:35	10	<<
FIELD	226:38	226:38	10	COLOR_SHIFT
LEAF_NODE	226:38	226:38	11	COLOR_SHIFT
LEAF_NODE	226:49	226:49	10	)
LEAF_NODE	226:51	226:51	10	/
FIELD	226:53	226:53	10	2
LEAF_NODE	226:53	226:53	11	2
LEAF_NODE	226:54	226:54	7	;
LEAF_NODE	227:1	227:1	5	}
EXPR_STATEMENT	230:1	230:20	3	_TIFFfree ( box_list ) ;
EXPR	230:1	230:1	4	_TIFFfree ( box_list )
FUNCTION_CALL	230:1	230:19	5	_TIFFfree ( box_list )
CALLEE	230:1	230:1	6	_TIFFfree
LEAF_NODE	230:1	230:1	7	_TIFFfree
LEAF_NODE	230:10	230:10	6	(
ARGUMENT	230:11	230:11	6	box_list
FIELD	230:11	230:11	7	box_list
LEAF_NODE	230:11	230:11	8	box_list
LEAF_NODE	230:19	230:19	6	)
LEAF_NODE	230:20	230:20	4	;
EXPR_STATEMENT	231:1	231:29	3	freeboxes = usedboxes = NULL ;
EXPR	231:1	231:1	4	freeboxes = usedboxes = NULL
ASSIGN	231:1	231:13	5	freeboxes = usedboxes = NULL
LVAL	231:1	231:1	6	freeboxes
FIELD	231:1	231:1	7	freeboxes
LEAF_NODE	231:1	231:1	8	freeboxes
ASSIGN_OP	231:11	231:11	6	=
LEAF_NODE	231:11	231:11	7	=
RVAL	231:13	231:13	6	usedboxes = NULL
ASSIGN	231:13	231:25	7	usedboxes = NULL
LVAL	231:13	231:13	8	usedboxes
FIELD	231:13	231:13	9	usedboxes
LEAF_NODE	231:13	231:13	10	usedboxes
ASSIGN_OP	231:23	231:23	8	=
LEAF_NODE	231:23	231:23	9	=
RVAL	231:25	231:25	8	NULL
FIELD	231:25	231:25	9	NULL
LEAF_NODE	231:25	231:25	10	NULL
LEAF_NODE	231:29	231:29	4	;
LEAF_NODE	237:1	237:1	3	ColorCells
LEAF_NODE	237:12	237:12	3	=
LEAF_NODE	237:14	237:14	3	(
LEAF_NODE	237:15	237:15	3	C_cell
LEAF_NODE	237:22	237:22	3	*
LEAF_NODE	237:23	237:23	3	*
LEAF_NODE	237:24	237:24	3	)
LEAF_NODE	237:25	237:25	3	_TIFFmalloc
LEAF_NODE	237:36	237:36	3	(
LEAF_NODE	237:37	237:37	3	C_LEN
LEAF_NODE	237:42	237:42	3	*
LEAF_NODE	237:43	237:43	3	C_LEN
LEAF_NODE	237:48	237:48	3	*
LEAF_NODE	237:49	237:49	3	C_LEN
LEAF_NODE	237:54	237:54	3	*
LEAF_NODE	237:55	237:55	3	sizeof
LEAF_NODE	237:62	237:62	3	(
LEAF_NODE	237:63	237:63	3	C_cell
LEAF_NODE	237:69	237:69	3	*
LEAF_NODE	237:70	237:70	3	)
LEAF_NODE	237:71	237:71	3	)
LEAF_NODE	237:72	237:72	3	;
LEAF_NODE	238:1	238:1	3	_TIFFmemset
LEAF_NODE	238:12	238:12	3	(
LEAF_NODE	238:13	238:13	3	ColorCells
LEAF_NODE	238:23	238:23	3	,
LEAF_NODE	238:25	238:25	3	0
LEAF_NODE	238:26	238:26	3	,
LEAF_NODE	238:28	238:28	3	C_LEN
LEAF_NODE	238:33	238:33	3	*
LEAF_NODE	238:34	238:34	3	C_LEN
LEAF_NODE	238:39	238:39	3	*
LEAF_NODE	238:40	238:40	3	C_LEN
LEAF_NODE	238:45	238:45	3	*
LEAF_NODE	238:46	238:46	3	sizeof
LEAF_NODE	238:53	238:53	3	(
LEAF_NODE	238:54	238:54	3	C_cell
LEAF_NODE	238:60	238:60	3	*
LEAF_NODE	238:61	238:61	3	)
LEAF_NODE	238:62	238:62	3	)
LEAF_NODE	238:63	238:63	3	;
EXPR_STATEMENT	241:1	241:17	3	map_colortable ( ) ;
EXPR	241:1	241:1	4	map_colortable ( )
FUNCTION_CALL	241:1	241:16	5	map_colortable ( )
CALLEE	241:1	241:1	6	map_colortable
LEAF_NODE	241:1	241:1	7	map_colortable
LEAF_NODE	241:15	241:15	6	(
LEAF_NODE	241:16	241:16	6	)
LEAF_NODE	241:17	241:17	4	;
EXPR_STATEMENT	246:1	246:36	3	out = TIFFOpen ( argv [ optind + 1 ] , "w" ) ;
EXPR	246:1	246:1	4	out = TIFFOpen ( argv [ optind + 1 ] , "w" )
ASSIGN	246:1	246:7	5	out = TIFFOpen ( argv [ optind + 1 ] , "w" )
LVAL	246:1	246:1	6	out
FIELD	246:1	246:1	7	out
LEAF_NODE	246:1	246:1	8	out
ASSIGN_OP	246:5	246:5	6	=
LEAF_NODE	246:5	246:5	7	=
RVAL	246:7	246:7	6	TIFFOpen ( argv [ optind + 1 ] , "w" )
FUNCTION_CALL	246:7	246:35	7	TIFFOpen ( argv [ optind + 1 ] , "w" )
CALLEE	246:7	246:7	8	TIFFOpen
LEAF_NODE	246:7	246:7	9	TIFFOpen
LEAF_NODE	246:15	246:15	8	(
ARGUMENT	246:16	246:16	8	argv [ optind + 1 ]
FIELD	246:16	246:29	9	argv [ optind + 1 ]
LEAF_NODE	246:16	246:16	10	argv
LEAF_NODE	246:20	246:20	10	[
EXPR	246:21	246:28	10	optind + 1
FIELD	246:21	246:21	11	optind
LEAF_NODE	246:21	246:21	12	optind
LEAF_NODE	246:27	246:27	11	+
FIELD	246:28	246:28	11	1
LEAF_NODE	246:28	246:28	12	1
LEAF_NODE	246:29	246:29	10	]
LEAF_NODE	246:30	246:30	8	,
ARGUMENT	246:32	246:32	8	"w"
FIELD	246:32	246:32	9	"w"
LEAF_NODE	246:32	246:32	10	"w"
LEAF_NODE	246:35	246:35	8	)
LEAF_NODE	246:36	246:36	4	;
SELECTION	247:1	248:2	3	
KEYWORD	247:1	247:1	4	if
LEAF_NODE	247:1	247:1	5	if
LEAF_NODE	247:4	247:4	4	(
CONDITION	247:5	247:5	4	out == NULL
EXPR	247:5	247:12	5	out == NULL
FIELD	247:5	247:5	6	out
LEAF_NODE	247:5	247:5	7	out
EQ_OPERATOR	247:9	247:9	6	==
LEAF_NODE	247:9	247:9	7	==
FIELD	247:12	247:12	6	NULL
LEAF_NODE	247:12	247:12	7	NULL
LEAF_NODE	247:16	247:16	4	)
STATEMENTS	248:2	248:2	4	
JUMP_STATEMENT	248:2	248:13	5	return ( - 2 ) ;
KEYWORD	248:2	248:2	6	return
LEAF_NODE	248:2	248:2	7	return
DESTINATION	248:9	248:9	6	( - 2 )
EXPR	248:9	248:12	7	( - 2 )
LEAF_NODE	248:9	248:9	8	(
UNARY_EXPR	248:10	248:11	8	- 2
UNARY_OPERATOR	248:10	248:10	9	-
LEAF_NODE	248:10	248:10	10	-
FIELD	248:11	248:11	9	2
LEAF_NODE	248:11	248:11	10	2
LEAF_NODE	248:12	248:12	8	)
LEAF_NODE	248:13	248:13	6	;
EXPR_STATEMENT	250:1	250:38	3	CopyField ( TIFFTAG_SUBFILETYPE , longv ) ;
EXPR	250:1	250:1	4	CopyField ( TIFFTAG_SUBFILETYPE , longv )
FUNCTION_CALL	250:1	250:37	5	CopyField ( TIFFTAG_SUBFILETYPE , longv )
CALLEE	250:1	250:1	6	CopyField
LEAF_NODE	250:1	250:1	7	CopyField
LEAF_NODE	250:10	250:10	6	(
ARGUMENT	250:11	250:11	6	TIFFTAG_SUBFILETYPE
FIELD	250:11	250:11	7	TIFFTAG_SUBFILETYPE
LEAF_NODE	250:11	250:11	8	TIFFTAG_SUBFILETYPE
LEAF_NODE	250:30	250:30	6	,
ARGUMENT	250:32	250:32	6	longv
FIELD	250:32	250:32	7	longv
LEAF_NODE	250:32	250:32	8	longv
LEAF_NODE	250:37	250:37	6	)
LEAF_NODE	250:38	250:38	4	;
EXPR_STATEMENT	251:1	251:37	3	CopyField ( TIFFTAG_IMAGEWIDTH , longv ) ;
EXPR	251:1	251:1	4	CopyField ( TIFFTAG_IMAGEWIDTH , longv )
FUNCTION_CALL	251:1	251:36	5	CopyField ( TIFFTAG_IMAGEWIDTH , longv )
CALLEE	251:1	251:1	6	CopyField
LEAF_NODE	251:1	251:1	7	CopyField
LEAF_NODE	251:10	251:10	6	(
ARGUMENT	251:11	251:11	6	TIFFTAG_IMAGEWIDTH
FIELD	251:11	251:11	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	251:11	251:11	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	251:29	251:29	6	,
ARGUMENT	251:31	251:31	6	longv
FIELD	251:31	251:31	7	longv
LEAF_NODE	251:31	251:31	8	longv
LEAF_NODE	251:36	251:36	6	)
LEAF_NODE	251:37	251:37	4	;
EXPR_STATEMENT	252:1	252:61	3	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , ( short ) COLOR_DEPTH ) ;
EXPR	252:1	252:1	4	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , ( short ) COLOR_DEPTH )
FUNCTION_CALL	252:1	252:60	5	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , ( short ) COLOR_DEPTH )
CALLEE	252:1	252:1	6	TIFFSetField
LEAF_NODE	252:1	252:1	7	TIFFSetField
LEAF_NODE	252:13	252:13	6	(
ARGUMENT	252:14	252:14	6	out
FIELD	252:14	252:14	7	out
LEAF_NODE	252:14	252:14	8	out
LEAF_NODE	252:17	252:17	6	,
ARGUMENT	252:19	252:19	6	TIFFTAG_BITSPERSAMPLE
FIELD	252:19	252:19	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	252:19	252:19	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	252:40	252:40	6	,
ARGUMENT	252:42	252:49	6	( short ) COLOR_DEPTH
LEAF_NODE	252:42	252:42	7	(
TYPE_NAME	252:43	252:43	7	short
LEAF_NODE	252:43	252:43	8	short
LEAF_NODE	252:48	252:48	7	)
FIELD	252:49	252:49	7	COLOR_DEPTH
LEAF_NODE	252:49	252:49	8	COLOR_DEPTH
LEAF_NODE	252:60	252:60	6	)
LEAF_NODE	252:61	252:61	4	;
SELECTION	253:1	253:32	3	
KEYWORD	253:1	253:1	4	if
LEAF_NODE	253:1	253:1	5	if
LEAF_NODE	253:4	253:4	4	(
CONDITION	253:5	253:5	4	compression != ( uint16 ) - 1
EXPR	253:5	253:28	5	compression != ( uint16 ) - 1
FIELD	253:5	253:5	6	compression
LEAF_NODE	253:5	253:5	7	compression
EQ_OPERATOR	253:17	253:17	6	!=
LEAF_NODE	253:17	253:17	7	!=
LEAF_NODE	253:20	253:20	6	(
TYPE_NAME	253:21	253:21	6	uint16
LEAF_NODE	253:21	253:21	7	uint16
LEAF_NODE	253:27	253:27	6	)
UNARY_EXPR	253:28	253:29	6	- 1
UNARY_OPERATOR	253:28	253:28	7	-
LEAF_NODE	253:28	253:28	8	-
FIELD	253:29	253:29	7	1
LEAF_NODE	253:29	253:29	8	1
LEAF_NODE	253:30	253:30	4	)
STATEMENTS	253:32	262:1	4	
LEAF_NODE	253:32	253:32	5	{
STATEMENTS	254:2	255:2	5	
EXPR_STATEMENT	254:2	254:53	6	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	254:2	254:2	7	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	254:2	254:52	8	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	254:2	254:2	9	TIFFSetField
LEAF_NODE	254:2	254:2	10	TIFFSetField
LEAF_NODE	254:14	254:14	9	(
ARGUMENT	254:15	254:15	9	out
FIELD	254:15	254:15	10	out
LEAF_NODE	254:15	254:15	11	out
LEAF_NODE	254:18	254:18	9	,
ARGUMENT	254:20	254:20	9	TIFFTAG_COMPRESSION
FIELD	254:20	254:20	10	TIFFTAG_COMPRESSION
LEAF_NODE	254:20	254:20	11	TIFFTAG_COMPRESSION
LEAF_NODE	254:39	254:39	9	,
ARGUMENT	254:41	254:41	9	compression
FIELD	254:41	254:41	10	compression
LEAF_NODE	254:41	254:41	11	compression
LEAF_NODE	254:52	254:52	9	)
LEAF_NODE	254:53	254:53	7	;
SELECTION	255:2	255:23	6	
KEYWORD	255:2	255:2	7	switch
LEAF_NODE	255:2	255:2	8	switch
LEAF_NODE	255:9	255:9	7	(
CONDITION	255:10	255:10	7	compression
EXPR	255:10	255:10	8	compression
FIELD	255:10	255:10	9	compression
LEAF_NODE	255:10	255:10	10	compression
LEAF_NODE	255:21	255:21	7	)
STATEMENTS	255:23	261:2	7	
LEAF_NODE	255:23	255:23	8	{
STATEMENTS	256:2	260:3	8	
LABEL	256:2	256:22	9	case COMPRESSION_LZW :
LEAF_NODE	256:2	256:2	10	case
LEAF_NODE	256:7	256:7	10	COMPRESSION_LZW
LEAF_NODE	256:22	256:22	10	:
LABEL	257:2	257:26	9	case COMPRESSION_DEFLATE :
LEAF_NODE	257:2	257:2	10	case
LEAF_NODE	257:7	257:7	10	COMPRESSION_DEFLATE
LEAF_NODE	257:26	257:26	10	:
SELECTION	258:3	259:4	9	
KEYWORD	258:3	258:3	10	if
LEAF_NODE	258:3	258:3	11	if
LEAF_NODE	258:6	258:6	10	(
CONDITION	258:7	258:7	10	predictor != 0
EXPR	258:7	258:20	11	predictor != 0
FIELD	258:7	258:7	12	predictor
LEAF_NODE	258:7	258:7	13	predictor
EQ_OPERATOR	258:17	258:17	12	!=
LEAF_NODE	258:17	258:17	13	!=
FIELD	258:20	258:20	12	0
LEAF_NODE	258:20	258:20	13	0
LEAF_NODE	258:21	258:21	10	)
STATEMENTS	259:4	259:4	10	
EXPR_STATEMENT	259:4	259:51	11	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor ) ;
EXPR	259:4	259:4	12	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	259:4	259:50	13	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
CALLEE	259:4	259:4	14	TIFFSetField
LEAF_NODE	259:4	259:4	15	TIFFSetField
LEAF_NODE	259:16	259:16	14	(
ARGUMENT	259:17	259:17	14	out
FIELD	259:17	259:17	15	out
LEAF_NODE	259:17	259:17	16	out
LEAF_NODE	259:20	259:20	14	,
ARGUMENT	259:22	259:22	14	TIFFTAG_PREDICTOR
FIELD	259:22	259:22	15	TIFFTAG_PREDICTOR
LEAF_NODE	259:22	259:22	16	TIFFTAG_PREDICTOR
LEAF_NODE	259:39	259:39	14	,
ARGUMENT	259:41	259:41	14	predictor
FIELD	259:41	259:41	15	predictor
LEAF_NODE	259:41	259:41	16	predictor
LEAF_NODE	259:50	259:50	14	)
LEAF_NODE	259:51	259:51	12	;
JUMP_STATEMENT	260:3	260:8	9	break DESTINATION ;
KEYWORD	260:3	260:3	10	break
LEAF_NODE	260:3	260:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	260:8	260:8	10	;
LEAF_NODE	261:2	261:2	8	}
LEAF_NODE	262:1	262:1	5	}
SELECTION	262:3	263:2	3	
KEYWORD	262:3	262:3	4	else
LEAF_NODE	262:3	262:3	5	else
STATEMENTS	263:2	263:2	4	
EXPR_STATEMENT	263:2	263:45	5	CopyField ( TIFFTAG_COMPRESSION , compression ) ;
EXPR	263:2	263:2	6	CopyField ( TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	263:2	263:44	7	CopyField ( TIFFTAG_COMPRESSION , compression )
CALLEE	263:2	263:2	8	CopyField
LEAF_NODE	263:2	263:2	9	CopyField
LEAF_NODE	263:11	263:11	8	(
ARGUMENT	263:12	263:12	8	TIFFTAG_COMPRESSION
FIELD	263:12	263:12	9	TIFFTAG_COMPRESSION
LEAF_NODE	263:12	263:12	10	TIFFTAG_COMPRESSION
LEAF_NODE	263:31	263:31	8	,
ARGUMENT	263:33	263:33	8	compression
FIELD	263:33	263:33	9	compression
LEAF_NODE	263:33	263:33	10	compression
LEAF_NODE	263:44	263:44	8	)
LEAF_NODE	263:45	263:45	6	;
EXPR_STATEMENT	264:1	264:67	3	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , ( short ) PHOTOMETRIC_PALETTE ) ;
EXPR	264:1	264:1	4	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , ( short ) PHOTOMETRIC_PALETTE )
FUNCTION_CALL	264:1	264:66	5	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , ( short ) PHOTOMETRIC_PALETTE )
CALLEE	264:1	264:1	6	TIFFSetField
LEAF_NODE	264:1	264:1	7	TIFFSetField
LEAF_NODE	264:13	264:13	6	(
ARGUMENT	264:14	264:14	6	out
FIELD	264:14	264:14	7	out
LEAF_NODE	264:14	264:14	8	out
LEAF_NODE	264:17	264:17	6	,
ARGUMENT	264:19	264:19	6	TIFFTAG_PHOTOMETRIC
FIELD	264:19	264:19	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	264:19	264:19	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	264:38	264:38	6	,
ARGUMENT	264:40	264:47	6	( short ) PHOTOMETRIC_PALETTE
LEAF_NODE	264:40	264:40	7	(
TYPE_NAME	264:41	264:41	7	short
LEAF_NODE	264:41	264:41	8	short
LEAF_NODE	264:46	264:46	7	)
FIELD	264:47	264:47	7	PHOTOMETRIC_PALETTE
LEAF_NODE	264:47	264:47	8	PHOTOMETRIC_PALETTE
LEAF_NODE	264:66	264:66	6	)
LEAF_NODE	264:67	264:67	4	;
EXPR_STATEMENT	265:1	265:39	3	CopyField ( TIFFTAG_ORIENTATION , shortv ) ;
EXPR	265:1	265:1	4	CopyField ( TIFFTAG_ORIENTATION , shortv )
FUNCTION_CALL	265:1	265:38	5	CopyField ( TIFFTAG_ORIENTATION , shortv )
CALLEE	265:1	265:1	6	CopyField
LEAF_NODE	265:1	265:1	7	CopyField
LEAF_NODE	265:10	265:10	6	(
ARGUMENT	265:11	265:11	6	TIFFTAG_ORIENTATION
FIELD	265:11	265:11	7	TIFFTAG_ORIENTATION
LEAF_NODE	265:11	265:11	8	TIFFTAG_ORIENTATION
LEAF_NODE	265:30	265:30	6	,
ARGUMENT	265:32	265:32	6	shortv
FIELD	265:32	265:32	7	shortv
LEAF_NODE	265:32	265:32	8	shortv
LEAF_NODE	265:38	265:38	6	)
LEAF_NODE	265:39	265:39	4	;
EXPR_STATEMENT	266:1	266:53	3	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , ( short ) 1 ) ;
EXPR	266:1	266:1	4	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , ( short ) 1 )
FUNCTION_CALL	266:1	266:52	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , ( short ) 1 )
CALLEE	266:1	266:1	6	TIFFSetField
LEAF_NODE	266:1	266:1	7	TIFFSetField
LEAF_NODE	266:13	266:13	6	(
ARGUMENT	266:14	266:14	6	out
FIELD	266:14	266:14	7	out
LEAF_NODE	266:14	266:14	8	out
LEAF_NODE	266:17	266:17	6	,
ARGUMENT	266:19	266:19	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	266:19	266:19	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	266:19	266:19	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	266:42	266:42	6	,
ARGUMENT	266:44	266:51	6	( short ) 1
LEAF_NODE	266:44	266:44	7	(
TYPE_NAME	266:45	266:45	7	short
LEAF_NODE	266:45	266:45	8	short
LEAF_NODE	266:50	266:50	7	)
FIELD	266:51	266:51	7	1
LEAF_NODE	266:51	266:51	8	1
LEAF_NODE	266:52	266:52	6	)
LEAF_NODE	266:53	266:53	4	;
EXPR_STATEMENT	267:1	267:40	3	CopyField ( TIFFTAG_PLANARCONFIG , shortv ) ;
EXPR	267:1	267:1	4	CopyField ( TIFFTAG_PLANARCONFIG , shortv )
FUNCTION_CALL	267:1	267:39	5	CopyField ( TIFFTAG_PLANARCONFIG , shortv )
CALLEE	267:1	267:1	6	CopyField
LEAF_NODE	267:1	267:1	7	CopyField
LEAF_NODE	267:10	267:10	6	(
ARGUMENT	267:11	267:11	6	TIFFTAG_PLANARCONFIG
FIELD	267:11	267:11	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	267:11	267:11	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	267:31	267:31	6	,
ARGUMENT	267:33	267:33	6	shortv
FIELD	267:33	267:33	7	shortv
LEAF_NODE	267:33	267:33	8	shortv
LEAF_NODE	267:39	267:39	6	)
LEAF_NODE	267:40	267:40	4	;
EXPR_STATEMENT	268:1	269:45	3	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) ) ;
EXPR	268:1	268:1	4	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) )
FUNCTION_CALL	268:1	269:44	5	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) )
CALLEE	268:1	268:1	6	TIFFSetField
LEAF_NODE	268:1	268:1	7	TIFFSetField
LEAF_NODE	268:13	268:13	6	(
ARGUMENT	268:14	268:14	6	out
FIELD	268:14	268:14	7	out
LEAF_NODE	268:14	268:14	8	out
LEAF_NODE	268:17	268:17	6	,
ARGUMENT	268:19	268:19	6	TIFFTAG_ROWSPERSTRIP
FIELD	268:19	268:19	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	268:19	268:19	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	268:39	268:39	6	,
ARGUMENT	269:5	269:5	6	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	269:5	269:43	7	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	269:5	269:5	8	TIFFDefaultStripSize
LEAF_NODE	269:5	269:5	9	TIFFDefaultStripSize
LEAF_NODE	269:25	269:25	8	(
ARGUMENT	269:26	269:26	8	out
FIELD	269:26	269:26	9	out
LEAF_NODE	269:26	269:26	10	out
LEAF_NODE	269:29	269:29	8	,
ARGUMENT	269:31	269:31	8	rowsperstrip
FIELD	269:31	269:31	9	rowsperstrip
LEAF_NODE	269:31	269:31	10	rowsperstrip
LEAF_NODE	269:43	269:43	8	)
LEAF_NODE	269:44	269:44	6	)
LEAF_NODE	269:45	269:45	4	;
EXPR_STATEMENT	270:1	270:42	3	CopyField ( TIFFTAG_MINSAMPLEVALUE , shortv ) ;
EXPR	270:1	270:1	4	CopyField ( TIFFTAG_MINSAMPLEVALUE , shortv )
FUNCTION_CALL	270:1	270:41	5	CopyField ( TIFFTAG_MINSAMPLEVALUE , shortv )
CALLEE	270:1	270:1	6	CopyField
LEAF_NODE	270:1	270:1	7	CopyField
LEAF_NODE	270:10	270:10	6	(
ARGUMENT	270:11	270:11	6	TIFFTAG_MINSAMPLEVALUE
FIELD	270:11	270:11	7	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	270:11	270:11	8	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	270:33	270:33	6	,
ARGUMENT	270:35	270:35	6	shortv
FIELD	270:35	270:35	7	shortv
LEAF_NODE	270:35	270:35	8	shortv
LEAF_NODE	270:41	270:41	6	)
LEAF_NODE	270:42	270:42	4	;
EXPR_STATEMENT	271:1	271:42	3	CopyField ( TIFFTAG_MAXSAMPLEVALUE , shortv ) ;
EXPR	271:1	271:1	4	CopyField ( TIFFTAG_MAXSAMPLEVALUE , shortv )
FUNCTION_CALL	271:1	271:41	5	CopyField ( TIFFTAG_MAXSAMPLEVALUE , shortv )
CALLEE	271:1	271:1	6	CopyField
LEAF_NODE	271:1	271:1	7	CopyField
LEAF_NODE	271:10	271:10	6	(
ARGUMENT	271:11	271:11	6	TIFFTAG_MAXSAMPLEVALUE
FIELD	271:11	271:11	7	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	271:11	271:11	8	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	271:33	271:33	6	,
ARGUMENT	271:35	271:35	6	shortv
FIELD	271:35	271:35	7	shortv
LEAF_NODE	271:35	271:35	8	shortv
LEAF_NODE	271:41	271:41	6	)
LEAF_NODE	271:42	271:42	4	;
EXPR_STATEMENT	272:1	272:42	3	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv ) ;
EXPR	272:1	272:1	4	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv )
FUNCTION_CALL	272:1	272:41	5	CopyField ( TIFFTAG_RESOLUTIONUNIT , shortv )
CALLEE	272:1	272:1	6	CopyField
LEAF_NODE	272:1	272:1	7	CopyField
LEAF_NODE	272:10	272:10	6	(
ARGUMENT	272:11	272:11	6	TIFFTAG_RESOLUTIONUNIT
FIELD	272:11	272:11	7	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	272:11	272:11	8	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	272:33	272:33	6	,
ARGUMENT	272:35	272:35	6	shortv
FIELD	272:35	272:35	7	shortv
LEAF_NODE	272:35	272:35	8	shortv
LEAF_NODE	272:41	272:41	6	)
LEAF_NODE	272:42	272:42	4	;
EXPR_STATEMENT	273:1	273:39	3	CopyField ( TIFFTAG_XRESOLUTION , floatv ) ;
EXPR	273:1	273:1	4	CopyField ( TIFFTAG_XRESOLUTION , floatv )
FUNCTION_CALL	273:1	273:38	5	CopyField ( TIFFTAG_XRESOLUTION , floatv )
CALLEE	273:1	273:1	6	CopyField
LEAF_NODE	273:1	273:1	7	CopyField
LEAF_NODE	273:10	273:10	6	(
ARGUMENT	273:11	273:11	6	TIFFTAG_XRESOLUTION
FIELD	273:11	273:11	7	TIFFTAG_XRESOLUTION
LEAF_NODE	273:11	273:11	8	TIFFTAG_XRESOLUTION
LEAF_NODE	273:30	273:30	6	,
ARGUMENT	273:32	273:32	6	floatv
FIELD	273:32	273:32	7	floatv
LEAF_NODE	273:32	273:32	8	floatv
LEAF_NODE	273:38	273:38	6	)
LEAF_NODE	273:39	273:39	4	;
EXPR_STATEMENT	274:1	274:39	3	CopyField ( TIFFTAG_YRESOLUTION , floatv ) ;
EXPR	274:1	274:1	4	CopyField ( TIFFTAG_YRESOLUTION , floatv )
FUNCTION_CALL	274:1	274:38	5	CopyField ( TIFFTAG_YRESOLUTION , floatv )
CALLEE	274:1	274:1	6	CopyField
LEAF_NODE	274:1	274:1	7	CopyField
LEAF_NODE	274:10	274:10	6	(
ARGUMENT	274:11	274:11	6	TIFFTAG_YRESOLUTION
FIELD	274:11	274:11	7	TIFFTAG_YRESOLUTION
LEAF_NODE	274:11	274:11	8	TIFFTAG_YRESOLUTION
LEAF_NODE	274:30	274:30	6	,
ARGUMENT	274:32	274:32	6	floatv
FIELD	274:32	274:32	7	floatv
LEAF_NODE	274:32	274:32	8	floatv
LEAF_NODE	274:38	274:38	6	)
LEAF_NODE	274:39	274:39	4	;
EXPR_STATEMENT	275:1	275:37	3	CopyField ( TIFFTAG_XPOSITION , floatv ) ;
EXPR	275:1	275:1	4	CopyField ( TIFFTAG_XPOSITION , floatv )
FUNCTION_CALL	275:1	275:36	5	CopyField ( TIFFTAG_XPOSITION , floatv )
CALLEE	275:1	275:1	6	CopyField
LEAF_NODE	275:1	275:1	7	CopyField
LEAF_NODE	275:10	275:10	6	(
ARGUMENT	275:11	275:11	6	TIFFTAG_XPOSITION
FIELD	275:11	275:11	7	TIFFTAG_XPOSITION
LEAF_NODE	275:11	275:11	8	TIFFTAG_XPOSITION
LEAF_NODE	275:28	275:28	6	,
ARGUMENT	275:30	275:30	6	floatv
FIELD	275:30	275:30	7	floatv
LEAF_NODE	275:30	275:30	8	floatv
LEAF_NODE	275:36	275:36	6	)
LEAF_NODE	275:37	275:37	4	;
EXPR_STATEMENT	276:1	276:37	3	CopyField ( TIFFTAG_YPOSITION , floatv ) ;
EXPR	276:1	276:1	4	CopyField ( TIFFTAG_YPOSITION , floatv )
FUNCTION_CALL	276:1	276:36	5	CopyField ( TIFFTAG_YPOSITION , floatv )
CALLEE	276:1	276:1	6	CopyField
LEAF_NODE	276:1	276:1	7	CopyField
LEAF_NODE	276:10	276:10	6	(
ARGUMENT	276:11	276:11	6	TIFFTAG_YPOSITION
FIELD	276:11	276:11	7	TIFFTAG_YPOSITION
LEAF_NODE	276:11	276:11	8	TIFFTAG_YPOSITION
LEAF_NODE	276:28	276:28	6	,
ARGUMENT	276:30	276:30	6	floatv
FIELD	276:30	276:30	7	floatv
LEAF_NODE	276:30	276:30	8	floatv
LEAF_NODE	276:36	276:36	6	)
LEAF_NODE	276:37	276:37	4	;
SELECTION	278:1	279:2	3	
KEYWORD	278:1	278:1	4	if
LEAF_NODE	278:1	278:1	5	if
LEAF_NODE	278:4	278:4	4	(
CONDITION	278:5	278:5	4	dither
EXPR	278:5	278:5	5	dither
FIELD	278:5	278:5	6	dither
LEAF_NODE	278:5	278:5	7	dither
LEAF_NODE	278:11	278:11	4	)
STATEMENTS	279:2	279:2	4	
EXPR_STATEMENT	279:2	279:25	5	quant_fsdither ( in , out ) ;
EXPR	279:2	279:2	6	quant_fsdither ( in , out )
FUNCTION_CALL	279:2	279:24	7	quant_fsdither ( in , out )
CALLEE	279:2	279:2	8	quant_fsdither
LEAF_NODE	279:2	279:2	9	quant_fsdither
LEAF_NODE	279:16	279:16	8	(
ARGUMENT	279:17	279:17	8	in
FIELD	279:17	279:17	9	in
LEAF_NODE	279:17	279:17	10	in
LEAF_NODE	279:19	279:19	8	,
ARGUMENT	279:21	279:21	8	out
FIELD	279:21	279:21	9	out
LEAF_NODE	279:21	279:21	10	out
LEAF_NODE	279:24	279:24	8	)
LEAF_NODE	279:25	279:25	6	;
SELECTION	280:1	281:2	3	
KEYWORD	280:1	280:1	4	else
LEAF_NODE	280:1	280:1	5	else
STATEMENTS	281:2	281:2	4	
EXPR_STATEMENT	281:2	281:16	5	quant ( in , out ) ;
EXPR	281:2	281:2	6	quant ( in , out )
FUNCTION_CALL	281:2	281:15	7	quant ( in , out )
CALLEE	281:2	281:2	8	quant
LEAF_NODE	281:2	281:2	9	quant
LEAF_NODE	281:7	281:7	8	(
ARGUMENT	281:8	281:8	8	in
FIELD	281:8	281:8	9	in
LEAF_NODE	281:8	281:8	10	in
LEAF_NODE	281:10	281:10	8	,
ARGUMENT	281:12	281:12	8	out
FIELD	281:12	281:12	9	out
LEAF_NODE	281:12	281:12	10	out
LEAF_NODE	281:15	281:15	8	)
LEAF_NODE	281:16	281:16	6	;
ITERATION	286:1	286:37	3	
KEYWORD	286:1	286:1	4	for
LEAF_NODE	286:1	286:1	5	for
LEAF_NODE	286:5	286:5	4	(
FOR_INIT	286:6	286:11	4	i = 0 ;
EXPR	286:6	286:6	5	i = 0
ASSIGN	286:6	286:10	6	i = 0
LVAL	286:6	286:6	7	i
FIELD	286:6	286:6	8	i
LEAF_NODE	286:6	286:6	9	i
ASSIGN_OP	286:8	286:8	7	=
LEAF_NODE	286:8	286:8	8	=
RVAL	286:10	286:10	7	0
FIELD	286:10	286:10	8	0
LEAF_NODE	286:10	286:10	9	0
LEAF_NODE	286:11	286:11	5	;
CONDITION	286:13	286:13	4	i < MAX_CMAP_SIZE
EXPR	286:13	286:17	5	i < MAX_CMAP_SIZE
FIELD	286:13	286:13	6	i
LEAF_NODE	286:13	286:13	7	i
REL_OPERATOR	286:15	286:15	6	<
LEAF_NODE	286:15	286:15	7	<
FIELD	286:17	286:17	6	MAX_CMAP_SIZE
LEAF_NODE	286:17	286:17	7	MAX_CMAP_SIZE
LEAF_NODE	286:30	286:30	4	;
FOR_EXPR	286:32	286:32	4	++ i
EXPR	286:32	286:34	5	++ i
LEAF_NODE	286:32	286:32	6	++
FIELD	286:34	286:34	6	i
LEAF_NODE	286:34	286:34	7	i
LEAF_NODE	286:35	286:35	4	)
STATEMENTS	286:37	290:1	4	
LEAF_NODE	286:37	286:37	5	{
STATEMENTS	287:2	289:2	5	
EXPR_STATEMENT	287:2	287:22	6	rm [ i ] = SCALE ( rm [ i ] ) ;
EXPR	287:2	287:2	7	rm [ i ] = SCALE ( rm [ i ] )
ASSIGN	287:2	287:10	8	rm [ i ] = SCALE ( rm [ i ] )
LVAL	287:2	287:2	9	rm [ i ]
FIELD	287:2	287:6	10	rm [ i ]
LEAF_NODE	287:2	287:2	11	rm
LEAF_NODE	287:4	287:4	11	[
EXPR	287:5	287:5	11	i
FIELD	287:5	287:5	12	i
LEAF_NODE	287:5	287:5	13	i
LEAF_NODE	287:6	287:6	11	]
ASSIGN_OP	287:8	287:8	9	=
LEAF_NODE	287:8	287:8	10	=
RVAL	287:10	287:10	9	SCALE ( rm [ i ] )
FUNCTION_CALL	287:10	287:21	10	SCALE ( rm [ i ] )
CALLEE	287:10	287:10	11	SCALE
LEAF_NODE	287:10	287:10	12	SCALE
LEAF_NODE	287:15	287:15	11	(
ARGUMENT	287:16	287:16	11	rm [ i ]
FIELD	287:16	287:20	12	rm [ i ]
LEAF_NODE	287:16	287:16	13	rm
LEAF_NODE	287:18	287:18	13	[
EXPR	287:19	287:19	13	i
FIELD	287:19	287:19	14	i
LEAF_NODE	287:19	287:19	15	i
LEAF_NODE	287:20	287:20	13	]
LEAF_NODE	287:21	287:21	11	)
LEAF_NODE	287:22	287:22	7	;
EXPR_STATEMENT	288:2	288:22	6	gm [ i ] = SCALE ( gm [ i ] ) ;
EXPR	288:2	288:2	7	gm [ i ] = SCALE ( gm [ i ] )
ASSIGN	288:2	288:10	8	gm [ i ] = SCALE ( gm [ i ] )
LVAL	288:2	288:2	9	gm [ i ]
FIELD	288:2	288:6	10	gm [ i ]
LEAF_NODE	288:2	288:2	11	gm
LEAF_NODE	288:4	288:4	11	[
EXPR	288:5	288:5	11	i
FIELD	288:5	288:5	12	i
LEAF_NODE	288:5	288:5	13	i
LEAF_NODE	288:6	288:6	11	]
ASSIGN_OP	288:8	288:8	9	=
LEAF_NODE	288:8	288:8	10	=
RVAL	288:10	288:10	9	SCALE ( gm [ i ] )
FUNCTION_CALL	288:10	288:21	10	SCALE ( gm [ i ] )
CALLEE	288:10	288:10	11	SCALE
LEAF_NODE	288:10	288:10	12	SCALE
LEAF_NODE	288:15	288:15	11	(
ARGUMENT	288:16	288:16	11	gm [ i ]
FIELD	288:16	288:20	12	gm [ i ]
LEAF_NODE	288:16	288:16	13	gm
LEAF_NODE	288:18	288:18	13	[
EXPR	288:19	288:19	13	i
FIELD	288:19	288:19	14	i
LEAF_NODE	288:19	288:19	15	i
LEAF_NODE	288:20	288:20	13	]
LEAF_NODE	288:21	288:21	11	)
LEAF_NODE	288:22	288:22	7	;
EXPR_STATEMENT	289:2	289:22	6	bm [ i ] = SCALE ( bm [ i ] ) ;
EXPR	289:2	289:2	7	bm [ i ] = SCALE ( bm [ i ] )
ASSIGN	289:2	289:10	8	bm [ i ] = SCALE ( bm [ i ] )
LVAL	289:2	289:2	9	bm [ i ]
FIELD	289:2	289:6	10	bm [ i ]
LEAF_NODE	289:2	289:2	11	bm
LEAF_NODE	289:4	289:4	11	[
EXPR	289:5	289:5	11	i
FIELD	289:5	289:5	12	i
LEAF_NODE	289:5	289:5	13	i
LEAF_NODE	289:6	289:6	11	]
ASSIGN_OP	289:8	289:8	9	=
LEAF_NODE	289:8	289:8	10	=
RVAL	289:10	289:10	9	SCALE ( bm [ i ] )
FUNCTION_CALL	289:10	289:21	10	SCALE ( bm [ i ] )
CALLEE	289:10	289:10	11	SCALE
LEAF_NODE	289:10	289:10	12	SCALE
LEAF_NODE	289:15	289:15	11	(
ARGUMENT	289:16	289:16	11	bm [ i ]
FIELD	289:16	289:20	12	bm [ i ]
LEAF_NODE	289:16	289:16	13	bm
LEAF_NODE	289:18	289:18	13	[
EXPR	289:19	289:19	13	i
FIELD	289:19	289:19	14	i
LEAF_NODE	289:19	289:19	15	i
LEAF_NODE	289:20	289:20	13	]
LEAF_NODE	289:21	289:21	11	)
LEAF_NODE	289:22	289:22	7	;
LEAF_NODE	290:1	290:1	5	}
EXPR_STATEMENT	291:1	291:48	3	TIFFSetField ( out , TIFFTAG_COLORMAP , rm , gm , bm ) ;
EXPR	291:1	291:1	4	TIFFSetField ( out , TIFFTAG_COLORMAP , rm , gm , bm )
FUNCTION_CALL	291:1	291:47	5	TIFFSetField ( out , TIFFTAG_COLORMAP , rm , gm , bm )
CALLEE	291:1	291:1	6	TIFFSetField
LEAF_NODE	291:1	291:1	7	TIFFSetField
LEAF_NODE	291:13	291:13	6	(
ARGUMENT	291:14	291:14	6	out
FIELD	291:14	291:14	7	out
LEAF_NODE	291:14	291:14	8	out
LEAF_NODE	291:17	291:17	6	,
ARGUMENT	291:19	291:19	6	TIFFTAG_COLORMAP
FIELD	291:19	291:19	7	TIFFTAG_COLORMAP
LEAF_NODE	291:19	291:19	8	TIFFTAG_COLORMAP
LEAF_NODE	291:35	291:35	6	,
ARGUMENT	291:37	291:37	6	rm
FIELD	291:37	291:37	7	rm
LEAF_NODE	291:37	291:37	8	rm
LEAF_NODE	291:39	291:39	6	,
ARGUMENT	291:41	291:41	6	gm
FIELD	291:41	291:41	7	gm
LEAF_NODE	291:41	291:41	8	gm
LEAF_NODE	291:43	291:43	6	,
ARGUMENT	291:45	291:45	6	bm
FIELD	291:45	291:45	7	bm
LEAF_NODE	291:45	291:45	8	bm
LEAF_NODE	291:47	291:47	6	)
LEAF_NODE	291:48	291:48	4	;
EXPR_STATEMENT	292:1	292:22	3	( void ) TIFFClose ( out ) ;
EXPR	292:1	292:8	4	( void ) TIFFClose ( out )
LEAF_NODE	292:1	292:1	5	(
TYPE_NAME	292:2	292:2	5	void
LEAF_NODE	292:2	292:2	6	void
LEAF_NODE	292:6	292:6	5	)
FUNCTION_CALL	292:8	292:21	5	TIFFClose ( out )
CALLEE	292:8	292:8	6	TIFFClose
LEAF_NODE	292:8	292:8	7	TIFFClose
LEAF_NODE	292:17	292:17	6	(
ARGUMENT	292:18	292:18	6	out
FIELD	292:18	292:18	7	out
LEAF_NODE	292:18	292:18	8	out
LEAF_NODE	292:21	292:21	6	)
LEAF_NODE	292:22	292:22	4	;
JUMP_STATEMENT	293:1	293:11	3	return ( 0 ) ;
KEYWORD	293:1	293:1	4	return
LEAF_NODE	293:1	293:1	5	return
DESTINATION	293:8	293:8	4	( 0 )
EXPR	293:8	293:10	5	( 0 )
LEAF_NODE	293:8	293:8	6	(
FIELD	293:9	293:9	6	0
LEAF_NODE	293:9	293:9	7	0
LEAF_NODE	293:10	293:10	6	)
LEAF_NODE	293:11	293:11	4	;
LEAF_NODE	294:0	294:0	2	}
FUNCTION_DEF	296:0	316:0	1	
RETURN_TYPE	296:0	296:7	2	static int
LEAF_NODE	296:0	296:0	3	static
TYPE_NAME	296:7	296:7	3	int
LEAF_NODE	296:7	296:7	4	int
FUNCTION_NAME	297:0	297:0	2	processCompressOptions
LEAF_NODE	297:0	297:0	3	processCompressOptions
PARAMETER_LIST	297:22	297:32	2	( char * opt )
LEAF_NODE	297:22	297:22	3	(
PARAMETER_DECL	297:23	297:29	3	char * opt
TYPE	297:23	297:27	4	char *
TYPE_NAME	297:23	297:23	5	char
LEAF_NODE	297:23	297:23	6	char
POINTER	297:27	297:27	5	*
LEAF_NODE	297:27	297:27	6	*
NAME	297:29	297:29	4	opt
LEAF_NODE	297:29	297:29	5	opt
LEAF_NODE	297:32	297:32	3	)
LEAF_NODE	298:0	298:0	2	{
STATEMENTS	299:1	315:1	2	
SELECTION	299:1	300:2	3	
KEYWORD	299:1	299:1	4	if
LEAF_NODE	299:1	299:1	5	if
LEAF_NODE	299:4	299:4	4	(
CONDITION	299:5	299:5	4	streq ( opt , "none" )
EXPR	299:5	299:5	5	streq ( opt , "none" )
FUNCTION_CALL	299:5	299:22	6	streq ( opt , "none" )
CALLEE	299:5	299:5	7	streq
LEAF_NODE	299:5	299:5	8	streq
LEAF_NODE	299:10	299:10	7	(
ARGUMENT	299:11	299:11	7	opt
FIELD	299:11	299:11	8	opt
LEAF_NODE	299:11	299:11	9	opt
LEAF_NODE	299:14	299:14	7	,
ARGUMENT	299:16	299:16	7	"none"
FIELD	299:16	299:16	8	"none"
LEAF_NODE	299:16	299:16	9	"none"
LEAF_NODE	299:22	299:22	7	)
LEAF_NODE	299:23	299:23	4	)
STATEMENTS	300:2	300:2	4	
EXPR_STATEMENT	300:2	300:32	5	compression = COMPRESSION_NONE ;
EXPR	300:2	300:2	6	compression = COMPRESSION_NONE
ASSIGN	300:2	300:16	7	compression = COMPRESSION_NONE
LVAL	300:2	300:2	8	compression
FIELD	300:2	300:2	9	compression
LEAF_NODE	300:2	300:2	10	compression
ASSIGN_OP	300:14	300:14	8	=
LEAF_NODE	300:14	300:14	9	=
RVAL	300:16	300:16	8	COMPRESSION_NONE
FIELD	300:16	300:16	9	COMPRESSION_NONE
LEAF_NODE	300:16	300:16	10	COMPRESSION_NONE
LEAF_NODE	300:32	300:32	6	;
SELECTION	301:1	301:6	3	
KEYWORD	301:1	301:1	4	else
LEAF_NODE	301:1	301:1	5	else
STATEMENTS	301:6	301:6	4	
SELECTION	301:6	302:2	5	
KEYWORD	301:6	301:6	6	if
LEAF_NODE	301:6	301:6	7	if
LEAF_NODE	301:9	301:9	6	(
CONDITION	301:10	301:10	6	streq ( opt , "packbits" )
EXPR	301:10	301:10	7	streq ( opt , "packbits" )
FUNCTION_CALL	301:10	301:31	8	streq ( opt , "packbits" )
CALLEE	301:10	301:10	9	streq
LEAF_NODE	301:10	301:10	10	streq
LEAF_NODE	301:15	301:15	9	(
ARGUMENT	301:16	301:16	9	opt
FIELD	301:16	301:16	10	opt
LEAF_NODE	301:16	301:16	11	opt
LEAF_NODE	301:19	301:19	9	,
ARGUMENT	301:21	301:21	9	"packbits"
FIELD	301:21	301:21	10	"packbits"
LEAF_NODE	301:21	301:21	11	"packbits"
LEAF_NODE	301:31	301:31	9	)
LEAF_NODE	301:32	301:32	6	)
STATEMENTS	302:2	302:2	6	
EXPR_STATEMENT	302:2	302:36	7	compression = COMPRESSION_PACKBITS ;
EXPR	302:2	302:2	8	compression = COMPRESSION_PACKBITS
ASSIGN	302:2	302:16	9	compression = COMPRESSION_PACKBITS
LVAL	302:2	302:2	10	compression
FIELD	302:2	302:2	11	compression
LEAF_NODE	302:2	302:2	12	compression
ASSIGN_OP	302:14	302:14	10	=
LEAF_NODE	302:14	302:14	11	=
RVAL	302:16	302:16	10	COMPRESSION_PACKBITS
FIELD	302:16	302:16	11	COMPRESSION_PACKBITS
LEAF_NODE	302:16	302:16	12	COMPRESSION_PACKBITS
LEAF_NODE	302:36	302:36	8	;
SELECTION	303:1	303:6	3	
KEYWORD	303:1	303:1	4	else
LEAF_NODE	303:1	303:1	5	else
STATEMENTS	303:6	303:6	4	
SELECTION	303:6	303:33	5	
KEYWORD	303:6	303:6	6	if
LEAF_NODE	303:6	303:6	7	if
LEAF_NODE	303:9	303:9	6	(
CONDITION	303:10	303:10	6	strneq ( opt , "lzw" , 3 )
EXPR	303:10	303:10	7	strneq ( opt , "lzw" , 3 )
FUNCTION_CALL	303:10	303:30	8	strneq ( opt , "lzw" , 3 )
CALLEE	303:10	303:10	9	strneq
LEAF_NODE	303:10	303:10	10	strneq
LEAF_NODE	303:16	303:16	9	(
ARGUMENT	303:17	303:17	9	opt
FIELD	303:17	303:17	10	opt
LEAF_NODE	303:17	303:17	11	opt
LEAF_NODE	303:20	303:20	9	,
ARGUMENT	303:22	303:22	9	"lzw"
FIELD	303:22	303:22	10	"lzw"
LEAF_NODE	303:22	303:22	11	"lzw"
LEAF_NODE	303:27	303:27	9	,
ARGUMENT	303:29	303:29	9	3
FIELD	303:29	303:29	10	3
LEAF_NODE	303:29	303:29	11	3
LEAF_NODE	303:30	303:30	9	)
LEAF_NODE	303:31	303:31	6	)
STATEMENTS	303:33	308:1	6	
LEAF_NODE	303:33	303:33	7	{
STATEMENTS	304:2	307:2	7	
SIMPLE_DECL	304:2	304:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	304:2	304:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	304:2	304:6	10	char *
TYPE_NAME	304:2	304:2	11	char
LEAF_NODE	304:2	304:2	12	char
POINTER	304:6	304:6	11	*
LEAF_NODE	304:6	304:6	12	*
NAME	304:8	304:8	10	cp
LEAF_NODE	304:8	304:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	304:8	304:8	10	cp = strchr ( opt , ':' )
ASSIGN	304:8	304:13	11	cp = strchr ( opt , ':' )
LVAL	304:8	304:8	12	cp
NAME	304:8	304:8	13	cp
LEAF_NODE	304:8	304:8	14	cp
ASSIGN_OP	304:11	304:11	12	=
LEAF_NODE	304:11	304:11	13	=
RVAL	304:13	304:13	12	strchr ( opt , ':' )
FUNCTION_CALL	304:13	304:28	13	strchr ( opt , ':' )
CALLEE	304:13	304:13	14	strchr
LEAF_NODE	304:13	304:13	15	strchr
LEAF_NODE	304:19	304:19	14	(
ARGUMENT	304:20	304:20	14	opt
FIELD	304:20	304:20	15	opt
LEAF_NODE	304:20	304:20	16	opt
LEAF_NODE	304:23	304:23	14	,
ARGUMENT	304:25	304:25	14	':'
FIELD	304:25	304:25	15	':'
LEAF_NODE	304:25	304:25	16	':'
LEAF_NODE	304:28	304:28	14	)
LEAF_NODE	304:29	304:29	9	;
SELECTION	305:2	306:3	8	
KEYWORD	305:2	305:2	9	if
LEAF_NODE	305:2	305:2	10	if
LEAF_NODE	305:5	305:5	9	(
CONDITION	305:6	305:6	9	cp
EXPR	305:6	305:6	10	cp
FIELD	305:6	305:6	11	cp
LEAF_NODE	305:6	305:6	12	cp
LEAF_NODE	305:8	305:8	9	)
STATEMENTS	306:3	306:3	9	
EXPR_STATEMENT	306:3	306:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	306:3	306:3	11	predictor = atoi ( cp + 1 )
ASSIGN	306:3	306:15	12	predictor = atoi ( cp + 1 )
LVAL	306:3	306:3	13	predictor
FIELD	306:3	306:3	14	predictor
LEAF_NODE	306:3	306:3	15	predictor
ASSIGN_OP	306:13	306:13	13	=
LEAF_NODE	306:13	306:13	14	=
RVAL	306:15	306:15	13	atoi ( cp + 1 )
FUNCTION_CALL	306:15	306:24	14	atoi ( cp + 1 )
CALLEE	306:15	306:15	15	atoi
LEAF_NODE	306:15	306:15	16	atoi
LEAF_NODE	306:19	306:19	15	(
ARGUMENT	306:20	306:23	15	cp + 1
FIELD	306:20	306:20	16	cp
LEAF_NODE	306:20	306:20	17	cp
LEAF_NODE	306:22	306:22	16	+
FIELD	306:23	306:23	16	1
LEAF_NODE	306:23	306:23	17	1
LEAF_NODE	306:24	306:24	15	)
LEAF_NODE	306:25	306:25	11	;
EXPR_STATEMENT	307:2	307:31	8	compression = COMPRESSION_LZW ;
EXPR	307:2	307:2	9	compression = COMPRESSION_LZW
ASSIGN	307:2	307:16	10	compression = COMPRESSION_LZW
LVAL	307:2	307:2	11	compression
FIELD	307:2	307:2	12	compression
LEAF_NODE	307:2	307:2	13	compression
ASSIGN_OP	307:14	307:14	11	=
LEAF_NODE	307:14	307:14	12	=
RVAL	307:16	307:16	11	COMPRESSION_LZW
FIELD	307:16	307:16	12	COMPRESSION_LZW
LEAF_NODE	307:16	307:16	13	COMPRESSION_LZW
LEAF_NODE	307:31	307:31	9	;
LEAF_NODE	308:1	308:1	7	}
SELECTION	308:3	308:8	3	
KEYWORD	308:3	308:3	4	else
LEAF_NODE	308:3	308:3	5	else
STATEMENTS	308:8	308:8	4	
SELECTION	308:8	308:35	5	
KEYWORD	308:8	308:8	6	if
LEAF_NODE	308:8	308:8	7	if
LEAF_NODE	308:11	308:11	6	(
CONDITION	308:12	308:12	6	strneq ( opt , "zip" , 3 )
EXPR	308:12	308:12	7	strneq ( opt , "zip" , 3 )
FUNCTION_CALL	308:12	308:32	8	strneq ( opt , "zip" , 3 )
CALLEE	308:12	308:12	9	strneq
LEAF_NODE	308:12	308:12	10	strneq
LEAF_NODE	308:18	308:18	9	(
ARGUMENT	308:19	308:19	9	opt
FIELD	308:19	308:19	10	opt
LEAF_NODE	308:19	308:19	11	opt
LEAF_NODE	308:22	308:22	9	,
ARGUMENT	308:24	308:24	9	"zip"
FIELD	308:24	308:24	10	"zip"
LEAF_NODE	308:24	308:24	11	"zip"
LEAF_NODE	308:29	308:29	9	,
ARGUMENT	308:31	308:31	9	3
FIELD	308:31	308:31	10	3
LEAF_NODE	308:31	308:31	11	3
LEAF_NODE	308:32	308:32	9	)
LEAF_NODE	308:33	308:33	6	)
STATEMENTS	308:35	313:1	6	
LEAF_NODE	308:35	308:35	7	{
STATEMENTS	309:2	312:2	7	
SIMPLE_DECL	309:2	309:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	309:2	309:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	309:2	309:6	10	char *
TYPE_NAME	309:2	309:2	11	char
LEAF_NODE	309:2	309:2	12	char
POINTER	309:6	309:6	11	*
LEAF_NODE	309:6	309:6	12	*
NAME	309:8	309:8	10	cp
LEAF_NODE	309:8	309:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	309:8	309:8	10	cp = strchr ( opt , ':' )
ASSIGN	309:8	309:13	11	cp = strchr ( opt , ':' )
LVAL	309:8	309:8	12	cp
NAME	309:8	309:8	13	cp
LEAF_NODE	309:8	309:8	14	cp
ASSIGN_OP	309:11	309:11	12	=
LEAF_NODE	309:11	309:11	13	=
RVAL	309:13	309:13	12	strchr ( opt , ':' )
FUNCTION_CALL	309:13	309:28	13	strchr ( opt , ':' )
CALLEE	309:13	309:13	14	strchr
LEAF_NODE	309:13	309:13	15	strchr
LEAF_NODE	309:19	309:19	14	(
ARGUMENT	309:20	309:20	14	opt
FIELD	309:20	309:20	15	opt
LEAF_NODE	309:20	309:20	16	opt
LEAF_NODE	309:23	309:23	14	,
ARGUMENT	309:25	309:25	14	':'
FIELD	309:25	309:25	15	':'
LEAF_NODE	309:25	309:25	16	':'
LEAF_NODE	309:28	309:28	14	)
LEAF_NODE	309:29	309:29	9	;
SELECTION	310:2	311:3	8	
KEYWORD	310:2	310:2	9	if
LEAF_NODE	310:2	310:2	10	if
LEAF_NODE	310:5	310:5	9	(
CONDITION	310:6	310:6	9	cp
EXPR	310:6	310:6	10	cp
FIELD	310:6	310:6	11	cp
LEAF_NODE	310:6	310:6	12	cp
LEAF_NODE	310:8	310:8	9	)
STATEMENTS	311:3	311:3	9	
EXPR_STATEMENT	311:3	311:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	311:3	311:3	11	predictor = atoi ( cp + 1 )
ASSIGN	311:3	311:15	12	predictor = atoi ( cp + 1 )
LVAL	311:3	311:3	13	predictor
FIELD	311:3	311:3	14	predictor
LEAF_NODE	311:3	311:3	15	predictor
ASSIGN_OP	311:13	311:13	13	=
LEAF_NODE	311:13	311:13	14	=
RVAL	311:15	311:15	13	atoi ( cp + 1 )
FUNCTION_CALL	311:15	311:24	14	atoi ( cp + 1 )
CALLEE	311:15	311:15	15	atoi
LEAF_NODE	311:15	311:15	16	atoi
LEAF_NODE	311:19	311:19	15	(
ARGUMENT	311:20	311:23	15	cp + 1
FIELD	311:20	311:20	16	cp
LEAF_NODE	311:20	311:20	17	cp
LEAF_NODE	311:22	311:22	16	+
FIELD	311:23	311:23	16	1
LEAF_NODE	311:23	311:23	17	1
LEAF_NODE	311:24	311:24	15	)
LEAF_NODE	311:25	311:25	11	;
EXPR_STATEMENT	312:2	312:35	8	compression = COMPRESSION_DEFLATE ;
EXPR	312:2	312:2	9	compression = COMPRESSION_DEFLATE
ASSIGN	312:2	312:16	10	compression = COMPRESSION_DEFLATE
LVAL	312:2	312:2	11	compression
FIELD	312:2	312:2	12	compression
LEAF_NODE	312:2	312:2	13	compression
ASSIGN_OP	312:14	312:14	11	=
LEAF_NODE	312:14	312:14	12	=
RVAL	312:16	312:16	11	COMPRESSION_DEFLATE
FIELD	312:16	312:16	12	COMPRESSION_DEFLATE
LEAF_NODE	312:16	312:16	13	COMPRESSION_DEFLATE
LEAF_NODE	312:35	312:35	9	;
LEAF_NODE	313:1	313:1	7	}
SELECTION	313:3	314:2	3	
KEYWORD	313:3	313:3	4	else
LEAF_NODE	313:3	313:3	5	else
STATEMENTS	314:2	314:2	4	
JUMP_STATEMENT	314:2	314:12	5	return ( 0 ) ;
KEYWORD	314:2	314:2	6	return
LEAF_NODE	314:2	314:2	7	return
DESTINATION	314:9	314:9	6	( 0 )
EXPR	314:9	314:11	7	( 0 )
LEAF_NODE	314:9	314:9	8	(
FIELD	314:10	314:10	8	0
LEAF_NODE	314:10	314:10	9	0
LEAF_NODE	314:11	314:11	8	)
LEAF_NODE	314:12	314:12	6	;
JUMP_STATEMENT	315:1	315:11	3	return ( 1 ) ;
KEYWORD	315:1	315:1	4	return
LEAF_NODE	315:1	315:1	5	return
DESTINATION	315:8	315:8	4	( 1 )
EXPR	315:8	315:10	5	( 1 )
LEAF_NODE	315:8	315:8	6	(
FIELD	315:9	315:9	6	1
LEAF_NODE	315:9	315:9	7	1
LEAF_NODE	315:10	315:10	6	)
LEAF_NODE	315:11	315:11	4	;
LEAF_NODE	316:0	316:0	2	}
FUNCTION_DEF	335:0	346:0	1	
RETURN_TYPE	335:0	335:7	2	static void
LEAF_NODE	335:0	335:0	3	static
TYPE_NAME	335:7	335:7	3	void
LEAF_NODE	335:7	335:7	4	void
FUNCTION_NAME	336:0	336:0	2	usage
LEAF_NODE	336:0	336:0	3	usage
PARAMETER_LIST	336:5	336:10	2	( void )
LEAF_NODE	336:5	336:5	3	(
PARAMETER_DECL	336:6	336:6	3	void
LEAF_NODE	336:6	336:6	4	void
LEAF_NODE	336:10	336:10	3	)
LEAF_NODE	337:0	337:0	2	{
STATEMENTS	338:1	345:1	2	
SIMPLE_DECL	338:1	338:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	338:1	338:6	4	char [ BUFSIZ ] buf
TYPE	338:1	338:9	5	char [ BUFSIZ ]
TYPE_NAME	338:1	338:1	6	char
LEAF_NODE	338:1	338:1	7	char
TYPE_SUFFIX	338:9	338:16	6	[ BUFSIZ ]
LEAF_NODE	338:9	338:9	7	[
FIELD	338:10	338:10	7	BUFSIZ
LEAF_NODE	338:10	338:10	8	BUFSIZ
LEAF_NODE	338:16	338:16	7	]
NAME	338:6	338:6	5	buf
LEAF_NODE	338:6	338:6	6	buf
LEAF_NODE	338:17	338:17	4	;
SIMPLE_DECL	339:1	339:6	3	int i ;
VAR_DECL	339:1	339:5	4	int i
TYPE	339:1	339:1	5	int
TYPE_NAME	339:1	339:1	6	int
LEAF_NODE	339:1	339:1	7	int
NAME	339:5	339:5	5	i
LEAF_NODE	339:5	339:5	6	i
LEAF_NODE	339:6	339:6	4	;
EXPR_STATEMENT	341:1	341:20	3	setbuf ( stderr , buf ) ;
EXPR	341:1	341:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	341:1	341:19	5	setbuf ( stderr , buf )
CALLEE	341:1	341:1	6	setbuf
LEAF_NODE	341:1	341:1	7	setbuf
LEAF_NODE	341:7	341:7	6	(
ARGUMENT	341:8	341:8	6	stderr
FIELD	341:8	341:8	7	stderr
LEAF_NODE	341:8	341:8	8	stderr
LEAF_NODE	341:14	341:14	6	,
ARGUMENT	341:16	341:16	6	buf
FIELD	341:16	341:16	7	buf
LEAF_NODE	341:16	341:16	8	buf
LEAF_NODE	341:19	341:19	6	)
LEAF_NODE	341:20	341:20	4	;
EXPR_STATEMENT	342:8	342:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	342:8	342:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	342:8	342:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	342:8	342:8	6	fprintf
LEAF_NODE	342:8	342:8	7	fprintf
LEAF_NODE	342:15	342:15	6	(
ARGUMENT	342:16	342:16	6	stderr
FIELD	342:16	342:16	7	stderr
LEAF_NODE	342:16	342:16	8	stderr
LEAF_NODE	342:22	342:22	6	,
ARGUMENT	342:24	342:24	6	"%s\n\n"
FIELD	342:24	342:24	7	"%s\n\n"
LEAF_NODE	342:24	342:24	8	"%s\n\n"
LEAF_NODE	342:32	342:32	6	,
ARGUMENT	342:34	342:34	6	TIFFGetVersion ( )
FUNCTION_CALL	342:34	342:49	7	TIFFGetVersion ( )
CALLEE	342:34	342:34	8	TIFFGetVersion
LEAF_NODE	342:34	342:34	9	TIFFGetVersion
LEAF_NODE	342:48	342:48	8	(
LEAF_NODE	342:49	342:49	8	)
LEAF_NODE	342:50	342:50	6	)
LEAF_NODE	342:51	342:51	4	;
ITERATION	343:1	344:2	3	
KEYWORD	343:1	343:1	4	for
LEAF_NODE	343:1	343:1	5	for
LEAF_NODE	343:5	343:5	4	(
FOR_INIT	343:6	343:11	4	i = 0 ;
EXPR	343:6	343:6	5	i = 0
ASSIGN	343:6	343:10	6	i = 0
LVAL	343:6	343:6	7	i
FIELD	343:6	343:6	8	i
LEAF_NODE	343:6	343:6	9	i
ASSIGN_OP	343:8	343:8	7	=
LEAF_NODE	343:8	343:8	8	=
RVAL	343:10	343:10	7	0
FIELD	343:10	343:10	8	0
LEAF_NODE	343:10	343:10	9	0
LEAF_NODE	343:11	343:11	5	;
CONDITION	343:13	343:13	4	stuff [ i ] != NULL
EXPR	343:13	343:25	5	stuff [ i ] != NULL
FIELD	343:13	343:20	6	stuff [ i ]
LEAF_NODE	343:13	343:13	7	stuff
LEAF_NODE	343:18	343:18	7	[
EXPR	343:19	343:19	7	i
FIELD	343:19	343:19	8	i
LEAF_NODE	343:19	343:19	9	i
LEAF_NODE	343:20	343:20	7	]
EQ_OPERATOR	343:22	343:22	6	!=
LEAF_NODE	343:22	343:22	7	!=
FIELD	343:25	343:25	6	NULL
LEAF_NODE	343:25	343:25	7	NULL
LEAF_NODE	343:29	343:29	4	;
FOR_EXPR	343:31	343:31	4	i ++
EXPR	343:31	343:31	5	i ++
FIELD	343:31	343:32	6	i ++
LEAF_NODE	343:31	343:31	7	i
LEAF_NODE	343:32	343:32	7	++
LEAF_NODE	343:34	343:34	4	)
STATEMENTS	344:2	344:2	4	
EXPR_STATEMENT	344:2	344:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	344:2	344:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	344:2	344:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	344:2	344:2	8	fprintf
LEAF_NODE	344:2	344:2	9	fprintf
LEAF_NODE	344:9	344:9	8	(
ARGUMENT	344:10	344:10	8	stderr
FIELD	344:10	344:10	9	stderr
LEAF_NODE	344:10	344:10	10	stderr
LEAF_NODE	344:16	344:16	8	,
ARGUMENT	344:18	344:18	8	"%s\n"
FIELD	344:18	344:18	9	"%s\n"
LEAF_NODE	344:18	344:18	10	"%s\n"
LEAF_NODE	344:24	344:24	8	,
ARGUMENT	344:26	344:26	8	stuff [ i ]
FIELD	344:26	344:33	9	stuff [ i ]
LEAF_NODE	344:26	344:26	10	stuff
LEAF_NODE	344:31	344:31	10	[
EXPR	344:32	344:32	10	i
FIELD	344:32	344:32	11	i
LEAF_NODE	344:32	344:32	12	i
LEAF_NODE	344:33	344:33	10	]
LEAF_NODE	344:34	344:34	8	)
LEAF_NODE	344:35	344:35	6	;
EXPR_STATEMENT	345:1	345:9	3	exit ( - 1 ) ;
EXPR	345:1	345:1	4	exit ( - 1 )
FUNCTION_CALL	345:1	345:8	5	exit ( - 1 )
CALLEE	345:1	345:1	6	exit
LEAF_NODE	345:1	345:1	7	exit
LEAF_NODE	345:5	345:5	6	(
ARGUMENT	345:6	345:6	6	- 1
UNARY_EXPR	345:6	345:7	7	- 1
UNARY_OPERATOR	345:6	345:6	8	-
LEAF_NODE	345:6	345:6	9	-
FIELD	345:7	345:7	8	1
LEAF_NODE	345:7	345:7	9	1
LEAF_NODE	345:8	345:8	6	)
LEAF_NODE	345:9	345:9	4	;
LEAF_NODE	346:0	346:0	2	}
FUNCTION_DEF	348:0	399:0	1	
RETURN_TYPE	348:0	348:7	2	static void
LEAF_NODE	348:0	348:0	3	static
TYPE_NAME	348:7	348:7	3	void
LEAF_NODE	348:7	348:7	4	void
FUNCTION_NAME	349:0	349:0	2	get_histogram
LEAF_NODE	349:0	349:0	3	get_histogram
PARAMETER_LIST	349:13	349:37	2	( TIFF * in , Colorbox * box )
LEAF_NODE	349:13	349:13	3	(
PARAMETER_DECL	349:14	349:20	3	TIFF * in
TYPE	349:14	349:18	4	TIFF *
TYPE_NAME	349:14	349:14	5	TIFF
LEAF_NODE	349:14	349:14	6	TIFF
POINTER	349:18	349:18	5	*
LEAF_NODE	349:18	349:18	6	*
NAME	349:20	349:20	4	in
LEAF_NODE	349:20	349:20	5	in
LEAF_NODE	349:22	349:22	3	,
PARAMETER_DECL	349:24	349:34	3	Colorbox * box
TYPE	349:24	349:32	4	Colorbox *
TYPE_NAME	349:24	349:24	5	Colorbox
LEAF_NODE	349:24	349:24	6	Colorbox
POINTER	349:32	349:32	5	*
LEAF_NODE	349:32	349:32	6	*
NAME	349:34	349:34	4	box
LEAF_NODE	349:34	349:34	5	box
LEAF_NODE	349:37	349:37	3	)
LEAF_NODE	350:0	350:0	2	{
STATEMENTS	351:1	398:1	2	
LEAF_NODE	351:1	351:1	3	register
SIMPLE_DECL	351:10	351:30	3	unsigned char * inptr ;
VAR_DECL	351:10	351:25	4	unsigned char * inptr
TYPE	351:10	351:24	5	unsigned char *
TYPE_NAME	351:10	351:19	6	unsigned char
LEAF_NODE	351:10	351:10	7	unsigned
LEAF_NODE	351:19	351:19	7	char
POINTER	351:24	351:24	6	*
LEAF_NODE	351:24	351:24	7	*
NAME	351:25	351:25	5	inptr
LEAF_NODE	351:25	351:25	6	inptr
LEAF_NODE	351:30	351:30	4	;
LEAF_NODE	352:1	352:1	3	register
SIMPLE_DECL	352:10	352:30	3	int red , int green , int blue ;
INIT_DECL_LIST	352:10	352:10	4	int red , int green , int blue
VAR_DECL	352:10	352:14	5	int red
TYPE	352:10	352:10	6	int
TYPE_NAME	352:10	352:10	7	int
LEAF_NODE	352:10	352:10	8	int
NAME	352:14	352:14	6	red
LEAF_NODE	352:14	352:14	7	red
LEAF_NODE	352:17	352:17	5	,
INIT_DECL_LIST	352:10	352:10	5	int green , int blue
VAR_DECL	352:10	352:19	6	int green
TYPE	352:10	352:10	7	int
TYPE_NAME	352:10	352:10	8	int
LEAF_NODE	352:10	352:10	9	int
NAME	352:19	352:19	7	green
LEAF_NODE	352:19	352:19	8	green
LEAF_NODE	352:24	352:24	6	,
VAR_DECL	352:10	352:26	6	int blue
TYPE	352:10	352:10	7	int
TYPE_NAME	352:10	352:10	8	int
LEAF_NODE	352:10	352:10	9	int
NAME	352:26	352:26	7	blue
LEAF_NODE	352:26	352:26	8	blue
LEAF_NODE	352:30	352:30	4	;
LEAF_NODE	353:1	353:1	3	register
SIMPLE_DECL	353:10	353:21	3	uint32 j , uint32 i ;
INIT_DECL_LIST	353:10	353:10	4	uint32 j , uint32 i
VAR_DECL	353:10	353:17	5	uint32 j
TYPE	353:10	353:10	6	uint32
TYPE_NAME	353:10	353:10	7	uint32
LEAF_NODE	353:10	353:10	8	uint32
NAME	353:17	353:17	6	j
LEAF_NODE	353:17	353:17	7	j
LEAF_NODE	353:18	353:18	5	,
VAR_DECL	353:10	353:20	5	uint32 i
TYPE	353:10	353:10	6	uint32
TYPE_NAME	353:10	353:10	7	uint32
LEAF_NODE	353:10	353:10	8	uint32
NAME	353:20	353:20	6	i
LEAF_NODE	353:20	353:20	7	i
LEAF_NODE	353:21	353:21	4	;
SIMPLE_DECL	354:1	354:25	3	unsigned char * inputline ;
VAR_DECL	354:1	354:16	4	unsigned char * inputline
TYPE	354:1	354:15	5	unsigned char *
TYPE_NAME	354:1	354:10	6	unsigned char
LEAF_NODE	354:1	354:1	7	unsigned
LEAF_NODE	354:10	354:10	7	char
POINTER	354:15	354:15	6	*
LEAF_NODE	354:15	354:15	7	*
NAME	354:16	354:16	5	inputline
LEAF_NODE	354:16	354:16	6	inputline
LEAF_NODE	354:25	354:25	4	;
EXPR_STATEMENT	356:1	356:63	3	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) ) ;
EXPR	356:1	356:1	4	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
ASSIGN	356:1	356:13	5	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LVAL	356:1	356:1	6	inputline
FIELD	356:1	356:1	7	inputline
LEAF_NODE	356:1	356:1	8	inputline
ASSIGN_OP	356:11	356:11	6	=
LEAF_NODE	356:11	356:11	7	=
RVAL	356:13	356:30	6	( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LEAF_NODE	356:13	356:13	7	(
TYPE_NAME	356:14	356:23	7	unsigned char
LEAF_NODE	356:14	356:14	8	unsigned
LEAF_NODE	356:23	356:23	8	char
LEAF_NODE	356:28	356:28	7	*
LEAF_NODE	356:29	356:29	7	)
FUNCTION_CALL	356:30	356:62	7	_TIFFmalloc ( TIFFScanlineSize ( in ) )
CALLEE	356:30	356:30	8	_TIFFmalloc
LEAF_NODE	356:30	356:30	9	_TIFFmalloc
LEAF_NODE	356:41	356:41	8	(
ARGUMENT	356:42	356:42	8	TIFFScanlineSize ( in )
FUNCTION_CALL	356:42	356:61	9	TIFFScanlineSize ( in )
CALLEE	356:42	356:42	10	TIFFScanlineSize
LEAF_NODE	356:42	356:42	11	TIFFScanlineSize
LEAF_NODE	356:58	356:58	10	(
ARGUMENT	356:59	356:59	10	in
FIELD	356:59	356:59	11	in
LEAF_NODE	356:59	356:59	12	in
LEAF_NODE	356:61	356:61	10	)
LEAF_NODE	356:62	356:62	8	)
LEAF_NODE	356:63	356:63	4	;
SELECTION	357:1	357:24	3	
KEYWORD	357:1	357:1	4	if
LEAF_NODE	357:1	357:1	5	if
LEAF_NODE	357:4	357:4	4	(
CONDITION	357:5	357:5	4	inputline == NULL
EXPR	357:5	357:18	5	inputline == NULL
FIELD	357:5	357:5	6	inputline
LEAF_NODE	357:5	357:5	7	inputline
EQ_OPERATOR	357:15	357:15	6	==
LEAF_NODE	357:15	357:15	7	==
FIELD	357:18	357:18	6	NULL
LEAF_NODE	357:18	357:18	7	NULL
LEAF_NODE	357:22	357:22	4	)
STATEMENTS	357:24	360:1	4	
LEAF_NODE	357:24	357:24	5	{
STATEMENTS	358:2	359:2	5	
EXPR_STATEMENT	358:2	358:51	6	fprintf ( stderr , "No space for scanline buffer\n" ) ;
EXPR	358:2	358:2	7	fprintf ( stderr , "No space for scanline buffer\n" )
FUNCTION_CALL	358:2	358:50	8	fprintf ( stderr , "No space for scanline buffer\n" )
CALLEE	358:2	358:2	9	fprintf
LEAF_NODE	358:2	358:2	10	fprintf
LEAF_NODE	358:9	358:9	9	(
ARGUMENT	358:10	358:10	9	stderr
FIELD	358:10	358:10	10	stderr
LEAF_NODE	358:10	358:10	11	stderr
LEAF_NODE	358:16	358:16	9	,
ARGUMENT	358:18	358:18	9	"No space for scanline buffer\n"
FIELD	358:18	358:18	10	"No space for scanline buffer\n"
LEAF_NODE	358:18	358:18	11	"No space for scanline buffer\n"
LEAF_NODE	358:50	358:50	9	)
LEAF_NODE	358:51	358:51	7	;
EXPR_STATEMENT	359:2	359:10	6	exit ( - 1 ) ;
EXPR	359:2	359:2	7	exit ( - 1 )
FUNCTION_CALL	359:2	359:9	8	exit ( - 1 )
CALLEE	359:2	359:2	9	exit
LEAF_NODE	359:2	359:2	10	exit
LEAF_NODE	359:6	359:6	9	(
ARGUMENT	359:7	359:7	9	- 1
UNARY_EXPR	359:7	359:8	10	- 1
UNARY_OPERATOR	359:7	359:7	11	-
LEAF_NODE	359:7	359:7	12	-
FIELD	359:8	359:8	11	1
LEAF_NODE	359:8	359:8	12	1
LEAF_NODE	359:9	359:9	9	)
LEAF_NODE	359:10	359:10	7	;
LEAF_NODE	360:1	360:1	5	}
EXPR_STATEMENT	361:1	361:40	3	box -> rmin = box -> gmin = box -> bmin = 999 ;
EXPR	361:1	361:1	4	box -> rmin = box -> gmin = box -> bmin = 999
ASSIGN	361:1	361:13	5	box -> rmin = box -> gmin = box -> bmin = 999
LVAL	361:1	361:1	6	box -> rmin
FIELD	361:1	361:6	7	box -> rmin
LEAF_NODE	361:1	361:1	8	box
LEAF_NODE	361:4	361:4	8	->
LEAF_NODE	361:6	361:6	8	rmin
ASSIGN_OP	361:11	361:11	6	=
LEAF_NODE	361:11	361:11	7	=
RVAL	361:13	361:13	6	box -> gmin = box -> bmin = 999
ASSIGN	361:13	361:25	7	box -> gmin = box -> bmin = 999
LVAL	361:13	361:13	8	box -> gmin
FIELD	361:13	361:18	9	box -> gmin
LEAF_NODE	361:13	361:13	10	box
LEAF_NODE	361:16	361:16	10	->
LEAF_NODE	361:18	361:18	10	gmin
ASSIGN_OP	361:23	361:23	8	=
LEAF_NODE	361:23	361:23	9	=
RVAL	361:25	361:25	8	box -> bmin = 999
ASSIGN	361:25	361:37	9	box -> bmin = 999
LVAL	361:25	361:25	10	box -> bmin
FIELD	361:25	361:30	11	box -> bmin
LEAF_NODE	361:25	361:25	12	box
LEAF_NODE	361:28	361:28	12	->
LEAF_NODE	361:30	361:30	12	bmin
ASSIGN_OP	361:35	361:35	10	=
LEAF_NODE	361:35	361:35	11	=
RVAL	361:37	361:37	10	999
FIELD	361:37	361:37	11	999
LEAF_NODE	361:37	361:37	12	999
LEAF_NODE	361:40	361:40	4	;
EXPR_STATEMENT	362:1	362:39	3	box -> rmax = box -> gmax = box -> bmax = - 1 ;
EXPR	362:1	362:1	4	box -> rmax = box -> gmax = box -> bmax = - 1
ASSIGN	362:1	362:13	5	box -> rmax = box -> gmax = box -> bmax = - 1
LVAL	362:1	362:1	6	box -> rmax
FIELD	362:1	362:6	7	box -> rmax
LEAF_NODE	362:1	362:1	8	box
LEAF_NODE	362:4	362:4	8	->
LEAF_NODE	362:6	362:6	8	rmax
ASSIGN_OP	362:11	362:11	6	=
LEAF_NODE	362:11	362:11	7	=
RVAL	362:13	362:13	6	box -> gmax = box -> bmax = - 1
ASSIGN	362:13	362:25	7	box -> gmax = box -> bmax = - 1
LVAL	362:13	362:13	8	box -> gmax
FIELD	362:13	362:18	9	box -> gmax
LEAF_NODE	362:13	362:13	10	box
LEAF_NODE	362:16	362:16	10	->
LEAF_NODE	362:18	362:18	10	gmax
ASSIGN_OP	362:23	362:23	8	=
LEAF_NODE	362:23	362:23	9	=
RVAL	362:25	362:25	8	box -> bmax = - 1
ASSIGN	362:25	362:37	9	box -> bmax = - 1
LVAL	362:25	362:25	10	box -> bmax
FIELD	362:25	362:30	11	box -> bmax
LEAF_NODE	362:25	362:25	12	box
LEAF_NODE	362:28	362:28	12	->
LEAF_NODE	362:30	362:30	12	bmax
ASSIGN_OP	362:35	362:35	10	=
LEAF_NODE	362:35	362:35	11	=
RVAL	362:37	362:37	10	- 1
UNARY_EXPR	362:37	362:38	11	- 1
UNARY_OPERATOR	362:37	362:37	12	-
LEAF_NODE	362:37	362:37	13	-
FIELD	362:38	362:38	12	1
LEAF_NODE	362:38	362:38	13	1
LEAF_NODE	362:39	362:39	4	;
EXPR_STATEMENT	363:1	363:38	3	box -> total = imagewidth * imagelength ;
EXPR	363:1	363:1	4	box -> total = imagewidth * imagelength
ASSIGN	363:1	363:14	5	box -> total = imagewidth * imagelength
LVAL	363:1	363:1	6	box -> total
FIELD	363:1	363:6	7	box -> total
LEAF_NODE	363:1	363:1	8	box
LEAF_NODE	363:4	363:4	8	->
LEAF_NODE	363:6	363:6	8	total
ASSIGN_OP	363:12	363:12	6	=
LEAF_NODE	363:12	363:12	7	=
RVAL	363:14	363:27	6	imagewidth * imagelength
FIELD	363:14	363:14	7	imagewidth
LEAF_NODE	363:14	363:14	8	imagewidth
LEAF_NODE	363:25	363:25	7	*
FIELD	363:27	363:27	7	imagelength
LEAF_NODE	363:27	363:27	8	imagelength
LEAF_NODE	363:38	363:38	4	;
LEAF_NODE	365:1	365:1	3	{
STATEMENTS	365:3	367:2	3	
LEAF_NODE	365:3	365:3	4	register
SIMPLE_DECL	365:12	365:45	4	uint32 * ptr ; ptr = & histogram [ 0 ] [ 0 ] [ 0 ] ;
VAR_DECL	365:12	365:20	5	uint32 * ptr ; ptr = & histogram [ 0 ] [ 0 ] [ 0 ]
TYPE	365:12	365:19	6	uint32 *
TYPE_NAME	365:12	365:12	7	uint32
LEAF_NODE	365:12	365:12	8	uint32
POINTER	365:19	365:19	7	*
LEAF_NODE	365:19	365:19	8	*
NAME	365:20	365:20	6	ptr
LEAF_NODE	365:20	365:20	7	ptr
LEAF_NODE	0:0	0:0	6	;
INIT	365:20	365:20	6	ptr = & histogram [ 0 ] [ 0 ] [ 0 ]
ASSIGN	365:20	365:26	7	ptr = & histogram [ 0 ] [ 0 ] [ 0 ]
LVAL	365:20	365:20	8	ptr
NAME	365:20	365:20	9	ptr
LEAF_NODE	365:20	365:20	10	ptr
ASSIGN_OP	365:24	365:24	8	=
LEAF_NODE	365:24	365:24	9	=
RVAL	365:26	365:26	8	& histogram [ 0 ] [ 0 ] [ 0 ]
UNARY_EXPR	365:26	365:27	9	& histogram [ 0 ] [ 0 ] [ 0 ]
UNARY_OPERATOR	365:26	365:26	10	&
LEAF_NODE	365:26	365:26	11	&
FIELD	365:27	365:44	10	histogram [ 0 ] [ 0 ] [ 0 ]
LEAF_NODE	365:27	365:27	11	histogram
LEAF_NODE	365:36	365:36	11	[
EXPR	365:37	365:37	11	0
FIELD	365:37	365:37	12	0
LEAF_NODE	365:37	365:37	13	0
LEAF_NODE	365:38	365:38	11	]
LEAF_NODE	365:39	365:39	11	[
EXPR	365:40	365:40	11	0
FIELD	365:40	365:40	12	0
LEAF_NODE	365:40	365:40	13	0
LEAF_NODE	365:41	365:41	11	]
LEAF_NODE	365:42	365:42	11	[
EXPR	365:43	365:43	11	0
FIELD	365:43	365:43	12	0
LEAF_NODE	365:43	365:43	13	0
LEAF_NODE	365:44	365:44	11	]
LEAF_NODE	365:45	365:45	5	;
LEAF_NODE	366:3	366:3	4	for
LEAF_NODE	366:7	366:7	4	(
LEAF_NODE	366:8	366:8	4	i
LEAF_NODE	366:10	366:10	4	=
LEAF_NODE	366:12	366:12	4	B_LEN
EXPR_STATEMENT	366:17	366:29	4	* B_LEN * B_LEN ;
EXPR	366:17	366:24	5	* B_LEN * B_LEN
UNARY_EXPR	366:17	366:18	6	* B_LEN
UNARY_OPERATOR	366:17	366:17	7	*
LEAF_NODE	366:17	366:17	8	*
FIELD	366:18	366:18	7	B_LEN
LEAF_NODE	366:18	366:18	8	B_LEN
LEAF_NODE	366:23	366:23	6	*
FIELD	366:24	366:24	6	B_LEN
LEAF_NODE	366:24	366:24	7	B_LEN
LEAF_NODE	366:29	366:29	5	;
EXPR_STATEMENT	366:31	366:38	4	i -- > 0 ;
EXPR	366:31	366:37	5	i -- > 0
FIELD	366:31	366:32	6	i --
LEAF_NODE	366:31	366:31	7	i
LEAF_NODE	366:32	366:32	7	--
REL_OPERATOR	366:35	366:35	6	>
LEAF_NODE	366:35	366:35	7	>
FIELD	366:37	366:37	6	0
LEAF_NODE	366:37	366:37	7	0
LEAF_NODE	366:38	366:38	5	;
LEAF_NODE	366:39	366:39	4	)
EXPR_STATEMENT	367:2	367:12	4	* ptr ++ = 0 ;
EXPR	367:2	367:2	5	* ptr ++ = 0
ASSIGN	367:2	367:11	6	* ptr ++ = 0
LVAL	367:2	367:2	7	* ptr ++
UNARY_EXPR	367:2	367:3	8	* ptr ++
UNARY_OPERATOR	367:2	367:2	9	*
LEAF_NODE	367:2	367:2	10	*
FIELD	367:3	367:6	9	ptr ++
LEAF_NODE	367:3	367:3	10	ptr
LEAF_NODE	367:6	367:6	10	++
ASSIGN_OP	367:9	367:9	7	=
LEAF_NODE	367:9	367:9	8	=
RVAL	367:11	367:11	7	0
FIELD	367:11	367:11	8	0
LEAF_NODE	367:11	367:11	9	0
LEAF_NODE	367:12	367:12	5	;
LEAF_NODE	368:1	368:1	3	}
ITERATION	369:1	369:35	3	
KEYWORD	369:1	369:1	4	for
LEAF_NODE	369:1	369:1	5	for
LEAF_NODE	369:5	369:5	4	(
FOR_INIT	369:6	369:11	4	i = 0 ;
EXPR	369:6	369:6	5	i = 0
ASSIGN	369:6	369:10	6	i = 0
LVAL	369:6	369:6	7	i
FIELD	369:6	369:6	8	i
LEAF_NODE	369:6	369:6	9	i
ASSIGN_OP	369:8	369:8	7	=
LEAF_NODE	369:8	369:8	8	=
RVAL	369:10	369:10	7	0
FIELD	369:10	369:10	8	0
LEAF_NODE	369:10	369:10	9	0
LEAF_NODE	369:11	369:11	5	;
CONDITION	369:13	369:13	4	i < imagelength
EXPR	369:13	369:17	5	i < imagelength
FIELD	369:13	369:13	6	i
LEAF_NODE	369:13	369:13	7	i
REL_OPERATOR	369:15	369:15	6	<
LEAF_NODE	369:15	369:15	7	<
FIELD	369:17	369:17	6	imagelength
LEAF_NODE	369:17	369:17	7	imagelength
LEAF_NODE	369:28	369:28	4	;
FOR_EXPR	369:30	369:30	4	i ++
EXPR	369:30	369:30	5	i ++
FIELD	369:30	369:31	6	i ++
LEAF_NODE	369:30	369:30	7	i
LEAF_NODE	369:31	369:31	7	++
LEAF_NODE	369:33	369:33	4	)
STATEMENTS	369:35	397:1	4	
LEAF_NODE	369:35	369:35	5	{
STATEMENTS	370:2	373:2	5	
SELECTION	370:2	371:3	6	
KEYWORD	370:2	370:2	7	if
LEAF_NODE	370:2	370:2	8	if
LEAF_NODE	370:5	370:5	7	(
CONDITION	370:6	370:6	7	TIFFReadScanline ( in , inputline , i , 0 ) <= 0
EXPR	370:6	370:47	8	TIFFReadScanline ( in , inputline , i , 0 ) <= 0
FUNCTION_CALL	370:6	370:42	9	TIFFReadScanline ( in , inputline , i , 0 )
CALLEE	370:6	370:6	10	TIFFReadScanline
LEAF_NODE	370:6	370:6	11	TIFFReadScanline
LEAF_NODE	370:22	370:22	10	(
ARGUMENT	370:23	370:23	10	in
FIELD	370:23	370:23	11	in
LEAF_NODE	370:23	370:23	12	in
LEAF_NODE	370:25	370:25	10	,
ARGUMENT	370:27	370:27	10	inputline
FIELD	370:27	370:27	11	inputline
LEAF_NODE	370:27	370:27	12	inputline
LEAF_NODE	370:36	370:36	10	,
ARGUMENT	370:38	370:38	10	i
FIELD	370:38	370:38	11	i
LEAF_NODE	370:38	370:38	12	i
LEAF_NODE	370:39	370:39	10	,
ARGUMENT	370:41	370:41	10	0
FIELD	370:41	370:41	11	0
LEAF_NODE	370:41	370:41	12	0
LEAF_NODE	370:42	370:42	10	)
REL_OPERATOR	370:44	370:44	9	<=
LEAF_NODE	370:44	370:44	10	<=
FIELD	370:47	370:47	9	0
LEAF_NODE	370:47	370:47	10	0
LEAF_NODE	370:48	370:48	7	)
STATEMENTS	371:3	371:3	7	
JUMP_STATEMENT	371:3	371:8	8	break DESTINATION ;
KEYWORD	371:3	371:3	9	break
LEAF_NODE	371:3	371:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	371:8	371:8	9	;
EXPR_STATEMENT	372:2	372:19	6	inptr = inputline ;
EXPR	372:2	372:2	7	inptr = inputline
ASSIGN	372:2	372:10	8	inptr = inputline
LVAL	372:2	372:2	9	inptr
FIELD	372:2	372:2	10	inptr
LEAF_NODE	372:2	372:2	11	inptr
ASSIGN_OP	372:8	372:8	9	=
LEAF_NODE	372:8	372:8	10	=
RVAL	372:10	372:10	9	inputline
FIELD	372:10	372:10	10	inputline
LEAF_NODE	372:10	372:10	11	inputline
LEAF_NODE	372:19	372:19	7	;
ITERATION	373:2	373:33	6	
KEYWORD	373:2	373:2	7	for
LEAF_NODE	373:2	373:2	8	for
LEAF_NODE	373:6	373:6	7	(
FOR_INIT	373:7	373:21	7	j = imagewidth ;
EXPR	373:7	373:7	8	j = imagewidth
ASSIGN	373:7	373:11	9	j = imagewidth
LVAL	373:7	373:7	10	j
FIELD	373:7	373:7	11	j
LEAF_NODE	373:7	373:7	12	j
ASSIGN_OP	373:9	373:9	10	=
LEAF_NODE	373:9	373:9	11	=
RVAL	373:11	373:11	10	imagewidth
FIELD	373:11	373:11	11	imagewidth
LEAF_NODE	373:11	373:11	12	imagewidth
LEAF_NODE	373:21	373:21	8	;
CONDITION	373:23	373:23	7	j -- > 0
EXPR	373:23	373:29	8	j -- > 0
FIELD	373:23	373:24	9	j --
LEAF_NODE	373:23	373:23	10	j
LEAF_NODE	373:24	373:24	10	--
REL_OPERATOR	373:27	373:27	9	>
LEAF_NODE	373:27	373:27	10	>
FIELD	373:29	373:29	9	0
LEAF_NODE	373:29	373:29	10	0
LEAF_NODE	373:30	373:30	7	;
LEAF_NODE	0:0	0:0	7	FOR_EXPR
LEAF_NODE	373:31	373:31	7	)
STATEMENTS	373:33	396:2	7	
LEAF_NODE	373:33	373:33	8	{
STATEMENTS	374:3	395:10	8	
EXPR_STATEMENT	374:3	374:41	9	red = ( * inptr ++ ) & 0xff >> COLOR_SHIFT ;
EXPR	374:3	374:3	10	red = ( * inptr ++ ) & 0xff >> COLOR_SHIFT
ASSIGN	374:3	374:9	11	red = ( * inptr ++ ) & 0xff >> COLOR_SHIFT
LVAL	374:3	374:3	12	red
FIELD	374:3	374:3	13	red
LEAF_NODE	374:3	374:3	14	red
ASSIGN_OP	374:7	374:7	12	=
LEAF_NODE	374:7	374:7	13	=
RVAL	374:9	374:30	12	( * inptr ++ ) & 0xff >> COLOR_SHIFT
LEAF_NODE	374:9	374:9	13	(
UNARY_EXPR	374:10	374:11	13	* inptr ++
UNARY_OPERATOR	374:10	374:10	14	*
LEAF_NODE	374:10	374:10	15	*
FIELD	374:11	374:16	14	inptr ++
LEAF_NODE	374:11	374:11	15	inptr
LEAF_NODE	374:16	374:16	15	++
LEAF_NODE	374:18	374:18	13	)
LEAF_NODE	374:20	374:20	13	&
FIELD	374:22	374:22	13	0xff
LEAF_NODE	374:22	374:22	14	0xff
LEAF_NODE	374:27	374:27	13	>>
FIELD	374:30	374:30	13	COLOR_SHIFT
LEAF_NODE	374:30	374:30	14	COLOR_SHIFT
LEAF_NODE	374:41	374:41	10	;
EXPR_STATEMENT	375:3	375:43	9	green = ( * inptr ++ ) & 0xff >> COLOR_SHIFT ;
EXPR	375:3	375:3	10	green = ( * inptr ++ ) & 0xff >> COLOR_SHIFT
ASSIGN	375:3	375:11	11	green = ( * inptr ++ ) & 0xff >> COLOR_SHIFT
LVAL	375:3	375:3	12	green
FIELD	375:3	375:3	13	green
LEAF_NODE	375:3	375:3	14	green
ASSIGN_OP	375:9	375:9	12	=
LEAF_NODE	375:9	375:9	13	=
RVAL	375:11	375:32	12	( * inptr ++ ) & 0xff >> COLOR_SHIFT
LEAF_NODE	375:11	375:11	13	(
UNARY_EXPR	375:12	375:13	13	* inptr ++
UNARY_OPERATOR	375:12	375:12	14	*
LEAF_NODE	375:12	375:12	15	*
FIELD	375:13	375:18	14	inptr ++
LEAF_NODE	375:13	375:13	15	inptr
LEAF_NODE	375:18	375:18	15	++
LEAF_NODE	375:20	375:20	13	)
LEAF_NODE	375:22	375:22	13	&
FIELD	375:24	375:24	13	0xff
LEAF_NODE	375:24	375:24	14	0xff
LEAF_NODE	375:29	375:29	13	>>
FIELD	375:32	375:32	13	COLOR_SHIFT
LEAF_NODE	375:32	375:32	14	COLOR_SHIFT
LEAF_NODE	375:43	375:43	10	;
EXPR_STATEMENT	376:3	376:42	9	blue = ( * inptr ++ ) & 0xff >> COLOR_SHIFT ;
EXPR	376:3	376:3	10	blue = ( * inptr ++ ) & 0xff >> COLOR_SHIFT
ASSIGN	376:3	376:10	11	blue = ( * inptr ++ ) & 0xff >> COLOR_SHIFT
LVAL	376:3	376:3	12	blue
FIELD	376:3	376:3	13	blue
LEAF_NODE	376:3	376:3	14	blue
ASSIGN_OP	376:8	376:8	12	=
LEAF_NODE	376:8	376:8	13	=
RVAL	376:10	376:31	12	( * inptr ++ ) & 0xff >> COLOR_SHIFT
LEAF_NODE	376:10	376:10	13	(
UNARY_EXPR	376:11	376:12	13	* inptr ++
UNARY_OPERATOR	376:11	376:11	14	*
LEAF_NODE	376:11	376:11	15	*
FIELD	376:12	376:17	14	inptr ++
LEAF_NODE	376:12	376:12	15	inptr
LEAF_NODE	376:17	376:17	15	++
LEAF_NODE	376:19	376:19	13	)
LEAF_NODE	376:21	376:21	13	&
FIELD	376:23	376:23	13	0xff
LEAF_NODE	376:23	376:23	14	0xff
LEAF_NODE	376:28	376:28	13	>>
FIELD	376:31	376:31	13	COLOR_SHIFT
LEAF_NODE	376:31	376:31	14	COLOR_SHIFT
LEAF_NODE	376:42	376:42	10	;
SELECTION	377:24	377:59	9	
KEYWORD	377:24	377:24	10	if
LEAF_NODE	377:24	377:24	11	if
LEAF_NODE	377:27	377:27	10	(
CONDITION	377:28	377:28	10	( red | green | blue ) >= B_LEN
EXPR	377:28	377:52	11	( red | green | blue ) >= B_LEN
LEAF_NODE	377:28	377:28	12	(
BIT_OR	377:29	377:35	12	red | green | blue
BIT_OR_ELEM	377:29	377:29	13	red
FIELD	377:29	377:29	14	red
LEAF_NODE	377:29	377:29	15	red
LEAF_NODE	377:33	377:33	13	|
BIT_OR_ELEM	377:35	377:35	13	green | blue
BIT_OR	377:35	377:43	14	green | blue
BIT_OR_ELEM	377:35	377:35	15	green
FIELD	377:35	377:35	16	green
LEAF_NODE	377:35	377:35	17	green
LEAF_NODE	377:41	377:41	15	|
BIT_OR_ELEM	377:43	377:43	15	blue
FIELD	377:43	377:43	16	blue
LEAF_NODE	377:43	377:43	17	blue
LEAF_NODE	377:47	377:47	12	)
REL_OPERATOR	377:49	377:49	12	>=
LEAF_NODE	377:49	377:49	13	>=
FIELD	377:52	377:52	12	B_LEN
LEAF_NODE	377:52	377:52	13	B_LEN
LEAF_NODE	377:57	377:57	10	)
STATEMENTS	377:59	382:24	10	
LEAF_NODE	377:59	377:59	11	{
STATEMENTS	378:32	381:32	11	
LEAF_NODE	378:32	378:32	12	fprintf
LEAF_NODE	378:39	378:39	12	(
LEAF_NODE	378:40	378:40	12	stderr
LEAF_NODE	378:46	378:46	12	,
LEAF_NODE	379:40	379:40	12	"Logic error. "
LEAF_NODE	380:40	380:40	12	"Histogram array overflow!\n"
LEAF_NODE	380:69	380:69	12	)
LEAF_NODE	380:70	380:70	12	;
EXPR_STATEMENT	381:32	381:40	12	exit ( - 6 ) ;
EXPR	381:32	381:32	13	exit ( - 6 )
FUNCTION_CALL	381:32	381:39	14	exit ( - 6 )
CALLEE	381:32	381:32	15	exit
LEAF_NODE	381:32	381:32	16	exit
LEAF_NODE	381:36	381:36	15	(
ARGUMENT	381:37	381:37	15	- 6
UNARY_EXPR	381:37	381:38	16	- 6
UNARY_OPERATOR	381:37	381:37	17	-
LEAF_NODE	381:37	381:37	18	-
FIELD	381:38	381:38	17	6
LEAF_NODE	381:38	381:38	18	6
LEAF_NODE	381:39	381:39	15	)
LEAF_NODE	381:40	381:40	13	;
LEAF_NODE	382:24	382:24	11	}
SELECTION	383:3	384:4	9	
KEYWORD	383:3	383:3	10	if
LEAF_NODE	383:3	383:3	11	if
LEAF_NODE	383:6	383:6	10	(
CONDITION	383:7	383:7	10	red < box -> rmin
EXPR	383:7	383:13	11	red < box -> rmin
FIELD	383:7	383:7	12	red
LEAF_NODE	383:7	383:7	13	red
REL_OPERATOR	383:11	383:11	12	<
LEAF_NODE	383:11	383:11	13	<
FIELD	383:13	383:18	12	box -> rmin
LEAF_NODE	383:13	383:13	13	box
LEAF_NODE	383:16	383:16	13	->
LEAF_NODE	383:18	383:18	13	rmin
LEAF_NODE	383:22	383:22	10	)
STATEMENTS	384:4	384:4	10	
EXPR_STATEMENT	384:4	384:19	11	box -> rmin = red ;
EXPR	384:4	384:4	12	box -> rmin = red
ASSIGN	384:4	384:16	13	box -> rmin = red
LVAL	384:4	384:4	14	box -> rmin
FIELD	384:4	384:9	15	box -> rmin
LEAF_NODE	384:4	384:4	16	box
LEAF_NODE	384:7	384:7	16	->
LEAF_NODE	384:9	384:9	16	rmin
ASSIGN_OP	384:14	384:14	14	=
LEAF_NODE	384:14	384:14	15	=
RVAL	384:16	384:16	14	red
FIELD	384:16	384:16	15	red
LEAF_NODE	384:16	384:16	16	red
LEAF_NODE	384:19	384:19	12	;
SELECTION	385:10	386:4	9	
KEYWORD	385:10	385:10	10	if
LEAF_NODE	385:10	385:10	11	if
LEAF_NODE	385:13	385:13	10	(
CONDITION	385:14	385:14	10	red > box -> rmax
EXPR	385:14	385:20	11	red > box -> rmax
FIELD	385:14	385:14	12	red
LEAF_NODE	385:14	385:14	13	red
REL_OPERATOR	385:18	385:18	12	>
LEAF_NODE	385:18	385:18	13	>
FIELD	385:20	385:25	12	box -> rmax
LEAF_NODE	385:20	385:20	13	box
LEAF_NODE	385:23	385:23	13	->
LEAF_NODE	385:25	385:25	13	rmax
LEAF_NODE	385:29	385:29	10	)
STATEMENTS	386:4	386:4	10	
EXPR_STATEMENT	386:4	386:19	11	box -> rmax = red ;
EXPR	386:4	386:4	12	box -> rmax = red
ASSIGN	386:4	386:16	13	box -> rmax = red
LVAL	386:4	386:4	14	box -> rmax
FIELD	386:4	386:9	15	box -> rmax
LEAF_NODE	386:4	386:4	16	box
LEAF_NODE	386:7	386:7	16	->
LEAF_NODE	386:9	386:9	16	rmax
ASSIGN_OP	386:14	386:14	14	=
LEAF_NODE	386:14	386:14	15	=
RVAL	386:16	386:16	14	red
FIELD	386:16	386:16	15	red
LEAF_NODE	386:16	386:16	16	red
LEAF_NODE	386:19	386:19	12	;
SELECTION	387:10	388:4	9	
KEYWORD	387:10	387:10	10	if
LEAF_NODE	387:10	387:10	11	if
LEAF_NODE	387:13	387:13	10	(
CONDITION	387:14	387:14	10	green < box -> gmin
EXPR	387:14	387:22	11	green < box -> gmin
FIELD	387:14	387:14	12	green
LEAF_NODE	387:14	387:14	13	green
REL_OPERATOR	387:20	387:20	12	<
LEAF_NODE	387:20	387:20	13	<
FIELD	387:22	387:27	12	box -> gmin
LEAF_NODE	387:22	387:22	13	box
LEAF_NODE	387:25	387:25	13	->
LEAF_NODE	387:27	387:27	13	gmin
LEAF_NODE	387:31	387:31	10	)
STATEMENTS	388:4	388:4	10	
EXPR_STATEMENT	388:4	388:21	11	box -> gmin = green ;
EXPR	388:4	388:4	12	box -> gmin = green
ASSIGN	388:4	388:16	13	box -> gmin = green
LVAL	388:4	388:4	14	box -> gmin
FIELD	388:4	388:9	15	box -> gmin
LEAF_NODE	388:4	388:4	16	box
LEAF_NODE	388:7	388:7	16	->
LEAF_NODE	388:9	388:9	16	gmin
ASSIGN_OP	388:14	388:14	14	=
LEAF_NODE	388:14	388:14	15	=
RVAL	388:16	388:16	14	green
FIELD	388:16	388:16	15	green
LEAF_NODE	388:16	388:16	16	green
LEAF_NODE	388:21	388:21	12	;
SELECTION	389:10	390:4	9	
KEYWORD	389:10	389:10	10	if
LEAF_NODE	389:10	389:10	11	if
LEAF_NODE	389:13	389:13	10	(
CONDITION	389:14	389:14	10	green > box -> gmax
EXPR	389:14	389:22	11	green > box -> gmax
FIELD	389:14	389:14	12	green
LEAF_NODE	389:14	389:14	13	green
REL_OPERATOR	389:20	389:20	12	>
LEAF_NODE	389:20	389:20	13	>
FIELD	389:22	389:27	12	box -> gmax
LEAF_NODE	389:22	389:22	13	box
LEAF_NODE	389:25	389:25	13	->
LEAF_NODE	389:27	389:27	13	gmax
LEAF_NODE	389:31	389:31	10	)
STATEMENTS	390:4	390:4	10	
EXPR_STATEMENT	390:4	390:21	11	box -> gmax = green ;
EXPR	390:4	390:4	12	box -> gmax = green
ASSIGN	390:4	390:16	13	box -> gmax = green
LVAL	390:4	390:4	14	box -> gmax
FIELD	390:4	390:9	15	box -> gmax
LEAF_NODE	390:4	390:4	16	box
LEAF_NODE	390:7	390:7	16	->
LEAF_NODE	390:9	390:9	16	gmax
ASSIGN_OP	390:14	390:14	14	=
LEAF_NODE	390:14	390:14	15	=
RVAL	390:16	390:16	14	green
FIELD	390:16	390:16	15	green
LEAF_NODE	390:16	390:16	16	green
LEAF_NODE	390:21	390:21	12	;
SELECTION	391:10	392:4	9	
KEYWORD	391:10	391:10	10	if
LEAF_NODE	391:10	391:10	11	if
LEAF_NODE	391:13	391:13	10	(
CONDITION	391:14	391:14	10	blue < box -> bmin
EXPR	391:14	391:21	11	blue < box -> bmin
FIELD	391:14	391:14	12	blue
LEAF_NODE	391:14	391:14	13	blue
REL_OPERATOR	391:19	391:19	12	<
LEAF_NODE	391:19	391:19	13	<
FIELD	391:21	391:26	12	box -> bmin
LEAF_NODE	391:21	391:21	13	box
LEAF_NODE	391:24	391:24	13	->
LEAF_NODE	391:26	391:26	13	bmin
LEAF_NODE	391:30	391:30	10	)
STATEMENTS	392:4	392:4	10	
EXPR_STATEMENT	392:4	392:20	11	box -> bmin = blue ;
EXPR	392:4	392:4	12	box -> bmin = blue
ASSIGN	392:4	392:16	13	box -> bmin = blue
LVAL	392:4	392:4	14	box -> bmin
FIELD	392:4	392:9	15	box -> bmin
LEAF_NODE	392:4	392:4	16	box
LEAF_NODE	392:7	392:7	16	->
LEAF_NODE	392:9	392:9	16	bmin
ASSIGN_OP	392:14	392:14	14	=
LEAF_NODE	392:14	392:14	15	=
RVAL	392:16	392:16	14	blue
FIELD	392:16	392:16	15	blue
LEAF_NODE	392:16	392:16	16	blue
LEAF_NODE	392:20	392:20	12	;
SELECTION	393:10	394:4	9	
KEYWORD	393:10	393:10	10	if
LEAF_NODE	393:10	393:10	11	if
LEAF_NODE	393:13	393:13	10	(
CONDITION	393:14	393:14	10	blue > box -> bmax
EXPR	393:14	393:21	11	blue > box -> bmax
FIELD	393:14	393:14	12	blue
LEAF_NODE	393:14	393:14	13	blue
REL_OPERATOR	393:19	393:19	12	>
LEAF_NODE	393:19	393:19	13	>
FIELD	393:21	393:26	12	box -> bmax
LEAF_NODE	393:21	393:21	13	box
LEAF_NODE	393:24	393:24	13	->
LEAF_NODE	393:26	393:26	13	bmax
LEAF_NODE	393:30	393:30	10	)
STATEMENTS	394:4	394:4	10	
EXPR_STATEMENT	394:4	394:20	11	box -> bmax = blue ;
EXPR	394:4	394:4	12	box -> bmax = blue
ASSIGN	394:4	394:16	13	box -> bmax = blue
LVAL	394:4	394:4	14	box -> bmax
FIELD	394:4	394:9	15	box -> bmax
LEAF_NODE	394:4	394:4	16	box
LEAF_NODE	394:7	394:7	16	->
LEAF_NODE	394:9	394:9	16	bmax
ASSIGN_OP	394:14	394:14	14	=
LEAF_NODE	394:14	394:14	15	=
RVAL	394:16	394:16	14	blue
FIELD	394:16	394:16	15	blue
LEAF_NODE	394:16	394:16	16	blue
LEAF_NODE	394:20	394:20	12	;
EXPR_STATEMENT	395:10	395:39	9	histogram [ red ] [ green ] [ blue ] ++ ;
EXPR	395:10	395:10	10	histogram [ red ] [ green ] [ blue ] ++
FIELD	395:10	395:37	11	histogram [ red ] [ green ] [ blue ] ++
LEAF_NODE	395:10	395:10	12	histogram
LEAF_NODE	395:19	395:19	12	[
EXPR	395:20	395:20	12	red
FIELD	395:20	395:20	13	red
LEAF_NODE	395:20	395:20	14	red
LEAF_NODE	395:23	395:23	12	]
LEAF_NODE	395:24	395:24	12	[
EXPR	395:25	395:25	12	green
FIELD	395:25	395:25	13	green
LEAF_NODE	395:25	395:25	14	green
LEAF_NODE	395:30	395:30	12	]
LEAF_NODE	395:31	395:31	12	[
EXPR	395:32	395:32	12	blue
FIELD	395:32	395:32	13	blue
LEAF_NODE	395:32	395:32	14	blue
LEAF_NODE	395:36	395:36	12	]
LEAF_NODE	395:37	395:37	12	++
LEAF_NODE	395:39	395:39	10	;
LEAF_NODE	396:2	396:2	8	}
LEAF_NODE	397:1	397:1	5	}
EXPR_STATEMENT	398:1	398:21	3	_TIFFfree ( inputline ) ;
EXPR	398:1	398:1	4	_TIFFfree ( inputline )
FUNCTION_CALL	398:1	398:20	5	_TIFFfree ( inputline )
CALLEE	398:1	398:1	6	_TIFFfree
LEAF_NODE	398:1	398:1	7	_TIFFfree
LEAF_NODE	398:10	398:10	6	(
ARGUMENT	398:11	398:11	6	inputline
FIELD	398:11	398:11	7	inputline
LEAF_NODE	398:11	398:11	8	inputline
LEAF_NODE	398:20	398:20	6	)
LEAF_NODE	398:21	398:21	4	;
LEAF_NODE	399:0	399:0	2	}
FUNCTION_DEF	401:0	414:0	1	
RETURN_TYPE	401:0	401:16	2	static Colorbox *
LEAF_NODE	401:0	401:0	3	static
TYPE_NAME	401:7	401:7	3	Colorbox
LEAF_NODE	401:7	401:7	4	Colorbox
LEAF_NODE	401:16	401:16	3	*
FUNCTION_NAME	402:0	402:0	2	largest_box
LEAF_NODE	402:0	402:0	3	largest_box
PARAMETER_LIST	402:11	402:16	2	( void )
LEAF_NODE	402:11	402:11	3	(
PARAMETER_DECL	402:12	402:12	3	void
LEAF_NODE	402:12	402:12	4	void
LEAF_NODE	402:16	402:16	3	)
LEAF_NODE	403:0	403:0	2	{
STATEMENTS	404:1	413:11	2	
LEAF_NODE	404:1	404:1	3	register
SIMPLE_DECL	404:10	404:25	3	Colorbox * p , Colorbox * b ;
INIT_DECL_LIST	404:10	404:10	4	Colorbox * p , Colorbox * b
VAR_DECL	404:10	404:20	5	Colorbox * p
TYPE	404:10	404:19	6	Colorbox *
TYPE_NAME	404:10	404:10	7	Colorbox
LEAF_NODE	404:10	404:10	8	Colorbox
POINTER	404:19	404:19	7	*
LEAF_NODE	404:19	404:19	8	*
NAME	404:20	404:20	6	p
LEAF_NODE	404:20	404:20	7	p
LEAF_NODE	404:21	404:21	5	,
VAR_DECL	404:10	404:24	5	Colorbox * b
TYPE	404:10	404:23	6	Colorbox *
TYPE_NAME	404:10	404:10	7	Colorbox
LEAF_NODE	404:10	404:10	8	Colorbox
POINTER	404:23	404:23	7	*
LEAF_NODE	404:23	404:23	8	*
NAME	404:24	404:24	6	b
LEAF_NODE	404:24	404:24	7	b
LEAF_NODE	404:25	404:25	4	;
LEAF_NODE	405:1	405:1	3	register
SIMPLE_DECL	405:10	405:21	3	uint32 size ;
VAR_DECL	405:10	405:17	4	uint32 size
TYPE	405:10	405:10	5	uint32
TYPE_NAME	405:10	405:10	6	uint32
LEAF_NODE	405:10	405:10	7	uint32
NAME	405:17	405:17	5	size
LEAF_NODE	405:17	405:17	6	size
LEAF_NODE	405:21	405:21	4	;
EXPR_STATEMENT	407:1	407:9	3	b = NULL ;
EXPR	407:1	407:1	4	b = NULL
ASSIGN	407:1	407:5	5	b = NULL
LVAL	407:1	407:1	6	b
FIELD	407:1	407:1	7	b
LEAF_NODE	407:1	407:1	8	b
ASSIGN_OP	407:3	407:3	6	=
LEAF_NODE	407:3	407:3	7	=
RVAL	407:5	407:5	6	NULL
FIELD	407:5	407:5	7	NULL
LEAF_NODE	407:5	407:5	8	NULL
LEAF_NODE	407:9	407:9	4	;
EXPR_STATEMENT	408:1	408:9	3	size = 0 ;
EXPR	408:1	408:1	4	size = 0
ASSIGN	408:1	408:8	5	size = 0
LVAL	408:1	408:1	6	size
FIELD	408:1	408:1	7	size
LEAF_NODE	408:1	408:1	8	size
ASSIGN_OP	408:6	408:6	6	=
LEAF_NODE	408:6	408:6	7	=
RVAL	408:8	408:8	6	0
FIELD	408:8	408:8	7	0
LEAF_NODE	408:8	408:8	8	0
LEAF_NODE	408:9	408:9	4	;
ITERATION	409:1	410:2	3	
KEYWORD	409:1	409:1	4	for
LEAF_NODE	409:1	409:1	5	for
LEAF_NODE	409:5	409:5	4	(
FOR_INIT	409:6	409:19	4	p = usedboxes ;
EXPR	409:6	409:6	5	p = usedboxes
ASSIGN	409:6	409:10	6	p = usedboxes
LVAL	409:6	409:6	7	p
FIELD	409:6	409:6	8	p
LEAF_NODE	409:6	409:6	9	p
ASSIGN_OP	409:8	409:8	7	=
LEAF_NODE	409:8	409:8	8	=
RVAL	409:10	409:10	7	usedboxes
FIELD	409:10	409:10	8	usedboxes
LEAF_NODE	409:10	409:10	9	usedboxes
LEAF_NODE	409:19	409:19	5	;
CONDITION	409:21	409:21	4	p != NULL
EXPR	409:21	409:26	5	p != NULL
FIELD	409:21	409:21	6	p
LEAF_NODE	409:21	409:21	7	p
EQ_OPERATOR	409:23	409:23	6	!=
LEAF_NODE	409:23	409:23	7	!=
FIELD	409:26	409:26	6	NULL
LEAF_NODE	409:26	409:26	7	NULL
LEAF_NODE	409:30	409:30	4	;
FOR_EXPR	409:32	409:32	4	p = p -> next
EXPR	409:32	409:32	5	p = p -> next
ASSIGN	409:32	409:36	6	p = p -> next
LVAL	409:32	409:32	7	p
FIELD	409:32	409:32	8	p
LEAF_NODE	409:32	409:32	9	p
ASSIGN_OP	409:34	409:34	7	=
LEAF_NODE	409:34	409:34	8	=
RVAL	409:36	409:36	7	p -> next
FIELD	409:36	409:39	8	p -> next
LEAF_NODE	409:36	409:36	9	p
LEAF_NODE	409:37	409:37	9	->
LEAF_NODE	409:39	409:39	9	next
LEAF_NODE	409:43	409:43	4	)
STATEMENTS	410:2	410:2	4	
SELECTION	410:2	412:10	5	
KEYWORD	410:2	410:2	6	if
LEAF_NODE	410:2	410:2	7	if
LEAF_NODE	410:5	410:5	6	(
CONDITION	410:6	410:6	6	( p -> rmax > p -> rmin || p -> gmax > p -> gmin || p -> bmax > p -> bmin ) && p -> total > size
EXPR	410:6	410:6	7	( p -> rmax > p -> rmin || p -> gmax > p -> gmin || p -> bmax > p -> bmin ) && p -> total > size
AND	410:6	411:29	8	( p -> rmax > p -> rmin || p -> gmax > p -> gmin || p -> bmax > p -> bmin ) && p -> total > size
EXPR	410:6	411:23	9	( p -> rmax > p -> rmin || p -> gmax > p -> gmin || p -> bmax > p -> bmin )
LEAF_NODE	410:6	410:6	10	(
OR	410:7	410:28	10	p -> rmax > p -> rmin || p -> gmax > p -> gmin || p -> bmax > p -> bmin
EXPR	410:7	410:17	11	p -> rmax > p -> rmin
FIELD	410:7	410:10	12	p -> rmax
LEAF_NODE	410:7	410:7	13	p
LEAF_NODE	410:8	410:8	13	->
LEAF_NODE	410:10	410:10	13	rmax
REL_OPERATOR	410:15	410:15	12	>
LEAF_NODE	410:15	410:15	13	>
FIELD	410:17	410:20	12	p -> rmin
LEAF_NODE	410:17	410:17	13	p
LEAF_NODE	410:18	410:18	13	->
LEAF_NODE	410:20	410:20	13	rmin
LEAF_NODE	410:25	410:25	11	||
EXPR	410:28	410:28	11	p -> gmax > p -> gmin || p -> bmax > p -> bmin
OR	410:28	411:6	12	p -> gmax > p -> gmin || p -> bmax > p -> bmin
EXPR	410:28	410:38	13	p -> gmax > p -> gmin
FIELD	410:28	410:31	14	p -> gmax
LEAF_NODE	410:28	410:28	15	p
LEAF_NODE	410:29	410:29	15	->
LEAF_NODE	410:31	410:31	15	gmax
REL_OPERATOR	410:36	410:36	14	>
LEAF_NODE	410:36	410:36	15	>
FIELD	410:38	410:41	14	p -> gmin
LEAF_NODE	410:38	410:38	15	p
LEAF_NODE	410:39	410:39	15	->
LEAF_NODE	410:41	410:41	15	gmin
LEAF_NODE	410:46	410:46	13	||
EXPR	411:6	411:16	13	p -> bmax > p -> bmin
FIELD	411:6	411:9	14	p -> bmax
LEAF_NODE	411:6	411:6	15	p
LEAF_NODE	411:7	411:7	15	->
LEAF_NODE	411:9	411:9	15	bmax
REL_OPERATOR	411:14	411:14	14	>
LEAF_NODE	411:14	411:14	15	>
FIELD	411:16	411:19	14	p -> bmin
LEAF_NODE	411:16	411:16	15	p
LEAF_NODE	411:17	411:17	15	->
LEAF_NODE	411:19	411:19	15	bmin
LEAF_NODE	411:23	411:23	10	)
LEAF_NODE	411:25	411:25	9	&&
EXPR	411:29	411:40	9	p -> total > size
FIELD	411:29	411:32	10	p -> total
LEAF_NODE	411:29	411:29	11	p
LEAF_NODE	411:30	411:30	11	->
LEAF_NODE	411:32	411:32	11	total
REL_OPERATOR	411:38	411:38	10	>
LEAF_NODE	411:38	411:38	11	>
FIELD	411:40	411:40	10	size
LEAF_NODE	411:40	411:40	11	size
LEAF_NODE	411:44	411:44	6	)
STATEMENTS	412:10	412:10	6	
EXPR_STATEMENT	412:10	412:31	7	size = ( b = p ) -> total ;
EXPR	412:10	412:10	8	size = ( b = p ) -> total
ASSIGN	412:10	412:17	9	size = ( b = p ) -> total
LVAL	412:10	412:10	10	size
FIELD	412:10	412:10	11	size
LEAF_NODE	412:10	412:10	12	size
ASSIGN_OP	412:15	412:15	10	=
LEAF_NODE	412:15	412:15	11	=
RVAL	412:17	412:26	10	( b = p ) -> total
LEAF_NODE	412:17	412:17	11	(
ASSIGN	412:18	412:22	11	b = p
LVAL	412:18	412:18	12	b
FIELD	412:18	412:18	13	b
LEAF_NODE	412:18	412:18	14	b
ASSIGN_OP	412:20	412:20	12	=
LEAF_NODE	412:20	412:20	13	=
RVAL	412:22	412:22	12	p
FIELD	412:22	412:22	13	p
LEAF_NODE	412:22	412:22	14	p
LEAF_NODE	412:23	412:23	11	)
LEAF_NODE	412:24	412:24	11	->
LEAF_NODE	412:26	412:26	11	total
LEAF_NODE	412:31	412:31	8	;
LEAF_NODE	413:1	413:1	3	return
LEAF_NODE	413:8	413:8	3	(
LEAF_NODE	413:9	413:9	3	b
LEAF_NODE	413:10	413:10	3	)
LEAF_NODE	413:11	413:11	3	;
LEAF_NODE	414:0	414:0	2	}
FUNCTION_DEF	416:0	536:0	1	
RETURN_TYPE	416:0	416:7	2	static void
LEAF_NODE	416:0	416:0	3	static
TYPE_NAME	416:7	416:7	3	void
LEAF_NODE	416:7	416:7	4	void
FUNCTION_NAME	417:0	417:0	2	splitbox
LEAF_NODE	417:0	417:0	3	splitbox
PARAMETER_LIST	417:8	417:22	2	( Colorbox * ptr )
LEAF_NODE	417:8	417:8	3	(
PARAMETER_DECL	417:9	417:19	3	Colorbox * ptr
TYPE	417:9	417:17	4	Colorbox *
TYPE_NAME	417:9	417:9	5	Colorbox
LEAF_NODE	417:9	417:9	6	Colorbox
POINTER	417:17	417:17	5	*
LEAF_NODE	417:17	417:17	6	*
NAME	417:19	417:19	4	ptr
LEAF_NODE	417:19	417:19	5	ptr
LEAF_NODE	417:22	417:22	3	)
LEAF_NODE	418:0	418:0	2	{
STATEMENTS	419:1	535:1	2	
SIMPLE_DECL	419:1	419:21	3	uint32 [ B_LEN ] hist2 ;
VAR_DECL	419:1	419:9	4	uint32 [ B_LEN ] hist2
TYPE	419:1	419:14	5	uint32 [ B_LEN ]
TYPE_NAME	419:1	419:1	6	uint32
LEAF_NODE	419:1	419:1	7	uint32
TYPE_SUFFIX	419:14	419:20	6	[ B_LEN ]
LEAF_NODE	419:14	419:14	7	[
FIELD	419:15	419:15	7	B_LEN
LEAF_NODE	419:15	419:15	8	B_LEN
LEAF_NODE	419:20	419:20	7	]
NAME	419:9	419:9	5	hist2
LEAF_NODE	419:9	419:9	6	hist2
LEAF_NODE	419:21	419:21	4	;
SIMPLE_DECL	420:1	420:21	3	int first ; first = 0 , int last ; last = 0 ;
INIT_DECL_LIST	420:1	420:1	4	int first ; first = 0 , int last ; last = 0
VAR_DECL	420:1	420:6	5	int first ; first = 0
TYPE	420:1	420:1	6	int
TYPE_NAME	420:1	420:1	7	int
LEAF_NODE	420:1	420:1	8	int
NAME	420:6	420:6	6	first
LEAF_NODE	420:6	420:6	7	first
LEAF_NODE	0:0	0:0	6	;
INIT	420:6	420:6	6	first = 0
ASSIGN	420:6	420:12	7	first = 0
LVAL	420:6	420:6	8	first
NAME	420:6	420:6	9	first
LEAF_NODE	420:6	420:6	10	first
ASSIGN_OP	420:11	420:11	8	=
LEAF_NODE	420:11	420:11	9	=
RVAL	420:12	420:12	8	0
FIELD	420:12	420:12	9	0
LEAF_NODE	420:12	420:12	10	0
LEAF_NODE	420:13	420:13	5	,
VAR_DECL	420:1	420:15	5	int last ; last = 0
TYPE	420:1	420:1	6	int
TYPE_NAME	420:1	420:1	7	int
LEAF_NODE	420:1	420:1	8	int
NAME	420:15	420:15	6	last
LEAF_NODE	420:15	420:15	7	last
LEAF_NODE	0:0	0:0	6	;
INIT	420:15	420:15	6	last = 0
ASSIGN	420:15	420:20	7	last = 0
LVAL	420:15	420:15	8	last
NAME	420:15	420:15	9	last
LEAF_NODE	420:15	420:15	10	last
ASSIGN_OP	420:19	420:19	8	=
LEAF_NODE	420:19	420:19	9	=
RVAL	420:20	420:20	8	0
FIELD	420:20	420:20	9	0
LEAF_NODE	420:20	420:20	10	0
LEAF_NODE	420:21	420:21	4	;
LEAF_NODE	421:1	421:1	3	register
LEAF_NODE	421:10	421:10	3	Colorbox
LEAF_NODE	421:19	421:19	3	*
LEAF_NODE	421:20	421:20	3	new
LEAF_NODE	421:23	421:23	3	;
LEAF_NODE	422:1	422:1	3	register
SIMPLE_DECL	422:10	422:30	3	uint32 * iptr , uint32 * histp ;
INIT_DECL_LIST	422:10	422:10	4	uint32 * iptr , uint32 * histp
VAR_DECL	422:10	422:18	5	uint32 * iptr
TYPE	422:10	422:17	6	uint32 *
TYPE_NAME	422:10	422:10	7	uint32
LEAF_NODE	422:10	422:10	8	uint32
POINTER	422:17	422:17	7	*
LEAF_NODE	422:17	422:17	8	*
NAME	422:18	422:18	6	iptr
LEAF_NODE	422:18	422:18	7	iptr
LEAF_NODE	422:22	422:22	5	,
VAR_DECL	422:10	422:25	5	uint32 * histp
TYPE	422:10	422:24	6	uint32 *
TYPE_NAME	422:10	422:10	7	uint32
LEAF_NODE	422:10	422:10	8	uint32
POINTER	422:24	422:24	7	*
LEAF_NODE	422:24	422:24	8	*
NAME	422:25	422:25	6	histp
LEAF_NODE	422:25	422:25	7	histp
LEAF_NODE	422:30	422:30	4	;
LEAF_NODE	423:1	423:1	3	register
SIMPLE_DECL	423:10	423:18	3	int i , int j ;
INIT_DECL_LIST	423:10	423:10	4	int i , int j
VAR_DECL	423:10	423:14	5	int i
TYPE	423:10	423:10	6	int
TYPE_NAME	423:10	423:10	7	int
LEAF_NODE	423:10	423:10	8	int
NAME	423:14	423:14	6	i
LEAF_NODE	423:14	423:14	7	i
LEAF_NODE	423:15	423:15	5	,
VAR_DECL	423:10	423:17	5	int j
TYPE	423:10	423:10	6	int
TYPE_NAME	423:10	423:10	7	int
LEAF_NODE	423:10	423:10	8	int
NAME	423:17	423:17	6	j
LEAF_NODE	423:17	423:17	7	j
LEAF_NODE	423:18	423:18	4	;
LEAF_NODE	424:1	424:1	3	register
SIMPLE_DECL	424:10	424:22	3	int ir , int ig , int ib ;
INIT_DECL_LIST	424:10	424:10	4	int ir , int ig , int ib
VAR_DECL	424:10	424:14	5	int ir
TYPE	424:10	424:10	6	int
TYPE_NAME	424:10	424:10	7	int
LEAF_NODE	424:10	424:10	8	int
NAME	424:14	424:14	6	ir
LEAF_NODE	424:14	424:14	7	ir
LEAF_NODE	424:16	424:16	5	,
INIT_DECL_LIST	424:10	424:10	5	int ig , int ib
VAR_DECL	424:10	424:17	6	int ig
TYPE	424:10	424:10	7	int
TYPE_NAME	424:10	424:10	8	int
LEAF_NODE	424:10	424:10	9	int
NAME	424:17	424:17	7	ig
LEAF_NODE	424:17	424:17	8	ig
LEAF_NODE	424:19	424:19	6	,
VAR_DECL	424:10	424:20	6	int ib
TYPE	424:10	424:10	7	int
TYPE_NAME	424:10	424:10	8	int
LEAF_NODE	424:10	424:10	9	int
NAME	424:20	424:20	7	ib
LEAF_NODE	424:20	424:20	8	ib
LEAF_NODE	424:22	424:22	4	;
LEAF_NODE	425:1	425:1	3	register
SIMPLE_DECL	425:10	425:32	3	uint32 sum , uint32 sum1 , uint32 sum2 ;
INIT_DECL_LIST	425:10	425:10	4	uint32 sum , uint32 sum1 , uint32 sum2
VAR_DECL	425:10	425:17	5	uint32 sum
TYPE	425:10	425:10	6	uint32
TYPE_NAME	425:10	425:10	7	uint32
LEAF_NODE	425:10	425:10	8	uint32
NAME	425:17	425:17	6	sum
LEAF_NODE	425:17	425:17	7	sum
LEAF_NODE	425:20	425:20	5	,
INIT_DECL_LIST	425:10	425:10	5	uint32 sum1 , uint32 sum2
VAR_DECL	425:10	425:22	6	uint32 sum1
TYPE	425:10	425:10	7	uint32
TYPE_NAME	425:10	425:10	8	uint32
LEAF_NODE	425:10	425:10	9	uint32
NAME	425:22	425:22	7	sum1
LEAF_NODE	425:22	425:22	8	sum1
LEAF_NODE	425:26	425:26	6	,
VAR_DECL	425:10	425:28	6	uint32 sum2
TYPE	425:10	425:10	7	uint32
TYPE_NAME	425:10	425:10	8	uint32
LEAF_NODE	425:10	425:10	9	uint32
NAME	425:28	425:28	7	sum2
LEAF_NODE	425:28	425:28	8	sum2
LEAF_NODE	425:32	425:32	4	;
SIMPLE_DECL	426:1	426:31	3	enum CLASS_NAME BASE_CLASSES { RED , GREEN , BLUE } axis ;
VAR_DECL	426:1	426:27	4	enum CLASS_NAME BASE_CLASSES { RED , GREEN , BLUE } axis
TYPE	426:1	426:1	5	enum CLASS_NAME BASE_CLASSES { RED , GREEN , BLUE }
CLASS_DEF	426:1	426:25	6	enum CLASS_NAME BASE_CLASSES { RED , GREEN , BLUE }
LEAF_NODE	426:1	426:1	7	enum
LEAF_NODE	0:0	0:0	7	CLASS_NAME
LEAF_NODE	0:0	0:0	7	BASE_CLASSES
LEAF_NODE	426:6	426:6	7	{
CLASS_CONTENT	426:8	426:20	7	RED , GREEN , BLUE
LEAF_NODE	426:8	426:8	8	RED
LEAF_NODE	426:11	426:11	8	,
LEAF_NODE	426:13	426:13	8	GREEN
LEAF_NODE	426:18	426:18	8	,
LEAF_NODE	426:20	426:20	8	BLUE
LEAF_NODE	426:25	426:25	7	}
NAME	426:27	426:27	5	axis
LEAF_NODE	426:27	426:27	6	axis
LEAF_NODE	426:31	426:31	4	;
EXPR_STATEMENT	433:1	433:26	3	i = ptr -> rmax - ptr -> rmin ;
EXPR	433:1	433:1	4	i = ptr -> rmax - ptr -> rmin
ASSIGN	433:1	433:5	5	i = ptr -> rmax - ptr -> rmin
LVAL	433:1	433:1	6	i
FIELD	433:1	433:1	7	i
LEAF_NODE	433:1	433:1	8	i
ASSIGN_OP	433:3	433:3	6	=
LEAF_NODE	433:3	433:3	7	=
RVAL	433:5	433:17	6	ptr -> rmax - ptr -> rmin
FIELD	433:5	433:10	7	ptr -> rmax
LEAF_NODE	433:5	433:5	8	ptr
LEAF_NODE	433:8	433:8	8	->
LEAF_NODE	433:10	433:10	8	rmax
LEAF_NODE	433:15	433:15	7	-
FIELD	433:17	433:22	7	ptr -> rmin
LEAF_NODE	433:17	433:17	8	ptr
LEAF_NODE	433:20	433:20	8	->
LEAF_NODE	433:22	433:22	8	rmin
LEAF_NODE	433:26	433:26	4	;
SELECTION	434:1	435:2	3	
KEYWORD	434:1	434:1	4	if
LEAF_NODE	434:1	434:1	5	if
LEAF_NODE	434:4	434:4	4	(
CONDITION	434:5	434:5	4	i >= ptr -> gmax - ptr -> gmin && i >= ptr -> bmax - ptr -> bmin
EXPR	434:5	434:5	5	i >= ptr -> gmax - ptr -> gmin && i >= ptr -> bmax - ptr -> bmin
AND	434:5	434:35	6	i >= ptr -> gmax - ptr -> gmin && i >= ptr -> bmax - ptr -> bmin
EXPR	434:5	434:22	7	i >= ptr -> gmax - ptr -> gmin
FIELD	434:5	434:5	8	i
LEAF_NODE	434:5	434:5	9	i
REL_OPERATOR	434:7	434:7	8	>=
LEAF_NODE	434:7	434:7	9	>=
FIELD	434:10	434:15	8	ptr -> gmax
LEAF_NODE	434:10	434:10	9	ptr
LEAF_NODE	434:13	434:13	9	->
LEAF_NODE	434:15	434:15	9	gmax
LEAF_NODE	434:20	434:20	8	-
FIELD	434:22	434:27	8	ptr -> gmin
LEAF_NODE	434:22	434:22	9	ptr
LEAF_NODE	434:25	434:25	9	->
LEAF_NODE	434:27	434:27	9	gmin
LEAF_NODE	434:32	434:32	7	&&
EXPR	434:35	434:52	7	i >= ptr -> bmax - ptr -> bmin
FIELD	434:35	434:35	8	i
LEAF_NODE	434:35	434:35	9	i
REL_OPERATOR	434:37	434:37	8	>=
LEAF_NODE	434:37	434:37	9	>=
FIELD	434:40	434:45	8	ptr -> bmax
LEAF_NODE	434:40	434:40	9	ptr
LEAF_NODE	434:43	434:43	9	->
LEAF_NODE	434:45	434:45	9	bmax
LEAF_NODE	434:50	434:50	8	-
FIELD	434:52	434:57	8	ptr -> bmin
LEAF_NODE	434:52	434:52	9	ptr
LEAF_NODE	434:55	434:55	9	->
LEAF_NODE	434:57	434:57	9	bmin
LEAF_NODE	434:61	434:61	4	)
STATEMENTS	435:2	435:2	4	
EXPR_STATEMENT	435:2	435:12	5	axis = RED ;
EXPR	435:2	435:2	6	axis = RED
ASSIGN	435:2	435:9	7	axis = RED
LVAL	435:2	435:2	8	axis
FIELD	435:2	435:2	9	axis
LEAF_NODE	435:2	435:2	10	axis
ASSIGN_OP	435:7	435:7	8	=
LEAF_NODE	435:7	435:7	9	=
RVAL	435:9	435:9	8	RED
FIELD	435:9	435:9	9	RED
LEAF_NODE	435:9	435:9	10	RED
LEAF_NODE	435:12	435:12	6	;
SELECTION	436:1	436:6	3	
KEYWORD	436:1	436:1	4	else
LEAF_NODE	436:1	436:1	5	else
STATEMENTS	436:6	436:6	4	
SELECTION	436:6	437:2	5	
KEYWORD	436:6	436:6	6	if
LEAF_NODE	436:6	436:6	7	if
LEAF_NODE	436:9	436:9	6	(
CONDITION	436:10	436:10	6	ptr -> gmax - ptr -> gmin >= ptr -> bmax - ptr -> bmin
EXPR	436:10	436:47	7	ptr -> gmax - ptr -> gmin >= ptr -> bmax - ptr -> bmin
FIELD	436:10	436:15	8	ptr -> gmax
LEAF_NODE	436:10	436:10	9	ptr
LEAF_NODE	436:13	436:13	9	->
LEAF_NODE	436:15	436:15	9	gmax
LEAF_NODE	436:20	436:20	8	-
FIELD	436:22	436:27	8	ptr -> gmin
LEAF_NODE	436:22	436:22	9	ptr
LEAF_NODE	436:25	436:25	9	->
LEAF_NODE	436:27	436:27	9	gmin
REL_OPERATOR	436:32	436:32	8	>=
LEAF_NODE	436:32	436:32	9	>=
FIELD	436:35	436:40	8	ptr -> bmax
LEAF_NODE	436:35	436:35	9	ptr
LEAF_NODE	436:38	436:38	9	->
LEAF_NODE	436:40	436:40	9	bmax
LEAF_NODE	436:45	436:45	8	-
FIELD	436:47	436:52	8	ptr -> bmin
LEAF_NODE	436:47	436:47	9	ptr
LEAF_NODE	436:50	436:50	9	->
LEAF_NODE	436:52	436:52	9	bmin
LEAF_NODE	436:56	436:56	6	)
STATEMENTS	437:2	437:2	6	
EXPR_STATEMENT	437:2	437:14	7	axis = GREEN ;
EXPR	437:2	437:2	8	axis = GREEN
ASSIGN	437:2	437:9	9	axis = GREEN
LVAL	437:2	437:2	10	axis
FIELD	437:2	437:2	11	axis
LEAF_NODE	437:2	437:2	12	axis
ASSIGN_OP	437:7	437:7	10	=
LEAF_NODE	437:7	437:7	11	=
RVAL	437:9	437:9	10	GREEN
FIELD	437:9	437:9	11	GREEN
LEAF_NODE	437:9	437:9	12	GREEN
LEAF_NODE	437:14	437:14	8	;
SELECTION	438:1	439:2	3	
KEYWORD	438:1	438:1	4	else
LEAF_NODE	438:1	438:1	5	else
STATEMENTS	439:2	439:2	4	
EXPR_STATEMENT	439:2	439:13	5	axis = BLUE ;
EXPR	439:2	439:2	6	axis = BLUE
ASSIGN	439:2	439:9	7	axis = BLUE
LVAL	439:2	439:2	8	axis
FIELD	439:2	439:2	9	axis
LEAF_NODE	439:2	439:2	10	axis
ASSIGN_OP	439:7	439:7	8	=
LEAF_NODE	439:7	439:7	9	=
RVAL	439:9	439:9	8	BLUE
FIELD	439:9	439:9	9	BLUE
LEAF_NODE	439:9	439:9	10	BLUE
LEAF_NODE	439:13	439:13	6	;
SELECTION	441:1	441:15	3	
KEYWORD	441:1	441:1	4	switch
LEAF_NODE	441:1	441:1	5	switch
LEAF_NODE	441:8	441:8	4	(
CONDITION	441:9	441:9	4	axis
EXPR	441:9	441:9	5	axis
FIELD	441:9	441:9	6	axis
LEAF_NODE	441:9	441:9	7	axis
LEAF_NODE	441:13	441:13	4	)
STATEMENTS	441:15	486:1	4	
LEAF_NODE	441:15	441:15	5	{
STATEMENTS	442:1	485:9	5	
LABEL	442:1	442:9	6	case RED :
LEAF_NODE	442:1	442:1	7	case
LEAF_NODE	442:6	442:6	7	RED
LEAF_NODE	442:9	442:9	7	:
EXPR_STATEMENT	443:2	443:27	6	histp = & hist2 [ ptr -> rmin ] ;
EXPR	443:2	443:2	7	histp = & hist2 [ ptr -> rmin ]
ASSIGN	443:2	443:10	8	histp = & hist2 [ ptr -> rmin ]
LVAL	443:2	443:2	9	histp
FIELD	443:2	443:2	10	histp
LEAF_NODE	443:2	443:2	11	histp
ASSIGN_OP	443:8	443:8	9	=
LEAF_NODE	443:8	443:8	10	=
RVAL	443:10	443:10	9	& hist2 [ ptr -> rmin ]
UNARY_EXPR	443:10	443:11	10	& hist2 [ ptr -> rmin ]
UNARY_OPERATOR	443:10	443:10	11	&
LEAF_NODE	443:10	443:10	12	&
FIELD	443:11	443:26	11	hist2 [ ptr -> rmin ]
LEAF_NODE	443:11	443:11	12	hist2
LEAF_NODE	443:16	443:16	12	[
EXPR	443:17	443:17	12	ptr -> rmin
FIELD	443:17	443:22	13	ptr -> rmin
LEAF_NODE	443:17	443:17	14	ptr
LEAF_NODE	443:20	443:20	14	->
LEAF_NODE	443:22	443:22	14	rmin
LEAF_NODE	443:26	443:26	12	]
LEAF_NODE	443:27	443:27	7	;
ITERATION	444:9	444:53	6	
KEYWORD	444:9	444:9	7	for
LEAF_NODE	444:9	444:9	8	for
LEAF_NODE	444:13	444:13	7	(
FOR_INIT	444:14	444:28	7	ir = ptr -> rmin ;
EXPR	444:14	444:14	8	ir = ptr -> rmin
ASSIGN	444:14	444:19	9	ir = ptr -> rmin
LVAL	444:14	444:14	10	ir
FIELD	444:14	444:14	11	ir
LEAF_NODE	444:14	444:14	12	ir
ASSIGN_OP	444:17	444:17	10	=
LEAF_NODE	444:17	444:17	11	=
RVAL	444:19	444:19	10	ptr -> rmin
FIELD	444:19	444:24	11	ptr -> rmin
LEAF_NODE	444:19	444:19	12	ptr
LEAF_NODE	444:22	444:22	12	->
LEAF_NODE	444:24	444:24	12	rmin
LEAF_NODE	444:28	444:28	8	;
CONDITION	444:30	444:30	7	ir <= ptr -> rmax
EXPR	444:30	444:36	8	ir <= ptr -> rmax
FIELD	444:30	444:30	9	ir
LEAF_NODE	444:30	444:30	10	ir
REL_OPERATOR	444:33	444:33	9	<=
LEAF_NODE	444:33	444:33	10	<=
FIELD	444:36	444:41	9	ptr -> rmax
LEAF_NODE	444:36	444:36	10	ptr
LEAF_NODE	444:39	444:39	10	->
LEAF_NODE	444:41	444:41	10	rmax
LEAF_NODE	444:45	444:45	7	;
FOR_EXPR	444:47	444:47	7	++ ir
EXPR	444:47	444:49	8	++ ir
LEAF_NODE	444:47	444:47	9	++
FIELD	444:49	444:49	9	ir
LEAF_NODE	444:49	444:49	10	ir
LEAF_NODE	444:51	444:51	7	)
STATEMENTS	444:53	452:9	7	
LEAF_NODE	444:53	444:53	8	{
STATEMENTS	445:3	451:3	8	
EXPR_STATEMENT	445:3	445:13	9	* histp = 0 ;
EXPR	445:3	445:3	10	* histp = 0
ASSIGN	445:3	445:12	11	* histp = 0
LVAL	445:3	445:3	12	* histp
UNARY_EXPR	445:3	445:4	13	* histp
UNARY_OPERATOR	445:3	445:3	14	*
LEAF_NODE	445:3	445:3	15	*
FIELD	445:4	445:4	14	histp
LEAF_NODE	445:4	445:4	15	histp
ASSIGN_OP	445:10	445:10	12	=
LEAF_NODE	445:10	445:10	13	=
RVAL	445:12	445:12	12	0
FIELD	445:12	445:12	13	0
LEAF_NODE	445:12	445:12	14	0
LEAF_NODE	445:13	445:13	10	;
ITERATION	446:3	446:47	9	
KEYWORD	446:3	446:3	10	for
LEAF_NODE	446:3	446:3	11	for
LEAF_NODE	446:7	446:7	10	(
FOR_INIT	446:8	446:22	10	ig = ptr -> gmin ;
EXPR	446:8	446:8	11	ig = ptr -> gmin
ASSIGN	446:8	446:13	12	ig = ptr -> gmin
LVAL	446:8	446:8	13	ig
FIELD	446:8	446:8	14	ig
LEAF_NODE	446:8	446:8	15	ig
ASSIGN_OP	446:11	446:11	13	=
LEAF_NODE	446:11	446:11	14	=
RVAL	446:13	446:13	13	ptr -> gmin
FIELD	446:13	446:18	14	ptr -> gmin
LEAF_NODE	446:13	446:13	15	ptr
LEAF_NODE	446:16	446:16	15	->
LEAF_NODE	446:18	446:18	15	gmin
LEAF_NODE	446:22	446:22	11	;
CONDITION	446:24	446:24	10	ig <= ptr -> gmax
EXPR	446:24	446:30	11	ig <= ptr -> gmax
FIELD	446:24	446:24	12	ig
LEAF_NODE	446:24	446:24	13	ig
REL_OPERATOR	446:27	446:27	12	<=
LEAF_NODE	446:27	446:27	13	<=
FIELD	446:30	446:35	12	ptr -> gmax
LEAF_NODE	446:30	446:30	13	ptr
LEAF_NODE	446:33	446:33	13	->
LEAF_NODE	446:35	446:35	13	gmax
LEAF_NODE	446:39	446:39	10	;
FOR_EXPR	446:41	446:41	10	++ ig
EXPR	446:41	446:43	11	++ ig
LEAF_NODE	446:41	446:41	12	++
FIELD	446:43	446:43	12	ig
LEAF_NODE	446:43	446:43	13	ig
LEAF_NODE	446:45	446:45	10	)
STATEMENTS	446:47	450:3	10	
LEAF_NODE	446:47	446:47	11	{
STATEMENTS	447:4	448:4	11	
EXPR_STATEMENT	447:4	447:40	12	iptr = & histogram [ ir ] [ ig ] [ ptr -> bmin ] ;
EXPR	447:4	447:4	13	iptr = & histogram [ ir ] [ ig ] [ ptr -> bmin ]
ASSIGN	447:4	447:11	14	iptr = & histogram [ ir ] [ ig ] [ ptr -> bmin ]
LVAL	447:4	447:4	15	iptr
FIELD	447:4	447:4	16	iptr
LEAF_NODE	447:4	447:4	17	iptr
ASSIGN_OP	447:9	447:9	15	=
LEAF_NODE	447:9	447:9	16	=
RVAL	447:11	447:11	15	& histogram [ ir ] [ ig ] [ ptr -> bmin ]
UNARY_EXPR	447:11	447:12	16	& histogram [ ir ] [ ig ] [ ptr -> bmin ]
UNARY_OPERATOR	447:11	447:11	17	&
LEAF_NODE	447:11	447:11	18	&
FIELD	447:12	447:39	17	histogram [ ir ] [ ig ] [ ptr -> bmin ]
LEAF_NODE	447:12	447:12	18	histogram
LEAF_NODE	447:21	447:21	18	[
EXPR	447:22	447:22	18	ir
FIELD	447:22	447:22	19	ir
LEAF_NODE	447:22	447:22	20	ir
LEAF_NODE	447:24	447:24	18	]
LEAF_NODE	447:25	447:25	18	[
EXPR	447:26	447:26	18	ig
FIELD	447:26	447:26	19	ig
LEAF_NODE	447:26	447:26	20	ig
LEAF_NODE	447:28	447:28	18	]
LEAF_NODE	447:29	447:29	18	[
EXPR	447:30	447:30	18	ptr -> bmin
FIELD	447:30	447:35	19	ptr -> bmin
LEAF_NODE	447:30	447:30	20	ptr
LEAF_NODE	447:33	447:33	20	->
LEAF_NODE	447:35	447:35	20	bmin
LEAF_NODE	447:39	447:39	18	]
LEAF_NODE	447:40	447:40	13	;
ITERATION	448:4	449:5	12	
KEYWORD	448:4	448:4	13	for
LEAF_NODE	448:4	448:4	14	for
LEAF_NODE	448:8	448:8	13	(
FOR_INIT	448:9	448:23	13	ib = ptr -> bmin ;
EXPR	448:9	448:9	14	ib = ptr -> bmin
ASSIGN	448:9	448:14	15	ib = ptr -> bmin
LVAL	448:9	448:9	16	ib
FIELD	448:9	448:9	17	ib
LEAF_NODE	448:9	448:9	18	ib
ASSIGN_OP	448:12	448:12	16	=
LEAF_NODE	448:12	448:12	17	=
RVAL	448:14	448:14	16	ptr -> bmin
FIELD	448:14	448:19	17	ptr -> bmin
LEAF_NODE	448:14	448:14	18	ptr
LEAF_NODE	448:17	448:17	18	->
LEAF_NODE	448:19	448:19	18	bmin
LEAF_NODE	448:23	448:23	14	;
CONDITION	448:25	448:25	13	ib <= ptr -> bmax
EXPR	448:25	448:31	14	ib <= ptr -> bmax
FIELD	448:25	448:25	15	ib
LEAF_NODE	448:25	448:25	16	ib
REL_OPERATOR	448:28	448:28	15	<=
LEAF_NODE	448:28	448:28	16	<=
FIELD	448:31	448:36	15	ptr -> bmax
LEAF_NODE	448:31	448:31	16	ptr
LEAF_NODE	448:34	448:34	16	->
LEAF_NODE	448:36	448:36	16	bmax
LEAF_NODE	448:40	448:40	13	;
FOR_EXPR	448:42	448:42	13	++ ib
EXPR	448:42	448:44	14	++ ib
LEAF_NODE	448:42	448:42	15	++
FIELD	448:44	448:44	15	ib
LEAF_NODE	448:44	448:44	16	ib
LEAF_NODE	448:46	448:46	13	)
STATEMENTS	449:5	449:5	13	
EXPR_STATEMENT	449:5	449:22	14	* histp += * iptr ++ ;
EXPR	449:5	449:5	15	* histp += * iptr ++
ASSIGN	449:5	449:15	16	* histp += * iptr ++
LVAL	449:5	449:5	17	* histp
UNARY_EXPR	449:5	449:6	18	* histp
UNARY_OPERATOR	449:5	449:5	19	*
LEAF_NODE	449:5	449:5	20	*
FIELD	449:6	449:6	19	histp
LEAF_NODE	449:6	449:6	20	histp
ASSIGN_OP	449:12	449:12	17	+=
LEAF_NODE	449:12	449:12	18	+=
RVAL	449:15	449:15	17	* iptr ++
UNARY_EXPR	449:15	449:16	18	* iptr ++
UNARY_OPERATOR	449:15	449:15	19	*
LEAF_NODE	449:15	449:15	20	*
FIELD	449:16	449:20	19	iptr ++
LEAF_NODE	449:16	449:16	20	iptr
LEAF_NODE	449:20	449:20	20	++
LEAF_NODE	449:22	449:22	15	;
LEAF_NODE	450:3	450:3	11	}
EXPR_STATEMENT	451:3	451:10	9	histp ++ ;
EXPR	451:3	451:3	10	histp ++
FIELD	451:3	451:8	11	histp ++
LEAF_NODE	451:3	451:3	12	histp
LEAF_NODE	451:8	451:8	12	++
LEAF_NODE	451:10	451:10	10	;
LEAF_NODE	452:9	452:9	8	}
EXPR_STATEMENT	453:9	453:26	6	first = ptr -> rmin ;
EXPR	453:9	453:9	7	first = ptr -> rmin
ASSIGN	453:9	453:17	8	first = ptr -> rmin
LVAL	453:9	453:9	9	first
FIELD	453:9	453:9	10	first
LEAF_NODE	453:9	453:9	11	first
ASSIGN_OP	453:15	453:15	9	=
LEAF_NODE	453:15	453:15	10	=
RVAL	453:17	453:17	9	ptr -> rmin
FIELD	453:17	453:22	10	ptr -> rmin
LEAF_NODE	453:17	453:17	11	ptr
LEAF_NODE	453:20	453:20	11	->
LEAF_NODE	453:22	453:22	11	rmin
LEAF_NODE	453:26	453:26	7	;
EXPR_STATEMENT	454:2	454:18	6	last = ptr -> rmax ;
EXPR	454:2	454:2	7	last = ptr -> rmax
ASSIGN	454:2	454:9	8	last = ptr -> rmax
LVAL	454:2	454:2	9	last
FIELD	454:2	454:2	10	last
LEAF_NODE	454:2	454:2	11	last
ASSIGN_OP	454:7	454:7	9	=
LEAF_NODE	454:7	454:7	10	=
RVAL	454:9	454:9	9	ptr -> rmax
FIELD	454:9	454:14	10	ptr -> rmax
LEAF_NODE	454:9	454:9	11	ptr
LEAF_NODE	454:12	454:12	11	->
LEAF_NODE	454:14	454:14	11	rmax
LEAF_NODE	454:18	454:18	7	;
JUMP_STATEMENT	455:9	455:14	6	break DESTINATION ;
KEYWORD	455:9	455:9	7	break
LEAF_NODE	455:9	455:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	455:14	455:14	7	;
LABEL	456:1	456:11	6	case GREEN :
LEAF_NODE	456:1	456:1	7	case
LEAF_NODE	456:6	456:6	7	GREEN
LEAF_NODE	456:11	456:11	7	:
EXPR_STATEMENT	457:9	457:34	6	histp = & hist2 [ ptr -> gmin ] ;
EXPR	457:9	457:9	7	histp = & hist2 [ ptr -> gmin ]
ASSIGN	457:9	457:17	8	histp = & hist2 [ ptr -> gmin ]
LVAL	457:9	457:9	9	histp
FIELD	457:9	457:9	10	histp
LEAF_NODE	457:9	457:9	11	histp
ASSIGN_OP	457:15	457:15	9	=
LEAF_NODE	457:15	457:15	10	=
RVAL	457:17	457:17	9	& hist2 [ ptr -> gmin ]
UNARY_EXPR	457:17	457:18	10	& hist2 [ ptr -> gmin ]
UNARY_OPERATOR	457:17	457:17	11	&
LEAF_NODE	457:17	457:17	12	&
FIELD	457:18	457:33	11	hist2 [ ptr -> gmin ]
LEAF_NODE	457:18	457:18	12	hist2
LEAF_NODE	457:23	457:23	12	[
EXPR	457:24	457:24	12	ptr -> gmin
FIELD	457:24	457:29	13	ptr -> gmin
LEAF_NODE	457:24	457:24	14	ptr
LEAF_NODE	457:27	457:27	14	->
LEAF_NODE	457:29	457:29	14	gmin
LEAF_NODE	457:33	457:33	12	]
LEAF_NODE	457:34	457:34	7	;
ITERATION	458:9	458:53	6	
KEYWORD	458:9	458:9	7	for
LEAF_NODE	458:9	458:9	8	for
LEAF_NODE	458:13	458:13	7	(
FOR_INIT	458:14	458:28	7	ig = ptr -> gmin ;
EXPR	458:14	458:14	8	ig = ptr -> gmin
ASSIGN	458:14	458:19	9	ig = ptr -> gmin
LVAL	458:14	458:14	10	ig
FIELD	458:14	458:14	11	ig
LEAF_NODE	458:14	458:14	12	ig
ASSIGN_OP	458:17	458:17	10	=
LEAF_NODE	458:17	458:17	11	=
RVAL	458:19	458:19	10	ptr -> gmin
FIELD	458:19	458:24	11	ptr -> gmin
LEAF_NODE	458:19	458:19	12	ptr
LEAF_NODE	458:22	458:22	12	->
LEAF_NODE	458:24	458:24	12	gmin
LEAF_NODE	458:28	458:28	8	;
CONDITION	458:30	458:30	7	ig <= ptr -> gmax
EXPR	458:30	458:36	8	ig <= ptr -> gmax
FIELD	458:30	458:30	9	ig
LEAF_NODE	458:30	458:30	10	ig
REL_OPERATOR	458:33	458:33	9	<=
LEAF_NODE	458:33	458:33	10	<=
FIELD	458:36	458:41	9	ptr -> gmax
LEAF_NODE	458:36	458:36	10	ptr
LEAF_NODE	458:39	458:39	10	->
LEAF_NODE	458:41	458:41	10	gmax
LEAF_NODE	458:45	458:45	7	;
FOR_EXPR	458:47	458:47	7	++ ig
EXPR	458:47	458:49	8	++ ig
LEAF_NODE	458:47	458:47	9	++
FIELD	458:49	458:49	9	ig
LEAF_NODE	458:49	458:49	10	ig
LEAF_NODE	458:51	458:51	7	)
STATEMENTS	458:53	466:9	7	
LEAF_NODE	458:53	458:53	8	{
STATEMENTS	459:3	465:3	8	
EXPR_STATEMENT	459:3	459:13	9	* histp = 0 ;
EXPR	459:3	459:3	10	* histp = 0
ASSIGN	459:3	459:12	11	* histp = 0
LVAL	459:3	459:3	12	* histp
UNARY_EXPR	459:3	459:4	13	* histp
UNARY_OPERATOR	459:3	459:3	14	*
LEAF_NODE	459:3	459:3	15	*
FIELD	459:4	459:4	14	histp
LEAF_NODE	459:4	459:4	15	histp
ASSIGN_OP	459:10	459:10	12	=
LEAF_NODE	459:10	459:10	13	=
RVAL	459:12	459:12	12	0
FIELD	459:12	459:12	13	0
LEAF_NODE	459:12	459:12	14	0
LEAF_NODE	459:13	459:13	10	;
ITERATION	460:3	460:47	9	
KEYWORD	460:3	460:3	10	for
LEAF_NODE	460:3	460:3	11	for
LEAF_NODE	460:7	460:7	10	(
FOR_INIT	460:8	460:22	10	ir = ptr -> rmin ;
EXPR	460:8	460:8	11	ir = ptr -> rmin
ASSIGN	460:8	460:13	12	ir = ptr -> rmin
LVAL	460:8	460:8	13	ir
FIELD	460:8	460:8	14	ir
LEAF_NODE	460:8	460:8	15	ir
ASSIGN_OP	460:11	460:11	13	=
LEAF_NODE	460:11	460:11	14	=
RVAL	460:13	460:13	13	ptr -> rmin
FIELD	460:13	460:18	14	ptr -> rmin
LEAF_NODE	460:13	460:13	15	ptr
LEAF_NODE	460:16	460:16	15	->
LEAF_NODE	460:18	460:18	15	rmin
LEAF_NODE	460:22	460:22	11	;
CONDITION	460:24	460:24	10	ir <= ptr -> rmax
EXPR	460:24	460:30	11	ir <= ptr -> rmax
FIELD	460:24	460:24	12	ir
LEAF_NODE	460:24	460:24	13	ir
REL_OPERATOR	460:27	460:27	12	<=
LEAF_NODE	460:27	460:27	13	<=
FIELD	460:30	460:35	12	ptr -> rmax
LEAF_NODE	460:30	460:30	13	ptr
LEAF_NODE	460:33	460:33	13	->
LEAF_NODE	460:35	460:35	13	rmax
LEAF_NODE	460:39	460:39	10	;
FOR_EXPR	460:41	460:41	10	++ ir
EXPR	460:41	460:43	11	++ ir
LEAF_NODE	460:41	460:41	12	++
FIELD	460:43	460:43	12	ir
LEAF_NODE	460:43	460:43	13	ir
LEAF_NODE	460:45	460:45	10	)
STATEMENTS	460:47	464:3	10	
LEAF_NODE	460:47	460:47	11	{
STATEMENTS	461:4	462:4	11	
EXPR_STATEMENT	461:4	461:40	12	iptr = & histogram [ ir ] [ ig ] [ ptr -> bmin ] ;
EXPR	461:4	461:4	13	iptr = & histogram [ ir ] [ ig ] [ ptr -> bmin ]
ASSIGN	461:4	461:11	14	iptr = & histogram [ ir ] [ ig ] [ ptr -> bmin ]
LVAL	461:4	461:4	15	iptr
FIELD	461:4	461:4	16	iptr
LEAF_NODE	461:4	461:4	17	iptr
ASSIGN_OP	461:9	461:9	15	=
LEAF_NODE	461:9	461:9	16	=
RVAL	461:11	461:11	15	& histogram [ ir ] [ ig ] [ ptr -> bmin ]
UNARY_EXPR	461:11	461:12	16	& histogram [ ir ] [ ig ] [ ptr -> bmin ]
UNARY_OPERATOR	461:11	461:11	17	&
LEAF_NODE	461:11	461:11	18	&
FIELD	461:12	461:39	17	histogram [ ir ] [ ig ] [ ptr -> bmin ]
LEAF_NODE	461:12	461:12	18	histogram
LEAF_NODE	461:21	461:21	18	[
EXPR	461:22	461:22	18	ir
FIELD	461:22	461:22	19	ir
LEAF_NODE	461:22	461:22	20	ir
LEAF_NODE	461:24	461:24	18	]
LEAF_NODE	461:25	461:25	18	[
EXPR	461:26	461:26	18	ig
FIELD	461:26	461:26	19	ig
LEAF_NODE	461:26	461:26	20	ig
LEAF_NODE	461:28	461:28	18	]
LEAF_NODE	461:29	461:29	18	[
EXPR	461:30	461:30	18	ptr -> bmin
FIELD	461:30	461:35	19	ptr -> bmin
LEAF_NODE	461:30	461:30	20	ptr
LEAF_NODE	461:33	461:33	20	->
LEAF_NODE	461:35	461:35	20	bmin
LEAF_NODE	461:39	461:39	18	]
LEAF_NODE	461:40	461:40	13	;
ITERATION	462:4	463:5	12	
KEYWORD	462:4	462:4	13	for
LEAF_NODE	462:4	462:4	14	for
LEAF_NODE	462:8	462:8	13	(
FOR_INIT	462:9	462:23	13	ib = ptr -> bmin ;
EXPR	462:9	462:9	14	ib = ptr -> bmin
ASSIGN	462:9	462:14	15	ib = ptr -> bmin
LVAL	462:9	462:9	16	ib
FIELD	462:9	462:9	17	ib
LEAF_NODE	462:9	462:9	18	ib
ASSIGN_OP	462:12	462:12	16	=
LEAF_NODE	462:12	462:12	17	=
RVAL	462:14	462:14	16	ptr -> bmin
FIELD	462:14	462:19	17	ptr -> bmin
LEAF_NODE	462:14	462:14	18	ptr
LEAF_NODE	462:17	462:17	18	->
LEAF_NODE	462:19	462:19	18	bmin
LEAF_NODE	462:23	462:23	14	;
CONDITION	462:25	462:25	13	ib <= ptr -> bmax
EXPR	462:25	462:31	14	ib <= ptr -> bmax
FIELD	462:25	462:25	15	ib
LEAF_NODE	462:25	462:25	16	ib
REL_OPERATOR	462:28	462:28	15	<=
LEAF_NODE	462:28	462:28	16	<=
FIELD	462:31	462:36	15	ptr -> bmax
LEAF_NODE	462:31	462:31	16	ptr
LEAF_NODE	462:34	462:34	16	->
LEAF_NODE	462:36	462:36	16	bmax
LEAF_NODE	462:40	462:40	13	;
FOR_EXPR	462:42	462:42	13	++ ib
EXPR	462:42	462:44	14	++ ib
LEAF_NODE	462:42	462:42	15	++
FIELD	462:44	462:44	15	ib
LEAF_NODE	462:44	462:44	16	ib
LEAF_NODE	462:46	462:46	13	)
STATEMENTS	463:5	463:5	13	
EXPR_STATEMENT	463:5	463:22	14	* histp += * iptr ++ ;
EXPR	463:5	463:5	15	* histp += * iptr ++
ASSIGN	463:5	463:15	16	* histp += * iptr ++
LVAL	463:5	463:5	17	* histp
UNARY_EXPR	463:5	463:6	18	* histp
UNARY_OPERATOR	463:5	463:5	19	*
LEAF_NODE	463:5	463:5	20	*
FIELD	463:6	463:6	19	histp
LEAF_NODE	463:6	463:6	20	histp
ASSIGN_OP	463:12	463:12	17	+=
LEAF_NODE	463:12	463:12	18	+=
RVAL	463:15	463:15	17	* iptr ++
UNARY_EXPR	463:15	463:16	18	* iptr ++
UNARY_OPERATOR	463:15	463:15	19	*
LEAF_NODE	463:15	463:15	20	*
FIELD	463:16	463:20	19	iptr ++
LEAF_NODE	463:16	463:16	20	iptr
LEAF_NODE	463:20	463:20	20	++
LEAF_NODE	463:22	463:22	15	;
LEAF_NODE	464:3	464:3	11	}
EXPR_STATEMENT	465:3	465:10	9	histp ++ ;
EXPR	465:3	465:3	10	histp ++
FIELD	465:3	465:8	11	histp ++
LEAF_NODE	465:3	465:3	12	histp
LEAF_NODE	465:8	465:8	12	++
LEAF_NODE	465:10	465:10	10	;
LEAF_NODE	466:9	466:9	8	}
EXPR_STATEMENT	467:9	467:26	6	first = ptr -> gmin ;
EXPR	467:9	467:9	7	first = ptr -> gmin
ASSIGN	467:9	467:17	8	first = ptr -> gmin
LVAL	467:9	467:9	9	first
FIELD	467:9	467:9	10	first
LEAF_NODE	467:9	467:9	11	first
ASSIGN_OP	467:15	467:15	9	=
LEAF_NODE	467:15	467:15	10	=
RVAL	467:17	467:17	9	ptr -> gmin
FIELD	467:17	467:22	10	ptr -> gmin
LEAF_NODE	467:17	467:17	11	ptr
LEAF_NODE	467:20	467:20	11	->
LEAF_NODE	467:22	467:22	11	gmin
LEAF_NODE	467:26	467:26	7	;
EXPR_STATEMENT	468:2	468:18	6	last = ptr -> gmax ;
EXPR	468:2	468:2	7	last = ptr -> gmax
ASSIGN	468:2	468:9	8	last = ptr -> gmax
LVAL	468:2	468:2	9	last
FIELD	468:2	468:2	10	last
LEAF_NODE	468:2	468:2	11	last
ASSIGN_OP	468:7	468:7	9	=
LEAF_NODE	468:7	468:7	10	=
RVAL	468:9	468:9	9	ptr -> gmax
FIELD	468:9	468:14	10	ptr -> gmax
LEAF_NODE	468:9	468:9	11	ptr
LEAF_NODE	468:12	468:12	11	->
LEAF_NODE	468:14	468:14	11	gmax
LEAF_NODE	468:18	468:18	7	;
JUMP_STATEMENT	469:9	469:14	6	break DESTINATION ;
KEYWORD	469:9	469:9	7	break
LEAF_NODE	469:9	469:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	469:14	469:14	7	;
LABEL	470:1	470:10	6	case BLUE :
LEAF_NODE	470:1	470:1	7	case
LEAF_NODE	470:6	470:6	7	BLUE
LEAF_NODE	470:10	470:10	7	:
EXPR_STATEMENT	471:9	471:34	6	histp = & hist2 [ ptr -> bmin ] ;
EXPR	471:9	471:9	7	histp = & hist2 [ ptr -> bmin ]
ASSIGN	471:9	471:17	8	histp = & hist2 [ ptr -> bmin ]
LVAL	471:9	471:9	9	histp
FIELD	471:9	471:9	10	histp
LEAF_NODE	471:9	471:9	11	histp
ASSIGN_OP	471:15	471:15	9	=
LEAF_NODE	471:15	471:15	10	=
RVAL	471:17	471:17	9	& hist2 [ ptr -> bmin ]
UNARY_EXPR	471:17	471:18	10	& hist2 [ ptr -> bmin ]
UNARY_OPERATOR	471:17	471:17	11	&
LEAF_NODE	471:17	471:17	12	&
FIELD	471:18	471:33	11	hist2 [ ptr -> bmin ]
LEAF_NODE	471:18	471:18	12	hist2
LEAF_NODE	471:23	471:23	12	[
EXPR	471:24	471:24	12	ptr -> bmin
FIELD	471:24	471:29	13	ptr -> bmin
LEAF_NODE	471:24	471:24	14	ptr
LEAF_NODE	471:27	471:27	14	->
LEAF_NODE	471:29	471:29	14	bmin
LEAF_NODE	471:33	471:33	12	]
LEAF_NODE	471:34	471:34	7	;
ITERATION	472:9	472:53	6	
KEYWORD	472:9	472:9	7	for
LEAF_NODE	472:9	472:9	8	for
LEAF_NODE	472:13	472:13	7	(
FOR_INIT	472:14	472:28	7	ib = ptr -> bmin ;
EXPR	472:14	472:14	8	ib = ptr -> bmin
ASSIGN	472:14	472:19	9	ib = ptr -> bmin
LVAL	472:14	472:14	10	ib
FIELD	472:14	472:14	11	ib
LEAF_NODE	472:14	472:14	12	ib
ASSIGN_OP	472:17	472:17	10	=
LEAF_NODE	472:17	472:17	11	=
RVAL	472:19	472:19	10	ptr -> bmin
FIELD	472:19	472:24	11	ptr -> bmin
LEAF_NODE	472:19	472:19	12	ptr
LEAF_NODE	472:22	472:22	12	->
LEAF_NODE	472:24	472:24	12	bmin
LEAF_NODE	472:28	472:28	8	;
CONDITION	472:30	472:30	7	ib <= ptr -> bmax
EXPR	472:30	472:36	8	ib <= ptr -> bmax
FIELD	472:30	472:30	9	ib
LEAF_NODE	472:30	472:30	10	ib
REL_OPERATOR	472:33	472:33	9	<=
LEAF_NODE	472:33	472:33	10	<=
FIELD	472:36	472:41	9	ptr -> bmax
LEAF_NODE	472:36	472:36	10	ptr
LEAF_NODE	472:39	472:39	10	->
LEAF_NODE	472:41	472:41	10	bmax
LEAF_NODE	472:45	472:45	7	;
FOR_EXPR	472:47	472:47	7	++ ib
EXPR	472:47	472:49	8	++ ib
LEAF_NODE	472:47	472:47	9	++
FIELD	472:49	472:49	9	ib
LEAF_NODE	472:49	472:49	10	ib
LEAF_NODE	472:51	472:51	7	)
STATEMENTS	472:53	482:9	7	
LEAF_NODE	472:53	472:53	8	{
STATEMENTS	473:3	481:3	8	
EXPR_STATEMENT	473:3	473:13	9	* histp = 0 ;
EXPR	473:3	473:3	10	* histp = 0
ASSIGN	473:3	473:12	11	* histp = 0
LVAL	473:3	473:3	12	* histp
UNARY_EXPR	473:3	473:4	13	* histp
UNARY_OPERATOR	473:3	473:3	14	*
LEAF_NODE	473:3	473:3	15	*
FIELD	473:4	473:4	14	histp
LEAF_NODE	473:4	473:4	15	histp
ASSIGN_OP	473:10	473:10	12	=
LEAF_NODE	473:10	473:10	13	=
RVAL	473:12	473:12	12	0
FIELD	473:12	473:12	13	0
LEAF_NODE	473:12	473:12	14	0
LEAF_NODE	473:13	473:13	10	;
ITERATION	474:3	474:47	9	
KEYWORD	474:3	474:3	10	for
LEAF_NODE	474:3	474:3	11	for
LEAF_NODE	474:7	474:7	10	(
FOR_INIT	474:8	474:22	10	ir = ptr -> rmin ;
EXPR	474:8	474:8	11	ir = ptr -> rmin
ASSIGN	474:8	474:13	12	ir = ptr -> rmin
LVAL	474:8	474:8	13	ir
FIELD	474:8	474:8	14	ir
LEAF_NODE	474:8	474:8	15	ir
ASSIGN_OP	474:11	474:11	13	=
LEAF_NODE	474:11	474:11	14	=
RVAL	474:13	474:13	13	ptr -> rmin
FIELD	474:13	474:18	14	ptr -> rmin
LEAF_NODE	474:13	474:13	15	ptr
LEAF_NODE	474:16	474:16	15	->
LEAF_NODE	474:18	474:18	15	rmin
LEAF_NODE	474:22	474:22	11	;
CONDITION	474:24	474:24	10	ir <= ptr -> rmax
EXPR	474:24	474:30	11	ir <= ptr -> rmax
FIELD	474:24	474:24	12	ir
LEAF_NODE	474:24	474:24	13	ir
REL_OPERATOR	474:27	474:27	12	<=
LEAF_NODE	474:27	474:27	13	<=
FIELD	474:30	474:35	12	ptr -> rmax
LEAF_NODE	474:30	474:30	13	ptr
LEAF_NODE	474:33	474:33	13	->
LEAF_NODE	474:35	474:35	13	rmax
LEAF_NODE	474:39	474:39	10	;
FOR_EXPR	474:41	474:41	10	++ ir
EXPR	474:41	474:43	11	++ ir
LEAF_NODE	474:41	474:41	12	++
FIELD	474:43	474:43	12	ir
LEAF_NODE	474:43	474:43	13	ir
LEAF_NODE	474:45	474:45	10	)
STATEMENTS	474:47	480:3	10	
LEAF_NODE	474:47	474:47	11	{
STATEMENTS	475:4	476:4	11	
EXPR_STATEMENT	475:4	475:40	12	iptr = & histogram [ ir ] [ ptr -> gmin ] [ ib ] ;
EXPR	475:4	475:4	13	iptr = & histogram [ ir ] [ ptr -> gmin ] [ ib ]
ASSIGN	475:4	475:11	14	iptr = & histogram [ ir ] [ ptr -> gmin ] [ ib ]
LVAL	475:4	475:4	15	iptr
FIELD	475:4	475:4	16	iptr
LEAF_NODE	475:4	475:4	17	iptr
ASSIGN_OP	475:9	475:9	15	=
LEAF_NODE	475:9	475:9	16	=
RVAL	475:11	475:11	15	& histogram [ ir ] [ ptr -> gmin ] [ ib ]
UNARY_EXPR	475:11	475:12	16	& histogram [ ir ] [ ptr -> gmin ] [ ib ]
UNARY_OPERATOR	475:11	475:11	17	&
LEAF_NODE	475:11	475:11	18	&
FIELD	475:12	475:39	17	histogram [ ir ] [ ptr -> gmin ] [ ib ]
LEAF_NODE	475:12	475:12	18	histogram
LEAF_NODE	475:21	475:21	18	[
EXPR	475:22	475:22	18	ir
FIELD	475:22	475:22	19	ir
LEAF_NODE	475:22	475:22	20	ir
LEAF_NODE	475:24	475:24	18	]
LEAF_NODE	475:25	475:25	18	[
EXPR	475:26	475:26	18	ptr -> gmin
FIELD	475:26	475:31	19	ptr -> gmin
LEAF_NODE	475:26	475:26	20	ptr
LEAF_NODE	475:29	475:29	20	->
LEAF_NODE	475:31	475:31	20	gmin
LEAF_NODE	475:35	475:35	18	]
LEAF_NODE	475:36	475:36	18	[
EXPR	475:37	475:37	18	ib
FIELD	475:37	475:37	19	ib
LEAF_NODE	475:37	475:37	20	ib
LEAF_NODE	475:39	475:39	18	]
LEAF_NODE	475:40	475:40	13	;
ITERATION	476:4	476:48	12	
KEYWORD	476:4	476:4	13	for
LEAF_NODE	476:4	476:4	14	for
LEAF_NODE	476:8	476:8	13	(
FOR_INIT	476:9	476:23	13	ig = ptr -> gmin ;
EXPR	476:9	476:9	14	ig = ptr -> gmin
ASSIGN	476:9	476:14	15	ig = ptr -> gmin
LVAL	476:9	476:9	16	ig
FIELD	476:9	476:9	17	ig
LEAF_NODE	476:9	476:9	18	ig
ASSIGN_OP	476:12	476:12	16	=
LEAF_NODE	476:12	476:12	17	=
RVAL	476:14	476:14	16	ptr -> gmin
FIELD	476:14	476:19	17	ptr -> gmin
LEAF_NODE	476:14	476:14	18	ptr
LEAF_NODE	476:17	476:17	18	->
LEAF_NODE	476:19	476:19	18	gmin
LEAF_NODE	476:23	476:23	14	;
CONDITION	476:25	476:25	13	ig <= ptr -> gmax
EXPR	476:25	476:31	14	ig <= ptr -> gmax
FIELD	476:25	476:25	15	ig
LEAF_NODE	476:25	476:25	16	ig
REL_OPERATOR	476:28	476:28	15	<=
LEAF_NODE	476:28	476:28	16	<=
FIELD	476:31	476:36	15	ptr -> gmax
LEAF_NODE	476:31	476:31	16	ptr
LEAF_NODE	476:34	476:34	16	->
LEAF_NODE	476:36	476:36	16	gmax
LEAF_NODE	476:40	476:40	13	;
FOR_EXPR	476:42	476:42	13	++ ig
EXPR	476:42	476:44	14	++ ig
LEAF_NODE	476:42	476:42	15	++
FIELD	476:44	476:44	15	ig
LEAF_NODE	476:44	476:44	16	ig
LEAF_NODE	476:46	476:46	13	)
STATEMENTS	476:48	479:4	13	
LEAF_NODE	476:48	476:48	14	{
STATEMENTS	477:5	478:5	14	
EXPR_STATEMENT	477:5	477:20	15	* histp += * iptr ;
EXPR	477:5	477:5	16	* histp += * iptr
ASSIGN	477:5	477:15	17	* histp += * iptr
LVAL	477:5	477:5	18	* histp
UNARY_EXPR	477:5	477:6	19	* histp
UNARY_OPERATOR	477:5	477:5	20	*
LEAF_NODE	477:5	477:5	21	*
FIELD	477:6	477:6	20	histp
LEAF_NODE	477:6	477:6	21	histp
ASSIGN_OP	477:12	477:12	18	+=
LEAF_NODE	477:12	477:12	19	+=
RVAL	477:15	477:15	18	* iptr
UNARY_EXPR	477:15	477:16	19	* iptr
UNARY_OPERATOR	477:15	477:15	20	*
LEAF_NODE	477:15	477:15	21	*
FIELD	477:16	477:16	20	iptr
LEAF_NODE	477:16	477:16	21	iptr
LEAF_NODE	477:20	477:20	16	;
EXPR_STATEMENT	478:5	478:18	15	iptr += B_LEN ;
EXPR	478:5	478:5	16	iptr += B_LEN
ASSIGN	478:5	478:13	17	iptr += B_LEN
LVAL	478:5	478:5	18	iptr
FIELD	478:5	478:5	19	iptr
LEAF_NODE	478:5	478:5	20	iptr
ASSIGN_OP	478:10	478:10	18	+=
LEAF_NODE	478:10	478:10	19	+=
RVAL	478:13	478:13	18	B_LEN
FIELD	478:13	478:13	19	B_LEN
LEAF_NODE	478:13	478:13	20	B_LEN
LEAF_NODE	478:18	478:18	16	;
LEAF_NODE	479:4	479:4	14	}
LEAF_NODE	480:3	480:3	11	}
EXPR_STATEMENT	481:3	481:10	9	histp ++ ;
EXPR	481:3	481:3	10	histp ++
FIELD	481:3	481:8	11	histp ++
LEAF_NODE	481:3	481:3	12	histp
LEAF_NODE	481:8	481:8	12	++
LEAF_NODE	481:10	481:10	10	;
LEAF_NODE	482:9	482:9	8	}
EXPR_STATEMENT	483:9	483:26	6	first = ptr -> bmin ;
EXPR	483:9	483:9	7	first = ptr -> bmin
ASSIGN	483:9	483:17	8	first = ptr -> bmin
LVAL	483:9	483:9	9	first
FIELD	483:9	483:9	10	first
LEAF_NODE	483:9	483:9	11	first
ASSIGN_OP	483:15	483:15	9	=
LEAF_NODE	483:15	483:15	10	=
RVAL	483:17	483:17	9	ptr -> bmin
FIELD	483:17	483:22	10	ptr -> bmin
LEAF_NODE	483:17	483:17	11	ptr
LEAF_NODE	483:20	483:20	11	->
LEAF_NODE	483:22	483:22	11	bmin
LEAF_NODE	483:26	483:26	7	;
EXPR_STATEMENT	484:2	484:18	6	last = ptr -> bmax ;
EXPR	484:2	484:2	7	last = ptr -> bmax
ASSIGN	484:2	484:9	8	last = ptr -> bmax
LVAL	484:2	484:2	9	last
FIELD	484:2	484:2	10	last
LEAF_NODE	484:2	484:2	11	last
ASSIGN_OP	484:7	484:7	9	=
LEAF_NODE	484:7	484:7	10	=
RVAL	484:9	484:9	9	ptr -> bmax
FIELD	484:9	484:14	10	ptr -> bmax
LEAF_NODE	484:9	484:9	11	ptr
LEAF_NODE	484:12	484:12	11	->
LEAF_NODE	484:14	484:14	11	bmax
LEAF_NODE	484:18	484:18	7	;
JUMP_STATEMENT	485:9	485:14	6	break DESTINATION ;
KEYWORD	485:9	485:9	7	break
LEAF_NODE	485:9	485:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	485:14	485:14	7	;
LEAF_NODE	486:1	486:1	5	}
EXPR_STATEMENT	488:1	488:22	3	sum2 = ptr -> total / 2 ;
EXPR	488:1	488:1	4	sum2 = ptr -> total / 2
ASSIGN	488:1	488:8	5	sum2 = ptr -> total / 2
LVAL	488:1	488:1	6	sum2
FIELD	488:1	488:1	7	sum2
LEAF_NODE	488:1	488:1	8	sum2
ASSIGN_OP	488:6	488:6	6	=
LEAF_NODE	488:6	488:6	7	=
RVAL	488:8	488:21	6	ptr -> total / 2
FIELD	488:8	488:13	7	ptr -> total
LEAF_NODE	488:8	488:8	8	ptr
LEAF_NODE	488:11	488:11	8	->
LEAF_NODE	488:13	488:13	8	total
LEAF_NODE	488:19	488:19	7	/
FIELD	488:21	488:21	7	2
LEAF_NODE	488:21	488:21	8	2
LEAF_NODE	488:22	488:22	4	;
EXPR_STATEMENT	489:1	489:22	3	histp = & hist2 [ first ] ;
EXPR	489:1	489:1	4	histp = & hist2 [ first ]
ASSIGN	489:1	489:9	5	histp = & hist2 [ first ]
LVAL	489:1	489:1	6	histp
FIELD	489:1	489:1	7	histp
LEAF_NODE	489:1	489:1	8	histp
ASSIGN_OP	489:7	489:7	6	=
LEAF_NODE	489:7	489:7	7	=
RVAL	489:9	489:9	6	& hist2 [ first ]
UNARY_EXPR	489:9	489:10	7	& hist2 [ first ]
UNARY_OPERATOR	489:9	489:9	8	&
LEAF_NODE	489:9	489:9	9	&
FIELD	489:10	489:21	8	hist2 [ first ]
LEAF_NODE	489:10	489:10	9	hist2
LEAF_NODE	489:15	489:15	9	[
EXPR	489:16	489:16	9	first
FIELD	489:16	489:16	10	first
LEAF_NODE	489:16	489:16	11	first
LEAF_NODE	489:21	489:21	9	]
LEAF_NODE	489:22	489:22	4	;
EXPR_STATEMENT	490:1	490:8	3	sum = 0 ;
EXPR	490:1	490:1	4	sum = 0
ASSIGN	490:1	490:7	5	sum = 0
LVAL	490:1	490:1	6	sum
FIELD	490:1	490:1	7	sum
LEAF_NODE	490:1	490:1	8	sum
ASSIGN_OP	490:5	490:5	6	=
LEAF_NODE	490:5	490:5	7	=
RVAL	490:7	490:7	6	0
FIELD	490:7	490:7	7	0
LEAF_NODE	490:7	490:7	8	0
LEAF_NODE	490:8	490:8	4	;
ITERATION	491:1	492:2	3	
KEYWORD	491:1	491:1	4	for
LEAF_NODE	491:1	491:1	5	for
LEAF_NODE	491:5	491:5	4	(
FOR_INIT	491:6	491:15	4	i = first ;
EXPR	491:6	491:6	5	i = first
ASSIGN	491:6	491:10	6	i = first
LVAL	491:6	491:6	7	i
FIELD	491:6	491:6	8	i
LEAF_NODE	491:6	491:6	9	i
ASSIGN_OP	491:8	491:8	7	=
LEAF_NODE	491:8	491:8	8	=
RVAL	491:10	491:10	7	first
FIELD	491:10	491:10	8	first
LEAF_NODE	491:10	491:10	9	first
LEAF_NODE	491:15	491:15	5	;
CONDITION	491:17	491:17	4	i <= last && ( sum += * histp ++ ) < sum2
EXPR	491:17	491:17	5	i <= last && ( sum += * histp ++ ) < sum2
AND	491:17	491:30	6	i <= last && ( sum += * histp ++ ) < sum2
EXPR	491:17	491:22	7	i <= last
FIELD	491:17	491:17	8	i
LEAF_NODE	491:17	491:17	9	i
REL_OPERATOR	491:19	491:19	8	<=
LEAF_NODE	491:19	491:19	9	<=
FIELD	491:22	491:22	8	last
LEAF_NODE	491:22	491:22	9	last
LEAF_NODE	491:27	491:27	7	&&
EXPR	491:30	491:50	7	( sum += * histp ++ ) < sum2
LEAF_NODE	491:30	491:30	8	(
ASSIGN	491:31	491:38	8	sum += * histp ++
LVAL	491:31	491:31	9	sum
FIELD	491:31	491:31	10	sum
LEAF_NODE	491:31	491:31	11	sum
ASSIGN_OP	491:35	491:35	9	+=
LEAF_NODE	491:35	491:35	10	+=
RVAL	491:38	491:38	9	* histp ++
UNARY_EXPR	491:38	491:39	10	* histp ++
UNARY_OPERATOR	491:38	491:38	11	*
LEAF_NODE	491:38	491:38	12	*
FIELD	491:39	491:44	11	histp ++
LEAF_NODE	491:39	491:39	12	histp
LEAF_NODE	491:44	491:44	12	++
LEAF_NODE	491:46	491:46	8	)
REL_OPERATOR	491:48	491:48	8	<
LEAF_NODE	491:48	491:48	9	<
FIELD	491:50	491:50	8	sum2
LEAF_NODE	491:50	491:50	9	sum2
LEAF_NODE	491:54	491:54	4	;
FOR_EXPR	491:56	491:56	4	++ i
EXPR	491:56	491:58	5	++ i
LEAF_NODE	491:56	491:56	6	++
FIELD	491:58	491:58	6	i
LEAF_NODE	491:58	491:58	7	i
LEAF_NODE	491:59	491:59	4	)
STATEMENTS	492:2	492:2	4	
LEAF_NODE	492:2	492:2	5	;
SELECTION	493:1	494:2	3	
KEYWORD	493:1	493:1	4	if
LEAF_NODE	493:1	493:1	5	if
LEAF_NODE	493:4	493:4	4	(
CONDITION	493:5	493:5	4	i == first
EXPR	493:5	493:10	5	i == first
FIELD	493:5	493:5	6	i
LEAF_NODE	493:5	493:5	7	i
EQ_OPERATOR	493:7	493:7	6	==
LEAF_NODE	493:7	493:7	7	==
FIELD	493:10	493:10	6	first
LEAF_NODE	493:10	493:10	7	first
LEAF_NODE	493:15	493:15	4	)
STATEMENTS	494:2	494:2	4	
EXPR_STATEMENT	494:2	494:5	5	i ++ ;
EXPR	494:2	494:2	6	i ++
FIELD	494:2	494:3	7	i ++
LEAF_NODE	494:2	494:2	8	i
LEAF_NODE	494:3	494:3	8	++
LEAF_NODE	494:5	494:5	6	;
LEAF_NODE	497:1	497:1	3	new
LEAF_NODE	497:5	497:5	3	=
EXPR_STATEMENT	497:7	497:16	3	freeboxes ;
EXPR	497:7	497:7	4	freeboxes
FIELD	497:7	497:7	5	freeboxes
LEAF_NODE	497:7	497:7	6	freeboxes
LEAF_NODE	497:16	497:16	4	;
LEAF_NODE	498:1	498:1	3	freeboxes
LEAF_NODE	498:11	498:11	3	=
LEAF_NODE	498:13	498:13	3	new
LEAF_NODE	498:16	498:16	3	->
EXPR_STATEMENT	498:18	498:22	3	next ;
EXPR	498:18	498:18	4	next
FIELD	498:18	498:18	5	next
LEAF_NODE	498:18	498:18	6	next
LEAF_NODE	498:22	498:22	4	;
SELECTION	499:1	500:2	3	
KEYWORD	499:1	499:1	4	if
LEAF_NODE	499:1	499:1	5	if
LEAF_NODE	499:4	499:4	4	(
CONDITION	499:5	499:5	4	freeboxes
EXPR	499:5	499:5	5	freeboxes
FIELD	499:5	499:5	6	freeboxes
LEAF_NODE	499:5	499:5	7	freeboxes
LEAF_NODE	499:14	499:14	4	)
STATEMENTS	500:2	500:2	4	
EXPR_STATEMENT	500:2	500:24	5	freeboxes -> prev = NULL ;
EXPR	500:2	500:2	6	freeboxes -> prev = NULL
ASSIGN	500:2	500:20	7	freeboxes -> prev = NULL
LVAL	500:2	500:2	8	freeboxes -> prev
FIELD	500:2	500:13	9	freeboxes -> prev
LEAF_NODE	500:2	500:2	10	freeboxes
LEAF_NODE	500:11	500:11	10	->
LEAF_NODE	500:13	500:13	10	prev
ASSIGN_OP	500:18	500:18	8	=
LEAF_NODE	500:18	500:18	9	=
RVAL	500:20	500:20	8	NULL
FIELD	500:20	500:20	9	NULL
LEAF_NODE	500:20	500:20	10	NULL
LEAF_NODE	500:24	500:24	6	;
SELECTION	501:1	502:2	3	
KEYWORD	501:1	501:1	4	if
LEAF_NODE	501:1	501:1	5	if
LEAF_NODE	501:4	501:4	4	(
CONDITION	501:5	501:5	4	usedboxes
EXPR	501:5	501:5	5	usedboxes
FIELD	501:5	501:5	6	usedboxes
LEAF_NODE	501:5	501:5	7	usedboxes
LEAF_NODE	501:14	501:14	4	)
STATEMENTS	502:2	502:2	4	
LEAF_NODE	502:2	502:2	5	usedboxes
LEAF_NODE	502:11	502:11	3	->
LEAF_NODE	502:13	502:13	3	prev
LEAF_NODE	502:18	502:18	3	=
LEAF_NODE	502:20	502:20	3	new
LEAF_NODE	502:23	502:23	3	;
LEAF_NODE	503:1	503:1	3	new
LEAF_NODE	503:4	503:4	3	->
EXPR_STATEMENT	503:6	503:22	3	next = usedboxes ;
EXPR	503:6	503:6	4	next = usedboxes
ASSIGN	503:6	503:13	5	next = usedboxes
LVAL	503:6	503:6	6	next
FIELD	503:6	503:6	7	next
LEAF_NODE	503:6	503:6	8	next
ASSIGN_OP	503:11	503:11	6	=
LEAF_NODE	503:11	503:11	7	=
RVAL	503:13	503:13	6	usedboxes
FIELD	503:13	503:13	7	usedboxes
LEAF_NODE	503:13	503:13	8	usedboxes
LEAF_NODE	503:22	503:22	4	;
LEAF_NODE	504:1	504:1	3	usedboxes
LEAF_NODE	504:11	504:11	3	=
LEAF_NODE	504:13	504:13	3	new
LEAF_NODE	504:16	504:16	3	;
EXPR_STATEMENT	506:1	506:22	3	histp = & hist2 [ first ] ;
EXPR	506:1	506:1	4	histp = & hist2 [ first ]
ASSIGN	506:1	506:9	5	histp = & hist2 [ first ]
LVAL	506:1	506:1	6	histp
FIELD	506:1	506:1	7	histp
LEAF_NODE	506:1	506:1	8	histp
ASSIGN_OP	506:7	506:7	6	=
LEAF_NODE	506:7	506:7	7	=
RVAL	506:9	506:9	6	& hist2 [ first ]
UNARY_EXPR	506:9	506:10	7	& hist2 [ first ]
UNARY_OPERATOR	506:9	506:9	8	&
LEAF_NODE	506:9	506:9	9	&
FIELD	506:10	506:21	8	hist2 [ first ]
LEAF_NODE	506:10	506:10	9	hist2
LEAF_NODE	506:15	506:15	9	[
EXPR	506:16	506:16	9	first
FIELD	506:16	506:16	10	first
LEAF_NODE	506:16	506:16	11	first
LEAF_NODE	506:21	506:21	9	]
LEAF_NODE	506:22	506:22	4	;
ITERATION	507:1	508:2	3	
KEYWORD	507:1	507:1	4	for
LEAF_NODE	507:1	507:1	5	for
LEAF_NODE	507:5	507:5	4	(
FOR_INIT	507:6	507:25	4	sum1 = 0 , j = first ;
EXPR	507:6	507:16	5	sum1 = 0 , j = first
ASSIGN	507:6	507:13	6	sum1 = 0
LVAL	507:6	507:6	7	sum1
FIELD	507:6	507:6	8	sum1
LEAF_NODE	507:6	507:6	9	sum1
ASSIGN_OP	507:11	507:11	7	=
LEAF_NODE	507:11	507:11	8	=
RVAL	507:13	507:13	7	0
FIELD	507:13	507:13	8	0
LEAF_NODE	507:13	507:13	9	0
LEAF_NODE	507:14	507:14	6	,
ASSIGN	507:16	507:20	6	j = first
LVAL	507:16	507:16	7	j
FIELD	507:16	507:16	8	j
LEAF_NODE	507:16	507:16	9	j
ASSIGN_OP	507:18	507:18	7	=
LEAF_NODE	507:18	507:18	8	=
RVAL	507:20	507:20	7	first
FIELD	507:20	507:20	8	first
LEAF_NODE	507:20	507:20	9	first
LEAF_NODE	507:25	507:25	5	;
CONDITION	507:27	507:27	4	j < i
EXPR	507:27	507:31	5	j < i
FIELD	507:27	507:27	6	j
LEAF_NODE	507:27	507:27	7	j
REL_OPERATOR	507:29	507:29	6	<
LEAF_NODE	507:29	507:29	7	<
FIELD	507:31	507:31	6	i
LEAF_NODE	507:31	507:31	7	i
LEAF_NODE	507:32	507:32	4	;
FOR_EXPR	507:34	507:34	4	j ++
EXPR	507:34	507:34	5	j ++
FIELD	507:34	507:35	6	j ++
LEAF_NODE	507:34	507:34	7	j
LEAF_NODE	507:35	507:35	7	++
LEAF_NODE	507:37	507:37	4	)
STATEMENTS	508:2	508:2	4	
EXPR_STATEMENT	508:2	508:18	5	sum1 += * histp ++ ;
EXPR	508:2	508:2	6	sum1 += * histp ++
ASSIGN	508:2	508:10	7	sum1 += * histp ++
LVAL	508:2	508:2	8	sum1
FIELD	508:2	508:2	9	sum1
LEAF_NODE	508:2	508:2	10	sum1
ASSIGN_OP	508:7	508:7	8	+=
LEAF_NODE	508:7	508:7	9	+=
RVAL	508:10	508:10	8	* histp ++
UNARY_EXPR	508:10	508:11	9	* histp ++
UNARY_OPERATOR	508:10	508:10	10	*
LEAF_NODE	508:10	508:10	11	*
FIELD	508:11	508:16	10	histp ++
LEAF_NODE	508:11	508:11	11	histp
LEAF_NODE	508:16	508:16	11	++
LEAF_NODE	508:18	508:18	6	;
ITERATION	509:1	510:5	3	
KEYWORD	509:1	509:1	4	for
LEAF_NODE	509:1	509:1	5	for
LEAF_NODE	509:5	509:5	4	(
FOR_INIT	509:6	509:21	4	sum2 = 0 , j = i ;
EXPR	509:6	509:16	5	sum2 = 0 , j = i
ASSIGN	509:6	509:13	6	sum2 = 0
LVAL	509:6	509:6	7	sum2
FIELD	509:6	509:6	8	sum2
LEAF_NODE	509:6	509:6	9	sum2
ASSIGN_OP	509:11	509:11	7	=
LEAF_NODE	509:11	509:11	8	=
RVAL	509:13	509:13	7	0
FIELD	509:13	509:13	8	0
LEAF_NODE	509:13	509:13	9	0
LEAF_NODE	509:14	509:14	6	,
ASSIGN	509:16	509:20	6	j = i
LVAL	509:16	509:16	7	j
FIELD	509:16	509:16	8	j
LEAF_NODE	509:16	509:16	9	j
ASSIGN_OP	509:18	509:18	7	=
LEAF_NODE	509:18	509:18	8	=
RVAL	509:20	509:20	7	i
FIELD	509:20	509:20	8	i
LEAF_NODE	509:20	509:20	9	i
LEAF_NODE	509:21	509:21	5	;
CONDITION	509:23	509:23	4	j <= last
EXPR	509:23	509:28	5	j <= last
FIELD	509:23	509:23	6	j
LEAF_NODE	509:23	509:23	7	j
REL_OPERATOR	509:25	509:25	6	<=
LEAF_NODE	509:25	509:25	7	<=
FIELD	509:28	509:28	6	last
LEAF_NODE	509:28	509:28	7	last
LEAF_NODE	509:32	509:32	4	;
FOR_EXPR	509:34	509:34	4	j ++
EXPR	509:34	509:34	5	j ++
FIELD	509:34	509:35	6	j ++
LEAF_NODE	509:34	509:34	7	j
LEAF_NODE	509:35	509:35	7	++
LEAF_NODE	509:37	509:37	4	)
STATEMENTS	510:5	510:5	4	
EXPR_STATEMENT	510:5	510:21	5	sum2 += * histp ++ ;
EXPR	510:5	510:5	6	sum2 += * histp ++
ASSIGN	510:5	510:13	7	sum2 += * histp ++
LVAL	510:5	510:5	8	sum2
FIELD	510:5	510:5	9	sum2
LEAF_NODE	510:5	510:5	10	sum2
ASSIGN_OP	510:10	510:10	8	+=
LEAF_NODE	510:10	510:10	9	+=
RVAL	510:13	510:13	8	* histp ++
UNARY_EXPR	510:13	510:14	9	* histp ++
UNARY_OPERATOR	510:13	510:13	10	*
LEAF_NODE	510:13	510:13	11	*
FIELD	510:14	510:19	10	histp ++
LEAF_NODE	510:14	510:14	11	histp
LEAF_NODE	510:19	510:19	11	++
LEAF_NODE	510:21	510:21	6	;
LEAF_NODE	511:1	511:1	3	new
LEAF_NODE	511:4	511:4	3	->
EXPR_STATEMENT	511:6	511:18	3	total = sum1 ;
EXPR	511:6	511:6	4	total = sum1
ASSIGN	511:6	511:14	5	total = sum1
LVAL	511:6	511:6	6	total
FIELD	511:6	511:6	7	total
LEAF_NODE	511:6	511:6	8	total
ASSIGN_OP	511:12	511:12	6	=
LEAF_NODE	511:12	511:12	7	=
RVAL	511:14	511:14	6	sum1
FIELD	511:14	511:14	7	sum1
LEAF_NODE	511:14	511:14	8	sum1
LEAF_NODE	511:18	511:18	4	;
EXPR_STATEMENT	512:1	512:18	3	ptr -> total = sum2 ;
EXPR	512:1	512:1	4	ptr -> total = sum2
ASSIGN	512:1	512:14	5	ptr -> total = sum2
LVAL	512:1	512:1	6	ptr -> total
FIELD	512:1	512:6	7	ptr -> total
LEAF_NODE	512:1	512:1	8	ptr
LEAF_NODE	512:4	512:4	8	->
LEAF_NODE	512:6	512:6	8	total
ASSIGN_OP	512:12	512:12	6	=
LEAF_NODE	512:12	512:12	7	=
RVAL	512:14	512:14	6	sum2
FIELD	512:14	512:14	7	sum2
LEAF_NODE	512:14	512:14	8	sum2
LEAF_NODE	512:18	512:18	4	;
LEAF_NODE	514:1	514:1	3	new
LEAF_NODE	514:4	514:4	3	->
EXPR_STATEMENT	514:6	514:22	3	rmin = ptr -> rmin ;
EXPR	514:6	514:6	4	rmin = ptr -> rmin
ASSIGN	514:6	514:13	5	rmin = ptr -> rmin
LVAL	514:6	514:6	6	rmin
FIELD	514:6	514:6	7	rmin
LEAF_NODE	514:6	514:6	8	rmin
ASSIGN_OP	514:11	514:11	6	=
LEAF_NODE	514:11	514:11	7	=
RVAL	514:13	514:13	6	ptr -> rmin
FIELD	514:13	514:18	7	ptr -> rmin
LEAF_NODE	514:13	514:13	8	ptr
LEAF_NODE	514:16	514:16	8	->
LEAF_NODE	514:18	514:18	8	rmin
LEAF_NODE	514:22	514:22	4	;
LEAF_NODE	515:1	515:1	3	new
LEAF_NODE	515:4	515:4	3	->
EXPR_STATEMENT	515:6	515:22	3	rmax = ptr -> rmax ;
EXPR	515:6	515:6	4	rmax = ptr -> rmax
ASSIGN	515:6	515:13	5	rmax = ptr -> rmax
LVAL	515:6	515:6	6	rmax
FIELD	515:6	515:6	7	rmax
LEAF_NODE	515:6	515:6	8	rmax
ASSIGN_OP	515:11	515:11	6	=
LEAF_NODE	515:11	515:11	7	=
RVAL	515:13	515:13	6	ptr -> rmax
FIELD	515:13	515:18	7	ptr -> rmax
LEAF_NODE	515:13	515:13	8	ptr
LEAF_NODE	515:16	515:16	8	->
LEAF_NODE	515:18	515:18	8	rmax
LEAF_NODE	515:22	515:22	4	;
LEAF_NODE	516:1	516:1	3	new
LEAF_NODE	516:4	516:4	3	->
EXPR_STATEMENT	516:6	516:22	3	gmin = ptr -> gmin ;
EXPR	516:6	516:6	4	gmin = ptr -> gmin
ASSIGN	516:6	516:13	5	gmin = ptr -> gmin
LVAL	516:6	516:6	6	gmin
FIELD	516:6	516:6	7	gmin
LEAF_NODE	516:6	516:6	8	gmin
ASSIGN_OP	516:11	516:11	6	=
LEAF_NODE	516:11	516:11	7	=
RVAL	516:13	516:13	6	ptr -> gmin
FIELD	516:13	516:18	7	ptr -> gmin
LEAF_NODE	516:13	516:13	8	ptr
LEAF_NODE	516:16	516:16	8	->
LEAF_NODE	516:18	516:18	8	gmin
LEAF_NODE	516:22	516:22	4	;
LEAF_NODE	517:1	517:1	3	new
LEAF_NODE	517:4	517:4	3	->
EXPR_STATEMENT	517:6	517:22	3	gmax = ptr -> gmax ;
EXPR	517:6	517:6	4	gmax = ptr -> gmax
ASSIGN	517:6	517:13	5	gmax = ptr -> gmax
LVAL	517:6	517:6	6	gmax
FIELD	517:6	517:6	7	gmax
LEAF_NODE	517:6	517:6	8	gmax
ASSIGN_OP	517:11	517:11	6	=
LEAF_NODE	517:11	517:11	7	=
RVAL	517:13	517:13	6	ptr -> gmax
FIELD	517:13	517:18	7	ptr -> gmax
LEAF_NODE	517:13	517:13	8	ptr
LEAF_NODE	517:16	517:16	8	->
LEAF_NODE	517:18	517:18	8	gmax
LEAF_NODE	517:22	517:22	4	;
LEAF_NODE	518:1	518:1	3	new
LEAF_NODE	518:4	518:4	3	->
EXPR_STATEMENT	518:6	518:22	3	bmin = ptr -> bmin ;
EXPR	518:6	518:6	4	bmin = ptr -> bmin
ASSIGN	518:6	518:13	5	bmin = ptr -> bmin
LVAL	518:6	518:6	6	bmin
FIELD	518:6	518:6	7	bmin
LEAF_NODE	518:6	518:6	8	bmin
ASSIGN_OP	518:11	518:11	6	=
LEAF_NODE	518:11	518:11	7	=
RVAL	518:13	518:13	6	ptr -> bmin
FIELD	518:13	518:18	7	ptr -> bmin
LEAF_NODE	518:13	518:13	8	ptr
LEAF_NODE	518:16	518:16	8	->
LEAF_NODE	518:18	518:18	8	bmin
LEAF_NODE	518:22	518:22	4	;
LEAF_NODE	519:1	519:1	3	new
LEAF_NODE	519:4	519:4	3	->
EXPR_STATEMENT	519:6	519:22	3	bmax = ptr -> bmax ;
EXPR	519:6	519:6	4	bmax = ptr -> bmax
ASSIGN	519:6	519:13	5	bmax = ptr -> bmax
LVAL	519:6	519:6	6	bmax
FIELD	519:6	519:6	7	bmax
LEAF_NODE	519:6	519:6	8	bmax
ASSIGN_OP	519:11	519:11	6	=
LEAF_NODE	519:11	519:11	7	=
RVAL	519:13	519:13	6	ptr -> bmax
FIELD	519:13	519:18	7	ptr -> bmax
LEAF_NODE	519:13	519:13	8	ptr
LEAF_NODE	519:16	519:16	8	->
LEAF_NODE	519:18	519:18	8	bmax
LEAF_NODE	519:22	519:22	4	;
SELECTION	520:1	520:15	3	
KEYWORD	520:1	520:1	4	switch
LEAF_NODE	520:1	520:1	5	switch
LEAF_NODE	520:8	520:8	4	(
CONDITION	520:9	520:9	4	axis
EXPR	520:9	520:9	5	axis
FIELD	520:9	520:9	6	axis
LEAF_NODE	520:9	520:9	7	axis
LEAF_NODE	520:13	520:13	4	)
STATEMENTS	520:15	533:1	4	
LEAF_NODE	520:15	520:15	5	{
STATEMENTS	521:1	532:9	5	
LABEL	521:1	521:9	6	case RED :
LEAF_NODE	521:1	521:1	7	case
LEAF_NODE	521:6	521:6	7	RED
LEAF_NODE	521:9	521:9	7	:
LEAF_NODE	522:2	522:2	6	new
LEAF_NODE	522:5	522:5	6	->
EXPR_STATEMENT	522:7	522:17	6	rmax = i - 1 ;
EXPR	522:7	522:7	7	rmax = i - 1
ASSIGN	522:7	522:14	8	rmax = i - 1
LVAL	522:7	522:7	9	rmax
FIELD	522:7	522:7	10	rmax
LEAF_NODE	522:7	522:7	11	rmax
ASSIGN_OP	522:12	522:12	9	=
LEAF_NODE	522:12	522:12	10	=
RVAL	522:14	522:16	9	i - 1
FIELD	522:14	522:14	10	i
LEAF_NODE	522:14	522:14	11	i
LEAF_NODE	522:15	522:15	10	-
FIELD	522:16	522:16	10	1
LEAF_NODE	522:16	522:16	11	1
LEAF_NODE	522:17	522:17	7	;
EXPR_STATEMENT	523:9	523:22	6	ptr -> rmin = i ;
EXPR	523:9	523:9	7	ptr -> rmin = i
ASSIGN	523:9	523:21	8	ptr -> rmin = i
LVAL	523:9	523:9	9	ptr -> rmin
FIELD	523:9	523:14	10	ptr -> rmin
LEAF_NODE	523:9	523:9	11	ptr
LEAF_NODE	523:12	523:12	11	->
LEAF_NODE	523:14	523:14	11	rmin
ASSIGN_OP	523:19	523:19	9	=
LEAF_NODE	523:19	523:19	10	=
RVAL	523:21	523:21	9	i
FIELD	523:21	523:21	10	i
LEAF_NODE	523:21	523:21	11	i
LEAF_NODE	523:22	523:22	7	;
JUMP_STATEMENT	524:9	524:14	6	break DESTINATION ;
KEYWORD	524:9	524:9	7	break
LEAF_NODE	524:9	524:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	524:14	524:14	7	;
LABEL	525:1	525:11	6	case GREEN :
LEAF_NODE	525:1	525:1	7	case
LEAF_NODE	525:6	525:6	7	GREEN
LEAF_NODE	525:11	525:11	7	:
LEAF_NODE	526:9	526:9	6	new
LEAF_NODE	526:12	526:12	6	->
EXPR_STATEMENT	526:14	526:24	6	gmax = i - 1 ;
EXPR	526:14	526:14	7	gmax = i - 1
ASSIGN	526:14	526:21	8	gmax = i - 1
LVAL	526:14	526:14	9	gmax
FIELD	526:14	526:14	10	gmax
LEAF_NODE	526:14	526:14	11	gmax
ASSIGN_OP	526:19	526:19	9	=
LEAF_NODE	526:19	526:19	10	=
RVAL	526:21	526:23	9	i - 1
FIELD	526:21	526:21	10	i
LEAF_NODE	526:21	526:21	11	i
LEAF_NODE	526:22	526:22	10	-
FIELD	526:23	526:23	10	1
LEAF_NODE	526:23	526:23	11	1
LEAF_NODE	526:24	526:24	7	;
EXPR_STATEMENT	527:9	527:22	6	ptr -> gmin = i ;
EXPR	527:9	527:9	7	ptr -> gmin = i
ASSIGN	527:9	527:21	8	ptr -> gmin = i
LVAL	527:9	527:9	9	ptr -> gmin
FIELD	527:9	527:14	10	ptr -> gmin
LEAF_NODE	527:9	527:9	11	ptr
LEAF_NODE	527:12	527:12	11	->
LEAF_NODE	527:14	527:14	11	gmin
ASSIGN_OP	527:19	527:19	9	=
LEAF_NODE	527:19	527:19	10	=
RVAL	527:21	527:21	9	i
FIELD	527:21	527:21	10	i
LEAF_NODE	527:21	527:21	11	i
LEAF_NODE	527:22	527:22	7	;
JUMP_STATEMENT	528:9	528:14	6	break DESTINATION ;
KEYWORD	528:9	528:9	7	break
LEAF_NODE	528:9	528:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	528:14	528:14	7	;
LABEL	529:1	529:10	6	case BLUE :
LEAF_NODE	529:1	529:1	7	case
LEAF_NODE	529:6	529:6	7	BLUE
LEAF_NODE	529:10	529:10	7	:
LEAF_NODE	530:9	530:9	6	new
LEAF_NODE	530:12	530:12	6	->
EXPR_STATEMENT	530:14	530:24	6	bmax = i - 1 ;
EXPR	530:14	530:14	7	bmax = i - 1
ASSIGN	530:14	530:21	8	bmax = i - 1
LVAL	530:14	530:14	9	bmax
FIELD	530:14	530:14	10	bmax
LEAF_NODE	530:14	530:14	11	bmax
ASSIGN_OP	530:19	530:19	9	=
LEAF_NODE	530:19	530:19	10	=
RVAL	530:21	530:23	9	i - 1
FIELD	530:21	530:21	10	i
LEAF_NODE	530:21	530:21	11	i
LEAF_NODE	530:22	530:22	10	-
FIELD	530:23	530:23	10	1
LEAF_NODE	530:23	530:23	11	1
LEAF_NODE	530:24	530:24	7	;
EXPR_STATEMENT	531:9	531:22	6	ptr -> bmin = i ;
EXPR	531:9	531:9	7	ptr -> bmin = i
ASSIGN	531:9	531:21	8	ptr -> bmin = i
LVAL	531:9	531:9	9	ptr -> bmin
FIELD	531:9	531:14	10	ptr -> bmin
LEAF_NODE	531:9	531:9	11	ptr
LEAF_NODE	531:12	531:12	11	->
LEAF_NODE	531:14	531:14	11	bmin
ASSIGN_OP	531:19	531:19	9	=
LEAF_NODE	531:19	531:19	10	=
RVAL	531:21	531:21	9	i
FIELD	531:21	531:21	10	i
LEAF_NODE	531:21	531:21	11	i
LEAF_NODE	531:22	531:22	7	;
JUMP_STATEMENT	532:9	532:14	6	break DESTINATION ;
KEYWORD	532:9	532:9	7	break
LEAF_NODE	532:9	532:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	532:14	532:14	7	;
LEAF_NODE	533:1	533:1	5	}
LEAF_NODE	534:1	534:1	3	shrinkbox
LEAF_NODE	534:10	534:10	3	(
LEAF_NODE	534:11	534:11	3	new
LEAF_NODE	534:14	534:14	3	)
LEAF_NODE	534:15	534:15	3	;
EXPR_STATEMENT	535:1	535:15	3	shrinkbox ( ptr ) ;
EXPR	535:1	535:1	4	shrinkbox ( ptr )
FUNCTION_CALL	535:1	535:14	5	shrinkbox ( ptr )
CALLEE	535:1	535:1	6	shrinkbox
LEAF_NODE	535:1	535:1	7	shrinkbox
LEAF_NODE	535:10	535:10	6	(
ARGUMENT	535:11	535:11	6	ptr
FIELD	535:11	535:11	7	ptr
LEAF_NODE	535:11	535:11	8	ptr
LEAF_NODE	535:14	535:14	6	)
LEAF_NODE	535:15	535:15	4	;
LEAF_NODE	536:0	536:0	2	}
FUNCTION_DEF	538:0	621:0	1	
RETURN_TYPE	538:0	538:7	2	static void
LEAF_NODE	538:0	538:0	3	static
TYPE_NAME	538:7	538:7	3	void
LEAF_NODE	538:7	538:7	4	void
FUNCTION_NAME	539:0	539:0	2	shrinkbox
LEAF_NODE	539:0	539:0	3	shrinkbox
PARAMETER_LIST	539:9	539:23	2	( Colorbox * box )
LEAF_NODE	539:9	539:9	3	(
PARAMETER_DECL	539:10	539:20	3	Colorbox * box
TYPE	539:10	539:18	4	Colorbox *
TYPE_NAME	539:10	539:10	5	Colorbox
LEAF_NODE	539:10	539:10	6	Colorbox
POINTER	539:18	539:18	5	*
LEAF_NODE	539:18	539:18	6	*
NAME	539:20	539:20	4	box
LEAF_NODE	539:20	539:20	5	box
LEAF_NODE	539:23	539:23	3	)
LEAF_NODE	540:0	540:0	2	{
STATEMENTS	541:1	620:1	2	
LEAF_NODE	541:1	541:1	3	register
SIMPLE_DECL	541:10	541:23	3	uint32 * histp ;
VAR_DECL	541:10	541:18	4	uint32 * histp
TYPE	541:10	541:17	5	uint32 *
TYPE_NAME	541:10	541:10	6	uint32
LEAF_NODE	541:10	541:10	7	uint32
POINTER	541:17	541:17	6	*
LEAF_NODE	541:17	541:17	7	*
NAME	541:18	541:18	5	histp
LEAF_NODE	541:18	541:18	6	histp
LEAF_NODE	541:23	541:23	4	;
LEAF_NODE	542:1	542:1	3	register
SIMPLE_DECL	542:10	542:24	3	int ir , int ig , int ib ;
INIT_DECL_LIST	542:10	542:10	4	int ir , int ig , int ib
VAR_DECL	542:10	542:14	5	int ir
TYPE	542:10	542:10	6	int
TYPE_NAME	542:10	542:10	7	int
LEAF_NODE	542:10	542:10	8	int
NAME	542:14	542:14	6	ir
LEAF_NODE	542:14	542:14	7	ir
LEAF_NODE	542:16	542:16	5	,
INIT_DECL_LIST	542:10	542:10	5	int ig , int ib
VAR_DECL	542:10	542:18	6	int ig
TYPE	542:10	542:10	7	int
TYPE_NAME	542:10	542:10	8	int
LEAF_NODE	542:10	542:10	9	int
NAME	542:18	542:18	7	ig
LEAF_NODE	542:18	542:18	8	ig
LEAF_NODE	542:20	542:20	6	,
VAR_DECL	542:10	542:22	6	int ib
TYPE	542:10	542:10	7	int
TYPE_NAME	542:10	542:10	8	int
LEAF_NODE	542:10	542:10	9	int
NAME	542:22	542:22	7	ib
LEAF_NODE	542:22	542:22	8	ib
LEAF_NODE	542:24	542:24	4	;
SELECTION	544:1	544:28	3	
KEYWORD	544:1	544:1	4	if
LEAF_NODE	544:1	544:1	5	if
LEAF_NODE	544:4	544:4	4	(
CONDITION	544:5	544:5	4	box -> rmax > box -> rmin
EXPR	544:5	544:17	5	box -> rmax > box -> rmin
FIELD	544:5	544:10	6	box -> rmax
LEAF_NODE	544:5	544:5	7	box
LEAF_NODE	544:8	544:8	7	->
LEAF_NODE	544:10	544:10	7	rmax
REL_OPERATOR	544:15	544:15	6	>
LEAF_NODE	544:15	544:15	7	>
FIELD	544:17	544:22	6	box -> rmin
LEAF_NODE	544:17	544:17	7	box
LEAF_NODE	544:20	544:20	7	->
LEAF_NODE	544:22	544:22	7	rmin
LEAF_NODE	544:26	544:26	4	)
STATEMENTS	544:28	566:1	4	
LEAF_NODE	544:28	544:28	5	{
STATEMENTS	545:2	555:2	5	
ITERATION	545:2	546:3	6	
KEYWORD	545:2	545:2	7	for
LEAF_NODE	545:2	545:2	8	for
LEAF_NODE	545:6	545:6	7	(
FOR_INIT	545:7	545:21	7	ir = box -> rmin ;
EXPR	545:7	545:7	8	ir = box -> rmin
ASSIGN	545:7	545:12	9	ir = box -> rmin
LVAL	545:7	545:7	10	ir
FIELD	545:7	545:7	11	ir
LEAF_NODE	545:7	545:7	12	ir
ASSIGN_OP	545:10	545:10	10	=
LEAF_NODE	545:10	545:10	11	=
RVAL	545:12	545:12	10	box -> rmin
FIELD	545:12	545:17	11	box -> rmin
LEAF_NODE	545:12	545:12	12	box
LEAF_NODE	545:15	545:15	12	->
LEAF_NODE	545:17	545:17	12	rmin
LEAF_NODE	545:21	545:21	8	;
CONDITION	545:23	545:23	7	ir <= box -> rmax
EXPR	545:23	545:29	8	ir <= box -> rmax
FIELD	545:23	545:23	9	ir
LEAF_NODE	545:23	545:23	10	ir
REL_OPERATOR	545:26	545:26	9	<=
LEAF_NODE	545:26	545:26	10	<=
FIELD	545:29	545:34	9	box -> rmax
LEAF_NODE	545:29	545:29	10	box
LEAF_NODE	545:32	545:32	10	->
LEAF_NODE	545:34	545:34	10	rmax
LEAF_NODE	545:38	545:38	7	;
FOR_EXPR	545:40	545:40	7	++ ir
EXPR	545:40	545:42	8	++ ir
LEAF_NODE	545:40	545:40	9	++
FIELD	545:42	545:42	9	ir
LEAF_NODE	545:42	545:42	10	ir
LEAF_NODE	545:44	545:44	7	)
STATEMENTS	546:3	546:3	7	
ITERATION	546:3	546:47	8	
KEYWORD	546:3	546:3	9	for
LEAF_NODE	546:3	546:3	10	for
LEAF_NODE	546:7	546:7	9	(
FOR_INIT	546:8	546:22	9	ig = box -> gmin ;
EXPR	546:8	546:8	10	ig = box -> gmin
ASSIGN	546:8	546:13	11	ig = box -> gmin
LVAL	546:8	546:8	12	ig
FIELD	546:8	546:8	13	ig
LEAF_NODE	546:8	546:8	14	ig
ASSIGN_OP	546:11	546:11	12	=
LEAF_NODE	546:11	546:11	13	=
RVAL	546:13	546:13	12	box -> gmin
FIELD	546:13	546:18	13	box -> gmin
LEAF_NODE	546:13	546:13	14	box
LEAF_NODE	546:16	546:16	14	->
LEAF_NODE	546:18	546:18	14	gmin
LEAF_NODE	546:22	546:22	10	;
CONDITION	546:24	546:24	9	ig <= box -> gmax
EXPR	546:24	546:30	10	ig <= box -> gmax
FIELD	546:24	546:24	11	ig
LEAF_NODE	546:24	546:24	12	ig
REL_OPERATOR	546:27	546:27	11	<=
LEAF_NODE	546:27	546:27	12	<=
FIELD	546:30	546:35	11	box -> gmax
LEAF_NODE	546:30	546:30	12	box
LEAF_NODE	546:33	546:33	12	->
LEAF_NODE	546:35	546:35	12	gmax
LEAF_NODE	546:39	546:39	9	;
FOR_EXPR	546:41	546:41	9	++ ig
EXPR	546:41	546:43	10	++ ig
LEAF_NODE	546:41	546:41	11	++
FIELD	546:43	546:43	11	ig
LEAF_NODE	546:43	546:43	12	ig
LEAF_NODE	546:45	546:45	9	)
STATEMENTS	546:47	553:3	9	
LEAF_NODE	546:47	546:47	10	{
STATEMENTS	547:4	548:11	10	
EXPR_STATEMENT	547:4	547:41	11	histp = & histogram [ ir ] [ ig ] [ box -> bmin ] ;
EXPR	547:4	547:4	12	histp = & histogram [ ir ] [ ig ] [ box -> bmin ]
ASSIGN	547:4	547:12	13	histp = & histogram [ ir ] [ ig ] [ box -> bmin ]
LVAL	547:4	547:4	14	histp
FIELD	547:4	547:4	15	histp
LEAF_NODE	547:4	547:4	16	histp
ASSIGN_OP	547:10	547:10	14	=
LEAF_NODE	547:10	547:10	15	=
RVAL	547:12	547:12	14	& histogram [ ir ] [ ig ] [ box -> bmin ]
UNARY_EXPR	547:12	547:13	15	& histogram [ ir ] [ ig ] [ box -> bmin ]
UNARY_OPERATOR	547:12	547:12	16	&
LEAF_NODE	547:12	547:12	17	&
FIELD	547:13	547:40	16	histogram [ ir ] [ ig ] [ box -> bmin ]
LEAF_NODE	547:13	547:13	17	histogram
LEAF_NODE	547:22	547:22	17	[
EXPR	547:23	547:23	17	ir
FIELD	547:23	547:23	18	ir
LEAF_NODE	547:23	547:23	19	ir
LEAF_NODE	547:25	547:25	17	]
LEAF_NODE	547:26	547:26	17	[
EXPR	547:27	547:27	17	ig
FIELD	547:27	547:27	18	ig
LEAF_NODE	547:27	547:27	19	ig
LEAF_NODE	547:29	547:29	17	]
LEAF_NODE	547:30	547:30	17	[
EXPR	547:31	547:31	17	box -> bmin
FIELD	547:31	547:36	18	box -> bmin
LEAF_NODE	547:31	547:31	19	box
LEAF_NODE	547:34	547:34	19	->
LEAF_NODE	547:36	547:36	19	bmin
LEAF_NODE	547:40	547:40	17	]
LEAF_NODE	547:41	547:41	12	;
ITERATION	548:11	549:5	11	
KEYWORD	548:11	548:11	12	for
LEAF_NODE	548:11	548:11	13	for
LEAF_NODE	548:15	548:15	12	(
FOR_INIT	548:16	548:30	12	ib = box -> bmin ;
EXPR	548:16	548:16	13	ib = box -> bmin
ASSIGN	548:16	548:21	14	ib = box -> bmin
LVAL	548:16	548:16	15	ib
FIELD	548:16	548:16	16	ib
LEAF_NODE	548:16	548:16	17	ib
ASSIGN_OP	548:19	548:19	15	=
LEAF_NODE	548:19	548:19	16	=
RVAL	548:21	548:21	15	box -> bmin
FIELD	548:21	548:26	16	box -> bmin
LEAF_NODE	548:21	548:21	17	box
LEAF_NODE	548:24	548:24	17	->
LEAF_NODE	548:26	548:26	17	bmin
LEAF_NODE	548:30	548:30	13	;
CONDITION	548:32	548:32	12	ib <= box -> bmax
EXPR	548:32	548:38	13	ib <= box -> bmax
FIELD	548:32	548:32	14	ib
LEAF_NODE	548:32	548:32	15	ib
REL_OPERATOR	548:35	548:35	14	<=
LEAF_NODE	548:35	548:35	15	<=
FIELD	548:38	548:43	14	box -> bmax
LEAF_NODE	548:38	548:38	15	box
LEAF_NODE	548:41	548:41	15	->
LEAF_NODE	548:43	548:43	15	bmax
LEAF_NODE	548:47	548:47	12	;
FOR_EXPR	548:49	548:49	12	++ ib
EXPR	548:49	548:51	13	++ ib
LEAF_NODE	548:49	548:49	14	++
FIELD	548:51	548:51	14	ib
LEAF_NODE	548:51	548:51	15	ib
LEAF_NODE	548:53	548:53	12	)
STATEMENTS	549:5	549:5	12	
SELECTION	549:5	549:24	13	
KEYWORD	549:5	549:5	14	if
LEAF_NODE	549:5	549:5	15	if
LEAF_NODE	549:8	549:8	14	(
CONDITION	549:9	549:9	14	* histp ++ != 0
EXPR	549:9	549:21	15	* histp ++ != 0
UNARY_EXPR	549:9	549:10	16	* histp ++
UNARY_OPERATOR	549:9	549:9	17	*
LEAF_NODE	549:9	549:9	18	*
FIELD	549:10	549:15	17	histp ++
LEAF_NODE	549:10	549:10	18	histp
LEAF_NODE	549:15	549:15	18	++
EQ_OPERATOR	549:18	549:18	16	!=
LEAF_NODE	549:18	549:18	17	!=
FIELD	549:21	549:21	16	0
LEAF_NODE	549:21	549:21	17	0
LEAF_NODE	549:22	549:22	14	)
STATEMENTS	549:24	552:5	14	
LEAF_NODE	549:24	549:24	15	{
STATEMENTS	550:6	551:6	15	
EXPR_STATEMENT	550:6	550:20	16	box -> rmin = ir ;
EXPR	550:6	550:6	17	box -> rmin = ir
ASSIGN	550:6	550:18	18	box -> rmin = ir
LVAL	550:6	550:6	19	box -> rmin
FIELD	550:6	550:11	20	box -> rmin
LEAF_NODE	550:6	550:6	21	box
LEAF_NODE	550:9	550:9	21	->
LEAF_NODE	550:11	550:11	21	rmin
ASSIGN_OP	550:16	550:16	19	=
LEAF_NODE	550:16	550:16	20	=
RVAL	550:18	550:18	19	ir
FIELD	550:18	550:18	20	ir
LEAF_NODE	550:18	550:18	21	ir
LEAF_NODE	550:20	550:20	17	;
JUMP_STATEMENT	551:6	551:20	16	goto have_rmin ;
KEYWORD	551:6	551:6	17	goto
LEAF_NODE	551:6	551:6	18	goto
DESTINATION	551:11	551:11	17	have_rmin
LEAF_NODE	551:11	551:11	18	have_rmin
LEAF_NODE	551:20	551:20	17	;
LEAF_NODE	552:5	552:5	15	}
LEAF_NODE	553:3	553:3	10	}
LABEL	554:1	554:10	6	have_rmin :
LEAF_NODE	554:1	554:1	7	have_rmin
LEAF_NODE	554:10	554:10	7	:
SELECTION	555:2	556:3	6	
KEYWORD	555:2	555:2	7	if
LEAF_NODE	555:2	555:2	8	if
LEAF_NODE	555:5	555:5	7	(
CONDITION	555:6	555:6	7	box -> rmax > box -> rmin
EXPR	555:6	555:18	8	box -> rmax > box -> rmin
FIELD	555:6	555:11	9	box -> rmax
LEAF_NODE	555:6	555:6	10	box
LEAF_NODE	555:9	555:9	10	->
LEAF_NODE	555:11	555:11	10	rmax
REL_OPERATOR	555:16	555:16	9	>
LEAF_NODE	555:16	555:16	10	>
FIELD	555:18	555:23	9	box -> rmin
LEAF_NODE	555:18	555:18	10	box
LEAF_NODE	555:21	555:21	10	->
LEAF_NODE	555:23	555:23	10	rmin
LEAF_NODE	555:27	555:27	7	)
STATEMENTS	556:3	556:3	7	
ITERATION	556:3	557:4	8	
KEYWORD	556:3	556:3	9	for
LEAF_NODE	556:3	556:3	10	for
LEAF_NODE	556:7	556:7	9	(
FOR_INIT	556:8	556:22	9	ir = box -> rmax ;
EXPR	556:8	556:8	10	ir = box -> rmax
ASSIGN	556:8	556:13	11	ir = box -> rmax
LVAL	556:8	556:8	12	ir
FIELD	556:8	556:8	13	ir
LEAF_NODE	556:8	556:8	14	ir
ASSIGN_OP	556:11	556:11	12	=
LEAF_NODE	556:11	556:11	13	=
RVAL	556:13	556:13	12	box -> rmax
FIELD	556:13	556:18	13	box -> rmax
LEAF_NODE	556:13	556:13	14	box
LEAF_NODE	556:16	556:16	14	->
LEAF_NODE	556:18	556:18	14	rmax
LEAF_NODE	556:22	556:22	10	;
CONDITION	556:24	556:24	9	ir >= box -> rmin
EXPR	556:24	556:30	10	ir >= box -> rmin
FIELD	556:24	556:24	11	ir
LEAF_NODE	556:24	556:24	12	ir
REL_OPERATOR	556:27	556:27	11	>=
LEAF_NODE	556:27	556:27	12	>=
FIELD	556:30	556:35	11	box -> rmin
LEAF_NODE	556:30	556:30	12	box
LEAF_NODE	556:33	556:33	12	->
LEAF_NODE	556:35	556:35	12	rmin
LEAF_NODE	556:39	556:39	9	;
FOR_EXPR	556:41	556:41	9	-- ir
EXPR	556:41	556:43	10	-- ir
LEAF_NODE	556:41	556:41	11	--
FIELD	556:43	556:43	11	ir
LEAF_NODE	556:43	556:43	12	ir
LEAF_NODE	556:45	556:45	9	)
STATEMENTS	557:4	557:4	9	
ITERATION	557:4	557:48	10	
KEYWORD	557:4	557:4	11	for
LEAF_NODE	557:4	557:4	12	for
LEAF_NODE	557:8	557:8	11	(
FOR_INIT	557:9	557:23	11	ig = box -> gmin ;
EXPR	557:9	557:9	12	ig = box -> gmin
ASSIGN	557:9	557:14	13	ig = box -> gmin
LVAL	557:9	557:9	14	ig
FIELD	557:9	557:9	15	ig
LEAF_NODE	557:9	557:9	16	ig
ASSIGN_OP	557:12	557:12	14	=
LEAF_NODE	557:12	557:12	15	=
RVAL	557:14	557:14	14	box -> gmin
FIELD	557:14	557:19	15	box -> gmin
LEAF_NODE	557:14	557:14	16	box
LEAF_NODE	557:17	557:17	16	->
LEAF_NODE	557:19	557:19	16	gmin
LEAF_NODE	557:23	557:23	12	;
CONDITION	557:25	557:25	11	ig <= box -> gmax
EXPR	557:25	557:31	12	ig <= box -> gmax
FIELD	557:25	557:25	13	ig
LEAF_NODE	557:25	557:25	14	ig
REL_OPERATOR	557:28	557:28	13	<=
LEAF_NODE	557:28	557:28	14	<=
FIELD	557:31	557:36	13	box -> gmax
LEAF_NODE	557:31	557:31	14	box
LEAF_NODE	557:34	557:34	14	->
LEAF_NODE	557:36	557:36	14	gmax
LEAF_NODE	557:40	557:40	11	;
FOR_EXPR	557:42	557:42	11	++ ig
EXPR	557:42	557:44	12	++ ig
LEAF_NODE	557:42	557:42	13	++
FIELD	557:44	557:44	13	ig
LEAF_NODE	557:44	557:44	14	ig
LEAF_NODE	557:46	557:46	11	)
STATEMENTS	557:48	565:11	11	
LEAF_NODE	557:48	557:48	12	{
STATEMENTS	558:5	560:5	12	
EXPR_STATEMENT	558:5	558:42	13	histp = & histogram [ ir ] [ ig ] [ box -> bmin ] ;
EXPR	558:5	558:5	14	histp = & histogram [ ir ] [ ig ] [ box -> bmin ]
ASSIGN	558:5	558:13	15	histp = & histogram [ ir ] [ ig ] [ box -> bmin ]
LVAL	558:5	558:5	16	histp
FIELD	558:5	558:5	17	histp
LEAF_NODE	558:5	558:5	18	histp
ASSIGN_OP	558:11	558:11	16	=
LEAF_NODE	558:11	558:11	17	=
RVAL	558:13	558:13	16	& histogram [ ir ] [ ig ] [ box -> bmin ]
UNARY_EXPR	558:13	558:14	17	& histogram [ ir ] [ ig ] [ box -> bmin ]
UNARY_OPERATOR	558:13	558:13	18	&
LEAF_NODE	558:13	558:13	19	&
FIELD	558:14	558:41	18	histogram [ ir ] [ ig ] [ box -> bmin ]
LEAF_NODE	558:14	558:14	19	histogram
LEAF_NODE	558:23	558:23	19	[
EXPR	558:24	558:24	19	ir
FIELD	558:24	558:24	20	ir
LEAF_NODE	558:24	558:24	21	ir
LEAF_NODE	558:26	558:26	19	]
LEAF_NODE	558:27	558:27	19	[
EXPR	558:28	558:28	19	ig
FIELD	558:28	558:28	20	ig
LEAF_NODE	558:28	558:28	21	ig
LEAF_NODE	558:30	558:30	19	]
LEAF_NODE	558:31	558:31	19	[
EXPR	558:32	558:32	19	box -> bmin
FIELD	558:32	558:37	20	box -> bmin
LEAF_NODE	558:32	558:32	21	box
LEAF_NODE	558:35	558:35	21	->
LEAF_NODE	558:37	558:37	21	bmin
LEAF_NODE	558:41	558:41	19	]
LEAF_NODE	558:42	558:42	14	;
EXPR_STATEMENT	559:5	559:19	13	ib = box -> bmin ;
EXPR	559:5	559:5	14	ib = box -> bmin
ASSIGN	559:5	559:10	15	ib = box -> bmin
LVAL	559:5	559:5	16	ib
FIELD	559:5	559:5	17	ib
LEAF_NODE	559:5	559:5	18	ib
ASSIGN_OP	559:8	559:8	16	=
LEAF_NODE	559:8	559:8	17	=
RVAL	559:10	559:10	16	box -> bmin
FIELD	559:10	559:15	17	box -> bmin
LEAF_NODE	559:10	559:10	18	box
LEAF_NODE	559:13	559:13	18	->
LEAF_NODE	559:15	559:15	18	bmin
LEAF_NODE	559:19	559:19	14	;
ITERATION	560:5	561:6	13	
KEYWORD	560:5	560:5	14	for
LEAF_NODE	560:5	560:5	15	for
LEAF_NODE	560:9	560:9	14	(
FOR_INIT	560:10	560:10	14	;
LEAF_NODE	560:10	560:10	15	;
CONDITION	560:12	560:12	14	ib <= box -> bmax
EXPR	560:12	560:18	15	ib <= box -> bmax
FIELD	560:12	560:12	16	ib
LEAF_NODE	560:12	560:12	17	ib
REL_OPERATOR	560:15	560:15	16	<=
LEAF_NODE	560:15	560:15	17	<=
FIELD	560:18	560:23	16	box -> bmax
LEAF_NODE	560:18	560:18	17	box
LEAF_NODE	560:21	560:21	17	->
LEAF_NODE	560:23	560:23	17	bmax
LEAF_NODE	560:27	560:27	14	;
FOR_EXPR	560:29	560:29	14	++ ib
EXPR	560:29	560:31	15	++ ib
LEAF_NODE	560:29	560:29	16	++
FIELD	560:31	560:31	16	ib
LEAF_NODE	560:31	560:31	17	ib
LEAF_NODE	560:33	560:33	14	)
STATEMENTS	561:6	561:6	14	
SELECTION	561:6	561:25	15	
KEYWORD	561:6	561:6	16	if
LEAF_NODE	561:6	561:6	17	if
LEAF_NODE	561:9	561:9	16	(
CONDITION	561:10	561:10	16	* histp ++ != 0
EXPR	561:10	561:22	17	* histp ++ != 0
UNARY_EXPR	561:10	561:11	18	* histp ++
UNARY_OPERATOR	561:10	561:10	19	*
LEAF_NODE	561:10	561:10	20	*
FIELD	561:11	561:16	19	histp ++
LEAF_NODE	561:11	561:11	20	histp
LEAF_NODE	561:16	561:16	20	++
EQ_OPERATOR	561:19	561:19	18	!=
LEAF_NODE	561:19	561:19	19	!=
FIELD	561:22	561:22	18	0
LEAF_NODE	561:22	561:22	19	0
LEAF_NODE	561:23	561:23	16	)
STATEMENTS	561:25	564:6	16	
LEAF_NODE	561:25	561:25	17	{
STATEMENTS	562:7	563:7	17	
EXPR_STATEMENT	562:7	562:21	18	box -> rmax = ir ;
EXPR	562:7	562:7	19	box -> rmax = ir
ASSIGN	562:7	562:19	20	box -> rmax = ir
LVAL	562:7	562:7	21	box -> rmax
FIELD	562:7	562:12	22	box -> rmax
LEAF_NODE	562:7	562:7	23	box
LEAF_NODE	562:10	562:10	23	->
LEAF_NODE	562:12	562:12	23	rmax
ASSIGN_OP	562:17	562:17	21	=
LEAF_NODE	562:17	562:17	22	=
RVAL	562:19	562:19	21	ir
FIELD	562:19	562:19	22	ir
LEAF_NODE	562:19	562:19	23	ir
LEAF_NODE	562:21	562:21	19	;
JUMP_STATEMENT	563:7	563:21	18	goto have_rmax ;
KEYWORD	563:7	563:7	19	goto
LEAF_NODE	563:7	563:7	20	goto
DESTINATION	563:12	563:12	19	have_rmax
LEAF_NODE	563:12	563:12	20	have_rmax
LEAF_NODE	563:21	563:21	19	;
LEAF_NODE	564:6	564:6	17	}
LEAF_NODE	565:11	565:11	12	}
LEAF_NODE	566:1	566:1	5	}
LABEL	567:0	567:9	3	have_rmax :
LEAF_NODE	567:0	567:0	4	have_rmax
LEAF_NODE	567:9	567:9	4	:
SELECTION	568:1	568:28	3	
KEYWORD	568:1	568:1	4	if
LEAF_NODE	568:1	568:1	5	if
LEAF_NODE	568:4	568:4	4	(
CONDITION	568:5	568:5	4	box -> gmax > box -> gmin
EXPR	568:5	568:17	5	box -> gmax > box -> gmin
FIELD	568:5	568:10	6	box -> gmax
LEAF_NODE	568:5	568:5	7	box
LEAF_NODE	568:8	568:8	7	->
LEAF_NODE	568:10	568:10	7	gmax
REL_OPERATOR	568:15	568:15	6	>
LEAF_NODE	568:15	568:15	7	>
FIELD	568:17	568:22	6	box -> gmin
LEAF_NODE	568:17	568:17	7	box
LEAF_NODE	568:20	568:20	7	->
LEAF_NODE	568:22	568:22	7	gmin
LEAF_NODE	568:26	568:26	4	)
STATEMENTS	568:28	590:1	4	
LEAF_NODE	568:28	568:28	5	{
STATEMENTS	569:2	579:2	5	
ITERATION	569:2	570:3	6	
KEYWORD	569:2	569:2	7	for
LEAF_NODE	569:2	569:2	8	for
LEAF_NODE	569:6	569:6	7	(
FOR_INIT	569:7	569:21	7	ig = box -> gmin ;
EXPR	569:7	569:7	8	ig = box -> gmin
ASSIGN	569:7	569:12	9	ig = box -> gmin
LVAL	569:7	569:7	10	ig
FIELD	569:7	569:7	11	ig
LEAF_NODE	569:7	569:7	12	ig
ASSIGN_OP	569:10	569:10	10	=
LEAF_NODE	569:10	569:10	11	=
RVAL	569:12	569:12	10	box -> gmin
FIELD	569:12	569:17	11	box -> gmin
LEAF_NODE	569:12	569:12	12	box
LEAF_NODE	569:15	569:15	12	->
LEAF_NODE	569:17	569:17	12	gmin
LEAF_NODE	569:21	569:21	8	;
CONDITION	569:23	569:23	7	ig <= box -> gmax
EXPR	569:23	569:29	8	ig <= box -> gmax
FIELD	569:23	569:23	9	ig
LEAF_NODE	569:23	569:23	10	ig
REL_OPERATOR	569:26	569:26	9	<=
LEAF_NODE	569:26	569:26	10	<=
FIELD	569:29	569:34	9	box -> gmax
LEAF_NODE	569:29	569:29	10	box
LEAF_NODE	569:32	569:32	10	->
LEAF_NODE	569:34	569:34	10	gmax
LEAF_NODE	569:38	569:38	7	;
FOR_EXPR	569:40	569:40	7	++ ig
EXPR	569:40	569:42	8	++ ig
LEAF_NODE	569:40	569:40	9	++
FIELD	569:42	569:42	9	ig
LEAF_NODE	569:42	569:42	10	ig
LEAF_NODE	569:44	569:44	7	)
STATEMENTS	570:3	570:3	7	
ITERATION	570:3	570:47	8	
KEYWORD	570:3	570:3	9	for
LEAF_NODE	570:3	570:3	10	for
LEAF_NODE	570:7	570:7	9	(
FOR_INIT	570:8	570:22	9	ir = box -> rmin ;
EXPR	570:8	570:8	10	ir = box -> rmin
ASSIGN	570:8	570:13	11	ir = box -> rmin
LVAL	570:8	570:8	12	ir
FIELD	570:8	570:8	13	ir
LEAF_NODE	570:8	570:8	14	ir
ASSIGN_OP	570:11	570:11	12	=
LEAF_NODE	570:11	570:11	13	=
RVAL	570:13	570:13	12	box -> rmin
FIELD	570:13	570:18	13	box -> rmin
LEAF_NODE	570:13	570:13	14	box
LEAF_NODE	570:16	570:16	14	->
LEAF_NODE	570:18	570:18	14	rmin
LEAF_NODE	570:22	570:22	10	;
CONDITION	570:24	570:24	9	ir <= box -> rmax
EXPR	570:24	570:30	10	ir <= box -> rmax
FIELD	570:24	570:24	11	ir
LEAF_NODE	570:24	570:24	12	ir
REL_OPERATOR	570:27	570:27	11	<=
LEAF_NODE	570:27	570:27	12	<=
FIELD	570:30	570:35	11	box -> rmax
LEAF_NODE	570:30	570:30	12	box
LEAF_NODE	570:33	570:33	12	->
LEAF_NODE	570:35	570:35	12	rmax
LEAF_NODE	570:39	570:39	9	;
FOR_EXPR	570:41	570:41	9	++ ir
EXPR	570:41	570:43	10	++ ir
LEAF_NODE	570:41	570:41	11	++
FIELD	570:43	570:43	11	ir
LEAF_NODE	570:43	570:43	12	ir
LEAF_NODE	570:45	570:45	9	)
STATEMENTS	570:47	577:3	9	
LEAF_NODE	570:47	570:47	10	{
STATEMENTS	571:4	572:11	10	
EXPR_STATEMENT	571:4	571:41	11	histp = & histogram [ ir ] [ ig ] [ box -> bmin ] ;
EXPR	571:4	571:4	12	histp = & histogram [ ir ] [ ig ] [ box -> bmin ]
ASSIGN	571:4	571:12	13	histp = & histogram [ ir ] [ ig ] [ box -> bmin ]
LVAL	571:4	571:4	14	histp
FIELD	571:4	571:4	15	histp
LEAF_NODE	571:4	571:4	16	histp
ASSIGN_OP	571:10	571:10	14	=
LEAF_NODE	571:10	571:10	15	=
RVAL	571:12	571:12	14	& histogram [ ir ] [ ig ] [ box -> bmin ]
UNARY_EXPR	571:12	571:13	15	& histogram [ ir ] [ ig ] [ box -> bmin ]
UNARY_OPERATOR	571:12	571:12	16	&
LEAF_NODE	571:12	571:12	17	&
FIELD	571:13	571:40	16	histogram [ ir ] [ ig ] [ box -> bmin ]
LEAF_NODE	571:13	571:13	17	histogram
LEAF_NODE	571:22	571:22	17	[
EXPR	571:23	571:23	17	ir
FIELD	571:23	571:23	18	ir
LEAF_NODE	571:23	571:23	19	ir
LEAF_NODE	571:25	571:25	17	]
LEAF_NODE	571:26	571:26	17	[
EXPR	571:27	571:27	17	ig
FIELD	571:27	571:27	18	ig
LEAF_NODE	571:27	571:27	19	ig
LEAF_NODE	571:29	571:29	17	]
LEAF_NODE	571:30	571:30	17	[
EXPR	571:31	571:31	17	box -> bmin
FIELD	571:31	571:36	18	box -> bmin
LEAF_NODE	571:31	571:31	19	box
LEAF_NODE	571:34	571:34	19	->
LEAF_NODE	571:36	571:36	19	bmin
LEAF_NODE	571:40	571:40	17	]
LEAF_NODE	571:41	571:41	12	;
ITERATION	572:11	573:4	11	
KEYWORD	572:11	572:11	12	for
LEAF_NODE	572:11	572:11	13	for
LEAF_NODE	572:15	572:15	12	(
FOR_INIT	572:16	572:30	12	ib = box -> bmin ;
EXPR	572:16	572:16	13	ib = box -> bmin
ASSIGN	572:16	572:21	14	ib = box -> bmin
LVAL	572:16	572:16	15	ib
FIELD	572:16	572:16	16	ib
LEAF_NODE	572:16	572:16	17	ib
ASSIGN_OP	572:19	572:19	15	=
LEAF_NODE	572:19	572:19	16	=
RVAL	572:21	572:21	15	box -> bmin
FIELD	572:21	572:26	16	box -> bmin
LEAF_NODE	572:21	572:21	17	box
LEAF_NODE	572:24	572:24	17	->
LEAF_NODE	572:26	572:26	17	bmin
LEAF_NODE	572:30	572:30	13	;
CONDITION	572:32	572:32	12	ib <= box -> bmax
EXPR	572:32	572:38	13	ib <= box -> bmax
FIELD	572:32	572:32	14	ib
LEAF_NODE	572:32	572:32	15	ib
REL_OPERATOR	572:35	572:35	14	<=
LEAF_NODE	572:35	572:35	15	<=
FIELD	572:38	572:43	14	box -> bmax
LEAF_NODE	572:38	572:38	15	box
LEAF_NODE	572:41	572:41	15	->
LEAF_NODE	572:43	572:43	15	bmax
LEAF_NODE	572:47	572:47	12	;
FOR_EXPR	572:49	572:49	12	++ ib
EXPR	572:49	572:51	13	++ ib
LEAF_NODE	572:49	572:49	14	++
FIELD	572:51	572:51	14	ib
LEAF_NODE	572:51	572:51	15	ib
LEAF_NODE	572:53	572:53	12	)
STATEMENTS	573:4	573:4	12	
SELECTION	573:4	573:23	13	
KEYWORD	573:4	573:4	14	if
LEAF_NODE	573:4	573:4	15	if
LEAF_NODE	573:7	573:7	14	(
CONDITION	573:8	573:8	14	* histp ++ != 0
EXPR	573:8	573:20	15	* histp ++ != 0
UNARY_EXPR	573:8	573:9	16	* histp ++
UNARY_OPERATOR	573:8	573:8	17	*
LEAF_NODE	573:8	573:8	18	*
FIELD	573:9	573:14	17	histp ++
LEAF_NODE	573:9	573:9	18	histp
LEAF_NODE	573:14	573:14	18	++
EQ_OPERATOR	573:17	573:17	16	!=
LEAF_NODE	573:17	573:17	17	!=
FIELD	573:20	573:20	16	0
LEAF_NODE	573:20	573:20	17	0
LEAF_NODE	573:21	573:21	14	)
STATEMENTS	573:23	576:4	14	
LEAF_NODE	573:23	573:23	15	{
STATEMENTS	574:5	575:5	15	
EXPR_STATEMENT	574:5	574:19	16	box -> gmin = ig ;
EXPR	574:5	574:5	17	box -> gmin = ig
ASSIGN	574:5	574:17	18	box -> gmin = ig
LVAL	574:5	574:5	19	box -> gmin
FIELD	574:5	574:10	20	box -> gmin
LEAF_NODE	574:5	574:5	21	box
LEAF_NODE	574:8	574:8	21	->
LEAF_NODE	574:10	574:10	21	gmin
ASSIGN_OP	574:15	574:15	19	=
LEAF_NODE	574:15	574:15	20	=
RVAL	574:17	574:17	19	ig
FIELD	574:17	574:17	20	ig
LEAF_NODE	574:17	574:17	21	ig
LEAF_NODE	574:19	574:19	17	;
JUMP_STATEMENT	575:5	575:19	16	goto have_gmin ;
KEYWORD	575:5	575:5	17	goto
LEAF_NODE	575:5	575:5	18	goto
DESTINATION	575:10	575:10	17	have_gmin
LEAF_NODE	575:10	575:10	18	have_gmin
LEAF_NODE	575:19	575:19	17	;
LEAF_NODE	576:4	576:4	15	}
LEAF_NODE	577:3	577:3	10	}
LABEL	578:1	578:10	6	have_gmin :
LEAF_NODE	578:1	578:1	7	have_gmin
LEAF_NODE	578:10	578:10	7	:
SELECTION	579:2	580:3	6	
KEYWORD	579:2	579:2	7	if
LEAF_NODE	579:2	579:2	8	if
LEAF_NODE	579:5	579:5	7	(
CONDITION	579:6	579:6	7	box -> gmax > box -> gmin
EXPR	579:6	579:18	8	box -> gmax > box -> gmin
FIELD	579:6	579:11	9	box -> gmax
LEAF_NODE	579:6	579:6	10	box
LEAF_NODE	579:9	579:9	10	->
LEAF_NODE	579:11	579:11	10	gmax
REL_OPERATOR	579:16	579:16	9	>
LEAF_NODE	579:16	579:16	10	>
FIELD	579:18	579:23	9	box -> gmin
LEAF_NODE	579:18	579:18	10	box
LEAF_NODE	579:21	579:21	10	->
LEAF_NODE	579:23	579:23	10	gmin
LEAF_NODE	579:27	579:27	7	)
STATEMENTS	580:3	580:3	7	
ITERATION	580:3	581:4	8	
KEYWORD	580:3	580:3	9	for
LEAF_NODE	580:3	580:3	10	for
LEAF_NODE	580:7	580:7	9	(
FOR_INIT	580:8	580:22	9	ig = box -> gmax ;
EXPR	580:8	580:8	10	ig = box -> gmax
ASSIGN	580:8	580:13	11	ig = box -> gmax
LVAL	580:8	580:8	12	ig
FIELD	580:8	580:8	13	ig
LEAF_NODE	580:8	580:8	14	ig
ASSIGN_OP	580:11	580:11	12	=
LEAF_NODE	580:11	580:11	13	=
RVAL	580:13	580:13	12	box -> gmax
FIELD	580:13	580:18	13	box -> gmax
LEAF_NODE	580:13	580:13	14	box
LEAF_NODE	580:16	580:16	14	->
LEAF_NODE	580:18	580:18	14	gmax
LEAF_NODE	580:22	580:22	10	;
CONDITION	580:24	580:24	9	ig >= box -> gmin
EXPR	580:24	580:30	10	ig >= box -> gmin
FIELD	580:24	580:24	11	ig
LEAF_NODE	580:24	580:24	12	ig
REL_OPERATOR	580:27	580:27	11	>=
LEAF_NODE	580:27	580:27	12	>=
FIELD	580:30	580:35	11	box -> gmin
LEAF_NODE	580:30	580:30	12	box
LEAF_NODE	580:33	580:33	12	->
LEAF_NODE	580:35	580:35	12	gmin
LEAF_NODE	580:39	580:39	9	;
FOR_EXPR	580:41	580:41	9	-- ig
EXPR	580:41	580:43	10	-- ig
LEAF_NODE	580:41	580:41	11	--
FIELD	580:43	580:43	11	ig
LEAF_NODE	580:43	580:43	12	ig
LEAF_NODE	580:45	580:45	9	)
STATEMENTS	581:4	581:4	9	
ITERATION	581:4	581:48	10	
KEYWORD	581:4	581:4	11	for
LEAF_NODE	581:4	581:4	12	for
LEAF_NODE	581:8	581:8	11	(
FOR_INIT	581:9	581:23	11	ir = box -> rmin ;
EXPR	581:9	581:9	12	ir = box -> rmin
ASSIGN	581:9	581:14	13	ir = box -> rmin
LVAL	581:9	581:9	14	ir
FIELD	581:9	581:9	15	ir
LEAF_NODE	581:9	581:9	16	ir
ASSIGN_OP	581:12	581:12	14	=
LEAF_NODE	581:12	581:12	15	=
RVAL	581:14	581:14	14	box -> rmin
FIELD	581:14	581:19	15	box -> rmin
LEAF_NODE	581:14	581:14	16	box
LEAF_NODE	581:17	581:17	16	->
LEAF_NODE	581:19	581:19	16	rmin
LEAF_NODE	581:23	581:23	12	;
CONDITION	581:25	581:25	11	ir <= box -> rmax
EXPR	581:25	581:31	12	ir <= box -> rmax
FIELD	581:25	581:25	13	ir
LEAF_NODE	581:25	581:25	14	ir
REL_OPERATOR	581:28	581:28	13	<=
LEAF_NODE	581:28	581:28	14	<=
FIELD	581:31	581:36	13	box -> rmax
LEAF_NODE	581:31	581:31	14	box
LEAF_NODE	581:34	581:34	14	->
LEAF_NODE	581:36	581:36	14	rmax
LEAF_NODE	581:40	581:40	11	;
FOR_EXPR	581:42	581:42	11	++ ir
EXPR	581:42	581:44	12	++ ir
LEAF_NODE	581:42	581:42	13	++
FIELD	581:44	581:44	13	ir
LEAF_NODE	581:44	581:44	14	ir
LEAF_NODE	581:46	581:46	11	)
STATEMENTS	581:48	589:11	11	
LEAF_NODE	581:48	581:48	12	{
STATEMENTS	582:5	584:5	12	
EXPR_STATEMENT	582:5	582:42	13	histp = & histogram [ ir ] [ ig ] [ box -> bmin ] ;
EXPR	582:5	582:5	14	histp = & histogram [ ir ] [ ig ] [ box -> bmin ]
ASSIGN	582:5	582:13	15	histp = & histogram [ ir ] [ ig ] [ box -> bmin ]
LVAL	582:5	582:5	16	histp
FIELD	582:5	582:5	17	histp
LEAF_NODE	582:5	582:5	18	histp
ASSIGN_OP	582:11	582:11	16	=
LEAF_NODE	582:11	582:11	17	=
RVAL	582:13	582:13	16	& histogram [ ir ] [ ig ] [ box -> bmin ]
UNARY_EXPR	582:13	582:14	17	& histogram [ ir ] [ ig ] [ box -> bmin ]
UNARY_OPERATOR	582:13	582:13	18	&
LEAF_NODE	582:13	582:13	19	&
FIELD	582:14	582:41	18	histogram [ ir ] [ ig ] [ box -> bmin ]
LEAF_NODE	582:14	582:14	19	histogram
LEAF_NODE	582:23	582:23	19	[
EXPR	582:24	582:24	19	ir
FIELD	582:24	582:24	20	ir
LEAF_NODE	582:24	582:24	21	ir
LEAF_NODE	582:26	582:26	19	]
LEAF_NODE	582:27	582:27	19	[
EXPR	582:28	582:28	19	ig
FIELD	582:28	582:28	20	ig
LEAF_NODE	582:28	582:28	21	ig
LEAF_NODE	582:30	582:30	19	]
LEAF_NODE	582:31	582:31	19	[
EXPR	582:32	582:32	19	box -> bmin
FIELD	582:32	582:37	20	box -> bmin
LEAF_NODE	582:32	582:32	21	box
LEAF_NODE	582:35	582:35	21	->
LEAF_NODE	582:37	582:37	21	bmin
LEAF_NODE	582:41	582:41	19	]
LEAF_NODE	582:42	582:42	14	;
EXPR_STATEMENT	583:5	583:19	13	ib = box -> bmin ;
EXPR	583:5	583:5	14	ib = box -> bmin
ASSIGN	583:5	583:10	15	ib = box -> bmin
LVAL	583:5	583:5	16	ib
FIELD	583:5	583:5	17	ib
LEAF_NODE	583:5	583:5	18	ib
ASSIGN_OP	583:8	583:8	16	=
LEAF_NODE	583:8	583:8	17	=
RVAL	583:10	583:10	16	box -> bmin
FIELD	583:10	583:15	17	box -> bmin
LEAF_NODE	583:10	583:10	18	box
LEAF_NODE	583:13	583:13	18	->
LEAF_NODE	583:15	583:15	18	bmin
LEAF_NODE	583:19	583:19	14	;
ITERATION	584:5	585:6	13	
KEYWORD	584:5	584:5	14	for
LEAF_NODE	584:5	584:5	15	for
LEAF_NODE	584:9	584:9	14	(
FOR_INIT	584:10	584:10	14	;
LEAF_NODE	584:10	584:10	15	;
CONDITION	584:12	584:12	14	ib <= box -> bmax
EXPR	584:12	584:18	15	ib <= box -> bmax
FIELD	584:12	584:12	16	ib
LEAF_NODE	584:12	584:12	17	ib
REL_OPERATOR	584:15	584:15	16	<=
LEAF_NODE	584:15	584:15	17	<=
FIELD	584:18	584:23	16	box -> bmax
LEAF_NODE	584:18	584:18	17	box
LEAF_NODE	584:21	584:21	17	->
LEAF_NODE	584:23	584:23	17	bmax
LEAF_NODE	584:27	584:27	14	;
FOR_EXPR	584:29	584:29	14	++ ib
EXPR	584:29	584:31	15	++ ib
LEAF_NODE	584:29	584:29	16	++
FIELD	584:31	584:31	16	ib
LEAF_NODE	584:31	584:31	17	ib
LEAF_NODE	584:33	584:33	14	)
STATEMENTS	585:6	585:6	14	
SELECTION	585:6	585:25	15	
KEYWORD	585:6	585:6	16	if
LEAF_NODE	585:6	585:6	17	if
LEAF_NODE	585:9	585:9	16	(
CONDITION	585:10	585:10	16	* histp ++ != 0
EXPR	585:10	585:22	17	* histp ++ != 0
UNARY_EXPR	585:10	585:11	18	* histp ++
UNARY_OPERATOR	585:10	585:10	19	*
LEAF_NODE	585:10	585:10	20	*
FIELD	585:11	585:16	19	histp ++
LEAF_NODE	585:11	585:11	20	histp
LEAF_NODE	585:16	585:16	20	++
EQ_OPERATOR	585:19	585:19	18	!=
LEAF_NODE	585:19	585:19	19	!=
FIELD	585:22	585:22	18	0
LEAF_NODE	585:22	585:22	19	0
LEAF_NODE	585:23	585:23	16	)
STATEMENTS	585:25	588:6	16	
LEAF_NODE	585:25	585:25	17	{
STATEMENTS	586:7	587:7	17	
EXPR_STATEMENT	586:7	586:21	18	box -> gmax = ig ;
EXPR	586:7	586:7	19	box -> gmax = ig
ASSIGN	586:7	586:19	20	box -> gmax = ig
LVAL	586:7	586:7	21	box -> gmax
FIELD	586:7	586:12	22	box -> gmax
LEAF_NODE	586:7	586:7	23	box
LEAF_NODE	586:10	586:10	23	->
LEAF_NODE	586:12	586:12	23	gmax
ASSIGN_OP	586:17	586:17	21	=
LEAF_NODE	586:17	586:17	22	=
RVAL	586:19	586:19	21	ig
FIELD	586:19	586:19	22	ig
LEAF_NODE	586:19	586:19	23	ig
LEAF_NODE	586:21	586:21	19	;
JUMP_STATEMENT	587:7	587:21	18	goto have_gmax ;
KEYWORD	587:7	587:7	19	goto
LEAF_NODE	587:7	587:7	20	goto
DESTINATION	587:12	587:12	19	have_gmax
LEAF_NODE	587:12	587:12	20	have_gmax
LEAF_NODE	587:21	587:21	19	;
LEAF_NODE	588:6	588:6	17	}
LEAF_NODE	589:11	589:11	12	}
LEAF_NODE	590:1	590:1	5	}
LABEL	591:0	591:9	3	have_gmax :
LEAF_NODE	591:0	591:0	4	have_gmax
LEAF_NODE	591:9	591:9	4	:
SELECTION	592:1	592:28	3	
KEYWORD	592:1	592:1	4	if
LEAF_NODE	592:1	592:1	5	if
LEAF_NODE	592:4	592:4	4	(
CONDITION	592:5	592:5	4	box -> bmax > box -> bmin
EXPR	592:5	592:17	5	box -> bmax > box -> bmin
FIELD	592:5	592:10	6	box -> bmax
LEAF_NODE	592:5	592:5	7	box
LEAF_NODE	592:8	592:8	7	->
LEAF_NODE	592:10	592:10	7	bmax
REL_OPERATOR	592:15	592:15	6	>
LEAF_NODE	592:15	592:15	7	>
FIELD	592:17	592:22	6	box -> bmin
LEAF_NODE	592:17	592:17	7	box
LEAF_NODE	592:20	592:20	7	->
LEAF_NODE	592:22	592:22	7	bmin
LEAF_NODE	592:26	592:26	4	)
STATEMENTS	592:28	618:1	4	
LEAF_NODE	592:28	592:28	5	{
STATEMENTS	593:2	605:2	5	
ITERATION	593:2	594:3	6	
KEYWORD	593:2	593:2	7	for
LEAF_NODE	593:2	593:2	8	for
LEAF_NODE	593:6	593:6	7	(
FOR_INIT	593:7	593:21	7	ib = box -> bmin ;
EXPR	593:7	593:7	8	ib = box -> bmin
ASSIGN	593:7	593:12	9	ib = box -> bmin
LVAL	593:7	593:7	10	ib
FIELD	593:7	593:7	11	ib
LEAF_NODE	593:7	593:7	12	ib
ASSIGN_OP	593:10	593:10	10	=
LEAF_NODE	593:10	593:10	11	=
RVAL	593:12	593:12	10	box -> bmin
FIELD	593:12	593:17	11	box -> bmin
LEAF_NODE	593:12	593:12	12	box
LEAF_NODE	593:15	593:15	12	->
LEAF_NODE	593:17	593:17	12	bmin
LEAF_NODE	593:21	593:21	8	;
CONDITION	593:23	593:23	7	ib <= box -> bmax
EXPR	593:23	593:29	8	ib <= box -> bmax
FIELD	593:23	593:23	9	ib
LEAF_NODE	593:23	593:23	10	ib
REL_OPERATOR	593:26	593:26	9	<=
LEAF_NODE	593:26	593:26	10	<=
FIELD	593:29	593:34	9	box -> bmax
LEAF_NODE	593:29	593:29	10	box
LEAF_NODE	593:32	593:32	10	->
LEAF_NODE	593:34	593:34	10	bmax
LEAF_NODE	593:38	593:38	7	;
FOR_EXPR	593:40	593:40	7	++ ib
EXPR	593:40	593:42	8	++ ib
LEAF_NODE	593:40	593:40	9	++
FIELD	593:42	593:42	9	ib
LEAF_NODE	593:42	593:42	10	ib
LEAF_NODE	593:44	593:44	7	)
STATEMENTS	594:3	594:3	7	
ITERATION	594:3	594:47	8	
KEYWORD	594:3	594:3	9	for
LEAF_NODE	594:3	594:3	10	for
LEAF_NODE	594:7	594:7	9	(
FOR_INIT	594:8	594:22	9	ir = box -> rmin ;
EXPR	594:8	594:8	10	ir = box -> rmin
ASSIGN	594:8	594:13	11	ir = box -> rmin
LVAL	594:8	594:8	12	ir
FIELD	594:8	594:8	13	ir
LEAF_NODE	594:8	594:8	14	ir
ASSIGN_OP	594:11	594:11	12	=
LEAF_NODE	594:11	594:11	13	=
RVAL	594:13	594:13	12	box -> rmin
FIELD	594:13	594:18	13	box -> rmin
LEAF_NODE	594:13	594:13	14	box
LEAF_NODE	594:16	594:16	14	->
LEAF_NODE	594:18	594:18	14	rmin
LEAF_NODE	594:22	594:22	10	;
CONDITION	594:24	594:24	9	ir <= box -> rmax
EXPR	594:24	594:30	10	ir <= box -> rmax
FIELD	594:24	594:24	11	ir
LEAF_NODE	594:24	594:24	12	ir
REL_OPERATOR	594:27	594:27	11	<=
LEAF_NODE	594:27	594:27	12	<=
FIELD	594:30	594:35	11	box -> rmax
LEAF_NODE	594:30	594:30	12	box
LEAF_NODE	594:33	594:33	12	->
LEAF_NODE	594:35	594:35	12	rmax
LEAF_NODE	594:39	594:39	9	;
FOR_EXPR	594:41	594:41	9	++ ir
EXPR	594:41	594:43	10	++ ir
LEAF_NODE	594:41	594:41	11	++
FIELD	594:43	594:43	11	ir
LEAF_NODE	594:43	594:43	12	ir
LEAF_NODE	594:45	594:45	9	)
STATEMENTS	594:47	603:10	9	
LEAF_NODE	594:47	594:47	10	{
STATEMENTS	595:4	596:11	10	
EXPR_STATEMENT	595:4	595:41	11	histp = & histogram [ ir ] [ box -> gmin ] [ ib ] ;
EXPR	595:4	595:4	12	histp = & histogram [ ir ] [ box -> gmin ] [ ib ]
ASSIGN	595:4	595:12	13	histp = & histogram [ ir ] [ box -> gmin ] [ ib ]
LVAL	595:4	595:4	14	histp
FIELD	595:4	595:4	15	histp
LEAF_NODE	595:4	595:4	16	histp
ASSIGN_OP	595:10	595:10	14	=
LEAF_NODE	595:10	595:10	15	=
RVAL	595:12	595:12	14	& histogram [ ir ] [ box -> gmin ] [ ib ]
UNARY_EXPR	595:12	595:13	15	& histogram [ ir ] [ box -> gmin ] [ ib ]
UNARY_OPERATOR	595:12	595:12	16	&
LEAF_NODE	595:12	595:12	17	&
FIELD	595:13	595:40	16	histogram [ ir ] [ box -> gmin ] [ ib ]
LEAF_NODE	595:13	595:13	17	histogram
LEAF_NODE	595:22	595:22	17	[
EXPR	595:23	595:23	17	ir
FIELD	595:23	595:23	18	ir
LEAF_NODE	595:23	595:23	19	ir
LEAF_NODE	595:25	595:25	17	]
LEAF_NODE	595:26	595:26	17	[
EXPR	595:27	595:27	17	box -> gmin
FIELD	595:27	595:32	18	box -> gmin
LEAF_NODE	595:27	595:27	19	box
LEAF_NODE	595:30	595:30	19	->
LEAF_NODE	595:32	595:32	19	gmin
LEAF_NODE	595:36	595:36	17	]
LEAF_NODE	595:37	595:37	17	[
EXPR	595:38	595:38	17	ib
FIELD	595:38	595:38	18	ib
LEAF_NODE	595:38	595:38	19	ib
LEAF_NODE	595:40	595:40	17	]
LEAF_NODE	595:41	595:41	12	;
ITERATION	596:11	596:55	11	
KEYWORD	596:11	596:11	12	for
LEAF_NODE	596:11	596:11	13	for
LEAF_NODE	596:15	596:15	12	(
FOR_INIT	596:16	596:30	12	ig = box -> gmin ;
EXPR	596:16	596:16	13	ig = box -> gmin
ASSIGN	596:16	596:21	14	ig = box -> gmin
LVAL	596:16	596:16	15	ig
FIELD	596:16	596:16	16	ig
LEAF_NODE	596:16	596:16	17	ig
ASSIGN_OP	596:19	596:19	15	=
LEAF_NODE	596:19	596:19	16	=
RVAL	596:21	596:21	15	box -> gmin
FIELD	596:21	596:26	16	box -> gmin
LEAF_NODE	596:21	596:21	17	box
LEAF_NODE	596:24	596:24	17	->
LEAF_NODE	596:26	596:26	17	gmin
LEAF_NODE	596:30	596:30	13	;
CONDITION	596:32	596:32	12	ig <= box -> gmax
EXPR	596:32	596:38	13	ig <= box -> gmax
FIELD	596:32	596:32	14	ig
LEAF_NODE	596:32	596:32	15	ig
REL_OPERATOR	596:35	596:35	14	<=
LEAF_NODE	596:35	596:35	15	<=
FIELD	596:38	596:43	14	box -> gmax
LEAF_NODE	596:38	596:38	15	box
LEAF_NODE	596:41	596:41	15	->
LEAF_NODE	596:43	596:43	15	gmax
LEAF_NODE	596:47	596:47	12	;
FOR_EXPR	596:49	596:49	12	++ ig
EXPR	596:49	596:51	13	++ ig
LEAF_NODE	596:49	596:49	14	++
FIELD	596:51	596:51	14	ig
LEAF_NODE	596:51	596:51	15	ig
LEAF_NODE	596:53	596:53	12	)
STATEMENTS	596:55	602:11	12	
LEAF_NODE	596:55	596:55	13	{
STATEMENTS	597:5	601:5	13	
SELECTION	597:5	597:22	14	
KEYWORD	597:5	597:5	15	if
LEAF_NODE	597:5	597:5	16	if
LEAF_NODE	597:8	597:8	15	(
CONDITION	597:9	597:9	15	* histp != 0
EXPR	597:9	597:19	16	* histp != 0
UNARY_EXPR	597:9	597:10	17	* histp
UNARY_OPERATOR	597:9	597:9	18	*
LEAF_NODE	597:9	597:9	19	*
FIELD	597:10	597:10	18	histp
LEAF_NODE	597:10	597:10	19	histp
EQ_OPERATOR	597:16	597:16	17	!=
LEAF_NODE	597:16	597:16	18	!=
FIELD	597:19	597:19	17	0
LEAF_NODE	597:19	597:19	18	0
LEAF_NODE	597:20	597:20	15	)
STATEMENTS	597:22	600:5	15	
LEAF_NODE	597:22	597:22	16	{
STATEMENTS	598:6	599:6	16	
EXPR_STATEMENT	598:6	598:20	17	box -> bmin = ib ;
EXPR	598:6	598:6	18	box -> bmin = ib
ASSIGN	598:6	598:18	19	box -> bmin = ib
LVAL	598:6	598:6	20	box -> bmin
FIELD	598:6	598:11	21	box -> bmin
LEAF_NODE	598:6	598:6	22	box
LEAF_NODE	598:9	598:9	22	->
LEAF_NODE	598:11	598:11	22	bmin
ASSIGN_OP	598:16	598:16	20	=
LEAF_NODE	598:16	598:16	21	=
RVAL	598:18	598:18	20	ib
FIELD	598:18	598:18	21	ib
LEAF_NODE	598:18	598:18	22	ib
LEAF_NODE	598:20	598:20	18	;
JUMP_STATEMENT	599:6	599:20	17	goto have_bmin ;
KEYWORD	599:6	599:6	18	goto
LEAF_NODE	599:6	599:6	19	goto
DESTINATION	599:11	599:11	18	have_bmin
LEAF_NODE	599:11	599:11	19	have_bmin
LEAF_NODE	599:20	599:20	18	;
LEAF_NODE	600:5	600:5	16	}
EXPR_STATEMENT	601:5	601:19	14	histp += B_LEN ;
EXPR	601:5	601:5	15	histp += B_LEN
ASSIGN	601:5	601:14	16	histp += B_LEN
LVAL	601:5	601:5	17	histp
FIELD	601:5	601:5	18	histp
LEAF_NODE	601:5	601:5	19	histp
ASSIGN_OP	601:11	601:11	17	+=
LEAF_NODE	601:11	601:11	18	+=
RVAL	601:14	601:14	17	B_LEN
FIELD	601:14	601:14	18	B_LEN
LEAF_NODE	601:14	601:14	19	B_LEN
LEAF_NODE	601:19	601:19	15	;
LEAF_NODE	602:11	602:11	13	}
LEAF_NODE	603:10	603:10	10	}
LABEL	604:1	604:10	6	have_bmin :
LEAF_NODE	604:1	604:1	7	have_bmin
LEAF_NODE	604:10	604:10	7	:
SELECTION	605:2	606:3	6	
KEYWORD	605:2	605:2	7	if
LEAF_NODE	605:2	605:2	8	if
LEAF_NODE	605:5	605:5	7	(
CONDITION	605:6	605:6	7	box -> bmax > box -> bmin
EXPR	605:6	605:18	8	box -> bmax > box -> bmin
FIELD	605:6	605:11	9	box -> bmax
LEAF_NODE	605:6	605:6	10	box
LEAF_NODE	605:9	605:9	10	->
LEAF_NODE	605:11	605:11	10	bmax
REL_OPERATOR	605:16	605:16	9	>
LEAF_NODE	605:16	605:16	10	>
FIELD	605:18	605:23	9	box -> bmin
LEAF_NODE	605:18	605:18	10	box
LEAF_NODE	605:21	605:21	10	->
LEAF_NODE	605:23	605:23	10	bmin
LEAF_NODE	605:27	605:27	7	)
STATEMENTS	606:3	606:3	7	
ITERATION	606:3	607:4	8	
KEYWORD	606:3	606:3	9	for
LEAF_NODE	606:3	606:3	10	for
LEAF_NODE	606:7	606:7	9	(
FOR_INIT	606:8	606:22	9	ib = box -> bmax ;
EXPR	606:8	606:8	10	ib = box -> bmax
ASSIGN	606:8	606:13	11	ib = box -> bmax
LVAL	606:8	606:8	12	ib
FIELD	606:8	606:8	13	ib
LEAF_NODE	606:8	606:8	14	ib
ASSIGN_OP	606:11	606:11	12	=
LEAF_NODE	606:11	606:11	13	=
RVAL	606:13	606:13	12	box -> bmax
FIELD	606:13	606:18	13	box -> bmax
LEAF_NODE	606:13	606:13	14	box
LEAF_NODE	606:16	606:16	14	->
LEAF_NODE	606:18	606:18	14	bmax
LEAF_NODE	606:22	606:22	10	;
CONDITION	606:24	606:24	9	ib >= box -> bmin
EXPR	606:24	606:30	10	ib >= box -> bmin
FIELD	606:24	606:24	11	ib
LEAF_NODE	606:24	606:24	12	ib
REL_OPERATOR	606:27	606:27	11	>=
LEAF_NODE	606:27	606:27	12	>=
FIELD	606:30	606:35	11	box -> bmin
LEAF_NODE	606:30	606:30	12	box
LEAF_NODE	606:33	606:33	12	->
LEAF_NODE	606:35	606:35	12	bmin
LEAF_NODE	606:39	606:39	9	;
FOR_EXPR	606:41	606:41	9	-- ib
EXPR	606:41	606:43	10	-- ib
LEAF_NODE	606:41	606:41	11	--
FIELD	606:43	606:43	11	ib
LEAF_NODE	606:43	606:43	12	ib
LEAF_NODE	606:45	606:45	9	)
STATEMENTS	607:4	607:4	9	
ITERATION	607:4	607:48	10	
KEYWORD	607:4	607:4	11	for
LEAF_NODE	607:4	607:4	12	for
LEAF_NODE	607:8	607:8	11	(
FOR_INIT	607:9	607:23	11	ir = box -> rmin ;
EXPR	607:9	607:9	12	ir = box -> rmin
ASSIGN	607:9	607:14	13	ir = box -> rmin
LVAL	607:9	607:9	14	ir
FIELD	607:9	607:9	15	ir
LEAF_NODE	607:9	607:9	16	ir
ASSIGN_OP	607:12	607:12	14	=
LEAF_NODE	607:12	607:12	15	=
RVAL	607:14	607:14	14	box -> rmin
FIELD	607:14	607:19	15	box -> rmin
LEAF_NODE	607:14	607:14	16	box
LEAF_NODE	607:17	607:17	16	->
LEAF_NODE	607:19	607:19	16	rmin
LEAF_NODE	607:23	607:23	12	;
CONDITION	607:25	607:25	11	ir <= box -> rmax
EXPR	607:25	607:31	12	ir <= box -> rmax
FIELD	607:25	607:25	13	ir
LEAF_NODE	607:25	607:25	14	ir
REL_OPERATOR	607:28	607:28	13	<=
LEAF_NODE	607:28	607:28	14	<=
FIELD	607:31	607:36	13	box -> rmax
LEAF_NODE	607:31	607:31	14	box
LEAF_NODE	607:34	607:34	14	->
LEAF_NODE	607:36	607:36	14	rmax
LEAF_NODE	607:40	607:40	11	;
FOR_EXPR	607:42	607:42	11	++ ir
EXPR	607:42	607:44	12	++ ir
LEAF_NODE	607:42	607:42	13	++
FIELD	607:44	607:44	13	ir
LEAF_NODE	607:44	607:44	14	ir
LEAF_NODE	607:46	607:46	11	)
STATEMENTS	607:48	617:11	11	
LEAF_NODE	607:48	607:48	12	{
STATEMENTS	608:5	610:5	12	
EXPR_STATEMENT	608:5	608:42	13	histp = & histogram [ ir ] [ box -> gmin ] [ ib ] ;
EXPR	608:5	608:5	14	histp = & histogram [ ir ] [ box -> gmin ] [ ib ]
ASSIGN	608:5	608:13	15	histp = & histogram [ ir ] [ box -> gmin ] [ ib ]
LVAL	608:5	608:5	16	histp
FIELD	608:5	608:5	17	histp
LEAF_NODE	608:5	608:5	18	histp
ASSIGN_OP	608:11	608:11	16	=
LEAF_NODE	608:11	608:11	17	=
RVAL	608:13	608:13	16	& histogram [ ir ] [ box -> gmin ] [ ib ]
UNARY_EXPR	608:13	608:14	17	& histogram [ ir ] [ box -> gmin ] [ ib ]
UNARY_OPERATOR	608:13	608:13	18	&
LEAF_NODE	608:13	608:13	19	&
FIELD	608:14	608:41	18	histogram [ ir ] [ box -> gmin ] [ ib ]
LEAF_NODE	608:14	608:14	19	histogram
LEAF_NODE	608:23	608:23	19	[
EXPR	608:24	608:24	19	ir
FIELD	608:24	608:24	20	ir
LEAF_NODE	608:24	608:24	21	ir
LEAF_NODE	608:26	608:26	19	]
LEAF_NODE	608:27	608:27	19	[
EXPR	608:28	608:28	19	box -> gmin
FIELD	608:28	608:33	20	box -> gmin
LEAF_NODE	608:28	608:28	21	box
LEAF_NODE	608:31	608:31	21	->
LEAF_NODE	608:33	608:33	21	gmin
LEAF_NODE	608:37	608:37	19	]
LEAF_NODE	608:38	608:38	19	[
EXPR	608:39	608:39	19	ib
FIELD	608:39	608:39	20	ib
LEAF_NODE	608:39	608:39	21	ib
LEAF_NODE	608:41	608:41	19	]
LEAF_NODE	608:42	608:42	14	;
EXPR_STATEMENT	609:5	609:19	13	ig = box -> gmin ;
EXPR	609:5	609:5	14	ig = box -> gmin
ASSIGN	609:5	609:10	15	ig = box -> gmin
LVAL	609:5	609:5	16	ig
FIELD	609:5	609:5	17	ig
LEAF_NODE	609:5	609:5	18	ig
ASSIGN_OP	609:8	609:8	16	=
LEAF_NODE	609:8	609:8	17	=
RVAL	609:10	609:10	16	box -> gmin
FIELD	609:10	609:15	17	box -> gmin
LEAF_NODE	609:10	609:10	18	box
LEAF_NODE	609:13	609:13	18	->
LEAF_NODE	609:15	609:15	18	gmin
LEAF_NODE	609:19	609:19	14	;
ITERATION	610:5	610:35	13	
KEYWORD	610:5	610:5	14	for
LEAF_NODE	610:5	610:5	15	for
LEAF_NODE	610:9	610:9	14	(
FOR_INIT	610:10	610:10	14	;
LEAF_NODE	610:10	610:10	15	;
CONDITION	610:12	610:12	14	ig <= box -> gmax
EXPR	610:12	610:18	15	ig <= box -> gmax
FIELD	610:12	610:12	16	ig
LEAF_NODE	610:12	610:12	17	ig
REL_OPERATOR	610:15	610:15	16	<=
LEAF_NODE	610:15	610:15	17	<=
FIELD	610:18	610:23	16	box -> gmax
LEAF_NODE	610:18	610:18	17	box
LEAF_NODE	610:21	610:21	17	->
LEAF_NODE	610:23	610:23	17	gmax
LEAF_NODE	610:27	610:27	14	;
FOR_EXPR	610:29	610:29	14	++ ig
EXPR	610:29	610:31	15	++ ig
LEAF_NODE	610:29	610:29	16	++
FIELD	610:31	610:31	16	ig
LEAF_NODE	610:31	610:31	17	ig
LEAF_NODE	610:33	610:33	14	)
STATEMENTS	610:35	616:5	14	
LEAF_NODE	610:35	610:35	15	{
STATEMENTS	611:6	615:6	15	
SELECTION	611:6	611:23	16	
KEYWORD	611:6	611:6	17	if
LEAF_NODE	611:6	611:6	18	if
LEAF_NODE	611:9	611:9	17	(
CONDITION	611:10	611:10	17	* histp != 0
EXPR	611:10	611:20	18	* histp != 0
UNARY_EXPR	611:10	611:11	19	* histp
UNARY_OPERATOR	611:10	611:10	20	*
LEAF_NODE	611:10	611:10	21	*
FIELD	611:11	611:11	20	histp
LEAF_NODE	611:11	611:11	21	histp
EQ_OPERATOR	611:17	611:17	19	!=
LEAF_NODE	611:17	611:17	20	!=
FIELD	611:20	611:20	19	0
LEAF_NODE	611:20	611:20	20	0
LEAF_NODE	611:21	611:21	17	)
STATEMENTS	611:23	614:6	17	
LEAF_NODE	611:23	611:23	18	{
STATEMENTS	612:7	613:7	18	
EXPR_STATEMENT	612:7	612:21	19	box -> bmax = ib ;
EXPR	612:7	612:7	20	box -> bmax = ib
ASSIGN	612:7	612:19	21	box -> bmax = ib
LVAL	612:7	612:7	22	box -> bmax
FIELD	612:7	612:12	23	box -> bmax
LEAF_NODE	612:7	612:7	24	box
LEAF_NODE	612:10	612:10	24	->
LEAF_NODE	612:12	612:12	24	bmax
ASSIGN_OP	612:17	612:17	22	=
LEAF_NODE	612:17	612:17	23	=
RVAL	612:19	612:19	22	ib
FIELD	612:19	612:19	23	ib
LEAF_NODE	612:19	612:19	24	ib
LEAF_NODE	612:21	612:21	20	;
JUMP_STATEMENT	613:7	613:21	19	goto have_bmax ;
KEYWORD	613:7	613:7	20	goto
LEAF_NODE	613:7	613:7	21	goto
DESTINATION	613:12	613:12	20	have_bmax
LEAF_NODE	613:12	613:12	21	have_bmax
LEAF_NODE	613:21	613:21	20	;
LEAF_NODE	614:6	614:6	18	}
EXPR_STATEMENT	615:6	615:20	16	histp += B_LEN ;
EXPR	615:6	615:6	17	histp += B_LEN
ASSIGN	615:6	615:15	18	histp += B_LEN
LVAL	615:6	615:6	19	histp
FIELD	615:6	615:6	20	histp
LEAF_NODE	615:6	615:6	21	histp
ASSIGN_OP	615:12	615:12	19	+=
LEAF_NODE	615:12	615:12	20	+=
RVAL	615:15	615:15	19	B_LEN
FIELD	615:15	615:15	20	B_LEN
LEAF_NODE	615:15	615:15	21	B_LEN
LEAF_NODE	615:20	615:20	17	;
LEAF_NODE	616:5	616:5	15	}
LEAF_NODE	617:11	617:11	12	}
LEAF_NODE	618:1	618:1	5	}
LABEL	619:0	619:9	3	have_bmax :
LEAF_NODE	619:0	619:0	4	have_bmax
LEAF_NODE	619:9	619:9	4	:
LEAF_NODE	620:1	620:1	3	;
LEAF_NODE	621:0	621:0	2	}
FUNCTION_DEF	623:0	709:0	1	
RETURN_TYPE	623:0	623:14	2	static C_cell *
LEAF_NODE	623:0	623:0	3	static
TYPE_NAME	623:7	623:7	3	C_cell
LEAF_NODE	623:7	623:7	4	C_cell
LEAF_NODE	623:14	623:14	3	*
FUNCTION_NAME	624:0	624:0	2	create_colorcell
LEAF_NODE	624:0	624:0	3	create_colorcell
PARAMETER_LIST	624:16	624:45	2	( int red , int green , int blue )
LEAF_NODE	624:16	624:16	3	(
PARAMETER_DECL	624:17	624:21	3	int red
TYPE	624:17	624:17	4	int
TYPE_NAME	624:17	624:17	5	int
LEAF_NODE	624:17	624:17	6	int
NAME	624:21	624:21	4	red
LEAF_NODE	624:21	624:21	5	red
LEAF_NODE	624:24	624:24	3	,
PARAMETER_DECL	624:26	624:30	3	int green
TYPE	624:26	624:26	4	int
TYPE_NAME	624:26	624:26	5	int
LEAF_NODE	624:26	624:26	6	int
NAME	624:30	624:30	4	green
LEAF_NODE	624:30	624:30	5	green
LEAF_NODE	624:35	624:35	3	,
PARAMETER_DECL	624:37	624:41	3	int blue
TYPE	624:37	624:37	4	int
TYPE_NAME	624:37	624:37	5	int
LEAF_NODE	624:37	624:37	6	int
NAME	624:41	624:41	4	blue
LEAF_NODE	624:41	624:41	5	blue
LEAF_NODE	624:45	624:45	3	)
LEAF_NODE	625:0	625:0	2	{
STATEMENTS	626:1	708:13	2	
LEAF_NODE	626:1	626:1	3	register
SIMPLE_DECL	626:10	626:27	3	int ir , int ig , int ib , int i ;
INIT_DECL_LIST	626:10	626:10	4	int ir , int ig , int ib , int i
VAR_DECL	626:10	626:14	5	int ir
TYPE	626:10	626:10	6	int
TYPE_NAME	626:10	626:10	7	int
LEAF_NODE	626:10	626:10	8	int
NAME	626:14	626:14	6	ir
LEAF_NODE	626:14	626:14	7	ir
LEAF_NODE	626:16	626:16	5	,
INIT_DECL_LIST	626:10	626:10	5	int ig , int ib , int i
VAR_DECL	626:10	626:18	6	int ig
TYPE	626:10	626:10	7	int
TYPE_NAME	626:10	626:10	8	int
LEAF_NODE	626:10	626:10	9	int
NAME	626:18	626:18	7	ig
LEAF_NODE	626:18	626:18	8	ig
LEAF_NODE	626:20	626:20	6	,
INIT_DECL_LIST	626:10	626:10	6	int ib , int i
VAR_DECL	626:10	626:22	7	int ib
TYPE	626:10	626:10	8	int
TYPE_NAME	626:10	626:10	9	int
LEAF_NODE	626:10	626:10	10	int
NAME	626:22	626:22	8	ib
LEAF_NODE	626:22	626:22	9	ib
LEAF_NODE	626:24	626:24	7	,
VAR_DECL	626:10	626:26	7	int i
TYPE	626:10	626:10	8	int
TYPE_NAME	626:10	626:10	9	int
LEAF_NODE	626:10	626:10	10	int
NAME	626:26	626:26	8	i
LEAF_NODE	626:26	626:26	9	i
LEAF_NODE	626:27	626:27	4	;
LEAF_NODE	627:1	627:1	3	register
SIMPLE_DECL	627:10	627:21	3	C_cell * ptr ;
VAR_DECL	627:10	627:18	4	C_cell * ptr
TYPE	627:10	627:17	5	C_cell *
TYPE_NAME	627:10	627:10	6	C_cell
LEAF_NODE	627:10	627:10	7	C_cell
POINTER	627:17	627:17	6	*
LEAF_NODE	627:17	627:17	7	*
NAME	627:18	627:18	5	ptr
LEAF_NODE	627:18	627:18	6	ptr
LEAF_NODE	627:21	627:21	4	;
SIMPLE_DECL	628:1	628:20	3	int mindist , int next_n ;
INIT_DECL_LIST	628:1	628:1	4	int mindist , int next_n
VAR_DECL	628:1	628:5	5	int mindist
TYPE	628:1	628:1	6	int
TYPE_NAME	628:1	628:1	7	int
LEAF_NODE	628:1	628:1	8	int
NAME	628:5	628:5	6	mindist
LEAF_NODE	628:5	628:5	7	mindist
LEAF_NODE	628:12	628:12	5	,
VAR_DECL	628:1	628:14	5	int next_n
TYPE	628:1	628:1	6	int
TYPE_NAME	628:1	628:1	7	int
LEAF_NODE	628:1	628:1	8	int
NAME	628:14	628:14	6	next_n
LEAF_NODE	628:14	628:14	7	next_n
LEAF_NODE	628:20	628:20	4	;
LEAF_NODE	629:1	629:1	3	register
SIMPLE_DECL	629:10	629:26	3	int tmp , int dist , int n ;
INIT_DECL_LIST	629:10	629:10	4	int tmp , int dist , int n
VAR_DECL	629:10	629:14	5	int tmp
TYPE	629:10	629:10	6	int
TYPE_NAME	629:10	629:10	7	int
LEAF_NODE	629:10	629:10	8	int
NAME	629:14	629:14	6	tmp
LEAF_NODE	629:14	629:14	7	tmp
LEAF_NODE	629:17	629:17	5	,
INIT_DECL_LIST	629:10	629:10	5	int dist , int n
VAR_DECL	629:10	629:19	6	int dist
TYPE	629:10	629:10	7	int
TYPE_NAME	629:10	629:10	8	int
LEAF_NODE	629:10	629:10	9	int
NAME	629:19	629:19	7	dist
LEAF_NODE	629:19	629:19	8	dist
LEAF_NODE	629:23	629:23	6	,
VAR_DECL	629:10	629:25	6	int n
TYPE	629:10	629:10	7	int
TYPE_NAME	629:10	629:10	8	int
LEAF_NODE	629:10	629:10	9	int
NAME	629:25	629:25	7	n
LEAF_NODE	629:25	629:25	8	n
LEAF_NODE	629:26	629:26	4	;
EXPR_STATEMENT	631:1	631:34	3	ir = red >> ( COLOR_DEPTH - C_DEPTH ) ;
EXPR	631:1	631:1	4	ir = red >> ( COLOR_DEPTH - C_DEPTH )
ASSIGN	631:1	631:6	5	ir = red >> ( COLOR_DEPTH - C_DEPTH )
LVAL	631:1	631:1	6	ir
FIELD	631:1	631:1	7	ir
LEAF_NODE	631:1	631:1	8	ir
ASSIGN_OP	631:4	631:4	6	=
LEAF_NODE	631:4	631:4	7	=
RVAL	631:6	631:33	6	red >> ( COLOR_DEPTH - C_DEPTH )
FIELD	631:6	631:6	7	red
LEAF_NODE	631:6	631:6	8	red
LEAF_NODE	631:10	631:10	7	>>
LEAF_NODE	631:13	631:13	7	(
FIELD	631:14	631:14	7	COLOR_DEPTH
LEAF_NODE	631:14	631:14	8	COLOR_DEPTH
LEAF_NODE	631:25	631:25	7	-
FIELD	631:26	631:26	7	C_DEPTH
LEAF_NODE	631:26	631:26	8	C_DEPTH
LEAF_NODE	631:33	631:33	7	)
LEAF_NODE	631:34	631:34	4	;
EXPR_STATEMENT	632:1	632:36	3	ig = green >> ( COLOR_DEPTH - C_DEPTH ) ;
EXPR	632:1	632:1	4	ig = green >> ( COLOR_DEPTH - C_DEPTH )
ASSIGN	632:1	632:6	5	ig = green >> ( COLOR_DEPTH - C_DEPTH )
LVAL	632:1	632:1	6	ig
FIELD	632:1	632:1	7	ig
LEAF_NODE	632:1	632:1	8	ig
ASSIGN_OP	632:4	632:4	6	=
LEAF_NODE	632:4	632:4	7	=
RVAL	632:6	632:35	6	green >> ( COLOR_DEPTH - C_DEPTH )
FIELD	632:6	632:6	7	green
LEAF_NODE	632:6	632:6	8	green
LEAF_NODE	632:12	632:12	7	>>
LEAF_NODE	632:15	632:15	7	(
FIELD	632:16	632:16	7	COLOR_DEPTH
LEAF_NODE	632:16	632:16	8	COLOR_DEPTH
LEAF_NODE	632:27	632:27	7	-
FIELD	632:28	632:28	7	C_DEPTH
LEAF_NODE	632:28	632:28	8	C_DEPTH
LEAF_NODE	632:35	632:35	7	)
LEAF_NODE	632:36	632:36	4	;
EXPR_STATEMENT	633:1	633:35	3	ib = blue >> ( COLOR_DEPTH - C_DEPTH ) ;
EXPR	633:1	633:1	4	ib = blue >> ( COLOR_DEPTH - C_DEPTH )
ASSIGN	633:1	633:6	5	ib = blue >> ( COLOR_DEPTH - C_DEPTH )
LVAL	633:1	633:1	6	ib
FIELD	633:1	633:1	7	ib
LEAF_NODE	633:1	633:1	8	ib
ASSIGN_OP	633:4	633:4	6	=
LEAF_NODE	633:4	633:4	7	=
RVAL	633:6	633:34	6	blue >> ( COLOR_DEPTH - C_DEPTH )
FIELD	633:6	633:6	7	blue
LEAF_NODE	633:6	633:6	8	blue
LEAF_NODE	633:11	633:11	7	>>
LEAF_NODE	633:14	633:14	7	(
FIELD	633:15	633:15	7	COLOR_DEPTH
LEAF_NODE	633:15	633:15	8	COLOR_DEPTH
LEAF_NODE	633:26	633:26	7	-
FIELD	633:27	633:27	7	C_DEPTH
LEAF_NODE	633:27	633:27	8	C_DEPTH
LEAF_NODE	633:34	633:34	7	)
LEAF_NODE	633:35	633:35	4	;
EXPR_STATEMENT	634:1	634:45	3	ptr = ( C_cell * ) _TIFFmalloc ( sizeof ( C_cell ) ) ;
EXPR	634:1	634:1	4	ptr = ( C_cell * ) _TIFFmalloc ( sizeof ( C_cell ) )
ASSIGN	634:1	634:7	5	ptr = ( C_cell * ) _TIFFmalloc ( sizeof ( C_cell ) )
LVAL	634:1	634:1	6	ptr
FIELD	634:1	634:1	7	ptr
LEAF_NODE	634:1	634:1	8	ptr
ASSIGN_OP	634:5	634:5	6	=
LEAF_NODE	634:5	634:5	7	=
RVAL	634:7	634:17	6	( C_cell * ) _TIFFmalloc ( sizeof ( C_cell ) )
LEAF_NODE	634:7	634:7	7	(
TYPE_NAME	634:8	634:8	7	C_cell
LEAF_NODE	634:8	634:8	8	C_cell
LEAF_NODE	634:15	634:15	7	*
LEAF_NODE	634:16	634:16	7	)
FUNCTION_CALL	634:17	634:44	7	_TIFFmalloc ( sizeof ( C_cell ) )
CALLEE	634:17	634:17	8	_TIFFmalloc
LEAF_NODE	634:17	634:17	9	_TIFFmalloc
LEAF_NODE	634:28	634:28	8	(
ARGUMENT	634:29	634:29	8	sizeof ( C_cell )
FUNCTION_CALL	634:29	634:43	9	sizeof ( C_cell )
CALLEE	634:29	634:29	10	sizeof
LEAF_NODE	634:29	634:29	11	sizeof
LEAF_NODE	634:36	634:36	10	(
ARGUMENT	634:37	634:37	10	C_cell
FIELD	634:37	634:37	11	C_cell
LEAF_NODE	634:37	634:37	12	C_cell
LEAF_NODE	634:43	634:43	10	)
LEAF_NODE	634:44	634:44	8	)
LEAF_NODE	634:45	634:45	4	;
LEAF_NODE	635:1	635:1	3	*
LEAF_NODE	635:2	635:2	3	(
LEAF_NODE	635:3	635:3	3	ColorCells
LEAF_NODE	635:14	635:14	3	+
LEAF_NODE	635:16	635:16	3	ir
LEAF_NODE	635:18	635:18	3	*
LEAF_NODE	635:19	635:19	3	C_LEN
LEAF_NODE	635:24	635:24	3	*
LEAF_NODE	635:25	635:25	3	C_LEN
LEAF_NODE	635:31	635:31	3	+
LEAF_NODE	635:33	635:33	3	ig
LEAF_NODE	635:35	635:35	3	*
LEAF_NODE	635:36	635:36	3	C_LEN
LEAF_NODE	635:42	635:42	3	+
LEAF_NODE	635:44	635:44	3	ib
LEAF_NODE	635:46	635:46	3	)
LEAF_NODE	635:48	635:48	3	=
EXPR_STATEMENT	635:50	635:53	3	ptr ;
EXPR	635:50	635:50	4	ptr
FIELD	635:50	635:50	5	ptr
LEAF_NODE	635:50	635:50	6	ptr
LEAF_NODE	635:53	635:53	4	;
EXPR_STATEMENT	636:1	636:18	3	ptr -> num_ents = 0 ;
EXPR	636:1	636:1	4	ptr -> num_ents = 0
ASSIGN	636:1	636:17	5	ptr -> num_ents = 0
LVAL	636:1	636:1	6	ptr -> num_ents
FIELD	636:1	636:6	7	ptr -> num_ents
LEAF_NODE	636:1	636:1	8	ptr
LEAF_NODE	636:4	636:4	8	->
LEAF_NODE	636:6	636:6	8	num_ents
ASSIGN_OP	636:15	636:15	6	=
LEAF_NODE	636:15	636:15	7	=
RVAL	636:17	636:17	6	0
FIELD	636:17	636:17	7	0
LEAF_NODE	636:17	636:17	8	0
LEAF_NODE	636:18	636:18	4	;
EXPR_STATEMENT	642:1	642:19	3	mindist = 99999999 ;
EXPR	642:1	642:1	4	mindist = 99999999
ASSIGN	642:1	642:11	5	mindist = 99999999
LVAL	642:1	642:1	6	mindist
FIELD	642:1	642:1	7	mindist
LEAF_NODE	642:1	642:1	8	mindist
ASSIGN_OP	642:9	642:9	6	=
LEAF_NODE	642:9	642:9	7	=
RVAL	642:11	642:11	6	99999999
FIELD	642:11	642:11	7	99999999
LEAF_NODE	642:11	642:11	8	99999999
LEAF_NODE	642:19	642:19	4	;
ITERATION	643:1	643:34	3	
KEYWORD	643:1	643:1	4	for
LEAF_NODE	643:1	643:1	5	for
LEAF_NODE	643:5	643:5	4	(
FOR_INIT	643:6	643:11	4	i = 0 ;
EXPR	643:6	643:6	5	i = 0
ASSIGN	643:6	643:10	6	i = 0
LVAL	643:6	643:6	7	i
FIELD	643:6	643:6	8	i
LEAF_NODE	643:6	643:6	9	i
ASSIGN_OP	643:8	643:8	7	=
LEAF_NODE	643:8	643:8	8	=
RVAL	643:10	643:10	7	0
FIELD	643:10	643:10	8	0
LEAF_NODE	643:10	643:10	9	0
LEAF_NODE	643:11	643:11	5	;
CONDITION	643:13	643:13	4	i < num_colors
EXPR	643:13	643:17	5	i < num_colors
FIELD	643:13	643:13	6	i
LEAF_NODE	643:13	643:13	7	i
REL_OPERATOR	643:15	643:15	6	<
LEAF_NODE	643:15	643:15	7	<
FIELD	643:17	643:17	6	num_colors
LEAF_NODE	643:17	643:17	7	num_colors
LEAF_NODE	643:27	643:27	4	;
FOR_EXPR	643:29	643:29	4	++ i
EXPR	643:29	643:31	5	++ i
LEAF_NODE	643:29	643:29	6	++
FIELD	643:31	643:31	6	i
LEAF_NODE	643:31	643:31	7	i
LEAF_NODE	643:32	643:32	4	)
STATEMENTS	643:34	665:1	4	
LEAF_NODE	643:34	643:34	5	{
STATEMENTS	644:2	663:9	5	
SELECTION	644:2	647:3	6	
KEYWORD	644:2	644:2	7	if
LEAF_NODE	644:2	644:2	8	if
LEAF_NODE	644:5	644:5	7	(
CONDITION	644:6	644:6	7	rm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ir || gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ig || bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ib
EXPR	644:6	644:6	8	rm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ir || gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ig || bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ib
OR	644:6	645:6	9	rm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ir || gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ig || bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ib
EXPR	644:6	644:38	10	rm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ir
FIELD	644:6	644:10	11	rm [ i ]
LEAF_NODE	644:6	644:6	12	rm
LEAF_NODE	644:8	644:8	12	[
EXPR	644:9	644:9	12	i
FIELD	644:9	644:9	13	i
LEAF_NODE	644:9	644:9	14	i
LEAF_NODE	644:10	644:10	12	]
LEAF_NODE	644:11	644:11	11	>>
LEAF_NODE	644:13	644:13	11	(
FIELD	644:14	644:14	11	COLOR_DEPTH
LEAF_NODE	644:14	644:14	12	COLOR_DEPTH
LEAF_NODE	644:25	644:25	11	-
FIELD	644:26	644:26	11	C_DEPTH
LEAF_NODE	644:26	644:26	12	C_DEPTH
LEAF_NODE	644:33	644:33	11	)
EQ_OPERATOR	644:35	644:35	11	!=
LEAF_NODE	644:35	644:35	12	!=
FIELD	644:38	644:38	11	ir
LEAF_NODE	644:38	644:38	12	ir
LEAF_NODE	644:42	644:42	10	||
EXPR	645:6	645:6	10	gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ig || bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ib
OR	645:6	646:6	11	gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ig || bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ib
EXPR	645:6	645:38	12	gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ig
FIELD	645:6	645:10	13	gm [ i ]
LEAF_NODE	645:6	645:6	14	gm
LEAF_NODE	645:8	645:8	14	[
EXPR	645:9	645:9	14	i
FIELD	645:9	645:9	15	i
LEAF_NODE	645:9	645:9	16	i
LEAF_NODE	645:10	645:10	14	]
LEAF_NODE	645:11	645:11	13	>>
LEAF_NODE	645:13	645:13	13	(
FIELD	645:14	645:14	13	COLOR_DEPTH
LEAF_NODE	645:14	645:14	14	COLOR_DEPTH
LEAF_NODE	645:25	645:25	13	-
FIELD	645:26	645:26	13	C_DEPTH
LEAF_NODE	645:26	645:26	14	C_DEPTH
LEAF_NODE	645:33	645:33	13	)
EQ_OPERATOR	645:35	645:35	13	!=
LEAF_NODE	645:35	645:35	14	!=
FIELD	645:38	645:38	13	ig
LEAF_NODE	645:38	645:38	14	ig
LEAF_NODE	645:42	645:42	12	||
EXPR	646:6	646:38	12	bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) != ib
FIELD	646:6	646:10	13	bm [ i ]
LEAF_NODE	646:6	646:6	14	bm
LEAF_NODE	646:8	646:8	14	[
EXPR	646:9	646:9	14	i
FIELD	646:9	646:9	15	i
LEAF_NODE	646:9	646:9	16	i
LEAF_NODE	646:10	646:10	14	]
LEAF_NODE	646:11	646:11	13	>>
LEAF_NODE	646:13	646:13	13	(
FIELD	646:14	646:14	13	COLOR_DEPTH
LEAF_NODE	646:14	646:14	14	COLOR_DEPTH
LEAF_NODE	646:25	646:25	13	-
FIELD	646:26	646:26	13	C_DEPTH
LEAF_NODE	646:26	646:26	14	C_DEPTH
LEAF_NODE	646:33	646:33	13	)
EQ_OPERATOR	646:35	646:35	13	!=
LEAF_NODE	646:35	646:35	14	!=
FIELD	646:38	646:38	13	ib
LEAF_NODE	646:38	646:38	14	ib
LEAF_NODE	646:40	646:40	7	)
STATEMENTS	647:3	647:3	7	
JUMP_STATEMENT	647:3	647:11	8	continue DESTINATION ;
KEYWORD	647:3	647:3	9	continue
LEAF_NODE	647:3	647:3	10	continue
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	647:11	647:11	9	;
EXPR_STATEMENT	648:2	648:36	6	ptr -> entries [ ptr -> num_ents ] [ 0 ] = i ;
EXPR	648:2	648:2	7	ptr -> entries [ ptr -> num_ents ] [ 0 ] = i
ASSIGN	648:2	648:35	8	ptr -> entries [ ptr -> num_ents ] [ 0 ] = i
LVAL	648:2	648:2	9	ptr -> entries [ ptr -> num_ents ] [ 0 ]
FIELD	648:2	648:31	10	ptr -> entries [ ptr -> num_ents ] [ 0 ]
LEAF_NODE	648:2	648:2	11	ptr
LEAF_NODE	648:5	648:5	11	->
LEAF_NODE	648:7	648:7	11	entries
LEAF_NODE	648:14	648:14	11	[
EXPR	648:15	648:15	11	ptr -> num_ents
FIELD	648:15	648:20	12	ptr -> num_ents
LEAF_NODE	648:15	648:15	13	ptr
LEAF_NODE	648:18	648:18	13	->
LEAF_NODE	648:20	648:20	13	num_ents
LEAF_NODE	648:28	648:28	11	]
LEAF_NODE	648:29	648:29	11	[
EXPR	648:30	648:30	11	0
FIELD	648:30	648:30	12	0
LEAF_NODE	648:30	648:30	13	0
LEAF_NODE	648:31	648:31	11	]
ASSIGN_OP	648:33	648:33	9	=
LEAF_NODE	648:33	648:33	10	=
RVAL	648:35	648:35	9	i
FIELD	648:35	648:35	10	i
LEAF_NODE	648:35	648:35	11	i
LEAF_NODE	648:36	648:36	7	;
EXPR_STATEMENT	649:2	649:36	6	ptr -> entries [ ptr -> num_ents ] [ 1 ] = 0 ;
EXPR	649:2	649:2	7	ptr -> entries [ ptr -> num_ents ] [ 1 ] = 0
ASSIGN	649:2	649:35	8	ptr -> entries [ ptr -> num_ents ] [ 1 ] = 0
LVAL	649:2	649:2	9	ptr -> entries [ ptr -> num_ents ] [ 1 ]
FIELD	649:2	649:31	10	ptr -> entries [ ptr -> num_ents ] [ 1 ]
LEAF_NODE	649:2	649:2	11	ptr
LEAF_NODE	649:5	649:5	11	->
LEAF_NODE	649:7	649:7	11	entries
LEAF_NODE	649:14	649:14	11	[
EXPR	649:15	649:15	11	ptr -> num_ents
FIELD	649:15	649:20	12	ptr -> num_ents
LEAF_NODE	649:15	649:15	13	ptr
LEAF_NODE	649:18	649:18	13	->
LEAF_NODE	649:20	649:20	13	num_ents
LEAF_NODE	649:28	649:28	11	]
LEAF_NODE	649:29	649:29	11	[
EXPR	649:30	649:30	11	1
FIELD	649:30	649:30	12	1
LEAF_NODE	649:30	649:30	13	1
LEAF_NODE	649:31	649:31	11	]
ASSIGN_OP	649:33	649:33	9	=
LEAF_NODE	649:33	649:33	10	=
RVAL	649:35	649:35	9	0
FIELD	649:35	649:35	10	0
LEAF_NODE	649:35	649:35	11	0
LEAF_NODE	649:36	649:36	7	;
EXPR_STATEMENT	650:2	650:17	6	++ ptr -> num_ents ;
EXPR	650:2	650:4	7	++ ptr -> num_ents
LEAF_NODE	650:2	650:2	8	++
FIELD	650:4	650:9	8	ptr -> num_ents
LEAF_NODE	650:4	650:4	9	ptr
LEAF_NODE	650:7	650:7	9	->
LEAF_NODE	650:9	650:9	9	num_ents
LEAF_NODE	650:17	650:17	7	;
EXPR_STATEMENT	651:9	651:26	6	tmp = rm [ i ] - red ;
EXPR	651:9	651:9	7	tmp = rm [ i ] - red
ASSIGN	651:9	651:15	8	tmp = rm [ i ] - red
LVAL	651:9	651:9	9	tmp
FIELD	651:9	651:9	10	tmp
LEAF_NODE	651:9	651:9	11	tmp
ASSIGN_OP	651:13	651:13	9	=
LEAF_NODE	651:13	651:13	10	=
RVAL	651:15	651:23	9	rm [ i ] - red
FIELD	651:15	651:19	10	rm [ i ]
LEAF_NODE	651:15	651:15	11	rm
LEAF_NODE	651:17	651:17	11	[
EXPR	651:18	651:18	11	i
FIELD	651:18	651:18	12	i
LEAF_NODE	651:18	651:18	13	i
LEAF_NODE	651:19	651:19	11	]
LEAF_NODE	651:21	651:21	10	-
FIELD	651:23	651:23	10	red
LEAF_NODE	651:23	651:23	11	red
LEAF_NODE	651:26	651:26	7	;
LEAF_NODE	652:9	652:9	6	if
LEAF_NODE	652:12	652:12	6	(
LEAF_NODE	652:13	652:13	6	tmp
LEAF_NODE	652:17	652:17	6	<
LEAF_NODE	652:19	652:19	6	(
LEAF_NODE	652:20	652:20	6	MAX_COLOR
LEAF_NODE	652:29	652:29	6	/
LEAF_NODE	652:30	652:30	6	C_LEN
LEAF_NODE	652:35	652:35	6	/
LEAF_NODE	652:36	652:36	6	2
LEAF_NODE	652:37	652:37	6	)
LEAF_NODE	652:38	652:38	6	)
EXPR_STATEMENT	653:3	653:32	6	tmp = MAX_COLOR / C_LEN - 1 - tmp ;
EXPR	653:3	653:3	7	tmp = MAX_COLOR / C_LEN - 1 - tmp
ASSIGN	653:3	653:9	8	tmp = MAX_COLOR / C_LEN - 1 - tmp
LVAL	653:3	653:3	9	tmp
FIELD	653:3	653:3	10	tmp
LEAF_NODE	653:3	653:3	11	tmp
ASSIGN_OP	653:7	653:7	9	=
LEAF_NODE	653:7	653:7	10	=
RVAL	653:9	653:29	9	MAX_COLOR / C_LEN - 1 - tmp
FIELD	653:9	653:9	10	MAX_COLOR
LEAF_NODE	653:9	653:9	11	MAX_COLOR
LEAF_NODE	653:18	653:18	10	/
FIELD	653:19	653:19	10	C_LEN
LEAF_NODE	653:19	653:19	11	C_LEN
LEAF_NODE	653:24	653:24	10	-
FIELD	653:25	653:25	10	1
LEAF_NODE	653:25	653:25	11	1
LEAF_NODE	653:27	653:27	10	-
FIELD	653:29	653:29	10	tmp
LEAF_NODE	653:29	653:29	11	tmp
LEAF_NODE	653:32	653:32	7	;
EXPR_STATEMENT	654:9	654:23	6	dist = tmp * tmp ;
EXPR	654:9	654:9	7	dist = tmp * tmp
ASSIGN	654:9	654:16	8	dist = tmp * tmp
LVAL	654:9	654:9	9	dist
FIELD	654:9	654:9	10	dist
LEAF_NODE	654:9	654:9	11	dist
ASSIGN_OP	654:14	654:14	9	=
LEAF_NODE	654:14	654:14	10	=
RVAL	654:16	654:20	9	tmp * tmp
FIELD	654:16	654:16	10	tmp
LEAF_NODE	654:16	654:16	11	tmp
LEAF_NODE	654:19	654:19	10	*
FIELD	654:20	654:20	10	tmp
LEAF_NODE	654:20	654:20	11	tmp
LEAF_NODE	654:23	654:23	7	;
EXPR_STATEMENT	655:9	655:28	6	tmp = gm [ i ] - green ;
EXPR	655:9	655:9	7	tmp = gm [ i ] - green
ASSIGN	655:9	655:15	8	tmp = gm [ i ] - green
LVAL	655:9	655:9	9	tmp
FIELD	655:9	655:9	10	tmp
LEAF_NODE	655:9	655:9	11	tmp
ASSIGN_OP	655:13	655:13	9	=
LEAF_NODE	655:13	655:13	10	=
RVAL	655:15	655:23	9	gm [ i ] - green
FIELD	655:15	655:19	10	gm [ i ]
LEAF_NODE	655:15	655:15	11	gm
LEAF_NODE	655:17	655:17	11	[
EXPR	655:18	655:18	11	i
FIELD	655:18	655:18	12	i
LEAF_NODE	655:18	655:18	13	i
LEAF_NODE	655:19	655:19	11	]
LEAF_NODE	655:21	655:21	10	-
FIELD	655:23	655:23	10	green
LEAF_NODE	655:23	655:23	11	green
LEAF_NODE	655:28	655:28	7	;
LEAF_NODE	656:9	656:9	6	if
LEAF_NODE	656:12	656:12	6	(
LEAF_NODE	656:13	656:13	6	tmp
LEAF_NODE	656:17	656:17	6	<
LEAF_NODE	656:19	656:19	6	(
LEAF_NODE	656:20	656:20	6	MAX_COLOR
LEAF_NODE	656:29	656:29	6	/
LEAF_NODE	656:30	656:30	6	C_LEN
LEAF_NODE	656:35	656:35	6	/
LEAF_NODE	656:36	656:36	6	2
LEAF_NODE	656:37	656:37	6	)
LEAF_NODE	656:38	656:38	6	)
EXPR_STATEMENT	657:3	657:32	6	tmp = MAX_COLOR / C_LEN - 1 - tmp ;
EXPR	657:3	657:3	7	tmp = MAX_COLOR / C_LEN - 1 - tmp
ASSIGN	657:3	657:9	8	tmp = MAX_COLOR / C_LEN - 1 - tmp
LVAL	657:3	657:3	9	tmp
FIELD	657:3	657:3	10	tmp
LEAF_NODE	657:3	657:3	11	tmp
ASSIGN_OP	657:7	657:7	9	=
LEAF_NODE	657:7	657:7	10	=
RVAL	657:9	657:29	9	MAX_COLOR / C_LEN - 1 - tmp
FIELD	657:9	657:9	10	MAX_COLOR
LEAF_NODE	657:9	657:9	11	MAX_COLOR
LEAF_NODE	657:18	657:18	10	/
FIELD	657:19	657:19	10	C_LEN
LEAF_NODE	657:19	657:19	11	C_LEN
LEAF_NODE	657:24	657:24	10	-
FIELD	657:25	657:25	10	1
LEAF_NODE	657:25	657:25	11	1
LEAF_NODE	657:27	657:27	10	-
FIELD	657:29	657:29	10	tmp
LEAF_NODE	657:29	657:29	11	tmp
LEAF_NODE	657:32	657:32	7	;
EXPR_STATEMENT	658:9	658:24	6	dist += tmp * tmp ;
EXPR	658:9	658:9	7	dist += tmp * tmp
ASSIGN	658:9	658:17	8	dist += tmp * tmp
LVAL	658:9	658:9	9	dist
FIELD	658:9	658:9	10	dist
LEAF_NODE	658:9	658:9	11	dist
ASSIGN_OP	658:14	658:14	9	+=
LEAF_NODE	658:14	658:14	10	+=
RVAL	658:17	658:21	9	tmp * tmp
FIELD	658:17	658:17	10	tmp
LEAF_NODE	658:17	658:17	11	tmp
LEAF_NODE	658:20	658:20	10	*
FIELD	658:21	658:21	10	tmp
LEAF_NODE	658:21	658:21	11	tmp
LEAF_NODE	658:24	658:24	7	;
EXPR_STATEMENT	659:9	659:27	6	tmp = bm [ i ] - blue ;
EXPR	659:9	659:9	7	tmp = bm [ i ] - blue
ASSIGN	659:9	659:15	8	tmp = bm [ i ] - blue
LVAL	659:9	659:9	9	tmp
FIELD	659:9	659:9	10	tmp
LEAF_NODE	659:9	659:9	11	tmp
ASSIGN_OP	659:13	659:13	9	=
LEAF_NODE	659:13	659:13	10	=
RVAL	659:15	659:23	9	bm [ i ] - blue
FIELD	659:15	659:19	10	bm [ i ]
LEAF_NODE	659:15	659:15	11	bm
LEAF_NODE	659:17	659:17	11	[
EXPR	659:18	659:18	11	i
FIELD	659:18	659:18	12	i
LEAF_NODE	659:18	659:18	13	i
LEAF_NODE	659:19	659:19	11	]
LEAF_NODE	659:21	659:21	10	-
FIELD	659:23	659:23	10	blue
LEAF_NODE	659:23	659:23	11	blue
LEAF_NODE	659:27	659:27	7	;
LEAF_NODE	660:9	660:9	6	if
LEAF_NODE	660:12	660:12	6	(
LEAF_NODE	660:13	660:13	6	tmp
LEAF_NODE	660:17	660:17	6	<
LEAF_NODE	660:19	660:19	6	(
LEAF_NODE	660:20	660:20	6	MAX_COLOR
LEAF_NODE	660:29	660:29	6	/
LEAF_NODE	660:30	660:30	6	C_LEN
LEAF_NODE	660:35	660:35	6	/
LEAF_NODE	660:36	660:36	6	2
LEAF_NODE	660:37	660:37	6	)
LEAF_NODE	660:38	660:38	6	)
EXPR_STATEMENT	661:3	661:32	6	tmp = MAX_COLOR / C_LEN - 1 - tmp ;
EXPR	661:3	661:3	7	tmp = MAX_COLOR / C_LEN - 1 - tmp
ASSIGN	661:3	661:9	8	tmp = MAX_COLOR / C_LEN - 1 - tmp
LVAL	661:3	661:3	9	tmp
FIELD	661:3	661:3	10	tmp
LEAF_NODE	661:3	661:3	11	tmp
ASSIGN_OP	661:7	661:7	9	=
LEAF_NODE	661:7	661:7	10	=
RVAL	661:9	661:29	9	MAX_COLOR / C_LEN - 1 - tmp
FIELD	661:9	661:9	10	MAX_COLOR
LEAF_NODE	661:9	661:9	11	MAX_COLOR
LEAF_NODE	661:18	661:18	10	/
FIELD	661:19	661:19	10	C_LEN
LEAF_NODE	661:19	661:19	11	C_LEN
LEAF_NODE	661:24	661:24	10	-
FIELD	661:25	661:25	10	1
LEAF_NODE	661:25	661:25	11	1
LEAF_NODE	661:27	661:27	10	-
FIELD	661:29	661:29	10	tmp
LEAF_NODE	661:29	661:29	11	tmp
LEAF_NODE	661:32	661:32	7	;
EXPR_STATEMENT	662:9	662:24	6	dist += tmp * tmp ;
EXPR	662:9	662:9	7	dist += tmp * tmp
ASSIGN	662:9	662:17	8	dist += tmp * tmp
LVAL	662:9	662:9	9	dist
FIELD	662:9	662:9	10	dist
LEAF_NODE	662:9	662:9	11	dist
ASSIGN_OP	662:14	662:14	9	+=
LEAF_NODE	662:14	662:14	10	+=
RVAL	662:17	662:21	9	tmp * tmp
FIELD	662:17	662:17	10	tmp
LEAF_NODE	662:17	662:17	11	tmp
LEAF_NODE	662:20	662:20	10	*
FIELD	662:21	662:21	10	tmp
LEAF_NODE	662:21	662:21	11	tmp
LEAF_NODE	662:24	662:24	7	;
SELECTION	663:9	664:3	6	
KEYWORD	663:9	663:9	7	if
LEAF_NODE	663:9	663:9	8	if
LEAF_NODE	663:12	663:12	7	(
CONDITION	663:13	663:13	7	dist < mindist
EXPR	663:13	663:20	8	dist < mindist
FIELD	663:13	663:13	9	dist
LEAF_NODE	663:13	663:13	10	dist
REL_OPERATOR	663:18	663:18	9	<
LEAF_NODE	663:18	663:18	10	<
FIELD	663:20	663:20	9	mindist
LEAF_NODE	663:20	663:20	10	mindist
LEAF_NODE	663:27	663:27	7	)
STATEMENTS	664:3	664:3	7	
EXPR_STATEMENT	664:3	664:17	8	mindist = dist ;
EXPR	664:3	664:3	9	mindist = dist
ASSIGN	664:3	664:13	10	mindist = dist
LVAL	664:3	664:3	11	mindist
FIELD	664:3	664:3	12	mindist
LEAF_NODE	664:3	664:3	13	mindist
ASSIGN_OP	664:11	664:11	11	=
LEAF_NODE	664:11	664:11	12	=
RVAL	664:13	664:13	11	dist
FIELD	664:13	664:13	12	dist
LEAF_NODE	664:13	664:13	13	dist
LEAF_NODE	664:17	664:17	9	;
LEAF_NODE	665:1	665:1	5	}
ITERATION	670:1	670:34	3	
KEYWORD	670:1	670:1	4	for
LEAF_NODE	670:1	670:1	5	for
LEAF_NODE	670:5	670:5	4	(
FOR_INIT	670:6	670:11	4	i = 0 ;
EXPR	670:6	670:6	5	i = 0
ASSIGN	670:6	670:10	6	i = 0
LVAL	670:6	670:6	7	i
FIELD	670:6	670:6	8	i
LEAF_NODE	670:6	670:6	9	i
ASSIGN_OP	670:8	670:8	7	=
LEAF_NODE	670:8	670:8	8	=
RVAL	670:10	670:10	7	0
FIELD	670:10	670:10	8	0
LEAF_NODE	670:10	670:10	9	0
LEAF_NODE	670:11	670:11	5	;
CONDITION	670:13	670:13	4	i < num_colors
EXPR	670:13	670:17	5	i < num_colors
FIELD	670:13	670:13	6	i
LEAF_NODE	670:13	670:13	7	i
REL_OPERATOR	670:15	670:15	6	<
LEAF_NODE	670:15	670:15	7	<
FIELD	670:17	670:17	6	num_colors
LEAF_NODE	670:17	670:17	7	num_colors
LEAF_NODE	670:27	670:27	4	;
FOR_EXPR	670:29	670:29	4	++ i
EXPR	670:29	670:31	5	++ i
LEAF_NODE	670:29	670:29	6	++
FIELD	670:31	670:31	6	i
LEAF_NODE	670:31	670:31	7	i
LEAF_NODE	670:32	670:32	4	)
STATEMENTS	670:34	690:1	4	
LEAF_NODE	670:34	670:34	5	{
STATEMENTS	671:2	685:9	5	
SELECTION	671:2	674:3	6	
KEYWORD	671:2	671:2	7	if
LEAF_NODE	671:2	671:2	8	if
LEAF_NODE	671:5	671:5	7	(
CONDITION	671:6	671:6	7	rm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ir && gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ig && bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ib
EXPR	671:6	671:6	8	rm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ir && gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ig && bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ib
AND	671:6	672:6	9	rm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ir && gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ig && bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ib
EXPR	671:6	671:40	10	rm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ir
FIELD	671:6	671:10	11	rm [ i ]
LEAF_NODE	671:6	671:6	12	rm
LEAF_NODE	671:8	671:8	12	[
EXPR	671:9	671:9	12	i
FIELD	671:9	671:9	13	i
LEAF_NODE	671:9	671:9	14	i
LEAF_NODE	671:10	671:10	12	]
LEAF_NODE	671:12	671:12	11	>>
LEAF_NODE	671:15	671:15	11	(
FIELD	671:16	671:16	11	COLOR_DEPTH
LEAF_NODE	671:16	671:16	12	COLOR_DEPTH
LEAF_NODE	671:27	671:27	11	-
FIELD	671:28	671:28	11	C_DEPTH
LEAF_NODE	671:28	671:28	12	C_DEPTH
LEAF_NODE	671:35	671:35	11	)
EQ_OPERATOR	671:37	671:37	11	==
LEAF_NODE	671:37	671:37	12	==
FIELD	671:40	671:40	11	ir
LEAF_NODE	671:40	671:40	12	ir
LEAF_NODE	671:44	671:44	10	&&
EXPR	672:6	672:6	10	gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ig && bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ib
AND	672:6	673:6	11	gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ig && bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ib
EXPR	672:6	672:40	12	gm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ig
FIELD	672:6	672:10	13	gm [ i ]
LEAF_NODE	672:6	672:6	14	gm
LEAF_NODE	672:8	672:8	14	[
EXPR	672:9	672:9	14	i
FIELD	672:9	672:9	15	i
LEAF_NODE	672:9	672:9	16	i
LEAF_NODE	672:10	672:10	14	]
LEAF_NODE	672:12	672:12	13	>>
LEAF_NODE	672:15	672:15	13	(
FIELD	672:16	672:16	13	COLOR_DEPTH
LEAF_NODE	672:16	672:16	14	COLOR_DEPTH
LEAF_NODE	672:27	672:27	13	-
FIELD	672:28	672:28	13	C_DEPTH
LEAF_NODE	672:28	672:28	14	C_DEPTH
LEAF_NODE	672:35	672:35	13	)
EQ_OPERATOR	672:37	672:37	13	==
LEAF_NODE	672:37	672:37	14	==
FIELD	672:40	672:40	13	ig
LEAF_NODE	672:40	672:40	14	ig
LEAF_NODE	672:44	672:44	12	&&
EXPR	673:6	673:40	12	bm [ i ] >> ( COLOR_DEPTH - C_DEPTH ) == ib
FIELD	673:6	673:10	13	bm [ i ]
LEAF_NODE	673:6	673:6	14	bm
LEAF_NODE	673:8	673:8	14	[
EXPR	673:9	673:9	14	i
FIELD	673:9	673:9	15	i
LEAF_NODE	673:9	673:9	16	i
LEAF_NODE	673:10	673:10	14	]
LEAF_NODE	673:12	673:12	13	>>
LEAF_NODE	673:15	673:15	13	(
FIELD	673:16	673:16	13	COLOR_DEPTH
LEAF_NODE	673:16	673:16	14	COLOR_DEPTH
LEAF_NODE	673:27	673:27	13	-
FIELD	673:28	673:28	13	C_DEPTH
LEAF_NODE	673:28	673:28	14	C_DEPTH
LEAF_NODE	673:35	673:35	13	)
EQ_OPERATOR	673:37	673:37	13	==
LEAF_NODE	673:37	673:37	14	==
FIELD	673:40	673:40	13	ib
LEAF_NODE	673:40	673:40	14	ib
LEAF_NODE	673:42	673:42	7	)
STATEMENTS	674:3	674:3	7	
JUMP_STATEMENT	674:3	674:11	8	continue DESTINATION ;
KEYWORD	674:3	674:3	9	continue
LEAF_NODE	674:3	674:3	10	continue
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	674:11	674:11	9	;
EXPR_STATEMENT	675:2	675:10	6	dist = 0 ;
EXPR	675:2	675:2	7	dist = 0
ASSIGN	675:2	675:9	8	dist = 0
LVAL	675:2	675:2	9	dist
FIELD	675:2	675:2	10	dist
LEAF_NODE	675:2	675:2	11	dist
ASSIGN_OP	675:7	675:7	9	=
LEAF_NODE	675:7	675:7	10	=
RVAL	675:9	675:9	9	0
FIELD	675:9	675:9	10	0
LEAF_NODE	675:9	675:9	11	0
LEAF_NODE	675:10	675:10	7	;
SELECTION	676:9	678:3	6	
KEYWORD	676:9	676:9	7	if
LEAF_NODE	676:9	676:9	8	if
LEAF_NODE	676:12	676:12	7	(
CONDITION	676:13	676:13	7	( tmp = red - rm [ i ] ) > 0 || ( tmp = rm [ i ] - ( red + MAX_COLOR / C_LEN - 1 ) ) > 0
EXPR	676:13	676:13	8	( tmp = red - rm [ i ] ) > 0 || ( tmp = rm [ i ] - ( red + MAX_COLOR / C_LEN - 1 ) ) > 0
OR	676:13	677:6	9	( tmp = red - rm [ i ] ) > 0 || ( tmp = rm [ i ] - ( red + MAX_COLOR / C_LEN - 1 ) ) > 0
EXPR	676:13	676:35	10	( tmp = red - rm [ i ] ) > 0
LEAF_NODE	676:13	676:13	11	(
ASSIGN	676:14	676:20	11	tmp = red - rm [ i ]
LVAL	676:14	676:14	12	tmp
FIELD	676:14	676:14	13	tmp
LEAF_NODE	676:14	676:14	14	tmp
ASSIGN_OP	676:18	676:18	12	=
LEAF_NODE	676:18	676:18	13	=
RVAL	676:20	676:26	12	red - rm [ i ]
FIELD	676:20	676:20	13	red
LEAF_NODE	676:20	676:20	14	red
LEAF_NODE	676:24	676:24	13	-
FIELD	676:26	676:30	13	rm [ i ]
LEAF_NODE	676:26	676:26	14	rm
LEAF_NODE	676:28	676:28	14	[
EXPR	676:29	676:29	14	i
FIELD	676:29	676:29	15	i
LEAF_NODE	676:29	676:29	16	i
LEAF_NODE	676:30	676:30	14	]
LEAF_NODE	676:31	676:31	11	)
REL_OPERATOR	676:33	676:33	11	>
LEAF_NODE	676:33	676:33	12	>
FIELD	676:35	676:35	11	0
LEAF_NODE	676:35	676:35	12	0
LEAF_NODE	676:37	676:37	10	||
EXPR	677:6	677:50	10	( tmp = rm [ i ] - ( red + MAX_COLOR / C_LEN - 1 ) ) > 0
LEAF_NODE	677:6	677:6	11	(
ASSIGN	677:7	677:13	11	tmp = rm [ i ] - ( red + MAX_COLOR / C_LEN - 1 )
LVAL	677:7	677:7	12	tmp
FIELD	677:7	677:7	13	tmp
LEAF_NODE	677:7	677:7	14	tmp
ASSIGN_OP	677:11	677:11	12	=
LEAF_NODE	677:11	677:11	13	=
RVAL	677:13	677:45	12	rm [ i ] - ( red + MAX_COLOR / C_LEN - 1 )
FIELD	677:13	677:17	13	rm [ i ]
LEAF_NODE	677:13	677:13	14	rm
LEAF_NODE	677:15	677:15	14	[
EXPR	677:16	677:16	14	i
FIELD	677:16	677:16	15	i
LEAF_NODE	677:16	677:16	16	i
LEAF_NODE	677:17	677:17	14	]
LEAF_NODE	677:19	677:19	13	-
LEAF_NODE	677:21	677:21	13	(
FIELD	677:22	677:22	13	red
LEAF_NODE	677:22	677:22	14	red
LEAF_NODE	677:26	677:26	13	+
FIELD	677:28	677:28	13	MAX_COLOR
LEAF_NODE	677:28	677:28	14	MAX_COLOR
LEAF_NODE	677:37	677:37	13	/
FIELD	677:38	677:38	13	C_LEN
LEAF_NODE	677:38	677:38	14	C_LEN
LEAF_NODE	677:43	677:43	13	-
FIELD	677:44	677:44	13	1
LEAF_NODE	677:44	677:44	14	1
LEAF_NODE	677:45	677:45	13	)
LEAF_NODE	677:46	677:46	11	)
REL_OPERATOR	677:48	677:48	11	>
LEAF_NODE	677:48	677:48	12	>
FIELD	677:50	677:50	11	0
LEAF_NODE	677:50	677:50	12	0
LEAF_NODE	677:52	677:52	7	)
STATEMENTS	678:3	678:3	7	
EXPR_STATEMENT	678:3	678:18	8	dist += tmp * tmp ;
EXPR	678:3	678:3	9	dist += tmp * tmp
ASSIGN	678:3	678:11	10	dist += tmp * tmp
LVAL	678:3	678:3	11	dist
FIELD	678:3	678:3	12	dist
LEAF_NODE	678:3	678:3	13	dist
ASSIGN_OP	678:8	678:8	11	+=
LEAF_NODE	678:8	678:8	12	+=
RVAL	678:11	678:15	11	tmp * tmp
FIELD	678:11	678:11	12	tmp
LEAF_NODE	678:11	678:11	13	tmp
LEAF_NODE	678:14	678:14	12	*
FIELD	678:15	678:15	12	tmp
LEAF_NODE	678:15	678:15	13	tmp
LEAF_NODE	678:18	678:18	9	;
SELECTION	679:9	681:3	6	
KEYWORD	679:9	679:9	7	if
LEAF_NODE	679:9	679:9	8	if
LEAF_NODE	679:12	679:12	7	(
CONDITION	679:13	679:13	7	( tmp = green - gm [ i ] ) > 0 || ( tmp = gm [ i ] - ( green + MAX_COLOR / C_LEN - 1 ) ) > 0
EXPR	679:13	679:13	8	( tmp = green - gm [ i ] ) > 0 || ( tmp = gm [ i ] - ( green + MAX_COLOR / C_LEN - 1 ) ) > 0
OR	679:13	680:6	9	( tmp = green - gm [ i ] ) > 0 || ( tmp = gm [ i ] - ( green + MAX_COLOR / C_LEN - 1 ) ) > 0
EXPR	679:13	679:37	10	( tmp = green - gm [ i ] ) > 0
LEAF_NODE	679:13	679:13	11	(
ASSIGN	679:14	679:20	11	tmp = green - gm [ i ]
LVAL	679:14	679:14	12	tmp
FIELD	679:14	679:14	13	tmp
LEAF_NODE	679:14	679:14	14	tmp
ASSIGN_OP	679:18	679:18	12	=
LEAF_NODE	679:18	679:18	13	=
RVAL	679:20	679:28	12	green - gm [ i ]
FIELD	679:20	679:20	13	green
LEAF_NODE	679:20	679:20	14	green
LEAF_NODE	679:26	679:26	13	-
FIELD	679:28	679:32	13	gm [ i ]
LEAF_NODE	679:28	679:28	14	gm
LEAF_NODE	679:30	679:30	14	[
EXPR	679:31	679:31	14	i
FIELD	679:31	679:31	15	i
LEAF_NODE	679:31	679:31	16	i
LEAF_NODE	679:32	679:32	14	]
LEAF_NODE	679:33	679:33	11	)
REL_OPERATOR	679:35	679:35	11	>
LEAF_NODE	679:35	679:35	12	>
FIELD	679:37	679:37	11	0
LEAF_NODE	679:37	679:37	12	0
LEAF_NODE	679:39	679:39	10	||
EXPR	680:6	680:52	10	( tmp = gm [ i ] - ( green + MAX_COLOR / C_LEN - 1 ) ) > 0
LEAF_NODE	680:6	680:6	11	(
ASSIGN	680:7	680:13	11	tmp = gm [ i ] - ( green + MAX_COLOR / C_LEN - 1 )
LVAL	680:7	680:7	12	tmp
FIELD	680:7	680:7	13	tmp
LEAF_NODE	680:7	680:7	14	tmp
ASSIGN_OP	680:11	680:11	12	=
LEAF_NODE	680:11	680:11	13	=
RVAL	680:13	680:47	12	gm [ i ] - ( green + MAX_COLOR / C_LEN - 1 )
FIELD	680:13	680:17	13	gm [ i ]
LEAF_NODE	680:13	680:13	14	gm
LEAF_NODE	680:15	680:15	14	[
EXPR	680:16	680:16	14	i
FIELD	680:16	680:16	15	i
LEAF_NODE	680:16	680:16	16	i
LEAF_NODE	680:17	680:17	14	]
LEAF_NODE	680:19	680:19	13	-
LEAF_NODE	680:21	680:21	13	(
FIELD	680:22	680:22	13	green
LEAF_NODE	680:22	680:22	14	green
LEAF_NODE	680:28	680:28	13	+
FIELD	680:30	680:30	13	MAX_COLOR
LEAF_NODE	680:30	680:30	14	MAX_COLOR
LEAF_NODE	680:39	680:39	13	/
FIELD	680:40	680:40	13	C_LEN
LEAF_NODE	680:40	680:40	14	C_LEN
LEAF_NODE	680:45	680:45	13	-
FIELD	680:46	680:46	13	1
LEAF_NODE	680:46	680:46	14	1
LEAF_NODE	680:47	680:47	13	)
LEAF_NODE	680:48	680:48	11	)
REL_OPERATOR	680:50	680:50	11	>
LEAF_NODE	680:50	680:50	12	>
FIELD	680:52	680:52	11	0
LEAF_NODE	680:52	680:52	12	0
LEAF_NODE	680:54	680:54	7	)
STATEMENTS	681:3	681:3	7	
EXPR_STATEMENT	681:3	681:18	8	dist += tmp * tmp ;
EXPR	681:3	681:3	9	dist += tmp * tmp
ASSIGN	681:3	681:11	10	dist += tmp * tmp
LVAL	681:3	681:3	11	dist
FIELD	681:3	681:3	12	dist
LEAF_NODE	681:3	681:3	13	dist
ASSIGN_OP	681:8	681:8	11	+=
LEAF_NODE	681:8	681:8	12	+=
RVAL	681:11	681:15	11	tmp * tmp
FIELD	681:11	681:11	12	tmp
LEAF_NODE	681:11	681:11	13	tmp
LEAF_NODE	681:14	681:14	12	*
FIELD	681:15	681:15	12	tmp
LEAF_NODE	681:15	681:15	13	tmp
LEAF_NODE	681:18	681:18	9	;
SELECTION	682:9	684:3	6	
KEYWORD	682:9	682:9	7	if
LEAF_NODE	682:9	682:9	8	if
LEAF_NODE	682:12	682:12	7	(
CONDITION	682:13	682:13	7	( tmp = blue - bm [ i ] ) > 0 || ( tmp = bm [ i ] - ( blue + MAX_COLOR / C_LEN - 1 ) ) > 0
EXPR	682:13	682:13	8	( tmp = blue - bm [ i ] ) > 0 || ( tmp = bm [ i ] - ( blue + MAX_COLOR / C_LEN - 1 ) ) > 0
OR	682:13	683:6	9	( tmp = blue - bm [ i ] ) > 0 || ( tmp = bm [ i ] - ( blue + MAX_COLOR / C_LEN - 1 ) ) > 0
EXPR	682:13	682:36	10	( tmp = blue - bm [ i ] ) > 0
LEAF_NODE	682:13	682:13	11	(
ASSIGN	682:14	682:20	11	tmp = blue - bm [ i ]
LVAL	682:14	682:14	12	tmp
FIELD	682:14	682:14	13	tmp
LEAF_NODE	682:14	682:14	14	tmp
ASSIGN_OP	682:18	682:18	12	=
LEAF_NODE	682:18	682:18	13	=
RVAL	682:20	682:27	12	blue - bm [ i ]
FIELD	682:20	682:20	13	blue
LEAF_NODE	682:20	682:20	14	blue
LEAF_NODE	682:25	682:25	13	-
FIELD	682:27	682:31	13	bm [ i ]
LEAF_NODE	682:27	682:27	14	bm
LEAF_NODE	682:29	682:29	14	[
EXPR	682:30	682:30	14	i
FIELD	682:30	682:30	15	i
LEAF_NODE	682:30	682:30	16	i
LEAF_NODE	682:31	682:31	14	]
LEAF_NODE	682:32	682:32	11	)
REL_OPERATOR	682:34	682:34	11	>
LEAF_NODE	682:34	682:34	12	>
FIELD	682:36	682:36	11	0
LEAF_NODE	682:36	682:36	12	0
LEAF_NODE	682:38	682:38	10	||
EXPR	683:6	683:51	10	( tmp = bm [ i ] - ( blue + MAX_COLOR / C_LEN - 1 ) ) > 0
LEAF_NODE	683:6	683:6	11	(
ASSIGN	683:7	683:13	11	tmp = bm [ i ] - ( blue + MAX_COLOR / C_LEN - 1 )
LVAL	683:7	683:7	12	tmp
FIELD	683:7	683:7	13	tmp
LEAF_NODE	683:7	683:7	14	tmp
ASSIGN_OP	683:11	683:11	12	=
LEAF_NODE	683:11	683:11	13	=
RVAL	683:13	683:46	12	bm [ i ] - ( blue + MAX_COLOR / C_LEN - 1 )
FIELD	683:13	683:17	13	bm [ i ]
LEAF_NODE	683:13	683:13	14	bm
LEAF_NODE	683:15	683:15	14	[
EXPR	683:16	683:16	14	i
FIELD	683:16	683:16	15	i
LEAF_NODE	683:16	683:16	16	i
LEAF_NODE	683:17	683:17	14	]
LEAF_NODE	683:19	683:19	13	-
LEAF_NODE	683:21	683:21	13	(
FIELD	683:22	683:22	13	blue
LEAF_NODE	683:22	683:22	14	blue
LEAF_NODE	683:27	683:27	13	+
FIELD	683:29	683:29	13	MAX_COLOR
LEAF_NODE	683:29	683:29	14	MAX_COLOR
LEAF_NODE	683:38	683:38	13	/
FIELD	683:39	683:39	13	C_LEN
LEAF_NODE	683:39	683:39	14	C_LEN
LEAF_NODE	683:44	683:44	13	-
FIELD	683:45	683:45	13	1
LEAF_NODE	683:45	683:45	14	1
LEAF_NODE	683:46	683:46	13	)
LEAF_NODE	683:47	683:47	11	)
REL_OPERATOR	683:49	683:49	11	>
LEAF_NODE	683:49	683:49	12	>
FIELD	683:51	683:51	11	0
LEAF_NODE	683:51	683:51	12	0
LEAF_NODE	683:53	683:53	7	)
STATEMENTS	684:3	684:3	7	
EXPR_STATEMENT	684:3	684:18	8	dist += tmp * tmp ;
EXPR	684:3	684:3	9	dist += tmp * tmp
ASSIGN	684:3	684:11	10	dist += tmp * tmp
LVAL	684:3	684:3	11	dist
FIELD	684:3	684:3	12	dist
LEAF_NODE	684:3	684:3	13	dist
ASSIGN_OP	684:8	684:8	11	+=
LEAF_NODE	684:8	684:8	12	+=
RVAL	684:11	684:15	11	tmp * tmp
FIELD	684:11	684:11	12	tmp
LEAF_NODE	684:11	684:11	13	tmp
LEAF_NODE	684:14	684:14	12	*
FIELD	684:15	684:15	12	tmp
LEAF_NODE	684:15	684:15	13	tmp
LEAF_NODE	684:18	684:18	9	;
SELECTION	685:9	685:29	6	
KEYWORD	685:9	685:9	7	if
LEAF_NODE	685:9	685:9	8	if
LEAF_NODE	685:12	685:12	7	(
CONDITION	685:13	685:13	7	dist < mindist
EXPR	685:13	685:20	8	dist < mindist
FIELD	685:13	685:13	9	dist
LEAF_NODE	685:13	685:13	10	dist
REL_OPERATOR	685:18	685:18	9	<
LEAF_NODE	685:18	685:18	10	<
FIELD	685:20	685:20	9	mindist
LEAF_NODE	685:20	685:20	10	mindist
LEAF_NODE	685:27	685:27	7	)
STATEMENTS	685:29	689:9	7	
LEAF_NODE	685:29	685:29	8	{
STATEMENTS	686:3	688:3	8	
EXPR_STATEMENT	686:3	686:37	9	ptr -> entries [ ptr -> num_ents ] [ 0 ] = i ;
EXPR	686:3	686:3	10	ptr -> entries [ ptr -> num_ents ] [ 0 ] = i
ASSIGN	686:3	686:36	11	ptr -> entries [ ptr -> num_ents ] [ 0 ] = i
LVAL	686:3	686:3	12	ptr -> entries [ ptr -> num_ents ] [ 0 ]
FIELD	686:3	686:32	13	ptr -> entries [ ptr -> num_ents ] [ 0 ]
LEAF_NODE	686:3	686:3	14	ptr
LEAF_NODE	686:6	686:6	14	->
LEAF_NODE	686:8	686:8	14	entries
LEAF_NODE	686:15	686:15	14	[
EXPR	686:16	686:16	14	ptr -> num_ents
FIELD	686:16	686:21	15	ptr -> num_ents
LEAF_NODE	686:16	686:16	16	ptr
LEAF_NODE	686:19	686:19	16	->
LEAF_NODE	686:21	686:21	16	num_ents
LEAF_NODE	686:29	686:29	14	]
LEAF_NODE	686:30	686:30	14	[
EXPR	686:31	686:31	14	0
FIELD	686:31	686:31	15	0
LEAF_NODE	686:31	686:31	16	0
LEAF_NODE	686:32	686:32	14	]
ASSIGN_OP	686:34	686:34	12	=
LEAF_NODE	686:34	686:34	13	=
RVAL	686:36	686:36	12	i
FIELD	686:36	686:36	13	i
LEAF_NODE	686:36	686:36	14	i
LEAF_NODE	686:37	686:37	10	;
EXPR_STATEMENT	687:3	687:40	9	ptr -> entries [ ptr -> num_ents ] [ 1 ] = dist ;
EXPR	687:3	687:3	10	ptr -> entries [ ptr -> num_ents ] [ 1 ] = dist
ASSIGN	687:3	687:36	11	ptr -> entries [ ptr -> num_ents ] [ 1 ] = dist
LVAL	687:3	687:3	12	ptr -> entries [ ptr -> num_ents ] [ 1 ]
FIELD	687:3	687:32	13	ptr -> entries [ ptr -> num_ents ] [ 1 ]
LEAF_NODE	687:3	687:3	14	ptr
LEAF_NODE	687:6	687:6	14	->
LEAF_NODE	687:8	687:8	14	entries
LEAF_NODE	687:15	687:15	14	[
EXPR	687:16	687:16	14	ptr -> num_ents
FIELD	687:16	687:21	15	ptr -> num_ents
LEAF_NODE	687:16	687:16	16	ptr
LEAF_NODE	687:19	687:19	16	->
LEAF_NODE	687:21	687:21	16	num_ents
LEAF_NODE	687:29	687:29	14	]
LEAF_NODE	687:30	687:30	14	[
EXPR	687:31	687:31	14	1
FIELD	687:31	687:31	15	1
LEAF_NODE	687:31	687:31	16	1
LEAF_NODE	687:32	687:32	14	]
ASSIGN_OP	687:34	687:34	12	=
LEAF_NODE	687:34	687:34	13	=
RVAL	687:36	687:36	12	dist
FIELD	687:36	687:36	13	dist
LEAF_NODE	687:36	687:36	14	dist
LEAF_NODE	687:40	687:40	10	;
EXPR_STATEMENT	688:3	688:18	9	++ ptr -> num_ents ;
EXPR	688:3	688:5	10	++ ptr -> num_ents
LEAF_NODE	688:3	688:3	11	++
FIELD	688:5	688:10	11	ptr -> num_ents
LEAF_NODE	688:5	688:5	12	ptr
LEAF_NODE	688:8	688:8	12	->
LEAF_NODE	688:10	688:10	12	num_ents
LEAF_NODE	688:18	688:18	10	;
LEAF_NODE	689:9	689:9	8	}
LEAF_NODE	690:1	690:1	5	}
ITERATION	695:1	695:48	3	
KEYWORD	695:1	695:1	4	for
LEAF_NODE	695:1	695:1	5	for
LEAF_NODE	695:5	695:5	4	(
FOR_INIT	695:6	695:27	4	n = ptr -> num_ents - 1 ;
EXPR	695:6	695:6	5	n = ptr -> num_ents - 1
ASSIGN	695:6	695:10	6	n = ptr -> num_ents - 1
LVAL	695:6	695:6	7	n
FIELD	695:6	695:6	8	n
LEAF_NODE	695:6	695:6	9	n
ASSIGN_OP	695:8	695:8	7	=
LEAF_NODE	695:8	695:8	8	=
RVAL	695:10	695:26	7	ptr -> num_ents - 1
FIELD	695:10	695:15	8	ptr -> num_ents
LEAF_NODE	695:10	695:10	9	ptr
LEAF_NODE	695:13	695:13	9	->
LEAF_NODE	695:15	695:15	9	num_ents
LEAF_NODE	695:24	695:24	8	-
FIELD	695:26	695:26	8	1
LEAF_NODE	695:26	695:26	9	1
LEAF_NODE	695:27	695:27	5	;
CONDITION	695:29	695:29	4	n > 0
EXPR	695:29	695:33	5	n > 0
FIELD	695:29	695:29	6	n
LEAF_NODE	695:29	695:29	7	n
REL_OPERATOR	695:31	695:31	6	>
LEAF_NODE	695:31	695:31	7	>
FIELD	695:33	695:33	6	0
LEAF_NODE	695:33	695:33	7	0
LEAF_NODE	695:34	695:34	4	;
FOR_EXPR	695:36	695:36	4	n = next_n
EXPR	695:36	695:36	5	n = next_n
ASSIGN	695:36	695:40	6	n = next_n
LVAL	695:36	695:36	7	n
FIELD	695:36	695:36	8	n
LEAF_NODE	695:36	695:36	9	n
ASSIGN_OP	695:38	695:38	7	=
LEAF_NODE	695:38	695:38	8	=
RVAL	695:40	695:40	7	next_n
FIELD	695:40	695:40	8	next_n
LEAF_NODE	695:40	695:40	9	next_n
LEAF_NODE	695:46	695:46	4	)
STATEMENTS	695:48	707:1	4	
LEAF_NODE	695:48	695:48	5	{
STATEMENTS	696:2	697:2	5	
EXPR_STATEMENT	696:2	696:12	6	next_n = 0 ;
EXPR	696:2	696:2	7	next_n = 0
ASSIGN	696:2	696:11	8	next_n = 0
LVAL	696:2	696:2	9	next_n
FIELD	696:2	696:2	10	next_n
LEAF_NODE	696:2	696:2	11	next_n
ASSIGN_OP	696:9	696:9	9	=
LEAF_NODE	696:9	696:9	10	=
RVAL	696:11	696:11	9	0
FIELD	696:11	696:11	10	0
LEAF_NODE	696:11	696:11	11	0
LEAF_NODE	696:12	696:12	7	;
ITERATION	697:2	698:3	6	
KEYWORD	697:2	697:2	7	for
LEAF_NODE	697:2	697:2	8	for
LEAF_NODE	697:6	697:6	7	(
FOR_INIT	697:7	697:12	7	i = 0 ;
EXPR	697:7	697:7	8	i = 0
ASSIGN	697:7	697:11	9	i = 0
LVAL	697:7	697:7	10	i
FIELD	697:7	697:7	11	i
LEAF_NODE	697:7	697:7	12	i
ASSIGN_OP	697:9	697:9	10	=
LEAF_NODE	697:9	697:9	11	=
RVAL	697:11	697:11	10	0
FIELD	697:11	697:11	11	0
LEAF_NODE	697:11	697:11	12	0
LEAF_NODE	697:12	697:12	8	;
CONDITION	697:14	697:14	7	i < n
EXPR	697:14	697:18	8	i < n
FIELD	697:14	697:14	9	i
LEAF_NODE	697:14	697:14	10	i
REL_OPERATOR	697:16	697:16	9	<
LEAF_NODE	697:16	697:16	10	<
FIELD	697:18	697:18	9	n
LEAF_NODE	697:18	697:18	10	n
LEAF_NODE	697:19	697:19	7	;
FOR_EXPR	697:21	697:21	7	++ i
EXPR	697:21	697:23	8	++ i
LEAF_NODE	697:21	697:21	9	++
FIELD	697:23	697:23	9	i
LEAF_NODE	697:23	697:23	10	i
LEAF_NODE	697:24	697:24	7	)
STATEMENTS	698:3	698:3	7	
SELECTION	698:3	698:50	8	
KEYWORD	698:3	698:3	9	if
LEAF_NODE	698:3	698:3	10	if
LEAF_NODE	698:6	698:6	9	(
CONDITION	698:7	698:7	9	ptr -> entries [ i ] [ 1 ] > ptr -> entries [ i + 1 ] [ 1 ]
EXPR	698:7	698:28	10	ptr -> entries [ i ] [ 1 ] > ptr -> entries [ i + 1 ] [ 1 ]
FIELD	698:7	698:24	11	ptr -> entries [ i ] [ 1 ]
LEAF_NODE	698:7	698:7	12	ptr
LEAF_NODE	698:10	698:10	12	->
LEAF_NODE	698:12	698:12	12	entries
LEAF_NODE	698:19	698:19	12	[
EXPR	698:20	698:20	12	i
FIELD	698:20	698:20	13	i
LEAF_NODE	698:20	698:20	14	i
LEAF_NODE	698:21	698:21	12	]
LEAF_NODE	698:22	698:22	12	[
EXPR	698:23	698:23	12	1
FIELD	698:23	698:23	13	1
LEAF_NODE	698:23	698:23	14	1
LEAF_NODE	698:24	698:24	12	]
REL_OPERATOR	698:26	698:26	11	>
LEAF_NODE	698:26	698:26	12	>
FIELD	698:28	698:47	11	ptr -> entries [ i + 1 ] [ 1 ]
LEAF_NODE	698:28	698:28	12	ptr
LEAF_NODE	698:31	698:31	12	->
LEAF_NODE	698:33	698:33	12	entries
LEAF_NODE	698:40	698:40	12	[
EXPR	698:41	698:43	12	i + 1
FIELD	698:41	698:41	13	i
LEAF_NODE	698:41	698:41	14	i
LEAF_NODE	698:42	698:42	13	+
FIELD	698:43	698:43	13	1
LEAF_NODE	698:43	698:43	14	1
LEAF_NODE	698:44	698:44	12	]
LEAF_NODE	698:45	698:45	12	[
EXPR	698:46	698:46	12	1
FIELD	698:46	698:46	13	1
LEAF_NODE	698:46	698:46	14	1
LEAF_NODE	698:47	698:47	12	]
LEAF_NODE	698:48	698:48	9	)
STATEMENTS	698:50	706:10	9	
LEAF_NODE	698:50	698:50	10	{
STATEMENTS	699:4	705:4	10	
EXPR_STATEMENT	699:4	699:28	11	tmp = ptr -> entries [ i ] [ 0 ] ;
EXPR	699:4	699:4	12	tmp = ptr -> entries [ i ] [ 0 ]
ASSIGN	699:4	699:10	13	tmp = ptr -> entries [ i ] [ 0 ]
LVAL	699:4	699:4	14	tmp
FIELD	699:4	699:4	15	tmp
LEAF_NODE	699:4	699:4	16	tmp
ASSIGN_OP	699:8	699:8	14	=
LEAF_NODE	699:8	699:8	15	=
RVAL	699:10	699:10	14	ptr -> entries [ i ] [ 0 ]
FIELD	699:10	699:27	15	ptr -> entries [ i ] [ 0 ]
LEAF_NODE	699:10	699:10	16	ptr
LEAF_NODE	699:13	699:13	16	->
LEAF_NODE	699:15	699:15	16	entries
LEAF_NODE	699:22	699:22	16	[
EXPR	699:23	699:23	16	i
FIELD	699:23	699:23	17	i
LEAF_NODE	699:23	699:23	18	i
LEAF_NODE	699:24	699:24	16	]
LEAF_NODE	699:25	699:25	16	[
EXPR	699:26	699:26	16	0
FIELD	699:26	699:26	17	0
LEAF_NODE	699:26	699:26	18	0
LEAF_NODE	699:27	699:27	16	]
LEAF_NODE	699:28	699:28	12	;
EXPR_STATEMENT	700:4	700:45	11	ptr -> entries [ i ] [ 0 ] = ptr -> entries [ i + 1 ] [ 0 ] ;
EXPR	700:4	700:4	12	ptr -> entries [ i ] [ 0 ] = ptr -> entries [ i + 1 ] [ 0 ]
ASSIGN	700:4	700:25	13	ptr -> entries [ i ] [ 0 ] = ptr -> entries [ i + 1 ] [ 0 ]
LVAL	700:4	700:4	14	ptr -> entries [ i ] [ 0 ]
FIELD	700:4	700:21	15	ptr -> entries [ i ] [ 0 ]
LEAF_NODE	700:4	700:4	16	ptr
LEAF_NODE	700:7	700:7	16	->
LEAF_NODE	700:9	700:9	16	entries
LEAF_NODE	700:16	700:16	16	[
EXPR	700:17	700:17	16	i
FIELD	700:17	700:17	17	i
LEAF_NODE	700:17	700:17	18	i
LEAF_NODE	700:18	700:18	16	]
LEAF_NODE	700:19	700:19	16	[
EXPR	700:20	700:20	16	0
FIELD	700:20	700:20	17	0
LEAF_NODE	700:20	700:20	18	0
LEAF_NODE	700:21	700:21	16	]
ASSIGN_OP	700:23	700:23	14	=
LEAF_NODE	700:23	700:23	15	=
RVAL	700:25	700:25	14	ptr -> entries [ i + 1 ] [ 0 ]
FIELD	700:25	700:44	15	ptr -> entries [ i + 1 ] [ 0 ]
LEAF_NODE	700:25	700:25	16	ptr
LEAF_NODE	700:28	700:28	16	->
LEAF_NODE	700:30	700:30	16	entries
LEAF_NODE	700:37	700:37	16	[
EXPR	700:38	700:40	16	i + 1
FIELD	700:38	700:38	17	i
LEAF_NODE	700:38	700:38	18	i
LEAF_NODE	700:39	700:39	17	+
FIELD	700:40	700:40	17	1
LEAF_NODE	700:40	700:40	18	1
LEAF_NODE	700:41	700:41	16	]
LEAF_NODE	700:42	700:42	16	[
EXPR	700:43	700:43	16	0
FIELD	700:43	700:43	17	0
LEAF_NODE	700:43	700:43	18	0
LEAF_NODE	700:44	700:44	16	]
LEAF_NODE	700:45	700:45	12	;
EXPR_STATEMENT	701:4	701:30	11	ptr -> entries [ i + 1 ] [ 0 ] = tmp ;
EXPR	701:4	701:4	12	ptr -> entries [ i + 1 ] [ 0 ] = tmp
ASSIGN	701:4	701:27	13	ptr -> entries [ i + 1 ] [ 0 ] = tmp
LVAL	701:4	701:4	14	ptr -> entries [ i + 1 ] [ 0 ]
FIELD	701:4	701:23	15	ptr -> entries [ i + 1 ] [ 0 ]
LEAF_NODE	701:4	701:4	16	ptr
LEAF_NODE	701:7	701:7	16	->
LEAF_NODE	701:9	701:9	16	entries
LEAF_NODE	701:16	701:16	16	[
EXPR	701:17	701:19	16	i + 1
FIELD	701:17	701:17	17	i
LEAF_NODE	701:17	701:17	18	i
LEAF_NODE	701:18	701:18	17	+
FIELD	701:19	701:19	17	1
LEAF_NODE	701:19	701:19	18	1
LEAF_NODE	701:20	701:20	16	]
LEAF_NODE	701:21	701:21	16	[
EXPR	701:22	701:22	16	0
FIELD	701:22	701:22	17	0
LEAF_NODE	701:22	701:22	18	0
LEAF_NODE	701:23	701:23	16	]
ASSIGN_OP	701:25	701:25	14	=
LEAF_NODE	701:25	701:25	15	=
RVAL	701:27	701:27	14	tmp
FIELD	701:27	701:27	15	tmp
LEAF_NODE	701:27	701:27	16	tmp
LEAF_NODE	701:30	701:30	12	;
EXPR_STATEMENT	702:4	702:28	11	tmp = ptr -> entries [ i ] [ 1 ] ;
EXPR	702:4	702:4	12	tmp = ptr -> entries [ i ] [ 1 ]
ASSIGN	702:4	702:10	13	tmp = ptr -> entries [ i ] [ 1 ]
LVAL	702:4	702:4	14	tmp
FIELD	702:4	702:4	15	tmp
LEAF_NODE	702:4	702:4	16	tmp
ASSIGN_OP	702:8	702:8	14	=
LEAF_NODE	702:8	702:8	15	=
RVAL	702:10	702:10	14	ptr -> entries [ i ] [ 1 ]
FIELD	702:10	702:27	15	ptr -> entries [ i ] [ 1 ]
LEAF_NODE	702:10	702:10	16	ptr
LEAF_NODE	702:13	702:13	16	->
LEAF_NODE	702:15	702:15	16	entries
LEAF_NODE	702:22	702:22	16	[
EXPR	702:23	702:23	16	i
FIELD	702:23	702:23	17	i
LEAF_NODE	702:23	702:23	18	i
LEAF_NODE	702:24	702:24	16	]
LEAF_NODE	702:25	702:25	16	[
EXPR	702:26	702:26	16	1
FIELD	702:26	702:26	17	1
LEAF_NODE	702:26	702:26	18	1
LEAF_NODE	702:27	702:27	16	]
LEAF_NODE	702:28	702:28	12	;
EXPR_STATEMENT	703:4	703:45	11	ptr -> entries [ i ] [ 1 ] = ptr -> entries [ i + 1 ] [ 1 ] ;
EXPR	703:4	703:4	12	ptr -> entries [ i ] [ 1 ] = ptr -> entries [ i + 1 ] [ 1 ]
ASSIGN	703:4	703:25	13	ptr -> entries [ i ] [ 1 ] = ptr -> entries [ i + 1 ] [ 1 ]
LVAL	703:4	703:4	14	ptr -> entries [ i ] [ 1 ]
FIELD	703:4	703:21	15	ptr -> entries [ i ] [ 1 ]
LEAF_NODE	703:4	703:4	16	ptr
LEAF_NODE	703:7	703:7	16	->
LEAF_NODE	703:9	703:9	16	entries
LEAF_NODE	703:16	703:16	16	[
EXPR	703:17	703:17	16	i
FIELD	703:17	703:17	17	i
LEAF_NODE	703:17	703:17	18	i
LEAF_NODE	703:18	703:18	16	]
LEAF_NODE	703:19	703:19	16	[
EXPR	703:20	703:20	16	1
FIELD	703:20	703:20	17	1
LEAF_NODE	703:20	703:20	18	1
LEAF_NODE	703:21	703:21	16	]
ASSIGN_OP	703:23	703:23	14	=
LEAF_NODE	703:23	703:23	15	=
RVAL	703:25	703:25	14	ptr -> entries [ i + 1 ] [ 1 ]
FIELD	703:25	703:44	15	ptr -> entries [ i + 1 ] [ 1 ]
LEAF_NODE	703:25	703:25	16	ptr
LEAF_NODE	703:28	703:28	16	->
LEAF_NODE	703:30	703:30	16	entries
LEAF_NODE	703:37	703:37	16	[
EXPR	703:38	703:40	16	i + 1
FIELD	703:38	703:38	17	i
LEAF_NODE	703:38	703:38	18	i
LEAF_NODE	703:39	703:39	17	+
FIELD	703:40	703:40	17	1
LEAF_NODE	703:40	703:40	18	1
LEAF_NODE	703:41	703:41	16	]
LEAF_NODE	703:42	703:42	16	[
EXPR	703:43	703:43	16	1
FIELD	703:43	703:43	17	1
LEAF_NODE	703:43	703:43	18	1
LEAF_NODE	703:44	703:44	16	]
LEAF_NODE	703:45	703:45	12	;
EXPR_STATEMENT	704:4	704:30	11	ptr -> entries [ i + 1 ] [ 1 ] = tmp ;
EXPR	704:4	704:4	12	ptr -> entries [ i + 1 ] [ 1 ] = tmp
ASSIGN	704:4	704:27	13	ptr -> entries [ i + 1 ] [ 1 ] = tmp
LVAL	704:4	704:4	14	ptr -> entries [ i + 1 ] [ 1 ]
FIELD	704:4	704:23	15	ptr -> entries [ i + 1 ] [ 1 ]
LEAF_NODE	704:4	704:4	16	ptr
LEAF_NODE	704:7	704:7	16	->
LEAF_NODE	704:9	704:9	16	entries
LEAF_NODE	704:16	704:16	16	[
EXPR	704:17	704:19	16	i + 1
FIELD	704:17	704:17	17	i
LEAF_NODE	704:17	704:17	18	i
LEAF_NODE	704:18	704:18	17	+
FIELD	704:19	704:19	17	1
LEAF_NODE	704:19	704:19	18	1
LEAF_NODE	704:20	704:20	16	]
LEAF_NODE	704:21	704:21	16	[
EXPR	704:22	704:22	16	1
FIELD	704:22	704:22	17	1
LEAF_NODE	704:22	704:22	18	1
LEAF_NODE	704:23	704:23	16	]
ASSIGN_OP	704:25	704:25	14	=
LEAF_NODE	704:25	704:25	15	=
RVAL	704:27	704:27	14	tmp
FIELD	704:27	704:27	15	tmp
LEAF_NODE	704:27	704:27	16	tmp
LEAF_NODE	704:30	704:30	12	;
EXPR_STATEMENT	705:4	705:14	11	next_n = i ;
EXPR	705:4	705:4	12	next_n = i
ASSIGN	705:4	705:13	13	next_n = i
LVAL	705:4	705:4	14	next_n
FIELD	705:4	705:4	15	next_n
LEAF_NODE	705:4	705:4	16	next_n
ASSIGN_OP	705:11	705:11	14	=
LEAF_NODE	705:11	705:11	15	=
RVAL	705:13	705:13	14	i
FIELD	705:13	705:13	15	i
LEAF_NODE	705:13	705:13	16	i
LEAF_NODE	705:14	705:14	12	;
LEAF_NODE	706:10	706:10	10	}
LEAF_NODE	707:1	707:1	5	}
LEAF_NODE	708:1	708:1	3	return
LEAF_NODE	708:8	708:8	3	(
LEAF_NODE	708:9	708:9	3	ptr
LEAF_NODE	708:12	708:12	3	)
LEAF_NODE	708:13	708:13	3	;
LEAF_NODE	709:0	709:0	2	}
FUNCTION_DEF	711:0	751:0	1	
RETURN_TYPE	711:0	711:7	2	static void
LEAF_NODE	711:0	711:0	3	static
TYPE_NAME	711:7	711:7	3	void
LEAF_NODE	711:7	711:7	4	void
FUNCTION_NAME	712:0	712:0	2	map_colortable
LEAF_NODE	712:0	712:0	3	map_colortable
PARAMETER_LIST	712:14	712:19	2	( void )
LEAF_NODE	712:14	712:14	3	(
PARAMETER_DECL	712:15	712:15	3	void
LEAF_NODE	712:15	712:15	4	void
LEAF_NODE	712:19	712:19	3	)
LEAF_NODE	713:0	713:0	2	{
STATEMENTS	714:1	719:1	2	
LEAF_NODE	714:1	714:1	3	register
SIMPLE_DECL	714:10	714:45	3	uint32 * histp ; histp = & histogram [ 0 ] [ 0 ] [ 0 ] ;
VAR_DECL	714:10	714:18	4	uint32 * histp ; histp = & histogram [ 0 ] [ 0 ] [ 0 ]
TYPE	714:10	714:17	5	uint32 *
TYPE_NAME	714:10	714:10	6	uint32
LEAF_NODE	714:10	714:10	7	uint32
POINTER	714:17	714:17	6	*
LEAF_NODE	714:17	714:17	7	*
NAME	714:18	714:18	5	histp
LEAF_NODE	714:18	714:18	6	histp
LEAF_NODE	0:0	0:0	5	;
INIT	714:18	714:18	5	histp = & histogram [ 0 ] [ 0 ] [ 0 ]
ASSIGN	714:18	714:26	6	histp = & histogram [ 0 ] [ 0 ] [ 0 ]
LVAL	714:18	714:18	7	histp
NAME	714:18	714:18	8	histp
LEAF_NODE	714:18	714:18	9	histp
ASSIGN_OP	714:24	714:24	7	=
LEAF_NODE	714:24	714:24	8	=
RVAL	714:26	714:26	7	& histogram [ 0 ] [ 0 ] [ 0 ]
UNARY_EXPR	714:26	714:27	8	& histogram [ 0 ] [ 0 ] [ 0 ]
UNARY_OPERATOR	714:26	714:26	9	&
LEAF_NODE	714:26	714:26	10	&
FIELD	714:27	714:44	9	histogram [ 0 ] [ 0 ] [ 0 ]
LEAF_NODE	714:27	714:27	10	histogram
LEAF_NODE	714:36	714:36	10	[
EXPR	714:37	714:37	10	0
FIELD	714:37	714:37	11	0
LEAF_NODE	714:37	714:37	12	0
LEAF_NODE	714:38	714:38	10	]
LEAF_NODE	714:39	714:39	10	[
EXPR	714:40	714:40	10	0
FIELD	714:40	714:40	11	0
LEAF_NODE	714:40	714:40	12	0
LEAF_NODE	714:41	714:41	10	]
LEAF_NODE	714:42	714:42	10	[
EXPR	714:43	714:43	10	0
FIELD	714:43	714:43	11	0
LEAF_NODE	714:43	714:43	12	0
LEAF_NODE	714:44	714:44	10	]
LEAF_NODE	714:45	714:45	4	;
LEAF_NODE	715:1	715:1	3	register
SIMPLE_DECL	715:10	715:22	3	C_cell * cell ;
VAR_DECL	715:10	715:18	4	C_cell * cell
TYPE	715:10	715:17	5	C_cell *
TYPE_NAME	715:10	715:10	6	C_cell
LEAF_NODE	715:10	715:10	7	C_cell
POINTER	715:17	715:17	6	*
LEAF_NODE	715:17	715:17	7	*
NAME	715:18	715:18	5	cell
LEAF_NODE	715:18	715:18	6	cell
LEAF_NODE	715:22	715:22	4	;
LEAF_NODE	716:1	716:1	3	register
SIMPLE_DECL	716:10	716:30	3	int j , int tmp , int d2 , int dist ;
INIT_DECL_LIST	716:10	716:10	4	int j , int tmp , int d2 , int dist
VAR_DECL	716:10	716:14	5	int j
TYPE	716:10	716:10	6	int
TYPE_NAME	716:10	716:10	7	int
LEAF_NODE	716:10	716:10	8	int
NAME	716:14	716:14	6	j
LEAF_NODE	716:14	716:14	7	j
LEAF_NODE	716:15	716:15	5	,
INIT_DECL_LIST	716:10	716:10	5	int tmp , int d2 , int dist
VAR_DECL	716:10	716:17	6	int tmp
TYPE	716:10	716:10	7	int
TYPE_NAME	716:10	716:10	8	int
LEAF_NODE	716:10	716:10	9	int
NAME	716:17	716:17	7	tmp
LEAF_NODE	716:17	716:17	8	tmp
LEAF_NODE	716:20	716:20	6	,
INIT_DECL_LIST	716:10	716:10	6	int d2 , int dist
VAR_DECL	716:10	716:22	7	int d2
TYPE	716:10	716:10	8	int
TYPE_NAME	716:10	716:10	9	int
LEAF_NODE	716:10	716:10	10	int
NAME	716:22	716:22	8	d2
LEAF_NODE	716:22	716:22	9	d2
LEAF_NODE	716:24	716:24	7	,
VAR_DECL	716:10	716:26	7	int dist
TYPE	716:10	716:10	8	int
TYPE_NAME	716:10	716:10	9	int
LEAF_NODE	716:10	716:10	10	int
NAME	716:26	716:26	8	dist
LEAF_NODE	716:26	716:26	9	dist
LEAF_NODE	716:30	716:30	4	;
SIMPLE_DECL	717:1	717:18	3	int ir , int ig , int ib , int i ;
INIT_DECL_LIST	717:1	717:1	4	int ir , int ig , int ib , int i
VAR_DECL	717:1	717:5	5	int ir
TYPE	717:1	717:1	6	int
TYPE_NAME	717:1	717:1	7	int
LEAF_NODE	717:1	717:1	8	int
NAME	717:5	717:5	6	ir
LEAF_NODE	717:5	717:5	7	ir
LEAF_NODE	717:7	717:7	5	,
INIT_DECL_LIST	717:1	717:1	5	int ig , int ib , int i
VAR_DECL	717:1	717:9	6	int ig
TYPE	717:1	717:1	7	int
TYPE_NAME	717:1	717:1	8	int
LEAF_NODE	717:1	717:1	9	int
NAME	717:9	717:9	7	ig
LEAF_NODE	717:9	717:9	8	ig
LEAF_NODE	717:11	717:11	6	,
INIT_DECL_LIST	717:1	717:1	6	int ib , int i
VAR_DECL	717:1	717:13	7	int ib
TYPE	717:1	717:1	8	int
TYPE_NAME	717:1	717:1	9	int
LEAF_NODE	717:1	717:1	10	int
NAME	717:13	717:13	8	ib
LEAF_NODE	717:13	717:13	9	ib
LEAF_NODE	717:15	717:15	7	,
VAR_DECL	717:1	717:17	7	int i
TYPE	717:1	717:1	8	int
TYPE_NAME	717:1	717:1	9	int
LEAF_NODE	717:1	717:1	10	int
NAME	717:17	717:17	8	i
LEAF_NODE	717:17	717:17	9	i
LEAF_NODE	717:18	717:18	4	;
ITERATION	719:1	720:2	3	
KEYWORD	719:1	719:1	4	for
LEAF_NODE	719:1	719:1	5	for
LEAF_NODE	719:5	719:5	4	(
FOR_INIT	719:6	719:12	4	ir = 0 ;
EXPR	719:6	719:6	5	ir = 0
ASSIGN	719:6	719:11	6	ir = 0
LVAL	719:6	719:6	7	ir
FIELD	719:6	719:6	8	ir
LEAF_NODE	719:6	719:6	9	ir
ASSIGN_OP	719:9	719:9	7	=
LEAF_NODE	719:9	719:9	8	=
RVAL	719:11	719:11	7	0
FIELD	719:11	719:11	8	0
LEAF_NODE	719:11	719:11	9	0
LEAF_NODE	719:12	719:12	5	;
CONDITION	719:14	719:14	4	ir < B_LEN
EXPR	719:14	719:19	5	ir < B_LEN
FIELD	719:14	719:14	6	ir
LEAF_NODE	719:14	719:14	7	ir
REL_OPERATOR	719:17	719:17	6	<
LEAF_NODE	719:17	719:17	7	<
FIELD	719:19	719:19	6	B_LEN
LEAF_NODE	719:19	719:19	7	B_LEN
LEAF_NODE	719:24	719:24	4	;
FOR_EXPR	719:26	719:26	4	++ ir
EXPR	719:26	719:28	5	++ ir
LEAF_NODE	719:26	719:26	6	++
FIELD	719:28	719:28	6	ir
LEAF_NODE	719:28	719:28	7	ir
LEAF_NODE	719:30	719:30	4	)
STATEMENTS	720:2	720:2	4	
ITERATION	720:2	721:3	5	
KEYWORD	720:2	720:2	6	for
LEAF_NODE	720:2	720:2	7	for
LEAF_NODE	720:6	720:6	6	(
FOR_INIT	720:7	720:13	6	ig = 0 ;
EXPR	720:7	720:7	7	ig = 0
ASSIGN	720:7	720:12	8	ig = 0
LVAL	720:7	720:7	9	ig
FIELD	720:7	720:7	10	ig
LEAF_NODE	720:7	720:7	11	ig
ASSIGN_OP	720:10	720:10	9	=
LEAF_NODE	720:10	720:10	10	=
RVAL	720:12	720:12	9	0
FIELD	720:12	720:12	10	0
LEAF_NODE	720:12	720:12	11	0
LEAF_NODE	720:13	720:13	7	;
CONDITION	720:15	720:15	6	ig < B_LEN
EXPR	720:15	720:20	7	ig < B_LEN
FIELD	720:15	720:15	8	ig
LEAF_NODE	720:15	720:15	9	ig
REL_OPERATOR	720:18	720:18	8	<
LEAF_NODE	720:18	720:18	9	<
FIELD	720:20	720:20	8	B_LEN
LEAF_NODE	720:20	720:20	9	B_LEN
LEAF_NODE	720:25	720:25	6	;
FOR_EXPR	720:27	720:27	6	++ ig
EXPR	720:27	720:29	7	++ ig
LEAF_NODE	720:27	720:27	8	++
FIELD	720:29	720:29	8	ig
LEAF_NODE	720:29	720:29	9	ig
LEAF_NODE	720:31	720:31	6	)
STATEMENTS	721:3	721:3	6	
ITERATION	721:3	721:43	7	
KEYWORD	721:3	721:3	8	for
LEAF_NODE	721:3	721:3	9	for
LEAF_NODE	721:7	721:7	8	(
FOR_INIT	721:8	721:14	8	ib = 0 ;
EXPR	721:8	721:8	9	ib = 0
ASSIGN	721:8	721:13	10	ib = 0
LVAL	721:8	721:8	11	ib
FIELD	721:8	721:8	12	ib
LEAF_NODE	721:8	721:8	13	ib
ASSIGN_OP	721:11	721:11	11	=
LEAF_NODE	721:11	721:11	12	=
RVAL	721:13	721:13	11	0
FIELD	721:13	721:13	12	0
LEAF_NODE	721:13	721:13	13	0
LEAF_NODE	721:14	721:14	9	;
CONDITION	721:16	721:16	8	ib < B_LEN
EXPR	721:16	721:21	9	ib < B_LEN
FIELD	721:16	721:16	10	ib
LEAF_NODE	721:16	721:16	11	ib
REL_OPERATOR	721:19	721:19	10	<
LEAF_NODE	721:19	721:19	11	<
FIELD	721:21	721:21	10	B_LEN
LEAF_NODE	721:21	721:21	11	B_LEN
LEAF_NODE	721:26	721:26	8	;
FOR_EXPR	721:28	721:28	8	++ ib , histp ++
EXPR	721:28	721:34	9	++ ib , histp ++
LEAF_NODE	721:28	721:28	10	++
FIELD	721:30	721:30	10	ib
LEAF_NODE	721:30	721:30	11	ib
LEAF_NODE	721:32	721:32	10	,
FIELD	721:34	721:39	10	histp ++
LEAF_NODE	721:34	721:34	11	histp
LEAF_NODE	721:39	721:39	11	++
LEAF_NODE	721:41	721:41	8	)
STATEMENTS	721:43	750:3	8	
LEAF_NODE	721:43	721:43	9	{
STATEMENTS	722:4	736:4	9	
SELECTION	722:4	722:21	10	
KEYWORD	722:4	722:4	11	if
LEAF_NODE	722:4	722:4	12	if
LEAF_NODE	722:7	722:7	11	(
CONDITION	722:8	722:8	11	* histp == 0
EXPR	722:8	722:18	12	* histp == 0
UNARY_EXPR	722:8	722:9	13	* histp
UNARY_OPERATOR	722:8	722:8	14	*
LEAF_NODE	722:8	722:8	15	*
FIELD	722:9	722:9	14	histp
LEAF_NODE	722:9	722:9	15	histp
EQ_OPERATOR	722:15	722:15	13	==
LEAF_NODE	722:15	722:15	14	==
FIELD	722:18	722:18	13	0
LEAF_NODE	722:18	722:18	14	0
LEAF_NODE	722:19	722:19	11	)
STATEMENTS	722:21	725:4	11	
LEAF_NODE	722:21	722:21	12	{
STATEMENTS	723:5	724:5	12	
EXPR_STATEMENT	723:5	723:16	13	* histp = - 1 ;
EXPR	723:5	723:5	14	* histp = - 1
ASSIGN	723:5	723:14	15	* histp = - 1
LVAL	723:5	723:5	16	* histp
UNARY_EXPR	723:5	723:6	17	* histp
UNARY_OPERATOR	723:5	723:5	18	*
LEAF_NODE	723:5	723:5	19	*
FIELD	723:6	723:6	18	histp
LEAF_NODE	723:6	723:6	19	histp
ASSIGN_OP	723:12	723:12	16	=
LEAF_NODE	723:12	723:12	17	=
RVAL	723:14	723:14	16	- 1
UNARY_EXPR	723:14	723:15	17	- 1
UNARY_OPERATOR	723:14	723:14	18	-
LEAF_NODE	723:14	723:14	19	-
FIELD	723:15	723:15	18	1
LEAF_NODE	723:15	723:15	19	1
LEAF_NODE	723:16	723:16	14	;
JUMP_STATEMENT	724:5	724:13	13	continue DESTINATION ;
KEYWORD	724:5	724:5	14	continue
LEAF_NODE	724:5	724:5	15	continue
LEAF_NODE	0:0	0:0	14	DESTINATION
LEAF_NODE	724:13	724:13	14	;
LEAF_NODE	725:4	725:4	12	}
EXPR_STATEMENT	726:4	729:33	10	cell = * ( ColorCells + ( ( ( ir >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH * 2 ) + ( ( ig >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH ) + ( ib >> ( B_DEPTH - C_DEPTH ) ) ) ) ;
EXPR	726:4	726:4	11	cell = * ( ColorCells + ( ( ( ir >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH * 2 ) + ( ( ig >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH ) + ( ib >> ( B_DEPTH - C_DEPTH ) ) ) )
ASSIGN	726:4	726:11	12	cell = * ( ColorCells + ( ( ( ir >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH * 2 ) + ( ( ig >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH ) + ( ib >> ( B_DEPTH - C_DEPTH ) ) ) )
LVAL	726:4	726:4	13	cell
FIELD	726:4	726:4	14	cell
LEAF_NODE	726:4	726:4	15	cell
ASSIGN_OP	726:9	726:9	13	=
LEAF_NODE	726:9	726:9	14	=
RVAL	726:11	726:11	13	* ( ColorCells + ( ( ( ir >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH * 2 ) + ( ( ig >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH ) + ( ib >> ( B_DEPTH - C_DEPTH ) ) ) )
UNARY_EXPR	726:11	729:32	14	* ( ColorCells + ( ( ( ir >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH * 2 ) + ( ( ig >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH ) + ( ib >> ( B_DEPTH - C_DEPTH ) ) ) )
UNARY_OPERATOR	726:11	726:11	15	*
LEAF_NODE	726:11	726:11	16	*
LEAF_NODE	726:12	726:12	15	(
FIELD	726:13	726:13	15	ColorCells
LEAF_NODE	726:13	726:13	16	ColorCells
LEAF_NODE	726:24	726:24	15	+
LEAF_NODE	727:8	727:8	15	(
LEAF_NODE	727:9	727:9	15	(
LEAF_NODE	727:10	727:10	15	(
FIELD	727:11	727:11	15	ir
LEAF_NODE	727:11	727:11	16	ir
LEAF_NODE	727:13	727:13	15	>>
LEAF_NODE	727:15	727:15	15	(
FIELD	727:16	727:16	15	B_DEPTH
LEAF_NODE	727:16	727:16	16	B_DEPTH
LEAF_NODE	727:23	727:23	15	-
FIELD	727:24	727:24	15	C_DEPTH
LEAF_NODE	727:24	727:24	16	C_DEPTH
LEAF_NODE	727:31	727:31	15	)
LEAF_NODE	727:32	727:32	15	)
LEAF_NODE	727:34	727:34	15	<<
FIELD	727:37	727:37	15	C_DEPTH
LEAF_NODE	727:37	727:37	16	C_DEPTH
LEAF_NODE	727:44	727:44	15	*
FIELD	727:45	727:45	15	2
LEAF_NODE	727:45	727:45	16	2
LEAF_NODE	727:46	727:46	15	)
LEAF_NODE	727:48	727:48	15	+
LEAF_NODE	728:8	728:8	15	(
LEAF_NODE	728:9	728:9	15	(
FIELD	728:10	728:10	15	ig
LEAF_NODE	728:10	728:10	16	ig
LEAF_NODE	728:12	728:12	15	>>
LEAF_NODE	728:14	728:14	15	(
FIELD	728:15	728:15	15	B_DEPTH
LEAF_NODE	728:15	728:15	16	B_DEPTH
LEAF_NODE	728:22	728:22	15	-
FIELD	728:23	728:23	15	C_DEPTH
LEAF_NODE	728:23	728:23	16	C_DEPTH
LEAF_NODE	728:30	728:30	15	)
LEAF_NODE	728:31	728:31	15	)
LEAF_NODE	728:33	728:33	15	<<
FIELD	728:36	728:36	15	C_DEPTH
LEAF_NODE	728:36	728:36	16	C_DEPTH
LEAF_NODE	728:43	728:43	15	)
LEAF_NODE	728:45	728:45	15	+
LEAF_NODE	729:8	729:8	15	(
FIELD	729:9	729:9	15	ib
LEAF_NODE	729:9	729:9	16	ib
LEAF_NODE	729:11	729:11	15	>>
LEAF_NODE	729:13	729:13	15	(
FIELD	729:14	729:14	15	B_DEPTH
LEAF_NODE	729:14	729:14	16	B_DEPTH
LEAF_NODE	729:21	729:21	15	-
FIELD	729:22	729:22	15	C_DEPTH
LEAF_NODE	729:22	729:22	16	C_DEPTH
LEAF_NODE	729:29	729:29	15	)
LEAF_NODE	729:30	729:30	15	)
LEAF_NODE	729:31	729:31	15	)
LEAF_NODE	729:32	729:32	15	)
LEAF_NODE	729:33	729:33	11	;
SELECTION	730:4	731:5	10	
KEYWORD	730:4	730:4	11	if
LEAF_NODE	730:4	730:4	12	if
LEAF_NODE	730:7	730:7	11	(
CONDITION	730:8	730:8	11	cell == NULL
EXPR	730:8	730:16	12	cell == NULL
FIELD	730:8	730:8	13	cell
LEAF_NODE	730:8	730:8	14	cell
EQ_OPERATOR	730:13	730:13	13	==
LEAF_NODE	730:13	730:13	14	==
FIELD	730:16	730:16	13	NULL
LEAF_NODE	730:16	730:16	14	NULL
LEAF_NODE	730:21	730:21	11	)
STATEMENTS	731:5	731:5	11	
EXPR_STATEMENT	731:5	734:27	12	cell = create_colorcell ( ir << COLOR_SHIFT , ig << COLOR_SHIFT , ib << COLOR_SHIFT ) ;
EXPR	731:5	731:5	13	cell = create_colorcell ( ir << COLOR_SHIFT , ig << COLOR_SHIFT , ib << COLOR_SHIFT )
ASSIGN	731:5	731:12	14	cell = create_colorcell ( ir << COLOR_SHIFT , ig << COLOR_SHIFT , ib << COLOR_SHIFT )
LVAL	731:5	731:5	15	cell
FIELD	731:5	731:5	16	cell
LEAF_NODE	731:5	731:5	17	cell
ASSIGN_OP	731:10	731:10	15	=
LEAF_NODE	731:10	731:10	16	=
RVAL	731:12	731:12	15	create_colorcell ( ir << COLOR_SHIFT , ig << COLOR_SHIFT , ib << COLOR_SHIFT )
FUNCTION_CALL	731:12	734:26	16	create_colorcell ( ir << COLOR_SHIFT , ig << COLOR_SHIFT , ib << COLOR_SHIFT )
CALLEE	731:12	731:12	17	create_colorcell
LEAF_NODE	731:12	731:12	18	create_colorcell
LEAF_NODE	731:28	731:28	17	(
ARGUMENT	732:9	732:15	17	ir << COLOR_SHIFT
FIELD	732:9	732:9	18	ir
LEAF_NODE	732:9	732:9	19	ir
LEAF_NODE	732:12	732:12	18	<<
FIELD	732:15	732:15	18	COLOR_SHIFT
LEAF_NODE	732:15	732:15	19	COLOR_SHIFT
LEAF_NODE	732:26	732:26	17	,
ARGUMENT	733:9	733:15	17	ig << COLOR_SHIFT
FIELD	733:9	733:9	18	ig
LEAF_NODE	733:9	733:9	19	ig
LEAF_NODE	733:12	733:12	18	<<
FIELD	733:15	733:15	18	COLOR_SHIFT
LEAF_NODE	733:15	733:15	19	COLOR_SHIFT
LEAF_NODE	733:26	733:26	17	,
ARGUMENT	734:9	734:15	17	ib << COLOR_SHIFT
FIELD	734:9	734:9	18	ib
LEAF_NODE	734:9	734:9	19	ib
LEAF_NODE	734:12	734:12	18	<<
FIELD	734:15	734:15	18	COLOR_SHIFT
LEAF_NODE	734:15	734:15	19	COLOR_SHIFT
LEAF_NODE	734:26	734:26	17	)
LEAF_NODE	734:27	734:27	13	;
EXPR_STATEMENT	735:4	735:18	10	dist = 9999999 ;
EXPR	735:4	735:4	11	dist = 9999999
ASSIGN	735:4	735:11	12	dist = 9999999
LVAL	735:4	735:4	13	dist
FIELD	735:4	735:4	14	dist
LEAF_NODE	735:4	735:4	15	dist
ASSIGN_OP	735:9	735:9	13	=
LEAF_NODE	735:9	735:9	14	=
RVAL	735:11	735:11	13	9999999
FIELD	735:11	735:11	14	9999999
LEAF_NODE	735:11	735:11	15	9999999
LEAF_NODE	735:18	735:18	11	;
ITERATION	736:4	737:41	10	
KEYWORD	736:4	736:4	11	for
LEAF_NODE	736:4	736:4	12	for
LEAF_NODE	736:8	736:8	11	(
FOR_INIT	736:9	736:14	11	i = 0 ;
EXPR	736:9	736:9	12	i = 0
ASSIGN	736:9	736:13	13	i = 0
LVAL	736:9	736:9	14	i
FIELD	736:9	736:9	15	i
LEAF_NODE	736:9	736:9	16	i
ASSIGN_OP	736:11	736:11	14	=
LEAF_NODE	736:11	736:11	15	=
RVAL	736:13	736:13	14	0
FIELD	736:13	736:13	15	0
LEAF_NODE	736:13	736:13	16	0
LEAF_NODE	736:14	736:14	12	;
CONDITION	736:16	736:16	11	i < cell -> num_ents && dist > cell -> entries [ i ] [ 1 ]
EXPR	736:16	736:16	12	i < cell -> num_ents && dist > cell -> entries [ i ] [ 1 ]
AND	736:16	737:8	13	i < cell -> num_ents && dist > cell -> entries [ i ] [ 1 ]
EXPR	736:16	736:20	14	i < cell -> num_ents
FIELD	736:16	736:16	15	i
LEAF_NODE	736:16	736:16	16	i
REL_OPERATOR	736:18	736:18	15	<
LEAF_NODE	736:18	736:18	16	<
FIELD	736:20	736:26	15	cell -> num_ents
LEAF_NODE	736:20	736:20	16	cell
LEAF_NODE	736:24	736:24	16	->
LEAF_NODE	736:26	736:26	16	num_ents
LEAF_NODE	736:35	736:35	14	&&
EXPR	737:8	737:15	14	dist > cell -> entries [ i ] [ 1 ]
FIELD	737:8	737:8	15	dist
LEAF_NODE	737:8	737:8	16	dist
REL_OPERATOR	737:13	737:13	15	>
LEAF_NODE	737:13	737:13	16	>
FIELD	737:15	737:33	15	cell -> entries [ i ] [ 1 ]
LEAF_NODE	737:15	737:15	16	cell
LEAF_NODE	737:19	737:19	16	->
LEAF_NODE	737:21	737:21	16	entries
LEAF_NODE	737:28	737:28	16	[
EXPR	737:29	737:29	16	i
FIELD	737:29	737:29	17	i
LEAF_NODE	737:29	737:29	18	i
LEAF_NODE	737:30	737:30	16	]
LEAF_NODE	737:31	737:31	16	[
EXPR	737:32	737:32	16	1
FIELD	737:32	737:32	17	1
LEAF_NODE	737:32	737:32	18	1
LEAF_NODE	737:33	737:33	16	]
LEAF_NODE	737:34	737:34	11	;
FOR_EXPR	737:36	737:36	11	++ i
EXPR	737:36	737:38	12	++ i
LEAF_NODE	737:36	737:36	13	++
FIELD	737:38	737:38	13	i
LEAF_NODE	737:38	737:38	14	i
LEAF_NODE	737:39	737:39	11	)
STATEMENTS	737:41	749:4	11	
LEAF_NODE	737:41	737:41	12	{
STATEMENTS	738:5	745:5	12	
EXPR_STATEMENT	738:5	738:28	13	j = cell -> entries [ i ] [ 0 ] ;
EXPR	738:5	738:5	14	j = cell -> entries [ i ] [ 0 ]
ASSIGN	738:5	738:9	15	j = cell -> entries [ i ] [ 0 ]
LVAL	738:5	738:5	16	j
FIELD	738:5	738:5	17	j
LEAF_NODE	738:5	738:5	18	j
ASSIGN_OP	738:7	738:7	16	=
LEAF_NODE	738:7	738:7	17	=
RVAL	738:9	738:9	16	cell -> entries [ i ] [ 0 ]
FIELD	738:9	738:27	17	cell -> entries [ i ] [ 0 ]
LEAF_NODE	738:9	738:9	18	cell
LEAF_NODE	738:13	738:13	18	->
LEAF_NODE	738:15	738:15	18	entries
LEAF_NODE	738:22	738:22	18	[
EXPR	738:23	738:23	18	i
FIELD	738:23	738:23	19	i
LEAF_NODE	738:23	738:23	20	i
LEAF_NODE	738:24	738:24	18	]
LEAF_NODE	738:25	738:25	18	[
EXPR	738:26	738:26	18	0
FIELD	738:26	738:26	19	0
LEAF_NODE	738:26	738:26	20	0
LEAF_NODE	738:27	738:27	18	]
LEAF_NODE	738:28	738:28	14	;
EXPR_STATEMENT	739:5	739:37	13	d2 = rm [ j ] - ( ir << COLOR_SHIFT ) ;
EXPR	739:5	739:5	14	d2 = rm [ j ] - ( ir << COLOR_SHIFT )
ASSIGN	739:5	739:10	15	d2 = rm [ j ] - ( ir << COLOR_SHIFT )
LVAL	739:5	739:5	16	d2
FIELD	739:5	739:5	17	d2
LEAF_NODE	739:5	739:5	18	d2
ASSIGN_OP	739:8	739:8	16	=
LEAF_NODE	739:8	739:8	17	=
RVAL	739:10	739:36	16	rm [ j ] - ( ir << COLOR_SHIFT )
FIELD	739:10	739:14	17	rm [ j ]
LEAF_NODE	739:10	739:10	18	rm
LEAF_NODE	739:12	739:12	18	[
EXPR	739:13	739:13	18	j
FIELD	739:13	739:13	19	j
LEAF_NODE	739:13	739:13	20	j
LEAF_NODE	739:14	739:14	18	]
LEAF_NODE	739:16	739:16	17	-
LEAF_NODE	739:18	739:18	17	(
FIELD	739:19	739:19	17	ir
LEAF_NODE	739:19	739:19	18	ir
LEAF_NODE	739:22	739:22	17	<<
FIELD	739:25	739:25	17	COLOR_SHIFT
LEAF_NODE	739:25	739:25	18	COLOR_SHIFT
LEAF_NODE	739:36	739:36	17	)
LEAF_NODE	739:37	739:37	14	;
EXPR_STATEMENT	740:5	740:13	13	d2 *= d2 ;
EXPR	740:5	740:5	14	d2 *= d2
ASSIGN	740:5	740:11	15	d2 *= d2
LVAL	740:5	740:5	16	d2
FIELD	740:5	740:5	17	d2
LEAF_NODE	740:5	740:5	18	d2
ASSIGN_OP	740:8	740:8	16	*=
LEAF_NODE	740:8	740:8	17	*=
RVAL	740:11	740:11	16	d2
FIELD	740:11	740:11	17	d2
LEAF_NODE	740:11	740:11	18	d2
LEAF_NODE	740:13	740:13	14	;
EXPR_STATEMENT	741:5	741:38	13	tmp = gm [ j ] - ( ig << COLOR_SHIFT ) ;
EXPR	741:5	741:5	14	tmp = gm [ j ] - ( ig << COLOR_SHIFT )
ASSIGN	741:5	741:11	15	tmp = gm [ j ] - ( ig << COLOR_SHIFT )
LVAL	741:5	741:5	16	tmp
FIELD	741:5	741:5	17	tmp
LEAF_NODE	741:5	741:5	18	tmp
ASSIGN_OP	741:9	741:9	16	=
LEAF_NODE	741:9	741:9	17	=
RVAL	741:11	741:37	16	gm [ j ] - ( ig << COLOR_SHIFT )
FIELD	741:11	741:15	17	gm [ j ]
LEAF_NODE	741:11	741:11	18	gm
LEAF_NODE	741:13	741:13	18	[
EXPR	741:14	741:14	18	j
FIELD	741:14	741:14	19	j
LEAF_NODE	741:14	741:14	20	j
LEAF_NODE	741:15	741:15	18	]
LEAF_NODE	741:17	741:17	17	-
LEAF_NODE	741:19	741:19	17	(
FIELD	741:20	741:20	17	ig
LEAF_NODE	741:20	741:20	18	ig
LEAF_NODE	741:23	741:23	17	<<
FIELD	741:26	741:26	17	COLOR_SHIFT
LEAF_NODE	741:26	741:26	18	COLOR_SHIFT
LEAF_NODE	741:37	741:37	17	)
LEAF_NODE	741:38	741:38	14	;
EXPR_STATEMENT	742:5	742:18	13	d2 += tmp * tmp ;
EXPR	742:5	742:5	14	d2 += tmp * tmp
ASSIGN	742:5	742:11	15	d2 += tmp * tmp
LVAL	742:5	742:5	16	d2
FIELD	742:5	742:5	17	d2
LEAF_NODE	742:5	742:5	18	d2
ASSIGN_OP	742:8	742:8	16	+=
LEAF_NODE	742:8	742:8	17	+=
RVAL	742:11	742:15	16	tmp * tmp
FIELD	742:11	742:11	17	tmp
LEAF_NODE	742:11	742:11	18	tmp
LEAF_NODE	742:14	742:14	17	*
FIELD	742:15	742:15	17	tmp
LEAF_NODE	742:15	742:15	18	tmp
LEAF_NODE	742:18	742:18	14	;
EXPR_STATEMENT	743:5	743:38	13	tmp = bm [ j ] - ( ib << COLOR_SHIFT ) ;
EXPR	743:5	743:5	14	tmp = bm [ j ] - ( ib << COLOR_SHIFT )
ASSIGN	743:5	743:11	15	tmp = bm [ j ] - ( ib << COLOR_SHIFT )
LVAL	743:5	743:5	16	tmp
FIELD	743:5	743:5	17	tmp
LEAF_NODE	743:5	743:5	18	tmp
ASSIGN_OP	743:9	743:9	16	=
LEAF_NODE	743:9	743:9	17	=
RVAL	743:11	743:37	16	bm [ j ] - ( ib << COLOR_SHIFT )
FIELD	743:11	743:15	17	bm [ j ]
LEAF_NODE	743:11	743:11	18	bm
LEAF_NODE	743:13	743:13	18	[
EXPR	743:14	743:14	18	j
FIELD	743:14	743:14	19	j
LEAF_NODE	743:14	743:14	20	j
LEAF_NODE	743:15	743:15	18	]
LEAF_NODE	743:17	743:17	17	-
LEAF_NODE	743:19	743:19	17	(
FIELD	743:20	743:20	17	ib
LEAF_NODE	743:20	743:20	18	ib
LEAF_NODE	743:23	743:23	17	<<
FIELD	743:26	743:26	17	COLOR_SHIFT
LEAF_NODE	743:26	743:26	18	COLOR_SHIFT
LEAF_NODE	743:37	743:37	17	)
LEAF_NODE	743:38	743:38	14	;
EXPR_STATEMENT	744:5	744:18	13	d2 += tmp * tmp ;
EXPR	744:5	744:5	14	d2 += tmp * tmp
ASSIGN	744:5	744:11	15	d2 += tmp * tmp
LVAL	744:5	744:5	16	d2
FIELD	744:5	744:5	17	d2
LEAF_NODE	744:5	744:5	18	d2
ASSIGN_OP	744:8	744:8	16	+=
LEAF_NODE	744:8	744:8	17	+=
RVAL	744:11	744:15	16	tmp * tmp
FIELD	744:11	744:11	17	tmp
LEAF_NODE	744:11	744:11	18	tmp
LEAF_NODE	744:14	744:14	17	*
FIELD	744:15	744:15	17	tmp
LEAF_NODE	744:15	744:15	18	tmp
LEAF_NODE	744:18	744:18	14	;
SELECTION	745:5	745:20	13	
KEYWORD	745:5	745:5	14	if
LEAF_NODE	745:5	745:5	15	if
LEAF_NODE	745:8	745:8	14	(
CONDITION	745:9	745:9	14	d2 < dist
EXPR	745:9	745:14	15	d2 < dist
FIELD	745:9	745:9	16	d2
LEAF_NODE	745:9	745:9	17	d2
REL_OPERATOR	745:12	745:12	16	<
LEAF_NODE	745:12	745:12	17	<
FIELD	745:14	745:14	16	dist
LEAF_NODE	745:14	745:14	17	dist
LEAF_NODE	745:18	745:18	14	)
STATEMENTS	745:20	748:5	14	
LEAF_NODE	745:20	745:20	15	{
STATEMENTS	746:6	747:6	15	
EXPR_STATEMENT	746:6	746:15	16	dist = d2 ;
EXPR	746:6	746:6	17	dist = d2
ASSIGN	746:6	746:13	18	dist = d2
LVAL	746:6	746:6	19	dist
FIELD	746:6	746:6	20	dist
LEAF_NODE	746:6	746:6	21	dist
ASSIGN_OP	746:11	746:11	19	=
LEAF_NODE	746:11	746:11	20	=
RVAL	746:13	746:13	19	d2
FIELD	746:13	746:13	20	d2
LEAF_NODE	746:13	746:13	21	d2
LEAF_NODE	746:15	746:15	17	;
EXPR_STATEMENT	747:6	747:16	16	* histp = j ;
EXPR	747:6	747:6	17	* histp = j
ASSIGN	747:6	747:15	18	* histp = j
LVAL	747:6	747:6	19	* histp
UNARY_EXPR	747:6	747:7	20	* histp
UNARY_OPERATOR	747:6	747:6	21	*
LEAF_NODE	747:6	747:6	22	*
FIELD	747:7	747:7	21	histp
LEAF_NODE	747:7	747:7	22	histp
ASSIGN_OP	747:13	747:13	19	=
LEAF_NODE	747:13	747:13	20	=
RVAL	747:15	747:15	19	j
FIELD	747:15	747:15	20	j
LEAF_NODE	747:15	747:15	21	j
LEAF_NODE	747:16	747:16	17	;
LEAF_NODE	748:5	748:5	15	}
LEAF_NODE	749:4	749:4	12	}
LEAF_NODE	750:3	750:3	9	}
LEAF_NODE	751:0	751:0	2	}
FUNCTION_DEF	758:0	784:0	1	
RETURN_TYPE	758:0	758:7	2	static void
LEAF_NODE	758:0	758:0	3	static
TYPE_NAME	758:7	758:7	3	void
LEAF_NODE	758:7	758:7	4	void
FUNCTION_NAME	759:0	759:0	2	quant
LEAF_NODE	759:0	759:0	3	quant
PARAMETER_LIST	759:5	759:25	2	( TIFF * in , TIFF * out )
LEAF_NODE	759:5	759:5	3	(
PARAMETER_DECL	759:6	759:12	3	TIFF * in
TYPE	759:6	759:10	4	TIFF *
TYPE_NAME	759:6	759:6	5	TIFF
LEAF_NODE	759:6	759:6	6	TIFF
POINTER	759:10	759:10	5	*
LEAF_NODE	759:10	759:10	6	*
NAME	759:12	759:12	4	in
LEAF_NODE	759:12	759:12	5	in
LEAF_NODE	759:14	759:14	3	,
PARAMETER_DECL	759:16	759:22	3	TIFF * out
TYPE	759:16	759:20	4	TIFF *
TYPE_NAME	759:16	759:16	5	TIFF
LEAF_NODE	759:16	759:16	6	TIFF
POINTER	759:20	759:20	5	*
LEAF_NODE	759:20	759:20	6	*
NAME	759:22	759:22	4	out
LEAF_NODE	759:22	759:22	5	out
LEAF_NODE	759:25	759:25	3	)
LEAF_NODE	760:0	760:0	2	{
STATEMENTS	761:1	783:1	2	
SIMPLE_DECL	761:1	761:35	3	unsigned char * outline , unsigned char * inputline ;
INIT_DECL_LIST	761:1	761:1	4	unsigned char * outline , unsigned char * inputline
VAR_DECL	761:1	761:16	5	unsigned char * outline
TYPE	761:1	761:15	6	unsigned char *
TYPE_NAME	761:1	761:10	7	unsigned char
LEAF_NODE	761:1	761:1	8	unsigned
LEAF_NODE	761:10	761:10	8	char
POINTER	761:15	761:15	7	*
LEAF_NODE	761:15	761:15	8	*
NAME	761:16	761:16	6	outline
LEAF_NODE	761:16	761:16	7	outline
LEAF_NODE	761:23	761:23	5	,
VAR_DECL	761:1	761:26	5	unsigned char * inputline
TYPE	761:1	761:25	6	unsigned char *
TYPE_NAME	761:1	761:10	7	unsigned char
LEAF_NODE	761:1	761:1	8	unsigned
LEAF_NODE	761:10	761:10	8	char
POINTER	761:25	761:25	7	*
LEAF_NODE	761:25	761:25	8	*
NAME	761:26	761:26	6	inputline
LEAF_NODE	761:26	761:26	7	inputline
LEAF_NODE	761:35	761:35	4	;
LEAF_NODE	762:1	762:1	3	register
SIMPLE_DECL	762:10	762:39	3	unsigned char * outptr , unsigned char * inptr ;
INIT_DECL_LIST	762:10	762:10	4	unsigned char * outptr , unsigned char * inptr
VAR_DECL	762:10	762:25	5	unsigned char * outptr
TYPE	762:10	762:24	6	unsigned char *
TYPE_NAME	762:10	762:19	7	unsigned char
LEAF_NODE	762:10	762:10	8	unsigned
LEAF_NODE	762:19	762:19	8	char
POINTER	762:24	762:24	7	*
LEAF_NODE	762:24	762:24	8	*
NAME	762:25	762:25	6	outptr
LEAF_NODE	762:25	762:25	7	outptr
LEAF_NODE	762:31	762:31	5	,
VAR_DECL	762:10	762:34	5	unsigned char * inptr
TYPE	762:10	762:33	6	unsigned char *
TYPE_NAME	762:10	762:19	7	unsigned char
LEAF_NODE	762:10	762:10	8	unsigned
LEAF_NODE	762:19	762:19	8	char
POINTER	762:33	762:33	7	*
LEAF_NODE	762:33	762:33	8	*
NAME	762:34	762:34	6	inptr
LEAF_NODE	762:34	762:34	7	inptr
LEAF_NODE	762:39	762:39	4	;
LEAF_NODE	763:1	763:1	3	register
SIMPLE_DECL	763:10	763:21	3	uint32 i , uint32 j ;
INIT_DECL_LIST	763:10	763:10	4	uint32 i , uint32 j
VAR_DECL	763:10	763:17	5	uint32 i
TYPE	763:10	763:10	6	uint32
TYPE_NAME	763:10	763:10	7	uint32
LEAF_NODE	763:10	763:10	8	uint32
NAME	763:17	763:17	6	i
LEAF_NODE	763:17	763:17	7	i
LEAF_NODE	763:18	763:18	5	,
VAR_DECL	763:10	763:20	5	uint32 j
TYPE	763:10	763:10	6	uint32
TYPE_NAME	763:10	763:10	7	uint32
LEAF_NODE	763:10	763:10	8	uint32
NAME	763:20	763:20	6	j
LEAF_NODE	763:20	763:20	7	j
LEAF_NODE	763:21	763:21	4	;
LEAF_NODE	764:1	764:1	3	register
SIMPLE_DECL	764:10	764:30	3	int red , int green , int blue ;
INIT_DECL_LIST	764:10	764:10	4	int red , int green , int blue
VAR_DECL	764:10	764:14	5	int red
TYPE	764:10	764:10	6	int
TYPE_NAME	764:10	764:10	7	int
LEAF_NODE	764:10	764:10	8	int
NAME	764:14	764:14	6	red
LEAF_NODE	764:14	764:14	7	red
LEAF_NODE	764:17	764:17	5	,
INIT_DECL_LIST	764:10	764:10	5	int green , int blue
VAR_DECL	764:10	764:19	6	int green
TYPE	764:10	764:10	7	int
TYPE_NAME	764:10	764:10	8	int
LEAF_NODE	764:10	764:10	9	int
NAME	764:19	764:19	7	green
LEAF_NODE	764:19	764:19	8	green
LEAF_NODE	764:24	764:24	6	,
VAR_DECL	764:10	764:26	6	int blue
TYPE	764:10	764:10	7	int
TYPE_NAME	764:10	764:10	8	int
LEAF_NODE	764:10	764:10	9	int
NAME	764:26	764:26	7	blue
LEAF_NODE	764:26	764:26	8	blue
LEAF_NODE	764:30	764:30	4	;
EXPR_STATEMENT	766:1	766:63	3	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) ) ;
EXPR	766:1	766:1	4	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
ASSIGN	766:1	766:13	5	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LVAL	766:1	766:1	6	inputline
FIELD	766:1	766:1	7	inputline
LEAF_NODE	766:1	766:1	8	inputline
ASSIGN_OP	766:11	766:11	6	=
LEAF_NODE	766:11	766:11	7	=
RVAL	766:13	766:30	6	( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LEAF_NODE	766:13	766:13	7	(
TYPE_NAME	766:14	766:23	7	unsigned char
LEAF_NODE	766:14	766:14	8	unsigned
LEAF_NODE	766:23	766:23	8	char
LEAF_NODE	766:28	766:28	7	*
LEAF_NODE	766:29	766:29	7	)
FUNCTION_CALL	766:30	766:62	7	_TIFFmalloc ( TIFFScanlineSize ( in ) )
CALLEE	766:30	766:30	8	_TIFFmalloc
LEAF_NODE	766:30	766:30	9	_TIFFmalloc
LEAF_NODE	766:41	766:41	8	(
ARGUMENT	766:42	766:42	8	TIFFScanlineSize ( in )
FUNCTION_CALL	766:42	766:61	9	TIFFScanlineSize ( in )
CALLEE	766:42	766:42	10	TIFFScanlineSize
LEAF_NODE	766:42	766:42	11	TIFFScanlineSize
LEAF_NODE	766:58	766:58	10	(
ARGUMENT	766:59	766:59	10	in
FIELD	766:59	766:59	11	in
LEAF_NODE	766:59	766:59	12	in
LEAF_NODE	766:61	766:61	10	)
LEAF_NODE	766:62	766:62	8	)
LEAF_NODE	766:63	766:63	4	;
EXPR_STATEMENT	767:1	767:51	3	outline = ( unsigned char * ) _TIFFmalloc ( imagewidth ) ;
EXPR	767:1	767:1	4	outline = ( unsigned char * ) _TIFFmalloc ( imagewidth )
ASSIGN	767:1	767:11	5	outline = ( unsigned char * ) _TIFFmalloc ( imagewidth )
LVAL	767:1	767:1	6	outline
FIELD	767:1	767:1	7	outline
LEAF_NODE	767:1	767:1	8	outline
ASSIGN_OP	767:9	767:9	6	=
LEAF_NODE	767:9	767:9	7	=
RVAL	767:11	767:28	6	( unsigned char * ) _TIFFmalloc ( imagewidth )
LEAF_NODE	767:11	767:11	7	(
TYPE_NAME	767:12	767:21	7	unsigned char
LEAF_NODE	767:12	767:12	8	unsigned
LEAF_NODE	767:21	767:21	8	char
LEAF_NODE	767:26	767:26	7	*
LEAF_NODE	767:27	767:27	7	)
FUNCTION_CALL	767:28	767:50	7	_TIFFmalloc ( imagewidth )
CALLEE	767:28	767:28	8	_TIFFmalloc
LEAF_NODE	767:28	767:28	9	_TIFFmalloc
LEAF_NODE	767:39	767:39	8	(
ARGUMENT	767:40	767:40	8	imagewidth
FIELD	767:40	767:40	9	imagewidth
LEAF_NODE	767:40	767:40	10	imagewidth
LEAF_NODE	767:50	767:50	8	)
LEAF_NODE	767:51	767:51	4	;
ITERATION	768:1	768:35	3	
KEYWORD	768:1	768:1	4	for
LEAF_NODE	768:1	768:1	5	for
LEAF_NODE	768:5	768:5	4	(
FOR_INIT	768:6	768:11	4	i = 0 ;
EXPR	768:6	768:6	5	i = 0
ASSIGN	768:6	768:10	6	i = 0
LVAL	768:6	768:6	7	i
FIELD	768:6	768:6	8	i
LEAF_NODE	768:6	768:6	9	i
ASSIGN_OP	768:8	768:8	7	=
LEAF_NODE	768:8	768:8	8	=
RVAL	768:10	768:10	7	0
FIELD	768:10	768:10	8	0
LEAF_NODE	768:10	768:10	9	0
LEAF_NODE	768:11	768:11	5	;
CONDITION	768:13	768:13	4	i < imagelength
EXPR	768:13	768:17	5	i < imagelength
FIELD	768:13	768:13	6	i
LEAF_NODE	768:13	768:13	7	i
REL_OPERATOR	768:15	768:15	6	<
LEAF_NODE	768:15	768:15	7	<
FIELD	768:17	768:17	6	imagelength
LEAF_NODE	768:17	768:17	7	imagelength
LEAF_NODE	768:28	768:28	4	;
FOR_EXPR	768:30	768:30	4	i ++
EXPR	768:30	768:30	5	i ++
FIELD	768:30	768:31	6	i ++
LEAF_NODE	768:30	768:30	7	i
LEAF_NODE	768:31	768:31	7	++
LEAF_NODE	768:33	768:33	4	)
STATEMENTS	768:35	781:1	4	
LEAF_NODE	768:35	768:35	5	{
STATEMENTS	769:2	779:2	5	
SELECTION	769:2	770:3	6	
KEYWORD	769:2	769:2	7	if
LEAF_NODE	769:2	769:2	8	if
LEAF_NODE	769:5	769:5	7	(
CONDITION	769:6	769:6	7	TIFFReadScanline ( in , inputline , i , 0 ) <= 0
EXPR	769:6	769:47	8	TIFFReadScanline ( in , inputline , i , 0 ) <= 0
FUNCTION_CALL	769:6	769:42	9	TIFFReadScanline ( in , inputline , i , 0 )
CALLEE	769:6	769:6	10	TIFFReadScanline
LEAF_NODE	769:6	769:6	11	TIFFReadScanline
LEAF_NODE	769:22	769:22	10	(
ARGUMENT	769:23	769:23	10	in
FIELD	769:23	769:23	11	in
LEAF_NODE	769:23	769:23	12	in
LEAF_NODE	769:25	769:25	10	,
ARGUMENT	769:27	769:27	10	inputline
FIELD	769:27	769:27	11	inputline
LEAF_NODE	769:27	769:27	12	inputline
LEAF_NODE	769:36	769:36	10	,
ARGUMENT	769:38	769:38	10	i
FIELD	769:38	769:38	11	i
LEAF_NODE	769:38	769:38	12	i
LEAF_NODE	769:39	769:39	10	,
ARGUMENT	769:41	769:41	10	0
FIELD	769:41	769:41	11	0
LEAF_NODE	769:41	769:41	12	0
LEAF_NODE	769:42	769:42	10	)
REL_OPERATOR	769:44	769:44	9	<=
LEAF_NODE	769:44	769:44	10	<=
FIELD	769:47	769:47	9	0
LEAF_NODE	769:47	769:47	10	0
LEAF_NODE	769:48	769:48	7	)
STATEMENTS	770:3	770:3	7	
JUMP_STATEMENT	770:3	770:8	8	break DESTINATION ;
KEYWORD	770:3	770:3	9	break
LEAF_NODE	770:3	770:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	770:8	770:8	9	;
EXPR_STATEMENT	771:2	771:19	6	inptr = inputline ;
EXPR	771:2	771:2	7	inptr = inputline
ASSIGN	771:2	771:10	8	inptr = inputline
LVAL	771:2	771:2	9	inptr
FIELD	771:2	771:2	10	inptr
LEAF_NODE	771:2	771:2	11	inptr
ASSIGN_OP	771:8	771:8	9	=
LEAF_NODE	771:8	771:8	10	=
RVAL	771:10	771:10	9	inputline
FIELD	771:10	771:10	10	inputline
LEAF_NODE	771:10	771:10	11	inputline
LEAF_NODE	771:19	771:19	7	;
EXPR_STATEMENT	772:2	772:18	6	outptr = outline ;
EXPR	772:2	772:2	7	outptr = outline
ASSIGN	772:2	772:11	8	outptr = outline
LVAL	772:2	772:2	9	outptr
FIELD	772:2	772:2	10	outptr
LEAF_NODE	772:2	772:2	11	outptr
ASSIGN_OP	772:9	772:9	9	=
LEAF_NODE	772:9	772:9	10	=
RVAL	772:11	772:11	9	outline
FIELD	772:11	772:11	10	outline
LEAF_NODE	772:11	772:11	11	outline
LEAF_NODE	772:18	772:18	7	;
ITERATION	773:2	773:35	6	
KEYWORD	773:2	773:2	7	for
LEAF_NODE	773:2	773:2	8	for
LEAF_NODE	773:6	773:6	7	(
FOR_INIT	773:7	773:12	7	j = 0 ;
EXPR	773:7	773:7	8	j = 0
ASSIGN	773:7	773:11	9	j = 0
LVAL	773:7	773:7	10	j
FIELD	773:7	773:7	11	j
LEAF_NODE	773:7	773:7	12	j
ASSIGN_OP	773:9	773:9	10	=
LEAF_NODE	773:9	773:9	11	=
RVAL	773:11	773:11	10	0
FIELD	773:11	773:11	11	0
LEAF_NODE	773:11	773:11	12	0
LEAF_NODE	773:12	773:12	8	;
CONDITION	773:14	773:14	7	j < imagewidth
EXPR	773:14	773:18	8	j < imagewidth
FIELD	773:14	773:14	9	j
LEAF_NODE	773:14	773:14	10	j
REL_OPERATOR	773:16	773:16	9	<
LEAF_NODE	773:16	773:16	10	<
FIELD	773:18	773:18	9	imagewidth
LEAF_NODE	773:18	773:18	10	imagewidth
LEAF_NODE	773:28	773:28	7	;
FOR_EXPR	773:30	773:30	7	j ++
EXPR	773:30	773:30	8	j ++
FIELD	773:30	773:31	9	j ++
LEAF_NODE	773:30	773:30	10	j
LEAF_NODE	773:31	773:31	10	++
LEAF_NODE	773:33	773:33	7	)
STATEMENTS	773:35	778:2	7	
LEAF_NODE	773:35	773:35	8	{
STATEMENTS	774:3	777:3	8	
EXPR_STATEMENT	774:3	774:32	9	red = * inptr ++ >> COLOR_SHIFT ;
EXPR	774:3	774:3	10	red = * inptr ++ >> COLOR_SHIFT
ASSIGN	774:3	774:9	11	red = * inptr ++ >> COLOR_SHIFT
LVAL	774:3	774:3	12	red
FIELD	774:3	774:3	13	red
LEAF_NODE	774:3	774:3	14	red
ASSIGN_OP	774:7	774:7	12	=
LEAF_NODE	774:7	774:7	13	=
RVAL	774:9	774:21	12	* inptr ++ >> COLOR_SHIFT
UNARY_EXPR	774:9	774:10	13	* inptr ++
UNARY_OPERATOR	774:9	774:9	14	*
LEAF_NODE	774:9	774:9	15	*
FIELD	774:10	774:15	14	inptr ++
LEAF_NODE	774:10	774:10	15	inptr
LEAF_NODE	774:15	774:15	15	++
LEAF_NODE	774:18	774:18	13	>>
FIELD	774:21	774:21	13	COLOR_SHIFT
LEAF_NODE	774:21	774:21	14	COLOR_SHIFT
LEAF_NODE	774:32	774:32	10	;
EXPR_STATEMENT	775:3	775:34	9	green = * inptr ++ >> COLOR_SHIFT ;
EXPR	775:3	775:3	10	green = * inptr ++ >> COLOR_SHIFT
ASSIGN	775:3	775:11	11	green = * inptr ++ >> COLOR_SHIFT
LVAL	775:3	775:3	12	green
FIELD	775:3	775:3	13	green
LEAF_NODE	775:3	775:3	14	green
ASSIGN_OP	775:9	775:9	12	=
LEAF_NODE	775:9	775:9	13	=
RVAL	775:11	775:23	12	* inptr ++ >> COLOR_SHIFT
UNARY_EXPR	775:11	775:12	13	* inptr ++
UNARY_OPERATOR	775:11	775:11	14	*
LEAF_NODE	775:11	775:11	15	*
FIELD	775:12	775:17	14	inptr ++
LEAF_NODE	775:12	775:12	15	inptr
LEAF_NODE	775:17	775:17	15	++
LEAF_NODE	775:20	775:20	13	>>
FIELD	775:23	775:23	13	COLOR_SHIFT
LEAF_NODE	775:23	775:23	14	COLOR_SHIFT
LEAF_NODE	775:34	775:34	10	;
EXPR_STATEMENT	776:3	776:33	9	blue = * inptr ++ >> COLOR_SHIFT ;
EXPR	776:3	776:3	10	blue = * inptr ++ >> COLOR_SHIFT
ASSIGN	776:3	776:10	11	blue = * inptr ++ >> COLOR_SHIFT
LVAL	776:3	776:3	12	blue
FIELD	776:3	776:3	13	blue
LEAF_NODE	776:3	776:3	14	blue
ASSIGN_OP	776:8	776:8	12	=
LEAF_NODE	776:8	776:8	13	=
RVAL	776:10	776:22	12	* inptr ++ >> COLOR_SHIFT
UNARY_EXPR	776:10	776:11	13	* inptr ++
UNARY_OPERATOR	776:10	776:10	14	*
LEAF_NODE	776:10	776:10	15	*
FIELD	776:11	776:16	14	inptr ++
LEAF_NODE	776:11	776:11	15	inptr
LEAF_NODE	776:16	776:16	15	++
LEAF_NODE	776:19	776:19	13	>>
FIELD	776:22	776:22	13	COLOR_SHIFT
LEAF_NODE	776:22	776:22	14	COLOR_SHIFT
LEAF_NODE	776:33	776:33	10	;
EXPR_STATEMENT	777:3	777:57	9	* outptr ++ = ( unsigned char ) histogram [ red ] [ green ] [ blue ] ;
EXPR	777:3	777:3	10	* outptr ++ = ( unsigned char ) histogram [ red ] [ green ] [ blue ]
ASSIGN	777:3	777:15	11	* outptr ++ = ( unsigned char ) histogram [ red ] [ green ] [ blue ]
LVAL	777:3	777:3	12	* outptr ++
UNARY_EXPR	777:3	777:4	13	* outptr ++
UNARY_OPERATOR	777:3	777:3	14	*
LEAF_NODE	777:3	777:3	15	*
FIELD	777:4	777:10	14	outptr ++
LEAF_NODE	777:4	777:4	15	outptr
LEAF_NODE	777:10	777:10	15	++
ASSIGN_OP	777:13	777:13	12	=
LEAF_NODE	777:13	777:13	13	=
RVAL	777:15	777:30	12	( unsigned char ) histogram [ red ] [ green ] [ blue ]
LEAF_NODE	777:15	777:15	13	(
TYPE_NAME	777:16	777:25	13	unsigned char
LEAF_NODE	777:16	777:16	14	unsigned
LEAF_NODE	777:25	777:25	14	char
LEAF_NODE	777:29	777:29	13	)
FIELD	777:30	777:56	13	histogram [ red ] [ green ] [ blue ]
LEAF_NODE	777:30	777:30	14	histogram
LEAF_NODE	777:39	777:39	14	[
EXPR	777:40	777:40	14	red
FIELD	777:40	777:40	15	red
LEAF_NODE	777:40	777:40	16	red
LEAF_NODE	777:43	777:43	14	]
LEAF_NODE	777:44	777:44	14	[
EXPR	777:45	777:45	14	green
FIELD	777:45	777:45	15	green
LEAF_NODE	777:45	777:45	16	green
LEAF_NODE	777:50	777:50	14	]
LEAF_NODE	777:51	777:51	14	[
EXPR	777:52	777:52	14	blue
FIELD	777:52	777:52	15	blue
LEAF_NODE	777:52	777:52	16	blue
LEAF_NODE	777:56	777:56	14	]
LEAF_NODE	777:57	777:57	10	;
LEAF_NODE	778:2	778:2	8	}
SELECTION	779:2	780:3	6	
KEYWORD	779:2	779:2	7	if
LEAF_NODE	779:2	779:2	8	if
LEAF_NODE	779:5	779:5	7	(
CONDITION	779:6	779:6	7	TIFFWriteScanline ( out , outline , i , 0 ) < 0
EXPR	779:6	779:46	8	TIFFWriteScanline ( out , outline , i , 0 ) < 0
FUNCTION_CALL	779:6	779:42	9	TIFFWriteScanline ( out , outline , i , 0 )
CALLEE	779:6	779:6	10	TIFFWriteScanline
LEAF_NODE	779:6	779:6	11	TIFFWriteScanline
LEAF_NODE	779:23	779:23	10	(
ARGUMENT	779:24	779:24	10	out
FIELD	779:24	779:24	11	out
LEAF_NODE	779:24	779:24	12	out
LEAF_NODE	779:27	779:27	10	,
ARGUMENT	779:29	779:29	10	outline
FIELD	779:29	779:29	11	outline
LEAF_NODE	779:29	779:29	12	outline
LEAF_NODE	779:36	779:36	10	,
ARGUMENT	779:38	779:38	10	i
FIELD	779:38	779:38	11	i
LEAF_NODE	779:38	779:38	12	i
LEAF_NODE	779:39	779:39	10	,
ARGUMENT	779:41	779:41	10	0
FIELD	779:41	779:41	11	0
LEAF_NODE	779:41	779:41	12	0
LEAF_NODE	779:42	779:42	10	)
REL_OPERATOR	779:44	779:44	9	<
LEAF_NODE	779:44	779:44	10	<
FIELD	779:46	779:46	9	0
LEAF_NODE	779:46	779:46	10	0
LEAF_NODE	779:47	779:47	7	)
STATEMENTS	780:3	780:3	7	
JUMP_STATEMENT	780:3	780:8	8	break DESTINATION ;
KEYWORD	780:3	780:3	9	break
LEAF_NODE	780:3	780:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	780:8	780:8	9	;
LEAF_NODE	781:1	781:1	5	}
EXPR_STATEMENT	782:1	782:21	3	_TIFFfree ( inputline ) ;
EXPR	782:1	782:1	4	_TIFFfree ( inputline )
FUNCTION_CALL	782:1	782:20	5	_TIFFfree ( inputline )
CALLEE	782:1	782:1	6	_TIFFfree
LEAF_NODE	782:1	782:1	7	_TIFFfree
LEAF_NODE	782:10	782:10	6	(
ARGUMENT	782:11	782:11	6	inputline
FIELD	782:11	782:11	7	inputline
LEAF_NODE	782:11	782:11	8	inputline
LEAF_NODE	782:20	782:20	6	)
LEAF_NODE	782:21	782:21	4	;
EXPR_STATEMENT	783:1	783:19	3	_TIFFfree ( outline ) ;
EXPR	783:1	783:1	4	_TIFFfree ( outline )
FUNCTION_CALL	783:1	783:18	5	_TIFFfree ( outline )
CALLEE	783:1	783:1	6	_TIFFfree
LEAF_NODE	783:1	783:1	7	_TIFFfree
LEAF_NODE	783:10	783:10	6	(
ARGUMENT	783:11	783:11	6	outline
FIELD	783:11	783:11	7	outline
LEAF_NODE	783:11	783:11	8	outline
LEAF_NODE	783:18	783:18	6	)
LEAF_NODE	783:19	783:19	4	;
LEAF_NODE	784:0	784:0	2	}
FUNCTION_DEF	811:0	909:0	1	
RETURN_TYPE	811:0	811:7	2	static void
LEAF_NODE	811:0	811:0	3	static
TYPE_NAME	811:7	811:7	3	void
LEAF_NODE	811:7	811:7	4	void
FUNCTION_NAME	812:0	812:0	2	quant_fsdither
LEAF_NODE	812:0	812:0	3	quant_fsdither
PARAMETER_LIST	812:14	812:34	2	( TIFF * in , TIFF * out )
LEAF_NODE	812:14	812:14	3	(
PARAMETER_DECL	812:15	812:21	3	TIFF * in
TYPE	812:15	812:19	4	TIFF *
TYPE_NAME	812:15	812:15	5	TIFF
LEAF_NODE	812:15	812:15	6	TIFF
POINTER	812:19	812:19	5	*
LEAF_NODE	812:19	812:19	6	*
NAME	812:21	812:21	4	in
LEAF_NODE	812:21	812:21	5	in
LEAF_NODE	812:23	812:23	3	,
PARAMETER_DECL	812:25	812:31	3	TIFF * out
TYPE	812:25	812:29	4	TIFF *
TYPE_NAME	812:25	812:25	5	TIFF
LEAF_NODE	812:25	812:25	6	TIFF
POINTER	812:29	812:29	5	*
LEAF_NODE	812:29	812:29	6	*
NAME	812:31	812:31	4	out
LEAF_NODE	812:31	812:31	5	out
LEAF_NODE	812:34	812:34	3	)
LEAF_NODE	813:0	813:0	2	{
STATEMENTS	814:1	908:1	2	
SIMPLE_DECL	814:1	814:43	3	unsigned char * outline , unsigned char * inputline , unsigned char * inptr ;
INIT_DECL_LIST	814:1	814:1	4	unsigned char * outline , unsigned char * inputline , unsigned char * inptr
VAR_DECL	814:1	814:16	5	unsigned char * outline
TYPE	814:1	814:15	6	unsigned char *
TYPE_NAME	814:1	814:10	7	unsigned char
LEAF_NODE	814:1	814:1	8	unsigned
LEAF_NODE	814:10	814:10	8	char
POINTER	814:15	814:15	7	*
LEAF_NODE	814:15	814:15	8	*
NAME	814:16	814:16	6	outline
LEAF_NODE	814:16	814:16	7	outline
LEAF_NODE	814:23	814:23	5	,
INIT_DECL_LIST	814:1	814:1	5	unsigned char * inputline , unsigned char * inptr
VAR_DECL	814:1	814:26	6	unsigned char * inputline
TYPE	814:1	814:25	7	unsigned char *
TYPE_NAME	814:1	814:10	8	unsigned char
LEAF_NODE	814:1	814:1	9	unsigned
LEAF_NODE	814:10	814:10	9	char
POINTER	814:25	814:25	8	*
LEAF_NODE	814:25	814:25	9	*
NAME	814:26	814:26	7	inputline
LEAF_NODE	814:26	814:26	8	inputline
LEAF_NODE	814:35	814:35	6	,
VAR_DECL	814:1	814:38	6	unsigned char * inptr
TYPE	814:1	814:37	7	unsigned char *
TYPE_NAME	814:1	814:10	8	unsigned char
LEAF_NODE	814:1	814:1	9	unsigned
LEAF_NODE	814:10	814:10	9	char
POINTER	814:37	814:37	8	*
LEAF_NODE	814:37	814:37	9	*
NAME	814:38	814:38	7	inptr
LEAF_NODE	814:38	814:38	8	inptr
LEAF_NODE	814:43	814:43	4	;
SIMPLE_DECL	815:1	815:27	3	short * thisline , short * nextline ;
INIT_DECL_LIST	815:1	815:1	4	short * thisline , short * nextline
VAR_DECL	815:1	815:8	5	short * thisline
TYPE	815:1	815:7	6	short *
TYPE_NAME	815:1	815:1	7	short
LEAF_NODE	815:1	815:1	8	short
POINTER	815:7	815:7	7	*
LEAF_NODE	815:7	815:7	8	*
NAME	815:8	815:8	6	thisline
LEAF_NODE	815:8	815:8	7	thisline
LEAF_NODE	815:16	815:16	5	,
VAR_DECL	815:1	815:19	5	short * nextline
TYPE	815:1	815:18	6	short *
TYPE_NAME	815:1	815:1	7	short
LEAF_NODE	815:1	815:1	8	short
POINTER	815:18	815:18	7	*
LEAF_NODE	815:18	815:18	8	*
NAME	815:19	815:19	6	nextline
LEAF_NODE	815:19	815:19	7	nextline
LEAF_NODE	815:27	815:27	4	;
LEAF_NODE	816:1	816:1	3	register
SIMPLE_DECL	816:10	816:31	3	unsigned char * outptr ;
VAR_DECL	816:10	816:25	4	unsigned char * outptr
TYPE	816:10	816:24	5	unsigned char *
TYPE_NAME	816:10	816:19	6	unsigned char
LEAF_NODE	816:10	816:10	7	unsigned
LEAF_NODE	816:19	816:19	7	char
POINTER	816:24	816:24	6	*
LEAF_NODE	816:24	816:24	7	*
NAME	816:25	816:25	5	outptr
LEAF_NODE	816:25	816:25	6	outptr
LEAF_NODE	816:31	816:31	4	;
LEAF_NODE	817:1	817:1	3	register
SIMPLE_DECL	817:10	817:34	3	short * thisptr , short * nextptr ;
INIT_DECL_LIST	817:10	817:10	4	short * thisptr , short * nextptr
VAR_DECL	817:10	817:17	5	short * thisptr
TYPE	817:10	817:16	6	short *
TYPE_NAME	817:10	817:10	7	short
LEAF_NODE	817:10	817:10	8	short
POINTER	817:16	817:16	7	*
LEAF_NODE	817:16	817:16	8	*
NAME	817:17	817:17	6	thisptr
LEAF_NODE	817:17	817:17	7	thisptr
LEAF_NODE	817:24	817:24	5	,
VAR_DECL	817:10	817:27	5	short * nextptr
TYPE	817:10	817:26	6	short *
TYPE_NAME	817:10	817:10	7	short
LEAF_NODE	817:10	817:10	8	short
POINTER	817:26	817:26	7	*
LEAF_NODE	817:26	817:26	8	*
NAME	817:27	817:27	6	nextptr
LEAF_NODE	817:27	817:27	7	nextptr
LEAF_NODE	817:34	817:34	4	;
LEAF_NODE	818:1	818:1	3	register
SIMPLE_DECL	818:10	818:21	3	uint32 i , uint32 j ;
INIT_DECL_LIST	818:10	818:10	4	uint32 i , uint32 j
VAR_DECL	818:10	818:17	5	uint32 i
TYPE	818:10	818:10	6	uint32
TYPE_NAME	818:10	818:10	7	uint32
LEAF_NODE	818:10	818:10	8	uint32
NAME	818:17	818:17	6	i
LEAF_NODE	818:17	818:17	7	i
LEAF_NODE	818:18	818:18	5	,
VAR_DECL	818:10	818:20	5	uint32 j
TYPE	818:10	818:10	6	uint32
TYPE_NAME	818:10	818:10	7	uint32
LEAF_NODE	818:10	818:10	8	uint32
NAME	818:20	818:20	6	j
LEAF_NODE	818:20	818:20	7	j
LEAF_NODE	818:21	818:21	4	;
SIMPLE_DECL	819:1	819:18	3	uint32 imax , uint32 jmax ;
INIT_DECL_LIST	819:1	819:1	4	uint32 imax , uint32 jmax
VAR_DECL	819:1	819:8	5	uint32 imax
TYPE	819:1	819:1	6	uint32
TYPE_NAME	819:1	819:1	7	uint32
LEAF_NODE	819:1	819:1	8	uint32
NAME	819:8	819:8	6	imax
LEAF_NODE	819:8	819:8	7	imax
LEAF_NODE	819:12	819:12	5	,
VAR_DECL	819:1	819:14	5	uint32 jmax
TYPE	819:1	819:1	6	uint32
TYPE_NAME	819:1	819:1	7	uint32
LEAF_NODE	819:1	819:1	8	uint32
NAME	819:14	819:14	6	jmax
LEAF_NODE	819:14	819:14	7	jmax
LEAF_NODE	819:18	819:18	4	;
SIMPLE_DECL	820:1	820:24	3	int lastline , int lastpixel ;
INIT_DECL_LIST	820:1	820:1	4	int lastline , int lastpixel
VAR_DECL	820:1	820:5	5	int lastline
TYPE	820:1	820:1	6	int
TYPE_NAME	820:1	820:1	7	int
LEAF_NODE	820:1	820:1	8	int
NAME	820:5	820:5	6	lastline
LEAF_NODE	820:5	820:5	7	lastline
LEAF_NODE	820:13	820:13	5	,
VAR_DECL	820:1	820:15	5	int lastpixel
TYPE	820:1	820:1	6	int
TYPE_NAME	820:1	820:1	7	int
LEAF_NODE	820:1	820:1	8	int
NAME	820:15	820:15	6	lastpixel
LEAF_NODE	820:15	820:15	7	lastpixel
LEAF_NODE	820:24	820:24	4	;
EXPR_STATEMENT	822:1	822:23	3	imax = imagelength - 1 ;
EXPR	822:1	822:1	4	imax = imagelength - 1
ASSIGN	822:1	822:8	5	imax = imagelength - 1
LVAL	822:1	822:1	6	imax
FIELD	822:1	822:1	7	imax
LEAF_NODE	822:1	822:1	8	imax
ASSIGN_OP	822:6	822:6	6	=
LEAF_NODE	822:6	822:6	7	=
RVAL	822:8	822:22	6	imagelength - 1
FIELD	822:8	822:8	7	imagelength
LEAF_NODE	822:8	822:8	8	imagelength
LEAF_NODE	822:20	822:20	7	-
FIELD	822:22	822:22	7	1
LEAF_NODE	822:22	822:22	8	1
LEAF_NODE	822:23	822:23	4	;
EXPR_STATEMENT	823:1	823:22	3	jmax = imagewidth - 1 ;
EXPR	823:1	823:1	4	jmax = imagewidth - 1
ASSIGN	823:1	823:8	5	jmax = imagewidth - 1
LVAL	823:1	823:1	6	jmax
FIELD	823:1	823:1	7	jmax
LEAF_NODE	823:1	823:1	8	jmax
ASSIGN_OP	823:6	823:6	6	=
LEAF_NODE	823:6	823:6	7	=
RVAL	823:8	823:21	6	imagewidth - 1
FIELD	823:8	823:8	7	imagewidth
LEAF_NODE	823:8	823:8	8	imagewidth
LEAF_NODE	823:19	823:19	7	-
FIELD	823:21	823:21	7	1
LEAF_NODE	823:21	823:21	8	1
LEAF_NODE	823:22	823:22	4	;
EXPR_STATEMENT	824:1	824:63	3	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) ) ;
EXPR	824:1	824:1	4	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
ASSIGN	824:1	824:13	5	inputline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LVAL	824:1	824:1	6	inputline
FIELD	824:1	824:1	7	inputline
LEAF_NODE	824:1	824:1	8	inputline
ASSIGN_OP	824:11	824:11	6	=
LEAF_NODE	824:11	824:11	7	=
RVAL	824:13	824:30	6	( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( in ) )
LEAF_NODE	824:13	824:13	7	(
TYPE_NAME	824:14	824:23	7	unsigned char
LEAF_NODE	824:14	824:14	8	unsigned
LEAF_NODE	824:23	824:23	8	char
LEAF_NODE	824:28	824:28	7	*
LEAF_NODE	824:29	824:29	7	)
FUNCTION_CALL	824:30	824:62	7	_TIFFmalloc ( TIFFScanlineSize ( in ) )
CALLEE	824:30	824:30	8	_TIFFmalloc
LEAF_NODE	824:30	824:30	9	_TIFFmalloc
LEAF_NODE	824:41	824:41	8	(
ARGUMENT	824:42	824:42	8	TIFFScanlineSize ( in )
FUNCTION_CALL	824:42	824:61	9	TIFFScanlineSize ( in )
CALLEE	824:42	824:42	10	TIFFScanlineSize
LEAF_NODE	824:42	824:42	11	TIFFScanlineSize
LEAF_NODE	824:58	824:58	10	(
ARGUMENT	824:59	824:59	10	in
FIELD	824:59	824:59	11	in
LEAF_NODE	824:59	824:59	12	in
LEAF_NODE	824:61	824:61	10	)
LEAF_NODE	824:62	824:62	8	)
LEAF_NODE	824:63	824:63	4	;
LEAF_NODE	825:1	825:1	3	thisline
LEAF_NODE	825:10	825:10	3	=
LEAF_NODE	825:12	825:12	3	(
LEAF_NODE	825:13	825:13	3	short
LEAF_NODE	825:19	825:19	3	*
LEAF_NODE	825:20	825:20	3	)
LEAF_NODE	825:21	825:21	3	_TIFFmalloc
LEAF_NODE	825:32	825:32	3	(
LEAF_NODE	825:33	825:33	3	imagewidth
LEAF_NODE	825:44	825:44	3	*
LEAF_NODE	825:46	825:46	3	3
LEAF_NODE	825:48	825:48	3	*
LEAF_NODE	825:50	825:50	3	sizeof
LEAF_NODE	825:57	825:57	3	(
LEAF_NODE	825:58	825:58	3	short
LEAF_NODE	825:63	825:63	3	)
LEAF_NODE	825:64	825:64	3	)
LEAF_NODE	825:65	825:65	3	;
LEAF_NODE	826:1	826:1	3	nextline
LEAF_NODE	826:10	826:10	3	=
LEAF_NODE	826:12	826:12	3	(
LEAF_NODE	826:13	826:13	3	short
LEAF_NODE	826:19	826:19	3	*
LEAF_NODE	826:20	826:20	3	)
LEAF_NODE	826:21	826:21	3	_TIFFmalloc
LEAF_NODE	826:32	826:32	3	(
LEAF_NODE	826:33	826:33	3	imagewidth
LEAF_NODE	826:44	826:44	3	*
LEAF_NODE	826:46	826:46	3	3
LEAF_NODE	826:48	826:48	3	*
LEAF_NODE	826:50	826:50	3	sizeof
LEAF_NODE	826:57	826:57	3	(
LEAF_NODE	826:58	826:58	3	short
LEAF_NODE	826:63	826:63	3	)
LEAF_NODE	826:64	826:64	3	)
LEAF_NODE	826:65	826:65	3	;
EXPR_STATEMENT	827:1	827:63	3	outline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( out ) ) ;
EXPR	827:1	827:1	4	outline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( out ) )
ASSIGN	827:1	827:11	5	outline = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( out ) )
LVAL	827:1	827:1	6	outline
FIELD	827:1	827:1	7	outline
LEAF_NODE	827:1	827:1	8	outline
ASSIGN_OP	827:9	827:9	6	=
LEAF_NODE	827:9	827:9	7	=
RVAL	827:11	827:29	6	( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( out ) )
LEAF_NODE	827:11	827:11	7	(
TYPE_NAME	827:12	827:21	7	unsigned char
LEAF_NODE	827:12	827:12	8	unsigned
LEAF_NODE	827:21	827:21	8	char
LEAF_NODE	827:26	827:26	7	*
LEAF_NODE	827:27	827:27	7	)
FUNCTION_CALL	827:29	827:62	7	_TIFFmalloc ( TIFFScanlineSize ( out ) )
CALLEE	827:29	827:29	8	_TIFFmalloc
LEAF_NODE	827:29	827:29	9	_TIFFmalloc
LEAF_NODE	827:40	827:40	8	(
ARGUMENT	827:41	827:41	8	TIFFScanlineSize ( out )
FUNCTION_CALL	827:41	827:61	9	TIFFScanlineSize ( out )
CALLEE	827:41	827:41	10	TIFFScanlineSize
LEAF_NODE	827:41	827:41	11	TIFFScanlineSize
LEAF_NODE	827:57	827:57	10	(
ARGUMENT	827:58	827:58	10	out
FIELD	827:58	827:58	11	out
LEAF_NODE	827:58	827:58	12	out
LEAF_NODE	827:61	827:61	10	)
LEAF_NODE	827:62	827:62	8	)
LEAF_NODE	827:63	827:63	4	;
LEAF_NODE	829:1	829:1	3	GetInputLine
LEAF_NODE	829:13	829:13	3	(
LEAF_NODE	829:14	829:14	3	in
LEAF_NODE	829:16	829:16	3	,
LEAF_NODE	829:18	829:18	3	0
LEAF_NODE	829:19	829:19	3	,
LEAF_NODE	829:21	829:21	3	goto
LEAF_NODE	829:26	829:26	3	bad
LEAF_NODE	829:29	829:29	3	)
LEAF_NODE	829:30	829:30	3	;
ITERATION	830:1	830:36	3	
KEYWORD	830:1	830:1	4	for
LEAF_NODE	830:1	830:1	5	for
LEAF_NODE	830:5	830:5	4	(
FOR_INIT	830:6	830:11	4	i = 1 ;
EXPR	830:6	830:6	5	i = 1
ASSIGN	830:6	830:10	6	i = 1
LVAL	830:6	830:6	7	i
FIELD	830:6	830:6	8	i
LEAF_NODE	830:6	830:6	9	i
ASSIGN_OP	830:8	830:8	7	=
LEAF_NODE	830:8	830:8	8	=
RVAL	830:10	830:10	7	1
FIELD	830:10	830:10	8	1
LEAF_NODE	830:10	830:10	9	1
LEAF_NODE	830:11	830:11	5	;
CONDITION	830:13	830:13	4	i <= imagelength
EXPR	830:13	830:18	5	i <= imagelength
FIELD	830:13	830:13	6	i
LEAF_NODE	830:13	830:13	7	i
REL_OPERATOR	830:15	830:15	6	<=
LEAF_NODE	830:15	830:15	7	<=
FIELD	830:18	830:18	6	imagelength
LEAF_NODE	830:18	830:18	7	imagelength
LEAF_NODE	830:29	830:29	4	;
FOR_EXPR	830:31	830:31	4	++ i
EXPR	830:31	830:33	5	++ i
LEAF_NODE	830:31	830:31	6	++
FIELD	830:33	830:33	6	i
LEAF_NODE	830:33	830:33	7	i
LEAF_NODE	830:34	830:34	4	)
STATEMENTS	830:36	903:1	4	
LEAF_NODE	830:36	830:36	5	{
STATEMENTS	831:2	901:2	5	
LEAF_NODE	831:2	831:2	6	SWAP
LEAF_NODE	831:6	831:6	6	(
LEAF_NODE	831:7	831:7	6	short
LEAF_NODE	831:13	831:13	6	*
LEAF_NODE	831:14	831:14	6	,
LEAF_NODE	831:16	831:16	6	thisline
LEAF_NODE	831:24	831:24	6	,
LEAF_NODE	831:26	831:26	6	nextline
LEAF_NODE	831:34	831:34	6	)
LEAF_NODE	831:35	831:35	6	;
EXPR_STATEMENT	832:2	832:24	6	lastline = ( i >= imax ) ;
EXPR	832:2	832:2	7	lastline = ( i >= imax )
ASSIGN	832:2	832:13	8	lastline = ( i >= imax )
LVAL	832:2	832:2	9	lastline
FIELD	832:2	832:2	10	lastline
LEAF_NODE	832:2	832:2	11	lastline
ASSIGN_OP	832:11	832:11	9	=
LEAF_NODE	832:11	832:11	10	=
RVAL	832:13	832:23	9	( i >= imax )
LEAF_NODE	832:13	832:13	10	(
FIELD	832:14	832:14	10	i
LEAF_NODE	832:14	832:14	11	i
REL_OPERATOR	832:16	832:16	10	>=
LEAF_NODE	832:16	832:16	11	>=
FIELD	832:19	832:19	10	imax
LEAF_NODE	832:19	832:19	11	imax
LEAF_NODE	832:23	832:23	10	)
LEAF_NODE	832:24	832:24	7	;
SELECTION	833:2	834:3	6	
KEYWORD	833:2	833:2	7	if
LEAF_NODE	833:2	833:2	8	if
LEAF_NODE	833:5	833:5	7	(
CONDITION	833:6	833:6	7	i <= imax
EXPR	833:6	833:11	8	i <= imax
FIELD	833:6	833:6	9	i
LEAF_NODE	833:6	833:6	10	i
REL_OPERATOR	833:8	833:8	9	<=
LEAF_NODE	833:8	833:8	10	<=
FIELD	833:11	833:11	9	imax
LEAF_NODE	833:11	833:11	10	imax
LEAF_NODE	833:15	833:15	7	)
STATEMENTS	834:3	834:3	7	
LEAF_NODE	834:3	834:3	8	GetInputLine
LEAF_NODE	834:15	834:15	6	(
LEAF_NODE	834:16	834:16	6	in
LEAF_NODE	834:18	834:18	6	,
LEAF_NODE	834:20	834:20	6	i
LEAF_NODE	834:21	834:21	6	,
LEAF_NODE	834:23	834:23	6	break
LEAF_NODE	834:28	834:28	6	)
LEAF_NODE	834:29	834:29	6	;
EXPR_STATEMENT	835:2	835:20	6	thisptr = thisline ;
EXPR	835:2	835:2	7	thisptr = thisline
ASSIGN	835:2	835:12	8	thisptr = thisline
LVAL	835:2	835:2	9	thisptr
FIELD	835:2	835:2	10	thisptr
LEAF_NODE	835:2	835:2	11	thisptr
ASSIGN_OP	835:10	835:10	9	=
LEAF_NODE	835:10	835:10	10	=
RVAL	835:12	835:12	9	thisline
FIELD	835:12	835:12	10	thisline
LEAF_NODE	835:12	835:12	11	thisline
LEAF_NODE	835:20	835:20	7	;
EXPR_STATEMENT	836:2	836:20	6	nextptr = nextline ;
EXPR	836:2	836:2	7	nextptr = nextline
ASSIGN	836:2	836:12	8	nextptr = nextline
LVAL	836:2	836:2	9	nextptr
FIELD	836:2	836:2	10	nextptr
LEAF_NODE	836:2	836:2	11	nextptr
ASSIGN_OP	836:10	836:10	9	=
LEAF_NODE	836:10	836:10	10	=
RVAL	836:12	836:12	9	nextline
FIELD	836:12	836:12	10	nextline
LEAF_NODE	836:12	836:12	11	nextline
LEAF_NODE	836:20	836:20	7	;
EXPR_STATEMENT	837:2	837:18	6	outptr = outline ;
EXPR	837:2	837:2	7	outptr = outline
ASSIGN	837:2	837:11	8	outptr = outline
LVAL	837:2	837:2	9	outptr
FIELD	837:2	837:2	10	outptr
LEAF_NODE	837:2	837:2	11	outptr
ASSIGN_OP	837:9	837:9	9	=
LEAF_NODE	837:9	837:9	10	=
RVAL	837:11	837:11	9	outline
FIELD	837:11	837:11	10	outline
LEAF_NODE	837:11	837:11	11	outline
LEAF_NODE	837:18	837:18	7	;
ITERATION	838:2	838:35	6	
KEYWORD	838:2	838:2	7	for
LEAF_NODE	838:2	838:2	8	for
LEAF_NODE	838:6	838:6	7	(
FOR_INIT	838:7	838:12	7	j = 0 ;
EXPR	838:7	838:7	8	j = 0
ASSIGN	838:7	838:11	9	j = 0
LVAL	838:7	838:7	10	j
FIELD	838:7	838:7	11	j
LEAF_NODE	838:7	838:7	12	j
ASSIGN_OP	838:9	838:9	10	=
LEAF_NODE	838:9	838:9	11	=
RVAL	838:11	838:11	10	0
FIELD	838:11	838:11	11	0
LEAF_NODE	838:11	838:11	12	0
LEAF_NODE	838:12	838:12	8	;
CONDITION	838:14	838:14	7	j < imagewidth
EXPR	838:14	838:18	8	j < imagewidth
FIELD	838:14	838:14	9	j
LEAF_NODE	838:14	838:14	10	j
REL_OPERATOR	838:16	838:16	9	<
LEAF_NODE	838:16	838:16	10	<
FIELD	838:18	838:18	9	imagewidth
LEAF_NODE	838:18	838:18	10	imagewidth
LEAF_NODE	838:28	838:28	7	;
FOR_EXPR	838:30	838:30	7	++ j
EXPR	838:30	838:32	8	++ j
LEAF_NODE	838:30	838:30	9	++
FIELD	838:32	838:32	9	j
LEAF_NODE	838:32	838:32	10	j
LEAF_NODE	838:33	838:33	7	)
STATEMENTS	838:35	900:2	7	
LEAF_NODE	838:35	838:35	8	{
STATEMENTS	839:3	884:3	8	
SIMPLE_DECL	839:3	839:23	9	int red , int green , int blue ;
INIT_DECL_LIST	839:3	839:3	10	int red , int green , int blue
VAR_DECL	839:3	839:7	11	int red
TYPE	839:3	839:3	12	int
TYPE_NAME	839:3	839:3	13	int
LEAF_NODE	839:3	839:3	14	int
NAME	839:7	839:7	12	red
LEAF_NODE	839:7	839:7	13	red
LEAF_NODE	839:10	839:10	11	,
INIT_DECL_LIST	839:3	839:3	11	int green , int blue
VAR_DECL	839:3	839:12	12	int green
TYPE	839:3	839:3	13	int
TYPE_NAME	839:3	839:3	14	int
LEAF_NODE	839:3	839:3	15	int
NAME	839:12	839:12	13	green
LEAF_NODE	839:12	839:12	14	green
LEAF_NODE	839:17	839:17	12	,
VAR_DECL	839:3	839:19	12	int blue
TYPE	839:3	839:3	13	int
TYPE_NAME	839:3	839:3	14	int
LEAF_NODE	839:3	839:3	15	int
NAME	839:19	839:19	13	blue
LEAF_NODE	839:19	839:19	14	blue
LEAF_NODE	839:23	839:23	10	;
LEAF_NODE	840:3	840:3	9	register
SIMPLE_DECL	840:12	840:32	9	int oval , int r2 , int g2 , int b2 ;
INIT_DECL_LIST	840:12	840:12	10	int oval , int r2 , int g2 , int b2
VAR_DECL	840:12	840:16	11	int oval
TYPE	840:12	840:12	12	int
TYPE_NAME	840:12	840:12	13	int
LEAF_NODE	840:12	840:12	14	int
NAME	840:16	840:16	12	oval
LEAF_NODE	840:16	840:16	13	oval
LEAF_NODE	840:20	840:20	11	,
INIT_DECL_LIST	840:12	840:12	11	int r2 , int g2 , int b2
VAR_DECL	840:12	840:22	12	int r2
TYPE	840:12	840:12	13	int
TYPE_NAME	840:12	840:12	14	int
LEAF_NODE	840:12	840:12	15	int
NAME	840:22	840:22	13	r2
LEAF_NODE	840:22	840:22	14	r2
LEAF_NODE	840:24	840:24	12	,
INIT_DECL_LIST	840:12	840:12	12	int g2 , int b2
VAR_DECL	840:12	840:26	13	int g2
TYPE	840:12	840:12	14	int
TYPE_NAME	840:12	840:12	15	int
LEAF_NODE	840:12	840:12	16	int
NAME	840:26	840:26	14	g2
LEAF_NODE	840:26	840:26	15	g2
LEAF_NODE	840:28	840:28	13	,
VAR_DECL	840:12	840:30	13	int b2
TYPE	840:12	840:12	14	int
TYPE_NAME	840:12	840:12	15	int
LEAF_NODE	840:12	840:12	16	int
NAME	840:30	840:30	14	b2
LEAF_NODE	840:30	840:30	15	b2
LEAF_NODE	840:32	840:32	10	;
EXPR_STATEMENT	842:3	842:26	9	lastpixel = ( j == jmax ) ;
EXPR	842:3	842:3	10	lastpixel = ( j == jmax )
ASSIGN	842:3	842:15	11	lastpixel = ( j == jmax )
LVAL	842:3	842:3	12	lastpixel
FIELD	842:3	842:3	13	lastpixel
LEAF_NODE	842:3	842:3	14	lastpixel
ASSIGN_OP	842:13	842:13	12	=
LEAF_NODE	842:13	842:13	13	=
RVAL	842:15	842:25	12	( j == jmax )
LEAF_NODE	842:15	842:15	13	(
FIELD	842:16	842:16	13	j
LEAF_NODE	842:16	842:16	14	j
EQ_OPERATOR	842:18	842:18	13	==
LEAF_NODE	842:18	842:18	14	==
FIELD	842:21	842:21	13	jmax
LEAF_NODE	842:21	842:21	14	jmax
LEAF_NODE	842:25	842:25	13	)
LEAF_NODE	842:26	842:26	10	;
EXPR_STATEMENT	843:3	843:36	9	GetComponent ( * thisptr ++ , r2 , red ) ;
EXPR	843:3	843:3	10	GetComponent ( * thisptr ++ , r2 , red )
FUNCTION_CALL	843:3	843:35	11	GetComponent ( * thisptr ++ , r2 , red )
CALLEE	843:3	843:3	12	GetComponent
LEAF_NODE	843:3	843:3	13	GetComponent
LEAF_NODE	843:15	843:15	12	(
ARGUMENT	843:16	843:16	12	* thisptr ++
UNARY_EXPR	843:16	843:17	13	* thisptr ++
UNARY_OPERATOR	843:16	843:16	14	*
LEAF_NODE	843:16	843:16	15	*
FIELD	843:17	843:24	14	thisptr ++
LEAF_NODE	843:17	843:17	15	thisptr
LEAF_NODE	843:24	843:24	15	++
LEAF_NODE	843:26	843:26	12	,
ARGUMENT	843:28	843:28	12	r2
FIELD	843:28	843:28	13	r2
LEAF_NODE	843:28	843:28	14	r2
LEAF_NODE	843:30	843:30	12	,
ARGUMENT	843:32	843:32	12	red
FIELD	843:32	843:32	13	red
LEAF_NODE	843:32	843:32	14	red
LEAF_NODE	843:35	843:35	12	)
LEAF_NODE	843:36	843:36	10	;
EXPR_STATEMENT	844:3	844:38	9	GetComponent ( * thisptr ++ , g2 , green ) ;
EXPR	844:3	844:3	10	GetComponent ( * thisptr ++ , g2 , green )
FUNCTION_CALL	844:3	844:37	11	GetComponent ( * thisptr ++ , g2 , green )
CALLEE	844:3	844:3	12	GetComponent
LEAF_NODE	844:3	844:3	13	GetComponent
LEAF_NODE	844:15	844:15	12	(
ARGUMENT	844:16	844:16	12	* thisptr ++
UNARY_EXPR	844:16	844:17	13	* thisptr ++
UNARY_OPERATOR	844:16	844:16	14	*
LEAF_NODE	844:16	844:16	15	*
FIELD	844:17	844:24	14	thisptr ++
LEAF_NODE	844:17	844:17	15	thisptr
LEAF_NODE	844:24	844:24	15	++
LEAF_NODE	844:26	844:26	12	,
ARGUMENT	844:28	844:28	12	g2
FIELD	844:28	844:28	13	g2
LEAF_NODE	844:28	844:28	14	g2
LEAF_NODE	844:30	844:30	12	,
ARGUMENT	844:32	844:32	12	green
FIELD	844:32	844:32	13	green
LEAF_NODE	844:32	844:32	14	green
LEAF_NODE	844:37	844:37	12	)
LEAF_NODE	844:38	844:38	10	;
EXPR_STATEMENT	845:3	845:37	9	GetComponent ( * thisptr ++ , b2 , blue ) ;
EXPR	845:3	845:3	10	GetComponent ( * thisptr ++ , b2 , blue )
FUNCTION_CALL	845:3	845:36	11	GetComponent ( * thisptr ++ , b2 , blue )
CALLEE	845:3	845:3	12	GetComponent
LEAF_NODE	845:3	845:3	13	GetComponent
LEAF_NODE	845:15	845:15	12	(
ARGUMENT	845:16	845:16	12	* thisptr ++
UNARY_EXPR	845:16	845:17	13	* thisptr ++
UNARY_OPERATOR	845:16	845:16	14	*
LEAF_NODE	845:16	845:16	15	*
FIELD	845:17	845:24	14	thisptr ++
LEAF_NODE	845:17	845:17	15	thisptr
LEAF_NODE	845:24	845:24	15	++
LEAF_NODE	845:26	845:26	12	,
ARGUMENT	845:28	845:28	12	b2
FIELD	845:28	845:28	13	b2
LEAF_NODE	845:28	845:28	14	b2
LEAF_NODE	845:30	845:30	12	,
ARGUMENT	845:32	845:32	12	blue
FIELD	845:32	845:32	13	blue
LEAF_NODE	845:32	845:32	14	blue
LEAF_NODE	845:36	845:36	12	)
LEAF_NODE	845:37	845:37	10	;
EXPR_STATEMENT	846:3	846:31	9	oval = histogram [ r2 ] [ g2 ] [ b2 ] ;
EXPR	846:3	846:3	10	oval = histogram [ r2 ] [ g2 ] [ b2 ]
ASSIGN	846:3	846:10	11	oval = histogram [ r2 ] [ g2 ] [ b2 ]
LVAL	846:3	846:3	12	oval
FIELD	846:3	846:3	13	oval
LEAF_NODE	846:3	846:3	14	oval
ASSIGN_OP	846:8	846:8	12	=
LEAF_NODE	846:8	846:8	13	=
RVAL	846:10	846:10	12	histogram [ r2 ] [ g2 ] [ b2 ]
FIELD	846:10	846:30	13	histogram [ r2 ] [ g2 ] [ b2 ]
LEAF_NODE	846:10	846:10	14	histogram
LEAF_NODE	846:19	846:19	14	[
EXPR	846:20	846:20	14	r2
FIELD	846:20	846:20	15	r2
LEAF_NODE	846:20	846:20	16	r2
LEAF_NODE	846:22	846:22	14	]
LEAF_NODE	846:23	846:23	14	[
EXPR	846:24	846:24	14	g2
FIELD	846:24	846:24	15	g2
LEAF_NODE	846:24	846:24	16	g2
LEAF_NODE	846:26	846:26	14	]
LEAF_NODE	846:27	846:27	14	[
EXPR	846:28	846:28	14	b2
FIELD	846:28	846:28	15	b2
LEAF_NODE	846:28	846:28	16	b2
LEAF_NODE	846:30	846:30	14	]
LEAF_NODE	846:31	846:31	10	;
SELECTION	847:3	847:19	9	
KEYWORD	847:3	847:3	10	if
LEAF_NODE	847:3	847:3	11	if
LEAF_NODE	847:6	847:6	10	(
CONDITION	847:7	847:7	10	oval == - 1
EXPR	847:7	847:15	11	oval == - 1
FIELD	847:7	847:7	12	oval
LEAF_NODE	847:7	847:7	13	oval
EQ_OPERATOR	847:12	847:12	12	==
LEAF_NODE	847:12	847:12	13	==
UNARY_EXPR	847:15	847:16	12	- 1
UNARY_OPERATOR	847:15	847:15	13	-
LEAF_NODE	847:15	847:15	14	-
FIELD	847:16	847:16	13	1
LEAF_NODE	847:16	847:16	14	1
LEAF_NODE	847:17	847:17	10	)
STATEMENTS	847:19	874:3	10	
LEAF_NODE	847:19	847:19	11	{
STATEMENTS	848:4	873:4	11	
SIMPLE_DECL	848:4	848:10	12	int ci ;
VAR_DECL	848:4	848:8	13	int ci
TYPE	848:4	848:4	14	int
TYPE_NAME	848:4	848:4	15	int
LEAF_NODE	848:4	848:4	16	int
NAME	848:8	848:8	14	ci
LEAF_NODE	848:8	848:8	15	ci
LEAF_NODE	848:10	848:10	13	;
LEAF_NODE	849:4	849:4	12	register
SIMPLE_DECL	849:13	849:34	12	int cj , int tmp , int d2 , int dist ;
INIT_DECL_LIST	849:13	849:13	13	int cj , int tmp , int d2 , int dist
VAR_DECL	849:13	849:17	14	int cj
TYPE	849:13	849:13	15	int
TYPE_NAME	849:13	849:13	16	int
LEAF_NODE	849:13	849:13	17	int
NAME	849:17	849:17	15	cj
LEAF_NODE	849:17	849:17	16	cj
LEAF_NODE	849:19	849:19	14	,
INIT_DECL_LIST	849:13	849:13	14	int tmp , int d2 , int dist
VAR_DECL	849:13	849:21	15	int tmp
TYPE	849:13	849:13	16	int
TYPE_NAME	849:13	849:13	17	int
LEAF_NODE	849:13	849:13	18	int
NAME	849:21	849:21	16	tmp
LEAF_NODE	849:21	849:21	17	tmp
LEAF_NODE	849:24	849:24	15	,
INIT_DECL_LIST	849:13	849:13	15	int d2 , int dist
VAR_DECL	849:13	849:26	16	int d2
TYPE	849:13	849:13	17	int
TYPE_NAME	849:13	849:13	18	int
LEAF_NODE	849:13	849:13	19	int
NAME	849:26	849:26	17	d2
LEAF_NODE	849:26	849:26	18	d2
LEAF_NODE	849:28	849:28	16	,
VAR_DECL	849:13	849:30	16	int dist
TYPE	849:13	849:13	17	int
TYPE_NAME	849:13	849:13	18	int
LEAF_NODE	849:13	849:13	19	int
NAME	849:30	849:30	17	dist
LEAF_NODE	849:30	849:30	18	dist
LEAF_NODE	849:34	849:34	13	;
LEAF_NODE	850:4	850:4	12	register
SIMPLE_DECL	850:13	850:25	12	C_cell * cell ;
VAR_DECL	850:13	850:21	13	C_cell * cell
TYPE	850:13	850:20	14	C_cell *
TYPE_NAME	850:13	850:13	15	C_cell
LEAF_NODE	850:13	850:13	16	C_cell
POINTER	850:20	850:20	15	*
LEAF_NODE	850:20	850:20	16	*
NAME	850:21	850:21	14	cell
LEAF_NODE	850:21	850:21	15	cell
LEAF_NODE	850:25	850:25	13	;
EXPR_STATEMENT	852:4	855:33	12	cell = * ( ColorCells + ( ( ( r2 >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH * 2 ) + ( ( g2 >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH ) + ( b2 >> ( B_DEPTH - C_DEPTH ) ) ) ) ;
EXPR	852:4	852:4	13	cell = * ( ColorCells + ( ( ( r2 >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH * 2 ) + ( ( g2 >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH ) + ( b2 >> ( B_DEPTH - C_DEPTH ) ) ) )
ASSIGN	852:4	852:11	14	cell = * ( ColorCells + ( ( ( r2 >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH * 2 ) + ( ( g2 >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH ) + ( b2 >> ( B_DEPTH - C_DEPTH ) ) ) )
LVAL	852:4	852:4	15	cell
FIELD	852:4	852:4	16	cell
LEAF_NODE	852:4	852:4	17	cell
ASSIGN_OP	852:9	852:9	15	=
LEAF_NODE	852:9	852:9	16	=
RVAL	852:11	852:11	15	* ( ColorCells + ( ( ( r2 >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH * 2 ) + ( ( g2 >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH ) + ( b2 >> ( B_DEPTH - C_DEPTH ) ) ) )
UNARY_EXPR	852:11	855:32	16	* ( ColorCells + ( ( ( r2 >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH * 2 ) + ( ( g2 >> ( B_DEPTH - C_DEPTH ) ) << C_DEPTH ) + ( b2 >> ( B_DEPTH - C_DEPTH ) ) ) )
UNARY_OPERATOR	852:11	852:11	17	*
LEAF_NODE	852:11	852:11	18	*
LEAF_NODE	852:12	852:12	17	(
FIELD	852:13	852:13	17	ColorCells
LEAF_NODE	852:13	852:13	18	ColorCells
LEAF_NODE	852:24	852:24	17	+
LEAF_NODE	853:8	853:8	17	(
LEAF_NODE	853:9	853:9	17	(
LEAF_NODE	853:10	853:10	17	(
FIELD	853:11	853:11	17	r2
LEAF_NODE	853:11	853:11	18	r2
LEAF_NODE	853:13	853:13	17	>>
LEAF_NODE	853:15	853:15	17	(
FIELD	853:16	853:16	17	B_DEPTH
LEAF_NODE	853:16	853:16	18	B_DEPTH
LEAF_NODE	853:23	853:23	17	-
FIELD	853:24	853:24	17	C_DEPTH
LEAF_NODE	853:24	853:24	18	C_DEPTH
LEAF_NODE	853:31	853:31	17	)
LEAF_NODE	853:32	853:32	17	)
LEAF_NODE	853:34	853:34	17	<<
FIELD	853:37	853:37	17	C_DEPTH
LEAF_NODE	853:37	853:37	18	C_DEPTH
LEAF_NODE	853:44	853:44	17	*
FIELD	853:45	853:45	17	2
LEAF_NODE	853:45	853:45	18	2
LEAF_NODE	853:46	853:46	17	)
LEAF_NODE	853:48	853:48	17	+
LEAF_NODE	854:8	854:8	17	(
LEAF_NODE	854:9	854:9	17	(
FIELD	854:10	854:10	17	g2
LEAF_NODE	854:10	854:10	18	g2
LEAF_NODE	854:12	854:12	17	>>
LEAF_NODE	854:14	854:14	17	(
FIELD	854:15	854:15	17	B_DEPTH
LEAF_NODE	854:15	854:15	18	B_DEPTH
LEAF_NODE	854:22	854:22	17	-
FIELD	854:23	854:23	17	C_DEPTH
LEAF_NODE	854:23	854:23	18	C_DEPTH
LEAF_NODE	854:30	854:30	17	)
LEAF_NODE	854:31	854:31	17	)
LEAF_NODE	854:33	854:33	17	<<
FIELD	854:36	854:36	17	C_DEPTH
LEAF_NODE	854:36	854:36	18	C_DEPTH
LEAF_NODE	854:44	854:44	17	)
LEAF_NODE	854:46	854:46	17	+
LEAF_NODE	855:8	855:8	17	(
FIELD	855:9	855:9	17	b2
LEAF_NODE	855:9	855:9	18	b2
LEAF_NODE	855:11	855:11	17	>>
LEAF_NODE	855:13	855:13	17	(
FIELD	855:14	855:14	17	B_DEPTH
LEAF_NODE	855:14	855:14	18	B_DEPTH
LEAF_NODE	855:21	855:21	17	-
FIELD	855:22	855:22	17	C_DEPTH
LEAF_NODE	855:22	855:22	18	C_DEPTH
LEAF_NODE	855:29	855:29	17	)
LEAF_NODE	855:30	855:30	17	)
LEAF_NODE	855:31	855:31	17	)
LEAF_NODE	855:32	855:32	17	)
LEAF_NODE	855:33	855:33	13	;
SELECTION	856:4	857:5	12	
KEYWORD	856:4	856:4	13	if
LEAF_NODE	856:4	856:4	14	if
LEAF_NODE	856:7	856:7	13	(
CONDITION	856:8	856:8	13	cell == NULL
EXPR	856:8	856:16	14	cell == NULL
FIELD	856:8	856:8	15	cell
LEAF_NODE	856:8	856:8	16	cell
EQ_OPERATOR	856:13	856:13	15	==
LEAF_NODE	856:13	856:13	16	==
FIELD	856:16	856:16	15	NULL
LEAF_NODE	856:16	856:16	16	NULL
LEAF_NODE	856:20	856:20	13	)
STATEMENTS	857:5	857:5	13	
EXPR_STATEMENT	857:5	858:21	14	cell = create_colorcell ( red , green , blue ) ;
EXPR	857:5	857:5	15	cell = create_colorcell ( red , green , blue )
ASSIGN	857:5	857:12	16	cell = create_colorcell ( red , green , blue )
LVAL	857:5	857:5	17	cell
FIELD	857:5	857:5	18	cell
LEAF_NODE	857:5	857:5	19	cell
ASSIGN_OP	857:10	857:10	17	=
LEAF_NODE	857:10	857:10	18	=
RVAL	857:12	857:12	17	create_colorcell ( red , green , blue )
FUNCTION_CALL	857:12	858:20	18	create_colorcell ( red , green , blue )
CALLEE	857:12	857:12	19	create_colorcell
LEAF_NODE	857:12	857:12	20	create_colorcell
LEAF_NODE	857:28	857:28	19	(
ARGUMENT	857:29	857:29	19	red
FIELD	857:29	857:29	20	red
LEAF_NODE	857:29	857:29	21	red
LEAF_NODE	857:32	857:32	19	,
ARGUMENT	858:9	858:9	19	green
FIELD	858:9	858:9	20	green
LEAF_NODE	858:9	858:9	21	green
LEAF_NODE	858:14	858:14	19	,
ARGUMENT	858:16	858:16	19	blue
FIELD	858:16	858:16	20	blue
LEAF_NODE	858:16	858:16	21	blue
LEAF_NODE	858:20	858:20	19	)
LEAF_NODE	858:21	858:21	15	;
EXPR_STATEMENT	859:4	859:18	12	dist = 9999999 ;
EXPR	859:4	859:4	13	dist = 9999999
ASSIGN	859:4	859:11	14	dist = 9999999
LVAL	859:4	859:4	15	dist
FIELD	859:4	859:4	16	dist
LEAF_NODE	859:4	859:4	17	dist
ASSIGN_OP	859:9	859:9	15	=
LEAF_NODE	859:9	859:9	16	=
RVAL	859:11	859:11	15	9999999
FIELD	859:11	859:11	16	9999999
LEAF_NODE	859:11	859:11	17	9999999
LEAF_NODE	859:18	859:18	13	;
ITERATION	860:4	860:75	12	
KEYWORD	860:4	860:4	13	for
LEAF_NODE	860:4	860:4	14	for
LEAF_NODE	860:8	860:8	13	(
FOR_INIT	860:9	860:15	13	ci = 0 ;
EXPR	860:9	860:9	14	ci = 0
ASSIGN	860:9	860:14	15	ci = 0
LVAL	860:9	860:9	16	ci
FIELD	860:9	860:9	17	ci
LEAF_NODE	860:9	860:9	18	ci
ASSIGN_OP	860:12	860:12	16	=
LEAF_NODE	860:12	860:12	17	=
RVAL	860:14	860:14	16	0
FIELD	860:14	860:14	17	0
LEAF_NODE	860:14	860:14	18	0
LEAF_NODE	860:15	860:15	14	;
CONDITION	860:17	860:17	13	ci < cell -> num_ents && dist > cell -> entries [ ci ] [ 1 ]
EXPR	860:17	860:17	14	ci < cell -> num_ents && dist > cell -> entries [ ci ] [ 1 ]
AND	860:17	860:40	15	ci < cell -> num_ents && dist > cell -> entries [ ci ] [ 1 ]
EXPR	860:17	860:22	16	ci < cell -> num_ents
FIELD	860:17	860:17	17	ci
LEAF_NODE	860:17	860:17	18	ci
REL_OPERATOR	860:20	860:20	17	<
LEAF_NODE	860:20	860:20	18	<
FIELD	860:22	860:28	17	cell -> num_ents
LEAF_NODE	860:22	860:22	18	cell
LEAF_NODE	860:26	860:26	18	->
LEAF_NODE	860:28	860:28	18	num_ents
LEAF_NODE	860:37	860:37	16	&&
EXPR	860:40	860:47	16	dist > cell -> entries [ ci ] [ 1 ]
FIELD	860:40	860:40	17	dist
LEAF_NODE	860:40	860:40	18	dist
REL_OPERATOR	860:45	860:45	17	>
LEAF_NODE	860:45	860:45	18	>
FIELD	860:47	860:66	17	cell -> entries [ ci ] [ 1 ]
LEAF_NODE	860:47	860:47	18	cell
LEAF_NODE	860:51	860:51	18	->
LEAF_NODE	860:53	860:53	18	entries
LEAF_NODE	860:60	860:60	18	[
EXPR	860:61	860:61	18	ci
FIELD	860:61	860:61	19	ci
LEAF_NODE	860:61	860:61	20	ci
LEAF_NODE	860:63	860:63	18	]
LEAF_NODE	860:64	860:64	18	[
EXPR	860:65	860:65	18	1
FIELD	860:65	860:65	19	1
LEAF_NODE	860:65	860:65	20	1
LEAF_NODE	860:66	860:66	18	]
LEAF_NODE	860:67	860:67	13	;
FOR_EXPR	860:69	860:69	13	++ ci
EXPR	860:69	860:71	14	++ ci
LEAF_NODE	860:69	860:69	15	++
FIELD	860:71	860:71	15	ci
LEAF_NODE	860:71	860:71	16	ci
LEAF_NODE	860:73	860:73	13	)
STATEMENTS	860:75	872:4	13	
LEAF_NODE	860:75	860:75	14	{
STATEMENTS	861:5	868:5	14	
EXPR_STATEMENT	861:5	861:30	15	cj = cell -> entries [ ci ] [ 0 ] ;
EXPR	861:5	861:5	16	cj = cell -> entries [ ci ] [ 0 ]
ASSIGN	861:5	861:10	17	cj = cell -> entries [ ci ] [ 0 ]
LVAL	861:5	861:5	18	cj
FIELD	861:5	861:5	19	cj
LEAF_NODE	861:5	861:5	20	cj
ASSIGN_OP	861:8	861:8	18	=
LEAF_NODE	861:8	861:8	19	=
RVAL	861:10	861:10	18	cell -> entries [ ci ] [ 0 ]
FIELD	861:10	861:29	19	cell -> entries [ ci ] [ 0 ]
LEAF_NODE	861:10	861:10	20	cell
LEAF_NODE	861:14	861:14	20	->
LEAF_NODE	861:16	861:16	20	entries
LEAF_NODE	861:23	861:23	20	[
EXPR	861:24	861:24	20	ci
FIELD	861:24	861:24	21	ci
LEAF_NODE	861:24	861:24	22	ci
LEAF_NODE	861:26	861:26	20	]
LEAF_NODE	861:27	861:27	20	[
EXPR	861:28	861:28	20	0
FIELD	861:28	861:28	21	0
LEAF_NODE	861:28	861:28	22	0
LEAF_NODE	861:29	861:29	20	]
LEAF_NODE	861:30	861:30	16	;
EXPR_STATEMENT	862:5	862:38	15	d2 = ( rm [ cj ] >> COLOR_SHIFT ) - r2 ;
EXPR	862:5	862:5	16	d2 = ( rm [ cj ] >> COLOR_SHIFT ) - r2
ASSIGN	862:5	862:10	17	d2 = ( rm [ cj ] >> COLOR_SHIFT ) - r2
LVAL	862:5	862:5	18	d2
FIELD	862:5	862:5	19	d2
LEAF_NODE	862:5	862:5	20	d2
ASSIGN_OP	862:8	862:8	18	=
LEAF_NODE	862:8	862:8	19	=
RVAL	862:10	862:36	18	( rm [ cj ] >> COLOR_SHIFT ) - r2
LEAF_NODE	862:10	862:10	19	(
FIELD	862:11	862:16	19	rm [ cj ]
LEAF_NODE	862:11	862:11	20	rm
LEAF_NODE	862:13	862:13	20	[
EXPR	862:14	862:14	20	cj
FIELD	862:14	862:14	21	cj
LEAF_NODE	862:14	862:14	22	cj
LEAF_NODE	862:16	862:16	20	]
LEAF_NODE	862:18	862:18	19	>>
FIELD	862:21	862:21	19	COLOR_SHIFT
LEAF_NODE	862:21	862:21	20	COLOR_SHIFT
LEAF_NODE	862:32	862:32	19	)
LEAF_NODE	862:34	862:34	19	-
FIELD	862:36	862:36	19	r2
LEAF_NODE	862:36	862:36	20	r2
LEAF_NODE	862:38	862:38	16	;
EXPR_STATEMENT	863:5	863:13	15	d2 *= d2 ;
EXPR	863:5	863:5	16	d2 *= d2
ASSIGN	863:5	863:11	17	d2 *= d2
LVAL	863:5	863:5	18	d2
FIELD	863:5	863:5	19	d2
LEAF_NODE	863:5	863:5	20	d2
ASSIGN_OP	863:8	863:8	18	*=
LEAF_NODE	863:8	863:8	19	*=
RVAL	863:11	863:11	18	d2
FIELD	863:11	863:11	19	d2
LEAF_NODE	863:11	863:11	20	d2
LEAF_NODE	863:13	863:13	16	;
EXPR_STATEMENT	864:5	864:39	15	tmp = ( gm [ cj ] >> COLOR_SHIFT ) - g2 ;
EXPR	864:5	864:5	16	tmp = ( gm [ cj ] >> COLOR_SHIFT ) - g2
ASSIGN	864:5	864:11	17	tmp = ( gm [ cj ] >> COLOR_SHIFT ) - g2
LVAL	864:5	864:5	18	tmp
FIELD	864:5	864:5	19	tmp
LEAF_NODE	864:5	864:5	20	tmp
ASSIGN_OP	864:9	864:9	18	=
LEAF_NODE	864:9	864:9	19	=
RVAL	864:11	864:37	18	( gm [ cj ] >> COLOR_SHIFT ) - g2
LEAF_NODE	864:11	864:11	19	(
FIELD	864:12	864:17	19	gm [ cj ]
LEAF_NODE	864:12	864:12	20	gm
LEAF_NODE	864:14	864:14	20	[
EXPR	864:15	864:15	20	cj
FIELD	864:15	864:15	21	cj
LEAF_NODE	864:15	864:15	22	cj
LEAF_NODE	864:17	864:17	20	]
LEAF_NODE	864:19	864:19	19	>>
FIELD	864:22	864:22	19	COLOR_SHIFT
LEAF_NODE	864:22	864:22	20	COLOR_SHIFT
LEAF_NODE	864:33	864:33	19	)
LEAF_NODE	864:35	864:35	19	-
FIELD	864:37	864:37	19	g2
LEAF_NODE	864:37	864:37	20	g2
LEAF_NODE	864:39	864:39	16	;
EXPR_STATEMENT	865:5	865:18	15	d2 += tmp * tmp ;
EXPR	865:5	865:5	16	d2 += tmp * tmp
ASSIGN	865:5	865:11	17	d2 += tmp * tmp
LVAL	865:5	865:5	18	d2
FIELD	865:5	865:5	19	d2
LEAF_NODE	865:5	865:5	20	d2
ASSIGN_OP	865:8	865:8	18	+=
LEAF_NODE	865:8	865:8	19	+=
RVAL	865:11	865:15	18	tmp * tmp
FIELD	865:11	865:11	19	tmp
LEAF_NODE	865:11	865:11	20	tmp
LEAF_NODE	865:14	865:14	19	*
FIELD	865:15	865:15	19	tmp
LEAF_NODE	865:15	865:15	20	tmp
LEAF_NODE	865:18	865:18	16	;
EXPR_STATEMENT	866:5	866:39	15	tmp = ( bm [ cj ] >> COLOR_SHIFT ) - b2 ;
EXPR	866:5	866:5	16	tmp = ( bm [ cj ] >> COLOR_SHIFT ) - b2
ASSIGN	866:5	866:11	17	tmp = ( bm [ cj ] >> COLOR_SHIFT ) - b2
LVAL	866:5	866:5	18	tmp
FIELD	866:5	866:5	19	tmp
LEAF_NODE	866:5	866:5	20	tmp
ASSIGN_OP	866:9	866:9	18	=
LEAF_NODE	866:9	866:9	19	=
RVAL	866:11	866:37	18	( bm [ cj ] >> COLOR_SHIFT ) - b2
LEAF_NODE	866:11	866:11	19	(
FIELD	866:12	866:17	19	bm [ cj ]
LEAF_NODE	866:12	866:12	20	bm
LEAF_NODE	866:14	866:14	20	[
EXPR	866:15	866:15	20	cj
FIELD	866:15	866:15	21	cj
LEAF_NODE	866:15	866:15	22	cj
LEAF_NODE	866:17	866:17	20	]
LEAF_NODE	866:19	866:19	19	>>
FIELD	866:22	866:22	19	COLOR_SHIFT
LEAF_NODE	866:22	866:22	20	COLOR_SHIFT
LEAF_NODE	866:33	866:33	19	)
LEAF_NODE	866:35	866:35	19	-
FIELD	866:37	866:37	19	b2
LEAF_NODE	866:37	866:37	20	b2
LEAF_NODE	866:39	866:39	16	;
EXPR_STATEMENT	867:5	867:18	15	d2 += tmp * tmp ;
EXPR	867:5	867:5	16	d2 += tmp * tmp
ASSIGN	867:5	867:11	17	d2 += tmp * tmp
LVAL	867:5	867:5	18	d2
FIELD	867:5	867:5	19	d2
LEAF_NODE	867:5	867:5	20	d2
ASSIGN_OP	867:8	867:8	18	+=
LEAF_NODE	867:8	867:8	19	+=
RVAL	867:11	867:15	18	tmp * tmp
FIELD	867:11	867:11	19	tmp
LEAF_NODE	867:11	867:11	20	tmp
LEAF_NODE	867:14	867:14	19	*
FIELD	867:15	867:15	19	tmp
LEAF_NODE	867:15	867:15	20	tmp
LEAF_NODE	867:18	867:18	16	;
SELECTION	868:5	868:20	15	
KEYWORD	868:5	868:5	16	if
LEAF_NODE	868:5	868:5	17	if
LEAF_NODE	868:8	868:8	16	(
CONDITION	868:9	868:9	16	d2 < dist
EXPR	868:9	868:14	17	d2 < dist
FIELD	868:9	868:9	18	d2
LEAF_NODE	868:9	868:9	19	d2
REL_OPERATOR	868:12	868:12	18	<
LEAF_NODE	868:12	868:12	19	<
FIELD	868:14	868:14	18	dist
LEAF_NODE	868:14	868:14	19	dist
LEAF_NODE	868:18	868:18	16	)
STATEMENTS	868:20	871:5	16	
LEAF_NODE	868:20	868:20	17	{
STATEMENTS	869:6	870:6	17	
EXPR_STATEMENT	869:6	869:15	18	dist = d2 ;
EXPR	869:6	869:6	19	dist = d2
ASSIGN	869:6	869:13	20	dist = d2
LVAL	869:6	869:6	21	dist
FIELD	869:6	869:6	22	dist
LEAF_NODE	869:6	869:6	23	dist
ASSIGN_OP	869:11	869:11	21	=
LEAF_NODE	869:11	869:11	22	=
RVAL	869:13	869:13	21	d2
FIELD	869:13	869:13	22	d2
LEAF_NODE	869:13	869:13	23	d2
LEAF_NODE	869:15	869:15	19	;
EXPR_STATEMENT	870:6	870:15	18	oval = cj ;
EXPR	870:6	870:6	19	oval = cj
ASSIGN	870:6	870:13	20	oval = cj
LVAL	870:6	870:6	21	oval
FIELD	870:6	870:6	22	oval
LEAF_NODE	870:6	870:6	23	oval
ASSIGN_OP	870:11	870:11	21	=
LEAF_NODE	870:11	870:11	22	=
RVAL	870:13	870:13	21	cj
FIELD	870:13	870:13	22	cj
LEAF_NODE	870:13	870:13	23	cj
LEAF_NODE	870:15	870:15	19	;
LEAF_NODE	871:5	871:5	17	}
LEAF_NODE	872:4	872:4	14	}
EXPR_STATEMENT	873:4	873:32	12	histogram [ r2 ] [ g2 ] [ b2 ] = oval ;
EXPR	873:4	873:4	13	histogram [ r2 ] [ g2 ] [ b2 ] = oval
ASSIGN	873:4	873:28	14	histogram [ r2 ] [ g2 ] [ b2 ] = oval
LVAL	873:4	873:4	15	histogram [ r2 ] [ g2 ] [ b2 ]
FIELD	873:4	873:24	16	histogram [ r2 ] [ g2 ] [ b2 ]
LEAF_NODE	873:4	873:4	17	histogram
LEAF_NODE	873:13	873:13	17	[
EXPR	873:14	873:14	17	r2
FIELD	873:14	873:14	18	r2
LEAF_NODE	873:14	873:14	19	r2
LEAF_NODE	873:16	873:16	17	]
LEAF_NODE	873:17	873:17	17	[
EXPR	873:18	873:18	17	g2
FIELD	873:18	873:18	18	g2
LEAF_NODE	873:18	873:18	19	g2
LEAF_NODE	873:20	873:20	17	]
LEAF_NODE	873:21	873:21	17	[
EXPR	873:22	873:22	17	b2
FIELD	873:22	873:22	18	b2
LEAF_NODE	873:22	873:22	19	b2
LEAF_NODE	873:24	873:24	17	]
ASSIGN_OP	873:26	873:26	15	=
LEAF_NODE	873:26	873:26	16	=
RVAL	873:28	873:28	15	oval
FIELD	873:28	873:28	16	oval
LEAF_NODE	873:28	873:28	17	oval
LEAF_NODE	873:32	873:32	13	;
LEAF_NODE	874:3	874:3	11	}
EXPR_STATEMENT	875:3	875:19	9	* outptr ++ = oval ;
EXPR	875:3	875:3	10	* outptr ++ = oval
ASSIGN	875:3	875:15	11	* outptr ++ = oval
LVAL	875:3	875:3	12	* outptr ++
UNARY_EXPR	875:3	875:4	13	* outptr ++
UNARY_OPERATOR	875:3	875:3	14	*
LEAF_NODE	875:3	875:3	15	*
FIELD	875:4	875:10	14	outptr ++
LEAF_NODE	875:4	875:4	15	outptr
LEAF_NODE	875:10	875:10	15	++
ASSIGN_OP	875:13	875:13	12	=
LEAF_NODE	875:13	875:13	13	=
RVAL	875:15	875:15	12	oval
FIELD	875:15	875:15	13	oval
LEAF_NODE	875:15	875:15	14	oval
LEAF_NODE	875:19	875:19	10	;
EXPR_STATEMENT	876:3	876:18	9	red -= rm [ oval ] ;
EXPR	876:3	876:3	10	red -= rm [ oval ]
ASSIGN	876:3	876:10	11	red -= rm [ oval ]
LVAL	876:3	876:3	12	red
FIELD	876:3	876:3	13	red
LEAF_NODE	876:3	876:3	14	red
ASSIGN_OP	876:7	876:7	12	-=
LEAF_NODE	876:7	876:7	13	-=
RVAL	876:10	876:10	12	rm [ oval ]
FIELD	876:10	876:17	13	rm [ oval ]
LEAF_NODE	876:10	876:10	14	rm
LEAF_NODE	876:12	876:12	14	[
EXPR	876:13	876:13	14	oval
FIELD	876:13	876:13	15	oval
LEAF_NODE	876:13	876:13	16	oval
LEAF_NODE	876:17	876:17	14	]
LEAF_NODE	876:18	876:18	10	;
EXPR_STATEMENT	877:3	877:20	9	green -= gm [ oval ] ;
EXPR	877:3	877:3	10	green -= gm [ oval ]
ASSIGN	877:3	877:12	11	green -= gm [ oval ]
LVAL	877:3	877:3	12	green
FIELD	877:3	877:3	13	green
LEAF_NODE	877:3	877:3	14	green
ASSIGN_OP	877:9	877:9	12	-=
LEAF_NODE	877:9	877:9	13	-=
RVAL	877:12	877:12	12	gm [ oval ]
FIELD	877:12	877:19	13	gm [ oval ]
LEAF_NODE	877:12	877:12	14	gm
LEAF_NODE	877:14	877:14	14	[
EXPR	877:15	877:15	14	oval
FIELD	877:15	877:15	15	oval
LEAF_NODE	877:15	877:15	16	oval
LEAF_NODE	877:19	877:19	14	]
LEAF_NODE	877:20	877:20	10	;
EXPR_STATEMENT	878:3	878:19	9	blue -= bm [ oval ] ;
EXPR	878:3	878:3	10	blue -= bm [ oval ]
ASSIGN	878:3	878:11	11	blue -= bm [ oval ]
LVAL	878:3	878:3	12	blue
FIELD	878:3	878:3	13	blue
LEAF_NODE	878:3	878:3	14	blue
ASSIGN_OP	878:8	878:8	12	-=
LEAF_NODE	878:8	878:8	13	-=
RVAL	878:11	878:11	12	bm [ oval ]
FIELD	878:11	878:18	13	bm [ oval ]
LEAF_NODE	878:11	878:11	14	bm
LEAF_NODE	878:13	878:13	14	[
EXPR	878:14	878:14	14	oval
FIELD	878:14	878:14	15	oval
LEAF_NODE	878:14	878:14	16	oval
LEAF_NODE	878:18	878:18	14	]
LEAF_NODE	878:19	878:19	10	;
SELECTION	879:3	879:19	9	
KEYWORD	879:3	879:3	10	if
LEAF_NODE	879:3	879:3	11	if
LEAF_NODE	879:6	879:6	10	(
CONDITION	879:7	879:7	10	! lastpixel
EXPR	879:7	879:7	11	! lastpixel
UNARY_EXPR	879:7	879:8	12	! lastpixel
UNARY_OPERATOR	879:7	879:7	13	!
LEAF_NODE	879:7	879:7	14	!
FIELD	879:8	879:8	13	lastpixel
LEAF_NODE	879:8	879:8	14	lastpixel
LEAF_NODE	879:17	879:17	10	)
STATEMENTS	879:19	883:3	10	
LEAF_NODE	879:19	879:19	11	{
STATEMENTS	880:4	882:22	11	
LEAF_NODE	880:4	880:4	12	thisptr
LEAF_NODE	880:11	880:11	12	[
LEAF_NODE	880:12	880:12	12	0
LEAF_NODE	880:13	880:13	12	]
LEAF_NODE	880:15	880:15	12	+=
LEAF_NODE	880:18	880:18	12	blue
EXPR_STATEMENT	880:23	880:31	12	* 7 / 16 ;
EXPR	880:23	880:29	13	* 7 / 16
UNARY_EXPR	880:23	880:25	14	* 7
UNARY_OPERATOR	880:23	880:23	15	*
LEAF_NODE	880:23	880:23	16	*
FIELD	880:25	880:25	15	7
LEAF_NODE	880:25	880:25	16	7
LEAF_NODE	880:27	880:27	14	/
FIELD	880:29	880:29	14	16
LEAF_NODE	880:29	880:29	15	16
LEAF_NODE	880:31	880:31	13	;
LEAF_NODE	881:4	881:4	12	thisptr
LEAF_NODE	881:11	881:11	12	[
LEAF_NODE	881:12	881:12	12	1
LEAF_NODE	881:13	881:13	12	]
LEAF_NODE	881:15	881:15	12	+=
LEAF_NODE	881:18	881:18	12	green
EXPR_STATEMENT	881:24	881:32	12	* 7 / 16 ;
EXPR	881:24	881:30	13	* 7 / 16
UNARY_EXPR	881:24	881:26	14	* 7
UNARY_OPERATOR	881:24	881:24	15	*
LEAF_NODE	881:24	881:24	16	*
FIELD	881:26	881:26	15	7
LEAF_NODE	881:26	881:26	16	7
LEAF_NODE	881:28	881:28	14	/
FIELD	881:30	881:30	14	16
LEAF_NODE	881:30	881:30	15	16
LEAF_NODE	881:32	881:32	13	;
LEAF_NODE	882:4	882:4	12	thisptr
LEAF_NODE	882:11	882:11	12	[
LEAF_NODE	882:12	882:12	12	2
LEAF_NODE	882:13	882:13	12	]
LEAF_NODE	882:15	882:15	12	+=
LEAF_NODE	882:18	882:18	12	red
EXPR_STATEMENT	882:22	882:30	12	* 7 / 16 ;
EXPR	882:22	882:28	13	* 7 / 16
UNARY_EXPR	882:22	882:24	14	* 7
UNARY_OPERATOR	882:22	882:22	15	*
LEAF_NODE	882:22	882:22	16	*
FIELD	882:24	882:24	15	7
LEAF_NODE	882:24	882:24	16	7
LEAF_NODE	882:26	882:26	14	/
FIELD	882:28	882:28	14	16
LEAF_NODE	882:28	882:28	15	16
LEAF_NODE	882:30	882:30	13	;
LEAF_NODE	883:3	883:3	11	}
SELECTION	884:3	884:18	9	
KEYWORD	884:3	884:3	10	if
LEAF_NODE	884:3	884:3	11	if
LEAF_NODE	884:6	884:6	10	(
CONDITION	884:7	884:7	10	! lastline
EXPR	884:7	884:7	11	! lastline
UNARY_EXPR	884:7	884:8	12	! lastline
UNARY_OPERATOR	884:7	884:7	13	!
LEAF_NODE	884:7	884:7	14	!
FIELD	884:8	884:8	13	lastline
LEAF_NODE	884:8	884:8	14	lastline
LEAF_NODE	884:16	884:16	10	)
STATEMENTS	884:18	899:3	10	
LEAF_NODE	884:18	884:18	11	{
STATEMENTS	885:4	898:4	11	
SELECTION	885:4	885:16	12	
KEYWORD	885:4	885:4	13	if
LEAF_NODE	885:4	885:4	14	if
LEAF_NODE	885:7	885:7	13	(
CONDITION	885:8	885:8	13	j != 0
EXPR	885:8	885:13	14	j != 0
FIELD	885:8	885:8	15	j
LEAF_NODE	885:8	885:8	16	j
EQ_OPERATOR	885:10	885:10	15	!=
LEAF_NODE	885:10	885:10	16	!=
FIELD	885:13	885:13	15	0
LEAF_NODE	885:13	885:13	16	0
LEAF_NODE	885:14	885:14	13	)
STATEMENTS	885:16	889:4	13	
LEAF_NODE	885:16	885:16	14	{
STATEMENTS	886:5	888:24	14	
LEAF_NODE	886:5	886:5	15	nextptr
LEAF_NODE	886:12	886:12	15	[
LEAF_NODE	886:13	886:13	15	-
LEAF_NODE	886:14	886:14	15	3
LEAF_NODE	886:15	886:15	15	]
LEAF_NODE	886:17	886:17	15	+=
LEAF_NODE	886:20	886:20	15	blue
EXPR_STATEMENT	886:25	886:33	15	* 3 / 16 ;
EXPR	886:25	886:31	16	* 3 / 16
UNARY_EXPR	886:25	886:27	17	* 3
UNARY_OPERATOR	886:25	886:25	18	*
LEAF_NODE	886:25	886:25	19	*
FIELD	886:27	886:27	18	3
LEAF_NODE	886:27	886:27	19	3
LEAF_NODE	886:29	886:29	17	/
FIELD	886:31	886:31	17	16
LEAF_NODE	886:31	886:31	18	16
LEAF_NODE	886:33	886:33	16	;
LEAF_NODE	887:5	887:5	15	nextptr
LEAF_NODE	887:12	887:12	15	[
LEAF_NODE	887:13	887:13	15	-
LEAF_NODE	887:14	887:14	15	2
LEAF_NODE	887:15	887:15	15	]
LEAF_NODE	887:17	887:17	15	+=
LEAF_NODE	887:20	887:20	15	green
EXPR_STATEMENT	887:26	887:34	15	* 3 / 16 ;
EXPR	887:26	887:32	16	* 3 / 16
UNARY_EXPR	887:26	887:28	17	* 3
UNARY_OPERATOR	887:26	887:26	18	*
LEAF_NODE	887:26	887:26	19	*
FIELD	887:28	887:28	18	3
LEAF_NODE	887:28	887:28	19	3
LEAF_NODE	887:30	887:30	17	/
FIELD	887:32	887:32	17	16
LEAF_NODE	887:32	887:32	18	16
LEAF_NODE	887:34	887:34	16	;
LEAF_NODE	888:5	888:5	15	nextptr
LEAF_NODE	888:12	888:12	15	[
LEAF_NODE	888:13	888:13	15	-
LEAF_NODE	888:14	888:14	15	1
LEAF_NODE	888:15	888:15	15	]
LEAF_NODE	888:17	888:17	15	+=
LEAF_NODE	888:20	888:20	15	red
EXPR_STATEMENT	888:24	888:32	15	* 3 / 16 ;
EXPR	888:24	888:30	16	* 3 / 16
UNARY_EXPR	888:24	888:26	17	* 3
UNARY_OPERATOR	888:24	888:24	18	*
LEAF_NODE	888:24	888:24	19	*
FIELD	888:26	888:26	18	3
LEAF_NODE	888:26	888:26	19	3
LEAF_NODE	888:28	888:28	17	/
FIELD	888:30	888:30	17	16
LEAF_NODE	888:30	888:30	18	16
LEAF_NODE	888:32	888:32	16	;
LEAF_NODE	889:4	889:4	14	}
LEAF_NODE	890:4	890:4	12	nextptr
LEAF_NODE	890:11	890:11	12	[
LEAF_NODE	890:12	890:12	12	0
LEAF_NODE	890:13	890:13	12	]
LEAF_NODE	890:15	890:15	12	+=
LEAF_NODE	890:18	890:18	12	blue
EXPR_STATEMENT	890:23	890:31	12	* 5 / 16 ;
EXPR	890:23	890:29	13	* 5 / 16
UNARY_EXPR	890:23	890:25	14	* 5
UNARY_OPERATOR	890:23	890:23	15	*
LEAF_NODE	890:23	890:23	16	*
FIELD	890:25	890:25	15	5
LEAF_NODE	890:25	890:25	16	5
LEAF_NODE	890:27	890:27	14	/
FIELD	890:29	890:29	14	16
LEAF_NODE	890:29	890:29	15	16
LEAF_NODE	890:31	890:31	13	;
LEAF_NODE	891:4	891:4	12	nextptr
LEAF_NODE	891:11	891:11	12	[
LEAF_NODE	891:12	891:12	12	1
LEAF_NODE	891:13	891:13	12	]
LEAF_NODE	891:15	891:15	12	+=
LEAF_NODE	891:18	891:18	12	green
EXPR_STATEMENT	891:24	891:32	12	* 5 / 16 ;
EXPR	891:24	891:30	13	* 5 / 16
UNARY_EXPR	891:24	891:26	14	* 5
UNARY_OPERATOR	891:24	891:24	15	*
LEAF_NODE	891:24	891:24	16	*
FIELD	891:26	891:26	15	5
LEAF_NODE	891:26	891:26	16	5
LEAF_NODE	891:28	891:28	14	/
FIELD	891:30	891:30	14	16
LEAF_NODE	891:30	891:30	15	16
LEAF_NODE	891:32	891:32	13	;
LEAF_NODE	892:4	892:4	12	nextptr
LEAF_NODE	892:11	892:11	12	[
LEAF_NODE	892:12	892:12	12	2
LEAF_NODE	892:13	892:13	12	]
LEAF_NODE	892:15	892:15	12	+=
LEAF_NODE	892:18	892:18	12	red
EXPR_STATEMENT	892:22	892:30	12	* 5 / 16 ;
EXPR	892:22	892:28	13	* 5 / 16
UNARY_EXPR	892:22	892:24	14	* 5
UNARY_OPERATOR	892:22	892:22	15	*
LEAF_NODE	892:22	892:22	16	*
FIELD	892:24	892:24	15	5
LEAF_NODE	892:24	892:24	16	5
LEAF_NODE	892:26	892:26	14	/
FIELD	892:28	892:28	14	16
LEAF_NODE	892:28	892:28	15	16
LEAF_NODE	892:30	892:30	13	;
SELECTION	893:4	893:20	12	
KEYWORD	893:4	893:4	13	if
LEAF_NODE	893:4	893:4	14	if
LEAF_NODE	893:7	893:7	13	(
CONDITION	893:8	893:8	13	! lastpixel
EXPR	893:8	893:8	14	! lastpixel
UNARY_EXPR	893:8	893:9	15	! lastpixel
UNARY_OPERATOR	893:8	893:8	16	!
LEAF_NODE	893:8	893:8	17	!
FIELD	893:9	893:9	16	lastpixel
LEAF_NODE	893:9	893:9	17	lastpixel
LEAF_NODE	893:18	893:18	13	)
STATEMENTS	893:20	897:4	13	
LEAF_NODE	893:20	893:20	14	{
STATEMENTS	894:5	896:12	14	
EXPR_STATEMENT	894:5	894:28	15	nextptr [ 3 ] += blue / 16 ;
EXPR	894:5	894:5	16	nextptr [ 3 ] += blue / 16
ASSIGN	894:5	894:19	17	nextptr [ 3 ] += blue / 16
LVAL	894:5	894:5	18	nextptr [ 3 ]
FIELD	894:5	894:14	19	nextptr [ 3 ]
LEAF_NODE	894:5	894:5	20	nextptr
LEAF_NODE	894:12	894:12	20	[
EXPR	894:13	894:13	20	3
FIELD	894:13	894:13	21	3
LEAF_NODE	894:13	894:13	22	3
LEAF_NODE	894:14	894:14	20	]
ASSIGN_OP	894:16	894:16	18	+=
LEAF_NODE	894:16	894:16	19	+=
RVAL	894:19	894:26	18	blue / 16
FIELD	894:19	894:19	19	blue
LEAF_NODE	894:19	894:19	20	blue
LEAF_NODE	894:24	894:24	19	/
FIELD	894:26	894:26	19	16
LEAF_NODE	894:26	894:26	20	16
LEAF_NODE	894:28	894:28	16	;
EXPR_STATEMENT	895:12	895:36	15	nextptr [ 4 ] += green / 16 ;
EXPR	895:12	895:12	16	nextptr [ 4 ] += green / 16
ASSIGN	895:12	895:26	17	nextptr [ 4 ] += green / 16
LVAL	895:12	895:12	18	nextptr [ 4 ]
FIELD	895:12	895:21	19	nextptr [ 4 ]
LEAF_NODE	895:12	895:12	20	nextptr
LEAF_NODE	895:19	895:19	20	[
EXPR	895:20	895:20	20	4
FIELD	895:20	895:20	21	4
LEAF_NODE	895:20	895:20	22	4
LEAF_NODE	895:21	895:21	20	]
ASSIGN_OP	895:23	895:23	18	+=
LEAF_NODE	895:23	895:23	19	+=
RVAL	895:26	895:34	18	green / 16
FIELD	895:26	895:26	19	green
LEAF_NODE	895:26	895:26	20	green
LEAF_NODE	895:32	895:32	19	/
FIELD	895:34	895:34	19	16
LEAF_NODE	895:34	895:34	20	16
LEAF_NODE	895:36	895:36	16	;
EXPR_STATEMENT	896:12	896:34	15	nextptr [ 5 ] += red / 16 ;
EXPR	896:12	896:12	16	nextptr [ 5 ] += red / 16
ASSIGN	896:12	896:26	17	nextptr [ 5 ] += red / 16
LVAL	896:12	896:12	18	nextptr [ 5 ]
FIELD	896:12	896:21	19	nextptr [ 5 ]
LEAF_NODE	896:12	896:12	20	nextptr
LEAF_NODE	896:19	896:19	20	[
EXPR	896:20	896:20	20	5
FIELD	896:20	896:20	21	5
LEAF_NODE	896:20	896:20	22	5
LEAF_NODE	896:21	896:21	20	]
ASSIGN_OP	896:23	896:23	18	+=
LEAF_NODE	896:23	896:23	19	+=
RVAL	896:26	896:32	18	red / 16
FIELD	896:26	896:26	19	red
LEAF_NODE	896:26	896:26	20	red
LEAF_NODE	896:30	896:30	19	/
FIELD	896:32	896:32	19	16
LEAF_NODE	896:32	896:32	20	16
LEAF_NODE	896:34	896:34	16	;
LEAF_NODE	897:4	897:4	14	}
EXPR_STATEMENT	898:4	898:16	12	nextptr += 3 ;
EXPR	898:4	898:4	13	nextptr += 3
ASSIGN	898:4	898:15	14	nextptr += 3
LVAL	898:4	898:4	15	nextptr
FIELD	898:4	898:4	16	nextptr
LEAF_NODE	898:4	898:4	17	nextptr
ASSIGN_OP	898:12	898:12	15	+=
LEAF_NODE	898:12	898:12	16	+=
RVAL	898:15	898:15	15	3
FIELD	898:15	898:15	16	3
LEAF_NODE	898:15	898:15	17	3
LEAF_NODE	898:16	898:16	13	;
LEAF_NODE	899:3	899:3	11	}
LEAF_NODE	900:2	900:2	8	}
SELECTION	901:2	902:3	6	
KEYWORD	901:2	901:2	7	if
LEAF_NODE	901:2	901:2	8	if
LEAF_NODE	901:5	901:5	7	(
CONDITION	901:6	901:6	7	TIFFWriteScanline ( out , outline , i - 1 , 0 ) < 0
EXPR	901:6	901:48	8	TIFFWriteScanline ( out , outline , i - 1 , 0 ) < 0
FUNCTION_CALL	901:6	901:44	9	TIFFWriteScanline ( out , outline , i - 1 , 0 )
CALLEE	901:6	901:6	10	TIFFWriteScanline
LEAF_NODE	901:6	901:6	11	TIFFWriteScanline
LEAF_NODE	901:23	901:23	10	(
ARGUMENT	901:24	901:24	10	out
FIELD	901:24	901:24	11	out
LEAF_NODE	901:24	901:24	12	out
LEAF_NODE	901:27	901:27	10	,
ARGUMENT	901:29	901:29	10	outline
FIELD	901:29	901:29	11	outline
LEAF_NODE	901:29	901:29	12	outline
LEAF_NODE	901:36	901:36	10	,
ARGUMENT	901:38	901:40	10	i - 1
FIELD	901:38	901:38	11	i
LEAF_NODE	901:38	901:38	12	i
LEAF_NODE	901:39	901:39	11	-
FIELD	901:40	901:40	11	1
LEAF_NODE	901:40	901:40	12	1
LEAF_NODE	901:41	901:41	10	,
ARGUMENT	901:43	901:43	10	0
FIELD	901:43	901:43	11	0
LEAF_NODE	901:43	901:43	12	0
LEAF_NODE	901:44	901:44	10	)
REL_OPERATOR	901:46	901:46	9	<
LEAF_NODE	901:46	901:46	10	<
FIELD	901:48	901:48	9	0
LEAF_NODE	901:48	901:48	10	0
LEAF_NODE	901:49	901:49	7	)
STATEMENTS	902:3	902:3	7	
JUMP_STATEMENT	902:3	902:8	8	break DESTINATION ;
KEYWORD	902:3	902:3	9	break
LEAF_NODE	902:3	902:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	902:8	902:8	9	;
LEAF_NODE	903:1	903:1	5	}
LABEL	904:0	904:3	3	bad :
LEAF_NODE	904:0	904:0	4	bad
LEAF_NODE	904:3	904:3	4	:
EXPR_STATEMENT	905:1	905:21	3	_TIFFfree ( inputline ) ;
EXPR	905:1	905:1	4	_TIFFfree ( inputline )
FUNCTION_CALL	905:1	905:20	5	_TIFFfree ( inputline )
CALLEE	905:1	905:1	6	_TIFFfree
LEAF_NODE	905:1	905:1	7	_TIFFfree
LEAF_NODE	905:10	905:10	6	(
ARGUMENT	905:11	905:11	6	inputline
FIELD	905:11	905:11	7	inputline
LEAF_NODE	905:11	905:11	8	inputline
LEAF_NODE	905:20	905:20	6	)
LEAF_NODE	905:21	905:21	4	;
EXPR_STATEMENT	906:1	906:20	3	_TIFFfree ( thisline ) ;
EXPR	906:1	906:1	4	_TIFFfree ( thisline )
FUNCTION_CALL	906:1	906:19	5	_TIFFfree ( thisline )
CALLEE	906:1	906:1	6	_TIFFfree
LEAF_NODE	906:1	906:1	7	_TIFFfree
LEAF_NODE	906:10	906:10	6	(
ARGUMENT	906:11	906:11	6	thisline
FIELD	906:11	906:11	7	thisline
LEAF_NODE	906:11	906:11	8	thisline
LEAF_NODE	906:19	906:19	6	)
LEAF_NODE	906:20	906:20	4	;
EXPR_STATEMENT	907:1	907:20	3	_TIFFfree ( nextline ) ;
EXPR	907:1	907:1	4	_TIFFfree ( nextline )
FUNCTION_CALL	907:1	907:19	5	_TIFFfree ( nextline )
CALLEE	907:1	907:1	6	_TIFFfree
LEAF_NODE	907:1	907:1	7	_TIFFfree
LEAF_NODE	907:10	907:10	6	(
ARGUMENT	907:11	907:11	6	nextline
FIELD	907:11	907:11	7	nextline
LEAF_NODE	907:11	907:11	8	nextline
LEAF_NODE	907:19	907:19	6	)
LEAF_NODE	907:20	907:20	4	;
EXPR_STATEMENT	908:1	908:19	3	_TIFFfree ( outline ) ;
EXPR	908:1	908:1	4	_TIFFfree ( outline )
FUNCTION_CALL	908:1	908:18	5	_TIFFfree ( outline )
CALLEE	908:1	908:1	6	_TIFFfree
LEAF_NODE	908:1	908:1	7	_TIFFfree
LEAF_NODE	908:10	908:10	6	(
ARGUMENT	908:11	908:11	6	outline
FIELD	908:11	908:11	7	outline
LEAF_NODE	908:11	908:11	8	outline
LEAF_NODE	908:18	908:18	6	)
LEAF_NODE	908:19	908:19	4	;
LEAF_NODE	909:0	909:0	2	}
