SOURCE_FILE	42:8	370:0	0	
SIMPLE_DECL	42:8	54:11	1	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; ZSTD_DStream * dstream ; ZSTD_CStream * cstream ; int compression_level ; ZSTD_outBuffer out_buffer ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; } ZSTDState ;
VAR_DECL	42:8	54:2	2	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; ZSTD_DStream * dstream ; ZSTD_CStream * cstream ; int compression_level ; ZSTD_outBuffer out_buffer ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; } ZSTDState
TYPE	42:8	42:8	3	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; ZSTD_DStream * dstream ; ZSTD_CStream * cstream ; int compression_level ; ZSTD_outBuffer out_buffer ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; }
CLASS_DEF	42:8	54:0	4	struct CLASS_NAME BASE_CLASSES { TIFFPredictorState predict ; ZSTD_DStream * dstream ; ZSTD_CStream * cstream ; int compression_level ; ZSTD_outBuffer out_buffer ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; }
LEAF_NODE	42:8	42:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	42:15	42:15	5	{
CLASS_CONTENT	43:8	53:8	5	TIFFPredictorState predict ; ZSTD_DStream * dstream ; ZSTD_CStream * cstream ; int compression_level ; ZSTD_outBuffer out_buffer ; int state ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ;
SIMPLE_DECL	43:8	43:34	6	TIFFPredictorState predict ;
VAR_DECL	43:8	43:27	7	TIFFPredictorState predict
TYPE	43:8	43:8	8	TIFFPredictorState
TYPE_NAME	43:8	43:8	9	TIFFPredictorState
LEAF_NODE	43:8	43:8	10	TIFFPredictorState
NAME	43:27	43:27	8	predict
LEAF_NODE	43:27	43:27	9	predict
LEAF_NODE	43:34	43:34	7	;
SIMPLE_DECL	44:8	44:31	6	ZSTD_DStream * dstream ;
VAR_DECL	44:8	44:24	7	ZSTD_DStream * dstream
TYPE	44:8	44:20	8	ZSTD_DStream *
TYPE_NAME	44:8	44:8	9	ZSTD_DStream
LEAF_NODE	44:8	44:8	10	ZSTD_DStream
POINTER	44:20	44:20	9	*
LEAF_NODE	44:20	44:20	10	*
NAME	44:24	44:24	8	dstream
LEAF_NODE	44:24	44:24	9	dstream
LEAF_NODE	44:31	44:31	7	;
SIMPLE_DECL	45:8	45:31	6	ZSTD_CStream * cstream ;
VAR_DECL	45:8	45:24	7	ZSTD_CStream * cstream
TYPE	45:8	45:20	8	ZSTD_CStream *
TYPE_NAME	45:8	45:8	9	ZSTD_CStream
LEAF_NODE	45:8	45:8	10	ZSTD_CStream
POINTER	45:20	45:20	9	*
LEAF_NODE	45:20	45:20	10	*
NAME	45:24	45:24	8	cstream
LEAF_NODE	45:24	45:24	9	cstream
LEAF_NODE	45:31	45:31	7	;
SIMPLE_DECL	46:8	46:41	6	int compression_level ;
VAR_DECL	46:8	46:24	7	int compression_level
TYPE	46:8	46:8	8	int
TYPE_NAME	46:8	46:8	9	int
LEAF_NODE	46:8	46:8	10	int
NAME	46:24	46:24	8	compression_level
LEAF_NODE	46:24	46:24	9	compression_level
LEAF_NODE	46:41	46:41	7	;
SIMPLE_DECL	47:8	47:34	6	ZSTD_outBuffer out_buffer ;
VAR_DECL	47:8	47:24	7	ZSTD_outBuffer out_buffer
TYPE	47:8	47:8	8	ZSTD_outBuffer
TYPE_NAME	47:8	47:8	9	ZSTD_outBuffer
LEAF_NODE	47:8	47:8	10	ZSTD_outBuffer
NAME	47:24	47:24	8	out_buffer
LEAF_NODE	47:24	47:24	9	out_buffer
LEAF_NODE	47:34	47:34	7	;
SIMPLE_DECL	48:8	48:29	6	int state ;
VAR_DECL	48:8	48:24	7	int state
TYPE	48:8	48:8	8	int
TYPE_NAME	48:8	48:8	9	int
LEAF_NODE	48:8	48:8	10	int
NAME	48:24	48:24	8	state
LEAF_NODE	48:24	48:24	9	state
LEAF_NODE	48:29	48:29	7	;
SIMPLE_DECL	52:8	52:34	6	TIFFVGetMethod vgetparent ;
VAR_DECL	52:8	52:24	7	TIFFVGetMethod vgetparent
TYPE	52:8	52:8	8	TIFFVGetMethod
TYPE_NAME	52:8	52:8	9	TIFFVGetMethod
LEAF_NODE	52:8	52:8	10	TIFFVGetMethod
NAME	52:24	52:24	8	vgetparent
LEAF_NODE	52:24	52:24	9	vgetparent
LEAF_NODE	52:34	52:34	7	;
SIMPLE_DECL	53:8	53:34	6	TIFFVSetMethod vsetparent ;
VAR_DECL	53:8	53:24	7	TIFFVSetMethod vsetparent
TYPE	53:8	53:8	8	TIFFVSetMethod
TYPE_NAME	53:8	53:8	9	TIFFVSetMethod
LEAF_NODE	53:8	53:8	10	TIFFVSetMethod
NAME	53:24	53:24	8	vsetparent
LEAF_NODE	53:24	53:24	9	vsetparent
LEAF_NODE	53:34	53:34	7	;
LEAF_NODE	54:0	54:0	5	}
NAME	54:2	54:2	3	ZSTDState
LEAF_NODE	54:2	54:2	4	ZSTDState
LEAF_NODE	54:11	54:11	2	;
FUNCTION_DEF	63:0	68:0	1	
RETURN_TYPE	63:0	63:7	2	static int
LEAF_NODE	63:0	63:0	3	static
TYPE_NAME	63:7	63:7	3	int
LEAF_NODE	63:7	63:7	4	int
FUNCTION_NAME	64:0	64:0	2	ZSTDFixupTags
LEAF_NODE	64:0	64:0	3	ZSTDFixupTags
PARAMETER_LIST	64:13	64:23	2	( TIFF * tif )
LEAF_NODE	64:13	64:13	3	(
PARAMETER_DECL	64:14	64:20	3	TIFF * tif
TYPE	64:14	64:18	4	TIFF *
TYPE_NAME	64:14	64:14	5	TIFF
LEAF_NODE	64:14	64:14	6	TIFF
POINTER	64:18	64:18	5	*
LEAF_NODE	64:18	64:18	6	*
NAME	64:20	64:20	4	tif
LEAF_NODE	64:20	64:20	5	tif
LEAF_NODE	64:23	64:23	3	)
LEAF_NODE	65:0	65:0	2	{
STATEMENTS	66:8	67:8	2	
EXPR_STATEMENT	66:8	66:18	3	( void ) tif ;
EXPR	66:8	66:15	4	( void ) tif
LEAF_NODE	66:8	66:8	5	(
TYPE_NAME	66:9	66:9	5	void
LEAF_NODE	66:9	66:9	6	void
LEAF_NODE	66:13	66:13	5	)
FIELD	66:15	66:15	5	tif
LEAF_NODE	66:15	66:15	6	tif
LEAF_NODE	66:18	66:18	4	;
JUMP_STATEMENT	67:8	67:16	3	return 1 ;
KEYWORD	67:8	67:8	4	return
LEAF_NODE	67:8	67:8	5	return
DESTINATION	67:15	67:15	4	1
EXPR	67:15	67:15	5	1
FIELD	67:15	67:15	6	1
LEAF_NODE	67:15	67:15	7	1
LEAF_NODE	67:16	67:16	4	;
LEAF_NODE	68:0	68:0	2	}
FUNCTION_DEF	70:0	86:0	1	
RETURN_TYPE	70:0	70:7	2	static int
LEAF_NODE	70:0	70:0	3	static
TYPE_NAME	70:7	70:7	3	int
LEAF_NODE	70:7	70:7	4	int
FUNCTION_NAME	71:0	71:0	2	ZSTDSetupDecode
LEAF_NODE	71:0	71:0	3	ZSTDSetupDecode
PARAMETER_LIST	71:15	71:25	2	( TIFF * tif )
LEAF_NODE	71:15	71:15	3	(
PARAMETER_DECL	71:16	71:22	3	TIFF * tif
TYPE	71:16	71:20	4	TIFF *
TYPE_NAME	71:16	71:16	5	TIFF
LEAF_NODE	71:16	71:16	6	TIFF
POINTER	71:20	71:20	5	*
LEAF_NODE	71:20	71:20	6	*
NAME	71:22	71:22	4	tif
LEAF_NODE	71:22	71:22	5	tif
LEAF_NODE	71:25	71:25	3	)
LEAF_NODE	72:0	72:0	2	{
STATEMENTS	73:8	85:8	2	
SIMPLE_DECL	73:8	73:41	3	ZSTDState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	73:8	73:19	4	ZSTDState * sp ; sp = DecoderState ( tif )
TYPE	73:8	73:17	5	ZSTDState *
TYPE_NAME	73:8	73:8	6	ZSTDState
LEAF_NODE	73:8	73:8	7	ZSTDState
POINTER	73:17	73:17	6	*
LEAF_NODE	73:17	73:17	7	*
NAME	73:19	73:19	5	sp
LEAF_NODE	73:19	73:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	73:19	73:19	5	sp = DecoderState ( tif )
ASSIGN	73:19	73:24	6	sp = DecoderState ( tif )
LVAL	73:19	73:19	7	sp
NAME	73:19	73:19	8	sp
LEAF_NODE	73:19	73:19	9	sp
ASSIGN_OP	73:22	73:22	7	=
LEAF_NODE	73:22	73:22	8	=
RVAL	73:24	73:24	7	DecoderState ( tif )
FUNCTION_CALL	73:24	73:40	8	DecoderState ( tif )
CALLEE	73:24	73:24	9	DecoderState
LEAF_NODE	73:24	73:24	10	DecoderState
LEAF_NODE	73:36	73:36	9	(
ARGUMENT	73:37	73:37	9	tif
FIELD	73:37	73:37	10	tif
LEAF_NODE	73:37	73:37	11	tif
LEAF_NODE	73:40	73:40	9	)
LEAF_NODE	73:41	73:41	4	;
EXPR_STATEMENT	75:8	75:26	3	assert ( sp != NULL ) ;
EXPR	75:8	75:8	4	assert ( sp != NULL )
FUNCTION_CALL	75:8	75:25	5	assert ( sp != NULL )
CALLEE	75:8	75:8	6	assert
LEAF_NODE	75:8	75:8	7	assert
LEAF_NODE	75:14	75:14	6	(
ARGUMENT	75:15	75:21	6	sp != NULL
FIELD	75:15	75:15	7	sp
LEAF_NODE	75:15	75:15	8	sp
EQ_OPERATOR	75:18	75:18	7	!=
LEAF_NODE	75:18	75:18	8	!=
FIELD	75:21	75:21	7	NULL
LEAF_NODE	75:21	75:21	8	NULL
LEAF_NODE	75:25	75:25	6	)
LEAF_NODE	75:26	75:26	4	;
SELECTION	78:8	78:44	3	
KEYWORD	78:8	78:8	4	if
LEAF_NODE	78:8	78:8	5	if
LEAF_NODE	78:11	78:11	4	(
CONDITION	78:12	78:12	4	sp -> state & LSTATE_INIT_ENCODE
EXPR	78:12	78:24	5	sp -> state & LSTATE_INIT_ENCODE
FIELD	78:12	78:16	6	sp -> state
LEAF_NODE	78:12	78:12	7	sp
LEAF_NODE	78:14	78:14	7	->
LEAF_NODE	78:16	78:16	7	state
LEAF_NODE	78:22	78:22	6	&
FIELD	78:24	78:24	6	LSTATE_INIT_ENCODE
LEAF_NODE	78:24	78:24	7	LSTATE_INIT_ENCODE
LEAF_NODE	78:42	78:42	4	)
STATEMENTS	78:44	82:8	4	
LEAF_NODE	78:44	78:44	5	{
STATEMENTS	79:12	81:12	5	
EXPR_STATEMENT	79:12	79:41	6	ZSTD_freeCStream ( sp -> cstream ) ;
EXPR	79:12	79:12	7	ZSTD_freeCStream ( sp -> cstream )
FUNCTION_CALL	79:12	79:40	8	ZSTD_freeCStream ( sp -> cstream )
CALLEE	79:12	79:12	9	ZSTD_freeCStream
LEAF_NODE	79:12	79:12	10	ZSTD_freeCStream
LEAF_NODE	79:28	79:28	9	(
ARGUMENT	79:29	79:29	9	sp -> cstream
FIELD	79:29	79:33	10	sp -> cstream
LEAF_NODE	79:29	79:29	11	sp
LEAF_NODE	79:31	79:31	11	->
LEAF_NODE	79:33	79:33	11	cstream
LEAF_NODE	79:40	79:40	9	)
LEAF_NODE	79:41	79:41	7	;
EXPR_STATEMENT	80:12	80:30	6	sp -> cstream = NULL ;
EXPR	80:12	80:12	7	sp -> cstream = NULL
ASSIGN	80:12	80:26	8	sp -> cstream = NULL
LVAL	80:12	80:12	9	sp -> cstream
FIELD	80:12	80:16	10	sp -> cstream
LEAF_NODE	80:12	80:12	11	sp
LEAF_NODE	80:14	80:14	11	->
LEAF_NODE	80:16	80:16	11	cstream
ASSIGN_OP	80:24	80:24	9	=
LEAF_NODE	80:24	80:24	10	=
RVAL	80:26	80:26	9	NULL
FIELD	80:26	80:26	10	NULL
LEAF_NODE	80:26	80:26	11	NULL
LEAF_NODE	80:30	80:30	7	;
EXPR_STATEMENT	81:12	81:25	6	sp -> state = 0 ;
EXPR	81:12	81:12	7	sp -> state = 0
ASSIGN	81:12	81:24	8	sp -> state = 0
LVAL	81:12	81:12	9	sp -> state
FIELD	81:12	81:16	10	sp -> state
LEAF_NODE	81:12	81:12	11	sp
LEAF_NODE	81:14	81:14	11	->
LEAF_NODE	81:16	81:16	11	state
ASSIGN_OP	81:22	81:22	9	=
LEAF_NODE	81:22	81:22	10	=
RVAL	81:24	81:24	9	0
FIELD	81:24	81:24	10	0
LEAF_NODE	81:24	81:24	11	0
LEAF_NODE	81:25	81:25	7	;
LEAF_NODE	82:8	82:8	5	}
EXPR_STATEMENT	84:8	84:39	3	sp -> state |= LSTATE_INIT_DECODE ;
EXPR	84:8	84:8	4	sp -> state |= LSTATE_INIT_DECODE
ASSIGN	84:8	84:21	5	sp -> state |= LSTATE_INIT_DECODE
LVAL	84:8	84:8	6	sp -> state
FIELD	84:8	84:12	7	sp -> state
LEAF_NODE	84:8	84:8	8	sp
LEAF_NODE	84:10	84:10	8	->
LEAF_NODE	84:12	84:12	8	state
ASSIGN_OP	84:18	84:18	6	|=
LEAF_NODE	84:18	84:18	7	|=
RVAL	84:21	84:21	6	LSTATE_INIT_DECODE
FIELD	84:21	84:21	7	LSTATE_INIT_DECODE
LEAF_NODE	84:21	84:21	8	LSTATE_INIT_DECODE
LEAF_NODE	84:39	84:39	4	;
JUMP_STATEMENT	85:8	85:16	3	return 1 ;
KEYWORD	85:8	85:8	4	return
LEAF_NODE	85:8	85:8	5	return
DESTINATION	85:15	85:15	4	1
EXPR	85:15	85:15	5	1
FIELD	85:15	85:15	6	1
LEAF_NODE	85:15	85:15	7	1
LEAF_NODE	85:16	85:16	4	;
LEAF_NODE	86:0	86:0	2	}
FUNCTION_DEF	91:0	125:0	1	
RETURN_TYPE	91:0	91:7	2	static int
LEAF_NODE	91:0	91:0	3	static
TYPE_NAME	91:7	91:7	3	int
LEAF_NODE	91:7	91:7	4	int
FUNCTION_NAME	92:0	92:0	2	ZSTDPreDecode
LEAF_NODE	92:0	92:0	3	ZSTDPreDecode
PARAMETER_LIST	92:13	92:33	2	( TIFF * tif , uint16 s )
LEAF_NODE	92:13	92:13	3	(
PARAMETER_DECL	92:14	92:20	3	TIFF * tif
TYPE	92:14	92:18	4	TIFF *
TYPE_NAME	92:14	92:14	5	TIFF
LEAF_NODE	92:14	92:14	6	TIFF
POINTER	92:18	92:18	5	*
LEAF_NODE	92:18	92:18	6	*
NAME	92:20	92:20	4	tif
LEAF_NODE	92:20	92:20	5	tif
LEAF_NODE	92:23	92:23	3	,
PARAMETER_DECL	92:25	92:32	3	uint16 s
TYPE	92:25	92:25	4	uint16
TYPE_NAME	92:25	92:25	5	uint16
LEAF_NODE	92:25	92:25	6	uint16
NAME	92:32	92:32	4	s
LEAF_NODE	92:32	92:32	5	s
LEAF_NODE	92:33	92:33	3	)
LEAF_NODE	93:0	93:0	2	{
STATEMENTS	94:8	124:8	2	
LEAF_NODE	94:8	94:8	3	static
SIMPLE_DECL	94:15	94:52	3	const char [ ] module ; module = "ZSTDPreDecode" ;
VAR_DECL	94:15	94:26	4	const char [ ] module ; module = "ZSTDPreDecode"
TYPE	94:15	94:32	5	const char [ ]
TYPE_NAME	94:15	94:21	6	const char
LEAF_NODE	94:15	94:15	7	const
LEAF_NODE	94:21	94:21	7	char
TYPE_SUFFIX	94:32	94:33	6	[ ]
LEAF_NODE	94:32	94:32	7	[
LEAF_NODE	94:33	94:33	7	]
NAME	94:26	94:26	5	module
LEAF_NODE	94:26	94:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	94:26	94:26	5	module = "ZSTDPreDecode"
ASSIGN	94:26	94:37	6	module = "ZSTDPreDecode"
LVAL	94:26	94:26	7	module
NAME	94:26	94:26	8	module
LEAF_NODE	94:26	94:26	9	module
ASSIGN_OP	94:35	94:35	7	=
LEAF_NODE	94:35	94:35	8	=
RVAL	94:37	94:37	7	"ZSTDPreDecode"
FIELD	94:37	94:37	8	"ZSTDPreDecode"
LEAF_NODE	94:37	94:37	9	"ZSTDPreDecode"
LEAF_NODE	94:52	94:52	4	;
SIMPLE_DECL	95:8	95:41	3	ZSTDState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	95:8	95:19	4	ZSTDState * sp ; sp = DecoderState ( tif )
TYPE	95:8	95:17	5	ZSTDState *
TYPE_NAME	95:8	95:8	6	ZSTDState
LEAF_NODE	95:8	95:8	7	ZSTDState
POINTER	95:17	95:17	6	*
LEAF_NODE	95:17	95:17	7	*
NAME	95:19	95:19	5	sp
LEAF_NODE	95:19	95:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	95:19	95:19	5	sp = DecoderState ( tif )
ASSIGN	95:19	95:24	6	sp = DecoderState ( tif )
LVAL	95:19	95:19	7	sp
NAME	95:19	95:19	8	sp
LEAF_NODE	95:19	95:19	9	sp
ASSIGN_OP	95:22	95:22	7	=
LEAF_NODE	95:22	95:22	8	=
RVAL	95:24	95:24	7	DecoderState ( tif )
FUNCTION_CALL	95:24	95:40	8	DecoderState ( tif )
CALLEE	95:24	95:24	9	DecoderState
LEAF_NODE	95:24	95:24	10	DecoderState
LEAF_NODE	95:36	95:36	9	(
ARGUMENT	95:37	95:37	9	tif
FIELD	95:37	95:37	10	tif
LEAF_NODE	95:37	95:37	11	tif
LEAF_NODE	95:40	95:40	9	)
LEAF_NODE	95:41	95:41	4	;
SIMPLE_DECL	96:8	96:23	3	size_t zstd_ret ;
VAR_DECL	96:8	96:15	4	size_t zstd_ret
TYPE	96:8	96:8	5	size_t
TYPE_NAME	96:8	96:8	6	size_t
LEAF_NODE	96:8	96:8	7	size_t
NAME	96:15	96:15	5	zstd_ret
LEAF_NODE	96:15	96:15	6	zstd_ret
LEAF_NODE	96:23	96:23	4	;
EXPR_STATEMENT	98:8	98:16	3	( void ) s ;
EXPR	98:8	98:15	4	( void ) s
LEAF_NODE	98:8	98:8	5	(
TYPE_NAME	98:9	98:9	5	void
LEAF_NODE	98:9	98:9	6	void
LEAF_NODE	98:13	98:13	5	)
FIELD	98:15	98:15	5	s
LEAF_NODE	98:15	98:15	6	s
LEAF_NODE	98:16	98:16	4	;
EXPR_STATEMENT	99:8	99:26	3	assert ( sp != NULL ) ;
EXPR	99:8	99:8	4	assert ( sp != NULL )
FUNCTION_CALL	99:8	99:25	5	assert ( sp != NULL )
CALLEE	99:8	99:8	6	assert
LEAF_NODE	99:8	99:8	7	assert
LEAF_NODE	99:14	99:14	6	(
ARGUMENT	99:15	99:21	6	sp != NULL
FIELD	99:15	99:15	7	sp
LEAF_NODE	99:15	99:15	8	sp
EQ_OPERATOR	99:18	99:18	7	!=
LEAF_NODE	99:18	99:18	8	!=
FIELD	99:21	99:21	7	NULL
LEAF_NODE	99:21	99:21	8	NULL
LEAF_NODE	99:25	99:25	6	)
LEAF_NODE	99:26	99:26	4	;
SELECTION	101:8	102:12	3	
KEYWORD	101:8	101:8	4	if
LEAF_NODE	101:8	101:8	5	if
LEAF_NODE	101:10	101:10	4	(
CONDITION	101:12	101:12	4	( sp -> state & LSTATE_INIT_DECODE ) == 0
EXPR	101:12	101:48	5	( sp -> state & LSTATE_INIT_DECODE ) == 0
LEAF_NODE	101:12	101:12	6	(
FIELD	101:13	101:17	6	sp -> state
LEAF_NODE	101:13	101:13	7	sp
LEAF_NODE	101:15	101:15	7	->
LEAF_NODE	101:17	101:17	7	state
LEAF_NODE	101:23	101:23	6	&
FIELD	101:25	101:25	6	LSTATE_INIT_DECODE
LEAF_NODE	101:25	101:25	7	LSTATE_INIT_DECODE
LEAF_NODE	101:43	101:43	6	)
EQ_OPERATOR	101:45	101:45	6	==
LEAF_NODE	101:45	101:45	7	==
FIELD	101:48	101:48	6	0
LEAF_NODE	101:48	101:48	7	0
LEAF_NODE	101:50	101:50	4	)
STATEMENTS	102:12	102:12	4	
EXPR_STATEMENT	102:12	102:37	5	tif -> tif_setupdecode ( tif ) ;
EXPR	102:12	102:12	6	tif -> tif_setupdecode ( tif )
FUNCTION_CALL	102:12	102:36	7	tif -> tif_setupdecode ( tif )
CALLEE	102:12	102:17	8	tif -> tif_setupdecode
LEAF_NODE	102:12	102:12	9	tif
LEAF_NODE	102:15	102:15	9	->
LEAF_NODE	102:17	102:17	9	tif_setupdecode
LEAF_NODE	102:32	102:32	8	(
ARGUMENT	102:33	102:33	8	tif
FIELD	102:33	102:33	9	tif
LEAF_NODE	102:33	102:33	10	tif
LEAF_NODE	102:36	102:36	8	)
LEAF_NODE	102:37	102:37	6	;
SELECTION	104:8	105:8	3	
KEYWORD	104:8	104:8	4	if
LEAF_NODE	104:8	104:8	5	if
LEAF_NODE	104:10	104:10	4	(
CONDITION	104:12	104:12	4	sp -> dstream
EXPR	104:12	104:12	5	sp -> dstream
FIELD	104:12	104:16	6	sp -> dstream
LEAF_NODE	104:12	104:12	7	sp
LEAF_NODE	104:14	104:14	7	->
LEAF_NODE	104:16	104:16	7	dstream
LEAF_NODE	104:24	104:24	4	)
STATEMENTS	105:8	108:8	4	
LEAF_NODE	105:8	105:8	5	{
STATEMENTS	106:12	107:12	5	
EXPR_STATEMENT	106:12	106:41	6	ZSTD_freeDStream ( sp -> dstream ) ;
EXPR	106:12	106:12	7	ZSTD_freeDStream ( sp -> dstream )
FUNCTION_CALL	106:12	106:40	8	ZSTD_freeDStream ( sp -> dstream )
CALLEE	106:12	106:12	9	ZSTD_freeDStream
LEAF_NODE	106:12	106:12	10	ZSTD_freeDStream
LEAF_NODE	106:28	106:28	9	(
ARGUMENT	106:29	106:29	9	sp -> dstream
FIELD	106:29	106:33	10	sp -> dstream
LEAF_NODE	106:29	106:29	11	sp
LEAF_NODE	106:31	106:31	11	->
LEAF_NODE	106:33	106:33	11	dstream
LEAF_NODE	106:40	106:40	9	)
LEAF_NODE	106:41	106:41	7	;
EXPR_STATEMENT	107:12	107:30	6	sp -> dstream = NULL ;
EXPR	107:12	107:12	7	sp -> dstream = NULL
ASSIGN	107:12	107:26	8	sp -> dstream = NULL
LVAL	107:12	107:12	9	sp -> dstream
FIELD	107:12	107:16	10	sp -> dstream
LEAF_NODE	107:12	107:12	11	sp
LEAF_NODE	107:14	107:14	11	->
LEAF_NODE	107:16	107:16	11	dstream
ASSIGN_OP	107:24	107:24	9	=
LEAF_NODE	107:24	107:24	10	=
RVAL	107:26	107:26	9	NULL
FIELD	107:26	107:26	10	NULL
LEAF_NODE	107:26	107:26	11	NULL
LEAF_NODE	107:30	107:30	7	;
LEAF_NODE	108:8	108:8	5	}
EXPR_STATEMENT	110:8	110:42	3	sp -> dstream = ZSTD_createDStream ( ) ;
EXPR	110:8	110:8	4	sp -> dstream = ZSTD_createDStream ( )
ASSIGN	110:8	110:22	5	sp -> dstream = ZSTD_createDStream ( )
LVAL	110:8	110:8	6	sp -> dstream
FIELD	110:8	110:12	7	sp -> dstream
LEAF_NODE	110:8	110:8	8	sp
LEAF_NODE	110:10	110:10	8	->
LEAF_NODE	110:12	110:12	8	dstream
ASSIGN_OP	110:20	110:20	6	=
LEAF_NODE	110:20	110:20	7	=
RVAL	110:22	110:22	6	ZSTD_createDStream ( )
FUNCTION_CALL	110:22	110:41	7	ZSTD_createDStream ( )
CALLEE	110:22	110:22	8	ZSTD_createDStream
LEAF_NODE	110:22	110:22	9	ZSTD_createDStream
LEAF_NODE	110:40	110:40	8	(
LEAF_NODE	110:41	110:41	8	)
LEAF_NODE	110:42	110:42	4	;
SELECTION	111:8	111:34	3	
KEYWORD	111:8	111:8	4	if
LEAF_NODE	111:8	111:8	5	if
LEAF_NODE	111:10	111:10	4	(
CONDITION	111:12	111:12	4	sp -> dstream == NULL
EXPR	111:12	111:27	5	sp -> dstream == NULL
FIELD	111:12	111:16	6	sp -> dstream
LEAF_NODE	111:12	111:12	7	sp
LEAF_NODE	111:14	111:14	7	->
LEAF_NODE	111:16	111:16	7	dstream
EQ_OPERATOR	111:24	111:24	6	==
LEAF_NODE	111:24	111:24	7	==
FIELD	111:27	111:27	6	NULL
LEAF_NODE	111:27	111:27	7	NULL
LEAF_NODE	111:32	111:32	4	)
STATEMENTS	111:34	115:8	4	
LEAF_NODE	111:34	111:34	5	{
STATEMENTS	112:12	114:12	5	
EXPR_STATEMENT	112:12	113:64	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate decompression stream" ) ;
EXPR	112:12	112:12	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate decompression stream" )
FUNCTION_CALL	112:12	113:63	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate decompression stream" )
CALLEE	112:12	112:12	9	TIFFErrorExt
LEAF_NODE	112:12	112:12	10	TIFFErrorExt
LEAF_NODE	112:24	112:24	9	(
ARGUMENT	112:25	112:25	9	tif -> tif_clientdata
FIELD	112:25	112:30	10	tif -> tif_clientdata
LEAF_NODE	112:25	112:25	11	tif
LEAF_NODE	112:28	112:28	11	->
LEAF_NODE	112:30	112:30	11	tif_clientdata
LEAF_NODE	112:44	112:44	9	,
ARGUMENT	112:46	112:46	9	module
FIELD	112:46	112:46	10	module
LEAF_NODE	112:46	112:46	11	module
LEAF_NODE	112:52	112:52	9	,
ARGUMENT	113:25	113:25	9	"Cannot allocate decompression stream"
FIELD	113:25	113:25	10	"Cannot allocate decompression stream"
LEAF_NODE	113:25	113:25	11	"Cannot allocate decompression stream"
LEAF_NODE	113:63	113:63	9	)
LEAF_NODE	113:64	113:64	7	;
JUMP_STATEMENT	114:12	114:20	6	return 0 ;
KEYWORD	114:12	114:12	7	return
LEAF_NODE	114:12	114:12	8	return
DESTINATION	114:19	114:19	7	0
EXPR	114:19	114:19	8	0
FIELD	114:19	114:19	9	0
LEAF_NODE	114:19	114:19	10	0
LEAF_NODE	114:20	114:20	7	;
LEAF_NODE	115:8	115:8	5	}
EXPR_STATEMENT	116:8	116:48	3	zstd_ret = ZSTD_initDStream ( sp -> dstream ) ;
EXPR	116:8	116:8	4	zstd_ret = ZSTD_initDStream ( sp -> dstream )
ASSIGN	116:8	116:19	5	zstd_ret = ZSTD_initDStream ( sp -> dstream )
LVAL	116:8	116:8	6	zstd_ret
FIELD	116:8	116:8	7	zstd_ret
LEAF_NODE	116:8	116:8	8	zstd_ret
ASSIGN_OP	116:17	116:17	6	=
LEAF_NODE	116:17	116:17	7	=
RVAL	116:19	116:19	6	ZSTD_initDStream ( sp -> dstream )
FUNCTION_CALL	116:19	116:47	7	ZSTD_initDStream ( sp -> dstream )
CALLEE	116:19	116:19	8	ZSTD_initDStream
LEAF_NODE	116:19	116:19	9	ZSTD_initDStream
LEAF_NODE	116:35	116:35	8	(
ARGUMENT	116:36	116:36	8	sp -> dstream
FIELD	116:36	116:40	9	sp -> dstream
LEAF_NODE	116:36	116:36	10	sp
LEAF_NODE	116:38	116:38	10	->
LEAF_NODE	116:40	116:40	10	dstream
LEAF_NODE	116:47	116:47	8	)
LEAF_NODE	116:48	116:48	4	;
SELECTION	117:8	117:37	3	
KEYWORD	117:8	117:8	4	if
LEAF_NODE	117:8	117:8	5	if
LEAF_NODE	117:10	117:10	4	(
CONDITION	117:12	117:12	4	ZSTD_isError ( zstd_ret )
EXPR	117:12	117:12	5	ZSTD_isError ( zstd_ret )
FUNCTION_CALL	117:12	117:33	6	ZSTD_isError ( zstd_ret )
CALLEE	117:12	117:12	7	ZSTD_isError
LEAF_NODE	117:12	117:12	8	ZSTD_isError
LEAF_NODE	117:24	117:24	7	(
ARGUMENT	117:25	117:25	7	zstd_ret
FIELD	117:25	117:25	8	zstd_ret
LEAF_NODE	117:25	117:25	9	zstd_ret
LEAF_NODE	117:33	117:33	7	)
LEAF_NODE	117:35	117:35	4	)
STATEMENTS	117:37	122:8	4	
LEAF_NODE	117:37	117:37	5	{
STATEMENTS	118:12	121:12	5	
EXPR_STATEMENT	118:12	120:53	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_initDStream(): %s" , ZSTD_getErrorName ( zstd_ret ) ) ;
EXPR	118:12	118:12	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_initDStream(): %s" , ZSTD_getErrorName ( zstd_ret ) )
FUNCTION_CALL	118:12	120:52	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_initDStream(): %s" , ZSTD_getErrorName ( zstd_ret ) )
CALLEE	118:12	118:12	9	TIFFErrorExt
LEAF_NODE	118:12	118:12	10	TIFFErrorExt
LEAF_NODE	118:24	118:24	9	(
ARGUMENT	118:25	118:25	9	tif -> tif_clientdata
FIELD	118:25	118:30	10	tif -> tif_clientdata
LEAF_NODE	118:25	118:25	11	tif
LEAF_NODE	118:28	118:28	11	->
LEAF_NODE	118:30	118:30	11	tif_clientdata
LEAF_NODE	118:44	118:44	9	,
ARGUMENT	118:46	118:46	9	module
FIELD	118:46	118:46	10	module
LEAF_NODE	118:46	118:46	11	module
LEAF_NODE	118:52	118:52	9	,
ARGUMENT	119:25	119:25	9	"Error in ZSTD_initDStream(): %s"
FIELD	119:25	119:25	10	"Error in ZSTD_initDStream(): %s"
LEAF_NODE	119:25	119:25	11	"Error in ZSTD_initDStream(): %s"
LEAF_NODE	119:58	119:58	9	,
ARGUMENT	120:25	120:25	9	ZSTD_getErrorName ( zstd_ret )
FUNCTION_CALL	120:25	120:51	10	ZSTD_getErrorName ( zstd_ret )
CALLEE	120:25	120:25	11	ZSTD_getErrorName
LEAF_NODE	120:25	120:25	12	ZSTD_getErrorName
LEAF_NODE	120:42	120:42	11	(
ARGUMENT	120:43	120:43	11	zstd_ret
FIELD	120:43	120:43	12	zstd_ret
LEAF_NODE	120:43	120:43	13	zstd_ret
LEAF_NODE	120:51	120:51	11	)
LEAF_NODE	120:52	120:52	9	)
LEAF_NODE	120:53	120:53	7	;
JUMP_STATEMENT	121:12	121:20	6	return 0 ;
KEYWORD	121:12	121:12	7	return
LEAF_NODE	121:12	121:12	8	return
DESTINATION	121:19	121:19	7	0
EXPR	121:19	121:19	8	0
FIELD	121:19	121:19	9	0
LEAF_NODE	121:19	121:19	10	0
LEAF_NODE	121:20	121:20	7	;
LEAF_NODE	122:8	122:8	5	}
JUMP_STATEMENT	124:8	124:16	3	return 1 ;
KEYWORD	124:8	124:8	4	return
LEAF_NODE	124:8	124:8	5	return
DESTINATION	124:15	124:15	4	1
EXPR	124:15	124:15	5	1
FIELD	124:15	124:15	6	1
LEAF_NODE	124:15	124:15	7	1
LEAF_NODE	124:16	124:16	4	;
LEAF_NODE	125:0	125:0	2	}
FUNCTION_DEF	127:0	173:0	1	
RETURN_TYPE	127:0	127:7	2	static int
LEAF_NODE	127:0	127:0	3	static
TYPE_NAME	127:7	127:7	3	int
LEAF_NODE	127:7	127:7	4	int
FUNCTION_NAME	128:0	128:0	2	ZSTDDecode
LEAF_NODE	128:0	128:0	3	ZSTDDecode
PARAMETER_LIST	128:10	128:55	2	( TIFF * tif , uint8 * op , tmsize_t occ , uint16 s )
LEAF_NODE	128:10	128:10	3	(
PARAMETER_DECL	128:11	128:17	3	TIFF * tif
TYPE	128:11	128:15	4	TIFF *
TYPE_NAME	128:11	128:11	5	TIFF
LEAF_NODE	128:11	128:11	6	TIFF
POINTER	128:15	128:15	5	*
LEAF_NODE	128:15	128:15	6	*
NAME	128:17	128:17	4	tif
LEAF_NODE	128:17	128:17	5	tif
LEAF_NODE	128:20	128:20	3	,
PARAMETER_DECL	128:22	128:29	3	uint8 * op
TYPE	128:22	128:27	4	uint8 *
TYPE_NAME	128:22	128:22	5	uint8
LEAF_NODE	128:22	128:22	6	uint8
POINTER	128:27	128:27	5	*
LEAF_NODE	128:27	128:27	6	*
NAME	128:29	128:29	4	op
LEAF_NODE	128:29	128:29	5	op
LEAF_NODE	128:31	128:31	3	,
PARAMETER_DECL	128:33	128:42	3	tmsize_t occ
TYPE	128:33	128:33	4	tmsize_t
TYPE_NAME	128:33	128:33	5	tmsize_t
LEAF_NODE	128:33	128:33	6	tmsize_t
NAME	128:42	128:42	4	occ
LEAF_NODE	128:42	128:42	5	occ
LEAF_NODE	128:45	128:45	3	,
PARAMETER_DECL	128:47	128:54	3	uint16 s
TYPE	128:47	128:47	4	uint16
TYPE_NAME	128:47	128:47	5	uint16
LEAF_NODE	128:47	128:47	6	uint16
NAME	128:54	128:54	4	s
LEAF_NODE	128:54	128:54	5	s
LEAF_NODE	128:55	128:55	3	)
LEAF_NODE	129:0	129:0	2	{
STATEMENTS	130:8	172:8	2	
LEAF_NODE	130:8	130:8	3	static
SIMPLE_DECL	130:15	130:49	3	const char [ ] module ; module = "ZSTDDecode" ;
VAR_DECL	130:15	130:26	4	const char [ ] module ; module = "ZSTDDecode"
TYPE	130:15	130:32	5	const char [ ]
TYPE_NAME	130:15	130:21	6	const char
LEAF_NODE	130:15	130:15	7	const
LEAF_NODE	130:21	130:21	7	char
TYPE_SUFFIX	130:32	130:33	6	[ ]
LEAF_NODE	130:32	130:32	7	[
LEAF_NODE	130:33	130:33	7	]
NAME	130:26	130:26	5	module
LEAF_NODE	130:26	130:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	130:26	130:26	5	module = "ZSTDDecode"
ASSIGN	130:26	130:37	6	module = "ZSTDDecode"
LVAL	130:26	130:26	7	module
NAME	130:26	130:26	8	module
LEAF_NODE	130:26	130:26	9	module
ASSIGN_OP	130:35	130:35	7	=
LEAF_NODE	130:35	130:35	8	=
RVAL	130:37	130:37	7	"ZSTDDecode"
FIELD	130:37	130:37	8	"ZSTDDecode"
LEAF_NODE	130:37	130:37	9	"ZSTDDecode"
LEAF_NODE	130:49	130:49	4	;
SIMPLE_DECL	131:8	131:41	3	ZSTDState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	131:8	131:19	4	ZSTDState * sp ; sp = DecoderState ( tif )
TYPE	131:8	131:17	5	ZSTDState *
TYPE_NAME	131:8	131:8	6	ZSTDState
LEAF_NODE	131:8	131:8	7	ZSTDState
POINTER	131:17	131:17	6	*
LEAF_NODE	131:17	131:17	7	*
NAME	131:19	131:19	5	sp
LEAF_NODE	131:19	131:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	131:19	131:19	5	sp = DecoderState ( tif )
ASSIGN	131:19	131:24	6	sp = DecoderState ( tif )
LVAL	131:19	131:19	7	sp
NAME	131:19	131:19	8	sp
LEAF_NODE	131:19	131:19	9	sp
ASSIGN_OP	131:22	131:22	7	=
LEAF_NODE	131:22	131:22	8	=
RVAL	131:24	131:24	7	DecoderState ( tif )
FUNCTION_CALL	131:24	131:40	8	DecoderState ( tif )
CALLEE	131:24	131:24	9	DecoderState
LEAF_NODE	131:24	131:24	10	DecoderState
LEAF_NODE	131:36	131:36	9	(
ARGUMENT	131:37	131:37	9	tif
FIELD	131:37	131:37	10	tif
LEAF_NODE	131:37	131:37	11	tif
LEAF_NODE	131:40	131:40	9	)
LEAF_NODE	131:41	131:41	4	;
SIMPLE_DECL	132:8	132:33	3	ZSTD_inBuffer in_buffer ;
VAR_DECL	132:8	132:24	4	ZSTD_inBuffer in_buffer
TYPE	132:8	132:8	5	ZSTD_inBuffer
TYPE_NAME	132:8	132:8	6	ZSTD_inBuffer
LEAF_NODE	132:8	132:8	7	ZSTD_inBuffer
NAME	132:24	132:24	5	in_buffer
LEAF_NODE	132:24	132:24	6	in_buffer
LEAF_NODE	132:33	132:33	4	;
SIMPLE_DECL	133:8	133:34	3	ZSTD_outBuffer out_buffer ;
VAR_DECL	133:8	133:24	4	ZSTD_outBuffer out_buffer
TYPE	133:8	133:8	5	ZSTD_outBuffer
TYPE_NAME	133:8	133:8	6	ZSTD_outBuffer
LEAF_NODE	133:8	133:8	7	ZSTD_outBuffer
NAME	133:24	133:24	5	out_buffer
LEAF_NODE	133:24	133:24	6	out_buffer
LEAF_NODE	133:34	133:34	4	;
SIMPLE_DECL	134:8	134:32	3	size_t zstd_ret ;
VAR_DECL	134:8	134:24	4	size_t zstd_ret
TYPE	134:8	134:8	5	size_t
TYPE_NAME	134:8	134:8	6	size_t
LEAF_NODE	134:8	134:8	7	size_t
NAME	134:24	134:24	5	zstd_ret
LEAF_NODE	134:24	134:24	6	zstd_ret
LEAF_NODE	134:32	134:32	4	;
EXPR_STATEMENT	136:8	136:16	3	( void ) s ;
EXPR	136:8	136:15	4	( void ) s
LEAF_NODE	136:8	136:8	5	(
TYPE_NAME	136:9	136:9	5	void
LEAF_NODE	136:9	136:9	6	void
LEAF_NODE	136:13	136:13	5	)
FIELD	136:15	136:15	5	s
LEAF_NODE	136:15	136:15	6	s
LEAF_NODE	136:16	136:16	4	;
EXPR_STATEMENT	137:8	137:26	3	assert ( sp != NULL ) ;
EXPR	137:8	137:8	4	assert ( sp != NULL )
FUNCTION_CALL	137:8	137:25	5	assert ( sp != NULL )
CALLEE	137:8	137:8	6	assert
LEAF_NODE	137:8	137:8	7	assert
LEAF_NODE	137:14	137:14	6	(
ARGUMENT	137:15	137:21	6	sp != NULL
FIELD	137:15	137:15	7	sp
LEAF_NODE	137:15	137:15	8	sp
EQ_OPERATOR	137:18	137:18	7	!=
LEAF_NODE	137:18	137:18	8	!=
FIELD	137:21	137:21	7	NULL
LEAF_NODE	137:21	137:21	8	NULL
LEAF_NODE	137:25	137:25	6	)
LEAF_NODE	137:26	137:26	4	;
EXPR_STATEMENT	138:8	138:47	3	assert ( sp -> state == LSTATE_INIT_DECODE ) ;
EXPR	138:8	138:8	4	assert ( sp -> state == LSTATE_INIT_DECODE )
FUNCTION_CALL	138:8	138:46	5	assert ( sp -> state == LSTATE_INIT_DECODE )
CALLEE	138:8	138:8	6	assert
LEAF_NODE	138:8	138:8	7	assert
LEAF_NODE	138:14	138:14	6	(
ARGUMENT	138:15	138:28	6	sp -> state == LSTATE_INIT_DECODE
FIELD	138:15	138:19	7	sp -> state
LEAF_NODE	138:15	138:15	8	sp
LEAF_NODE	138:17	138:17	8	->
LEAF_NODE	138:19	138:19	8	state
EQ_OPERATOR	138:25	138:25	7	==
LEAF_NODE	138:25	138:25	8	==
FIELD	138:28	138:28	7	LSTATE_INIT_DECODE
LEAF_NODE	138:28	138:28	8	LSTATE_INIT_DECODE
LEAF_NODE	138:46	138:46	6	)
LEAF_NODE	138:47	138:47	4	;
EXPR_STATEMENT	140:8	140:38	3	in_buffer . src = tif -> tif_rawcp ;
EXPR	140:8	140:8	4	in_buffer . src = tif -> tif_rawcp
ASSIGN	140:8	140:24	5	in_buffer . src = tif -> tif_rawcp
LVAL	140:8	140:8	6	in_buffer . src
FIELD	140:8	140:18	7	in_buffer . src
LEAF_NODE	140:8	140:8	8	in_buffer
LEAF_NODE	140:17	140:17	8	.
LEAF_NODE	140:18	140:18	8	src
ASSIGN_OP	140:22	140:22	6	=
LEAF_NODE	140:22	140:22	7	=
RVAL	140:24	140:24	6	tif -> tif_rawcp
FIELD	140:24	140:29	7	tif -> tif_rawcp
LEAF_NODE	140:24	140:24	8	tif
LEAF_NODE	140:27	140:27	8	->
LEAF_NODE	140:29	140:29	8	tif_rawcp
LEAF_NODE	140:38	140:38	4	;
EXPR_STATEMENT	141:8	141:48	3	in_buffer . size = ( size_t ) tif -> tif_rawcc ;
EXPR	141:8	141:8	4	in_buffer . size = ( size_t ) tif -> tif_rawcc
ASSIGN	141:8	141:25	5	in_buffer . size = ( size_t ) tif -> tif_rawcc
LVAL	141:8	141:8	6	in_buffer . size
FIELD	141:8	141:18	7	in_buffer . size
LEAF_NODE	141:8	141:8	8	in_buffer
LEAF_NODE	141:17	141:17	8	.
LEAF_NODE	141:18	141:18	8	size
ASSIGN_OP	141:23	141:23	6	=
LEAF_NODE	141:23	141:23	7	=
RVAL	141:25	141:34	6	( size_t ) tif -> tif_rawcc
LEAF_NODE	141:25	141:25	7	(
TYPE_NAME	141:26	141:26	7	size_t
LEAF_NODE	141:26	141:26	8	size_t
LEAF_NODE	141:32	141:32	7	)
FIELD	141:34	141:39	7	tif -> tif_rawcc
LEAF_NODE	141:34	141:34	8	tif
LEAF_NODE	141:37	141:37	8	->
LEAF_NODE	141:39	141:39	8	tif_rawcc
LEAF_NODE	141:48	141:48	4	;
EXPR_STATEMENT	142:8	142:25	3	in_buffer . pos = 0 ;
EXPR	142:8	142:8	4	in_buffer . pos = 0
ASSIGN	142:8	142:24	5	in_buffer . pos = 0
LVAL	142:8	142:8	6	in_buffer . pos
FIELD	142:8	142:18	7	in_buffer . pos
LEAF_NODE	142:8	142:8	8	in_buffer
LEAF_NODE	142:17	142:17	8	.
LEAF_NODE	142:18	142:18	8	pos
ASSIGN_OP	142:22	142:22	6	=
LEAF_NODE	142:22	142:22	7	=
RVAL	142:24	142:24	6	0
FIELD	142:24	142:24	7	0
LEAF_NODE	142:24	142:24	8	0
LEAF_NODE	142:25	142:25	4	;
EXPR_STATEMENT	144:8	144:27	3	out_buffer . dst = op ;
EXPR	144:8	144:8	4	out_buffer . dst = op
ASSIGN	144:8	144:25	5	out_buffer . dst = op
LVAL	144:8	144:8	6	out_buffer . dst
FIELD	144:8	144:19	7	out_buffer . dst
LEAF_NODE	144:8	144:8	8	out_buffer
LEAF_NODE	144:18	144:18	8	.
LEAF_NODE	144:19	144:19	8	dst
ASSIGN_OP	144:23	144:23	6	=
LEAF_NODE	144:23	144:23	7	=
RVAL	144:25	144:25	6	op
FIELD	144:25	144:25	7	op
LEAF_NODE	144:25	144:25	8	op
LEAF_NODE	144:27	144:27	4	;
EXPR_STATEMENT	145:8	145:38	3	out_buffer . size = ( size_t ) occ ;
EXPR	145:8	145:8	4	out_buffer . size = ( size_t ) occ
ASSIGN	145:8	145:26	5	out_buffer . size = ( size_t ) occ
LVAL	145:8	145:8	6	out_buffer . size
FIELD	145:8	145:19	7	out_buffer . size
LEAF_NODE	145:8	145:8	8	out_buffer
LEAF_NODE	145:18	145:18	8	.
LEAF_NODE	145:19	145:19	8	size
ASSIGN_OP	145:24	145:24	6	=
LEAF_NODE	145:24	145:24	7	=
RVAL	145:26	145:35	6	( size_t ) occ
LEAF_NODE	145:26	145:26	7	(
TYPE_NAME	145:27	145:27	7	size_t
LEAF_NODE	145:27	145:27	8	size_t
LEAF_NODE	145:33	145:33	7	)
FIELD	145:35	145:35	7	occ
LEAF_NODE	145:35	145:35	8	occ
LEAF_NODE	145:38	145:38	4	;
EXPR_STATEMENT	146:8	146:26	3	out_buffer . pos = 0 ;
EXPR	146:8	146:8	4	out_buffer . pos = 0
ASSIGN	146:8	146:25	5	out_buffer . pos = 0
LVAL	146:8	146:8	6	out_buffer . pos
FIELD	146:8	146:19	7	out_buffer . pos
LEAF_NODE	146:8	146:8	8	out_buffer
LEAF_NODE	146:18	146:18	8	.
LEAF_NODE	146:19	146:19	8	pos
ASSIGN_OP	146:23	146:23	6	=
LEAF_NODE	146:23	146:23	7	=
RVAL	146:25	146:25	6	0
FIELD	146:25	146:25	7	0
LEAF_NODE	146:25	146:25	8	0
LEAF_NODE	146:26	146:26	4	;
ITERATION	148:8	148:11	3	
KEYWORD	148:8	148:8	4	do
LEAF_NODE	148:8	148:8	5	do
LEAF_NODE	157:15	157:15	4	(
CONDITION	157:17	157:17	4	zstd_ret != 0 && in_buffer . pos < in_buffer . size && out_buffer . pos < out_buffer . size
EXPR	157:17	157:17	5	zstd_ret != 0 && in_buffer . pos < in_buffer . size && out_buffer . pos < out_buffer . size
AND	157:17	158:17	6	zstd_ret != 0 && in_buffer . pos < in_buffer . size && out_buffer . pos < out_buffer . size
EXPR	157:17	157:29	7	zstd_ret != 0
FIELD	157:17	157:17	8	zstd_ret
LEAF_NODE	157:17	157:17	9	zstd_ret
EQ_OPERATOR	157:26	157:26	8	!=
LEAF_NODE	157:26	157:26	9	!=
FIELD	157:29	157:29	8	0
LEAF_NODE	157:29	157:29	9	0
LEAF_NODE	157:31	157:31	7	&&
EXPR	158:17	158:17	7	in_buffer . pos < in_buffer . size && out_buffer . pos < out_buffer . size
AND	158:17	159:17	8	in_buffer . pos < in_buffer . size && out_buffer . pos < out_buffer . size
EXPR	158:17	158:33	9	in_buffer . pos < in_buffer . size
FIELD	158:17	158:27	10	in_buffer . pos
LEAF_NODE	158:17	158:17	11	in_buffer
LEAF_NODE	158:26	158:26	11	.
LEAF_NODE	158:27	158:27	11	pos
REL_OPERATOR	158:31	158:31	10	<
LEAF_NODE	158:31	158:31	11	<
FIELD	158:33	158:43	10	in_buffer . size
LEAF_NODE	158:33	158:33	11	in_buffer
LEAF_NODE	158:42	158:42	11	.
LEAF_NODE	158:43	158:43	11	size
LEAF_NODE	158:48	158:48	9	&&
EXPR	159:17	159:34	9	out_buffer . pos < out_buffer . size
FIELD	159:17	159:28	10	out_buffer . pos
LEAF_NODE	159:17	159:17	11	out_buffer
LEAF_NODE	159:27	159:27	11	.
LEAF_NODE	159:28	159:28	11	pos
REL_OPERATOR	159:32	159:32	10	<
LEAF_NODE	159:32	159:32	11	<
FIELD	159:34	159:45	10	out_buffer . size
LEAF_NODE	159:34	159:34	11	out_buffer
LEAF_NODE	159:44	159:44	11	.
LEAF_NODE	159:45	159:45	11	size
LEAF_NODE	159:50	159:50	4	)
STATEMENTS	148:11	157:8	4	
LEAF_NODE	148:11	148:11	5	{
STATEMENTS	149:16	151:16	5	
EXPR_STATEMENT	149:16	150:60	6	zstd_ret = ZSTD_decompressStream ( sp -> dstream , & out_buffer , & in_buffer ) ;
EXPR	149:16	149:16	7	zstd_ret = ZSTD_decompressStream ( sp -> dstream , & out_buffer , & in_buffer )
ASSIGN	149:16	149:27	8	zstd_ret = ZSTD_decompressStream ( sp -> dstream , & out_buffer , & in_buffer )
LVAL	149:16	149:16	9	zstd_ret
FIELD	149:16	149:16	10	zstd_ret
LEAF_NODE	149:16	149:16	11	zstd_ret
ASSIGN_OP	149:25	149:25	9	=
LEAF_NODE	149:25	149:25	10	=
RVAL	149:27	149:27	9	ZSTD_decompressStream ( sp -> dstream , & out_buffer , & in_buffer )
FUNCTION_CALL	149:27	150:59	10	ZSTD_decompressStream ( sp -> dstream , & out_buffer , & in_buffer )
CALLEE	149:27	149:27	11	ZSTD_decompressStream
LEAF_NODE	149:27	149:27	12	ZSTD_decompressStream
LEAF_NODE	149:48	149:48	11	(
ARGUMENT	149:49	149:49	11	sp -> dstream
FIELD	149:49	149:53	12	sp -> dstream
LEAF_NODE	149:49	149:49	13	sp
LEAF_NODE	149:51	149:51	13	->
LEAF_NODE	149:53	149:53	13	dstream
LEAF_NODE	149:60	149:60	11	,
ARGUMENT	149:62	149:62	11	& out_buffer
UNARY_EXPR	149:62	149:63	12	& out_buffer
UNARY_OPERATOR	149:62	149:62	13	&
LEAF_NODE	149:62	149:62	14	&
FIELD	149:63	149:63	13	out_buffer
LEAF_NODE	149:63	149:63	14	out_buffer
LEAF_NODE	149:73	149:73	11	,
ARGUMENT	150:49	150:49	11	& in_buffer
UNARY_EXPR	150:49	150:50	12	& in_buffer
UNARY_OPERATOR	150:49	150:49	13	&
LEAF_NODE	150:49	150:49	14	&
FIELD	150:50	150:50	13	in_buffer
LEAF_NODE	150:50	150:50	14	in_buffer
LEAF_NODE	150:59	150:59	11	)
LEAF_NODE	150:60	150:60	7	;
SELECTION	151:16	151:45	6	
KEYWORD	151:16	151:16	7	if
LEAF_NODE	151:16	151:16	8	if
LEAF_NODE	151:18	151:18	7	(
CONDITION	151:20	151:20	7	ZSTD_isError ( zstd_ret )
EXPR	151:20	151:20	8	ZSTD_isError ( zstd_ret )
FUNCTION_CALL	151:20	151:41	9	ZSTD_isError ( zstd_ret )
CALLEE	151:20	151:20	10	ZSTD_isError
LEAF_NODE	151:20	151:20	11	ZSTD_isError
LEAF_NODE	151:32	151:32	10	(
ARGUMENT	151:33	151:33	10	zstd_ret
FIELD	151:33	151:33	11	zstd_ret
LEAF_NODE	151:33	151:33	12	zstd_ret
LEAF_NODE	151:41	151:41	10	)
LEAF_NODE	151:43	151:43	7	)
STATEMENTS	151:45	156:16	7	
LEAF_NODE	151:45	151:45	8	{
STATEMENTS	152:20	155:20	8	
EXPR_STATEMENT	152:20	154:60	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_decompressStream(): %s" , ZSTD_getErrorName ( zstd_ret ) ) ;
EXPR	152:20	152:20	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_decompressStream(): %s" , ZSTD_getErrorName ( zstd_ret ) )
FUNCTION_CALL	152:20	154:59	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_decompressStream(): %s" , ZSTD_getErrorName ( zstd_ret ) )
CALLEE	152:20	152:20	12	TIFFErrorExt
LEAF_NODE	152:20	152:20	13	TIFFErrorExt
LEAF_NODE	152:32	152:32	12	(
ARGUMENT	152:33	152:33	12	tif -> tif_clientdata
FIELD	152:33	152:38	13	tif -> tif_clientdata
LEAF_NODE	152:33	152:33	14	tif
LEAF_NODE	152:36	152:36	14	->
LEAF_NODE	152:38	152:38	14	tif_clientdata
LEAF_NODE	152:52	152:52	12	,
ARGUMENT	152:54	152:54	12	module
FIELD	152:54	152:54	13	module
LEAF_NODE	152:54	152:54	14	module
LEAF_NODE	152:60	152:60	12	,
ARGUMENT	153:32	153:32	12	"Error in ZSTD_decompressStream(): %s"
FIELD	153:32	153:32	13	"Error in ZSTD_decompressStream(): %s"
LEAF_NODE	153:32	153:32	14	"Error in ZSTD_decompressStream(): %s"
LEAF_NODE	153:70	153:70	12	,
ARGUMENT	154:32	154:32	12	ZSTD_getErrorName ( zstd_ret )
FUNCTION_CALL	154:32	154:58	13	ZSTD_getErrorName ( zstd_ret )
CALLEE	154:32	154:32	14	ZSTD_getErrorName
LEAF_NODE	154:32	154:32	15	ZSTD_getErrorName
LEAF_NODE	154:49	154:49	14	(
ARGUMENT	154:50	154:50	14	zstd_ret
FIELD	154:50	154:50	15	zstd_ret
LEAF_NODE	154:50	154:50	16	zstd_ret
LEAF_NODE	154:58	154:58	14	)
LEAF_NODE	154:59	154:59	12	)
LEAF_NODE	154:60	154:60	10	;
JUMP_STATEMENT	155:20	155:28	9	return 0 ;
KEYWORD	155:20	155:20	10	return
LEAF_NODE	155:20	155:20	11	return
DESTINATION	155:27	155:27	10	0
EXPR	155:27	155:27	11	0
FIELD	155:27	155:27	12	0
LEAF_NODE	155:27	155:27	13	0
LEAF_NODE	155:28	155:28	10	;
LEAF_NODE	156:16	156:16	8	}
LEAF_NODE	157:8	157:8	5	}
LEAF_NODE	159:51	159:51	3	;
SELECTION	161:8	161:42	3	
KEYWORD	161:8	161:8	4	if
LEAF_NODE	161:8	161:8	5	if
LEAF_NODE	161:11	161:11	4	(
CONDITION	161:12	161:12	4	out_buffer . pos < ( size_t ) occ
EXPR	161:12	161:37	5	out_buffer . pos < ( size_t ) occ
FIELD	161:12	161:23	6	out_buffer . pos
LEAF_NODE	161:12	161:12	7	out_buffer
LEAF_NODE	161:22	161:22	7	.
LEAF_NODE	161:23	161:23	7	pos
REL_OPERATOR	161:27	161:27	6	<
LEAF_NODE	161:27	161:27	7	<
LEAF_NODE	161:29	161:29	6	(
TYPE_NAME	161:30	161:30	6	size_t
LEAF_NODE	161:30	161:30	7	size_t
LEAF_NODE	161:36	161:36	6	)
FIELD	161:37	161:37	6	occ
LEAF_NODE	161:37	161:37	7	occ
LEAF_NODE	161:40	161:40	4	)
STATEMENTS	161:42	167:8	4	
LEAF_NODE	161:42	161:42	5	{
STATEMENTS	162:16	166:16	5	
EXPR_STATEMENT	162:16	165:65	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at scanline %lu (short %lu bytes)" , ( unsigned long ) tif -> tif_row , ( unsigned long ) ( size_t ) occ - out_buffer . pos ) ;
EXPR	162:16	162:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at scanline %lu (short %lu bytes)" , ( unsigned long ) tif -> tif_row , ( unsigned long ) ( size_t ) occ - out_buffer . pos )
FUNCTION_CALL	162:16	165:64	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at scanline %lu (short %lu bytes)" , ( unsigned long ) tif -> tif_row , ( unsigned long ) ( size_t ) occ - out_buffer . pos )
CALLEE	162:16	162:16	9	TIFFErrorExt
LEAF_NODE	162:16	162:16	10	TIFFErrorExt
LEAF_NODE	162:28	162:28	9	(
ARGUMENT	162:29	162:29	9	tif -> tif_clientdata
FIELD	162:29	162:34	10	tif -> tif_clientdata
LEAF_NODE	162:29	162:29	11	tif
LEAF_NODE	162:32	162:32	11	->
LEAF_NODE	162:34	162:34	11	tif_clientdata
LEAF_NODE	162:48	162:48	9	,
ARGUMENT	162:50	162:50	9	module
FIELD	162:50	162:50	10	module
LEAF_NODE	162:50	162:50	11	module
LEAF_NODE	162:56	162:56	9	,
ARGUMENT	163:20	163:20	9	"Not enough data at scanline %lu (short %lu bytes)"
FIELD	163:20	163:20	10	"Not enough data at scanline %lu (short %lu bytes)"
LEAF_NODE	163:20	163:20	11	"Not enough data at scanline %lu (short %lu bytes)"
LEAF_NODE	163:71	163:71	9	,
ARGUMENT	164:20	164:36	9	( unsigned long ) tif -> tif_row
LEAF_NODE	164:20	164:20	10	(
TYPE_NAME	164:21	164:30	10	unsigned long
LEAF_NODE	164:21	164:21	11	unsigned
LEAF_NODE	164:30	164:30	11	long
LEAF_NODE	164:34	164:34	10	)
FIELD	164:36	164:41	10	tif -> tif_row
LEAF_NODE	164:36	164:36	11	tif
LEAF_NODE	164:39	164:39	11	->
LEAF_NODE	164:41	164:41	11	tif_row
LEAF_NODE	164:48	164:48	9	,
ARGUMENT	165:20	165:50	9	( unsigned long ) ( size_t ) occ - out_buffer . pos
LEAF_NODE	165:20	165:20	10	(
TYPE_NAME	165:21	165:30	10	unsigned long
LEAF_NODE	165:21	165:21	11	unsigned
LEAF_NODE	165:30	165:30	11	long
LEAF_NODE	165:34	165:34	10	)
LEAF_NODE	165:36	165:36	10	(
TYPE_NAME	165:37	165:37	10	size_t
LEAF_NODE	165:37	165:37	11	size_t
LEAF_NODE	165:43	165:43	10	)
FIELD	165:44	165:44	10	occ
LEAF_NODE	165:44	165:44	11	occ
LEAF_NODE	165:48	165:48	10	-
FIELD	165:50	165:61	10	out_buffer . pos
LEAF_NODE	165:50	165:50	11	out_buffer
LEAF_NODE	165:60	165:60	11	.
LEAF_NODE	165:61	165:61	11	pos
LEAF_NODE	165:64	165:64	9	)
LEAF_NODE	165:65	165:65	7	;
JUMP_STATEMENT	166:16	166:24	6	return 0 ;
KEYWORD	166:16	166:16	7	return
LEAF_NODE	166:16	166:16	8	return
DESTINATION	166:23	166:23	7	0
EXPR	166:23	166:23	8	0
FIELD	166:23	166:23	9	0
LEAF_NODE	166:23	166:23	10	0
LEAF_NODE	166:24	166:24	7	;
LEAF_NODE	167:8	167:8	5	}
EXPR_STATEMENT	169:8	169:39	3	tif -> tif_rawcp += in_buffer . pos ;
EXPR	169:8	169:8	4	tif -> tif_rawcp += in_buffer . pos
ASSIGN	169:8	169:26	5	tif -> tif_rawcp += in_buffer . pos
LVAL	169:8	169:8	6	tif -> tif_rawcp
FIELD	169:8	169:13	7	tif -> tif_rawcp
LEAF_NODE	169:8	169:8	8	tif
LEAF_NODE	169:11	169:11	8	->
LEAF_NODE	169:13	169:13	8	tif_rawcp
ASSIGN_OP	169:23	169:23	6	+=
LEAF_NODE	169:23	169:23	7	+=
RVAL	169:26	169:26	6	in_buffer . pos
FIELD	169:26	169:36	7	in_buffer . pos
LEAF_NODE	169:26	169:26	8	in_buffer
LEAF_NODE	169:35	169:35	8	.
LEAF_NODE	169:36	169:36	8	pos
LEAF_NODE	169:39	169:39	4	;
EXPR_STATEMENT	170:8	170:39	3	tif -> tif_rawcc -= in_buffer . pos ;
EXPR	170:8	170:8	4	tif -> tif_rawcc -= in_buffer . pos
ASSIGN	170:8	170:26	5	tif -> tif_rawcc -= in_buffer . pos
LVAL	170:8	170:8	6	tif -> tif_rawcc
FIELD	170:8	170:13	7	tif -> tif_rawcc
LEAF_NODE	170:8	170:8	8	tif
LEAF_NODE	170:11	170:11	8	->
LEAF_NODE	170:13	170:13	8	tif_rawcc
ASSIGN_OP	170:23	170:23	6	-=
LEAF_NODE	170:23	170:23	7	-=
RVAL	170:26	170:26	6	in_buffer . pos
FIELD	170:26	170:36	7	in_buffer . pos
LEAF_NODE	170:26	170:26	8	in_buffer
LEAF_NODE	170:35	170:35	8	.
LEAF_NODE	170:36	170:36	8	pos
LEAF_NODE	170:39	170:39	4	;
JUMP_STATEMENT	172:8	172:16	3	return 1 ;
KEYWORD	172:8	172:8	4	return
LEAF_NODE	172:8	172:8	5	return
DESTINATION	172:15	172:15	4	1
EXPR	172:15	172:15	5	1
FIELD	172:15	172:15	6	1
LEAF_NODE	172:15	172:15	7	1
LEAF_NODE	172:16	172:16	4	;
LEAF_NODE	173:0	173:0	2	}
FUNCTION_DEF	175:0	189:0	1	
RETURN_TYPE	175:0	175:7	2	static int
LEAF_NODE	175:0	175:0	3	static
TYPE_NAME	175:7	175:7	3	int
LEAF_NODE	175:7	175:7	4	int
FUNCTION_NAME	176:0	176:0	2	ZSTDSetupEncode
LEAF_NODE	176:0	176:0	3	ZSTDSetupEncode
PARAMETER_LIST	176:15	176:25	2	( TIFF * tif )
LEAF_NODE	176:15	176:15	3	(
PARAMETER_DECL	176:16	176:22	3	TIFF * tif
TYPE	176:16	176:20	4	TIFF *
TYPE_NAME	176:16	176:16	5	TIFF
LEAF_NODE	176:16	176:16	6	TIFF
POINTER	176:20	176:20	5	*
LEAF_NODE	176:20	176:20	6	*
NAME	176:22	176:22	4	tif
LEAF_NODE	176:22	176:22	5	tif
LEAF_NODE	176:25	176:25	3	)
LEAF_NODE	177:0	177:0	2	{
STATEMENTS	178:8	188:8	2	
SIMPLE_DECL	178:8	178:41	3	ZSTDState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	178:8	178:19	4	ZSTDState * sp ; sp = EncoderState ( tif )
TYPE	178:8	178:17	5	ZSTDState *
TYPE_NAME	178:8	178:8	6	ZSTDState
LEAF_NODE	178:8	178:8	7	ZSTDState
POINTER	178:17	178:17	6	*
LEAF_NODE	178:17	178:17	7	*
NAME	178:19	178:19	5	sp
LEAF_NODE	178:19	178:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	178:19	178:19	5	sp = EncoderState ( tif )
ASSIGN	178:19	178:24	6	sp = EncoderState ( tif )
LVAL	178:19	178:19	7	sp
NAME	178:19	178:19	8	sp
LEAF_NODE	178:19	178:19	9	sp
ASSIGN_OP	178:22	178:22	7	=
LEAF_NODE	178:22	178:22	8	=
RVAL	178:24	178:24	7	EncoderState ( tif )
FUNCTION_CALL	178:24	178:40	8	EncoderState ( tif )
CALLEE	178:24	178:24	9	EncoderState
LEAF_NODE	178:24	178:24	10	EncoderState
LEAF_NODE	178:36	178:36	9	(
ARGUMENT	178:37	178:37	9	tif
FIELD	178:37	178:37	10	tif
LEAF_NODE	178:37	178:37	11	tif
LEAF_NODE	178:40	178:40	9	)
LEAF_NODE	178:41	178:41	4	;
EXPR_STATEMENT	180:8	180:26	3	assert ( sp != NULL ) ;
EXPR	180:8	180:8	4	assert ( sp != NULL )
FUNCTION_CALL	180:8	180:25	5	assert ( sp != NULL )
CALLEE	180:8	180:8	6	assert
LEAF_NODE	180:8	180:8	7	assert
LEAF_NODE	180:14	180:14	6	(
ARGUMENT	180:15	180:21	6	sp != NULL
FIELD	180:15	180:15	7	sp
LEAF_NODE	180:15	180:15	8	sp
EQ_OPERATOR	180:18	180:18	7	!=
LEAF_NODE	180:18	180:18	8	!=
FIELD	180:21	180:21	7	NULL
LEAF_NODE	180:21	180:21	8	NULL
LEAF_NODE	180:25	180:25	6	)
LEAF_NODE	180:26	180:26	4	;
SELECTION	181:8	181:44	3	
KEYWORD	181:8	181:8	4	if
LEAF_NODE	181:8	181:8	5	if
LEAF_NODE	181:11	181:11	4	(
CONDITION	181:12	181:12	4	sp -> state & LSTATE_INIT_DECODE
EXPR	181:12	181:24	5	sp -> state & LSTATE_INIT_DECODE
FIELD	181:12	181:16	6	sp -> state
LEAF_NODE	181:12	181:12	7	sp
LEAF_NODE	181:14	181:14	7	->
LEAF_NODE	181:16	181:16	7	state
LEAF_NODE	181:22	181:22	6	&
FIELD	181:24	181:24	6	LSTATE_INIT_DECODE
LEAF_NODE	181:24	181:24	7	LSTATE_INIT_DECODE
LEAF_NODE	181:42	181:42	4	)
STATEMENTS	181:44	185:8	4	
LEAF_NODE	181:44	181:44	5	{
STATEMENTS	182:16	184:16	5	
EXPR_STATEMENT	182:16	182:45	6	ZSTD_freeDStream ( sp -> dstream ) ;
EXPR	182:16	182:16	7	ZSTD_freeDStream ( sp -> dstream )
FUNCTION_CALL	182:16	182:44	8	ZSTD_freeDStream ( sp -> dstream )
CALLEE	182:16	182:16	9	ZSTD_freeDStream
LEAF_NODE	182:16	182:16	10	ZSTD_freeDStream
LEAF_NODE	182:32	182:32	9	(
ARGUMENT	182:33	182:33	9	sp -> dstream
FIELD	182:33	182:37	10	sp -> dstream
LEAF_NODE	182:33	182:33	11	sp
LEAF_NODE	182:35	182:35	11	->
LEAF_NODE	182:37	182:37	11	dstream
LEAF_NODE	182:44	182:44	9	)
LEAF_NODE	182:45	182:45	7	;
EXPR_STATEMENT	183:16	183:34	6	sp -> dstream = NULL ;
EXPR	183:16	183:16	7	sp -> dstream = NULL
ASSIGN	183:16	183:30	8	sp -> dstream = NULL
LVAL	183:16	183:16	9	sp -> dstream
FIELD	183:16	183:20	10	sp -> dstream
LEAF_NODE	183:16	183:16	11	sp
LEAF_NODE	183:18	183:18	11	->
LEAF_NODE	183:20	183:20	11	dstream
ASSIGN_OP	183:28	183:28	9	=
LEAF_NODE	183:28	183:28	10	=
RVAL	183:30	183:30	9	NULL
FIELD	183:30	183:30	10	NULL
LEAF_NODE	183:30	183:30	11	NULL
LEAF_NODE	183:34	183:34	7	;
EXPR_STATEMENT	184:16	184:29	6	sp -> state = 0 ;
EXPR	184:16	184:16	7	sp -> state = 0
ASSIGN	184:16	184:28	8	sp -> state = 0
LVAL	184:16	184:16	9	sp -> state
FIELD	184:16	184:20	10	sp -> state
LEAF_NODE	184:16	184:16	11	sp
LEAF_NODE	184:18	184:18	11	->
LEAF_NODE	184:20	184:20	11	state
ASSIGN_OP	184:26	184:26	9	=
LEAF_NODE	184:26	184:26	10	=
RVAL	184:28	184:28	9	0
FIELD	184:28	184:28	10	0
LEAF_NODE	184:28	184:28	11	0
LEAF_NODE	184:29	184:29	7	;
LEAF_NODE	185:8	185:8	5	}
EXPR_STATEMENT	187:8	187:39	3	sp -> state |= LSTATE_INIT_ENCODE ;
EXPR	187:8	187:8	4	sp -> state |= LSTATE_INIT_ENCODE
ASSIGN	187:8	187:21	5	sp -> state |= LSTATE_INIT_ENCODE
LVAL	187:8	187:8	6	sp -> state
FIELD	187:8	187:12	7	sp -> state
LEAF_NODE	187:8	187:8	8	sp
LEAF_NODE	187:10	187:10	8	->
LEAF_NODE	187:12	187:12	8	state
ASSIGN_OP	187:18	187:18	6	|=
LEAF_NODE	187:18	187:18	7	|=
RVAL	187:21	187:21	6	LSTATE_INIT_ENCODE
FIELD	187:21	187:21	7	LSTATE_INIT_ENCODE
LEAF_NODE	187:21	187:21	8	LSTATE_INIT_ENCODE
LEAF_NODE	187:39	187:39	4	;
JUMP_STATEMENT	188:8	188:16	3	return 1 ;
KEYWORD	188:8	188:8	4	return
LEAF_NODE	188:8	188:8	5	return
DESTINATION	188:15	188:15	4	1
EXPR	188:15	188:15	5	1
FIELD	188:15	188:15	6	1
LEAF_NODE	188:15	188:15	7	1
LEAF_NODE	188:16	188:16	4	;
LEAF_NODE	189:0	189:0	2	}
FUNCTION_DEF	194:0	230:0	1	
RETURN_TYPE	194:0	194:7	2	static int
LEAF_NODE	194:0	194:0	3	static
TYPE_NAME	194:7	194:7	3	int
LEAF_NODE	194:7	194:7	4	int
FUNCTION_NAME	195:0	195:0	2	ZSTDPreEncode
LEAF_NODE	195:0	195:0	3	ZSTDPreEncode
PARAMETER_LIST	195:13	195:33	2	( TIFF * tif , uint16 s )
LEAF_NODE	195:13	195:13	3	(
PARAMETER_DECL	195:14	195:20	3	TIFF * tif
TYPE	195:14	195:18	4	TIFF *
TYPE_NAME	195:14	195:14	5	TIFF
LEAF_NODE	195:14	195:14	6	TIFF
POINTER	195:18	195:18	5	*
LEAF_NODE	195:18	195:18	6	*
NAME	195:20	195:20	4	tif
LEAF_NODE	195:20	195:20	5	tif
LEAF_NODE	195:23	195:23	3	,
PARAMETER_DECL	195:25	195:32	3	uint16 s
TYPE	195:25	195:25	4	uint16
TYPE_NAME	195:25	195:25	5	uint16
LEAF_NODE	195:25	195:25	6	uint16
NAME	195:32	195:32	4	s
LEAF_NODE	195:32	195:32	5	s
LEAF_NODE	195:33	195:33	3	)
LEAF_NODE	196:0	196:0	2	{
STATEMENTS	197:8	229:8	2	
LEAF_NODE	197:8	197:8	3	static
SIMPLE_DECL	197:15	197:52	3	const char [ ] module ; module = "ZSTDPreEncode" ;
VAR_DECL	197:15	197:26	4	const char [ ] module ; module = "ZSTDPreEncode"
TYPE	197:15	197:32	5	const char [ ]
TYPE_NAME	197:15	197:21	6	const char
LEAF_NODE	197:15	197:15	7	const
LEAF_NODE	197:21	197:21	7	char
TYPE_SUFFIX	197:32	197:33	6	[ ]
LEAF_NODE	197:32	197:32	7	[
LEAF_NODE	197:33	197:33	7	]
NAME	197:26	197:26	5	module
LEAF_NODE	197:26	197:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	197:26	197:26	5	module = "ZSTDPreEncode"
ASSIGN	197:26	197:37	6	module = "ZSTDPreEncode"
LVAL	197:26	197:26	7	module
NAME	197:26	197:26	8	module
LEAF_NODE	197:26	197:26	9	module
ASSIGN_OP	197:35	197:35	7	=
LEAF_NODE	197:35	197:35	8	=
RVAL	197:37	197:37	7	"ZSTDPreEncode"
FIELD	197:37	197:37	8	"ZSTDPreEncode"
LEAF_NODE	197:37	197:37	9	"ZSTDPreEncode"
LEAF_NODE	197:52	197:52	4	;
SIMPLE_DECL	198:8	198:41	3	ZSTDState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	198:8	198:19	4	ZSTDState * sp ; sp = EncoderState ( tif )
TYPE	198:8	198:18	5	ZSTDState *
TYPE_NAME	198:8	198:8	6	ZSTDState
LEAF_NODE	198:8	198:8	7	ZSTDState
POINTER	198:18	198:18	6	*
LEAF_NODE	198:18	198:18	7	*
NAME	198:19	198:19	5	sp
LEAF_NODE	198:19	198:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	198:19	198:19	5	sp = EncoderState ( tif )
ASSIGN	198:19	198:24	6	sp = EncoderState ( tif )
LVAL	198:19	198:19	7	sp
NAME	198:19	198:19	8	sp
LEAF_NODE	198:19	198:19	9	sp
ASSIGN_OP	198:22	198:22	7	=
LEAF_NODE	198:22	198:22	8	=
RVAL	198:24	198:24	7	EncoderState ( tif )
FUNCTION_CALL	198:24	198:40	8	EncoderState ( tif )
CALLEE	198:24	198:24	9	EncoderState
LEAF_NODE	198:24	198:24	10	EncoderState
LEAF_NODE	198:36	198:36	9	(
ARGUMENT	198:37	198:37	9	tif
FIELD	198:37	198:37	10	tif
LEAF_NODE	198:37	198:37	11	tif
LEAF_NODE	198:40	198:40	9	)
LEAF_NODE	198:41	198:41	4	;
SIMPLE_DECL	199:8	199:23	3	size_t zstd_ret ;
VAR_DECL	199:8	199:15	4	size_t zstd_ret
TYPE	199:8	199:8	5	size_t
TYPE_NAME	199:8	199:8	6	size_t
LEAF_NODE	199:8	199:8	7	size_t
NAME	199:15	199:15	5	zstd_ret
LEAF_NODE	199:15	199:15	6	zstd_ret
LEAF_NODE	199:23	199:23	4	;
EXPR_STATEMENT	201:8	201:16	3	( void ) s ;
EXPR	201:8	201:15	4	( void ) s
LEAF_NODE	201:8	201:8	5	(
TYPE_NAME	201:9	201:9	5	void
LEAF_NODE	201:9	201:9	6	void
LEAF_NODE	201:13	201:13	5	)
FIELD	201:15	201:15	5	s
LEAF_NODE	201:15	201:15	6	s
LEAF_NODE	201:16	201:16	4	;
EXPR_STATEMENT	202:8	202:26	3	assert ( sp != NULL ) ;
EXPR	202:8	202:8	4	assert ( sp != NULL )
FUNCTION_CALL	202:8	202:25	5	assert ( sp != NULL )
CALLEE	202:8	202:8	6	assert
LEAF_NODE	202:8	202:8	7	assert
LEAF_NODE	202:14	202:14	6	(
ARGUMENT	202:15	202:21	6	sp != NULL
FIELD	202:15	202:15	7	sp
LEAF_NODE	202:15	202:15	8	sp
EQ_OPERATOR	202:18	202:18	7	!=
LEAF_NODE	202:18	202:18	8	!=
FIELD	202:21	202:21	7	NULL
LEAF_NODE	202:21	202:21	8	NULL
LEAF_NODE	202:25	202:25	6	)
LEAF_NODE	202:26	202:26	4	;
SELECTION	203:8	204:12	3	
KEYWORD	203:8	203:8	4	if
LEAF_NODE	203:8	203:8	5	if
LEAF_NODE	203:10	203:10	4	(
CONDITION	203:12	203:12	4	sp -> state != LSTATE_INIT_ENCODE
EXPR	203:12	203:25	5	sp -> state != LSTATE_INIT_ENCODE
FIELD	203:12	203:16	6	sp -> state
LEAF_NODE	203:12	203:12	7	sp
LEAF_NODE	203:14	203:14	7	->
LEAF_NODE	203:16	203:16	7	state
EQ_OPERATOR	203:22	203:22	6	!=
LEAF_NODE	203:22	203:22	7	!=
FIELD	203:25	203:25	6	LSTATE_INIT_ENCODE
LEAF_NODE	203:25	203:25	7	LSTATE_INIT_ENCODE
LEAF_NODE	203:44	203:44	4	)
STATEMENTS	204:12	204:12	4	
EXPR_STATEMENT	204:12	204:37	5	tif -> tif_setupencode ( tif ) ;
EXPR	204:12	204:12	6	tif -> tif_setupencode ( tif )
FUNCTION_CALL	204:12	204:36	7	tif -> tif_setupencode ( tif )
CALLEE	204:12	204:17	8	tif -> tif_setupencode
LEAF_NODE	204:12	204:12	9	tif
LEAF_NODE	204:15	204:15	9	->
LEAF_NODE	204:17	204:17	9	tif_setupencode
LEAF_NODE	204:32	204:32	8	(
ARGUMENT	204:33	204:33	8	tif
FIELD	204:33	204:33	9	tif
LEAF_NODE	204:33	204:33	10	tif
LEAF_NODE	204:36	204:36	8	)
LEAF_NODE	204:37	204:37	6	;
SELECTION	206:8	206:25	3	
KEYWORD	206:8	206:8	4	if
LEAF_NODE	206:8	206:8	5	if
LEAF_NODE	206:11	206:11	4	(
CONDITION	206:12	206:12	4	sp -> cstream
EXPR	206:12	206:12	5	sp -> cstream
FIELD	206:12	206:16	6	sp -> cstream
LEAF_NODE	206:12	206:12	7	sp
LEAF_NODE	206:14	206:14	7	->
LEAF_NODE	206:16	206:16	7	cstream
LEAF_NODE	206:23	206:23	4	)
STATEMENTS	206:25	209:8	4	
LEAF_NODE	206:25	206:25	5	{
STATEMENTS	207:12	208:12	5	
EXPR_STATEMENT	207:12	207:41	6	ZSTD_freeCStream ( sp -> cstream ) ;
EXPR	207:12	207:12	7	ZSTD_freeCStream ( sp -> cstream )
FUNCTION_CALL	207:12	207:40	8	ZSTD_freeCStream ( sp -> cstream )
CALLEE	207:12	207:12	9	ZSTD_freeCStream
LEAF_NODE	207:12	207:12	10	ZSTD_freeCStream
LEAF_NODE	207:28	207:28	9	(
ARGUMENT	207:29	207:29	9	sp -> cstream
FIELD	207:29	207:33	10	sp -> cstream
LEAF_NODE	207:29	207:29	11	sp
LEAF_NODE	207:31	207:31	11	->
LEAF_NODE	207:33	207:33	11	cstream
LEAF_NODE	207:40	207:40	9	)
LEAF_NODE	207:41	207:41	7	;
EXPR_STATEMENT	208:12	208:30	6	sp -> cstream = NULL ;
EXPR	208:12	208:12	7	sp -> cstream = NULL
ASSIGN	208:12	208:26	8	sp -> cstream = NULL
LVAL	208:12	208:12	9	sp -> cstream
FIELD	208:12	208:16	10	sp -> cstream
LEAF_NODE	208:12	208:12	11	sp
LEAF_NODE	208:14	208:14	11	->
LEAF_NODE	208:16	208:16	11	cstream
ASSIGN_OP	208:24	208:24	9	=
LEAF_NODE	208:24	208:24	10	=
RVAL	208:26	208:26	9	NULL
FIELD	208:26	208:26	10	NULL
LEAF_NODE	208:26	208:26	11	NULL
LEAF_NODE	208:30	208:30	7	;
LEAF_NODE	209:8	209:8	5	}
EXPR_STATEMENT	210:8	210:42	3	sp -> cstream = ZSTD_createCStream ( ) ;
EXPR	210:8	210:8	4	sp -> cstream = ZSTD_createCStream ( )
ASSIGN	210:8	210:22	5	sp -> cstream = ZSTD_createCStream ( )
LVAL	210:8	210:8	6	sp -> cstream
FIELD	210:8	210:12	7	sp -> cstream
LEAF_NODE	210:8	210:8	8	sp
LEAF_NODE	210:10	210:10	8	->
LEAF_NODE	210:12	210:12	8	cstream
ASSIGN_OP	210:20	210:20	6	=
LEAF_NODE	210:20	210:20	7	=
RVAL	210:22	210:22	6	ZSTD_createCStream ( )
FUNCTION_CALL	210:22	210:41	7	ZSTD_createCStream ( )
CALLEE	210:22	210:22	8	ZSTD_createCStream
LEAF_NODE	210:22	210:22	9	ZSTD_createCStream
LEAF_NODE	210:40	210:40	8	(
LEAF_NODE	210:41	210:41	8	)
LEAF_NODE	210:42	210:42	4	;
SELECTION	211:8	211:34	3	
KEYWORD	211:8	211:8	4	if
LEAF_NODE	211:8	211:8	5	if
LEAF_NODE	211:10	211:10	4	(
CONDITION	211:12	211:12	4	sp -> cstream == NULL
EXPR	211:12	211:27	5	sp -> cstream == NULL
FIELD	211:12	211:16	6	sp -> cstream
LEAF_NODE	211:12	211:12	7	sp
LEAF_NODE	211:14	211:14	7	->
LEAF_NODE	211:16	211:16	7	cstream
EQ_OPERATOR	211:24	211:24	6	==
LEAF_NODE	211:24	211:24	7	==
FIELD	211:27	211:27	6	NULL
LEAF_NODE	211:27	211:27	7	NULL
LEAF_NODE	211:32	211:32	4	)
STATEMENTS	211:34	215:8	4	
LEAF_NODE	211:34	211:34	5	{
STATEMENTS	212:12	214:12	5	
EXPR_STATEMENT	212:12	213:62	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate compression stream" ) ;
EXPR	212:12	212:12	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate compression stream" )
FUNCTION_CALL	212:12	213:61	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate compression stream" )
CALLEE	212:12	212:12	9	TIFFErrorExt
LEAF_NODE	212:12	212:12	10	TIFFErrorExt
LEAF_NODE	212:24	212:24	9	(
ARGUMENT	212:25	212:25	9	tif -> tif_clientdata
FIELD	212:25	212:30	10	tif -> tif_clientdata
LEAF_NODE	212:25	212:25	11	tif
LEAF_NODE	212:28	212:28	11	->
LEAF_NODE	212:30	212:30	11	tif_clientdata
LEAF_NODE	212:44	212:44	9	,
ARGUMENT	212:46	212:46	9	module
FIELD	212:46	212:46	10	module
LEAF_NODE	212:46	212:46	11	module
LEAF_NODE	212:52	212:52	9	,
ARGUMENT	213:25	213:25	9	"Cannot allocate compression stream"
FIELD	213:25	213:25	10	"Cannot allocate compression stream"
LEAF_NODE	213:25	213:25	11	"Cannot allocate compression stream"
LEAF_NODE	213:61	213:61	9	)
LEAF_NODE	213:62	213:62	7	;
JUMP_STATEMENT	214:12	214:20	6	return 0 ;
KEYWORD	214:12	214:12	7	return
LEAF_NODE	214:12	214:12	8	return
DESTINATION	214:19	214:19	7	0
EXPR	214:19	214:19	8	0
FIELD	214:19	214:19	9	0
LEAF_NODE	214:19	214:19	10	0
LEAF_NODE	214:20	214:20	7	;
LEAF_NODE	215:8	215:8	5	}
EXPR_STATEMENT	217:8	217:71	3	zstd_ret = ZSTD_initCStream ( sp -> cstream , sp -> compression_level ) ;
EXPR	217:8	217:8	4	zstd_ret = ZSTD_initCStream ( sp -> cstream , sp -> compression_level )
ASSIGN	217:8	217:19	5	zstd_ret = ZSTD_initCStream ( sp -> cstream , sp -> compression_level )
LVAL	217:8	217:8	6	zstd_ret
FIELD	217:8	217:8	7	zstd_ret
LEAF_NODE	217:8	217:8	8	zstd_ret
ASSIGN_OP	217:17	217:17	6	=
LEAF_NODE	217:17	217:17	7	=
RVAL	217:19	217:19	6	ZSTD_initCStream ( sp -> cstream , sp -> compression_level )
FUNCTION_CALL	217:19	217:70	7	ZSTD_initCStream ( sp -> cstream , sp -> compression_level )
CALLEE	217:19	217:19	8	ZSTD_initCStream
LEAF_NODE	217:19	217:19	9	ZSTD_initCStream
LEAF_NODE	217:35	217:35	8	(
ARGUMENT	217:36	217:36	8	sp -> cstream
FIELD	217:36	217:40	9	sp -> cstream
LEAF_NODE	217:36	217:36	10	sp
LEAF_NODE	217:38	217:38	10	->
LEAF_NODE	217:40	217:40	10	cstream
LEAF_NODE	217:47	217:47	8	,
ARGUMENT	217:49	217:49	8	sp -> compression_level
FIELD	217:49	217:53	9	sp -> compression_level
LEAF_NODE	217:49	217:49	10	sp
LEAF_NODE	217:51	217:51	10	->
LEAF_NODE	217:53	217:53	10	compression_level
LEAF_NODE	217:70	217:70	8	)
LEAF_NODE	217:71	217:71	4	;
SELECTION	218:8	218:37	3	
KEYWORD	218:8	218:8	4	if
LEAF_NODE	218:8	218:8	5	if
LEAF_NODE	218:10	218:10	4	(
CONDITION	218:12	218:12	4	ZSTD_isError ( zstd_ret )
EXPR	218:12	218:12	5	ZSTD_isError ( zstd_ret )
FUNCTION_CALL	218:12	218:33	6	ZSTD_isError ( zstd_ret )
CALLEE	218:12	218:12	7	ZSTD_isError
LEAF_NODE	218:12	218:12	8	ZSTD_isError
LEAF_NODE	218:24	218:24	7	(
ARGUMENT	218:25	218:25	7	zstd_ret
FIELD	218:25	218:25	8	zstd_ret
LEAF_NODE	218:25	218:25	9	zstd_ret
LEAF_NODE	218:33	218:33	7	)
LEAF_NODE	218:35	218:35	4	)
STATEMENTS	218:37	223:8	4	
LEAF_NODE	218:37	218:37	5	{
STATEMENTS	219:12	222:12	5	
EXPR_STATEMENT	219:12	221:53	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_initCStream(): %s" , ZSTD_getErrorName ( zstd_ret ) ) ;
EXPR	219:12	219:12	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_initCStream(): %s" , ZSTD_getErrorName ( zstd_ret ) )
FUNCTION_CALL	219:12	221:52	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_initCStream(): %s" , ZSTD_getErrorName ( zstd_ret ) )
CALLEE	219:12	219:12	9	TIFFErrorExt
LEAF_NODE	219:12	219:12	10	TIFFErrorExt
LEAF_NODE	219:24	219:24	9	(
ARGUMENT	219:25	219:25	9	tif -> tif_clientdata
FIELD	219:25	219:30	10	tif -> tif_clientdata
LEAF_NODE	219:25	219:25	11	tif
LEAF_NODE	219:28	219:28	11	->
LEAF_NODE	219:30	219:30	11	tif_clientdata
LEAF_NODE	219:44	219:44	9	,
ARGUMENT	219:46	219:46	9	module
FIELD	219:46	219:46	10	module
LEAF_NODE	219:46	219:46	11	module
LEAF_NODE	219:52	219:52	9	,
ARGUMENT	220:25	220:25	9	"Error in ZSTD_initCStream(): %s"
FIELD	220:25	220:25	10	"Error in ZSTD_initCStream(): %s"
LEAF_NODE	220:25	220:25	11	"Error in ZSTD_initCStream(): %s"
LEAF_NODE	220:58	220:58	9	,
ARGUMENT	221:25	221:25	9	ZSTD_getErrorName ( zstd_ret )
FUNCTION_CALL	221:25	221:51	10	ZSTD_getErrorName ( zstd_ret )
CALLEE	221:25	221:25	11	ZSTD_getErrorName
LEAF_NODE	221:25	221:25	12	ZSTD_getErrorName
LEAF_NODE	221:42	221:42	11	(
ARGUMENT	221:43	221:43	11	zstd_ret
FIELD	221:43	221:43	12	zstd_ret
LEAF_NODE	221:43	221:43	13	zstd_ret
LEAF_NODE	221:51	221:51	11	)
LEAF_NODE	221:52	221:52	9	)
LEAF_NODE	221:53	221:53	7	;
JUMP_STATEMENT	222:12	222:20	6	return 0 ;
KEYWORD	222:12	222:12	7	return
LEAF_NODE	222:12	222:12	8	return
DESTINATION	222:19	222:19	7	0
EXPR	222:19	222:19	8	0
FIELD	222:19	222:19	9	0
LEAF_NODE	222:19	222:19	10	0
LEAF_NODE	222:20	222:20	7	;
LEAF_NODE	223:8	223:8	5	}
EXPR_STATEMENT	225:8	225:45	3	sp -> out_buffer . dst = tif -> tif_rawdata ;
EXPR	225:8	225:8	4	sp -> out_buffer . dst = tif -> tif_rawdata
ASSIGN	225:8	225:29	5	sp -> out_buffer . dst = tif -> tif_rawdata
LVAL	225:8	225:8	6	sp -> out_buffer . dst
FIELD	225:8	225:23	7	sp -> out_buffer . dst
LEAF_NODE	225:8	225:8	8	sp
LEAF_NODE	225:10	225:10	8	->
LEAF_NODE	225:12	225:12	8	out_buffer
LEAF_NODE	225:22	225:22	8	.
LEAF_NODE	225:23	225:23	8	dst
ASSIGN_OP	225:27	225:27	6	=
LEAF_NODE	225:27	225:27	7	=
RVAL	225:29	225:29	6	tif -> tif_rawdata
FIELD	225:29	225:34	7	tif -> tif_rawdata
LEAF_NODE	225:29	225:29	8	tif
LEAF_NODE	225:32	225:32	8	->
LEAF_NODE	225:34	225:34	8	tif_rawdata
LEAF_NODE	225:45	225:45	4	;
EXPR_STATEMENT	226:8	226:58	3	sp -> out_buffer . size = ( size_t ) tif -> tif_rawdatasize ;
EXPR	226:8	226:8	4	sp -> out_buffer . size = ( size_t ) tif -> tif_rawdatasize
ASSIGN	226:8	226:30	5	sp -> out_buffer . size = ( size_t ) tif -> tif_rawdatasize
LVAL	226:8	226:8	6	sp -> out_buffer . size
FIELD	226:8	226:23	7	sp -> out_buffer . size
LEAF_NODE	226:8	226:8	8	sp
LEAF_NODE	226:10	226:10	8	->
LEAF_NODE	226:12	226:12	8	out_buffer
LEAF_NODE	226:22	226:22	8	.
LEAF_NODE	226:23	226:23	8	size
ASSIGN_OP	226:28	226:28	6	=
LEAF_NODE	226:28	226:28	7	=
RVAL	226:30	226:38	6	( size_t ) tif -> tif_rawdatasize
LEAF_NODE	226:30	226:30	7	(
TYPE_NAME	226:31	226:31	7	size_t
LEAF_NODE	226:31	226:31	8	size_t
LEAF_NODE	226:37	226:37	7	)
FIELD	226:38	226:43	7	tif -> tif_rawdatasize
LEAF_NODE	226:38	226:38	8	tif
LEAF_NODE	226:41	226:41	8	->
LEAF_NODE	226:43	226:43	8	tif_rawdatasize
LEAF_NODE	226:58	226:58	4	;
EXPR_STATEMENT	227:8	227:30	3	sp -> out_buffer . pos = 0 ;
EXPR	227:8	227:8	4	sp -> out_buffer . pos = 0
ASSIGN	227:8	227:29	5	sp -> out_buffer . pos = 0
LVAL	227:8	227:8	6	sp -> out_buffer . pos
FIELD	227:8	227:23	7	sp -> out_buffer . pos
LEAF_NODE	227:8	227:8	8	sp
LEAF_NODE	227:10	227:10	8	->
LEAF_NODE	227:12	227:12	8	out_buffer
LEAF_NODE	227:22	227:22	8	.
LEAF_NODE	227:23	227:23	8	pos
ASSIGN_OP	227:27	227:27	6	=
LEAF_NODE	227:27	227:27	7	=
RVAL	227:29	227:29	6	0
FIELD	227:29	227:29	7	0
LEAF_NODE	227:29	227:29	8	0
LEAF_NODE	227:30	227:30	4	;
JUMP_STATEMENT	229:8	229:16	3	return 1 ;
KEYWORD	229:8	229:8	4	return
LEAF_NODE	229:8	229:8	5	return
DESTINATION	229:15	229:15	4	1
EXPR	229:15	229:15	5	1
FIELD	229:15	229:15	6	1
LEAF_NODE	229:15	229:15	7	1
LEAF_NODE	229:16	229:16	4	;
LEAF_NODE	230:0	230:0	2	}
FUNCTION_DEF	235:0	270:0	1	
RETURN_TYPE	235:0	235:7	2	static int
LEAF_NODE	235:0	235:0	3	static
TYPE_NAME	235:7	235:7	3	int
LEAF_NODE	235:7	235:7	4	int
FUNCTION_NAME	236:0	236:0	2	ZSTDEncode
LEAF_NODE	236:0	236:0	3	ZSTDEncode
PARAMETER_LIST	236:10	236:54	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	236:10	236:10	3	(
PARAMETER_DECL	236:11	236:17	3	TIFF * tif
TYPE	236:11	236:15	4	TIFF *
TYPE_NAME	236:11	236:11	5	TIFF
LEAF_NODE	236:11	236:11	6	TIFF
POINTER	236:15	236:15	5	*
LEAF_NODE	236:15	236:15	6	*
NAME	236:17	236:17	4	tif
LEAF_NODE	236:17	236:17	5	tif
LEAF_NODE	236:20	236:20	3	,
PARAMETER_DECL	236:22	236:29	3	uint8 * bp
TYPE	236:22	236:27	4	uint8 *
TYPE_NAME	236:22	236:22	5	uint8
LEAF_NODE	236:22	236:22	6	uint8
POINTER	236:27	236:27	5	*
LEAF_NODE	236:27	236:27	6	*
NAME	236:29	236:29	4	bp
LEAF_NODE	236:29	236:29	5	bp
LEAF_NODE	236:31	236:31	3	,
PARAMETER_DECL	236:33	236:42	3	tmsize_t cc
TYPE	236:33	236:33	4	tmsize_t
TYPE_NAME	236:33	236:33	5	tmsize_t
LEAF_NODE	236:33	236:33	6	tmsize_t
NAME	236:42	236:42	4	cc
LEAF_NODE	236:42	236:42	5	cc
LEAF_NODE	236:44	236:44	3	,
PARAMETER_DECL	236:46	236:53	3	uint16 s
TYPE	236:46	236:46	4	uint16
TYPE_NAME	236:46	236:46	5	uint16
LEAF_NODE	236:46	236:46	6	uint16
NAME	236:53	236:53	4	s
LEAF_NODE	236:53	236:53	5	s
LEAF_NODE	236:54	236:54	3	)
LEAF_NODE	237:0	237:0	2	{
STATEMENTS	238:8	269:8	2	
LEAF_NODE	238:8	238:8	3	static
SIMPLE_DECL	238:15	238:49	3	const char [ ] module ; module = "ZSTDEncode" ;
VAR_DECL	238:15	238:26	4	const char [ ] module ; module = "ZSTDEncode"
TYPE	238:15	238:32	5	const char [ ]
TYPE_NAME	238:15	238:21	6	const char
LEAF_NODE	238:15	238:15	7	const
LEAF_NODE	238:21	238:21	7	char
TYPE_SUFFIX	238:32	238:33	6	[ ]
LEAF_NODE	238:32	238:32	7	[
LEAF_NODE	238:33	238:33	7	]
NAME	238:26	238:26	5	module
LEAF_NODE	238:26	238:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	238:26	238:26	5	module = "ZSTDEncode"
ASSIGN	238:26	238:37	6	module = "ZSTDEncode"
LVAL	238:26	238:26	7	module
NAME	238:26	238:26	8	module
LEAF_NODE	238:26	238:26	9	module
ASSIGN_OP	238:35	238:35	7	=
LEAF_NODE	238:35	238:35	8	=
RVAL	238:37	238:37	7	"ZSTDEncode"
FIELD	238:37	238:37	8	"ZSTDEncode"
LEAF_NODE	238:37	238:37	9	"ZSTDEncode"
LEAF_NODE	238:49	238:49	4	;
SIMPLE_DECL	239:8	239:41	3	ZSTDState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	239:8	239:19	4	ZSTDState * sp ; sp = EncoderState ( tif )
TYPE	239:8	239:18	5	ZSTDState *
TYPE_NAME	239:8	239:8	6	ZSTDState
LEAF_NODE	239:8	239:8	7	ZSTDState
POINTER	239:18	239:18	6	*
LEAF_NODE	239:18	239:18	7	*
NAME	239:19	239:19	5	sp
LEAF_NODE	239:19	239:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	239:19	239:19	5	sp = EncoderState ( tif )
ASSIGN	239:19	239:24	6	sp = EncoderState ( tif )
LVAL	239:19	239:19	7	sp
NAME	239:19	239:19	8	sp
LEAF_NODE	239:19	239:19	9	sp
ASSIGN_OP	239:22	239:22	7	=
LEAF_NODE	239:22	239:22	8	=
RVAL	239:24	239:24	7	EncoderState ( tif )
FUNCTION_CALL	239:24	239:40	8	EncoderState ( tif )
CALLEE	239:24	239:24	9	EncoderState
LEAF_NODE	239:24	239:24	10	EncoderState
LEAF_NODE	239:36	239:36	9	(
ARGUMENT	239:37	239:37	9	tif
FIELD	239:37	239:37	10	tif
LEAF_NODE	239:37	239:37	11	tif
LEAF_NODE	239:40	239:40	9	)
LEAF_NODE	239:41	239:41	4	;
SIMPLE_DECL	240:8	240:33	3	ZSTD_inBuffer in_buffer ;
VAR_DECL	240:8	240:24	4	ZSTD_inBuffer in_buffer
TYPE	240:8	240:8	5	ZSTD_inBuffer
TYPE_NAME	240:8	240:8	6	ZSTD_inBuffer
LEAF_NODE	240:8	240:8	7	ZSTD_inBuffer
NAME	240:24	240:24	5	in_buffer
LEAF_NODE	240:24	240:24	6	in_buffer
LEAF_NODE	240:33	240:33	4	;
SIMPLE_DECL	241:8	241:32	3	size_t zstd_ret ;
VAR_DECL	241:8	241:24	4	size_t zstd_ret
TYPE	241:8	241:8	5	size_t
TYPE_NAME	241:8	241:8	6	size_t
LEAF_NODE	241:8	241:8	7	size_t
NAME	241:24	241:24	5	zstd_ret
LEAF_NODE	241:24	241:24	6	zstd_ret
LEAF_NODE	241:32	241:32	4	;
EXPR_STATEMENT	243:8	243:26	3	assert ( sp != NULL ) ;
EXPR	243:8	243:8	4	assert ( sp != NULL )
FUNCTION_CALL	243:8	243:25	5	assert ( sp != NULL )
CALLEE	243:8	243:8	6	assert
LEAF_NODE	243:8	243:8	7	assert
LEAF_NODE	243:14	243:14	6	(
ARGUMENT	243:15	243:21	6	sp != NULL
FIELD	243:15	243:15	7	sp
LEAF_NODE	243:15	243:15	8	sp
EQ_OPERATOR	243:18	243:18	7	!=
LEAF_NODE	243:18	243:18	8	!=
FIELD	243:21	243:21	7	NULL
LEAF_NODE	243:21	243:21	8	NULL
LEAF_NODE	243:25	243:25	6	)
LEAF_NODE	243:26	243:26	4	;
EXPR_STATEMENT	244:8	244:47	3	assert ( sp -> state == LSTATE_INIT_ENCODE ) ;
EXPR	244:8	244:8	4	assert ( sp -> state == LSTATE_INIT_ENCODE )
FUNCTION_CALL	244:8	244:46	5	assert ( sp -> state == LSTATE_INIT_ENCODE )
CALLEE	244:8	244:8	6	assert
LEAF_NODE	244:8	244:8	7	assert
LEAF_NODE	244:14	244:14	6	(
ARGUMENT	244:15	244:28	6	sp -> state == LSTATE_INIT_ENCODE
FIELD	244:15	244:19	7	sp -> state
LEAF_NODE	244:15	244:15	8	sp
LEAF_NODE	244:17	244:17	8	->
LEAF_NODE	244:19	244:19	8	state
EQ_OPERATOR	244:25	244:25	7	==
LEAF_NODE	244:25	244:25	8	==
FIELD	244:28	244:28	7	LSTATE_INIT_ENCODE
LEAF_NODE	244:28	244:28	8	LSTATE_INIT_ENCODE
LEAF_NODE	244:46	244:46	6	)
LEAF_NODE	244:47	244:47	4	;
EXPR_STATEMENT	246:8	246:16	3	( void ) s ;
EXPR	246:8	246:15	4	( void ) s
LEAF_NODE	246:8	246:8	5	(
TYPE_NAME	246:9	246:9	5	void
LEAF_NODE	246:9	246:9	6	void
LEAF_NODE	246:13	246:13	5	)
FIELD	246:15	246:15	5	s
LEAF_NODE	246:15	246:15	6	s
LEAF_NODE	246:16	246:16	4	;
EXPR_STATEMENT	248:8	248:26	3	in_buffer . src = bp ;
EXPR	248:8	248:8	4	in_buffer . src = bp
ASSIGN	248:8	248:24	5	in_buffer . src = bp
LVAL	248:8	248:8	6	in_buffer . src
FIELD	248:8	248:18	7	in_buffer . src
LEAF_NODE	248:8	248:8	8	in_buffer
LEAF_NODE	248:17	248:17	8	.
LEAF_NODE	248:18	248:18	8	src
ASSIGN_OP	248:22	248:22	6	=
LEAF_NODE	248:22	248:22	7	=
RVAL	248:24	248:24	6	bp
FIELD	248:24	248:24	7	bp
LEAF_NODE	248:24	248:24	8	bp
LEAF_NODE	248:26	248:26	4	;
EXPR_STATEMENT	249:8	249:35	3	in_buffer . size = ( size_t ) cc ;
EXPR	249:8	249:8	4	in_buffer . size = ( size_t ) cc
ASSIGN	249:8	249:25	5	in_buffer . size = ( size_t ) cc
LVAL	249:8	249:8	6	in_buffer . size
FIELD	249:8	249:18	7	in_buffer . size
LEAF_NODE	249:8	249:8	8	in_buffer
LEAF_NODE	249:17	249:17	8	.
LEAF_NODE	249:18	249:18	8	size
ASSIGN_OP	249:23	249:23	6	=
LEAF_NODE	249:23	249:23	7	=
RVAL	249:25	249:33	6	( size_t ) cc
LEAF_NODE	249:25	249:25	7	(
TYPE_NAME	249:26	249:26	7	size_t
LEAF_NODE	249:26	249:26	8	size_t
LEAF_NODE	249:32	249:32	7	)
FIELD	249:33	249:33	7	cc
LEAF_NODE	249:33	249:33	8	cc
LEAF_NODE	249:35	249:35	4	;
EXPR_STATEMENT	250:8	250:25	3	in_buffer . pos = 0 ;
EXPR	250:8	250:8	4	in_buffer . pos = 0
ASSIGN	250:8	250:24	5	in_buffer . pos = 0
LVAL	250:8	250:8	6	in_buffer . pos
FIELD	250:8	250:18	7	in_buffer . pos
LEAF_NODE	250:8	250:8	8	in_buffer
LEAF_NODE	250:17	250:17	8	.
LEAF_NODE	250:18	250:18	8	pos
ASSIGN_OP	250:22	250:22	6	=
LEAF_NODE	250:22	250:22	7	=
RVAL	250:24	250:24	6	0
FIELD	250:24	250:24	7	0
LEAF_NODE	250:24	250:24	8	0
LEAF_NODE	250:25	250:25	4	;
ITERATION	252:8	252:11	3	
KEYWORD	252:8	252:8	4	do
LEAF_NODE	252:8	252:8	5	do
LEAF_NODE	267:15	267:15	4	(
CONDITION	267:17	267:17	4	in_buffer . pos < in_buffer . size
EXPR	267:17	267:33	5	in_buffer . pos < in_buffer . size
FIELD	267:17	267:27	6	in_buffer . pos
LEAF_NODE	267:17	267:17	7	in_buffer
LEAF_NODE	267:26	267:26	7	.
LEAF_NODE	267:27	267:27	7	pos
REL_OPERATOR	267:31	267:31	6	<
LEAF_NODE	267:31	267:31	7	<
FIELD	267:33	267:43	6	in_buffer . size
LEAF_NODE	267:33	267:33	7	in_buffer
LEAF_NODE	267:42	267:42	7	.
LEAF_NODE	267:43	267:43	7	size
LEAF_NODE	267:48	267:48	4	)
STATEMENTS	252:11	267:8	4	
LEAF_NODE	252:11	252:11	5	{
STATEMENTS	253:16	261:16	5	
EXPR_STATEMENT	253:16	254:58	6	zstd_ret = ZSTD_compressStream ( sp -> cstream , & sp -> out_buffer , & in_buffer ) ;
EXPR	253:16	253:16	7	zstd_ret = ZSTD_compressStream ( sp -> cstream , & sp -> out_buffer , & in_buffer )
ASSIGN	253:16	253:27	8	zstd_ret = ZSTD_compressStream ( sp -> cstream , & sp -> out_buffer , & in_buffer )
LVAL	253:16	253:16	9	zstd_ret
FIELD	253:16	253:16	10	zstd_ret
LEAF_NODE	253:16	253:16	11	zstd_ret
ASSIGN_OP	253:25	253:25	9	=
LEAF_NODE	253:25	253:25	10	=
RVAL	253:27	253:27	9	ZSTD_compressStream ( sp -> cstream , & sp -> out_buffer , & in_buffer )
FUNCTION_CALL	253:27	254:57	10	ZSTD_compressStream ( sp -> cstream , & sp -> out_buffer , & in_buffer )
CALLEE	253:27	253:27	11	ZSTD_compressStream
LEAF_NODE	253:27	253:27	12	ZSTD_compressStream
LEAF_NODE	253:46	253:46	11	(
ARGUMENT	253:47	253:47	11	sp -> cstream
FIELD	253:47	253:51	12	sp -> cstream
LEAF_NODE	253:47	253:47	13	sp
LEAF_NODE	253:49	253:49	13	->
LEAF_NODE	253:51	253:51	13	cstream
LEAF_NODE	253:58	253:58	11	,
ARGUMENT	253:60	253:60	11	& sp -> out_buffer
UNARY_EXPR	253:60	253:61	12	& sp -> out_buffer
UNARY_OPERATOR	253:60	253:60	13	&
LEAF_NODE	253:60	253:60	14	&
FIELD	253:61	253:65	13	sp -> out_buffer
LEAF_NODE	253:61	253:61	14	sp
LEAF_NODE	253:63	253:63	14	->
LEAF_NODE	253:65	253:65	14	out_buffer
LEAF_NODE	253:75	253:75	11	,
ARGUMENT	254:47	254:47	11	& in_buffer
UNARY_EXPR	254:47	254:48	12	& in_buffer
UNARY_OPERATOR	254:47	254:47	13	&
LEAF_NODE	254:47	254:47	14	&
FIELD	254:48	254:48	13	in_buffer
LEAF_NODE	254:48	254:48	14	in_buffer
LEAF_NODE	254:57	254:57	11	)
LEAF_NODE	254:58	254:58	7	;
SELECTION	255:16	255:45	6	
KEYWORD	255:16	255:16	7	if
LEAF_NODE	255:16	255:16	8	if
LEAF_NODE	255:18	255:18	7	(
CONDITION	255:20	255:20	7	ZSTD_isError ( zstd_ret )
EXPR	255:20	255:20	8	ZSTD_isError ( zstd_ret )
FUNCTION_CALL	255:20	255:41	9	ZSTD_isError ( zstd_ret )
CALLEE	255:20	255:20	10	ZSTD_isError
LEAF_NODE	255:20	255:20	11	ZSTD_isError
LEAF_NODE	255:32	255:32	10	(
ARGUMENT	255:33	255:33	10	zstd_ret
FIELD	255:33	255:33	11	zstd_ret
LEAF_NODE	255:33	255:33	12	zstd_ret
LEAF_NODE	255:41	255:41	10	)
LEAF_NODE	255:43	255:43	7	)
STATEMENTS	255:45	260:16	7	
LEAF_NODE	255:45	255:45	8	{
STATEMENTS	256:20	259:20	8	
EXPR_STATEMENT	256:20	258:60	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_compressStream(): %s" , ZSTD_getErrorName ( zstd_ret ) ) ;
EXPR	256:20	256:20	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_compressStream(): %s" , ZSTD_getErrorName ( zstd_ret ) )
FUNCTION_CALL	256:20	258:59	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_compressStream(): %s" , ZSTD_getErrorName ( zstd_ret ) )
CALLEE	256:20	256:20	12	TIFFErrorExt
LEAF_NODE	256:20	256:20	13	TIFFErrorExt
LEAF_NODE	256:32	256:32	12	(
ARGUMENT	256:33	256:33	12	tif -> tif_clientdata
FIELD	256:33	256:38	13	tif -> tif_clientdata
LEAF_NODE	256:33	256:33	14	tif
LEAF_NODE	256:36	256:36	14	->
LEAF_NODE	256:38	256:38	14	tif_clientdata
LEAF_NODE	256:52	256:52	12	,
ARGUMENT	256:54	256:54	12	module
FIELD	256:54	256:54	13	module
LEAF_NODE	256:54	256:54	14	module
LEAF_NODE	256:60	256:60	12	,
ARGUMENT	257:32	257:32	12	"Error in ZSTD_compressStream(): %s"
FIELD	257:32	257:32	13	"Error in ZSTD_compressStream(): %s"
LEAF_NODE	257:32	257:32	14	"Error in ZSTD_compressStream(): %s"
LEAF_NODE	257:68	257:68	12	,
ARGUMENT	258:32	258:32	12	ZSTD_getErrorName ( zstd_ret )
FUNCTION_CALL	258:32	258:58	13	ZSTD_getErrorName ( zstd_ret )
CALLEE	258:32	258:32	14	ZSTD_getErrorName
LEAF_NODE	258:32	258:32	15	ZSTD_getErrorName
LEAF_NODE	258:49	258:49	14	(
ARGUMENT	258:50	258:50	14	zstd_ret
FIELD	258:50	258:50	15	zstd_ret
LEAF_NODE	258:50	258:50	16	zstd_ret
LEAF_NODE	258:58	258:58	14	)
LEAF_NODE	258:59	258:59	12	)
LEAF_NODE	258:60	258:60	10	;
JUMP_STATEMENT	259:20	259:28	9	return 0 ;
KEYWORD	259:20	259:20	10	return
LEAF_NODE	259:20	259:20	11	return
DESTINATION	259:27	259:27	10	0
EXPR	259:27	259:27	11	0
FIELD	259:27	259:27	12	0
LEAF_NODE	259:27	259:27	13	0
LEAF_NODE	259:28	259:28	10	;
LEAF_NODE	260:16	260:16	8	}
SELECTION	261:16	261:64	6	
KEYWORD	261:16	261:16	7	if
LEAF_NODE	261:16	261:16	8	if
LEAF_NODE	261:18	261:18	7	(
CONDITION	261:20	261:20	7	sp -> out_buffer . pos == sp -> out_buffer . size
EXPR	261:20	261:42	8	sp -> out_buffer . pos == sp -> out_buffer . size
FIELD	261:20	261:35	9	sp -> out_buffer . pos
LEAF_NODE	261:20	261:20	10	sp
LEAF_NODE	261:22	261:22	10	->
LEAF_NODE	261:24	261:24	10	out_buffer
LEAF_NODE	261:34	261:34	10	.
LEAF_NODE	261:35	261:35	10	pos
EQ_OPERATOR	261:39	261:39	9	==
LEAF_NODE	261:39	261:39	10	==
FIELD	261:42	261:57	9	sp -> out_buffer . size
LEAF_NODE	261:42	261:42	10	sp
LEAF_NODE	261:44	261:44	10	->
LEAF_NODE	261:46	261:46	10	out_buffer
LEAF_NODE	261:56	261:56	10	.
LEAF_NODE	261:57	261:57	10	size
LEAF_NODE	261:62	261:62	7	)
STATEMENTS	261:64	266:16	7	
LEAF_NODE	261:64	261:64	8	{
STATEMENTS	262:24	265:24	8	
EXPR_STATEMENT	262:24	262:61	9	tif -> tif_rawcc = tif -> tif_rawdatasize ;
EXPR	262:24	262:24	10	tif -> tif_rawcc = tif -> tif_rawdatasize
ASSIGN	262:24	262:41	11	tif -> tif_rawcc = tif -> tif_rawdatasize
LVAL	262:24	262:24	12	tif -> tif_rawcc
FIELD	262:24	262:29	13	tif -> tif_rawcc
LEAF_NODE	262:24	262:24	14	tif
LEAF_NODE	262:27	262:27	14	->
LEAF_NODE	262:29	262:29	14	tif_rawcc
ASSIGN_OP	262:39	262:39	12	=
LEAF_NODE	262:39	262:39	13	=
RVAL	262:41	262:41	12	tif -> tif_rawdatasize
FIELD	262:41	262:46	13	tif -> tif_rawdatasize
LEAF_NODE	262:41	262:41	14	tif
LEAF_NODE	262:44	262:44	14	->
LEAF_NODE	262:46	262:46	14	tif_rawdatasize
LEAF_NODE	262:61	262:61	10	;
EXPR_STATEMENT	263:24	263:43	9	TIFFFlushData1 ( tif ) ;
EXPR	263:24	263:24	10	TIFFFlushData1 ( tif )
FUNCTION_CALL	263:24	263:42	11	TIFFFlushData1 ( tif )
CALLEE	263:24	263:24	12	TIFFFlushData1
LEAF_NODE	263:24	263:24	13	TIFFFlushData1
LEAF_NODE	263:38	263:38	12	(
ARGUMENT	263:39	263:39	12	tif
FIELD	263:39	263:39	13	tif
LEAF_NODE	263:39	263:39	14	tif
LEAF_NODE	263:42	263:42	12	)
LEAF_NODE	263:43	263:43	10	;
EXPR_STATEMENT	264:24	264:59	9	sp -> out_buffer . dst = tif -> tif_rawcp ;
EXPR	264:24	264:24	10	sp -> out_buffer . dst = tif -> tif_rawcp
ASSIGN	264:24	264:45	11	sp -> out_buffer . dst = tif -> tif_rawcp
LVAL	264:24	264:24	12	sp -> out_buffer . dst
FIELD	264:24	264:39	13	sp -> out_buffer . dst
LEAF_NODE	264:24	264:24	14	sp
LEAF_NODE	264:26	264:26	14	->
LEAF_NODE	264:28	264:28	14	out_buffer
LEAF_NODE	264:38	264:38	14	.
LEAF_NODE	264:39	264:39	14	dst
ASSIGN_OP	264:43	264:43	12	=
LEAF_NODE	264:43	264:43	13	=
RVAL	264:45	264:45	12	tif -> tif_rawcp
FIELD	264:45	264:50	13	tif -> tif_rawcp
LEAF_NODE	264:45	264:45	14	tif
LEAF_NODE	264:48	264:48	14	->
LEAF_NODE	264:50	264:50	14	tif_rawcp
LEAF_NODE	264:59	264:59	10	;
EXPR_STATEMENT	265:24	265:46	9	sp -> out_buffer . pos = 0 ;
EXPR	265:24	265:24	10	sp -> out_buffer . pos = 0
ASSIGN	265:24	265:45	11	sp -> out_buffer . pos = 0
LVAL	265:24	265:24	12	sp -> out_buffer . pos
FIELD	265:24	265:39	13	sp -> out_buffer . pos
LEAF_NODE	265:24	265:24	14	sp
LEAF_NODE	265:26	265:26	14	->
LEAF_NODE	265:28	265:28	14	out_buffer
LEAF_NODE	265:38	265:38	14	.
LEAF_NODE	265:39	265:39	14	pos
ASSIGN_OP	265:43	265:43	12	=
LEAF_NODE	265:43	265:43	13	=
RVAL	265:45	265:45	12	0
FIELD	265:45	265:45	13	0
LEAF_NODE	265:45	265:45	14	0
LEAF_NODE	265:46	265:46	10	;
LEAF_NODE	266:16	266:16	8	}
LEAF_NODE	267:8	267:8	5	}
LEAF_NODE	267:49	267:49	3	;
JUMP_STATEMENT	269:8	269:16	3	return 1 ;
KEYWORD	269:8	269:8	4	return
LEAF_NODE	269:8	269:8	5	return
DESTINATION	269:15	269:15	4	1
EXPR	269:15	269:15	5	1
FIELD	269:15	269:15	6	1
LEAF_NODE	269:15	269:15	7	1
LEAF_NODE	269:16	269:16	4	;
LEAF_NODE	270:0	270:0	2	}
FUNCTION_DEF	275:0	298:0	1	
RETURN_TYPE	275:0	275:7	2	static int
LEAF_NODE	275:0	275:0	3	static
TYPE_NAME	275:7	275:7	3	int
LEAF_NODE	275:7	275:7	4	int
FUNCTION_NAME	276:0	276:0	2	ZSTDPostEncode
LEAF_NODE	276:0	276:0	3	ZSTDPostEncode
PARAMETER_LIST	276:14	276:24	2	( TIFF * tif )
LEAF_NODE	276:14	276:14	3	(
PARAMETER_DECL	276:15	276:21	3	TIFF * tif
TYPE	276:15	276:19	4	TIFF *
TYPE_NAME	276:15	276:15	5	TIFF
LEAF_NODE	276:15	276:15	6	TIFF
POINTER	276:19	276:19	5	*
LEAF_NODE	276:19	276:19	6	*
NAME	276:21	276:21	4	tif
LEAF_NODE	276:21	276:21	5	tif
LEAF_NODE	276:24	276:24	3	)
LEAF_NODE	277:0	277:0	2	{
STATEMENTS	278:8	297:8	2	
LEAF_NODE	278:8	278:8	3	static
SIMPLE_DECL	278:15	278:53	3	const char [ ] module ; module = "ZSTDPostEncode" ;
VAR_DECL	278:15	278:26	4	const char [ ] module ; module = "ZSTDPostEncode"
TYPE	278:15	278:32	5	const char [ ]
TYPE_NAME	278:15	278:21	6	const char
LEAF_NODE	278:15	278:15	7	const
LEAF_NODE	278:21	278:21	7	char
TYPE_SUFFIX	278:32	278:33	6	[ ]
LEAF_NODE	278:32	278:32	7	[
LEAF_NODE	278:33	278:33	7	]
NAME	278:26	278:26	5	module
LEAF_NODE	278:26	278:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	278:26	278:26	5	module = "ZSTDPostEncode"
ASSIGN	278:26	278:37	6	module = "ZSTDPostEncode"
LVAL	278:26	278:26	7	module
NAME	278:26	278:26	8	module
LEAF_NODE	278:26	278:26	9	module
ASSIGN_OP	278:35	278:35	7	=
LEAF_NODE	278:35	278:35	8	=
RVAL	278:37	278:37	7	"ZSTDPostEncode"
FIELD	278:37	278:37	8	"ZSTDPostEncode"
LEAF_NODE	278:37	278:37	9	"ZSTDPostEncode"
LEAF_NODE	278:53	278:53	4	;
SIMPLE_DECL	279:8	279:41	3	ZSTDState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	279:8	279:19	4	ZSTDState * sp ; sp = EncoderState ( tif )
TYPE	279:8	279:18	5	ZSTDState *
TYPE_NAME	279:8	279:8	6	ZSTDState
LEAF_NODE	279:8	279:8	7	ZSTDState
POINTER	279:18	279:18	6	*
LEAF_NODE	279:18	279:18	7	*
NAME	279:19	279:19	5	sp
LEAF_NODE	279:19	279:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	279:19	279:19	5	sp = EncoderState ( tif )
ASSIGN	279:19	279:24	6	sp = EncoderState ( tif )
LVAL	279:19	279:19	7	sp
NAME	279:19	279:19	8	sp
LEAF_NODE	279:19	279:19	9	sp
ASSIGN_OP	279:22	279:22	7	=
LEAF_NODE	279:22	279:22	8	=
RVAL	279:24	279:24	7	EncoderState ( tif )
FUNCTION_CALL	279:24	279:40	8	EncoderState ( tif )
CALLEE	279:24	279:24	9	EncoderState
LEAF_NODE	279:24	279:24	10	EncoderState
LEAF_NODE	279:36	279:36	9	(
ARGUMENT	279:37	279:37	9	tif
FIELD	279:37	279:37	10	tif
LEAF_NODE	279:37	279:37	11	tif
LEAF_NODE	279:40	279:40	9	)
LEAF_NODE	279:41	279:41	4	;
SIMPLE_DECL	280:8	280:32	3	size_t zstd_ret ;
VAR_DECL	280:8	280:24	4	size_t zstd_ret
TYPE	280:8	280:8	5	size_t
TYPE_NAME	280:8	280:8	6	size_t
LEAF_NODE	280:8	280:8	7	size_t
NAME	280:24	280:24	5	zstd_ret
LEAF_NODE	280:24	280:24	6	zstd_ret
LEAF_NODE	280:32	280:32	4	;
ITERATION	282:8	282:11	3	
KEYWORD	282:8	282:8	4	do
LEAF_NODE	282:8	282:8	5	do
LEAF_NODE	296:16	296:16	4	(
CONDITION	296:17	296:17	4	zstd_ret != 0
EXPR	296:17	296:29	5	zstd_ret != 0
FIELD	296:17	296:17	6	zstd_ret
LEAF_NODE	296:17	296:17	7	zstd_ret
EQ_OPERATOR	296:26	296:26	6	!=
LEAF_NODE	296:26	296:26	7	!=
FIELD	296:29	296:29	6	0
LEAF_NODE	296:29	296:29	7	0
LEAF_NODE	296:30	296:30	4	)
STATEMENTS	282:11	296:8	4	
LEAF_NODE	282:11	282:11	5	{
STATEMENTS	283:16	290:16	5	
EXPR_STATEMENT	283:16	283:71	6	zstd_ret = ZSTD_endStream ( sp -> cstream , & sp -> out_buffer ) ;
EXPR	283:16	283:16	7	zstd_ret = ZSTD_endStream ( sp -> cstream , & sp -> out_buffer )
ASSIGN	283:16	283:27	8	zstd_ret = ZSTD_endStream ( sp -> cstream , & sp -> out_buffer )
LVAL	283:16	283:16	9	zstd_ret
FIELD	283:16	283:16	10	zstd_ret
LEAF_NODE	283:16	283:16	11	zstd_ret
ASSIGN_OP	283:25	283:25	9	=
LEAF_NODE	283:25	283:25	10	=
RVAL	283:27	283:27	9	ZSTD_endStream ( sp -> cstream , & sp -> out_buffer )
FUNCTION_CALL	283:27	283:70	10	ZSTD_endStream ( sp -> cstream , & sp -> out_buffer )
CALLEE	283:27	283:27	11	ZSTD_endStream
LEAF_NODE	283:27	283:27	12	ZSTD_endStream
LEAF_NODE	283:41	283:41	11	(
ARGUMENT	283:42	283:42	11	sp -> cstream
FIELD	283:42	283:46	12	sp -> cstream
LEAF_NODE	283:42	283:42	13	sp
LEAF_NODE	283:44	283:44	13	->
LEAF_NODE	283:46	283:46	13	cstream
LEAF_NODE	283:53	283:53	11	,
ARGUMENT	283:55	283:55	11	& sp -> out_buffer
UNARY_EXPR	283:55	283:56	12	& sp -> out_buffer
UNARY_OPERATOR	283:55	283:55	13	&
LEAF_NODE	283:55	283:55	14	&
FIELD	283:56	283:60	13	sp -> out_buffer
LEAF_NODE	283:56	283:56	14	sp
LEAF_NODE	283:58	283:58	14	->
LEAF_NODE	283:60	283:60	14	out_buffer
LEAF_NODE	283:70	283:70	11	)
LEAF_NODE	283:71	283:71	7	;
SELECTION	284:16	284:45	6	
KEYWORD	284:16	284:16	7	if
LEAF_NODE	284:16	284:16	8	if
LEAF_NODE	284:18	284:18	7	(
CONDITION	284:20	284:20	7	ZSTD_isError ( zstd_ret )
EXPR	284:20	284:20	8	ZSTD_isError ( zstd_ret )
FUNCTION_CALL	284:20	284:41	9	ZSTD_isError ( zstd_ret )
CALLEE	284:20	284:20	10	ZSTD_isError
LEAF_NODE	284:20	284:20	11	ZSTD_isError
LEAF_NODE	284:32	284:32	10	(
ARGUMENT	284:33	284:33	10	zstd_ret
FIELD	284:33	284:33	11	zstd_ret
LEAF_NODE	284:33	284:33	12	zstd_ret
LEAF_NODE	284:41	284:41	10	)
LEAF_NODE	284:43	284:43	7	)
STATEMENTS	284:45	289:16	7	
LEAF_NODE	284:45	284:45	8	{
STATEMENTS	285:20	288:20	8	
EXPR_STATEMENT	285:20	287:60	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_endStream(): %s" , ZSTD_getErrorName ( zstd_ret ) ) ;
EXPR	285:20	285:20	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_endStream(): %s" , ZSTD_getErrorName ( zstd_ret ) )
FUNCTION_CALL	285:20	287:59	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Error in ZSTD_endStream(): %s" , ZSTD_getErrorName ( zstd_ret ) )
CALLEE	285:20	285:20	12	TIFFErrorExt
LEAF_NODE	285:20	285:20	13	TIFFErrorExt
LEAF_NODE	285:32	285:32	12	(
ARGUMENT	285:33	285:33	12	tif -> tif_clientdata
FIELD	285:33	285:38	13	tif -> tif_clientdata
LEAF_NODE	285:33	285:33	14	tif
LEAF_NODE	285:36	285:36	14	->
LEAF_NODE	285:38	285:38	14	tif_clientdata
LEAF_NODE	285:52	285:52	12	,
ARGUMENT	285:54	285:54	12	module
FIELD	285:54	285:54	13	module
LEAF_NODE	285:54	285:54	14	module
LEAF_NODE	285:60	285:60	12	,
ARGUMENT	286:32	286:32	12	"Error in ZSTD_endStream(): %s"
FIELD	286:32	286:32	13	"Error in ZSTD_endStream(): %s"
LEAF_NODE	286:32	286:32	14	"Error in ZSTD_endStream(): %s"
LEAF_NODE	286:63	286:63	12	,
ARGUMENT	287:32	287:32	12	ZSTD_getErrorName ( zstd_ret )
FUNCTION_CALL	287:32	287:58	13	ZSTD_getErrorName ( zstd_ret )
CALLEE	287:32	287:32	14	ZSTD_getErrorName
LEAF_NODE	287:32	287:32	15	ZSTD_getErrorName
LEAF_NODE	287:49	287:49	14	(
ARGUMENT	287:50	287:50	14	zstd_ret
FIELD	287:50	287:50	15	zstd_ret
LEAF_NODE	287:50	287:50	16	zstd_ret
LEAF_NODE	287:58	287:58	14	)
LEAF_NODE	287:59	287:59	12	)
LEAF_NODE	287:60	287:60	10	;
JUMP_STATEMENT	288:20	288:28	9	return 0 ;
KEYWORD	288:20	288:20	10	return
LEAF_NODE	288:20	288:20	11	return
DESTINATION	288:27	288:27	10	0
EXPR	288:27	288:27	11	0
FIELD	288:27	288:27	12	0
LEAF_NODE	288:27	288:27	13	0
LEAF_NODE	288:28	288:28	10	;
LEAF_NODE	289:16	289:16	8	}
SELECTION	290:16	290:45	6	
KEYWORD	290:16	290:16	7	if
LEAF_NODE	290:16	290:16	8	if
LEAF_NODE	290:18	290:18	7	(
CONDITION	290:20	290:20	7	sp -> out_buffer . pos > 0
EXPR	290:20	290:41	8	sp -> out_buffer . pos > 0
FIELD	290:20	290:35	9	sp -> out_buffer . pos
LEAF_NODE	290:20	290:20	10	sp
LEAF_NODE	290:22	290:22	10	->
LEAF_NODE	290:24	290:24	10	out_buffer
LEAF_NODE	290:34	290:34	10	.
LEAF_NODE	290:35	290:35	10	pos
REL_OPERATOR	290:39	290:39	9	>
LEAF_NODE	290:39	290:39	10	>
FIELD	290:41	290:41	9	0
LEAF_NODE	290:41	290:41	10	0
LEAF_NODE	290:43	290:43	7	)
STATEMENTS	290:45	295:16	7	
LEAF_NODE	290:45	290:45	8	{
STATEMENTS	291:24	294:24	8	
EXPR_STATEMENT	291:24	291:59	9	tif -> tif_rawcc = sp -> out_buffer . pos ;
EXPR	291:24	291:24	10	tif -> tif_rawcc = sp -> out_buffer . pos
ASSIGN	291:24	291:41	11	tif -> tif_rawcc = sp -> out_buffer . pos
LVAL	291:24	291:24	12	tif -> tif_rawcc
FIELD	291:24	291:29	13	tif -> tif_rawcc
LEAF_NODE	291:24	291:24	14	tif
LEAF_NODE	291:27	291:27	14	->
LEAF_NODE	291:29	291:29	14	tif_rawcc
ASSIGN_OP	291:39	291:39	12	=
LEAF_NODE	291:39	291:39	13	=
RVAL	291:41	291:41	12	sp -> out_buffer . pos
FIELD	291:41	291:56	13	sp -> out_buffer . pos
LEAF_NODE	291:41	291:41	14	sp
LEAF_NODE	291:43	291:43	14	->
LEAF_NODE	291:45	291:45	14	out_buffer
LEAF_NODE	291:55	291:55	14	.
LEAF_NODE	291:56	291:56	14	pos
LEAF_NODE	291:59	291:59	10	;
EXPR_STATEMENT	292:24	292:43	9	TIFFFlushData1 ( tif ) ;
EXPR	292:24	292:24	10	TIFFFlushData1 ( tif )
FUNCTION_CALL	292:24	292:42	11	TIFFFlushData1 ( tif )
CALLEE	292:24	292:24	12	TIFFFlushData1
LEAF_NODE	292:24	292:24	13	TIFFFlushData1
LEAF_NODE	292:38	292:38	12	(
ARGUMENT	292:39	292:39	12	tif
FIELD	292:39	292:39	13	tif
LEAF_NODE	292:39	292:39	14	tif
LEAF_NODE	292:42	292:42	12	)
LEAF_NODE	292:43	292:43	10	;
EXPR_STATEMENT	293:24	293:59	9	sp -> out_buffer . dst = tif -> tif_rawcp ;
EXPR	293:24	293:24	10	sp -> out_buffer . dst = tif -> tif_rawcp
ASSIGN	293:24	293:45	11	sp -> out_buffer . dst = tif -> tif_rawcp
LVAL	293:24	293:24	12	sp -> out_buffer . dst
FIELD	293:24	293:39	13	sp -> out_buffer . dst
LEAF_NODE	293:24	293:24	14	sp
LEAF_NODE	293:26	293:26	14	->
LEAF_NODE	293:28	293:28	14	out_buffer
LEAF_NODE	293:38	293:38	14	.
LEAF_NODE	293:39	293:39	14	dst
ASSIGN_OP	293:43	293:43	12	=
LEAF_NODE	293:43	293:43	13	=
RVAL	293:45	293:45	12	tif -> tif_rawcp
FIELD	293:45	293:50	13	tif -> tif_rawcp
LEAF_NODE	293:45	293:45	14	tif
LEAF_NODE	293:48	293:48	14	->
LEAF_NODE	293:50	293:50	14	tif_rawcp
LEAF_NODE	293:59	293:59	10	;
EXPR_STATEMENT	294:24	294:46	9	sp -> out_buffer . pos = 0 ;
EXPR	294:24	294:24	10	sp -> out_buffer . pos = 0
ASSIGN	294:24	294:45	11	sp -> out_buffer . pos = 0
LVAL	294:24	294:24	12	sp -> out_buffer . pos
FIELD	294:24	294:39	13	sp -> out_buffer . pos
LEAF_NODE	294:24	294:24	14	sp
LEAF_NODE	294:26	294:26	14	->
LEAF_NODE	294:28	294:28	14	out_buffer
LEAF_NODE	294:38	294:38	14	.
LEAF_NODE	294:39	294:39	14	pos
ASSIGN_OP	294:43	294:43	12	=
LEAF_NODE	294:43	294:43	13	=
RVAL	294:45	294:45	12	0
FIELD	294:45	294:45	13	0
LEAF_NODE	294:45	294:45	14	0
LEAF_NODE	294:46	294:46	10	;
LEAF_NODE	295:16	295:16	8	}
LEAF_NODE	296:8	296:8	5	}
LEAF_NODE	296:31	296:31	3	;
JUMP_STATEMENT	297:8	297:16	3	return 1 ;
KEYWORD	297:8	297:8	4	return
LEAF_NODE	297:8	297:8	5	return
DESTINATION	297:15	297:15	4	1
EXPR	297:15	297:15	5	1
FIELD	297:15	297:15	6	1
LEAF_NODE	297:15	297:15	7	1
LEAF_NODE	297:16	297:16	4	;
LEAF_NODE	298:0	298:0	2	}
FUNCTION_DEF	300:0	324:0	1	
RETURN_TYPE	300:0	300:7	2	static void
LEAF_NODE	300:0	300:0	3	static
TYPE_NAME	300:7	300:7	3	void
LEAF_NODE	300:7	300:7	4	void
FUNCTION_NAME	301:0	301:0	2	ZSTDCleanup
LEAF_NODE	301:0	301:0	3	ZSTDCleanup
PARAMETER_LIST	301:11	301:21	2	( TIFF * tif )
LEAF_NODE	301:11	301:11	3	(
PARAMETER_DECL	301:12	301:18	3	TIFF * tif
TYPE	301:12	301:16	4	TIFF *
TYPE_NAME	301:12	301:12	5	TIFF
LEAF_NODE	301:12	301:12	6	TIFF
POINTER	301:16	301:16	5	*
LEAF_NODE	301:16	301:16	6	*
NAME	301:18	301:18	4	tif
LEAF_NODE	301:18	301:18	5	tif
LEAF_NODE	301:21	301:21	3	)
LEAF_NODE	302:0	302:0	2	{
STATEMENTS	303:8	323:8	2	
SIMPLE_DECL	303:8	303:35	3	ZSTDState * sp ; sp = LState ( tif ) ;
VAR_DECL	303:8	303:19	4	ZSTDState * sp ; sp = LState ( tif )
TYPE	303:8	303:17	5	ZSTDState *
TYPE_NAME	303:8	303:8	6	ZSTDState
LEAF_NODE	303:8	303:8	7	ZSTDState
POINTER	303:17	303:17	6	*
LEAF_NODE	303:17	303:17	7	*
NAME	303:19	303:19	5	sp
LEAF_NODE	303:19	303:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	303:19	303:19	5	sp = LState ( tif )
ASSIGN	303:19	303:24	6	sp = LState ( tif )
LVAL	303:19	303:19	7	sp
NAME	303:19	303:19	8	sp
LEAF_NODE	303:19	303:19	9	sp
ASSIGN_OP	303:22	303:22	7	=
LEAF_NODE	303:22	303:22	8	=
RVAL	303:24	303:24	7	LState ( tif )
FUNCTION_CALL	303:24	303:34	8	LState ( tif )
CALLEE	303:24	303:24	9	LState
LEAF_NODE	303:24	303:24	10	LState
LEAF_NODE	303:30	303:30	9	(
ARGUMENT	303:31	303:31	9	tif
FIELD	303:31	303:31	10	tif
LEAF_NODE	303:31	303:31	11	tif
LEAF_NODE	303:34	303:34	9	)
LEAF_NODE	303:35	303:35	4	;
EXPR_STATEMENT	305:8	305:23	3	assert ( sp != 0 ) ;
EXPR	305:8	305:8	4	assert ( sp != 0 )
FUNCTION_CALL	305:8	305:22	5	assert ( sp != 0 )
CALLEE	305:8	305:8	6	assert
LEAF_NODE	305:8	305:8	7	assert
LEAF_NODE	305:14	305:14	6	(
ARGUMENT	305:15	305:21	6	sp != 0
FIELD	305:15	305:15	7	sp
LEAF_NODE	305:15	305:15	8	sp
EQ_OPERATOR	305:18	305:18	7	!=
LEAF_NODE	305:18	305:18	8	!=
FIELD	305:21	305:21	7	0
LEAF_NODE	305:21	305:21	8	0
LEAF_NODE	305:22	305:22	6	)
LEAF_NODE	305:23	305:23	4	;
EXPR_STATEMENT	307:8	307:39	3	( void ) TIFFPredictorCleanup ( tif ) ;
EXPR	307:8	307:14	4	( void ) TIFFPredictorCleanup ( tif )
LEAF_NODE	307:8	307:8	5	(
TYPE_NAME	307:9	307:9	5	void
LEAF_NODE	307:9	307:9	6	void
LEAF_NODE	307:13	307:13	5	)
FUNCTION_CALL	307:14	307:38	5	TIFFPredictorCleanup ( tif )
CALLEE	307:14	307:14	6	TIFFPredictorCleanup
LEAF_NODE	307:14	307:14	7	TIFFPredictorCleanup
LEAF_NODE	307:34	307:34	6	(
ARGUMENT	307:35	307:35	6	tif
FIELD	307:35	307:35	7	tif
LEAF_NODE	307:35	307:35	8	tif
LEAF_NODE	307:38	307:38	6	)
LEAF_NODE	307:39	307:39	4	;
EXPR_STATEMENT	309:8	309:54	3	tif -> tif_tagmethods . vgetfield = sp -> vgetparent ;
EXPR	309:8	309:8	4	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
ASSIGN	309:8	309:40	5	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
LVAL	309:8	309:8	6	tif -> tif_tagmethods . vgetfield
FIELD	309:8	309:28	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	309:8	309:8	8	tif
LEAF_NODE	309:11	309:11	8	->
LEAF_NODE	309:13	309:13	8	tif_tagmethods
LEAF_NODE	309:27	309:27	8	.
LEAF_NODE	309:28	309:28	8	vgetfield
ASSIGN_OP	309:38	309:38	6	=
LEAF_NODE	309:38	309:38	7	=
RVAL	309:40	309:40	6	sp -> vgetparent
FIELD	309:40	309:44	7	sp -> vgetparent
LEAF_NODE	309:40	309:40	8	sp
LEAF_NODE	309:42	309:42	8	->
LEAF_NODE	309:44	309:44	8	vgetparent
LEAF_NODE	309:54	309:54	4	;
EXPR_STATEMENT	310:8	310:54	3	tif -> tif_tagmethods . vsetfield = sp -> vsetparent ;
EXPR	310:8	310:8	4	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
ASSIGN	310:8	310:40	5	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
LVAL	310:8	310:8	6	tif -> tif_tagmethods . vsetfield
FIELD	310:8	310:28	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	310:8	310:8	8	tif
LEAF_NODE	310:11	310:11	8	->
LEAF_NODE	310:13	310:13	8	tif_tagmethods
LEAF_NODE	310:27	310:27	8	.
LEAF_NODE	310:28	310:28	8	vsetfield
ASSIGN_OP	310:38	310:38	6	=
LEAF_NODE	310:38	310:38	7	=
RVAL	310:40	310:40	6	sp -> vsetparent
FIELD	310:40	310:44	7	sp -> vsetparent
LEAF_NODE	310:40	310:40	8	sp
LEAF_NODE	310:42	310:42	8	->
LEAF_NODE	310:44	310:44	8	vsetparent
LEAF_NODE	310:54	310:54	4	;
SELECTION	312:8	312:25	3	
KEYWORD	312:8	312:8	4	if
LEAF_NODE	312:8	312:8	5	if
LEAF_NODE	312:11	312:11	4	(
CONDITION	312:12	312:12	4	sp -> dstream
EXPR	312:12	312:12	5	sp -> dstream
FIELD	312:12	312:16	6	sp -> dstream
LEAF_NODE	312:12	312:12	7	sp
LEAF_NODE	312:14	312:14	7	->
LEAF_NODE	312:16	312:16	7	dstream
LEAF_NODE	312:23	312:23	4	)
STATEMENTS	312:25	315:8	4	
LEAF_NODE	312:25	312:25	5	{
STATEMENTS	313:12	314:12	5	
EXPR_STATEMENT	313:12	313:41	6	ZSTD_freeDStream ( sp -> dstream ) ;
EXPR	313:12	313:12	7	ZSTD_freeDStream ( sp -> dstream )
FUNCTION_CALL	313:12	313:40	8	ZSTD_freeDStream ( sp -> dstream )
CALLEE	313:12	313:12	9	ZSTD_freeDStream
LEAF_NODE	313:12	313:12	10	ZSTD_freeDStream
LEAF_NODE	313:28	313:28	9	(
ARGUMENT	313:29	313:29	9	sp -> dstream
FIELD	313:29	313:33	10	sp -> dstream
LEAF_NODE	313:29	313:29	11	sp
LEAF_NODE	313:31	313:31	11	->
LEAF_NODE	313:33	313:33	11	dstream
LEAF_NODE	313:40	313:40	9	)
LEAF_NODE	313:41	313:41	7	;
EXPR_STATEMENT	314:12	314:30	6	sp -> dstream = NULL ;
EXPR	314:12	314:12	7	sp -> dstream = NULL
ASSIGN	314:12	314:26	8	sp -> dstream = NULL
LVAL	314:12	314:12	9	sp -> dstream
FIELD	314:12	314:16	10	sp -> dstream
LEAF_NODE	314:12	314:12	11	sp
LEAF_NODE	314:14	314:14	11	->
LEAF_NODE	314:16	314:16	11	dstream
ASSIGN_OP	314:24	314:24	9	=
LEAF_NODE	314:24	314:24	10	=
RVAL	314:26	314:26	9	NULL
FIELD	314:26	314:26	10	NULL
LEAF_NODE	314:26	314:26	11	NULL
LEAF_NODE	314:30	314:30	7	;
LEAF_NODE	315:8	315:8	5	}
SELECTION	316:8	316:25	3	
KEYWORD	316:8	316:8	4	if
LEAF_NODE	316:8	316:8	5	if
LEAF_NODE	316:11	316:11	4	(
CONDITION	316:12	316:12	4	sp -> cstream
EXPR	316:12	316:12	5	sp -> cstream
FIELD	316:12	316:16	6	sp -> cstream
LEAF_NODE	316:12	316:12	7	sp
LEAF_NODE	316:14	316:14	7	->
LEAF_NODE	316:16	316:16	7	cstream
LEAF_NODE	316:23	316:23	4	)
STATEMENTS	316:25	319:8	4	
LEAF_NODE	316:25	316:25	5	{
STATEMENTS	317:12	318:12	5	
EXPR_STATEMENT	317:12	317:41	6	ZSTD_freeCStream ( sp -> cstream ) ;
EXPR	317:12	317:12	7	ZSTD_freeCStream ( sp -> cstream )
FUNCTION_CALL	317:12	317:40	8	ZSTD_freeCStream ( sp -> cstream )
CALLEE	317:12	317:12	9	ZSTD_freeCStream
LEAF_NODE	317:12	317:12	10	ZSTD_freeCStream
LEAF_NODE	317:28	317:28	9	(
ARGUMENT	317:29	317:29	9	sp -> cstream
FIELD	317:29	317:33	10	sp -> cstream
LEAF_NODE	317:29	317:29	11	sp
LEAF_NODE	317:31	317:31	11	->
LEAF_NODE	317:33	317:33	11	cstream
LEAF_NODE	317:40	317:40	9	)
LEAF_NODE	317:41	317:41	7	;
EXPR_STATEMENT	318:12	318:30	6	sp -> cstream = NULL ;
EXPR	318:12	318:12	7	sp -> cstream = NULL
ASSIGN	318:12	318:26	8	sp -> cstream = NULL
LVAL	318:12	318:12	9	sp -> cstream
FIELD	318:12	318:16	10	sp -> cstream
LEAF_NODE	318:12	318:12	11	sp
LEAF_NODE	318:14	318:14	11	->
LEAF_NODE	318:16	318:16	11	cstream
ASSIGN_OP	318:24	318:24	9	=
LEAF_NODE	318:24	318:24	10	=
RVAL	318:26	318:26	9	NULL
FIELD	318:26	318:26	10	NULL
LEAF_NODE	318:26	318:26	11	NULL
LEAF_NODE	318:30	318:30	7	;
LEAF_NODE	319:8	319:8	5	}
EXPR_STATEMENT	320:8	320:21	3	_TIFFfree ( sp ) ;
EXPR	320:8	320:8	4	_TIFFfree ( sp )
FUNCTION_CALL	320:8	320:20	5	_TIFFfree ( sp )
CALLEE	320:8	320:8	6	_TIFFfree
LEAF_NODE	320:8	320:8	7	_TIFFfree
LEAF_NODE	320:17	320:17	6	(
ARGUMENT	320:18	320:18	6	sp
FIELD	320:18	320:18	7	sp
LEAF_NODE	320:18	320:18	8	sp
LEAF_NODE	320:20	320:20	6	)
LEAF_NODE	320:21	320:21	4	;
EXPR_STATEMENT	321:8	321:28	3	tif -> tif_data = NULL ;
EXPR	321:8	321:8	4	tif -> tif_data = NULL
ASSIGN	321:8	321:24	5	tif -> tif_data = NULL
LVAL	321:8	321:8	6	tif -> tif_data
FIELD	321:8	321:13	7	tif -> tif_data
LEAF_NODE	321:8	321:8	8	tif
LEAF_NODE	321:11	321:11	8	->
LEAF_NODE	321:13	321:13	8	tif_data
ASSIGN_OP	321:22	321:22	6	=
LEAF_NODE	321:22	321:22	7	=
RVAL	321:24	321:24	6	NULL
FIELD	321:24	321:24	7	NULL
LEAF_NODE	321:24	321:24	8	NULL
LEAF_NODE	321:28	321:28	4	;
EXPR_STATEMENT	323:8	323:44	3	_TIFFSetDefaultCompressionState ( tif ) ;
EXPR	323:8	323:8	4	_TIFFSetDefaultCompressionState ( tif )
FUNCTION_CALL	323:8	323:43	5	_TIFFSetDefaultCompressionState ( tif )
CALLEE	323:8	323:8	6	_TIFFSetDefaultCompressionState
LEAF_NODE	323:8	323:8	7	_TIFFSetDefaultCompressionState
LEAF_NODE	323:39	323:39	6	(
ARGUMENT	323:40	323:40	6	tif
FIELD	323:40	323:40	7	tif
LEAF_NODE	323:40	323:40	8	tif
LEAF_NODE	323:43	323:43	6	)
LEAF_NODE	323:44	323:44	4	;
LEAF_NODE	324:0	324:0	2	}
FUNCTION_DEF	326:0	347:0	1	
RETURN_TYPE	326:0	326:7	2	static int
LEAF_NODE	326:0	326:0	3	static
TYPE_NAME	326:7	326:7	3	int
LEAF_NODE	326:7	326:7	4	int
FUNCTION_NAME	327:0	327:0	2	ZSTDVSetField
LEAF_NODE	327:0	327:0	3	ZSTDVSetField
PARAMETER_LIST	327:13	327:47	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	327:13	327:13	3	(
PARAMETER_DECL	327:14	327:20	3	TIFF * tif
TYPE	327:14	327:18	4	TIFF *
TYPE_NAME	327:14	327:14	5	TIFF
LEAF_NODE	327:14	327:14	6	TIFF
POINTER	327:18	327:18	5	*
LEAF_NODE	327:18	327:18	6	*
NAME	327:20	327:20	4	tif
LEAF_NODE	327:20	327:20	5	tif
LEAF_NODE	327:23	327:23	3	,
PARAMETER_DECL	327:25	327:32	3	uint32 tag
TYPE	327:25	327:25	4	uint32
TYPE_NAME	327:25	327:25	5	uint32
LEAF_NODE	327:25	327:25	6	uint32
NAME	327:32	327:32	4	tag
LEAF_NODE	327:32	327:32	5	tag
LEAF_NODE	327:35	327:35	3	,
PARAMETER_DECL	327:37	327:45	3	va_list ap
TYPE	327:37	327:37	4	va_list
TYPE_NAME	327:37	327:37	5	va_list
LEAF_NODE	327:37	327:37	6	va_list
NAME	327:45	327:45	4	ap
LEAF_NODE	327:45	327:45	5	ap
LEAF_NODE	327:47	327:47	3	)
LEAF_NODE	328:0	328:0	2	{
STATEMENTS	329:1	332:8	2	
LEAF_NODE	329:1	329:1	3	static
SIMPLE_DECL	329:8	329:45	3	const char [ ] module ; module = "ZSTDVSetField" ;
VAR_DECL	329:8	329:19	4	const char [ ] module ; module = "ZSTDVSetField"
TYPE	329:8	329:25	5	const char [ ]
TYPE_NAME	329:8	329:14	6	const char
LEAF_NODE	329:8	329:8	7	const
LEAF_NODE	329:14	329:14	7	char
TYPE_SUFFIX	329:25	329:26	6	[ ]
LEAF_NODE	329:25	329:25	7	[
LEAF_NODE	329:26	329:26	7	]
NAME	329:19	329:19	5	module
LEAF_NODE	329:19	329:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	329:19	329:19	5	module = "ZSTDVSetField"
ASSIGN	329:19	329:30	6	module = "ZSTDVSetField"
LVAL	329:19	329:19	7	module
NAME	329:19	329:19	8	module
LEAF_NODE	329:19	329:19	9	module
ASSIGN_OP	329:28	329:28	7	=
LEAF_NODE	329:28	329:28	8	=
RVAL	329:30	329:30	7	"ZSTDVSetField"
FIELD	329:30	329:30	8	"ZSTDVSetField"
LEAF_NODE	329:30	329:30	9	"ZSTDVSetField"
LEAF_NODE	329:45	329:45	4	;
SIMPLE_DECL	330:8	330:35	3	ZSTDState * sp ; sp = LState ( tif ) ;
VAR_DECL	330:8	330:19	4	ZSTDState * sp ; sp = LState ( tif )
TYPE	330:8	330:17	5	ZSTDState *
TYPE_NAME	330:8	330:8	6	ZSTDState
LEAF_NODE	330:8	330:8	7	ZSTDState
POINTER	330:17	330:17	6	*
LEAF_NODE	330:17	330:17	7	*
NAME	330:19	330:19	5	sp
LEAF_NODE	330:19	330:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	330:19	330:19	5	sp = LState ( tif )
ASSIGN	330:19	330:24	6	sp = LState ( tif )
LVAL	330:19	330:19	7	sp
NAME	330:19	330:19	8	sp
LEAF_NODE	330:19	330:19	9	sp
ASSIGN_OP	330:22	330:22	7	=
LEAF_NODE	330:22	330:22	8	=
RVAL	330:24	330:24	7	LState ( tif )
FUNCTION_CALL	330:24	330:34	8	LState ( tif )
CALLEE	330:24	330:24	9	LState
LEAF_NODE	330:24	330:24	10	LState
LEAF_NODE	330:30	330:30	9	(
ARGUMENT	330:31	330:31	9	tif
FIELD	330:31	330:31	10	tif
LEAF_NODE	330:31	330:31	11	tif
LEAF_NODE	330:34	330:34	9	)
LEAF_NODE	330:35	330:35	4	;
SELECTION	332:8	332:21	3	
KEYWORD	332:8	332:8	4	switch
LEAF_NODE	332:8	332:8	5	switch
LEAF_NODE	332:15	332:15	4	(
CONDITION	332:16	332:16	4	tag
EXPR	332:16	332:16	5	tag
FIELD	332:16	332:16	6	tag
LEAF_NODE	332:16	332:16	7	tag
LEAF_NODE	332:19	332:19	4	)
STATEMENTS	332:21	345:8	4	
LEAF_NODE	332:21	332:21	5	{
STATEMENTS	333:8	344:16	5	
LABEL	333:8	333:31	6	case TIFFTAG_ZSTD_LEVEL :
LEAF_NODE	333:8	333:8	7	case
LEAF_NODE	333:13	333:13	7	TIFFTAG_ZSTD_LEVEL
LEAF_NODE	333:31	333:31	7	:
EXPR_STATEMENT	334:16	334:61	6	sp -> compression_level = ( int ) va_arg ( ap , int ) ;
EXPR	334:16	334:16	7	sp -> compression_level = ( int ) va_arg ( ap , int )
ASSIGN	334:16	334:40	8	sp -> compression_level = ( int ) va_arg ( ap , int )
LVAL	334:16	334:16	9	sp -> compression_level
FIELD	334:16	334:20	10	sp -> compression_level
LEAF_NODE	334:16	334:16	11	sp
LEAF_NODE	334:18	334:18	11	->
LEAF_NODE	334:20	334:20	11	compression_level
ASSIGN_OP	334:38	334:38	9	=
LEAF_NODE	334:38	334:38	10	=
RVAL	334:40	334:46	9	( int ) va_arg ( ap , int )
LEAF_NODE	334:40	334:40	10	(
TYPE_NAME	334:41	334:41	10	int
LEAF_NODE	334:41	334:41	11	int
LEAF_NODE	334:44	334:44	10	)
FUNCTION_CALL	334:46	334:60	10	va_arg ( ap , int )
CALLEE	334:46	334:46	11	va_arg
LEAF_NODE	334:46	334:46	12	va_arg
LEAF_NODE	334:52	334:52	11	(
ARGUMENT	334:53	334:53	11	ap
FIELD	334:53	334:53	12	ap
LEAF_NODE	334:53	334:53	13	ap
LEAF_NODE	334:55	334:55	11	,
ARGUMENT	334:57	334:57	11	int
FIELD	334:57	334:57	12	int
LEAF_NODE	334:57	334:57	13	int
LEAF_NODE	334:60	334:60	11	)
LEAF_NODE	334:61	334:61	7	;
SELECTION	335:16	337:16	6	
KEYWORD	335:16	335:16	7	if
LEAF_NODE	335:16	335:16	8	if
LEAF_NODE	335:18	335:18	7	(
CONDITION	335:20	335:20	7	sp -> compression_level <= 0 || sp -> compression_level > ZSTD_maxCLevel ( )
EXPR	335:20	335:20	8	sp -> compression_level <= 0 || sp -> compression_level > ZSTD_maxCLevel ( )
OR	335:20	336:20	9	sp -> compression_level <= 0 || sp -> compression_level > ZSTD_maxCLevel ( )
EXPR	335:20	335:45	10	sp -> compression_level <= 0
FIELD	335:20	335:24	11	sp -> compression_level
LEAF_NODE	335:20	335:20	12	sp
LEAF_NODE	335:22	335:22	12	->
LEAF_NODE	335:24	335:24	12	compression_level
REL_OPERATOR	335:42	335:42	11	<=
LEAF_NODE	335:42	335:42	12	<=
FIELD	335:45	335:45	11	0
LEAF_NODE	335:45	335:45	12	0
LEAF_NODE	335:47	335:47	10	||
EXPR	336:20	336:44	10	sp -> compression_level > ZSTD_maxCLevel ( )
FIELD	336:20	336:24	11	sp -> compression_level
LEAF_NODE	336:20	336:20	12	sp
LEAF_NODE	336:22	336:22	12	->
LEAF_NODE	336:24	336:24	12	compression_level
REL_OPERATOR	336:42	336:42	11	>
LEAF_NODE	336:42	336:42	12	>
FUNCTION_CALL	336:44	336:59	11	ZSTD_maxCLevel ( )
CALLEE	336:44	336:44	12	ZSTD_maxCLevel
LEAF_NODE	336:44	336:44	13	ZSTD_maxCLevel
LEAF_NODE	336:58	336:58	12	(
LEAF_NODE	336:59	336:59	12	)
LEAF_NODE	336:61	336:61	7	)
STATEMENTS	337:16	341:16	7	
LEAF_NODE	337:16	337:16	8	{
STATEMENTS	338:20	338:20	8	
EXPR_STATEMENT	338:20	340:52	9	TIFFWarningExt ( tif -> tif_clientdata , module , "ZSTD_LEVEL should be between 1 and %d" , ZSTD_maxCLevel ( ) ) ;
EXPR	338:20	338:20	10	TIFFWarningExt ( tif -> tif_clientdata , module , "ZSTD_LEVEL should be between 1 and %d" , ZSTD_maxCLevel ( ) )
FUNCTION_CALL	338:20	340:51	11	TIFFWarningExt ( tif -> tif_clientdata , module , "ZSTD_LEVEL should be between 1 and %d" , ZSTD_maxCLevel ( ) )
CALLEE	338:20	338:20	12	TIFFWarningExt
LEAF_NODE	338:20	338:20	13	TIFFWarningExt
LEAF_NODE	338:34	338:34	12	(
ARGUMENT	338:35	338:35	12	tif -> tif_clientdata
FIELD	338:35	338:40	13	tif -> tif_clientdata
LEAF_NODE	338:35	338:35	14	tif
LEAF_NODE	338:38	338:38	14	->
LEAF_NODE	338:40	338:40	14	tif_clientdata
LEAF_NODE	338:54	338:54	12	,
ARGUMENT	338:56	338:56	12	module
FIELD	338:56	338:56	13	module
LEAF_NODE	338:56	338:56	14	module
LEAF_NODE	338:62	338:62	12	,
ARGUMENT	339:35	339:35	12	"ZSTD_LEVEL should be between 1 and %d"
FIELD	339:35	339:35	13	"ZSTD_LEVEL should be between 1 and %d"
LEAF_NODE	339:35	339:35	14	"ZSTD_LEVEL should be between 1 and %d"
LEAF_NODE	339:74	339:74	12	,
ARGUMENT	340:35	340:35	12	ZSTD_maxCLevel ( )
FUNCTION_CALL	340:35	340:50	13	ZSTD_maxCLevel ( )
CALLEE	340:35	340:35	14	ZSTD_maxCLevel
LEAF_NODE	340:35	340:35	15	ZSTD_maxCLevel
LEAF_NODE	340:49	340:49	14	(
LEAF_NODE	340:50	340:50	14	)
LEAF_NODE	340:51	340:51	12	)
LEAF_NODE	340:52	340:52	10	;
LEAF_NODE	341:16	341:16	8	}
JUMP_STATEMENT	342:16	342:24	6	return 1 ;
KEYWORD	342:16	342:16	7	return
LEAF_NODE	342:16	342:16	8	return
DESTINATION	342:23	342:23	7	1
EXPR	342:23	342:23	8	1
FIELD	342:23	342:23	9	1
LEAF_NODE	342:23	342:23	10	1
LEAF_NODE	342:24	342:24	7	;
LABEL	343:8	343:15	6	default :
LEAF_NODE	343:8	343:8	7	default
LEAF_NODE	343:15	343:15	7	:
JUMP_STATEMENT	344:16	344:54	6	return ( * sp -> vsetparent ) ( tif , tag , ap ) ;
KEYWORD	344:16	344:16	7	return
LEAF_NODE	344:16	344:16	8	return
DESTINATION	344:23	344:23	7	( * sp -> vsetparent ) ( tif , tag , ap )
EXPR	344:23	344:23	8	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	344:23	344:53	9	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	344:23	344:39	10	( * sp -> vsetparent )
LEAF_NODE	344:23	344:23	11	(
UNARY_EXPR	344:24	344:25	11	* sp -> vsetparent
UNARY_OPERATOR	344:24	344:24	12	*
LEAF_NODE	344:24	344:24	13	*
FIELD	344:25	344:29	12	sp -> vsetparent
LEAF_NODE	344:25	344:25	13	sp
LEAF_NODE	344:27	344:27	13	->
LEAF_NODE	344:29	344:29	13	vsetparent
LEAF_NODE	344:39	344:39	11	)
LEAF_NODE	344:40	344:40	10	(
ARGUMENT	344:41	344:41	10	tif
FIELD	344:41	344:41	11	tif
LEAF_NODE	344:41	344:41	12	tif
LEAF_NODE	344:44	344:44	10	,
ARGUMENT	344:46	344:46	10	tag
FIELD	344:46	344:46	11	tag
LEAF_NODE	344:46	344:46	12	tag
LEAF_NODE	344:49	344:49	10	,
ARGUMENT	344:51	344:51	10	ap
FIELD	344:51	344:51	11	ap
LEAF_NODE	344:51	344:51	12	ap
LEAF_NODE	344:53	344:53	10	)
LEAF_NODE	344:54	344:54	7	;
LEAF_NODE	345:8	345:8	5	}
LEAF_NODE	347:0	347:0	2	}
FUNCTION_DEF	349:0	362:0	1	
RETURN_TYPE	349:0	349:7	2	static int
LEAF_NODE	349:0	349:0	3	static
TYPE_NAME	349:7	349:7	3	int
LEAF_NODE	349:7	349:7	4	int
FUNCTION_NAME	350:0	350:0	2	ZSTDVGetField
LEAF_NODE	350:0	350:0	3	ZSTDVGetField
PARAMETER_LIST	350:13	350:47	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	350:13	350:13	3	(
PARAMETER_DECL	350:14	350:20	3	TIFF * tif
TYPE	350:14	350:18	4	TIFF *
TYPE_NAME	350:14	350:14	5	TIFF
LEAF_NODE	350:14	350:14	6	TIFF
POINTER	350:18	350:18	5	*
LEAF_NODE	350:18	350:18	6	*
NAME	350:20	350:20	4	tif
LEAF_NODE	350:20	350:20	5	tif
LEAF_NODE	350:23	350:23	3	,
PARAMETER_DECL	350:25	350:32	3	uint32 tag
TYPE	350:25	350:25	4	uint32
TYPE_NAME	350:25	350:25	5	uint32
LEAF_NODE	350:25	350:25	6	uint32
NAME	350:32	350:32	4	tag
LEAF_NODE	350:32	350:32	5	tag
LEAF_NODE	350:35	350:35	3	,
PARAMETER_DECL	350:37	350:45	3	va_list ap
TYPE	350:37	350:37	4	va_list
TYPE_NAME	350:37	350:37	5	va_list
LEAF_NODE	350:37	350:37	6	va_list
NAME	350:45	350:45	4	ap
LEAF_NODE	350:45	350:45	5	ap
LEAF_NODE	350:47	350:47	3	)
LEAF_NODE	351:0	351:0	2	{
STATEMENTS	352:8	361:8	2	
SIMPLE_DECL	352:8	352:35	3	ZSTDState * sp ; sp = LState ( tif ) ;
VAR_DECL	352:8	352:19	4	ZSTDState * sp ; sp = LState ( tif )
TYPE	352:8	352:17	5	ZSTDState *
TYPE_NAME	352:8	352:8	6	ZSTDState
LEAF_NODE	352:8	352:8	7	ZSTDState
POINTER	352:17	352:17	6	*
LEAF_NODE	352:17	352:17	7	*
NAME	352:19	352:19	5	sp
LEAF_NODE	352:19	352:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	352:19	352:19	5	sp = LState ( tif )
ASSIGN	352:19	352:24	6	sp = LState ( tif )
LVAL	352:19	352:19	7	sp
NAME	352:19	352:19	8	sp
LEAF_NODE	352:19	352:19	9	sp
ASSIGN_OP	352:22	352:22	7	=
LEAF_NODE	352:22	352:22	8	=
RVAL	352:24	352:24	7	LState ( tif )
FUNCTION_CALL	352:24	352:34	8	LState ( tif )
CALLEE	352:24	352:24	9	LState
LEAF_NODE	352:24	352:24	10	LState
LEAF_NODE	352:30	352:30	9	(
ARGUMENT	352:31	352:31	9	tif
FIELD	352:31	352:31	10	tif
LEAF_NODE	352:31	352:31	11	tif
LEAF_NODE	352:34	352:34	9	)
LEAF_NODE	352:35	352:35	4	;
SELECTION	354:8	354:21	3	
KEYWORD	354:8	354:8	4	switch
LEAF_NODE	354:8	354:8	5	switch
LEAF_NODE	354:15	354:15	4	(
CONDITION	354:16	354:16	4	tag
EXPR	354:16	354:16	5	tag
FIELD	354:16	354:16	6	tag
LEAF_NODE	354:16	354:16	7	tag
LEAF_NODE	354:19	354:19	4	)
STATEMENTS	354:21	360:8	4	
LEAF_NODE	354:21	354:21	5	{
STATEMENTS	355:8	359:16	5	
LABEL	355:8	355:31	6	case TIFFTAG_ZSTD_LEVEL :
LEAF_NODE	355:8	355:8	7	case
LEAF_NODE	355:13	355:13	7	TIFFTAG_ZSTD_LEVEL
LEAF_NODE	355:31	355:31	7	:
LEAF_NODE	356:16	356:16	6	*
LEAF_NODE	356:17	356:17	6	va_arg
LEAF_NODE	356:23	356:23	6	(
LEAF_NODE	356:24	356:24	6	ap
LEAF_NODE	356:26	356:26	6	,
LEAF_NODE	356:28	356:28	6	int
LEAF_NODE	356:31	356:31	6	*
LEAF_NODE	356:32	356:32	6	)
LEAF_NODE	356:34	356:34	6	=
EXPR_STATEMENT	356:36	356:57	6	sp -> compression_level ;
EXPR	356:36	356:36	7	sp -> compression_level
FIELD	356:36	356:40	8	sp -> compression_level
LEAF_NODE	356:36	356:36	9	sp
LEAF_NODE	356:38	356:38	9	->
LEAF_NODE	356:40	356:40	9	compression_level
LEAF_NODE	356:57	356:57	7	;
JUMP_STATEMENT	357:16	357:21	6	break DESTINATION ;
KEYWORD	357:16	357:16	7	break
LEAF_NODE	357:16	357:16	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	357:21	357:21	7	;
LABEL	358:8	358:15	6	default :
LEAF_NODE	358:8	358:8	7	default
LEAF_NODE	358:15	358:15	7	:
JUMP_STATEMENT	359:16	359:54	6	return ( * sp -> vgetparent ) ( tif , tag , ap ) ;
KEYWORD	359:16	359:16	7	return
LEAF_NODE	359:16	359:16	8	return
DESTINATION	359:23	359:23	7	( * sp -> vgetparent ) ( tif , tag , ap )
EXPR	359:23	359:23	8	( * sp -> vgetparent ) ( tif , tag , ap )
FUNCTION_CALL	359:23	359:53	9	( * sp -> vgetparent ) ( tif , tag , ap )
CALLEE	359:23	359:39	10	( * sp -> vgetparent )
LEAF_NODE	359:23	359:23	11	(
UNARY_EXPR	359:24	359:25	11	* sp -> vgetparent
UNARY_OPERATOR	359:24	359:24	12	*
LEAF_NODE	359:24	359:24	13	*
FIELD	359:25	359:29	12	sp -> vgetparent
LEAF_NODE	359:25	359:25	13	sp
LEAF_NODE	359:27	359:27	13	->
LEAF_NODE	359:29	359:29	13	vgetparent
LEAF_NODE	359:39	359:39	11	)
LEAF_NODE	359:40	359:40	10	(
ARGUMENT	359:41	359:41	10	tif
FIELD	359:41	359:41	11	tif
LEAF_NODE	359:41	359:41	12	tif
LEAF_NODE	359:44	359:44	10	,
ARGUMENT	359:46	359:46	10	tag
FIELD	359:46	359:46	11	tag
LEAF_NODE	359:46	359:46	12	tag
LEAF_NODE	359:49	359:49	10	,
ARGUMENT	359:51	359:51	10	ap
FIELD	359:51	359:51	11	ap
LEAF_NODE	359:51	359:51	12	ap
LEAF_NODE	359:53	359:53	10	)
LEAF_NODE	359:54	359:54	7	;
LEAF_NODE	360:8	360:8	5	}
JUMP_STATEMENT	361:8	361:16	3	return 1 ;
KEYWORD	361:8	361:8	4	return
LEAF_NODE	361:8	361:8	5	return
DESTINATION	361:15	361:15	4	1
EXPR	361:15	361:15	5	1
FIELD	361:15	361:15	6	1
LEAF_NODE	361:15	361:15	7	1
LEAF_NODE	361:16	361:16	4	;
LEAF_NODE	362:0	362:0	2	}
FUNCTION_DEF	370:0	437:0	1	
RETURN_TYPE	370:0	370:0	2	int
TYPE_NAME	370:0	370:0	3	int
LEAF_NODE	370:0	370:0	4	int
FUNCTION_NAME	371:0	371:0	2	TIFFInitZSTD
LEAF_NODE	371:0	371:0	3	TIFFInitZSTD
PARAMETER_LIST	371:12	371:34	2	( TIFF * tif , int scheme )
LEAF_NODE	371:12	371:12	3	(
PARAMETER_DECL	371:13	371:19	3	TIFF * tif
TYPE	371:13	371:17	4	TIFF *
TYPE_NAME	371:13	371:13	5	TIFF
LEAF_NODE	371:13	371:13	6	TIFF
POINTER	371:17	371:17	5	*
LEAF_NODE	371:17	371:17	6	*
NAME	371:19	371:19	4	tif
LEAF_NODE	371:19	371:19	5	tif
LEAF_NODE	371:22	371:22	3	,
PARAMETER_DECL	371:24	371:28	3	int scheme
TYPE	371:24	371:24	4	int
TYPE_NAME	371:24	371:24	5	int
LEAF_NODE	371:24	371:24	6	int
NAME	371:28	371:28	4	scheme
LEAF_NODE	371:28	371:28	5	scheme
LEAF_NODE	371:34	371:34	3	)
LEAF_NODE	372:0	372:0	2	{
STATEMENTS	373:8	436:8	2	
LEAF_NODE	373:8	373:8	3	static
SIMPLE_DECL	373:15	373:51	3	const char [ ] module ; module = "TIFFInitZSTD" ;
VAR_DECL	373:15	373:26	4	const char [ ] module ; module = "TIFFInitZSTD"
TYPE	373:15	373:32	5	const char [ ]
TYPE_NAME	373:15	373:21	6	const char
LEAF_NODE	373:15	373:15	7	const
LEAF_NODE	373:21	373:21	7	char
TYPE_SUFFIX	373:32	373:33	6	[ ]
LEAF_NODE	373:32	373:32	7	[
LEAF_NODE	373:33	373:33	7	]
NAME	373:26	373:26	5	module
LEAF_NODE	373:26	373:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	373:26	373:26	5	module = "TIFFInitZSTD"
ASSIGN	373:26	373:37	6	module = "TIFFInitZSTD"
LVAL	373:26	373:26	7	module
NAME	373:26	373:26	8	module
LEAF_NODE	373:26	373:26	9	module
ASSIGN_OP	373:35	373:35	7	=
LEAF_NODE	373:35	373:35	8	=
RVAL	373:37	373:37	7	"TIFFInitZSTD"
FIELD	373:37	373:37	8	"TIFFInitZSTD"
LEAF_NODE	373:37	373:37	9	"TIFFInitZSTD"
LEAF_NODE	373:51	373:51	4	;
SIMPLE_DECL	374:8	374:21	3	ZSTDState * sp ;
VAR_DECL	374:8	374:19	4	ZSTDState * sp
TYPE	374:8	374:17	5	ZSTDState *
TYPE_NAME	374:8	374:8	6	ZSTDState
LEAF_NODE	374:8	374:8	7	ZSTDState
POINTER	374:17	374:17	6	*
LEAF_NODE	374:17	374:17	7	*
NAME	374:19	374:19	5	sp
LEAF_NODE	374:19	374:19	6	sp
LEAF_NODE	374:21	374:21	4	;
EXPR_STATEMENT	376:8	376:44	3	assert ( scheme == COMPRESSION_ZSTD ) ;
EXPR	376:8	376:8	4	assert ( scheme == COMPRESSION_ZSTD )
FUNCTION_CALL	376:8	376:43	5	assert ( scheme == COMPRESSION_ZSTD )
CALLEE	376:8	376:8	6	assert
LEAF_NODE	376:8	376:8	7	assert
LEAF_NODE	376:14	376:14	6	(
ARGUMENT	376:16	376:26	6	scheme == COMPRESSION_ZSTD
FIELD	376:16	376:16	7	scheme
LEAF_NODE	376:16	376:16	8	scheme
EQ_OPERATOR	376:23	376:23	7	==
LEAF_NODE	376:23	376:23	8	==
FIELD	376:26	376:26	7	COMPRESSION_ZSTD
LEAF_NODE	376:26	376:26	8	COMPRESSION_ZSTD
LEAF_NODE	376:43	376:43	6	)
LEAF_NODE	376:44	376:44	4	;
SELECTION	381:8	381:76	3	
KEYWORD	381:8	381:8	4	if
LEAF_NODE	381:8	381:8	5	if
LEAF_NODE	381:11	381:11	4	(
CONDITION	381:12	381:12	4	! _TIFFMergeFields ( tif , ZSTDFields , TIFFArrayCount ( ZSTDFields ) )
EXPR	381:12	381:12	5	! _TIFFMergeFields ( tif , ZSTDFields , TIFFArrayCount ( ZSTDFields ) )
UNARY_EXPR	381:12	381:13	6	! _TIFFMergeFields ( tif , ZSTDFields , TIFFArrayCount ( ZSTDFields ) )
UNARY_OPERATOR	381:12	381:12	7	!
LEAF_NODE	381:12	381:12	8	!
FUNCTION_CALL	381:13	381:73	7	_TIFFMergeFields ( tif , ZSTDFields , TIFFArrayCount ( ZSTDFields ) )
CALLEE	381:13	381:13	8	_TIFFMergeFields
LEAF_NODE	381:13	381:13	9	_TIFFMergeFields
LEAF_NODE	381:29	381:29	8	(
ARGUMENT	381:30	381:30	8	tif
FIELD	381:30	381:30	9	tif
LEAF_NODE	381:30	381:30	10	tif
LEAF_NODE	381:33	381:33	8	,
ARGUMENT	381:35	381:35	8	ZSTDFields
FIELD	381:35	381:35	9	ZSTDFields
LEAF_NODE	381:35	381:35	10	ZSTDFields
LEAF_NODE	381:45	381:45	8	,
ARGUMENT	381:47	381:47	8	TIFFArrayCount ( ZSTDFields )
FUNCTION_CALL	381:47	381:72	9	TIFFArrayCount ( ZSTDFields )
CALLEE	381:47	381:47	10	TIFFArrayCount
LEAF_NODE	381:47	381:47	11	TIFFArrayCount
LEAF_NODE	381:61	381:61	10	(
ARGUMENT	381:62	381:62	10	ZSTDFields
FIELD	381:62	381:62	11	ZSTDFields
LEAF_NODE	381:62	381:62	12	ZSTDFields
LEAF_NODE	381:72	381:72	10	)
LEAF_NODE	381:73	381:73	8	)
LEAF_NODE	381:74	381:74	4	)
STATEMENTS	381:76	385:8	4	
LEAF_NODE	381:76	381:76	5	{
STATEMENTS	382:16	384:16	5	
EXPR_STATEMENT	382:16	383:70	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging ZSTD codec-specific tags failed" ) ;
EXPR	382:16	382:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging ZSTD codec-specific tags failed" )
FUNCTION_CALL	382:16	383:69	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging ZSTD codec-specific tags failed" )
CALLEE	382:16	382:16	9	TIFFErrorExt
LEAF_NODE	382:16	382:16	10	TIFFErrorExt
LEAF_NODE	382:28	382:28	9	(
ARGUMENT	382:29	382:29	9	tif -> tif_clientdata
FIELD	382:29	382:34	10	tif -> tif_clientdata
LEAF_NODE	382:29	382:29	11	tif
LEAF_NODE	382:32	382:32	11	->
LEAF_NODE	382:34	382:34	11	tif_clientdata
LEAF_NODE	382:48	382:48	9	,
ARGUMENT	382:50	382:50	9	module
FIELD	382:50	382:50	10	module
LEAF_NODE	382:50	382:50	11	module
LEAF_NODE	382:56	382:56	9	,
ARGUMENT	383:28	383:28	9	"Merging ZSTD codec-specific tags failed"
FIELD	383:28	383:28	10	"Merging ZSTD codec-specific tags failed"
LEAF_NODE	383:28	383:28	11	"Merging ZSTD codec-specific tags failed"
LEAF_NODE	383:69	383:69	9	)
LEAF_NODE	383:70	383:70	7	;
JUMP_STATEMENT	384:16	384:24	6	return 0 ;
KEYWORD	384:16	384:16	7	return
LEAF_NODE	384:16	384:16	8	return
DESTINATION	384:23	384:23	7	0
EXPR	384:23	384:23	8	0
FIELD	384:23	384:23	9	0
LEAF_NODE	384:23	384:23	10	0
LEAF_NODE	384:24	384:24	7	;
LEAF_NODE	385:8	385:8	5	}
EXPR_STATEMENT	390:8	390:63	3	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( ZSTDState ) ) ;
EXPR	390:8	390:8	4	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( ZSTDState ) )
ASSIGN	390:8	390:24	5	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( ZSTDState ) )
LVAL	390:8	390:8	6	tif -> tif_data
FIELD	390:8	390:13	7	tif -> tif_data
LEAF_NODE	390:8	390:8	8	tif
LEAF_NODE	390:11	390:11	8	->
LEAF_NODE	390:13	390:13	8	tif_data
ASSIGN_OP	390:22	390:22	6	=
LEAF_NODE	390:22	390:22	7	=
RVAL	390:24	390:33	6	( uint8 * ) _TIFFmalloc ( sizeof ( ZSTDState ) )
LEAF_NODE	390:24	390:24	7	(
TYPE_NAME	390:25	390:25	7	uint8
LEAF_NODE	390:25	390:25	8	uint8
LEAF_NODE	390:30	390:30	7	*
LEAF_NODE	390:31	390:31	7	)
FUNCTION_CALL	390:33	390:62	7	_TIFFmalloc ( sizeof ( ZSTDState ) )
CALLEE	390:33	390:33	8	_TIFFmalloc
LEAF_NODE	390:33	390:33	9	_TIFFmalloc
LEAF_NODE	390:44	390:44	8	(
ARGUMENT	390:45	390:45	8	sizeof ( ZSTDState )
FUNCTION_CALL	390:45	390:61	9	sizeof ( ZSTDState )
CALLEE	390:45	390:45	10	sizeof
LEAF_NODE	390:45	390:45	11	sizeof
LEAF_NODE	390:51	390:51	10	(
ARGUMENT	390:52	390:52	10	ZSTDState
FIELD	390:52	390:52	11	ZSTDState
LEAF_NODE	390:52	390:52	12	ZSTDState
LEAF_NODE	390:61	390:61	10	)
LEAF_NODE	390:62	390:62	8	)
LEAF_NODE	390:63	390:63	4	;
SELECTION	391:8	392:16	3	
KEYWORD	391:8	391:8	4	if
LEAF_NODE	391:8	391:8	5	if
LEAF_NODE	391:11	391:11	4	(
CONDITION	391:12	391:12	4	tif -> tif_data == NULL
EXPR	391:12	391:29	5	tif -> tif_data == NULL
FIELD	391:12	391:17	6	tif -> tif_data
LEAF_NODE	391:12	391:12	7	tif
LEAF_NODE	391:15	391:15	7	->
LEAF_NODE	391:17	391:17	7	tif_data
EQ_OPERATOR	391:26	391:26	6	==
LEAF_NODE	391:26	391:26	7	==
FIELD	391:29	391:29	6	NULL
LEAF_NODE	391:29	391:29	7	NULL
LEAF_NODE	391:33	391:33	4	)
STATEMENTS	392:16	392:16	4	
JUMP_STATEMENT	392:16	392:24	5	goto bad ;
KEYWORD	392:16	392:16	6	goto
LEAF_NODE	392:16	392:16	7	goto
DESTINATION	392:21	392:21	6	bad
LEAF_NODE	392:21	392:21	7	bad
LEAF_NODE	392:24	392:24	6	;
EXPR_STATEMENT	393:8	393:24	3	sp = LState ( tif ) ;
EXPR	393:8	393:8	4	sp = LState ( tif )
ASSIGN	393:8	393:13	5	sp = LState ( tif )
LVAL	393:8	393:8	6	sp
FIELD	393:8	393:8	7	sp
LEAF_NODE	393:8	393:8	8	sp
ASSIGN_OP	393:11	393:11	6	=
LEAF_NODE	393:11	393:11	7	=
RVAL	393:13	393:13	6	LState ( tif )
FUNCTION_CALL	393:13	393:23	7	LState ( tif )
CALLEE	393:13	393:13	8	LState
LEAF_NODE	393:13	393:13	9	LState
LEAF_NODE	393:19	393:19	8	(
ARGUMENT	393:20	393:20	8	tif
FIELD	393:20	393:20	9	tif
LEAF_NODE	393:20	393:20	10	tif
LEAF_NODE	393:23	393:23	8	)
LEAF_NODE	393:24	393:24	4	;
EXPR_STATEMENT	398:8	398:54	3	sp -> vgetparent = tif -> tif_tagmethods . vgetfield ;
EXPR	398:8	398:8	4	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
ASSIGN	398:8	398:25	5	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
LVAL	398:8	398:8	6	sp -> vgetparent
FIELD	398:8	398:12	7	sp -> vgetparent
LEAF_NODE	398:8	398:8	8	sp
LEAF_NODE	398:10	398:10	8	->
LEAF_NODE	398:12	398:12	8	vgetparent
ASSIGN_OP	398:23	398:23	6	=
LEAF_NODE	398:23	398:23	7	=
RVAL	398:25	398:25	6	tif -> tif_tagmethods . vgetfield
FIELD	398:25	398:45	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	398:25	398:25	8	tif
LEAF_NODE	398:28	398:28	8	->
LEAF_NODE	398:30	398:30	8	tif_tagmethods
LEAF_NODE	398:44	398:44	8	.
LEAF_NODE	398:45	398:45	8	vgetfield
LEAF_NODE	398:54	398:54	4	;
EXPR_STATEMENT	399:8	399:53	3	tif -> tif_tagmethods . vgetfield = ZSTDVGetField ;
EXPR	399:8	399:8	4	tif -> tif_tagmethods . vgetfield = ZSTDVGetField
ASSIGN	399:8	399:40	5	tif -> tif_tagmethods . vgetfield = ZSTDVGetField
LVAL	399:8	399:8	6	tif -> tif_tagmethods . vgetfield
FIELD	399:8	399:28	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	399:8	399:8	8	tif
LEAF_NODE	399:11	399:11	8	->
LEAF_NODE	399:13	399:13	8	tif_tagmethods
LEAF_NODE	399:27	399:27	8	.
LEAF_NODE	399:28	399:28	8	vgetfield
ASSIGN_OP	399:38	399:38	6	=
LEAF_NODE	399:38	399:38	7	=
RVAL	399:40	399:40	6	ZSTDVGetField
FIELD	399:40	399:40	7	ZSTDVGetField
LEAF_NODE	399:40	399:40	8	ZSTDVGetField
LEAF_NODE	399:53	399:53	4	;
EXPR_STATEMENT	400:8	400:54	3	sp -> vsetparent = tif -> tif_tagmethods . vsetfield ;
EXPR	400:8	400:8	4	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
ASSIGN	400:8	400:25	5	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
LVAL	400:8	400:8	6	sp -> vsetparent
FIELD	400:8	400:12	7	sp -> vsetparent
LEAF_NODE	400:8	400:8	8	sp
LEAF_NODE	400:10	400:10	8	->
LEAF_NODE	400:12	400:12	8	vsetparent
ASSIGN_OP	400:23	400:23	6	=
LEAF_NODE	400:23	400:23	7	=
RVAL	400:25	400:25	6	tif -> tif_tagmethods . vsetfield
FIELD	400:25	400:45	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	400:25	400:25	8	tif
LEAF_NODE	400:28	400:28	8	->
LEAF_NODE	400:30	400:30	8	tif_tagmethods
LEAF_NODE	400:44	400:44	8	.
LEAF_NODE	400:45	400:45	8	vsetfield
LEAF_NODE	400:54	400:54	4	;
EXPR_STATEMENT	401:8	401:53	3	tif -> tif_tagmethods . vsetfield = ZSTDVSetField ;
EXPR	401:8	401:8	4	tif -> tif_tagmethods . vsetfield = ZSTDVSetField
ASSIGN	401:8	401:40	5	tif -> tif_tagmethods . vsetfield = ZSTDVSetField
LVAL	401:8	401:8	6	tif -> tif_tagmethods . vsetfield
FIELD	401:8	401:28	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	401:8	401:8	8	tif
LEAF_NODE	401:11	401:11	8	->
LEAF_NODE	401:13	401:13	8	tif_tagmethods
LEAF_NODE	401:27	401:27	8	.
LEAF_NODE	401:28	401:28	8	vsetfield
ASSIGN_OP	401:38	401:38	6	=
LEAF_NODE	401:38	401:38	7	=
RVAL	401:40	401:40	6	ZSTDVSetField
FIELD	401:40	401:40	7	ZSTDVSetField
LEAF_NODE	401:40	401:40	8	ZSTDVSetField
LEAF_NODE	401:53	401:53	4	;
EXPR_STATEMENT	404:8	404:33	3	sp -> compression_level = 9 ;
EXPR	404:8	404:8	4	sp -> compression_level = 9
ASSIGN	404:8	404:32	5	sp -> compression_level = 9
LVAL	404:8	404:8	6	sp -> compression_level
FIELD	404:8	404:12	7	sp -> compression_level
LEAF_NODE	404:8	404:8	8	sp
LEAF_NODE	404:10	404:10	8	->
LEAF_NODE	404:12	404:12	8	compression_level
ASSIGN_OP	404:30	404:30	6	=
LEAF_NODE	404:30	404:30	7	=
RVAL	404:32	404:32	6	9
FIELD	404:32	404:32	7	9
LEAF_NODE	404:32	404:32	8	9
LEAF_NODE	404:33	404:33	4	;
EXPR_STATEMENT	405:8	405:21	3	sp -> state = 0 ;
EXPR	405:8	405:8	4	sp -> state = 0
ASSIGN	405:8	405:20	5	sp -> state = 0
LVAL	405:8	405:8	6	sp -> state
FIELD	405:8	405:12	7	sp -> state
LEAF_NODE	405:8	405:8	8	sp
LEAF_NODE	405:10	405:10	8	->
LEAF_NODE	405:12	405:12	8	state
ASSIGN_OP	405:18	405:18	6	=
LEAF_NODE	405:18	405:18	7	=
RVAL	405:20	405:20	6	0
FIELD	405:20	405:20	7	0
LEAF_NODE	405:20	405:20	8	0
LEAF_NODE	405:21	405:21	4	;
EXPR_STATEMENT	406:8	406:23	3	sp -> dstream = 0 ;
EXPR	406:8	406:8	4	sp -> dstream = 0
ASSIGN	406:8	406:22	5	sp -> dstream = 0
LVAL	406:8	406:8	6	sp -> dstream
FIELD	406:8	406:12	7	sp -> dstream
LEAF_NODE	406:8	406:8	8	sp
LEAF_NODE	406:10	406:10	8	->
LEAF_NODE	406:12	406:12	8	dstream
ASSIGN_OP	406:20	406:20	6	=
LEAF_NODE	406:20	406:20	7	=
RVAL	406:22	406:22	6	0
FIELD	406:22	406:22	7	0
LEAF_NODE	406:22	406:22	8	0
LEAF_NODE	406:23	406:23	4	;
EXPR_STATEMENT	407:8	407:23	3	sp -> cstream = 0 ;
EXPR	407:8	407:8	4	sp -> cstream = 0
ASSIGN	407:8	407:22	5	sp -> cstream = 0
LVAL	407:8	407:8	6	sp -> cstream
FIELD	407:8	407:12	7	sp -> cstream
LEAF_NODE	407:8	407:8	8	sp
LEAF_NODE	407:10	407:10	8	->
LEAF_NODE	407:12	407:12	8	cstream
ASSIGN_OP	407:20	407:20	6	=
LEAF_NODE	407:20	407:20	7	=
RVAL	407:22	407:22	6	0
FIELD	407:22	407:22	7	0
LEAF_NODE	407:22	407:22	8	0
LEAF_NODE	407:23	407:23	4	;
EXPR_STATEMENT	408:8	408:33	3	sp -> out_buffer . dst = NULL ;
EXPR	408:8	408:8	4	sp -> out_buffer . dst = NULL
ASSIGN	408:8	408:29	5	sp -> out_buffer . dst = NULL
LVAL	408:8	408:8	6	sp -> out_buffer . dst
FIELD	408:8	408:23	7	sp -> out_buffer . dst
LEAF_NODE	408:8	408:8	8	sp
LEAF_NODE	408:10	408:10	8	->
LEAF_NODE	408:12	408:12	8	out_buffer
LEAF_NODE	408:22	408:22	8	.
LEAF_NODE	408:23	408:23	8	dst
ASSIGN_OP	408:27	408:27	6	=
LEAF_NODE	408:27	408:27	7	=
RVAL	408:29	408:29	6	NULL
FIELD	408:29	408:29	7	NULL
LEAF_NODE	408:29	408:29	8	NULL
LEAF_NODE	408:33	408:33	4	;
EXPR_STATEMENT	409:8	409:31	3	sp -> out_buffer . size = 0 ;
EXPR	409:8	409:8	4	sp -> out_buffer . size = 0
ASSIGN	409:8	409:30	5	sp -> out_buffer . size = 0
LVAL	409:8	409:8	6	sp -> out_buffer . size
FIELD	409:8	409:23	7	sp -> out_buffer . size
LEAF_NODE	409:8	409:8	8	sp
LEAF_NODE	409:10	409:10	8	->
LEAF_NODE	409:12	409:12	8	out_buffer
LEAF_NODE	409:22	409:22	8	.
LEAF_NODE	409:23	409:23	8	size
ASSIGN_OP	409:28	409:28	6	=
LEAF_NODE	409:28	409:28	7	=
RVAL	409:30	409:30	6	0
FIELD	409:30	409:30	7	0
LEAF_NODE	409:30	409:30	8	0
LEAF_NODE	409:31	409:31	4	;
EXPR_STATEMENT	410:8	410:30	3	sp -> out_buffer . pos = 0 ;
EXPR	410:8	410:8	4	sp -> out_buffer . pos = 0
ASSIGN	410:8	410:29	5	sp -> out_buffer . pos = 0
LVAL	410:8	410:8	6	sp -> out_buffer . pos
FIELD	410:8	410:23	7	sp -> out_buffer . pos
LEAF_NODE	410:8	410:8	8	sp
LEAF_NODE	410:10	410:10	8	->
LEAF_NODE	410:12	410:12	8	out_buffer
LEAF_NODE	410:22	410:22	8	.
LEAF_NODE	410:23	410:23	8	pos
ASSIGN_OP	410:27	410:27	6	=
LEAF_NODE	410:27	410:27	7	=
RVAL	410:29	410:29	6	0
FIELD	410:29	410:29	7	0
LEAF_NODE	410:29	410:29	8	0
LEAF_NODE	410:30	410:30	4	;
EXPR_STATEMENT	415:8	415:42	3	tif -> tif_fixuptags = ZSTDFixupTags ;
EXPR	415:8	415:8	4	tif -> tif_fixuptags = ZSTDFixupTags
ASSIGN	415:8	415:29	5	tif -> tif_fixuptags = ZSTDFixupTags
LVAL	415:8	415:8	6	tif -> tif_fixuptags
FIELD	415:8	415:13	7	tif -> tif_fixuptags
LEAF_NODE	415:8	415:8	8	tif
LEAF_NODE	415:11	415:11	8	->
LEAF_NODE	415:13	415:13	8	tif_fixuptags
ASSIGN_OP	415:27	415:27	6	=
LEAF_NODE	415:27	415:27	7	=
RVAL	415:29	415:29	6	ZSTDFixupTags
FIELD	415:29	415:29	7	ZSTDFixupTags
LEAF_NODE	415:29	415:29	8	ZSTDFixupTags
LEAF_NODE	415:42	415:42	4	;
EXPR_STATEMENT	416:8	416:46	3	tif -> tif_setupdecode = ZSTDSetupDecode ;
EXPR	416:8	416:8	4	tif -> tif_setupdecode = ZSTDSetupDecode
ASSIGN	416:8	416:31	5	tif -> tif_setupdecode = ZSTDSetupDecode
LVAL	416:8	416:8	6	tif -> tif_setupdecode
FIELD	416:8	416:13	7	tif -> tif_setupdecode
LEAF_NODE	416:8	416:8	8	tif
LEAF_NODE	416:11	416:11	8	->
LEAF_NODE	416:13	416:13	8	tif_setupdecode
ASSIGN_OP	416:29	416:29	6	=
LEAF_NODE	416:29	416:29	7	=
RVAL	416:31	416:31	6	ZSTDSetupDecode
FIELD	416:31	416:31	7	ZSTDSetupDecode
LEAF_NODE	416:31	416:31	8	ZSTDSetupDecode
LEAF_NODE	416:46	416:46	4	;
EXPR_STATEMENT	417:8	417:42	3	tif -> tif_predecode = ZSTDPreDecode ;
EXPR	417:8	417:8	4	tif -> tif_predecode = ZSTDPreDecode
ASSIGN	417:8	417:29	5	tif -> tif_predecode = ZSTDPreDecode
LVAL	417:8	417:8	6	tif -> tif_predecode
FIELD	417:8	417:13	7	tif -> tif_predecode
LEAF_NODE	417:8	417:8	8	tif
LEAF_NODE	417:11	417:11	8	->
LEAF_NODE	417:13	417:13	8	tif_predecode
ASSIGN_OP	417:27	417:27	6	=
LEAF_NODE	417:27	417:27	7	=
RVAL	417:29	417:29	6	ZSTDPreDecode
FIELD	417:29	417:29	7	ZSTDPreDecode
LEAF_NODE	417:29	417:29	8	ZSTDPreDecode
LEAF_NODE	417:42	417:42	4	;
EXPR_STATEMENT	418:8	418:39	3	tif -> tif_decoderow = ZSTDDecode ;
EXPR	418:8	418:8	4	tif -> tif_decoderow = ZSTDDecode
ASSIGN	418:8	418:29	5	tif -> tif_decoderow = ZSTDDecode
LVAL	418:8	418:8	6	tif -> tif_decoderow
FIELD	418:8	418:13	7	tif -> tif_decoderow
LEAF_NODE	418:8	418:8	8	tif
LEAF_NODE	418:11	418:11	8	->
LEAF_NODE	418:13	418:13	8	tif_decoderow
ASSIGN_OP	418:27	418:27	6	=
LEAF_NODE	418:27	418:27	7	=
RVAL	418:29	418:29	6	ZSTDDecode
FIELD	418:29	418:29	7	ZSTDDecode
LEAF_NODE	418:29	418:29	8	ZSTDDecode
LEAF_NODE	418:39	418:39	4	;
EXPR_STATEMENT	419:8	419:41	3	tif -> tif_decodestrip = ZSTDDecode ;
EXPR	419:8	419:8	4	tif -> tif_decodestrip = ZSTDDecode
ASSIGN	419:8	419:31	5	tif -> tif_decodestrip = ZSTDDecode
LVAL	419:8	419:8	6	tif -> tif_decodestrip
FIELD	419:8	419:13	7	tif -> tif_decodestrip
LEAF_NODE	419:8	419:8	8	tif
LEAF_NODE	419:11	419:11	8	->
LEAF_NODE	419:13	419:13	8	tif_decodestrip
ASSIGN_OP	419:29	419:29	6	=
LEAF_NODE	419:29	419:29	7	=
RVAL	419:31	419:31	6	ZSTDDecode
FIELD	419:31	419:31	7	ZSTDDecode
LEAF_NODE	419:31	419:31	8	ZSTDDecode
LEAF_NODE	419:41	419:41	4	;
EXPR_STATEMENT	420:8	420:40	3	tif -> tif_decodetile = ZSTDDecode ;
EXPR	420:8	420:8	4	tif -> tif_decodetile = ZSTDDecode
ASSIGN	420:8	420:30	5	tif -> tif_decodetile = ZSTDDecode
LVAL	420:8	420:8	6	tif -> tif_decodetile
FIELD	420:8	420:13	7	tif -> tif_decodetile
LEAF_NODE	420:8	420:8	8	tif
LEAF_NODE	420:11	420:11	8	->
LEAF_NODE	420:13	420:13	8	tif_decodetile
ASSIGN_OP	420:28	420:28	6	=
LEAF_NODE	420:28	420:28	7	=
RVAL	420:30	420:30	6	ZSTDDecode
FIELD	420:30	420:30	7	ZSTDDecode
LEAF_NODE	420:30	420:30	8	ZSTDDecode
LEAF_NODE	420:40	420:40	4	;
EXPR_STATEMENT	421:8	421:46	3	tif -> tif_setupencode = ZSTDSetupEncode ;
EXPR	421:8	421:8	4	tif -> tif_setupencode = ZSTDSetupEncode
ASSIGN	421:8	421:31	5	tif -> tif_setupencode = ZSTDSetupEncode
LVAL	421:8	421:8	6	tif -> tif_setupencode
FIELD	421:8	421:13	7	tif -> tif_setupencode
LEAF_NODE	421:8	421:8	8	tif
LEAF_NODE	421:11	421:11	8	->
LEAF_NODE	421:13	421:13	8	tif_setupencode
ASSIGN_OP	421:29	421:29	6	=
LEAF_NODE	421:29	421:29	7	=
RVAL	421:31	421:31	6	ZSTDSetupEncode
FIELD	421:31	421:31	7	ZSTDSetupEncode
LEAF_NODE	421:31	421:31	8	ZSTDSetupEncode
LEAF_NODE	421:46	421:46	4	;
EXPR_STATEMENT	422:8	422:42	3	tif -> tif_preencode = ZSTDPreEncode ;
EXPR	422:8	422:8	4	tif -> tif_preencode = ZSTDPreEncode
ASSIGN	422:8	422:29	5	tif -> tif_preencode = ZSTDPreEncode
LVAL	422:8	422:8	6	tif -> tif_preencode
FIELD	422:8	422:13	7	tif -> tif_preencode
LEAF_NODE	422:8	422:8	8	tif
LEAF_NODE	422:11	422:11	8	->
LEAF_NODE	422:13	422:13	8	tif_preencode
ASSIGN_OP	422:27	422:27	6	=
LEAF_NODE	422:27	422:27	7	=
RVAL	422:29	422:29	6	ZSTDPreEncode
FIELD	422:29	422:29	7	ZSTDPreEncode
LEAF_NODE	422:29	422:29	8	ZSTDPreEncode
LEAF_NODE	422:42	422:42	4	;
EXPR_STATEMENT	423:8	423:44	3	tif -> tif_postencode = ZSTDPostEncode ;
EXPR	423:8	423:8	4	tif -> tif_postencode = ZSTDPostEncode
ASSIGN	423:8	423:30	5	tif -> tif_postencode = ZSTDPostEncode
LVAL	423:8	423:8	6	tif -> tif_postencode
FIELD	423:8	423:13	7	tif -> tif_postencode
LEAF_NODE	423:8	423:8	8	tif
LEAF_NODE	423:11	423:11	8	->
LEAF_NODE	423:13	423:13	8	tif_postencode
ASSIGN_OP	423:28	423:28	6	=
LEAF_NODE	423:28	423:28	7	=
RVAL	423:30	423:30	6	ZSTDPostEncode
FIELD	423:30	423:30	7	ZSTDPostEncode
LEAF_NODE	423:30	423:30	8	ZSTDPostEncode
LEAF_NODE	423:44	423:44	4	;
EXPR_STATEMENT	424:8	424:39	3	tif -> tif_encoderow = ZSTDEncode ;
EXPR	424:8	424:8	4	tif -> tif_encoderow = ZSTDEncode
ASSIGN	424:8	424:29	5	tif -> tif_encoderow = ZSTDEncode
LVAL	424:8	424:8	6	tif -> tif_encoderow
FIELD	424:8	424:13	7	tif -> tif_encoderow
LEAF_NODE	424:8	424:8	8	tif
LEAF_NODE	424:11	424:11	8	->
LEAF_NODE	424:13	424:13	8	tif_encoderow
ASSIGN_OP	424:27	424:27	6	=
LEAF_NODE	424:27	424:27	7	=
RVAL	424:29	424:29	6	ZSTDEncode
FIELD	424:29	424:29	7	ZSTDEncode
LEAF_NODE	424:29	424:29	8	ZSTDEncode
LEAF_NODE	424:39	424:39	4	;
EXPR_STATEMENT	425:8	425:41	3	tif -> tif_encodestrip = ZSTDEncode ;
EXPR	425:8	425:8	4	tif -> tif_encodestrip = ZSTDEncode
ASSIGN	425:8	425:31	5	tif -> tif_encodestrip = ZSTDEncode
LVAL	425:8	425:8	6	tif -> tif_encodestrip
FIELD	425:8	425:13	7	tif -> tif_encodestrip
LEAF_NODE	425:8	425:8	8	tif
LEAF_NODE	425:11	425:11	8	->
LEAF_NODE	425:13	425:13	8	tif_encodestrip
ASSIGN_OP	425:29	425:29	6	=
LEAF_NODE	425:29	425:29	7	=
RVAL	425:31	425:31	6	ZSTDEncode
FIELD	425:31	425:31	7	ZSTDEncode
LEAF_NODE	425:31	425:31	8	ZSTDEncode
LEAF_NODE	425:41	425:41	4	;
EXPR_STATEMENT	426:8	426:40	3	tif -> tif_encodetile = ZSTDEncode ;
EXPR	426:8	426:8	4	tif -> tif_encodetile = ZSTDEncode
ASSIGN	426:8	426:30	5	tif -> tif_encodetile = ZSTDEncode
LVAL	426:8	426:8	6	tif -> tif_encodetile
FIELD	426:8	426:13	7	tif -> tif_encodetile
LEAF_NODE	426:8	426:8	8	tif
LEAF_NODE	426:11	426:11	8	->
LEAF_NODE	426:13	426:13	8	tif_encodetile
ASSIGN_OP	426:28	426:28	6	=
LEAF_NODE	426:28	426:28	7	=
RVAL	426:30	426:30	6	ZSTDEncode
FIELD	426:30	426:30	7	ZSTDEncode
LEAF_NODE	426:30	426:30	8	ZSTDEncode
LEAF_NODE	426:40	426:40	4	;
EXPR_STATEMENT	427:8	427:38	3	tif -> tif_cleanup = ZSTDCleanup ;
EXPR	427:8	427:8	4	tif -> tif_cleanup = ZSTDCleanup
ASSIGN	427:8	427:27	5	tif -> tif_cleanup = ZSTDCleanup
LVAL	427:8	427:8	6	tif -> tif_cleanup
FIELD	427:8	427:13	7	tif -> tif_cleanup
LEAF_NODE	427:8	427:8	8	tif
LEAF_NODE	427:11	427:11	8	->
LEAF_NODE	427:13	427:13	8	tif_cleanup
ASSIGN_OP	427:25	427:25	6	=
LEAF_NODE	427:25	427:25	7	=
RVAL	427:27	427:27	6	ZSTDCleanup
FIELD	427:27	427:27	7	ZSTDCleanup
LEAF_NODE	427:27	427:27	8	ZSTDCleanup
LEAF_NODE	427:38	427:38	4	;
EXPR_STATEMENT	431:8	431:37	3	( void ) TIFFPredictorInit ( tif ) ;
EXPR	431:8	431:15	4	( void ) TIFFPredictorInit ( tif )
LEAF_NODE	431:8	431:8	5	(
TYPE_NAME	431:9	431:9	5	void
LEAF_NODE	431:9	431:9	6	void
LEAF_NODE	431:13	431:13	5	)
FUNCTION_CALL	431:15	431:36	5	TIFFPredictorInit ( tif )
CALLEE	431:15	431:15	6	TIFFPredictorInit
LEAF_NODE	431:15	431:15	7	TIFFPredictorInit
LEAF_NODE	431:32	431:32	6	(
ARGUMENT	431:33	431:33	6	tif
FIELD	431:33	431:33	7	tif
LEAF_NODE	431:33	431:33	8	tif
LEAF_NODE	431:36	431:36	6	)
LEAF_NODE	431:37	431:37	4	;
JUMP_STATEMENT	432:8	432:16	3	return 1 ;
KEYWORD	432:8	432:8	4	return
LEAF_NODE	432:8	432:8	5	return
DESTINATION	432:15	432:15	4	1
EXPR	432:15	432:15	5	1
FIELD	432:15	432:15	6	1
LEAF_NODE	432:15	432:15	7	1
LEAF_NODE	432:16	432:16	4	;
LABEL	433:0	433:3	3	bad :
LEAF_NODE	433:0	433:0	4	bad
LEAF_NODE	433:3	433:3	4	:
EXPR_STATEMENT	434:8	435:52	3	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for ZSTD state block" ) ;
EXPR	434:8	434:8	4	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for ZSTD state block" )
FUNCTION_CALL	434:8	435:51	5	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for ZSTD state block" )
CALLEE	434:8	434:8	6	TIFFErrorExt
LEAF_NODE	434:8	434:8	7	TIFFErrorExt
LEAF_NODE	434:20	434:20	6	(
ARGUMENT	434:21	434:21	6	tif -> tif_clientdata
FIELD	434:21	434:26	7	tif -> tif_clientdata
LEAF_NODE	434:21	434:21	8	tif
LEAF_NODE	434:24	434:24	8	->
LEAF_NODE	434:26	434:26	8	tif_clientdata
LEAF_NODE	434:40	434:40	6	,
ARGUMENT	434:42	434:42	6	module
FIELD	434:42	434:42	7	module
LEAF_NODE	434:42	434:42	8	module
LEAF_NODE	434:48	434:48	6	,
ARGUMENT	435:20	435:20	6	"No space for ZSTD state block"
FIELD	435:20	435:20	7	"No space for ZSTD state block"
LEAF_NODE	435:20	435:20	8	"No space for ZSTD state block"
LEAF_NODE	435:51	435:51	6	)
LEAF_NODE	435:52	435:52	4	;
JUMP_STATEMENT	436:8	436:16	3	return 0 ;
KEYWORD	436:8	436:8	4	return
LEAF_NODE	436:8	436:8	5	return
DESTINATION	436:15	436:15	4	0
EXPR	436:15	436:15	5	0
FIELD	436:15	436:15	6	0
LEAF_NODE	436:15	436:15	7	0
LEAF_NODE	436:16	436:16	4	;
LEAF_NODE	437:0	437:0	2	}
