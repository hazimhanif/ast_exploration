SOURCE_FILE	145:1	888:0	0	
SIMPLE_DECL	145:1	145:16	1	uint16 dircount ;
VAR_DECL	145:1	145:8	2	uint16 dircount
TYPE	145:1	145:1	3	uint16
TYPE_NAME	145:1	145:1	4	uint16
LEAF_NODE	145:1	145:1	5	uint16
NAME	145:8	145:8	3	dircount
LEAF_NODE	145:8	145:8	4	dircount
LEAF_NODE	145:16	145:16	2	;
SIMPLE_DECL	146:1	146:26	1	uint32 diroff , uint32 nextdiroff ;
INIT_DECL_LIST	146:1	146:1	2	uint32 diroff , uint32 nextdiroff
VAR_DECL	146:1	146:8	3	uint32 diroff
TYPE	146:1	146:1	4	uint32
TYPE_NAME	146:1	146:1	5	uint32
LEAF_NODE	146:1	146:1	6	uint32
NAME	146:8	146:8	4	diroff
LEAF_NODE	146:8	146:8	5	diroff
LEAF_NODE	146:14	146:14	3	,
VAR_DECL	146:1	146:16	3	uint32 nextdiroff
TYPE	146:1	146:1	4	uint32
TYPE_NAME	146:1	146:1	5	uint32
LEAF_NODE	146:1	146:1	6	uint32
NAME	146:16	146:16	4	nextdiroff
LEAF_NODE	146:16	146:16	5	nextdiroff
LEAF_NODE	146:26	146:26	2	;
SIMPLE_DECL	147:1	147:11	1	ttag_t tag ;
VAR_DECL	147:1	147:8	2	ttag_t tag
TYPE	147:1	147:1	3	ttag_t
TYPE_NAME	147:1	147:1	4	ttag_t
LEAF_NODE	147:1	147:1	5	ttag_t
NAME	147:8	147:8	3	tag
LEAF_NODE	147:8	147:8	4	tag
LEAF_NODE	147:11	147:11	2	;
SIMPLE_DECL	148:1	148:15	1	uint32 nfields ;
VAR_DECL	148:1	148:8	2	uint32 nfields
TYPE	148:1	148:1	3	uint32
TYPE_NAME	148:1	148:1	4	uint32
LEAF_NODE	148:1	148:1	5	uint32
NAME	148:8	148:8	3	nfields
LEAF_NODE	148:8	148:8	4	nfields
LEAF_NODE	148:15	148:15	2	;
SIMPLE_DECL	149:1	149:16	1	tsize_t dirsize ;
VAR_DECL	149:1	149:9	2	tsize_t dirsize
TYPE	149:1	149:1	3	tsize_t
TYPE_NAME	149:1	149:1	4	tsize_t
LEAF_NODE	149:1	149:1	5	tsize_t
NAME	149:9	149:9	3	dirsize
LEAF_NODE	149:9	149:9	4	dirsize
LEAF_NODE	149:16	149:16	2	;
SIMPLE_DECL	150:1	150:11	1	char * data ;
VAR_DECL	150:1	150:7	2	char * data
TYPE	150:1	150:5	3	char *
TYPE_NAME	150:1	150:1	4	char
LEAF_NODE	150:1	150:1	5	char
POINTER	150:5	150:5	4	*
LEAF_NODE	150:5	150:5	5	*
NAME	150:7	150:7	3	data
LEAF_NODE	150:7	150:7	4	data
LEAF_NODE	150:11	150:11	2	;
SIMPLE_DECL	151:1	151:18	1	TIFFDirEntry * dir ;
VAR_DECL	151:1	151:15	2	TIFFDirEntry * dir
TYPE	151:1	151:13	3	TIFFDirEntry *
TYPE_NAME	151:1	151:1	4	TIFFDirEntry
LEAF_NODE	151:1	151:1	5	TIFFDirEntry
POINTER	151:13	151:13	4	*
LEAF_NODE	151:13	151:13	5	*
NAME	151:15	151:15	3	dir
LEAF_NODE	151:15	151:15	4	dir
LEAF_NODE	151:18	151:18	2	;
SIMPLE_DECL	152:1	152:31	1	u_long b , u_long * fields , u_long fields_size ;
INIT_DECL_LIST	152:1	152:1	2	u_long b , u_long * fields , u_long fields_size
VAR_DECL	152:1	152:8	3	u_long b
TYPE	152:1	152:1	4	u_long
TYPE_NAME	152:1	152:1	5	u_long
LEAF_NODE	152:1	152:1	6	u_long
NAME	152:8	152:8	4	b
LEAF_NODE	152:8	152:8	5	b
LEAF_NODE	152:9	152:9	3	,
INIT_DECL_LIST	152:1	152:1	3	u_long * fields , u_long fields_size
VAR_DECL	152:1	152:12	4	u_long * fields
TYPE	152:1	152:11	5	u_long *
TYPE_NAME	152:1	152:1	6	u_long
LEAF_NODE	152:1	152:1	7	u_long
POINTER	152:11	152:11	6	*
LEAF_NODE	152:11	152:11	7	*
NAME	152:12	152:12	5	fields
LEAF_NODE	152:12	152:12	6	fields
LEAF_NODE	152:18	152:18	4	,
VAR_DECL	152:1	152:20	4	u_long fields_size
TYPE	152:1	152:1	5	u_long
TYPE_NAME	152:1	152:1	6	u_long
LEAF_NODE	152:1	152:1	7	u_long
NAME	152:20	152:20	5	fields_size
LEAF_NODE	152:20	152:20	6	fields_size
LEAF_NODE	152:31	152:31	2	;
SIMPLE_DECL	153:1	153:24	1	toff_t directory_offset ;
VAR_DECL	153:1	153:8	2	toff_t directory_offset
TYPE	153:1	153:1	3	toff_t
TYPE_NAME	153:1	153:1	4	toff_t
LEAF_NODE	153:1	153:1	5	toff_t
NAME	153:8	153:8	3	directory_offset
LEAF_NODE	153:8	153:8	4	directory_offset
LEAF_NODE	153:24	153:24	2	;
SIMPLE_DECL	154:1	154:19	1	TIFFFieldInfo * fip ;
VAR_DECL	154:1	154:16	2	TIFFFieldInfo * fip
TYPE	154:1	154:14	3	TIFFFieldInfo *
TYPE_NAME	154:1	154:1	4	TIFFFieldInfo
LEAF_NODE	154:1	154:1	5	TIFFFieldInfo
POINTER	154:14	154:14	4	*
LEAF_NODE	154:14	154:14	5	*
NAME	154:16	154:16	3	fip
LEAF_NODE	154:16	154:16	4	fip
LEAF_NODE	154:19	154:19	2	;
SIMPLE_DECL	175:11	175:42	1	nfields * sizeof ; sizeof sizeof ( TIFFDirEntry ) ;
VAR_DECL	175:11	175:21	2	nfields * sizeof ; sizeof sizeof ( TIFFDirEntry )
TYPE	175:11	175:19	3	nfields *
TYPE_NAME	175:11	175:11	4	nfields
LEAF_NODE	175:11	175:11	5	nfields
POINTER	175:19	175:19	4	*
LEAF_NODE	175:19	175:19	5	*
NAME	175:21	175:21	3	sizeof
LEAF_NODE	175:21	175:21	4	sizeof
LEAF_NODE	0:0	0:0	3	;
INIT	175:21	175:21	3	sizeof sizeof ( TIFFDirEntry )
ASSIGN	175:21	175:28	4	sizeof sizeof ( TIFFDirEntry )
LVAL	175:21	175:21	5	sizeof
NAME	175:21	175:21	6	sizeof
LEAF_NODE	175:21	175:21	7	sizeof
ASSIGN_OP	175:21	175:21	5	sizeof
NAME	175:21	175:21	6	sizeof
LEAF_NODE	175:21	175:21	7	sizeof
RVAL	175:28	175:41	5	( TIFFDirEntry )
LEAF_NODE	175:28	175:28	6	(
EXPR	175:29	175:29	6	TIFFDirEntry
FIELD	175:29	175:29	7	TIFFDirEntry
LEAF_NODE	175:29	175:29	8	TIFFDirEntry
LEAF_NODE	175:41	175:41	6	)
LEAF_NODE	175:42	175:42	2	;
SIMPLE_DECL	321:1	321:45	1	u_short wc ; wc = ( u_short ) fip -> field_writecount ;
VAR_DECL	321:1	321:9	2	u_short wc ; wc = ( u_short ) fip -> field_writecount
TYPE	321:1	321:1	3	u_short
TYPE_NAME	321:1	321:1	4	u_short
LEAF_NODE	321:1	321:1	5	u_short
NAME	321:9	321:9	3	wc
LEAF_NODE	321:9	321:9	4	wc
LEAF_NODE	0:0	0:0	3	;
INIT	321:9	321:9	3	wc = ( u_short ) fip -> field_writecount
ASSIGN	321:9	321:14	4	wc = ( u_short ) fip -> field_writecount
LVAL	321:9	321:9	5	wc
NAME	321:9	321:9	6	wc
LEAF_NODE	321:9	321:9	7	wc
ASSIGN_OP	321:12	321:12	5	=
LEAF_NODE	321:12	321:12	6	=
RVAL	321:14	321:24	5	( u_short ) fip -> field_writecount
LEAF_NODE	321:14	321:14	6	(
TYPE_NAME	321:15	321:15	6	u_short
LEAF_NODE	321:15	321:15	7	u_short
LEAF_NODE	321:22	321:22	6	)
FIELD	321:24	321:29	6	fip -> field_writecount
LEAF_NODE	321:24	321:24	7	fip
LEAF_NODE	321:27	321:27	7	->
LEAF_NODE	321:29	321:29	7	field_writecount
LEAF_NODE	321:45	321:45	2	;
SIMPLE_DECL	331:3	331:13	1	uint16 * wp ;
VAR_DECL	331:3	331:11	2	uint16 * wp
TYPE	331:3	331:9	3	uint16 *
TYPE_NAME	331:3	331:3	4	uint16
LEAF_NODE	331:3	331:3	5	uint16
POINTER	331:9	331:9	4	*
LEAF_NODE	331:9	331:9	5	*
NAME	331:11	331:11	3	wp
LEAF_NODE	331:11	331:11	4	wp
LEAF_NODE	331:13	331:13	2	;
SIMPLE_DECL	340:3	340:12	1	uint16 sv ;
VAR_DECL	340:3	340:10	2	uint16 sv
TYPE	340:3	340:3	3	uint16
TYPE_NAME	340:3	340:3	4	uint16
LEAF_NODE	340:3	340:3	5	uint16
NAME	340:10	340:10	3	sv
LEAF_NODE	340:10	340:10	4	sv
LEAF_NODE	340:12	340:12	2	;
SIMPLE_DECL	349:3	349:13	1	uint32 * lp ;
VAR_DECL	349:3	349:11	2	uint32 * lp
TYPE	349:3	349:9	3	uint32 *
TYPE_NAME	349:3	349:3	4	uint32
LEAF_NODE	349:3	349:3	5	uint32
POINTER	349:9	349:9	4	*
LEAF_NODE	349:9	349:9	5	*
NAME	349:11	349:11	3	lp
LEAF_NODE	349:11	349:11	4	lp
LEAF_NODE	349:13	349:13	2	;
SIMPLE_DECL	365:3	365:12	1	float * fp ;
VAR_DECL	365:3	365:10	2	float * fp
TYPE	365:3	365:8	3	float *
TYPE_NAME	365:3	365:3	4	float
LEAF_NODE	365:3	365:3	5	float
POINTER	365:8	365:8	4	*
LEAF_NODE	365:8	365:8	5	*
NAME	365:10	365:10	3	fp
LEAF_NODE	365:10	365:10	4	fp
LEAF_NODE	365:12	365:12	2	;
SIMPLE_DECL	374:3	374:11	1	float fv ;
VAR_DECL	374:3	374:9	2	float fv
TYPE	374:3	374:3	3	float
TYPE_NAME	374:3	374:3	4	float
LEAF_NODE	374:3	374:3	5	float
NAME	374:9	374:9	3	fv
LEAF_NODE	374:9	374:9	4	fv
LEAF_NODE	374:11	374:11	2	;
SIMPLE_DECL	382:3	382:12	1	float * fp ;
VAR_DECL	382:3	382:10	2	float * fp
TYPE	382:3	382:8	3	float *
TYPE_NAME	382:3	382:3	4	float
LEAF_NODE	382:3	382:3	5	float
POINTER	382:8	382:8	4	*
LEAF_NODE	382:8	382:8	5	*
NAME	382:10	382:10	3	fp
LEAF_NODE	382:10	382:10	4	fp
LEAF_NODE	382:12	382:12	2	;
SIMPLE_DECL	391:3	391:11	1	float fv ;
VAR_DECL	391:3	391:9	2	float fv
TYPE	391:3	391:3	3	float
TYPE_NAME	391:3	391:3	4	float
LEAF_NODE	391:3	391:3	5	float
NAME	391:9	391:9	3	fv
LEAF_NODE	391:9	391:9	4	fv
LEAF_NODE	391:11	391:11	2	;
SIMPLE_DECL	417:4	417:14	1	double * dp ;
VAR_DECL	417:4	417:12	2	double * dp
TYPE	417:4	417:10	3	double *
TYPE_NAME	417:4	417:4	4	double
LEAF_NODE	417:4	417:4	5	double
POINTER	417:10	417:10	4	*
LEAF_NODE	417:10	417:10	5	*
NAME	417:12	417:12	3	dp
LEAF_NODE	417:12	417:12	4	dp
LEAF_NODE	417:14	417:14	2	;
SIMPLE_DECL	429:3	429:13	1	double * dp ;
VAR_DECL	429:3	429:11	2	double * dp
TYPE	429:3	429:9	3	double *
TYPE_NAME	429:3	429:3	4	double
LEAF_NODE	429:3	429:3	5	double
POINTER	429:9	429:9	4	*
LEAF_NODE	429:9	429:9	5	*
NAME	429:11	429:11	3	dp
LEAF_NODE	429:11	429:11	4	dp
LEAF_NODE	429:13	429:13	2	;
SIMPLE_DECL	438:3	438:12	1	double dv ;
VAR_DECL	438:3	438:10	2	double dv
TYPE	438:3	438:3	3	double
TYPE_NAME	438:3	438:3	4	double
LEAF_NODE	438:3	438:3	5	double
NAME	438:10	438:10	3	dv
LEAF_NODE	438:10	438:10	4	dv
LEAF_NODE	438:12	438:12	2	;
SIMPLE_DECL	446:4	446:12	1	char * cp ;
VAR_DECL	446:4	446:10	2	char * cp
TYPE	446:4	446:8	3	char *
TYPE_NAME	446:4	446:4	4	char
LEAF_NODE	446:4	446:4	5	char
POINTER	446:8	446:8	4	*
LEAF_NODE	446:8	446:8	5	*
NAME	446:10	446:10	3	cp
LEAF_NODE	446:10	446:10	4	cp
LEAF_NODE	446:12	446:12	2	;
SIMPLE_DECL	454:4	454:12	1	char * cp ;
VAR_DECL	454:4	454:10	2	char * cp
TYPE	454:4	454:8	3	char *
TYPE_NAME	454:4	454:4	4	char
LEAF_NODE	454:4	454:4	5	char
POINTER	454:8	454:8	4	*
LEAF_NODE	454:8	454:8	5	*
NAME	454:10	454:10	3	cp
LEAF_NODE	454:10	454:10	4	cp
LEAF_NODE	454:12	454:12	2	;
FUNCTION_DEF	477:0	489:0	1	
RETURN_TYPE	477:0	477:7	2	static void
LEAF_NODE	477:0	477:0	3	static
TYPE_NAME	477:7	477:7	3	void
LEAF_NODE	477:7	477:7	4	void
FUNCTION_NAME	478:0	478:0	2	TIFFSetupShortLong
LEAF_NODE	478:0	478:0	3	TIFFSetupShortLong
PARAMETER_LIST	478:18	478:69	2	( TIFF * tif , ttag_t tag , TIFFDirEntry * dir , uint32 v )
LEAF_NODE	478:18	478:18	3	(
PARAMETER_DECL	478:19	478:25	3	TIFF * tif
TYPE	478:19	478:23	4	TIFF *
TYPE_NAME	478:19	478:19	5	TIFF
LEAF_NODE	478:19	478:19	6	TIFF
POINTER	478:23	478:23	5	*
LEAF_NODE	478:23	478:23	6	*
NAME	478:25	478:25	4	tif
LEAF_NODE	478:25	478:25	5	tif
LEAF_NODE	478:28	478:28	3	,
PARAMETER_DECL	478:30	478:37	3	ttag_t tag
TYPE	478:30	478:30	4	ttag_t
TYPE_NAME	478:30	478:30	5	ttag_t
LEAF_NODE	478:30	478:30	6	ttag_t
NAME	478:37	478:37	4	tag
LEAF_NODE	478:37	478:37	5	tag
LEAF_NODE	478:40	478:40	3	,
PARAMETER_DECL	478:42	478:56	3	TIFFDirEntry * dir
TYPE	478:42	478:54	4	TIFFDirEntry *
TYPE_NAME	478:42	478:42	5	TIFFDirEntry
LEAF_NODE	478:42	478:42	6	TIFFDirEntry
POINTER	478:54	478:54	5	*
LEAF_NODE	478:54	478:54	6	*
NAME	478:56	478:56	4	dir
LEAF_NODE	478:56	478:56	5	dir
LEAF_NODE	478:59	478:59	3	,
PARAMETER_DECL	478:61	478:68	3	uint32 v
TYPE	478:61	478:61	4	uint32
TYPE_NAME	478:61	478:61	5	uint32
LEAF_NODE	478:61	478:61	6	uint32
NAME	478:68	478:68	4	v
LEAF_NODE	478:68	478:68	5	v
LEAF_NODE	478:69	478:69	3	)
LEAF_NODE	479:0	479:0	2	{
STATEMENTS	480:1	485:3	2	
EXPR_STATEMENT	480:1	480:20	3	dir -> tdir_tag = tag ;
EXPR	480:1	480:1	4	dir -> tdir_tag = tag
ASSIGN	480:1	480:17	5	dir -> tdir_tag = tag
LVAL	480:1	480:1	6	dir -> tdir_tag
FIELD	480:1	480:6	7	dir -> tdir_tag
LEAF_NODE	480:1	480:1	8	dir
LEAF_NODE	480:4	480:4	8	->
LEAF_NODE	480:6	480:6	8	tdir_tag
ASSIGN_OP	480:15	480:15	6	=
LEAF_NODE	480:15	480:15	7	=
RVAL	480:17	480:17	6	tag
FIELD	480:17	480:17	7	tag
LEAF_NODE	480:17	480:17	8	tag
LEAF_NODE	480:20	480:20	4	;
EXPR_STATEMENT	481:1	481:20	3	dir -> tdir_count = 1 ;
EXPR	481:1	481:1	4	dir -> tdir_count = 1
ASSIGN	481:1	481:19	5	dir -> tdir_count = 1
LVAL	481:1	481:1	6	dir -> tdir_count
FIELD	481:1	481:6	7	dir -> tdir_count
LEAF_NODE	481:1	481:1	8	dir
LEAF_NODE	481:4	481:4	8	->
LEAF_NODE	481:6	481:6	8	tdir_count
ASSIGN_OP	481:17	481:17	6	=
LEAF_NODE	481:17	481:17	7	=
RVAL	481:19	481:19	6	1
FIELD	481:19	481:19	7	1
LEAF_NODE	481:19	481:19	8	1
LEAF_NODE	481:20	481:20	4	;
SELECTION	482:1	482:18	3	
KEYWORD	482:1	482:1	4	if
LEAF_NODE	482:1	482:1	5	if
LEAF_NODE	482:4	482:4	4	(
CONDITION	482:5	482:5	4	v > 0xffffL
EXPR	482:5	482:9	5	v > 0xffffL
FIELD	482:5	482:5	6	v
LEAF_NODE	482:5	482:5	7	v
REL_OPERATOR	482:7	482:7	6	>
LEAF_NODE	482:7	482:7	7	>
FIELD	482:9	482:9	6	0xffffL
LEAF_NODE	482:9	482:9	7	0xffffL
LEAF_NODE	482:16	482:16	4	)
STATEMENTS	482:18	485:1	4	
LEAF_NODE	482:18	482:18	5	{
STATEMENTS	483:2	484:2	5	
EXPR_STATEMENT	483:2	483:36	6	dir -> tdir_type = ( short ) TIFF_LONG ;
EXPR	483:2	483:2	7	dir -> tdir_type = ( short ) TIFF_LONG
ASSIGN	483:2	483:19	8	dir -> tdir_type = ( short ) TIFF_LONG
LVAL	483:2	483:2	9	dir -> tdir_type
FIELD	483:2	483:7	10	dir -> tdir_type
LEAF_NODE	483:2	483:2	11	dir
LEAF_NODE	483:5	483:5	11	->
LEAF_NODE	483:7	483:7	11	tdir_type
ASSIGN_OP	483:17	483:17	9	=
LEAF_NODE	483:17	483:17	10	=
RVAL	483:19	483:27	9	( short ) TIFF_LONG
LEAF_NODE	483:19	483:19	10	(
TYPE_NAME	483:20	483:20	10	short
LEAF_NODE	483:20	483:20	11	short
LEAF_NODE	483:25	483:25	10	)
FIELD	483:27	483:27	10	TIFF_LONG
LEAF_NODE	483:27	483:27	11	TIFF_LONG
LEAF_NODE	483:36	483:36	7	;
EXPR_STATEMENT	484:2	484:22	6	dir -> tdir_offset = v ;
EXPR	484:2	484:2	7	dir -> tdir_offset = v
ASSIGN	484:2	484:21	8	dir -> tdir_offset = v
LVAL	484:2	484:2	9	dir -> tdir_offset
FIELD	484:2	484:7	10	dir -> tdir_offset
LEAF_NODE	484:2	484:2	11	dir
LEAF_NODE	484:5	484:5	11	->
LEAF_NODE	484:7	484:7	11	tdir_offset
ASSIGN_OP	484:19	484:19	9	=
LEAF_NODE	484:19	484:19	10	=
RVAL	484:21	484:21	9	v
FIELD	484:21	484:21	10	v
LEAF_NODE	484:21	484:21	11	v
LEAF_NODE	484:22	484:22	7	;
LEAF_NODE	485:1	485:1	5	}
SELECTION	485:3	485:8	3	
KEYWORD	485:3	485:3	4	else
LEAF_NODE	485:3	485:3	5	else
STATEMENTS	485:8	488:1	4	
LEAF_NODE	485:8	485:8	5	{
STATEMENTS	486:2	487:2	5	
EXPR_STATEMENT	486:2	486:37	6	dir -> tdir_type = ( short ) TIFF_SHORT ;
EXPR	486:2	486:2	7	dir -> tdir_type = ( short ) TIFF_SHORT
ASSIGN	486:2	486:19	8	dir -> tdir_type = ( short ) TIFF_SHORT
LVAL	486:2	486:2	9	dir -> tdir_type
FIELD	486:2	486:7	10	dir -> tdir_type
LEAF_NODE	486:2	486:2	11	dir
LEAF_NODE	486:5	486:5	11	->
LEAF_NODE	486:7	486:7	11	tdir_type
ASSIGN_OP	486:17	486:17	9	=
LEAF_NODE	486:17	486:17	10	=
RVAL	486:19	486:27	9	( short ) TIFF_SHORT
LEAF_NODE	486:19	486:19	10	(
TYPE_NAME	486:20	486:20	10	short
LEAF_NODE	486:20	486:20	11	short
LEAF_NODE	486:25	486:25	10	)
FIELD	486:27	486:27	10	TIFF_SHORT
LEAF_NODE	486:27	486:27	11	TIFF_SHORT
LEAF_NODE	486:37	486:37	7	;
EXPR_STATEMENT	487:2	487:61	6	dir -> tdir_offset = TIFFInsertData ( tif , ( int ) TIFF_SHORT , v ) ;
EXPR	487:2	487:2	7	dir -> tdir_offset = TIFFInsertData ( tif , ( int ) TIFF_SHORT , v )
ASSIGN	487:2	487:21	8	dir -> tdir_offset = TIFFInsertData ( tif , ( int ) TIFF_SHORT , v )
LVAL	487:2	487:2	9	dir -> tdir_offset
FIELD	487:2	487:7	10	dir -> tdir_offset
LEAF_NODE	487:2	487:2	11	dir
LEAF_NODE	487:5	487:5	11	->
LEAF_NODE	487:7	487:7	11	tdir_offset
ASSIGN_OP	487:19	487:19	9	=
LEAF_NODE	487:19	487:19	10	=
RVAL	487:21	487:21	9	TIFFInsertData ( tif , ( int ) TIFF_SHORT , v )
FUNCTION_CALL	487:21	487:60	10	TIFFInsertData ( tif , ( int ) TIFF_SHORT , v )
CALLEE	487:21	487:21	11	TIFFInsertData
LEAF_NODE	487:21	487:21	12	TIFFInsertData
LEAF_NODE	487:35	487:35	11	(
ARGUMENT	487:36	487:36	11	tif
FIELD	487:36	487:36	12	tif
LEAF_NODE	487:36	487:36	13	tif
LEAF_NODE	487:39	487:39	11	,
ARGUMENT	487:41	487:47	11	( int ) TIFF_SHORT
LEAF_NODE	487:41	487:41	12	(
TYPE_NAME	487:42	487:42	12	int
LEAF_NODE	487:42	487:42	13	int
LEAF_NODE	487:45	487:45	12	)
FIELD	487:47	487:47	12	TIFF_SHORT
LEAF_NODE	487:47	487:47	13	TIFF_SHORT
LEAF_NODE	487:57	487:57	11	,
ARGUMENT	487:59	487:59	11	v
FIELD	487:59	487:59	12	v
LEAF_NODE	487:59	487:59	13	v
LEAF_NODE	487:60	487:60	11	)
LEAF_NODE	487:61	487:61	7	;
LEAF_NODE	488:1	488:1	5	}
LEAF_NODE	489:0	489:0	2	}
FUNCTION_DEF	497:0	502:0	1	
RETURN_TYPE	497:0	497:7	2	static int
LEAF_NODE	497:0	497:0	3	static
TYPE_NAME	497:7	497:7	3	int
LEAF_NODE	497:7	497:7	4	int
FUNCTION_NAME	498:0	498:0	2	TIFFWriteRational
LEAF_NODE	498:0	498:0	3	TIFFWriteRational
PARAMETER_LIST	498:17	499:61	2	( TIFF * tif , TIFFDataType type , ttag_t tag , TIFFDirEntry * dir , float v )
LEAF_NODE	498:17	498:17	3	(
PARAMETER_DECL	498:18	498:24	3	TIFF * tif
TYPE	498:18	498:22	4	TIFF *
TYPE_NAME	498:18	498:18	5	TIFF
LEAF_NODE	498:18	498:18	6	TIFF
POINTER	498:22	498:22	5	*
LEAF_NODE	498:22	498:22	6	*
NAME	498:24	498:24	4	tif
LEAF_NODE	498:24	498:24	5	tif
LEAF_NODE	498:27	498:27	3	,
PARAMETER_DECL	499:4	499:17	3	TIFFDataType type
TYPE	499:4	499:4	4	TIFFDataType
TYPE_NAME	499:4	499:4	5	TIFFDataType
LEAF_NODE	499:4	499:4	6	TIFFDataType
NAME	499:17	499:17	4	type
LEAF_NODE	499:17	499:17	5	type
LEAF_NODE	499:21	499:21	3	,
PARAMETER_DECL	499:23	499:30	3	ttag_t tag
TYPE	499:23	499:23	4	ttag_t
TYPE_NAME	499:23	499:23	5	ttag_t
LEAF_NODE	499:23	499:23	6	ttag_t
NAME	499:30	499:30	4	tag
LEAF_NODE	499:30	499:30	5	tag
LEAF_NODE	499:33	499:33	3	,
PARAMETER_DECL	499:35	499:49	3	TIFFDirEntry * dir
TYPE	499:35	499:47	4	TIFFDirEntry *
TYPE_NAME	499:35	499:35	5	TIFFDirEntry
LEAF_NODE	499:35	499:35	6	TIFFDirEntry
POINTER	499:47	499:47	5	*
LEAF_NODE	499:47	499:47	6	*
NAME	499:49	499:49	4	dir
LEAF_NODE	499:49	499:49	5	dir
LEAF_NODE	499:52	499:52	3	,
PARAMETER_DECL	499:54	499:60	3	float v
TYPE	499:54	499:54	4	float
TYPE_NAME	499:54	499:54	5	float
LEAF_NODE	499:54	499:54	6	float
NAME	499:60	499:60	4	v
LEAF_NODE	499:60	499:60	5	v
LEAF_NODE	499:61	499:61	3	)
LEAF_NODE	500:0	500:0	2	{
STATEMENTS	501:1	501:1	2	
JUMP_STATEMENT	501:1	501:60	3	return ( TIFFWriteRationalArray ( tif , type , tag , dir , 1 , & v ) ) ;
KEYWORD	501:1	501:1	4	return
LEAF_NODE	501:1	501:1	5	return
DESTINATION	501:8	501:8	4	( TIFFWriteRationalArray ( tif , type , tag , dir , 1 , & v ) )
EXPR	501:8	501:59	5	( TIFFWriteRationalArray ( tif , type , tag , dir , 1 , & v ) )
LEAF_NODE	501:8	501:8	6	(
FUNCTION_CALL	501:9	501:58	6	TIFFWriteRationalArray ( tif , type , tag , dir , 1 , & v )
CALLEE	501:9	501:9	7	TIFFWriteRationalArray
LEAF_NODE	501:9	501:9	8	TIFFWriteRationalArray
LEAF_NODE	501:31	501:31	7	(
ARGUMENT	501:32	501:32	7	tif
FIELD	501:32	501:32	8	tif
LEAF_NODE	501:32	501:32	9	tif
LEAF_NODE	501:35	501:35	7	,
ARGUMENT	501:37	501:37	7	type
FIELD	501:37	501:37	8	type
LEAF_NODE	501:37	501:37	9	type
LEAF_NODE	501:41	501:41	7	,
ARGUMENT	501:43	501:43	7	tag
FIELD	501:43	501:43	8	tag
LEAF_NODE	501:43	501:43	9	tag
LEAF_NODE	501:46	501:46	7	,
ARGUMENT	501:48	501:48	7	dir
FIELD	501:48	501:48	8	dir
LEAF_NODE	501:48	501:48	9	dir
LEAF_NODE	501:51	501:51	7	,
ARGUMENT	501:53	501:53	7	1
FIELD	501:53	501:53	8	1
LEAF_NODE	501:53	501:53	9	1
LEAF_NODE	501:54	501:54	7	,
ARGUMENT	501:56	501:56	7	& v
UNARY_EXPR	501:56	501:57	8	& v
UNARY_OPERATOR	501:56	501:56	9	&
LEAF_NODE	501:56	501:56	10	&
FIELD	501:57	501:57	9	v
LEAF_NODE	501:57	501:57	10	v
LEAF_NODE	501:58	501:58	7	)
LEAF_NODE	501:59	501:59	6	)
LEAF_NODE	501:60	501:60	4	;
LEAF_NODE	502:0	502:0	2	}
FUNCTION_DEF	512:0	528:0	1	
RETURN_TYPE	512:0	512:7	2	static int
LEAF_NODE	512:0	512:0	3	static
TYPE_NAME	512:7	512:7	3	int
LEAF_NODE	512:7	512:7	4	int
FUNCTION_NAME	513:0	513:0	2	TIFFWritePerSampleShorts
LEAF_NODE	513:0	513:0	3	TIFFWritePerSampleShorts
PARAMETER_LIST	513:24	513:65	2	( TIFF * tif , ttag_t tag , TIFFDirEntry * dir )
LEAF_NODE	513:24	513:24	3	(
PARAMETER_DECL	513:25	513:31	3	TIFF * tif
TYPE	513:25	513:29	4	TIFF *
TYPE_NAME	513:25	513:25	5	TIFF
LEAF_NODE	513:25	513:25	6	TIFF
POINTER	513:29	513:29	5	*
LEAF_NODE	513:29	513:29	6	*
NAME	513:31	513:31	4	tif
LEAF_NODE	513:31	513:31	5	tif
LEAF_NODE	513:34	513:34	3	,
PARAMETER_DECL	513:36	513:43	3	ttag_t tag
TYPE	513:36	513:36	4	ttag_t
TYPE_NAME	513:36	513:36	5	ttag_t
LEAF_NODE	513:36	513:36	6	ttag_t
NAME	513:43	513:43	4	tag
LEAF_NODE	513:43	513:43	5	tag
LEAF_NODE	513:46	513:46	3	,
PARAMETER_DECL	513:48	513:62	3	TIFFDirEntry * dir
TYPE	513:48	513:60	4	TIFFDirEntry *
TYPE_NAME	513:48	513:48	5	TIFFDirEntry
LEAF_NODE	513:48	513:48	6	TIFFDirEntry
POINTER	513:60	513:60	5	*
LEAF_NODE	513:60	513:60	6	*
NAME	513:62	513:62	4	dir
LEAF_NODE	513:62	513:62	5	dir
LEAF_NODE	513:65	513:65	3	)
LEAF_NODE	514:0	514:0	2	{
STATEMENTS	515:1	527:16	2	
SIMPLE_DECL	515:1	515:18	3	uint16 [ 10 ] buf , uint16 v ;
INIT_DECL_LIST	515:1	515:1	4	uint16 [ 10 ] buf , uint16 v
VAR_DECL	515:1	515:8	5	uint16 [ 10 ] buf
TYPE	515:1	515:11	6	uint16 [ 10 ]
TYPE_NAME	515:1	515:1	7	uint16
LEAF_NODE	515:1	515:1	8	uint16
TYPE_SUFFIX	515:11	515:14	7	[ 10 ]
LEAF_NODE	515:11	515:11	8	[
FIELD	515:12	515:12	8	10
LEAF_NODE	515:12	515:12	9	10
LEAF_NODE	515:14	515:14	8	]
NAME	515:8	515:8	6	buf
LEAF_NODE	515:8	515:8	7	buf
LEAF_NODE	515:15	515:15	5	,
VAR_DECL	515:1	515:17	5	uint16 v
TYPE	515:1	515:1	6	uint16
TYPE_NAME	515:1	515:1	7	uint16
LEAF_NODE	515:1	515:1	8	uint16
NAME	515:17	515:17	6	v
LEAF_NODE	515:17	515:17	7	v
LEAF_NODE	515:18	515:18	4	;
SIMPLE_DECL	516:1	516:16	3	uint16 * w ; w = buf ;
VAR_DECL	516:1	516:9	4	uint16 * w ; w = buf
TYPE	516:1	516:7	5	uint16 *
TYPE_NAME	516:1	516:1	6	uint16
LEAF_NODE	516:1	516:1	7	uint16
POINTER	516:7	516:7	6	*
LEAF_NODE	516:7	516:7	7	*
NAME	516:9	516:9	5	w
LEAF_NODE	516:9	516:9	6	w
LEAF_NODE	0:0	0:0	5	;
INIT	516:9	516:9	5	w = buf
ASSIGN	516:9	516:13	6	w = buf
LVAL	516:9	516:9	7	w
NAME	516:9	516:9	8	w
LEAF_NODE	516:9	516:9	9	w
ASSIGN_OP	516:11	516:11	7	=
LEAF_NODE	516:11	516:11	8	=
RVAL	516:13	516:13	7	buf
FIELD	516:13	516:13	8	buf
LEAF_NODE	516:13	516:13	9	buf
LEAF_NODE	516:16	516:16	4	;
SIMPLE_DECL	517:1	517:57	3	int i , int status , int samples ; samples = tif -> tif_dir . td_samplesperpixel ;
INIT_DECL_LIST	517:1	517:1	4	int i , int status , int samples ; samples = tif -> tif_dir . td_samplesperpixel
VAR_DECL	517:1	517:5	5	int i
TYPE	517:1	517:1	6	int
TYPE_NAME	517:1	517:1	7	int
LEAF_NODE	517:1	517:1	8	int
NAME	517:5	517:5	6	i
LEAF_NODE	517:5	517:5	7	i
LEAF_NODE	517:6	517:6	5	,
INIT_DECL_LIST	517:1	517:1	5	int status , int samples ; samples = tif -> tif_dir . td_samplesperpixel
VAR_DECL	517:1	517:8	6	int status
TYPE	517:1	517:1	7	int
TYPE_NAME	517:1	517:1	8	int
LEAF_NODE	517:1	517:1	9	int
NAME	517:8	517:8	7	status
LEAF_NODE	517:8	517:8	8	status
LEAF_NODE	517:14	517:14	6	,
VAR_DECL	517:1	517:16	6	int samples ; samples = tif -> tif_dir . td_samplesperpixel
TYPE	517:1	517:1	7	int
TYPE_NAME	517:1	517:1	8	int
LEAF_NODE	517:1	517:1	9	int
NAME	517:16	517:16	7	samples
LEAF_NODE	517:16	517:16	8	samples
LEAF_NODE	0:0	0:0	7	;
INIT	517:16	517:16	7	samples = tif -> tif_dir . td_samplesperpixel
ASSIGN	517:16	517:26	8	samples = tif -> tif_dir . td_samplesperpixel
LVAL	517:16	517:16	9	samples
NAME	517:16	517:16	10	samples
LEAF_NODE	517:16	517:16	11	samples
ASSIGN_OP	517:24	517:24	9	=
LEAF_NODE	517:24	517:24	10	=
RVAL	517:26	517:26	9	tif -> tif_dir . td_samplesperpixel
FIELD	517:26	517:39	10	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	517:26	517:26	11	tif
LEAF_NODE	517:29	517:29	11	->
LEAF_NODE	517:31	517:31	11	tif_dir
LEAF_NODE	517:38	517:38	11	.
LEAF_NODE	517:39	517:39	11	td_samplesperpixel
LEAF_NODE	517:57	517:57	4	;
SELECTION	519:1	520:2	3	
KEYWORD	519:1	519:1	4	if
LEAF_NODE	519:1	519:1	5	if
LEAF_NODE	519:4	519:4	4	(
CONDITION	519:5	519:5	4	samples > NITEMS ( buf )
EXPR	519:5	519:15	5	samples > NITEMS ( buf )
FIELD	519:5	519:5	6	samples
LEAF_NODE	519:5	519:5	7	samples
REL_OPERATOR	519:13	519:13	6	>
LEAF_NODE	519:13	519:13	7	>
FUNCTION_CALL	519:15	519:25	6	NITEMS ( buf )
CALLEE	519:15	519:15	7	NITEMS
LEAF_NODE	519:15	519:15	8	NITEMS
LEAF_NODE	519:21	519:21	7	(
ARGUMENT	519:22	519:22	7	buf
FIELD	519:22	519:22	8	buf
LEAF_NODE	519:22	519:22	9	buf
LEAF_NODE	519:25	519:25	7	)
LEAF_NODE	519:26	519:26	4	)
STATEMENTS	520:2	520:2	4	
EXPR_STATEMENT	520:2	520:54	5	w = ( uint16 * ) _TIFFmalloc ( samples * sizeof ( uint16 ) ) ;
EXPR	520:2	520:2	6	w = ( uint16 * ) _TIFFmalloc ( samples * sizeof ( uint16 ) )
ASSIGN	520:2	520:6	7	w = ( uint16 * ) _TIFFmalloc ( samples * sizeof ( uint16 ) )
LVAL	520:2	520:2	8	w
FIELD	520:2	520:2	9	w
LEAF_NODE	520:2	520:2	10	w
ASSIGN_OP	520:4	520:4	8	=
LEAF_NODE	520:4	520:4	9	=
RVAL	520:6	520:16	8	( uint16 * ) _TIFFmalloc ( samples * sizeof ( uint16 ) )
LEAF_NODE	520:6	520:6	9	(
TYPE_NAME	520:7	520:7	9	uint16
LEAF_NODE	520:7	520:7	10	uint16
LEAF_NODE	520:13	520:13	9	*
LEAF_NODE	520:14	520:14	9	)
FUNCTION_CALL	520:16	520:53	9	_TIFFmalloc ( samples * sizeof ( uint16 ) )
CALLEE	520:16	520:16	10	_TIFFmalloc
LEAF_NODE	520:16	520:16	11	_TIFFmalloc
LEAF_NODE	520:27	520:27	10	(
ARGUMENT	520:28	520:38	10	samples * sizeof ( uint16 )
FIELD	520:28	520:28	11	samples
LEAF_NODE	520:28	520:28	12	samples
LEAF_NODE	520:36	520:36	11	*
FUNCTION_CALL	520:38	520:52	11	sizeof ( uint16 )
CALLEE	520:38	520:38	12	sizeof
LEAF_NODE	520:38	520:38	13	sizeof
LEAF_NODE	520:45	520:45	12	(
ARGUMENT	520:46	520:46	12	uint16
FIELD	520:46	520:46	13	uint16
LEAF_NODE	520:46	520:46	14	uint16
LEAF_NODE	520:52	520:52	12	)
LEAF_NODE	520:53	520:53	10	)
LEAF_NODE	520:54	520:54	6	;
EXPR_STATEMENT	521:1	521:27	3	TIFFGetField ( tif , tag , & v ) ;
EXPR	521:1	521:1	4	TIFFGetField ( tif , tag , & v )
FUNCTION_CALL	521:1	521:26	5	TIFFGetField ( tif , tag , & v )
CALLEE	521:1	521:1	6	TIFFGetField
LEAF_NODE	521:1	521:1	7	TIFFGetField
LEAF_NODE	521:13	521:13	6	(
ARGUMENT	521:14	521:14	6	tif
FIELD	521:14	521:14	7	tif
LEAF_NODE	521:14	521:14	8	tif
LEAF_NODE	521:17	521:17	6	,
ARGUMENT	521:19	521:19	6	tag
FIELD	521:19	521:19	7	tag
LEAF_NODE	521:19	521:19	8	tag
LEAF_NODE	521:22	521:22	6	,
ARGUMENT	521:24	521:24	6	& v
UNARY_EXPR	521:24	521:25	7	& v
UNARY_OPERATOR	521:24	521:24	8	&
LEAF_NODE	521:24	521:24	9	&
FIELD	521:25	521:25	8	v
LEAF_NODE	521:25	521:25	9	v
LEAF_NODE	521:26	521:26	6	)
LEAF_NODE	521:27	521:27	4	;
ITERATION	522:1	523:2	3	
KEYWORD	522:1	522:1	4	for
LEAF_NODE	522:1	522:1	5	for
LEAF_NODE	522:5	522:5	4	(
FOR_INIT	522:6	522:11	4	i = 0 ;
EXPR	522:6	522:6	5	i = 0
ASSIGN	522:6	522:10	6	i = 0
LVAL	522:6	522:6	7	i
FIELD	522:6	522:6	8	i
LEAF_NODE	522:6	522:6	9	i
ASSIGN_OP	522:8	522:8	7	=
LEAF_NODE	522:8	522:8	8	=
RVAL	522:10	522:10	7	0
FIELD	522:10	522:10	8	0
LEAF_NODE	522:10	522:10	9	0
LEAF_NODE	522:11	522:11	5	;
CONDITION	522:13	522:13	4	i < samples
EXPR	522:13	522:17	5	i < samples
FIELD	522:13	522:13	6	i
LEAF_NODE	522:13	522:13	7	i
REL_OPERATOR	522:15	522:15	6	<
LEAF_NODE	522:15	522:15	7	<
FIELD	522:17	522:17	6	samples
LEAF_NODE	522:17	522:17	7	samples
LEAF_NODE	522:24	522:24	4	;
FOR_EXPR	522:26	522:26	4	i ++
EXPR	522:26	522:26	5	i ++
FIELD	522:26	522:27	6	i ++
LEAF_NODE	522:26	522:26	7	i
LEAF_NODE	522:27	522:27	7	++
LEAF_NODE	522:29	522:29	4	)
STATEMENTS	523:2	523:2	4	
EXPR_STATEMENT	523:2	523:10	5	w [ i ] = v ;
EXPR	523:2	523:2	6	w [ i ] = v
ASSIGN	523:2	523:9	7	w [ i ] = v
LVAL	523:2	523:2	8	w [ i ]
FIELD	523:2	523:5	9	w [ i ]
LEAF_NODE	523:2	523:2	10	w
LEAF_NODE	523:3	523:3	10	[
EXPR	523:4	523:4	10	i
FIELD	523:4	523:4	11	i
LEAF_NODE	523:4	523:4	12	i
LEAF_NODE	523:5	523:5	10	]
ASSIGN_OP	523:7	523:7	8	=
LEAF_NODE	523:7	523:7	9	=
RVAL	523:9	523:9	8	v
FIELD	523:9	523:9	9	v
LEAF_NODE	523:9	523:9	10	v
LEAF_NODE	523:10	523:10	6	;
EXPR_STATEMENT	524:1	524:68	3	status = TIFFWriteShortArray ( tif , TIFF_SHORT , tag , dir , samples , w ) ;
EXPR	524:1	524:1	4	status = TIFFWriteShortArray ( tif , TIFF_SHORT , tag , dir , samples , w )
ASSIGN	524:1	524:10	5	status = TIFFWriteShortArray ( tif , TIFF_SHORT , tag , dir , samples , w )
LVAL	524:1	524:1	6	status
FIELD	524:1	524:1	7	status
LEAF_NODE	524:1	524:1	8	status
ASSIGN_OP	524:8	524:8	6	=
LEAF_NODE	524:8	524:8	7	=
RVAL	524:10	524:10	6	TIFFWriteShortArray ( tif , TIFF_SHORT , tag , dir , samples , w )
FUNCTION_CALL	524:10	524:67	7	TIFFWriteShortArray ( tif , TIFF_SHORT , tag , dir , samples , w )
CALLEE	524:10	524:10	8	TIFFWriteShortArray
LEAF_NODE	524:10	524:10	9	TIFFWriteShortArray
LEAF_NODE	524:29	524:29	8	(
ARGUMENT	524:30	524:30	8	tif
FIELD	524:30	524:30	9	tif
LEAF_NODE	524:30	524:30	10	tif
LEAF_NODE	524:33	524:33	8	,
ARGUMENT	524:35	524:35	8	TIFF_SHORT
FIELD	524:35	524:35	9	TIFF_SHORT
LEAF_NODE	524:35	524:35	10	TIFF_SHORT
LEAF_NODE	524:45	524:45	8	,
ARGUMENT	524:47	524:47	8	tag
FIELD	524:47	524:47	9	tag
LEAF_NODE	524:47	524:47	10	tag
LEAF_NODE	524:50	524:50	8	,
ARGUMENT	524:52	524:52	8	dir
FIELD	524:52	524:52	9	dir
LEAF_NODE	524:52	524:52	10	dir
LEAF_NODE	524:55	524:55	8	,
ARGUMENT	524:57	524:57	8	samples
FIELD	524:57	524:57	9	samples
LEAF_NODE	524:57	524:57	10	samples
LEAF_NODE	524:64	524:64	8	,
ARGUMENT	524:66	524:66	8	w
FIELD	524:66	524:66	9	w
LEAF_NODE	524:66	524:66	10	w
LEAF_NODE	524:67	524:67	8	)
LEAF_NODE	524:68	524:68	4	;
SELECTION	525:1	526:2	3	
KEYWORD	525:1	525:1	4	if
LEAF_NODE	525:1	525:1	5	if
LEAF_NODE	525:4	525:4	4	(
CONDITION	525:5	525:5	4	w != buf
EXPR	525:5	525:10	5	w != buf
FIELD	525:5	525:5	6	w
LEAF_NODE	525:5	525:5	7	w
EQ_OPERATOR	525:7	525:7	6	!=
LEAF_NODE	525:7	525:7	7	!=
FIELD	525:10	525:10	6	buf
LEAF_NODE	525:10	525:10	7	buf
LEAF_NODE	525:13	525:13	4	)
STATEMENTS	526:2	526:2	4	
EXPR_STATEMENT	526:2	526:22	5	_TIFFfree ( ( char * ) w ) ;
EXPR	526:2	526:2	6	_TIFFfree ( ( char * ) w )
FUNCTION_CALL	526:2	526:21	7	_TIFFfree ( ( char * ) w )
CALLEE	526:2	526:2	8	_TIFFfree
LEAF_NODE	526:2	526:2	9	_TIFFfree
LEAF_NODE	526:11	526:11	8	(
ARGUMENT	526:12	526:20	8	( char * ) w
LEAF_NODE	526:12	526:12	9	(
TYPE_NAME	526:13	526:13	9	char
LEAF_NODE	526:13	526:13	10	char
LEAF_NODE	526:17	526:17	9	*
LEAF_NODE	526:18	526:18	9	)
FIELD	526:20	526:20	9	w
LEAF_NODE	526:20	526:20	10	w
LEAF_NODE	526:21	526:21	8	)
LEAF_NODE	526:22	526:22	6	;
LEAF_NODE	527:1	527:1	3	return
LEAF_NODE	527:8	527:8	3	(
LEAF_NODE	527:9	527:9	3	status
LEAF_NODE	527:15	527:15	3	)
LEAF_NODE	527:16	527:16	3	;
LEAF_NODE	528:0	528:0	2	}
FUNCTION_DEF	535:0	553:0	1	
RETURN_TYPE	535:0	535:7	2	static int
LEAF_NODE	535:0	535:0	3	static
TYPE_NAME	535:7	535:7	3	int
LEAF_NODE	535:7	535:7	4	int
FUNCTION_NAME	536:0	536:0	2	TIFFWritePerSampleAnys
LEAF_NODE	536:0	536:0	3	TIFFWritePerSampleAnys
PARAMETER_LIST	536:22	537:52	2	( TIFF * tif , TIFFDataType type , ttag_t tag , TIFFDirEntry * dir )
LEAF_NODE	536:22	536:22	3	(
PARAMETER_DECL	536:23	536:29	3	TIFF * tif
TYPE	536:23	536:27	4	TIFF *
TYPE_NAME	536:23	536:23	5	TIFF
LEAF_NODE	536:23	536:23	6	TIFF
POINTER	536:27	536:27	5	*
LEAF_NODE	536:27	536:27	6	*
NAME	536:29	536:29	4	tif
LEAF_NODE	536:29	536:29	5	tif
LEAF_NODE	536:32	536:32	3	,
PARAMETER_DECL	537:4	537:17	3	TIFFDataType type
TYPE	537:4	537:4	4	TIFFDataType
TYPE_NAME	537:4	537:4	5	TIFFDataType
LEAF_NODE	537:4	537:4	6	TIFFDataType
NAME	537:17	537:17	4	type
LEAF_NODE	537:17	537:17	5	type
LEAF_NODE	537:21	537:21	3	,
PARAMETER_DECL	537:23	537:30	3	ttag_t tag
TYPE	537:23	537:23	4	ttag_t
TYPE_NAME	537:23	537:23	5	ttag_t
LEAF_NODE	537:23	537:23	6	ttag_t
NAME	537:30	537:30	4	tag
LEAF_NODE	537:30	537:30	5	tag
LEAF_NODE	537:33	537:33	3	,
PARAMETER_DECL	537:35	537:49	3	TIFFDirEntry * dir
TYPE	537:35	537:47	4	TIFFDirEntry *
TYPE_NAME	537:35	537:35	5	TIFFDirEntry
LEAF_NODE	537:35	537:35	6	TIFFDirEntry
POINTER	537:47	537:47	5	*
LEAF_NODE	537:47	537:47	6	*
NAME	537:49	537:49	4	dir
LEAF_NODE	537:49	537:49	5	dir
LEAF_NODE	537:52	537:52	3	)
LEAF_NODE	538:0	538:0	2	{
STATEMENTS	539:1	552:16	2	
SIMPLE_DECL	539:1	539:18	3	double [ 10 ] buf , double v ;
INIT_DECL_LIST	539:1	539:1	4	double [ 10 ] buf , double v
VAR_DECL	539:1	539:8	5	double [ 10 ] buf
TYPE	539:1	539:11	6	double [ 10 ]
TYPE_NAME	539:1	539:1	7	double
LEAF_NODE	539:1	539:1	8	double
TYPE_SUFFIX	539:11	539:14	7	[ 10 ]
LEAF_NODE	539:11	539:11	8	[
FIELD	539:12	539:12	8	10
LEAF_NODE	539:12	539:12	9	10
LEAF_NODE	539:14	539:14	8	]
NAME	539:8	539:8	6	buf
LEAF_NODE	539:8	539:8	7	buf
LEAF_NODE	539:15	539:15	5	,
VAR_DECL	539:1	539:17	5	double v
TYPE	539:1	539:1	6	double
TYPE_NAME	539:1	539:1	7	double
LEAF_NODE	539:1	539:1	8	double
NAME	539:17	539:17	6	v
LEAF_NODE	539:17	539:17	7	v
LEAF_NODE	539:18	539:18	4	;
SIMPLE_DECL	540:1	540:16	3	double * w ; w = buf ;
VAR_DECL	540:1	540:9	4	double * w ; w = buf
TYPE	540:1	540:7	5	double *
TYPE_NAME	540:1	540:1	6	double
LEAF_NODE	540:1	540:1	7	double
POINTER	540:7	540:7	6	*
LEAF_NODE	540:7	540:7	7	*
NAME	540:9	540:9	5	w
LEAF_NODE	540:9	540:9	6	w
LEAF_NODE	0:0	0:0	5	;
INIT	540:9	540:9	5	w = buf
ASSIGN	540:9	540:13	6	w = buf
LVAL	540:9	540:9	7	w
NAME	540:9	540:9	8	w
LEAF_NODE	540:9	540:9	9	w
ASSIGN_OP	540:11	540:11	7	=
LEAF_NODE	540:11	540:11	8	=
RVAL	540:13	540:13	7	buf
FIELD	540:13	540:13	8	buf
LEAF_NODE	540:13	540:13	9	buf
LEAF_NODE	540:16	540:16	4	;
SIMPLE_DECL	541:1	541:14	3	int i , int status ;
INIT_DECL_LIST	541:1	541:1	4	int i , int status
VAR_DECL	541:1	541:5	5	int i
TYPE	541:1	541:1	6	int
TYPE_NAME	541:1	541:1	7	int
LEAF_NODE	541:1	541:1	8	int
NAME	541:5	541:5	6	i
LEAF_NODE	541:5	541:5	7	i
LEAF_NODE	541:6	541:6	5	,
VAR_DECL	541:1	541:8	5	int status
TYPE	541:1	541:1	6	int
TYPE_NAME	541:1	541:1	7	int
LEAF_NODE	541:1	541:1	8	int
NAME	541:8	541:8	6	status
LEAF_NODE	541:8	541:8	7	status
LEAF_NODE	541:14	541:14	4	;
SIMPLE_DECL	542:1	542:52	3	int samples ; samples = ( int ) tif -> tif_dir . td_samplesperpixel ;
VAR_DECL	542:1	542:5	4	int samples ; samples = ( int ) tif -> tif_dir . td_samplesperpixel
TYPE	542:1	542:1	5	int
TYPE_NAME	542:1	542:1	6	int
LEAF_NODE	542:1	542:1	7	int
NAME	542:5	542:5	5	samples
LEAF_NODE	542:5	542:5	6	samples
LEAF_NODE	0:0	0:0	5	;
INIT	542:5	542:5	5	samples = ( int ) tif -> tif_dir . td_samplesperpixel
ASSIGN	542:5	542:15	6	samples = ( int ) tif -> tif_dir . td_samplesperpixel
LVAL	542:5	542:5	7	samples
NAME	542:5	542:5	8	samples
LEAF_NODE	542:5	542:5	9	samples
ASSIGN_OP	542:13	542:13	7	=
LEAF_NODE	542:13	542:13	8	=
RVAL	542:15	542:21	7	( int ) tif -> tif_dir . td_samplesperpixel
LEAF_NODE	542:15	542:15	8	(
TYPE_NAME	542:16	542:16	8	int
LEAF_NODE	542:16	542:16	9	int
LEAF_NODE	542:19	542:19	8	)
FIELD	542:21	542:34	8	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	542:21	542:21	9	tif
LEAF_NODE	542:24	542:24	9	->
LEAF_NODE	542:26	542:26	9	tif_dir
LEAF_NODE	542:33	542:33	9	.
LEAF_NODE	542:34	542:34	9	td_samplesperpixel
LEAF_NODE	542:52	542:52	4	;
SELECTION	544:1	545:2	3	
KEYWORD	544:1	544:1	4	if
LEAF_NODE	544:1	544:1	5	if
LEAF_NODE	544:4	544:4	4	(
CONDITION	544:5	544:5	4	samples > NITEMS ( buf )
EXPR	544:5	544:15	5	samples > NITEMS ( buf )
FIELD	544:5	544:5	6	samples
LEAF_NODE	544:5	544:5	7	samples
REL_OPERATOR	544:13	544:13	6	>
LEAF_NODE	544:13	544:13	7	>
FUNCTION_CALL	544:15	544:25	6	NITEMS ( buf )
CALLEE	544:15	544:15	7	NITEMS
LEAF_NODE	544:15	544:15	8	NITEMS
LEAF_NODE	544:21	544:21	7	(
ARGUMENT	544:22	544:22	7	buf
FIELD	544:22	544:22	8	buf
LEAF_NODE	544:22	544:22	9	buf
LEAF_NODE	544:25	544:25	7	)
LEAF_NODE	544:26	544:26	4	)
STATEMENTS	545:2	545:2	4	
EXPR_STATEMENT	545:2	545:54	5	w = ( double * ) _TIFFmalloc ( samples * sizeof ( double ) ) ;
EXPR	545:2	545:2	6	w = ( double * ) _TIFFmalloc ( samples * sizeof ( double ) )
ASSIGN	545:2	545:6	7	w = ( double * ) _TIFFmalloc ( samples * sizeof ( double ) )
LVAL	545:2	545:2	8	w
FIELD	545:2	545:2	9	w
LEAF_NODE	545:2	545:2	10	w
ASSIGN_OP	545:4	545:4	8	=
LEAF_NODE	545:4	545:4	9	=
RVAL	545:6	545:16	8	( double * ) _TIFFmalloc ( samples * sizeof ( double ) )
LEAF_NODE	545:6	545:6	9	(
TYPE_NAME	545:7	545:7	9	double
LEAF_NODE	545:7	545:7	10	double
LEAF_NODE	545:13	545:13	9	*
LEAF_NODE	545:14	545:14	9	)
FUNCTION_CALL	545:16	545:53	9	_TIFFmalloc ( samples * sizeof ( double ) )
CALLEE	545:16	545:16	10	_TIFFmalloc
LEAF_NODE	545:16	545:16	11	_TIFFmalloc
LEAF_NODE	545:27	545:27	10	(
ARGUMENT	545:28	545:38	10	samples * sizeof ( double )
FIELD	545:28	545:28	11	samples
LEAF_NODE	545:28	545:28	12	samples
LEAF_NODE	545:36	545:36	11	*
FUNCTION_CALL	545:38	545:52	11	sizeof ( double )
CALLEE	545:38	545:38	12	sizeof
LEAF_NODE	545:38	545:38	13	sizeof
LEAF_NODE	545:45	545:45	12	(
ARGUMENT	545:46	545:46	12	double
FIELD	545:46	545:46	13	double
LEAF_NODE	545:46	545:46	14	double
LEAF_NODE	545:52	545:52	12	)
LEAF_NODE	545:53	545:53	10	)
LEAF_NODE	545:54	545:54	6	;
EXPR_STATEMENT	546:1	546:27	3	TIFFGetField ( tif , tag , & v ) ;
EXPR	546:1	546:1	4	TIFFGetField ( tif , tag , & v )
FUNCTION_CALL	546:1	546:26	5	TIFFGetField ( tif , tag , & v )
CALLEE	546:1	546:1	6	TIFFGetField
LEAF_NODE	546:1	546:1	7	TIFFGetField
LEAF_NODE	546:13	546:13	6	(
ARGUMENT	546:14	546:14	6	tif
FIELD	546:14	546:14	7	tif
LEAF_NODE	546:14	546:14	8	tif
LEAF_NODE	546:17	546:17	6	,
ARGUMENT	546:19	546:19	6	tag
FIELD	546:19	546:19	7	tag
LEAF_NODE	546:19	546:19	8	tag
LEAF_NODE	546:22	546:22	6	,
ARGUMENT	546:24	546:24	6	& v
UNARY_EXPR	546:24	546:25	7	& v
UNARY_OPERATOR	546:24	546:24	8	&
LEAF_NODE	546:24	546:24	9	&
FIELD	546:25	546:25	8	v
LEAF_NODE	546:25	546:25	9	v
LEAF_NODE	546:26	546:26	6	)
LEAF_NODE	546:27	546:27	4	;
ITERATION	547:1	548:2	3	
KEYWORD	547:1	547:1	4	for
LEAF_NODE	547:1	547:1	5	for
LEAF_NODE	547:5	547:5	4	(
FOR_INIT	547:6	547:11	4	i = 0 ;
EXPR	547:6	547:6	5	i = 0
ASSIGN	547:6	547:10	6	i = 0
LVAL	547:6	547:6	7	i
FIELD	547:6	547:6	8	i
LEAF_NODE	547:6	547:6	9	i
ASSIGN_OP	547:8	547:8	7	=
LEAF_NODE	547:8	547:8	8	=
RVAL	547:10	547:10	7	0
FIELD	547:10	547:10	8	0
LEAF_NODE	547:10	547:10	9	0
LEAF_NODE	547:11	547:11	5	;
CONDITION	547:13	547:13	4	i < samples
EXPR	547:13	547:17	5	i < samples
FIELD	547:13	547:13	6	i
LEAF_NODE	547:13	547:13	7	i
REL_OPERATOR	547:15	547:15	6	<
LEAF_NODE	547:15	547:15	7	<
FIELD	547:17	547:17	6	samples
LEAF_NODE	547:17	547:17	7	samples
LEAF_NODE	547:24	547:24	4	;
FOR_EXPR	547:26	547:26	4	i ++
EXPR	547:26	547:26	5	i ++
FIELD	547:26	547:27	6	i ++
LEAF_NODE	547:26	547:26	7	i
LEAF_NODE	547:27	547:27	7	++
LEAF_NODE	547:29	547:29	4	)
STATEMENTS	548:2	548:2	4	
EXPR_STATEMENT	548:2	548:10	5	w [ i ] = v ;
EXPR	548:2	548:2	6	w [ i ] = v
ASSIGN	548:2	548:9	7	w [ i ] = v
LVAL	548:2	548:2	8	w [ i ]
FIELD	548:2	548:5	9	w [ i ]
LEAF_NODE	548:2	548:2	10	w
LEAF_NODE	548:3	548:3	10	[
EXPR	548:4	548:4	10	i
FIELD	548:4	548:4	11	i
LEAF_NODE	548:4	548:4	12	i
LEAF_NODE	548:5	548:5	10	]
ASSIGN_OP	548:7	548:7	8	=
LEAF_NODE	548:7	548:7	9	=
RVAL	548:9	548:9	8	v
FIELD	548:9	548:9	9	v
LEAF_NODE	548:9	548:9	10	v
LEAF_NODE	548:10	548:10	6	;
EXPR_STATEMENT	549:1	549:60	3	status = TIFFWriteAnyArray ( tif , type , tag , dir , samples , w ) ;
EXPR	549:1	549:1	4	status = TIFFWriteAnyArray ( tif , type , tag , dir , samples , w )
ASSIGN	549:1	549:10	5	status = TIFFWriteAnyArray ( tif , type , tag , dir , samples , w )
LVAL	549:1	549:1	6	status
FIELD	549:1	549:1	7	status
LEAF_NODE	549:1	549:1	8	status
ASSIGN_OP	549:8	549:8	6	=
LEAF_NODE	549:8	549:8	7	=
RVAL	549:10	549:10	6	TIFFWriteAnyArray ( tif , type , tag , dir , samples , w )
FUNCTION_CALL	549:10	549:59	7	TIFFWriteAnyArray ( tif , type , tag , dir , samples , w )
CALLEE	549:10	549:10	8	TIFFWriteAnyArray
LEAF_NODE	549:10	549:10	9	TIFFWriteAnyArray
LEAF_NODE	549:27	549:27	8	(
ARGUMENT	549:28	549:28	8	tif
FIELD	549:28	549:28	9	tif
LEAF_NODE	549:28	549:28	10	tif
LEAF_NODE	549:31	549:31	8	,
ARGUMENT	549:33	549:33	8	type
FIELD	549:33	549:33	9	type
LEAF_NODE	549:33	549:33	10	type
LEAF_NODE	549:37	549:37	8	,
ARGUMENT	549:39	549:39	8	tag
FIELD	549:39	549:39	9	tag
LEAF_NODE	549:39	549:39	10	tag
LEAF_NODE	549:42	549:42	8	,
ARGUMENT	549:44	549:44	8	dir
FIELD	549:44	549:44	9	dir
LEAF_NODE	549:44	549:44	10	dir
LEAF_NODE	549:47	549:47	8	,
ARGUMENT	549:49	549:49	8	samples
FIELD	549:49	549:49	9	samples
LEAF_NODE	549:49	549:49	10	samples
LEAF_NODE	549:56	549:56	8	,
ARGUMENT	549:58	549:58	8	w
FIELD	549:58	549:58	9	w
LEAF_NODE	549:58	549:58	10	w
LEAF_NODE	549:59	549:59	8	)
LEAF_NODE	549:60	549:60	4	;
SELECTION	550:1	551:2	3	
KEYWORD	550:1	550:1	4	if
LEAF_NODE	550:1	550:1	5	if
LEAF_NODE	550:4	550:4	4	(
CONDITION	550:5	550:5	4	w != buf
EXPR	550:5	550:10	5	w != buf
FIELD	550:5	550:5	6	w
LEAF_NODE	550:5	550:5	7	w
EQ_OPERATOR	550:7	550:7	6	!=
LEAF_NODE	550:7	550:7	7	!=
FIELD	550:10	550:10	6	buf
LEAF_NODE	550:10	550:10	7	buf
LEAF_NODE	550:13	550:13	4	)
STATEMENTS	551:2	551:2	4	
EXPR_STATEMENT	551:2	551:14	5	_TIFFfree ( w ) ;
EXPR	551:2	551:2	6	_TIFFfree ( w )
FUNCTION_CALL	551:2	551:13	7	_TIFFfree ( w )
CALLEE	551:2	551:2	8	_TIFFfree
LEAF_NODE	551:2	551:2	9	_TIFFfree
LEAF_NODE	551:11	551:11	8	(
ARGUMENT	551:12	551:12	8	w
FIELD	551:12	551:12	9	w
LEAF_NODE	551:12	551:12	10	w
LEAF_NODE	551:13	551:13	8	)
LEAF_NODE	551:14	551:14	6	;
LEAF_NODE	552:1	552:1	3	return
LEAF_NODE	552:8	552:8	3	(
LEAF_NODE	552:9	552:9	3	status
LEAF_NODE	552:15	552:15	3	)
LEAF_NODE	552:16	552:16	3	;
LEAF_NODE	553:0	553:0	2	}
FUNCTION_DEF	560:0	567:0	1	
RETURN_TYPE	560:0	560:7	2	static int
LEAF_NODE	560:0	560:0	3	static
TYPE_NAME	560:7	560:7	3	int
LEAF_NODE	560:7	560:7	4	int
FUNCTION_NAME	561:0	561:0	2	TIFFSetupShortPair
LEAF_NODE	561:0	561:0	3	TIFFSetupShortPair
PARAMETER_LIST	561:18	561:59	2	( TIFF * tif , ttag_t tag , TIFFDirEntry * dir )
LEAF_NODE	561:18	561:18	3	(
PARAMETER_DECL	561:19	561:25	3	TIFF * tif
TYPE	561:19	561:23	4	TIFF *
TYPE_NAME	561:19	561:19	5	TIFF
LEAF_NODE	561:19	561:19	6	TIFF
POINTER	561:23	561:23	5	*
LEAF_NODE	561:23	561:23	6	*
NAME	561:25	561:25	4	tif
LEAF_NODE	561:25	561:25	5	tif
LEAF_NODE	561:28	561:28	3	,
PARAMETER_DECL	561:30	561:37	3	ttag_t tag
TYPE	561:30	561:30	4	ttag_t
TYPE_NAME	561:30	561:30	5	ttag_t
LEAF_NODE	561:30	561:30	6	ttag_t
NAME	561:37	561:37	4	tag
LEAF_NODE	561:37	561:37	5	tag
LEAF_NODE	561:40	561:40	3	,
PARAMETER_DECL	561:42	561:56	3	TIFFDirEntry * dir
TYPE	561:42	561:54	4	TIFFDirEntry *
TYPE_NAME	561:42	561:42	5	TIFFDirEntry
LEAF_NODE	561:42	561:42	6	TIFFDirEntry
POINTER	561:54	561:54	5	*
LEAF_NODE	561:54	561:54	6	*
NAME	561:56	561:56	4	dir
LEAF_NODE	561:56	561:56	5	dir
LEAF_NODE	561:59	561:59	3	)
LEAF_NODE	562:0	562:0	2	{
STATEMENTS	563:1	566:1	2	
SIMPLE_DECL	563:1	563:12	3	uint16 [ 2 ] v ;
VAR_DECL	563:1	563:8	4	uint16 [ 2 ] v
TYPE	563:1	563:9	5	uint16 [ 2 ]
TYPE_NAME	563:1	563:1	6	uint16
LEAF_NODE	563:1	563:1	7	uint16
TYPE_SUFFIX	563:9	563:11	6	[ 2 ]
LEAF_NODE	563:9	563:9	7	[
FIELD	563:10	563:10	7	2
LEAF_NODE	563:10	563:10	8	2
LEAF_NODE	563:11	563:11	7	]
NAME	563:8	563:8	5	v
LEAF_NODE	563:8	563:8	6	v
LEAF_NODE	563:12	563:12	4	;
EXPR_STATEMENT	565:1	565:37	3	TIFFGetField ( tif , tag , & v [ 0 ] , & v [ 1 ] ) ;
EXPR	565:1	565:1	4	TIFFGetField ( tif , tag , & v [ 0 ] , & v [ 1 ] )
FUNCTION_CALL	565:1	565:36	5	TIFFGetField ( tif , tag , & v [ 0 ] , & v [ 1 ] )
CALLEE	565:1	565:1	6	TIFFGetField
LEAF_NODE	565:1	565:1	7	TIFFGetField
LEAF_NODE	565:13	565:13	6	(
ARGUMENT	565:14	565:14	6	tif
FIELD	565:14	565:14	7	tif
LEAF_NODE	565:14	565:14	8	tif
LEAF_NODE	565:17	565:17	6	,
ARGUMENT	565:19	565:19	6	tag
FIELD	565:19	565:19	7	tag
LEAF_NODE	565:19	565:19	8	tag
LEAF_NODE	565:22	565:22	6	,
ARGUMENT	565:24	565:24	6	& v [ 0 ]
UNARY_EXPR	565:24	565:25	7	& v [ 0 ]
UNARY_OPERATOR	565:24	565:24	8	&
LEAF_NODE	565:24	565:24	9	&
FIELD	565:25	565:28	8	v [ 0 ]
LEAF_NODE	565:25	565:25	9	v
LEAF_NODE	565:26	565:26	9	[
EXPR	565:27	565:27	9	0
FIELD	565:27	565:27	10	0
LEAF_NODE	565:27	565:27	11	0
LEAF_NODE	565:28	565:28	9	]
LEAF_NODE	565:29	565:29	6	,
ARGUMENT	565:31	565:31	6	& v [ 1 ]
UNARY_EXPR	565:31	565:32	7	& v [ 1 ]
UNARY_OPERATOR	565:31	565:31	8	&
LEAF_NODE	565:31	565:31	9	&
FIELD	565:32	565:35	8	v [ 1 ]
LEAF_NODE	565:32	565:32	9	v
LEAF_NODE	565:33	565:33	9	[
EXPR	565:34	565:34	9	1
FIELD	565:34	565:34	10	1
LEAF_NODE	565:34	565:34	11	1
LEAF_NODE	565:35	565:35	9	]
LEAF_NODE	565:36	565:36	6	)
LEAF_NODE	565:37	565:37	4	;
JUMP_STATEMENT	566:1	566:62	3	return ( TIFFWriteShortArray ( tif , TIFF_SHORT , tag , dir , 2 , v ) ) ;
KEYWORD	566:1	566:1	4	return
LEAF_NODE	566:1	566:1	5	return
DESTINATION	566:8	566:8	4	( TIFFWriteShortArray ( tif , TIFF_SHORT , tag , dir , 2 , v ) )
EXPR	566:8	566:61	5	( TIFFWriteShortArray ( tif , TIFF_SHORT , tag , dir , 2 , v ) )
LEAF_NODE	566:8	566:8	6	(
FUNCTION_CALL	566:9	566:60	6	TIFFWriteShortArray ( tif , TIFF_SHORT , tag , dir , 2 , v )
CALLEE	566:9	566:9	7	TIFFWriteShortArray
LEAF_NODE	566:9	566:9	8	TIFFWriteShortArray
LEAF_NODE	566:28	566:28	7	(
ARGUMENT	566:29	566:29	7	tif
FIELD	566:29	566:29	8	tif
LEAF_NODE	566:29	566:29	9	tif
LEAF_NODE	566:32	566:32	7	,
ARGUMENT	566:34	566:34	7	TIFF_SHORT
FIELD	566:34	566:34	8	TIFF_SHORT
LEAF_NODE	566:34	566:34	9	TIFF_SHORT
LEAF_NODE	566:44	566:44	7	,
ARGUMENT	566:46	566:46	7	tag
FIELD	566:46	566:46	8	tag
LEAF_NODE	566:46	566:46	9	tag
LEAF_NODE	566:49	566:49	7	,
ARGUMENT	566:51	566:51	7	dir
FIELD	566:51	566:51	8	dir
LEAF_NODE	566:51	566:51	9	dir
LEAF_NODE	566:54	566:54	7	,
ARGUMENT	566:56	566:56	7	2
FIELD	566:56	566:56	8	2
LEAF_NODE	566:56	566:56	9	2
LEAF_NODE	566:57	566:57	7	,
ARGUMENT	566:59	566:59	7	v
FIELD	566:59	566:59	8	v
LEAF_NODE	566:59	566:59	9	v
LEAF_NODE	566:60	566:60	7	)
LEAF_NODE	566:61	566:61	6	)
LEAF_NODE	566:62	566:62	4	;
LEAF_NODE	567:0	567:0	2	}
FUNCTION_DEF	574:0	591:0	1	
RETURN_TYPE	574:0	574:7	2	static int
LEAF_NODE	574:0	574:0	3	static
TYPE_NAME	574:7	574:7	3	int
LEAF_NODE	574:7	574:7	4	int
FUNCTION_NAME	575:0	575:0	2	TIFFWriteShortTable
LEAF_NODE	575:0	575:0	3	TIFFWriteShortTable
PARAMETER_LIST	575:19	576:59	2	( TIFF * tif , ttag_t tag , TIFFDirEntry * dir , uint32 n , uint16 * * table )
LEAF_NODE	575:19	575:19	3	(
PARAMETER_DECL	575:20	575:26	3	TIFF * tif
TYPE	575:20	575:24	4	TIFF *
TYPE_NAME	575:20	575:20	5	TIFF
LEAF_NODE	575:20	575:20	6	TIFF
POINTER	575:24	575:24	5	*
LEAF_NODE	575:24	575:24	6	*
NAME	575:26	575:26	4	tif
LEAF_NODE	575:26	575:26	5	tif
LEAF_NODE	575:29	575:29	3	,
PARAMETER_DECL	576:4	576:11	3	ttag_t tag
TYPE	576:4	576:4	4	ttag_t
TYPE_NAME	576:4	576:4	5	ttag_t
LEAF_NODE	576:4	576:4	6	ttag_t
NAME	576:11	576:11	4	tag
LEAF_NODE	576:11	576:11	5	tag
LEAF_NODE	576:14	576:14	3	,
PARAMETER_DECL	576:16	576:30	3	TIFFDirEntry * dir
TYPE	576:16	576:28	4	TIFFDirEntry *
TYPE_NAME	576:16	576:16	5	TIFFDirEntry
LEAF_NODE	576:16	576:16	6	TIFFDirEntry
POINTER	576:28	576:28	5	*
LEAF_NODE	576:28	576:28	6	*
NAME	576:30	576:30	4	dir
LEAF_NODE	576:30	576:30	5	dir
LEAF_NODE	576:33	576:33	3	,
PARAMETER_DECL	576:35	576:42	3	uint32 n
TYPE	576:35	576:35	4	uint32
TYPE_NAME	576:35	576:35	5	uint32
LEAF_NODE	576:35	576:35	6	uint32
NAME	576:42	576:42	4	n
LEAF_NODE	576:42	576:42	5	n
LEAF_NODE	576:43	576:43	3	,
PARAMETER_DECL	576:45	576:54	3	uint16 * * table
TYPE	576:45	576:51	4	uint16 * *
TYPE_NAME	576:45	576:45	5	uint16
LEAF_NODE	576:45	576:45	6	uint16
POINTER	576:51	576:52	5	* *
LEAF_NODE	576:51	576:51	6	*
LEAF_NODE	576:52	576:52	6	*
NAME	576:54	576:54	4	table
LEAF_NODE	576:54	576:54	5	table
LEAF_NODE	576:59	576:59	3	)
LEAF_NODE	577:0	577:0	2	{
STATEMENTS	578:1	590:1	2	
SIMPLE_DECL	578:1	578:14	3	uint32 i , uint32 off ;
INIT_DECL_LIST	578:1	578:1	4	uint32 i , uint32 off
VAR_DECL	578:1	578:8	5	uint32 i
TYPE	578:1	578:1	6	uint32
TYPE_NAME	578:1	578:1	7	uint32
LEAF_NODE	578:1	578:1	8	uint32
NAME	578:8	578:8	6	i
LEAF_NODE	578:8	578:8	7	i
LEAF_NODE	578:9	578:9	5	,
VAR_DECL	578:1	578:11	5	uint32 off
TYPE	578:1	578:1	6	uint32
TYPE_NAME	578:1	578:1	7	uint32
LEAF_NODE	578:1	578:1	8	uint32
NAME	578:11	578:11	6	off
LEAF_NODE	578:11	578:11	7	off
LEAF_NODE	578:14	578:14	4	;
EXPR_STATEMENT	580:1	580:20	3	dir -> tdir_tag = tag ;
EXPR	580:1	580:1	4	dir -> tdir_tag = tag
ASSIGN	580:1	580:17	5	dir -> tdir_tag = tag
LVAL	580:1	580:1	6	dir -> tdir_tag
FIELD	580:1	580:6	7	dir -> tdir_tag
LEAF_NODE	580:1	580:1	8	dir
LEAF_NODE	580:4	580:4	8	->
LEAF_NODE	580:6	580:6	8	tdir_tag
ASSIGN_OP	580:15	580:15	6	=
LEAF_NODE	580:15	580:15	7	=
RVAL	580:17	580:17	6	tag
FIELD	580:17	580:17	7	tag
LEAF_NODE	580:17	580:17	8	tag
LEAF_NODE	580:20	580:20	4	;
EXPR_STATEMENT	581:1	581:36	3	dir -> tdir_type = ( short ) TIFF_SHORT ;
EXPR	581:1	581:1	4	dir -> tdir_type = ( short ) TIFF_SHORT
ASSIGN	581:1	581:18	5	dir -> tdir_type = ( short ) TIFF_SHORT
LVAL	581:1	581:1	6	dir -> tdir_type
FIELD	581:1	581:6	7	dir -> tdir_type
LEAF_NODE	581:1	581:1	8	dir
LEAF_NODE	581:4	581:4	8	->
LEAF_NODE	581:6	581:6	8	tdir_type
ASSIGN_OP	581:16	581:16	6	=
LEAF_NODE	581:16	581:16	7	=
RVAL	581:18	581:26	6	( short ) TIFF_SHORT
LEAF_NODE	581:18	581:18	7	(
TYPE_NAME	581:19	581:19	7	short
LEAF_NODE	581:19	581:19	8	short
LEAF_NODE	581:24	581:24	7	)
FIELD	581:26	581:26	7	TIFF_SHORT
LEAF_NODE	581:26	581:26	8	TIFF_SHORT
LEAF_NODE	581:36	581:36	4	;
EXPR_STATEMENT	583:1	583:63	3	dir -> tdir_count = ( uint32 ) ( 1L << tif -> tif_dir . td_bitspersample ) ;
EXPR	583:1	583:1	4	dir -> tdir_count = ( uint32 ) ( 1L << tif -> tif_dir . td_bitspersample )
ASSIGN	583:1	583:19	5	dir -> tdir_count = ( uint32 ) ( 1L << tif -> tif_dir . td_bitspersample )
LVAL	583:1	583:1	6	dir -> tdir_count
FIELD	583:1	583:6	7	dir -> tdir_count
LEAF_NODE	583:1	583:1	8	dir
LEAF_NODE	583:4	583:4	8	->
LEAF_NODE	583:6	583:6	8	tdir_count
ASSIGN_OP	583:17	583:17	6	=
LEAF_NODE	583:17	583:17	7	=
RVAL	583:19	583:62	6	( uint32 ) ( 1L << tif -> tif_dir . td_bitspersample )
LEAF_NODE	583:19	583:19	7	(
TYPE_NAME	583:20	583:20	7	uint32
LEAF_NODE	583:20	583:20	8	uint32
LEAF_NODE	583:26	583:26	7	)
LEAF_NODE	583:28	583:28	7	(
FIELD	583:29	583:29	7	1L
LEAF_NODE	583:29	583:29	8	1L
LEAF_NODE	583:31	583:31	7	<<
FIELD	583:33	583:46	7	tif -> tif_dir . td_bitspersample
LEAF_NODE	583:33	583:33	8	tif
LEAF_NODE	583:36	583:36	8	->
LEAF_NODE	583:38	583:38	8	tif_dir
LEAF_NODE	583:45	583:45	8	.
LEAF_NODE	583:46	583:46	8	td_bitspersample
LEAF_NODE	583:62	583:62	7	)
LEAF_NODE	583:63	583:63	4	;
EXPR_STATEMENT	584:1	584:23	3	off = tif -> tif_dataoff ;
EXPR	584:1	584:1	4	off = tif -> tif_dataoff
ASSIGN	584:1	584:7	5	off = tif -> tif_dataoff
LVAL	584:1	584:1	6	off
FIELD	584:1	584:1	7	off
LEAF_NODE	584:1	584:1	8	off
ASSIGN_OP	584:5	584:5	6	=
LEAF_NODE	584:5	584:5	7	=
RVAL	584:7	584:7	6	tif -> tif_dataoff
FIELD	584:7	584:12	7	tif -> tif_dataoff
LEAF_NODE	584:7	584:7	8	tif
LEAF_NODE	584:10	584:10	8	->
LEAF_NODE	584:12	584:12	8	tif_dataoff
LEAF_NODE	584:23	584:23	4	;
ITERATION	585:1	586:2	3	
KEYWORD	585:1	585:1	4	for
LEAF_NODE	585:1	585:1	5	for
LEAF_NODE	585:5	585:5	4	(
FOR_INIT	585:6	585:11	4	i = 0 ;
EXPR	585:6	585:6	5	i = 0
ASSIGN	585:6	585:10	6	i = 0
LVAL	585:6	585:6	7	i
FIELD	585:6	585:6	8	i
LEAF_NODE	585:6	585:6	9	i
ASSIGN_OP	585:8	585:8	7	=
LEAF_NODE	585:8	585:8	8	=
RVAL	585:10	585:10	7	0
FIELD	585:10	585:10	8	0
LEAF_NODE	585:10	585:10	9	0
LEAF_NODE	585:11	585:11	5	;
CONDITION	585:13	585:13	4	i < n
EXPR	585:13	585:17	5	i < n
FIELD	585:13	585:13	6	i
LEAF_NODE	585:13	585:13	7	i
REL_OPERATOR	585:15	585:15	6	<
LEAF_NODE	585:15	585:15	7	<
FIELD	585:17	585:17	6	n
LEAF_NODE	585:17	585:17	7	n
LEAF_NODE	585:18	585:18	4	;
FOR_EXPR	585:20	585:20	4	i ++
EXPR	585:20	585:20	5	i ++
FIELD	585:20	585:21	6	i ++
LEAF_NODE	585:20	585:20	7	i
LEAF_NODE	585:21	585:21	7	++
LEAF_NODE	585:23	585:23	4	)
STATEMENTS	586:2	586:2	4	
SELECTION	586:2	587:3	5	
KEYWORD	586:2	586:2	6	if
LEAF_NODE	586:2	586:2	7	if
LEAF_NODE	586:5	586:5	6	(
CONDITION	586:6	586:6	6	! TIFFWriteData ( tif , dir , ( char * ) table [ i ] )
EXPR	586:6	586:6	7	! TIFFWriteData ( tif , dir , ( char * ) table [ i ] )
UNARY_EXPR	586:6	586:7	8	! TIFFWriteData ( tif , dir , ( char * ) table [ i ] )
UNARY_OPERATOR	586:6	586:6	9	!
LEAF_NODE	586:6	586:6	10	!
FUNCTION_CALL	586:7	586:47	9	TIFFWriteData ( tif , dir , ( char * ) table [ i ] )
CALLEE	586:7	586:7	10	TIFFWriteData
LEAF_NODE	586:7	586:7	11	TIFFWriteData
LEAF_NODE	586:20	586:20	10	(
ARGUMENT	586:21	586:21	10	tif
FIELD	586:21	586:21	11	tif
LEAF_NODE	586:21	586:21	12	tif
LEAF_NODE	586:24	586:24	10	,
ARGUMENT	586:26	586:26	10	dir
FIELD	586:26	586:26	11	dir
LEAF_NODE	586:26	586:26	12	dir
LEAF_NODE	586:29	586:29	10	,
ARGUMENT	586:31	586:39	10	( char * ) table [ i ]
LEAF_NODE	586:31	586:31	11	(
TYPE_NAME	586:32	586:32	11	char
LEAF_NODE	586:32	586:32	12	char
LEAF_NODE	586:37	586:37	11	*
LEAF_NODE	586:38	586:38	11	)
FIELD	586:39	586:46	11	table [ i ]
LEAF_NODE	586:39	586:39	12	table
LEAF_NODE	586:44	586:44	12	[
EXPR	586:45	586:45	12	i
FIELD	586:45	586:45	13	i
LEAF_NODE	586:45	586:45	14	i
LEAF_NODE	586:46	586:46	12	]
LEAF_NODE	586:47	586:47	10	)
LEAF_NODE	586:48	586:48	6	)
STATEMENTS	587:3	587:3	6	
JUMP_STATEMENT	587:3	587:13	7	return ( 0 ) ;
KEYWORD	587:3	587:3	8	return
LEAF_NODE	587:3	587:3	9	return
DESTINATION	587:10	587:10	8	( 0 )
EXPR	587:10	587:12	9	( 0 )
LEAF_NODE	587:10	587:10	10	(
FIELD	587:11	587:11	10	0
LEAF_NODE	587:11	587:11	11	0
LEAF_NODE	587:12	587:12	10	)
LEAF_NODE	587:13	587:13	8	;
EXPR_STATEMENT	588:1	588:21	3	dir -> tdir_count *= n ;
EXPR	588:1	588:1	4	dir -> tdir_count *= n
ASSIGN	588:1	588:20	5	dir -> tdir_count *= n
LVAL	588:1	588:1	6	dir -> tdir_count
FIELD	588:1	588:6	7	dir -> tdir_count
LEAF_NODE	588:1	588:1	8	dir
LEAF_NODE	588:4	588:4	8	->
LEAF_NODE	588:6	588:6	8	tdir_count
ASSIGN_OP	588:17	588:17	6	*=
LEAF_NODE	588:17	588:17	7	*=
RVAL	588:20	588:20	6	n
FIELD	588:20	588:20	7	n
LEAF_NODE	588:20	588:20	8	n
LEAF_NODE	588:21	588:21	4	;
EXPR_STATEMENT	589:1	589:23	3	dir -> tdir_offset = off ;
EXPR	589:1	589:1	4	dir -> tdir_offset = off
ASSIGN	589:1	589:20	5	dir -> tdir_offset = off
LVAL	589:1	589:1	6	dir -> tdir_offset
FIELD	589:1	589:6	7	dir -> tdir_offset
LEAF_NODE	589:1	589:1	8	dir
LEAF_NODE	589:4	589:4	8	->
LEAF_NODE	589:6	589:6	8	tdir_offset
ASSIGN_OP	589:18	589:18	6	=
LEAF_NODE	589:18	589:18	7	=
RVAL	589:20	589:20	6	off
FIELD	589:20	589:20	7	off
LEAF_NODE	589:20	589:20	8	off
LEAF_NODE	589:23	589:23	4	;
JUMP_STATEMENT	590:1	590:11	3	return ( 1 ) ;
KEYWORD	590:1	590:1	4	return
LEAF_NODE	590:1	590:1	5	return
DESTINATION	590:8	590:8	4	( 1 )
EXPR	590:8	590:10	5	( 1 )
LEAF_NODE	590:8	590:8	6	(
FIELD	590:9	590:9	6	1
LEAF_NODE	590:9	590:9	7	1
LEAF_NODE	590:10	590:10	6	)
LEAF_NODE	590:11	590:11	4	;
LEAF_NODE	591:0	591:0	2	}
FUNCTION_DEF	596:0	605:0	1	
RETURN_TYPE	596:0	596:7	2	static int
LEAF_NODE	596:0	596:0	3	static
TYPE_NAME	596:7	596:7	3	int
LEAF_NODE	596:7	596:7	4	int
FUNCTION_NAME	597:0	597:0	2	TIFFWriteByteArray
LEAF_NODE	597:0	597:0	3	TIFFWriteByteArray
PARAMETER_LIST	597:18	597:57	2	( TIFF * tif , TIFFDirEntry * dir , char * cp )
LEAF_NODE	597:18	597:18	3	(
PARAMETER_DECL	597:19	597:25	3	TIFF * tif
TYPE	597:19	597:23	4	TIFF *
TYPE_NAME	597:19	597:19	5	TIFF
LEAF_NODE	597:19	597:19	6	TIFF
POINTER	597:23	597:23	5	*
LEAF_NODE	597:23	597:23	6	*
NAME	597:25	597:25	4	tif
LEAF_NODE	597:25	597:25	5	tif
LEAF_NODE	597:28	597:28	3	,
PARAMETER_DECL	597:30	597:44	3	TIFFDirEntry * dir
TYPE	597:30	597:42	4	TIFFDirEntry *
TYPE_NAME	597:30	597:30	5	TIFFDirEntry
LEAF_NODE	597:30	597:30	6	TIFFDirEntry
POINTER	597:42	597:42	5	*
LEAF_NODE	597:42	597:42	6	*
NAME	597:44	597:44	4	dir
LEAF_NODE	597:44	597:44	5	dir
LEAF_NODE	597:47	597:47	3	,
PARAMETER_DECL	597:49	597:55	3	char * cp
TYPE	597:49	597:53	4	char *
TYPE_NAME	597:49	597:49	5	char
LEAF_NODE	597:49	597:49	6	char
POINTER	597:53	597:53	5	*
LEAF_NODE	597:53	597:53	6	*
NAME	597:55	597:55	4	cp
LEAF_NODE	597:55	597:55	5	cp
LEAF_NODE	597:57	597:57	3	)
LEAF_NODE	598:0	598:0	2	{
STATEMENTS	599:1	604:1	2	
SELECTION	599:1	599:26	3	
KEYWORD	599:1	599:1	4	if
LEAF_NODE	599:1	599:1	5	if
LEAF_NODE	599:4	599:4	4	(
CONDITION	599:5	599:5	4	dir -> tdir_count > 4
EXPR	599:5	599:23	5	dir -> tdir_count > 4
FIELD	599:5	599:10	6	dir -> tdir_count
LEAF_NODE	599:5	599:5	7	dir
LEAF_NODE	599:8	599:8	7	->
LEAF_NODE	599:10	599:10	7	tdir_count
REL_OPERATOR	599:21	599:21	6	>
LEAF_NODE	599:21	599:21	7	>
FIELD	599:23	599:23	6	4
LEAF_NODE	599:23	599:23	7	4
LEAF_NODE	599:24	599:24	4	)
STATEMENTS	599:26	602:1	4	
LEAF_NODE	599:26	599:26	5	{
STATEMENTS	600:2	600:2	5	
SELECTION	600:2	601:3	6	
KEYWORD	600:2	600:2	7	if
LEAF_NODE	600:2	600:2	8	if
LEAF_NODE	600:5	600:5	7	(
CONDITION	600:6	600:6	7	! TIFFWriteData ( tif , dir , cp )
EXPR	600:6	600:6	8	! TIFFWriteData ( tif , dir , cp )
UNARY_EXPR	600:6	600:7	9	! TIFFWriteData ( tif , dir , cp )
UNARY_OPERATOR	600:6	600:6	10	!
LEAF_NODE	600:6	600:6	11	!
FUNCTION_CALL	600:7	600:33	10	TIFFWriteData ( tif , dir , cp )
CALLEE	600:7	600:7	11	TIFFWriteData
LEAF_NODE	600:7	600:7	12	TIFFWriteData
LEAF_NODE	600:20	600:20	11	(
ARGUMENT	600:21	600:21	11	tif
FIELD	600:21	600:21	12	tif
LEAF_NODE	600:21	600:21	13	tif
LEAF_NODE	600:24	600:24	11	,
ARGUMENT	600:26	600:26	11	dir
FIELD	600:26	600:26	12	dir
LEAF_NODE	600:26	600:26	13	dir
LEAF_NODE	600:29	600:29	11	,
ARGUMENT	600:31	600:31	11	cp
FIELD	600:31	600:31	12	cp
LEAF_NODE	600:31	600:31	13	cp
LEAF_NODE	600:33	600:33	11	)
LEAF_NODE	600:34	600:34	7	)
STATEMENTS	601:3	601:3	7	
JUMP_STATEMENT	601:3	601:13	8	return ( 0 ) ;
KEYWORD	601:3	601:3	9	return
LEAF_NODE	601:3	601:3	10	return
DESTINATION	601:10	601:10	9	( 0 )
EXPR	601:10	601:12	10	( 0 )
LEAF_NODE	601:10	601:10	11	(
FIELD	601:11	601:11	11	0
LEAF_NODE	601:11	601:11	12	0
LEAF_NODE	601:12	601:12	11	)
LEAF_NODE	601:13	601:13	9	;
LEAF_NODE	602:1	602:1	5	}
SELECTION	602:3	603:2	3	
KEYWORD	602:3	602:3	4	else
LEAF_NODE	602:3	602:3	5	else
STATEMENTS	603:2	603:2	4	
EXPR_STATEMENT	603:2	603:53	5	_TIFFmemcpy ( & dir -> tdir_offset , cp , dir -> tdir_count ) ;
EXPR	603:2	603:2	6	_TIFFmemcpy ( & dir -> tdir_offset , cp , dir -> tdir_count )
FUNCTION_CALL	603:2	603:52	7	_TIFFmemcpy ( & dir -> tdir_offset , cp , dir -> tdir_count )
CALLEE	603:2	603:2	8	_TIFFmemcpy
LEAF_NODE	603:2	603:2	9	_TIFFmemcpy
LEAF_NODE	603:13	603:13	8	(
ARGUMENT	603:14	603:14	8	& dir -> tdir_offset
UNARY_EXPR	603:14	603:15	9	& dir -> tdir_offset
UNARY_OPERATOR	603:14	603:14	10	&
LEAF_NODE	603:14	603:14	11	&
FIELD	603:15	603:20	10	dir -> tdir_offset
LEAF_NODE	603:15	603:15	11	dir
LEAF_NODE	603:18	603:18	11	->
LEAF_NODE	603:20	603:20	11	tdir_offset
LEAF_NODE	603:31	603:31	8	,
ARGUMENT	603:33	603:33	8	cp
FIELD	603:33	603:33	9	cp
LEAF_NODE	603:33	603:33	10	cp
LEAF_NODE	603:35	603:35	8	,
ARGUMENT	603:37	603:37	8	dir -> tdir_count
FIELD	603:37	603:42	9	dir -> tdir_count
LEAF_NODE	603:37	603:37	10	dir
LEAF_NODE	603:40	603:40	10	->
LEAF_NODE	603:42	603:42	10	tdir_count
LEAF_NODE	603:52	603:52	8	)
LEAF_NODE	603:53	603:53	6	;
JUMP_STATEMENT	604:1	604:11	3	return ( 1 ) ;
KEYWORD	604:1	604:1	4	return
LEAF_NODE	604:1	604:1	5	return
DESTINATION	604:8	604:8	4	( 1 )
EXPR	604:8	604:10	5	( 1 )
LEAF_NODE	604:8	604:8	6	(
FIELD	604:9	604:9	6	1
LEAF_NODE	604:9	604:9	7	1
LEAF_NODE	604:10	604:10	6	)
LEAF_NODE	604:11	604:11	4	;
LEAF_NODE	605:0	605:0	2	}
FUNCTION_DEF	611:0	631:0	1	
RETURN_TYPE	611:0	611:7	2	static int
LEAF_NODE	611:0	611:0	3	static
TYPE_NAME	611:7	611:7	3	int
LEAF_NODE	611:7	611:7	4	int
FUNCTION_NAME	612:0	612:0	2	TIFFWriteShortArray
LEAF_NODE	612:0	612:0	3	TIFFWriteShortArray
PARAMETER_LIST	612:19	613:73	2	( TIFF * tif , TIFFDataType type , ttag_t tag , TIFFDirEntry * dir , uint32 n , uint16 * v )
LEAF_NODE	612:19	612:19	3	(
PARAMETER_DECL	612:20	612:26	3	TIFF * tif
TYPE	612:20	612:24	4	TIFF *
TYPE_NAME	612:20	612:20	5	TIFF
LEAF_NODE	612:20	612:20	6	TIFF
POINTER	612:24	612:24	5	*
LEAF_NODE	612:24	612:24	6	*
NAME	612:26	612:26	4	tif
LEAF_NODE	612:26	612:26	5	tif
LEAF_NODE	612:29	612:29	3	,
PARAMETER_DECL	613:4	613:17	3	TIFFDataType type
TYPE	613:4	613:4	4	TIFFDataType
TYPE_NAME	613:4	613:4	5	TIFFDataType
LEAF_NODE	613:4	613:4	6	TIFFDataType
NAME	613:17	613:17	4	type
LEAF_NODE	613:17	613:17	5	type
LEAF_NODE	613:21	613:21	3	,
PARAMETER_DECL	613:23	613:30	3	ttag_t tag
TYPE	613:23	613:23	4	ttag_t
TYPE_NAME	613:23	613:23	5	ttag_t
LEAF_NODE	613:23	613:23	6	ttag_t
NAME	613:30	613:30	4	tag
LEAF_NODE	613:30	613:30	5	tag
LEAF_NODE	613:33	613:33	3	,
PARAMETER_DECL	613:35	613:49	3	TIFFDirEntry * dir
TYPE	613:35	613:47	4	TIFFDirEntry *
TYPE_NAME	613:35	613:35	5	TIFFDirEntry
LEAF_NODE	613:35	613:35	6	TIFFDirEntry
POINTER	613:47	613:47	5	*
LEAF_NODE	613:47	613:47	6	*
NAME	613:49	613:49	4	dir
LEAF_NODE	613:49	613:49	5	dir
LEAF_NODE	613:52	613:52	3	,
PARAMETER_DECL	613:54	613:61	3	uint32 n
TYPE	613:54	613:54	4	uint32
TYPE_NAME	613:54	613:54	5	uint32
LEAF_NODE	613:54	613:54	6	uint32
NAME	613:61	613:61	4	n
LEAF_NODE	613:61	613:61	5	n
LEAF_NODE	613:62	613:62	3	,
PARAMETER_DECL	613:64	613:72	3	uint16 * v
TYPE	613:64	613:70	4	uint16 *
TYPE_NAME	613:64	613:64	5	uint16
LEAF_NODE	613:64	613:64	6	uint16
POINTER	613:70	613:70	5	*
LEAF_NODE	613:70	613:70	6	*
NAME	613:72	613:72	4	v
LEAF_NODE	613:72	613:72	5	v
LEAF_NODE	613:73	613:73	3	)
LEAF_NODE	614:0	614:0	2	{
STATEMENTS	615:1	629:3	2	
EXPR_STATEMENT	615:1	615:20	3	dir -> tdir_tag = tag ;
EXPR	615:1	615:1	4	dir -> tdir_tag = tag
ASSIGN	615:1	615:17	5	dir -> tdir_tag = tag
LVAL	615:1	615:1	6	dir -> tdir_tag
FIELD	615:1	615:6	7	dir -> tdir_tag
LEAF_NODE	615:1	615:1	8	dir
LEAF_NODE	615:4	615:4	8	->
LEAF_NODE	615:6	615:6	8	tdir_tag
ASSIGN_OP	615:15	615:15	6	=
LEAF_NODE	615:15	615:15	7	=
RVAL	615:17	615:17	6	tag
FIELD	615:17	615:17	7	tag
LEAF_NODE	615:17	615:17	8	tag
LEAF_NODE	615:20	615:20	4	;
EXPR_STATEMENT	616:1	616:30	3	dir -> tdir_type = ( short ) type ;
EXPR	616:1	616:1	4	dir -> tdir_type = ( short ) type
ASSIGN	616:1	616:18	5	dir -> tdir_type = ( short ) type
LVAL	616:1	616:1	6	dir -> tdir_type
FIELD	616:1	616:6	7	dir -> tdir_type
LEAF_NODE	616:1	616:1	8	dir
LEAF_NODE	616:4	616:4	8	->
LEAF_NODE	616:6	616:6	8	tdir_type
ASSIGN_OP	616:16	616:16	6	=
LEAF_NODE	616:16	616:16	7	=
RVAL	616:18	616:26	6	( short ) type
LEAF_NODE	616:18	616:18	7	(
TYPE_NAME	616:19	616:19	7	short
LEAF_NODE	616:19	616:19	8	short
LEAF_NODE	616:24	616:24	7	)
FIELD	616:26	616:26	7	type
LEAF_NODE	616:26	616:26	8	type
LEAF_NODE	616:30	616:30	4	;
EXPR_STATEMENT	617:1	617:20	3	dir -> tdir_count = n ;
EXPR	617:1	617:1	4	dir -> tdir_count = n
ASSIGN	617:1	617:19	5	dir -> tdir_count = n
LVAL	617:1	617:1	6	dir -> tdir_count
FIELD	617:1	617:6	7	dir -> tdir_count
LEAF_NODE	617:1	617:1	8	dir
LEAF_NODE	617:4	617:4	8	->
LEAF_NODE	617:6	617:6	8	tdir_count
ASSIGN_OP	617:17	617:17	6	=
LEAF_NODE	617:17	617:17	7	=
RVAL	617:19	617:19	6	n
FIELD	617:19	617:19	7	n
LEAF_NODE	617:19	617:19	8	n
LEAF_NODE	617:20	617:20	4	;
SELECTION	618:1	618:13	3	
KEYWORD	618:1	618:1	4	if
LEAF_NODE	618:1	618:1	5	if
LEAF_NODE	618:4	618:4	4	(
CONDITION	618:5	618:5	4	n <= 2
EXPR	618:5	618:10	5	n <= 2
FIELD	618:5	618:5	6	n
LEAF_NODE	618:5	618:5	7	n
REL_OPERATOR	618:7	618:7	6	<=
LEAF_NODE	618:7	618:7	7	<=
FIELD	618:10	618:10	6	2
LEAF_NODE	618:10	618:10	7	2
LEAF_NODE	618:11	618:11	4	)
STATEMENTS	618:13	629:1	4	
LEAF_NODE	618:13	618:13	5	{
STATEMENTS	619:2	628:2	5	
SELECTION	619:2	619:52	6	
KEYWORD	619:2	619:2	7	if
LEAF_NODE	619:2	619:2	8	if
LEAF_NODE	619:5	619:5	7	(
CONDITION	619:6	619:6	7	tif -> tif_header . tiff_magic == TIFF_BIGENDIAN
EXPR	619:6	619:36	8	tif -> tif_header . tiff_magic == TIFF_BIGENDIAN
FIELD	619:6	619:22	9	tif -> tif_header . tiff_magic
LEAF_NODE	619:6	619:6	10	tif
LEAF_NODE	619:9	619:9	10	->
LEAF_NODE	619:11	619:11	10	tif_header
LEAF_NODE	619:21	619:21	10	.
LEAF_NODE	619:22	619:22	10	tiff_magic
EQ_OPERATOR	619:33	619:33	9	==
LEAF_NODE	619:33	619:33	10	==
FIELD	619:36	619:36	9	TIFF_BIGENDIAN
LEAF_NODE	619:36	619:36	10	TIFF_BIGENDIAN
LEAF_NODE	619:50	619:50	7	)
STATEMENTS	619:52	623:2	7	
LEAF_NODE	619:52	619:52	8	{
STATEMENTS	620:3	621:3	8	
EXPR_STATEMENT	620:3	620:50	9	dir -> tdir_offset = ( uint32 ) ( ( long ) v [ 0 ] << 16 ) ;
EXPR	620:3	620:3	10	dir -> tdir_offset = ( uint32 ) ( ( long ) v [ 0 ] << 16 )
ASSIGN	620:3	620:22	11	dir -> tdir_offset = ( uint32 ) ( ( long ) v [ 0 ] << 16 )
LVAL	620:3	620:3	12	dir -> tdir_offset
FIELD	620:3	620:8	13	dir -> tdir_offset
LEAF_NODE	620:3	620:3	14	dir
LEAF_NODE	620:6	620:6	14	->
LEAF_NODE	620:8	620:8	14	tdir_offset
ASSIGN_OP	620:20	620:20	12	=
LEAF_NODE	620:20	620:20	13	=
RVAL	620:22	620:49	12	( uint32 ) ( ( long ) v [ 0 ] << 16 )
LEAF_NODE	620:22	620:22	13	(
TYPE_NAME	620:23	620:23	13	uint32
LEAF_NODE	620:23	620:23	14	uint32
LEAF_NODE	620:29	620:29	13	)
LEAF_NODE	620:31	620:31	13	(
LEAF_NODE	620:32	620:32	13	(
TYPE_NAME	620:33	620:33	13	long
LEAF_NODE	620:33	620:33	14	long
LEAF_NODE	620:37	620:37	13	)
FIELD	620:39	620:42	13	v [ 0 ]
LEAF_NODE	620:39	620:39	14	v
LEAF_NODE	620:40	620:40	14	[
EXPR	620:41	620:41	14	0
FIELD	620:41	620:41	15	0
LEAF_NODE	620:41	620:41	16	0
LEAF_NODE	620:42	620:42	14	]
LEAF_NODE	620:44	620:44	13	<<
FIELD	620:47	620:47	13	16
LEAF_NODE	620:47	620:47	14	16
LEAF_NODE	620:49	620:49	13	)
LEAF_NODE	620:50	620:50	10	;
SELECTION	621:3	622:4	9	
KEYWORD	621:3	621:3	10	if
LEAF_NODE	621:3	621:3	11	if
LEAF_NODE	621:6	621:6	10	(
CONDITION	621:7	621:7	10	n == 2
EXPR	621:7	621:12	11	n == 2
FIELD	621:7	621:7	12	n
LEAF_NODE	621:7	621:7	13	n
EQ_OPERATOR	621:9	621:9	12	==
LEAF_NODE	621:9	621:9	13	==
FIELD	621:12	621:12	12	2
LEAF_NODE	621:12	621:12	13	2
LEAF_NODE	621:13	621:13	10	)
STATEMENTS	622:4	622:4	10	
EXPR_STATEMENT	622:4	622:37	11	dir -> tdir_offset |= v [ 1 ] & 0xffff ;
EXPR	622:4	622:4	12	dir -> tdir_offset |= v [ 1 ] & 0xffff
ASSIGN	622:4	622:24	13	dir -> tdir_offset |= v [ 1 ] & 0xffff
LVAL	622:4	622:4	14	dir -> tdir_offset
FIELD	622:4	622:9	15	dir -> tdir_offset
LEAF_NODE	622:4	622:4	16	dir
LEAF_NODE	622:7	622:7	16	->
LEAF_NODE	622:9	622:9	16	tdir_offset
ASSIGN_OP	622:21	622:21	14	|=
LEAF_NODE	622:21	622:21	15	|=
RVAL	622:24	622:31	14	v [ 1 ] & 0xffff
FIELD	622:24	622:27	15	v [ 1 ]
LEAF_NODE	622:24	622:24	16	v
LEAF_NODE	622:25	622:25	16	[
EXPR	622:26	622:26	16	1
FIELD	622:26	622:26	17	1
LEAF_NODE	622:26	622:26	18	1
LEAF_NODE	622:27	622:27	16	]
LEAF_NODE	622:29	622:29	15	&
FIELD	622:31	622:31	15	0xffff
LEAF_NODE	622:31	622:31	16	0xffff
LEAF_NODE	622:37	622:37	12	;
LEAF_NODE	623:2	623:2	8	}
SELECTION	623:4	623:9	6	
KEYWORD	623:4	623:4	7	else
LEAF_NODE	623:4	623:4	8	else
STATEMENTS	623:9	627:2	7	
LEAF_NODE	623:9	623:9	8	{
STATEMENTS	624:3	625:3	8	
EXPR_STATEMENT	624:3	624:35	9	dir -> tdir_offset = v [ 0 ] & 0xffff ;
EXPR	624:3	624:3	10	dir -> tdir_offset = v [ 0 ] & 0xffff
ASSIGN	624:3	624:22	11	dir -> tdir_offset = v [ 0 ] & 0xffff
LVAL	624:3	624:3	12	dir -> tdir_offset
FIELD	624:3	624:8	13	dir -> tdir_offset
LEAF_NODE	624:3	624:3	14	dir
LEAF_NODE	624:6	624:6	14	->
LEAF_NODE	624:8	624:8	14	tdir_offset
ASSIGN_OP	624:20	624:20	12	=
LEAF_NODE	624:20	624:20	13	=
RVAL	624:22	624:29	12	v [ 0 ] & 0xffff
FIELD	624:22	624:25	13	v [ 0 ]
LEAF_NODE	624:22	624:22	14	v
LEAF_NODE	624:23	624:23	14	[
EXPR	624:24	624:24	14	0
FIELD	624:24	624:24	15	0
LEAF_NODE	624:24	624:24	16	0
LEAF_NODE	624:25	624:25	14	]
LEAF_NODE	624:27	624:27	13	&
FIELD	624:29	624:29	13	0xffff
LEAF_NODE	624:29	624:29	14	0xffff
LEAF_NODE	624:35	624:35	10	;
SELECTION	625:3	626:4	9	
KEYWORD	625:3	625:3	10	if
LEAF_NODE	625:3	625:3	11	if
LEAF_NODE	625:6	625:6	10	(
CONDITION	625:7	625:7	10	n == 2
EXPR	625:7	625:12	11	n == 2
FIELD	625:7	625:7	12	n
LEAF_NODE	625:7	625:7	13	n
EQ_OPERATOR	625:9	625:9	12	==
LEAF_NODE	625:9	625:9	13	==
FIELD	625:12	625:12	12	2
LEAF_NODE	625:12	625:12	13	2
LEAF_NODE	625:13	625:13	10	)
STATEMENTS	626:4	626:4	10	
EXPR_STATEMENT	626:4	626:41	11	dir -> tdir_offset |= ( long ) v [ 1 ] << 16 ;
EXPR	626:4	626:4	12	dir -> tdir_offset |= ( long ) v [ 1 ] << 16
ASSIGN	626:4	626:24	13	dir -> tdir_offset |= ( long ) v [ 1 ] << 16
LVAL	626:4	626:4	14	dir -> tdir_offset
FIELD	626:4	626:9	15	dir -> tdir_offset
LEAF_NODE	626:4	626:4	16	dir
LEAF_NODE	626:7	626:7	16	->
LEAF_NODE	626:9	626:9	16	tdir_offset
ASSIGN_OP	626:21	626:21	14	|=
LEAF_NODE	626:21	626:21	15	|=
RVAL	626:24	626:39	14	( long ) v [ 1 ] << 16
LEAF_NODE	626:24	626:24	15	(
TYPE_NAME	626:25	626:25	15	long
LEAF_NODE	626:25	626:25	16	long
LEAF_NODE	626:29	626:29	15	)
FIELD	626:31	626:34	15	v [ 1 ]
LEAF_NODE	626:31	626:31	16	v
LEAF_NODE	626:32	626:32	16	[
EXPR	626:33	626:33	16	1
FIELD	626:33	626:33	17	1
LEAF_NODE	626:33	626:33	18	1
LEAF_NODE	626:34	626:34	16	]
LEAF_NODE	626:36	626:36	15	<<
FIELD	626:39	626:39	15	16
LEAF_NODE	626:39	626:39	16	16
LEAF_NODE	626:41	626:41	12	;
LEAF_NODE	627:2	627:2	8	}
JUMP_STATEMENT	628:2	628:12	6	return ( 1 ) ;
KEYWORD	628:2	628:2	7	return
LEAF_NODE	628:2	628:2	8	return
DESTINATION	628:9	628:9	7	( 1 )
EXPR	628:9	628:11	8	( 1 )
LEAF_NODE	628:9	628:9	9	(
FIELD	628:10	628:10	9	1
LEAF_NODE	628:10	628:10	10	1
LEAF_NODE	628:11	628:11	9	)
LEAF_NODE	628:12	628:12	7	;
LEAF_NODE	629:1	629:1	5	}
SELECTION	629:3	630:2	3	
KEYWORD	629:3	629:3	4	else
LEAF_NODE	629:3	629:3	5	else
STATEMENTS	630:2	630:2	4	
JUMP_STATEMENT	630:2	630:45	5	return ( TIFFWriteData ( tif , dir , ( char * ) v ) ) ;
KEYWORD	630:2	630:2	6	return
LEAF_NODE	630:2	630:2	7	return
DESTINATION	630:9	630:9	6	( TIFFWriteData ( tif , dir , ( char * ) v ) )
EXPR	630:9	630:44	7	( TIFFWriteData ( tif , dir , ( char * ) v ) )
LEAF_NODE	630:9	630:9	8	(
FUNCTION_CALL	630:10	630:43	8	TIFFWriteData ( tif , dir , ( char * ) v )
CALLEE	630:10	630:10	9	TIFFWriteData
LEAF_NODE	630:10	630:10	10	TIFFWriteData
LEAF_NODE	630:23	630:23	9	(
ARGUMENT	630:24	630:24	9	tif
FIELD	630:24	630:24	10	tif
LEAF_NODE	630:24	630:24	11	tif
LEAF_NODE	630:27	630:27	9	,
ARGUMENT	630:29	630:29	9	dir
FIELD	630:29	630:29	10	dir
LEAF_NODE	630:29	630:29	11	dir
LEAF_NODE	630:32	630:32	9	,
ARGUMENT	630:34	630:42	9	( char * ) v
LEAF_NODE	630:34	630:34	10	(
TYPE_NAME	630:35	630:35	10	char
LEAF_NODE	630:35	630:35	11	char
LEAF_NODE	630:39	630:39	10	*
LEAF_NODE	630:40	630:40	10	)
FIELD	630:42	630:42	10	v
LEAF_NODE	630:42	630:42	11	v
LEAF_NODE	630:43	630:43	9	)
LEAF_NODE	630:44	630:44	8	)
LEAF_NODE	630:45	630:45	6	;
LEAF_NODE	631:0	631:0	2	}
FUNCTION_DEF	637:0	649:0	1	
RETURN_TYPE	637:0	637:7	2	static int
LEAF_NODE	637:0	637:0	3	static
TYPE_NAME	637:7	637:7	3	int
LEAF_NODE	637:7	637:7	4	int
FUNCTION_NAME	638:0	638:0	2	TIFFWriteLongArray
LEAF_NODE	638:0	638:0	3	TIFFWriteLongArray
PARAMETER_LIST	638:18	639:73	2	( TIFF * tif , TIFFDataType type , ttag_t tag , TIFFDirEntry * dir , uint32 n , uint32 * v )
LEAF_NODE	638:18	638:18	3	(
PARAMETER_DECL	638:19	638:25	3	TIFF * tif
TYPE	638:19	638:23	4	TIFF *
TYPE_NAME	638:19	638:19	5	TIFF
LEAF_NODE	638:19	638:19	6	TIFF
POINTER	638:23	638:23	5	*
LEAF_NODE	638:23	638:23	6	*
NAME	638:25	638:25	4	tif
LEAF_NODE	638:25	638:25	5	tif
LEAF_NODE	638:28	638:28	3	,
PARAMETER_DECL	639:4	639:17	3	TIFFDataType type
TYPE	639:4	639:4	4	TIFFDataType
TYPE_NAME	639:4	639:4	5	TIFFDataType
LEAF_NODE	639:4	639:4	6	TIFFDataType
NAME	639:17	639:17	4	type
LEAF_NODE	639:17	639:17	5	type
LEAF_NODE	639:21	639:21	3	,
PARAMETER_DECL	639:23	639:30	3	ttag_t tag
TYPE	639:23	639:23	4	ttag_t
TYPE_NAME	639:23	639:23	5	ttag_t
LEAF_NODE	639:23	639:23	6	ttag_t
NAME	639:30	639:30	4	tag
LEAF_NODE	639:30	639:30	5	tag
LEAF_NODE	639:33	639:33	3	,
PARAMETER_DECL	639:35	639:49	3	TIFFDirEntry * dir
TYPE	639:35	639:47	4	TIFFDirEntry *
TYPE_NAME	639:35	639:35	5	TIFFDirEntry
LEAF_NODE	639:35	639:35	6	TIFFDirEntry
POINTER	639:47	639:47	5	*
LEAF_NODE	639:47	639:47	6	*
NAME	639:49	639:49	4	dir
LEAF_NODE	639:49	639:49	5	dir
LEAF_NODE	639:52	639:52	3	,
PARAMETER_DECL	639:54	639:61	3	uint32 n
TYPE	639:54	639:54	4	uint32
TYPE_NAME	639:54	639:54	5	uint32
LEAF_NODE	639:54	639:54	6	uint32
NAME	639:61	639:61	4	n
LEAF_NODE	639:61	639:61	5	n
LEAF_NODE	639:62	639:62	3	,
PARAMETER_DECL	639:64	639:72	3	uint32 * v
TYPE	639:64	639:70	4	uint32 *
TYPE_NAME	639:64	639:64	5	uint32
LEAF_NODE	639:64	639:64	6	uint32
POINTER	639:70	639:70	5	*
LEAF_NODE	639:70	639:70	6	*
NAME	639:72	639:72	4	v
LEAF_NODE	639:72	639:72	5	v
LEAF_NODE	639:73	639:73	3	)
LEAF_NODE	640:0	640:0	2	{
STATEMENTS	641:1	647:3	2	
EXPR_STATEMENT	641:1	641:20	3	dir -> tdir_tag = tag ;
EXPR	641:1	641:1	4	dir -> tdir_tag = tag
ASSIGN	641:1	641:17	5	dir -> tdir_tag = tag
LVAL	641:1	641:1	6	dir -> tdir_tag
FIELD	641:1	641:6	7	dir -> tdir_tag
LEAF_NODE	641:1	641:1	8	dir
LEAF_NODE	641:4	641:4	8	->
LEAF_NODE	641:6	641:6	8	tdir_tag
ASSIGN_OP	641:15	641:15	6	=
LEAF_NODE	641:15	641:15	7	=
RVAL	641:17	641:17	6	tag
FIELD	641:17	641:17	7	tag
LEAF_NODE	641:17	641:17	8	tag
LEAF_NODE	641:20	641:20	4	;
EXPR_STATEMENT	642:1	642:30	3	dir -> tdir_type = ( short ) type ;
EXPR	642:1	642:1	4	dir -> tdir_type = ( short ) type
ASSIGN	642:1	642:18	5	dir -> tdir_type = ( short ) type
LVAL	642:1	642:1	6	dir -> tdir_type
FIELD	642:1	642:6	7	dir -> tdir_type
LEAF_NODE	642:1	642:1	8	dir
LEAF_NODE	642:4	642:4	8	->
LEAF_NODE	642:6	642:6	8	tdir_type
ASSIGN_OP	642:16	642:16	6	=
LEAF_NODE	642:16	642:16	7	=
RVAL	642:18	642:26	6	( short ) type
LEAF_NODE	642:18	642:18	7	(
TYPE_NAME	642:19	642:19	7	short
LEAF_NODE	642:19	642:19	8	short
LEAF_NODE	642:24	642:24	7	)
FIELD	642:26	642:26	7	type
LEAF_NODE	642:26	642:26	8	type
LEAF_NODE	642:30	642:30	4	;
EXPR_STATEMENT	643:1	643:20	3	dir -> tdir_count = n ;
EXPR	643:1	643:1	4	dir -> tdir_count = n
ASSIGN	643:1	643:19	5	dir -> tdir_count = n
LVAL	643:1	643:1	6	dir -> tdir_count
FIELD	643:1	643:6	7	dir -> tdir_count
LEAF_NODE	643:1	643:1	8	dir
LEAF_NODE	643:4	643:4	8	->
LEAF_NODE	643:6	643:6	8	tdir_count
ASSIGN_OP	643:17	643:17	6	=
LEAF_NODE	643:17	643:17	7	=
RVAL	643:19	643:19	6	n
FIELD	643:19	643:19	7	n
LEAF_NODE	643:19	643:19	8	n
LEAF_NODE	643:20	643:20	4	;
SELECTION	644:1	644:13	3	
KEYWORD	644:1	644:1	4	if
LEAF_NODE	644:1	644:1	5	if
LEAF_NODE	644:4	644:4	4	(
CONDITION	644:5	644:5	4	n == 1
EXPR	644:5	644:10	5	n == 1
FIELD	644:5	644:5	6	n
LEAF_NODE	644:5	644:5	7	n
EQ_OPERATOR	644:7	644:7	6	==
LEAF_NODE	644:7	644:7	7	==
FIELD	644:10	644:10	6	1
LEAF_NODE	644:10	644:10	7	1
LEAF_NODE	644:11	644:11	4	)
STATEMENTS	644:13	647:1	4	
LEAF_NODE	644:13	644:13	5	{
STATEMENTS	645:2	646:2	5	
EXPR_STATEMENT	645:2	645:25	6	dir -> tdir_offset = v [ 0 ] ;
EXPR	645:2	645:2	7	dir -> tdir_offset = v [ 0 ]
ASSIGN	645:2	645:21	8	dir -> tdir_offset = v [ 0 ]
LVAL	645:2	645:2	9	dir -> tdir_offset
FIELD	645:2	645:7	10	dir -> tdir_offset
LEAF_NODE	645:2	645:2	11	dir
LEAF_NODE	645:5	645:5	11	->
LEAF_NODE	645:7	645:7	11	tdir_offset
ASSIGN_OP	645:19	645:19	9	=
LEAF_NODE	645:19	645:19	10	=
RVAL	645:21	645:21	9	v [ 0 ]
FIELD	645:21	645:24	10	v [ 0 ]
LEAF_NODE	645:21	645:21	11	v
LEAF_NODE	645:22	645:22	11	[
EXPR	645:23	645:23	11	0
FIELD	645:23	645:23	12	0
LEAF_NODE	645:23	645:23	13	0
LEAF_NODE	645:24	645:24	11	]
LEAF_NODE	645:25	645:25	7	;
JUMP_STATEMENT	646:2	646:12	6	return ( 1 ) ;
KEYWORD	646:2	646:2	7	return
LEAF_NODE	646:2	646:2	8	return
DESTINATION	646:9	646:9	7	( 1 )
EXPR	646:9	646:11	8	( 1 )
LEAF_NODE	646:9	646:9	9	(
FIELD	646:10	646:10	9	1
LEAF_NODE	646:10	646:10	10	1
LEAF_NODE	646:11	646:11	9	)
LEAF_NODE	646:12	646:12	7	;
LEAF_NODE	647:1	647:1	5	}
SELECTION	647:3	648:2	3	
KEYWORD	647:3	647:3	4	else
LEAF_NODE	647:3	647:3	5	else
STATEMENTS	648:2	648:2	4	
JUMP_STATEMENT	648:2	648:45	5	return ( TIFFWriteData ( tif , dir , ( char * ) v ) ) ;
KEYWORD	648:2	648:2	6	return
LEAF_NODE	648:2	648:2	7	return
DESTINATION	648:9	648:9	6	( TIFFWriteData ( tif , dir , ( char * ) v ) )
EXPR	648:9	648:44	7	( TIFFWriteData ( tif , dir , ( char * ) v ) )
LEAF_NODE	648:9	648:9	8	(
FUNCTION_CALL	648:10	648:43	8	TIFFWriteData ( tif , dir , ( char * ) v )
CALLEE	648:10	648:10	9	TIFFWriteData
LEAF_NODE	648:10	648:10	10	TIFFWriteData
LEAF_NODE	648:23	648:23	9	(
ARGUMENT	648:24	648:24	9	tif
FIELD	648:24	648:24	10	tif
LEAF_NODE	648:24	648:24	11	tif
LEAF_NODE	648:27	648:27	9	,
ARGUMENT	648:29	648:29	9	dir
FIELD	648:29	648:29	10	dir
LEAF_NODE	648:29	648:29	11	dir
LEAF_NODE	648:32	648:32	9	,
ARGUMENT	648:34	648:42	9	( char * ) v
LEAF_NODE	648:34	648:34	10	(
TYPE_NAME	648:35	648:35	10	char
LEAF_NODE	648:35	648:35	11	char
LEAF_NODE	648:39	648:39	10	*
LEAF_NODE	648:40	648:40	10	)
FIELD	648:42	648:42	10	v
LEAF_NODE	648:42	648:42	11	v
LEAF_NODE	648:43	648:43	9	)
LEAF_NODE	648:44	648:44	8	)
LEAF_NODE	648:45	648:45	6	;
LEAF_NODE	649:0	649:0	2	}
FUNCTION_DEF	655:0	692:0	1	
RETURN_TYPE	655:0	655:7	2	static int
LEAF_NODE	655:0	655:0	3	static
TYPE_NAME	655:7	655:7	3	int
LEAF_NODE	655:7	655:7	4	int
FUNCTION_NAME	656:0	656:0	2	TIFFWriteRationalArray
LEAF_NODE	656:0	656:0	3	TIFFWriteRationalArray
PARAMETER_LIST	656:22	657:72	2	( TIFF * tif , TIFFDataType type , ttag_t tag , TIFFDirEntry * dir , uint32 n , float * v )
LEAF_NODE	656:22	656:22	3	(
PARAMETER_DECL	656:23	656:29	3	TIFF * tif
TYPE	656:23	656:27	4	TIFF *
TYPE_NAME	656:23	656:23	5	TIFF
LEAF_NODE	656:23	656:23	6	TIFF
POINTER	656:27	656:27	5	*
LEAF_NODE	656:27	656:27	6	*
NAME	656:29	656:29	4	tif
LEAF_NODE	656:29	656:29	5	tif
LEAF_NODE	656:32	656:32	3	,
PARAMETER_DECL	657:4	657:17	3	TIFFDataType type
TYPE	657:4	657:4	4	TIFFDataType
TYPE_NAME	657:4	657:4	5	TIFFDataType
LEAF_NODE	657:4	657:4	6	TIFFDataType
NAME	657:17	657:17	4	type
LEAF_NODE	657:17	657:17	5	type
LEAF_NODE	657:21	657:21	3	,
PARAMETER_DECL	657:23	657:30	3	ttag_t tag
TYPE	657:23	657:23	4	ttag_t
TYPE_NAME	657:23	657:23	5	ttag_t
LEAF_NODE	657:23	657:23	6	ttag_t
NAME	657:30	657:30	4	tag
LEAF_NODE	657:30	657:30	5	tag
LEAF_NODE	657:33	657:33	3	,
PARAMETER_DECL	657:35	657:49	3	TIFFDirEntry * dir
TYPE	657:35	657:47	4	TIFFDirEntry *
TYPE_NAME	657:35	657:35	5	TIFFDirEntry
LEAF_NODE	657:35	657:35	6	TIFFDirEntry
POINTER	657:47	657:47	5	*
LEAF_NODE	657:47	657:47	6	*
NAME	657:49	657:49	4	dir
LEAF_NODE	657:49	657:49	5	dir
LEAF_NODE	657:52	657:52	3	,
PARAMETER_DECL	657:54	657:61	3	uint32 n
TYPE	657:54	657:54	4	uint32
TYPE_NAME	657:54	657:54	5	uint32
LEAF_NODE	657:54	657:54	6	uint32
NAME	657:61	657:61	4	n
LEAF_NODE	657:61	657:61	5	n
LEAF_NODE	657:62	657:62	3	,
PARAMETER_DECL	657:64	657:71	3	float * v
TYPE	657:64	657:69	4	float *
TYPE_NAME	657:64	657:64	5	float
LEAF_NODE	657:64	657:64	6	float
POINTER	657:69	657:69	5	*
LEAF_NODE	657:69	657:69	6	*
NAME	657:71	657:71	4	v
LEAF_NODE	657:71	657:71	5	v
LEAF_NODE	657:72	657:72	3	)
LEAF_NODE	658:0	658:0	2	{
STATEMENTS	659:1	691:16	2	
SIMPLE_DECL	659:1	659:9	3	uint32 i ;
VAR_DECL	659:1	659:8	4	uint32 i
TYPE	659:1	659:1	5	uint32
TYPE_NAME	659:1	659:1	6	uint32
LEAF_NODE	659:1	659:1	7	uint32
NAME	659:8	659:8	5	i
LEAF_NODE	659:8	659:8	6	i
LEAF_NODE	659:9	659:9	4	;
SIMPLE_DECL	660:1	660:10	3	uint32 * t ;
VAR_DECL	660:1	660:9	4	uint32 * t
TYPE	660:1	660:7	5	uint32 *
TYPE_NAME	660:1	660:1	6	uint32
LEAF_NODE	660:1	660:1	7	uint32
POINTER	660:7	660:7	6	*
LEAF_NODE	660:7	660:7	7	*
NAME	660:9	660:9	5	t
LEAF_NODE	660:9	660:9	6	t
LEAF_NODE	660:10	660:10	4	;
SIMPLE_DECL	661:1	661:11	3	int status ;
VAR_DECL	661:1	661:5	4	int status
TYPE	661:1	661:1	5	int
TYPE_NAME	661:1	661:1	6	int
LEAF_NODE	661:1	661:1	7	int
NAME	661:5	661:5	5	status
LEAF_NODE	661:5	661:5	6	status
LEAF_NODE	661:11	661:11	4	;
EXPR_STATEMENT	663:1	663:20	3	dir -> tdir_tag = tag ;
EXPR	663:1	663:1	4	dir -> tdir_tag = tag
ASSIGN	663:1	663:17	5	dir -> tdir_tag = tag
LVAL	663:1	663:1	6	dir -> tdir_tag
FIELD	663:1	663:6	7	dir -> tdir_tag
LEAF_NODE	663:1	663:1	8	dir
LEAF_NODE	663:4	663:4	8	->
LEAF_NODE	663:6	663:6	8	tdir_tag
ASSIGN_OP	663:15	663:15	6	=
LEAF_NODE	663:15	663:15	7	=
RVAL	663:17	663:17	6	tag
FIELD	663:17	663:17	7	tag
LEAF_NODE	663:17	663:17	8	tag
LEAF_NODE	663:20	663:20	4	;
EXPR_STATEMENT	664:1	664:30	3	dir -> tdir_type = ( short ) type ;
EXPR	664:1	664:1	4	dir -> tdir_type = ( short ) type
ASSIGN	664:1	664:18	5	dir -> tdir_type = ( short ) type
LVAL	664:1	664:1	6	dir -> tdir_type
FIELD	664:1	664:6	7	dir -> tdir_type
LEAF_NODE	664:1	664:1	8	dir
LEAF_NODE	664:4	664:4	8	->
LEAF_NODE	664:6	664:6	8	tdir_type
ASSIGN_OP	664:16	664:16	6	=
LEAF_NODE	664:16	664:16	7	=
RVAL	664:18	664:26	6	( short ) type
LEAF_NODE	664:18	664:18	7	(
TYPE_NAME	664:19	664:19	7	short
LEAF_NODE	664:19	664:19	8	short
LEAF_NODE	664:24	664:24	7	)
FIELD	664:26	664:26	7	type
LEAF_NODE	664:26	664:26	8	type
LEAF_NODE	664:30	664:30	4	;
EXPR_STATEMENT	665:1	665:20	3	dir -> tdir_count = n ;
EXPR	665:1	665:1	4	dir -> tdir_count = n
ASSIGN	665:1	665:19	5	dir -> tdir_count = n
LVAL	665:1	665:1	6	dir -> tdir_count
FIELD	665:1	665:6	7	dir -> tdir_count
LEAF_NODE	665:1	665:1	8	dir
LEAF_NODE	665:4	665:4	8	->
LEAF_NODE	665:6	665:6	8	tdir_count
ASSIGN_OP	665:17	665:17	6	=
LEAF_NODE	665:17	665:17	7	=
RVAL	665:19	665:19	6	n
FIELD	665:19	665:19	7	n
LEAF_NODE	665:19	665:19	8	n
LEAF_NODE	665:20	665:20	4	;
LEAF_NODE	666:1	666:1	3	t
LEAF_NODE	666:3	666:3	3	=
LEAF_NODE	666:5	666:5	3	(
LEAF_NODE	666:6	666:6	3	uint32
LEAF_NODE	666:12	666:12	3	*
LEAF_NODE	666:13	666:13	3	)
LEAF_NODE	666:15	666:15	3	_TIFFmalloc
LEAF_NODE	666:26	666:26	3	(
LEAF_NODE	666:27	666:27	3	2
LEAF_NODE	666:28	666:28	3	*
LEAF_NODE	666:29	666:29	3	n
LEAF_NODE	666:31	666:31	3	*
LEAF_NODE	666:33	666:33	3	sizeof
LEAF_NODE	666:40	666:40	3	(
LEAF_NODE	666:41	666:41	3	uint32
LEAF_NODE	666:47	666:47	3	)
LEAF_NODE	666:48	666:48	3	)
LEAF_NODE	666:49	666:49	3	;
ITERATION	667:1	667:25	3	
KEYWORD	667:1	667:1	4	for
LEAF_NODE	667:1	667:1	5	for
LEAF_NODE	667:5	667:5	4	(
FOR_INIT	667:6	667:11	4	i = 0 ;
EXPR	667:6	667:6	5	i = 0
ASSIGN	667:6	667:10	6	i = 0
LVAL	667:6	667:6	7	i
FIELD	667:6	667:6	8	i
LEAF_NODE	667:6	667:6	9	i
ASSIGN_OP	667:8	667:8	7	=
LEAF_NODE	667:8	667:8	8	=
RVAL	667:10	667:10	7	0
FIELD	667:10	667:10	8	0
LEAF_NODE	667:10	667:10	9	0
LEAF_NODE	667:11	667:11	5	;
CONDITION	667:13	667:13	4	i < n
EXPR	667:13	667:17	5	i < n
FIELD	667:13	667:13	6	i
LEAF_NODE	667:13	667:13	7	i
REL_OPERATOR	667:15	667:15	6	<
LEAF_NODE	667:15	667:15	7	<
FIELD	667:17	667:17	6	n
LEAF_NODE	667:17	667:17	7	n
LEAF_NODE	667:18	667:18	4	;
FOR_EXPR	667:20	667:20	4	i ++
EXPR	667:20	667:20	5	i ++
FIELD	667:20	667:21	6	i ++
LEAF_NODE	667:20	667:20	7	i
LEAF_NODE	667:21	667:21	7	++
LEAF_NODE	667:23	667:23	4	)
STATEMENTS	667:25	688:1	4	
LEAF_NODE	667:25	667:25	5	{
STATEMENTS	668:2	687:2	5	
SIMPLE_DECL	668:2	668:17	6	float fv ; fv = v [ i ] ;
VAR_DECL	668:2	668:8	7	float fv ; fv = v [ i ]
TYPE	668:2	668:2	8	float
TYPE_NAME	668:2	668:2	9	float
LEAF_NODE	668:2	668:2	10	float
NAME	668:8	668:8	8	fv
LEAF_NODE	668:8	668:8	9	fv
LEAF_NODE	0:0	0:0	8	;
INIT	668:8	668:8	8	fv = v [ i ]
ASSIGN	668:8	668:13	9	fv = v [ i ]
LVAL	668:8	668:8	10	fv
NAME	668:8	668:8	11	fv
LEAF_NODE	668:8	668:8	12	fv
ASSIGN_OP	668:11	668:11	10	=
LEAF_NODE	668:11	668:11	11	=
RVAL	668:13	668:13	10	v [ i ]
FIELD	668:13	668:16	11	v [ i ]
LEAF_NODE	668:13	668:13	12	v
LEAF_NODE	668:14	668:14	12	[
EXPR	668:15	668:15	12	i
FIELD	668:15	668:15	13	i
LEAF_NODE	668:15	668:15	14	i
LEAF_NODE	668:16	668:16	12	]
LEAF_NODE	668:17	668:17	7	;
SIMPLE_DECL	669:2	669:14	6	int sign ; sign = 1 ;
VAR_DECL	669:2	669:6	7	int sign ; sign = 1
TYPE	669:2	669:2	8	int
TYPE_NAME	669:2	669:2	9	int
LEAF_NODE	669:2	669:2	10	int
NAME	669:6	669:6	8	sign
LEAF_NODE	669:6	669:6	9	sign
LEAF_NODE	0:0	0:0	8	;
INIT	669:6	669:6	8	sign = 1
ASSIGN	669:6	669:13	9	sign = 1
LVAL	669:6	669:6	10	sign
NAME	669:6	669:6	11	sign
LEAF_NODE	669:6	669:6	12	sign
ASSIGN_OP	669:11	669:11	10	=
LEAF_NODE	669:11	669:11	11	=
RVAL	669:13	669:13	10	1
FIELD	669:13	669:13	11	1
LEAF_NODE	669:13	669:13	12	1
LEAF_NODE	669:14	669:14	7	;
SIMPLE_DECL	670:2	670:12	6	uint32 den ;
VAR_DECL	670:2	670:9	7	uint32 den
TYPE	670:2	670:2	8	uint32
TYPE_NAME	670:2	670:2	9	uint32
LEAF_NODE	670:2	670:2	10	uint32
NAME	670:9	670:9	8	den
LEAF_NODE	670:9	670:9	9	den
LEAF_NODE	670:12	670:12	7	;
SELECTION	672:2	672:14	6	
KEYWORD	672:2	672:2	7	if
LEAF_NODE	672:2	672:2	8	if
LEAF_NODE	672:5	672:5	7	(
CONDITION	672:6	672:6	7	fv < 0
EXPR	672:6	672:11	8	fv < 0
FIELD	672:6	672:6	9	fv
LEAF_NODE	672:6	672:6	10	fv
REL_OPERATOR	672:9	672:9	9	<
LEAF_NODE	672:9	672:9	10	<
FIELD	672:11	672:11	9	0
LEAF_NODE	672:11	672:11	10	0
LEAF_NODE	672:12	672:12	7	)
STATEMENTS	672:14	680:2	7	
LEAF_NODE	672:14	672:14	8	{
STATEMENTS	673:3	678:5	8	
SELECTION	673:3	673:30	9	
KEYWORD	673:3	673:3	10	if
LEAF_NODE	673:3	673:3	11	if
LEAF_NODE	673:6	673:6	10	(
CONDITION	673:7	673:7	10	type == TIFF_RATIONAL
EXPR	673:7	673:15	11	type == TIFF_RATIONAL
FIELD	673:7	673:7	12	type
LEAF_NODE	673:7	673:7	13	type
EQ_OPERATOR	673:12	673:12	12	==
LEAF_NODE	673:12	673:12	13	==
FIELD	673:15	673:15	12	TIFF_RATIONAL
LEAF_NODE	673:15	673:15	13	TIFF_RATIONAL
LEAF_NODE	673:28	673:28	10	)
STATEMENTS	673:30	678:3	10	
LEAF_NODE	673:30	673:30	11	{
STATEMENTS	674:4	677:4	11	
EXPR_STATEMENT	674:4	676:46	12	TIFFWarning ( tif -> tif_name , "\"%s\": Information lost writing value (%g) as (unsigned) RATIONAL" , _TIFFFieldWithTag ( tif , tag ) -> field_name , v ) ;
EXPR	674:4	674:4	13	TIFFWarning ( tif -> tif_name , "\"%s\": Information lost writing value (%g) as (unsigned) RATIONAL" , _TIFFFieldWithTag ( tif , tag ) -> field_name , v )
FUNCTION_CALL	674:4	676:45	14	TIFFWarning ( tif -> tif_name , "\"%s\": Information lost writing value (%g) as (unsigned) RATIONAL" , _TIFFFieldWithTag ( tif , tag ) -> field_name , v )
CALLEE	674:4	674:4	15	TIFFWarning
LEAF_NODE	674:4	674:4	16	TIFFWarning
LEAF_NODE	674:15	674:15	15	(
ARGUMENT	674:16	674:16	15	tif -> tif_name
FIELD	674:16	674:21	16	tif -> tif_name
LEAF_NODE	674:16	674:16	17	tif
LEAF_NODE	674:19	674:19	17	->
LEAF_NODE	674:21	674:21	17	tif_name
LEAF_NODE	674:29	674:29	15	,
ARGUMENT	675:1	675:1	15	"\"%s\": Information lost writing value (%g) as (unsigned) RATIONAL"
FIELD	675:1	675:1	16	"\"%s\": Information lost writing value (%g) as (unsigned) RATIONAL"
LEAF_NODE	675:1	675:1	17	"\"%s\": Information lost writing value (%g) as (unsigned) RATIONAL"
LEAF_NODE	675:69	675:69	15	,
ARGUMENT	676:4	676:32	15	_TIFFFieldWithTag ( tif , tag ) -> field_name
FUNCTION_CALL	676:4	676:29	16	_TIFFFieldWithTag ( tif , tag )
CALLEE	676:4	676:4	17	_TIFFFieldWithTag
LEAF_NODE	676:4	676:4	18	_TIFFFieldWithTag
LEAF_NODE	676:21	676:21	17	(
ARGUMENT	676:22	676:22	17	tif
FIELD	676:22	676:22	18	tif
LEAF_NODE	676:22	676:22	19	tif
LEAF_NODE	676:25	676:25	17	,
ARGUMENT	676:26	676:26	17	tag
FIELD	676:26	676:26	18	tag
LEAF_NODE	676:26	676:26	19	tag
LEAF_NODE	676:29	676:29	17	)
LEAF_NODE	676:30	676:30	16	->
LEAF_NODE	676:32	676:32	16	field_name
LEAF_NODE	676:42	676:42	15	,
ARGUMENT	676:44	676:44	15	v
FIELD	676:44	676:44	16	v
LEAF_NODE	676:44	676:44	17	v
LEAF_NODE	676:45	676:45	15	)
LEAF_NODE	676:46	676:46	13	;
EXPR_STATEMENT	677:4	677:10	12	fv = 0 ;
EXPR	677:4	677:4	13	fv = 0
ASSIGN	677:4	677:9	14	fv = 0
LVAL	677:4	677:4	15	fv
FIELD	677:4	677:4	16	fv
LEAF_NODE	677:4	677:4	17	fv
ASSIGN_OP	677:7	677:7	15	=
LEAF_NODE	677:7	677:7	16	=
RVAL	677:9	677:9	15	0
FIELD	677:9	677:9	16	0
LEAF_NODE	677:9	677:9	17	0
LEAF_NODE	677:10	677:10	13	;
LEAF_NODE	678:3	678:3	11	}
SELECTION	678:5	679:4	9	
KEYWORD	678:5	678:5	10	else
LEAF_NODE	678:5	678:5	11	else
STATEMENTS	679:4	679:4	10	
EXPR_STATEMENT	679:4	679:23	11	fv = - fv , sign = - 1 ;
EXPR	679:4	679:14	12	fv = - fv , sign = - 1
ASSIGN	679:4	679:9	13	fv = - fv
LVAL	679:4	679:4	14	fv
FIELD	679:4	679:4	15	fv
LEAF_NODE	679:4	679:4	16	fv
ASSIGN_OP	679:7	679:7	14	=
LEAF_NODE	679:7	679:7	15	=
RVAL	679:9	679:9	14	- fv
UNARY_EXPR	679:9	679:10	15	- fv
UNARY_OPERATOR	679:9	679:9	16	-
LEAF_NODE	679:9	679:9	17	-
FIELD	679:10	679:10	16	fv
LEAF_NODE	679:10	679:10	17	fv
LEAF_NODE	679:12	679:12	13	,
ASSIGN	679:14	679:21	13	sign = - 1
LVAL	679:14	679:14	14	sign
FIELD	679:14	679:14	15	sign
LEAF_NODE	679:14	679:14	16	sign
ASSIGN_OP	679:19	679:19	14	=
LEAF_NODE	679:19	679:19	15	=
RVAL	679:21	679:21	14	- 1
UNARY_EXPR	679:21	679:22	15	- 1
UNARY_OPERATOR	679:21	679:21	16	-
LEAF_NODE	679:21	679:21	17	-
FIELD	679:22	679:22	16	1
LEAF_NODE	679:22	679:22	17	1
LEAF_NODE	679:23	679:23	12	;
LEAF_NODE	680:2	680:2	8	}
EXPR_STATEMENT	681:2	681:10	6	den = 1L ;
EXPR	681:2	681:2	7	den = 1L
ASSIGN	681:2	681:8	8	den = 1L
LVAL	681:2	681:2	9	den
FIELD	681:2	681:2	10	den
LEAF_NODE	681:2	681:2	11	den
ASSIGN_OP	681:6	681:6	9	=
LEAF_NODE	681:6	681:6	10	=
RVAL	681:8	681:8	9	1L
FIELD	681:8	681:8	10	1L
LEAF_NODE	681:8	681:8	11	1L
LEAF_NODE	681:10	681:10	7	;
SELECTION	682:2	682:14	6	
KEYWORD	682:2	682:2	7	if
LEAF_NODE	682:2	682:2	8	if
LEAF_NODE	682:5	682:5	7	(
CONDITION	682:6	682:6	7	fv > 0
EXPR	682:6	682:11	8	fv > 0
FIELD	682:6	682:6	9	fv
LEAF_NODE	682:6	682:6	10	fv
REL_OPERATOR	682:9	682:9	9	>
LEAF_NODE	682:9	682:9	10	>
FIELD	682:11	682:11	9	0
LEAF_NODE	682:11	682:11	10	0
LEAF_NODE	682:12	682:12	7	)
STATEMENTS	682:14	685:2	7	
LEAF_NODE	682:14	682:14	8	{
STATEMENTS	683:3	683:3	8	
ITERATION	683:3	684:4	9	
KEYWORD	683:3	683:3	10	while
LEAF_NODE	683:3	683:3	11	while
LEAF_NODE	683:9	683:9	10	(
CONDITION	683:10	683:10	10	fv < 1L << ( 31 - 3 ) && den < 1L << ( 31 - 3 )
EXPR	683:10	683:10	11	fv < 1L << ( 31 - 3 ) && den < 1L << ( 31 - 3 )
AND	683:10	683:29	12	fv < 1L << ( 31 - 3 ) && den < 1L << ( 31 - 3 )
EXPR	683:10	683:24	13	fv < 1L << ( 31 - 3 )
FIELD	683:10	683:10	14	fv
LEAF_NODE	683:10	683:10	15	fv
REL_OPERATOR	683:13	683:13	14	<
LEAF_NODE	683:13	683:13	15	<
FIELD	683:15	683:15	14	1L
LEAF_NODE	683:15	683:15	15	1L
LEAF_NODE	683:17	683:17	14	<<
LEAF_NODE	683:19	683:19	14	(
FIELD	683:20	683:20	14	31
LEAF_NODE	683:20	683:20	15	31
LEAF_NODE	683:22	683:22	14	-
FIELD	683:23	683:23	14	3
LEAF_NODE	683:23	683:23	15	3
LEAF_NODE	683:24	683:24	14	)
LEAF_NODE	683:26	683:26	13	&&
EXPR	683:29	683:44	13	den < 1L << ( 31 - 3 )
FIELD	683:29	683:29	14	den
LEAF_NODE	683:29	683:29	15	den
REL_OPERATOR	683:33	683:33	14	<
LEAF_NODE	683:33	683:33	15	<
FIELD	683:35	683:35	14	1L
LEAF_NODE	683:35	683:35	15	1L
LEAF_NODE	683:37	683:37	14	<<
LEAF_NODE	683:39	683:39	14	(
FIELD	683:40	683:40	14	31
LEAF_NODE	683:40	683:40	15	31
LEAF_NODE	683:42	683:42	14	-
FIELD	683:43	683:43	14	3
LEAF_NODE	683:43	683:43	15	3
LEAF_NODE	683:44	683:44	14	)
LEAF_NODE	683:45	683:45	10	)
STATEMENTS	684:4	684:4	10	
EXPR_STATEMENT	684:4	684:28	11	fv *= 1 << 3 , den *= 1L << 3 ;
EXPR	684:4	684:16	12	fv *= 1 << 3 , den *= 1L << 3
ASSIGN	684:4	684:10	13	fv *= 1 << 3
LVAL	684:4	684:4	14	fv
FIELD	684:4	684:4	15	fv
LEAF_NODE	684:4	684:4	16	fv
ASSIGN_OP	684:7	684:7	14	*=
LEAF_NODE	684:7	684:7	15	*=
RVAL	684:10	684:13	14	1 << 3
FIELD	684:10	684:10	15	1
LEAF_NODE	684:10	684:10	16	1
LEAF_NODE	684:11	684:11	15	<<
FIELD	684:13	684:13	15	3
LEAF_NODE	684:13	684:13	16	3
LEAF_NODE	684:14	684:14	13	,
ASSIGN	684:16	684:23	13	den *= 1L << 3
LVAL	684:16	684:16	14	den
FIELD	684:16	684:16	15	den
LEAF_NODE	684:16	684:16	16	den
ASSIGN_OP	684:20	684:20	14	*=
LEAF_NODE	684:20	684:20	15	*=
RVAL	684:23	684:27	14	1L << 3
FIELD	684:23	684:23	15	1L
LEAF_NODE	684:23	684:23	16	1L
LEAF_NODE	684:25	684:25	15	<<
FIELD	684:27	684:27	15	3
LEAF_NODE	684:27	684:27	16	3
LEAF_NODE	684:28	684:28	12	;
LEAF_NODE	685:2	685:2	8	}
EXPR_STATEMENT	686:2	686:30	6	t [ 2 * i + 0 ] = sign * ( fv + 0.5 ) ;
EXPR	686:2	686:2	7	t [ 2 * i + 0 ] = sign * ( fv + 0.5 )
ASSIGN	686:2	686:13	8	t [ 2 * i + 0 ] = sign * ( fv + 0.5 )
LVAL	686:2	686:2	9	t [ 2 * i + 0 ]
FIELD	686:2	686:9	10	t [ 2 * i + 0 ]
LEAF_NODE	686:2	686:2	11	t
LEAF_NODE	686:3	686:3	11	[
EXPR	686:4	686:8	11	2 * i + 0
FIELD	686:4	686:4	12	2
LEAF_NODE	686:4	686:4	13	2
LEAF_NODE	686:5	686:5	12	*
FIELD	686:6	686:6	12	i
LEAF_NODE	686:6	686:6	13	i
LEAF_NODE	686:7	686:7	12	+
FIELD	686:8	686:8	12	0
LEAF_NODE	686:8	686:8	13	0
LEAF_NODE	686:9	686:9	11	]
ASSIGN_OP	686:11	686:11	9	=
LEAF_NODE	686:11	686:11	10	=
RVAL	686:13	686:29	9	sign * ( fv + 0.5 )
FIELD	686:13	686:13	10	sign
LEAF_NODE	686:13	686:13	11	sign
LEAF_NODE	686:18	686:18	10	*
LEAF_NODE	686:20	686:20	10	(
FIELD	686:21	686:21	10	fv
LEAF_NODE	686:21	686:21	11	fv
LEAF_NODE	686:24	686:24	10	+
FIELD	686:26	686:26	10	0.5
LEAF_NODE	686:26	686:26	11	0.5
LEAF_NODE	686:29	686:29	10	)
LEAF_NODE	686:30	686:30	7	;
EXPR_STATEMENT	687:2	687:16	6	t [ 2 * i + 1 ] = den ;
EXPR	687:2	687:2	7	t [ 2 * i + 1 ] = den
ASSIGN	687:2	687:13	8	t [ 2 * i + 1 ] = den
LVAL	687:2	687:2	9	t [ 2 * i + 1 ]
FIELD	687:2	687:9	10	t [ 2 * i + 1 ]
LEAF_NODE	687:2	687:2	11	t
LEAF_NODE	687:3	687:3	11	[
EXPR	687:4	687:8	11	2 * i + 1
FIELD	687:4	687:4	12	2
LEAF_NODE	687:4	687:4	13	2
LEAF_NODE	687:5	687:5	12	*
FIELD	687:6	687:6	12	i
LEAF_NODE	687:6	687:6	13	i
LEAF_NODE	687:7	687:7	12	+
FIELD	687:8	687:8	12	1
LEAF_NODE	687:8	687:8	13	1
LEAF_NODE	687:9	687:9	11	]
ASSIGN_OP	687:11	687:11	9	=
LEAF_NODE	687:11	687:11	10	=
RVAL	687:13	687:13	9	den
FIELD	687:13	687:13	10	den
LEAF_NODE	687:13	687:13	11	den
LEAF_NODE	687:16	687:16	7	;
LEAF_NODE	688:1	688:1	5	}
EXPR_STATEMENT	689:1	689:44	3	status = TIFFWriteData ( tif , dir , ( char * ) t ) ;
EXPR	689:1	689:1	4	status = TIFFWriteData ( tif , dir , ( char * ) t )
ASSIGN	689:1	689:10	5	status = TIFFWriteData ( tif , dir , ( char * ) t )
LVAL	689:1	689:1	6	status
FIELD	689:1	689:1	7	status
LEAF_NODE	689:1	689:1	8	status
ASSIGN_OP	689:8	689:8	6	=
LEAF_NODE	689:8	689:8	7	=
RVAL	689:10	689:10	6	TIFFWriteData ( tif , dir , ( char * ) t )
FUNCTION_CALL	689:10	689:43	7	TIFFWriteData ( tif , dir , ( char * ) t )
CALLEE	689:10	689:10	8	TIFFWriteData
LEAF_NODE	689:10	689:10	9	TIFFWriteData
LEAF_NODE	689:23	689:23	8	(
ARGUMENT	689:24	689:24	8	tif
FIELD	689:24	689:24	9	tif
LEAF_NODE	689:24	689:24	10	tif
LEAF_NODE	689:27	689:27	8	,
ARGUMENT	689:29	689:29	8	dir
FIELD	689:29	689:29	9	dir
LEAF_NODE	689:29	689:29	10	dir
LEAF_NODE	689:32	689:32	8	,
ARGUMENT	689:34	689:42	8	( char * ) t
LEAF_NODE	689:34	689:34	9	(
TYPE_NAME	689:35	689:35	9	char
LEAF_NODE	689:35	689:35	10	char
LEAF_NODE	689:40	689:40	9	*
LEAF_NODE	689:41	689:41	9	)
FIELD	689:42	689:42	9	t
LEAF_NODE	689:42	689:42	10	t
LEAF_NODE	689:43	689:43	8	)
LEAF_NODE	689:44	689:44	4	;
EXPR_STATEMENT	690:1	690:21	3	_TIFFfree ( ( char * ) t ) ;
EXPR	690:1	690:1	4	_TIFFfree ( ( char * ) t )
FUNCTION_CALL	690:1	690:20	5	_TIFFfree ( ( char * ) t )
CALLEE	690:1	690:1	6	_TIFFfree
LEAF_NODE	690:1	690:1	7	_TIFFfree
LEAF_NODE	690:10	690:10	6	(
ARGUMENT	690:11	690:19	6	( char * ) t
LEAF_NODE	690:11	690:11	7	(
TYPE_NAME	690:12	690:12	7	char
LEAF_NODE	690:12	690:12	8	char
LEAF_NODE	690:16	690:16	7	*
LEAF_NODE	690:17	690:17	7	)
FIELD	690:19	690:19	7	t
LEAF_NODE	690:19	690:19	8	t
LEAF_NODE	690:20	690:20	6	)
LEAF_NODE	690:21	690:21	4	;
LEAF_NODE	691:1	691:1	3	return
LEAF_NODE	691:8	691:8	3	(
LEAF_NODE	691:9	691:9	3	status
LEAF_NODE	691:15	691:15	3	)
LEAF_NODE	691:16	691:16	3	;
LEAF_NODE	692:0	692:0	2	}
FUNCTION_DEF	694:0	707:0	1	
RETURN_TYPE	694:0	694:7	2	static int
LEAF_NODE	694:0	694:0	3	static
TYPE_NAME	694:7	694:7	3	int
LEAF_NODE	694:7	694:7	4	int
FUNCTION_NAME	695:0	695:0	2	TIFFWriteFloatArray
LEAF_NODE	695:0	695:0	3	TIFFWriteFloatArray
PARAMETER_LIST	695:19	696:72	2	( TIFF * tif , TIFFDataType type , ttag_t tag , TIFFDirEntry * dir , uint32 n , float * v )
LEAF_NODE	695:19	695:19	3	(
PARAMETER_DECL	695:20	695:26	3	TIFF * tif
TYPE	695:20	695:24	4	TIFF *
TYPE_NAME	695:20	695:20	5	TIFF
LEAF_NODE	695:20	695:20	6	TIFF
POINTER	695:24	695:24	5	*
LEAF_NODE	695:24	695:24	6	*
NAME	695:26	695:26	4	tif
LEAF_NODE	695:26	695:26	5	tif
LEAF_NODE	695:29	695:29	3	,
PARAMETER_DECL	696:4	696:17	3	TIFFDataType type
TYPE	696:4	696:4	4	TIFFDataType
TYPE_NAME	696:4	696:4	5	TIFFDataType
LEAF_NODE	696:4	696:4	6	TIFFDataType
NAME	696:17	696:17	4	type
LEAF_NODE	696:17	696:17	5	type
LEAF_NODE	696:21	696:21	3	,
PARAMETER_DECL	696:23	696:30	3	ttag_t tag
TYPE	696:23	696:23	4	ttag_t
TYPE_NAME	696:23	696:23	5	ttag_t
LEAF_NODE	696:23	696:23	6	ttag_t
NAME	696:30	696:30	4	tag
LEAF_NODE	696:30	696:30	5	tag
LEAF_NODE	696:33	696:33	3	,
PARAMETER_DECL	696:35	696:49	3	TIFFDirEntry * dir
TYPE	696:35	696:47	4	TIFFDirEntry *
TYPE_NAME	696:35	696:35	5	TIFFDirEntry
LEAF_NODE	696:35	696:35	6	TIFFDirEntry
POINTER	696:47	696:47	5	*
LEAF_NODE	696:47	696:47	6	*
NAME	696:49	696:49	4	dir
LEAF_NODE	696:49	696:49	5	dir
LEAF_NODE	696:52	696:52	3	,
PARAMETER_DECL	696:54	696:61	3	uint32 n
TYPE	696:54	696:54	4	uint32
TYPE_NAME	696:54	696:54	5	uint32
LEAF_NODE	696:54	696:54	6	uint32
NAME	696:61	696:61	4	n
LEAF_NODE	696:61	696:61	5	n
LEAF_NODE	696:62	696:62	3	,
PARAMETER_DECL	696:64	696:71	3	float * v
TYPE	696:64	696:69	4	float *
TYPE_NAME	696:64	696:64	5	float
LEAF_NODE	696:64	696:64	6	float
POINTER	696:69	696:69	5	*
LEAF_NODE	696:69	696:69	6	*
NAME	696:71	696:71	4	v
LEAF_NODE	696:71	696:71	5	v
LEAF_NODE	696:72	696:72	3	)
LEAF_NODE	697:0	697:0	2	{
STATEMENTS	698:1	705:3	2	
EXPR_STATEMENT	698:1	698:20	3	dir -> tdir_tag = tag ;
EXPR	698:1	698:1	4	dir -> tdir_tag = tag
ASSIGN	698:1	698:17	5	dir -> tdir_tag = tag
LVAL	698:1	698:1	6	dir -> tdir_tag
FIELD	698:1	698:6	7	dir -> tdir_tag
LEAF_NODE	698:1	698:1	8	dir
LEAF_NODE	698:4	698:4	8	->
LEAF_NODE	698:6	698:6	8	tdir_tag
ASSIGN_OP	698:15	698:15	6	=
LEAF_NODE	698:15	698:15	7	=
RVAL	698:17	698:17	6	tag
FIELD	698:17	698:17	7	tag
LEAF_NODE	698:17	698:17	8	tag
LEAF_NODE	698:20	698:20	4	;
EXPR_STATEMENT	699:1	699:30	3	dir -> tdir_type = ( short ) type ;
EXPR	699:1	699:1	4	dir -> tdir_type = ( short ) type
ASSIGN	699:1	699:18	5	dir -> tdir_type = ( short ) type
LVAL	699:1	699:1	6	dir -> tdir_type
FIELD	699:1	699:6	7	dir -> tdir_type
LEAF_NODE	699:1	699:1	8	dir
LEAF_NODE	699:4	699:4	8	->
LEAF_NODE	699:6	699:6	8	tdir_type
ASSIGN_OP	699:16	699:16	6	=
LEAF_NODE	699:16	699:16	7	=
RVAL	699:18	699:26	6	( short ) type
LEAF_NODE	699:18	699:18	7	(
TYPE_NAME	699:19	699:19	7	short
LEAF_NODE	699:19	699:19	8	short
LEAF_NODE	699:24	699:24	7	)
FIELD	699:26	699:26	7	type
LEAF_NODE	699:26	699:26	8	type
LEAF_NODE	699:30	699:30	4	;
EXPR_STATEMENT	700:1	700:20	3	dir -> tdir_count = n ;
EXPR	700:1	700:1	4	dir -> tdir_count = n
ASSIGN	700:1	700:19	5	dir -> tdir_count = n
LVAL	700:1	700:1	6	dir -> tdir_count
FIELD	700:1	700:6	7	dir -> tdir_count
LEAF_NODE	700:1	700:1	8	dir
LEAF_NODE	700:4	700:4	8	->
LEAF_NODE	700:6	700:6	8	tdir_count
ASSIGN_OP	700:17	700:17	6	=
LEAF_NODE	700:17	700:17	7	=
RVAL	700:19	700:19	6	n
FIELD	700:19	700:19	7	n
LEAF_NODE	700:19	700:19	8	n
LEAF_NODE	700:20	700:20	4	;
EXPR_STATEMENT	701:1	701:36	3	TIFFCvtNativeToIEEEFloat ( tif , n , v ) ;
EXPR	701:1	701:1	4	TIFFCvtNativeToIEEEFloat ( tif , n , v )
FUNCTION_CALL	701:1	701:35	5	TIFFCvtNativeToIEEEFloat ( tif , n , v )
CALLEE	701:1	701:1	6	TIFFCvtNativeToIEEEFloat
LEAF_NODE	701:1	701:1	7	TIFFCvtNativeToIEEEFloat
LEAF_NODE	701:25	701:25	6	(
ARGUMENT	701:26	701:26	6	tif
FIELD	701:26	701:26	7	tif
LEAF_NODE	701:26	701:26	8	tif
LEAF_NODE	701:29	701:29	6	,
ARGUMENT	701:31	701:31	6	n
FIELD	701:31	701:31	7	n
LEAF_NODE	701:31	701:31	8	n
LEAF_NODE	701:32	701:32	6	,
ARGUMENT	701:34	701:34	6	v
FIELD	701:34	701:34	7	v
LEAF_NODE	701:34	701:34	8	v
LEAF_NODE	701:35	701:35	6	)
LEAF_NODE	701:36	701:36	4	;
SELECTION	702:1	702:13	3	
KEYWORD	702:1	702:1	4	if
LEAF_NODE	702:1	702:1	5	if
LEAF_NODE	702:4	702:4	4	(
CONDITION	702:5	702:5	4	n == 1
EXPR	702:5	702:10	5	n == 1
FIELD	702:5	702:5	6	n
LEAF_NODE	702:5	702:5	7	n
EQ_OPERATOR	702:7	702:7	6	==
LEAF_NODE	702:7	702:7	7	==
FIELD	702:10	702:10	6	1
LEAF_NODE	702:10	702:10	7	1
LEAF_NODE	702:11	702:11	4	)
STATEMENTS	702:13	705:1	4	
LEAF_NODE	702:13	702:13	5	{
STATEMENTS	703:2	704:2	5	
LEAF_NODE	703:2	703:2	6	dir
LEAF_NODE	703:5	703:5	6	->
LEAF_NODE	703:7	703:7	6	tdir_offset
LEAF_NODE	703:19	703:19	6	=
LEAF_NODE	703:21	703:21	6	*
EXPR_STATEMENT	703:22	703:37	6	( uint32 * ) & v [ 0 ] ;
EXPR	703:22	703:32	7	( uint32 * ) & v [ 0 ]
LEAF_NODE	703:22	703:22	8	(
TYPE_NAME	703:23	703:23	8	uint32
LEAF_NODE	703:23	703:23	9	uint32
LEAF_NODE	703:29	703:29	8	*
LEAF_NODE	703:30	703:30	8	)
UNARY_EXPR	703:32	703:33	8	& v [ 0 ]
UNARY_OPERATOR	703:32	703:32	9	&
LEAF_NODE	703:32	703:32	10	&
FIELD	703:33	703:36	9	v [ 0 ]
LEAF_NODE	703:33	703:33	10	v
LEAF_NODE	703:34	703:34	10	[
EXPR	703:35	703:35	10	0
FIELD	703:35	703:35	11	0
LEAF_NODE	703:35	703:35	12	0
LEAF_NODE	703:36	703:36	10	]
LEAF_NODE	703:37	703:37	7	;
JUMP_STATEMENT	704:2	704:12	6	return ( 1 ) ;
KEYWORD	704:2	704:2	7	return
LEAF_NODE	704:2	704:2	8	return
DESTINATION	704:9	704:9	7	( 1 )
EXPR	704:9	704:11	8	( 1 )
LEAF_NODE	704:9	704:9	9	(
FIELD	704:10	704:10	9	1
LEAF_NODE	704:10	704:10	10	1
LEAF_NODE	704:11	704:11	9	)
LEAF_NODE	704:12	704:12	7	;
LEAF_NODE	705:1	705:1	5	}
SELECTION	705:3	706:2	3	
KEYWORD	705:3	705:3	4	else
LEAF_NODE	705:3	705:3	5	else
STATEMENTS	706:2	706:2	4	
JUMP_STATEMENT	706:2	706:45	5	return ( TIFFWriteData ( tif , dir , ( char * ) v ) ) ;
KEYWORD	706:2	706:2	6	return
LEAF_NODE	706:2	706:2	7	return
DESTINATION	706:9	706:9	6	( TIFFWriteData ( tif , dir , ( char * ) v ) )
EXPR	706:9	706:44	7	( TIFFWriteData ( tif , dir , ( char * ) v ) )
LEAF_NODE	706:9	706:9	8	(
FUNCTION_CALL	706:10	706:43	8	TIFFWriteData ( tif , dir , ( char * ) v )
CALLEE	706:10	706:10	9	TIFFWriteData
LEAF_NODE	706:10	706:10	10	TIFFWriteData
LEAF_NODE	706:23	706:23	9	(
ARGUMENT	706:24	706:24	9	tif
FIELD	706:24	706:24	10	tif
LEAF_NODE	706:24	706:24	11	tif
LEAF_NODE	706:27	706:27	9	,
ARGUMENT	706:29	706:29	9	dir
FIELD	706:29	706:29	10	dir
LEAF_NODE	706:29	706:29	11	dir
LEAF_NODE	706:32	706:32	9	,
ARGUMENT	706:34	706:42	9	( char * ) v
LEAF_NODE	706:34	706:34	10	(
TYPE_NAME	706:35	706:35	10	char
LEAF_NODE	706:35	706:35	11	char
LEAF_NODE	706:39	706:39	10	*
LEAF_NODE	706:40	706:40	10	)
FIELD	706:42	706:42	10	v
LEAF_NODE	706:42	706:42	11	v
LEAF_NODE	706:43	706:43	9	)
LEAF_NODE	706:44	706:44	8	)
LEAF_NODE	706:45	706:45	6	;
LEAF_NODE	707:0	707:0	2	}
FUNCTION_DEF	709:0	718:0	1	
RETURN_TYPE	709:0	709:7	2	static int
LEAF_NODE	709:0	709:0	3	static
TYPE_NAME	709:7	709:7	3	int
LEAF_NODE	709:7	709:7	4	int
FUNCTION_NAME	710:0	710:0	2	TIFFWriteDoubleArray
LEAF_NODE	710:0	710:0	3	TIFFWriteDoubleArray
PARAMETER_LIST	710:20	711:73	2	( TIFF * tif , TIFFDataType type , ttag_t tag , TIFFDirEntry * dir , uint32 n , double * v )
LEAF_NODE	710:20	710:20	3	(
PARAMETER_DECL	710:21	710:27	3	TIFF * tif
TYPE	710:21	710:25	4	TIFF *
TYPE_NAME	710:21	710:21	5	TIFF
LEAF_NODE	710:21	710:21	6	TIFF
POINTER	710:25	710:25	5	*
LEAF_NODE	710:25	710:25	6	*
NAME	710:27	710:27	4	tif
LEAF_NODE	710:27	710:27	5	tif
LEAF_NODE	710:30	710:30	3	,
PARAMETER_DECL	711:4	711:17	3	TIFFDataType type
TYPE	711:4	711:4	4	TIFFDataType
TYPE_NAME	711:4	711:4	5	TIFFDataType
LEAF_NODE	711:4	711:4	6	TIFFDataType
NAME	711:17	711:17	4	type
LEAF_NODE	711:17	711:17	5	type
LEAF_NODE	711:21	711:21	3	,
PARAMETER_DECL	711:23	711:30	3	ttag_t tag
TYPE	711:23	711:23	4	ttag_t
TYPE_NAME	711:23	711:23	5	ttag_t
LEAF_NODE	711:23	711:23	6	ttag_t
NAME	711:30	711:30	4	tag
LEAF_NODE	711:30	711:30	5	tag
LEAF_NODE	711:33	711:33	3	,
PARAMETER_DECL	711:35	711:49	3	TIFFDirEntry * dir
TYPE	711:35	711:47	4	TIFFDirEntry *
TYPE_NAME	711:35	711:35	5	TIFFDirEntry
LEAF_NODE	711:35	711:35	6	TIFFDirEntry
POINTER	711:47	711:47	5	*
LEAF_NODE	711:47	711:47	6	*
NAME	711:49	711:49	4	dir
LEAF_NODE	711:49	711:49	5	dir
LEAF_NODE	711:52	711:52	3	,
PARAMETER_DECL	711:54	711:61	3	uint32 n
TYPE	711:54	711:54	4	uint32
TYPE_NAME	711:54	711:54	5	uint32
LEAF_NODE	711:54	711:54	6	uint32
NAME	711:61	711:61	4	n
LEAF_NODE	711:61	711:61	5	n
LEAF_NODE	711:62	711:62	3	,
PARAMETER_DECL	711:64	711:72	3	double * v
TYPE	711:64	711:70	4	double *
TYPE_NAME	711:64	711:64	5	double
LEAF_NODE	711:64	711:64	6	double
POINTER	711:70	711:70	5	*
LEAF_NODE	711:70	711:70	6	*
NAME	711:72	711:72	4	v
LEAF_NODE	711:72	711:72	5	v
LEAF_NODE	711:73	711:73	3	)
LEAF_NODE	712:0	712:0	2	{
STATEMENTS	713:1	717:1	2	
EXPR_STATEMENT	713:1	713:20	3	dir -> tdir_tag = tag ;
EXPR	713:1	713:1	4	dir -> tdir_tag = tag
ASSIGN	713:1	713:17	5	dir -> tdir_tag = tag
LVAL	713:1	713:1	6	dir -> tdir_tag
FIELD	713:1	713:6	7	dir -> tdir_tag
LEAF_NODE	713:1	713:1	8	dir
LEAF_NODE	713:4	713:4	8	->
LEAF_NODE	713:6	713:6	8	tdir_tag
ASSIGN_OP	713:15	713:15	6	=
LEAF_NODE	713:15	713:15	7	=
RVAL	713:17	713:17	6	tag
FIELD	713:17	713:17	7	tag
LEAF_NODE	713:17	713:17	8	tag
LEAF_NODE	713:20	713:20	4	;
EXPR_STATEMENT	714:1	714:30	3	dir -> tdir_type = ( short ) type ;
EXPR	714:1	714:1	4	dir -> tdir_type = ( short ) type
ASSIGN	714:1	714:18	5	dir -> tdir_type = ( short ) type
LVAL	714:1	714:1	6	dir -> tdir_type
FIELD	714:1	714:6	7	dir -> tdir_type
LEAF_NODE	714:1	714:1	8	dir
LEAF_NODE	714:4	714:4	8	->
LEAF_NODE	714:6	714:6	8	tdir_type
ASSIGN_OP	714:16	714:16	6	=
LEAF_NODE	714:16	714:16	7	=
RVAL	714:18	714:26	6	( short ) type
LEAF_NODE	714:18	714:18	7	(
TYPE_NAME	714:19	714:19	7	short
LEAF_NODE	714:19	714:19	8	short
LEAF_NODE	714:24	714:24	7	)
FIELD	714:26	714:26	7	type
LEAF_NODE	714:26	714:26	8	type
LEAF_NODE	714:30	714:30	4	;
EXPR_STATEMENT	715:1	715:20	3	dir -> tdir_count = n ;
EXPR	715:1	715:1	4	dir -> tdir_count = n
ASSIGN	715:1	715:19	5	dir -> tdir_count = n
LVAL	715:1	715:1	6	dir -> tdir_count
FIELD	715:1	715:6	7	dir -> tdir_count
LEAF_NODE	715:1	715:1	8	dir
LEAF_NODE	715:4	715:4	8	->
LEAF_NODE	715:6	715:6	8	tdir_count
ASSIGN_OP	715:17	715:17	6	=
LEAF_NODE	715:17	715:17	7	=
RVAL	715:19	715:19	6	n
FIELD	715:19	715:19	7	n
LEAF_NODE	715:19	715:19	8	n
LEAF_NODE	715:20	715:20	4	;
EXPR_STATEMENT	716:1	716:37	3	TIFFCvtNativeToIEEEDouble ( tif , n , v ) ;
EXPR	716:1	716:1	4	TIFFCvtNativeToIEEEDouble ( tif , n , v )
FUNCTION_CALL	716:1	716:36	5	TIFFCvtNativeToIEEEDouble ( tif , n , v )
CALLEE	716:1	716:1	6	TIFFCvtNativeToIEEEDouble
LEAF_NODE	716:1	716:1	7	TIFFCvtNativeToIEEEDouble
LEAF_NODE	716:26	716:26	6	(
ARGUMENT	716:27	716:27	6	tif
FIELD	716:27	716:27	7	tif
LEAF_NODE	716:27	716:27	8	tif
LEAF_NODE	716:30	716:30	6	,
ARGUMENT	716:32	716:32	6	n
FIELD	716:32	716:32	7	n
LEAF_NODE	716:32	716:32	8	n
LEAF_NODE	716:33	716:33	6	,
ARGUMENT	716:35	716:35	6	v
FIELD	716:35	716:35	7	v
LEAF_NODE	716:35	716:35	8	v
LEAF_NODE	716:36	716:36	6	)
LEAF_NODE	716:37	716:37	4	;
JUMP_STATEMENT	717:1	717:44	3	return ( TIFFWriteData ( tif , dir , ( char * ) v ) ) ;
KEYWORD	717:1	717:1	4	return
LEAF_NODE	717:1	717:1	5	return
DESTINATION	717:8	717:8	4	( TIFFWriteData ( tif , dir , ( char * ) v ) )
EXPR	717:8	717:43	5	( TIFFWriteData ( tif , dir , ( char * ) v ) )
LEAF_NODE	717:8	717:8	6	(
FUNCTION_CALL	717:9	717:42	6	TIFFWriteData ( tif , dir , ( char * ) v )
CALLEE	717:9	717:9	7	TIFFWriteData
LEAF_NODE	717:9	717:9	8	TIFFWriteData
LEAF_NODE	717:22	717:22	7	(
ARGUMENT	717:23	717:23	7	tif
FIELD	717:23	717:23	8	tif
LEAF_NODE	717:23	717:23	9	tif
LEAF_NODE	717:26	717:26	7	,
ARGUMENT	717:28	717:28	7	dir
FIELD	717:28	717:28	8	dir
LEAF_NODE	717:28	717:28	9	dir
LEAF_NODE	717:31	717:31	7	,
ARGUMENT	717:33	717:41	7	( char * ) v
LEAF_NODE	717:33	717:33	8	(
TYPE_NAME	717:34	717:34	8	char
LEAF_NODE	717:34	717:34	9	char
LEAF_NODE	717:38	717:38	8	*
LEAF_NODE	717:39	717:39	8	)
FIELD	717:41	717:41	8	v
LEAF_NODE	717:41	717:41	9	v
LEAF_NODE	717:42	717:42	7	)
LEAF_NODE	717:43	717:43	6	)
LEAF_NODE	717:44	717:44	4	;
LEAF_NODE	718:0	718:0	2	}
FUNCTION_DEF	729:0	817:0	1	
RETURN_TYPE	729:0	729:7	2	static int
LEAF_NODE	729:0	729:0	3	static
TYPE_NAME	729:7	729:7	3	int
LEAF_NODE	729:7	729:7	4	int
FUNCTION_NAME	730:0	730:0	2	TIFFWriteAnyArray
LEAF_NODE	730:0	730:0	3	TIFFWriteAnyArray
PARAMETER_LIST	730:17	731:73	2	( TIFF * tif , TIFFDataType type , ttag_t tag , TIFFDirEntry * dir , uint32 n , double * v )
LEAF_NODE	730:17	730:17	3	(
PARAMETER_DECL	730:18	730:24	3	TIFF * tif
TYPE	730:18	730:22	4	TIFF *
TYPE_NAME	730:18	730:18	5	TIFF
LEAF_NODE	730:18	730:18	6	TIFF
POINTER	730:22	730:22	5	*
LEAF_NODE	730:22	730:22	6	*
NAME	730:24	730:24	4	tif
LEAF_NODE	730:24	730:24	5	tif
LEAF_NODE	730:27	730:27	3	,
PARAMETER_DECL	731:4	731:17	3	TIFFDataType type
TYPE	731:4	731:4	4	TIFFDataType
TYPE_NAME	731:4	731:4	5	TIFFDataType
LEAF_NODE	731:4	731:4	6	TIFFDataType
NAME	731:17	731:17	4	type
LEAF_NODE	731:17	731:17	5	type
LEAF_NODE	731:21	731:21	3	,
PARAMETER_DECL	731:23	731:30	3	ttag_t tag
TYPE	731:23	731:23	4	ttag_t
TYPE_NAME	731:23	731:23	5	ttag_t
LEAF_NODE	731:23	731:23	6	ttag_t
NAME	731:30	731:30	4	tag
LEAF_NODE	731:30	731:30	5	tag
LEAF_NODE	731:33	731:33	3	,
PARAMETER_DECL	731:35	731:49	3	TIFFDirEntry * dir
TYPE	731:35	731:47	4	TIFFDirEntry *
TYPE_NAME	731:35	731:35	5	TIFFDirEntry
LEAF_NODE	731:35	731:35	6	TIFFDirEntry
POINTER	731:47	731:47	5	*
LEAF_NODE	731:47	731:47	6	*
NAME	731:49	731:49	4	dir
LEAF_NODE	731:49	731:49	5	dir
LEAF_NODE	731:52	731:52	3	,
PARAMETER_DECL	731:54	731:61	3	uint32 n
TYPE	731:54	731:54	4	uint32
TYPE_NAME	731:54	731:54	5	uint32
LEAF_NODE	731:54	731:54	6	uint32
NAME	731:61	731:61	4	n
LEAF_NODE	731:61	731:61	5	n
LEAF_NODE	731:62	731:62	3	,
PARAMETER_DECL	731:64	731:72	3	double * v
TYPE	731:64	731:70	4	double *
TYPE_NAME	731:64	731:64	5	double
LEAF_NODE	731:64	731:64	6	double
POINTER	731:70	731:70	5	*
LEAF_NODE	731:70	731:70	6	*
NAME	731:72	731:72	4	v
LEAF_NODE	731:72	731:72	5	v
LEAF_NODE	731:73	731:73	3	)
LEAF_NODE	732:0	732:0	2	{
STATEMENTS	733:1	816:16	2	
SIMPLE_DECL	733:1	733:30	3	char [ 10 * sizeof ( double ) ] buf ;
VAR_DECL	733:1	733:6	4	char [ 10 * sizeof ( double ) ] buf
TYPE	733:1	733:9	5	char [ 10 * sizeof ( double ) ]
TYPE_NAME	733:1	733:1	6	char
LEAF_NODE	733:1	733:1	7	char
TYPE_SUFFIX	733:9	733:29	6	[ 10 * sizeof ( double ) ]
LEAF_NODE	733:9	733:9	7	[
FIELD	733:10	733:10	7	10
LEAF_NODE	733:10	733:10	8	10
LEAF_NODE	733:13	733:13	7	*
FUNCTION_CALL	733:15	733:28	7	sizeof ( double )
CALLEE	733:15	733:15	8	sizeof
LEAF_NODE	733:15	733:15	9	sizeof
LEAF_NODE	733:21	733:21	8	(
ARGUMENT	733:22	733:22	8	double
FIELD	733:22	733:22	9	double
LEAF_NODE	733:22	733:22	10	double
LEAF_NODE	733:28	733:28	8	)
LEAF_NODE	733:29	733:29	7	]
NAME	733:6	733:6	5	buf
LEAF_NODE	733:6	733:6	6	buf
LEAF_NODE	733:30	733:30	4	;
SIMPLE_DECL	734:1	734:14	3	char * w ; w = buf ;
VAR_DECL	734:1	734:7	4	char * w ; w = buf
TYPE	734:1	734:5	5	char *
TYPE_NAME	734:1	734:1	6	char
LEAF_NODE	734:1	734:1	7	char
POINTER	734:5	734:5	6	*
LEAF_NODE	734:5	734:5	7	*
NAME	734:7	734:7	5	w
LEAF_NODE	734:7	734:7	6	w
LEAF_NODE	0:0	0:0	5	;
INIT	734:7	734:7	5	w = buf
ASSIGN	734:7	734:11	6	w = buf
LVAL	734:7	734:7	7	w
NAME	734:7	734:7	8	w
LEAF_NODE	734:7	734:7	9	w
ASSIGN_OP	734:9	734:9	7	=
LEAF_NODE	734:9	734:9	8	=
RVAL	734:11	734:11	7	buf
FIELD	734:11	734:11	8	buf
LEAF_NODE	734:11	734:11	9	buf
LEAF_NODE	734:14	734:14	4	;
SIMPLE_DECL	735:1	735:18	3	int i , int status ; status = 0 ;
INIT_DECL_LIST	735:1	735:1	4	int i , int status ; status = 0
VAR_DECL	735:1	735:5	5	int i
TYPE	735:1	735:1	6	int
TYPE_NAME	735:1	735:1	7	int
LEAF_NODE	735:1	735:1	8	int
NAME	735:5	735:5	6	i
LEAF_NODE	735:5	735:5	7	i
LEAF_NODE	735:6	735:6	5	,
VAR_DECL	735:1	735:8	5	int status ; status = 0
TYPE	735:1	735:1	6	int
TYPE_NAME	735:1	735:1	7	int
LEAF_NODE	735:1	735:1	8	int
NAME	735:8	735:8	6	status
LEAF_NODE	735:8	735:8	7	status
LEAF_NODE	0:0	0:0	6	;
INIT	735:8	735:8	6	status = 0
ASSIGN	735:8	735:17	7	status = 0
LVAL	735:8	735:8	8	status
NAME	735:8	735:8	9	status
LEAF_NODE	735:8	735:8	10	status
ASSIGN_OP	735:15	735:15	8	=
LEAF_NODE	735:15	735:15	9	=
RVAL	735:17	735:17	8	0
FIELD	735:17	735:17	9	0
LEAF_NODE	735:17	735:17	10	0
LEAF_NODE	735:18	735:18	4	;
LEAF_NODE	737:1	737:1	3	if
LEAF_NODE	737:4	737:4	3	(
LEAF_NODE	737:5	737:5	3	n
LEAF_NODE	737:7	737:7	3	*
LEAF_NODE	737:9	737:9	3	TIFFDataWidth
LEAF_NODE	737:22	737:22	3	(
LEAF_NODE	737:23	737:23	3	type
LEAF_NODE	737:27	737:27	3	)
LEAF_NODE	737:29	737:29	3	>
LEAF_NODE	737:31	737:31	3	sizeof
LEAF_NODE	737:38	737:38	3	buf
LEAF_NODE	737:41	737:41	3	)
EXPR_STATEMENT	738:2	738:50	3	w = ( char * ) _TIFFmalloc ( n * TIFFDataWidth ( type ) ) ;
EXPR	738:2	738:2	4	w = ( char * ) _TIFFmalloc ( n * TIFFDataWidth ( type ) )
ASSIGN	738:2	738:6	5	w = ( char * ) _TIFFmalloc ( n * TIFFDataWidth ( type ) )
LVAL	738:2	738:2	6	w
FIELD	738:2	738:2	7	w
LEAF_NODE	738:2	738:2	8	w
ASSIGN_OP	738:4	738:4	6	=
LEAF_NODE	738:4	738:4	7	=
RVAL	738:6	738:14	6	( char * ) _TIFFmalloc ( n * TIFFDataWidth ( type ) )
LEAF_NODE	738:6	738:6	7	(
TYPE_NAME	738:7	738:7	7	char
LEAF_NODE	738:7	738:7	8	char
LEAF_NODE	738:11	738:11	7	*
LEAF_NODE	738:12	738:12	7	)
FUNCTION_CALL	738:14	738:49	7	_TIFFmalloc ( n * TIFFDataWidth ( type ) )
CALLEE	738:14	738:14	8	_TIFFmalloc
LEAF_NODE	738:14	738:14	9	_TIFFmalloc
LEAF_NODE	738:25	738:25	8	(
ARGUMENT	738:26	738:30	8	n * TIFFDataWidth ( type )
FIELD	738:26	738:26	9	n
LEAF_NODE	738:26	738:26	10	n
LEAF_NODE	738:28	738:28	9	*
FUNCTION_CALL	738:30	738:48	9	TIFFDataWidth ( type )
CALLEE	738:30	738:30	10	TIFFDataWidth
LEAF_NODE	738:30	738:30	11	TIFFDataWidth
LEAF_NODE	738:43	738:43	10	(
ARGUMENT	738:44	738:44	10	type
FIELD	738:44	738:44	11	type
LEAF_NODE	738:44	738:44	12	type
LEAF_NODE	738:48	738:48	10	)
LEAF_NODE	738:49	738:49	8	)
LEAF_NODE	738:50	738:50	4	;
SELECTION	739:1	739:15	3	
KEYWORD	739:1	739:1	4	switch
LEAF_NODE	739:1	739:1	5	switch
LEAF_NODE	739:8	739:8	4	(
CONDITION	739:9	739:9	4	type
EXPR	739:9	739:9	5	type
FIELD	739:9	739:9	6	type
LEAF_NODE	739:9	739:9	7	type
LEAF_NODE	739:13	739:13	4	)
STATEMENTS	739:15	811:1	4	
LEAF_NODE	739:15	739:15	5	{
STATEMENTS	740:1	810:2	5	
LABEL	740:1	740:15	6	case TIFF_BYTE :
LEAF_NODE	740:1	740:1	7	case
LEAF_NODE	740:6	740:6	7	TIFF_BYTE
LEAF_NODE	740:15	740:15	7	:
LEAF_NODE	741:2	741:2	6	{
STATEMENTS	741:4	747:4	6	
SIMPLE_DECL	741:4	741:42	7	unsigned char * bp ; bp = ( unsigned char * ) w ;
VAR_DECL	741:4	741:19	8	unsigned char * bp ; bp = ( unsigned char * ) w
TYPE	741:4	741:17	9	unsigned char *
TYPE_NAME	741:4	741:13	10	unsigned char
LEAF_NODE	741:4	741:4	11	unsigned
LEAF_NODE	741:13	741:13	11	char
POINTER	741:17	741:17	10	*
LEAF_NODE	741:17	741:17	11	*
NAME	741:19	741:19	9	bp
LEAF_NODE	741:19	741:19	10	bp
LEAF_NODE	0:0	0:0	9	;
INIT	741:19	741:19	9	bp = ( unsigned char * ) w
ASSIGN	741:19	741:24	10	bp = ( unsigned char * ) w
LVAL	741:19	741:19	11	bp
NAME	741:19	741:19	12	bp
LEAF_NODE	741:19	741:19	13	bp
ASSIGN_OP	741:22	741:22	11	=
LEAF_NODE	741:22	741:22	12	=
RVAL	741:24	741:41	11	( unsigned char * ) w
LEAF_NODE	741:24	741:24	12	(
TYPE_NAME	741:25	741:34	12	unsigned char
LEAF_NODE	741:25	741:25	13	unsigned
LEAF_NODE	741:34	741:34	13	char
LEAF_NODE	741:38	741:38	12	*
LEAF_NODE	741:39	741:39	12	)
FIELD	741:41	741:41	12	w
LEAF_NODE	741:41	741:41	13	w
LEAF_NODE	741:42	741:42	8	;
ITERATION	742:4	743:3	7	
KEYWORD	742:4	742:4	8	for
LEAF_NODE	742:4	742:4	9	for
LEAF_NODE	742:8	742:8	8	(
FOR_INIT	742:9	742:14	8	i = 0 ;
EXPR	742:9	742:9	9	i = 0
ASSIGN	742:9	742:13	10	i = 0
LVAL	742:9	742:9	11	i
FIELD	742:9	742:9	12	i
LEAF_NODE	742:9	742:9	13	i
ASSIGN_OP	742:11	742:11	11	=
LEAF_NODE	742:11	742:11	12	=
RVAL	742:13	742:13	11	0
FIELD	742:13	742:13	12	0
LEAF_NODE	742:13	742:13	13	0
LEAF_NODE	742:14	742:14	9	;
CONDITION	742:16	742:16	8	i < n
EXPR	742:16	742:20	9	i < n
FIELD	742:16	742:16	10	i
LEAF_NODE	742:16	742:16	11	i
REL_OPERATOR	742:18	742:18	10	<
LEAF_NODE	742:18	742:18	11	<
FIELD	742:20	742:20	10	n
LEAF_NODE	742:20	742:20	11	n
LEAF_NODE	742:21	742:21	8	;
FOR_EXPR	742:23	742:23	8	i ++
EXPR	742:23	742:23	9	i ++
FIELD	742:23	742:24	10	i ++
LEAF_NODE	742:23	742:23	11	i
LEAF_NODE	742:24	742:24	11	++
LEAF_NODE	742:26	742:26	8	)
STATEMENTS	743:3	743:3	8	
EXPR_STATEMENT	743:3	743:31	9	bp [ i ] = ( unsigned char ) v [ i ] ;
EXPR	743:3	743:3	10	bp [ i ] = ( unsigned char ) v [ i ]
ASSIGN	743:3	743:11	11	bp [ i ] = ( unsigned char ) v [ i ]
LVAL	743:3	743:3	12	bp [ i ]
FIELD	743:3	743:7	13	bp [ i ]
LEAF_NODE	743:3	743:3	14	bp
LEAF_NODE	743:5	743:5	14	[
EXPR	743:6	743:6	14	i
FIELD	743:6	743:6	15	i
LEAF_NODE	743:6	743:6	16	i
LEAF_NODE	743:7	743:7	14	]
ASSIGN_OP	743:9	743:9	12	=
LEAF_NODE	743:9	743:9	13	=
RVAL	743:11	743:27	12	( unsigned char ) v [ i ]
LEAF_NODE	743:11	743:11	13	(
TYPE_NAME	743:12	743:21	13	unsigned char
LEAF_NODE	743:12	743:12	14	unsigned
LEAF_NODE	743:21	743:21	14	char
LEAF_NODE	743:25	743:25	13	)
FIELD	743:27	743:30	13	v [ i ]
LEAF_NODE	743:27	743:27	14	v
LEAF_NODE	743:28	743:28	14	[
EXPR	743:29	743:29	14	i
FIELD	743:29	743:29	15	i
LEAF_NODE	743:29	743:29	16	i
LEAF_NODE	743:30	743:30	14	]
LEAF_NODE	743:31	743:31	10	;
EXPR_STATEMENT	744:4	744:23	7	dir -> tdir_tag = tag ;
EXPR	744:4	744:4	8	dir -> tdir_tag = tag
ASSIGN	744:4	744:20	9	dir -> tdir_tag = tag
LVAL	744:4	744:4	10	dir -> tdir_tag
FIELD	744:4	744:9	11	dir -> tdir_tag
LEAF_NODE	744:4	744:4	12	dir
LEAF_NODE	744:7	744:7	12	->
LEAF_NODE	744:9	744:9	12	tdir_tag
ASSIGN_OP	744:18	744:18	10	=
LEAF_NODE	744:18	744:18	11	=
RVAL	744:20	744:20	10	tag
FIELD	744:20	744:20	11	tag
LEAF_NODE	744:20	744:20	12	tag
LEAF_NODE	744:23	744:23	8	;
EXPR_STATEMENT	745:4	745:33	7	dir -> tdir_type = ( short ) type ;
EXPR	745:4	745:4	8	dir -> tdir_type = ( short ) type
ASSIGN	745:4	745:21	9	dir -> tdir_type = ( short ) type
LVAL	745:4	745:4	10	dir -> tdir_type
FIELD	745:4	745:9	11	dir -> tdir_type
LEAF_NODE	745:4	745:4	12	dir
LEAF_NODE	745:7	745:7	12	->
LEAF_NODE	745:9	745:9	12	tdir_type
ASSIGN_OP	745:19	745:19	10	=
LEAF_NODE	745:19	745:19	11	=
RVAL	745:21	745:29	10	( short ) type
LEAF_NODE	745:21	745:21	11	(
TYPE_NAME	745:22	745:22	11	short
LEAF_NODE	745:22	745:22	12	short
LEAF_NODE	745:27	745:27	11	)
FIELD	745:29	745:29	11	type
LEAF_NODE	745:29	745:29	12	type
LEAF_NODE	745:33	745:33	8	;
EXPR_STATEMENT	746:4	746:23	7	dir -> tdir_count = n ;
EXPR	746:4	746:4	8	dir -> tdir_count = n
ASSIGN	746:4	746:22	9	dir -> tdir_count = n
LVAL	746:4	746:4	10	dir -> tdir_count
FIELD	746:4	746:9	11	dir -> tdir_count
LEAF_NODE	746:4	746:4	12	dir
LEAF_NODE	746:7	746:7	12	->
LEAF_NODE	746:9	746:9	12	tdir_count
ASSIGN_OP	746:20	746:20	10	=
LEAF_NODE	746:20	746:20	11	=
RVAL	746:22	746:22	10	n
FIELD	746:22	746:22	11	n
LEAF_NODE	746:22	746:22	12	n
LEAF_NODE	746:23	746:23	8	;
SELECTION	747:4	748:3	7	
KEYWORD	747:4	747:4	8	if
LEAF_NODE	747:4	747:4	9	if
LEAF_NODE	747:7	747:7	8	(
CONDITION	747:8	747:8	8	! TIFFWriteByteArray ( tif , dir , ( char * ) bp )
EXPR	747:8	747:8	9	! TIFFWriteByteArray ( tif , dir , ( char * ) bp )
UNARY_EXPR	747:8	747:9	10	! TIFFWriteByteArray ( tif , dir , ( char * ) bp )
UNARY_OPERATOR	747:8	747:8	11	!
LEAF_NODE	747:8	747:8	12	!
FUNCTION_CALL	747:9	747:48	11	TIFFWriteByteArray ( tif , dir , ( char * ) bp )
CALLEE	747:9	747:9	12	TIFFWriteByteArray
LEAF_NODE	747:9	747:9	13	TIFFWriteByteArray
LEAF_NODE	747:27	747:27	12	(
ARGUMENT	747:28	747:28	12	tif
FIELD	747:28	747:28	13	tif
LEAF_NODE	747:28	747:28	14	tif
LEAF_NODE	747:31	747:31	12	,
ARGUMENT	747:33	747:33	12	dir
FIELD	747:33	747:33	13	dir
LEAF_NODE	747:33	747:33	14	dir
LEAF_NODE	747:36	747:36	12	,
ARGUMENT	747:38	747:46	12	( char * ) bp
LEAF_NODE	747:38	747:38	13	(
TYPE_NAME	747:39	747:39	13	char
LEAF_NODE	747:39	747:39	14	char
LEAF_NODE	747:43	747:43	13	*
LEAF_NODE	747:44	747:44	13	)
FIELD	747:46	747:46	13	bp
LEAF_NODE	747:46	747:46	14	bp
LEAF_NODE	747:48	747:48	12	)
LEAF_NODE	747:49	747:49	8	)
STATEMENTS	748:3	748:3	8	
JUMP_STATEMENT	748:3	748:11	9	goto out ;
KEYWORD	748:3	748:3	10	goto
LEAF_NODE	748:3	748:3	11	goto
DESTINATION	748:8	748:8	10	out
LEAF_NODE	748:8	748:8	11	out
LEAF_NODE	748:11	748:11	10	;
LEAF_NODE	749:2	749:2	6	}
JUMP_STATEMENT	750:2	750:7	6	break DESTINATION ;
KEYWORD	750:2	750:2	7	break
LEAF_NODE	750:2	750:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	750:7	750:7	7	;
LABEL	751:1	751:16	6	case TIFF_SBYTE :
LEAF_NODE	751:1	751:1	7	case
LEAF_NODE	751:6	751:6	7	TIFF_SBYTE
LEAF_NODE	751:16	751:16	7	:
LEAF_NODE	752:2	752:2	6	{
STATEMENTS	752:4	758:4	6	
SIMPLE_DECL	752:4	752:38	7	signed char * bp ; bp = ( signed char * ) w ;
VAR_DECL	752:4	752:17	8	signed char * bp ; bp = ( signed char * ) w
TYPE	752:4	752:15	9	signed char *
TYPE_NAME	752:4	752:11	10	signed char
LEAF_NODE	752:4	752:4	11	signed
LEAF_NODE	752:11	752:11	11	char
POINTER	752:15	752:15	10	*
LEAF_NODE	752:15	752:15	11	*
NAME	752:17	752:17	9	bp
LEAF_NODE	752:17	752:17	10	bp
LEAF_NODE	0:0	0:0	9	;
INIT	752:17	752:17	9	bp = ( signed char * ) w
ASSIGN	752:17	752:22	10	bp = ( signed char * ) w
LVAL	752:17	752:17	11	bp
NAME	752:17	752:17	12	bp
LEAF_NODE	752:17	752:17	13	bp
ASSIGN_OP	752:20	752:20	11	=
LEAF_NODE	752:20	752:20	12	=
RVAL	752:22	752:37	11	( signed char * ) w
LEAF_NODE	752:22	752:22	12	(
TYPE_NAME	752:23	752:30	12	signed char
LEAF_NODE	752:23	752:23	13	signed
LEAF_NODE	752:30	752:30	13	char
LEAF_NODE	752:34	752:34	12	*
LEAF_NODE	752:35	752:35	12	)
FIELD	752:37	752:37	12	w
LEAF_NODE	752:37	752:37	13	w
LEAF_NODE	752:38	752:38	8	;
ITERATION	753:4	754:3	7	
KEYWORD	753:4	753:4	8	for
LEAF_NODE	753:4	753:4	9	for
LEAF_NODE	753:8	753:8	8	(
FOR_INIT	753:9	753:14	8	i = 0 ;
EXPR	753:9	753:9	9	i = 0
ASSIGN	753:9	753:13	10	i = 0
LVAL	753:9	753:9	11	i
FIELD	753:9	753:9	12	i
LEAF_NODE	753:9	753:9	13	i
ASSIGN_OP	753:11	753:11	11	=
LEAF_NODE	753:11	753:11	12	=
RVAL	753:13	753:13	11	0
FIELD	753:13	753:13	12	0
LEAF_NODE	753:13	753:13	13	0
LEAF_NODE	753:14	753:14	9	;
CONDITION	753:16	753:16	8	i < n
EXPR	753:16	753:20	9	i < n
FIELD	753:16	753:16	10	i
LEAF_NODE	753:16	753:16	11	i
REL_OPERATOR	753:18	753:18	10	<
LEAF_NODE	753:18	753:18	11	<
FIELD	753:20	753:20	10	n
LEAF_NODE	753:20	753:20	11	n
LEAF_NODE	753:21	753:21	8	;
FOR_EXPR	753:23	753:23	8	i ++
EXPR	753:23	753:23	9	i ++
FIELD	753:23	753:24	10	i ++
LEAF_NODE	753:23	753:23	11	i
LEAF_NODE	753:24	753:24	11	++
LEAF_NODE	753:26	753:26	8	)
STATEMENTS	754:3	754:3	8	
EXPR_STATEMENT	754:3	754:29	9	bp [ i ] = ( signed char ) v [ i ] ;
EXPR	754:3	754:3	10	bp [ i ] = ( signed char ) v [ i ]
ASSIGN	754:3	754:11	11	bp [ i ] = ( signed char ) v [ i ]
LVAL	754:3	754:3	12	bp [ i ]
FIELD	754:3	754:7	13	bp [ i ]
LEAF_NODE	754:3	754:3	14	bp
LEAF_NODE	754:5	754:5	14	[
EXPR	754:6	754:6	14	i
FIELD	754:6	754:6	15	i
LEAF_NODE	754:6	754:6	16	i
LEAF_NODE	754:7	754:7	14	]
ASSIGN_OP	754:9	754:9	12	=
LEAF_NODE	754:9	754:9	13	=
RVAL	754:11	754:25	12	( signed char ) v [ i ]
LEAF_NODE	754:11	754:11	13	(
TYPE_NAME	754:12	754:19	13	signed char
LEAF_NODE	754:12	754:12	14	signed
LEAF_NODE	754:19	754:19	14	char
LEAF_NODE	754:23	754:23	13	)
FIELD	754:25	754:28	13	v [ i ]
LEAF_NODE	754:25	754:25	14	v
LEAF_NODE	754:26	754:26	14	[
EXPR	754:27	754:27	14	i
FIELD	754:27	754:27	15	i
LEAF_NODE	754:27	754:27	16	i
LEAF_NODE	754:28	754:28	14	]
LEAF_NODE	754:29	754:29	10	;
EXPR_STATEMENT	755:4	755:23	7	dir -> tdir_tag = tag ;
EXPR	755:4	755:4	8	dir -> tdir_tag = tag
ASSIGN	755:4	755:20	9	dir -> tdir_tag = tag
LVAL	755:4	755:4	10	dir -> tdir_tag
FIELD	755:4	755:9	11	dir -> tdir_tag
LEAF_NODE	755:4	755:4	12	dir
LEAF_NODE	755:7	755:7	12	->
LEAF_NODE	755:9	755:9	12	tdir_tag
ASSIGN_OP	755:18	755:18	10	=
LEAF_NODE	755:18	755:18	11	=
RVAL	755:20	755:20	10	tag
FIELD	755:20	755:20	11	tag
LEAF_NODE	755:20	755:20	12	tag
LEAF_NODE	755:23	755:23	8	;
EXPR_STATEMENT	756:4	756:33	7	dir -> tdir_type = ( short ) type ;
EXPR	756:4	756:4	8	dir -> tdir_type = ( short ) type
ASSIGN	756:4	756:21	9	dir -> tdir_type = ( short ) type
LVAL	756:4	756:4	10	dir -> tdir_type
FIELD	756:4	756:9	11	dir -> tdir_type
LEAF_NODE	756:4	756:4	12	dir
LEAF_NODE	756:7	756:7	12	->
LEAF_NODE	756:9	756:9	12	tdir_type
ASSIGN_OP	756:19	756:19	10	=
LEAF_NODE	756:19	756:19	11	=
RVAL	756:21	756:29	10	( short ) type
LEAF_NODE	756:21	756:21	11	(
TYPE_NAME	756:22	756:22	11	short
LEAF_NODE	756:22	756:22	12	short
LEAF_NODE	756:27	756:27	11	)
FIELD	756:29	756:29	11	type
LEAF_NODE	756:29	756:29	12	type
LEAF_NODE	756:33	756:33	8	;
EXPR_STATEMENT	757:4	757:23	7	dir -> tdir_count = n ;
EXPR	757:4	757:4	8	dir -> tdir_count = n
ASSIGN	757:4	757:22	9	dir -> tdir_count = n
LVAL	757:4	757:4	10	dir -> tdir_count
FIELD	757:4	757:9	11	dir -> tdir_count
LEAF_NODE	757:4	757:4	12	dir
LEAF_NODE	757:7	757:7	12	->
LEAF_NODE	757:9	757:9	12	tdir_count
ASSIGN_OP	757:20	757:20	10	=
LEAF_NODE	757:20	757:20	11	=
RVAL	757:22	757:22	10	n
FIELD	757:22	757:22	11	n
LEAF_NODE	757:22	757:22	12	n
LEAF_NODE	757:23	757:23	8	;
SELECTION	758:4	759:3	7	
KEYWORD	758:4	758:4	8	if
LEAF_NODE	758:4	758:4	9	if
LEAF_NODE	758:7	758:7	8	(
CONDITION	758:8	758:8	8	! TIFFWriteByteArray ( tif , dir , ( char * ) bp )
EXPR	758:8	758:8	9	! TIFFWriteByteArray ( tif , dir , ( char * ) bp )
UNARY_EXPR	758:8	758:9	10	! TIFFWriteByteArray ( tif , dir , ( char * ) bp )
UNARY_OPERATOR	758:8	758:8	11	!
LEAF_NODE	758:8	758:8	12	!
FUNCTION_CALL	758:9	758:48	11	TIFFWriteByteArray ( tif , dir , ( char * ) bp )
CALLEE	758:9	758:9	12	TIFFWriteByteArray
LEAF_NODE	758:9	758:9	13	TIFFWriteByteArray
LEAF_NODE	758:27	758:27	12	(
ARGUMENT	758:28	758:28	12	tif
FIELD	758:28	758:28	13	tif
LEAF_NODE	758:28	758:28	14	tif
LEAF_NODE	758:31	758:31	12	,
ARGUMENT	758:33	758:33	12	dir
FIELD	758:33	758:33	13	dir
LEAF_NODE	758:33	758:33	14	dir
LEAF_NODE	758:36	758:36	12	,
ARGUMENT	758:38	758:46	12	( char * ) bp
LEAF_NODE	758:38	758:38	13	(
TYPE_NAME	758:39	758:39	13	char
LEAF_NODE	758:39	758:39	14	char
LEAF_NODE	758:43	758:43	13	*
LEAF_NODE	758:44	758:44	13	)
FIELD	758:46	758:46	13	bp
LEAF_NODE	758:46	758:46	14	bp
LEAF_NODE	758:48	758:48	12	)
LEAF_NODE	758:49	758:49	8	)
STATEMENTS	759:3	759:3	8	
JUMP_STATEMENT	759:3	759:11	9	goto out ;
KEYWORD	759:3	759:3	10	goto
LEAF_NODE	759:3	759:3	11	goto
DESTINATION	759:8	759:8	10	out
LEAF_NODE	759:8	759:8	11	out
LEAF_NODE	759:11	759:11	10	;
LEAF_NODE	760:2	760:2	6	}
JUMP_STATEMENT	761:2	761:7	6	break DESTINATION ;
KEYWORD	761:2	761:2	7	break
LEAF_NODE	761:2	761:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	761:7	761:7	7	;
LABEL	762:1	762:16	6	case TIFF_SHORT :
LEAF_NODE	762:1	762:1	7	case
LEAF_NODE	762:6	762:6	7	TIFF_SHORT
LEAF_NODE	762:16	762:16	7	:
LEAF_NODE	763:2	763:2	6	{
STATEMENTS	763:4	766:4	6	
SIMPLE_DECL	763:4	763:28	7	uint16 * bp ; bp = ( uint16 * ) w ;
VAR_DECL	763:4	763:12	8	uint16 * bp ; bp = ( uint16 * ) w
TYPE	763:4	763:10	9	uint16 *
TYPE_NAME	763:4	763:4	10	uint16
LEAF_NODE	763:4	763:4	11	uint16
POINTER	763:10	763:10	10	*
LEAF_NODE	763:10	763:10	11	*
NAME	763:12	763:12	9	bp
LEAF_NODE	763:12	763:12	10	bp
LEAF_NODE	0:0	0:0	9	;
INIT	763:12	763:12	9	bp = ( uint16 * ) w
ASSIGN	763:12	763:17	10	bp = ( uint16 * ) w
LVAL	763:12	763:12	11	bp
NAME	763:12	763:12	12	bp
LEAF_NODE	763:12	763:12	13	bp
ASSIGN_OP	763:15	763:15	11	=
LEAF_NODE	763:15	763:15	12	=
RVAL	763:17	763:27	11	( uint16 * ) w
LEAF_NODE	763:17	763:17	12	(
TYPE_NAME	763:18	763:18	12	uint16
LEAF_NODE	763:18	763:18	13	uint16
LEAF_NODE	763:24	763:24	12	*
LEAF_NODE	763:25	763:25	12	)
FIELD	763:27	763:27	12	w
LEAF_NODE	763:27	763:27	13	w
LEAF_NODE	763:28	763:28	8	;
ITERATION	764:4	765:3	7	
KEYWORD	764:4	764:4	8	for
LEAF_NODE	764:4	764:4	9	for
LEAF_NODE	764:8	764:8	8	(
FOR_INIT	764:9	764:14	8	i = 0 ;
EXPR	764:9	764:9	9	i = 0
ASSIGN	764:9	764:13	10	i = 0
LVAL	764:9	764:9	11	i
FIELD	764:9	764:9	12	i
LEAF_NODE	764:9	764:9	13	i
ASSIGN_OP	764:11	764:11	11	=
LEAF_NODE	764:11	764:11	12	=
RVAL	764:13	764:13	11	0
FIELD	764:13	764:13	12	0
LEAF_NODE	764:13	764:13	13	0
LEAF_NODE	764:14	764:14	9	;
CONDITION	764:16	764:16	8	i < n
EXPR	764:16	764:20	9	i < n
FIELD	764:16	764:16	10	i
LEAF_NODE	764:16	764:16	11	i
REL_OPERATOR	764:18	764:18	10	<
LEAF_NODE	764:18	764:18	11	<
FIELD	764:20	764:20	10	n
LEAF_NODE	764:20	764:20	11	n
LEAF_NODE	764:21	764:21	8	;
FOR_EXPR	764:23	764:23	8	i ++
EXPR	764:23	764:23	9	i ++
FIELD	764:23	764:24	10	i ++
LEAF_NODE	764:23	764:23	11	i
LEAF_NODE	764:24	764:24	11	++
LEAF_NODE	764:26	764:26	8	)
STATEMENTS	765:3	765:3	8	
EXPR_STATEMENT	765:3	765:24	9	bp [ i ] = ( uint16 ) v [ i ] ;
EXPR	765:3	765:3	10	bp [ i ] = ( uint16 ) v [ i ]
ASSIGN	765:3	765:11	11	bp [ i ] = ( uint16 ) v [ i ]
LVAL	765:3	765:3	12	bp [ i ]
FIELD	765:3	765:7	13	bp [ i ]
LEAF_NODE	765:3	765:3	14	bp
LEAF_NODE	765:5	765:5	14	[
EXPR	765:6	765:6	14	i
FIELD	765:6	765:6	15	i
LEAF_NODE	765:6	765:6	16	i
LEAF_NODE	765:7	765:7	14	]
ASSIGN_OP	765:9	765:9	12	=
LEAF_NODE	765:9	765:9	13	=
RVAL	765:11	765:20	12	( uint16 ) v [ i ]
LEAF_NODE	765:11	765:11	13	(
TYPE_NAME	765:12	765:12	13	uint16
LEAF_NODE	765:12	765:12	14	uint16
LEAF_NODE	765:18	765:18	13	)
FIELD	765:20	765:23	13	v [ i ]
LEAF_NODE	765:20	765:20	14	v
LEAF_NODE	765:21	765:21	14	[
EXPR	765:22	765:22	14	i
FIELD	765:22	765:22	15	i
LEAF_NODE	765:22	765:22	16	i
LEAF_NODE	765:23	765:23	14	]
LEAF_NODE	765:24	765:24	10	;
SELECTION	766:4	767:4	7	
KEYWORD	766:4	766:4	8	if
LEAF_NODE	766:4	766:4	9	if
LEAF_NODE	766:7	766:7	8	(
CONDITION	766:8	766:8	8	! TIFFWriteShortArray ( tif , type , tag , dir , n , ( uint16 * ) bp )
EXPR	766:8	766:8	9	! TIFFWriteShortArray ( tif , type , tag , dir , n , ( uint16 * ) bp )
UNARY_EXPR	766:8	766:9	10	! TIFFWriteShortArray ( tif , type , tag , dir , n , ( uint16 * ) bp )
UNARY_OPERATOR	766:8	766:8	11	!
LEAF_NODE	766:8	766:8	12	!
FUNCTION_CALL	766:9	766:64	11	TIFFWriteShortArray ( tif , type , tag , dir , n , ( uint16 * ) bp )
CALLEE	766:9	766:9	12	TIFFWriteShortArray
LEAF_NODE	766:9	766:9	13	TIFFWriteShortArray
LEAF_NODE	766:28	766:28	12	(
ARGUMENT	766:29	766:29	12	tif
FIELD	766:29	766:29	13	tif
LEAF_NODE	766:29	766:29	14	tif
LEAF_NODE	766:32	766:32	12	,
ARGUMENT	766:34	766:34	12	type
FIELD	766:34	766:34	13	type
LEAF_NODE	766:34	766:34	14	type
LEAF_NODE	766:38	766:38	12	,
ARGUMENT	766:40	766:40	12	tag
FIELD	766:40	766:40	13	tag
LEAF_NODE	766:40	766:40	14	tag
LEAF_NODE	766:43	766:43	12	,
ARGUMENT	766:45	766:45	12	dir
FIELD	766:45	766:45	13	dir
LEAF_NODE	766:45	766:45	14	dir
LEAF_NODE	766:48	766:48	12	,
ARGUMENT	766:50	766:50	12	n
FIELD	766:50	766:50	13	n
LEAF_NODE	766:50	766:50	14	n
LEAF_NODE	766:51	766:51	12	,
ARGUMENT	766:53	766:62	12	( uint16 * ) bp
LEAF_NODE	766:53	766:53	13	(
TYPE_NAME	766:54	766:54	13	uint16
LEAF_NODE	766:54	766:54	14	uint16
LEAF_NODE	766:60	766:60	13	*
LEAF_NODE	766:61	766:61	13	)
FIELD	766:62	766:62	13	bp
LEAF_NODE	766:62	766:62	14	bp
LEAF_NODE	766:64	766:64	12	)
LEAF_NODE	766:65	766:65	8	)
STATEMENTS	767:4	767:4	8	
JUMP_STATEMENT	767:4	767:12	9	goto out ;
KEYWORD	767:4	767:4	10	goto
LEAF_NODE	767:4	767:4	11	goto
DESTINATION	767:9	767:9	10	out
LEAF_NODE	767:9	767:9	11	out
LEAF_NODE	767:12	767:12	10	;
LEAF_NODE	768:2	768:2	6	}
JUMP_STATEMENT	769:2	769:7	6	break DESTINATION ;
KEYWORD	769:2	769:2	7	break
LEAF_NODE	769:2	769:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	769:7	769:7	7	;
LABEL	770:1	770:17	6	case TIFF_SSHORT :
LEAF_NODE	770:1	770:1	7	case
LEAF_NODE	770:6	770:6	7	TIFF_SSHORT
LEAF_NODE	770:17	770:17	7	:
LEAF_NODE	771:2	771:2	6	{
STATEMENTS	771:4	774:4	6	
SIMPLE_DECL	771:4	771:26	7	int16 * bp ; bp = ( int16 * ) w ;
VAR_DECL	771:4	771:11	8	int16 * bp ; bp = ( int16 * ) w
TYPE	771:4	771:9	9	int16 *
TYPE_NAME	771:4	771:4	10	int16
LEAF_NODE	771:4	771:4	11	int16
POINTER	771:9	771:9	10	*
LEAF_NODE	771:9	771:9	11	*
NAME	771:11	771:11	9	bp
LEAF_NODE	771:11	771:11	10	bp
LEAF_NODE	0:0	0:0	9	;
INIT	771:11	771:11	9	bp = ( int16 * ) w
ASSIGN	771:11	771:16	10	bp = ( int16 * ) w
LVAL	771:11	771:11	11	bp
NAME	771:11	771:11	12	bp
LEAF_NODE	771:11	771:11	13	bp
ASSIGN_OP	771:14	771:14	11	=
LEAF_NODE	771:14	771:14	12	=
RVAL	771:16	771:25	11	( int16 * ) w
LEAF_NODE	771:16	771:16	12	(
TYPE_NAME	771:17	771:17	12	int16
LEAF_NODE	771:17	771:17	13	int16
LEAF_NODE	771:22	771:22	12	*
LEAF_NODE	771:23	771:23	12	)
FIELD	771:25	771:25	12	w
LEAF_NODE	771:25	771:25	13	w
LEAF_NODE	771:26	771:26	8	;
ITERATION	772:4	773:3	7	
KEYWORD	772:4	772:4	8	for
LEAF_NODE	772:4	772:4	9	for
LEAF_NODE	772:8	772:8	8	(
FOR_INIT	772:9	772:14	8	i = 0 ;
EXPR	772:9	772:9	9	i = 0
ASSIGN	772:9	772:13	10	i = 0
LVAL	772:9	772:9	11	i
FIELD	772:9	772:9	12	i
LEAF_NODE	772:9	772:9	13	i
ASSIGN_OP	772:11	772:11	11	=
LEAF_NODE	772:11	772:11	12	=
RVAL	772:13	772:13	11	0
FIELD	772:13	772:13	12	0
LEAF_NODE	772:13	772:13	13	0
LEAF_NODE	772:14	772:14	9	;
CONDITION	772:16	772:16	8	i < n
EXPR	772:16	772:20	9	i < n
FIELD	772:16	772:16	10	i
LEAF_NODE	772:16	772:16	11	i
REL_OPERATOR	772:18	772:18	10	<
LEAF_NODE	772:18	772:18	11	<
FIELD	772:20	772:20	10	n
LEAF_NODE	772:20	772:20	11	n
LEAF_NODE	772:21	772:21	8	;
FOR_EXPR	772:23	772:23	8	i ++
EXPR	772:23	772:23	9	i ++
FIELD	772:23	772:24	10	i ++
LEAF_NODE	772:23	772:23	11	i
LEAF_NODE	772:24	772:24	11	++
LEAF_NODE	772:26	772:26	8	)
STATEMENTS	773:3	773:3	8	
EXPR_STATEMENT	773:3	773:23	9	bp [ i ] = ( int16 ) v [ i ] ;
EXPR	773:3	773:3	10	bp [ i ] = ( int16 ) v [ i ]
ASSIGN	773:3	773:11	11	bp [ i ] = ( int16 ) v [ i ]
LVAL	773:3	773:3	12	bp [ i ]
FIELD	773:3	773:7	13	bp [ i ]
LEAF_NODE	773:3	773:3	14	bp
LEAF_NODE	773:5	773:5	14	[
EXPR	773:6	773:6	14	i
FIELD	773:6	773:6	15	i
LEAF_NODE	773:6	773:6	16	i
LEAF_NODE	773:7	773:7	14	]
ASSIGN_OP	773:9	773:9	12	=
LEAF_NODE	773:9	773:9	13	=
RVAL	773:11	773:19	12	( int16 ) v [ i ]
LEAF_NODE	773:11	773:11	13	(
TYPE_NAME	773:12	773:12	13	int16
LEAF_NODE	773:12	773:12	14	int16
LEAF_NODE	773:17	773:17	13	)
FIELD	773:19	773:22	13	v [ i ]
LEAF_NODE	773:19	773:19	14	v
LEAF_NODE	773:20	773:20	14	[
EXPR	773:21	773:21	14	i
FIELD	773:21	773:21	15	i
LEAF_NODE	773:21	773:21	16	i
LEAF_NODE	773:22	773:22	14	]
LEAF_NODE	773:23	773:23	10	;
SELECTION	774:4	775:3	7	
KEYWORD	774:4	774:4	8	if
LEAF_NODE	774:4	774:4	9	if
LEAF_NODE	774:7	774:7	8	(
CONDITION	774:8	774:8	8	! TIFFWriteShortArray ( tif , type , tag , dir , n , ( uint16 * ) bp )
EXPR	774:8	774:8	9	! TIFFWriteShortArray ( tif , type , tag , dir , n , ( uint16 * ) bp )
UNARY_EXPR	774:8	774:9	10	! TIFFWriteShortArray ( tif , type , tag , dir , n , ( uint16 * ) bp )
UNARY_OPERATOR	774:8	774:8	11	!
LEAF_NODE	774:8	774:8	12	!
FUNCTION_CALL	774:9	774:64	11	TIFFWriteShortArray ( tif , type , tag , dir , n , ( uint16 * ) bp )
CALLEE	774:9	774:9	12	TIFFWriteShortArray
LEAF_NODE	774:9	774:9	13	TIFFWriteShortArray
LEAF_NODE	774:28	774:28	12	(
ARGUMENT	774:29	774:29	12	tif
FIELD	774:29	774:29	13	tif
LEAF_NODE	774:29	774:29	14	tif
LEAF_NODE	774:32	774:32	12	,
ARGUMENT	774:34	774:34	12	type
FIELD	774:34	774:34	13	type
LEAF_NODE	774:34	774:34	14	type
LEAF_NODE	774:38	774:38	12	,
ARGUMENT	774:40	774:40	12	tag
FIELD	774:40	774:40	13	tag
LEAF_NODE	774:40	774:40	14	tag
LEAF_NODE	774:43	774:43	12	,
ARGUMENT	774:45	774:45	12	dir
FIELD	774:45	774:45	13	dir
LEAF_NODE	774:45	774:45	14	dir
LEAF_NODE	774:48	774:48	12	,
ARGUMENT	774:50	774:50	12	n
FIELD	774:50	774:50	13	n
LEAF_NODE	774:50	774:50	14	n
LEAF_NODE	774:51	774:51	12	,
ARGUMENT	774:53	774:62	12	( uint16 * ) bp
LEAF_NODE	774:53	774:53	13	(
TYPE_NAME	774:54	774:54	13	uint16
LEAF_NODE	774:54	774:54	14	uint16
LEAF_NODE	774:60	774:60	13	*
LEAF_NODE	774:61	774:61	13	)
FIELD	774:62	774:62	13	bp
LEAF_NODE	774:62	774:62	14	bp
LEAF_NODE	774:64	774:64	12	)
LEAF_NODE	774:65	774:65	8	)
STATEMENTS	775:3	775:3	8	
JUMP_STATEMENT	775:3	775:11	9	goto out ;
KEYWORD	775:3	775:3	10	goto
LEAF_NODE	775:3	775:3	11	goto
DESTINATION	775:8	775:8	10	out
LEAF_NODE	775:8	775:8	11	out
LEAF_NODE	775:11	775:11	10	;
LEAF_NODE	776:2	776:2	6	}
JUMP_STATEMENT	777:2	777:7	6	break DESTINATION ;
KEYWORD	777:2	777:2	7	break
LEAF_NODE	777:2	777:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	777:7	777:7	7	;
LABEL	778:1	778:15	6	case TIFF_LONG :
LEAF_NODE	778:1	778:1	7	case
LEAF_NODE	778:6	778:6	7	TIFF_LONG
LEAF_NODE	778:15	778:15	7	:
LEAF_NODE	779:2	779:2	6	{
STATEMENTS	779:4	782:4	6	
SIMPLE_DECL	779:4	779:28	7	uint32 * bp ; bp = ( uint32 * ) w ;
VAR_DECL	779:4	779:12	8	uint32 * bp ; bp = ( uint32 * ) w
TYPE	779:4	779:10	9	uint32 *
TYPE_NAME	779:4	779:4	10	uint32
LEAF_NODE	779:4	779:4	11	uint32
POINTER	779:10	779:10	10	*
LEAF_NODE	779:10	779:10	11	*
NAME	779:12	779:12	9	bp
LEAF_NODE	779:12	779:12	10	bp
LEAF_NODE	0:0	0:0	9	;
INIT	779:12	779:12	9	bp = ( uint32 * ) w
ASSIGN	779:12	779:17	10	bp = ( uint32 * ) w
LVAL	779:12	779:12	11	bp
NAME	779:12	779:12	12	bp
LEAF_NODE	779:12	779:12	13	bp
ASSIGN_OP	779:15	779:15	11	=
LEAF_NODE	779:15	779:15	12	=
RVAL	779:17	779:27	11	( uint32 * ) w
LEAF_NODE	779:17	779:17	12	(
TYPE_NAME	779:18	779:18	12	uint32
LEAF_NODE	779:18	779:18	13	uint32
LEAF_NODE	779:24	779:24	12	*
LEAF_NODE	779:25	779:25	12	)
FIELD	779:27	779:27	12	w
LEAF_NODE	779:27	779:27	13	w
LEAF_NODE	779:28	779:28	8	;
ITERATION	780:4	781:3	7	
KEYWORD	780:4	780:4	8	for
LEAF_NODE	780:4	780:4	9	for
LEAF_NODE	780:8	780:8	8	(
FOR_INIT	780:9	780:14	8	i = 0 ;
EXPR	780:9	780:9	9	i = 0
ASSIGN	780:9	780:13	10	i = 0
LVAL	780:9	780:9	11	i
FIELD	780:9	780:9	12	i
LEAF_NODE	780:9	780:9	13	i
ASSIGN_OP	780:11	780:11	11	=
LEAF_NODE	780:11	780:11	12	=
RVAL	780:13	780:13	11	0
FIELD	780:13	780:13	12	0
LEAF_NODE	780:13	780:13	13	0
LEAF_NODE	780:14	780:14	9	;
CONDITION	780:16	780:16	8	i < n
EXPR	780:16	780:20	9	i < n
FIELD	780:16	780:16	10	i
LEAF_NODE	780:16	780:16	11	i
REL_OPERATOR	780:18	780:18	10	<
LEAF_NODE	780:18	780:18	11	<
FIELD	780:20	780:20	10	n
LEAF_NODE	780:20	780:20	11	n
LEAF_NODE	780:21	780:21	8	;
FOR_EXPR	780:23	780:23	8	i ++
EXPR	780:23	780:23	9	i ++
FIELD	780:23	780:24	10	i ++
LEAF_NODE	780:23	780:23	11	i
LEAF_NODE	780:24	780:24	11	++
LEAF_NODE	780:26	780:26	8	)
STATEMENTS	781:3	781:3	8	
EXPR_STATEMENT	781:3	781:24	9	bp [ i ] = ( uint32 ) v [ i ] ;
EXPR	781:3	781:3	10	bp [ i ] = ( uint32 ) v [ i ]
ASSIGN	781:3	781:11	11	bp [ i ] = ( uint32 ) v [ i ]
LVAL	781:3	781:3	12	bp [ i ]
FIELD	781:3	781:7	13	bp [ i ]
LEAF_NODE	781:3	781:3	14	bp
LEAF_NODE	781:5	781:5	14	[
EXPR	781:6	781:6	14	i
FIELD	781:6	781:6	15	i
LEAF_NODE	781:6	781:6	16	i
LEAF_NODE	781:7	781:7	14	]
ASSIGN_OP	781:9	781:9	12	=
LEAF_NODE	781:9	781:9	13	=
RVAL	781:11	781:20	12	( uint32 ) v [ i ]
LEAF_NODE	781:11	781:11	13	(
TYPE_NAME	781:12	781:12	13	uint32
LEAF_NODE	781:12	781:12	14	uint32
LEAF_NODE	781:18	781:18	13	)
FIELD	781:20	781:23	13	v [ i ]
LEAF_NODE	781:20	781:20	14	v
LEAF_NODE	781:21	781:21	14	[
EXPR	781:22	781:22	14	i
FIELD	781:22	781:22	15	i
LEAF_NODE	781:22	781:22	16	i
LEAF_NODE	781:23	781:23	14	]
LEAF_NODE	781:24	781:24	10	;
SELECTION	782:4	783:3	7	
KEYWORD	782:4	782:4	8	if
LEAF_NODE	782:4	782:4	9	if
LEAF_NODE	782:7	782:7	8	(
CONDITION	782:8	782:8	8	! TIFFWriteLongArray ( tif , type , tag , dir , n , bp )
EXPR	782:8	782:8	9	! TIFFWriteLongArray ( tif , type , tag , dir , n , bp )
UNARY_EXPR	782:8	782:9	10	! TIFFWriteLongArray ( tif , type , tag , dir , n , bp )
UNARY_OPERATOR	782:8	782:8	11	!
LEAF_NODE	782:8	782:8	12	!
FUNCTION_CALL	782:9	782:54	11	TIFFWriteLongArray ( tif , type , tag , dir , n , bp )
CALLEE	782:9	782:9	12	TIFFWriteLongArray
LEAF_NODE	782:9	782:9	13	TIFFWriteLongArray
LEAF_NODE	782:27	782:27	12	(
ARGUMENT	782:28	782:28	12	tif
FIELD	782:28	782:28	13	tif
LEAF_NODE	782:28	782:28	14	tif
LEAF_NODE	782:31	782:31	12	,
ARGUMENT	782:33	782:33	12	type
FIELD	782:33	782:33	13	type
LEAF_NODE	782:33	782:33	14	type
LEAF_NODE	782:37	782:37	12	,
ARGUMENT	782:39	782:39	12	tag
FIELD	782:39	782:39	13	tag
LEAF_NODE	782:39	782:39	14	tag
LEAF_NODE	782:42	782:42	12	,
ARGUMENT	782:44	782:44	12	dir
FIELD	782:44	782:44	13	dir
LEAF_NODE	782:44	782:44	14	dir
LEAF_NODE	782:47	782:47	12	,
ARGUMENT	782:49	782:49	12	n
FIELD	782:49	782:49	13	n
LEAF_NODE	782:49	782:49	14	n
LEAF_NODE	782:50	782:50	12	,
ARGUMENT	782:52	782:52	12	bp
FIELD	782:52	782:52	13	bp
LEAF_NODE	782:52	782:52	14	bp
LEAF_NODE	782:54	782:54	12	)
LEAF_NODE	782:55	782:55	8	)
STATEMENTS	783:3	783:3	8	
JUMP_STATEMENT	783:3	783:11	9	goto out ;
KEYWORD	783:3	783:3	10	goto
LEAF_NODE	783:3	783:3	11	goto
DESTINATION	783:8	783:8	10	out
LEAF_NODE	783:8	783:8	11	out
LEAF_NODE	783:11	783:11	10	;
LEAF_NODE	784:2	784:2	6	}
JUMP_STATEMENT	785:2	785:7	6	break DESTINATION ;
KEYWORD	785:2	785:2	7	break
LEAF_NODE	785:2	785:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	785:7	785:7	7	;
LABEL	786:1	786:16	6	case TIFF_SLONG :
LEAF_NODE	786:1	786:1	7	case
LEAF_NODE	786:6	786:6	7	TIFF_SLONG
LEAF_NODE	786:16	786:16	7	:
LEAF_NODE	787:2	787:2	6	{
STATEMENTS	787:4	790:4	6	
SIMPLE_DECL	787:4	787:26	7	int32 * bp ; bp = ( int32 * ) w ;
VAR_DECL	787:4	787:11	8	int32 * bp ; bp = ( int32 * ) w
TYPE	787:4	787:9	9	int32 *
TYPE_NAME	787:4	787:4	10	int32
LEAF_NODE	787:4	787:4	11	int32
POINTER	787:9	787:9	10	*
LEAF_NODE	787:9	787:9	11	*
NAME	787:11	787:11	9	bp
LEAF_NODE	787:11	787:11	10	bp
LEAF_NODE	0:0	0:0	9	;
INIT	787:11	787:11	9	bp = ( int32 * ) w
ASSIGN	787:11	787:16	10	bp = ( int32 * ) w
LVAL	787:11	787:11	11	bp
NAME	787:11	787:11	12	bp
LEAF_NODE	787:11	787:11	13	bp
ASSIGN_OP	787:14	787:14	11	=
LEAF_NODE	787:14	787:14	12	=
RVAL	787:16	787:25	11	( int32 * ) w
LEAF_NODE	787:16	787:16	12	(
TYPE_NAME	787:17	787:17	12	int32
LEAF_NODE	787:17	787:17	13	int32
LEAF_NODE	787:22	787:22	12	*
LEAF_NODE	787:23	787:23	12	)
FIELD	787:25	787:25	12	w
LEAF_NODE	787:25	787:25	13	w
LEAF_NODE	787:26	787:26	8	;
ITERATION	788:4	789:3	7	
KEYWORD	788:4	788:4	8	for
LEAF_NODE	788:4	788:4	9	for
LEAF_NODE	788:8	788:8	8	(
FOR_INIT	788:9	788:14	8	i = 0 ;
EXPR	788:9	788:9	9	i = 0
ASSIGN	788:9	788:13	10	i = 0
LVAL	788:9	788:9	11	i
FIELD	788:9	788:9	12	i
LEAF_NODE	788:9	788:9	13	i
ASSIGN_OP	788:11	788:11	11	=
LEAF_NODE	788:11	788:11	12	=
RVAL	788:13	788:13	11	0
FIELD	788:13	788:13	12	0
LEAF_NODE	788:13	788:13	13	0
LEAF_NODE	788:14	788:14	9	;
CONDITION	788:16	788:16	8	i < n
EXPR	788:16	788:20	9	i < n
FIELD	788:16	788:16	10	i
LEAF_NODE	788:16	788:16	11	i
REL_OPERATOR	788:18	788:18	10	<
LEAF_NODE	788:18	788:18	11	<
FIELD	788:20	788:20	10	n
LEAF_NODE	788:20	788:20	11	n
LEAF_NODE	788:21	788:21	8	;
FOR_EXPR	788:23	788:23	8	i ++
EXPR	788:23	788:23	9	i ++
FIELD	788:23	788:24	10	i ++
LEAF_NODE	788:23	788:23	11	i
LEAF_NODE	788:24	788:24	11	++
LEAF_NODE	788:26	788:26	8	)
STATEMENTS	789:3	789:3	8	
EXPR_STATEMENT	789:3	789:23	9	bp [ i ] = ( int32 ) v [ i ] ;
EXPR	789:3	789:3	10	bp [ i ] = ( int32 ) v [ i ]
ASSIGN	789:3	789:11	11	bp [ i ] = ( int32 ) v [ i ]
LVAL	789:3	789:3	12	bp [ i ]
FIELD	789:3	789:7	13	bp [ i ]
LEAF_NODE	789:3	789:3	14	bp
LEAF_NODE	789:5	789:5	14	[
EXPR	789:6	789:6	14	i
FIELD	789:6	789:6	15	i
LEAF_NODE	789:6	789:6	16	i
LEAF_NODE	789:7	789:7	14	]
ASSIGN_OP	789:9	789:9	12	=
LEAF_NODE	789:9	789:9	13	=
RVAL	789:11	789:19	12	( int32 ) v [ i ]
LEAF_NODE	789:11	789:11	13	(
TYPE_NAME	789:12	789:12	13	int32
LEAF_NODE	789:12	789:12	14	int32
LEAF_NODE	789:17	789:17	13	)
FIELD	789:19	789:22	13	v [ i ]
LEAF_NODE	789:19	789:19	14	v
LEAF_NODE	789:20	789:20	14	[
EXPR	789:21	789:21	14	i
FIELD	789:21	789:21	15	i
LEAF_NODE	789:21	789:21	16	i
LEAF_NODE	789:22	789:22	14	]
LEAF_NODE	789:23	789:23	10	;
SELECTION	790:4	791:3	7	
KEYWORD	790:4	790:4	8	if
LEAF_NODE	790:4	790:4	9	if
LEAF_NODE	790:7	790:7	8	(
CONDITION	790:8	790:8	8	! TIFFWriteLongArray ( tif , type , tag , dir , n , ( uint32 * ) bp )
EXPR	790:8	790:8	9	! TIFFWriteLongArray ( tif , type , tag , dir , n , ( uint32 * ) bp )
UNARY_EXPR	790:8	790:9	10	! TIFFWriteLongArray ( tif , type , tag , dir , n , ( uint32 * ) bp )
UNARY_OPERATOR	790:8	790:8	11	!
LEAF_NODE	790:8	790:8	12	!
FUNCTION_CALL	790:9	790:64	11	TIFFWriteLongArray ( tif , type , tag , dir , n , ( uint32 * ) bp )
CALLEE	790:9	790:9	12	TIFFWriteLongArray
LEAF_NODE	790:9	790:9	13	TIFFWriteLongArray
LEAF_NODE	790:27	790:27	12	(
ARGUMENT	790:28	790:28	12	tif
FIELD	790:28	790:28	13	tif
LEAF_NODE	790:28	790:28	14	tif
LEAF_NODE	790:31	790:31	12	,
ARGUMENT	790:33	790:33	12	type
FIELD	790:33	790:33	13	type
LEAF_NODE	790:33	790:33	14	type
LEAF_NODE	790:37	790:37	12	,
ARGUMENT	790:39	790:39	12	tag
FIELD	790:39	790:39	13	tag
LEAF_NODE	790:39	790:39	14	tag
LEAF_NODE	790:42	790:42	12	,
ARGUMENT	790:44	790:44	12	dir
FIELD	790:44	790:44	13	dir
LEAF_NODE	790:44	790:44	14	dir
LEAF_NODE	790:47	790:47	12	,
ARGUMENT	790:49	790:49	12	n
FIELD	790:49	790:49	13	n
LEAF_NODE	790:49	790:49	14	n
LEAF_NODE	790:50	790:50	12	,
ARGUMENT	790:52	790:62	12	( uint32 * ) bp
LEAF_NODE	790:52	790:52	13	(
TYPE_NAME	790:53	790:53	13	uint32
LEAF_NODE	790:53	790:53	14	uint32
LEAF_NODE	790:59	790:59	13	*
LEAF_NODE	790:60	790:60	13	)
FIELD	790:62	790:62	13	bp
LEAF_NODE	790:62	790:62	14	bp
LEAF_NODE	790:64	790:64	12	)
LEAF_NODE	790:65	790:65	8	)
STATEMENTS	791:3	791:3	8	
JUMP_STATEMENT	791:3	791:11	9	goto out ;
KEYWORD	791:3	791:3	10	goto
LEAF_NODE	791:3	791:3	11	goto
DESTINATION	791:8	791:8	10	out
LEAF_NODE	791:8	791:8	11	out
LEAF_NODE	791:11	791:11	10	;
LEAF_NODE	792:2	792:2	6	}
JUMP_STATEMENT	793:2	793:7	6	break DESTINATION ;
KEYWORD	793:2	793:2	7	break
LEAF_NODE	793:2	793:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	793:7	793:7	7	;
LABEL	794:1	794:16	6	case TIFF_FLOAT :
LEAF_NODE	794:1	794:1	7	case
LEAF_NODE	794:6	794:6	7	TIFF_FLOAT
LEAF_NODE	794:16	794:16	7	:
LEAF_NODE	795:2	795:2	6	{
STATEMENTS	795:4	798:4	6	
SIMPLE_DECL	795:4	795:26	7	float * bp ; bp = ( float * ) w ;
VAR_DECL	795:4	795:11	8	float * bp ; bp = ( float * ) w
TYPE	795:4	795:9	9	float *
TYPE_NAME	795:4	795:4	10	float
LEAF_NODE	795:4	795:4	11	float
POINTER	795:9	795:9	10	*
LEAF_NODE	795:9	795:9	11	*
NAME	795:11	795:11	9	bp
LEAF_NODE	795:11	795:11	10	bp
LEAF_NODE	0:0	0:0	9	;
INIT	795:11	795:11	9	bp = ( float * ) w
ASSIGN	795:11	795:16	10	bp = ( float * ) w
LVAL	795:11	795:11	11	bp
NAME	795:11	795:11	12	bp
LEAF_NODE	795:11	795:11	13	bp
ASSIGN_OP	795:14	795:14	11	=
LEAF_NODE	795:14	795:14	12	=
RVAL	795:16	795:25	11	( float * ) w
LEAF_NODE	795:16	795:16	12	(
TYPE_NAME	795:17	795:17	12	float
LEAF_NODE	795:17	795:17	13	float
LEAF_NODE	795:22	795:22	12	*
LEAF_NODE	795:23	795:23	12	)
FIELD	795:25	795:25	12	w
LEAF_NODE	795:25	795:25	13	w
LEAF_NODE	795:26	795:26	8	;
ITERATION	796:4	797:3	7	
KEYWORD	796:4	796:4	8	for
LEAF_NODE	796:4	796:4	9	for
LEAF_NODE	796:8	796:8	8	(
FOR_INIT	796:9	796:14	8	i = 0 ;
EXPR	796:9	796:9	9	i = 0
ASSIGN	796:9	796:13	10	i = 0
LVAL	796:9	796:9	11	i
FIELD	796:9	796:9	12	i
LEAF_NODE	796:9	796:9	13	i
ASSIGN_OP	796:11	796:11	11	=
LEAF_NODE	796:11	796:11	12	=
RVAL	796:13	796:13	11	0
FIELD	796:13	796:13	12	0
LEAF_NODE	796:13	796:13	13	0
LEAF_NODE	796:14	796:14	9	;
CONDITION	796:16	796:16	8	i < n
EXPR	796:16	796:20	9	i < n
FIELD	796:16	796:16	10	i
LEAF_NODE	796:16	796:16	11	i
REL_OPERATOR	796:18	796:18	10	<
LEAF_NODE	796:18	796:18	11	<
FIELD	796:20	796:20	10	n
LEAF_NODE	796:20	796:20	11	n
LEAF_NODE	796:21	796:21	8	;
FOR_EXPR	796:23	796:23	8	i ++
EXPR	796:23	796:23	9	i ++
FIELD	796:23	796:24	10	i ++
LEAF_NODE	796:23	796:23	11	i
LEAF_NODE	796:24	796:24	11	++
LEAF_NODE	796:26	796:26	8	)
STATEMENTS	797:3	797:3	8	
EXPR_STATEMENT	797:3	797:23	9	bp [ i ] = ( float ) v [ i ] ;
EXPR	797:3	797:3	10	bp [ i ] = ( float ) v [ i ]
ASSIGN	797:3	797:11	11	bp [ i ] = ( float ) v [ i ]
LVAL	797:3	797:3	12	bp [ i ]
FIELD	797:3	797:7	13	bp [ i ]
LEAF_NODE	797:3	797:3	14	bp
LEAF_NODE	797:5	797:5	14	[
EXPR	797:6	797:6	14	i
FIELD	797:6	797:6	15	i
LEAF_NODE	797:6	797:6	16	i
LEAF_NODE	797:7	797:7	14	]
ASSIGN_OP	797:9	797:9	12	=
LEAF_NODE	797:9	797:9	13	=
RVAL	797:11	797:19	12	( float ) v [ i ]
LEAF_NODE	797:11	797:11	13	(
TYPE_NAME	797:12	797:12	13	float
LEAF_NODE	797:12	797:12	14	float
LEAF_NODE	797:17	797:17	13	)
FIELD	797:19	797:22	13	v [ i ]
LEAF_NODE	797:19	797:19	14	v
LEAF_NODE	797:20	797:20	14	[
EXPR	797:21	797:21	14	i
FIELD	797:21	797:21	15	i
LEAF_NODE	797:21	797:21	16	i
LEAF_NODE	797:22	797:22	14	]
LEAF_NODE	797:23	797:23	10	;
SELECTION	798:4	799:3	7	
KEYWORD	798:4	798:4	8	if
LEAF_NODE	798:4	798:4	9	if
LEAF_NODE	798:7	798:7	8	(
CONDITION	798:8	798:8	8	! TIFFWriteFloatArray ( tif , type , tag , dir , n , bp )
EXPR	798:8	798:8	9	! TIFFWriteFloatArray ( tif , type , tag , dir , n , bp )
UNARY_EXPR	798:8	798:9	10	! TIFFWriteFloatArray ( tif , type , tag , dir , n , bp )
UNARY_OPERATOR	798:8	798:8	11	!
LEAF_NODE	798:8	798:8	12	!
FUNCTION_CALL	798:9	798:55	11	TIFFWriteFloatArray ( tif , type , tag , dir , n , bp )
CALLEE	798:9	798:9	12	TIFFWriteFloatArray
LEAF_NODE	798:9	798:9	13	TIFFWriteFloatArray
LEAF_NODE	798:28	798:28	12	(
ARGUMENT	798:29	798:29	12	tif
FIELD	798:29	798:29	13	tif
LEAF_NODE	798:29	798:29	14	tif
LEAF_NODE	798:32	798:32	12	,
ARGUMENT	798:34	798:34	12	type
FIELD	798:34	798:34	13	type
LEAF_NODE	798:34	798:34	14	type
LEAF_NODE	798:38	798:38	12	,
ARGUMENT	798:40	798:40	12	tag
FIELD	798:40	798:40	13	tag
LEAF_NODE	798:40	798:40	14	tag
LEAF_NODE	798:43	798:43	12	,
ARGUMENT	798:45	798:45	12	dir
FIELD	798:45	798:45	13	dir
LEAF_NODE	798:45	798:45	14	dir
LEAF_NODE	798:48	798:48	12	,
ARGUMENT	798:50	798:50	12	n
FIELD	798:50	798:50	13	n
LEAF_NODE	798:50	798:50	14	n
LEAF_NODE	798:51	798:51	12	,
ARGUMENT	798:53	798:53	12	bp
FIELD	798:53	798:53	13	bp
LEAF_NODE	798:53	798:53	14	bp
LEAF_NODE	798:55	798:55	12	)
LEAF_NODE	798:56	798:56	8	)
STATEMENTS	799:3	799:3	8	
JUMP_STATEMENT	799:3	799:11	9	goto out ;
KEYWORD	799:3	799:3	10	goto
LEAF_NODE	799:3	799:3	11	goto
DESTINATION	799:8	799:8	10	out
LEAF_NODE	799:8	799:8	11	out
LEAF_NODE	799:11	799:11	10	;
LEAF_NODE	800:2	800:2	6	}
JUMP_STATEMENT	801:2	801:7	6	break DESTINATION ;
KEYWORD	801:2	801:2	7	break
LEAF_NODE	801:2	801:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	801:7	801:7	7	;
LABEL	802:1	802:17	6	case TIFF_DOUBLE :
LEAF_NODE	802:1	802:1	7	case
LEAF_NODE	802:6	802:6	7	TIFF_DOUBLE
LEAF_NODE	802:17	802:17	7	:
JUMP_STATEMENT	803:2	803:58	6	return ( TIFFWriteDoubleArray ( tif , type , tag , dir , n , v ) ) ;
KEYWORD	803:2	803:2	7	return
LEAF_NODE	803:2	803:2	8	return
DESTINATION	803:9	803:9	7	( TIFFWriteDoubleArray ( tif , type , tag , dir , n , v ) )
EXPR	803:9	803:57	8	( TIFFWriteDoubleArray ( tif , type , tag , dir , n , v ) )
LEAF_NODE	803:9	803:9	9	(
FUNCTION_CALL	803:10	803:56	9	TIFFWriteDoubleArray ( tif , type , tag , dir , n , v )
CALLEE	803:10	803:10	10	TIFFWriteDoubleArray
LEAF_NODE	803:10	803:10	11	TIFFWriteDoubleArray
LEAF_NODE	803:30	803:30	10	(
ARGUMENT	803:31	803:31	10	tif
FIELD	803:31	803:31	11	tif
LEAF_NODE	803:31	803:31	12	tif
LEAF_NODE	803:34	803:34	10	,
ARGUMENT	803:36	803:36	10	type
FIELD	803:36	803:36	11	type
LEAF_NODE	803:36	803:36	12	type
LEAF_NODE	803:40	803:40	10	,
ARGUMENT	803:42	803:42	10	tag
FIELD	803:42	803:42	11	tag
LEAF_NODE	803:42	803:42	12	tag
LEAF_NODE	803:45	803:45	10	,
ARGUMENT	803:47	803:47	10	dir
FIELD	803:47	803:47	11	dir
LEAF_NODE	803:47	803:47	12	dir
LEAF_NODE	803:50	803:50	10	,
ARGUMENT	803:52	803:52	10	n
FIELD	803:52	803:52	11	n
LEAF_NODE	803:52	803:52	12	n
LEAF_NODE	803:53	803:53	10	,
ARGUMENT	803:55	803:55	10	v
FIELD	803:55	803:55	11	v
LEAF_NODE	803:55	803:55	12	v
LEAF_NODE	803:56	803:56	10	)
LEAF_NODE	803:57	803:57	9	)
LEAF_NODE	803:58	803:58	7	;
LABEL	804:1	804:8	6	default :
LEAF_NODE	804:1	804:1	7	default
LEAF_NODE	804:8	804:8	7	:
JUMP_STATEMENT	810:2	810:10	6	goto out ;
KEYWORD	810:2	810:2	7	goto
LEAF_NODE	810:2	810:2	8	goto
DESTINATION	810:7	810:7	7	out
LEAF_NODE	810:7	810:7	8	out
LEAF_NODE	810:10	810:10	7	;
LEAF_NODE	811:1	811:1	5	}
EXPR_STATEMENT	812:1	812:11	3	status = 1 ;
EXPR	812:1	812:1	4	status = 1
ASSIGN	812:1	812:10	5	status = 1
LVAL	812:1	812:1	6	status
FIELD	812:1	812:1	7	status
LEAF_NODE	812:1	812:1	8	status
ASSIGN_OP	812:8	812:8	6	=
LEAF_NODE	812:8	812:8	7	=
RVAL	812:10	812:10	6	1
FIELD	812:10	812:10	7	1
LEAF_NODE	812:10	812:10	8	1
LEAF_NODE	812:11	812:11	4	;
LABEL	813:1	813:4	3	out :
LEAF_NODE	813:1	813:1	4	out
LEAF_NODE	813:4	813:4	4	:
SELECTION	814:1	815:2	3	
KEYWORD	814:1	814:1	4	if
LEAF_NODE	814:1	814:1	5	if
LEAF_NODE	814:4	814:4	4	(
CONDITION	814:5	814:5	4	w != buf
EXPR	814:5	814:10	5	w != buf
FIELD	814:5	814:5	6	w
LEAF_NODE	814:5	814:5	7	w
EQ_OPERATOR	814:7	814:7	6	!=
LEAF_NODE	814:7	814:7	7	!=
FIELD	814:10	814:10	6	buf
LEAF_NODE	814:10	814:10	7	buf
LEAF_NODE	814:13	814:13	4	)
STATEMENTS	815:2	815:2	4	
EXPR_STATEMENT	815:2	815:14	5	_TIFFfree ( w ) ;
EXPR	815:2	815:2	6	_TIFFfree ( w )
FUNCTION_CALL	815:2	815:13	7	_TIFFfree ( w )
CALLEE	815:2	815:2	8	_TIFFfree
LEAF_NODE	815:2	815:2	9	_TIFFfree
LEAF_NODE	815:11	815:11	8	(
ARGUMENT	815:12	815:12	8	w
FIELD	815:12	815:12	9	w
LEAF_NODE	815:12	815:12	10	w
LEAF_NODE	815:13	815:13	8	)
LEAF_NODE	815:14	815:14	6	;
LEAF_NODE	816:1	816:1	3	return
LEAF_NODE	816:8	816:8	3	(
LEAF_NODE	816:9	816:9	3	status
LEAF_NODE	816:15	816:15	3	)
LEAF_NODE	816:16	816:16	3	;
LEAF_NODE	817:0	817:0	2	}
FUNCTION_DEF	820:0	841:0	1	
RETURN_TYPE	820:0	820:7	2	static int
LEAF_NODE	820:0	820:0	3	static
TYPE_NAME	820:7	820:7	3	int
LEAF_NODE	820:7	820:7	4	int
FUNCTION_NAME	821:0	821:0	2	TIFFWriteTransferFunction
LEAF_NODE	821:0	821:0	3	TIFFWriteTransferFunction
PARAMETER_LIST	821:25	821:54	2	( TIFF * tif , TIFFDirEntry * dir )
LEAF_NODE	821:25	821:25	3	(
PARAMETER_DECL	821:26	821:32	3	TIFF * tif
TYPE	821:26	821:30	4	TIFF *
TYPE_NAME	821:26	821:26	5	TIFF
LEAF_NODE	821:26	821:26	6	TIFF
POINTER	821:30	821:30	5	*
LEAF_NODE	821:30	821:30	6	*
NAME	821:32	821:32	4	tif
LEAF_NODE	821:32	821:32	5	tif
LEAF_NODE	821:35	821:35	3	,
PARAMETER_DECL	821:37	821:51	3	TIFFDirEntry * dir
TYPE	821:37	821:49	4	TIFFDirEntry *
TYPE_NAME	821:37	821:37	5	TIFFDirEntry
LEAF_NODE	821:37	821:37	6	TIFFDirEntry
POINTER	821:49	821:49	5	*
LEAF_NODE	821:49	821:49	6	*
NAME	821:51	821:51	4	dir
LEAF_NODE	821:51	821:51	5	dir
LEAF_NODE	821:54	821:54	3	)
LEAF_NODE	822:0	822:0	2	{
STATEMENTS	823:1	839:1	2	
SIMPLE_DECL	823:1	823:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	823:1	823:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	823:1	823:14	5	TIFFDirectory *
TYPE_NAME	823:1	823:1	6	TIFFDirectory
LEAF_NODE	823:1	823:1	7	TIFFDirectory
POINTER	823:14	823:14	6	*
LEAF_NODE	823:14	823:14	7	*
NAME	823:16	823:16	5	td
LEAF_NODE	823:16	823:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	823:16	823:16	5	td = & tif -> tif_dir
ASSIGN	823:16	823:21	6	td = & tif -> tif_dir
LVAL	823:16	823:16	7	td
NAME	823:16	823:16	8	td
LEAF_NODE	823:16	823:16	9	td
ASSIGN_OP	823:19	823:19	7	=
LEAF_NODE	823:19	823:19	8	=
RVAL	823:21	823:21	7	& tif -> tif_dir
UNARY_EXPR	823:21	823:22	8	& tif -> tif_dir
UNARY_OPERATOR	823:21	823:21	9	&
LEAF_NODE	823:21	823:21	10	&
FIELD	823:22	823:27	9	tif -> tif_dir
LEAF_NODE	823:22	823:22	10	tif
LEAF_NODE	823:25	823:25	10	->
LEAF_NODE	823:27	823:27	10	tif_dir
LEAF_NODE	823:34	823:34	4	;
SIMPLE_DECL	824:1	824:57	3	tsize_t n ; n = ( 1L << td -> td_bitspersample ) * sizeof ( uint16 ) ;
VAR_DECL	824:1	824:9	4	tsize_t n ; n = ( 1L << td -> td_bitspersample ) * sizeof ( uint16 )
TYPE	824:1	824:1	5	tsize_t
TYPE_NAME	824:1	824:1	6	tsize_t
LEAF_NODE	824:1	824:1	7	tsize_t
NAME	824:9	824:9	5	n
LEAF_NODE	824:9	824:9	6	n
LEAF_NODE	0:0	0:0	5	;
INIT	824:9	824:9	5	n = ( 1L << td -> td_bitspersample ) * sizeof ( uint16 )
ASSIGN	824:9	824:13	6	n = ( 1L << td -> td_bitspersample ) * sizeof ( uint16 )
LVAL	824:9	824:9	7	n
NAME	824:9	824:9	8	n
LEAF_NODE	824:9	824:9	9	n
ASSIGN_OP	824:11	824:11	7	=
LEAF_NODE	824:11	824:11	8	=
RVAL	824:13	824:42	7	( 1L << td -> td_bitspersample ) * sizeof ( uint16 )
LEAF_NODE	824:13	824:13	8	(
FIELD	824:14	824:14	8	1L
LEAF_NODE	824:14	824:14	9	1L
LEAF_NODE	824:16	824:16	8	<<
FIELD	824:18	824:22	8	td -> td_bitspersample
LEAF_NODE	824:18	824:18	9	td
LEAF_NODE	824:20	824:20	9	->
LEAF_NODE	824:22	824:22	9	td_bitspersample
LEAF_NODE	824:38	824:38	8	)
LEAF_NODE	824:40	824:40	8	*
FUNCTION_CALL	824:42	824:56	8	sizeof ( uint16 )
CALLEE	824:42	824:42	9	sizeof
LEAF_NODE	824:42	824:42	10	sizeof
LEAF_NODE	824:49	824:49	9	(
ARGUMENT	824:50	824:50	9	uint16
FIELD	824:50	824:50	10	uint16
LEAF_NODE	824:50	824:50	11	uint16
LEAF_NODE	824:56	824:56	9	)
LEAF_NODE	824:57	824:57	4	;
SIMPLE_DECL	825:1	825:38	3	uint16 * tf ; tf = td -> td_transferfunction ;
VAR_DECL	825:1	825:10	4	uint16 * tf ; tf = td -> td_transferfunction
TYPE	825:1	825:8	5	uint16 *
TYPE_NAME	825:1	825:1	6	uint16
LEAF_NODE	825:1	825:1	7	uint16
POINTER	825:8	825:8	6	*
LEAF_NODE	825:8	825:8	7	*
NAME	825:10	825:10	5	tf
LEAF_NODE	825:10	825:10	6	tf
LEAF_NODE	0:0	0:0	5	;
INIT	825:10	825:10	5	tf = td -> td_transferfunction
ASSIGN	825:10	825:15	6	tf = td -> td_transferfunction
LVAL	825:10	825:10	7	tf
NAME	825:10	825:10	8	tf
LEAF_NODE	825:10	825:10	9	tf
ASSIGN_OP	825:13	825:13	7	=
LEAF_NODE	825:13	825:13	8	=
RVAL	825:15	825:15	7	td -> td_transferfunction
FIELD	825:15	825:19	8	td -> td_transferfunction
LEAF_NODE	825:15	825:15	9	td
LEAF_NODE	825:17	825:17	9	->
LEAF_NODE	825:19	825:19	9	td_transferfunction
LEAF_NODE	825:38	825:38	4	;
SIMPLE_DECL	826:1	826:10	3	int ncols ;
VAR_DECL	826:1	826:5	4	int ncols
TYPE	826:1	826:1	5	int
TYPE_NAME	826:1	826:1	6	int
LEAF_NODE	826:1	826:1	7	int
NAME	826:5	826:5	5	ncols
LEAF_NODE	826:5	826:5	6	ncols
LEAF_NODE	826:10	826:10	4	;
SELECTION	834:1	834:55	3	
KEYWORD	834:1	834:1	4	switch
LEAF_NODE	834:1	834:1	5	switch
LEAF_NODE	834:8	834:8	4	(
CONDITION	834:9	834:9	4	td -> td_samplesperpixel - td -> td_extrasamples
EXPR	834:9	834:34	5	td -> td_samplesperpixel - td -> td_extrasamples
FIELD	834:9	834:13	6	td -> td_samplesperpixel
LEAF_NODE	834:9	834:9	7	td
LEAF_NODE	834:11	834:11	7	->
LEAF_NODE	834:13	834:13	7	td_samplesperpixel
LEAF_NODE	834:32	834:32	6	-
FIELD	834:34	834:38	6	td -> td_extrasamples
LEAF_NODE	834:34	834:34	7	td
LEAF_NODE	834:36	834:36	7	->
LEAF_NODE	834:38	834:38	7	td_extrasamples
LEAF_NODE	834:53	834:53	4	)
STATEMENTS	834:55	838:1	4	
LEAF_NODE	834:55	834:55	5	{
STATEMENTS	835:1	837:17	5	
LABEL	835:1	835:8	6	default :
LEAF_NODE	835:1	835:1	7	default
LEAF_NODE	835:8	835:8	7	:
SELECTION	835:10	835:44	6	
KEYWORD	835:10	835:10	7	if
LEAF_NODE	835:10	835:10	8	if
LEAF_NODE	835:13	835:13	7	(
CONDITION	835:14	835:14	7	_TIFFmemcmp ( tf [ 0 ] , tf [ 2 ] , n )
EXPR	835:14	835:14	8	_TIFFmemcmp ( tf [ 0 ] , tf [ 2 ] , n )
FUNCTION_CALL	835:14	835:41	9	_TIFFmemcmp ( tf [ 0 ] , tf [ 2 ] , n )
CALLEE	835:14	835:14	10	_TIFFmemcmp
LEAF_NODE	835:14	835:14	11	_TIFFmemcmp
LEAF_NODE	835:25	835:25	10	(
ARGUMENT	835:26	835:26	10	tf [ 0 ]
FIELD	835:26	835:30	11	tf [ 0 ]
LEAF_NODE	835:26	835:26	12	tf
LEAF_NODE	835:28	835:28	12	[
EXPR	835:29	835:29	12	0
FIELD	835:29	835:29	13	0
LEAF_NODE	835:29	835:29	14	0
LEAF_NODE	835:30	835:30	12	]
LEAF_NODE	835:31	835:31	10	,
ARGUMENT	835:33	835:33	10	tf [ 2 ]
FIELD	835:33	835:37	11	tf [ 2 ]
LEAF_NODE	835:33	835:33	12	tf
LEAF_NODE	835:35	835:35	12	[
EXPR	835:36	835:36	12	2
FIELD	835:36	835:36	13	2
LEAF_NODE	835:36	835:36	14	2
LEAF_NODE	835:37	835:37	12	]
LEAF_NODE	835:38	835:38	10	,
ARGUMENT	835:40	835:40	10	n
FIELD	835:40	835:40	11	n
LEAF_NODE	835:40	835:40	12	n
LEAF_NODE	835:41	835:41	10	)
LEAF_NODE	835:42	835:42	7	)
STATEMENTS	835:44	835:64	7	
LEAF_NODE	835:44	835:44	8	{
STATEMENTS	835:46	835:57	8	
EXPR_STATEMENT	835:46	835:55	9	ncols = 3 ;
EXPR	835:46	835:46	10	ncols = 3
ASSIGN	835:46	835:54	11	ncols = 3
LVAL	835:46	835:46	12	ncols
FIELD	835:46	835:46	13	ncols
LEAF_NODE	835:46	835:46	14	ncols
ASSIGN_OP	835:52	835:52	12	=
LEAF_NODE	835:52	835:52	13	=
RVAL	835:54	835:54	12	3
FIELD	835:54	835:54	13	3
LEAF_NODE	835:54	835:54	14	3
LEAF_NODE	835:55	835:55	10	;
JUMP_STATEMENT	835:57	835:62	9	break DESTINATION ;
KEYWORD	835:57	835:57	10	break
LEAF_NODE	835:57	835:57	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	835:62	835:62	10	;
LEAF_NODE	835:64	835:64	8	}
LABEL	836:1	836:7	6	case 2 :
LEAF_NODE	836:1	836:1	7	case
LEAF_NODE	836:6	836:6	7	2
LEAF_NODE	836:7	836:7	7	:
SELECTION	836:10	836:44	6	
KEYWORD	836:10	836:10	7	if
LEAF_NODE	836:10	836:10	8	if
LEAF_NODE	836:13	836:13	7	(
CONDITION	836:14	836:14	7	_TIFFmemcmp ( tf [ 0 ] , tf [ 1 ] , n )
EXPR	836:14	836:14	8	_TIFFmemcmp ( tf [ 0 ] , tf [ 1 ] , n )
FUNCTION_CALL	836:14	836:41	9	_TIFFmemcmp ( tf [ 0 ] , tf [ 1 ] , n )
CALLEE	836:14	836:14	10	_TIFFmemcmp
LEAF_NODE	836:14	836:14	11	_TIFFmemcmp
LEAF_NODE	836:25	836:25	10	(
ARGUMENT	836:26	836:26	10	tf [ 0 ]
FIELD	836:26	836:30	11	tf [ 0 ]
LEAF_NODE	836:26	836:26	12	tf
LEAF_NODE	836:28	836:28	12	[
EXPR	836:29	836:29	12	0
FIELD	836:29	836:29	13	0
LEAF_NODE	836:29	836:29	14	0
LEAF_NODE	836:30	836:30	12	]
LEAF_NODE	836:31	836:31	10	,
ARGUMENT	836:33	836:33	10	tf [ 1 ]
FIELD	836:33	836:37	11	tf [ 1 ]
LEAF_NODE	836:33	836:33	12	tf
LEAF_NODE	836:35	836:35	12	[
EXPR	836:36	836:36	12	1
FIELD	836:36	836:36	13	1
LEAF_NODE	836:36	836:36	14	1
LEAF_NODE	836:37	836:37	12	]
LEAF_NODE	836:38	836:38	10	,
ARGUMENT	836:40	836:40	10	n
FIELD	836:40	836:40	11	n
LEAF_NODE	836:40	836:40	12	n
LEAF_NODE	836:41	836:41	10	)
LEAF_NODE	836:42	836:42	7	)
STATEMENTS	836:44	836:64	7	
LEAF_NODE	836:44	836:44	8	{
STATEMENTS	836:46	836:57	8	
EXPR_STATEMENT	836:46	836:55	9	ncols = 3 ;
EXPR	836:46	836:46	10	ncols = 3
ASSIGN	836:46	836:54	11	ncols = 3
LVAL	836:46	836:46	12	ncols
FIELD	836:46	836:46	13	ncols
LEAF_NODE	836:46	836:46	14	ncols
ASSIGN_OP	836:52	836:52	12	=
LEAF_NODE	836:52	836:52	13	=
RVAL	836:54	836:54	12	3
FIELD	836:54	836:54	13	3
LEAF_NODE	836:54	836:54	14	3
LEAF_NODE	836:55	836:55	10	;
JUMP_STATEMENT	836:57	836:62	9	break DESTINATION ;
KEYWORD	836:57	836:57	10	break
LEAF_NODE	836:57	836:57	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	836:62	836:62	10	;
LEAF_NODE	836:64	836:64	8	}
LABEL	837:1	837:7	6	case 1 :
LEAF_NODE	837:1	837:1	7	case
LEAF_NODE	837:6	837:6	7	1
LEAF_NODE	837:7	837:7	7	:
LABEL	837:9	837:15	6	case 0 :
LEAF_NODE	837:9	837:9	7	case
LEAF_NODE	837:14	837:14	7	0
LEAF_NODE	837:15	837:15	7	:
EXPR_STATEMENT	837:17	837:26	6	ncols = 1 ;
EXPR	837:17	837:17	7	ncols = 1
ASSIGN	837:17	837:25	8	ncols = 1
LVAL	837:17	837:17	9	ncols
FIELD	837:17	837:17	10	ncols
LEAF_NODE	837:17	837:17	11	ncols
ASSIGN_OP	837:23	837:23	9	=
LEAF_NODE	837:23	837:23	10	=
RVAL	837:25	837:25	9	1
FIELD	837:25	837:25	10	1
LEAF_NODE	837:25	837:25	11	1
LEAF_NODE	837:26	837:26	7	;
LEAF_NODE	838:1	838:1	5	}
JUMP_STATEMENT	839:1	840:47	3	return ( TIFFWriteShortTable ( tif , TIFFTAG_TRANSFERFUNCTION , dir , ncols , tf ) ) ;
KEYWORD	839:1	839:1	4	return
LEAF_NODE	839:1	839:1	5	return
DESTINATION	839:8	839:8	4	( TIFFWriteShortTable ( tif , TIFFTAG_TRANSFERFUNCTION , dir , ncols , tf ) )
EXPR	839:8	840:46	5	( TIFFWriteShortTable ( tif , TIFFTAG_TRANSFERFUNCTION , dir , ncols , tf ) )
LEAF_NODE	839:8	839:8	6	(
FUNCTION_CALL	839:9	840:45	6	TIFFWriteShortTable ( tif , TIFFTAG_TRANSFERFUNCTION , dir , ncols , tf )
CALLEE	839:9	839:9	7	TIFFWriteShortTable
LEAF_NODE	839:9	839:9	8	TIFFWriteShortTable
LEAF_NODE	839:28	839:28	7	(
ARGUMENT	839:29	839:29	7	tif
FIELD	839:29	839:29	8	tif
LEAF_NODE	839:29	839:29	9	tif
LEAF_NODE	839:32	839:32	7	,
ARGUMENT	840:5	840:5	7	TIFFTAG_TRANSFERFUNCTION
FIELD	840:5	840:5	8	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	840:5	840:5	9	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	840:29	840:29	7	,
ARGUMENT	840:31	840:31	7	dir
FIELD	840:31	840:31	8	dir
LEAF_NODE	840:31	840:31	9	dir
LEAF_NODE	840:34	840:34	7	,
ARGUMENT	840:36	840:36	7	ncols
FIELD	840:36	840:36	8	ncols
LEAF_NODE	840:36	840:36	9	ncols
LEAF_NODE	840:41	840:41	7	,
ARGUMENT	840:43	840:43	7	tf
FIELD	840:43	840:43	8	tf
LEAF_NODE	840:43	840:43	9	tf
LEAF_NODE	840:45	840:45	7	)
LEAF_NODE	840:46	840:46	6	)
LEAF_NODE	840:47	840:47	4	;
LEAF_NODE	841:0	841:0	2	}
FUNCTION_DEF	847:0	882:0	1	
RETURN_TYPE	847:0	847:7	2	static int
LEAF_NODE	847:0	847:0	3	static
TYPE_NAME	847:7	847:7	3	int
LEAF_NODE	847:7	847:7	4	int
FUNCTION_NAME	848:0	848:0	2	TIFFWriteData
LEAF_NODE	848:0	848:0	3	TIFFWriteData
PARAMETER_LIST	848:13	848:52	2	( TIFF * tif , TIFFDirEntry * dir , char * cp )
LEAF_NODE	848:13	848:13	3	(
PARAMETER_DECL	848:14	848:20	3	TIFF * tif
TYPE	848:14	848:18	4	TIFF *
TYPE_NAME	848:14	848:14	5	TIFF
LEAF_NODE	848:14	848:14	6	TIFF
POINTER	848:18	848:18	5	*
LEAF_NODE	848:18	848:18	6	*
NAME	848:20	848:20	4	tif
LEAF_NODE	848:20	848:20	5	tif
LEAF_NODE	848:23	848:23	3	,
PARAMETER_DECL	848:25	848:39	3	TIFFDirEntry * dir
TYPE	848:25	848:37	4	TIFFDirEntry *
TYPE_NAME	848:25	848:25	5	TIFFDirEntry
LEAF_NODE	848:25	848:25	6	TIFFDirEntry
POINTER	848:37	848:37	5	*
LEAF_NODE	848:37	848:37	6	*
NAME	848:39	848:39	4	dir
LEAF_NODE	848:39	848:39	5	dir
LEAF_NODE	848:42	848:42	3	,
PARAMETER_DECL	848:44	848:50	3	char * cp
TYPE	848:44	848:48	4	char *
TYPE_NAME	848:44	848:44	5	char
LEAF_NODE	848:44	848:44	6	char
POINTER	848:48	848:48	5	*
LEAF_NODE	848:48	848:48	6	*
NAME	848:50	848:50	4	cp
LEAF_NODE	848:50	848:50	5	cp
LEAF_NODE	848:52	848:52	3	)
LEAF_NODE	849:0	849:0	2	{
STATEMENTS	850:1	881:1	2	
SIMPLE_DECL	850:1	850:11	3	tsize_t cc ;
VAR_DECL	850:1	850:9	4	tsize_t cc
TYPE	850:1	850:1	5	tsize_t
TYPE_NAME	850:1	850:1	6	tsize_t
LEAF_NODE	850:1	850:1	7	tsize_t
NAME	850:9	850:9	5	cc
LEAF_NODE	850:9	850:9	6	cc
LEAF_NODE	850:11	850:11	4	;
SELECTION	852:1	852:33	3	
KEYWORD	852:1	852:1	4	if
LEAF_NODE	852:1	852:1	5	if
LEAF_NODE	852:4	852:4	4	(
CONDITION	852:5	852:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	852:5	852:22	5	tif -> tif_flags & TIFF_SWAB
FIELD	852:5	852:10	6	tif -> tif_flags
LEAF_NODE	852:5	852:5	7	tif
LEAF_NODE	852:8	852:8	7	->
LEAF_NODE	852:10	852:10	7	tif_flags
LEAF_NODE	852:20	852:20	6	&
FIELD	852:22	852:22	6	TIFF_SWAB
LEAF_NODE	852:22	852:22	7	TIFF_SWAB
LEAF_NODE	852:31	852:31	4	)
STATEMENTS	852:33	871:1	4	
LEAF_NODE	852:33	852:33	5	{
STATEMENTS	853:2	853:2	5	
SELECTION	853:2	853:26	6	
KEYWORD	853:2	853:2	7	switch
LEAF_NODE	853:2	853:2	8	switch
LEAF_NODE	853:9	853:9	7	(
CONDITION	853:10	853:10	7	dir -> tdir_type
EXPR	853:10	853:10	8	dir -> tdir_type
FIELD	853:10	853:15	9	dir -> tdir_type
LEAF_NODE	853:10	853:10	10	dir
LEAF_NODE	853:13	853:13	10	->
LEAF_NODE	853:15	853:15	10	tdir_type
LEAF_NODE	853:24	853:24	7	)
STATEMENTS	853:26	870:2	7	
LEAF_NODE	853:26	853:26	8	{
STATEMENTS	854:2	869:3	8	
LABEL	854:2	854:17	9	case TIFF_SHORT :
LEAF_NODE	854:2	854:2	10	case
LEAF_NODE	854:7	854:7	10	TIFF_SHORT
LEAF_NODE	854:17	854:17	10	:
LABEL	855:2	855:18	9	case TIFF_SSHORT :
LEAF_NODE	855:2	855:2	10	case
LEAF_NODE	855:7	855:7	10	TIFF_SSHORT
LEAF_NODE	855:18	855:18	10	:
EXPR_STATEMENT	856:3	856:54	9	TIFFSwabArrayOfShort ( ( uint16 * ) cp , dir -> tdir_count ) ;
EXPR	856:3	856:3	10	TIFFSwabArrayOfShort ( ( uint16 * ) cp , dir -> tdir_count )
FUNCTION_CALL	856:3	856:53	11	TIFFSwabArrayOfShort ( ( uint16 * ) cp , dir -> tdir_count )
CALLEE	856:3	856:3	12	TIFFSwabArrayOfShort
LEAF_NODE	856:3	856:3	13	TIFFSwabArrayOfShort
LEAF_NODE	856:23	856:23	12	(
ARGUMENT	856:24	856:34	12	( uint16 * ) cp
LEAF_NODE	856:24	856:24	13	(
TYPE_NAME	856:25	856:25	13	uint16
LEAF_NODE	856:25	856:25	14	uint16
LEAF_NODE	856:31	856:31	13	*
LEAF_NODE	856:32	856:32	13	)
FIELD	856:34	856:34	13	cp
LEAF_NODE	856:34	856:34	14	cp
LEAF_NODE	856:36	856:36	12	,
ARGUMENT	856:38	856:38	12	dir -> tdir_count
FIELD	856:38	856:43	13	dir -> tdir_count
LEAF_NODE	856:38	856:38	14	dir
LEAF_NODE	856:41	856:41	14	->
LEAF_NODE	856:43	856:43	14	tdir_count
LEAF_NODE	856:53	856:53	12	)
LEAF_NODE	856:54	856:54	10	;
JUMP_STATEMENT	857:3	857:8	9	break DESTINATION ;
KEYWORD	857:3	857:3	10	break
LEAF_NODE	857:3	857:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	857:8	857:8	10	;
LABEL	858:2	858:16	9	case TIFF_LONG :
LEAF_NODE	858:2	858:2	10	case
LEAF_NODE	858:7	858:7	10	TIFF_LONG
LEAF_NODE	858:16	858:16	10	:
LABEL	859:2	859:17	9	case TIFF_SLONG :
LEAF_NODE	859:2	859:2	10	case
LEAF_NODE	859:7	859:7	10	TIFF_SLONG
LEAF_NODE	859:17	859:17	10	:
LABEL	860:2	860:17	9	case TIFF_FLOAT :
LEAF_NODE	860:2	860:2	10	case
LEAF_NODE	860:7	860:7	10	TIFF_FLOAT
LEAF_NODE	860:17	860:17	10	:
EXPR_STATEMENT	861:3	861:53	9	TIFFSwabArrayOfLong ( ( uint32 * ) cp , dir -> tdir_count ) ;
EXPR	861:3	861:3	10	TIFFSwabArrayOfLong ( ( uint32 * ) cp , dir -> tdir_count )
FUNCTION_CALL	861:3	861:52	11	TIFFSwabArrayOfLong ( ( uint32 * ) cp , dir -> tdir_count )
CALLEE	861:3	861:3	12	TIFFSwabArrayOfLong
LEAF_NODE	861:3	861:3	13	TIFFSwabArrayOfLong
LEAF_NODE	861:22	861:22	12	(
ARGUMENT	861:23	861:33	12	( uint32 * ) cp
LEAF_NODE	861:23	861:23	13	(
TYPE_NAME	861:24	861:24	13	uint32
LEAF_NODE	861:24	861:24	14	uint32
LEAF_NODE	861:30	861:30	13	*
LEAF_NODE	861:31	861:31	13	)
FIELD	861:33	861:33	13	cp
LEAF_NODE	861:33	861:33	14	cp
LEAF_NODE	861:35	861:35	12	,
ARGUMENT	861:37	861:37	12	dir -> tdir_count
FIELD	861:37	861:42	13	dir -> tdir_count
LEAF_NODE	861:37	861:37	14	dir
LEAF_NODE	861:40	861:40	14	->
LEAF_NODE	861:42	861:42	14	tdir_count
LEAF_NODE	861:52	861:52	12	)
LEAF_NODE	861:53	861:53	10	;
JUMP_STATEMENT	862:3	862:8	9	break DESTINATION ;
KEYWORD	862:3	862:3	10	break
LEAF_NODE	862:3	862:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	862:8	862:8	10	;
LABEL	863:2	863:20	9	case TIFF_RATIONAL :
LEAF_NODE	863:2	863:2	10	case
LEAF_NODE	863:7	863:7	10	TIFF_RATIONAL
LEAF_NODE	863:20	863:20	10	:
LABEL	864:2	864:21	9	case TIFF_SRATIONAL :
LEAF_NODE	864:2	864:2	10	case
LEAF_NODE	864:7	864:7	10	TIFF_SRATIONAL
LEAF_NODE	864:21	864:21	10	:
EXPR_STATEMENT	865:3	865:55	9	TIFFSwabArrayOfLong ( ( uint32 * ) cp , 2 * dir -> tdir_count ) ;
EXPR	865:3	865:3	10	TIFFSwabArrayOfLong ( ( uint32 * ) cp , 2 * dir -> tdir_count )
FUNCTION_CALL	865:3	865:54	11	TIFFSwabArrayOfLong ( ( uint32 * ) cp , 2 * dir -> tdir_count )
CALLEE	865:3	865:3	12	TIFFSwabArrayOfLong
LEAF_NODE	865:3	865:3	13	TIFFSwabArrayOfLong
LEAF_NODE	865:22	865:22	12	(
ARGUMENT	865:23	865:33	12	( uint32 * ) cp
LEAF_NODE	865:23	865:23	13	(
TYPE_NAME	865:24	865:24	13	uint32
LEAF_NODE	865:24	865:24	14	uint32
LEAF_NODE	865:30	865:30	13	*
LEAF_NODE	865:31	865:31	13	)
FIELD	865:33	865:33	13	cp
LEAF_NODE	865:33	865:33	14	cp
LEAF_NODE	865:35	865:35	12	,
ARGUMENT	865:37	865:39	12	2 * dir -> tdir_count
FIELD	865:37	865:37	13	2
LEAF_NODE	865:37	865:37	14	2
LEAF_NODE	865:38	865:38	13	*
FIELD	865:39	865:44	13	dir -> tdir_count
LEAF_NODE	865:39	865:39	14	dir
LEAF_NODE	865:42	865:42	14	->
LEAF_NODE	865:44	865:44	14	tdir_count
LEAF_NODE	865:54	865:54	12	)
LEAF_NODE	865:55	865:55	10	;
JUMP_STATEMENT	866:3	866:8	9	break DESTINATION ;
KEYWORD	866:3	866:3	10	break
LEAF_NODE	866:3	866:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	866:8	866:8	10	;
LABEL	867:2	867:18	9	case TIFF_DOUBLE :
LEAF_NODE	867:2	867:2	10	case
LEAF_NODE	867:7	867:7	10	TIFF_DOUBLE
LEAF_NODE	867:18	867:18	10	:
EXPR_STATEMENT	868:3	868:55	9	TIFFSwabArrayOfDouble ( ( double * ) cp , dir -> tdir_count ) ;
EXPR	868:3	868:3	10	TIFFSwabArrayOfDouble ( ( double * ) cp , dir -> tdir_count )
FUNCTION_CALL	868:3	868:54	11	TIFFSwabArrayOfDouble ( ( double * ) cp , dir -> tdir_count )
CALLEE	868:3	868:3	12	TIFFSwabArrayOfDouble
LEAF_NODE	868:3	868:3	13	TIFFSwabArrayOfDouble
LEAF_NODE	868:24	868:24	12	(
ARGUMENT	868:25	868:35	12	( double * ) cp
LEAF_NODE	868:25	868:25	13	(
TYPE_NAME	868:26	868:26	13	double
LEAF_NODE	868:26	868:26	14	double
LEAF_NODE	868:32	868:32	13	*
LEAF_NODE	868:33	868:33	13	)
FIELD	868:35	868:35	13	cp
LEAF_NODE	868:35	868:35	14	cp
LEAF_NODE	868:37	868:37	12	,
ARGUMENT	868:39	868:39	12	dir -> tdir_count
FIELD	868:39	868:44	13	dir -> tdir_count
LEAF_NODE	868:39	868:39	14	dir
LEAF_NODE	868:42	868:42	14	->
LEAF_NODE	868:44	868:44	14	tdir_count
LEAF_NODE	868:54	868:54	12	)
LEAF_NODE	868:55	868:55	10	;
JUMP_STATEMENT	869:3	869:8	9	break DESTINATION ;
KEYWORD	869:3	869:3	10	break
LEAF_NODE	869:3	869:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	869:8	869:8	10	;
LEAF_NODE	870:2	870:2	8	}
LEAF_NODE	871:1	871:1	5	}
EXPR_STATEMENT	872:1	872:36	3	dir -> tdir_offset = tif -> tif_dataoff ;
EXPR	872:1	872:1	4	dir -> tdir_offset = tif -> tif_dataoff
ASSIGN	872:1	872:20	5	dir -> tdir_offset = tif -> tif_dataoff
LVAL	872:1	872:1	6	dir -> tdir_offset
FIELD	872:1	872:6	7	dir -> tdir_offset
LEAF_NODE	872:1	872:1	8	dir
LEAF_NODE	872:4	872:4	8	->
LEAF_NODE	872:6	872:6	8	tdir_offset
ASSIGN_OP	872:18	872:18	6	=
LEAF_NODE	872:18	872:18	7	=
RVAL	872:20	872:20	6	tif -> tif_dataoff
FIELD	872:20	872:25	7	tif -> tif_dataoff
LEAF_NODE	872:20	872:20	8	tif
LEAF_NODE	872:23	872:23	8	->
LEAF_NODE	872:25	872:25	8	tif_dataoff
LEAF_NODE	872:36	872:36	4	;
EXPR_STATEMENT	873:1	873:53	3	cc = dir -> tdir_count * TIFFDataWidth ( dir -> tdir_type ) ;
EXPR	873:1	873:1	4	cc = dir -> tdir_count * TIFFDataWidth ( dir -> tdir_type )
ASSIGN	873:1	873:6	5	cc = dir -> tdir_count * TIFFDataWidth ( dir -> tdir_type )
LVAL	873:1	873:1	6	cc
FIELD	873:1	873:1	7	cc
LEAF_NODE	873:1	873:1	8	cc
ASSIGN_OP	873:4	873:4	6	=
LEAF_NODE	873:4	873:4	7	=
RVAL	873:6	873:24	6	dir -> tdir_count * TIFFDataWidth ( dir -> tdir_type )
FIELD	873:6	873:11	7	dir -> tdir_count
LEAF_NODE	873:6	873:6	8	dir
LEAF_NODE	873:9	873:9	8	->
LEAF_NODE	873:11	873:11	8	tdir_count
LEAF_NODE	873:22	873:22	7	*
FUNCTION_CALL	873:24	873:52	7	TIFFDataWidth ( dir -> tdir_type )
CALLEE	873:24	873:24	8	TIFFDataWidth
LEAF_NODE	873:24	873:24	9	TIFFDataWidth
LEAF_NODE	873:37	873:37	8	(
ARGUMENT	873:38	873:38	8	dir -> tdir_type
FIELD	873:38	873:43	9	dir -> tdir_type
LEAF_NODE	873:38	873:38	10	dir
LEAF_NODE	873:41	873:41	10	->
LEAF_NODE	873:43	873:43	10	tdir_type
LEAF_NODE	873:52	873:52	8	)
LEAF_NODE	873:53	873:53	4	;
SELECTION	874:1	875:27	3	
KEYWORD	874:1	874:1	4	if
LEAF_NODE	874:1	874:1	5	if
LEAF_NODE	874:4	874:4	4	(
CONDITION	874:5	874:5	4	SeekOK ( tif , dir -> tdir_offset ) && WriteOK ( tif , cp , cc )
EXPR	874:5	874:5	5	SeekOK ( tif , dir -> tdir_offset ) && WriteOK ( tif , cp , cc )
AND	874:5	875:5	6	SeekOK ( tif , dir -> tdir_offset ) && WriteOK ( tif , cp , cc )
EXPR	874:5	874:5	7	SeekOK ( tif , dir -> tdir_offset )
FUNCTION_CALL	874:5	874:33	8	SeekOK ( tif , dir -> tdir_offset )
CALLEE	874:5	874:5	9	SeekOK
LEAF_NODE	874:5	874:5	10	SeekOK
LEAF_NODE	874:11	874:11	9	(
ARGUMENT	874:12	874:12	9	tif
FIELD	874:12	874:12	10	tif
LEAF_NODE	874:12	874:12	11	tif
LEAF_NODE	874:15	874:15	9	,
ARGUMENT	874:17	874:17	9	dir -> tdir_offset
FIELD	874:17	874:22	10	dir -> tdir_offset
LEAF_NODE	874:17	874:17	11	dir
LEAF_NODE	874:20	874:20	11	->
LEAF_NODE	874:22	874:22	11	tdir_offset
LEAF_NODE	874:33	874:33	9	)
LEAF_NODE	874:35	874:35	7	&&
EXPR	875:5	875:5	7	WriteOK ( tif , cp , cc )
FUNCTION_CALL	875:5	875:24	8	WriteOK ( tif , cp , cc )
CALLEE	875:5	875:5	9	WriteOK
LEAF_NODE	875:5	875:5	10	WriteOK
LEAF_NODE	875:12	875:12	9	(
ARGUMENT	875:13	875:13	9	tif
FIELD	875:13	875:13	10	tif
LEAF_NODE	875:13	875:13	11	tif
LEAF_NODE	875:16	875:16	9	,
ARGUMENT	875:18	875:18	9	cp
FIELD	875:18	875:18	10	cp
LEAF_NODE	875:18	875:18	11	cp
LEAF_NODE	875:20	875:20	9	,
ARGUMENT	875:22	875:22	9	cc
FIELD	875:22	875:22	10	cc
LEAF_NODE	875:22	875:22	11	cc
LEAF_NODE	875:24	875:24	9	)
LEAF_NODE	875:25	875:25	4	)
STATEMENTS	875:27	878:1	4	
LEAF_NODE	875:27	875:27	5	{
STATEMENTS	876:2	877:2	5	
EXPR_STATEMENT	876:2	876:35	6	tif -> tif_dataoff += ( cc + 1 ) & ~1 ;
EXPR	876:2	876:2	7	tif -> tif_dataoff += ( cc + 1 ) & ~1
ASSIGN	876:2	876:22	8	tif -> tif_dataoff += ( cc + 1 ) & ~1
LVAL	876:2	876:2	9	tif -> tif_dataoff
FIELD	876:2	876:7	10	tif -> tif_dataoff
LEAF_NODE	876:2	876:2	11	tif
LEAF_NODE	876:5	876:5	11	->
LEAF_NODE	876:7	876:7	11	tif_dataoff
ASSIGN_OP	876:19	876:19	9	+=
LEAF_NODE	876:19	876:19	10	+=
RVAL	876:22	876:33	9	( cc + 1 ) & ~1
LEAF_NODE	876:22	876:22	10	(
FIELD	876:23	876:23	10	cc
LEAF_NODE	876:23	876:23	11	cc
LEAF_NODE	876:26	876:26	10	+
FIELD	876:28	876:28	10	1
LEAF_NODE	876:28	876:28	11	1
LEAF_NODE	876:29	876:29	10	)
LEAF_NODE	876:31	876:31	10	&
FIELD	876:33	876:33	10	~1
LEAF_NODE	876:33	876:33	11	~1
LEAF_NODE	876:35	876:35	7	;
JUMP_STATEMENT	877:2	877:12	6	return ( 1 ) ;
KEYWORD	877:2	877:2	7	return
LEAF_NODE	877:2	877:2	8	return
DESTINATION	877:9	877:9	7	( 1 )
EXPR	877:9	877:11	8	( 1 )
LEAF_NODE	877:9	877:9	9	(
FIELD	877:10	877:10	9	1
LEAF_NODE	877:10	877:10	10	1
LEAF_NODE	877:11	877:11	9	)
LEAF_NODE	877:12	877:12	7	;
LEAF_NODE	878:1	878:1	5	}
EXPR_STATEMENT	879:1	880:55	3	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing data for field \"%s\"" , _TIFFFieldWithTag ( tif , dir -> tdir_tag ) -> field_name ) ;
EXPR	879:1	879:1	4	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing data for field \"%s\"" , _TIFFFieldWithTag ( tif , dir -> tdir_tag ) -> field_name )
FUNCTION_CALL	879:1	880:54	5	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing data for field \"%s\"" , _TIFFFieldWithTag ( tif , dir -> tdir_tag ) -> field_name )
CALLEE	879:1	879:1	6	TIFFErrorExt
LEAF_NODE	879:1	879:1	7	TIFFErrorExt
LEAF_NODE	879:13	879:13	6	(
ARGUMENT	879:14	879:14	6	tif -> tif_clientdata
FIELD	879:14	879:19	7	tif -> tif_clientdata
LEAF_NODE	879:14	879:14	8	tif
LEAF_NODE	879:17	879:17	8	->
LEAF_NODE	879:19	879:19	8	tif_clientdata
LEAF_NODE	879:33	879:33	6	,
ARGUMENT	879:35	879:35	6	tif -> tif_name
FIELD	879:35	879:40	7	tif -> tif_name
LEAF_NODE	879:35	879:35	8	tif
LEAF_NODE	879:38	879:38	8	->
LEAF_NODE	879:40	879:40	8	tif_name
LEAF_NODE	879:48	879:48	6	,
ARGUMENT	879:50	879:50	6	"Error writing data for field \"%s\""
FIELD	879:50	879:50	7	"Error writing data for field \"%s\""
LEAF_NODE	879:50	879:50	8	"Error writing data for field \"%s\""
LEAF_NODE	879:87	879:87	6	,
ARGUMENT	880:5	880:44	6	_TIFFFieldWithTag ( tif , dir -> tdir_tag ) -> field_name
FUNCTION_CALL	880:5	880:41	7	_TIFFFieldWithTag ( tif , dir -> tdir_tag )
CALLEE	880:5	880:5	8	_TIFFFieldWithTag
LEAF_NODE	880:5	880:5	9	_TIFFFieldWithTag
LEAF_NODE	880:22	880:22	8	(
ARGUMENT	880:23	880:23	8	tif
FIELD	880:23	880:23	9	tif
LEAF_NODE	880:23	880:23	10	tif
LEAF_NODE	880:26	880:26	8	,
ARGUMENT	880:28	880:28	8	dir -> tdir_tag
FIELD	880:28	880:33	9	dir -> tdir_tag
LEAF_NODE	880:28	880:28	10	dir
LEAF_NODE	880:31	880:31	10	->
LEAF_NODE	880:33	880:33	10	tdir_tag
LEAF_NODE	880:41	880:41	8	)
LEAF_NODE	880:42	880:42	7	->
LEAF_NODE	880:44	880:44	7	field_name
LEAF_NODE	880:54	880:54	6	)
LEAF_NODE	880:55	880:55	4	;
JUMP_STATEMENT	881:1	881:11	3	return ( 0 ) ;
KEYWORD	881:1	881:1	4	return
LEAF_NODE	881:1	881:1	5	return
DESTINATION	881:8	881:8	4	( 0 )
EXPR	881:8	881:10	5	( 0 )
LEAF_NODE	881:8	881:8	6	(
FIELD	881:9	881:9	6	0
LEAF_NODE	881:9	881:9	7	0
LEAF_NODE	881:10	881:10	6	)
LEAF_NODE	881:11	881:11	4	;
LEAF_NODE	882:0	882:0	2	}
FUNCTION_DEF	888:0	962:0	1	
RETURN_TYPE	888:0	888:7	2	static int
LEAF_NODE	888:0	888:0	3	static
TYPE_NAME	888:7	888:7	3	int
LEAF_NODE	888:7	888:7	4	int
FUNCTION_NAME	889:0	889:0	2	TIFFLinkDirectory
LEAF_NODE	889:0	889:0	3	TIFFLinkDirectory
PARAMETER_LIST	889:17	889:27	2	( TIFF * tif )
LEAF_NODE	889:17	889:17	3	(
PARAMETER_DECL	889:18	889:24	3	TIFF * tif
TYPE	889:18	889:22	4	TIFF *
TYPE_NAME	889:18	889:18	5	TIFF
LEAF_NODE	889:18	889:18	6	TIFF
POINTER	889:22	889:22	5	*
LEAF_NODE	889:22	889:22	6	*
NAME	889:24	889:24	4	tif
LEAF_NODE	889:24	889:24	5	tif
LEAF_NODE	889:27	889:27	3	)
LEAF_NODE	890:0	890:0	2	{
STATEMENTS	891:1	961:1	2	
LEAF_NODE	891:1	891:1	3	static
SIMPLE_DECL	891:8	891:49	3	const char [ ] module ; module = "TIFFLinkDirectory" ;
VAR_DECL	891:8	891:19	4	const char [ ] module ; module = "TIFFLinkDirectory"
TYPE	891:8	891:25	5	const char [ ]
TYPE_NAME	891:8	891:14	6	const char
LEAF_NODE	891:8	891:8	7	const
LEAF_NODE	891:14	891:14	7	char
TYPE_SUFFIX	891:25	891:26	6	[ ]
LEAF_NODE	891:25	891:25	7	[
LEAF_NODE	891:26	891:26	7	]
NAME	891:19	891:19	5	module
LEAF_NODE	891:19	891:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	891:19	891:19	5	module = "TIFFLinkDirectory"
ASSIGN	891:19	891:30	6	module = "TIFFLinkDirectory"
LVAL	891:19	891:19	7	module
NAME	891:19	891:19	8	module
LEAF_NODE	891:19	891:19	9	module
ASSIGN_OP	891:28	891:28	7	=
LEAF_NODE	891:28	891:28	8	=
RVAL	891:30	891:30	7	"TIFFLinkDirectory"
FIELD	891:30	891:30	8	"TIFFLinkDirectory"
LEAF_NODE	891:30	891:30	9	"TIFFLinkDirectory"
LEAF_NODE	891:49	891:49	4	;
SIMPLE_DECL	892:1	892:15	3	uint32 nextdir ;
VAR_DECL	892:1	892:8	4	uint32 nextdir
TYPE	892:1	892:1	5	uint32
TYPE_NAME	892:1	892:1	6	uint32
LEAF_NODE	892:1	892:1	7	uint32
NAME	892:8	892:8	5	nextdir
LEAF_NODE	892:8	892:8	6	nextdir
LEAF_NODE	892:15	892:15	4	;
SIMPLE_DECL	893:1	893:14	3	uint32 diroff ;
VAR_DECL	893:1	893:8	4	uint32 diroff
TYPE	893:1	893:1	5	uint32
TYPE_NAME	893:1	893:1	6	uint32
LEAF_NODE	893:1	893:1	7	uint32
NAME	893:8	893:8	5	diroff
LEAF_NODE	893:8	893:8	6	diroff
LEAF_NODE	893:14	893:14	4	;
EXPR_STATEMENT	895:1	895:67	3	tif -> tif_diroff = ( TIFFSeekFile ( tif , ( toff_t ) 0 , SEEK_END ) + 1 ) & ~ 1 ;
EXPR	895:1	895:1	4	tif -> tif_diroff = ( TIFFSeekFile ( tif , ( toff_t ) 0 , SEEK_END ) + 1 ) & ~ 1
ASSIGN	895:1	895:19	5	tif -> tif_diroff = ( TIFFSeekFile ( tif , ( toff_t ) 0 , SEEK_END ) + 1 ) & ~ 1
LVAL	895:1	895:1	6	tif -> tif_diroff
FIELD	895:1	895:6	7	tif -> tif_diroff
LEAF_NODE	895:1	895:1	8	tif
LEAF_NODE	895:4	895:4	8	->
LEAF_NODE	895:6	895:6	8	tif_diroff
ASSIGN_OP	895:17	895:17	6	=
LEAF_NODE	895:17	895:17	7	=
RVAL	895:19	895:64	6	( TIFFSeekFile ( tif , ( toff_t ) 0 , SEEK_END ) + 1 ) & ~ 1
LEAF_NODE	895:19	895:19	7	(
FUNCTION_CALL	895:20	895:58	7	TIFFSeekFile ( tif , ( toff_t ) 0 , SEEK_END )
CALLEE	895:20	895:20	8	TIFFSeekFile
LEAF_NODE	895:20	895:20	9	TIFFSeekFile
LEAF_NODE	895:32	895:32	8	(
ARGUMENT	895:33	895:33	8	tif
FIELD	895:33	895:33	9	tif
LEAF_NODE	895:33	895:33	10	tif
LEAF_NODE	895:36	895:36	8	,
ARGUMENT	895:38	895:47	8	( toff_t ) 0
LEAF_NODE	895:38	895:38	9	(
TYPE_NAME	895:39	895:39	9	toff_t
LEAF_NODE	895:39	895:39	10	toff_t
LEAF_NODE	895:45	895:45	9	)
FIELD	895:47	895:47	9	0
LEAF_NODE	895:47	895:47	10	0
LEAF_NODE	895:48	895:48	8	,
ARGUMENT	895:50	895:50	8	SEEK_END
FIELD	895:50	895:50	9	SEEK_END
LEAF_NODE	895:50	895:50	10	SEEK_END
LEAF_NODE	895:58	895:58	8	)
LEAF_NODE	895:59	895:59	7	+
FIELD	895:60	895:60	7	1
LEAF_NODE	895:60	895:60	8	1
LEAF_NODE	895:61	895:61	7	)
LEAF_NODE	895:63	895:63	7	&
UNARY_EXPR	895:64	895:66	7	~ 1
UNARY_OPERATOR	895:64	895:64	8	~
LEAF_NODE	895:64	895:64	9	~
FIELD	895:66	895:66	8	1
LEAF_NODE	895:66	895:66	9	1
LEAF_NODE	895:67	895:67	4	;
EXPR_STATEMENT	896:1	896:34	3	diroff = ( uint32 ) tif -> tif_diroff ;
EXPR	896:1	896:1	4	diroff = ( uint32 ) tif -> tif_diroff
ASSIGN	896:1	896:10	5	diroff = ( uint32 ) tif -> tif_diroff
LVAL	896:1	896:1	6	diroff
FIELD	896:1	896:1	7	diroff
LEAF_NODE	896:1	896:1	8	diroff
ASSIGN_OP	896:8	896:8	6	=
LEAF_NODE	896:8	896:8	7	=
RVAL	896:10	896:19	6	( uint32 ) tif -> tif_diroff
LEAF_NODE	896:10	896:10	7	(
TYPE_NAME	896:11	896:11	7	uint32
LEAF_NODE	896:11	896:11	8	uint32
LEAF_NODE	896:17	896:17	7	)
FIELD	896:19	896:24	7	tif -> tif_diroff
LEAF_NODE	896:19	896:19	8	tif
LEAF_NODE	896:22	896:22	8	->
LEAF_NODE	896:24	896:24	8	tif_diroff
LEAF_NODE	896:34	896:34	4	;
SELECTION	897:1	898:2	3	
KEYWORD	897:1	897:1	4	if
LEAF_NODE	897:1	897:1	5	if
LEAF_NODE	897:4	897:4	4	(
CONDITION	897:5	897:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	897:5	897:22	5	tif -> tif_flags & TIFF_SWAB
FIELD	897:5	897:10	6	tif -> tif_flags
LEAF_NODE	897:5	897:5	7	tif
LEAF_NODE	897:8	897:8	7	->
LEAF_NODE	897:10	897:10	7	tif_flags
LEAF_NODE	897:20	897:20	6	&
FIELD	897:22	897:22	6	TIFF_SWAB
LEAF_NODE	897:22	897:22	7	TIFF_SWAB
LEAF_NODE	897:31	897:31	4	)
STATEMENTS	898:2	898:2	4	
EXPR_STATEMENT	898:2	898:23	5	TIFFSwabLong ( & diroff ) ;
EXPR	898:2	898:2	6	TIFFSwabLong ( & diroff )
FUNCTION_CALL	898:2	898:22	7	TIFFSwabLong ( & diroff )
CALLEE	898:2	898:2	8	TIFFSwabLong
LEAF_NODE	898:2	898:2	9	TIFFSwabLong
LEAF_NODE	898:14	898:14	8	(
ARGUMENT	898:15	898:15	8	& diroff
UNARY_EXPR	898:15	898:16	9	& diroff
UNARY_OPERATOR	898:15	898:15	10	&
LEAF_NODE	898:15	898:15	11	&
FIELD	898:16	898:16	10	diroff
LEAF_NODE	898:16	898:16	11	diroff
LEAF_NODE	898:22	898:22	8	)
LEAF_NODE	898:23	898:23	6	;
SELECTION	900:1	900:37	3	
KEYWORD	900:1	900:1	4	if
LEAF_NODE	900:1	900:1	5	if
LEAF_NODE	900:4	900:4	4	(
CONDITION	900:5	900:5	4	tif -> tif_flags & TIFF_INSUBIFD
EXPR	900:5	900:22	5	tif -> tif_flags & TIFF_INSUBIFD
FIELD	900:5	900:10	6	tif -> tif_flags
LEAF_NODE	900:5	900:5	7	tif
LEAF_NODE	900:8	900:8	7	->
LEAF_NODE	900:10	900:10	7	tif_flags
LEAF_NODE	900:20	900:20	6	&
FIELD	900:22	900:22	6	TIFF_INSUBIFD
LEAF_NODE	900:22	900:22	7	TIFF_INSUBIFD
LEAF_NODE	900:35	900:35	4	)
STATEMENTS	900:37	918:1	4	
LEAF_NODE	900:37	900:37	5	{
STATEMENTS	901:2	917:2	5	
EXPR_STATEMENT	901:2	901:56	6	( void ) TIFFSeekFile ( tif , tif -> tif_subifdoff , SEEK_SET ) ;
EXPR	901:2	901:9	7	( void ) TIFFSeekFile ( tif , tif -> tif_subifdoff , SEEK_SET )
LEAF_NODE	901:2	901:2	8	(
TYPE_NAME	901:3	901:3	8	void
LEAF_NODE	901:3	901:3	9	void
LEAF_NODE	901:7	901:7	8	)
FUNCTION_CALL	901:9	901:55	8	TIFFSeekFile ( tif , tif -> tif_subifdoff , SEEK_SET )
CALLEE	901:9	901:9	9	TIFFSeekFile
LEAF_NODE	901:9	901:9	10	TIFFSeekFile
LEAF_NODE	901:21	901:21	9	(
ARGUMENT	901:22	901:22	9	tif
FIELD	901:22	901:22	10	tif
LEAF_NODE	901:22	901:22	11	tif
LEAF_NODE	901:25	901:25	9	,
ARGUMENT	901:27	901:27	9	tif -> tif_subifdoff
FIELD	901:27	901:32	10	tif -> tif_subifdoff
LEAF_NODE	901:27	901:27	11	tif
LEAF_NODE	901:30	901:30	11	->
LEAF_NODE	901:32	901:32	11	tif_subifdoff
LEAF_NODE	901:45	901:45	9	,
ARGUMENT	901:47	901:47	9	SEEK_SET
FIELD	901:47	901:47	10	SEEK_SET
LEAF_NODE	901:47	901:47	11	SEEK_SET
LEAF_NODE	901:55	901:55	9	)
LEAF_NODE	901:56	901:56	7	;
SELECTION	902:2	902:47	6	
KEYWORD	902:2	902:2	7	if
LEAF_NODE	902:2	902:2	8	if
LEAF_NODE	902:5	902:5	7	(
CONDITION	902:6	902:6	7	! WriteOK ( tif , & diroff , sizeof ( diroff ) )
EXPR	902:6	902:6	8	! WriteOK ( tif , & diroff , sizeof ( diroff ) )
UNARY_EXPR	902:6	902:7	9	! WriteOK ( tif , & diroff , sizeof ( diroff ) )
UNARY_OPERATOR	902:6	902:6	10	!
LEAF_NODE	902:6	902:6	11	!
FUNCTION_CALL	902:7	902:44	10	WriteOK ( tif , & diroff , sizeof ( diroff ) )
CALLEE	902:7	902:7	11	WriteOK
LEAF_NODE	902:7	902:7	12	WriteOK
LEAF_NODE	902:14	902:14	11	(
ARGUMENT	902:15	902:15	11	tif
FIELD	902:15	902:15	12	tif
LEAF_NODE	902:15	902:15	13	tif
LEAF_NODE	902:18	902:18	11	,
ARGUMENT	902:20	902:20	11	& diroff
UNARY_EXPR	902:20	902:21	12	& diroff
UNARY_OPERATOR	902:20	902:20	13	&
LEAF_NODE	902:20	902:20	14	&
FIELD	902:21	902:21	13	diroff
LEAF_NODE	902:21	902:21	14	diroff
LEAF_NODE	902:27	902:27	11	,
ARGUMENT	902:29	902:29	11	sizeof ( diroff )
FUNCTION_CALL	902:29	902:43	12	sizeof ( diroff )
CALLEE	902:29	902:29	13	sizeof
LEAF_NODE	902:29	902:29	14	sizeof
LEAF_NODE	902:36	902:36	13	(
ARGUMENT	902:37	902:37	13	diroff
FIELD	902:37	902:37	14	diroff
LEAF_NODE	902:37	902:37	15	diroff
LEAF_NODE	902:43	902:43	13	)
LEAF_NODE	902:44	902:44	11	)
LEAF_NODE	902:45	902:45	7	)
STATEMENTS	902:47	907:2	7	
LEAF_NODE	902:47	902:47	8	{
STATEMENTS	903:3	906:3	8	
EXPR_STATEMENT	903:3	905:21	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error writing SubIFD directory link" , tif -> tif_name ) ;
EXPR	903:3	903:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error writing SubIFD directory link" , tif -> tif_name )
FUNCTION_CALL	903:3	905:20	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Error writing SubIFD directory link" , tif -> tif_name )
CALLEE	903:3	903:3	12	TIFFErrorExt
LEAF_NODE	903:3	903:3	13	TIFFErrorExt
LEAF_NODE	903:15	903:15	12	(
ARGUMENT	903:16	903:16	12	tif -> tif_clientdata
FIELD	903:16	903:21	13	tif -> tif_clientdata
LEAF_NODE	903:16	903:16	14	tif
LEAF_NODE	903:19	903:19	14	->
LEAF_NODE	903:21	903:21	14	tif_clientdata
LEAF_NODE	903:35	903:35	12	,
ARGUMENT	903:37	903:37	12	module
FIELD	903:37	903:37	13	module
LEAF_NODE	903:37	903:37	14	module
LEAF_NODE	903:43	903:43	12	,
ARGUMENT	904:7	904:7	12	"%s: Error writing SubIFD directory link"
FIELD	904:7	904:7	13	"%s: Error writing SubIFD directory link"
LEAF_NODE	904:7	904:7	14	"%s: Error writing SubIFD directory link"
LEAF_NODE	904:48	904:48	12	,
ARGUMENT	905:7	905:7	12	tif -> tif_name
FIELD	905:7	905:12	13	tif -> tif_name
LEAF_NODE	905:7	905:7	14	tif
LEAF_NODE	905:10	905:10	14	->
LEAF_NODE	905:12	905:12	14	tif_name
LEAF_NODE	905:20	905:20	12	)
LEAF_NODE	905:21	905:21	10	;
JUMP_STATEMENT	906:3	906:13	9	return ( 0 ) ;
KEYWORD	906:3	906:3	10	return
LEAF_NODE	906:3	906:3	11	return
DESTINATION	906:10	906:10	10	( 0 )
EXPR	906:10	906:12	11	( 0 )
LEAF_NODE	906:10	906:10	12	(
FIELD	906:11	906:11	12	0
LEAF_NODE	906:11	906:11	13	0
LEAF_NODE	906:12	906:12	12	)
LEAF_NODE	906:13	906:13	10	;
LEAF_NODE	907:2	907:2	8	}
SELECTION	913:2	914:3	6	
KEYWORD	913:2	913:2	7	if
LEAF_NODE	913:2	913:2	8	if
LEAF_NODE	913:5	913:5	7	(
CONDITION	913:6	913:6	7	-- tif -> tif_nsubifd
EXPR	913:6	913:8	8	-- tif -> tif_nsubifd
LEAF_NODE	913:6	913:6	9	--
FIELD	913:8	913:13	9	tif -> tif_nsubifd
LEAF_NODE	913:8	913:8	10	tif
LEAF_NODE	913:11	913:11	10	->
LEAF_NODE	913:13	913:13	10	tif_nsubifd
LEAF_NODE	913:24	913:24	7	)
STATEMENTS	914:3	914:3	7	
EXPR_STATEMENT	914:3	914:40	8	tif -> tif_subifdoff += sizeof ( diroff ) ;
EXPR	914:3	914:3	9	tif -> tif_subifdoff += sizeof ( diroff )
ASSIGN	914:3	914:25	10	tif -> tif_subifdoff += sizeof ( diroff )
LVAL	914:3	914:3	11	tif -> tif_subifdoff
FIELD	914:3	914:8	12	tif -> tif_subifdoff
LEAF_NODE	914:3	914:3	13	tif
LEAF_NODE	914:6	914:6	13	->
LEAF_NODE	914:8	914:8	13	tif_subifdoff
ASSIGN_OP	914:22	914:22	11	+=
LEAF_NODE	914:22	914:22	12	+=
RVAL	914:25	914:25	11	sizeof ( diroff )
FUNCTION_CALL	914:25	914:39	12	sizeof ( diroff )
CALLEE	914:25	914:25	13	sizeof
LEAF_NODE	914:25	914:25	14	sizeof
LEAF_NODE	914:32	914:32	13	(
ARGUMENT	914:33	914:33	13	diroff
FIELD	914:33	914:33	14	diroff
LEAF_NODE	914:33	914:33	15	diroff
LEAF_NODE	914:39	914:39	13	)
LEAF_NODE	914:40	914:40	9	;
SELECTION	915:2	916:3	6	
KEYWORD	915:2	915:2	7	else
LEAF_NODE	915:2	915:2	8	else
STATEMENTS	916:3	916:3	7	
EXPR_STATEMENT	916:3	916:35	8	tif -> tif_flags &= ~TIFF_INSUBIFD ;
EXPR	916:3	916:3	9	tif -> tif_flags &= ~TIFF_INSUBIFD
ASSIGN	916:3	916:21	10	tif -> tif_flags &= ~TIFF_INSUBIFD
LVAL	916:3	916:3	11	tif -> tif_flags
FIELD	916:3	916:8	12	tif -> tif_flags
LEAF_NODE	916:3	916:3	13	tif
LEAF_NODE	916:6	916:6	13	->
LEAF_NODE	916:8	916:8	13	tif_flags
ASSIGN_OP	916:18	916:18	11	&=
LEAF_NODE	916:18	916:18	12	&=
RVAL	916:21	916:21	11	~TIFF_INSUBIFD
FIELD	916:21	916:21	12	~TIFF_INSUBIFD
LEAF_NODE	916:21	916:21	13	~TIFF_INSUBIFD
LEAF_NODE	916:35	916:35	9	;
JUMP_STATEMENT	917:2	917:12	6	return ( 1 ) ;
KEYWORD	917:2	917:2	7	return
LEAF_NODE	917:2	917:2	8	return
DESTINATION	917:9	917:9	7	( 1 )
EXPR	917:9	917:11	8	( 1 )
LEAF_NODE	917:9	917:9	9	(
FIELD	917:10	917:10	9	1
LEAF_NODE	917:10	917:10	10	1
LEAF_NODE	917:11	917:11	9	)
LEAF_NODE	917:12	917:12	7	;
LEAF_NODE	918:1	918:1	5	}
SELECTION	920:1	920:39	3	
KEYWORD	920:1	920:1	4	if
LEAF_NODE	920:1	920:1	5	if
LEAF_NODE	920:4	920:4	4	(
CONDITION	920:5	920:5	4	tif -> tif_header . tiff_diroff == 0
EXPR	920:5	920:36	5	tif -> tif_header . tiff_diroff == 0
FIELD	920:5	920:21	6	tif -> tif_header . tiff_diroff
LEAF_NODE	920:5	920:5	7	tif
LEAF_NODE	920:8	920:8	7	->
LEAF_NODE	920:10	920:10	7	tif_header
LEAF_NODE	920:20	920:20	7	.
LEAF_NODE	920:21	920:21	7	tiff_diroff
EQ_OPERATOR	920:33	920:33	6	==
LEAF_NODE	920:33	920:33	7	==
FIELD	920:36	920:36	6	0
LEAF_NODE	920:36	920:36	7	0
LEAF_NODE	920:37	920:37	4	)
STATEMENTS	920:39	932:1	4	
LEAF_NODE	920:39	920:39	5	{
STATEMENTS	924:2	931:2	5	
EXPR_STATEMENT	924:2	924:56	6	tif -> tif_header . tiff_diroff = ( uint32 ) tif -> tif_diroff ;
EXPR	924:2	924:2	7	tif -> tif_header . tiff_diroff = ( uint32 ) tif -> tif_diroff
ASSIGN	924:2	924:32	8	tif -> tif_header . tiff_diroff = ( uint32 ) tif -> tif_diroff
LVAL	924:2	924:2	9	tif -> tif_header . tiff_diroff
FIELD	924:2	924:18	10	tif -> tif_header . tiff_diroff
LEAF_NODE	924:2	924:2	11	tif
LEAF_NODE	924:5	924:5	11	->
LEAF_NODE	924:7	924:7	11	tif_header
LEAF_NODE	924:17	924:17	11	.
LEAF_NODE	924:18	924:18	11	tiff_diroff
ASSIGN_OP	924:30	924:30	9	=
LEAF_NODE	924:30	924:30	10	=
RVAL	924:32	924:41	9	( uint32 ) tif -> tif_diroff
LEAF_NODE	924:32	924:32	10	(
TYPE_NAME	924:33	924:33	10	uint32
LEAF_NODE	924:33	924:33	11	uint32
LEAF_NODE	924:39	924:39	10	)
FIELD	924:41	924:46	10	tif -> tif_diroff
LEAF_NODE	924:41	924:41	11	tif
LEAF_NODE	924:44	924:44	11	->
LEAF_NODE	924:46	924:46	11	tif_diroff
LEAF_NODE	924:56	924:56	7	;
EXPR_STATEMENT	926:2	926:57	6	( void ) TIFFSeekFile ( tif , HDROFF ( tiff_diroff ) , SEEK_SET ) ;
EXPR	926:2	926:9	7	( void ) TIFFSeekFile ( tif , HDROFF ( tiff_diroff ) , SEEK_SET )
LEAF_NODE	926:2	926:2	8	(
TYPE_NAME	926:3	926:3	8	void
LEAF_NODE	926:3	926:3	9	void
LEAF_NODE	926:7	926:7	8	)
FUNCTION_CALL	926:9	926:56	8	TIFFSeekFile ( tif , HDROFF ( tiff_diroff ) , SEEK_SET )
CALLEE	926:9	926:9	9	TIFFSeekFile
LEAF_NODE	926:9	926:9	10	TIFFSeekFile
LEAF_NODE	926:21	926:21	9	(
ARGUMENT	926:22	926:22	9	tif
FIELD	926:22	926:22	10	tif
LEAF_NODE	926:22	926:22	11	tif
LEAF_NODE	926:25	926:25	9	,
ARGUMENT	926:27	926:27	9	HDROFF ( tiff_diroff )
FUNCTION_CALL	926:27	926:45	10	HDROFF ( tiff_diroff )
CALLEE	926:27	926:27	11	HDROFF
LEAF_NODE	926:27	926:27	12	HDROFF
LEAF_NODE	926:33	926:33	11	(
ARGUMENT	926:34	926:34	11	tiff_diroff
FIELD	926:34	926:34	12	tiff_diroff
LEAF_NODE	926:34	926:34	13	tiff_diroff
LEAF_NODE	926:45	926:45	11	)
LEAF_NODE	926:46	926:46	9	,
ARGUMENT	926:48	926:48	9	SEEK_SET
FIELD	926:48	926:48	10	SEEK_SET
LEAF_NODE	926:48	926:48	11	SEEK_SET
LEAF_NODE	926:56	926:56	9	)
LEAF_NODE	926:57	926:57	7	;
SELECTION	927:2	927:47	6	
KEYWORD	927:2	927:2	7	if
LEAF_NODE	927:2	927:2	8	if
LEAF_NODE	927:5	927:5	7	(
CONDITION	927:6	927:6	7	! WriteOK ( tif , & diroff , sizeof ( diroff ) )
EXPR	927:6	927:6	8	! WriteOK ( tif , & diroff , sizeof ( diroff ) )
UNARY_EXPR	927:6	927:7	9	! WriteOK ( tif , & diroff , sizeof ( diroff ) )
UNARY_OPERATOR	927:6	927:6	10	!
LEAF_NODE	927:6	927:6	11	!
FUNCTION_CALL	927:7	927:44	10	WriteOK ( tif , & diroff , sizeof ( diroff ) )
CALLEE	927:7	927:7	11	WriteOK
LEAF_NODE	927:7	927:7	12	WriteOK
LEAF_NODE	927:14	927:14	11	(
ARGUMENT	927:15	927:15	11	tif
FIELD	927:15	927:15	12	tif
LEAF_NODE	927:15	927:15	13	tif
LEAF_NODE	927:18	927:18	11	,
ARGUMENT	927:20	927:20	11	& diroff
UNARY_EXPR	927:20	927:21	12	& diroff
UNARY_OPERATOR	927:20	927:20	13	&
LEAF_NODE	927:20	927:20	14	&
FIELD	927:21	927:21	13	diroff
LEAF_NODE	927:21	927:21	14	diroff
LEAF_NODE	927:27	927:27	11	,
ARGUMENT	927:29	927:29	11	sizeof ( diroff )
FUNCTION_CALL	927:29	927:43	12	sizeof ( diroff )
CALLEE	927:29	927:29	13	sizeof
LEAF_NODE	927:29	927:29	14	sizeof
LEAF_NODE	927:36	927:36	13	(
ARGUMENT	927:37	927:37	13	diroff
FIELD	927:37	927:37	14	diroff
LEAF_NODE	927:37	927:37	15	diroff
LEAF_NODE	927:43	927:43	13	)
LEAF_NODE	927:44	927:44	11	)
LEAF_NODE	927:45	927:45	7	)
STATEMENTS	927:47	930:2	7	
LEAF_NODE	927:47	927:47	8	{
STATEMENTS	928:3	929:3	8	
EXPR_STATEMENT	928:3	928:80	9	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing TIFF header" ) ;
EXPR	928:3	928:3	10	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing TIFF header" )
FUNCTION_CALL	928:3	928:79	11	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Error writing TIFF header" )
CALLEE	928:3	928:3	12	TIFFErrorExt
LEAF_NODE	928:3	928:3	13	TIFFErrorExt
LEAF_NODE	928:15	928:15	12	(
ARGUMENT	928:16	928:16	12	tif -> tif_clientdata
FIELD	928:16	928:21	13	tif -> tif_clientdata
LEAF_NODE	928:16	928:16	14	tif
LEAF_NODE	928:19	928:19	14	->
LEAF_NODE	928:21	928:21	14	tif_clientdata
LEAF_NODE	928:35	928:35	12	,
ARGUMENT	928:37	928:37	12	tif -> tif_name
FIELD	928:37	928:42	13	tif -> tif_name
LEAF_NODE	928:37	928:37	14	tif
LEAF_NODE	928:40	928:40	14	->
LEAF_NODE	928:42	928:42	14	tif_name
LEAF_NODE	928:50	928:50	12	,
ARGUMENT	928:52	928:52	12	"Error writing TIFF header"
FIELD	928:52	928:52	13	"Error writing TIFF header"
LEAF_NODE	928:52	928:52	14	"Error writing TIFF header"
LEAF_NODE	928:79	928:79	12	)
LEAF_NODE	928:80	928:80	10	;
JUMP_STATEMENT	929:3	929:13	9	return ( 0 ) ;
KEYWORD	929:3	929:3	10	return
LEAF_NODE	929:3	929:3	11	return
DESTINATION	929:10	929:10	10	( 0 )
EXPR	929:10	929:12	11	( 0 )
LEAF_NODE	929:10	929:10	12	(
FIELD	929:11	929:11	12	0
LEAF_NODE	929:11	929:11	13	0
LEAF_NODE	929:12	929:12	12	)
LEAF_NODE	929:13	929:13	10	;
LEAF_NODE	930:2	930:2	8	}
JUMP_STATEMENT	931:2	931:12	6	return ( 1 ) ;
KEYWORD	931:2	931:2	7	return
LEAF_NODE	931:2	931:2	8	return
DESTINATION	931:9	931:9	7	( 1 )
EXPR	931:9	931:11	8	( 1 )
LEAF_NODE	931:9	931:9	9	(
FIELD	931:10	931:10	9	1
LEAF_NODE	931:10	931:10	10	1
LEAF_NODE	931:11	931:11	9	)
LEAF_NODE	931:12	931:12	7	;
LEAF_NODE	932:1	932:1	5	}
EXPR_STATEMENT	936:1	936:38	3	nextdir = tif -> tif_header . tiff_diroff ;
EXPR	936:1	936:1	4	nextdir = tif -> tif_header . tiff_diroff
ASSIGN	936:1	936:11	5	nextdir = tif -> tif_header . tiff_diroff
LVAL	936:1	936:1	6	nextdir
FIELD	936:1	936:1	7	nextdir
LEAF_NODE	936:1	936:1	8	nextdir
ASSIGN_OP	936:9	936:9	6	=
LEAF_NODE	936:9	936:9	7	=
RVAL	936:11	936:11	6	tif -> tif_header . tiff_diroff
FIELD	936:11	936:27	7	tif -> tif_header . tiff_diroff
LEAF_NODE	936:11	936:11	8	tif
LEAF_NODE	936:14	936:14	8	->
LEAF_NODE	936:16	936:16	8	tif_header
LEAF_NODE	936:26	936:26	8	.
LEAF_NODE	936:27	936:27	8	tiff_diroff
LEAF_NODE	936:38	936:38	4	;
ITERATION	937:1	937:4	3	
KEYWORD	937:1	937:1	4	do
LEAF_NODE	937:1	937:1	5	do
LEAF_NODE	955:9	955:9	4	(
CONDITION	955:10	955:10	4	nextdir != 0
EXPR	955:10	955:21	5	nextdir != 0
FIELD	955:10	955:10	6	nextdir
LEAF_NODE	955:10	955:10	7	nextdir
EQ_OPERATOR	955:18	955:18	6	!=
LEAF_NODE	955:18	955:18	7	!=
FIELD	955:21	955:21	6	0
LEAF_NODE	955:21	955:21	7	0
LEAF_NODE	955:22	955:22	4	)
STATEMENTS	937:4	955:1	4	
LEAF_NODE	937:4	937:4	5	{
STATEMENTS	938:2	953:2	5	
SIMPLE_DECL	938:2	938:17	6	uint16 dircount ;
VAR_DECL	938:2	938:9	7	uint16 dircount
TYPE	938:2	938:2	8	uint16
TYPE_NAME	938:2	938:2	9	uint16
LEAF_NODE	938:2	938:2	10	uint16
NAME	938:9	938:9	8	dircount
LEAF_NODE	938:9	938:9	9	dircount
LEAF_NODE	938:17	938:17	7	;
SELECTION	940:2	941:50	6	
KEYWORD	940:2	940:2	7	if
LEAF_NODE	940:2	940:2	8	if
LEAF_NODE	940:5	940:5	7	(
CONDITION	940:6	940:6	7	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount , sizeof ( dircount ) )
EXPR	940:6	940:6	8	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount , sizeof ( dircount ) )
OR	940:6	941:6	9	! SeekOK ( tif , nextdir ) || ! ReadOK ( tif , & dircount , sizeof ( dircount ) )
EXPR	940:6	940:6	10	! SeekOK ( tif , nextdir )
UNARY_EXPR	940:6	940:7	11	! SeekOK ( tif , nextdir )
UNARY_OPERATOR	940:6	940:6	12	!
LEAF_NODE	940:6	940:6	13	!
FUNCTION_CALL	940:7	940:26	12	SeekOK ( tif , nextdir )
CALLEE	940:7	940:7	13	SeekOK
LEAF_NODE	940:7	940:7	14	SeekOK
LEAF_NODE	940:13	940:13	13	(
ARGUMENT	940:14	940:14	13	tif
FIELD	940:14	940:14	14	tif
LEAF_NODE	940:14	940:14	15	tif
LEAF_NODE	940:17	940:17	13	,
ARGUMENT	940:19	940:19	13	nextdir
FIELD	940:19	940:19	14	nextdir
LEAF_NODE	940:19	940:19	15	nextdir
LEAF_NODE	940:26	940:26	13	)
LEAF_NODE	940:28	940:28	10	||
EXPR	941:6	941:6	10	! ReadOK ( tif , & dircount , sizeof ( dircount ) )
UNARY_EXPR	941:6	941:7	11	! ReadOK ( tif , & dircount , sizeof ( dircount ) )
UNARY_OPERATOR	941:6	941:6	12	!
LEAF_NODE	941:6	941:6	13	!
FUNCTION_CALL	941:7	941:47	12	ReadOK ( tif , & dircount , sizeof ( dircount ) )
CALLEE	941:7	941:7	13	ReadOK
LEAF_NODE	941:7	941:7	14	ReadOK
LEAF_NODE	941:13	941:13	13	(
ARGUMENT	941:14	941:14	13	tif
FIELD	941:14	941:14	14	tif
LEAF_NODE	941:14	941:14	15	tif
LEAF_NODE	941:17	941:17	13	,
ARGUMENT	941:19	941:19	13	& dircount
UNARY_EXPR	941:19	941:20	14	& dircount
UNARY_OPERATOR	941:19	941:19	15	&
LEAF_NODE	941:19	941:19	16	&
FIELD	941:20	941:20	15	dircount
LEAF_NODE	941:20	941:20	16	dircount
LEAF_NODE	941:28	941:28	13	,
ARGUMENT	941:30	941:30	13	sizeof ( dircount )
FUNCTION_CALL	941:30	941:46	14	sizeof ( dircount )
CALLEE	941:30	941:30	15	sizeof
LEAF_NODE	941:30	941:30	16	sizeof
LEAF_NODE	941:37	941:37	15	(
ARGUMENT	941:38	941:38	15	dircount
FIELD	941:38	941:38	16	dircount
LEAF_NODE	941:38	941:38	17	dircount
LEAF_NODE	941:46	941:46	15	)
LEAF_NODE	941:47	941:47	13	)
LEAF_NODE	941:48	941:48	7	)
STATEMENTS	941:50	944:2	7	
LEAF_NODE	941:50	941:50	8	{
STATEMENTS	942:3	943:3	8	
EXPR_STATEMENT	942:3	942:78	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" ) ;
EXPR	942:3	942:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
FUNCTION_CALL	942:3	942:77	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory count" )
CALLEE	942:3	942:3	12	TIFFErrorExt
LEAF_NODE	942:3	942:3	13	TIFFErrorExt
LEAF_NODE	942:15	942:15	12	(
ARGUMENT	942:16	942:16	12	tif -> tif_clientdata
FIELD	942:16	942:21	13	tif -> tif_clientdata
LEAF_NODE	942:16	942:16	14	tif
LEAF_NODE	942:19	942:19	14	->
LEAF_NODE	942:21	942:21	14	tif_clientdata
LEAF_NODE	942:35	942:35	12	,
ARGUMENT	942:37	942:37	12	module
FIELD	942:37	942:37	13	module
LEAF_NODE	942:37	942:37	14	module
LEAF_NODE	942:43	942:43	12	,
ARGUMENT	942:45	942:45	12	"Error fetching directory count"
FIELD	942:45	942:45	13	"Error fetching directory count"
LEAF_NODE	942:45	942:45	14	"Error fetching directory count"
LEAF_NODE	942:77	942:77	12	)
LEAF_NODE	942:78	942:78	10	;
JUMP_STATEMENT	943:3	943:13	9	return ( 0 ) ;
KEYWORD	943:3	943:3	10	return
LEAF_NODE	943:3	943:3	11	return
DESTINATION	943:10	943:10	10	( 0 )
EXPR	943:10	943:12	11	( 0 )
LEAF_NODE	943:10	943:10	12	(
FIELD	943:11	943:11	12	0
LEAF_NODE	943:11	943:11	13	0
LEAF_NODE	943:12	943:12	12	)
LEAF_NODE	943:13	943:13	10	;
LEAF_NODE	944:2	944:2	8	}
SELECTION	945:2	946:3	6	
KEYWORD	945:2	945:2	7	if
LEAF_NODE	945:2	945:2	8	if
LEAF_NODE	945:5	945:5	7	(
CONDITION	945:6	945:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	945:6	945:23	8	tif -> tif_flags & TIFF_SWAB
FIELD	945:6	945:11	9	tif -> tif_flags
LEAF_NODE	945:6	945:6	10	tif
LEAF_NODE	945:9	945:9	10	->
LEAF_NODE	945:11	945:11	10	tif_flags
LEAF_NODE	945:21	945:21	9	&
FIELD	945:23	945:23	9	TIFF_SWAB
LEAF_NODE	945:23	945:23	10	TIFF_SWAB
LEAF_NODE	945:32	945:32	7	)
STATEMENTS	946:3	946:3	7	
EXPR_STATEMENT	946:3	946:27	8	TIFFSwabShort ( & dircount ) ;
EXPR	946:3	946:3	9	TIFFSwabShort ( & dircount )
FUNCTION_CALL	946:3	946:26	10	TIFFSwabShort ( & dircount )
CALLEE	946:3	946:3	11	TIFFSwabShort
LEAF_NODE	946:3	946:3	12	TIFFSwabShort
LEAF_NODE	946:16	946:16	11	(
ARGUMENT	946:17	946:17	11	& dircount
UNARY_EXPR	946:17	946:18	12	& dircount
UNARY_OPERATOR	946:17	946:17	13	&
LEAF_NODE	946:17	946:17	14	&
FIELD	946:18	946:18	13	dircount
LEAF_NODE	946:18	946:18	14	dircount
LEAF_NODE	946:26	946:26	11	)
LEAF_NODE	946:27	946:27	9	;
EXPR_STATEMENT	947:2	948:49	6	( void ) TIFFSeekFile ( tif , dircount * sizeof ( TIFFDirEntry ) , SEEK_CUR ) ;
EXPR	947:2	947:9	7	( void ) TIFFSeekFile ( tif , dircount * sizeof ( TIFFDirEntry ) , SEEK_CUR )
LEAF_NODE	947:2	947:2	8	(
TYPE_NAME	947:3	947:3	8	void
LEAF_NODE	947:3	947:3	9	void
LEAF_NODE	947:7	947:7	8	)
FUNCTION_CALL	947:9	948:48	8	TIFFSeekFile ( tif , dircount * sizeof ( TIFFDirEntry ) , SEEK_CUR )
CALLEE	947:9	947:9	9	TIFFSeekFile
LEAF_NODE	947:9	947:9	10	TIFFSeekFile
LEAF_NODE	947:21	947:21	9	(
ARGUMENT	947:22	947:22	9	tif
FIELD	947:22	947:22	10	tif
LEAF_NODE	947:22	947:22	11	tif
LEAF_NODE	947:25	947:25	9	,
ARGUMENT	948:6	948:17	9	dircount * sizeof ( TIFFDirEntry )
FIELD	948:6	948:6	10	dircount
LEAF_NODE	948:6	948:6	11	dircount
LEAF_NODE	948:15	948:15	10	*
FUNCTION_CALL	948:17	948:37	10	sizeof ( TIFFDirEntry )
CALLEE	948:17	948:17	11	sizeof
LEAF_NODE	948:17	948:17	12	sizeof
LEAF_NODE	948:24	948:24	11	(
ARGUMENT	948:25	948:25	11	TIFFDirEntry
FIELD	948:25	948:25	12	TIFFDirEntry
LEAF_NODE	948:25	948:25	13	TIFFDirEntry
LEAF_NODE	948:37	948:37	11	)
LEAF_NODE	948:38	948:38	9	,
ARGUMENT	948:40	948:40	9	SEEK_CUR
FIELD	948:40	948:40	10	SEEK_CUR
LEAF_NODE	948:40	948:40	11	SEEK_CUR
LEAF_NODE	948:48	948:48	9	)
LEAF_NODE	948:49	948:49	7	;
SELECTION	949:2	949:48	6	
KEYWORD	949:2	949:2	7	if
LEAF_NODE	949:2	949:2	8	if
LEAF_NODE	949:5	949:5	7	(
CONDITION	949:6	949:6	7	! ReadOK ( tif , & nextdir , sizeof ( nextdir ) )
EXPR	949:6	949:6	8	! ReadOK ( tif , & nextdir , sizeof ( nextdir ) )
UNARY_EXPR	949:6	949:7	9	! ReadOK ( tif , & nextdir , sizeof ( nextdir ) )
UNARY_OPERATOR	949:6	949:6	10	!
LEAF_NODE	949:6	949:6	11	!
FUNCTION_CALL	949:7	949:45	10	ReadOK ( tif , & nextdir , sizeof ( nextdir ) )
CALLEE	949:7	949:7	11	ReadOK
LEAF_NODE	949:7	949:7	12	ReadOK
LEAF_NODE	949:13	949:13	11	(
ARGUMENT	949:14	949:14	11	tif
FIELD	949:14	949:14	12	tif
LEAF_NODE	949:14	949:14	13	tif
LEAF_NODE	949:17	949:17	11	,
ARGUMENT	949:19	949:19	11	& nextdir
UNARY_EXPR	949:19	949:20	12	& nextdir
UNARY_OPERATOR	949:19	949:19	13	&
LEAF_NODE	949:19	949:19	14	&
FIELD	949:20	949:20	13	nextdir
LEAF_NODE	949:20	949:20	14	nextdir
LEAF_NODE	949:27	949:27	11	,
ARGUMENT	949:29	949:29	11	sizeof ( nextdir )
FUNCTION_CALL	949:29	949:44	12	sizeof ( nextdir )
CALLEE	949:29	949:29	13	sizeof
LEAF_NODE	949:29	949:29	14	sizeof
LEAF_NODE	949:36	949:36	13	(
ARGUMENT	949:37	949:37	13	nextdir
FIELD	949:37	949:37	14	nextdir
LEAF_NODE	949:37	949:37	15	nextdir
LEAF_NODE	949:44	949:44	13	)
LEAF_NODE	949:45	949:45	11	)
LEAF_NODE	949:46	949:46	7	)
STATEMENTS	949:48	952:2	7	
LEAF_NODE	949:48	949:48	8	{
STATEMENTS	950:3	951:3	8	
EXPR_STATEMENT	950:3	950:77	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" ) ;
EXPR	950:3	950:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
FUNCTION_CALL	950:3	950:76	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Error fetching directory link" )
CALLEE	950:3	950:3	12	TIFFErrorExt
LEAF_NODE	950:3	950:3	13	TIFFErrorExt
LEAF_NODE	950:15	950:15	12	(
ARGUMENT	950:16	950:16	12	tif -> tif_clientdata
FIELD	950:16	950:21	13	tif -> tif_clientdata
LEAF_NODE	950:16	950:16	14	tif
LEAF_NODE	950:19	950:19	14	->
LEAF_NODE	950:21	950:21	14	tif_clientdata
LEAF_NODE	950:35	950:35	12	,
ARGUMENT	950:37	950:37	12	module
FIELD	950:37	950:37	13	module
LEAF_NODE	950:37	950:37	14	module
LEAF_NODE	950:43	950:43	12	,
ARGUMENT	950:45	950:45	12	"Error fetching directory link"
FIELD	950:45	950:45	13	"Error fetching directory link"
LEAF_NODE	950:45	950:45	14	"Error fetching directory link"
LEAF_NODE	950:76	950:76	12	)
LEAF_NODE	950:77	950:77	10	;
JUMP_STATEMENT	951:3	951:13	9	return ( 0 ) ;
KEYWORD	951:3	951:3	10	return
LEAF_NODE	951:3	951:3	11	return
DESTINATION	951:10	951:10	10	( 0 )
EXPR	951:10	951:12	11	( 0 )
LEAF_NODE	951:10	951:10	12	(
FIELD	951:11	951:11	12	0
LEAF_NODE	951:11	951:11	13	0
LEAF_NODE	951:12	951:12	12	)
LEAF_NODE	951:13	951:13	10	;
LEAF_NODE	952:2	952:2	8	}
SELECTION	953:2	954:3	6	
KEYWORD	953:2	953:2	7	if
LEAF_NODE	953:2	953:2	8	if
LEAF_NODE	953:5	953:5	7	(
CONDITION	953:6	953:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	953:6	953:23	8	tif -> tif_flags & TIFF_SWAB
FIELD	953:6	953:11	9	tif -> tif_flags
LEAF_NODE	953:6	953:6	10	tif
LEAF_NODE	953:9	953:9	10	->
LEAF_NODE	953:11	953:11	10	tif_flags
LEAF_NODE	953:21	953:21	9	&
FIELD	953:23	953:23	9	TIFF_SWAB
LEAF_NODE	953:23	953:23	10	TIFF_SWAB
LEAF_NODE	953:32	953:32	7	)
STATEMENTS	954:3	954:3	7	
EXPR_STATEMENT	954:3	954:25	8	TIFFSwabLong ( & nextdir ) ;
EXPR	954:3	954:3	9	TIFFSwabLong ( & nextdir )
FUNCTION_CALL	954:3	954:24	10	TIFFSwabLong ( & nextdir )
CALLEE	954:3	954:3	11	TIFFSwabLong
LEAF_NODE	954:3	954:3	12	TIFFSwabLong
LEAF_NODE	954:15	954:15	11	(
ARGUMENT	954:16	954:16	11	& nextdir
UNARY_EXPR	954:16	954:17	12	& nextdir
UNARY_OPERATOR	954:16	954:16	13	&
LEAF_NODE	954:16	954:16	14	&
FIELD	954:17	954:17	13	nextdir
LEAF_NODE	954:17	954:17	14	nextdir
LEAF_NODE	954:24	954:24	11	)
LEAF_NODE	954:25	954:25	9	;
LEAF_NODE	955:1	955:1	5	}
LEAF_NODE	955:23	955:23	3	;
LEAF_NODE	956:1	956:1	3	(
LEAF_NODE	956:2	956:2	3	void
LEAF_NODE	956:6	956:6	3	)
LEAF_NODE	956:8	956:8	3	TIFFSeekFile
LEAF_NODE	956:20	956:20	3	(
LEAF_NODE	956:21	956:21	3	tif
LEAF_NODE	956:24	956:24	3	,
LEAF_NODE	956:26	956:26	3	-
LEAF_NODE	956:27	956:27	3	(
LEAF_NODE	956:28	956:28	3	toff_t
LEAF_NODE	956:34	956:34	3	)
LEAF_NODE	956:36	956:36	3	sizeof
LEAF_NODE	956:43	956:43	3	(
LEAF_NODE	956:44	956:44	3	nextdir
LEAF_NODE	956:51	956:51	3	)
LEAF_NODE	956:52	956:52	3	,
LEAF_NODE	956:54	956:54	3	SEEK_CUR
LEAF_NODE	956:62	956:62	3	)
LEAF_NODE	956:63	956:63	3	;
SELECTION	957:1	957:46	3	
KEYWORD	957:1	957:1	4	if
LEAF_NODE	957:1	957:1	5	if
LEAF_NODE	957:4	957:4	4	(
CONDITION	957:5	957:5	4	! WriteOK ( tif , & diroff , sizeof ( diroff ) )
EXPR	957:5	957:5	5	! WriteOK ( tif , & diroff , sizeof ( diroff ) )
UNARY_EXPR	957:5	957:6	6	! WriteOK ( tif , & diroff , sizeof ( diroff ) )
UNARY_OPERATOR	957:5	957:5	7	!
LEAF_NODE	957:5	957:5	8	!
FUNCTION_CALL	957:6	957:43	7	WriteOK ( tif , & diroff , sizeof ( diroff ) )
CALLEE	957:6	957:6	8	WriteOK
LEAF_NODE	957:6	957:6	9	WriteOK
LEAF_NODE	957:13	957:13	8	(
ARGUMENT	957:14	957:14	8	tif
FIELD	957:14	957:14	9	tif
LEAF_NODE	957:14	957:14	10	tif
LEAF_NODE	957:17	957:17	8	,
ARGUMENT	957:19	957:19	8	& diroff
UNARY_EXPR	957:19	957:20	9	& diroff
UNARY_OPERATOR	957:19	957:19	10	&
LEAF_NODE	957:19	957:19	11	&
FIELD	957:20	957:20	10	diroff
LEAF_NODE	957:20	957:20	11	diroff
LEAF_NODE	957:26	957:26	8	,
ARGUMENT	957:28	957:28	8	sizeof ( diroff )
FUNCTION_CALL	957:28	957:42	9	sizeof ( diroff )
CALLEE	957:28	957:28	10	sizeof
LEAF_NODE	957:28	957:28	11	sizeof
LEAF_NODE	957:35	957:35	10	(
ARGUMENT	957:36	957:36	10	diroff
FIELD	957:36	957:36	11	diroff
LEAF_NODE	957:36	957:36	12	diroff
LEAF_NODE	957:42	957:42	10	)
LEAF_NODE	957:43	957:43	8	)
LEAF_NODE	957:44	957:44	4	)
STATEMENTS	957:46	960:1	4	
LEAF_NODE	957:46	957:46	5	{
STATEMENTS	958:2	959:2	5	
EXPR_STATEMENT	958:2	958:75	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" ) ;
EXPR	958:2	958:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
FUNCTION_CALL	958:2	958:74	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Error writing directory link" )
CALLEE	958:2	958:2	9	TIFFErrorExt
LEAF_NODE	958:2	958:2	10	TIFFErrorExt
LEAF_NODE	958:14	958:14	9	(
ARGUMENT	958:15	958:15	9	tif -> tif_clientdata
FIELD	958:15	958:20	10	tif -> tif_clientdata
LEAF_NODE	958:15	958:15	11	tif
LEAF_NODE	958:18	958:18	11	->
LEAF_NODE	958:20	958:20	11	tif_clientdata
LEAF_NODE	958:34	958:34	9	,
ARGUMENT	958:36	958:36	9	module
FIELD	958:36	958:36	10	module
LEAF_NODE	958:36	958:36	11	module
LEAF_NODE	958:42	958:42	9	,
ARGUMENT	958:44	958:44	9	"Error writing directory link"
FIELD	958:44	958:44	10	"Error writing directory link"
LEAF_NODE	958:44	958:44	11	"Error writing directory link"
LEAF_NODE	958:74	958:74	9	)
LEAF_NODE	958:75	958:75	7	;
JUMP_STATEMENT	959:2	959:12	6	return ( 0 ) ;
KEYWORD	959:2	959:2	7	return
LEAF_NODE	959:2	959:2	8	return
DESTINATION	959:9	959:9	7	( 0 )
EXPR	959:9	959:11	8	( 0 )
LEAF_NODE	959:9	959:9	9	(
FIELD	959:10	959:10	9	0
LEAF_NODE	959:10	959:10	10	0
LEAF_NODE	959:11	959:11	9	)
LEAF_NODE	959:12	959:12	7	;
LEAF_NODE	960:1	960:1	5	}
JUMP_STATEMENT	961:1	961:11	3	return ( 1 ) ;
KEYWORD	961:1	961:1	4	return
LEAF_NODE	961:1	961:1	5	return
DESTINATION	961:8	961:8	4	( 1 )
EXPR	961:8	961:10	5	( 1 )
LEAF_NODE	961:8	961:8	6	(
FIELD	961:9	961:9	6	1
LEAF_NODE	961:9	961:9	7	1
LEAF_NODE	961:10	961:10	6	)
LEAF_NODE	961:11	961:11	4	;
LEAF_NODE	962:0	962:0	2	}
