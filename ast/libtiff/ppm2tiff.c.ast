SOURCE_FILE	57:7	378:0	0	
SIMPLE_DECL	57:7	57:48	1	uint16 compression ; compression = COMPRESSION_PACKBITS ;
VAR_DECL	57:7	57:14	2	uint16 compression ; compression = COMPRESSION_PACKBITS
TYPE	57:7	57:7	3	uint16
TYPE_NAME	57:7	57:7	4	uint16
LEAF_NODE	57:7	57:7	5	uint16
NAME	57:14	57:14	3	compression
LEAF_NODE	57:14	57:14	4	compression
LEAF_NODE	0:0	0:0	3	;
INIT	57:14	57:14	3	compression = COMPRESSION_PACKBITS
ASSIGN	57:14	57:28	4	compression = COMPRESSION_PACKBITS
LVAL	57:14	57:14	5	compression
NAME	57:14	57:14	6	compression
LEAF_NODE	57:14	57:14	7	compression
ASSIGN_OP	57:26	57:26	5	=
LEAF_NODE	57:26	57:26	6	=
RVAL	57:28	57:28	5	COMPRESSION_PACKBITS
FIELD	57:28	57:28	6	COMPRESSION_PACKBITS
LEAF_NODE	57:28	57:28	7	COMPRESSION_PACKBITS
LEAF_NODE	57:48	57:48	2	;
SIMPLE_DECL	58:7	58:27	1	uint16 predictor ; predictor = 0 ;
VAR_DECL	58:7	58:14	2	uint16 predictor ; predictor = 0
TYPE	58:7	58:7	3	uint16
TYPE_NAME	58:7	58:7	4	uint16
LEAF_NODE	58:7	58:7	5	uint16
NAME	58:14	58:14	3	predictor
LEAF_NODE	58:14	58:14	4	predictor
LEAF_NODE	0:0	0:0	3	;
INIT	58:14	58:14	3	predictor = 0
ASSIGN	58:14	58:26	4	predictor = 0
LVAL	58:14	58:14	5	predictor
NAME	58:14	58:14	6	predictor
LEAF_NODE	58:14	58:14	7	predictor
ASSIGN_OP	58:24	58:24	5	=
LEAF_NODE	58:24	58:24	6	=
RVAL	58:26	58:26	5	0
FIELD	58:26	58:26	6	0
LEAF_NODE	58:26	58:26	7	0
LEAF_NODE	58:27	58:27	2	;
SIMPLE_DECL	59:7	59:23	1	int quality ; quality = 75 ;
VAR_DECL	59:7	59:11	2	int quality ; quality = 75
TYPE	59:7	59:7	3	int
TYPE_NAME	59:7	59:7	4	int
LEAF_NODE	59:7	59:7	5	int
NAME	59:11	59:11	3	quality
LEAF_NODE	59:11	59:11	4	quality
LEAF_NODE	0:0	0:0	3	;
INIT	59:11	59:11	3	quality = 75
ASSIGN	59:11	59:21	4	quality = 75
LVAL	59:11	59:11	5	quality
NAME	59:11	59:11	6	quality
LEAF_NODE	59:11	59:11	7	quality
ASSIGN_OP	59:19	59:19	5	=
LEAF_NODE	59:19	59:19	6	=
RVAL	59:21	59:21	5	75
FIELD	59:21	59:21	6	75
LEAF_NODE	59:21	59:21	7	75
LEAF_NODE	59:23	59:23	2	;
SIMPLE_DECL	60:7	60:44	1	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB ;
VAR_DECL	60:7	60:11	2	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB
TYPE	60:7	60:7	3	int
TYPE_NAME	60:7	60:7	4	int
LEAF_NODE	60:7	60:7	5	int
NAME	60:11	60:11	3	jpegcolormode
LEAF_NODE	60:11	60:11	4	jpegcolormode
LEAF_NODE	0:0	0:0	3	;
INIT	60:11	60:11	3	jpegcolormode = JPEGCOLORMODE_RGB
ASSIGN	60:11	60:27	4	jpegcolormode = JPEGCOLORMODE_RGB
LVAL	60:11	60:11	5	jpegcolormode
NAME	60:11	60:11	6	jpegcolormode
LEAF_NODE	60:11	60:11	7	jpegcolormode
ASSIGN_OP	60:25	60:25	5	=
LEAF_NODE	60:25	60:25	6	=
RVAL	60:27	60:27	5	JPEGCOLORMODE_RGB
FIELD	60:27	60:27	6	JPEGCOLORMODE_RGB
LEAF_NODE	60:27	60:27	7	JPEGCOLORMODE_RGB
LEAF_NODE	60:44	60:44	2	;
SIMPLE_DECL	61:8	61:21	1	uint32 g3opts ;
VAR_DECL	61:8	61:15	2	uint32 g3opts
TYPE	61:8	61:8	3	uint32
TYPE_NAME	61:8	61:8	4	uint32
LEAF_NODE	61:8	61:8	5	uint32
NAME	61:15	61:15	3	g3opts
LEAF_NODE	61:15	61:15	4	g3opts
LEAF_NODE	61:21	61:21	2	;
SIMPLE_DECL	63:7	63:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	63:7	63:12	2	void usage ; usage usage ( void )
TYPE	63:7	63:7	3	void
TYPE_NAME	63:7	63:7	4	void
LEAF_NODE	63:7	63:7	5	void
NAME	63:12	63:12	3	usage
LEAF_NODE	63:12	63:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	63:12	63:12	3	usage usage ( void )
ASSIGN	63:12	63:17	4	usage usage ( void )
LVAL	63:12	63:12	5	usage
NAME	63:12	63:12	6	usage
LEAF_NODE	63:12	63:12	7	usage
ASSIGN_OP	63:12	63:12	5	usage
NAME	63:12	63:12	6	usage
LEAF_NODE	63:12	63:12	7	usage
RVAL	63:17	63:22	5	( void )
LEAF_NODE	63:17	63:17	6	(
EXPR	63:18	63:18	6	void
FIELD	63:18	63:18	7	void
LEAF_NODE	63:18	63:18	8	void
LEAF_NODE	63:22	63:22	6	)
LEAF_NODE	63:23	63:23	2	;
FUNCTION_DEF	66:0	71:0	1	
RETURN_TYPE	66:0	66:7	2	static void
LEAF_NODE	66:0	66:0	3	static
TYPE_NAME	66:7	66:7	3	void
LEAF_NODE	66:7	66:7	4	void
FUNCTION_NAME	67:0	67:0	2	BadPPM
LEAF_NODE	67:0	67:0	3	BadPPM
PARAMETER_LIST	67:6	67:17	2	( char * file )
LEAF_NODE	67:6	67:6	3	(
PARAMETER_DECL	67:7	67:13	3	char * file
TYPE	67:7	67:11	4	char *
TYPE_NAME	67:7	67:7	5	char
LEAF_NODE	67:7	67:7	6	char
POINTER	67:11	67:11	5	*
LEAF_NODE	67:11	67:11	6	*
NAME	67:13	67:13	4	file
LEAF_NODE	67:13	67:13	5	file
LEAF_NODE	67:17	67:17	3	)
LEAF_NODE	68:0	68:0	2	{
STATEMENTS	69:1	70:1	2	
EXPR_STATEMENT	69:1	69:47	3	fprintf ( stderr , "%s: Not a PPM file.\n" , file ) ;
EXPR	69:1	69:1	4	fprintf ( stderr , "%s: Not a PPM file.\n" , file )
FUNCTION_CALL	69:1	69:46	5	fprintf ( stderr , "%s: Not a PPM file.\n" , file )
CALLEE	69:1	69:1	6	fprintf
LEAF_NODE	69:1	69:1	7	fprintf
LEAF_NODE	69:8	69:8	6	(
ARGUMENT	69:9	69:9	6	stderr
FIELD	69:9	69:9	7	stderr
LEAF_NODE	69:9	69:9	8	stderr
LEAF_NODE	69:15	69:15	6	,
ARGUMENT	69:17	69:17	6	"%s: Not a PPM file.\n"
FIELD	69:17	69:17	7	"%s: Not a PPM file.\n"
LEAF_NODE	69:17	69:17	8	"%s: Not a PPM file.\n"
LEAF_NODE	69:40	69:40	6	,
ARGUMENT	69:42	69:42	6	file
FIELD	69:42	69:42	7	file
LEAF_NODE	69:42	69:42	8	file
LEAF_NODE	69:46	69:46	6	)
LEAF_NODE	69:47	69:47	4	;
EXPR_STATEMENT	70:1	70:9	3	exit ( - 2 ) ;
EXPR	70:1	70:1	4	exit ( - 2 )
FUNCTION_CALL	70:1	70:8	5	exit ( - 2 )
CALLEE	70:1	70:1	6	exit
LEAF_NODE	70:1	70:1	7	exit
LEAF_NODE	70:5	70:5	6	(
ARGUMENT	70:6	70:6	6	- 2
UNARY_EXPR	70:6	70:7	7	- 2
UNARY_OPERATOR	70:6	70:6	8	-
LEAF_NODE	70:6	70:6	9	-
FIELD	70:7	70:7	8	2
LEAF_NODE	70:7	70:7	9	2
LEAF_NODE	70:8	70:8	6	)
LEAF_NODE	70:9	70:9	4	;
LEAF_NODE	71:0	71:0	2	}
FUNCTION_DEF	77:0	83:0	1	
RETURN_TYPE	77:0	77:7	2	static tmsize_t
LEAF_NODE	77:0	77:0	3	static
TYPE_NAME	77:7	77:7	3	tmsize_t
LEAF_NODE	77:7	77:7	4	tmsize_t
FUNCTION_NAME	78:0	78:0	2	multiply_ms
LEAF_NODE	78:0	78:0	3	multiply_ms
PARAMETER_LIST	78:11	78:36	2	( tmsize_t m1 , tmsize_t m2 )
LEAF_NODE	78:11	78:11	3	(
PARAMETER_DECL	78:12	78:21	3	tmsize_t m1
TYPE	78:12	78:12	4	tmsize_t
TYPE_NAME	78:12	78:12	5	tmsize_t
LEAF_NODE	78:12	78:12	6	tmsize_t
NAME	78:21	78:21	4	m1
LEAF_NODE	78:21	78:21	5	m1
LEAF_NODE	78:23	78:23	3	,
PARAMETER_DECL	78:25	78:34	3	tmsize_t m2
TYPE	78:25	78:25	4	tmsize_t
TYPE_NAME	78:25	78:25	5	tmsize_t
LEAF_NODE	78:25	78:25	6	tmsize_t
NAME	78:34	78:34	4	m2
LEAF_NODE	78:34	78:34	5	m2
LEAF_NODE	78:36	78:36	3	)
LEAF_NODE	79:0	79:0	2	{
STATEMENTS	80:8	82:8	2	
SELECTION	80:8	81:12	3	
KEYWORD	80:8	80:8	4	if
LEAF_NODE	80:8	80:8	5	if
LEAF_NODE	80:10	80:10	4	(
CONDITION	80:12	80:12	4	m1 == 0 || m2 > TIFF_TMSIZE_T_MAX / m1
EXPR	80:12	80:12	5	m1 == 0 || m2 > TIFF_TMSIZE_T_MAX / m1
OR	80:12	80:23	6	m1 == 0 || m2 > TIFF_TMSIZE_T_MAX / m1
EXPR	80:12	80:18	7	m1 == 0
FIELD	80:12	80:12	8	m1
LEAF_NODE	80:12	80:12	9	m1
EQ_OPERATOR	80:15	80:15	8	==
LEAF_NODE	80:15	80:15	9	==
FIELD	80:18	80:18	8	0
LEAF_NODE	80:18	80:18	9	0
LEAF_NODE	80:20	80:20	7	||
EXPR	80:23	80:48	7	m2 > TIFF_TMSIZE_T_MAX / m1
FIELD	80:23	80:23	8	m2
LEAF_NODE	80:23	80:23	9	m2
REL_OPERATOR	80:26	80:26	8	>
LEAF_NODE	80:26	80:26	9	>
FIELD	80:28	80:28	8	TIFF_TMSIZE_T_MAX
LEAF_NODE	80:28	80:28	9	TIFF_TMSIZE_T_MAX
LEAF_NODE	80:46	80:46	8	/
FIELD	80:48	80:48	8	m1
LEAF_NODE	80:48	80:48	9	m1
LEAF_NODE	80:51	80:51	4	)
STATEMENTS	81:12	81:12	4	
JUMP_STATEMENT	81:12	81:20	5	return 0 ;
KEYWORD	81:12	81:12	6	return
LEAF_NODE	81:12	81:12	7	return
DESTINATION	81:19	81:19	6	0
EXPR	81:19	81:19	7	0
FIELD	81:19	81:19	8	0
LEAF_NODE	81:19	81:19	9	0
LEAF_NODE	81:20	81:20	6	;
JUMP_STATEMENT	82:8	82:22	3	return m1 * m2 ;
KEYWORD	82:8	82:8	4	return
LEAF_NODE	82:8	82:8	5	return
DESTINATION	82:15	82:15	4	m1 * m2
EXPR	82:15	82:20	5	m1 * m2
FIELD	82:15	82:15	6	m1
LEAF_NODE	82:15	82:15	7	m1
LEAF_NODE	82:18	82:18	6	*
FIELD	82:20	82:20	6	m2
LEAF_NODE	82:20	82:20	7	m2
LEAF_NODE	82:22	82:22	4	;
LEAF_NODE	83:0	83:0	2	}
FUNCTION_DEF	85:0	292:0	1	
RETURN_TYPE	85:0	85:0	2	int
TYPE_NAME	85:0	85:0	3	int
LEAF_NODE	85:0	85:0	4	int
FUNCTION_NAME	86:0	86:0	2	main
LEAF_NODE	86:0	86:0	3	main
PARAMETER_LIST	86:4	86:27	2	( int argc , char * [ ] argv )
LEAF_NODE	86:4	86:4	3	(
PARAMETER_DECL	86:5	86:9	3	int argc
TYPE	86:5	86:5	4	int
TYPE_NAME	86:5	86:5	5	int
LEAF_NODE	86:5	86:5	6	int
NAME	86:9	86:9	4	argc
LEAF_NODE	86:9	86:9	5	argc
LEAF_NODE	86:13	86:13	3	,
PARAMETER_DECL	86:15	86:21	3	char * [ ] argv
TYPE	86:15	86:25	4	char * [ ]
TYPE_NAME	86:15	86:15	5	char
LEAF_NODE	86:15	86:15	6	char
POINTER	86:19	86:19	5	*
LEAF_NODE	86:19	86:19	6	*
TYPE_SUFFIX	86:25	86:26	5	[ ]
LEAF_NODE	86:25	86:25	6	[
LEAF_NODE	86:26	86:26	6	]
NAME	86:21	86:21	4	argv
LEAF_NODE	86:21	86:21	5	argv
LEAF_NODE	86:27	86:27	3	)
LEAF_NODE	87:0	87:0	2	{
STATEMENTS	88:1	291:1	2	
SIMPLE_DECL	88:1	88:23	3	uint16 photometric ; photometric = 0 ;
VAR_DECL	88:1	88:8	4	uint16 photometric ; photometric = 0
TYPE	88:1	88:1	5	uint16
TYPE_NAME	88:1	88:1	6	uint16
LEAF_NODE	88:1	88:1	7	uint16
NAME	88:8	88:8	5	photometric
LEAF_NODE	88:8	88:8	6	photometric
LEAF_NODE	0:0	0:0	5	;
INIT	88:8	88:8	5	photometric = 0
ASSIGN	88:8	88:22	6	photometric = 0
LVAL	88:8	88:8	7	photometric
NAME	88:8	88:8	8	photometric
LEAF_NODE	88:8	88:8	9	photometric
ASSIGN_OP	88:20	88:20	7	=
LEAF_NODE	88:20	88:20	8	=
RVAL	88:22	88:22	7	0
FIELD	88:22	88:22	8	0
LEAF_NODE	88:22	88:22	9	0
LEAF_NODE	88:23	88:23	4	;
SIMPLE_DECL	89:1	89:34	3	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	89:1	89:8	4	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	89:1	89:1	5	uint32
TYPE_NAME	89:1	89:1	6	uint32
LEAF_NODE	89:1	89:1	7	uint32
NAME	89:8	89:8	5	rowsperstrip
LEAF_NODE	89:8	89:8	6	rowsperstrip
LEAF_NODE	0:0	0:0	5	;
INIT	89:8	89:8	5	rowsperstrip = ( uint32 ) - 1
ASSIGN	89:8	89:23	6	rowsperstrip = ( uint32 ) - 1
LVAL	89:8	89:8	7	rowsperstrip
NAME	89:8	89:8	8	rowsperstrip
LEAF_NODE	89:8	89:8	9	rowsperstrip
ASSIGN_OP	89:21	89:21	7	=
LEAF_NODE	89:21	89:21	8	=
RVAL	89:23	89:32	7	( uint32 ) - 1
LEAF_NODE	89:23	89:23	8	(
TYPE_NAME	89:24	89:24	8	uint32
LEAF_NODE	89:24	89:24	9	uint32
LEAF_NODE	89:30	89:30	8	)
UNARY_EXPR	89:32	89:33	8	- 1
UNARY_OPERATOR	89:32	89:32	9	-
LEAF_NODE	89:32	89:32	10	-
FIELD	89:33	89:33	9	1
LEAF_NODE	89:33	89:33	10	1
LEAF_NODE	89:34	89:34	4	;
SIMPLE_DECL	90:1	90:23	3	double resolution ; resolution = - 1 ;
VAR_DECL	90:1	90:8	4	double resolution ; resolution = - 1
TYPE	90:1	90:1	5	double
TYPE_NAME	90:1	90:1	6	double
LEAF_NODE	90:1	90:1	7	double
NAME	90:8	90:8	5	resolution
LEAF_NODE	90:8	90:8	6	resolution
LEAF_NODE	0:0	0:0	5	;
INIT	90:8	90:8	5	resolution = - 1
ASSIGN	90:8	90:21	6	resolution = - 1
LVAL	90:8	90:8	7	resolution
NAME	90:8	90:8	8	resolution
LEAF_NODE	90:8	90:8	9	resolution
ASSIGN_OP	90:19	90:19	7	=
LEAF_NODE	90:19	90:19	8	=
RVAL	90:21	90:21	7	- 1
UNARY_EXPR	90:21	90:22	8	- 1
UNARY_OPERATOR	90:21	90:21	9	-
LEAF_NODE	90:21	90:21	10	-
FIELD	90:22	90:22	9	1
LEAF_NODE	90:22	90:22	10	1
LEAF_NODE	90:23	90:23	4	;
SIMPLE_DECL	91:1	91:26	3	unsigned char * buf ; buf = NULL ;
VAR_DECL	91:1	91:16	4	unsigned char * buf ; buf = NULL
TYPE	91:1	91:15	5	unsigned char *
TYPE_NAME	91:1	91:10	6	unsigned char
LEAF_NODE	91:1	91:1	7	unsigned
LEAF_NODE	91:10	91:10	7	char
POINTER	91:15	91:15	6	*
LEAF_NODE	91:15	91:15	7	*
NAME	91:16	91:16	5	buf
LEAF_NODE	91:16	91:16	6	buf
LEAF_NODE	0:0	0:0	5	;
INIT	91:16	91:16	5	buf = NULL
ASSIGN	91:16	91:22	6	buf = NULL
LVAL	91:16	91:16	7	buf
NAME	91:16	91:16	8	buf
LEAF_NODE	91:16	91:16	9	buf
ASSIGN_OP	91:20	91:20	7	=
LEAF_NODE	91:20	91:20	8	=
RVAL	91:22	91:22	7	NULL
FIELD	91:22	91:22	8	NULL
LEAF_NODE	91:22	91:22	9	NULL
LEAF_NODE	91:26	91:26	4	;
SIMPLE_DECL	92:1	92:23	3	tmsize_t linebytes ; linebytes = 0 ;
VAR_DECL	92:1	92:10	4	tmsize_t linebytes ; linebytes = 0
TYPE	92:1	92:1	5	tmsize_t
TYPE_NAME	92:1	92:1	6	tmsize_t
LEAF_NODE	92:1	92:1	7	tmsize_t
NAME	92:10	92:10	5	linebytes
LEAF_NODE	92:10	92:10	6	linebytes
LEAF_NODE	0:0	0:0	5	;
INIT	92:10	92:10	5	linebytes = 0
ASSIGN	92:10	92:22	6	linebytes = 0
LVAL	92:10	92:10	7	linebytes
NAME	92:10	92:10	8	linebytes
LEAF_NODE	92:10	92:10	9	linebytes
ASSIGN_OP	92:20	92:20	7	=
LEAF_NODE	92:20	92:20	8	=
RVAL	92:22	92:22	7	0
FIELD	92:22	92:22	8	0
LEAF_NODE	92:22	92:22	9	0
LEAF_NODE	92:23	92:23	4	;
SIMPLE_DECL	93:1	93:15	3	uint16 spp ; spp = 1 ;
VAR_DECL	93:1	93:8	4	uint16 spp ; spp = 1
TYPE	93:1	93:1	5	uint16
TYPE_NAME	93:1	93:1	6	uint16
LEAF_NODE	93:1	93:1	7	uint16
NAME	93:8	93:8	5	spp
LEAF_NODE	93:8	93:8	6	spp
LEAF_NODE	0:0	0:0	5	;
INIT	93:8	93:8	5	spp = 1
ASSIGN	93:8	93:14	6	spp = 1
LVAL	93:8	93:8	7	spp
NAME	93:8	93:8	8	spp
LEAF_NODE	93:8	93:8	9	spp
ASSIGN_OP	93:12	93:12	7	=
LEAF_NODE	93:12	93:12	8	=
RVAL	93:14	93:14	7	1
FIELD	93:14	93:14	8	1
LEAF_NODE	93:14	93:14	9	1
LEAF_NODE	93:15	93:15	4	;
SIMPLE_DECL	94:1	94:15	3	uint16 bpp ; bpp = 8 ;
VAR_DECL	94:1	94:8	4	uint16 bpp ; bpp = 8
TYPE	94:1	94:1	5	uint16
TYPE_NAME	94:1	94:1	6	uint16
LEAF_NODE	94:1	94:1	7	uint16
NAME	94:8	94:8	5	bpp
LEAF_NODE	94:8	94:8	6	bpp
LEAF_NODE	0:0	0:0	5	;
INIT	94:8	94:8	5	bpp = 8
ASSIGN	94:8	94:14	6	bpp = 8
LVAL	94:8	94:8	7	bpp
NAME	94:8	94:8	8	bpp
LEAF_NODE	94:8	94:8	9	bpp
ASSIGN_OP	94:12	94:12	7	=
LEAF_NODE	94:12	94:12	8	=
RVAL	94:14	94:14	7	8
FIELD	94:14	94:14	8	8
LEAF_NODE	94:14	94:14	9	8
LEAF_NODE	94:15	94:15	4	;
SIMPLE_DECL	95:1	95:10	3	TIFF * out ;
VAR_DECL	95:1	95:7	4	TIFF * out
TYPE	95:1	95:6	5	TIFF *
TYPE_NAME	95:1	95:1	6	TIFF
LEAF_NODE	95:1	95:1	7	TIFF
POINTER	95:6	95:6	6	*
LEAF_NODE	95:6	95:6	7	*
NAME	95:7	95:7	5	out
LEAF_NODE	95:7	95:7	6	out
LEAF_NODE	95:10	95:10	4	;
SIMPLE_DECL	96:1	96:9	3	FILE * in ;
VAR_DECL	96:1	96:7	4	FILE * in
TYPE	96:1	96:6	5	FILE *
TYPE_NAME	96:1	96:1	6	FILE
LEAF_NODE	96:1	96:1	7	FILE
POINTER	96:6	96:6	6	*
LEAF_NODE	96:6	96:6	7	*
NAME	96:7	96:7	5	in
LEAF_NODE	96:7	96:7	6	in
LEAF_NODE	96:9	96:9	4	;
SIMPLE_DECL	97:1	97:29	3	unsigned int w , unsigned int h , unsigned int prec , unsigned int row ;
INIT_DECL_LIST	97:1	97:1	4	unsigned int w , unsigned int h , unsigned int prec , unsigned int row
VAR_DECL	97:1	97:14	5	unsigned int w
TYPE	97:1	97:1	6	unsigned int
TYPE_NAME	97:1	97:10	7	unsigned int
LEAF_NODE	97:1	97:1	8	unsigned
LEAF_NODE	97:10	97:10	8	int
NAME	97:14	97:14	6	w
LEAF_NODE	97:14	97:14	7	w
LEAF_NODE	97:15	97:15	5	,
INIT_DECL_LIST	97:1	97:1	5	unsigned int h , unsigned int prec , unsigned int row
VAR_DECL	97:1	97:17	6	unsigned int h
TYPE	97:1	97:1	7	unsigned int
TYPE_NAME	97:1	97:10	8	unsigned int
LEAF_NODE	97:1	97:1	9	unsigned
LEAF_NODE	97:10	97:10	9	int
NAME	97:17	97:17	7	h
LEAF_NODE	97:17	97:17	8	h
LEAF_NODE	97:18	97:18	6	,
INIT_DECL_LIST	97:1	97:1	6	unsigned int prec , unsigned int row
VAR_DECL	97:1	97:20	7	unsigned int prec
TYPE	97:1	97:1	8	unsigned int
TYPE_NAME	97:1	97:10	9	unsigned int
LEAF_NODE	97:1	97:1	10	unsigned
LEAF_NODE	97:10	97:10	10	int
NAME	97:20	97:20	8	prec
LEAF_NODE	97:20	97:20	9	prec
LEAF_NODE	97:24	97:24	7	,
VAR_DECL	97:1	97:26	7	unsigned int row
TYPE	97:1	97:1	8	unsigned int
TYPE_NAME	97:1	97:10	9	unsigned int
LEAF_NODE	97:1	97:1	10	unsigned
LEAF_NODE	97:10	97:10	10	int
NAME	97:26	97:26	8	row
LEAF_NODE	97:26	97:26	9	row
LEAF_NODE	97:29	97:29	4	;
SIMPLE_DECL	98:1	98:13	3	char * infile ;
VAR_DECL	98:1	98:7	4	char * infile
TYPE	98:1	98:6	5	char *
TYPE_NAME	98:1	98:1	6	char
LEAF_NODE	98:1	98:1	7	char
POINTER	98:6	98:6	6	*
LEAF_NODE	98:6	98:6	7	*
NAME	98:7	98:7	5	infile
LEAF_NODE	98:7	98:7	6	infile
LEAF_NODE	98:13	98:13	4	;
SIMPLE_DECL	99:1	99:6	3	int c ;
VAR_DECL	99:1	99:5	4	int c
TYPE	99:1	99:1	5	int
TYPE_NAME	99:1	99:1	6	int
LEAF_NODE	99:1	99:1	7	int
NAME	99:5	99:5	5	c
LEAF_NODE	99:5	99:5	6	c
LEAF_NODE	99:6	99:6	4	;
LEAF_NODE	101:1	101:1	3	extern
SIMPLE_DECL	101:8	101:18	3	int optind ;
VAR_DECL	101:8	101:12	4	int optind
TYPE	101:8	101:8	5	int
TYPE_NAME	101:8	101:8	6	int
LEAF_NODE	101:8	101:8	7	int
NAME	101:12	101:12	5	optind
LEAF_NODE	101:12	101:12	6	optind
LEAF_NODE	101:18	101:18	4	;
LEAF_NODE	102:1	102:1	3	extern
SIMPLE_DECL	102:8	102:20	3	char * optarg ;
VAR_DECL	102:8	102:14	4	char * optarg
TYPE	102:8	102:12	5	char *
TYPE_NAME	102:8	102:8	6	char
LEAF_NODE	102:8	102:8	7	char
POINTER	102:12	102:12	6	*
LEAF_NODE	102:12	102:12	7	*
NAME	102:14	102:14	5	optarg
LEAF_NODE	102:14	102:14	6	optarg
LEAF_NODE	102:20	102:20	4	;
SIMPLE_DECL	104:1	104:23	3	tmsize_t scanline_size ;
VAR_DECL	104:1	104:10	4	tmsize_t scanline_size
TYPE	104:1	104:1	5	tmsize_t
TYPE_NAME	104:1	104:1	6	tmsize_t
LEAF_NODE	104:1	104:1	7	tmsize_t
NAME	104:10	104:10	5	scanline_size
LEAF_NODE	104:10	104:10	6	scanline_size
LEAF_NODE	104:23	104:23	4	;
SELECTION	106:1	106:15	3	
KEYWORD	106:1	106:1	4	if
LEAF_NODE	106:1	106:1	5	if
LEAF_NODE	106:4	106:4	4	(
CONDITION	106:5	106:5	4	argc < 2
EXPR	106:5	106:12	5	argc < 2
FIELD	106:5	106:5	6	argc
LEAF_NODE	106:5	106:5	7	argc
REL_OPERATOR	106:10	106:10	6	<
LEAF_NODE	106:10	106:10	7	<
FIELD	106:12	106:12	6	2
LEAF_NODE	106:12	106:12	7	2
LEAF_NODE	106:13	106:13	4	)
STATEMENTS	106:15	109:1	4	
LEAF_NODE	106:15	106:15	5	{
STATEMENTS	107:5	108:5	5	
EXPR_STATEMENT	107:5	107:56	6	fprintf ( stderr , "%s: Too few arguments\n" , argv [ 0 ] ) ;
EXPR	107:5	107:5	7	fprintf ( stderr , "%s: Too few arguments\n" , argv [ 0 ] )
FUNCTION_CALL	107:5	107:55	8	fprintf ( stderr , "%s: Too few arguments\n" , argv [ 0 ] )
CALLEE	107:5	107:5	9	fprintf
LEAF_NODE	107:5	107:5	10	fprintf
LEAF_NODE	107:12	107:12	9	(
ARGUMENT	107:13	107:13	9	stderr
FIELD	107:13	107:13	10	stderr
LEAF_NODE	107:13	107:13	11	stderr
LEAF_NODE	107:19	107:19	9	,
ARGUMENT	107:21	107:21	9	"%s: Too few arguments\n"
FIELD	107:21	107:21	10	"%s: Too few arguments\n"
LEAF_NODE	107:21	107:21	11	"%s: Too few arguments\n"
LEAF_NODE	107:46	107:46	9	,
ARGUMENT	107:48	107:48	9	argv [ 0 ]
FIELD	107:48	107:54	10	argv [ 0 ]
LEAF_NODE	107:48	107:48	11	argv
LEAF_NODE	107:52	107:52	11	[
EXPR	107:53	107:53	11	0
FIELD	107:53	107:53	12	0
LEAF_NODE	107:53	107:53	13	0
LEAF_NODE	107:54	107:54	11	]
LEAF_NODE	107:55	107:55	9	)
LEAF_NODE	107:56	107:56	7	;
EXPR_STATEMENT	108:5	108:12	6	usage ( ) ;
EXPR	108:5	108:5	7	usage ( )
FUNCTION_CALL	108:5	108:11	8	usage ( )
CALLEE	108:5	108:5	9	usage
LEAF_NODE	108:5	108:5	10	usage
LEAF_NODE	108:10	108:10	9	(
LEAF_NODE	108:11	108:11	9	)
LEAF_NODE	108:12	108:12	7	;
LEAF_NODE	109:1	109:1	5	}
ITERATION	110:1	111:2	3	
KEYWORD	110:1	110:1	4	while
LEAF_NODE	110:1	110:1	5	while
LEAF_NODE	110:7	110:7	4	(
CONDITION	110:8	110:8	4	( c = getopt ( argc , argv , "c:r:R:" ) ) != - 1
EXPR	110:8	110:46	5	( c = getopt ( argc , argv , "c:r:R:" ) ) != - 1
LEAF_NODE	110:8	110:8	6	(
ASSIGN	110:9	110:13	6	c = getopt ( argc , argv , "c:r:R:" )
LVAL	110:9	110:9	7	c
FIELD	110:9	110:9	8	c
LEAF_NODE	110:9	110:9	9	c
ASSIGN_OP	110:11	110:11	7	=
LEAF_NODE	110:11	110:11	8	=
RVAL	110:13	110:13	7	getopt ( argc , argv , "c:r:R:" )
FUNCTION_CALL	110:13	110:40	8	getopt ( argc , argv , "c:r:R:" )
CALLEE	110:13	110:13	9	getopt
LEAF_NODE	110:13	110:13	10	getopt
LEAF_NODE	110:19	110:19	9	(
ARGUMENT	110:20	110:20	9	argc
FIELD	110:20	110:20	10	argc
LEAF_NODE	110:20	110:20	11	argc
LEAF_NODE	110:24	110:24	9	,
ARGUMENT	110:26	110:26	9	argv
FIELD	110:26	110:26	10	argv
LEAF_NODE	110:26	110:26	11	argv
LEAF_NODE	110:30	110:30	9	,
ARGUMENT	110:32	110:32	9	"c:r:R:"
FIELD	110:32	110:32	10	"c:r:R:"
LEAF_NODE	110:32	110:32	11	"c:r:R:"
LEAF_NODE	110:40	110:40	9	)
LEAF_NODE	110:41	110:41	6	)
EQ_OPERATOR	110:43	110:43	6	!=
LEAF_NODE	110:43	110:43	7	!=
UNARY_EXPR	110:46	110:47	6	- 1
UNARY_OPERATOR	110:46	110:46	7	-
LEAF_NODE	110:46	110:46	8	-
FIELD	110:47	110:47	7	1
LEAF_NODE	110:47	110:47	8	1
LEAF_NODE	110:48	110:48	4	)
STATEMENTS	111:2	111:2	4	
SELECTION	111:2	111:13	5	
KEYWORD	111:2	111:2	6	switch
LEAF_NODE	111:2	111:2	7	switch
LEAF_NODE	111:9	111:9	6	(
CONDITION	111:10	111:10	6	c
EXPR	111:10	111:10	7	c
FIELD	111:10	111:10	8	c
LEAF_NODE	111:10	111:10	9	c
LEAF_NODE	111:11	111:11	6	)
STATEMENTS	111:13	125:2	6	
LEAF_NODE	111:13	111:13	7	{
STATEMENTS	112:2	123:3	7	
LEAF_NODE	112:2	112:2	8	case
LEAF_NODE	112:7	112:7	8	'c'
LEAF_NODE	112:10	112:10	8	:
SELECTION	113:3	114:4	8	
KEYWORD	113:3	113:3	9	if
LEAF_NODE	113:3	113:3	10	if
LEAF_NODE	113:6	113:6	9	(
CONDITION	113:7	113:7	9	! processCompressOptions ( optarg )
EXPR	113:7	113:7	10	! processCompressOptions ( optarg )
UNARY_EXPR	113:7	113:8	11	! processCompressOptions ( optarg )
UNARY_OPERATOR	113:7	113:7	12	!
LEAF_NODE	113:7	113:7	13	!
FUNCTION_CALL	113:8	113:37	12	processCompressOptions ( optarg )
CALLEE	113:8	113:8	13	processCompressOptions
LEAF_NODE	113:8	113:8	14	processCompressOptions
LEAF_NODE	113:30	113:30	13	(
ARGUMENT	113:31	113:31	13	optarg
FIELD	113:31	113:31	14	optarg
LEAF_NODE	113:31	113:31	15	optarg
LEAF_NODE	113:37	113:37	13	)
LEAF_NODE	113:38	113:38	9	)
STATEMENTS	114:4	114:4	9	
EXPR_STATEMENT	114:4	114:11	10	usage ( ) ;
EXPR	114:4	114:4	11	usage ( )
FUNCTION_CALL	114:4	114:10	12	usage ( )
CALLEE	114:4	114:4	13	usage
LEAF_NODE	114:4	114:4	14	usage
LEAF_NODE	114:9	114:9	13	(
LEAF_NODE	114:10	114:10	13	)
LEAF_NODE	114:11	114:11	11	;
JUMP_STATEMENT	115:3	115:8	8	break DESTINATION ;
KEYWORD	115:3	115:3	9	break
LEAF_NODE	115:3	115:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	115:8	115:8	9	;
LEAF_NODE	116:2	116:2	8	case
LEAF_NODE	116:7	116:7	8	'r'
LEAF_NODE	116:10	116:10	8	:
EXPR_STATEMENT	117:3	117:30	8	rowsperstrip = atoi ( optarg ) ;
EXPR	117:3	117:3	9	rowsperstrip = atoi ( optarg )
ASSIGN	117:3	117:18	10	rowsperstrip = atoi ( optarg )
LVAL	117:3	117:3	11	rowsperstrip
FIELD	117:3	117:3	12	rowsperstrip
LEAF_NODE	117:3	117:3	13	rowsperstrip
ASSIGN_OP	117:16	117:16	11	=
LEAF_NODE	117:16	117:16	12	=
RVAL	117:18	117:18	11	atoi ( optarg )
FUNCTION_CALL	117:18	117:29	12	atoi ( optarg )
CALLEE	117:18	117:18	13	atoi
LEAF_NODE	117:18	117:18	14	atoi
LEAF_NODE	117:22	117:22	13	(
ARGUMENT	117:23	117:23	13	optarg
FIELD	117:23	117:23	14	optarg
LEAF_NODE	117:23	117:23	15	optarg
LEAF_NODE	117:29	117:29	13	)
LEAF_NODE	117:30	117:30	9	;
JUMP_STATEMENT	118:3	118:8	8	break DESTINATION ;
KEYWORD	118:3	118:3	9	break
LEAF_NODE	118:3	118:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	118:8	118:8	9	;
LEAF_NODE	119:2	119:2	8	case
LEAF_NODE	119:7	119:7	8	'R'
LEAF_NODE	119:10	119:10	8	:
EXPR_STATEMENT	120:3	120:28	8	resolution = atof ( optarg ) ;
EXPR	120:3	120:3	9	resolution = atof ( optarg )
ASSIGN	120:3	120:16	10	resolution = atof ( optarg )
LVAL	120:3	120:3	11	resolution
FIELD	120:3	120:3	12	resolution
LEAF_NODE	120:3	120:3	13	resolution
ASSIGN_OP	120:14	120:14	11	=
LEAF_NODE	120:14	120:14	12	=
RVAL	120:16	120:16	11	atof ( optarg )
FUNCTION_CALL	120:16	120:27	12	atof ( optarg )
CALLEE	120:16	120:16	13	atof
LEAF_NODE	120:16	120:16	14	atof
LEAF_NODE	120:20	120:20	13	(
ARGUMENT	120:21	120:21	13	optarg
FIELD	120:21	120:21	14	optarg
LEAF_NODE	120:21	120:21	15	optarg
LEAF_NODE	120:27	120:27	13	)
LEAF_NODE	120:28	120:28	9	;
JUMP_STATEMENT	121:3	121:8	8	break DESTINATION ;
KEYWORD	121:3	121:3	9	break
LEAF_NODE	121:3	121:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	121:8	121:8	9	;
LEAF_NODE	122:2	122:2	8	case
LEAF_NODE	122:7	122:7	8	'?'
LEAF_NODE	122:10	122:10	8	:
EXPR_STATEMENT	123:3	123:10	8	usage ( ) ;
EXPR	123:3	123:3	9	usage ( )
FUNCTION_CALL	123:3	123:9	10	usage ( )
CALLEE	123:3	123:3	11	usage
LEAF_NODE	123:3	123:3	12	usage
LEAF_NODE	123:8	123:8	11	(
LEAF_NODE	123:9	123:9	11	)
LEAF_NODE	123:10	123:10	9	;
LEAF_NODE	125:2	125:2	7	}
SELECTION	127:1	127:24	3	
KEYWORD	127:1	127:1	4	if
LEAF_NODE	127:1	127:1	5	if
LEAF_NODE	127:4	127:4	4	(
CONDITION	127:5	127:5	4	optind + 2 < argc
EXPR	127:5	127:18	5	optind + 2 < argc
FIELD	127:5	127:5	6	optind
LEAF_NODE	127:5	127:5	7	optind
LEAF_NODE	127:12	127:12	6	+
FIELD	127:14	127:14	6	2
LEAF_NODE	127:14	127:14	7	2
REL_OPERATOR	127:16	127:16	6	<
LEAF_NODE	127:16	127:16	7	<
FIELD	127:18	127:18	6	argc
LEAF_NODE	127:18	127:18	7	argc
LEAF_NODE	127:22	127:22	4	)
STATEMENTS	127:24	130:1	4	
LEAF_NODE	127:24	127:24	5	{
STATEMENTS	128:5	129:5	5	
EXPR_STATEMENT	128:5	128:57	6	fprintf ( stderr , "%s: Too many arguments\n" , argv [ 0 ] ) ;
EXPR	128:5	128:5	7	fprintf ( stderr , "%s: Too many arguments\n" , argv [ 0 ] )
FUNCTION_CALL	128:5	128:56	8	fprintf ( stderr , "%s: Too many arguments\n" , argv [ 0 ] )
CALLEE	128:5	128:5	9	fprintf
LEAF_NODE	128:5	128:5	10	fprintf
LEAF_NODE	128:12	128:12	9	(
ARGUMENT	128:13	128:13	9	stderr
FIELD	128:13	128:13	10	stderr
LEAF_NODE	128:13	128:13	11	stderr
LEAF_NODE	128:19	128:19	9	,
ARGUMENT	128:21	128:21	9	"%s: Too many arguments\n"
FIELD	128:21	128:21	10	"%s: Too many arguments\n"
LEAF_NODE	128:21	128:21	11	"%s: Too many arguments\n"
LEAF_NODE	128:47	128:47	9	,
ARGUMENT	128:49	128:49	9	argv [ 0 ]
FIELD	128:49	128:55	10	argv [ 0 ]
LEAF_NODE	128:49	128:49	11	argv
LEAF_NODE	128:53	128:53	11	[
EXPR	128:54	128:54	11	0
FIELD	128:54	128:54	12	0
LEAF_NODE	128:54	128:54	13	0
LEAF_NODE	128:55	128:55	11	]
LEAF_NODE	128:56	128:56	9	)
LEAF_NODE	128:57	128:57	7	;
EXPR_STATEMENT	129:5	129:12	6	usage ( ) ;
EXPR	129:5	129:5	7	usage ( )
FUNCTION_CALL	129:5	129:11	8	usage ( )
CALLEE	129:5	129:5	9	usage
LEAF_NODE	129:5	129:5	10	usage
LEAF_NODE	129:10	129:10	9	(
LEAF_NODE	129:11	129:11	9	)
LEAF_NODE	129:12	129:12	7	;
LEAF_NODE	130:1	130:1	5	}
SELECTION	136:1	136:24	3	
KEYWORD	136:1	136:1	4	if
LEAF_NODE	136:1	136:1	5	if
LEAF_NODE	136:4	136:4	4	(
CONDITION	136:5	136:5	4	argc - optind > 1
EXPR	136:5	136:21	5	argc - optind > 1
FIELD	136:5	136:5	6	argc
LEAF_NODE	136:5	136:5	7	argc
LEAF_NODE	136:10	136:10	6	-
FIELD	136:12	136:12	6	optind
LEAF_NODE	136:12	136:12	7	optind
REL_OPERATOR	136:19	136:19	6	>
LEAF_NODE	136:19	136:19	7	>
FIELD	136:21	136:21	6	1
LEAF_NODE	136:21	136:21	7	1
LEAF_NODE	136:22	136:22	4	)
STATEMENTS	136:24	143:1	4	
LEAF_NODE	136:24	136:24	5	{
STATEMENTS	137:2	139:2	5	
EXPR_STATEMENT	137:2	137:25	6	infile = argv [ optind ++ ] ;
EXPR	137:2	137:2	7	infile = argv [ optind ++ ]
ASSIGN	137:2	137:11	8	infile = argv [ optind ++ ]
LVAL	137:2	137:2	9	infile
FIELD	137:2	137:2	10	infile
LEAF_NODE	137:2	137:2	11	infile
ASSIGN_OP	137:9	137:9	9	=
LEAF_NODE	137:9	137:9	10	=
RVAL	137:11	137:11	9	argv [ optind ++ ]
FIELD	137:11	137:24	10	argv [ optind ++ ]
LEAF_NODE	137:11	137:11	11	argv
LEAF_NODE	137:15	137:15	11	[
EXPR	137:16	137:16	11	optind ++
FIELD	137:16	137:22	12	optind ++
LEAF_NODE	137:16	137:16	13	optind
LEAF_NODE	137:22	137:22	13	++
LEAF_NODE	137:24	137:24	11	]
LEAF_NODE	137:25	137:25	7	;
EXPR_STATEMENT	138:2	138:26	6	in = fopen ( infile , "rb" ) ;
EXPR	138:2	138:2	7	in = fopen ( infile , "rb" )
ASSIGN	138:2	138:7	8	in = fopen ( infile , "rb" )
LVAL	138:2	138:2	9	in
FIELD	138:2	138:2	10	in
LEAF_NODE	138:2	138:2	11	in
ASSIGN_OP	138:5	138:5	9	=
LEAF_NODE	138:5	138:5	10	=
RVAL	138:7	138:7	9	fopen ( infile , "rb" )
FUNCTION_CALL	138:7	138:25	10	fopen ( infile , "rb" )
CALLEE	138:7	138:7	11	fopen
LEAF_NODE	138:7	138:7	12	fopen
LEAF_NODE	138:12	138:12	11	(
ARGUMENT	138:13	138:13	11	infile
FIELD	138:13	138:13	12	infile
LEAF_NODE	138:13	138:13	13	infile
LEAF_NODE	138:19	138:19	11	,
ARGUMENT	138:21	138:21	11	"rb"
FIELD	138:21	138:21	12	"rb"
LEAF_NODE	138:21	138:21	13	"rb"
LEAF_NODE	138:25	138:25	11	)
LEAF_NODE	138:26	138:26	7	;
SELECTION	139:2	139:18	6	
KEYWORD	139:2	139:2	7	if
LEAF_NODE	139:2	139:2	8	if
LEAF_NODE	139:5	139:5	7	(
CONDITION	139:6	139:6	7	in == NULL
EXPR	139:6	139:12	8	in == NULL
FIELD	139:6	139:6	9	in
LEAF_NODE	139:6	139:6	10	in
EQ_OPERATOR	139:9	139:9	9	==
LEAF_NODE	139:9	139:9	10	==
FIELD	139:12	139:12	9	NULL
LEAF_NODE	139:12	139:12	10	NULL
LEAF_NODE	139:16	139:16	7	)
STATEMENTS	139:18	142:2	7	
LEAF_NODE	139:18	139:18	8	{
STATEMENTS	140:3	141:3	8	
EXPR_STATEMENT	140:3	140:49	9	fprintf ( stderr , "%s: Can not open.\n" , infile ) ;
EXPR	140:3	140:3	10	fprintf ( stderr , "%s: Can not open.\n" , infile )
FUNCTION_CALL	140:3	140:48	11	fprintf ( stderr , "%s: Can not open.\n" , infile )
CALLEE	140:3	140:3	12	fprintf
LEAF_NODE	140:3	140:3	13	fprintf
LEAF_NODE	140:10	140:10	12	(
ARGUMENT	140:11	140:11	12	stderr
FIELD	140:11	140:11	13	stderr
LEAF_NODE	140:11	140:11	14	stderr
LEAF_NODE	140:17	140:17	12	,
ARGUMENT	140:19	140:19	12	"%s: Can not open.\n"
FIELD	140:19	140:19	13	"%s: Can not open.\n"
LEAF_NODE	140:19	140:19	14	"%s: Can not open.\n"
LEAF_NODE	140:40	140:40	12	,
ARGUMENT	140:42	140:42	12	infile
FIELD	140:42	140:42	13	infile
LEAF_NODE	140:42	140:42	14	infile
LEAF_NODE	140:48	140:48	12	)
LEAF_NODE	140:49	140:49	10	;
JUMP_STATEMENT	141:3	141:14	9	return ( - 1 ) ;
KEYWORD	141:3	141:3	10	return
LEAF_NODE	141:3	141:3	11	return
DESTINATION	141:10	141:10	10	( - 1 )
EXPR	141:10	141:13	11	( - 1 )
LEAF_NODE	141:10	141:10	12	(
UNARY_EXPR	141:11	141:12	12	- 1
UNARY_OPERATOR	141:11	141:11	13	-
LEAF_NODE	141:11	141:11	14	-
FIELD	141:12	141:12	13	1
LEAF_NODE	141:12	141:12	14	1
LEAF_NODE	141:13	141:13	12	)
LEAF_NODE	141:14	141:14	10	;
LEAF_NODE	142:2	142:2	8	}
LEAF_NODE	143:1	143:1	5	}
SELECTION	143:3	143:8	3	
KEYWORD	143:3	143:3	4	else
LEAF_NODE	143:3	143:3	5	else
STATEMENTS	143:8	149:1	4	
LEAF_NODE	143:8	143:8	5	{
STATEMENTS	144:2	147:2	5	
EXPR_STATEMENT	144:2	144:20	6	infile = "<stdin>" ;
EXPR	144:2	144:2	7	infile = "<stdin>"
ASSIGN	144:2	144:11	8	infile = "<stdin>"
LVAL	144:2	144:2	9	infile
FIELD	144:2	144:2	10	infile
LEAF_NODE	144:2	144:2	11	infile
ASSIGN_OP	144:9	144:9	9	=
LEAF_NODE	144:9	144:9	10	=
RVAL	144:11	144:11	9	"<stdin>"
FIELD	144:11	144:11	10	"<stdin>"
LEAF_NODE	144:11	144:11	11	"<stdin>"
LEAF_NODE	144:20	144:20	7	;
EXPR_STATEMENT	145:2	145:12	6	in = stdin ;
EXPR	145:2	145:2	7	in = stdin
ASSIGN	145:2	145:7	8	in = stdin
LVAL	145:2	145:2	9	in
FIELD	145:2	145:2	10	in
LEAF_NODE	145:2	145:2	11	in
ASSIGN_OP	145:5	145:5	9	=
LEAF_NODE	145:5	145:5	10	=
RVAL	145:7	145:7	9	stdin
FIELD	145:7	145:7	10	stdin
LEAF_NODE	145:7	145:7	11	stdin
LEAF_NODE	145:12	145:12	7	;
EXPR_STATEMENT	147:2	147:34	6	setmode ( fileno ( stdin ) , O_BINARY ) ;
EXPR	147:2	147:2	7	setmode ( fileno ( stdin ) , O_BINARY )
FUNCTION_CALL	147:2	147:33	8	setmode ( fileno ( stdin ) , O_BINARY )
CALLEE	147:2	147:2	9	setmode
LEAF_NODE	147:2	147:2	10	setmode
LEAF_NODE	147:9	147:9	9	(
ARGUMENT	147:10	147:10	9	fileno ( stdin )
FUNCTION_CALL	147:10	147:22	10	fileno ( stdin )
CALLEE	147:10	147:10	11	fileno
LEAF_NODE	147:10	147:10	12	fileno
LEAF_NODE	147:16	147:16	11	(
ARGUMENT	147:17	147:17	11	stdin
FIELD	147:17	147:17	12	stdin
LEAF_NODE	147:17	147:17	13	stdin
LEAF_NODE	147:22	147:22	11	)
LEAF_NODE	147:23	147:23	9	,
ARGUMENT	147:25	147:25	9	O_BINARY
FIELD	147:25	147:25	10	O_BINARY
LEAF_NODE	147:25	147:25	11	O_BINARY
LEAF_NODE	147:33	147:33	9	)
LEAF_NODE	147:34	147:34	7	;
LEAF_NODE	149:1	149:1	5	}
SELECTION	151:1	152:2	3	
KEYWORD	151:1	151:1	4	if
LEAF_NODE	151:1	151:1	5	if
LEAF_NODE	151:4	151:4	4	(
CONDITION	151:5	151:5	4	fgetc ( in ) != 'P'
EXPR	151:5	151:18	5	fgetc ( in ) != 'P'
FUNCTION_CALL	151:5	151:13	6	fgetc ( in )
CALLEE	151:5	151:5	7	fgetc
LEAF_NODE	151:5	151:5	8	fgetc
LEAF_NODE	151:10	151:10	7	(
ARGUMENT	151:11	151:11	7	in
FIELD	151:11	151:11	8	in
LEAF_NODE	151:11	151:11	9	in
LEAF_NODE	151:13	151:13	7	)
EQ_OPERATOR	151:15	151:15	6	!=
LEAF_NODE	151:15	151:15	7	!=
FIELD	151:18	151:18	6	'P'
LEAF_NODE	151:18	151:18	7	'P'
LEAF_NODE	151:21	151:21	4	)
STATEMENTS	152:2	152:2	4	
EXPR_STATEMENT	152:2	152:16	5	BadPPM ( infile ) ;
EXPR	152:2	152:2	6	BadPPM ( infile )
FUNCTION_CALL	152:2	152:15	7	BadPPM ( infile )
CALLEE	152:2	152:2	8	BadPPM
LEAF_NODE	152:2	152:2	9	BadPPM
LEAF_NODE	152:8	152:8	8	(
ARGUMENT	152:9	152:9	8	infile
FIELD	152:9	152:9	9	infile
LEAF_NODE	152:9	152:9	10	infile
LEAF_NODE	152:15	152:15	8	)
LEAF_NODE	152:16	152:16	6	;
SELECTION	153:1	153:20	3	
KEYWORD	153:1	153:1	4	switch
LEAF_NODE	153:1	153:1	5	switch
LEAF_NODE	153:8	153:8	4	(
CONDITION	153:9	153:9	4	fgetc ( in )
EXPR	153:9	153:9	5	fgetc ( in )
FUNCTION_CALL	153:9	153:17	6	fgetc ( in )
CALLEE	153:9	153:9	7	fgetc
LEAF_NODE	153:9	153:9	8	fgetc
LEAF_NODE	153:14	153:14	7	(
ARGUMENT	153:15	153:15	7	in
FIELD	153:15	153:15	8	in
LEAF_NODE	153:15	153:15	9	in
LEAF_NODE	153:17	153:17	7	)
LEAF_NODE	153:18	153:18	4	)
STATEMENTS	153:20	174:1	4	
LEAF_NODE	153:20	153:20	5	{
STATEMENTS	154:2	173:3	5	
LEAF_NODE	154:2	154:2	6	case
LEAF_NODE	154:7	154:7	6	'4'
LEAF_NODE	154:10	154:10	6	:
EXPR_STATEMENT	155:3	155:10	6	bpp = 1 ;
EXPR	155:3	155:3	7	bpp = 1
ASSIGN	155:3	155:9	8	bpp = 1
LVAL	155:3	155:3	9	bpp
FIELD	155:3	155:3	10	bpp
LEAF_NODE	155:3	155:3	11	bpp
ASSIGN_OP	155:7	155:7	9	=
LEAF_NODE	155:7	155:7	10	=
RVAL	155:9	155:9	9	1
FIELD	155:9	155:9	10	1
LEAF_NODE	155:9	155:9	11	1
LEAF_NODE	155:10	155:10	7	;
EXPR_STATEMENT	156:3	156:10	6	spp = 1 ;
EXPR	156:3	156:3	7	spp = 1
ASSIGN	156:3	156:9	8	spp = 1
LVAL	156:3	156:3	9	spp
FIELD	156:3	156:3	10	spp
LEAF_NODE	156:3	156:3	11	spp
ASSIGN_OP	156:7	156:7	9	=
LEAF_NODE	156:7	156:7	10	=
RVAL	156:9	156:9	9	1
FIELD	156:9	156:9	10	1
LEAF_NODE	156:9	156:9	11	1
LEAF_NODE	156:10	156:10	7	;
EXPR_STATEMENT	157:3	157:39	6	photometric = PHOTOMETRIC_MINISWHITE ;
EXPR	157:3	157:3	7	photometric = PHOTOMETRIC_MINISWHITE
ASSIGN	157:3	157:17	8	photometric = PHOTOMETRIC_MINISWHITE
LVAL	157:3	157:3	9	photometric
FIELD	157:3	157:3	10	photometric
LEAF_NODE	157:3	157:3	11	photometric
ASSIGN_OP	157:15	157:15	9	=
LEAF_NODE	157:15	157:15	10	=
RVAL	157:17	157:17	9	PHOTOMETRIC_MINISWHITE
FIELD	157:17	157:17	10	PHOTOMETRIC_MINISWHITE
LEAF_NODE	157:17	157:17	11	PHOTOMETRIC_MINISWHITE
LEAF_NODE	157:39	157:39	7	;
JUMP_STATEMENT	158:3	158:8	6	break DESTINATION ;
KEYWORD	158:3	158:3	7	break
LEAF_NODE	158:3	158:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	158:8	158:8	7	;
LEAF_NODE	159:2	159:2	6	case
LEAF_NODE	159:7	159:7	6	'5'
LEAF_NODE	159:10	159:10	6	:
EXPR_STATEMENT	160:3	160:10	6	bpp = 8 ;
EXPR	160:3	160:3	7	bpp = 8
ASSIGN	160:3	160:9	8	bpp = 8
LVAL	160:3	160:3	9	bpp
FIELD	160:3	160:3	10	bpp
LEAF_NODE	160:3	160:3	11	bpp
ASSIGN_OP	160:7	160:7	9	=
LEAF_NODE	160:7	160:7	10	=
RVAL	160:9	160:9	9	8
FIELD	160:9	160:9	10	8
LEAF_NODE	160:9	160:9	11	8
LEAF_NODE	160:10	160:10	7	;
EXPR_STATEMENT	161:3	161:10	6	spp = 1 ;
EXPR	161:3	161:3	7	spp = 1
ASSIGN	161:3	161:9	8	spp = 1
LVAL	161:3	161:3	9	spp
FIELD	161:3	161:3	10	spp
LEAF_NODE	161:3	161:3	11	spp
ASSIGN_OP	161:7	161:7	9	=
LEAF_NODE	161:7	161:7	10	=
RVAL	161:9	161:9	9	1
FIELD	161:9	161:9	10	1
LEAF_NODE	161:9	161:9	11	1
LEAF_NODE	161:10	161:10	7	;
EXPR_STATEMENT	162:3	162:39	6	photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	162:3	162:3	7	photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	162:3	162:17	8	photometric = PHOTOMETRIC_MINISBLACK
LVAL	162:3	162:3	9	photometric
FIELD	162:3	162:3	10	photometric
LEAF_NODE	162:3	162:3	11	photometric
ASSIGN_OP	162:15	162:15	9	=
LEAF_NODE	162:15	162:15	10	=
RVAL	162:17	162:17	9	PHOTOMETRIC_MINISBLACK
FIELD	162:17	162:17	10	PHOTOMETRIC_MINISBLACK
LEAF_NODE	162:17	162:17	11	PHOTOMETRIC_MINISBLACK
LEAF_NODE	162:39	162:39	7	;
JUMP_STATEMENT	163:3	163:8	6	break DESTINATION ;
KEYWORD	163:3	163:3	7	break
LEAF_NODE	163:3	163:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	163:8	163:8	7	;
LEAF_NODE	164:2	164:2	6	case
LEAF_NODE	164:7	164:7	6	'6'
LEAF_NODE	164:10	164:10	6	:
EXPR_STATEMENT	165:3	165:10	6	bpp = 8 ;
EXPR	165:3	165:3	7	bpp = 8
ASSIGN	165:3	165:9	8	bpp = 8
LVAL	165:3	165:3	9	bpp
FIELD	165:3	165:3	10	bpp
LEAF_NODE	165:3	165:3	11	bpp
ASSIGN_OP	165:7	165:7	9	=
LEAF_NODE	165:7	165:7	10	=
RVAL	165:9	165:9	9	8
FIELD	165:9	165:9	10	8
LEAF_NODE	165:9	165:9	11	8
LEAF_NODE	165:10	165:10	7	;
EXPR_STATEMENT	166:3	166:10	6	spp = 3 ;
EXPR	166:3	166:3	7	spp = 3
ASSIGN	166:3	166:9	8	spp = 3
LVAL	166:3	166:3	9	spp
FIELD	166:3	166:3	10	spp
LEAF_NODE	166:3	166:3	11	spp
ASSIGN_OP	166:7	166:7	9	=
LEAF_NODE	166:7	166:7	10	=
RVAL	166:9	166:9	9	3
FIELD	166:9	166:9	10	3
LEAF_NODE	166:9	166:9	11	3
LEAF_NODE	166:10	166:10	7	;
EXPR_STATEMENT	167:3	167:32	6	photometric = PHOTOMETRIC_RGB ;
EXPR	167:3	167:3	7	photometric = PHOTOMETRIC_RGB
ASSIGN	167:3	167:17	8	photometric = PHOTOMETRIC_RGB
LVAL	167:3	167:3	9	photometric
FIELD	167:3	167:3	10	photometric
LEAF_NODE	167:3	167:3	11	photometric
ASSIGN_OP	167:15	167:15	9	=
LEAF_NODE	167:15	167:15	10	=
RVAL	167:17	167:17	9	PHOTOMETRIC_RGB
FIELD	167:17	167:17	10	PHOTOMETRIC_RGB
LEAF_NODE	167:17	167:17	11	PHOTOMETRIC_RGB
LEAF_NODE	167:32	167:32	7	;
SELECTION	168:3	170:4	6	
KEYWORD	168:3	168:3	7	if
LEAF_NODE	168:3	168:3	8	if
LEAF_NODE	168:6	168:6	7	(
CONDITION	168:7	168:7	7	compression == COMPRESSION_JPEG && jpegcolormode == JPEGCOLORMODE_RGB
EXPR	168:7	168:7	8	compression == COMPRESSION_JPEG && jpegcolormode == JPEGCOLORMODE_RGB
AND	168:7	169:7	9	compression == COMPRESSION_JPEG && jpegcolormode == JPEGCOLORMODE_RGB
EXPR	168:7	168:22	10	compression == COMPRESSION_JPEG
FIELD	168:7	168:7	11	compression
LEAF_NODE	168:7	168:7	12	compression
EQ_OPERATOR	168:19	168:19	11	==
LEAF_NODE	168:19	168:19	12	==
FIELD	168:22	168:22	11	COMPRESSION_JPEG
LEAF_NODE	168:22	168:22	12	COMPRESSION_JPEG
LEAF_NODE	168:39	168:39	10	&&
EXPR	169:7	169:24	10	jpegcolormode == JPEGCOLORMODE_RGB
FIELD	169:7	169:7	11	jpegcolormode
LEAF_NODE	169:7	169:7	12	jpegcolormode
EQ_OPERATOR	169:21	169:21	11	==
LEAF_NODE	169:21	169:21	12	==
FIELD	169:24	169:24	11	JPEGCOLORMODE_RGB
LEAF_NODE	169:24	169:24	12	JPEGCOLORMODE_RGB
LEAF_NODE	169:41	169:41	7	)
STATEMENTS	170:4	170:4	7	
EXPR_STATEMENT	170:4	170:35	8	photometric = PHOTOMETRIC_YCBCR ;
EXPR	170:4	170:4	9	photometric = PHOTOMETRIC_YCBCR
ASSIGN	170:4	170:18	10	photometric = PHOTOMETRIC_YCBCR
LVAL	170:4	170:4	11	photometric
FIELD	170:4	170:4	12	photometric
LEAF_NODE	170:4	170:4	13	photometric
ASSIGN_OP	170:16	170:16	11	=
LEAF_NODE	170:16	170:16	12	=
RVAL	170:18	170:18	11	PHOTOMETRIC_YCBCR
FIELD	170:18	170:18	12	PHOTOMETRIC_YCBCR
LEAF_NODE	170:18	170:18	13	PHOTOMETRIC_YCBCR
LEAF_NODE	170:35	170:35	9	;
JUMP_STATEMENT	171:3	171:8	6	break DESTINATION ;
KEYWORD	171:3	171:3	7	break
LEAF_NODE	171:3	171:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	171:8	171:8	7	;
LABEL	172:2	172:9	6	default :
LEAF_NODE	172:2	172:2	7	default
LEAF_NODE	172:9	172:9	7	:
EXPR_STATEMENT	173:3	173:17	6	BadPPM ( infile ) ;
EXPR	173:3	173:3	7	BadPPM ( infile )
FUNCTION_CALL	173:3	173:16	8	BadPPM ( infile )
CALLEE	173:3	173:3	9	BadPPM
LEAF_NODE	173:3	173:3	10	BadPPM
LEAF_NODE	173:9	173:9	9	(
ARGUMENT	173:10	173:10	9	infile
FIELD	173:10	173:10	10	infile
LEAF_NODE	173:10	173:10	11	infile
LEAF_NODE	173:16	173:16	9	)
LEAF_NODE	173:17	173:17	7	;
LEAF_NODE	174:1	174:1	5	}
ITERATION	177:1	177:10	3	
KEYWORD	177:1	177:1	4	while
LEAF_NODE	177:1	177:1	5	while
LEAF_NODE	177:6	177:6	4	(
CONDITION	177:7	177:7	4	1
EXPR	177:7	177:7	5	1
FIELD	177:7	177:7	6	1
LEAF_NODE	177:7	177:7	7	1
LEAF_NODE	177:8	177:8	4	)
STATEMENTS	177:10	195:1	4	
LEAF_NODE	177:10	177:10	5	{
STATEMENTS	178:2	194:2	5	
SELECTION	178:2	179:3	6	
KEYWORD	178:2	178:2	7	if
LEAF_NODE	178:2	178:2	8	if
LEAF_NODE	178:5	178:5	7	(
CONDITION	178:6	178:6	7	feof ( in )
EXPR	178:6	178:6	8	feof ( in )
FUNCTION_CALL	178:6	178:13	9	feof ( in )
CALLEE	178:6	178:6	10	feof
LEAF_NODE	178:6	178:6	11	feof
LEAF_NODE	178:10	178:10	10	(
ARGUMENT	178:11	178:11	10	in
FIELD	178:11	178:11	11	in
LEAF_NODE	178:11	178:11	12	in
LEAF_NODE	178:13	178:13	10	)
LEAF_NODE	178:14	178:14	7	)
STATEMENTS	179:3	179:3	7	
EXPR_STATEMENT	179:3	179:17	8	BadPPM ( infile ) ;
EXPR	179:3	179:3	9	BadPPM ( infile )
FUNCTION_CALL	179:3	179:16	10	BadPPM ( infile )
CALLEE	179:3	179:3	11	BadPPM
LEAF_NODE	179:3	179:3	12	BadPPM
LEAF_NODE	179:9	179:9	11	(
ARGUMENT	179:10	179:10	11	infile
FIELD	179:10	179:10	12	infile
LEAF_NODE	179:10	179:10	13	infile
LEAF_NODE	179:16	179:16	11	)
LEAF_NODE	179:17	179:17	9	;
EXPR_STATEMENT	180:2	180:15	6	c = fgetc ( in ) ;
EXPR	180:2	180:2	7	c = fgetc ( in )
ASSIGN	180:2	180:6	8	c = fgetc ( in )
LVAL	180:2	180:2	9	c
FIELD	180:2	180:2	10	c
LEAF_NODE	180:2	180:2	11	c
ASSIGN_OP	180:4	180:4	9	=
LEAF_NODE	180:4	180:4	10	=
RVAL	180:6	180:6	9	fgetc ( in )
FUNCTION_CALL	180:6	180:14	10	fgetc ( in )
CALLEE	180:6	180:6	11	fgetc
LEAF_NODE	180:6	180:6	12	fgetc
LEAF_NODE	180:11	180:11	11	(
ARGUMENT	180:12	180:12	11	in
FIELD	180:12	180:12	12	in
LEAF_NODE	180:12	180:12	13	in
LEAF_NODE	180:14	180:14	11	)
LEAF_NODE	180:15	180:15	7	;
SELECTION	182:2	183:3	6	
KEYWORD	182:2	182:2	7	if
LEAF_NODE	182:2	182:2	8	if
LEAF_NODE	182:5	182:5	7	(
CONDITION	182:6	182:6	7	strchr ( " \t\r\n" , c )
EXPR	182:6	182:6	8	strchr ( " \t\r\n" , c )
FUNCTION_CALL	182:6	182:25	9	strchr ( " \t\r\n" , c )
CALLEE	182:6	182:6	10	strchr
LEAF_NODE	182:6	182:6	11	strchr
LEAF_NODE	182:12	182:12	10	(
ARGUMENT	182:13	182:13	10	" \t\r\n"
FIELD	182:13	182:13	11	" \t\r\n"
LEAF_NODE	182:13	182:13	12	" \t\r\n"
LEAF_NODE	182:22	182:22	10	,
ARGUMENT	182:24	182:24	10	c
FIELD	182:24	182:24	11	c
LEAF_NODE	182:24	182:24	12	c
LEAF_NODE	182:25	182:25	10	)
LEAF_NODE	182:26	182:26	7	)
STATEMENTS	183:3	183:3	7	
JUMP_STATEMENT	183:3	183:11	8	continue DESTINATION ;
KEYWORD	183:3	183:3	9	continue
LEAF_NODE	183:3	183:3	10	continue
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	183:11	183:11	9	;
SELECTION	186:2	186:16	6	
KEYWORD	186:2	186:2	7	if
LEAF_NODE	186:2	186:2	8	if
LEAF_NODE	186:5	186:5	7	(
CONDITION	186:6	186:6	7	c == '#'
EXPR	186:6	186:11	8	c == '#'
FIELD	186:6	186:6	9	c
LEAF_NODE	186:6	186:6	10	c
EQ_OPERATOR	186:8	186:8	9	==
LEAF_NODE	186:8	186:8	10	==
FIELD	186:11	186:11	9	'#'
LEAF_NODE	186:11	186:11	10	'#'
LEAF_NODE	186:14	186:14	7	)
STATEMENTS	186:16	191:2	7	
LEAF_NODE	186:16	186:16	8	{
STATEMENTS	187:3	190:3	8	
ITERATION	187:3	187:6	9	
KEYWORD	187:3	187:3	10	do
LEAF_NODE	187:3	187:3	11	do
LEAF_NODE	189:10	189:10	10	(
CONDITION	189:11	189:11	10	! ( strchr ( "\r\n" , c ) || feof ( in ) )
EXPR	189:11	189:11	11	! ( strchr ( "\r\n" , c ) || feof ( in ) )
UNARY_EXPR	189:11	189:42	12	! ( strchr ( "\r\n" , c ) || feof ( in ) )
UNARY_OPERATOR	189:11	189:11	13	!
LEAF_NODE	189:11	189:11	14	!
LEAF_NODE	189:12	189:12	13	(
OR	189:13	189:34	13	strchr ( "\r\n" , c ) || feof ( in )
EXPR	189:13	189:13	14	strchr ( "\r\n" , c )
FUNCTION_CALL	189:13	189:29	15	strchr ( "\r\n" , c )
CALLEE	189:13	189:13	16	strchr
LEAF_NODE	189:13	189:13	17	strchr
LEAF_NODE	189:19	189:19	16	(
ARGUMENT	189:20	189:20	16	"\r\n"
FIELD	189:20	189:20	17	"\r\n"
LEAF_NODE	189:20	189:20	18	"\r\n"
LEAF_NODE	189:26	189:26	16	,
ARGUMENT	189:28	189:28	16	c
FIELD	189:28	189:28	17	c
LEAF_NODE	189:28	189:28	18	c
LEAF_NODE	189:29	189:29	16	)
LEAF_NODE	189:31	189:31	14	||
EXPR	189:34	189:34	14	feof ( in )
FUNCTION_CALL	189:34	189:41	15	feof ( in )
CALLEE	189:34	189:34	16	feof
LEAF_NODE	189:34	189:34	17	feof
LEAF_NODE	189:38	189:38	16	(
ARGUMENT	189:39	189:39	16	in
FIELD	189:39	189:39	17	in
LEAF_NODE	189:39	189:39	18	in
LEAF_NODE	189:41	189:41	16	)
LEAF_NODE	189:42	189:42	13	)
LEAF_NODE	189:43	189:43	10	)
STATEMENTS	187:6	189:3	10	
LEAF_NODE	187:6	187:6	11	{
STATEMENTS	188:7	188:7	11	
EXPR_STATEMENT	188:7	188:20	12	c = fgetc ( in ) ;
EXPR	188:7	188:7	13	c = fgetc ( in )
ASSIGN	188:7	188:11	14	c = fgetc ( in )
LVAL	188:7	188:7	15	c
FIELD	188:7	188:7	16	c
LEAF_NODE	188:7	188:7	17	c
ASSIGN_OP	188:9	188:9	15	=
LEAF_NODE	188:9	188:9	16	=
RVAL	188:11	188:11	15	fgetc ( in )
FUNCTION_CALL	188:11	188:19	16	fgetc ( in )
CALLEE	188:11	188:11	17	fgetc
LEAF_NODE	188:11	188:11	18	fgetc
LEAF_NODE	188:16	188:16	17	(
ARGUMENT	188:17	188:17	17	in
FIELD	188:17	188:17	18	in
LEAF_NODE	188:17	188:17	19	in
LEAF_NODE	188:19	188:19	17	)
LEAF_NODE	188:20	188:20	13	;
LEAF_NODE	189:3	189:3	11	}
LEAF_NODE	189:44	189:44	9	;
JUMP_STATEMENT	190:3	190:11	9	continue DESTINATION ;
KEYWORD	190:3	190:3	10	continue
LEAF_NODE	190:3	190:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	190:11	190:11	10	;
LEAF_NODE	191:2	191:2	8	}
EXPR_STATEMENT	193:2	193:15	6	ungetc ( c , in ) ;
EXPR	193:2	193:2	7	ungetc ( c , in )
FUNCTION_CALL	193:2	193:14	8	ungetc ( c , in )
CALLEE	193:2	193:2	9	ungetc
LEAF_NODE	193:2	193:2	10	ungetc
LEAF_NODE	193:8	193:8	9	(
ARGUMENT	193:9	193:9	9	c
FIELD	193:9	193:9	10	c
LEAF_NODE	193:9	193:9	11	c
LEAF_NODE	193:10	193:10	9	,
ARGUMENT	193:12	193:12	9	in
FIELD	193:12	193:12	10	in
LEAF_NODE	193:12	193:12	11	in
LEAF_NODE	193:14	193:14	9	)
LEAF_NODE	193:15	193:15	7	;
JUMP_STATEMENT	194:2	194:7	6	break DESTINATION ;
KEYWORD	194:2	194:2	7	break
LEAF_NODE	194:2	194:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	194:7	194:7	7	;
LEAF_NODE	195:1	195:1	5	}
SELECTION	196:1	196:14	3	
KEYWORD	196:1	196:1	4	switch
LEAF_NODE	196:1	196:1	5	switch
LEAF_NODE	196:8	196:8	4	(
CONDITION	196:9	196:9	4	bpp
EXPR	196:9	196:9	5	bpp
FIELD	196:9	196:9	6	bpp
LEAF_NODE	196:9	196:9	7	bpp
LEAF_NODE	196:12	196:12	4	)
STATEMENTS	196:14	209:1	4	
LEAF_NODE	196:14	196:14	5	{
STATEMENTS	197:1	208:2	5	
LABEL	197:1	197:7	6	case 1 :
LEAF_NODE	197:1	197:1	7	case
LEAF_NODE	197:6	197:6	7	1
LEAF_NODE	197:7	197:7	7	:
SELECTION	198:2	199:3	6	
KEYWORD	198:2	198:2	7	if
LEAF_NODE	198:2	198:2	8	if
LEAF_NODE	198:5	198:5	7	(
CONDITION	198:6	198:6	7	fscanf ( in , " %u %u" , & w , & h ) != 2
EXPR	198:6	198:38	8	fscanf ( in , " %u %u" , & w , & h ) != 2
FUNCTION_CALL	198:6	198:33	9	fscanf ( in , " %u %u" , & w , & h )
CALLEE	198:6	198:6	10	fscanf
LEAF_NODE	198:6	198:6	11	fscanf
LEAF_NODE	198:12	198:12	10	(
ARGUMENT	198:13	198:13	10	in
FIELD	198:13	198:13	11	in
LEAF_NODE	198:13	198:13	12	in
LEAF_NODE	198:15	198:15	10	,
ARGUMENT	198:17	198:17	10	" %u %u"
FIELD	198:17	198:17	11	" %u %u"
LEAF_NODE	198:17	198:17	12	" %u %u"
LEAF_NODE	198:25	198:25	10	,
ARGUMENT	198:27	198:27	10	& w
UNARY_EXPR	198:27	198:28	11	& w
UNARY_OPERATOR	198:27	198:27	12	&
LEAF_NODE	198:27	198:27	13	&
FIELD	198:28	198:28	12	w
LEAF_NODE	198:28	198:28	13	w
LEAF_NODE	198:29	198:29	10	,
ARGUMENT	198:31	198:31	10	& h
UNARY_EXPR	198:31	198:32	11	& h
UNARY_OPERATOR	198:31	198:31	12	&
LEAF_NODE	198:31	198:31	13	&
FIELD	198:32	198:32	12	h
LEAF_NODE	198:32	198:32	13	h
LEAF_NODE	198:33	198:33	10	)
EQ_OPERATOR	198:35	198:35	9	!=
LEAF_NODE	198:35	198:35	10	!=
FIELD	198:38	198:38	9	2
LEAF_NODE	198:38	198:38	10	2
LEAF_NODE	198:39	198:39	7	)
STATEMENTS	199:3	199:3	7	
EXPR_STATEMENT	199:3	199:17	8	BadPPM ( infile ) ;
EXPR	199:3	199:3	9	BadPPM ( infile )
FUNCTION_CALL	199:3	199:16	10	BadPPM ( infile )
CALLEE	199:3	199:3	11	BadPPM
LEAF_NODE	199:3	199:3	12	BadPPM
LEAF_NODE	199:9	199:9	11	(
ARGUMENT	199:10	199:10	11	infile
FIELD	199:10	199:10	12	infile
LEAF_NODE	199:10	199:10	13	infile
LEAF_NODE	199:16	199:16	11	)
LEAF_NODE	199:17	199:17	9	;
SELECTION	200:2	201:3	6	
KEYWORD	200:2	200:2	7	if
LEAF_NODE	200:2	200:2	8	if
LEAF_NODE	200:5	200:5	7	(
CONDITION	200:6	200:6	7	fgetc ( in ) != '\n'
EXPR	200:6	200:19	8	fgetc ( in ) != '\n'
FUNCTION_CALL	200:6	200:14	9	fgetc ( in )
CALLEE	200:6	200:6	10	fgetc
LEAF_NODE	200:6	200:6	11	fgetc
LEAF_NODE	200:11	200:11	10	(
ARGUMENT	200:12	200:12	10	in
FIELD	200:12	200:12	11	in
LEAF_NODE	200:12	200:12	12	in
LEAF_NODE	200:14	200:14	10	)
EQ_OPERATOR	200:16	200:16	9	!=
LEAF_NODE	200:16	200:16	10	!=
FIELD	200:19	200:19	9	'\n'
LEAF_NODE	200:19	200:19	10	'\n'
LEAF_NODE	200:23	200:23	7	)
STATEMENTS	201:3	201:3	7	
EXPR_STATEMENT	201:3	201:17	8	BadPPM ( infile ) ;
EXPR	201:3	201:3	9	BadPPM ( infile )
FUNCTION_CALL	201:3	201:16	10	BadPPM ( infile )
CALLEE	201:3	201:3	11	BadPPM
LEAF_NODE	201:3	201:3	12	BadPPM
LEAF_NODE	201:9	201:9	11	(
ARGUMENT	201:10	201:10	11	infile
FIELD	201:10	201:10	12	infile
LEAF_NODE	201:10	201:10	13	infile
LEAF_NODE	201:16	201:16	11	)
LEAF_NODE	201:17	201:17	9	;
JUMP_STATEMENT	202:2	202:7	6	break DESTINATION ;
KEYWORD	202:2	202:2	7	break
LEAF_NODE	202:2	202:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	202:7	202:7	7	;
LABEL	203:1	203:7	6	case 8 :
LEAF_NODE	203:1	203:1	7	case
LEAF_NODE	203:6	203:6	7	8
LEAF_NODE	203:7	203:7	7	:
SELECTION	204:2	205:3	6	
KEYWORD	204:2	204:2	7	if
LEAF_NODE	204:2	204:2	8	if
LEAF_NODE	204:5	204:5	7	(
CONDITION	204:6	204:6	7	fscanf ( in , " %u %u %u" , & w , & h , & prec ) != 3
EXPR	204:6	204:48	8	fscanf ( in , " %u %u %u" , & w , & h , & prec ) != 3
FUNCTION_CALL	204:6	204:43	9	fscanf ( in , " %u %u %u" , & w , & h , & prec )
CALLEE	204:6	204:6	10	fscanf
LEAF_NODE	204:6	204:6	11	fscanf
LEAF_NODE	204:12	204:12	10	(
ARGUMENT	204:13	204:13	10	in
FIELD	204:13	204:13	11	in
LEAF_NODE	204:13	204:13	12	in
LEAF_NODE	204:15	204:15	10	,
ARGUMENT	204:17	204:17	10	" %u %u %u"
FIELD	204:17	204:17	11	" %u %u %u"
LEAF_NODE	204:17	204:17	12	" %u %u %u"
LEAF_NODE	204:28	204:28	10	,
ARGUMENT	204:30	204:30	10	& w
UNARY_EXPR	204:30	204:31	11	& w
UNARY_OPERATOR	204:30	204:30	12	&
LEAF_NODE	204:30	204:30	13	&
FIELD	204:31	204:31	12	w
LEAF_NODE	204:31	204:31	13	w
LEAF_NODE	204:32	204:32	10	,
ARGUMENT	204:34	204:34	10	& h
UNARY_EXPR	204:34	204:35	11	& h
UNARY_OPERATOR	204:34	204:34	12	&
LEAF_NODE	204:34	204:34	13	&
FIELD	204:35	204:35	12	h
LEAF_NODE	204:35	204:35	13	h
LEAF_NODE	204:36	204:36	10	,
ARGUMENT	204:38	204:38	10	& prec
UNARY_EXPR	204:38	204:39	11	& prec
UNARY_OPERATOR	204:38	204:38	12	&
LEAF_NODE	204:38	204:38	13	&
FIELD	204:39	204:39	12	prec
LEAF_NODE	204:39	204:39	13	prec
LEAF_NODE	204:43	204:43	10	)
EQ_OPERATOR	204:45	204:45	9	!=
LEAF_NODE	204:45	204:45	10	!=
FIELD	204:48	204:48	9	3
LEAF_NODE	204:48	204:48	10	3
LEAF_NODE	204:49	204:49	7	)
STATEMENTS	205:3	205:3	7	
EXPR_STATEMENT	205:3	205:17	8	BadPPM ( infile ) ;
EXPR	205:3	205:3	9	BadPPM ( infile )
FUNCTION_CALL	205:3	205:16	10	BadPPM ( infile )
CALLEE	205:3	205:3	11	BadPPM
LEAF_NODE	205:3	205:3	12	BadPPM
LEAF_NODE	205:9	205:9	11	(
ARGUMENT	205:10	205:10	11	infile
FIELD	205:10	205:10	12	infile
LEAF_NODE	205:10	205:10	13	infile
LEAF_NODE	205:16	205:16	11	)
LEAF_NODE	205:17	205:17	9	;
SELECTION	206:2	207:3	6	
KEYWORD	206:2	206:2	7	if
LEAF_NODE	206:2	206:2	8	if
LEAF_NODE	206:5	206:5	7	(
CONDITION	206:6	206:6	7	fgetc ( in ) != '\n' || prec != 255
EXPR	206:6	206:6	8	fgetc ( in ) != '\n' || prec != 255
OR	206:6	206:27	9	fgetc ( in ) != '\n' || prec != 255
EXPR	206:6	206:19	10	fgetc ( in ) != '\n'
FUNCTION_CALL	206:6	206:14	11	fgetc ( in )
CALLEE	206:6	206:6	12	fgetc
LEAF_NODE	206:6	206:6	13	fgetc
LEAF_NODE	206:11	206:11	12	(
ARGUMENT	206:12	206:12	12	in
FIELD	206:12	206:12	13	in
LEAF_NODE	206:12	206:12	14	in
LEAF_NODE	206:14	206:14	12	)
EQ_OPERATOR	206:16	206:16	11	!=
LEAF_NODE	206:16	206:16	12	!=
FIELD	206:19	206:19	11	'\n'
LEAF_NODE	206:19	206:19	12	'\n'
LEAF_NODE	206:24	206:24	10	||
EXPR	206:27	206:35	10	prec != 255
FIELD	206:27	206:27	11	prec
LEAF_NODE	206:27	206:27	12	prec
EQ_OPERATOR	206:32	206:32	11	!=
LEAF_NODE	206:32	206:32	12	!=
FIELD	206:35	206:35	11	255
LEAF_NODE	206:35	206:35	12	255
LEAF_NODE	206:38	206:38	7	)
STATEMENTS	207:3	207:3	7	
EXPR_STATEMENT	207:3	207:17	8	BadPPM ( infile ) ;
EXPR	207:3	207:3	9	BadPPM ( infile )
FUNCTION_CALL	207:3	207:16	10	BadPPM ( infile )
CALLEE	207:3	207:3	11	BadPPM
LEAF_NODE	207:3	207:3	12	BadPPM
LEAF_NODE	207:9	207:9	11	(
ARGUMENT	207:10	207:10	11	infile
FIELD	207:10	207:10	12	infile
LEAF_NODE	207:10	207:10	13	infile
LEAF_NODE	207:16	207:16	11	)
LEAF_NODE	207:17	207:17	9	;
JUMP_STATEMENT	208:2	208:7	6	break DESTINATION ;
KEYWORD	208:2	208:2	7	break
LEAF_NODE	208:2	208:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	208:7	208:7	7	;
LEAF_NODE	209:1	209:1	5	}
EXPR_STATEMENT	210:1	210:34	3	out = TIFFOpen ( argv [ optind ] , "w" ) ;
EXPR	210:1	210:1	4	out = TIFFOpen ( argv [ optind ] , "w" )
ASSIGN	210:1	210:7	5	out = TIFFOpen ( argv [ optind ] , "w" )
LVAL	210:1	210:1	6	out
FIELD	210:1	210:1	7	out
LEAF_NODE	210:1	210:1	8	out
ASSIGN_OP	210:5	210:5	6	=
LEAF_NODE	210:5	210:5	7	=
RVAL	210:7	210:7	6	TIFFOpen ( argv [ optind ] , "w" )
FUNCTION_CALL	210:7	210:33	7	TIFFOpen ( argv [ optind ] , "w" )
CALLEE	210:7	210:7	8	TIFFOpen
LEAF_NODE	210:7	210:7	9	TIFFOpen
LEAF_NODE	210:15	210:15	8	(
ARGUMENT	210:16	210:16	8	argv [ optind ]
FIELD	210:16	210:27	9	argv [ optind ]
LEAF_NODE	210:16	210:16	10	argv
LEAF_NODE	210:20	210:20	10	[
EXPR	210:21	210:21	10	optind
FIELD	210:21	210:21	11	optind
LEAF_NODE	210:21	210:21	12	optind
LEAF_NODE	210:27	210:27	10	]
LEAF_NODE	210:28	210:28	8	,
ARGUMENT	210:30	210:30	8	"w"
FIELD	210:30	210:30	9	"w"
LEAF_NODE	210:30	210:30	10	"w"
LEAF_NODE	210:33	210:33	8	)
LEAF_NODE	210:34	210:34	4	;
SELECTION	211:1	212:2	3	
KEYWORD	211:1	211:1	4	if
LEAF_NODE	211:1	211:1	5	if
LEAF_NODE	211:4	211:4	4	(
CONDITION	211:5	211:5	4	out == NULL
EXPR	211:5	211:12	5	out == NULL
FIELD	211:5	211:5	6	out
LEAF_NODE	211:5	211:5	7	out
EQ_OPERATOR	211:9	211:9	6	==
LEAF_NODE	211:9	211:9	7	==
FIELD	211:12	211:12	6	NULL
LEAF_NODE	211:12	211:12	7	NULL
LEAF_NODE	211:16	211:16	4	)
STATEMENTS	212:2	212:2	4	
JUMP_STATEMENT	212:2	212:13	5	return ( - 4 ) ;
KEYWORD	212:2	212:2	6	return
LEAF_NODE	212:2	212:2	7	return
DESTINATION	212:9	212:9	6	( - 4 )
EXPR	212:9	212:12	7	( - 4 )
LEAF_NODE	212:9	212:9	8	(
UNARY_EXPR	212:10	212:11	8	- 4
UNARY_OPERATOR	212:10	212:10	9	-
LEAF_NODE	212:10	212:10	10	-
FIELD	212:11	212:11	9	4
LEAF_NODE	212:11	212:11	10	4
LEAF_NODE	212:12	212:12	8	)
LEAF_NODE	212:13	212:13	6	;
EXPR_STATEMENT	213:1	213:50	3	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , ( uint32 ) w ) ;
EXPR	213:1	213:1	4	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , ( uint32 ) w )
FUNCTION_CALL	213:1	213:49	5	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , ( uint32 ) w )
CALLEE	213:1	213:1	6	TIFFSetField
LEAF_NODE	213:1	213:1	7	TIFFSetField
LEAF_NODE	213:13	213:13	6	(
ARGUMENT	213:14	213:14	6	out
FIELD	213:14	213:14	7	out
LEAF_NODE	213:14	213:14	8	out
LEAF_NODE	213:17	213:17	6	,
ARGUMENT	213:19	213:19	6	TIFFTAG_IMAGEWIDTH
FIELD	213:19	213:19	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	213:19	213:19	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	213:37	213:37	6	,
ARGUMENT	213:39	213:48	6	( uint32 ) w
LEAF_NODE	213:39	213:39	7	(
TYPE_NAME	213:40	213:40	7	uint32
LEAF_NODE	213:40	213:40	8	uint32
LEAF_NODE	213:46	213:46	7	)
FIELD	213:48	213:48	7	w
LEAF_NODE	213:48	213:48	8	w
LEAF_NODE	213:49	213:49	6	)
LEAF_NODE	213:50	213:50	4	;
EXPR_STATEMENT	214:1	214:51	3	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , ( uint32 ) h ) ;
EXPR	214:1	214:1	4	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , ( uint32 ) h )
FUNCTION_CALL	214:1	214:50	5	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , ( uint32 ) h )
CALLEE	214:1	214:1	6	TIFFSetField
LEAF_NODE	214:1	214:1	7	TIFFSetField
LEAF_NODE	214:13	214:13	6	(
ARGUMENT	214:14	214:14	6	out
FIELD	214:14	214:14	7	out
LEAF_NODE	214:14	214:14	8	out
LEAF_NODE	214:17	214:17	6	,
ARGUMENT	214:19	214:19	6	TIFFTAG_IMAGELENGTH
FIELD	214:19	214:19	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	214:19	214:19	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	214:38	214:38	6	,
ARGUMENT	214:40	214:49	6	( uint32 ) h
LEAF_NODE	214:40	214:40	7	(
TYPE_NAME	214:41	214:41	7	uint32
LEAF_NODE	214:41	214:41	8	uint32
LEAF_NODE	214:47	214:47	7	)
FIELD	214:49	214:49	7	h
LEAF_NODE	214:49	214:49	8	h
LEAF_NODE	214:50	214:50	6	)
LEAF_NODE	214:51	214:51	4	;
EXPR_STATEMENT	215:1	215:60	3	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT ) ;
EXPR	215:1	215:1	4	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
FUNCTION_CALL	215:1	215:59	5	TIFFSetField ( out , TIFFTAG_ORIENTATION , ORIENTATION_TOPLEFT )
CALLEE	215:1	215:1	6	TIFFSetField
LEAF_NODE	215:1	215:1	7	TIFFSetField
LEAF_NODE	215:13	215:13	6	(
ARGUMENT	215:14	215:14	6	out
FIELD	215:14	215:14	7	out
LEAF_NODE	215:14	215:14	8	out
LEAF_NODE	215:17	215:17	6	,
ARGUMENT	215:19	215:19	6	TIFFTAG_ORIENTATION
FIELD	215:19	215:19	7	TIFFTAG_ORIENTATION
LEAF_NODE	215:19	215:19	8	TIFFTAG_ORIENTATION
LEAF_NODE	215:38	215:38	6	,
ARGUMENT	215:40	215:40	6	ORIENTATION_TOPLEFT
FIELD	215:40	215:40	7	ORIENTATION_TOPLEFT
LEAF_NODE	215:40	215:40	8	ORIENTATION_TOPLEFT
LEAF_NODE	215:59	215:59	6	)
LEAF_NODE	215:60	215:60	4	;
EXPR_STATEMENT	216:1	216:48	3	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , spp ) ;
EXPR	216:1	216:1	4	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , spp )
FUNCTION_CALL	216:1	216:47	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , spp )
CALLEE	216:1	216:1	6	TIFFSetField
LEAF_NODE	216:1	216:1	7	TIFFSetField
LEAF_NODE	216:13	216:13	6	(
ARGUMENT	216:14	216:14	6	out
FIELD	216:14	216:14	7	out
LEAF_NODE	216:14	216:14	8	out
LEAF_NODE	216:17	216:17	6	,
ARGUMENT	216:19	216:19	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	216:19	216:19	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	216:19	216:19	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	216:42	216:42	6	,
ARGUMENT	216:44	216:44	6	spp
FIELD	216:44	216:44	7	spp
LEAF_NODE	216:44	216:44	8	spp
LEAF_NODE	216:47	216:47	6	)
LEAF_NODE	216:48	216:48	4	;
EXPR_STATEMENT	217:1	217:46	3	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , bpp ) ;
EXPR	217:1	217:1	4	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , bpp )
FUNCTION_CALL	217:1	217:45	5	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , bpp )
CALLEE	217:1	217:1	6	TIFFSetField
LEAF_NODE	217:1	217:1	7	TIFFSetField
LEAF_NODE	217:13	217:13	6	(
ARGUMENT	217:14	217:14	6	out
FIELD	217:14	217:14	7	out
LEAF_NODE	217:14	217:14	8	out
LEAF_NODE	217:17	217:17	6	,
ARGUMENT	217:19	217:19	6	TIFFTAG_BITSPERSAMPLE
FIELD	217:19	217:19	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	217:19	217:19	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	217:40	217:40	6	,
ARGUMENT	217:42	217:42	6	bpp
FIELD	217:42	217:42	7	bpp
LEAF_NODE	217:42	217:42	8	bpp
LEAF_NODE	217:45	217:45	6	)
LEAF_NODE	217:46	217:46	4	;
EXPR_STATEMENT	218:1	218:61	3	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	218:1	218:1	4	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	218:1	218:60	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	218:1	218:1	6	TIFFSetField
LEAF_NODE	218:1	218:1	7	TIFFSetField
LEAF_NODE	218:13	218:13	6	(
ARGUMENT	218:14	218:14	6	out
FIELD	218:14	218:14	7	out
LEAF_NODE	218:14	218:14	8	out
LEAF_NODE	218:17	218:17	6	,
ARGUMENT	218:19	218:19	6	TIFFTAG_PLANARCONFIG
FIELD	218:19	218:19	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	218:19	218:19	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	218:39	218:39	6	,
ARGUMENT	218:41	218:41	6	PLANARCONFIG_CONTIG
FIELD	218:41	218:41	7	PLANARCONFIG_CONTIG
LEAF_NODE	218:41	218:41	8	PLANARCONFIG_CONTIG
LEAF_NODE	218:60	218:60	6	)
LEAF_NODE	218:61	218:61	4	;
EXPR_STATEMENT	219:1	219:52	3	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric ) ;
EXPR	219:1	219:1	4	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric )
FUNCTION_CALL	219:1	219:51	5	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric )
CALLEE	219:1	219:1	6	TIFFSetField
LEAF_NODE	219:1	219:1	7	TIFFSetField
LEAF_NODE	219:13	219:13	6	(
ARGUMENT	219:14	219:14	6	out
FIELD	219:14	219:14	7	out
LEAF_NODE	219:14	219:14	8	out
LEAF_NODE	219:17	219:17	6	,
ARGUMENT	219:19	219:19	6	TIFFTAG_PHOTOMETRIC
FIELD	219:19	219:19	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	219:19	219:19	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	219:38	219:38	6	,
ARGUMENT	219:40	219:40	6	photometric
FIELD	219:40	219:40	7	photometric
LEAF_NODE	219:40	219:40	8	photometric
LEAF_NODE	219:51	219:51	6	)
LEAF_NODE	219:52	219:52	4	;
EXPR_STATEMENT	220:1	220:52	3	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	220:1	220:1	4	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	220:1	220:51	5	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	220:1	220:1	6	TIFFSetField
LEAF_NODE	220:1	220:1	7	TIFFSetField
LEAF_NODE	220:13	220:13	6	(
ARGUMENT	220:14	220:14	6	out
FIELD	220:14	220:14	7	out
LEAF_NODE	220:14	220:14	8	out
LEAF_NODE	220:17	220:17	6	,
ARGUMENT	220:19	220:19	6	TIFFTAG_COMPRESSION
FIELD	220:19	220:19	7	TIFFTAG_COMPRESSION
LEAF_NODE	220:19	220:19	8	TIFFTAG_COMPRESSION
LEAF_NODE	220:38	220:38	6	,
ARGUMENT	220:40	220:40	6	compression
FIELD	220:40	220:40	7	compression
LEAF_NODE	220:40	220:40	8	compression
LEAF_NODE	220:51	220:51	6	)
LEAF_NODE	220:52	220:52	4	;
SELECTION	221:1	221:22	3	
KEYWORD	221:1	221:1	4	switch
LEAF_NODE	221:1	221:1	5	switch
LEAF_NODE	221:8	221:8	4	(
CONDITION	221:9	221:9	4	compression
EXPR	221:9	221:9	5	compression
FIELD	221:9	221:9	6	compression
LEAF_NODE	221:9	221:9	7	compression
LEAF_NODE	221:20	221:20	4	)
STATEMENTS	221:22	234:1	4	
LEAF_NODE	221:22	221:22	5	{
STATEMENTS	222:1	233:2	5	
LABEL	222:1	222:22	6	case COMPRESSION_JPEG :
LEAF_NODE	222:1	222:1	7	case
LEAF_NODE	222:6	222:6	7	COMPRESSION_JPEG
LEAF_NODE	222:22	222:22	7	:
EXPR_STATEMENT	223:2	223:49	6	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality ) ;
EXPR	223:2	223:2	7	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
FUNCTION_CALL	223:2	223:48	8	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
CALLEE	223:2	223:2	9	TIFFSetField
LEAF_NODE	223:2	223:2	10	TIFFSetField
LEAF_NODE	223:14	223:14	9	(
ARGUMENT	223:15	223:15	9	out
FIELD	223:15	223:15	10	out
LEAF_NODE	223:15	223:15	11	out
LEAF_NODE	223:18	223:18	9	,
ARGUMENT	223:20	223:20	9	TIFFTAG_JPEGQUALITY
FIELD	223:20	223:20	10	TIFFTAG_JPEGQUALITY
LEAF_NODE	223:20	223:20	11	TIFFTAG_JPEGQUALITY
LEAF_NODE	223:39	223:39	9	,
ARGUMENT	223:41	223:41	9	quality
FIELD	223:41	223:41	10	quality
LEAF_NODE	223:41	223:41	11	quality
LEAF_NODE	223:48	223:48	9	)
LEAF_NODE	223:49	223:49	7	;
EXPR_STATEMENT	224:2	224:57	6	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode ) ;
EXPR	224:2	224:2	7	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode )
FUNCTION_CALL	224:2	224:56	8	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode )
CALLEE	224:2	224:2	9	TIFFSetField
LEAF_NODE	224:2	224:2	10	TIFFSetField
LEAF_NODE	224:14	224:14	9	(
ARGUMENT	224:15	224:15	9	out
FIELD	224:15	224:15	10	out
LEAF_NODE	224:15	224:15	11	out
LEAF_NODE	224:18	224:18	9	,
ARGUMENT	224:20	224:20	9	TIFFTAG_JPEGCOLORMODE
FIELD	224:20	224:20	10	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	224:20	224:20	11	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	224:41	224:41	9	,
ARGUMENT	224:43	224:43	9	jpegcolormode
FIELD	224:43	224:43	10	jpegcolormode
LEAF_NODE	224:43	224:43	11	jpegcolormode
LEAF_NODE	224:56	224:56	9	)
LEAF_NODE	224:57	224:57	7	;
JUMP_STATEMENT	225:2	225:7	6	break DESTINATION ;
KEYWORD	225:2	225:2	7	break
LEAF_NODE	225:2	225:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	225:7	225:7	7	;
LABEL	226:1	226:21	6	case COMPRESSION_LZW :
LEAF_NODE	226:1	226:1	7	case
LEAF_NODE	226:6	226:6	7	COMPRESSION_LZW
LEAF_NODE	226:21	226:21	7	:
LABEL	227:1	227:25	6	case COMPRESSION_DEFLATE :
LEAF_NODE	227:1	227:1	7	case
LEAF_NODE	227:6	227:6	7	COMPRESSION_DEFLATE
LEAF_NODE	227:25	227:25	7	:
SELECTION	228:2	229:3	6	
KEYWORD	228:2	228:2	7	if
LEAF_NODE	228:2	228:2	8	if
LEAF_NODE	228:5	228:5	7	(
CONDITION	228:6	228:6	7	predictor != 0
EXPR	228:6	228:19	8	predictor != 0
FIELD	228:6	228:6	9	predictor
LEAF_NODE	228:6	228:6	10	predictor
EQ_OPERATOR	228:16	228:16	9	!=
LEAF_NODE	228:16	228:16	10	!=
FIELD	228:19	228:19	9	0
LEAF_NODE	228:19	228:19	10	0
LEAF_NODE	228:20	228:20	7	)
STATEMENTS	229:3	229:3	7	
EXPR_STATEMENT	229:3	229:50	8	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor ) ;
EXPR	229:3	229:3	9	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	229:3	229:49	10	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
CALLEE	229:3	229:3	11	TIFFSetField
LEAF_NODE	229:3	229:3	12	TIFFSetField
LEAF_NODE	229:15	229:15	11	(
ARGUMENT	229:16	229:16	11	out
FIELD	229:16	229:16	12	out
LEAF_NODE	229:16	229:16	13	out
LEAF_NODE	229:19	229:19	11	,
ARGUMENT	229:21	229:21	11	TIFFTAG_PREDICTOR
FIELD	229:21	229:21	12	TIFFTAG_PREDICTOR
LEAF_NODE	229:21	229:21	13	TIFFTAG_PREDICTOR
LEAF_NODE	229:38	229:38	11	,
ARGUMENT	229:40	229:40	11	predictor
FIELD	229:40	229:40	12	predictor
LEAF_NODE	229:40	229:40	13	predictor
LEAF_NODE	229:49	229:49	11	)
LEAF_NODE	229:50	229:50	9	;
JUMP_STATEMENT	230:2	230:7	6	break DESTINATION ;
KEYWORD	230:2	230:2	7	break
LEAF_NODE	230:2	230:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	230:7	230:7	7	;
LABEL	231:8	231:34	6	case COMPRESSION_CCITTFAX3 :
LEAF_NODE	231:8	231:8	7	case
LEAF_NODE	231:13	231:13	7	COMPRESSION_CCITTFAX3
LEAF_NODE	231:34	231:34	7	:
EXPR_STATEMENT	232:2	232:50	6	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts ) ;
EXPR	232:2	232:2	7	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts )
FUNCTION_CALL	232:2	232:49	8	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts )
CALLEE	232:2	232:2	9	TIFFSetField
LEAF_NODE	232:2	232:2	10	TIFFSetField
LEAF_NODE	232:14	232:14	9	(
ARGUMENT	232:15	232:15	9	out
FIELD	232:15	232:15	10	out
LEAF_NODE	232:15	232:15	11	out
LEAF_NODE	232:18	232:18	9	,
ARGUMENT	232:20	232:20	9	TIFFTAG_GROUP3OPTIONS
FIELD	232:20	232:20	10	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	232:20	232:20	11	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	232:41	232:41	9	,
ARGUMENT	232:43	232:43	9	g3opts
FIELD	232:43	232:43	10	g3opts
LEAF_NODE	232:43	232:43	11	g3opts
LEAF_NODE	232:49	232:49	9	)
LEAF_NODE	232:50	232:50	7	;
JUMP_STATEMENT	233:2	233:7	6	break DESTINATION ;
KEYWORD	233:2	233:2	7	break
LEAF_NODE	233:2	233:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	233:7	233:7	7	;
LEAF_NODE	234:1	234:1	5	}
SELECTION	235:1	235:14	3	
KEYWORD	235:1	235:1	4	switch
LEAF_NODE	235:1	235:1	5	switch
LEAF_NODE	235:8	235:8	4	(
CONDITION	235:9	235:9	4	bpp
EXPR	235:9	235:9	5	bpp
FIELD	235:9	235:9	6	bpp
LEAF_NODE	235:9	235:9	7	bpp
LEAF_NODE	235:12	235:12	4	)
STATEMENTS	235:14	251:1	4	
LEAF_NODE	235:14	235:14	5	{
STATEMENTS	236:2	250:3	5	
LABEL	236:2	236:8	6	case 1 :
LEAF_NODE	236:2	236:2	7	case
LEAF_NODE	236:7	236:7	7	1
LEAF_NODE	236:8	236:8	7	:
EXPR_STATEMENT	238:3	238:50	6	linebytes = ( multiply_ms ( spp , w ) + ( 8 - 1 ) ) / 8 ;
EXPR	238:3	238:3	7	linebytes = ( multiply_ms ( spp , w ) + ( 8 - 1 ) ) / 8
ASSIGN	238:3	238:15	8	linebytes = ( multiply_ms ( spp , w ) + ( 8 - 1 ) ) / 8
LVAL	238:3	238:3	9	linebytes
FIELD	238:3	238:3	10	linebytes
LEAF_NODE	238:3	238:3	11	linebytes
ASSIGN_OP	238:13	238:13	9	=
LEAF_NODE	238:13	238:13	10	=
RVAL	238:15	238:49	9	( multiply_ms ( spp , w ) + ( 8 - 1 ) ) / 8
LEAF_NODE	238:15	238:15	10	(
FUNCTION_CALL	238:16	238:34	10	multiply_ms ( spp , w )
CALLEE	238:16	238:16	11	multiply_ms
LEAF_NODE	238:16	238:16	12	multiply_ms
LEAF_NODE	238:27	238:27	11	(
ARGUMENT	238:28	238:28	11	spp
FIELD	238:28	238:28	12	spp
LEAF_NODE	238:28	238:28	13	spp
LEAF_NODE	238:31	238:31	11	,
ARGUMENT	238:33	238:33	11	w
FIELD	238:33	238:33	12	w
LEAF_NODE	238:33	238:33	13	w
LEAF_NODE	238:34	238:34	11	)
LEAF_NODE	238:36	238:36	10	+
LEAF_NODE	238:38	238:38	10	(
FIELD	238:39	238:39	10	8
LEAF_NODE	238:39	238:39	11	8
LEAF_NODE	238:41	238:41	10	-
FIELD	238:43	238:43	10	1
LEAF_NODE	238:43	238:43	11	1
LEAF_NODE	238:44	238:44	10	)
LEAF_NODE	238:45	238:45	10	)
LEAF_NODE	238:47	238:47	10	/
FIELD	238:49	238:49	10	8
LEAF_NODE	238:49	238:49	11	8
LEAF_NODE	238:50	238:50	7	;
SELECTION	239:3	239:36	6	
KEYWORD	239:3	239:3	7	if
LEAF_NODE	239:3	239:3	8	if
LEAF_NODE	239:6	239:6	7	(
CONDITION	239:7	239:7	7	rowsperstrip == ( uint32 ) - 1
EXPR	239:7	239:32	8	rowsperstrip == ( uint32 ) - 1
FIELD	239:7	239:7	9	rowsperstrip
LEAF_NODE	239:7	239:7	10	rowsperstrip
EQ_OPERATOR	239:20	239:20	9	==
LEAF_NODE	239:20	239:20	10	==
LEAF_NODE	239:23	239:23	9	(
TYPE_NAME	239:24	239:24	9	uint32
LEAF_NODE	239:24	239:24	10	uint32
LEAF_NODE	239:30	239:30	9	)
UNARY_EXPR	239:32	239:33	9	- 1
UNARY_OPERATOR	239:32	239:32	10	-
LEAF_NODE	239:32	239:32	11	-
FIELD	239:33	239:33	10	1
LEAF_NODE	239:33	239:33	11	1
LEAF_NODE	239:34	239:34	7	)
STATEMENTS	239:36	241:3	7	
LEAF_NODE	239:36	239:36	8	{
STATEMENTS	240:4	240:4	8	
EXPR_STATEMENT	240:4	240:46	9	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , h ) ;
EXPR	240:4	240:4	10	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , h )
FUNCTION_CALL	240:4	240:45	11	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , h )
CALLEE	240:4	240:4	12	TIFFSetField
LEAF_NODE	240:4	240:4	13	TIFFSetField
LEAF_NODE	240:16	240:16	12	(
ARGUMENT	240:17	240:17	12	out
FIELD	240:17	240:17	13	out
LEAF_NODE	240:17	240:17	14	out
LEAF_NODE	240:20	240:20	12	,
ARGUMENT	240:22	240:22	12	TIFFTAG_ROWSPERSTRIP
FIELD	240:22	240:22	13	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	240:22	240:22	14	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	240:42	240:42	12	,
ARGUMENT	240:44	240:44	12	h
FIELD	240:44	240:44	13	h
LEAF_NODE	240:44	240:44	14	h
LEAF_NODE	240:45	240:45	12	)
LEAF_NODE	240:46	240:46	10	;
LEAF_NODE	241:3	241:3	8	}
SELECTION	241:5	241:10	6	
KEYWORD	241:5	241:5	7	else
LEAF_NODE	241:5	241:5	8	else
STATEMENTS	241:10	244:3	7	
LEAF_NODE	241:10	241:10	8	{
STATEMENTS	242:4	242:4	8	
EXPR_STATEMENT	242:4	243:48	9	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) ) ;
EXPR	242:4	242:4	10	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) )
FUNCTION_CALL	242:4	243:47	11	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) )
CALLEE	242:4	242:4	12	TIFFSetField
LEAF_NODE	242:4	242:4	13	TIFFSetField
LEAF_NODE	242:16	242:16	12	(
ARGUMENT	242:17	242:17	12	out
FIELD	242:17	242:17	13	out
LEAF_NODE	242:17	242:17	14	out
LEAF_NODE	242:20	242:20	12	,
ARGUMENT	242:22	242:22	12	TIFFTAG_ROWSPERSTRIP
FIELD	242:22	242:22	13	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	242:22	242:22	14	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	242:42	242:42	12	,
ARGUMENT	243:8	243:8	12	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	243:8	243:46	13	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	243:8	243:8	14	TIFFDefaultStripSize
LEAF_NODE	243:8	243:8	15	TIFFDefaultStripSize
LEAF_NODE	243:28	243:28	14	(
ARGUMENT	243:29	243:29	14	out
FIELD	243:29	243:29	15	out
LEAF_NODE	243:29	243:29	16	out
LEAF_NODE	243:32	243:32	14	,
ARGUMENT	243:34	243:34	14	rowsperstrip
FIELD	243:34	243:34	15	rowsperstrip
LEAF_NODE	243:34	243:34	16	rowsperstrip
LEAF_NODE	243:46	243:46	14	)
LEAF_NODE	243:47	243:47	12	)
LEAF_NODE	243:48	243:48	10	;
LEAF_NODE	244:3	244:3	8	}
JUMP_STATEMENT	245:3	245:8	6	break DESTINATION ;
KEYWORD	245:3	245:3	7	break
LEAF_NODE	245:3	245:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	245:8	245:8	7	;
LABEL	246:2	246:8	6	case 8 :
LEAF_NODE	246:2	246:2	7	case
LEAF_NODE	246:7	246:7	7	8
LEAF_NODE	246:8	246:8	7	:
EXPR_STATEMENT	247:3	247:34	6	linebytes = multiply_ms ( spp , w ) ;
EXPR	247:3	247:3	7	linebytes = multiply_ms ( spp , w )
ASSIGN	247:3	247:15	8	linebytes = multiply_ms ( spp , w )
LVAL	247:3	247:3	9	linebytes
FIELD	247:3	247:3	10	linebytes
LEAF_NODE	247:3	247:3	11	linebytes
ASSIGN_OP	247:13	247:13	9	=
LEAF_NODE	247:13	247:13	10	=
RVAL	247:15	247:15	9	multiply_ms ( spp , w )
FUNCTION_CALL	247:15	247:33	10	multiply_ms ( spp , w )
CALLEE	247:15	247:15	11	multiply_ms
LEAF_NODE	247:15	247:15	12	multiply_ms
LEAF_NODE	247:26	247:26	11	(
ARGUMENT	247:27	247:27	11	spp
FIELD	247:27	247:27	12	spp
LEAF_NODE	247:27	247:27	13	spp
LEAF_NODE	247:30	247:30	11	,
ARGUMENT	247:32	247:32	11	w
FIELD	247:32	247:32	12	w
LEAF_NODE	247:32	247:32	13	w
LEAF_NODE	247:33	247:33	11	)
LEAF_NODE	247:34	247:34	7	;
EXPR_STATEMENT	248:3	249:47	6	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) ) ;
EXPR	248:3	248:3	7	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) )
FUNCTION_CALL	248:3	249:46	8	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , TIFFDefaultStripSize ( out , rowsperstrip ) )
CALLEE	248:3	248:3	9	TIFFSetField
LEAF_NODE	248:3	248:3	10	TIFFSetField
LEAF_NODE	248:15	248:15	9	(
ARGUMENT	248:16	248:16	9	out
FIELD	248:16	248:16	10	out
LEAF_NODE	248:16	248:16	11	out
LEAF_NODE	248:19	248:19	9	,
ARGUMENT	248:21	248:21	9	TIFFTAG_ROWSPERSTRIP
FIELD	248:21	248:21	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	248:21	248:21	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	248:41	248:41	9	,
ARGUMENT	249:7	249:7	9	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	249:7	249:45	10	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	249:7	249:7	11	TIFFDefaultStripSize
LEAF_NODE	249:7	249:7	12	TIFFDefaultStripSize
LEAF_NODE	249:27	249:27	11	(
ARGUMENT	249:28	249:28	11	out
FIELD	249:28	249:28	12	out
LEAF_NODE	249:28	249:28	13	out
LEAF_NODE	249:31	249:31	11	,
ARGUMENT	249:33	249:33	11	rowsperstrip
FIELD	249:33	249:33	12	rowsperstrip
LEAF_NODE	249:33	249:33	13	rowsperstrip
LEAF_NODE	249:45	249:45	11	)
LEAF_NODE	249:46	249:46	9	)
LEAF_NODE	249:47	249:47	7	;
JUMP_STATEMENT	250:3	250:8	6	break DESTINATION ;
KEYWORD	250:3	250:3	7	break
LEAF_NODE	250:3	250:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	250:8	250:8	7	;
LEAF_NODE	251:1	251:1	5	}
SELECTION	252:1	252:21	3	
KEYWORD	252:1	252:1	4	if
LEAF_NODE	252:1	252:1	5	if
LEAF_NODE	252:4	252:4	4	(
CONDITION	252:5	252:5	4	linebytes == 0
EXPR	252:5	252:18	5	linebytes == 0
FIELD	252:5	252:5	6	linebytes
LEAF_NODE	252:5	252:5	7	linebytes
EQ_OPERATOR	252:15	252:15	6	==
LEAF_NODE	252:15	252:15	7	==
FIELD	252:18	252:18	6	0
LEAF_NODE	252:18	252:18	7	0
LEAF_NODE	252:19	252:19	4	)
STATEMENTS	252:21	256:1	4	
LEAF_NODE	252:21	252:21	5	{
STATEMENTS	253:2	255:2	5	
EXPR_STATEMENT	253:2	253:57	6	fprintf ( stderr , "%s: scanline size overflow\n" , infile ) ;
EXPR	253:2	253:2	7	fprintf ( stderr , "%s: scanline size overflow\n" , infile )
FUNCTION_CALL	253:2	253:56	8	fprintf ( stderr , "%s: scanline size overflow\n" , infile )
CALLEE	253:2	253:2	9	fprintf
LEAF_NODE	253:2	253:2	10	fprintf
LEAF_NODE	253:9	253:9	9	(
ARGUMENT	253:10	253:10	9	stderr
FIELD	253:10	253:10	10	stderr
LEAF_NODE	253:10	253:10	11	stderr
LEAF_NODE	253:16	253:16	9	,
ARGUMENT	253:18	253:18	9	"%s: scanline size overflow\n"
FIELD	253:18	253:18	10	"%s: scanline size overflow\n"
LEAF_NODE	253:18	253:18	11	"%s: scanline size overflow\n"
LEAF_NODE	253:48	253:48	9	,
ARGUMENT	253:50	253:50	9	infile
FIELD	253:50	253:50	10	infile
LEAF_NODE	253:50	253:50	11	infile
LEAF_NODE	253:56	253:56	9	)
LEAF_NODE	253:57	253:57	7	;
EXPR_STATEMENT	254:2	254:23	6	( void ) TIFFClose ( out ) ;
EXPR	254:2	254:9	7	( void ) TIFFClose ( out )
LEAF_NODE	254:2	254:2	8	(
TYPE_NAME	254:3	254:3	8	void
LEAF_NODE	254:3	254:3	9	void
LEAF_NODE	254:7	254:7	8	)
FUNCTION_CALL	254:9	254:22	8	TIFFClose ( out )
CALLEE	254:9	254:9	9	TIFFClose
LEAF_NODE	254:9	254:9	10	TIFFClose
LEAF_NODE	254:18	254:18	9	(
ARGUMENT	254:19	254:19	9	out
FIELD	254:19	254:19	10	out
LEAF_NODE	254:19	254:19	11	out
LEAF_NODE	254:22	254:22	9	)
LEAF_NODE	254:23	254:23	7	;
EXPR_STATEMENT	255:2	255:10	6	exit ( - 2 ) ;
EXPR	255:2	255:2	7	exit ( - 2 )
FUNCTION_CALL	255:2	255:9	8	exit ( - 2 )
CALLEE	255:2	255:2	9	exit
LEAF_NODE	255:2	255:2	10	exit
LEAF_NODE	255:6	255:6	9	(
ARGUMENT	255:7	255:7	9	- 2
UNARY_EXPR	255:7	255:8	10	- 2
UNARY_OPERATOR	255:7	255:7	11	-
LEAF_NODE	255:7	255:7	12	-
FIELD	255:8	255:8	11	2
LEAF_NODE	255:8	255:8	12	2
LEAF_NODE	255:9	255:9	9	)
LEAF_NODE	255:10	255:10	7	;
LEAF_NODE	256:1	256:1	5	}
EXPR_STATEMENT	257:1	257:38	3	scanline_size = TIFFScanlineSize ( out ) ;
EXPR	257:1	257:1	4	scanline_size = TIFFScanlineSize ( out )
ASSIGN	257:1	257:17	5	scanline_size = TIFFScanlineSize ( out )
LVAL	257:1	257:1	6	scanline_size
FIELD	257:1	257:1	7	scanline_size
LEAF_NODE	257:1	257:1	8	scanline_size
ASSIGN_OP	257:15	257:15	6	=
LEAF_NODE	257:15	257:15	7	=
RVAL	257:17	257:17	6	TIFFScanlineSize ( out )
FUNCTION_CALL	257:17	257:37	7	TIFFScanlineSize ( out )
CALLEE	257:17	257:17	8	TIFFScanlineSize
LEAF_NODE	257:17	257:17	9	TIFFScanlineSize
LEAF_NODE	257:33	257:33	8	(
ARGUMENT	257:34	257:34	8	out
FIELD	257:34	257:34	9	out
LEAF_NODE	257:34	257:34	10	out
LEAF_NODE	257:37	257:37	8	)
LEAF_NODE	257:38	257:38	4	;
SELECTION	258:1	258:25	3	
KEYWORD	258:1	258:1	4	if
LEAF_NODE	258:1	258:1	5	if
LEAF_NODE	258:4	258:4	4	(
CONDITION	258:5	258:5	4	scanline_size == 0
EXPR	258:5	258:22	5	scanline_size == 0
FIELD	258:5	258:5	6	scanline_size
LEAF_NODE	258:5	258:5	7	scanline_size
EQ_OPERATOR	258:19	258:19	6	==
LEAF_NODE	258:19	258:19	7	==
FIELD	258:22	258:22	6	0
LEAF_NODE	258:22	258:22	7	0
LEAF_NODE	258:23	258:23	4	)
STATEMENTS	258:25	262:1	4	
LEAF_NODE	258:25	258:25	5	{
STATEMENTS	260:2	261:2	5	
EXPR_STATEMENT	260:2	260:23	6	( void ) TIFFClose ( out ) ;
EXPR	260:2	260:9	7	( void ) TIFFClose ( out )
LEAF_NODE	260:2	260:2	8	(
TYPE_NAME	260:3	260:3	8	void
LEAF_NODE	260:3	260:3	9	void
LEAF_NODE	260:7	260:7	8	)
FUNCTION_CALL	260:9	260:22	8	TIFFClose ( out )
CALLEE	260:9	260:9	9	TIFFClose
LEAF_NODE	260:9	260:9	10	TIFFClose
LEAF_NODE	260:18	260:18	9	(
ARGUMENT	260:19	260:19	9	out
FIELD	260:19	260:19	10	out
LEAF_NODE	260:19	260:19	11	out
LEAF_NODE	260:22	260:22	9	)
LEAF_NODE	260:23	260:23	7	;
EXPR_STATEMENT	261:2	261:10	6	exit ( - 2 ) ;
EXPR	261:2	261:2	7	exit ( - 2 )
FUNCTION_CALL	261:2	261:9	8	exit ( - 2 )
CALLEE	261:2	261:2	9	exit
LEAF_NODE	261:2	261:2	10	exit
LEAF_NODE	261:6	261:6	9	(
ARGUMENT	261:7	261:7	9	- 2
UNARY_EXPR	261:7	261:8	10	- 2
UNARY_OPERATOR	261:7	261:7	11	-
LEAF_NODE	261:7	261:7	12	-
FIELD	261:8	261:8	11	2
LEAF_NODE	261:8	261:8	12	2
LEAF_NODE	261:9	261:9	9	)
LEAF_NODE	261:10	261:10	7	;
LEAF_NODE	262:1	262:1	5	}
SELECTION	263:1	264:2	3	
KEYWORD	263:1	263:1	4	if
LEAF_NODE	263:1	263:1	5	if
LEAF_NODE	263:4	263:4	4	(
CONDITION	263:5	263:5	4	scanline_size < linebytes
EXPR	263:5	263:21	5	scanline_size < linebytes
FIELD	263:5	263:5	6	scanline_size
LEAF_NODE	263:5	263:5	7	scanline_size
REL_OPERATOR	263:19	263:19	6	<
LEAF_NODE	263:19	263:19	7	<
FIELD	263:21	263:21	6	linebytes
LEAF_NODE	263:21	263:21	7	linebytes
LEAF_NODE	263:30	263:30	4	)
STATEMENTS	264:2	264:2	4	
EXPR_STATEMENT	264:2	264:47	5	buf = ( unsigned char * ) _TIFFmalloc ( linebytes ) ;
EXPR	264:2	264:2	6	buf = ( unsigned char * ) _TIFFmalloc ( linebytes )
ASSIGN	264:2	264:8	7	buf = ( unsigned char * ) _TIFFmalloc ( linebytes )
LVAL	264:2	264:2	8	buf
FIELD	264:2	264:2	9	buf
LEAF_NODE	264:2	264:2	10	buf
ASSIGN_OP	264:6	264:6	8	=
LEAF_NODE	264:6	264:6	9	=
RVAL	264:8	264:25	8	( unsigned char * ) _TIFFmalloc ( linebytes )
LEAF_NODE	264:8	264:8	9	(
TYPE_NAME	264:9	264:18	9	unsigned char
LEAF_NODE	264:9	264:9	10	unsigned
LEAF_NODE	264:18	264:18	10	char
LEAF_NODE	264:23	264:23	9	*
LEAF_NODE	264:24	264:24	9	)
FUNCTION_CALL	264:25	264:46	9	_TIFFmalloc ( linebytes )
CALLEE	264:25	264:25	10	_TIFFmalloc
LEAF_NODE	264:25	264:25	11	_TIFFmalloc
LEAF_NODE	264:36	264:36	10	(
ARGUMENT	264:37	264:37	10	linebytes
FIELD	264:37	264:37	11	linebytes
LEAF_NODE	264:37	264:37	12	linebytes
LEAF_NODE	264:46	264:46	10	)
LEAF_NODE	264:47	264:47	6	;
SELECTION	265:1	266:2	3	
KEYWORD	265:1	265:1	4	else
LEAF_NODE	265:1	265:1	5	else
STATEMENTS	266:2	266:2	4	
EXPR_STATEMENT	266:2	266:51	5	buf = ( unsigned char * ) _TIFFmalloc ( scanline_size ) ;
EXPR	266:2	266:2	6	buf = ( unsigned char * ) _TIFFmalloc ( scanline_size )
ASSIGN	266:2	266:8	7	buf = ( unsigned char * ) _TIFFmalloc ( scanline_size )
LVAL	266:2	266:2	8	buf
FIELD	266:2	266:2	9	buf
LEAF_NODE	266:2	266:2	10	buf
ASSIGN_OP	266:6	266:6	8	=
LEAF_NODE	266:6	266:6	9	=
RVAL	266:8	266:25	8	( unsigned char * ) _TIFFmalloc ( scanline_size )
LEAF_NODE	266:8	266:8	9	(
TYPE_NAME	266:9	266:18	9	unsigned char
LEAF_NODE	266:9	266:9	10	unsigned
LEAF_NODE	266:18	266:18	10	char
LEAF_NODE	266:23	266:23	9	*
LEAF_NODE	266:24	266:24	9	)
FUNCTION_CALL	266:25	266:50	9	_TIFFmalloc ( scanline_size )
CALLEE	266:25	266:25	10	_TIFFmalloc
LEAF_NODE	266:25	266:25	11	_TIFFmalloc
LEAF_NODE	266:36	266:36	10	(
ARGUMENT	266:37	266:37	10	scanline_size
FIELD	266:37	266:37	11	scanline_size
LEAF_NODE	266:37	266:37	12	scanline_size
LEAF_NODE	266:50	266:50	10	)
LEAF_NODE	266:51	266:51	6	;
SELECTION	267:1	267:18	3	
KEYWORD	267:1	267:1	4	if
LEAF_NODE	267:1	267:1	5	if
LEAF_NODE	267:4	267:4	4	(
CONDITION	267:5	267:5	4	buf == NULL
EXPR	267:5	267:12	5	buf == NULL
FIELD	267:5	267:5	6	buf
LEAF_NODE	267:5	267:5	7	buf
EQ_OPERATOR	267:9	267:9	6	==
LEAF_NODE	267:9	267:9	7	==
FIELD	267:12	267:12	6	NULL
LEAF_NODE	267:12	267:12	7	NULL
LEAF_NODE	267:16	267:16	4	)
STATEMENTS	267:18	271:1	4	
LEAF_NODE	267:18	267:18	5	{
STATEMENTS	268:2	270:2	5	
EXPR_STATEMENT	268:2	268:52	6	fprintf ( stderr , "%s: Not enough memory\n" , infile ) ;
EXPR	268:2	268:2	7	fprintf ( stderr , "%s: Not enough memory\n" , infile )
FUNCTION_CALL	268:2	268:51	8	fprintf ( stderr , "%s: Not enough memory\n" , infile )
CALLEE	268:2	268:2	9	fprintf
LEAF_NODE	268:2	268:2	10	fprintf
LEAF_NODE	268:9	268:9	9	(
ARGUMENT	268:10	268:10	9	stderr
FIELD	268:10	268:10	10	stderr
LEAF_NODE	268:10	268:10	11	stderr
LEAF_NODE	268:16	268:16	9	,
ARGUMENT	268:18	268:18	9	"%s: Not enough memory\n"
FIELD	268:18	268:18	10	"%s: Not enough memory\n"
LEAF_NODE	268:18	268:18	11	"%s: Not enough memory\n"
LEAF_NODE	268:43	268:43	9	,
ARGUMENT	268:45	268:45	9	infile
FIELD	268:45	268:45	10	infile
LEAF_NODE	268:45	268:45	11	infile
LEAF_NODE	268:51	268:51	9	)
LEAF_NODE	268:52	268:52	7	;
EXPR_STATEMENT	269:2	269:23	6	( void ) TIFFClose ( out ) ;
EXPR	269:2	269:9	7	( void ) TIFFClose ( out )
LEAF_NODE	269:2	269:2	8	(
TYPE_NAME	269:3	269:3	8	void
LEAF_NODE	269:3	269:3	9	void
LEAF_NODE	269:7	269:7	8	)
FUNCTION_CALL	269:9	269:22	8	TIFFClose ( out )
CALLEE	269:9	269:9	9	TIFFClose
LEAF_NODE	269:9	269:9	10	TIFFClose
LEAF_NODE	269:18	269:18	9	(
ARGUMENT	269:19	269:19	9	out
FIELD	269:19	269:19	10	out
LEAF_NODE	269:19	269:19	11	out
LEAF_NODE	269:22	269:22	9	)
LEAF_NODE	269:23	269:23	7	;
EXPR_STATEMENT	270:2	270:10	6	exit ( - 2 ) ;
EXPR	270:2	270:2	7	exit ( - 2 )
FUNCTION_CALL	270:2	270:9	8	exit ( - 2 )
CALLEE	270:2	270:2	9	exit
LEAF_NODE	270:2	270:2	10	exit
LEAF_NODE	270:6	270:6	9	(
ARGUMENT	270:7	270:7	9	- 2
UNARY_EXPR	270:7	270:8	10	- 2
UNARY_OPERATOR	270:7	270:7	11	-
LEAF_NODE	270:7	270:7	12	-
FIELD	270:8	270:8	11	2
LEAF_NODE	270:8	270:8	12	2
LEAF_NODE	270:9	270:9	9	)
LEAF_NODE	270:10	270:10	7	;
LEAF_NODE	271:1	271:1	5	}
SELECTION	272:1	272:21	3	
KEYWORD	272:1	272:1	4	if
LEAF_NODE	272:1	272:1	5	if
LEAF_NODE	272:4	272:4	4	(
CONDITION	272:5	272:5	4	resolution > 0
EXPR	272:5	272:18	5	resolution > 0
FIELD	272:5	272:5	6	resolution
LEAF_NODE	272:5	272:5	7	resolution
REL_OPERATOR	272:16	272:16	6	>
LEAF_NODE	272:16	272:16	7	>
FIELD	272:18	272:18	6	0
LEAF_NODE	272:18	272:18	7	0
LEAF_NODE	272:19	272:19	4	)
STATEMENTS	272:21	276:1	4	
LEAF_NODE	272:21	272:21	5	{
STATEMENTS	273:2	275:2	5	
EXPR_STATEMENT	273:2	273:52	6	TIFFSetField ( out , TIFFTAG_XRESOLUTION , resolution ) ;
EXPR	273:2	273:2	7	TIFFSetField ( out , TIFFTAG_XRESOLUTION , resolution )
FUNCTION_CALL	273:2	273:51	8	TIFFSetField ( out , TIFFTAG_XRESOLUTION , resolution )
CALLEE	273:2	273:2	9	TIFFSetField
LEAF_NODE	273:2	273:2	10	TIFFSetField
LEAF_NODE	273:14	273:14	9	(
ARGUMENT	273:15	273:15	9	out
FIELD	273:15	273:15	10	out
LEAF_NODE	273:15	273:15	11	out
LEAF_NODE	273:18	273:18	9	,
ARGUMENT	273:20	273:20	9	TIFFTAG_XRESOLUTION
FIELD	273:20	273:20	10	TIFFTAG_XRESOLUTION
LEAF_NODE	273:20	273:20	11	TIFFTAG_XRESOLUTION
LEAF_NODE	273:39	273:39	9	,
ARGUMENT	273:41	273:41	9	resolution
FIELD	273:41	273:41	10	resolution
LEAF_NODE	273:41	273:41	11	resolution
LEAF_NODE	273:51	273:51	9	)
LEAF_NODE	273:52	273:52	7	;
EXPR_STATEMENT	274:2	274:52	6	TIFFSetField ( out , TIFFTAG_YRESOLUTION , resolution ) ;
EXPR	274:2	274:2	7	TIFFSetField ( out , TIFFTAG_YRESOLUTION , resolution )
FUNCTION_CALL	274:2	274:51	8	TIFFSetField ( out , TIFFTAG_YRESOLUTION , resolution )
CALLEE	274:2	274:2	9	TIFFSetField
LEAF_NODE	274:2	274:2	10	TIFFSetField
LEAF_NODE	274:14	274:14	9	(
ARGUMENT	274:15	274:15	9	out
FIELD	274:15	274:15	10	out
LEAF_NODE	274:15	274:15	11	out
LEAF_NODE	274:18	274:18	9	,
ARGUMENT	274:20	274:20	9	TIFFTAG_YRESOLUTION
FIELD	274:20	274:20	10	TIFFTAG_YRESOLUTION
LEAF_NODE	274:20	274:20	11	TIFFTAG_YRESOLUTION
LEAF_NODE	274:39	274:39	9	,
ARGUMENT	274:41	274:41	9	resolution
FIELD	274:41	274:41	10	resolution
LEAF_NODE	274:41	274:41	11	resolution
LEAF_NODE	274:51	274:51	9	)
LEAF_NODE	274:52	274:52	7	;
EXPR_STATEMENT	275:2	275:57	6	TIFFSetField ( out , TIFFTAG_RESOLUTIONUNIT , RESUNIT_INCH ) ;
EXPR	275:2	275:2	7	TIFFSetField ( out , TIFFTAG_RESOLUTIONUNIT , RESUNIT_INCH )
FUNCTION_CALL	275:2	275:56	8	TIFFSetField ( out , TIFFTAG_RESOLUTIONUNIT , RESUNIT_INCH )
CALLEE	275:2	275:2	9	TIFFSetField
LEAF_NODE	275:2	275:2	10	TIFFSetField
LEAF_NODE	275:14	275:14	9	(
ARGUMENT	275:15	275:15	9	out
FIELD	275:15	275:15	10	out
LEAF_NODE	275:15	275:15	11	out
LEAF_NODE	275:18	275:18	9	,
ARGUMENT	275:20	275:20	9	TIFFTAG_RESOLUTIONUNIT
FIELD	275:20	275:20	10	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	275:20	275:20	11	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	275:42	275:42	9	,
ARGUMENT	275:44	275:44	9	RESUNIT_INCH
FIELD	275:44	275:44	10	RESUNIT_INCH
LEAF_NODE	275:44	275:44	11	RESUNIT_INCH
LEAF_NODE	275:56	275:56	9	)
LEAF_NODE	275:57	275:57	7	;
LEAF_NODE	276:1	276:1	5	}
ITERATION	277:1	277:31	3	
KEYWORD	277:1	277:1	4	for
LEAF_NODE	277:1	277:1	5	for
LEAF_NODE	277:5	277:5	4	(
FOR_INIT	277:6	277:13	4	row = 0 ;
EXPR	277:6	277:6	5	row = 0
ASSIGN	277:6	277:12	6	row = 0
LVAL	277:6	277:6	7	row
FIELD	277:6	277:6	8	row
LEAF_NODE	277:6	277:6	9	row
ASSIGN_OP	277:10	277:10	7	=
LEAF_NODE	277:10	277:10	8	=
RVAL	277:12	277:12	7	0
FIELD	277:12	277:12	8	0
LEAF_NODE	277:12	277:12	9	0
LEAF_NODE	277:13	277:13	5	;
CONDITION	277:15	277:15	4	row < h
EXPR	277:15	277:21	5	row < h
FIELD	277:15	277:15	6	row
LEAF_NODE	277:15	277:15	7	row
REL_OPERATOR	277:19	277:19	6	<
LEAF_NODE	277:19	277:19	7	<
FIELD	277:21	277:21	6	h
LEAF_NODE	277:21	277:21	7	h
LEAF_NODE	277:22	277:22	4	;
FOR_EXPR	277:24	277:24	4	row ++
EXPR	277:24	277:24	5	row ++
FIELD	277:24	277:27	6	row ++
LEAF_NODE	277:24	277:24	7	row
LEAF_NODE	277:27	277:27	7	++
LEAF_NODE	277:29	277:29	4	)
STATEMENTS	277:31	285:1	4	
LEAF_NODE	277:31	277:31	5	{
STATEMENTS	278:2	283:2	5	
SELECTION	278:2	278:41	6	
KEYWORD	278:2	278:2	7	if
LEAF_NODE	278:2	278:2	8	if
LEAF_NODE	278:5	278:5	7	(
CONDITION	278:6	278:6	7	fread ( buf , linebytes , 1 , in ) != 1
EXPR	278:6	278:38	8	fread ( buf , linebytes , 1 , in ) != 1
FUNCTION_CALL	278:6	278:33	9	fread ( buf , linebytes , 1 , in )
CALLEE	278:6	278:6	10	fread
LEAF_NODE	278:6	278:6	11	fread
LEAF_NODE	278:11	278:11	10	(
ARGUMENT	278:12	278:12	10	buf
FIELD	278:12	278:12	11	buf
LEAF_NODE	278:12	278:12	12	buf
LEAF_NODE	278:15	278:15	10	,
ARGUMENT	278:17	278:17	10	linebytes
FIELD	278:17	278:17	11	linebytes
LEAF_NODE	278:17	278:17	12	linebytes
LEAF_NODE	278:26	278:26	10	,
ARGUMENT	278:28	278:28	10	1
FIELD	278:28	278:28	11	1
LEAF_NODE	278:28	278:28	12	1
LEAF_NODE	278:29	278:29	10	,
ARGUMENT	278:31	278:31	10	in
FIELD	278:31	278:31	11	in
LEAF_NODE	278:31	278:31	12	in
LEAF_NODE	278:33	278:33	10	)
EQ_OPERATOR	278:35	278:35	9	!=
LEAF_NODE	278:35	278:35	10	!=
FIELD	278:38	278:38	9	1
LEAF_NODE	278:38	278:38	10	1
LEAF_NODE	278:39	278:39	7	)
STATEMENTS	278:41	282:2	7	
LEAF_NODE	278:41	278:41	8	{
STATEMENTS	279:3	281:3	8	
EXPR_STATEMENT	279:3	280:35	9	fprintf ( stderr , "%s: scanline %lu: Read error.\n" , infile , ( unsigned long ) row ) ;
EXPR	279:3	279:3	10	fprintf ( stderr , "%s: scanline %lu: Read error.\n" , infile , ( unsigned long ) row )
FUNCTION_CALL	279:3	280:34	11	fprintf ( stderr , "%s: scanline %lu: Read error.\n" , infile , ( unsigned long ) row )
CALLEE	279:3	279:3	12	fprintf
LEAF_NODE	279:3	279:3	13	fprintf
LEAF_NODE	279:10	279:10	12	(
ARGUMENT	279:11	279:11	12	stderr
FIELD	279:11	279:11	13	stderr
LEAF_NODE	279:11	279:11	14	stderr
LEAF_NODE	279:17	279:17	12	,
ARGUMENT	279:19	279:19	12	"%s: scanline %lu: Read error.\n"
FIELD	279:19	279:19	13	"%s: scanline %lu: Read error.\n"
LEAF_NODE	279:19	279:19	14	"%s: scanline %lu: Read error.\n"
LEAF_NODE	279:52	279:52	12	,
ARGUMENT	280:7	280:7	12	infile
FIELD	280:7	280:7	13	infile
LEAF_NODE	280:7	280:7	14	infile
LEAF_NODE	280:13	280:13	12	,
ARGUMENT	280:15	280:31	12	( unsigned long ) row
LEAF_NODE	280:15	280:15	13	(
TYPE_NAME	280:16	280:25	13	unsigned long
LEAF_NODE	280:16	280:16	14	unsigned
LEAF_NODE	280:25	280:25	14	long
LEAF_NODE	280:29	280:29	13	)
FIELD	280:31	280:31	13	row
LEAF_NODE	280:31	280:31	14	row
LEAF_NODE	280:34	280:34	12	)
LEAF_NODE	280:35	280:35	10	;
JUMP_STATEMENT	281:3	281:8	9	break DESTINATION ;
KEYWORD	281:3	281:3	10	break
LEAF_NODE	281:3	281:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	281:8	281:8	10	;
LEAF_NODE	282:2	282:2	8	}
SELECTION	283:2	284:3	6	
KEYWORD	283:2	283:2	7	if
LEAF_NODE	283:2	283:2	8	if
LEAF_NODE	283:5	283:5	7	(
CONDITION	283:6	283:6	7	TIFFWriteScanline ( out , buf , row , 0 ) < 0
EXPR	283:6	283:44	8	TIFFWriteScanline ( out , buf , row , 0 ) < 0
FUNCTION_CALL	283:6	283:40	9	TIFFWriteScanline ( out , buf , row , 0 )
CALLEE	283:6	283:6	10	TIFFWriteScanline
LEAF_NODE	283:6	283:6	11	TIFFWriteScanline
LEAF_NODE	283:23	283:23	10	(
ARGUMENT	283:24	283:24	10	out
FIELD	283:24	283:24	11	out
LEAF_NODE	283:24	283:24	12	out
LEAF_NODE	283:27	283:27	10	,
ARGUMENT	283:29	283:29	10	buf
FIELD	283:29	283:29	11	buf
LEAF_NODE	283:29	283:29	12	buf
LEAF_NODE	283:32	283:32	10	,
ARGUMENT	283:34	283:34	10	row
FIELD	283:34	283:34	11	row
LEAF_NODE	283:34	283:34	12	row
LEAF_NODE	283:37	283:37	10	,
ARGUMENT	283:39	283:39	10	0
FIELD	283:39	283:39	11	0
LEAF_NODE	283:39	283:39	12	0
LEAF_NODE	283:40	283:40	10	)
REL_OPERATOR	283:42	283:42	9	<
LEAF_NODE	283:42	283:42	10	<
FIELD	283:44	283:44	9	0
LEAF_NODE	283:44	283:44	10	0
LEAF_NODE	283:45	283:45	7	)
STATEMENTS	284:3	284:3	7	
JUMP_STATEMENT	284:3	284:8	8	break DESTINATION ;
KEYWORD	284:3	284:3	9	break
LEAF_NODE	284:3	284:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	284:8	284:8	9	;
LEAF_NODE	285:1	285:1	5	}
SELECTION	286:1	287:2	3	
KEYWORD	286:1	286:1	4	if
LEAF_NODE	286:1	286:1	5	if
LEAF_NODE	286:4	286:4	4	(
CONDITION	286:5	286:5	4	in != stdin
EXPR	286:5	286:11	5	in != stdin
FIELD	286:5	286:5	6	in
LEAF_NODE	286:5	286:5	7	in
EQ_OPERATOR	286:8	286:8	6	!=
LEAF_NODE	286:8	286:8	7	!=
FIELD	286:11	286:11	6	stdin
LEAF_NODE	286:11	286:11	7	stdin
LEAF_NODE	286:16	286:16	4	)
STATEMENTS	287:2	287:2	4	
EXPR_STATEMENT	287:2	287:12	5	fclose ( in ) ;
EXPR	287:2	287:2	6	fclose ( in )
FUNCTION_CALL	287:2	287:11	7	fclose ( in )
CALLEE	287:2	287:2	8	fclose
LEAF_NODE	287:2	287:2	9	fclose
LEAF_NODE	287:8	287:8	8	(
ARGUMENT	287:9	287:9	8	in
FIELD	287:9	287:9	9	in
LEAF_NODE	287:9	287:9	10	in
LEAF_NODE	287:11	287:11	8	)
LEAF_NODE	287:12	287:12	6	;
EXPR_STATEMENT	288:1	288:22	3	( void ) TIFFClose ( out ) ;
EXPR	288:1	288:8	4	( void ) TIFFClose ( out )
LEAF_NODE	288:1	288:1	5	(
TYPE_NAME	288:2	288:2	5	void
LEAF_NODE	288:2	288:2	6	void
LEAF_NODE	288:6	288:6	5	)
FUNCTION_CALL	288:8	288:21	5	TIFFClose ( out )
CALLEE	288:8	288:8	6	TIFFClose
LEAF_NODE	288:8	288:8	7	TIFFClose
LEAF_NODE	288:17	288:17	6	(
ARGUMENT	288:18	288:18	6	out
FIELD	288:18	288:18	7	out
LEAF_NODE	288:18	288:18	8	out
LEAF_NODE	288:21	288:21	6	)
LEAF_NODE	288:22	288:22	4	;
SELECTION	289:1	290:2	3	
KEYWORD	289:1	289:1	4	if
LEAF_NODE	289:1	289:1	5	if
LEAF_NODE	289:4	289:4	4	(
CONDITION	289:5	289:5	4	buf
EXPR	289:5	289:5	5	buf
FIELD	289:5	289:5	6	buf
LEAF_NODE	289:5	289:5	7	buf
LEAF_NODE	289:8	289:8	4	)
STATEMENTS	290:2	290:2	4	
EXPR_STATEMENT	290:2	290:16	5	_TIFFfree ( buf ) ;
EXPR	290:2	290:2	6	_TIFFfree ( buf )
FUNCTION_CALL	290:2	290:15	7	_TIFFfree ( buf )
CALLEE	290:2	290:2	8	_TIFFfree
LEAF_NODE	290:2	290:2	9	_TIFFfree
LEAF_NODE	290:11	290:11	8	(
ARGUMENT	290:12	290:12	8	buf
FIELD	290:12	290:12	9	buf
LEAF_NODE	290:12	290:12	10	buf
LEAF_NODE	290:15	290:15	8	)
LEAF_NODE	290:16	290:16	6	;
JUMP_STATEMENT	291:1	291:11	3	return ( 0 ) ;
KEYWORD	291:1	291:1	4	return
LEAF_NODE	291:1	291:1	5	return
DESTINATION	291:8	291:8	4	( 0 )
EXPR	291:8	291:10	5	( 0 )
LEAF_NODE	291:8	291:8	6	(
FIELD	291:9	291:9	6	0
LEAF_NODE	291:9	291:9	7	0
LEAF_NODE	291:10	291:10	6	)
LEAF_NODE	291:11	291:11	4	;
LEAF_NODE	292:0	292:0	2	}
FUNCTION_DEF	294:0	311:0	1	
RETURN_TYPE	294:0	294:7	2	static void
LEAF_NODE	294:0	294:0	3	static
TYPE_NAME	294:7	294:7	3	void
LEAF_NODE	294:7	294:7	4	void
FUNCTION_NAME	295:0	295:0	2	processG3Options
LEAF_NODE	295:0	295:0	3	processG3Options
PARAMETER_LIST	295:16	295:25	2	( char * cp )
LEAF_NODE	295:16	295:16	3	(
PARAMETER_DECL	295:17	295:23	3	char * cp
TYPE	295:17	295:21	4	char *
TYPE_NAME	295:17	295:17	5	char
LEAF_NODE	295:17	295:17	6	char
POINTER	295:21	295:21	5	*
LEAF_NODE	295:21	295:21	6	*
NAME	295:23	295:23	4	cp
LEAF_NODE	295:23	295:23	5	cp
LEAF_NODE	295:25	295:25	3	)
LEAF_NODE	296:0	296:0	2	{
STATEMENTS	297:1	298:8	2	
EXPR_STATEMENT	297:1	297:11	3	g3opts = 0 ;
EXPR	297:1	297:1	4	g3opts = 0
ASSIGN	297:1	297:10	5	g3opts = 0
LVAL	297:1	297:1	6	g3opts
FIELD	297:1	297:1	7	g3opts
LEAF_NODE	297:1	297:1	8	g3opts
ASSIGN_OP	297:8	297:8	6	=
LEAF_NODE	297:8	297:8	7	=
RVAL	297:10	297:10	6	0
FIELD	297:10	297:10	7	0
LEAF_NODE	297:10	297:10	8	0
LEAF_NODE	297:11	297:11	4	;
SELECTION	298:8	298:37	3	
KEYWORD	298:8	298:8	4	if
LEAF_NODE	298:8	298:8	5	if
LEAF_NODE	298:10	298:10	4	(
CONDITION	298:12	298:12	4	( cp = strchr ( cp , ':' ) )
EXPR	298:12	298:33	5	( cp = strchr ( cp , ':' ) )
LEAF_NODE	298:12	298:12	6	(
ASSIGN	298:13	298:18	6	cp = strchr ( cp , ':' )
LVAL	298:13	298:13	7	cp
FIELD	298:13	298:13	8	cp
LEAF_NODE	298:13	298:13	9	cp
ASSIGN_OP	298:16	298:16	7	=
LEAF_NODE	298:16	298:16	8	=
RVAL	298:18	298:18	7	strchr ( cp , ':' )
FUNCTION_CALL	298:18	298:32	8	strchr ( cp , ':' )
CALLEE	298:18	298:18	9	strchr
LEAF_NODE	298:18	298:18	10	strchr
LEAF_NODE	298:24	298:24	9	(
ARGUMENT	298:25	298:25	9	cp
FIELD	298:25	298:25	10	cp
LEAF_NODE	298:25	298:25	11	cp
LEAF_NODE	298:27	298:27	9	,
ARGUMENT	298:29	298:29	9	':'
FIELD	298:29	298:29	10	':'
LEAF_NODE	298:29	298:29	11	':'
LEAF_NODE	298:32	298:32	9	)
LEAF_NODE	298:33	298:33	6	)
LEAF_NODE	298:35	298:35	4	)
STATEMENTS	298:37	310:8	4	
LEAF_NODE	298:37	298:37	5	{
STATEMENTS	299:16	309:49	5	
ITERATION	299:16	299:19	6	
KEYWORD	299:16	299:16	7	do
LEAF_NODE	299:16	299:16	8	do
LEAF_NODE	309:23	309:23	7	(
CONDITION	309:25	309:25	7	( cp = strchr ( cp , ':' ) )
EXPR	309:25	309:46	8	( cp = strchr ( cp , ':' ) )
LEAF_NODE	309:25	309:25	9	(
ASSIGN	309:26	309:31	9	cp = strchr ( cp , ':' )
LVAL	309:26	309:26	10	cp
FIELD	309:26	309:26	11	cp
LEAF_NODE	309:26	309:26	12	cp
ASSIGN_OP	309:29	309:29	10	=
LEAF_NODE	309:29	309:29	11	=
RVAL	309:31	309:31	10	strchr ( cp , ':' )
FUNCTION_CALL	309:31	309:45	11	strchr ( cp , ':' )
CALLEE	309:31	309:31	12	strchr
LEAF_NODE	309:31	309:31	13	strchr
LEAF_NODE	309:37	309:37	12	(
ARGUMENT	309:38	309:38	12	cp
FIELD	309:38	309:38	13	cp
LEAF_NODE	309:38	309:38	14	cp
LEAF_NODE	309:40	309:40	12	,
ARGUMENT	309:42	309:42	12	':'
FIELD	309:42	309:42	13	':'
LEAF_NODE	309:42	309:42	14	':'
LEAF_NODE	309:45	309:45	12	)
LEAF_NODE	309:46	309:46	9	)
LEAF_NODE	309:48	309:48	7	)
STATEMENTS	299:19	309:16	7	
LEAF_NODE	299:19	299:19	8	{
STATEMENTS	300:24	307:24	8	
EXPR_STATEMENT	300:24	300:28	9	cp ++ ;
EXPR	300:24	300:24	10	cp ++
FIELD	300:24	300:26	11	cp ++
LEAF_NODE	300:24	300:24	12	cp
LEAF_NODE	300:26	300:26	12	++
LEAF_NODE	300:28	300:28	10	;
SELECTION	301:24	302:32	9	
KEYWORD	301:24	301:24	10	if
LEAF_NODE	301:24	301:24	11	if
LEAF_NODE	301:27	301:27	10	(
CONDITION	301:28	301:28	10	strneq ( cp , "1d" , 2 )
EXPR	301:28	301:28	11	strneq ( cp , "1d" , 2 )
FUNCTION_CALL	301:28	301:46	12	strneq ( cp , "1d" , 2 )
CALLEE	301:28	301:28	13	strneq
LEAF_NODE	301:28	301:28	14	strneq
LEAF_NODE	301:34	301:34	13	(
ARGUMENT	301:35	301:35	13	cp
FIELD	301:35	301:35	14	cp
LEAF_NODE	301:35	301:35	15	cp
LEAF_NODE	301:37	301:37	13	,
ARGUMENT	301:39	301:39	13	"1d"
FIELD	301:39	301:39	14	"1d"
LEAF_NODE	301:39	301:39	15	"1d"
LEAF_NODE	301:43	301:43	13	,
ARGUMENT	301:45	301:45	13	2
FIELD	301:45	301:45	14	2
LEAF_NODE	301:45	301:45	15	2
LEAF_NODE	301:46	301:46	13	)
LEAF_NODE	301:47	301:47	10	)
STATEMENTS	302:32	302:32	10	
EXPR_STATEMENT	302:32	302:63	11	g3opts &= ~GROUP3OPT_2DENCODING ;
EXPR	302:32	302:32	12	g3opts &= ~GROUP3OPT_2DENCODING
ASSIGN	302:32	302:42	13	g3opts &= ~GROUP3OPT_2DENCODING
LVAL	302:32	302:32	14	g3opts
FIELD	302:32	302:32	15	g3opts
LEAF_NODE	302:32	302:32	16	g3opts
ASSIGN_OP	302:39	302:39	14	&=
LEAF_NODE	302:39	302:39	15	&=
RVAL	302:42	302:42	14	~GROUP3OPT_2DENCODING
FIELD	302:42	302:42	15	~GROUP3OPT_2DENCODING
LEAF_NODE	302:42	302:42	16	~GROUP3OPT_2DENCODING
LEAF_NODE	302:63	302:63	12	;
SELECTION	303:24	303:29	9	
KEYWORD	303:24	303:24	10	else
LEAF_NODE	303:24	303:24	11	else
STATEMENTS	303:29	303:29	10	
SELECTION	303:29	304:32	11	
KEYWORD	303:29	303:29	12	if
LEAF_NODE	303:29	303:29	13	if
LEAF_NODE	303:32	303:32	12	(
CONDITION	303:33	303:33	12	strneq ( cp , "2d" , 2 )
EXPR	303:33	303:33	13	strneq ( cp , "2d" , 2 )
FUNCTION_CALL	303:33	303:51	14	strneq ( cp , "2d" , 2 )
CALLEE	303:33	303:33	15	strneq
LEAF_NODE	303:33	303:33	16	strneq
LEAF_NODE	303:39	303:39	15	(
ARGUMENT	303:40	303:40	15	cp
FIELD	303:40	303:40	16	cp
LEAF_NODE	303:40	303:40	17	cp
LEAF_NODE	303:42	303:42	15	,
ARGUMENT	303:44	303:44	15	"2d"
FIELD	303:44	303:44	16	"2d"
LEAF_NODE	303:44	303:44	17	"2d"
LEAF_NODE	303:48	303:48	15	,
ARGUMENT	303:50	303:50	15	2
FIELD	303:50	303:50	16	2
LEAF_NODE	303:50	303:50	17	2
LEAF_NODE	303:51	303:51	15	)
LEAF_NODE	303:52	303:52	12	)
STATEMENTS	304:32	304:32	12	
EXPR_STATEMENT	304:32	304:62	13	g3opts |= GROUP3OPT_2DENCODING ;
EXPR	304:32	304:32	14	g3opts |= GROUP3OPT_2DENCODING
ASSIGN	304:32	304:42	15	g3opts |= GROUP3OPT_2DENCODING
LVAL	304:32	304:32	16	g3opts
FIELD	304:32	304:32	17	g3opts
LEAF_NODE	304:32	304:32	18	g3opts
ASSIGN_OP	304:39	304:39	16	|=
LEAF_NODE	304:39	304:39	17	|=
RVAL	304:42	304:42	16	GROUP3OPT_2DENCODING
FIELD	304:42	304:42	17	GROUP3OPT_2DENCODING
LEAF_NODE	304:42	304:42	18	GROUP3OPT_2DENCODING
LEAF_NODE	304:62	304:62	14	;
SELECTION	305:24	305:29	9	
KEYWORD	305:24	305:24	10	else
LEAF_NODE	305:24	305:24	11	else
STATEMENTS	305:29	305:29	10	
SELECTION	305:29	306:32	11	
KEYWORD	305:29	305:29	12	if
LEAF_NODE	305:29	305:29	13	if
LEAF_NODE	305:32	305:32	12	(
CONDITION	305:33	305:33	12	strneq ( cp , "fill" , 4 )
EXPR	305:33	305:33	13	strneq ( cp , "fill" , 4 )
FUNCTION_CALL	305:33	305:53	14	strneq ( cp , "fill" , 4 )
CALLEE	305:33	305:33	15	strneq
LEAF_NODE	305:33	305:33	16	strneq
LEAF_NODE	305:39	305:39	15	(
ARGUMENT	305:40	305:40	15	cp
FIELD	305:40	305:40	16	cp
LEAF_NODE	305:40	305:40	17	cp
LEAF_NODE	305:42	305:42	15	,
ARGUMENT	305:44	305:44	15	"fill"
FIELD	305:44	305:44	16	"fill"
LEAF_NODE	305:44	305:44	17	"fill"
LEAF_NODE	305:50	305:50	15	,
ARGUMENT	305:52	305:52	15	4
FIELD	305:52	305:52	16	4
LEAF_NODE	305:52	305:52	17	4
LEAF_NODE	305:53	305:53	15	)
LEAF_NODE	305:54	305:54	12	)
STATEMENTS	306:32	306:32	12	
EXPR_STATEMENT	306:32	306:60	13	g3opts |= GROUP3OPT_FILLBITS ;
EXPR	306:32	306:32	14	g3opts |= GROUP3OPT_FILLBITS
ASSIGN	306:32	306:42	15	g3opts |= GROUP3OPT_FILLBITS
LVAL	306:32	306:32	16	g3opts
FIELD	306:32	306:32	17	g3opts
LEAF_NODE	306:32	306:32	18	g3opts
ASSIGN_OP	306:39	306:39	16	|=
LEAF_NODE	306:39	306:39	17	|=
RVAL	306:42	306:42	16	GROUP3OPT_FILLBITS
FIELD	306:42	306:42	17	GROUP3OPT_FILLBITS
LEAF_NODE	306:42	306:42	18	GROUP3OPT_FILLBITS
LEAF_NODE	306:60	306:60	14	;
SELECTION	307:24	308:32	9	
KEYWORD	307:24	307:24	10	else
LEAF_NODE	307:24	307:24	11	else
STATEMENTS	308:32	308:32	10	
EXPR_STATEMENT	308:32	308:39	11	usage ( ) ;
EXPR	308:32	308:32	12	usage ( )
FUNCTION_CALL	308:32	308:38	13	usage ( )
CALLEE	308:32	308:32	14	usage
LEAF_NODE	308:32	308:32	15	usage
LEAF_NODE	308:37	308:37	14	(
LEAF_NODE	308:38	308:38	14	)
LEAF_NODE	308:39	308:39	12	;
LEAF_NODE	309:16	309:16	8	}
LEAF_NODE	309:49	309:49	6	;
LEAF_NODE	310:8	310:8	5	}
LEAF_NODE	311:0	311:0	2	}
FUNCTION_DEF	313:0	353:0	1	
RETURN_TYPE	313:0	313:7	2	static int
LEAF_NODE	313:0	313:0	3	static
TYPE_NAME	313:7	313:7	3	int
LEAF_NODE	313:7	313:7	4	int
FUNCTION_NAME	314:0	314:0	2	processCompressOptions
LEAF_NODE	314:0	314:0	3	processCompressOptions
PARAMETER_LIST	314:22	314:32	2	( char * opt )
LEAF_NODE	314:22	314:22	3	(
PARAMETER_DECL	314:23	314:29	3	char * opt
TYPE	314:23	314:27	4	char *
TYPE_NAME	314:23	314:23	5	char
LEAF_NODE	314:23	314:23	6	char
POINTER	314:27	314:27	5	*
LEAF_NODE	314:27	314:27	6	*
NAME	314:29	314:29	4	opt
LEAF_NODE	314:29	314:29	5	opt
LEAF_NODE	314:32	314:32	3	)
LEAF_NODE	315:0	315:0	2	{
STATEMENTS	316:1	352:1	2	
SELECTION	316:1	317:2	3	
KEYWORD	316:1	316:1	4	if
LEAF_NODE	316:1	316:1	5	if
LEAF_NODE	316:4	316:4	4	(
CONDITION	316:5	316:5	4	streq ( opt , "none" )
EXPR	316:5	316:5	5	streq ( opt , "none" )
FUNCTION_CALL	316:5	316:22	6	streq ( opt , "none" )
CALLEE	316:5	316:5	7	streq
LEAF_NODE	316:5	316:5	8	streq
LEAF_NODE	316:10	316:10	7	(
ARGUMENT	316:11	316:11	7	opt
FIELD	316:11	316:11	8	opt
LEAF_NODE	316:11	316:11	9	opt
LEAF_NODE	316:14	316:14	7	,
ARGUMENT	316:16	316:16	7	"none"
FIELD	316:16	316:16	8	"none"
LEAF_NODE	316:16	316:16	9	"none"
LEAF_NODE	316:22	316:22	7	)
LEAF_NODE	316:23	316:23	4	)
STATEMENTS	317:2	317:2	4	
EXPR_STATEMENT	317:2	317:32	5	compression = COMPRESSION_NONE ;
EXPR	317:2	317:2	6	compression = COMPRESSION_NONE
ASSIGN	317:2	317:16	7	compression = COMPRESSION_NONE
LVAL	317:2	317:2	8	compression
FIELD	317:2	317:2	9	compression
LEAF_NODE	317:2	317:2	10	compression
ASSIGN_OP	317:14	317:14	8	=
LEAF_NODE	317:14	317:14	9	=
RVAL	317:16	317:16	8	COMPRESSION_NONE
FIELD	317:16	317:16	9	COMPRESSION_NONE
LEAF_NODE	317:16	317:16	10	COMPRESSION_NONE
LEAF_NODE	317:32	317:32	6	;
SELECTION	318:1	318:6	3	
KEYWORD	318:1	318:1	4	else
LEAF_NODE	318:1	318:1	5	else
STATEMENTS	318:6	318:6	4	
SELECTION	318:6	319:2	5	
KEYWORD	318:6	318:6	6	if
LEAF_NODE	318:6	318:6	7	if
LEAF_NODE	318:9	318:9	6	(
CONDITION	318:10	318:10	6	streq ( opt , "packbits" )
EXPR	318:10	318:10	7	streq ( opt , "packbits" )
FUNCTION_CALL	318:10	318:31	8	streq ( opt , "packbits" )
CALLEE	318:10	318:10	9	streq
LEAF_NODE	318:10	318:10	10	streq
LEAF_NODE	318:15	318:15	9	(
ARGUMENT	318:16	318:16	9	opt
FIELD	318:16	318:16	10	opt
LEAF_NODE	318:16	318:16	11	opt
LEAF_NODE	318:19	318:19	9	,
ARGUMENT	318:21	318:21	9	"packbits"
FIELD	318:21	318:21	10	"packbits"
LEAF_NODE	318:21	318:21	11	"packbits"
LEAF_NODE	318:31	318:31	9	)
LEAF_NODE	318:32	318:32	6	)
STATEMENTS	319:2	319:2	6	
EXPR_STATEMENT	319:2	319:36	7	compression = COMPRESSION_PACKBITS ;
EXPR	319:2	319:2	8	compression = COMPRESSION_PACKBITS
ASSIGN	319:2	319:16	9	compression = COMPRESSION_PACKBITS
LVAL	319:2	319:2	10	compression
FIELD	319:2	319:2	11	compression
LEAF_NODE	319:2	319:2	12	compression
ASSIGN_OP	319:14	319:14	10	=
LEAF_NODE	319:14	319:14	11	=
RVAL	319:16	319:16	10	COMPRESSION_PACKBITS
FIELD	319:16	319:16	11	COMPRESSION_PACKBITS
LEAF_NODE	319:16	319:16	12	COMPRESSION_PACKBITS
LEAF_NODE	319:36	319:36	8	;
SELECTION	320:1	320:6	3	
KEYWORD	320:1	320:1	4	else
LEAF_NODE	320:1	320:1	5	else
STATEMENTS	320:6	320:6	4	
SELECTION	320:6	320:34	5	
KEYWORD	320:6	320:6	6	if
LEAF_NODE	320:6	320:6	7	if
LEAF_NODE	320:9	320:9	6	(
CONDITION	320:10	320:10	6	strneq ( opt , "jpeg" , 4 )
EXPR	320:10	320:10	7	strneq ( opt , "jpeg" , 4 )
FUNCTION_CALL	320:10	320:31	8	strneq ( opt , "jpeg" , 4 )
CALLEE	320:10	320:10	9	strneq
LEAF_NODE	320:10	320:10	10	strneq
LEAF_NODE	320:16	320:16	9	(
ARGUMENT	320:17	320:17	9	opt
FIELD	320:17	320:17	10	opt
LEAF_NODE	320:17	320:17	11	opt
LEAF_NODE	320:20	320:20	9	,
ARGUMENT	320:22	320:22	9	"jpeg"
FIELD	320:22	320:22	10	"jpeg"
LEAF_NODE	320:22	320:22	11	"jpeg"
LEAF_NODE	320:28	320:28	9	,
ARGUMENT	320:30	320:30	9	4
FIELD	320:30	320:30	10	4
LEAF_NODE	320:30	320:30	11	4
LEAF_NODE	320:31	320:31	9	)
LEAF_NODE	320:32	320:32	6	)
STATEMENTS	320:34	335:1	6	
LEAF_NODE	320:34	320:34	7	{
STATEMENTS	321:2	324:16	7	
SIMPLE_DECL	321:2	321:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	321:2	321:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	321:2	321:6	10	char *
TYPE_NAME	321:2	321:2	11	char
LEAF_NODE	321:2	321:2	12	char
POINTER	321:6	321:6	11	*
LEAF_NODE	321:6	321:6	12	*
NAME	321:8	321:8	10	cp
LEAF_NODE	321:8	321:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	321:8	321:8	10	cp = strchr ( opt , ':' )
ASSIGN	321:8	321:13	11	cp = strchr ( opt , ':' )
LVAL	321:8	321:8	12	cp
NAME	321:8	321:8	13	cp
LEAF_NODE	321:8	321:8	14	cp
ASSIGN_OP	321:11	321:11	12	=
LEAF_NODE	321:11	321:11	13	=
RVAL	321:13	321:13	12	strchr ( opt , ':' )
FUNCTION_CALL	321:13	321:28	13	strchr ( opt , ':' )
CALLEE	321:13	321:13	14	strchr
LEAF_NODE	321:13	321:13	15	strchr
LEAF_NODE	321:19	321:19	14	(
ARGUMENT	321:20	321:20	14	opt
FIELD	321:20	321:20	15	opt
LEAF_NODE	321:20	321:20	16	opt
LEAF_NODE	321:23	321:23	14	,
ARGUMENT	321:25	321:25	14	':'
FIELD	321:25	321:25	15	':'
LEAF_NODE	321:25	321:25	16	':'
LEAF_NODE	321:28	321:28	14	)
LEAF_NODE	321:29	321:29	9	;
EXPR_STATEMENT	323:16	323:46	8	compression = COMPRESSION_JPEG ;
EXPR	323:16	323:16	9	compression = COMPRESSION_JPEG
ASSIGN	323:16	323:30	10	compression = COMPRESSION_JPEG
LVAL	323:16	323:16	11	compression
FIELD	323:16	323:16	12	compression
LEAF_NODE	323:16	323:16	13	compression
ASSIGN_OP	323:28	323:28	11	=
LEAF_NODE	323:28	323:28	12	=
RVAL	323:30	323:30	11	COMPRESSION_JPEG
FIELD	323:30	323:30	12	COMPRESSION_JPEG
LEAF_NODE	323:30	323:30	13	COMPRESSION_JPEG
LEAF_NODE	323:46	323:46	9	;
ITERATION	324:16	325:16	8	
KEYWORD	324:16	324:16	9	while
LEAF_NODE	324:16	324:16	10	while
LEAF_NODE	324:22	324:22	9	(
CONDITION	324:23	324:23	9	cp
EXPR	324:23	324:23	10	cp
FIELD	324:23	324:23	11	cp
LEAF_NODE	324:23	324:23	12	cp
LEAF_NODE	324:25	324:25	9	)
STATEMENTS	325:16	334:16	9	
LEAF_NODE	325:16	325:16	10	{
STATEMENTS	326:20	333:20	10	
SELECTION	326:20	327:3	11	
KEYWORD	326:20	326:20	12	if
LEAF_NODE	326:20	326:20	13	if
LEAF_NODE	326:23	326:23	12	(
CONDITION	326:24	326:24	12	isdigit ( ( int ) cp [ 1 ] )
EXPR	326:24	326:24	13	isdigit ( ( int ) cp [ 1 ] )
FUNCTION_CALL	326:24	326:42	14	isdigit ( ( int ) cp [ 1 ] )
CALLEE	326:24	326:24	15	isdigit
LEAF_NODE	326:24	326:24	16	isdigit
LEAF_NODE	326:31	326:31	15	(
ARGUMENT	326:32	326:37	15	( int ) cp [ 1 ]
LEAF_NODE	326:32	326:32	16	(
TYPE_NAME	326:33	326:33	16	int
LEAF_NODE	326:33	326:33	17	int
LEAF_NODE	326:36	326:36	16	)
FIELD	326:37	326:41	16	cp [ 1 ]
LEAF_NODE	326:37	326:37	17	cp
LEAF_NODE	326:39	326:39	17	[
EXPR	326:40	326:40	17	1
FIELD	326:40	326:40	18	1
LEAF_NODE	326:40	326:40	19	1
LEAF_NODE	326:41	326:41	17	]
LEAF_NODE	326:42	326:42	15	)
LEAF_NODE	326:43	326:43	12	)
STATEMENTS	327:3	327:3	12	
EXPR_STATEMENT	327:3	327:23	13	quality = atoi ( cp + 1 ) ;
EXPR	327:3	327:3	14	quality = atoi ( cp + 1 )
ASSIGN	327:3	327:13	15	quality = atoi ( cp + 1 )
LVAL	327:3	327:3	16	quality
FIELD	327:3	327:3	17	quality
LEAF_NODE	327:3	327:3	18	quality
ASSIGN_OP	327:11	327:11	16	=
LEAF_NODE	327:11	327:11	17	=
RVAL	327:13	327:13	16	atoi ( cp + 1 )
FUNCTION_CALL	327:13	327:22	17	atoi ( cp + 1 )
CALLEE	327:13	327:13	18	atoi
LEAF_NODE	327:13	327:13	19	atoi
LEAF_NODE	327:17	327:17	18	(
ARGUMENT	327:18	327:21	18	cp + 1
FIELD	327:18	327:18	19	cp
LEAF_NODE	327:18	327:18	20	cp
LEAF_NODE	327:20	327:20	19	+
FIELD	327:21	327:21	19	1
LEAF_NODE	327:21	327:21	20	1
LEAF_NODE	327:22	327:22	18	)
LEAF_NODE	327:23	327:23	14	;
SELECTION	328:20	328:25	11	
KEYWORD	328:20	328:20	12	else
LEAF_NODE	328:20	328:20	13	else
STATEMENTS	328:25	328:25	12	
SELECTION	328:25	329:3	13	
KEYWORD	328:25	328:25	14	if
LEAF_NODE	328:25	328:25	15	if
LEAF_NODE	328:28	328:28	14	(
CONDITION	328:29	328:29	14	cp [ 1 ] == 'r'
EXPR	328:29	328:38	15	cp [ 1 ] == 'r'
FIELD	328:29	328:33	16	cp [ 1 ]
LEAF_NODE	328:29	328:29	17	cp
LEAF_NODE	328:31	328:31	17	[
EXPR	328:32	328:32	17	1
FIELD	328:32	328:32	18	1
LEAF_NODE	328:32	328:32	19	1
LEAF_NODE	328:33	328:33	17	]
EQ_OPERATOR	328:35	328:35	16	==
LEAF_NODE	328:35	328:35	17	==
FIELD	328:38	328:38	16	'r'
LEAF_NODE	328:38	328:38	17	'r'
LEAF_NODE	328:42	328:42	14	)
STATEMENTS	329:3	329:3	14	
EXPR_STATEMENT	329:3	329:36	15	jpegcolormode = JPEGCOLORMODE_RAW ;
EXPR	329:3	329:3	16	jpegcolormode = JPEGCOLORMODE_RAW
ASSIGN	329:3	329:19	17	jpegcolormode = JPEGCOLORMODE_RAW
LVAL	329:3	329:3	18	jpegcolormode
FIELD	329:3	329:3	19	jpegcolormode
LEAF_NODE	329:3	329:3	20	jpegcolormode
ASSIGN_OP	329:17	329:17	18	=
LEAF_NODE	329:17	329:17	19	=
RVAL	329:19	329:19	18	JPEGCOLORMODE_RAW
FIELD	329:19	329:19	19	JPEGCOLORMODE_RAW
LEAF_NODE	329:19	329:19	20	JPEGCOLORMODE_RAW
LEAF_NODE	329:36	329:36	16	;
SELECTION	330:20	331:24	11	
KEYWORD	330:20	330:20	12	else
LEAF_NODE	330:20	330:20	13	else
STATEMENTS	331:24	331:24	12	
EXPR_STATEMENT	331:24	331:31	13	usage ( ) ;
EXPR	331:24	331:24	14	usage ( )
FUNCTION_CALL	331:24	331:30	15	usage ( )
CALLEE	331:24	331:24	16	usage
LEAF_NODE	331:24	331:24	17	usage
LEAF_NODE	331:29	331:29	16	(
LEAF_NODE	331:30	331:30	16	)
LEAF_NODE	331:31	331:31	14	;
EXPR_STATEMENT	333:20	333:41	11	cp = strchr ( cp + 1 , ':' ) ;
EXPR	333:20	333:20	12	cp = strchr ( cp + 1 , ':' )
ASSIGN	333:20	333:25	13	cp = strchr ( cp + 1 , ':' )
LVAL	333:20	333:20	14	cp
FIELD	333:20	333:20	15	cp
LEAF_NODE	333:20	333:20	16	cp
ASSIGN_OP	333:23	333:23	14	=
LEAF_NODE	333:23	333:23	15	=
RVAL	333:25	333:25	14	strchr ( cp + 1 , ':' )
FUNCTION_CALL	333:25	333:40	15	strchr ( cp + 1 , ':' )
CALLEE	333:25	333:25	16	strchr
LEAF_NODE	333:25	333:25	17	strchr
LEAF_NODE	333:31	333:31	16	(
ARGUMENT	333:32	333:35	16	cp + 1
FIELD	333:32	333:32	17	cp
LEAF_NODE	333:32	333:32	18	cp
LEAF_NODE	333:34	333:34	17	+
FIELD	333:35	333:35	17	1
LEAF_NODE	333:35	333:35	18	1
LEAF_NODE	333:36	333:36	16	,
ARGUMENT	333:37	333:37	16	':'
FIELD	333:37	333:37	17	':'
LEAF_NODE	333:37	333:37	18	':'
LEAF_NODE	333:40	333:40	16	)
LEAF_NODE	333:41	333:41	12	;
LEAF_NODE	334:16	334:16	10	}
LEAF_NODE	335:1	335:1	7	}
SELECTION	335:3	335:8	3	
KEYWORD	335:3	335:3	4	else
LEAF_NODE	335:3	335:3	5	else
STATEMENTS	335:8	335:8	4	
SELECTION	335:8	335:34	5	
KEYWORD	335:8	335:8	6	if
LEAF_NODE	335:8	335:8	7	if
LEAF_NODE	335:11	335:11	6	(
CONDITION	335:12	335:12	6	strneq ( opt , "g3" , 2 )
EXPR	335:12	335:12	7	strneq ( opt , "g3" , 2 )
FUNCTION_CALL	335:12	335:31	8	strneq ( opt , "g3" , 2 )
CALLEE	335:12	335:12	9	strneq
LEAF_NODE	335:12	335:12	10	strneq
LEAF_NODE	335:18	335:18	9	(
ARGUMENT	335:19	335:19	9	opt
FIELD	335:19	335:19	10	opt
LEAF_NODE	335:19	335:19	11	opt
LEAF_NODE	335:22	335:22	9	,
ARGUMENT	335:24	335:24	9	"g3"
FIELD	335:24	335:24	10	"g3"
LEAF_NODE	335:24	335:24	11	"g3"
LEAF_NODE	335:28	335:28	9	,
ARGUMENT	335:30	335:30	9	2
FIELD	335:30	335:30	10	2
LEAF_NODE	335:30	335:30	11	2
LEAF_NODE	335:31	335:31	9	)
LEAF_NODE	335:32	335:32	6	)
STATEMENTS	335:34	338:1	6	
LEAF_NODE	335:34	335:34	7	{
STATEMENTS	336:2	337:2	7	
EXPR_STATEMENT	336:2	336:23	8	processG3Options ( opt ) ;
EXPR	336:2	336:2	9	processG3Options ( opt )
FUNCTION_CALL	336:2	336:22	10	processG3Options ( opt )
CALLEE	336:2	336:2	11	processG3Options
LEAF_NODE	336:2	336:2	12	processG3Options
LEAF_NODE	336:18	336:18	11	(
ARGUMENT	336:19	336:19	11	opt
FIELD	336:19	336:19	12	opt
LEAF_NODE	336:19	336:19	13	opt
LEAF_NODE	336:22	336:22	11	)
LEAF_NODE	336:23	336:23	9	;
EXPR_STATEMENT	337:2	337:37	8	compression = COMPRESSION_CCITTFAX3 ;
EXPR	337:2	337:2	9	compression = COMPRESSION_CCITTFAX3
ASSIGN	337:2	337:16	10	compression = COMPRESSION_CCITTFAX3
LVAL	337:2	337:2	11	compression
FIELD	337:2	337:2	12	compression
LEAF_NODE	337:2	337:2	13	compression
ASSIGN_OP	337:14	337:14	11	=
LEAF_NODE	337:14	337:14	12	=
RVAL	337:16	337:16	11	COMPRESSION_CCITTFAX3
FIELD	337:16	337:16	12	COMPRESSION_CCITTFAX3
LEAF_NODE	337:16	337:16	13	COMPRESSION_CCITTFAX3
LEAF_NODE	337:37	337:37	9	;
LEAF_NODE	338:1	338:1	7	}
SELECTION	338:3	338:8	3	
KEYWORD	338:3	338:3	4	else
LEAF_NODE	338:3	338:3	5	else
STATEMENTS	338:8	338:8	4	
SELECTION	338:8	338:30	5	
KEYWORD	338:8	338:8	6	if
LEAF_NODE	338:8	338:8	7	if
LEAF_NODE	338:11	338:11	6	(
CONDITION	338:12	338:12	6	streq ( opt , "g4" )
EXPR	338:12	338:12	7	streq ( opt , "g4" )
FUNCTION_CALL	338:12	338:27	8	streq ( opt , "g4" )
CALLEE	338:12	338:12	9	streq
LEAF_NODE	338:12	338:12	10	streq
LEAF_NODE	338:17	338:17	9	(
ARGUMENT	338:18	338:18	9	opt
FIELD	338:18	338:18	10	opt
LEAF_NODE	338:18	338:18	11	opt
LEAF_NODE	338:21	338:21	9	,
ARGUMENT	338:23	338:23	9	"g4"
FIELD	338:23	338:23	10	"g4"
LEAF_NODE	338:23	338:23	11	"g4"
LEAF_NODE	338:27	338:27	9	)
LEAF_NODE	338:28	338:28	6	)
STATEMENTS	338:30	340:1	6	
LEAF_NODE	338:30	338:30	7	{
STATEMENTS	339:2	339:2	7	
EXPR_STATEMENT	339:2	339:37	8	compression = COMPRESSION_CCITTFAX4 ;
EXPR	339:2	339:2	9	compression = COMPRESSION_CCITTFAX4
ASSIGN	339:2	339:16	10	compression = COMPRESSION_CCITTFAX4
LVAL	339:2	339:2	11	compression
FIELD	339:2	339:2	12	compression
LEAF_NODE	339:2	339:2	13	compression
ASSIGN_OP	339:14	339:14	11	=
LEAF_NODE	339:14	339:14	12	=
RVAL	339:16	339:16	11	COMPRESSION_CCITTFAX4
FIELD	339:16	339:16	12	COMPRESSION_CCITTFAX4
LEAF_NODE	339:16	339:16	13	COMPRESSION_CCITTFAX4
LEAF_NODE	339:37	339:37	9	;
LEAF_NODE	340:1	340:1	7	}
SELECTION	340:3	340:8	3	
KEYWORD	340:3	340:3	4	else
LEAF_NODE	340:3	340:3	5	else
STATEMENTS	340:8	340:8	4	
SELECTION	340:8	340:35	5	
KEYWORD	340:8	340:8	6	if
LEAF_NODE	340:8	340:8	7	if
LEAF_NODE	340:11	340:11	6	(
CONDITION	340:12	340:12	6	strneq ( opt , "lzw" , 3 )
EXPR	340:12	340:12	7	strneq ( opt , "lzw" , 3 )
FUNCTION_CALL	340:12	340:32	8	strneq ( opt , "lzw" , 3 )
CALLEE	340:12	340:12	9	strneq
LEAF_NODE	340:12	340:12	10	strneq
LEAF_NODE	340:18	340:18	9	(
ARGUMENT	340:19	340:19	9	opt
FIELD	340:19	340:19	10	opt
LEAF_NODE	340:19	340:19	11	opt
LEAF_NODE	340:22	340:22	9	,
ARGUMENT	340:24	340:24	9	"lzw"
FIELD	340:24	340:24	10	"lzw"
LEAF_NODE	340:24	340:24	11	"lzw"
LEAF_NODE	340:29	340:29	9	,
ARGUMENT	340:31	340:31	9	3
FIELD	340:31	340:31	10	3
LEAF_NODE	340:31	340:31	11	3
LEAF_NODE	340:32	340:32	9	)
LEAF_NODE	340:33	340:33	6	)
STATEMENTS	340:35	345:1	6	
LEAF_NODE	340:35	340:35	7	{
STATEMENTS	341:2	344:2	7	
SIMPLE_DECL	341:2	341:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	341:2	341:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	341:2	341:6	10	char *
TYPE_NAME	341:2	341:2	11	char
LEAF_NODE	341:2	341:2	12	char
POINTER	341:6	341:6	11	*
LEAF_NODE	341:6	341:6	12	*
NAME	341:8	341:8	10	cp
LEAF_NODE	341:8	341:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	341:8	341:8	10	cp = strchr ( opt , ':' )
ASSIGN	341:8	341:13	11	cp = strchr ( opt , ':' )
LVAL	341:8	341:8	12	cp
NAME	341:8	341:8	13	cp
LEAF_NODE	341:8	341:8	14	cp
ASSIGN_OP	341:11	341:11	12	=
LEAF_NODE	341:11	341:11	13	=
RVAL	341:13	341:13	12	strchr ( opt , ':' )
FUNCTION_CALL	341:13	341:28	13	strchr ( opt , ':' )
CALLEE	341:13	341:13	14	strchr
LEAF_NODE	341:13	341:13	15	strchr
LEAF_NODE	341:19	341:19	14	(
ARGUMENT	341:20	341:20	14	opt
FIELD	341:20	341:20	15	opt
LEAF_NODE	341:20	341:20	16	opt
LEAF_NODE	341:23	341:23	14	,
ARGUMENT	341:25	341:25	14	':'
FIELD	341:25	341:25	15	':'
LEAF_NODE	341:25	341:25	16	':'
LEAF_NODE	341:28	341:28	14	)
LEAF_NODE	341:29	341:29	9	;
SELECTION	342:2	343:3	8	
KEYWORD	342:2	342:2	9	if
LEAF_NODE	342:2	342:2	10	if
LEAF_NODE	342:5	342:5	9	(
CONDITION	342:6	342:6	9	cp
EXPR	342:6	342:6	10	cp
FIELD	342:6	342:6	11	cp
LEAF_NODE	342:6	342:6	12	cp
LEAF_NODE	342:8	342:8	9	)
STATEMENTS	343:3	343:3	9	
EXPR_STATEMENT	343:3	343:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	343:3	343:3	11	predictor = atoi ( cp + 1 )
ASSIGN	343:3	343:15	12	predictor = atoi ( cp + 1 )
LVAL	343:3	343:3	13	predictor
FIELD	343:3	343:3	14	predictor
LEAF_NODE	343:3	343:3	15	predictor
ASSIGN_OP	343:13	343:13	13	=
LEAF_NODE	343:13	343:13	14	=
RVAL	343:15	343:15	13	atoi ( cp + 1 )
FUNCTION_CALL	343:15	343:24	14	atoi ( cp + 1 )
CALLEE	343:15	343:15	15	atoi
LEAF_NODE	343:15	343:15	16	atoi
LEAF_NODE	343:19	343:19	15	(
ARGUMENT	343:20	343:23	15	cp + 1
FIELD	343:20	343:20	16	cp
LEAF_NODE	343:20	343:20	17	cp
LEAF_NODE	343:22	343:22	16	+
FIELD	343:23	343:23	16	1
LEAF_NODE	343:23	343:23	17	1
LEAF_NODE	343:24	343:24	15	)
LEAF_NODE	343:25	343:25	11	;
EXPR_STATEMENT	344:2	344:31	8	compression = COMPRESSION_LZW ;
EXPR	344:2	344:2	9	compression = COMPRESSION_LZW
ASSIGN	344:2	344:16	10	compression = COMPRESSION_LZW
LVAL	344:2	344:2	11	compression
FIELD	344:2	344:2	12	compression
LEAF_NODE	344:2	344:2	13	compression
ASSIGN_OP	344:14	344:14	11	=
LEAF_NODE	344:14	344:14	12	=
RVAL	344:16	344:16	11	COMPRESSION_LZW
FIELD	344:16	344:16	12	COMPRESSION_LZW
LEAF_NODE	344:16	344:16	13	COMPRESSION_LZW
LEAF_NODE	344:31	344:31	9	;
LEAF_NODE	345:1	345:1	7	}
SELECTION	345:3	345:8	3	
KEYWORD	345:3	345:3	4	else
LEAF_NODE	345:3	345:3	5	else
STATEMENTS	345:8	345:8	4	
SELECTION	345:8	345:35	5	
KEYWORD	345:8	345:8	6	if
LEAF_NODE	345:8	345:8	7	if
LEAF_NODE	345:11	345:11	6	(
CONDITION	345:12	345:12	6	strneq ( opt , "zip" , 3 )
EXPR	345:12	345:12	7	strneq ( opt , "zip" , 3 )
FUNCTION_CALL	345:12	345:32	8	strneq ( opt , "zip" , 3 )
CALLEE	345:12	345:12	9	strneq
LEAF_NODE	345:12	345:12	10	strneq
LEAF_NODE	345:18	345:18	9	(
ARGUMENT	345:19	345:19	9	opt
FIELD	345:19	345:19	10	opt
LEAF_NODE	345:19	345:19	11	opt
LEAF_NODE	345:22	345:22	9	,
ARGUMENT	345:24	345:24	9	"zip"
FIELD	345:24	345:24	10	"zip"
LEAF_NODE	345:24	345:24	11	"zip"
LEAF_NODE	345:29	345:29	9	,
ARGUMENT	345:31	345:31	9	3
FIELD	345:31	345:31	10	3
LEAF_NODE	345:31	345:31	11	3
LEAF_NODE	345:32	345:32	9	)
LEAF_NODE	345:33	345:33	6	)
STATEMENTS	345:35	350:1	6	
LEAF_NODE	345:35	345:35	7	{
STATEMENTS	346:2	349:2	7	
SIMPLE_DECL	346:2	346:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	346:2	346:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	346:2	346:6	10	char *
TYPE_NAME	346:2	346:2	11	char
LEAF_NODE	346:2	346:2	12	char
POINTER	346:6	346:6	11	*
LEAF_NODE	346:6	346:6	12	*
NAME	346:8	346:8	10	cp
LEAF_NODE	346:8	346:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	346:8	346:8	10	cp = strchr ( opt , ':' )
ASSIGN	346:8	346:13	11	cp = strchr ( opt , ':' )
LVAL	346:8	346:8	12	cp
NAME	346:8	346:8	13	cp
LEAF_NODE	346:8	346:8	14	cp
ASSIGN_OP	346:11	346:11	12	=
LEAF_NODE	346:11	346:11	13	=
RVAL	346:13	346:13	12	strchr ( opt , ':' )
FUNCTION_CALL	346:13	346:28	13	strchr ( opt , ':' )
CALLEE	346:13	346:13	14	strchr
LEAF_NODE	346:13	346:13	15	strchr
LEAF_NODE	346:19	346:19	14	(
ARGUMENT	346:20	346:20	14	opt
FIELD	346:20	346:20	15	opt
LEAF_NODE	346:20	346:20	16	opt
LEAF_NODE	346:23	346:23	14	,
ARGUMENT	346:25	346:25	14	':'
FIELD	346:25	346:25	15	':'
LEAF_NODE	346:25	346:25	16	':'
LEAF_NODE	346:28	346:28	14	)
LEAF_NODE	346:29	346:29	9	;
SELECTION	347:2	348:3	8	
KEYWORD	347:2	347:2	9	if
LEAF_NODE	347:2	347:2	10	if
LEAF_NODE	347:5	347:5	9	(
CONDITION	347:6	347:6	9	cp
EXPR	347:6	347:6	10	cp
FIELD	347:6	347:6	11	cp
LEAF_NODE	347:6	347:6	12	cp
LEAF_NODE	347:8	347:8	9	)
STATEMENTS	348:3	348:3	9	
EXPR_STATEMENT	348:3	348:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	348:3	348:3	11	predictor = atoi ( cp + 1 )
ASSIGN	348:3	348:15	12	predictor = atoi ( cp + 1 )
LVAL	348:3	348:3	13	predictor
FIELD	348:3	348:3	14	predictor
LEAF_NODE	348:3	348:3	15	predictor
ASSIGN_OP	348:13	348:13	13	=
LEAF_NODE	348:13	348:13	14	=
RVAL	348:15	348:15	13	atoi ( cp + 1 )
FUNCTION_CALL	348:15	348:24	14	atoi ( cp + 1 )
CALLEE	348:15	348:15	15	atoi
LEAF_NODE	348:15	348:15	16	atoi
LEAF_NODE	348:19	348:19	15	(
ARGUMENT	348:20	348:23	15	cp + 1
FIELD	348:20	348:20	16	cp
LEAF_NODE	348:20	348:20	17	cp
LEAF_NODE	348:22	348:22	16	+
FIELD	348:23	348:23	16	1
LEAF_NODE	348:23	348:23	17	1
LEAF_NODE	348:24	348:24	15	)
LEAF_NODE	348:25	348:25	11	;
EXPR_STATEMENT	349:2	349:35	8	compression = COMPRESSION_DEFLATE ;
EXPR	349:2	349:2	9	compression = COMPRESSION_DEFLATE
ASSIGN	349:2	349:16	10	compression = COMPRESSION_DEFLATE
LVAL	349:2	349:2	11	compression
FIELD	349:2	349:2	12	compression
LEAF_NODE	349:2	349:2	13	compression
ASSIGN_OP	349:14	349:14	11	=
LEAF_NODE	349:14	349:14	12	=
RVAL	349:16	349:16	11	COMPRESSION_DEFLATE
FIELD	349:16	349:16	12	COMPRESSION_DEFLATE
LEAF_NODE	349:16	349:16	13	COMPRESSION_DEFLATE
LEAF_NODE	349:35	349:35	9	;
LEAF_NODE	350:1	350:1	7	}
SELECTION	350:3	351:2	3	
KEYWORD	350:3	350:3	4	else
LEAF_NODE	350:3	350:3	5	else
STATEMENTS	351:2	351:2	4	
JUMP_STATEMENT	351:2	351:12	5	return ( 0 ) ;
KEYWORD	351:2	351:2	6	return
LEAF_NODE	351:2	351:2	7	return
DESTINATION	351:9	351:9	6	( 0 )
EXPR	351:9	351:11	7	( 0 )
LEAF_NODE	351:9	351:9	8	(
FIELD	351:10	351:10	8	0
LEAF_NODE	351:10	351:10	9	0
LEAF_NODE	351:11	351:11	8	)
LEAF_NODE	351:12	351:12	6	;
JUMP_STATEMENT	352:1	352:11	3	return ( 1 ) ;
KEYWORD	352:1	352:1	4	return
LEAF_NODE	352:1	352:1	5	return
DESTINATION	352:8	352:8	4	( 1 )
EXPR	352:8	352:10	5	( 1 )
LEAF_NODE	352:8	352:8	6	(
FIELD	352:9	352:9	6	1
LEAF_NODE	352:9	352:9	7	1
LEAF_NODE	352:10	352:10	6	)
LEAF_NODE	352:11	352:11	4	;
LEAF_NODE	353:0	353:0	2	}
FUNCTION_DEF	378:0	389:0	1	
RETURN_TYPE	378:0	378:7	2	static void
LEAF_NODE	378:0	378:0	3	static
TYPE_NAME	378:7	378:7	3	void
LEAF_NODE	378:7	378:7	4	void
FUNCTION_NAME	379:0	379:0	2	usage
LEAF_NODE	379:0	379:0	3	usage
PARAMETER_LIST	379:5	379:10	2	( void )
LEAF_NODE	379:5	379:5	3	(
PARAMETER_DECL	379:6	379:6	3	void
LEAF_NODE	379:6	379:6	4	void
LEAF_NODE	379:10	379:10	3	)
LEAF_NODE	380:0	380:0	2	{
STATEMENTS	381:1	388:1	2	
SIMPLE_DECL	381:1	381:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	381:1	381:6	4	char [ BUFSIZ ] buf
TYPE	381:1	381:9	5	char [ BUFSIZ ]
TYPE_NAME	381:1	381:1	6	char
LEAF_NODE	381:1	381:1	7	char
TYPE_SUFFIX	381:9	381:16	6	[ BUFSIZ ]
LEAF_NODE	381:9	381:9	7	[
FIELD	381:10	381:10	7	BUFSIZ
LEAF_NODE	381:10	381:10	8	BUFSIZ
LEAF_NODE	381:16	381:16	7	]
NAME	381:6	381:6	5	buf
LEAF_NODE	381:6	381:6	6	buf
LEAF_NODE	381:17	381:17	4	;
SIMPLE_DECL	382:1	382:6	3	int i ;
VAR_DECL	382:1	382:5	4	int i
TYPE	382:1	382:1	5	int
TYPE_NAME	382:1	382:1	6	int
LEAF_NODE	382:1	382:1	7	int
NAME	382:5	382:5	5	i
LEAF_NODE	382:5	382:5	6	i
LEAF_NODE	382:6	382:6	4	;
EXPR_STATEMENT	384:1	384:20	3	setbuf ( stderr , buf ) ;
EXPR	384:1	384:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	384:1	384:19	5	setbuf ( stderr , buf )
CALLEE	384:1	384:1	6	setbuf
LEAF_NODE	384:1	384:1	7	setbuf
LEAF_NODE	384:7	384:7	6	(
ARGUMENT	384:8	384:8	6	stderr
FIELD	384:8	384:8	7	stderr
LEAF_NODE	384:8	384:8	8	stderr
LEAF_NODE	384:14	384:14	6	,
ARGUMENT	384:16	384:16	6	buf
FIELD	384:16	384:16	7	buf
LEAF_NODE	384:16	384:16	8	buf
LEAF_NODE	384:19	384:19	6	)
LEAF_NODE	384:20	384:20	4	;
EXPR_STATEMENT	385:8	385:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	385:8	385:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	385:8	385:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	385:8	385:8	6	fprintf
LEAF_NODE	385:8	385:8	7	fprintf
LEAF_NODE	385:15	385:15	6	(
ARGUMENT	385:16	385:16	6	stderr
FIELD	385:16	385:16	7	stderr
LEAF_NODE	385:16	385:16	8	stderr
LEAF_NODE	385:22	385:22	6	,
ARGUMENT	385:24	385:24	6	"%s\n\n"
FIELD	385:24	385:24	7	"%s\n\n"
LEAF_NODE	385:24	385:24	8	"%s\n\n"
LEAF_NODE	385:32	385:32	6	,
ARGUMENT	385:34	385:34	6	TIFFGetVersion ( )
FUNCTION_CALL	385:34	385:49	7	TIFFGetVersion ( )
CALLEE	385:34	385:34	8	TIFFGetVersion
LEAF_NODE	385:34	385:34	9	TIFFGetVersion
LEAF_NODE	385:48	385:48	8	(
LEAF_NODE	385:49	385:49	8	)
LEAF_NODE	385:50	385:50	6	)
LEAF_NODE	385:51	385:51	4	;
ITERATION	386:1	387:2	3	
KEYWORD	386:1	386:1	4	for
LEAF_NODE	386:1	386:1	5	for
LEAF_NODE	386:5	386:5	4	(
FOR_INIT	386:6	386:11	4	i = 0 ;
EXPR	386:6	386:6	5	i = 0
ASSIGN	386:6	386:10	6	i = 0
LVAL	386:6	386:6	7	i
FIELD	386:6	386:6	8	i
LEAF_NODE	386:6	386:6	9	i
ASSIGN_OP	386:8	386:8	7	=
LEAF_NODE	386:8	386:8	8	=
RVAL	386:10	386:10	7	0
FIELD	386:10	386:10	8	0
LEAF_NODE	386:10	386:10	9	0
LEAF_NODE	386:11	386:11	5	;
CONDITION	386:13	386:13	4	stuff [ i ] != NULL
EXPR	386:13	386:25	5	stuff [ i ] != NULL
FIELD	386:13	386:20	6	stuff [ i ]
LEAF_NODE	386:13	386:13	7	stuff
LEAF_NODE	386:18	386:18	7	[
EXPR	386:19	386:19	7	i
FIELD	386:19	386:19	8	i
LEAF_NODE	386:19	386:19	9	i
LEAF_NODE	386:20	386:20	7	]
EQ_OPERATOR	386:22	386:22	6	!=
LEAF_NODE	386:22	386:22	7	!=
FIELD	386:25	386:25	6	NULL
LEAF_NODE	386:25	386:25	7	NULL
LEAF_NODE	386:29	386:29	4	;
FOR_EXPR	386:31	386:31	4	i ++
EXPR	386:31	386:31	5	i ++
FIELD	386:31	386:32	6	i ++
LEAF_NODE	386:31	386:31	7	i
LEAF_NODE	386:32	386:32	7	++
LEAF_NODE	386:34	386:34	4	)
STATEMENTS	387:2	387:2	4	
EXPR_STATEMENT	387:2	387:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	387:2	387:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	387:2	387:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	387:2	387:2	8	fprintf
LEAF_NODE	387:2	387:2	9	fprintf
LEAF_NODE	387:9	387:9	8	(
ARGUMENT	387:10	387:10	8	stderr
FIELD	387:10	387:10	9	stderr
LEAF_NODE	387:10	387:10	10	stderr
LEAF_NODE	387:16	387:16	8	,
ARGUMENT	387:18	387:18	8	"%s\n"
FIELD	387:18	387:18	9	"%s\n"
LEAF_NODE	387:18	387:18	10	"%s\n"
LEAF_NODE	387:24	387:24	8	,
ARGUMENT	387:26	387:26	8	stuff [ i ]
FIELD	387:26	387:33	9	stuff [ i ]
LEAF_NODE	387:26	387:26	10	stuff
LEAF_NODE	387:31	387:31	10	[
EXPR	387:32	387:32	10	i
FIELD	387:32	387:32	11	i
LEAF_NODE	387:32	387:32	12	i
LEAF_NODE	387:33	387:33	10	]
LEAF_NODE	387:34	387:34	8	)
LEAF_NODE	387:35	387:35	6	;
EXPR_STATEMENT	388:1	388:9	3	exit ( - 1 ) ;
EXPR	388:1	388:1	4	exit ( - 1 )
FUNCTION_CALL	388:1	388:8	5	exit ( - 1 )
CALLEE	388:1	388:1	6	exit
LEAF_NODE	388:1	388:1	7	exit
LEAF_NODE	388:5	388:5	6	(
ARGUMENT	388:6	388:6	6	- 1
UNARY_EXPR	388:6	388:7	7	- 1
UNARY_OPERATOR	388:6	388:6	8	-
LEAF_NODE	388:6	388:6	9	-
FIELD	388:7	388:7	8	1
LEAF_NODE	388:7	388:7	9	1
LEAF_NODE	388:8	388:8	6	)
LEAF_NODE	388:9	388:9	4	;
LEAF_NODE	389:0	389:0	2	}
