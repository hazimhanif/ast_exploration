SOURCE_FILE	49:0	76:0	0	
FUNCTION_DEF	49:0	56:0	1	
RETURN_TYPE	49:0	49:7	2	static void
LEAF_NODE	49:0	49:0	3	static
TYPE_NAME	49:7	49:7	3	void
LEAF_NODE	49:7	49:7	4	void
FUNCTION_NAME	50:0	50:0	2	usage
LEAF_NODE	50:0	50:0	3	usage
PARAMETER_LIST	50:5	50:10	2	( void )
LEAF_NODE	50:5	50:5	3	(
PARAMETER_DECL	50:6	50:6	3	void
LEAF_NODE	50:6	50:6	4	void
LEAF_NODE	50:10	50:10	3	)
LEAF_NODE	51:0	51:0	2	{
STATEMENTS	52:1	55:1	2	
SIMPLE_DECL	52:1	52:6	3	int i ;
VAR_DECL	52:1	52:5	4	int i
TYPE	52:1	52:1	5	int
TYPE_NAME	52:1	52:1	6	int
LEAF_NODE	52:1	52:1	7	int
NAME	52:5	52:5	5	i
LEAF_NODE	52:5	52:5	6	i
LEAF_NODE	52:6	52:6	4	;
ITERATION	53:1	54:2	3	
KEYWORD	53:1	53:1	4	for
LEAF_NODE	53:1	53:1	5	for
LEAF_NODE	53:5	53:5	4	(
FOR_INIT	53:6	53:11	4	i = 0 ;
EXPR	53:6	53:6	5	i = 0
ASSIGN	53:6	53:10	6	i = 0
LVAL	53:6	53:6	7	i
FIELD	53:6	53:6	8	i
LEAF_NODE	53:6	53:6	9	i
ASSIGN_OP	53:8	53:8	7	=
LEAF_NODE	53:8	53:8	8	=
RVAL	53:10	53:10	7	0
FIELD	53:10	53:10	8	0
LEAF_NODE	53:10	53:10	9	0
LEAF_NODE	53:11	53:11	5	;
CONDITION	53:13	53:13	4	usageMsg [ i ]
EXPR	53:13	53:13	5	usageMsg [ i ]
FIELD	53:13	53:23	6	usageMsg [ i ]
LEAF_NODE	53:13	53:13	7	usageMsg
LEAF_NODE	53:21	53:21	7	[
EXPR	53:22	53:22	7	i
FIELD	53:22	53:22	8	i
LEAF_NODE	53:22	53:22	9	i
LEAF_NODE	53:23	53:23	7	]
LEAF_NODE	53:24	53:24	4	;
FOR_EXPR	53:26	53:26	4	i ++
EXPR	53:26	53:26	5	i ++
FIELD	53:26	53:27	6	i ++
LEAF_NODE	53:26	53:26	7	i
LEAF_NODE	53:27	53:27	7	++
LEAF_NODE	53:29	53:29	4	)
STATEMENTS	54:2	54:2	4	
EXPR_STATEMENT	54:2	54:38	5	fprintf ( stderr , "%s\n" , usageMsg [ i ] ) ;
EXPR	54:2	54:2	6	fprintf ( stderr , "%s\n" , usageMsg [ i ] )
FUNCTION_CALL	54:2	54:37	7	fprintf ( stderr , "%s\n" , usageMsg [ i ] )
CALLEE	54:2	54:2	8	fprintf
LEAF_NODE	54:2	54:2	9	fprintf
LEAF_NODE	54:9	54:9	8	(
ARGUMENT	54:10	54:10	8	stderr
FIELD	54:10	54:10	9	stderr
LEAF_NODE	54:10	54:10	10	stderr
LEAF_NODE	54:16	54:16	8	,
ARGUMENT	54:18	54:18	8	"%s\n"
FIELD	54:18	54:18	9	"%s\n"
LEAF_NODE	54:18	54:18	10	"%s\n"
LEAF_NODE	54:24	54:24	8	,
ARGUMENT	54:26	54:26	8	usageMsg [ i ]
FIELD	54:26	54:36	9	usageMsg [ i ]
LEAF_NODE	54:26	54:26	10	usageMsg
LEAF_NODE	54:34	54:34	10	[
EXPR	54:35	54:35	10	i
FIELD	54:35	54:35	11	i
LEAF_NODE	54:35	54:35	12	i
LEAF_NODE	54:36	54:36	10	]
LEAF_NODE	54:37	54:37	8	)
LEAF_NODE	54:38	54:38	6	;
EXPR_STATEMENT	55:1	55:9	3	exit ( - 1 ) ;
EXPR	55:1	55:1	4	exit ( - 1 )
FUNCTION_CALL	55:1	55:8	5	exit ( - 1 )
CALLEE	55:1	55:1	6	exit
LEAF_NODE	55:1	55:1	7	exit
LEAF_NODE	55:5	55:5	6	(
ARGUMENT	55:6	55:6	6	- 1
UNARY_EXPR	55:6	55:7	7	- 1
UNARY_OPERATOR	55:6	55:6	8	-
LEAF_NODE	55:6	55:6	9	-
FIELD	55:7	55:7	8	1
LEAF_NODE	55:7	55:7	9	1
LEAF_NODE	55:8	55:8	6	)
LEAF_NODE	55:9	55:9	4	;
LEAF_NODE	56:0	56:0	2	}
FUNCTION_DEF	58:0	74:0	1	
RETURN_TYPE	58:0	58:23	2	static const TIFFField *
LEAF_NODE	58:0	58:0	3	static
TYPE_NAME	58:7	58:13	3	const TIFFField
LEAF_NODE	58:7	58:7	4	const
LEAF_NODE	58:13	58:13	4	TIFFField
LEAF_NODE	58:23	58:23	3	*
FUNCTION_NAME	59:0	59:0	2	GetField
LEAF_NODE	59:0	59:0	3	GetField
PARAMETER_LIST	59:8	59:40	2	( TIFF * tiff , const char * tagname )
LEAF_NODE	59:8	59:8	3	(
PARAMETER_DECL	59:9	59:15	3	TIFF * tiff
TYPE	59:9	59:14	4	TIFF *
TYPE_NAME	59:9	59:9	5	TIFF
LEAF_NODE	59:9	59:9	6	TIFF
POINTER	59:14	59:14	5	*
LEAF_NODE	59:14	59:14	6	*
NAME	59:15	59:15	4	tiff
LEAF_NODE	59:15	59:15	5	tiff
LEAF_NODE	59:19	59:19	3	,
PARAMETER_DECL	59:21	59:33	3	const char * tagname
TYPE	59:21	59:32	4	const char *
TYPE_NAME	59:21	59:27	5	const char
LEAF_NODE	59:21	59:21	6	const
LEAF_NODE	59:27	59:27	6	char
POINTER	59:32	59:32	5	*
LEAF_NODE	59:32	59:32	6	*
NAME	59:33	59:33	4	tagname
LEAF_NODE	59:33	59:33	5	tagname
LEAF_NODE	59:40	59:40	3	)
LEAF_NODE	60:0	60:0	2	{
STATEMENTS	61:4	73:4	2	
SIMPLE_DECL	61:4	61:24	3	const TIFFField * fip ;
VAR_DECL	61:4	61:21	4	const TIFFField * fip
TYPE	61:4	61:20	5	const TIFFField *
TYPE_NAME	61:4	61:10	6	const TIFFField
LEAF_NODE	61:4	61:4	7	const
LEAF_NODE	61:10	61:10	7	TIFFField
POINTER	61:20	61:20	6	*
LEAF_NODE	61:20	61:20	7	*
NAME	61:21	61:21	5	fip
LEAF_NODE	61:21	61:21	6	fip
LEAF_NODE	61:24	61:24	4	;
SELECTION	63:4	64:8	3	
KEYWORD	63:4	63:4	4	if
LEAF_NODE	63:4	63:4	5	if
LEAF_NODE	63:6	63:6	4	(
CONDITION	63:8	63:8	4	atoi ( tagname ) > 0
EXPR	63:8	63:24	5	atoi ( tagname ) > 0
FUNCTION_CALL	63:8	63:20	6	atoi ( tagname )
CALLEE	63:8	63:8	7	atoi
LEAF_NODE	63:8	63:8	8	atoi
LEAF_NODE	63:12	63:12	7	(
ARGUMENT	63:13	63:13	7	tagname
FIELD	63:13	63:13	8	tagname
LEAF_NODE	63:13	63:13	9	tagname
LEAF_NODE	63:20	63:20	7	)
REL_OPERATOR	63:22	63:22	6	>
LEAF_NODE	63:22	63:22	7	>
FIELD	63:24	63:24	6	0
LEAF_NODE	63:24	63:24	7	0
LEAF_NODE	63:26	63:26	4	)
STATEMENTS	64:8	64:8	4	
EXPR_STATEMENT	64:8	64:59	5	fip = TIFFFieldWithTag ( tiff , ( ttag_t ) atoi ( tagname ) ) ;
EXPR	64:8	64:8	6	fip = TIFFFieldWithTag ( tiff , ( ttag_t ) atoi ( tagname ) )
ASSIGN	64:8	64:14	7	fip = TIFFFieldWithTag ( tiff , ( ttag_t ) atoi ( tagname ) )
LVAL	64:8	64:8	8	fip
FIELD	64:8	64:8	9	fip
LEAF_NODE	64:8	64:8	10	fip
ASSIGN_OP	64:12	64:12	8	=
LEAF_NODE	64:12	64:12	9	=
RVAL	64:14	64:14	8	TIFFFieldWithTag ( tiff , ( ttag_t ) atoi ( tagname ) )
FUNCTION_CALL	64:14	64:58	9	TIFFFieldWithTag ( tiff , ( ttag_t ) atoi ( tagname ) )
CALLEE	64:14	64:14	10	TIFFFieldWithTag
LEAF_NODE	64:14	64:14	11	TIFFFieldWithTag
LEAF_NODE	64:30	64:30	10	(
ARGUMENT	64:31	64:31	10	tiff
FIELD	64:31	64:31	11	tiff
LEAF_NODE	64:31	64:31	12	tiff
LEAF_NODE	64:35	64:35	10	,
ARGUMENT	64:37	64:45	10	( ttag_t ) atoi ( tagname )
LEAF_NODE	64:37	64:37	11	(
TYPE_NAME	64:38	64:38	11	ttag_t
LEAF_NODE	64:38	64:38	12	ttag_t
LEAF_NODE	64:44	64:44	11	)
FUNCTION_CALL	64:45	64:57	11	atoi ( tagname )
CALLEE	64:45	64:45	12	atoi
LEAF_NODE	64:45	64:45	13	atoi
LEAF_NODE	64:49	64:49	12	(
ARGUMENT	64:50	64:50	12	tagname
FIELD	64:50	64:50	13	tagname
LEAF_NODE	64:50	64:50	14	tagname
LEAF_NODE	64:57	64:57	12	)
LEAF_NODE	64:58	64:58	10	)
LEAF_NODE	64:59	64:59	6	;
SELECTION	65:4	66:8	3	
KEYWORD	65:4	65:4	4	else
LEAF_NODE	65:4	65:4	5	else
STATEMENTS	66:8	66:8	4	
EXPR_STATEMENT	66:8	66:46	5	fip = TIFFFieldWithName ( tiff , tagname ) ;
EXPR	66:8	66:8	6	fip = TIFFFieldWithName ( tiff , tagname )
ASSIGN	66:8	66:14	7	fip = TIFFFieldWithName ( tiff , tagname )
LVAL	66:8	66:8	8	fip
FIELD	66:8	66:8	9	fip
LEAF_NODE	66:8	66:8	10	fip
ASSIGN_OP	66:12	66:12	8	=
LEAF_NODE	66:12	66:12	9	=
RVAL	66:14	66:14	8	TIFFFieldWithName ( tiff , tagname )
FUNCTION_CALL	66:14	66:45	9	TIFFFieldWithName ( tiff , tagname )
CALLEE	66:14	66:14	10	TIFFFieldWithName
LEAF_NODE	66:14	66:14	11	TIFFFieldWithName
LEAF_NODE	66:31	66:31	10	(
ARGUMENT	66:32	66:32	10	tiff
FIELD	66:32	66:32	11	tiff
LEAF_NODE	66:32	66:32	12	tiff
LEAF_NODE	66:36	66:36	10	,
ARGUMENT	66:38	66:38	10	tagname
FIELD	66:38	66:38	11	tagname
LEAF_NODE	66:38	66:38	12	tagname
LEAF_NODE	66:45	66:45	10	)
LEAF_NODE	66:46	66:46	6	;
SELECTION	68:4	68:14	3	
KEYWORD	68:4	68:4	4	if
LEAF_NODE	68:4	68:4	5	if
LEAF_NODE	68:7	68:7	4	(
CONDITION	68:8	68:8	4	! fip
EXPR	68:8	68:8	5	! fip
UNARY_EXPR	68:8	68:9	6	! fip
UNARY_OPERATOR	68:8	68:8	7	!
LEAF_NODE	68:8	68:8	8	!
FIELD	68:9	68:9	7	fip
LEAF_NODE	68:9	68:9	8	fip
LEAF_NODE	68:12	68:12	4	)
STATEMENTS	68:14	71:4	4	
LEAF_NODE	68:14	68:14	5	{
STATEMENTS	69:8	70:8	5	
EXPR_STATEMENT	69:8	69:76	6	fprintf ( stderr , "Field name \"%s\" is not recognised.\n" , tagname ) ;
EXPR	69:8	69:8	7	fprintf ( stderr , "Field name \"%s\" is not recognised.\n" , tagname )
FUNCTION_CALL	69:8	69:75	8	fprintf ( stderr , "Field name \"%s\" is not recognised.\n" , tagname )
CALLEE	69:8	69:8	9	fprintf
LEAF_NODE	69:8	69:8	10	fprintf
LEAF_NODE	69:15	69:15	9	(
ARGUMENT	69:17	69:17	9	stderr
FIELD	69:17	69:17	10	stderr
LEAF_NODE	69:17	69:17	11	stderr
LEAF_NODE	69:23	69:23	9	,
ARGUMENT	69:25	69:25	9	"Field name \"%s\" is not recognised.\n"
FIELD	69:25	69:25	10	"Field name \"%s\" is not recognised.\n"
LEAF_NODE	69:25	69:25	11	"Field name \"%s\" is not recognised.\n"
LEAF_NODE	69:65	69:65	9	,
ARGUMENT	69:67	69:67	9	tagname
FIELD	69:67	69:67	10	tagname
LEAF_NODE	69:67	69:67	11	tagname
LEAF_NODE	69:75	69:75	9	)
LEAF_NODE	69:76	69:76	7	;
JUMP_STATEMENT	70:8	70:32	6	return ( TIFFField * ) NULL ;
KEYWORD	70:8	70:8	7	return
LEAF_NODE	70:8	70:8	8	return
DESTINATION	70:15	70:15	7	( TIFFField * ) NULL
EXPR	70:15	70:28	8	( TIFFField * ) NULL
LEAF_NODE	70:15	70:15	9	(
TYPE_NAME	70:16	70:16	9	TIFFField
LEAF_NODE	70:16	70:16	10	TIFFField
LEAF_NODE	70:26	70:26	9	*
LEAF_NODE	70:27	70:27	9	)
FIELD	70:28	70:28	9	NULL
LEAF_NODE	70:28	70:28	10	NULL
LEAF_NODE	70:32	70:32	7	;
LEAF_NODE	71:4	71:4	5	}
JUMP_STATEMENT	73:4	73:14	3	return fip ;
KEYWORD	73:4	73:4	4	return
LEAF_NODE	73:4	73:4	5	return
DESTINATION	73:11	73:11	4	fip
EXPR	73:11	73:11	5	fip
FIELD	73:11	73:11	6	fip
LEAF_NODE	73:11	73:11	7	fip
LEAF_NODE	73:14	73:14	4	;
LEAF_NODE	74:0	74:0	2	}
FUNCTION_DEF	76:0	364:0	1	
RETURN_TYPE	76:0	76:0	2	int
TYPE_NAME	76:0	76:0	3	int
LEAF_NODE	76:0	76:0	4	int
FUNCTION_NAME	77:0	77:0	2	main
LEAF_NODE	77:0	77:0	3	main
PARAMETER_LIST	77:4	77:27	2	( int argc , char * [ ] argv )
LEAF_NODE	77:4	77:4	3	(
PARAMETER_DECL	77:5	77:9	3	int argc
TYPE	77:5	77:5	4	int
TYPE_NAME	77:5	77:5	5	int
LEAF_NODE	77:5	77:5	6	int
NAME	77:9	77:9	4	argc
LEAF_NODE	77:9	77:9	5	argc
LEAF_NODE	77:13	77:13	3	,
PARAMETER_DECL	77:15	77:21	3	char * [ ] argv
TYPE	77:15	77:25	4	char * [ ]
TYPE_NAME	77:15	77:15	5	char
LEAF_NODE	77:15	77:15	6	char
POINTER	77:19	77:19	5	*
LEAF_NODE	77:19	77:19	6	*
TYPE_SUFFIX	77:25	77:26	5	[ ]
LEAF_NODE	77:25	77:25	6	[
LEAF_NODE	77:26	77:26	6	]
NAME	77:21	77:21	4	argv
LEAF_NODE	77:21	77:21	5	argv
LEAF_NODE	77:27	77:27	3	)
LEAF_NODE	78:0	78:0	2	{
STATEMENTS	79:4	363:4	2	
SIMPLE_DECL	79:4	79:14	3	TIFF * tiff ;
VAR_DECL	79:4	79:10	4	TIFF * tiff
TYPE	79:4	79:9	5	TIFF *
TYPE_NAME	79:4	79:4	6	TIFF
LEAF_NODE	79:4	79:4	7	TIFF
POINTER	79:9	79:9	6	*
LEAF_NODE	79:9	79:9	7	*
NAME	79:10	79:10	5	tiff
LEAF_NODE	79:10	79:10	6	tiff
LEAF_NODE	79:14	79:14	4	;
SIMPLE_DECL	80:4	80:18	3	int arg_index ;
VAR_DECL	80:4	80:9	4	int arg_index
TYPE	80:4	80:4	5	int
TYPE_NAME	80:4	80:4	6	int
LEAF_NODE	80:4	80:4	7	int
NAME	80:9	80:9	5	arg_index
LEAF_NODE	80:9	80:9	6	arg_index
LEAF_NODE	80:18	80:18	4	;
SELECTION	82:4	83:8	3	
KEYWORD	82:4	82:4	4	if
LEAF_NODE	82:4	82:4	5	if
LEAF_NODE	82:7	82:7	4	(
CONDITION	82:8	82:8	4	argc < 2
EXPR	82:8	82:15	5	argc < 2
FIELD	82:8	82:8	6	argc
LEAF_NODE	82:8	82:8	7	argc
REL_OPERATOR	82:13	82:13	6	<
LEAF_NODE	82:13	82:13	7	<
FIELD	82:15	82:15	6	2
LEAF_NODE	82:15	82:15	7	2
LEAF_NODE	82:16	82:16	4	)
STATEMENTS	83:8	83:8	4	
EXPR_STATEMENT	83:8	83:15	5	usage ( ) ;
EXPR	83:8	83:8	6	usage ( )
FUNCTION_CALL	83:8	83:14	7	usage ( )
CALLEE	83:8	83:8	8	usage
LEAF_NODE	83:8	83:8	9	usage
LEAF_NODE	83:13	83:13	8	(
LEAF_NODE	83:14	83:14	8	)
LEAF_NODE	83:15	83:15	6	;
EXPR_STATEMENT	85:4	85:39	3	tiff = TIFFOpen ( argv [ argc - 1 ] , "r+" ) ;
EXPR	85:4	85:4	4	tiff = TIFFOpen ( argv [ argc - 1 ] , "r+" )
ASSIGN	85:4	85:11	5	tiff = TIFFOpen ( argv [ argc - 1 ] , "r+" )
LVAL	85:4	85:4	6	tiff
FIELD	85:4	85:4	7	tiff
LEAF_NODE	85:4	85:4	8	tiff
ASSIGN_OP	85:9	85:9	6	=
LEAF_NODE	85:9	85:9	7	=
RVAL	85:11	85:11	6	TIFFOpen ( argv [ argc - 1 ] , "r+" )
FUNCTION_CALL	85:11	85:38	7	TIFFOpen ( argv [ argc - 1 ] , "r+" )
CALLEE	85:11	85:11	8	TIFFOpen
LEAF_NODE	85:11	85:11	9	TIFFOpen
LEAF_NODE	85:19	85:19	8	(
ARGUMENT	85:20	85:20	8	argv [ argc - 1 ]
FIELD	85:20	85:31	9	argv [ argc - 1 ]
LEAF_NODE	85:20	85:20	10	argv
LEAF_NODE	85:24	85:24	10	[
EXPR	85:25	85:30	10	argc - 1
FIELD	85:25	85:25	11	argc
LEAF_NODE	85:25	85:25	12	argc
LEAF_NODE	85:29	85:29	11	-
FIELD	85:30	85:30	11	1
LEAF_NODE	85:30	85:30	12	1
LEAF_NODE	85:31	85:31	10	]
LEAF_NODE	85:32	85:32	8	,
ARGUMENT	85:34	85:34	8	"r+"
FIELD	85:34	85:34	9	"r+"
LEAF_NODE	85:34	85:34	10	"r+"
LEAF_NODE	85:38	85:38	8	)
LEAF_NODE	85:39	85:39	4	;
SELECTION	86:4	87:8	3	
KEYWORD	86:4	86:4	4	if
LEAF_NODE	86:4	86:4	5	if
LEAF_NODE	86:7	86:7	4	(
CONDITION	86:8	86:8	4	tiff == NULL
EXPR	86:8	86:16	5	tiff == NULL
FIELD	86:8	86:8	6	tiff
LEAF_NODE	86:8	86:8	7	tiff
EQ_OPERATOR	86:13	86:13	6	==
LEAF_NODE	86:13	86:13	7	==
FIELD	86:16	86:16	6	NULL
LEAF_NODE	86:16	86:16	7	NULL
LEAF_NODE	86:20	86:20	4	)
STATEMENTS	87:8	87:8	4	
JUMP_STATEMENT	87:8	87:16	5	return 2 ;
KEYWORD	87:8	87:8	6	return
LEAF_NODE	87:8	87:8	7	return
DESTINATION	87:15	87:15	6	2
EXPR	87:15	87:15	7	2
FIELD	87:15	87:15	8	2
LEAF_NODE	87:15	87:15	9	2
LEAF_NODE	87:16	87:16	6	;
ITERATION	89:4	89:58	3	
KEYWORD	89:4	89:4	4	for
LEAF_NODE	89:4	89:4	5	for
LEAF_NODE	89:7	89:7	4	(
FOR_INIT	89:9	89:22	4	arg_index = 1 ;
EXPR	89:9	89:9	5	arg_index = 1
ASSIGN	89:9	89:21	6	arg_index = 1
LVAL	89:9	89:9	7	arg_index
FIELD	89:9	89:9	8	arg_index
LEAF_NODE	89:9	89:9	9	arg_index
ASSIGN_OP	89:19	89:19	7	=
LEAF_NODE	89:19	89:19	8	=
RVAL	89:21	89:21	7	1
FIELD	89:21	89:21	8	1
LEAF_NODE	89:21	89:21	9	1
LEAF_NODE	89:22	89:22	5	;
CONDITION	89:24	89:24	4	arg_index < argc - 1
EXPR	89:24	89:41	5	arg_index < argc - 1
FIELD	89:24	89:24	6	arg_index
LEAF_NODE	89:24	89:24	7	arg_index
REL_OPERATOR	89:34	89:34	6	<
LEAF_NODE	89:34	89:34	7	<
FIELD	89:36	89:36	6	argc
LEAF_NODE	89:36	89:36	7	argc
LEAF_NODE	89:40	89:40	6	-
FIELD	89:41	89:41	6	1
LEAF_NODE	89:41	89:41	7	1
LEAF_NODE	89:42	89:42	4	;
FOR_EXPR	89:44	89:44	4	arg_index ++
EXPR	89:44	89:44	5	arg_index ++
FIELD	89:44	89:53	6	arg_index ++
LEAF_NODE	89:44	89:44	7	arg_index
LEAF_NODE	89:53	89:53	7	++
LEAF_NODE	89:56	89:56	4	)
STATEMENTS	89:58	359:4	4	
LEAF_NODE	89:58	89:58	5	{
STATEMENTS	90:1	354:10	5	
SELECTION	90:1	90:62	6	
KEYWORD	90:1	90:1	7	if
LEAF_NODE	90:1	90:1	8	if
LEAF_NODE	90:4	90:4	7	(
CONDITION	90:5	90:5	7	strcmp ( argv [ arg_index ] , "-d" ) == 0 && arg_index < argc - 2
EXPR	90:5	90:5	8	strcmp ( argv [ arg_index ] , "-d" ) == 0 && arg_index < argc - 2
AND	90:5	90:42	9	strcmp ( argv [ arg_index ] , "-d" ) == 0 && arg_index < argc - 2
EXPR	90:5	90:37	10	strcmp ( argv [ arg_index ] , "-d" ) == 0
FUNCTION_CALL	90:5	90:32	11	strcmp ( argv [ arg_index ] , "-d" )
CALLEE	90:5	90:5	12	strcmp
LEAF_NODE	90:5	90:5	13	strcmp
LEAF_NODE	90:11	90:11	12	(
ARGUMENT	90:12	90:12	12	argv [ arg_index ]
FIELD	90:12	90:26	13	argv [ arg_index ]
LEAF_NODE	90:12	90:12	14	argv
LEAF_NODE	90:16	90:16	14	[
EXPR	90:17	90:17	14	arg_index
FIELD	90:17	90:17	15	arg_index
LEAF_NODE	90:17	90:17	16	arg_index
LEAF_NODE	90:26	90:26	14	]
LEAF_NODE	90:27	90:27	12	,
ARGUMENT	90:28	90:28	12	"-d"
FIELD	90:28	90:28	13	"-d"
LEAF_NODE	90:28	90:28	14	"-d"
LEAF_NODE	90:32	90:32	12	)
EQ_OPERATOR	90:34	90:34	11	==
LEAF_NODE	90:34	90:34	12	==
FIELD	90:37	90:37	11	0
LEAF_NODE	90:37	90:37	12	0
LEAF_NODE	90:39	90:39	10	&&
EXPR	90:42	90:59	10	arg_index < argc - 2
FIELD	90:42	90:42	11	arg_index
LEAF_NODE	90:42	90:42	12	arg_index
REL_OPERATOR	90:52	90:52	11	<
LEAF_NODE	90:52	90:52	12	<
FIELD	90:54	90:54	11	argc
LEAF_NODE	90:54	90:54	12	argc
LEAF_NODE	90:58	90:58	11	-
FIELD	90:59	90:59	11	2
LEAF_NODE	90:59	90:59	12	2
LEAF_NODE	90:60	90:60	7	)
STATEMENTS	90:62	98:1	7	
LEAF_NODE	90:62	90:62	8	{
STATEMENTS	91:5	97:5	8	
EXPR_STATEMENT	91:5	91:16	9	arg_index ++ ;
EXPR	91:5	91:5	10	arg_index ++
FIELD	91:5	91:14	11	arg_index ++
LEAF_NODE	91:5	91:5	12	arg_index
LEAF_NODE	91:14	91:14	12	++
LEAF_NODE	91:16	91:16	10	;
SELECTION	92:5	93:12	9	
KEYWORD	92:5	92:5	10	if
LEAF_NODE	92:5	92:5	11	if
LEAF_NODE	92:7	92:7	10	(
CONDITION	92:9	92:9	10	TIFFSetDirectory ( tiff , atoi ( argv [ arg_index ] ) ) != 1
EXPR	92:9	92:59	11	TIFFSetDirectory ( tiff , atoi ( argv [ arg_index ] ) ) != 1
FUNCTION_CALL	92:9	92:54	12	TIFFSetDirectory ( tiff , atoi ( argv [ arg_index ] ) )
CALLEE	92:9	92:9	13	TIFFSetDirectory
LEAF_NODE	92:9	92:9	14	TIFFSetDirectory
LEAF_NODE	92:25	92:25	13	(
ARGUMENT	92:26	92:26	13	tiff
FIELD	92:26	92:26	14	tiff
LEAF_NODE	92:26	92:26	15	tiff
LEAF_NODE	92:30	92:30	13	,
ARGUMENT	92:32	92:32	13	atoi ( argv [ arg_index ] )
FUNCTION_CALL	92:32	92:52	14	atoi ( argv [ arg_index ] )
CALLEE	92:32	92:32	15	atoi
LEAF_NODE	92:32	92:32	16	atoi
LEAF_NODE	92:36	92:36	15	(
ARGUMENT	92:37	92:37	15	argv [ arg_index ]
FIELD	92:37	92:51	16	argv [ arg_index ]
LEAF_NODE	92:37	92:37	17	argv
LEAF_NODE	92:41	92:41	17	[
EXPR	92:42	92:42	17	arg_index
FIELD	92:42	92:42	18	arg_index
LEAF_NODE	92:42	92:42	19	arg_index
LEAF_NODE	92:51	92:51	17	]
LEAF_NODE	92:52	92:52	15	)
LEAF_NODE	92:54	92:54	13	)
EQ_OPERATOR	92:56	92:56	12	!=
LEAF_NODE	92:56	92:56	13	!=
FIELD	92:59	92:59	12	1
LEAF_NODE	92:59	92:59	13	1
LEAF_NODE	92:61	92:61	10	)
STATEMENTS	93:12	96:12	10	
LEAF_NODE	93:12	93:12	11	{
STATEMENTS	94:15	95:15	11	
EXPR_STATEMENT	94:15	94:81	12	fprintf ( stderr , "Failed to set directory=%s\n" , argv [ arg_index ] ) ;
EXPR	94:15	94:15	13	fprintf ( stderr , "Failed to set directory=%s\n" , argv [ arg_index ] )
FUNCTION_CALL	94:15	94:80	14	fprintf ( stderr , "Failed to set directory=%s\n" , argv [ arg_index ] )
CALLEE	94:15	94:15	15	fprintf
LEAF_NODE	94:15	94:15	16	fprintf
LEAF_NODE	94:22	94:22	15	(
ARGUMENT	94:24	94:24	15	stderr
FIELD	94:24	94:24	16	stderr
LEAF_NODE	94:24	94:24	17	stderr
LEAF_NODE	94:30	94:30	15	,
ARGUMENT	94:32	94:32	15	"Failed to set directory=%s\n"
FIELD	94:32	94:32	16	"Failed to set directory=%s\n"
LEAF_NODE	94:32	94:32	17	"Failed to set directory=%s\n"
LEAF_NODE	94:62	94:62	15	,
ARGUMENT	94:64	94:64	15	argv [ arg_index ]
FIELD	94:64	94:78	16	argv [ arg_index ]
LEAF_NODE	94:64	94:64	17	argv
LEAF_NODE	94:68	94:68	17	[
EXPR	94:69	94:69	17	arg_index
FIELD	94:69	94:69	18	arg_index
LEAF_NODE	94:69	94:69	19	arg_index
LEAF_NODE	94:78	94:78	17	]
LEAF_NODE	94:80	94:80	15	)
LEAF_NODE	94:81	94:81	13	;
JUMP_STATEMENT	95:15	95:23	12	return 6 ;
KEYWORD	95:15	95:15	13	return
LEAF_NODE	95:15	95:15	14	return
DESTINATION	95:22	95:22	13	6
EXPR	95:22	95:22	14	6
FIELD	95:22	95:22	15	6
LEAF_NODE	95:22	95:22	16	6
LEAF_NODE	95:23	95:23	13	;
LEAF_NODE	96:12	96:12	11	}
EXPR_STATEMENT	97:5	97:16	9	arg_index ++ ;
EXPR	97:5	97:5	10	arg_index ++
FIELD	97:5	97:14	11	arg_index ++
LEAF_NODE	97:5	97:5	12	arg_index
LEAF_NODE	97:14	97:14	12	++
LEAF_NODE	97:16	97:16	10	;
LEAF_NODE	98:1	98:1	8	}
SELECTION	99:1	99:63	6	
KEYWORD	99:1	99:1	7	if
LEAF_NODE	99:1	99:1	8	if
LEAF_NODE	99:4	99:4	7	(
CONDITION	99:5	99:5	7	strcmp ( argv [ arg_index ] , "-sd" ) == 0 && arg_index < argc - 2
EXPR	99:5	99:5	8	strcmp ( argv [ arg_index ] , "-sd" ) == 0 && arg_index < argc - 2
AND	99:5	99:43	9	strcmp ( argv [ arg_index ] , "-sd" ) == 0 && arg_index < argc - 2
EXPR	99:5	99:38	10	strcmp ( argv [ arg_index ] , "-sd" ) == 0
FUNCTION_CALL	99:5	99:33	11	strcmp ( argv [ arg_index ] , "-sd" )
CALLEE	99:5	99:5	12	strcmp
LEAF_NODE	99:5	99:5	13	strcmp
LEAF_NODE	99:11	99:11	12	(
ARGUMENT	99:12	99:12	12	argv [ arg_index ]
FIELD	99:12	99:26	13	argv [ arg_index ]
LEAF_NODE	99:12	99:12	14	argv
LEAF_NODE	99:16	99:16	14	[
EXPR	99:17	99:17	14	arg_index
FIELD	99:17	99:17	15	arg_index
LEAF_NODE	99:17	99:17	16	arg_index
LEAF_NODE	99:26	99:26	14	]
LEAF_NODE	99:27	99:27	12	,
ARGUMENT	99:28	99:28	12	"-sd"
FIELD	99:28	99:28	13	"-sd"
LEAF_NODE	99:28	99:28	14	"-sd"
LEAF_NODE	99:33	99:33	12	)
EQ_OPERATOR	99:35	99:35	11	==
LEAF_NODE	99:35	99:35	12	==
FIELD	99:38	99:38	11	0
LEAF_NODE	99:38	99:38	12	0
LEAF_NODE	99:40	99:40	10	&&
EXPR	99:43	99:60	10	arg_index < argc - 2
FIELD	99:43	99:43	11	arg_index
LEAF_NODE	99:43	99:43	12	arg_index
REL_OPERATOR	99:53	99:53	11	<
LEAF_NODE	99:53	99:53	12	<
FIELD	99:55	99:55	11	argc
LEAF_NODE	99:55	99:55	12	argc
LEAF_NODE	99:59	99:59	11	-
FIELD	99:60	99:60	11	2
LEAF_NODE	99:60	99:60	12	2
LEAF_NODE	99:61	99:61	7	)
STATEMENTS	99:63	107:1	7	
LEAF_NODE	99:63	99:63	8	{
STATEMENTS	100:5	106:5	8	
EXPR_STATEMENT	100:5	100:16	9	arg_index ++ ;
EXPR	100:5	100:5	10	arg_index ++
FIELD	100:5	100:14	11	arg_index ++
LEAF_NODE	100:5	100:5	12	arg_index
LEAF_NODE	100:14	100:14	12	++
LEAF_NODE	100:16	100:16	10	;
SELECTION	101:5	102:12	9	
KEYWORD	101:5	101:5	10	if
LEAF_NODE	101:5	101:5	11	if
LEAF_NODE	101:7	101:7	10	(
CONDITION	101:9	101:9	10	TIFFSetSubDirectory ( tiff , atoi ( argv [ arg_index ] ) ) != 1
EXPR	101:9	101:62	11	TIFFSetSubDirectory ( tiff , atoi ( argv [ arg_index ] ) ) != 1
FUNCTION_CALL	101:9	101:57	12	TIFFSetSubDirectory ( tiff , atoi ( argv [ arg_index ] ) )
CALLEE	101:9	101:9	13	TIFFSetSubDirectory
LEAF_NODE	101:9	101:9	14	TIFFSetSubDirectory
LEAF_NODE	101:28	101:28	13	(
ARGUMENT	101:29	101:29	13	tiff
FIELD	101:29	101:29	14	tiff
LEAF_NODE	101:29	101:29	15	tiff
LEAF_NODE	101:33	101:33	13	,
ARGUMENT	101:35	101:35	13	atoi ( argv [ arg_index ] )
FUNCTION_CALL	101:35	101:55	14	atoi ( argv [ arg_index ] )
CALLEE	101:35	101:35	15	atoi
LEAF_NODE	101:35	101:35	16	atoi
LEAF_NODE	101:39	101:39	15	(
ARGUMENT	101:40	101:40	15	argv [ arg_index ]
FIELD	101:40	101:54	16	argv [ arg_index ]
LEAF_NODE	101:40	101:40	17	argv
LEAF_NODE	101:44	101:44	17	[
EXPR	101:45	101:45	17	arg_index
FIELD	101:45	101:45	18	arg_index
LEAF_NODE	101:45	101:45	19	arg_index
LEAF_NODE	101:54	101:54	17	]
LEAF_NODE	101:55	101:55	15	)
LEAF_NODE	101:57	101:57	13	)
EQ_OPERATOR	101:59	101:59	12	!=
LEAF_NODE	101:59	101:59	13	!=
FIELD	101:62	101:62	12	1
LEAF_NODE	101:62	101:62	13	1
LEAF_NODE	101:64	101:64	10	)
STATEMENTS	102:12	105:12	10	
LEAF_NODE	102:12	102:12	11	{
STATEMENTS	103:15	104:15	11	
EXPR_STATEMENT	103:15	103:85	12	fprintf ( stderr , "Failed to set sub directory=%s\n" , argv [ arg_index ] ) ;
EXPR	103:15	103:15	13	fprintf ( stderr , "Failed to set sub directory=%s\n" , argv [ arg_index ] )
FUNCTION_CALL	103:15	103:84	14	fprintf ( stderr , "Failed to set sub directory=%s\n" , argv [ arg_index ] )
CALLEE	103:15	103:15	15	fprintf
LEAF_NODE	103:15	103:15	16	fprintf
LEAF_NODE	103:22	103:22	15	(
ARGUMENT	103:24	103:24	15	stderr
FIELD	103:24	103:24	16	stderr
LEAF_NODE	103:24	103:24	17	stderr
LEAF_NODE	103:30	103:30	15	,
ARGUMENT	103:32	103:32	15	"Failed to set sub directory=%s\n"
FIELD	103:32	103:32	16	"Failed to set sub directory=%s\n"
LEAF_NODE	103:32	103:32	17	"Failed to set sub directory=%s\n"
LEAF_NODE	103:66	103:66	15	,
ARGUMENT	103:68	103:68	15	argv [ arg_index ]
FIELD	103:68	103:82	16	argv [ arg_index ]
LEAF_NODE	103:68	103:68	17	argv
LEAF_NODE	103:72	103:72	17	[
EXPR	103:73	103:73	17	arg_index
FIELD	103:73	103:73	18	arg_index
LEAF_NODE	103:73	103:73	19	arg_index
LEAF_NODE	103:82	103:82	17	]
LEAF_NODE	103:84	103:84	15	)
LEAF_NODE	103:85	103:85	13	;
JUMP_STATEMENT	104:15	104:23	12	return 7 ;
KEYWORD	104:15	104:15	13	return
LEAF_NODE	104:15	104:15	14	return
DESTINATION	104:22	104:22	13	7
EXPR	104:22	104:22	14	7
FIELD	104:22	104:22	15	7
LEAF_NODE	104:22	104:22	16	7
LEAF_NODE	104:23	104:23	13	;
LEAF_NODE	105:12	105:12	11	}
EXPR_STATEMENT	106:5	106:16	9	arg_index ++ ;
EXPR	106:5	106:5	10	arg_index ++
FIELD	106:5	106:14	11	arg_index ++
LEAF_NODE	106:5	106:5	12	arg_index
LEAF_NODE	106:14	106:14	12	++
LEAF_NODE	106:16	106:16	10	;
LEAF_NODE	107:1	107:1	8	}
SELECTION	109:4	109:65	6	
KEYWORD	109:4	109:4	7	if
LEAF_NODE	109:4	109:4	8	if
LEAF_NODE	109:7	109:7	7	(
CONDITION	109:8	109:8	7	strcmp ( argv [ arg_index ] , "-u" ) == 0 && arg_index < argc - 2
EXPR	109:8	109:8	8	strcmp ( argv [ arg_index ] , "-u" ) == 0 && arg_index < argc - 2
AND	109:8	109:45	9	strcmp ( argv [ arg_index ] , "-u" ) == 0 && arg_index < argc - 2
EXPR	109:8	109:40	10	strcmp ( argv [ arg_index ] , "-u" ) == 0
FUNCTION_CALL	109:8	109:35	11	strcmp ( argv [ arg_index ] , "-u" )
CALLEE	109:8	109:8	12	strcmp
LEAF_NODE	109:8	109:8	13	strcmp
LEAF_NODE	109:14	109:14	12	(
ARGUMENT	109:15	109:15	12	argv [ arg_index ]
FIELD	109:15	109:29	13	argv [ arg_index ]
LEAF_NODE	109:15	109:15	14	argv
LEAF_NODE	109:19	109:19	14	[
EXPR	109:20	109:20	14	arg_index
FIELD	109:20	109:20	15	arg_index
LEAF_NODE	109:20	109:20	16	arg_index
LEAF_NODE	109:29	109:29	14	]
LEAF_NODE	109:30	109:30	12	,
ARGUMENT	109:31	109:31	12	"-u"
FIELD	109:31	109:31	13	"-u"
LEAF_NODE	109:31	109:31	14	"-u"
LEAF_NODE	109:35	109:35	12	)
EQ_OPERATOR	109:37	109:37	11	==
LEAF_NODE	109:37	109:37	12	==
FIELD	109:40	109:40	11	0
LEAF_NODE	109:40	109:40	12	0
LEAF_NODE	109:42	109:42	10	&&
EXPR	109:45	109:62	10	arg_index < argc - 2
FIELD	109:45	109:45	11	arg_index
LEAF_NODE	109:45	109:45	12	arg_index
REL_OPERATOR	109:55	109:55	11	<
LEAF_NODE	109:55	109:55	12	<
FIELD	109:57	109:57	11	argc
LEAF_NODE	109:57	109:57	12	argc
LEAF_NODE	109:61	109:61	11	-
FIELD	109:62	109:62	11	2
LEAF_NODE	109:62	109:62	12	2
LEAF_NODE	109:63	109:63	7	)
STATEMENTS	109:65	123:4	7	
LEAF_NODE	109:65	109:65	8	{
STATEMENTS	110:12	122:12	8	
SIMPLE_DECL	110:12	110:32	9	const TIFFField * fip ;
VAR_DECL	110:12	110:29	10	const TIFFField * fip
TYPE	110:12	110:28	11	const TIFFField *
TYPE_NAME	110:12	110:18	12	const TIFFField
LEAF_NODE	110:12	110:12	13	const
LEAF_NODE	110:18	110:18	13	TIFFField
POINTER	110:28	110:28	12	*
LEAF_NODE	110:28	110:28	13	*
NAME	110:29	110:29	11	fip
LEAF_NODE	110:29	110:29	12	fip
LEAF_NODE	110:32	110:32	10	;
SIMPLE_DECL	111:12	111:31	9	const char * tagname ;
VAR_DECL	111:12	111:24	10	const char * tagname
TYPE	111:12	111:23	11	const char *
TYPE_NAME	111:12	111:18	12	const char
LEAF_NODE	111:12	111:12	13	const
LEAF_NODE	111:18	111:18	13	char
POINTER	111:23	111:23	12	*
LEAF_NODE	111:23	111:23	13	*
NAME	111:24	111:24	11	tagname
LEAF_NODE	111:24	111:24	12	tagname
LEAF_NODE	111:31	111:31	10	;
EXPR_STATEMENT	112:12	112:23	9	arg_index ++ ;
EXPR	112:12	112:12	10	arg_index ++
FIELD	112:12	112:21	11	arg_index ++
LEAF_NODE	112:12	112:12	12	arg_index
LEAF_NODE	112:21	112:21	12	++
LEAF_NODE	112:23	112:23	10	;
EXPR_STATEMENT	113:12	113:37	9	tagname = argv [ arg_index ] ;
EXPR	113:12	113:12	10	tagname = argv [ arg_index ]
ASSIGN	113:12	113:22	11	tagname = argv [ arg_index ]
LVAL	113:12	113:12	12	tagname
FIELD	113:12	113:12	13	tagname
LEAF_NODE	113:12	113:12	14	tagname
ASSIGN_OP	113:20	113:20	12	=
LEAF_NODE	113:20	113:20	13	=
RVAL	113:22	113:22	12	argv [ arg_index ]
FIELD	113:22	113:36	13	argv [ arg_index ]
LEAF_NODE	113:22	113:22	14	argv
LEAF_NODE	113:26	113:26	14	[
EXPR	113:27	113:27	14	arg_index
FIELD	113:27	113:27	15	arg_index
LEAF_NODE	113:27	113:27	16	arg_index
LEAF_NODE	113:36	113:36	14	]
LEAF_NODE	113:37	113:37	10	;
EXPR_STATEMENT	114:12	114:41	9	fip = GetField ( tiff , tagname ) ;
EXPR	114:12	114:12	10	fip = GetField ( tiff , tagname )
ASSIGN	114:12	114:18	11	fip = GetField ( tiff , tagname )
LVAL	114:12	114:12	12	fip
FIELD	114:12	114:12	13	fip
LEAF_NODE	114:12	114:12	14	fip
ASSIGN_OP	114:16	114:16	12	=
LEAF_NODE	114:16	114:16	13	=
RVAL	114:18	114:18	12	GetField ( tiff , tagname )
FUNCTION_CALL	114:18	114:40	13	GetField ( tiff , tagname )
CALLEE	114:18	114:18	14	GetField
LEAF_NODE	114:18	114:18	15	GetField
LEAF_NODE	114:26	114:26	14	(
ARGUMENT	114:27	114:27	14	tiff
FIELD	114:27	114:27	15	tiff
LEAF_NODE	114:27	114:27	16	tiff
LEAF_NODE	114:31	114:31	14	,
ARGUMENT	114:33	114:33	14	tagname
FIELD	114:33	114:33	15	tagname
LEAF_NODE	114:33	114:33	16	tagname
LEAF_NODE	114:40	114:40	14	)
LEAF_NODE	114:41	114:41	10	;
SELECTION	115:12	116:16	9	
KEYWORD	115:12	115:12	10	if
LEAF_NODE	115:12	115:12	11	if
LEAF_NODE	115:15	115:15	10	(
CONDITION	115:16	115:16	10	! fip
EXPR	115:16	115:16	11	! fip
UNARY_EXPR	115:16	115:17	12	! fip
UNARY_OPERATOR	115:16	115:16	13	!
LEAF_NODE	115:16	115:16	14	!
FIELD	115:17	115:17	13	fip
LEAF_NODE	115:17	115:17	14	fip
LEAF_NODE	115:20	115:20	10	)
STATEMENTS	116:16	116:16	10	
JUMP_STATEMENT	116:16	116:24	11	return 3 ;
KEYWORD	116:16	116:16	12	return
LEAF_NODE	116:16	116:16	13	return
DESTINATION	116:23	116:23	12	3
EXPR	116:23	116:23	13	3
FIELD	116:23	116:23	14	3
LEAF_NODE	116:23	116:23	15	3
LEAF_NODE	116:24	116:24	12	;
SELECTION	118:12	119:12	9	
KEYWORD	118:12	118:12	10	if
LEAF_NODE	118:12	118:12	11	if
LEAF_NODE	118:15	118:15	10	(
CONDITION	118:16	118:16	10	TIFFUnsetField ( tiff , TIFFFieldTag ( fip ) ) != 1
EXPR	118:16	118:59	11	TIFFUnsetField ( tiff , TIFFFieldTag ( fip ) ) != 1
FUNCTION_CALL	118:16	118:54	12	TIFFUnsetField ( tiff , TIFFFieldTag ( fip ) )
CALLEE	118:16	118:16	13	TIFFUnsetField
LEAF_NODE	118:16	118:16	14	TIFFUnsetField
LEAF_NODE	118:30	118:30	13	(
ARGUMENT	118:31	118:31	13	tiff
FIELD	118:31	118:31	14	tiff
LEAF_NODE	118:31	118:31	15	tiff
LEAF_NODE	118:35	118:35	13	,
ARGUMENT	118:37	118:37	13	TIFFFieldTag ( fip )
FUNCTION_CALL	118:37	118:53	14	TIFFFieldTag ( fip )
CALLEE	118:37	118:37	15	TIFFFieldTag
LEAF_NODE	118:37	118:37	16	TIFFFieldTag
LEAF_NODE	118:49	118:49	15	(
ARGUMENT	118:50	118:50	15	fip
FIELD	118:50	118:50	16	fip
LEAF_NODE	118:50	118:50	17	fip
LEAF_NODE	118:53	118:53	15	)
LEAF_NODE	118:54	118:54	13	)
EQ_OPERATOR	118:56	118:56	12	!=
LEAF_NODE	118:56	118:56	13	!=
FIELD	118:59	118:59	12	1
LEAF_NODE	118:59	118:59	13	1
LEAF_NODE	118:60	118:60	10	)
STATEMENTS	119:12	121:12	10	
LEAF_NODE	119:12	119:12	11	{
STATEMENTS	120:20	120:20	11	
EXPR_STATEMENT	120:20	120:79	12	fprintf ( stderr , "Failed to unset %s\n" , TIFFFieldName ( fip ) ) ;
EXPR	120:20	120:20	13	fprintf ( stderr , "Failed to unset %s\n" , TIFFFieldName ( fip ) )
FUNCTION_CALL	120:20	120:78	14	fprintf ( stderr , "Failed to unset %s\n" , TIFFFieldName ( fip ) )
CALLEE	120:20	120:20	15	fprintf
LEAF_NODE	120:20	120:20	16	fprintf
LEAF_NODE	120:27	120:27	15	(
ARGUMENT	120:28	120:28	15	stderr
FIELD	120:28	120:28	16	stderr
LEAF_NODE	120:28	120:28	17	stderr
LEAF_NODE	120:34	120:34	15	,
ARGUMENT	120:36	120:36	15	"Failed to unset %s\n"
FIELD	120:36	120:36	16	"Failed to unset %s\n"
LEAF_NODE	120:36	120:36	17	"Failed to unset %s\n"
LEAF_NODE	120:58	120:58	15	,
ARGUMENT	120:60	120:60	15	TIFFFieldName ( fip )
FUNCTION_CALL	120:60	120:77	16	TIFFFieldName ( fip )
CALLEE	120:60	120:60	17	TIFFFieldName
LEAF_NODE	120:60	120:60	18	TIFFFieldName
LEAF_NODE	120:73	120:73	17	(
ARGUMENT	120:74	120:74	17	fip
FIELD	120:74	120:74	18	fip
LEAF_NODE	120:74	120:74	19	fip
LEAF_NODE	120:77	120:77	17	)
LEAF_NODE	120:78	120:78	15	)
LEAF_NODE	120:79	120:79	13	;
LEAF_NODE	121:12	121:12	11	}
EXPR_STATEMENT	122:12	122:23	9	arg_index ++ ;
EXPR	122:12	122:12	10	arg_index ++
FIELD	122:12	122:21	11	arg_index ++
LEAF_NODE	122:12	122:12	12	arg_index
LEAF_NODE	122:21	122:21	12	++
LEAF_NODE	122:23	122:23	10	;
LEAF_NODE	123:4	123:4	8	}
SELECTION	123:6	123:11	6	
KEYWORD	123:6	123:6	7	else
LEAF_NODE	123:6	123:6	8	else
STATEMENTS	123:11	123:11	7	
SELECTION	123:11	123:72	8	
KEYWORD	123:11	123:11	9	if
LEAF_NODE	123:11	123:11	10	if
LEAF_NODE	123:14	123:14	9	(
CONDITION	123:15	123:15	9	strcmp ( argv [ arg_index ] , "-s" ) == 0 && arg_index < argc - 3
EXPR	123:15	123:15	10	strcmp ( argv [ arg_index ] , "-s" ) == 0 && arg_index < argc - 3
AND	123:15	123:52	11	strcmp ( argv [ arg_index ] , "-s" ) == 0 && arg_index < argc - 3
EXPR	123:15	123:47	12	strcmp ( argv [ arg_index ] , "-s" ) == 0
FUNCTION_CALL	123:15	123:42	13	strcmp ( argv [ arg_index ] , "-s" )
CALLEE	123:15	123:15	14	strcmp
LEAF_NODE	123:15	123:15	15	strcmp
LEAF_NODE	123:21	123:21	14	(
ARGUMENT	123:22	123:22	14	argv [ arg_index ]
FIELD	123:22	123:36	15	argv [ arg_index ]
LEAF_NODE	123:22	123:22	16	argv
LEAF_NODE	123:26	123:26	16	[
EXPR	123:27	123:27	16	arg_index
FIELD	123:27	123:27	17	arg_index
LEAF_NODE	123:27	123:27	18	arg_index
LEAF_NODE	123:36	123:36	16	]
LEAF_NODE	123:37	123:37	14	,
ARGUMENT	123:38	123:38	14	"-s"
FIELD	123:38	123:38	15	"-s"
LEAF_NODE	123:38	123:38	16	"-s"
LEAF_NODE	123:42	123:42	14	)
EQ_OPERATOR	123:44	123:44	13	==
LEAF_NODE	123:44	123:44	14	==
FIELD	123:47	123:47	13	0
LEAF_NODE	123:47	123:47	14	0
LEAF_NODE	123:49	123:49	12	&&
EXPR	123:52	123:69	12	arg_index < argc - 3
FIELD	123:52	123:52	13	arg_index
LEAF_NODE	123:52	123:52	14	arg_index
REL_OPERATOR	123:62	123:62	13	<
LEAF_NODE	123:62	123:62	14	<
FIELD	123:64	123:64	13	argc
LEAF_NODE	123:64	123:64	14	argc
LEAF_NODE	123:68	123:68	13	-
FIELD	123:69	123:69	13	3
LEAF_NODE	123:69	123:69	14	3
LEAF_NODE	123:70	123:70	9	)
STATEMENTS	123:72	315:8	9	
LEAF_NODE	123:72	123:72	10	{
STATEMENTS	124:12	139:14	10	
SIMPLE_DECL	124:12	124:32	11	const TIFFField * fip ;
VAR_DECL	124:12	124:29	12	const TIFFField * fip
TYPE	124:12	124:28	13	const TIFFField *
TYPE_NAME	124:12	124:18	14	const TIFFField
LEAF_NODE	124:12	124:12	15	const
LEAF_NODE	124:18	124:18	15	TIFFField
POINTER	124:28	124:28	14	*
LEAF_NODE	124:28	124:28	15	*
NAME	124:29	124:29	13	fip
LEAF_NODE	124:29	124:29	14	fip
LEAF_NODE	124:32	124:32	12	;
SIMPLE_DECL	125:12	125:31	11	const char * tagname ;
VAR_DECL	125:12	125:24	12	const char * tagname
TYPE	125:12	125:23	13	const char *
TYPE_NAME	125:12	125:18	14	const char
LEAF_NODE	125:12	125:12	15	const
LEAF_NODE	125:18	125:18	15	char
POINTER	125:23	125:23	14	*
LEAF_NODE	125:23	125:23	15	*
NAME	125:24	125:24	13	tagname
LEAF_NODE	125:24	125:24	14	tagname
LEAF_NODE	125:31	125:31	12	;
EXPR_STATEMENT	127:12	127:23	11	arg_index ++ ;
EXPR	127:12	127:12	12	arg_index ++
FIELD	127:12	127:21	13	arg_index ++
LEAF_NODE	127:12	127:12	14	arg_index
LEAF_NODE	127:21	127:21	14	++
LEAF_NODE	127:23	127:23	12	;
EXPR_STATEMENT	128:12	128:37	11	tagname = argv [ arg_index ] ;
EXPR	128:12	128:12	12	tagname = argv [ arg_index ]
ASSIGN	128:12	128:22	13	tagname = argv [ arg_index ]
LVAL	128:12	128:12	14	tagname
FIELD	128:12	128:12	15	tagname
LEAF_NODE	128:12	128:12	16	tagname
ASSIGN_OP	128:20	128:20	14	=
LEAF_NODE	128:20	128:20	15	=
RVAL	128:22	128:22	14	argv [ arg_index ]
FIELD	128:22	128:36	15	argv [ arg_index ]
LEAF_NODE	128:22	128:22	16	argv
LEAF_NODE	128:26	128:26	16	[
EXPR	128:27	128:27	16	arg_index
FIELD	128:27	128:27	17	arg_index
LEAF_NODE	128:27	128:27	18	arg_index
LEAF_NODE	128:36	128:36	16	]
LEAF_NODE	128:37	128:37	12	;
EXPR_STATEMENT	129:12	129:41	11	fip = GetField ( tiff , tagname ) ;
EXPR	129:12	129:12	12	fip = GetField ( tiff , tagname )
ASSIGN	129:12	129:18	13	fip = GetField ( tiff , tagname )
LVAL	129:12	129:12	14	fip
FIELD	129:12	129:12	15	fip
LEAF_NODE	129:12	129:12	16	fip
ASSIGN_OP	129:16	129:16	14	=
LEAF_NODE	129:16	129:16	15	=
RVAL	129:18	129:18	14	GetField ( tiff , tagname )
FUNCTION_CALL	129:18	129:40	15	GetField ( tiff , tagname )
CALLEE	129:18	129:18	16	GetField
LEAF_NODE	129:18	129:18	17	GetField
LEAF_NODE	129:26	129:26	16	(
ARGUMENT	129:27	129:27	16	tiff
FIELD	129:27	129:27	17	tiff
LEAF_NODE	129:27	129:27	18	tiff
LEAF_NODE	129:31	129:31	16	,
ARGUMENT	129:33	129:33	16	tagname
FIELD	129:33	129:33	17	tagname
LEAF_NODE	129:33	129:33	18	tagname
LEAF_NODE	129:40	129:40	16	)
LEAF_NODE	129:41	129:41	12	;
SELECTION	131:12	132:16	11	
KEYWORD	131:12	131:12	12	if
LEAF_NODE	131:12	131:12	13	if
LEAF_NODE	131:15	131:15	12	(
CONDITION	131:16	131:16	12	! fip
EXPR	131:16	131:16	13	! fip
UNARY_EXPR	131:16	131:17	14	! fip
UNARY_OPERATOR	131:16	131:16	15	!
LEAF_NODE	131:16	131:16	16	!
FIELD	131:17	131:17	15	fip
LEAF_NODE	131:17	131:17	16	fip
LEAF_NODE	131:20	131:20	12	)
STATEMENTS	132:16	132:16	12	
JUMP_STATEMENT	132:16	132:24	13	return 3 ;
KEYWORD	132:16	132:16	14	return
LEAF_NODE	132:16	132:16	15	return
DESTINATION	132:23	132:23	14	3
EXPR	132:23	132:23	15	3
FIELD	132:23	132:23	16	3
LEAF_NODE	132:23	132:23	17	3
LEAF_NODE	132:24	132:24	14	;
EXPR_STATEMENT	134:12	134:23	11	arg_index ++ ;
EXPR	134:12	134:12	12	arg_index ++
FIELD	134:12	134:21	13	arg_index ++
LEAF_NODE	134:12	134:12	14	arg_index
LEAF_NODE	134:21	134:21	14	++
LEAF_NODE	134:23	134:23	12	;
SELECTION	135:12	135:54	11	
KEYWORD	135:12	135:12	12	if
LEAF_NODE	135:12	135:12	13	if
LEAF_NODE	135:15	135:15	12	(
CONDITION	135:16	135:16	12	TIFFFieldDataType ( fip ) == TIFF_ASCII
EXPR	135:16	135:42	13	TIFFFieldDataType ( fip ) == TIFF_ASCII
FUNCTION_CALL	135:16	135:37	14	TIFFFieldDataType ( fip )
CALLEE	135:16	135:16	15	TIFFFieldDataType
LEAF_NODE	135:16	135:16	16	TIFFFieldDataType
LEAF_NODE	135:33	135:33	15	(
ARGUMENT	135:34	135:34	15	fip
FIELD	135:34	135:34	16	fip
LEAF_NODE	135:34	135:34	17	fip
LEAF_NODE	135:37	135:37	15	)
EQ_OPERATOR	135:39	135:39	14	==
LEAF_NODE	135:39	135:39	15	==
FIELD	135:42	135:42	14	TIFF_ASCII
LEAF_NODE	135:42	135:42	15	TIFF_ASCII
LEAF_NODE	135:52	135:52	12	)
STATEMENTS	135:54	139:12	12	
LEAF_NODE	135:54	135:54	13	{
STATEMENTS	136:16	136:16	13	
SELECTION	136:16	137:20	14	
KEYWORD	136:16	136:16	15	if
LEAF_NODE	136:16	136:16	16	if
LEAF_NODE	136:19	136:19	15	(
CONDITION	136:20	136:20	15	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , argv [ arg_index ] ) != 1
EXPR	136:20	136:78	16	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , argv [ arg_index ] ) != 1
FUNCTION_CALL	136:20	136:73	17	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , argv [ arg_index ] )
CALLEE	136:20	136:20	18	TIFFSetField
LEAF_NODE	136:20	136:20	19	TIFFSetField
LEAF_NODE	136:32	136:32	18	(
ARGUMENT	136:33	136:33	18	tiff
FIELD	136:33	136:33	19	tiff
LEAF_NODE	136:33	136:33	20	tiff
LEAF_NODE	136:37	136:37	18	,
ARGUMENT	136:39	136:39	18	TIFFFieldTag ( fip )
FUNCTION_CALL	136:39	136:55	19	TIFFFieldTag ( fip )
CALLEE	136:39	136:39	20	TIFFFieldTag
LEAF_NODE	136:39	136:39	21	TIFFFieldTag
LEAF_NODE	136:51	136:51	20	(
ARGUMENT	136:52	136:52	20	fip
FIELD	136:52	136:52	21	fip
LEAF_NODE	136:52	136:52	22	fip
LEAF_NODE	136:55	136:55	20	)
LEAF_NODE	136:56	136:56	18	,
ARGUMENT	136:58	136:58	18	argv [ arg_index ]
FIELD	136:58	136:72	19	argv [ arg_index ]
LEAF_NODE	136:58	136:58	20	argv
LEAF_NODE	136:62	136:62	20	[
EXPR	136:63	136:63	20	arg_index
FIELD	136:63	136:63	21	arg_index
LEAF_NODE	136:63	136:63	22	arg_index
LEAF_NODE	136:72	136:72	20	]
LEAF_NODE	136:73	136:73	18	)
EQ_OPERATOR	136:75	136:75	17	!=
LEAF_NODE	136:75	136:75	18	!=
FIELD	136:78	136:78	17	1
LEAF_NODE	136:78	136:78	18	1
LEAF_NODE	136:79	136:79	15	)
STATEMENTS	137:20	137:20	15	
EXPR_STATEMENT	137:20	138:66	16	fprintf ( stderr , "Failed to set %s=%s\n" , TIFFFieldName ( fip ) , argv [ arg_index ] ) ;
EXPR	137:20	137:20	17	fprintf ( stderr , "Failed to set %s=%s\n" , TIFFFieldName ( fip ) , argv [ arg_index ] )
FUNCTION_CALL	137:20	138:65	18	fprintf ( stderr , "Failed to set %s=%s\n" , TIFFFieldName ( fip ) , argv [ arg_index ] )
CALLEE	137:20	137:20	19	fprintf
LEAF_NODE	137:20	137:20	20	fprintf
LEAF_NODE	137:27	137:27	19	(
ARGUMENT	137:29	137:29	19	stderr
FIELD	137:29	137:29	20	stderr
LEAF_NODE	137:29	137:29	21	stderr
LEAF_NODE	137:35	137:35	19	,
ARGUMENT	137:37	137:37	19	"Failed to set %s=%s\n"
FIELD	137:37	137:37	20	"Failed to set %s=%s\n"
LEAF_NODE	137:37	137:37	21	"Failed to set %s=%s\n"
LEAF_NODE	137:60	137:60	19	,
ARGUMENT	138:29	138:29	19	TIFFFieldName ( fip )
FUNCTION_CALL	138:29	138:46	20	TIFFFieldName ( fip )
CALLEE	138:29	138:29	21	TIFFFieldName
LEAF_NODE	138:29	138:29	22	TIFFFieldName
LEAF_NODE	138:42	138:42	21	(
ARGUMENT	138:43	138:43	21	fip
FIELD	138:43	138:43	22	fip
LEAF_NODE	138:43	138:43	23	fip
LEAF_NODE	138:46	138:46	21	)
LEAF_NODE	138:47	138:47	19	,
ARGUMENT	138:49	138:49	19	argv [ arg_index ]
FIELD	138:49	138:63	20	argv [ arg_index ]
LEAF_NODE	138:49	138:49	21	argv
LEAF_NODE	138:53	138:53	21	[
EXPR	138:54	138:54	21	arg_index
FIELD	138:54	138:54	22	arg_index
LEAF_NODE	138:54	138:54	23	arg_index
LEAF_NODE	138:63	138:63	21	]
LEAF_NODE	138:65	138:65	19	)
LEAF_NODE	138:66	138:66	17	;
LEAF_NODE	139:12	139:12	13	}
SELECTION	139:14	139:19	11	
KEYWORD	139:14	139:14	12	else
LEAF_NODE	139:14	139:14	13	else
STATEMENTS	139:19	139:19	12	
SELECTION	139:19	140:55	13	
KEYWORD	139:19	139:19	14	if
LEAF_NODE	139:19	139:19	15	if
LEAF_NODE	139:22	139:22	14	(
CONDITION	139:23	139:23	14	TIFFFieldWriteCount ( fip ) > 0 || TIFFFieldWriteCount ( fip ) == TIFF_VARIABLE
EXPR	139:23	139:23	15	TIFFFieldWriteCount ( fip ) > 0 || TIFFFieldWriteCount ( fip ) == TIFF_VARIABLE
OR	139:23	140:12	16	TIFFFieldWriteCount ( fip ) > 0 || TIFFFieldWriteCount ( fip ) == TIFF_VARIABLE
EXPR	139:23	139:50	17	TIFFFieldWriteCount ( fip ) > 0
FUNCTION_CALL	139:23	139:46	18	TIFFFieldWriteCount ( fip )
CALLEE	139:23	139:23	19	TIFFFieldWriteCount
LEAF_NODE	139:23	139:23	20	TIFFFieldWriteCount
LEAF_NODE	139:42	139:42	19	(
ARGUMENT	139:43	139:43	19	fip
FIELD	139:43	139:43	20	fip
LEAF_NODE	139:43	139:43	21	fip
LEAF_NODE	139:46	139:46	19	)
REL_OPERATOR	139:48	139:48	18	>
LEAF_NODE	139:48	139:48	19	>
FIELD	139:50	139:50	18	0
LEAF_NODE	139:50	139:50	19	0
LEAF_NODE	140:9	140:9	17	||
EXPR	140:12	140:40	17	TIFFFieldWriteCount ( fip ) == TIFF_VARIABLE
FUNCTION_CALL	140:12	140:35	18	TIFFFieldWriteCount ( fip )
CALLEE	140:12	140:12	19	TIFFFieldWriteCount
LEAF_NODE	140:12	140:12	20	TIFFFieldWriteCount
LEAF_NODE	140:31	140:31	19	(
ARGUMENT	140:32	140:32	19	fip
FIELD	140:32	140:32	20	fip
LEAF_NODE	140:32	140:32	21	fip
LEAF_NODE	140:35	140:35	19	)
EQ_OPERATOR	140:37	140:37	18	==
LEAF_NODE	140:37	140:37	19	==
FIELD	140:40	140:40	18	TIFF_VARIABLE
LEAF_NODE	140:40	140:40	19	TIFF_VARIABLE
LEAF_NODE	140:53	140:53	14	)
STATEMENTS	140:55	314:12	14	
LEAF_NODE	140:55	140:55	15	{
STATEMENTS	141:16	313:16	15	
SIMPLE_DECL	141:16	141:31	16	int ret ; ret = 1 ;
VAR_DECL	141:16	141:24	17	int ret ; ret = 1
TYPE	141:16	141:16	18	int
TYPE_NAME	141:16	141:16	19	int
LEAF_NODE	141:16	141:16	20	int
NAME	141:24	141:24	18	ret
LEAF_NODE	141:24	141:24	19	ret
LEAF_NODE	0:0	0:0	18	;
INIT	141:24	141:24	18	ret = 1
ASSIGN	141:24	141:30	19	ret = 1
LVAL	141:24	141:24	20	ret
NAME	141:24	141:24	21	ret
LEAF_NODE	141:24	141:24	22	ret
ASSIGN_OP	141:28	141:28	20	=
LEAF_NODE	141:28	141:28	21	=
RVAL	141:30	141:30	20	1
FIELD	141:30	141:30	21	1
LEAF_NODE	141:30	141:30	22	1
LEAF_NODE	141:31	141:31	17	;
SIMPLE_DECL	142:16	142:26	16	short wc ;
VAR_DECL	142:16	142:24	17	short wc
TYPE	142:16	142:16	18	short
TYPE_NAME	142:16	142:16	19	short
LEAF_NODE	142:16	142:16	20	short
NAME	142:24	142:24	18	wc
LEAF_NODE	142:24	142:24	19	wc
LEAF_NODE	142:26	142:26	17	;
SELECTION	144:16	145:24	16	
KEYWORD	144:16	144:16	17	if
LEAF_NODE	144:16	144:16	18	if
LEAF_NODE	144:19	144:19	17	(
CONDITION	144:20	144:20	17	TIFFFieldWriteCount ( fip ) == TIFF_VARIABLE
EXPR	144:20	144:48	18	TIFFFieldWriteCount ( fip ) == TIFF_VARIABLE
FUNCTION_CALL	144:20	144:43	19	TIFFFieldWriteCount ( fip )
CALLEE	144:20	144:20	20	TIFFFieldWriteCount
LEAF_NODE	144:20	144:20	21	TIFFFieldWriteCount
LEAF_NODE	144:39	144:39	20	(
ARGUMENT	144:40	144:40	20	fip
FIELD	144:40	144:40	21	fip
LEAF_NODE	144:40	144:40	22	fip
LEAF_NODE	144:43	144:43	20	)
EQ_OPERATOR	144:45	144:45	19	==
LEAF_NODE	144:45	144:45	20	==
FIELD	144:48	144:48	19	TIFF_VARIABLE
LEAF_NODE	144:48	144:48	20	TIFF_VARIABLE
LEAF_NODE	144:61	144:61	17	)
STATEMENTS	145:24	145:24	17	
EXPR_STATEMENT	145:24	145:52	18	wc = atoi ( argv [ arg_index ++ ] ) ;
EXPR	145:24	145:24	19	wc = atoi ( argv [ arg_index ++ ] )
ASSIGN	145:24	145:29	20	wc = atoi ( argv [ arg_index ++ ] )
LVAL	145:24	145:24	21	wc
FIELD	145:24	145:24	22	wc
LEAF_NODE	145:24	145:24	23	wc
ASSIGN_OP	145:27	145:27	21	=
LEAF_NODE	145:27	145:27	22	=
RVAL	145:29	145:29	21	atoi ( argv [ arg_index ++ ] )
FUNCTION_CALL	145:29	145:51	22	atoi ( argv [ arg_index ++ ] )
CALLEE	145:29	145:29	23	atoi
LEAF_NODE	145:29	145:29	24	atoi
LEAF_NODE	145:33	145:33	23	(
ARGUMENT	145:34	145:34	23	argv [ arg_index ++ ]
FIELD	145:34	145:50	24	argv [ arg_index ++ ]
LEAF_NODE	145:34	145:34	25	argv
LEAF_NODE	145:38	145:38	25	[
EXPR	145:39	145:39	25	arg_index ++
FIELD	145:39	145:48	26	arg_index ++
LEAF_NODE	145:39	145:39	27	arg_index
LEAF_NODE	145:48	145:48	27	++
LEAF_NODE	145:50	145:50	25	]
LEAF_NODE	145:51	145:51	23	)
LEAF_NODE	145:52	145:52	19	;
SELECTION	146:16	147:24	16	
KEYWORD	146:16	146:16	17	else
LEAF_NODE	146:16	146:16	18	else
STATEMENTS	147:24	147:24	17	
EXPR_STATEMENT	147:24	147:53	18	wc = TIFFFieldWriteCount ( fip ) ;
EXPR	147:24	147:24	19	wc = TIFFFieldWriteCount ( fip )
ASSIGN	147:24	147:29	20	wc = TIFFFieldWriteCount ( fip )
LVAL	147:24	147:24	21	wc
FIELD	147:24	147:24	22	wc
LEAF_NODE	147:24	147:24	23	wc
ASSIGN_OP	147:27	147:27	21	=
LEAF_NODE	147:27	147:27	22	=
RVAL	147:29	147:29	21	TIFFFieldWriteCount ( fip )
FUNCTION_CALL	147:29	147:52	22	TIFFFieldWriteCount ( fip )
CALLEE	147:29	147:29	23	TIFFFieldWriteCount
LEAF_NODE	147:29	147:29	24	TIFFFieldWriteCount
LEAF_NODE	147:48	147:48	23	(
ARGUMENT	147:49	147:49	23	fip
FIELD	147:49	147:49	24	fip
LEAF_NODE	147:49	147:49	25	fip
LEAF_NODE	147:52	147:52	23	)
LEAF_NODE	147:53	147:53	19	;
SELECTION	149:16	149:43	16	
KEYWORD	149:16	149:16	17	if
LEAF_NODE	149:16	149:16	18	if
LEAF_NODE	149:19	149:19	17	(
CONDITION	149:20	149:20	17	argc - arg_index < wc
EXPR	149:20	149:39	18	argc - arg_index < wc
FIELD	149:20	149:20	19	argc
LEAF_NODE	149:20	149:20	20	argc
LEAF_NODE	149:25	149:25	19	-
FIELD	149:27	149:27	19	arg_index
LEAF_NODE	149:27	149:27	20	arg_index
REL_OPERATOR	149:37	149:37	19	<
LEAF_NODE	149:37	149:37	20	<
FIELD	149:39	149:39	19	wc
LEAF_NODE	149:39	149:39	20	wc
LEAF_NODE	149:41	149:41	17	)
STATEMENTS	149:43	155:16	17	
LEAF_NODE	149:43	149:43	18	{
STATEMENTS	150:20	154:20	18	
LEAF_NODE	150:20	150:20	19	fprintf
LEAF_NODE	150:27	150:27	19	(
LEAF_NODE	150:29	150:29	19	stderr
LEAF_NODE	150:35	150:35	19	,
LEAF_NODE	151:29	151:29	19	"Number of tag values is not enough. "
LEAF_NODE	152:29	152:29	19	"Expected %d values for %s tag, got %d\n"
LEAF_NODE	152:70	152:70	19	,
LEAF_NODE	153:29	153:29	19	wc
LEAF_NODE	153:31	153:31	19	,
LEAF_NODE	153:33	153:33	19	TIFFFieldName
LEAF_NODE	153:46	153:46	19	(
LEAF_NODE	153:47	153:47	19	fip
LEAF_NODE	153:50	153:50	19	)
LEAF_NODE	153:51	153:51	19	,
LEAF_NODE	153:53	153:53	19	argc
LEAF_NODE	153:58	153:58	19	-
LEAF_NODE	153:60	153:60	19	arg_index
LEAF_NODE	153:69	153:69	19	)
LEAF_NODE	153:70	153:70	19	;
JUMP_STATEMENT	154:20	154:28	19	return 4 ;
KEYWORD	154:20	154:20	20	return
LEAF_NODE	154:20	154:20	21	return
DESTINATION	154:27	154:27	20	4
EXPR	154:27	154:27	21	4
FIELD	154:27	154:27	22	4
LEAF_NODE	154:27	154:27	23	4
LEAF_NODE	154:28	154:28	20	;
LEAF_NODE	155:16	155:16	18	}
SELECTION	157:16	157:73	16	
KEYWORD	157:16	157:16	17	if
LEAF_NODE	157:16	157:16	18	if
LEAF_NODE	157:19	157:19	17	(
CONDITION	157:20	157:20	17	wc > 1 || TIFFFieldWriteCount ( fip ) == TIFF_VARIABLE
EXPR	157:20	157:20	18	wc > 1 || TIFFFieldWriteCount ( fip ) == TIFF_VARIABLE
OR	157:20	157:30	19	wc > 1 || TIFFFieldWriteCount ( fip ) == TIFF_VARIABLE
EXPR	157:20	157:25	20	wc > 1
FIELD	157:20	157:20	21	wc
LEAF_NODE	157:20	157:20	22	wc
REL_OPERATOR	157:23	157:23	21	>
LEAF_NODE	157:23	157:23	22	>
FIELD	157:25	157:25	21	1
LEAF_NODE	157:25	157:25	22	1
LEAF_NODE	157:27	157:27	20	||
EXPR	157:30	157:58	20	TIFFFieldWriteCount ( fip ) == TIFF_VARIABLE
FUNCTION_CALL	157:30	157:53	21	TIFFFieldWriteCount ( fip )
CALLEE	157:30	157:30	22	TIFFFieldWriteCount
LEAF_NODE	157:30	157:30	23	TIFFFieldWriteCount
LEAF_NODE	157:49	157:49	22	(
ARGUMENT	157:50	157:50	22	fip
FIELD	157:50	157:50	23	fip
LEAF_NODE	157:50	157:50	24	fip
LEAF_NODE	157:53	157:53	22	)
EQ_OPERATOR	157:55	157:55	21	==
LEAF_NODE	157:55	157:55	22	==
FIELD	157:58	157:58	21	TIFF_VARIABLE
LEAF_NODE	157:58	157:58	22	TIFF_VARIABLE
LEAF_NODE	157:71	157:71	17	)
STATEMENTS	157:73	275:16	17	
LEAF_NODE	157:73	157:73	18	{
STATEMENTS	158:24	274:24	18	
SIMPLE_DECL	158:24	158:39	19	int i , int size ;
INIT_DECL_LIST	158:24	158:24	20	int i , int size
VAR_DECL	158:24	158:32	21	int i
TYPE	158:24	158:24	22	int
TYPE_NAME	158:24	158:24	23	int
LEAF_NODE	158:24	158:24	24	int
NAME	158:32	158:32	22	i
LEAF_NODE	158:32	158:32	23	i
LEAF_NODE	158:33	158:33	21	,
VAR_DECL	158:24	158:35	21	int size
TYPE	158:24	158:24	22	int
TYPE_NAME	158:24	158:24	23	int
LEAF_NODE	158:24	158:24	24	int
NAME	158:35	158:35	22	size
LEAF_NODE	158:35	158:35	23	size
LEAF_NODE	158:39	158:39	20	;
SIMPLE_DECL	159:24	159:38	19	void * array ;
VAR_DECL	159:24	159:33	20	void * array
TYPE	159:24	159:32	21	void *
TYPE_NAME	159:24	159:24	22	void
LEAF_NODE	159:24	159:24	23	void
POINTER	159:32	159:32	22	*
LEAF_NODE	159:32	159:32	23	*
NAME	159:33	159:33	21	array
LEAF_NODE	159:33	159:33	22	array
LEAF_NODE	159:38	159:38	20	;
SELECTION	161:24	161:56	19	
KEYWORD	161:24	161:24	20	switch
LEAF_NODE	161:24	161:24	21	switch
LEAF_NODE	161:31	161:31	20	(
CONDITION	161:32	161:32	20	TIFFFieldDataType ( fip )
EXPR	161:32	161:32	21	TIFFFieldDataType ( fip )
FUNCTION_CALL	161:32	161:53	22	TIFFFieldDataType ( fip )
CALLEE	161:32	161:32	23	TIFFFieldDataType
LEAF_NODE	161:32	161:32	24	TIFFFieldDataType
LEAF_NODE	161:49	161:49	23	(
ARGUMENT	161:50	161:50	23	fip
FIELD	161:50	161:50	24	fip
LEAF_NODE	161:50	161:50	25	fip
LEAF_NODE	161:53	161:53	23	)
LEAF_NODE	161:54	161:54	20	)
STATEMENTS	161:56	197:24	20	
LEAF_NODE	161:56	161:56	21	{
STATEMENTS	169:32	196:36	21	
LABEL	169:32	169:46	22	case TIFF_BYTE :
LEAF_NODE	169:32	169:32	23	case
LEAF_NODE	169:37	169:37	23	TIFF_BYTE
LEAF_NODE	169:46	169:46	23	:
LABEL	170:32	170:47	22	case TIFF_ASCII :
LEAF_NODE	170:32	170:32	23	case
LEAF_NODE	170:37	170:37	23	TIFF_ASCII
LEAF_NODE	170:47	170:47	23	:
LABEL	171:32	171:47	22	case TIFF_SBYTE :
LEAF_NODE	171:32	171:32	23	case
LEAF_NODE	171:37	171:37	23	TIFF_SBYTE
LEAF_NODE	171:47	171:47	23	:
LABEL	172:32	172:51	22	case TIFF_UNDEFINED :
LEAF_NODE	172:32	172:32	23	case
LEAF_NODE	172:37	172:37	23	TIFF_UNDEFINED
LEAF_NODE	172:51	172:51	23	:
LABEL	173:4	173:11	22	default :
LEAF_NODE	173:4	173:4	23	default
LEAF_NODE	173:11	173:11	23	:
EXPR_STATEMENT	174:36	174:44	22	size = 1 ;
EXPR	174:36	174:36	23	size = 1
ASSIGN	174:36	174:43	24	size = 1
LVAL	174:36	174:36	25	size
FIELD	174:36	174:36	26	size
LEAF_NODE	174:36	174:36	27	size
ASSIGN_OP	174:41	174:41	25	=
LEAF_NODE	174:41	174:41	26	=
RVAL	174:43	174:43	25	1
FIELD	174:43	174:43	26	1
LEAF_NODE	174:43	174:43	27	1
LEAF_NODE	174:44	174:44	23	;
JUMP_STATEMENT	175:36	175:41	22	break DESTINATION ;
KEYWORD	175:36	175:36	23	break
LEAF_NODE	175:36	175:36	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	175:41	175:41	23	;
LABEL	177:32	177:47	22	case TIFF_SHORT :
LEAF_NODE	177:32	177:32	23	case
LEAF_NODE	177:37	177:37	23	TIFF_SHORT
LEAF_NODE	177:47	177:47	23	:
LABEL	178:32	178:48	22	case TIFF_SSHORT :
LEAF_NODE	178:32	178:32	23	case
LEAF_NODE	178:37	178:37	23	TIFF_SSHORT
LEAF_NODE	178:48	178:48	23	:
EXPR_STATEMENT	179:36	179:44	22	size = 2 ;
EXPR	179:36	179:36	23	size = 2
ASSIGN	179:36	179:43	24	size = 2
LVAL	179:36	179:36	25	size
FIELD	179:36	179:36	26	size
LEAF_NODE	179:36	179:36	27	size
ASSIGN_OP	179:41	179:41	25	=
LEAF_NODE	179:41	179:41	26	=
RVAL	179:43	179:43	25	2
FIELD	179:43	179:43	26	2
LEAF_NODE	179:43	179:43	27	2
LEAF_NODE	179:44	179:44	23	;
JUMP_STATEMENT	180:36	180:41	22	break DESTINATION ;
KEYWORD	180:36	180:36	23	break
LEAF_NODE	180:36	180:36	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	180:41	180:41	23	;
LABEL	182:32	182:46	22	case TIFF_LONG :
LEAF_NODE	182:32	182:32	23	case
LEAF_NODE	182:37	182:37	23	TIFF_LONG
LEAF_NODE	182:46	182:46	23	:
LABEL	183:32	183:47	22	case TIFF_SLONG :
LEAF_NODE	183:32	183:32	23	case
LEAF_NODE	183:37	183:37	23	TIFF_SLONG
LEAF_NODE	183:47	183:47	23	:
LABEL	184:32	184:47	22	case TIFF_FLOAT :
LEAF_NODE	184:32	184:32	23	case
LEAF_NODE	184:37	184:37	23	TIFF_FLOAT
LEAF_NODE	184:47	184:47	23	:
LABEL	185:32	185:45	22	case TIFF_IFD :
LEAF_NODE	185:32	185:32	23	case
LEAF_NODE	185:37	185:37	23	TIFF_IFD
LEAF_NODE	185:45	185:45	23	:
LABEL	186:32	186:50	22	case TIFF_RATIONAL :
LEAF_NODE	186:32	186:32	23	case
LEAF_NODE	186:37	186:37	23	TIFF_RATIONAL
LEAF_NODE	186:50	186:50	23	:
LABEL	187:32	187:51	22	case TIFF_SRATIONAL :
LEAF_NODE	187:32	187:32	23	case
LEAF_NODE	187:37	187:37	23	TIFF_SRATIONAL
LEAF_NODE	187:51	187:51	23	:
EXPR_STATEMENT	188:36	188:44	22	size = 4 ;
EXPR	188:36	188:36	23	size = 4
ASSIGN	188:36	188:43	24	size = 4
LVAL	188:36	188:36	25	size
FIELD	188:36	188:36	26	size
LEAF_NODE	188:36	188:36	27	size
ASSIGN_OP	188:41	188:41	25	=
LEAF_NODE	188:41	188:41	26	=
RVAL	188:43	188:43	25	4
FIELD	188:43	188:43	26	4
LEAF_NODE	188:43	188:43	27	4
LEAF_NODE	188:44	188:44	23	;
JUMP_STATEMENT	189:36	189:41	22	break DESTINATION ;
KEYWORD	189:36	189:36	23	break
LEAF_NODE	189:36	189:36	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	189:41	189:41	23	;
LABEL	191:32	191:47	22	case TIFF_LONG8 :
LEAF_NODE	191:32	191:32	23	case
LEAF_NODE	191:37	191:37	23	TIFF_LONG8
LEAF_NODE	191:47	191:47	23	:
LABEL	192:32	192:48	22	case TIFF_SLONG8 :
LEAF_NODE	192:32	192:32	23	case
LEAF_NODE	192:37	192:37	23	TIFF_SLONG8
LEAF_NODE	192:48	192:48	23	:
LABEL	193:32	193:46	22	case TIFF_IFD8 :
LEAF_NODE	193:32	193:32	23	case
LEAF_NODE	193:37	193:37	23	TIFF_IFD8
LEAF_NODE	193:46	193:46	23	:
LABEL	194:32	194:48	22	case TIFF_DOUBLE :
LEAF_NODE	194:32	194:32	23	case
LEAF_NODE	194:37	194:37	23	TIFF_DOUBLE
LEAF_NODE	194:48	194:48	23	:
EXPR_STATEMENT	195:36	195:44	22	size = 8 ;
EXPR	195:36	195:36	23	size = 8
ASSIGN	195:36	195:43	24	size = 8
LVAL	195:36	195:36	25	size
FIELD	195:36	195:36	26	size
LEAF_NODE	195:36	195:36	27	size
ASSIGN_OP	195:41	195:41	25	=
LEAF_NODE	195:41	195:41	26	=
RVAL	195:43	195:43	25	8
FIELD	195:43	195:43	26	8
LEAF_NODE	195:43	195:43	27	8
LEAF_NODE	195:44	195:44	23	;
JUMP_STATEMENT	196:36	196:41	22	break DESTINATION ;
KEYWORD	196:36	196:36	23	break
LEAF_NODE	196:36	196:36	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	196:41	196:41	23	;
LEAF_NODE	197:24	197:24	21	}
EXPR_STATEMENT	199:24	199:54	19	array = _TIFFmalloc ( wc * size ) ;
EXPR	199:24	199:24	20	array = _TIFFmalloc ( wc * size )
ASSIGN	199:24	199:32	21	array = _TIFFmalloc ( wc * size )
LVAL	199:24	199:24	22	array
FIELD	199:24	199:24	23	array
LEAF_NODE	199:24	199:24	24	array
ASSIGN_OP	199:30	199:30	22	=
LEAF_NODE	199:30	199:30	23	=
RVAL	199:32	199:32	22	_TIFFmalloc ( wc * size )
FUNCTION_CALL	199:32	199:53	23	_TIFFmalloc ( wc * size )
CALLEE	199:32	199:32	24	_TIFFmalloc
LEAF_NODE	199:32	199:32	25	_TIFFmalloc
LEAF_NODE	199:43	199:43	24	(
ARGUMENT	199:44	199:49	24	wc * size
FIELD	199:44	199:44	25	wc
LEAF_NODE	199:44	199:44	26	wc
LEAF_NODE	199:47	199:47	25	*
FIELD	199:49	199:49	25	size
LEAF_NODE	199:49	199:49	26	size
LEAF_NODE	199:53	199:53	24	)
LEAF_NODE	199:54	199:54	20	;
SELECTION	200:24	200:36	19	
KEYWORD	200:24	200:24	20	if
LEAF_NODE	200:24	200:24	21	if
LEAF_NODE	200:27	200:27	20	(
CONDITION	200:28	200:28	20	! array
EXPR	200:28	200:28	21	! array
UNARY_EXPR	200:28	200:29	22	! array
UNARY_OPERATOR	200:28	200:28	23	!
LEAF_NODE	200:28	200:28	24	!
FIELD	200:29	200:29	23	array
LEAF_NODE	200:29	200:29	24	array
LEAF_NODE	200:34	200:34	20	)
STATEMENTS	200:36	204:24	20	
LEAF_NODE	200:36	200:36	21	{
STATEMENTS	201:32	203:32	21	
EXPR_STATEMENT	201:32	202:48	22	fprintf ( stderr , "No space for %s tag\n" , tagname ) ;
EXPR	201:32	201:32	23	fprintf ( stderr , "No space for %s tag\n" , tagname )
FUNCTION_CALL	201:32	202:47	24	fprintf ( stderr , "No space for %s tag\n" , tagname )
CALLEE	201:32	201:32	25	fprintf
LEAF_NODE	201:32	201:32	26	fprintf
LEAF_NODE	201:39	201:39	25	(
ARGUMENT	201:40	201:40	25	stderr
FIELD	201:40	201:40	26	stderr
LEAF_NODE	201:40	201:40	27	stderr
LEAF_NODE	201:46	201:46	25	,
ARGUMENT	201:48	201:48	25	"No space for %s tag\n"
FIELD	201:48	201:48	26	"No space for %s tag\n"
LEAF_NODE	201:48	201:48	27	"No space for %s tag\n"
LEAF_NODE	201:71	201:71	25	,
ARGUMENT	202:40	202:40	25	tagname
FIELD	202:40	202:40	26	tagname
LEAF_NODE	202:40	202:40	27	tagname
LEAF_NODE	202:47	202:47	25	)
LEAF_NODE	202:48	202:48	23	;
JUMP_STATEMENT	203:32	203:40	22	return 4 ;
KEYWORD	203:32	203:32	23	return
LEAF_NODE	203:32	203:32	24	return
DESTINATION	203:39	203:39	23	4
EXPR	203:39	203:39	24	4
FIELD	203:39	203:39	25	4
LEAF_NODE	203:39	203:39	26	4
LEAF_NODE	203:40	203:40	23	;
LEAF_NODE	204:24	204:24	21	}
SELECTION	206:24	206:56	19	
KEYWORD	206:24	206:24	20	switch
LEAF_NODE	206:24	206:24	21	switch
LEAF_NODE	206:31	206:31	20	(
CONDITION	206:32	206:32	20	TIFFFieldDataType ( fip )
EXPR	206:32	206:32	21	TIFFFieldDataType ( fip )
FUNCTION_CALL	206:32	206:53	22	TIFFFieldDataType ( fip )
CALLEE	206:32	206:32	23	TIFFFieldDataType
LEAF_NODE	206:32	206:32	24	TIFFFieldDataType
LEAF_NODE	206:49	206:49	23	(
ARGUMENT	206:50	206:50	23	fip
FIELD	206:50	206:50	24	fip
LEAF_NODE	206:50	206:50	25	fip
LEAF_NODE	206:53	206:53	23	)
LEAF_NODE	206:54	206:54	20	)
STATEMENTS	206:56	253:24	20	
LEAF_NODE	206:56	206:56	21	{
STATEMENTS	207:28	252:32	21	
LABEL	207:28	207:42	22	case TIFF_BYTE :
LEAF_NODE	207:28	207:28	23	case
LEAF_NODE	207:33	207:33	23	TIFF_BYTE
LEAF_NODE	207:42	207:42	23	:
ITERATION	208:32	209:36	22	
KEYWORD	208:32	208:32	23	for
LEAF_NODE	208:32	208:32	24	for
LEAF_NODE	208:36	208:36	23	(
FOR_INIT	208:37	208:42	23	i = 0 ;
EXPR	208:37	208:37	24	i = 0
ASSIGN	208:37	208:41	25	i = 0
LVAL	208:37	208:37	26	i
FIELD	208:37	208:37	27	i
LEAF_NODE	208:37	208:37	28	i
ASSIGN_OP	208:39	208:39	26	=
LEAF_NODE	208:39	208:39	27	=
RVAL	208:41	208:41	26	0
FIELD	208:41	208:41	27	0
LEAF_NODE	208:41	208:41	28	0
LEAF_NODE	208:42	208:42	24	;
CONDITION	208:44	208:44	23	i < wc
EXPR	208:44	208:48	24	i < wc
FIELD	208:44	208:44	25	i
LEAF_NODE	208:44	208:44	26	i
REL_OPERATOR	208:46	208:46	25	<
LEAF_NODE	208:46	208:46	26	<
FIELD	208:48	208:48	25	wc
LEAF_NODE	208:48	208:48	26	wc
LEAF_NODE	208:50	208:50	23	;
FOR_EXPR	208:52	208:52	23	i ++
EXPR	208:52	208:52	24	i ++
FIELD	208:52	208:53	25	i ++
LEAF_NODE	208:52	208:52	26	i
LEAF_NODE	208:53	208:53	26	++
LEAF_NODE	208:55	208:55	23	)
STATEMENTS	209:36	209:36	23	
EXPR_STATEMENT	209:36	209:81	24	( ( uint8 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] ) ;
EXPR	209:36	209:36	25	( ( uint8 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] )
ASSIGN	209:36	209:58	26	( ( uint8 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] )
LVAL	209:36	209:54	27	( ( uint8 * ) array ) [ i ]
LEAF_NODE	209:36	209:36	28	(
LEAF_NODE	209:37	209:37	28	(
TYPE_NAME	209:38	209:38	28	uint8
LEAF_NODE	209:38	209:38	29	uint8
LEAF_NODE	209:44	209:44	28	*
LEAF_NODE	209:45	209:45	28	)
FIELD	209:46	209:46	28	array
LEAF_NODE	209:46	209:46	29	array
LEAF_NODE	209:51	209:51	28	)
LEAF_NODE	209:52	209:52	28	[
EXPR	209:53	209:53	28	i
FIELD	209:53	209:53	29	i
LEAF_NODE	209:53	209:53	30	i
LEAF_NODE	209:54	209:54	28	]
ASSIGN_OP	209:56	209:56	27	=
LEAF_NODE	209:56	209:56	28	=
RVAL	209:58	209:58	27	atoi ( argv [ arg_index + i ] )
FUNCTION_CALL	209:58	209:80	28	atoi ( argv [ arg_index + i ] )
CALLEE	209:58	209:58	29	atoi
LEAF_NODE	209:58	209:58	30	atoi
LEAF_NODE	209:62	209:62	29	(
ARGUMENT	209:63	209:63	29	argv [ arg_index + i ]
FIELD	209:63	209:79	30	argv [ arg_index + i ]
LEAF_NODE	209:63	209:63	31	argv
LEAF_NODE	209:67	209:67	31	[
EXPR	209:68	209:78	31	arg_index + i
FIELD	209:68	209:68	32	arg_index
LEAF_NODE	209:68	209:68	33	arg_index
LEAF_NODE	209:77	209:77	32	+
FIELD	209:78	209:78	32	i
LEAF_NODE	209:78	209:78	33	i
LEAF_NODE	209:79	209:79	31	]
LEAF_NODE	209:80	209:80	29	)
LEAF_NODE	209:81	209:81	25	;
JUMP_STATEMENT	210:32	210:37	22	break DESTINATION ;
KEYWORD	210:32	210:32	23	break
LEAF_NODE	210:32	210:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	210:37	210:37	23	;
LABEL	211:28	211:43	22	case TIFF_SHORT :
LEAF_NODE	211:28	211:28	23	case
LEAF_NODE	211:33	211:33	23	TIFF_SHORT
LEAF_NODE	211:43	211:43	23	:
ITERATION	212:32	213:36	22	
KEYWORD	212:32	212:32	23	for
LEAF_NODE	212:32	212:32	24	for
LEAF_NODE	212:36	212:36	23	(
FOR_INIT	212:37	212:42	23	i = 0 ;
EXPR	212:37	212:37	24	i = 0
ASSIGN	212:37	212:41	25	i = 0
LVAL	212:37	212:37	26	i
FIELD	212:37	212:37	27	i
LEAF_NODE	212:37	212:37	28	i
ASSIGN_OP	212:39	212:39	26	=
LEAF_NODE	212:39	212:39	27	=
RVAL	212:41	212:41	26	0
FIELD	212:41	212:41	27	0
LEAF_NODE	212:41	212:41	28	0
LEAF_NODE	212:42	212:42	24	;
CONDITION	212:44	212:44	23	i < wc
EXPR	212:44	212:48	24	i < wc
FIELD	212:44	212:44	25	i
LEAF_NODE	212:44	212:44	26	i
REL_OPERATOR	212:46	212:46	25	<
LEAF_NODE	212:46	212:46	26	<
FIELD	212:48	212:48	25	wc
LEAF_NODE	212:48	212:48	26	wc
LEAF_NODE	212:50	212:50	23	;
FOR_EXPR	212:52	212:52	23	i ++
EXPR	212:52	212:52	24	i ++
FIELD	212:52	212:53	25	i ++
LEAF_NODE	212:52	212:52	26	i
LEAF_NODE	212:53	212:53	26	++
LEAF_NODE	212:55	212:55	23	)
STATEMENTS	213:36	213:36	23	
EXPR_STATEMENT	213:36	213:82	24	( ( uint16 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] ) ;
EXPR	213:36	213:36	25	( ( uint16 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] )
ASSIGN	213:36	213:59	26	( ( uint16 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] )
LVAL	213:36	213:55	27	( ( uint16 * ) array ) [ i ]
LEAF_NODE	213:36	213:36	28	(
LEAF_NODE	213:37	213:37	28	(
TYPE_NAME	213:38	213:38	28	uint16
LEAF_NODE	213:38	213:38	29	uint16
LEAF_NODE	213:45	213:45	28	*
LEAF_NODE	213:46	213:46	28	)
FIELD	213:47	213:47	28	array
LEAF_NODE	213:47	213:47	29	array
LEAF_NODE	213:52	213:52	28	)
LEAF_NODE	213:53	213:53	28	[
EXPR	213:54	213:54	28	i
FIELD	213:54	213:54	29	i
LEAF_NODE	213:54	213:54	30	i
LEAF_NODE	213:55	213:55	28	]
ASSIGN_OP	213:57	213:57	27	=
LEAF_NODE	213:57	213:57	28	=
RVAL	213:59	213:59	27	atoi ( argv [ arg_index + i ] )
FUNCTION_CALL	213:59	213:81	28	atoi ( argv [ arg_index + i ] )
CALLEE	213:59	213:59	29	atoi
LEAF_NODE	213:59	213:59	30	atoi
LEAF_NODE	213:63	213:63	29	(
ARGUMENT	213:64	213:64	29	argv [ arg_index + i ]
FIELD	213:64	213:80	30	argv [ arg_index + i ]
LEAF_NODE	213:64	213:64	31	argv
LEAF_NODE	213:68	213:68	31	[
EXPR	213:69	213:79	31	arg_index + i
FIELD	213:69	213:69	32	arg_index
LEAF_NODE	213:69	213:69	33	arg_index
LEAF_NODE	213:78	213:78	32	+
FIELD	213:79	213:79	32	i
LEAF_NODE	213:79	213:79	33	i
LEAF_NODE	213:80	213:80	31	]
LEAF_NODE	213:81	213:81	29	)
LEAF_NODE	213:82	213:82	25	;
JUMP_STATEMENT	214:32	214:37	22	break DESTINATION ;
KEYWORD	214:32	214:32	23	break
LEAF_NODE	214:32	214:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	214:37	214:37	23	;
LABEL	215:28	215:43	22	case TIFF_SBYTE :
LEAF_NODE	215:28	215:28	23	case
LEAF_NODE	215:33	215:33	23	TIFF_SBYTE
LEAF_NODE	215:43	215:43	23	:
ITERATION	216:32	217:36	22	
KEYWORD	216:32	216:32	23	for
LEAF_NODE	216:32	216:32	24	for
LEAF_NODE	216:36	216:36	23	(
FOR_INIT	216:37	216:42	23	i = 0 ;
EXPR	216:37	216:37	24	i = 0
ASSIGN	216:37	216:41	25	i = 0
LVAL	216:37	216:37	26	i
FIELD	216:37	216:37	27	i
LEAF_NODE	216:37	216:37	28	i
ASSIGN_OP	216:39	216:39	26	=
LEAF_NODE	216:39	216:39	27	=
RVAL	216:41	216:41	26	0
FIELD	216:41	216:41	27	0
LEAF_NODE	216:41	216:41	28	0
LEAF_NODE	216:42	216:42	24	;
CONDITION	216:44	216:44	23	i < wc
EXPR	216:44	216:48	24	i < wc
FIELD	216:44	216:44	25	i
LEAF_NODE	216:44	216:44	26	i
REL_OPERATOR	216:46	216:46	25	<
LEAF_NODE	216:46	216:46	26	<
FIELD	216:48	216:48	25	wc
LEAF_NODE	216:48	216:48	26	wc
LEAF_NODE	216:50	216:50	23	;
FOR_EXPR	216:52	216:52	23	i ++
EXPR	216:52	216:52	24	i ++
FIELD	216:52	216:53	25	i ++
LEAF_NODE	216:52	216:52	26	i
LEAF_NODE	216:53	216:53	26	++
LEAF_NODE	216:55	216:55	23	)
STATEMENTS	217:36	217:36	23	
EXPR_STATEMENT	217:36	217:80	24	( ( int8 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] ) ;
EXPR	217:36	217:36	25	( ( int8 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] )
ASSIGN	217:36	217:57	26	( ( int8 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] )
LVAL	217:36	217:53	27	( ( int8 * ) array ) [ i ]
LEAF_NODE	217:36	217:36	28	(
LEAF_NODE	217:37	217:37	28	(
TYPE_NAME	217:38	217:38	28	int8
LEAF_NODE	217:38	217:38	29	int8
LEAF_NODE	217:43	217:43	28	*
LEAF_NODE	217:44	217:44	28	)
FIELD	217:45	217:45	28	array
LEAF_NODE	217:45	217:45	29	array
LEAF_NODE	217:50	217:50	28	)
LEAF_NODE	217:51	217:51	28	[
EXPR	217:52	217:52	28	i
FIELD	217:52	217:52	29	i
LEAF_NODE	217:52	217:52	30	i
LEAF_NODE	217:53	217:53	28	]
ASSIGN_OP	217:55	217:55	27	=
LEAF_NODE	217:55	217:55	28	=
RVAL	217:57	217:57	27	atoi ( argv [ arg_index + i ] )
FUNCTION_CALL	217:57	217:79	28	atoi ( argv [ arg_index + i ] )
CALLEE	217:57	217:57	29	atoi
LEAF_NODE	217:57	217:57	30	atoi
LEAF_NODE	217:61	217:61	29	(
ARGUMENT	217:62	217:62	29	argv [ arg_index + i ]
FIELD	217:62	217:78	30	argv [ arg_index + i ]
LEAF_NODE	217:62	217:62	31	argv
LEAF_NODE	217:66	217:66	31	[
EXPR	217:67	217:77	31	arg_index + i
FIELD	217:67	217:67	32	arg_index
LEAF_NODE	217:67	217:67	33	arg_index
LEAF_NODE	217:76	217:76	32	+
FIELD	217:77	217:77	32	i
LEAF_NODE	217:77	217:77	33	i
LEAF_NODE	217:78	217:78	31	]
LEAF_NODE	217:79	217:79	29	)
LEAF_NODE	217:80	217:80	25	;
JUMP_STATEMENT	218:32	218:37	22	break DESTINATION ;
KEYWORD	218:32	218:32	23	break
LEAF_NODE	218:32	218:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	218:37	218:37	23	;
LABEL	219:28	219:44	22	case TIFF_SSHORT :
LEAF_NODE	219:28	219:28	23	case
LEAF_NODE	219:33	219:33	23	TIFF_SSHORT
LEAF_NODE	219:44	219:44	23	:
ITERATION	220:32	221:36	22	
KEYWORD	220:32	220:32	23	for
LEAF_NODE	220:32	220:32	24	for
LEAF_NODE	220:36	220:36	23	(
FOR_INIT	220:37	220:42	23	i = 0 ;
EXPR	220:37	220:37	24	i = 0
ASSIGN	220:37	220:41	25	i = 0
LVAL	220:37	220:37	26	i
FIELD	220:37	220:37	27	i
LEAF_NODE	220:37	220:37	28	i
ASSIGN_OP	220:39	220:39	26	=
LEAF_NODE	220:39	220:39	27	=
RVAL	220:41	220:41	26	0
FIELD	220:41	220:41	27	0
LEAF_NODE	220:41	220:41	28	0
LEAF_NODE	220:42	220:42	24	;
CONDITION	220:44	220:44	23	i < wc
EXPR	220:44	220:48	24	i < wc
FIELD	220:44	220:44	25	i
LEAF_NODE	220:44	220:44	26	i
REL_OPERATOR	220:46	220:46	25	<
LEAF_NODE	220:46	220:46	26	<
FIELD	220:48	220:48	25	wc
LEAF_NODE	220:48	220:48	26	wc
LEAF_NODE	220:50	220:50	23	;
FOR_EXPR	220:52	220:52	23	i ++
EXPR	220:52	220:52	24	i ++
FIELD	220:52	220:53	25	i ++
LEAF_NODE	220:52	220:52	26	i
LEAF_NODE	220:53	220:53	26	++
LEAF_NODE	220:55	220:55	23	)
STATEMENTS	221:36	221:36	23	
EXPR_STATEMENT	221:36	221:81	24	( ( int16 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] ) ;
EXPR	221:36	221:36	25	( ( int16 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] )
ASSIGN	221:36	221:58	26	( ( int16 * ) array ) [ i ] = atoi ( argv [ arg_index + i ] )
LVAL	221:36	221:54	27	( ( int16 * ) array ) [ i ]
LEAF_NODE	221:36	221:36	28	(
LEAF_NODE	221:37	221:37	28	(
TYPE_NAME	221:38	221:38	28	int16
LEAF_NODE	221:38	221:38	29	int16
LEAF_NODE	221:44	221:44	28	*
LEAF_NODE	221:45	221:45	28	)
FIELD	221:46	221:46	28	array
LEAF_NODE	221:46	221:46	29	array
LEAF_NODE	221:51	221:51	28	)
LEAF_NODE	221:52	221:52	28	[
EXPR	221:53	221:53	28	i
FIELD	221:53	221:53	29	i
LEAF_NODE	221:53	221:53	30	i
LEAF_NODE	221:54	221:54	28	]
ASSIGN_OP	221:56	221:56	27	=
LEAF_NODE	221:56	221:56	28	=
RVAL	221:58	221:58	27	atoi ( argv [ arg_index + i ] )
FUNCTION_CALL	221:58	221:80	28	atoi ( argv [ arg_index + i ] )
CALLEE	221:58	221:58	29	atoi
LEAF_NODE	221:58	221:58	30	atoi
LEAF_NODE	221:62	221:62	29	(
ARGUMENT	221:63	221:63	29	argv [ arg_index + i ]
FIELD	221:63	221:79	30	argv [ arg_index + i ]
LEAF_NODE	221:63	221:63	31	argv
LEAF_NODE	221:67	221:67	31	[
EXPR	221:68	221:78	31	arg_index + i
FIELD	221:68	221:68	32	arg_index
LEAF_NODE	221:68	221:68	33	arg_index
LEAF_NODE	221:77	221:77	32	+
FIELD	221:78	221:78	32	i
LEAF_NODE	221:78	221:78	33	i
LEAF_NODE	221:79	221:79	31	]
LEAF_NODE	221:80	221:80	29	)
LEAF_NODE	221:81	221:81	25	;
JUMP_STATEMENT	222:32	222:37	22	break DESTINATION ;
KEYWORD	222:32	222:32	23	break
LEAF_NODE	222:32	222:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	222:37	222:37	23	;
LABEL	223:28	223:42	22	case TIFF_LONG :
LEAF_NODE	223:28	223:28	23	case
LEAF_NODE	223:33	223:33	23	TIFF_LONG
LEAF_NODE	223:42	223:42	23	:
ITERATION	224:32	225:36	22	
KEYWORD	224:32	224:32	23	for
LEAF_NODE	224:32	224:32	24	for
LEAF_NODE	224:36	224:36	23	(
FOR_INIT	224:37	224:42	23	i = 0 ;
EXPR	224:37	224:37	24	i = 0
ASSIGN	224:37	224:41	25	i = 0
LVAL	224:37	224:37	26	i
FIELD	224:37	224:37	27	i
LEAF_NODE	224:37	224:37	28	i
ASSIGN_OP	224:39	224:39	26	=
LEAF_NODE	224:39	224:39	27	=
RVAL	224:41	224:41	26	0
FIELD	224:41	224:41	27	0
LEAF_NODE	224:41	224:41	28	0
LEAF_NODE	224:42	224:42	24	;
CONDITION	224:44	224:44	23	i < wc
EXPR	224:44	224:48	24	i < wc
FIELD	224:44	224:44	25	i
LEAF_NODE	224:44	224:44	26	i
REL_OPERATOR	224:46	224:46	25	<
LEAF_NODE	224:46	224:46	26	<
FIELD	224:48	224:48	25	wc
LEAF_NODE	224:48	224:48	26	wc
LEAF_NODE	224:50	224:50	23	;
FOR_EXPR	224:52	224:52	23	i ++
EXPR	224:52	224:52	24	i ++
FIELD	224:52	224:53	25	i ++
LEAF_NODE	224:52	224:52	26	i
LEAF_NODE	224:53	224:53	26	++
LEAF_NODE	224:55	224:55	23	)
STATEMENTS	225:36	225:36	23	
EXPR_STATEMENT	225:36	225:82	24	( ( uint32 * ) array ) [ i ] = atol ( argv [ arg_index + i ] ) ;
EXPR	225:36	225:36	25	( ( uint32 * ) array ) [ i ] = atol ( argv [ arg_index + i ] )
ASSIGN	225:36	225:59	26	( ( uint32 * ) array ) [ i ] = atol ( argv [ arg_index + i ] )
LVAL	225:36	225:55	27	( ( uint32 * ) array ) [ i ]
LEAF_NODE	225:36	225:36	28	(
LEAF_NODE	225:37	225:37	28	(
TYPE_NAME	225:38	225:38	28	uint32
LEAF_NODE	225:38	225:38	29	uint32
LEAF_NODE	225:45	225:45	28	*
LEAF_NODE	225:46	225:46	28	)
FIELD	225:47	225:47	28	array
LEAF_NODE	225:47	225:47	29	array
LEAF_NODE	225:52	225:52	28	)
LEAF_NODE	225:53	225:53	28	[
EXPR	225:54	225:54	28	i
FIELD	225:54	225:54	29	i
LEAF_NODE	225:54	225:54	30	i
LEAF_NODE	225:55	225:55	28	]
ASSIGN_OP	225:57	225:57	27	=
LEAF_NODE	225:57	225:57	28	=
RVAL	225:59	225:59	27	atol ( argv [ arg_index + i ] )
FUNCTION_CALL	225:59	225:81	28	atol ( argv [ arg_index + i ] )
CALLEE	225:59	225:59	29	atol
LEAF_NODE	225:59	225:59	30	atol
LEAF_NODE	225:63	225:63	29	(
ARGUMENT	225:64	225:64	29	argv [ arg_index + i ]
FIELD	225:64	225:80	30	argv [ arg_index + i ]
LEAF_NODE	225:64	225:64	31	argv
LEAF_NODE	225:68	225:68	31	[
EXPR	225:69	225:79	31	arg_index + i
FIELD	225:69	225:69	32	arg_index
LEAF_NODE	225:69	225:69	33	arg_index
LEAF_NODE	225:78	225:78	32	+
FIELD	225:79	225:79	32	i
LEAF_NODE	225:79	225:79	33	i
LEAF_NODE	225:80	225:80	31	]
LEAF_NODE	225:81	225:81	29	)
LEAF_NODE	225:82	225:82	25	;
JUMP_STATEMENT	226:32	226:37	22	break DESTINATION ;
KEYWORD	226:32	226:32	23	break
LEAF_NODE	226:32	226:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	226:37	226:37	23	;
LABEL	227:28	227:43	22	case TIFF_SLONG :
LEAF_NODE	227:28	227:28	23	case
LEAF_NODE	227:33	227:33	23	TIFF_SLONG
LEAF_NODE	227:43	227:43	23	:
LABEL	228:28	228:41	22	case TIFF_IFD :
LEAF_NODE	228:28	228:28	23	case
LEAF_NODE	228:33	228:33	23	TIFF_IFD
LEAF_NODE	228:41	228:41	23	:
ITERATION	229:32	230:36	22	
KEYWORD	229:32	229:32	23	for
LEAF_NODE	229:32	229:32	24	for
LEAF_NODE	229:36	229:36	23	(
FOR_INIT	229:37	229:42	23	i = 0 ;
EXPR	229:37	229:37	24	i = 0
ASSIGN	229:37	229:41	25	i = 0
LVAL	229:37	229:37	26	i
FIELD	229:37	229:37	27	i
LEAF_NODE	229:37	229:37	28	i
ASSIGN_OP	229:39	229:39	26	=
LEAF_NODE	229:39	229:39	27	=
RVAL	229:41	229:41	26	0
FIELD	229:41	229:41	27	0
LEAF_NODE	229:41	229:41	28	0
LEAF_NODE	229:42	229:42	24	;
CONDITION	229:44	229:44	23	i < wc
EXPR	229:44	229:48	24	i < wc
FIELD	229:44	229:44	25	i
LEAF_NODE	229:44	229:44	26	i
REL_OPERATOR	229:46	229:46	25	<
LEAF_NODE	229:46	229:46	26	<
FIELD	229:48	229:48	25	wc
LEAF_NODE	229:48	229:48	26	wc
LEAF_NODE	229:50	229:50	23	;
FOR_EXPR	229:52	229:52	23	i ++
EXPR	229:52	229:52	24	i ++
FIELD	229:52	229:53	25	i ++
LEAF_NODE	229:52	229:52	26	i
LEAF_NODE	229:53	229:53	26	++
LEAF_NODE	229:55	229:55	23	)
STATEMENTS	230:36	230:36	23	
EXPR_STATEMENT	230:36	230:81	24	( ( int32 * ) array ) [ i ] = atol ( argv [ arg_index + i ] ) ;
EXPR	230:36	230:36	25	( ( int32 * ) array ) [ i ] = atol ( argv [ arg_index + i ] )
ASSIGN	230:36	230:58	26	( ( int32 * ) array ) [ i ] = atol ( argv [ arg_index + i ] )
LVAL	230:36	230:54	27	( ( int32 * ) array ) [ i ]
LEAF_NODE	230:36	230:36	28	(
LEAF_NODE	230:37	230:37	28	(
TYPE_NAME	230:38	230:38	28	int32
LEAF_NODE	230:38	230:38	29	int32
LEAF_NODE	230:44	230:44	28	*
LEAF_NODE	230:45	230:45	28	)
FIELD	230:46	230:46	28	array
LEAF_NODE	230:46	230:46	29	array
LEAF_NODE	230:51	230:51	28	)
LEAF_NODE	230:52	230:52	28	[
EXPR	230:53	230:53	28	i
FIELD	230:53	230:53	29	i
LEAF_NODE	230:53	230:53	30	i
LEAF_NODE	230:54	230:54	28	]
ASSIGN_OP	230:56	230:56	27	=
LEAF_NODE	230:56	230:56	28	=
RVAL	230:58	230:58	27	atol ( argv [ arg_index + i ] )
FUNCTION_CALL	230:58	230:80	28	atol ( argv [ arg_index + i ] )
CALLEE	230:58	230:58	29	atol
LEAF_NODE	230:58	230:58	30	atol
LEAF_NODE	230:62	230:62	29	(
ARGUMENT	230:63	230:63	29	argv [ arg_index + i ]
FIELD	230:63	230:79	30	argv [ arg_index + i ]
LEAF_NODE	230:63	230:63	31	argv
LEAF_NODE	230:67	230:67	31	[
EXPR	230:68	230:78	31	arg_index + i
FIELD	230:68	230:68	32	arg_index
LEAF_NODE	230:68	230:68	33	arg_index
LEAF_NODE	230:77	230:77	32	+
FIELD	230:78	230:78	32	i
LEAF_NODE	230:78	230:78	33	i
LEAF_NODE	230:79	230:79	31	]
LEAF_NODE	230:80	230:80	29	)
LEAF_NODE	230:81	230:81	25	;
JUMP_STATEMENT	231:32	231:37	22	break DESTINATION ;
KEYWORD	231:32	231:32	23	break
LEAF_NODE	231:32	231:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	231:37	231:37	23	;
LABEL	232:28	232:43	22	case TIFF_LONG8 :
LEAF_NODE	232:28	232:28	23	case
LEAF_NODE	232:33	232:33	23	TIFF_LONG8
LEAF_NODE	232:43	232:43	23	:
ITERATION	233:32	234:36	22	
KEYWORD	233:32	233:32	23	for
LEAF_NODE	233:32	233:32	24	for
LEAF_NODE	233:36	233:36	23	(
FOR_INIT	233:37	233:42	23	i = 0 ;
EXPR	233:37	233:37	24	i = 0
ASSIGN	233:37	233:41	25	i = 0
LVAL	233:37	233:37	26	i
FIELD	233:37	233:37	27	i
LEAF_NODE	233:37	233:37	28	i
ASSIGN_OP	233:39	233:39	26	=
LEAF_NODE	233:39	233:39	27	=
RVAL	233:41	233:41	26	0
FIELD	233:41	233:41	27	0
LEAF_NODE	233:41	233:41	28	0
LEAF_NODE	233:42	233:42	24	;
CONDITION	233:44	233:44	23	i < wc
EXPR	233:44	233:48	24	i < wc
FIELD	233:44	233:44	25	i
LEAF_NODE	233:44	233:44	26	i
REL_OPERATOR	233:46	233:46	25	<
LEAF_NODE	233:46	233:46	26	<
FIELD	233:48	233:48	25	wc
LEAF_NODE	233:48	233:48	26	wc
LEAF_NODE	233:50	233:50	23	;
FOR_EXPR	233:52	233:52	23	i ++
EXPR	233:52	233:52	24	i ++
FIELD	233:52	233:53	25	i ++
LEAF_NODE	233:52	233:52	26	i
LEAF_NODE	233:53	233:53	26	++
LEAF_NODE	233:55	233:55	23	)
STATEMENTS	234:36	234:36	23	
EXPR_STATEMENT	234:36	234:104	24	( ( uint64 * ) array ) [ i ] = strtoll ( argv [ arg_index + i ] , ( char * * ) NULL , 10 ) ;
EXPR	234:36	234:36	25	( ( uint64 * ) array ) [ i ] = strtoll ( argv [ arg_index + i ] , ( char * * ) NULL , 10 )
ASSIGN	234:36	234:59	26	( ( uint64 * ) array ) [ i ] = strtoll ( argv [ arg_index + i ] , ( char * * ) NULL , 10 )
LVAL	234:36	234:55	27	( ( uint64 * ) array ) [ i ]
LEAF_NODE	234:36	234:36	28	(
LEAF_NODE	234:37	234:37	28	(
TYPE_NAME	234:38	234:38	28	uint64
LEAF_NODE	234:38	234:38	29	uint64
LEAF_NODE	234:45	234:45	28	*
LEAF_NODE	234:46	234:46	28	)
FIELD	234:47	234:47	28	array
LEAF_NODE	234:47	234:47	29	array
LEAF_NODE	234:52	234:52	28	)
LEAF_NODE	234:53	234:53	28	[
EXPR	234:54	234:54	28	i
FIELD	234:54	234:54	29	i
LEAF_NODE	234:54	234:54	30	i
LEAF_NODE	234:55	234:55	28	]
ASSIGN_OP	234:57	234:57	27	=
LEAF_NODE	234:57	234:57	28	=
RVAL	234:59	234:59	27	strtoll ( argv [ arg_index + i ] , ( char * * ) NULL , 10 )
FUNCTION_CALL	234:59	234:103	28	strtoll ( argv [ arg_index + i ] , ( char * * ) NULL , 10 )
CALLEE	234:59	234:59	29	strtoll
LEAF_NODE	234:59	234:59	30	strtoll
LEAF_NODE	234:66	234:66	29	(
ARGUMENT	234:67	234:67	29	argv [ arg_index + i ]
FIELD	234:67	234:83	30	argv [ arg_index + i ]
LEAF_NODE	234:67	234:67	31	argv
LEAF_NODE	234:71	234:71	31	[
EXPR	234:72	234:82	31	arg_index + i
FIELD	234:72	234:72	32	arg_index
LEAF_NODE	234:72	234:72	33	arg_index
LEAF_NODE	234:81	234:81	32	+
FIELD	234:82	234:82	32	i
LEAF_NODE	234:82	234:82	33	i
LEAF_NODE	234:83	234:83	31	]
LEAF_NODE	234:84	234:84	29	,
ARGUMENT	234:86	234:95	29	( char * * ) NULL
LEAF_NODE	234:86	234:86	30	(
TYPE_NAME	234:87	234:87	30	char
LEAF_NODE	234:87	234:87	31	char
LEAF_NODE	234:92	234:92	30	*
LEAF_NODE	234:93	234:93	30	*
LEAF_NODE	234:94	234:94	30	)
FIELD	234:95	234:95	30	NULL
LEAF_NODE	234:95	234:95	31	NULL
LEAF_NODE	234:99	234:99	29	,
ARGUMENT	234:101	234:101	29	10
FIELD	234:101	234:101	30	10
LEAF_NODE	234:101	234:101	31	10
LEAF_NODE	234:103	234:103	29	)
LEAF_NODE	234:104	234:104	25	;
JUMP_STATEMENT	235:32	235:37	22	break DESTINATION ;
KEYWORD	235:32	235:32	23	break
LEAF_NODE	235:32	235:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	235:37	235:37	23	;
LABEL	236:28	236:44	22	case TIFF_SLONG8 :
LEAF_NODE	236:28	236:28	23	case
LEAF_NODE	236:33	236:33	23	TIFF_SLONG8
LEAF_NODE	236:44	236:44	23	:
LABEL	237:28	237:42	22	case TIFF_IFD8 :
LEAF_NODE	237:28	237:28	23	case
LEAF_NODE	237:33	237:33	23	TIFF_IFD8
LEAF_NODE	237:42	237:42	23	:
ITERATION	238:32	239:36	22	
KEYWORD	238:32	238:32	23	for
LEAF_NODE	238:32	238:32	24	for
LEAF_NODE	238:36	238:36	23	(
FOR_INIT	238:37	238:42	23	i = 0 ;
EXPR	238:37	238:37	24	i = 0
ASSIGN	238:37	238:41	25	i = 0
LVAL	238:37	238:37	26	i
FIELD	238:37	238:37	27	i
LEAF_NODE	238:37	238:37	28	i
ASSIGN_OP	238:39	238:39	26	=
LEAF_NODE	238:39	238:39	27	=
RVAL	238:41	238:41	26	0
FIELD	238:41	238:41	27	0
LEAF_NODE	238:41	238:41	28	0
LEAF_NODE	238:42	238:42	24	;
CONDITION	238:44	238:44	23	i < wc
EXPR	238:44	238:48	24	i < wc
FIELD	238:44	238:44	25	i
LEAF_NODE	238:44	238:44	26	i
REL_OPERATOR	238:46	238:46	25	<
LEAF_NODE	238:46	238:46	26	<
FIELD	238:48	238:48	25	wc
LEAF_NODE	238:48	238:48	26	wc
LEAF_NODE	238:50	238:50	23	;
FOR_EXPR	238:52	238:52	23	i ++
EXPR	238:52	238:52	24	i ++
FIELD	238:52	238:53	25	i ++
LEAF_NODE	238:52	238:52	26	i
LEAF_NODE	238:53	238:53	26	++
LEAF_NODE	238:55	238:55	23	)
STATEMENTS	239:36	239:36	23	
EXPR_STATEMENT	239:36	239:103	24	( ( int64 * ) array ) [ i ] = strtoll ( argv [ arg_index + i ] , ( char * * ) NULL , 10 ) ;
EXPR	239:36	239:36	25	( ( int64 * ) array ) [ i ] = strtoll ( argv [ arg_index + i ] , ( char * * ) NULL , 10 )
ASSIGN	239:36	239:58	26	( ( int64 * ) array ) [ i ] = strtoll ( argv [ arg_index + i ] , ( char * * ) NULL , 10 )
LVAL	239:36	239:54	27	( ( int64 * ) array ) [ i ]
LEAF_NODE	239:36	239:36	28	(
LEAF_NODE	239:37	239:37	28	(
TYPE_NAME	239:38	239:38	28	int64
LEAF_NODE	239:38	239:38	29	int64
LEAF_NODE	239:44	239:44	28	*
LEAF_NODE	239:45	239:45	28	)
FIELD	239:46	239:46	28	array
LEAF_NODE	239:46	239:46	29	array
LEAF_NODE	239:51	239:51	28	)
LEAF_NODE	239:52	239:52	28	[
EXPR	239:53	239:53	28	i
FIELD	239:53	239:53	29	i
LEAF_NODE	239:53	239:53	30	i
LEAF_NODE	239:54	239:54	28	]
ASSIGN_OP	239:56	239:56	27	=
LEAF_NODE	239:56	239:56	28	=
RVAL	239:58	239:58	27	strtoll ( argv [ arg_index + i ] , ( char * * ) NULL , 10 )
FUNCTION_CALL	239:58	239:102	28	strtoll ( argv [ arg_index + i ] , ( char * * ) NULL , 10 )
CALLEE	239:58	239:58	29	strtoll
LEAF_NODE	239:58	239:58	30	strtoll
LEAF_NODE	239:65	239:65	29	(
ARGUMENT	239:66	239:66	29	argv [ arg_index + i ]
FIELD	239:66	239:82	30	argv [ arg_index + i ]
LEAF_NODE	239:66	239:66	31	argv
LEAF_NODE	239:70	239:70	31	[
EXPR	239:71	239:81	31	arg_index + i
FIELD	239:71	239:71	32	arg_index
LEAF_NODE	239:71	239:71	33	arg_index
LEAF_NODE	239:80	239:80	32	+
FIELD	239:81	239:81	32	i
LEAF_NODE	239:81	239:81	33	i
LEAF_NODE	239:82	239:82	31	]
LEAF_NODE	239:83	239:83	29	,
ARGUMENT	239:85	239:94	29	( char * * ) NULL
LEAF_NODE	239:85	239:85	30	(
TYPE_NAME	239:86	239:86	30	char
LEAF_NODE	239:86	239:86	31	char
LEAF_NODE	239:91	239:91	30	*
LEAF_NODE	239:92	239:92	30	*
LEAF_NODE	239:93	239:93	30	)
FIELD	239:94	239:94	30	NULL
LEAF_NODE	239:94	239:94	31	NULL
LEAF_NODE	239:98	239:98	29	,
ARGUMENT	239:100	239:100	29	10
FIELD	239:100	239:100	30	10
LEAF_NODE	239:100	239:100	31	10
LEAF_NODE	239:102	239:102	29	)
LEAF_NODE	239:103	239:103	25	;
JUMP_STATEMENT	240:32	240:37	22	break DESTINATION ;
KEYWORD	240:32	240:32	23	break
LEAF_NODE	240:32	240:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	240:37	240:37	23	;
LABEL	241:28	241:44	22	case TIFF_DOUBLE :
LEAF_NODE	241:28	241:28	23	case
LEAF_NODE	241:33	241:33	23	TIFF_DOUBLE
LEAF_NODE	241:44	241:44	23	:
ITERATION	242:32	243:36	22	
KEYWORD	242:32	242:32	23	for
LEAF_NODE	242:32	242:32	24	for
LEAF_NODE	242:36	242:36	23	(
FOR_INIT	242:37	242:42	23	i = 0 ;
EXPR	242:37	242:37	24	i = 0
ASSIGN	242:37	242:41	25	i = 0
LVAL	242:37	242:37	26	i
FIELD	242:37	242:37	27	i
LEAF_NODE	242:37	242:37	28	i
ASSIGN_OP	242:39	242:39	26	=
LEAF_NODE	242:39	242:39	27	=
RVAL	242:41	242:41	26	0
FIELD	242:41	242:41	27	0
LEAF_NODE	242:41	242:41	28	0
LEAF_NODE	242:42	242:42	24	;
CONDITION	242:44	242:44	23	i < wc
EXPR	242:44	242:48	24	i < wc
FIELD	242:44	242:44	25	i
LEAF_NODE	242:44	242:44	26	i
REL_OPERATOR	242:46	242:46	25	<
LEAF_NODE	242:46	242:46	26	<
FIELD	242:48	242:48	25	wc
LEAF_NODE	242:48	242:48	26	wc
LEAF_NODE	242:50	242:50	23	;
FOR_EXPR	242:52	242:52	23	i ++
EXPR	242:52	242:52	24	i ++
FIELD	242:52	242:53	25	i ++
LEAF_NODE	242:52	242:52	26	i
LEAF_NODE	242:53	242:53	26	++
LEAF_NODE	242:55	242:55	23	)
STATEMENTS	243:36	243:36	23	
EXPR_STATEMENT	243:36	243:82	24	( ( double * ) array ) [ i ] = atof ( argv [ arg_index + i ] ) ;
EXPR	243:36	243:36	25	( ( double * ) array ) [ i ] = atof ( argv [ arg_index + i ] )
ASSIGN	243:36	243:59	26	( ( double * ) array ) [ i ] = atof ( argv [ arg_index + i ] )
LVAL	243:36	243:55	27	( ( double * ) array ) [ i ]
LEAF_NODE	243:36	243:36	28	(
LEAF_NODE	243:37	243:37	28	(
TYPE_NAME	243:38	243:38	28	double
LEAF_NODE	243:38	243:38	29	double
LEAF_NODE	243:45	243:45	28	*
LEAF_NODE	243:46	243:46	28	)
FIELD	243:47	243:47	28	array
LEAF_NODE	243:47	243:47	29	array
LEAF_NODE	243:52	243:52	28	)
LEAF_NODE	243:53	243:53	28	[
EXPR	243:54	243:54	28	i
FIELD	243:54	243:54	29	i
LEAF_NODE	243:54	243:54	30	i
LEAF_NODE	243:55	243:55	28	]
ASSIGN_OP	243:57	243:57	27	=
LEAF_NODE	243:57	243:57	28	=
RVAL	243:59	243:59	27	atof ( argv [ arg_index + i ] )
FUNCTION_CALL	243:59	243:81	28	atof ( argv [ arg_index + i ] )
CALLEE	243:59	243:59	29	atof
LEAF_NODE	243:59	243:59	30	atof
LEAF_NODE	243:63	243:63	29	(
ARGUMENT	243:64	243:64	29	argv [ arg_index + i ]
FIELD	243:64	243:80	30	argv [ arg_index + i ]
LEAF_NODE	243:64	243:64	31	argv
LEAF_NODE	243:68	243:68	31	[
EXPR	243:69	243:79	31	arg_index + i
FIELD	243:69	243:69	32	arg_index
LEAF_NODE	243:69	243:69	33	arg_index
LEAF_NODE	243:78	243:78	32	+
FIELD	243:79	243:79	32	i
LEAF_NODE	243:79	243:79	33	i
LEAF_NODE	243:80	243:80	31	]
LEAF_NODE	243:81	243:81	29	)
LEAF_NODE	243:82	243:82	25	;
JUMP_STATEMENT	244:32	244:37	22	break DESTINATION ;
KEYWORD	244:32	244:32	23	break
LEAF_NODE	244:32	244:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	244:37	244:37	23	;
LABEL	245:28	245:46	22	case TIFF_RATIONAL :
LEAF_NODE	245:28	245:28	23	case
LEAF_NODE	245:33	245:33	23	TIFF_RATIONAL
LEAF_NODE	245:46	245:46	23	:
LABEL	246:28	246:47	22	case TIFF_SRATIONAL :
LEAF_NODE	246:28	246:28	23	case
LEAF_NODE	246:33	246:33	23	TIFF_SRATIONAL
LEAF_NODE	246:47	246:47	23	:
LABEL	247:28	247:43	22	case TIFF_FLOAT :
LEAF_NODE	247:28	247:28	23	case
LEAF_NODE	247:33	247:33	23	TIFF_FLOAT
LEAF_NODE	247:43	247:43	23	:
ITERATION	248:32	249:36	22	
KEYWORD	248:32	248:32	23	for
LEAF_NODE	248:32	248:32	24	for
LEAF_NODE	248:36	248:36	23	(
FOR_INIT	248:37	248:42	23	i = 0 ;
EXPR	248:37	248:37	24	i = 0
ASSIGN	248:37	248:41	25	i = 0
LVAL	248:37	248:37	26	i
FIELD	248:37	248:37	27	i
LEAF_NODE	248:37	248:37	28	i
ASSIGN_OP	248:39	248:39	26	=
LEAF_NODE	248:39	248:39	27	=
RVAL	248:41	248:41	26	0
FIELD	248:41	248:41	27	0
LEAF_NODE	248:41	248:41	28	0
LEAF_NODE	248:42	248:42	24	;
CONDITION	248:44	248:44	23	i < wc
EXPR	248:44	248:48	24	i < wc
FIELD	248:44	248:44	25	i
LEAF_NODE	248:44	248:44	26	i
REL_OPERATOR	248:46	248:46	25	<
LEAF_NODE	248:46	248:46	26	<
FIELD	248:48	248:48	25	wc
LEAF_NODE	248:48	248:48	26	wc
LEAF_NODE	248:50	248:50	23	;
FOR_EXPR	248:52	248:52	23	i ++
EXPR	248:52	248:52	24	i ++
FIELD	248:52	248:53	25	i ++
LEAF_NODE	248:52	248:52	26	i
LEAF_NODE	248:53	248:53	26	++
LEAF_NODE	248:55	248:55	23	)
STATEMENTS	249:36	249:36	23	
EXPR_STATEMENT	249:36	249:88	24	( ( float * ) array ) [ i ] = ( float ) atof ( argv [ arg_index + i ] ) ;
EXPR	249:36	249:36	25	( ( float * ) array ) [ i ] = ( float ) atof ( argv [ arg_index + i ] )
ASSIGN	249:36	249:58	26	( ( float * ) array ) [ i ] = ( float ) atof ( argv [ arg_index + i ] )
LVAL	249:36	249:54	27	( ( float * ) array ) [ i ]
LEAF_NODE	249:36	249:36	28	(
LEAF_NODE	249:37	249:37	28	(
TYPE_NAME	249:38	249:38	28	float
LEAF_NODE	249:38	249:38	29	float
LEAF_NODE	249:44	249:44	28	*
LEAF_NODE	249:45	249:45	28	)
FIELD	249:46	249:46	28	array
LEAF_NODE	249:46	249:46	29	array
LEAF_NODE	249:51	249:51	28	)
LEAF_NODE	249:52	249:52	28	[
EXPR	249:53	249:53	28	i
FIELD	249:53	249:53	29	i
LEAF_NODE	249:53	249:53	30	i
LEAF_NODE	249:54	249:54	28	]
ASSIGN_OP	249:56	249:56	27	=
LEAF_NODE	249:56	249:56	28	=
RVAL	249:58	249:65	27	( float ) atof ( argv [ arg_index + i ] )
LEAF_NODE	249:58	249:58	28	(
TYPE_NAME	249:59	249:59	28	float
LEAF_NODE	249:59	249:59	29	float
LEAF_NODE	249:64	249:64	28	)
FUNCTION_CALL	249:65	249:87	28	atof ( argv [ arg_index + i ] )
CALLEE	249:65	249:65	29	atof
LEAF_NODE	249:65	249:65	30	atof
LEAF_NODE	249:69	249:69	29	(
ARGUMENT	249:70	249:70	29	argv [ arg_index + i ]
FIELD	249:70	249:86	30	argv [ arg_index + i ]
LEAF_NODE	249:70	249:70	31	argv
LEAF_NODE	249:74	249:74	31	[
EXPR	249:75	249:85	31	arg_index + i
FIELD	249:75	249:75	32	arg_index
LEAF_NODE	249:75	249:75	33	arg_index
LEAF_NODE	249:84	249:84	32	+
FIELD	249:85	249:85	32	i
LEAF_NODE	249:85	249:85	33	i
LEAF_NODE	249:86	249:86	31	]
LEAF_NODE	249:87	249:87	29	)
LEAF_NODE	249:88	249:88	25	;
JUMP_STATEMENT	250:32	250:37	22	break DESTINATION ;
KEYWORD	250:32	250:32	23	break
LEAF_NODE	250:32	250:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	250:37	250:37	23	;
LABEL	251:28	251:35	22	default :
LEAF_NODE	251:28	251:28	23	default
LEAF_NODE	251:35	251:35	23	:
JUMP_STATEMENT	252:32	252:37	22	break DESTINATION ;
KEYWORD	252:32	252:32	23	break
LEAF_NODE	252:32	252:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	252:37	252:37	23	;
LEAF_NODE	253:24	253:24	21	}
SELECTION	255:24	255:53	19	
KEYWORD	255:24	255:24	20	if
LEAF_NODE	255:24	255:24	21	if
LEAF_NODE	255:27	255:27	20	(
CONDITION	255:28	255:28	20	TIFFFieldPassCount ( fip )
EXPR	255:28	255:28	21	TIFFFieldPassCount ( fip )
FUNCTION_CALL	255:28	255:50	22	TIFFFieldPassCount ( fip )
CALLEE	255:28	255:28	23	TIFFFieldPassCount
LEAF_NODE	255:28	255:28	24	TIFFFieldPassCount
LEAF_NODE	255:46	255:46	23	(
ARGUMENT	255:47	255:47	23	fip
FIELD	255:47	255:47	24	fip
LEAF_NODE	255:47	255:47	25	fip
LEAF_NODE	255:50	255:50	23	)
LEAF_NODE	255:51	255:51	20	)
STATEMENTS	255:53	258:24	20	
LEAF_NODE	255:53	255:53	21	{
STATEMENTS	256:32	256:32	21	
EXPR_STATEMENT	256:32	257:61	22	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , wc , array ) ;
EXPR	256:32	256:32	23	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , wc , array )
ASSIGN	256:32	256:38	24	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , wc , array )
LVAL	256:32	256:32	25	ret
FIELD	256:32	256:32	26	ret
LEAF_NODE	256:32	256:32	27	ret
ASSIGN_OP	256:36	256:36	25	=
LEAF_NODE	256:36	256:36	26	=
RVAL	256:38	256:38	25	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , wc , array )
FUNCTION_CALL	256:38	257:60	26	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , wc , array )
CALLEE	256:38	256:38	27	TIFFSetField
LEAF_NODE	256:38	256:38	28	TIFFSetField
LEAF_NODE	256:50	256:50	27	(
ARGUMENT	256:51	256:51	27	tiff
FIELD	256:51	256:51	28	tiff
LEAF_NODE	256:51	256:51	29	tiff
LEAF_NODE	256:55	256:55	27	,
ARGUMENT	256:57	256:57	27	TIFFFieldTag ( fip )
FUNCTION_CALL	256:57	256:73	28	TIFFFieldTag ( fip )
CALLEE	256:57	256:57	29	TIFFFieldTag
LEAF_NODE	256:57	256:57	30	TIFFFieldTag
LEAF_NODE	256:69	256:69	29	(
ARGUMENT	256:70	256:70	29	fip
FIELD	256:70	256:70	30	fip
LEAF_NODE	256:70	256:70	31	fip
LEAF_NODE	256:73	256:73	29	)
LEAF_NODE	256:74	256:74	27	,
ARGUMENT	257:51	257:51	27	wc
FIELD	257:51	257:51	28	wc
LEAF_NODE	257:51	257:51	29	wc
LEAF_NODE	257:53	257:53	27	,
ARGUMENT	257:55	257:55	27	array
FIELD	257:55	257:55	28	array
LEAF_NODE	257:55	257:55	29	array
LEAF_NODE	257:60	257:60	27	)
LEAF_NODE	257:61	257:61	23	;
LEAF_NODE	258:24	258:24	21	}
SELECTION	258:26	258:31	19	
KEYWORD	258:26	258:26	20	else
LEAF_NODE	258:26	258:26	21	else
STATEMENTS	258:31	258:31	20	
SELECTION	258:31	261:49	21	
KEYWORD	258:31	258:31	22	if
LEAF_NODE	258:31	258:31	23	if
LEAF_NODE	258:34	258:34	22	(
CONDITION	258:35	258:35	22	TIFFFieldTag ( fip ) == TIFFTAG_PAGENUMBER || TIFFFieldTag ( fip ) == TIFFTAG_HALFTONEHINTS || TIFFFieldTag ( fip ) == TIFFTAG_YCBCRSUBSAMPLING || TIFFFieldTag ( fip ) == TIFFTAG_DOTRANGE
EXPR	258:35	258:35	23	TIFFFieldTag ( fip ) == TIFFTAG_PAGENUMBER || TIFFFieldTag ( fip ) == TIFFTAG_HALFTONEHINTS || TIFFFieldTag ( fip ) == TIFFTAG_YCBCRSUBSAMPLING || TIFFFieldTag ( fip ) == TIFFTAG_DOTRANGE
OR	258:35	259:10	24	TIFFFieldTag ( fip ) == TIFFTAG_PAGENUMBER || TIFFFieldTag ( fip ) == TIFFTAG_HALFTONEHINTS || TIFFFieldTag ( fip ) == TIFFTAG_YCBCRSUBSAMPLING || TIFFFieldTag ( fip ) == TIFFTAG_DOTRANGE
EXPR	258:35	258:56	25	TIFFFieldTag ( fip ) == TIFFTAG_PAGENUMBER
FUNCTION_CALL	258:35	258:51	26	TIFFFieldTag ( fip )
CALLEE	258:35	258:35	27	TIFFFieldTag
LEAF_NODE	258:35	258:35	28	TIFFFieldTag
LEAF_NODE	258:47	258:47	27	(
ARGUMENT	258:48	258:48	27	fip
FIELD	258:48	258:48	28	fip
LEAF_NODE	258:48	258:48	29	fip
LEAF_NODE	258:51	258:51	27	)
EQ_OPERATOR	258:53	258:53	26	==
LEAF_NODE	258:53	258:53	27	==
FIELD	258:56	258:56	26	TIFFTAG_PAGENUMBER
LEAF_NODE	258:56	258:56	27	TIFFTAG_PAGENUMBER
LEAF_NODE	259:7	259:7	25	||
EXPR	259:10	259:10	25	TIFFFieldTag ( fip ) == TIFFTAG_HALFTONEHINTS || TIFFFieldTag ( fip ) == TIFFTAG_YCBCRSUBSAMPLING || TIFFFieldTag ( fip ) == TIFFTAG_DOTRANGE
OR	259:10	260:10	26	TIFFFieldTag ( fip ) == TIFFTAG_HALFTONEHINTS || TIFFFieldTag ( fip ) == TIFFTAG_YCBCRSUBSAMPLING || TIFFFieldTag ( fip ) == TIFFTAG_DOTRANGE
EXPR	259:10	259:31	27	TIFFFieldTag ( fip ) == TIFFTAG_HALFTONEHINTS
FUNCTION_CALL	259:10	259:26	28	TIFFFieldTag ( fip )
CALLEE	259:10	259:10	29	TIFFFieldTag
LEAF_NODE	259:10	259:10	30	TIFFFieldTag
LEAF_NODE	259:22	259:22	29	(
ARGUMENT	259:23	259:23	29	fip
FIELD	259:23	259:23	30	fip
LEAF_NODE	259:23	259:23	31	fip
LEAF_NODE	259:26	259:26	29	)
EQ_OPERATOR	259:28	259:28	28	==
LEAF_NODE	259:28	259:28	29	==
FIELD	259:31	259:31	28	TIFFTAG_HALFTONEHINTS
LEAF_NODE	259:31	259:31	29	TIFFTAG_HALFTONEHINTS
LEAF_NODE	260:7	260:7	27	||
EXPR	260:10	260:10	27	TIFFFieldTag ( fip ) == TIFFTAG_YCBCRSUBSAMPLING || TIFFFieldTag ( fip ) == TIFFTAG_DOTRANGE
OR	260:10	261:10	28	TIFFFieldTag ( fip ) == TIFFTAG_YCBCRSUBSAMPLING || TIFFFieldTag ( fip ) == TIFFTAG_DOTRANGE
EXPR	260:10	260:31	29	TIFFFieldTag ( fip ) == TIFFTAG_YCBCRSUBSAMPLING
FUNCTION_CALL	260:10	260:26	30	TIFFFieldTag ( fip )
CALLEE	260:10	260:10	31	TIFFFieldTag
LEAF_NODE	260:10	260:10	32	TIFFFieldTag
LEAF_NODE	260:22	260:22	31	(
ARGUMENT	260:23	260:23	31	fip
FIELD	260:23	260:23	32	fip
LEAF_NODE	260:23	260:23	33	fip
LEAF_NODE	260:26	260:26	31	)
EQ_OPERATOR	260:28	260:28	30	==
LEAF_NODE	260:28	260:28	31	==
FIELD	260:31	260:31	30	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	260:31	260:31	31	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	261:7	261:7	29	||
EXPR	261:10	261:31	29	TIFFFieldTag ( fip ) == TIFFTAG_DOTRANGE
FUNCTION_CALL	261:10	261:26	30	TIFFFieldTag ( fip )
CALLEE	261:10	261:10	31	TIFFFieldTag
LEAF_NODE	261:10	261:10	32	TIFFFieldTag
LEAF_NODE	261:22	261:22	31	(
ARGUMENT	261:23	261:23	31	fip
FIELD	261:23	261:23	32	fip
LEAF_NODE	261:23	261:23	33	fip
LEAF_NODE	261:26	261:26	31	)
EQ_OPERATOR	261:28	261:28	30	==
LEAF_NODE	261:28	261:28	31	==
FIELD	261:31	261:31	30	TIFFTAG_DOTRANGE
LEAF_NODE	261:31	261:31	31	TIFFTAG_DOTRANGE
LEAF_NODE	261:47	261:47	22	)
STATEMENTS	261:49	269:3	22	
LEAF_NODE	261:49	261:49	23	{
STATEMENTS	262:11	265:6	23	
SELECTION	262:11	262:52	24	
KEYWORD	262:11	262:11	25	if
LEAF_NODE	262:11	262:11	26	if
LEAF_NODE	262:14	262:14	25	(
CONDITION	262:15	262:15	25	TIFFFieldDataType ( fip ) == TIFF_BYTE
EXPR	262:15	262:41	26	TIFFFieldDataType ( fip ) == TIFF_BYTE
FUNCTION_CALL	262:15	262:36	27	TIFFFieldDataType ( fip )
CALLEE	262:15	262:15	28	TIFFFieldDataType
LEAF_NODE	262:15	262:15	29	TIFFFieldDataType
LEAF_NODE	262:32	262:32	28	(
ARGUMENT	262:33	262:33	28	fip
FIELD	262:33	262:33	29	fip
LEAF_NODE	262:33	262:33	30	fip
LEAF_NODE	262:36	262:36	28	)
EQ_OPERATOR	262:38	262:38	27	==
LEAF_NODE	262:38	262:38	28	==
FIELD	262:41	262:41	27	TIFF_BYTE
LEAF_NODE	262:41	262:41	28	TIFF_BYTE
LEAF_NODE	262:50	262:50	25	)
STATEMENTS	262:52	265:4	25	
LEAF_NODE	262:52	262:52	26	{
STATEMENTS	263:5	263:5	26	
EXPR_STATEMENT	263:5	264:47	27	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( ( uint8 * ) array ) [ 0 ] , ( ( uint8 * ) array ) [ 1 ] ) ;
EXPR	263:5	263:5	28	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( ( uint8 * ) array ) [ 0 ] , ( ( uint8 * ) array ) [ 1 ] )
ASSIGN	263:5	263:11	29	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( ( uint8 * ) array ) [ 0 ] , ( ( uint8 * ) array ) [ 1 ] )
LVAL	263:5	263:5	30	ret
FIELD	263:5	263:5	31	ret
LEAF_NODE	263:5	263:5	32	ret
ASSIGN_OP	263:9	263:9	30	=
LEAF_NODE	263:9	263:9	31	=
RVAL	263:11	263:11	30	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( ( uint8 * ) array ) [ 0 ] , ( ( uint8 * ) array ) [ 1 ] )
FUNCTION_CALL	263:11	264:46	31	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( ( uint8 * ) array ) [ 0 ] , ( ( uint8 * ) array ) [ 1 ] )
CALLEE	263:11	263:11	32	TIFFSetField
LEAF_NODE	263:11	263:11	33	TIFFSetField
LEAF_NODE	263:23	263:23	32	(
ARGUMENT	263:24	263:24	32	tiff
FIELD	263:24	263:24	33	tiff
LEAF_NODE	263:24	263:24	34	tiff
LEAF_NODE	263:28	263:28	32	,
ARGUMENT	263:30	263:30	32	TIFFFieldTag ( fip )
FUNCTION_CALL	263:30	263:46	33	TIFFFieldTag ( fip )
CALLEE	263:30	263:30	34	TIFFFieldTag
LEAF_NODE	263:30	263:30	35	TIFFFieldTag
LEAF_NODE	263:42	263:42	34	(
ARGUMENT	263:43	263:43	34	fip
FIELD	263:43	263:43	35	fip
LEAF_NODE	263:43	263:43	36	fip
LEAF_NODE	263:46	263:46	34	)
LEAF_NODE	263:47	263:47	32	,
ARGUMENT	264:6	264:24	32	( ( uint8 * ) array ) [ 0 ]
LEAF_NODE	264:6	264:6	33	(
LEAF_NODE	264:7	264:7	33	(
TYPE_NAME	264:8	264:8	33	uint8
LEAF_NODE	264:8	264:8	34	uint8
LEAF_NODE	264:14	264:14	33	*
LEAF_NODE	264:15	264:15	33	)
FIELD	264:16	264:16	33	array
LEAF_NODE	264:16	264:16	34	array
LEAF_NODE	264:21	264:21	33	)
LEAF_NODE	264:22	264:22	33	[
EXPR	264:23	264:23	33	0
FIELD	264:23	264:23	34	0
LEAF_NODE	264:23	264:23	35	0
LEAF_NODE	264:24	264:24	33	]
LEAF_NODE	264:25	264:25	32	,
ARGUMENT	264:27	264:45	32	( ( uint8 * ) array ) [ 1 ]
LEAF_NODE	264:27	264:27	33	(
LEAF_NODE	264:28	264:28	33	(
TYPE_NAME	264:29	264:29	33	uint8
LEAF_NODE	264:29	264:29	34	uint8
LEAF_NODE	264:35	264:35	33	*
LEAF_NODE	264:36	264:36	33	)
FIELD	264:37	264:37	33	array
LEAF_NODE	264:37	264:37	34	array
LEAF_NODE	264:42	264:42	33	)
LEAF_NODE	264:43	264:43	33	[
EXPR	264:44	264:44	33	1
FIELD	264:44	264:44	34	1
LEAF_NODE	264:44	264:44	35	1
LEAF_NODE	264:45	264:45	33	]
LEAF_NODE	264:46	264:46	32	)
LEAF_NODE	264:47	264:47	28	;
LEAF_NODE	265:4	265:4	26	}
SELECTION	265:6	265:11	24	
KEYWORD	265:6	265:6	25	else
LEAF_NODE	265:6	265:6	26	else
STATEMENTS	265:11	265:11	25	
SELECTION	265:11	265:53	26	
KEYWORD	265:11	265:11	27	if
LEAF_NODE	265:11	265:11	28	if
LEAF_NODE	265:14	265:14	27	(
CONDITION	265:15	265:15	27	TIFFFieldDataType ( fip ) == TIFF_SHORT
EXPR	265:15	265:41	28	TIFFFieldDataType ( fip ) == TIFF_SHORT
FUNCTION_CALL	265:15	265:36	29	TIFFFieldDataType ( fip )
CALLEE	265:15	265:15	30	TIFFFieldDataType
LEAF_NODE	265:15	265:15	31	TIFFFieldDataType
LEAF_NODE	265:32	265:32	30	(
ARGUMENT	265:33	265:33	30	fip
FIELD	265:33	265:33	31	fip
LEAF_NODE	265:33	265:33	32	fip
LEAF_NODE	265:36	265:36	30	)
EQ_OPERATOR	265:38	265:38	29	==
LEAF_NODE	265:38	265:38	30	==
FIELD	265:41	265:41	29	TIFF_SHORT
LEAF_NODE	265:41	265:41	30	TIFF_SHORT
LEAF_NODE	265:51	265:51	27	)
STATEMENTS	265:53	268:4	27	
LEAF_NODE	265:53	265:53	28	{
STATEMENTS	266:5	266:5	28	
EXPR_STATEMENT	266:5	267:49	29	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( ( uint16 * ) array ) [ 0 ] , ( ( uint16 * ) array ) [ 1 ] ) ;
EXPR	266:5	266:5	30	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( ( uint16 * ) array ) [ 0 ] , ( ( uint16 * ) array ) [ 1 ] )
ASSIGN	266:5	266:11	31	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( ( uint16 * ) array ) [ 0 ] , ( ( uint16 * ) array ) [ 1 ] )
LVAL	266:5	266:5	32	ret
FIELD	266:5	266:5	33	ret
LEAF_NODE	266:5	266:5	34	ret
ASSIGN_OP	266:9	266:9	32	=
LEAF_NODE	266:9	266:9	33	=
RVAL	266:11	266:11	32	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( ( uint16 * ) array ) [ 0 ] , ( ( uint16 * ) array ) [ 1 ] )
FUNCTION_CALL	266:11	267:48	33	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( ( uint16 * ) array ) [ 0 ] , ( ( uint16 * ) array ) [ 1 ] )
CALLEE	266:11	266:11	34	TIFFSetField
LEAF_NODE	266:11	266:11	35	TIFFSetField
LEAF_NODE	266:23	266:23	34	(
ARGUMENT	266:24	266:24	34	tiff
FIELD	266:24	266:24	35	tiff
LEAF_NODE	266:24	266:24	36	tiff
LEAF_NODE	266:28	266:28	34	,
ARGUMENT	266:30	266:30	34	TIFFFieldTag ( fip )
FUNCTION_CALL	266:30	266:46	35	TIFFFieldTag ( fip )
CALLEE	266:30	266:30	36	TIFFFieldTag
LEAF_NODE	266:30	266:30	37	TIFFFieldTag
LEAF_NODE	266:42	266:42	36	(
ARGUMENT	266:43	266:43	36	fip
FIELD	266:43	266:43	37	fip
LEAF_NODE	266:43	266:43	38	fip
LEAF_NODE	266:46	266:46	36	)
LEAF_NODE	266:47	266:47	34	,
ARGUMENT	267:6	267:25	34	( ( uint16 * ) array ) [ 0 ]
LEAF_NODE	267:6	267:6	35	(
LEAF_NODE	267:7	267:7	35	(
TYPE_NAME	267:8	267:8	35	uint16
LEAF_NODE	267:8	267:8	36	uint16
LEAF_NODE	267:15	267:15	35	*
LEAF_NODE	267:16	267:16	35	)
FIELD	267:17	267:17	35	array
LEAF_NODE	267:17	267:17	36	array
LEAF_NODE	267:22	267:22	35	)
LEAF_NODE	267:23	267:23	35	[
EXPR	267:24	267:24	35	0
FIELD	267:24	267:24	36	0
LEAF_NODE	267:24	267:24	37	0
LEAF_NODE	267:25	267:25	35	]
LEAF_NODE	267:26	267:26	34	,
ARGUMENT	267:28	267:47	34	( ( uint16 * ) array ) [ 1 ]
LEAF_NODE	267:28	267:28	35	(
LEAF_NODE	267:29	267:29	35	(
TYPE_NAME	267:30	267:30	35	uint16
LEAF_NODE	267:30	267:30	36	uint16
LEAF_NODE	267:37	267:37	35	*
LEAF_NODE	267:38	267:38	35	)
FIELD	267:39	267:39	35	array
LEAF_NODE	267:39	267:39	36	array
LEAF_NODE	267:44	267:44	35	)
LEAF_NODE	267:45	267:45	35	[
EXPR	267:46	267:46	35	1
FIELD	267:46	267:46	36	1
LEAF_NODE	267:46	267:46	37	1
LEAF_NODE	267:47	267:47	35	]
LEAF_NODE	267:48	267:48	34	)
LEAF_NODE	267:49	267:49	30	;
LEAF_NODE	268:4	268:4	28	}
LEAF_NODE	269:3	269:3	23	}
SELECTION	269:5	269:10	19	
KEYWORD	269:5	269:5	20	else
LEAF_NODE	269:5	269:5	21	else
STATEMENTS	269:10	272:24	20	
LEAF_NODE	269:10	269:10	21	{
STATEMENTS	270:32	270:32	21	
EXPR_STATEMENT	270:32	271:57	22	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , array ) ;
EXPR	270:32	270:32	23	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , array )
ASSIGN	270:32	270:38	24	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , array )
LVAL	270:32	270:32	25	ret
FIELD	270:32	270:32	26	ret
LEAF_NODE	270:32	270:32	27	ret
ASSIGN_OP	270:36	270:36	25	=
LEAF_NODE	270:36	270:36	26	=
RVAL	270:38	270:38	25	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , array )
FUNCTION_CALL	270:38	271:56	26	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , array )
CALLEE	270:38	270:38	27	TIFFSetField
LEAF_NODE	270:38	270:38	28	TIFFSetField
LEAF_NODE	270:50	270:50	27	(
ARGUMENT	270:51	270:51	27	tiff
FIELD	270:51	270:51	28	tiff
LEAF_NODE	270:51	270:51	29	tiff
LEAF_NODE	270:55	270:55	27	,
ARGUMENT	270:57	270:57	27	TIFFFieldTag ( fip )
FUNCTION_CALL	270:57	270:73	28	TIFFFieldTag ( fip )
CALLEE	270:57	270:57	29	TIFFFieldTag
LEAF_NODE	270:57	270:57	30	TIFFFieldTag
LEAF_NODE	270:69	270:69	29	(
ARGUMENT	270:70	270:70	29	fip
FIELD	270:70	270:70	30	fip
LEAF_NODE	270:70	270:70	31	fip
LEAF_NODE	270:73	270:73	29	)
LEAF_NODE	270:74	270:74	27	,
ARGUMENT	271:51	271:51	27	array
FIELD	271:51	271:51	28	array
LEAF_NODE	271:51	271:51	29	array
LEAF_NODE	271:56	271:56	27	)
LEAF_NODE	271:57	271:57	23	;
LEAF_NODE	272:24	272:24	21	}
EXPR_STATEMENT	274:24	274:40	19	_TIFFfree ( array ) ;
EXPR	274:24	274:24	20	_TIFFfree ( array )
FUNCTION_CALL	274:24	274:39	21	_TIFFfree ( array )
CALLEE	274:24	274:24	22	_TIFFfree
LEAF_NODE	274:24	274:24	23	_TIFFfree
LEAF_NODE	274:33	274:33	22	(
ARGUMENT	274:34	274:34	22	array
FIELD	274:34	274:34	23	array
LEAF_NODE	274:34	274:34	24	array
LEAF_NODE	274:39	274:39	22	)
LEAF_NODE	274:40	274:40	20	;
LEAF_NODE	275:16	275:16	18	}
SELECTION	275:18	275:23	16	
KEYWORD	275:18	275:18	17	else
LEAF_NODE	275:18	275:18	18	else
STATEMENTS	275:23	309:16	17	
LEAF_NODE	275:23	275:23	18	{
STATEMENTS	276:24	276:24	18	
SELECTION	276:24	276:56	19	
KEYWORD	276:24	276:24	20	switch
LEAF_NODE	276:24	276:24	21	switch
LEAF_NODE	276:31	276:31	20	(
CONDITION	276:32	276:32	20	TIFFFieldDataType ( fip )
EXPR	276:32	276:32	21	TIFFFieldDataType ( fip )
FUNCTION_CALL	276:32	276:53	22	TIFFFieldDataType ( fip )
CALLEE	276:32	276:32	23	TIFFFieldDataType
LEAF_NODE	276:32	276:32	24	TIFFFieldDataType
LEAF_NODE	276:49	276:49	23	(
ARGUMENT	276:50	276:50	23	fip
FIELD	276:50	276:50	24	fip
LEAF_NODE	276:50	276:50	25	fip
LEAF_NODE	276:53	276:53	23	)
LEAF_NODE	276:54	276:54	20	)
STATEMENTS	276:56	308:24	20	
LEAF_NODE	276:56	276:56	21	{
STATEMENTS	277:28	307:32	21	
LABEL	277:28	277:42	22	case TIFF_BYTE :
LEAF_NODE	277:28	277:28	23	case
LEAF_NODE	277:33	277:33	23	TIFF_BYTE
LEAF_NODE	277:42	277:42	23	:
LABEL	278:28	278:43	22	case TIFF_SHORT :
LEAF_NODE	278:28	278:28	23	case
LEAF_NODE	278:33	278:33	23	TIFF_SHORT
LEAF_NODE	278:43	278:43	23	:
LABEL	279:28	279:43	22	case TIFF_SBYTE :
LEAF_NODE	279:28	279:28	23	case
LEAF_NODE	279:33	279:33	23	TIFF_SBYTE
LEAF_NODE	279:43	279:43	23	:
LABEL	280:28	280:44	22	case TIFF_SSHORT :
LEAF_NODE	280:28	280:28	23	case
LEAF_NODE	280:33	280:33	23	TIFF_SSHORT
LEAF_NODE	280:44	280:44	23	:
EXPR_STATEMENT	281:32	282:75	22	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atoi ( argv [ arg_index ++ ] ) ) ;
EXPR	281:32	281:32	23	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atoi ( argv [ arg_index ++ ] ) )
ASSIGN	281:32	281:38	24	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atoi ( argv [ arg_index ++ ] ) )
LVAL	281:32	281:32	25	ret
FIELD	281:32	281:32	26	ret
LEAF_NODE	281:32	281:32	27	ret
ASSIGN_OP	281:36	281:36	25	=
LEAF_NODE	281:36	281:36	26	=
RVAL	281:38	281:38	25	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atoi ( argv [ arg_index ++ ] ) )
FUNCTION_CALL	281:38	282:74	26	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atoi ( argv [ arg_index ++ ] ) )
CALLEE	281:38	281:38	27	TIFFSetField
LEAF_NODE	281:38	281:38	28	TIFFSetField
LEAF_NODE	281:50	281:50	27	(
ARGUMENT	281:51	281:51	27	tiff
FIELD	281:51	281:51	28	tiff
LEAF_NODE	281:51	281:51	29	tiff
LEAF_NODE	281:55	281:55	27	,
ARGUMENT	281:57	281:57	27	TIFFFieldTag ( fip )
FUNCTION_CALL	281:57	281:73	28	TIFFFieldTag ( fip )
CALLEE	281:57	281:57	29	TIFFFieldTag
LEAF_NODE	281:57	281:57	30	TIFFFieldTag
LEAF_NODE	281:69	281:69	29	(
ARGUMENT	281:70	281:70	29	fip
FIELD	281:70	281:70	30	fip
LEAF_NODE	281:70	281:70	31	fip
LEAF_NODE	281:73	281:73	29	)
LEAF_NODE	281:74	281:74	27	,
ARGUMENT	282:51	282:51	27	atoi ( argv [ arg_index ++ ] )
FUNCTION_CALL	282:51	282:73	28	atoi ( argv [ arg_index ++ ] )
CALLEE	282:51	282:51	29	atoi
LEAF_NODE	282:51	282:51	30	atoi
LEAF_NODE	282:55	282:55	29	(
ARGUMENT	282:56	282:56	29	argv [ arg_index ++ ]
FIELD	282:56	282:72	30	argv [ arg_index ++ ]
LEAF_NODE	282:56	282:56	31	argv
LEAF_NODE	282:60	282:60	31	[
EXPR	282:61	282:61	31	arg_index ++
FIELD	282:61	282:70	32	arg_index ++
LEAF_NODE	282:61	282:61	33	arg_index
LEAF_NODE	282:70	282:70	33	++
LEAF_NODE	282:72	282:72	31	]
LEAF_NODE	282:73	282:73	29	)
LEAF_NODE	282:74	282:74	27	)
LEAF_NODE	282:75	282:75	23	;
JUMP_STATEMENT	283:32	283:37	22	break DESTINATION ;
KEYWORD	283:32	283:32	23	break
LEAF_NODE	283:32	283:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	283:37	283:37	23	;
LABEL	284:28	284:42	22	case TIFF_LONG :
LEAF_NODE	284:28	284:28	23	case
LEAF_NODE	284:33	284:33	23	TIFF_LONG
LEAF_NODE	284:42	284:42	23	:
LABEL	285:28	285:43	22	case TIFF_SLONG :
LEAF_NODE	285:28	285:28	23	case
LEAF_NODE	285:33	285:33	23	TIFF_SLONG
LEAF_NODE	285:43	285:43	23	:
LABEL	286:28	286:41	22	case TIFF_IFD :
LEAF_NODE	286:28	286:28	23	case
LEAF_NODE	286:33	286:33	23	TIFF_IFD
LEAF_NODE	286:41	286:41	23	:
EXPR_STATEMENT	287:32	288:75	22	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atol ( argv [ arg_index ++ ] ) ) ;
EXPR	287:32	287:32	23	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atol ( argv [ arg_index ++ ] ) )
ASSIGN	287:32	287:38	24	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atol ( argv [ arg_index ++ ] ) )
LVAL	287:32	287:32	25	ret
FIELD	287:32	287:32	26	ret
LEAF_NODE	287:32	287:32	27	ret
ASSIGN_OP	287:36	287:36	25	=
LEAF_NODE	287:36	287:36	26	=
RVAL	287:38	287:38	25	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atol ( argv [ arg_index ++ ] ) )
FUNCTION_CALL	287:38	288:74	26	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atol ( argv [ arg_index ++ ] ) )
CALLEE	287:38	287:38	27	TIFFSetField
LEAF_NODE	287:38	287:38	28	TIFFSetField
LEAF_NODE	287:50	287:50	27	(
ARGUMENT	287:51	287:51	27	tiff
FIELD	287:51	287:51	28	tiff
LEAF_NODE	287:51	287:51	29	tiff
LEAF_NODE	287:55	287:55	27	,
ARGUMENT	287:57	287:57	27	TIFFFieldTag ( fip )
FUNCTION_CALL	287:57	287:73	28	TIFFFieldTag ( fip )
CALLEE	287:57	287:57	29	TIFFFieldTag
LEAF_NODE	287:57	287:57	30	TIFFFieldTag
LEAF_NODE	287:69	287:69	29	(
ARGUMENT	287:70	287:70	29	fip
FIELD	287:70	287:70	30	fip
LEAF_NODE	287:70	287:70	31	fip
LEAF_NODE	287:73	287:73	29	)
LEAF_NODE	287:74	287:74	27	,
ARGUMENT	288:51	288:51	27	atol ( argv [ arg_index ++ ] )
FUNCTION_CALL	288:51	288:73	28	atol ( argv [ arg_index ++ ] )
CALLEE	288:51	288:51	29	atol
LEAF_NODE	288:51	288:51	30	atol
LEAF_NODE	288:55	288:55	29	(
ARGUMENT	288:56	288:56	29	argv [ arg_index ++ ]
FIELD	288:56	288:72	30	argv [ arg_index ++ ]
LEAF_NODE	288:56	288:56	31	argv
LEAF_NODE	288:60	288:60	31	[
EXPR	288:61	288:61	31	arg_index ++
FIELD	288:61	288:70	32	arg_index ++
LEAF_NODE	288:61	288:61	33	arg_index
LEAF_NODE	288:70	288:70	33	++
LEAF_NODE	288:72	288:72	31	]
LEAF_NODE	288:73	288:73	29	)
LEAF_NODE	288:74	288:74	27	)
LEAF_NODE	288:75	288:75	23	;
JUMP_STATEMENT	289:32	289:37	22	break DESTINATION ;
KEYWORD	289:32	289:32	23	break
LEAF_NODE	289:32	289:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	289:37	289:37	23	;
LABEL	290:28	290:43	22	case TIFF_LONG8 :
LEAF_NODE	290:28	290:28	23	case
LEAF_NODE	290:33	290:33	23	TIFF_LONG8
LEAF_NODE	290:43	290:43	23	:
LABEL	291:28	291:44	22	case TIFF_SLONG8 :
LEAF_NODE	291:28	291:28	23	case
LEAF_NODE	291:33	291:33	23	TIFF_SLONG8
LEAF_NODE	291:44	291:44	23	:
LABEL	292:28	292:42	22	case TIFF_IFD8 :
LEAF_NODE	292:28	292:28	23	case
LEAF_NODE	292:33	292:33	23	TIFF_IFD8
LEAF_NODE	292:42	292:42	23	:
EXPR_STATEMENT	293:32	294:97	22	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , strtoll ( argv [ arg_index ++ ] , ( char * * ) NULL , 10 ) ) ;
EXPR	293:32	293:32	23	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , strtoll ( argv [ arg_index ++ ] , ( char * * ) NULL , 10 ) )
ASSIGN	293:32	293:38	24	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , strtoll ( argv [ arg_index ++ ] , ( char * * ) NULL , 10 ) )
LVAL	293:32	293:32	25	ret
FIELD	293:32	293:32	26	ret
LEAF_NODE	293:32	293:32	27	ret
ASSIGN_OP	293:36	293:36	25	=
LEAF_NODE	293:36	293:36	26	=
RVAL	293:38	293:38	25	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , strtoll ( argv [ arg_index ++ ] , ( char * * ) NULL , 10 ) )
FUNCTION_CALL	293:38	294:96	26	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , strtoll ( argv [ arg_index ++ ] , ( char * * ) NULL , 10 ) )
CALLEE	293:38	293:38	27	TIFFSetField
LEAF_NODE	293:38	293:38	28	TIFFSetField
LEAF_NODE	293:50	293:50	27	(
ARGUMENT	293:51	293:51	27	tiff
FIELD	293:51	293:51	28	tiff
LEAF_NODE	293:51	293:51	29	tiff
LEAF_NODE	293:55	293:55	27	,
ARGUMENT	293:57	293:57	27	TIFFFieldTag ( fip )
FUNCTION_CALL	293:57	293:73	28	TIFFFieldTag ( fip )
CALLEE	293:57	293:57	29	TIFFFieldTag
LEAF_NODE	293:57	293:57	30	TIFFFieldTag
LEAF_NODE	293:69	293:69	29	(
ARGUMENT	293:70	293:70	29	fip
FIELD	293:70	293:70	30	fip
LEAF_NODE	293:70	293:70	31	fip
LEAF_NODE	293:73	293:73	29	)
LEAF_NODE	293:74	293:74	27	,
ARGUMENT	294:51	294:51	27	strtoll ( argv [ arg_index ++ ] , ( char * * ) NULL , 10 )
FUNCTION_CALL	294:51	294:95	28	strtoll ( argv [ arg_index ++ ] , ( char * * ) NULL , 10 )
CALLEE	294:51	294:51	29	strtoll
LEAF_NODE	294:51	294:51	30	strtoll
LEAF_NODE	294:58	294:58	29	(
ARGUMENT	294:59	294:59	29	argv [ arg_index ++ ]
FIELD	294:59	294:75	30	argv [ arg_index ++ ]
LEAF_NODE	294:59	294:59	31	argv
LEAF_NODE	294:63	294:63	31	[
EXPR	294:64	294:64	31	arg_index ++
FIELD	294:64	294:73	32	arg_index ++
LEAF_NODE	294:64	294:64	33	arg_index
LEAF_NODE	294:73	294:73	33	++
LEAF_NODE	294:75	294:75	31	]
LEAF_NODE	294:76	294:76	29	,
ARGUMENT	294:78	294:87	29	( char * * ) NULL
LEAF_NODE	294:78	294:78	30	(
TYPE_NAME	294:79	294:79	30	char
LEAF_NODE	294:79	294:79	31	char
LEAF_NODE	294:84	294:84	30	*
LEAF_NODE	294:85	294:85	30	*
LEAF_NODE	294:86	294:86	30	)
FIELD	294:87	294:87	30	NULL
LEAF_NODE	294:87	294:87	31	NULL
LEAF_NODE	294:91	294:91	29	,
ARGUMENT	294:93	294:93	29	10
FIELD	294:93	294:93	30	10
LEAF_NODE	294:93	294:93	31	10
LEAF_NODE	294:95	294:95	29	)
LEAF_NODE	294:96	294:96	27	)
LEAF_NODE	294:97	294:97	23	;
JUMP_STATEMENT	295:32	295:37	22	break DESTINATION ;
KEYWORD	295:32	295:32	23	break
LEAF_NODE	295:32	295:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	295:37	295:37	23	;
LABEL	296:28	296:44	22	case TIFF_DOUBLE :
LEAF_NODE	296:28	296:28	23	case
LEAF_NODE	296:33	296:33	23	TIFF_DOUBLE
LEAF_NODE	296:44	296:44	23	:
EXPR_STATEMENT	297:32	298:75	22	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atof ( argv [ arg_index ++ ] ) ) ;
EXPR	297:32	297:32	23	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atof ( argv [ arg_index ++ ] ) )
ASSIGN	297:32	297:38	24	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atof ( argv [ arg_index ++ ] ) )
LVAL	297:32	297:32	25	ret
FIELD	297:32	297:32	26	ret
LEAF_NODE	297:32	297:32	27	ret
ASSIGN_OP	297:36	297:36	25	=
LEAF_NODE	297:36	297:36	26	=
RVAL	297:38	297:38	25	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atof ( argv [ arg_index ++ ] ) )
FUNCTION_CALL	297:38	298:74	26	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , atof ( argv [ arg_index ++ ] ) )
CALLEE	297:38	297:38	27	TIFFSetField
LEAF_NODE	297:38	297:38	28	TIFFSetField
LEAF_NODE	297:50	297:50	27	(
ARGUMENT	297:51	297:51	27	tiff
FIELD	297:51	297:51	28	tiff
LEAF_NODE	297:51	297:51	29	tiff
LEAF_NODE	297:55	297:55	27	,
ARGUMENT	297:57	297:57	27	TIFFFieldTag ( fip )
FUNCTION_CALL	297:57	297:73	28	TIFFFieldTag ( fip )
CALLEE	297:57	297:57	29	TIFFFieldTag
LEAF_NODE	297:57	297:57	30	TIFFFieldTag
LEAF_NODE	297:69	297:69	29	(
ARGUMENT	297:70	297:70	29	fip
FIELD	297:70	297:70	30	fip
LEAF_NODE	297:70	297:70	31	fip
LEAF_NODE	297:73	297:73	29	)
LEAF_NODE	297:74	297:74	27	,
ARGUMENT	298:51	298:51	27	atof ( argv [ arg_index ++ ] )
FUNCTION_CALL	298:51	298:73	28	atof ( argv [ arg_index ++ ] )
CALLEE	298:51	298:51	29	atof
LEAF_NODE	298:51	298:51	30	atof
LEAF_NODE	298:55	298:55	29	(
ARGUMENT	298:56	298:56	29	argv [ arg_index ++ ]
FIELD	298:56	298:72	30	argv [ arg_index ++ ]
LEAF_NODE	298:56	298:56	31	argv
LEAF_NODE	298:60	298:60	31	[
EXPR	298:61	298:61	31	arg_index ++
FIELD	298:61	298:70	32	arg_index ++
LEAF_NODE	298:61	298:61	33	arg_index
LEAF_NODE	298:70	298:70	33	++
LEAF_NODE	298:72	298:72	31	]
LEAF_NODE	298:73	298:73	29	)
LEAF_NODE	298:74	298:74	27	)
LEAF_NODE	298:75	298:75	23	;
JUMP_STATEMENT	299:32	299:37	22	break DESTINATION ;
KEYWORD	299:32	299:32	23	break
LEAF_NODE	299:32	299:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	299:37	299:37	23	;
LABEL	300:28	300:46	22	case TIFF_RATIONAL :
LEAF_NODE	300:28	300:28	23	case
LEAF_NODE	300:33	300:33	23	TIFF_RATIONAL
LEAF_NODE	300:46	300:46	23	:
LABEL	301:28	301:47	22	case TIFF_SRATIONAL :
LEAF_NODE	301:28	301:28	23	case
LEAF_NODE	301:33	301:33	23	TIFF_SRATIONAL
LEAF_NODE	301:47	301:47	23	:
LABEL	302:28	302:43	22	case TIFF_FLOAT :
LEAF_NODE	302:28	302:28	23	case
LEAF_NODE	302:33	302:33	23	TIFF_FLOAT
LEAF_NODE	302:43	302:43	23	:
EXPR_STATEMENT	303:32	304:82	22	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( float ) atof ( argv [ arg_index ++ ] ) ) ;
EXPR	303:32	303:32	23	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( float ) atof ( argv [ arg_index ++ ] ) )
ASSIGN	303:32	303:38	24	ret = TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( float ) atof ( argv [ arg_index ++ ] ) )
LVAL	303:32	303:32	25	ret
FIELD	303:32	303:32	26	ret
LEAF_NODE	303:32	303:32	27	ret
ASSIGN_OP	303:36	303:36	25	=
LEAF_NODE	303:36	303:36	26	=
RVAL	303:38	303:38	25	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( float ) atof ( argv [ arg_index ++ ] ) )
FUNCTION_CALL	303:38	304:81	26	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , ( float ) atof ( argv [ arg_index ++ ] ) )
CALLEE	303:38	303:38	27	TIFFSetField
LEAF_NODE	303:38	303:38	28	TIFFSetField
LEAF_NODE	303:50	303:50	27	(
ARGUMENT	303:51	303:51	27	tiff
FIELD	303:51	303:51	28	tiff
LEAF_NODE	303:51	303:51	29	tiff
LEAF_NODE	303:55	303:55	27	,
ARGUMENT	303:57	303:57	27	TIFFFieldTag ( fip )
FUNCTION_CALL	303:57	303:73	28	TIFFFieldTag ( fip )
CALLEE	303:57	303:57	29	TIFFFieldTag
LEAF_NODE	303:57	303:57	30	TIFFFieldTag
LEAF_NODE	303:69	303:69	29	(
ARGUMENT	303:70	303:70	29	fip
FIELD	303:70	303:70	30	fip
LEAF_NODE	303:70	303:70	31	fip
LEAF_NODE	303:73	303:73	29	)
LEAF_NODE	303:74	303:74	27	,
ARGUMENT	304:51	304:58	27	( float ) atof ( argv [ arg_index ++ ] )
LEAF_NODE	304:51	304:51	28	(
TYPE_NAME	304:52	304:52	28	float
LEAF_NODE	304:52	304:52	29	float
LEAF_NODE	304:57	304:57	28	)
FUNCTION_CALL	304:58	304:80	28	atof ( argv [ arg_index ++ ] )
CALLEE	304:58	304:58	29	atof
LEAF_NODE	304:58	304:58	30	atof
LEAF_NODE	304:62	304:62	29	(
ARGUMENT	304:63	304:63	29	argv [ arg_index ++ ]
FIELD	304:63	304:79	30	argv [ arg_index ++ ]
LEAF_NODE	304:63	304:63	31	argv
LEAF_NODE	304:67	304:67	31	[
EXPR	304:68	304:68	31	arg_index ++
FIELD	304:68	304:77	32	arg_index ++
LEAF_NODE	304:68	304:68	33	arg_index
LEAF_NODE	304:77	304:77	33	++
LEAF_NODE	304:79	304:79	31	]
LEAF_NODE	304:80	304:80	29	)
LEAF_NODE	304:81	304:81	27	)
LEAF_NODE	304:82	304:82	23	;
JUMP_STATEMENT	305:32	305:37	22	break DESTINATION ;
KEYWORD	305:32	305:32	23	break
LEAF_NODE	305:32	305:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	305:37	305:37	23	;
LABEL	306:28	306:35	22	default :
LEAF_NODE	306:28	306:28	23	default
LEAF_NODE	306:35	306:35	23	:
JUMP_STATEMENT	307:32	307:37	22	break DESTINATION ;
KEYWORD	307:32	307:32	23	break
LEAF_NODE	307:32	307:32	24	break
LEAF_NODE	0:0	0:0	23	DESTINATION
LEAF_NODE	307:37	307:37	23	;
LEAF_NODE	308:24	308:24	21	}
LEAF_NODE	309:16	309:16	18	}
SELECTION	311:16	312:20	16	
KEYWORD	311:16	311:16	17	if
LEAF_NODE	311:16	311:16	18	if
LEAF_NODE	311:19	311:19	17	(
CONDITION	311:20	311:20	17	ret != 1
EXPR	311:20	311:27	18	ret != 1
FIELD	311:20	311:20	19	ret
LEAF_NODE	311:20	311:20	20	ret
EQ_OPERATOR	311:24	311:24	19	!=
LEAF_NODE	311:24	311:24	20	!=
FIELD	311:27	311:27	19	1
LEAF_NODE	311:27	311:27	20	1
LEAF_NODE	311:28	311:28	17	)
STATEMENTS	312:20	312:20	17	
EXPR_STATEMENT	312:20	312:77	18	fprintf ( stderr , "Failed to set %s\n" , TIFFFieldName ( fip ) ) ;
EXPR	312:20	312:20	19	fprintf ( stderr , "Failed to set %s\n" , TIFFFieldName ( fip ) )
FUNCTION_CALL	312:20	312:76	20	fprintf ( stderr , "Failed to set %s\n" , TIFFFieldName ( fip ) )
CALLEE	312:20	312:20	21	fprintf
LEAF_NODE	312:20	312:20	22	fprintf
LEAF_NODE	312:27	312:27	21	(
ARGUMENT	312:28	312:28	21	stderr
FIELD	312:28	312:28	22	stderr
LEAF_NODE	312:28	312:28	23	stderr
LEAF_NODE	312:34	312:34	21	,
ARGUMENT	312:36	312:36	21	"Failed to set %s\n"
FIELD	312:36	312:36	22	"Failed to set %s\n"
LEAF_NODE	312:36	312:36	23	"Failed to set %s\n"
LEAF_NODE	312:56	312:56	21	,
ARGUMENT	312:58	312:58	21	TIFFFieldName ( fip )
FUNCTION_CALL	312:58	312:75	22	TIFFFieldName ( fip )
CALLEE	312:58	312:58	23	TIFFFieldName
LEAF_NODE	312:58	312:58	24	TIFFFieldName
LEAF_NODE	312:71	312:71	23	(
ARGUMENT	312:72	312:72	23	fip
FIELD	312:72	312:72	24	fip
LEAF_NODE	312:72	312:72	25	fip
LEAF_NODE	312:75	312:75	23	)
LEAF_NODE	312:76	312:76	21	)
LEAF_NODE	312:77	312:77	19	;
EXPR_STATEMENT	313:16	313:31	16	arg_index += wc ;
EXPR	313:16	313:16	17	arg_index += wc
ASSIGN	313:16	313:29	18	arg_index += wc
LVAL	313:16	313:16	19	arg_index
FIELD	313:16	313:16	20	arg_index
LEAF_NODE	313:16	313:16	21	arg_index
ASSIGN_OP	313:26	313:26	19	+=
LEAF_NODE	313:26	313:26	20	+=
RVAL	313:29	313:29	19	wc
FIELD	313:29	313:29	20	wc
LEAF_NODE	313:29	313:29	21	wc
LEAF_NODE	313:31	313:31	17	;
LEAF_NODE	314:12	314:12	15	}
LEAF_NODE	315:8	315:8	10	}
SELECTION	315:10	315:15	6	
KEYWORD	315:10	315:10	7	else
LEAF_NODE	315:10	315:10	8	else
STATEMENTS	315:15	315:15	7	
SELECTION	315:15	315:77	8	
KEYWORD	315:15	315:15	9	if
LEAF_NODE	315:15	315:15	10	if
LEAF_NODE	315:18	315:18	9	(
CONDITION	315:19	315:19	9	strcmp ( argv [ arg_index ] , "-sf" ) == 0 && arg_index < argc - 3
EXPR	315:19	315:19	10	strcmp ( argv [ arg_index ] , "-sf" ) == 0 && arg_index < argc - 3
AND	315:19	315:57	11	strcmp ( argv [ arg_index ] , "-sf" ) == 0 && arg_index < argc - 3
EXPR	315:19	315:52	12	strcmp ( argv [ arg_index ] , "-sf" ) == 0
FUNCTION_CALL	315:19	315:47	13	strcmp ( argv [ arg_index ] , "-sf" )
CALLEE	315:19	315:19	14	strcmp
LEAF_NODE	315:19	315:19	15	strcmp
LEAF_NODE	315:25	315:25	14	(
ARGUMENT	315:26	315:26	14	argv [ arg_index ]
FIELD	315:26	315:40	15	argv [ arg_index ]
LEAF_NODE	315:26	315:26	16	argv
LEAF_NODE	315:30	315:30	16	[
EXPR	315:31	315:31	16	arg_index
FIELD	315:31	315:31	17	arg_index
LEAF_NODE	315:31	315:31	18	arg_index
LEAF_NODE	315:40	315:40	16	]
LEAF_NODE	315:41	315:41	14	,
ARGUMENT	315:42	315:42	14	"-sf"
FIELD	315:42	315:42	15	"-sf"
LEAF_NODE	315:42	315:42	16	"-sf"
LEAF_NODE	315:47	315:47	14	)
EQ_OPERATOR	315:49	315:49	13	==
LEAF_NODE	315:49	315:49	14	==
FIELD	315:52	315:52	13	0
LEAF_NODE	315:52	315:52	14	0
LEAF_NODE	315:54	315:54	12	&&
EXPR	315:57	315:74	12	arg_index < argc - 3
FIELD	315:57	315:57	13	arg_index
LEAF_NODE	315:57	315:57	14	arg_index
REL_OPERATOR	315:67	315:67	13	<
LEAF_NODE	315:67	315:67	14	<
FIELD	315:69	315:69	13	argc
LEAF_NODE	315:69	315:69	14	argc
LEAF_NODE	315:73	315:73	13	-
FIELD	315:74	315:74	13	3
LEAF_NODE	315:74	315:74	14	3
LEAF_NODE	315:75	315:75	9	)
STATEMENTS	315:77	354:8	9	
LEAF_NODE	315:77	315:77	10	{
STATEMENTS	316:12	353:12	10	
SIMPLE_DECL	316:12	316:23	11	FILE * fp ;
VAR_DECL	316:12	316:21	12	FILE * fp
TYPE	316:12	316:20	13	FILE *
TYPE_NAME	316:12	316:12	14	FILE
LEAF_NODE	316:12	316:12	15	FILE
POINTER	316:20	316:20	14	*
LEAF_NODE	316:20	316:20	15	*
NAME	316:21	316:21	13	fp
LEAF_NODE	316:21	316:21	14	fp
LEAF_NODE	316:23	316:23	12	;
SIMPLE_DECL	317:12	317:32	11	const TIFFField * fip ;
VAR_DECL	317:12	317:29	12	const TIFFField * fip
TYPE	317:12	317:28	13	const TIFFField *
TYPE_NAME	317:12	317:18	14	const TIFFField
LEAF_NODE	317:12	317:12	15	const
LEAF_NODE	317:18	317:18	15	TIFFField
POINTER	317:28	317:28	14	*
LEAF_NODE	317:28	317:28	15	*
NAME	317:29	317:29	13	fip
LEAF_NODE	317:29	317:29	14	fip
LEAF_NODE	317:32	317:32	12	;
SIMPLE_DECL	318:12	318:25	11	char * text ;
VAR_DECL	318:12	318:21	12	char * text
TYPE	318:12	318:20	13	char *
TYPE_NAME	318:12	318:12	14	char
LEAF_NODE	318:12	318:12	15	char
POINTER	318:20	318:20	14	*
LEAF_NODE	318:20	318:20	15	*
NAME	318:21	318:21	13	text
LEAF_NODE	318:21	318:21	14	text
LEAF_NODE	318:25	318:25	12	;
SIMPLE_DECL	319:12	319:23	11	size_t len ;
VAR_DECL	319:12	319:20	12	size_t len
TYPE	319:12	319:12	13	size_t
TYPE_NAME	319:12	319:12	14	size_t
LEAF_NODE	319:12	319:12	15	size_t
NAME	319:20	319:20	13	len
LEAF_NODE	319:20	319:20	14	len
LEAF_NODE	319:23	319:23	12	;
EXPR_STATEMENT	321:12	321:23	11	arg_index ++ ;
EXPR	321:12	321:12	12	arg_index ++
FIELD	321:12	321:21	13	arg_index ++
LEAF_NODE	321:12	321:12	14	arg_index
LEAF_NODE	321:21	321:21	14	++
LEAF_NODE	321:23	321:23	12	;
EXPR_STATEMENT	322:12	322:49	11	fip = GetField ( tiff , argv [ arg_index ] ) ;
EXPR	322:12	322:12	12	fip = GetField ( tiff , argv [ arg_index ] )
ASSIGN	322:12	322:18	13	fip = GetField ( tiff , argv [ arg_index ] )
LVAL	322:12	322:12	14	fip
FIELD	322:12	322:12	15	fip
LEAF_NODE	322:12	322:12	16	fip
ASSIGN_OP	322:16	322:16	14	=
LEAF_NODE	322:16	322:16	15	=
RVAL	322:18	322:18	14	GetField ( tiff , argv [ arg_index ] )
FUNCTION_CALL	322:18	322:48	15	GetField ( tiff , argv [ arg_index ] )
CALLEE	322:18	322:18	16	GetField
LEAF_NODE	322:18	322:18	17	GetField
LEAF_NODE	322:26	322:26	16	(
ARGUMENT	322:27	322:27	16	tiff
FIELD	322:27	322:27	17	tiff
LEAF_NODE	322:27	322:27	18	tiff
LEAF_NODE	322:31	322:31	16	,
ARGUMENT	322:33	322:33	16	argv [ arg_index ]
FIELD	322:33	322:47	17	argv [ arg_index ]
LEAF_NODE	322:33	322:33	18	argv
LEAF_NODE	322:37	322:37	18	[
EXPR	322:38	322:38	18	arg_index
FIELD	322:38	322:38	19	arg_index
LEAF_NODE	322:38	322:38	20	arg_index
LEAF_NODE	322:47	322:47	18	]
LEAF_NODE	322:48	322:48	16	)
LEAF_NODE	322:49	322:49	12	;
SELECTION	324:12	325:16	11	
KEYWORD	324:12	324:12	12	if
LEAF_NODE	324:12	324:12	13	if
LEAF_NODE	324:15	324:15	12	(
CONDITION	324:16	324:16	12	! fip
EXPR	324:16	324:16	13	! fip
UNARY_EXPR	324:16	324:17	14	! fip
UNARY_OPERATOR	324:16	324:16	15	!
LEAF_NODE	324:16	324:16	16	!
FIELD	324:17	324:17	15	fip
LEAF_NODE	324:17	324:17	16	fip
LEAF_NODE	324:20	324:20	12	)
STATEMENTS	325:16	325:16	12	
JUMP_STATEMENT	325:16	325:24	13	return 3 ;
KEYWORD	325:16	325:16	14	return
LEAF_NODE	325:16	325:16	15	return
DESTINATION	325:23	325:23	14	3
EXPR	325:23	325:23	15	3
FIELD	325:23	325:23	16	3
LEAF_NODE	325:23	325:23	17	3
LEAF_NODE	325:24	325:24	14	;
SELECTION	327:12	327:54	11	
KEYWORD	327:12	327:12	12	if
LEAF_NODE	327:12	327:12	13	if
LEAF_NODE	327:15	327:15	12	(
CONDITION	327:16	327:16	12	TIFFFieldDataType ( fip ) != TIFF_ASCII
EXPR	327:16	327:42	13	TIFFFieldDataType ( fip ) != TIFF_ASCII
FUNCTION_CALL	327:16	327:37	14	TIFFFieldDataType ( fip )
CALLEE	327:16	327:16	15	TIFFFieldDataType
LEAF_NODE	327:16	327:16	16	TIFFFieldDataType
LEAF_NODE	327:33	327:33	15	(
ARGUMENT	327:34	327:34	15	fip
FIELD	327:34	327:34	16	fip
LEAF_NODE	327:34	327:34	17	fip
LEAF_NODE	327:37	327:37	15	)
EQ_OPERATOR	327:39	327:39	14	!=
LEAF_NODE	327:39	327:39	15	!=
FIELD	327:42	327:42	14	TIFF_ASCII
LEAF_NODE	327:42	327:42	15	TIFF_ASCII
LEAF_NODE	327:52	327:52	12	)
STATEMENTS	327:54	332:12	12	
LEAF_NODE	327:54	327:54	13	{
STATEMENTS	328:16	331:16	13	
LEAF_NODE	328:16	328:16	14	fprintf
LEAF_NODE	328:23	328:23	14	(
LEAF_NODE	328:25	328:25	14	stderr
LEAF_NODE	328:31	328:31	14	,
LEAF_NODE	329:25	329:25	14	"Only ASCII tags can be set from file. "
LEAF_NODE	330:25	330:25	14	"%s is not ASCII tag.\n"
LEAF_NODE	330:49	330:49	14	,
LEAF_NODE	330:51	330:51	14	TIFFFieldName
LEAF_NODE	330:64	330:64	14	(
LEAF_NODE	330:65	330:65	14	fip
LEAF_NODE	330:68	330:68	14	)
LEAF_NODE	330:70	330:70	14	)
LEAF_NODE	330:71	330:71	14	;
JUMP_STATEMENT	331:16	331:24	14	return 5 ;
KEYWORD	331:16	331:16	15	return
LEAF_NODE	331:16	331:16	16	return
DESTINATION	331:23	331:23	15	5
EXPR	331:23	331:23	16	5
FIELD	331:23	331:23	17	5
LEAF_NODE	331:23	331:23	18	5
LEAF_NODE	331:24	331:24	15	;
LEAF_NODE	332:12	332:12	13	}
EXPR_STATEMENT	334:12	334:23	11	arg_index ++ ;
EXPR	334:12	334:12	12	arg_index ++
FIELD	334:12	334:21	13	arg_index ++
LEAF_NODE	334:12	334:12	14	arg_index
LEAF_NODE	334:21	334:21	14	++
LEAF_NODE	334:23	334:23	12	;
EXPR_STATEMENT	335:12	335:47	11	fp = fopen ( argv [ arg_index ] , "rt" ) ;
EXPR	335:12	335:12	12	fp = fopen ( argv [ arg_index ] , "rt" )
ASSIGN	335:12	335:17	13	fp = fopen ( argv [ arg_index ] , "rt" )
LVAL	335:12	335:12	14	fp
FIELD	335:12	335:12	15	fp
LEAF_NODE	335:12	335:12	16	fp
ASSIGN_OP	335:15	335:15	14	=
LEAF_NODE	335:15	335:15	15	=
RVAL	335:17	335:17	14	fopen ( argv [ arg_index ] , "rt" )
FUNCTION_CALL	335:17	335:46	15	fopen ( argv [ arg_index ] , "rt" )
CALLEE	335:17	335:17	16	fopen
LEAF_NODE	335:17	335:17	17	fopen
LEAF_NODE	335:22	335:22	16	(
ARGUMENT	335:24	335:24	16	argv [ arg_index ]
FIELD	335:24	335:38	17	argv [ arg_index ]
LEAF_NODE	335:24	335:24	18	argv
LEAF_NODE	335:28	335:28	18	[
EXPR	335:29	335:29	18	arg_index
FIELD	335:29	335:29	19	arg_index
LEAF_NODE	335:29	335:29	20	arg_index
LEAF_NODE	335:38	335:38	18	]
LEAF_NODE	335:39	335:39	16	,
ARGUMENT	335:41	335:41	16	"rt"
FIELD	335:41	335:41	17	"rt"
LEAF_NODE	335:41	335:41	18	"rt"
LEAF_NODE	335:46	335:46	16	)
LEAF_NODE	335:47	335:47	12	;
SELECTION	336:12	336:27	11	
KEYWORD	336:12	336:12	12	if
LEAF_NODE	336:12	336:12	13	if
LEAF_NODE	336:14	336:14	12	(
CONDITION	336:15	336:15	12	fp == NULL
EXPR	336:15	336:21	13	fp == NULL
FIELD	336:15	336:15	14	fp
LEAF_NODE	336:15	336:15	15	fp
EQ_OPERATOR	336:18	336:18	14	==
LEAF_NODE	336:18	336:18	15	==
FIELD	336:21	336:21	14	NULL
LEAF_NODE	336:21	336:21	15	NULL
LEAF_NODE	336:25	336:25	12	)
STATEMENTS	336:27	339:12	12	
LEAF_NODE	336:27	336:27	13	{
STATEMENTS	337:16	338:16	13	
EXPR_STATEMENT	337:16	337:41	14	perror ( argv [ arg_index ] ) ;
EXPR	337:16	337:16	15	perror ( argv [ arg_index ] )
FUNCTION_CALL	337:16	337:40	16	perror ( argv [ arg_index ] )
CALLEE	337:16	337:16	17	perror
LEAF_NODE	337:16	337:16	18	perror
LEAF_NODE	337:22	337:22	17	(
ARGUMENT	337:24	337:24	17	argv [ arg_index ]
FIELD	337:24	337:38	18	argv [ arg_index ]
LEAF_NODE	337:24	337:24	19	argv
LEAF_NODE	337:28	337:28	19	[
EXPR	337:29	337:29	19	arg_index
FIELD	337:29	337:29	20	arg_index
LEAF_NODE	337:29	337:29	21	arg_index
LEAF_NODE	337:38	337:38	19	]
LEAF_NODE	337:40	337:40	17	)
LEAF_NODE	337:41	337:41	15	;
JUMP_STATEMENT	338:16	338:24	14	continue DESTINATION ;
KEYWORD	338:16	338:16	15	continue
LEAF_NODE	338:16	338:16	16	continue
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	338:24	338:24	15	;
LEAF_NODE	339:12	339:12	13	}
EXPR_STATEMENT	341:12	341:43	11	text = ( char * ) malloc ( 1000000 ) ;
EXPR	341:12	341:12	12	text = ( char * ) malloc ( 1000000 )
ASSIGN	341:12	341:19	13	text = ( char * ) malloc ( 1000000 )
LVAL	341:12	341:12	14	text
FIELD	341:12	341:12	15	text
LEAF_NODE	341:12	341:12	16	text
ASSIGN_OP	341:17	341:17	14	=
LEAF_NODE	341:17	341:17	15	=
RVAL	341:19	341:28	14	( char * ) malloc ( 1000000 )
LEAF_NODE	341:19	341:19	15	(
TYPE_NAME	341:20	341:20	15	char
LEAF_NODE	341:20	341:20	16	char
LEAF_NODE	341:25	341:25	15	*
LEAF_NODE	341:26	341:26	15	)
FUNCTION_CALL	341:28	341:42	15	malloc ( 1000000 )
CALLEE	341:28	341:28	16	malloc
LEAF_NODE	341:28	341:28	17	malloc
LEAF_NODE	341:34	341:34	16	(
ARGUMENT	341:35	341:35	16	1000000
FIELD	341:35	341:35	17	1000000
LEAF_NODE	341:35	341:35	18	1000000
LEAF_NODE	341:42	341:42	16	)
LEAF_NODE	341:43	341:43	12	;
EXPR_STATEMENT	342:12	342:46	11	len = fread ( text , 1 , 999999 , fp ) ;
EXPR	342:12	342:12	12	len = fread ( text , 1 , 999999 , fp )
ASSIGN	342:12	342:18	13	len = fread ( text , 1 , 999999 , fp )
LVAL	342:12	342:12	14	len
FIELD	342:12	342:12	15	len
LEAF_NODE	342:12	342:12	16	len
ASSIGN_OP	342:16	342:16	14	=
LEAF_NODE	342:16	342:16	15	=
RVAL	342:18	342:18	14	fread ( text , 1 , 999999 , fp )
FUNCTION_CALL	342:18	342:45	15	fread ( text , 1 , 999999 , fp )
CALLEE	342:18	342:18	16	fread
LEAF_NODE	342:18	342:18	17	fread
LEAF_NODE	342:23	342:23	16	(
ARGUMENT	342:25	342:25	16	text
FIELD	342:25	342:25	17	text
LEAF_NODE	342:25	342:25	18	text
LEAF_NODE	342:29	342:29	16	,
ARGUMENT	342:31	342:31	16	1
FIELD	342:31	342:31	17	1
LEAF_NODE	342:31	342:31	18	1
LEAF_NODE	342:32	342:32	16	,
ARGUMENT	342:34	342:34	16	999999
FIELD	342:34	342:34	17	999999
LEAF_NODE	342:34	342:34	18	999999
LEAF_NODE	342:40	342:40	16	,
ARGUMENT	342:42	342:42	16	fp
FIELD	342:42	342:42	17	fp
LEAF_NODE	342:42	342:42	18	fp
LEAF_NODE	342:45	342:45	16	)
LEAF_NODE	342:46	342:46	12	;
EXPR_STATEMENT	343:12	343:28	11	text [ len ] = '\0' ;
EXPR	343:12	343:12	12	text [ len ] = '\0'
ASSIGN	343:12	343:24	13	text [ len ] = '\0'
LVAL	343:12	343:12	14	text [ len ]
FIELD	343:12	343:20	15	text [ len ]
LEAF_NODE	343:12	343:12	16	text
LEAF_NODE	343:16	343:16	16	[
EXPR	343:17	343:17	16	len
FIELD	343:17	343:17	17	len
LEAF_NODE	343:17	343:17	18	len
LEAF_NODE	343:20	343:20	16	]
ASSIGN_OP	343:22	343:22	14	=
LEAF_NODE	343:22	343:22	15	=
RVAL	343:24	343:24	14	'\0'
FIELD	343:24	343:24	15	'\0'
LEAF_NODE	343:24	343:24	16	'\0'
LEAF_NODE	343:28	343:28	12	;
EXPR_STATEMENT	345:12	345:24	11	fclose ( fp ) ;
EXPR	345:12	345:12	12	fclose ( fp )
FUNCTION_CALL	345:12	345:23	13	fclose ( fp )
CALLEE	345:12	345:12	14	fclose
LEAF_NODE	345:12	345:12	15	fclose
LEAF_NODE	345:18	345:18	14	(
ARGUMENT	345:20	345:20	14	fp
FIELD	345:20	345:20	15	fp
LEAF_NODE	345:20	345:20	16	fp
LEAF_NODE	345:23	345:23	14	)
LEAF_NODE	345:24	345:24	12	;
SELECTION	347:12	347:67	11	
KEYWORD	347:12	347:12	12	if
LEAF_NODE	347:12	347:12	13	if
LEAF_NODE	347:14	347:14	12	(
CONDITION	347:15	347:15	12	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , text ) != 1
EXPR	347:15	347:64	13	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , text ) != 1
FUNCTION_CALL	347:15	347:59	14	TIFFSetField ( tiff , TIFFFieldTag ( fip ) , text )
CALLEE	347:15	347:15	15	TIFFSetField
LEAF_NODE	347:15	347:15	16	TIFFSetField
LEAF_NODE	347:27	347:27	15	(
ARGUMENT	347:29	347:29	15	tiff
FIELD	347:29	347:29	16	tiff
LEAF_NODE	347:29	347:29	17	tiff
LEAF_NODE	347:33	347:33	15	,
ARGUMENT	347:35	347:35	15	TIFFFieldTag ( fip )
FUNCTION_CALL	347:35	347:51	16	TIFFFieldTag ( fip )
CALLEE	347:35	347:35	17	TIFFFieldTag
LEAF_NODE	347:35	347:35	18	TIFFFieldTag
LEAF_NODE	347:47	347:47	17	(
ARGUMENT	347:48	347:48	17	fip
FIELD	347:48	347:48	18	fip
LEAF_NODE	347:48	347:48	19	fip
LEAF_NODE	347:51	347:51	17	)
LEAF_NODE	347:52	347:52	15	,
ARGUMENT	347:54	347:54	15	text
FIELD	347:54	347:54	16	text
LEAF_NODE	347:54	347:54	17	text
LEAF_NODE	347:59	347:59	15	)
EQ_OPERATOR	347:61	347:61	14	!=
LEAF_NODE	347:61	347:61	15	!=
FIELD	347:64	347:64	14	1
LEAF_NODE	347:64	347:64	15	1
LEAF_NODE	347:65	347:65	12	)
STATEMENTS	347:67	350:12	12	
LEAF_NODE	347:67	347:67	13	{
STATEMENTS	348:16	348:16	13	
EXPR_STATEMENT	348:16	349:60	14	fprintf ( stderr , "Failed to set %s from file %s\n" , TIFFFieldName ( fip ) , argv [ arg_index ] ) ;
EXPR	348:16	348:16	15	fprintf ( stderr , "Failed to set %s from file %s\n" , TIFFFieldName ( fip ) , argv [ arg_index ] )
FUNCTION_CALL	348:16	349:59	16	fprintf ( stderr , "Failed to set %s from file %s\n" , TIFFFieldName ( fip ) , argv [ arg_index ] )
CALLEE	348:16	348:16	17	fprintf
LEAF_NODE	348:16	348:16	18	fprintf
LEAF_NODE	348:23	348:23	17	(
ARGUMENT	348:24	348:24	17	stderr
FIELD	348:24	348:24	18	stderr
LEAF_NODE	348:24	348:24	19	stderr
LEAF_NODE	348:30	348:30	17	,
ARGUMENT	348:32	348:32	17	"Failed to set %s from file %s\n"
FIELD	348:32	348:32	18	"Failed to set %s from file %s\n"
LEAF_NODE	348:32	348:32	19	"Failed to set %s from file %s\n"
LEAF_NODE	348:65	348:65	17	,
ARGUMENT	349:24	349:24	17	TIFFFieldName ( fip )
FUNCTION_CALL	349:24	349:41	18	TIFFFieldName ( fip )
CALLEE	349:24	349:24	19	TIFFFieldName
LEAF_NODE	349:24	349:24	20	TIFFFieldName
LEAF_NODE	349:37	349:37	19	(
ARGUMENT	349:38	349:38	19	fip
FIELD	349:38	349:38	20	fip
LEAF_NODE	349:38	349:38	21	fip
LEAF_NODE	349:41	349:41	19	)
LEAF_NODE	349:42	349:42	17	,
ARGUMENT	349:44	349:44	17	argv [ arg_index ]
FIELD	349:44	349:58	18	argv [ arg_index ]
LEAF_NODE	349:44	349:44	19	argv
LEAF_NODE	349:48	349:48	19	[
EXPR	349:49	349:49	19	arg_index
FIELD	349:49	349:49	20	arg_index
LEAF_NODE	349:49	349:49	21	arg_index
LEAF_NODE	349:58	349:58	19	]
LEAF_NODE	349:59	349:59	17	)
LEAF_NODE	349:60	349:60	15	;
LEAF_NODE	350:12	350:12	13	}
EXPR_STATEMENT	352:12	352:29	11	_TIFFfree ( text ) ;
EXPR	352:12	352:12	12	_TIFFfree ( text )
FUNCTION_CALL	352:12	352:28	13	_TIFFfree ( text )
CALLEE	352:12	352:12	14	_TIFFfree
LEAF_NODE	352:12	352:12	15	_TIFFfree
LEAF_NODE	352:21	352:21	14	(
ARGUMENT	352:23	352:23	14	text
FIELD	352:23	352:23	15	text
LEAF_NODE	352:23	352:23	16	text
LEAF_NODE	352:28	352:28	14	)
LEAF_NODE	352:29	352:29	12	;
EXPR_STATEMENT	353:12	353:23	11	arg_index ++ ;
EXPR	353:12	353:12	12	arg_index ++
FIELD	353:12	353:21	13	arg_index ++
LEAF_NODE	353:12	353:12	14	arg_index
LEAF_NODE	353:21	353:21	14	++
LEAF_NODE	353:23	353:23	12	;
LEAF_NODE	354:8	354:8	10	}
SELECTION	354:10	354:15	6	
KEYWORD	354:10	354:10	7	else
LEAF_NODE	354:10	354:10	8	else
STATEMENTS	354:15	358:8	7	
LEAF_NODE	354:15	354:15	8	{
STATEMENTS	355:12	357:12	8	
EXPR_STATEMENT	355:12	356:36	9	fprintf ( stderr , "Unrecognised option: %s\n" , argv [ arg_index ] ) ;
EXPR	355:12	355:12	10	fprintf ( stderr , "Unrecognised option: %s\n" , argv [ arg_index ] )
FUNCTION_CALL	355:12	356:35	11	fprintf ( stderr , "Unrecognised option: %s\n" , argv [ arg_index ] )
CALLEE	355:12	355:12	12	fprintf
LEAF_NODE	355:12	355:12	13	fprintf
LEAF_NODE	355:19	355:19	12	(
ARGUMENT	355:20	355:20	12	stderr
FIELD	355:20	355:20	13	stderr
LEAF_NODE	355:20	355:20	14	stderr
LEAF_NODE	355:26	355:26	12	,
ARGUMENT	355:28	355:28	12	"Unrecognised option: %s\n"
FIELD	355:28	355:28	13	"Unrecognised option: %s\n"
LEAF_NODE	355:28	355:28	14	"Unrecognised option: %s\n"
LEAF_NODE	355:55	355:55	12	,
ARGUMENT	356:20	356:20	12	argv [ arg_index ]
FIELD	356:20	356:34	13	argv [ arg_index ]
LEAF_NODE	356:20	356:20	14	argv
LEAF_NODE	356:24	356:24	14	[
EXPR	356:25	356:25	14	arg_index
FIELD	356:25	356:25	15	arg_index
LEAF_NODE	356:25	356:25	16	arg_index
LEAF_NODE	356:34	356:34	14	]
LEAF_NODE	356:35	356:35	12	)
LEAF_NODE	356:36	356:36	10	;
EXPR_STATEMENT	357:12	357:19	9	usage ( ) ;
EXPR	357:12	357:12	10	usage ( )
FUNCTION_CALL	357:12	357:18	11	usage ( )
CALLEE	357:12	357:12	12	usage
LEAF_NODE	357:12	357:12	13	usage
LEAF_NODE	357:17	357:17	12	(
LEAF_NODE	357:18	357:18	12	)
LEAF_NODE	357:19	357:19	10	;
LEAF_NODE	358:8	358:8	8	}
LEAF_NODE	359:4	359:4	5	}
EXPR_STATEMENT	361:4	361:30	3	TIFFRewriteDirectory ( tiff ) ;
EXPR	361:4	361:4	4	TIFFRewriteDirectory ( tiff )
FUNCTION_CALL	361:4	361:29	5	TIFFRewriteDirectory ( tiff )
CALLEE	361:4	361:4	6	TIFFRewriteDirectory
LEAF_NODE	361:4	361:4	7	TIFFRewriteDirectory
LEAF_NODE	361:24	361:24	6	(
ARGUMENT	361:25	361:25	6	tiff
FIELD	361:25	361:25	7	tiff
LEAF_NODE	361:25	361:25	8	tiff
LEAF_NODE	361:29	361:29	6	)
LEAF_NODE	361:30	361:30	4	;
EXPR_STATEMENT	362:4	362:19	3	TIFFClose ( tiff ) ;
EXPR	362:4	362:4	4	TIFFClose ( tiff )
FUNCTION_CALL	362:4	362:18	5	TIFFClose ( tiff )
CALLEE	362:4	362:4	6	TIFFClose
LEAF_NODE	362:4	362:4	7	TIFFClose
LEAF_NODE	362:13	362:13	6	(
ARGUMENT	362:14	362:14	6	tiff
FIELD	362:14	362:14	7	tiff
LEAF_NODE	362:14	362:14	8	tiff
LEAF_NODE	362:18	362:18	6	)
LEAF_NODE	362:19	362:19	4	;
JUMP_STATEMENT	363:4	363:12	3	return 0 ;
KEYWORD	363:4	363:4	4	return
LEAF_NODE	363:4	363:4	5	return
DESTINATION	363:11	363:11	4	0
EXPR	363:11	363:11	5	0
FIELD	363:11	363:11	6	0
LEAF_NODE	363:11	363:11	7	0
LEAF_NODE	363:12	363:12	4	;
LEAF_NODE	364:0	364:0	2	}
