SOURCE_FILE	33:0	283:0	0	
FUNCTION_DEF	33:0	40:0	1	
RETURN_TYPE	33:0	33:0	2	void
TYPE_NAME	33:0	33:0	3	void
LEAF_NODE	33:0	33:0	4	void
FUNCTION_NAME	34:0	34:0	2	TIFFSwabShort
LEAF_NODE	34:0	34:0	3	TIFFSwabShort
PARAMETER_LIST	34:13	34:24	2	( uint16 * wp )
LEAF_NODE	34:13	34:13	3	(
PARAMETER_DECL	34:14	34:22	3	uint16 * wp
TYPE	34:14	34:20	4	uint16 *
TYPE_NAME	34:14	34:14	5	uint16
LEAF_NODE	34:14	34:14	6	uint16
POINTER	34:20	34:20	5	*
LEAF_NODE	34:20	34:20	6	*
NAME	34:22	34:22	4	wp
LEAF_NODE	34:22	34:22	5	wp
LEAF_NODE	34:24	34:24	3	)
LEAF_NODE	35:0	35:0	2	{
STATEMENTS	36:1	39:27	2	
LEAF_NODE	36:1	36:1	3	register
SIMPLE_DECL	36:10	36:49	3	unsigned char * cp ; cp = ( unsigned char * ) wp ;
VAR_DECL	36:10	36:25	4	unsigned char * cp ; cp = ( unsigned char * ) wp
TYPE	36:10	36:23	5	unsigned char *
TYPE_NAME	36:10	36:19	6	unsigned char
LEAF_NODE	36:10	36:10	7	unsigned
LEAF_NODE	36:19	36:19	7	char
POINTER	36:23	36:23	6	*
LEAF_NODE	36:23	36:23	7	*
NAME	36:25	36:25	5	cp
LEAF_NODE	36:25	36:25	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	36:25	36:25	5	cp = ( unsigned char * ) wp
ASSIGN	36:25	36:30	6	cp = ( unsigned char * ) wp
LVAL	36:25	36:25	7	cp
NAME	36:25	36:25	8	cp
LEAF_NODE	36:25	36:25	9	cp
ASSIGN_OP	36:28	36:28	7	=
LEAF_NODE	36:28	36:28	8	=
RVAL	36:30	36:47	7	( unsigned char * ) wp
LEAF_NODE	36:30	36:30	8	(
TYPE_NAME	36:31	36:40	8	unsigned char
LEAF_NODE	36:31	36:31	9	unsigned
LEAF_NODE	36:40	36:40	9	char
LEAF_NODE	36:44	36:44	8	*
LEAF_NODE	36:45	36:45	8	)
FIELD	36:47	36:47	8	wp
LEAF_NODE	36:47	36:47	9	wp
LEAF_NODE	36:49	36:49	4	;
SIMPLE_DECL	37:1	37:16	3	unsigned char t ;
VAR_DECL	37:1	37:15	4	unsigned char t
TYPE	37:1	37:1	5	unsigned char
TYPE_NAME	37:1	37:10	6	unsigned char
LEAF_NODE	37:1	37:1	7	unsigned
LEAF_NODE	37:10	37:10	7	char
NAME	37:15	37:15	5	t
LEAF_NODE	37:15	37:15	6	t
LEAF_NODE	37:16	37:16	4	;
EXPR_STATEMENT	38:1	38:26	3	assert ( sizeof ( uint16 ) == 2 ) ;
EXPR	38:1	38:1	4	assert ( sizeof ( uint16 ) == 2 )
FUNCTION_CALL	38:1	38:25	5	assert ( sizeof ( uint16 ) == 2 )
CALLEE	38:1	38:1	6	assert
LEAF_NODE	38:1	38:1	7	assert
LEAF_NODE	38:7	38:7	6	(
ARGUMENT	38:8	38:24	6	sizeof ( uint16 ) == 2
FUNCTION_CALL	38:8	38:21	7	sizeof ( uint16 )
CALLEE	38:8	38:8	8	sizeof
LEAF_NODE	38:8	38:8	9	sizeof
LEAF_NODE	38:14	38:14	8	(
ARGUMENT	38:15	38:15	8	uint16
FIELD	38:15	38:15	9	uint16
LEAF_NODE	38:15	38:15	10	uint16
LEAF_NODE	38:21	38:21	8	)
EQ_OPERATOR	38:22	38:22	7	==
LEAF_NODE	38:22	38:22	8	==
FIELD	38:24	38:24	7	2
LEAF_NODE	38:24	38:24	8	2
LEAF_NODE	38:25	38:25	6	)
LEAF_NODE	38:26	38:26	4	;
EXPR_STATEMENT	39:1	39:10	3	t = cp [ 1 ] ;
EXPR	39:1	39:1	4	t = cp [ 1 ]
ASSIGN	39:1	39:5	5	t = cp [ 1 ]
LVAL	39:1	39:1	6	t
FIELD	39:1	39:1	7	t
LEAF_NODE	39:1	39:1	8	t
ASSIGN_OP	39:3	39:3	6	=
LEAF_NODE	39:3	39:3	7	=
RVAL	39:5	39:5	6	cp [ 1 ]
FIELD	39:5	39:9	7	cp [ 1 ]
LEAF_NODE	39:5	39:5	8	cp
LEAF_NODE	39:7	39:7	8	[
EXPR	39:8	39:8	8	1
FIELD	39:8	39:8	9	1
LEAF_NODE	39:8	39:8	10	1
LEAF_NODE	39:9	39:9	8	]
LEAF_NODE	39:10	39:10	4	;
EXPR_STATEMENT	39:12	39:25	3	cp [ 1 ] = cp [ 0 ] ;
EXPR	39:12	39:12	4	cp [ 1 ] = cp [ 0 ]
ASSIGN	39:12	39:20	5	cp [ 1 ] = cp [ 0 ]
LVAL	39:12	39:12	6	cp [ 1 ]
FIELD	39:12	39:16	7	cp [ 1 ]
LEAF_NODE	39:12	39:12	8	cp
LEAF_NODE	39:14	39:14	8	[
EXPR	39:15	39:15	8	1
FIELD	39:15	39:15	9	1
LEAF_NODE	39:15	39:15	10	1
LEAF_NODE	39:16	39:16	8	]
ASSIGN_OP	39:18	39:18	6	=
LEAF_NODE	39:18	39:18	7	=
RVAL	39:20	39:20	6	cp [ 0 ]
FIELD	39:20	39:24	7	cp [ 0 ]
LEAF_NODE	39:20	39:20	8	cp
LEAF_NODE	39:22	39:22	8	[
EXPR	39:23	39:23	8	0
FIELD	39:23	39:23	9	0
LEAF_NODE	39:23	39:23	10	0
LEAF_NODE	39:24	39:24	8	]
LEAF_NODE	39:25	39:25	4	;
EXPR_STATEMENT	39:27	39:36	3	cp [ 0 ] = t ;
EXPR	39:27	39:27	4	cp [ 0 ] = t
ASSIGN	39:27	39:35	5	cp [ 0 ] = t
LVAL	39:27	39:27	6	cp [ 0 ]
FIELD	39:27	39:31	7	cp [ 0 ]
LEAF_NODE	39:27	39:27	8	cp
LEAF_NODE	39:29	39:29	8	[
EXPR	39:30	39:30	8	0
FIELD	39:30	39:30	9	0
LEAF_NODE	39:30	39:30	10	0
LEAF_NODE	39:31	39:31	8	]
ASSIGN_OP	39:33	39:33	6	=
LEAF_NODE	39:33	39:33	7	=
RVAL	39:35	39:35	6	t
FIELD	39:35	39:35	7	t
LEAF_NODE	39:35	39:35	8	t
LEAF_NODE	39:36	39:36	4	;
LEAF_NODE	40:0	40:0	2	}
FUNCTION_DEF	44:0	52:0	1	
RETURN_TYPE	44:0	44:0	2	void
TYPE_NAME	44:0	44:0	3	void
LEAF_NODE	44:0	44:0	4	void
FUNCTION_NAME	45:0	45:0	2	TIFFSwabLong
LEAF_NODE	45:0	45:0	3	TIFFSwabLong
PARAMETER_LIST	45:12	45:23	2	( uint32 * lp )
LEAF_NODE	45:12	45:12	3	(
PARAMETER_DECL	45:13	45:21	3	uint32 * lp
TYPE	45:13	45:19	4	uint32 *
TYPE_NAME	45:13	45:13	5	uint32
LEAF_NODE	45:13	45:13	6	uint32
POINTER	45:19	45:19	5	*
LEAF_NODE	45:19	45:19	6	*
NAME	45:21	45:21	4	lp
LEAF_NODE	45:21	45:21	5	lp
LEAF_NODE	45:23	45:23	3	)
LEAF_NODE	46:0	46:0	2	{
STATEMENTS	47:1	51:27	2	
LEAF_NODE	47:1	47:1	3	register
SIMPLE_DECL	47:10	47:49	3	unsigned char * cp ; cp = ( unsigned char * ) lp ;
VAR_DECL	47:10	47:25	4	unsigned char * cp ; cp = ( unsigned char * ) lp
TYPE	47:10	47:23	5	unsigned char *
TYPE_NAME	47:10	47:19	6	unsigned char
LEAF_NODE	47:10	47:10	7	unsigned
LEAF_NODE	47:19	47:19	7	char
POINTER	47:23	47:23	6	*
LEAF_NODE	47:23	47:23	7	*
NAME	47:25	47:25	5	cp
LEAF_NODE	47:25	47:25	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	47:25	47:25	5	cp = ( unsigned char * ) lp
ASSIGN	47:25	47:30	6	cp = ( unsigned char * ) lp
LVAL	47:25	47:25	7	cp
NAME	47:25	47:25	8	cp
LEAF_NODE	47:25	47:25	9	cp
ASSIGN_OP	47:28	47:28	7	=
LEAF_NODE	47:28	47:28	8	=
RVAL	47:30	47:47	7	( unsigned char * ) lp
LEAF_NODE	47:30	47:30	8	(
TYPE_NAME	47:31	47:40	8	unsigned char
LEAF_NODE	47:31	47:31	9	unsigned
LEAF_NODE	47:40	47:40	9	char
LEAF_NODE	47:44	47:44	8	*
LEAF_NODE	47:45	47:45	8	)
FIELD	47:47	47:47	8	lp
LEAF_NODE	47:47	47:47	9	lp
LEAF_NODE	47:49	47:49	4	;
SIMPLE_DECL	48:1	48:16	3	unsigned char t ;
VAR_DECL	48:1	48:15	4	unsigned char t
TYPE	48:1	48:1	5	unsigned char
TYPE_NAME	48:1	48:10	6	unsigned char
LEAF_NODE	48:1	48:1	7	unsigned
LEAF_NODE	48:10	48:10	7	char
NAME	48:15	48:15	5	t
LEAF_NODE	48:15	48:15	6	t
LEAF_NODE	48:16	48:16	4	;
EXPR_STATEMENT	49:1	49:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	49:1	49:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	49:1	49:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	49:1	49:1	6	assert
LEAF_NODE	49:1	49:1	7	assert
LEAF_NODE	49:7	49:7	6	(
ARGUMENT	49:8	49:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	49:8	49:21	7	sizeof ( uint32 )
CALLEE	49:8	49:8	8	sizeof
LEAF_NODE	49:8	49:8	9	sizeof
LEAF_NODE	49:14	49:14	8	(
ARGUMENT	49:15	49:15	8	uint32
FIELD	49:15	49:15	9	uint32
LEAF_NODE	49:15	49:15	10	uint32
LEAF_NODE	49:21	49:21	8	)
EQ_OPERATOR	49:22	49:22	7	==
LEAF_NODE	49:22	49:22	8	==
FIELD	49:24	49:24	7	4
LEAF_NODE	49:24	49:24	8	4
LEAF_NODE	49:25	49:25	6	)
LEAF_NODE	49:26	49:26	4	;
EXPR_STATEMENT	50:1	50:10	3	t = cp [ 3 ] ;
EXPR	50:1	50:1	4	t = cp [ 3 ]
ASSIGN	50:1	50:5	5	t = cp [ 3 ]
LVAL	50:1	50:1	6	t
FIELD	50:1	50:1	7	t
LEAF_NODE	50:1	50:1	8	t
ASSIGN_OP	50:3	50:3	6	=
LEAF_NODE	50:3	50:3	7	=
RVAL	50:5	50:5	6	cp [ 3 ]
FIELD	50:5	50:9	7	cp [ 3 ]
LEAF_NODE	50:5	50:5	8	cp
LEAF_NODE	50:7	50:7	8	[
EXPR	50:8	50:8	8	3
FIELD	50:8	50:8	9	3
LEAF_NODE	50:8	50:8	10	3
LEAF_NODE	50:9	50:9	8	]
LEAF_NODE	50:10	50:10	4	;
EXPR_STATEMENT	50:12	50:25	3	cp [ 3 ] = cp [ 0 ] ;
EXPR	50:12	50:12	4	cp [ 3 ] = cp [ 0 ]
ASSIGN	50:12	50:20	5	cp [ 3 ] = cp [ 0 ]
LVAL	50:12	50:12	6	cp [ 3 ]
FIELD	50:12	50:16	7	cp [ 3 ]
LEAF_NODE	50:12	50:12	8	cp
LEAF_NODE	50:14	50:14	8	[
EXPR	50:15	50:15	8	3
FIELD	50:15	50:15	9	3
LEAF_NODE	50:15	50:15	10	3
LEAF_NODE	50:16	50:16	8	]
ASSIGN_OP	50:18	50:18	6	=
LEAF_NODE	50:18	50:18	7	=
RVAL	50:20	50:20	6	cp [ 0 ]
FIELD	50:20	50:24	7	cp [ 0 ]
LEAF_NODE	50:20	50:20	8	cp
LEAF_NODE	50:22	50:22	8	[
EXPR	50:23	50:23	8	0
FIELD	50:23	50:23	9	0
LEAF_NODE	50:23	50:23	10	0
LEAF_NODE	50:24	50:24	8	]
LEAF_NODE	50:25	50:25	4	;
EXPR_STATEMENT	50:27	50:36	3	cp [ 0 ] = t ;
EXPR	50:27	50:27	4	cp [ 0 ] = t
ASSIGN	50:27	50:35	5	cp [ 0 ] = t
LVAL	50:27	50:27	6	cp [ 0 ]
FIELD	50:27	50:31	7	cp [ 0 ]
LEAF_NODE	50:27	50:27	8	cp
LEAF_NODE	50:29	50:29	8	[
EXPR	50:30	50:30	8	0
FIELD	50:30	50:30	9	0
LEAF_NODE	50:30	50:30	10	0
LEAF_NODE	50:31	50:31	8	]
ASSIGN_OP	50:33	50:33	6	=
LEAF_NODE	50:33	50:33	7	=
RVAL	50:35	50:35	6	t
FIELD	50:35	50:35	7	t
LEAF_NODE	50:35	50:35	8	t
LEAF_NODE	50:36	50:36	4	;
EXPR_STATEMENT	51:1	51:10	3	t = cp [ 2 ] ;
EXPR	51:1	51:1	4	t = cp [ 2 ]
ASSIGN	51:1	51:5	5	t = cp [ 2 ]
LVAL	51:1	51:1	6	t
FIELD	51:1	51:1	7	t
LEAF_NODE	51:1	51:1	8	t
ASSIGN_OP	51:3	51:3	6	=
LEAF_NODE	51:3	51:3	7	=
RVAL	51:5	51:5	6	cp [ 2 ]
FIELD	51:5	51:9	7	cp [ 2 ]
LEAF_NODE	51:5	51:5	8	cp
LEAF_NODE	51:7	51:7	8	[
EXPR	51:8	51:8	8	2
FIELD	51:8	51:8	9	2
LEAF_NODE	51:8	51:8	10	2
LEAF_NODE	51:9	51:9	8	]
LEAF_NODE	51:10	51:10	4	;
EXPR_STATEMENT	51:12	51:25	3	cp [ 2 ] = cp [ 1 ] ;
EXPR	51:12	51:12	4	cp [ 2 ] = cp [ 1 ]
ASSIGN	51:12	51:20	5	cp [ 2 ] = cp [ 1 ]
LVAL	51:12	51:12	6	cp [ 2 ]
FIELD	51:12	51:16	7	cp [ 2 ]
LEAF_NODE	51:12	51:12	8	cp
LEAF_NODE	51:14	51:14	8	[
EXPR	51:15	51:15	8	2
FIELD	51:15	51:15	9	2
LEAF_NODE	51:15	51:15	10	2
LEAF_NODE	51:16	51:16	8	]
ASSIGN_OP	51:18	51:18	6	=
LEAF_NODE	51:18	51:18	7	=
RVAL	51:20	51:20	6	cp [ 1 ]
FIELD	51:20	51:24	7	cp [ 1 ]
LEAF_NODE	51:20	51:20	8	cp
LEAF_NODE	51:22	51:22	8	[
EXPR	51:23	51:23	8	1
FIELD	51:23	51:23	9	1
LEAF_NODE	51:23	51:23	10	1
LEAF_NODE	51:24	51:24	8	]
LEAF_NODE	51:25	51:25	4	;
EXPR_STATEMENT	51:27	51:36	3	cp [ 1 ] = t ;
EXPR	51:27	51:27	4	cp [ 1 ] = t
ASSIGN	51:27	51:35	5	cp [ 1 ] = t
LVAL	51:27	51:27	6	cp [ 1 ]
FIELD	51:27	51:31	7	cp [ 1 ]
LEAF_NODE	51:27	51:27	8	cp
LEAF_NODE	51:29	51:29	8	[
EXPR	51:30	51:30	8	1
FIELD	51:30	51:30	9	1
LEAF_NODE	51:30	51:30	10	1
LEAF_NODE	51:31	51:31	8	]
ASSIGN_OP	51:33	51:33	6	=
LEAF_NODE	51:33	51:33	7	=
RVAL	51:35	51:35	6	t
FIELD	51:35	51:35	7	t
LEAF_NODE	51:35	51:35	8	t
LEAF_NODE	51:36	51:36	4	;
LEAF_NODE	52:0	52:0	2	}
FUNCTION_DEF	56:0	66:0	1	
RETURN_TYPE	56:0	56:0	2	void
TYPE_NAME	56:0	56:0	3	void
LEAF_NODE	56:0	56:0	4	void
FUNCTION_NAME	57:0	57:0	2	TIFFSwabLong8
LEAF_NODE	57:0	57:0	3	TIFFSwabLong8
PARAMETER_LIST	57:13	57:24	2	( uint64 * lp )
LEAF_NODE	57:13	57:13	3	(
PARAMETER_DECL	57:14	57:22	3	uint64 * lp
TYPE	57:14	57:20	4	uint64 *
TYPE_NAME	57:14	57:14	5	uint64
LEAF_NODE	57:14	57:14	6	uint64
POINTER	57:20	57:20	5	*
LEAF_NODE	57:20	57:20	6	*
NAME	57:22	57:22	4	lp
LEAF_NODE	57:22	57:22	5	lp
LEAF_NODE	57:24	57:24	3	)
LEAF_NODE	58:0	58:0	2	{
STATEMENTS	59:1	65:27	2	
LEAF_NODE	59:1	59:1	3	register
SIMPLE_DECL	59:10	59:49	3	unsigned char * cp ; cp = ( unsigned char * ) lp ;
VAR_DECL	59:10	59:25	4	unsigned char * cp ; cp = ( unsigned char * ) lp
TYPE	59:10	59:23	5	unsigned char *
TYPE_NAME	59:10	59:19	6	unsigned char
LEAF_NODE	59:10	59:10	7	unsigned
LEAF_NODE	59:19	59:19	7	char
POINTER	59:23	59:23	6	*
LEAF_NODE	59:23	59:23	7	*
NAME	59:25	59:25	5	cp
LEAF_NODE	59:25	59:25	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	59:25	59:25	5	cp = ( unsigned char * ) lp
ASSIGN	59:25	59:30	6	cp = ( unsigned char * ) lp
LVAL	59:25	59:25	7	cp
NAME	59:25	59:25	8	cp
LEAF_NODE	59:25	59:25	9	cp
ASSIGN_OP	59:28	59:28	7	=
LEAF_NODE	59:28	59:28	8	=
RVAL	59:30	59:47	7	( unsigned char * ) lp
LEAF_NODE	59:30	59:30	8	(
TYPE_NAME	59:31	59:40	8	unsigned char
LEAF_NODE	59:31	59:31	9	unsigned
LEAF_NODE	59:40	59:40	9	char
LEAF_NODE	59:44	59:44	8	*
LEAF_NODE	59:45	59:45	8	)
FIELD	59:47	59:47	8	lp
LEAF_NODE	59:47	59:47	9	lp
LEAF_NODE	59:49	59:49	4	;
SIMPLE_DECL	60:1	60:16	3	unsigned char t ;
VAR_DECL	60:1	60:15	4	unsigned char t
TYPE	60:1	60:1	5	unsigned char
TYPE_NAME	60:1	60:10	6	unsigned char
LEAF_NODE	60:1	60:1	7	unsigned
LEAF_NODE	60:10	60:10	7	char
NAME	60:15	60:15	5	t
LEAF_NODE	60:15	60:15	6	t
LEAF_NODE	60:16	60:16	4	;
EXPR_STATEMENT	61:1	61:26	3	assert ( sizeof ( uint64 ) == 8 ) ;
EXPR	61:1	61:1	4	assert ( sizeof ( uint64 ) == 8 )
FUNCTION_CALL	61:1	61:25	5	assert ( sizeof ( uint64 ) == 8 )
CALLEE	61:1	61:1	6	assert
LEAF_NODE	61:1	61:1	7	assert
LEAF_NODE	61:7	61:7	6	(
ARGUMENT	61:8	61:24	6	sizeof ( uint64 ) == 8
FUNCTION_CALL	61:8	61:21	7	sizeof ( uint64 )
CALLEE	61:8	61:8	8	sizeof
LEAF_NODE	61:8	61:8	9	sizeof
LEAF_NODE	61:14	61:14	8	(
ARGUMENT	61:15	61:15	8	uint64
FIELD	61:15	61:15	9	uint64
LEAF_NODE	61:15	61:15	10	uint64
LEAF_NODE	61:21	61:21	8	)
EQ_OPERATOR	61:22	61:22	7	==
LEAF_NODE	61:22	61:22	8	==
FIELD	61:24	61:24	7	8
LEAF_NODE	61:24	61:24	8	8
LEAF_NODE	61:25	61:25	6	)
LEAF_NODE	61:26	61:26	4	;
EXPR_STATEMENT	62:1	62:10	3	t = cp [ 7 ] ;
EXPR	62:1	62:1	4	t = cp [ 7 ]
ASSIGN	62:1	62:5	5	t = cp [ 7 ]
LVAL	62:1	62:1	6	t
FIELD	62:1	62:1	7	t
LEAF_NODE	62:1	62:1	8	t
ASSIGN_OP	62:3	62:3	6	=
LEAF_NODE	62:3	62:3	7	=
RVAL	62:5	62:5	6	cp [ 7 ]
FIELD	62:5	62:9	7	cp [ 7 ]
LEAF_NODE	62:5	62:5	8	cp
LEAF_NODE	62:7	62:7	8	[
EXPR	62:8	62:8	8	7
FIELD	62:8	62:8	9	7
LEAF_NODE	62:8	62:8	10	7
LEAF_NODE	62:9	62:9	8	]
LEAF_NODE	62:10	62:10	4	;
EXPR_STATEMENT	62:12	62:25	3	cp [ 7 ] = cp [ 0 ] ;
EXPR	62:12	62:12	4	cp [ 7 ] = cp [ 0 ]
ASSIGN	62:12	62:20	5	cp [ 7 ] = cp [ 0 ]
LVAL	62:12	62:12	6	cp [ 7 ]
FIELD	62:12	62:16	7	cp [ 7 ]
LEAF_NODE	62:12	62:12	8	cp
LEAF_NODE	62:14	62:14	8	[
EXPR	62:15	62:15	8	7
FIELD	62:15	62:15	9	7
LEAF_NODE	62:15	62:15	10	7
LEAF_NODE	62:16	62:16	8	]
ASSIGN_OP	62:18	62:18	6	=
LEAF_NODE	62:18	62:18	7	=
RVAL	62:20	62:20	6	cp [ 0 ]
FIELD	62:20	62:24	7	cp [ 0 ]
LEAF_NODE	62:20	62:20	8	cp
LEAF_NODE	62:22	62:22	8	[
EXPR	62:23	62:23	8	0
FIELD	62:23	62:23	9	0
LEAF_NODE	62:23	62:23	10	0
LEAF_NODE	62:24	62:24	8	]
LEAF_NODE	62:25	62:25	4	;
EXPR_STATEMENT	62:27	62:36	3	cp [ 0 ] = t ;
EXPR	62:27	62:27	4	cp [ 0 ] = t
ASSIGN	62:27	62:35	5	cp [ 0 ] = t
LVAL	62:27	62:27	6	cp [ 0 ]
FIELD	62:27	62:31	7	cp [ 0 ]
LEAF_NODE	62:27	62:27	8	cp
LEAF_NODE	62:29	62:29	8	[
EXPR	62:30	62:30	8	0
FIELD	62:30	62:30	9	0
LEAF_NODE	62:30	62:30	10	0
LEAF_NODE	62:31	62:31	8	]
ASSIGN_OP	62:33	62:33	6	=
LEAF_NODE	62:33	62:33	7	=
RVAL	62:35	62:35	6	t
FIELD	62:35	62:35	7	t
LEAF_NODE	62:35	62:35	8	t
LEAF_NODE	62:36	62:36	4	;
EXPR_STATEMENT	63:1	63:10	3	t = cp [ 6 ] ;
EXPR	63:1	63:1	4	t = cp [ 6 ]
ASSIGN	63:1	63:5	5	t = cp [ 6 ]
LVAL	63:1	63:1	6	t
FIELD	63:1	63:1	7	t
LEAF_NODE	63:1	63:1	8	t
ASSIGN_OP	63:3	63:3	6	=
LEAF_NODE	63:3	63:3	7	=
RVAL	63:5	63:5	6	cp [ 6 ]
FIELD	63:5	63:9	7	cp [ 6 ]
LEAF_NODE	63:5	63:5	8	cp
LEAF_NODE	63:7	63:7	8	[
EXPR	63:8	63:8	8	6
FIELD	63:8	63:8	9	6
LEAF_NODE	63:8	63:8	10	6
LEAF_NODE	63:9	63:9	8	]
LEAF_NODE	63:10	63:10	4	;
EXPR_STATEMENT	63:12	63:25	3	cp [ 6 ] = cp [ 1 ] ;
EXPR	63:12	63:12	4	cp [ 6 ] = cp [ 1 ]
ASSIGN	63:12	63:20	5	cp [ 6 ] = cp [ 1 ]
LVAL	63:12	63:12	6	cp [ 6 ]
FIELD	63:12	63:16	7	cp [ 6 ]
LEAF_NODE	63:12	63:12	8	cp
LEAF_NODE	63:14	63:14	8	[
EXPR	63:15	63:15	8	6
FIELD	63:15	63:15	9	6
LEAF_NODE	63:15	63:15	10	6
LEAF_NODE	63:16	63:16	8	]
ASSIGN_OP	63:18	63:18	6	=
LEAF_NODE	63:18	63:18	7	=
RVAL	63:20	63:20	6	cp [ 1 ]
FIELD	63:20	63:24	7	cp [ 1 ]
LEAF_NODE	63:20	63:20	8	cp
LEAF_NODE	63:22	63:22	8	[
EXPR	63:23	63:23	8	1
FIELD	63:23	63:23	9	1
LEAF_NODE	63:23	63:23	10	1
LEAF_NODE	63:24	63:24	8	]
LEAF_NODE	63:25	63:25	4	;
EXPR_STATEMENT	63:27	63:36	3	cp [ 1 ] = t ;
EXPR	63:27	63:27	4	cp [ 1 ] = t
ASSIGN	63:27	63:35	5	cp [ 1 ] = t
LVAL	63:27	63:27	6	cp [ 1 ]
FIELD	63:27	63:31	7	cp [ 1 ]
LEAF_NODE	63:27	63:27	8	cp
LEAF_NODE	63:29	63:29	8	[
EXPR	63:30	63:30	8	1
FIELD	63:30	63:30	9	1
LEAF_NODE	63:30	63:30	10	1
LEAF_NODE	63:31	63:31	8	]
ASSIGN_OP	63:33	63:33	6	=
LEAF_NODE	63:33	63:33	7	=
RVAL	63:35	63:35	6	t
FIELD	63:35	63:35	7	t
LEAF_NODE	63:35	63:35	8	t
LEAF_NODE	63:36	63:36	4	;
EXPR_STATEMENT	64:1	64:10	3	t = cp [ 5 ] ;
EXPR	64:1	64:1	4	t = cp [ 5 ]
ASSIGN	64:1	64:5	5	t = cp [ 5 ]
LVAL	64:1	64:1	6	t
FIELD	64:1	64:1	7	t
LEAF_NODE	64:1	64:1	8	t
ASSIGN_OP	64:3	64:3	6	=
LEAF_NODE	64:3	64:3	7	=
RVAL	64:5	64:5	6	cp [ 5 ]
FIELD	64:5	64:9	7	cp [ 5 ]
LEAF_NODE	64:5	64:5	8	cp
LEAF_NODE	64:7	64:7	8	[
EXPR	64:8	64:8	8	5
FIELD	64:8	64:8	9	5
LEAF_NODE	64:8	64:8	10	5
LEAF_NODE	64:9	64:9	8	]
LEAF_NODE	64:10	64:10	4	;
EXPR_STATEMENT	64:12	64:25	3	cp [ 5 ] = cp [ 2 ] ;
EXPR	64:12	64:12	4	cp [ 5 ] = cp [ 2 ]
ASSIGN	64:12	64:20	5	cp [ 5 ] = cp [ 2 ]
LVAL	64:12	64:12	6	cp [ 5 ]
FIELD	64:12	64:16	7	cp [ 5 ]
LEAF_NODE	64:12	64:12	8	cp
LEAF_NODE	64:14	64:14	8	[
EXPR	64:15	64:15	8	5
FIELD	64:15	64:15	9	5
LEAF_NODE	64:15	64:15	10	5
LEAF_NODE	64:16	64:16	8	]
ASSIGN_OP	64:18	64:18	6	=
LEAF_NODE	64:18	64:18	7	=
RVAL	64:20	64:20	6	cp [ 2 ]
FIELD	64:20	64:24	7	cp [ 2 ]
LEAF_NODE	64:20	64:20	8	cp
LEAF_NODE	64:22	64:22	8	[
EXPR	64:23	64:23	8	2
FIELD	64:23	64:23	9	2
LEAF_NODE	64:23	64:23	10	2
LEAF_NODE	64:24	64:24	8	]
LEAF_NODE	64:25	64:25	4	;
EXPR_STATEMENT	64:27	64:36	3	cp [ 2 ] = t ;
EXPR	64:27	64:27	4	cp [ 2 ] = t
ASSIGN	64:27	64:35	5	cp [ 2 ] = t
LVAL	64:27	64:27	6	cp [ 2 ]
FIELD	64:27	64:31	7	cp [ 2 ]
LEAF_NODE	64:27	64:27	8	cp
LEAF_NODE	64:29	64:29	8	[
EXPR	64:30	64:30	8	2
FIELD	64:30	64:30	9	2
LEAF_NODE	64:30	64:30	10	2
LEAF_NODE	64:31	64:31	8	]
ASSIGN_OP	64:33	64:33	6	=
LEAF_NODE	64:33	64:33	7	=
RVAL	64:35	64:35	6	t
FIELD	64:35	64:35	7	t
LEAF_NODE	64:35	64:35	8	t
LEAF_NODE	64:36	64:36	4	;
EXPR_STATEMENT	65:1	65:10	3	t = cp [ 4 ] ;
EXPR	65:1	65:1	4	t = cp [ 4 ]
ASSIGN	65:1	65:5	5	t = cp [ 4 ]
LVAL	65:1	65:1	6	t
FIELD	65:1	65:1	7	t
LEAF_NODE	65:1	65:1	8	t
ASSIGN_OP	65:3	65:3	6	=
LEAF_NODE	65:3	65:3	7	=
RVAL	65:5	65:5	6	cp [ 4 ]
FIELD	65:5	65:9	7	cp [ 4 ]
LEAF_NODE	65:5	65:5	8	cp
LEAF_NODE	65:7	65:7	8	[
EXPR	65:8	65:8	8	4
FIELD	65:8	65:8	9	4
LEAF_NODE	65:8	65:8	10	4
LEAF_NODE	65:9	65:9	8	]
LEAF_NODE	65:10	65:10	4	;
EXPR_STATEMENT	65:12	65:25	3	cp [ 4 ] = cp [ 3 ] ;
EXPR	65:12	65:12	4	cp [ 4 ] = cp [ 3 ]
ASSIGN	65:12	65:20	5	cp [ 4 ] = cp [ 3 ]
LVAL	65:12	65:12	6	cp [ 4 ]
FIELD	65:12	65:16	7	cp [ 4 ]
LEAF_NODE	65:12	65:12	8	cp
LEAF_NODE	65:14	65:14	8	[
EXPR	65:15	65:15	8	4
FIELD	65:15	65:15	9	4
LEAF_NODE	65:15	65:15	10	4
LEAF_NODE	65:16	65:16	8	]
ASSIGN_OP	65:18	65:18	6	=
LEAF_NODE	65:18	65:18	7	=
RVAL	65:20	65:20	6	cp [ 3 ]
FIELD	65:20	65:24	7	cp [ 3 ]
LEAF_NODE	65:20	65:20	8	cp
LEAF_NODE	65:22	65:22	8	[
EXPR	65:23	65:23	8	3
FIELD	65:23	65:23	9	3
LEAF_NODE	65:23	65:23	10	3
LEAF_NODE	65:24	65:24	8	]
LEAF_NODE	65:25	65:25	4	;
EXPR_STATEMENT	65:27	65:36	3	cp [ 3 ] = t ;
EXPR	65:27	65:27	4	cp [ 3 ] = t
ASSIGN	65:27	65:35	5	cp [ 3 ] = t
LVAL	65:27	65:27	6	cp [ 3 ]
FIELD	65:27	65:31	7	cp [ 3 ]
LEAF_NODE	65:27	65:27	8	cp
LEAF_NODE	65:29	65:29	8	[
EXPR	65:30	65:30	8	3
FIELD	65:30	65:30	9	3
LEAF_NODE	65:30	65:30	10	3
LEAF_NODE	65:31	65:31	8	]
ASSIGN_OP	65:33	65:33	6	=
LEAF_NODE	65:33	65:33	7	=
RVAL	65:35	65:35	6	t
FIELD	65:35	65:35	7	t
LEAF_NODE	65:35	65:35	8	t
LEAF_NODE	65:36	65:36	4	;
LEAF_NODE	66:0	66:0	2	}
FUNCTION_DEF	70:0	82:0	1	
RETURN_TYPE	70:0	70:0	2	void
TYPE_NAME	70:0	70:0	3	void
LEAF_NODE	70:0	70:0	4	void
FUNCTION_NAME	71:0	71:0	2	TIFFSwabArrayOfShort
LEAF_NODE	71:0	71:0	3	TIFFSwabArrayOfShort
PARAMETER_LIST	71:20	71:52	2	( register uint16 * wp , tmsize_t n )
LEAF_NODE	71:20	71:20	3	(
PARAMETER_DECL	71:21	71:38	3	register uint16 * wp
TYPE	71:21	71:36	4	register uint16 *
LEAF_NODE	71:21	71:21	5	register
TYPE_NAME	71:30	71:30	5	uint16
LEAF_NODE	71:30	71:30	6	uint16
POINTER	71:36	71:36	5	*
LEAF_NODE	71:36	71:36	6	*
NAME	71:38	71:38	4	wp
LEAF_NODE	71:38	71:38	5	wp
LEAF_NODE	71:40	71:40	3	,
PARAMETER_DECL	71:42	71:51	3	tmsize_t n
TYPE	71:42	71:42	4	tmsize_t
TYPE_NAME	71:42	71:42	5	tmsize_t
LEAF_NODE	71:42	71:42	6	tmsize_t
NAME	71:51	71:51	4	n
LEAF_NODE	71:51	71:51	5	n
LEAF_NODE	71:52	71:52	3	)
LEAF_NODE	72:0	72:0	2	{
STATEMENTS	73:1	77:1	2	
LEAF_NODE	73:1	73:1	3	register
SIMPLE_DECL	73:10	73:27	3	unsigned char * cp ;
VAR_DECL	73:10	73:25	4	unsigned char * cp
TYPE	73:10	73:23	5	unsigned char *
TYPE_NAME	73:10	73:19	6	unsigned char
LEAF_NODE	73:10	73:10	7	unsigned
LEAF_NODE	73:19	73:19	7	char
POINTER	73:23	73:23	6	*
LEAF_NODE	73:23	73:23	7	*
NAME	73:25	73:25	5	cp
LEAF_NODE	73:25	73:25	6	cp
LEAF_NODE	73:27	73:27	4	;
LEAF_NODE	74:1	74:1	3	register
SIMPLE_DECL	74:10	74:25	3	unsigned char t ;
VAR_DECL	74:10	74:24	4	unsigned char t
TYPE	74:10	74:10	5	unsigned char
TYPE_NAME	74:10	74:19	6	unsigned char
LEAF_NODE	74:10	74:10	7	unsigned
LEAF_NODE	74:19	74:19	7	char
NAME	74:24	74:24	5	t
LEAF_NODE	74:24	74:24	6	t
LEAF_NODE	74:25	74:25	4	;
EXPR_STATEMENT	75:1	75:26	3	assert ( sizeof ( uint16 ) == 2 ) ;
EXPR	75:1	75:1	4	assert ( sizeof ( uint16 ) == 2 )
FUNCTION_CALL	75:1	75:25	5	assert ( sizeof ( uint16 ) == 2 )
CALLEE	75:1	75:1	6	assert
LEAF_NODE	75:1	75:1	7	assert
LEAF_NODE	75:7	75:7	6	(
ARGUMENT	75:8	75:24	6	sizeof ( uint16 ) == 2
FUNCTION_CALL	75:8	75:21	7	sizeof ( uint16 )
CALLEE	75:8	75:8	8	sizeof
LEAF_NODE	75:8	75:8	9	sizeof
LEAF_NODE	75:14	75:14	8	(
ARGUMENT	75:15	75:15	8	uint16
FIELD	75:15	75:15	9	uint16
LEAF_NODE	75:15	75:15	10	uint16
LEAF_NODE	75:21	75:21	8	)
EQ_OPERATOR	75:22	75:22	7	==
LEAF_NODE	75:22	75:22	8	==
FIELD	75:24	75:24	7	2
LEAF_NODE	75:24	75:24	8	2
LEAF_NODE	75:25	75:25	6	)
LEAF_NODE	75:26	75:26	4	;
ITERATION	77:1	77:17	3	
KEYWORD	77:1	77:1	4	while
LEAF_NODE	77:1	77:1	5	while
LEAF_NODE	77:7	77:7	4	(
CONDITION	77:8	77:8	4	n -- > 0
EXPR	77:8	77:14	5	n -- > 0
FIELD	77:8	77:9	6	n --
LEAF_NODE	77:8	77:8	7	n
LEAF_NODE	77:9	77:9	7	--
REL_OPERATOR	77:12	77:12	6	>
LEAF_NODE	77:12	77:12	7	>
FIELD	77:14	77:14	6	0
LEAF_NODE	77:14	77:14	7	0
LEAF_NODE	77:15	77:15	4	)
STATEMENTS	77:17	81:1	4	
LEAF_NODE	77:17	77:17	5	{
STATEMENTS	78:2	80:2	5	
EXPR_STATEMENT	78:2	78:26	6	cp = ( unsigned char * ) wp ;
EXPR	78:2	78:2	7	cp = ( unsigned char * ) wp
ASSIGN	78:2	78:7	8	cp = ( unsigned char * ) wp
LVAL	78:2	78:2	9	cp
FIELD	78:2	78:2	10	cp
LEAF_NODE	78:2	78:2	11	cp
ASSIGN_OP	78:5	78:5	9	=
LEAF_NODE	78:5	78:5	10	=
RVAL	78:7	78:24	9	( unsigned char * ) wp
LEAF_NODE	78:7	78:7	10	(
TYPE_NAME	78:8	78:17	10	unsigned char
LEAF_NODE	78:8	78:8	11	unsigned
LEAF_NODE	78:17	78:17	11	char
LEAF_NODE	78:21	78:21	10	*
LEAF_NODE	78:22	78:22	10	)
FIELD	78:24	78:24	10	wp
LEAF_NODE	78:24	78:24	11	wp
LEAF_NODE	78:26	78:26	7	;
EXPR_STATEMENT	79:2	79:11	6	t = cp [ 1 ] ;
EXPR	79:2	79:2	7	t = cp [ 1 ]
ASSIGN	79:2	79:6	8	t = cp [ 1 ]
LVAL	79:2	79:2	9	t
FIELD	79:2	79:2	10	t
LEAF_NODE	79:2	79:2	11	t
ASSIGN_OP	79:4	79:4	9	=
LEAF_NODE	79:4	79:4	10	=
RVAL	79:6	79:6	9	cp [ 1 ]
FIELD	79:6	79:10	10	cp [ 1 ]
LEAF_NODE	79:6	79:6	11	cp
LEAF_NODE	79:8	79:8	11	[
EXPR	79:9	79:9	11	1
FIELD	79:9	79:9	12	1
LEAF_NODE	79:9	79:9	13	1
LEAF_NODE	79:10	79:10	11	]
LEAF_NODE	79:11	79:11	7	;
EXPR_STATEMENT	79:13	79:26	6	cp [ 1 ] = cp [ 0 ] ;
EXPR	79:13	79:13	7	cp [ 1 ] = cp [ 0 ]
ASSIGN	79:13	79:21	8	cp [ 1 ] = cp [ 0 ]
LVAL	79:13	79:13	9	cp [ 1 ]
FIELD	79:13	79:17	10	cp [ 1 ]
LEAF_NODE	79:13	79:13	11	cp
LEAF_NODE	79:15	79:15	11	[
EXPR	79:16	79:16	11	1
FIELD	79:16	79:16	12	1
LEAF_NODE	79:16	79:16	13	1
LEAF_NODE	79:17	79:17	11	]
ASSIGN_OP	79:19	79:19	9	=
LEAF_NODE	79:19	79:19	10	=
RVAL	79:21	79:21	9	cp [ 0 ]
FIELD	79:21	79:25	10	cp [ 0 ]
LEAF_NODE	79:21	79:21	11	cp
LEAF_NODE	79:23	79:23	11	[
EXPR	79:24	79:24	11	0
FIELD	79:24	79:24	12	0
LEAF_NODE	79:24	79:24	13	0
LEAF_NODE	79:25	79:25	11	]
LEAF_NODE	79:26	79:26	7	;
EXPR_STATEMENT	79:28	79:37	6	cp [ 0 ] = t ;
EXPR	79:28	79:28	7	cp [ 0 ] = t
ASSIGN	79:28	79:36	8	cp [ 0 ] = t
LVAL	79:28	79:28	9	cp [ 0 ]
FIELD	79:28	79:32	10	cp [ 0 ]
LEAF_NODE	79:28	79:28	11	cp
LEAF_NODE	79:30	79:30	11	[
EXPR	79:31	79:31	11	0
FIELD	79:31	79:31	12	0
LEAF_NODE	79:31	79:31	13	0
LEAF_NODE	79:32	79:32	11	]
ASSIGN_OP	79:34	79:34	9	=
LEAF_NODE	79:34	79:34	10	=
RVAL	79:36	79:36	9	t
FIELD	79:36	79:36	10	t
LEAF_NODE	79:36	79:36	11	t
LEAF_NODE	79:37	79:37	7	;
EXPR_STATEMENT	80:2	80:6	6	wp ++ ;
EXPR	80:2	80:2	7	wp ++
FIELD	80:2	80:4	8	wp ++
LEAF_NODE	80:2	80:2	9	wp
LEAF_NODE	80:4	80:4	9	++
LEAF_NODE	80:6	80:6	7	;
LEAF_NODE	81:1	81:1	5	}
LEAF_NODE	82:0	82:0	2	}
FUNCTION_DEF	86:0	98:0	1	
RETURN_TYPE	86:0	86:0	2	void
TYPE_NAME	86:0	86:0	3	void
LEAF_NODE	86:0	86:0	4	void
FUNCTION_NAME	87:0	87:0	2	TIFFSwabArrayOfTriples
LEAF_NODE	87:0	87:0	3	TIFFSwabArrayOfTriples
PARAMETER_LIST	87:22	87:53	2	( register uint8 * tp , tmsize_t n )
LEAF_NODE	87:22	87:22	3	(
PARAMETER_DECL	87:23	87:39	3	register uint8 * tp
TYPE	87:23	87:37	4	register uint8 *
LEAF_NODE	87:23	87:23	5	register
TYPE_NAME	87:32	87:32	5	uint8
LEAF_NODE	87:32	87:32	6	uint8
POINTER	87:37	87:37	5	*
LEAF_NODE	87:37	87:37	6	*
NAME	87:39	87:39	4	tp
LEAF_NODE	87:39	87:39	5	tp
LEAF_NODE	87:41	87:41	3	,
PARAMETER_DECL	87:43	87:52	3	tmsize_t n
TYPE	87:43	87:43	4	tmsize_t
TYPE_NAME	87:43	87:43	5	tmsize_t
LEAF_NODE	87:43	87:43	6	tmsize_t
NAME	87:52	87:52	4	n
LEAF_NODE	87:52	87:52	5	n
LEAF_NODE	87:53	87:53	3	)
LEAF_NODE	88:0	88:0	2	{
STATEMENTS	89:1	93:1	2	
SIMPLE_DECL	89:1	89:18	3	unsigned char * cp ;
VAR_DECL	89:1	89:16	4	unsigned char * cp
TYPE	89:1	89:14	5	unsigned char *
TYPE_NAME	89:1	89:10	6	unsigned char
LEAF_NODE	89:1	89:1	7	unsigned
LEAF_NODE	89:10	89:10	7	char
POINTER	89:14	89:14	6	*
LEAF_NODE	89:14	89:14	7	*
NAME	89:16	89:16	5	cp
LEAF_NODE	89:16	89:16	6	cp
LEAF_NODE	89:18	89:18	4	;
SIMPLE_DECL	90:1	90:16	3	unsigned char t ;
VAR_DECL	90:1	90:15	4	unsigned char t
TYPE	90:1	90:1	5	unsigned char
TYPE_NAME	90:1	90:10	6	unsigned char
LEAF_NODE	90:1	90:1	7	unsigned
LEAF_NODE	90:10	90:10	7	char
NAME	90:15	90:15	5	t
LEAF_NODE	90:15	90:15	6	t
LEAF_NODE	90:16	90:16	4	;
ITERATION	93:1	93:17	3	
KEYWORD	93:1	93:1	4	while
LEAF_NODE	93:1	93:1	5	while
LEAF_NODE	93:7	93:7	4	(
CONDITION	93:8	93:8	4	n -- > 0
EXPR	93:8	93:14	5	n -- > 0
FIELD	93:8	93:9	6	n --
LEAF_NODE	93:8	93:8	7	n
LEAF_NODE	93:9	93:9	7	--
REL_OPERATOR	93:12	93:12	6	>
LEAF_NODE	93:12	93:12	7	>
FIELD	93:14	93:14	6	0
LEAF_NODE	93:14	93:14	7	0
LEAF_NODE	93:15	93:15	4	)
STATEMENTS	93:17	97:1	4	
LEAF_NODE	93:17	93:17	5	{
STATEMENTS	94:2	96:2	5	
EXPR_STATEMENT	94:2	94:26	6	cp = ( unsigned char * ) tp ;
EXPR	94:2	94:2	7	cp = ( unsigned char * ) tp
ASSIGN	94:2	94:7	8	cp = ( unsigned char * ) tp
LVAL	94:2	94:2	9	cp
FIELD	94:2	94:2	10	cp
LEAF_NODE	94:2	94:2	11	cp
ASSIGN_OP	94:5	94:5	9	=
LEAF_NODE	94:5	94:5	10	=
RVAL	94:7	94:24	9	( unsigned char * ) tp
LEAF_NODE	94:7	94:7	10	(
TYPE_NAME	94:8	94:17	10	unsigned char
LEAF_NODE	94:8	94:8	11	unsigned
LEAF_NODE	94:17	94:17	11	char
LEAF_NODE	94:21	94:21	10	*
LEAF_NODE	94:22	94:22	10	)
FIELD	94:24	94:24	10	tp
LEAF_NODE	94:24	94:24	11	tp
LEAF_NODE	94:26	94:26	7	;
EXPR_STATEMENT	95:2	95:11	6	t = cp [ 2 ] ;
EXPR	95:2	95:2	7	t = cp [ 2 ]
ASSIGN	95:2	95:6	8	t = cp [ 2 ]
LVAL	95:2	95:2	9	t
FIELD	95:2	95:2	10	t
LEAF_NODE	95:2	95:2	11	t
ASSIGN_OP	95:4	95:4	9	=
LEAF_NODE	95:4	95:4	10	=
RVAL	95:6	95:6	9	cp [ 2 ]
FIELD	95:6	95:10	10	cp [ 2 ]
LEAF_NODE	95:6	95:6	11	cp
LEAF_NODE	95:8	95:8	11	[
EXPR	95:9	95:9	11	2
FIELD	95:9	95:9	12	2
LEAF_NODE	95:9	95:9	13	2
LEAF_NODE	95:10	95:10	11	]
LEAF_NODE	95:11	95:11	7	;
EXPR_STATEMENT	95:13	95:26	6	cp [ 2 ] = cp [ 0 ] ;
EXPR	95:13	95:13	7	cp [ 2 ] = cp [ 0 ]
ASSIGN	95:13	95:21	8	cp [ 2 ] = cp [ 0 ]
LVAL	95:13	95:13	9	cp [ 2 ]
FIELD	95:13	95:17	10	cp [ 2 ]
LEAF_NODE	95:13	95:13	11	cp
LEAF_NODE	95:15	95:15	11	[
EXPR	95:16	95:16	11	2
FIELD	95:16	95:16	12	2
LEAF_NODE	95:16	95:16	13	2
LEAF_NODE	95:17	95:17	11	]
ASSIGN_OP	95:19	95:19	9	=
LEAF_NODE	95:19	95:19	10	=
RVAL	95:21	95:21	9	cp [ 0 ]
FIELD	95:21	95:25	10	cp [ 0 ]
LEAF_NODE	95:21	95:21	11	cp
LEAF_NODE	95:23	95:23	11	[
EXPR	95:24	95:24	11	0
FIELD	95:24	95:24	12	0
LEAF_NODE	95:24	95:24	13	0
LEAF_NODE	95:25	95:25	11	]
LEAF_NODE	95:26	95:26	7	;
EXPR_STATEMENT	95:28	95:37	6	cp [ 0 ] = t ;
EXPR	95:28	95:28	7	cp [ 0 ] = t
ASSIGN	95:28	95:36	8	cp [ 0 ] = t
LVAL	95:28	95:28	9	cp [ 0 ]
FIELD	95:28	95:32	10	cp [ 0 ]
LEAF_NODE	95:28	95:28	11	cp
LEAF_NODE	95:30	95:30	11	[
EXPR	95:31	95:31	11	0
FIELD	95:31	95:31	12	0
LEAF_NODE	95:31	95:31	13	0
LEAF_NODE	95:32	95:32	11	]
ASSIGN_OP	95:34	95:34	9	=
LEAF_NODE	95:34	95:34	10	=
RVAL	95:36	95:36	9	t
FIELD	95:36	95:36	10	t
LEAF_NODE	95:36	95:36	11	t
LEAF_NODE	95:37	95:37	7	;
EXPR_STATEMENT	96:2	96:9	6	tp += 3 ;
EXPR	96:2	96:2	7	tp += 3
ASSIGN	96:2	96:8	8	tp += 3
LVAL	96:2	96:2	9	tp
FIELD	96:2	96:2	10	tp
LEAF_NODE	96:2	96:2	11	tp
ASSIGN_OP	96:5	96:5	9	+=
LEAF_NODE	96:5	96:5	10	+=
RVAL	96:8	96:8	9	3
FIELD	96:8	96:8	10	3
LEAF_NODE	96:8	96:8	11	3
LEAF_NODE	96:9	96:9	7	;
LEAF_NODE	97:1	97:1	5	}
LEAF_NODE	98:0	98:0	2	}
FUNCTION_DEF	102:0	115:0	1	
RETURN_TYPE	102:0	102:0	2	void
TYPE_NAME	102:0	102:0	3	void
LEAF_NODE	102:0	102:0	4	void
FUNCTION_NAME	103:0	103:0	2	TIFFSwabArrayOfLong
LEAF_NODE	103:0	103:0	3	TIFFSwabArrayOfLong
PARAMETER_LIST	103:19	103:51	2	( register uint32 * lp , tmsize_t n )
LEAF_NODE	103:19	103:19	3	(
PARAMETER_DECL	103:20	103:37	3	register uint32 * lp
TYPE	103:20	103:35	4	register uint32 *
LEAF_NODE	103:20	103:20	5	register
TYPE_NAME	103:29	103:29	5	uint32
LEAF_NODE	103:29	103:29	6	uint32
POINTER	103:35	103:35	5	*
LEAF_NODE	103:35	103:35	6	*
NAME	103:37	103:37	4	lp
LEAF_NODE	103:37	103:37	5	lp
LEAF_NODE	103:39	103:39	3	,
PARAMETER_DECL	103:41	103:50	3	tmsize_t n
TYPE	103:41	103:41	4	tmsize_t
TYPE_NAME	103:41	103:41	5	tmsize_t
LEAF_NODE	103:41	103:41	6	tmsize_t
NAME	103:50	103:50	4	n
LEAF_NODE	103:50	103:50	5	n
LEAF_NODE	103:51	103:51	3	)
LEAF_NODE	104:0	104:0	2	{
STATEMENTS	105:1	109:1	2	
LEAF_NODE	105:1	105:1	3	register
SIMPLE_DECL	105:10	105:27	3	unsigned char * cp ;
VAR_DECL	105:10	105:25	4	unsigned char * cp
TYPE	105:10	105:24	5	unsigned char *
TYPE_NAME	105:10	105:19	6	unsigned char
LEAF_NODE	105:10	105:10	7	unsigned
LEAF_NODE	105:19	105:19	7	char
POINTER	105:24	105:24	6	*
LEAF_NODE	105:24	105:24	7	*
NAME	105:25	105:25	5	cp
LEAF_NODE	105:25	105:25	6	cp
LEAF_NODE	105:27	105:27	4	;
LEAF_NODE	106:1	106:1	3	register
SIMPLE_DECL	106:10	106:25	3	unsigned char t ;
VAR_DECL	106:10	106:24	4	unsigned char t
TYPE	106:10	106:10	5	unsigned char
TYPE_NAME	106:10	106:19	6	unsigned char
LEAF_NODE	106:10	106:10	7	unsigned
LEAF_NODE	106:19	106:19	7	char
NAME	106:24	106:24	5	t
LEAF_NODE	106:24	106:24	6	t
LEAF_NODE	106:25	106:25	4	;
EXPR_STATEMENT	107:1	107:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	107:1	107:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	107:1	107:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	107:1	107:1	6	assert
LEAF_NODE	107:1	107:1	7	assert
LEAF_NODE	107:7	107:7	6	(
ARGUMENT	107:8	107:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	107:8	107:21	7	sizeof ( uint32 )
CALLEE	107:8	107:8	8	sizeof
LEAF_NODE	107:8	107:8	9	sizeof
LEAF_NODE	107:14	107:14	8	(
ARGUMENT	107:15	107:15	8	uint32
FIELD	107:15	107:15	9	uint32
LEAF_NODE	107:15	107:15	10	uint32
LEAF_NODE	107:21	107:21	8	)
EQ_OPERATOR	107:22	107:22	7	==
LEAF_NODE	107:22	107:22	8	==
FIELD	107:24	107:24	7	4
LEAF_NODE	107:24	107:24	8	4
LEAF_NODE	107:25	107:25	6	)
LEAF_NODE	107:26	107:26	4	;
ITERATION	109:1	109:17	3	
KEYWORD	109:1	109:1	4	while
LEAF_NODE	109:1	109:1	5	while
LEAF_NODE	109:7	109:7	4	(
CONDITION	109:8	109:8	4	n -- > 0
EXPR	109:8	109:14	5	n -- > 0
FIELD	109:8	109:9	6	n --
LEAF_NODE	109:8	109:8	7	n
LEAF_NODE	109:9	109:9	7	--
REL_OPERATOR	109:12	109:12	6	>
LEAF_NODE	109:12	109:12	7	>
FIELD	109:14	109:14	6	0
LEAF_NODE	109:14	109:14	7	0
LEAF_NODE	109:15	109:15	4	)
STATEMENTS	109:17	114:1	4	
LEAF_NODE	109:17	109:17	5	{
STATEMENTS	110:2	113:2	5	
EXPR_STATEMENT	110:2	110:26	6	cp = ( unsigned char * ) lp ;
EXPR	110:2	110:2	7	cp = ( unsigned char * ) lp
ASSIGN	110:2	110:7	8	cp = ( unsigned char * ) lp
LVAL	110:2	110:2	9	cp
FIELD	110:2	110:2	10	cp
LEAF_NODE	110:2	110:2	11	cp
ASSIGN_OP	110:5	110:5	9	=
LEAF_NODE	110:5	110:5	10	=
RVAL	110:7	110:24	9	( unsigned char * ) lp
LEAF_NODE	110:7	110:7	10	(
TYPE_NAME	110:8	110:17	10	unsigned char
LEAF_NODE	110:8	110:8	11	unsigned
LEAF_NODE	110:17	110:17	11	char
LEAF_NODE	110:22	110:22	10	*
LEAF_NODE	110:23	110:23	10	)
FIELD	110:24	110:24	10	lp
LEAF_NODE	110:24	110:24	11	lp
LEAF_NODE	110:26	110:26	7	;
EXPR_STATEMENT	111:2	111:11	6	t = cp [ 3 ] ;
EXPR	111:2	111:2	7	t = cp [ 3 ]
ASSIGN	111:2	111:6	8	t = cp [ 3 ]
LVAL	111:2	111:2	9	t
FIELD	111:2	111:2	10	t
LEAF_NODE	111:2	111:2	11	t
ASSIGN_OP	111:4	111:4	9	=
LEAF_NODE	111:4	111:4	10	=
RVAL	111:6	111:6	9	cp [ 3 ]
FIELD	111:6	111:10	10	cp [ 3 ]
LEAF_NODE	111:6	111:6	11	cp
LEAF_NODE	111:8	111:8	11	[
EXPR	111:9	111:9	11	3
FIELD	111:9	111:9	12	3
LEAF_NODE	111:9	111:9	13	3
LEAF_NODE	111:10	111:10	11	]
LEAF_NODE	111:11	111:11	7	;
EXPR_STATEMENT	111:13	111:26	6	cp [ 3 ] = cp [ 0 ] ;
EXPR	111:13	111:13	7	cp [ 3 ] = cp [ 0 ]
ASSIGN	111:13	111:21	8	cp [ 3 ] = cp [ 0 ]
LVAL	111:13	111:13	9	cp [ 3 ]
FIELD	111:13	111:17	10	cp [ 3 ]
LEAF_NODE	111:13	111:13	11	cp
LEAF_NODE	111:15	111:15	11	[
EXPR	111:16	111:16	11	3
FIELD	111:16	111:16	12	3
LEAF_NODE	111:16	111:16	13	3
LEAF_NODE	111:17	111:17	11	]
ASSIGN_OP	111:19	111:19	9	=
LEAF_NODE	111:19	111:19	10	=
RVAL	111:21	111:21	9	cp [ 0 ]
FIELD	111:21	111:25	10	cp [ 0 ]
LEAF_NODE	111:21	111:21	11	cp
LEAF_NODE	111:23	111:23	11	[
EXPR	111:24	111:24	11	0
FIELD	111:24	111:24	12	0
LEAF_NODE	111:24	111:24	13	0
LEAF_NODE	111:25	111:25	11	]
LEAF_NODE	111:26	111:26	7	;
EXPR_STATEMENT	111:28	111:37	6	cp [ 0 ] = t ;
EXPR	111:28	111:28	7	cp [ 0 ] = t
ASSIGN	111:28	111:36	8	cp [ 0 ] = t
LVAL	111:28	111:28	9	cp [ 0 ]
FIELD	111:28	111:32	10	cp [ 0 ]
LEAF_NODE	111:28	111:28	11	cp
LEAF_NODE	111:30	111:30	11	[
EXPR	111:31	111:31	11	0
FIELD	111:31	111:31	12	0
LEAF_NODE	111:31	111:31	13	0
LEAF_NODE	111:32	111:32	11	]
ASSIGN_OP	111:34	111:34	9	=
LEAF_NODE	111:34	111:34	10	=
RVAL	111:36	111:36	9	t
FIELD	111:36	111:36	10	t
LEAF_NODE	111:36	111:36	11	t
LEAF_NODE	111:37	111:37	7	;
EXPR_STATEMENT	112:2	112:11	6	t = cp [ 2 ] ;
EXPR	112:2	112:2	7	t = cp [ 2 ]
ASSIGN	112:2	112:6	8	t = cp [ 2 ]
LVAL	112:2	112:2	9	t
FIELD	112:2	112:2	10	t
LEAF_NODE	112:2	112:2	11	t
ASSIGN_OP	112:4	112:4	9	=
LEAF_NODE	112:4	112:4	10	=
RVAL	112:6	112:6	9	cp [ 2 ]
FIELD	112:6	112:10	10	cp [ 2 ]
LEAF_NODE	112:6	112:6	11	cp
LEAF_NODE	112:8	112:8	11	[
EXPR	112:9	112:9	11	2
FIELD	112:9	112:9	12	2
LEAF_NODE	112:9	112:9	13	2
LEAF_NODE	112:10	112:10	11	]
LEAF_NODE	112:11	112:11	7	;
EXPR_STATEMENT	112:13	112:26	6	cp [ 2 ] = cp [ 1 ] ;
EXPR	112:13	112:13	7	cp [ 2 ] = cp [ 1 ]
ASSIGN	112:13	112:21	8	cp [ 2 ] = cp [ 1 ]
LVAL	112:13	112:13	9	cp [ 2 ]
FIELD	112:13	112:17	10	cp [ 2 ]
LEAF_NODE	112:13	112:13	11	cp
LEAF_NODE	112:15	112:15	11	[
EXPR	112:16	112:16	11	2
FIELD	112:16	112:16	12	2
LEAF_NODE	112:16	112:16	13	2
LEAF_NODE	112:17	112:17	11	]
ASSIGN_OP	112:19	112:19	9	=
LEAF_NODE	112:19	112:19	10	=
RVAL	112:21	112:21	9	cp [ 1 ]
FIELD	112:21	112:25	10	cp [ 1 ]
LEAF_NODE	112:21	112:21	11	cp
LEAF_NODE	112:23	112:23	11	[
EXPR	112:24	112:24	11	1
FIELD	112:24	112:24	12	1
LEAF_NODE	112:24	112:24	13	1
LEAF_NODE	112:25	112:25	11	]
LEAF_NODE	112:26	112:26	7	;
EXPR_STATEMENT	112:28	112:37	6	cp [ 1 ] = t ;
EXPR	112:28	112:28	7	cp [ 1 ] = t
ASSIGN	112:28	112:36	8	cp [ 1 ] = t
LVAL	112:28	112:28	9	cp [ 1 ]
FIELD	112:28	112:32	10	cp [ 1 ]
LEAF_NODE	112:28	112:28	11	cp
LEAF_NODE	112:30	112:30	11	[
EXPR	112:31	112:31	11	1
FIELD	112:31	112:31	12	1
LEAF_NODE	112:31	112:31	13	1
LEAF_NODE	112:32	112:32	11	]
ASSIGN_OP	112:34	112:34	9	=
LEAF_NODE	112:34	112:34	10	=
RVAL	112:36	112:36	9	t
FIELD	112:36	112:36	10	t
LEAF_NODE	112:36	112:36	11	t
LEAF_NODE	112:37	112:37	7	;
EXPR_STATEMENT	113:2	113:6	6	lp ++ ;
EXPR	113:2	113:2	7	lp ++
FIELD	113:2	113:4	8	lp ++
LEAF_NODE	113:2	113:2	9	lp
LEAF_NODE	113:4	113:4	9	++
LEAF_NODE	113:6	113:6	7	;
LEAF_NODE	114:1	114:1	5	}
LEAF_NODE	115:0	115:0	2	}
FUNCTION_DEF	119:0	134:0	1	
RETURN_TYPE	119:0	119:0	2	void
TYPE_NAME	119:0	119:0	3	void
LEAF_NODE	119:0	119:0	4	void
FUNCTION_NAME	120:0	120:0	2	TIFFSwabArrayOfLong8
LEAF_NODE	120:0	120:0	3	TIFFSwabArrayOfLong8
PARAMETER_LIST	120:20	120:52	2	( register uint64 * lp , tmsize_t n )
LEAF_NODE	120:20	120:20	3	(
PARAMETER_DECL	120:21	120:38	3	register uint64 * lp
TYPE	120:21	120:36	4	register uint64 *
LEAF_NODE	120:21	120:21	5	register
TYPE_NAME	120:30	120:30	5	uint64
LEAF_NODE	120:30	120:30	6	uint64
POINTER	120:36	120:36	5	*
LEAF_NODE	120:36	120:36	6	*
NAME	120:38	120:38	4	lp
LEAF_NODE	120:38	120:38	5	lp
LEAF_NODE	120:40	120:40	3	,
PARAMETER_DECL	120:42	120:51	3	tmsize_t n
TYPE	120:42	120:42	4	tmsize_t
TYPE_NAME	120:42	120:42	5	tmsize_t
LEAF_NODE	120:42	120:42	6	tmsize_t
NAME	120:51	120:51	4	n
LEAF_NODE	120:51	120:51	5	n
LEAF_NODE	120:52	120:52	3	)
LEAF_NODE	121:0	121:0	2	{
STATEMENTS	122:1	126:1	2	
LEAF_NODE	122:1	122:1	3	register
SIMPLE_DECL	122:10	122:27	3	unsigned char * cp ;
VAR_DECL	122:10	122:25	4	unsigned char * cp
TYPE	122:10	122:24	5	unsigned char *
TYPE_NAME	122:10	122:19	6	unsigned char
LEAF_NODE	122:10	122:10	7	unsigned
LEAF_NODE	122:19	122:19	7	char
POINTER	122:24	122:24	6	*
LEAF_NODE	122:24	122:24	7	*
NAME	122:25	122:25	5	cp
LEAF_NODE	122:25	122:25	6	cp
LEAF_NODE	122:27	122:27	4	;
LEAF_NODE	123:1	123:1	3	register
SIMPLE_DECL	123:10	123:25	3	unsigned char t ;
VAR_DECL	123:10	123:24	4	unsigned char t
TYPE	123:10	123:10	5	unsigned char
TYPE_NAME	123:10	123:19	6	unsigned char
LEAF_NODE	123:10	123:10	7	unsigned
LEAF_NODE	123:19	123:19	7	char
NAME	123:24	123:24	5	t
LEAF_NODE	123:24	123:24	6	t
LEAF_NODE	123:25	123:25	4	;
EXPR_STATEMENT	124:1	124:26	3	assert ( sizeof ( uint64 ) == 8 ) ;
EXPR	124:1	124:1	4	assert ( sizeof ( uint64 ) == 8 )
FUNCTION_CALL	124:1	124:25	5	assert ( sizeof ( uint64 ) == 8 )
CALLEE	124:1	124:1	6	assert
LEAF_NODE	124:1	124:1	7	assert
LEAF_NODE	124:7	124:7	6	(
ARGUMENT	124:8	124:24	6	sizeof ( uint64 ) == 8
FUNCTION_CALL	124:8	124:21	7	sizeof ( uint64 )
CALLEE	124:8	124:8	8	sizeof
LEAF_NODE	124:8	124:8	9	sizeof
LEAF_NODE	124:14	124:14	8	(
ARGUMENT	124:15	124:15	8	uint64
FIELD	124:15	124:15	9	uint64
LEAF_NODE	124:15	124:15	10	uint64
LEAF_NODE	124:21	124:21	8	)
EQ_OPERATOR	124:22	124:22	7	==
LEAF_NODE	124:22	124:22	8	==
FIELD	124:24	124:24	7	8
LEAF_NODE	124:24	124:24	8	8
LEAF_NODE	124:25	124:25	6	)
LEAF_NODE	124:26	124:26	4	;
ITERATION	126:1	126:17	3	
KEYWORD	126:1	126:1	4	while
LEAF_NODE	126:1	126:1	5	while
LEAF_NODE	126:7	126:7	4	(
CONDITION	126:8	126:8	4	n -- > 0
EXPR	126:8	126:14	5	n -- > 0
FIELD	126:8	126:9	6	n --
LEAF_NODE	126:8	126:8	7	n
LEAF_NODE	126:9	126:9	7	--
REL_OPERATOR	126:12	126:12	6	>
LEAF_NODE	126:12	126:12	7	>
FIELD	126:14	126:14	6	0
LEAF_NODE	126:14	126:14	7	0
LEAF_NODE	126:15	126:15	4	)
STATEMENTS	126:17	133:1	4	
LEAF_NODE	126:17	126:17	5	{
STATEMENTS	127:2	132:2	5	
EXPR_STATEMENT	127:2	127:26	6	cp = ( unsigned char * ) lp ;
EXPR	127:2	127:2	7	cp = ( unsigned char * ) lp
ASSIGN	127:2	127:7	8	cp = ( unsigned char * ) lp
LVAL	127:2	127:2	9	cp
FIELD	127:2	127:2	10	cp
LEAF_NODE	127:2	127:2	11	cp
ASSIGN_OP	127:5	127:5	9	=
LEAF_NODE	127:5	127:5	10	=
RVAL	127:7	127:24	9	( unsigned char * ) lp
LEAF_NODE	127:7	127:7	10	(
TYPE_NAME	127:8	127:17	10	unsigned char
LEAF_NODE	127:8	127:8	11	unsigned
LEAF_NODE	127:17	127:17	11	char
LEAF_NODE	127:22	127:22	10	*
LEAF_NODE	127:23	127:23	10	)
FIELD	127:24	127:24	10	lp
LEAF_NODE	127:24	127:24	11	lp
LEAF_NODE	127:26	127:26	7	;
EXPR_STATEMENT	128:2	128:11	6	t = cp [ 7 ] ;
EXPR	128:2	128:2	7	t = cp [ 7 ]
ASSIGN	128:2	128:6	8	t = cp [ 7 ]
LVAL	128:2	128:2	9	t
FIELD	128:2	128:2	10	t
LEAF_NODE	128:2	128:2	11	t
ASSIGN_OP	128:4	128:4	9	=
LEAF_NODE	128:4	128:4	10	=
RVAL	128:6	128:6	9	cp [ 7 ]
FIELD	128:6	128:10	10	cp [ 7 ]
LEAF_NODE	128:6	128:6	11	cp
LEAF_NODE	128:8	128:8	11	[
EXPR	128:9	128:9	11	7
FIELD	128:9	128:9	12	7
LEAF_NODE	128:9	128:9	13	7
LEAF_NODE	128:10	128:10	11	]
LEAF_NODE	128:11	128:11	7	;
EXPR_STATEMENT	128:13	128:26	6	cp [ 7 ] = cp [ 0 ] ;
EXPR	128:13	128:13	7	cp [ 7 ] = cp [ 0 ]
ASSIGN	128:13	128:21	8	cp [ 7 ] = cp [ 0 ]
LVAL	128:13	128:13	9	cp [ 7 ]
FIELD	128:13	128:17	10	cp [ 7 ]
LEAF_NODE	128:13	128:13	11	cp
LEAF_NODE	128:15	128:15	11	[
EXPR	128:16	128:16	11	7
FIELD	128:16	128:16	12	7
LEAF_NODE	128:16	128:16	13	7
LEAF_NODE	128:17	128:17	11	]
ASSIGN_OP	128:19	128:19	9	=
LEAF_NODE	128:19	128:19	10	=
RVAL	128:21	128:21	9	cp [ 0 ]
FIELD	128:21	128:25	10	cp [ 0 ]
LEAF_NODE	128:21	128:21	11	cp
LEAF_NODE	128:23	128:23	11	[
EXPR	128:24	128:24	11	0
FIELD	128:24	128:24	12	0
LEAF_NODE	128:24	128:24	13	0
LEAF_NODE	128:25	128:25	11	]
LEAF_NODE	128:26	128:26	7	;
EXPR_STATEMENT	128:28	128:37	6	cp [ 0 ] = t ;
EXPR	128:28	128:28	7	cp [ 0 ] = t
ASSIGN	128:28	128:36	8	cp [ 0 ] = t
LVAL	128:28	128:28	9	cp [ 0 ]
FIELD	128:28	128:32	10	cp [ 0 ]
LEAF_NODE	128:28	128:28	11	cp
LEAF_NODE	128:30	128:30	11	[
EXPR	128:31	128:31	11	0
FIELD	128:31	128:31	12	0
LEAF_NODE	128:31	128:31	13	0
LEAF_NODE	128:32	128:32	11	]
ASSIGN_OP	128:34	128:34	9	=
LEAF_NODE	128:34	128:34	10	=
RVAL	128:36	128:36	9	t
FIELD	128:36	128:36	10	t
LEAF_NODE	128:36	128:36	11	t
LEAF_NODE	128:37	128:37	7	;
EXPR_STATEMENT	129:2	129:11	6	t = cp [ 6 ] ;
EXPR	129:2	129:2	7	t = cp [ 6 ]
ASSIGN	129:2	129:6	8	t = cp [ 6 ]
LVAL	129:2	129:2	9	t
FIELD	129:2	129:2	10	t
LEAF_NODE	129:2	129:2	11	t
ASSIGN_OP	129:4	129:4	9	=
LEAF_NODE	129:4	129:4	10	=
RVAL	129:6	129:6	9	cp [ 6 ]
FIELD	129:6	129:10	10	cp [ 6 ]
LEAF_NODE	129:6	129:6	11	cp
LEAF_NODE	129:8	129:8	11	[
EXPR	129:9	129:9	11	6
FIELD	129:9	129:9	12	6
LEAF_NODE	129:9	129:9	13	6
LEAF_NODE	129:10	129:10	11	]
LEAF_NODE	129:11	129:11	7	;
EXPR_STATEMENT	129:13	129:26	6	cp [ 6 ] = cp [ 1 ] ;
EXPR	129:13	129:13	7	cp [ 6 ] = cp [ 1 ]
ASSIGN	129:13	129:21	8	cp [ 6 ] = cp [ 1 ]
LVAL	129:13	129:13	9	cp [ 6 ]
FIELD	129:13	129:17	10	cp [ 6 ]
LEAF_NODE	129:13	129:13	11	cp
LEAF_NODE	129:15	129:15	11	[
EXPR	129:16	129:16	11	6
FIELD	129:16	129:16	12	6
LEAF_NODE	129:16	129:16	13	6
LEAF_NODE	129:17	129:17	11	]
ASSIGN_OP	129:19	129:19	9	=
LEAF_NODE	129:19	129:19	10	=
RVAL	129:21	129:21	9	cp [ 1 ]
FIELD	129:21	129:25	10	cp [ 1 ]
LEAF_NODE	129:21	129:21	11	cp
LEAF_NODE	129:23	129:23	11	[
EXPR	129:24	129:24	11	1
FIELD	129:24	129:24	12	1
LEAF_NODE	129:24	129:24	13	1
LEAF_NODE	129:25	129:25	11	]
LEAF_NODE	129:26	129:26	7	;
EXPR_STATEMENT	129:28	129:37	6	cp [ 1 ] = t ;
EXPR	129:28	129:28	7	cp [ 1 ] = t
ASSIGN	129:28	129:36	8	cp [ 1 ] = t
LVAL	129:28	129:28	9	cp [ 1 ]
FIELD	129:28	129:32	10	cp [ 1 ]
LEAF_NODE	129:28	129:28	11	cp
LEAF_NODE	129:30	129:30	11	[
EXPR	129:31	129:31	11	1
FIELD	129:31	129:31	12	1
LEAF_NODE	129:31	129:31	13	1
LEAF_NODE	129:32	129:32	11	]
ASSIGN_OP	129:34	129:34	9	=
LEAF_NODE	129:34	129:34	10	=
RVAL	129:36	129:36	9	t
FIELD	129:36	129:36	10	t
LEAF_NODE	129:36	129:36	11	t
LEAF_NODE	129:37	129:37	7	;
EXPR_STATEMENT	130:2	130:11	6	t = cp [ 5 ] ;
EXPR	130:2	130:2	7	t = cp [ 5 ]
ASSIGN	130:2	130:6	8	t = cp [ 5 ]
LVAL	130:2	130:2	9	t
FIELD	130:2	130:2	10	t
LEAF_NODE	130:2	130:2	11	t
ASSIGN_OP	130:4	130:4	9	=
LEAF_NODE	130:4	130:4	10	=
RVAL	130:6	130:6	9	cp [ 5 ]
FIELD	130:6	130:10	10	cp [ 5 ]
LEAF_NODE	130:6	130:6	11	cp
LEAF_NODE	130:8	130:8	11	[
EXPR	130:9	130:9	11	5
FIELD	130:9	130:9	12	5
LEAF_NODE	130:9	130:9	13	5
LEAF_NODE	130:10	130:10	11	]
LEAF_NODE	130:11	130:11	7	;
EXPR_STATEMENT	130:13	130:26	6	cp [ 5 ] = cp [ 2 ] ;
EXPR	130:13	130:13	7	cp [ 5 ] = cp [ 2 ]
ASSIGN	130:13	130:21	8	cp [ 5 ] = cp [ 2 ]
LVAL	130:13	130:13	9	cp [ 5 ]
FIELD	130:13	130:17	10	cp [ 5 ]
LEAF_NODE	130:13	130:13	11	cp
LEAF_NODE	130:15	130:15	11	[
EXPR	130:16	130:16	11	5
FIELD	130:16	130:16	12	5
LEAF_NODE	130:16	130:16	13	5
LEAF_NODE	130:17	130:17	11	]
ASSIGN_OP	130:19	130:19	9	=
LEAF_NODE	130:19	130:19	10	=
RVAL	130:21	130:21	9	cp [ 2 ]
FIELD	130:21	130:25	10	cp [ 2 ]
LEAF_NODE	130:21	130:21	11	cp
LEAF_NODE	130:23	130:23	11	[
EXPR	130:24	130:24	11	2
FIELD	130:24	130:24	12	2
LEAF_NODE	130:24	130:24	13	2
LEAF_NODE	130:25	130:25	11	]
LEAF_NODE	130:26	130:26	7	;
EXPR_STATEMENT	130:28	130:37	6	cp [ 2 ] = t ;
EXPR	130:28	130:28	7	cp [ 2 ] = t
ASSIGN	130:28	130:36	8	cp [ 2 ] = t
LVAL	130:28	130:28	9	cp [ 2 ]
FIELD	130:28	130:32	10	cp [ 2 ]
LEAF_NODE	130:28	130:28	11	cp
LEAF_NODE	130:30	130:30	11	[
EXPR	130:31	130:31	11	2
FIELD	130:31	130:31	12	2
LEAF_NODE	130:31	130:31	13	2
LEAF_NODE	130:32	130:32	11	]
ASSIGN_OP	130:34	130:34	9	=
LEAF_NODE	130:34	130:34	10	=
RVAL	130:36	130:36	9	t
FIELD	130:36	130:36	10	t
LEAF_NODE	130:36	130:36	11	t
LEAF_NODE	130:37	130:37	7	;
EXPR_STATEMENT	131:2	131:11	6	t = cp [ 4 ] ;
EXPR	131:2	131:2	7	t = cp [ 4 ]
ASSIGN	131:2	131:6	8	t = cp [ 4 ]
LVAL	131:2	131:2	9	t
FIELD	131:2	131:2	10	t
LEAF_NODE	131:2	131:2	11	t
ASSIGN_OP	131:4	131:4	9	=
LEAF_NODE	131:4	131:4	10	=
RVAL	131:6	131:6	9	cp [ 4 ]
FIELD	131:6	131:10	10	cp [ 4 ]
LEAF_NODE	131:6	131:6	11	cp
LEAF_NODE	131:8	131:8	11	[
EXPR	131:9	131:9	11	4
FIELD	131:9	131:9	12	4
LEAF_NODE	131:9	131:9	13	4
LEAF_NODE	131:10	131:10	11	]
LEAF_NODE	131:11	131:11	7	;
EXPR_STATEMENT	131:13	131:26	6	cp [ 4 ] = cp [ 3 ] ;
EXPR	131:13	131:13	7	cp [ 4 ] = cp [ 3 ]
ASSIGN	131:13	131:21	8	cp [ 4 ] = cp [ 3 ]
LVAL	131:13	131:13	9	cp [ 4 ]
FIELD	131:13	131:17	10	cp [ 4 ]
LEAF_NODE	131:13	131:13	11	cp
LEAF_NODE	131:15	131:15	11	[
EXPR	131:16	131:16	11	4
FIELD	131:16	131:16	12	4
LEAF_NODE	131:16	131:16	13	4
LEAF_NODE	131:17	131:17	11	]
ASSIGN_OP	131:19	131:19	9	=
LEAF_NODE	131:19	131:19	10	=
RVAL	131:21	131:21	9	cp [ 3 ]
FIELD	131:21	131:25	10	cp [ 3 ]
LEAF_NODE	131:21	131:21	11	cp
LEAF_NODE	131:23	131:23	11	[
EXPR	131:24	131:24	11	3
FIELD	131:24	131:24	12	3
LEAF_NODE	131:24	131:24	13	3
LEAF_NODE	131:25	131:25	11	]
LEAF_NODE	131:26	131:26	7	;
EXPR_STATEMENT	131:28	131:37	6	cp [ 3 ] = t ;
EXPR	131:28	131:28	7	cp [ 3 ] = t
ASSIGN	131:28	131:36	8	cp [ 3 ] = t
LVAL	131:28	131:28	9	cp [ 3 ]
FIELD	131:28	131:32	10	cp [ 3 ]
LEAF_NODE	131:28	131:28	11	cp
LEAF_NODE	131:30	131:30	11	[
EXPR	131:31	131:31	11	3
FIELD	131:31	131:31	12	3
LEAF_NODE	131:31	131:31	13	3
LEAF_NODE	131:32	131:32	11	]
ASSIGN_OP	131:34	131:34	9	=
LEAF_NODE	131:34	131:34	10	=
RVAL	131:36	131:36	9	t
FIELD	131:36	131:36	10	t
LEAF_NODE	131:36	131:36	11	t
LEAF_NODE	131:37	131:37	7	;
EXPR_STATEMENT	132:2	132:6	6	lp ++ ;
EXPR	132:2	132:2	7	lp ++
FIELD	132:2	132:4	8	lp ++
LEAF_NODE	132:2	132:2	9	lp
LEAF_NODE	132:4	132:4	9	++
LEAF_NODE	132:6	132:6	7	;
LEAF_NODE	133:1	133:1	5	}
LEAF_NODE	134:0	134:0	2	}
FUNCTION_DEF	138:0	146:0	1	
RETURN_TYPE	138:0	138:0	2	void
TYPE_NAME	138:0	138:0	3	void
LEAF_NODE	138:0	138:0	4	void
FUNCTION_NAME	139:0	139:0	2	TIFFSwabFloat
LEAF_NODE	139:0	139:0	3	TIFFSwabFloat
PARAMETER_LIST	139:13	139:23	2	( float * fp )
LEAF_NODE	139:13	139:13	3	(
PARAMETER_DECL	139:14	139:21	3	float * fp
TYPE	139:14	139:19	4	float *
TYPE_NAME	139:14	139:14	5	float
LEAF_NODE	139:14	139:14	6	float
POINTER	139:19	139:19	5	*
LEAF_NODE	139:19	139:19	6	*
NAME	139:21	139:21	4	fp
LEAF_NODE	139:21	139:21	5	fp
LEAF_NODE	139:23	139:23	3	)
LEAF_NODE	140:0	140:0	2	{
STATEMENTS	141:1	145:27	2	
LEAF_NODE	141:1	141:1	3	register
SIMPLE_DECL	141:10	141:49	3	unsigned char * cp ; cp = ( unsigned char * ) fp ;
VAR_DECL	141:10	141:25	4	unsigned char * cp ; cp = ( unsigned char * ) fp
TYPE	141:10	141:23	5	unsigned char *
TYPE_NAME	141:10	141:19	6	unsigned char
LEAF_NODE	141:10	141:10	7	unsigned
LEAF_NODE	141:19	141:19	7	char
POINTER	141:23	141:23	6	*
LEAF_NODE	141:23	141:23	7	*
NAME	141:25	141:25	5	cp
LEAF_NODE	141:25	141:25	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	141:25	141:25	5	cp = ( unsigned char * ) fp
ASSIGN	141:25	141:30	6	cp = ( unsigned char * ) fp
LVAL	141:25	141:25	7	cp
NAME	141:25	141:25	8	cp
LEAF_NODE	141:25	141:25	9	cp
ASSIGN_OP	141:28	141:28	7	=
LEAF_NODE	141:28	141:28	8	=
RVAL	141:30	141:47	7	( unsigned char * ) fp
LEAF_NODE	141:30	141:30	8	(
TYPE_NAME	141:31	141:40	8	unsigned char
LEAF_NODE	141:31	141:31	9	unsigned
LEAF_NODE	141:40	141:40	9	char
LEAF_NODE	141:44	141:44	8	*
LEAF_NODE	141:45	141:45	8	)
FIELD	141:47	141:47	8	fp
LEAF_NODE	141:47	141:47	9	fp
LEAF_NODE	141:49	141:49	4	;
SIMPLE_DECL	142:1	142:16	3	unsigned char t ;
VAR_DECL	142:1	142:15	4	unsigned char t
TYPE	142:1	142:1	5	unsigned char
TYPE_NAME	142:1	142:10	6	unsigned char
LEAF_NODE	142:1	142:1	7	unsigned
LEAF_NODE	142:10	142:10	7	char
NAME	142:15	142:15	5	t
LEAF_NODE	142:15	142:15	6	t
LEAF_NODE	142:16	142:16	4	;
EXPR_STATEMENT	143:1	143:25	3	assert ( sizeof ( float ) == 4 ) ;
EXPR	143:1	143:1	4	assert ( sizeof ( float ) == 4 )
FUNCTION_CALL	143:1	143:24	5	assert ( sizeof ( float ) == 4 )
CALLEE	143:1	143:1	6	assert
LEAF_NODE	143:1	143:1	7	assert
LEAF_NODE	143:7	143:7	6	(
ARGUMENT	143:8	143:23	6	sizeof ( float ) == 4
FUNCTION_CALL	143:8	143:20	7	sizeof ( float )
CALLEE	143:8	143:8	8	sizeof
LEAF_NODE	143:8	143:8	9	sizeof
LEAF_NODE	143:14	143:14	8	(
ARGUMENT	143:15	143:15	8	float
FIELD	143:15	143:15	9	float
LEAF_NODE	143:15	143:15	10	float
LEAF_NODE	143:20	143:20	8	)
EQ_OPERATOR	143:21	143:21	7	==
LEAF_NODE	143:21	143:21	8	==
FIELD	143:23	143:23	7	4
LEAF_NODE	143:23	143:23	8	4
LEAF_NODE	143:24	143:24	6	)
LEAF_NODE	143:25	143:25	4	;
EXPR_STATEMENT	144:1	144:10	3	t = cp [ 3 ] ;
EXPR	144:1	144:1	4	t = cp [ 3 ]
ASSIGN	144:1	144:5	5	t = cp [ 3 ]
LVAL	144:1	144:1	6	t
FIELD	144:1	144:1	7	t
LEAF_NODE	144:1	144:1	8	t
ASSIGN_OP	144:3	144:3	6	=
LEAF_NODE	144:3	144:3	7	=
RVAL	144:5	144:5	6	cp [ 3 ]
FIELD	144:5	144:9	7	cp [ 3 ]
LEAF_NODE	144:5	144:5	8	cp
LEAF_NODE	144:7	144:7	8	[
EXPR	144:8	144:8	8	3
FIELD	144:8	144:8	9	3
LEAF_NODE	144:8	144:8	10	3
LEAF_NODE	144:9	144:9	8	]
LEAF_NODE	144:10	144:10	4	;
EXPR_STATEMENT	144:12	144:25	3	cp [ 3 ] = cp [ 0 ] ;
EXPR	144:12	144:12	4	cp [ 3 ] = cp [ 0 ]
ASSIGN	144:12	144:20	5	cp [ 3 ] = cp [ 0 ]
LVAL	144:12	144:12	6	cp [ 3 ]
FIELD	144:12	144:16	7	cp [ 3 ]
LEAF_NODE	144:12	144:12	8	cp
LEAF_NODE	144:14	144:14	8	[
EXPR	144:15	144:15	8	3
FIELD	144:15	144:15	9	3
LEAF_NODE	144:15	144:15	10	3
LEAF_NODE	144:16	144:16	8	]
ASSIGN_OP	144:18	144:18	6	=
LEAF_NODE	144:18	144:18	7	=
RVAL	144:20	144:20	6	cp [ 0 ]
FIELD	144:20	144:24	7	cp [ 0 ]
LEAF_NODE	144:20	144:20	8	cp
LEAF_NODE	144:22	144:22	8	[
EXPR	144:23	144:23	8	0
FIELD	144:23	144:23	9	0
LEAF_NODE	144:23	144:23	10	0
LEAF_NODE	144:24	144:24	8	]
LEAF_NODE	144:25	144:25	4	;
EXPR_STATEMENT	144:27	144:36	3	cp [ 0 ] = t ;
EXPR	144:27	144:27	4	cp [ 0 ] = t
ASSIGN	144:27	144:35	5	cp [ 0 ] = t
LVAL	144:27	144:27	6	cp [ 0 ]
FIELD	144:27	144:31	7	cp [ 0 ]
LEAF_NODE	144:27	144:27	8	cp
LEAF_NODE	144:29	144:29	8	[
EXPR	144:30	144:30	8	0
FIELD	144:30	144:30	9	0
LEAF_NODE	144:30	144:30	10	0
LEAF_NODE	144:31	144:31	8	]
ASSIGN_OP	144:33	144:33	6	=
LEAF_NODE	144:33	144:33	7	=
RVAL	144:35	144:35	6	t
FIELD	144:35	144:35	7	t
LEAF_NODE	144:35	144:35	8	t
LEAF_NODE	144:36	144:36	4	;
EXPR_STATEMENT	145:1	145:10	3	t = cp [ 2 ] ;
EXPR	145:1	145:1	4	t = cp [ 2 ]
ASSIGN	145:1	145:5	5	t = cp [ 2 ]
LVAL	145:1	145:1	6	t
FIELD	145:1	145:1	7	t
LEAF_NODE	145:1	145:1	8	t
ASSIGN_OP	145:3	145:3	6	=
LEAF_NODE	145:3	145:3	7	=
RVAL	145:5	145:5	6	cp [ 2 ]
FIELD	145:5	145:9	7	cp [ 2 ]
LEAF_NODE	145:5	145:5	8	cp
LEAF_NODE	145:7	145:7	8	[
EXPR	145:8	145:8	8	2
FIELD	145:8	145:8	9	2
LEAF_NODE	145:8	145:8	10	2
LEAF_NODE	145:9	145:9	8	]
LEAF_NODE	145:10	145:10	4	;
EXPR_STATEMENT	145:12	145:25	3	cp [ 2 ] = cp [ 1 ] ;
EXPR	145:12	145:12	4	cp [ 2 ] = cp [ 1 ]
ASSIGN	145:12	145:20	5	cp [ 2 ] = cp [ 1 ]
LVAL	145:12	145:12	6	cp [ 2 ]
FIELD	145:12	145:16	7	cp [ 2 ]
LEAF_NODE	145:12	145:12	8	cp
LEAF_NODE	145:14	145:14	8	[
EXPR	145:15	145:15	8	2
FIELD	145:15	145:15	9	2
LEAF_NODE	145:15	145:15	10	2
LEAF_NODE	145:16	145:16	8	]
ASSIGN_OP	145:18	145:18	6	=
LEAF_NODE	145:18	145:18	7	=
RVAL	145:20	145:20	6	cp [ 1 ]
FIELD	145:20	145:24	7	cp [ 1 ]
LEAF_NODE	145:20	145:20	8	cp
LEAF_NODE	145:22	145:22	8	[
EXPR	145:23	145:23	8	1
FIELD	145:23	145:23	9	1
LEAF_NODE	145:23	145:23	10	1
LEAF_NODE	145:24	145:24	8	]
LEAF_NODE	145:25	145:25	4	;
EXPR_STATEMENT	145:27	145:36	3	cp [ 1 ] = t ;
EXPR	145:27	145:27	4	cp [ 1 ] = t
ASSIGN	145:27	145:35	5	cp [ 1 ] = t
LVAL	145:27	145:27	6	cp [ 1 ]
FIELD	145:27	145:31	7	cp [ 1 ]
LEAF_NODE	145:27	145:27	8	cp
LEAF_NODE	145:29	145:29	8	[
EXPR	145:30	145:30	8	1
FIELD	145:30	145:30	9	1
LEAF_NODE	145:30	145:30	10	1
LEAF_NODE	145:31	145:31	8	]
ASSIGN_OP	145:33	145:33	6	=
LEAF_NODE	145:33	145:33	7	=
RVAL	145:35	145:35	6	t
FIELD	145:35	145:35	7	t
LEAF_NODE	145:35	145:35	8	t
LEAF_NODE	145:36	145:36	4	;
LEAF_NODE	146:0	146:0	2	}
FUNCTION_DEF	150:0	163:0	1	
RETURN_TYPE	150:0	150:0	2	void
TYPE_NAME	150:0	150:0	3	void
LEAF_NODE	150:0	150:0	4	void
FUNCTION_NAME	151:0	151:0	2	TIFFSwabArrayOfFloat
LEAF_NODE	151:0	151:0	3	TIFFSwabArrayOfFloat
PARAMETER_LIST	151:20	151:51	2	( register float * fp , tmsize_t n )
LEAF_NODE	151:20	151:20	3	(
PARAMETER_DECL	151:21	151:37	3	register float * fp
TYPE	151:21	151:35	4	register float *
LEAF_NODE	151:21	151:21	5	register
TYPE_NAME	151:30	151:30	5	float
LEAF_NODE	151:30	151:30	6	float
POINTER	151:35	151:35	5	*
LEAF_NODE	151:35	151:35	6	*
NAME	151:37	151:37	4	fp
LEAF_NODE	151:37	151:37	5	fp
LEAF_NODE	151:39	151:39	3	,
PARAMETER_DECL	151:41	151:50	3	tmsize_t n
TYPE	151:41	151:41	4	tmsize_t
TYPE_NAME	151:41	151:41	5	tmsize_t
LEAF_NODE	151:41	151:41	6	tmsize_t
NAME	151:50	151:50	4	n
LEAF_NODE	151:50	151:50	5	n
LEAF_NODE	151:51	151:51	3	)
LEAF_NODE	152:0	152:0	2	{
STATEMENTS	153:1	157:1	2	
LEAF_NODE	153:1	153:1	3	register
SIMPLE_DECL	153:10	153:27	3	unsigned char * cp ;
VAR_DECL	153:10	153:25	4	unsigned char * cp
TYPE	153:10	153:24	5	unsigned char *
TYPE_NAME	153:10	153:19	6	unsigned char
LEAF_NODE	153:10	153:10	7	unsigned
LEAF_NODE	153:19	153:19	7	char
POINTER	153:24	153:24	6	*
LEAF_NODE	153:24	153:24	7	*
NAME	153:25	153:25	5	cp
LEAF_NODE	153:25	153:25	6	cp
LEAF_NODE	153:27	153:27	4	;
LEAF_NODE	154:1	154:1	3	register
SIMPLE_DECL	154:10	154:25	3	unsigned char t ;
VAR_DECL	154:10	154:24	4	unsigned char t
TYPE	154:10	154:10	5	unsigned char
TYPE_NAME	154:10	154:19	6	unsigned char
LEAF_NODE	154:10	154:10	7	unsigned
LEAF_NODE	154:19	154:19	7	char
NAME	154:24	154:24	5	t
LEAF_NODE	154:24	154:24	6	t
LEAF_NODE	154:25	154:25	4	;
EXPR_STATEMENT	155:1	155:25	3	assert ( sizeof ( float ) == 4 ) ;
EXPR	155:1	155:1	4	assert ( sizeof ( float ) == 4 )
FUNCTION_CALL	155:1	155:24	5	assert ( sizeof ( float ) == 4 )
CALLEE	155:1	155:1	6	assert
LEAF_NODE	155:1	155:1	7	assert
LEAF_NODE	155:7	155:7	6	(
ARGUMENT	155:8	155:23	6	sizeof ( float ) == 4
FUNCTION_CALL	155:8	155:20	7	sizeof ( float )
CALLEE	155:8	155:8	8	sizeof
LEAF_NODE	155:8	155:8	9	sizeof
LEAF_NODE	155:14	155:14	8	(
ARGUMENT	155:15	155:15	8	float
FIELD	155:15	155:15	9	float
LEAF_NODE	155:15	155:15	10	float
LEAF_NODE	155:20	155:20	8	)
EQ_OPERATOR	155:21	155:21	7	==
LEAF_NODE	155:21	155:21	8	==
FIELD	155:23	155:23	7	4
LEAF_NODE	155:23	155:23	8	4
LEAF_NODE	155:24	155:24	6	)
LEAF_NODE	155:25	155:25	4	;
ITERATION	157:1	157:17	3	
KEYWORD	157:1	157:1	4	while
LEAF_NODE	157:1	157:1	5	while
LEAF_NODE	157:7	157:7	4	(
CONDITION	157:8	157:8	4	n -- > 0
EXPR	157:8	157:14	5	n -- > 0
FIELD	157:8	157:9	6	n --
LEAF_NODE	157:8	157:8	7	n
LEAF_NODE	157:9	157:9	7	--
REL_OPERATOR	157:12	157:12	6	>
LEAF_NODE	157:12	157:12	7	>
FIELD	157:14	157:14	6	0
LEAF_NODE	157:14	157:14	7	0
LEAF_NODE	157:15	157:15	4	)
STATEMENTS	157:17	162:1	4	
LEAF_NODE	157:17	157:17	5	{
STATEMENTS	158:2	161:2	5	
EXPR_STATEMENT	158:2	158:26	6	cp = ( unsigned char * ) fp ;
EXPR	158:2	158:2	7	cp = ( unsigned char * ) fp
ASSIGN	158:2	158:7	8	cp = ( unsigned char * ) fp
LVAL	158:2	158:2	9	cp
FIELD	158:2	158:2	10	cp
LEAF_NODE	158:2	158:2	11	cp
ASSIGN_OP	158:5	158:5	9	=
LEAF_NODE	158:5	158:5	10	=
RVAL	158:7	158:24	9	( unsigned char * ) fp
LEAF_NODE	158:7	158:7	10	(
TYPE_NAME	158:8	158:17	10	unsigned char
LEAF_NODE	158:8	158:8	11	unsigned
LEAF_NODE	158:17	158:17	11	char
LEAF_NODE	158:22	158:22	10	*
LEAF_NODE	158:23	158:23	10	)
FIELD	158:24	158:24	10	fp
LEAF_NODE	158:24	158:24	11	fp
LEAF_NODE	158:26	158:26	7	;
EXPR_STATEMENT	159:2	159:11	6	t = cp [ 3 ] ;
EXPR	159:2	159:2	7	t = cp [ 3 ]
ASSIGN	159:2	159:6	8	t = cp [ 3 ]
LVAL	159:2	159:2	9	t
FIELD	159:2	159:2	10	t
LEAF_NODE	159:2	159:2	11	t
ASSIGN_OP	159:4	159:4	9	=
LEAF_NODE	159:4	159:4	10	=
RVAL	159:6	159:6	9	cp [ 3 ]
FIELD	159:6	159:10	10	cp [ 3 ]
LEAF_NODE	159:6	159:6	11	cp
LEAF_NODE	159:8	159:8	11	[
EXPR	159:9	159:9	11	3
FIELD	159:9	159:9	12	3
LEAF_NODE	159:9	159:9	13	3
LEAF_NODE	159:10	159:10	11	]
LEAF_NODE	159:11	159:11	7	;
EXPR_STATEMENT	159:13	159:26	6	cp [ 3 ] = cp [ 0 ] ;
EXPR	159:13	159:13	7	cp [ 3 ] = cp [ 0 ]
ASSIGN	159:13	159:21	8	cp [ 3 ] = cp [ 0 ]
LVAL	159:13	159:13	9	cp [ 3 ]
FIELD	159:13	159:17	10	cp [ 3 ]
LEAF_NODE	159:13	159:13	11	cp
LEAF_NODE	159:15	159:15	11	[
EXPR	159:16	159:16	11	3
FIELD	159:16	159:16	12	3
LEAF_NODE	159:16	159:16	13	3
LEAF_NODE	159:17	159:17	11	]
ASSIGN_OP	159:19	159:19	9	=
LEAF_NODE	159:19	159:19	10	=
RVAL	159:21	159:21	9	cp [ 0 ]
FIELD	159:21	159:25	10	cp [ 0 ]
LEAF_NODE	159:21	159:21	11	cp
LEAF_NODE	159:23	159:23	11	[
EXPR	159:24	159:24	11	0
FIELD	159:24	159:24	12	0
LEAF_NODE	159:24	159:24	13	0
LEAF_NODE	159:25	159:25	11	]
LEAF_NODE	159:26	159:26	7	;
EXPR_STATEMENT	159:28	159:37	6	cp [ 0 ] = t ;
EXPR	159:28	159:28	7	cp [ 0 ] = t
ASSIGN	159:28	159:36	8	cp [ 0 ] = t
LVAL	159:28	159:28	9	cp [ 0 ]
FIELD	159:28	159:32	10	cp [ 0 ]
LEAF_NODE	159:28	159:28	11	cp
LEAF_NODE	159:30	159:30	11	[
EXPR	159:31	159:31	11	0
FIELD	159:31	159:31	12	0
LEAF_NODE	159:31	159:31	13	0
LEAF_NODE	159:32	159:32	11	]
ASSIGN_OP	159:34	159:34	9	=
LEAF_NODE	159:34	159:34	10	=
RVAL	159:36	159:36	9	t
FIELD	159:36	159:36	10	t
LEAF_NODE	159:36	159:36	11	t
LEAF_NODE	159:37	159:37	7	;
EXPR_STATEMENT	160:2	160:11	6	t = cp [ 2 ] ;
EXPR	160:2	160:2	7	t = cp [ 2 ]
ASSIGN	160:2	160:6	8	t = cp [ 2 ]
LVAL	160:2	160:2	9	t
FIELD	160:2	160:2	10	t
LEAF_NODE	160:2	160:2	11	t
ASSIGN_OP	160:4	160:4	9	=
LEAF_NODE	160:4	160:4	10	=
RVAL	160:6	160:6	9	cp [ 2 ]
FIELD	160:6	160:10	10	cp [ 2 ]
LEAF_NODE	160:6	160:6	11	cp
LEAF_NODE	160:8	160:8	11	[
EXPR	160:9	160:9	11	2
FIELD	160:9	160:9	12	2
LEAF_NODE	160:9	160:9	13	2
LEAF_NODE	160:10	160:10	11	]
LEAF_NODE	160:11	160:11	7	;
EXPR_STATEMENT	160:13	160:26	6	cp [ 2 ] = cp [ 1 ] ;
EXPR	160:13	160:13	7	cp [ 2 ] = cp [ 1 ]
ASSIGN	160:13	160:21	8	cp [ 2 ] = cp [ 1 ]
LVAL	160:13	160:13	9	cp [ 2 ]
FIELD	160:13	160:17	10	cp [ 2 ]
LEAF_NODE	160:13	160:13	11	cp
LEAF_NODE	160:15	160:15	11	[
EXPR	160:16	160:16	11	2
FIELD	160:16	160:16	12	2
LEAF_NODE	160:16	160:16	13	2
LEAF_NODE	160:17	160:17	11	]
ASSIGN_OP	160:19	160:19	9	=
LEAF_NODE	160:19	160:19	10	=
RVAL	160:21	160:21	9	cp [ 1 ]
FIELD	160:21	160:25	10	cp [ 1 ]
LEAF_NODE	160:21	160:21	11	cp
LEAF_NODE	160:23	160:23	11	[
EXPR	160:24	160:24	11	1
FIELD	160:24	160:24	12	1
LEAF_NODE	160:24	160:24	13	1
LEAF_NODE	160:25	160:25	11	]
LEAF_NODE	160:26	160:26	7	;
EXPR_STATEMENT	160:28	160:37	6	cp [ 1 ] = t ;
EXPR	160:28	160:28	7	cp [ 1 ] = t
ASSIGN	160:28	160:36	8	cp [ 1 ] = t
LVAL	160:28	160:28	9	cp [ 1 ]
FIELD	160:28	160:32	10	cp [ 1 ]
LEAF_NODE	160:28	160:28	11	cp
LEAF_NODE	160:30	160:30	11	[
EXPR	160:31	160:31	11	1
FIELD	160:31	160:31	12	1
LEAF_NODE	160:31	160:31	13	1
LEAF_NODE	160:32	160:32	11	]
ASSIGN_OP	160:34	160:34	9	=
LEAF_NODE	160:34	160:34	10	=
RVAL	160:36	160:36	9	t
FIELD	160:36	160:36	10	t
LEAF_NODE	160:36	160:36	11	t
LEAF_NODE	160:37	160:37	7	;
EXPR_STATEMENT	161:2	161:6	6	fp ++ ;
EXPR	161:2	161:2	7	fp ++
FIELD	161:2	161:4	8	fp ++
LEAF_NODE	161:2	161:2	9	fp
LEAF_NODE	161:4	161:4	9	++
LEAF_NODE	161:6	161:6	7	;
LEAF_NODE	162:1	162:1	5	}
LEAF_NODE	163:0	163:0	2	}
FUNCTION_DEF	167:0	177:0	1	
RETURN_TYPE	167:0	167:0	2	void
TYPE_NAME	167:0	167:0	3	void
LEAF_NODE	167:0	167:0	4	void
FUNCTION_NAME	168:0	168:0	2	TIFFSwabDouble
LEAF_NODE	168:0	168:0	3	TIFFSwabDouble
PARAMETER_LIST	168:14	168:25	2	( double * dp )
LEAF_NODE	168:14	168:14	3	(
PARAMETER_DECL	168:15	168:23	3	double * dp
TYPE	168:15	168:22	4	double *
TYPE_NAME	168:15	168:15	5	double
LEAF_NODE	168:15	168:15	6	double
POINTER	168:22	168:22	5	*
LEAF_NODE	168:22	168:22	6	*
NAME	168:23	168:23	4	dp
LEAF_NODE	168:23	168:23	5	dp
LEAF_NODE	168:25	168:25	3	)
LEAF_NODE	169:0	169:0	2	{
STATEMENTS	170:1	176:27	2	
LEAF_NODE	170:1	170:1	3	register
SIMPLE_DECL	170:10	170:49	3	unsigned char * cp ; cp = ( unsigned char * ) dp ;
VAR_DECL	170:10	170:25	4	unsigned char * cp ; cp = ( unsigned char * ) dp
TYPE	170:10	170:23	5	unsigned char *
TYPE_NAME	170:10	170:19	6	unsigned char
LEAF_NODE	170:10	170:10	7	unsigned
LEAF_NODE	170:19	170:19	7	char
POINTER	170:23	170:23	6	*
LEAF_NODE	170:23	170:23	7	*
NAME	170:25	170:25	5	cp
LEAF_NODE	170:25	170:25	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	170:25	170:25	5	cp = ( unsigned char * ) dp
ASSIGN	170:25	170:30	6	cp = ( unsigned char * ) dp
LVAL	170:25	170:25	7	cp
NAME	170:25	170:25	8	cp
LEAF_NODE	170:25	170:25	9	cp
ASSIGN_OP	170:28	170:28	7	=
LEAF_NODE	170:28	170:28	8	=
RVAL	170:30	170:47	7	( unsigned char * ) dp
LEAF_NODE	170:30	170:30	8	(
TYPE_NAME	170:31	170:40	8	unsigned char
LEAF_NODE	170:31	170:31	9	unsigned
LEAF_NODE	170:40	170:40	9	char
LEAF_NODE	170:44	170:44	8	*
LEAF_NODE	170:45	170:45	8	)
FIELD	170:47	170:47	8	dp
LEAF_NODE	170:47	170:47	9	dp
LEAF_NODE	170:49	170:49	4	;
SIMPLE_DECL	171:1	171:16	3	unsigned char t ;
VAR_DECL	171:1	171:15	4	unsigned char t
TYPE	171:1	171:1	5	unsigned char
TYPE_NAME	171:1	171:10	6	unsigned char
LEAF_NODE	171:1	171:1	7	unsigned
LEAF_NODE	171:10	171:10	7	char
NAME	171:15	171:15	5	t
LEAF_NODE	171:15	171:15	6	t
LEAF_NODE	171:16	171:16	4	;
EXPR_STATEMENT	172:1	172:26	3	assert ( sizeof ( double ) == 8 ) ;
EXPR	172:1	172:1	4	assert ( sizeof ( double ) == 8 )
FUNCTION_CALL	172:1	172:25	5	assert ( sizeof ( double ) == 8 )
CALLEE	172:1	172:1	6	assert
LEAF_NODE	172:1	172:1	7	assert
LEAF_NODE	172:7	172:7	6	(
ARGUMENT	172:8	172:24	6	sizeof ( double ) == 8
FUNCTION_CALL	172:8	172:21	7	sizeof ( double )
CALLEE	172:8	172:8	8	sizeof
LEAF_NODE	172:8	172:8	9	sizeof
LEAF_NODE	172:14	172:14	8	(
ARGUMENT	172:15	172:15	8	double
FIELD	172:15	172:15	9	double
LEAF_NODE	172:15	172:15	10	double
LEAF_NODE	172:21	172:21	8	)
EQ_OPERATOR	172:22	172:22	7	==
LEAF_NODE	172:22	172:22	8	==
FIELD	172:24	172:24	7	8
LEAF_NODE	172:24	172:24	8	8
LEAF_NODE	172:25	172:25	6	)
LEAF_NODE	172:26	172:26	4	;
EXPR_STATEMENT	173:1	173:10	3	t = cp [ 7 ] ;
EXPR	173:1	173:1	4	t = cp [ 7 ]
ASSIGN	173:1	173:5	5	t = cp [ 7 ]
LVAL	173:1	173:1	6	t
FIELD	173:1	173:1	7	t
LEAF_NODE	173:1	173:1	8	t
ASSIGN_OP	173:3	173:3	6	=
LEAF_NODE	173:3	173:3	7	=
RVAL	173:5	173:5	6	cp [ 7 ]
FIELD	173:5	173:9	7	cp [ 7 ]
LEAF_NODE	173:5	173:5	8	cp
LEAF_NODE	173:7	173:7	8	[
EXPR	173:8	173:8	8	7
FIELD	173:8	173:8	9	7
LEAF_NODE	173:8	173:8	10	7
LEAF_NODE	173:9	173:9	8	]
LEAF_NODE	173:10	173:10	4	;
EXPR_STATEMENT	173:12	173:25	3	cp [ 7 ] = cp [ 0 ] ;
EXPR	173:12	173:12	4	cp [ 7 ] = cp [ 0 ]
ASSIGN	173:12	173:20	5	cp [ 7 ] = cp [ 0 ]
LVAL	173:12	173:12	6	cp [ 7 ]
FIELD	173:12	173:16	7	cp [ 7 ]
LEAF_NODE	173:12	173:12	8	cp
LEAF_NODE	173:14	173:14	8	[
EXPR	173:15	173:15	8	7
FIELD	173:15	173:15	9	7
LEAF_NODE	173:15	173:15	10	7
LEAF_NODE	173:16	173:16	8	]
ASSIGN_OP	173:18	173:18	6	=
LEAF_NODE	173:18	173:18	7	=
RVAL	173:20	173:20	6	cp [ 0 ]
FIELD	173:20	173:24	7	cp [ 0 ]
LEAF_NODE	173:20	173:20	8	cp
LEAF_NODE	173:22	173:22	8	[
EXPR	173:23	173:23	8	0
FIELD	173:23	173:23	9	0
LEAF_NODE	173:23	173:23	10	0
LEAF_NODE	173:24	173:24	8	]
LEAF_NODE	173:25	173:25	4	;
EXPR_STATEMENT	173:27	173:36	3	cp [ 0 ] = t ;
EXPR	173:27	173:27	4	cp [ 0 ] = t
ASSIGN	173:27	173:35	5	cp [ 0 ] = t
LVAL	173:27	173:27	6	cp [ 0 ]
FIELD	173:27	173:31	7	cp [ 0 ]
LEAF_NODE	173:27	173:27	8	cp
LEAF_NODE	173:29	173:29	8	[
EXPR	173:30	173:30	8	0
FIELD	173:30	173:30	9	0
LEAF_NODE	173:30	173:30	10	0
LEAF_NODE	173:31	173:31	8	]
ASSIGN_OP	173:33	173:33	6	=
LEAF_NODE	173:33	173:33	7	=
RVAL	173:35	173:35	6	t
FIELD	173:35	173:35	7	t
LEAF_NODE	173:35	173:35	8	t
LEAF_NODE	173:36	173:36	4	;
EXPR_STATEMENT	174:1	174:10	3	t = cp [ 6 ] ;
EXPR	174:1	174:1	4	t = cp [ 6 ]
ASSIGN	174:1	174:5	5	t = cp [ 6 ]
LVAL	174:1	174:1	6	t
FIELD	174:1	174:1	7	t
LEAF_NODE	174:1	174:1	8	t
ASSIGN_OP	174:3	174:3	6	=
LEAF_NODE	174:3	174:3	7	=
RVAL	174:5	174:5	6	cp [ 6 ]
FIELD	174:5	174:9	7	cp [ 6 ]
LEAF_NODE	174:5	174:5	8	cp
LEAF_NODE	174:7	174:7	8	[
EXPR	174:8	174:8	8	6
FIELD	174:8	174:8	9	6
LEAF_NODE	174:8	174:8	10	6
LEAF_NODE	174:9	174:9	8	]
LEAF_NODE	174:10	174:10	4	;
EXPR_STATEMENT	174:12	174:25	3	cp [ 6 ] = cp [ 1 ] ;
EXPR	174:12	174:12	4	cp [ 6 ] = cp [ 1 ]
ASSIGN	174:12	174:20	5	cp [ 6 ] = cp [ 1 ]
LVAL	174:12	174:12	6	cp [ 6 ]
FIELD	174:12	174:16	7	cp [ 6 ]
LEAF_NODE	174:12	174:12	8	cp
LEAF_NODE	174:14	174:14	8	[
EXPR	174:15	174:15	8	6
FIELD	174:15	174:15	9	6
LEAF_NODE	174:15	174:15	10	6
LEAF_NODE	174:16	174:16	8	]
ASSIGN_OP	174:18	174:18	6	=
LEAF_NODE	174:18	174:18	7	=
RVAL	174:20	174:20	6	cp [ 1 ]
FIELD	174:20	174:24	7	cp [ 1 ]
LEAF_NODE	174:20	174:20	8	cp
LEAF_NODE	174:22	174:22	8	[
EXPR	174:23	174:23	8	1
FIELD	174:23	174:23	9	1
LEAF_NODE	174:23	174:23	10	1
LEAF_NODE	174:24	174:24	8	]
LEAF_NODE	174:25	174:25	4	;
EXPR_STATEMENT	174:27	174:36	3	cp [ 1 ] = t ;
EXPR	174:27	174:27	4	cp [ 1 ] = t
ASSIGN	174:27	174:35	5	cp [ 1 ] = t
LVAL	174:27	174:27	6	cp [ 1 ]
FIELD	174:27	174:31	7	cp [ 1 ]
LEAF_NODE	174:27	174:27	8	cp
LEAF_NODE	174:29	174:29	8	[
EXPR	174:30	174:30	8	1
FIELD	174:30	174:30	9	1
LEAF_NODE	174:30	174:30	10	1
LEAF_NODE	174:31	174:31	8	]
ASSIGN_OP	174:33	174:33	6	=
LEAF_NODE	174:33	174:33	7	=
RVAL	174:35	174:35	6	t
FIELD	174:35	174:35	7	t
LEAF_NODE	174:35	174:35	8	t
LEAF_NODE	174:36	174:36	4	;
EXPR_STATEMENT	175:1	175:10	3	t = cp [ 5 ] ;
EXPR	175:1	175:1	4	t = cp [ 5 ]
ASSIGN	175:1	175:5	5	t = cp [ 5 ]
LVAL	175:1	175:1	6	t
FIELD	175:1	175:1	7	t
LEAF_NODE	175:1	175:1	8	t
ASSIGN_OP	175:3	175:3	6	=
LEAF_NODE	175:3	175:3	7	=
RVAL	175:5	175:5	6	cp [ 5 ]
FIELD	175:5	175:9	7	cp [ 5 ]
LEAF_NODE	175:5	175:5	8	cp
LEAF_NODE	175:7	175:7	8	[
EXPR	175:8	175:8	8	5
FIELD	175:8	175:8	9	5
LEAF_NODE	175:8	175:8	10	5
LEAF_NODE	175:9	175:9	8	]
LEAF_NODE	175:10	175:10	4	;
EXPR_STATEMENT	175:12	175:25	3	cp [ 5 ] = cp [ 2 ] ;
EXPR	175:12	175:12	4	cp [ 5 ] = cp [ 2 ]
ASSIGN	175:12	175:20	5	cp [ 5 ] = cp [ 2 ]
LVAL	175:12	175:12	6	cp [ 5 ]
FIELD	175:12	175:16	7	cp [ 5 ]
LEAF_NODE	175:12	175:12	8	cp
LEAF_NODE	175:14	175:14	8	[
EXPR	175:15	175:15	8	5
FIELD	175:15	175:15	9	5
LEAF_NODE	175:15	175:15	10	5
LEAF_NODE	175:16	175:16	8	]
ASSIGN_OP	175:18	175:18	6	=
LEAF_NODE	175:18	175:18	7	=
RVAL	175:20	175:20	6	cp [ 2 ]
FIELD	175:20	175:24	7	cp [ 2 ]
LEAF_NODE	175:20	175:20	8	cp
LEAF_NODE	175:22	175:22	8	[
EXPR	175:23	175:23	8	2
FIELD	175:23	175:23	9	2
LEAF_NODE	175:23	175:23	10	2
LEAF_NODE	175:24	175:24	8	]
LEAF_NODE	175:25	175:25	4	;
EXPR_STATEMENT	175:27	175:36	3	cp [ 2 ] = t ;
EXPR	175:27	175:27	4	cp [ 2 ] = t
ASSIGN	175:27	175:35	5	cp [ 2 ] = t
LVAL	175:27	175:27	6	cp [ 2 ]
FIELD	175:27	175:31	7	cp [ 2 ]
LEAF_NODE	175:27	175:27	8	cp
LEAF_NODE	175:29	175:29	8	[
EXPR	175:30	175:30	8	2
FIELD	175:30	175:30	9	2
LEAF_NODE	175:30	175:30	10	2
LEAF_NODE	175:31	175:31	8	]
ASSIGN_OP	175:33	175:33	6	=
LEAF_NODE	175:33	175:33	7	=
RVAL	175:35	175:35	6	t
FIELD	175:35	175:35	7	t
LEAF_NODE	175:35	175:35	8	t
LEAF_NODE	175:36	175:36	4	;
EXPR_STATEMENT	176:1	176:10	3	t = cp [ 4 ] ;
EXPR	176:1	176:1	4	t = cp [ 4 ]
ASSIGN	176:1	176:5	5	t = cp [ 4 ]
LVAL	176:1	176:1	6	t
FIELD	176:1	176:1	7	t
LEAF_NODE	176:1	176:1	8	t
ASSIGN_OP	176:3	176:3	6	=
LEAF_NODE	176:3	176:3	7	=
RVAL	176:5	176:5	6	cp [ 4 ]
FIELD	176:5	176:9	7	cp [ 4 ]
LEAF_NODE	176:5	176:5	8	cp
LEAF_NODE	176:7	176:7	8	[
EXPR	176:8	176:8	8	4
FIELD	176:8	176:8	9	4
LEAF_NODE	176:8	176:8	10	4
LEAF_NODE	176:9	176:9	8	]
LEAF_NODE	176:10	176:10	4	;
EXPR_STATEMENT	176:12	176:25	3	cp [ 4 ] = cp [ 3 ] ;
EXPR	176:12	176:12	4	cp [ 4 ] = cp [ 3 ]
ASSIGN	176:12	176:20	5	cp [ 4 ] = cp [ 3 ]
LVAL	176:12	176:12	6	cp [ 4 ]
FIELD	176:12	176:16	7	cp [ 4 ]
LEAF_NODE	176:12	176:12	8	cp
LEAF_NODE	176:14	176:14	8	[
EXPR	176:15	176:15	8	4
FIELD	176:15	176:15	9	4
LEAF_NODE	176:15	176:15	10	4
LEAF_NODE	176:16	176:16	8	]
ASSIGN_OP	176:18	176:18	6	=
LEAF_NODE	176:18	176:18	7	=
RVAL	176:20	176:20	6	cp [ 3 ]
FIELD	176:20	176:24	7	cp [ 3 ]
LEAF_NODE	176:20	176:20	8	cp
LEAF_NODE	176:22	176:22	8	[
EXPR	176:23	176:23	8	3
FIELD	176:23	176:23	9	3
LEAF_NODE	176:23	176:23	10	3
LEAF_NODE	176:24	176:24	8	]
LEAF_NODE	176:25	176:25	4	;
EXPR_STATEMENT	176:27	176:36	3	cp [ 3 ] = t ;
EXPR	176:27	176:27	4	cp [ 3 ] = t
ASSIGN	176:27	176:35	5	cp [ 3 ] = t
LVAL	176:27	176:27	6	cp [ 3 ]
FIELD	176:27	176:31	7	cp [ 3 ]
LEAF_NODE	176:27	176:27	8	cp
LEAF_NODE	176:29	176:29	8	[
EXPR	176:30	176:30	8	3
FIELD	176:30	176:30	9	3
LEAF_NODE	176:30	176:30	10	3
LEAF_NODE	176:31	176:31	8	]
ASSIGN_OP	176:33	176:33	6	=
LEAF_NODE	176:33	176:33	7	=
RVAL	176:35	176:35	6	t
FIELD	176:35	176:35	7	t
LEAF_NODE	176:35	176:35	8	t
LEAF_NODE	176:36	176:36	4	;
LEAF_NODE	177:0	177:0	2	}
FUNCTION_DEF	181:0	196:0	1	
RETURN_TYPE	181:0	181:0	2	void
TYPE_NAME	181:0	181:0	3	void
LEAF_NODE	181:0	181:0	4	void
FUNCTION_NAME	182:0	182:0	2	TIFFSwabArrayOfDouble
LEAF_NODE	182:0	182:0	3	TIFFSwabArrayOfDouble
PARAMETER_LIST	182:21	182:44	2	( double * dp , tmsize_t n )
LEAF_NODE	182:21	182:21	3	(
PARAMETER_DECL	182:22	182:30	3	double * dp
TYPE	182:22	182:28	4	double *
TYPE_NAME	182:22	182:22	5	double
LEAF_NODE	182:22	182:22	6	double
POINTER	182:28	182:28	5	*
LEAF_NODE	182:28	182:28	6	*
NAME	182:30	182:30	4	dp
LEAF_NODE	182:30	182:30	5	dp
LEAF_NODE	182:32	182:32	3	,
PARAMETER_DECL	182:34	182:43	3	tmsize_t n
TYPE	182:34	182:34	4	tmsize_t
TYPE_NAME	182:34	182:34	5	tmsize_t
LEAF_NODE	182:34	182:34	6	tmsize_t
NAME	182:43	182:43	4	n
LEAF_NODE	182:43	182:43	5	n
LEAF_NODE	182:44	182:44	3	)
LEAF_NODE	183:0	183:0	2	{
STATEMENTS	184:1	188:1	2	
LEAF_NODE	184:1	184:1	3	register
SIMPLE_DECL	184:10	184:27	3	unsigned char * cp ;
VAR_DECL	184:10	184:25	4	unsigned char * cp
TYPE	184:10	184:24	5	unsigned char *
TYPE_NAME	184:10	184:19	6	unsigned char
LEAF_NODE	184:10	184:10	7	unsigned
LEAF_NODE	184:19	184:19	7	char
POINTER	184:24	184:24	6	*
LEAF_NODE	184:24	184:24	7	*
NAME	184:25	184:25	5	cp
LEAF_NODE	184:25	184:25	6	cp
LEAF_NODE	184:27	184:27	4	;
LEAF_NODE	185:1	185:1	3	register
SIMPLE_DECL	185:10	185:25	3	unsigned char t ;
VAR_DECL	185:10	185:24	4	unsigned char t
TYPE	185:10	185:10	5	unsigned char
TYPE_NAME	185:10	185:19	6	unsigned char
LEAF_NODE	185:10	185:10	7	unsigned
LEAF_NODE	185:19	185:19	7	char
NAME	185:24	185:24	5	t
LEAF_NODE	185:24	185:24	6	t
LEAF_NODE	185:25	185:25	4	;
EXPR_STATEMENT	186:1	186:26	3	assert ( sizeof ( double ) == 8 ) ;
EXPR	186:1	186:1	4	assert ( sizeof ( double ) == 8 )
FUNCTION_CALL	186:1	186:25	5	assert ( sizeof ( double ) == 8 )
CALLEE	186:1	186:1	6	assert
LEAF_NODE	186:1	186:1	7	assert
LEAF_NODE	186:7	186:7	6	(
ARGUMENT	186:8	186:24	6	sizeof ( double ) == 8
FUNCTION_CALL	186:8	186:21	7	sizeof ( double )
CALLEE	186:8	186:8	8	sizeof
LEAF_NODE	186:8	186:8	9	sizeof
LEAF_NODE	186:14	186:14	8	(
ARGUMENT	186:15	186:15	8	double
FIELD	186:15	186:15	9	double
LEAF_NODE	186:15	186:15	10	double
LEAF_NODE	186:21	186:21	8	)
EQ_OPERATOR	186:22	186:22	7	==
LEAF_NODE	186:22	186:22	8	==
FIELD	186:24	186:24	7	8
LEAF_NODE	186:24	186:24	8	8
LEAF_NODE	186:25	186:25	6	)
LEAF_NODE	186:26	186:26	4	;
ITERATION	188:1	188:17	3	
KEYWORD	188:1	188:1	4	while
LEAF_NODE	188:1	188:1	5	while
LEAF_NODE	188:7	188:7	4	(
CONDITION	188:8	188:8	4	n -- > 0
EXPR	188:8	188:14	5	n -- > 0
FIELD	188:8	188:9	6	n --
LEAF_NODE	188:8	188:8	7	n
LEAF_NODE	188:9	188:9	7	--
REL_OPERATOR	188:12	188:12	6	>
LEAF_NODE	188:12	188:12	7	>
FIELD	188:14	188:14	6	0
LEAF_NODE	188:14	188:14	7	0
LEAF_NODE	188:15	188:15	4	)
STATEMENTS	188:17	195:1	4	
LEAF_NODE	188:17	188:17	5	{
STATEMENTS	189:2	194:2	5	
EXPR_STATEMENT	189:2	189:26	6	cp = ( unsigned char * ) dp ;
EXPR	189:2	189:2	7	cp = ( unsigned char * ) dp
ASSIGN	189:2	189:7	8	cp = ( unsigned char * ) dp
LVAL	189:2	189:2	9	cp
FIELD	189:2	189:2	10	cp
LEAF_NODE	189:2	189:2	11	cp
ASSIGN_OP	189:5	189:5	9	=
LEAF_NODE	189:5	189:5	10	=
RVAL	189:7	189:24	9	( unsigned char * ) dp
LEAF_NODE	189:7	189:7	10	(
TYPE_NAME	189:8	189:17	10	unsigned char
LEAF_NODE	189:8	189:8	11	unsigned
LEAF_NODE	189:17	189:17	11	char
LEAF_NODE	189:22	189:22	10	*
LEAF_NODE	189:23	189:23	10	)
FIELD	189:24	189:24	10	dp
LEAF_NODE	189:24	189:24	11	dp
LEAF_NODE	189:26	189:26	7	;
EXPR_STATEMENT	190:2	190:11	6	t = cp [ 7 ] ;
EXPR	190:2	190:2	7	t = cp [ 7 ]
ASSIGN	190:2	190:6	8	t = cp [ 7 ]
LVAL	190:2	190:2	9	t
FIELD	190:2	190:2	10	t
LEAF_NODE	190:2	190:2	11	t
ASSIGN_OP	190:4	190:4	9	=
LEAF_NODE	190:4	190:4	10	=
RVAL	190:6	190:6	9	cp [ 7 ]
FIELD	190:6	190:10	10	cp [ 7 ]
LEAF_NODE	190:6	190:6	11	cp
LEAF_NODE	190:8	190:8	11	[
EXPR	190:9	190:9	11	7
FIELD	190:9	190:9	12	7
LEAF_NODE	190:9	190:9	13	7
LEAF_NODE	190:10	190:10	11	]
LEAF_NODE	190:11	190:11	7	;
EXPR_STATEMENT	190:13	190:26	6	cp [ 7 ] = cp [ 0 ] ;
EXPR	190:13	190:13	7	cp [ 7 ] = cp [ 0 ]
ASSIGN	190:13	190:21	8	cp [ 7 ] = cp [ 0 ]
LVAL	190:13	190:13	9	cp [ 7 ]
FIELD	190:13	190:17	10	cp [ 7 ]
LEAF_NODE	190:13	190:13	11	cp
LEAF_NODE	190:15	190:15	11	[
EXPR	190:16	190:16	11	7
FIELD	190:16	190:16	12	7
LEAF_NODE	190:16	190:16	13	7
LEAF_NODE	190:17	190:17	11	]
ASSIGN_OP	190:19	190:19	9	=
LEAF_NODE	190:19	190:19	10	=
RVAL	190:21	190:21	9	cp [ 0 ]
FIELD	190:21	190:25	10	cp [ 0 ]
LEAF_NODE	190:21	190:21	11	cp
LEAF_NODE	190:23	190:23	11	[
EXPR	190:24	190:24	11	0
FIELD	190:24	190:24	12	0
LEAF_NODE	190:24	190:24	13	0
LEAF_NODE	190:25	190:25	11	]
LEAF_NODE	190:26	190:26	7	;
EXPR_STATEMENT	190:28	190:37	6	cp [ 0 ] = t ;
EXPR	190:28	190:28	7	cp [ 0 ] = t
ASSIGN	190:28	190:36	8	cp [ 0 ] = t
LVAL	190:28	190:28	9	cp [ 0 ]
FIELD	190:28	190:32	10	cp [ 0 ]
LEAF_NODE	190:28	190:28	11	cp
LEAF_NODE	190:30	190:30	11	[
EXPR	190:31	190:31	11	0
FIELD	190:31	190:31	12	0
LEAF_NODE	190:31	190:31	13	0
LEAF_NODE	190:32	190:32	11	]
ASSIGN_OP	190:34	190:34	9	=
LEAF_NODE	190:34	190:34	10	=
RVAL	190:36	190:36	9	t
FIELD	190:36	190:36	10	t
LEAF_NODE	190:36	190:36	11	t
LEAF_NODE	190:37	190:37	7	;
EXPR_STATEMENT	191:2	191:11	6	t = cp [ 6 ] ;
EXPR	191:2	191:2	7	t = cp [ 6 ]
ASSIGN	191:2	191:6	8	t = cp [ 6 ]
LVAL	191:2	191:2	9	t
FIELD	191:2	191:2	10	t
LEAF_NODE	191:2	191:2	11	t
ASSIGN_OP	191:4	191:4	9	=
LEAF_NODE	191:4	191:4	10	=
RVAL	191:6	191:6	9	cp [ 6 ]
FIELD	191:6	191:10	10	cp [ 6 ]
LEAF_NODE	191:6	191:6	11	cp
LEAF_NODE	191:8	191:8	11	[
EXPR	191:9	191:9	11	6
FIELD	191:9	191:9	12	6
LEAF_NODE	191:9	191:9	13	6
LEAF_NODE	191:10	191:10	11	]
LEAF_NODE	191:11	191:11	7	;
EXPR_STATEMENT	191:13	191:26	6	cp [ 6 ] = cp [ 1 ] ;
EXPR	191:13	191:13	7	cp [ 6 ] = cp [ 1 ]
ASSIGN	191:13	191:21	8	cp [ 6 ] = cp [ 1 ]
LVAL	191:13	191:13	9	cp [ 6 ]
FIELD	191:13	191:17	10	cp [ 6 ]
LEAF_NODE	191:13	191:13	11	cp
LEAF_NODE	191:15	191:15	11	[
EXPR	191:16	191:16	11	6
FIELD	191:16	191:16	12	6
LEAF_NODE	191:16	191:16	13	6
LEAF_NODE	191:17	191:17	11	]
ASSIGN_OP	191:19	191:19	9	=
LEAF_NODE	191:19	191:19	10	=
RVAL	191:21	191:21	9	cp [ 1 ]
FIELD	191:21	191:25	10	cp [ 1 ]
LEAF_NODE	191:21	191:21	11	cp
LEAF_NODE	191:23	191:23	11	[
EXPR	191:24	191:24	11	1
FIELD	191:24	191:24	12	1
LEAF_NODE	191:24	191:24	13	1
LEAF_NODE	191:25	191:25	11	]
LEAF_NODE	191:26	191:26	7	;
EXPR_STATEMENT	191:28	191:37	6	cp [ 1 ] = t ;
EXPR	191:28	191:28	7	cp [ 1 ] = t
ASSIGN	191:28	191:36	8	cp [ 1 ] = t
LVAL	191:28	191:28	9	cp [ 1 ]
FIELD	191:28	191:32	10	cp [ 1 ]
LEAF_NODE	191:28	191:28	11	cp
LEAF_NODE	191:30	191:30	11	[
EXPR	191:31	191:31	11	1
FIELD	191:31	191:31	12	1
LEAF_NODE	191:31	191:31	13	1
LEAF_NODE	191:32	191:32	11	]
ASSIGN_OP	191:34	191:34	9	=
LEAF_NODE	191:34	191:34	10	=
RVAL	191:36	191:36	9	t
FIELD	191:36	191:36	10	t
LEAF_NODE	191:36	191:36	11	t
LEAF_NODE	191:37	191:37	7	;
EXPR_STATEMENT	192:2	192:11	6	t = cp [ 5 ] ;
EXPR	192:2	192:2	7	t = cp [ 5 ]
ASSIGN	192:2	192:6	8	t = cp [ 5 ]
LVAL	192:2	192:2	9	t
FIELD	192:2	192:2	10	t
LEAF_NODE	192:2	192:2	11	t
ASSIGN_OP	192:4	192:4	9	=
LEAF_NODE	192:4	192:4	10	=
RVAL	192:6	192:6	9	cp [ 5 ]
FIELD	192:6	192:10	10	cp [ 5 ]
LEAF_NODE	192:6	192:6	11	cp
LEAF_NODE	192:8	192:8	11	[
EXPR	192:9	192:9	11	5
FIELD	192:9	192:9	12	5
LEAF_NODE	192:9	192:9	13	5
LEAF_NODE	192:10	192:10	11	]
LEAF_NODE	192:11	192:11	7	;
EXPR_STATEMENT	192:13	192:26	6	cp [ 5 ] = cp [ 2 ] ;
EXPR	192:13	192:13	7	cp [ 5 ] = cp [ 2 ]
ASSIGN	192:13	192:21	8	cp [ 5 ] = cp [ 2 ]
LVAL	192:13	192:13	9	cp [ 5 ]
FIELD	192:13	192:17	10	cp [ 5 ]
LEAF_NODE	192:13	192:13	11	cp
LEAF_NODE	192:15	192:15	11	[
EXPR	192:16	192:16	11	5
FIELD	192:16	192:16	12	5
LEAF_NODE	192:16	192:16	13	5
LEAF_NODE	192:17	192:17	11	]
ASSIGN_OP	192:19	192:19	9	=
LEAF_NODE	192:19	192:19	10	=
RVAL	192:21	192:21	9	cp [ 2 ]
FIELD	192:21	192:25	10	cp [ 2 ]
LEAF_NODE	192:21	192:21	11	cp
LEAF_NODE	192:23	192:23	11	[
EXPR	192:24	192:24	11	2
FIELD	192:24	192:24	12	2
LEAF_NODE	192:24	192:24	13	2
LEAF_NODE	192:25	192:25	11	]
LEAF_NODE	192:26	192:26	7	;
EXPR_STATEMENT	192:28	192:37	6	cp [ 2 ] = t ;
EXPR	192:28	192:28	7	cp [ 2 ] = t
ASSIGN	192:28	192:36	8	cp [ 2 ] = t
LVAL	192:28	192:28	9	cp [ 2 ]
FIELD	192:28	192:32	10	cp [ 2 ]
LEAF_NODE	192:28	192:28	11	cp
LEAF_NODE	192:30	192:30	11	[
EXPR	192:31	192:31	11	2
FIELD	192:31	192:31	12	2
LEAF_NODE	192:31	192:31	13	2
LEAF_NODE	192:32	192:32	11	]
ASSIGN_OP	192:34	192:34	9	=
LEAF_NODE	192:34	192:34	10	=
RVAL	192:36	192:36	9	t
FIELD	192:36	192:36	10	t
LEAF_NODE	192:36	192:36	11	t
LEAF_NODE	192:37	192:37	7	;
EXPR_STATEMENT	193:2	193:11	6	t = cp [ 4 ] ;
EXPR	193:2	193:2	7	t = cp [ 4 ]
ASSIGN	193:2	193:6	8	t = cp [ 4 ]
LVAL	193:2	193:2	9	t
FIELD	193:2	193:2	10	t
LEAF_NODE	193:2	193:2	11	t
ASSIGN_OP	193:4	193:4	9	=
LEAF_NODE	193:4	193:4	10	=
RVAL	193:6	193:6	9	cp [ 4 ]
FIELD	193:6	193:10	10	cp [ 4 ]
LEAF_NODE	193:6	193:6	11	cp
LEAF_NODE	193:8	193:8	11	[
EXPR	193:9	193:9	11	4
FIELD	193:9	193:9	12	4
LEAF_NODE	193:9	193:9	13	4
LEAF_NODE	193:10	193:10	11	]
LEAF_NODE	193:11	193:11	7	;
EXPR_STATEMENT	193:13	193:26	6	cp [ 4 ] = cp [ 3 ] ;
EXPR	193:13	193:13	7	cp [ 4 ] = cp [ 3 ]
ASSIGN	193:13	193:21	8	cp [ 4 ] = cp [ 3 ]
LVAL	193:13	193:13	9	cp [ 4 ]
FIELD	193:13	193:17	10	cp [ 4 ]
LEAF_NODE	193:13	193:13	11	cp
LEAF_NODE	193:15	193:15	11	[
EXPR	193:16	193:16	11	4
FIELD	193:16	193:16	12	4
LEAF_NODE	193:16	193:16	13	4
LEAF_NODE	193:17	193:17	11	]
ASSIGN_OP	193:19	193:19	9	=
LEAF_NODE	193:19	193:19	10	=
RVAL	193:21	193:21	9	cp [ 3 ]
FIELD	193:21	193:25	10	cp [ 3 ]
LEAF_NODE	193:21	193:21	11	cp
LEAF_NODE	193:23	193:23	11	[
EXPR	193:24	193:24	11	3
FIELD	193:24	193:24	12	3
LEAF_NODE	193:24	193:24	13	3
LEAF_NODE	193:25	193:25	11	]
LEAF_NODE	193:26	193:26	7	;
EXPR_STATEMENT	193:28	193:37	6	cp [ 3 ] = t ;
EXPR	193:28	193:28	7	cp [ 3 ] = t
ASSIGN	193:28	193:36	8	cp [ 3 ] = t
LVAL	193:28	193:28	9	cp [ 3 ]
FIELD	193:28	193:32	10	cp [ 3 ]
LEAF_NODE	193:28	193:28	11	cp
LEAF_NODE	193:30	193:30	11	[
EXPR	193:31	193:31	11	3
FIELD	193:31	193:31	12	3
LEAF_NODE	193:31	193:31	13	3
LEAF_NODE	193:32	193:32	11	]
ASSIGN_OP	193:34	193:34	9	=
LEAF_NODE	193:34	193:34	10	=
RVAL	193:36	193:36	9	t
FIELD	193:36	193:36	10	t
LEAF_NODE	193:36	193:36	11	t
LEAF_NODE	193:37	193:37	7	;
EXPR_STATEMENT	194:2	194:6	6	dp ++ ;
EXPR	194:2	194:2	7	dp ++
FIELD	194:2	194:4	8	dp ++
LEAF_NODE	194:2	194:2	9	dp
LEAF_NODE	194:4	194:4	9	++
LEAF_NODE	194:6	194:6	7	;
LEAF_NODE	195:1	195:1	5	}
LEAF_NODE	196:0	196:0	2	}
FUNCTION_DEF	277:0	281:0	1	
RETURN_TYPE	277:0	277:19	2	const unsigned char *
TYPE_NAME	277:0	277:15	3	const unsigned char
LEAF_NODE	277:0	277:0	4	const
LEAF_NODE	277:6	277:6	4	unsigned
LEAF_NODE	277:15	277:15	4	char
LEAF_NODE	277:19	277:19	3	*
FUNCTION_NAME	278:0	278:0	2	TIFFGetBitRevTable
LEAF_NODE	278:0	278:0	3	TIFFGetBitRevTable
PARAMETER_LIST	278:18	278:31	2	( int reversed )
LEAF_NODE	278:18	278:18	3	(
PARAMETER_DECL	278:19	278:23	3	int reversed
TYPE	278:19	278:19	4	int
TYPE_NAME	278:19	278:19	5	int
LEAF_NODE	278:19	278:19	6	int
NAME	278:23	278:23	4	reversed
LEAF_NODE	278:23	278:23	5	reversed
LEAF_NODE	278:31	278:31	3	)
LEAF_NODE	279:0	279:0	2	{
STATEMENTS	280:1	280:1	2	
JUMP_STATEMENT	280:1	280:56	3	return ( reversed ? TIFFBitRevTable : TIFFNoBitRevTable ) ;
KEYWORD	280:1	280:1	4	return
LEAF_NODE	280:1	280:1	5	return
DESTINATION	280:8	280:8	4	( reversed ? TIFFBitRevTable : TIFFNoBitRevTable )
EXPR	280:8	280:55	5	( reversed ? TIFFBitRevTable : TIFFNoBitRevTable )
LEAF_NODE	280:8	280:8	6	(
COND_EXPR	280:9	280:38	6	reversed ? TIFFBitRevTable : TIFFNoBitRevTable
CONDITION	280:9	280:9	7	reversed
FIELD	280:9	280:9	8	reversed
LEAF_NODE	280:9	280:9	9	reversed
LEAF_NODE	280:18	280:18	7	?
EXPR	280:20	280:20	7	TIFFBitRevTable
FIELD	280:20	280:20	8	TIFFBitRevTable
LEAF_NODE	280:20	280:20	9	TIFFBitRevTable
LEAF_NODE	280:36	280:36	7	:
FIELD	280:38	280:38	7	TIFFNoBitRevTable
LEAF_NODE	280:38	280:38	8	TIFFNoBitRevTable
LEAF_NODE	280:55	280:55	6	)
LEAF_NODE	280:56	280:56	4	;
LEAF_NODE	281:0	281:0	2	}
FUNCTION_DEF	283:0	301:0	1	
RETURN_TYPE	283:0	283:0	2	void
TYPE_NAME	283:0	283:0	3	void
LEAF_NODE	283:0	283:0	4	void
FUNCTION_NAME	284:0	284:0	2	TIFFReverseBits
LEAF_NODE	284:0	284:0	3	TIFFReverseBits
PARAMETER_LIST	284:15	284:37	2	( uint8 * cp , tmsize_t n )
LEAF_NODE	284:15	284:15	3	(
PARAMETER_DECL	284:16	284:23	3	uint8 * cp
TYPE	284:16	284:21	4	uint8 *
TYPE_NAME	284:16	284:16	5	uint8
LEAF_NODE	284:16	284:16	6	uint8
POINTER	284:21	284:21	5	*
LEAF_NODE	284:21	284:21	6	*
NAME	284:23	284:23	4	cp
LEAF_NODE	284:23	284:23	5	cp
LEAF_NODE	284:25	284:25	3	,
PARAMETER_DECL	284:27	284:36	3	tmsize_t n
TYPE	284:27	284:27	4	tmsize_t
TYPE_NAME	284:27	284:27	5	tmsize_t
LEAF_NODE	284:27	284:27	6	tmsize_t
NAME	284:36	284:36	4	n
LEAF_NODE	284:36	284:36	5	n
LEAF_NODE	284:37	284:37	3	)
LEAF_NODE	285:0	285:0	2	{
STATEMENTS	286:1	297:1	2	
ITERATION	286:1	286:23	3	
KEYWORD	286:1	286:1	4	for
LEAF_NODE	286:1	286:1	5	for
LEAF_NODE	286:5	286:5	4	(
FOR_INIT	286:6	286:6	4	;
LEAF_NODE	286:6	286:6	5	;
CONDITION	286:8	286:8	4	n > 8
EXPR	286:8	286:12	5	n > 8
FIELD	286:8	286:8	6	n
LEAF_NODE	286:8	286:8	7	n
REL_OPERATOR	286:10	286:10	6	>
LEAF_NODE	286:10	286:10	7	>
FIELD	286:12	286:12	6	8
LEAF_NODE	286:12	286:12	7	8
LEAF_NODE	286:13	286:13	4	;
FOR_EXPR	286:15	286:15	4	n -= 8
EXPR	286:15	286:15	5	n -= 8
ASSIGN	286:15	286:20	6	n -= 8
LVAL	286:15	286:15	7	n
FIELD	286:15	286:15	8	n
LEAF_NODE	286:15	286:15	9	n
ASSIGN_OP	286:17	286:17	7	-=
LEAF_NODE	286:17	286:17	8	-=
RVAL	286:20	286:20	7	8
FIELD	286:20	286:20	8	8
LEAF_NODE	286:20	286:20	9	8
LEAF_NODE	286:21	286:21	4	)
STATEMENTS	286:23	296:1	4	
LEAF_NODE	286:23	286:23	5	{
STATEMENTS	287:2	295:2	5	
EXPR_STATEMENT	287:2	287:32	6	cp [ 0 ] = TIFFBitRevTable [ cp [ 0 ] ] ;
EXPR	287:2	287:2	7	cp [ 0 ] = TIFFBitRevTable [ cp [ 0 ] ]
ASSIGN	287:2	287:10	8	cp [ 0 ] = TIFFBitRevTable [ cp [ 0 ] ]
LVAL	287:2	287:2	9	cp [ 0 ]
FIELD	287:2	287:6	10	cp [ 0 ]
LEAF_NODE	287:2	287:2	11	cp
LEAF_NODE	287:4	287:4	11	[
EXPR	287:5	287:5	11	0
FIELD	287:5	287:5	12	0
LEAF_NODE	287:5	287:5	13	0
LEAF_NODE	287:6	287:6	11	]
ASSIGN_OP	287:8	287:8	9	=
LEAF_NODE	287:8	287:8	10	=
RVAL	287:10	287:10	9	TIFFBitRevTable [ cp [ 0 ] ]
FIELD	287:10	287:31	10	TIFFBitRevTable [ cp [ 0 ] ]
LEAF_NODE	287:10	287:10	11	TIFFBitRevTable
LEAF_NODE	287:25	287:25	11	[
EXPR	287:26	287:26	11	cp [ 0 ]
FIELD	287:26	287:30	12	cp [ 0 ]
LEAF_NODE	287:26	287:26	13	cp
LEAF_NODE	287:28	287:28	13	[
EXPR	287:29	287:29	13	0
FIELD	287:29	287:29	14	0
LEAF_NODE	287:29	287:29	15	0
LEAF_NODE	287:30	287:30	13	]
LEAF_NODE	287:31	287:31	11	]
LEAF_NODE	287:32	287:32	7	;
EXPR_STATEMENT	288:2	288:32	6	cp [ 1 ] = TIFFBitRevTable [ cp [ 1 ] ] ;
EXPR	288:2	288:2	7	cp [ 1 ] = TIFFBitRevTable [ cp [ 1 ] ]
ASSIGN	288:2	288:10	8	cp [ 1 ] = TIFFBitRevTable [ cp [ 1 ] ]
LVAL	288:2	288:2	9	cp [ 1 ]
FIELD	288:2	288:6	10	cp [ 1 ]
LEAF_NODE	288:2	288:2	11	cp
LEAF_NODE	288:4	288:4	11	[
EXPR	288:5	288:5	11	1
FIELD	288:5	288:5	12	1
LEAF_NODE	288:5	288:5	13	1
LEAF_NODE	288:6	288:6	11	]
ASSIGN_OP	288:8	288:8	9	=
LEAF_NODE	288:8	288:8	10	=
RVAL	288:10	288:10	9	TIFFBitRevTable [ cp [ 1 ] ]
FIELD	288:10	288:31	10	TIFFBitRevTable [ cp [ 1 ] ]
LEAF_NODE	288:10	288:10	11	TIFFBitRevTable
LEAF_NODE	288:25	288:25	11	[
EXPR	288:26	288:26	11	cp [ 1 ]
FIELD	288:26	288:30	12	cp [ 1 ]
LEAF_NODE	288:26	288:26	13	cp
LEAF_NODE	288:28	288:28	13	[
EXPR	288:29	288:29	13	1
FIELD	288:29	288:29	14	1
LEAF_NODE	288:29	288:29	15	1
LEAF_NODE	288:30	288:30	13	]
LEAF_NODE	288:31	288:31	11	]
LEAF_NODE	288:32	288:32	7	;
EXPR_STATEMENT	289:2	289:32	6	cp [ 2 ] = TIFFBitRevTable [ cp [ 2 ] ] ;
EXPR	289:2	289:2	7	cp [ 2 ] = TIFFBitRevTable [ cp [ 2 ] ]
ASSIGN	289:2	289:10	8	cp [ 2 ] = TIFFBitRevTable [ cp [ 2 ] ]
LVAL	289:2	289:2	9	cp [ 2 ]
FIELD	289:2	289:6	10	cp [ 2 ]
LEAF_NODE	289:2	289:2	11	cp
LEAF_NODE	289:4	289:4	11	[
EXPR	289:5	289:5	11	2
FIELD	289:5	289:5	12	2
LEAF_NODE	289:5	289:5	13	2
LEAF_NODE	289:6	289:6	11	]
ASSIGN_OP	289:8	289:8	9	=
LEAF_NODE	289:8	289:8	10	=
RVAL	289:10	289:10	9	TIFFBitRevTable [ cp [ 2 ] ]
FIELD	289:10	289:31	10	TIFFBitRevTable [ cp [ 2 ] ]
LEAF_NODE	289:10	289:10	11	TIFFBitRevTable
LEAF_NODE	289:25	289:25	11	[
EXPR	289:26	289:26	11	cp [ 2 ]
FIELD	289:26	289:30	12	cp [ 2 ]
LEAF_NODE	289:26	289:26	13	cp
LEAF_NODE	289:28	289:28	13	[
EXPR	289:29	289:29	13	2
FIELD	289:29	289:29	14	2
LEAF_NODE	289:29	289:29	15	2
LEAF_NODE	289:30	289:30	13	]
LEAF_NODE	289:31	289:31	11	]
LEAF_NODE	289:32	289:32	7	;
EXPR_STATEMENT	290:2	290:32	6	cp [ 3 ] = TIFFBitRevTable [ cp [ 3 ] ] ;
EXPR	290:2	290:2	7	cp [ 3 ] = TIFFBitRevTable [ cp [ 3 ] ]
ASSIGN	290:2	290:10	8	cp [ 3 ] = TIFFBitRevTable [ cp [ 3 ] ]
LVAL	290:2	290:2	9	cp [ 3 ]
FIELD	290:2	290:6	10	cp [ 3 ]
LEAF_NODE	290:2	290:2	11	cp
LEAF_NODE	290:4	290:4	11	[
EXPR	290:5	290:5	11	3
FIELD	290:5	290:5	12	3
LEAF_NODE	290:5	290:5	13	3
LEAF_NODE	290:6	290:6	11	]
ASSIGN_OP	290:8	290:8	9	=
LEAF_NODE	290:8	290:8	10	=
RVAL	290:10	290:10	9	TIFFBitRevTable [ cp [ 3 ] ]
FIELD	290:10	290:31	10	TIFFBitRevTable [ cp [ 3 ] ]
LEAF_NODE	290:10	290:10	11	TIFFBitRevTable
LEAF_NODE	290:25	290:25	11	[
EXPR	290:26	290:26	11	cp [ 3 ]
FIELD	290:26	290:30	12	cp [ 3 ]
LEAF_NODE	290:26	290:26	13	cp
LEAF_NODE	290:28	290:28	13	[
EXPR	290:29	290:29	13	3
FIELD	290:29	290:29	14	3
LEAF_NODE	290:29	290:29	15	3
LEAF_NODE	290:30	290:30	13	]
LEAF_NODE	290:31	290:31	11	]
LEAF_NODE	290:32	290:32	7	;
EXPR_STATEMENT	291:2	291:32	6	cp [ 4 ] = TIFFBitRevTable [ cp [ 4 ] ] ;
EXPR	291:2	291:2	7	cp [ 4 ] = TIFFBitRevTable [ cp [ 4 ] ]
ASSIGN	291:2	291:10	8	cp [ 4 ] = TIFFBitRevTable [ cp [ 4 ] ]
LVAL	291:2	291:2	9	cp [ 4 ]
FIELD	291:2	291:6	10	cp [ 4 ]
LEAF_NODE	291:2	291:2	11	cp
LEAF_NODE	291:4	291:4	11	[
EXPR	291:5	291:5	11	4
FIELD	291:5	291:5	12	4
LEAF_NODE	291:5	291:5	13	4
LEAF_NODE	291:6	291:6	11	]
ASSIGN_OP	291:8	291:8	9	=
LEAF_NODE	291:8	291:8	10	=
RVAL	291:10	291:10	9	TIFFBitRevTable [ cp [ 4 ] ]
FIELD	291:10	291:31	10	TIFFBitRevTable [ cp [ 4 ] ]
LEAF_NODE	291:10	291:10	11	TIFFBitRevTable
LEAF_NODE	291:25	291:25	11	[
EXPR	291:26	291:26	11	cp [ 4 ]
FIELD	291:26	291:30	12	cp [ 4 ]
LEAF_NODE	291:26	291:26	13	cp
LEAF_NODE	291:28	291:28	13	[
EXPR	291:29	291:29	13	4
FIELD	291:29	291:29	14	4
LEAF_NODE	291:29	291:29	15	4
LEAF_NODE	291:30	291:30	13	]
LEAF_NODE	291:31	291:31	11	]
LEAF_NODE	291:32	291:32	7	;
EXPR_STATEMENT	292:2	292:32	6	cp [ 5 ] = TIFFBitRevTable [ cp [ 5 ] ] ;
EXPR	292:2	292:2	7	cp [ 5 ] = TIFFBitRevTable [ cp [ 5 ] ]
ASSIGN	292:2	292:10	8	cp [ 5 ] = TIFFBitRevTable [ cp [ 5 ] ]
LVAL	292:2	292:2	9	cp [ 5 ]
FIELD	292:2	292:6	10	cp [ 5 ]
LEAF_NODE	292:2	292:2	11	cp
LEAF_NODE	292:4	292:4	11	[
EXPR	292:5	292:5	11	5
FIELD	292:5	292:5	12	5
LEAF_NODE	292:5	292:5	13	5
LEAF_NODE	292:6	292:6	11	]
ASSIGN_OP	292:8	292:8	9	=
LEAF_NODE	292:8	292:8	10	=
RVAL	292:10	292:10	9	TIFFBitRevTable [ cp [ 5 ] ]
FIELD	292:10	292:31	10	TIFFBitRevTable [ cp [ 5 ] ]
LEAF_NODE	292:10	292:10	11	TIFFBitRevTable
LEAF_NODE	292:25	292:25	11	[
EXPR	292:26	292:26	11	cp [ 5 ]
FIELD	292:26	292:30	12	cp [ 5 ]
LEAF_NODE	292:26	292:26	13	cp
LEAF_NODE	292:28	292:28	13	[
EXPR	292:29	292:29	13	5
FIELD	292:29	292:29	14	5
LEAF_NODE	292:29	292:29	15	5
LEAF_NODE	292:30	292:30	13	]
LEAF_NODE	292:31	292:31	11	]
LEAF_NODE	292:32	292:32	7	;
EXPR_STATEMENT	293:2	293:32	6	cp [ 6 ] = TIFFBitRevTable [ cp [ 6 ] ] ;
EXPR	293:2	293:2	7	cp [ 6 ] = TIFFBitRevTable [ cp [ 6 ] ]
ASSIGN	293:2	293:10	8	cp [ 6 ] = TIFFBitRevTable [ cp [ 6 ] ]
LVAL	293:2	293:2	9	cp [ 6 ]
FIELD	293:2	293:6	10	cp [ 6 ]
LEAF_NODE	293:2	293:2	11	cp
LEAF_NODE	293:4	293:4	11	[
EXPR	293:5	293:5	11	6
FIELD	293:5	293:5	12	6
LEAF_NODE	293:5	293:5	13	6
LEAF_NODE	293:6	293:6	11	]
ASSIGN_OP	293:8	293:8	9	=
LEAF_NODE	293:8	293:8	10	=
RVAL	293:10	293:10	9	TIFFBitRevTable [ cp [ 6 ] ]
FIELD	293:10	293:31	10	TIFFBitRevTable [ cp [ 6 ] ]
LEAF_NODE	293:10	293:10	11	TIFFBitRevTable
LEAF_NODE	293:25	293:25	11	[
EXPR	293:26	293:26	11	cp [ 6 ]
FIELD	293:26	293:30	12	cp [ 6 ]
LEAF_NODE	293:26	293:26	13	cp
LEAF_NODE	293:28	293:28	13	[
EXPR	293:29	293:29	13	6
FIELD	293:29	293:29	14	6
LEAF_NODE	293:29	293:29	15	6
LEAF_NODE	293:30	293:30	13	]
LEAF_NODE	293:31	293:31	11	]
LEAF_NODE	293:32	293:32	7	;
EXPR_STATEMENT	294:2	294:32	6	cp [ 7 ] = TIFFBitRevTable [ cp [ 7 ] ] ;
EXPR	294:2	294:2	7	cp [ 7 ] = TIFFBitRevTable [ cp [ 7 ] ]
ASSIGN	294:2	294:10	8	cp [ 7 ] = TIFFBitRevTable [ cp [ 7 ] ]
LVAL	294:2	294:2	9	cp [ 7 ]
FIELD	294:2	294:6	10	cp [ 7 ]
LEAF_NODE	294:2	294:2	11	cp
LEAF_NODE	294:4	294:4	11	[
EXPR	294:5	294:5	11	7
FIELD	294:5	294:5	12	7
LEAF_NODE	294:5	294:5	13	7
LEAF_NODE	294:6	294:6	11	]
ASSIGN_OP	294:8	294:8	9	=
LEAF_NODE	294:8	294:8	10	=
RVAL	294:10	294:10	9	TIFFBitRevTable [ cp [ 7 ] ]
FIELD	294:10	294:31	10	TIFFBitRevTable [ cp [ 7 ] ]
LEAF_NODE	294:10	294:10	11	TIFFBitRevTable
LEAF_NODE	294:25	294:25	11	[
EXPR	294:26	294:26	11	cp [ 7 ]
FIELD	294:26	294:30	12	cp [ 7 ]
LEAF_NODE	294:26	294:26	13	cp
LEAF_NODE	294:28	294:28	13	[
EXPR	294:29	294:29	13	7
FIELD	294:29	294:29	14	7
LEAF_NODE	294:29	294:29	15	7
LEAF_NODE	294:30	294:30	13	]
LEAF_NODE	294:31	294:31	11	]
LEAF_NODE	294:32	294:32	7	;
EXPR_STATEMENT	295:2	295:9	6	cp += 8 ;
EXPR	295:2	295:2	7	cp += 8
ASSIGN	295:2	295:8	8	cp += 8
LVAL	295:2	295:2	9	cp
FIELD	295:2	295:2	10	cp
LEAF_NODE	295:2	295:2	11	cp
ASSIGN_OP	295:5	295:5	9	+=
LEAF_NODE	295:5	295:5	10	+=
RVAL	295:8	295:8	9	8
FIELD	295:8	295:8	10	8
LEAF_NODE	295:8	295:8	11	8
LEAF_NODE	295:9	295:9	7	;
LEAF_NODE	296:1	296:1	5	}
ITERATION	297:1	297:17	3	
KEYWORD	297:1	297:1	4	while
LEAF_NODE	297:1	297:1	5	while
LEAF_NODE	297:7	297:7	4	(
CONDITION	297:8	297:8	4	n -- > 0
EXPR	297:8	297:14	5	n -- > 0
FIELD	297:8	297:9	6	n --
LEAF_NODE	297:8	297:8	7	n
LEAF_NODE	297:9	297:9	7	--
REL_OPERATOR	297:12	297:12	6	>
LEAF_NODE	297:12	297:12	7	>
FIELD	297:14	297:14	6	0
LEAF_NODE	297:14	297:14	7	0
LEAF_NODE	297:15	297:15	4	)
STATEMENTS	297:17	300:1	4	
LEAF_NODE	297:17	297:17	5	{
STATEMENTS	298:2	299:2	5	
EXPR_STATEMENT	298:2	298:28	6	* cp = TIFFBitRevTable [ * cp ] ;
EXPR	298:2	298:2	7	* cp = TIFFBitRevTable [ * cp ]
ASSIGN	298:2	298:8	8	* cp = TIFFBitRevTable [ * cp ]
LVAL	298:2	298:2	9	* cp
UNARY_EXPR	298:2	298:3	10	* cp
UNARY_OPERATOR	298:2	298:2	11	*
LEAF_NODE	298:2	298:2	12	*
FIELD	298:3	298:3	11	cp
LEAF_NODE	298:3	298:3	12	cp
ASSIGN_OP	298:6	298:6	9	=
LEAF_NODE	298:6	298:6	10	=
RVAL	298:8	298:8	9	TIFFBitRevTable [ * cp ]
FIELD	298:8	298:27	10	TIFFBitRevTable [ * cp ]
LEAF_NODE	298:8	298:8	11	TIFFBitRevTable
LEAF_NODE	298:23	298:23	11	[
EXPR	298:24	298:24	11	* cp
UNARY_EXPR	298:24	298:25	12	* cp
UNARY_OPERATOR	298:24	298:24	13	*
LEAF_NODE	298:24	298:24	14	*
FIELD	298:25	298:25	13	cp
LEAF_NODE	298:25	298:25	14	cp
LEAF_NODE	298:27	298:27	11	]
LEAF_NODE	298:28	298:28	7	;
EXPR_STATEMENT	299:2	299:6	6	cp ++ ;
EXPR	299:2	299:2	7	cp ++
FIELD	299:2	299:4	8	cp ++
LEAF_NODE	299:2	299:2	9	cp
LEAF_NODE	299:4	299:4	9	++
LEAF_NODE	299:6	299:6	7	;
LEAF_NODE	300:1	300:1	5	}
LEAF_NODE	301:0	301:0	2	}
