SOURCE_FILE	35:0	343:0	0	
FUNCTION_DEF	35:0	53:0	1	
RETURN_TYPE	35:0	35:0	2	uint32
TYPE_NAME	35:0	35:0	3	uint32
LEAF_NODE	35:0	35:0	4	uint32
FUNCTION_NAME	36:0	36:0	2	TIFFComputeStrip
LEAF_NODE	36:0	36:0	3	TIFFComputeStrip
PARAMETER_LIST	36:16	36:53	2	( TIFF * tif , uint32 row , uint16 sample )
LEAF_NODE	36:16	36:16	3	(
PARAMETER_DECL	36:17	36:23	3	TIFF * tif
TYPE	36:17	36:21	4	TIFF *
TYPE_NAME	36:17	36:17	5	TIFF
LEAF_NODE	36:17	36:17	6	TIFF
POINTER	36:21	36:21	5	*
LEAF_NODE	36:21	36:21	6	*
NAME	36:23	36:23	4	tif
LEAF_NODE	36:23	36:23	5	tif
LEAF_NODE	36:26	36:26	3	,
PARAMETER_DECL	36:28	36:35	3	uint32 row
TYPE	36:28	36:28	4	uint32
TYPE_NAME	36:28	36:28	5	uint32
LEAF_NODE	36:28	36:28	6	uint32
NAME	36:35	36:35	4	row
LEAF_NODE	36:35	36:35	5	row
LEAF_NODE	36:38	36:38	3	,
PARAMETER_DECL	36:40	36:47	3	uint16 sample
TYPE	36:40	36:40	4	uint16
TYPE_NAME	36:40	36:40	5	uint16
LEAF_NODE	36:40	36:40	6	uint16
NAME	36:47	36:47	4	sample
LEAF_NODE	36:47	36:47	5	sample
LEAF_NODE	36:53	36:53	3	)
LEAF_NODE	37:0	37:0	2	{
STATEMENTS	38:1	52:15	2	
LEAF_NODE	38:1	38:1	3	static
SIMPLE_DECL	38:8	38:48	3	const char [ ] module ; module = "TIFFComputeStrip" ;
VAR_DECL	38:8	38:19	4	const char [ ] module ; module = "TIFFComputeStrip"
TYPE	38:8	38:25	5	const char [ ]
TYPE_NAME	38:8	38:14	6	const char
LEAF_NODE	38:8	38:8	7	const
LEAF_NODE	38:14	38:14	7	char
TYPE_SUFFIX	38:25	38:26	6	[ ]
LEAF_NODE	38:25	38:25	7	[
LEAF_NODE	38:26	38:26	7	]
NAME	38:19	38:19	5	module
LEAF_NODE	38:19	38:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	38:19	38:19	5	module = "TIFFComputeStrip"
ASSIGN	38:19	38:30	6	module = "TIFFComputeStrip"
LVAL	38:19	38:19	7	module
NAME	38:19	38:19	8	module
LEAF_NODE	38:19	38:19	9	module
ASSIGN_OP	38:28	38:28	7	=
LEAF_NODE	38:28	38:28	8	=
RVAL	38:30	38:30	7	"TIFFComputeStrip"
FIELD	38:30	38:30	8	"TIFFComputeStrip"
LEAF_NODE	38:30	38:30	9	"TIFFComputeStrip"
LEAF_NODE	38:48	38:48	4	;
SIMPLE_DECL	39:1	39:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	39:1	39:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	39:1	39:15	5	TIFFDirectory *
TYPE_NAME	39:1	39:1	6	TIFFDirectory
LEAF_NODE	39:1	39:1	7	TIFFDirectory
POINTER	39:15	39:15	6	*
LEAF_NODE	39:15	39:15	7	*
NAME	39:16	39:16	5	td
LEAF_NODE	39:16	39:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	39:16	39:16	5	td = & tif -> tif_dir
ASSIGN	39:16	39:21	6	td = & tif -> tif_dir
LVAL	39:16	39:16	7	td
NAME	39:16	39:16	8	td
LEAF_NODE	39:16	39:16	9	td
ASSIGN_OP	39:19	39:19	7	=
LEAF_NODE	39:19	39:19	8	=
RVAL	39:21	39:21	7	& tif -> tif_dir
UNARY_EXPR	39:21	39:22	8	& tif -> tif_dir
UNARY_OPERATOR	39:21	39:21	9	&
LEAF_NODE	39:21	39:21	10	&
FIELD	39:22	39:27	9	tif -> tif_dir
LEAF_NODE	39:22	39:22	10	tif
LEAF_NODE	39:25	39:25	10	->
LEAF_NODE	39:27	39:27	10	tif_dir
LEAF_NODE	39:34	39:34	4	;
SIMPLE_DECL	40:1	40:13	3	uint32 strip ;
VAR_DECL	40:1	40:8	4	uint32 strip
TYPE	40:1	40:1	5	uint32
TYPE_NAME	40:1	40:1	6	uint32
LEAF_NODE	40:1	40:1	7	uint32
NAME	40:8	40:8	5	strip
LEAF_NODE	40:8	40:8	6	strip
LEAF_NODE	40:13	40:13	4	;
EXPR_STATEMENT	42:1	42:34	3	strip = row / td -> td_rowsperstrip ;
EXPR	42:1	42:1	4	strip = row / td -> td_rowsperstrip
ASSIGN	42:1	42:9	5	strip = row / td -> td_rowsperstrip
LVAL	42:1	42:1	6	strip
FIELD	42:1	42:1	7	strip
LEAF_NODE	42:1	42:1	8	strip
ASSIGN_OP	42:7	42:7	6	=
LEAF_NODE	42:7	42:7	7	=
RVAL	42:9	42:15	6	row / td -> td_rowsperstrip
FIELD	42:9	42:9	7	row
LEAF_NODE	42:9	42:9	8	row
LEAF_NODE	42:13	42:13	7	/
FIELD	42:15	42:19	7	td -> td_rowsperstrip
LEAF_NODE	42:15	42:15	8	td
LEAF_NODE	42:17	42:17	8	->
LEAF_NODE	42:19	42:19	8	td_rowsperstrip
LEAF_NODE	42:34	42:34	4	;
SELECTION	43:1	43:51	3	
KEYWORD	43:1	43:1	4	if
LEAF_NODE	43:1	43:1	5	if
LEAF_NODE	43:4	43:4	4	(
CONDITION	43:5	43:5	4	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	43:5	43:28	5	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	43:5	43:9	6	td -> td_planarconfig
LEAF_NODE	43:5	43:5	7	td
LEAF_NODE	43:7	43:7	7	->
LEAF_NODE	43:9	43:9	7	td_planarconfig
EQ_OPERATOR	43:25	43:25	6	==
LEAF_NODE	43:25	43:25	7	==
FIELD	43:28	43:28	6	PLANARCONFIG_SEPARATE
LEAF_NODE	43:28	43:28	7	PLANARCONFIG_SEPARATE
LEAF_NODE	43:49	43:49	4	)
STATEMENTS	43:51	51:1	4	
LEAF_NODE	43:51	43:51	5	{
STATEMENTS	44:2	50:2	5	
SELECTION	44:2	44:40	6	
KEYWORD	44:2	44:2	7	if
LEAF_NODE	44:2	44:2	8	if
LEAF_NODE	44:5	44:5	7	(
CONDITION	44:6	44:6	7	sample >= td -> td_samplesperpixel
EXPR	44:6	44:16	8	sample >= td -> td_samplesperpixel
FIELD	44:6	44:6	9	sample
LEAF_NODE	44:6	44:6	10	sample
REL_OPERATOR	44:13	44:13	9	>=
LEAF_NODE	44:13	44:13	10	>=
FIELD	44:16	44:20	9	td -> td_samplesperpixel
LEAF_NODE	44:16	44:16	10	td
LEAF_NODE	44:18	44:18	10	->
LEAF_NODE	44:20	44:20	10	td_samplesperpixel
LEAF_NODE	44:38	44:38	7	)
STATEMENTS	44:40	49:2	7	
LEAF_NODE	44:40	44:40	8	{
STATEMENTS	45:3	48:3	8	
EXPR_STATEMENT	45:3	47:70	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Sample out of range, max %lu" , ( unsigned long ) sample , ( unsigned long ) td -> td_samplesperpixel ) ;
EXPR	45:3	45:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Sample out of range, max %lu" , ( unsigned long ) sample , ( unsigned long ) td -> td_samplesperpixel )
FUNCTION_CALL	45:3	47:69	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Sample out of range, max %lu" , ( unsigned long ) sample , ( unsigned long ) td -> td_samplesperpixel )
CALLEE	45:3	45:3	12	TIFFErrorExt
LEAF_NODE	45:3	45:3	13	TIFFErrorExt
LEAF_NODE	45:15	45:15	12	(
ARGUMENT	45:16	45:16	12	tif -> tif_clientdata
FIELD	45:16	45:21	13	tif -> tif_clientdata
LEAF_NODE	45:16	45:16	14	tif
LEAF_NODE	45:19	45:19	14	->
LEAF_NODE	45:21	45:21	14	tif_clientdata
LEAF_NODE	45:35	45:35	12	,
ARGUMENT	45:37	45:37	12	module
FIELD	45:37	45:37	13	module
LEAF_NODE	45:37	45:37	14	module
LEAF_NODE	45:43	45:43	12	,
ARGUMENT	46:7	46:7	12	"%lu: Sample out of range, max %lu"
FIELD	46:7	46:7	13	"%lu: Sample out of range, max %lu"
LEAF_NODE	46:7	46:7	14	"%lu: Sample out of range, max %lu"
LEAF_NODE	46:42	46:42	12	,
ARGUMENT	47:7	47:23	12	( unsigned long ) sample
LEAF_NODE	47:7	47:7	13	(
TYPE_NAME	47:8	47:17	13	unsigned long
LEAF_NODE	47:8	47:8	14	unsigned
LEAF_NODE	47:17	47:17	14	long
LEAF_NODE	47:21	47:21	13	)
FIELD	47:23	47:23	13	sample
LEAF_NODE	47:23	47:23	14	sample
LEAF_NODE	47:29	47:29	12	,
ARGUMENT	47:31	47:47	12	( unsigned long ) td -> td_samplesperpixel
LEAF_NODE	47:31	47:31	13	(
TYPE_NAME	47:32	47:41	13	unsigned long
LEAF_NODE	47:32	47:32	14	unsigned
LEAF_NODE	47:41	47:41	14	long
LEAF_NODE	47:45	47:45	13	)
FIELD	47:47	47:51	13	td -> td_samplesperpixel
LEAF_NODE	47:47	47:47	14	td
LEAF_NODE	47:49	47:49	14	->
LEAF_NODE	47:51	47:51	14	td_samplesperpixel
LEAF_NODE	47:69	47:69	12	)
LEAF_NODE	47:70	47:70	10	;
JUMP_STATEMENT	48:3	48:13	9	return ( 0 ) ;
KEYWORD	48:3	48:3	10	return
LEAF_NODE	48:3	48:3	11	return
DESTINATION	48:10	48:10	10	( 0 )
EXPR	48:10	48:12	11	( 0 )
LEAF_NODE	48:10	48:10	12	(
FIELD	48:11	48:11	12	0
LEAF_NODE	48:11	48:11	13	0
LEAF_NODE	48:12	48:12	12	)
LEAF_NODE	48:13	48:13	10	;
LEAF_NODE	49:2	49:2	8	}
EXPR_STATEMENT	50:2	50:47	6	strip += ( uint32 ) sample * td -> td_stripsperimage ;
EXPR	50:2	50:2	7	strip += ( uint32 ) sample * td -> td_stripsperimage
ASSIGN	50:2	50:11	8	strip += ( uint32 ) sample * td -> td_stripsperimage
LVAL	50:2	50:2	9	strip
FIELD	50:2	50:2	10	strip
LEAF_NODE	50:2	50:2	11	strip
ASSIGN_OP	50:8	50:8	9	+=
LEAF_NODE	50:8	50:8	10	+=
RVAL	50:11	50:26	9	( uint32 ) sample * td -> td_stripsperimage
LEAF_NODE	50:11	50:11	10	(
TYPE_NAME	50:12	50:12	10	uint32
LEAF_NODE	50:12	50:12	11	uint32
LEAF_NODE	50:18	50:18	10	)
FIELD	50:19	50:19	10	sample
LEAF_NODE	50:19	50:19	11	sample
LEAF_NODE	50:25	50:25	10	*
FIELD	50:26	50:30	10	td -> td_stripsperimage
LEAF_NODE	50:26	50:26	11	td
LEAF_NODE	50:28	50:28	11	->
LEAF_NODE	50:30	50:30	11	td_stripsperimage
LEAF_NODE	50:47	50:47	7	;
LEAF_NODE	51:1	51:1	5	}
LEAF_NODE	52:1	52:1	3	return
LEAF_NODE	52:8	52:8	3	(
LEAF_NODE	52:9	52:9	3	strip
LEAF_NODE	52:14	52:14	3	)
LEAF_NODE	52:15	52:15	3	;
LEAF_NODE	53:0	53:0	2	}
FUNCTION_DEF	58:0	70:0	1	
RETURN_TYPE	58:0	58:0	2	uint32
TYPE_NAME	58:0	58:0	3	uint32
LEAF_NODE	58:0	58:0	4	uint32
FUNCTION_NAME	59:0	59:0	2	TIFFNumberOfStrips
LEAF_NODE	59:0	59:0	3	TIFFNumberOfStrips
PARAMETER_LIST	59:18	59:28	2	( TIFF * tif )
LEAF_NODE	59:18	59:18	3	(
PARAMETER_DECL	59:19	59:25	3	TIFF * tif
TYPE	59:19	59:23	4	TIFF *
TYPE_NAME	59:19	59:19	5	TIFF
LEAF_NODE	59:19	59:19	6	TIFF
POINTER	59:23	59:23	5	*
LEAF_NODE	59:23	59:23	6	*
NAME	59:25	59:25	4	tif
LEAF_NODE	59:25	59:25	5	tif
LEAF_NODE	59:28	59:28	3	)
LEAF_NODE	60:0	60:0	2	{
STATEMENTS	61:1	69:17	2	
SIMPLE_DECL	61:1	61:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	61:1	61:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	61:1	61:15	5	TIFFDirectory *
TYPE_NAME	61:1	61:1	6	TIFFDirectory
LEAF_NODE	61:1	61:1	7	TIFFDirectory
POINTER	61:15	61:15	6	*
LEAF_NODE	61:15	61:15	7	*
NAME	61:16	61:16	5	td
LEAF_NODE	61:16	61:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	61:16	61:16	5	td = & tif -> tif_dir
ASSIGN	61:16	61:21	6	td = & tif -> tif_dir
LVAL	61:16	61:16	7	td
NAME	61:16	61:16	8	td
LEAF_NODE	61:16	61:16	9	td
ASSIGN_OP	61:19	61:19	7	=
LEAF_NODE	61:19	61:19	8	=
RVAL	61:21	61:21	7	& tif -> tif_dir
UNARY_EXPR	61:21	61:22	8	& tif -> tif_dir
UNARY_OPERATOR	61:21	61:21	9	&
LEAF_NODE	61:21	61:21	10	&
FIELD	61:22	61:27	9	tif -> tif_dir
LEAF_NODE	61:22	61:22	10	tif
LEAF_NODE	61:25	61:25	10	->
LEAF_NODE	61:27	61:27	10	tif_dir
LEAF_NODE	61:34	61:34	4	;
SIMPLE_DECL	62:1	62:15	3	uint32 nstrips ;
VAR_DECL	62:1	62:8	4	uint32 nstrips
TYPE	62:1	62:1	5	uint32
TYPE_NAME	62:1	62:1	6	uint32
LEAF_NODE	62:1	62:1	7	uint32
NAME	62:8	62:8	5	nstrips
LEAF_NODE	62:8	62:8	6	nstrips
LEAF_NODE	62:15	62:15	4	;
EXPR_STATEMENT	64:1	65:62	3	nstrips = ( td -> td_rowsperstrip == ( uint32 ) - 1 ? 1 : TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip ) ) ;
EXPR	64:1	64:1	4	nstrips = ( td -> td_rowsperstrip == ( uint32 ) - 1 ? 1 : TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip ) )
ASSIGN	64:1	64:11	5	nstrips = ( td -> td_rowsperstrip == ( uint32 ) - 1 ? 1 : TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip ) )
LVAL	64:1	64:1	6	nstrips
FIELD	64:1	64:1	7	nstrips
LEAF_NODE	64:1	64:1	8	nstrips
ASSIGN_OP	64:9	64:9	6	=
LEAF_NODE	64:9	64:9	7	=
RVAL	64:11	65:61	6	( td -> td_rowsperstrip == ( uint32 ) - 1 ? 1 : TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip ) )
LEAF_NODE	64:11	64:11	7	(
COND_EXPR	64:12	65:6	7	td -> td_rowsperstrip == ( uint32 ) - 1 ? 1 : TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
CONDITION	64:12	64:44	8	td -> td_rowsperstrip == ( uint32 ) - 1
FIELD	64:12	64:16	9	td -> td_rowsperstrip
LEAF_NODE	64:12	64:12	10	td
LEAF_NODE	64:14	64:14	10	->
LEAF_NODE	64:16	64:16	10	td_rowsperstrip
EQ_OPERATOR	64:32	64:32	9	==
LEAF_NODE	64:32	64:32	10	==
LEAF_NODE	64:35	64:35	9	(
TYPE_NAME	64:36	64:36	9	uint32
LEAF_NODE	64:36	64:36	10	uint32
LEAF_NODE	64:42	64:42	9	)
UNARY_EXPR	64:44	64:45	9	- 1
UNARY_OPERATOR	64:44	64:44	10	-
LEAF_NODE	64:44	64:44	11	-
FIELD	64:45	64:45	10	1
LEAF_NODE	64:45	64:45	11	1
LEAF_NODE	64:47	64:47	8	?
EXPR	64:49	64:49	8	1
FIELD	64:49	64:49	9	1
LEAF_NODE	64:49	64:49	10	1
LEAF_NODE	64:51	64:51	8	:
FUNCTION_CALL	65:6	65:60	8	TIFFhowmany_32 ( td -> td_imagelength , td -> td_rowsperstrip )
CALLEE	65:6	65:6	9	TIFFhowmany_32
LEAF_NODE	65:6	65:6	10	TIFFhowmany_32
LEAF_NODE	65:20	65:20	9	(
ARGUMENT	65:21	65:21	9	td -> td_imagelength
FIELD	65:21	65:25	10	td -> td_imagelength
LEAF_NODE	65:21	65:21	11	td
LEAF_NODE	65:23	65:23	11	->
LEAF_NODE	65:25	65:25	11	td_imagelength
LEAF_NODE	65:39	65:39	9	,
ARGUMENT	65:41	65:41	9	td -> td_rowsperstrip
FIELD	65:41	65:45	10	td -> td_rowsperstrip
LEAF_NODE	65:41	65:41	11	td
LEAF_NODE	65:43	65:43	11	->
LEAF_NODE	65:45	65:45	11	td_rowsperstrip
LEAF_NODE	65:60	65:60	9	)
LEAF_NODE	65:61	65:61	7	)
LEAF_NODE	65:62	65:62	4	;
SELECTION	66:1	67:2	3	
KEYWORD	66:1	66:1	4	if
LEAF_NODE	66:1	66:1	5	if
LEAF_NODE	66:4	66:4	4	(
CONDITION	66:5	66:5	4	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	66:5	66:28	5	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	66:5	66:9	6	td -> td_planarconfig
LEAF_NODE	66:5	66:5	7	td
LEAF_NODE	66:7	66:7	7	->
LEAF_NODE	66:9	66:9	7	td_planarconfig
EQ_OPERATOR	66:25	66:25	6	==
LEAF_NODE	66:25	66:25	7	==
FIELD	66:28	66:28	6	PLANARCONFIG_SEPARATE
LEAF_NODE	66:28	66:28	7	PLANARCONFIG_SEPARATE
LEAF_NODE	66:49	66:49	4	)
STATEMENTS	67:2	67:2	4	
EXPR_STATEMENT	67:2	68:27	5	nstrips = _TIFFMultiply32 ( tif , nstrips , ( uint32 ) td -> td_samplesperpixel , "TIFFNumberOfStrips" ) ;
EXPR	67:2	67:2	6	nstrips = _TIFFMultiply32 ( tif , nstrips , ( uint32 ) td -> td_samplesperpixel , "TIFFNumberOfStrips" )
ASSIGN	67:2	67:12	7	nstrips = _TIFFMultiply32 ( tif , nstrips , ( uint32 ) td -> td_samplesperpixel , "TIFFNumberOfStrips" )
LVAL	67:2	67:2	8	nstrips
FIELD	67:2	67:2	9	nstrips
LEAF_NODE	67:2	67:2	10	nstrips
ASSIGN_OP	67:10	67:10	8	=
LEAF_NODE	67:10	67:10	9	=
RVAL	67:12	67:12	8	_TIFFMultiply32 ( tif , nstrips , ( uint32 ) td -> td_samplesperpixel , "TIFFNumberOfStrips" )
FUNCTION_CALL	67:12	68:26	9	_TIFFMultiply32 ( tif , nstrips , ( uint32 ) td -> td_samplesperpixel , "TIFFNumberOfStrips" )
CALLEE	67:12	67:12	10	_TIFFMultiply32
LEAF_NODE	67:12	67:12	11	_TIFFMultiply32
LEAF_NODE	67:27	67:27	10	(
ARGUMENT	67:28	67:28	10	tif
FIELD	67:28	67:28	11	tif
LEAF_NODE	67:28	67:28	12	tif
LEAF_NODE	67:31	67:31	10	,
ARGUMENT	67:33	67:33	10	nstrips
FIELD	67:33	67:33	11	nstrips
LEAF_NODE	67:33	67:33	12	nstrips
LEAF_NODE	67:40	67:40	10	,
ARGUMENT	67:42	67:50	10	( uint32 ) td -> td_samplesperpixel
LEAF_NODE	67:42	67:42	11	(
TYPE_NAME	67:43	67:43	11	uint32
LEAF_NODE	67:43	67:43	12	uint32
LEAF_NODE	67:49	67:49	11	)
FIELD	67:50	67:54	11	td -> td_samplesperpixel
LEAF_NODE	67:50	67:50	12	td
LEAF_NODE	67:52	67:52	12	->
LEAF_NODE	67:54	67:54	12	td_samplesperpixel
LEAF_NODE	67:72	67:72	10	,
ARGUMENT	68:6	68:6	10	"TIFFNumberOfStrips"
FIELD	68:6	68:6	11	"TIFFNumberOfStrips"
LEAF_NODE	68:6	68:6	12	"TIFFNumberOfStrips"
LEAF_NODE	68:26	68:26	10	)
LEAF_NODE	68:27	68:27	6	;
LEAF_NODE	69:1	69:1	3	return
LEAF_NODE	69:8	69:8	3	(
LEAF_NODE	69:9	69:9	3	nstrips
LEAF_NODE	69:16	69:16	3	)
LEAF_NODE	69:17	69:17	3	;
LEAF_NODE	70:0	70:0	2	}
FUNCTION_DEF	75:0	126:0	1	
RETURN_TYPE	75:0	75:0	2	uint64
TYPE_NAME	75:0	75:0	3	uint64
LEAF_NODE	75:0	75:0	4	uint64
FUNCTION_NAME	76:0	76:0	2	TIFFVStripSize64
LEAF_NODE	76:0	76:0	3	TIFFVStripSize64
PARAMETER_LIST	76:16	76:40	2	( TIFF * tif , uint32 nrows )
LEAF_NODE	76:16	76:16	3	(
PARAMETER_DECL	76:17	76:23	3	TIFF * tif
TYPE	76:17	76:21	4	TIFF *
TYPE_NAME	76:17	76:17	5	TIFF
LEAF_NODE	76:17	76:17	6	TIFF
POINTER	76:21	76:21	5	*
LEAF_NODE	76:21	76:21	6	*
NAME	76:23	76:23	4	tif
LEAF_NODE	76:23	76:23	5	tif
LEAF_NODE	76:26	76:26	3	,
PARAMETER_DECL	76:28	76:35	3	uint32 nrows
TYPE	76:28	76:28	4	uint32
TYPE_NAME	76:28	76:28	5	uint32
LEAF_NODE	76:28	76:28	6	uint32
NAME	76:35	76:35	4	nrows
LEAF_NODE	76:35	76:35	5	nrows
LEAF_NODE	76:40	76:40	3	)
LEAF_NODE	77:0	77:0	2	{
STATEMENTS	78:1	124:1	2	
LEAF_NODE	78:1	78:1	3	static
SIMPLE_DECL	78:8	78:48	3	const char [ ] module ; module = "TIFFVStripSize64" ;
VAR_DECL	78:8	78:19	4	const char [ ] module ; module = "TIFFVStripSize64"
TYPE	78:8	78:25	5	const char [ ]
TYPE_NAME	78:8	78:14	6	const char
LEAF_NODE	78:8	78:8	7	const
LEAF_NODE	78:14	78:14	7	char
TYPE_SUFFIX	78:25	78:26	6	[ ]
LEAF_NODE	78:25	78:25	7	[
LEAF_NODE	78:26	78:26	7	]
NAME	78:19	78:19	5	module
LEAF_NODE	78:19	78:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	78:19	78:19	5	module = "TIFFVStripSize64"
ASSIGN	78:19	78:30	6	module = "TIFFVStripSize64"
LVAL	78:19	78:19	7	module
NAME	78:19	78:19	8	module
LEAF_NODE	78:19	78:19	9	module
ASSIGN_OP	78:28	78:28	7	=
LEAF_NODE	78:28	78:28	8	=
RVAL	78:30	78:30	7	"TIFFVStripSize64"
FIELD	78:30	78:30	8	"TIFFVStripSize64"
LEAF_NODE	78:30	78:30	9	"TIFFVStripSize64"
LEAF_NODE	78:48	78:48	4	;
SIMPLE_DECL	79:1	79:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	79:1	79:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	79:1	79:15	5	TIFFDirectory *
TYPE_NAME	79:1	79:1	6	TIFFDirectory
LEAF_NODE	79:1	79:1	7	TIFFDirectory
POINTER	79:15	79:15	6	*
LEAF_NODE	79:15	79:15	7	*
NAME	79:16	79:16	5	td
LEAF_NODE	79:16	79:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	79:16	79:16	5	td = & tif -> tif_dir
ASSIGN	79:16	79:21	6	td = & tif -> tif_dir
LVAL	79:16	79:16	7	td
NAME	79:16	79:16	8	td
LEAF_NODE	79:16	79:16	9	td
ASSIGN_OP	79:19	79:19	7	=
LEAF_NODE	79:19	79:19	8	=
RVAL	79:21	79:21	7	& tif -> tif_dir
UNARY_EXPR	79:21	79:22	8	& tif -> tif_dir
UNARY_OPERATOR	79:21	79:21	9	&
LEAF_NODE	79:21	79:21	10	&
FIELD	79:22	79:27	9	tif -> tif_dir
LEAF_NODE	79:22	79:22	10	tif
LEAF_NODE	79:25	79:25	10	->
LEAF_NODE	79:27	79:27	10	tif_dir
LEAF_NODE	79:34	79:34	4	;
SELECTION	80:1	81:2	3	
KEYWORD	80:1	80:1	4	if
LEAF_NODE	80:1	80:1	5	if
LEAF_NODE	80:4	80:4	4	(
CONDITION	80:5	80:5	4	nrows == ( uint32 ) ( - 1 )
EXPR	80:5	80:23	5	nrows == ( uint32 ) ( - 1 )
FIELD	80:5	80:5	6	nrows
LEAF_NODE	80:5	80:5	7	nrows
EQ_OPERATOR	80:10	80:10	6	==
LEAF_NODE	80:10	80:10	7	==
LEAF_NODE	80:12	80:12	6	(
TYPE_NAME	80:13	80:13	6	uint32
LEAF_NODE	80:13	80:13	7	uint32
LEAF_NODE	80:19	80:19	6	)
LEAF_NODE	80:20	80:20	6	(
UNARY_EXPR	80:21	80:22	6	- 1
UNARY_OPERATOR	80:21	80:21	7	-
LEAF_NODE	80:21	80:21	8	-
FIELD	80:22	80:22	7	1
LEAF_NODE	80:22	80:22	8	1
LEAF_NODE	80:23	80:23	6	)
LEAF_NODE	80:24	80:24	4	)
STATEMENTS	81:2	81:2	4	
EXPR_STATEMENT	81:2	81:26	5	nrows = td -> td_imagelength ;
EXPR	81:2	81:2	6	nrows = td -> td_imagelength
ASSIGN	81:2	81:8	7	nrows = td -> td_imagelength
LVAL	81:2	81:2	8	nrows
FIELD	81:2	81:2	9	nrows
LEAF_NODE	81:2	81:2	10	nrows
ASSIGN_OP	81:7	81:7	8	=
LEAF_NODE	81:7	81:7	9	=
RVAL	81:8	81:8	8	td -> td_imagelength
FIELD	81:8	81:12	9	td -> td_imagelength
LEAF_NODE	81:8	81:8	10	td
LEAF_NODE	81:10	81:10	10	->
LEAF_NODE	81:12	81:12	10	td_imagelength
LEAF_NODE	81:26	81:26	6	;
SELECTION	82:1	85:1	3	
KEYWORD	82:1	82:1	4	if
LEAF_NODE	82:1	82:1	5	if
LEAF_NODE	82:4	82:4	4	(
CONDITION	82:5	82:5	4	( td -> td_planarconfig == PLANARCONFIG_CONTIG ) && ( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
EXPR	82:5	82:5	5	( td -> td_planarconfig == PLANARCONFIG_CONTIG ) && ( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
AND	82:5	83:5	6	( td -> td_planarconfig == PLANARCONFIG_CONTIG ) && ( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
EXPR	82:5	82:46	7	( td -> td_planarconfig == PLANARCONFIG_CONTIG )
LEAF_NODE	82:5	82:5	8	(
FIELD	82:6	82:10	8	td -> td_planarconfig
LEAF_NODE	82:6	82:6	9	td
LEAF_NODE	82:8	82:8	9	->
LEAF_NODE	82:10	82:10	9	td_planarconfig
EQ_OPERATOR	82:25	82:25	8	==
LEAF_NODE	82:25	82:25	9	==
FIELD	82:27	82:27	8	PLANARCONFIG_CONTIG
LEAF_NODE	82:27	82:27	9	PLANARCONFIG_CONTIG
LEAF_NODE	82:46	82:46	8	)
LEAF_NODE	82:47	82:47	7	&&
EXPR	83:5	83:5	7	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
AND	83:5	84:5	8	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
EXPR	83:5	83:45	9	( td -> td_photometric == PHOTOMETRIC_YCBCR )
LEAF_NODE	83:5	83:5	10	(
FIELD	83:6	83:10	10	td -> td_photometric
LEAF_NODE	83:6	83:6	11	td
LEAF_NODE	83:8	83:8	11	->
LEAF_NODE	83:10	83:10	11	td_photometric
EQ_OPERATOR	83:25	83:25	10	==
LEAF_NODE	83:25	83:25	11	==
FIELD	83:28	83:28	10	PHOTOMETRIC_YCBCR
LEAF_NODE	83:28	83:28	11	PHOTOMETRIC_YCBCR
LEAF_NODE	83:45	83:45	10	)
LEAF_NODE	83:46	83:46	9	&&
EXPR	84:5	84:23	9	( ! isUpSampled ( tif ) )
LEAF_NODE	84:5	84:5	10	(
UNARY_EXPR	84:6	84:7	10	! isUpSampled ( tif )
UNARY_OPERATOR	84:6	84:6	11	!
LEAF_NODE	84:6	84:6	12	!
FUNCTION_CALL	84:7	84:22	11	isUpSampled ( tif )
CALLEE	84:7	84:7	12	isUpSampled
LEAF_NODE	84:7	84:7	13	isUpSampled
LEAF_NODE	84:18	84:18	12	(
ARGUMENT	84:19	84:19	12	tif
FIELD	84:19	84:19	13	tif
LEAF_NODE	84:19	84:19	14	tif
LEAF_NODE	84:22	84:22	12	)
LEAF_NODE	84:23	84:23	10	)
LEAF_NODE	84:24	84:24	4	)
STATEMENTS	85:1	123:1	4	
LEAF_NODE	85:1	85:1	5	{
STATEMENTS	94:2	122:2	5	
SIMPLE_DECL	94:2	94:28	6	uint16 [ 2 ] ycbcrsubsampling ;
VAR_DECL	94:2	94:9	7	uint16 [ 2 ] ycbcrsubsampling
TYPE	94:2	94:25	8	uint16 [ 2 ]
TYPE_NAME	94:2	94:2	9	uint16
LEAF_NODE	94:2	94:2	10	uint16
TYPE_SUFFIX	94:25	94:27	9	[ 2 ]
LEAF_NODE	94:25	94:25	10	[
FIELD	94:26	94:26	10	2
LEAF_NODE	94:26	94:26	11	2
LEAF_NODE	94:27	94:27	10	]
NAME	94:9	94:9	8	ycbcrsubsampling
LEAF_NODE	94:9	94:9	9	ycbcrsubsampling
LEAF_NODE	94:28	94:28	7	;
SIMPLE_DECL	95:2	95:30	6	uint16 samplingblock_samples ;
VAR_DECL	95:2	95:9	7	uint16 samplingblock_samples
TYPE	95:2	95:2	8	uint16
TYPE_NAME	95:2	95:2	9	uint16
LEAF_NODE	95:2	95:2	10	uint16
NAME	95:9	95:9	8	samplingblock_samples
LEAF_NODE	95:9	95:9	9	samplingblock_samples
LEAF_NODE	95:30	95:30	7	;
SIMPLE_DECL	96:2	96:27	6	uint32 samplingblocks_hor ;
VAR_DECL	96:2	96:9	7	uint32 samplingblocks_hor
TYPE	96:2	96:2	8	uint32
TYPE_NAME	96:2	96:2	9	uint32
LEAF_NODE	96:2	96:2	10	uint32
NAME	96:9	96:9	8	samplingblocks_hor
LEAF_NODE	96:9	96:9	9	samplingblocks_hor
LEAF_NODE	96:27	96:27	7	;
SIMPLE_DECL	97:2	97:27	6	uint32 samplingblocks_ver ;
VAR_DECL	97:2	97:9	7	uint32 samplingblocks_ver
TYPE	97:2	97:2	8	uint32
TYPE_NAME	97:2	97:2	9	uint32
LEAF_NODE	97:2	97:2	10	uint32
NAME	97:9	97:9	8	samplingblocks_ver
LEAF_NODE	97:9	97:9	9	samplingblocks_ver
LEAF_NODE	97:27	97:27	7	;
SIMPLE_DECL	98:2	98:28	6	uint64 samplingrow_samples ;
VAR_DECL	98:2	98:9	7	uint64 samplingrow_samples
TYPE	98:2	98:2	8	uint64
TYPE_NAME	98:2	98:2	9	uint64
LEAF_NODE	98:2	98:2	10	uint64
NAME	98:9	98:9	8	samplingrow_samples
LEAF_NODE	98:9	98:9	9	samplingrow_samples
LEAF_NODE	98:28	98:28	7	;
SIMPLE_DECL	99:2	99:25	6	uint64 samplingrow_size ;
VAR_DECL	99:2	99:9	7	uint64 samplingrow_size
TYPE	99:2	99:2	8	uint64
TYPE_NAME	99:2	99:2	9	uint64
LEAF_NODE	99:2	99:2	10	uint64
NAME	99:9	99:9	8	samplingrow_size
LEAF_NODE	99:9	99:9	9	samplingrow_size
LEAF_NODE	99:25	99:25	7	;
SELECTION	100:2	101:2	6	
KEYWORD	100:2	100:2	7	if
LEAF_NODE	100:2	100:2	8	if
LEAF_NODE	100:4	100:4	7	(
CONDITION	100:5	100:5	7	td -> td_samplesperpixel != 3
EXPR	100:5	100:29	8	td -> td_samplesperpixel != 3
FIELD	100:5	100:9	9	td -> td_samplesperpixel
LEAF_NODE	100:5	100:5	10	td
LEAF_NODE	100:7	100:7	10	->
LEAF_NODE	100:9	100:9	10	td_samplesperpixel
EQ_OPERATOR	100:27	100:27	9	!=
LEAF_NODE	100:27	100:27	10	!=
FIELD	100:29	100:29	9	3
LEAF_NODE	100:29	100:29	10	3
LEAF_NODE	100:30	100:30	7	)
STATEMENTS	101:2	105:2	7	
LEAF_NODE	101:2	101:2	8	{
STATEMENTS	102:3	104:3	8	
EXPR_STATEMENT	102:3	103:42	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid td_samplesperpixel value" ) ;
EXPR	102:3	102:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid td_samplesperpixel value" )
FUNCTION_CALL	102:3	103:41	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid td_samplesperpixel value" )
CALLEE	102:3	102:3	12	TIFFErrorExt
LEAF_NODE	102:3	102:3	13	TIFFErrorExt
LEAF_NODE	102:15	102:15	12	(
ARGUMENT	102:16	102:16	12	tif -> tif_clientdata
FIELD	102:16	102:21	13	tif -> tif_clientdata
LEAF_NODE	102:16	102:16	14	tif
LEAF_NODE	102:19	102:19	14	->
LEAF_NODE	102:21	102:21	14	tif_clientdata
LEAF_NODE	102:35	102:35	12	,
ARGUMENT	102:36	102:36	12	module
FIELD	102:36	102:36	13	module
LEAF_NODE	102:36	102:36	14	module
LEAF_NODE	102:42	102:42	12	,
ARGUMENT	103:7	103:7	12	"Invalid td_samplesperpixel value"
FIELD	103:7	103:7	13	"Invalid td_samplesperpixel value"
LEAF_NODE	103:7	103:7	14	"Invalid td_samplesperpixel value"
LEAF_NODE	103:41	103:41	12	)
LEAF_NODE	103:42	103:42	10	;
JUMP_STATEMENT	104:3	104:11	9	return 0 ;
KEYWORD	104:3	104:3	10	return
LEAF_NODE	104:3	104:3	11	return
DESTINATION	104:10	104:10	10	0
EXPR	104:10	104:10	11	0
FIELD	104:10	104:10	12	0
LEAF_NODE	104:10	104:10	13	0
LEAF_NODE	104:11	104:11	10	;
LEAF_NODE	105:2	105:2	8	}
EXPR_STATEMENT	106:2	107:25	6	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , ycbcrsubsampling + 0 , ycbcrsubsampling + 1 ) ;
EXPR	106:2	106:2	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , ycbcrsubsampling + 0 , ycbcrsubsampling + 1 )
FUNCTION_CALL	106:2	107:24	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , ycbcrsubsampling + 0 , ycbcrsubsampling + 1 )
CALLEE	106:2	106:2	9	TIFFGetFieldDefaulted
LEAF_NODE	106:2	106:2	10	TIFFGetFieldDefaulted
LEAF_NODE	106:23	106:23	9	(
ARGUMENT	106:24	106:24	9	tif
FIELD	106:24	106:24	10	tif
LEAF_NODE	106:24	106:24	11	tif
LEAF_NODE	106:27	106:27	9	,
ARGUMENT	106:28	106:28	9	TIFFTAG_YCBCRSUBSAMPLING
FIELD	106:28	106:28	10	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	106:28	106:28	11	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	106:52	106:52	9	,
ARGUMENT	106:53	106:70	9	ycbcrsubsampling + 0
FIELD	106:53	106:53	10	ycbcrsubsampling
LEAF_NODE	106:53	106:53	11	ycbcrsubsampling
LEAF_NODE	106:69	106:69	10	+
FIELD	106:70	106:70	10	0
LEAF_NODE	106:70	106:70	11	0
LEAF_NODE	106:71	106:71	9	,
ARGUMENT	107:6	107:23	9	ycbcrsubsampling + 1
FIELD	107:6	107:6	10	ycbcrsubsampling
LEAF_NODE	107:6	107:6	11	ycbcrsubsampling
LEAF_NODE	107:22	107:22	10	+
FIELD	107:23	107:23	10	1
LEAF_NODE	107:23	107:23	11	1
LEAF_NODE	107:24	107:24	9	)
LEAF_NODE	107:25	107:25	7	;
SELECTION	108:2	110:2	6	
KEYWORD	108:2	108:2	7	if
LEAF_NODE	108:2	108:2	8	if
LEAF_NODE	108:5	108:5	7	(
CONDITION	108:6	108:6	7	( ycbcrsubsampling [ 0 ] != 1 && ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4 ) || ( ycbcrsubsampling [ 1 ] != 1 && ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4 )
EXPR	108:6	108:6	8	( ycbcrsubsampling [ 0 ] != 1 && ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4 ) || ( ycbcrsubsampling [ 1 ] != 1 && ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4 )
OR	108:6	109:8	9	( ycbcrsubsampling [ 0 ] != 1 && ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4 ) || ( ycbcrsubsampling [ 1 ] != 1 && ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4 )
EXPR	108:6	108:87	10	( ycbcrsubsampling [ 0 ] != 1 && ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4 )
LEAF_NODE	108:6	108:6	11	(
AND	108:7	108:35	11	ycbcrsubsampling [ 0 ] != 1 && ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4
EXPR	108:7	108:30	12	ycbcrsubsampling [ 0 ] != 1
FIELD	108:7	108:25	13	ycbcrsubsampling [ 0 ]
LEAF_NODE	108:7	108:7	14	ycbcrsubsampling
LEAF_NODE	108:23	108:23	14	[
EXPR	108:24	108:24	14	0
FIELD	108:24	108:24	15	0
LEAF_NODE	108:24	108:24	16	0
LEAF_NODE	108:25	108:25	14	]
EQ_OPERATOR	108:27	108:27	13	!=
LEAF_NODE	108:27	108:27	14	!=
FIELD	108:30	108:30	13	1
LEAF_NODE	108:30	108:30	14	1
LEAF_NODE	108:32	108:32	12	&&
EXPR	108:35	108:35	12	ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4
AND	108:35	108:63	13	ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4
EXPR	108:35	108:58	14	ycbcrsubsampling [ 0 ] != 2
FIELD	108:35	108:53	15	ycbcrsubsampling [ 0 ]
LEAF_NODE	108:35	108:35	16	ycbcrsubsampling
LEAF_NODE	108:51	108:51	16	[
EXPR	108:52	108:52	16	0
FIELD	108:52	108:52	17	0
LEAF_NODE	108:52	108:52	18	0
LEAF_NODE	108:53	108:53	16	]
EQ_OPERATOR	108:55	108:55	15	!=
LEAF_NODE	108:55	108:55	16	!=
FIELD	108:58	108:58	15	2
LEAF_NODE	108:58	108:58	16	2
LEAF_NODE	108:60	108:60	14	&&
EXPR	108:63	108:86	14	ycbcrsubsampling [ 0 ] != 4
FIELD	108:63	108:81	15	ycbcrsubsampling [ 0 ]
LEAF_NODE	108:63	108:63	16	ycbcrsubsampling
LEAF_NODE	108:79	108:79	16	[
EXPR	108:80	108:80	16	0
FIELD	108:80	108:80	17	0
LEAF_NODE	108:80	108:80	18	0
LEAF_NODE	108:81	108:81	16	]
EQ_OPERATOR	108:83	108:83	15	!=
LEAF_NODE	108:83	108:83	16	!=
FIELD	108:86	108:86	15	4
LEAF_NODE	108:86	108:86	16	4
LEAF_NODE	108:87	108:87	11	)
LEAF_NODE	109:6	109:6	10	||
EXPR	109:8	109:89	10	( ycbcrsubsampling [ 1 ] != 1 && ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4 )
LEAF_NODE	109:8	109:8	11	(
AND	109:9	109:37	11	ycbcrsubsampling [ 1 ] != 1 && ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4
EXPR	109:9	109:32	12	ycbcrsubsampling [ 1 ] != 1
FIELD	109:9	109:27	13	ycbcrsubsampling [ 1 ]
LEAF_NODE	109:9	109:9	14	ycbcrsubsampling
LEAF_NODE	109:25	109:25	14	[
EXPR	109:26	109:26	14	1
FIELD	109:26	109:26	15	1
LEAF_NODE	109:26	109:26	16	1
LEAF_NODE	109:27	109:27	14	]
EQ_OPERATOR	109:29	109:29	13	!=
LEAF_NODE	109:29	109:29	14	!=
FIELD	109:32	109:32	13	1
LEAF_NODE	109:32	109:32	14	1
LEAF_NODE	109:34	109:34	12	&&
EXPR	109:37	109:37	12	ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4
AND	109:37	109:65	13	ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4
EXPR	109:37	109:60	14	ycbcrsubsampling [ 1 ] != 2
FIELD	109:37	109:55	15	ycbcrsubsampling [ 1 ]
LEAF_NODE	109:37	109:37	16	ycbcrsubsampling
LEAF_NODE	109:53	109:53	16	[
EXPR	109:54	109:54	16	1
FIELD	109:54	109:54	17	1
LEAF_NODE	109:54	109:54	18	1
LEAF_NODE	109:55	109:55	16	]
EQ_OPERATOR	109:57	109:57	15	!=
LEAF_NODE	109:57	109:57	16	!=
FIELD	109:60	109:60	15	2
LEAF_NODE	109:60	109:60	16	2
LEAF_NODE	109:62	109:62	14	&&
EXPR	109:65	109:88	14	ycbcrsubsampling [ 1 ] != 4
FIELD	109:65	109:83	15	ycbcrsubsampling [ 1 ]
LEAF_NODE	109:65	109:65	16	ycbcrsubsampling
LEAF_NODE	109:81	109:81	16	[
EXPR	109:82	109:82	16	1
FIELD	109:82	109:82	17	1
LEAF_NODE	109:82	109:82	18	1
LEAF_NODE	109:83	109:83	16	]
EQ_OPERATOR	109:85	109:85	15	!=
LEAF_NODE	109:85	109:85	16	!=
FIELD	109:88	109:88	15	4
LEAF_NODE	109:88	109:88	16	4
LEAF_NODE	109:89	109:89	11	)
LEAF_NODE	109:90	109:90	7	)
STATEMENTS	110:2	116:2	7	
LEAF_NODE	110:2	110:2	8	{
STATEMENTS	111:3	115:3	8	
EXPR_STATEMENT	111:3	114:30	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid YCbCr subsampling (%dx%d)" , ycbcrsubsampling [ 0 ] , ycbcrsubsampling [ 1 ] ) ;
EXPR	111:3	111:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid YCbCr subsampling (%dx%d)" , ycbcrsubsampling [ 0 ] , ycbcrsubsampling [ 1 ] )
FUNCTION_CALL	111:3	114:29	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid YCbCr subsampling (%dx%d)" , ycbcrsubsampling [ 0 ] , ycbcrsubsampling [ 1 ] )
CALLEE	111:3	111:3	12	TIFFErrorExt
LEAF_NODE	111:3	111:3	13	TIFFErrorExt
LEAF_NODE	111:15	111:15	12	(
ARGUMENT	111:16	111:16	12	tif -> tif_clientdata
FIELD	111:16	111:21	13	tif -> tif_clientdata
LEAF_NODE	111:16	111:16	14	tif
LEAF_NODE	111:19	111:19	14	->
LEAF_NODE	111:21	111:21	14	tif_clientdata
LEAF_NODE	111:35	111:35	12	,
ARGUMENT	111:36	111:36	12	module
FIELD	111:36	111:36	13	module
LEAF_NODE	111:36	111:36	14	module
LEAF_NODE	111:42	111:42	12	,
ARGUMENT	112:9	112:9	12	"Invalid YCbCr subsampling (%dx%d)"
FIELD	112:9	112:9	13	"Invalid YCbCr subsampling (%dx%d)"
LEAF_NODE	112:9	112:9	14	"Invalid YCbCr subsampling (%dx%d)"
LEAF_NODE	112:44	112:44	12	,
ARGUMENT	113:9	113:9	12	ycbcrsubsampling [ 0 ]
FIELD	113:9	113:27	13	ycbcrsubsampling [ 0 ]
LEAF_NODE	113:9	113:9	14	ycbcrsubsampling
LEAF_NODE	113:25	113:25	14	[
EXPR	113:26	113:26	14	0
FIELD	113:26	113:26	15	0
LEAF_NODE	113:26	113:26	16	0
LEAF_NODE	113:27	113:27	14	]
LEAF_NODE	113:28	113:28	12	,
ARGUMENT	114:9	114:9	12	ycbcrsubsampling [ 1 ]
FIELD	114:9	114:27	13	ycbcrsubsampling [ 1 ]
LEAF_NODE	114:9	114:9	14	ycbcrsubsampling
LEAF_NODE	114:25	114:25	14	[
EXPR	114:26	114:26	14	1
FIELD	114:26	114:26	15	1
LEAF_NODE	114:26	114:26	16	1
LEAF_NODE	114:27	114:27	14	]
LEAF_NODE	114:29	114:29	12	)
LEAF_NODE	114:30	114:30	10	;
JUMP_STATEMENT	115:3	115:11	9	return 0 ;
KEYWORD	115:3	115:3	10	return
LEAF_NODE	115:3	115:3	11	return
DESTINATION	115:10	115:10	10	0
EXPR	115:10	115:10	11	0
FIELD	115:10	115:10	12	0
LEAF_NODE	115:10	115:10	13	0
LEAF_NODE	115:11	115:11	10	;
LEAF_NODE	116:2	116:2	8	}
EXPR_STATEMENT	117:2	117:65	6	samplingblock_samples = ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2 ;
EXPR	117:2	117:2	7	samplingblock_samples = ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2
ASSIGN	117:2	117:24	8	samplingblock_samples = ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2
LVAL	117:2	117:2	9	samplingblock_samples
FIELD	117:2	117:2	10	samplingblock_samples
LEAF_NODE	117:2	117:2	11	samplingblock_samples
ASSIGN_OP	117:23	117:23	9	=
LEAF_NODE	117:23	117:23	10	=
RVAL	117:24	117:64	9	ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2
FIELD	117:24	117:42	10	ycbcrsubsampling [ 0 ]
LEAF_NODE	117:24	117:24	11	ycbcrsubsampling
LEAF_NODE	117:40	117:40	11	[
EXPR	117:41	117:41	11	0
FIELD	117:41	117:41	12	0
LEAF_NODE	117:41	117:41	13	0
LEAF_NODE	117:42	117:42	11	]
LEAF_NODE	117:43	117:43	10	*
FIELD	117:44	117:62	10	ycbcrsubsampling [ 1 ]
LEAF_NODE	117:44	117:44	11	ycbcrsubsampling
LEAF_NODE	117:60	117:60	11	[
EXPR	117:61	117:61	11	1
FIELD	117:61	117:61	12	1
LEAF_NODE	117:61	117:61	13	1
LEAF_NODE	117:62	117:62	11	]
LEAF_NODE	117:63	117:63	10	+
FIELD	117:64	117:64	10	2
LEAF_NODE	117:64	117:64	11	2
LEAF_NODE	117:65	117:65	7	;
EXPR_STATEMENT	118:2	118:74	6	samplingblocks_hor = TIFFhowmany_32 ( td -> td_imagewidth , ycbcrsubsampling [ 0 ] ) ;
EXPR	118:2	118:2	7	samplingblocks_hor = TIFFhowmany_32 ( td -> td_imagewidth , ycbcrsubsampling [ 0 ] )
ASSIGN	118:2	118:21	8	samplingblocks_hor = TIFFhowmany_32 ( td -> td_imagewidth , ycbcrsubsampling [ 0 ] )
LVAL	118:2	118:2	9	samplingblocks_hor
FIELD	118:2	118:2	10	samplingblocks_hor
LEAF_NODE	118:2	118:2	11	samplingblocks_hor
ASSIGN_OP	118:20	118:20	9	=
LEAF_NODE	118:20	118:20	10	=
RVAL	118:21	118:21	9	TIFFhowmany_32 ( td -> td_imagewidth , ycbcrsubsampling [ 0 ] )
FUNCTION_CALL	118:21	118:73	10	TIFFhowmany_32 ( td -> td_imagewidth , ycbcrsubsampling [ 0 ] )
CALLEE	118:21	118:21	11	TIFFhowmany_32
LEAF_NODE	118:21	118:21	12	TIFFhowmany_32
LEAF_NODE	118:35	118:35	11	(
ARGUMENT	118:36	118:36	11	td -> td_imagewidth
FIELD	118:36	118:40	12	td -> td_imagewidth
LEAF_NODE	118:36	118:36	13	td
LEAF_NODE	118:38	118:38	13	->
LEAF_NODE	118:40	118:40	13	td_imagewidth
LEAF_NODE	118:53	118:53	11	,
ARGUMENT	118:54	118:54	11	ycbcrsubsampling [ 0 ]
FIELD	118:54	118:72	12	ycbcrsubsampling [ 0 ]
LEAF_NODE	118:54	118:54	13	ycbcrsubsampling
LEAF_NODE	118:70	118:70	13	[
EXPR	118:71	118:71	13	0
FIELD	118:71	118:71	14	0
LEAF_NODE	118:71	118:71	15	0
LEAF_NODE	118:72	118:72	13	]
LEAF_NODE	118:73	118:73	11	)
LEAF_NODE	118:74	118:74	7	;
EXPR_STATEMENT	119:2	119:62	6	samplingblocks_ver = TIFFhowmany_32 ( nrows , ycbcrsubsampling [ 1 ] ) ;
EXPR	119:2	119:2	7	samplingblocks_ver = TIFFhowmany_32 ( nrows , ycbcrsubsampling [ 1 ] )
ASSIGN	119:2	119:21	8	samplingblocks_ver = TIFFhowmany_32 ( nrows , ycbcrsubsampling [ 1 ] )
LVAL	119:2	119:2	9	samplingblocks_ver
FIELD	119:2	119:2	10	samplingblocks_ver
LEAF_NODE	119:2	119:2	11	samplingblocks_ver
ASSIGN_OP	119:20	119:20	9	=
LEAF_NODE	119:20	119:20	10	=
RVAL	119:21	119:21	9	TIFFhowmany_32 ( nrows , ycbcrsubsampling [ 1 ] )
FUNCTION_CALL	119:21	119:61	10	TIFFhowmany_32 ( nrows , ycbcrsubsampling [ 1 ] )
CALLEE	119:21	119:21	11	TIFFhowmany_32
LEAF_NODE	119:21	119:21	12	TIFFhowmany_32
LEAF_NODE	119:35	119:35	11	(
ARGUMENT	119:36	119:36	11	nrows
FIELD	119:36	119:36	12	nrows
LEAF_NODE	119:36	119:36	13	nrows
LEAF_NODE	119:41	119:41	11	,
ARGUMENT	119:42	119:42	11	ycbcrsubsampling [ 1 ]
FIELD	119:42	119:60	12	ycbcrsubsampling [ 1 ]
LEAF_NODE	119:42	119:42	13	ycbcrsubsampling
LEAF_NODE	119:58	119:58	13	[
EXPR	119:59	119:59	13	1
FIELD	119:59	119:59	14	1
LEAF_NODE	119:59	119:59	15	1
LEAF_NODE	119:60	119:60	13	]
LEAF_NODE	119:61	119:61	11	)
LEAF_NODE	119:62	119:62	7	;
EXPR_STATEMENT	120:2	120:90	6	samplingrow_samples = _TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module ) ;
EXPR	120:2	120:2	7	samplingrow_samples = _TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
ASSIGN	120:2	120:22	8	samplingrow_samples = _TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
LVAL	120:2	120:2	9	samplingrow_samples
FIELD	120:2	120:2	10	samplingrow_samples
LEAF_NODE	120:2	120:2	11	samplingrow_samples
ASSIGN_OP	120:21	120:21	9	=
LEAF_NODE	120:21	120:21	10	=
RVAL	120:22	120:22	9	_TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
FUNCTION_CALL	120:22	120:89	10	_TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
CALLEE	120:22	120:22	11	_TIFFMultiply64
LEAF_NODE	120:22	120:22	12	_TIFFMultiply64
LEAF_NODE	120:37	120:37	11	(
ARGUMENT	120:38	120:38	11	tif
FIELD	120:38	120:38	12	tif
LEAF_NODE	120:38	120:38	13	tif
LEAF_NODE	120:41	120:41	11	,
ARGUMENT	120:42	120:42	11	samplingblocks_hor
FIELD	120:42	120:42	12	samplingblocks_hor
LEAF_NODE	120:42	120:42	13	samplingblocks_hor
LEAF_NODE	120:60	120:60	11	,
ARGUMENT	120:61	120:61	11	samplingblock_samples
FIELD	120:61	120:61	12	samplingblock_samples
LEAF_NODE	120:61	120:61	13	samplingblock_samples
LEAF_NODE	120:82	120:82	11	,
ARGUMENT	120:83	120:83	11	module
FIELD	120:83	120:83	12	module
LEAF_NODE	120:83	120:83	13	module
LEAF_NODE	120:89	120:89	11	)
LEAF_NODE	120:90	120:90	7	;
EXPR_STATEMENT	121:2	121:104	6	samplingrow_size = TIFFhowmany8_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) ) ;
EXPR	121:2	121:2	7	samplingrow_size = TIFFhowmany8_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) )
ASSIGN	121:2	121:19	8	samplingrow_size = TIFFhowmany8_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) )
LVAL	121:2	121:2	9	samplingrow_size
FIELD	121:2	121:2	10	samplingrow_size
LEAF_NODE	121:2	121:2	11	samplingrow_size
ASSIGN_OP	121:18	121:18	9	=
LEAF_NODE	121:18	121:18	10	=
RVAL	121:19	121:19	9	TIFFhowmany8_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) )
FUNCTION_CALL	121:19	121:103	10	TIFFhowmany8_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) )
CALLEE	121:19	121:19	11	TIFFhowmany8_64
LEAF_NODE	121:19	121:19	12	TIFFhowmany8_64
LEAF_NODE	121:34	121:34	11	(
ARGUMENT	121:35	121:35	11	_TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module )
FUNCTION_CALL	121:35	121:102	12	_TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module )
CALLEE	121:35	121:35	13	_TIFFMultiply64
LEAF_NODE	121:35	121:35	14	_TIFFMultiply64
LEAF_NODE	121:50	121:50	13	(
ARGUMENT	121:51	121:51	13	tif
FIELD	121:51	121:51	14	tif
LEAF_NODE	121:51	121:51	15	tif
LEAF_NODE	121:54	121:54	13	,
ARGUMENT	121:55	121:55	13	samplingrow_samples
FIELD	121:55	121:55	14	samplingrow_samples
LEAF_NODE	121:55	121:55	15	samplingrow_samples
LEAF_NODE	121:74	121:74	13	,
ARGUMENT	121:75	121:75	13	td -> td_bitspersample
FIELD	121:75	121:79	14	td -> td_bitspersample
LEAF_NODE	121:75	121:75	15	td
LEAF_NODE	121:77	121:77	15	->
LEAF_NODE	121:79	121:79	15	td_bitspersample
LEAF_NODE	121:95	121:95	13	,
ARGUMENT	121:96	121:96	13	module
FIELD	121:96	121:96	14	module
LEAF_NODE	121:96	121:96	15	module
LEAF_NODE	121:102	121:102	13	)
LEAF_NODE	121:103	121:103	11	)
LEAF_NODE	121:104	121:104	7	;
JUMP_STATEMENT	122:2	122:73	6	return ( _TIFFMultiply64 ( tif , samplingrow_size , samplingblocks_ver , module ) ) ;
KEYWORD	122:2	122:2	7	return
LEAF_NODE	122:2	122:2	8	return
DESTINATION	122:8	122:8	7	( _TIFFMultiply64 ( tif , samplingrow_size , samplingblocks_ver , module ) )
EXPR	122:8	122:72	8	( _TIFFMultiply64 ( tif , samplingrow_size , samplingblocks_ver , module ) )
LEAF_NODE	122:8	122:8	9	(
FUNCTION_CALL	122:9	122:71	9	_TIFFMultiply64 ( tif , samplingrow_size , samplingblocks_ver , module )
CALLEE	122:9	122:9	10	_TIFFMultiply64
LEAF_NODE	122:9	122:9	11	_TIFFMultiply64
LEAF_NODE	122:24	122:24	10	(
ARGUMENT	122:25	122:25	10	tif
FIELD	122:25	122:25	11	tif
LEAF_NODE	122:25	122:25	12	tif
LEAF_NODE	122:28	122:28	10	,
ARGUMENT	122:29	122:29	10	samplingrow_size
FIELD	122:29	122:29	11	samplingrow_size
LEAF_NODE	122:29	122:29	12	samplingrow_size
LEAF_NODE	122:45	122:45	10	,
ARGUMENT	122:46	122:46	10	samplingblocks_ver
FIELD	122:46	122:46	11	samplingblocks_ver
LEAF_NODE	122:46	122:46	12	samplingblocks_ver
LEAF_NODE	122:64	122:64	10	,
ARGUMENT	122:65	122:65	10	module
FIELD	122:65	122:65	11	module
LEAF_NODE	122:65	122:65	12	module
LEAF_NODE	122:71	122:71	10	)
LEAF_NODE	122:72	122:72	9	)
LEAF_NODE	122:73	122:73	7	;
LEAF_NODE	123:1	123:1	5	}
SELECTION	124:1	125:2	3	
KEYWORD	124:1	124:1	4	else
LEAF_NODE	124:1	124:1	5	else
STATEMENTS	125:2	125:2	4	
JUMP_STATEMENT	125:2	125:67	5	return ( _TIFFMultiply64 ( tif , nrows , TIFFScanlineSize64 ( tif ) , module ) ) ;
KEYWORD	125:2	125:2	6	return
LEAF_NODE	125:2	125:2	7	return
DESTINATION	125:8	125:8	6	( _TIFFMultiply64 ( tif , nrows , TIFFScanlineSize64 ( tif ) , module ) )
EXPR	125:8	125:66	7	( _TIFFMultiply64 ( tif , nrows , TIFFScanlineSize64 ( tif ) , module ) )
LEAF_NODE	125:8	125:8	8	(
FUNCTION_CALL	125:9	125:65	8	_TIFFMultiply64 ( tif , nrows , TIFFScanlineSize64 ( tif ) , module )
CALLEE	125:9	125:9	9	_TIFFMultiply64
LEAF_NODE	125:9	125:9	10	_TIFFMultiply64
LEAF_NODE	125:24	125:24	9	(
ARGUMENT	125:25	125:25	9	tif
FIELD	125:25	125:25	10	tif
LEAF_NODE	125:25	125:25	11	tif
LEAF_NODE	125:28	125:28	9	,
ARGUMENT	125:29	125:29	9	nrows
FIELD	125:29	125:29	10	nrows
LEAF_NODE	125:29	125:29	11	nrows
LEAF_NODE	125:34	125:34	9	,
ARGUMENT	125:35	125:35	9	TIFFScanlineSize64 ( tif )
FUNCTION_CALL	125:35	125:57	10	TIFFScanlineSize64 ( tif )
CALLEE	125:35	125:35	11	TIFFScanlineSize64
LEAF_NODE	125:35	125:35	12	TIFFScanlineSize64
LEAF_NODE	125:53	125:53	11	(
ARGUMENT	125:54	125:54	11	tif
FIELD	125:54	125:54	12	tif
LEAF_NODE	125:54	125:54	13	tif
LEAF_NODE	125:57	125:57	11	)
LEAF_NODE	125:58	125:58	9	,
ARGUMENT	125:59	125:59	9	module
FIELD	125:59	125:59	10	module
LEAF_NODE	125:59	125:59	11	module
LEAF_NODE	125:65	125:65	9	)
LEAF_NODE	125:66	125:66	8	)
LEAF_NODE	125:67	125:67	6	;
LEAF_NODE	126:0	126:0	2	}
FUNCTION_DEF	127:0	134:0	1	
RETURN_TYPE	127:0	127:0	2	tmsize_t
TYPE_NAME	127:0	127:0	3	tmsize_t
LEAF_NODE	127:0	127:0	4	tmsize_t
FUNCTION_NAME	128:0	128:0	2	TIFFVStripSize
LEAF_NODE	128:0	128:0	3	TIFFVStripSize
PARAMETER_LIST	128:14	128:38	2	( TIFF * tif , uint32 nrows )
LEAF_NODE	128:14	128:14	3	(
PARAMETER_DECL	128:15	128:21	3	TIFF * tif
TYPE	128:15	128:19	4	TIFF *
TYPE_NAME	128:15	128:15	5	TIFF
LEAF_NODE	128:15	128:15	6	TIFF
POINTER	128:19	128:19	5	*
LEAF_NODE	128:19	128:19	6	*
NAME	128:21	128:21	4	tif
LEAF_NODE	128:21	128:21	5	tif
LEAF_NODE	128:24	128:24	3	,
PARAMETER_DECL	128:26	128:33	3	uint32 nrows
TYPE	128:26	128:26	4	uint32
TYPE_NAME	128:26	128:26	5	uint32
LEAF_NODE	128:26	128:26	6	uint32
NAME	128:33	128:33	4	nrows
LEAF_NODE	128:33	128:33	5	nrows
LEAF_NODE	128:38	128:38	3	)
LEAF_NODE	129:0	129:0	2	{
STATEMENTS	130:1	133:8	2	
LEAF_NODE	130:1	130:1	3	static
SIMPLE_DECL	130:8	130:46	3	const char [ ] module ; module = "TIFFVStripSize" ;
VAR_DECL	130:8	130:19	4	const char [ ] module ; module = "TIFFVStripSize"
TYPE	130:8	130:25	5	const char [ ]
TYPE_NAME	130:8	130:14	6	const char
LEAF_NODE	130:8	130:8	7	const
LEAF_NODE	130:14	130:14	7	char
TYPE_SUFFIX	130:25	130:26	6	[ ]
LEAF_NODE	130:25	130:25	7	[
LEAF_NODE	130:26	130:26	7	]
NAME	130:19	130:19	5	module
LEAF_NODE	130:19	130:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	130:19	130:19	5	module = "TIFFVStripSize"
ASSIGN	130:19	130:30	6	module = "TIFFVStripSize"
LVAL	130:19	130:19	7	module
NAME	130:19	130:19	8	module
LEAF_NODE	130:19	130:19	9	module
ASSIGN_OP	130:28	130:28	7	=
LEAF_NODE	130:28	130:28	8	=
RVAL	130:30	130:30	7	"TIFFVStripSize"
FIELD	130:30	130:30	8	"TIFFVStripSize"
LEAF_NODE	130:30	130:30	9	"TIFFVStripSize"
LEAF_NODE	130:46	130:46	4	;
SIMPLE_DECL	131:1	131:9	3	uint64 m ;
VAR_DECL	131:1	131:8	4	uint64 m
TYPE	131:1	131:1	5	uint64
TYPE_NAME	131:1	131:1	6	uint64
LEAF_NODE	131:1	131:1	7	uint64
NAME	131:8	131:8	5	m
LEAF_NODE	131:8	131:8	6	m
LEAF_NODE	131:9	131:9	4	;
EXPR_STATEMENT	132:1	132:30	3	m = TIFFVStripSize64 ( tif , nrows ) ;
EXPR	132:1	132:1	4	m = TIFFVStripSize64 ( tif , nrows )
ASSIGN	132:1	132:3	5	m = TIFFVStripSize64 ( tif , nrows )
LVAL	132:1	132:1	6	m
FIELD	132:1	132:1	7	m
LEAF_NODE	132:1	132:1	8	m
ASSIGN_OP	132:2	132:2	6	=
LEAF_NODE	132:2	132:2	7	=
RVAL	132:3	132:3	6	TIFFVStripSize64 ( tif , nrows )
FUNCTION_CALL	132:3	132:29	7	TIFFVStripSize64 ( tif , nrows )
CALLEE	132:3	132:3	8	TIFFVStripSize64
LEAF_NODE	132:3	132:3	9	TIFFVStripSize64
LEAF_NODE	132:19	132:19	8	(
ARGUMENT	132:20	132:20	8	tif
FIELD	132:20	132:20	9	tif
LEAF_NODE	132:20	132:20	10	tif
LEAF_NODE	132:23	132:23	8	,
ARGUMENT	132:24	132:24	8	nrows
FIELD	132:24	132:24	9	nrows
LEAF_NODE	132:24	132:24	10	nrows
LEAF_NODE	132:29	132:29	8	)
LEAF_NODE	132:30	132:30	4	;
JUMP_STATEMENT	133:8	133:53	3	return _TIFFCastUInt64ToSSize ( tif , m , module ) ;
KEYWORD	133:8	133:8	4	return
LEAF_NODE	133:8	133:8	5	return
DESTINATION	133:15	133:15	4	_TIFFCastUInt64ToSSize ( tif , m , module )
EXPR	133:15	133:15	5	_TIFFCastUInt64ToSSize ( tif , m , module )
FUNCTION_CALL	133:15	133:52	6	_TIFFCastUInt64ToSSize ( tif , m , module )
CALLEE	133:15	133:15	7	_TIFFCastUInt64ToSSize
LEAF_NODE	133:15	133:15	8	_TIFFCastUInt64ToSSize
LEAF_NODE	133:37	133:37	7	(
ARGUMENT	133:38	133:38	7	tif
FIELD	133:38	133:38	8	tif
LEAF_NODE	133:38	133:38	9	tif
LEAF_NODE	133:41	133:41	7	,
ARGUMENT	133:43	133:43	7	m
FIELD	133:43	133:43	8	m
LEAF_NODE	133:43	133:43	9	m
LEAF_NODE	133:44	133:44	7	,
ARGUMENT	133:46	133:46	7	module
FIELD	133:46	133:46	8	module
LEAF_NODE	133:46	133:46	9	module
LEAF_NODE	133:52	133:52	7	)
LEAF_NODE	133:53	133:53	4	;
LEAF_NODE	134:0	134:0	2	}
FUNCTION_DEF	139:0	162:0	1	
RETURN_TYPE	139:0	139:0	2	uint64
TYPE_NAME	139:0	139:0	3	uint64
LEAF_NODE	139:0	139:0	4	uint64
FUNCTION_NAME	140:0	140:0	2	TIFFRawStripSize64
LEAF_NODE	140:0	140:0	3	TIFFRawStripSize64
PARAMETER_LIST	140:18	140:42	2	( TIFF * tif , uint32 strip )
LEAF_NODE	140:18	140:18	3	(
PARAMETER_DECL	140:19	140:25	3	TIFF * tif
TYPE	140:19	140:23	4	TIFF *
TYPE_NAME	140:19	140:19	5	TIFF
LEAF_NODE	140:19	140:19	6	TIFF
POINTER	140:23	140:23	5	*
LEAF_NODE	140:23	140:23	6	*
NAME	140:25	140:25	4	tif
LEAF_NODE	140:25	140:25	5	tif
LEAF_NODE	140:28	140:28	3	,
PARAMETER_DECL	140:30	140:37	3	uint32 strip
TYPE	140:30	140:30	4	uint32
TYPE_NAME	140:30	140:30	5	uint32
LEAF_NODE	140:30	140:30	6	uint32
NAME	140:37	140:37	4	strip
LEAF_NODE	140:37	140:37	5	strip
LEAF_NODE	140:42	140:42	3	)
LEAF_NODE	141:0	141:0	2	{
STATEMENTS	142:1	161:1	2	
LEAF_NODE	142:1	142:1	3	static
SIMPLE_DECL	142:8	142:50	3	const char [ ] module ; module = "TIFFRawStripSize64" ;
VAR_DECL	142:8	142:19	4	const char [ ] module ; module = "TIFFRawStripSize64"
TYPE	142:8	142:25	5	const char [ ]
TYPE_NAME	142:8	142:14	6	const char
LEAF_NODE	142:8	142:8	7	const
LEAF_NODE	142:14	142:14	7	char
TYPE_SUFFIX	142:25	142:26	6	[ ]
LEAF_NODE	142:25	142:25	7	[
LEAF_NODE	142:26	142:26	7	]
NAME	142:19	142:19	5	module
LEAF_NODE	142:19	142:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	142:19	142:19	5	module = "TIFFRawStripSize64"
ASSIGN	142:19	142:30	6	module = "TIFFRawStripSize64"
LVAL	142:19	142:19	7	module
NAME	142:19	142:19	8	module
LEAF_NODE	142:19	142:19	9	module
ASSIGN_OP	142:28	142:28	7	=
LEAF_NODE	142:28	142:28	8	=
RVAL	142:30	142:30	7	"TIFFRawStripSize64"
FIELD	142:30	142:30	8	"TIFFRawStripSize64"
LEAF_NODE	142:30	142:30	9	"TIFFRawStripSize64"
LEAF_NODE	142:50	142:50	4	;
SIMPLE_DECL	143:1	143:54	3	uint64 bytecount ; bytecount = TIFFGetStrileByteCount ( tif , strip ) ;
VAR_DECL	143:1	143:8	4	uint64 bytecount ; bytecount = TIFFGetStrileByteCount ( tif , strip )
TYPE	143:1	143:1	5	uint64
TYPE_NAME	143:1	143:1	6	uint64
LEAF_NODE	143:1	143:1	7	uint64
NAME	143:8	143:8	5	bytecount
LEAF_NODE	143:8	143:8	6	bytecount
LEAF_NODE	0:0	0:0	5	;
INIT	143:8	143:8	5	bytecount = TIFFGetStrileByteCount ( tif , strip )
ASSIGN	143:8	143:20	6	bytecount = TIFFGetStrileByteCount ( tif , strip )
LVAL	143:8	143:8	7	bytecount
NAME	143:8	143:8	8	bytecount
LEAF_NODE	143:8	143:8	9	bytecount
ASSIGN_OP	143:18	143:18	7	=
LEAF_NODE	143:18	143:18	8	=
RVAL	143:20	143:20	7	TIFFGetStrileByteCount ( tif , strip )
FUNCTION_CALL	143:20	143:53	8	TIFFGetStrileByteCount ( tif , strip )
CALLEE	143:20	143:20	9	TIFFGetStrileByteCount
LEAF_NODE	143:20	143:20	10	TIFFGetStrileByteCount
LEAF_NODE	143:42	143:42	9	(
ARGUMENT	143:43	143:43	9	tif
FIELD	143:43	143:43	10	tif
LEAF_NODE	143:43	143:43	11	tif
LEAF_NODE	143:46	143:46	9	,
ARGUMENT	143:48	143:48	9	strip
FIELD	143:48	143:48	10	strip
LEAF_NODE	143:48	143:48	11	strip
LEAF_NODE	143:53	143:53	9	)
LEAF_NODE	143:54	143:54	4	;
SELECTION	145:1	146:1	3	
KEYWORD	145:1	145:1	4	if
LEAF_NODE	145:1	145:1	5	if
LEAF_NODE	145:4	145:4	4	(
CONDITION	145:5	145:5	4	bytecount == 0
EXPR	145:5	145:18	5	bytecount == 0
FIELD	145:5	145:5	6	bytecount
LEAF_NODE	145:5	145:5	7	bytecount
EQ_OPERATOR	145:15	145:15	6	==
LEAF_NODE	145:15	145:15	7	==
FIELD	145:18	145:18	6	0
LEAF_NODE	145:18	145:18	7	0
LEAF_NODE	145:19	145:19	4	)
STATEMENTS	146:1	159:1	4	
LEAF_NODE	146:1	146:1	5	{
STATEMENTS	148:2	158:2	5	
EXPR_STATEMENT	148:2	151:30	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%I64u: Invalid strip byte count, strip %lu" , ( unsigned __int64 ) bytecount , ( unsigned long ) strip ) ;
EXPR	148:2	148:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%I64u: Invalid strip byte count, strip %lu" , ( unsigned __int64 ) bytecount , ( unsigned long ) strip )
FUNCTION_CALL	148:2	151:29	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%I64u: Invalid strip byte count, strip %lu" , ( unsigned __int64 ) bytecount , ( unsigned long ) strip )
CALLEE	148:2	148:2	9	TIFFErrorExt
LEAF_NODE	148:2	148:2	10	TIFFErrorExt
LEAF_NODE	148:14	148:14	9	(
ARGUMENT	148:15	148:15	9	tif -> tif_clientdata
FIELD	148:15	148:20	10	tif -> tif_clientdata
LEAF_NODE	148:15	148:15	11	tif
LEAF_NODE	148:18	148:18	11	->
LEAF_NODE	148:20	148:20	11	tif_clientdata
LEAF_NODE	148:34	148:34	9	,
ARGUMENT	148:36	148:36	9	module
FIELD	148:36	148:36	10	module
LEAF_NODE	148:36	148:36	11	module
LEAF_NODE	148:42	148:42	9	,
ARGUMENT	149:8	149:8	9	"%I64u: Invalid strip byte count, strip %lu"
FIELD	149:8	149:8	10	"%I64u: Invalid strip byte count, strip %lu"
LEAF_NODE	149:8	149:8	11	"%I64u: Invalid strip byte count, strip %lu"
LEAF_NODE	149:52	149:52	9	,
ARGUMENT	150:8	150:27	9	( unsigned __int64 ) bytecount
LEAF_NODE	150:8	150:8	10	(
TYPE_NAME	150:9	150:18	10	unsigned __int64
LEAF_NODE	150:9	150:9	11	unsigned
LEAF_NODE	150:18	150:18	11	__int64
LEAF_NODE	150:25	150:25	10	)
FIELD	150:27	150:27	10	bytecount
LEAF_NODE	150:27	150:27	11	bytecount
LEAF_NODE	150:36	150:36	9	,
ARGUMENT	151:8	151:24	9	( unsigned long ) strip
LEAF_NODE	151:8	151:8	10	(
TYPE_NAME	151:9	151:18	10	unsigned long
LEAF_NODE	151:9	151:9	11	unsigned
LEAF_NODE	151:18	151:18	11	long
LEAF_NODE	151:22	151:22	10	)
FIELD	151:24	151:24	10	strip
LEAF_NODE	151:24	151:24	11	strip
LEAF_NODE	151:29	151:29	9	)
LEAF_NODE	151:30	151:30	7	;
LEAF_NODE	153:2	153:2	6	TIFFErrorExt
LEAF_NODE	153:14	153:14	6	(
LEAF_NODE	153:15	153:15	6	tif
LEAF_NODE	153:18	153:18	6	->
LEAF_NODE	153:20	153:20	6	tif_clientdata
LEAF_NODE	153:34	153:34	6	,
LEAF_NODE	153:36	153:36	6	module
LEAF_NODE	153:42	153:42	6	,
LEAF_NODE	154:8	154:8	6	"%llu: Invalid strip byte count, strip %lu"
LEAF_NODE	154:51	154:51	6	,
LEAF_NODE	155:8	155:8	6	(
LEAF_NODE	155:9	155:9	6	unsigned
LEAF_NODE	155:18	155:18	6	long
LEAF_NODE	155:23	155:23	6	long
LEAF_NODE	155:27	155:27	6	)
LEAF_NODE	155:29	155:29	6	bytecount
LEAF_NODE	155:38	155:38	6	,
LEAF_NODE	156:8	156:8	6	(
LEAF_NODE	156:9	156:9	6	unsigned
LEAF_NODE	156:18	156:18	6	long
LEAF_NODE	156:22	156:22	6	)
LEAF_NODE	156:24	156:24	6	strip
LEAF_NODE	156:29	156:29	6	)
LEAF_NODE	156:30	156:30	6	;
EXPR_STATEMENT	158:2	158:25	6	bytecount = ( uint64 ) - 1 ;
EXPR	158:2	158:2	7	bytecount = ( uint64 ) - 1
ASSIGN	158:2	158:14	8	bytecount = ( uint64 ) - 1
LVAL	158:2	158:2	9	bytecount
FIELD	158:2	158:2	10	bytecount
LEAF_NODE	158:2	158:2	11	bytecount
ASSIGN_OP	158:12	158:12	9	=
LEAF_NODE	158:12	158:12	10	=
RVAL	158:14	158:23	9	( uint64 ) - 1
LEAF_NODE	158:14	158:14	10	(
TYPE_NAME	158:15	158:15	10	uint64
LEAF_NODE	158:15	158:15	11	uint64
LEAF_NODE	158:21	158:21	10	)
UNARY_EXPR	158:23	158:24	10	- 1
UNARY_OPERATOR	158:23	158:23	11	-
LEAF_NODE	158:23	158:23	12	-
FIELD	158:24	158:24	11	1
LEAF_NODE	158:24	158:24	12	1
LEAF_NODE	158:25	158:25	7	;
LEAF_NODE	159:1	159:1	5	}
JUMP_STATEMENT	161:1	161:17	3	return bytecount ;
KEYWORD	161:1	161:1	4	return
LEAF_NODE	161:1	161:1	5	return
DESTINATION	161:8	161:8	4	bytecount
EXPR	161:8	161:8	5	bytecount
FIELD	161:8	161:8	6	bytecount
LEAF_NODE	161:8	161:8	7	bytecount
LEAF_NODE	161:17	161:17	4	;
LEAF_NODE	162:0	162:0	2	}
FUNCTION_DEF	163:0	182:0	1	
RETURN_TYPE	163:0	163:0	2	tmsize_t
TYPE_NAME	163:0	163:0	3	tmsize_t
LEAF_NODE	163:0	163:0	4	tmsize_t
FUNCTION_NAME	164:0	164:0	2	TIFFRawStripSize
LEAF_NODE	164:0	164:0	3	TIFFRawStripSize
PARAMETER_LIST	164:16	164:40	2	( TIFF * tif , uint32 strip )
LEAF_NODE	164:16	164:16	3	(
PARAMETER_DECL	164:17	164:23	3	TIFF * tif
TYPE	164:17	164:21	4	TIFF *
TYPE_NAME	164:17	164:17	5	TIFF
LEAF_NODE	164:17	164:17	6	TIFF
POINTER	164:21	164:21	5	*
LEAF_NODE	164:21	164:21	6	*
NAME	164:23	164:23	4	tif
LEAF_NODE	164:23	164:23	5	tif
LEAF_NODE	164:26	164:26	3	,
PARAMETER_DECL	164:28	164:35	3	uint32 strip
TYPE	164:28	164:28	4	uint32
TYPE_NAME	164:28	164:28	5	uint32
LEAF_NODE	164:28	164:28	6	uint32
NAME	164:35	164:35	4	strip
LEAF_NODE	164:35	164:35	5	strip
LEAF_NODE	164:40	164:40	3	)
LEAF_NODE	165:0	165:0	2	{
STATEMENTS	166:1	181:10	2	
LEAF_NODE	166:1	166:1	3	static
SIMPLE_DECL	166:8	166:48	3	const char [ ] module ; module = "TIFFRawStripSize" ;
VAR_DECL	166:8	166:19	4	const char [ ] module ; module = "TIFFRawStripSize"
TYPE	166:8	166:25	5	const char [ ]
TYPE_NAME	166:8	166:14	6	const char
LEAF_NODE	166:8	166:8	7	const
LEAF_NODE	166:14	166:14	7	char
TYPE_SUFFIX	166:25	166:26	6	[ ]
LEAF_NODE	166:25	166:25	7	[
LEAF_NODE	166:26	166:26	7	]
NAME	166:19	166:19	5	module
LEAF_NODE	166:19	166:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	166:19	166:19	5	module = "TIFFRawStripSize"
ASSIGN	166:19	166:30	6	module = "TIFFRawStripSize"
LVAL	166:19	166:19	7	module
NAME	166:19	166:19	8	module
LEAF_NODE	166:19	166:19	9	module
ASSIGN_OP	166:28	166:28	7	=
LEAF_NODE	166:28	166:28	8	=
RVAL	166:30	166:30	7	"TIFFRawStripSize"
FIELD	166:30	166:30	8	"TIFFRawStripSize"
LEAF_NODE	166:30	166:30	9	"TIFFRawStripSize"
LEAF_NODE	166:48	166:48	4	;
SIMPLE_DECL	167:1	167:9	3	uint64 m ;
VAR_DECL	167:1	167:8	4	uint64 m
TYPE	167:1	167:1	5	uint64
TYPE_NAME	167:1	167:1	6	uint64
LEAF_NODE	167:1	167:1	7	uint64
NAME	167:8	167:8	5	m
LEAF_NODE	167:8	167:8	6	m
LEAF_NODE	167:9	167:9	4	;
SIMPLE_DECL	168:1	168:11	3	tmsize_t n ;
VAR_DECL	168:1	168:10	4	tmsize_t n
TYPE	168:1	168:1	5	tmsize_t
TYPE_NAME	168:1	168:1	6	tmsize_t
LEAF_NODE	168:1	168:1	7	tmsize_t
NAME	168:10	168:10	5	n
LEAF_NODE	168:10	168:10	6	n
LEAF_NODE	168:11	168:11	4	;
EXPR_STATEMENT	169:1	169:32	3	m = TIFFRawStripSize64 ( tif , strip ) ;
EXPR	169:1	169:1	4	m = TIFFRawStripSize64 ( tif , strip )
ASSIGN	169:1	169:3	5	m = TIFFRawStripSize64 ( tif , strip )
LVAL	169:1	169:1	6	m
FIELD	169:1	169:1	7	m
LEAF_NODE	169:1	169:1	8	m
ASSIGN_OP	169:2	169:2	6	=
LEAF_NODE	169:2	169:2	7	=
RVAL	169:3	169:3	6	TIFFRawStripSize64 ( tif , strip )
FUNCTION_CALL	169:3	169:31	7	TIFFRawStripSize64 ( tif , strip )
CALLEE	169:3	169:3	8	TIFFRawStripSize64
LEAF_NODE	169:3	169:3	9	TIFFRawStripSize64
LEAF_NODE	169:21	169:21	8	(
ARGUMENT	169:22	169:22	8	tif
FIELD	169:22	169:22	9	tif
LEAF_NODE	169:22	169:22	10	tif
LEAF_NODE	169:25	169:25	8	,
ARGUMENT	169:26	169:26	8	strip
FIELD	169:26	169:26	9	strip
LEAF_NODE	169:26	169:26	10	strip
LEAF_NODE	169:31	169:31	8	)
LEAF_NODE	169:32	169:32	4	;
SELECTION	170:1	171:2	3	
KEYWORD	170:1	170:1	4	if
LEAF_NODE	170:1	170:1	5	if
LEAF_NODE	170:4	170:4	4	(
CONDITION	170:5	170:5	4	m == ( uint64 ) ( - 1 )
EXPR	170:5	170:19	5	m == ( uint64 ) ( - 1 )
FIELD	170:5	170:5	6	m
LEAF_NODE	170:5	170:5	7	m
EQ_OPERATOR	170:6	170:6	6	==
LEAF_NODE	170:6	170:6	7	==
LEAF_NODE	170:8	170:8	6	(
TYPE_NAME	170:9	170:9	6	uint64
LEAF_NODE	170:9	170:9	7	uint64
LEAF_NODE	170:15	170:15	6	)
LEAF_NODE	170:16	170:16	6	(
UNARY_EXPR	170:17	170:18	6	- 1
UNARY_OPERATOR	170:17	170:17	7	-
LEAF_NODE	170:17	170:17	8	-
FIELD	170:18	170:18	7	1
LEAF_NODE	170:18	170:18	8	1
LEAF_NODE	170:19	170:19	6	)
LEAF_NODE	170:20	170:20	4	)
STATEMENTS	171:2	171:2	4	
EXPR_STATEMENT	171:2	171:18	5	n = ( tmsize_t ) ( - 1 ) ;
EXPR	171:2	171:2	6	n = ( tmsize_t ) ( - 1 )
ASSIGN	171:2	171:4	7	n = ( tmsize_t ) ( - 1 )
LVAL	171:2	171:2	8	n
FIELD	171:2	171:2	9	n
LEAF_NODE	171:2	171:2	10	n
ASSIGN_OP	171:3	171:3	8	=
LEAF_NODE	171:3	171:3	9	=
RVAL	171:4	171:17	8	( tmsize_t ) ( - 1 )
LEAF_NODE	171:4	171:4	9	(
TYPE_NAME	171:5	171:5	9	tmsize_t
LEAF_NODE	171:5	171:5	10	tmsize_t
LEAF_NODE	171:13	171:13	9	)
LEAF_NODE	171:14	171:14	9	(
UNARY_EXPR	171:15	171:16	9	- 1
UNARY_OPERATOR	171:15	171:15	10	-
LEAF_NODE	171:15	171:15	11	-
FIELD	171:16	171:16	10	1
LEAF_NODE	171:16	171:16	11	1
LEAF_NODE	171:17	171:17	9	)
LEAF_NODE	171:18	171:18	6	;
SELECTION	172:1	173:1	3	
KEYWORD	172:1	172:1	4	else
LEAF_NODE	172:1	172:1	5	else
STATEMENTS	173:1	180:1	4	
LEAF_NODE	173:1	173:1	5	{
STATEMENTS	174:2	175:2	5	
EXPR_STATEMENT	174:2	174:15	6	n = ( tmsize_t ) m ;
EXPR	174:2	174:2	7	n = ( tmsize_t ) m
ASSIGN	174:2	174:4	8	n = ( tmsize_t ) m
LVAL	174:2	174:2	9	n
FIELD	174:2	174:2	10	n
LEAF_NODE	174:2	174:2	11	n
ASSIGN_OP	174:3	174:3	9	=
LEAF_NODE	174:3	174:3	10	=
RVAL	174:4	174:14	9	( tmsize_t ) m
LEAF_NODE	174:4	174:4	10	(
TYPE_NAME	174:5	174:5	10	tmsize_t
LEAF_NODE	174:5	174:5	11	tmsize_t
LEAF_NODE	174:13	174:13	10	)
FIELD	174:14	174:14	10	m
LEAF_NODE	174:14	174:14	11	m
LEAF_NODE	174:15	174:15	7	;
SELECTION	175:2	176:2	6	
KEYWORD	175:2	175:2	7	if
LEAF_NODE	175:2	175:2	8	if
LEAF_NODE	175:5	175:5	7	(
CONDITION	175:6	175:6	7	( uint64 ) n != m
EXPR	175:6	175:17	8	( uint64 ) n != m
LEAF_NODE	175:6	175:6	9	(
TYPE_NAME	175:7	175:7	9	uint64
LEAF_NODE	175:7	175:7	10	uint64
LEAF_NODE	175:13	175:13	9	)
FIELD	175:14	175:14	9	n
LEAF_NODE	175:14	175:14	10	n
EQ_OPERATOR	175:15	175:15	9	!=
LEAF_NODE	175:15	175:15	10	!=
FIELD	175:17	175:17	9	m
LEAF_NODE	175:17	175:17	10	m
LEAF_NODE	175:18	175:18	7	)
STATEMENTS	176:2	179:2	7	
LEAF_NODE	176:2	176:2	8	{
STATEMENTS	177:3	178:3	8	
EXPR_STATEMENT	177:3	177:62	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" ) ;
EXPR	177:3	177:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" )
FUNCTION_CALL	177:3	177:61	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" )
CALLEE	177:3	177:3	12	TIFFErrorExt
LEAF_NODE	177:3	177:3	13	TIFFErrorExt
LEAF_NODE	177:15	177:15	12	(
ARGUMENT	177:16	177:16	12	tif -> tif_clientdata
FIELD	177:16	177:21	13	tif -> tif_clientdata
LEAF_NODE	177:16	177:16	14	tif
LEAF_NODE	177:19	177:19	14	->
LEAF_NODE	177:21	177:21	14	tif_clientdata
LEAF_NODE	177:35	177:35	12	,
ARGUMENT	177:36	177:36	12	module
FIELD	177:36	177:36	13	module
LEAF_NODE	177:36	177:36	14	module
LEAF_NODE	177:42	177:42	12	,
ARGUMENT	177:43	177:43	12	"Integer overflow"
FIELD	177:43	177:43	13	"Integer overflow"
LEAF_NODE	177:43	177:43	14	"Integer overflow"
LEAF_NODE	177:61	177:61	12	)
LEAF_NODE	177:62	177:62	10	;
EXPR_STATEMENT	178:3	178:6	9	n = 0 ;
EXPR	178:3	178:3	10	n = 0
ASSIGN	178:3	178:5	11	n = 0
LVAL	178:3	178:3	12	n
FIELD	178:3	178:3	13	n
LEAF_NODE	178:3	178:3	14	n
ASSIGN_OP	178:4	178:4	12	=
LEAF_NODE	178:4	178:4	13	=
RVAL	178:5	178:5	12	0
FIELD	178:5	178:5	13	0
LEAF_NODE	178:5	178:5	14	0
LEAF_NODE	178:6	178:6	10	;
LEAF_NODE	179:2	179:2	8	}
LEAF_NODE	180:1	180:1	5	}
LEAF_NODE	181:1	181:1	3	return
LEAF_NODE	181:7	181:7	3	(
LEAF_NODE	181:8	181:8	3	n
LEAF_NODE	181:9	181:9	3	)
LEAF_NODE	181:10	181:10	3	;
LEAF_NODE	182:0	182:0	2	}
FUNCTION_DEF	192:0	200:0	1	
RETURN_TYPE	192:0	192:0	2	uint64
TYPE_NAME	192:0	192:0	3	uint64
LEAF_NODE	192:0	192:0	4	uint64
FUNCTION_NAME	193:0	193:0	2	TIFFStripSize64
LEAF_NODE	193:0	193:0	3	TIFFStripSize64
PARAMETER_LIST	193:15	193:25	2	( TIFF * tif )
LEAF_NODE	193:15	193:15	3	(
PARAMETER_DECL	193:16	193:22	3	TIFF * tif
TYPE	193:16	193:20	4	TIFF *
TYPE_NAME	193:16	193:16	5	TIFF
LEAF_NODE	193:16	193:16	6	TIFF
POINTER	193:20	193:20	5	*
LEAF_NODE	193:20	193:20	6	*
NAME	193:22	193:22	4	tif
LEAF_NODE	193:22	193:22	5	tif
LEAF_NODE	193:25	193:25	3	)
LEAF_NODE	194:0	194:0	2	{
STATEMENTS	195:1	199:1	2	
SIMPLE_DECL	195:1	195:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	195:1	195:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	195:1	195:14	5	TIFFDirectory *
TYPE_NAME	195:1	195:1	6	TIFFDirectory
LEAF_NODE	195:1	195:1	7	TIFFDirectory
POINTER	195:14	195:14	6	*
LEAF_NODE	195:14	195:14	7	*
NAME	195:16	195:16	5	td
LEAF_NODE	195:16	195:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	195:16	195:16	5	td = & tif -> tif_dir
ASSIGN	195:16	195:21	6	td = & tif -> tif_dir
LVAL	195:16	195:16	7	td
NAME	195:16	195:16	8	td
LEAF_NODE	195:16	195:16	9	td
ASSIGN_OP	195:19	195:19	7	=
LEAF_NODE	195:19	195:19	8	=
RVAL	195:21	195:21	7	& tif -> tif_dir
UNARY_EXPR	195:21	195:22	8	& tif -> tif_dir
UNARY_OPERATOR	195:21	195:21	9	&
LEAF_NODE	195:21	195:21	10	&
FIELD	195:22	195:27	9	tif -> tif_dir
LEAF_NODE	195:22	195:22	10	tif
LEAF_NODE	195:25	195:25	10	->
LEAF_NODE	195:27	195:27	10	tif_dir
LEAF_NODE	195:34	195:34	4	;
SIMPLE_DECL	196:1	196:33	3	uint32 rps ; rps = td -> td_rowsperstrip ;
VAR_DECL	196:1	196:8	4	uint32 rps ; rps = td -> td_rowsperstrip
TYPE	196:1	196:1	5	uint32
TYPE_NAME	196:1	196:1	6	uint32
LEAF_NODE	196:1	196:1	7	uint32
NAME	196:8	196:8	5	rps
LEAF_NODE	196:8	196:8	6	rps
LEAF_NODE	0:0	0:0	5	;
INIT	196:8	196:8	5	rps = td -> td_rowsperstrip
ASSIGN	196:8	196:14	6	rps = td -> td_rowsperstrip
LVAL	196:8	196:8	7	rps
NAME	196:8	196:8	8	rps
LEAF_NODE	196:8	196:8	9	rps
ASSIGN_OP	196:12	196:12	7	=
LEAF_NODE	196:12	196:12	8	=
RVAL	196:14	196:14	7	td -> td_rowsperstrip
FIELD	196:14	196:18	8	td -> td_rowsperstrip
LEAF_NODE	196:14	196:14	9	td
LEAF_NODE	196:16	196:16	9	->
LEAF_NODE	196:18	196:18	9	td_rowsperstrip
LEAF_NODE	196:33	196:33	4	;
SELECTION	197:1	198:2	3	
KEYWORD	197:1	197:1	4	if
LEAF_NODE	197:1	197:1	5	if
LEAF_NODE	197:4	197:4	4	(
CONDITION	197:5	197:5	4	rps > td -> td_imagelength
EXPR	197:5	197:11	5	rps > td -> td_imagelength
FIELD	197:5	197:5	6	rps
LEAF_NODE	197:5	197:5	7	rps
REL_OPERATOR	197:9	197:9	6	>
LEAF_NODE	197:9	197:9	7	>
FIELD	197:11	197:15	6	td -> td_imagelength
LEAF_NODE	197:11	197:11	7	td
LEAF_NODE	197:13	197:13	7	->
LEAF_NODE	197:15	197:15	7	td_imagelength
LEAF_NODE	197:29	197:29	4	)
STATEMENTS	198:2	198:2	4	
EXPR_STATEMENT	198:2	198:26	5	rps = td -> td_imagelength ;
EXPR	198:2	198:2	6	rps = td -> td_imagelength
ASSIGN	198:2	198:8	7	rps = td -> td_imagelength
LVAL	198:2	198:2	8	rps
FIELD	198:2	198:2	9	rps
LEAF_NODE	198:2	198:2	10	rps
ASSIGN_OP	198:6	198:6	8	=
LEAF_NODE	198:6	198:6	9	=
RVAL	198:8	198:8	8	td -> td_imagelength
FIELD	198:8	198:12	9	td -> td_imagelength
LEAF_NODE	198:8	198:8	10	td
LEAF_NODE	198:10	198:10	10	->
LEAF_NODE	198:12	198:12	10	td_imagelength
LEAF_NODE	198:26	198:26	6	;
JUMP_STATEMENT	199:1	199:36	3	return ( TIFFVStripSize64 ( tif , rps ) ) ;
KEYWORD	199:1	199:1	4	return
LEAF_NODE	199:1	199:1	5	return
DESTINATION	199:8	199:8	4	( TIFFVStripSize64 ( tif , rps ) )
EXPR	199:8	199:35	5	( TIFFVStripSize64 ( tif , rps ) )
LEAF_NODE	199:8	199:8	6	(
FUNCTION_CALL	199:9	199:34	6	TIFFVStripSize64 ( tif , rps )
CALLEE	199:9	199:9	7	TIFFVStripSize64
LEAF_NODE	199:9	199:9	8	TIFFVStripSize64
LEAF_NODE	199:25	199:25	7	(
ARGUMENT	199:26	199:26	7	tif
FIELD	199:26	199:26	8	tif
LEAF_NODE	199:26	199:26	9	tif
LEAF_NODE	199:29	199:29	7	,
ARGUMENT	199:31	199:31	7	rps
FIELD	199:31	199:31	8	rps
LEAF_NODE	199:31	199:31	9	rps
LEAF_NODE	199:34	199:34	7	)
LEAF_NODE	199:35	199:35	6	)
LEAF_NODE	199:36	199:36	4	;
LEAF_NODE	200:0	200:0	2	}
FUNCTION_DEF	201:0	208:0	1	
RETURN_TYPE	201:0	201:0	2	tmsize_t
TYPE_NAME	201:0	201:0	3	tmsize_t
LEAF_NODE	201:0	201:0	4	tmsize_t
FUNCTION_NAME	202:0	202:0	2	TIFFStripSize
LEAF_NODE	202:0	202:0	3	TIFFStripSize
PARAMETER_LIST	202:13	202:23	2	( TIFF * tif )
LEAF_NODE	202:13	202:13	3	(
PARAMETER_DECL	202:14	202:20	3	TIFF * tif
TYPE	202:14	202:18	4	TIFF *
TYPE_NAME	202:14	202:14	5	TIFF
LEAF_NODE	202:14	202:14	6	TIFF
POINTER	202:18	202:18	5	*
LEAF_NODE	202:18	202:18	6	*
NAME	202:20	202:20	4	tif
LEAF_NODE	202:20	202:20	5	tif
LEAF_NODE	202:23	202:23	3	)
LEAF_NODE	203:0	203:0	2	{
STATEMENTS	204:1	207:1	2	
LEAF_NODE	204:1	204:1	3	static
SIMPLE_DECL	204:8	204:45	3	const char [ ] module ; module = "TIFFStripSize" ;
VAR_DECL	204:8	204:19	4	const char [ ] module ; module = "TIFFStripSize"
TYPE	204:8	204:25	5	const char [ ]
TYPE_NAME	204:8	204:14	6	const char
LEAF_NODE	204:8	204:8	7	const
LEAF_NODE	204:14	204:14	7	char
TYPE_SUFFIX	204:25	204:26	6	[ ]
LEAF_NODE	204:25	204:25	7	[
LEAF_NODE	204:26	204:26	7	]
NAME	204:19	204:19	5	module
LEAF_NODE	204:19	204:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	204:19	204:19	5	module = "TIFFStripSize"
ASSIGN	204:19	204:30	6	module = "TIFFStripSize"
LVAL	204:19	204:19	7	module
NAME	204:19	204:19	8	module
LEAF_NODE	204:19	204:19	9	module
ASSIGN_OP	204:28	204:28	7	=
LEAF_NODE	204:28	204:28	8	=
RVAL	204:30	204:30	7	"TIFFStripSize"
FIELD	204:30	204:30	8	"TIFFStripSize"
LEAF_NODE	204:30	204:30	9	"TIFFStripSize"
LEAF_NODE	204:45	204:45	4	;
SIMPLE_DECL	205:1	205:9	3	uint64 m ;
VAR_DECL	205:1	205:8	4	uint64 m
TYPE	205:1	205:1	5	uint64
TYPE_NAME	205:1	205:1	6	uint64
LEAF_NODE	205:1	205:1	7	uint64
NAME	205:8	205:8	5	m
LEAF_NODE	205:8	205:8	6	m
LEAF_NODE	205:9	205:9	4	;
EXPR_STATEMENT	206:1	206:23	3	m = TIFFStripSize64 ( tif ) ;
EXPR	206:1	206:1	4	m = TIFFStripSize64 ( tif )
ASSIGN	206:1	206:3	5	m = TIFFStripSize64 ( tif )
LVAL	206:1	206:1	6	m
FIELD	206:1	206:1	7	m
LEAF_NODE	206:1	206:1	8	m
ASSIGN_OP	206:2	206:2	6	=
LEAF_NODE	206:2	206:2	7	=
RVAL	206:3	206:3	6	TIFFStripSize64 ( tif )
FUNCTION_CALL	206:3	206:22	7	TIFFStripSize64 ( tif )
CALLEE	206:3	206:3	8	TIFFStripSize64
LEAF_NODE	206:3	206:3	9	TIFFStripSize64
LEAF_NODE	206:18	206:18	8	(
ARGUMENT	206:19	206:19	8	tif
FIELD	206:19	206:19	9	tif
LEAF_NODE	206:19	206:19	10	tif
LEAF_NODE	206:22	206:22	8	)
LEAF_NODE	206:23	206:23	4	;
JUMP_STATEMENT	207:1	207:46	3	return _TIFFCastUInt64ToSSize ( tif , m , module ) ;
KEYWORD	207:1	207:1	4	return
LEAF_NODE	207:1	207:1	5	return
DESTINATION	207:8	207:8	4	_TIFFCastUInt64ToSSize ( tif , m , module )
EXPR	207:8	207:8	5	_TIFFCastUInt64ToSSize ( tif , m , module )
FUNCTION_CALL	207:8	207:45	6	_TIFFCastUInt64ToSSize ( tif , m , module )
CALLEE	207:8	207:8	7	_TIFFCastUInt64ToSSize
LEAF_NODE	207:8	207:8	8	_TIFFCastUInt64ToSSize
LEAF_NODE	207:30	207:30	7	(
ARGUMENT	207:31	207:31	7	tif
FIELD	207:31	207:31	8	tif
LEAF_NODE	207:31	207:31	9	tif
LEAF_NODE	207:34	207:34	7	,
ARGUMENT	207:36	207:36	7	m
FIELD	207:36	207:36	8	m
LEAF_NODE	207:36	207:36	9	m
LEAF_NODE	207:37	207:37	7	,
ARGUMENT	207:39	207:39	7	module
FIELD	207:39	207:39	8	module
LEAF_NODE	207:39	207:39	9	module
LEAF_NODE	207:45	207:45	7	)
LEAF_NODE	207:46	207:46	4	;
LEAF_NODE	208:0	208:0	2	}
FUNCTION_DEF	216:0	220:0	1	
RETURN_TYPE	216:0	216:0	2	uint32
TYPE_NAME	216:0	216:0	3	uint32
LEAF_NODE	216:0	216:0	4	uint32
FUNCTION_NAME	217:0	217:0	2	TIFFDefaultStripSize
LEAF_NODE	217:0	217:0	3	TIFFDefaultStripSize
PARAMETER_LIST	217:20	217:46	2	( TIFF * tif , uint32 request )
LEAF_NODE	217:20	217:20	3	(
PARAMETER_DECL	217:21	217:27	3	TIFF * tif
TYPE	217:21	217:25	4	TIFF *
TYPE_NAME	217:21	217:21	5	TIFF
LEAF_NODE	217:21	217:21	6	TIFF
POINTER	217:25	217:25	5	*
LEAF_NODE	217:25	217:25	6	*
NAME	217:27	217:27	4	tif
LEAF_NODE	217:27	217:27	5	tif
LEAF_NODE	217:30	217:30	3	,
PARAMETER_DECL	217:32	217:39	3	uint32 request
TYPE	217:32	217:32	4	uint32
TYPE_NAME	217:32	217:32	5	uint32
LEAF_NODE	217:32	217:32	6	uint32
NAME	217:39	217:39	4	request
LEAF_NODE	217:39	217:39	5	request
LEAF_NODE	217:46	217:46	3	)
LEAF_NODE	218:0	218:0	2	{
STATEMENTS	219:1	219:1	2	
JUMP_STATEMENT	219:1	219:46	3	return ( * tif -> tif_defstripsize ) ( tif , request ) ;
KEYWORD	219:1	219:1	4	return
LEAF_NODE	219:1	219:1	5	return
DESTINATION	219:8	219:8	4	( * tif -> tif_defstripsize ) ( tif , request )
EXPR	219:8	219:8	5	( * tif -> tif_defstripsize ) ( tif , request )
FUNCTION_CALL	219:8	219:45	6	( * tif -> tif_defstripsize ) ( tif , request )
CALLEE	219:8	219:31	7	( * tif -> tif_defstripsize )
LEAF_NODE	219:8	219:8	8	(
UNARY_EXPR	219:9	219:10	8	* tif -> tif_defstripsize
UNARY_OPERATOR	219:9	219:9	9	*
LEAF_NODE	219:9	219:9	10	*
FIELD	219:10	219:15	9	tif -> tif_defstripsize
LEAF_NODE	219:10	219:10	10	tif
LEAF_NODE	219:13	219:13	10	->
LEAF_NODE	219:15	219:15	10	tif_defstripsize
LEAF_NODE	219:31	219:31	8	)
LEAF_NODE	219:32	219:32	7	(
ARGUMENT	219:33	219:33	7	tif
FIELD	219:33	219:33	8	tif
LEAF_NODE	219:33	219:33	9	tif
LEAF_NODE	219:36	219:36	7	,
ARGUMENT	219:38	219:38	7	request
FIELD	219:38	219:38	8	request
LEAF_NODE	219:38	219:38	9	request
LEAF_NODE	219:45	219:45	7	)
LEAF_NODE	219:46	219:46	4	;
LEAF_NODE	220:0	220:0	2	}
FUNCTION_DEF	222:0	244:0	1	
RETURN_TYPE	222:0	222:0	2	uint32
TYPE_NAME	222:0	222:0	3	uint32
LEAF_NODE	222:0	222:0	4	uint32
FUNCTION_NAME	223:0	223:0	2	_TIFFDefaultStripSize
LEAF_NODE	223:0	223:0	3	_TIFFDefaultStripSize
PARAMETER_LIST	223:21	223:41	2	( TIFF * tif , uint32 s )
LEAF_NODE	223:21	223:21	3	(
PARAMETER_DECL	223:22	223:28	3	TIFF * tif
TYPE	223:22	223:26	4	TIFF *
TYPE_NAME	223:22	223:22	5	TIFF
LEAF_NODE	223:22	223:22	6	TIFF
POINTER	223:26	223:26	5	*
LEAF_NODE	223:26	223:26	6	*
NAME	223:28	223:28	4	tif
LEAF_NODE	223:28	223:28	5	tif
LEAF_NODE	223:31	223:31	3	,
PARAMETER_DECL	223:33	223:40	3	uint32 s
TYPE	223:33	223:33	4	uint32
TYPE_NAME	223:33	223:33	5	uint32
LEAF_NODE	223:33	223:33	6	uint32
NAME	223:40	223:40	4	s
LEAF_NODE	223:40	223:40	5	s
LEAF_NODE	223:41	223:41	3	)
LEAF_NODE	224:0	224:0	2	{
STATEMENTS	225:1	243:11	2	
SELECTION	225:1	225:20	3	
KEYWORD	225:1	225:1	4	if
LEAF_NODE	225:1	225:1	5	if
LEAF_NODE	225:4	225:4	4	(
CONDITION	225:5	225:5	4	( int32 ) s < 1
EXPR	225:5	225:17	5	( int32 ) s < 1
LEAF_NODE	225:5	225:5	6	(
TYPE_NAME	225:6	225:6	6	int32
LEAF_NODE	225:6	225:6	7	int32
LEAF_NODE	225:11	225:11	6	)
FIELD	225:13	225:13	6	s
LEAF_NODE	225:13	225:13	7	s
REL_OPERATOR	225:15	225:15	6	<
LEAF_NODE	225:15	225:15	7	<
FIELD	225:17	225:17	6	1
LEAF_NODE	225:17	225:17	7	1
LEAF_NODE	225:18	225:18	4	)
STATEMENTS	225:20	242:1	4	
LEAF_NODE	225:20	225:20	5	{
STATEMENTS	231:2	241:2	5	
SIMPLE_DECL	231:2	231:21	6	uint64 scanlinesize ;
VAR_DECL	231:2	231:9	7	uint64 scanlinesize
TYPE	231:2	231:2	8	uint64
TYPE_NAME	231:2	231:2	9	uint64
LEAF_NODE	231:2	231:2	10	uint64
NAME	231:9	231:9	8	scanlinesize
LEAF_NODE	231:9	231:9	9	scanlinesize
LEAF_NODE	231:21	231:21	7	;
SIMPLE_DECL	232:2	232:13	6	uint64 rows ;
VAR_DECL	232:2	232:9	7	uint64 rows
TYPE	232:2	232:2	8	uint64
TYPE_NAME	232:2	232:2	9	uint64
LEAF_NODE	232:2	232:2	10	uint64
NAME	232:9	232:9	8	rows
LEAF_NODE	232:9	232:9	9	rows
LEAF_NODE	232:13	232:13	7	;
EXPR_STATEMENT	233:2	233:38	6	scanlinesize = TIFFScanlineSize64 ( tif ) ;
EXPR	233:2	233:2	7	scanlinesize = TIFFScanlineSize64 ( tif )
ASSIGN	233:2	233:15	8	scanlinesize = TIFFScanlineSize64 ( tif )
LVAL	233:2	233:2	9	scanlinesize
FIELD	233:2	233:2	10	scanlinesize
LEAF_NODE	233:2	233:2	11	scanlinesize
ASSIGN_OP	233:14	233:14	9	=
LEAF_NODE	233:14	233:14	10	=
RVAL	233:15	233:15	9	TIFFScanlineSize64 ( tif )
FUNCTION_CALL	233:15	233:37	10	TIFFScanlineSize64 ( tif )
CALLEE	233:15	233:15	11	TIFFScanlineSize64
LEAF_NODE	233:15	233:15	12	TIFFScanlineSize64
LEAF_NODE	233:33	233:33	11	(
ARGUMENT	233:34	233:34	11	tif
FIELD	233:34	233:34	12	tif
LEAF_NODE	233:34	233:34	13	tif
LEAF_NODE	233:37	233:37	11	)
LEAF_NODE	233:38	233:38	7	;
SELECTION	234:2	235:3	6	
KEYWORD	234:2	234:2	7	if
LEAF_NODE	234:2	234:2	8	if
LEAF_NODE	234:5	234:5	7	(
CONDITION	234:6	234:6	7	scanlinesize == 0
EXPR	234:6	234:20	8	scanlinesize == 0
FIELD	234:6	234:6	9	scanlinesize
LEAF_NODE	234:6	234:6	10	scanlinesize
EQ_OPERATOR	234:18	234:18	9	==
LEAF_NODE	234:18	234:18	10	==
FIELD	234:20	234:20	9	0
LEAF_NODE	234:20	234:20	10	0
LEAF_NODE	234:21	234:21	7	)
STATEMENTS	235:3	235:3	7	
EXPR_STATEMENT	235:3	235:17	8	scanlinesize = 1 ;
EXPR	235:3	235:3	9	scanlinesize = 1
ASSIGN	235:3	235:16	10	scanlinesize = 1
LVAL	235:3	235:3	11	scanlinesize
FIELD	235:3	235:3	12	scanlinesize
LEAF_NODE	235:3	235:3	13	scanlinesize
ASSIGN_OP	235:15	235:15	11	=
LEAF_NODE	235:15	235:15	12	=
RVAL	235:16	235:16	11	1
FIELD	235:16	235:16	12	1
LEAF_NODE	235:16	235:16	13	1
LEAF_NODE	235:17	235:17	9	;
EXPR_STATEMENT	236:2	236:46	6	rows = ( uint64 ) STRIP_SIZE_DEFAULT / scanlinesize ;
EXPR	236:2	236:2	7	rows = ( uint64 ) STRIP_SIZE_DEFAULT / scanlinesize
ASSIGN	236:2	236:7	8	rows = ( uint64 ) STRIP_SIZE_DEFAULT / scanlinesize
LVAL	236:2	236:2	9	rows
FIELD	236:2	236:2	10	rows
LEAF_NODE	236:2	236:2	11	rows
ASSIGN_OP	236:6	236:6	9	=
LEAF_NODE	236:6	236:6	10	=
RVAL	236:7	236:34	9	( uint64 ) STRIP_SIZE_DEFAULT / scanlinesize
LEAF_NODE	236:7	236:7	10	(
TYPE_NAME	236:8	236:8	10	uint64
LEAF_NODE	236:8	236:8	11	uint64
LEAF_NODE	236:14	236:14	10	)
FIELD	236:15	236:15	10	STRIP_SIZE_DEFAULT
LEAF_NODE	236:15	236:15	11	STRIP_SIZE_DEFAULT
LEAF_NODE	236:33	236:33	10	/
FIELD	236:34	236:34	10	scanlinesize
LEAF_NODE	236:34	236:34	11	scanlinesize
LEAF_NODE	236:46	236:46	7	;
SELECTION	237:2	238:3	6	
KEYWORD	237:2	237:2	7	if
LEAF_NODE	237:2	237:2	8	if
LEAF_NODE	237:5	237:5	7	(
CONDITION	237:6	237:6	7	rows == 0
EXPR	237:6	237:12	8	rows == 0
FIELD	237:6	237:6	9	rows
LEAF_NODE	237:6	237:6	10	rows
EQ_OPERATOR	237:10	237:10	9	==
LEAF_NODE	237:10	237:10	10	==
FIELD	237:12	237:12	9	0
LEAF_NODE	237:12	237:12	10	0
LEAF_NODE	237:13	237:13	7	)
STATEMENTS	238:3	238:3	7	
EXPR_STATEMENT	238:3	238:9	8	rows = 1 ;
EXPR	238:3	238:3	9	rows = 1
ASSIGN	238:3	238:8	10	rows = 1
LVAL	238:3	238:3	11	rows
FIELD	238:3	238:3	12	rows
LEAF_NODE	238:3	238:3	13	rows
ASSIGN_OP	238:7	238:7	11	=
LEAF_NODE	238:7	238:7	12	=
RVAL	238:8	238:8	11	1
FIELD	238:8	238:8	12	1
LEAF_NODE	238:8	238:8	13	1
LEAF_NODE	238:9	238:9	9	;
SELECTION	239:2	239:7	6	
KEYWORD	239:2	239:2	7	else
LEAF_NODE	239:2	239:2	8	else
STATEMENTS	239:7	239:7	7	
SELECTION	239:7	240:3	8	
KEYWORD	239:7	239:7	9	if
LEAF_NODE	239:7	239:7	10	if
LEAF_NODE	239:10	239:10	9	(
CONDITION	239:11	239:11	9	rows > 0xFFFFFFFF
EXPR	239:11	239:16	10	rows > 0xFFFFFFFF
FIELD	239:11	239:11	11	rows
LEAF_NODE	239:11	239:11	12	rows
REL_OPERATOR	239:15	239:15	11	>
LEAF_NODE	239:15	239:15	12	>
FIELD	239:16	239:16	11	0xFFFFFFFF
LEAF_NODE	239:16	239:16	12	0xFFFFFFFF
LEAF_NODE	239:26	239:26	9	)
STATEMENTS	240:3	240:3	9	
EXPR_STATEMENT	240:3	240:18	10	rows = 0xFFFFFFFF ;
EXPR	240:3	240:3	11	rows = 0xFFFFFFFF
ASSIGN	240:3	240:8	12	rows = 0xFFFFFFFF
LVAL	240:3	240:3	13	rows
FIELD	240:3	240:3	14	rows
LEAF_NODE	240:3	240:3	15	rows
ASSIGN_OP	240:7	240:7	13	=
LEAF_NODE	240:7	240:7	14	=
RVAL	240:8	240:8	13	0xFFFFFFFF
FIELD	240:8	240:8	14	0xFFFFFFFF
LEAF_NODE	240:8	240:8	15	0xFFFFFFFF
LEAF_NODE	240:18	240:18	11	;
EXPR_STATEMENT	241:2	241:16	6	s = ( uint32 ) rows ;
EXPR	241:2	241:2	7	s = ( uint32 ) rows
ASSIGN	241:2	241:4	8	s = ( uint32 ) rows
LVAL	241:2	241:2	9	s
FIELD	241:2	241:2	10	s
LEAF_NODE	241:2	241:2	11	s
ASSIGN_OP	241:3	241:3	9	=
LEAF_NODE	241:3	241:3	10	=
RVAL	241:4	241:12	9	( uint32 ) rows
LEAF_NODE	241:4	241:4	10	(
TYPE_NAME	241:5	241:5	10	uint32
LEAF_NODE	241:5	241:5	11	uint32
LEAF_NODE	241:11	241:11	10	)
FIELD	241:12	241:12	10	rows
LEAF_NODE	241:12	241:12	11	rows
LEAF_NODE	241:16	241:16	7	;
LEAF_NODE	242:1	242:1	5	}
LEAF_NODE	243:1	243:1	3	return
LEAF_NODE	243:8	243:8	3	(
LEAF_NODE	243:9	243:9	3	s
LEAF_NODE	243:10	243:10	3	)
LEAF_NODE	243:11	243:11	3	;
LEAF_NODE	244:0	244:0	2	}
FUNCTION_DEF	256:0	312:0	1	
RETURN_TYPE	256:0	256:0	2	uint64
TYPE_NAME	256:0	256:0	3	uint64
LEAF_NODE	256:0	256:0	4	uint64
FUNCTION_NAME	257:0	257:0	2	TIFFScanlineSize64
LEAF_NODE	257:0	257:0	3	TIFFScanlineSize64
PARAMETER_LIST	257:18	257:28	2	( TIFF * tif )
LEAF_NODE	257:18	257:18	3	(
PARAMETER_DECL	257:19	257:25	3	TIFF * tif
TYPE	257:19	257:23	4	TIFF *
TYPE_NAME	257:19	257:19	5	TIFF
LEAF_NODE	257:19	257:19	6	TIFF
POINTER	257:23	257:23	5	*
LEAF_NODE	257:23	257:23	6	*
NAME	257:25	257:25	4	tif
LEAF_NODE	257:25	257:25	5	tif
LEAF_NODE	257:28	257:28	3	)
LEAF_NODE	258:0	258:0	2	{
STATEMENTS	259:1	311:22	2	
LEAF_NODE	259:1	259:1	3	static
SIMPLE_DECL	259:8	259:50	3	const char [ ] module ; module = "TIFFScanlineSize64" ;
VAR_DECL	259:8	259:19	4	const char [ ] module ; module = "TIFFScanlineSize64"
TYPE	259:8	259:25	5	const char [ ]
TYPE_NAME	259:8	259:14	6	const char
LEAF_NODE	259:8	259:8	7	const
LEAF_NODE	259:14	259:14	7	char
TYPE_SUFFIX	259:25	259:26	6	[ ]
LEAF_NODE	259:25	259:25	7	[
LEAF_NODE	259:26	259:26	7	]
NAME	259:19	259:19	5	module
LEAF_NODE	259:19	259:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	259:19	259:19	5	module = "TIFFScanlineSize64"
ASSIGN	259:19	259:30	6	module = "TIFFScanlineSize64"
LVAL	259:19	259:19	7	module
NAME	259:19	259:19	8	module
LEAF_NODE	259:19	259:19	9	module
ASSIGN_OP	259:28	259:28	7	=
LEAF_NODE	259:28	259:28	8	=
RVAL	259:30	259:30	7	"TIFFScanlineSize64"
FIELD	259:30	259:30	8	"TIFFScanlineSize64"
LEAF_NODE	259:30	259:30	9	"TIFFScanlineSize64"
LEAF_NODE	259:50	259:50	4	;
SIMPLE_DECL	260:1	260:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	260:1	260:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	260:1	260:15	5	TIFFDirectory *
TYPE_NAME	260:1	260:1	6	TIFFDirectory
LEAF_NODE	260:1	260:1	7	TIFFDirectory
POINTER	260:15	260:15	6	*
LEAF_NODE	260:15	260:15	7	*
NAME	260:16	260:16	5	td
LEAF_NODE	260:16	260:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	260:16	260:16	5	td = & tif -> tif_dir
ASSIGN	260:16	260:21	6	td = & tif -> tif_dir
LVAL	260:16	260:16	7	td
NAME	260:16	260:16	8	td
LEAF_NODE	260:16	260:16	9	td
ASSIGN_OP	260:19	260:19	7	=
LEAF_NODE	260:19	260:19	8	=
RVAL	260:21	260:21	7	& tif -> tif_dir
UNARY_EXPR	260:21	260:22	8	& tif -> tif_dir
UNARY_OPERATOR	260:21	260:21	9	&
LEAF_NODE	260:21	260:21	10	&
FIELD	260:22	260:27	9	tif -> tif_dir
LEAF_NODE	260:22	260:22	10	tif
LEAF_NODE	260:25	260:25	10	->
LEAF_NODE	260:27	260:27	10	tif_dir
LEAF_NODE	260:34	260:34	4	;
SIMPLE_DECL	261:1	261:21	3	uint64 scanline_size ;
VAR_DECL	261:1	261:8	4	uint64 scanline_size
TYPE	261:1	261:1	5	uint64
TYPE_NAME	261:1	261:1	6	uint64
LEAF_NODE	261:1	261:1	7	uint64
NAME	261:8	261:8	5	scanline_size
LEAF_NODE	261:8	261:8	6	scanline_size
LEAF_NODE	261:21	261:21	4	;
SELECTION	262:1	263:1	3	
KEYWORD	262:1	262:1	4	if
LEAF_NODE	262:1	262:1	5	if
LEAF_NODE	262:4	262:4	4	(
CONDITION	262:5	262:5	4	td -> td_planarconfig == PLANARCONFIG_CONTIG
EXPR	262:5	262:26	5	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	262:5	262:9	6	td -> td_planarconfig
LEAF_NODE	262:5	262:5	7	td
LEAF_NODE	262:7	262:7	7	->
LEAF_NODE	262:9	262:9	7	td_planarconfig
EQ_OPERATOR	262:24	262:24	6	==
LEAF_NODE	262:24	262:24	7	==
FIELD	262:26	262:26	6	PLANARCONFIG_CONTIG
LEAF_NODE	262:26	262:26	7	PLANARCONFIG_CONTIG
LEAF_NODE	262:45	262:45	4	)
STATEMENTS	263:1	301:1	4	
LEAF_NODE	263:1	263:1	5	{
STATEMENTS	264:2	295:2	5	
SELECTION	264:2	267:2	6	
KEYWORD	264:2	264:2	7	if
LEAF_NODE	264:2	264:2	8	if
LEAF_NODE	264:5	264:5	7	(
CONDITION	264:6	264:6	7	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
EXPR	264:6	264:6	8	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
AND	264:6	265:6	9	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
EXPR	264:6	264:44	10	( td -> td_photometric == PHOTOMETRIC_YCBCR )
LEAF_NODE	264:6	264:6	11	(
FIELD	264:7	264:11	11	td -> td_photometric
LEAF_NODE	264:7	264:7	12	td
LEAF_NODE	264:9	264:9	12	->
LEAF_NODE	264:11	264:11	12	td_photometric
EQ_OPERATOR	264:25	264:25	11	==
LEAF_NODE	264:25	264:25	12	==
FIELD	264:27	264:27	11	PHOTOMETRIC_YCBCR
LEAF_NODE	264:27	264:27	12	PHOTOMETRIC_YCBCR
LEAF_NODE	264:44	264:44	11	)
LEAF_NODE	264:45	264:45	10	&&
EXPR	265:6	265:6	10	( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
AND	265:6	266:6	11	( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
EXPR	265:6	265:32	12	( td -> td_samplesperpixel == 3 )
LEAF_NODE	265:6	265:6	13	(
FIELD	265:7	265:11	13	td -> td_samplesperpixel
LEAF_NODE	265:7	265:7	14	td
LEAF_NODE	265:9	265:9	14	->
LEAF_NODE	265:11	265:11	14	td_samplesperpixel
EQ_OPERATOR	265:29	265:29	13	==
LEAF_NODE	265:29	265:29	14	==
FIELD	265:31	265:31	13	3
LEAF_NODE	265:31	265:31	14	3
LEAF_NODE	265:32	265:32	13	)
LEAF_NODE	265:33	265:33	12	&&
EXPR	266:6	266:24	12	( ! isUpSampled ( tif ) )
LEAF_NODE	266:6	266:6	13	(
UNARY_EXPR	266:7	266:8	13	! isUpSampled ( tif )
UNARY_OPERATOR	266:7	266:7	14	!
LEAF_NODE	266:7	266:7	15	!
FUNCTION_CALL	266:8	266:23	14	isUpSampled ( tif )
CALLEE	266:8	266:8	15	isUpSampled
LEAF_NODE	266:8	266:8	16	isUpSampled
LEAF_NODE	266:19	266:19	15	(
ARGUMENT	266:20	266:20	15	tif
FIELD	266:20	266:20	16	tif
LEAF_NODE	266:20	266:20	17	tif
LEAF_NODE	266:23	266:23	15	)
LEAF_NODE	266:24	266:24	13	)
LEAF_NODE	266:25	266:25	7	)
STATEMENTS	267:2	294:2	7	
LEAF_NODE	267:2	267:2	8	{
STATEMENTS	268:3	293:3	8	
SIMPLE_DECL	268:3	268:29	9	uint16 [ 2 ] ycbcrsubsampling ;
VAR_DECL	268:3	268:10	10	uint16 [ 2 ] ycbcrsubsampling
TYPE	268:3	268:26	11	uint16 [ 2 ]
TYPE_NAME	268:3	268:3	12	uint16
LEAF_NODE	268:3	268:3	13	uint16
TYPE_SUFFIX	268:26	268:28	12	[ 2 ]
LEAF_NODE	268:26	268:26	13	[
FIELD	268:27	268:27	13	2
LEAF_NODE	268:27	268:27	14	2
LEAF_NODE	268:28	268:28	13	]
NAME	268:10	268:10	11	ycbcrsubsampling
LEAF_NODE	268:10	268:10	12	ycbcrsubsampling
LEAF_NODE	268:29	268:29	10	;
SIMPLE_DECL	269:3	269:31	9	uint16 samplingblock_samples ;
VAR_DECL	269:3	269:10	10	uint16 samplingblock_samples
TYPE	269:3	269:3	11	uint16
TYPE_NAME	269:3	269:3	12	uint16
LEAF_NODE	269:3	269:3	13	uint16
NAME	269:10	269:10	11	samplingblock_samples
LEAF_NODE	269:10	269:10	12	samplingblock_samples
LEAF_NODE	269:31	269:31	10	;
SIMPLE_DECL	270:3	270:28	9	uint32 samplingblocks_hor ;
VAR_DECL	270:3	270:10	10	uint32 samplingblocks_hor
TYPE	270:3	270:3	11	uint32
TYPE_NAME	270:3	270:3	12	uint32
LEAF_NODE	270:3	270:3	13	uint32
NAME	270:10	270:10	11	samplingblocks_hor
LEAF_NODE	270:10	270:10	12	samplingblocks_hor
LEAF_NODE	270:28	270:28	10	;
SIMPLE_DECL	271:3	271:29	9	uint64 samplingrow_samples ;
VAR_DECL	271:3	271:10	10	uint64 samplingrow_samples
TYPE	271:3	271:3	11	uint64
TYPE_NAME	271:3	271:3	12	uint64
LEAF_NODE	271:3	271:3	13	uint64
NAME	271:10	271:10	11	samplingrow_samples
LEAF_NODE	271:10	271:10	12	samplingrow_samples
LEAF_NODE	271:29	271:29	10	;
SIMPLE_DECL	272:3	272:26	9	uint64 samplingrow_size ;
VAR_DECL	272:3	272:10	10	uint64 samplingrow_size
TYPE	272:3	272:3	11	uint64
TYPE_NAME	272:3	272:3	12	uint64
LEAF_NODE	272:3	272:3	13	uint64
NAME	272:10	272:10	11	samplingrow_size
LEAF_NODE	272:10	272:10	12	samplingrow_size
LEAF_NODE	272:26	272:26	10	;
SELECTION	273:3	274:3	9	
KEYWORD	273:3	273:3	10	if
LEAF_NODE	273:3	273:3	11	if
LEAF_NODE	273:5	273:5	10	(
CONDITION	273:6	273:6	10	td -> td_samplesperpixel != 3
EXPR	273:6	273:30	11	td -> td_samplesperpixel != 3
FIELD	273:6	273:10	12	td -> td_samplesperpixel
LEAF_NODE	273:6	273:6	13	td
LEAF_NODE	273:8	273:8	13	->
LEAF_NODE	273:10	273:10	13	td_samplesperpixel
EQ_OPERATOR	273:28	273:28	12	!=
LEAF_NODE	273:28	273:28	13	!=
FIELD	273:30	273:30	12	3
LEAF_NODE	273:30	273:30	13	3
LEAF_NODE	273:31	273:31	10	)
STATEMENTS	274:3	278:3	10	
LEAF_NODE	274:3	274:3	11	{
STATEMENTS	275:28	277:28	11	
EXPR_STATEMENT	275:28	276:76	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid td_samplesperpixel value" ) ;
EXPR	275:28	275:28	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid td_samplesperpixel value" )
FUNCTION_CALL	275:28	276:75	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid td_samplesperpixel value" )
CALLEE	275:28	275:28	15	TIFFErrorExt
LEAF_NODE	275:28	275:28	16	TIFFErrorExt
LEAF_NODE	275:40	275:40	15	(
ARGUMENT	275:41	275:41	15	tif -> tif_clientdata
FIELD	275:41	275:46	16	tif -> tif_clientdata
LEAF_NODE	275:41	275:41	17	tif
LEAF_NODE	275:44	275:44	17	->
LEAF_NODE	275:46	275:46	17	tif_clientdata
LEAF_NODE	275:60	275:60	15	,
ARGUMENT	275:61	275:61	15	module
FIELD	275:61	275:61	16	module
LEAF_NODE	275:61	275:61	17	module
LEAF_NODE	275:67	275:67	15	,
ARGUMENT	276:41	276:41	15	"Invalid td_samplesperpixel value"
FIELD	276:41	276:41	16	"Invalid td_samplesperpixel value"
LEAF_NODE	276:41	276:41	17	"Invalid td_samplesperpixel value"
LEAF_NODE	276:75	276:75	15	)
LEAF_NODE	276:76	276:76	13	;
JUMP_STATEMENT	277:28	277:36	12	return 0 ;
KEYWORD	277:28	277:28	13	return
LEAF_NODE	277:28	277:28	14	return
DESTINATION	277:35	277:35	13	0
EXPR	277:35	277:35	14	0
FIELD	277:35	277:35	15	0
LEAF_NODE	277:35	277:35	16	0
LEAF_NODE	277:36	277:36	13	;
LEAF_NODE	278:3	278:3	11	}
EXPR_STATEMENT	279:3	281:65	9	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , ycbcrsubsampling + 0 , ycbcrsubsampling + 1 ) ;
EXPR	279:3	279:3	10	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , ycbcrsubsampling + 0 , ycbcrsubsampling + 1 )
FUNCTION_CALL	279:3	281:64	11	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , ycbcrsubsampling + 0 , ycbcrsubsampling + 1 )
CALLEE	279:3	279:3	12	TIFFGetFieldDefaulted
LEAF_NODE	279:3	279:3	13	TIFFGetFieldDefaulted
LEAF_NODE	279:24	279:24	12	(
ARGUMENT	279:25	279:25	12	tif
FIELD	279:25	279:25	13	tif
LEAF_NODE	279:25	279:25	14	tif
LEAF_NODE	279:28	279:28	12	,
ARGUMENT	279:29	279:29	12	TIFFTAG_YCBCRSUBSAMPLING
FIELD	279:29	279:29	13	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	279:29	279:29	14	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	279:53	279:53	12	,
ARGUMENT	280:46	280:63	12	ycbcrsubsampling + 0
FIELD	280:46	280:46	13	ycbcrsubsampling
LEAF_NODE	280:46	280:46	14	ycbcrsubsampling
LEAF_NODE	280:62	280:62	13	+
FIELD	280:63	280:63	13	0
LEAF_NODE	280:63	280:63	14	0
LEAF_NODE	280:64	280:64	12	,
ARGUMENT	281:46	281:63	12	ycbcrsubsampling + 1
FIELD	281:46	281:46	13	ycbcrsubsampling
LEAF_NODE	281:46	281:46	14	ycbcrsubsampling
LEAF_NODE	281:62	281:62	13	+
FIELD	281:63	281:63	13	1
LEAF_NODE	281:63	281:63	14	1
LEAF_NODE	281:64	281:64	12	)
LEAF_NODE	281:65	281:65	10	;
SELECTION	282:3	284:3	9	
KEYWORD	282:3	282:3	10	if
LEAF_NODE	282:3	282:3	11	if
LEAF_NODE	282:6	282:6	10	(
CONDITION	282:7	282:7	10	( ( ycbcrsubsampling [ 0 ] != 1 ) && ( ycbcrsubsampling [ 0 ] != 2 ) && ( ycbcrsubsampling [ 0 ] != 4 ) ) || ( ( ycbcrsubsampling [ 1 ] != 1 ) && ( ycbcrsubsampling [ 1 ] != 2 ) && ( ycbcrsubsampling [ 1 ] != 4 ) )
EXPR	282:7	282:7	11	( ( ycbcrsubsampling [ 0 ] != 1 ) && ( ycbcrsubsampling [ 0 ] != 2 ) && ( ycbcrsubsampling [ 0 ] != 4 ) ) || ( ( ycbcrsubsampling [ 1 ] != 1 ) && ( ycbcrsubsampling [ 1 ] != 2 ) && ( ycbcrsubsampling [ 1 ] != 4 ) )
OR	282:7	283:7	12	( ( ycbcrsubsampling [ 0 ] != 1 ) && ( ycbcrsubsampling [ 0 ] != 2 ) && ( ycbcrsubsampling [ 0 ] != 4 ) ) || ( ( ycbcrsubsampling [ 1 ] != 1 ) && ( ycbcrsubsampling [ 1 ] != 2 ) && ( ycbcrsubsampling [ 1 ] != 4 ) )
EXPR	282:7	282:84	13	( ( ycbcrsubsampling [ 0 ] != 1 ) && ( ycbcrsubsampling [ 0 ] != 2 ) && ( ycbcrsubsampling [ 0 ] != 4 ) )
LEAF_NODE	282:7	282:7	14	(
AND	282:8	282:34	14	( ycbcrsubsampling [ 0 ] != 1 ) && ( ycbcrsubsampling [ 0 ] != 2 ) && ( ycbcrsubsampling [ 0 ] != 4 )
EXPR	282:8	282:31	15	( ycbcrsubsampling [ 0 ] != 1 )
LEAF_NODE	282:8	282:8	16	(
FIELD	282:9	282:27	16	ycbcrsubsampling [ 0 ]
LEAF_NODE	282:9	282:9	17	ycbcrsubsampling
LEAF_NODE	282:25	282:25	17	[
EXPR	282:26	282:26	17	0
FIELD	282:26	282:26	18	0
LEAF_NODE	282:26	282:26	19	0
LEAF_NODE	282:27	282:27	17	]
EQ_OPERATOR	282:28	282:28	16	!=
LEAF_NODE	282:28	282:28	17	!=
FIELD	282:30	282:30	16	1
LEAF_NODE	282:30	282:30	17	1
LEAF_NODE	282:31	282:31	16	)
LEAF_NODE	282:32	282:32	15	&&
EXPR	282:34	282:34	15	( ycbcrsubsampling [ 0 ] != 2 ) && ( ycbcrsubsampling [ 0 ] != 4 )
AND	282:34	282:60	16	( ycbcrsubsampling [ 0 ] != 2 ) && ( ycbcrsubsampling [ 0 ] != 4 )
EXPR	282:34	282:57	17	( ycbcrsubsampling [ 0 ] != 2 )
LEAF_NODE	282:34	282:34	18	(
FIELD	282:35	282:53	18	ycbcrsubsampling [ 0 ]
LEAF_NODE	282:35	282:35	19	ycbcrsubsampling
LEAF_NODE	282:51	282:51	19	[
EXPR	282:52	282:52	19	0
FIELD	282:52	282:52	20	0
LEAF_NODE	282:52	282:52	21	0
LEAF_NODE	282:53	282:53	19	]
EQ_OPERATOR	282:54	282:54	18	!=
LEAF_NODE	282:54	282:54	19	!=
FIELD	282:56	282:56	18	2
LEAF_NODE	282:56	282:56	19	2
LEAF_NODE	282:57	282:57	18	)
LEAF_NODE	282:58	282:58	17	&&
EXPR	282:60	282:83	17	( ycbcrsubsampling [ 0 ] != 4 )
LEAF_NODE	282:60	282:60	18	(
FIELD	282:61	282:79	18	ycbcrsubsampling [ 0 ]
LEAF_NODE	282:61	282:61	19	ycbcrsubsampling
LEAF_NODE	282:77	282:77	19	[
EXPR	282:78	282:78	19	0
FIELD	282:78	282:78	20	0
LEAF_NODE	282:78	282:78	21	0
LEAF_NODE	282:79	282:79	19	]
EQ_OPERATOR	282:80	282:80	18	!=
LEAF_NODE	282:80	282:80	19	!=
FIELD	282:82	282:82	18	4
LEAF_NODE	282:82	282:82	19	4
LEAF_NODE	282:83	282:83	18	)
LEAF_NODE	282:84	282:84	14	)
LEAF_NODE	282:86	282:86	13	||
EXPR	283:7	283:84	13	( ( ycbcrsubsampling [ 1 ] != 1 ) && ( ycbcrsubsampling [ 1 ] != 2 ) && ( ycbcrsubsampling [ 1 ] != 4 ) )
LEAF_NODE	283:7	283:7	14	(
AND	283:8	283:34	14	( ycbcrsubsampling [ 1 ] != 1 ) && ( ycbcrsubsampling [ 1 ] != 2 ) && ( ycbcrsubsampling [ 1 ] != 4 )
EXPR	283:8	283:31	15	( ycbcrsubsampling [ 1 ] != 1 )
LEAF_NODE	283:8	283:8	16	(
FIELD	283:9	283:27	16	ycbcrsubsampling [ 1 ]
LEAF_NODE	283:9	283:9	17	ycbcrsubsampling
LEAF_NODE	283:25	283:25	17	[
EXPR	283:26	283:26	17	1
FIELD	283:26	283:26	18	1
LEAF_NODE	283:26	283:26	19	1
LEAF_NODE	283:27	283:27	17	]
EQ_OPERATOR	283:28	283:28	16	!=
LEAF_NODE	283:28	283:28	17	!=
FIELD	283:30	283:30	16	1
LEAF_NODE	283:30	283:30	17	1
LEAF_NODE	283:31	283:31	16	)
LEAF_NODE	283:32	283:32	15	&&
EXPR	283:34	283:34	15	( ycbcrsubsampling [ 1 ] != 2 ) && ( ycbcrsubsampling [ 1 ] != 4 )
AND	283:34	283:60	16	( ycbcrsubsampling [ 1 ] != 2 ) && ( ycbcrsubsampling [ 1 ] != 4 )
EXPR	283:34	283:57	17	( ycbcrsubsampling [ 1 ] != 2 )
LEAF_NODE	283:34	283:34	18	(
FIELD	283:35	283:53	18	ycbcrsubsampling [ 1 ]
LEAF_NODE	283:35	283:35	19	ycbcrsubsampling
LEAF_NODE	283:51	283:51	19	[
EXPR	283:52	283:52	19	1
FIELD	283:52	283:52	20	1
LEAF_NODE	283:52	283:52	21	1
LEAF_NODE	283:53	283:53	19	]
EQ_OPERATOR	283:54	283:54	18	!=
LEAF_NODE	283:54	283:54	19	!=
FIELD	283:56	283:56	18	2
LEAF_NODE	283:56	283:56	19	2
LEAF_NODE	283:57	283:57	18	)
LEAF_NODE	283:58	283:58	17	&&
EXPR	283:60	283:83	17	( ycbcrsubsampling [ 1 ] != 4 )
LEAF_NODE	283:60	283:60	18	(
FIELD	283:61	283:79	18	ycbcrsubsampling [ 1 ]
LEAF_NODE	283:61	283:61	19	ycbcrsubsampling
LEAF_NODE	283:77	283:77	19	[
EXPR	283:78	283:78	19	1
FIELD	283:78	283:78	20	1
LEAF_NODE	283:78	283:78	21	1
LEAF_NODE	283:79	283:79	19	]
EQ_OPERATOR	283:80	283:80	18	!=
LEAF_NODE	283:80	283:80	19	!=
FIELD	283:82	283:82	18	4
LEAF_NODE	283:82	283:82	19	4
LEAF_NODE	283:83	283:83	18	)
LEAF_NODE	283:84	283:84	14	)
LEAF_NODE	283:85	283:85	10	)
STATEMENTS	284:3	288:3	10	
LEAF_NODE	284:3	284:3	11	{
STATEMENTS	285:28	287:28	11	
EXPR_STATEMENT	285:28	286:69	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid YCbCr subsampling" ) ;
EXPR	285:28	285:28	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid YCbCr subsampling" )
FUNCTION_CALL	285:28	286:68	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid YCbCr subsampling" )
CALLEE	285:28	285:28	15	TIFFErrorExt
LEAF_NODE	285:28	285:28	16	TIFFErrorExt
LEAF_NODE	285:40	285:40	15	(
ARGUMENT	285:41	285:41	15	tif -> tif_clientdata
FIELD	285:41	285:46	16	tif -> tif_clientdata
LEAF_NODE	285:41	285:41	17	tif
LEAF_NODE	285:44	285:44	17	->
LEAF_NODE	285:46	285:46	17	tif_clientdata
LEAF_NODE	285:60	285:60	15	,
ARGUMENT	285:61	285:61	15	module
FIELD	285:61	285:61	16	module
LEAF_NODE	285:61	285:61	17	module
LEAF_NODE	285:67	285:67	15	,
ARGUMENT	286:41	286:41	15	"Invalid YCbCr subsampling"
FIELD	286:41	286:41	16	"Invalid YCbCr subsampling"
LEAF_NODE	286:41	286:41	17	"Invalid YCbCr subsampling"
LEAF_NODE	286:68	286:68	15	)
LEAF_NODE	286:69	286:69	13	;
JUMP_STATEMENT	287:28	287:36	12	return 0 ;
KEYWORD	287:28	287:28	13	return
LEAF_NODE	287:28	287:28	14	return
DESTINATION	287:35	287:35	13	0
EXPR	287:35	287:35	14	0
FIELD	287:35	287:35	15	0
LEAF_NODE	287:35	287:35	16	0
LEAF_NODE	287:36	287:36	13	;
LEAF_NODE	288:3	288:3	11	}
EXPR_STATEMENT	289:3	289:68	9	samplingblock_samples = ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2 ;
EXPR	289:3	289:3	10	samplingblock_samples = ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2
ASSIGN	289:3	289:27	11	samplingblock_samples = ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2
LVAL	289:3	289:3	12	samplingblock_samples
FIELD	289:3	289:3	13	samplingblock_samples
LEAF_NODE	289:3	289:3	14	samplingblock_samples
ASSIGN_OP	289:25	289:25	12	=
LEAF_NODE	289:25	289:25	13	=
RVAL	289:27	289:67	12	ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2
FIELD	289:27	289:45	13	ycbcrsubsampling [ 0 ]
LEAF_NODE	289:27	289:27	14	ycbcrsubsampling
LEAF_NODE	289:43	289:43	14	[
EXPR	289:44	289:44	14	0
FIELD	289:44	289:44	15	0
LEAF_NODE	289:44	289:44	16	0
LEAF_NODE	289:45	289:45	14	]
LEAF_NODE	289:46	289:46	13	*
FIELD	289:47	289:65	13	ycbcrsubsampling [ 1 ]
LEAF_NODE	289:47	289:47	14	ycbcrsubsampling
LEAF_NODE	289:63	289:63	14	[
EXPR	289:64	289:64	14	1
FIELD	289:64	289:64	15	1
LEAF_NODE	289:64	289:64	16	1
LEAF_NODE	289:65	289:65	14	]
LEAF_NODE	289:66	289:66	13	+
FIELD	289:67	289:67	13	2
LEAF_NODE	289:67	289:67	14	2
LEAF_NODE	289:68	289:68	10	;
EXPR_STATEMENT	290:3	290:77	9	samplingblocks_hor = TIFFhowmany_32 ( td -> td_imagewidth , ycbcrsubsampling [ 0 ] ) ;
EXPR	290:3	290:3	10	samplingblocks_hor = TIFFhowmany_32 ( td -> td_imagewidth , ycbcrsubsampling [ 0 ] )
ASSIGN	290:3	290:24	11	samplingblocks_hor = TIFFhowmany_32 ( td -> td_imagewidth , ycbcrsubsampling [ 0 ] )
LVAL	290:3	290:3	12	samplingblocks_hor
FIELD	290:3	290:3	13	samplingblocks_hor
LEAF_NODE	290:3	290:3	14	samplingblocks_hor
ASSIGN_OP	290:22	290:22	12	=
LEAF_NODE	290:22	290:22	13	=
RVAL	290:24	290:24	12	TIFFhowmany_32 ( td -> td_imagewidth , ycbcrsubsampling [ 0 ] )
FUNCTION_CALL	290:24	290:76	13	TIFFhowmany_32 ( td -> td_imagewidth , ycbcrsubsampling [ 0 ] )
CALLEE	290:24	290:24	14	TIFFhowmany_32
LEAF_NODE	290:24	290:24	15	TIFFhowmany_32
LEAF_NODE	290:38	290:38	14	(
ARGUMENT	290:39	290:39	14	td -> td_imagewidth
FIELD	290:39	290:43	15	td -> td_imagewidth
LEAF_NODE	290:39	290:39	16	td
LEAF_NODE	290:41	290:41	16	->
LEAF_NODE	290:43	290:43	16	td_imagewidth
LEAF_NODE	290:56	290:56	14	,
ARGUMENT	290:57	290:57	14	ycbcrsubsampling [ 0 ]
FIELD	290:57	290:75	15	ycbcrsubsampling [ 0 ]
LEAF_NODE	290:57	290:57	16	ycbcrsubsampling
LEAF_NODE	290:73	290:73	16	[
EXPR	290:74	290:74	16	0
FIELD	290:74	290:74	17	0
LEAF_NODE	290:74	290:74	18	0
LEAF_NODE	290:75	290:75	16	]
LEAF_NODE	290:76	290:76	14	)
LEAF_NODE	290:77	290:77	10	;
EXPR_STATEMENT	291:3	291:93	9	samplingrow_samples = _TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module ) ;
EXPR	291:3	291:3	10	samplingrow_samples = _TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
ASSIGN	291:3	291:25	11	samplingrow_samples = _TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
LVAL	291:3	291:3	12	samplingrow_samples
FIELD	291:3	291:3	13	samplingrow_samples
LEAF_NODE	291:3	291:3	14	samplingrow_samples
ASSIGN_OP	291:23	291:23	12	=
LEAF_NODE	291:23	291:23	13	=
RVAL	291:25	291:25	12	_TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
FUNCTION_CALL	291:25	291:92	13	_TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
CALLEE	291:25	291:25	14	_TIFFMultiply64
LEAF_NODE	291:25	291:25	15	_TIFFMultiply64
LEAF_NODE	291:40	291:40	14	(
ARGUMENT	291:41	291:41	14	tif
FIELD	291:41	291:41	15	tif
LEAF_NODE	291:41	291:41	16	tif
LEAF_NODE	291:44	291:44	14	,
ARGUMENT	291:45	291:45	14	samplingblocks_hor
FIELD	291:45	291:45	15	samplingblocks_hor
LEAF_NODE	291:45	291:45	16	samplingblocks_hor
LEAF_NODE	291:63	291:63	14	,
ARGUMENT	291:64	291:64	14	samplingblock_samples
FIELD	291:64	291:64	15	samplingblock_samples
LEAF_NODE	291:64	291:64	16	samplingblock_samples
LEAF_NODE	291:85	291:85	14	,
ARGUMENT	291:86	291:86	14	module
FIELD	291:86	291:86	15	module
LEAF_NODE	291:86	291:86	16	module
LEAF_NODE	291:92	291:92	14	)
LEAF_NODE	291:93	291:93	10	;
EXPR_STATEMENT	292:3	292:108	9	samplingrow_size = TIFFhowmany_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) , 8 ) ;
EXPR	292:3	292:3	10	samplingrow_size = TIFFhowmany_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) , 8 )
ASSIGN	292:3	292:22	11	samplingrow_size = TIFFhowmany_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) , 8 )
LVAL	292:3	292:3	12	samplingrow_size
FIELD	292:3	292:3	13	samplingrow_size
LEAF_NODE	292:3	292:3	14	samplingrow_size
ASSIGN_OP	292:20	292:20	12	=
LEAF_NODE	292:20	292:20	13	=
RVAL	292:22	292:22	12	TIFFhowmany_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) , 8 )
FUNCTION_CALL	292:22	292:107	13	TIFFhowmany_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) , 8 )
CALLEE	292:22	292:22	14	TIFFhowmany_64
LEAF_NODE	292:22	292:22	15	TIFFhowmany_64
LEAF_NODE	292:36	292:36	14	(
ARGUMENT	292:37	292:37	14	_TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module )
FUNCTION_CALL	292:37	292:104	15	_TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module )
CALLEE	292:37	292:37	16	_TIFFMultiply64
LEAF_NODE	292:37	292:37	17	_TIFFMultiply64
LEAF_NODE	292:52	292:52	16	(
ARGUMENT	292:53	292:53	16	tif
FIELD	292:53	292:53	17	tif
LEAF_NODE	292:53	292:53	18	tif
LEAF_NODE	292:56	292:56	16	,
ARGUMENT	292:57	292:57	16	samplingrow_samples
FIELD	292:57	292:57	17	samplingrow_samples
LEAF_NODE	292:57	292:57	18	samplingrow_samples
LEAF_NODE	292:76	292:76	16	,
ARGUMENT	292:77	292:77	16	td -> td_bitspersample
FIELD	292:77	292:81	17	td -> td_bitspersample
LEAF_NODE	292:77	292:77	18	td
LEAF_NODE	292:79	292:79	18	->
LEAF_NODE	292:81	292:81	18	td_bitspersample
LEAF_NODE	292:97	292:97	16	,
ARGUMENT	292:98	292:98	16	module
FIELD	292:98	292:98	17	module
LEAF_NODE	292:98	292:98	18	module
LEAF_NODE	292:104	292:104	16	)
LEAF_NODE	292:105	292:105	14	,
ARGUMENT	292:106	292:106	14	8
FIELD	292:106	292:106	15	8
LEAF_NODE	292:106	292:106	16	8
LEAF_NODE	292:107	292:107	14	)
LEAF_NODE	292:108	292:108	10	;
EXPR_STATEMENT	293:3	293:57	9	scanline_size = ( samplingrow_size / ycbcrsubsampling [ 1 ] ) ;
EXPR	293:3	293:3	10	scanline_size = ( samplingrow_size / ycbcrsubsampling [ 1 ] )
ASSIGN	293:3	293:19	11	scanline_size = ( samplingrow_size / ycbcrsubsampling [ 1 ] )
LVAL	293:3	293:3	12	scanline_size
FIELD	293:3	293:3	13	scanline_size
LEAF_NODE	293:3	293:3	14	scanline_size
ASSIGN_OP	293:17	293:17	12	=
LEAF_NODE	293:17	293:17	13	=
RVAL	293:19	293:56	12	( samplingrow_size / ycbcrsubsampling [ 1 ] )
LEAF_NODE	293:19	293:19	13	(
FIELD	293:20	293:20	13	samplingrow_size
LEAF_NODE	293:20	293:20	14	samplingrow_size
LEAF_NODE	293:36	293:36	13	/
FIELD	293:37	293:55	13	ycbcrsubsampling [ 1 ]
LEAF_NODE	293:37	293:37	14	ycbcrsubsampling
LEAF_NODE	293:53	293:53	14	[
EXPR	293:54	293:54	14	1
FIELD	293:54	293:54	15	1
LEAF_NODE	293:54	293:54	16	1
LEAF_NODE	293:55	293:55	14	]
LEAF_NODE	293:56	293:56	13	)
LEAF_NODE	293:57	293:57	10	;
LEAF_NODE	294:2	294:2	8	}
SELECTION	295:2	296:2	6	
KEYWORD	295:2	295:2	7	else
LEAF_NODE	295:2	295:2	8	else
STATEMENTS	296:2	300:2	7	
LEAF_NODE	296:2	296:2	8	{
STATEMENTS	297:3	299:3	8	
SIMPLE_DECL	297:3	297:26	9	uint64 scanline_samples ;
VAR_DECL	297:3	297:10	10	uint64 scanline_samples
TYPE	297:3	297:3	11	uint64
TYPE_NAME	297:3	297:3	12	uint64
LEAF_NODE	297:3	297:3	13	uint64
NAME	297:10	297:10	11	scanline_samples
LEAF_NODE	297:10	297:10	12	scanline_samples
LEAF_NODE	297:26	297:26	10	;
EXPR_STATEMENT	298:3	298:88	9	scanline_samples = _TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_samplesperpixel , module ) ;
EXPR	298:3	298:3	10	scanline_samples = _TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_samplesperpixel , module )
ASSIGN	298:3	298:20	11	scanline_samples = _TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_samplesperpixel , module )
LVAL	298:3	298:3	12	scanline_samples
FIELD	298:3	298:3	13	scanline_samples
LEAF_NODE	298:3	298:3	14	scanline_samples
ASSIGN_OP	298:19	298:19	12	=
LEAF_NODE	298:19	298:19	13	=
RVAL	298:20	298:20	12	_TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_samplesperpixel , module )
FUNCTION_CALL	298:20	298:87	13	_TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_samplesperpixel , module )
CALLEE	298:20	298:20	14	_TIFFMultiply64
LEAF_NODE	298:20	298:20	15	_TIFFMultiply64
LEAF_NODE	298:35	298:35	14	(
ARGUMENT	298:36	298:36	14	tif
FIELD	298:36	298:36	15	tif
LEAF_NODE	298:36	298:36	16	tif
LEAF_NODE	298:39	298:39	14	,
ARGUMENT	298:40	298:40	14	td -> td_imagewidth
FIELD	298:40	298:44	15	td -> td_imagewidth
LEAF_NODE	298:40	298:40	16	td
LEAF_NODE	298:42	298:42	16	->
LEAF_NODE	298:44	298:44	16	td_imagewidth
LEAF_NODE	298:57	298:57	14	,
ARGUMENT	298:58	298:58	14	td -> td_samplesperpixel
FIELD	298:58	298:62	15	td -> td_samplesperpixel
LEAF_NODE	298:58	298:58	16	td
LEAF_NODE	298:60	298:60	16	->
LEAF_NODE	298:62	298:62	16	td_samplesperpixel
LEAF_NODE	298:80	298:80	14	,
ARGUMENT	298:81	298:81	14	module
FIELD	298:81	298:81	15	module
LEAF_NODE	298:81	298:81	16	module
LEAF_NODE	298:87	298:87	14	)
LEAF_NODE	298:88	298:88	10	;
EXPR_STATEMENT	299:3	299:100	9	scanline_size = TIFFhowmany_64 ( _TIFFMultiply64 ( tif , scanline_samples , td -> td_bitspersample , module ) , 8 ) ;
EXPR	299:3	299:3	10	scanline_size = TIFFhowmany_64 ( _TIFFMultiply64 ( tif , scanline_samples , td -> td_bitspersample , module ) , 8 )
ASSIGN	299:3	299:17	11	scanline_size = TIFFhowmany_64 ( _TIFFMultiply64 ( tif , scanline_samples , td -> td_bitspersample , module ) , 8 )
LVAL	299:3	299:3	12	scanline_size
FIELD	299:3	299:3	13	scanline_size
LEAF_NODE	299:3	299:3	14	scanline_size
ASSIGN_OP	299:16	299:16	12	=
LEAF_NODE	299:16	299:16	13	=
RVAL	299:17	299:17	12	TIFFhowmany_64 ( _TIFFMultiply64 ( tif , scanline_samples , td -> td_bitspersample , module ) , 8 )
FUNCTION_CALL	299:17	299:99	13	TIFFhowmany_64 ( _TIFFMultiply64 ( tif , scanline_samples , td -> td_bitspersample , module ) , 8 )
CALLEE	299:17	299:17	14	TIFFhowmany_64
LEAF_NODE	299:17	299:17	15	TIFFhowmany_64
LEAF_NODE	299:31	299:31	14	(
ARGUMENT	299:32	299:32	14	_TIFFMultiply64 ( tif , scanline_samples , td -> td_bitspersample , module )
FUNCTION_CALL	299:32	299:96	15	_TIFFMultiply64 ( tif , scanline_samples , td -> td_bitspersample , module )
CALLEE	299:32	299:32	16	_TIFFMultiply64
LEAF_NODE	299:32	299:32	17	_TIFFMultiply64
LEAF_NODE	299:47	299:47	16	(
ARGUMENT	299:48	299:48	16	tif
FIELD	299:48	299:48	17	tif
LEAF_NODE	299:48	299:48	18	tif
LEAF_NODE	299:51	299:51	16	,
ARGUMENT	299:52	299:52	16	scanline_samples
FIELD	299:52	299:52	17	scanline_samples
LEAF_NODE	299:52	299:52	18	scanline_samples
LEAF_NODE	299:68	299:68	16	,
ARGUMENT	299:69	299:69	16	td -> td_bitspersample
FIELD	299:69	299:73	17	td -> td_bitspersample
LEAF_NODE	299:69	299:69	18	td
LEAF_NODE	299:71	299:71	18	->
LEAF_NODE	299:73	299:73	18	td_bitspersample
LEAF_NODE	299:89	299:89	16	,
ARGUMENT	299:90	299:90	16	module
FIELD	299:90	299:90	17	module
LEAF_NODE	299:90	299:90	18	module
LEAF_NODE	299:96	299:96	16	)
LEAF_NODE	299:97	299:97	14	,
ARGUMENT	299:98	299:98	14	8
FIELD	299:98	299:98	15	8
LEAF_NODE	299:98	299:98	16	8
LEAF_NODE	299:99	299:99	14	)
LEAF_NODE	299:100	299:100	10	;
LEAF_NODE	300:2	300:2	8	}
LEAF_NODE	301:1	301:1	5	}
SELECTION	302:1	303:8	3	
KEYWORD	302:1	302:1	4	else
LEAF_NODE	302:1	302:1	5	else
STATEMENTS	303:8	305:8	4	
LEAF_NODE	303:8	303:8	5	{
STATEMENTS	304:2	304:2	5	
EXPR_STATEMENT	304:2	304:100	6	scanline_size = TIFFhowmany_64 ( _TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_bitspersample , module ) , 8 ) ;
EXPR	304:2	304:2	7	scanline_size = TIFFhowmany_64 ( _TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_bitspersample , module ) , 8 )
ASSIGN	304:2	304:16	8	scanline_size = TIFFhowmany_64 ( _TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_bitspersample , module ) , 8 )
LVAL	304:2	304:2	9	scanline_size
FIELD	304:2	304:2	10	scanline_size
LEAF_NODE	304:2	304:2	11	scanline_size
ASSIGN_OP	304:15	304:15	9	=
LEAF_NODE	304:15	304:15	10	=
RVAL	304:16	304:16	9	TIFFhowmany_64 ( _TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_bitspersample , module ) , 8 )
FUNCTION_CALL	304:16	304:99	10	TIFFhowmany_64 ( _TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_bitspersample , module ) , 8 )
CALLEE	304:16	304:16	11	TIFFhowmany_64
LEAF_NODE	304:16	304:16	12	TIFFhowmany_64
LEAF_NODE	304:30	304:30	11	(
ARGUMENT	304:31	304:31	11	_TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_bitspersample , module )
FUNCTION_CALL	304:31	304:96	12	_TIFFMultiply64 ( tif , td -> td_imagewidth , td -> td_bitspersample , module )
CALLEE	304:31	304:31	13	_TIFFMultiply64
LEAF_NODE	304:31	304:31	14	_TIFFMultiply64
LEAF_NODE	304:46	304:46	13	(
ARGUMENT	304:47	304:47	13	tif
FIELD	304:47	304:47	14	tif
LEAF_NODE	304:47	304:47	15	tif
LEAF_NODE	304:50	304:50	13	,
ARGUMENT	304:51	304:51	13	td -> td_imagewidth
FIELD	304:51	304:55	14	td -> td_imagewidth
LEAF_NODE	304:51	304:51	15	td
LEAF_NODE	304:53	304:53	15	->
LEAF_NODE	304:55	304:55	15	td_imagewidth
LEAF_NODE	304:68	304:68	13	,
ARGUMENT	304:69	304:69	13	td -> td_bitspersample
FIELD	304:69	304:73	14	td -> td_bitspersample
LEAF_NODE	304:69	304:69	15	td
LEAF_NODE	304:71	304:71	15	->
LEAF_NODE	304:73	304:73	15	td_bitspersample
LEAF_NODE	304:89	304:89	13	,
ARGUMENT	304:90	304:90	13	module
FIELD	304:90	304:90	14	module
LEAF_NODE	304:90	304:90	15	module
LEAF_NODE	304:96	304:96	13	)
LEAF_NODE	304:97	304:97	11	,
ARGUMENT	304:98	304:98	11	8
FIELD	304:98	304:98	12	8
LEAF_NODE	304:98	304:98	13	8
LEAF_NODE	304:99	304:99	11	)
LEAF_NODE	304:100	304:100	7	;
LEAF_NODE	305:8	305:8	5	}
SELECTION	306:8	307:8	3	
KEYWORD	306:8	306:8	4	if
LEAF_NODE	306:8	306:8	5	if
LEAF_NODE	306:11	306:11	4	(
CONDITION	306:12	306:12	4	scanline_size == 0
EXPR	306:12	306:29	5	scanline_size == 0
FIELD	306:12	306:12	6	scanline_size
LEAF_NODE	306:12	306:12	7	scanline_size
EQ_OPERATOR	306:26	306:26	6	==
LEAF_NODE	306:26	306:26	7	==
FIELD	306:29	306:29	6	0
LEAF_NODE	306:29	306:29	7	0
LEAF_NODE	306:30	306:30	4	)
STATEMENTS	307:8	310:8	4	
LEAF_NODE	307:8	307:8	5	{
STATEMENTS	308:16	309:16	5	
EXPR_STATEMENT	308:16	308:89	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Computed scanline size is zero" ) ;
EXPR	308:16	308:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Computed scanline size is zero" )
FUNCTION_CALL	308:16	308:88	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Computed scanline size is zero" )
CALLEE	308:16	308:16	9	TIFFErrorExt
LEAF_NODE	308:16	308:16	10	TIFFErrorExt
LEAF_NODE	308:28	308:28	9	(
ARGUMENT	308:29	308:29	9	tif -> tif_clientdata
FIELD	308:29	308:34	10	tif -> tif_clientdata
LEAF_NODE	308:29	308:29	11	tif
LEAF_NODE	308:32	308:32	11	->
LEAF_NODE	308:34	308:34	11	tif_clientdata
LEAF_NODE	308:48	308:48	9	,
ARGUMENT	308:49	308:49	9	module
FIELD	308:49	308:49	10	module
LEAF_NODE	308:49	308:49	11	module
LEAF_NODE	308:55	308:55	9	,
ARGUMENT	308:56	308:56	9	"Computed scanline size is zero"
FIELD	308:56	308:56	10	"Computed scanline size is zero"
LEAF_NODE	308:56	308:56	11	"Computed scanline size is zero"
LEAF_NODE	308:88	308:88	9	)
LEAF_NODE	308:89	308:89	7	;
JUMP_STATEMENT	309:16	309:24	6	return 0 ;
KEYWORD	309:16	309:16	7	return
LEAF_NODE	309:16	309:16	8	return
DESTINATION	309:23	309:23	7	0
EXPR	309:23	309:23	8	0
FIELD	309:23	309:23	9	0
LEAF_NODE	309:23	309:23	10	0
LEAF_NODE	309:24	309:24	7	;
LEAF_NODE	310:8	310:8	5	}
LEAF_NODE	311:1	311:1	3	return
LEAF_NODE	311:7	311:7	3	(
LEAF_NODE	311:8	311:8	3	scanline_size
LEAF_NODE	311:21	311:21	3	)
LEAF_NODE	311:22	311:22	3	;
LEAF_NODE	312:0	312:0	2	}
FUNCTION_DEF	313:0	320:0	1	
RETURN_TYPE	313:0	313:0	2	tmsize_t
TYPE_NAME	313:0	313:0	3	tmsize_t
LEAF_NODE	313:0	313:0	4	tmsize_t
FUNCTION_NAME	314:0	314:0	2	TIFFScanlineSize
LEAF_NODE	314:0	314:0	3	TIFFScanlineSize
PARAMETER_LIST	314:16	314:26	2	( TIFF * tif )
LEAF_NODE	314:16	314:16	3	(
PARAMETER_DECL	314:17	314:23	3	TIFF * tif
TYPE	314:17	314:21	4	TIFF *
TYPE_NAME	314:17	314:17	5	TIFF
LEAF_NODE	314:17	314:17	6	TIFF
POINTER	314:21	314:21	5	*
LEAF_NODE	314:21	314:21	6	*
NAME	314:23	314:23	4	tif
LEAF_NODE	314:23	314:23	5	tif
LEAF_NODE	314:26	314:26	3	)
LEAF_NODE	315:0	315:0	2	{
STATEMENTS	316:1	319:1	2	
LEAF_NODE	316:1	316:1	3	static
SIMPLE_DECL	316:8	316:48	3	const char [ ] module ; module = "TIFFScanlineSize" ;
VAR_DECL	316:8	316:19	4	const char [ ] module ; module = "TIFFScanlineSize"
TYPE	316:8	316:25	5	const char [ ]
TYPE_NAME	316:8	316:14	6	const char
LEAF_NODE	316:8	316:8	7	const
LEAF_NODE	316:14	316:14	7	char
TYPE_SUFFIX	316:25	316:26	6	[ ]
LEAF_NODE	316:25	316:25	7	[
LEAF_NODE	316:26	316:26	7	]
NAME	316:19	316:19	5	module
LEAF_NODE	316:19	316:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	316:19	316:19	5	module = "TIFFScanlineSize"
ASSIGN	316:19	316:30	6	module = "TIFFScanlineSize"
LVAL	316:19	316:19	7	module
NAME	316:19	316:19	8	module
LEAF_NODE	316:19	316:19	9	module
ASSIGN_OP	316:28	316:28	7	=
LEAF_NODE	316:28	316:28	8	=
RVAL	316:30	316:30	7	"TIFFScanlineSize"
FIELD	316:30	316:30	8	"TIFFScanlineSize"
LEAF_NODE	316:30	316:30	9	"TIFFScanlineSize"
LEAF_NODE	316:48	316:48	4	;
SIMPLE_DECL	317:1	317:9	3	uint64 m ;
VAR_DECL	317:1	317:8	4	uint64 m
TYPE	317:1	317:1	5	uint64
TYPE_NAME	317:1	317:1	6	uint64
LEAF_NODE	317:1	317:1	7	uint64
NAME	317:8	317:8	5	m
LEAF_NODE	317:8	317:8	6	m
LEAF_NODE	317:9	317:9	4	;
EXPR_STATEMENT	318:1	318:26	3	m = TIFFScanlineSize64 ( tif ) ;
EXPR	318:1	318:1	4	m = TIFFScanlineSize64 ( tif )
ASSIGN	318:1	318:3	5	m = TIFFScanlineSize64 ( tif )
LVAL	318:1	318:1	6	m
FIELD	318:1	318:1	7	m
LEAF_NODE	318:1	318:1	8	m
ASSIGN_OP	318:2	318:2	6	=
LEAF_NODE	318:2	318:2	7	=
RVAL	318:3	318:3	6	TIFFScanlineSize64 ( tif )
FUNCTION_CALL	318:3	318:25	7	TIFFScanlineSize64 ( tif )
CALLEE	318:3	318:3	8	TIFFScanlineSize64
LEAF_NODE	318:3	318:3	9	TIFFScanlineSize64
LEAF_NODE	318:21	318:21	8	(
ARGUMENT	318:22	318:22	8	tif
FIELD	318:22	318:22	9	tif
LEAF_NODE	318:22	318:22	10	tif
LEAF_NODE	318:25	318:25	8	)
LEAF_NODE	318:26	318:26	4	;
JUMP_STATEMENT	319:1	319:46	3	return _TIFFCastUInt64ToSSize ( tif , m , module ) ;
KEYWORD	319:1	319:1	4	return
LEAF_NODE	319:1	319:1	5	return
DESTINATION	319:8	319:8	4	_TIFFCastUInt64ToSSize ( tif , m , module )
EXPR	319:8	319:8	5	_TIFFCastUInt64ToSSize ( tif , m , module )
FUNCTION_CALL	319:8	319:45	6	_TIFFCastUInt64ToSSize ( tif , m , module )
CALLEE	319:8	319:8	7	_TIFFCastUInt64ToSSize
LEAF_NODE	319:8	319:8	8	_TIFFCastUInt64ToSSize
LEAF_NODE	319:30	319:30	7	(
ARGUMENT	319:31	319:31	7	tif
FIELD	319:31	319:31	8	tif
LEAF_NODE	319:31	319:31	9	tif
LEAF_NODE	319:34	319:34	7	,
ARGUMENT	319:36	319:36	7	m
FIELD	319:36	319:36	8	m
LEAF_NODE	319:36	319:36	9	m
LEAF_NODE	319:37	319:37	7	,
ARGUMENT	319:39	319:39	7	module
FIELD	319:39	319:39	8	module
LEAF_NODE	319:39	319:39	9	module
LEAF_NODE	319:45	319:45	7	)
LEAF_NODE	319:46	319:46	4	;
LEAF_NODE	320:0	320:0	2	}
FUNCTION_DEF	328:0	342:0	1	
RETURN_TYPE	328:0	328:0	2	uint64
TYPE_NAME	328:0	328:0	3	uint64
LEAF_NODE	328:0	328:0	4	uint64
FUNCTION_NAME	329:0	329:0	2	TIFFRasterScanlineSize64
LEAF_NODE	329:0	329:0	3	TIFFRasterScanlineSize64
PARAMETER_LIST	329:24	329:34	2	( TIFF * tif )
LEAF_NODE	329:24	329:24	3	(
PARAMETER_DECL	329:25	329:31	3	TIFF * tif
TYPE	329:25	329:29	4	TIFF *
TYPE_NAME	329:25	329:25	5	TIFF
LEAF_NODE	329:25	329:25	6	TIFF
POINTER	329:29	329:29	5	*
LEAF_NODE	329:29	329:29	6	*
NAME	329:31	329:31	4	tif
LEAF_NODE	329:31	329:31	5	tif
LEAF_NODE	329:34	329:34	3	)
LEAF_NODE	330:0	330:0	2	{
STATEMENTS	331:1	339:3	2	
LEAF_NODE	331:1	331:1	3	static
SIMPLE_DECL	331:8	331:56	3	const char [ ] module ; module = "TIFFRasterScanlineSize64" ;
VAR_DECL	331:8	331:19	4	const char [ ] module ; module = "TIFFRasterScanlineSize64"
TYPE	331:8	331:25	5	const char [ ]
TYPE_NAME	331:8	331:14	6	const char
LEAF_NODE	331:8	331:8	7	const
LEAF_NODE	331:14	331:14	7	char
TYPE_SUFFIX	331:25	331:26	6	[ ]
LEAF_NODE	331:25	331:25	7	[
LEAF_NODE	331:26	331:26	7	]
NAME	331:19	331:19	5	module
LEAF_NODE	331:19	331:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	331:19	331:19	5	module = "TIFFRasterScanlineSize64"
ASSIGN	331:19	331:30	6	module = "TIFFRasterScanlineSize64"
LVAL	331:19	331:19	7	module
NAME	331:19	331:19	8	module
LEAF_NODE	331:19	331:19	9	module
ASSIGN_OP	331:28	331:28	7	=
LEAF_NODE	331:28	331:28	8	=
RVAL	331:30	331:30	7	"TIFFRasterScanlineSize64"
FIELD	331:30	331:30	8	"TIFFRasterScanlineSize64"
LEAF_NODE	331:30	331:30	9	"TIFFRasterScanlineSize64"
LEAF_NODE	331:56	331:56	4	;
SIMPLE_DECL	332:1	332:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	332:1	332:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	332:1	332:15	5	TIFFDirectory *
TYPE_NAME	332:1	332:1	6	TIFFDirectory
LEAF_NODE	332:1	332:1	7	TIFFDirectory
POINTER	332:15	332:15	6	*
LEAF_NODE	332:15	332:15	7	*
NAME	332:16	332:16	5	td
LEAF_NODE	332:16	332:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	332:16	332:16	5	td = & tif -> tif_dir
ASSIGN	332:16	332:21	6	td = & tif -> tif_dir
LVAL	332:16	332:16	7	td
NAME	332:16	332:16	8	td
LEAF_NODE	332:16	332:16	9	td
ASSIGN_OP	332:19	332:19	7	=
LEAF_NODE	332:19	332:19	8	=
RVAL	332:21	332:21	7	& tif -> tif_dir
UNARY_EXPR	332:21	332:22	8	& tif -> tif_dir
UNARY_OPERATOR	332:21	332:21	9	&
LEAF_NODE	332:21	332:21	10	&
FIELD	332:22	332:27	9	tif -> tif_dir
LEAF_NODE	332:22	332:22	10	tif
LEAF_NODE	332:25	332:25	10	->
LEAF_NODE	332:27	332:27	10	tif_dir
LEAF_NODE	332:34	332:34	4	;
SIMPLE_DECL	333:1	333:16	3	uint64 scanline ;
VAR_DECL	333:1	333:8	4	uint64 scanline
TYPE	333:1	333:1	5	uint64
TYPE_NAME	333:1	333:1	6	uint64
LEAF_NODE	333:1	333:1	7	uint64
NAME	333:8	333:8	5	scanline
LEAF_NODE	333:8	333:8	6	scanline
LEAF_NODE	333:16	333:16	4	;
EXPR_STATEMENT	335:1	335:81	3	scanline = _TIFFMultiply64 ( tif , td -> td_bitspersample , td -> td_imagewidth , module ) ;
EXPR	335:1	335:1	4	scanline = _TIFFMultiply64 ( tif , td -> td_bitspersample , td -> td_imagewidth , module )
ASSIGN	335:1	335:12	5	scanline = _TIFFMultiply64 ( tif , td -> td_bitspersample , td -> td_imagewidth , module )
LVAL	335:1	335:1	6	scanline
FIELD	335:1	335:1	7	scanline
LEAF_NODE	335:1	335:1	8	scanline
ASSIGN_OP	335:10	335:10	6	=
LEAF_NODE	335:10	335:10	7	=
RVAL	335:12	335:12	6	_TIFFMultiply64 ( tif , td -> td_bitspersample , td -> td_imagewidth , module )
FUNCTION_CALL	335:12	335:80	7	_TIFFMultiply64 ( tif , td -> td_bitspersample , td -> td_imagewidth , module )
CALLEE	335:12	335:12	8	_TIFFMultiply64
LEAF_NODE	335:12	335:12	9	_TIFFMultiply64
LEAF_NODE	335:27	335:27	8	(
ARGUMENT	335:28	335:28	8	tif
FIELD	335:28	335:28	9	tif
LEAF_NODE	335:28	335:28	10	tif
LEAF_NODE	335:31	335:31	8	,
ARGUMENT	335:33	335:33	8	td -> td_bitspersample
FIELD	335:33	335:37	9	td -> td_bitspersample
LEAF_NODE	335:33	335:33	10	td
LEAF_NODE	335:35	335:35	10	->
LEAF_NODE	335:37	335:37	10	td_bitspersample
LEAF_NODE	335:53	335:53	8	,
ARGUMENT	335:55	335:55	8	td -> td_imagewidth
FIELD	335:55	335:59	9	td -> td_imagewidth
LEAF_NODE	335:55	335:55	10	td
LEAF_NODE	335:57	335:57	10	->
LEAF_NODE	335:59	335:59	10	td_imagewidth
LEAF_NODE	335:72	335:72	8	,
ARGUMENT	335:74	335:74	8	module
FIELD	335:74	335:74	9	module
LEAF_NODE	335:74	335:74	10	module
LEAF_NODE	335:80	335:80	8	)
LEAF_NODE	335:81	335:81	4	;
SELECTION	336:1	336:49	3	
KEYWORD	336:1	336:1	4	if
LEAF_NODE	336:1	336:1	5	if
LEAF_NODE	336:4	336:4	4	(
CONDITION	336:5	336:5	4	td -> td_planarconfig == PLANARCONFIG_CONTIG
EXPR	336:5	336:28	5	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	336:5	336:9	6	td -> td_planarconfig
LEAF_NODE	336:5	336:5	7	td
LEAF_NODE	336:7	336:7	7	->
LEAF_NODE	336:9	336:9	7	td_planarconfig
EQ_OPERATOR	336:25	336:25	6	==
LEAF_NODE	336:25	336:25	7	==
FIELD	336:28	336:28	6	PLANARCONFIG_CONTIG
LEAF_NODE	336:28	336:28	7	PLANARCONFIG_CONTIG
LEAF_NODE	336:47	336:47	4	)
STATEMENTS	336:49	339:1	4	
LEAF_NODE	336:49	336:49	5	{
STATEMENTS	337:2	338:2	5	
EXPR_STATEMENT	337:2	337:75	6	scanline = _TIFFMultiply64 ( tif , scanline , td -> td_samplesperpixel , module ) ;
EXPR	337:2	337:2	7	scanline = _TIFFMultiply64 ( tif , scanline , td -> td_samplesperpixel , module )
ASSIGN	337:2	337:13	8	scanline = _TIFFMultiply64 ( tif , scanline , td -> td_samplesperpixel , module )
LVAL	337:2	337:2	9	scanline
FIELD	337:2	337:2	10	scanline
LEAF_NODE	337:2	337:2	11	scanline
ASSIGN_OP	337:11	337:11	9	=
LEAF_NODE	337:11	337:11	10	=
RVAL	337:13	337:13	9	_TIFFMultiply64 ( tif , scanline , td -> td_samplesperpixel , module )
FUNCTION_CALL	337:13	337:74	10	_TIFFMultiply64 ( tif , scanline , td -> td_samplesperpixel , module )
CALLEE	337:13	337:13	11	_TIFFMultiply64
LEAF_NODE	337:13	337:13	12	_TIFFMultiply64
LEAF_NODE	337:28	337:28	11	(
ARGUMENT	337:29	337:29	11	tif
FIELD	337:29	337:29	12	tif
LEAF_NODE	337:29	337:29	13	tif
LEAF_NODE	337:32	337:32	11	,
ARGUMENT	337:34	337:34	11	scanline
FIELD	337:34	337:34	12	scanline
LEAF_NODE	337:34	337:34	13	scanline
LEAF_NODE	337:42	337:42	11	,
ARGUMENT	337:44	337:44	11	td -> td_samplesperpixel
FIELD	337:44	337:48	12	td -> td_samplesperpixel
LEAF_NODE	337:44	337:44	13	td
LEAF_NODE	337:46	337:46	13	->
LEAF_NODE	337:48	337:48	13	td_samplesperpixel
LEAF_NODE	337:66	337:66	11	,
ARGUMENT	337:68	337:68	11	module
FIELD	337:68	337:68	12	module
LEAF_NODE	337:68	337:68	13	module
LEAF_NODE	337:74	337:74	11	)
LEAF_NODE	337:75	337:75	7	;
JUMP_STATEMENT	338:2	338:36	6	return ( TIFFhowmany8_64 ( scanline ) ) ;
KEYWORD	338:2	338:2	7	return
LEAF_NODE	338:2	338:2	8	return
DESTINATION	338:9	338:9	7	( TIFFhowmany8_64 ( scanline ) )
EXPR	338:9	338:35	8	( TIFFhowmany8_64 ( scanline ) )
LEAF_NODE	338:9	338:9	9	(
FUNCTION_CALL	338:10	338:34	9	TIFFhowmany8_64 ( scanline )
CALLEE	338:10	338:10	10	TIFFhowmany8_64
LEAF_NODE	338:10	338:10	11	TIFFhowmany8_64
LEAF_NODE	338:25	338:25	10	(
ARGUMENT	338:26	338:26	10	scanline
FIELD	338:26	338:26	11	scanline
LEAF_NODE	338:26	338:26	12	scanline
LEAF_NODE	338:34	338:34	10	)
LEAF_NODE	338:35	338:35	9	)
LEAF_NODE	338:36	338:36	7	;
LEAF_NODE	339:1	339:1	5	}
SELECTION	339:3	340:2	3	
KEYWORD	339:3	339:3	4	else
LEAF_NODE	339:3	339:3	5	else
STATEMENTS	340:2	340:2	4	
JUMP_STATEMENT	340:2	341:38	5	return ( _TIFFMultiply64 ( tif , TIFFhowmany8_64 ( scanline ) , td -> td_samplesperpixel , module ) ) ;
KEYWORD	340:2	340:2	6	return
LEAF_NODE	340:2	340:2	7	return
DESTINATION	340:9	340:9	6	( _TIFFMultiply64 ( tif , TIFFhowmany8_64 ( scanline ) , td -> td_samplesperpixel , module ) )
EXPR	340:9	341:37	7	( _TIFFMultiply64 ( tif , TIFFhowmany8_64 ( scanline ) , td -> td_samplesperpixel , module ) )
LEAF_NODE	340:9	340:9	8	(
FUNCTION_CALL	340:10	341:36	8	_TIFFMultiply64 ( tif , TIFFhowmany8_64 ( scanline ) , td -> td_samplesperpixel , module )
CALLEE	340:10	340:10	9	_TIFFMultiply64
LEAF_NODE	340:10	340:10	10	_TIFFMultiply64
LEAF_NODE	340:25	340:25	9	(
ARGUMENT	340:26	340:26	9	tif
FIELD	340:26	340:26	10	tif
LEAF_NODE	340:26	340:26	11	tif
LEAF_NODE	340:29	340:29	9	,
ARGUMENT	340:31	340:31	9	TIFFhowmany8_64 ( scanline )
FUNCTION_CALL	340:31	340:55	10	TIFFhowmany8_64 ( scanline )
CALLEE	340:31	340:31	11	TIFFhowmany8_64
LEAF_NODE	340:31	340:31	12	TIFFhowmany8_64
LEAF_NODE	340:46	340:46	11	(
ARGUMENT	340:47	340:47	11	scanline
FIELD	340:47	340:47	12	scanline
LEAF_NODE	340:47	340:47	13	scanline
LEAF_NODE	340:55	340:55	11	)
LEAF_NODE	340:56	340:56	9	,
ARGUMENT	341:6	341:6	9	td -> td_samplesperpixel
FIELD	341:6	341:10	10	td -> td_samplesperpixel
LEAF_NODE	341:6	341:6	11	td
LEAF_NODE	341:8	341:8	11	->
LEAF_NODE	341:10	341:10	11	td_samplesperpixel
LEAF_NODE	341:28	341:28	9	,
ARGUMENT	341:30	341:30	9	module
FIELD	341:30	341:30	10	module
LEAF_NODE	341:30	341:30	11	module
LEAF_NODE	341:36	341:36	9	)
LEAF_NODE	341:37	341:37	8	)
LEAF_NODE	341:38	341:38	6	;
LEAF_NODE	342:0	342:0	2	}
FUNCTION_DEF	343:0	350:0	1	
RETURN_TYPE	343:0	343:0	2	tmsize_t
TYPE_NAME	343:0	343:0	3	tmsize_t
LEAF_NODE	343:0	343:0	4	tmsize_t
FUNCTION_NAME	344:0	344:0	2	TIFFRasterScanlineSize
LEAF_NODE	344:0	344:0	3	TIFFRasterScanlineSize
PARAMETER_LIST	344:22	344:32	2	( TIFF * tif )
LEAF_NODE	344:22	344:22	3	(
PARAMETER_DECL	344:23	344:29	3	TIFF * tif
TYPE	344:23	344:27	4	TIFF *
TYPE_NAME	344:23	344:23	5	TIFF
LEAF_NODE	344:23	344:23	6	TIFF
POINTER	344:27	344:27	5	*
LEAF_NODE	344:27	344:27	6	*
NAME	344:29	344:29	4	tif
LEAF_NODE	344:29	344:29	5	tif
LEAF_NODE	344:32	344:32	3	)
LEAF_NODE	345:0	345:0	2	{
STATEMENTS	346:1	349:1	2	
LEAF_NODE	346:1	346:1	3	static
SIMPLE_DECL	346:8	346:54	3	const char [ ] module ; module = "TIFFRasterScanlineSize" ;
VAR_DECL	346:8	346:19	4	const char [ ] module ; module = "TIFFRasterScanlineSize"
TYPE	346:8	346:25	5	const char [ ]
TYPE_NAME	346:8	346:14	6	const char
LEAF_NODE	346:8	346:8	7	const
LEAF_NODE	346:14	346:14	7	char
TYPE_SUFFIX	346:25	346:26	6	[ ]
LEAF_NODE	346:25	346:25	7	[
LEAF_NODE	346:26	346:26	7	]
NAME	346:19	346:19	5	module
LEAF_NODE	346:19	346:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	346:19	346:19	5	module = "TIFFRasterScanlineSize"
ASSIGN	346:19	346:30	6	module = "TIFFRasterScanlineSize"
LVAL	346:19	346:19	7	module
NAME	346:19	346:19	8	module
LEAF_NODE	346:19	346:19	9	module
ASSIGN_OP	346:28	346:28	7	=
LEAF_NODE	346:28	346:28	8	=
RVAL	346:30	346:30	7	"TIFFRasterScanlineSize"
FIELD	346:30	346:30	8	"TIFFRasterScanlineSize"
LEAF_NODE	346:30	346:30	9	"TIFFRasterScanlineSize"
LEAF_NODE	346:54	346:54	4	;
SIMPLE_DECL	347:1	347:9	3	uint64 m ;
VAR_DECL	347:1	347:8	4	uint64 m
TYPE	347:1	347:1	5	uint64
TYPE_NAME	347:1	347:1	6	uint64
LEAF_NODE	347:1	347:1	7	uint64
NAME	347:8	347:8	5	m
LEAF_NODE	347:8	347:8	6	m
LEAF_NODE	347:9	347:9	4	;
EXPR_STATEMENT	348:1	348:32	3	m = TIFFRasterScanlineSize64 ( tif ) ;
EXPR	348:1	348:1	4	m = TIFFRasterScanlineSize64 ( tif )
ASSIGN	348:1	348:3	5	m = TIFFRasterScanlineSize64 ( tif )
LVAL	348:1	348:1	6	m
FIELD	348:1	348:1	7	m
LEAF_NODE	348:1	348:1	8	m
ASSIGN_OP	348:2	348:2	6	=
LEAF_NODE	348:2	348:2	7	=
RVAL	348:3	348:3	6	TIFFRasterScanlineSize64 ( tif )
FUNCTION_CALL	348:3	348:31	7	TIFFRasterScanlineSize64 ( tif )
CALLEE	348:3	348:3	8	TIFFRasterScanlineSize64
LEAF_NODE	348:3	348:3	9	TIFFRasterScanlineSize64
LEAF_NODE	348:27	348:27	8	(
ARGUMENT	348:28	348:28	8	tif
FIELD	348:28	348:28	9	tif
LEAF_NODE	348:28	348:28	10	tif
LEAF_NODE	348:31	348:31	8	)
LEAF_NODE	348:32	348:32	4	;
JUMP_STATEMENT	349:1	349:46	3	return _TIFFCastUInt64ToSSize ( tif , m , module ) ;
KEYWORD	349:1	349:1	4	return
LEAF_NODE	349:1	349:1	5	return
DESTINATION	349:8	349:8	4	_TIFFCastUInt64ToSSize ( tif , m , module )
EXPR	349:8	349:8	5	_TIFFCastUInt64ToSSize ( tif , m , module )
FUNCTION_CALL	349:8	349:45	6	_TIFFCastUInt64ToSSize ( tif , m , module )
CALLEE	349:8	349:8	7	_TIFFCastUInt64ToSSize
LEAF_NODE	349:8	349:8	8	_TIFFCastUInt64ToSSize
LEAF_NODE	349:30	349:30	7	(
ARGUMENT	349:31	349:31	7	tif
FIELD	349:31	349:31	8	tif
LEAF_NODE	349:31	349:31	9	tif
LEAF_NODE	349:34	349:34	7	,
ARGUMENT	349:36	349:36	7	m
FIELD	349:36	349:36	8	m
LEAF_NODE	349:36	349:36	9	m
LEAF_NODE	349:37	349:37	7	,
ARGUMENT	349:39	349:39	7	module
FIELD	349:39	349:39	8	module
LEAF_NODE	349:39	349:39	9	module
LEAF_NODE	349:45	349:45	7	)
LEAF_NODE	349:46	349:46	4	;
LEAF_NODE	350:0	350:0	2	}
