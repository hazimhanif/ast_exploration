SOURCE_FILE	46:0	168:0	0	
FUNCTION_DEF	46:0	150:0	1	
RETURN_TYPE	46:0	46:7	2	static int
LEAF_NODE	46:0	46:0	3	static
TYPE_NAME	46:7	46:7	3	int
LEAF_NODE	46:7	46:7	4	int
FUNCTION_NAME	47:0	47:0	2	NeXTDecode
LEAF_NODE	47:0	47:0	3	NeXTDecode
PARAMETER_LIST	47:10	47:56	2	( TIFF * tif , uint8 * buf , tmsize_t occ , uint16 s )
LEAF_NODE	47:10	47:10	3	(
PARAMETER_DECL	47:11	47:17	3	TIFF * tif
TYPE	47:11	47:15	4	TIFF *
TYPE_NAME	47:11	47:11	5	TIFF
LEAF_NODE	47:11	47:11	6	TIFF
POINTER	47:15	47:15	5	*
LEAF_NODE	47:15	47:15	6	*
NAME	47:17	47:17	4	tif
LEAF_NODE	47:17	47:17	5	tif
LEAF_NODE	47:20	47:20	3	,
PARAMETER_DECL	47:22	47:29	3	uint8 * buf
TYPE	47:22	47:27	4	uint8 *
TYPE_NAME	47:22	47:22	5	uint8
LEAF_NODE	47:22	47:22	6	uint8
POINTER	47:27	47:27	5	*
LEAF_NODE	47:27	47:27	6	*
NAME	47:29	47:29	4	buf
LEAF_NODE	47:29	47:29	5	buf
LEAF_NODE	47:32	47:32	3	,
PARAMETER_DECL	47:34	47:43	3	tmsize_t occ
TYPE	47:34	47:34	4	tmsize_t
TYPE_NAME	47:34	47:34	5	tmsize_t
LEAF_NODE	47:34	47:34	6	tmsize_t
NAME	47:43	47:43	4	occ
LEAF_NODE	47:43	47:43	5	occ
LEAF_NODE	47:46	47:46	3	,
PARAMETER_DECL	47:48	47:55	3	uint16 s
TYPE	47:48	47:48	4	uint16
TYPE_NAME	47:48	47:48	5	uint16
LEAF_NODE	47:48	47:48	6	uint16
NAME	47:55	47:55	4	s
LEAF_NODE	47:55	47:55	5	s
LEAF_NODE	47:56	47:56	3	)
LEAF_NODE	48:0	48:0	2	{
STATEMENTS	49:1	149:1	2	
LEAF_NODE	49:1	49:1	3	static
SIMPLE_DECL	49:8	49:42	3	const char [ ] module ; module = "NeXTDecode" ;
VAR_DECL	49:8	49:19	4	const char [ ] module ; module = "NeXTDecode"
TYPE	49:8	49:25	5	const char [ ]
TYPE_NAME	49:8	49:14	6	const char
LEAF_NODE	49:8	49:8	7	const
LEAF_NODE	49:14	49:14	7	char
TYPE_SUFFIX	49:25	49:26	6	[ ]
LEAF_NODE	49:25	49:25	7	[
LEAF_NODE	49:26	49:26	7	]
NAME	49:19	49:19	5	module
LEAF_NODE	49:19	49:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	49:19	49:19	5	module = "NeXTDecode"
ASSIGN	49:19	49:30	6	module = "NeXTDecode"
LVAL	49:19	49:19	7	module
NAME	49:19	49:19	8	module
LEAF_NODE	49:19	49:19	9	module
ASSIGN_OP	49:28	49:28	7	=
LEAF_NODE	49:28	49:28	8	=
RVAL	49:30	49:30	7	"NeXTDecode"
FIELD	49:30	49:30	8	"NeXTDecode"
LEAF_NODE	49:30	49:30	9	"NeXTDecode"
LEAF_NODE	49:42	49:42	4	;
SIMPLE_DECL	50:1	50:23	3	unsigned char * bp , unsigned char * op ;
INIT_DECL_LIST	50:1	50:1	4	unsigned char * bp , unsigned char * op
VAR_DECL	50:1	50:16	5	unsigned char * bp
TYPE	50:1	50:15	6	unsigned char *
TYPE_NAME	50:1	50:10	7	unsigned char
LEAF_NODE	50:1	50:1	8	unsigned
LEAF_NODE	50:10	50:10	8	char
POINTER	50:15	50:15	7	*
LEAF_NODE	50:15	50:15	8	*
NAME	50:16	50:16	6	bp
LEAF_NODE	50:16	50:16	7	bp
LEAF_NODE	50:18	50:18	5	,
VAR_DECL	50:1	50:21	5	unsigned char * op
TYPE	50:1	50:20	6	unsigned char *
TYPE_NAME	50:1	50:10	7	unsigned char
LEAF_NODE	50:1	50:1	8	unsigned
LEAF_NODE	50:10	50:10	8	char
POINTER	50:20	50:20	7	*
LEAF_NODE	50:20	50:20	8	*
NAME	50:21	50:21	6	op
LEAF_NODE	50:21	50:21	7	op
LEAF_NODE	50:23	50:23	4	;
SIMPLE_DECL	51:1	51:12	3	tmsize_t cc ;
VAR_DECL	51:1	51:10	4	tmsize_t cc
TYPE	51:1	51:1	5	tmsize_t
TYPE_NAME	51:1	51:1	6	tmsize_t
LEAF_NODE	51:1	51:1	7	tmsize_t
NAME	51:10	51:10	5	cc
LEAF_NODE	51:10	51:10	6	cc
LEAF_NODE	51:12	51:12	4	;
SIMPLE_DECL	52:1	52:11	3	uint8 * row ;
VAR_DECL	52:1	52:8	4	uint8 * row
TYPE	52:1	52:6	5	uint8 *
TYPE_NAME	52:1	52:1	6	uint8
LEAF_NODE	52:1	52:1	7	uint8
POINTER	52:6	52:6	6	*
LEAF_NODE	52:6	52:6	7	*
NAME	52:8	52:8	5	row
LEAF_NODE	52:8	52:8	6	row
LEAF_NODE	52:11	52:11	4	;
SIMPLE_DECL	53:1	53:21	3	tmsize_t scanline , tmsize_t n ;
INIT_DECL_LIST	53:1	53:1	4	tmsize_t scanline , tmsize_t n
VAR_DECL	53:1	53:10	5	tmsize_t scanline
TYPE	53:1	53:1	6	tmsize_t
TYPE_NAME	53:1	53:1	7	tmsize_t
LEAF_NODE	53:1	53:1	8	tmsize_t
NAME	53:10	53:10	6	scanline
LEAF_NODE	53:10	53:10	7	scanline
LEAF_NODE	53:18	53:18	5	,
VAR_DECL	53:1	53:20	5	tmsize_t n
TYPE	53:1	53:1	6	tmsize_t
TYPE_NAME	53:1	53:1	7	tmsize_t
LEAF_NODE	53:1	53:1	8	tmsize_t
NAME	53:20	53:20	6	n
LEAF_NODE	53:20	53:20	7	n
LEAF_NODE	53:21	53:21	4	;
EXPR_STATEMENT	55:1	55:9	3	( void ) s ;
EXPR	55:1	55:8	4	( void ) s
LEAF_NODE	55:1	55:1	5	(
TYPE_NAME	55:2	55:2	5	void
LEAF_NODE	55:2	55:2	6	void
LEAF_NODE	55:6	55:6	5	)
FIELD	55:8	55:8	5	s
LEAF_NODE	55:8	55:8	6	s
LEAF_NODE	55:9	55:9	4	;
ITERATION	61:1	62:2	3	
KEYWORD	61:1	61:1	4	for
LEAF_NODE	61:1	61:1	5	for
LEAF_NODE	61:5	61:5	4	(
FOR_INIT	61:6	61:41	4	op = ( unsigned char * ) buf , cc = occ ;
EXPR	61:6	61:33	5	op = ( unsigned char * ) buf , cc = occ
ASSIGN	61:6	61:11	6	op = ( unsigned char * ) buf
LVAL	61:6	61:6	7	op
FIELD	61:6	61:6	8	op
LEAF_NODE	61:6	61:6	9	op
ASSIGN_OP	61:9	61:9	7	=
LEAF_NODE	61:9	61:9	8	=
RVAL	61:11	61:28	7	( unsigned char * ) buf
LEAF_NODE	61:11	61:11	8	(
TYPE_NAME	61:12	61:21	8	unsigned char
LEAF_NODE	61:12	61:12	9	unsigned
LEAF_NODE	61:21	61:21	9	char
LEAF_NODE	61:25	61:25	8	*
LEAF_NODE	61:26	61:26	8	)
FIELD	61:28	61:28	8	buf
LEAF_NODE	61:28	61:28	9	buf
LEAF_NODE	61:31	61:31	6	,
ASSIGN	61:33	61:38	6	cc = occ
LVAL	61:33	61:33	7	cc
FIELD	61:33	61:33	8	cc
LEAF_NODE	61:33	61:33	9	cc
ASSIGN_OP	61:36	61:36	7	=
LEAF_NODE	61:36	61:36	8	=
RVAL	61:38	61:38	7	occ
FIELD	61:38	61:38	8	occ
LEAF_NODE	61:38	61:38	9	occ
LEAF_NODE	61:41	61:41	5	;
CONDITION	61:43	61:43	4	cc -- > 0
EXPR	61:43	61:50	5	cc -- > 0
FIELD	61:43	61:45	6	cc --
LEAF_NODE	61:43	61:43	7	cc
LEAF_NODE	61:45	61:45	7	--
REL_OPERATOR	61:48	61:48	6	>
LEAF_NODE	61:48	61:48	7	>
FIELD	61:50	61:50	6	0
LEAF_NODE	61:50	61:50	7	0
LEAF_NODE	61:51	61:51	4	;
LEAF_NODE	0:0	0:0	4	FOR_EXPR
LEAF_NODE	61:52	61:52	4	)
STATEMENTS	62:2	62:2	4	
EXPR_STATEMENT	62:2	62:14	5	* op ++ = 0xff ;
EXPR	62:2	62:2	6	* op ++ = 0xff
ASSIGN	62:2	62:10	7	* op ++ = 0xff
LVAL	62:2	62:2	8	* op ++
UNARY_EXPR	62:2	62:3	9	* op ++
UNARY_OPERATOR	62:2	62:2	10	*
LEAF_NODE	62:2	62:2	11	*
FIELD	62:3	62:5	10	op ++
LEAF_NODE	62:3	62:3	11	op
LEAF_NODE	62:5	62:5	11	++
ASSIGN_OP	62:8	62:8	8	=
LEAF_NODE	62:8	62:8	9	=
RVAL	62:10	62:10	8	0xff
FIELD	62:10	62:10	9	0xff
LEAF_NODE	62:10	62:10	10	0xff
LEAF_NODE	62:14	62:14	6	;
EXPR_STATEMENT	64:1	64:37	3	bp = ( unsigned char * ) tif -> tif_rawcp ;
EXPR	64:1	64:1	4	bp = ( unsigned char * ) tif -> tif_rawcp
ASSIGN	64:1	64:6	5	bp = ( unsigned char * ) tif -> tif_rawcp
LVAL	64:1	64:1	6	bp
FIELD	64:1	64:1	7	bp
LEAF_NODE	64:1	64:1	8	bp
ASSIGN_OP	64:4	64:4	6	=
LEAF_NODE	64:4	64:4	7	=
RVAL	64:6	64:23	6	( unsigned char * ) tif -> tif_rawcp
LEAF_NODE	64:6	64:6	7	(
TYPE_NAME	64:7	64:16	7	unsigned char
LEAF_NODE	64:7	64:7	8	unsigned
LEAF_NODE	64:16	64:16	8	char
LEAF_NODE	64:21	64:21	7	*
LEAF_NODE	64:22	64:22	7	)
FIELD	64:23	64:28	7	tif -> tif_rawcp
LEAF_NODE	64:23	64:23	8	tif
LEAF_NODE	64:26	64:26	8	->
LEAF_NODE	64:28	64:28	8	tif_rawcp
LEAF_NODE	64:37	64:37	4	;
EXPR_STATEMENT	65:1	65:20	3	cc = tif -> tif_rawcc ;
EXPR	65:1	65:1	4	cc = tif -> tif_rawcc
ASSIGN	65:1	65:6	5	cc = tif -> tif_rawcc
LVAL	65:1	65:1	6	cc
FIELD	65:1	65:1	7	cc
LEAF_NODE	65:1	65:1	8	cc
ASSIGN_OP	65:4	65:4	6	=
LEAF_NODE	65:4	65:4	7	=
RVAL	65:6	65:6	6	tif -> tif_rawcc
FIELD	65:6	65:11	7	tif -> tif_rawcc
LEAF_NODE	65:6	65:6	8	tif
LEAF_NODE	65:9	65:9	8	->
LEAF_NODE	65:11	65:11	8	tif_rawcc
LEAF_NODE	65:20	65:20	4	;
EXPR_STATEMENT	66:1	66:33	3	scanline = tif -> tif_scanlinesize ;
EXPR	66:1	66:1	4	scanline = tif -> tif_scanlinesize
ASSIGN	66:1	66:12	5	scanline = tif -> tif_scanlinesize
LVAL	66:1	66:1	6	scanline
FIELD	66:1	66:1	7	scanline
LEAF_NODE	66:1	66:1	8	scanline
ASSIGN_OP	66:10	66:10	6	=
LEAF_NODE	66:10	66:10	7	=
RVAL	66:12	66:12	6	tif -> tif_scanlinesize
FIELD	66:12	66:17	7	tif -> tif_scanlinesize
LEAF_NODE	66:12	66:12	8	tif
LEAF_NODE	66:15	66:15	8	->
LEAF_NODE	66:17	66:17	8	tif_scanlinesize
LEAF_NODE	66:33	66:33	4	;
SELECTION	67:1	68:1	3	
KEYWORD	67:1	67:1	4	if
LEAF_NODE	67:1	67:1	5	if
LEAF_NODE	67:4	67:4	4	(
CONDITION	67:5	67:5	4	occ % scanline
EXPR	67:5	67:11	5	occ % scanline
FIELD	67:5	67:5	6	occ
LEAF_NODE	67:5	67:5	7	occ
LEAF_NODE	67:9	67:9	6	%
FIELD	67:11	67:11	6	scanline
LEAF_NODE	67:11	67:11	7	scanline
LEAF_NODE	67:19	67:19	4	)
STATEMENTS	68:1	71:1	4	
LEAF_NODE	68:1	68:1	5	{
STATEMENTS	69:2	70:2	5	
EXPR_STATEMENT	69:2	69:82	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" ) ;
EXPR	69:2	69:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
FUNCTION_CALL	69:2	69:81	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanlines cannot be read" )
CALLEE	69:2	69:2	9	TIFFErrorExt
LEAF_NODE	69:2	69:2	10	TIFFErrorExt
LEAF_NODE	69:14	69:14	9	(
ARGUMENT	69:15	69:15	9	tif -> tif_clientdata
FIELD	69:15	69:20	10	tif -> tif_clientdata
LEAF_NODE	69:15	69:15	11	tif
LEAF_NODE	69:18	69:18	11	->
LEAF_NODE	69:20	69:20	11	tif_clientdata
LEAF_NODE	69:34	69:34	9	,
ARGUMENT	69:36	69:36	9	module
FIELD	69:36	69:36	10	module
LEAF_NODE	69:36	69:36	11	module
LEAF_NODE	69:42	69:42	9	,
ARGUMENT	69:44	69:44	9	"Fractional scanlines cannot be read"
FIELD	69:44	69:44	10	"Fractional scanlines cannot be read"
LEAF_NODE	69:44	69:44	11	"Fractional scanlines cannot be read"
LEAF_NODE	69:81	69:81	9	)
LEAF_NODE	69:82	69:82	7	;
JUMP_STATEMENT	70:2	70:12	6	return ( 0 ) ;
KEYWORD	70:2	70:2	7	return
LEAF_NODE	70:2	70:2	8	return
DESTINATION	70:9	70:9	7	( 0 )
EXPR	70:9	70:11	8	( 0 )
LEAF_NODE	70:9	70:9	9	(
FIELD	70:10	70:10	9	0
LEAF_NODE	70:10	70:10	10	0
LEAF_NODE	70:11	70:11	9	)
LEAF_NODE	70:12	70:12	7	;
LEAF_NODE	71:1	71:1	5	}
ITERATION	72:1	72:70	3	
KEYWORD	72:1	72:1	4	for
LEAF_NODE	72:1	72:1	5	for
LEAF_NODE	72:5	72:5	4	(
FOR_INIT	72:6	72:15	4	row = buf ;
EXPR	72:6	72:6	5	row = buf
ASSIGN	72:6	72:12	6	row = buf
LVAL	72:6	72:6	7	row
FIELD	72:6	72:6	8	row
LEAF_NODE	72:6	72:6	9	row
ASSIGN_OP	72:10	72:10	7	=
LEAF_NODE	72:10	72:10	8	=
RVAL	72:12	72:12	7	buf
FIELD	72:12	72:12	8	buf
LEAF_NODE	72:12	72:12	9	buf
LEAF_NODE	72:15	72:15	5	;
CONDITION	72:17	72:17	4	cc > 0 && occ > 0
EXPR	72:17	72:17	5	cc > 0 && occ > 0
AND	72:17	72:27	6	cc > 0 && occ > 0
EXPR	72:17	72:22	7	cc > 0
FIELD	72:17	72:17	8	cc
LEAF_NODE	72:17	72:17	9	cc
REL_OPERATOR	72:20	72:20	8	>
LEAF_NODE	72:20	72:20	9	>
FIELD	72:22	72:22	8	0
LEAF_NODE	72:22	72:22	9	0
LEAF_NODE	72:24	72:24	7	&&
EXPR	72:27	72:33	7	occ > 0
FIELD	72:27	72:27	8	occ
LEAF_NODE	72:27	72:27	9	occ
REL_OPERATOR	72:31	72:31	8	>
LEAF_NODE	72:31	72:31	9	>
FIELD	72:33	72:33	8	0
LEAF_NODE	72:33	72:33	9	0
LEAF_NODE	72:34	72:34	4	;
FOR_EXPR	72:36	72:36	4	occ -= scanline , row += scanline
EXPR	72:36	72:53	5	occ -= scanline , row += scanline
ASSIGN	72:36	72:43	6	occ -= scanline
LVAL	72:36	72:36	7	occ
FIELD	72:36	72:36	8	occ
LEAF_NODE	72:36	72:36	9	occ
ASSIGN_OP	72:40	72:40	7	-=
LEAF_NODE	72:40	72:40	8	-=
RVAL	72:43	72:43	7	scanline
FIELD	72:43	72:43	8	scanline
LEAF_NODE	72:43	72:43	9	scanline
LEAF_NODE	72:51	72:51	6	,
ASSIGN	72:53	72:60	6	row += scanline
LVAL	72:53	72:53	7	row
FIELD	72:53	72:53	8	row
LEAF_NODE	72:53	72:53	9	row
ASSIGN_OP	72:57	72:57	7	+=
LEAF_NODE	72:57	72:57	8	+=
RVAL	72:60	72:60	7	scanline
FIELD	72:60	72:60	8	scanline
LEAF_NODE	72:60	72:60	9	scanline
LEAF_NODE	72:68	72:68	4	)
STATEMENTS	72:70	142:1	4	
LEAF_NODE	72:70	72:70	5	{
STATEMENTS	73:2	75:2	5	
EXPR_STATEMENT	73:2	73:11	6	n = * bp ++ ;
EXPR	73:2	73:2	7	n = * bp ++
ASSIGN	73:2	73:6	8	n = * bp ++
LVAL	73:2	73:2	9	n
FIELD	73:2	73:2	10	n
LEAF_NODE	73:2	73:2	11	n
ASSIGN_OP	73:4	73:4	9	=
LEAF_NODE	73:4	73:4	10	=
RVAL	73:6	73:6	9	* bp ++
UNARY_EXPR	73:6	73:7	10	* bp ++
UNARY_OPERATOR	73:6	73:6	11	*
LEAF_NODE	73:6	73:6	12	*
FIELD	73:7	73:9	11	bp ++
LEAF_NODE	73:7	73:7	12	bp
LEAF_NODE	73:9	73:9	12	++
LEAF_NODE	73:11	73:11	7	;
EXPR_STATEMENT	74:2	74:6	6	cc -- ;
EXPR	74:2	74:2	7	cc --
FIELD	74:2	74:4	8	cc --
LEAF_NODE	74:2	74:2	9	cc
LEAF_NODE	74:4	74:4	9	--
LEAF_NODE	74:6	74:6	7	;
SELECTION	75:2	75:13	6	
KEYWORD	75:2	75:2	7	switch
LEAF_NODE	75:2	75:2	8	switch
LEAF_NODE	75:9	75:9	7	(
CONDITION	75:10	75:10	7	n
EXPR	75:10	75:10	8	n
FIELD	75:10	75:10	9	n
LEAF_NODE	75:10	75:10	10	n
LEAF_NODE	75:11	75:11	7	)
STATEMENTS	75:13	141:2	7	
LEAF_NODE	75:13	75:13	8	{
STATEMENTS	76:2	140:2	8	
LABEL	76:2	76:17	9	case LITERALROW :
LEAF_NODE	76:2	76:2	10	case
LEAF_NODE	76:7	76:7	10	LITERALROW
LEAF_NODE	76:17	76:17	10	:
SELECTION	80:3	81:4	9	
KEYWORD	80:3	80:3	10	if
LEAF_NODE	80:3	80:3	11	if
LEAF_NODE	80:6	80:6	10	(
CONDITION	80:7	80:7	10	cc < scanline
EXPR	80:7	80:12	11	cc < scanline
FIELD	80:7	80:7	12	cc
LEAF_NODE	80:7	80:7	13	cc
REL_OPERATOR	80:10	80:10	12	<
LEAF_NODE	80:10	80:10	13	<
FIELD	80:12	80:12	12	scanline
LEAF_NODE	80:12	80:12	13	scanline
LEAF_NODE	80:20	80:20	10	)
STATEMENTS	81:4	81:4	10	
JUMP_STATEMENT	81:4	81:12	11	goto bad ;
KEYWORD	81:4	81:4	12	goto
LEAF_NODE	81:4	81:4	13	goto
DESTINATION	81:9	81:9	12	bad
LEAF_NODE	81:9	81:9	13	bad
LEAF_NODE	81:12	81:12	12	;
EXPR_STATEMENT	82:3	82:33	9	_TIFFmemcpy ( row , bp , scanline ) ;
EXPR	82:3	82:3	10	_TIFFmemcpy ( row , bp , scanline )
FUNCTION_CALL	82:3	82:32	11	_TIFFmemcpy ( row , bp , scanline )
CALLEE	82:3	82:3	12	_TIFFmemcpy
LEAF_NODE	82:3	82:3	13	_TIFFmemcpy
LEAF_NODE	82:14	82:14	12	(
ARGUMENT	82:15	82:15	12	row
FIELD	82:15	82:15	13	row
LEAF_NODE	82:15	82:15	14	row
LEAF_NODE	82:18	82:18	12	,
ARGUMENT	82:20	82:20	12	bp
FIELD	82:20	82:20	13	bp
LEAF_NODE	82:20	82:20	14	bp
LEAF_NODE	82:22	82:22	12	,
ARGUMENT	82:24	82:24	12	scanline
FIELD	82:24	82:24	13	scanline
LEAF_NODE	82:24	82:24	14	scanline
LEAF_NODE	82:32	82:32	12	)
LEAF_NODE	82:33	82:33	10	;
EXPR_STATEMENT	83:3	83:17	9	bp += scanline ;
EXPR	83:3	83:3	10	bp += scanline
ASSIGN	83:3	83:9	11	bp += scanline
LVAL	83:3	83:3	12	bp
FIELD	83:3	83:3	13	bp
LEAF_NODE	83:3	83:3	14	bp
ASSIGN_OP	83:6	83:6	12	+=
LEAF_NODE	83:6	83:6	13	+=
RVAL	83:9	83:9	12	scanline
FIELD	83:9	83:9	13	scanline
LEAF_NODE	83:9	83:9	14	scanline
LEAF_NODE	83:17	83:17	10	;
EXPR_STATEMENT	84:3	84:17	9	cc -= scanline ;
EXPR	84:3	84:3	10	cc -= scanline
ASSIGN	84:3	84:9	11	cc -= scanline
LVAL	84:3	84:3	12	cc
FIELD	84:3	84:3	13	cc
LEAF_NODE	84:3	84:3	14	cc
ASSIGN_OP	84:6	84:6	12	-=
LEAF_NODE	84:6	84:6	13	-=
RVAL	84:9	84:9	12	scanline
FIELD	84:9	84:9	13	scanline
LEAF_NODE	84:9	84:9	14	scanline
LEAF_NODE	84:17	84:17	10	;
JUMP_STATEMENT	85:3	85:8	9	break DESTINATION ;
KEYWORD	85:3	85:3	10	break
LEAF_NODE	85:3	85:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	85:8	85:8	10	;
LABEL	86:2	86:18	9	case LITERALSPAN :
LEAF_NODE	86:2	86:2	10	case
LEAF_NODE	86:7	86:7	10	LITERALSPAN
LEAF_NODE	86:18	86:18	10	:
LEAF_NODE	86:20	86:20	9	{
STATEMENTS	87:3	101:3	9	
SIMPLE_DECL	87:3	87:15	10	tmsize_t off ;
VAR_DECL	87:3	87:12	11	tmsize_t off
TYPE	87:3	87:3	12	tmsize_t
TYPE_NAME	87:3	87:3	13	tmsize_t
LEAF_NODE	87:3	87:3	14	tmsize_t
NAME	87:12	87:12	12	off
LEAF_NODE	87:12	87:12	13	off
LEAF_NODE	87:15	87:15	11	;
SELECTION	92:3	93:4	10	
KEYWORD	92:3	92:3	11	if
LEAF_NODE	92:3	92:3	12	if
LEAF_NODE	92:5	92:5	11	(
CONDITION	92:7	92:7	11	cc < 4
EXPR	92:7	92:12	12	cc < 4
FIELD	92:7	92:7	13	cc
LEAF_NODE	92:7	92:7	14	cc
REL_OPERATOR	92:10	92:10	13	<
LEAF_NODE	92:10	92:10	14	<
FIELD	92:12	92:12	13	4
LEAF_NODE	92:12	92:12	14	4
LEAF_NODE	92:14	92:14	11	)
STATEMENTS	93:4	93:4	11	
JUMP_STATEMENT	93:4	93:12	12	goto bad ;
KEYWORD	93:4	93:4	13	goto
LEAF_NODE	93:4	93:4	14	goto
DESTINATION	93:9	93:9	13	bad
LEAF_NODE	93:9	93:9	14	bad
LEAF_NODE	93:12	93:12	13	;
EXPR_STATEMENT	94:3	94:30	10	off = ( bp [ 0 ] * 256 ) + bp [ 1 ] ;
EXPR	94:3	94:3	11	off = ( bp [ 0 ] * 256 ) + bp [ 1 ]
ASSIGN	94:3	94:9	12	off = ( bp [ 0 ] * 256 ) + bp [ 1 ]
LVAL	94:3	94:3	13	off
FIELD	94:3	94:3	14	off
LEAF_NODE	94:3	94:3	15	off
ASSIGN_OP	94:7	94:7	13	=
LEAF_NODE	94:7	94:7	14	=
RVAL	94:9	94:25	13	( bp [ 0 ] * 256 ) + bp [ 1 ]
LEAF_NODE	94:9	94:9	14	(
FIELD	94:10	94:14	14	bp [ 0 ]
LEAF_NODE	94:10	94:10	15	bp
LEAF_NODE	94:12	94:12	15	[
EXPR	94:13	94:13	15	0
FIELD	94:13	94:13	16	0
LEAF_NODE	94:13	94:13	17	0
LEAF_NODE	94:14	94:14	15	]
LEAF_NODE	94:16	94:16	14	*
FIELD	94:18	94:18	14	256
LEAF_NODE	94:18	94:18	15	256
LEAF_NODE	94:21	94:21	14	)
LEAF_NODE	94:23	94:23	14	+
FIELD	94:25	94:29	14	bp [ 1 ]
LEAF_NODE	94:25	94:25	15	bp
LEAF_NODE	94:27	94:27	15	[
EXPR	94:28	94:28	15	1
FIELD	94:28	94:28	16	1
LEAF_NODE	94:28	94:28	17	1
LEAF_NODE	94:29	94:29	15	]
LEAF_NODE	94:30	94:30	11	;
EXPR_STATEMENT	95:3	95:28	10	n = ( bp [ 2 ] * 256 ) + bp [ 3 ] ;
EXPR	95:3	95:3	11	n = ( bp [ 2 ] * 256 ) + bp [ 3 ]
ASSIGN	95:3	95:7	12	n = ( bp [ 2 ] * 256 ) + bp [ 3 ]
LVAL	95:3	95:3	13	n
FIELD	95:3	95:3	14	n
LEAF_NODE	95:3	95:3	15	n
ASSIGN_OP	95:5	95:5	13	=
LEAF_NODE	95:5	95:5	14	=
RVAL	95:7	95:23	13	( bp [ 2 ] * 256 ) + bp [ 3 ]
LEAF_NODE	95:7	95:7	14	(
FIELD	95:8	95:12	14	bp [ 2 ]
LEAF_NODE	95:8	95:8	15	bp
LEAF_NODE	95:10	95:10	15	[
EXPR	95:11	95:11	15	2
FIELD	95:11	95:11	16	2
LEAF_NODE	95:11	95:11	17	2
LEAF_NODE	95:12	95:12	15	]
LEAF_NODE	95:14	95:14	14	*
FIELD	95:16	95:16	14	256
LEAF_NODE	95:16	95:16	15	256
LEAF_NODE	95:19	95:19	14	)
LEAF_NODE	95:21	95:21	14	+
FIELD	95:23	95:27	14	bp [ 3 ]
LEAF_NODE	95:23	95:23	15	bp
LEAF_NODE	95:25	95:25	15	[
EXPR	95:26	95:26	15	3
FIELD	95:26	95:26	16	3
LEAF_NODE	95:26	95:26	17	3
LEAF_NODE	95:27	95:27	15	]
LEAF_NODE	95:28	95:28	11	;
SELECTION	96:3	97:4	10	
KEYWORD	96:3	96:3	11	if
LEAF_NODE	96:3	96:3	12	if
LEAF_NODE	96:6	96:6	11	(
CONDITION	96:7	96:7	11	cc < 4 + n || off + n > scanline
EXPR	96:7	96:7	12	cc < 4 + n || off + n > scanline
OR	96:7	96:19	13	cc < 4 + n || off + n > scanline
EXPR	96:7	96:14	14	cc < 4 + n
FIELD	96:7	96:7	15	cc
LEAF_NODE	96:7	96:7	16	cc
REL_OPERATOR	96:10	96:10	15	<
LEAF_NODE	96:10	96:10	16	<
FIELD	96:12	96:12	15	4
LEAF_NODE	96:12	96:12	16	4
LEAF_NODE	96:13	96:13	15	+
FIELD	96:14	96:14	15	n
LEAF_NODE	96:14	96:14	16	n
LEAF_NODE	96:16	96:16	14	||
EXPR	96:19	96:27	14	off + n > scanline
FIELD	96:19	96:19	15	off
LEAF_NODE	96:19	96:19	16	off
LEAF_NODE	96:22	96:22	15	+
FIELD	96:23	96:23	15	n
LEAF_NODE	96:23	96:23	16	n
REL_OPERATOR	96:25	96:25	15	>
LEAF_NODE	96:25	96:25	16	>
FIELD	96:27	96:27	15	scanline
LEAF_NODE	96:27	96:27	16	scanline
LEAF_NODE	96:35	96:35	11	)
STATEMENTS	97:4	97:4	11	
JUMP_STATEMENT	97:4	97:12	12	goto bad ;
KEYWORD	97:4	97:4	13	goto
LEAF_NODE	97:4	97:4	14	goto
DESTINATION	97:9	97:9	13	bad
LEAF_NODE	97:9	97:9	14	bad
LEAF_NODE	97:12	97:12	13	;
EXPR_STATEMENT	98:3	98:32	10	_TIFFmemcpy ( row + off , bp + 4 , n ) ;
EXPR	98:3	98:3	11	_TIFFmemcpy ( row + off , bp + 4 , n )
FUNCTION_CALL	98:3	98:31	12	_TIFFmemcpy ( row + off , bp + 4 , n )
CALLEE	98:3	98:3	13	_TIFFmemcpy
LEAF_NODE	98:3	98:3	14	_TIFFmemcpy
LEAF_NODE	98:14	98:14	13	(
ARGUMENT	98:15	98:19	13	row + off
FIELD	98:15	98:15	14	row
LEAF_NODE	98:15	98:15	15	row
LEAF_NODE	98:18	98:18	14	+
FIELD	98:19	98:19	14	off
LEAF_NODE	98:19	98:19	15	off
LEAF_NODE	98:22	98:22	13	,
ARGUMENT	98:24	98:27	13	bp + 4
FIELD	98:24	98:24	14	bp
LEAF_NODE	98:24	98:24	15	bp
LEAF_NODE	98:26	98:26	14	+
FIELD	98:27	98:27	14	4
LEAF_NODE	98:27	98:27	15	4
LEAF_NODE	98:28	98:28	13	,
ARGUMENT	98:30	98:30	13	n
FIELD	98:30	98:30	14	n
LEAF_NODE	98:30	98:30	15	n
LEAF_NODE	98:31	98:31	13	)
LEAF_NODE	98:32	98:32	11	;
EXPR_STATEMENT	99:3	99:12	10	bp += 4 + n ;
EXPR	99:3	99:3	11	bp += 4 + n
ASSIGN	99:3	99:9	12	bp += 4 + n
LVAL	99:3	99:3	13	bp
FIELD	99:3	99:3	14	bp
LEAF_NODE	99:3	99:3	15	bp
ASSIGN_OP	99:6	99:6	13	+=
LEAF_NODE	99:6	99:6	14	+=
RVAL	99:9	99:11	13	4 + n
FIELD	99:9	99:9	14	4
LEAF_NODE	99:9	99:9	15	4
LEAF_NODE	99:10	99:10	14	+
FIELD	99:11	99:11	14	n
LEAF_NODE	99:11	99:11	15	n
LEAF_NODE	99:12	99:12	11	;
EXPR_STATEMENT	100:3	100:12	10	cc -= 4 + n ;
EXPR	100:3	100:3	11	cc -= 4 + n
ASSIGN	100:3	100:9	12	cc -= 4 + n
LVAL	100:3	100:3	13	cc
FIELD	100:3	100:3	14	cc
LEAF_NODE	100:3	100:3	15	cc
ASSIGN_OP	100:6	100:6	13	-=
LEAF_NODE	100:6	100:6	14	-=
RVAL	100:9	100:11	13	4 + n
FIELD	100:9	100:9	14	4
LEAF_NODE	100:9	100:9	15	4
LEAF_NODE	100:10	100:10	14	+
FIELD	100:11	100:11	14	n
LEAF_NODE	100:11	100:11	15	n
LEAF_NODE	100:12	100:12	11	;
JUMP_STATEMENT	101:3	101:8	10	break DESTINATION ;
KEYWORD	101:3	101:3	11	break
LEAF_NODE	101:3	101:3	12	break
LEAF_NODE	0:0	0:0	11	DESTINATION
LEAF_NODE	101:8	101:8	11	;
LEAF_NODE	102:2	102:2	9	}
LABEL	103:2	103:9	9	default :
LEAF_NODE	103:2	103:2	10	default
LEAF_NODE	103:9	103:9	10	:
LEAF_NODE	103:11	103:11	9	{
STATEMENTS	104:3	139:3	9	
SIMPLE_DECL	104:3	104:27	10	uint32 npixels ; npixels = 0 , uint32 grey ;
INIT_DECL_LIST	104:3	104:3	11	uint32 npixels ; npixels = 0 , uint32 grey
VAR_DECL	104:3	104:10	12	uint32 npixels ; npixels = 0
TYPE	104:3	104:3	13	uint32
TYPE_NAME	104:3	104:3	14	uint32
LEAF_NODE	104:3	104:3	15	uint32
NAME	104:10	104:10	13	npixels
LEAF_NODE	104:10	104:10	14	npixels
LEAF_NODE	0:0	0:0	13	;
INIT	104:10	104:10	13	npixels = 0
ASSIGN	104:10	104:20	14	npixels = 0
LVAL	104:10	104:10	15	npixels
NAME	104:10	104:10	16	npixels
LEAF_NODE	104:10	104:10	17	npixels
ASSIGN_OP	104:18	104:18	15	=
LEAF_NODE	104:18	104:18	16	=
RVAL	104:20	104:20	15	0
FIELD	104:20	104:20	16	0
LEAF_NODE	104:20	104:20	17	0
LEAF_NODE	104:21	104:21	12	,
VAR_DECL	104:3	104:23	12	uint32 grey
TYPE	104:3	104:3	13	uint32
TYPE_NAME	104:3	104:3	14	uint32
LEAF_NODE	104:3	104:3	15	uint32
NAME	104:23	104:23	13	grey
LEAF_NODE	104:23	104:23	14	grey
LEAF_NODE	104:27	104:27	11	;
SIMPLE_DECL	105:3	105:25	10	tmsize_t op_offset ; op_offset = 0 ;
VAR_DECL	105:3	105:12	11	tmsize_t op_offset ; op_offset = 0
TYPE	105:3	105:3	12	tmsize_t
TYPE_NAME	105:3	105:3	13	tmsize_t
LEAF_NODE	105:3	105:3	14	tmsize_t
NAME	105:12	105:12	12	op_offset
LEAF_NODE	105:12	105:12	13	op_offset
LEAF_NODE	0:0	0:0	12	;
INIT	105:12	105:12	12	op_offset = 0
ASSIGN	105:12	105:24	13	op_offset = 0
LVAL	105:12	105:12	14	op_offset
NAME	105:12	105:12	15	op_offset
LEAF_NODE	105:12	105:12	16	op_offset
ASSIGN_OP	105:22	105:22	14	=
LEAF_NODE	105:22	105:22	15	=
RVAL	105:24	105:24	14	0
FIELD	105:24	105:24	15	0
LEAF_NODE	105:24	105:24	16	0
LEAF_NODE	105:25	105:25	11	;
SIMPLE_DECL	106:3	106:49	10	uint32 imagewidth ; imagewidth = tif -> tif_dir . td_imagewidth ;
VAR_DECL	106:3	106:10	11	uint32 imagewidth ; imagewidth = tif -> tif_dir . td_imagewidth
TYPE	106:3	106:3	12	uint32
TYPE_NAME	106:3	106:3	13	uint32
LEAF_NODE	106:3	106:3	14	uint32
NAME	106:10	106:10	12	imagewidth
LEAF_NODE	106:10	106:10	13	imagewidth
LEAF_NODE	0:0	0:0	12	;
INIT	106:10	106:10	12	imagewidth = tif -> tif_dir . td_imagewidth
ASSIGN	106:10	106:23	13	imagewidth = tif -> tif_dir . td_imagewidth
LVAL	106:10	106:10	14	imagewidth
NAME	106:10	106:10	15	imagewidth
LEAF_NODE	106:10	106:10	16	imagewidth
ASSIGN_OP	106:21	106:21	14	=
LEAF_NODE	106:21	106:21	15	=
RVAL	106:23	106:23	14	tif -> tif_dir . td_imagewidth
FIELD	106:23	106:36	15	tif -> tif_dir . td_imagewidth
LEAF_NODE	106:23	106:23	16	tif
LEAF_NODE	106:26	106:26	16	->
LEAF_NODE	106:28	106:28	16	tif_dir
LEAF_NODE	106:35	106:35	16	.
LEAF_NODE	106:36	106:36	16	td_imagewidth
LEAF_NODE	106:49	106:49	11	;
SELECTION	107:12	108:16	10	
KEYWORD	107:12	107:12	11	if
LEAF_NODE	107:12	107:12	12	if
LEAF_NODE	107:14	107:14	11	(
CONDITION	107:16	107:16	11	isTiled ( tif )
EXPR	107:16	107:16	12	isTiled ( tif )
FUNCTION_CALL	107:16	107:27	13	isTiled ( tif )
CALLEE	107:16	107:16	14	isTiled
LEAF_NODE	107:16	107:16	15	isTiled
LEAF_NODE	107:23	107:23	14	(
ARGUMENT	107:24	107:24	14	tif
FIELD	107:24	107:24	15	tif
LEAF_NODE	107:24	107:24	16	tif
LEAF_NODE	107:27	107:27	14	)
LEAF_NODE	107:29	107:29	11	)
STATEMENTS	108:16	108:16	11	
EXPR_STATEMENT	108:16	108:54	12	imagewidth = tif -> tif_dir . td_tilewidth ;
EXPR	108:16	108:16	13	imagewidth = tif -> tif_dir . td_tilewidth
ASSIGN	108:16	108:29	14	imagewidth = tif -> tif_dir . td_tilewidth
LVAL	108:16	108:16	15	imagewidth
FIELD	108:16	108:16	16	imagewidth
LEAF_NODE	108:16	108:16	17	imagewidth
ASSIGN_OP	108:27	108:27	15	=
LEAF_NODE	108:27	108:27	16	=
RVAL	108:29	108:29	15	tif -> tif_dir . td_tilewidth
FIELD	108:29	108:42	16	tif -> tif_dir . td_tilewidth
LEAF_NODE	108:29	108:29	17	tif
LEAF_NODE	108:32	108:32	17	->
LEAF_NODE	108:34	108:34	17	tif_dir
LEAF_NODE	108:41	108:41	17	.
LEAF_NODE	108:42	108:42	17	td_tilewidth
LEAF_NODE	108:54	108:54	13	;
EXPR_STATEMENT	116:3	116:11	10	op = row ;
EXPR	116:3	116:3	11	op = row
ASSIGN	116:3	116:8	12	op = row
LVAL	116:3	116:3	13	op
FIELD	116:3	116:3	14	op
LEAF_NODE	116:3	116:3	15	op
ASSIGN_OP	116:6	116:6	13	=
LEAF_NODE	116:6	116:6	14	=
RVAL	116:8	116:8	13	row
FIELD	116:8	116:8	14	row
LEAF_NODE	116:8	116:8	15	row
LEAF_NODE	116:11	116:11	11	;
ITERATION	117:3	117:12	10	
KEYWORD	117:3	117:3	11	for
LEAF_NODE	117:3	117:3	12	for
LEAF_NODE	117:7	117:7	11	(
FOR_INIT	117:8	117:8	11	;
LEAF_NODE	117:8	117:8	12	;
LEAF_NODE	0:0	0:0	11	CONDITION
LEAF_NODE	117:9	117:9	11	;
LEAF_NODE	0:0	0:0	11	FOR_EXPR
LEAF_NODE	117:10	117:10	11	)
STATEMENTS	117:12	138:3	11	
LEAF_NODE	117:12	117:12	12	{
STATEMENTS	118:4	137:4	12	
EXPR_STATEMENT	118:4	118:33	13	grey = ( uint32 ) ( ( n >> 6 ) & 0x3 ) ;
EXPR	118:4	118:4	14	grey = ( uint32 ) ( ( n >> 6 ) & 0x3 )
ASSIGN	118:4	118:11	15	grey = ( uint32 ) ( ( n >> 6 ) & 0x3 )
LVAL	118:4	118:4	16	grey
FIELD	118:4	118:4	17	grey
LEAF_NODE	118:4	118:4	18	grey
ASSIGN_OP	118:9	118:9	16	=
LEAF_NODE	118:9	118:9	17	=
RVAL	118:11	118:32	16	( uint32 ) ( ( n >> 6 ) & 0x3 )
LEAF_NODE	118:11	118:11	17	(
TYPE_NAME	118:12	118:12	17	uint32
LEAF_NODE	118:12	118:12	18	uint32
LEAF_NODE	118:18	118:18	17	)
LEAF_NODE	118:19	118:19	17	(
LEAF_NODE	118:20	118:20	17	(
FIELD	118:21	118:21	17	n
LEAF_NODE	118:21	118:21	18	n
LEAF_NODE	118:22	118:22	17	>>
FIELD	118:24	118:24	17	6
LEAF_NODE	118:24	118:24	18	6
LEAF_NODE	118:25	118:25	17	)
LEAF_NODE	118:27	118:27	17	&
FIELD	118:29	118:29	17	0x3
LEAF_NODE	118:29	118:29	18	0x3
LEAF_NODE	118:32	118:32	17	)
LEAF_NODE	118:33	118:33	14	;
EXPR_STATEMENT	119:4	119:13	13	n &= 0x3f ;
EXPR	119:4	119:4	14	n &= 0x3f
ASSIGN	119:4	119:9	15	n &= 0x3f
LVAL	119:4	119:4	16	n
FIELD	119:4	119:4	17	n
LEAF_NODE	119:4	119:4	18	n
ASSIGN_OP	119:6	119:6	16	&=
LEAF_NODE	119:6	119:6	17	&=
RVAL	119:9	119:9	16	0x3f
FIELD	119:9	119:9	17	0x3f
LEAF_NODE	119:9	119:9	18	0x3f
LEAF_NODE	119:13	119:13	14	;
ITERATION	125:4	126:5	13	
KEYWORD	125:4	125:4	14	while
LEAF_NODE	125:4	125:4	15	while
LEAF_NODE	125:10	125:10	14	(
CONDITION	125:11	125:11	14	n -- > 0 && npixels < imagewidth && op_offset < scanline
EXPR	125:11	125:11	15	n -- > 0 && npixels < imagewidth && op_offset < scanline
AND	125:11	125:22	16	n -- > 0 && npixels < imagewidth && op_offset < scanline
EXPR	125:11	125:17	17	n -- > 0
FIELD	125:11	125:12	18	n --
LEAF_NODE	125:11	125:11	19	n
LEAF_NODE	125:12	125:12	19	--
REL_OPERATOR	125:15	125:15	18	>
LEAF_NODE	125:15	125:15	19	>
FIELD	125:17	125:17	18	0
LEAF_NODE	125:17	125:17	19	0
LEAF_NODE	125:19	125:19	17	&&
EXPR	125:22	125:22	17	npixels < imagewidth && op_offset < scanline
AND	125:22	125:46	18	npixels < imagewidth && op_offset < scanline
EXPR	125:22	125:32	19	npixels < imagewidth
FIELD	125:22	125:22	20	npixels
LEAF_NODE	125:22	125:22	21	npixels
REL_OPERATOR	125:30	125:30	20	<
LEAF_NODE	125:30	125:30	21	<
FIELD	125:32	125:32	20	imagewidth
LEAF_NODE	125:32	125:32	21	imagewidth
LEAF_NODE	125:43	125:43	19	&&
EXPR	125:46	125:58	19	op_offset < scanline
FIELD	125:46	125:46	20	op_offset
LEAF_NODE	125:46	125:46	21	op_offset
REL_OPERATOR	125:56	125:56	20	<
LEAF_NODE	125:56	125:56	21	<
FIELD	125:58	125:58	20	scanline
LEAF_NODE	125:58	125:58	21	scanline
LEAF_NODE	125:66	125:66	14	)
STATEMENTS	126:5	126:5	14	
EXPR_STATEMENT	126:5	126:23	15	SETPIXEL ( op , grey ) ;
EXPR	126:5	126:5	16	SETPIXEL ( op , grey )
FUNCTION_CALL	126:5	126:22	17	SETPIXEL ( op , grey )
CALLEE	126:5	126:5	18	SETPIXEL
LEAF_NODE	126:5	126:5	19	SETPIXEL
LEAF_NODE	126:13	126:13	18	(
ARGUMENT	126:14	126:14	18	op
FIELD	126:14	126:14	19	op
LEAF_NODE	126:14	126:14	20	op
LEAF_NODE	126:16	126:16	18	,
ARGUMENT	126:18	126:18	18	grey
FIELD	126:18	126:18	19	grey
LEAF_NODE	126:18	126:18	20	grey
LEAF_NODE	126:22	126:22	18	)
LEAF_NODE	126:23	126:23	16	;
SELECTION	127:4	128:5	13	
KEYWORD	127:4	127:4	14	if
LEAF_NODE	127:4	127:4	15	if
LEAF_NODE	127:7	127:7	14	(
CONDITION	127:8	127:8	14	npixels >= imagewidth
EXPR	127:8	127:19	15	npixels >= imagewidth
FIELD	127:8	127:8	16	npixels
LEAF_NODE	127:8	127:8	17	npixels
REL_OPERATOR	127:16	127:16	16	>=
LEAF_NODE	127:16	127:16	17	>=
FIELD	127:19	127:19	16	imagewidth
LEAF_NODE	127:19	127:19	17	imagewidth
LEAF_NODE	127:29	127:29	14	)
STATEMENTS	128:5	128:5	14	
JUMP_STATEMENT	128:5	128:10	15	break DESTINATION ;
KEYWORD	128:5	128:5	16	break
LEAF_NODE	128:5	128:5	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	128:10	128:10	16	;
SELECTION	129:16	129:44	13	
KEYWORD	129:16	129:16	14	if
LEAF_NODE	129:16	129:16	15	if
LEAF_NODE	129:19	129:19	14	(
CONDITION	129:20	129:20	14	op_offset >= scanline
EXPR	129:20	129:33	15	op_offset >= scanline
FIELD	129:20	129:20	16	op_offset
LEAF_NODE	129:20	129:20	17	op_offset
REL_OPERATOR	129:30	129:30	16	>=
LEAF_NODE	129:30	129:30	17	>=
FIELD	129:33	129:33	16	scanline
LEAF_NODE	129:33	129:33	17	scanline
LEAF_NODE	129:42	129:42	14	)
STATEMENTS	129:44	133:16	14	
LEAF_NODE	129:44	129:44	15	{
STATEMENTS	130:20	132:20	15	
EXPR_STATEMENT	130:20	131:44	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid data for scanline %ld" , ( long ) tif -> tif_row ) ;
EXPR	130:20	130:20	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid data for scanline %ld" , ( long ) tif -> tif_row )
FUNCTION_CALL	130:20	131:43	18	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid data for scanline %ld" , ( long ) tif -> tif_row )
CALLEE	130:20	130:20	19	TIFFErrorExt
LEAF_NODE	130:20	130:20	20	TIFFErrorExt
LEAF_NODE	130:32	130:32	19	(
ARGUMENT	130:33	130:33	19	tif -> tif_clientdata
FIELD	130:33	130:38	20	tif -> tif_clientdata
LEAF_NODE	130:33	130:33	21	tif
LEAF_NODE	130:36	130:36	21	->
LEAF_NODE	130:38	130:38	21	tif_clientdata
LEAF_NODE	130:52	130:52	19	,
ARGUMENT	130:54	130:54	19	module
FIELD	130:54	130:54	20	module
LEAF_NODE	130:54	130:54	21	module
LEAF_NODE	130:60	130:60	19	,
ARGUMENT	130:62	130:62	19	"Invalid data for scanline %ld"
FIELD	130:62	130:62	20	"Invalid data for scanline %ld"
LEAF_NODE	130:62	130:62	21	"Invalid data for scanline %ld"
LEAF_NODE	130:93	130:93	19	,
ARGUMENT	131:24	131:31	19	( long ) tif -> tif_row
LEAF_NODE	131:24	131:24	20	(
TYPE_NAME	131:25	131:25	20	long
LEAF_NODE	131:25	131:25	21	long
LEAF_NODE	131:29	131:29	20	)
FIELD	131:31	131:36	20	tif -> tif_row
LEAF_NODE	131:31	131:31	21	tif
LEAF_NODE	131:34	131:34	21	->
LEAF_NODE	131:36	131:36	21	tif_row
LEAF_NODE	131:43	131:43	19	)
LEAF_NODE	131:44	131:44	17	;
JUMP_STATEMENT	132:20	132:30	16	return ( 0 ) ;
KEYWORD	132:20	132:20	17	return
LEAF_NODE	132:20	132:20	18	return
DESTINATION	132:27	132:27	17	( 0 )
EXPR	132:27	132:29	18	( 0 )
LEAF_NODE	132:27	132:27	19	(
FIELD	132:28	132:28	19	0
LEAF_NODE	132:28	132:28	20	0
LEAF_NODE	132:29	132:29	19	)
LEAF_NODE	132:30	132:30	17	;
LEAF_NODE	133:16	133:16	15	}
SELECTION	134:4	135:5	13	
KEYWORD	134:4	134:4	14	if
LEAF_NODE	134:4	134:4	15	if
LEAF_NODE	134:7	134:7	14	(
CONDITION	134:8	134:8	14	cc == 0
EXPR	134:8	134:14	15	cc == 0
FIELD	134:8	134:8	16	cc
LEAF_NODE	134:8	134:8	17	cc
EQ_OPERATOR	134:11	134:11	16	==
LEAF_NODE	134:11	134:11	17	==
FIELD	134:14	134:14	16	0
LEAF_NODE	134:14	134:14	17	0
LEAF_NODE	134:15	134:15	14	)
STATEMENTS	135:5	135:5	14	
JUMP_STATEMENT	135:5	135:13	15	goto bad ;
KEYWORD	135:5	135:5	16	goto
LEAF_NODE	135:5	135:5	17	goto
DESTINATION	135:10	135:10	16	bad
LEAF_NODE	135:10	135:10	17	bad
LEAF_NODE	135:13	135:13	16	;
EXPR_STATEMENT	136:4	136:13	13	n = * bp ++ ;
EXPR	136:4	136:4	14	n = * bp ++
ASSIGN	136:4	136:8	15	n = * bp ++
LVAL	136:4	136:4	16	n
FIELD	136:4	136:4	17	n
LEAF_NODE	136:4	136:4	18	n
ASSIGN_OP	136:6	136:6	16	=
LEAF_NODE	136:6	136:6	17	=
RVAL	136:8	136:8	16	* bp ++
UNARY_EXPR	136:8	136:9	17	* bp ++
UNARY_OPERATOR	136:8	136:8	18	*
LEAF_NODE	136:8	136:8	19	*
FIELD	136:9	136:11	18	bp ++
LEAF_NODE	136:9	136:9	19	bp
LEAF_NODE	136:11	136:11	19	++
LEAF_NODE	136:13	136:13	14	;
EXPR_STATEMENT	137:4	137:8	13	cc -- ;
EXPR	137:4	137:4	14	cc --
FIELD	137:4	137:6	15	cc --
LEAF_NODE	137:4	137:4	16	cc
LEAF_NODE	137:6	137:6	16	--
LEAF_NODE	137:8	137:8	14	;
LEAF_NODE	138:3	138:3	12	}
JUMP_STATEMENT	139:3	139:8	10	break DESTINATION ;
KEYWORD	139:3	139:3	11	break
LEAF_NODE	139:3	139:3	12	break
LEAF_NODE	0:0	0:0	11	DESTINATION
LEAF_NODE	139:8	139:8	11	;
LEAF_NODE	140:2	140:2	9	}
LEAF_NODE	141:2	141:2	8	}
LEAF_NODE	142:1	142:1	5	}
EXPR_STATEMENT	143:1	143:29	3	tif -> tif_rawcp = ( uint8 * ) bp ;
EXPR	143:1	143:1	4	tif -> tif_rawcp = ( uint8 * ) bp
ASSIGN	143:1	143:18	5	tif -> tif_rawcp = ( uint8 * ) bp
LVAL	143:1	143:1	6	tif -> tif_rawcp
FIELD	143:1	143:6	7	tif -> tif_rawcp
LEAF_NODE	143:1	143:1	8	tif
LEAF_NODE	143:4	143:4	8	->
LEAF_NODE	143:6	143:6	8	tif_rawcp
ASSIGN_OP	143:16	143:16	6	=
LEAF_NODE	143:16	143:16	7	=
RVAL	143:18	143:27	6	( uint8 * ) bp
LEAF_NODE	143:18	143:18	7	(
TYPE_NAME	143:19	143:19	7	uint8
LEAF_NODE	143:19	143:19	8	uint8
LEAF_NODE	143:24	143:24	7	*
LEAF_NODE	143:25	143:25	7	)
FIELD	143:27	143:27	7	bp
LEAF_NODE	143:27	143:27	8	bp
LEAF_NODE	143:29	143:29	4	;
EXPR_STATEMENT	144:1	144:20	3	tif -> tif_rawcc = cc ;
EXPR	144:1	144:1	4	tif -> tif_rawcc = cc
ASSIGN	144:1	144:18	5	tif -> tif_rawcc = cc
LVAL	144:1	144:1	6	tif -> tif_rawcc
FIELD	144:1	144:6	7	tif -> tif_rawcc
LEAF_NODE	144:1	144:1	8	tif
LEAF_NODE	144:4	144:4	8	->
LEAF_NODE	144:6	144:6	8	tif_rawcc
ASSIGN_OP	144:16	144:16	6	=
LEAF_NODE	144:16	144:16	7	=
RVAL	144:18	144:18	6	cc
FIELD	144:18	144:18	7	cc
LEAF_NODE	144:18	144:18	8	cc
LEAF_NODE	144:20	144:20	4	;
JUMP_STATEMENT	145:1	145:11	3	return ( 1 ) ;
KEYWORD	145:1	145:1	4	return
LEAF_NODE	145:1	145:1	5	return
DESTINATION	145:8	145:8	4	( 1 )
EXPR	145:8	145:10	5	( 1 )
LEAF_NODE	145:8	145:8	6	(
FIELD	145:9	145:9	6	1
LEAF_NODE	145:9	145:9	7	1
LEAF_NODE	145:10	145:10	6	)
LEAF_NODE	145:11	145:11	4	;
LABEL	146:0	146:3	3	bad :
LEAF_NODE	146:0	146:0	4	bad
LEAF_NODE	146:3	146:3	4	:
EXPR_STATEMENT	147:1	148:25	3	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data for scanline %ld" , ( long ) tif -> tif_row ) ;
EXPR	147:1	147:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data for scanline %ld" , ( long ) tif -> tif_row )
FUNCTION_CALL	147:1	148:24	5	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data for scanline %ld" , ( long ) tif -> tif_row )
CALLEE	147:1	147:1	6	TIFFErrorExt
LEAF_NODE	147:1	147:1	7	TIFFErrorExt
LEAF_NODE	147:13	147:13	6	(
ARGUMENT	147:14	147:14	6	tif -> tif_clientdata
FIELD	147:14	147:19	7	tif -> tif_clientdata
LEAF_NODE	147:14	147:14	8	tif
LEAF_NODE	147:17	147:17	8	->
LEAF_NODE	147:19	147:19	8	tif_clientdata
LEAF_NODE	147:33	147:33	6	,
ARGUMENT	147:35	147:35	6	module
FIELD	147:35	147:35	7	module
LEAF_NODE	147:35	147:35	8	module
LEAF_NODE	147:41	147:41	6	,
ARGUMENT	147:43	147:43	6	"Not enough data for scanline %ld"
FIELD	147:43	147:43	7	"Not enough data for scanline %ld"
LEAF_NODE	147:43	147:43	8	"Not enough data for scanline %ld"
LEAF_NODE	147:77	147:77	6	,
ARGUMENT	148:5	148:12	6	( long ) tif -> tif_row
LEAF_NODE	148:5	148:5	7	(
TYPE_NAME	148:6	148:6	7	long
LEAF_NODE	148:6	148:6	8	long
LEAF_NODE	148:10	148:10	7	)
FIELD	148:12	148:17	7	tif -> tif_row
LEAF_NODE	148:12	148:12	8	tif
LEAF_NODE	148:15	148:15	8	->
LEAF_NODE	148:17	148:17	8	tif_row
LEAF_NODE	148:24	148:24	6	)
LEAF_NODE	148:25	148:25	4	;
JUMP_STATEMENT	149:1	149:11	3	return ( 0 ) ;
KEYWORD	149:1	149:1	4	return
LEAF_NODE	149:1	149:1	5	return
DESTINATION	149:8	149:8	4	( 0 )
EXPR	149:8	149:10	5	( 0 )
LEAF_NODE	149:8	149:8	6	(
FIELD	149:9	149:9	6	0
LEAF_NODE	149:9	149:9	7	0
LEAF_NODE	149:10	149:10	6	)
LEAF_NODE	149:11	149:11	4	;
LEAF_NODE	150:0	150:0	2	}
FUNCTION_DEF	152:0	166:0	1	
RETURN_TYPE	152:0	152:7	2	static int
LEAF_NODE	152:0	152:0	3	static
TYPE_NAME	152:7	152:7	3	int
LEAF_NODE	152:7	152:7	4	int
FUNCTION_NAME	153:0	153:0	2	NeXTPreDecode
LEAF_NODE	153:0	153:0	3	NeXTPreDecode
PARAMETER_LIST	153:13	153:33	2	( TIFF * tif , uint16 s )
LEAF_NODE	153:13	153:13	3	(
PARAMETER_DECL	153:14	153:20	3	TIFF * tif
TYPE	153:14	153:18	4	TIFF *
TYPE_NAME	153:14	153:14	5	TIFF
LEAF_NODE	153:14	153:14	6	TIFF
POINTER	153:18	153:18	5	*
LEAF_NODE	153:18	153:18	6	*
NAME	153:20	153:20	4	tif
LEAF_NODE	153:20	153:20	5	tif
LEAF_NODE	153:23	153:23	3	,
PARAMETER_DECL	153:25	153:32	3	uint16 s
TYPE	153:25	153:25	4	uint16
TYPE_NAME	153:25	153:25	5	uint16
LEAF_NODE	153:25	153:25	6	uint16
NAME	153:32	153:32	4	s
LEAF_NODE	153:32	153:32	5	s
LEAF_NODE	153:33	153:33	3	)
LEAF_NODE	154:0	154:0	2	{
STATEMENTS	155:1	165:1	2	
LEAF_NODE	155:1	155:1	3	static
SIMPLE_DECL	155:8	155:45	3	const char [ ] module ; module = "NeXTPreDecode" ;
VAR_DECL	155:8	155:19	4	const char [ ] module ; module = "NeXTPreDecode"
TYPE	155:8	155:25	5	const char [ ]
TYPE_NAME	155:8	155:14	6	const char
LEAF_NODE	155:8	155:8	7	const
LEAF_NODE	155:14	155:14	7	char
TYPE_SUFFIX	155:25	155:26	6	[ ]
LEAF_NODE	155:25	155:25	7	[
LEAF_NODE	155:26	155:26	7	]
NAME	155:19	155:19	5	module
LEAF_NODE	155:19	155:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	155:19	155:19	5	module = "NeXTPreDecode"
ASSIGN	155:19	155:30	6	module = "NeXTPreDecode"
LVAL	155:19	155:19	7	module
NAME	155:19	155:19	8	module
LEAF_NODE	155:19	155:19	9	module
ASSIGN_OP	155:28	155:28	7	=
LEAF_NODE	155:28	155:28	8	=
RVAL	155:30	155:30	7	"NeXTPreDecode"
FIELD	155:30	155:30	8	"NeXTPreDecode"
LEAF_NODE	155:30	155:30	9	"NeXTPreDecode"
LEAF_NODE	155:45	155:45	4	;
SIMPLE_DECL	156:1	156:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	156:1	156:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	156:1	156:15	5	TIFFDirectory *
TYPE_NAME	156:1	156:1	6	TIFFDirectory
LEAF_NODE	156:1	156:1	7	TIFFDirectory
POINTER	156:15	156:15	6	*
LEAF_NODE	156:15	156:15	7	*
NAME	156:16	156:16	5	td
LEAF_NODE	156:16	156:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	156:16	156:16	5	td = & tif -> tif_dir
ASSIGN	156:16	156:21	6	td = & tif -> tif_dir
LVAL	156:16	156:16	7	td
NAME	156:16	156:16	8	td
LEAF_NODE	156:16	156:16	9	td
ASSIGN_OP	156:19	156:19	7	=
LEAF_NODE	156:19	156:19	8	=
RVAL	156:21	156:21	7	& tif -> tif_dir
UNARY_EXPR	156:21	156:22	8	& tif -> tif_dir
UNARY_OPERATOR	156:21	156:21	9	&
LEAF_NODE	156:21	156:21	10	&
FIELD	156:22	156:27	9	tif -> tif_dir
LEAF_NODE	156:22	156:22	10	tif
LEAF_NODE	156:25	156:25	10	->
LEAF_NODE	156:27	156:27	10	tif_dir
LEAF_NODE	156:34	156:34	4	;
EXPR_STATEMENT	157:1	157:8	3	( void ) s ;
EXPR	157:1	157:7	4	( void ) s
LEAF_NODE	157:1	157:1	5	(
TYPE_NAME	157:2	157:2	5	void
LEAF_NODE	157:2	157:2	6	void
LEAF_NODE	157:6	157:6	5	)
FIELD	157:7	157:7	5	s
LEAF_NODE	157:7	157:7	6	s
LEAF_NODE	157:8	157:8	4	;
SELECTION	159:1	160:1	3	
KEYWORD	159:1	159:1	4	if
LEAF_NODE	159:1	159:1	5	if
LEAF_NODE	159:3	159:3	4	(
CONDITION	159:5	159:5	4	td -> td_bitspersample != 2
EXPR	159:5	159:29	5	td -> td_bitspersample != 2
FIELD	159:5	159:9	6	td -> td_bitspersample
LEAF_NODE	159:5	159:5	7	td
LEAF_NODE	159:7	159:7	7	->
LEAF_NODE	159:9	159:9	7	td_bitspersample
EQ_OPERATOR	159:26	159:26	6	!=
LEAF_NODE	159:26	159:26	7	!=
FIELD	159:29	159:29	6	2
LEAF_NODE	159:29	159:29	7	2
LEAF_NODE	159:31	159:31	4	)
STATEMENTS	160:1	164:1	4	
LEAF_NODE	160:1	160:1	5	{
STATEMENTS	161:2	163:2	5	
EXPR_STATEMENT	161:2	162:27	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Unsupported BitsPerSample = %d" , td -> td_bitspersample ) ;
EXPR	161:2	161:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Unsupported BitsPerSample = %d" , td -> td_bitspersample )
FUNCTION_CALL	161:2	162:26	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Unsupported BitsPerSample = %d" , td -> td_bitspersample )
CALLEE	161:2	161:2	9	TIFFErrorExt
LEAF_NODE	161:2	161:2	10	TIFFErrorExt
LEAF_NODE	161:14	161:14	9	(
ARGUMENT	161:15	161:15	9	tif -> tif_clientdata
FIELD	161:15	161:20	10	tif -> tif_clientdata
LEAF_NODE	161:15	161:15	11	tif
LEAF_NODE	161:18	161:18	11	->
LEAF_NODE	161:20	161:20	11	tif_clientdata
LEAF_NODE	161:34	161:34	9	,
ARGUMENT	161:36	161:36	9	module
FIELD	161:36	161:36	10	module
LEAF_NODE	161:36	161:36	11	module
LEAF_NODE	161:42	161:42	9	,
ARGUMENT	161:44	161:44	9	"Unsupported BitsPerSample = %d"
FIELD	161:44	161:44	10	"Unsupported BitsPerSample = %d"
LEAF_NODE	161:44	161:44	11	"Unsupported BitsPerSample = %d"
LEAF_NODE	161:76	161:76	9	,
ARGUMENT	162:6	162:6	9	td -> td_bitspersample
FIELD	162:6	162:10	10	td -> td_bitspersample
LEAF_NODE	162:6	162:6	11	td
LEAF_NODE	162:8	162:8	11	->
LEAF_NODE	162:10	162:10	11	td_bitspersample
LEAF_NODE	162:26	162:26	9	)
LEAF_NODE	162:27	162:27	7	;
JUMP_STATEMENT	163:2	163:12	6	return ( 0 ) ;
KEYWORD	163:2	163:2	7	return
LEAF_NODE	163:2	163:2	8	return
DESTINATION	163:9	163:9	7	( 0 )
EXPR	163:9	163:11	8	( 0 )
LEAF_NODE	163:9	163:9	9	(
FIELD	163:10	163:10	9	0
LEAF_NODE	163:10	163:10	10	0
LEAF_NODE	163:11	163:11	9	)
LEAF_NODE	163:12	163:12	7	;
LEAF_NODE	164:1	164:1	5	}
JUMP_STATEMENT	165:1	165:11	3	return ( 1 ) ;
KEYWORD	165:1	165:1	4	return
LEAF_NODE	165:1	165:1	5	return
DESTINATION	165:8	165:8	4	( 1 )
EXPR	165:8	165:10	5	( 1 )
LEAF_NODE	165:8	165:8	6	(
FIELD	165:9	165:9	6	1
LEAF_NODE	165:9	165:9	7	1
LEAF_NODE	165:10	165:10	6	)
LEAF_NODE	165:11	165:11	4	;
LEAF_NODE	166:0	166:0	2	}
FUNCTION_DEF	168:0	177:0	1	
RETURN_TYPE	168:0	168:0	2	int
TYPE_NAME	168:0	168:0	3	int
LEAF_NODE	168:0	168:0	4	int
FUNCTION_NAME	169:0	169:0	2	TIFFInitNeXT
LEAF_NODE	169:0	169:0	3	TIFFInitNeXT
PARAMETER_LIST	169:12	169:34	2	( TIFF * tif , int scheme )
LEAF_NODE	169:12	169:12	3	(
PARAMETER_DECL	169:13	169:19	3	TIFF * tif
TYPE	169:13	169:17	4	TIFF *
TYPE_NAME	169:13	169:13	5	TIFF
LEAF_NODE	169:13	169:13	6	TIFF
POINTER	169:17	169:17	5	*
LEAF_NODE	169:17	169:17	6	*
NAME	169:19	169:19	4	tif
LEAF_NODE	169:19	169:19	5	tif
LEAF_NODE	169:22	169:22	3	,
PARAMETER_DECL	169:24	169:28	3	int scheme
TYPE	169:24	169:24	4	int
TYPE_NAME	169:24	169:24	5	int
LEAF_NODE	169:24	169:24	6	int
NAME	169:28	169:28	4	scheme
LEAF_NODE	169:28	169:28	5	scheme
LEAF_NODE	169:34	169:34	3	)
LEAF_NODE	170:0	170:0	2	{
STATEMENTS	171:1	176:1	2	
EXPR_STATEMENT	171:1	171:14	3	( void ) scheme ;
EXPR	171:1	171:8	4	( void ) scheme
LEAF_NODE	171:1	171:1	5	(
TYPE_NAME	171:2	171:2	5	void
LEAF_NODE	171:2	171:2	6	void
LEAF_NODE	171:6	171:6	5	)
FIELD	171:8	171:8	5	scheme
LEAF_NODE	171:8	171:8	6	scheme
LEAF_NODE	171:14	171:14	4	;
EXPR_STATEMENT	172:1	172:35	3	tif -> tif_predecode = NeXTPreDecode ;
EXPR	172:1	172:1	4	tif -> tif_predecode = NeXTPreDecode
ASSIGN	172:1	172:22	5	tif -> tif_predecode = NeXTPreDecode
LVAL	172:1	172:1	6	tif -> tif_predecode
FIELD	172:1	172:6	7	tif -> tif_predecode
LEAF_NODE	172:1	172:1	8	tif
LEAF_NODE	172:4	172:4	8	->
LEAF_NODE	172:6	172:6	8	tif_predecode
ASSIGN_OP	172:20	172:20	6	=
LEAF_NODE	172:20	172:20	7	=
RVAL	172:22	172:22	6	NeXTPreDecode
FIELD	172:22	172:22	7	NeXTPreDecode
LEAF_NODE	172:22	172:22	8	NeXTPreDecode
LEAF_NODE	172:35	172:35	4	;
EXPR_STATEMENT	173:1	173:32	3	tif -> tif_decoderow = NeXTDecode ;
EXPR	173:1	173:1	4	tif -> tif_decoderow = NeXTDecode
ASSIGN	173:1	173:22	5	tif -> tif_decoderow = NeXTDecode
LVAL	173:1	173:1	6	tif -> tif_decoderow
FIELD	173:1	173:6	7	tif -> tif_decoderow
LEAF_NODE	173:1	173:1	8	tif
LEAF_NODE	173:4	173:4	8	->
LEAF_NODE	173:6	173:6	8	tif_decoderow
ASSIGN_OP	173:20	173:20	6	=
LEAF_NODE	173:20	173:20	7	=
RVAL	173:22	173:22	6	NeXTDecode
FIELD	173:22	173:22	7	NeXTDecode
LEAF_NODE	173:22	173:22	8	NeXTDecode
LEAF_NODE	173:32	173:32	4	;
EXPR_STATEMENT	174:1	174:34	3	tif -> tif_decodestrip = NeXTDecode ;
EXPR	174:1	174:1	4	tif -> tif_decodestrip = NeXTDecode
ASSIGN	174:1	174:24	5	tif -> tif_decodestrip = NeXTDecode
LVAL	174:1	174:1	6	tif -> tif_decodestrip
FIELD	174:1	174:6	7	tif -> tif_decodestrip
LEAF_NODE	174:1	174:1	8	tif
LEAF_NODE	174:4	174:4	8	->
LEAF_NODE	174:6	174:6	8	tif_decodestrip
ASSIGN_OP	174:22	174:22	6	=
LEAF_NODE	174:22	174:22	7	=
RVAL	174:24	174:24	6	NeXTDecode
FIELD	174:24	174:24	7	NeXTDecode
LEAF_NODE	174:24	174:24	8	NeXTDecode
LEAF_NODE	174:34	174:34	4	;
EXPR_STATEMENT	175:1	175:33	3	tif -> tif_decodetile = NeXTDecode ;
EXPR	175:1	175:1	4	tif -> tif_decodetile = NeXTDecode
ASSIGN	175:1	175:23	5	tif -> tif_decodetile = NeXTDecode
LVAL	175:1	175:1	6	tif -> tif_decodetile
FIELD	175:1	175:6	7	tif -> tif_decodetile
LEAF_NODE	175:1	175:1	8	tif
LEAF_NODE	175:4	175:4	8	->
LEAF_NODE	175:6	175:6	8	tif_decodetile
ASSIGN_OP	175:21	175:21	6	=
LEAF_NODE	175:21	175:21	7	=
RVAL	175:23	175:23	6	NeXTDecode
FIELD	175:23	175:23	7	NeXTDecode
LEAF_NODE	175:23	175:23	8	NeXTDecode
LEAF_NODE	175:33	175:33	4	;
JUMP_STATEMENT	176:1	176:11	3	return ( 1 ) ;
KEYWORD	176:1	176:1	4	return
LEAF_NODE	176:1	176:1	5	return
DESTINATION	176:8	176:8	4	( 1 )
EXPR	176:8	176:10	5	( 1 )
LEAF_NODE	176:8	176:8	6	(
FIELD	176:9	176:9	6	1
LEAF_NODE	176:9	176:9	7	1
LEAF_NODE	176:10	176:10	6	)
LEAF_NODE	176:11	176:11	4	;
LEAF_NODE	177:0	177:0	2	}
