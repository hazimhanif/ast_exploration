SOURCE_FILE	156:8	1695:0	0	
SIMPLE_DECL	156:8	156:38	1	struct logLuvState LogLuvState ;
VAR_DECL	156:8	156:27	2	struct logLuvState LogLuvState
TYPE	156:8	156:8	3	struct logLuvState
TYPE_NAME	156:8	156:15	4	struct logLuvState
LEAF_NODE	156:8	156:8	5	struct
LEAF_NODE	156:15	156:15	5	logLuvState
NAME	156:27	156:27	3	LogLuvState
LEAF_NODE	156:27	156:27	4	LogLuvState
LEAF_NODE	156:38	156:38	2	;
SIMPLE_DECL	158:0	170:1	1	struct logLuvState BASE_CLASSES { int encoder_state ; int user_datafmt ; int encode_meth ; int pixel_size ; uint8 * tbuf ; tmsize_t tbuflen ; void ( * tfunc ) ( LogLuvState * , uint8 * , tmsize_t ) ; TIFFVSetMethod vgetparent ; TIFFVSetMethod vsetparent ; } ;
CLASS_DEF	158:0	158:0	2	struct logLuvState BASE_CLASSES { int encoder_state ; int user_datafmt ; int encode_meth ; int pixel_size ; uint8 * tbuf ; tmsize_t tbuflen ; void ( * tfunc ) ( LogLuvState * , uint8 * , tmsize_t ) ; TIFFVSetMethod vgetparent ; TIFFVSetMethod vsetparent ; }
CLASS_DEF	158:0	170:0	3	struct logLuvState BASE_CLASSES { int encoder_state ; int user_datafmt ; int encode_meth ; int pixel_size ; uint8 * tbuf ; tmsize_t tbuflen ; void ( * tfunc ) ( LogLuvState * , uint8 * , tmsize_t ) ; TIFFVSetMethod vgetparent ; TIFFVSetMethod vsetparent ; }
LEAF_NODE	158:0	158:0	4	struct
CLASS_NAME	158:7	158:7	4	logLuvState
LEAF_NODE	158:7	158:7	5	logLuvState
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	158:19	158:19	4	{
CLASS_CONTENT	159:8	169:1	4	int encoder_state ; int user_datafmt ; int encode_meth ; int pixel_size ; uint8 * tbuf ; tmsize_t tbuflen ; void ( * tfunc ) ( LogLuvState * , uint8 * , tmsize_t ) ; TIFFVSetMethod vgetparent ; TIFFVSetMethod vsetparent ;
SIMPLE_DECL	159:8	159:45	5	int encoder_state ;
VAR_DECL	159:8	159:32	6	int encoder_state
TYPE	159:8	159:8	7	int
TYPE_NAME	159:8	159:8	8	int
LEAF_NODE	159:8	159:8	9	int
NAME	159:32	159:32	7	encoder_state
LEAF_NODE	159:32	159:32	8	encoder_state
LEAF_NODE	159:45	159:45	6	;
SIMPLE_DECL	160:1	160:37	5	int user_datafmt ;
VAR_DECL	160:1	160:25	6	int user_datafmt
TYPE	160:1	160:1	7	int
TYPE_NAME	160:1	160:1	8	int
LEAF_NODE	160:1	160:1	9	int
NAME	160:25	160:25	7	user_datafmt
LEAF_NODE	160:25	160:25	8	user_datafmt
LEAF_NODE	160:37	160:37	6	;
SIMPLE_DECL	161:1	161:36	5	int encode_meth ;
VAR_DECL	161:1	161:25	6	int encode_meth
TYPE	161:1	161:1	7	int
TYPE_NAME	161:1	161:1	8	int
LEAF_NODE	161:1	161:1	9	int
NAME	161:25	161:25	7	encode_meth
LEAF_NODE	161:25	161:25	8	encode_meth
LEAF_NODE	161:36	161:36	6	;
SIMPLE_DECL	162:1	162:35	5	int pixel_size ;
VAR_DECL	162:1	162:25	6	int pixel_size
TYPE	162:1	162:1	7	int
TYPE_NAME	162:1	162:1	8	int
LEAF_NODE	162:1	162:1	9	int
NAME	162:25	162:25	7	pixel_size
LEAF_NODE	162:25	162:25	8	pixel_size
LEAF_NODE	162:35	162:35	6	;
SIMPLE_DECL	164:1	164:29	5	uint8 * tbuf ;
VAR_DECL	164:1	164:25	6	uint8 * tbuf
TYPE	164:1	164:6	7	uint8 *
TYPE_NAME	164:1	164:1	8	uint8
LEAF_NODE	164:1	164:1	9	uint8
POINTER	164:6	164:6	8	*
LEAF_NODE	164:6	164:6	9	*
NAME	164:25	164:25	7	tbuf
LEAF_NODE	164:25	164:25	8	tbuf
LEAF_NODE	164:29	164:29	6	;
SIMPLE_DECL	165:1	165:32	5	tmsize_t tbuflen ;
VAR_DECL	165:1	165:25	6	tmsize_t tbuflen
TYPE	165:1	165:1	7	tmsize_t
TYPE_NAME	165:1	165:1	8	tmsize_t
LEAF_NODE	165:1	165:1	9	tmsize_t
NAME	165:25	165:25	7	tbuflen
LEAF_NODE	165:25	165:25	8	tbuflen
LEAF_NODE	165:32	165:32	6	;
LEAF_NODE	166:1	166:1	5	void
LEAF_NODE	166:6	166:6	5	(
LEAF_NODE	166:7	166:7	5	*
LEAF_NODE	166:8	166:8	5	tfunc
LEAF_NODE	166:13	166:13	5	)
LEAF_NODE	166:14	166:14	5	(
LEAF_NODE	166:15	166:15	5	LogLuvState
LEAF_NODE	166:26	166:26	5	*
LEAF_NODE	166:27	166:27	5	,
LEAF_NODE	166:29	166:29	5	uint8
LEAF_NODE	166:34	166:34	5	*
LEAF_NODE	166:35	166:35	5	,
LEAF_NODE	166:37	166:37	5	tmsize_t
LEAF_NODE	166:45	166:45	5	)
LEAF_NODE	166:46	166:46	5	;
SIMPLE_DECL	168:1	168:35	5	TIFFVSetMethod vgetparent ;
VAR_DECL	168:1	168:25	6	TIFFVSetMethod vgetparent
TYPE	168:1	168:1	7	TIFFVSetMethod
TYPE_NAME	168:1	168:1	8	TIFFVSetMethod
LEAF_NODE	168:1	168:1	9	TIFFVSetMethod
NAME	168:25	168:25	7	vgetparent
LEAF_NODE	168:25	168:25	8	vgetparent
LEAF_NODE	168:35	168:35	6	;
SIMPLE_DECL	169:1	169:35	5	TIFFVSetMethod vsetparent ;
VAR_DECL	169:1	169:25	6	TIFFVSetMethod vsetparent
TYPE	169:1	169:1	7	TIFFVSetMethod
TYPE_NAME	169:1	169:1	8	TIFFVSetMethod
LEAF_NODE	169:1	169:1	9	TIFFVSetMethod
NAME	169:25	169:25	7	vsetparent
LEAF_NODE	169:25	169:25	8	vsetparent
LEAF_NODE	169:35	169:35	6	;
LEAF_NODE	170:0	170:0	4	}
LEAF_NODE	170:1	170:1	2	;
FUNCTION_DEF	182:0	253:0	1	
RETURN_TYPE	182:0	182:7	2	static int
LEAF_NODE	182:0	182:0	3	static
TYPE_NAME	182:7	182:7	3	int
LEAF_NODE	182:7	182:7	4	int
FUNCTION_NAME	183:0	183:0	2	LogL16Decode
LEAF_NODE	183:0	183:0	3	LogL16Decode
PARAMETER_LIST	183:12	183:57	2	( TIFF * tif , uint8 * op , tmsize_t occ , uint16 s )
LEAF_NODE	183:12	183:12	3	(
PARAMETER_DECL	183:13	183:19	3	TIFF * tif
TYPE	183:13	183:17	4	TIFF *
TYPE_NAME	183:13	183:13	5	TIFF
LEAF_NODE	183:13	183:13	6	TIFF
POINTER	183:17	183:17	5	*
LEAF_NODE	183:17	183:17	6	*
NAME	183:19	183:19	4	tif
LEAF_NODE	183:19	183:19	5	tif
LEAF_NODE	183:22	183:22	3	,
PARAMETER_DECL	183:24	183:31	3	uint8 * op
TYPE	183:24	183:29	4	uint8 *
TYPE_NAME	183:24	183:24	5	uint8
LEAF_NODE	183:24	183:24	6	uint8
POINTER	183:29	183:29	5	*
LEAF_NODE	183:29	183:29	6	*
NAME	183:31	183:31	4	op
LEAF_NODE	183:31	183:31	5	op
LEAF_NODE	183:33	183:33	3	,
PARAMETER_DECL	183:35	183:44	3	tmsize_t occ
TYPE	183:35	183:35	4	tmsize_t
TYPE_NAME	183:35	183:35	5	tmsize_t
LEAF_NODE	183:35	183:35	6	tmsize_t
NAME	183:44	183:44	4	occ
LEAF_NODE	183:44	183:44	5	occ
LEAF_NODE	183:47	183:47	3	,
PARAMETER_DECL	183:49	183:56	3	uint16 s
TYPE	183:49	183:49	4	uint16
TYPE_NAME	183:49	183:49	5	uint16
LEAF_NODE	183:49	183:49	6	uint16
NAME	183:56	183:56	4	s
LEAF_NODE	183:56	183:56	5	s
LEAF_NODE	183:57	183:57	3	)
LEAF_NODE	184:0	184:0	2	{
STATEMENTS	185:1	252:1	2	
LEAF_NODE	185:1	185:1	3	static
SIMPLE_DECL	185:8	185:44	3	const char [ ] module ; module = "LogL16Decode" ;
VAR_DECL	185:8	185:19	4	const char [ ] module ; module = "LogL16Decode"
TYPE	185:8	185:25	5	const char [ ]
TYPE_NAME	185:8	185:14	6	const char
LEAF_NODE	185:8	185:8	7	const
LEAF_NODE	185:14	185:14	7	char
TYPE_SUFFIX	185:25	185:26	6	[ ]
LEAF_NODE	185:25	185:25	7	[
LEAF_NODE	185:26	185:26	7	]
NAME	185:19	185:19	5	module
LEAF_NODE	185:19	185:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	185:19	185:19	5	module = "LogL16Decode"
ASSIGN	185:19	185:30	6	module = "LogL16Decode"
LVAL	185:19	185:19	7	module
NAME	185:19	185:19	8	module
LEAF_NODE	185:19	185:19	9	module
ASSIGN_OP	185:28	185:28	7	=
LEAF_NODE	185:28	185:28	8	=
RVAL	185:30	185:30	7	"LogL16Decode"
FIELD	185:30	185:30	8	"LogL16Decode"
LEAF_NODE	185:30	185:30	9	"LogL16Decode"
LEAF_NODE	185:44	185:44	4	;
SIMPLE_DECL	186:1	186:36	3	LogLuvState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	186:1	186:14	4	LogLuvState * sp ; sp = DecoderState ( tif )
TYPE	186:1	186:12	5	LogLuvState *
TYPE_NAME	186:1	186:1	6	LogLuvState
LEAF_NODE	186:1	186:1	7	LogLuvState
POINTER	186:12	186:12	6	*
LEAF_NODE	186:12	186:12	7	*
NAME	186:14	186:14	5	sp
LEAF_NODE	186:14	186:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	186:14	186:14	5	sp = DecoderState ( tif )
ASSIGN	186:14	186:19	6	sp = DecoderState ( tif )
LVAL	186:14	186:14	7	sp
NAME	186:14	186:14	8	sp
LEAF_NODE	186:14	186:14	9	sp
ASSIGN_OP	186:17	186:17	7	=
LEAF_NODE	186:17	186:17	8	=
RVAL	186:19	186:19	7	DecoderState ( tif )
FUNCTION_CALL	186:19	186:35	8	DecoderState ( tif )
CALLEE	186:19	186:19	9	DecoderState
LEAF_NODE	186:19	186:19	10	DecoderState
LEAF_NODE	186:31	186:31	9	(
ARGUMENT	186:32	186:32	9	tif
FIELD	186:32	186:32	10	tif
LEAF_NODE	186:32	186:32	11	tif
LEAF_NODE	186:35	186:35	9	)
LEAF_NODE	186:36	186:36	4	;
SIMPLE_DECL	187:1	187:9	3	int shft ;
VAR_DECL	187:1	187:5	4	int shft
TYPE	187:1	187:1	5	int
TYPE_NAME	187:1	187:1	6	int
LEAF_NODE	187:1	187:1	7	int
NAME	187:5	187:5	5	shft
LEAF_NODE	187:5	187:5	6	shft
LEAF_NODE	187:9	187:9	4	;
SIMPLE_DECL	188:1	188:11	3	tmsize_t i ;
VAR_DECL	188:1	188:10	4	tmsize_t i
TYPE	188:1	188:1	5	tmsize_t
TYPE_NAME	188:1	188:1	6	tmsize_t
LEAF_NODE	188:1	188:1	7	tmsize_t
NAME	188:10	188:10	5	i
LEAF_NODE	188:10	188:10	6	i
LEAF_NODE	188:11	188:11	4	;
SIMPLE_DECL	189:1	189:17	3	tmsize_t npixels ;
VAR_DECL	189:1	189:10	4	tmsize_t npixels
TYPE	189:1	189:1	5	tmsize_t
TYPE_NAME	189:1	189:1	6	tmsize_t
LEAF_NODE	189:1	189:1	7	tmsize_t
NAME	189:10	189:10	5	npixels
LEAF_NODE	189:10	189:10	6	npixels
LEAF_NODE	189:17	189:17	4	;
SIMPLE_DECL	190:1	190:18	3	unsigned char * bp ;
VAR_DECL	190:1	190:16	4	unsigned char * bp
TYPE	190:1	190:14	5	unsigned char *
TYPE_NAME	190:1	190:10	6	unsigned char
LEAF_NODE	190:1	190:1	7	unsigned
LEAF_NODE	190:10	190:10	7	char
POINTER	190:14	190:14	6	*
LEAF_NODE	190:14	190:14	7	*
NAME	190:16	190:16	5	bp
LEAF_NODE	190:16	190:16	6	bp
LEAF_NODE	190:18	190:18	4	;
SIMPLE_DECL	191:1	191:10	3	int16 * tp ;
VAR_DECL	191:1	191:8	4	int16 * tp
TYPE	191:1	191:6	5	int16 *
TYPE_NAME	191:1	191:1	6	int16
LEAF_NODE	191:1	191:1	7	int16
POINTER	191:6	191:6	6	*
LEAF_NODE	191:6	191:6	7	*
NAME	191:8	191:8	5	tp
LEAF_NODE	191:8	191:8	6	tp
LEAF_NODE	191:10	191:10	4	;
SIMPLE_DECL	192:1	192:8	3	int16 b ;
VAR_DECL	192:1	192:7	4	int16 b
TYPE	192:1	192:1	5	int16
TYPE_NAME	192:1	192:1	6	int16
LEAF_NODE	192:1	192:1	7	int16
NAME	192:7	192:7	5	b
LEAF_NODE	192:7	192:7	6	b
LEAF_NODE	192:8	192:8	4	;
SIMPLE_DECL	193:1	193:12	3	tmsize_t cc ;
VAR_DECL	193:1	193:10	4	tmsize_t cc
TYPE	193:1	193:1	5	tmsize_t
TYPE_NAME	193:1	193:1	6	tmsize_t
LEAF_NODE	193:1	193:1	7	tmsize_t
NAME	193:10	193:10	5	cc
LEAF_NODE	193:10	193:10	6	cc
LEAF_NODE	193:12	193:12	4	;
SIMPLE_DECL	194:1	194:7	3	int rc ;
VAR_DECL	194:1	194:5	4	int rc
TYPE	194:1	194:1	5	int
TYPE_NAME	194:1	194:1	6	int
LEAF_NODE	194:1	194:1	7	int
NAME	194:5	194:5	5	rc
LEAF_NODE	194:5	194:5	6	rc
LEAF_NODE	194:7	194:7	4	;
EXPR_STATEMENT	196:1	196:15	3	assert ( s == 0 ) ;
EXPR	196:1	196:1	4	assert ( s == 0 )
FUNCTION_CALL	196:1	196:14	5	assert ( s == 0 )
CALLEE	196:1	196:1	6	assert
LEAF_NODE	196:1	196:1	7	assert
LEAF_NODE	196:7	196:7	6	(
ARGUMENT	196:8	196:13	6	s == 0
FIELD	196:8	196:8	7	s
LEAF_NODE	196:8	196:8	8	s
EQ_OPERATOR	196:10	196:10	7	==
LEAF_NODE	196:10	196:10	8	==
FIELD	196:13	196:13	7	0
LEAF_NODE	196:13	196:13	8	0
LEAF_NODE	196:14	196:14	6	)
LEAF_NODE	196:15	196:15	4	;
EXPR_STATEMENT	197:1	197:19	3	assert ( sp != NULL ) ;
EXPR	197:1	197:1	4	assert ( sp != NULL )
FUNCTION_CALL	197:1	197:18	5	assert ( sp != NULL )
CALLEE	197:1	197:1	6	assert
LEAF_NODE	197:1	197:1	7	assert
LEAF_NODE	197:7	197:7	6	(
ARGUMENT	197:8	197:14	6	sp != NULL
FIELD	197:8	197:8	7	sp
LEAF_NODE	197:8	197:8	8	sp
EQ_OPERATOR	197:11	197:11	7	!=
LEAF_NODE	197:11	197:11	8	!=
FIELD	197:14	197:14	7	NULL
LEAF_NODE	197:14	197:14	8	NULL
LEAF_NODE	197:18	197:18	6	)
LEAF_NODE	197:19	197:19	4	;
EXPR_STATEMENT	199:1	199:31	3	npixels = occ / sp -> pixel_size ;
EXPR	199:1	199:1	4	npixels = occ / sp -> pixel_size
ASSIGN	199:1	199:11	5	npixels = occ / sp -> pixel_size
LVAL	199:1	199:1	6	npixels
FIELD	199:1	199:1	7	npixels
LEAF_NODE	199:1	199:1	8	npixels
ASSIGN_OP	199:9	199:9	6	=
LEAF_NODE	199:9	199:9	7	=
RVAL	199:11	199:17	6	occ / sp -> pixel_size
FIELD	199:11	199:11	7	occ
LEAF_NODE	199:11	199:11	8	occ
LEAF_NODE	199:15	199:15	7	/
FIELD	199:17	199:21	7	sp -> pixel_size
LEAF_NODE	199:17	199:17	8	sp
LEAF_NODE	199:19	199:19	8	->
LEAF_NODE	199:21	199:21	8	pixel_size
LEAF_NODE	199:31	199:31	4	;
SELECTION	201:1	202:2	3	
KEYWORD	201:1	201:1	4	if
LEAF_NODE	201:1	201:1	5	if
LEAF_NODE	201:4	201:4	4	(
CONDITION	201:5	201:5	4	sp -> user_datafmt == SGILOGDATAFMT_16BIT
EXPR	201:5	201:25	5	sp -> user_datafmt == SGILOGDATAFMT_16BIT
FIELD	201:5	201:9	6	sp -> user_datafmt
LEAF_NODE	201:5	201:5	7	sp
LEAF_NODE	201:7	201:7	7	->
LEAF_NODE	201:9	201:9	7	user_datafmt
EQ_OPERATOR	201:22	201:22	6	==
LEAF_NODE	201:22	201:22	7	==
FIELD	201:25	201:25	6	SGILOGDATAFMT_16BIT
LEAF_NODE	201:25	201:25	7	SGILOGDATAFMT_16BIT
LEAF_NODE	201:44	201:44	4	)
STATEMENTS	202:2	202:2	4	
EXPR_STATEMENT	202:2	202:18	5	tp = ( int16 * ) op ;
EXPR	202:2	202:2	6	tp = ( int16 * ) op
ASSIGN	202:2	202:7	7	tp = ( int16 * ) op
LVAL	202:2	202:2	8	tp
FIELD	202:2	202:2	9	tp
LEAF_NODE	202:2	202:2	10	tp
ASSIGN_OP	202:5	202:5	8	=
LEAF_NODE	202:5	202:5	9	=
RVAL	202:7	202:16	8	( int16 * ) op
LEAF_NODE	202:7	202:7	9	(
TYPE_NAME	202:8	202:8	9	int16
LEAF_NODE	202:8	202:8	10	int16
LEAF_NODE	202:13	202:13	9	*
LEAF_NODE	202:14	202:14	9	)
FIELD	202:16	202:16	9	op
LEAF_NODE	202:16	202:16	10	op
LEAF_NODE	202:18	202:18	6	;
SELECTION	203:1	203:6	3	
KEYWORD	203:1	203:1	4	else
LEAF_NODE	203:1	203:1	5	else
STATEMENTS	203:6	210:1	4	
LEAF_NODE	203:6	203:6	5	{
STATEMENTS	204:2	209:2	5	
SELECTION	204:2	204:28	6	
KEYWORD	204:2	204:2	7	if
LEAF_NODE	204:2	204:2	8	if
LEAF_NODE	204:4	204:4	7	(
CONDITION	204:5	204:5	7	sp -> tbuflen < npixels
EXPR	204:5	204:19	8	sp -> tbuflen < npixels
FIELD	204:5	204:9	9	sp -> tbuflen
LEAF_NODE	204:5	204:5	10	sp
LEAF_NODE	204:7	204:7	10	->
LEAF_NODE	204:9	204:9	10	tbuflen
REL_OPERATOR	204:17	204:17	9	<
LEAF_NODE	204:17	204:17	10	<
FIELD	204:19	204:19	9	npixels
LEAF_NODE	204:19	204:19	10	npixels
LEAF_NODE	204:26	204:26	7	)
STATEMENTS	204:28	208:2	7	
LEAF_NODE	204:28	204:28	8	{
STATEMENTS	205:3	207:3	8	
EXPR_STATEMENT	205:3	206:38	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" ) ;
EXPR	205:3	205:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
FUNCTION_CALL	205:3	206:37	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
CALLEE	205:3	205:3	12	TIFFErrorExt
LEAF_NODE	205:3	205:3	13	TIFFErrorExt
LEAF_NODE	205:15	205:15	12	(
ARGUMENT	205:16	205:16	12	tif -> tif_clientdata
FIELD	205:16	205:21	13	tif -> tif_clientdata
LEAF_NODE	205:16	205:16	14	tif
LEAF_NODE	205:19	205:19	14	->
LEAF_NODE	205:21	205:21	14	tif_clientdata
LEAF_NODE	205:35	205:35	12	,
ARGUMENT	205:37	205:37	12	module
FIELD	205:37	205:37	13	module
LEAF_NODE	205:37	205:37	14	module
LEAF_NODE	205:43	205:43	12	,
ARGUMENT	206:7	206:7	12	"Translation buffer too short"
FIELD	206:7	206:7	13	"Translation buffer too short"
LEAF_NODE	206:7	206:7	14	"Translation buffer too short"
LEAF_NODE	206:37	206:37	12	)
LEAF_NODE	206:38	206:38	10	;
JUMP_STATEMENT	207:3	207:13	9	return ( 0 ) ;
KEYWORD	207:3	207:3	10	return
LEAF_NODE	207:3	207:3	11	return
DESTINATION	207:10	207:10	10	( 0 )
EXPR	207:10	207:12	11	( 0 )
LEAF_NODE	207:10	207:10	12	(
FIELD	207:11	207:11	12	0
LEAF_NODE	207:11	207:11	13	0
LEAF_NODE	207:12	207:12	12	)
LEAF_NODE	207:13	207:13	10	;
LEAF_NODE	208:2	208:2	8	}
EXPR_STATEMENT	209:2	209:24	6	tp = ( int16 * ) sp -> tbuf ;
EXPR	209:2	209:2	7	tp = ( int16 * ) sp -> tbuf
ASSIGN	209:2	209:7	8	tp = ( int16 * ) sp -> tbuf
LVAL	209:2	209:2	9	tp
FIELD	209:2	209:2	10	tp
LEAF_NODE	209:2	209:2	11	tp
ASSIGN_OP	209:5	209:5	9	=
LEAF_NODE	209:5	209:5	10	=
RVAL	209:7	209:16	9	( int16 * ) sp -> tbuf
LEAF_NODE	209:7	209:7	10	(
TYPE_NAME	209:8	209:8	10	int16
LEAF_NODE	209:8	209:8	11	int16
LEAF_NODE	209:13	209:13	10	*
LEAF_NODE	209:14	209:14	10	)
FIELD	209:16	209:20	10	sp -> tbuf
LEAF_NODE	209:16	209:16	11	sp
LEAF_NODE	209:18	209:18	11	->
LEAF_NODE	209:20	209:20	11	tbuf
LEAF_NODE	209:24	209:24	7	;
LEAF_NODE	210:1	210:1	5	}
EXPR_STATEMENT	211:1	211:51	3	_TIFFmemset ( ( void * ) tp , 0 , npixels * sizeof ( tp [ 0 ] ) ) ;
EXPR	211:1	211:1	4	_TIFFmemset ( ( void * ) tp , 0 , npixels * sizeof ( tp [ 0 ] ) )
FUNCTION_CALL	211:1	211:50	5	_TIFFmemset ( ( void * ) tp , 0 , npixels * sizeof ( tp [ 0 ] ) )
CALLEE	211:1	211:1	6	_TIFFmemset
LEAF_NODE	211:1	211:1	7	_TIFFmemset
LEAF_NODE	211:12	211:12	6	(
ARGUMENT	211:13	211:21	6	( void * ) tp
LEAF_NODE	211:13	211:13	7	(
TYPE_NAME	211:14	211:14	7	void
LEAF_NODE	211:14	211:14	8	void
LEAF_NODE	211:18	211:18	7	*
LEAF_NODE	211:19	211:19	7	)
FIELD	211:21	211:21	7	tp
LEAF_NODE	211:21	211:21	8	tp
LEAF_NODE	211:23	211:23	6	,
ARGUMENT	211:25	211:25	6	0
FIELD	211:25	211:25	7	0
LEAF_NODE	211:25	211:25	8	0
LEAF_NODE	211:26	211:26	6	,
ARGUMENT	211:28	211:36	6	npixels * sizeof ( tp [ 0 ] )
FIELD	211:28	211:28	7	npixels
LEAF_NODE	211:28	211:28	8	npixels
LEAF_NODE	211:35	211:35	7	*
FUNCTION_CALL	211:36	211:49	7	sizeof ( tp [ 0 ] )
CALLEE	211:36	211:36	8	sizeof
LEAF_NODE	211:36	211:36	9	sizeof
LEAF_NODE	211:43	211:43	8	(
ARGUMENT	211:44	211:44	8	tp [ 0 ]
FIELD	211:44	211:48	9	tp [ 0 ]
LEAF_NODE	211:44	211:44	10	tp
LEAF_NODE	211:46	211:46	10	[
EXPR	211:47	211:47	10	0
FIELD	211:47	211:47	11	0
LEAF_NODE	211:47	211:47	12	0
LEAF_NODE	211:48	211:48	10	]
LEAF_NODE	211:49	211:49	8	)
LEAF_NODE	211:50	211:50	6	)
LEAF_NODE	211:51	211:51	4	;
EXPR_STATEMENT	213:1	213:37	3	bp = ( unsigned char * ) tif -> tif_rawcp ;
EXPR	213:1	213:1	4	bp = ( unsigned char * ) tif -> tif_rawcp
ASSIGN	213:1	213:6	5	bp = ( unsigned char * ) tif -> tif_rawcp
LVAL	213:1	213:1	6	bp
FIELD	213:1	213:1	7	bp
LEAF_NODE	213:1	213:1	8	bp
ASSIGN_OP	213:4	213:4	6	=
LEAF_NODE	213:4	213:4	7	=
RVAL	213:6	213:23	6	( unsigned char * ) tif -> tif_rawcp
LEAF_NODE	213:6	213:6	7	(
TYPE_NAME	213:7	213:16	7	unsigned char
LEAF_NODE	213:7	213:7	8	unsigned
LEAF_NODE	213:16	213:16	8	char
LEAF_NODE	213:20	213:20	7	*
LEAF_NODE	213:21	213:21	7	)
FIELD	213:23	213:28	7	tif -> tif_rawcp
LEAF_NODE	213:23	213:23	8	tif
LEAF_NODE	213:26	213:26	8	->
LEAF_NODE	213:28	213:28	8	tif_rawcp
LEAF_NODE	213:37	213:37	4	;
EXPR_STATEMENT	214:1	214:20	3	cc = tif -> tif_rawcc ;
EXPR	214:1	214:1	4	cc = tif -> tif_rawcc
ASSIGN	214:1	214:6	5	cc = tif -> tif_rawcc
LVAL	214:1	214:1	6	cc
FIELD	214:1	214:1	7	cc
LEAF_NODE	214:1	214:1	8	cc
ASSIGN_OP	214:4	214:4	6	=
LEAF_NODE	214:4	214:4	7	=
RVAL	214:6	214:6	6	tif -> tif_rawcc
FIELD	214:6	214:11	7	tif -> tif_rawcc
LEAF_NODE	214:6	214:6	8	tif
LEAF_NODE	214:9	214:9	8	->
LEAF_NODE	214:11	214:11	8	tif_rawcc
LEAF_NODE	214:20	214:20	4	;
ITERATION	216:1	216:37	3	
KEYWORD	216:1	216:1	4	for
LEAF_NODE	216:1	216:1	5	for
LEAF_NODE	216:5	216:5	4	(
FOR_INIT	216:6	216:14	4	shft = 8 ;
EXPR	216:6	216:6	5	shft = 8
ASSIGN	216:6	216:13	6	shft = 8
LVAL	216:6	216:6	7	shft
FIELD	216:6	216:6	8	shft
LEAF_NODE	216:6	216:6	9	shft
ASSIGN_OP	216:11	216:11	7	=
LEAF_NODE	216:11	216:11	8	=
RVAL	216:13	216:13	7	8
FIELD	216:13	216:13	8	8
LEAF_NODE	216:13	216:13	9	8
LEAF_NODE	216:14	216:14	5	;
CONDITION	216:16	216:16	4	shft >= 0
EXPR	216:16	216:24	5	shft >= 0
FIELD	216:16	216:16	6	shft
LEAF_NODE	216:16	216:16	7	shft
REL_OPERATOR	216:21	216:21	6	>=
LEAF_NODE	216:21	216:21	7	>=
FIELD	216:24	216:24	6	0
LEAF_NODE	216:24	216:24	7	0
LEAF_NODE	216:25	216:25	4	;
FOR_EXPR	216:27	216:27	4	shft -= 8
EXPR	216:27	216:27	5	shft -= 8
ASSIGN	216:27	216:34	6	shft -= 8
LVAL	216:27	216:27	7	shft
FIELD	216:27	216:27	8	shft
LEAF_NODE	216:27	216:27	9	shft
ASSIGN_OP	216:32	216:32	7	-=
LEAF_NODE	216:32	216:32	8	-=
RVAL	216:34	216:34	7	8
FIELD	216:34	216:34	8	8
LEAF_NODE	216:34	216:34	9	8
LEAF_NODE	216:35	216:35	4	)
STATEMENTS	216:37	248:1	4	
LEAF_NODE	216:37	216:37	5	{
STATEMENTS	217:2	232:2	5	
ITERATION	217:2	217:39	6	
KEYWORD	217:2	217:2	7	for
LEAF_NODE	217:2	217:2	8	for
LEAF_NODE	217:6	217:6	7	(
FOR_INIT	217:7	217:12	7	i = 0 ;
EXPR	217:7	217:7	8	i = 0
ASSIGN	217:7	217:11	9	i = 0
LVAL	217:7	217:7	10	i
FIELD	217:7	217:7	11	i
LEAF_NODE	217:7	217:7	12	i
ASSIGN_OP	217:9	217:9	10	=
LEAF_NODE	217:9	217:9	11	=
RVAL	217:11	217:11	10	0
FIELD	217:11	217:11	11	0
LEAF_NODE	217:11	217:11	12	0
LEAF_NODE	217:12	217:12	8	;
CONDITION	217:14	217:14	7	i < npixels && cc > 0
EXPR	217:14	217:14	8	i < npixels && cc > 0
AND	217:14	217:29	9	i < npixels && cc > 0
EXPR	217:14	217:18	10	i < npixels
FIELD	217:14	217:14	11	i
LEAF_NODE	217:14	217:14	12	i
REL_OPERATOR	217:16	217:16	11	<
LEAF_NODE	217:16	217:16	12	<
FIELD	217:18	217:18	11	npixels
LEAF_NODE	217:18	217:18	12	npixels
LEAF_NODE	217:26	217:26	10	&&
EXPR	217:29	217:34	10	cc > 0
FIELD	217:29	217:29	11	cc
LEAF_NODE	217:29	217:29	12	cc
REL_OPERATOR	217:32	217:32	11	>
LEAF_NODE	217:32	217:32	12	>
FIELD	217:34	217:34	11	0
LEAF_NODE	217:34	217:34	12	0
LEAF_NODE	217:35	217:35	7	;
LEAF_NODE	0:0	0:0	7	FOR_EXPR
LEAF_NODE	217:37	217:37	7	)
STATEMENTS	217:39	231:2	7	
LEAF_NODE	217:39	217:39	8	{
STATEMENTS	218:3	226:5	8	
SELECTION	218:3	218:19	9	
KEYWORD	218:3	218:3	10	if
LEAF_NODE	218:3	218:3	11	if
LEAF_NODE	218:6	218:6	10	(
CONDITION	218:7	218:7	10	* bp >= 128
EXPR	218:7	218:14	11	* bp >= 128
UNARY_EXPR	218:7	218:8	12	* bp
UNARY_OPERATOR	218:7	218:7	13	*
LEAF_NODE	218:7	218:7	14	*
FIELD	218:8	218:8	13	bp
LEAF_NODE	218:8	218:8	14	bp
REL_OPERATOR	218:11	218:11	12	>=
LEAF_NODE	218:11	218:11	13	>=
FIELD	218:14	218:14	12	128
LEAF_NODE	218:14	218:14	13	128
LEAF_NODE	218:17	218:17	10	)
STATEMENTS	218:19	226:3	10	
LEAF_NODE	218:19	218:19	11	{
STATEMENTS	219:4	224:4	11	
SELECTION	219:4	220:5	12	
KEYWORD	219:4	219:4	13	if
LEAF_NODE	219:4	219:4	14	if
LEAF_NODE	219:6	219:6	13	(
CONDITION	219:8	219:8	13	cc < 2
EXPR	219:8	219:13	14	cc < 2
FIELD	219:8	219:8	15	cc
LEAF_NODE	219:8	219:8	16	cc
REL_OPERATOR	219:11	219:11	15	<
LEAF_NODE	219:11	219:11	16	<
FIELD	219:13	219:13	15	2
LEAF_NODE	219:13	219:13	16	2
LEAF_NODE	219:15	219:15	13	)
STATEMENTS	220:5	220:5	13	
JUMP_STATEMENT	220:5	220:10	14	break DESTINATION ;
KEYWORD	220:5	220:5	15	break
LEAF_NODE	220:5	220:5	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	220:10	220:10	15	;
EXPR_STATEMENT	221:4	221:24	12	rc = * bp ++ + ( 2 - 128 ) ;
EXPR	221:4	221:4	13	rc = * bp ++ + ( 2 - 128 )
ASSIGN	221:4	221:9	14	rc = * bp ++ + ( 2 - 128 )
LVAL	221:4	221:4	15	rc
FIELD	221:4	221:4	16	rc
LEAF_NODE	221:4	221:4	17	rc
ASSIGN_OP	221:7	221:7	15	=
LEAF_NODE	221:7	221:7	16	=
RVAL	221:9	221:23	15	* bp ++ + ( 2 - 128 )
UNARY_EXPR	221:9	221:10	16	* bp ++
UNARY_OPERATOR	221:9	221:9	17	*
LEAF_NODE	221:9	221:9	18	*
FIELD	221:10	221:12	17	bp ++
LEAF_NODE	221:10	221:10	18	bp
LEAF_NODE	221:12	221:12	18	++
LEAF_NODE	221:15	221:15	16	+
LEAF_NODE	221:17	221:17	16	(
FIELD	221:18	221:18	16	2
LEAF_NODE	221:18	221:18	17	2
LEAF_NODE	221:19	221:19	16	-
FIELD	221:20	221:20	16	128
LEAF_NODE	221:20	221:20	17	128
LEAF_NODE	221:23	221:23	16	)
LEAF_NODE	221:24	221:24	13	;
EXPR_STATEMENT	222:4	222:30	12	b = ( int16 ) ( * bp ++ << shft ) ;
EXPR	222:4	222:4	13	b = ( int16 ) ( * bp ++ << shft )
ASSIGN	222:4	222:8	14	b = ( int16 ) ( * bp ++ << shft )
LVAL	222:4	222:4	15	b
FIELD	222:4	222:4	16	b
LEAF_NODE	222:4	222:4	17	b
ASSIGN_OP	222:6	222:6	15	=
LEAF_NODE	222:6	222:6	16	=
RVAL	222:8	222:29	15	( int16 ) ( * bp ++ << shft )
LEAF_NODE	222:8	222:8	16	(
TYPE_NAME	222:9	222:9	16	int16
LEAF_NODE	222:9	222:9	17	int16
LEAF_NODE	222:14	222:14	16	)
LEAF_NODE	222:15	222:15	16	(
UNARY_EXPR	222:16	222:17	16	* bp ++
UNARY_OPERATOR	222:16	222:16	17	*
LEAF_NODE	222:16	222:16	18	*
FIELD	222:17	222:19	17	bp ++
LEAF_NODE	222:17	222:17	18	bp
LEAF_NODE	222:19	222:19	18	++
LEAF_NODE	222:22	222:22	16	<<
FIELD	222:25	222:25	16	shft
LEAF_NODE	222:25	222:25	17	shft
LEAF_NODE	222:29	222:29	16	)
LEAF_NODE	222:30	222:30	13	;
EXPR_STATEMENT	223:4	223:11	12	cc -= 2 ;
EXPR	223:4	223:4	13	cc -= 2
ASSIGN	223:4	223:10	14	cc -= 2
LVAL	223:4	223:4	15	cc
FIELD	223:4	223:4	16	cc
LEAF_NODE	223:4	223:4	17	cc
ASSIGN_OP	223:7	223:7	15	-=
LEAF_NODE	223:7	223:7	16	-=
RVAL	223:10	223:10	15	2
FIELD	223:10	223:10	16	2
LEAF_NODE	223:10	223:10	17	2
LEAF_NODE	223:11	223:11	13	;
ITERATION	224:4	225:5	12	
KEYWORD	224:4	224:4	13	while
LEAF_NODE	224:4	224:4	14	while
LEAF_NODE	224:10	224:10	13	(
CONDITION	224:11	224:11	13	rc -- && i < npixels
EXPR	224:11	224:11	14	rc -- && i < npixels
AND	224:11	224:19	15	rc -- && i < npixels
EXPR	224:11	224:11	16	rc --
FIELD	224:11	224:13	17	rc --
LEAF_NODE	224:11	224:11	18	rc
LEAF_NODE	224:13	224:13	18	--
LEAF_NODE	224:16	224:16	16	&&
EXPR	224:19	224:23	16	i < npixels
FIELD	224:19	224:19	17	i
LEAF_NODE	224:19	224:19	18	i
REL_OPERATOR	224:21	224:21	17	<
LEAF_NODE	224:21	224:21	18	<
FIELD	224:23	224:23	17	npixels
LEAF_NODE	224:23	224:23	18	npixels
LEAF_NODE	224:30	224:30	13	)
STATEMENTS	225:5	225:5	13	
EXPR_STATEMENT	225:5	225:17	14	tp [ i ++ ] |= b ;
EXPR	225:5	225:5	15	tp [ i ++ ] |= b
ASSIGN	225:5	225:16	16	tp [ i ++ ] |= b
LVAL	225:5	225:5	17	tp [ i ++ ]
FIELD	225:5	225:11	18	tp [ i ++ ]
LEAF_NODE	225:5	225:5	19	tp
LEAF_NODE	225:7	225:7	19	[
EXPR	225:8	225:8	19	i ++
FIELD	225:8	225:9	20	i ++
LEAF_NODE	225:8	225:8	21	i
LEAF_NODE	225:9	225:9	21	++
LEAF_NODE	225:11	225:11	19	]
ASSIGN_OP	225:13	225:13	17	|=
LEAF_NODE	225:13	225:13	18	|=
RVAL	225:16	225:16	17	b
FIELD	225:16	225:16	18	b
LEAF_NODE	225:16	225:16	19	b
LEAF_NODE	225:17	225:17	15	;
LEAF_NODE	226:3	226:3	11	}
SELECTION	226:5	226:10	9	
KEYWORD	226:5	226:5	10	else
LEAF_NODE	226:5	226:5	11	else
STATEMENTS	226:10	230:3	10	
LEAF_NODE	226:10	226:10	11	{
STATEMENTS	227:4	228:4	11	
EXPR_STATEMENT	227:4	227:14	12	rc = * bp ++ ;
EXPR	227:4	227:4	13	rc = * bp ++
ASSIGN	227:4	227:9	14	rc = * bp ++
LVAL	227:4	227:4	15	rc
FIELD	227:4	227:4	16	rc
LEAF_NODE	227:4	227:4	17	rc
ASSIGN_OP	227:7	227:7	15	=
LEAF_NODE	227:7	227:7	16	=
RVAL	227:9	227:9	15	* bp ++
UNARY_EXPR	227:9	227:10	16	* bp ++
UNARY_OPERATOR	227:9	227:9	17	*
LEAF_NODE	227:9	227:9	18	*
FIELD	227:10	227:12	17	bp ++
LEAF_NODE	227:10	227:10	18	bp
LEAF_NODE	227:12	227:12	18	++
LEAF_NODE	227:14	227:14	13	;
ITERATION	228:4	229:5	12	
KEYWORD	228:4	228:4	13	while
LEAF_NODE	228:4	228:4	14	while
LEAF_NODE	228:10	228:10	13	(
CONDITION	228:11	228:11	13	-- cc && rc -- && i < npixels
EXPR	228:11	228:11	14	-- cc && rc -- && i < npixels
AND	228:11	228:19	15	-- cc && rc -- && i < npixels
EXPR	228:11	228:13	16	-- cc
LEAF_NODE	228:11	228:11	17	--
FIELD	228:13	228:13	17	cc
LEAF_NODE	228:13	228:13	18	cc
LEAF_NODE	228:16	228:16	16	&&
EXPR	228:19	228:19	16	rc -- && i < npixels
AND	228:19	228:27	17	rc -- && i < npixels
EXPR	228:19	228:19	18	rc --
FIELD	228:19	228:21	19	rc --
LEAF_NODE	228:19	228:19	20	rc
LEAF_NODE	228:21	228:21	20	--
LEAF_NODE	228:24	228:24	18	&&
EXPR	228:27	228:31	18	i < npixels
FIELD	228:27	228:27	19	i
LEAF_NODE	228:27	228:27	20	i
REL_OPERATOR	228:29	228:29	19	<
LEAF_NODE	228:29	228:29	20	<
FIELD	228:31	228:31	19	npixels
LEAF_NODE	228:31	228:31	20	npixels
LEAF_NODE	228:38	228:38	13	)
STATEMENTS	229:5	229:5	13	
EXPR_STATEMENT	229:5	229:36	14	tp [ i ++ ] |= ( int16 ) * bp ++ << shft ;
EXPR	229:5	229:5	15	tp [ i ++ ] |= ( int16 ) * bp ++ << shft
ASSIGN	229:5	229:16	16	tp [ i ++ ] |= ( int16 ) * bp ++ << shft
LVAL	229:5	229:5	17	tp [ i ++ ]
FIELD	229:5	229:11	18	tp [ i ++ ]
LEAF_NODE	229:5	229:5	19	tp
LEAF_NODE	229:7	229:7	19	[
EXPR	229:8	229:8	19	i ++
FIELD	229:8	229:9	20	i ++
LEAF_NODE	229:8	229:8	21	i
LEAF_NODE	229:9	229:9	21	++
LEAF_NODE	229:11	229:11	19	]
ASSIGN_OP	229:13	229:13	17	|=
LEAF_NODE	229:13	229:13	18	|=
RVAL	229:16	229:32	17	( int16 ) * bp ++ << shft
LEAF_NODE	229:16	229:16	18	(
TYPE_NAME	229:17	229:17	18	int16
LEAF_NODE	229:17	229:17	19	int16
LEAF_NODE	229:22	229:22	18	)
UNARY_EXPR	229:23	229:24	18	* bp ++
UNARY_OPERATOR	229:23	229:23	19	*
LEAF_NODE	229:23	229:23	20	*
FIELD	229:24	229:26	19	bp ++
LEAF_NODE	229:24	229:24	20	bp
LEAF_NODE	229:26	229:26	20	++
LEAF_NODE	229:29	229:29	18	<<
FIELD	229:32	229:32	18	shft
LEAF_NODE	229:32	229:32	19	shft
LEAF_NODE	229:36	229:36	15	;
LEAF_NODE	230:3	230:3	11	}
LEAF_NODE	231:2	231:2	8	}
SELECTION	232:2	232:20	6	
KEYWORD	232:2	232:2	7	if
LEAF_NODE	232:2	232:2	8	if
LEAF_NODE	232:5	232:5	7	(
CONDITION	232:6	232:6	7	i != npixels
EXPR	232:6	232:11	8	i != npixels
FIELD	232:6	232:6	9	i
LEAF_NODE	232:6	232:6	10	i
EQ_OPERATOR	232:8	232:8	9	!=
LEAF_NODE	232:8	232:8	10	!=
FIELD	232:11	232:11	9	npixels
LEAF_NODE	232:11	232:11	10	npixels
LEAF_NODE	232:18	232:18	7	)
STATEMENTS	232:20	247:2	7	
LEAF_NODE	232:20	232:20	8	{
STATEMENTS	234:3	246:3	8	
EXPR_STATEMENT	234:3	237:42	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at row %lu (short %I64d pixels)" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) ( npixels - i ) ) ;
EXPR	234:3	234:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at row %lu (short %I64d pixels)" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) ( npixels - i ) )
FUNCTION_CALL	234:3	237:41	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at row %lu (short %I64d pixels)" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) ( npixels - i ) )
CALLEE	234:3	234:3	12	TIFFErrorExt
LEAF_NODE	234:3	234:3	13	TIFFErrorExt
LEAF_NODE	234:15	234:15	12	(
ARGUMENT	234:16	234:16	12	tif -> tif_clientdata
FIELD	234:16	234:21	13	tif -> tif_clientdata
LEAF_NODE	234:16	234:16	14	tif
LEAF_NODE	234:19	234:19	14	->
LEAF_NODE	234:21	234:21	14	tif_clientdata
LEAF_NODE	234:35	234:35	12	,
ARGUMENT	234:37	234:37	12	module
FIELD	234:37	234:37	13	module
LEAF_NODE	234:37	234:37	14	module
LEAF_NODE	234:43	234:43	12	,
ARGUMENT	235:7	235:7	12	"Not enough data at row %lu (short %I64d pixels)"
FIELD	235:7	235:7	13	"Not enough data at row %lu (short %I64d pixels)"
LEAF_NODE	235:7	235:7	14	"Not enough data at row %lu (short %I64d pixels)"
LEAF_NODE	235:56	235:56	12	,
ARGUMENT	236:9	236:25	12	( unsigned long ) tif -> tif_row
LEAF_NODE	236:9	236:9	13	(
TYPE_NAME	236:10	236:19	13	unsigned long
LEAF_NODE	236:10	236:10	14	unsigned
LEAF_NODE	236:19	236:19	14	long
LEAF_NODE	236:23	236:23	13	)
FIELD	236:25	236:30	13	tif -> tif_row
LEAF_NODE	236:25	236:25	14	tif
LEAF_NODE	236:28	236:28	14	->
LEAF_NODE	236:30	236:30	14	tif_row
LEAF_NODE	236:37	236:37	12	,
ARGUMENT	237:9	237:40	12	( unsigned __int64 ) ( npixels - i )
LEAF_NODE	237:9	237:9	13	(
TYPE_NAME	237:10	237:19	13	unsigned __int64
LEAF_NODE	237:10	237:10	14	unsigned
LEAF_NODE	237:19	237:19	14	__int64
LEAF_NODE	237:26	237:26	13	)
LEAF_NODE	237:28	237:28	13	(
FIELD	237:29	237:29	13	npixels
LEAF_NODE	237:29	237:29	14	npixels
LEAF_NODE	237:37	237:37	13	-
FIELD	237:39	237:39	13	i
LEAF_NODE	237:39	237:39	14	i
LEAF_NODE	237:40	237:40	13	)
LEAF_NODE	237:41	237:41	12	)
LEAF_NODE	237:42	237:42	10	;
LEAF_NODE	239:3	239:3	9	TIFFErrorExt
LEAF_NODE	239:15	239:15	9	(
LEAF_NODE	239:16	239:16	9	tif
LEAF_NODE	239:19	239:19	9	->
LEAF_NODE	239:21	239:21	9	tif_clientdata
LEAF_NODE	239:35	239:35	9	,
LEAF_NODE	239:37	239:37	9	module
LEAF_NODE	239:43	239:43	9	,
LEAF_NODE	240:7	240:7	9	"Not enough data at row %lu (short %llu pixels)"
LEAF_NODE	240:55	240:55	9	,
LEAF_NODE	241:9	241:9	9	(
LEAF_NODE	241:10	241:10	9	unsigned
LEAF_NODE	241:19	241:19	9	long
LEAF_NODE	241:23	241:23	9	)
LEAF_NODE	241:25	241:25	9	tif
LEAF_NODE	241:28	241:28	9	->
LEAF_NODE	241:30	241:30	9	tif_row
LEAF_NODE	241:37	241:37	9	,
LEAF_NODE	242:9	242:9	9	(
LEAF_NODE	242:10	242:10	9	unsigned
LEAF_NODE	242:19	242:19	9	long
LEAF_NODE	242:24	242:24	9	long
LEAF_NODE	242:28	242:28	9	)
LEAF_NODE	242:30	242:30	9	(
LEAF_NODE	242:31	242:31	9	npixels
LEAF_NODE	242:39	242:39	9	-
LEAF_NODE	242:41	242:41	9	i
LEAF_NODE	242:42	242:42	9	)
LEAF_NODE	242:43	242:43	9	)
LEAF_NODE	242:44	242:44	9	;
EXPR_STATEMENT	244:3	244:31	9	tif -> tif_rawcp = ( uint8 * ) bp ;
EXPR	244:3	244:3	10	tif -> tif_rawcp = ( uint8 * ) bp
ASSIGN	244:3	244:20	11	tif -> tif_rawcp = ( uint8 * ) bp
LVAL	244:3	244:3	12	tif -> tif_rawcp
FIELD	244:3	244:8	13	tif -> tif_rawcp
LEAF_NODE	244:3	244:3	14	tif
LEAF_NODE	244:6	244:6	14	->
LEAF_NODE	244:8	244:8	14	tif_rawcp
ASSIGN_OP	244:18	244:18	12	=
LEAF_NODE	244:18	244:18	13	=
RVAL	244:20	244:29	12	( uint8 * ) bp
LEAF_NODE	244:20	244:20	13	(
TYPE_NAME	244:21	244:21	13	uint8
LEAF_NODE	244:21	244:21	14	uint8
LEAF_NODE	244:26	244:26	13	*
LEAF_NODE	244:27	244:27	13	)
FIELD	244:29	244:29	13	bp
LEAF_NODE	244:29	244:29	14	bp
LEAF_NODE	244:31	244:31	10	;
EXPR_STATEMENT	245:3	245:22	9	tif -> tif_rawcc = cc ;
EXPR	245:3	245:3	10	tif -> tif_rawcc = cc
ASSIGN	245:3	245:20	11	tif -> tif_rawcc = cc
LVAL	245:3	245:3	12	tif -> tif_rawcc
FIELD	245:3	245:8	13	tif -> tif_rawcc
LEAF_NODE	245:3	245:3	14	tif
LEAF_NODE	245:6	245:6	14	->
LEAF_NODE	245:8	245:8	14	tif_rawcc
ASSIGN_OP	245:18	245:18	12	=
LEAF_NODE	245:18	245:18	13	=
RVAL	245:20	245:20	12	cc
FIELD	245:20	245:20	13	cc
LEAF_NODE	245:20	245:20	14	cc
LEAF_NODE	245:22	245:22	10	;
JUMP_STATEMENT	246:3	246:13	9	return ( 0 ) ;
KEYWORD	246:3	246:3	10	return
LEAF_NODE	246:3	246:3	11	return
DESTINATION	246:10	246:10	10	( 0 )
EXPR	246:10	246:12	11	( 0 )
LEAF_NODE	246:10	246:10	12	(
FIELD	246:11	246:11	12	0
LEAF_NODE	246:11	246:11	13	0
LEAF_NODE	246:12	246:12	12	)
LEAF_NODE	246:13	246:13	10	;
LEAF_NODE	247:2	247:2	8	}
LEAF_NODE	248:1	248:1	5	}
EXPR_STATEMENT	249:1	249:30	3	( * sp -> tfunc ) ( sp , op , npixels ) ;
EXPR	249:1	249:1	4	( * sp -> tfunc ) ( sp , op , npixels )
FUNCTION_CALL	249:1	249:29	5	( * sp -> tfunc ) ( sp , op , npixels )
CALLEE	249:1	249:12	6	( * sp -> tfunc )
LEAF_NODE	249:1	249:1	7	(
UNARY_EXPR	249:2	249:3	7	* sp -> tfunc
UNARY_OPERATOR	249:2	249:2	8	*
LEAF_NODE	249:2	249:2	9	*
FIELD	249:3	249:7	8	sp -> tfunc
LEAF_NODE	249:3	249:3	9	sp
LEAF_NODE	249:5	249:5	9	->
LEAF_NODE	249:7	249:7	9	tfunc
LEAF_NODE	249:12	249:12	7	)
LEAF_NODE	249:13	249:13	6	(
ARGUMENT	249:14	249:14	6	sp
FIELD	249:14	249:14	7	sp
LEAF_NODE	249:14	249:14	8	sp
LEAF_NODE	249:16	249:16	6	,
ARGUMENT	249:18	249:18	6	op
FIELD	249:18	249:18	7	op
LEAF_NODE	249:18	249:18	8	op
LEAF_NODE	249:20	249:20	6	,
ARGUMENT	249:22	249:22	6	npixels
FIELD	249:22	249:22	7	npixels
LEAF_NODE	249:22	249:22	8	npixels
LEAF_NODE	249:29	249:29	6	)
LEAF_NODE	249:30	249:30	4	;
EXPR_STATEMENT	250:1	250:29	3	tif -> tif_rawcp = ( uint8 * ) bp ;
EXPR	250:1	250:1	4	tif -> tif_rawcp = ( uint8 * ) bp
ASSIGN	250:1	250:18	5	tif -> tif_rawcp = ( uint8 * ) bp
LVAL	250:1	250:1	6	tif -> tif_rawcp
FIELD	250:1	250:6	7	tif -> tif_rawcp
LEAF_NODE	250:1	250:1	8	tif
LEAF_NODE	250:4	250:4	8	->
LEAF_NODE	250:6	250:6	8	tif_rawcp
ASSIGN_OP	250:16	250:16	6	=
LEAF_NODE	250:16	250:16	7	=
RVAL	250:18	250:27	6	( uint8 * ) bp
LEAF_NODE	250:18	250:18	7	(
TYPE_NAME	250:19	250:19	7	uint8
LEAF_NODE	250:19	250:19	8	uint8
LEAF_NODE	250:24	250:24	7	*
LEAF_NODE	250:25	250:25	7	)
FIELD	250:27	250:27	7	bp
LEAF_NODE	250:27	250:27	8	bp
LEAF_NODE	250:29	250:29	4	;
EXPR_STATEMENT	251:1	251:20	3	tif -> tif_rawcc = cc ;
EXPR	251:1	251:1	4	tif -> tif_rawcc = cc
ASSIGN	251:1	251:18	5	tif -> tif_rawcc = cc
LVAL	251:1	251:1	6	tif -> tif_rawcc
FIELD	251:1	251:6	7	tif -> tif_rawcc
LEAF_NODE	251:1	251:1	8	tif
LEAF_NODE	251:4	251:4	8	->
LEAF_NODE	251:6	251:6	8	tif_rawcc
ASSIGN_OP	251:16	251:16	6	=
LEAF_NODE	251:16	251:16	7	=
RVAL	251:18	251:18	6	cc
FIELD	251:18	251:18	7	cc
LEAF_NODE	251:18	251:18	8	cc
LEAF_NODE	251:20	251:20	4	;
JUMP_STATEMENT	252:1	252:11	3	return ( 1 ) ;
KEYWORD	252:1	252:1	4	return
LEAF_NODE	252:1	252:1	5	return
DESTINATION	252:8	252:8	4	( 1 )
EXPR	252:8	252:10	5	( 1 )
LEAF_NODE	252:8	252:8	6	(
FIELD	252:9	252:9	6	1
LEAF_NODE	252:9	252:9	7	1
LEAF_NODE	252:10	252:10	6	)
LEAF_NODE	252:11	252:11	4	;
LEAF_NODE	253:0	253:0	2	}
FUNCTION_DEF	258:0	310:0	1	
RETURN_TYPE	258:0	258:7	2	static int
LEAF_NODE	258:0	258:0	3	static
TYPE_NAME	258:7	258:7	3	int
LEAF_NODE	258:7	258:7	4	int
FUNCTION_NAME	259:0	259:0	2	LogLuvDecode24
LEAF_NODE	259:0	259:0	3	LogLuvDecode24
PARAMETER_LIST	259:14	259:59	2	( TIFF * tif , uint8 * op , tmsize_t occ , uint16 s )
LEAF_NODE	259:14	259:14	3	(
PARAMETER_DECL	259:15	259:21	3	TIFF * tif
TYPE	259:15	259:19	4	TIFF *
TYPE_NAME	259:15	259:15	5	TIFF
LEAF_NODE	259:15	259:15	6	TIFF
POINTER	259:19	259:19	5	*
LEAF_NODE	259:19	259:19	6	*
NAME	259:21	259:21	4	tif
LEAF_NODE	259:21	259:21	5	tif
LEAF_NODE	259:24	259:24	3	,
PARAMETER_DECL	259:26	259:33	3	uint8 * op
TYPE	259:26	259:31	4	uint8 *
TYPE_NAME	259:26	259:26	5	uint8
LEAF_NODE	259:26	259:26	6	uint8
POINTER	259:31	259:31	5	*
LEAF_NODE	259:31	259:31	6	*
NAME	259:33	259:33	4	op
LEAF_NODE	259:33	259:33	5	op
LEAF_NODE	259:35	259:35	3	,
PARAMETER_DECL	259:37	259:46	3	tmsize_t occ
TYPE	259:37	259:37	4	tmsize_t
TYPE_NAME	259:37	259:37	5	tmsize_t
LEAF_NODE	259:37	259:37	6	tmsize_t
NAME	259:46	259:46	4	occ
LEAF_NODE	259:46	259:46	5	occ
LEAF_NODE	259:49	259:49	3	,
PARAMETER_DECL	259:51	259:58	3	uint16 s
TYPE	259:51	259:51	4	uint16
TYPE_NAME	259:51	259:51	5	uint16
LEAF_NODE	259:51	259:51	6	uint16
NAME	259:58	259:58	4	s
LEAF_NODE	259:58	259:58	5	s
LEAF_NODE	259:59	259:59	3	)
LEAF_NODE	260:0	260:0	2	{
STATEMENTS	261:1	309:1	2	
LEAF_NODE	261:1	261:1	3	static
SIMPLE_DECL	261:8	261:46	3	const char [ ] module ; module = "LogLuvDecode24" ;
VAR_DECL	261:8	261:19	4	const char [ ] module ; module = "LogLuvDecode24"
TYPE	261:8	261:25	5	const char [ ]
TYPE_NAME	261:8	261:14	6	const char
LEAF_NODE	261:8	261:8	7	const
LEAF_NODE	261:14	261:14	7	char
TYPE_SUFFIX	261:25	261:26	6	[ ]
LEAF_NODE	261:25	261:25	7	[
LEAF_NODE	261:26	261:26	7	]
NAME	261:19	261:19	5	module
LEAF_NODE	261:19	261:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	261:19	261:19	5	module = "LogLuvDecode24"
ASSIGN	261:19	261:30	6	module = "LogLuvDecode24"
LVAL	261:19	261:19	7	module
NAME	261:19	261:19	8	module
LEAF_NODE	261:19	261:19	9	module
ASSIGN_OP	261:28	261:28	7	=
LEAF_NODE	261:28	261:28	8	=
RVAL	261:30	261:30	7	"LogLuvDecode24"
FIELD	261:30	261:30	8	"LogLuvDecode24"
LEAF_NODE	261:30	261:30	9	"LogLuvDecode24"
LEAF_NODE	261:46	261:46	4	;
SIMPLE_DECL	262:1	262:36	3	LogLuvState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	262:1	262:14	4	LogLuvState * sp ; sp = DecoderState ( tif )
TYPE	262:1	262:12	5	LogLuvState *
TYPE_NAME	262:1	262:1	6	LogLuvState
LEAF_NODE	262:1	262:1	7	LogLuvState
POINTER	262:12	262:12	6	*
LEAF_NODE	262:12	262:12	7	*
NAME	262:14	262:14	5	sp
LEAF_NODE	262:14	262:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	262:14	262:14	5	sp = DecoderState ( tif )
ASSIGN	262:14	262:19	6	sp = DecoderState ( tif )
LVAL	262:14	262:14	7	sp
NAME	262:14	262:14	8	sp
LEAF_NODE	262:14	262:14	9	sp
ASSIGN_OP	262:17	262:17	7	=
LEAF_NODE	262:17	262:17	8	=
RVAL	262:19	262:19	7	DecoderState ( tif )
FUNCTION_CALL	262:19	262:35	8	DecoderState ( tif )
CALLEE	262:19	262:19	9	DecoderState
LEAF_NODE	262:19	262:19	10	DecoderState
LEAF_NODE	262:31	262:31	9	(
ARGUMENT	262:32	262:32	9	tif
FIELD	262:32	262:32	10	tif
LEAF_NODE	262:32	262:32	11	tif
LEAF_NODE	262:35	262:35	9	)
LEAF_NODE	262:36	262:36	4	;
SIMPLE_DECL	263:1	263:12	3	tmsize_t cc ;
VAR_DECL	263:1	263:10	4	tmsize_t cc
TYPE	263:1	263:1	5	tmsize_t
TYPE_NAME	263:1	263:1	6	tmsize_t
LEAF_NODE	263:1	263:1	7	tmsize_t
NAME	263:10	263:10	5	cc
LEAF_NODE	263:10	263:10	6	cc
LEAF_NODE	263:12	263:12	4	;
SIMPLE_DECL	264:1	264:11	3	tmsize_t i ;
VAR_DECL	264:1	264:10	4	tmsize_t i
TYPE	264:1	264:1	5	tmsize_t
TYPE_NAME	264:1	264:1	6	tmsize_t
LEAF_NODE	264:1	264:1	7	tmsize_t
NAME	264:10	264:10	5	i
LEAF_NODE	264:10	264:10	6	i
LEAF_NODE	264:11	264:11	4	;
SIMPLE_DECL	265:1	265:17	3	tmsize_t npixels ;
VAR_DECL	265:1	265:10	4	tmsize_t npixels
TYPE	265:1	265:1	5	tmsize_t
TYPE_NAME	265:1	265:1	6	tmsize_t
LEAF_NODE	265:1	265:1	7	tmsize_t
NAME	265:10	265:10	5	npixels
LEAF_NODE	265:10	265:10	6	npixels
LEAF_NODE	265:17	265:17	4	;
SIMPLE_DECL	266:1	266:18	3	unsigned char * bp ;
VAR_DECL	266:1	266:16	4	unsigned char * bp
TYPE	266:1	266:14	5	unsigned char *
TYPE_NAME	266:1	266:10	6	unsigned char
LEAF_NODE	266:1	266:1	7	unsigned
LEAF_NODE	266:10	266:10	7	char
POINTER	266:14	266:14	6	*
LEAF_NODE	266:14	266:14	7	*
NAME	266:16	266:16	5	bp
LEAF_NODE	266:16	266:16	6	bp
LEAF_NODE	266:18	266:18	4	;
SIMPLE_DECL	267:1	267:11	3	uint32 * tp ;
VAR_DECL	267:1	267:9	4	uint32 * tp
TYPE	267:1	267:7	5	uint32 *
TYPE_NAME	267:1	267:1	6	uint32
LEAF_NODE	267:1	267:1	7	uint32
POINTER	267:7	267:7	6	*
LEAF_NODE	267:7	267:7	7	*
NAME	267:9	267:9	5	tp
LEAF_NODE	267:9	267:9	6	tp
LEAF_NODE	267:11	267:11	4	;
EXPR_STATEMENT	269:1	269:15	3	assert ( s == 0 ) ;
EXPR	269:1	269:1	4	assert ( s == 0 )
FUNCTION_CALL	269:1	269:14	5	assert ( s == 0 )
CALLEE	269:1	269:1	6	assert
LEAF_NODE	269:1	269:1	7	assert
LEAF_NODE	269:7	269:7	6	(
ARGUMENT	269:8	269:13	6	s == 0
FIELD	269:8	269:8	7	s
LEAF_NODE	269:8	269:8	8	s
EQ_OPERATOR	269:10	269:10	7	==
LEAF_NODE	269:10	269:10	8	==
FIELD	269:13	269:13	7	0
LEAF_NODE	269:13	269:13	8	0
LEAF_NODE	269:14	269:14	6	)
LEAF_NODE	269:15	269:15	4	;
EXPR_STATEMENT	270:1	270:19	3	assert ( sp != NULL ) ;
EXPR	270:1	270:1	4	assert ( sp != NULL )
FUNCTION_CALL	270:1	270:18	5	assert ( sp != NULL )
CALLEE	270:1	270:1	6	assert
LEAF_NODE	270:1	270:1	7	assert
LEAF_NODE	270:7	270:7	6	(
ARGUMENT	270:8	270:14	6	sp != NULL
FIELD	270:8	270:8	7	sp
LEAF_NODE	270:8	270:8	8	sp
EQ_OPERATOR	270:11	270:11	7	!=
LEAF_NODE	270:11	270:11	8	!=
FIELD	270:14	270:14	7	NULL
LEAF_NODE	270:14	270:14	8	NULL
LEAF_NODE	270:18	270:18	6	)
LEAF_NODE	270:19	270:19	4	;
EXPR_STATEMENT	272:1	272:31	3	npixels = occ / sp -> pixel_size ;
EXPR	272:1	272:1	4	npixels = occ / sp -> pixel_size
ASSIGN	272:1	272:11	5	npixels = occ / sp -> pixel_size
LVAL	272:1	272:1	6	npixels
FIELD	272:1	272:1	7	npixels
LEAF_NODE	272:1	272:1	8	npixels
ASSIGN_OP	272:9	272:9	6	=
LEAF_NODE	272:9	272:9	7	=
RVAL	272:11	272:17	6	occ / sp -> pixel_size
FIELD	272:11	272:11	7	occ
LEAF_NODE	272:11	272:11	8	occ
LEAF_NODE	272:15	272:15	7	/
FIELD	272:17	272:21	7	sp -> pixel_size
LEAF_NODE	272:17	272:17	8	sp
LEAF_NODE	272:19	272:19	8	->
LEAF_NODE	272:21	272:21	8	pixel_size
LEAF_NODE	272:31	272:31	4	;
SELECTION	274:1	275:2	3	
KEYWORD	274:1	274:1	4	if
LEAF_NODE	274:1	274:1	5	if
LEAF_NODE	274:4	274:4	4	(
CONDITION	274:5	274:5	4	sp -> user_datafmt == SGILOGDATAFMT_RAW
EXPR	274:5	274:25	5	sp -> user_datafmt == SGILOGDATAFMT_RAW
FIELD	274:5	274:9	6	sp -> user_datafmt
LEAF_NODE	274:5	274:5	7	sp
LEAF_NODE	274:7	274:7	7	->
LEAF_NODE	274:9	274:9	7	user_datafmt
EQ_OPERATOR	274:22	274:22	6	==
LEAF_NODE	274:22	274:22	7	==
FIELD	274:25	274:25	6	SGILOGDATAFMT_RAW
LEAF_NODE	274:25	274:25	7	SGILOGDATAFMT_RAW
LEAF_NODE	274:42	274:42	4	)
STATEMENTS	275:2	275:2	4	
EXPR_STATEMENT	275:2	275:19	5	tp = ( uint32 * ) op ;
EXPR	275:2	275:2	6	tp = ( uint32 * ) op
ASSIGN	275:2	275:7	7	tp = ( uint32 * ) op
LVAL	275:2	275:2	8	tp
FIELD	275:2	275:2	9	tp
LEAF_NODE	275:2	275:2	10	tp
ASSIGN_OP	275:5	275:5	8	=
LEAF_NODE	275:5	275:5	9	=
RVAL	275:7	275:17	8	( uint32 * ) op
LEAF_NODE	275:7	275:7	9	(
TYPE_NAME	275:8	275:8	9	uint32
LEAF_NODE	275:8	275:8	10	uint32
LEAF_NODE	275:15	275:15	9	*
LEAF_NODE	275:16	275:16	9	)
FIELD	275:17	275:17	9	op
LEAF_NODE	275:17	275:17	10	op
LEAF_NODE	275:19	275:19	6	;
SELECTION	276:1	276:6	3	
KEYWORD	276:1	276:1	4	else
LEAF_NODE	276:1	276:1	5	else
STATEMENTS	276:6	283:1	4	
LEAF_NODE	276:6	276:6	5	{
STATEMENTS	277:2	282:2	5	
SELECTION	277:2	277:28	6	
KEYWORD	277:2	277:2	7	if
LEAF_NODE	277:2	277:2	8	if
LEAF_NODE	277:4	277:4	7	(
CONDITION	277:5	277:5	7	sp -> tbuflen < npixels
EXPR	277:5	277:19	8	sp -> tbuflen < npixels
FIELD	277:5	277:9	9	sp -> tbuflen
LEAF_NODE	277:5	277:5	10	sp
LEAF_NODE	277:7	277:7	10	->
LEAF_NODE	277:9	277:9	10	tbuflen
REL_OPERATOR	277:17	277:17	9	<
LEAF_NODE	277:17	277:17	10	<
FIELD	277:19	277:19	9	npixels
LEAF_NODE	277:19	277:19	10	npixels
LEAF_NODE	277:26	277:26	7	)
STATEMENTS	277:28	281:2	7	
LEAF_NODE	277:28	277:28	8	{
STATEMENTS	278:3	280:3	8	
EXPR_STATEMENT	278:3	279:38	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" ) ;
EXPR	278:3	278:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
FUNCTION_CALL	278:3	279:37	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
CALLEE	278:3	278:3	12	TIFFErrorExt
LEAF_NODE	278:3	278:3	13	TIFFErrorExt
LEAF_NODE	278:15	278:15	12	(
ARGUMENT	278:16	278:16	12	tif -> tif_clientdata
FIELD	278:16	278:21	13	tif -> tif_clientdata
LEAF_NODE	278:16	278:16	14	tif
LEAF_NODE	278:19	278:19	14	->
LEAF_NODE	278:21	278:21	14	tif_clientdata
LEAF_NODE	278:35	278:35	12	,
ARGUMENT	278:37	278:37	12	module
FIELD	278:37	278:37	13	module
LEAF_NODE	278:37	278:37	14	module
LEAF_NODE	278:43	278:43	12	,
ARGUMENT	279:7	279:7	12	"Translation buffer too short"
FIELD	279:7	279:7	13	"Translation buffer too short"
LEAF_NODE	279:7	279:7	14	"Translation buffer too short"
LEAF_NODE	279:37	279:37	12	)
LEAF_NODE	279:38	279:38	10	;
JUMP_STATEMENT	280:3	280:13	9	return ( 0 ) ;
KEYWORD	280:3	280:3	10	return
LEAF_NODE	280:3	280:3	11	return
DESTINATION	280:10	280:10	10	( 0 )
EXPR	280:10	280:12	11	( 0 )
LEAF_NODE	280:10	280:10	12	(
FIELD	280:11	280:11	12	0
LEAF_NODE	280:11	280:11	13	0
LEAF_NODE	280:12	280:12	12	)
LEAF_NODE	280:13	280:13	10	;
LEAF_NODE	281:2	281:2	8	}
EXPR_STATEMENT	282:2	282:26	6	tp = ( uint32 * ) sp -> tbuf ;
EXPR	282:2	282:2	7	tp = ( uint32 * ) sp -> tbuf
ASSIGN	282:2	282:7	8	tp = ( uint32 * ) sp -> tbuf
LVAL	282:2	282:2	9	tp
FIELD	282:2	282:2	10	tp
LEAF_NODE	282:2	282:2	11	tp
ASSIGN_OP	282:5	282:5	9	=
LEAF_NODE	282:5	282:5	10	=
RVAL	282:7	282:18	9	( uint32 * ) sp -> tbuf
LEAF_NODE	282:7	282:7	10	(
TYPE_NAME	282:8	282:8	10	uint32
LEAF_NODE	282:8	282:8	11	uint32
LEAF_NODE	282:15	282:15	10	*
LEAF_NODE	282:16	282:16	10	)
FIELD	282:18	282:22	10	sp -> tbuf
LEAF_NODE	282:18	282:18	11	sp
LEAF_NODE	282:20	282:20	11	->
LEAF_NODE	282:22	282:22	11	tbuf
LEAF_NODE	282:26	282:26	7	;
LEAF_NODE	283:1	283:1	5	}
EXPR_STATEMENT	285:1	285:37	3	bp = ( unsigned char * ) tif -> tif_rawcp ;
EXPR	285:1	285:1	4	bp = ( unsigned char * ) tif -> tif_rawcp
ASSIGN	285:1	285:6	5	bp = ( unsigned char * ) tif -> tif_rawcp
LVAL	285:1	285:1	6	bp
FIELD	285:1	285:1	7	bp
LEAF_NODE	285:1	285:1	8	bp
ASSIGN_OP	285:4	285:4	6	=
LEAF_NODE	285:4	285:4	7	=
RVAL	285:6	285:23	6	( unsigned char * ) tif -> tif_rawcp
LEAF_NODE	285:6	285:6	7	(
TYPE_NAME	285:7	285:16	7	unsigned char
LEAF_NODE	285:7	285:7	8	unsigned
LEAF_NODE	285:16	285:16	8	char
LEAF_NODE	285:20	285:20	7	*
LEAF_NODE	285:21	285:21	7	)
FIELD	285:23	285:28	7	tif -> tif_rawcp
LEAF_NODE	285:23	285:23	8	tif
LEAF_NODE	285:26	285:26	8	->
LEAF_NODE	285:28	285:28	8	tif_rawcp
LEAF_NODE	285:37	285:37	4	;
EXPR_STATEMENT	286:1	286:20	3	cc = tif -> tif_rawcc ;
EXPR	286:1	286:1	4	cc = tif -> tif_rawcc
ASSIGN	286:1	286:6	5	cc = tif -> tif_rawcc
LVAL	286:1	286:1	6	cc
FIELD	286:1	286:1	7	cc
LEAF_NODE	286:1	286:1	8	cc
ASSIGN_OP	286:4	286:4	6	=
LEAF_NODE	286:4	286:4	7	=
RVAL	286:6	286:6	6	tif -> tif_rawcc
FIELD	286:6	286:11	7	tif -> tif_rawcc
LEAF_NODE	286:6	286:6	8	tif
LEAF_NODE	286:9	286:9	8	->
LEAF_NODE	286:11	286:11	8	tif_rawcc
LEAF_NODE	286:20	286:20	4	;
ITERATION	287:1	287:42	3	
KEYWORD	287:1	287:1	4	for
LEAF_NODE	287:1	287:1	5	for
LEAF_NODE	287:5	287:5	4	(
FOR_INIT	287:6	287:11	4	i = 0 ;
EXPR	287:6	287:6	5	i = 0
ASSIGN	287:6	287:10	6	i = 0
LVAL	287:6	287:6	7	i
FIELD	287:6	287:6	8	i
LEAF_NODE	287:6	287:6	9	i
ASSIGN_OP	287:8	287:8	7	=
LEAF_NODE	287:8	287:8	8	=
RVAL	287:10	287:10	7	0
FIELD	287:10	287:10	8	0
LEAF_NODE	287:10	287:10	9	0
LEAF_NODE	287:11	287:11	5	;
CONDITION	287:13	287:13	4	i < npixels && cc >= 3
EXPR	287:13	287:13	5	i < npixels && cc >= 3
AND	287:13	287:28	6	i < npixels && cc >= 3
EXPR	287:13	287:17	7	i < npixels
FIELD	287:13	287:13	8	i
LEAF_NODE	287:13	287:13	9	i
REL_OPERATOR	287:15	287:15	8	<
LEAF_NODE	287:15	287:15	9	<
FIELD	287:17	287:17	8	npixels
LEAF_NODE	287:17	287:17	9	npixels
LEAF_NODE	287:25	287:25	7	&&
EXPR	287:28	287:34	7	cc >= 3
FIELD	287:28	287:28	8	cc
LEAF_NODE	287:28	287:28	9	cc
REL_OPERATOR	287:31	287:31	8	>=
LEAF_NODE	287:31	287:31	9	>=
FIELD	287:34	287:34	8	3
LEAF_NODE	287:34	287:34	9	3
LEAF_NODE	287:35	287:35	4	;
FOR_EXPR	287:37	287:37	4	i ++
EXPR	287:37	287:37	5	i ++
FIELD	287:37	287:38	6	i ++
LEAF_NODE	287:37	287:37	7	i
LEAF_NODE	287:38	287:38	7	++
LEAF_NODE	287:40	287:40	4	)
STATEMENTS	287:42	291:1	4	
LEAF_NODE	287:42	287:42	5	{
STATEMENTS	288:2	290:2	5	
EXPR_STATEMENT	288:2	288:42	6	tp [ i ] = bp [ 0 ] << 16 | bp [ 1 ] << 8 | bp [ 2 ] ;
EXPR	288:2	288:2	7	tp [ i ] = bp [ 0 ] << 16 | bp [ 1 ] << 8 | bp [ 2 ]
ASSIGN	288:2	288:10	8	tp [ i ] = bp [ 0 ] << 16 | bp [ 1 ] << 8 | bp [ 2 ]
LVAL	288:2	288:2	9	tp [ i ]
FIELD	288:2	288:6	10	tp [ i ]
LEAF_NODE	288:2	288:2	11	tp
LEAF_NODE	288:4	288:4	11	[
EXPR	288:5	288:5	11	i
FIELD	288:5	288:5	12	i
LEAF_NODE	288:5	288:5	13	i
LEAF_NODE	288:6	288:6	11	]
ASSIGN_OP	288:8	288:8	9	=
LEAF_NODE	288:8	288:8	10	=
RVAL	288:10	288:10	9	bp [ 0 ] << 16 | bp [ 1 ] << 8 | bp [ 2 ]
BIT_OR	288:10	288:24	10	bp [ 0 ] << 16 | bp [ 1 ] << 8 | bp [ 2 ]
BIT_OR_ELEM	288:10	288:19	11	bp [ 0 ] << 16
FIELD	288:10	288:14	12	bp [ 0 ]
LEAF_NODE	288:10	288:10	13	bp
LEAF_NODE	288:12	288:12	13	[
EXPR	288:13	288:13	13	0
FIELD	288:13	288:13	14	0
LEAF_NODE	288:13	288:13	15	0
LEAF_NODE	288:14	288:14	13	]
LEAF_NODE	288:16	288:16	12	<<
FIELD	288:19	288:19	12	16
LEAF_NODE	288:19	288:19	13	16
LEAF_NODE	288:22	288:22	11	|
BIT_OR_ELEM	288:24	288:24	11	bp [ 1 ] << 8 | bp [ 2 ]
BIT_OR	288:24	288:37	12	bp [ 1 ] << 8 | bp [ 2 ]
BIT_OR_ELEM	288:24	288:33	13	bp [ 1 ] << 8
FIELD	288:24	288:28	14	bp [ 1 ]
LEAF_NODE	288:24	288:24	15	bp
LEAF_NODE	288:26	288:26	15	[
EXPR	288:27	288:27	15	1
FIELD	288:27	288:27	16	1
LEAF_NODE	288:27	288:27	17	1
LEAF_NODE	288:28	288:28	15	]
LEAF_NODE	288:30	288:30	14	<<
FIELD	288:33	288:33	14	8
LEAF_NODE	288:33	288:33	15	8
LEAF_NODE	288:35	288:35	13	|
BIT_OR_ELEM	288:37	288:37	13	bp [ 2 ]
FIELD	288:37	288:41	14	bp [ 2 ]
LEAF_NODE	288:37	288:37	15	bp
LEAF_NODE	288:39	288:39	15	[
EXPR	288:40	288:40	15	2
FIELD	288:40	288:40	16	2
LEAF_NODE	288:40	288:40	17	2
LEAF_NODE	288:41	288:41	15	]
LEAF_NODE	288:42	288:42	7	;
EXPR_STATEMENT	289:2	289:9	6	bp += 3 ;
EXPR	289:2	289:2	7	bp += 3
ASSIGN	289:2	289:8	8	bp += 3
LVAL	289:2	289:2	9	bp
FIELD	289:2	289:2	10	bp
LEAF_NODE	289:2	289:2	11	bp
ASSIGN_OP	289:5	289:5	9	+=
LEAF_NODE	289:5	289:5	10	+=
RVAL	289:8	289:8	9	3
FIELD	289:8	289:8	10	3
LEAF_NODE	289:8	289:8	11	3
LEAF_NODE	289:9	289:9	7	;
EXPR_STATEMENT	290:2	290:9	6	cc -= 3 ;
EXPR	290:2	290:2	7	cc -= 3
ASSIGN	290:2	290:8	8	cc -= 3
LVAL	290:2	290:2	9	cc
FIELD	290:2	290:2	10	cc
LEAF_NODE	290:2	290:2	11	cc
ASSIGN_OP	290:5	290:5	9	-=
LEAF_NODE	290:5	290:5	10	-=
RVAL	290:8	290:8	9	3
FIELD	290:8	290:8	10	3
LEAF_NODE	290:8	290:8	11	3
LEAF_NODE	290:9	290:9	7	;
LEAF_NODE	291:1	291:1	5	}
EXPR_STATEMENT	292:1	292:29	3	tif -> tif_rawcp = ( uint8 * ) bp ;
EXPR	292:1	292:1	4	tif -> tif_rawcp = ( uint8 * ) bp
ASSIGN	292:1	292:18	5	tif -> tif_rawcp = ( uint8 * ) bp
LVAL	292:1	292:1	6	tif -> tif_rawcp
FIELD	292:1	292:6	7	tif -> tif_rawcp
LEAF_NODE	292:1	292:1	8	tif
LEAF_NODE	292:4	292:4	8	->
LEAF_NODE	292:6	292:6	8	tif_rawcp
ASSIGN_OP	292:16	292:16	6	=
LEAF_NODE	292:16	292:16	7	=
RVAL	292:18	292:27	6	( uint8 * ) bp
LEAF_NODE	292:18	292:18	7	(
TYPE_NAME	292:19	292:19	7	uint8
LEAF_NODE	292:19	292:19	8	uint8
LEAF_NODE	292:24	292:24	7	*
LEAF_NODE	292:25	292:25	7	)
FIELD	292:27	292:27	7	bp
LEAF_NODE	292:27	292:27	8	bp
LEAF_NODE	292:29	292:29	4	;
EXPR_STATEMENT	293:1	293:20	3	tif -> tif_rawcc = cc ;
EXPR	293:1	293:1	4	tif -> tif_rawcc = cc
ASSIGN	293:1	293:18	5	tif -> tif_rawcc = cc
LVAL	293:1	293:1	6	tif -> tif_rawcc
FIELD	293:1	293:6	7	tif -> tif_rawcc
LEAF_NODE	293:1	293:1	8	tif
LEAF_NODE	293:4	293:4	8	->
LEAF_NODE	293:6	293:6	8	tif_rawcc
ASSIGN_OP	293:16	293:16	6	=
LEAF_NODE	293:16	293:16	7	=
RVAL	293:18	293:18	6	cc
FIELD	293:18	293:18	7	cc
LEAF_NODE	293:18	293:18	8	cc
LEAF_NODE	293:20	293:20	4	;
SELECTION	294:1	294:19	3	
KEYWORD	294:1	294:1	4	if
LEAF_NODE	294:1	294:1	5	if
LEAF_NODE	294:4	294:4	4	(
CONDITION	294:5	294:5	4	i != npixels
EXPR	294:5	294:10	5	i != npixels
FIELD	294:5	294:5	6	i
LEAF_NODE	294:5	294:5	7	i
EQ_OPERATOR	294:7	294:7	6	!=
LEAF_NODE	294:7	294:7	7	!=
FIELD	294:10	294:10	6	npixels
LEAF_NODE	294:10	294:10	7	npixels
LEAF_NODE	294:17	294:17	4	)
STATEMENTS	294:19	307:1	4	
LEAF_NODE	294:19	294:19	5	{
STATEMENTS	296:2	306:2	5	
EXPR_STATEMENT	296:2	299:41	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at row %lu (short %I64d pixels)" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) ( npixels - i ) ) ;
EXPR	296:2	296:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at row %lu (short %I64d pixels)" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) ( npixels - i ) )
FUNCTION_CALL	296:2	299:40	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at row %lu (short %I64d pixels)" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) ( npixels - i ) )
CALLEE	296:2	296:2	9	TIFFErrorExt
LEAF_NODE	296:2	296:2	10	TIFFErrorExt
LEAF_NODE	296:14	296:14	9	(
ARGUMENT	296:15	296:15	9	tif -> tif_clientdata
FIELD	296:15	296:20	10	tif -> tif_clientdata
LEAF_NODE	296:15	296:15	11	tif
LEAF_NODE	296:18	296:18	11	->
LEAF_NODE	296:20	296:20	11	tif_clientdata
LEAF_NODE	296:34	296:34	9	,
ARGUMENT	296:36	296:36	9	module
FIELD	296:36	296:36	10	module
LEAF_NODE	296:36	296:36	11	module
LEAF_NODE	296:42	296:42	9	,
ARGUMENT	297:3	297:3	9	"Not enough data at row %lu (short %I64d pixels)"
FIELD	297:3	297:3	10	"Not enough data at row %lu (short %I64d pixels)"
LEAF_NODE	297:3	297:3	11	"Not enough data at row %lu (short %I64d pixels)"
LEAF_NODE	297:52	297:52	9	,
ARGUMENT	298:8	298:24	9	( unsigned long ) tif -> tif_row
LEAF_NODE	298:8	298:8	10	(
TYPE_NAME	298:9	298:18	10	unsigned long
LEAF_NODE	298:9	298:9	11	unsigned
LEAF_NODE	298:18	298:18	11	long
LEAF_NODE	298:22	298:22	10	)
FIELD	298:24	298:29	10	tif -> tif_row
LEAF_NODE	298:24	298:24	11	tif
LEAF_NODE	298:27	298:27	11	->
LEAF_NODE	298:29	298:29	11	tif_row
LEAF_NODE	298:36	298:36	9	,
ARGUMENT	299:8	299:39	9	( unsigned __int64 ) ( npixels - i )
LEAF_NODE	299:8	299:8	10	(
TYPE_NAME	299:9	299:18	10	unsigned __int64
LEAF_NODE	299:9	299:9	11	unsigned
LEAF_NODE	299:18	299:18	11	__int64
LEAF_NODE	299:25	299:25	10	)
LEAF_NODE	299:27	299:27	10	(
FIELD	299:28	299:28	10	npixels
LEAF_NODE	299:28	299:28	11	npixels
LEAF_NODE	299:36	299:36	10	-
FIELD	299:38	299:38	10	i
LEAF_NODE	299:38	299:38	11	i
LEAF_NODE	299:39	299:39	10	)
LEAF_NODE	299:40	299:40	9	)
LEAF_NODE	299:41	299:41	7	;
LEAF_NODE	301:2	301:2	6	TIFFErrorExt
LEAF_NODE	301:14	301:14	6	(
LEAF_NODE	301:15	301:15	6	tif
LEAF_NODE	301:18	301:18	6	->
LEAF_NODE	301:20	301:20	6	tif_clientdata
LEAF_NODE	301:34	301:34	6	,
LEAF_NODE	301:36	301:36	6	module
LEAF_NODE	301:42	301:42	6	,
LEAF_NODE	302:3	302:3	6	"Not enough data at row %lu (short %llu pixels)"
LEAF_NODE	302:51	302:51	6	,
LEAF_NODE	303:8	303:8	6	(
LEAF_NODE	303:9	303:9	6	unsigned
LEAF_NODE	303:18	303:18	6	long
LEAF_NODE	303:22	303:22	6	)
LEAF_NODE	303:24	303:24	6	tif
LEAF_NODE	303:27	303:27	6	->
LEAF_NODE	303:29	303:29	6	tif_row
LEAF_NODE	303:36	303:36	6	,
LEAF_NODE	304:8	304:8	6	(
LEAF_NODE	304:9	304:9	6	unsigned
LEAF_NODE	304:18	304:18	6	long
LEAF_NODE	304:23	304:23	6	long
LEAF_NODE	304:27	304:27	6	)
LEAF_NODE	304:29	304:29	6	(
LEAF_NODE	304:30	304:30	6	npixels
LEAF_NODE	304:38	304:38	6	-
LEAF_NODE	304:40	304:40	6	i
LEAF_NODE	304:41	304:41	6	)
LEAF_NODE	304:42	304:42	6	)
LEAF_NODE	304:43	304:43	6	;
JUMP_STATEMENT	306:2	306:12	6	return ( 0 ) ;
KEYWORD	306:2	306:2	7	return
LEAF_NODE	306:2	306:2	8	return
DESTINATION	306:9	306:9	7	( 0 )
EXPR	306:9	306:11	8	( 0 )
LEAF_NODE	306:9	306:9	9	(
FIELD	306:10	306:10	9	0
LEAF_NODE	306:10	306:10	10	0
LEAF_NODE	306:11	306:11	9	)
LEAF_NODE	306:12	306:12	7	;
LEAF_NODE	307:1	307:1	5	}
EXPR_STATEMENT	308:1	308:30	3	( * sp -> tfunc ) ( sp , op , npixels ) ;
EXPR	308:1	308:1	4	( * sp -> tfunc ) ( sp , op , npixels )
FUNCTION_CALL	308:1	308:29	5	( * sp -> tfunc ) ( sp , op , npixels )
CALLEE	308:1	308:12	6	( * sp -> tfunc )
LEAF_NODE	308:1	308:1	7	(
UNARY_EXPR	308:2	308:3	7	* sp -> tfunc
UNARY_OPERATOR	308:2	308:2	8	*
LEAF_NODE	308:2	308:2	9	*
FIELD	308:3	308:7	8	sp -> tfunc
LEAF_NODE	308:3	308:3	9	sp
LEAF_NODE	308:5	308:5	9	->
LEAF_NODE	308:7	308:7	9	tfunc
LEAF_NODE	308:12	308:12	7	)
LEAF_NODE	308:13	308:13	6	(
ARGUMENT	308:14	308:14	6	sp
FIELD	308:14	308:14	7	sp
LEAF_NODE	308:14	308:14	8	sp
LEAF_NODE	308:16	308:16	6	,
ARGUMENT	308:18	308:18	6	op
FIELD	308:18	308:18	7	op
LEAF_NODE	308:18	308:18	8	op
LEAF_NODE	308:20	308:20	6	,
ARGUMENT	308:22	308:22	6	npixels
FIELD	308:22	308:22	7	npixels
LEAF_NODE	308:22	308:22	8	npixels
LEAF_NODE	308:29	308:29	6	)
LEAF_NODE	308:30	308:30	4	;
JUMP_STATEMENT	309:1	309:11	3	return ( 1 ) ;
KEYWORD	309:1	309:1	4	return
LEAF_NODE	309:1	309:1	5	return
DESTINATION	309:8	309:8	4	( 1 )
EXPR	309:8	309:10	5	( 1 )
LEAF_NODE	309:8	309:8	6	(
FIELD	309:9	309:9	6	1
LEAF_NODE	309:9	309:9	7	1
LEAF_NODE	309:10	309:10	6	)
LEAF_NODE	309:11	309:11	4	;
LEAF_NODE	310:0	310:0	2	}
FUNCTION_DEF	315:0	387:0	1	
RETURN_TYPE	315:0	315:7	2	static int
LEAF_NODE	315:0	315:0	3	static
TYPE_NAME	315:7	315:7	3	int
LEAF_NODE	315:7	315:7	4	int
FUNCTION_NAME	316:0	316:0	2	LogLuvDecode32
LEAF_NODE	316:0	316:0	3	LogLuvDecode32
PARAMETER_LIST	316:14	316:59	2	( TIFF * tif , uint8 * op , tmsize_t occ , uint16 s )
LEAF_NODE	316:14	316:14	3	(
PARAMETER_DECL	316:15	316:21	3	TIFF * tif
TYPE	316:15	316:19	4	TIFF *
TYPE_NAME	316:15	316:15	5	TIFF
LEAF_NODE	316:15	316:15	6	TIFF
POINTER	316:19	316:19	5	*
LEAF_NODE	316:19	316:19	6	*
NAME	316:21	316:21	4	tif
LEAF_NODE	316:21	316:21	5	tif
LEAF_NODE	316:24	316:24	3	,
PARAMETER_DECL	316:26	316:33	3	uint8 * op
TYPE	316:26	316:31	4	uint8 *
TYPE_NAME	316:26	316:26	5	uint8
LEAF_NODE	316:26	316:26	6	uint8
POINTER	316:31	316:31	5	*
LEAF_NODE	316:31	316:31	6	*
NAME	316:33	316:33	4	op
LEAF_NODE	316:33	316:33	5	op
LEAF_NODE	316:35	316:35	3	,
PARAMETER_DECL	316:37	316:46	3	tmsize_t occ
TYPE	316:37	316:37	4	tmsize_t
TYPE_NAME	316:37	316:37	5	tmsize_t
LEAF_NODE	316:37	316:37	6	tmsize_t
NAME	316:46	316:46	4	occ
LEAF_NODE	316:46	316:46	5	occ
LEAF_NODE	316:49	316:49	3	,
PARAMETER_DECL	316:51	316:58	3	uint16 s
TYPE	316:51	316:51	4	uint16
TYPE_NAME	316:51	316:51	5	uint16
LEAF_NODE	316:51	316:51	6	uint16
NAME	316:58	316:58	4	s
LEAF_NODE	316:58	316:58	5	s
LEAF_NODE	316:59	316:59	3	)
LEAF_NODE	317:0	317:0	2	{
STATEMENTS	318:1	386:1	2	
LEAF_NODE	318:1	318:1	3	static
SIMPLE_DECL	318:8	318:46	3	const char [ ] module ; module = "LogLuvDecode32" ;
VAR_DECL	318:8	318:19	4	const char [ ] module ; module = "LogLuvDecode32"
TYPE	318:8	318:25	5	const char [ ]
TYPE_NAME	318:8	318:14	6	const char
LEAF_NODE	318:8	318:8	7	const
LEAF_NODE	318:14	318:14	7	char
TYPE_SUFFIX	318:25	318:26	6	[ ]
LEAF_NODE	318:25	318:25	7	[
LEAF_NODE	318:26	318:26	7	]
NAME	318:19	318:19	5	module
LEAF_NODE	318:19	318:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	318:19	318:19	5	module = "LogLuvDecode32"
ASSIGN	318:19	318:30	6	module = "LogLuvDecode32"
LVAL	318:19	318:19	7	module
NAME	318:19	318:19	8	module
LEAF_NODE	318:19	318:19	9	module
ASSIGN_OP	318:28	318:28	7	=
LEAF_NODE	318:28	318:28	8	=
RVAL	318:30	318:30	7	"LogLuvDecode32"
FIELD	318:30	318:30	8	"LogLuvDecode32"
LEAF_NODE	318:30	318:30	9	"LogLuvDecode32"
LEAF_NODE	318:46	318:46	4	;
SIMPLE_DECL	319:1	319:16	3	LogLuvState * sp ;
VAR_DECL	319:1	319:14	4	LogLuvState * sp
TYPE	319:1	319:12	5	LogLuvState *
TYPE_NAME	319:1	319:1	6	LogLuvState
LEAF_NODE	319:1	319:1	7	LogLuvState
POINTER	319:12	319:12	6	*
LEAF_NODE	319:12	319:12	7	*
NAME	319:14	319:14	5	sp
LEAF_NODE	319:14	319:14	6	sp
LEAF_NODE	319:16	319:16	4	;
SIMPLE_DECL	320:1	320:9	3	int shft ;
VAR_DECL	320:1	320:5	4	int shft
TYPE	320:1	320:1	5	int
TYPE_NAME	320:1	320:1	6	int
LEAF_NODE	320:1	320:1	7	int
NAME	320:5	320:5	5	shft
LEAF_NODE	320:5	320:5	6	shft
LEAF_NODE	320:9	320:9	4	;
SIMPLE_DECL	321:1	321:11	3	tmsize_t i ;
VAR_DECL	321:1	321:10	4	tmsize_t i
TYPE	321:1	321:1	5	tmsize_t
TYPE_NAME	321:1	321:1	6	tmsize_t
LEAF_NODE	321:1	321:1	7	tmsize_t
NAME	321:10	321:10	5	i
LEAF_NODE	321:10	321:10	6	i
LEAF_NODE	321:11	321:11	4	;
SIMPLE_DECL	322:1	322:17	3	tmsize_t npixels ;
VAR_DECL	322:1	322:10	4	tmsize_t npixels
TYPE	322:1	322:1	5	tmsize_t
TYPE_NAME	322:1	322:1	6	tmsize_t
LEAF_NODE	322:1	322:1	7	tmsize_t
NAME	322:10	322:10	5	npixels
LEAF_NODE	322:10	322:10	6	npixels
LEAF_NODE	322:17	322:17	4	;
SIMPLE_DECL	323:1	323:18	3	unsigned char * bp ;
VAR_DECL	323:1	323:16	4	unsigned char * bp
TYPE	323:1	323:14	5	unsigned char *
TYPE_NAME	323:1	323:10	6	unsigned char
LEAF_NODE	323:1	323:1	7	unsigned
LEAF_NODE	323:10	323:10	7	char
POINTER	323:14	323:14	6	*
LEAF_NODE	323:14	323:14	7	*
NAME	323:16	323:16	5	bp
LEAF_NODE	323:16	323:16	6	bp
LEAF_NODE	323:18	323:18	4	;
SIMPLE_DECL	324:1	324:11	3	uint32 * tp ;
VAR_DECL	324:1	324:9	4	uint32 * tp
TYPE	324:1	324:7	5	uint32 *
TYPE_NAME	324:1	324:1	6	uint32
LEAF_NODE	324:1	324:1	7	uint32
POINTER	324:7	324:7	6	*
LEAF_NODE	324:7	324:7	7	*
NAME	324:9	324:9	5	tp
LEAF_NODE	324:9	324:9	6	tp
LEAF_NODE	324:11	324:11	4	;
SIMPLE_DECL	325:1	325:9	3	uint32 b ;
VAR_DECL	325:1	325:8	4	uint32 b
TYPE	325:1	325:1	5	uint32
TYPE_NAME	325:1	325:1	6	uint32
LEAF_NODE	325:1	325:1	7	uint32
NAME	325:8	325:8	5	b
LEAF_NODE	325:8	325:8	6	b
LEAF_NODE	325:9	325:9	4	;
SIMPLE_DECL	326:1	326:12	3	tmsize_t cc ;
VAR_DECL	326:1	326:10	4	tmsize_t cc
TYPE	326:1	326:1	5	tmsize_t
TYPE_NAME	326:1	326:1	6	tmsize_t
LEAF_NODE	326:1	326:1	7	tmsize_t
NAME	326:10	326:10	5	cc
LEAF_NODE	326:10	326:10	6	cc
LEAF_NODE	326:12	326:12	4	;
SIMPLE_DECL	327:1	327:7	3	int rc ;
VAR_DECL	327:1	327:5	4	int rc
TYPE	327:1	327:1	5	int
TYPE_NAME	327:1	327:1	6	int
LEAF_NODE	327:1	327:1	7	int
NAME	327:5	327:5	5	rc
LEAF_NODE	327:5	327:5	6	rc
LEAF_NODE	327:7	327:7	4	;
EXPR_STATEMENT	329:1	329:15	3	assert ( s == 0 ) ;
EXPR	329:1	329:1	4	assert ( s == 0 )
FUNCTION_CALL	329:1	329:14	5	assert ( s == 0 )
CALLEE	329:1	329:1	6	assert
LEAF_NODE	329:1	329:1	7	assert
LEAF_NODE	329:7	329:7	6	(
ARGUMENT	329:8	329:13	6	s == 0
FIELD	329:8	329:8	7	s
LEAF_NODE	329:8	329:8	8	s
EQ_OPERATOR	329:10	329:10	7	==
LEAF_NODE	329:10	329:10	8	==
FIELD	329:13	329:13	7	0
LEAF_NODE	329:13	329:13	8	0
LEAF_NODE	329:14	329:14	6	)
LEAF_NODE	329:15	329:15	4	;
EXPR_STATEMENT	330:1	330:23	3	sp = DecoderState ( tif ) ;
EXPR	330:1	330:1	4	sp = DecoderState ( tif )
ASSIGN	330:1	330:6	5	sp = DecoderState ( tif )
LVAL	330:1	330:1	6	sp
FIELD	330:1	330:1	7	sp
LEAF_NODE	330:1	330:1	8	sp
ASSIGN_OP	330:4	330:4	6	=
LEAF_NODE	330:4	330:4	7	=
RVAL	330:6	330:6	6	DecoderState ( tif )
FUNCTION_CALL	330:6	330:22	7	DecoderState ( tif )
CALLEE	330:6	330:6	8	DecoderState
LEAF_NODE	330:6	330:6	9	DecoderState
LEAF_NODE	330:18	330:18	8	(
ARGUMENT	330:19	330:19	8	tif
FIELD	330:19	330:19	9	tif
LEAF_NODE	330:19	330:19	10	tif
LEAF_NODE	330:22	330:22	8	)
LEAF_NODE	330:23	330:23	4	;
EXPR_STATEMENT	331:1	331:19	3	assert ( sp != NULL ) ;
EXPR	331:1	331:1	4	assert ( sp != NULL )
FUNCTION_CALL	331:1	331:18	5	assert ( sp != NULL )
CALLEE	331:1	331:1	6	assert
LEAF_NODE	331:1	331:1	7	assert
LEAF_NODE	331:7	331:7	6	(
ARGUMENT	331:8	331:14	6	sp != NULL
FIELD	331:8	331:8	7	sp
LEAF_NODE	331:8	331:8	8	sp
EQ_OPERATOR	331:11	331:11	7	!=
LEAF_NODE	331:11	331:11	8	!=
FIELD	331:14	331:14	7	NULL
LEAF_NODE	331:14	331:14	8	NULL
LEAF_NODE	331:18	331:18	6	)
LEAF_NODE	331:19	331:19	4	;
EXPR_STATEMENT	333:1	333:31	3	npixels = occ / sp -> pixel_size ;
EXPR	333:1	333:1	4	npixels = occ / sp -> pixel_size
ASSIGN	333:1	333:11	5	npixels = occ / sp -> pixel_size
LVAL	333:1	333:1	6	npixels
FIELD	333:1	333:1	7	npixels
LEAF_NODE	333:1	333:1	8	npixels
ASSIGN_OP	333:9	333:9	6	=
LEAF_NODE	333:9	333:9	7	=
RVAL	333:11	333:17	6	occ / sp -> pixel_size
FIELD	333:11	333:11	7	occ
LEAF_NODE	333:11	333:11	8	occ
LEAF_NODE	333:15	333:15	7	/
FIELD	333:17	333:21	7	sp -> pixel_size
LEAF_NODE	333:17	333:17	8	sp
LEAF_NODE	333:19	333:19	8	->
LEAF_NODE	333:21	333:21	8	pixel_size
LEAF_NODE	333:31	333:31	4	;
SELECTION	335:1	336:2	3	
KEYWORD	335:1	335:1	4	if
LEAF_NODE	335:1	335:1	5	if
LEAF_NODE	335:4	335:4	4	(
CONDITION	335:5	335:5	4	sp -> user_datafmt == SGILOGDATAFMT_RAW
EXPR	335:5	335:25	5	sp -> user_datafmt == SGILOGDATAFMT_RAW
FIELD	335:5	335:9	6	sp -> user_datafmt
LEAF_NODE	335:5	335:5	7	sp
LEAF_NODE	335:7	335:7	7	->
LEAF_NODE	335:9	335:9	7	user_datafmt
EQ_OPERATOR	335:22	335:22	6	==
LEAF_NODE	335:22	335:22	7	==
FIELD	335:25	335:25	6	SGILOGDATAFMT_RAW
LEAF_NODE	335:25	335:25	7	SGILOGDATAFMT_RAW
LEAF_NODE	335:42	335:42	4	)
STATEMENTS	336:2	336:2	4	
EXPR_STATEMENT	336:2	336:19	5	tp = ( uint32 * ) op ;
EXPR	336:2	336:2	6	tp = ( uint32 * ) op
ASSIGN	336:2	336:7	7	tp = ( uint32 * ) op
LVAL	336:2	336:2	8	tp
FIELD	336:2	336:2	9	tp
LEAF_NODE	336:2	336:2	10	tp
ASSIGN_OP	336:5	336:5	8	=
LEAF_NODE	336:5	336:5	9	=
RVAL	336:7	336:17	8	( uint32 * ) op
LEAF_NODE	336:7	336:7	9	(
TYPE_NAME	336:8	336:8	9	uint32
LEAF_NODE	336:8	336:8	10	uint32
LEAF_NODE	336:14	336:14	9	*
LEAF_NODE	336:15	336:15	9	)
FIELD	336:17	336:17	9	op
LEAF_NODE	336:17	336:17	10	op
LEAF_NODE	336:19	336:19	6	;
SELECTION	337:1	337:6	3	
KEYWORD	337:1	337:1	4	else
LEAF_NODE	337:1	337:1	5	else
STATEMENTS	337:6	344:1	4	
LEAF_NODE	337:6	337:6	5	{
STATEMENTS	338:2	343:2	5	
SELECTION	338:2	338:28	6	
KEYWORD	338:2	338:2	7	if
LEAF_NODE	338:2	338:2	8	if
LEAF_NODE	338:4	338:4	7	(
CONDITION	338:5	338:5	7	sp -> tbuflen < npixels
EXPR	338:5	338:19	8	sp -> tbuflen < npixels
FIELD	338:5	338:9	9	sp -> tbuflen
LEAF_NODE	338:5	338:5	10	sp
LEAF_NODE	338:7	338:7	10	->
LEAF_NODE	338:9	338:9	10	tbuflen
REL_OPERATOR	338:17	338:17	9	<
LEAF_NODE	338:17	338:17	10	<
FIELD	338:19	338:19	9	npixels
LEAF_NODE	338:19	338:19	10	npixels
LEAF_NODE	338:26	338:26	7	)
STATEMENTS	338:28	342:2	7	
LEAF_NODE	338:28	338:28	8	{
STATEMENTS	339:3	341:3	8	
EXPR_STATEMENT	339:3	340:38	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" ) ;
EXPR	339:3	339:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
FUNCTION_CALL	339:3	340:37	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
CALLEE	339:3	339:3	12	TIFFErrorExt
LEAF_NODE	339:3	339:3	13	TIFFErrorExt
LEAF_NODE	339:15	339:15	12	(
ARGUMENT	339:16	339:16	12	tif -> tif_clientdata
FIELD	339:16	339:21	13	tif -> tif_clientdata
LEAF_NODE	339:16	339:16	14	tif
LEAF_NODE	339:19	339:19	14	->
LEAF_NODE	339:21	339:21	14	tif_clientdata
LEAF_NODE	339:35	339:35	12	,
ARGUMENT	339:37	339:37	12	module
FIELD	339:37	339:37	13	module
LEAF_NODE	339:37	339:37	14	module
LEAF_NODE	339:43	339:43	12	,
ARGUMENT	340:7	340:7	12	"Translation buffer too short"
FIELD	340:7	340:7	13	"Translation buffer too short"
LEAF_NODE	340:7	340:7	14	"Translation buffer too short"
LEAF_NODE	340:37	340:37	12	)
LEAF_NODE	340:38	340:38	10	;
JUMP_STATEMENT	341:3	341:13	9	return ( 0 ) ;
KEYWORD	341:3	341:3	10	return
LEAF_NODE	341:3	341:3	11	return
DESTINATION	341:10	341:10	10	( 0 )
EXPR	341:10	341:12	11	( 0 )
LEAF_NODE	341:10	341:10	12	(
FIELD	341:11	341:11	12	0
LEAF_NODE	341:11	341:11	13	0
LEAF_NODE	341:12	341:12	12	)
LEAF_NODE	341:13	341:13	10	;
LEAF_NODE	342:2	342:2	8	}
EXPR_STATEMENT	343:2	343:25	6	tp = ( uint32 * ) sp -> tbuf ;
EXPR	343:2	343:2	7	tp = ( uint32 * ) sp -> tbuf
ASSIGN	343:2	343:7	8	tp = ( uint32 * ) sp -> tbuf
LVAL	343:2	343:2	9	tp
FIELD	343:2	343:2	10	tp
LEAF_NODE	343:2	343:2	11	tp
ASSIGN_OP	343:5	343:5	9	=
LEAF_NODE	343:5	343:5	10	=
RVAL	343:7	343:17	9	( uint32 * ) sp -> tbuf
LEAF_NODE	343:7	343:7	10	(
TYPE_NAME	343:8	343:8	10	uint32
LEAF_NODE	343:8	343:8	11	uint32
LEAF_NODE	343:14	343:14	10	*
LEAF_NODE	343:15	343:15	10	)
FIELD	343:17	343:21	10	sp -> tbuf
LEAF_NODE	343:17	343:17	11	sp
LEAF_NODE	343:19	343:19	11	->
LEAF_NODE	343:21	343:21	11	tbuf
LEAF_NODE	343:25	343:25	7	;
LEAF_NODE	344:1	344:1	5	}
EXPR_STATEMENT	345:1	345:51	3	_TIFFmemset ( ( void * ) tp , 0 , npixels * sizeof ( tp [ 0 ] ) ) ;
EXPR	345:1	345:1	4	_TIFFmemset ( ( void * ) tp , 0 , npixels * sizeof ( tp [ 0 ] ) )
FUNCTION_CALL	345:1	345:50	5	_TIFFmemset ( ( void * ) tp , 0 , npixels * sizeof ( tp [ 0 ] ) )
CALLEE	345:1	345:1	6	_TIFFmemset
LEAF_NODE	345:1	345:1	7	_TIFFmemset
LEAF_NODE	345:12	345:12	6	(
ARGUMENT	345:13	345:21	6	( void * ) tp
LEAF_NODE	345:13	345:13	7	(
TYPE_NAME	345:14	345:14	7	void
LEAF_NODE	345:14	345:14	8	void
LEAF_NODE	345:18	345:18	7	*
LEAF_NODE	345:19	345:19	7	)
FIELD	345:21	345:21	7	tp
LEAF_NODE	345:21	345:21	8	tp
LEAF_NODE	345:23	345:23	6	,
ARGUMENT	345:25	345:25	6	0
FIELD	345:25	345:25	7	0
LEAF_NODE	345:25	345:25	8	0
LEAF_NODE	345:26	345:26	6	,
ARGUMENT	345:28	345:36	6	npixels * sizeof ( tp [ 0 ] )
FIELD	345:28	345:28	7	npixels
LEAF_NODE	345:28	345:28	8	npixels
LEAF_NODE	345:35	345:35	7	*
FUNCTION_CALL	345:36	345:49	7	sizeof ( tp [ 0 ] )
CALLEE	345:36	345:36	8	sizeof
LEAF_NODE	345:36	345:36	9	sizeof
LEAF_NODE	345:43	345:43	8	(
ARGUMENT	345:44	345:44	8	tp [ 0 ]
FIELD	345:44	345:48	9	tp [ 0 ]
LEAF_NODE	345:44	345:44	10	tp
LEAF_NODE	345:46	345:46	10	[
EXPR	345:47	345:47	10	0
FIELD	345:47	345:47	11	0
LEAF_NODE	345:47	345:47	12	0
LEAF_NODE	345:48	345:48	10	]
LEAF_NODE	345:49	345:49	8	)
LEAF_NODE	345:50	345:50	6	)
LEAF_NODE	345:51	345:51	4	;
EXPR_STATEMENT	347:1	347:37	3	bp = ( unsigned char * ) tif -> tif_rawcp ;
EXPR	347:1	347:1	4	bp = ( unsigned char * ) tif -> tif_rawcp
ASSIGN	347:1	347:6	5	bp = ( unsigned char * ) tif -> tif_rawcp
LVAL	347:1	347:1	6	bp
FIELD	347:1	347:1	7	bp
LEAF_NODE	347:1	347:1	8	bp
ASSIGN_OP	347:4	347:4	6	=
LEAF_NODE	347:4	347:4	7	=
RVAL	347:6	347:23	6	( unsigned char * ) tif -> tif_rawcp
LEAF_NODE	347:6	347:6	7	(
TYPE_NAME	347:7	347:16	7	unsigned char
LEAF_NODE	347:7	347:7	8	unsigned
LEAF_NODE	347:16	347:16	8	char
LEAF_NODE	347:20	347:20	7	*
LEAF_NODE	347:21	347:21	7	)
FIELD	347:23	347:28	7	tif -> tif_rawcp
LEAF_NODE	347:23	347:23	8	tif
LEAF_NODE	347:26	347:26	8	->
LEAF_NODE	347:28	347:28	8	tif_rawcp
LEAF_NODE	347:37	347:37	4	;
EXPR_STATEMENT	348:1	348:20	3	cc = tif -> tif_rawcc ;
EXPR	348:1	348:1	4	cc = tif -> tif_rawcc
ASSIGN	348:1	348:6	5	cc = tif -> tif_rawcc
LVAL	348:1	348:1	6	cc
FIELD	348:1	348:1	7	cc
LEAF_NODE	348:1	348:1	8	cc
ASSIGN_OP	348:4	348:4	6	=
LEAF_NODE	348:4	348:4	7	=
RVAL	348:6	348:6	6	tif -> tif_rawcc
FIELD	348:6	348:11	7	tif -> tif_rawcc
LEAF_NODE	348:6	348:6	8	tif
LEAF_NODE	348:9	348:9	8	->
LEAF_NODE	348:11	348:11	8	tif_rawcc
LEAF_NODE	348:20	348:20	4	;
ITERATION	350:1	350:38	3	
KEYWORD	350:1	350:1	4	for
LEAF_NODE	350:1	350:1	5	for
LEAF_NODE	350:5	350:5	4	(
FOR_INIT	350:6	350:15	4	shft = 24 ;
EXPR	350:6	350:6	5	shft = 24
ASSIGN	350:6	350:13	6	shft = 24
LVAL	350:6	350:6	7	shft
FIELD	350:6	350:6	8	shft
LEAF_NODE	350:6	350:6	9	shft
ASSIGN_OP	350:11	350:11	7	=
LEAF_NODE	350:11	350:11	8	=
RVAL	350:13	350:13	7	24
FIELD	350:13	350:13	8	24
LEAF_NODE	350:13	350:13	9	24
LEAF_NODE	350:15	350:15	5	;
CONDITION	350:17	350:17	4	shft >= 0
EXPR	350:17	350:25	5	shft >= 0
FIELD	350:17	350:17	6	shft
LEAF_NODE	350:17	350:17	7	shft
REL_OPERATOR	350:22	350:22	6	>=
LEAF_NODE	350:22	350:22	7	>=
FIELD	350:25	350:25	6	0
LEAF_NODE	350:25	350:25	7	0
LEAF_NODE	350:26	350:26	4	;
FOR_EXPR	350:28	350:28	4	shft -= 8
EXPR	350:28	350:28	5	shft -= 8
ASSIGN	350:28	350:35	6	shft -= 8
LVAL	350:28	350:28	7	shft
FIELD	350:28	350:28	8	shft
LEAF_NODE	350:28	350:28	9	shft
ASSIGN_OP	350:33	350:33	7	-=
LEAF_NODE	350:33	350:33	8	-=
RVAL	350:35	350:35	7	8
FIELD	350:35	350:35	8	8
LEAF_NODE	350:35	350:35	9	8
LEAF_NODE	350:36	350:36	4	)
STATEMENTS	350:38	382:1	4	
LEAF_NODE	350:38	350:38	5	{
STATEMENTS	351:2	366:2	5	
ITERATION	351:2	351:39	6	
KEYWORD	351:2	351:2	7	for
LEAF_NODE	351:2	351:2	8	for
LEAF_NODE	351:6	351:6	7	(
FOR_INIT	351:7	351:12	7	i = 0 ;
EXPR	351:7	351:7	8	i = 0
ASSIGN	351:7	351:11	9	i = 0
LVAL	351:7	351:7	10	i
FIELD	351:7	351:7	11	i
LEAF_NODE	351:7	351:7	12	i
ASSIGN_OP	351:9	351:9	10	=
LEAF_NODE	351:9	351:9	11	=
RVAL	351:11	351:11	10	0
FIELD	351:11	351:11	11	0
LEAF_NODE	351:11	351:11	12	0
LEAF_NODE	351:12	351:12	8	;
CONDITION	351:14	351:14	7	i < npixels && cc > 0
EXPR	351:14	351:14	8	i < npixels && cc > 0
AND	351:14	351:29	9	i < npixels && cc > 0
EXPR	351:14	351:18	10	i < npixels
FIELD	351:14	351:14	11	i
LEAF_NODE	351:14	351:14	12	i
REL_OPERATOR	351:16	351:16	11	<
LEAF_NODE	351:16	351:16	12	<
FIELD	351:18	351:18	11	npixels
LEAF_NODE	351:18	351:18	12	npixels
LEAF_NODE	351:26	351:26	10	&&
EXPR	351:29	351:34	10	cc > 0
FIELD	351:29	351:29	11	cc
LEAF_NODE	351:29	351:29	12	cc
REL_OPERATOR	351:32	351:32	11	>
LEAF_NODE	351:32	351:32	12	>
FIELD	351:34	351:34	11	0
LEAF_NODE	351:34	351:34	12	0
LEAF_NODE	351:35	351:35	7	;
LEAF_NODE	0:0	0:0	7	FOR_EXPR
LEAF_NODE	351:37	351:37	7	)
STATEMENTS	351:39	365:2	7	
LEAF_NODE	351:39	351:39	8	{
STATEMENTS	352:3	360:5	8	
SELECTION	352:3	352:19	9	
KEYWORD	352:3	352:3	10	if
LEAF_NODE	352:3	352:3	11	if
LEAF_NODE	352:6	352:6	10	(
CONDITION	352:7	352:7	10	* bp >= 128
EXPR	352:7	352:14	11	* bp >= 128
UNARY_EXPR	352:7	352:8	12	* bp
UNARY_OPERATOR	352:7	352:7	13	*
LEAF_NODE	352:7	352:7	14	*
FIELD	352:8	352:8	13	bp
LEAF_NODE	352:8	352:8	14	bp
REL_OPERATOR	352:11	352:11	12	>=
LEAF_NODE	352:11	352:11	13	>=
FIELD	352:14	352:14	12	128
LEAF_NODE	352:14	352:14	13	128
LEAF_NODE	352:17	352:17	10	)
STATEMENTS	352:19	360:3	10	
LEAF_NODE	352:19	352:19	11	{
STATEMENTS	353:4	358:4	11	
SELECTION	353:4	354:5	12	
KEYWORD	353:4	353:4	13	if
LEAF_NODE	353:4	353:4	14	if
LEAF_NODE	353:6	353:6	13	(
CONDITION	353:8	353:8	13	cc < 2
EXPR	353:8	353:13	14	cc < 2
FIELD	353:8	353:8	15	cc
LEAF_NODE	353:8	353:8	16	cc
REL_OPERATOR	353:11	353:11	15	<
LEAF_NODE	353:11	353:11	16	<
FIELD	353:13	353:13	15	2
LEAF_NODE	353:13	353:13	16	2
LEAF_NODE	353:15	353:15	13	)
STATEMENTS	354:5	354:5	13	
JUMP_STATEMENT	354:5	354:10	14	break DESTINATION ;
KEYWORD	354:5	354:5	15	break
LEAF_NODE	354:5	354:5	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	354:10	354:10	15	;
EXPR_STATEMENT	355:4	355:24	12	rc = * bp ++ + ( 2 - 128 ) ;
EXPR	355:4	355:4	13	rc = * bp ++ + ( 2 - 128 )
ASSIGN	355:4	355:9	14	rc = * bp ++ + ( 2 - 128 )
LVAL	355:4	355:4	15	rc
FIELD	355:4	355:4	16	rc
LEAF_NODE	355:4	355:4	17	rc
ASSIGN_OP	355:7	355:7	15	=
LEAF_NODE	355:7	355:7	16	=
RVAL	355:9	355:23	15	* bp ++ + ( 2 - 128 )
UNARY_EXPR	355:9	355:10	16	* bp ++
UNARY_OPERATOR	355:9	355:9	17	*
LEAF_NODE	355:9	355:9	18	*
FIELD	355:10	355:12	17	bp ++
LEAF_NODE	355:10	355:10	18	bp
LEAF_NODE	355:12	355:12	18	++
LEAF_NODE	355:15	355:15	16	+
LEAF_NODE	355:17	355:17	16	(
FIELD	355:18	355:18	16	2
LEAF_NODE	355:18	355:18	17	2
LEAF_NODE	355:19	355:19	16	-
FIELD	355:20	355:20	16	128
LEAF_NODE	355:20	355:20	17	128
LEAF_NODE	355:23	355:23	16	)
LEAF_NODE	355:24	355:24	13	;
EXPR_STATEMENT	356:4	356:29	12	b = ( uint32 ) * bp ++ << shft ;
EXPR	356:4	356:4	13	b = ( uint32 ) * bp ++ << shft
ASSIGN	356:4	356:8	14	b = ( uint32 ) * bp ++ << shft
LVAL	356:4	356:4	15	b
FIELD	356:4	356:4	16	b
LEAF_NODE	356:4	356:4	17	b
ASSIGN_OP	356:6	356:6	15	=
LEAF_NODE	356:6	356:6	16	=
RVAL	356:8	356:25	15	( uint32 ) * bp ++ << shft
LEAF_NODE	356:8	356:8	16	(
TYPE_NAME	356:9	356:9	16	uint32
LEAF_NODE	356:9	356:9	17	uint32
LEAF_NODE	356:15	356:15	16	)
UNARY_EXPR	356:16	356:17	16	* bp ++
UNARY_OPERATOR	356:16	356:16	17	*
LEAF_NODE	356:16	356:16	18	*
FIELD	356:17	356:19	17	bp ++
LEAF_NODE	356:17	356:17	18	bp
LEAF_NODE	356:19	356:19	18	++
LEAF_NODE	356:22	356:22	16	<<
FIELD	356:25	356:25	16	shft
LEAF_NODE	356:25	356:25	17	shft
LEAF_NODE	356:29	356:29	13	;
EXPR_STATEMENT	357:4	357:11	12	cc -= 2 ;
EXPR	357:4	357:4	13	cc -= 2
ASSIGN	357:4	357:10	14	cc -= 2
LVAL	357:4	357:4	15	cc
FIELD	357:4	357:4	16	cc
LEAF_NODE	357:4	357:4	17	cc
ASSIGN_OP	357:7	357:7	15	-=
LEAF_NODE	357:7	357:7	16	-=
RVAL	357:10	357:10	15	2
FIELD	357:10	357:10	16	2
LEAF_NODE	357:10	357:10	17	2
LEAF_NODE	357:11	357:11	13	;
ITERATION	358:4	359:5	12	
KEYWORD	358:4	358:4	13	while
LEAF_NODE	358:4	358:4	14	while
LEAF_NODE	358:10	358:10	13	(
CONDITION	358:11	358:11	13	rc -- && i < npixels
EXPR	358:11	358:11	14	rc -- && i < npixels
AND	358:11	358:19	15	rc -- && i < npixels
EXPR	358:11	358:11	16	rc --
FIELD	358:11	358:13	17	rc --
LEAF_NODE	358:11	358:11	18	rc
LEAF_NODE	358:13	358:13	18	--
LEAF_NODE	358:16	358:16	16	&&
EXPR	358:19	358:23	16	i < npixels
FIELD	358:19	358:19	17	i
LEAF_NODE	358:19	358:19	18	i
REL_OPERATOR	358:21	358:21	17	<
LEAF_NODE	358:21	358:21	18	<
FIELD	358:23	358:23	17	npixels
LEAF_NODE	358:23	358:23	18	npixels
LEAF_NODE	358:30	358:30	13	)
STATEMENTS	359:5	359:5	13	
EXPR_STATEMENT	359:5	359:17	14	tp [ i ++ ] |= b ;
EXPR	359:5	359:5	15	tp [ i ++ ] |= b
ASSIGN	359:5	359:16	16	tp [ i ++ ] |= b
LVAL	359:5	359:5	17	tp [ i ++ ]
FIELD	359:5	359:11	18	tp [ i ++ ]
LEAF_NODE	359:5	359:5	19	tp
LEAF_NODE	359:7	359:7	19	[
EXPR	359:8	359:8	19	i ++
FIELD	359:8	359:9	20	i ++
LEAF_NODE	359:8	359:8	21	i
LEAF_NODE	359:9	359:9	21	++
LEAF_NODE	359:11	359:11	19	]
ASSIGN_OP	359:13	359:13	17	|=
LEAF_NODE	359:13	359:13	18	|=
RVAL	359:16	359:16	17	b
FIELD	359:16	359:16	18	b
LEAF_NODE	359:16	359:16	19	b
LEAF_NODE	359:17	359:17	15	;
LEAF_NODE	360:3	360:3	11	}
SELECTION	360:5	360:10	9	
KEYWORD	360:5	360:5	10	else
LEAF_NODE	360:5	360:5	11	else
STATEMENTS	360:10	364:3	10	
LEAF_NODE	360:10	360:10	11	{
STATEMENTS	361:4	362:4	11	
EXPR_STATEMENT	361:4	361:14	12	rc = * bp ++ ;
EXPR	361:4	361:4	13	rc = * bp ++
ASSIGN	361:4	361:9	14	rc = * bp ++
LVAL	361:4	361:4	15	rc
FIELD	361:4	361:4	16	rc
LEAF_NODE	361:4	361:4	17	rc
ASSIGN_OP	361:7	361:7	15	=
LEAF_NODE	361:7	361:7	16	=
RVAL	361:9	361:9	15	* bp ++
UNARY_EXPR	361:9	361:10	16	* bp ++
UNARY_OPERATOR	361:9	361:9	17	*
LEAF_NODE	361:9	361:9	18	*
FIELD	361:10	361:12	17	bp ++
LEAF_NODE	361:10	361:10	18	bp
LEAF_NODE	361:12	361:12	18	++
LEAF_NODE	361:14	361:14	13	;
ITERATION	362:4	363:5	12	
KEYWORD	362:4	362:4	13	while
LEAF_NODE	362:4	362:4	14	while
LEAF_NODE	362:10	362:10	13	(
CONDITION	362:11	362:11	13	-- cc && rc -- && i < npixels
EXPR	362:11	362:11	14	-- cc && rc -- && i < npixels
AND	362:11	362:19	15	-- cc && rc -- && i < npixels
EXPR	362:11	362:13	16	-- cc
LEAF_NODE	362:11	362:11	17	--
FIELD	362:13	362:13	17	cc
LEAF_NODE	362:13	362:13	18	cc
LEAF_NODE	362:16	362:16	16	&&
EXPR	362:19	362:19	16	rc -- && i < npixels
AND	362:19	362:27	17	rc -- && i < npixels
EXPR	362:19	362:19	18	rc --
FIELD	362:19	362:21	19	rc --
LEAF_NODE	362:19	362:19	20	rc
LEAF_NODE	362:21	362:21	20	--
LEAF_NODE	362:24	362:24	18	&&
EXPR	362:27	362:31	18	i < npixels
FIELD	362:27	362:27	19	i
LEAF_NODE	362:27	362:27	20	i
REL_OPERATOR	362:29	362:29	19	<
LEAF_NODE	362:29	362:29	20	<
FIELD	362:31	362:31	19	npixels
LEAF_NODE	362:31	362:31	20	npixels
LEAF_NODE	362:38	362:38	13	)
STATEMENTS	363:5	363:5	13	
EXPR_STATEMENT	363:5	363:37	14	tp [ i ++ ] |= ( uint32 ) * bp ++ << shft ;
EXPR	363:5	363:5	15	tp [ i ++ ] |= ( uint32 ) * bp ++ << shft
ASSIGN	363:5	363:16	16	tp [ i ++ ] |= ( uint32 ) * bp ++ << shft
LVAL	363:5	363:5	17	tp [ i ++ ]
FIELD	363:5	363:11	18	tp [ i ++ ]
LEAF_NODE	363:5	363:5	19	tp
LEAF_NODE	363:7	363:7	19	[
EXPR	363:8	363:8	19	i ++
FIELD	363:8	363:9	20	i ++
LEAF_NODE	363:8	363:8	21	i
LEAF_NODE	363:9	363:9	21	++
LEAF_NODE	363:11	363:11	19	]
ASSIGN_OP	363:13	363:13	17	|=
LEAF_NODE	363:13	363:13	18	|=
RVAL	363:16	363:33	17	( uint32 ) * bp ++ << shft
LEAF_NODE	363:16	363:16	18	(
TYPE_NAME	363:17	363:17	18	uint32
LEAF_NODE	363:17	363:17	19	uint32
LEAF_NODE	363:23	363:23	18	)
UNARY_EXPR	363:24	363:25	18	* bp ++
UNARY_OPERATOR	363:24	363:24	19	*
LEAF_NODE	363:24	363:24	20	*
FIELD	363:25	363:27	19	bp ++
LEAF_NODE	363:25	363:25	20	bp
LEAF_NODE	363:27	363:27	20	++
LEAF_NODE	363:30	363:30	18	<<
FIELD	363:33	363:33	18	shft
LEAF_NODE	363:33	363:33	19	shft
LEAF_NODE	363:37	363:37	15	;
LEAF_NODE	364:3	364:3	11	}
LEAF_NODE	365:2	365:2	8	}
SELECTION	366:2	366:20	6	
KEYWORD	366:2	366:2	7	if
LEAF_NODE	366:2	366:2	8	if
LEAF_NODE	366:5	366:5	7	(
CONDITION	366:6	366:6	7	i != npixels
EXPR	366:6	366:11	8	i != npixels
FIELD	366:6	366:6	9	i
LEAF_NODE	366:6	366:6	10	i
EQ_OPERATOR	366:8	366:8	9	!=
LEAF_NODE	366:8	366:8	10	!=
FIELD	366:11	366:11	9	npixels
LEAF_NODE	366:11	366:11	10	npixels
LEAF_NODE	366:18	366:18	7	)
STATEMENTS	366:20	381:2	7	
LEAF_NODE	366:20	366:20	8	{
STATEMENTS	368:3	380:3	8	
EXPR_STATEMENT	368:3	371:42	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at row %lu (short %I64d pixels)" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) ( npixels - i ) ) ;
EXPR	368:3	368:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at row %lu (short %I64d pixels)" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) ( npixels - i ) )
FUNCTION_CALL	368:3	371:41	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Not enough data at row %lu (short %I64d pixels)" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) ( npixels - i ) )
CALLEE	368:3	368:3	12	TIFFErrorExt
LEAF_NODE	368:3	368:3	13	TIFFErrorExt
LEAF_NODE	368:15	368:15	12	(
ARGUMENT	368:16	368:16	12	tif -> tif_clientdata
FIELD	368:16	368:21	13	tif -> tif_clientdata
LEAF_NODE	368:16	368:16	14	tif
LEAF_NODE	368:19	368:19	14	->
LEAF_NODE	368:21	368:21	14	tif_clientdata
LEAF_NODE	368:35	368:35	12	,
ARGUMENT	368:37	368:37	12	module
FIELD	368:37	368:37	13	module
LEAF_NODE	368:37	368:37	14	module
LEAF_NODE	368:43	368:43	12	,
ARGUMENT	369:3	369:3	12	"Not enough data at row %lu (short %I64d pixels)"
FIELD	369:3	369:3	13	"Not enough data at row %lu (short %I64d pixels)"
LEAF_NODE	369:3	369:3	14	"Not enough data at row %lu (short %I64d pixels)"
LEAF_NODE	369:52	369:52	12	,
ARGUMENT	370:9	370:25	12	( unsigned long ) tif -> tif_row
LEAF_NODE	370:9	370:9	13	(
TYPE_NAME	370:10	370:19	13	unsigned long
LEAF_NODE	370:10	370:10	14	unsigned
LEAF_NODE	370:19	370:19	14	long
LEAF_NODE	370:23	370:23	13	)
FIELD	370:25	370:30	13	tif -> tif_row
LEAF_NODE	370:25	370:25	14	tif
LEAF_NODE	370:28	370:28	14	->
LEAF_NODE	370:30	370:30	14	tif_row
LEAF_NODE	370:37	370:37	12	,
ARGUMENT	371:9	371:40	12	( unsigned __int64 ) ( npixels - i )
LEAF_NODE	371:9	371:9	13	(
TYPE_NAME	371:10	371:19	13	unsigned __int64
LEAF_NODE	371:10	371:10	14	unsigned
LEAF_NODE	371:19	371:19	14	__int64
LEAF_NODE	371:26	371:26	13	)
LEAF_NODE	371:28	371:28	13	(
FIELD	371:29	371:29	13	npixels
LEAF_NODE	371:29	371:29	14	npixels
LEAF_NODE	371:37	371:37	13	-
FIELD	371:39	371:39	13	i
LEAF_NODE	371:39	371:39	14	i
LEAF_NODE	371:40	371:40	13	)
LEAF_NODE	371:41	371:41	12	)
LEAF_NODE	371:42	371:42	10	;
LEAF_NODE	373:3	373:3	9	TIFFErrorExt
LEAF_NODE	373:15	373:15	9	(
LEAF_NODE	373:16	373:16	9	tif
LEAF_NODE	373:19	373:19	9	->
LEAF_NODE	373:21	373:21	9	tif_clientdata
LEAF_NODE	373:35	373:35	9	,
LEAF_NODE	373:37	373:37	9	module
LEAF_NODE	373:43	373:43	9	,
LEAF_NODE	374:3	374:3	9	"Not enough data at row %lu (short %llu pixels)"
LEAF_NODE	374:51	374:51	9	,
LEAF_NODE	375:9	375:9	9	(
LEAF_NODE	375:10	375:10	9	unsigned
LEAF_NODE	375:19	375:19	9	long
LEAF_NODE	375:23	375:23	9	)
LEAF_NODE	375:25	375:25	9	tif
LEAF_NODE	375:28	375:28	9	->
LEAF_NODE	375:30	375:30	9	tif_row
LEAF_NODE	375:37	375:37	9	,
LEAF_NODE	376:9	376:9	9	(
LEAF_NODE	376:10	376:10	9	unsigned
LEAF_NODE	376:19	376:19	9	long
LEAF_NODE	376:24	376:24	9	long
LEAF_NODE	376:28	376:28	9	)
LEAF_NODE	376:30	376:30	9	(
LEAF_NODE	376:31	376:31	9	npixels
LEAF_NODE	376:39	376:39	9	-
LEAF_NODE	376:41	376:41	9	i
LEAF_NODE	376:42	376:42	9	)
LEAF_NODE	376:43	376:43	9	)
LEAF_NODE	376:44	376:44	9	;
EXPR_STATEMENT	378:3	378:31	9	tif -> tif_rawcp = ( uint8 * ) bp ;
EXPR	378:3	378:3	10	tif -> tif_rawcp = ( uint8 * ) bp
ASSIGN	378:3	378:20	11	tif -> tif_rawcp = ( uint8 * ) bp
LVAL	378:3	378:3	12	tif -> tif_rawcp
FIELD	378:3	378:8	13	tif -> tif_rawcp
LEAF_NODE	378:3	378:3	14	tif
LEAF_NODE	378:6	378:6	14	->
LEAF_NODE	378:8	378:8	14	tif_rawcp
ASSIGN_OP	378:18	378:18	12	=
LEAF_NODE	378:18	378:18	13	=
RVAL	378:20	378:29	12	( uint8 * ) bp
LEAF_NODE	378:20	378:20	13	(
TYPE_NAME	378:21	378:21	13	uint8
LEAF_NODE	378:21	378:21	14	uint8
LEAF_NODE	378:26	378:26	13	*
LEAF_NODE	378:27	378:27	13	)
FIELD	378:29	378:29	13	bp
LEAF_NODE	378:29	378:29	14	bp
LEAF_NODE	378:31	378:31	10	;
EXPR_STATEMENT	379:3	379:22	9	tif -> tif_rawcc = cc ;
EXPR	379:3	379:3	10	tif -> tif_rawcc = cc
ASSIGN	379:3	379:20	11	tif -> tif_rawcc = cc
LVAL	379:3	379:3	12	tif -> tif_rawcc
FIELD	379:3	379:8	13	tif -> tif_rawcc
LEAF_NODE	379:3	379:3	14	tif
LEAF_NODE	379:6	379:6	14	->
LEAF_NODE	379:8	379:8	14	tif_rawcc
ASSIGN_OP	379:18	379:18	12	=
LEAF_NODE	379:18	379:18	13	=
RVAL	379:20	379:20	12	cc
FIELD	379:20	379:20	13	cc
LEAF_NODE	379:20	379:20	14	cc
LEAF_NODE	379:22	379:22	10	;
JUMP_STATEMENT	380:3	380:13	9	return ( 0 ) ;
KEYWORD	380:3	380:3	10	return
LEAF_NODE	380:3	380:3	11	return
DESTINATION	380:10	380:10	10	( 0 )
EXPR	380:10	380:12	11	( 0 )
LEAF_NODE	380:10	380:10	12	(
FIELD	380:11	380:11	12	0
LEAF_NODE	380:11	380:11	13	0
LEAF_NODE	380:12	380:12	12	)
LEAF_NODE	380:13	380:13	10	;
LEAF_NODE	381:2	381:2	8	}
LEAF_NODE	382:1	382:1	5	}
EXPR_STATEMENT	383:1	383:30	3	( * sp -> tfunc ) ( sp , op , npixels ) ;
EXPR	383:1	383:1	4	( * sp -> tfunc ) ( sp , op , npixels )
FUNCTION_CALL	383:1	383:29	5	( * sp -> tfunc ) ( sp , op , npixels )
CALLEE	383:1	383:12	6	( * sp -> tfunc )
LEAF_NODE	383:1	383:1	7	(
UNARY_EXPR	383:2	383:3	7	* sp -> tfunc
UNARY_OPERATOR	383:2	383:2	8	*
LEAF_NODE	383:2	383:2	9	*
FIELD	383:3	383:7	8	sp -> tfunc
LEAF_NODE	383:3	383:3	9	sp
LEAF_NODE	383:5	383:5	9	->
LEAF_NODE	383:7	383:7	9	tfunc
LEAF_NODE	383:12	383:12	7	)
LEAF_NODE	383:13	383:13	6	(
ARGUMENT	383:14	383:14	6	sp
FIELD	383:14	383:14	7	sp
LEAF_NODE	383:14	383:14	8	sp
LEAF_NODE	383:16	383:16	6	,
ARGUMENT	383:18	383:18	6	op
FIELD	383:18	383:18	7	op
LEAF_NODE	383:18	383:18	8	op
LEAF_NODE	383:20	383:20	6	,
ARGUMENT	383:22	383:22	6	npixels
FIELD	383:22	383:22	7	npixels
LEAF_NODE	383:22	383:22	8	npixels
LEAF_NODE	383:29	383:29	6	)
LEAF_NODE	383:30	383:30	4	;
EXPR_STATEMENT	384:1	384:29	3	tif -> tif_rawcp = ( uint8 * ) bp ;
EXPR	384:1	384:1	4	tif -> tif_rawcp = ( uint8 * ) bp
ASSIGN	384:1	384:18	5	tif -> tif_rawcp = ( uint8 * ) bp
LVAL	384:1	384:1	6	tif -> tif_rawcp
FIELD	384:1	384:6	7	tif -> tif_rawcp
LEAF_NODE	384:1	384:1	8	tif
LEAF_NODE	384:4	384:4	8	->
LEAF_NODE	384:6	384:6	8	tif_rawcp
ASSIGN_OP	384:16	384:16	6	=
LEAF_NODE	384:16	384:16	7	=
RVAL	384:18	384:27	6	( uint8 * ) bp
LEAF_NODE	384:18	384:18	7	(
TYPE_NAME	384:19	384:19	7	uint8
LEAF_NODE	384:19	384:19	8	uint8
LEAF_NODE	384:24	384:24	7	*
LEAF_NODE	384:25	384:25	7	)
FIELD	384:27	384:27	7	bp
LEAF_NODE	384:27	384:27	8	bp
LEAF_NODE	384:29	384:29	4	;
EXPR_STATEMENT	385:1	385:20	3	tif -> tif_rawcc = cc ;
EXPR	385:1	385:1	4	tif -> tif_rawcc = cc
ASSIGN	385:1	385:18	5	tif -> tif_rawcc = cc
LVAL	385:1	385:1	6	tif -> tif_rawcc
FIELD	385:1	385:6	7	tif -> tif_rawcc
LEAF_NODE	385:1	385:1	8	tif
LEAF_NODE	385:4	385:4	8	->
LEAF_NODE	385:6	385:6	8	tif_rawcc
ASSIGN_OP	385:16	385:16	6	=
LEAF_NODE	385:16	385:16	7	=
RVAL	385:18	385:18	6	cc
FIELD	385:18	385:18	7	cc
LEAF_NODE	385:18	385:18	8	cc
LEAF_NODE	385:20	385:20	4	;
JUMP_STATEMENT	386:1	386:11	3	return ( 1 ) ;
KEYWORD	386:1	386:1	4	return
LEAF_NODE	386:1	386:1	5	return
DESTINATION	386:8	386:8	4	( 1 )
EXPR	386:8	386:10	5	( 1 )
LEAF_NODE	386:8	386:8	6	(
FIELD	386:9	386:9	6	1
LEAF_NODE	386:9	386:9	7	1
LEAF_NODE	386:10	386:10	6	)
LEAF_NODE	386:11	386:11	4	;
LEAF_NODE	387:0	387:0	2	}
FUNCTION_DEF	394:0	408:0	1	
RETURN_TYPE	394:0	394:7	2	static int
LEAF_NODE	394:0	394:0	3	static
TYPE_NAME	394:7	394:7	3	int
LEAF_NODE	394:7	394:7	4	int
FUNCTION_NAME	395:0	395:0	2	LogLuvDecodeStrip
LEAF_NODE	395:0	395:0	3	LogLuvDecodeStrip
PARAMETER_LIST	395:17	395:61	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	395:17	395:17	3	(
PARAMETER_DECL	395:18	395:24	3	TIFF * tif
TYPE	395:18	395:22	4	TIFF *
TYPE_NAME	395:18	395:18	5	TIFF
LEAF_NODE	395:18	395:18	6	TIFF
POINTER	395:22	395:22	5	*
LEAF_NODE	395:22	395:22	6	*
NAME	395:24	395:24	4	tif
LEAF_NODE	395:24	395:24	5	tif
LEAF_NODE	395:27	395:27	3	,
PARAMETER_DECL	395:29	395:36	3	uint8 * bp
TYPE	395:29	395:34	4	uint8 *
TYPE_NAME	395:29	395:29	5	uint8
LEAF_NODE	395:29	395:29	6	uint8
POINTER	395:34	395:34	5	*
LEAF_NODE	395:34	395:34	6	*
NAME	395:36	395:36	4	bp
LEAF_NODE	395:36	395:36	5	bp
LEAF_NODE	395:38	395:38	3	,
PARAMETER_DECL	395:40	395:49	3	tmsize_t cc
TYPE	395:40	395:40	4	tmsize_t
TYPE_NAME	395:40	395:40	5	tmsize_t
LEAF_NODE	395:40	395:40	6	tmsize_t
NAME	395:49	395:49	4	cc
LEAF_NODE	395:49	395:49	5	cc
LEAF_NODE	395:51	395:51	3	,
PARAMETER_DECL	395:53	395:60	3	uint16 s
TYPE	395:53	395:53	4	uint16
TYPE_NAME	395:53	395:53	5	uint16
LEAF_NODE	395:53	395:53	6	uint16
NAME	395:60	395:60	4	s
LEAF_NODE	395:60	395:60	5	s
LEAF_NODE	395:61	395:61	3	)
LEAF_NODE	396:0	396:0	2	{
STATEMENTS	397:1	407:1	2	
SIMPLE_DECL	397:1	397:40	3	tmsize_t rowlen ; rowlen = TIFFScanlineSize ( tif ) ;
VAR_DECL	397:1	397:10	4	tmsize_t rowlen ; rowlen = TIFFScanlineSize ( tif )
TYPE	397:1	397:1	5	tmsize_t
TYPE_NAME	397:1	397:1	6	tmsize_t
LEAF_NODE	397:1	397:1	7	tmsize_t
NAME	397:10	397:10	5	rowlen
LEAF_NODE	397:10	397:10	6	rowlen
LEAF_NODE	0:0	0:0	5	;
INIT	397:10	397:10	5	rowlen = TIFFScanlineSize ( tif )
ASSIGN	397:10	397:19	6	rowlen = TIFFScanlineSize ( tif )
LVAL	397:10	397:10	7	rowlen
NAME	397:10	397:10	8	rowlen
LEAF_NODE	397:10	397:10	9	rowlen
ASSIGN_OP	397:17	397:17	7	=
LEAF_NODE	397:17	397:17	8	=
RVAL	397:19	397:19	7	TIFFScanlineSize ( tif )
FUNCTION_CALL	397:19	397:39	8	TIFFScanlineSize ( tif )
CALLEE	397:19	397:19	9	TIFFScanlineSize
LEAF_NODE	397:19	397:19	10	TIFFScanlineSize
LEAF_NODE	397:35	397:35	9	(
ARGUMENT	397:36	397:36	9	tif
FIELD	397:36	397:36	10	tif
LEAF_NODE	397:36	397:36	11	tif
LEAF_NODE	397:39	397:39	9	)
LEAF_NODE	397:40	397:40	4	;
SELECTION	399:8	400:16	3	
KEYWORD	399:8	399:8	4	if
LEAF_NODE	399:8	399:8	5	if
LEAF_NODE	399:11	399:11	4	(
CONDITION	399:12	399:12	4	rowlen == 0
EXPR	399:12	399:22	5	rowlen == 0
FIELD	399:12	399:12	6	rowlen
LEAF_NODE	399:12	399:12	7	rowlen
EQ_OPERATOR	399:19	399:19	6	==
LEAF_NODE	399:19	399:19	7	==
FIELD	399:22	399:22	6	0
LEAF_NODE	399:22	399:22	7	0
LEAF_NODE	399:23	399:23	4	)
STATEMENTS	400:16	400:16	4	
JUMP_STATEMENT	400:16	400:24	5	return 0 ;
KEYWORD	400:16	400:16	6	return
LEAF_NODE	400:16	400:16	7	return
DESTINATION	400:23	400:23	6	0
EXPR	400:23	400:23	7	0
FIELD	400:23	400:23	8	0
LEAF_NODE	400:23	400:23	9	0
LEAF_NODE	400:24	400:24	6	;
EXPR_STATEMENT	402:1	402:23	3	assert ( cc % rowlen == 0 ) ;
EXPR	402:1	402:1	4	assert ( cc % rowlen == 0 )
FUNCTION_CALL	402:1	402:22	5	assert ( cc % rowlen == 0 )
CALLEE	402:1	402:1	6	assert
LEAF_NODE	402:1	402:1	7	assert
LEAF_NODE	402:7	402:7	6	(
ARGUMENT	402:8	402:21	6	cc % rowlen == 0
FIELD	402:8	402:8	7	cc
LEAF_NODE	402:8	402:8	8	cc
LEAF_NODE	402:10	402:10	7	%
FIELD	402:11	402:11	7	rowlen
LEAF_NODE	402:11	402:11	8	rowlen
EQ_OPERATOR	402:18	402:18	7	==
LEAF_NODE	402:18	402:18	8	==
FIELD	402:21	402:21	7	0
LEAF_NODE	402:21	402:21	8	0
LEAF_NODE	402:22	402:22	6	)
LEAF_NODE	402:23	402:23	4	;
ITERATION	403:1	403:57	3	
KEYWORD	403:1	403:1	4	while
LEAF_NODE	403:1	403:1	5	while
LEAF_NODE	403:7	403:7	4	(
CONDITION	403:8	403:8	4	cc && ( * tif -> tif_decoderow ) ( tif , bp , rowlen , s )
EXPR	403:8	403:8	5	cc && ( * tif -> tif_decoderow ) ( tif , bp , rowlen , s )
AND	403:8	403:14	6	cc && ( * tif -> tif_decoderow ) ( tif , bp , rowlen , s )
EXPR	403:8	403:8	7	cc
FIELD	403:8	403:8	8	cc
LEAF_NODE	403:8	403:8	9	cc
LEAF_NODE	403:11	403:11	7	&&
EXPR	403:14	403:14	7	( * tif -> tif_decoderow ) ( tif , bp , rowlen , s )
FUNCTION_CALL	403:14	403:54	8	( * tif -> tif_decoderow ) ( tif , bp , rowlen , s )
CALLEE	403:14	403:34	9	( * tif -> tif_decoderow )
LEAF_NODE	403:14	403:14	10	(
UNARY_EXPR	403:15	403:16	10	* tif -> tif_decoderow
UNARY_OPERATOR	403:15	403:15	11	*
LEAF_NODE	403:15	403:15	12	*
FIELD	403:16	403:21	11	tif -> tif_decoderow
LEAF_NODE	403:16	403:16	12	tif
LEAF_NODE	403:19	403:19	12	->
LEAF_NODE	403:21	403:21	12	tif_decoderow
LEAF_NODE	403:34	403:34	10	)
LEAF_NODE	403:35	403:35	9	(
ARGUMENT	403:36	403:36	9	tif
FIELD	403:36	403:36	10	tif
LEAF_NODE	403:36	403:36	11	tif
LEAF_NODE	403:39	403:39	9	,
ARGUMENT	403:41	403:41	9	bp
FIELD	403:41	403:41	10	bp
LEAF_NODE	403:41	403:41	11	bp
LEAF_NODE	403:43	403:43	9	,
ARGUMENT	403:45	403:45	9	rowlen
FIELD	403:45	403:45	10	rowlen
LEAF_NODE	403:45	403:45	11	rowlen
LEAF_NODE	403:51	403:51	9	,
ARGUMENT	403:53	403:53	9	s
FIELD	403:53	403:53	10	s
LEAF_NODE	403:53	403:53	11	s
LEAF_NODE	403:54	403:54	9	)
LEAF_NODE	403:55	403:55	4	)
STATEMENTS	403:57	406:1	4	
LEAF_NODE	403:57	403:57	5	{
STATEMENTS	404:2	405:2	5	
EXPR_STATEMENT	404:2	404:14	6	bp += rowlen ;
EXPR	404:2	404:2	7	bp += rowlen
ASSIGN	404:2	404:8	8	bp += rowlen
LVAL	404:2	404:2	9	bp
FIELD	404:2	404:2	10	bp
LEAF_NODE	404:2	404:2	11	bp
ASSIGN_OP	404:5	404:5	9	+=
LEAF_NODE	404:5	404:5	10	+=
RVAL	404:8	404:8	9	rowlen
FIELD	404:8	404:8	10	rowlen
LEAF_NODE	404:8	404:8	11	rowlen
LEAF_NODE	404:14	404:14	7	;
EXPR_STATEMENT	405:2	405:14	6	cc -= rowlen ;
EXPR	405:2	405:2	7	cc -= rowlen
ASSIGN	405:2	405:8	8	cc -= rowlen
LVAL	405:2	405:2	9	cc
FIELD	405:2	405:2	10	cc
LEAF_NODE	405:2	405:2	11	cc
ASSIGN_OP	405:5	405:5	9	-=
LEAF_NODE	405:5	405:5	10	-=
RVAL	405:8	405:8	9	rowlen
FIELD	405:8	405:8	10	rowlen
LEAF_NODE	405:8	405:8	11	rowlen
LEAF_NODE	405:14	405:14	7	;
LEAF_NODE	406:1	406:1	5	}
JUMP_STATEMENT	407:1	407:17	3	return ( cc == 0 ) ;
KEYWORD	407:1	407:1	4	return
LEAF_NODE	407:1	407:1	5	return
DESTINATION	407:8	407:8	4	( cc == 0 )
EXPR	407:8	407:16	5	( cc == 0 )
LEAF_NODE	407:8	407:8	6	(
FIELD	407:9	407:9	6	cc
LEAF_NODE	407:9	407:9	7	cc
EQ_OPERATOR	407:12	407:12	6	==
LEAF_NODE	407:12	407:12	7	==
FIELD	407:15	407:15	6	0
LEAF_NODE	407:15	407:15	7	0
LEAF_NODE	407:16	407:16	6	)
LEAF_NODE	407:17	407:17	4	;
LEAF_NODE	408:0	408:0	2	}
FUNCTION_DEF	415:0	429:0	1	
RETURN_TYPE	415:0	415:7	2	static int
LEAF_NODE	415:0	415:0	3	static
TYPE_NAME	415:7	415:7	3	int
LEAF_NODE	415:7	415:7	4	int
FUNCTION_NAME	416:0	416:0	2	LogLuvDecodeTile
LEAF_NODE	416:0	416:0	3	LogLuvDecodeTile
PARAMETER_LIST	416:16	416:60	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	416:16	416:16	3	(
PARAMETER_DECL	416:17	416:23	3	TIFF * tif
TYPE	416:17	416:21	4	TIFF *
TYPE_NAME	416:17	416:17	5	TIFF
LEAF_NODE	416:17	416:17	6	TIFF
POINTER	416:21	416:21	5	*
LEAF_NODE	416:21	416:21	6	*
NAME	416:23	416:23	4	tif
LEAF_NODE	416:23	416:23	5	tif
LEAF_NODE	416:26	416:26	3	,
PARAMETER_DECL	416:28	416:35	3	uint8 * bp
TYPE	416:28	416:33	4	uint8 *
TYPE_NAME	416:28	416:28	5	uint8
LEAF_NODE	416:28	416:28	6	uint8
POINTER	416:33	416:33	5	*
LEAF_NODE	416:33	416:33	6	*
NAME	416:35	416:35	4	bp
LEAF_NODE	416:35	416:35	5	bp
LEAF_NODE	416:37	416:37	3	,
PARAMETER_DECL	416:39	416:48	3	tmsize_t cc
TYPE	416:39	416:39	4	tmsize_t
TYPE_NAME	416:39	416:39	5	tmsize_t
LEAF_NODE	416:39	416:39	6	tmsize_t
NAME	416:48	416:48	4	cc
LEAF_NODE	416:48	416:48	5	cc
LEAF_NODE	416:50	416:50	3	,
PARAMETER_DECL	416:52	416:59	3	uint16 s
TYPE	416:52	416:52	4	uint16
TYPE_NAME	416:52	416:52	5	uint16
LEAF_NODE	416:52	416:52	6	uint16
NAME	416:59	416:59	4	s
LEAF_NODE	416:59	416:59	5	s
LEAF_NODE	416:60	416:60	3	)
LEAF_NODE	417:0	417:0	2	{
STATEMENTS	418:1	428:1	2	
SIMPLE_DECL	418:1	418:39	3	tmsize_t rowlen ; rowlen = TIFFTileRowSize ( tif ) ;
VAR_DECL	418:1	418:10	4	tmsize_t rowlen ; rowlen = TIFFTileRowSize ( tif )
TYPE	418:1	418:1	5	tmsize_t
TYPE_NAME	418:1	418:1	6	tmsize_t
LEAF_NODE	418:1	418:1	7	tmsize_t
NAME	418:10	418:10	5	rowlen
LEAF_NODE	418:10	418:10	6	rowlen
LEAF_NODE	0:0	0:0	5	;
INIT	418:10	418:10	5	rowlen = TIFFTileRowSize ( tif )
ASSIGN	418:10	418:19	6	rowlen = TIFFTileRowSize ( tif )
LVAL	418:10	418:10	7	rowlen
NAME	418:10	418:10	8	rowlen
LEAF_NODE	418:10	418:10	9	rowlen
ASSIGN_OP	418:17	418:17	7	=
LEAF_NODE	418:17	418:17	8	=
RVAL	418:19	418:19	7	TIFFTileRowSize ( tif )
FUNCTION_CALL	418:19	418:38	8	TIFFTileRowSize ( tif )
CALLEE	418:19	418:19	9	TIFFTileRowSize
LEAF_NODE	418:19	418:19	10	TIFFTileRowSize
LEAF_NODE	418:34	418:34	9	(
ARGUMENT	418:35	418:35	9	tif
FIELD	418:35	418:35	10	tif
LEAF_NODE	418:35	418:35	11	tif
LEAF_NODE	418:38	418:38	9	)
LEAF_NODE	418:39	418:39	4	;
SELECTION	420:8	421:16	3	
KEYWORD	420:8	420:8	4	if
LEAF_NODE	420:8	420:8	5	if
LEAF_NODE	420:11	420:11	4	(
CONDITION	420:12	420:12	4	rowlen == 0
EXPR	420:12	420:22	5	rowlen == 0
FIELD	420:12	420:12	6	rowlen
LEAF_NODE	420:12	420:12	7	rowlen
EQ_OPERATOR	420:19	420:19	6	==
LEAF_NODE	420:19	420:19	7	==
FIELD	420:22	420:22	6	0
LEAF_NODE	420:22	420:22	7	0
LEAF_NODE	420:23	420:23	4	)
STATEMENTS	421:16	421:16	4	
JUMP_STATEMENT	421:16	421:24	5	return 0 ;
KEYWORD	421:16	421:16	6	return
LEAF_NODE	421:16	421:16	7	return
DESTINATION	421:23	421:23	6	0
EXPR	421:23	421:23	7	0
FIELD	421:23	421:23	8	0
LEAF_NODE	421:23	421:23	9	0
LEAF_NODE	421:24	421:24	6	;
EXPR_STATEMENT	423:1	423:23	3	assert ( cc % rowlen == 0 ) ;
EXPR	423:1	423:1	4	assert ( cc % rowlen == 0 )
FUNCTION_CALL	423:1	423:22	5	assert ( cc % rowlen == 0 )
CALLEE	423:1	423:1	6	assert
LEAF_NODE	423:1	423:1	7	assert
LEAF_NODE	423:7	423:7	6	(
ARGUMENT	423:8	423:21	6	cc % rowlen == 0
FIELD	423:8	423:8	7	cc
LEAF_NODE	423:8	423:8	8	cc
LEAF_NODE	423:10	423:10	7	%
FIELD	423:11	423:11	7	rowlen
LEAF_NODE	423:11	423:11	8	rowlen
EQ_OPERATOR	423:18	423:18	7	==
LEAF_NODE	423:18	423:18	8	==
FIELD	423:21	423:21	7	0
LEAF_NODE	423:21	423:21	8	0
LEAF_NODE	423:22	423:22	6	)
LEAF_NODE	423:23	423:23	4	;
ITERATION	424:1	424:57	3	
KEYWORD	424:1	424:1	4	while
LEAF_NODE	424:1	424:1	5	while
LEAF_NODE	424:7	424:7	4	(
CONDITION	424:8	424:8	4	cc && ( * tif -> tif_decoderow ) ( tif , bp , rowlen , s )
EXPR	424:8	424:8	5	cc && ( * tif -> tif_decoderow ) ( tif , bp , rowlen , s )
AND	424:8	424:14	6	cc && ( * tif -> tif_decoderow ) ( tif , bp , rowlen , s )
EXPR	424:8	424:8	7	cc
FIELD	424:8	424:8	8	cc
LEAF_NODE	424:8	424:8	9	cc
LEAF_NODE	424:11	424:11	7	&&
EXPR	424:14	424:14	7	( * tif -> tif_decoderow ) ( tif , bp , rowlen , s )
FUNCTION_CALL	424:14	424:54	8	( * tif -> tif_decoderow ) ( tif , bp , rowlen , s )
CALLEE	424:14	424:34	9	( * tif -> tif_decoderow )
LEAF_NODE	424:14	424:14	10	(
UNARY_EXPR	424:15	424:16	10	* tif -> tif_decoderow
UNARY_OPERATOR	424:15	424:15	11	*
LEAF_NODE	424:15	424:15	12	*
FIELD	424:16	424:21	11	tif -> tif_decoderow
LEAF_NODE	424:16	424:16	12	tif
LEAF_NODE	424:19	424:19	12	->
LEAF_NODE	424:21	424:21	12	tif_decoderow
LEAF_NODE	424:34	424:34	10	)
LEAF_NODE	424:35	424:35	9	(
ARGUMENT	424:36	424:36	9	tif
FIELD	424:36	424:36	10	tif
LEAF_NODE	424:36	424:36	11	tif
LEAF_NODE	424:39	424:39	9	,
ARGUMENT	424:41	424:41	9	bp
FIELD	424:41	424:41	10	bp
LEAF_NODE	424:41	424:41	11	bp
LEAF_NODE	424:43	424:43	9	,
ARGUMENT	424:45	424:45	9	rowlen
FIELD	424:45	424:45	10	rowlen
LEAF_NODE	424:45	424:45	11	rowlen
LEAF_NODE	424:51	424:51	9	,
ARGUMENT	424:53	424:53	9	s
FIELD	424:53	424:53	10	s
LEAF_NODE	424:53	424:53	11	s
LEAF_NODE	424:54	424:54	9	)
LEAF_NODE	424:55	424:55	4	)
STATEMENTS	424:57	427:1	4	
LEAF_NODE	424:57	424:57	5	{
STATEMENTS	425:2	426:2	5	
EXPR_STATEMENT	425:2	425:14	6	bp += rowlen ;
EXPR	425:2	425:2	7	bp += rowlen
ASSIGN	425:2	425:8	8	bp += rowlen
LVAL	425:2	425:2	9	bp
FIELD	425:2	425:2	10	bp
LEAF_NODE	425:2	425:2	11	bp
ASSIGN_OP	425:5	425:5	9	+=
LEAF_NODE	425:5	425:5	10	+=
RVAL	425:8	425:8	9	rowlen
FIELD	425:8	425:8	10	rowlen
LEAF_NODE	425:8	425:8	11	rowlen
LEAF_NODE	425:14	425:14	7	;
EXPR_STATEMENT	426:2	426:14	6	cc -= rowlen ;
EXPR	426:2	426:2	7	cc -= rowlen
ASSIGN	426:2	426:8	8	cc -= rowlen
LVAL	426:2	426:2	9	cc
FIELD	426:2	426:2	10	cc
LEAF_NODE	426:2	426:2	11	cc
ASSIGN_OP	426:5	426:5	9	-=
LEAF_NODE	426:5	426:5	10	-=
RVAL	426:8	426:8	9	rowlen
FIELD	426:8	426:8	10	rowlen
LEAF_NODE	426:8	426:8	11	rowlen
LEAF_NODE	426:14	426:14	7	;
LEAF_NODE	427:1	427:1	5	}
JUMP_STATEMENT	428:1	428:17	3	return ( cc == 0 ) ;
KEYWORD	428:1	428:1	4	return
LEAF_NODE	428:1	428:1	5	return
DESTINATION	428:8	428:8	4	( cc == 0 )
EXPR	428:8	428:16	5	( cc == 0 )
LEAF_NODE	428:8	428:8	6	(
FIELD	428:9	428:9	6	cc
LEAF_NODE	428:9	428:9	7	cc
EQ_OPERATOR	428:12	428:12	6	==
LEAF_NODE	428:12	428:12	7	==
FIELD	428:15	428:15	6	0
LEAF_NODE	428:15	428:15	7	0
LEAF_NODE	428:16	428:16	6	)
LEAF_NODE	428:17	428:17	4	;
LEAF_NODE	429:0	429:0	2	}
FUNCTION_DEF	434:0	528:0	1	
RETURN_TYPE	434:0	434:7	2	static int
LEAF_NODE	434:0	434:0	3	static
TYPE_NAME	434:7	434:7	3	int
LEAF_NODE	434:7	434:7	4	int
FUNCTION_NAME	435:0	435:0	2	LogL16Encode
LEAF_NODE	435:0	435:0	3	LogL16Encode
PARAMETER_LIST	435:12	435:56	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	435:12	435:12	3	(
PARAMETER_DECL	435:13	435:19	3	TIFF * tif
TYPE	435:13	435:17	4	TIFF *
TYPE_NAME	435:13	435:13	5	TIFF
LEAF_NODE	435:13	435:13	6	TIFF
POINTER	435:17	435:17	5	*
LEAF_NODE	435:17	435:17	6	*
NAME	435:19	435:19	4	tif
LEAF_NODE	435:19	435:19	5	tif
LEAF_NODE	435:22	435:22	3	,
PARAMETER_DECL	435:24	435:31	3	uint8 * bp
TYPE	435:24	435:29	4	uint8 *
TYPE_NAME	435:24	435:24	5	uint8
LEAF_NODE	435:24	435:24	6	uint8
POINTER	435:29	435:29	5	*
LEAF_NODE	435:29	435:29	6	*
NAME	435:31	435:31	4	bp
LEAF_NODE	435:31	435:31	5	bp
LEAF_NODE	435:33	435:33	3	,
PARAMETER_DECL	435:35	435:44	3	tmsize_t cc
TYPE	435:35	435:35	4	tmsize_t
TYPE_NAME	435:35	435:35	5	tmsize_t
LEAF_NODE	435:35	435:35	6	tmsize_t
NAME	435:44	435:44	4	cc
LEAF_NODE	435:44	435:44	5	cc
LEAF_NODE	435:46	435:46	3	,
PARAMETER_DECL	435:48	435:55	3	uint16 s
TYPE	435:48	435:48	4	uint16
TYPE_NAME	435:48	435:48	5	uint16
LEAF_NODE	435:48	435:48	6	uint16
NAME	435:55	435:55	4	s
LEAF_NODE	435:55	435:55	5	s
LEAF_NODE	435:56	435:56	3	)
LEAF_NODE	436:0	436:0	2	{
STATEMENTS	437:1	527:1	2	
LEAF_NODE	437:1	437:1	3	static
SIMPLE_DECL	437:8	437:44	3	const char [ ] module ; module = "LogL16Encode" ;
VAR_DECL	437:8	437:19	4	const char [ ] module ; module = "LogL16Encode"
TYPE	437:8	437:25	5	const char [ ]
TYPE_NAME	437:8	437:14	6	const char
LEAF_NODE	437:8	437:8	7	const
LEAF_NODE	437:14	437:14	7	char
TYPE_SUFFIX	437:25	437:26	6	[ ]
LEAF_NODE	437:25	437:25	7	[
LEAF_NODE	437:26	437:26	7	]
NAME	437:19	437:19	5	module
LEAF_NODE	437:19	437:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	437:19	437:19	5	module = "LogL16Encode"
ASSIGN	437:19	437:30	6	module = "LogL16Encode"
LVAL	437:19	437:19	7	module
NAME	437:19	437:19	8	module
LEAF_NODE	437:19	437:19	9	module
ASSIGN_OP	437:28	437:28	7	=
LEAF_NODE	437:28	437:28	8	=
RVAL	437:30	437:30	7	"LogL16Encode"
FIELD	437:30	437:30	8	"LogL16Encode"
LEAF_NODE	437:30	437:30	9	"LogL16Encode"
LEAF_NODE	437:44	437:44	4	;
SIMPLE_DECL	438:1	438:36	3	LogLuvState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	438:1	438:14	4	LogLuvState * sp ; sp = EncoderState ( tif )
TYPE	438:1	438:12	5	LogLuvState *
TYPE_NAME	438:1	438:1	6	LogLuvState
LEAF_NODE	438:1	438:1	7	LogLuvState
POINTER	438:12	438:12	6	*
LEAF_NODE	438:12	438:12	7	*
NAME	438:14	438:14	5	sp
LEAF_NODE	438:14	438:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	438:14	438:14	5	sp = EncoderState ( tif )
ASSIGN	438:14	438:19	6	sp = EncoderState ( tif )
LVAL	438:14	438:14	7	sp
NAME	438:14	438:14	8	sp
LEAF_NODE	438:14	438:14	9	sp
ASSIGN_OP	438:17	438:17	7	=
LEAF_NODE	438:17	438:17	8	=
RVAL	438:19	438:19	7	EncoderState ( tif )
FUNCTION_CALL	438:19	438:35	8	EncoderState ( tif )
CALLEE	438:19	438:19	9	EncoderState
LEAF_NODE	438:19	438:19	10	EncoderState
LEAF_NODE	438:31	438:31	9	(
ARGUMENT	438:32	438:32	9	tif
FIELD	438:32	438:32	10	tif
LEAF_NODE	438:32	438:32	11	tif
LEAF_NODE	438:35	438:35	9	)
LEAF_NODE	438:36	438:36	4	;
SIMPLE_DECL	439:1	439:9	3	int shft ;
VAR_DECL	439:1	439:5	4	int shft
TYPE	439:1	439:1	5	int
TYPE_NAME	439:1	439:1	6	int
LEAF_NODE	439:1	439:1	7	int
NAME	439:5	439:5	5	shft
LEAF_NODE	439:5	439:5	6	shft
LEAF_NODE	439:9	439:9	4	;
SIMPLE_DECL	440:1	440:11	3	tmsize_t i ;
VAR_DECL	440:1	440:10	4	tmsize_t i
TYPE	440:1	440:1	5	tmsize_t
TYPE_NAME	440:1	440:1	6	tmsize_t
LEAF_NODE	440:1	440:1	7	tmsize_t
NAME	440:10	440:10	5	i
LEAF_NODE	440:10	440:10	6	i
LEAF_NODE	440:11	440:11	4	;
SIMPLE_DECL	441:1	441:11	3	tmsize_t j ;
VAR_DECL	441:1	441:10	4	tmsize_t j
TYPE	441:1	441:1	5	tmsize_t
TYPE_NAME	441:1	441:1	6	tmsize_t
LEAF_NODE	441:1	441:1	7	tmsize_t
NAME	441:10	441:10	5	j
LEAF_NODE	441:10	441:10	6	j
LEAF_NODE	441:11	441:11	4	;
SIMPLE_DECL	442:1	442:17	3	tmsize_t npixels ;
VAR_DECL	442:1	442:10	4	tmsize_t npixels
TYPE	442:1	442:1	5	tmsize_t
TYPE_NAME	442:1	442:1	6	tmsize_t
LEAF_NODE	442:1	442:1	7	tmsize_t
NAME	442:10	442:10	5	npixels
LEAF_NODE	442:10	442:10	6	npixels
LEAF_NODE	442:17	442:17	4	;
SIMPLE_DECL	443:1	443:10	3	uint8 * op ;
VAR_DECL	443:1	443:8	4	uint8 * op
TYPE	443:1	443:6	5	uint8 *
TYPE_NAME	443:1	443:1	6	uint8
LEAF_NODE	443:1	443:1	7	uint8
POINTER	443:6	443:6	6	*
LEAF_NODE	443:6	443:6	7	*
NAME	443:8	443:8	5	op
LEAF_NODE	443:8	443:8	6	op
LEAF_NODE	443:10	443:10	4	;
SIMPLE_DECL	444:1	444:10	3	int16 * tp ;
VAR_DECL	444:1	444:8	4	int16 * tp
TYPE	444:1	444:6	5	int16 *
TYPE_NAME	444:1	444:1	6	int16
LEAF_NODE	444:1	444:1	7	int16
POINTER	444:6	444:6	6	*
LEAF_NODE	444:6	444:6	7	*
NAME	444:8	444:8	5	tp
LEAF_NODE	444:8	444:8	6	tp
LEAF_NODE	444:10	444:10	4	;
SIMPLE_DECL	445:1	445:8	3	int16 b ;
VAR_DECL	445:1	445:7	4	int16 b
TYPE	445:1	445:1	5	int16
TYPE_NAME	445:1	445:1	6	int16
LEAF_NODE	445:1	445:1	7	int16
NAME	445:7	445:7	5	b
LEAF_NODE	445:7	445:7	6	b
LEAF_NODE	445:8	445:8	4	;
SIMPLE_DECL	446:1	446:13	3	tmsize_t occ ;
VAR_DECL	446:1	446:10	4	tmsize_t occ
TYPE	446:1	446:1	5	tmsize_t
TYPE_NAME	446:1	446:1	6	tmsize_t
LEAF_NODE	446:1	446:1	7	tmsize_t
NAME	446:10	446:10	5	occ
LEAF_NODE	446:10	446:10	6	occ
LEAF_NODE	446:13	446:13	4	;
SIMPLE_DECL	447:1	447:15	3	int rc ; rc = 0 , int mask ;
INIT_DECL_LIST	447:1	447:1	4	int rc ; rc = 0 , int mask
VAR_DECL	447:1	447:5	5	int rc ; rc = 0
TYPE	447:1	447:1	6	int
TYPE_NAME	447:1	447:1	7	int
LEAF_NODE	447:1	447:1	8	int
NAME	447:5	447:5	6	rc
LEAF_NODE	447:5	447:5	7	rc
LEAF_NODE	0:0	0:0	6	;
INIT	447:5	447:5	6	rc = 0
ASSIGN	447:5	447:8	7	rc = 0
LVAL	447:5	447:5	8	rc
NAME	447:5	447:5	9	rc
LEAF_NODE	447:5	447:5	10	rc
ASSIGN_OP	447:7	447:7	8	=
LEAF_NODE	447:7	447:7	9	=
RVAL	447:8	447:8	8	0
FIELD	447:8	447:8	9	0
LEAF_NODE	447:8	447:8	10	0
LEAF_NODE	447:9	447:9	5	,
VAR_DECL	447:1	447:11	5	int mask
TYPE	447:1	447:1	6	int
TYPE_NAME	447:1	447:1	7	int
LEAF_NODE	447:1	447:1	8	int
NAME	447:11	447:11	6	mask
LEAF_NODE	447:11	447:11	7	mask
LEAF_NODE	447:15	447:15	4	;
SIMPLE_DECL	448:1	448:13	3	tmsize_t beg ;
VAR_DECL	448:1	448:10	4	tmsize_t beg
TYPE	448:1	448:1	5	tmsize_t
TYPE_NAME	448:1	448:1	6	tmsize_t
LEAF_NODE	448:1	448:1	7	tmsize_t
NAME	448:10	448:10	5	beg
LEAF_NODE	448:10	448:10	6	beg
LEAF_NODE	448:13	448:13	4	;
EXPR_STATEMENT	450:1	450:15	3	assert ( s == 0 ) ;
EXPR	450:1	450:1	4	assert ( s == 0 )
FUNCTION_CALL	450:1	450:14	5	assert ( s == 0 )
CALLEE	450:1	450:1	6	assert
LEAF_NODE	450:1	450:1	7	assert
LEAF_NODE	450:7	450:7	6	(
ARGUMENT	450:8	450:13	6	s == 0
FIELD	450:8	450:8	7	s
LEAF_NODE	450:8	450:8	8	s
EQ_OPERATOR	450:10	450:10	7	==
LEAF_NODE	450:10	450:10	8	==
FIELD	450:13	450:13	7	0
LEAF_NODE	450:13	450:13	8	0
LEAF_NODE	450:14	450:14	6	)
LEAF_NODE	450:15	450:15	4	;
EXPR_STATEMENT	451:1	451:19	3	assert ( sp != NULL ) ;
EXPR	451:1	451:1	4	assert ( sp != NULL )
FUNCTION_CALL	451:1	451:18	5	assert ( sp != NULL )
CALLEE	451:1	451:1	6	assert
LEAF_NODE	451:1	451:1	7	assert
LEAF_NODE	451:7	451:7	6	(
ARGUMENT	451:8	451:14	6	sp != NULL
FIELD	451:8	451:8	7	sp
LEAF_NODE	451:8	451:8	8	sp
EQ_OPERATOR	451:11	451:11	7	!=
LEAF_NODE	451:11	451:11	8	!=
FIELD	451:14	451:14	7	NULL
LEAF_NODE	451:14	451:14	8	NULL
LEAF_NODE	451:18	451:18	6	)
LEAF_NODE	451:19	451:19	4	;
EXPR_STATEMENT	452:1	452:30	3	npixels = cc / sp -> pixel_size ;
EXPR	452:1	452:1	4	npixels = cc / sp -> pixel_size
ASSIGN	452:1	452:11	5	npixels = cc / sp -> pixel_size
LVAL	452:1	452:1	6	npixels
FIELD	452:1	452:1	7	npixels
LEAF_NODE	452:1	452:1	8	npixels
ASSIGN_OP	452:9	452:9	6	=
LEAF_NODE	452:9	452:9	7	=
RVAL	452:11	452:16	6	cc / sp -> pixel_size
FIELD	452:11	452:11	7	cc
LEAF_NODE	452:11	452:11	8	cc
LEAF_NODE	452:14	452:14	7	/
FIELD	452:16	452:20	7	sp -> pixel_size
LEAF_NODE	452:16	452:16	8	sp
LEAF_NODE	452:18	452:18	8	->
LEAF_NODE	452:20	452:20	8	pixel_size
LEAF_NODE	452:30	452:30	4	;
SELECTION	454:1	455:2	3	
KEYWORD	454:1	454:1	4	if
LEAF_NODE	454:1	454:1	5	if
LEAF_NODE	454:4	454:4	4	(
CONDITION	454:5	454:5	4	sp -> user_datafmt == SGILOGDATAFMT_16BIT
EXPR	454:5	454:25	5	sp -> user_datafmt == SGILOGDATAFMT_16BIT
FIELD	454:5	454:9	6	sp -> user_datafmt
LEAF_NODE	454:5	454:5	7	sp
LEAF_NODE	454:7	454:7	7	->
LEAF_NODE	454:9	454:9	7	user_datafmt
EQ_OPERATOR	454:22	454:22	6	==
LEAF_NODE	454:22	454:22	7	==
FIELD	454:25	454:25	6	SGILOGDATAFMT_16BIT
LEAF_NODE	454:25	454:25	7	SGILOGDATAFMT_16BIT
LEAF_NODE	454:44	454:44	4	)
STATEMENTS	455:2	455:2	4	
EXPR_STATEMENT	455:2	455:18	5	tp = ( int16 * ) bp ;
EXPR	455:2	455:2	6	tp = ( int16 * ) bp
ASSIGN	455:2	455:7	7	tp = ( int16 * ) bp
LVAL	455:2	455:2	8	tp
FIELD	455:2	455:2	9	tp
LEAF_NODE	455:2	455:2	10	tp
ASSIGN_OP	455:5	455:5	8	=
LEAF_NODE	455:5	455:5	9	=
RVAL	455:7	455:16	8	( int16 * ) bp
LEAF_NODE	455:7	455:7	9	(
TYPE_NAME	455:8	455:8	9	int16
LEAF_NODE	455:8	455:8	10	int16
LEAF_NODE	455:13	455:13	9	*
LEAF_NODE	455:14	455:14	9	)
FIELD	455:16	455:16	9	bp
LEAF_NODE	455:16	455:16	10	bp
LEAF_NODE	455:18	455:18	6	;
SELECTION	456:1	456:6	3	
KEYWORD	456:1	456:1	4	else
LEAF_NODE	456:1	456:1	5	else
STATEMENTS	456:6	464:1	4	
LEAF_NODE	456:6	456:6	5	{
STATEMENTS	457:2	463:2	5	
EXPR_STATEMENT	457:2	457:24	6	tp = ( int16 * ) sp -> tbuf ;
EXPR	457:2	457:2	7	tp = ( int16 * ) sp -> tbuf
ASSIGN	457:2	457:7	8	tp = ( int16 * ) sp -> tbuf
LVAL	457:2	457:2	9	tp
FIELD	457:2	457:2	10	tp
LEAF_NODE	457:2	457:2	11	tp
ASSIGN_OP	457:5	457:5	9	=
LEAF_NODE	457:5	457:5	10	=
RVAL	457:7	457:16	9	( int16 * ) sp -> tbuf
LEAF_NODE	457:7	457:7	10	(
TYPE_NAME	457:8	457:8	10	int16
LEAF_NODE	457:8	457:8	11	int16
LEAF_NODE	457:13	457:13	10	*
LEAF_NODE	457:14	457:14	10	)
FIELD	457:16	457:20	10	sp -> tbuf
LEAF_NODE	457:16	457:16	11	sp
LEAF_NODE	457:18	457:18	11	->
LEAF_NODE	457:20	457:20	11	tbuf
LEAF_NODE	457:24	457:24	7	;
SELECTION	458:2	458:28	6	
KEYWORD	458:2	458:2	7	if
LEAF_NODE	458:2	458:2	8	if
LEAF_NODE	458:4	458:4	7	(
CONDITION	458:5	458:5	7	sp -> tbuflen < npixels
EXPR	458:5	458:19	8	sp -> tbuflen < npixels
FIELD	458:5	458:9	9	sp -> tbuflen
LEAF_NODE	458:5	458:5	10	sp
LEAF_NODE	458:7	458:7	10	->
LEAF_NODE	458:9	458:9	10	tbuflen
REL_OPERATOR	458:17	458:17	9	<
LEAF_NODE	458:17	458:17	10	<
FIELD	458:19	458:19	9	npixels
LEAF_NODE	458:19	458:19	10	npixels
LEAF_NODE	458:26	458:26	7	)
STATEMENTS	458:28	462:2	7	
LEAF_NODE	458:28	458:28	8	{
STATEMENTS	459:3	461:3	8	
EXPR_STATEMENT	459:3	460:38	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" ) ;
EXPR	459:3	459:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
FUNCTION_CALL	459:3	460:37	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
CALLEE	459:3	459:3	12	TIFFErrorExt
LEAF_NODE	459:3	459:3	13	TIFFErrorExt
LEAF_NODE	459:15	459:15	12	(
ARGUMENT	459:16	459:16	12	tif -> tif_clientdata
FIELD	459:16	459:21	13	tif -> tif_clientdata
LEAF_NODE	459:16	459:16	14	tif
LEAF_NODE	459:19	459:19	14	->
LEAF_NODE	459:21	459:21	14	tif_clientdata
LEAF_NODE	459:35	459:35	12	,
ARGUMENT	459:37	459:37	12	module
FIELD	459:37	459:37	13	module
LEAF_NODE	459:37	459:37	14	module
LEAF_NODE	459:43	459:43	12	,
ARGUMENT	460:7	460:7	12	"Translation buffer too short"
FIELD	460:7	460:7	13	"Translation buffer too short"
LEAF_NODE	460:7	460:7	14	"Translation buffer too short"
LEAF_NODE	460:37	460:37	12	)
LEAF_NODE	460:38	460:38	10	;
JUMP_STATEMENT	461:3	461:13	9	return ( 0 ) ;
KEYWORD	461:3	461:3	10	return
LEAF_NODE	461:3	461:3	11	return
DESTINATION	461:10	461:10	10	( 0 )
EXPR	461:10	461:12	11	( 0 )
LEAF_NODE	461:10	461:10	12	(
FIELD	461:11	461:11	12	0
LEAF_NODE	461:11	461:11	13	0
LEAF_NODE	461:12	461:12	12	)
LEAF_NODE	461:13	461:13	10	;
LEAF_NODE	462:2	462:2	8	}
EXPR_STATEMENT	463:2	463:31	6	( * sp -> tfunc ) ( sp , bp , npixels ) ;
EXPR	463:2	463:2	7	( * sp -> tfunc ) ( sp , bp , npixels )
FUNCTION_CALL	463:2	463:30	8	( * sp -> tfunc ) ( sp , bp , npixels )
CALLEE	463:2	463:13	9	( * sp -> tfunc )
LEAF_NODE	463:2	463:2	10	(
UNARY_EXPR	463:3	463:4	10	* sp -> tfunc
UNARY_OPERATOR	463:3	463:3	11	*
LEAF_NODE	463:3	463:3	12	*
FIELD	463:4	463:8	11	sp -> tfunc
LEAF_NODE	463:4	463:4	12	sp
LEAF_NODE	463:6	463:6	12	->
LEAF_NODE	463:8	463:8	12	tfunc
LEAF_NODE	463:13	463:13	10	)
LEAF_NODE	463:14	463:14	9	(
ARGUMENT	463:15	463:15	9	sp
FIELD	463:15	463:15	10	sp
LEAF_NODE	463:15	463:15	11	sp
LEAF_NODE	463:17	463:17	9	,
ARGUMENT	463:19	463:19	9	bp
FIELD	463:19	463:19	10	bp
LEAF_NODE	463:19	463:19	11	bp
LEAF_NODE	463:21	463:21	9	,
ARGUMENT	463:23	463:23	9	npixels
FIELD	463:23	463:23	10	npixels
LEAF_NODE	463:23	463:23	11	npixels
LEAF_NODE	463:30	463:30	9	)
LEAF_NODE	463:31	463:31	7	;
LEAF_NODE	464:1	464:1	5	}
EXPR_STATEMENT	466:1	466:20	3	op = tif -> tif_rawcp ;
EXPR	466:1	466:1	4	op = tif -> tif_rawcp
ASSIGN	466:1	466:6	5	op = tif -> tif_rawcp
LVAL	466:1	466:1	6	op
FIELD	466:1	466:1	7	op
LEAF_NODE	466:1	466:1	8	op
ASSIGN_OP	466:4	466:4	6	=
LEAF_NODE	466:4	466:4	7	=
RVAL	466:6	466:6	6	tif -> tif_rawcp
FIELD	466:6	466:11	7	tif -> tif_rawcp
LEAF_NODE	466:6	466:6	8	tif
LEAF_NODE	466:9	466:9	8	->
LEAF_NODE	466:11	466:11	8	tif_rawcp
LEAF_NODE	466:20	466:20	4	;
EXPR_STATEMENT	467:1	467:44	3	occ = tif -> tif_rawdatasize - tif -> tif_rawcc ;
EXPR	467:1	467:1	4	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
ASSIGN	467:1	467:7	5	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
LVAL	467:1	467:1	6	occ
FIELD	467:1	467:1	7	occ
LEAF_NODE	467:1	467:1	8	occ
ASSIGN_OP	467:5	467:5	6	=
LEAF_NODE	467:5	467:5	7	=
RVAL	467:7	467:30	6	tif -> tif_rawdatasize - tif -> tif_rawcc
FIELD	467:7	467:12	7	tif -> tif_rawdatasize
LEAF_NODE	467:7	467:7	8	tif
LEAF_NODE	467:10	467:10	8	->
LEAF_NODE	467:12	467:12	8	tif_rawdatasize
LEAF_NODE	467:28	467:28	7	-
FIELD	467:30	467:35	7	tif -> tif_rawcc
LEAF_NODE	467:30	467:30	8	tif
LEAF_NODE	467:33	467:33	8	->
LEAF_NODE	467:35	467:35	8	tif_rawcc
LEAF_NODE	467:44	467:44	4	;
ITERATION	468:1	468:37	3	
KEYWORD	468:1	468:1	4	for
LEAF_NODE	468:1	468:1	5	for
LEAF_NODE	468:5	468:5	4	(
FOR_INIT	468:6	468:14	4	shft = 8 ;
EXPR	468:6	468:6	5	shft = 8
ASSIGN	468:6	468:13	6	shft = 8
LVAL	468:6	468:6	7	shft
FIELD	468:6	468:6	8	shft
LEAF_NODE	468:6	468:6	9	shft
ASSIGN_OP	468:11	468:11	7	=
LEAF_NODE	468:11	468:11	8	=
RVAL	468:13	468:13	7	8
FIELD	468:13	468:13	8	8
LEAF_NODE	468:13	468:13	9	8
LEAF_NODE	468:14	468:14	5	;
CONDITION	468:16	468:16	4	shft >= 0
EXPR	468:16	468:24	5	shft >= 0
FIELD	468:16	468:16	6	shft
LEAF_NODE	468:16	468:16	7	shft
REL_OPERATOR	468:21	468:21	6	>=
LEAF_NODE	468:21	468:21	7	>=
FIELD	468:24	468:24	6	0
LEAF_NODE	468:24	468:24	7	0
LEAF_NODE	468:25	468:25	4	;
FOR_EXPR	468:27	468:27	4	shft -= 8
EXPR	468:27	468:27	5	shft -= 8
ASSIGN	468:27	468:34	6	shft -= 8
LVAL	468:27	468:27	7	shft
FIELD	468:27	468:27	8	shft
LEAF_NODE	468:27	468:27	9	shft
ASSIGN_OP	468:32	468:32	7	-=
LEAF_NODE	468:32	468:32	8	-=
RVAL	468:34	468:34	7	8
FIELD	468:34	468:34	8	8
LEAF_NODE	468:34	468:34	9	8
LEAF_NODE	468:35	468:35	4	)
STATEMENTS	468:37	523:1	4	
LEAF_NODE	468:37	468:37	5	{
STATEMENTS	469:2	469:2	5	
ITERATION	469:2	469:36	6	
KEYWORD	469:2	469:2	7	for
LEAF_NODE	469:2	469:2	8	for
LEAF_NODE	469:6	469:6	7	(
FOR_INIT	469:7	469:12	7	i = 0 ;
EXPR	469:7	469:7	8	i = 0
ASSIGN	469:7	469:11	9	i = 0
LVAL	469:7	469:7	10	i
FIELD	469:7	469:7	11	i
LEAF_NODE	469:7	469:7	12	i
ASSIGN_OP	469:9	469:9	10	=
LEAF_NODE	469:9	469:9	11	=
RVAL	469:11	469:11	10	0
FIELD	469:11	469:11	11	0
LEAF_NODE	469:11	469:11	12	0
LEAF_NODE	469:12	469:12	8	;
CONDITION	469:14	469:14	7	i < npixels
EXPR	469:14	469:18	8	i < npixels
FIELD	469:14	469:14	9	i
LEAF_NODE	469:14	469:14	10	i
REL_OPERATOR	469:16	469:16	9	<
LEAF_NODE	469:16	469:16	10	<
FIELD	469:18	469:18	9	npixels
LEAF_NODE	469:18	469:18	10	npixels
LEAF_NODE	469:25	469:25	7	;
FOR_EXPR	469:27	469:27	7	i += rc
EXPR	469:27	469:27	8	i += rc
ASSIGN	469:27	469:32	9	i += rc
LVAL	469:27	469:27	10	i
FIELD	469:27	469:27	11	i
LEAF_NODE	469:27	469:27	12	i
ASSIGN_OP	469:29	469:29	10	+=
LEAF_NODE	469:29	469:29	11	+=
RVAL	469:32	469:32	10	rc
FIELD	469:32	469:32	11	rc
LEAF_NODE	469:32	469:32	12	rc
LEAF_NODE	469:34	469:34	7	)
STATEMENTS	469:36	522:2	7	
LEAF_NODE	469:36	469:36	8	{
STATEMENTS	470:3	520:5	8	
SELECTION	470:3	470:16	9	
KEYWORD	470:3	470:3	10	if
LEAF_NODE	470:3	470:3	11	if
LEAF_NODE	470:6	470:6	10	(
CONDITION	470:7	470:7	10	occ < 4
EXPR	470:7	470:13	11	occ < 4
FIELD	470:7	470:7	12	occ
LEAF_NODE	470:7	470:7	13	occ
REL_OPERATOR	470:11	470:11	12	<
LEAF_NODE	470:11	470:11	13	<
FIELD	470:13	470:13	12	4
LEAF_NODE	470:13	470:13	13	4
LEAF_NODE	470:14	470:14	10	)
STATEMENTS	470:16	477:3	10	
LEAF_NODE	470:16	470:16	11	{
STATEMENTS	471:4	476:4	11	
EXPR_STATEMENT	471:4	471:23	12	tif -> tif_rawcp = op ;
EXPR	471:4	471:4	13	tif -> tif_rawcp = op
ASSIGN	471:4	471:21	14	tif -> tif_rawcp = op
LVAL	471:4	471:4	15	tif -> tif_rawcp
FIELD	471:4	471:9	16	tif -> tif_rawcp
LEAF_NODE	471:4	471:4	17	tif
LEAF_NODE	471:7	471:7	17	->
LEAF_NODE	471:9	471:9	17	tif_rawcp
ASSIGN_OP	471:19	471:19	15	=
LEAF_NODE	471:19	471:19	16	=
RVAL	471:21	471:21	15	op
FIELD	471:21	471:21	16	op
LEAF_NODE	471:21	471:21	17	op
LEAF_NODE	471:23	471:23	13	;
EXPR_STATEMENT	472:4	472:47	12	tif -> tif_rawcc = tif -> tif_rawdatasize - occ ;
EXPR	472:4	472:4	13	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
ASSIGN	472:4	472:21	14	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
LVAL	472:4	472:4	15	tif -> tif_rawcc
FIELD	472:4	472:9	16	tif -> tif_rawcc
LEAF_NODE	472:4	472:4	17	tif
LEAF_NODE	472:7	472:7	17	->
LEAF_NODE	472:9	472:9	17	tif_rawcc
ASSIGN_OP	472:19	472:19	15	=
LEAF_NODE	472:19	472:19	16	=
RVAL	472:21	472:44	15	tif -> tif_rawdatasize - occ
FIELD	472:21	472:26	16	tif -> tif_rawdatasize
LEAF_NODE	472:21	472:21	17	tif
LEAF_NODE	472:24	472:24	17	->
LEAF_NODE	472:26	472:26	17	tif_rawdatasize
LEAF_NODE	472:42	472:42	16	-
FIELD	472:44	472:44	16	occ
LEAF_NODE	472:44	472:44	17	occ
LEAF_NODE	472:47	472:47	13	;
SELECTION	473:4	474:5	12	
KEYWORD	473:4	473:4	13	if
LEAF_NODE	473:4	473:4	14	if
LEAF_NODE	473:7	473:7	13	(
CONDITION	473:8	473:8	13	! TIFFFlushData1 ( tif )
EXPR	473:8	473:8	14	! TIFFFlushData1 ( tif )
UNARY_EXPR	473:8	473:9	15	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	473:8	473:8	16	!
LEAF_NODE	473:8	473:8	17	!
FUNCTION_CALL	473:9	473:27	16	TIFFFlushData1 ( tif )
CALLEE	473:9	473:9	17	TIFFFlushData1
LEAF_NODE	473:9	473:9	18	TIFFFlushData1
LEAF_NODE	473:23	473:23	17	(
ARGUMENT	473:24	473:24	17	tif
FIELD	473:24	473:24	18	tif
LEAF_NODE	473:24	473:24	19	tif
LEAF_NODE	473:27	473:27	17	)
LEAF_NODE	473:28	473:28	13	)
STATEMENTS	474:5	474:5	13	
JUMP_STATEMENT	474:5	474:15	14	return ( 0 ) ;
KEYWORD	474:5	474:5	15	return
LEAF_NODE	474:5	474:5	16	return
DESTINATION	474:12	474:12	15	( 0 )
EXPR	474:12	474:14	16	( 0 )
LEAF_NODE	474:12	474:12	17	(
FIELD	474:13	474:13	17	0
LEAF_NODE	474:13	474:13	18	0
LEAF_NODE	474:14	474:14	17	)
LEAF_NODE	474:15	474:15	15	;
EXPR_STATEMENT	475:4	475:23	12	op = tif -> tif_rawcp ;
EXPR	475:4	475:4	13	op = tif -> tif_rawcp
ASSIGN	475:4	475:9	14	op = tif -> tif_rawcp
LVAL	475:4	475:4	15	op
FIELD	475:4	475:4	16	op
LEAF_NODE	475:4	475:4	17	op
ASSIGN_OP	475:7	475:7	15	=
LEAF_NODE	475:7	475:7	16	=
RVAL	475:9	475:9	15	tif -> tif_rawcp
FIELD	475:9	475:14	16	tif -> tif_rawcp
LEAF_NODE	475:9	475:9	17	tif
LEAF_NODE	475:12	475:12	17	->
LEAF_NODE	475:14	475:14	17	tif_rawcp
LEAF_NODE	475:23	475:23	13	;
EXPR_STATEMENT	476:4	476:47	12	occ = tif -> tif_rawdatasize - tif -> tif_rawcc ;
EXPR	476:4	476:4	13	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
ASSIGN	476:4	476:10	14	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
LVAL	476:4	476:4	15	occ
FIELD	476:4	476:4	16	occ
LEAF_NODE	476:4	476:4	17	occ
ASSIGN_OP	476:8	476:8	15	=
LEAF_NODE	476:8	476:8	16	=
RVAL	476:10	476:33	15	tif -> tif_rawdatasize - tif -> tif_rawcc
FIELD	476:10	476:15	16	tif -> tif_rawdatasize
LEAF_NODE	476:10	476:10	17	tif
LEAF_NODE	476:13	476:13	17	->
LEAF_NODE	476:15	476:15	17	tif_rawdatasize
LEAF_NODE	476:31	476:31	16	-
FIELD	476:33	476:38	16	tif -> tif_rawcc
LEAF_NODE	476:33	476:33	17	tif
LEAF_NODE	476:36	476:36	17	->
LEAF_NODE	476:38	476:38	17	tif_rawcc
LEAF_NODE	476:47	476:47	13	;
LEAF_NODE	477:3	477:3	11	}
EXPR_STATEMENT	478:3	478:22	9	mask = 0xff << shft ;
EXPR	478:3	478:3	10	mask = 0xff << shft
ASSIGN	478:3	478:10	11	mask = 0xff << shft
LVAL	478:3	478:3	12	mask
FIELD	478:3	478:3	13	mask
LEAF_NODE	478:3	478:3	14	mask
ASSIGN_OP	478:8	478:8	12	=
LEAF_NODE	478:8	478:8	13	=
RVAL	478:10	478:18	12	0xff << shft
FIELD	478:10	478:10	13	0xff
LEAF_NODE	478:10	478:10	14	0xff
LEAF_NODE	478:15	478:15	13	<<
FIELD	478:18	478:18	13	shft
LEAF_NODE	478:18	478:18	14	shft
LEAF_NODE	478:22	478:22	10	;
ITERATION	479:3	479:43	9	
KEYWORD	479:3	479:3	10	for
LEAF_NODE	479:3	479:3	11	for
LEAF_NODE	479:7	479:7	10	(
FOR_INIT	479:8	479:15	10	beg = i ;
EXPR	479:8	479:8	11	beg = i
ASSIGN	479:8	479:14	12	beg = i
LVAL	479:8	479:8	13	beg
FIELD	479:8	479:8	14	beg
LEAF_NODE	479:8	479:8	15	beg
ASSIGN_OP	479:12	479:12	13	=
LEAF_NODE	479:12	479:12	14	=
RVAL	479:14	479:14	13	i
FIELD	479:14	479:14	14	i
LEAF_NODE	479:14	479:14	15	i
LEAF_NODE	479:15	479:15	11	;
CONDITION	479:17	479:17	10	beg < npixels
EXPR	479:17	479:23	11	beg < npixels
FIELD	479:17	479:17	12	beg
LEAF_NODE	479:17	479:17	13	beg
REL_OPERATOR	479:21	479:21	12	<
LEAF_NODE	479:21	479:21	13	<
FIELD	479:23	479:23	12	npixels
LEAF_NODE	479:23	479:23	13	npixels
LEAF_NODE	479:30	479:30	10	;
FOR_EXPR	479:32	479:32	10	beg += rc
EXPR	479:32	479:32	11	beg += rc
ASSIGN	479:32	479:39	12	beg += rc
LVAL	479:32	479:32	13	beg
FIELD	479:32	479:32	14	beg
LEAF_NODE	479:32	479:32	15	beg
ASSIGN_OP	479:36	479:36	13	+=
LEAF_NODE	479:36	479:36	14	+=
RVAL	479:39	479:39	13	rc
FIELD	479:39	479:39	14	rc
LEAF_NODE	479:39	479:39	15	rc
LEAF_NODE	479:41	479:41	10	)
STATEMENTS	479:43	487:3	10	
LEAF_NODE	479:43	479:43	11	{
STATEMENTS	480:4	485:4	11	
EXPR_STATEMENT	480:4	480:32	12	b = ( int16 ) ( tp [ beg ] & mask ) ;
EXPR	480:4	480:4	13	b = ( int16 ) ( tp [ beg ] & mask )
ASSIGN	480:4	480:8	14	b = ( int16 ) ( tp [ beg ] & mask )
LVAL	480:4	480:4	15	b
FIELD	480:4	480:4	16	b
LEAF_NODE	480:4	480:4	17	b
ASSIGN_OP	480:6	480:6	15	=
LEAF_NODE	480:6	480:6	16	=
RVAL	480:8	480:31	15	( int16 ) ( tp [ beg ] & mask )
LEAF_NODE	480:8	480:8	16	(
TYPE_NAME	480:9	480:9	16	int16
LEAF_NODE	480:9	480:9	17	int16
LEAF_NODE	480:14	480:14	16	)
LEAF_NODE	480:16	480:16	16	(
FIELD	480:17	480:23	16	tp [ beg ]
LEAF_NODE	480:17	480:17	17	tp
LEAF_NODE	480:19	480:19	17	[
EXPR	480:20	480:20	17	beg
FIELD	480:20	480:20	18	beg
LEAF_NODE	480:20	480:20	19	beg
LEAF_NODE	480:23	480:23	17	]
LEAF_NODE	480:25	480:25	16	&
FIELD	480:27	480:27	16	mask
LEAF_NODE	480:27	480:27	17	mask
LEAF_NODE	480:31	480:31	16	)
LEAF_NODE	480:32	480:32	13	;
EXPR_STATEMENT	481:4	481:10	12	rc = 1 ;
EXPR	481:4	481:4	13	rc = 1
ASSIGN	481:4	481:9	14	rc = 1
LVAL	481:4	481:4	15	rc
FIELD	481:4	481:4	16	rc
LEAF_NODE	481:4	481:4	17	rc
ASSIGN_OP	481:7	481:7	15	=
LEAF_NODE	481:7	481:7	16	=
RVAL	481:9	481:9	15	1
FIELD	481:9	481:9	16	1
LEAF_NODE	481:9	481:9	17	1
LEAF_NODE	481:10	481:10	13	;
ITERATION	482:4	484:5	12	
KEYWORD	482:4	482:4	13	while
LEAF_NODE	482:4	482:4	14	while
LEAF_NODE	482:10	482:10	13	(
CONDITION	482:11	482:11	13	rc < 127 + 2 && beg + rc < npixels && ( tp [ beg + rc ] & mask ) == b
EXPR	482:11	482:11	14	rc < 127 + 2 && beg + rc < npixels && ( tp [ beg + rc ] & mask ) == b
AND	482:11	482:25	15	rc < 127 + 2 && beg + rc < npixels && ( tp [ beg + rc ] & mask ) == b
EXPR	482:11	482:20	16	rc < 127 + 2
FIELD	482:11	482:11	17	rc
LEAF_NODE	482:11	482:11	18	rc
REL_OPERATOR	482:14	482:14	17	<
LEAF_NODE	482:14	482:14	18	<
FIELD	482:16	482:16	17	127
LEAF_NODE	482:16	482:16	18	127
LEAF_NODE	482:19	482:19	17	+
FIELD	482:20	482:20	17	2
LEAF_NODE	482:20	482:20	18	2
LEAF_NODE	482:22	482:22	16	&&
EXPR	482:25	482:25	16	beg + rc < npixels && ( tp [ beg + rc ] & mask ) == b
AND	482:25	483:8	17	beg + rc < npixels && ( tp [ beg + rc ] & mask ) == b
EXPR	482:25	482:34	18	beg + rc < npixels
FIELD	482:25	482:25	19	beg
LEAF_NODE	482:25	482:25	20	beg
LEAF_NODE	482:28	482:28	19	+
FIELD	482:29	482:29	19	rc
LEAF_NODE	482:29	482:29	20	rc
REL_OPERATOR	482:32	482:32	19	<
LEAF_NODE	482:32	482:32	20	<
FIELD	482:34	482:34	19	npixels
LEAF_NODE	482:34	482:34	20	npixels
LEAF_NODE	482:42	482:42	18	&&
EXPR	483:8	483:31	18	( tp [ beg + rc ] & mask ) == b
LEAF_NODE	483:8	483:8	19	(
FIELD	483:9	483:18	19	tp [ beg + rc ]
LEAF_NODE	483:9	483:9	20	tp
LEAF_NODE	483:11	483:11	20	[
EXPR	483:12	483:16	20	beg + rc
FIELD	483:12	483:12	21	beg
LEAF_NODE	483:12	483:12	22	beg
LEAF_NODE	483:15	483:15	21	+
FIELD	483:16	483:16	21	rc
LEAF_NODE	483:16	483:16	22	rc
LEAF_NODE	483:18	483:18	20	]
LEAF_NODE	483:20	483:20	19	&
FIELD	483:22	483:22	19	mask
LEAF_NODE	483:22	483:22	20	mask
LEAF_NODE	483:26	483:26	19	)
EQ_OPERATOR	483:28	483:28	19	==
LEAF_NODE	483:28	483:28	20	==
FIELD	483:31	483:31	19	b
LEAF_NODE	483:31	483:31	20	b
LEAF_NODE	483:32	483:32	13	)
STATEMENTS	484:5	484:5	13	
EXPR_STATEMENT	484:5	484:9	14	rc ++ ;
EXPR	484:5	484:5	15	rc ++
FIELD	484:5	484:7	16	rc ++
LEAF_NODE	484:5	484:5	17	rc
LEAF_NODE	484:7	484:7	17	++
LEAF_NODE	484:9	484:9	15	;
SELECTION	485:4	486:5	12	
KEYWORD	485:4	485:4	13	if
LEAF_NODE	485:4	485:4	14	if
LEAF_NODE	485:7	485:7	13	(
CONDITION	485:8	485:8	13	rc >= MINRUN
EXPR	485:8	485:14	14	rc >= MINRUN
FIELD	485:8	485:8	15	rc
LEAF_NODE	485:8	485:8	16	rc
REL_OPERATOR	485:11	485:11	15	>=
LEAF_NODE	485:11	485:11	16	>=
FIELD	485:14	485:14	15	MINRUN
LEAF_NODE	485:14	485:14	16	MINRUN
LEAF_NODE	485:20	485:20	13	)
STATEMENTS	486:5	486:5	13	
JUMP_STATEMENT	486:5	486:10	14	break DESTINATION ;
KEYWORD	486:5	486:5	15	break
LEAF_NODE	486:5	486:5	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	486:10	486:10	15	;
LEAF_NODE	487:3	487:3	11	}
SELECTION	488:3	488:36	9	
KEYWORD	488:3	488:3	10	if
LEAF_NODE	488:3	488:3	11	if
LEAF_NODE	488:6	488:6	10	(
CONDITION	488:7	488:7	10	beg - i > 1 && beg - i < MINRUN
EXPR	488:7	488:7	11	beg - i > 1 && beg - i < MINRUN
AND	488:7	488:20	12	beg - i > 1 && beg - i < MINRUN
EXPR	488:7	488:15	13	beg - i > 1
FIELD	488:7	488:7	14	beg
LEAF_NODE	488:7	488:7	15	beg
LEAF_NODE	488:10	488:10	14	-
FIELD	488:11	488:11	14	i
LEAF_NODE	488:11	488:11	15	i
REL_OPERATOR	488:13	488:13	14	>
LEAF_NODE	488:13	488:13	15	>
FIELD	488:15	488:15	14	1
LEAF_NODE	488:15	488:15	15	1
LEAF_NODE	488:17	488:17	13	&&
EXPR	488:20	488:28	13	beg - i < MINRUN
FIELD	488:20	488:20	14	beg
LEAF_NODE	488:20	488:20	15	beg
LEAF_NODE	488:23	488:23	14	-
FIELD	488:24	488:24	14	i
LEAF_NODE	488:24	488:24	15	i
REL_OPERATOR	488:26	488:26	14	<
LEAF_NODE	488:26	488:26	15	<
FIELD	488:28	488:28	14	MINRUN
LEAF_NODE	488:28	488:28	15	MINRUN
LEAF_NODE	488:34	488:34	10	)
STATEMENTS	488:36	499:3	10	
LEAF_NODE	488:36	488:36	11	{
STATEMENTS	489:4	491:4	11	
EXPR_STATEMENT	489:4	489:30	12	b = ( int16 ) ( tp [ i ] & mask ) ;
EXPR	489:4	489:4	13	b = ( int16 ) ( tp [ i ] & mask )
ASSIGN	489:4	489:8	14	b = ( int16 ) ( tp [ i ] & mask )
LVAL	489:4	489:4	15	b
FIELD	489:4	489:4	16	b
LEAF_NODE	489:4	489:4	17	b
ASSIGN_OP	489:6	489:6	15	=
LEAF_NODE	489:6	489:6	16	=
RVAL	489:8	489:29	15	( int16 ) ( tp [ i ] & mask )
LEAF_NODE	489:8	489:8	16	(
TYPE_NAME	489:9	489:9	16	int16
LEAF_NODE	489:9	489:9	17	int16
LEAF_NODE	489:14	489:14	16	)
LEAF_NODE	489:16	489:16	16	(
FIELD	489:17	489:21	16	tp [ i ]
LEAF_NODE	489:17	489:17	17	tp
LEAF_NODE	489:19	489:19	17	[
EXPR	489:20	489:20	17	i
FIELD	489:20	489:20	18	i
LEAF_NODE	489:20	489:20	19	i
LEAF_NODE	489:21	489:21	17	]
LEAF_NODE	489:23	489:23	16	&
FIELD	489:25	489:25	16	mask
LEAF_NODE	489:25	489:25	17	mask
LEAF_NODE	489:29	489:29	16	)
LEAF_NODE	489:30	489:30	13	;
EXPR_STATEMENT	490:4	490:11	12	j = i + 1 ;
EXPR	490:4	490:4	13	j = i + 1
ASSIGN	490:4	490:8	14	j = i + 1
LVAL	490:4	490:4	15	j
FIELD	490:4	490:4	16	j
LEAF_NODE	490:4	490:4	17	j
ASSIGN_OP	490:6	490:6	15	=
LEAF_NODE	490:6	490:6	16	=
RVAL	490:8	490:10	15	i + 1
FIELD	490:8	490:8	16	i
LEAF_NODE	490:8	490:8	17	i
LEAF_NODE	490:9	490:9	16	+
FIELD	490:10	490:10	16	1
LEAF_NODE	490:10	490:10	17	1
LEAF_NODE	490:11	490:11	13	;
ITERATION	491:4	492:5	12	
KEYWORD	491:4	491:4	13	while
LEAF_NODE	491:4	491:4	14	while
LEAF_NODE	491:10	491:10	13	(
CONDITION	491:11	491:11	13	( tp [ j ++ ] & mask ) == b
EXPR	491:11	491:31	14	( tp [ j ++ ] & mask ) == b
LEAF_NODE	491:11	491:11	15	(
FIELD	491:12	491:18	15	tp [ j ++ ]
LEAF_NODE	491:12	491:12	16	tp
LEAF_NODE	491:14	491:14	16	[
EXPR	491:15	491:15	16	j ++
FIELD	491:15	491:16	17	j ++
LEAF_NODE	491:15	491:15	18	j
LEAF_NODE	491:16	491:16	18	++
LEAF_NODE	491:18	491:18	16	]
LEAF_NODE	491:20	491:20	15	&
FIELD	491:22	491:22	15	mask
LEAF_NODE	491:22	491:22	16	mask
LEAF_NODE	491:26	491:26	15	)
EQ_OPERATOR	491:28	491:28	15	==
LEAF_NODE	491:28	491:28	16	==
FIELD	491:31	491:31	15	b
LEAF_NODE	491:31	491:31	16	b
LEAF_NODE	491:32	491:32	13	)
STATEMENTS	492:5	492:5	13	
SELECTION	492:5	492:19	14	
KEYWORD	492:5	492:5	15	if
LEAF_NODE	492:5	492:5	16	if
LEAF_NODE	492:8	492:8	15	(
CONDITION	492:9	492:9	15	j == beg
EXPR	492:9	492:14	16	j == beg
FIELD	492:9	492:9	17	j
LEAF_NODE	492:9	492:9	18	j
EQ_OPERATOR	492:11	492:11	17	==
LEAF_NODE	492:11	492:11	18	==
FIELD	492:14	492:14	17	beg
LEAF_NODE	492:14	492:14	18	beg
LEAF_NODE	492:17	492:17	15	)
STATEMENTS	492:19	498:5	15	
LEAF_NODE	492:19	492:19	16	{
STATEMENTS	493:6	497:6	16	
EXPR_STATEMENT	493:6	493:32	17	* op ++ = ( uint8 ) ( 128 - 2 + j - i ) ;
EXPR	493:6	493:6	18	* op ++ = ( uint8 ) ( 128 - 2 + j - i )
ASSIGN	493:6	493:14	19	* op ++ = ( uint8 ) ( 128 - 2 + j - i )
LVAL	493:6	493:6	20	* op ++
UNARY_EXPR	493:6	493:7	21	* op ++
UNARY_OPERATOR	493:6	493:6	22	*
LEAF_NODE	493:6	493:6	23	*
FIELD	493:7	493:9	22	op ++
LEAF_NODE	493:7	493:7	23	op
LEAF_NODE	493:9	493:9	23	++
ASSIGN_OP	493:12	493:12	20	=
LEAF_NODE	493:12	493:12	21	=
RVAL	493:14	493:31	20	( uint8 ) ( 128 - 2 + j - i )
LEAF_NODE	493:14	493:14	21	(
TYPE_NAME	493:15	493:15	21	uint8
LEAF_NODE	493:15	493:15	22	uint8
LEAF_NODE	493:20	493:20	21	)
LEAF_NODE	493:21	493:21	21	(
FIELD	493:22	493:22	21	128
LEAF_NODE	493:22	493:22	22	128
LEAF_NODE	493:25	493:25	21	-
FIELD	493:26	493:26	21	2
LEAF_NODE	493:26	493:26	22	2
LEAF_NODE	493:27	493:27	21	+
FIELD	493:28	493:28	21	j
LEAF_NODE	493:28	493:28	22	j
LEAF_NODE	493:29	493:29	21	-
FIELD	493:30	493:30	21	i
LEAF_NODE	493:30	493:30	22	i
LEAF_NODE	493:31	493:31	21	)
LEAF_NODE	493:32	493:32	18	;
EXPR_STATEMENT	494:6	494:32	17	* op ++ = ( uint8 ) ( b >> shft ) ;
EXPR	494:6	494:6	18	* op ++ = ( uint8 ) ( b >> shft )
ASSIGN	494:6	494:14	19	* op ++ = ( uint8 ) ( b >> shft )
LVAL	494:6	494:6	20	* op ++
UNARY_EXPR	494:6	494:7	21	* op ++
UNARY_OPERATOR	494:6	494:6	22	*
LEAF_NODE	494:6	494:6	23	*
FIELD	494:7	494:9	22	op ++
LEAF_NODE	494:7	494:7	23	op
LEAF_NODE	494:9	494:9	23	++
ASSIGN_OP	494:12	494:12	20	=
LEAF_NODE	494:12	494:12	21	=
RVAL	494:14	494:31	20	( uint8 ) ( b >> shft )
LEAF_NODE	494:14	494:14	21	(
TYPE_NAME	494:15	494:15	21	uint8
LEAF_NODE	494:15	494:15	22	uint8
LEAF_NODE	494:20	494:20	21	)
LEAF_NODE	494:21	494:21	21	(
FIELD	494:22	494:22	21	b
LEAF_NODE	494:22	494:22	22	b
LEAF_NODE	494:24	494:24	21	>>
FIELD	494:27	494:27	21	shft
LEAF_NODE	494:27	494:27	22	shft
LEAF_NODE	494:31	494:31	21	)
LEAF_NODE	494:32	494:32	18	;
EXPR_STATEMENT	495:6	495:14	17	occ -= 2 ;
EXPR	495:6	495:6	18	occ -= 2
ASSIGN	495:6	495:13	19	occ -= 2
LVAL	495:6	495:6	20	occ
FIELD	495:6	495:6	21	occ
LEAF_NODE	495:6	495:6	22	occ
ASSIGN_OP	495:10	495:10	20	-=
LEAF_NODE	495:10	495:10	21	-=
RVAL	495:13	495:13	20	2
FIELD	495:13	495:13	21	2
LEAF_NODE	495:13	495:13	22	2
LEAF_NODE	495:14	495:14	18	;
EXPR_STATEMENT	496:6	496:13	17	i = beg ;
EXPR	496:6	496:6	18	i = beg
ASSIGN	496:6	496:10	19	i = beg
LVAL	496:6	496:6	20	i
FIELD	496:6	496:6	21	i
LEAF_NODE	496:6	496:6	22	i
ASSIGN_OP	496:8	496:8	20	=
LEAF_NODE	496:8	496:8	21	=
RVAL	496:10	496:10	20	beg
FIELD	496:10	496:10	21	beg
LEAF_NODE	496:10	496:10	22	beg
LEAF_NODE	496:13	496:13	18	;
JUMP_STATEMENT	497:6	497:11	17	break DESTINATION ;
KEYWORD	497:6	497:6	18	break
LEAF_NODE	497:6	497:6	19	break
LEAF_NODE	0:0	0:0	18	DESTINATION
LEAF_NODE	497:11	497:11	18	;
LEAF_NODE	498:5	498:5	16	}
LEAF_NODE	499:3	499:3	11	}
ITERATION	500:3	500:19	9	
KEYWORD	500:3	500:3	10	while
LEAF_NODE	500:3	500:3	11	while
LEAF_NODE	500:9	500:9	10	(
CONDITION	500:10	500:10	10	i < beg
EXPR	500:10	500:14	11	i < beg
FIELD	500:10	500:10	12	i
LEAF_NODE	500:10	500:10	13	i
REL_OPERATOR	500:12	500:12	12	<
LEAF_NODE	500:12	500:12	13	<
FIELD	500:14	500:14	12	beg
LEAF_NODE	500:14	500:14	13	beg
LEAF_NODE	500:17	500:17	10	)
STATEMENTS	500:19	515:3	10	
LEAF_NODE	500:19	500:19	11	{
STATEMENTS	501:4	511:4	11	
SELECTION	501:4	501:27	12	
KEYWORD	501:4	501:4	13	if
LEAF_NODE	501:4	501:4	14	if
LEAF_NODE	501:7	501:7	13	(
CONDITION	501:8	501:8	13	( j = beg - i ) > 127
EXPR	501:8	501:22	14	( j = beg - i ) > 127
LEAF_NODE	501:8	501:8	15	(
ASSIGN	501:9	501:13	15	j = beg - i
LVAL	501:9	501:9	16	j
FIELD	501:9	501:9	17	j
LEAF_NODE	501:9	501:9	18	j
ASSIGN_OP	501:11	501:11	16	=
LEAF_NODE	501:11	501:11	17	=
RVAL	501:13	501:17	16	beg - i
FIELD	501:13	501:13	17	beg
LEAF_NODE	501:13	501:13	18	beg
LEAF_NODE	501:16	501:16	17	-
FIELD	501:17	501:17	17	i
LEAF_NODE	501:17	501:17	18	i
LEAF_NODE	501:18	501:18	15	)
REL_OPERATOR	501:20	501:20	15	>
LEAF_NODE	501:20	501:20	16	>
FIELD	501:22	501:22	15	127
LEAF_NODE	501:22	501:22	16	127
LEAF_NODE	501:25	501:25	13	)
STATEMENTS	501:27	501:27	13	
EXPR_STATEMENT	501:27	501:34	14	j = 127 ;
EXPR	501:27	501:27	15	j = 127
ASSIGN	501:27	501:31	16	j = 127
LVAL	501:27	501:27	17	j
FIELD	501:27	501:27	18	j
LEAF_NODE	501:27	501:27	19	j
ASSIGN_OP	501:29	501:29	17	=
LEAF_NODE	501:29	501:29	18	=
RVAL	501:31	501:31	17	127
FIELD	501:31	501:31	18	127
LEAF_NODE	501:31	501:31	19	127
LEAF_NODE	501:34	501:34	15	;
SELECTION	502:4	502:19	12	
KEYWORD	502:4	502:4	13	if
LEAF_NODE	502:4	502:4	14	if
LEAF_NODE	502:7	502:7	13	(
CONDITION	502:8	502:8	13	occ < j + 3
EXPR	502:8	502:16	14	occ < j + 3
FIELD	502:8	502:8	15	occ
LEAF_NODE	502:8	502:8	16	occ
REL_OPERATOR	502:12	502:12	15	<
LEAF_NODE	502:12	502:12	16	<
FIELD	502:14	502:14	15	j
LEAF_NODE	502:14	502:14	16	j
LEAF_NODE	502:15	502:15	15	+
FIELD	502:16	502:16	15	3
LEAF_NODE	502:16	502:16	16	3
LEAF_NODE	502:17	502:17	13	)
STATEMENTS	502:19	509:4	13	
LEAF_NODE	502:19	502:19	14	{
STATEMENTS	503:5	508:5	14	
EXPR_STATEMENT	503:5	503:24	15	tif -> tif_rawcp = op ;
EXPR	503:5	503:5	16	tif -> tif_rawcp = op
ASSIGN	503:5	503:22	17	tif -> tif_rawcp = op
LVAL	503:5	503:5	18	tif -> tif_rawcp
FIELD	503:5	503:10	19	tif -> tif_rawcp
LEAF_NODE	503:5	503:5	20	tif
LEAF_NODE	503:8	503:8	20	->
LEAF_NODE	503:10	503:10	20	tif_rawcp
ASSIGN_OP	503:20	503:20	18	=
LEAF_NODE	503:20	503:20	19	=
RVAL	503:22	503:22	18	op
FIELD	503:22	503:22	19	op
LEAF_NODE	503:22	503:22	20	op
LEAF_NODE	503:24	503:24	16	;
EXPR_STATEMENT	504:5	504:48	15	tif -> tif_rawcc = tif -> tif_rawdatasize - occ ;
EXPR	504:5	504:5	16	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
ASSIGN	504:5	504:22	17	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
LVAL	504:5	504:5	18	tif -> tif_rawcc
FIELD	504:5	504:10	19	tif -> tif_rawcc
LEAF_NODE	504:5	504:5	20	tif
LEAF_NODE	504:8	504:8	20	->
LEAF_NODE	504:10	504:10	20	tif_rawcc
ASSIGN_OP	504:20	504:20	18	=
LEAF_NODE	504:20	504:20	19	=
RVAL	504:22	504:45	18	tif -> tif_rawdatasize - occ
FIELD	504:22	504:27	19	tif -> tif_rawdatasize
LEAF_NODE	504:22	504:22	20	tif
LEAF_NODE	504:25	504:25	20	->
LEAF_NODE	504:27	504:27	20	tif_rawdatasize
LEAF_NODE	504:43	504:43	19	-
FIELD	504:45	504:45	19	occ
LEAF_NODE	504:45	504:45	20	occ
LEAF_NODE	504:48	504:48	16	;
SELECTION	505:5	506:6	15	
KEYWORD	505:5	505:5	16	if
LEAF_NODE	505:5	505:5	17	if
LEAF_NODE	505:8	505:8	16	(
CONDITION	505:9	505:9	16	! TIFFFlushData1 ( tif )
EXPR	505:9	505:9	17	! TIFFFlushData1 ( tif )
UNARY_EXPR	505:9	505:10	18	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	505:9	505:9	19	!
LEAF_NODE	505:9	505:9	20	!
FUNCTION_CALL	505:10	505:28	19	TIFFFlushData1 ( tif )
CALLEE	505:10	505:10	20	TIFFFlushData1
LEAF_NODE	505:10	505:10	21	TIFFFlushData1
LEAF_NODE	505:24	505:24	20	(
ARGUMENT	505:25	505:25	20	tif
FIELD	505:25	505:25	21	tif
LEAF_NODE	505:25	505:25	22	tif
LEAF_NODE	505:28	505:28	20	)
LEAF_NODE	505:29	505:29	16	)
STATEMENTS	506:6	506:6	16	
JUMP_STATEMENT	506:6	506:16	17	return ( 0 ) ;
KEYWORD	506:6	506:6	18	return
LEAF_NODE	506:6	506:6	19	return
DESTINATION	506:13	506:13	18	( 0 )
EXPR	506:13	506:15	19	( 0 )
LEAF_NODE	506:13	506:13	20	(
FIELD	506:14	506:14	20	0
LEAF_NODE	506:14	506:14	21	0
LEAF_NODE	506:15	506:15	20	)
LEAF_NODE	506:16	506:16	18	;
EXPR_STATEMENT	507:5	507:24	15	op = tif -> tif_rawcp ;
EXPR	507:5	507:5	16	op = tif -> tif_rawcp
ASSIGN	507:5	507:10	17	op = tif -> tif_rawcp
LVAL	507:5	507:5	18	op
FIELD	507:5	507:5	19	op
LEAF_NODE	507:5	507:5	20	op
ASSIGN_OP	507:8	507:8	18	=
LEAF_NODE	507:8	507:8	19	=
RVAL	507:10	507:10	18	tif -> tif_rawcp
FIELD	507:10	507:15	19	tif -> tif_rawcp
LEAF_NODE	507:10	507:10	20	tif
LEAF_NODE	507:13	507:13	20	->
LEAF_NODE	507:15	507:15	20	tif_rawcp
LEAF_NODE	507:24	507:24	16	;
EXPR_STATEMENT	508:5	508:48	15	occ = tif -> tif_rawdatasize - tif -> tif_rawcc ;
EXPR	508:5	508:5	16	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
ASSIGN	508:5	508:11	17	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
LVAL	508:5	508:5	18	occ
FIELD	508:5	508:5	19	occ
LEAF_NODE	508:5	508:5	20	occ
ASSIGN_OP	508:9	508:9	18	=
LEAF_NODE	508:9	508:9	19	=
RVAL	508:11	508:34	18	tif -> tif_rawdatasize - tif -> tif_rawcc
FIELD	508:11	508:16	19	tif -> tif_rawdatasize
LEAF_NODE	508:11	508:11	20	tif
LEAF_NODE	508:14	508:14	20	->
LEAF_NODE	508:16	508:16	20	tif_rawdatasize
LEAF_NODE	508:32	508:32	19	-
FIELD	508:34	508:39	19	tif -> tif_rawcc
LEAF_NODE	508:34	508:34	20	tif
LEAF_NODE	508:37	508:37	20	->
LEAF_NODE	508:39	508:39	20	tif_rawcc
LEAF_NODE	508:48	508:48	16	;
LEAF_NODE	509:4	509:4	14	}
EXPR_STATEMENT	510:4	510:21	12	* op ++ = ( uint8 ) j ;
EXPR	510:4	510:4	13	* op ++ = ( uint8 ) j
ASSIGN	510:4	510:12	14	* op ++ = ( uint8 ) j
LVAL	510:4	510:4	15	* op ++
UNARY_EXPR	510:4	510:5	16	* op ++
UNARY_OPERATOR	510:4	510:4	17	*
LEAF_NODE	510:4	510:4	18	*
FIELD	510:5	510:7	17	op ++
LEAF_NODE	510:5	510:5	18	op
LEAF_NODE	510:7	510:7	18	++
ASSIGN_OP	510:10	510:10	15	=
LEAF_NODE	510:10	510:10	16	=
RVAL	510:12	510:20	15	( uint8 ) j
LEAF_NODE	510:12	510:12	16	(
TYPE_NAME	510:13	510:13	16	uint8
LEAF_NODE	510:13	510:13	17	uint8
LEAF_NODE	510:18	510:18	16	)
FIELD	510:20	510:20	16	j
LEAF_NODE	510:20	510:20	17	j
LEAF_NODE	510:21	510:21	13	;
EXPR_STATEMENT	510:23	510:28	12	occ -- ;
EXPR	510:23	510:23	13	occ --
FIELD	510:23	510:26	14	occ --
LEAF_NODE	510:23	510:23	15	occ
LEAF_NODE	510:26	510:26	15	--
LEAF_NODE	510:28	510:28	13	;
ITERATION	511:4	511:16	12	
KEYWORD	511:4	511:4	13	while
LEAF_NODE	511:4	511:4	14	while
LEAF_NODE	511:10	511:10	13	(
CONDITION	511:11	511:11	13	j --
EXPR	511:11	511:11	14	j --
FIELD	511:11	511:12	15	j --
LEAF_NODE	511:11	511:11	16	j
LEAF_NODE	511:12	511:12	16	--
LEAF_NODE	511:14	511:14	13	)
STATEMENTS	511:16	514:4	13	
LEAF_NODE	511:16	511:16	14	{
STATEMENTS	512:5	513:5	14	
EXPR_STATEMENT	512:5	512:45	15	* op ++ = ( uint8 ) ( tp [ i ++ ] >> shft & 0xff ) ;
EXPR	512:5	512:5	16	* op ++ = ( uint8 ) ( tp [ i ++ ] >> shft & 0xff )
ASSIGN	512:5	512:13	17	* op ++ = ( uint8 ) ( tp [ i ++ ] >> shft & 0xff )
LVAL	512:5	512:5	18	* op ++
UNARY_EXPR	512:5	512:6	19	* op ++
UNARY_OPERATOR	512:5	512:5	20	*
LEAF_NODE	512:5	512:5	21	*
FIELD	512:6	512:8	20	op ++
LEAF_NODE	512:6	512:6	21	op
LEAF_NODE	512:8	512:8	21	++
ASSIGN_OP	512:11	512:11	18	=
LEAF_NODE	512:11	512:11	19	=
RVAL	512:13	512:44	18	( uint8 ) ( tp [ i ++ ] >> shft & 0xff )
LEAF_NODE	512:13	512:13	19	(
TYPE_NAME	512:14	512:14	19	uint8
LEAF_NODE	512:14	512:14	20	uint8
LEAF_NODE	512:19	512:19	19	)
LEAF_NODE	512:21	512:21	19	(
FIELD	512:22	512:28	19	tp [ i ++ ]
LEAF_NODE	512:22	512:22	20	tp
LEAF_NODE	512:24	512:24	20	[
EXPR	512:25	512:25	20	i ++
FIELD	512:25	512:26	21	i ++
LEAF_NODE	512:25	512:25	22	i
LEAF_NODE	512:26	512:26	22	++
LEAF_NODE	512:28	512:28	20	]
LEAF_NODE	512:30	512:30	19	>>
FIELD	512:33	512:33	19	shft
LEAF_NODE	512:33	512:33	20	shft
LEAF_NODE	512:38	512:38	19	&
FIELD	512:40	512:40	19	0xff
LEAF_NODE	512:40	512:40	20	0xff
LEAF_NODE	512:44	512:44	19	)
LEAF_NODE	512:45	512:45	16	;
EXPR_STATEMENT	513:5	513:10	15	occ -- ;
EXPR	513:5	513:5	16	occ --
FIELD	513:5	513:8	17	occ --
LEAF_NODE	513:5	513:5	18	occ
LEAF_NODE	513:8	513:8	18	--
LEAF_NODE	513:10	513:10	16	;
LEAF_NODE	514:4	514:4	14	}
LEAF_NODE	515:3	515:3	11	}
SELECTION	516:3	516:21	9	
KEYWORD	516:3	516:3	10	if
LEAF_NODE	516:3	516:3	11	if
LEAF_NODE	516:6	516:6	10	(
CONDITION	516:7	516:7	10	rc >= MINRUN
EXPR	516:7	516:13	11	rc >= MINRUN
FIELD	516:7	516:7	12	rc
LEAF_NODE	516:7	516:7	13	rc
REL_OPERATOR	516:10	516:10	12	>=
LEAF_NODE	516:10	516:10	13	>=
FIELD	516:13	516:13	12	MINRUN
LEAF_NODE	516:13	516:13	13	MINRUN
LEAF_NODE	516:19	516:19	10	)
STATEMENTS	516:21	520:3	10	
LEAF_NODE	516:21	516:21	11	{
STATEMENTS	517:4	519:4	11	
EXPR_STATEMENT	517:4	517:30	12	* op ++ = ( uint8 ) ( 128 - 2 + rc ) ;
EXPR	517:4	517:4	13	* op ++ = ( uint8 ) ( 128 - 2 + rc )
ASSIGN	517:4	517:12	14	* op ++ = ( uint8 ) ( 128 - 2 + rc )
LVAL	517:4	517:4	15	* op ++
UNARY_EXPR	517:4	517:5	16	* op ++
UNARY_OPERATOR	517:4	517:4	17	*
LEAF_NODE	517:4	517:4	18	*
FIELD	517:5	517:7	17	op ++
LEAF_NODE	517:5	517:5	18	op
LEAF_NODE	517:7	517:7	18	++
ASSIGN_OP	517:10	517:10	15	=
LEAF_NODE	517:10	517:10	16	=
RVAL	517:12	517:29	15	( uint8 ) ( 128 - 2 + rc )
LEAF_NODE	517:12	517:12	16	(
TYPE_NAME	517:13	517:13	16	uint8
LEAF_NODE	517:13	517:13	17	uint8
LEAF_NODE	517:18	517:18	16	)
LEAF_NODE	517:20	517:20	16	(
FIELD	517:21	517:21	16	128
LEAF_NODE	517:21	517:21	17	128
LEAF_NODE	517:24	517:24	16	-
FIELD	517:25	517:25	16	2
LEAF_NODE	517:25	517:25	17	2
LEAF_NODE	517:26	517:26	16	+
FIELD	517:27	517:27	16	rc
LEAF_NODE	517:27	517:27	17	rc
LEAF_NODE	517:29	517:29	16	)
LEAF_NODE	517:30	517:30	13	;
EXPR_STATEMENT	518:4	518:44	12	* op ++ = ( uint8 ) ( tp [ beg ] >> shft & 0xff ) ;
EXPR	518:4	518:4	13	* op ++ = ( uint8 ) ( tp [ beg ] >> shft & 0xff )
ASSIGN	518:4	518:12	14	* op ++ = ( uint8 ) ( tp [ beg ] >> shft & 0xff )
LVAL	518:4	518:4	15	* op ++
UNARY_EXPR	518:4	518:5	16	* op ++
UNARY_OPERATOR	518:4	518:4	17	*
LEAF_NODE	518:4	518:4	18	*
FIELD	518:5	518:7	17	op ++
LEAF_NODE	518:5	518:5	18	op
LEAF_NODE	518:7	518:7	18	++
ASSIGN_OP	518:10	518:10	15	=
LEAF_NODE	518:10	518:10	16	=
RVAL	518:12	518:43	15	( uint8 ) ( tp [ beg ] >> shft & 0xff )
LEAF_NODE	518:12	518:12	16	(
TYPE_NAME	518:13	518:13	16	uint8
LEAF_NODE	518:13	518:13	17	uint8
LEAF_NODE	518:18	518:18	16	)
LEAF_NODE	518:20	518:20	16	(
FIELD	518:21	518:27	16	tp [ beg ]
LEAF_NODE	518:21	518:21	17	tp
LEAF_NODE	518:23	518:23	17	[
EXPR	518:24	518:24	17	beg
FIELD	518:24	518:24	18	beg
LEAF_NODE	518:24	518:24	19	beg
LEAF_NODE	518:27	518:27	17	]
LEAF_NODE	518:29	518:29	16	>>
FIELD	518:32	518:32	16	shft
LEAF_NODE	518:32	518:32	17	shft
LEAF_NODE	518:37	518:37	16	&
FIELD	518:39	518:39	16	0xff
LEAF_NODE	518:39	518:39	17	0xff
LEAF_NODE	518:43	518:43	16	)
LEAF_NODE	518:44	518:44	13	;
EXPR_STATEMENT	519:4	519:12	12	occ -= 2 ;
EXPR	519:4	519:4	13	occ -= 2
ASSIGN	519:4	519:11	14	occ -= 2
LVAL	519:4	519:4	15	occ
FIELD	519:4	519:4	16	occ
LEAF_NODE	519:4	519:4	17	occ
ASSIGN_OP	519:8	519:8	15	-=
LEAF_NODE	519:8	519:8	16	-=
RVAL	519:11	519:11	15	2
FIELD	519:11	519:11	16	2
LEAF_NODE	519:11	519:11	17	2
LEAF_NODE	519:12	519:12	13	;
LEAF_NODE	520:3	520:3	11	}
SELECTION	520:5	521:4	9	
KEYWORD	520:5	520:5	10	else
LEAF_NODE	520:5	520:5	11	else
STATEMENTS	521:4	521:4	10	
EXPR_STATEMENT	521:4	521:10	11	rc = 0 ;
EXPR	521:4	521:4	12	rc = 0
ASSIGN	521:4	521:9	13	rc = 0
LVAL	521:4	521:4	14	rc
FIELD	521:4	521:4	15	rc
LEAF_NODE	521:4	521:4	16	rc
ASSIGN_OP	521:7	521:7	14	=
LEAF_NODE	521:7	521:7	15	=
RVAL	521:9	521:9	14	0
FIELD	521:9	521:9	15	0
LEAF_NODE	521:9	521:9	16	0
LEAF_NODE	521:10	521:10	12	;
LEAF_NODE	522:2	522:2	8	}
LEAF_NODE	523:1	523:1	5	}
EXPR_STATEMENT	524:1	524:20	3	tif -> tif_rawcp = op ;
EXPR	524:1	524:1	4	tif -> tif_rawcp = op
ASSIGN	524:1	524:18	5	tif -> tif_rawcp = op
LVAL	524:1	524:1	6	tif -> tif_rawcp
FIELD	524:1	524:6	7	tif -> tif_rawcp
LEAF_NODE	524:1	524:1	8	tif
LEAF_NODE	524:4	524:4	8	->
LEAF_NODE	524:6	524:6	8	tif_rawcp
ASSIGN_OP	524:16	524:16	6	=
LEAF_NODE	524:16	524:16	7	=
RVAL	524:18	524:18	6	op
FIELD	524:18	524:18	7	op
LEAF_NODE	524:18	524:18	8	op
LEAF_NODE	524:20	524:20	4	;
EXPR_STATEMENT	525:1	525:44	3	tif -> tif_rawcc = tif -> tif_rawdatasize - occ ;
EXPR	525:1	525:1	4	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
ASSIGN	525:1	525:18	5	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
LVAL	525:1	525:1	6	tif -> tif_rawcc
FIELD	525:1	525:6	7	tif -> tif_rawcc
LEAF_NODE	525:1	525:1	8	tif
LEAF_NODE	525:4	525:4	8	->
LEAF_NODE	525:6	525:6	8	tif_rawcc
ASSIGN_OP	525:16	525:16	6	=
LEAF_NODE	525:16	525:16	7	=
RVAL	525:18	525:41	6	tif -> tif_rawdatasize - occ
FIELD	525:18	525:23	7	tif -> tif_rawdatasize
LEAF_NODE	525:18	525:18	8	tif
LEAF_NODE	525:21	525:21	8	->
LEAF_NODE	525:23	525:23	8	tif_rawdatasize
LEAF_NODE	525:39	525:39	7	-
FIELD	525:41	525:41	7	occ
LEAF_NODE	525:41	525:41	8	occ
LEAF_NODE	525:44	525:44	4	;
JUMP_STATEMENT	527:1	527:11	3	return ( 1 ) ;
KEYWORD	527:1	527:1	4	return
LEAF_NODE	527:1	527:1	5	return
DESTINATION	527:8	527:8	4	( 1 )
EXPR	527:8	527:10	5	( 1 )
LEAF_NODE	527:8	527:8	6	(
FIELD	527:9	527:9	6	1
LEAF_NODE	527:9	527:9	7	1
LEAF_NODE	527:10	527:10	6	)
LEAF_NODE	527:11	527:11	4	;
LEAF_NODE	528:0	528:0	2	}
FUNCTION_DEF	533:0	580:0	1	
RETURN_TYPE	533:0	533:7	2	static int
LEAF_NODE	533:0	533:0	3	static
TYPE_NAME	533:7	533:7	3	int
LEAF_NODE	533:7	533:7	4	int
FUNCTION_NAME	534:0	534:0	2	LogLuvEncode24
LEAF_NODE	534:0	534:0	3	LogLuvEncode24
PARAMETER_LIST	534:14	534:58	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	534:14	534:14	3	(
PARAMETER_DECL	534:15	534:21	3	TIFF * tif
TYPE	534:15	534:19	4	TIFF *
TYPE_NAME	534:15	534:15	5	TIFF
LEAF_NODE	534:15	534:15	6	TIFF
POINTER	534:19	534:19	5	*
LEAF_NODE	534:19	534:19	6	*
NAME	534:21	534:21	4	tif
LEAF_NODE	534:21	534:21	5	tif
LEAF_NODE	534:24	534:24	3	,
PARAMETER_DECL	534:26	534:33	3	uint8 * bp
TYPE	534:26	534:31	4	uint8 *
TYPE_NAME	534:26	534:26	5	uint8
LEAF_NODE	534:26	534:26	6	uint8
POINTER	534:31	534:31	5	*
LEAF_NODE	534:31	534:31	6	*
NAME	534:33	534:33	4	bp
LEAF_NODE	534:33	534:33	5	bp
LEAF_NODE	534:35	534:35	3	,
PARAMETER_DECL	534:37	534:46	3	tmsize_t cc
TYPE	534:37	534:37	4	tmsize_t
TYPE_NAME	534:37	534:37	5	tmsize_t
LEAF_NODE	534:37	534:37	6	tmsize_t
NAME	534:46	534:46	4	cc
LEAF_NODE	534:46	534:46	5	cc
LEAF_NODE	534:48	534:48	3	,
PARAMETER_DECL	534:50	534:57	3	uint16 s
TYPE	534:50	534:50	4	uint16
TYPE_NAME	534:50	534:50	5	uint16
LEAF_NODE	534:50	534:50	6	uint16
NAME	534:57	534:57	4	s
LEAF_NODE	534:57	534:57	5	s
LEAF_NODE	534:58	534:58	3	)
LEAF_NODE	535:0	535:0	2	{
STATEMENTS	536:1	579:1	2	
LEAF_NODE	536:1	536:1	3	static
SIMPLE_DECL	536:8	536:46	3	const char [ ] module ; module = "LogLuvEncode24" ;
VAR_DECL	536:8	536:19	4	const char [ ] module ; module = "LogLuvEncode24"
TYPE	536:8	536:25	5	const char [ ]
TYPE_NAME	536:8	536:14	6	const char
LEAF_NODE	536:8	536:8	7	const
LEAF_NODE	536:14	536:14	7	char
TYPE_SUFFIX	536:25	536:26	6	[ ]
LEAF_NODE	536:25	536:25	7	[
LEAF_NODE	536:26	536:26	7	]
NAME	536:19	536:19	5	module
LEAF_NODE	536:19	536:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	536:19	536:19	5	module = "LogLuvEncode24"
ASSIGN	536:19	536:30	6	module = "LogLuvEncode24"
LVAL	536:19	536:19	7	module
NAME	536:19	536:19	8	module
LEAF_NODE	536:19	536:19	9	module
ASSIGN_OP	536:28	536:28	7	=
LEAF_NODE	536:28	536:28	8	=
RVAL	536:30	536:30	7	"LogLuvEncode24"
FIELD	536:30	536:30	8	"LogLuvEncode24"
LEAF_NODE	536:30	536:30	9	"LogLuvEncode24"
LEAF_NODE	536:46	536:46	4	;
SIMPLE_DECL	537:1	537:36	3	LogLuvState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	537:1	537:14	4	LogLuvState * sp ; sp = EncoderState ( tif )
TYPE	537:1	537:12	5	LogLuvState *
TYPE_NAME	537:1	537:1	6	LogLuvState
LEAF_NODE	537:1	537:1	7	LogLuvState
POINTER	537:12	537:12	6	*
LEAF_NODE	537:12	537:12	7	*
NAME	537:14	537:14	5	sp
LEAF_NODE	537:14	537:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	537:14	537:14	5	sp = EncoderState ( tif )
ASSIGN	537:14	537:19	6	sp = EncoderState ( tif )
LVAL	537:14	537:14	7	sp
NAME	537:14	537:14	8	sp
LEAF_NODE	537:14	537:14	9	sp
ASSIGN_OP	537:17	537:17	7	=
LEAF_NODE	537:17	537:17	8	=
RVAL	537:19	537:19	7	EncoderState ( tif )
FUNCTION_CALL	537:19	537:35	8	EncoderState ( tif )
CALLEE	537:19	537:19	9	EncoderState
LEAF_NODE	537:19	537:19	10	EncoderState
LEAF_NODE	537:31	537:31	9	(
ARGUMENT	537:32	537:32	9	tif
FIELD	537:32	537:32	10	tif
LEAF_NODE	537:32	537:32	11	tif
LEAF_NODE	537:35	537:35	9	)
LEAF_NODE	537:36	537:36	4	;
SIMPLE_DECL	538:1	538:11	3	tmsize_t i ;
VAR_DECL	538:1	538:10	4	tmsize_t i
TYPE	538:1	538:1	5	tmsize_t
TYPE_NAME	538:1	538:1	6	tmsize_t
LEAF_NODE	538:1	538:1	7	tmsize_t
NAME	538:10	538:10	5	i
LEAF_NODE	538:10	538:10	6	i
LEAF_NODE	538:11	538:11	4	;
SIMPLE_DECL	539:1	539:17	3	tmsize_t npixels ;
VAR_DECL	539:1	539:10	4	tmsize_t npixels
TYPE	539:1	539:1	5	tmsize_t
TYPE_NAME	539:1	539:1	6	tmsize_t
LEAF_NODE	539:1	539:1	7	tmsize_t
NAME	539:10	539:10	5	npixels
LEAF_NODE	539:10	539:10	6	npixels
LEAF_NODE	539:17	539:17	4	;
SIMPLE_DECL	540:1	540:13	3	tmsize_t occ ;
VAR_DECL	540:1	540:10	4	tmsize_t occ
TYPE	540:1	540:1	5	tmsize_t
TYPE_NAME	540:1	540:1	6	tmsize_t
LEAF_NODE	540:1	540:1	7	tmsize_t
NAME	540:10	540:10	5	occ
LEAF_NODE	540:10	540:10	6	occ
LEAF_NODE	540:13	540:13	4	;
SIMPLE_DECL	541:1	541:10	3	uint8 * op ;
VAR_DECL	541:1	541:8	4	uint8 * op
TYPE	541:1	541:6	5	uint8 *
TYPE_NAME	541:1	541:1	6	uint8
LEAF_NODE	541:1	541:1	7	uint8
POINTER	541:6	541:6	6	*
LEAF_NODE	541:6	541:6	7	*
NAME	541:8	541:8	5	op
LEAF_NODE	541:8	541:8	6	op
LEAF_NODE	541:10	541:10	4	;
SIMPLE_DECL	542:1	542:11	3	uint32 * tp ;
VAR_DECL	542:1	542:9	4	uint32 * tp
TYPE	542:1	542:7	5	uint32 *
TYPE_NAME	542:1	542:1	6	uint32
LEAF_NODE	542:1	542:1	7	uint32
POINTER	542:7	542:7	6	*
LEAF_NODE	542:7	542:7	7	*
NAME	542:9	542:9	5	tp
LEAF_NODE	542:9	542:9	6	tp
LEAF_NODE	542:11	542:11	4	;
EXPR_STATEMENT	544:1	544:15	3	assert ( s == 0 ) ;
EXPR	544:1	544:1	4	assert ( s == 0 )
FUNCTION_CALL	544:1	544:14	5	assert ( s == 0 )
CALLEE	544:1	544:1	6	assert
LEAF_NODE	544:1	544:1	7	assert
LEAF_NODE	544:7	544:7	6	(
ARGUMENT	544:8	544:13	6	s == 0
FIELD	544:8	544:8	7	s
LEAF_NODE	544:8	544:8	8	s
EQ_OPERATOR	544:10	544:10	7	==
LEAF_NODE	544:10	544:10	8	==
FIELD	544:13	544:13	7	0
LEAF_NODE	544:13	544:13	8	0
LEAF_NODE	544:14	544:14	6	)
LEAF_NODE	544:15	544:15	4	;
EXPR_STATEMENT	545:1	545:19	3	assert ( sp != NULL ) ;
EXPR	545:1	545:1	4	assert ( sp != NULL )
FUNCTION_CALL	545:1	545:18	5	assert ( sp != NULL )
CALLEE	545:1	545:1	6	assert
LEAF_NODE	545:1	545:1	7	assert
LEAF_NODE	545:7	545:7	6	(
ARGUMENT	545:8	545:14	6	sp != NULL
FIELD	545:8	545:8	7	sp
LEAF_NODE	545:8	545:8	8	sp
EQ_OPERATOR	545:11	545:11	7	!=
LEAF_NODE	545:11	545:11	8	!=
FIELD	545:14	545:14	7	NULL
LEAF_NODE	545:14	545:14	8	NULL
LEAF_NODE	545:18	545:18	6	)
LEAF_NODE	545:19	545:19	4	;
EXPR_STATEMENT	546:1	546:30	3	npixels = cc / sp -> pixel_size ;
EXPR	546:1	546:1	4	npixels = cc / sp -> pixel_size
ASSIGN	546:1	546:11	5	npixels = cc / sp -> pixel_size
LVAL	546:1	546:1	6	npixels
FIELD	546:1	546:1	7	npixels
LEAF_NODE	546:1	546:1	8	npixels
ASSIGN_OP	546:9	546:9	6	=
LEAF_NODE	546:9	546:9	7	=
RVAL	546:11	546:16	6	cc / sp -> pixel_size
FIELD	546:11	546:11	7	cc
LEAF_NODE	546:11	546:11	8	cc
LEAF_NODE	546:14	546:14	7	/
FIELD	546:16	546:20	7	sp -> pixel_size
LEAF_NODE	546:16	546:16	8	sp
LEAF_NODE	546:18	546:18	8	->
LEAF_NODE	546:20	546:20	8	pixel_size
LEAF_NODE	546:30	546:30	4	;
SELECTION	548:1	549:2	3	
KEYWORD	548:1	548:1	4	if
LEAF_NODE	548:1	548:1	5	if
LEAF_NODE	548:4	548:4	4	(
CONDITION	548:5	548:5	4	sp -> user_datafmt == SGILOGDATAFMT_RAW
EXPR	548:5	548:25	5	sp -> user_datafmt == SGILOGDATAFMT_RAW
FIELD	548:5	548:9	6	sp -> user_datafmt
LEAF_NODE	548:5	548:5	7	sp
LEAF_NODE	548:7	548:7	7	->
LEAF_NODE	548:9	548:9	7	user_datafmt
EQ_OPERATOR	548:22	548:22	6	==
LEAF_NODE	548:22	548:22	7	==
FIELD	548:25	548:25	6	SGILOGDATAFMT_RAW
LEAF_NODE	548:25	548:25	7	SGILOGDATAFMT_RAW
LEAF_NODE	548:42	548:42	4	)
STATEMENTS	549:2	549:2	4	
EXPR_STATEMENT	549:2	549:19	5	tp = ( uint32 * ) bp ;
EXPR	549:2	549:2	6	tp = ( uint32 * ) bp
ASSIGN	549:2	549:7	7	tp = ( uint32 * ) bp
LVAL	549:2	549:2	8	tp
FIELD	549:2	549:2	9	tp
LEAF_NODE	549:2	549:2	10	tp
ASSIGN_OP	549:5	549:5	8	=
LEAF_NODE	549:5	549:5	9	=
RVAL	549:7	549:17	8	( uint32 * ) bp
LEAF_NODE	549:7	549:7	9	(
TYPE_NAME	549:8	549:8	9	uint32
LEAF_NODE	549:8	549:8	10	uint32
LEAF_NODE	549:14	549:14	9	*
LEAF_NODE	549:15	549:15	9	)
FIELD	549:17	549:17	9	bp
LEAF_NODE	549:17	549:17	10	bp
LEAF_NODE	549:19	549:19	6	;
SELECTION	550:1	550:6	3	
KEYWORD	550:1	550:1	4	else
LEAF_NODE	550:1	550:1	5	else
STATEMENTS	550:6	558:1	4	
LEAF_NODE	550:6	550:6	5	{
STATEMENTS	551:2	557:2	5	
EXPR_STATEMENT	551:2	551:25	6	tp = ( uint32 * ) sp -> tbuf ;
EXPR	551:2	551:2	7	tp = ( uint32 * ) sp -> tbuf
ASSIGN	551:2	551:7	8	tp = ( uint32 * ) sp -> tbuf
LVAL	551:2	551:2	9	tp
FIELD	551:2	551:2	10	tp
LEAF_NODE	551:2	551:2	11	tp
ASSIGN_OP	551:5	551:5	9	=
LEAF_NODE	551:5	551:5	10	=
RVAL	551:7	551:17	9	( uint32 * ) sp -> tbuf
LEAF_NODE	551:7	551:7	10	(
TYPE_NAME	551:8	551:8	10	uint32
LEAF_NODE	551:8	551:8	11	uint32
LEAF_NODE	551:14	551:14	10	*
LEAF_NODE	551:15	551:15	10	)
FIELD	551:17	551:21	10	sp -> tbuf
LEAF_NODE	551:17	551:17	11	sp
LEAF_NODE	551:19	551:19	11	->
LEAF_NODE	551:21	551:21	11	tbuf
LEAF_NODE	551:25	551:25	7	;
SELECTION	552:2	552:28	6	
KEYWORD	552:2	552:2	7	if
LEAF_NODE	552:2	552:2	8	if
LEAF_NODE	552:4	552:4	7	(
CONDITION	552:5	552:5	7	sp -> tbuflen < npixels
EXPR	552:5	552:19	8	sp -> tbuflen < npixels
FIELD	552:5	552:9	9	sp -> tbuflen
LEAF_NODE	552:5	552:5	10	sp
LEAF_NODE	552:7	552:7	10	->
LEAF_NODE	552:9	552:9	10	tbuflen
REL_OPERATOR	552:17	552:17	9	<
LEAF_NODE	552:17	552:17	10	<
FIELD	552:19	552:19	9	npixels
LEAF_NODE	552:19	552:19	10	npixels
LEAF_NODE	552:26	552:26	7	)
STATEMENTS	552:28	556:2	7	
LEAF_NODE	552:28	552:28	8	{
STATEMENTS	553:3	555:3	8	
EXPR_STATEMENT	553:3	554:38	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" ) ;
EXPR	553:3	553:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
FUNCTION_CALL	553:3	554:37	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
CALLEE	553:3	553:3	12	TIFFErrorExt
LEAF_NODE	553:3	553:3	13	TIFFErrorExt
LEAF_NODE	553:15	553:15	12	(
ARGUMENT	553:16	553:16	12	tif -> tif_clientdata
FIELD	553:16	553:21	13	tif -> tif_clientdata
LEAF_NODE	553:16	553:16	14	tif
LEAF_NODE	553:19	553:19	14	->
LEAF_NODE	553:21	553:21	14	tif_clientdata
LEAF_NODE	553:35	553:35	12	,
ARGUMENT	553:37	553:37	12	module
FIELD	553:37	553:37	13	module
LEAF_NODE	553:37	553:37	14	module
LEAF_NODE	553:43	553:43	12	,
ARGUMENT	554:7	554:7	12	"Translation buffer too short"
FIELD	554:7	554:7	13	"Translation buffer too short"
LEAF_NODE	554:7	554:7	14	"Translation buffer too short"
LEAF_NODE	554:37	554:37	12	)
LEAF_NODE	554:38	554:38	10	;
JUMP_STATEMENT	555:3	555:13	9	return ( 0 ) ;
KEYWORD	555:3	555:3	10	return
LEAF_NODE	555:3	555:3	11	return
DESTINATION	555:10	555:10	10	( 0 )
EXPR	555:10	555:12	11	( 0 )
LEAF_NODE	555:10	555:10	12	(
FIELD	555:11	555:11	12	0
LEAF_NODE	555:11	555:11	13	0
LEAF_NODE	555:12	555:12	12	)
LEAF_NODE	555:13	555:13	10	;
LEAF_NODE	556:2	556:2	8	}
EXPR_STATEMENT	557:2	557:31	6	( * sp -> tfunc ) ( sp , bp , npixels ) ;
EXPR	557:2	557:2	7	( * sp -> tfunc ) ( sp , bp , npixels )
FUNCTION_CALL	557:2	557:30	8	( * sp -> tfunc ) ( sp , bp , npixels )
CALLEE	557:2	557:13	9	( * sp -> tfunc )
LEAF_NODE	557:2	557:2	10	(
UNARY_EXPR	557:3	557:4	10	* sp -> tfunc
UNARY_OPERATOR	557:3	557:3	11	*
LEAF_NODE	557:3	557:3	12	*
FIELD	557:4	557:8	11	sp -> tfunc
LEAF_NODE	557:4	557:4	12	sp
LEAF_NODE	557:6	557:6	12	->
LEAF_NODE	557:8	557:8	12	tfunc
LEAF_NODE	557:13	557:13	10	)
LEAF_NODE	557:14	557:14	9	(
ARGUMENT	557:15	557:15	9	sp
FIELD	557:15	557:15	10	sp
LEAF_NODE	557:15	557:15	11	sp
LEAF_NODE	557:17	557:17	9	,
ARGUMENT	557:19	557:19	9	bp
FIELD	557:19	557:19	10	bp
LEAF_NODE	557:19	557:19	11	bp
LEAF_NODE	557:21	557:21	9	,
ARGUMENT	557:23	557:23	9	npixels
FIELD	557:23	557:23	10	npixels
LEAF_NODE	557:23	557:23	11	npixels
LEAF_NODE	557:30	557:30	9	)
LEAF_NODE	557:31	557:31	7	;
LEAF_NODE	558:1	558:1	5	}
EXPR_STATEMENT	560:1	560:20	3	op = tif -> tif_rawcp ;
EXPR	560:1	560:1	4	op = tif -> tif_rawcp
ASSIGN	560:1	560:6	5	op = tif -> tif_rawcp
LVAL	560:1	560:1	6	op
FIELD	560:1	560:1	7	op
LEAF_NODE	560:1	560:1	8	op
ASSIGN_OP	560:4	560:4	6	=
LEAF_NODE	560:4	560:4	7	=
RVAL	560:6	560:6	6	tif -> tif_rawcp
FIELD	560:6	560:11	7	tif -> tif_rawcp
LEAF_NODE	560:6	560:6	8	tif
LEAF_NODE	560:9	560:9	8	->
LEAF_NODE	560:11	560:11	8	tif_rawcp
LEAF_NODE	560:20	560:20	4	;
EXPR_STATEMENT	561:1	561:44	3	occ = tif -> tif_rawdatasize - tif -> tif_rawcc ;
EXPR	561:1	561:1	4	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
ASSIGN	561:1	561:7	5	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
LVAL	561:1	561:1	6	occ
FIELD	561:1	561:1	7	occ
LEAF_NODE	561:1	561:1	8	occ
ASSIGN_OP	561:5	561:5	6	=
LEAF_NODE	561:5	561:5	7	=
RVAL	561:7	561:30	6	tif -> tif_rawdatasize - tif -> tif_rawcc
FIELD	561:7	561:12	7	tif -> tif_rawdatasize
LEAF_NODE	561:7	561:7	8	tif
LEAF_NODE	561:10	561:10	8	->
LEAF_NODE	561:12	561:12	8	tif_rawdatasize
LEAF_NODE	561:28	561:28	7	-
FIELD	561:30	561:35	7	tif -> tif_rawcc
LEAF_NODE	561:30	561:30	8	tif
LEAF_NODE	561:33	561:33	8	->
LEAF_NODE	561:35	561:35	8	tif_rawcc
LEAF_NODE	561:44	561:44	4	;
ITERATION	562:1	562:26	3	
KEYWORD	562:1	562:1	4	for
LEAF_NODE	562:1	562:1	5	for
LEAF_NODE	562:5	562:5	4	(
FOR_INIT	562:6	562:17	4	i = npixels ;
EXPR	562:6	562:6	5	i = npixels
ASSIGN	562:6	562:10	6	i = npixels
LVAL	562:6	562:6	7	i
FIELD	562:6	562:6	8	i
LEAF_NODE	562:6	562:6	9	i
ASSIGN_OP	562:8	562:8	7	=
LEAF_NODE	562:8	562:8	8	=
RVAL	562:10	562:10	7	npixels
FIELD	562:10	562:10	8	npixels
LEAF_NODE	562:10	562:10	9	npixels
LEAF_NODE	562:17	562:17	5	;
CONDITION	562:19	562:19	4	i --
EXPR	562:19	562:19	5	i --
FIELD	562:19	562:20	6	i --
LEAF_NODE	562:19	562:19	7	i
LEAF_NODE	562:20	562:20	7	--
LEAF_NODE	562:22	562:22	4	;
LEAF_NODE	0:0	0:0	4	FOR_EXPR
LEAF_NODE	562:24	562:24	4	)
STATEMENTS	562:26	575:1	4	
LEAF_NODE	562:26	562:26	5	{
STATEMENTS	563:2	574:2	5	
SELECTION	563:2	563:15	6	
KEYWORD	563:2	563:2	7	if
LEAF_NODE	563:2	563:2	8	if
LEAF_NODE	563:5	563:5	7	(
CONDITION	563:6	563:6	7	occ < 3
EXPR	563:6	563:12	8	occ < 3
FIELD	563:6	563:6	9	occ
LEAF_NODE	563:6	563:6	10	occ
REL_OPERATOR	563:10	563:10	9	<
LEAF_NODE	563:10	563:10	10	<
FIELD	563:12	563:12	9	3
LEAF_NODE	563:12	563:12	10	3
LEAF_NODE	563:13	563:13	7	)
STATEMENTS	563:15	570:2	7	
LEAF_NODE	563:15	563:15	8	{
STATEMENTS	564:3	569:3	8	
EXPR_STATEMENT	564:3	564:22	9	tif -> tif_rawcp = op ;
EXPR	564:3	564:3	10	tif -> tif_rawcp = op
ASSIGN	564:3	564:20	11	tif -> tif_rawcp = op
LVAL	564:3	564:3	12	tif -> tif_rawcp
FIELD	564:3	564:8	13	tif -> tif_rawcp
LEAF_NODE	564:3	564:3	14	tif
LEAF_NODE	564:6	564:6	14	->
LEAF_NODE	564:8	564:8	14	tif_rawcp
ASSIGN_OP	564:18	564:18	12	=
LEAF_NODE	564:18	564:18	13	=
RVAL	564:20	564:20	12	op
FIELD	564:20	564:20	13	op
LEAF_NODE	564:20	564:20	14	op
LEAF_NODE	564:22	564:22	10	;
EXPR_STATEMENT	565:3	565:46	9	tif -> tif_rawcc = tif -> tif_rawdatasize - occ ;
EXPR	565:3	565:3	10	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
ASSIGN	565:3	565:20	11	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
LVAL	565:3	565:3	12	tif -> tif_rawcc
FIELD	565:3	565:8	13	tif -> tif_rawcc
LEAF_NODE	565:3	565:3	14	tif
LEAF_NODE	565:6	565:6	14	->
LEAF_NODE	565:8	565:8	14	tif_rawcc
ASSIGN_OP	565:18	565:18	12	=
LEAF_NODE	565:18	565:18	13	=
RVAL	565:20	565:43	12	tif -> tif_rawdatasize - occ
FIELD	565:20	565:25	13	tif -> tif_rawdatasize
LEAF_NODE	565:20	565:20	14	tif
LEAF_NODE	565:23	565:23	14	->
LEAF_NODE	565:25	565:25	14	tif_rawdatasize
LEAF_NODE	565:41	565:41	13	-
FIELD	565:43	565:43	13	occ
LEAF_NODE	565:43	565:43	14	occ
LEAF_NODE	565:46	565:46	10	;
SELECTION	566:3	567:4	9	
KEYWORD	566:3	566:3	10	if
LEAF_NODE	566:3	566:3	11	if
LEAF_NODE	566:6	566:6	10	(
CONDITION	566:7	566:7	10	! TIFFFlushData1 ( tif )
EXPR	566:7	566:7	11	! TIFFFlushData1 ( tif )
UNARY_EXPR	566:7	566:8	12	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	566:7	566:7	13	!
LEAF_NODE	566:7	566:7	14	!
FUNCTION_CALL	566:8	566:26	13	TIFFFlushData1 ( tif )
CALLEE	566:8	566:8	14	TIFFFlushData1
LEAF_NODE	566:8	566:8	15	TIFFFlushData1
LEAF_NODE	566:22	566:22	14	(
ARGUMENT	566:23	566:23	14	tif
FIELD	566:23	566:23	15	tif
LEAF_NODE	566:23	566:23	16	tif
LEAF_NODE	566:26	566:26	14	)
LEAF_NODE	566:27	566:27	10	)
STATEMENTS	567:4	567:4	10	
JUMP_STATEMENT	567:4	567:14	11	return ( 0 ) ;
KEYWORD	567:4	567:4	12	return
LEAF_NODE	567:4	567:4	13	return
DESTINATION	567:11	567:11	12	( 0 )
EXPR	567:11	567:13	13	( 0 )
LEAF_NODE	567:11	567:11	14	(
FIELD	567:12	567:12	14	0
LEAF_NODE	567:12	567:12	15	0
LEAF_NODE	567:13	567:13	14	)
LEAF_NODE	567:14	567:14	12	;
EXPR_STATEMENT	568:3	568:22	9	op = tif -> tif_rawcp ;
EXPR	568:3	568:3	10	op = tif -> tif_rawcp
ASSIGN	568:3	568:8	11	op = tif -> tif_rawcp
LVAL	568:3	568:3	12	op
FIELD	568:3	568:3	13	op
LEAF_NODE	568:3	568:3	14	op
ASSIGN_OP	568:6	568:6	12	=
LEAF_NODE	568:6	568:6	13	=
RVAL	568:8	568:8	12	tif -> tif_rawcp
FIELD	568:8	568:13	13	tif -> tif_rawcp
LEAF_NODE	568:8	568:8	14	tif
LEAF_NODE	568:11	568:11	14	->
LEAF_NODE	568:13	568:13	14	tif_rawcp
LEAF_NODE	568:22	568:22	10	;
EXPR_STATEMENT	569:3	569:46	9	occ = tif -> tif_rawdatasize - tif -> tif_rawcc ;
EXPR	569:3	569:3	10	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
ASSIGN	569:3	569:9	11	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
LVAL	569:3	569:3	12	occ
FIELD	569:3	569:3	13	occ
LEAF_NODE	569:3	569:3	14	occ
ASSIGN_OP	569:7	569:7	12	=
LEAF_NODE	569:7	569:7	13	=
RVAL	569:9	569:32	12	tif -> tif_rawdatasize - tif -> tif_rawcc
FIELD	569:9	569:14	13	tif -> tif_rawdatasize
LEAF_NODE	569:9	569:9	14	tif
LEAF_NODE	569:12	569:12	14	->
LEAF_NODE	569:14	569:14	14	tif_rawdatasize
LEAF_NODE	569:30	569:30	13	-
FIELD	569:32	569:37	13	tif -> tif_rawcc
LEAF_NODE	569:32	569:32	14	tif
LEAF_NODE	569:35	569:35	14	->
LEAF_NODE	569:37	569:37	14	tif_rawcc
LEAF_NODE	569:46	569:46	10	;
LEAF_NODE	570:2	570:2	8	}
EXPR_STATEMENT	571:2	571:28	6	* op ++ = ( uint8 ) ( * tp >> 16 ) ;
EXPR	571:2	571:2	7	* op ++ = ( uint8 ) ( * tp >> 16 )
ASSIGN	571:2	571:10	8	* op ++ = ( uint8 ) ( * tp >> 16 )
LVAL	571:2	571:2	9	* op ++
UNARY_EXPR	571:2	571:3	10	* op ++
UNARY_OPERATOR	571:2	571:2	11	*
LEAF_NODE	571:2	571:2	12	*
FIELD	571:3	571:5	11	op ++
LEAF_NODE	571:3	571:3	12	op
LEAF_NODE	571:5	571:5	12	++
ASSIGN_OP	571:8	571:8	9	=
LEAF_NODE	571:8	571:8	10	=
RVAL	571:10	571:27	9	( uint8 ) ( * tp >> 16 )
LEAF_NODE	571:10	571:10	10	(
TYPE_NAME	571:11	571:11	10	uint8
LEAF_NODE	571:11	571:11	11	uint8
LEAF_NODE	571:16	571:16	10	)
LEAF_NODE	571:17	571:17	10	(
UNARY_EXPR	571:18	571:19	10	* tp
UNARY_OPERATOR	571:18	571:18	11	*
LEAF_NODE	571:18	571:18	12	*
FIELD	571:19	571:19	11	tp
LEAF_NODE	571:19	571:19	12	tp
LEAF_NODE	571:22	571:22	10	>>
FIELD	571:25	571:25	10	16
LEAF_NODE	571:25	571:25	11	16
LEAF_NODE	571:27	571:27	10	)
LEAF_NODE	571:28	571:28	7	;
EXPR_STATEMENT	572:2	572:34	6	* op ++ = ( uint8 ) ( * tp >> 8 & 0xff ) ;
EXPR	572:2	572:2	7	* op ++ = ( uint8 ) ( * tp >> 8 & 0xff )
ASSIGN	572:2	572:10	8	* op ++ = ( uint8 ) ( * tp >> 8 & 0xff )
LVAL	572:2	572:2	9	* op ++
UNARY_EXPR	572:2	572:3	10	* op ++
UNARY_OPERATOR	572:2	572:2	11	*
LEAF_NODE	572:2	572:2	12	*
FIELD	572:3	572:5	11	op ++
LEAF_NODE	572:3	572:3	12	op
LEAF_NODE	572:5	572:5	12	++
ASSIGN_OP	572:8	572:8	9	=
LEAF_NODE	572:8	572:8	10	=
RVAL	572:10	572:33	9	( uint8 ) ( * tp >> 8 & 0xff )
LEAF_NODE	572:10	572:10	10	(
TYPE_NAME	572:11	572:11	10	uint8
LEAF_NODE	572:11	572:11	11	uint8
LEAF_NODE	572:16	572:16	10	)
LEAF_NODE	572:17	572:17	10	(
UNARY_EXPR	572:18	572:19	10	* tp
UNARY_OPERATOR	572:18	572:18	11	*
LEAF_NODE	572:18	572:18	12	*
FIELD	572:19	572:19	11	tp
LEAF_NODE	572:19	572:19	12	tp
LEAF_NODE	572:22	572:22	10	>>
FIELD	572:25	572:25	10	8
LEAF_NODE	572:25	572:25	11	8
LEAF_NODE	572:27	572:27	10	&
FIELD	572:29	572:29	10	0xff
LEAF_NODE	572:29	572:29	11	0xff
LEAF_NODE	572:33	572:33	10	)
LEAF_NODE	572:34	572:34	7	;
EXPR_STATEMENT	573:2	573:31	6	* op ++ = ( uint8 ) ( * tp ++ & 0xff ) ;
EXPR	573:2	573:2	7	* op ++ = ( uint8 ) ( * tp ++ & 0xff )
ASSIGN	573:2	573:10	8	* op ++ = ( uint8 ) ( * tp ++ & 0xff )
LVAL	573:2	573:2	9	* op ++
UNARY_EXPR	573:2	573:3	10	* op ++
UNARY_OPERATOR	573:2	573:2	11	*
LEAF_NODE	573:2	573:2	12	*
FIELD	573:3	573:5	11	op ++
LEAF_NODE	573:3	573:3	12	op
LEAF_NODE	573:5	573:5	12	++
ASSIGN_OP	573:8	573:8	9	=
LEAF_NODE	573:8	573:8	10	=
RVAL	573:10	573:30	9	( uint8 ) ( * tp ++ & 0xff )
LEAF_NODE	573:10	573:10	10	(
TYPE_NAME	573:11	573:11	10	uint8
LEAF_NODE	573:11	573:11	11	uint8
LEAF_NODE	573:16	573:16	10	)
LEAF_NODE	573:17	573:17	10	(
UNARY_EXPR	573:18	573:19	10	* tp ++
UNARY_OPERATOR	573:18	573:18	11	*
LEAF_NODE	573:18	573:18	12	*
FIELD	573:19	573:21	11	tp ++
LEAF_NODE	573:19	573:19	12	tp
LEAF_NODE	573:21	573:21	12	++
LEAF_NODE	573:24	573:24	10	&
FIELD	573:26	573:26	10	0xff
LEAF_NODE	573:26	573:26	11	0xff
LEAF_NODE	573:30	573:30	10	)
LEAF_NODE	573:31	573:31	7	;
EXPR_STATEMENT	574:2	574:10	6	occ -= 3 ;
EXPR	574:2	574:2	7	occ -= 3
ASSIGN	574:2	574:9	8	occ -= 3
LVAL	574:2	574:2	9	occ
FIELD	574:2	574:2	10	occ
LEAF_NODE	574:2	574:2	11	occ
ASSIGN_OP	574:6	574:6	9	-=
LEAF_NODE	574:6	574:6	10	-=
RVAL	574:9	574:9	9	3
FIELD	574:9	574:9	10	3
LEAF_NODE	574:9	574:9	11	3
LEAF_NODE	574:10	574:10	7	;
LEAF_NODE	575:1	575:1	5	}
EXPR_STATEMENT	576:1	576:20	3	tif -> tif_rawcp = op ;
EXPR	576:1	576:1	4	tif -> tif_rawcp = op
ASSIGN	576:1	576:18	5	tif -> tif_rawcp = op
LVAL	576:1	576:1	6	tif -> tif_rawcp
FIELD	576:1	576:6	7	tif -> tif_rawcp
LEAF_NODE	576:1	576:1	8	tif
LEAF_NODE	576:4	576:4	8	->
LEAF_NODE	576:6	576:6	8	tif_rawcp
ASSIGN_OP	576:16	576:16	6	=
LEAF_NODE	576:16	576:16	7	=
RVAL	576:18	576:18	6	op
FIELD	576:18	576:18	7	op
LEAF_NODE	576:18	576:18	8	op
LEAF_NODE	576:20	576:20	4	;
EXPR_STATEMENT	577:1	577:44	3	tif -> tif_rawcc = tif -> tif_rawdatasize - occ ;
EXPR	577:1	577:1	4	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
ASSIGN	577:1	577:18	5	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
LVAL	577:1	577:1	6	tif -> tif_rawcc
FIELD	577:1	577:6	7	tif -> tif_rawcc
LEAF_NODE	577:1	577:1	8	tif
LEAF_NODE	577:4	577:4	8	->
LEAF_NODE	577:6	577:6	8	tif_rawcc
ASSIGN_OP	577:16	577:16	6	=
LEAF_NODE	577:16	577:16	7	=
RVAL	577:18	577:41	6	tif -> tif_rawdatasize - occ
FIELD	577:18	577:23	7	tif -> tif_rawdatasize
LEAF_NODE	577:18	577:18	8	tif
LEAF_NODE	577:21	577:21	8	->
LEAF_NODE	577:23	577:23	8	tif_rawdatasize
LEAF_NODE	577:39	577:39	7	-
FIELD	577:41	577:41	7	occ
LEAF_NODE	577:41	577:41	8	occ
LEAF_NODE	577:44	577:44	4	;
JUMP_STATEMENT	579:1	579:11	3	return ( 1 ) ;
KEYWORD	579:1	579:1	4	return
LEAF_NODE	579:1	579:1	5	return
DESTINATION	579:8	579:8	4	( 1 )
EXPR	579:8	579:10	5	( 1 )
LEAF_NODE	579:8	579:8	6	(
FIELD	579:9	579:9	6	1
LEAF_NODE	579:9	579:9	7	1
LEAF_NODE	579:10	579:10	6	)
LEAF_NODE	579:11	579:11	4	;
LEAF_NODE	580:0	580:0	2	}
FUNCTION_DEF	585:0	680:0	1	
RETURN_TYPE	585:0	585:7	2	static int
LEAF_NODE	585:0	585:0	3	static
TYPE_NAME	585:7	585:7	3	int
LEAF_NODE	585:7	585:7	4	int
FUNCTION_NAME	586:0	586:0	2	LogLuvEncode32
LEAF_NODE	586:0	586:0	3	LogLuvEncode32
PARAMETER_LIST	586:14	586:58	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	586:14	586:14	3	(
PARAMETER_DECL	586:15	586:21	3	TIFF * tif
TYPE	586:15	586:19	4	TIFF *
TYPE_NAME	586:15	586:15	5	TIFF
LEAF_NODE	586:15	586:15	6	TIFF
POINTER	586:19	586:19	5	*
LEAF_NODE	586:19	586:19	6	*
NAME	586:21	586:21	4	tif
LEAF_NODE	586:21	586:21	5	tif
LEAF_NODE	586:24	586:24	3	,
PARAMETER_DECL	586:26	586:33	3	uint8 * bp
TYPE	586:26	586:31	4	uint8 *
TYPE_NAME	586:26	586:26	5	uint8
LEAF_NODE	586:26	586:26	6	uint8
POINTER	586:31	586:31	5	*
LEAF_NODE	586:31	586:31	6	*
NAME	586:33	586:33	4	bp
LEAF_NODE	586:33	586:33	5	bp
LEAF_NODE	586:35	586:35	3	,
PARAMETER_DECL	586:37	586:46	3	tmsize_t cc
TYPE	586:37	586:37	4	tmsize_t
TYPE_NAME	586:37	586:37	5	tmsize_t
LEAF_NODE	586:37	586:37	6	tmsize_t
NAME	586:46	586:46	4	cc
LEAF_NODE	586:46	586:46	5	cc
LEAF_NODE	586:48	586:48	3	,
PARAMETER_DECL	586:50	586:57	3	uint16 s
TYPE	586:50	586:50	4	uint16
TYPE_NAME	586:50	586:50	5	uint16
LEAF_NODE	586:50	586:50	6	uint16
NAME	586:57	586:57	4	s
LEAF_NODE	586:57	586:57	5	s
LEAF_NODE	586:58	586:58	3	)
LEAF_NODE	587:0	587:0	2	{
STATEMENTS	588:1	679:1	2	
LEAF_NODE	588:1	588:1	3	static
SIMPLE_DECL	588:8	588:46	3	const char [ ] module ; module = "LogLuvEncode32" ;
VAR_DECL	588:8	588:19	4	const char [ ] module ; module = "LogLuvEncode32"
TYPE	588:8	588:25	5	const char [ ]
TYPE_NAME	588:8	588:14	6	const char
LEAF_NODE	588:8	588:8	7	const
LEAF_NODE	588:14	588:14	7	char
TYPE_SUFFIX	588:25	588:26	6	[ ]
LEAF_NODE	588:25	588:25	7	[
LEAF_NODE	588:26	588:26	7	]
NAME	588:19	588:19	5	module
LEAF_NODE	588:19	588:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	588:19	588:19	5	module = "LogLuvEncode32"
ASSIGN	588:19	588:30	6	module = "LogLuvEncode32"
LVAL	588:19	588:19	7	module
NAME	588:19	588:19	8	module
LEAF_NODE	588:19	588:19	9	module
ASSIGN_OP	588:28	588:28	7	=
LEAF_NODE	588:28	588:28	8	=
RVAL	588:30	588:30	7	"LogLuvEncode32"
FIELD	588:30	588:30	8	"LogLuvEncode32"
LEAF_NODE	588:30	588:30	9	"LogLuvEncode32"
LEAF_NODE	588:46	588:46	4	;
SIMPLE_DECL	589:1	589:36	3	LogLuvState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	589:1	589:14	4	LogLuvState * sp ; sp = EncoderState ( tif )
TYPE	589:1	589:12	5	LogLuvState *
TYPE_NAME	589:1	589:1	6	LogLuvState
LEAF_NODE	589:1	589:1	7	LogLuvState
POINTER	589:12	589:12	6	*
LEAF_NODE	589:12	589:12	7	*
NAME	589:14	589:14	5	sp
LEAF_NODE	589:14	589:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	589:14	589:14	5	sp = EncoderState ( tif )
ASSIGN	589:14	589:19	6	sp = EncoderState ( tif )
LVAL	589:14	589:14	7	sp
NAME	589:14	589:14	8	sp
LEAF_NODE	589:14	589:14	9	sp
ASSIGN_OP	589:17	589:17	7	=
LEAF_NODE	589:17	589:17	8	=
RVAL	589:19	589:19	7	EncoderState ( tif )
FUNCTION_CALL	589:19	589:35	8	EncoderState ( tif )
CALLEE	589:19	589:19	9	EncoderState
LEAF_NODE	589:19	589:19	10	EncoderState
LEAF_NODE	589:31	589:31	9	(
ARGUMENT	589:32	589:32	9	tif
FIELD	589:32	589:32	10	tif
LEAF_NODE	589:32	589:32	11	tif
LEAF_NODE	589:35	589:35	9	)
LEAF_NODE	589:36	589:36	4	;
SIMPLE_DECL	590:1	590:9	3	int shft ;
VAR_DECL	590:1	590:5	4	int shft
TYPE	590:1	590:1	5	int
TYPE_NAME	590:1	590:1	6	int
LEAF_NODE	590:1	590:1	7	int
NAME	590:5	590:5	5	shft
LEAF_NODE	590:5	590:5	6	shft
LEAF_NODE	590:9	590:9	4	;
SIMPLE_DECL	591:1	591:11	3	tmsize_t i ;
VAR_DECL	591:1	591:10	4	tmsize_t i
TYPE	591:1	591:1	5	tmsize_t
TYPE_NAME	591:1	591:1	6	tmsize_t
LEAF_NODE	591:1	591:1	7	tmsize_t
NAME	591:10	591:10	5	i
LEAF_NODE	591:10	591:10	6	i
LEAF_NODE	591:11	591:11	4	;
SIMPLE_DECL	592:1	592:11	3	tmsize_t j ;
VAR_DECL	592:1	592:10	4	tmsize_t j
TYPE	592:1	592:1	5	tmsize_t
TYPE_NAME	592:1	592:1	6	tmsize_t
LEAF_NODE	592:1	592:1	7	tmsize_t
NAME	592:10	592:10	5	j
LEAF_NODE	592:10	592:10	6	j
LEAF_NODE	592:11	592:11	4	;
SIMPLE_DECL	593:1	593:17	3	tmsize_t npixels ;
VAR_DECL	593:1	593:10	4	tmsize_t npixels
TYPE	593:1	593:1	5	tmsize_t
TYPE_NAME	593:1	593:1	6	tmsize_t
LEAF_NODE	593:1	593:1	7	tmsize_t
NAME	593:10	593:10	5	npixels
LEAF_NODE	593:10	593:10	6	npixels
LEAF_NODE	593:17	593:17	4	;
SIMPLE_DECL	594:1	594:10	3	uint8 * op ;
VAR_DECL	594:1	594:8	4	uint8 * op
TYPE	594:1	594:6	5	uint8 *
TYPE_NAME	594:1	594:1	6	uint8
LEAF_NODE	594:1	594:1	7	uint8
POINTER	594:6	594:6	6	*
LEAF_NODE	594:6	594:6	7	*
NAME	594:8	594:8	5	op
LEAF_NODE	594:8	594:8	6	op
LEAF_NODE	594:10	594:10	4	;
SIMPLE_DECL	595:1	595:11	3	uint32 * tp ;
VAR_DECL	595:1	595:9	4	uint32 * tp
TYPE	595:1	595:7	5	uint32 *
TYPE_NAME	595:1	595:1	6	uint32
LEAF_NODE	595:1	595:1	7	uint32
POINTER	595:7	595:7	6	*
LEAF_NODE	595:7	595:7	7	*
NAME	595:9	595:9	5	tp
LEAF_NODE	595:9	595:9	6	tp
LEAF_NODE	595:11	595:11	4	;
SIMPLE_DECL	596:1	596:9	3	uint32 b ;
VAR_DECL	596:1	596:8	4	uint32 b
TYPE	596:1	596:1	5	uint32
TYPE_NAME	596:1	596:1	6	uint32
LEAF_NODE	596:1	596:1	7	uint32
NAME	596:8	596:8	5	b
LEAF_NODE	596:8	596:8	6	b
LEAF_NODE	596:9	596:9	4	;
SIMPLE_DECL	597:1	597:13	3	tmsize_t occ ;
VAR_DECL	597:1	597:10	4	tmsize_t occ
TYPE	597:1	597:1	5	tmsize_t
TYPE_NAME	597:1	597:1	6	tmsize_t
LEAF_NODE	597:1	597:1	7	tmsize_t
NAME	597:10	597:10	5	occ
LEAF_NODE	597:10	597:10	6	occ
LEAF_NODE	597:13	597:13	4	;
SIMPLE_DECL	598:1	598:15	3	int rc ; rc = 0 , int mask ;
INIT_DECL_LIST	598:1	598:1	4	int rc ; rc = 0 , int mask
VAR_DECL	598:1	598:5	5	int rc ; rc = 0
TYPE	598:1	598:1	6	int
TYPE_NAME	598:1	598:1	7	int
LEAF_NODE	598:1	598:1	8	int
NAME	598:5	598:5	6	rc
LEAF_NODE	598:5	598:5	7	rc
LEAF_NODE	0:0	0:0	6	;
INIT	598:5	598:5	6	rc = 0
ASSIGN	598:5	598:8	7	rc = 0
LVAL	598:5	598:5	8	rc
NAME	598:5	598:5	9	rc
LEAF_NODE	598:5	598:5	10	rc
ASSIGN_OP	598:7	598:7	8	=
LEAF_NODE	598:7	598:7	9	=
RVAL	598:8	598:8	8	0
FIELD	598:8	598:8	9	0
LEAF_NODE	598:8	598:8	10	0
LEAF_NODE	598:9	598:9	5	,
VAR_DECL	598:1	598:11	5	int mask
TYPE	598:1	598:1	6	int
TYPE_NAME	598:1	598:1	7	int
LEAF_NODE	598:1	598:1	8	int
NAME	598:11	598:11	6	mask
LEAF_NODE	598:11	598:11	7	mask
LEAF_NODE	598:15	598:15	4	;
SIMPLE_DECL	599:1	599:13	3	tmsize_t beg ;
VAR_DECL	599:1	599:10	4	tmsize_t beg
TYPE	599:1	599:1	5	tmsize_t
TYPE_NAME	599:1	599:1	6	tmsize_t
LEAF_NODE	599:1	599:1	7	tmsize_t
NAME	599:10	599:10	5	beg
LEAF_NODE	599:10	599:10	6	beg
LEAF_NODE	599:13	599:13	4	;
EXPR_STATEMENT	601:1	601:15	3	assert ( s == 0 ) ;
EXPR	601:1	601:1	4	assert ( s == 0 )
FUNCTION_CALL	601:1	601:14	5	assert ( s == 0 )
CALLEE	601:1	601:1	6	assert
LEAF_NODE	601:1	601:1	7	assert
LEAF_NODE	601:7	601:7	6	(
ARGUMENT	601:8	601:13	6	s == 0
FIELD	601:8	601:8	7	s
LEAF_NODE	601:8	601:8	8	s
EQ_OPERATOR	601:10	601:10	7	==
LEAF_NODE	601:10	601:10	8	==
FIELD	601:13	601:13	7	0
LEAF_NODE	601:13	601:13	8	0
LEAF_NODE	601:14	601:14	6	)
LEAF_NODE	601:15	601:15	4	;
EXPR_STATEMENT	602:1	602:19	3	assert ( sp != NULL ) ;
EXPR	602:1	602:1	4	assert ( sp != NULL )
FUNCTION_CALL	602:1	602:18	5	assert ( sp != NULL )
CALLEE	602:1	602:1	6	assert
LEAF_NODE	602:1	602:1	7	assert
LEAF_NODE	602:7	602:7	6	(
ARGUMENT	602:8	602:14	6	sp != NULL
FIELD	602:8	602:8	7	sp
LEAF_NODE	602:8	602:8	8	sp
EQ_OPERATOR	602:11	602:11	7	!=
LEAF_NODE	602:11	602:11	8	!=
FIELD	602:14	602:14	7	NULL
LEAF_NODE	602:14	602:14	8	NULL
LEAF_NODE	602:18	602:18	6	)
LEAF_NODE	602:19	602:19	4	;
EXPR_STATEMENT	604:1	604:30	3	npixels = cc / sp -> pixel_size ;
EXPR	604:1	604:1	4	npixels = cc / sp -> pixel_size
ASSIGN	604:1	604:11	5	npixels = cc / sp -> pixel_size
LVAL	604:1	604:1	6	npixels
FIELD	604:1	604:1	7	npixels
LEAF_NODE	604:1	604:1	8	npixels
ASSIGN_OP	604:9	604:9	6	=
LEAF_NODE	604:9	604:9	7	=
RVAL	604:11	604:16	6	cc / sp -> pixel_size
FIELD	604:11	604:11	7	cc
LEAF_NODE	604:11	604:11	8	cc
LEAF_NODE	604:14	604:14	7	/
FIELD	604:16	604:20	7	sp -> pixel_size
LEAF_NODE	604:16	604:16	8	sp
LEAF_NODE	604:18	604:18	8	->
LEAF_NODE	604:20	604:20	8	pixel_size
LEAF_NODE	604:30	604:30	4	;
SELECTION	606:1	607:2	3	
KEYWORD	606:1	606:1	4	if
LEAF_NODE	606:1	606:1	5	if
LEAF_NODE	606:4	606:4	4	(
CONDITION	606:5	606:5	4	sp -> user_datafmt == SGILOGDATAFMT_RAW
EXPR	606:5	606:25	5	sp -> user_datafmt == SGILOGDATAFMT_RAW
FIELD	606:5	606:9	6	sp -> user_datafmt
LEAF_NODE	606:5	606:5	7	sp
LEAF_NODE	606:7	606:7	7	->
LEAF_NODE	606:9	606:9	7	user_datafmt
EQ_OPERATOR	606:22	606:22	6	==
LEAF_NODE	606:22	606:22	7	==
FIELD	606:25	606:25	6	SGILOGDATAFMT_RAW
LEAF_NODE	606:25	606:25	7	SGILOGDATAFMT_RAW
LEAF_NODE	606:42	606:42	4	)
STATEMENTS	607:2	607:2	4	
EXPR_STATEMENT	607:2	607:19	5	tp = ( uint32 * ) bp ;
EXPR	607:2	607:2	6	tp = ( uint32 * ) bp
ASSIGN	607:2	607:7	7	tp = ( uint32 * ) bp
LVAL	607:2	607:2	8	tp
FIELD	607:2	607:2	9	tp
LEAF_NODE	607:2	607:2	10	tp
ASSIGN_OP	607:5	607:5	8	=
LEAF_NODE	607:5	607:5	9	=
RVAL	607:7	607:17	8	( uint32 * ) bp
LEAF_NODE	607:7	607:7	9	(
TYPE_NAME	607:8	607:8	9	uint32
LEAF_NODE	607:8	607:8	10	uint32
LEAF_NODE	607:14	607:14	9	*
LEAF_NODE	607:15	607:15	9	)
FIELD	607:17	607:17	9	bp
LEAF_NODE	607:17	607:17	10	bp
LEAF_NODE	607:19	607:19	6	;
SELECTION	608:1	608:6	3	
KEYWORD	608:1	608:1	4	else
LEAF_NODE	608:1	608:1	5	else
STATEMENTS	608:6	616:1	4	
LEAF_NODE	608:6	608:6	5	{
STATEMENTS	609:2	615:2	5	
EXPR_STATEMENT	609:2	609:25	6	tp = ( uint32 * ) sp -> tbuf ;
EXPR	609:2	609:2	7	tp = ( uint32 * ) sp -> tbuf
ASSIGN	609:2	609:7	8	tp = ( uint32 * ) sp -> tbuf
LVAL	609:2	609:2	9	tp
FIELD	609:2	609:2	10	tp
LEAF_NODE	609:2	609:2	11	tp
ASSIGN_OP	609:5	609:5	9	=
LEAF_NODE	609:5	609:5	10	=
RVAL	609:7	609:17	9	( uint32 * ) sp -> tbuf
LEAF_NODE	609:7	609:7	10	(
TYPE_NAME	609:8	609:8	10	uint32
LEAF_NODE	609:8	609:8	11	uint32
LEAF_NODE	609:14	609:14	10	*
LEAF_NODE	609:15	609:15	10	)
FIELD	609:17	609:21	10	sp -> tbuf
LEAF_NODE	609:17	609:17	11	sp
LEAF_NODE	609:19	609:19	11	->
LEAF_NODE	609:21	609:21	11	tbuf
LEAF_NODE	609:25	609:25	7	;
SELECTION	610:2	610:28	6	
KEYWORD	610:2	610:2	7	if
LEAF_NODE	610:2	610:2	8	if
LEAF_NODE	610:4	610:4	7	(
CONDITION	610:5	610:5	7	sp -> tbuflen < npixels
EXPR	610:5	610:19	8	sp -> tbuflen < npixels
FIELD	610:5	610:9	9	sp -> tbuflen
LEAF_NODE	610:5	610:5	10	sp
LEAF_NODE	610:7	610:7	10	->
LEAF_NODE	610:9	610:9	10	tbuflen
REL_OPERATOR	610:17	610:17	9	<
LEAF_NODE	610:17	610:17	10	<
FIELD	610:19	610:19	9	npixels
LEAF_NODE	610:19	610:19	10	npixels
LEAF_NODE	610:26	610:26	7	)
STATEMENTS	610:28	614:2	7	
LEAF_NODE	610:28	610:28	8	{
STATEMENTS	611:3	613:3	8	
EXPR_STATEMENT	611:3	612:38	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" ) ;
EXPR	611:3	611:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
FUNCTION_CALL	611:3	612:37	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Translation buffer too short" )
CALLEE	611:3	611:3	12	TIFFErrorExt
LEAF_NODE	611:3	611:3	13	TIFFErrorExt
LEAF_NODE	611:15	611:15	12	(
ARGUMENT	611:16	611:16	12	tif -> tif_clientdata
FIELD	611:16	611:21	13	tif -> tif_clientdata
LEAF_NODE	611:16	611:16	14	tif
LEAF_NODE	611:19	611:19	14	->
LEAF_NODE	611:21	611:21	14	tif_clientdata
LEAF_NODE	611:35	611:35	12	,
ARGUMENT	611:37	611:37	12	module
FIELD	611:37	611:37	13	module
LEAF_NODE	611:37	611:37	14	module
LEAF_NODE	611:43	611:43	12	,
ARGUMENT	612:7	612:7	12	"Translation buffer too short"
FIELD	612:7	612:7	13	"Translation buffer too short"
LEAF_NODE	612:7	612:7	14	"Translation buffer too short"
LEAF_NODE	612:37	612:37	12	)
LEAF_NODE	612:38	612:38	10	;
JUMP_STATEMENT	613:3	613:13	9	return ( 0 ) ;
KEYWORD	613:3	613:3	10	return
LEAF_NODE	613:3	613:3	11	return
DESTINATION	613:10	613:10	10	( 0 )
EXPR	613:10	613:12	11	( 0 )
LEAF_NODE	613:10	613:10	12	(
FIELD	613:11	613:11	12	0
LEAF_NODE	613:11	613:11	13	0
LEAF_NODE	613:12	613:12	12	)
LEAF_NODE	613:13	613:13	10	;
LEAF_NODE	614:2	614:2	8	}
EXPR_STATEMENT	615:2	615:31	6	( * sp -> tfunc ) ( sp , bp , npixels ) ;
EXPR	615:2	615:2	7	( * sp -> tfunc ) ( sp , bp , npixels )
FUNCTION_CALL	615:2	615:30	8	( * sp -> tfunc ) ( sp , bp , npixels )
CALLEE	615:2	615:13	9	( * sp -> tfunc )
LEAF_NODE	615:2	615:2	10	(
UNARY_EXPR	615:3	615:4	10	* sp -> tfunc
UNARY_OPERATOR	615:3	615:3	11	*
LEAF_NODE	615:3	615:3	12	*
FIELD	615:4	615:8	11	sp -> tfunc
LEAF_NODE	615:4	615:4	12	sp
LEAF_NODE	615:6	615:6	12	->
LEAF_NODE	615:8	615:8	12	tfunc
LEAF_NODE	615:13	615:13	10	)
LEAF_NODE	615:14	615:14	9	(
ARGUMENT	615:15	615:15	9	sp
FIELD	615:15	615:15	10	sp
LEAF_NODE	615:15	615:15	11	sp
LEAF_NODE	615:17	615:17	9	,
ARGUMENT	615:19	615:19	9	bp
FIELD	615:19	615:19	10	bp
LEAF_NODE	615:19	615:19	11	bp
LEAF_NODE	615:21	615:21	9	,
ARGUMENT	615:23	615:23	9	npixels
FIELD	615:23	615:23	10	npixels
LEAF_NODE	615:23	615:23	11	npixels
LEAF_NODE	615:30	615:30	9	)
LEAF_NODE	615:31	615:31	7	;
LEAF_NODE	616:1	616:1	5	}
EXPR_STATEMENT	618:1	618:20	3	op = tif -> tif_rawcp ;
EXPR	618:1	618:1	4	op = tif -> tif_rawcp
ASSIGN	618:1	618:6	5	op = tif -> tif_rawcp
LVAL	618:1	618:1	6	op
FIELD	618:1	618:1	7	op
LEAF_NODE	618:1	618:1	8	op
ASSIGN_OP	618:4	618:4	6	=
LEAF_NODE	618:4	618:4	7	=
RVAL	618:6	618:6	6	tif -> tif_rawcp
FIELD	618:6	618:11	7	tif -> tif_rawcp
LEAF_NODE	618:6	618:6	8	tif
LEAF_NODE	618:9	618:9	8	->
LEAF_NODE	618:11	618:11	8	tif_rawcp
LEAF_NODE	618:20	618:20	4	;
EXPR_STATEMENT	619:1	619:44	3	occ = tif -> tif_rawdatasize - tif -> tif_rawcc ;
EXPR	619:1	619:1	4	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
ASSIGN	619:1	619:7	5	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
LVAL	619:1	619:1	6	occ
FIELD	619:1	619:1	7	occ
LEAF_NODE	619:1	619:1	8	occ
ASSIGN_OP	619:5	619:5	6	=
LEAF_NODE	619:5	619:5	7	=
RVAL	619:7	619:30	6	tif -> tif_rawdatasize - tif -> tif_rawcc
FIELD	619:7	619:12	7	tif -> tif_rawdatasize
LEAF_NODE	619:7	619:7	8	tif
LEAF_NODE	619:10	619:10	8	->
LEAF_NODE	619:12	619:12	8	tif_rawdatasize
LEAF_NODE	619:28	619:28	7	-
FIELD	619:30	619:35	7	tif -> tif_rawcc
LEAF_NODE	619:30	619:30	8	tif
LEAF_NODE	619:33	619:33	8	->
LEAF_NODE	619:35	619:35	8	tif_rawcc
LEAF_NODE	619:44	619:44	4	;
ITERATION	620:1	620:38	3	
KEYWORD	620:1	620:1	4	for
LEAF_NODE	620:1	620:1	5	for
LEAF_NODE	620:5	620:5	4	(
FOR_INIT	620:6	620:15	4	shft = 24 ;
EXPR	620:6	620:6	5	shft = 24
ASSIGN	620:6	620:13	6	shft = 24
LVAL	620:6	620:6	7	shft
FIELD	620:6	620:6	8	shft
LEAF_NODE	620:6	620:6	9	shft
ASSIGN_OP	620:11	620:11	7	=
LEAF_NODE	620:11	620:11	8	=
RVAL	620:13	620:13	7	24
FIELD	620:13	620:13	8	24
LEAF_NODE	620:13	620:13	9	24
LEAF_NODE	620:15	620:15	5	;
CONDITION	620:17	620:17	4	shft >= 0
EXPR	620:17	620:25	5	shft >= 0
FIELD	620:17	620:17	6	shft
LEAF_NODE	620:17	620:17	7	shft
REL_OPERATOR	620:22	620:22	6	>=
LEAF_NODE	620:22	620:22	7	>=
FIELD	620:25	620:25	6	0
LEAF_NODE	620:25	620:25	7	0
LEAF_NODE	620:26	620:26	4	;
FOR_EXPR	620:28	620:28	4	shft -= 8
EXPR	620:28	620:28	5	shft -= 8
ASSIGN	620:28	620:35	6	shft -= 8
LVAL	620:28	620:28	7	shft
FIELD	620:28	620:28	8	shft
LEAF_NODE	620:28	620:28	9	shft
ASSIGN_OP	620:33	620:33	7	-=
LEAF_NODE	620:33	620:33	8	-=
RVAL	620:35	620:35	7	8
FIELD	620:35	620:35	8	8
LEAF_NODE	620:35	620:35	9	8
LEAF_NODE	620:36	620:36	4	)
STATEMENTS	620:38	675:1	4	
LEAF_NODE	620:38	620:38	5	{
STATEMENTS	621:2	621:2	5	
ITERATION	621:2	621:36	6	
KEYWORD	621:2	621:2	7	for
LEAF_NODE	621:2	621:2	8	for
LEAF_NODE	621:6	621:6	7	(
FOR_INIT	621:7	621:12	7	i = 0 ;
EXPR	621:7	621:7	8	i = 0
ASSIGN	621:7	621:11	9	i = 0
LVAL	621:7	621:7	10	i
FIELD	621:7	621:7	11	i
LEAF_NODE	621:7	621:7	12	i
ASSIGN_OP	621:9	621:9	10	=
LEAF_NODE	621:9	621:9	11	=
RVAL	621:11	621:11	10	0
FIELD	621:11	621:11	11	0
LEAF_NODE	621:11	621:11	12	0
LEAF_NODE	621:12	621:12	8	;
CONDITION	621:14	621:14	7	i < npixels
EXPR	621:14	621:18	8	i < npixels
FIELD	621:14	621:14	9	i
LEAF_NODE	621:14	621:14	10	i
REL_OPERATOR	621:16	621:16	9	<
LEAF_NODE	621:16	621:16	10	<
FIELD	621:18	621:18	9	npixels
LEAF_NODE	621:18	621:18	10	npixels
LEAF_NODE	621:25	621:25	7	;
FOR_EXPR	621:27	621:27	7	i += rc
EXPR	621:27	621:27	8	i += rc
ASSIGN	621:27	621:32	9	i += rc
LVAL	621:27	621:27	10	i
FIELD	621:27	621:27	11	i
LEAF_NODE	621:27	621:27	12	i
ASSIGN_OP	621:29	621:29	10	+=
LEAF_NODE	621:29	621:29	11	+=
RVAL	621:32	621:32	10	rc
FIELD	621:32	621:32	11	rc
LEAF_NODE	621:32	621:32	12	rc
LEAF_NODE	621:34	621:34	7	)
STATEMENTS	621:36	674:2	7	
LEAF_NODE	621:36	621:36	8	{
STATEMENTS	622:3	672:5	8	
SELECTION	622:3	622:16	9	
KEYWORD	622:3	622:3	10	if
LEAF_NODE	622:3	622:3	11	if
LEAF_NODE	622:6	622:6	10	(
CONDITION	622:7	622:7	10	occ < 4
EXPR	622:7	622:13	11	occ < 4
FIELD	622:7	622:7	12	occ
LEAF_NODE	622:7	622:7	13	occ
REL_OPERATOR	622:11	622:11	12	<
LEAF_NODE	622:11	622:11	13	<
FIELD	622:13	622:13	12	4
LEAF_NODE	622:13	622:13	13	4
LEAF_NODE	622:14	622:14	10	)
STATEMENTS	622:16	629:3	10	
LEAF_NODE	622:16	622:16	11	{
STATEMENTS	623:4	628:4	11	
EXPR_STATEMENT	623:4	623:23	12	tif -> tif_rawcp = op ;
EXPR	623:4	623:4	13	tif -> tif_rawcp = op
ASSIGN	623:4	623:21	14	tif -> tif_rawcp = op
LVAL	623:4	623:4	15	tif -> tif_rawcp
FIELD	623:4	623:9	16	tif -> tif_rawcp
LEAF_NODE	623:4	623:4	17	tif
LEAF_NODE	623:7	623:7	17	->
LEAF_NODE	623:9	623:9	17	tif_rawcp
ASSIGN_OP	623:19	623:19	15	=
LEAF_NODE	623:19	623:19	16	=
RVAL	623:21	623:21	15	op
FIELD	623:21	623:21	16	op
LEAF_NODE	623:21	623:21	17	op
LEAF_NODE	623:23	623:23	13	;
EXPR_STATEMENT	624:4	624:47	12	tif -> tif_rawcc = tif -> tif_rawdatasize - occ ;
EXPR	624:4	624:4	13	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
ASSIGN	624:4	624:21	14	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
LVAL	624:4	624:4	15	tif -> tif_rawcc
FIELD	624:4	624:9	16	tif -> tif_rawcc
LEAF_NODE	624:4	624:4	17	tif
LEAF_NODE	624:7	624:7	17	->
LEAF_NODE	624:9	624:9	17	tif_rawcc
ASSIGN_OP	624:19	624:19	15	=
LEAF_NODE	624:19	624:19	16	=
RVAL	624:21	624:44	15	tif -> tif_rawdatasize - occ
FIELD	624:21	624:26	16	tif -> tif_rawdatasize
LEAF_NODE	624:21	624:21	17	tif
LEAF_NODE	624:24	624:24	17	->
LEAF_NODE	624:26	624:26	17	tif_rawdatasize
LEAF_NODE	624:42	624:42	16	-
FIELD	624:44	624:44	16	occ
LEAF_NODE	624:44	624:44	17	occ
LEAF_NODE	624:47	624:47	13	;
SELECTION	625:4	626:5	12	
KEYWORD	625:4	625:4	13	if
LEAF_NODE	625:4	625:4	14	if
LEAF_NODE	625:7	625:7	13	(
CONDITION	625:8	625:8	13	! TIFFFlushData1 ( tif )
EXPR	625:8	625:8	14	! TIFFFlushData1 ( tif )
UNARY_EXPR	625:8	625:9	15	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	625:8	625:8	16	!
LEAF_NODE	625:8	625:8	17	!
FUNCTION_CALL	625:9	625:27	16	TIFFFlushData1 ( tif )
CALLEE	625:9	625:9	17	TIFFFlushData1
LEAF_NODE	625:9	625:9	18	TIFFFlushData1
LEAF_NODE	625:23	625:23	17	(
ARGUMENT	625:24	625:24	17	tif
FIELD	625:24	625:24	18	tif
LEAF_NODE	625:24	625:24	19	tif
LEAF_NODE	625:27	625:27	17	)
LEAF_NODE	625:28	625:28	13	)
STATEMENTS	626:5	626:5	13	
JUMP_STATEMENT	626:5	626:15	14	return ( 0 ) ;
KEYWORD	626:5	626:5	15	return
LEAF_NODE	626:5	626:5	16	return
DESTINATION	626:12	626:12	15	( 0 )
EXPR	626:12	626:14	16	( 0 )
LEAF_NODE	626:12	626:12	17	(
FIELD	626:13	626:13	17	0
LEAF_NODE	626:13	626:13	18	0
LEAF_NODE	626:14	626:14	17	)
LEAF_NODE	626:15	626:15	15	;
EXPR_STATEMENT	627:4	627:23	12	op = tif -> tif_rawcp ;
EXPR	627:4	627:4	13	op = tif -> tif_rawcp
ASSIGN	627:4	627:9	14	op = tif -> tif_rawcp
LVAL	627:4	627:4	15	op
FIELD	627:4	627:4	16	op
LEAF_NODE	627:4	627:4	17	op
ASSIGN_OP	627:7	627:7	15	=
LEAF_NODE	627:7	627:7	16	=
RVAL	627:9	627:9	15	tif -> tif_rawcp
FIELD	627:9	627:14	16	tif -> tif_rawcp
LEAF_NODE	627:9	627:9	17	tif
LEAF_NODE	627:12	627:12	17	->
LEAF_NODE	627:14	627:14	17	tif_rawcp
LEAF_NODE	627:23	627:23	13	;
EXPR_STATEMENT	628:4	628:47	12	occ = tif -> tif_rawdatasize - tif -> tif_rawcc ;
EXPR	628:4	628:4	13	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
ASSIGN	628:4	628:10	14	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
LVAL	628:4	628:4	15	occ
FIELD	628:4	628:4	16	occ
LEAF_NODE	628:4	628:4	17	occ
ASSIGN_OP	628:8	628:8	15	=
LEAF_NODE	628:8	628:8	16	=
RVAL	628:10	628:33	15	tif -> tif_rawdatasize - tif -> tif_rawcc
FIELD	628:10	628:15	16	tif -> tif_rawdatasize
LEAF_NODE	628:10	628:10	17	tif
LEAF_NODE	628:13	628:13	17	->
LEAF_NODE	628:15	628:15	17	tif_rawdatasize
LEAF_NODE	628:31	628:31	16	-
FIELD	628:33	628:38	16	tif -> tif_rawcc
LEAF_NODE	628:33	628:33	17	tif
LEAF_NODE	628:36	628:36	17	->
LEAF_NODE	628:38	628:38	17	tif_rawcc
LEAF_NODE	628:47	628:47	13	;
LEAF_NODE	629:3	629:3	11	}
EXPR_STATEMENT	630:3	630:22	9	mask = 0xff << shft ;
EXPR	630:3	630:3	10	mask = 0xff << shft
ASSIGN	630:3	630:10	11	mask = 0xff << shft
LVAL	630:3	630:3	12	mask
FIELD	630:3	630:3	13	mask
LEAF_NODE	630:3	630:3	14	mask
ASSIGN_OP	630:8	630:8	12	=
LEAF_NODE	630:8	630:8	13	=
RVAL	630:10	630:18	12	0xff << shft
FIELD	630:10	630:10	13	0xff
LEAF_NODE	630:10	630:10	14	0xff
LEAF_NODE	630:15	630:15	13	<<
FIELD	630:18	630:18	13	shft
LEAF_NODE	630:18	630:18	14	shft
LEAF_NODE	630:22	630:22	10	;
ITERATION	631:3	631:43	9	
KEYWORD	631:3	631:3	10	for
LEAF_NODE	631:3	631:3	11	for
LEAF_NODE	631:7	631:7	10	(
FOR_INIT	631:8	631:15	10	beg = i ;
EXPR	631:8	631:8	11	beg = i
ASSIGN	631:8	631:14	12	beg = i
LVAL	631:8	631:8	13	beg
FIELD	631:8	631:8	14	beg
LEAF_NODE	631:8	631:8	15	beg
ASSIGN_OP	631:12	631:12	13	=
LEAF_NODE	631:12	631:12	14	=
RVAL	631:14	631:14	13	i
FIELD	631:14	631:14	14	i
LEAF_NODE	631:14	631:14	15	i
LEAF_NODE	631:15	631:15	11	;
CONDITION	631:17	631:17	10	beg < npixels
EXPR	631:17	631:23	11	beg < npixels
FIELD	631:17	631:17	12	beg
LEAF_NODE	631:17	631:17	13	beg
REL_OPERATOR	631:21	631:21	12	<
LEAF_NODE	631:21	631:21	13	<
FIELD	631:23	631:23	12	npixels
LEAF_NODE	631:23	631:23	13	npixels
LEAF_NODE	631:30	631:30	10	;
FOR_EXPR	631:32	631:32	10	beg += rc
EXPR	631:32	631:32	11	beg += rc
ASSIGN	631:32	631:39	12	beg += rc
LVAL	631:32	631:32	13	beg
FIELD	631:32	631:32	14	beg
LEAF_NODE	631:32	631:32	15	beg
ASSIGN_OP	631:36	631:36	13	+=
LEAF_NODE	631:36	631:36	14	+=
RVAL	631:39	631:39	13	rc
FIELD	631:39	631:39	14	rc
LEAF_NODE	631:39	631:39	15	rc
LEAF_NODE	631:41	631:41	10	)
STATEMENTS	631:43	639:3	10	
LEAF_NODE	631:43	631:43	11	{
STATEMENTS	632:4	637:4	11	
EXPR_STATEMENT	632:4	632:22	12	b = tp [ beg ] & mask ;
EXPR	632:4	632:4	13	b = tp [ beg ] & mask
ASSIGN	632:4	632:8	14	b = tp [ beg ] & mask
LVAL	632:4	632:4	15	b
FIELD	632:4	632:4	16	b
LEAF_NODE	632:4	632:4	17	b
ASSIGN_OP	632:6	632:6	15	=
LEAF_NODE	632:6	632:6	16	=
RVAL	632:8	632:18	15	tp [ beg ] & mask
FIELD	632:8	632:14	16	tp [ beg ]
LEAF_NODE	632:8	632:8	17	tp
LEAF_NODE	632:10	632:10	17	[
EXPR	632:11	632:11	17	beg
FIELD	632:11	632:11	18	beg
LEAF_NODE	632:11	632:11	19	beg
LEAF_NODE	632:14	632:14	17	]
LEAF_NODE	632:16	632:16	16	&
FIELD	632:18	632:18	16	mask
LEAF_NODE	632:18	632:18	17	mask
LEAF_NODE	632:22	632:22	13	;
EXPR_STATEMENT	633:4	633:10	12	rc = 1 ;
EXPR	633:4	633:4	13	rc = 1
ASSIGN	633:4	633:9	14	rc = 1
LVAL	633:4	633:4	15	rc
FIELD	633:4	633:4	16	rc
LEAF_NODE	633:4	633:4	17	rc
ASSIGN_OP	633:7	633:7	15	=
LEAF_NODE	633:7	633:7	16	=
RVAL	633:9	633:9	15	1
FIELD	633:9	633:9	16	1
LEAF_NODE	633:9	633:9	17	1
LEAF_NODE	633:10	633:10	13	;
ITERATION	634:4	636:5	12	
KEYWORD	634:4	634:4	13	while
LEAF_NODE	634:4	634:4	14	while
LEAF_NODE	634:10	634:10	13	(
CONDITION	634:11	634:11	13	rc < 127 + 2 && beg + rc < npixels && ( tp [ beg + rc ] & mask ) == b
EXPR	634:11	634:11	14	rc < 127 + 2 && beg + rc < npixels && ( tp [ beg + rc ] & mask ) == b
AND	634:11	634:25	15	rc < 127 + 2 && beg + rc < npixels && ( tp [ beg + rc ] & mask ) == b
EXPR	634:11	634:20	16	rc < 127 + 2
FIELD	634:11	634:11	17	rc
LEAF_NODE	634:11	634:11	18	rc
REL_OPERATOR	634:14	634:14	17	<
LEAF_NODE	634:14	634:14	18	<
FIELD	634:16	634:16	17	127
LEAF_NODE	634:16	634:16	18	127
LEAF_NODE	634:19	634:19	17	+
FIELD	634:20	634:20	17	2
LEAF_NODE	634:20	634:20	18	2
LEAF_NODE	634:22	634:22	16	&&
EXPR	634:25	634:25	16	beg + rc < npixels && ( tp [ beg + rc ] & mask ) == b
AND	634:25	635:6	17	beg + rc < npixels && ( tp [ beg + rc ] & mask ) == b
EXPR	634:25	634:34	18	beg + rc < npixels
FIELD	634:25	634:25	19	beg
LEAF_NODE	634:25	634:25	20	beg
LEAF_NODE	634:28	634:28	19	+
FIELD	634:29	634:29	19	rc
LEAF_NODE	634:29	634:29	20	rc
REL_OPERATOR	634:32	634:32	19	<
LEAF_NODE	634:32	634:32	20	<
FIELD	634:34	634:34	19	npixels
LEAF_NODE	634:34	634:34	20	npixels
LEAF_NODE	634:42	634:42	18	&&
EXPR	635:6	635:29	18	( tp [ beg + rc ] & mask ) == b
LEAF_NODE	635:6	635:6	19	(
FIELD	635:7	635:16	19	tp [ beg + rc ]
LEAF_NODE	635:7	635:7	20	tp
LEAF_NODE	635:9	635:9	20	[
EXPR	635:10	635:14	20	beg + rc
FIELD	635:10	635:10	21	beg
LEAF_NODE	635:10	635:10	22	beg
LEAF_NODE	635:13	635:13	21	+
FIELD	635:14	635:14	21	rc
LEAF_NODE	635:14	635:14	22	rc
LEAF_NODE	635:16	635:16	20	]
LEAF_NODE	635:18	635:18	19	&
FIELD	635:20	635:20	19	mask
LEAF_NODE	635:20	635:20	20	mask
LEAF_NODE	635:24	635:24	19	)
EQ_OPERATOR	635:26	635:26	19	==
LEAF_NODE	635:26	635:26	20	==
FIELD	635:29	635:29	19	b
LEAF_NODE	635:29	635:29	20	b
LEAF_NODE	635:30	635:30	13	)
STATEMENTS	636:5	636:5	13	
EXPR_STATEMENT	636:5	636:9	14	rc ++ ;
EXPR	636:5	636:5	15	rc ++
FIELD	636:5	636:7	16	rc ++
LEAF_NODE	636:5	636:5	17	rc
LEAF_NODE	636:7	636:7	17	++
LEAF_NODE	636:9	636:9	15	;
SELECTION	637:4	638:5	12	
KEYWORD	637:4	637:4	13	if
LEAF_NODE	637:4	637:4	14	if
LEAF_NODE	637:7	637:7	13	(
CONDITION	637:8	637:8	13	rc >= MINRUN
EXPR	637:8	637:14	14	rc >= MINRUN
FIELD	637:8	637:8	15	rc
LEAF_NODE	637:8	637:8	16	rc
REL_OPERATOR	637:11	637:11	15	>=
LEAF_NODE	637:11	637:11	16	>=
FIELD	637:14	637:14	15	MINRUN
LEAF_NODE	637:14	637:14	16	MINRUN
LEAF_NODE	637:20	637:20	13	)
STATEMENTS	638:5	638:5	13	
JUMP_STATEMENT	638:5	638:10	14	break DESTINATION ;
KEYWORD	638:5	638:5	15	break
LEAF_NODE	638:5	638:5	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	638:10	638:10	15	;
LEAF_NODE	639:3	639:3	11	}
SELECTION	640:3	640:36	9	
KEYWORD	640:3	640:3	10	if
LEAF_NODE	640:3	640:3	11	if
LEAF_NODE	640:6	640:6	10	(
CONDITION	640:7	640:7	10	beg - i > 1 && beg - i < MINRUN
EXPR	640:7	640:7	11	beg - i > 1 && beg - i < MINRUN
AND	640:7	640:20	12	beg - i > 1 && beg - i < MINRUN
EXPR	640:7	640:15	13	beg - i > 1
FIELD	640:7	640:7	14	beg
LEAF_NODE	640:7	640:7	15	beg
LEAF_NODE	640:10	640:10	14	-
FIELD	640:11	640:11	14	i
LEAF_NODE	640:11	640:11	15	i
REL_OPERATOR	640:13	640:13	14	>
LEAF_NODE	640:13	640:13	15	>
FIELD	640:15	640:15	14	1
LEAF_NODE	640:15	640:15	15	1
LEAF_NODE	640:17	640:17	13	&&
EXPR	640:20	640:28	13	beg - i < MINRUN
FIELD	640:20	640:20	14	beg
LEAF_NODE	640:20	640:20	15	beg
LEAF_NODE	640:23	640:23	14	-
FIELD	640:24	640:24	14	i
LEAF_NODE	640:24	640:24	15	i
REL_OPERATOR	640:26	640:26	14	<
LEAF_NODE	640:26	640:26	15	<
FIELD	640:28	640:28	14	MINRUN
LEAF_NODE	640:28	640:28	15	MINRUN
LEAF_NODE	640:34	640:34	10	)
STATEMENTS	640:36	651:3	10	
LEAF_NODE	640:36	640:36	11	{
STATEMENTS	641:4	643:4	11	
EXPR_STATEMENT	641:4	641:20	12	b = tp [ i ] & mask ;
EXPR	641:4	641:4	13	b = tp [ i ] & mask
ASSIGN	641:4	641:8	14	b = tp [ i ] & mask
LVAL	641:4	641:4	15	b
FIELD	641:4	641:4	16	b
LEAF_NODE	641:4	641:4	17	b
ASSIGN_OP	641:6	641:6	15	=
LEAF_NODE	641:6	641:6	16	=
RVAL	641:8	641:16	15	tp [ i ] & mask
FIELD	641:8	641:12	16	tp [ i ]
LEAF_NODE	641:8	641:8	17	tp
LEAF_NODE	641:10	641:10	17	[
EXPR	641:11	641:11	17	i
FIELD	641:11	641:11	18	i
LEAF_NODE	641:11	641:11	19	i
LEAF_NODE	641:12	641:12	17	]
LEAF_NODE	641:14	641:14	16	&
FIELD	641:16	641:16	16	mask
LEAF_NODE	641:16	641:16	17	mask
LEAF_NODE	641:20	641:20	13	;
EXPR_STATEMENT	642:4	642:11	12	j = i + 1 ;
EXPR	642:4	642:4	13	j = i + 1
ASSIGN	642:4	642:8	14	j = i + 1
LVAL	642:4	642:4	15	j
FIELD	642:4	642:4	16	j
LEAF_NODE	642:4	642:4	17	j
ASSIGN_OP	642:6	642:6	15	=
LEAF_NODE	642:6	642:6	16	=
RVAL	642:8	642:10	15	i + 1
FIELD	642:8	642:8	16	i
LEAF_NODE	642:8	642:8	17	i
LEAF_NODE	642:9	642:9	16	+
FIELD	642:10	642:10	16	1
LEAF_NODE	642:10	642:10	17	1
LEAF_NODE	642:11	642:11	13	;
ITERATION	643:4	644:5	12	
KEYWORD	643:4	643:4	13	while
LEAF_NODE	643:4	643:4	14	while
LEAF_NODE	643:10	643:10	13	(
CONDITION	643:11	643:11	13	( tp [ j ++ ] & mask ) == b
EXPR	643:11	643:31	14	( tp [ j ++ ] & mask ) == b
LEAF_NODE	643:11	643:11	15	(
FIELD	643:12	643:18	15	tp [ j ++ ]
LEAF_NODE	643:12	643:12	16	tp
LEAF_NODE	643:14	643:14	16	[
EXPR	643:15	643:15	16	j ++
FIELD	643:15	643:16	17	j ++
LEAF_NODE	643:15	643:15	18	j
LEAF_NODE	643:16	643:16	18	++
LEAF_NODE	643:18	643:18	16	]
LEAF_NODE	643:20	643:20	15	&
FIELD	643:22	643:22	15	mask
LEAF_NODE	643:22	643:22	16	mask
LEAF_NODE	643:26	643:26	15	)
EQ_OPERATOR	643:28	643:28	15	==
LEAF_NODE	643:28	643:28	16	==
FIELD	643:31	643:31	15	b
LEAF_NODE	643:31	643:31	16	b
LEAF_NODE	643:32	643:32	13	)
STATEMENTS	644:5	644:5	13	
SELECTION	644:5	644:19	14	
KEYWORD	644:5	644:5	15	if
LEAF_NODE	644:5	644:5	16	if
LEAF_NODE	644:8	644:8	15	(
CONDITION	644:9	644:9	15	j == beg
EXPR	644:9	644:14	16	j == beg
FIELD	644:9	644:9	17	j
LEAF_NODE	644:9	644:9	18	j
EQ_OPERATOR	644:11	644:11	17	==
LEAF_NODE	644:11	644:11	18	==
FIELD	644:14	644:14	17	beg
LEAF_NODE	644:14	644:14	18	beg
LEAF_NODE	644:17	644:17	15	)
STATEMENTS	644:19	650:5	15	
LEAF_NODE	644:19	644:19	16	{
STATEMENTS	645:6	649:6	16	
EXPR_STATEMENT	645:6	645:32	17	* op ++ = ( uint8 ) ( 128 - 2 + j - i ) ;
EXPR	645:6	645:6	18	* op ++ = ( uint8 ) ( 128 - 2 + j - i )
ASSIGN	645:6	645:14	19	* op ++ = ( uint8 ) ( 128 - 2 + j - i )
LVAL	645:6	645:6	20	* op ++
UNARY_EXPR	645:6	645:7	21	* op ++
UNARY_OPERATOR	645:6	645:6	22	*
LEAF_NODE	645:6	645:6	23	*
FIELD	645:7	645:9	22	op ++
LEAF_NODE	645:7	645:7	23	op
LEAF_NODE	645:9	645:9	23	++
ASSIGN_OP	645:12	645:12	20	=
LEAF_NODE	645:12	645:12	21	=
RVAL	645:14	645:31	20	( uint8 ) ( 128 - 2 + j - i )
LEAF_NODE	645:14	645:14	21	(
TYPE_NAME	645:15	645:15	21	uint8
LEAF_NODE	645:15	645:15	22	uint8
LEAF_NODE	645:20	645:20	21	)
LEAF_NODE	645:21	645:21	21	(
FIELD	645:22	645:22	21	128
LEAF_NODE	645:22	645:22	22	128
LEAF_NODE	645:25	645:25	21	-
FIELD	645:26	645:26	21	2
LEAF_NODE	645:26	645:26	22	2
LEAF_NODE	645:27	645:27	21	+
FIELD	645:28	645:28	21	j
LEAF_NODE	645:28	645:28	22	j
LEAF_NODE	645:29	645:29	21	-
FIELD	645:30	645:30	21	i
LEAF_NODE	645:30	645:30	22	i
LEAF_NODE	645:31	645:31	21	)
LEAF_NODE	645:32	645:32	18	;
EXPR_STATEMENT	646:6	646:32	17	* op ++ = ( uint8 ) ( b >> shft ) ;
EXPR	646:6	646:6	18	* op ++ = ( uint8 ) ( b >> shft )
ASSIGN	646:6	646:14	19	* op ++ = ( uint8 ) ( b >> shft )
LVAL	646:6	646:6	20	* op ++
UNARY_EXPR	646:6	646:7	21	* op ++
UNARY_OPERATOR	646:6	646:6	22	*
LEAF_NODE	646:6	646:6	23	*
FIELD	646:7	646:9	22	op ++
LEAF_NODE	646:7	646:7	23	op
LEAF_NODE	646:9	646:9	23	++
ASSIGN_OP	646:12	646:12	20	=
LEAF_NODE	646:12	646:12	21	=
RVAL	646:14	646:31	20	( uint8 ) ( b >> shft )
LEAF_NODE	646:14	646:14	21	(
TYPE_NAME	646:15	646:15	21	uint8
LEAF_NODE	646:15	646:15	22	uint8
LEAF_NODE	646:20	646:20	21	)
LEAF_NODE	646:21	646:21	21	(
FIELD	646:22	646:22	21	b
LEAF_NODE	646:22	646:22	22	b
LEAF_NODE	646:24	646:24	21	>>
FIELD	646:27	646:27	21	shft
LEAF_NODE	646:27	646:27	22	shft
LEAF_NODE	646:31	646:31	21	)
LEAF_NODE	646:32	646:32	18	;
EXPR_STATEMENT	647:6	647:14	17	occ -= 2 ;
EXPR	647:6	647:6	18	occ -= 2
ASSIGN	647:6	647:13	19	occ -= 2
LVAL	647:6	647:6	20	occ
FIELD	647:6	647:6	21	occ
LEAF_NODE	647:6	647:6	22	occ
ASSIGN_OP	647:10	647:10	20	-=
LEAF_NODE	647:10	647:10	21	-=
RVAL	647:13	647:13	20	2
FIELD	647:13	647:13	21	2
LEAF_NODE	647:13	647:13	22	2
LEAF_NODE	647:14	647:14	18	;
EXPR_STATEMENT	648:6	648:13	17	i = beg ;
EXPR	648:6	648:6	18	i = beg
ASSIGN	648:6	648:10	19	i = beg
LVAL	648:6	648:6	20	i
FIELD	648:6	648:6	21	i
LEAF_NODE	648:6	648:6	22	i
ASSIGN_OP	648:8	648:8	20	=
LEAF_NODE	648:8	648:8	21	=
RVAL	648:10	648:10	20	beg
FIELD	648:10	648:10	21	beg
LEAF_NODE	648:10	648:10	22	beg
LEAF_NODE	648:13	648:13	18	;
JUMP_STATEMENT	649:6	649:11	17	break DESTINATION ;
KEYWORD	649:6	649:6	18	break
LEAF_NODE	649:6	649:6	19	break
LEAF_NODE	0:0	0:0	18	DESTINATION
LEAF_NODE	649:11	649:11	18	;
LEAF_NODE	650:5	650:5	16	}
LEAF_NODE	651:3	651:3	11	}
ITERATION	652:3	652:19	9	
KEYWORD	652:3	652:3	10	while
LEAF_NODE	652:3	652:3	11	while
LEAF_NODE	652:9	652:9	10	(
CONDITION	652:10	652:10	10	i < beg
EXPR	652:10	652:14	11	i < beg
FIELD	652:10	652:10	12	i
LEAF_NODE	652:10	652:10	13	i
REL_OPERATOR	652:12	652:12	12	<
LEAF_NODE	652:12	652:12	13	<
FIELD	652:14	652:14	12	beg
LEAF_NODE	652:14	652:14	13	beg
LEAF_NODE	652:17	652:17	10	)
STATEMENTS	652:19	667:3	10	
LEAF_NODE	652:19	652:19	11	{
STATEMENTS	653:4	663:4	11	
SELECTION	653:4	653:27	12	
KEYWORD	653:4	653:4	13	if
LEAF_NODE	653:4	653:4	14	if
LEAF_NODE	653:7	653:7	13	(
CONDITION	653:8	653:8	13	( j = beg - i ) > 127
EXPR	653:8	653:22	14	( j = beg - i ) > 127
LEAF_NODE	653:8	653:8	15	(
ASSIGN	653:9	653:13	15	j = beg - i
LVAL	653:9	653:9	16	j
FIELD	653:9	653:9	17	j
LEAF_NODE	653:9	653:9	18	j
ASSIGN_OP	653:11	653:11	16	=
LEAF_NODE	653:11	653:11	17	=
RVAL	653:13	653:17	16	beg - i
FIELD	653:13	653:13	17	beg
LEAF_NODE	653:13	653:13	18	beg
LEAF_NODE	653:16	653:16	17	-
FIELD	653:17	653:17	17	i
LEAF_NODE	653:17	653:17	18	i
LEAF_NODE	653:18	653:18	15	)
REL_OPERATOR	653:20	653:20	15	>
LEAF_NODE	653:20	653:20	16	>
FIELD	653:22	653:22	15	127
LEAF_NODE	653:22	653:22	16	127
LEAF_NODE	653:25	653:25	13	)
STATEMENTS	653:27	653:27	13	
EXPR_STATEMENT	653:27	653:34	14	j = 127 ;
EXPR	653:27	653:27	15	j = 127
ASSIGN	653:27	653:31	16	j = 127
LVAL	653:27	653:27	17	j
FIELD	653:27	653:27	18	j
LEAF_NODE	653:27	653:27	19	j
ASSIGN_OP	653:29	653:29	17	=
LEAF_NODE	653:29	653:29	18	=
RVAL	653:31	653:31	17	127
FIELD	653:31	653:31	18	127
LEAF_NODE	653:31	653:31	19	127
LEAF_NODE	653:34	653:34	15	;
SELECTION	654:4	654:19	12	
KEYWORD	654:4	654:4	13	if
LEAF_NODE	654:4	654:4	14	if
LEAF_NODE	654:7	654:7	13	(
CONDITION	654:8	654:8	13	occ < j + 3
EXPR	654:8	654:16	14	occ < j + 3
FIELD	654:8	654:8	15	occ
LEAF_NODE	654:8	654:8	16	occ
REL_OPERATOR	654:12	654:12	15	<
LEAF_NODE	654:12	654:12	16	<
FIELD	654:14	654:14	15	j
LEAF_NODE	654:14	654:14	16	j
LEAF_NODE	654:15	654:15	15	+
FIELD	654:16	654:16	15	3
LEAF_NODE	654:16	654:16	16	3
LEAF_NODE	654:17	654:17	13	)
STATEMENTS	654:19	661:4	13	
LEAF_NODE	654:19	654:19	14	{
STATEMENTS	655:5	660:5	14	
EXPR_STATEMENT	655:5	655:24	15	tif -> tif_rawcp = op ;
EXPR	655:5	655:5	16	tif -> tif_rawcp = op
ASSIGN	655:5	655:22	17	tif -> tif_rawcp = op
LVAL	655:5	655:5	18	tif -> tif_rawcp
FIELD	655:5	655:10	19	tif -> tif_rawcp
LEAF_NODE	655:5	655:5	20	tif
LEAF_NODE	655:8	655:8	20	->
LEAF_NODE	655:10	655:10	20	tif_rawcp
ASSIGN_OP	655:20	655:20	18	=
LEAF_NODE	655:20	655:20	19	=
RVAL	655:22	655:22	18	op
FIELD	655:22	655:22	19	op
LEAF_NODE	655:22	655:22	20	op
LEAF_NODE	655:24	655:24	16	;
EXPR_STATEMENT	656:5	656:48	15	tif -> tif_rawcc = tif -> tif_rawdatasize - occ ;
EXPR	656:5	656:5	16	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
ASSIGN	656:5	656:22	17	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
LVAL	656:5	656:5	18	tif -> tif_rawcc
FIELD	656:5	656:10	19	tif -> tif_rawcc
LEAF_NODE	656:5	656:5	20	tif
LEAF_NODE	656:8	656:8	20	->
LEAF_NODE	656:10	656:10	20	tif_rawcc
ASSIGN_OP	656:20	656:20	18	=
LEAF_NODE	656:20	656:20	19	=
RVAL	656:22	656:45	18	tif -> tif_rawdatasize - occ
FIELD	656:22	656:27	19	tif -> tif_rawdatasize
LEAF_NODE	656:22	656:22	20	tif
LEAF_NODE	656:25	656:25	20	->
LEAF_NODE	656:27	656:27	20	tif_rawdatasize
LEAF_NODE	656:43	656:43	19	-
FIELD	656:45	656:45	19	occ
LEAF_NODE	656:45	656:45	20	occ
LEAF_NODE	656:48	656:48	16	;
SELECTION	657:5	658:6	15	
KEYWORD	657:5	657:5	16	if
LEAF_NODE	657:5	657:5	17	if
LEAF_NODE	657:8	657:8	16	(
CONDITION	657:9	657:9	16	! TIFFFlushData1 ( tif )
EXPR	657:9	657:9	17	! TIFFFlushData1 ( tif )
UNARY_EXPR	657:9	657:10	18	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	657:9	657:9	19	!
LEAF_NODE	657:9	657:9	20	!
FUNCTION_CALL	657:10	657:28	19	TIFFFlushData1 ( tif )
CALLEE	657:10	657:10	20	TIFFFlushData1
LEAF_NODE	657:10	657:10	21	TIFFFlushData1
LEAF_NODE	657:24	657:24	20	(
ARGUMENT	657:25	657:25	20	tif
FIELD	657:25	657:25	21	tif
LEAF_NODE	657:25	657:25	22	tif
LEAF_NODE	657:28	657:28	20	)
LEAF_NODE	657:29	657:29	16	)
STATEMENTS	658:6	658:6	16	
JUMP_STATEMENT	658:6	658:16	17	return ( 0 ) ;
KEYWORD	658:6	658:6	18	return
LEAF_NODE	658:6	658:6	19	return
DESTINATION	658:13	658:13	18	( 0 )
EXPR	658:13	658:15	19	( 0 )
LEAF_NODE	658:13	658:13	20	(
FIELD	658:14	658:14	20	0
LEAF_NODE	658:14	658:14	21	0
LEAF_NODE	658:15	658:15	20	)
LEAF_NODE	658:16	658:16	18	;
EXPR_STATEMENT	659:5	659:24	15	op = tif -> tif_rawcp ;
EXPR	659:5	659:5	16	op = tif -> tif_rawcp
ASSIGN	659:5	659:10	17	op = tif -> tif_rawcp
LVAL	659:5	659:5	18	op
FIELD	659:5	659:5	19	op
LEAF_NODE	659:5	659:5	20	op
ASSIGN_OP	659:8	659:8	18	=
LEAF_NODE	659:8	659:8	19	=
RVAL	659:10	659:10	18	tif -> tif_rawcp
FIELD	659:10	659:15	19	tif -> tif_rawcp
LEAF_NODE	659:10	659:10	20	tif
LEAF_NODE	659:13	659:13	20	->
LEAF_NODE	659:15	659:15	20	tif_rawcp
LEAF_NODE	659:24	659:24	16	;
EXPR_STATEMENT	660:5	660:48	15	occ = tif -> tif_rawdatasize - tif -> tif_rawcc ;
EXPR	660:5	660:5	16	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
ASSIGN	660:5	660:11	17	occ = tif -> tif_rawdatasize - tif -> tif_rawcc
LVAL	660:5	660:5	18	occ
FIELD	660:5	660:5	19	occ
LEAF_NODE	660:5	660:5	20	occ
ASSIGN_OP	660:9	660:9	18	=
LEAF_NODE	660:9	660:9	19	=
RVAL	660:11	660:34	18	tif -> tif_rawdatasize - tif -> tif_rawcc
FIELD	660:11	660:16	19	tif -> tif_rawdatasize
LEAF_NODE	660:11	660:11	20	tif
LEAF_NODE	660:14	660:14	20	->
LEAF_NODE	660:16	660:16	20	tif_rawdatasize
LEAF_NODE	660:32	660:32	19	-
FIELD	660:34	660:39	19	tif -> tif_rawcc
LEAF_NODE	660:34	660:34	20	tif
LEAF_NODE	660:37	660:37	20	->
LEAF_NODE	660:39	660:39	20	tif_rawcc
LEAF_NODE	660:48	660:48	16	;
LEAF_NODE	661:4	661:4	14	}
EXPR_STATEMENT	662:4	662:21	12	* op ++ = ( uint8 ) j ;
EXPR	662:4	662:4	13	* op ++ = ( uint8 ) j
ASSIGN	662:4	662:12	14	* op ++ = ( uint8 ) j
LVAL	662:4	662:4	15	* op ++
UNARY_EXPR	662:4	662:5	16	* op ++
UNARY_OPERATOR	662:4	662:4	17	*
LEAF_NODE	662:4	662:4	18	*
FIELD	662:5	662:7	17	op ++
LEAF_NODE	662:5	662:5	18	op
LEAF_NODE	662:7	662:7	18	++
ASSIGN_OP	662:10	662:10	15	=
LEAF_NODE	662:10	662:10	16	=
RVAL	662:12	662:20	15	( uint8 ) j
LEAF_NODE	662:12	662:12	16	(
TYPE_NAME	662:13	662:13	16	uint8
LEAF_NODE	662:13	662:13	17	uint8
LEAF_NODE	662:18	662:18	16	)
FIELD	662:20	662:20	16	j
LEAF_NODE	662:20	662:20	17	j
LEAF_NODE	662:21	662:21	13	;
EXPR_STATEMENT	662:23	662:28	12	occ -- ;
EXPR	662:23	662:23	13	occ --
FIELD	662:23	662:26	14	occ --
LEAF_NODE	662:23	662:23	15	occ
LEAF_NODE	662:26	662:26	15	--
LEAF_NODE	662:28	662:28	13	;
ITERATION	663:4	663:16	12	
KEYWORD	663:4	663:4	13	while
LEAF_NODE	663:4	663:4	14	while
LEAF_NODE	663:10	663:10	13	(
CONDITION	663:11	663:11	13	j --
EXPR	663:11	663:11	14	j --
FIELD	663:11	663:12	15	j --
LEAF_NODE	663:11	663:11	16	j
LEAF_NODE	663:12	663:12	16	--
LEAF_NODE	663:14	663:14	13	)
STATEMENTS	663:16	666:4	13	
LEAF_NODE	663:16	663:16	14	{
STATEMENTS	664:5	665:5	14	
EXPR_STATEMENT	664:5	664:44	15	* op ++ = ( uint8 ) ( tp [ i ++ ] >> shft & 0xff ) ;
EXPR	664:5	664:5	16	* op ++ = ( uint8 ) ( tp [ i ++ ] >> shft & 0xff )
ASSIGN	664:5	664:13	17	* op ++ = ( uint8 ) ( tp [ i ++ ] >> shft & 0xff )
LVAL	664:5	664:5	18	* op ++
UNARY_EXPR	664:5	664:6	19	* op ++
UNARY_OPERATOR	664:5	664:5	20	*
LEAF_NODE	664:5	664:5	21	*
FIELD	664:6	664:8	20	op ++
LEAF_NODE	664:6	664:6	21	op
LEAF_NODE	664:8	664:8	21	++
ASSIGN_OP	664:11	664:11	18	=
LEAF_NODE	664:11	664:11	19	=
RVAL	664:13	664:43	18	( uint8 ) ( tp [ i ++ ] >> shft & 0xff )
LEAF_NODE	664:13	664:13	19	(
TYPE_NAME	664:14	664:14	19	uint8
LEAF_NODE	664:14	664:14	20	uint8
LEAF_NODE	664:19	664:19	19	)
LEAF_NODE	664:20	664:20	19	(
FIELD	664:21	664:27	19	tp [ i ++ ]
LEAF_NODE	664:21	664:21	20	tp
LEAF_NODE	664:23	664:23	20	[
EXPR	664:24	664:24	20	i ++
FIELD	664:24	664:25	21	i ++
LEAF_NODE	664:24	664:24	22	i
LEAF_NODE	664:25	664:25	22	++
LEAF_NODE	664:27	664:27	20	]
LEAF_NODE	664:29	664:29	19	>>
FIELD	664:32	664:32	19	shft
LEAF_NODE	664:32	664:32	20	shft
LEAF_NODE	664:37	664:37	19	&
FIELD	664:39	664:39	19	0xff
LEAF_NODE	664:39	664:39	20	0xff
LEAF_NODE	664:43	664:43	19	)
LEAF_NODE	664:44	664:44	16	;
EXPR_STATEMENT	665:5	665:10	15	occ -- ;
EXPR	665:5	665:5	16	occ --
FIELD	665:5	665:8	17	occ --
LEAF_NODE	665:5	665:5	18	occ
LEAF_NODE	665:8	665:8	18	--
LEAF_NODE	665:10	665:10	16	;
LEAF_NODE	666:4	666:4	14	}
LEAF_NODE	667:3	667:3	11	}
SELECTION	668:3	668:21	9	
KEYWORD	668:3	668:3	10	if
LEAF_NODE	668:3	668:3	11	if
LEAF_NODE	668:6	668:6	10	(
CONDITION	668:7	668:7	10	rc >= MINRUN
EXPR	668:7	668:13	11	rc >= MINRUN
FIELD	668:7	668:7	12	rc
LEAF_NODE	668:7	668:7	13	rc
REL_OPERATOR	668:10	668:10	12	>=
LEAF_NODE	668:10	668:10	13	>=
FIELD	668:13	668:13	12	MINRUN
LEAF_NODE	668:13	668:13	13	MINRUN
LEAF_NODE	668:19	668:19	10	)
STATEMENTS	668:21	672:3	10	
LEAF_NODE	668:21	668:21	11	{
STATEMENTS	669:4	671:4	11	
EXPR_STATEMENT	669:4	669:30	12	* op ++ = ( uint8 ) ( 128 - 2 + rc ) ;
EXPR	669:4	669:4	13	* op ++ = ( uint8 ) ( 128 - 2 + rc )
ASSIGN	669:4	669:12	14	* op ++ = ( uint8 ) ( 128 - 2 + rc )
LVAL	669:4	669:4	15	* op ++
UNARY_EXPR	669:4	669:5	16	* op ++
UNARY_OPERATOR	669:4	669:4	17	*
LEAF_NODE	669:4	669:4	18	*
FIELD	669:5	669:7	17	op ++
LEAF_NODE	669:5	669:5	18	op
LEAF_NODE	669:7	669:7	18	++
ASSIGN_OP	669:10	669:10	15	=
LEAF_NODE	669:10	669:10	16	=
RVAL	669:12	669:29	15	( uint8 ) ( 128 - 2 + rc )
LEAF_NODE	669:12	669:12	16	(
TYPE_NAME	669:13	669:13	16	uint8
LEAF_NODE	669:13	669:13	17	uint8
LEAF_NODE	669:18	669:18	16	)
LEAF_NODE	669:20	669:20	16	(
FIELD	669:21	669:21	16	128
LEAF_NODE	669:21	669:21	17	128
LEAF_NODE	669:24	669:24	16	-
FIELD	669:25	669:25	16	2
LEAF_NODE	669:25	669:25	17	2
LEAF_NODE	669:26	669:26	16	+
FIELD	669:27	669:27	16	rc
LEAF_NODE	669:27	669:27	17	rc
LEAF_NODE	669:29	669:29	16	)
LEAF_NODE	669:30	669:30	13	;
EXPR_STATEMENT	670:4	670:43	12	* op ++ = ( uint8 ) ( tp [ beg ] >> shft & 0xff ) ;
EXPR	670:4	670:4	13	* op ++ = ( uint8 ) ( tp [ beg ] >> shft & 0xff )
ASSIGN	670:4	670:12	14	* op ++ = ( uint8 ) ( tp [ beg ] >> shft & 0xff )
LVAL	670:4	670:4	15	* op ++
UNARY_EXPR	670:4	670:5	16	* op ++
UNARY_OPERATOR	670:4	670:4	17	*
LEAF_NODE	670:4	670:4	18	*
FIELD	670:5	670:7	17	op ++
LEAF_NODE	670:5	670:5	18	op
LEAF_NODE	670:7	670:7	18	++
ASSIGN_OP	670:10	670:10	15	=
LEAF_NODE	670:10	670:10	16	=
RVAL	670:12	670:42	15	( uint8 ) ( tp [ beg ] >> shft & 0xff )
LEAF_NODE	670:12	670:12	16	(
TYPE_NAME	670:13	670:13	16	uint8
LEAF_NODE	670:13	670:13	17	uint8
LEAF_NODE	670:18	670:18	16	)
LEAF_NODE	670:19	670:19	16	(
FIELD	670:20	670:26	16	tp [ beg ]
LEAF_NODE	670:20	670:20	17	tp
LEAF_NODE	670:22	670:22	17	[
EXPR	670:23	670:23	17	beg
FIELD	670:23	670:23	18	beg
LEAF_NODE	670:23	670:23	19	beg
LEAF_NODE	670:26	670:26	17	]
LEAF_NODE	670:28	670:28	16	>>
FIELD	670:31	670:31	16	shft
LEAF_NODE	670:31	670:31	17	shft
LEAF_NODE	670:36	670:36	16	&
FIELD	670:38	670:38	16	0xff
LEAF_NODE	670:38	670:38	17	0xff
LEAF_NODE	670:42	670:42	16	)
LEAF_NODE	670:43	670:43	13	;
EXPR_STATEMENT	671:4	671:12	12	occ -= 2 ;
EXPR	671:4	671:4	13	occ -= 2
ASSIGN	671:4	671:11	14	occ -= 2
LVAL	671:4	671:4	15	occ
FIELD	671:4	671:4	16	occ
LEAF_NODE	671:4	671:4	17	occ
ASSIGN_OP	671:8	671:8	15	-=
LEAF_NODE	671:8	671:8	16	-=
RVAL	671:11	671:11	15	2
FIELD	671:11	671:11	16	2
LEAF_NODE	671:11	671:11	17	2
LEAF_NODE	671:12	671:12	13	;
LEAF_NODE	672:3	672:3	11	}
SELECTION	672:5	673:4	9	
KEYWORD	672:5	672:5	10	else
LEAF_NODE	672:5	672:5	11	else
STATEMENTS	673:4	673:4	10	
EXPR_STATEMENT	673:4	673:10	11	rc = 0 ;
EXPR	673:4	673:4	12	rc = 0
ASSIGN	673:4	673:9	13	rc = 0
LVAL	673:4	673:4	14	rc
FIELD	673:4	673:4	15	rc
LEAF_NODE	673:4	673:4	16	rc
ASSIGN_OP	673:7	673:7	14	=
LEAF_NODE	673:7	673:7	15	=
RVAL	673:9	673:9	14	0
FIELD	673:9	673:9	15	0
LEAF_NODE	673:9	673:9	16	0
LEAF_NODE	673:10	673:10	12	;
LEAF_NODE	674:2	674:2	8	}
LEAF_NODE	675:1	675:1	5	}
EXPR_STATEMENT	676:1	676:20	3	tif -> tif_rawcp = op ;
EXPR	676:1	676:1	4	tif -> tif_rawcp = op
ASSIGN	676:1	676:18	5	tif -> tif_rawcp = op
LVAL	676:1	676:1	6	tif -> tif_rawcp
FIELD	676:1	676:6	7	tif -> tif_rawcp
LEAF_NODE	676:1	676:1	8	tif
LEAF_NODE	676:4	676:4	8	->
LEAF_NODE	676:6	676:6	8	tif_rawcp
ASSIGN_OP	676:16	676:16	6	=
LEAF_NODE	676:16	676:16	7	=
RVAL	676:18	676:18	6	op
FIELD	676:18	676:18	7	op
LEAF_NODE	676:18	676:18	8	op
LEAF_NODE	676:20	676:20	4	;
EXPR_STATEMENT	677:1	677:44	3	tif -> tif_rawcc = tif -> tif_rawdatasize - occ ;
EXPR	677:1	677:1	4	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
ASSIGN	677:1	677:18	5	tif -> tif_rawcc = tif -> tif_rawdatasize - occ
LVAL	677:1	677:1	6	tif -> tif_rawcc
FIELD	677:1	677:6	7	tif -> tif_rawcc
LEAF_NODE	677:1	677:1	8	tif
LEAF_NODE	677:4	677:4	8	->
LEAF_NODE	677:6	677:6	8	tif_rawcc
ASSIGN_OP	677:16	677:16	6	=
LEAF_NODE	677:16	677:16	7	=
RVAL	677:18	677:41	6	tif -> tif_rawdatasize - occ
FIELD	677:18	677:23	7	tif -> tif_rawdatasize
LEAF_NODE	677:18	677:18	8	tif
LEAF_NODE	677:21	677:21	8	->
LEAF_NODE	677:23	677:23	8	tif_rawdatasize
LEAF_NODE	677:39	677:39	7	-
FIELD	677:41	677:41	7	occ
LEAF_NODE	677:41	677:41	8	occ
LEAF_NODE	677:44	677:44	4	;
JUMP_STATEMENT	679:1	679:11	3	return ( 1 ) ;
KEYWORD	679:1	679:1	4	return
LEAF_NODE	679:1	679:1	5	return
DESTINATION	679:8	679:8	4	( 1 )
EXPR	679:8	679:10	5	( 1 )
LEAF_NODE	679:8	679:8	6	(
FIELD	679:9	679:9	6	1
LEAF_NODE	679:9	679:9	7	1
LEAF_NODE	679:10	679:10	6	)
LEAF_NODE	679:11	679:11	4	;
LEAF_NODE	680:0	680:0	2	}
FUNCTION_DEF	686:0	700:0	1	
RETURN_TYPE	686:0	686:7	2	static int
LEAF_NODE	686:0	686:0	3	static
TYPE_NAME	686:7	686:7	3	int
LEAF_NODE	686:7	686:7	4	int
FUNCTION_NAME	687:0	687:0	2	LogLuvEncodeStrip
LEAF_NODE	687:0	687:0	3	LogLuvEncodeStrip
PARAMETER_LIST	687:17	687:61	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	687:17	687:17	3	(
PARAMETER_DECL	687:18	687:24	3	TIFF * tif
TYPE	687:18	687:22	4	TIFF *
TYPE_NAME	687:18	687:18	5	TIFF
LEAF_NODE	687:18	687:18	6	TIFF
POINTER	687:22	687:22	5	*
LEAF_NODE	687:22	687:22	6	*
NAME	687:24	687:24	4	tif
LEAF_NODE	687:24	687:24	5	tif
LEAF_NODE	687:27	687:27	3	,
PARAMETER_DECL	687:29	687:36	3	uint8 * bp
TYPE	687:29	687:34	4	uint8 *
TYPE_NAME	687:29	687:29	5	uint8
LEAF_NODE	687:29	687:29	6	uint8
POINTER	687:34	687:34	5	*
LEAF_NODE	687:34	687:34	6	*
NAME	687:36	687:36	4	bp
LEAF_NODE	687:36	687:36	5	bp
LEAF_NODE	687:38	687:38	3	,
PARAMETER_DECL	687:40	687:49	3	tmsize_t cc
TYPE	687:40	687:40	4	tmsize_t
TYPE_NAME	687:40	687:40	5	tmsize_t
LEAF_NODE	687:40	687:40	6	tmsize_t
NAME	687:49	687:49	4	cc
LEAF_NODE	687:49	687:49	5	cc
LEAF_NODE	687:51	687:51	3	,
PARAMETER_DECL	687:53	687:60	3	uint16 s
TYPE	687:53	687:53	4	uint16
TYPE_NAME	687:53	687:53	5	uint16
LEAF_NODE	687:53	687:53	6	uint16
NAME	687:60	687:60	4	s
LEAF_NODE	687:60	687:60	5	s
LEAF_NODE	687:61	687:61	3	)
LEAF_NODE	688:0	688:0	2	{
STATEMENTS	689:1	699:1	2	
SIMPLE_DECL	689:1	689:40	3	tmsize_t rowlen ; rowlen = TIFFScanlineSize ( tif ) ;
VAR_DECL	689:1	689:10	4	tmsize_t rowlen ; rowlen = TIFFScanlineSize ( tif )
TYPE	689:1	689:1	5	tmsize_t
TYPE_NAME	689:1	689:1	6	tmsize_t
LEAF_NODE	689:1	689:1	7	tmsize_t
NAME	689:10	689:10	5	rowlen
LEAF_NODE	689:10	689:10	6	rowlen
LEAF_NODE	0:0	0:0	5	;
INIT	689:10	689:10	5	rowlen = TIFFScanlineSize ( tif )
ASSIGN	689:10	689:19	6	rowlen = TIFFScanlineSize ( tif )
LVAL	689:10	689:10	7	rowlen
NAME	689:10	689:10	8	rowlen
LEAF_NODE	689:10	689:10	9	rowlen
ASSIGN_OP	689:17	689:17	7	=
LEAF_NODE	689:17	689:17	8	=
RVAL	689:19	689:19	7	TIFFScanlineSize ( tif )
FUNCTION_CALL	689:19	689:39	8	TIFFScanlineSize ( tif )
CALLEE	689:19	689:19	9	TIFFScanlineSize
LEAF_NODE	689:19	689:19	10	TIFFScanlineSize
LEAF_NODE	689:35	689:35	9	(
ARGUMENT	689:36	689:36	9	tif
FIELD	689:36	689:36	10	tif
LEAF_NODE	689:36	689:36	11	tif
LEAF_NODE	689:39	689:39	9	)
LEAF_NODE	689:40	689:40	4	;
SELECTION	691:8	692:16	3	
KEYWORD	691:8	691:8	4	if
LEAF_NODE	691:8	691:8	5	if
LEAF_NODE	691:11	691:11	4	(
CONDITION	691:12	691:12	4	rowlen == 0
EXPR	691:12	691:22	5	rowlen == 0
FIELD	691:12	691:12	6	rowlen
LEAF_NODE	691:12	691:12	7	rowlen
EQ_OPERATOR	691:19	691:19	6	==
LEAF_NODE	691:19	691:19	7	==
FIELD	691:22	691:22	6	0
LEAF_NODE	691:22	691:22	7	0
LEAF_NODE	691:23	691:23	4	)
STATEMENTS	692:16	692:16	4	
JUMP_STATEMENT	692:16	692:24	5	return 0 ;
KEYWORD	692:16	692:16	6	return
LEAF_NODE	692:16	692:16	7	return
DESTINATION	692:23	692:23	6	0
EXPR	692:23	692:23	7	0
FIELD	692:23	692:23	8	0
LEAF_NODE	692:23	692:23	9	0
LEAF_NODE	692:24	692:24	6	;
EXPR_STATEMENT	694:1	694:23	3	assert ( cc % rowlen == 0 ) ;
EXPR	694:1	694:1	4	assert ( cc % rowlen == 0 )
FUNCTION_CALL	694:1	694:22	5	assert ( cc % rowlen == 0 )
CALLEE	694:1	694:1	6	assert
LEAF_NODE	694:1	694:1	7	assert
LEAF_NODE	694:7	694:7	6	(
ARGUMENT	694:8	694:21	6	cc % rowlen == 0
FIELD	694:8	694:8	7	cc
LEAF_NODE	694:8	694:8	8	cc
LEAF_NODE	694:10	694:10	7	%
FIELD	694:11	694:11	7	rowlen
LEAF_NODE	694:11	694:11	8	rowlen
EQ_OPERATOR	694:18	694:18	7	==
LEAF_NODE	694:18	694:18	8	==
FIELD	694:21	694:21	7	0
LEAF_NODE	694:21	694:21	8	0
LEAF_NODE	694:22	694:22	6	)
LEAF_NODE	694:23	694:23	4	;
ITERATION	695:1	695:62	3	
KEYWORD	695:1	695:1	4	while
LEAF_NODE	695:1	695:1	5	while
LEAF_NODE	695:7	695:7	4	(
CONDITION	695:8	695:8	4	cc && ( * tif -> tif_encoderow ) ( tif , bp , rowlen , s ) == 1
EXPR	695:8	695:8	5	cc && ( * tif -> tif_encoderow ) ( tif , bp , rowlen , s ) == 1
AND	695:8	695:14	6	cc && ( * tif -> tif_encoderow ) ( tif , bp , rowlen , s ) == 1
EXPR	695:8	695:8	7	cc
FIELD	695:8	695:8	8	cc
LEAF_NODE	695:8	695:8	9	cc
LEAF_NODE	695:11	695:11	7	&&
EXPR	695:14	695:59	7	( * tif -> tif_encoderow ) ( tif , bp , rowlen , s ) == 1
FUNCTION_CALL	695:14	695:54	8	( * tif -> tif_encoderow ) ( tif , bp , rowlen , s )
CALLEE	695:14	695:34	9	( * tif -> tif_encoderow )
LEAF_NODE	695:14	695:14	10	(
UNARY_EXPR	695:15	695:16	10	* tif -> tif_encoderow
UNARY_OPERATOR	695:15	695:15	11	*
LEAF_NODE	695:15	695:15	12	*
FIELD	695:16	695:21	11	tif -> tif_encoderow
LEAF_NODE	695:16	695:16	12	tif
LEAF_NODE	695:19	695:19	12	->
LEAF_NODE	695:21	695:21	12	tif_encoderow
LEAF_NODE	695:34	695:34	10	)
LEAF_NODE	695:35	695:35	9	(
ARGUMENT	695:36	695:36	9	tif
FIELD	695:36	695:36	10	tif
LEAF_NODE	695:36	695:36	11	tif
LEAF_NODE	695:39	695:39	9	,
ARGUMENT	695:41	695:41	9	bp
FIELD	695:41	695:41	10	bp
LEAF_NODE	695:41	695:41	11	bp
LEAF_NODE	695:43	695:43	9	,
ARGUMENT	695:45	695:45	9	rowlen
FIELD	695:45	695:45	10	rowlen
LEAF_NODE	695:45	695:45	11	rowlen
LEAF_NODE	695:51	695:51	9	,
ARGUMENT	695:53	695:53	9	s
FIELD	695:53	695:53	10	s
LEAF_NODE	695:53	695:53	11	s
LEAF_NODE	695:54	695:54	9	)
EQ_OPERATOR	695:56	695:56	8	==
LEAF_NODE	695:56	695:56	9	==
FIELD	695:59	695:59	8	1
LEAF_NODE	695:59	695:59	9	1
LEAF_NODE	695:60	695:60	4	)
STATEMENTS	695:62	698:1	4	
LEAF_NODE	695:62	695:62	5	{
STATEMENTS	696:2	697:2	5	
EXPR_STATEMENT	696:2	696:14	6	bp += rowlen ;
EXPR	696:2	696:2	7	bp += rowlen
ASSIGN	696:2	696:8	8	bp += rowlen
LVAL	696:2	696:2	9	bp
FIELD	696:2	696:2	10	bp
LEAF_NODE	696:2	696:2	11	bp
ASSIGN_OP	696:5	696:5	9	+=
LEAF_NODE	696:5	696:5	10	+=
RVAL	696:8	696:8	9	rowlen
FIELD	696:8	696:8	10	rowlen
LEAF_NODE	696:8	696:8	11	rowlen
LEAF_NODE	696:14	696:14	7	;
EXPR_STATEMENT	697:2	697:14	6	cc -= rowlen ;
EXPR	697:2	697:2	7	cc -= rowlen
ASSIGN	697:2	697:8	8	cc -= rowlen
LVAL	697:2	697:2	9	cc
FIELD	697:2	697:2	10	cc
LEAF_NODE	697:2	697:2	11	cc
ASSIGN_OP	697:5	697:5	9	-=
LEAF_NODE	697:5	697:5	10	-=
RVAL	697:8	697:8	9	rowlen
FIELD	697:8	697:8	10	rowlen
LEAF_NODE	697:8	697:8	11	rowlen
LEAF_NODE	697:14	697:14	7	;
LEAF_NODE	698:1	698:1	5	}
JUMP_STATEMENT	699:1	699:17	3	return ( cc == 0 ) ;
KEYWORD	699:1	699:1	4	return
LEAF_NODE	699:1	699:1	5	return
DESTINATION	699:8	699:8	4	( cc == 0 )
EXPR	699:8	699:16	5	( cc == 0 )
LEAF_NODE	699:8	699:8	6	(
FIELD	699:9	699:9	6	cc
LEAF_NODE	699:9	699:9	7	cc
EQ_OPERATOR	699:12	699:12	6	==
LEAF_NODE	699:12	699:12	7	==
FIELD	699:15	699:15	6	0
LEAF_NODE	699:15	699:15	7	0
LEAF_NODE	699:16	699:16	6	)
LEAF_NODE	699:17	699:17	4	;
LEAF_NODE	700:0	700:0	2	}
FUNCTION_DEF	706:0	720:0	1	
RETURN_TYPE	706:0	706:7	2	static int
LEAF_NODE	706:0	706:0	3	static
TYPE_NAME	706:7	706:7	3	int
LEAF_NODE	706:7	706:7	4	int
FUNCTION_NAME	707:0	707:0	2	LogLuvEncodeTile
LEAF_NODE	707:0	707:0	3	LogLuvEncodeTile
PARAMETER_LIST	707:16	707:60	2	( TIFF * tif , uint8 * bp , tmsize_t cc , uint16 s )
LEAF_NODE	707:16	707:16	3	(
PARAMETER_DECL	707:17	707:23	3	TIFF * tif
TYPE	707:17	707:21	4	TIFF *
TYPE_NAME	707:17	707:17	5	TIFF
LEAF_NODE	707:17	707:17	6	TIFF
POINTER	707:21	707:21	5	*
LEAF_NODE	707:21	707:21	6	*
NAME	707:23	707:23	4	tif
LEAF_NODE	707:23	707:23	5	tif
LEAF_NODE	707:26	707:26	3	,
PARAMETER_DECL	707:28	707:35	3	uint8 * bp
TYPE	707:28	707:33	4	uint8 *
TYPE_NAME	707:28	707:28	5	uint8
LEAF_NODE	707:28	707:28	6	uint8
POINTER	707:33	707:33	5	*
LEAF_NODE	707:33	707:33	6	*
NAME	707:35	707:35	4	bp
LEAF_NODE	707:35	707:35	5	bp
LEAF_NODE	707:37	707:37	3	,
PARAMETER_DECL	707:39	707:48	3	tmsize_t cc
TYPE	707:39	707:39	4	tmsize_t
TYPE_NAME	707:39	707:39	5	tmsize_t
LEAF_NODE	707:39	707:39	6	tmsize_t
NAME	707:48	707:48	4	cc
LEAF_NODE	707:48	707:48	5	cc
LEAF_NODE	707:50	707:50	3	,
PARAMETER_DECL	707:52	707:59	3	uint16 s
TYPE	707:52	707:52	4	uint16
TYPE_NAME	707:52	707:52	5	uint16
LEAF_NODE	707:52	707:52	6	uint16
NAME	707:59	707:59	4	s
LEAF_NODE	707:59	707:59	5	s
LEAF_NODE	707:60	707:60	3	)
LEAF_NODE	708:0	708:0	2	{
STATEMENTS	709:1	719:1	2	
SIMPLE_DECL	709:1	709:39	3	tmsize_t rowlen ; rowlen = TIFFTileRowSize ( tif ) ;
VAR_DECL	709:1	709:10	4	tmsize_t rowlen ; rowlen = TIFFTileRowSize ( tif )
TYPE	709:1	709:1	5	tmsize_t
TYPE_NAME	709:1	709:1	6	tmsize_t
LEAF_NODE	709:1	709:1	7	tmsize_t
NAME	709:10	709:10	5	rowlen
LEAF_NODE	709:10	709:10	6	rowlen
LEAF_NODE	0:0	0:0	5	;
INIT	709:10	709:10	5	rowlen = TIFFTileRowSize ( tif )
ASSIGN	709:10	709:19	6	rowlen = TIFFTileRowSize ( tif )
LVAL	709:10	709:10	7	rowlen
NAME	709:10	709:10	8	rowlen
LEAF_NODE	709:10	709:10	9	rowlen
ASSIGN_OP	709:17	709:17	7	=
LEAF_NODE	709:17	709:17	8	=
RVAL	709:19	709:19	7	TIFFTileRowSize ( tif )
FUNCTION_CALL	709:19	709:38	8	TIFFTileRowSize ( tif )
CALLEE	709:19	709:19	9	TIFFTileRowSize
LEAF_NODE	709:19	709:19	10	TIFFTileRowSize
LEAF_NODE	709:34	709:34	9	(
ARGUMENT	709:35	709:35	9	tif
FIELD	709:35	709:35	10	tif
LEAF_NODE	709:35	709:35	11	tif
LEAF_NODE	709:38	709:38	9	)
LEAF_NODE	709:39	709:39	4	;
SELECTION	711:8	712:16	3	
KEYWORD	711:8	711:8	4	if
LEAF_NODE	711:8	711:8	5	if
LEAF_NODE	711:11	711:11	4	(
CONDITION	711:12	711:12	4	rowlen == 0
EXPR	711:12	711:22	5	rowlen == 0
FIELD	711:12	711:12	6	rowlen
LEAF_NODE	711:12	711:12	7	rowlen
EQ_OPERATOR	711:19	711:19	6	==
LEAF_NODE	711:19	711:19	7	==
FIELD	711:22	711:22	6	0
LEAF_NODE	711:22	711:22	7	0
LEAF_NODE	711:23	711:23	4	)
STATEMENTS	712:16	712:16	4	
JUMP_STATEMENT	712:16	712:24	5	return 0 ;
KEYWORD	712:16	712:16	6	return
LEAF_NODE	712:16	712:16	7	return
DESTINATION	712:23	712:23	6	0
EXPR	712:23	712:23	7	0
FIELD	712:23	712:23	8	0
LEAF_NODE	712:23	712:23	9	0
LEAF_NODE	712:24	712:24	6	;
EXPR_STATEMENT	714:1	714:23	3	assert ( cc % rowlen == 0 ) ;
EXPR	714:1	714:1	4	assert ( cc % rowlen == 0 )
FUNCTION_CALL	714:1	714:22	5	assert ( cc % rowlen == 0 )
CALLEE	714:1	714:1	6	assert
LEAF_NODE	714:1	714:1	7	assert
LEAF_NODE	714:7	714:7	6	(
ARGUMENT	714:8	714:21	6	cc % rowlen == 0
FIELD	714:8	714:8	7	cc
LEAF_NODE	714:8	714:8	8	cc
LEAF_NODE	714:10	714:10	7	%
FIELD	714:11	714:11	7	rowlen
LEAF_NODE	714:11	714:11	8	rowlen
EQ_OPERATOR	714:18	714:18	7	==
LEAF_NODE	714:18	714:18	8	==
FIELD	714:21	714:21	7	0
LEAF_NODE	714:21	714:21	8	0
LEAF_NODE	714:22	714:22	6	)
LEAF_NODE	714:23	714:23	4	;
ITERATION	715:1	715:62	3	
KEYWORD	715:1	715:1	4	while
LEAF_NODE	715:1	715:1	5	while
LEAF_NODE	715:7	715:7	4	(
CONDITION	715:8	715:8	4	cc && ( * tif -> tif_encoderow ) ( tif , bp , rowlen , s ) == 1
EXPR	715:8	715:8	5	cc && ( * tif -> tif_encoderow ) ( tif , bp , rowlen , s ) == 1
AND	715:8	715:14	6	cc && ( * tif -> tif_encoderow ) ( tif , bp , rowlen , s ) == 1
EXPR	715:8	715:8	7	cc
FIELD	715:8	715:8	8	cc
LEAF_NODE	715:8	715:8	9	cc
LEAF_NODE	715:11	715:11	7	&&
EXPR	715:14	715:59	7	( * tif -> tif_encoderow ) ( tif , bp , rowlen , s ) == 1
FUNCTION_CALL	715:14	715:54	8	( * tif -> tif_encoderow ) ( tif , bp , rowlen , s )
CALLEE	715:14	715:34	9	( * tif -> tif_encoderow )
LEAF_NODE	715:14	715:14	10	(
UNARY_EXPR	715:15	715:16	10	* tif -> tif_encoderow
UNARY_OPERATOR	715:15	715:15	11	*
LEAF_NODE	715:15	715:15	12	*
FIELD	715:16	715:21	11	tif -> tif_encoderow
LEAF_NODE	715:16	715:16	12	tif
LEAF_NODE	715:19	715:19	12	->
LEAF_NODE	715:21	715:21	12	tif_encoderow
LEAF_NODE	715:34	715:34	10	)
LEAF_NODE	715:35	715:35	9	(
ARGUMENT	715:36	715:36	9	tif
FIELD	715:36	715:36	10	tif
LEAF_NODE	715:36	715:36	11	tif
LEAF_NODE	715:39	715:39	9	,
ARGUMENT	715:41	715:41	9	bp
FIELD	715:41	715:41	10	bp
LEAF_NODE	715:41	715:41	11	bp
LEAF_NODE	715:43	715:43	9	,
ARGUMENT	715:45	715:45	9	rowlen
FIELD	715:45	715:45	10	rowlen
LEAF_NODE	715:45	715:45	11	rowlen
LEAF_NODE	715:51	715:51	9	,
ARGUMENT	715:53	715:53	9	s
FIELD	715:53	715:53	10	s
LEAF_NODE	715:53	715:53	11	s
LEAF_NODE	715:54	715:54	9	)
EQ_OPERATOR	715:56	715:56	8	==
LEAF_NODE	715:56	715:56	9	==
FIELD	715:59	715:59	8	1
LEAF_NODE	715:59	715:59	9	1
LEAF_NODE	715:60	715:60	4	)
STATEMENTS	715:62	718:1	4	
LEAF_NODE	715:62	715:62	5	{
STATEMENTS	716:2	717:2	5	
EXPR_STATEMENT	716:2	716:14	6	bp += rowlen ;
EXPR	716:2	716:2	7	bp += rowlen
ASSIGN	716:2	716:8	8	bp += rowlen
LVAL	716:2	716:2	9	bp
FIELD	716:2	716:2	10	bp
LEAF_NODE	716:2	716:2	11	bp
ASSIGN_OP	716:5	716:5	9	+=
LEAF_NODE	716:5	716:5	10	+=
RVAL	716:8	716:8	9	rowlen
FIELD	716:8	716:8	10	rowlen
LEAF_NODE	716:8	716:8	11	rowlen
LEAF_NODE	716:14	716:14	7	;
EXPR_STATEMENT	717:2	717:14	6	cc -= rowlen ;
EXPR	717:2	717:2	7	cc -= rowlen
ASSIGN	717:2	717:8	8	cc -= rowlen
LVAL	717:2	717:2	9	cc
FIELD	717:2	717:2	10	cc
LEAF_NODE	717:2	717:2	11	cc
ASSIGN_OP	717:5	717:5	9	-=
LEAF_NODE	717:5	717:5	10	-=
RVAL	717:8	717:8	9	rowlen
FIELD	717:8	717:8	10	rowlen
LEAF_NODE	717:8	717:8	11	rowlen
LEAF_NODE	717:14	717:14	7	;
LEAF_NODE	718:1	718:1	5	}
JUMP_STATEMENT	719:1	719:17	3	return ( cc == 0 ) ;
KEYWORD	719:1	719:1	4	return
LEAF_NODE	719:1	719:1	5	return
DESTINATION	719:8	719:8	4	( cc == 0 )
EXPR	719:8	719:16	5	( cc == 0 )
LEAF_NODE	719:8	719:8	6	(
FIELD	719:9	719:9	6	cc
LEAF_NODE	719:9	719:9	7	cc
EQ_OPERATOR	719:12	719:12	6	==
LEAF_NODE	719:12	719:12	7	==
FIELD	719:15	719:15	6	0
LEAF_NODE	719:15	719:15	7	0
LEAF_NODE	719:16	719:16	6	)
LEAF_NODE	719:17	719:17	4	;
LEAF_NODE	720:0	720:0	2	}
FUNCTION_DEF	745:0	752:0	1	
RETURN_TYPE	745:0	745:7	2	static int
LEAF_NODE	745:0	745:0	3	static
TYPE_NAME	745:7	745:7	3	int
LEAF_NODE	745:7	745:7	4	int
FUNCTION_NAME	745:11	745:11	2	itrunc
LEAF_NODE	745:11	745:11	3	itrunc
PARAMETER_LIST	745:17	745:33	2	( double x , int m )
LEAF_NODE	745:17	745:17	3	(
PARAMETER_DECL	745:18	745:25	3	double x
TYPE	745:18	745:18	4	double
TYPE_NAME	745:18	745:18	5	double
LEAF_NODE	745:18	745:18	6	double
NAME	745:25	745:25	4	x
LEAF_NODE	745:25	745:25	5	x
LEAF_NODE	745:26	745:26	3	,
PARAMETER_DECL	745:28	745:32	3	int m
TYPE	745:28	745:28	4	int
TYPE_NAME	745:28	745:28	5	int
LEAF_NODE	745:28	745:28	6	int
NAME	745:32	745:32	4	m
LEAF_NODE	745:32	745:32	5	m
LEAF_NODE	745:33	745:33	3	)
LEAF_NODE	746:0	746:0	2	{
STATEMENTS	747:4	751:4	2	
SELECTION	747:4	748:8	3	
KEYWORD	747:4	747:4	4	if
LEAF_NODE	747:4	747:4	5	if
LEAF_NODE	747:6	747:6	4	(
CONDITION	747:8	747:8	4	m == SGILOGENCODE_NODITHER
EXPR	747:8	747:13	5	m == SGILOGENCODE_NODITHER
FIELD	747:8	747:8	6	m
LEAF_NODE	747:8	747:8	7	m
EQ_OPERATOR	747:10	747:10	6	==
LEAF_NODE	747:10	747:10	7	==
FIELD	747:13	747:13	6	SGILOGENCODE_NODITHER
LEAF_NODE	747:13	747:13	7	SGILOGENCODE_NODITHER
LEAF_NODE	747:35	747:35	4	)
STATEMENTS	748:8	748:8	4	
JUMP_STATEMENT	748:8	748:21	5	return ( int ) x ;
KEYWORD	748:8	748:8	6	return
LEAF_NODE	748:8	748:8	7	return
DESTINATION	748:15	748:15	6	( int ) x
EXPR	748:15	748:20	7	( int ) x
LEAF_NODE	748:15	748:15	8	(
TYPE_NAME	748:16	748:16	8	int
LEAF_NODE	748:16	748:16	9	int
LEAF_NODE	748:19	748:19	8	)
FIELD	748:20	748:20	8	x
LEAF_NODE	748:20	748:20	9	x
LEAF_NODE	748:21	748:21	6	;
JUMP_STATEMENT	751:4	751:47	3	return ( int ) ( x + rand ( ) * ( 1. / RAND_MAX ) - .5 ) ;
KEYWORD	751:4	751:4	4	return
LEAF_NODE	751:4	751:4	5	return
DESTINATION	751:11	751:11	4	( int ) ( x + rand ( ) * ( 1. / RAND_MAX ) - .5 )
EXPR	751:11	751:46	5	( int ) ( x + rand ( ) * ( 1. / RAND_MAX ) - .5 )
LEAF_NODE	751:11	751:11	6	(
TYPE_NAME	751:12	751:12	6	int
LEAF_NODE	751:12	751:12	7	int
LEAF_NODE	751:15	751:15	6	)
LEAF_NODE	751:16	751:16	6	(
FIELD	751:17	751:17	6	x
LEAF_NODE	751:17	751:17	7	x
LEAF_NODE	751:19	751:19	6	+
FUNCTION_CALL	751:21	751:26	6	rand ( )
CALLEE	751:21	751:21	7	rand
LEAF_NODE	751:21	751:21	8	rand
LEAF_NODE	751:25	751:25	7	(
LEAF_NODE	751:26	751:26	7	)
LEAF_NODE	751:27	751:27	6	*
LEAF_NODE	751:28	751:28	6	(
FIELD	751:29	751:29	6	1.
LEAF_NODE	751:29	751:29	7	1.
LEAF_NODE	751:31	751:31	6	/
FIELD	751:32	751:32	6	RAND_MAX
LEAF_NODE	751:32	751:32	7	RAND_MAX
LEAF_NODE	751:40	751:40	6	)
LEAF_NODE	751:42	751:42	6	-
FIELD	751:44	751:44	6	.5
LEAF_NODE	751:44	751:44	7	.5
LEAF_NODE	751:46	751:46	6	)
LEAF_NODE	751:47	751:47	4	;
LEAF_NODE	752:0	752:0	2	}
FUNCTION_DEF	755:0	767:0	1	
RETURN_TYPE	755:0	757:0	2	static double
LEAF_NODE	755:0	755:0	3	static
TYPE_NAME	757:0	757:0	3	double
LEAF_NODE	757:0	757:0	4	double
FUNCTION_NAME	758:0	758:0	2	LogL16toY
LEAF_NODE	758:0	758:0	3	LogL16toY
PARAMETER_LIST	758:9	758:17	2	( int p16 )
LEAF_NODE	758:9	758:9	3	(
PARAMETER_DECL	758:10	758:14	3	int p16
TYPE	758:10	758:10	4	int
TYPE_NAME	758:10	758:10	5	int
LEAF_NODE	758:10	758:10	6	int
NAME	758:14	758:14	4	p16
LEAF_NODE	758:14	758:14	5	p16
LEAF_NODE	758:17	758:17	3	)
LEAF_NODE	759:0	759:0	2	{
STATEMENTS	760:1	766:1	2	
SIMPLE_DECL	760:1	760:22	3	int Le ; Le = p16 & 0x7fff ;
VAR_DECL	760:1	760:5	4	int Le ; Le = p16 & 0x7fff
TYPE	760:1	760:1	5	int
TYPE_NAME	760:1	760:1	6	int
LEAF_NODE	760:1	760:1	7	int
NAME	760:5	760:5	5	Le
LEAF_NODE	760:5	760:5	6	Le
LEAF_NODE	0:0	0:0	5	;
INIT	760:5	760:5	5	Le = p16 & 0x7fff
ASSIGN	760:5	760:10	6	Le = p16 & 0x7fff
LVAL	760:5	760:5	7	Le
NAME	760:5	760:5	8	Le
LEAF_NODE	760:5	760:5	9	Le
ASSIGN_OP	760:8	760:8	7	=
LEAF_NODE	760:8	760:8	8	=
RVAL	760:10	760:16	7	p16 & 0x7fff
FIELD	760:10	760:10	8	p16
LEAF_NODE	760:10	760:10	9	p16
LEAF_NODE	760:14	760:14	8	&
FIELD	760:16	760:16	8	0x7fff
LEAF_NODE	760:16	760:16	9	0x7fff
LEAF_NODE	760:22	760:22	4	;
SIMPLE_DECL	761:1	761:9	3	double Y ;
VAR_DECL	761:1	761:8	4	double Y
TYPE	761:1	761:1	5	double
TYPE_NAME	761:1	761:1	6	double
LEAF_NODE	761:1	761:1	7	double
NAME	761:8	761:8	5	Y
LEAF_NODE	761:8	761:8	6	Y
LEAF_NODE	761:9	761:9	4	;
SELECTION	763:1	764:2	3	
KEYWORD	763:1	763:1	4	if
LEAF_NODE	763:1	763:1	5	if
LEAF_NODE	763:4	763:4	4	(
CONDITION	763:5	763:5	4	! Le
EXPR	763:5	763:5	5	! Le
UNARY_EXPR	763:5	763:6	6	! Le
UNARY_OPERATOR	763:5	763:5	7	!
LEAF_NODE	763:5	763:5	8	!
FIELD	763:6	763:6	7	Le
LEAF_NODE	763:6	763:6	8	Le
LEAF_NODE	763:8	763:8	4	)
STATEMENTS	764:2	764:2	4	
JUMP_STATEMENT	764:2	764:13	5	return ( 0. ) ;
KEYWORD	764:2	764:2	6	return
LEAF_NODE	764:2	764:2	7	return
DESTINATION	764:9	764:9	6	( 0. )
EXPR	764:9	764:12	7	( 0. )
LEAF_NODE	764:9	764:9	8	(
FIELD	764:10	764:10	8	0.
LEAF_NODE	764:10	764:10	9	0.
LEAF_NODE	764:12	764:12	8	)
LEAF_NODE	764:13	764:13	6	;
LEAF_NODE	765:1	765:1	3	Y
LEAF_NODE	765:3	765:3	3	=
LEAF_NODE	765:5	765:5	3	exp
LEAF_NODE	765:8	765:8	3	(
LEAF_NODE	765:9	765:9	3	M_LN2
LEAF_NODE	765:14	765:14	3	/
LEAF_NODE	765:15	765:15	3	256.
LEAF_NODE	765:19	765:19	3	*
LEAF_NODE	765:20	765:20	3	(
LEAF_NODE	765:21	765:21	3	Le
LEAF_NODE	765:23	765:23	3	+
LEAF_NODE	765:24	765:24	3	.5
LEAF_NODE	765:26	765:26	3	)
LEAF_NODE	765:28	765:28	3	-
LEAF_NODE	765:30	765:30	3	M_LN2
LEAF_NODE	765:35	765:35	3	*
LEAF_NODE	765:36	765:36	3	64.
LEAF_NODE	765:39	765:39	3	)
LEAF_NODE	765:40	765:40	3	;
JUMP_STATEMENT	766:1	766:34	3	return ( ! ( p16 & 0x8000 ) ? Y : - Y ) ;
KEYWORD	766:1	766:1	4	return
LEAF_NODE	766:1	766:1	5	return
DESTINATION	766:8	766:8	4	( ! ( p16 & 0x8000 ) ? Y : - Y )
EXPR	766:8	766:33	5	( ! ( p16 & 0x8000 ) ? Y : - Y )
LEAF_NODE	766:8	766:8	6	(
COND_EXPR	766:9	766:31	6	! ( p16 & 0x8000 ) ? Y : - Y
CONDITION	766:9	766:9	7	! ( p16 & 0x8000 )
UNARY_EXPR	766:9	766:23	8	! ( p16 & 0x8000 )
UNARY_OPERATOR	766:9	766:9	9	!
LEAF_NODE	766:9	766:9	10	!
LEAF_NODE	766:10	766:10	9	(
FIELD	766:11	766:11	9	p16
LEAF_NODE	766:11	766:11	10	p16
LEAF_NODE	766:15	766:15	9	&
FIELD	766:17	766:17	9	0x8000
LEAF_NODE	766:17	766:17	10	0x8000
LEAF_NODE	766:23	766:23	9	)
LEAF_NODE	766:25	766:25	7	?
EXPR	766:27	766:27	7	Y
FIELD	766:27	766:27	8	Y
LEAF_NODE	766:27	766:27	9	Y
LEAF_NODE	766:29	766:29	7	:
UNARY_EXPR	766:31	766:32	7	- Y
UNARY_OPERATOR	766:31	766:31	8	-
LEAF_NODE	766:31	766:31	9	-
FIELD	766:32	766:32	8	Y
LEAF_NODE	766:32	766:32	9	Y
LEAF_NODE	766:33	766:33	6	)
LEAF_NODE	766:34	766:34	4	;
LEAF_NODE	767:0	767:0	2	}
FUNCTION_DEF	770:0	784:0	1	
RETURN_TYPE	770:0	772:0	2	static int
LEAF_NODE	770:0	770:0	3	static
TYPE_NAME	772:0	772:0	3	int
LEAF_NODE	772:0	772:0	4	int
FUNCTION_NAME	773:0	773:0	2	LogL16fromY
LEAF_NODE	773:0	773:0	3	LogL16fromY
PARAMETER_LIST	773:11	773:28	2	( double Y , int em )
LEAF_NODE	773:11	773:11	3	(
PARAMETER_DECL	773:12	773:19	3	double Y
TYPE	773:12	773:12	4	double
TYPE_NAME	773:12	773:12	5	double
LEAF_NODE	773:12	773:12	6	double
NAME	773:19	773:19	4	Y
LEAF_NODE	773:19	773:19	5	Y
LEAF_NODE	773:20	773:20	3	,
PARAMETER_DECL	773:22	773:26	3	int em
TYPE	773:22	773:22	4	int
TYPE_NAME	773:22	773:22	5	int
LEAF_NODE	773:22	773:22	6	int
NAME	773:26	773:26	4	em
LEAF_NODE	773:26	773:26	5	em
LEAF_NODE	773:28	773:28	3	)
LEAF_NODE	774:0	774:0	2	{
STATEMENTS	775:1	783:1	2	
SELECTION	775:1	776:2	3	
KEYWORD	775:1	775:1	4	if
LEAF_NODE	775:1	775:1	5	if
LEAF_NODE	775:4	775:4	4	(
CONDITION	775:5	775:5	4	Y >= 1.8371976e19
EXPR	775:5	775:10	5	Y >= 1.8371976e19
FIELD	775:5	775:5	6	Y
LEAF_NODE	775:5	775:5	7	Y
REL_OPERATOR	775:7	775:7	6	>=
LEAF_NODE	775:7	775:7	7	>=
FIELD	775:10	775:10	6	1.8371976e19
LEAF_NODE	775:10	775:10	7	1.8371976e19
LEAF_NODE	775:22	775:22	4	)
STATEMENTS	776:2	776:2	4	
JUMP_STATEMENT	776:2	776:17	5	return ( 0x7fff ) ;
KEYWORD	776:2	776:2	6	return
LEAF_NODE	776:2	776:2	7	return
DESTINATION	776:9	776:9	6	( 0x7fff )
EXPR	776:9	776:16	7	( 0x7fff )
LEAF_NODE	776:9	776:9	8	(
FIELD	776:10	776:10	8	0x7fff
LEAF_NODE	776:10	776:10	9	0x7fff
LEAF_NODE	776:16	776:16	8	)
LEAF_NODE	776:17	776:17	6	;
SELECTION	777:1	778:2	3	
KEYWORD	777:1	777:1	4	if
LEAF_NODE	777:1	777:1	5	if
LEAF_NODE	777:4	777:4	4	(
CONDITION	777:5	777:5	4	Y <= - 1.8371976e19
EXPR	777:5	777:10	5	Y <= - 1.8371976e19
FIELD	777:5	777:5	6	Y
LEAF_NODE	777:5	777:5	7	Y
REL_OPERATOR	777:7	777:7	6	<=
LEAF_NODE	777:7	777:7	7	<=
UNARY_EXPR	777:10	777:11	6	- 1.8371976e19
UNARY_OPERATOR	777:10	777:10	7	-
LEAF_NODE	777:10	777:10	8	-
FIELD	777:11	777:11	7	1.8371976e19
LEAF_NODE	777:11	777:11	8	1.8371976e19
LEAF_NODE	777:23	777:23	4	)
STATEMENTS	778:2	778:2	4	
JUMP_STATEMENT	778:2	778:17	5	return ( 0xffff ) ;
KEYWORD	778:2	778:2	6	return
LEAF_NODE	778:2	778:2	7	return
DESTINATION	778:9	778:9	6	( 0xffff )
EXPR	778:9	778:16	7	( 0xffff )
LEAF_NODE	778:9	778:9	8	(
FIELD	778:10	778:10	8	0xffff
LEAF_NODE	778:10	778:10	9	0xffff
LEAF_NODE	778:16	778:16	8	)
LEAF_NODE	778:17	778:17	6	;
SELECTION	779:1	780:2	3	
KEYWORD	779:1	779:1	4	if
LEAF_NODE	779:1	779:1	5	if
LEAF_NODE	779:4	779:4	4	(
CONDITION	779:5	779:5	4	Y > 5.4136769e-20
EXPR	779:5	779:9	5	Y > 5.4136769e-20
FIELD	779:5	779:5	6	Y
LEAF_NODE	779:5	779:5	7	Y
REL_OPERATOR	779:7	779:7	6	>
LEAF_NODE	779:7	779:7	7	>
FIELD	779:9	779:9	6	5.4136769e-20
LEAF_NODE	779:9	779:9	7	5.4136769e-20
LEAF_NODE	779:22	779:22	4	)
STATEMENTS	780:2	780:2	4	
JUMP_STATEMENT	780:2	780:41	5	return itrunc ( 256. * ( log2 ( Y ) + 64. ) , em ) ;
KEYWORD	780:2	780:2	6	return
LEAF_NODE	780:2	780:2	7	return
DESTINATION	780:9	780:9	6	itrunc ( 256. * ( log2 ( Y ) + 64. ) , em )
EXPR	780:9	780:9	7	itrunc ( 256. * ( log2 ( Y ) + 64. ) , em )
FUNCTION_CALL	780:9	780:40	8	itrunc ( 256. * ( log2 ( Y ) + 64. ) , em )
CALLEE	780:9	780:9	9	itrunc
LEAF_NODE	780:9	780:9	10	itrunc
LEAF_NODE	780:15	780:15	9	(
ARGUMENT	780:16	780:35	9	256. * ( log2 ( Y ) + 64. )
FIELD	780:16	780:16	10	256.
LEAF_NODE	780:16	780:16	11	256.
LEAF_NODE	780:20	780:20	10	*
LEAF_NODE	780:21	780:21	10	(
FUNCTION_CALL	780:22	780:28	10	log2 ( Y )
CALLEE	780:22	780:22	11	log2
LEAF_NODE	780:22	780:22	12	log2
LEAF_NODE	780:26	780:26	11	(
ARGUMENT	780:27	780:27	11	Y
FIELD	780:27	780:27	12	Y
LEAF_NODE	780:27	780:27	13	Y
LEAF_NODE	780:28	780:28	11	)
LEAF_NODE	780:30	780:30	10	+
FIELD	780:32	780:32	10	64.
LEAF_NODE	780:32	780:32	11	64.
LEAF_NODE	780:35	780:35	10	)
LEAF_NODE	780:36	780:36	9	,
ARGUMENT	780:38	780:38	9	em
FIELD	780:38	780:38	10	em
LEAF_NODE	780:38	780:38	11	em
LEAF_NODE	780:40	780:40	9	)
LEAF_NODE	780:41	780:41	6	;
SELECTION	781:1	782:2	3	
KEYWORD	781:1	781:1	4	if
LEAF_NODE	781:1	781:1	5	if
LEAF_NODE	781:4	781:4	4	(
CONDITION	781:5	781:5	4	Y < - 5.4136769e-20
EXPR	781:5	781:9	5	Y < - 5.4136769e-20
FIELD	781:5	781:5	6	Y
LEAF_NODE	781:5	781:5	7	Y
REL_OPERATOR	781:7	781:7	6	<
LEAF_NODE	781:7	781:7	7	<
UNARY_EXPR	781:9	781:10	6	- 5.4136769e-20
UNARY_OPERATOR	781:9	781:9	7	-
LEAF_NODE	781:9	781:9	8	-
FIELD	781:10	781:10	7	5.4136769e-20
LEAF_NODE	781:10	781:10	8	5.4136769e-20
LEAF_NODE	781:23	781:23	4	)
STATEMENTS	782:2	782:2	4	
JUMP_STATEMENT	782:2	782:54	5	return ( ~0x7fff | itrunc ( 256. * ( log2 ( - Y ) + 64. ) , em ) ) ;
KEYWORD	782:2	782:2	6	return
LEAF_NODE	782:2	782:2	7	return
DESTINATION	782:9	782:9	6	( ~0x7fff | itrunc ( 256. * ( log2 ( - Y ) + 64. ) , em ) )
EXPR	782:9	782:53	7	( ~0x7fff | itrunc ( 256. * ( log2 ( - Y ) + 64. ) , em ) )
LEAF_NODE	782:9	782:9	8	(
BIT_OR	782:10	782:20	8	~0x7fff | itrunc ( 256. * ( log2 ( - Y ) + 64. ) , em )
BIT_OR_ELEM	782:10	782:10	9	~0x7fff
FIELD	782:10	782:10	10	~0x7fff
LEAF_NODE	782:10	782:10	11	~0x7fff
LEAF_NODE	782:18	782:18	9	|
BIT_OR_ELEM	782:20	782:20	9	itrunc ( 256. * ( log2 ( - Y ) + 64. ) , em )
FUNCTION_CALL	782:20	782:52	10	itrunc ( 256. * ( log2 ( - Y ) + 64. ) , em )
CALLEE	782:20	782:20	11	itrunc
LEAF_NODE	782:20	782:20	12	itrunc
LEAF_NODE	782:26	782:26	11	(
ARGUMENT	782:27	782:47	11	256. * ( log2 ( - Y ) + 64. )
FIELD	782:27	782:27	12	256.
LEAF_NODE	782:27	782:27	13	256.
LEAF_NODE	782:31	782:31	12	*
LEAF_NODE	782:32	782:32	12	(
FUNCTION_CALL	782:33	782:40	12	log2 ( - Y )
CALLEE	782:33	782:33	13	log2
LEAF_NODE	782:33	782:33	14	log2
LEAF_NODE	782:37	782:37	13	(
ARGUMENT	782:38	782:38	13	- Y
UNARY_EXPR	782:38	782:39	14	- Y
UNARY_OPERATOR	782:38	782:38	15	-
LEAF_NODE	782:38	782:38	16	-
FIELD	782:39	782:39	15	Y
LEAF_NODE	782:39	782:39	16	Y
LEAF_NODE	782:40	782:40	13	)
LEAF_NODE	782:42	782:42	12	+
FIELD	782:44	782:44	12	64.
LEAF_NODE	782:44	782:44	13	64.
LEAF_NODE	782:47	782:47	12	)
LEAF_NODE	782:48	782:48	11	,
ARGUMENT	782:50	782:50	11	em
FIELD	782:50	782:50	12	em
LEAF_NODE	782:50	782:50	13	em
LEAF_NODE	782:52	782:52	11	)
LEAF_NODE	782:53	782:53	8	)
LEAF_NODE	782:54	782:54	6	;
JUMP_STATEMENT	783:1	783:11	3	return ( 0 ) ;
KEYWORD	783:1	783:1	4	return
LEAF_NODE	783:1	783:1	5	return
DESTINATION	783:8	783:8	4	( 0 )
EXPR	783:8	783:10	5	( 0 )
LEAF_NODE	783:8	783:8	6	(
FIELD	783:9	783:9	6	0
LEAF_NODE	783:9	783:9	7	0
LEAF_NODE	783:10	783:10	6	)
LEAF_NODE	783:11	783:11	4	;
LEAF_NODE	784:0	784:0	2	}
FUNCTION_DEF	786:0	794:0	1	
RETURN_TYPE	786:0	786:7	2	static void
LEAF_NODE	786:0	786:0	3	static
TYPE_NAME	786:7	786:7	3	void
LEAF_NODE	786:7	786:7	4	void
FUNCTION_NAME	787:0	787:0	2	L16toY
LEAF_NODE	787:0	787:0	3	L16toY
PARAMETER_LIST	787:6	787:45	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	787:6	787:6	3	(
PARAMETER_DECL	787:7	787:20	3	LogLuvState * sp
TYPE	787:7	787:18	4	LogLuvState *
TYPE_NAME	787:7	787:7	5	LogLuvState
LEAF_NODE	787:7	787:7	6	LogLuvState
POINTER	787:18	787:18	5	*
LEAF_NODE	787:18	787:18	6	*
NAME	787:20	787:20	4	sp
LEAF_NODE	787:20	787:20	5	sp
LEAF_NODE	787:22	787:22	3	,
PARAMETER_DECL	787:24	787:31	3	uint8 * op
TYPE	787:24	787:29	4	uint8 *
TYPE_NAME	787:24	787:24	5	uint8
LEAF_NODE	787:24	787:24	6	uint8
POINTER	787:29	787:29	5	*
LEAF_NODE	787:29	787:29	6	*
NAME	787:31	787:31	4	op
LEAF_NODE	787:31	787:31	5	op
LEAF_NODE	787:33	787:33	3	,
PARAMETER_DECL	787:35	787:44	3	tmsize_t n
TYPE	787:35	787:35	4	tmsize_t
TYPE_NAME	787:35	787:35	5	tmsize_t
LEAF_NODE	787:35	787:35	6	tmsize_t
NAME	787:44	787:44	4	n
LEAF_NODE	787:44	787:44	5	n
LEAF_NODE	787:45	787:45	3	)
LEAF_NODE	788:0	788:0	2	{
STATEMENTS	789:1	792:1	2	
SIMPLE_DECL	789:1	789:31	3	int16 * l16 ; l16 = ( int16 * ) sp -> tbuf ;
VAR_DECL	789:1	789:8	4	int16 * l16 ; l16 = ( int16 * ) sp -> tbuf
TYPE	789:1	789:6	5	int16 *
TYPE_NAME	789:1	789:1	6	int16
LEAF_NODE	789:1	789:1	7	int16
POINTER	789:6	789:6	6	*
LEAF_NODE	789:6	789:6	7	*
NAME	789:8	789:8	5	l16
LEAF_NODE	789:8	789:8	6	l16
LEAF_NODE	0:0	0:0	5	;
INIT	789:8	789:8	5	l16 = ( int16 * ) sp -> tbuf
ASSIGN	789:8	789:14	6	l16 = ( int16 * ) sp -> tbuf
LVAL	789:8	789:8	7	l16
NAME	789:8	789:8	8	l16
LEAF_NODE	789:8	789:8	9	l16
ASSIGN_OP	789:12	789:12	7	=
LEAF_NODE	789:12	789:12	8	=
RVAL	789:14	789:23	7	( int16 * ) sp -> tbuf
LEAF_NODE	789:14	789:14	8	(
TYPE_NAME	789:15	789:15	8	int16
LEAF_NODE	789:15	789:15	9	int16
LEAF_NODE	789:20	789:20	8	*
LEAF_NODE	789:21	789:21	8	)
FIELD	789:23	789:27	8	sp -> tbuf
LEAF_NODE	789:23	789:23	9	sp
LEAF_NODE	789:25	789:25	9	->
LEAF_NODE	789:27	789:27	9	tbuf
LEAF_NODE	789:31	789:31	4	;
SIMPLE_DECL	790:1	790:24	3	float * yp ; yp = ( float * ) op ;
VAR_DECL	790:1	790:8	4	float * yp ; yp = ( float * ) op
TYPE	790:1	790:6	5	float *
TYPE_NAME	790:1	790:1	6	float
LEAF_NODE	790:1	790:1	7	float
POINTER	790:6	790:6	6	*
LEAF_NODE	790:6	790:6	7	*
NAME	790:8	790:8	5	yp
LEAF_NODE	790:8	790:8	6	yp
LEAF_NODE	0:0	0:0	5	;
INIT	790:8	790:8	5	yp = ( float * ) op
ASSIGN	790:8	790:13	6	yp = ( float * ) op
LVAL	790:8	790:8	7	yp
NAME	790:8	790:8	8	yp
LEAF_NODE	790:8	790:8	9	yp
ASSIGN_OP	790:11	790:11	7	=
LEAF_NODE	790:11	790:11	8	=
RVAL	790:13	790:22	7	( float * ) op
LEAF_NODE	790:13	790:13	8	(
TYPE_NAME	790:14	790:14	8	float
LEAF_NODE	790:14	790:14	9	float
LEAF_NODE	790:19	790:19	8	*
LEAF_NODE	790:20	790:20	8	)
FIELD	790:22	790:22	8	op
LEAF_NODE	790:22	790:22	9	op
LEAF_NODE	790:24	790:24	4	;
ITERATION	792:1	793:2	3	
KEYWORD	792:1	792:1	4	while
LEAF_NODE	792:1	792:1	5	while
LEAF_NODE	792:7	792:7	4	(
CONDITION	792:8	792:8	4	n -- > 0
EXPR	792:8	792:14	5	n -- > 0
FIELD	792:8	792:9	6	n --
LEAF_NODE	792:8	792:8	7	n
LEAF_NODE	792:9	792:9	7	--
REL_OPERATOR	792:12	792:12	6	>
LEAF_NODE	792:12	792:12	7	>
FIELD	792:14	792:14	6	0
LEAF_NODE	792:14	792:14	7	0
LEAF_NODE	792:15	792:15	4	)
STATEMENTS	793:2	793:2	4	
EXPR_STATEMENT	793:2	793:34	5	* yp ++ = ( float ) LogL16toY ( * l16 ++ ) ;
EXPR	793:2	793:2	6	* yp ++ = ( float ) LogL16toY ( * l16 ++ )
ASSIGN	793:2	793:10	7	* yp ++ = ( float ) LogL16toY ( * l16 ++ )
LVAL	793:2	793:2	8	* yp ++
UNARY_EXPR	793:2	793:3	9	* yp ++
UNARY_OPERATOR	793:2	793:2	10	*
LEAF_NODE	793:2	793:2	11	*
FIELD	793:3	793:5	10	yp ++
LEAF_NODE	793:3	793:3	11	yp
LEAF_NODE	793:5	793:5	11	++
ASSIGN_OP	793:8	793:8	8	=
LEAF_NODE	793:8	793:8	9	=
RVAL	793:10	793:17	8	( float ) LogL16toY ( * l16 ++ )
LEAF_NODE	793:10	793:10	9	(
TYPE_NAME	793:11	793:11	9	float
LEAF_NODE	793:11	793:11	10	float
LEAF_NODE	793:16	793:16	9	)
FUNCTION_CALL	793:17	793:33	9	LogL16toY ( * l16 ++ )
CALLEE	793:17	793:17	10	LogL16toY
LEAF_NODE	793:17	793:17	11	LogL16toY
LEAF_NODE	793:26	793:26	10	(
ARGUMENT	793:27	793:27	10	* l16 ++
UNARY_EXPR	793:27	793:28	11	* l16 ++
UNARY_OPERATOR	793:27	793:27	12	*
LEAF_NODE	793:27	793:27	13	*
FIELD	793:28	793:31	12	l16 ++
LEAF_NODE	793:28	793:28	13	l16
LEAF_NODE	793:31	793:31	13	++
LEAF_NODE	793:33	793:33	10	)
LEAF_NODE	793:34	793:34	6	;
LEAF_NODE	794:0	794:0	2	}
FUNCTION_DEF	796:0	806:0	1	
RETURN_TYPE	796:0	796:7	2	static void
LEAF_NODE	796:0	796:0	3	static
TYPE_NAME	796:7	796:7	3	void
LEAF_NODE	796:7	796:7	4	void
FUNCTION_NAME	797:0	797:0	2	L16toGry
LEAF_NODE	797:0	797:0	3	L16toGry
PARAMETER_LIST	797:8	797:47	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	797:8	797:8	3	(
PARAMETER_DECL	797:9	797:22	3	LogLuvState * sp
TYPE	797:9	797:20	4	LogLuvState *
TYPE_NAME	797:9	797:9	5	LogLuvState
LEAF_NODE	797:9	797:9	6	LogLuvState
POINTER	797:20	797:20	5	*
LEAF_NODE	797:20	797:20	6	*
NAME	797:22	797:22	4	sp
LEAF_NODE	797:22	797:22	5	sp
LEAF_NODE	797:24	797:24	3	,
PARAMETER_DECL	797:26	797:33	3	uint8 * op
TYPE	797:26	797:31	4	uint8 *
TYPE_NAME	797:26	797:26	5	uint8
LEAF_NODE	797:26	797:26	6	uint8
POINTER	797:31	797:31	5	*
LEAF_NODE	797:31	797:31	6	*
NAME	797:33	797:33	4	op
LEAF_NODE	797:33	797:33	5	op
LEAF_NODE	797:35	797:35	3	,
PARAMETER_DECL	797:37	797:46	3	tmsize_t n
TYPE	797:37	797:37	4	tmsize_t
TYPE_NAME	797:37	797:37	5	tmsize_t
LEAF_NODE	797:37	797:37	6	tmsize_t
NAME	797:46	797:46	4	n
LEAF_NODE	797:46	797:46	5	n
LEAF_NODE	797:47	797:47	3	)
LEAF_NODE	798:0	798:0	2	{
STATEMENTS	799:1	802:1	2	
SIMPLE_DECL	799:1	799:31	3	int16 * l16 ; l16 = ( int16 * ) sp -> tbuf ;
VAR_DECL	799:1	799:8	4	int16 * l16 ; l16 = ( int16 * ) sp -> tbuf
TYPE	799:1	799:6	5	int16 *
TYPE_NAME	799:1	799:1	6	int16
LEAF_NODE	799:1	799:1	7	int16
POINTER	799:6	799:6	6	*
LEAF_NODE	799:6	799:6	7	*
NAME	799:8	799:8	5	l16
LEAF_NODE	799:8	799:8	6	l16
LEAF_NODE	0:0	0:0	5	;
INIT	799:8	799:8	5	l16 = ( int16 * ) sp -> tbuf
ASSIGN	799:8	799:14	6	l16 = ( int16 * ) sp -> tbuf
LVAL	799:8	799:8	7	l16
NAME	799:8	799:8	8	l16
LEAF_NODE	799:8	799:8	9	l16
ASSIGN_OP	799:12	799:12	7	=
LEAF_NODE	799:12	799:12	8	=
RVAL	799:14	799:23	7	( int16 * ) sp -> tbuf
LEAF_NODE	799:14	799:14	8	(
TYPE_NAME	799:15	799:15	8	int16
LEAF_NODE	799:15	799:15	9	int16
LEAF_NODE	799:20	799:20	8	*
LEAF_NODE	799:21	799:21	8	)
FIELD	799:23	799:27	8	sp -> tbuf
LEAF_NODE	799:23	799:23	9	sp
LEAF_NODE	799:25	799:25	9	->
LEAF_NODE	799:27	799:27	9	tbuf
LEAF_NODE	799:31	799:31	4	;
SIMPLE_DECL	800:1	800:24	3	uint8 * gp ; gp = ( uint8 * ) op ;
VAR_DECL	800:1	800:8	4	uint8 * gp ; gp = ( uint8 * ) op
TYPE	800:1	800:6	5	uint8 *
TYPE_NAME	800:1	800:1	6	uint8
LEAF_NODE	800:1	800:1	7	uint8
POINTER	800:6	800:6	6	*
LEAF_NODE	800:6	800:6	7	*
NAME	800:8	800:8	5	gp
LEAF_NODE	800:8	800:8	6	gp
LEAF_NODE	0:0	0:0	5	;
INIT	800:8	800:8	5	gp = ( uint8 * ) op
ASSIGN	800:8	800:13	6	gp = ( uint8 * ) op
LVAL	800:8	800:8	7	gp
NAME	800:8	800:8	8	gp
LEAF_NODE	800:8	800:8	9	gp
ASSIGN_OP	800:11	800:11	7	=
LEAF_NODE	800:11	800:11	8	=
RVAL	800:13	800:22	7	( uint8 * ) op
LEAF_NODE	800:13	800:13	8	(
TYPE_NAME	800:14	800:14	8	uint8
LEAF_NODE	800:14	800:14	9	uint8
LEAF_NODE	800:19	800:19	8	*
LEAF_NODE	800:20	800:20	8	)
FIELD	800:22	800:22	8	op
LEAF_NODE	800:22	800:22	9	op
LEAF_NODE	800:24	800:24	4	;
ITERATION	802:1	802:17	3	
KEYWORD	802:1	802:1	4	while
LEAF_NODE	802:1	802:1	5	while
LEAF_NODE	802:7	802:7	4	(
CONDITION	802:8	802:8	4	n -- > 0
EXPR	802:8	802:14	5	n -- > 0
FIELD	802:8	802:9	6	n --
LEAF_NODE	802:8	802:8	7	n
LEAF_NODE	802:9	802:9	7	--
REL_OPERATOR	802:12	802:12	6	>
LEAF_NODE	802:12	802:12	7	>
FIELD	802:14	802:14	6	0
LEAF_NODE	802:14	802:14	7	0
LEAF_NODE	802:15	802:15	4	)
STATEMENTS	802:17	805:1	4	
LEAF_NODE	802:17	802:17	5	{
STATEMENTS	803:2	804:2	5	
SIMPLE_DECL	803:2	803:30	6	double Y ; Y = LogL16toY ( * l16 ++ ) ;
VAR_DECL	803:2	803:9	7	double Y ; Y = LogL16toY ( * l16 ++ )
TYPE	803:2	803:2	8	double
TYPE_NAME	803:2	803:2	9	double
LEAF_NODE	803:2	803:2	10	double
NAME	803:9	803:9	8	Y
LEAF_NODE	803:9	803:9	9	Y
LEAF_NODE	0:0	0:0	8	;
INIT	803:9	803:9	8	Y = LogL16toY ( * l16 ++ )
ASSIGN	803:9	803:13	9	Y = LogL16toY ( * l16 ++ )
LVAL	803:9	803:9	10	Y
NAME	803:9	803:9	11	Y
LEAF_NODE	803:9	803:9	12	Y
ASSIGN_OP	803:11	803:11	10	=
LEAF_NODE	803:11	803:11	11	=
RVAL	803:13	803:13	10	LogL16toY ( * l16 ++ )
FUNCTION_CALL	803:13	803:29	11	LogL16toY ( * l16 ++ )
CALLEE	803:13	803:13	12	LogL16toY
LEAF_NODE	803:13	803:13	13	LogL16toY
LEAF_NODE	803:22	803:22	12	(
ARGUMENT	803:23	803:23	12	* l16 ++
UNARY_EXPR	803:23	803:24	13	* l16 ++
UNARY_OPERATOR	803:23	803:23	14	*
LEAF_NODE	803:23	803:23	15	*
FIELD	803:24	803:27	14	l16 ++
LEAF_NODE	803:24	803:24	15	l16
LEAF_NODE	803:27	803:27	15	++
LEAF_NODE	803:29	803:29	12	)
LEAF_NODE	803:30	803:30	7	;
EXPR_STATEMENT	804:2	804:73	6	* gp ++ = ( uint8 ) ( ( Y <= 0. ) ? 0 : ( Y >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( Y ) ) ) ;
EXPR	804:2	804:2	7	* gp ++ = ( uint8 ) ( ( Y <= 0. ) ? 0 : ( Y >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( Y ) ) )
ASSIGN	804:2	804:10	8	* gp ++ = ( uint8 ) ( ( Y <= 0. ) ? 0 : ( Y >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( Y ) ) )
LVAL	804:2	804:2	9	* gp ++
UNARY_EXPR	804:2	804:3	10	* gp ++
UNARY_OPERATOR	804:2	804:2	11	*
LEAF_NODE	804:2	804:2	12	*
FIELD	804:3	804:5	11	gp ++
LEAF_NODE	804:3	804:3	12	gp
LEAF_NODE	804:5	804:5	12	++
ASSIGN_OP	804:8	804:8	9	=
LEAF_NODE	804:8	804:8	10	=
RVAL	804:10	804:72	9	( uint8 ) ( ( Y <= 0. ) ? 0 : ( Y >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( Y ) ) )
LEAF_NODE	804:10	804:10	10	(
TYPE_NAME	804:11	804:11	10	uint8
LEAF_NODE	804:11	804:11	11	uint8
LEAF_NODE	804:16	804:16	10	)
LEAF_NODE	804:18	804:18	10	(
COND_EXPR	804:19	804:35	10	( Y <= 0. ) ? 0 : ( Y >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( Y ) )
CONDITION	804:19	804:27	11	( Y <= 0. )
LEAF_NODE	804:19	804:19	12	(
FIELD	804:20	804:20	12	Y
LEAF_NODE	804:20	804:20	13	Y
REL_OPERATOR	804:22	804:22	12	<=
LEAF_NODE	804:22	804:22	13	<=
FIELD	804:25	804:25	12	0.
LEAF_NODE	804:25	804:25	13	0.
LEAF_NODE	804:27	804:27	12	)
LEAF_NODE	804:29	804:29	11	?
EXPR	804:31	804:31	11	0
FIELD	804:31	804:31	12	0
LEAF_NODE	804:31	804:31	13	0
LEAF_NODE	804:33	804:33	11	:
COND_EXPR	804:35	804:71	11	( Y >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( Y ) )
CONDITION	804:35	804:43	12	( Y >= 1. )
LEAF_NODE	804:35	804:35	13	(
FIELD	804:36	804:36	13	Y
LEAF_NODE	804:36	804:36	14	Y
REL_OPERATOR	804:38	804:38	13	>=
LEAF_NODE	804:38	804:38	14	>=
FIELD	804:41	804:41	13	1.
LEAF_NODE	804:41	804:41	14	1.
LEAF_NODE	804:43	804:43	13	)
LEAF_NODE	804:45	804:45	12	?
EXPR	804:47	804:47	12	255
FIELD	804:47	804:47	13	255
LEAF_NODE	804:47	804:47	14	255
LEAF_NODE	804:51	804:51	12	:
LEAF_NODE	804:53	804:53	12	(
TYPE_NAME	804:54	804:54	12	int
LEAF_NODE	804:54	804:54	13	int
LEAF_NODE	804:57	804:57	12	)
LEAF_NODE	804:58	804:58	12	(
FIELD	804:59	804:59	12	256.
LEAF_NODE	804:59	804:59	13	256.
LEAF_NODE	804:63	804:63	12	*
FUNCTION_CALL	804:64	804:70	12	sqrt ( Y )
CALLEE	804:64	804:64	13	sqrt
LEAF_NODE	804:64	804:64	14	sqrt
LEAF_NODE	804:68	804:68	13	(
ARGUMENT	804:69	804:69	13	Y
FIELD	804:69	804:69	14	Y
LEAF_NODE	804:69	804:69	15	Y
LEAF_NODE	804:70	804:70	13	)
LEAF_NODE	804:71	804:71	12	)
LEAF_NODE	804:72	804:72	10	)
LEAF_NODE	804:73	804:73	7	;
LEAF_NODE	805:1	805:1	5	}
LEAF_NODE	806:0	806:0	2	}
FUNCTION_DEF	808:0	816:0	1	
RETURN_TYPE	808:0	808:7	2	static void
LEAF_NODE	808:0	808:0	3	static
TYPE_NAME	808:7	808:7	3	void
LEAF_NODE	808:7	808:7	4	void
FUNCTION_NAME	809:0	809:0	2	L16fromY
LEAF_NODE	809:0	809:0	3	L16fromY
PARAMETER_LIST	809:8	809:47	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	809:8	809:8	3	(
PARAMETER_DECL	809:9	809:22	3	LogLuvState * sp
TYPE	809:9	809:20	4	LogLuvState *
TYPE_NAME	809:9	809:9	5	LogLuvState
LEAF_NODE	809:9	809:9	6	LogLuvState
POINTER	809:20	809:20	5	*
LEAF_NODE	809:20	809:20	6	*
NAME	809:22	809:22	4	sp
LEAF_NODE	809:22	809:22	5	sp
LEAF_NODE	809:24	809:24	3	,
PARAMETER_DECL	809:26	809:33	3	uint8 * op
TYPE	809:26	809:31	4	uint8 *
TYPE_NAME	809:26	809:26	5	uint8
LEAF_NODE	809:26	809:26	6	uint8
POINTER	809:31	809:31	5	*
LEAF_NODE	809:31	809:31	6	*
NAME	809:33	809:33	4	op
LEAF_NODE	809:33	809:33	5	op
LEAF_NODE	809:35	809:35	3	,
PARAMETER_DECL	809:37	809:46	3	tmsize_t n
TYPE	809:37	809:37	4	tmsize_t
TYPE_NAME	809:37	809:37	5	tmsize_t
LEAF_NODE	809:37	809:37	6	tmsize_t
NAME	809:46	809:46	4	n
LEAF_NODE	809:46	809:46	5	n
LEAF_NODE	809:47	809:47	3	)
LEAF_NODE	810:0	810:0	2	{
STATEMENTS	811:1	814:1	2	
SIMPLE_DECL	811:1	811:31	3	int16 * l16 ; l16 = ( int16 * ) sp -> tbuf ;
VAR_DECL	811:1	811:8	4	int16 * l16 ; l16 = ( int16 * ) sp -> tbuf
TYPE	811:1	811:6	5	int16 *
TYPE_NAME	811:1	811:1	6	int16
LEAF_NODE	811:1	811:1	7	int16
POINTER	811:6	811:6	6	*
LEAF_NODE	811:6	811:6	7	*
NAME	811:8	811:8	5	l16
LEAF_NODE	811:8	811:8	6	l16
LEAF_NODE	0:0	0:0	5	;
INIT	811:8	811:8	5	l16 = ( int16 * ) sp -> tbuf
ASSIGN	811:8	811:14	6	l16 = ( int16 * ) sp -> tbuf
LVAL	811:8	811:8	7	l16
NAME	811:8	811:8	8	l16
LEAF_NODE	811:8	811:8	9	l16
ASSIGN_OP	811:12	811:12	7	=
LEAF_NODE	811:12	811:12	8	=
RVAL	811:14	811:23	7	( int16 * ) sp -> tbuf
LEAF_NODE	811:14	811:14	8	(
TYPE_NAME	811:15	811:15	8	int16
LEAF_NODE	811:15	811:15	9	int16
LEAF_NODE	811:20	811:20	8	*
LEAF_NODE	811:21	811:21	8	)
FIELD	811:23	811:27	8	sp -> tbuf
LEAF_NODE	811:23	811:23	9	sp
LEAF_NODE	811:25	811:25	9	->
LEAF_NODE	811:27	811:27	9	tbuf
LEAF_NODE	811:31	811:31	4	;
SIMPLE_DECL	812:1	812:24	3	float * yp ; yp = ( float * ) op ;
VAR_DECL	812:1	812:8	4	float * yp ; yp = ( float * ) op
TYPE	812:1	812:6	5	float *
TYPE_NAME	812:1	812:1	6	float
LEAF_NODE	812:1	812:1	7	float
POINTER	812:6	812:6	6	*
LEAF_NODE	812:6	812:6	7	*
NAME	812:8	812:8	5	yp
LEAF_NODE	812:8	812:8	6	yp
LEAF_NODE	0:0	0:0	5	;
INIT	812:8	812:8	5	yp = ( float * ) op
ASSIGN	812:8	812:13	6	yp = ( float * ) op
LVAL	812:8	812:8	7	yp
NAME	812:8	812:8	8	yp
LEAF_NODE	812:8	812:8	9	yp
ASSIGN_OP	812:11	812:11	7	=
LEAF_NODE	812:11	812:11	8	=
RVAL	812:13	812:22	7	( float * ) op
LEAF_NODE	812:13	812:13	8	(
TYPE_NAME	812:14	812:14	8	float
LEAF_NODE	812:14	812:14	9	float
LEAF_NODE	812:19	812:19	8	*
LEAF_NODE	812:20	812:20	8	)
FIELD	812:22	812:22	8	op
LEAF_NODE	812:22	812:22	9	op
LEAF_NODE	812:24	812:24	4	;
ITERATION	814:1	815:2	3	
KEYWORD	814:1	814:1	4	while
LEAF_NODE	814:1	814:1	5	while
LEAF_NODE	814:7	814:7	4	(
CONDITION	814:8	814:8	4	n -- > 0
EXPR	814:8	814:14	5	n -- > 0
FIELD	814:8	814:9	6	n --
LEAF_NODE	814:8	814:8	7	n
LEAF_NODE	814:9	814:9	7	--
REL_OPERATOR	814:12	814:12	6	>
LEAF_NODE	814:12	814:12	7	>
FIELD	814:14	814:14	6	0
LEAF_NODE	814:14	814:14	7	0
LEAF_NODE	814:15	814:15	4	)
STATEMENTS	815:2	815:2	4	
EXPR_STATEMENT	815:2	815:56	5	* l16 ++ = ( int16 ) ( LogL16fromY ( * yp ++ , sp -> encode_meth ) ) ;
EXPR	815:2	815:2	6	* l16 ++ = ( int16 ) ( LogL16fromY ( * yp ++ , sp -> encode_meth ) )
ASSIGN	815:2	815:11	7	* l16 ++ = ( int16 ) ( LogL16fromY ( * yp ++ , sp -> encode_meth ) )
LVAL	815:2	815:2	8	* l16 ++
UNARY_EXPR	815:2	815:3	9	* l16 ++
UNARY_OPERATOR	815:2	815:2	10	*
LEAF_NODE	815:2	815:2	11	*
FIELD	815:3	815:6	10	l16 ++
LEAF_NODE	815:3	815:3	11	l16
LEAF_NODE	815:6	815:6	11	++
ASSIGN_OP	815:9	815:9	8	=
LEAF_NODE	815:9	815:9	9	=
RVAL	815:11	815:55	8	( int16 ) ( LogL16fromY ( * yp ++ , sp -> encode_meth ) )
LEAF_NODE	815:11	815:11	9	(
TYPE_NAME	815:12	815:12	9	int16
LEAF_NODE	815:12	815:12	10	int16
LEAF_NODE	815:17	815:17	9	)
LEAF_NODE	815:19	815:19	9	(
FUNCTION_CALL	815:20	815:54	9	LogL16fromY ( * yp ++ , sp -> encode_meth )
CALLEE	815:20	815:20	10	LogL16fromY
LEAF_NODE	815:20	815:20	11	LogL16fromY
LEAF_NODE	815:31	815:31	10	(
ARGUMENT	815:32	815:32	10	* yp ++
UNARY_EXPR	815:32	815:33	11	* yp ++
UNARY_OPERATOR	815:32	815:32	12	*
LEAF_NODE	815:32	815:32	13	*
FIELD	815:33	815:35	12	yp ++
LEAF_NODE	815:33	815:33	13	yp
LEAF_NODE	815:35	815:35	13	++
LEAF_NODE	815:37	815:37	10	,
ARGUMENT	815:39	815:39	10	sp -> encode_meth
FIELD	815:39	815:43	11	sp -> encode_meth
LEAF_NODE	815:39	815:39	12	sp
LEAF_NODE	815:41	815:41	12	->
LEAF_NODE	815:43	815:43	12	encode_meth
LEAF_NODE	815:54	815:54	10	)
LEAF_NODE	815:55	815:55	9	)
LEAF_NODE	815:56	815:56	6	;
LEAF_NODE	816:0	816:0	2	}
FUNCTION_DEF	819:0	834:0	1	
RETURN_TYPE	819:0	821:0	2	static void
LEAF_NODE	819:0	819:0	3	static
TYPE_NAME	821:0	821:0	3	void
LEAF_NODE	821:0	821:0	4	void
FUNCTION_NAME	822:0	822:0	2	XYZtoRGB24
LEAF_NODE	822:0	822:0	3	XYZtoRGB24
PARAMETER_LIST	822:10	822:37	2	( float [ 3 ] xyz , uint8 [ 3 ] rgb )
LEAF_NODE	822:10	822:10	3	(
PARAMETER_DECL	822:11	822:17	3	float [ 3 ] xyz
TYPE	822:11	822:20	4	float [ 3 ]
TYPE_NAME	822:11	822:11	5	float
LEAF_NODE	822:11	822:11	6	float
TYPE_SUFFIX	822:20	822:22	5	[ 3 ]
LEAF_NODE	822:20	822:20	6	[
FIELD	822:21	822:21	6	3
LEAF_NODE	822:21	822:21	7	3
LEAF_NODE	822:22	822:22	6	]
NAME	822:17	822:17	4	xyz
LEAF_NODE	822:17	822:17	5	xyz
LEAF_NODE	822:23	822:23	3	,
PARAMETER_DECL	822:25	822:31	3	uint8 [ 3 ] rgb
TYPE	822:25	822:34	4	uint8 [ 3 ]
TYPE_NAME	822:25	822:25	5	uint8
LEAF_NODE	822:25	822:25	6	uint8
TYPE_SUFFIX	822:34	822:36	5	[ 3 ]
LEAF_NODE	822:34	822:34	6	[
FIELD	822:35	822:35	6	3
LEAF_NODE	822:35	822:35	7	3
LEAF_NODE	822:36	822:36	6	]
NAME	822:31	822:31	4	rgb
LEAF_NODE	822:31	822:31	5	rgb
LEAF_NODE	822:37	822:37	3	)
LEAF_NODE	823:0	823:0	2	{
STATEMENTS	824:1	833:1	2	
SIMPLE_DECL	824:1	824:15	3	double r , double g , double b ;
INIT_DECL_LIST	824:1	824:1	4	double r , double g , double b
VAR_DECL	824:1	824:8	5	double r
TYPE	824:1	824:1	6	double
TYPE_NAME	824:1	824:1	7	double
LEAF_NODE	824:1	824:1	8	double
NAME	824:8	824:8	6	r
LEAF_NODE	824:8	824:8	7	r
LEAF_NODE	824:9	824:9	5	,
INIT_DECL_LIST	824:1	824:1	5	double g , double b
VAR_DECL	824:1	824:11	6	double g
TYPE	824:1	824:1	7	double
TYPE_NAME	824:1	824:1	8	double
LEAF_NODE	824:1	824:1	9	double
NAME	824:11	824:11	7	g
LEAF_NODE	824:11	824:11	8	g
LEAF_NODE	824:12	824:12	6	,
VAR_DECL	824:1	824:14	6	double b
TYPE	824:1	824:1	7	double
TYPE_NAME	824:1	824:1	8	double
LEAF_NODE	824:1	824:1	9	double
NAME	824:14	824:14	7	b
LEAF_NODE	824:14	824:14	8	b
LEAF_NODE	824:15	824:15	4	;
EXPR_STATEMENT	826:1	826:50	3	r = 2.690 * xyz [ 0 ] + - 1.276 * xyz [ 1 ] + - 0.414 * xyz [ 2 ] ;
EXPR	826:1	826:1	4	r = 2.690 * xyz [ 0 ] + - 1.276 * xyz [ 1 ] + - 0.414 * xyz [ 2 ]
ASSIGN	826:1	826:6	5	r = 2.690 * xyz [ 0 ] + - 1.276 * xyz [ 1 ] + - 0.414 * xyz [ 2 ]
LVAL	826:1	826:1	6	r
FIELD	826:1	826:1	7	r
LEAF_NODE	826:1	826:1	8	r
ASSIGN_OP	826:3	826:3	6	=
LEAF_NODE	826:3	826:3	7	=
RVAL	826:6	826:44	6	2.690 * xyz [ 0 ] + - 1.276 * xyz [ 1 ] + - 0.414 * xyz [ 2 ]
FIELD	826:6	826:6	7	2.690
LEAF_NODE	826:6	826:6	8	2.690
LEAF_NODE	826:11	826:11	7	*
FIELD	826:12	826:17	7	xyz [ 0 ]
LEAF_NODE	826:12	826:12	8	xyz
LEAF_NODE	826:15	826:15	8	[
EXPR	826:16	826:16	8	0
FIELD	826:16	826:16	9	0
LEAF_NODE	826:16	826:16	10	0
LEAF_NODE	826:17	826:17	8	]
LEAF_NODE	826:19	826:19	7	+
UNARY_EXPR	826:21	826:22	7	- 1.276
UNARY_OPERATOR	826:21	826:21	8	-
LEAF_NODE	826:21	826:21	9	-
FIELD	826:22	826:22	8	1.276
LEAF_NODE	826:22	826:22	9	1.276
LEAF_NODE	826:27	826:27	7	*
FIELD	826:28	826:33	7	xyz [ 1 ]
LEAF_NODE	826:28	826:28	8	xyz
LEAF_NODE	826:31	826:31	8	[
EXPR	826:32	826:32	8	1
FIELD	826:32	826:32	9	1
LEAF_NODE	826:32	826:32	10	1
LEAF_NODE	826:33	826:33	8	]
LEAF_NODE	826:35	826:35	7	+
UNARY_EXPR	826:37	826:38	7	- 0.414
UNARY_OPERATOR	826:37	826:37	8	-
LEAF_NODE	826:37	826:37	9	-
FIELD	826:38	826:38	8	0.414
LEAF_NODE	826:38	826:38	9	0.414
LEAF_NODE	826:43	826:43	7	*
FIELD	826:44	826:49	7	xyz [ 2 ]
LEAF_NODE	826:44	826:44	8	xyz
LEAF_NODE	826:47	826:47	8	[
EXPR	826:48	826:48	8	2
FIELD	826:48	826:48	9	2
LEAF_NODE	826:48	826:48	10	2
LEAF_NODE	826:49	826:49	8	]
LEAF_NODE	826:50	826:50	4	;
EXPR_STATEMENT	827:1	827:50	3	g = - 1.022 * xyz [ 0 ] + 1.978 * xyz [ 1 ] + 0.044 * xyz [ 2 ] ;
EXPR	827:1	827:1	4	g = - 1.022 * xyz [ 0 ] + 1.978 * xyz [ 1 ] + 0.044 * xyz [ 2 ]
ASSIGN	827:1	827:5	5	g = - 1.022 * xyz [ 0 ] + 1.978 * xyz [ 1 ] + 0.044 * xyz [ 2 ]
LVAL	827:1	827:1	6	g
FIELD	827:1	827:1	7	g
LEAF_NODE	827:1	827:1	8	g
ASSIGN_OP	827:3	827:3	6	=
LEAF_NODE	827:3	827:3	7	=
RVAL	827:5	827:44	6	- 1.022 * xyz [ 0 ] + 1.978 * xyz [ 1 ] + 0.044 * xyz [ 2 ]
UNARY_EXPR	827:5	827:6	7	- 1.022
UNARY_OPERATOR	827:5	827:5	8	-
LEAF_NODE	827:5	827:5	9	-
FIELD	827:6	827:6	8	1.022
LEAF_NODE	827:6	827:6	9	1.022
LEAF_NODE	827:11	827:11	7	*
FIELD	827:12	827:17	7	xyz [ 0 ]
LEAF_NODE	827:12	827:12	8	xyz
LEAF_NODE	827:15	827:15	8	[
EXPR	827:16	827:16	8	0
FIELD	827:16	827:16	9	0
LEAF_NODE	827:16	827:16	10	0
LEAF_NODE	827:17	827:17	8	]
LEAF_NODE	827:19	827:19	7	+
FIELD	827:22	827:22	7	1.978
LEAF_NODE	827:22	827:22	8	1.978
LEAF_NODE	827:27	827:27	7	*
FIELD	827:28	827:33	7	xyz [ 1 ]
LEAF_NODE	827:28	827:28	8	xyz
LEAF_NODE	827:31	827:31	8	[
EXPR	827:32	827:32	8	1
FIELD	827:32	827:32	9	1
LEAF_NODE	827:32	827:32	10	1
LEAF_NODE	827:33	827:33	8	]
LEAF_NODE	827:35	827:35	7	+
FIELD	827:38	827:38	7	0.044
LEAF_NODE	827:38	827:38	8	0.044
LEAF_NODE	827:43	827:43	7	*
FIELD	827:44	827:49	7	xyz [ 2 ]
LEAF_NODE	827:44	827:44	8	xyz
LEAF_NODE	827:47	827:47	8	[
EXPR	827:48	827:48	8	2
FIELD	827:48	827:48	9	2
LEAF_NODE	827:48	827:48	10	2
LEAF_NODE	827:49	827:49	8	]
LEAF_NODE	827:50	827:50	4	;
EXPR_STATEMENT	828:1	828:50	3	b = 0.061 * xyz [ 0 ] + - 0.224 * xyz [ 1 ] + 1.163 * xyz [ 2 ] ;
EXPR	828:1	828:1	4	b = 0.061 * xyz [ 0 ] + - 0.224 * xyz [ 1 ] + 1.163 * xyz [ 2 ]
ASSIGN	828:1	828:6	5	b = 0.061 * xyz [ 0 ] + - 0.224 * xyz [ 1 ] + 1.163 * xyz [ 2 ]
LVAL	828:1	828:1	6	b
FIELD	828:1	828:1	7	b
LEAF_NODE	828:1	828:1	8	b
ASSIGN_OP	828:3	828:3	6	=
LEAF_NODE	828:3	828:3	7	=
RVAL	828:6	828:44	6	0.061 * xyz [ 0 ] + - 0.224 * xyz [ 1 ] + 1.163 * xyz [ 2 ]
FIELD	828:6	828:6	7	0.061
LEAF_NODE	828:6	828:6	8	0.061
LEAF_NODE	828:11	828:11	7	*
FIELD	828:12	828:17	7	xyz [ 0 ]
LEAF_NODE	828:12	828:12	8	xyz
LEAF_NODE	828:15	828:15	8	[
EXPR	828:16	828:16	8	0
FIELD	828:16	828:16	9	0
LEAF_NODE	828:16	828:16	10	0
LEAF_NODE	828:17	828:17	8	]
LEAF_NODE	828:19	828:19	7	+
UNARY_EXPR	828:21	828:22	7	- 0.224
UNARY_OPERATOR	828:21	828:21	8	-
LEAF_NODE	828:21	828:21	9	-
FIELD	828:22	828:22	8	0.224
LEAF_NODE	828:22	828:22	9	0.224
LEAF_NODE	828:27	828:27	7	*
FIELD	828:28	828:33	7	xyz [ 1 ]
LEAF_NODE	828:28	828:28	8	xyz
LEAF_NODE	828:31	828:31	8	[
EXPR	828:32	828:32	8	1
FIELD	828:32	828:32	9	1
LEAF_NODE	828:32	828:32	10	1
LEAF_NODE	828:33	828:33	8	]
LEAF_NODE	828:35	828:35	7	+
FIELD	828:38	828:38	7	1.163
LEAF_NODE	828:38	828:38	8	1.163
LEAF_NODE	828:43	828:43	7	*
FIELD	828:44	828:49	7	xyz [ 2 ]
LEAF_NODE	828:44	828:44	8	xyz
LEAF_NODE	828:47	828:47	8	[
EXPR	828:48	828:48	8	2
FIELD	828:48	828:48	9	2
LEAF_NODE	828:48	828:48	10	2
LEAF_NODE	828:49	828:49	8	]
LEAF_NODE	828:50	828:50	4	;
EXPR_STATEMENT	831:1	831:70	3	rgb [ 0 ] = ( uint8 ) ( ( r <= 0. ) ? 0 : ( r >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( r ) ) ) ;
EXPR	831:1	831:1	4	rgb [ 0 ] = ( uint8 ) ( ( r <= 0. ) ? 0 : ( r >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( r ) ) )
ASSIGN	831:1	831:10	5	rgb [ 0 ] = ( uint8 ) ( ( r <= 0. ) ? 0 : ( r >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( r ) ) )
LVAL	831:1	831:1	6	rgb [ 0 ]
FIELD	831:1	831:6	7	rgb [ 0 ]
LEAF_NODE	831:1	831:1	8	rgb
LEAF_NODE	831:4	831:4	8	[
EXPR	831:5	831:5	8	0
FIELD	831:5	831:5	9	0
LEAF_NODE	831:5	831:5	10	0
LEAF_NODE	831:6	831:6	8	]
ASSIGN_OP	831:8	831:8	6	=
LEAF_NODE	831:8	831:8	7	=
RVAL	831:10	831:69	6	( uint8 ) ( ( r <= 0. ) ? 0 : ( r >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( r ) ) )
LEAF_NODE	831:10	831:10	7	(
TYPE_NAME	831:11	831:11	7	uint8
LEAF_NODE	831:11	831:11	8	uint8
LEAF_NODE	831:16	831:16	7	)
LEAF_NODE	831:17	831:17	7	(
COND_EXPR	831:18	831:32	7	( r <= 0. ) ? 0 : ( r >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( r ) )
CONDITION	831:18	831:24	8	( r <= 0. )
LEAF_NODE	831:18	831:18	9	(
FIELD	831:19	831:19	9	r
LEAF_NODE	831:19	831:19	10	r
REL_OPERATOR	831:20	831:20	9	<=
LEAF_NODE	831:20	831:20	10	<=
FIELD	831:22	831:22	9	0.
LEAF_NODE	831:22	831:22	10	0.
LEAF_NODE	831:24	831:24	9	)
LEAF_NODE	831:26	831:26	8	?
EXPR	831:28	831:28	8	0
FIELD	831:28	831:28	9	0
LEAF_NODE	831:28	831:28	10	0
LEAF_NODE	831:30	831:30	8	:
COND_EXPR	831:32	831:68	8	( r >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( r ) )
CONDITION	831:32	831:40	9	( r >= 1. )
LEAF_NODE	831:32	831:32	10	(
FIELD	831:33	831:33	10	r
LEAF_NODE	831:33	831:33	11	r
REL_OPERATOR	831:35	831:35	10	>=
LEAF_NODE	831:35	831:35	11	>=
FIELD	831:38	831:38	10	1.
LEAF_NODE	831:38	831:38	11	1.
LEAF_NODE	831:40	831:40	10	)
LEAF_NODE	831:42	831:42	9	?
EXPR	831:44	831:44	9	255
FIELD	831:44	831:44	10	255
LEAF_NODE	831:44	831:44	11	255
LEAF_NODE	831:48	831:48	9	:
LEAF_NODE	831:50	831:50	9	(
TYPE_NAME	831:51	831:51	9	int
LEAF_NODE	831:51	831:51	10	int
LEAF_NODE	831:54	831:54	9	)
LEAF_NODE	831:55	831:55	9	(
FIELD	831:56	831:56	9	256.
LEAF_NODE	831:56	831:56	10	256.
LEAF_NODE	831:60	831:60	9	*
FUNCTION_CALL	831:61	831:67	9	sqrt ( r )
CALLEE	831:61	831:61	10	sqrt
LEAF_NODE	831:61	831:61	11	sqrt
LEAF_NODE	831:65	831:65	10	(
ARGUMENT	831:66	831:66	10	r
FIELD	831:66	831:66	11	r
LEAF_NODE	831:66	831:66	12	r
LEAF_NODE	831:67	831:67	10	)
LEAF_NODE	831:68	831:68	9	)
LEAF_NODE	831:69	831:69	7	)
LEAF_NODE	831:70	831:70	4	;
EXPR_STATEMENT	832:1	832:70	3	rgb [ 1 ] = ( uint8 ) ( ( g <= 0. ) ? 0 : ( g >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( g ) ) ) ;
EXPR	832:1	832:1	4	rgb [ 1 ] = ( uint8 ) ( ( g <= 0. ) ? 0 : ( g >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( g ) ) )
ASSIGN	832:1	832:10	5	rgb [ 1 ] = ( uint8 ) ( ( g <= 0. ) ? 0 : ( g >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( g ) ) )
LVAL	832:1	832:1	6	rgb [ 1 ]
FIELD	832:1	832:6	7	rgb [ 1 ]
LEAF_NODE	832:1	832:1	8	rgb
LEAF_NODE	832:4	832:4	8	[
EXPR	832:5	832:5	8	1
FIELD	832:5	832:5	9	1
LEAF_NODE	832:5	832:5	10	1
LEAF_NODE	832:6	832:6	8	]
ASSIGN_OP	832:8	832:8	6	=
LEAF_NODE	832:8	832:8	7	=
RVAL	832:10	832:69	6	( uint8 ) ( ( g <= 0. ) ? 0 : ( g >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( g ) ) )
LEAF_NODE	832:10	832:10	7	(
TYPE_NAME	832:11	832:11	7	uint8
LEAF_NODE	832:11	832:11	8	uint8
LEAF_NODE	832:16	832:16	7	)
LEAF_NODE	832:17	832:17	7	(
COND_EXPR	832:18	832:32	7	( g <= 0. ) ? 0 : ( g >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( g ) )
CONDITION	832:18	832:24	8	( g <= 0. )
LEAF_NODE	832:18	832:18	9	(
FIELD	832:19	832:19	9	g
LEAF_NODE	832:19	832:19	10	g
REL_OPERATOR	832:20	832:20	9	<=
LEAF_NODE	832:20	832:20	10	<=
FIELD	832:22	832:22	9	0.
LEAF_NODE	832:22	832:22	10	0.
LEAF_NODE	832:24	832:24	9	)
LEAF_NODE	832:26	832:26	8	?
EXPR	832:28	832:28	8	0
FIELD	832:28	832:28	9	0
LEAF_NODE	832:28	832:28	10	0
LEAF_NODE	832:30	832:30	8	:
COND_EXPR	832:32	832:68	8	( g >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( g ) )
CONDITION	832:32	832:40	9	( g >= 1. )
LEAF_NODE	832:32	832:32	10	(
FIELD	832:33	832:33	10	g
LEAF_NODE	832:33	832:33	11	g
REL_OPERATOR	832:35	832:35	10	>=
LEAF_NODE	832:35	832:35	11	>=
FIELD	832:38	832:38	10	1.
LEAF_NODE	832:38	832:38	11	1.
LEAF_NODE	832:40	832:40	10	)
LEAF_NODE	832:42	832:42	9	?
EXPR	832:44	832:44	9	255
FIELD	832:44	832:44	10	255
LEAF_NODE	832:44	832:44	11	255
LEAF_NODE	832:48	832:48	9	:
LEAF_NODE	832:50	832:50	9	(
TYPE_NAME	832:51	832:51	9	int
LEAF_NODE	832:51	832:51	10	int
LEAF_NODE	832:54	832:54	9	)
LEAF_NODE	832:55	832:55	9	(
FIELD	832:56	832:56	9	256.
LEAF_NODE	832:56	832:56	10	256.
LEAF_NODE	832:60	832:60	9	*
FUNCTION_CALL	832:61	832:67	9	sqrt ( g )
CALLEE	832:61	832:61	10	sqrt
LEAF_NODE	832:61	832:61	11	sqrt
LEAF_NODE	832:65	832:65	10	(
ARGUMENT	832:66	832:66	10	g
FIELD	832:66	832:66	11	g
LEAF_NODE	832:66	832:66	12	g
LEAF_NODE	832:67	832:67	10	)
LEAF_NODE	832:68	832:68	9	)
LEAF_NODE	832:69	832:69	7	)
LEAF_NODE	832:70	832:70	4	;
EXPR_STATEMENT	833:1	833:70	3	rgb [ 2 ] = ( uint8 ) ( ( b <= 0. ) ? 0 : ( b >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( b ) ) ) ;
EXPR	833:1	833:1	4	rgb [ 2 ] = ( uint8 ) ( ( b <= 0. ) ? 0 : ( b >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( b ) ) )
ASSIGN	833:1	833:10	5	rgb [ 2 ] = ( uint8 ) ( ( b <= 0. ) ? 0 : ( b >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( b ) ) )
LVAL	833:1	833:1	6	rgb [ 2 ]
FIELD	833:1	833:6	7	rgb [ 2 ]
LEAF_NODE	833:1	833:1	8	rgb
LEAF_NODE	833:4	833:4	8	[
EXPR	833:5	833:5	8	2
FIELD	833:5	833:5	9	2
LEAF_NODE	833:5	833:5	10	2
LEAF_NODE	833:6	833:6	8	]
ASSIGN_OP	833:8	833:8	6	=
LEAF_NODE	833:8	833:8	7	=
RVAL	833:10	833:69	6	( uint8 ) ( ( b <= 0. ) ? 0 : ( b >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( b ) ) )
LEAF_NODE	833:10	833:10	7	(
TYPE_NAME	833:11	833:11	7	uint8
LEAF_NODE	833:11	833:11	8	uint8
LEAF_NODE	833:16	833:16	7	)
LEAF_NODE	833:17	833:17	7	(
COND_EXPR	833:18	833:32	7	( b <= 0. ) ? 0 : ( b >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( b ) )
CONDITION	833:18	833:24	8	( b <= 0. )
LEAF_NODE	833:18	833:18	9	(
FIELD	833:19	833:19	9	b
LEAF_NODE	833:19	833:19	10	b
REL_OPERATOR	833:20	833:20	9	<=
LEAF_NODE	833:20	833:20	10	<=
FIELD	833:22	833:22	9	0.
LEAF_NODE	833:22	833:22	10	0.
LEAF_NODE	833:24	833:24	9	)
LEAF_NODE	833:26	833:26	8	?
EXPR	833:28	833:28	8	0
FIELD	833:28	833:28	9	0
LEAF_NODE	833:28	833:28	10	0
LEAF_NODE	833:30	833:30	8	:
COND_EXPR	833:32	833:68	8	( b >= 1. ) ? 255 : ( int ) ( 256. * sqrt ( b ) )
CONDITION	833:32	833:40	9	( b >= 1. )
LEAF_NODE	833:32	833:32	10	(
FIELD	833:33	833:33	10	b
LEAF_NODE	833:33	833:33	11	b
REL_OPERATOR	833:35	833:35	10	>=
LEAF_NODE	833:35	833:35	11	>=
FIELD	833:38	833:38	10	1.
LEAF_NODE	833:38	833:38	11	1.
LEAF_NODE	833:40	833:40	10	)
LEAF_NODE	833:42	833:42	9	?
EXPR	833:44	833:44	9	255
FIELD	833:44	833:44	10	255
LEAF_NODE	833:44	833:44	11	255
LEAF_NODE	833:48	833:48	9	:
LEAF_NODE	833:50	833:50	9	(
TYPE_NAME	833:51	833:51	9	int
LEAF_NODE	833:51	833:51	10	int
LEAF_NODE	833:54	833:54	9	)
LEAF_NODE	833:55	833:55	9	(
FIELD	833:56	833:56	9	256.
LEAF_NODE	833:56	833:56	10	256.
LEAF_NODE	833:60	833:60	9	*
FUNCTION_CALL	833:61	833:67	9	sqrt ( b )
CALLEE	833:61	833:61	10	sqrt
LEAF_NODE	833:61	833:61	11	sqrt
LEAF_NODE	833:65	833:65	10	(
ARGUMENT	833:66	833:66	10	b
FIELD	833:66	833:66	11	b
LEAF_NODE	833:66	833:66	12	b
LEAF_NODE	833:67	833:67	10	)
LEAF_NODE	833:68	833:68	9	)
LEAF_NODE	833:69	833:69	7	)
LEAF_NODE	833:70	833:70	4	;
LEAF_NODE	834:0	834:0	2	}
FUNCTION_DEF	837:0	845:0	1	
RETURN_TYPE	837:0	839:0	2	static double
LEAF_NODE	837:0	837:0	3	static
TYPE_NAME	839:0	839:0	3	double
LEAF_NODE	839:0	839:0	4	double
FUNCTION_NAME	840:0	840:0	2	LogL10toY
LEAF_NODE	840:0	840:0	3	LogL10toY
PARAMETER_LIST	840:9	840:17	2	( int p10 )
LEAF_NODE	840:9	840:9	3	(
PARAMETER_DECL	840:10	840:14	3	int p10
TYPE	840:10	840:10	4	int
TYPE_NAME	840:10	840:10	5	int
LEAF_NODE	840:10	840:10	6	int
NAME	840:14	840:14	4	p10
LEAF_NODE	840:14	840:14	5	p10
LEAF_NODE	840:17	840:17	3	)
LEAF_NODE	841:0	841:0	2	{
STATEMENTS	842:1	844:45	2	
SELECTION	842:1	843:2	3	
KEYWORD	842:1	842:1	4	if
LEAF_NODE	842:1	842:1	5	if
LEAF_NODE	842:4	842:4	4	(
CONDITION	842:5	842:5	4	p10 == 0
EXPR	842:5	842:12	5	p10 == 0
FIELD	842:5	842:5	6	p10
LEAF_NODE	842:5	842:5	7	p10
EQ_OPERATOR	842:9	842:9	6	==
LEAF_NODE	842:9	842:9	7	==
FIELD	842:12	842:12	6	0
LEAF_NODE	842:12	842:12	7	0
LEAF_NODE	842:13	842:13	4	)
STATEMENTS	843:2	843:2	4	
JUMP_STATEMENT	843:2	843:13	5	return ( 0. ) ;
KEYWORD	843:2	843:2	6	return
LEAF_NODE	843:2	843:2	7	return
DESTINATION	843:9	843:9	6	( 0. )
EXPR	843:9	843:12	7	( 0. )
LEAF_NODE	843:9	843:9	8	(
FIELD	843:10	843:10	8	0.
LEAF_NODE	843:10	843:10	9	0.
LEAF_NODE	843:12	843:12	8	)
LEAF_NODE	843:13	843:13	6	;
LEAF_NODE	844:1	844:1	3	return
LEAF_NODE	844:8	844:8	3	(
LEAF_NODE	844:9	844:9	3	exp
LEAF_NODE	844:12	844:12	3	(
LEAF_NODE	844:13	844:13	3	M_LN2
LEAF_NODE	844:18	844:18	3	/
LEAF_NODE	844:19	844:19	3	64.
LEAF_NODE	844:22	844:22	3	*
LEAF_NODE	844:23	844:23	3	(
LEAF_NODE	844:24	844:24	3	p10
LEAF_NODE	844:27	844:27	3	+
LEAF_NODE	844:28	844:28	3	.5
LEAF_NODE	844:30	844:30	3	)
LEAF_NODE	844:32	844:32	3	-
LEAF_NODE	844:34	844:34	3	M_LN2
LEAF_NODE	844:39	844:39	3	*
LEAF_NODE	844:40	844:40	3	12.
LEAF_NODE	844:43	844:43	3	)
LEAF_NODE	844:44	844:44	3	)
LEAF_NODE	844:45	844:45	3	;
LEAF_NODE	845:0	845:0	2	}
FUNCTION_DEF	848:0	859:0	1	
RETURN_TYPE	848:0	850:0	2	static int
LEAF_NODE	848:0	848:0	3	static
TYPE_NAME	850:0	850:0	3	int
LEAF_NODE	850:0	850:0	4	int
FUNCTION_NAME	851:0	851:0	2	LogL10fromY
LEAF_NODE	851:0	851:0	3	LogL10fromY
PARAMETER_LIST	851:11	851:28	2	( double Y , int em )
LEAF_NODE	851:11	851:11	3	(
PARAMETER_DECL	851:12	851:19	3	double Y
TYPE	851:12	851:12	4	double
TYPE_NAME	851:12	851:12	5	double
LEAF_NODE	851:12	851:12	6	double
NAME	851:19	851:19	4	Y
LEAF_NODE	851:19	851:19	5	Y
LEAF_NODE	851:20	851:20	3	,
PARAMETER_DECL	851:22	851:26	3	int em
TYPE	851:22	851:22	4	int
TYPE_NAME	851:22	851:22	5	int
LEAF_NODE	851:22	851:22	6	int
NAME	851:26	851:26	4	em
LEAF_NODE	851:26	851:26	5	em
LEAF_NODE	851:28	851:28	3	)
LEAF_NODE	852:0	852:0	2	{
STATEMENTS	853:1	857:1	2	
SELECTION	853:1	854:2	3	
KEYWORD	853:1	853:1	4	if
LEAF_NODE	853:1	853:1	5	if
LEAF_NODE	853:4	853:4	4	(
CONDITION	853:5	853:5	4	Y >= 15.742
EXPR	853:5	853:10	5	Y >= 15.742
FIELD	853:5	853:5	6	Y
LEAF_NODE	853:5	853:5	7	Y
REL_OPERATOR	853:7	853:7	6	>=
LEAF_NODE	853:7	853:7	7	>=
FIELD	853:10	853:10	6	15.742
LEAF_NODE	853:10	853:10	7	15.742
LEAF_NODE	853:16	853:16	4	)
STATEMENTS	854:2	854:2	4	
JUMP_STATEMENT	854:2	854:16	5	return ( 0x3ff ) ;
KEYWORD	854:2	854:2	6	return
LEAF_NODE	854:2	854:2	7	return
DESTINATION	854:9	854:9	6	( 0x3ff )
EXPR	854:9	854:15	7	( 0x3ff )
LEAF_NODE	854:9	854:9	8	(
FIELD	854:10	854:10	8	0x3ff
LEAF_NODE	854:10	854:10	9	0x3ff
LEAF_NODE	854:15	854:15	8	)
LEAF_NODE	854:16	854:16	6	;
SELECTION	855:1	855:6	3	
KEYWORD	855:1	855:1	4	else
LEAF_NODE	855:1	855:1	5	else
STATEMENTS	855:6	855:6	4	
SELECTION	855:6	856:2	5	
KEYWORD	855:6	855:6	6	if
LEAF_NODE	855:6	855:6	7	if
LEAF_NODE	855:9	855:9	6	(
CONDITION	855:10	855:10	6	Y <= .00024283
EXPR	855:10	855:15	7	Y <= .00024283
FIELD	855:10	855:10	8	Y
LEAF_NODE	855:10	855:10	9	Y
REL_OPERATOR	855:12	855:12	8	<=
LEAF_NODE	855:12	855:12	9	<=
FIELD	855:15	855:15	8	.00024283
LEAF_NODE	855:15	855:15	9	.00024283
LEAF_NODE	855:24	855:24	6	)
STATEMENTS	856:2	856:2	6	
JUMP_STATEMENT	856:2	856:12	7	return ( 0 ) ;
KEYWORD	856:2	856:2	8	return
LEAF_NODE	856:2	856:2	9	return
DESTINATION	856:9	856:9	8	( 0 )
EXPR	856:9	856:11	9	( 0 )
LEAF_NODE	856:9	856:9	10	(
FIELD	856:10	856:10	10	0
LEAF_NODE	856:10	856:10	11	0
LEAF_NODE	856:11	856:11	10	)
LEAF_NODE	856:12	856:12	8	;
SELECTION	857:1	858:2	3	
KEYWORD	857:1	857:1	4	else
LEAF_NODE	857:1	857:1	5	else
STATEMENTS	858:2	858:2	4	
JUMP_STATEMENT	858:2	858:40	5	return itrunc ( 64. * ( log2 ( Y ) + 12. ) , em ) ;
KEYWORD	858:2	858:2	6	return
LEAF_NODE	858:2	858:2	7	return
DESTINATION	858:9	858:9	6	itrunc ( 64. * ( log2 ( Y ) + 12. ) , em )
EXPR	858:9	858:9	7	itrunc ( 64. * ( log2 ( Y ) + 12. ) , em )
FUNCTION_CALL	858:9	858:39	8	itrunc ( 64. * ( log2 ( Y ) + 12. ) , em )
CALLEE	858:9	858:9	9	itrunc
LEAF_NODE	858:9	858:9	10	itrunc
LEAF_NODE	858:15	858:15	9	(
ARGUMENT	858:16	858:34	9	64. * ( log2 ( Y ) + 12. )
FIELD	858:16	858:16	10	64.
LEAF_NODE	858:16	858:16	11	64.
LEAF_NODE	858:19	858:19	10	*
LEAF_NODE	858:20	858:20	10	(
FUNCTION_CALL	858:21	858:27	10	log2 ( Y )
CALLEE	858:21	858:21	11	log2
LEAF_NODE	858:21	858:21	12	log2
LEAF_NODE	858:25	858:25	11	(
ARGUMENT	858:26	858:26	11	Y
FIELD	858:26	858:26	12	Y
LEAF_NODE	858:26	858:26	13	Y
LEAF_NODE	858:27	858:27	11	)
LEAF_NODE	858:29	858:29	10	+
FIELD	858:31	858:31	10	12.
LEAF_NODE	858:31	858:31	11	12.
LEAF_NODE	858:34	858:34	10	)
LEAF_NODE	858:35	858:35	9	,
ARGUMENT	858:37	858:37	9	em
FIELD	858:37	858:37	10	em
LEAF_NODE	858:37	858:37	11	em
LEAF_NODE	858:39	858:39	9	)
LEAF_NODE	858:40	858:40	6	;
LEAF_NODE	859:0	859:0	2	}
FUNCTION_DEF	865:0	913:0	1	
RETURN_TYPE	865:0	865:7	2	static int
LEAF_NODE	865:0	865:0	3	static
TYPE_NAME	865:7	865:7	3	int
LEAF_NODE	865:7	865:7	4	int
FUNCTION_NAME	866:0	866:0	2	oog_encode
LEAF_NODE	866:0	866:0	3	oog_encode
PARAMETER_LIST	866:10	866:29	2	( double u , double v )
LEAF_NODE	866:10	866:10	3	(
PARAMETER_DECL	866:11	866:18	3	double u
TYPE	866:11	866:11	4	double
TYPE_NAME	866:11	866:11	5	double
LEAF_NODE	866:11	866:11	6	double
NAME	866:18	866:18	4	u
LEAF_NODE	866:18	866:18	5	u
LEAF_NODE	866:19	866:19	3	,
PARAMETER_DECL	866:21	866:28	3	double v
TYPE	866:21	866:21	4	double
TYPE_NAME	866:21	866:21	5	double
LEAF_NODE	866:21	866:21	6	double
NAME	866:28	866:28	4	v
LEAF_NODE	866:28	866:28	5	v
LEAF_NODE	866:29	866:29	3	)
LEAF_NODE	867:0	867:0	2	{
STATEMENTS	868:1	912:1	2	
LEAF_NODE	868:1	868:1	3	static
SIMPLE_DECL	868:8	868:30	3	int [ NANGLES ] oog_table ;
VAR_DECL	868:8	868:12	4	int [ NANGLES ] oog_table
TYPE	868:8	868:21	5	int [ NANGLES ]
TYPE_NAME	868:8	868:8	6	int
LEAF_NODE	868:8	868:8	7	int
TYPE_SUFFIX	868:21	868:29	6	[ NANGLES ]
LEAF_NODE	868:21	868:21	7	[
FIELD	868:22	868:22	7	NANGLES
LEAF_NODE	868:22	868:22	8	NANGLES
LEAF_NODE	868:29	868:29	7	]
NAME	868:12	868:12	5	oog_table
LEAF_NODE	868:12	868:12	6	oog_table
LEAF_NODE	868:30	868:30	4	;
LEAF_NODE	869:1	869:1	3	static
SIMPLE_DECL	869:8	869:27	3	int initialized ; initialized = 0 ;
VAR_DECL	869:8	869:12	4	int initialized ; initialized = 0
TYPE	869:8	869:8	5	int
TYPE_NAME	869:8	869:8	6	int
LEAF_NODE	869:8	869:8	7	int
NAME	869:12	869:12	5	initialized
LEAF_NODE	869:12	869:12	6	initialized
LEAF_NODE	0:0	0:0	5	;
INIT	869:12	869:12	5	initialized = 0
ASSIGN	869:12	869:26	6	initialized = 0
LVAL	869:12	869:12	7	initialized
NAME	869:12	869:12	8	initialized
LEAF_NODE	869:12	869:12	9	initialized
ASSIGN_OP	869:24	869:24	7	=
LEAF_NODE	869:24	869:24	8	=
RVAL	869:26	869:26	7	0
FIELD	869:26	869:26	8	0
LEAF_NODE	869:26	869:26	9	0
LEAF_NODE	869:27	869:27	4	;
LEAF_NODE	870:1	870:1	3	register
SIMPLE_DECL	870:10	870:15	3	int i ;
VAR_DECL	870:10	870:14	4	int i
TYPE	870:10	870:10	5	int
TYPE_NAME	870:10	870:10	6	int
LEAF_NODE	870:10	870:10	7	int
NAME	870:14	870:14	5	i
LEAF_NODE	870:14	870:14	6	i
LEAF_NODE	870:15	870:15	4	;
SELECTION	872:1	872:19	3	
KEYWORD	872:1	872:1	4	if
LEAF_NODE	872:1	872:1	5	if
LEAF_NODE	872:4	872:4	4	(
CONDITION	872:5	872:5	4	! initialized
EXPR	872:5	872:5	5	! initialized
UNARY_EXPR	872:5	872:6	6	! initialized
UNARY_OPERATOR	872:5	872:5	7	!
LEAF_NODE	872:5	872:5	8	!
FIELD	872:6	872:6	7	initialized
LEAF_NODE	872:6	872:6	8	initialized
LEAF_NODE	872:17	872:17	4	)
STATEMENTS	872:19	910:1	4	
LEAF_NODE	872:19	872:19	5	{
STATEMENTS	873:2	909:2	5	
SIMPLE_DECL	873:2	873:40	6	double [ NANGLES ] eps , double ua , double va , double ang , double epsa ;
INIT_DECL_LIST	873:2	873:2	7	double [ NANGLES ] eps , double ua , double va , double ang , double epsa
VAR_DECL	873:2	873:9	8	double [ NANGLES ] eps
TYPE	873:2	873:12	9	double [ NANGLES ]
TYPE_NAME	873:2	873:2	10	double
LEAF_NODE	873:2	873:2	11	double
TYPE_SUFFIX	873:12	873:20	10	[ NANGLES ]
LEAF_NODE	873:12	873:12	11	[
FIELD	873:13	873:13	11	NANGLES
LEAF_NODE	873:13	873:13	12	NANGLES
LEAF_NODE	873:20	873:20	11	]
NAME	873:9	873:9	9	eps
LEAF_NODE	873:9	873:9	10	eps
LEAF_NODE	873:21	873:21	8	,
INIT_DECL_LIST	873:2	873:2	8	double ua , double va , double ang , double epsa
VAR_DECL	873:2	873:23	9	double ua
TYPE	873:2	873:2	10	double
TYPE_NAME	873:2	873:2	11	double
LEAF_NODE	873:2	873:2	12	double
NAME	873:23	873:23	10	ua
LEAF_NODE	873:23	873:23	11	ua
LEAF_NODE	873:25	873:25	9	,
INIT_DECL_LIST	873:2	873:2	9	double va , double ang , double epsa
VAR_DECL	873:2	873:27	10	double va
TYPE	873:2	873:2	11	double
TYPE_NAME	873:2	873:2	12	double
LEAF_NODE	873:2	873:2	13	double
NAME	873:27	873:27	11	va
LEAF_NODE	873:27	873:27	12	va
LEAF_NODE	873:29	873:29	10	,
INIT_DECL_LIST	873:2	873:2	10	double ang , double epsa
VAR_DECL	873:2	873:31	11	double ang
TYPE	873:2	873:2	12	double
TYPE_NAME	873:2	873:2	13	double
LEAF_NODE	873:2	873:2	14	double
NAME	873:31	873:31	12	ang
LEAF_NODE	873:31	873:31	13	ang
LEAF_NODE	873:34	873:34	11	,
VAR_DECL	873:2	873:36	11	double epsa
TYPE	873:2	873:2	12	double
TYPE_NAME	873:2	873:2	13	double
LEAF_NODE	873:2	873:2	14	double
NAME	873:36	873:36	12	epsa
LEAF_NODE	873:36	873:36	13	epsa
LEAF_NODE	873:40	873:40	7	;
SIMPLE_DECL	874:2	874:19	6	int ui , int vi , int ustep ;
INIT_DECL_LIST	874:2	874:2	7	int ui , int vi , int ustep
VAR_DECL	874:2	874:6	8	int ui
TYPE	874:2	874:2	9	int
TYPE_NAME	874:2	874:2	10	int
LEAF_NODE	874:2	874:2	11	int
NAME	874:6	874:6	9	ui
LEAF_NODE	874:6	874:6	10	ui
LEAF_NODE	874:8	874:8	8	,
INIT_DECL_LIST	874:2	874:2	8	int vi , int ustep
VAR_DECL	874:2	874:10	9	int vi
TYPE	874:2	874:2	10	int
TYPE_NAME	874:2	874:2	11	int
LEAF_NODE	874:2	874:2	12	int
NAME	874:10	874:10	10	vi
LEAF_NODE	874:10	874:10	11	vi
LEAF_NODE	874:12	874:12	9	,
VAR_DECL	874:2	874:14	9	int ustep
TYPE	874:2	874:2	10	int
TYPE_NAME	874:2	874:2	11	int
LEAF_NODE	874:2	874:2	12	int
NAME	874:14	874:14	10	ustep
LEAF_NODE	874:14	874:14	11	ustep
LEAF_NODE	874:19	874:19	7	;
ITERATION	875:2	876:3	6	
KEYWORD	875:2	875:2	7	for
LEAF_NODE	875:2	875:2	8	for
LEAF_NODE	875:6	875:6	7	(
FOR_INIT	875:7	875:18	7	i = NANGLES ;
EXPR	875:7	875:7	8	i = NANGLES
ASSIGN	875:7	875:11	9	i = NANGLES
LVAL	875:7	875:7	10	i
FIELD	875:7	875:7	11	i
LEAF_NODE	875:7	875:7	12	i
ASSIGN_OP	875:9	875:9	10	=
LEAF_NODE	875:9	875:9	11	=
RVAL	875:11	875:11	10	NANGLES
FIELD	875:11	875:11	11	NANGLES
LEAF_NODE	875:11	875:11	12	NANGLES
LEAF_NODE	875:18	875:18	8	;
CONDITION	875:20	875:20	7	i --
EXPR	875:20	875:20	8	i --
FIELD	875:20	875:21	9	i --
LEAF_NODE	875:20	875:20	10	i
LEAF_NODE	875:21	875:21	10	--
LEAF_NODE	875:23	875:23	7	;
LEAF_NODE	0:0	0:0	7	FOR_EXPR
LEAF_NODE	875:25	875:25	7	)
STATEMENTS	876:3	876:3	7	
EXPR_STATEMENT	876:3	876:14	8	eps [ i ] = 2. ;
EXPR	876:3	876:3	9	eps [ i ] = 2.
ASSIGN	876:3	876:12	10	eps [ i ] = 2.
LVAL	876:3	876:3	11	eps [ i ]
FIELD	876:3	876:8	12	eps [ i ]
LEAF_NODE	876:3	876:3	13	eps
LEAF_NODE	876:6	876:6	13	[
EXPR	876:7	876:7	13	i
FIELD	876:7	876:7	14	i
LEAF_NODE	876:7	876:7	15	i
LEAF_NODE	876:8	876:8	13	]
ASSIGN_OP	876:10	876:10	11	=
LEAF_NODE	876:10	876:10	12	=
RVAL	876:12	876:12	11	2.
FIELD	876:12	876:12	12	2.
LEAF_NODE	876:12	876:12	13	2.
LEAF_NODE	876:14	876:14	9	;
ITERATION	877:2	877:28	6	
KEYWORD	877:2	877:2	7	for
LEAF_NODE	877:2	877:2	8	for
LEAF_NODE	877:6	877:6	7	(
FOR_INIT	877:7	877:18	7	vi = UV_NVS ;
EXPR	877:7	877:7	8	vi = UV_NVS
ASSIGN	877:7	877:12	9	vi = UV_NVS
LVAL	877:7	877:7	10	vi
FIELD	877:7	877:7	11	vi
LEAF_NODE	877:7	877:7	12	vi
ASSIGN_OP	877:10	877:10	10	=
LEAF_NODE	877:10	877:10	11	=
RVAL	877:12	877:12	10	UV_NVS
FIELD	877:12	877:12	11	UV_NVS
LEAF_NODE	877:12	877:12	12	UV_NVS
LEAF_NODE	877:18	877:18	8	;
CONDITION	877:20	877:20	7	vi --
EXPR	877:20	877:20	8	vi --
FIELD	877:20	877:22	9	vi --
LEAF_NODE	877:20	877:20	10	vi
LEAF_NODE	877:22	877:22	10	--
LEAF_NODE	877:24	877:24	7	;
LEAF_NODE	0:0	0:0	7	FOR_EXPR
LEAF_NODE	877:26	877:26	7	)
STATEMENTS	877:28	892:2	7	
LEAF_NODE	877:28	877:28	8	{
STATEMENTS	878:3	882:3	8	
EXPR_STATEMENT	878:3	878:36	9	va = UV_VSTART + ( vi + .5 ) * UV_SQSIZ ;
EXPR	878:3	878:3	10	va = UV_VSTART + ( vi + .5 ) * UV_SQSIZ
ASSIGN	878:3	878:8	11	va = UV_VSTART + ( vi + .5 ) * UV_SQSIZ
LVAL	878:3	878:3	12	va
FIELD	878:3	878:3	13	va
LEAF_NODE	878:3	878:3	14	va
ASSIGN_OP	878:6	878:6	12	=
LEAF_NODE	878:6	878:6	13	=
RVAL	878:8	878:28	12	UV_VSTART + ( vi + .5 ) * UV_SQSIZ
FIELD	878:8	878:8	13	UV_VSTART
LEAF_NODE	878:8	878:8	14	UV_VSTART
LEAF_NODE	878:18	878:18	13	+
LEAF_NODE	878:20	878:20	13	(
FIELD	878:21	878:21	13	vi
LEAF_NODE	878:21	878:21	14	vi
LEAF_NODE	878:23	878:23	13	+
FIELD	878:24	878:24	13	.5
LEAF_NODE	878:24	878:24	14	.5
LEAF_NODE	878:26	878:26	13	)
LEAF_NODE	878:27	878:27	13	*
FIELD	878:28	878:28	13	UV_SQSIZ
LEAF_NODE	878:28	878:28	14	UV_SQSIZ
LEAF_NODE	878:36	878:36	10	;
EXPR_STATEMENT	879:3	879:27	9	ustep = uv_row [ vi ] . nus - 1 ;
EXPR	879:3	879:3	10	ustep = uv_row [ vi ] . nus - 1
ASSIGN	879:3	879:11	11	ustep = uv_row [ vi ] . nus - 1
LVAL	879:3	879:3	12	ustep
FIELD	879:3	879:3	13	ustep
LEAF_NODE	879:3	879:3	14	ustep
ASSIGN_OP	879:9	879:9	12	=
LEAF_NODE	879:9	879:9	13	=
RVAL	879:11	879:26	12	uv_row [ vi ] . nus - 1
FIELD	879:11	879:22	13	uv_row [ vi ] . nus
LEAF_NODE	879:11	879:11	14	uv_row
LEAF_NODE	879:17	879:17	14	[
EXPR	879:18	879:18	14	vi
FIELD	879:18	879:18	15	vi
LEAF_NODE	879:18	879:18	16	vi
LEAF_NODE	879:20	879:20	14	]
LEAF_NODE	879:21	879:21	14	.
LEAF_NODE	879:22	879:22	14	nus
LEAF_NODE	879:25	879:25	13	-
FIELD	879:26	879:26	13	1
LEAF_NODE	879:26	879:26	14	1
LEAF_NODE	879:27	879:27	10	;
SELECTION	880:3	881:4	9	
KEYWORD	880:3	880:3	10	if
LEAF_NODE	880:3	880:3	11	if
LEAF_NODE	880:6	880:6	10	(
CONDITION	880:7	880:7	10	vi == UV_NVS - 1 || vi == 0 || ustep <= 0
EXPR	880:7	880:7	11	vi == UV_NVS - 1 || vi == 0 || ustep <= 0
OR	880:7	880:25	12	vi == UV_NVS - 1 || vi == 0 || ustep <= 0
EXPR	880:7	880:20	13	vi == UV_NVS - 1
FIELD	880:7	880:7	14	vi
LEAF_NODE	880:7	880:7	15	vi
EQ_OPERATOR	880:10	880:10	14	==
LEAF_NODE	880:10	880:10	15	==
FIELD	880:13	880:13	14	UV_NVS
LEAF_NODE	880:13	880:13	15	UV_NVS
LEAF_NODE	880:19	880:19	14	-
FIELD	880:20	880:20	14	1
LEAF_NODE	880:20	880:20	15	1
LEAF_NODE	880:22	880:22	13	||
EXPR	880:25	880:25	13	vi == 0 || ustep <= 0
OR	880:25	880:36	14	vi == 0 || ustep <= 0
EXPR	880:25	880:31	15	vi == 0
FIELD	880:25	880:25	16	vi
LEAF_NODE	880:25	880:25	17	vi
EQ_OPERATOR	880:28	880:28	16	==
LEAF_NODE	880:28	880:28	17	==
FIELD	880:31	880:31	16	0
LEAF_NODE	880:31	880:31	17	0
LEAF_NODE	880:33	880:33	15	||
EXPR	880:36	880:45	15	ustep <= 0
FIELD	880:36	880:36	16	ustep
LEAF_NODE	880:36	880:36	17	ustep
REL_OPERATOR	880:42	880:42	16	<=
LEAF_NODE	880:42	880:42	17	<=
FIELD	880:45	880:45	16	0
LEAF_NODE	880:45	880:45	17	0
LEAF_NODE	880:46	880:46	10	)
STATEMENTS	881:4	881:4	10	
EXPR_STATEMENT	881:4	881:13	11	ustep = 1 ;
EXPR	881:4	881:4	12	ustep = 1
ASSIGN	881:4	881:12	13	ustep = 1
LVAL	881:4	881:4	14	ustep
FIELD	881:4	881:4	15	ustep
LEAF_NODE	881:4	881:4	16	ustep
ASSIGN_OP	881:10	881:10	14	=
LEAF_NODE	881:10	881:10	15	=
RVAL	881:12	881:12	14	1
FIELD	881:12	881:12	15	1
LEAF_NODE	881:12	881:12	16	1
LEAF_NODE	881:13	881:13	12	;
ITERATION	882:3	882:53	9	
KEYWORD	882:3	882:3	10	for
LEAF_NODE	882:3	882:3	11	for
LEAF_NODE	882:7	882:7	10	(
FOR_INIT	882:8	882:29	10	ui = uv_row [ vi ] . nus - 1 ;
EXPR	882:8	882:8	11	ui = uv_row [ vi ] . nus - 1
ASSIGN	882:8	882:13	12	ui = uv_row [ vi ] . nus - 1
LVAL	882:8	882:8	13	ui
FIELD	882:8	882:8	14	ui
LEAF_NODE	882:8	882:8	15	ui
ASSIGN_OP	882:11	882:11	13	=
LEAF_NODE	882:11	882:11	14	=
RVAL	882:13	882:28	13	uv_row [ vi ] . nus - 1
FIELD	882:13	882:24	14	uv_row [ vi ] . nus
LEAF_NODE	882:13	882:13	15	uv_row
LEAF_NODE	882:19	882:19	15	[
EXPR	882:20	882:20	15	vi
FIELD	882:20	882:20	16	vi
LEAF_NODE	882:20	882:20	17	vi
LEAF_NODE	882:22	882:22	15	]
LEAF_NODE	882:23	882:23	15	.
LEAF_NODE	882:24	882:24	15	nus
LEAF_NODE	882:27	882:27	14	-
FIELD	882:28	882:28	14	1
LEAF_NODE	882:28	882:28	15	1
LEAF_NODE	882:29	882:29	11	;
CONDITION	882:31	882:31	10	ui >= 0
EXPR	882:31	882:37	11	ui >= 0
FIELD	882:31	882:31	12	ui
LEAF_NODE	882:31	882:31	13	ui
REL_OPERATOR	882:34	882:34	12	>=
LEAF_NODE	882:34	882:34	13	>=
FIELD	882:37	882:37	12	0
LEAF_NODE	882:37	882:37	13	0
LEAF_NODE	882:38	882:38	10	;
FOR_EXPR	882:40	882:40	10	ui -= ustep
EXPR	882:40	882:40	11	ui -= ustep
ASSIGN	882:40	882:46	12	ui -= ustep
LVAL	882:40	882:40	13	ui
FIELD	882:40	882:40	14	ui
LEAF_NODE	882:40	882:40	15	ui
ASSIGN_OP	882:43	882:43	13	-=
LEAF_NODE	882:43	882:43	14	-=
RVAL	882:46	882:46	13	ustep
FIELD	882:46	882:46	14	ustep
LEAF_NODE	882:46	882:46	15	ustep
LEAF_NODE	882:51	882:51	10	)
STATEMENTS	882:53	891:3	10	
LEAF_NODE	882:53	882:53	11	{
STATEMENTS	883:4	887:4	11	
EXPR_STATEMENT	883:4	883:45	12	ua = uv_row [ vi ] . ustart + ( ui + .5 ) * UV_SQSIZ ;
EXPR	883:4	883:4	13	ua = uv_row [ vi ] . ustart + ( ui + .5 ) * UV_SQSIZ
ASSIGN	883:4	883:9	14	ua = uv_row [ vi ] . ustart + ( ui + .5 ) * UV_SQSIZ
LVAL	883:4	883:4	15	ua
FIELD	883:4	883:4	16	ua
LEAF_NODE	883:4	883:4	17	ua
ASSIGN_OP	883:7	883:7	15	=
LEAF_NODE	883:7	883:7	16	=
RVAL	883:9	883:37	15	uv_row [ vi ] . ustart + ( ui + .5 ) * UV_SQSIZ
FIELD	883:9	883:20	16	uv_row [ vi ] . ustart
LEAF_NODE	883:9	883:9	17	uv_row
LEAF_NODE	883:15	883:15	17	[
EXPR	883:16	883:16	17	vi
FIELD	883:16	883:16	18	vi
LEAF_NODE	883:16	883:16	19	vi
LEAF_NODE	883:18	883:18	17	]
LEAF_NODE	883:19	883:19	17	.
LEAF_NODE	883:20	883:20	17	ustart
LEAF_NODE	883:27	883:27	16	+
LEAF_NODE	883:29	883:29	16	(
FIELD	883:30	883:30	16	ui
LEAF_NODE	883:30	883:30	17	ui
LEAF_NODE	883:32	883:32	16	+
FIELD	883:33	883:33	16	.5
LEAF_NODE	883:33	883:33	17	.5
LEAF_NODE	883:35	883:35	16	)
LEAF_NODE	883:36	883:36	16	*
FIELD	883:37	883:37	16	UV_SQSIZ
LEAF_NODE	883:37	883:37	17	UV_SQSIZ
LEAF_NODE	883:45	883:45	13	;
EXPR_STATEMENT	884:4	884:24	12	ang = uv2ang ( ua , va ) ;
EXPR	884:4	884:4	13	ang = uv2ang ( ua , va )
ASSIGN	884:4	884:10	14	ang = uv2ang ( ua , va )
LVAL	884:4	884:4	15	ang
FIELD	884:4	884:4	16	ang
LEAF_NODE	884:4	884:4	17	ang
ASSIGN_OP	884:8	884:8	15	=
LEAF_NODE	884:8	884:8	16	=
RVAL	884:10	884:10	15	uv2ang ( ua , va )
FUNCTION_CALL	884:10	884:23	16	uv2ang ( ua , va )
CALLEE	884:10	884:10	17	uv2ang
LEAF_NODE	884:10	884:10	18	uv2ang
LEAF_NODE	884:16	884:16	17	(
ARGUMENT	884:17	884:17	17	ua
FIELD	884:17	884:17	18	ua
LEAF_NODE	884:17	884:17	19	ua
LEAF_NODE	884:19	884:19	17	,
ARGUMENT	884:21	884:21	17	va
FIELD	884:21	884:21	18	va
LEAF_NODE	884:21	884:21	19	va
LEAF_NODE	884:23	884:23	17	)
LEAF_NODE	884:24	884:24	13	;
EXPR_STATEMENT	885:4	885:17	12	i = ( int ) ang ;
EXPR	885:4	885:4	13	i = ( int ) ang
ASSIGN	885:4	885:8	14	i = ( int ) ang
LVAL	885:4	885:4	15	i
FIELD	885:4	885:4	16	i
LEAF_NODE	885:4	885:4	17	i
ASSIGN_OP	885:6	885:6	15	=
LEAF_NODE	885:6	885:6	16	=
RVAL	885:8	885:14	15	( int ) ang
LEAF_NODE	885:8	885:8	16	(
TYPE_NAME	885:9	885:9	16	int
LEAF_NODE	885:9	885:9	17	int
LEAF_NODE	885:12	885:12	16	)
FIELD	885:14	885:14	16	ang
LEAF_NODE	885:14	885:14	17	ang
LEAF_NODE	885:17	885:17	13	;
EXPR_STATEMENT	886:4	886:29	12	epsa = fabs ( ang - ( i + .5 ) ) ;
EXPR	886:4	886:4	13	epsa = fabs ( ang - ( i + .5 ) )
ASSIGN	886:4	886:11	14	epsa = fabs ( ang - ( i + .5 ) )
LVAL	886:4	886:4	15	epsa
FIELD	886:4	886:4	16	epsa
LEAF_NODE	886:4	886:4	17	epsa
ASSIGN_OP	886:9	886:9	15	=
LEAF_NODE	886:9	886:9	16	=
RVAL	886:11	886:11	15	fabs ( ang - ( i + .5 ) )
FUNCTION_CALL	886:11	886:28	16	fabs ( ang - ( i + .5 ) )
CALLEE	886:11	886:11	17	fabs
LEAF_NODE	886:11	886:11	18	fabs
LEAF_NODE	886:15	886:15	17	(
ARGUMENT	886:16	886:27	17	ang - ( i + .5 )
FIELD	886:16	886:16	18	ang
LEAF_NODE	886:16	886:16	19	ang
LEAF_NODE	886:20	886:20	18	-
LEAF_NODE	886:22	886:22	18	(
FIELD	886:23	886:23	18	i
LEAF_NODE	886:23	886:23	19	i
LEAF_NODE	886:24	886:24	18	+
FIELD	886:25	886:25	18	.5
LEAF_NODE	886:25	886:25	19	.5
LEAF_NODE	886:27	886:27	18	)
LEAF_NODE	886:28	886:28	17	)
LEAF_NODE	886:29	886:29	13	;
SELECTION	887:4	887:23	12	
KEYWORD	887:4	887:4	13	if
LEAF_NODE	887:4	887:4	14	if
LEAF_NODE	887:7	887:7	13	(
CONDITION	887:8	887:8	13	epsa < eps [ i ]
EXPR	887:8	887:15	14	epsa < eps [ i ]
FIELD	887:8	887:8	15	epsa
LEAF_NODE	887:8	887:8	16	epsa
REL_OPERATOR	887:13	887:13	15	<
LEAF_NODE	887:13	887:13	16	<
FIELD	887:15	887:20	15	eps [ i ]
LEAF_NODE	887:15	887:15	16	eps
LEAF_NODE	887:18	887:18	16	[
EXPR	887:19	887:19	16	i
FIELD	887:19	887:19	17	i
LEAF_NODE	887:19	887:19	18	i
LEAF_NODE	887:20	887:20	16	]
LEAF_NODE	887:21	887:21	13	)
STATEMENTS	887:23	890:4	13	
LEAF_NODE	887:23	887:23	14	{
STATEMENTS	888:5	889:5	14	
EXPR_STATEMENT	888:5	888:40	15	oog_table [ i ] = uv_row [ vi ] . ncum + ui ;
EXPR	888:5	888:5	16	oog_table [ i ] = uv_row [ vi ] . ncum + ui
ASSIGN	888:5	888:20	17	oog_table [ i ] = uv_row [ vi ] . ncum + ui
LVAL	888:5	888:5	18	oog_table [ i ]
FIELD	888:5	888:16	19	oog_table [ i ]
LEAF_NODE	888:5	888:5	20	oog_table
LEAF_NODE	888:14	888:14	20	[
EXPR	888:15	888:15	20	i
FIELD	888:15	888:15	21	i
LEAF_NODE	888:15	888:15	22	i
LEAF_NODE	888:16	888:16	20	]
ASSIGN_OP	888:18	888:18	18	=
LEAF_NODE	888:18	888:18	19	=
RVAL	888:20	888:38	18	uv_row [ vi ] . ncum + ui
FIELD	888:20	888:31	19	uv_row [ vi ] . ncum
LEAF_NODE	888:20	888:20	20	uv_row
LEAF_NODE	888:26	888:26	20	[
EXPR	888:27	888:27	20	vi
FIELD	888:27	888:27	21	vi
LEAF_NODE	888:27	888:27	22	vi
LEAF_NODE	888:29	888:29	20	]
LEAF_NODE	888:30	888:30	20	.
LEAF_NODE	888:31	888:31	20	ncum
LEAF_NODE	888:36	888:36	19	+
FIELD	888:38	888:38	19	ui
LEAF_NODE	888:38	888:38	20	ui
LEAF_NODE	888:40	888:40	16	;
EXPR_STATEMENT	889:5	889:18	15	eps [ i ] = epsa ;
EXPR	889:5	889:5	16	eps [ i ] = epsa
ASSIGN	889:5	889:14	17	eps [ i ] = epsa
LVAL	889:5	889:5	18	eps [ i ]
FIELD	889:5	889:10	19	eps [ i ]
LEAF_NODE	889:5	889:5	20	eps
LEAF_NODE	889:8	889:8	20	[
EXPR	889:9	889:9	20	i
FIELD	889:9	889:9	21	i
LEAF_NODE	889:9	889:9	22	i
LEAF_NODE	889:10	889:10	20	]
ASSIGN_OP	889:12	889:12	18	=
LEAF_NODE	889:12	889:12	19	=
RVAL	889:14	889:14	18	epsa
FIELD	889:14	889:14	19	epsa
LEAF_NODE	889:14	889:14	20	epsa
LEAF_NODE	889:18	889:18	16	;
LEAF_NODE	890:4	890:4	14	}
LEAF_NODE	891:3	891:3	11	}
LEAF_NODE	892:2	892:2	8	}
ITERATION	893:2	894:3	6	
KEYWORD	893:2	893:2	7	for
LEAF_NODE	893:2	893:2	8	for
LEAF_NODE	893:6	893:6	7	(
FOR_INIT	893:7	893:18	7	i = NANGLES ;
EXPR	893:7	893:7	8	i = NANGLES
ASSIGN	893:7	893:11	9	i = NANGLES
LVAL	893:7	893:7	10	i
FIELD	893:7	893:7	11	i
LEAF_NODE	893:7	893:7	12	i
ASSIGN_OP	893:9	893:9	10	=
LEAF_NODE	893:9	893:9	11	=
RVAL	893:11	893:11	10	NANGLES
FIELD	893:11	893:11	11	NANGLES
LEAF_NODE	893:11	893:11	12	NANGLES
LEAF_NODE	893:18	893:18	8	;
CONDITION	893:20	893:20	7	i --
EXPR	893:20	893:20	8	i --
FIELD	893:20	893:21	9	i --
LEAF_NODE	893:20	893:20	10	i
LEAF_NODE	893:21	893:21	10	--
LEAF_NODE	893:23	893:23	7	;
LEAF_NODE	0:0	0:0	7	FOR_EXPR
LEAF_NODE	893:25	893:25	7	)
STATEMENTS	894:3	894:3	7	
SELECTION	894:3	894:21	8	
KEYWORD	894:3	894:3	9	if
LEAF_NODE	894:3	894:3	10	if
LEAF_NODE	894:6	894:6	9	(
CONDITION	894:7	894:7	9	eps [ i ] > 1.5
EXPR	894:7	894:16	10	eps [ i ] > 1.5
FIELD	894:7	894:12	11	eps [ i ]
LEAF_NODE	894:7	894:7	12	eps
LEAF_NODE	894:10	894:10	12	[
EXPR	894:11	894:11	12	i
FIELD	894:11	894:11	13	i
LEAF_NODE	894:11	894:11	14	i
LEAF_NODE	894:12	894:12	12	]
REL_OPERATOR	894:14	894:14	11	>
LEAF_NODE	894:14	894:14	12	>
FIELD	894:16	894:16	11	1.5
LEAF_NODE	894:16	894:16	12	1.5
LEAF_NODE	894:19	894:19	9	)
STATEMENTS	894:21	908:3	9	
LEAF_NODE	894:21	894:21	10	{
STATEMENTS	895:4	905:4	10	
SIMPLE_DECL	895:4	895:14	11	int i1 , int i2 ;
INIT_DECL_LIST	895:4	895:4	12	int i1 , int i2
VAR_DECL	895:4	895:8	13	int i1
TYPE	895:4	895:4	14	int
TYPE_NAME	895:4	895:4	15	int
LEAF_NODE	895:4	895:4	16	int
NAME	895:8	895:8	14	i1
LEAF_NODE	895:8	895:8	15	i1
LEAF_NODE	895:10	895:10	13	,
VAR_DECL	895:4	895:12	13	int i2
TYPE	895:4	895:4	14	int
TYPE_NAME	895:4	895:4	15	int
LEAF_NODE	895:4	895:4	16	int
NAME	895:12	895:12	14	i2
LEAF_NODE	895:12	895:12	15	i2
LEAF_NODE	895:14	895:14	12	;
ITERATION	896:4	897:5	11	
KEYWORD	896:4	896:4	12	for
LEAF_NODE	896:4	896:4	13	for
LEAF_NODE	896:8	896:8	12	(
FOR_INIT	896:9	896:15	12	i1 = 1 ;
EXPR	896:9	896:9	13	i1 = 1
ASSIGN	896:9	896:14	14	i1 = 1
LVAL	896:9	896:9	15	i1
FIELD	896:9	896:9	16	i1
LEAF_NODE	896:9	896:9	17	i1
ASSIGN_OP	896:12	896:12	15	=
LEAF_NODE	896:12	896:12	16	=
RVAL	896:14	896:14	15	1
FIELD	896:14	896:14	16	1
LEAF_NODE	896:14	896:14	17	1
LEAF_NODE	896:15	896:15	13	;
CONDITION	896:17	896:17	12	i1 < NANGLES / 2
EXPR	896:17	896:30	13	i1 < NANGLES / 2
FIELD	896:17	896:17	14	i1
LEAF_NODE	896:17	896:17	15	i1
REL_OPERATOR	896:20	896:20	14	<
LEAF_NODE	896:20	896:20	15	<
FIELD	896:22	896:22	14	NANGLES
LEAF_NODE	896:22	896:22	15	NANGLES
LEAF_NODE	896:29	896:29	14	/
FIELD	896:30	896:30	14	2
LEAF_NODE	896:30	896:30	15	2
LEAF_NODE	896:31	896:31	12	;
FOR_EXPR	896:33	896:33	12	i1 ++
EXPR	896:33	896:33	13	i1 ++
FIELD	896:33	896:35	14	i1 ++
LEAF_NODE	896:33	896:33	15	i1
LEAF_NODE	896:35	896:35	15	++
LEAF_NODE	896:37	896:37	12	)
STATEMENTS	897:5	897:5	12	
SELECTION	897:5	898:6	13	
KEYWORD	897:5	897:5	14	if
LEAF_NODE	897:5	897:5	15	if
LEAF_NODE	897:8	897:8	14	(
CONDITION	897:9	897:9	14	eps [ ( i + i1 ) % NANGLES ] < 1.5
EXPR	897:9	897:31	15	eps [ ( i + i1 ) % NANGLES ] < 1.5
FIELD	897:9	897:27	16	eps [ ( i + i1 ) % NANGLES ]
LEAF_NODE	897:9	897:9	17	eps
LEAF_NODE	897:12	897:12	17	[
EXPR	897:13	897:20	17	( i + i1 ) % NANGLES
LEAF_NODE	897:13	897:13	18	(
FIELD	897:14	897:14	18	i
LEAF_NODE	897:14	897:14	19	i
LEAF_NODE	897:15	897:15	18	+
FIELD	897:16	897:16	18	i1
LEAF_NODE	897:16	897:16	19	i1
LEAF_NODE	897:18	897:18	18	)
LEAF_NODE	897:19	897:19	18	%
FIELD	897:20	897:20	18	NANGLES
LEAF_NODE	897:20	897:20	19	NANGLES
LEAF_NODE	897:27	897:27	17	]
REL_OPERATOR	897:29	897:29	16	<
LEAF_NODE	897:29	897:29	17	<
FIELD	897:31	897:31	16	1.5
LEAF_NODE	897:31	897:31	17	1.5
LEAF_NODE	897:34	897:34	14	)
STATEMENTS	898:6	898:6	14	
JUMP_STATEMENT	898:6	898:11	15	break DESTINATION ;
KEYWORD	898:6	898:6	16	break
LEAF_NODE	898:6	898:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	898:11	898:11	16	;
ITERATION	899:4	900:5	11	
KEYWORD	899:4	899:4	12	for
LEAF_NODE	899:4	899:4	13	for
LEAF_NODE	899:8	899:8	12	(
FOR_INIT	899:9	899:15	12	i2 = 1 ;
EXPR	899:9	899:9	13	i2 = 1
ASSIGN	899:9	899:14	14	i2 = 1
LVAL	899:9	899:9	15	i2
FIELD	899:9	899:9	16	i2
LEAF_NODE	899:9	899:9	17	i2
ASSIGN_OP	899:12	899:12	15	=
LEAF_NODE	899:12	899:12	16	=
RVAL	899:14	899:14	15	1
FIELD	899:14	899:14	16	1
LEAF_NODE	899:14	899:14	17	1
LEAF_NODE	899:15	899:15	13	;
CONDITION	899:17	899:17	12	i2 < NANGLES / 2
EXPR	899:17	899:30	13	i2 < NANGLES / 2
FIELD	899:17	899:17	14	i2
LEAF_NODE	899:17	899:17	15	i2
REL_OPERATOR	899:20	899:20	14	<
LEAF_NODE	899:20	899:20	15	<
FIELD	899:22	899:22	14	NANGLES
LEAF_NODE	899:22	899:22	15	NANGLES
LEAF_NODE	899:29	899:29	14	/
FIELD	899:30	899:30	14	2
LEAF_NODE	899:30	899:30	15	2
LEAF_NODE	899:31	899:31	12	;
FOR_EXPR	899:33	899:33	12	i2 ++
EXPR	899:33	899:33	13	i2 ++
FIELD	899:33	899:35	14	i2 ++
LEAF_NODE	899:33	899:33	15	i2
LEAF_NODE	899:35	899:35	15	++
LEAF_NODE	899:37	899:37	12	)
STATEMENTS	900:5	900:5	12	
SELECTION	900:5	901:6	13	
KEYWORD	900:5	900:5	14	if
LEAF_NODE	900:5	900:5	15	if
LEAF_NODE	900:8	900:8	14	(
CONDITION	900:9	900:9	14	eps [ ( i + NANGLES - i2 ) % NANGLES ] < 1.5
EXPR	900:9	900:39	15	eps [ ( i + NANGLES - i2 ) % NANGLES ] < 1.5
FIELD	900:9	900:35	16	eps [ ( i + NANGLES - i2 ) % NANGLES ]
LEAF_NODE	900:9	900:9	17	eps
LEAF_NODE	900:12	900:12	17	[
EXPR	900:13	900:28	17	( i + NANGLES - i2 ) % NANGLES
LEAF_NODE	900:13	900:13	18	(
FIELD	900:14	900:14	18	i
LEAF_NODE	900:14	900:14	19	i
LEAF_NODE	900:15	900:15	18	+
FIELD	900:16	900:16	18	NANGLES
LEAF_NODE	900:16	900:16	19	NANGLES
LEAF_NODE	900:23	900:23	18	-
FIELD	900:24	900:24	18	i2
LEAF_NODE	900:24	900:24	19	i2
LEAF_NODE	900:26	900:26	18	)
LEAF_NODE	900:27	900:27	18	%
FIELD	900:28	900:28	18	NANGLES
LEAF_NODE	900:28	900:28	19	NANGLES
LEAF_NODE	900:35	900:35	17	]
REL_OPERATOR	900:37	900:37	16	<
LEAF_NODE	900:37	900:37	17	<
FIELD	900:39	900:39	16	1.5
LEAF_NODE	900:39	900:39	17	1.5
LEAF_NODE	900:42	900:42	14	)
STATEMENTS	901:6	901:6	14	
JUMP_STATEMENT	901:6	901:11	15	break DESTINATION ;
KEYWORD	901:6	901:6	16	break
LEAF_NODE	901:6	901:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	901:11	901:11	16	;
SELECTION	902:4	903:5	11	
KEYWORD	902:4	902:4	12	if
LEAF_NODE	902:4	902:4	13	if
LEAF_NODE	902:7	902:7	12	(
CONDITION	902:8	902:8	12	i1 < i2
EXPR	902:8	902:13	13	i1 < i2
FIELD	902:8	902:8	14	i1
LEAF_NODE	902:8	902:8	15	i1
REL_OPERATOR	902:11	902:11	14	<
LEAF_NODE	902:11	902:11	15	<
FIELD	902:13	902:13	14	i2
LEAF_NODE	902:13	902:13	15	i2
LEAF_NODE	902:15	902:15	12	)
STATEMENTS	903:5	903:5	12	
EXPR_STATEMENT	903:5	904:31	13	oog_table [ i ] = oog_table [ ( i + i1 ) % NANGLES ] ;
EXPR	903:5	903:5	14	oog_table [ i ] = oog_table [ ( i + i1 ) % NANGLES ]
ASSIGN	903:5	904:6	15	oog_table [ i ] = oog_table [ ( i + i1 ) % NANGLES ]
LVAL	903:5	903:5	16	oog_table [ i ]
FIELD	903:5	903:16	17	oog_table [ i ]
LEAF_NODE	903:5	903:5	18	oog_table
LEAF_NODE	903:14	903:14	18	[
EXPR	903:15	903:15	18	i
FIELD	903:15	903:15	19	i
LEAF_NODE	903:15	903:15	20	i
LEAF_NODE	903:16	903:16	18	]
ASSIGN_OP	903:18	903:18	16	=
LEAF_NODE	903:18	903:18	17	=
RVAL	904:6	904:6	16	oog_table [ ( i + i1 ) % NANGLES ]
FIELD	904:6	904:30	17	oog_table [ ( i + i1 ) % NANGLES ]
LEAF_NODE	904:6	904:6	18	oog_table
LEAF_NODE	904:15	904:15	18	[
EXPR	904:16	904:23	18	( i + i1 ) % NANGLES
LEAF_NODE	904:16	904:16	19	(
FIELD	904:17	904:17	19	i
LEAF_NODE	904:17	904:17	20	i
LEAF_NODE	904:18	904:18	19	+
FIELD	904:19	904:19	19	i1
LEAF_NODE	904:19	904:19	20	i1
LEAF_NODE	904:21	904:21	19	)
LEAF_NODE	904:22	904:22	19	%
FIELD	904:23	904:23	19	NANGLES
LEAF_NODE	904:23	904:23	20	NANGLES
LEAF_NODE	904:30	904:30	18	]
LEAF_NODE	904:31	904:31	14	;
SELECTION	905:4	906:5	11	
KEYWORD	905:4	905:4	12	else
LEAF_NODE	905:4	905:4	13	else
STATEMENTS	906:5	906:5	12	
EXPR_STATEMENT	906:5	907:39	13	oog_table [ i ] = oog_table [ ( i + NANGLES - i2 ) % NANGLES ] ;
EXPR	906:5	906:5	14	oog_table [ i ] = oog_table [ ( i + NANGLES - i2 ) % NANGLES ]
ASSIGN	906:5	907:6	15	oog_table [ i ] = oog_table [ ( i + NANGLES - i2 ) % NANGLES ]
LVAL	906:5	906:5	16	oog_table [ i ]
FIELD	906:5	906:16	17	oog_table [ i ]
LEAF_NODE	906:5	906:5	18	oog_table
LEAF_NODE	906:14	906:14	18	[
EXPR	906:15	906:15	18	i
FIELD	906:15	906:15	19	i
LEAF_NODE	906:15	906:15	20	i
LEAF_NODE	906:16	906:16	18	]
ASSIGN_OP	906:18	906:18	16	=
LEAF_NODE	906:18	906:18	17	=
RVAL	907:6	907:6	16	oog_table [ ( i + NANGLES - i2 ) % NANGLES ]
FIELD	907:6	907:38	17	oog_table [ ( i + NANGLES - i2 ) % NANGLES ]
LEAF_NODE	907:6	907:6	18	oog_table
LEAF_NODE	907:15	907:15	18	[
EXPR	907:16	907:31	18	( i + NANGLES - i2 ) % NANGLES
LEAF_NODE	907:16	907:16	19	(
FIELD	907:17	907:17	19	i
LEAF_NODE	907:17	907:17	20	i
LEAF_NODE	907:18	907:18	19	+
FIELD	907:19	907:19	19	NANGLES
LEAF_NODE	907:19	907:19	20	NANGLES
LEAF_NODE	907:26	907:26	19	-
FIELD	907:27	907:27	19	i2
LEAF_NODE	907:27	907:27	20	i2
LEAF_NODE	907:29	907:29	19	)
LEAF_NODE	907:30	907:30	19	%
FIELD	907:31	907:31	19	NANGLES
LEAF_NODE	907:31	907:31	20	NANGLES
LEAF_NODE	907:38	907:38	18	]
LEAF_NODE	907:39	907:39	14	;
LEAF_NODE	908:3	908:3	10	}
EXPR_STATEMENT	909:2	909:17	6	initialized = 1 ;
EXPR	909:2	909:2	7	initialized = 1
ASSIGN	909:2	909:16	8	initialized = 1
LVAL	909:2	909:2	9	initialized
FIELD	909:2	909:2	10	initialized
LEAF_NODE	909:2	909:2	11	initialized
ASSIGN_OP	909:14	909:14	9	=
LEAF_NODE	909:14	909:14	10	=
RVAL	909:16	909:16	9	1
FIELD	909:16	909:16	10	1
LEAF_NODE	909:16	909:16	11	1
LEAF_NODE	909:17	909:17	7	;
LEAF_NODE	910:1	910:1	5	}
EXPR_STATEMENT	911:1	911:23	3	i = ( int ) uv2ang ( u , v ) ;
EXPR	911:1	911:1	4	i = ( int ) uv2ang ( u , v )
ASSIGN	911:1	911:5	5	i = ( int ) uv2ang ( u , v )
LVAL	911:1	911:1	6	i
FIELD	911:1	911:1	7	i
LEAF_NODE	911:1	911:1	8	i
ASSIGN_OP	911:3	911:3	6	=
LEAF_NODE	911:3	911:3	7	=
RVAL	911:5	911:11	6	( int ) uv2ang ( u , v )
LEAF_NODE	911:5	911:5	7	(
TYPE_NAME	911:6	911:6	7	int
LEAF_NODE	911:6	911:6	8	int
LEAF_NODE	911:9	911:9	7	)
FUNCTION_CALL	911:11	911:22	7	uv2ang ( u , v )
CALLEE	911:11	911:11	8	uv2ang
LEAF_NODE	911:11	911:11	9	uv2ang
LEAF_NODE	911:17	911:17	8	(
ARGUMENT	911:18	911:18	8	u
FIELD	911:18	911:18	9	u
LEAF_NODE	911:18	911:18	10	u
LEAF_NODE	911:19	911:19	8	,
ARGUMENT	911:21	911:21	8	v
FIELD	911:21	911:21	9	v
LEAF_NODE	911:21	911:21	10	v
LEAF_NODE	911:22	911:22	8	)
LEAF_NODE	911:23	911:23	4	;
JUMP_STATEMENT	912:1	912:22	3	return ( oog_table [ i ] ) ;
KEYWORD	912:1	912:1	4	return
LEAF_NODE	912:1	912:1	5	return
DESTINATION	912:8	912:8	4	( oog_table [ i ] )
EXPR	912:8	912:21	5	( oog_table [ i ] )
LEAF_NODE	912:8	912:8	6	(
FIELD	912:9	912:20	6	oog_table [ i ]
LEAF_NODE	912:9	912:9	7	oog_table
LEAF_NODE	912:18	912:18	7	[
EXPR	912:19	912:19	7	i
FIELD	912:19	912:19	8	i
LEAF_NODE	912:19	912:19	9	i
LEAF_NODE	912:20	912:20	7	]
LEAF_NODE	912:21	912:21	6	)
LEAF_NODE	912:22	912:22	4	;
LEAF_NODE	913:0	913:0	2	}
FUNCTION_DEF	919:0	938:0	1	
RETURN_TYPE	919:0	921:0	2	static int
LEAF_NODE	919:0	919:0	3	static
TYPE_NAME	921:0	921:0	3	int
LEAF_NODE	921:0	921:0	4	int
FUNCTION_NAME	922:0	922:0	2	uv_encode
LEAF_NODE	922:0	922:0	3	uv_encode
PARAMETER_LIST	922:9	922:36	2	( double u , double v , int em )
LEAF_NODE	922:9	922:9	3	(
PARAMETER_DECL	922:10	922:17	3	double u
TYPE	922:10	922:10	4	double
TYPE_NAME	922:10	922:10	5	double
LEAF_NODE	922:10	922:10	6	double
NAME	922:17	922:17	4	u
LEAF_NODE	922:17	922:17	5	u
LEAF_NODE	922:18	922:18	3	,
PARAMETER_DECL	922:20	922:27	3	double v
TYPE	922:20	922:20	4	double
TYPE_NAME	922:20	922:20	5	double
LEAF_NODE	922:20	922:20	6	double
NAME	922:27	922:27	4	v
LEAF_NODE	922:27	922:27	5	v
LEAF_NODE	922:28	922:28	3	,
PARAMETER_DECL	922:30	922:34	3	int em
TYPE	922:30	922:30	4	int
TYPE_NAME	922:30	922:30	5	int
LEAF_NODE	922:30	922:30	6	int
NAME	922:34	922:34	4	em
LEAF_NODE	922:34	922:34	5	em
LEAF_NODE	922:36	922:36	3	)
LEAF_NODE	923:0	923:0	2	{
STATEMENTS	924:1	937:1	2	
LEAF_NODE	924:1	924:1	3	register
SIMPLE_DECL	924:10	924:20	3	int vi , int ui ;
INIT_DECL_LIST	924:10	924:10	4	int vi , int ui
VAR_DECL	924:10	924:14	5	int vi
TYPE	924:10	924:10	6	int
TYPE_NAME	924:10	924:10	7	int
LEAF_NODE	924:10	924:10	8	int
NAME	924:14	924:14	6	vi
LEAF_NODE	924:14	924:14	7	vi
LEAF_NODE	924:16	924:16	5	,
VAR_DECL	924:10	924:18	5	int ui
TYPE	924:10	924:10	6	int
TYPE_NAME	924:10	924:10	7	int
LEAF_NODE	924:10	924:10	8	int
NAME	924:18	924:18	6	ui
LEAF_NODE	924:18	924:18	7	ui
LEAF_NODE	924:20	924:20	4	;
SELECTION	926:1	927:2	3	
KEYWORD	926:1	926:1	4	if
LEAF_NODE	926:1	926:1	5	if
LEAF_NODE	926:4	926:4	4	(
CONDITION	926:5	926:5	4	v < UV_VSTART
EXPR	926:5	926:9	5	v < UV_VSTART
FIELD	926:5	926:5	6	v
LEAF_NODE	926:5	926:5	7	v
REL_OPERATOR	926:7	926:7	6	<
LEAF_NODE	926:7	926:7	7	<
FIELD	926:9	926:9	6	UV_VSTART
LEAF_NODE	926:9	926:9	7	UV_VSTART
LEAF_NODE	926:18	926:18	4	)
STATEMENTS	927:2	927:2	4	
JUMP_STATEMENT	927:2	927:25	5	return oog_encode ( u , v ) ;
KEYWORD	927:2	927:2	6	return
LEAF_NODE	927:2	927:2	7	return
DESTINATION	927:9	927:9	6	oog_encode ( u , v )
EXPR	927:9	927:9	7	oog_encode ( u , v )
FUNCTION_CALL	927:9	927:24	8	oog_encode ( u , v )
CALLEE	927:9	927:9	9	oog_encode
LEAF_NODE	927:9	927:9	10	oog_encode
LEAF_NODE	927:19	927:19	9	(
ARGUMENT	927:20	927:20	9	u
FIELD	927:20	927:20	10	u
LEAF_NODE	927:20	927:20	11	u
LEAF_NODE	927:21	927:21	9	,
ARGUMENT	927:23	927:23	9	v
FIELD	927:23	927:23	10	v
LEAF_NODE	927:23	927:23	11	v
LEAF_NODE	927:24	927:24	9	)
LEAF_NODE	927:25	927:25	6	;
EXPR_STATEMENT	928:1	928:47	3	vi = itrunc ( ( v - UV_VSTART ) * ( 1. / UV_SQSIZ ) , em ) ;
EXPR	928:1	928:1	4	vi = itrunc ( ( v - UV_VSTART ) * ( 1. / UV_SQSIZ ) , em )
ASSIGN	928:1	928:6	5	vi = itrunc ( ( v - UV_VSTART ) * ( 1. / UV_SQSIZ ) , em )
LVAL	928:1	928:1	6	vi
FIELD	928:1	928:1	7	vi
LEAF_NODE	928:1	928:1	8	vi
ASSIGN_OP	928:4	928:4	6	=
LEAF_NODE	928:4	928:4	7	=
RVAL	928:6	928:6	6	itrunc ( ( v - UV_VSTART ) * ( 1. / UV_SQSIZ ) , em )
FUNCTION_CALL	928:6	928:46	7	itrunc ( ( v - UV_VSTART ) * ( 1. / UV_SQSIZ ) , em )
CALLEE	928:6	928:6	8	itrunc
LEAF_NODE	928:6	928:6	9	itrunc
LEAF_NODE	928:12	928:12	8	(
ARGUMENT	928:13	928:41	8	( v - UV_VSTART ) * ( 1. / UV_SQSIZ )
LEAF_NODE	928:13	928:13	9	(
FIELD	928:14	928:14	9	v
LEAF_NODE	928:14	928:14	10	v
LEAF_NODE	928:16	928:16	9	-
FIELD	928:18	928:18	9	UV_VSTART
LEAF_NODE	928:18	928:18	10	UV_VSTART
LEAF_NODE	928:27	928:27	9	)
LEAF_NODE	928:28	928:28	9	*
LEAF_NODE	928:29	928:29	9	(
FIELD	928:30	928:30	9	1.
LEAF_NODE	928:30	928:30	10	1.
LEAF_NODE	928:32	928:32	9	/
FIELD	928:33	928:33	9	UV_SQSIZ
LEAF_NODE	928:33	928:33	10	UV_SQSIZ
LEAF_NODE	928:41	928:41	9	)
LEAF_NODE	928:42	928:42	8	,
ARGUMENT	928:44	928:44	8	em
FIELD	928:44	928:44	9	em
LEAF_NODE	928:44	928:44	10	em
LEAF_NODE	928:46	928:46	8	)
LEAF_NODE	928:47	928:47	4	;
SELECTION	929:1	930:2	3	
KEYWORD	929:1	929:1	4	if
LEAF_NODE	929:1	929:1	5	if
LEAF_NODE	929:4	929:4	4	(
CONDITION	929:5	929:5	4	vi >= UV_NVS
EXPR	929:5	929:11	5	vi >= UV_NVS
FIELD	929:5	929:5	6	vi
LEAF_NODE	929:5	929:5	7	vi
REL_OPERATOR	929:8	929:8	6	>=
LEAF_NODE	929:8	929:8	7	>=
FIELD	929:11	929:11	6	UV_NVS
LEAF_NODE	929:11	929:11	7	UV_NVS
LEAF_NODE	929:17	929:17	4	)
STATEMENTS	930:2	930:2	4	
JUMP_STATEMENT	930:2	930:25	5	return oog_encode ( u , v ) ;
KEYWORD	930:2	930:2	6	return
LEAF_NODE	930:2	930:2	7	return
DESTINATION	930:9	930:9	6	oog_encode ( u , v )
EXPR	930:9	930:9	7	oog_encode ( u , v )
FUNCTION_CALL	930:9	930:24	8	oog_encode ( u , v )
CALLEE	930:9	930:9	9	oog_encode
LEAF_NODE	930:9	930:9	10	oog_encode
LEAF_NODE	930:19	930:19	9	(
ARGUMENT	930:20	930:20	9	u
FIELD	930:20	930:20	10	u
LEAF_NODE	930:20	930:20	11	u
LEAF_NODE	930:21	930:21	9	,
ARGUMENT	930:23	930:23	9	v
FIELD	930:23	930:23	10	v
LEAF_NODE	930:23	930:23	11	v
LEAF_NODE	930:24	930:24	9	)
LEAF_NODE	930:25	930:25	6	;
SELECTION	931:1	932:2	3	
KEYWORD	931:1	931:1	4	if
LEAF_NODE	931:1	931:1	5	if
LEAF_NODE	931:4	931:4	4	(
CONDITION	931:5	931:5	4	u < uv_row [ vi ] . ustart
EXPR	931:5	931:9	5	u < uv_row [ vi ] . ustart
FIELD	931:5	931:5	6	u
LEAF_NODE	931:5	931:5	7	u
REL_OPERATOR	931:7	931:7	6	<
LEAF_NODE	931:7	931:7	7	<
FIELD	931:9	931:20	6	uv_row [ vi ] . ustart
LEAF_NODE	931:9	931:9	7	uv_row
LEAF_NODE	931:15	931:15	7	[
EXPR	931:16	931:16	7	vi
FIELD	931:16	931:16	8	vi
LEAF_NODE	931:16	931:16	9	vi
LEAF_NODE	931:18	931:18	7	]
LEAF_NODE	931:19	931:19	7	.
LEAF_NODE	931:20	931:20	7	ustart
LEAF_NODE	931:26	931:26	4	)
STATEMENTS	932:2	932:2	4	
JUMP_STATEMENT	932:2	932:25	5	return oog_encode ( u , v ) ;
KEYWORD	932:2	932:2	6	return
LEAF_NODE	932:2	932:2	7	return
DESTINATION	932:9	932:9	6	oog_encode ( u , v )
EXPR	932:9	932:9	7	oog_encode ( u , v )
FUNCTION_CALL	932:9	932:24	8	oog_encode ( u , v )
CALLEE	932:9	932:9	9	oog_encode
LEAF_NODE	932:9	932:9	10	oog_encode
LEAF_NODE	932:19	932:19	9	(
ARGUMENT	932:20	932:20	9	u
FIELD	932:20	932:20	10	u
LEAF_NODE	932:20	932:20	11	u
LEAF_NODE	932:21	932:21	9	,
ARGUMENT	932:23	932:23	9	v
FIELD	932:23	932:23	10	v
LEAF_NODE	932:23	932:23	11	v
LEAF_NODE	932:24	932:24	9	)
LEAF_NODE	932:25	932:25	6	;
EXPR_STATEMENT	933:1	933:55	3	ui = itrunc ( ( u - uv_row [ vi ] . ustart ) * ( 1. / UV_SQSIZ ) , em ) ;
EXPR	933:1	933:1	4	ui = itrunc ( ( u - uv_row [ vi ] . ustart ) * ( 1. / UV_SQSIZ ) , em )
ASSIGN	933:1	933:6	5	ui = itrunc ( ( u - uv_row [ vi ] . ustart ) * ( 1. / UV_SQSIZ ) , em )
LVAL	933:1	933:1	6	ui
FIELD	933:1	933:1	7	ui
LEAF_NODE	933:1	933:1	8	ui
ASSIGN_OP	933:4	933:4	6	=
LEAF_NODE	933:4	933:4	7	=
RVAL	933:6	933:6	6	itrunc ( ( u - uv_row [ vi ] . ustart ) * ( 1. / UV_SQSIZ ) , em )
FUNCTION_CALL	933:6	933:54	7	itrunc ( ( u - uv_row [ vi ] . ustart ) * ( 1. / UV_SQSIZ ) , em )
CALLEE	933:6	933:6	8	itrunc
LEAF_NODE	933:6	933:6	9	itrunc
LEAF_NODE	933:12	933:12	8	(
ARGUMENT	933:13	933:49	8	( u - uv_row [ vi ] . ustart ) * ( 1. / UV_SQSIZ )
LEAF_NODE	933:13	933:13	9	(
FIELD	933:14	933:14	9	u
LEAF_NODE	933:14	933:14	10	u
LEAF_NODE	933:16	933:16	9	-
FIELD	933:18	933:29	9	uv_row [ vi ] . ustart
LEAF_NODE	933:18	933:18	10	uv_row
LEAF_NODE	933:24	933:24	10	[
EXPR	933:25	933:25	10	vi
FIELD	933:25	933:25	11	vi
LEAF_NODE	933:25	933:25	12	vi
LEAF_NODE	933:27	933:27	10	]
LEAF_NODE	933:28	933:28	10	.
LEAF_NODE	933:29	933:29	10	ustart
LEAF_NODE	933:35	933:35	9	)
LEAF_NODE	933:36	933:36	9	*
LEAF_NODE	933:37	933:37	9	(
FIELD	933:38	933:38	9	1.
LEAF_NODE	933:38	933:38	10	1.
LEAF_NODE	933:40	933:40	9	/
FIELD	933:41	933:41	9	UV_SQSIZ
LEAF_NODE	933:41	933:41	10	UV_SQSIZ
LEAF_NODE	933:49	933:49	9	)
LEAF_NODE	933:50	933:50	8	,
ARGUMENT	933:52	933:52	8	em
FIELD	933:52	933:52	9	em
LEAF_NODE	933:52	933:52	10	em
LEAF_NODE	933:54	933:54	8	)
LEAF_NODE	933:55	933:55	4	;
SELECTION	934:1	935:2	3	
KEYWORD	934:1	934:1	4	if
LEAF_NODE	934:1	934:1	5	if
LEAF_NODE	934:4	934:4	4	(
CONDITION	934:5	934:5	4	ui >= uv_row [ vi ] . nus
EXPR	934:5	934:11	5	ui >= uv_row [ vi ] . nus
FIELD	934:5	934:5	6	ui
LEAF_NODE	934:5	934:5	7	ui
REL_OPERATOR	934:8	934:8	6	>=
LEAF_NODE	934:8	934:8	7	>=
FIELD	934:11	934:22	6	uv_row [ vi ] . nus
LEAF_NODE	934:11	934:11	7	uv_row
LEAF_NODE	934:17	934:17	7	[
EXPR	934:18	934:18	7	vi
FIELD	934:18	934:18	8	vi
LEAF_NODE	934:18	934:18	9	vi
LEAF_NODE	934:20	934:20	7	]
LEAF_NODE	934:21	934:21	7	.
LEAF_NODE	934:22	934:22	7	nus
LEAF_NODE	934:25	934:25	4	)
STATEMENTS	935:2	935:2	4	
JUMP_STATEMENT	935:2	935:25	5	return oog_encode ( u , v ) ;
KEYWORD	935:2	935:2	6	return
LEAF_NODE	935:2	935:2	7	return
DESTINATION	935:9	935:9	6	oog_encode ( u , v )
EXPR	935:9	935:9	7	oog_encode ( u , v )
FUNCTION_CALL	935:9	935:24	8	oog_encode ( u , v )
CALLEE	935:9	935:9	9	oog_encode
LEAF_NODE	935:9	935:9	10	oog_encode
LEAF_NODE	935:19	935:19	9	(
ARGUMENT	935:20	935:20	9	u
FIELD	935:20	935:20	10	u
LEAF_NODE	935:20	935:20	11	u
LEAF_NODE	935:21	935:21	9	,
ARGUMENT	935:23	935:23	9	v
FIELD	935:23	935:23	10	v
LEAF_NODE	935:23	935:23	11	v
LEAF_NODE	935:24	935:24	9	)
LEAF_NODE	935:25	935:25	6	;
JUMP_STATEMENT	937:1	937:30	3	return ( uv_row [ vi ] . ncum + ui ) ;
KEYWORD	937:1	937:1	4	return
LEAF_NODE	937:1	937:1	5	return
DESTINATION	937:8	937:8	4	( uv_row [ vi ] . ncum + ui )
EXPR	937:8	937:29	5	( uv_row [ vi ] . ncum + ui )
LEAF_NODE	937:8	937:8	6	(
FIELD	937:9	937:20	6	uv_row [ vi ] . ncum
LEAF_NODE	937:9	937:9	7	uv_row
LEAF_NODE	937:15	937:15	7	[
EXPR	937:16	937:16	7	vi
FIELD	937:16	937:16	8	vi
LEAF_NODE	937:16	937:16	9	vi
LEAF_NODE	937:18	937:18	7	]
LEAF_NODE	937:19	937:19	7	.
LEAF_NODE	937:20	937:20	7	ncum
LEAF_NODE	937:25	937:25	6	+
FIELD	937:27	937:27	6	ui
LEAF_NODE	937:27	937:27	7	ui
LEAF_NODE	937:29	937:29	6	)
LEAF_NODE	937:30	937:30	4	;
LEAF_NODE	938:0	938:0	2	}
FUNCTION_DEF	941:0	970:0	1	
RETURN_TYPE	941:0	943:0	2	static int
LEAF_NODE	941:0	941:0	3	static
TYPE_NAME	943:0	943:0	3	int
LEAF_NODE	943:0	943:0	4	int
FUNCTION_NAME	944:0	944:0	2	uv_decode
LEAF_NODE	944:0	944:0	3	uv_decode
PARAMETER_LIST	944:9	944:39	2	( double * up , double * vp , int c )
LEAF_NODE	944:9	944:9	3	(
PARAMETER_DECL	944:10	944:18	3	double * up
TYPE	944:10	944:17	4	double *
TYPE_NAME	944:10	944:10	5	double
LEAF_NODE	944:10	944:10	6	double
POINTER	944:17	944:17	5	*
LEAF_NODE	944:17	944:17	6	*
NAME	944:18	944:18	4	up
LEAF_NODE	944:18	944:18	5	up
LEAF_NODE	944:20	944:20	3	,
PARAMETER_DECL	944:22	944:30	3	double * vp
TYPE	944:22	944:29	4	double *
TYPE_NAME	944:22	944:22	5	double
LEAF_NODE	944:22	944:22	6	double
POINTER	944:29	944:29	5	*
LEAF_NODE	944:29	944:29	6	*
NAME	944:30	944:30	4	vp
LEAF_NODE	944:30	944:30	5	vp
LEAF_NODE	944:32	944:32	3	,
PARAMETER_DECL	944:34	944:38	3	int c
TYPE	944:34	944:34	4	int
TYPE_NAME	944:34	944:34	5	int
LEAF_NODE	944:34	944:34	6	int
NAME	944:38	944:38	4	c
LEAF_NODE	944:38	944:38	5	c
LEAF_NODE	944:39	944:39	3	)
LEAF_NODE	945:0	945:0	2	{
STATEMENTS	946:1	969:1	2	
SIMPLE_DECL	946:1	946:17	3	int upper , int lower ;
INIT_DECL_LIST	946:1	946:1	4	int upper , int lower
VAR_DECL	946:1	946:5	5	int upper
TYPE	946:1	946:1	6	int
TYPE_NAME	946:1	946:1	7	int
LEAF_NODE	946:1	946:1	8	int
NAME	946:5	946:5	6	upper
LEAF_NODE	946:5	946:5	7	upper
LEAF_NODE	946:10	946:10	5	,
VAR_DECL	946:1	946:12	5	int lower
TYPE	946:1	946:1	6	int
TYPE_NAME	946:1	946:1	7	int
LEAF_NODE	946:1	946:1	8	int
NAME	946:12	946:12	6	lower
LEAF_NODE	946:12	946:12	7	lower
LEAF_NODE	946:17	946:17	4	;
LEAF_NODE	947:1	947:1	3	register
SIMPLE_DECL	947:10	947:20	3	int ui , int vi ;
INIT_DECL_LIST	947:10	947:10	4	int ui , int vi
VAR_DECL	947:10	947:14	5	int ui
TYPE	947:10	947:10	6	int
TYPE_NAME	947:10	947:10	7	int
LEAF_NODE	947:10	947:10	8	int
NAME	947:14	947:14	6	ui
LEAF_NODE	947:14	947:14	7	ui
LEAF_NODE	947:16	947:16	5	,
VAR_DECL	947:10	947:18	5	int vi
TYPE	947:10	947:10	6	int
TYPE_NAME	947:10	947:10	7	int
LEAF_NODE	947:10	947:10	8	int
NAME	947:18	947:18	6	vi
LEAF_NODE	947:18	947:18	7	vi
LEAF_NODE	947:20	947:20	4	;
SELECTION	949:1	950:2	3	
KEYWORD	949:1	949:1	4	if
LEAF_NODE	949:1	949:1	5	if
LEAF_NODE	949:4	949:4	4	(
CONDITION	949:5	949:5	4	c < 0 || c >= UV_NDIVS
EXPR	949:5	949:5	5	c < 0 || c >= UV_NDIVS
OR	949:5	949:14	6	c < 0 || c >= UV_NDIVS
EXPR	949:5	949:9	7	c < 0
FIELD	949:5	949:5	8	c
LEAF_NODE	949:5	949:5	9	c
REL_OPERATOR	949:7	949:7	8	<
LEAF_NODE	949:7	949:7	9	<
FIELD	949:9	949:9	8	0
LEAF_NODE	949:9	949:9	9	0
LEAF_NODE	949:11	949:11	7	||
EXPR	949:14	949:19	7	c >= UV_NDIVS
FIELD	949:14	949:14	8	c
LEAF_NODE	949:14	949:14	9	c
REL_OPERATOR	949:16	949:16	8	>=
LEAF_NODE	949:16	949:16	9	>=
FIELD	949:19	949:19	8	UV_NDIVS
LEAF_NODE	949:19	949:19	9	UV_NDIVS
LEAF_NODE	949:27	949:27	4	)
STATEMENTS	950:2	950:2	4	
JUMP_STATEMENT	950:2	950:13	5	return ( - 1 ) ;
KEYWORD	950:2	950:2	6	return
LEAF_NODE	950:2	950:2	7	return
DESTINATION	950:9	950:9	6	( - 1 )
EXPR	950:9	950:12	7	( - 1 )
LEAF_NODE	950:9	950:9	8	(
UNARY_EXPR	950:10	950:11	8	- 1
UNARY_OPERATOR	950:10	950:10	9	-
LEAF_NODE	950:10	950:10	10	-
FIELD	950:11	950:11	9	1
LEAF_NODE	950:11	950:11	10	1
LEAF_NODE	950:12	950:12	8	)
LEAF_NODE	950:13	950:13	6	;
EXPR_STATEMENT	951:1	951:10	3	lower = 0 ;
EXPR	951:1	951:1	4	lower = 0
ASSIGN	951:1	951:9	5	lower = 0
LVAL	951:1	951:1	6	lower
FIELD	951:1	951:1	7	lower
LEAF_NODE	951:1	951:1	8	lower
ASSIGN_OP	951:7	951:7	6	=
LEAF_NODE	951:7	951:7	7	=
RVAL	951:9	951:9	6	0
FIELD	951:9	951:9	7	0
LEAF_NODE	951:9	951:9	8	0
LEAF_NODE	951:10	951:10	4	;
EXPR_STATEMENT	952:1	952:15	3	upper = UV_NVS ;
EXPR	952:1	952:1	4	upper = UV_NVS
ASSIGN	952:1	952:9	5	upper = UV_NVS
LVAL	952:1	952:1	6	upper
FIELD	952:1	952:1	7	upper
LEAF_NODE	952:1	952:1	8	upper
ASSIGN_OP	952:7	952:7	6	=
LEAF_NODE	952:7	952:7	7	=
RVAL	952:9	952:9	6	UV_NVS
FIELD	952:9	952:9	7	UV_NVS
LEAF_NODE	952:9	952:9	8	UV_NVS
LEAF_NODE	952:15	952:15	4	;
ITERATION	953:1	953:27	3	
KEYWORD	953:1	953:1	4	while
LEAF_NODE	953:1	953:1	5	while
LEAF_NODE	953:7	953:7	4	(
CONDITION	953:8	953:8	4	upper - lower > 1
EXPR	953:8	953:24	5	upper - lower > 1
FIELD	953:8	953:8	6	upper
LEAF_NODE	953:8	953:8	7	upper
LEAF_NODE	953:14	953:14	6	-
FIELD	953:16	953:16	6	lower
LEAF_NODE	953:16	953:16	7	lower
REL_OPERATOR	953:22	953:22	6	>
LEAF_NODE	953:22	953:22	7	>
FIELD	953:24	953:24	6	1
LEAF_NODE	953:24	953:24	7	1
LEAF_NODE	953:25	953:25	4	)
STATEMENTS	953:27	964:1	4	
LEAF_NODE	953:27	953:27	5	{
STATEMENTS	954:2	960:2	5	
EXPR_STATEMENT	954:2	954:27	6	vi = ( lower + upper ) >> 1 ;
EXPR	954:2	954:2	7	vi = ( lower + upper ) >> 1
ASSIGN	954:2	954:7	8	vi = ( lower + upper ) >> 1
LVAL	954:2	954:2	9	vi
FIELD	954:2	954:2	10	vi
LEAF_NODE	954:2	954:2	11	vi
ASSIGN_OP	954:5	954:5	9	=
LEAF_NODE	954:5	954:5	10	=
RVAL	954:7	954:26	9	( lower + upper ) >> 1
LEAF_NODE	954:7	954:7	10	(
FIELD	954:8	954:8	10	lower
LEAF_NODE	954:8	954:8	11	lower
LEAF_NODE	954:14	954:14	10	+
FIELD	954:16	954:16	10	upper
LEAF_NODE	954:16	954:16	11	upper
LEAF_NODE	954:21	954:21	10	)
LEAF_NODE	954:23	954:23	10	>>
FIELD	954:26	954:26	10	1
LEAF_NODE	954:26	954:26	11	1
LEAF_NODE	954:27	954:27	7	;
EXPR_STATEMENT	955:2	955:26	6	ui = c - uv_row [ vi ] . ncum ;
EXPR	955:2	955:2	7	ui = c - uv_row [ vi ] . ncum
ASSIGN	955:2	955:7	8	ui = c - uv_row [ vi ] . ncum
LVAL	955:2	955:2	9	ui
FIELD	955:2	955:2	10	ui
LEAF_NODE	955:2	955:2	11	ui
ASSIGN_OP	955:5	955:5	9	=
LEAF_NODE	955:5	955:5	10	=
RVAL	955:7	955:11	9	c - uv_row [ vi ] . ncum
FIELD	955:7	955:7	10	c
LEAF_NODE	955:7	955:7	11	c
LEAF_NODE	955:9	955:9	10	-
FIELD	955:11	955:22	10	uv_row [ vi ] . ncum
LEAF_NODE	955:11	955:11	11	uv_row
LEAF_NODE	955:17	955:17	11	[
EXPR	955:18	955:18	11	vi
FIELD	955:18	955:18	12	vi
LEAF_NODE	955:18	955:18	13	vi
LEAF_NODE	955:20	955:20	11	]
LEAF_NODE	955:21	955:21	11	.
LEAF_NODE	955:22	955:22	11	ncum
LEAF_NODE	955:26	955:26	7	;
SELECTION	956:2	957:3	6	
KEYWORD	956:2	956:2	7	if
LEAF_NODE	956:2	956:2	8	if
LEAF_NODE	956:5	956:5	7	(
CONDITION	956:6	956:6	7	ui > 0
EXPR	956:6	956:11	8	ui > 0
FIELD	956:6	956:6	9	ui
LEAF_NODE	956:6	956:6	10	ui
REL_OPERATOR	956:9	956:9	9	>
LEAF_NODE	956:9	956:9	10	>
FIELD	956:11	956:11	9	0
LEAF_NODE	956:11	956:11	10	0
LEAF_NODE	956:12	956:12	7	)
STATEMENTS	957:3	957:3	7	
EXPR_STATEMENT	957:3	957:13	8	lower = vi ;
EXPR	957:3	957:3	9	lower = vi
ASSIGN	957:3	957:11	10	lower = vi
LVAL	957:3	957:3	11	lower
FIELD	957:3	957:3	12	lower
LEAF_NODE	957:3	957:3	13	lower
ASSIGN_OP	957:9	957:9	11	=
LEAF_NODE	957:9	957:9	12	=
RVAL	957:11	957:11	11	vi
FIELD	957:11	957:11	12	vi
LEAF_NODE	957:11	957:11	13	vi
LEAF_NODE	957:13	957:13	9	;
SELECTION	958:2	958:7	6	
KEYWORD	958:2	958:2	7	else
LEAF_NODE	958:2	958:2	8	else
STATEMENTS	958:7	958:7	7	
SELECTION	958:7	959:3	8	
KEYWORD	958:7	958:7	9	if
LEAF_NODE	958:7	958:7	10	if
LEAF_NODE	958:10	958:10	9	(
CONDITION	958:11	958:11	9	ui < 0
EXPR	958:11	958:16	10	ui < 0
FIELD	958:11	958:11	11	ui
LEAF_NODE	958:11	958:11	12	ui
REL_OPERATOR	958:14	958:14	11	<
LEAF_NODE	958:14	958:14	12	<
FIELD	958:16	958:16	11	0
LEAF_NODE	958:16	958:16	12	0
LEAF_NODE	958:17	958:17	9	)
STATEMENTS	959:3	959:3	9	
EXPR_STATEMENT	959:3	959:13	10	upper = vi ;
EXPR	959:3	959:3	11	upper = vi
ASSIGN	959:3	959:11	12	upper = vi
LVAL	959:3	959:3	13	upper
FIELD	959:3	959:3	14	upper
LEAF_NODE	959:3	959:3	15	upper
ASSIGN_OP	959:9	959:9	13	=
LEAF_NODE	959:9	959:9	14	=
RVAL	959:11	959:11	13	vi
FIELD	959:11	959:11	14	vi
LEAF_NODE	959:11	959:11	15	vi
LEAF_NODE	959:13	959:13	11	;
SELECTION	960:2	960:7	6	
KEYWORD	960:2	960:2	7	else
LEAF_NODE	960:2	960:2	8	else
STATEMENTS	960:7	963:2	7	
LEAF_NODE	960:7	960:7	8	{
STATEMENTS	961:3	962:3	8	
EXPR_STATEMENT	961:3	961:13	9	lower = vi ;
EXPR	961:3	961:3	10	lower = vi
ASSIGN	961:3	961:11	11	lower = vi
LVAL	961:3	961:3	12	lower
FIELD	961:3	961:3	13	lower
LEAF_NODE	961:3	961:3	14	lower
ASSIGN_OP	961:9	961:9	12	=
LEAF_NODE	961:9	961:9	13	=
RVAL	961:11	961:11	12	vi
FIELD	961:11	961:11	13	vi
LEAF_NODE	961:11	961:11	14	vi
LEAF_NODE	961:13	961:13	10	;
JUMP_STATEMENT	962:3	962:8	9	break DESTINATION ;
KEYWORD	962:3	962:3	10	break
LEAF_NODE	962:3	962:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	962:8	962:8	10	;
LEAF_NODE	963:2	963:2	8	}
LEAF_NODE	964:1	964:1	5	}
EXPR_STATEMENT	965:1	965:11	3	vi = lower ;
EXPR	965:1	965:1	4	vi = lower
ASSIGN	965:1	965:6	5	vi = lower
LVAL	965:1	965:1	6	vi
FIELD	965:1	965:1	7	vi
LEAF_NODE	965:1	965:1	8	vi
ASSIGN_OP	965:4	965:4	6	=
LEAF_NODE	965:4	965:4	7	=
RVAL	965:6	965:6	6	lower
FIELD	965:6	965:6	7	lower
LEAF_NODE	965:6	965:6	8	lower
LEAF_NODE	965:11	965:11	4	;
EXPR_STATEMENT	966:1	966:25	3	ui = c - uv_row [ vi ] . ncum ;
EXPR	966:1	966:1	4	ui = c - uv_row [ vi ] . ncum
ASSIGN	966:1	966:6	5	ui = c - uv_row [ vi ] . ncum
LVAL	966:1	966:1	6	ui
FIELD	966:1	966:1	7	ui
LEAF_NODE	966:1	966:1	8	ui
ASSIGN_OP	966:4	966:4	6	=
LEAF_NODE	966:4	966:4	7	=
RVAL	966:6	966:10	6	c - uv_row [ vi ] . ncum
FIELD	966:6	966:6	7	c
LEAF_NODE	966:6	966:6	8	c
LEAF_NODE	966:8	966:8	7	-
FIELD	966:10	966:21	7	uv_row [ vi ] . ncum
LEAF_NODE	966:10	966:10	8	uv_row
LEAF_NODE	966:16	966:16	8	[
EXPR	966:17	966:17	8	vi
FIELD	966:17	966:17	9	vi
LEAF_NODE	966:17	966:17	10	vi
LEAF_NODE	966:19	966:19	8	]
LEAF_NODE	966:20	966:20	8	.
LEAF_NODE	966:21	966:21	8	ncum
LEAF_NODE	966:25	966:25	4	;
EXPR_STATEMENT	967:1	967:43	3	* up = uv_row [ vi ] . ustart + ( ui + .5 ) * UV_SQSIZ ;
EXPR	967:1	967:1	4	* up = uv_row [ vi ] . ustart + ( ui + .5 ) * UV_SQSIZ
ASSIGN	967:1	967:7	5	* up = uv_row [ vi ] . ustart + ( ui + .5 ) * UV_SQSIZ
LVAL	967:1	967:1	6	* up
UNARY_EXPR	967:1	967:2	7	* up
UNARY_OPERATOR	967:1	967:1	8	*
LEAF_NODE	967:1	967:1	9	*
FIELD	967:2	967:2	8	up
LEAF_NODE	967:2	967:2	9	up
ASSIGN_OP	967:5	967:5	6	=
LEAF_NODE	967:5	967:5	7	=
RVAL	967:7	967:35	6	uv_row [ vi ] . ustart + ( ui + .5 ) * UV_SQSIZ
FIELD	967:7	967:18	7	uv_row [ vi ] . ustart
LEAF_NODE	967:7	967:7	8	uv_row
LEAF_NODE	967:13	967:13	8	[
EXPR	967:14	967:14	8	vi
FIELD	967:14	967:14	9	vi
LEAF_NODE	967:14	967:14	10	vi
LEAF_NODE	967:16	967:16	8	]
LEAF_NODE	967:17	967:17	8	.
LEAF_NODE	967:18	967:18	8	ustart
LEAF_NODE	967:25	967:25	7	+
LEAF_NODE	967:27	967:27	7	(
FIELD	967:28	967:28	7	ui
LEAF_NODE	967:28	967:28	8	ui
LEAF_NODE	967:30	967:30	7	+
FIELD	967:31	967:31	7	.5
LEAF_NODE	967:31	967:31	8	.5
LEAF_NODE	967:33	967:33	7	)
LEAF_NODE	967:34	967:34	7	*
FIELD	967:35	967:35	7	UV_SQSIZ
LEAF_NODE	967:35	967:35	8	UV_SQSIZ
LEAF_NODE	967:43	967:43	4	;
EXPR_STATEMENT	968:1	968:35	3	* vp = UV_VSTART + ( vi + .5 ) * UV_SQSIZ ;
EXPR	968:1	968:1	4	* vp = UV_VSTART + ( vi + .5 ) * UV_SQSIZ
ASSIGN	968:1	968:7	5	* vp = UV_VSTART + ( vi + .5 ) * UV_SQSIZ
LVAL	968:1	968:1	6	* vp
UNARY_EXPR	968:1	968:2	7	* vp
UNARY_OPERATOR	968:1	968:1	8	*
LEAF_NODE	968:1	968:1	9	*
FIELD	968:2	968:2	8	vp
LEAF_NODE	968:2	968:2	9	vp
ASSIGN_OP	968:5	968:5	6	=
LEAF_NODE	968:5	968:5	7	=
RVAL	968:7	968:27	6	UV_VSTART + ( vi + .5 ) * UV_SQSIZ
FIELD	968:7	968:7	7	UV_VSTART
LEAF_NODE	968:7	968:7	8	UV_VSTART
LEAF_NODE	968:17	968:17	7	+
LEAF_NODE	968:19	968:19	7	(
FIELD	968:20	968:20	7	vi
LEAF_NODE	968:20	968:20	8	vi
LEAF_NODE	968:22	968:22	7	+
FIELD	968:23	968:23	7	.5
LEAF_NODE	968:23	968:23	8	.5
LEAF_NODE	968:25	968:25	7	)
LEAF_NODE	968:26	968:26	7	*
FIELD	968:27	968:27	7	UV_SQSIZ
LEAF_NODE	968:27	968:27	8	UV_SQSIZ
LEAF_NODE	968:35	968:35	4	;
JUMP_STATEMENT	969:1	969:11	3	return ( 0 ) ;
KEYWORD	969:1	969:1	4	return
LEAF_NODE	969:1	969:1	5	return
DESTINATION	969:8	969:8	4	( 0 )
EXPR	969:8	969:10	5	( 0 )
LEAF_NODE	969:8	969:8	6	(
FIELD	969:9	969:9	6	0
LEAF_NODE	969:9	969:9	7	0
LEAF_NODE	969:10	969:10	6	)
LEAF_NODE	969:11	969:11	4	;
LEAF_NODE	970:0	970:0	2	}
FUNCTION_DEF	973:0	998:0	1	
RETURN_TYPE	973:0	975:0	2	static void
LEAF_NODE	973:0	973:0	3	static
TYPE_NAME	975:0	975:0	3	void
LEAF_NODE	975:0	975:0	4	void
FUNCTION_NAME	976:0	976:0	2	LogLuv24toXYZ
LEAF_NODE	976:0	976:0	3	LogLuv24toXYZ
PARAMETER_LIST	976:13	976:36	2	( uint32 p , float [ 3 ] XYZ )
LEAF_NODE	976:13	976:13	3	(
PARAMETER_DECL	976:14	976:21	3	uint32 p
TYPE	976:14	976:14	4	uint32
TYPE_NAME	976:14	976:14	5	uint32
LEAF_NODE	976:14	976:14	6	uint32
NAME	976:21	976:21	4	p
LEAF_NODE	976:21	976:21	5	p
LEAF_NODE	976:22	976:22	3	,
PARAMETER_DECL	976:24	976:30	3	float [ 3 ] XYZ
TYPE	976:24	976:33	4	float [ 3 ]
TYPE_NAME	976:24	976:24	5	float
LEAF_NODE	976:24	976:24	6	float
TYPE_SUFFIX	976:33	976:35	5	[ 3 ]
LEAF_NODE	976:33	976:33	6	[
FIELD	976:34	976:34	6	3
LEAF_NODE	976:34	976:34	7	3
LEAF_NODE	976:35	976:35	6	]
NAME	976:30	976:30	4	XYZ
LEAF_NODE	976:30	976:30	5	XYZ
LEAF_NODE	976:36	976:36	3	)
LEAF_NODE	977:0	977:0	2	{
STATEMENTS	978:1	997:33	2	
SIMPLE_DECL	978:1	978:7	3	int Ce ;
VAR_DECL	978:1	978:5	4	int Ce
TYPE	978:1	978:1	5	int
TYPE_NAME	978:1	978:1	6	int
LEAF_NODE	978:1	978:1	7	int
NAME	978:5	978:5	5	Ce
LEAF_NODE	978:5	978:5	6	Ce
LEAF_NODE	978:7	978:7	4	;
SIMPLE_DECL	979:1	979:24	3	double L , double u , double v , double s , double x , double y ;
INIT_DECL_LIST	979:1	979:1	4	double L , double u , double v , double s , double x , double y
VAR_DECL	979:1	979:8	5	double L
TYPE	979:1	979:1	6	double
TYPE_NAME	979:1	979:1	7	double
LEAF_NODE	979:1	979:1	8	double
NAME	979:8	979:8	6	L
LEAF_NODE	979:8	979:8	7	L
LEAF_NODE	979:9	979:9	5	,
INIT_DECL_LIST	979:1	979:1	5	double u , double v , double s , double x , double y
VAR_DECL	979:1	979:11	6	double u
TYPE	979:1	979:1	7	double
TYPE_NAME	979:1	979:1	8	double
LEAF_NODE	979:1	979:1	9	double
NAME	979:11	979:11	7	u
LEAF_NODE	979:11	979:11	8	u
LEAF_NODE	979:12	979:12	6	,
INIT_DECL_LIST	979:1	979:1	6	double v , double s , double x , double y
VAR_DECL	979:1	979:14	7	double v
TYPE	979:1	979:1	8	double
TYPE_NAME	979:1	979:1	9	double
LEAF_NODE	979:1	979:1	10	double
NAME	979:14	979:14	8	v
LEAF_NODE	979:14	979:14	9	v
LEAF_NODE	979:15	979:15	7	,
INIT_DECL_LIST	979:1	979:1	7	double s , double x , double y
VAR_DECL	979:1	979:17	8	double s
TYPE	979:1	979:1	9	double
TYPE_NAME	979:1	979:1	10	double
LEAF_NODE	979:1	979:1	11	double
NAME	979:17	979:17	9	s
LEAF_NODE	979:17	979:17	10	s
LEAF_NODE	979:18	979:18	8	,
INIT_DECL_LIST	979:1	979:1	8	double x , double y
VAR_DECL	979:1	979:20	9	double x
TYPE	979:1	979:1	10	double
TYPE_NAME	979:1	979:1	11	double
LEAF_NODE	979:1	979:1	12	double
NAME	979:20	979:20	10	x
LEAF_NODE	979:20	979:20	11	x
LEAF_NODE	979:21	979:21	9	,
VAR_DECL	979:1	979:23	9	double y
TYPE	979:1	979:1	10	double
TYPE_NAME	979:1	979:1	11	double
LEAF_NODE	979:1	979:1	12	double
NAME	979:23	979:23	10	y
LEAF_NODE	979:23	979:23	11	y
LEAF_NODE	979:24	979:24	4	;
EXPR_STATEMENT	981:1	981:29	3	L = LogL10toY ( p >> 14 & 0x3ff ) ;
EXPR	981:1	981:1	4	L = LogL10toY ( p >> 14 & 0x3ff )
ASSIGN	981:1	981:5	5	L = LogL10toY ( p >> 14 & 0x3ff )
LVAL	981:1	981:1	6	L
FIELD	981:1	981:1	7	L
LEAF_NODE	981:1	981:1	8	L
ASSIGN_OP	981:3	981:3	6	=
LEAF_NODE	981:3	981:3	7	=
RVAL	981:5	981:5	6	LogL10toY ( p >> 14 & 0x3ff )
FUNCTION_CALL	981:5	981:28	7	LogL10toY ( p >> 14 & 0x3ff )
CALLEE	981:5	981:5	8	LogL10toY
LEAF_NODE	981:5	981:5	9	LogL10toY
LEAF_NODE	981:14	981:14	8	(
ARGUMENT	981:15	981:23	8	p >> 14 & 0x3ff
FIELD	981:15	981:15	9	p
LEAF_NODE	981:15	981:15	10	p
LEAF_NODE	981:16	981:16	9	>>
FIELD	981:18	981:18	9	14
LEAF_NODE	981:18	981:18	10	14
LEAF_NODE	981:21	981:21	9	&
FIELD	981:23	981:23	9	0x3ff
LEAF_NODE	981:23	981:23	10	0x3ff
LEAF_NODE	981:28	981:28	8	)
LEAF_NODE	981:29	981:29	4	;
SELECTION	982:1	982:14	3	
KEYWORD	982:1	982:1	4	if
LEAF_NODE	982:1	982:1	5	if
LEAF_NODE	982:4	982:4	4	(
CONDITION	982:5	982:5	4	L <= 0.
EXPR	982:5	982:10	5	L <= 0.
FIELD	982:5	982:5	6	L
LEAF_NODE	982:5	982:5	7	L
REL_OPERATOR	982:7	982:7	6	<=
LEAF_NODE	982:7	982:7	7	<=
FIELD	982:10	982:10	6	0.
LEAF_NODE	982:10	982:10	7	0.
LEAF_NODE	982:12	982:12	4	)
STATEMENTS	982:14	985:1	4	
LEAF_NODE	982:14	982:14	5	{
STATEMENTS	983:2	984:2	5	
EXPR_STATEMENT	983:2	983:31	6	XYZ [ 0 ] = XYZ [ 1 ] = XYZ [ 2 ] = 0. ;
EXPR	983:2	983:2	7	XYZ [ 0 ] = XYZ [ 1 ] = XYZ [ 2 ] = 0.
ASSIGN	983:2	983:11	8	XYZ [ 0 ] = XYZ [ 1 ] = XYZ [ 2 ] = 0.
LVAL	983:2	983:2	9	XYZ [ 0 ]
FIELD	983:2	983:7	10	XYZ [ 0 ]
LEAF_NODE	983:2	983:2	11	XYZ
LEAF_NODE	983:5	983:5	11	[
EXPR	983:6	983:6	11	0
FIELD	983:6	983:6	12	0
LEAF_NODE	983:6	983:6	13	0
LEAF_NODE	983:7	983:7	11	]
ASSIGN_OP	983:9	983:9	9	=
LEAF_NODE	983:9	983:9	10	=
RVAL	983:11	983:11	9	XYZ [ 1 ] = XYZ [ 2 ] = 0.
ASSIGN	983:11	983:20	10	XYZ [ 1 ] = XYZ [ 2 ] = 0.
LVAL	983:11	983:11	11	XYZ [ 1 ]
FIELD	983:11	983:16	12	XYZ [ 1 ]
LEAF_NODE	983:11	983:11	13	XYZ
LEAF_NODE	983:14	983:14	13	[
EXPR	983:15	983:15	13	1
FIELD	983:15	983:15	14	1
LEAF_NODE	983:15	983:15	15	1
LEAF_NODE	983:16	983:16	13	]
ASSIGN_OP	983:18	983:18	11	=
LEAF_NODE	983:18	983:18	12	=
RVAL	983:20	983:20	11	XYZ [ 2 ] = 0.
ASSIGN	983:20	983:29	12	XYZ [ 2 ] = 0.
LVAL	983:20	983:20	13	XYZ [ 2 ]
FIELD	983:20	983:25	14	XYZ [ 2 ]
LEAF_NODE	983:20	983:20	15	XYZ
LEAF_NODE	983:23	983:23	15	[
EXPR	983:24	983:24	15	2
FIELD	983:24	983:24	16	2
LEAF_NODE	983:24	983:24	17	2
LEAF_NODE	983:25	983:25	15	]
ASSIGN_OP	983:27	983:27	13	=
LEAF_NODE	983:27	983:27	14	=
RVAL	983:29	983:29	13	0.
FIELD	983:29	983:29	14	0.
LEAF_NODE	983:29	983:29	15	0.
LEAF_NODE	983:31	983:31	7	;
JUMP_STATEMENT	984:2	984:8	6	return DESTINATION ;
KEYWORD	984:2	984:2	7	return
LEAF_NODE	984:2	984:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	984:8	984:8	7	;
LEAF_NODE	985:1	985:1	5	}
EXPR_STATEMENT	987:1	987:16	3	Ce = p & 0x3fff ;
EXPR	987:1	987:1	4	Ce = p & 0x3fff
ASSIGN	987:1	987:6	5	Ce = p & 0x3fff
LVAL	987:1	987:1	6	Ce
FIELD	987:1	987:1	7	Ce
LEAF_NODE	987:1	987:1	8	Ce
ASSIGN_OP	987:4	987:4	6	=
LEAF_NODE	987:4	987:4	7	=
RVAL	987:6	987:10	6	p & 0x3fff
FIELD	987:6	987:6	7	p
LEAF_NODE	987:6	987:6	8	p
LEAF_NODE	987:8	987:8	7	&
FIELD	987:10	987:10	7	0x3fff
LEAF_NODE	987:10	987:10	8	0x3fff
LEAF_NODE	987:16	987:16	4	;
SELECTION	988:1	988:32	3	
KEYWORD	988:1	988:1	4	if
LEAF_NODE	988:1	988:1	5	if
LEAF_NODE	988:4	988:4	4	(
CONDITION	988:5	988:5	4	uv_decode ( & u , & v , Ce ) < 0
EXPR	988:5	988:29	5	uv_decode ( & u , & v , Ce ) < 0
FUNCTION_CALL	988:5	988:25	6	uv_decode ( & u , & v , Ce )
CALLEE	988:5	988:5	7	uv_decode
LEAF_NODE	988:5	988:5	8	uv_decode
LEAF_NODE	988:14	988:14	7	(
ARGUMENT	988:15	988:15	7	& u
UNARY_EXPR	988:15	988:16	8	& u
UNARY_OPERATOR	988:15	988:15	9	&
LEAF_NODE	988:15	988:15	10	&
FIELD	988:16	988:16	9	u
LEAF_NODE	988:16	988:16	10	u
LEAF_NODE	988:17	988:17	7	,
ARGUMENT	988:19	988:19	7	& v
UNARY_EXPR	988:19	988:20	8	& v
UNARY_OPERATOR	988:19	988:19	9	&
LEAF_NODE	988:19	988:19	10	&
FIELD	988:20	988:20	9	v
LEAF_NODE	988:20	988:20	10	v
LEAF_NODE	988:21	988:21	7	,
ARGUMENT	988:23	988:23	7	Ce
FIELD	988:23	988:23	8	Ce
LEAF_NODE	988:23	988:23	9	Ce
LEAF_NODE	988:25	988:25	7	)
REL_OPERATOR	988:27	988:27	6	<
LEAF_NODE	988:27	988:27	7	<
FIELD	988:29	988:29	6	0
LEAF_NODE	988:29	988:29	7	0
LEAF_NODE	988:30	988:30	4	)
STATEMENTS	988:32	990:1	4	
LEAF_NODE	988:32	988:32	5	{
STATEMENTS	989:2	989:13	5	
EXPR_STATEMENT	989:2	989:11	6	u = U_NEU ;
EXPR	989:2	989:2	7	u = U_NEU
ASSIGN	989:2	989:6	8	u = U_NEU
LVAL	989:2	989:2	9	u
FIELD	989:2	989:2	10	u
LEAF_NODE	989:2	989:2	11	u
ASSIGN_OP	989:4	989:4	9	=
LEAF_NODE	989:4	989:4	10	=
RVAL	989:6	989:6	9	U_NEU
FIELD	989:6	989:6	10	U_NEU
LEAF_NODE	989:6	989:6	11	U_NEU
LEAF_NODE	989:11	989:11	7	;
EXPR_STATEMENT	989:13	989:22	6	v = V_NEU ;
EXPR	989:13	989:13	7	v = V_NEU
ASSIGN	989:13	989:17	8	v = V_NEU
LVAL	989:13	989:13	9	v
FIELD	989:13	989:13	10	v
LEAF_NODE	989:13	989:13	11	v
ASSIGN_OP	989:15	989:15	9	=
LEAF_NODE	989:15	989:15	10	=
RVAL	989:17	989:17	9	V_NEU
FIELD	989:17	989:17	10	V_NEU
LEAF_NODE	989:17	989:17	11	V_NEU
LEAF_NODE	989:22	989:22	7	;
LEAF_NODE	990:1	990:1	5	}
EXPR_STATEMENT	991:1	991:28	3	s = 1. / ( 6. * u - 16. * v + 12. ) ;
EXPR	991:1	991:1	4	s = 1. / ( 6. * u - 16. * v + 12. )
ASSIGN	991:1	991:5	5	s = 1. / ( 6. * u - 16. * v + 12. )
LVAL	991:1	991:1	6	s
FIELD	991:1	991:1	7	s
LEAF_NODE	991:1	991:1	8	s
ASSIGN_OP	991:3	991:3	6	=
LEAF_NODE	991:3	991:3	7	=
RVAL	991:5	991:27	6	1. / ( 6. * u - 16. * v + 12. )
FIELD	991:5	991:5	7	1.
LEAF_NODE	991:5	991:5	8	1.
LEAF_NODE	991:7	991:7	7	/
LEAF_NODE	991:8	991:8	7	(
FIELD	991:9	991:9	7	6.
LEAF_NODE	991:9	991:9	8	6.
LEAF_NODE	991:11	991:11	7	*
FIELD	991:12	991:12	7	u
LEAF_NODE	991:12	991:12	8	u
LEAF_NODE	991:14	991:14	7	-
FIELD	991:16	991:16	7	16.
LEAF_NODE	991:16	991:16	8	16.
LEAF_NODE	991:19	991:19	7	*
FIELD	991:20	991:20	7	v
LEAF_NODE	991:20	991:20	8	v
LEAF_NODE	991:22	991:22	7	+
FIELD	991:24	991:24	7	12.
LEAF_NODE	991:24	991:24	8	12.
LEAF_NODE	991:27	991:27	7	)
LEAF_NODE	991:28	991:28	4	;
LEAF_NODE	992:1	992:1	3	x
LEAF_NODE	992:3	992:3	3	=
LEAF_NODE	992:5	992:5	3	9.
EXPR_STATEMENT	992:7	992:13	3	* u * s ;
EXPR	992:7	992:12	4	* u * s
UNARY_EXPR	992:7	992:8	5	* u
UNARY_OPERATOR	992:7	992:7	6	*
LEAF_NODE	992:7	992:7	7	*
FIELD	992:8	992:8	6	u
LEAF_NODE	992:8	992:8	7	u
LEAF_NODE	992:10	992:10	5	*
FIELD	992:12	992:12	5	s
LEAF_NODE	992:12	992:12	6	s
LEAF_NODE	992:13	992:13	4	;
LEAF_NODE	993:1	993:1	3	y
LEAF_NODE	993:3	993:3	3	=
LEAF_NODE	993:5	993:5	3	4.
EXPR_STATEMENT	993:7	993:13	3	* v * s ;
EXPR	993:7	993:12	4	* v * s
UNARY_EXPR	993:7	993:8	5	* v
UNARY_OPERATOR	993:7	993:7	6	*
LEAF_NODE	993:7	993:7	7	*
FIELD	993:8	993:8	6	v
LEAF_NODE	993:8	993:8	7	v
LEAF_NODE	993:10	993:10	5	*
FIELD	993:12	993:12	5	s
LEAF_NODE	993:12	993:12	6	s
LEAF_NODE	993:13	993:13	4	;
LEAF_NODE	995:1	995:1	3	XYZ
LEAF_NODE	995:4	995:4	3	[
LEAF_NODE	995:5	995:5	3	0
LEAF_NODE	995:6	995:6	3	]
LEAF_NODE	995:8	995:8	3	=
LEAF_NODE	995:10	995:10	3	(
LEAF_NODE	995:11	995:11	3	float
LEAF_NODE	995:16	995:16	3	)
LEAF_NODE	995:17	995:17	3	(
LEAF_NODE	995:18	995:18	3	x
LEAF_NODE	995:19	995:19	3	/
LEAF_NODE	995:20	995:20	3	y
LEAF_NODE	995:22	995:22	3	*
LEAF_NODE	995:24	995:24	3	L
LEAF_NODE	995:25	995:25	3	)
LEAF_NODE	995:26	995:26	3	;
EXPR_STATEMENT	996:1	996:18	3	XYZ [ 1 ] = ( float ) L ;
EXPR	996:1	996:1	4	XYZ [ 1 ] = ( float ) L
ASSIGN	996:1	996:10	5	XYZ [ 1 ] = ( float ) L
LVAL	996:1	996:1	6	XYZ [ 1 ]
FIELD	996:1	996:6	7	XYZ [ 1 ]
LEAF_NODE	996:1	996:1	8	XYZ
LEAF_NODE	996:4	996:4	8	[
EXPR	996:5	996:5	8	1
FIELD	996:5	996:5	9	1
LEAF_NODE	996:5	996:5	10	1
LEAF_NODE	996:6	996:6	8	]
ASSIGN_OP	996:8	996:8	6	=
LEAF_NODE	996:8	996:8	7	=
RVAL	996:10	996:17	6	( float ) L
LEAF_NODE	996:10	996:10	7	(
TYPE_NAME	996:11	996:11	7	float
LEAF_NODE	996:11	996:11	8	float
LEAF_NODE	996:16	996:16	7	)
FIELD	996:17	996:17	7	L
LEAF_NODE	996:17	996:17	8	L
LEAF_NODE	996:18	996:18	4	;
LEAF_NODE	997:1	997:1	3	XYZ
LEAF_NODE	997:4	997:4	3	[
LEAF_NODE	997:5	997:5	3	2
LEAF_NODE	997:6	997:6	3	]
LEAF_NODE	997:8	997:8	3	=
LEAF_NODE	997:10	997:10	3	(
LEAF_NODE	997:11	997:11	3	float
LEAF_NODE	997:16	997:16	3	)
LEAF_NODE	997:17	997:17	3	(
LEAF_NODE	997:18	997:18	3	(
LEAF_NODE	997:19	997:19	3	1.
LEAF_NODE	997:21	997:21	3	-
LEAF_NODE	997:22	997:22	3	x
LEAF_NODE	997:23	997:23	3	-
LEAF_NODE	997:24	997:24	3	y
LEAF_NODE	997:25	997:25	3	)
LEAF_NODE	997:26	997:26	3	/
LEAF_NODE	997:27	997:27	3	y
LEAF_NODE	997:29	997:29	3	*
LEAF_NODE	997:31	997:31	3	L
LEAF_NODE	997:32	997:32	3	)
LEAF_NODE	997:33	997:33	3	;
LEAF_NODE	998:0	998:0	2	}
FUNCTION_DEF	1001:0	1024:0	1	
RETURN_TYPE	1001:0	1003:0	2	static uint32
LEAF_NODE	1001:0	1001:0	3	static
TYPE_NAME	1003:0	1003:0	3	uint32
LEAF_NODE	1003:0	1003:0	4	uint32
FUNCTION_NAME	1004:0	1004:0	2	LogLuv24fromXYZ
LEAF_NODE	1004:0	1004:0	3	LogLuv24fromXYZ
PARAMETER_LIST	1004:15	1004:36	2	( float [ 3 ] XYZ , int em )
LEAF_NODE	1004:15	1004:15	3	(
PARAMETER_DECL	1004:16	1004:22	3	float [ 3 ] XYZ
TYPE	1004:16	1004:25	4	float [ 3 ]
TYPE_NAME	1004:16	1004:16	5	float
LEAF_NODE	1004:16	1004:16	6	float
TYPE_SUFFIX	1004:25	1004:27	5	[ 3 ]
LEAF_NODE	1004:25	1004:25	6	[
FIELD	1004:26	1004:26	6	3
LEAF_NODE	1004:26	1004:26	7	3
LEAF_NODE	1004:27	1004:27	6	]
NAME	1004:22	1004:22	4	XYZ
LEAF_NODE	1004:22	1004:22	5	XYZ
LEAF_NODE	1004:28	1004:28	3	,
PARAMETER_DECL	1004:30	1004:34	3	int em
TYPE	1004:30	1004:30	4	int
TYPE_NAME	1004:30	1004:30	5	int
LEAF_NODE	1004:30	1004:30	6	int
NAME	1004:34	1004:34	4	em
LEAF_NODE	1004:34	1004:34	5	em
LEAF_NODE	1004:36	1004:36	3	)
LEAF_NODE	1005:0	1005:0	2	{
STATEMENTS	1006:1	1023:1	2	
SIMPLE_DECL	1006:1	1006:11	3	int Le , int Ce ;
INIT_DECL_LIST	1006:1	1006:1	4	int Le , int Ce
VAR_DECL	1006:1	1006:5	5	int Le
TYPE	1006:1	1006:1	6	int
TYPE_NAME	1006:1	1006:1	7	int
LEAF_NODE	1006:1	1006:1	8	int
NAME	1006:5	1006:5	6	Le
LEAF_NODE	1006:5	1006:5	7	Le
LEAF_NODE	1006:7	1006:7	5	,
VAR_DECL	1006:1	1006:9	5	int Ce
TYPE	1006:1	1006:1	6	int
TYPE_NAME	1006:1	1006:1	7	int
LEAF_NODE	1006:1	1006:1	8	int
NAME	1006:9	1006:9	6	Ce
LEAF_NODE	1006:9	1006:9	7	Ce
LEAF_NODE	1006:11	1006:11	4	;
SIMPLE_DECL	1007:1	1007:15	3	double u , double v , double s ;
INIT_DECL_LIST	1007:1	1007:1	4	double u , double v , double s
VAR_DECL	1007:1	1007:8	5	double u
TYPE	1007:1	1007:1	6	double
TYPE_NAME	1007:1	1007:1	7	double
LEAF_NODE	1007:1	1007:1	8	double
NAME	1007:8	1007:8	6	u
LEAF_NODE	1007:8	1007:8	7	u
LEAF_NODE	1007:9	1007:9	5	,
INIT_DECL_LIST	1007:1	1007:1	5	double v , double s
VAR_DECL	1007:1	1007:11	6	double v
TYPE	1007:1	1007:1	7	double
TYPE_NAME	1007:1	1007:1	8	double
LEAF_NODE	1007:1	1007:1	9	double
NAME	1007:11	1007:11	7	v
LEAF_NODE	1007:11	1007:11	8	v
LEAF_NODE	1007:12	1007:12	6	,
VAR_DECL	1007:1	1007:14	6	double s
TYPE	1007:1	1007:1	7	double
TYPE_NAME	1007:1	1007:1	8	double
LEAF_NODE	1007:1	1007:1	9	double
NAME	1007:14	1007:14	7	s
LEAF_NODE	1007:14	1007:14	8	s
LEAF_NODE	1007:15	1007:15	4	;
EXPR_STATEMENT	1009:1	1009:29	3	Le = LogL10fromY ( XYZ [ 1 ] , em ) ;
EXPR	1009:1	1009:1	4	Le = LogL10fromY ( XYZ [ 1 ] , em )
ASSIGN	1009:1	1009:6	5	Le = LogL10fromY ( XYZ [ 1 ] , em )
LVAL	1009:1	1009:1	6	Le
FIELD	1009:1	1009:1	7	Le
LEAF_NODE	1009:1	1009:1	8	Le
ASSIGN_OP	1009:4	1009:4	6	=
LEAF_NODE	1009:4	1009:4	7	=
RVAL	1009:6	1009:6	6	LogL10fromY ( XYZ [ 1 ] , em )
FUNCTION_CALL	1009:6	1009:28	7	LogL10fromY ( XYZ [ 1 ] , em )
CALLEE	1009:6	1009:6	8	LogL10fromY
LEAF_NODE	1009:6	1009:6	9	LogL10fromY
LEAF_NODE	1009:17	1009:17	8	(
ARGUMENT	1009:18	1009:18	8	XYZ [ 1 ]
FIELD	1009:18	1009:23	9	XYZ [ 1 ]
LEAF_NODE	1009:18	1009:18	10	XYZ
LEAF_NODE	1009:21	1009:21	10	[
EXPR	1009:22	1009:22	10	1
FIELD	1009:22	1009:22	11	1
LEAF_NODE	1009:22	1009:22	12	1
LEAF_NODE	1009:23	1009:23	10	]
LEAF_NODE	1009:24	1009:24	8	,
ARGUMENT	1009:26	1009:26	8	em
FIELD	1009:26	1009:26	9	em
LEAF_NODE	1009:26	1009:26	10	em
LEAF_NODE	1009:28	1009:28	8	)
LEAF_NODE	1009:29	1009:29	4	;
EXPR_STATEMENT	1011:1	1011:36	3	s = XYZ [ 0 ] + 15. * XYZ [ 1 ] + 3. * XYZ [ 2 ] ;
EXPR	1011:1	1011:1	4	s = XYZ [ 0 ] + 15. * XYZ [ 1 ] + 3. * XYZ [ 2 ]
ASSIGN	1011:1	1011:5	5	s = XYZ [ 0 ] + 15. * XYZ [ 1 ] + 3. * XYZ [ 2 ]
LVAL	1011:1	1011:1	6	s
FIELD	1011:1	1011:1	7	s
LEAF_NODE	1011:1	1011:1	8	s
ASSIGN_OP	1011:3	1011:3	6	=
LEAF_NODE	1011:3	1011:3	7	=
RVAL	1011:5	1011:30	6	XYZ [ 0 ] + 15. * XYZ [ 1 ] + 3. * XYZ [ 2 ]
FIELD	1011:5	1011:10	7	XYZ [ 0 ]
LEAF_NODE	1011:5	1011:5	8	XYZ
LEAF_NODE	1011:8	1011:8	8	[
EXPR	1011:9	1011:9	8	0
FIELD	1011:9	1011:9	9	0
LEAF_NODE	1011:9	1011:9	10	0
LEAF_NODE	1011:10	1011:10	8	]
LEAF_NODE	1011:12	1011:12	7	+
FIELD	1011:14	1011:14	7	15.
LEAF_NODE	1011:14	1011:14	8	15.
LEAF_NODE	1011:17	1011:17	7	*
FIELD	1011:18	1011:23	7	XYZ [ 1 ]
LEAF_NODE	1011:18	1011:18	8	XYZ
LEAF_NODE	1011:21	1011:21	8	[
EXPR	1011:22	1011:22	8	1
FIELD	1011:22	1011:22	9	1
LEAF_NODE	1011:22	1011:22	10	1
LEAF_NODE	1011:23	1011:23	8	]
LEAF_NODE	1011:25	1011:25	7	+
FIELD	1011:27	1011:27	7	3.
LEAF_NODE	1011:27	1011:27	8	3.
LEAF_NODE	1011:29	1011:29	7	*
FIELD	1011:30	1011:35	7	XYZ [ 2 ]
LEAF_NODE	1011:30	1011:30	8	XYZ
LEAF_NODE	1011:33	1011:33	8	[
EXPR	1011:34	1011:34	8	2
FIELD	1011:34	1011:34	9	2
LEAF_NODE	1011:34	1011:34	10	2
LEAF_NODE	1011:35	1011:35	8	]
LEAF_NODE	1011:36	1011:36	4	;
SELECTION	1012:1	1012:21	3	
KEYWORD	1012:1	1012:1	4	if
LEAF_NODE	1012:1	1012:1	5	if
LEAF_NODE	1012:4	1012:4	4	(
CONDITION	1012:5	1012:5	4	! Le || s <= 0.
EXPR	1012:5	1012:5	5	! Le || s <= 0.
OR	1012:5	1012:12	6	! Le || s <= 0.
EXPR	1012:5	1012:5	7	! Le
UNARY_EXPR	1012:5	1012:6	8	! Le
UNARY_OPERATOR	1012:5	1012:5	9	!
LEAF_NODE	1012:5	1012:5	10	!
FIELD	1012:6	1012:6	9	Le
LEAF_NODE	1012:6	1012:6	10	Le
LEAF_NODE	1012:9	1012:9	7	||
EXPR	1012:12	1012:17	7	s <= 0.
FIELD	1012:12	1012:12	8	s
LEAF_NODE	1012:12	1012:12	9	s
REL_OPERATOR	1012:14	1012:14	8	<=
LEAF_NODE	1012:14	1012:14	9	<=
FIELD	1012:17	1012:17	8	0.
LEAF_NODE	1012:17	1012:17	9	0.
LEAF_NODE	1012:19	1012:19	4	)
STATEMENTS	1012:21	1015:1	4	
LEAF_NODE	1012:21	1012:21	5	{
STATEMENTS	1013:2	1014:2	5	
EXPR_STATEMENT	1013:2	1013:11	6	u = U_NEU ;
EXPR	1013:2	1013:2	7	u = U_NEU
ASSIGN	1013:2	1013:6	8	u = U_NEU
LVAL	1013:2	1013:2	9	u
FIELD	1013:2	1013:2	10	u
LEAF_NODE	1013:2	1013:2	11	u
ASSIGN_OP	1013:4	1013:4	9	=
LEAF_NODE	1013:4	1013:4	10	=
RVAL	1013:6	1013:6	9	U_NEU
FIELD	1013:6	1013:6	10	U_NEU
LEAF_NODE	1013:6	1013:6	11	U_NEU
LEAF_NODE	1013:11	1013:11	7	;
EXPR_STATEMENT	1014:2	1014:11	6	v = V_NEU ;
EXPR	1014:2	1014:2	7	v = V_NEU
ASSIGN	1014:2	1014:6	8	v = V_NEU
LVAL	1014:2	1014:2	9	v
FIELD	1014:2	1014:2	10	v
LEAF_NODE	1014:2	1014:2	11	v
ASSIGN_OP	1014:4	1014:4	9	=
LEAF_NODE	1014:4	1014:4	10	=
RVAL	1014:6	1014:6	9	V_NEU
FIELD	1014:6	1014:6	10	V_NEU
LEAF_NODE	1014:6	1014:6	11	V_NEU
LEAF_NODE	1014:11	1014:11	7	;
LEAF_NODE	1015:1	1015:1	5	}
SELECTION	1015:3	1015:8	3	
KEYWORD	1015:3	1015:3	4	else
LEAF_NODE	1015:3	1015:3	5	else
STATEMENTS	1015:8	1018:1	4	
LEAF_NODE	1015:8	1015:8	5	{
STATEMENTS	1016:2	1017:8	5	
LEAF_NODE	1016:2	1016:2	6	u
LEAF_NODE	1016:4	1016:4	6	=
LEAF_NODE	1016:6	1016:6	6	4.
EXPR_STATEMENT	1016:8	1016:19	6	* XYZ [ 0 ] / s ;
EXPR	1016:8	1016:18	7	* XYZ [ 0 ] / s
UNARY_EXPR	1016:8	1016:9	8	* XYZ [ 0 ]
UNARY_OPERATOR	1016:8	1016:8	9	*
LEAF_NODE	1016:8	1016:8	10	*
FIELD	1016:9	1016:14	9	XYZ [ 0 ]
LEAF_NODE	1016:9	1016:9	10	XYZ
LEAF_NODE	1016:12	1016:12	10	[
EXPR	1016:13	1016:13	10	0
FIELD	1016:13	1016:13	11	0
LEAF_NODE	1016:13	1016:13	12	0
LEAF_NODE	1016:14	1016:14	10	]
LEAF_NODE	1016:16	1016:16	8	/
FIELD	1016:18	1016:18	8	s
LEAF_NODE	1016:18	1016:18	9	s
LEAF_NODE	1016:19	1016:19	7	;
LEAF_NODE	1017:2	1017:2	6	v
LEAF_NODE	1017:4	1017:4	6	=
LEAF_NODE	1017:6	1017:6	6	9.
EXPR_STATEMENT	1017:8	1017:19	6	* XYZ [ 1 ] / s ;
EXPR	1017:8	1017:18	7	* XYZ [ 1 ] / s
UNARY_EXPR	1017:8	1017:9	8	* XYZ [ 1 ]
UNARY_OPERATOR	1017:8	1017:8	9	*
LEAF_NODE	1017:8	1017:8	10	*
FIELD	1017:9	1017:14	9	XYZ [ 1 ]
LEAF_NODE	1017:9	1017:9	10	XYZ
LEAF_NODE	1017:12	1017:12	10	[
EXPR	1017:13	1017:13	10	1
FIELD	1017:13	1017:13	11	1
LEAF_NODE	1017:13	1017:13	12	1
LEAF_NODE	1017:14	1017:14	10	]
LEAF_NODE	1017:16	1017:16	8	/
FIELD	1017:18	1017:18	8	s
LEAF_NODE	1017:18	1017:18	9	s
LEAF_NODE	1017:19	1017:19	7	;
LEAF_NODE	1018:1	1018:1	5	}
EXPR_STATEMENT	1019:1	1019:25	3	Ce = uv_encode ( u , v , em ) ;
EXPR	1019:1	1019:1	4	Ce = uv_encode ( u , v , em )
ASSIGN	1019:1	1019:6	5	Ce = uv_encode ( u , v , em )
LVAL	1019:1	1019:1	6	Ce
FIELD	1019:1	1019:1	7	Ce
LEAF_NODE	1019:1	1019:1	8	Ce
ASSIGN_OP	1019:4	1019:4	6	=
LEAF_NODE	1019:4	1019:4	7	=
RVAL	1019:6	1019:6	6	uv_encode ( u , v , em )
FUNCTION_CALL	1019:6	1019:24	7	uv_encode ( u , v , em )
CALLEE	1019:6	1019:6	8	uv_encode
LEAF_NODE	1019:6	1019:6	9	uv_encode
LEAF_NODE	1019:15	1019:15	8	(
ARGUMENT	1019:16	1019:16	8	u
FIELD	1019:16	1019:16	9	u
LEAF_NODE	1019:16	1019:16	10	u
LEAF_NODE	1019:17	1019:17	8	,
ARGUMENT	1019:19	1019:19	8	v
FIELD	1019:19	1019:19	9	v
LEAF_NODE	1019:19	1019:19	10	v
LEAF_NODE	1019:20	1019:20	8	,
ARGUMENT	1019:22	1019:22	8	em
FIELD	1019:22	1019:22	9	em
LEAF_NODE	1019:22	1019:22	10	em
LEAF_NODE	1019:24	1019:24	8	)
LEAF_NODE	1019:25	1019:25	4	;
SELECTION	1020:1	1021:2	3	
KEYWORD	1020:1	1020:1	4	if
LEAF_NODE	1020:1	1020:1	5	if
LEAF_NODE	1020:4	1020:4	4	(
CONDITION	1020:5	1020:5	4	Ce < 0
EXPR	1020:5	1020:10	5	Ce < 0
FIELD	1020:5	1020:5	6	Ce
LEAF_NODE	1020:5	1020:5	7	Ce
REL_OPERATOR	1020:8	1020:8	6	<
LEAF_NODE	1020:8	1020:8	7	<
FIELD	1020:10	1020:10	6	0
LEAF_NODE	1020:10	1020:10	7	0
LEAF_NODE	1020:11	1020:11	4	)
STATEMENTS	1021:2	1021:2	4	
EXPR_STATEMENT	1021:2	1021:53	5	Ce = uv_encode ( U_NEU , V_NEU , SGILOGENCODE_NODITHER ) ;
EXPR	1021:2	1021:2	6	Ce = uv_encode ( U_NEU , V_NEU , SGILOGENCODE_NODITHER )
ASSIGN	1021:2	1021:7	7	Ce = uv_encode ( U_NEU , V_NEU , SGILOGENCODE_NODITHER )
LVAL	1021:2	1021:2	8	Ce
FIELD	1021:2	1021:2	9	Ce
LEAF_NODE	1021:2	1021:2	10	Ce
ASSIGN_OP	1021:5	1021:5	8	=
LEAF_NODE	1021:5	1021:5	9	=
RVAL	1021:7	1021:7	8	uv_encode ( U_NEU , V_NEU , SGILOGENCODE_NODITHER )
FUNCTION_CALL	1021:7	1021:52	9	uv_encode ( U_NEU , V_NEU , SGILOGENCODE_NODITHER )
CALLEE	1021:7	1021:7	10	uv_encode
LEAF_NODE	1021:7	1021:7	11	uv_encode
LEAF_NODE	1021:16	1021:16	10	(
ARGUMENT	1021:17	1021:17	10	U_NEU
FIELD	1021:17	1021:17	11	U_NEU
LEAF_NODE	1021:17	1021:17	12	U_NEU
LEAF_NODE	1021:22	1021:22	10	,
ARGUMENT	1021:24	1021:24	10	V_NEU
FIELD	1021:24	1021:24	11	V_NEU
LEAF_NODE	1021:24	1021:24	12	V_NEU
LEAF_NODE	1021:29	1021:29	10	,
ARGUMENT	1021:31	1021:31	10	SGILOGENCODE_NODITHER
FIELD	1021:31	1021:31	11	SGILOGENCODE_NODITHER
LEAF_NODE	1021:31	1021:31	12	SGILOGENCODE_NODITHER
LEAF_NODE	1021:52	1021:52	10	)
LEAF_NODE	1021:53	1021:53	6	;
JUMP_STATEMENT	1023:1	1023:23	3	return ( Le << 14 | Ce ) ;
KEYWORD	1023:1	1023:1	4	return
LEAF_NODE	1023:1	1023:1	5	return
DESTINATION	1023:8	1023:8	4	( Le << 14 | Ce )
EXPR	1023:8	1023:22	5	( Le << 14 | Ce )
LEAF_NODE	1023:8	1023:8	6	(
BIT_OR	1023:9	1023:20	6	Le << 14 | Ce
BIT_OR_ELEM	1023:9	1023:15	7	Le << 14
FIELD	1023:9	1023:9	8	Le
LEAF_NODE	1023:9	1023:9	9	Le
LEAF_NODE	1023:12	1023:12	8	<<
FIELD	1023:15	1023:15	8	14
LEAF_NODE	1023:15	1023:15	9	14
LEAF_NODE	1023:18	1023:18	7	|
BIT_OR_ELEM	1023:20	1023:20	7	Ce
FIELD	1023:20	1023:20	8	Ce
LEAF_NODE	1023:20	1023:20	9	Ce
LEAF_NODE	1023:22	1023:22	6	)
LEAF_NODE	1023:23	1023:23	4	;
LEAF_NODE	1024:0	1024:0	2	}
FUNCTION_DEF	1026:0	1037:0	1	
RETURN_TYPE	1026:0	1026:7	2	static void
LEAF_NODE	1026:0	1026:0	3	static
TYPE_NAME	1026:7	1026:7	3	void
LEAF_NODE	1026:7	1026:7	4	void
FUNCTION_NAME	1027:0	1027:0	2	Luv24toXYZ
LEAF_NODE	1027:0	1027:0	3	Luv24toXYZ
PARAMETER_LIST	1027:10	1027:49	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1027:10	1027:10	3	(
PARAMETER_DECL	1027:11	1027:24	3	LogLuvState * sp
TYPE	1027:11	1027:22	4	LogLuvState *
TYPE_NAME	1027:11	1027:11	5	LogLuvState
LEAF_NODE	1027:11	1027:11	6	LogLuvState
POINTER	1027:22	1027:22	5	*
LEAF_NODE	1027:22	1027:22	6	*
NAME	1027:24	1027:24	4	sp
LEAF_NODE	1027:24	1027:24	5	sp
LEAF_NODE	1027:26	1027:26	3	,
PARAMETER_DECL	1027:28	1027:35	3	uint8 * op
TYPE	1027:28	1027:33	4	uint8 *
TYPE_NAME	1027:28	1027:28	5	uint8
LEAF_NODE	1027:28	1027:28	6	uint8
POINTER	1027:33	1027:33	5	*
LEAF_NODE	1027:33	1027:33	6	*
NAME	1027:35	1027:35	4	op
LEAF_NODE	1027:35	1027:35	5	op
LEAF_NODE	1027:37	1027:37	3	,
PARAMETER_DECL	1027:39	1027:48	3	tmsize_t n
TYPE	1027:39	1027:39	4	tmsize_t
TYPE_NAME	1027:39	1027:39	5	tmsize_t
LEAF_NODE	1027:39	1027:39	6	tmsize_t
NAME	1027:48	1027:48	4	n
LEAF_NODE	1027:48	1027:48	5	n
LEAF_NODE	1027:49	1027:49	3	)
LEAF_NODE	1028:0	1028:0	2	{
STATEMENTS	1029:1	1032:1	2	
SIMPLE_DECL	1029:1	1029:33	3	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf ;
VAR_DECL	1029:1	1029:9	4	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf
TYPE	1029:1	1029:7	5	uint32 *
TYPE_NAME	1029:1	1029:1	6	uint32
LEAF_NODE	1029:1	1029:1	7	uint32
POINTER	1029:7	1029:7	6	*
LEAF_NODE	1029:7	1029:7	7	*
NAME	1029:9	1029:9	5	luv
LEAF_NODE	1029:9	1029:9	6	luv
LEAF_NODE	0:0	0:0	5	;
INIT	1029:9	1029:9	5	luv = ( uint32 * ) sp -> tbuf
ASSIGN	1029:9	1029:15	6	luv = ( uint32 * ) sp -> tbuf
LVAL	1029:9	1029:9	7	luv
NAME	1029:9	1029:9	8	luv
LEAF_NODE	1029:9	1029:9	9	luv
ASSIGN_OP	1029:13	1029:13	7	=
LEAF_NODE	1029:13	1029:13	8	=
RVAL	1029:15	1029:25	7	( uint32 * ) sp -> tbuf
LEAF_NODE	1029:15	1029:15	8	(
TYPE_NAME	1029:16	1029:16	8	uint32
LEAF_NODE	1029:16	1029:16	9	uint32
LEAF_NODE	1029:22	1029:22	8	*
LEAF_NODE	1029:23	1029:23	8	)
FIELD	1029:25	1029:29	8	sp -> tbuf
LEAF_NODE	1029:25	1029:25	9	sp
LEAF_NODE	1029:27	1029:27	9	->
LEAF_NODE	1029:29	1029:29	9	tbuf
LEAF_NODE	1029:33	1029:33	4	;
SIMPLE_DECL	1030:1	1030:25	3	float * xyz ; xyz = ( float * ) op ;
VAR_DECL	1030:1	1030:8	4	float * xyz ; xyz = ( float * ) op
TYPE	1030:1	1030:6	5	float *
TYPE_NAME	1030:1	1030:1	6	float
LEAF_NODE	1030:1	1030:1	7	float
POINTER	1030:6	1030:6	6	*
LEAF_NODE	1030:6	1030:6	7	*
NAME	1030:8	1030:8	5	xyz
LEAF_NODE	1030:8	1030:8	6	xyz
LEAF_NODE	0:0	0:0	5	;
INIT	1030:8	1030:8	5	xyz = ( float * ) op
ASSIGN	1030:8	1030:14	6	xyz = ( float * ) op
LVAL	1030:8	1030:8	7	xyz
NAME	1030:8	1030:8	8	xyz
LEAF_NODE	1030:8	1030:8	9	xyz
ASSIGN_OP	1030:12	1030:12	7	=
LEAF_NODE	1030:12	1030:12	8	=
RVAL	1030:14	1030:23	7	( float * ) op
LEAF_NODE	1030:14	1030:14	8	(
TYPE_NAME	1030:15	1030:15	8	float
LEAF_NODE	1030:15	1030:15	9	float
LEAF_NODE	1030:20	1030:20	8	*
LEAF_NODE	1030:21	1030:21	8	)
FIELD	1030:23	1030:23	8	op
LEAF_NODE	1030:23	1030:23	9	op
LEAF_NODE	1030:25	1030:25	4	;
ITERATION	1032:1	1032:17	3	
KEYWORD	1032:1	1032:1	4	while
LEAF_NODE	1032:1	1032:1	5	while
LEAF_NODE	1032:7	1032:7	4	(
CONDITION	1032:8	1032:8	4	n -- > 0
EXPR	1032:8	1032:14	5	n -- > 0
FIELD	1032:8	1032:9	6	n --
LEAF_NODE	1032:8	1032:8	7	n
LEAF_NODE	1032:9	1032:9	7	--
REL_OPERATOR	1032:12	1032:12	6	>
LEAF_NODE	1032:12	1032:12	7	>
FIELD	1032:14	1032:14	6	0
LEAF_NODE	1032:14	1032:14	7	0
LEAF_NODE	1032:15	1032:15	4	)
STATEMENTS	1032:17	1036:1	4	
LEAF_NODE	1032:17	1032:17	5	{
STATEMENTS	1033:2	1035:2	5	
EXPR_STATEMENT	1033:2	1033:26	6	LogLuv24toXYZ ( * luv , xyz ) ;
EXPR	1033:2	1033:2	7	LogLuv24toXYZ ( * luv , xyz )
FUNCTION_CALL	1033:2	1033:25	8	LogLuv24toXYZ ( * luv , xyz )
CALLEE	1033:2	1033:2	9	LogLuv24toXYZ
LEAF_NODE	1033:2	1033:2	10	LogLuv24toXYZ
LEAF_NODE	1033:15	1033:15	9	(
ARGUMENT	1033:16	1033:16	9	* luv
UNARY_EXPR	1033:16	1033:17	10	* luv
UNARY_OPERATOR	1033:16	1033:16	11	*
LEAF_NODE	1033:16	1033:16	12	*
FIELD	1033:17	1033:17	11	luv
LEAF_NODE	1033:17	1033:17	12	luv
LEAF_NODE	1033:20	1033:20	9	,
ARGUMENT	1033:22	1033:22	9	xyz
FIELD	1033:22	1033:22	10	xyz
LEAF_NODE	1033:22	1033:22	11	xyz
LEAF_NODE	1033:25	1033:25	9	)
LEAF_NODE	1033:26	1033:26	7	;
EXPR_STATEMENT	1034:2	1034:10	6	xyz += 3 ;
EXPR	1034:2	1034:2	7	xyz += 3
ASSIGN	1034:2	1034:9	8	xyz += 3
LVAL	1034:2	1034:2	9	xyz
FIELD	1034:2	1034:2	10	xyz
LEAF_NODE	1034:2	1034:2	11	xyz
ASSIGN_OP	1034:6	1034:6	9	+=
LEAF_NODE	1034:6	1034:6	10	+=
RVAL	1034:9	1034:9	9	3
FIELD	1034:9	1034:9	10	3
LEAF_NODE	1034:9	1034:9	11	3
LEAF_NODE	1034:10	1034:10	7	;
EXPR_STATEMENT	1035:2	1035:7	6	luv ++ ;
EXPR	1035:2	1035:2	7	luv ++
FIELD	1035:2	1035:5	8	luv ++
LEAF_NODE	1035:2	1035:2	9	luv
LEAF_NODE	1035:5	1035:5	9	++
LEAF_NODE	1035:7	1035:7	7	;
LEAF_NODE	1036:1	1036:1	5	}
LEAF_NODE	1037:0	1037:0	2	}
FUNCTION_DEF	1039:0	1057:0	1	
RETURN_TYPE	1039:0	1039:7	2	static void
LEAF_NODE	1039:0	1039:0	3	static
TYPE_NAME	1039:7	1039:7	3	void
LEAF_NODE	1039:7	1039:7	4	void
FUNCTION_NAME	1040:0	1040:0	2	Luv24toLuv48
LEAF_NODE	1040:0	1040:0	3	Luv24toLuv48
PARAMETER_LIST	1040:12	1040:51	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1040:12	1040:12	3	(
PARAMETER_DECL	1040:13	1040:26	3	LogLuvState * sp
TYPE	1040:13	1040:24	4	LogLuvState *
TYPE_NAME	1040:13	1040:13	5	LogLuvState
LEAF_NODE	1040:13	1040:13	6	LogLuvState
POINTER	1040:24	1040:24	5	*
LEAF_NODE	1040:24	1040:24	6	*
NAME	1040:26	1040:26	4	sp
LEAF_NODE	1040:26	1040:26	5	sp
LEAF_NODE	1040:28	1040:28	3	,
PARAMETER_DECL	1040:30	1040:37	3	uint8 * op
TYPE	1040:30	1040:35	4	uint8 *
TYPE_NAME	1040:30	1040:30	5	uint8
LEAF_NODE	1040:30	1040:30	6	uint8
POINTER	1040:35	1040:35	5	*
LEAF_NODE	1040:35	1040:35	6	*
NAME	1040:37	1040:37	4	op
LEAF_NODE	1040:37	1040:37	5	op
LEAF_NODE	1040:39	1040:39	3	,
PARAMETER_DECL	1040:41	1040:50	3	tmsize_t n
TYPE	1040:41	1040:41	4	tmsize_t
TYPE_NAME	1040:41	1040:41	5	tmsize_t
LEAF_NODE	1040:41	1040:41	6	tmsize_t
NAME	1040:50	1040:50	4	n
LEAF_NODE	1040:50	1040:50	5	n
LEAF_NODE	1040:51	1040:51	3	)
LEAF_NODE	1041:0	1041:0	2	{
STATEMENTS	1042:1	1045:1	2	
SIMPLE_DECL	1042:1	1042:33	3	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf ;
VAR_DECL	1042:1	1042:9	4	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf
TYPE	1042:1	1042:7	5	uint32 *
TYPE_NAME	1042:1	1042:1	6	uint32
LEAF_NODE	1042:1	1042:1	7	uint32
POINTER	1042:7	1042:7	6	*
LEAF_NODE	1042:7	1042:7	7	*
NAME	1042:9	1042:9	5	luv
LEAF_NODE	1042:9	1042:9	6	luv
LEAF_NODE	0:0	0:0	5	;
INIT	1042:9	1042:9	5	luv = ( uint32 * ) sp -> tbuf
ASSIGN	1042:9	1042:15	6	luv = ( uint32 * ) sp -> tbuf
LVAL	1042:9	1042:9	7	luv
NAME	1042:9	1042:9	8	luv
LEAF_NODE	1042:9	1042:9	9	luv
ASSIGN_OP	1042:13	1042:13	7	=
LEAF_NODE	1042:13	1042:13	8	=
RVAL	1042:15	1042:25	7	( uint32 * ) sp -> tbuf
LEAF_NODE	1042:15	1042:15	8	(
TYPE_NAME	1042:16	1042:16	8	uint32
LEAF_NODE	1042:16	1042:16	9	uint32
LEAF_NODE	1042:22	1042:22	8	*
LEAF_NODE	1042:23	1042:23	8	)
FIELD	1042:25	1042:29	8	sp -> tbuf
LEAF_NODE	1042:25	1042:25	9	sp
LEAF_NODE	1042:27	1042:27	9	->
LEAF_NODE	1042:29	1042:29	9	tbuf
LEAF_NODE	1042:33	1042:33	4	;
SIMPLE_DECL	1043:1	1043:26	3	int16 * luv3 ; luv3 = ( int16 * ) op ;
VAR_DECL	1043:1	1043:8	4	int16 * luv3 ; luv3 = ( int16 * ) op
TYPE	1043:1	1043:6	5	int16 *
TYPE_NAME	1043:1	1043:1	6	int16
LEAF_NODE	1043:1	1043:1	7	int16
POINTER	1043:6	1043:6	6	*
LEAF_NODE	1043:6	1043:6	7	*
NAME	1043:8	1043:8	5	luv3
LEAF_NODE	1043:8	1043:8	6	luv3
LEAF_NODE	0:0	0:0	5	;
INIT	1043:8	1043:8	5	luv3 = ( int16 * ) op
ASSIGN	1043:8	1043:15	6	luv3 = ( int16 * ) op
LVAL	1043:8	1043:8	7	luv3
NAME	1043:8	1043:8	8	luv3
LEAF_NODE	1043:8	1043:8	9	luv3
ASSIGN_OP	1043:13	1043:13	7	=
LEAF_NODE	1043:13	1043:13	8	=
RVAL	1043:15	1043:24	7	( int16 * ) op
LEAF_NODE	1043:15	1043:15	8	(
TYPE_NAME	1043:16	1043:16	8	int16
LEAF_NODE	1043:16	1043:16	9	int16
LEAF_NODE	1043:21	1043:21	8	*
LEAF_NODE	1043:22	1043:22	8	)
FIELD	1043:24	1043:24	8	op
LEAF_NODE	1043:24	1043:24	9	op
LEAF_NODE	1043:26	1043:26	4	;
ITERATION	1045:1	1045:17	3	
KEYWORD	1045:1	1045:1	4	while
LEAF_NODE	1045:1	1045:1	5	while
LEAF_NODE	1045:7	1045:7	4	(
CONDITION	1045:8	1045:8	4	n -- > 0
EXPR	1045:8	1045:14	5	n -- > 0
FIELD	1045:8	1045:9	6	n --
LEAF_NODE	1045:8	1045:8	7	n
LEAF_NODE	1045:9	1045:9	7	--
REL_OPERATOR	1045:12	1045:12	6	>
LEAF_NODE	1045:12	1045:12	7	>
FIELD	1045:14	1045:14	6	0
LEAF_NODE	1045:14	1045:14	7	0
LEAF_NODE	1045:15	1045:15	4	)
STATEMENTS	1045:17	1056:1	4	
LEAF_NODE	1045:17	1045:17	5	{
STATEMENTS	1046:2	1055:2	5	
SIMPLE_DECL	1046:2	1046:13	6	double u , double v ;
INIT_DECL_LIST	1046:2	1046:2	7	double u , double v
VAR_DECL	1046:2	1046:9	8	double u
TYPE	1046:2	1046:2	9	double
TYPE_NAME	1046:2	1046:2	10	double
LEAF_NODE	1046:2	1046:2	11	double
NAME	1046:9	1046:9	9	u
LEAF_NODE	1046:9	1046:9	10	u
LEAF_NODE	1046:10	1046:10	8	,
VAR_DECL	1046:2	1046:12	8	double v
TYPE	1046:2	1046:2	9	double
TYPE_NAME	1046:2	1046:2	10	double
LEAF_NODE	1046:2	1046:2	11	double
NAME	1046:12	1046:12	9	v
LEAF_NODE	1046:12	1046:12	10	v
LEAF_NODE	1046:13	1046:13	7	;
EXPR_STATEMENT	1048:2	1048:49	6	* luv3 ++ = ( int16 ) ( ( * luv >> 12 & 0xffd ) + 13314 ) ;
EXPR	1048:2	1048:2	7	* luv3 ++ = ( int16 ) ( ( * luv >> 12 & 0xffd ) + 13314 )
ASSIGN	1048:2	1048:12	8	* luv3 ++ = ( int16 ) ( ( * luv >> 12 & 0xffd ) + 13314 )
LVAL	1048:2	1048:2	9	* luv3 ++
UNARY_EXPR	1048:2	1048:3	10	* luv3 ++
UNARY_OPERATOR	1048:2	1048:2	11	*
LEAF_NODE	1048:2	1048:2	12	*
FIELD	1048:3	1048:7	11	luv3 ++
LEAF_NODE	1048:3	1048:3	12	luv3
LEAF_NODE	1048:7	1048:7	12	++
ASSIGN_OP	1048:10	1048:10	9	=
LEAF_NODE	1048:10	1048:10	10	=
RVAL	1048:12	1048:48	9	( int16 ) ( ( * luv >> 12 & 0xffd ) + 13314 )
LEAF_NODE	1048:12	1048:12	10	(
TYPE_NAME	1048:13	1048:13	10	int16
LEAF_NODE	1048:13	1048:13	11	int16
LEAF_NODE	1048:18	1048:18	10	)
LEAF_NODE	1048:19	1048:19	10	(
LEAF_NODE	1048:20	1048:20	10	(
UNARY_EXPR	1048:21	1048:22	10	* luv
UNARY_OPERATOR	1048:21	1048:21	11	*
LEAF_NODE	1048:21	1048:21	12	*
FIELD	1048:22	1048:22	11	luv
LEAF_NODE	1048:22	1048:22	12	luv
LEAF_NODE	1048:26	1048:26	10	>>
FIELD	1048:29	1048:29	10	12
LEAF_NODE	1048:29	1048:29	11	12
LEAF_NODE	1048:32	1048:32	10	&
FIELD	1048:34	1048:34	10	0xffd
LEAF_NODE	1048:34	1048:34	11	0xffd
LEAF_NODE	1048:39	1048:39	10	)
LEAF_NODE	1048:41	1048:41	10	+
FIELD	1048:43	1048:43	10	13314
LEAF_NODE	1048:43	1048:43	11	13314
LEAF_NODE	1048:48	1048:48	10	)
LEAF_NODE	1048:49	1048:49	7	;
SELECTION	1049:2	1049:42	6	
KEYWORD	1049:2	1049:2	7	if
LEAF_NODE	1049:2	1049:2	8	if
LEAF_NODE	1049:5	1049:5	7	(
CONDITION	1049:6	1049:6	7	uv_decode ( & u , & v , * luv & 0x3fff ) < 0
EXPR	1049:6	1049:39	8	uv_decode ( & u , & v , * luv & 0x3fff ) < 0
FUNCTION_CALL	1049:6	1049:35	9	uv_decode ( & u , & v , * luv & 0x3fff )
CALLEE	1049:6	1049:6	10	uv_decode
LEAF_NODE	1049:6	1049:6	11	uv_decode
LEAF_NODE	1049:15	1049:15	10	(
ARGUMENT	1049:16	1049:16	10	& u
UNARY_EXPR	1049:16	1049:17	11	& u
UNARY_OPERATOR	1049:16	1049:16	12	&
LEAF_NODE	1049:16	1049:16	13	&
FIELD	1049:17	1049:17	12	u
LEAF_NODE	1049:17	1049:17	13	u
LEAF_NODE	1049:18	1049:18	10	,
ARGUMENT	1049:20	1049:20	10	& v
UNARY_EXPR	1049:20	1049:21	11	& v
UNARY_OPERATOR	1049:20	1049:20	12	&
LEAF_NODE	1049:20	1049:20	13	&
FIELD	1049:21	1049:21	12	v
LEAF_NODE	1049:21	1049:21	13	v
LEAF_NODE	1049:22	1049:22	10	,
ARGUMENT	1049:24	1049:29	10	* luv & 0x3fff
UNARY_EXPR	1049:24	1049:25	11	* luv
UNARY_OPERATOR	1049:24	1049:24	12	*
LEAF_NODE	1049:24	1049:24	13	*
FIELD	1049:25	1049:25	12	luv
LEAF_NODE	1049:25	1049:25	13	luv
LEAF_NODE	1049:28	1049:28	11	&
FIELD	1049:29	1049:29	11	0x3fff
LEAF_NODE	1049:29	1049:29	12	0x3fff
LEAF_NODE	1049:35	1049:35	10	)
REL_OPERATOR	1049:37	1049:37	9	<
LEAF_NODE	1049:37	1049:37	10	<
FIELD	1049:39	1049:39	9	0
LEAF_NODE	1049:39	1049:39	10	0
LEAF_NODE	1049:40	1049:40	7	)
STATEMENTS	1049:42	1052:2	7	
LEAF_NODE	1049:42	1049:42	8	{
STATEMENTS	1050:3	1051:3	8	
EXPR_STATEMENT	1050:3	1050:12	9	u = U_NEU ;
EXPR	1050:3	1050:3	10	u = U_NEU
ASSIGN	1050:3	1050:7	11	u = U_NEU
LVAL	1050:3	1050:3	12	u
FIELD	1050:3	1050:3	13	u
LEAF_NODE	1050:3	1050:3	14	u
ASSIGN_OP	1050:5	1050:5	12	=
LEAF_NODE	1050:5	1050:5	13	=
RVAL	1050:7	1050:7	12	U_NEU
FIELD	1050:7	1050:7	13	U_NEU
LEAF_NODE	1050:7	1050:7	14	U_NEU
LEAF_NODE	1050:12	1050:12	10	;
EXPR_STATEMENT	1051:3	1051:12	9	v = V_NEU ;
EXPR	1051:3	1051:3	10	v = V_NEU
ASSIGN	1051:3	1051:7	11	v = V_NEU
LVAL	1051:3	1051:3	12	v
FIELD	1051:3	1051:3	13	v
LEAF_NODE	1051:3	1051:3	14	v
ASSIGN_OP	1051:5	1051:5	12	=
LEAF_NODE	1051:5	1051:5	13	=
RVAL	1051:7	1051:7	12	V_NEU
FIELD	1051:7	1051:7	13	V_NEU
LEAF_NODE	1051:7	1051:7	14	V_NEU
LEAF_NODE	1051:12	1051:12	10	;
LEAF_NODE	1052:2	1052:2	8	}
EXPR_STATEMENT	1053:2	1053:33	6	* luv3 ++ = ( int16 ) ( u * ( 1L << 15 ) ) ;
EXPR	1053:2	1053:2	7	* luv3 ++ = ( int16 ) ( u * ( 1L << 15 ) )
ASSIGN	1053:2	1053:12	8	* luv3 ++ = ( int16 ) ( u * ( 1L << 15 ) )
LVAL	1053:2	1053:2	9	* luv3 ++
UNARY_EXPR	1053:2	1053:3	10	* luv3 ++
UNARY_OPERATOR	1053:2	1053:2	11	*
LEAF_NODE	1053:2	1053:2	12	*
FIELD	1053:3	1053:7	11	luv3 ++
LEAF_NODE	1053:3	1053:3	12	luv3
LEAF_NODE	1053:7	1053:7	12	++
ASSIGN_OP	1053:10	1053:10	9	=
LEAF_NODE	1053:10	1053:10	10	=
RVAL	1053:12	1053:32	9	( int16 ) ( u * ( 1L << 15 ) )
LEAF_NODE	1053:12	1053:12	10	(
TYPE_NAME	1053:13	1053:13	10	int16
LEAF_NODE	1053:13	1053:13	11	int16
LEAF_NODE	1053:18	1053:18	10	)
LEAF_NODE	1053:19	1053:19	10	(
FIELD	1053:20	1053:20	10	u
LEAF_NODE	1053:20	1053:20	11	u
LEAF_NODE	1053:22	1053:22	10	*
LEAF_NODE	1053:24	1053:24	10	(
FIELD	1053:25	1053:25	10	1L
LEAF_NODE	1053:25	1053:25	11	1L
LEAF_NODE	1053:27	1053:27	10	<<
FIELD	1053:29	1053:29	10	15
LEAF_NODE	1053:29	1053:29	11	15
LEAF_NODE	1053:31	1053:31	10	)
LEAF_NODE	1053:32	1053:32	10	)
LEAF_NODE	1053:33	1053:33	7	;
EXPR_STATEMENT	1054:2	1054:33	6	* luv3 ++ = ( int16 ) ( v * ( 1L << 15 ) ) ;
EXPR	1054:2	1054:2	7	* luv3 ++ = ( int16 ) ( v * ( 1L << 15 ) )
ASSIGN	1054:2	1054:12	8	* luv3 ++ = ( int16 ) ( v * ( 1L << 15 ) )
LVAL	1054:2	1054:2	9	* luv3 ++
UNARY_EXPR	1054:2	1054:3	10	* luv3 ++
UNARY_OPERATOR	1054:2	1054:2	11	*
LEAF_NODE	1054:2	1054:2	12	*
FIELD	1054:3	1054:7	11	luv3 ++
LEAF_NODE	1054:3	1054:3	12	luv3
LEAF_NODE	1054:7	1054:7	12	++
ASSIGN_OP	1054:10	1054:10	9	=
LEAF_NODE	1054:10	1054:10	10	=
RVAL	1054:12	1054:32	9	( int16 ) ( v * ( 1L << 15 ) )
LEAF_NODE	1054:12	1054:12	10	(
TYPE_NAME	1054:13	1054:13	10	int16
LEAF_NODE	1054:13	1054:13	11	int16
LEAF_NODE	1054:18	1054:18	10	)
LEAF_NODE	1054:19	1054:19	10	(
FIELD	1054:20	1054:20	10	v
LEAF_NODE	1054:20	1054:20	11	v
LEAF_NODE	1054:22	1054:22	10	*
LEAF_NODE	1054:24	1054:24	10	(
FIELD	1054:25	1054:25	10	1L
LEAF_NODE	1054:25	1054:25	11	1L
LEAF_NODE	1054:27	1054:27	10	<<
FIELD	1054:29	1054:29	10	15
LEAF_NODE	1054:29	1054:29	11	15
LEAF_NODE	1054:31	1054:31	10	)
LEAF_NODE	1054:32	1054:32	10	)
LEAF_NODE	1054:33	1054:33	7	;
EXPR_STATEMENT	1055:2	1055:7	6	luv ++ ;
EXPR	1055:2	1055:2	7	luv ++
FIELD	1055:2	1055:5	8	luv ++
LEAF_NODE	1055:2	1055:2	9	luv
LEAF_NODE	1055:5	1055:5	9	++
LEAF_NODE	1055:7	1055:7	7	;
LEAF_NODE	1056:1	1056:1	5	}
LEAF_NODE	1057:0	1057:0	2	}
FUNCTION_DEF	1059:0	1072:0	1	
RETURN_TYPE	1059:0	1059:7	2	static void
LEAF_NODE	1059:0	1059:0	3	static
TYPE_NAME	1059:7	1059:7	3	void
LEAF_NODE	1059:7	1059:7	4	void
FUNCTION_NAME	1060:0	1060:0	2	Luv24toRGB
LEAF_NODE	1060:0	1060:0	3	Luv24toRGB
PARAMETER_LIST	1060:10	1060:49	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1060:10	1060:10	3	(
PARAMETER_DECL	1060:11	1060:24	3	LogLuvState * sp
TYPE	1060:11	1060:22	4	LogLuvState *
TYPE_NAME	1060:11	1060:11	5	LogLuvState
LEAF_NODE	1060:11	1060:11	6	LogLuvState
POINTER	1060:22	1060:22	5	*
LEAF_NODE	1060:22	1060:22	6	*
NAME	1060:24	1060:24	4	sp
LEAF_NODE	1060:24	1060:24	5	sp
LEAF_NODE	1060:26	1060:26	3	,
PARAMETER_DECL	1060:28	1060:35	3	uint8 * op
TYPE	1060:28	1060:33	4	uint8 *
TYPE_NAME	1060:28	1060:28	5	uint8
LEAF_NODE	1060:28	1060:28	6	uint8
POINTER	1060:33	1060:33	5	*
LEAF_NODE	1060:33	1060:33	6	*
NAME	1060:35	1060:35	4	op
LEAF_NODE	1060:35	1060:35	5	op
LEAF_NODE	1060:37	1060:37	3	,
PARAMETER_DECL	1060:39	1060:48	3	tmsize_t n
TYPE	1060:39	1060:39	4	tmsize_t
TYPE_NAME	1060:39	1060:39	5	tmsize_t
LEAF_NODE	1060:39	1060:39	6	tmsize_t
NAME	1060:48	1060:48	4	n
LEAF_NODE	1060:48	1060:48	5	n
LEAF_NODE	1060:49	1060:49	3	)
LEAF_NODE	1061:0	1061:0	2	{
STATEMENTS	1062:1	1065:1	2	
SIMPLE_DECL	1062:1	1062:33	3	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf ;
VAR_DECL	1062:1	1062:9	4	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf
TYPE	1062:1	1062:7	5	uint32 *
TYPE_NAME	1062:1	1062:1	6	uint32
LEAF_NODE	1062:1	1062:1	7	uint32
POINTER	1062:7	1062:7	6	*
LEAF_NODE	1062:7	1062:7	7	*
NAME	1062:9	1062:9	5	luv
LEAF_NODE	1062:9	1062:9	6	luv
LEAF_NODE	0:0	0:0	5	;
INIT	1062:9	1062:9	5	luv = ( uint32 * ) sp -> tbuf
ASSIGN	1062:9	1062:15	6	luv = ( uint32 * ) sp -> tbuf
LVAL	1062:9	1062:9	7	luv
NAME	1062:9	1062:9	8	luv
LEAF_NODE	1062:9	1062:9	9	luv
ASSIGN_OP	1062:13	1062:13	7	=
LEAF_NODE	1062:13	1062:13	8	=
RVAL	1062:15	1062:25	7	( uint32 * ) sp -> tbuf
LEAF_NODE	1062:15	1062:15	8	(
TYPE_NAME	1062:16	1062:16	8	uint32
LEAF_NODE	1062:16	1062:16	9	uint32
LEAF_NODE	1062:22	1062:22	8	*
LEAF_NODE	1062:23	1062:23	8	)
FIELD	1062:25	1062:29	8	sp -> tbuf
LEAF_NODE	1062:25	1062:25	9	sp
LEAF_NODE	1062:27	1062:27	9	->
LEAF_NODE	1062:29	1062:29	9	tbuf
LEAF_NODE	1062:33	1062:33	4	;
SIMPLE_DECL	1063:1	1063:25	3	uint8 * rgb ; rgb = ( uint8 * ) op ;
VAR_DECL	1063:1	1063:8	4	uint8 * rgb ; rgb = ( uint8 * ) op
TYPE	1063:1	1063:6	5	uint8 *
TYPE_NAME	1063:1	1063:1	6	uint8
LEAF_NODE	1063:1	1063:1	7	uint8
POINTER	1063:6	1063:6	6	*
LEAF_NODE	1063:6	1063:6	7	*
NAME	1063:8	1063:8	5	rgb
LEAF_NODE	1063:8	1063:8	6	rgb
LEAF_NODE	0:0	0:0	5	;
INIT	1063:8	1063:8	5	rgb = ( uint8 * ) op
ASSIGN	1063:8	1063:14	6	rgb = ( uint8 * ) op
LVAL	1063:8	1063:8	7	rgb
NAME	1063:8	1063:8	8	rgb
LEAF_NODE	1063:8	1063:8	9	rgb
ASSIGN_OP	1063:12	1063:12	7	=
LEAF_NODE	1063:12	1063:12	8	=
RVAL	1063:14	1063:23	7	( uint8 * ) op
LEAF_NODE	1063:14	1063:14	8	(
TYPE_NAME	1063:15	1063:15	8	uint8
LEAF_NODE	1063:15	1063:15	9	uint8
LEAF_NODE	1063:20	1063:20	8	*
LEAF_NODE	1063:21	1063:21	8	)
FIELD	1063:23	1063:23	8	op
LEAF_NODE	1063:23	1063:23	9	op
LEAF_NODE	1063:25	1063:25	4	;
ITERATION	1065:1	1065:17	3	
KEYWORD	1065:1	1065:1	4	while
LEAF_NODE	1065:1	1065:1	5	while
LEAF_NODE	1065:7	1065:7	4	(
CONDITION	1065:8	1065:8	4	n -- > 0
EXPR	1065:8	1065:14	5	n -- > 0
FIELD	1065:8	1065:9	6	n --
LEAF_NODE	1065:8	1065:8	7	n
LEAF_NODE	1065:9	1065:9	7	--
REL_OPERATOR	1065:12	1065:12	6	>
LEAF_NODE	1065:12	1065:12	7	>
FIELD	1065:14	1065:14	6	0
LEAF_NODE	1065:14	1065:14	7	0
LEAF_NODE	1065:15	1065:15	4	)
STATEMENTS	1065:17	1071:1	4	
LEAF_NODE	1065:17	1065:17	5	{
STATEMENTS	1066:2	1070:2	5	
SIMPLE_DECL	1066:2	1066:14	6	float [ 3 ] xyz ;
VAR_DECL	1066:2	1066:8	7	float [ 3 ] xyz
TYPE	1066:2	1066:11	8	float [ 3 ]
TYPE_NAME	1066:2	1066:2	9	float
LEAF_NODE	1066:2	1066:2	10	float
TYPE_SUFFIX	1066:11	1066:13	9	[ 3 ]
LEAF_NODE	1066:11	1066:11	10	[
FIELD	1066:12	1066:12	10	3
LEAF_NODE	1066:12	1066:12	11	3
LEAF_NODE	1066:13	1066:13	10	]
NAME	1066:8	1066:8	8	xyz
LEAF_NODE	1066:8	1066:8	9	xyz
LEAF_NODE	1066:14	1066:14	7	;
EXPR_STATEMENT	1068:2	1068:28	6	LogLuv24toXYZ ( * luv ++ , xyz ) ;
EXPR	1068:2	1068:2	7	LogLuv24toXYZ ( * luv ++ , xyz )
FUNCTION_CALL	1068:2	1068:27	8	LogLuv24toXYZ ( * luv ++ , xyz )
CALLEE	1068:2	1068:2	9	LogLuv24toXYZ
LEAF_NODE	1068:2	1068:2	10	LogLuv24toXYZ
LEAF_NODE	1068:15	1068:15	9	(
ARGUMENT	1068:16	1068:16	9	* luv ++
UNARY_EXPR	1068:16	1068:17	10	* luv ++
UNARY_OPERATOR	1068:16	1068:16	11	*
LEAF_NODE	1068:16	1068:16	12	*
FIELD	1068:17	1068:20	11	luv ++
LEAF_NODE	1068:17	1068:17	12	luv
LEAF_NODE	1068:20	1068:20	12	++
LEAF_NODE	1068:22	1068:22	9	,
ARGUMENT	1068:24	1068:24	9	xyz
FIELD	1068:24	1068:24	10	xyz
LEAF_NODE	1068:24	1068:24	11	xyz
LEAF_NODE	1068:27	1068:27	9	)
LEAF_NODE	1068:28	1068:28	7	;
EXPR_STATEMENT	1069:2	1069:22	6	XYZtoRGB24 ( xyz , rgb ) ;
EXPR	1069:2	1069:2	7	XYZtoRGB24 ( xyz , rgb )
FUNCTION_CALL	1069:2	1069:21	8	XYZtoRGB24 ( xyz , rgb )
CALLEE	1069:2	1069:2	9	XYZtoRGB24
LEAF_NODE	1069:2	1069:2	10	XYZtoRGB24
LEAF_NODE	1069:12	1069:12	9	(
ARGUMENT	1069:13	1069:13	9	xyz
FIELD	1069:13	1069:13	10	xyz
LEAF_NODE	1069:13	1069:13	11	xyz
LEAF_NODE	1069:16	1069:16	9	,
ARGUMENT	1069:18	1069:18	9	rgb
FIELD	1069:18	1069:18	10	rgb
LEAF_NODE	1069:18	1069:18	11	rgb
LEAF_NODE	1069:21	1069:21	9	)
LEAF_NODE	1069:22	1069:22	7	;
EXPR_STATEMENT	1070:2	1070:10	6	rgb += 3 ;
EXPR	1070:2	1070:2	7	rgb += 3
ASSIGN	1070:2	1070:9	8	rgb += 3
LVAL	1070:2	1070:2	9	rgb
FIELD	1070:2	1070:2	10	rgb
LEAF_NODE	1070:2	1070:2	11	rgb
ASSIGN_OP	1070:6	1070:6	9	+=
LEAF_NODE	1070:6	1070:6	10	+=
RVAL	1070:9	1070:9	9	3
FIELD	1070:9	1070:9	10	3
LEAF_NODE	1070:9	1070:9	11	3
LEAF_NODE	1070:10	1070:10	7	;
LEAF_NODE	1071:1	1071:1	5	}
LEAF_NODE	1072:0	1072:0	2	}
FUNCTION_DEF	1074:0	1084:0	1	
RETURN_TYPE	1074:0	1074:7	2	static void
LEAF_NODE	1074:0	1074:0	3	static
TYPE_NAME	1074:7	1074:7	3	void
LEAF_NODE	1074:7	1074:7	4	void
FUNCTION_NAME	1075:0	1075:0	2	Luv24fromXYZ
LEAF_NODE	1075:0	1075:0	3	Luv24fromXYZ
PARAMETER_LIST	1075:12	1075:51	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1075:12	1075:12	3	(
PARAMETER_DECL	1075:13	1075:26	3	LogLuvState * sp
TYPE	1075:13	1075:24	4	LogLuvState *
TYPE_NAME	1075:13	1075:13	5	LogLuvState
LEAF_NODE	1075:13	1075:13	6	LogLuvState
POINTER	1075:24	1075:24	5	*
LEAF_NODE	1075:24	1075:24	6	*
NAME	1075:26	1075:26	4	sp
LEAF_NODE	1075:26	1075:26	5	sp
LEAF_NODE	1075:28	1075:28	3	,
PARAMETER_DECL	1075:30	1075:37	3	uint8 * op
TYPE	1075:30	1075:35	4	uint8 *
TYPE_NAME	1075:30	1075:30	5	uint8
LEAF_NODE	1075:30	1075:30	6	uint8
POINTER	1075:35	1075:35	5	*
LEAF_NODE	1075:35	1075:35	6	*
NAME	1075:37	1075:37	4	op
LEAF_NODE	1075:37	1075:37	5	op
LEAF_NODE	1075:39	1075:39	3	,
PARAMETER_DECL	1075:41	1075:50	3	tmsize_t n
TYPE	1075:41	1075:41	4	tmsize_t
TYPE_NAME	1075:41	1075:41	5	tmsize_t
LEAF_NODE	1075:41	1075:41	6	tmsize_t
NAME	1075:50	1075:50	4	n
LEAF_NODE	1075:50	1075:50	5	n
LEAF_NODE	1075:51	1075:51	3	)
LEAF_NODE	1076:0	1076:0	2	{
STATEMENTS	1077:1	1080:1	2	
SIMPLE_DECL	1077:1	1077:33	3	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf ;
VAR_DECL	1077:1	1077:9	4	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf
TYPE	1077:1	1077:7	5	uint32 *
TYPE_NAME	1077:1	1077:1	6	uint32
LEAF_NODE	1077:1	1077:1	7	uint32
POINTER	1077:7	1077:7	6	*
LEAF_NODE	1077:7	1077:7	7	*
NAME	1077:9	1077:9	5	luv
LEAF_NODE	1077:9	1077:9	6	luv
LEAF_NODE	0:0	0:0	5	;
INIT	1077:9	1077:9	5	luv = ( uint32 * ) sp -> tbuf
ASSIGN	1077:9	1077:15	6	luv = ( uint32 * ) sp -> tbuf
LVAL	1077:9	1077:9	7	luv
NAME	1077:9	1077:9	8	luv
LEAF_NODE	1077:9	1077:9	9	luv
ASSIGN_OP	1077:13	1077:13	7	=
LEAF_NODE	1077:13	1077:13	8	=
RVAL	1077:15	1077:25	7	( uint32 * ) sp -> tbuf
LEAF_NODE	1077:15	1077:15	8	(
TYPE_NAME	1077:16	1077:16	8	uint32
LEAF_NODE	1077:16	1077:16	9	uint32
LEAF_NODE	1077:22	1077:22	8	*
LEAF_NODE	1077:23	1077:23	8	)
FIELD	1077:25	1077:29	8	sp -> tbuf
LEAF_NODE	1077:25	1077:25	9	sp
LEAF_NODE	1077:27	1077:27	9	->
LEAF_NODE	1077:29	1077:29	9	tbuf
LEAF_NODE	1077:33	1077:33	4	;
SIMPLE_DECL	1078:1	1078:25	3	float * xyz ; xyz = ( float * ) op ;
VAR_DECL	1078:1	1078:8	4	float * xyz ; xyz = ( float * ) op
TYPE	1078:1	1078:6	5	float *
TYPE_NAME	1078:1	1078:1	6	float
LEAF_NODE	1078:1	1078:1	7	float
POINTER	1078:6	1078:6	6	*
LEAF_NODE	1078:6	1078:6	7	*
NAME	1078:8	1078:8	5	xyz
LEAF_NODE	1078:8	1078:8	6	xyz
LEAF_NODE	0:0	0:0	5	;
INIT	1078:8	1078:8	5	xyz = ( float * ) op
ASSIGN	1078:8	1078:14	6	xyz = ( float * ) op
LVAL	1078:8	1078:8	7	xyz
NAME	1078:8	1078:8	8	xyz
LEAF_NODE	1078:8	1078:8	9	xyz
ASSIGN_OP	1078:12	1078:12	7	=
LEAF_NODE	1078:12	1078:12	8	=
RVAL	1078:14	1078:23	7	( float * ) op
LEAF_NODE	1078:14	1078:14	8	(
TYPE_NAME	1078:15	1078:15	8	float
LEAF_NODE	1078:15	1078:15	9	float
LEAF_NODE	1078:20	1078:20	8	*
LEAF_NODE	1078:21	1078:21	8	)
FIELD	1078:23	1078:23	8	op
LEAF_NODE	1078:23	1078:23	9	op
LEAF_NODE	1078:25	1078:25	4	;
ITERATION	1080:1	1080:17	3	
KEYWORD	1080:1	1080:1	4	while
LEAF_NODE	1080:1	1080:1	5	while
LEAF_NODE	1080:7	1080:7	4	(
CONDITION	1080:8	1080:8	4	n -- > 0
EXPR	1080:8	1080:14	5	n -- > 0
FIELD	1080:8	1080:9	6	n --
LEAF_NODE	1080:8	1080:8	7	n
LEAF_NODE	1080:9	1080:9	7	--
REL_OPERATOR	1080:12	1080:12	6	>
LEAF_NODE	1080:12	1080:12	7	>
FIELD	1080:14	1080:14	6	0
LEAF_NODE	1080:14	1080:14	7	0
LEAF_NODE	1080:15	1080:15	4	)
STATEMENTS	1080:17	1083:1	4	
LEAF_NODE	1080:17	1080:17	5	{
STATEMENTS	1081:2	1082:2	5	
EXPR_STATEMENT	1081:2	1081:48	6	* luv ++ = LogLuv24fromXYZ ( xyz , sp -> encode_meth ) ;
EXPR	1081:2	1081:2	7	* luv ++ = LogLuv24fromXYZ ( xyz , sp -> encode_meth )
ASSIGN	1081:2	1081:11	8	* luv ++ = LogLuv24fromXYZ ( xyz , sp -> encode_meth )
LVAL	1081:2	1081:2	9	* luv ++
UNARY_EXPR	1081:2	1081:3	10	* luv ++
UNARY_OPERATOR	1081:2	1081:2	11	*
LEAF_NODE	1081:2	1081:2	12	*
FIELD	1081:3	1081:6	11	luv ++
LEAF_NODE	1081:3	1081:3	12	luv
LEAF_NODE	1081:6	1081:6	12	++
ASSIGN_OP	1081:9	1081:9	9	=
LEAF_NODE	1081:9	1081:9	10	=
RVAL	1081:11	1081:11	9	LogLuv24fromXYZ ( xyz , sp -> encode_meth )
FUNCTION_CALL	1081:11	1081:47	10	LogLuv24fromXYZ ( xyz , sp -> encode_meth )
CALLEE	1081:11	1081:11	11	LogLuv24fromXYZ
LEAF_NODE	1081:11	1081:11	12	LogLuv24fromXYZ
LEAF_NODE	1081:26	1081:26	11	(
ARGUMENT	1081:27	1081:27	11	xyz
FIELD	1081:27	1081:27	12	xyz
LEAF_NODE	1081:27	1081:27	13	xyz
LEAF_NODE	1081:30	1081:30	11	,
ARGUMENT	1081:32	1081:32	11	sp -> encode_meth
FIELD	1081:32	1081:36	12	sp -> encode_meth
LEAF_NODE	1081:32	1081:32	13	sp
LEAF_NODE	1081:34	1081:34	13	->
LEAF_NODE	1081:36	1081:36	13	encode_meth
LEAF_NODE	1081:47	1081:47	11	)
LEAF_NODE	1081:48	1081:48	7	;
EXPR_STATEMENT	1082:2	1082:10	6	xyz += 3 ;
EXPR	1082:2	1082:2	7	xyz += 3
ASSIGN	1082:2	1082:9	8	xyz += 3
LVAL	1082:2	1082:2	9	xyz
FIELD	1082:2	1082:2	10	xyz
LEAF_NODE	1082:2	1082:2	11	xyz
ASSIGN_OP	1082:6	1082:6	9	+=
LEAF_NODE	1082:6	1082:6	10	+=
RVAL	1082:9	1082:9	9	3
FIELD	1082:9	1082:9	10	3
LEAF_NODE	1082:9	1082:9	11	3
LEAF_NODE	1082:10	1082:10	7	;
LEAF_NODE	1083:1	1083:1	5	}
LEAF_NODE	1084:0	1084:0	2	}
FUNCTION_DEF	1086:0	1111:0	1	
RETURN_TYPE	1086:0	1086:7	2	static void
LEAF_NODE	1086:0	1086:0	3	static
TYPE_NAME	1086:7	1086:7	3	void
LEAF_NODE	1086:7	1086:7	4	void
FUNCTION_NAME	1087:0	1087:0	2	Luv24fromLuv48
LEAF_NODE	1087:0	1087:0	3	Luv24fromLuv48
PARAMETER_LIST	1087:14	1087:53	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1087:14	1087:14	3	(
PARAMETER_DECL	1087:15	1087:28	3	LogLuvState * sp
TYPE	1087:15	1087:26	4	LogLuvState *
TYPE_NAME	1087:15	1087:15	5	LogLuvState
LEAF_NODE	1087:15	1087:15	6	LogLuvState
POINTER	1087:26	1087:26	5	*
LEAF_NODE	1087:26	1087:26	6	*
NAME	1087:28	1087:28	4	sp
LEAF_NODE	1087:28	1087:28	5	sp
LEAF_NODE	1087:30	1087:30	3	,
PARAMETER_DECL	1087:32	1087:39	3	uint8 * op
TYPE	1087:32	1087:37	4	uint8 *
TYPE_NAME	1087:32	1087:32	5	uint8
LEAF_NODE	1087:32	1087:32	6	uint8
POINTER	1087:37	1087:37	5	*
LEAF_NODE	1087:37	1087:37	6	*
NAME	1087:39	1087:39	4	op
LEAF_NODE	1087:39	1087:39	5	op
LEAF_NODE	1087:41	1087:41	3	,
PARAMETER_DECL	1087:43	1087:52	3	tmsize_t n
TYPE	1087:43	1087:43	4	tmsize_t
TYPE_NAME	1087:43	1087:43	5	tmsize_t
LEAF_NODE	1087:43	1087:43	6	tmsize_t
NAME	1087:52	1087:52	4	n
LEAF_NODE	1087:52	1087:52	5	n
LEAF_NODE	1087:53	1087:53	3	)
LEAF_NODE	1088:0	1088:0	2	{
STATEMENTS	1089:1	1092:1	2	
SIMPLE_DECL	1089:1	1089:33	3	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf ;
VAR_DECL	1089:1	1089:9	4	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf
TYPE	1089:1	1089:7	5	uint32 *
TYPE_NAME	1089:1	1089:1	6	uint32
LEAF_NODE	1089:1	1089:1	7	uint32
POINTER	1089:7	1089:7	6	*
LEAF_NODE	1089:7	1089:7	7	*
NAME	1089:9	1089:9	5	luv
LEAF_NODE	1089:9	1089:9	6	luv
LEAF_NODE	0:0	0:0	5	;
INIT	1089:9	1089:9	5	luv = ( uint32 * ) sp -> tbuf
ASSIGN	1089:9	1089:15	6	luv = ( uint32 * ) sp -> tbuf
LVAL	1089:9	1089:9	7	luv
NAME	1089:9	1089:9	8	luv
LEAF_NODE	1089:9	1089:9	9	luv
ASSIGN_OP	1089:13	1089:13	7	=
LEAF_NODE	1089:13	1089:13	8	=
RVAL	1089:15	1089:25	7	( uint32 * ) sp -> tbuf
LEAF_NODE	1089:15	1089:15	8	(
TYPE_NAME	1089:16	1089:16	8	uint32
LEAF_NODE	1089:16	1089:16	9	uint32
LEAF_NODE	1089:22	1089:22	8	*
LEAF_NODE	1089:23	1089:23	8	)
FIELD	1089:25	1089:29	8	sp -> tbuf
LEAF_NODE	1089:25	1089:25	9	sp
LEAF_NODE	1089:27	1089:27	9	->
LEAF_NODE	1089:29	1089:29	9	tbuf
LEAF_NODE	1089:33	1089:33	4	;
SIMPLE_DECL	1090:1	1090:26	3	int16 * luv3 ; luv3 = ( int16 * ) op ;
VAR_DECL	1090:1	1090:8	4	int16 * luv3 ; luv3 = ( int16 * ) op
TYPE	1090:1	1090:6	5	int16 *
TYPE_NAME	1090:1	1090:1	6	int16
LEAF_NODE	1090:1	1090:1	7	int16
POINTER	1090:6	1090:6	6	*
LEAF_NODE	1090:6	1090:6	7	*
NAME	1090:8	1090:8	5	luv3
LEAF_NODE	1090:8	1090:8	6	luv3
LEAF_NODE	0:0	0:0	5	;
INIT	1090:8	1090:8	5	luv3 = ( int16 * ) op
ASSIGN	1090:8	1090:15	6	luv3 = ( int16 * ) op
LVAL	1090:8	1090:8	7	luv3
NAME	1090:8	1090:8	8	luv3
LEAF_NODE	1090:8	1090:8	9	luv3
ASSIGN_OP	1090:13	1090:13	7	=
LEAF_NODE	1090:13	1090:13	8	=
RVAL	1090:15	1090:24	7	( int16 * ) op
LEAF_NODE	1090:15	1090:15	8	(
TYPE_NAME	1090:16	1090:16	8	int16
LEAF_NODE	1090:16	1090:16	9	int16
LEAF_NODE	1090:21	1090:21	8	*
LEAF_NODE	1090:22	1090:22	8	)
FIELD	1090:24	1090:24	8	op
LEAF_NODE	1090:24	1090:24	9	op
LEAF_NODE	1090:26	1090:26	4	;
ITERATION	1092:1	1092:17	3	
KEYWORD	1092:1	1092:1	4	while
LEAF_NODE	1092:1	1092:1	5	while
LEAF_NODE	1092:7	1092:7	4	(
CONDITION	1092:8	1092:8	4	n -- > 0
EXPR	1092:8	1092:14	5	n -- > 0
FIELD	1092:8	1092:9	6	n --
LEAF_NODE	1092:8	1092:8	7	n
LEAF_NODE	1092:9	1092:9	7	--
REL_OPERATOR	1092:12	1092:12	6	>
LEAF_NODE	1092:12	1092:12	7	>
FIELD	1092:14	1092:14	6	0
LEAF_NODE	1092:14	1092:14	7	0
LEAF_NODE	1092:15	1092:15	4	)
STATEMENTS	1092:17	1110:1	4	
LEAF_NODE	1092:17	1092:17	5	{
STATEMENTS	1093:2	1109:2	5	
SIMPLE_DECL	1093:2	1093:12	6	int Le , int Ce ;
INIT_DECL_LIST	1093:2	1093:2	7	int Le , int Ce
VAR_DECL	1093:2	1093:6	8	int Le
TYPE	1093:2	1093:2	9	int
TYPE_NAME	1093:2	1093:2	10	int
LEAF_NODE	1093:2	1093:2	11	int
NAME	1093:6	1093:6	9	Le
LEAF_NODE	1093:6	1093:6	10	Le
LEAF_NODE	1093:8	1093:8	8	,
VAR_DECL	1093:2	1093:10	8	int Ce
TYPE	1093:2	1093:2	9	int
TYPE_NAME	1093:2	1093:2	10	int
LEAF_NODE	1093:2	1093:2	11	int
NAME	1093:10	1093:10	9	Ce
LEAF_NODE	1093:10	1093:10	10	Ce
LEAF_NODE	1093:12	1093:12	7	;
SELECTION	1095:2	1096:3	6	
KEYWORD	1095:2	1095:2	7	if
LEAF_NODE	1095:2	1095:2	8	if
LEAF_NODE	1095:5	1095:5	7	(
CONDITION	1095:6	1095:6	7	luv3 [ 0 ] <= 0
EXPR	1095:6	1095:17	8	luv3 [ 0 ] <= 0
FIELD	1095:6	1095:12	9	luv3 [ 0 ]
LEAF_NODE	1095:6	1095:6	10	luv3
LEAF_NODE	1095:10	1095:10	10	[
EXPR	1095:11	1095:11	10	0
FIELD	1095:11	1095:11	11	0
LEAF_NODE	1095:11	1095:11	12	0
LEAF_NODE	1095:12	1095:12	10	]
REL_OPERATOR	1095:14	1095:14	9	<=
LEAF_NODE	1095:14	1095:14	10	<=
FIELD	1095:17	1095:17	9	0
LEAF_NODE	1095:17	1095:17	10	0
LEAF_NODE	1095:18	1095:18	7	)
STATEMENTS	1096:3	1096:3	7	
EXPR_STATEMENT	1096:3	1096:9	8	Le = 0 ;
EXPR	1096:3	1096:3	9	Le = 0
ASSIGN	1096:3	1096:8	10	Le = 0
LVAL	1096:3	1096:3	11	Le
FIELD	1096:3	1096:3	12	Le
LEAF_NODE	1096:3	1096:3	13	Le
ASSIGN_OP	1096:6	1096:6	11	=
LEAF_NODE	1096:6	1096:6	12	=
RVAL	1096:8	1096:8	11	0
FIELD	1096:8	1096:8	12	0
LEAF_NODE	1096:8	1096:8	13	0
LEAF_NODE	1096:9	1096:9	9	;
SELECTION	1097:2	1097:7	6	
KEYWORD	1097:2	1097:2	7	else
LEAF_NODE	1097:2	1097:2	8	else
STATEMENTS	1097:7	1097:7	7	
SELECTION	1097:7	1098:3	8	
KEYWORD	1097:7	1097:7	9	if
LEAF_NODE	1097:7	1097:7	10	if
LEAF_NODE	1097:10	1097:10	9	(
CONDITION	1097:11	1097:11	9	luv3 [ 0 ] >= ( 1 << 12 ) + 3314
EXPR	1097:11	1097:30	10	luv3 [ 0 ] >= ( 1 << 12 ) + 3314
FIELD	1097:11	1097:17	11	luv3 [ 0 ]
LEAF_NODE	1097:11	1097:11	12	luv3
LEAF_NODE	1097:15	1097:15	12	[
EXPR	1097:16	1097:16	12	0
FIELD	1097:16	1097:16	13	0
LEAF_NODE	1097:16	1097:16	14	0
LEAF_NODE	1097:17	1097:17	12	]
REL_OPERATOR	1097:19	1097:19	11	>=
LEAF_NODE	1097:19	1097:19	12	>=
LEAF_NODE	1097:22	1097:22	11	(
FIELD	1097:23	1097:23	11	1
LEAF_NODE	1097:23	1097:23	12	1
LEAF_NODE	1097:24	1097:24	11	<<
FIELD	1097:26	1097:26	11	12
LEAF_NODE	1097:26	1097:26	12	12
LEAF_NODE	1097:28	1097:28	11	)
LEAF_NODE	1097:29	1097:29	11	+
FIELD	1097:30	1097:30	11	3314
LEAF_NODE	1097:30	1097:30	12	3314
LEAF_NODE	1097:34	1097:34	9	)
STATEMENTS	1098:3	1098:3	9	
EXPR_STATEMENT	1098:3	1098:19	10	Le = ( 1 << 10 ) - 1 ;
EXPR	1098:3	1098:3	11	Le = ( 1 << 10 ) - 1
ASSIGN	1098:3	1098:8	12	Le = ( 1 << 10 ) - 1
LVAL	1098:3	1098:3	13	Le
FIELD	1098:3	1098:3	14	Le
LEAF_NODE	1098:3	1098:3	15	Le
ASSIGN_OP	1098:6	1098:6	13	=
LEAF_NODE	1098:6	1098:6	14	=
RVAL	1098:8	1098:18	13	( 1 << 10 ) - 1
LEAF_NODE	1098:8	1098:8	14	(
FIELD	1098:9	1098:9	14	1
LEAF_NODE	1098:9	1098:9	15	1
LEAF_NODE	1098:10	1098:10	14	<<
FIELD	1098:12	1098:12	14	10
LEAF_NODE	1098:12	1098:12	15	10
LEAF_NODE	1098:14	1098:14	14	)
LEAF_NODE	1098:16	1098:16	14	-
FIELD	1098:18	1098:18	14	1
LEAF_NODE	1098:18	1098:18	15	1
LEAF_NODE	1098:19	1098:19	11	;
SELECTION	1099:2	1099:7	6	
KEYWORD	1099:2	1099:2	7	else
LEAF_NODE	1099:2	1099:2	8	else
STATEMENTS	1099:7	1099:7	7	
SELECTION	1099:7	1100:3	8	
KEYWORD	1099:7	1099:7	9	if
LEAF_NODE	1099:7	1099:7	10	if
LEAF_NODE	1099:10	1099:10	9	(
CONDITION	1099:11	1099:11	9	sp -> encode_meth == SGILOGENCODE_NODITHER
EXPR	1099:11	1099:30	10	sp -> encode_meth == SGILOGENCODE_NODITHER
FIELD	1099:11	1099:15	11	sp -> encode_meth
LEAF_NODE	1099:11	1099:11	12	sp
LEAF_NODE	1099:13	1099:13	12	->
LEAF_NODE	1099:15	1099:15	12	encode_meth
EQ_OPERATOR	1099:27	1099:27	11	==
LEAF_NODE	1099:27	1099:27	12	==
FIELD	1099:30	1099:30	11	SGILOGENCODE_NODITHER
LEAF_NODE	1099:30	1099:30	12	SGILOGENCODE_NODITHER
LEAF_NODE	1099:51	1099:51	9	)
STATEMENTS	1100:3	1100:3	9	
EXPR_STATEMENT	1100:3	1100:27	10	Le = ( luv3 [ 0 ] - 3314 ) >> 2 ;
EXPR	1100:3	1100:3	11	Le = ( luv3 [ 0 ] - 3314 ) >> 2
ASSIGN	1100:3	1100:8	12	Le = ( luv3 [ 0 ] - 3314 ) >> 2
LVAL	1100:3	1100:3	13	Le
FIELD	1100:3	1100:3	14	Le
LEAF_NODE	1100:3	1100:3	15	Le
ASSIGN_OP	1100:6	1100:6	13	=
LEAF_NODE	1100:6	1100:6	14	=
RVAL	1100:8	1100:26	13	( luv3 [ 0 ] - 3314 ) >> 2
LEAF_NODE	1100:8	1100:8	14	(
FIELD	1100:9	1100:15	14	luv3 [ 0 ]
LEAF_NODE	1100:9	1100:9	15	luv3
LEAF_NODE	1100:13	1100:13	15	[
EXPR	1100:14	1100:14	15	0
FIELD	1100:14	1100:14	16	0
LEAF_NODE	1100:14	1100:14	17	0
LEAF_NODE	1100:15	1100:15	15	]
LEAF_NODE	1100:16	1100:16	14	-
FIELD	1100:17	1100:17	14	3314
LEAF_NODE	1100:17	1100:17	15	3314
LEAF_NODE	1100:21	1100:21	14	)
LEAF_NODE	1100:23	1100:23	14	>>
FIELD	1100:26	1100:26	14	2
LEAF_NODE	1100:26	1100:26	15	2
LEAF_NODE	1100:27	1100:27	11	;
SELECTION	1101:2	1102:3	6	
KEYWORD	1101:2	1101:2	7	else
LEAF_NODE	1101:2	1101:2	8	else
STATEMENTS	1102:3	1102:3	7	
EXPR_STATEMENT	1102:3	1102:52	8	Le = itrunc ( .25 * ( luv3 [ 0 ] - 3314. ) , sp -> encode_meth ) ;
EXPR	1102:3	1102:3	9	Le = itrunc ( .25 * ( luv3 [ 0 ] - 3314. ) , sp -> encode_meth )
ASSIGN	1102:3	1102:8	10	Le = itrunc ( .25 * ( luv3 [ 0 ] - 3314. ) , sp -> encode_meth )
LVAL	1102:3	1102:3	11	Le
FIELD	1102:3	1102:3	12	Le
LEAF_NODE	1102:3	1102:3	13	Le
ASSIGN_OP	1102:6	1102:6	11	=
LEAF_NODE	1102:6	1102:6	12	=
RVAL	1102:8	1102:8	11	itrunc ( .25 * ( luv3 [ 0 ] - 3314. ) , sp -> encode_meth )
FUNCTION_CALL	1102:8	1102:51	12	itrunc ( .25 * ( luv3 [ 0 ] - 3314. ) , sp -> encode_meth )
CALLEE	1102:8	1102:8	13	itrunc
LEAF_NODE	1102:8	1102:8	14	itrunc
LEAF_NODE	1102:14	1102:14	13	(
ARGUMENT	1102:15	1102:33	13	.25 * ( luv3 [ 0 ] - 3314. )
FIELD	1102:15	1102:15	14	.25
LEAF_NODE	1102:15	1102:15	15	.25
LEAF_NODE	1102:18	1102:18	14	*
LEAF_NODE	1102:19	1102:19	14	(
FIELD	1102:20	1102:26	14	luv3 [ 0 ]
LEAF_NODE	1102:20	1102:20	15	luv3
LEAF_NODE	1102:24	1102:24	15	[
EXPR	1102:25	1102:25	15	0
FIELD	1102:25	1102:25	16	0
LEAF_NODE	1102:25	1102:25	17	0
LEAF_NODE	1102:26	1102:26	15	]
LEAF_NODE	1102:27	1102:27	14	-
FIELD	1102:28	1102:28	14	3314.
LEAF_NODE	1102:28	1102:28	15	3314.
LEAF_NODE	1102:33	1102:33	14	)
LEAF_NODE	1102:34	1102:34	13	,
ARGUMENT	1102:36	1102:36	13	sp -> encode_meth
FIELD	1102:36	1102:40	14	sp -> encode_meth
LEAF_NODE	1102:36	1102:36	15	sp
LEAF_NODE	1102:38	1102:38	15	->
LEAF_NODE	1102:40	1102:40	15	encode_meth
LEAF_NODE	1102:51	1102:51	13	)
LEAF_NODE	1102:52	1102:52	9	;
EXPR_STATEMENT	1104:2	1105:21	6	Ce = uv_encode ( ( luv3 [ 1 ] + .5 ) / ( 1 << 15 ) , ( luv3 [ 2 ] + .5 ) / ( 1 << 15 ) , sp -> encode_meth ) ;
EXPR	1104:2	1104:2	7	Ce = uv_encode ( ( luv3 [ 1 ] + .5 ) / ( 1 << 15 ) , ( luv3 [ 2 ] + .5 ) / ( 1 << 15 ) , sp -> encode_meth )
ASSIGN	1104:2	1104:7	8	Ce = uv_encode ( ( luv3 [ 1 ] + .5 ) / ( 1 << 15 ) , ( luv3 [ 2 ] + .5 ) / ( 1 << 15 ) , sp -> encode_meth )
LVAL	1104:2	1104:2	9	Ce
FIELD	1104:2	1104:2	10	Ce
LEAF_NODE	1104:2	1104:2	11	Ce
ASSIGN_OP	1104:5	1104:5	9	=
LEAF_NODE	1104:5	1104:5	10	=
RVAL	1104:7	1104:7	9	uv_encode ( ( luv3 [ 1 ] + .5 ) / ( 1 << 15 ) , ( luv3 [ 2 ] + .5 ) / ( 1 << 15 ) , sp -> encode_meth )
FUNCTION_CALL	1104:7	1105:20	10	uv_encode ( ( luv3 [ 1 ] + .5 ) / ( 1 << 15 ) , ( luv3 [ 2 ] + .5 ) / ( 1 << 15 ) , sp -> encode_meth )
CALLEE	1104:7	1104:7	11	uv_encode
LEAF_NODE	1104:7	1104:7	12	uv_encode
LEAF_NODE	1104:16	1104:16	11	(
ARGUMENT	1104:17	1104:36	11	( luv3 [ 1 ] + .5 ) / ( 1 << 15 )
LEAF_NODE	1104:17	1104:17	12	(
FIELD	1104:18	1104:24	12	luv3 [ 1 ]
LEAF_NODE	1104:18	1104:18	13	luv3
LEAF_NODE	1104:22	1104:22	13	[
EXPR	1104:23	1104:23	13	1
FIELD	1104:23	1104:23	14	1
LEAF_NODE	1104:23	1104:23	15	1
LEAF_NODE	1104:24	1104:24	13	]
LEAF_NODE	1104:25	1104:25	12	+
FIELD	1104:26	1104:26	12	.5
LEAF_NODE	1104:26	1104:26	13	.5
LEAF_NODE	1104:28	1104:28	12	)
LEAF_NODE	1104:29	1104:29	12	/
LEAF_NODE	1104:30	1104:30	12	(
FIELD	1104:31	1104:31	12	1
LEAF_NODE	1104:31	1104:31	13	1
LEAF_NODE	1104:32	1104:32	12	<<
FIELD	1104:34	1104:34	12	15
LEAF_NODE	1104:34	1104:34	13	15
LEAF_NODE	1104:36	1104:36	12	)
LEAF_NODE	1104:37	1104:37	11	,
ARGUMENT	1104:39	1104:58	11	( luv3 [ 2 ] + .5 ) / ( 1 << 15 )
LEAF_NODE	1104:39	1104:39	12	(
FIELD	1104:40	1104:46	12	luv3 [ 2 ]
LEAF_NODE	1104:40	1104:40	13	luv3
LEAF_NODE	1104:44	1104:44	13	[
EXPR	1104:45	1104:45	13	2
FIELD	1104:45	1104:45	14	2
LEAF_NODE	1104:45	1104:45	15	2
LEAF_NODE	1104:46	1104:46	13	]
LEAF_NODE	1104:47	1104:47	12	+
FIELD	1104:48	1104:48	12	.5
LEAF_NODE	1104:48	1104:48	13	.5
LEAF_NODE	1104:50	1104:50	12	)
LEAF_NODE	1104:51	1104:51	12	/
LEAF_NODE	1104:52	1104:52	12	(
FIELD	1104:53	1104:53	12	1
LEAF_NODE	1104:53	1104:53	13	1
LEAF_NODE	1104:54	1104:54	12	<<
FIELD	1104:56	1104:56	12	15
LEAF_NODE	1104:56	1104:56	13	15
LEAF_NODE	1104:58	1104:58	12	)
LEAF_NODE	1104:59	1104:59	11	,
ARGUMENT	1105:5	1105:5	11	sp -> encode_meth
FIELD	1105:5	1105:9	12	sp -> encode_meth
LEAF_NODE	1105:5	1105:5	13	sp
LEAF_NODE	1105:7	1105:7	13	->
LEAF_NODE	1105:9	1105:9	13	encode_meth
LEAF_NODE	1105:20	1105:20	11	)
LEAF_NODE	1105:21	1105:21	7	;
SELECTION	1106:2	1107:3	6	
KEYWORD	1106:2	1106:2	7	if
LEAF_NODE	1106:2	1106:2	8	if
LEAF_NODE	1106:5	1106:5	7	(
CONDITION	1106:6	1106:6	7	Ce < 0
EXPR	1106:6	1106:11	8	Ce < 0
FIELD	1106:6	1106:6	9	Ce
LEAF_NODE	1106:6	1106:6	10	Ce
REL_OPERATOR	1106:9	1106:9	9	<
LEAF_NODE	1106:9	1106:9	10	<
FIELD	1106:11	1106:11	9	0
LEAF_NODE	1106:11	1106:11	10	0
LEAF_NODE	1106:12	1106:12	7	)
STATEMENTS	1107:3	1107:3	7	
EXPR_STATEMENT	1107:3	1107:54	8	Ce = uv_encode ( U_NEU , V_NEU , SGILOGENCODE_NODITHER ) ;
EXPR	1107:3	1107:3	9	Ce = uv_encode ( U_NEU , V_NEU , SGILOGENCODE_NODITHER )
ASSIGN	1107:3	1107:8	10	Ce = uv_encode ( U_NEU , V_NEU , SGILOGENCODE_NODITHER )
LVAL	1107:3	1107:3	11	Ce
FIELD	1107:3	1107:3	12	Ce
LEAF_NODE	1107:3	1107:3	13	Ce
ASSIGN_OP	1107:6	1107:6	11	=
LEAF_NODE	1107:6	1107:6	12	=
RVAL	1107:8	1107:8	11	uv_encode ( U_NEU , V_NEU , SGILOGENCODE_NODITHER )
FUNCTION_CALL	1107:8	1107:53	12	uv_encode ( U_NEU , V_NEU , SGILOGENCODE_NODITHER )
CALLEE	1107:8	1107:8	13	uv_encode
LEAF_NODE	1107:8	1107:8	14	uv_encode
LEAF_NODE	1107:17	1107:17	13	(
ARGUMENT	1107:18	1107:18	13	U_NEU
FIELD	1107:18	1107:18	14	U_NEU
LEAF_NODE	1107:18	1107:18	15	U_NEU
LEAF_NODE	1107:23	1107:23	13	,
ARGUMENT	1107:25	1107:25	13	V_NEU
FIELD	1107:25	1107:25	14	V_NEU
LEAF_NODE	1107:25	1107:25	15	V_NEU
LEAF_NODE	1107:30	1107:30	13	,
ARGUMENT	1107:32	1107:32	13	SGILOGENCODE_NODITHER
FIELD	1107:32	1107:32	14	SGILOGENCODE_NODITHER
LEAF_NODE	1107:32	1107:32	15	SGILOGENCODE_NODITHER
LEAF_NODE	1107:53	1107:53	13	)
LEAF_NODE	1107:54	1107:54	9	;
EXPR_STATEMENT	1108:2	1108:32	6	* luv ++ = ( uint32 ) Le << 14 | Ce ;
EXPR	1108:2	1108:2	7	* luv ++ = ( uint32 ) Le << 14 | Ce
ASSIGN	1108:2	1108:11	8	* luv ++ = ( uint32 ) Le << 14 | Ce
LVAL	1108:2	1108:2	9	* luv ++
UNARY_EXPR	1108:2	1108:3	10	* luv ++
UNARY_OPERATOR	1108:2	1108:2	11	*
LEAF_NODE	1108:2	1108:2	12	*
FIELD	1108:3	1108:6	11	luv ++
LEAF_NODE	1108:3	1108:3	12	luv
LEAF_NODE	1108:6	1108:6	12	++
ASSIGN_OP	1108:9	1108:9	9	=
LEAF_NODE	1108:9	1108:9	10	=
RVAL	1108:11	1108:11	9	( uint32 ) Le << 14 | Ce
BIT_OR	1108:11	1108:30	10	( uint32 ) Le << 14 | Ce
BIT_OR_ELEM	1108:11	1108:25	11	( uint32 ) Le << 14
LEAF_NODE	1108:11	1108:11	12	(
TYPE_NAME	1108:12	1108:12	12	uint32
LEAF_NODE	1108:12	1108:12	13	uint32
LEAF_NODE	1108:18	1108:18	12	)
FIELD	1108:19	1108:19	12	Le
LEAF_NODE	1108:19	1108:19	13	Le
LEAF_NODE	1108:22	1108:22	12	<<
FIELD	1108:25	1108:25	12	14
LEAF_NODE	1108:25	1108:25	13	14
LEAF_NODE	1108:28	1108:28	11	|
BIT_OR_ELEM	1108:30	1108:30	11	Ce
FIELD	1108:30	1108:30	12	Ce
LEAF_NODE	1108:30	1108:30	13	Ce
LEAF_NODE	1108:32	1108:32	7	;
EXPR_STATEMENT	1109:2	1109:11	6	luv3 += 3 ;
EXPR	1109:2	1109:2	7	luv3 += 3
ASSIGN	1109:2	1109:10	8	luv3 += 3
LVAL	1109:2	1109:2	9	luv3
FIELD	1109:2	1109:2	10	luv3
LEAF_NODE	1109:2	1109:2	11	luv3
ASSIGN_OP	1109:7	1109:7	9	+=
LEAF_NODE	1109:7	1109:7	10	+=
RVAL	1109:10	1109:10	9	3
FIELD	1109:10	1109:10	10	3
LEAF_NODE	1109:10	1109:10	11	3
LEAF_NODE	1109:11	1109:11	7	;
LEAF_NODE	1110:1	1110:1	5	}
LEAF_NODE	1111:0	1111:0	2	}
FUNCTION_DEF	1114:0	1136:0	1	
RETURN_TYPE	1114:0	1116:0	2	static void
LEAF_NODE	1114:0	1114:0	3	static
TYPE_NAME	1116:0	1116:0	3	void
LEAF_NODE	1116:0	1116:0	4	void
FUNCTION_NAME	1117:0	1117:0	2	LogLuv32toXYZ
LEAF_NODE	1117:0	1117:0	3	LogLuv32toXYZ
PARAMETER_LIST	1117:13	1117:36	2	( uint32 p , float [ 3 ] XYZ )
LEAF_NODE	1117:13	1117:13	3	(
PARAMETER_DECL	1117:14	1117:21	3	uint32 p
TYPE	1117:14	1117:14	4	uint32
TYPE_NAME	1117:14	1117:14	5	uint32
LEAF_NODE	1117:14	1117:14	6	uint32
NAME	1117:21	1117:21	4	p
LEAF_NODE	1117:21	1117:21	5	p
LEAF_NODE	1117:22	1117:22	3	,
PARAMETER_DECL	1117:24	1117:30	3	float [ 3 ] XYZ
TYPE	1117:24	1117:33	4	float [ 3 ]
TYPE_NAME	1117:24	1117:24	5	float
LEAF_NODE	1117:24	1117:24	6	float
TYPE_SUFFIX	1117:33	1117:35	5	[ 3 ]
LEAF_NODE	1117:33	1117:33	6	[
FIELD	1117:34	1117:34	6	3
LEAF_NODE	1117:34	1117:34	7	3
LEAF_NODE	1117:35	1117:35	6	]
NAME	1117:30	1117:30	4	XYZ
LEAF_NODE	1117:30	1117:30	5	XYZ
LEAF_NODE	1117:36	1117:36	3	)
LEAF_NODE	1118:0	1118:0	2	{
STATEMENTS	1119:1	1135:33	2	
SIMPLE_DECL	1119:1	1119:24	3	double L , double u , double v , double s , double x , double y ;
INIT_DECL_LIST	1119:1	1119:1	4	double L , double u , double v , double s , double x , double y
VAR_DECL	1119:1	1119:8	5	double L
TYPE	1119:1	1119:1	6	double
TYPE_NAME	1119:1	1119:1	7	double
LEAF_NODE	1119:1	1119:1	8	double
NAME	1119:8	1119:8	6	L
LEAF_NODE	1119:8	1119:8	7	L
LEAF_NODE	1119:9	1119:9	5	,
INIT_DECL_LIST	1119:1	1119:1	5	double u , double v , double s , double x , double y
VAR_DECL	1119:1	1119:11	6	double u
TYPE	1119:1	1119:1	7	double
TYPE_NAME	1119:1	1119:1	8	double
LEAF_NODE	1119:1	1119:1	9	double
NAME	1119:11	1119:11	7	u
LEAF_NODE	1119:11	1119:11	8	u
LEAF_NODE	1119:12	1119:12	6	,
INIT_DECL_LIST	1119:1	1119:1	6	double v , double s , double x , double y
VAR_DECL	1119:1	1119:14	7	double v
TYPE	1119:1	1119:1	8	double
TYPE_NAME	1119:1	1119:1	9	double
LEAF_NODE	1119:1	1119:1	10	double
NAME	1119:14	1119:14	8	v
LEAF_NODE	1119:14	1119:14	9	v
LEAF_NODE	1119:15	1119:15	7	,
INIT_DECL_LIST	1119:1	1119:1	7	double s , double x , double y
VAR_DECL	1119:1	1119:17	8	double s
TYPE	1119:1	1119:1	9	double
TYPE_NAME	1119:1	1119:1	10	double
LEAF_NODE	1119:1	1119:1	11	double
NAME	1119:17	1119:17	9	s
LEAF_NODE	1119:17	1119:17	10	s
LEAF_NODE	1119:18	1119:18	8	,
INIT_DECL_LIST	1119:1	1119:1	8	double x , double y
VAR_DECL	1119:1	1119:20	9	double x
TYPE	1119:1	1119:1	10	double
TYPE_NAME	1119:1	1119:1	11	double
LEAF_NODE	1119:1	1119:1	12	double
NAME	1119:20	1119:20	10	x
LEAF_NODE	1119:20	1119:20	11	x
LEAF_NODE	1119:21	1119:21	9	,
VAR_DECL	1119:1	1119:23	9	double y
TYPE	1119:1	1119:1	10	double
TYPE_NAME	1119:1	1119:1	11	double
LEAF_NODE	1119:1	1119:1	12	double
NAME	1119:23	1119:23	10	y
LEAF_NODE	1119:23	1119:23	11	y
LEAF_NODE	1119:24	1119:24	4	;
EXPR_STATEMENT	1121:1	1121:28	3	L = LogL16toY ( ( int ) p >> 16 ) ;
EXPR	1121:1	1121:1	4	L = LogL16toY ( ( int ) p >> 16 )
ASSIGN	1121:1	1121:5	5	L = LogL16toY ( ( int ) p >> 16 )
LVAL	1121:1	1121:1	6	L
FIELD	1121:1	1121:1	7	L
LEAF_NODE	1121:1	1121:1	8	L
ASSIGN_OP	1121:3	1121:3	6	=
LEAF_NODE	1121:3	1121:3	7	=
RVAL	1121:5	1121:5	6	LogL16toY ( ( int ) p >> 16 )
FUNCTION_CALL	1121:5	1121:27	7	LogL16toY ( ( int ) p >> 16 )
CALLEE	1121:5	1121:5	8	LogL16toY
LEAF_NODE	1121:5	1121:5	9	LogL16toY
LEAF_NODE	1121:14	1121:14	8	(
ARGUMENT	1121:15	1121:25	8	( int ) p >> 16
LEAF_NODE	1121:15	1121:15	9	(
TYPE_NAME	1121:16	1121:16	9	int
LEAF_NODE	1121:16	1121:16	10	int
LEAF_NODE	1121:19	1121:19	9	)
FIELD	1121:20	1121:20	9	p
LEAF_NODE	1121:20	1121:20	10	p
LEAF_NODE	1121:22	1121:22	9	>>
FIELD	1121:25	1121:25	9	16
LEAF_NODE	1121:25	1121:25	10	16
LEAF_NODE	1121:27	1121:27	8	)
LEAF_NODE	1121:28	1121:28	4	;
SELECTION	1122:1	1122:14	3	
KEYWORD	1122:1	1122:1	4	if
LEAF_NODE	1122:1	1122:1	5	if
LEAF_NODE	1122:4	1122:4	4	(
CONDITION	1122:5	1122:5	4	L <= 0.
EXPR	1122:5	1122:10	5	L <= 0.
FIELD	1122:5	1122:5	6	L
LEAF_NODE	1122:5	1122:5	7	L
REL_OPERATOR	1122:7	1122:7	6	<=
LEAF_NODE	1122:7	1122:7	7	<=
FIELD	1122:10	1122:10	6	0.
LEAF_NODE	1122:10	1122:10	7	0.
LEAF_NODE	1122:12	1122:12	4	)
STATEMENTS	1122:14	1125:1	4	
LEAF_NODE	1122:14	1122:14	5	{
STATEMENTS	1123:2	1124:2	5	
EXPR_STATEMENT	1123:2	1123:31	6	XYZ [ 0 ] = XYZ [ 1 ] = XYZ [ 2 ] = 0. ;
EXPR	1123:2	1123:2	7	XYZ [ 0 ] = XYZ [ 1 ] = XYZ [ 2 ] = 0.
ASSIGN	1123:2	1123:11	8	XYZ [ 0 ] = XYZ [ 1 ] = XYZ [ 2 ] = 0.
LVAL	1123:2	1123:2	9	XYZ [ 0 ]
FIELD	1123:2	1123:7	10	XYZ [ 0 ]
LEAF_NODE	1123:2	1123:2	11	XYZ
LEAF_NODE	1123:5	1123:5	11	[
EXPR	1123:6	1123:6	11	0
FIELD	1123:6	1123:6	12	0
LEAF_NODE	1123:6	1123:6	13	0
LEAF_NODE	1123:7	1123:7	11	]
ASSIGN_OP	1123:9	1123:9	9	=
LEAF_NODE	1123:9	1123:9	10	=
RVAL	1123:11	1123:11	9	XYZ [ 1 ] = XYZ [ 2 ] = 0.
ASSIGN	1123:11	1123:20	10	XYZ [ 1 ] = XYZ [ 2 ] = 0.
LVAL	1123:11	1123:11	11	XYZ [ 1 ]
FIELD	1123:11	1123:16	12	XYZ [ 1 ]
LEAF_NODE	1123:11	1123:11	13	XYZ
LEAF_NODE	1123:14	1123:14	13	[
EXPR	1123:15	1123:15	13	1
FIELD	1123:15	1123:15	14	1
LEAF_NODE	1123:15	1123:15	15	1
LEAF_NODE	1123:16	1123:16	13	]
ASSIGN_OP	1123:18	1123:18	11	=
LEAF_NODE	1123:18	1123:18	12	=
RVAL	1123:20	1123:20	11	XYZ [ 2 ] = 0.
ASSIGN	1123:20	1123:29	12	XYZ [ 2 ] = 0.
LVAL	1123:20	1123:20	13	XYZ [ 2 ]
FIELD	1123:20	1123:25	14	XYZ [ 2 ]
LEAF_NODE	1123:20	1123:20	15	XYZ
LEAF_NODE	1123:23	1123:23	15	[
EXPR	1123:24	1123:24	15	2
FIELD	1123:24	1123:24	16	2
LEAF_NODE	1123:24	1123:24	17	2
LEAF_NODE	1123:25	1123:25	15	]
ASSIGN_OP	1123:27	1123:27	13	=
LEAF_NODE	1123:27	1123:27	14	=
RVAL	1123:29	1123:29	13	0.
FIELD	1123:29	1123:29	14	0.
LEAF_NODE	1123:29	1123:29	15	0.
LEAF_NODE	1123:31	1123:31	7	;
JUMP_STATEMENT	1124:2	1124:8	6	return DESTINATION ;
KEYWORD	1124:2	1124:2	7	return
LEAF_NODE	1124:2	1124:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1124:8	1124:8	7	;
LEAF_NODE	1125:1	1125:1	5	}
LEAF_NODE	1127:1	1127:1	3	u
LEAF_NODE	1127:3	1127:3	3	=
LEAF_NODE	1127:5	1127:5	3	1.
LEAF_NODE	1127:7	1127:7	3	/
EXPR_STATEMENT	1127:8	1127:38	3	UVSCALE * ( ( p >> 8 & 0xff ) + .5 ) ;
EXPR	1127:8	1127:37	4	UVSCALE * ( ( p >> 8 & 0xff ) + .5 )
FIELD	1127:8	1127:8	5	UVSCALE
LEAF_NODE	1127:8	1127:8	6	UVSCALE
LEAF_NODE	1127:16	1127:16	5	*
LEAF_NODE	1127:18	1127:18	5	(
LEAF_NODE	1127:19	1127:19	5	(
FIELD	1127:20	1127:20	5	p
LEAF_NODE	1127:20	1127:20	6	p
LEAF_NODE	1127:21	1127:21	5	>>
FIELD	1127:23	1127:23	5	8
LEAF_NODE	1127:23	1127:23	6	8
LEAF_NODE	1127:25	1127:25	5	&
FIELD	1127:27	1127:27	5	0xff
LEAF_NODE	1127:27	1127:27	6	0xff
LEAF_NODE	1127:31	1127:31	5	)
LEAF_NODE	1127:33	1127:33	5	+
FIELD	1127:35	1127:35	5	.5
LEAF_NODE	1127:35	1127:35	6	.5
LEAF_NODE	1127:37	1127:37	5	)
LEAF_NODE	1127:38	1127:38	4	;
LEAF_NODE	1128:1	1128:1	3	v
LEAF_NODE	1128:3	1128:3	3	=
LEAF_NODE	1128:5	1128:5	3	1.
LEAF_NODE	1128:7	1128:7	3	/
EXPR_STATEMENT	1128:8	1128:35	3	UVSCALE * ( ( p & 0xff ) + .5 ) ;
EXPR	1128:8	1128:34	4	UVSCALE * ( ( p & 0xff ) + .5 )
FIELD	1128:8	1128:8	5	UVSCALE
LEAF_NODE	1128:8	1128:8	6	UVSCALE
LEAF_NODE	1128:16	1128:16	5	*
LEAF_NODE	1128:18	1128:18	5	(
LEAF_NODE	1128:19	1128:19	5	(
FIELD	1128:20	1128:20	5	p
LEAF_NODE	1128:20	1128:20	6	p
LEAF_NODE	1128:22	1128:22	5	&
FIELD	1128:24	1128:24	5	0xff
LEAF_NODE	1128:24	1128:24	6	0xff
LEAF_NODE	1128:28	1128:28	5	)
LEAF_NODE	1128:30	1128:30	5	+
FIELD	1128:32	1128:32	5	.5
LEAF_NODE	1128:32	1128:32	6	.5
LEAF_NODE	1128:34	1128:34	5	)
LEAF_NODE	1128:35	1128:35	4	;
EXPR_STATEMENT	1129:1	1129:28	3	s = 1. / ( 6. * u - 16. * v + 12. ) ;
EXPR	1129:1	1129:1	4	s = 1. / ( 6. * u - 16. * v + 12. )
ASSIGN	1129:1	1129:5	5	s = 1. / ( 6. * u - 16. * v + 12. )
LVAL	1129:1	1129:1	6	s
FIELD	1129:1	1129:1	7	s
LEAF_NODE	1129:1	1129:1	8	s
ASSIGN_OP	1129:3	1129:3	6	=
LEAF_NODE	1129:3	1129:3	7	=
RVAL	1129:5	1129:27	6	1. / ( 6. * u - 16. * v + 12. )
FIELD	1129:5	1129:5	7	1.
LEAF_NODE	1129:5	1129:5	8	1.
LEAF_NODE	1129:7	1129:7	7	/
LEAF_NODE	1129:8	1129:8	7	(
FIELD	1129:9	1129:9	7	6.
LEAF_NODE	1129:9	1129:9	8	6.
LEAF_NODE	1129:11	1129:11	7	*
FIELD	1129:12	1129:12	7	u
LEAF_NODE	1129:12	1129:12	8	u
LEAF_NODE	1129:14	1129:14	7	-
FIELD	1129:16	1129:16	7	16.
LEAF_NODE	1129:16	1129:16	8	16.
LEAF_NODE	1129:19	1129:19	7	*
FIELD	1129:20	1129:20	7	v
LEAF_NODE	1129:20	1129:20	8	v
LEAF_NODE	1129:22	1129:22	7	+
FIELD	1129:24	1129:24	7	12.
LEAF_NODE	1129:24	1129:24	8	12.
LEAF_NODE	1129:27	1129:27	7	)
LEAF_NODE	1129:28	1129:28	4	;
LEAF_NODE	1130:1	1130:1	3	x
LEAF_NODE	1130:3	1130:3	3	=
LEAF_NODE	1130:5	1130:5	3	9.
EXPR_STATEMENT	1130:7	1130:13	3	* u * s ;
EXPR	1130:7	1130:12	4	* u * s
UNARY_EXPR	1130:7	1130:8	5	* u
UNARY_OPERATOR	1130:7	1130:7	6	*
LEAF_NODE	1130:7	1130:7	7	*
FIELD	1130:8	1130:8	6	u
LEAF_NODE	1130:8	1130:8	7	u
LEAF_NODE	1130:10	1130:10	5	*
FIELD	1130:12	1130:12	5	s
LEAF_NODE	1130:12	1130:12	6	s
LEAF_NODE	1130:13	1130:13	4	;
LEAF_NODE	1131:1	1131:1	3	y
LEAF_NODE	1131:3	1131:3	3	=
LEAF_NODE	1131:5	1131:5	3	4.
EXPR_STATEMENT	1131:7	1131:13	3	* v * s ;
EXPR	1131:7	1131:12	4	* v * s
UNARY_EXPR	1131:7	1131:8	5	* v
UNARY_OPERATOR	1131:7	1131:7	6	*
LEAF_NODE	1131:7	1131:7	7	*
FIELD	1131:8	1131:8	6	v
LEAF_NODE	1131:8	1131:8	7	v
LEAF_NODE	1131:10	1131:10	5	*
FIELD	1131:12	1131:12	5	s
LEAF_NODE	1131:12	1131:12	6	s
LEAF_NODE	1131:13	1131:13	4	;
LEAF_NODE	1133:1	1133:1	3	XYZ
LEAF_NODE	1133:4	1133:4	3	[
LEAF_NODE	1133:5	1133:5	3	0
LEAF_NODE	1133:6	1133:6	3	]
LEAF_NODE	1133:8	1133:8	3	=
LEAF_NODE	1133:10	1133:10	3	(
LEAF_NODE	1133:11	1133:11	3	float
LEAF_NODE	1133:16	1133:16	3	)
LEAF_NODE	1133:17	1133:17	3	(
LEAF_NODE	1133:18	1133:18	3	x
LEAF_NODE	1133:19	1133:19	3	/
LEAF_NODE	1133:20	1133:20	3	y
LEAF_NODE	1133:22	1133:22	3	*
LEAF_NODE	1133:24	1133:24	3	L
LEAF_NODE	1133:25	1133:25	3	)
LEAF_NODE	1133:26	1133:26	3	;
EXPR_STATEMENT	1134:1	1134:18	3	XYZ [ 1 ] = ( float ) L ;
EXPR	1134:1	1134:1	4	XYZ [ 1 ] = ( float ) L
ASSIGN	1134:1	1134:10	5	XYZ [ 1 ] = ( float ) L
LVAL	1134:1	1134:1	6	XYZ [ 1 ]
FIELD	1134:1	1134:6	7	XYZ [ 1 ]
LEAF_NODE	1134:1	1134:1	8	XYZ
LEAF_NODE	1134:4	1134:4	8	[
EXPR	1134:5	1134:5	8	1
FIELD	1134:5	1134:5	9	1
LEAF_NODE	1134:5	1134:5	10	1
LEAF_NODE	1134:6	1134:6	8	]
ASSIGN_OP	1134:8	1134:8	6	=
LEAF_NODE	1134:8	1134:8	7	=
RVAL	1134:10	1134:17	6	( float ) L
LEAF_NODE	1134:10	1134:10	7	(
TYPE_NAME	1134:11	1134:11	7	float
LEAF_NODE	1134:11	1134:11	8	float
LEAF_NODE	1134:16	1134:16	7	)
FIELD	1134:17	1134:17	7	L
LEAF_NODE	1134:17	1134:17	8	L
LEAF_NODE	1134:18	1134:18	4	;
LEAF_NODE	1135:1	1135:1	3	XYZ
LEAF_NODE	1135:4	1135:4	3	[
LEAF_NODE	1135:5	1135:5	3	2
LEAF_NODE	1135:6	1135:6	3	]
LEAF_NODE	1135:8	1135:8	3	=
LEAF_NODE	1135:10	1135:10	3	(
LEAF_NODE	1135:11	1135:11	3	float
LEAF_NODE	1135:16	1135:16	3	)
LEAF_NODE	1135:17	1135:17	3	(
LEAF_NODE	1135:18	1135:18	3	(
LEAF_NODE	1135:19	1135:19	3	1.
LEAF_NODE	1135:21	1135:21	3	-
LEAF_NODE	1135:22	1135:22	3	x
LEAF_NODE	1135:23	1135:23	3	-
LEAF_NODE	1135:24	1135:24	3	y
LEAF_NODE	1135:25	1135:25	3	)
LEAF_NODE	1135:26	1135:26	3	/
LEAF_NODE	1135:27	1135:27	3	y
LEAF_NODE	1135:29	1135:29	3	*
LEAF_NODE	1135:31	1135:31	3	L
LEAF_NODE	1135:32	1135:32	3	)
LEAF_NODE	1135:33	1135:33	3	;
LEAF_NODE	1136:0	1136:0	2	}
FUNCTION_DEF	1139:0	1165:0	1	
RETURN_TYPE	1139:0	1141:0	2	static uint32
LEAF_NODE	1139:0	1139:0	3	static
TYPE_NAME	1141:0	1141:0	3	uint32
LEAF_NODE	1141:0	1141:0	4	uint32
FUNCTION_NAME	1142:0	1142:0	2	LogLuv32fromXYZ
LEAF_NODE	1142:0	1142:0	3	LogLuv32fromXYZ
PARAMETER_LIST	1142:15	1142:36	2	( float [ 3 ] XYZ , int em )
LEAF_NODE	1142:15	1142:15	3	(
PARAMETER_DECL	1142:16	1142:22	3	float [ 3 ] XYZ
TYPE	1142:16	1142:25	4	float [ 3 ]
TYPE_NAME	1142:16	1142:16	5	float
LEAF_NODE	1142:16	1142:16	6	float
TYPE_SUFFIX	1142:25	1142:27	5	[ 3 ]
LEAF_NODE	1142:25	1142:25	6	[
FIELD	1142:26	1142:26	6	3
LEAF_NODE	1142:26	1142:26	7	3
LEAF_NODE	1142:27	1142:27	6	]
NAME	1142:22	1142:22	4	XYZ
LEAF_NODE	1142:22	1142:22	5	XYZ
LEAF_NODE	1142:28	1142:28	3	,
PARAMETER_DECL	1142:30	1142:34	3	int em
TYPE	1142:30	1142:30	4	int
TYPE_NAME	1142:30	1142:30	5	int
LEAF_NODE	1142:30	1142:30	6	int
NAME	1142:34	1142:34	4	em
LEAF_NODE	1142:34	1142:34	5	em
LEAF_NODE	1142:36	1142:36	3	)
LEAF_NODE	1143:0	1143:0	2	{
STATEMENTS	1144:1	1164:1	2	
SIMPLE_DECL	1144:1	1144:24	3	unsigned int Le , unsigned int ue , unsigned int ve ;
INIT_DECL_LIST	1144:1	1144:1	4	unsigned int Le , unsigned int ue , unsigned int ve
VAR_DECL	1144:1	1144:14	5	unsigned int Le
TYPE	1144:1	1144:1	6	unsigned int
TYPE_NAME	1144:1	1144:10	7	unsigned int
LEAF_NODE	1144:1	1144:1	8	unsigned
LEAF_NODE	1144:10	1144:10	8	int
NAME	1144:14	1144:14	6	Le
LEAF_NODE	1144:14	1144:14	7	Le
LEAF_NODE	1144:16	1144:16	5	,
INIT_DECL_LIST	1144:1	1144:1	5	unsigned int ue , unsigned int ve
VAR_DECL	1144:1	1144:18	6	unsigned int ue
TYPE	1144:1	1144:1	7	unsigned int
TYPE_NAME	1144:1	1144:10	8	unsigned int
LEAF_NODE	1144:1	1144:1	9	unsigned
LEAF_NODE	1144:10	1144:10	9	int
NAME	1144:18	1144:18	7	ue
LEAF_NODE	1144:18	1144:18	8	ue
LEAF_NODE	1144:20	1144:20	6	,
VAR_DECL	1144:1	1144:22	6	unsigned int ve
TYPE	1144:1	1144:1	7	unsigned int
TYPE_NAME	1144:1	1144:10	8	unsigned int
LEAF_NODE	1144:1	1144:1	9	unsigned
LEAF_NODE	1144:10	1144:10	9	int
NAME	1144:22	1144:22	7	ve
LEAF_NODE	1144:22	1144:22	8	ve
LEAF_NODE	1144:24	1144:24	4	;
SIMPLE_DECL	1145:1	1145:15	3	double u , double v , double s ;
INIT_DECL_LIST	1145:1	1145:1	4	double u , double v , double s
VAR_DECL	1145:1	1145:8	5	double u
TYPE	1145:1	1145:1	6	double
TYPE_NAME	1145:1	1145:1	7	double
LEAF_NODE	1145:1	1145:1	8	double
NAME	1145:8	1145:8	6	u
LEAF_NODE	1145:8	1145:8	7	u
LEAF_NODE	1145:9	1145:9	5	,
INIT_DECL_LIST	1145:1	1145:1	5	double v , double s
VAR_DECL	1145:1	1145:11	6	double v
TYPE	1145:1	1145:1	7	double
TYPE_NAME	1145:1	1145:1	8	double
LEAF_NODE	1145:1	1145:1	9	double
NAME	1145:11	1145:11	7	v
LEAF_NODE	1145:11	1145:11	8	v
LEAF_NODE	1145:12	1145:12	6	,
VAR_DECL	1145:1	1145:14	6	double s
TYPE	1145:1	1145:1	7	double
TYPE_NAME	1145:1	1145:1	8	double
LEAF_NODE	1145:1	1145:1	9	double
NAME	1145:14	1145:14	7	s
LEAF_NODE	1145:14	1145:14	8	s
LEAF_NODE	1145:15	1145:15	4	;
EXPR_STATEMENT	1147:1	1147:43	3	Le = ( unsigned int ) LogL16fromY ( XYZ [ 1 ] , em ) ;
EXPR	1147:1	1147:1	4	Le = ( unsigned int ) LogL16fromY ( XYZ [ 1 ] , em )
ASSIGN	1147:1	1147:6	5	Le = ( unsigned int ) LogL16fromY ( XYZ [ 1 ] , em )
LVAL	1147:1	1147:1	6	Le
FIELD	1147:1	1147:1	7	Le
LEAF_NODE	1147:1	1147:1	8	Le
ASSIGN_OP	1147:4	1147:4	6	=
LEAF_NODE	1147:4	1147:4	7	=
RVAL	1147:6	1147:20	6	( unsigned int ) LogL16fromY ( XYZ [ 1 ] , em )
LEAF_NODE	1147:6	1147:6	7	(
TYPE_NAME	1147:7	1147:16	7	unsigned int
LEAF_NODE	1147:7	1147:7	8	unsigned
LEAF_NODE	1147:16	1147:16	8	int
LEAF_NODE	1147:19	1147:19	7	)
FUNCTION_CALL	1147:20	1147:42	7	LogL16fromY ( XYZ [ 1 ] , em )
CALLEE	1147:20	1147:20	8	LogL16fromY
LEAF_NODE	1147:20	1147:20	9	LogL16fromY
LEAF_NODE	1147:31	1147:31	8	(
ARGUMENT	1147:32	1147:32	8	XYZ [ 1 ]
FIELD	1147:32	1147:37	9	XYZ [ 1 ]
LEAF_NODE	1147:32	1147:32	10	XYZ
LEAF_NODE	1147:35	1147:35	10	[
EXPR	1147:36	1147:36	10	1
FIELD	1147:36	1147:36	11	1
LEAF_NODE	1147:36	1147:36	12	1
LEAF_NODE	1147:37	1147:37	10	]
LEAF_NODE	1147:38	1147:38	8	,
ARGUMENT	1147:40	1147:40	8	em
FIELD	1147:40	1147:40	9	em
LEAF_NODE	1147:40	1147:40	10	em
LEAF_NODE	1147:42	1147:42	8	)
LEAF_NODE	1147:43	1147:43	4	;
EXPR_STATEMENT	1149:1	1149:36	3	s = XYZ [ 0 ] + 15. * XYZ [ 1 ] + 3. * XYZ [ 2 ] ;
EXPR	1149:1	1149:1	4	s = XYZ [ 0 ] + 15. * XYZ [ 1 ] + 3. * XYZ [ 2 ]
ASSIGN	1149:1	1149:5	5	s = XYZ [ 0 ] + 15. * XYZ [ 1 ] + 3. * XYZ [ 2 ]
LVAL	1149:1	1149:1	6	s
FIELD	1149:1	1149:1	7	s
LEAF_NODE	1149:1	1149:1	8	s
ASSIGN_OP	1149:3	1149:3	6	=
LEAF_NODE	1149:3	1149:3	7	=
RVAL	1149:5	1149:30	6	XYZ [ 0 ] + 15. * XYZ [ 1 ] + 3. * XYZ [ 2 ]
FIELD	1149:5	1149:10	7	XYZ [ 0 ]
LEAF_NODE	1149:5	1149:5	8	XYZ
LEAF_NODE	1149:8	1149:8	8	[
EXPR	1149:9	1149:9	8	0
FIELD	1149:9	1149:9	9	0
LEAF_NODE	1149:9	1149:9	10	0
LEAF_NODE	1149:10	1149:10	8	]
LEAF_NODE	1149:12	1149:12	7	+
FIELD	1149:14	1149:14	7	15.
LEAF_NODE	1149:14	1149:14	8	15.
LEAF_NODE	1149:17	1149:17	7	*
FIELD	1149:18	1149:23	7	XYZ [ 1 ]
LEAF_NODE	1149:18	1149:18	8	XYZ
LEAF_NODE	1149:21	1149:21	8	[
EXPR	1149:22	1149:22	8	1
FIELD	1149:22	1149:22	9	1
LEAF_NODE	1149:22	1149:22	10	1
LEAF_NODE	1149:23	1149:23	8	]
LEAF_NODE	1149:25	1149:25	7	+
FIELD	1149:27	1149:27	7	3.
LEAF_NODE	1149:27	1149:27	8	3.
LEAF_NODE	1149:29	1149:29	7	*
FIELD	1149:30	1149:35	7	XYZ [ 2 ]
LEAF_NODE	1149:30	1149:30	8	XYZ
LEAF_NODE	1149:33	1149:33	8	[
EXPR	1149:34	1149:34	8	2
FIELD	1149:34	1149:34	9	2
LEAF_NODE	1149:34	1149:34	10	2
LEAF_NODE	1149:35	1149:35	8	]
LEAF_NODE	1149:36	1149:36	4	;
SELECTION	1150:1	1150:21	3	
KEYWORD	1150:1	1150:1	4	if
LEAF_NODE	1150:1	1150:1	5	if
LEAF_NODE	1150:4	1150:4	4	(
CONDITION	1150:5	1150:5	4	! Le || s <= 0.
EXPR	1150:5	1150:5	5	! Le || s <= 0.
OR	1150:5	1150:12	6	! Le || s <= 0.
EXPR	1150:5	1150:5	7	! Le
UNARY_EXPR	1150:5	1150:6	8	! Le
UNARY_OPERATOR	1150:5	1150:5	9	!
LEAF_NODE	1150:5	1150:5	10	!
FIELD	1150:6	1150:6	9	Le
LEAF_NODE	1150:6	1150:6	10	Le
LEAF_NODE	1150:9	1150:9	7	||
EXPR	1150:12	1150:17	7	s <= 0.
FIELD	1150:12	1150:12	8	s
LEAF_NODE	1150:12	1150:12	9	s
REL_OPERATOR	1150:14	1150:14	8	<=
LEAF_NODE	1150:14	1150:14	9	<=
FIELD	1150:17	1150:17	8	0.
LEAF_NODE	1150:17	1150:17	9	0.
LEAF_NODE	1150:19	1150:19	4	)
STATEMENTS	1150:21	1153:1	4	
LEAF_NODE	1150:21	1150:21	5	{
STATEMENTS	1151:2	1152:2	5	
EXPR_STATEMENT	1151:2	1151:11	6	u = U_NEU ;
EXPR	1151:2	1151:2	7	u = U_NEU
ASSIGN	1151:2	1151:6	8	u = U_NEU
LVAL	1151:2	1151:2	9	u
FIELD	1151:2	1151:2	10	u
LEAF_NODE	1151:2	1151:2	11	u
ASSIGN_OP	1151:4	1151:4	9	=
LEAF_NODE	1151:4	1151:4	10	=
RVAL	1151:6	1151:6	9	U_NEU
FIELD	1151:6	1151:6	10	U_NEU
LEAF_NODE	1151:6	1151:6	11	U_NEU
LEAF_NODE	1151:11	1151:11	7	;
EXPR_STATEMENT	1152:2	1152:11	6	v = V_NEU ;
EXPR	1152:2	1152:2	7	v = V_NEU
ASSIGN	1152:2	1152:6	8	v = V_NEU
LVAL	1152:2	1152:2	9	v
FIELD	1152:2	1152:2	10	v
LEAF_NODE	1152:2	1152:2	11	v
ASSIGN_OP	1152:4	1152:4	9	=
LEAF_NODE	1152:4	1152:4	10	=
RVAL	1152:6	1152:6	9	V_NEU
FIELD	1152:6	1152:6	10	V_NEU
LEAF_NODE	1152:6	1152:6	11	V_NEU
LEAF_NODE	1152:11	1152:11	7	;
LEAF_NODE	1153:1	1153:1	5	}
SELECTION	1153:3	1153:8	3	
KEYWORD	1153:3	1153:3	4	else
LEAF_NODE	1153:3	1153:3	5	else
STATEMENTS	1153:8	1156:1	4	
LEAF_NODE	1153:8	1153:8	5	{
STATEMENTS	1154:2	1155:8	5	
LEAF_NODE	1154:2	1154:2	6	u
LEAF_NODE	1154:4	1154:4	6	=
LEAF_NODE	1154:6	1154:6	6	4.
EXPR_STATEMENT	1154:8	1154:19	6	* XYZ [ 0 ] / s ;
EXPR	1154:8	1154:18	7	* XYZ [ 0 ] / s
UNARY_EXPR	1154:8	1154:9	8	* XYZ [ 0 ]
UNARY_OPERATOR	1154:8	1154:8	9	*
LEAF_NODE	1154:8	1154:8	10	*
FIELD	1154:9	1154:14	9	XYZ [ 0 ]
LEAF_NODE	1154:9	1154:9	10	XYZ
LEAF_NODE	1154:12	1154:12	10	[
EXPR	1154:13	1154:13	10	0
FIELD	1154:13	1154:13	11	0
LEAF_NODE	1154:13	1154:13	12	0
LEAF_NODE	1154:14	1154:14	10	]
LEAF_NODE	1154:16	1154:16	8	/
FIELD	1154:18	1154:18	8	s
LEAF_NODE	1154:18	1154:18	9	s
LEAF_NODE	1154:19	1154:19	7	;
LEAF_NODE	1155:2	1155:2	6	v
LEAF_NODE	1155:4	1155:4	6	=
LEAF_NODE	1155:6	1155:6	6	9.
EXPR_STATEMENT	1155:8	1155:19	6	* XYZ [ 1 ] / s ;
EXPR	1155:8	1155:18	7	* XYZ [ 1 ] / s
UNARY_EXPR	1155:8	1155:9	8	* XYZ [ 1 ]
UNARY_OPERATOR	1155:8	1155:8	9	*
LEAF_NODE	1155:8	1155:8	10	*
FIELD	1155:9	1155:14	9	XYZ [ 1 ]
LEAF_NODE	1155:9	1155:9	10	XYZ
LEAF_NODE	1155:12	1155:12	10	[
EXPR	1155:13	1155:13	10	1
FIELD	1155:13	1155:13	11	1
LEAF_NODE	1155:13	1155:13	12	1
LEAF_NODE	1155:14	1155:14	10	]
LEAF_NODE	1155:16	1155:16	8	/
FIELD	1155:18	1155:18	8	s
LEAF_NODE	1155:18	1155:18	9	s
LEAF_NODE	1155:19	1155:19	7	;
LEAF_NODE	1156:1	1156:1	5	}
SELECTION	1157:1	1157:14	3	
KEYWORD	1157:1	1157:1	4	if
LEAF_NODE	1157:1	1157:1	5	if
LEAF_NODE	1157:4	1157:4	4	(
CONDITION	1157:5	1157:5	4	u <= 0.
EXPR	1157:5	1157:10	5	u <= 0.
FIELD	1157:5	1157:5	6	u
LEAF_NODE	1157:5	1157:5	7	u
REL_OPERATOR	1157:7	1157:7	6	<=
LEAF_NODE	1157:7	1157:7	7	<=
FIELD	1157:10	1157:10	6	0.
LEAF_NODE	1157:10	1157:10	7	0.
LEAF_NODE	1157:12	1157:12	4	)
STATEMENTS	1157:14	1157:14	4	
EXPR_STATEMENT	1157:14	1157:20	5	ue = 0 ;
EXPR	1157:14	1157:14	6	ue = 0
ASSIGN	1157:14	1157:19	7	ue = 0
LVAL	1157:14	1157:14	8	ue
FIELD	1157:14	1157:14	9	ue
LEAF_NODE	1157:14	1157:14	10	ue
ASSIGN_OP	1157:17	1157:17	8	=
LEAF_NODE	1157:17	1157:17	9	=
RVAL	1157:19	1157:19	8	0
FIELD	1157:19	1157:19	9	0
LEAF_NODE	1157:19	1157:19	10	0
LEAF_NODE	1157:20	1157:20	6	;
SELECTION	1158:1	1158:6	3	
KEYWORD	1158:1	1158:1	4	else
LEAF_NODE	1158:1	1158:1	5	else
STATEMENTS	1158:6	1158:6	4	
EXPR_STATEMENT	1158:6	1158:32	5	ue = itrunc ( UVSCALE * u , em ) ;
EXPR	1158:6	1158:6	6	ue = itrunc ( UVSCALE * u , em )
ASSIGN	1158:6	1158:11	7	ue = itrunc ( UVSCALE * u , em )
LVAL	1158:6	1158:6	8	ue
FIELD	1158:6	1158:6	9	ue
LEAF_NODE	1158:6	1158:6	10	ue
ASSIGN_OP	1158:9	1158:9	8	=
LEAF_NODE	1158:9	1158:9	9	=
RVAL	1158:11	1158:11	8	itrunc ( UVSCALE * u , em )
FUNCTION_CALL	1158:11	1158:31	9	itrunc ( UVSCALE * u , em )
CALLEE	1158:11	1158:11	10	itrunc
LEAF_NODE	1158:11	1158:11	11	itrunc
LEAF_NODE	1158:17	1158:17	10	(
ARGUMENT	1158:18	1158:26	10	UVSCALE * u
FIELD	1158:18	1158:18	11	UVSCALE
LEAF_NODE	1158:18	1158:18	12	UVSCALE
LEAF_NODE	1158:25	1158:25	11	*
FIELD	1158:26	1158:26	11	u
LEAF_NODE	1158:26	1158:26	12	u
LEAF_NODE	1158:27	1158:27	10	,
ARGUMENT	1158:29	1158:29	10	em
FIELD	1158:29	1158:29	11	em
LEAF_NODE	1158:29	1158:29	12	em
LEAF_NODE	1158:31	1158:31	10	)
LEAF_NODE	1158:32	1158:32	6	;
SELECTION	1159:1	1159:15	3	
KEYWORD	1159:1	1159:1	4	if
LEAF_NODE	1159:1	1159:1	5	if
LEAF_NODE	1159:4	1159:4	4	(
CONDITION	1159:5	1159:5	4	ue > 255
EXPR	1159:5	1159:10	5	ue > 255
FIELD	1159:5	1159:5	6	ue
LEAF_NODE	1159:5	1159:5	7	ue
REL_OPERATOR	1159:8	1159:8	6	>
LEAF_NODE	1159:8	1159:8	7	>
FIELD	1159:10	1159:10	6	255
LEAF_NODE	1159:10	1159:10	7	255
LEAF_NODE	1159:13	1159:13	4	)
STATEMENTS	1159:15	1159:15	4	
EXPR_STATEMENT	1159:15	1159:23	5	ue = 255 ;
EXPR	1159:15	1159:15	6	ue = 255
ASSIGN	1159:15	1159:20	7	ue = 255
LVAL	1159:15	1159:15	8	ue
FIELD	1159:15	1159:15	9	ue
LEAF_NODE	1159:15	1159:15	10	ue
ASSIGN_OP	1159:18	1159:18	8	=
LEAF_NODE	1159:18	1159:18	9	=
RVAL	1159:20	1159:20	8	255
FIELD	1159:20	1159:20	9	255
LEAF_NODE	1159:20	1159:20	10	255
LEAF_NODE	1159:23	1159:23	6	;
SELECTION	1160:1	1160:14	3	
KEYWORD	1160:1	1160:1	4	if
LEAF_NODE	1160:1	1160:1	5	if
LEAF_NODE	1160:4	1160:4	4	(
CONDITION	1160:5	1160:5	4	v <= 0.
EXPR	1160:5	1160:10	5	v <= 0.
FIELD	1160:5	1160:5	6	v
LEAF_NODE	1160:5	1160:5	7	v
REL_OPERATOR	1160:7	1160:7	6	<=
LEAF_NODE	1160:7	1160:7	7	<=
FIELD	1160:10	1160:10	6	0.
LEAF_NODE	1160:10	1160:10	7	0.
LEAF_NODE	1160:12	1160:12	4	)
STATEMENTS	1160:14	1160:14	4	
EXPR_STATEMENT	1160:14	1160:20	5	ve = 0 ;
EXPR	1160:14	1160:14	6	ve = 0
ASSIGN	1160:14	1160:19	7	ve = 0
LVAL	1160:14	1160:14	8	ve
FIELD	1160:14	1160:14	9	ve
LEAF_NODE	1160:14	1160:14	10	ve
ASSIGN_OP	1160:17	1160:17	8	=
LEAF_NODE	1160:17	1160:17	9	=
RVAL	1160:19	1160:19	8	0
FIELD	1160:19	1160:19	9	0
LEAF_NODE	1160:19	1160:19	10	0
LEAF_NODE	1160:20	1160:20	6	;
SELECTION	1161:1	1161:6	3	
KEYWORD	1161:1	1161:1	4	else
LEAF_NODE	1161:1	1161:1	5	else
STATEMENTS	1161:6	1161:6	4	
EXPR_STATEMENT	1161:6	1161:32	5	ve = itrunc ( UVSCALE * v , em ) ;
EXPR	1161:6	1161:6	6	ve = itrunc ( UVSCALE * v , em )
ASSIGN	1161:6	1161:11	7	ve = itrunc ( UVSCALE * v , em )
LVAL	1161:6	1161:6	8	ve
FIELD	1161:6	1161:6	9	ve
LEAF_NODE	1161:6	1161:6	10	ve
ASSIGN_OP	1161:9	1161:9	8	=
LEAF_NODE	1161:9	1161:9	9	=
RVAL	1161:11	1161:11	8	itrunc ( UVSCALE * v , em )
FUNCTION_CALL	1161:11	1161:31	9	itrunc ( UVSCALE * v , em )
CALLEE	1161:11	1161:11	10	itrunc
LEAF_NODE	1161:11	1161:11	11	itrunc
LEAF_NODE	1161:17	1161:17	10	(
ARGUMENT	1161:18	1161:26	10	UVSCALE * v
FIELD	1161:18	1161:18	11	UVSCALE
LEAF_NODE	1161:18	1161:18	12	UVSCALE
LEAF_NODE	1161:25	1161:25	11	*
FIELD	1161:26	1161:26	11	v
LEAF_NODE	1161:26	1161:26	12	v
LEAF_NODE	1161:27	1161:27	10	,
ARGUMENT	1161:29	1161:29	10	em
FIELD	1161:29	1161:29	11	em
LEAF_NODE	1161:29	1161:29	12	em
LEAF_NODE	1161:31	1161:31	10	)
LEAF_NODE	1161:32	1161:32	6	;
SELECTION	1162:1	1162:15	3	
KEYWORD	1162:1	1162:1	4	if
LEAF_NODE	1162:1	1162:1	5	if
LEAF_NODE	1162:4	1162:4	4	(
CONDITION	1162:5	1162:5	4	ve > 255
EXPR	1162:5	1162:10	5	ve > 255
FIELD	1162:5	1162:5	6	ve
LEAF_NODE	1162:5	1162:5	7	ve
REL_OPERATOR	1162:8	1162:8	6	>
LEAF_NODE	1162:8	1162:8	7	>
FIELD	1162:10	1162:10	6	255
LEAF_NODE	1162:10	1162:10	7	255
LEAF_NODE	1162:13	1162:13	4	)
STATEMENTS	1162:15	1162:15	4	
EXPR_STATEMENT	1162:15	1162:23	5	ve = 255 ;
EXPR	1162:15	1162:15	6	ve = 255
ASSIGN	1162:15	1162:20	7	ve = 255
LVAL	1162:15	1162:15	8	ve
FIELD	1162:15	1162:15	9	ve
LEAF_NODE	1162:15	1162:15	10	ve
ASSIGN_OP	1162:18	1162:18	8	=
LEAF_NODE	1162:18	1162:18	9	=
RVAL	1162:20	1162:20	8	255
FIELD	1162:20	1162:20	9	255
LEAF_NODE	1162:20	1162:20	10	255
LEAF_NODE	1162:23	1162:23	6	;
JUMP_STATEMENT	1164:1	1164:33	3	return ( Le << 16 | ue << 8 | ve ) ;
KEYWORD	1164:1	1164:1	4	return
LEAF_NODE	1164:1	1164:1	5	return
DESTINATION	1164:8	1164:8	4	( Le << 16 | ue << 8 | ve )
EXPR	1164:8	1164:32	5	( Le << 16 | ue << 8 | ve )
LEAF_NODE	1164:8	1164:8	6	(
BIT_OR	1164:9	1164:20	6	Le << 16 | ue << 8 | ve
BIT_OR_ELEM	1164:9	1164:15	7	Le << 16
FIELD	1164:9	1164:9	8	Le
LEAF_NODE	1164:9	1164:9	9	Le
LEAF_NODE	1164:12	1164:12	8	<<
FIELD	1164:15	1164:15	8	16
LEAF_NODE	1164:15	1164:15	9	16
LEAF_NODE	1164:18	1164:18	7	|
BIT_OR_ELEM	1164:20	1164:20	7	ue << 8 | ve
BIT_OR	1164:20	1164:30	8	ue << 8 | ve
BIT_OR_ELEM	1164:20	1164:26	9	ue << 8
FIELD	1164:20	1164:20	10	ue
LEAF_NODE	1164:20	1164:20	11	ue
LEAF_NODE	1164:23	1164:23	10	<<
FIELD	1164:26	1164:26	10	8
LEAF_NODE	1164:26	1164:26	11	8
LEAF_NODE	1164:28	1164:28	9	|
BIT_OR_ELEM	1164:30	1164:30	9	ve
FIELD	1164:30	1164:30	10	ve
LEAF_NODE	1164:30	1164:30	11	ve
LEAF_NODE	1164:32	1164:32	6	)
LEAF_NODE	1164:33	1164:33	4	;
LEAF_NODE	1165:0	1165:0	2	}
FUNCTION_DEF	1167:0	1177:0	1	
RETURN_TYPE	1167:0	1167:7	2	static void
LEAF_NODE	1167:0	1167:0	3	static
TYPE_NAME	1167:7	1167:7	3	void
LEAF_NODE	1167:7	1167:7	4	void
FUNCTION_NAME	1168:0	1168:0	2	Luv32toXYZ
LEAF_NODE	1168:0	1168:0	3	Luv32toXYZ
PARAMETER_LIST	1168:10	1168:49	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1168:10	1168:10	3	(
PARAMETER_DECL	1168:11	1168:24	3	LogLuvState * sp
TYPE	1168:11	1168:22	4	LogLuvState *
TYPE_NAME	1168:11	1168:11	5	LogLuvState
LEAF_NODE	1168:11	1168:11	6	LogLuvState
POINTER	1168:22	1168:22	5	*
LEAF_NODE	1168:22	1168:22	6	*
NAME	1168:24	1168:24	4	sp
LEAF_NODE	1168:24	1168:24	5	sp
LEAF_NODE	1168:26	1168:26	3	,
PARAMETER_DECL	1168:28	1168:35	3	uint8 * op
TYPE	1168:28	1168:33	4	uint8 *
TYPE_NAME	1168:28	1168:28	5	uint8
LEAF_NODE	1168:28	1168:28	6	uint8
POINTER	1168:33	1168:33	5	*
LEAF_NODE	1168:33	1168:33	6	*
NAME	1168:35	1168:35	4	op
LEAF_NODE	1168:35	1168:35	5	op
LEAF_NODE	1168:37	1168:37	3	,
PARAMETER_DECL	1168:39	1168:48	3	tmsize_t n
TYPE	1168:39	1168:39	4	tmsize_t
TYPE_NAME	1168:39	1168:39	5	tmsize_t
LEAF_NODE	1168:39	1168:39	6	tmsize_t
NAME	1168:48	1168:48	4	n
LEAF_NODE	1168:48	1168:48	5	n
LEAF_NODE	1168:49	1168:49	3	)
LEAF_NODE	1169:0	1169:0	2	{
STATEMENTS	1170:1	1173:1	2	
SIMPLE_DECL	1170:1	1170:33	3	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf ;
VAR_DECL	1170:1	1170:9	4	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf
TYPE	1170:1	1170:7	5	uint32 *
TYPE_NAME	1170:1	1170:1	6	uint32
LEAF_NODE	1170:1	1170:1	7	uint32
POINTER	1170:7	1170:7	6	*
LEAF_NODE	1170:7	1170:7	7	*
NAME	1170:9	1170:9	5	luv
LEAF_NODE	1170:9	1170:9	6	luv
LEAF_NODE	0:0	0:0	5	;
INIT	1170:9	1170:9	5	luv = ( uint32 * ) sp -> tbuf
ASSIGN	1170:9	1170:15	6	luv = ( uint32 * ) sp -> tbuf
LVAL	1170:9	1170:9	7	luv
NAME	1170:9	1170:9	8	luv
LEAF_NODE	1170:9	1170:9	9	luv
ASSIGN_OP	1170:13	1170:13	7	=
LEAF_NODE	1170:13	1170:13	8	=
RVAL	1170:15	1170:25	7	( uint32 * ) sp -> tbuf
LEAF_NODE	1170:15	1170:15	8	(
TYPE_NAME	1170:16	1170:16	8	uint32
LEAF_NODE	1170:16	1170:16	9	uint32
LEAF_NODE	1170:22	1170:22	8	*
LEAF_NODE	1170:23	1170:23	8	)
FIELD	1170:25	1170:29	8	sp -> tbuf
LEAF_NODE	1170:25	1170:25	9	sp
LEAF_NODE	1170:27	1170:27	9	->
LEAF_NODE	1170:29	1170:29	9	tbuf
LEAF_NODE	1170:33	1170:33	4	;
SIMPLE_DECL	1171:1	1171:25	3	float * xyz ; xyz = ( float * ) op ;
VAR_DECL	1171:1	1171:8	4	float * xyz ; xyz = ( float * ) op
TYPE	1171:1	1171:6	5	float *
TYPE_NAME	1171:1	1171:1	6	float
LEAF_NODE	1171:1	1171:1	7	float
POINTER	1171:6	1171:6	6	*
LEAF_NODE	1171:6	1171:6	7	*
NAME	1171:8	1171:8	5	xyz
LEAF_NODE	1171:8	1171:8	6	xyz
LEAF_NODE	0:0	0:0	5	;
INIT	1171:8	1171:8	5	xyz = ( float * ) op
ASSIGN	1171:8	1171:14	6	xyz = ( float * ) op
LVAL	1171:8	1171:8	7	xyz
NAME	1171:8	1171:8	8	xyz
LEAF_NODE	1171:8	1171:8	9	xyz
ASSIGN_OP	1171:12	1171:12	7	=
LEAF_NODE	1171:12	1171:12	8	=
RVAL	1171:14	1171:23	7	( float * ) op
LEAF_NODE	1171:14	1171:14	8	(
TYPE_NAME	1171:15	1171:15	8	float
LEAF_NODE	1171:15	1171:15	9	float
LEAF_NODE	1171:20	1171:20	8	*
LEAF_NODE	1171:21	1171:21	8	)
FIELD	1171:23	1171:23	8	op
LEAF_NODE	1171:23	1171:23	9	op
LEAF_NODE	1171:25	1171:25	4	;
ITERATION	1173:1	1173:17	3	
KEYWORD	1173:1	1173:1	4	while
LEAF_NODE	1173:1	1173:1	5	while
LEAF_NODE	1173:7	1173:7	4	(
CONDITION	1173:8	1173:8	4	n -- > 0
EXPR	1173:8	1173:14	5	n -- > 0
FIELD	1173:8	1173:9	6	n --
LEAF_NODE	1173:8	1173:8	7	n
LEAF_NODE	1173:9	1173:9	7	--
REL_OPERATOR	1173:12	1173:12	6	>
LEAF_NODE	1173:12	1173:12	7	>
FIELD	1173:14	1173:14	6	0
LEAF_NODE	1173:14	1173:14	7	0
LEAF_NODE	1173:15	1173:15	4	)
STATEMENTS	1173:17	1176:1	4	
LEAF_NODE	1173:17	1173:17	5	{
STATEMENTS	1174:2	1175:2	5	
EXPR_STATEMENT	1174:2	1174:28	6	LogLuv32toXYZ ( * luv ++ , xyz ) ;
EXPR	1174:2	1174:2	7	LogLuv32toXYZ ( * luv ++ , xyz )
FUNCTION_CALL	1174:2	1174:27	8	LogLuv32toXYZ ( * luv ++ , xyz )
CALLEE	1174:2	1174:2	9	LogLuv32toXYZ
LEAF_NODE	1174:2	1174:2	10	LogLuv32toXYZ
LEAF_NODE	1174:15	1174:15	9	(
ARGUMENT	1174:16	1174:16	9	* luv ++
UNARY_EXPR	1174:16	1174:17	10	* luv ++
UNARY_OPERATOR	1174:16	1174:16	11	*
LEAF_NODE	1174:16	1174:16	12	*
FIELD	1174:17	1174:20	11	luv ++
LEAF_NODE	1174:17	1174:17	12	luv
LEAF_NODE	1174:20	1174:20	12	++
LEAF_NODE	1174:22	1174:22	9	,
ARGUMENT	1174:24	1174:24	9	xyz
FIELD	1174:24	1174:24	10	xyz
LEAF_NODE	1174:24	1174:24	11	xyz
LEAF_NODE	1174:27	1174:27	9	)
LEAF_NODE	1174:28	1174:28	7	;
EXPR_STATEMENT	1175:2	1175:10	6	xyz += 3 ;
EXPR	1175:2	1175:2	7	xyz += 3
ASSIGN	1175:2	1175:9	8	xyz += 3
LVAL	1175:2	1175:2	9	xyz
FIELD	1175:2	1175:2	10	xyz
LEAF_NODE	1175:2	1175:2	11	xyz
ASSIGN_OP	1175:6	1175:6	9	+=
LEAF_NODE	1175:6	1175:6	10	+=
RVAL	1175:9	1175:9	9	3
FIELD	1175:9	1175:9	10	3
LEAF_NODE	1175:9	1175:9	11	3
LEAF_NODE	1175:10	1175:10	7	;
LEAF_NODE	1176:1	1176:1	5	}
LEAF_NODE	1177:0	1177:0	2	}
FUNCTION_DEF	1179:0	1195:0	1	
RETURN_TYPE	1179:0	1179:7	2	static void
LEAF_NODE	1179:0	1179:0	3	static
TYPE_NAME	1179:7	1179:7	3	void
LEAF_NODE	1179:7	1179:7	4	void
FUNCTION_NAME	1180:0	1180:0	2	Luv32toLuv48
LEAF_NODE	1180:0	1180:0	3	Luv32toLuv48
PARAMETER_LIST	1180:12	1180:51	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1180:12	1180:12	3	(
PARAMETER_DECL	1180:13	1180:26	3	LogLuvState * sp
TYPE	1180:13	1180:24	4	LogLuvState *
TYPE_NAME	1180:13	1180:13	5	LogLuvState
LEAF_NODE	1180:13	1180:13	6	LogLuvState
POINTER	1180:24	1180:24	5	*
LEAF_NODE	1180:24	1180:24	6	*
NAME	1180:26	1180:26	4	sp
LEAF_NODE	1180:26	1180:26	5	sp
LEAF_NODE	1180:28	1180:28	3	,
PARAMETER_DECL	1180:30	1180:37	3	uint8 * op
TYPE	1180:30	1180:35	4	uint8 *
TYPE_NAME	1180:30	1180:30	5	uint8
LEAF_NODE	1180:30	1180:30	6	uint8
POINTER	1180:35	1180:35	5	*
LEAF_NODE	1180:35	1180:35	6	*
NAME	1180:37	1180:37	4	op
LEAF_NODE	1180:37	1180:37	5	op
LEAF_NODE	1180:39	1180:39	3	,
PARAMETER_DECL	1180:41	1180:50	3	tmsize_t n
TYPE	1180:41	1180:41	4	tmsize_t
TYPE_NAME	1180:41	1180:41	5	tmsize_t
LEAF_NODE	1180:41	1180:41	6	tmsize_t
NAME	1180:50	1180:50	4	n
LEAF_NODE	1180:50	1180:50	5	n
LEAF_NODE	1180:51	1180:51	3	)
LEAF_NODE	1181:0	1181:0	2	{
STATEMENTS	1182:1	1185:1	2	
SIMPLE_DECL	1182:1	1182:33	3	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf ;
VAR_DECL	1182:1	1182:9	4	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf
TYPE	1182:1	1182:7	5	uint32 *
TYPE_NAME	1182:1	1182:1	6	uint32
LEAF_NODE	1182:1	1182:1	7	uint32
POINTER	1182:7	1182:7	6	*
LEAF_NODE	1182:7	1182:7	7	*
NAME	1182:9	1182:9	5	luv
LEAF_NODE	1182:9	1182:9	6	luv
LEAF_NODE	0:0	0:0	5	;
INIT	1182:9	1182:9	5	luv = ( uint32 * ) sp -> tbuf
ASSIGN	1182:9	1182:15	6	luv = ( uint32 * ) sp -> tbuf
LVAL	1182:9	1182:9	7	luv
NAME	1182:9	1182:9	8	luv
LEAF_NODE	1182:9	1182:9	9	luv
ASSIGN_OP	1182:13	1182:13	7	=
LEAF_NODE	1182:13	1182:13	8	=
RVAL	1182:15	1182:25	7	( uint32 * ) sp -> tbuf
LEAF_NODE	1182:15	1182:15	8	(
TYPE_NAME	1182:16	1182:16	8	uint32
LEAF_NODE	1182:16	1182:16	9	uint32
LEAF_NODE	1182:22	1182:22	8	*
LEAF_NODE	1182:23	1182:23	8	)
FIELD	1182:25	1182:29	8	sp -> tbuf
LEAF_NODE	1182:25	1182:25	9	sp
LEAF_NODE	1182:27	1182:27	9	->
LEAF_NODE	1182:29	1182:29	9	tbuf
LEAF_NODE	1182:33	1182:33	4	;
SIMPLE_DECL	1183:1	1183:26	3	int16 * luv3 ; luv3 = ( int16 * ) op ;
VAR_DECL	1183:1	1183:8	4	int16 * luv3 ; luv3 = ( int16 * ) op
TYPE	1183:1	1183:6	5	int16 *
TYPE_NAME	1183:1	1183:1	6	int16
LEAF_NODE	1183:1	1183:1	7	int16
POINTER	1183:6	1183:6	6	*
LEAF_NODE	1183:6	1183:6	7	*
NAME	1183:8	1183:8	5	luv3
LEAF_NODE	1183:8	1183:8	6	luv3
LEAF_NODE	0:0	0:0	5	;
INIT	1183:8	1183:8	5	luv3 = ( int16 * ) op
ASSIGN	1183:8	1183:15	6	luv3 = ( int16 * ) op
LVAL	1183:8	1183:8	7	luv3
NAME	1183:8	1183:8	8	luv3
LEAF_NODE	1183:8	1183:8	9	luv3
ASSIGN_OP	1183:13	1183:13	7	=
LEAF_NODE	1183:13	1183:13	8	=
RVAL	1183:15	1183:24	7	( int16 * ) op
LEAF_NODE	1183:15	1183:15	8	(
TYPE_NAME	1183:16	1183:16	8	int16
LEAF_NODE	1183:16	1183:16	9	int16
LEAF_NODE	1183:21	1183:21	8	*
LEAF_NODE	1183:22	1183:22	8	)
FIELD	1183:24	1183:24	8	op
LEAF_NODE	1183:24	1183:24	9	op
LEAF_NODE	1183:26	1183:26	4	;
ITERATION	1185:1	1185:17	3	
KEYWORD	1185:1	1185:1	4	while
LEAF_NODE	1185:1	1185:1	5	while
LEAF_NODE	1185:7	1185:7	4	(
CONDITION	1185:8	1185:8	4	n -- > 0
EXPR	1185:8	1185:14	5	n -- > 0
FIELD	1185:8	1185:9	6	n --
LEAF_NODE	1185:8	1185:8	7	n
LEAF_NODE	1185:9	1185:9	7	--
REL_OPERATOR	1185:12	1185:12	6	>
LEAF_NODE	1185:12	1185:12	7	>
FIELD	1185:14	1185:14	6	0
LEAF_NODE	1185:14	1185:14	7	0
LEAF_NODE	1185:15	1185:15	4	)
STATEMENTS	1185:17	1194:1	4	
LEAF_NODE	1185:17	1185:17	5	{
STATEMENTS	1186:2	1193:2	5	
SIMPLE_DECL	1186:2	1186:13	6	double u , double v ;
INIT_DECL_LIST	1186:2	1186:2	7	double u , double v
VAR_DECL	1186:2	1186:9	8	double u
TYPE	1186:2	1186:2	9	double
TYPE_NAME	1186:2	1186:2	10	double
LEAF_NODE	1186:2	1186:2	11	double
NAME	1186:9	1186:9	9	u
LEAF_NODE	1186:9	1186:9	10	u
LEAF_NODE	1186:10	1186:10	8	,
VAR_DECL	1186:2	1186:12	8	double v
TYPE	1186:2	1186:2	9	double
TYPE_NAME	1186:2	1186:2	10	double
LEAF_NODE	1186:2	1186:2	11	double
NAME	1186:12	1186:12	9	v
LEAF_NODE	1186:12	1186:12	10	v
LEAF_NODE	1186:13	1186:13	7	;
EXPR_STATEMENT	1188:2	1188:31	6	* luv3 ++ = ( int16 ) ( * luv >> 16 ) ;
EXPR	1188:2	1188:2	7	* luv3 ++ = ( int16 ) ( * luv >> 16 )
ASSIGN	1188:2	1188:12	8	* luv3 ++ = ( int16 ) ( * luv >> 16 )
LVAL	1188:2	1188:2	9	* luv3 ++
UNARY_EXPR	1188:2	1188:3	10	* luv3 ++
UNARY_OPERATOR	1188:2	1188:2	11	*
LEAF_NODE	1188:2	1188:2	12	*
FIELD	1188:3	1188:7	11	luv3 ++
LEAF_NODE	1188:3	1188:3	12	luv3
LEAF_NODE	1188:7	1188:7	12	++
ASSIGN_OP	1188:10	1188:10	9	=
LEAF_NODE	1188:10	1188:10	10	=
RVAL	1188:12	1188:30	9	( int16 ) ( * luv >> 16 )
LEAF_NODE	1188:12	1188:12	10	(
TYPE_NAME	1188:13	1188:13	10	int16
LEAF_NODE	1188:13	1188:13	11	int16
LEAF_NODE	1188:18	1188:18	10	)
LEAF_NODE	1188:19	1188:19	10	(
UNARY_EXPR	1188:20	1188:21	10	* luv
UNARY_OPERATOR	1188:20	1188:20	11	*
LEAF_NODE	1188:20	1188:20	12	*
FIELD	1188:21	1188:21	11	luv
LEAF_NODE	1188:21	1188:21	12	luv
LEAF_NODE	1188:25	1188:25	10	>>
FIELD	1188:28	1188:28	10	16
LEAF_NODE	1188:28	1188:28	11	16
LEAF_NODE	1188:30	1188:30	10	)
LEAF_NODE	1188:31	1188:31	7	;
LEAF_NODE	1189:2	1189:2	6	u
LEAF_NODE	1189:4	1189:4	6	=
LEAF_NODE	1189:6	1189:6	6	1.
LEAF_NODE	1189:8	1189:8	6	/
EXPR_STATEMENT	1189:9	1189:42	6	UVSCALE * ( ( * luv >> 8 & 0xff ) + .5 ) ;
EXPR	1189:9	1189:41	7	UVSCALE * ( ( * luv >> 8 & 0xff ) + .5 )
FIELD	1189:9	1189:9	8	UVSCALE
LEAF_NODE	1189:9	1189:9	9	UVSCALE
LEAF_NODE	1189:17	1189:17	8	*
LEAF_NODE	1189:19	1189:19	8	(
LEAF_NODE	1189:20	1189:20	8	(
UNARY_EXPR	1189:21	1189:22	8	* luv
UNARY_OPERATOR	1189:21	1189:21	9	*
LEAF_NODE	1189:21	1189:21	10	*
FIELD	1189:22	1189:22	9	luv
LEAF_NODE	1189:22	1189:22	10	luv
LEAF_NODE	1189:25	1189:25	8	>>
FIELD	1189:27	1189:27	8	8
LEAF_NODE	1189:27	1189:27	9	8
LEAF_NODE	1189:29	1189:29	8	&
FIELD	1189:31	1189:31	8	0xff
LEAF_NODE	1189:31	1189:31	9	0xff
LEAF_NODE	1189:35	1189:35	8	)
LEAF_NODE	1189:37	1189:37	8	+
FIELD	1189:39	1189:39	8	.5
LEAF_NODE	1189:39	1189:39	9	.5
LEAF_NODE	1189:41	1189:41	8	)
LEAF_NODE	1189:42	1189:42	7	;
LEAF_NODE	1190:2	1190:2	6	v
LEAF_NODE	1190:4	1190:4	6	=
LEAF_NODE	1190:6	1190:6	6	1.
LEAF_NODE	1190:8	1190:8	6	/
EXPR_STATEMENT	1190:9	1190:39	6	UVSCALE * ( ( * luv & 0xff ) + .5 ) ;
EXPR	1190:9	1190:38	7	UVSCALE * ( ( * luv & 0xff ) + .5 )
FIELD	1190:9	1190:9	8	UVSCALE
LEAF_NODE	1190:9	1190:9	9	UVSCALE
LEAF_NODE	1190:17	1190:17	8	*
LEAF_NODE	1190:19	1190:19	8	(
LEAF_NODE	1190:20	1190:20	8	(
UNARY_EXPR	1190:21	1190:22	8	* luv
UNARY_OPERATOR	1190:21	1190:21	9	*
LEAF_NODE	1190:21	1190:21	10	*
FIELD	1190:22	1190:22	9	luv
LEAF_NODE	1190:22	1190:22	10	luv
LEAF_NODE	1190:26	1190:26	8	&
FIELD	1190:28	1190:28	8	0xff
LEAF_NODE	1190:28	1190:28	9	0xff
LEAF_NODE	1190:32	1190:32	8	)
LEAF_NODE	1190:34	1190:34	8	+
FIELD	1190:36	1190:36	8	.5
LEAF_NODE	1190:36	1190:36	9	.5
LEAF_NODE	1190:38	1190:38	8	)
LEAF_NODE	1190:39	1190:39	7	;
EXPR_STATEMENT	1191:2	1191:33	6	* luv3 ++ = ( int16 ) ( u * ( 1L << 15 ) ) ;
EXPR	1191:2	1191:2	7	* luv3 ++ = ( int16 ) ( u * ( 1L << 15 ) )
ASSIGN	1191:2	1191:12	8	* luv3 ++ = ( int16 ) ( u * ( 1L << 15 ) )
LVAL	1191:2	1191:2	9	* luv3 ++
UNARY_EXPR	1191:2	1191:3	10	* luv3 ++
UNARY_OPERATOR	1191:2	1191:2	11	*
LEAF_NODE	1191:2	1191:2	12	*
FIELD	1191:3	1191:7	11	luv3 ++
LEAF_NODE	1191:3	1191:3	12	luv3
LEAF_NODE	1191:7	1191:7	12	++
ASSIGN_OP	1191:10	1191:10	9	=
LEAF_NODE	1191:10	1191:10	10	=
RVAL	1191:12	1191:32	9	( int16 ) ( u * ( 1L << 15 ) )
LEAF_NODE	1191:12	1191:12	10	(
TYPE_NAME	1191:13	1191:13	10	int16
LEAF_NODE	1191:13	1191:13	11	int16
LEAF_NODE	1191:18	1191:18	10	)
LEAF_NODE	1191:19	1191:19	10	(
FIELD	1191:20	1191:20	10	u
LEAF_NODE	1191:20	1191:20	11	u
LEAF_NODE	1191:22	1191:22	10	*
LEAF_NODE	1191:24	1191:24	10	(
FIELD	1191:25	1191:25	10	1L
LEAF_NODE	1191:25	1191:25	11	1L
LEAF_NODE	1191:27	1191:27	10	<<
FIELD	1191:29	1191:29	10	15
LEAF_NODE	1191:29	1191:29	11	15
LEAF_NODE	1191:31	1191:31	10	)
LEAF_NODE	1191:32	1191:32	10	)
LEAF_NODE	1191:33	1191:33	7	;
EXPR_STATEMENT	1192:2	1192:33	6	* luv3 ++ = ( int16 ) ( v * ( 1L << 15 ) ) ;
EXPR	1192:2	1192:2	7	* luv3 ++ = ( int16 ) ( v * ( 1L << 15 ) )
ASSIGN	1192:2	1192:12	8	* luv3 ++ = ( int16 ) ( v * ( 1L << 15 ) )
LVAL	1192:2	1192:2	9	* luv3 ++
UNARY_EXPR	1192:2	1192:3	10	* luv3 ++
UNARY_OPERATOR	1192:2	1192:2	11	*
LEAF_NODE	1192:2	1192:2	12	*
FIELD	1192:3	1192:7	11	luv3 ++
LEAF_NODE	1192:3	1192:3	12	luv3
LEAF_NODE	1192:7	1192:7	12	++
ASSIGN_OP	1192:10	1192:10	9	=
LEAF_NODE	1192:10	1192:10	10	=
RVAL	1192:12	1192:32	9	( int16 ) ( v * ( 1L << 15 ) )
LEAF_NODE	1192:12	1192:12	10	(
TYPE_NAME	1192:13	1192:13	10	int16
LEAF_NODE	1192:13	1192:13	11	int16
LEAF_NODE	1192:18	1192:18	10	)
LEAF_NODE	1192:19	1192:19	10	(
FIELD	1192:20	1192:20	10	v
LEAF_NODE	1192:20	1192:20	11	v
LEAF_NODE	1192:22	1192:22	10	*
LEAF_NODE	1192:24	1192:24	10	(
FIELD	1192:25	1192:25	10	1L
LEAF_NODE	1192:25	1192:25	11	1L
LEAF_NODE	1192:27	1192:27	10	<<
FIELD	1192:29	1192:29	10	15
LEAF_NODE	1192:29	1192:29	11	15
LEAF_NODE	1192:31	1192:31	10	)
LEAF_NODE	1192:32	1192:32	10	)
LEAF_NODE	1192:33	1192:33	7	;
EXPR_STATEMENT	1193:2	1193:7	6	luv ++ ;
EXPR	1193:2	1193:2	7	luv ++
FIELD	1193:2	1193:5	8	luv ++
LEAF_NODE	1193:2	1193:2	9	luv
LEAF_NODE	1193:5	1193:5	9	++
LEAF_NODE	1193:7	1193:7	7	;
LEAF_NODE	1194:1	1194:1	5	}
LEAF_NODE	1195:0	1195:0	2	}
FUNCTION_DEF	1197:0	1210:0	1	
RETURN_TYPE	1197:0	1197:7	2	static void
LEAF_NODE	1197:0	1197:0	3	static
TYPE_NAME	1197:7	1197:7	3	void
LEAF_NODE	1197:7	1197:7	4	void
FUNCTION_NAME	1198:0	1198:0	2	Luv32toRGB
LEAF_NODE	1198:0	1198:0	3	Luv32toRGB
PARAMETER_LIST	1198:10	1198:49	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1198:10	1198:10	3	(
PARAMETER_DECL	1198:11	1198:24	3	LogLuvState * sp
TYPE	1198:11	1198:22	4	LogLuvState *
TYPE_NAME	1198:11	1198:11	5	LogLuvState
LEAF_NODE	1198:11	1198:11	6	LogLuvState
POINTER	1198:22	1198:22	5	*
LEAF_NODE	1198:22	1198:22	6	*
NAME	1198:24	1198:24	4	sp
LEAF_NODE	1198:24	1198:24	5	sp
LEAF_NODE	1198:26	1198:26	3	,
PARAMETER_DECL	1198:28	1198:35	3	uint8 * op
TYPE	1198:28	1198:33	4	uint8 *
TYPE_NAME	1198:28	1198:28	5	uint8
LEAF_NODE	1198:28	1198:28	6	uint8
POINTER	1198:33	1198:33	5	*
LEAF_NODE	1198:33	1198:33	6	*
NAME	1198:35	1198:35	4	op
LEAF_NODE	1198:35	1198:35	5	op
LEAF_NODE	1198:37	1198:37	3	,
PARAMETER_DECL	1198:39	1198:48	3	tmsize_t n
TYPE	1198:39	1198:39	4	tmsize_t
TYPE_NAME	1198:39	1198:39	5	tmsize_t
LEAF_NODE	1198:39	1198:39	6	tmsize_t
NAME	1198:48	1198:48	4	n
LEAF_NODE	1198:48	1198:48	5	n
LEAF_NODE	1198:49	1198:49	3	)
LEAF_NODE	1199:0	1199:0	2	{
STATEMENTS	1200:1	1203:1	2	
SIMPLE_DECL	1200:1	1200:33	3	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf ;
VAR_DECL	1200:1	1200:9	4	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf
TYPE	1200:1	1200:7	5	uint32 *
TYPE_NAME	1200:1	1200:1	6	uint32
LEAF_NODE	1200:1	1200:1	7	uint32
POINTER	1200:7	1200:7	6	*
LEAF_NODE	1200:7	1200:7	7	*
NAME	1200:9	1200:9	5	luv
LEAF_NODE	1200:9	1200:9	6	luv
LEAF_NODE	0:0	0:0	5	;
INIT	1200:9	1200:9	5	luv = ( uint32 * ) sp -> tbuf
ASSIGN	1200:9	1200:15	6	luv = ( uint32 * ) sp -> tbuf
LVAL	1200:9	1200:9	7	luv
NAME	1200:9	1200:9	8	luv
LEAF_NODE	1200:9	1200:9	9	luv
ASSIGN_OP	1200:13	1200:13	7	=
LEAF_NODE	1200:13	1200:13	8	=
RVAL	1200:15	1200:25	7	( uint32 * ) sp -> tbuf
LEAF_NODE	1200:15	1200:15	8	(
TYPE_NAME	1200:16	1200:16	8	uint32
LEAF_NODE	1200:16	1200:16	9	uint32
LEAF_NODE	1200:22	1200:22	8	*
LEAF_NODE	1200:23	1200:23	8	)
FIELD	1200:25	1200:29	8	sp -> tbuf
LEAF_NODE	1200:25	1200:25	9	sp
LEAF_NODE	1200:27	1200:27	9	->
LEAF_NODE	1200:29	1200:29	9	tbuf
LEAF_NODE	1200:33	1200:33	4	;
SIMPLE_DECL	1201:1	1201:25	3	uint8 * rgb ; rgb = ( uint8 * ) op ;
VAR_DECL	1201:1	1201:8	4	uint8 * rgb ; rgb = ( uint8 * ) op
TYPE	1201:1	1201:6	5	uint8 *
TYPE_NAME	1201:1	1201:1	6	uint8
LEAF_NODE	1201:1	1201:1	7	uint8
POINTER	1201:6	1201:6	6	*
LEAF_NODE	1201:6	1201:6	7	*
NAME	1201:8	1201:8	5	rgb
LEAF_NODE	1201:8	1201:8	6	rgb
LEAF_NODE	0:0	0:0	5	;
INIT	1201:8	1201:8	5	rgb = ( uint8 * ) op
ASSIGN	1201:8	1201:14	6	rgb = ( uint8 * ) op
LVAL	1201:8	1201:8	7	rgb
NAME	1201:8	1201:8	8	rgb
LEAF_NODE	1201:8	1201:8	9	rgb
ASSIGN_OP	1201:12	1201:12	7	=
LEAF_NODE	1201:12	1201:12	8	=
RVAL	1201:14	1201:23	7	( uint8 * ) op
LEAF_NODE	1201:14	1201:14	8	(
TYPE_NAME	1201:15	1201:15	8	uint8
LEAF_NODE	1201:15	1201:15	9	uint8
LEAF_NODE	1201:20	1201:20	8	*
LEAF_NODE	1201:21	1201:21	8	)
FIELD	1201:23	1201:23	8	op
LEAF_NODE	1201:23	1201:23	9	op
LEAF_NODE	1201:25	1201:25	4	;
ITERATION	1203:1	1203:17	3	
KEYWORD	1203:1	1203:1	4	while
LEAF_NODE	1203:1	1203:1	5	while
LEAF_NODE	1203:7	1203:7	4	(
CONDITION	1203:8	1203:8	4	n -- > 0
EXPR	1203:8	1203:14	5	n -- > 0
FIELD	1203:8	1203:9	6	n --
LEAF_NODE	1203:8	1203:8	7	n
LEAF_NODE	1203:9	1203:9	7	--
REL_OPERATOR	1203:12	1203:12	6	>
LEAF_NODE	1203:12	1203:12	7	>
FIELD	1203:14	1203:14	6	0
LEAF_NODE	1203:14	1203:14	7	0
LEAF_NODE	1203:15	1203:15	4	)
STATEMENTS	1203:17	1209:1	4	
LEAF_NODE	1203:17	1203:17	5	{
STATEMENTS	1204:2	1208:2	5	
SIMPLE_DECL	1204:2	1204:14	6	float [ 3 ] xyz ;
VAR_DECL	1204:2	1204:8	7	float [ 3 ] xyz
TYPE	1204:2	1204:11	8	float [ 3 ]
TYPE_NAME	1204:2	1204:2	9	float
LEAF_NODE	1204:2	1204:2	10	float
TYPE_SUFFIX	1204:11	1204:13	9	[ 3 ]
LEAF_NODE	1204:11	1204:11	10	[
FIELD	1204:12	1204:12	10	3
LEAF_NODE	1204:12	1204:12	11	3
LEAF_NODE	1204:13	1204:13	10	]
NAME	1204:8	1204:8	8	xyz
LEAF_NODE	1204:8	1204:8	9	xyz
LEAF_NODE	1204:14	1204:14	7	;
EXPR_STATEMENT	1206:2	1206:28	6	LogLuv32toXYZ ( * luv ++ , xyz ) ;
EXPR	1206:2	1206:2	7	LogLuv32toXYZ ( * luv ++ , xyz )
FUNCTION_CALL	1206:2	1206:27	8	LogLuv32toXYZ ( * luv ++ , xyz )
CALLEE	1206:2	1206:2	9	LogLuv32toXYZ
LEAF_NODE	1206:2	1206:2	10	LogLuv32toXYZ
LEAF_NODE	1206:15	1206:15	9	(
ARGUMENT	1206:16	1206:16	9	* luv ++
UNARY_EXPR	1206:16	1206:17	10	* luv ++
UNARY_OPERATOR	1206:16	1206:16	11	*
LEAF_NODE	1206:16	1206:16	12	*
FIELD	1206:17	1206:20	11	luv ++
LEAF_NODE	1206:17	1206:17	12	luv
LEAF_NODE	1206:20	1206:20	12	++
LEAF_NODE	1206:22	1206:22	9	,
ARGUMENT	1206:24	1206:24	9	xyz
FIELD	1206:24	1206:24	10	xyz
LEAF_NODE	1206:24	1206:24	11	xyz
LEAF_NODE	1206:27	1206:27	9	)
LEAF_NODE	1206:28	1206:28	7	;
EXPR_STATEMENT	1207:2	1207:22	6	XYZtoRGB24 ( xyz , rgb ) ;
EXPR	1207:2	1207:2	7	XYZtoRGB24 ( xyz , rgb )
FUNCTION_CALL	1207:2	1207:21	8	XYZtoRGB24 ( xyz , rgb )
CALLEE	1207:2	1207:2	9	XYZtoRGB24
LEAF_NODE	1207:2	1207:2	10	XYZtoRGB24
LEAF_NODE	1207:12	1207:12	9	(
ARGUMENT	1207:13	1207:13	9	xyz
FIELD	1207:13	1207:13	10	xyz
LEAF_NODE	1207:13	1207:13	11	xyz
LEAF_NODE	1207:16	1207:16	9	,
ARGUMENT	1207:18	1207:18	9	rgb
FIELD	1207:18	1207:18	10	rgb
LEAF_NODE	1207:18	1207:18	11	rgb
LEAF_NODE	1207:21	1207:21	9	)
LEAF_NODE	1207:22	1207:22	7	;
EXPR_STATEMENT	1208:2	1208:10	6	rgb += 3 ;
EXPR	1208:2	1208:2	7	rgb += 3
ASSIGN	1208:2	1208:9	8	rgb += 3
LVAL	1208:2	1208:2	9	rgb
FIELD	1208:2	1208:2	10	rgb
LEAF_NODE	1208:2	1208:2	11	rgb
ASSIGN_OP	1208:6	1208:6	9	+=
LEAF_NODE	1208:6	1208:6	10	+=
RVAL	1208:9	1208:9	9	3
FIELD	1208:9	1208:9	10	3
LEAF_NODE	1208:9	1208:9	11	3
LEAF_NODE	1208:10	1208:10	7	;
LEAF_NODE	1209:1	1209:1	5	}
LEAF_NODE	1210:0	1210:0	2	}
FUNCTION_DEF	1212:0	1222:0	1	
RETURN_TYPE	1212:0	1212:7	2	static void
LEAF_NODE	1212:0	1212:0	3	static
TYPE_NAME	1212:7	1212:7	3	void
LEAF_NODE	1212:7	1212:7	4	void
FUNCTION_NAME	1213:0	1213:0	2	Luv32fromXYZ
LEAF_NODE	1213:0	1213:0	3	Luv32fromXYZ
PARAMETER_LIST	1213:12	1213:51	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1213:12	1213:12	3	(
PARAMETER_DECL	1213:13	1213:26	3	LogLuvState * sp
TYPE	1213:13	1213:24	4	LogLuvState *
TYPE_NAME	1213:13	1213:13	5	LogLuvState
LEAF_NODE	1213:13	1213:13	6	LogLuvState
POINTER	1213:24	1213:24	5	*
LEAF_NODE	1213:24	1213:24	6	*
NAME	1213:26	1213:26	4	sp
LEAF_NODE	1213:26	1213:26	5	sp
LEAF_NODE	1213:28	1213:28	3	,
PARAMETER_DECL	1213:30	1213:37	3	uint8 * op
TYPE	1213:30	1213:35	4	uint8 *
TYPE_NAME	1213:30	1213:30	5	uint8
LEAF_NODE	1213:30	1213:30	6	uint8
POINTER	1213:35	1213:35	5	*
LEAF_NODE	1213:35	1213:35	6	*
NAME	1213:37	1213:37	4	op
LEAF_NODE	1213:37	1213:37	5	op
LEAF_NODE	1213:39	1213:39	3	,
PARAMETER_DECL	1213:41	1213:50	3	tmsize_t n
TYPE	1213:41	1213:41	4	tmsize_t
TYPE_NAME	1213:41	1213:41	5	tmsize_t
LEAF_NODE	1213:41	1213:41	6	tmsize_t
NAME	1213:50	1213:50	4	n
LEAF_NODE	1213:50	1213:50	5	n
LEAF_NODE	1213:51	1213:51	3	)
LEAF_NODE	1214:0	1214:0	2	{
STATEMENTS	1215:1	1218:1	2	
SIMPLE_DECL	1215:1	1215:33	3	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf ;
VAR_DECL	1215:1	1215:9	4	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf
TYPE	1215:1	1215:7	5	uint32 *
TYPE_NAME	1215:1	1215:1	6	uint32
LEAF_NODE	1215:1	1215:1	7	uint32
POINTER	1215:7	1215:7	6	*
LEAF_NODE	1215:7	1215:7	7	*
NAME	1215:9	1215:9	5	luv
LEAF_NODE	1215:9	1215:9	6	luv
LEAF_NODE	0:0	0:0	5	;
INIT	1215:9	1215:9	5	luv = ( uint32 * ) sp -> tbuf
ASSIGN	1215:9	1215:15	6	luv = ( uint32 * ) sp -> tbuf
LVAL	1215:9	1215:9	7	luv
NAME	1215:9	1215:9	8	luv
LEAF_NODE	1215:9	1215:9	9	luv
ASSIGN_OP	1215:13	1215:13	7	=
LEAF_NODE	1215:13	1215:13	8	=
RVAL	1215:15	1215:25	7	( uint32 * ) sp -> tbuf
LEAF_NODE	1215:15	1215:15	8	(
TYPE_NAME	1215:16	1215:16	8	uint32
LEAF_NODE	1215:16	1215:16	9	uint32
LEAF_NODE	1215:22	1215:22	8	*
LEAF_NODE	1215:23	1215:23	8	)
FIELD	1215:25	1215:29	8	sp -> tbuf
LEAF_NODE	1215:25	1215:25	9	sp
LEAF_NODE	1215:27	1215:27	9	->
LEAF_NODE	1215:29	1215:29	9	tbuf
LEAF_NODE	1215:33	1215:33	4	;
SIMPLE_DECL	1216:1	1216:25	3	float * xyz ; xyz = ( float * ) op ;
VAR_DECL	1216:1	1216:8	4	float * xyz ; xyz = ( float * ) op
TYPE	1216:1	1216:6	5	float *
TYPE_NAME	1216:1	1216:1	6	float
LEAF_NODE	1216:1	1216:1	7	float
POINTER	1216:6	1216:6	6	*
LEAF_NODE	1216:6	1216:6	7	*
NAME	1216:8	1216:8	5	xyz
LEAF_NODE	1216:8	1216:8	6	xyz
LEAF_NODE	0:0	0:0	5	;
INIT	1216:8	1216:8	5	xyz = ( float * ) op
ASSIGN	1216:8	1216:14	6	xyz = ( float * ) op
LVAL	1216:8	1216:8	7	xyz
NAME	1216:8	1216:8	8	xyz
LEAF_NODE	1216:8	1216:8	9	xyz
ASSIGN_OP	1216:12	1216:12	7	=
LEAF_NODE	1216:12	1216:12	8	=
RVAL	1216:14	1216:23	7	( float * ) op
LEAF_NODE	1216:14	1216:14	8	(
TYPE_NAME	1216:15	1216:15	8	float
LEAF_NODE	1216:15	1216:15	9	float
LEAF_NODE	1216:20	1216:20	8	*
LEAF_NODE	1216:21	1216:21	8	)
FIELD	1216:23	1216:23	8	op
LEAF_NODE	1216:23	1216:23	9	op
LEAF_NODE	1216:25	1216:25	4	;
ITERATION	1218:1	1218:17	3	
KEYWORD	1218:1	1218:1	4	while
LEAF_NODE	1218:1	1218:1	5	while
LEAF_NODE	1218:7	1218:7	4	(
CONDITION	1218:8	1218:8	4	n -- > 0
EXPR	1218:8	1218:14	5	n -- > 0
FIELD	1218:8	1218:9	6	n --
LEAF_NODE	1218:8	1218:8	7	n
LEAF_NODE	1218:9	1218:9	7	--
REL_OPERATOR	1218:12	1218:12	6	>
LEAF_NODE	1218:12	1218:12	7	>
FIELD	1218:14	1218:14	6	0
LEAF_NODE	1218:14	1218:14	7	0
LEAF_NODE	1218:15	1218:15	4	)
STATEMENTS	1218:17	1221:1	4	
LEAF_NODE	1218:17	1218:17	5	{
STATEMENTS	1219:2	1220:2	5	
EXPR_STATEMENT	1219:2	1219:48	6	* luv ++ = LogLuv32fromXYZ ( xyz , sp -> encode_meth ) ;
EXPR	1219:2	1219:2	7	* luv ++ = LogLuv32fromXYZ ( xyz , sp -> encode_meth )
ASSIGN	1219:2	1219:11	8	* luv ++ = LogLuv32fromXYZ ( xyz , sp -> encode_meth )
LVAL	1219:2	1219:2	9	* luv ++
UNARY_EXPR	1219:2	1219:3	10	* luv ++
UNARY_OPERATOR	1219:2	1219:2	11	*
LEAF_NODE	1219:2	1219:2	12	*
FIELD	1219:3	1219:6	11	luv ++
LEAF_NODE	1219:3	1219:3	12	luv
LEAF_NODE	1219:6	1219:6	12	++
ASSIGN_OP	1219:9	1219:9	9	=
LEAF_NODE	1219:9	1219:9	10	=
RVAL	1219:11	1219:11	9	LogLuv32fromXYZ ( xyz , sp -> encode_meth )
FUNCTION_CALL	1219:11	1219:47	10	LogLuv32fromXYZ ( xyz , sp -> encode_meth )
CALLEE	1219:11	1219:11	11	LogLuv32fromXYZ
LEAF_NODE	1219:11	1219:11	12	LogLuv32fromXYZ
LEAF_NODE	1219:26	1219:26	11	(
ARGUMENT	1219:27	1219:27	11	xyz
FIELD	1219:27	1219:27	12	xyz
LEAF_NODE	1219:27	1219:27	13	xyz
LEAF_NODE	1219:30	1219:30	11	,
ARGUMENT	1219:32	1219:32	11	sp -> encode_meth
FIELD	1219:32	1219:36	12	sp -> encode_meth
LEAF_NODE	1219:32	1219:32	13	sp
LEAF_NODE	1219:34	1219:34	13	->
LEAF_NODE	1219:36	1219:36	13	encode_meth
LEAF_NODE	1219:47	1219:47	11	)
LEAF_NODE	1219:48	1219:48	7	;
EXPR_STATEMENT	1220:2	1220:10	6	xyz += 3 ;
EXPR	1220:2	1220:2	7	xyz += 3
ASSIGN	1220:2	1220:9	8	xyz += 3
LVAL	1220:2	1220:2	9	xyz
FIELD	1220:2	1220:2	10	xyz
LEAF_NODE	1220:2	1220:2	11	xyz
ASSIGN_OP	1220:6	1220:6	9	+=
LEAF_NODE	1220:6	1220:6	10	+=
RVAL	1220:9	1220:9	9	3
FIELD	1220:9	1220:9	10	3
LEAF_NODE	1220:9	1220:9	11	3
LEAF_NODE	1220:10	1220:10	7	;
LEAF_NODE	1221:1	1221:1	5	}
LEAF_NODE	1222:0	1222:0	2	}
FUNCTION_DEF	1224:0	1245:0	1	
RETURN_TYPE	1224:0	1224:7	2	static void
LEAF_NODE	1224:0	1224:0	3	static
TYPE_NAME	1224:7	1224:7	3	void
LEAF_NODE	1224:7	1224:7	4	void
FUNCTION_NAME	1225:0	1225:0	2	Luv32fromLuv48
LEAF_NODE	1225:0	1225:0	3	Luv32fromLuv48
PARAMETER_LIST	1225:14	1225:53	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1225:14	1225:14	3	(
PARAMETER_DECL	1225:15	1225:28	3	LogLuvState * sp
TYPE	1225:15	1225:26	4	LogLuvState *
TYPE_NAME	1225:15	1225:15	5	LogLuvState
LEAF_NODE	1225:15	1225:15	6	LogLuvState
POINTER	1225:26	1225:26	5	*
LEAF_NODE	1225:26	1225:26	6	*
NAME	1225:28	1225:28	4	sp
LEAF_NODE	1225:28	1225:28	5	sp
LEAF_NODE	1225:30	1225:30	3	,
PARAMETER_DECL	1225:32	1225:39	3	uint8 * op
TYPE	1225:32	1225:37	4	uint8 *
TYPE_NAME	1225:32	1225:32	5	uint8
LEAF_NODE	1225:32	1225:32	6	uint8
POINTER	1225:37	1225:37	5	*
LEAF_NODE	1225:37	1225:37	6	*
NAME	1225:39	1225:39	4	op
LEAF_NODE	1225:39	1225:39	5	op
LEAF_NODE	1225:41	1225:41	3	,
PARAMETER_DECL	1225:43	1225:52	3	tmsize_t n
TYPE	1225:43	1225:43	4	tmsize_t
TYPE_NAME	1225:43	1225:43	5	tmsize_t
LEAF_NODE	1225:43	1225:43	6	tmsize_t
NAME	1225:52	1225:52	4	n
LEAF_NODE	1225:52	1225:52	5	n
LEAF_NODE	1225:53	1225:53	3	)
LEAF_NODE	1226:0	1226:0	2	{
STATEMENTS	1227:1	1239:1	2	
SIMPLE_DECL	1227:1	1227:33	3	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf ;
VAR_DECL	1227:1	1227:9	4	uint32 * luv ; luv = ( uint32 * ) sp -> tbuf
TYPE	1227:1	1227:7	5	uint32 *
TYPE_NAME	1227:1	1227:1	6	uint32
LEAF_NODE	1227:1	1227:1	7	uint32
POINTER	1227:7	1227:7	6	*
LEAF_NODE	1227:7	1227:7	7	*
NAME	1227:9	1227:9	5	luv
LEAF_NODE	1227:9	1227:9	6	luv
LEAF_NODE	0:0	0:0	5	;
INIT	1227:9	1227:9	5	luv = ( uint32 * ) sp -> tbuf
ASSIGN	1227:9	1227:15	6	luv = ( uint32 * ) sp -> tbuf
LVAL	1227:9	1227:9	7	luv
NAME	1227:9	1227:9	8	luv
LEAF_NODE	1227:9	1227:9	9	luv
ASSIGN_OP	1227:13	1227:13	7	=
LEAF_NODE	1227:13	1227:13	8	=
RVAL	1227:15	1227:25	7	( uint32 * ) sp -> tbuf
LEAF_NODE	1227:15	1227:15	8	(
TYPE_NAME	1227:16	1227:16	8	uint32
LEAF_NODE	1227:16	1227:16	9	uint32
LEAF_NODE	1227:22	1227:22	8	*
LEAF_NODE	1227:23	1227:23	8	)
FIELD	1227:25	1227:29	8	sp -> tbuf
LEAF_NODE	1227:25	1227:25	9	sp
LEAF_NODE	1227:27	1227:27	9	->
LEAF_NODE	1227:29	1227:29	9	tbuf
LEAF_NODE	1227:33	1227:33	4	;
SIMPLE_DECL	1228:1	1228:26	3	int16 * luv3 ; luv3 = ( int16 * ) op ;
VAR_DECL	1228:1	1228:8	4	int16 * luv3 ; luv3 = ( int16 * ) op
TYPE	1228:1	1228:6	5	int16 *
TYPE_NAME	1228:1	1228:1	6	int16
LEAF_NODE	1228:1	1228:1	7	int16
POINTER	1228:6	1228:6	6	*
LEAF_NODE	1228:6	1228:6	7	*
NAME	1228:8	1228:8	5	luv3
LEAF_NODE	1228:8	1228:8	6	luv3
LEAF_NODE	0:0	0:0	5	;
INIT	1228:8	1228:8	5	luv3 = ( int16 * ) op
ASSIGN	1228:8	1228:15	6	luv3 = ( int16 * ) op
LVAL	1228:8	1228:8	7	luv3
NAME	1228:8	1228:8	8	luv3
LEAF_NODE	1228:8	1228:8	9	luv3
ASSIGN_OP	1228:13	1228:13	7	=
LEAF_NODE	1228:13	1228:13	8	=
RVAL	1228:15	1228:24	7	( int16 * ) op
LEAF_NODE	1228:15	1228:15	8	(
TYPE_NAME	1228:16	1228:16	8	int16
LEAF_NODE	1228:16	1228:16	9	int16
LEAF_NODE	1228:21	1228:21	8	*
LEAF_NODE	1228:22	1228:22	8	)
FIELD	1228:24	1228:24	8	op
LEAF_NODE	1228:24	1228:24	9	op
LEAF_NODE	1228:26	1228:26	4	;
SELECTION	1230:1	1230:47	3	
KEYWORD	1230:1	1230:1	4	if
LEAF_NODE	1230:1	1230:1	5	if
LEAF_NODE	1230:4	1230:4	4	(
CONDITION	1230:5	1230:5	4	sp -> encode_meth == SGILOGENCODE_NODITHER
EXPR	1230:5	1230:24	5	sp -> encode_meth == SGILOGENCODE_NODITHER
FIELD	1230:5	1230:9	6	sp -> encode_meth
LEAF_NODE	1230:5	1230:5	7	sp
LEAF_NODE	1230:7	1230:7	7	->
LEAF_NODE	1230:9	1230:9	7	encode_meth
EQ_OPERATOR	1230:21	1230:21	6	==
LEAF_NODE	1230:21	1230:21	7	==
FIELD	1230:24	1230:24	6	SGILOGENCODE_NODITHER
LEAF_NODE	1230:24	1230:24	7	SGILOGENCODE_NODITHER
LEAF_NODE	1230:45	1230:45	4	)
STATEMENTS	1230:47	1238:1	4	
LEAF_NODE	1230:47	1230:47	5	{
STATEMENTS	1231:2	1237:2	5	
ITERATION	1231:2	1231:18	6	
KEYWORD	1231:2	1231:2	7	while
LEAF_NODE	1231:2	1231:2	8	while
LEAF_NODE	1231:8	1231:8	7	(
CONDITION	1231:9	1231:9	7	n -- > 0
EXPR	1231:9	1231:15	8	n -- > 0
FIELD	1231:9	1231:10	9	n --
LEAF_NODE	1231:9	1231:9	10	n
LEAF_NODE	1231:10	1231:10	10	--
REL_OPERATOR	1231:13	1231:13	9	>
LEAF_NODE	1231:13	1231:13	10	>
FIELD	1231:15	1231:15	9	0
LEAF_NODE	1231:15	1231:15	10	0
LEAF_NODE	1231:16	1231:16	7	)
STATEMENTS	1231:18	1236:2	7	
LEAF_NODE	1231:18	1231:18	8	{
STATEMENTS	1232:3	1235:3	8	
EXPR_STATEMENT	1232:3	1234:47	9	* luv ++ = ( uint32 ) luv3 [ 0 ] << 16 | ( luv3 [ 1 ] * ( uint32 ) ( UVSCALE + .5 ) >> 7 & 0xff00 ) | ( luv3 [ 2 ] * ( uint32 ) ( UVSCALE + .5 ) >> 15 & 0xff ) ;
EXPR	1232:3	1232:3	10	* luv ++ = ( uint32 ) luv3 [ 0 ] << 16 | ( luv3 [ 1 ] * ( uint32 ) ( UVSCALE + .5 ) >> 7 & 0xff00 ) | ( luv3 [ 2 ] * ( uint32 ) ( UVSCALE + .5 ) >> 15 & 0xff )
ASSIGN	1232:3	1232:12	11	* luv ++ = ( uint32 ) luv3 [ 0 ] << 16 | ( luv3 [ 1 ] * ( uint32 ) ( UVSCALE + .5 ) >> 7 & 0xff00 ) | ( luv3 [ 2 ] * ( uint32 ) ( UVSCALE + .5 ) >> 15 & 0xff )
LVAL	1232:3	1232:3	12	* luv ++
UNARY_EXPR	1232:3	1232:4	13	* luv ++
UNARY_OPERATOR	1232:3	1232:3	14	*
LEAF_NODE	1232:3	1232:3	15	*
FIELD	1232:4	1232:7	14	luv ++
LEAF_NODE	1232:4	1232:4	15	luv
LEAF_NODE	1232:7	1232:7	15	++
ASSIGN_OP	1232:10	1232:10	12	=
LEAF_NODE	1232:10	1232:10	13	=
RVAL	1232:12	1232:12	12	( uint32 ) luv3 [ 0 ] << 16 | ( luv3 [ 1 ] * ( uint32 ) ( UVSCALE + .5 ) >> 7 & 0xff00 ) | ( luv3 [ 2 ] * ( uint32 ) ( UVSCALE + .5 ) >> 15 & 0xff )
BIT_OR	1232:12	1233:4	13	( uint32 ) luv3 [ 0 ] << 16 | ( luv3 [ 1 ] * ( uint32 ) ( UVSCALE + .5 ) >> 7 & 0xff00 ) | ( luv3 [ 2 ] * ( uint32 ) ( UVSCALE + .5 ) >> 15 & 0xff )
BIT_OR_ELEM	1232:12	1232:31	14	( uint32 ) luv3 [ 0 ] << 16
LEAF_NODE	1232:12	1232:12	15	(
TYPE_NAME	1232:13	1232:13	15	uint32
LEAF_NODE	1232:13	1232:13	16	uint32
LEAF_NODE	1232:19	1232:19	15	)
FIELD	1232:20	1232:26	15	luv3 [ 0 ]
LEAF_NODE	1232:20	1232:20	16	luv3
LEAF_NODE	1232:24	1232:24	16	[
EXPR	1232:25	1232:25	16	0
FIELD	1232:25	1232:25	17	0
LEAF_NODE	1232:25	1232:25	18	0
LEAF_NODE	1232:26	1232:26	16	]
LEAF_NODE	1232:28	1232:28	15	<<
FIELD	1232:31	1232:31	15	16
LEAF_NODE	1232:31	1232:31	16	16
LEAF_NODE	1232:34	1232:34	14	|
BIT_OR_ELEM	1233:4	1233:4	14	( luv3 [ 1 ] * ( uint32 ) ( UVSCALE + .5 ) >> 7 & 0xff00 ) | ( luv3 [ 2 ] * ( uint32 ) ( UVSCALE + .5 ) >> 15 & 0xff )
BIT_OR	1233:4	1234:4	15	( luv3 [ 1 ] * ( uint32 ) ( UVSCALE + .5 ) >> 7 & 0xff00 ) | ( luv3 [ 2 ] * ( uint32 ) ( UVSCALE + .5 ) >> 15 & 0xff )
BIT_OR_ELEM	1233:4	1233:47	16	( luv3 [ 1 ] * ( uint32 ) ( UVSCALE + .5 ) >> 7 & 0xff00 )
LEAF_NODE	1233:4	1233:4	17	(
FIELD	1233:5	1233:11	17	luv3 [ 1 ]
LEAF_NODE	1233:5	1233:5	18	luv3
LEAF_NODE	1233:9	1233:9	18	[
EXPR	1233:10	1233:10	18	1
FIELD	1233:10	1233:10	19	1
LEAF_NODE	1233:10	1233:10	20	1
LEAF_NODE	1233:11	1233:11	18	]
LEAF_NODE	1233:12	1233:12	17	*
LEAF_NODE	1233:13	1233:13	17	(
TYPE_NAME	1233:14	1233:14	17	uint32
LEAF_NODE	1233:14	1233:14	18	uint32
LEAF_NODE	1233:20	1233:20	17	)
LEAF_NODE	1233:21	1233:21	17	(
FIELD	1233:22	1233:22	17	UVSCALE
LEAF_NODE	1233:22	1233:22	18	UVSCALE
LEAF_NODE	1233:29	1233:29	17	+
FIELD	1233:30	1233:30	17	.5
LEAF_NODE	1233:30	1233:30	18	.5
LEAF_NODE	1233:32	1233:32	17	)
LEAF_NODE	1233:34	1233:34	17	>>
FIELD	1233:37	1233:37	17	7
LEAF_NODE	1233:37	1233:37	18	7
LEAF_NODE	1233:39	1233:39	17	&
FIELD	1233:41	1233:41	17	0xff00
LEAF_NODE	1233:41	1233:41	18	0xff00
LEAF_NODE	1233:47	1233:47	17	)
LEAF_NODE	1233:49	1233:49	16	|
BIT_OR_ELEM	1234:4	1234:46	16	( luv3 [ 2 ] * ( uint32 ) ( UVSCALE + .5 ) >> 15 & 0xff )
LEAF_NODE	1234:4	1234:4	17	(
FIELD	1234:5	1234:11	17	luv3 [ 2 ]
LEAF_NODE	1234:5	1234:5	18	luv3
LEAF_NODE	1234:9	1234:9	18	[
EXPR	1234:10	1234:10	18	2
FIELD	1234:10	1234:10	19	2
LEAF_NODE	1234:10	1234:10	20	2
LEAF_NODE	1234:11	1234:11	18	]
LEAF_NODE	1234:12	1234:12	17	*
LEAF_NODE	1234:13	1234:13	17	(
TYPE_NAME	1234:14	1234:14	17	uint32
LEAF_NODE	1234:14	1234:14	18	uint32
LEAF_NODE	1234:20	1234:20	17	)
LEAF_NODE	1234:21	1234:21	17	(
FIELD	1234:22	1234:22	17	UVSCALE
LEAF_NODE	1234:22	1234:22	18	UVSCALE
LEAF_NODE	1234:29	1234:29	17	+
FIELD	1234:30	1234:30	17	.5
LEAF_NODE	1234:30	1234:30	18	.5
LEAF_NODE	1234:32	1234:32	17	)
LEAF_NODE	1234:34	1234:34	17	>>
FIELD	1234:37	1234:37	17	15
LEAF_NODE	1234:37	1234:37	18	15
LEAF_NODE	1234:40	1234:40	17	&
FIELD	1234:42	1234:42	17	0xff
LEAF_NODE	1234:42	1234:42	18	0xff
LEAF_NODE	1234:46	1234:46	17	)
LEAF_NODE	1234:47	1234:47	10	;
EXPR_STATEMENT	1235:3	1235:12	9	luv3 += 3 ;
EXPR	1235:3	1235:3	10	luv3 += 3
ASSIGN	1235:3	1235:11	11	luv3 += 3
LVAL	1235:3	1235:3	12	luv3
FIELD	1235:3	1235:3	13	luv3
LEAF_NODE	1235:3	1235:3	14	luv3
ASSIGN_OP	1235:8	1235:8	12	+=
LEAF_NODE	1235:8	1235:8	13	+=
RVAL	1235:11	1235:11	12	3
FIELD	1235:11	1235:11	13	3
LEAF_NODE	1235:11	1235:11	14	3
LEAF_NODE	1235:12	1235:12	10	;
LEAF_NODE	1236:2	1236:2	8	}
JUMP_STATEMENT	1237:2	1237:8	6	return DESTINATION ;
KEYWORD	1237:2	1237:2	7	return
LEAF_NODE	1237:2	1237:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1237:8	1237:8	7	;
LEAF_NODE	1238:1	1238:1	5	}
ITERATION	1239:1	1239:17	3	
KEYWORD	1239:1	1239:1	4	while
LEAF_NODE	1239:1	1239:1	5	while
LEAF_NODE	1239:7	1239:7	4	(
CONDITION	1239:8	1239:8	4	n -- > 0
EXPR	1239:8	1239:14	5	n -- > 0
FIELD	1239:8	1239:9	6	n --
LEAF_NODE	1239:8	1239:8	7	n
LEAF_NODE	1239:9	1239:9	7	--
REL_OPERATOR	1239:12	1239:12	6	>
LEAF_NODE	1239:12	1239:12	7	>
FIELD	1239:14	1239:14	6	0
LEAF_NODE	1239:14	1239:14	7	0
LEAF_NODE	1239:15	1239:15	4	)
STATEMENTS	1239:17	1244:1	4	
LEAF_NODE	1239:17	1239:17	5	{
STATEMENTS	1240:2	1243:2	5	
EXPR_STATEMENT	1240:2	1242:61	6	* luv ++ = ( uint32 ) luv3 [ 0 ] << 16 | ( itrunc ( luv3 [ 1 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) << 8 & 0xff00 ) | ( itrunc ( luv3 [ 2 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) & 0xff ) ;
EXPR	1240:2	1240:2	7	* luv ++ = ( uint32 ) luv3 [ 0 ] << 16 | ( itrunc ( luv3 [ 1 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) << 8 & 0xff00 ) | ( itrunc ( luv3 [ 2 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) & 0xff )
ASSIGN	1240:2	1240:11	8	* luv ++ = ( uint32 ) luv3 [ 0 ] << 16 | ( itrunc ( luv3 [ 1 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) << 8 & 0xff00 ) | ( itrunc ( luv3 [ 2 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) & 0xff )
LVAL	1240:2	1240:2	9	* luv ++
UNARY_EXPR	1240:2	1240:3	10	* luv ++
UNARY_OPERATOR	1240:2	1240:2	11	*
LEAF_NODE	1240:2	1240:2	12	*
FIELD	1240:3	1240:6	11	luv ++
LEAF_NODE	1240:3	1240:3	12	luv
LEAF_NODE	1240:6	1240:6	12	++
ASSIGN_OP	1240:9	1240:9	9	=
LEAF_NODE	1240:9	1240:9	10	=
RVAL	1240:11	1240:11	9	( uint32 ) luv3 [ 0 ] << 16 | ( itrunc ( luv3 [ 1 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) << 8 & 0xff00 ) | ( itrunc ( luv3 [ 2 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) & 0xff )
BIT_OR	1240:11	1241:1	10	( uint32 ) luv3 [ 0 ] << 16 | ( itrunc ( luv3 [ 1 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) << 8 & 0xff00 ) | ( itrunc ( luv3 [ 2 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) & 0xff )
BIT_OR_ELEM	1240:11	1240:30	11	( uint32 ) luv3 [ 0 ] << 16
LEAF_NODE	1240:11	1240:11	12	(
TYPE_NAME	1240:12	1240:12	12	uint32
LEAF_NODE	1240:12	1240:12	13	uint32
LEAF_NODE	1240:18	1240:18	12	)
FIELD	1240:19	1240:25	12	luv3 [ 0 ]
LEAF_NODE	1240:19	1240:19	13	luv3
LEAF_NODE	1240:23	1240:23	13	[
EXPR	1240:24	1240:24	13	0
FIELD	1240:24	1240:24	14	0
LEAF_NODE	1240:24	1240:24	15	0
LEAF_NODE	1240:25	1240:25	13	]
LEAF_NODE	1240:27	1240:27	12	<<
FIELD	1240:30	1240:30	12	16
LEAF_NODE	1240:30	1240:30	13	16
LEAF_NODE	1240:33	1240:33	11	|
BIT_OR_ELEM	1241:1	1241:1	11	( itrunc ( luv3 [ 1 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) << 8 & 0xff00 ) | ( itrunc ( luv3 [ 2 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) & 0xff )
BIT_OR	1241:1	1242:2	12	( itrunc ( luv3 [ 1 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) << 8 & 0xff00 ) | ( itrunc ( luv3 [ 2 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) & 0xff )
BIT_OR_ELEM	1241:1	1241:66	13	( itrunc ( luv3 [ 1 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) << 8 & 0xff00 )
LEAF_NODE	1241:1	1241:1	14	(
FUNCTION_CALL	1241:2	1241:51	14	itrunc ( luv3 [ 1 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth )
CALLEE	1241:2	1241:2	15	itrunc
LEAF_NODE	1241:2	1241:2	16	itrunc
LEAF_NODE	1241:8	1241:8	15	(
ARGUMENT	1241:9	1241:33	15	luv3 [ 1 ] * ( UVSCALE / ( 1 << 15 ) )
FIELD	1241:9	1241:15	16	luv3 [ 1 ]
LEAF_NODE	1241:9	1241:9	17	luv3
LEAF_NODE	1241:13	1241:13	17	[
EXPR	1241:14	1241:14	17	1
FIELD	1241:14	1241:14	18	1
LEAF_NODE	1241:14	1241:14	19	1
LEAF_NODE	1241:15	1241:15	17	]
LEAF_NODE	1241:16	1241:16	16	*
LEAF_NODE	1241:17	1241:17	16	(
FIELD	1241:18	1241:18	16	UVSCALE
LEAF_NODE	1241:18	1241:18	17	UVSCALE
LEAF_NODE	1241:25	1241:25	16	/
LEAF_NODE	1241:26	1241:26	16	(
FIELD	1241:27	1241:27	16	1
LEAF_NODE	1241:27	1241:27	17	1
LEAF_NODE	1241:28	1241:28	16	<<
FIELD	1241:30	1241:30	16	15
LEAF_NODE	1241:30	1241:30	17	15
LEAF_NODE	1241:32	1241:32	16	)
LEAF_NODE	1241:33	1241:33	16	)
LEAF_NODE	1241:34	1241:34	15	,
ARGUMENT	1241:36	1241:36	15	sp -> encode_meth
FIELD	1241:36	1241:40	16	sp -> encode_meth
LEAF_NODE	1241:36	1241:36	17	sp
LEAF_NODE	1241:38	1241:38	17	->
LEAF_NODE	1241:40	1241:40	17	encode_meth
LEAF_NODE	1241:51	1241:51	15	)
LEAF_NODE	1241:53	1241:53	14	<<
FIELD	1241:56	1241:56	14	8
LEAF_NODE	1241:56	1241:56	15	8
LEAF_NODE	1241:58	1241:58	14	&
FIELD	1241:60	1241:60	14	0xff00
LEAF_NODE	1241:60	1241:60	15	0xff00
LEAF_NODE	1241:66	1241:66	14	)
LEAF_NODE	1241:68	1241:68	13	|
BIT_OR_ELEM	1242:2	1242:60	13	( itrunc ( luv3 [ 2 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth ) & 0xff )
LEAF_NODE	1242:2	1242:2	14	(
FUNCTION_CALL	1242:3	1242:52	14	itrunc ( luv3 [ 2 ] * ( UVSCALE / ( 1 << 15 ) ) , sp -> encode_meth )
CALLEE	1242:3	1242:3	15	itrunc
LEAF_NODE	1242:3	1242:3	16	itrunc
LEAF_NODE	1242:9	1242:9	15	(
ARGUMENT	1242:10	1242:34	15	luv3 [ 2 ] * ( UVSCALE / ( 1 << 15 ) )
FIELD	1242:10	1242:16	16	luv3 [ 2 ]
LEAF_NODE	1242:10	1242:10	17	luv3
LEAF_NODE	1242:14	1242:14	17	[
EXPR	1242:15	1242:15	17	2
FIELD	1242:15	1242:15	18	2
LEAF_NODE	1242:15	1242:15	19	2
LEAF_NODE	1242:16	1242:16	17	]
LEAF_NODE	1242:17	1242:17	16	*
LEAF_NODE	1242:18	1242:18	16	(
FIELD	1242:19	1242:19	16	UVSCALE
LEAF_NODE	1242:19	1242:19	17	UVSCALE
LEAF_NODE	1242:26	1242:26	16	/
LEAF_NODE	1242:27	1242:27	16	(
FIELD	1242:28	1242:28	16	1
LEAF_NODE	1242:28	1242:28	17	1
LEAF_NODE	1242:29	1242:29	16	<<
FIELD	1242:31	1242:31	16	15
LEAF_NODE	1242:31	1242:31	17	15
LEAF_NODE	1242:33	1242:33	16	)
LEAF_NODE	1242:34	1242:34	16	)
LEAF_NODE	1242:35	1242:35	15	,
ARGUMENT	1242:37	1242:37	15	sp -> encode_meth
FIELD	1242:37	1242:41	16	sp -> encode_meth
LEAF_NODE	1242:37	1242:37	17	sp
LEAF_NODE	1242:39	1242:39	17	->
LEAF_NODE	1242:41	1242:41	17	encode_meth
LEAF_NODE	1242:52	1242:52	15	)
LEAF_NODE	1242:54	1242:54	14	&
FIELD	1242:56	1242:56	14	0xff
LEAF_NODE	1242:56	1242:56	15	0xff
LEAF_NODE	1242:60	1242:60	14	)
LEAF_NODE	1242:61	1242:61	7	;
EXPR_STATEMENT	1243:2	1243:11	6	luv3 += 3 ;
EXPR	1243:2	1243:2	7	luv3 += 3
ASSIGN	1243:2	1243:10	8	luv3 += 3
LVAL	1243:2	1243:2	9	luv3
FIELD	1243:2	1243:2	10	luv3
LEAF_NODE	1243:2	1243:2	11	luv3
ASSIGN_OP	1243:7	1243:7	9	+=
LEAF_NODE	1243:7	1243:7	10	+=
RVAL	1243:10	1243:10	9	3
FIELD	1243:10	1243:10	10	3
LEAF_NODE	1243:10	1243:10	11	3
LEAF_NODE	1243:11	1243:11	7	;
LEAF_NODE	1244:1	1244:1	5	}
LEAF_NODE	1245:0	1245:0	2	}
FUNCTION_DEF	1247:0	1251:0	1	
RETURN_TYPE	1247:0	1247:7	2	static void
LEAF_NODE	1247:0	1247:0	3	static
TYPE_NAME	1247:7	1247:7	3	void
LEAF_NODE	1247:7	1247:7	4	void
FUNCTION_NAME	1248:0	1248:0	2	_logLuvNop
LEAF_NODE	1248:0	1248:0	3	_logLuvNop
PARAMETER_LIST	1248:10	1248:49	2	( LogLuvState * sp , uint8 * op , tmsize_t n )
LEAF_NODE	1248:10	1248:10	3	(
PARAMETER_DECL	1248:11	1248:24	3	LogLuvState * sp
TYPE	1248:11	1248:22	4	LogLuvState *
TYPE_NAME	1248:11	1248:11	5	LogLuvState
LEAF_NODE	1248:11	1248:11	6	LogLuvState
POINTER	1248:22	1248:22	5	*
LEAF_NODE	1248:22	1248:22	6	*
NAME	1248:24	1248:24	4	sp
LEAF_NODE	1248:24	1248:24	5	sp
LEAF_NODE	1248:26	1248:26	3	,
PARAMETER_DECL	1248:28	1248:35	3	uint8 * op
TYPE	1248:28	1248:33	4	uint8 *
TYPE_NAME	1248:28	1248:28	5	uint8
LEAF_NODE	1248:28	1248:28	6	uint8
POINTER	1248:33	1248:33	5	*
LEAF_NODE	1248:33	1248:33	6	*
NAME	1248:35	1248:35	4	op
LEAF_NODE	1248:35	1248:35	5	op
LEAF_NODE	1248:37	1248:37	3	,
PARAMETER_DECL	1248:39	1248:48	3	tmsize_t n
TYPE	1248:39	1248:39	4	tmsize_t
TYPE_NAME	1248:39	1248:39	5	tmsize_t
LEAF_NODE	1248:39	1248:39	6	tmsize_t
NAME	1248:48	1248:48	4	n
LEAF_NODE	1248:48	1248:48	5	n
LEAF_NODE	1248:49	1248:49	3	)
LEAF_NODE	1249:0	1249:0	2	{
STATEMENTS	1250:1	1250:23	2	
EXPR_STATEMENT	1250:1	1250:10	3	( void ) sp ;
EXPR	1250:1	1250:8	4	( void ) sp
LEAF_NODE	1250:1	1250:1	5	(
TYPE_NAME	1250:2	1250:2	5	void
LEAF_NODE	1250:2	1250:2	6	void
LEAF_NODE	1250:6	1250:6	5	)
FIELD	1250:8	1250:8	5	sp
LEAF_NODE	1250:8	1250:8	6	sp
LEAF_NODE	1250:10	1250:10	4	;
EXPR_STATEMENT	1250:12	1250:21	3	( void ) op ;
EXPR	1250:12	1250:19	4	( void ) op
LEAF_NODE	1250:12	1250:12	5	(
TYPE_NAME	1250:13	1250:13	5	void
LEAF_NODE	1250:13	1250:13	6	void
LEAF_NODE	1250:17	1250:17	5	)
FIELD	1250:19	1250:19	5	op
LEAF_NODE	1250:19	1250:19	6	op
LEAF_NODE	1250:21	1250:21	4	;
EXPR_STATEMENT	1250:23	1250:31	3	( void ) n ;
EXPR	1250:23	1250:30	4	( void ) n
LEAF_NODE	1250:23	1250:23	5	(
TYPE_NAME	1250:24	1250:24	5	void
LEAF_NODE	1250:24	1250:24	6	void
LEAF_NODE	1250:28	1250:28	5	)
FIELD	1250:30	1250:30	5	n
LEAF_NODE	1250:30	1250:30	6	n
LEAF_NODE	1250:31	1250:31	4	;
LEAF_NODE	1251:0	1251:0	2	}
FUNCTION_DEF	1253:0	1270:0	1	
RETURN_TYPE	1253:0	1253:7	2	static int
LEAF_NODE	1253:0	1253:0	3	static
TYPE_NAME	1253:7	1253:7	3	int
LEAF_NODE	1253:7	1253:7	4	int
FUNCTION_NAME	1254:0	1254:0	2	LogL16GuessDataFmt
LEAF_NODE	1254:0	1254:0	3	LogL16GuessDataFmt
PARAMETER_LIST	1254:18	1254:36	2	( TIFFDirectory * td )
LEAF_NODE	1254:18	1254:18	3	(
PARAMETER_DECL	1254:19	1254:34	3	TIFFDirectory * td
TYPE	1254:19	1254:33	4	TIFFDirectory *
TYPE_NAME	1254:19	1254:19	5	TIFFDirectory
LEAF_NODE	1254:19	1254:19	6	TIFFDirectory
POINTER	1254:33	1254:33	5	*
LEAF_NODE	1254:33	1254:33	6	*
NAME	1254:34	1254:34	4	td
LEAF_NODE	1254:34	1254:34	5	td
LEAF_NODE	1254:36	1254:36	3	)
LEAF_NODE	1255:0	1255:0	2	{
STATEMENTS	1257:1	1269:31	2	
SELECTION	1257:1	1257:82	3	
KEYWORD	1257:1	1257:1	4	switch
LEAF_NODE	1257:1	1257:1	5	switch
LEAF_NODE	1257:8	1257:8	4	(
CONDITION	1257:9	1257:9	4	PACK ( td -> td_samplesperpixel , td -> td_bitspersample , td -> td_sampleformat )
EXPR	1257:9	1257:9	5	PACK ( td -> td_samplesperpixel , td -> td_bitspersample , td -> td_sampleformat )
FUNCTION_CALL	1257:9	1257:79	6	PACK ( td -> td_samplesperpixel , td -> td_bitspersample , td -> td_sampleformat )
CALLEE	1257:9	1257:9	7	PACK
LEAF_NODE	1257:9	1257:9	8	PACK
LEAF_NODE	1257:13	1257:13	7	(
ARGUMENT	1257:14	1257:14	7	td -> td_samplesperpixel
FIELD	1257:14	1257:18	8	td -> td_samplesperpixel
LEAF_NODE	1257:14	1257:14	9	td
LEAF_NODE	1257:16	1257:16	9	->
LEAF_NODE	1257:18	1257:18	9	td_samplesperpixel
LEAF_NODE	1257:36	1257:36	7	,
ARGUMENT	1257:38	1257:38	7	td -> td_bitspersample
FIELD	1257:38	1257:42	8	td -> td_bitspersample
LEAF_NODE	1257:38	1257:38	9	td
LEAF_NODE	1257:40	1257:40	9	->
LEAF_NODE	1257:42	1257:42	9	td_bitspersample
LEAF_NODE	1257:58	1257:58	7	,
ARGUMENT	1257:60	1257:60	7	td -> td_sampleformat
FIELD	1257:60	1257:64	8	td -> td_sampleformat
LEAF_NODE	1257:60	1257:60	9	td
LEAF_NODE	1257:62	1257:62	9	->
LEAF_NODE	1257:64	1257:64	9	td_sampleformat
LEAF_NODE	1257:79	1257:79	7	)
LEAF_NODE	1257:80	1257:80	4	)
STATEMENTS	1257:82	1267:1	4	
LEAF_NODE	1257:82	1257:82	5	{
STATEMENTS	1258:1	1266:29	5	
LEAF_NODE	1258:1	1258:1	6	case
LEAF_NODE	1258:6	1258:6	6	PACK
LEAF_NODE	1258:10	1258:10	6	(
LEAF_NODE	1258:11	1258:11	6	1
LEAF_NODE	1258:12	1258:12	6	,
LEAF_NODE	1258:14	1258:14	6	32
LEAF_NODE	1258:16	1258:16	6	,
LEAF_NODE	1258:18	1258:18	6	SAMPLEFORMAT_IEEEFP
LEAF_NODE	1258:37	1258:37	6	)
LEAF_NODE	1258:38	1258:38	6	:
LEAF_NODE	1259:2	1259:2	6	return
LEAF_NODE	1259:9	1259:9	6	(
LEAF_NODE	1259:10	1259:10	6	SGILOGDATAFMT_FLOAT
LEAF_NODE	1259:29	1259:29	6	)
LEAF_NODE	1259:30	1259:30	6	;
LEAF_NODE	1260:1	1260:1	6	case
LEAF_NODE	1260:6	1260:6	6	PACK
LEAF_NODE	1260:10	1260:10	6	(
LEAF_NODE	1260:11	1260:11	6	1
LEAF_NODE	1260:12	1260:12	6	,
LEAF_NODE	1260:14	1260:14	6	16
LEAF_NODE	1260:16	1260:16	6	,
LEAF_NODE	1260:18	1260:18	6	SAMPLEFORMAT_VOID
LEAF_NODE	1260:35	1260:35	6	)
LEAF_NODE	1260:36	1260:36	6	:
LEAF_NODE	1261:1	1261:1	6	case
LEAF_NODE	1261:6	1261:6	6	PACK
LEAF_NODE	1261:10	1261:10	6	(
LEAF_NODE	1261:11	1261:11	6	1
LEAF_NODE	1261:12	1261:12	6	,
LEAF_NODE	1261:14	1261:14	6	16
LEAF_NODE	1261:16	1261:16	6	,
LEAF_NODE	1261:18	1261:18	6	SAMPLEFORMAT_INT
LEAF_NODE	1261:34	1261:34	6	)
LEAF_NODE	1261:35	1261:35	6	:
LEAF_NODE	1262:1	1262:1	6	case
LEAF_NODE	1262:6	1262:6	6	PACK
LEAF_NODE	1262:10	1262:10	6	(
LEAF_NODE	1262:11	1262:11	6	1
LEAF_NODE	1262:12	1262:12	6	,
LEAF_NODE	1262:14	1262:14	6	16
LEAF_NODE	1262:16	1262:16	6	,
LEAF_NODE	1262:18	1262:18	6	SAMPLEFORMAT_UINT
LEAF_NODE	1262:35	1262:35	6	)
LEAF_NODE	1262:36	1262:36	6	:
LEAF_NODE	1263:2	1263:2	6	return
LEAF_NODE	1263:9	1263:9	6	(
LEAF_NODE	1263:10	1263:10	6	SGILOGDATAFMT_16BIT
LEAF_NODE	1263:29	1263:29	6	)
LEAF_NODE	1263:30	1263:30	6	;
LEAF_NODE	1264:1	1264:1	6	case
LEAF_NODE	1264:6	1264:6	6	PACK
LEAF_NODE	1264:10	1264:10	6	(
LEAF_NODE	1264:11	1264:11	6	1
LEAF_NODE	1264:12	1264:12	6	,
LEAF_NODE	1264:15	1264:15	6	8
LEAF_NODE	1264:16	1264:16	6	,
LEAF_NODE	1264:18	1264:18	6	SAMPLEFORMAT_VOID
LEAF_NODE	1264:35	1264:35	6	)
LEAF_NODE	1264:36	1264:36	6	:
LEAF_NODE	1265:1	1265:1	6	case
LEAF_NODE	1265:6	1265:6	6	PACK
LEAF_NODE	1265:10	1265:10	6	(
LEAF_NODE	1265:11	1265:11	6	1
LEAF_NODE	1265:12	1265:12	6	,
LEAF_NODE	1265:15	1265:15	6	8
LEAF_NODE	1265:16	1265:16	6	,
LEAF_NODE	1265:18	1265:18	6	SAMPLEFORMAT_UINT
LEAF_NODE	1265:35	1265:35	6	)
LEAF_NODE	1265:36	1265:36	6	:
LEAF_NODE	1266:2	1266:2	6	return
LEAF_NODE	1266:9	1266:9	6	(
LEAF_NODE	1266:10	1266:10	6	SGILOGDATAFMT_8BIT
LEAF_NODE	1266:28	1266:28	6	)
LEAF_NODE	1266:29	1266:29	6	;
LEAF_NODE	1267:1	1267:1	5	}
LEAF_NODE	1269:1	1269:1	3	return
LEAF_NODE	1269:8	1269:8	3	(
LEAF_NODE	1269:9	1269:9	3	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1269:30	1269:30	3	)
LEAF_NODE	1269:31	1269:31	3	;
LEAF_NODE	1270:0	1270:0	2	}
FUNCTION_DEF	1272:0	1276:0	1	
RETURN_TYPE	1272:0	1272:7	2	static tmsize_t
LEAF_NODE	1272:0	1272:0	3	static
TYPE_NAME	1272:7	1272:7	3	tmsize_t
LEAF_NODE	1272:7	1272:7	4	tmsize_t
FUNCTION_NAME	1273:0	1273:0	2	multiply_ms
LEAF_NODE	1273:0	1273:0	3	multiply_ms
PARAMETER_LIST	1273:11	1273:36	2	( tmsize_t m1 , tmsize_t m2 )
LEAF_NODE	1273:11	1273:11	3	(
PARAMETER_DECL	1273:12	1273:21	3	tmsize_t m1
TYPE	1273:12	1273:12	4	tmsize_t
TYPE_NAME	1273:12	1273:12	5	tmsize_t
LEAF_NODE	1273:12	1273:12	6	tmsize_t
NAME	1273:21	1273:21	4	m1
LEAF_NODE	1273:21	1273:21	5	m1
LEAF_NODE	1273:23	1273:23	3	,
PARAMETER_DECL	1273:25	1273:34	3	tmsize_t m2
TYPE	1273:25	1273:25	4	tmsize_t
TYPE_NAME	1273:25	1273:25	5	tmsize_t
LEAF_NODE	1273:25	1273:25	6	tmsize_t
NAME	1273:34	1273:34	4	m2
LEAF_NODE	1273:34	1273:34	5	m2
LEAF_NODE	1273:36	1273:36	3	)
LEAF_NODE	1274:0	1274:0	2	{
STATEMENTS	1275:8	1275:8	2	
JUMP_STATEMENT	1275:8	1275:53	3	return _TIFFMultiplySSize ( NULL , m1 , m2 , NULL ) ;
KEYWORD	1275:8	1275:8	4	return
LEAF_NODE	1275:8	1275:8	5	return
DESTINATION	1275:15	1275:15	4	_TIFFMultiplySSize ( NULL , m1 , m2 , NULL )
EXPR	1275:15	1275:15	5	_TIFFMultiplySSize ( NULL , m1 , m2 , NULL )
FUNCTION_CALL	1275:15	1275:52	6	_TIFFMultiplySSize ( NULL , m1 , m2 , NULL )
CALLEE	1275:15	1275:15	7	_TIFFMultiplySSize
LEAF_NODE	1275:15	1275:15	8	_TIFFMultiplySSize
LEAF_NODE	1275:33	1275:33	7	(
ARGUMENT	1275:34	1275:34	7	NULL
FIELD	1275:34	1275:34	8	NULL
LEAF_NODE	1275:34	1275:34	9	NULL
LEAF_NODE	1275:38	1275:38	7	,
ARGUMENT	1275:40	1275:40	7	m1
FIELD	1275:40	1275:40	8	m1
LEAF_NODE	1275:40	1275:40	9	m1
LEAF_NODE	1275:42	1275:42	7	,
ARGUMENT	1275:44	1275:44	7	m2
FIELD	1275:44	1275:44	8	m2
LEAF_NODE	1275:44	1275:44	9	m2
LEAF_NODE	1275:46	1275:46	7	,
ARGUMENT	1275:48	1275:48	7	NULL
FIELD	1275:48	1275:48	8	NULL
LEAF_NODE	1275:48	1275:48	9	NULL
LEAF_NODE	1275:52	1275:52	7	)
LEAF_NODE	1275:53	1275:53	4	;
LEAF_NODE	1276:0	1276:0	2	}
FUNCTION_DEF	1278:0	1326:0	1	
RETURN_TYPE	1278:0	1278:7	2	static int
LEAF_NODE	1278:0	1278:0	3	static
TYPE_NAME	1278:7	1278:7	3	int
LEAF_NODE	1278:7	1278:7	4	int
FUNCTION_NAME	1279:0	1279:0	2	LogL16InitState
LEAF_NODE	1279:0	1279:0	3	LogL16InitState
PARAMETER_LIST	1279:15	1279:25	2	( TIFF * tif )
LEAF_NODE	1279:15	1279:15	3	(
PARAMETER_DECL	1279:16	1279:22	3	TIFF * tif
TYPE	1279:16	1279:20	4	TIFF *
TYPE_NAME	1279:16	1279:16	5	TIFF
LEAF_NODE	1279:16	1279:16	6	TIFF
POINTER	1279:20	1279:20	5	*
LEAF_NODE	1279:20	1279:20	6	*
NAME	1279:22	1279:22	4	tif
LEAF_NODE	1279:22	1279:22	5	tif
LEAF_NODE	1279:25	1279:25	3	)
LEAF_NODE	1280:0	1280:0	2	{
STATEMENTS	1281:1	1325:1	2	
LEAF_NODE	1281:1	1281:1	3	static
SIMPLE_DECL	1281:8	1281:47	3	const char [ ] module ; module = "LogL16InitState" ;
VAR_DECL	1281:8	1281:19	4	const char [ ] module ; module = "LogL16InitState"
TYPE	1281:8	1281:25	5	const char [ ]
TYPE_NAME	1281:8	1281:14	6	const char
LEAF_NODE	1281:8	1281:8	7	const
LEAF_NODE	1281:14	1281:14	7	char
TYPE_SUFFIX	1281:25	1281:26	6	[ ]
LEAF_NODE	1281:25	1281:25	7	[
LEAF_NODE	1281:26	1281:26	7	]
NAME	1281:19	1281:19	5	module
LEAF_NODE	1281:19	1281:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1281:19	1281:19	5	module = "LogL16InitState"
ASSIGN	1281:19	1281:30	6	module = "LogL16InitState"
LVAL	1281:19	1281:19	7	module
NAME	1281:19	1281:19	8	module
LEAF_NODE	1281:19	1281:19	9	module
ASSIGN_OP	1281:28	1281:28	7	=
LEAF_NODE	1281:28	1281:28	8	=
RVAL	1281:30	1281:30	7	"LogL16InitState"
FIELD	1281:30	1281:30	8	"LogL16InitState"
LEAF_NODE	1281:30	1281:30	9	"LogL16InitState"
LEAF_NODE	1281:47	1281:47	4	;
SIMPLE_DECL	1282:1	1282:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1282:1	1282:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1282:1	1282:15	5	TIFFDirectory *
TYPE_NAME	1282:1	1282:1	6	TIFFDirectory
LEAF_NODE	1282:1	1282:1	7	TIFFDirectory
POINTER	1282:15	1282:15	6	*
LEAF_NODE	1282:15	1282:15	7	*
NAME	1282:16	1282:16	5	td
LEAF_NODE	1282:16	1282:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1282:16	1282:16	5	td = & tif -> tif_dir
ASSIGN	1282:16	1282:21	6	td = & tif -> tif_dir
LVAL	1282:16	1282:16	7	td
NAME	1282:16	1282:16	8	td
LEAF_NODE	1282:16	1282:16	9	td
ASSIGN_OP	1282:19	1282:19	7	=
LEAF_NODE	1282:19	1282:19	8	=
RVAL	1282:21	1282:21	7	& tif -> tif_dir
UNARY_EXPR	1282:21	1282:22	8	& tif -> tif_dir
UNARY_OPERATOR	1282:21	1282:21	9	&
LEAF_NODE	1282:21	1282:21	10	&
FIELD	1282:22	1282:27	9	tif -> tif_dir
LEAF_NODE	1282:22	1282:22	10	tif
LEAF_NODE	1282:25	1282:25	10	->
LEAF_NODE	1282:27	1282:27	10	tif_dir
LEAF_NODE	1282:34	1282:34	4	;
SIMPLE_DECL	1283:1	1283:36	3	LogLuvState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	1283:1	1283:14	4	LogLuvState * sp ; sp = DecoderState ( tif )
TYPE	1283:1	1283:12	5	LogLuvState *
TYPE_NAME	1283:1	1283:1	6	LogLuvState
LEAF_NODE	1283:1	1283:1	7	LogLuvState
POINTER	1283:12	1283:12	6	*
LEAF_NODE	1283:12	1283:12	7	*
NAME	1283:14	1283:14	5	sp
LEAF_NODE	1283:14	1283:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1283:14	1283:14	5	sp = DecoderState ( tif )
ASSIGN	1283:14	1283:19	6	sp = DecoderState ( tif )
LVAL	1283:14	1283:14	7	sp
NAME	1283:14	1283:14	8	sp
LEAF_NODE	1283:14	1283:14	9	sp
ASSIGN_OP	1283:17	1283:17	7	=
LEAF_NODE	1283:17	1283:17	8	=
RVAL	1283:19	1283:19	7	DecoderState ( tif )
FUNCTION_CALL	1283:19	1283:35	8	DecoderState ( tif )
CALLEE	1283:19	1283:19	9	DecoderState
LEAF_NODE	1283:19	1283:19	10	DecoderState
LEAF_NODE	1283:31	1283:31	9	(
ARGUMENT	1283:32	1283:32	9	tif
FIELD	1283:32	1283:32	10	tif
LEAF_NODE	1283:32	1283:32	11	tif
LEAF_NODE	1283:35	1283:35	9	)
LEAF_NODE	1283:36	1283:36	4	;
EXPR_STATEMENT	1285:1	1285:19	3	assert ( sp != NULL ) ;
EXPR	1285:1	1285:1	4	assert ( sp != NULL )
FUNCTION_CALL	1285:1	1285:18	5	assert ( sp != NULL )
CALLEE	1285:1	1285:1	6	assert
LEAF_NODE	1285:1	1285:1	7	assert
LEAF_NODE	1285:7	1285:7	6	(
ARGUMENT	1285:8	1285:14	6	sp != NULL
FIELD	1285:8	1285:8	7	sp
LEAF_NODE	1285:8	1285:8	8	sp
EQ_OPERATOR	1285:11	1285:11	7	!=
LEAF_NODE	1285:11	1285:11	8	!=
FIELD	1285:14	1285:14	7	NULL
LEAF_NODE	1285:14	1285:14	8	NULL
LEAF_NODE	1285:18	1285:18	6	)
LEAF_NODE	1285:19	1285:19	4	;
EXPR_STATEMENT	1286:1	1286:47	3	assert ( td -> td_photometric == PHOTOMETRIC_LOGL ) ;
EXPR	1286:1	1286:1	4	assert ( td -> td_photometric == PHOTOMETRIC_LOGL )
FUNCTION_CALL	1286:1	1286:46	5	assert ( td -> td_photometric == PHOTOMETRIC_LOGL )
CALLEE	1286:1	1286:1	6	assert
LEAF_NODE	1286:1	1286:1	7	assert
LEAF_NODE	1286:7	1286:7	6	(
ARGUMENT	1286:8	1286:30	6	td -> td_photometric == PHOTOMETRIC_LOGL
FIELD	1286:8	1286:12	7	td -> td_photometric
LEAF_NODE	1286:8	1286:8	8	td
LEAF_NODE	1286:10	1286:10	8	->
LEAF_NODE	1286:12	1286:12	8	td_photometric
EQ_OPERATOR	1286:27	1286:27	7	==
LEAF_NODE	1286:27	1286:27	8	==
FIELD	1286:30	1286:30	7	PHOTOMETRIC_LOGL
LEAF_NODE	1286:30	1286:30	8	PHOTOMETRIC_LOGL
LEAF_NODE	1286:46	1286:46	6	)
LEAF_NODE	1286:47	1286:47	4	;
SELECTION	1288:1	1289:1	3	
KEYWORD	1288:1	1288:1	4	if
LEAF_NODE	1288:1	1288:1	5	if
LEAF_NODE	1288:3	1288:3	4	(
CONDITION	1288:5	1288:5	4	td -> td_samplesperpixel != 1
EXPR	1288:5	1288:31	5	td -> td_samplesperpixel != 1
FIELD	1288:5	1288:9	6	td -> td_samplesperpixel
LEAF_NODE	1288:5	1288:5	7	td
LEAF_NODE	1288:7	1288:7	7	->
LEAF_NODE	1288:9	1288:9	7	td_samplesperpixel
EQ_OPERATOR	1288:28	1288:28	6	!=
LEAF_NODE	1288:28	1288:28	7	!=
FIELD	1288:31	1288:31	6	1
LEAF_NODE	1288:31	1288:31	7	1
LEAF_NODE	1288:33	1288:33	4	)
STATEMENTS	1289:1	1294:1	4	
LEAF_NODE	1289:1	1289:1	5	{
STATEMENTS	1290:2	1293:2	5	
EXPR_STATEMENT	1290:2	1292:48	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Sorry, can not handle LogL image with %s=%d" , "Samples/pixel" , td -> td_samplesperpixel ) ;
EXPR	1290:2	1290:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Sorry, can not handle LogL image with %s=%d" , "Samples/pixel" , td -> td_samplesperpixel )
FUNCTION_CALL	1290:2	1292:47	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Sorry, can not handle LogL image with %s=%d" , "Samples/pixel" , td -> td_samplesperpixel )
CALLEE	1290:2	1290:2	9	TIFFErrorExt
LEAF_NODE	1290:2	1290:2	10	TIFFErrorExt
LEAF_NODE	1290:14	1290:14	9	(
ARGUMENT	1290:15	1290:15	9	tif -> tif_clientdata
FIELD	1290:15	1290:20	10	tif -> tif_clientdata
LEAF_NODE	1290:15	1290:15	11	tif
LEAF_NODE	1290:18	1290:18	11	->
LEAF_NODE	1290:20	1290:20	11	tif_clientdata
LEAF_NODE	1290:34	1290:34	9	,
ARGUMENT	1290:36	1290:36	9	module
FIELD	1290:36	1290:36	10	module
LEAF_NODE	1290:36	1290:36	11	module
LEAF_NODE	1290:42	1290:42	9	,
ARGUMENT	1291:15	1291:15	9	"Sorry, can not handle LogL image with %s=%d"
FIELD	1291:15	1291:15	10	"Sorry, can not handle LogL image with %s=%d"
LEAF_NODE	1291:15	1291:15	11	"Sorry, can not handle LogL image with %s=%d"
LEAF_NODE	1291:60	1291:60	9	,
ARGUMENT	1292:8	1292:8	9	"Samples/pixel"
FIELD	1292:8	1292:8	10	"Samples/pixel"
LEAF_NODE	1292:8	1292:8	11	"Samples/pixel"
LEAF_NODE	1292:23	1292:23	9	,
ARGUMENT	1292:25	1292:25	9	td -> td_samplesperpixel
FIELD	1292:25	1292:29	10	td -> td_samplesperpixel
LEAF_NODE	1292:25	1292:25	11	td
LEAF_NODE	1292:27	1292:27	11	->
LEAF_NODE	1292:29	1292:29	11	td_samplesperpixel
LEAF_NODE	1292:47	1292:47	9	)
LEAF_NODE	1292:48	1292:48	7	;
JUMP_STATEMENT	1293:2	1293:10	6	return 0 ;
KEYWORD	1293:2	1293:2	7	return
LEAF_NODE	1293:2	1293:2	8	return
DESTINATION	1293:9	1293:9	7	0
EXPR	1293:9	1293:9	8	0
FIELD	1293:9	1293:9	9	0
LEAF_NODE	1293:9	1293:9	10	0
LEAF_NODE	1293:10	1293:10	7	;
LEAF_NODE	1294:1	1294:1	5	}
SELECTION	1297:1	1298:2	3	
KEYWORD	1297:1	1297:1	4	if
LEAF_NODE	1297:1	1297:1	5	if
LEAF_NODE	1297:4	1297:4	4	(
CONDITION	1297:5	1297:5	4	sp -> user_datafmt == SGILOGDATAFMT_UNKNOWN
EXPR	1297:5	1297:25	5	sp -> user_datafmt == SGILOGDATAFMT_UNKNOWN
FIELD	1297:5	1297:9	6	sp -> user_datafmt
LEAF_NODE	1297:5	1297:5	7	sp
LEAF_NODE	1297:7	1297:7	7	->
LEAF_NODE	1297:9	1297:9	7	user_datafmt
EQ_OPERATOR	1297:22	1297:22	6	==
LEAF_NODE	1297:22	1297:22	7	==
FIELD	1297:25	1297:25	6	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1297:25	1297:25	7	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1297:46	1297:46	4	)
STATEMENTS	1298:2	1298:2	4	
EXPR_STATEMENT	1298:2	1298:43	5	sp -> user_datafmt = LogL16GuessDataFmt ( td ) ;
EXPR	1298:2	1298:2	6	sp -> user_datafmt = LogL16GuessDataFmt ( td )
ASSIGN	1298:2	1298:21	7	sp -> user_datafmt = LogL16GuessDataFmt ( td )
LVAL	1298:2	1298:2	8	sp -> user_datafmt
FIELD	1298:2	1298:6	9	sp -> user_datafmt
LEAF_NODE	1298:2	1298:2	10	sp
LEAF_NODE	1298:4	1298:4	10	->
LEAF_NODE	1298:6	1298:6	10	user_datafmt
ASSIGN_OP	1298:19	1298:19	8	=
LEAF_NODE	1298:19	1298:19	9	=
RVAL	1298:21	1298:21	8	LogL16GuessDataFmt ( td )
FUNCTION_CALL	1298:21	1298:42	9	LogL16GuessDataFmt ( td )
CALLEE	1298:21	1298:21	10	LogL16GuessDataFmt
LEAF_NODE	1298:21	1298:21	11	LogL16GuessDataFmt
LEAF_NODE	1298:39	1298:39	10	(
ARGUMENT	1298:40	1298:40	10	td
FIELD	1298:40	1298:40	11	td
LEAF_NODE	1298:40	1298:40	12	td
LEAF_NODE	1298:42	1298:42	10	)
LEAF_NODE	1298:43	1298:43	6	;
SELECTION	1299:1	1299:27	3	
KEYWORD	1299:1	1299:1	4	switch
LEAF_NODE	1299:1	1299:1	5	switch
LEAF_NODE	1299:8	1299:8	4	(
CONDITION	1299:9	1299:9	4	sp -> user_datafmt
EXPR	1299:9	1299:9	5	sp -> user_datafmt
FIELD	1299:9	1299:13	6	sp -> user_datafmt
LEAF_NODE	1299:9	1299:9	7	sp
LEAF_NODE	1299:11	1299:11	7	->
LEAF_NODE	1299:13	1299:13	7	user_datafmt
LEAF_NODE	1299:25	1299:25	4	)
STATEMENTS	1299:27	1313:1	4	
LEAF_NODE	1299:27	1299:27	5	{
STATEMENTS	1300:1	1312:2	5	
LABEL	1300:1	1300:25	6	case SGILOGDATAFMT_FLOAT :
LEAF_NODE	1300:1	1300:1	7	case
LEAF_NODE	1300:6	1300:6	7	SGILOGDATAFMT_FLOAT
LEAF_NODE	1300:25	1300:25	7	:
EXPR_STATEMENT	1301:2	1301:33	6	sp -> pixel_size = sizeof ( float ) ;
EXPR	1301:2	1301:2	7	sp -> pixel_size = sizeof ( float )
ASSIGN	1301:2	1301:19	8	sp -> pixel_size = sizeof ( float )
LVAL	1301:2	1301:2	9	sp -> pixel_size
FIELD	1301:2	1301:6	10	sp -> pixel_size
LEAF_NODE	1301:2	1301:2	11	sp
LEAF_NODE	1301:4	1301:4	11	->
LEAF_NODE	1301:6	1301:6	11	pixel_size
ASSIGN_OP	1301:17	1301:17	9	=
LEAF_NODE	1301:17	1301:17	10	=
RVAL	1301:19	1301:19	9	sizeof ( float )
FUNCTION_CALL	1301:19	1301:32	10	sizeof ( float )
CALLEE	1301:19	1301:19	11	sizeof
LEAF_NODE	1301:19	1301:19	12	sizeof
LEAF_NODE	1301:26	1301:26	11	(
ARGUMENT	1301:27	1301:27	11	float
FIELD	1301:27	1301:27	12	float
LEAF_NODE	1301:27	1301:27	13	float
LEAF_NODE	1301:32	1301:32	11	)
LEAF_NODE	1301:33	1301:33	7	;
JUMP_STATEMENT	1302:2	1302:7	6	break DESTINATION ;
KEYWORD	1302:2	1302:2	7	break
LEAF_NODE	1302:2	1302:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1302:7	1302:7	7	;
LABEL	1303:1	1303:25	6	case SGILOGDATAFMT_16BIT :
LEAF_NODE	1303:1	1303:1	7	case
LEAF_NODE	1303:6	1303:6	7	SGILOGDATAFMT_16BIT
LEAF_NODE	1303:25	1303:25	7	:
EXPR_STATEMENT	1304:2	1304:33	6	sp -> pixel_size = sizeof ( int16 ) ;
EXPR	1304:2	1304:2	7	sp -> pixel_size = sizeof ( int16 )
ASSIGN	1304:2	1304:19	8	sp -> pixel_size = sizeof ( int16 )
LVAL	1304:2	1304:2	9	sp -> pixel_size
FIELD	1304:2	1304:6	10	sp -> pixel_size
LEAF_NODE	1304:2	1304:2	11	sp
LEAF_NODE	1304:4	1304:4	11	->
LEAF_NODE	1304:6	1304:6	11	pixel_size
ASSIGN_OP	1304:17	1304:17	9	=
LEAF_NODE	1304:17	1304:17	10	=
RVAL	1304:19	1304:19	9	sizeof ( int16 )
FUNCTION_CALL	1304:19	1304:32	10	sizeof ( int16 )
CALLEE	1304:19	1304:19	11	sizeof
LEAF_NODE	1304:19	1304:19	12	sizeof
LEAF_NODE	1304:26	1304:26	11	(
ARGUMENT	1304:27	1304:27	11	int16
FIELD	1304:27	1304:27	12	int16
LEAF_NODE	1304:27	1304:27	13	int16
LEAF_NODE	1304:32	1304:32	11	)
LEAF_NODE	1304:33	1304:33	7	;
JUMP_STATEMENT	1305:2	1305:7	6	break DESTINATION ;
KEYWORD	1305:2	1305:2	7	break
LEAF_NODE	1305:2	1305:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1305:7	1305:7	7	;
LABEL	1306:1	1306:24	6	case SGILOGDATAFMT_8BIT :
LEAF_NODE	1306:1	1306:1	7	case
LEAF_NODE	1306:6	1306:6	7	SGILOGDATAFMT_8BIT
LEAF_NODE	1306:24	1306:24	7	:
EXPR_STATEMENT	1307:2	1307:33	6	sp -> pixel_size = sizeof ( uint8 ) ;
EXPR	1307:2	1307:2	7	sp -> pixel_size = sizeof ( uint8 )
ASSIGN	1307:2	1307:19	8	sp -> pixel_size = sizeof ( uint8 )
LVAL	1307:2	1307:2	9	sp -> pixel_size
FIELD	1307:2	1307:6	10	sp -> pixel_size
LEAF_NODE	1307:2	1307:2	11	sp
LEAF_NODE	1307:4	1307:4	11	->
LEAF_NODE	1307:6	1307:6	11	pixel_size
ASSIGN_OP	1307:17	1307:17	9	=
LEAF_NODE	1307:17	1307:17	10	=
RVAL	1307:19	1307:19	9	sizeof ( uint8 )
FUNCTION_CALL	1307:19	1307:32	10	sizeof ( uint8 )
CALLEE	1307:19	1307:19	11	sizeof
LEAF_NODE	1307:19	1307:19	12	sizeof
LEAF_NODE	1307:26	1307:26	11	(
ARGUMENT	1307:27	1307:27	11	uint8
FIELD	1307:27	1307:27	12	uint8
LEAF_NODE	1307:27	1307:27	13	uint8
LEAF_NODE	1307:32	1307:32	11	)
LEAF_NODE	1307:33	1307:33	7	;
JUMP_STATEMENT	1308:2	1308:7	6	break DESTINATION ;
KEYWORD	1308:2	1308:2	7	break
LEAF_NODE	1308:2	1308:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1308:7	1308:7	7	;
LABEL	1309:1	1309:8	6	default :
LEAF_NODE	1309:1	1309:1	7	default
LEAF_NODE	1309:8	1309:8	7	:
EXPR_STATEMENT	1310:2	1311:59	6	TIFFErrorExt ( tif -> tif_clientdata , module , "No support for converting user data format to LogL" ) ;
EXPR	1310:2	1310:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "No support for converting user data format to LogL" )
FUNCTION_CALL	1310:2	1311:58	8	TIFFErrorExt ( tif -> tif_clientdata , module , "No support for converting user data format to LogL" )
CALLEE	1310:2	1310:2	9	TIFFErrorExt
LEAF_NODE	1310:2	1310:2	10	TIFFErrorExt
LEAF_NODE	1310:14	1310:14	9	(
ARGUMENT	1310:15	1310:15	9	tif -> tif_clientdata
FIELD	1310:15	1310:20	10	tif -> tif_clientdata
LEAF_NODE	1310:15	1310:15	11	tif
LEAF_NODE	1310:18	1310:18	11	->
LEAF_NODE	1310:20	1310:20	11	tif_clientdata
LEAF_NODE	1310:34	1310:34	9	,
ARGUMENT	1310:36	1310:36	9	module
FIELD	1310:36	1310:36	10	module
LEAF_NODE	1310:36	1310:36	11	module
LEAF_NODE	1310:42	1310:42	9	,
ARGUMENT	1311:6	1311:6	9	"No support for converting user data format to LogL"
FIELD	1311:6	1311:6	10	"No support for converting user data format to LogL"
LEAF_NODE	1311:6	1311:6	11	"No support for converting user data format to LogL"
LEAF_NODE	1311:58	1311:58	9	)
LEAF_NODE	1311:59	1311:59	7	;
JUMP_STATEMENT	1312:2	1312:12	6	return ( 0 ) ;
KEYWORD	1312:2	1312:2	7	return
LEAF_NODE	1312:2	1312:2	8	return
DESTINATION	1312:9	1312:9	7	( 0 )
EXPR	1312:9	1312:11	8	( 0 )
LEAF_NODE	1312:9	1312:9	9	(
FIELD	1312:10	1312:10	9	0
LEAF_NODE	1312:10	1312:10	10	0
LEAF_NODE	1312:11	1312:11	9	)
LEAF_NODE	1312:12	1312:12	7	;
LEAF_NODE	1313:1	1313:1	5	}
SELECTION	1314:8	1315:12	3	
KEYWORD	1314:8	1314:8	4	if
LEAF_NODE	1314:8	1314:8	5	if
LEAF_NODE	1314:10	1314:10	4	(
CONDITION	1314:12	1314:12	4	isTiled ( tif )
EXPR	1314:12	1314:12	5	isTiled ( tif )
FUNCTION_CALL	1314:12	1314:23	6	isTiled ( tif )
CALLEE	1314:12	1314:12	7	isTiled
LEAF_NODE	1314:12	1314:12	8	isTiled
LEAF_NODE	1314:19	1314:19	7	(
ARGUMENT	1314:20	1314:20	7	tif
FIELD	1314:20	1314:20	8	tif
LEAF_NODE	1314:20	1314:20	9	tif
LEAF_NODE	1314:23	1314:23	7	)
LEAF_NODE	1314:25	1314:25	4	)
STATEMENTS	1315:12	1315:12	4	
EXPR_STATEMENT	1315:12	1315:74	5	sp -> tbuflen = multiply_ms ( td -> td_tilewidth , td -> td_tilelength ) ;
EXPR	1315:12	1315:12	6	sp -> tbuflen = multiply_ms ( td -> td_tilewidth , td -> td_tilelength )
ASSIGN	1315:12	1315:26	7	sp -> tbuflen = multiply_ms ( td -> td_tilewidth , td -> td_tilelength )
LVAL	1315:12	1315:12	8	sp -> tbuflen
FIELD	1315:12	1315:16	9	sp -> tbuflen
LEAF_NODE	1315:12	1315:12	10	sp
LEAF_NODE	1315:14	1315:14	10	->
LEAF_NODE	1315:16	1315:16	10	tbuflen
ASSIGN_OP	1315:24	1315:24	8	=
LEAF_NODE	1315:24	1315:24	9	=
RVAL	1315:26	1315:26	8	multiply_ms ( td -> td_tilewidth , td -> td_tilelength )
FUNCTION_CALL	1315:26	1315:73	9	multiply_ms ( td -> td_tilewidth , td -> td_tilelength )
CALLEE	1315:26	1315:26	10	multiply_ms
LEAF_NODE	1315:26	1315:26	11	multiply_ms
LEAF_NODE	1315:37	1315:37	10	(
ARGUMENT	1315:38	1315:38	10	td -> td_tilewidth
FIELD	1315:38	1315:42	11	td -> td_tilewidth
LEAF_NODE	1315:38	1315:38	12	td
LEAF_NODE	1315:40	1315:40	12	->
LEAF_NODE	1315:42	1315:42	12	td_tilewidth
LEAF_NODE	1315:54	1315:54	10	,
ARGUMENT	1315:56	1315:56	10	td -> td_tilelength
FIELD	1315:56	1315:60	11	td -> td_tilelength
LEAF_NODE	1315:56	1315:56	12	td
LEAF_NODE	1315:58	1315:58	12	->
LEAF_NODE	1315:60	1315:60	12	td_tilelength
LEAF_NODE	1315:73	1315:73	10	)
LEAF_NODE	1315:74	1315:74	6	;
SELECTION	1316:8	1316:13	3	
KEYWORD	1316:8	1316:8	4	else
LEAF_NODE	1316:8	1316:8	5	else
STATEMENTS	1316:13	1316:13	4	
SELECTION	1316:13	1317:12	5	
KEYWORD	1316:13	1316:13	6	if
LEAF_NODE	1316:13	1316:13	7	if
LEAF_NODE	1316:15	1316:15	6	(
CONDITION	1316:17	1316:17	6	td -> td_rowsperstrip < td -> td_imagelength
EXPR	1316:17	1316:39	7	td -> td_rowsperstrip < td -> td_imagelength
FIELD	1316:17	1316:21	8	td -> td_rowsperstrip
LEAF_NODE	1316:17	1316:17	9	td
LEAF_NODE	1316:19	1316:19	9	->
LEAF_NODE	1316:21	1316:21	9	td_rowsperstrip
REL_OPERATOR	1316:37	1316:37	8	<
LEAF_NODE	1316:37	1316:37	9	<
FIELD	1316:39	1316:43	8	td -> td_imagelength
LEAF_NODE	1316:39	1316:39	9	td
LEAF_NODE	1316:41	1316:41	9	->
LEAF_NODE	1316:43	1316:43	9	td_imagelength
LEAF_NODE	1316:58	1316:58	6	)
STATEMENTS	1317:12	1317:12	6	
EXPR_STATEMENT	1317:12	1317:77	7	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_rowsperstrip ) ;
EXPR	1317:12	1317:12	8	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_rowsperstrip )
ASSIGN	1317:12	1317:26	9	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_rowsperstrip )
LVAL	1317:12	1317:12	10	sp -> tbuflen
FIELD	1317:12	1317:16	11	sp -> tbuflen
LEAF_NODE	1317:12	1317:12	12	sp
LEAF_NODE	1317:14	1317:14	12	->
LEAF_NODE	1317:16	1317:16	12	tbuflen
ASSIGN_OP	1317:24	1317:24	10	=
LEAF_NODE	1317:24	1317:24	11	=
RVAL	1317:26	1317:26	10	multiply_ms ( td -> td_imagewidth , td -> td_rowsperstrip )
FUNCTION_CALL	1317:26	1317:76	11	multiply_ms ( td -> td_imagewidth , td -> td_rowsperstrip )
CALLEE	1317:26	1317:26	12	multiply_ms
LEAF_NODE	1317:26	1317:26	13	multiply_ms
LEAF_NODE	1317:37	1317:37	12	(
ARGUMENT	1317:38	1317:38	12	td -> td_imagewidth
FIELD	1317:38	1317:42	13	td -> td_imagewidth
LEAF_NODE	1317:38	1317:38	14	td
LEAF_NODE	1317:40	1317:40	14	->
LEAF_NODE	1317:42	1317:42	14	td_imagewidth
LEAF_NODE	1317:55	1317:55	12	,
ARGUMENT	1317:57	1317:57	12	td -> td_rowsperstrip
FIELD	1317:57	1317:61	13	td -> td_rowsperstrip
LEAF_NODE	1317:57	1317:57	14	td
LEAF_NODE	1317:59	1317:59	14	->
LEAF_NODE	1317:61	1317:61	14	td_rowsperstrip
LEAF_NODE	1317:76	1317:76	12	)
LEAF_NODE	1317:77	1317:77	8	;
SELECTION	1318:8	1319:12	3	
KEYWORD	1318:8	1318:8	4	else
LEAF_NODE	1318:8	1318:8	5	else
STATEMENTS	1319:12	1319:12	4	
EXPR_STATEMENT	1319:12	1319:76	5	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_imagelength ) ;
EXPR	1319:12	1319:12	6	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_imagelength )
ASSIGN	1319:12	1319:26	7	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_imagelength )
LVAL	1319:12	1319:12	8	sp -> tbuflen
FIELD	1319:12	1319:16	9	sp -> tbuflen
LEAF_NODE	1319:12	1319:12	10	sp
LEAF_NODE	1319:14	1319:14	10	->
LEAF_NODE	1319:16	1319:16	10	tbuflen
ASSIGN_OP	1319:24	1319:24	8	=
LEAF_NODE	1319:24	1319:24	9	=
RVAL	1319:26	1319:26	8	multiply_ms ( td -> td_imagewidth , td -> td_imagelength )
FUNCTION_CALL	1319:26	1319:75	9	multiply_ms ( td -> td_imagewidth , td -> td_imagelength )
CALLEE	1319:26	1319:26	10	multiply_ms
LEAF_NODE	1319:26	1319:26	11	multiply_ms
LEAF_NODE	1319:37	1319:37	10	(
ARGUMENT	1319:38	1319:38	10	td -> td_imagewidth
FIELD	1319:38	1319:42	11	td -> td_imagewidth
LEAF_NODE	1319:38	1319:38	12	td
LEAF_NODE	1319:40	1319:40	12	->
LEAF_NODE	1319:42	1319:42	12	td_imagewidth
LEAF_NODE	1319:55	1319:55	10	,
ARGUMENT	1319:57	1319:57	10	td -> td_imagelength
FIELD	1319:57	1319:61	11	td -> td_imagelength
LEAF_NODE	1319:57	1319:57	12	td
LEAF_NODE	1319:59	1319:59	12	->
LEAF_NODE	1319:61	1319:61	12	td_imagelength
LEAF_NODE	1319:75	1319:75	10	)
LEAF_NODE	1319:76	1319:76	6	;
SELECTION	1320:1	1321:78	3	
KEYWORD	1320:1	1320:1	4	if
LEAF_NODE	1320:1	1320:1	5	if
LEAF_NODE	1320:4	1320:4	4	(
CONDITION	1320:5	1320:5	4	multiply_ms ( sp -> tbuflen , sizeof ( int16 ) ) == 0 || ( sp -> tbuf = ( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( int16 ) ) ) == NULL
EXPR	1320:5	1320:5	5	multiply_ms ( sp -> tbuflen , sizeof ( int16 ) ) == 0 || ( sp -> tbuf = ( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( int16 ) ) ) == NULL
OR	1320:5	1321:5	6	multiply_ms ( sp -> tbuflen , sizeof ( int16 ) ) == 0 || ( sp -> tbuf = ( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( int16 ) ) ) == NULL
EXPR	1320:5	1320:49	7	multiply_ms ( sp -> tbuflen , sizeof ( int16 ) ) == 0
FUNCTION_CALL	1320:5	1320:44	8	multiply_ms ( sp -> tbuflen , sizeof ( int16 ) )
CALLEE	1320:5	1320:5	9	multiply_ms
LEAF_NODE	1320:5	1320:5	10	multiply_ms
LEAF_NODE	1320:16	1320:16	9	(
ARGUMENT	1320:17	1320:17	9	sp -> tbuflen
FIELD	1320:17	1320:21	10	sp -> tbuflen
LEAF_NODE	1320:17	1320:17	11	sp
LEAF_NODE	1320:19	1320:19	11	->
LEAF_NODE	1320:21	1320:21	11	tbuflen
LEAF_NODE	1320:28	1320:28	9	,
ARGUMENT	1320:30	1320:30	9	sizeof ( int16 )
FUNCTION_CALL	1320:30	1320:43	10	sizeof ( int16 )
CALLEE	1320:30	1320:30	11	sizeof
LEAF_NODE	1320:30	1320:30	12	sizeof
LEAF_NODE	1320:37	1320:37	11	(
ARGUMENT	1320:38	1320:38	11	int16
FIELD	1320:38	1320:38	12	int16
LEAF_NODE	1320:38	1320:38	13	int16
LEAF_NODE	1320:43	1320:43	11	)
LEAF_NODE	1320:44	1320:44	9	)
EQ_OPERATOR	1320:46	1320:46	8	==
LEAF_NODE	1320:46	1320:46	9	==
FIELD	1320:49	1320:49	8	0
LEAF_NODE	1320:49	1320:49	9	0
LEAF_NODE	1320:51	1320:51	7	||
EXPR	1321:5	1321:72	7	( sp -> tbuf = ( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( int16 ) ) ) == NULL
LEAF_NODE	1321:5	1321:5	8	(
ASSIGN	1321:6	1321:17	8	sp -> tbuf = ( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( int16 ) )
LVAL	1321:6	1321:6	9	sp -> tbuf
FIELD	1321:6	1321:10	10	sp -> tbuf
LEAF_NODE	1321:6	1321:6	11	sp
LEAF_NODE	1321:8	1321:8	11	->
LEAF_NODE	1321:10	1321:10	11	tbuf
ASSIGN_OP	1321:15	1321:15	9	=
LEAF_NODE	1321:15	1321:15	10	=
RVAL	1321:17	1321:26	9	( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( int16 ) )
LEAF_NODE	1321:17	1321:17	10	(
TYPE_NAME	1321:18	1321:18	10	uint8
LEAF_NODE	1321:18	1321:18	11	uint8
LEAF_NODE	1321:23	1321:23	10	*
LEAF_NODE	1321:24	1321:24	10	)
FUNCTION_CALL	1321:26	1321:66	10	_TIFFmalloc ( sp -> tbuflen * sizeof ( int16 ) )
CALLEE	1321:26	1321:26	11	_TIFFmalloc
LEAF_NODE	1321:26	1321:26	12	_TIFFmalloc
LEAF_NODE	1321:37	1321:37	11	(
ARGUMENT	1321:38	1321:52	11	sp -> tbuflen * sizeof ( int16 )
FIELD	1321:38	1321:42	12	sp -> tbuflen
LEAF_NODE	1321:38	1321:38	13	sp
LEAF_NODE	1321:40	1321:40	13	->
LEAF_NODE	1321:42	1321:42	13	tbuflen
LEAF_NODE	1321:50	1321:50	12	*
FUNCTION_CALL	1321:52	1321:65	12	sizeof ( int16 )
CALLEE	1321:52	1321:52	13	sizeof
LEAF_NODE	1321:52	1321:52	14	sizeof
LEAF_NODE	1321:59	1321:59	13	(
ARGUMENT	1321:60	1321:60	13	int16
FIELD	1321:60	1321:60	14	int16
LEAF_NODE	1321:60	1321:60	15	int16
LEAF_NODE	1321:65	1321:65	13	)
LEAF_NODE	1321:66	1321:66	11	)
LEAF_NODE	1321:67	1321:67	8	)
EQ_OPERATOR	1321:69	1321:69	8	==
LEAF_NODE	1321:69	1321:69	9	==
FIELD	1321:72	1321:72	8	NULL
LEAF_NODE	1321:72	1321:72	9	NULL
LEAF_NODE	1321:76	1321:76	4	)
STATEMENTS	1321:78	1324:1	4	
LEAF_NODE	1321:78	1321:78	5	{
STATEMENTS	1322:2	1323:2	5	
EXPR_STATEMENT	1322:2	1322:85	6	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for SGILog translation buffer" ) ;
EXPR	1322:2	1322:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for SGILog translation buffer" )
FUNCTION_CALL	1322:2	1322:84	8	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for SGILog translation buffer" )
CALLEE	1322:2	1322:2	9	TIFFErrorExt
LEAF_NODE	1322:2	1322:2	10	TIFFErrorExt
LEAF_NODE	1322:14	1322:14	9	(
ARGUMENT	1322:15	1322:15	9	tif -> tif_clientdata
FIELD	1322:15	1322:20	10	tif -> tif_clientdata
LEAF_NODE	1322:15	1322:15	11	tif
LEAF_NODE	1322:18	1322:18	11	->
LEAF_NODE	1322:20	1322:20	11	tif_clientdata
LEAF_NODE	1322:34	1322:34	9	,
ARGUMENT	1322:36	1322:36	9	module
FIELD	1322:36	1322:36	10	module
LEAF_NODE	1322:36	1322:36	11	module
LEAF_NODE	1322:42	1322:42	9	,
ARGUMENT	1322:44	1322:44	9	"No space for SGILog translation buffer"
FIELD	1322:44	1322:44	10	"No space for SGILog translation buffer"
LEAF_NODE	1322:44	1322:44	11	"No space for SGILog translation buffer"
LEAF_NODE	1322:84	1322:84	9	)
LEAF_NODE	1322:85	1322:85	7	;
JUMP_STATEMENT	1323:2	1323:12	6	return ( 0 ) ;
KEYWORD	1323:2	1323:2	7	return
LEAF_NODE	1323:2	1323:2	8	return
DESTINATION	1323:9	1323:9	7	( 0 )
EXPR	1323:9	1323:11	8	( 0 )
LEAF_NODE	1323:9	1323:9	9	(
FIELD	1323:10	1323:10	9	0
LEAF_NODE	1323:10	1323:10	10	0
LEAF_NODE	1323:11	1323:11	9	)
LEAF_NODE	1323:12	1323:12	7	;
LEAF_NODE	1324:1	1324:1	5	}
JUMP_STATEMENT	1325:1	1325:11	3	return ( 1 ) ;
KEYWORD	1325:1	1325:1	4	return
LEAF_NODE	1325:1	1325:1	5	return
DESTINATION	1325:8	1325:8	4	( 1 )
EXPR	1325:8	1325:10	5	( 1 )
LEAF_NODE	1325:8	1325:8	6	(
FIELD	1325:9	1325:9	6	1
LEAF_NODE	1325:9	1325:9	7	1
LEAF_NODE	1325:10	1325:10	6	)
LEAF_NODE	1325:11	1325:11	4	;
LEAF_NODE	1326:0	1326:0	2	}
FUNCTION_DEF	1328:0	1378:0	1	
RETURN_TYPE	1328:0	1328:7	2	static int
LEAF_NODE	1328:0	1328:0	3	static
TYPE_NAME	1328:7	1328:7	3	int
LEAF_NODE	1328:7	1328:7	4	int
FUNCTION_NAME	1329:0	1329:0	2	LogLuvGuessDataFmt
LEAF_NODE	1329:0	1329:0	3	LogLuvGuessDataFmt
PARAMETER_LIST	1329:18	1329:36	2	( TIFFDirectory * td )
LEAF_NODE	1329:18	1329:18	3	(
PARAMETER_DECL	1329:19	1329:34	3	TIFFDirectory * td
TYPE	1329:19	1329:33	4	TIFFDirectory *
TYPE_NAME	1329:19	1329:19	5	TIFFDirectory
LEAF_NODE	1329:19	1329:19	6	TIFFDirectory
POINTER	1329:33	1329:33	5	*
LEAF_NODE	1329:33	1329:33	6	*
NAME	1329:34	1329:34	4	td
LEAF_NODE	1329:34	1329:34	5	td
LEAF_NODE	1329:36	1329:36	3	)
LEAF_NODE	1330:0	1330:0	2	{
STATEMENTS	1331:1	1377:15	2	
SIMPLE_DECL	1331:1	1331:10	3	int guess ;
VAR_DECL	1331:1	1331:5	4	int guess
TYPE	1331:1	1331:1	5	int
TYPE_NAME	1331:1	1331:1	6	int
LEAF_NODE	1331:1	1331:1	7	int
NAME	1331:5	1331:5	5	guess
LEAF_NODE	1331:5	1331:5	6	guess
LEAF_NODE	1331:10	1331:10	4	;
SELECTION	1338:1	1338:58	3	
KEYWORD	1338:1	1338:1	4	switch
LEAF_NODE	1338:1	1338:1	5	switch
LEAF_NODE	1338:8	1338:8	4	(
CONDITION	1338:9	1338:9	4	PACK ( td -> td_bitspersample , td -> td_sampleformat )
EXPR	1338:9	1338:9	5	PACK ( td -> td_bitspersample , td -> td_sampleformat )
FUNCTION_CALL	1338:9	1338:55	6	PACK ( td -> td_bitspersample , td -> td_sampleformat )
CALLEE	1338:9	1338:9	7	PACK
LEAF_NODE	1338:9	1338:9	8	PACK
LEAF_NODE	1338:13	1338:13	7	(
ARGUMENT	1338:14	1338:14	7	td -> td_bitspersample
FIELD	1338:14	1338:18	8	td -> td_bitspersample
LEAF_NODE	1338:14	1338:14	9	td
LEAF_NODE	1338:16	1338:16	9	->
LEAF_NODE	1338:18	1338:18	9	td_bitspersample
LEAF_NODE	1338:34	1338:34	7	,
ARGUMENT	1338:36	1338:36	7	td -> td_sampleformat
FIELD	1338:36	1338:40	8	td -> td_sampleformat
LEAF_NODE	1338:36	1338:36	9	td
LEAF_NODE	1338:38	1338:38	9	->
LEAF_NODE	1338:40	1338:40	9	td_sampleformat
LEAF_NODE	1338:55	1338:55	7	)
LEAF_NODE	1338:56	1338:56	4	)
STATEMENTS	1338:58	1360:1	4	
LEAF_NODE	1338:58	1338:58	5	{
STATEMENTS	1339:1	1358:2	5	
LEAF_NODE	1339:1	1339:1	6	case
LEAF_NODE	1339:6	1339:6	6	PACK
LEAF_NODE	1339:10	1339:10	6	(
LEAF_NODE	1339:11	1339:11	6	32
LEAF_NODE	1339:13	1339:13	6	,
LEAF_NODE	1339:15	1339:15	6	SAMPLEFORMAT_IEEEFP
LEAF_NODE	1339:34	1339:34	6	)
LEAF_NODE	1339:35	1339:35	6	:
EXPR_STATEMENT	1340:2	1340:29	6	guess = SGILOGDATAFMT_FLOAT ;
EXPR	1340:2	1340:2	7	guess = SGILOGDATAFMT_FLOAT
ASSIGN	1340:2	1340:10	8	guess = SGILOGDATAFMT_FLOAT
LVAL	1340:2	1340:2	9	guess
FIELD	1340:2	1340:2	10	guess
LEAF_NODE	1340:2	1340:2	11	guess
ASSIGN_OP	1340:8	1340:8	9	=
LEAF_NODE	1340:8	1340:8	10	=
RVAL	1340:10	1340:10	9	SGILOGDATAFMT_FLOAT
FIELD	1340:10	1340:10	10	SGILOGDATAFMT_FLOAT
LEAF_NODE	1340:10	1340:10	11	SGILOGDATAFMT_FLOAT
LEAF_NODE	1340:29	1340:29	7	;
JUMP_STATEMENT	1341:2	1341:7	6	break DESTINATION ;
KEYWORD	1341:2	1341:2	7	break
LEAF_NODE	1341:2	1341:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1341:7	1341:7	7	;
LEAF_NODE	1342:1	1342:1	6	case
LEAF_NODE	1342:6	1342:6	6	PACK
LEAF_NODE	1342:10	1342:10	6	(
LEAF_NODE	1342:11	1342:11	6	32
LEAF_NODE	1342:13	1342:13	6	,
LEAF_NODE	1342:15	1342:15	6	SAMPLEFORMAT_VOID
LEAF_NODE	1342:32	1342:32	6	)
LEAF_NODE	1342:33	1342:33	6	:
LEAF_NODE	1343:1	1343:1	6	case
LEAF_NODE	1343:6	1343:6	6	PACK
LEAF_NODE	1343:10	1343:10	6	(
LEAF_NODE	1343:11	1343:11	6	32
LEAF_NODE	1343:13	1343:13	6	,
LEAF_NODE	1343:15	1343:15	6	SAMPLEFORMAT_UINT
LEAF_NODE	1343:32	1343:32	6	)
LEAF_NODE	1343:33	1343:33	6	:
LEAF_NODE	1344:1	1344:1	6	case
LEAF_NODE	1344:6	1344:6	6	PACK
LEAF_NODE	1344:10	1344:10	6	(
LEAF_NODE	1344:11	1344:11	6	32
LEAF_NODE	1344:13	1344:13	6	,
LEAF_NODE	1344:15	1344:15	6	SAMPLEFORMAT_INT
LEAF_NODE	1344:31	1344:31	6	)
LEAF_NODE	1344:32	1344:32	6	:
EXPR_STATEMENT	1345:2	1345:27	6	guess = SGILOGDATAFMT_RAW ;
EXPR	1345:2	1345:2	7	guess = SGILOGDATAFMT_RAW
ASSIGN	1345:2	1345:10	8	guess = SGILOGDATAFMT_RAW
LVAL	1345:2	1345:2	9	guess
FIELD	1345:2	1345:2	10	guess
LEAF_NODE	1345:2	1345:2	11	guess
ASSIGN_OP	1345:8	1345:8	9	=
LEAF_NODE	1345:8	1345:8	10	=
RVAL	1345:10	1345:10	9	SGILOGDATAFMT_RAW
FIELD	1345:10	1345:10	10	SGILOGDATAFMT_RAW
LEAF_NODE	1345:10	1345:10	11	SGILOGDATAFMT_RAW
LEAF_NODE	1345:27	1345:27	7	;
JUMP_STATEMENT	1346:2	1346:7	6	break DESTINATION ;
KEYWORD	1346:2	1346:2	7	break
LEAF_NODE	1346:2	1346:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1346:7	1346:7	7	;
LEAF_NODE	1347:1	1347:1	6	case
LEAF_NODE	1347:6	1347:6	6	PACK
LEAF_NODE	1347:10	1347:10	6	(
LEAF_NODE	1347:11	1347:11	6	16
LEAF_NODE	1347:13	1347:13	6	,
LEAF_NODE	1347:15	1347:15	6	SAMPLEFORMAT_VOID
LEAF_NODE	1347:32	1347:32	6	)
LEAF_NODE	1347:33	1347:33	6	:
LEAF_NODE	1348:1	1348:1	6	case
LEAF_NODE	1348:6	1348:6	6	PACK
LEAF_NODE	1348:10	1348:10	6	(
LEAF_NODE	1348:11	1348:11	6	16
LEAF_NODE	1348:13	1348:13	6	,
LEAF_NODE	1348:15	1348:15	6	SAMPLEFORMAT_INT
LEAF_NODE	1348:31	1348:31	6	)
LEAF_NODE	1348:32	1348:32	6	:
LEAF_NODE	1349:1	1349:1	6	case
LEAF_NODE	1349:6	1349:6	6	PACK
LEAF_NODE	1349:10	1349:10	6	(
LEAF_NODE	1349:11	1349:11	6	16
LEAF_NODE	1349:13	1349:13	6	,
LEAF_NODE	1349:15	1349:15	6	SAMPLEFORMAT_UINT
LEAF_NODE	1349:32	1349:32	6	)
LEAF_NODE	1349:33	1349:33	6	:
EXPR_STATEMENT	1350:2	1350:29	6	guess = SGILOGDATAFMT_16BIT ;
EXPR	1350:2	1350:2	7	guess = SGILOGDATAFMT_16BIT
ASSIGN	1350:2	1350:10	8	guess = SGILOGDATAFMT_16BIT
LVAL	1350:2	1350:2	9	guess
FIELD	1350:2	1350:2	10	guess
LEAF_NODE	1350:2	1350:2	11	guess
ASSIGN_OP	1350:8	1350:8	9	=
LEAF_NODE	1350:8	1350:8	10	=
RVAL	1350:10	1350:10	9	SGILOGDATAFMT_16BIT
FIELD	1350:10	1350:10	10	SGILOGDATAFMT_16BIT
LEAF_NODE	1350:10	1350:10	11	SGILOGDATAFMT_16BIT
LEAF_NODE	1350:29	1350:29	7	;
JUMP_STATEMENT	1351:2	1351:7	6	break DESTINATION ;
KEYWORD	1351:2	1351:2	7	break
LEAF_NODE	1351:2	1351:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1351:7	1351:7	7	;
LEAF_NODE	1352:1	1352:1	6	case
LEAF_NODE	1352:6	1352:6	6	PACK
LEAF_NODE	1352:10	1352:10	6	(
LEAF_NODE	1352:12	1352:12	6	8
LEAF_NODE	1352:13	1352:13	6	,
LEAF_NODE	1352:15	1352:15	6	SAMPLEFORMAT_VOID
LEAF_NODE	1352:32	1352:32	6	)
LEAF_NODE	1352:33	1352:33	6	:
LEAF_NODE	1353:1	1353:1	6	case
LEAF_NODE	1353:6	1353:6	6	PACK
LEAF_NODE	1353:10	1353:10	6	(
LEAF_NODE	1353:12	1353:12	6	8
LEAF_NODE	1353:13	1353:13	6	,
LEAF_NODE	1353:15	1353:15	6	SAMPLEFORMAT_UINT
LEAF_NODE	1353:32	1353:32	6	)
LEAF_NODE	1353:33	1353:33	6	:
EXPR_STATEMENT	1354:2	1354:28	6	guess = SGILOGDATAFMT_8BIT ;
EXPR	1354:2	1354:2	7	guess = SGILOGDATAFMT_8BIT
ASSIGN	1354:2	1354:10	8	guess = SGILOGDATAFMT_8BIT
LVAL	1354:2	1354:2	9	guess
FIELD	1354:2	1354:2	10	guess
LEAF_NODE	1354:2	1354:2	11	guess
ASSIGN_OP	1354:8	1354:8	9	=
LEAF_NODE	1354:8	1354:8	10	=
RVAL	1354:10	1354:10	9	SGILOGDATAFMT_8BIT
FIELD	1354:10	1354:10	10	SGILOGDATAFMT_8BIT
LEAF_NODE	1354:10	1354:10	11	SGILOGDATAFMT_8BIT
LEAF_NODE	1354:28	1354:28	7	;
JUMP_STATEMENT	1355:2	1355:7	6	break DESTINATION ;
KEYWORD	1355:2	1355:2	7	break
LEAF_NODE	1355:2	1355:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1355:7	1355:7	7	;
LABEL	1356:1	1356:8	6	default :
LEAF_NODE	1356:1	1356:1	7	default
LEAF_NODE	1356:8	1356:8	7	:
EXPR_STATEMENT	1357:2	1357:31	6	guess = SGILOGDATAFMT_UNKNOWN ;
EXPR	1357:2	1357:2	7	guess = SGILOGDATAFMT_UNKNOWN
ASSIGN	1357:2	1357:10	8	guess = SGILOGDATAFMT_UNKNOWN
LVAL	1357:2	1357:2	9	guess
FIELD	1357:2	1357:2	10	guess
LEAF_NODE	1357:2	1357:2	11	guess
ASSIGN_OP	1357:8	1357:8	9	=
LEAF_NODE	1357:8	1357:8	10	=
RVAL	1357:10	1357:10	9	SGILOGDATAFMT_UNKNOWN
FIELD	1357:10	1357:10	10	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1357:10	1357:10	11	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1357:31	1357:31	7	;
JUMP_STATEMENT	1358:2	1358:7	6	break DESTINATION ;
KEYWORD	1358:2	1358:2	7	break
LEAF_NODE	1358:2	1358:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1358:7	1358:7	7	;
LEAF_NODE	1360:1	1360:1	5	}
SELECTION	1364:1	1364:33	3	
KEYWORD	1364:1	1364:1	4	switch
LEAF_NODE	1364:1	1364:1	5	switch
LEAF_NODE	1364:8	1364:8	4	(
CONDITION	1364:9	1364:9	4	td -> td_samplesperpixel
EXPR	1364:9	1364:9	5	td -> td_samplesperpixel
FIELD	1364:9	1364:13	6	td -> td_samplesperpixel
LEAF_NODE	1364:9	1364:9	7	td
LEAF_NODE	1364:11	1364:11	7	->
LEAF_NODE	1364:13	1364:13	7	td_samplesperpixel
LEAF_NODE	1364:31	1364:31	4	)
STATEMENTS	1364:33	1376:1	4	
LEAF_NODE	1364:33	1364:33	5	{
STATEMENTS	1365:1	1375:2	5	
LABEL	1365:1	1365:7	6	case 1 :
LEAF_NODE	1365:1	1365:1	7	case
LEAF_NODE	1365:6	1365:6	7	1
LEAF_NODE	1365:7	1365:7	7	:
SELECTION	1366:2	1367:3	6	
KEYWORD	1366:2	1366:2	7	if
LEAF_NODE	1366:2	1366:2	8	if
LEAF_NODE	1366:5	1366:5	7	(
CONDITION	1366:6	1366:6	7	guess != SGILOGDATAFMT_RAW
EXPR	1366:6	1366:15	8	guess != SGILOGDATAFMT_RAW
FIELD	1366:6	1366:6	9	guess
LEAF_NODE	1366:6	1366:6	10	guess
EQ_OPERATOR	1366:12	1366:12	9	!=
LEAF_NODE	1366:12	1366:12	10	!=
FIELD	1366:15	1366:15	9	SGILOGDATAFMT_RAW
LEAF_NODE	1366:15	1366:15	10	SGILOGDATAFMT_RAW
LEAF_NODE	1366:32	1366:32	7	)
STATEMENTS	1367:3	1367:3	7	
EXPR_STATEMENT	1367:3	1367:32	8	guess = SGILOGDATAFMT_UNKNOWN ;
EXPR	1367:3	1367:3	9	guess = SGILOGDATAFMT_UNKNOWN
ASSIGN	1367:3	1367:11	10	guess = SGILOGDATAFMT_UNKNOWN
LVAL	1367:3	1367:3	11	guess
FIELD	1367:3	1367:3	12	guess
LEAF_NODE	1367:3	1367:3	13	guess
ASSIGN_OP	1367:9	1367:9	11	=
LEAF_NODE	1367:9	1367:9	12	=
RVAL	1367:11	1367:11	11	SGILOGDATAFMT_UNKNOWN
FIELD	1367:11	1367:11	12	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1367:11	1367:11	13	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1367:32	1367:32	9	;
JUMP_STATEMENT	1368:2	1368:7	6	break DESTINATION ;
KEYWORD	1368:2	1368:2	7	break
LEAF_NODE	1368:2	1368:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1368:7	1368:7	7	;
LABEL	1369:1	1369:7	6	case 3 :
LEAF_NODE	1369:1	1369:1	7	case
LEAF_NODE	1369:6	1369:6	7	3
LEAF_NODE	1369:7	1369:7	7	:
SELECTION	1370:2	1371:3	6	
KEYWORD	1370:2	1370:2	7	if
LEAF_NODE	1370:2	1370:2	8	if
LEAF_NODE	1370:5	1370:5	7	(
CONDITION	1370:6	1370:6	7	guess == SGILOGDATAFMT_RAW
EXPR	1370:6	1370:15	8	guess == SGILOGDATAFMT_RAW
FIELD	1370:6	1370:6	9	guess
LEAF_NODE	1370:6	1370:6	10	guess
EQ_OPERATOR	1370:12	1370:12	9	==
LEAF_NODE	1370:12	1370:12	10	==
FIELD	1370:15	1370:15	9	SGILOGDATAFMT_RAW
LEAF_NODE	1370:15	1370:15	10	SGILOGDATAFMT_RAW
LEAF_NODE	1370:32	1370:32	7	)
STATEMENTS	1371:3	1371:3	7	
EXPR_STATEMENT	1371:3	1371:32	8	guess = SGILOGDATAFMT_UNKNOWN ;
EXPR	1371:3	1371:3	9	guess = SGILOGDATAFMT_UNKNOWN
ASSIGN	1371:3	1371:11	10	guess = SGILOGDATAFMT_UNKNOWN
LVAL	1371:3	1371:3	11	guess
FIELD	1371:3	1371:3	12	guess
LEAF_NODE	1371:3	1371:3	13	guess
ASSIGN_OP	1371:9	1371:9	11	=
LEAF_NODE	1371:9	1371:9	12	=
RVAL	1371:11	1371:11	11	SGILOGDATAFMT_UNKNOWN
FIELD	1371:11	1371:11	12	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1371:11	1371:11	13	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1371:32	1371:32	9	;
JUMP_STATEMENT	1372:2	1372:7	6	break DESTINATION ;
KEYWORD	1372:2	1372:2	7	break
LEAF_NODE	1372:2	1372:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1372:7	1372:7	7	;
LABEL	1373:1	1373:8	6	default :
LEAF_NODE	1373:1	1373:1	7	default
LEAF_NODE	1373:8	1373:8	7	:
EXPR_STATEMENT	1374:2	1374:31	6	guess = SGILOGDATAFMT_UNKNOWN ;
EXPR	1374:2	1374:2	7	guess = SGILOGDATAFMT_UNKNOWN
ASSIGN	1374:2	1374:10	8	guess = SGILOGDATAFMT_UNKNOWN
LVAL	1374:2	1374:2	9	guess
FIELD	1374:2	1374:2	10	guess
LEAF_NODE	1374:2	1374:2	11	guess
ASSIGN_OP	1374:8	1374:8	9	=
LEAF_NODE	1374:8	1374:8	10	=
RVAL	1374:10	1374:10	9	SGILOGDATAFMT_UNKNOWN
FIELD	1374:10	1374:10	10	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1374:10	1374:10	11	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1374:31	1374:31	7	;
JUMP_STATEMENT	1375:2	1375:7	6	break DESTINATION ;
KEYWORD	1375:2	1375:2	7	break
LEAF_NODE	1375:2	1375:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1375:7	1375:7	7	;
LEAF_NODE	1376:1	1376:1	5	}
LEAF_NODE	1377:1	1377:1	3	return
LEAF_NODE	1377:8	1377:8	3	(
LEAF_NODE	1377:9	1377:9	3	guess
LEAF_NODE	1377:14	1377:14	3	)
LEAF_NODE	1377:15	1377:15	3	;
LEAF_NODE	1378:0	1378:0	2	}
FUNCTION_DEF	1380:0	1428:0	1	
RETURN_TYPE	1380:0	1380:7	2	static int
LEAF_NODE	1380:0	1380:0	3	static
TYPE_NAME	1380:7	1380:7	3	int
LEAF_NODE	1380:7	1380:7	4	int
FUNCTION_NAME	1381:0	1381:0	2	LogLuvInitState
LEAF_NODE	1381:0	1381:0	3	LogLuvInitState
PARAMETER_LIST	1381:15	1381:25	2	( TIFF * tif )
LEAF_NODE	1381:15	1381:15	3	(
PARAMETER_DECL	1381:16	1381:22	3	TIFF * tif
TYPE	1381:16	1381:20	4	TIFF *
TYPE_NAME	1381:16	1381:16	5	TIFF
LEAF_NODE	1381:16	1381:16	6	TIFF
POINTER	1381:20	1381:20	5	*
LEAF_NODE	1381:20	1381:20	6	*
NAME	1381:22	1381:22	4	tif
LEAF_NODE	1381:22	1381:22	5	tif
LEAF_NODE	1381:25	1381:25	3	)
LEAF_NODE	1382:0	1382:0	2	{
STATEMENTS	1383:1	1427:1	2	
LEAF_NODE	1383:1	1383:1	3	static
SIMPLE_DECL	1383:8	1383:47	3	const char [ ] module ; module = "LogLuvInitState" ;
VAR_DECL	1383:8	1383:19	4	const char [ ] module ; module = "LogLuvInitState"
TYPE	1383:8	1383:25	5	const char [ ]
TYPE_NAME	1383:8	1383:14	6	const char
LEAF_NODE	1383:8	1383:8	7	const
LEAF_NODE	1383:14	1383:14	7	char
TYPE_SUFFIX	1383:25	1383:26	6	[ ]
LEAF_NODE	1383:25	1383:25	7	[
LEAF_NODE	1383:26	1383:26	7	]
NAME	1383:19	1383:19	5	module
LEAF_NODE	1383:19	1383:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1383:19	1383:19	5	module = "LogLuvInitState"
ASSIGN	1383:19	1383:30	6	module = "LogLuvInitState"
LVAL	1383:19	1383:19	7	module
NAME	1383:19	1383:19	8	module
LEAF_NODE	1383:19	1383:19	9	module
ASSIGN_OP	1383:28	1383:28	7	=
LEAF_NODE	1383:28	1383:28	8	=
RVAL	1383:30	1383:30	7	"LogLuvInitState"
FIELD	1383:30	1383:30	8	"LogLuvInitState"
LEAF_NODE	1383:30	1383:30	9	"LogLuvInitState"
LEAF_NODE	1383:47	1383:47	4	;
SIMPLE_DECL	1384:1	1384:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1384:1	1384:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1384:1	1384:14	5	TIFFDirectory *
TYPE_NAME	1384:1	1384:1	6	TIFFDirectory
LEAF_NODE	1384:1	1384:1	7	TIFFDirectory
POINTER	1384:14	1384:14	6	*
LEAF_NODE	1384:14	1384:14	7	*
NAME	1384:16	1384:16	5	td
LEAF_NODE	1384:16	1384:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1384:16	1384:16	5	td = & tif -> tif_dir
ASSIGN	1384:16	1384:21	6	td = & tif -> tif_dir
LVAL	1384:16	1384:16	7	td
NAME	1384:16	1384:16	8	td
LEAF_NODE	1384:16	1384:16	9	td
ASSIGN_OP	1384:19	1384:19	7	=
LEAF_NODE	1384:19	1384:19	8	=
RVAL	1384:21	1384:21	7	& tif -> tif_dir
UNARY_EXPR	1384:21	1384:22	8	& tif -> tif_dir
UNARY_OPERATOR	1384:21	1384:21	9	&
LEAF_NODE	1384:21	1384:21	10	&
FIELD	1384:22	1384:27	9	tif -> tif_dir
LEAF_NODE	1384:22	1384:22	10	tif
LEAF_NODE	1384:25	1384:25	10	->
LEAF_NODE	1384:27	1384:27	10	tif_dir
LEAF_NODE	1384:34	1384:34	4	;
SIMPLE_DECL	1385:1	1385:36	3	LogLuvState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	1385:1	1385:14	4	LogLuvState * sp ; sp = DecoderState ( tif )
TYPE	1385:1	1385:12	5	LogLuvState *
TYPE_NAME	1385:1	1385:1	6	LogLuvState
LEAF_NODE	1385:1	1385:1	7	LogLuvState
POINTER	1385:12	1385:12	6	*
LEAF_NODE	1385:12	1385:12	7	*
NAME	1385:14	1385:14	5	sp
LEAF_NODE	1385:14	1385:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1385:14	1385:14	5	sp = DecoderState ( tif )
ASSIGN	1385:14	1385:19	6	sp = DecoderState ( tif )
LVAL	1385:14	1385:14	7	sp
NAME	1385:14	1385:14	8	sp
LEAF_NODE	1385:14	1385:14	9	sp
ASSIGN_OP	1385:17	1385:17	7	=
LEAF_NODE	1385:17	1385:17	8	=
RVAL	1385:19	1385:19	7	DecoderState ( tif )
FUNCTION_CALL	1385:19	1385:35	8	DecoderState ( tif )
CALLEE	1385:19	1385:19	9	DecoderState
LEAF_NODE	1385:19	1385:19	10	DecoderState
LEAF_NODE	1385:31	1385:31	9	(
ARGUMENT	1385:32	1385:32	9	tif
FIELD	1385:32	1385:32	10	tif
LEAF_NODE	1385:32	1385:32	11	tif
LEAF_NODE	1385:35	1385:35	9	)
LEAF_NODE	1385:36	1385:36	4	;
EXPR_STATEMENT	1387:1	1387:19	3	assert ( sp != NULL ) ;
EXPR	1387:1	1387:1	4	assert ( sp != NULL )
FUNCTION_CALL	1387:1	1387:18	5	assert ( sp != NULL )
CALLEE	1387:1	1387:1	6	assert
LEAF_NODE	1387:1	1387:1	7	assert
LEAF_NODE	1387:7	1387:7	6	(
ARGUMENT	1387:8	1387:14	6	sp != NULL
FIELD	1387:8	1387:8	7	sp
LEAF_NODE	1387:8	1387:8	8	sp
EQ_OPERATOR	1387:11	1387:11	7	!=
LEAF_NODE	1387:11	1387:11	8	!=
FIELD	1387:14	1387:14	7	NULL
LEAF_NODE	1387:14	1387:14	8	NULL
LEAF_NODE	1387:18	1387:18	6	)
LEAF_NODE	1387:19	1387:19	4	;
EXPR_STATEMENT	1388:1	1388:49	3	assert ( td -> td_photometric == PHOTOMETRIC_LOGLUV ) ;
EXPR	1388:1	1388:1	4	assert ( td -> td_photometric == PHOTOMETRIC_LOGLUV )
FUNCTION_CALL	1388:1	1388:48	5	assert ( td -> td_photometric == PHOTOMETRIC_LOGLUV )
CALLEE	1388:1	1388:1	6	assert
LEAF_NODE	1388:1	1388:1	7	assert
LEAF_NODE	1388:7	1388:7	6	(
ARGUMENT	1388:8	1388:30	6	td -> td_photometric == PHOTOMETRIC_LOGLUV
FIELD	1388:8	1388:12	7	td -> td_photometric
LEAF_NODE	1388:8	1388:8	8	td
LEAF_NODE	1388:10	1388:10	8	->
LEAF_NODE	1388:12	1388:12	8	td_photometric
EQ_OPERATOR	1388:27	1388:27	7	==
LEAF_NODE	1388:27	1388:27	8	==
FIELD	1388:30	1388:30	7	PHOTOMETRIC_LOGLUV
LEAF_NODE	1388:30	1388:30	8	PHOTOMETRIC_LOGLUV
LEAF_NODE	1388:48	1388:48	6	)
LEAF_NODE	1388:49	1388:49	4	;
SELECTION	1391:1	1391:49	3	
KEYWORD	1391:1	1391:1	4	if
LEAF_NODE	1391:1	1391:1	5	if
LEAF_NODE	1391:4	1391:4	4	(
CONDITION	1391:5	1391:5	4	td -> td_planarconfig != PLANARCONFIG_CONTIG
EXPR	1391:5	1391:28	5	td -> td_planarconfig != PLANARCONFIG_CONTIG
FIELD	1391:5	1391:9	6	td -> td_planarconfig
LEAF_NODE	1391:5	1391:5	7	td
LEAF_NODE	1391:7	1391:7	7	->
LEAF_NODE	1391:9	1391:9	7	td_planarconfig
EQ_OPERATOR	1391:25	1391:25	6	!=
LEAF_NODE	1391:25	1391:25	7	!=
FIELD	1391:28	1391:28	6	PLANARCONFIG_CONTIG
LEAF_NODE	1391:28	1391:28	7	PLANARCONFIG_CONTIG
LEAF_NODE	1391:47	1391:47	4	)
STATEMENTS	1391:49	1395:1	4	
LEAF_NODE	1391:49	1391:49	5	{
STATEMENTS	1392:2	1394:2	5	
EXPR_STATEMENT	1392:2	1393:61	6	TIFFErrorExt ( tif -> tif_clientdata , module , "SGILog compression cannot handle non-contiguous data" ) ;
EXPR	1392:2	1392:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "SGILog compression cannot handle non-contiguous data" )
FUNCTION_CALL	1392:2	1393:60	8	TIFFErrorExt ( tif -> tif_clientdata , module , "SGILog compression cannot handle non-contiguous data" )
CALLEE	1392:2	1392:2	9	TIFFErrorExt
LEAF_NODE	1392:2	1392:2	10	TIFFErrorExt
LEAF_NODE	1392:14	1392:14	9	(
ARGUMENT	1392:15	1392:15	9	tif -> tif_clientdata
FIELD	1392:15	1392:20	10	tif -> tif_clientdata
LEAF_NODE	1392:15	1392:15	11	tif
LEAF_NODE	1392:18	1392:18	11	->
LEAF_NODE	1392:20	1392:20	11	tif_clientdata
LEAF_NODE	1392:34	1392:34	9	,
ARGUMENT	1392:36	1392:36	9	module
FIELD	1392:36	1392:36	10	module
LEAF_NODE	1392:36	1392:36	11	module
LEAF_NODE	1392:42	1392:42	9	,
ARGUMENT	1393:6	1393:6	9	"SGILog compression cannot handle non-contiguous data"
FIELD	1393:6	1393:6	10	"SGILog compression cannot handle non-contiguous data"
LEAF_NODE	1393:6	1393:6	11	"SGILog compression cannot handle non-contiguous data"
LEAF_NODE	1393:60	1393:60	9	)
LEAF_NODE	1393:61	1393:61	7	;
JUMP_STATEMENT	1394:2	1394:12	6	return ( 0 ) ;
KEYWORD	1394:2	1394:2	7	return
LEAF_NODE	1394:2	1394:2	8	return
DESTINATION	1394:9	1394:9	7	( 0 )
EXPR	1394:9	1394:11	8	( 0 )
LEAF_NODE	1394:9	1394:9	9	(
FIELD	1394:10	1394:10	9	0
LEAF_NODE	1394:10	1394:10	10	0
LEAF_NODE	1394:11	1394:11	9	)
LEAF_NODE	1394:12	1394:12	7	;
LEAF_NODE	1395:1	1395:1	5	}
SELECTION	1396:1	1397:2	3	
KEYWORD	1396:1	1396:1	4	if
LEAF_NODE	1396:1	1396:1	5	if
LEAF_NODE	1396:4	1396:4	4	(
CONDITION	1396:5	1396:5	4	sp -> user_datafmt == SGILOGDATAFMT_UNKNOWN
EXPR	1396:5	1396:25	5	sp -> user_datafmt == SGILOGDATAFMT_UNKNOWN
FIELD	1396:5	1396:9	6	sp -> user_datafmt
LEAF_NODE	1396:5	1396:5	7	sp
LEAF_NODE	1396:7	1396:7	7	->
LEAF_NODE	1396:9	1396:9	7	user_datafmt
EQ_OPERATOR	1396:22	1396:22	6	==
LEAF_NODE	1396:22	1396:22	7	==
FIELD	1396:25	1396:25	6	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1396:25	1396:25	7	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1396:46	1396:46	4	)
STATEMENTS	1397:2	1397:2	4	
EXPR_STATEMENT	1397:2	1397:43	5	sp -> user_datafmt = LogLuvGuessDataFmt ( td ) ;
EXPR	1397:2	1397:2	6	sp -> user_datafmt = LogLuvGuessDataFmt ( td )
ASSIGN	1397:2	1397:21	7	sp -> user_datafmt = LogLuvGuessDataFmt ( td )
LVAL	1397:2	1397:2	8	sp -> user_datafmt
FIELD	1397:2	1397:6	9	sp -> user_datafmt
LEAF_NODE	1397:2	1397:2	10	sp
LEAF_NODE	1397:4	1397:4	10	->
LEAF_NODE	1397:6	1397:6	10	user_datafmt
ASSIGN_OP	1397:19	1397:19	8	=
LEAF_NODE	1397:19	1397:19	9	=
RVAL	1397:21	1397:21	8	LogLuvGuessDataFmt ( td )
FUNCTION_CALL	1397:21	1397:42	9	LogLuvGuessDataFmt ( td )
CALLEE	1397:21	1397:21	10	LogLuvGuessDataFmt
LEAF_NODE	1397:21	1397:21	11	LogLuvGuessDataFmt
LEAF_NODE	1397:39	1397:39	10	(
ARGUMENT	1397:40	1397:40	10	td
FIELD	1397:40	1397:40	11	td
LEAF_NODE	1397:40	1397:40	12	td
LEAF_NODE	1397:42	1397:42	10	)
LEAF_NODE	1397:43	1397:43	6	;
SELECTION	1398:1	1398:27	3	
KEYWORD	1398:1	1398:1	4	switch
LEAF_NODE	1398:1	1398:1	5	switch
LEAF_NODE	1398:8	1398:8	4	(
CONDITION	1398:9	1398:9	4	sp -> user_datafmt
EXPR	1398:9	1398:9	5	sp -> user_datafmt
FIELD	1398:9	1398:13	6	sp -> user_datafmt
LEAF_NODE	1398:9	1398:9	7	sp
LEAF_NODE	1398:11	1398:11	7	->
LEAF_NODE	1398:13	1398:13	7	user_datafmt
LEAF_NODE	1398:25	1398:25	4	)
STATEMENTS	1398:27	1415:1	4	
LEAF_NODE	1398:27	1398:27	5	{
STATEMENTS	1399:1	1414:2	5	
LABEL	1399:1	1399:25	6	case SGILOGDATAFMT_FLOAT :
LEAF_NODE	1399:1	1399:1	7	case
LEAF_NODE	1399:6	1399:6	7	SGILOGDATAFMT_FLOAT
LEAF_NODE	1399:25	1399:25	7	:
EXPR_STATEMENT	1400:2	1400:35	6	sp -> pixel_size = 3 * sizeof ( float ) ;
EXPR	1400:2	1400:2	7	sp -> pixel_size = 3 * sizeof ( float )
ASSIGN	1400:2	1400:19	8	sp -> pixel_size = 3 * sizeof ( float )
LVAL	1400:2	1400:2	9	sp -> pixel_size
FIELD	1400:2	1400:6	10	sp -> pixel_size
LEAF_NODE	1400:2	1400:2	11	sp
LEAF_NODE	1400:4	1400:4	11	->
LEAF_NODE	1400:6	1400:6	11	pixel_size
ASSIGN_OP	1400:17	1400:17	9	=
LEAF_NODE	1400:17	1400:17	10	=
RVAL	1400:19	1400:21	9	3 * sizeof ( float )
FIELD	1400:19	1400:19	10	3
LEAF_NODE	1400:19	1400:19	11	3
LEAF_NODE	1400:20	1400:20	10	*
FUNCTION_CALL	1400:21	1400:34	10	sizeof ( float )
CALLEE	1400:21	1400:21	11	sizeof
LEAF_NODE	1400:21	1400:21	12	sizeof
LEAF_NODE	1400:28	1400:28	11	(
ARGUMENT	1400:29	1400:29	11	float
FIELD	1400:29	1400:29	12	float
LEAF_NODE	1400:29	1400:29	13	float
LEAF_NODE	1400:34	1400:34	11	)
LEAF_NODE	1400:35	1400:35	7	;
JUMP_STATEMENT	1401:2	1401:7	6	break DESTINATION ;
KEYWORD	1401:2	1401:2	7	break
LEAF_NODE	1401:2	1401:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1401:7	1401:7	7	;
LABEL	1402:1	1402:25	6	case SGILOGDATAFMT_16BIT :
LEAF_NODE	1402:1	1402:1	7	case
LEAF_NODE	1402:6	1402:6	7	SGILOGDATAFMT_16BIT
LEAF_NODE	1402:25	1402:25	7	:
EXPR_STATEMENT	1403:2	1403:35	6	sp -> pixel_size = 3 * sizeof ( int16 ) ;
EXPR	1403:2	1403:2	7	sp -> pixel_size = 3 * sizeof ( int16 )
ASSIGN	1403:2	1403:19	8	sp -> pixel_size = 3 * sizeof ( int16 )
LVAL	1403:2	1403:2	9	sp -> pixel_size
FIELD	1403:2	1403:6	10	sp -> pixel_size
LEAF_NODE	1403:2	1403:2	11	sp
LEAF_NODE	1403:4	1403:4	11	->
LEAF_NODE	1403:6	1403:6	11	pixel_size
ASSIGN_OP	1403:17	1403:17	9	=
LEAF_NODE	1403:17	1403:17	10	=
RVAL	1403:19	1403:21	9	3 * sizeof ( int16 )
FIELD	1403:19	1403:19	10	3
LEAF_NODE	1403:19	1403:19	11	3
LEAF_NODE	1403:20	1403:20	10	*
FUNCTION_CALL	1403:21	1403:34	10	sizeof ( int16 )
CALLEE	1403:21	1403:21	11	sizeof
LEAF_NODE	1403:21	1403:21	12	sizeof
LEAF_NODE	1403:28	1403:28	11	(
ARGUMENT	1403:29	1403:29	11	int16
FIELD	1403:29	1403:29	12	int16
LEAF_NODE	1403:29	1403:29	13	int16
LEAF_NODE	1403:34	1403:34	11	)
LEAF_NODE	1403:35	1403:35	7	;
JUMP_STATEMENT	1404:2	1404:7	6	break DESTINATION ;
KEYWORD	1404:2	1404:2	7	break
LEAF_NODE	1404:2	1404:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1404:7	1404:7	7	;
LABEL	1405:1	1405:23	6	case SGILOGDATAFMT_RAW :
LEAF_NODE	1405:1	1405:1	7	case
LEAF_NODE	1405:6	1405:6	7	SGILOGDATAFMT_RAW
LEAF_NODE	1405:23	1405:23	7	:
EXPR_STATEMENT	1406:2	1406:34	6	sp -> pixel_size = sizeof ( uint32 ) ;
EXPR	1406:2	1406:2	7	sp -> pixel_size = sizeof ( uint32 )
ASSIGN	1406:2	1406:19	8	sp -> pixel_size = sizeof ( uint32 )
LVAL	1406:2	1406:2	9	sp -> pixel_size
FIELD	1406:2	1406:6	10	sp -> pixel_size
LEAF_NODE	1406:2	1406:2	11	sp
LEAF_NODE	1406:4	1406:4	11	->
LEAF_NODE	1406:6	1406:6	11	pixel_size
ASSIGN_OP	1406:17	1406:17	9	=
LEAF_NODE	1406:17	1406:17	10	=
RVAL	1406:19	1406:19	9	sizeof ( uint32 )
FUNCTION_CALL	1406:19	1406:33	10	sizeof ( uint32 )
CALLEE	1406:19	1406:19	11	sizeof
LEAF_NODE	1406:19	1406:19	12	sizeof
LEAF_NODE	1406:26	1406:26	11	(
ARGUMENT	1406:27	1406:27	11	uint32
FIELD	1406:27	1406:27	12	uint32
LEAF_NODE	1406:27	1406:27	13	uint32
LEAF_NODE	1406:33	1406:33	11	)
LEAF_NODE	1406:34	1406:34	7	;
JUMP_STATEMENT	1407:2	1407:7	6	break DESTINATION ;
KEYWORD	1407:2	1407:2	7	break
LEAF_NODE	1407:2	1407:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1407:7	1407:7	7	;
LABEL	1408:1	1408:24	6	case SGILOGDATAFMT_8BIT :
LEAF_NODE	1408:1	1408:1	7	case
LEAF_NODE	1408:6	1408:6	7	SGILOGDATAFMT_8BIT
LEAF_NODE	1408:24	1408:24	7	:
EXPR_STATEMENT	1409:2	1409:35	6	sp -> pixel_size = 3 * sizeof ( uint8 ) ;
EXPR	1409:2	1409:2	7	sp -> pixel_size = 3 * sizeof ( uint8 )
ASSIGN	1409:2	1409:19	8	sp -> pixel_size = 3 * sizeof ( uint8 )
LVAL	1409:2	1409:2	9	sp -> pixel_size
FIELD	1409:2	1409:6	10	sp -> pixel_size
LEAF_NODE	1409:2	1409:2	11	sp
LEAF_NODE	1409:4	1409:4	11	->
LEAF_NODE	1409:6	1409:6	11	pixel_size
ASSIGN_OP	1409:17	1409:17	9	=
LEAF_NODE	1409:17	1409:17	10	=
RVAL	1409:19	1409:21	9	3 * sizeof ( uint8 )
FIELD	1409:19	1409:19	10	3
LEAF_NODE	1409:19	1409:19	11	3
LEAF_NODE	1409:20	1409:20	10	*
FUNCTION_CALL	1409:21	1409:34	10	sizeof ( uint8 )
CALLEE	1409:21	1409:21	11	sizeof
LEAF_NODE	1409:21	1409:21	12	sizeof
LEAF_NODE	1409:28	1409:28	11	(
ARGUMENT	1409:29	1409:29	11	uint8
FIELD	1409:29	1409:29	12	uint8
LEAF_NODE	1409:29	1409:29	13	uint8
LEAF_NODE	1409:34	1409:34	11	)
LEAF_NODE	1409:35	1409:35	7	;
JUMP_STATEMENT	1410:2	1410:7	6	break DESTINATION ;
KEYWORD	1410:2	1410:2	7	break
LEAF_NODE	1410:2	1410:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1410:7	1410:7	7	;
LABEL	1411:1	1411:8	6	default :
LEAF_NODE	1411:1	1411:1	7	default
LEAF_NODE	1411:8	1411:8	7	:
EXPR_STATEMENT	1412:2	1413:61	6	TIFFErrorExt ( tif -> tif_clientdata , module , "No support for converting user data format to LogLuv" ) ;
EXPR	1412:2	1412:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "No support for converting user data format to LogLuv" )
FUNCTION_CALL	1412:2	1413:60	8	TIFFErrorExt ( tif -> tif_clientdata , module , "No support for converting user data format to LogLuv" )
CALLEE	1412:2	1412:2	9	TIFFErrorExt
LEAF_NODE	1412:2	1412:2	10	TIFFErrorExt
LEAF_NODE	1412:14	1412:14	9	(
ARGUMENT	1412:15	1412:15	9	tif -> tif_clientdata
FIELD	1412:15	1412:20	10	tif -> tif_clientdata
LEAF_NODE	1412:15	1412:15	11	tif
LEAF_NODE	1412:18	1412:18	11	->
LEAF_NODE	1412:20	1412:20	11	tif_clientdata
LEAF_NODE	1412:34	1412:34	9	,
ARGUMENT	1412:36	1412:36	9	module
FIELD	1412:36	1412:36	10	module
LEAF_NODE	1412:36	1412:36	11	module
LEAF_NODE	1412:42	1412:42	9	,
ARGUMENT	1413:6	1413:6	9	"No support for converting user data format to LogLuv"
FIELD	1413:6	1413:6	10	"No support for converting user data format to LogLuv"
LEAF_NODE	1413:6	1413:6	11	"No support for converting user data format to LogLuv"
LEAF_NODE	1413:60	1413:60	9	)
LEAF_NODE	1413:61	1413:61	7	;
JUMP_STATEMENT	1414:2	1414:12	6	return ( 0 ) ;
KEYWORD	1414:2	1414:2	7	return
LEAF_NODE	1414:2	1414:2	8	return
DESTINATION	1414:9	1414:9	7	( 0 )
EXPR	1414:9	1414:11	8	( 0 )
LEAF_NODE	1414:9	1414:9	9	(
FIELD	1414:10	1414:10	9	0
LEAF_NODE	1414:10	1414:10	10	0
LEAF_NODE	1414:11	1414:11	9	)
LEAF_NODE	1414:12	1414:12	7	;
LEAF_NODE	1415:1	1415:1	5	}
SELECTION	1416:8	1417:12	3	
KEYWORD	1416:8	1416:8	4	if
LEAF_NODE	1416:8	1416:8	5	if
LEAF_NODE	1416:10	1416:10	4	(
CONDITION	1416:12	1416:12	4	isTiled ( tif )
EXPR	1416:12	1416:12	5	isTiled ( tif )
FUNCTION_CALL	1416:12	1416:23	6	isTiled ( tif )
CALLEE	1416:12	1416:12	7	isTiled
LEAF_NODE	1416:12	1416:12	8	isTiled
LEAF_NODE	1416:19	1416:19	7	(
ARGUMENT	1416:20	1416:20	7	tif
FIELD	1416:20	1416:20	8	tif
LEAF_NODE	1416:20	1416:20	9	tif
LEAF_NODE	1416:23	1416:23	7	)
LEAF_NODE	1416:25	1416:25	4	)
STATEMENTS	1417:12	1417:12	4	
EXPR_STATEMENT	1417:12	1417:74	5	sp -> tbuflen = multiply_ms ( td -> td_tilewidth , td -> td_tilelength ) ;
EXPR	1417:12	1417:12	6	sp -> tbuflen = multiply_ms ( td -> td_tilewidth , td -> td_tilelength )
ASSIGN	1417:12	1417:26	7	sp -> tbuflen = multiply_ms ( td -> td_tilewidth , td -> td_tilelength )
LVAL	1417:12	1417:12	8	sp -> tbuflen
FIELD	1417:12	1417:16	9	sp -> tbuflen
LEAF_NODE	1417:12	1417:12	10	sp
LEAF_NODE	1417:14	1417:14	10	->
LEAF_NODE	1417:16	1417:16	10	tbuflen
ASSIGN_OP	1417:24	1417:24	8	=
LEAF_NODE	1417:24	1417:24	9	=
RVAL	1417:26	1417:26	8	multiply_ms ( td -> td_tilewidth , td -> td_tilelength )
FUNCTION_CALL	1417:26	1417:73	9	multiply_ms ( td -> td_tilewidth , td -> td_tilelength )
CALLEE	1417:26	1417:26	10	multiply_ms
LEAF_NODE	1417:26	1417:26	11	multiply_ms
LEAF_NODE	1417:37	1417:37	10	(
ARGUMENT	1417:38	1417:38	10	td -> td_tilewidth
FIELD	1417:38	1417:42	11	td -> td_tilewidth
LEAF_NODE	1417:38	1417:38	12	td
LEAF_NODE	1417:40	1417:40	12	->
LEAF_NODE	1417:42	1417:42	12	td_tilewidth
LEAF_NODE	1417:54	1417:54	10	,
ARGUMENT	1417:56	1417:56	10	td -> td_tilelength
FIELD	1417:56	1417:60	11	td -> td_tilelength
LEAF_NODE	1417:56	1417:56	12	td
LEAF_NODE	1417:58	1417:58	12	->
LEAF_NODE	1417:60	1417:60	12	td_tilelength
LEAF_NODE	1417:73	1417:73	10	)
LEAF_NODE	1417:74	1417:74	6	;
SELECTION	1418:8	1418:13	3	
KEYWORD	1418:8	1418:8	4	else
LEAF_NODE	1418:8	1418:8	5	else
STATEMENTS	1418:13	1418:13	4	
SELECTION	1418:13	1419:12	5	
KEYWORD	1418:13	1418:13	6	if
LEAF_NODE	1418:13	1418:13	7	if
LEAF_NODE	1418:15	1418:15	6	(
CONDITION	1418:17	1418:17	6	td -> td_rowsperstrip < td -> td_imagelength
EXPR	1418:17	1418:39	7	td -> td_rowsperstrip < td -> td_imagelength
FIELD	1418:17	1418:21	8	td -> td_rowsperstrip
LEAF_NODE	1418:17	1418:17	9	td
LEAF_NODE	1418:19	1418:19	9	->
LEAF_NODE	1418:21	1418:21	9	td_rowsperstrip
REL_OPERATOR	1418:37	1418:37	8	<
LEAF_NODE	1418:37	1418:37	9	<
FIELD	1418:39	1418:43	8	td -> td_imagelength
LEAF_NODE	1418:39	1418:39	9	td
LEAF_NODE	1418:41	1418:41	9	->
LEAF_NODE	1418:43	1418:43	9	td_imagelength
LEAF_NODE	1418:58	1418:58	6	)
STATEMENTS	1419:12	1419:12	6	
EXPR_STATEMENT	1419:12	1419:77	7	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_rowsperstrip ) ;
EXPR	1419:12	1419:12	8	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_rowsperstrip )
ASSIGN	1419:12	1419:26	9	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_rowsperstrip )
LVAL	1419:12	1419:12	10	sp -> tbuflen
FIELD	1419:12	1419:16	11	sp -> tbuflen
LEAF_NODE	1419:12	1419:12	12	sp
LEAF_NODE	1419:14	1419:14	12	->
LEAF_NODE	1419:16	1419:16	12	tbuflen
ASSIGN_OP	1419:24	1419:24	10	=
LEAF_NODE	1419:24	1419:24	11	=
RVAL	1419:26	1419:26	10	multiply_ms ( td -> td_imagewidth , td -> td_rowsperstrip )
FUNCTION_CALL	1419:26	1419:76	11	multiply_ms ( td -> td_imagewidth , td -> td_rowsperstrip )
CALLEE	1419:26	1419:26	12	multiply_ms
LEAF_NODE	1419:26	1419:26	13	multiply_ms
LEAF_NODE	1419:37	1419:37	12	(
ARGUMENT	1419:38	1419:38	12	td -> td_imagewidth
FIELD	1419:38	1419:42	13	td -> td_imagewidth
LEAF_NODE	1419:38	1419:38	14	td
LEAF_NODE	1419:40	1419:40	14	->
LEAF_NODE	1419:42	1419:42	14	td_imagewidth
LEAF_NODE	1419:55	1419:55	12	,
ARGUMENT	1419:57	1419:57	12	td -> td_rowsperstrip
FIELD	1419:57	1419:61	13	td -> td_rowsperstrip
LEAF_NODE	1419:57	1419:57	14	td
LEAF_NODE	1419:59	1419:59	14	->
LEAF_NODE	1419:61	1419:61	14	td_rowsperstrip
LEAF_NODE	1419:76	1419:76	12	)
LEAF_NODE	1419:77	1419:77	8	;
SELECTION	1420:8	1421:12	3	
KEYWORD	1420:8	1420:8	4	else
LEAF_NODE	1420:8	1420:8	5	else
STATEMENTS	1421:12	1421:12	4	
EXPR_STATEMENT	1421:12	1421:76	5	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_imagelength ) ;
EXPR	1421:12	1421:12	6	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_imagelength )
ASSIGN	1421:12	1421:26	7	sp -> tbuflen = multiply_ms ( td -> td_imagewidth , td -> td_imagelength )
LVAL	1421:12	1421:12	8	sp -> tbuflen
FIELD	1421:12	1421:16	9	sp -> tbuflen
LEAF_NODE	1421:12	1421:12	10	sp
LEAF_NODE	1421:14	1421:14	10	->
LEAF_NODE	1421:16	1421:16	10	tbuflen
ASSIGN_OP	1421:24	1421:24	8	=
LEAF_NODE	1421:24	1421:24	9	=
RVAL	1421:26	1421:26	8	multiply_ms ( td -> td_imagewidth , td -> td_imagelength )
FUNCTION_CALL	1421:26	1421:75	9	multiply_ms ( td -> td_imagewidth , td -> td_imagelength )
CALLEE	1421:26	1421:26	10	multiply_ms
LEAF_NODE	1421:26	1421:26	11	multiply_ms
LEAF_NODE	1421:37	1421:37	10	(
ARGUMENT	1421:38	1421:38	10	td -> td_imagewidth
FIELD	1421:38	1421:42	11	td -> td_imagewidth
LEAF_NODE	1421:38	1421:38	12	td
LEAF_NODE	1421:40	1421:40	12	->
LEAF_NODE	1421:42	1421:42	12	td_imagewidth
LEAF_NODE	1421:55	1421:55	10	,
ARGUMENT	1421:57	1421:57	10	td -> td_imagelength
FIELD	1421:57	1421:61	11	td -> td_imagelength
LEAF_NODE	1421:57	1421:57	12	td
LEAF_NODE	1421:59	1421:59	12	->
LEAF_NODE	1421:61	1421:61	12	td_imagelength
LEAF_NODE	1421:75	1421:75	10	)
LEAF_NODE	1421:76	1421:76	6	;
SELECTION	1422:1	1423:79	3	
KEYWORD	1422:1	1422:1	4	if
LEAF_NODE	1422:1	1422:1	5	if
LEAF_NODE	1422:4	1422:4	4	(
CONDITION	1422:5	1422:5	4	multiply_ms ( sp -> tbuflen , sizeof ( uint32 ) ) == 0 || ( sp -> tbuf = ( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( uint32 ) ) ) == NULL
EXPR	1422:5	1422:5	5	multiply_ms ( sp -> tbuflen , sizeof ( uint32 ) ) == 0 || ( sp -> tbuf = ( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( uint32 ) ) ) == NULL
OR	1422:5	1423:5	6	multiply_ms ( sp -> tbuflen , sizeof ( uint32 ) ) == 0 || ( sp -> tbuf = ( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( uint32 ) ) ) == NULL
EXPR	1422:5	1422:50	7	multiply_ms ( sp -> tbuflen , sizeof ( uint32 ) ) == 0
FUNCTION_CALL	1422:5	1422:45	8	multiply_ms ( sp -> tbuflen , sizeof ( uint32 ) )
CALLEE	1422:5	1422:5	9	multiply_ms
LEAF_NODE	1422:5	1422:5	10	multiply_ms
LEAF_NODE	1422:16	1422:16	9	(
ARGUMENT	1422:17	1422:17	9	sp -> tbuflen
FIELD	1422:17	1422:21	10	sp -> tbuflen
LEAF_NODE	1422:17	1422:17	11	sp
LEAF_NODE	1422:19	1422:19	11	->
LEAF_NODE	1422:21	1422:21	11	tbuflen
LEAF_NODE	1422:28	1422:28	9	,
ARGUMENT	1422:30	1422:30	9	sizeof ( uint32 )
FUNCTION_CALL	1422:30	1422:44	10	sizeof ( uint32 )
CALLEE	1422:30	1422:30	11	sizeof
LEAF_NODE	1422:30	1422:30	12	sizeof
LEAF_NODE	1422:37	1422:37	11	(
ARGUMENT	1422:38	1422:38	11	uint32
FIELD	1422:38	1422:38	12	uint32
LEAF_NODE	1422:38	1422:38	13	uint32
LEAF_NODE	1422:44	1422:44	11	)
LEAF_NODE	1422:45	1422:45	9	)
EQ_OPERATOR	1422:47	1422:47	8	==
LEAF_NODE	1422:47	1422:47	9	==
FIELD	1422:50	1422:50	8	0
LEAF_NODE	1422:50	1422:50	9	0
LEAF_NODE	1422:52	1422:52	7	||
EXPR	1423:5	1423:73	7	( sp -> tbuf = ( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( uint32 ) ) ) == NULL
LEAF_NODE	1423:5	1423:5	8	(
ASSIGN	1423:6	1423:17	8	sp -> tbuf = ( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( uint32 ) )
LVAL	1423:6	1423:6	9	sp -> tbuf
FIELD	1423:6	1423:10	10	sp -> tbuf
LEAF_NODE	1423:6	1423:6	11	sp
LEAF_NODE	1423:8	1423:8	11	->
LEAF_NODE	1423:10	1423:10	11	tbuf
ASSIGN_OP	1423:15	1423:15	9	=
LEAF_NODE	1423:15	1423:15	10	=
RVAL	1423:17	1423:26	9	( uint8 * ) _TIFFmalloc ( sp -> tbuflen * sizeof ( uint32 ) )
LEAF_NODE	1423:17	1423:17	10	(
TYPE_NAME	1423:18	1423:18	10	uint8
LEAF_NODE	1423:18	1423:18	11	uint8
LEAF_NODE	1423:23	1423:23	10	*
LEAF_NODE	1423:24	1423:24	10	)
FUNCTION_CALL	1423:26	1423:67	10	_TIFFmalloc ( sp -> tbuflen * sizeof ( uint32 ) )
CALLEE	1423:26	1423:26	11	_TIFFmalloc
LEAF_NODE	1423:26	1423:26	12	_TIFFmalloc
LEAF_NODE	1423:37	1423:37	11	(
ARGUMENT	1423:38	1423:52	11	sp -> tbuflen * sizeof ( uint32 )
FIELD	1423:38	1423:42	12	sp -> tbuflen
LEAF_NODE	1423:38	1423:38	13	sp
LEAF_NODE	1423:40	1423:40	13	->
LEAF_NODE	1423:42	1423:42	13	tbuflen
LEAF_NODE	1423:50	1423:50	12	*
FUNCTION_CALL	1423:52	1423:66	12	sizeof ( uint32 )
CALLEE	1423:52	1423:52	13	sizeof
LEAF_NODE	1423:52	1423:52	14	sizeof
LEAF_NODE	1423:59	1423:59	13	(
ARGUMENT	1423:60	1423:60	13	uint32
FIELD	1423:60	1423:60	14	uint32
LEAF_NODE	1423:60	1423:60	15	uint32
LEAF_NODE	1423:66	1423:66	13	)
LEAF_NODE	1423:67	1423:67	11	)
LEAF_NODE	1423:68	1423:68	8	)
EQ_OPERATOR	1423:70	1423:70	8	==
LEAF_NODE	1423:70	1423:70	9	==
FIELD	1423:73	1423:73	8	NULL
LEAF_NODE	1423:73	1423:73	9	NULL
LEAF_NODE	1423:77	1423:77	4	)
STATEMENTS	1423:79	1426:1	4	
LEAF_NODE	1423:79	1423:79	5	{
STATEMENTS	1424:2	1425:2	5	
EXPR_STATEMENT	1424:2	1424:85	6	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for SGILog translation buffer" ) ;
EXPR	1424:2	1424:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for SGILog translation buffer" )
FUNCTION_CALL	1424:2	1424:84	8	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for SGILog translation buffer" )
CALLEE	1424:2	1424:2	9	TIFFErrorExt
LEAF_NODE	1424:2	1424:2	10	TIFFErrorExt
LEAF_NODE	1424:14	1424:14	9	(
ARGUMENT	1424:15	1424:15	9	tif -> tif_clientdata
FIELD	1424:15	1424:20	10	tif -> tif_clientdata
LEAF_NODE	1424:15	1424:15	11	tif
LEAF_NODE	1424:18	1424:18	11	->
LEAF_NODE	1424:20	1424:20	11	tif_clientdata
LEAF_NODE	1424:34	1424:34	9	,
ARGUMENT	1424:36	1424:36	9	module
FIELD	1424:36	1424:36	10	module
LEAF_NODE	1424:36	1424:36	11	module
LEAF_NODE	1424:42	1424:42	9	,
ARGUMENT	1424:44	1424:44	9	"No space for SGILog translation buffer"
FIELD	1424:44	1424:44	10	"No space for SGILog translation buffer"
LEAF_NODE	1424:44	1424:44	11	"No space for SGILog translation buffer"
LEAF_NODE	1424:84	1424:84	9	)
LEAF_NODE	1424:85	1424:85	7	;
JUMP_STATEMENT	1425:2	1425:12	6	return ( 0 ) ;
KEYWORD	1425:2	1425:2	7	return
LEAF_NODE	1425:2	1425:2	8	return
DESTINATION	1425:9	1425:9	7	( 0 )
EXPR	1425:9	1425:11	8	( 0 )
LEAF_NODE	1425:9	1425:9	9	(
FIELD	1425:10	1425:10	9	0
LEAF_NODE	1425:10	1425:10	10	0
LEAF_NODE	1425:11	1425:11	9	)
LEAF_NODE	1425:12	1425:12	7	;
LEAF_NODE	1426:1	1426:1	5	}
JUMP_STATEMENT	1427:1	1427:11	3	return ( 1 ) ;
KEYWORD	1427:1	1427:1	4	return
LEAF_NODE	1427:1	1427:1	5	return
DESTINATION	1427:8	1427:8	4	( 1 )
EXPR	1427:8	1427:10	5	( 1 )
LEAF_NODE	1427:8	1427:8	6	(
FIELD	1427:9	1427:9	6	1
LEAF_NODE	1427:9	1427:9	7	1
LEAF_NODE	1427:10	1427:10	6	)
LEAF_NODE	1427:11	1427:11	4	;
LEAF_NODE	1428:0	1428:0	2	}
FUNCTION_DEF	1430:0	1435:0	1	
RETURN_TYPE	1430:0	1430:7	2	static int
LEAF_NODE	1430:0	1430:0	3	static
TYPE_NAME	1430:7	1430:7	3	int
LEAF_NODE	1430:7	1430:7	4	int
FUNCTION_NAME	1431:0	1431:0	2	LogLuvFixupTags
LEAF_NODE	1431:0	1431:0	3	LogLuvFixupTags
PARAMETER_LIST	1431:15	1431:25	2	( TIFF * tif )
LEAF_NODE	1431:15	1431:15	3	(
PARAMETER_DECL	1431:16	1431:22	3	TIFF * tif
TYPE	1431:16	1431:20	4	TIFF *
TYPE_NAME	1431:16	1431:16	5	TIFF
LEAF_NODE	1431:16	1431:16	6	TIFF
POINTER	1431:20	1431:20	5	*
LEAF_NODE	1431:20	1431:20	6	*
NAME	1431:22	1431:22	4	tif
LEAF_NODE	1431:22	1431:22	5	tif
LEAF_NODE	1431:25	1431:25	3	)
LEAF_NODE	1432:0	1432:0	2	{
STATEMENTS	1433:1	1434:1	2	
EXPR_STATEMENT	1433:1	1433:11	3	( void ) tif ;
EXPR	1433:1	1433:8	4	( void ) tif
LEAF_NODE	1433:1	1433:1	5	(
TYPE_NAME	1433:2	1433:2	5	void
LEAF_NODE	1433:2	1433:2	6	void
LEAF_NODE	1433:6	1433:6	5	)
FIELD	1433:8	1433:8	5	tif
LEAF_NODE	1433:8	1433:8	6	tif
LEAF_NODE	1433:11	1433:11	4	;
JUMP_STATEMENT	1434:1	1434:11	3	return ( 1 ) ;
KEYWORD	1434:1	1434:1	4	return
LEAF_NODE	1434:1	1434:1	5	return
DESTINATION	1434:8	1434:8	4	( 1 )
EXPR	1434:8	1434:10	5	( 1 )
LEAF_NODE	1434:8	1434:8	6	(
FIELD	1434:9	1434:9	6	1
LEAF_NODE	1434:9	1434:9	7	1
LEAF_NODE	1434:10	1434:10	6	)
LEAF_NODE	1434:11	1434:11	4	;
LEAF_NODE	1435:0	1435:0	2	}
FUNCTION_DEF	1437:0	1497:0	1	
RETURN_TYPE	1437:0	1437:7	2	static int
LEAF_NODE	1437:0	1437:0	3	static
TYPE_NAME	1437:7	1437:7	3	int
LEAF_NODE	1437:7	1437:7	4	int
FUNCTION_NAME	1438:0	1438:0	2	LogLuvSetupDecode
LEAF_NODE	1438:0	1438:0	3	LogLuvSetupDecode
PARAMETER_LIST	1438:17	1438:27	2	( TIFF * tif )
LEAF_NODE	1438:17	1438:17	3	(
PARAMETER_DECL	1438:18	1438:24	3	TIFF * tif
TYPE	1438:18	1438:22	4	TIFF *
TYPE_NAME	1438:18	1438:18	5	TIFF
LEAF_NODE	1438:18	1438:18	6	TIFF
POINTER	1438:22	1438:22	5	*
LEAF_NODE	1438:22	1438:22	6	*
NAME	1438:24	1438:24	4	tif
LEAF_NODE	1438:24	1438:24	5	tif
LEAF_NODE	1438:27	1438:27	3	)
LEAF_NODE	1439:0	1439:0	2	{
STATEMENTS	1440:1	1496:1	2	
LEAF_NODE	1440:1	1440:1	3	static
SIMPLE_DECL	1440:8	1440:49	3	const char [ ] module ; module = "LogLuvSetupDecode" ;
VAR_DECL	1440:8	1440:19	4	const char [ ] module ; module = "LogLuvSetupDecode"
TYPE	1440:8	1440:25	5	const char [ ]
TYPE_NAME	1440:8	1440:14	6	const char
LEAF_NODE	1440:8	1440:8	7	const
LEAF_NODE	1440:14	1440:14	7	char
TYPE_SUFFIX	1440:25	1440:26	6	[ ]
LEAF_NODE	1440:25	1440:25	7	[
LEAF_NODE	1440:26	1440:26	7	]
NAME	1440:19	1440:19	5	module
LEAF_NODE	1440:19	1440:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1440:19	1440:19	5	module = "LogLuvSetupDecode"
ASSIGN	1440:19	1440:30	6	module = "LogLuvSetupDecode"
LVAL	1440:19	1440:19	7	module
NAME	1440:19	1440:19	8	module
LEAF_NODE	1440:19	1440:19	9	module
ASSIGN_OP	1440:28	1440:28	7	=
LEAF_NODE	1440:28	1440:28	8	=
RVAL	1440:30	1440:30	7	"LogLuvSetupDecode"
FIELD	1440:30	1440:30	8	"LogLuvSetupDecode"
LEAF_NODE	1440:30	1440:30	9	"LogLuvSetupDecode"
LEAF_NODE	1440:49	1440:49	4	;
SIMPLE_DECL	1441:1	1441:36	3	LogLuvState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	1441:1	1441:14	4	LogLuvState * sp ; sp = DecoderState ( tif )
TYPE	1441:1	1441:12	5	LogLuvState *
TYPE_NAME	1441:1	1441:1	6	LogLuvState
LEAF_NODE	1441:1	1441:1	7	LogLuvState
POINTER	1441:12	1441:12	6	*
LEAF_NODE	1441:12	1441:12	7	*
NAME	1441:14	1441:14	5	sp
LEAF_NODE	1441:14	1441:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1441:14	1441:14	5	sp = DecoderState ( tif )
ASSIGN	1441:14	1441:19	6	sp = DecoderState ( tif )
LVAL	1441:14	1441:14	7	sp
NAME	1441:14	1441:14	8	sp
LEAF_NODE	1441:14	1441:14	9	sp
ASSIGN_OP	1441:17	1441:17	7	=
LEAF_NODE	1441:17	1441:17	8	=
RVAL	1441:19	1441:19	7	DecoderState ( tif )
FUNCTION_CALL	1441:19	1441:35	8	DecoderState ( tif )
CALLEE	1441:19	1441:19	9	DecoderState
LEAF_NODE	1441:19	1441:19	10	DecoderState
LEAF_NODE	1441:31	1441:31	9	(
ARGUMENT	1441:32	1441:32	9	tif
FIELD	1441:32	1441:32	10	tif
LEAF_NODE	1441:32	1441:32	11	tif
LEAF_NODE	1441:35	1441:35	9	)
LEAF_NODE	1441:36	1441:36	4	;
SIMPLE_DECL	1442:1	1442:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1442:1	1442:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1442:1	1442:14	5	TIFFDirectory *
TYPE_NAME	1442:1	1442:1	6	TIFFDirectory
LEAF_NODE	1442:1	1442:1	7	TIFFDirectory
POINTER	1442:14	1442:14	6	*
LEAF_NODE	1442:14	1442:14	7	*
NAME	1442:16	1442:16	5	td
LEAF_NODE	1442:16	1442:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1442:16	1442:16	5	td = & tif -> tif_dir
ASSIGN	1442:16	1442:21	6	td = & tif -> tif_dir
LVAL	1442:16	1442:16	7	td
NAME	1442:16	1442:16	8	td
LEAF_NODE	1442:16	1442:16	9	td
ASSIGN_OP	1442:19	1442:19	7	=
LEAF_NODE	1442:19	1442:19	8	=
RVAL	1442:21	1442:21	7	& tif -> tif_dir
UNARY_EXPR	1442:21	1442:22	8	& tif -> tif_dir
UNARY_OPERATOR	1442:21	1442:21	9	&
LEAF_NODE	1442:21	1442:21	10	&
FIELD	1442:22	1442:27	9	tif -> tif_dir
LEAF_NODE	1442:22	1442:22	10	tif
LEAF_NODE	1442:25	1442:25	10	->
LEAF_NODE	1442:27	1442:27	10	tif_dir
LEAF_NODE	1442:34	1442:34	4	;
EXPR_STATEMENT	1444:1	1444:40	3	tif -> tif_postdecode = _TIFFNoPostDecode ;
EXPR	1444:1	1444:1	4	tif -> tif_postdecode = _TIFFNoPostDecode
ASSIGN	1444:1	1444:23	5	tif -> tif_postdecode = _TIFFNoPostDecode
LVAL	1444:1	1444:1	6	tif -> tif_postdecode
FIELD	1444:1	1444:6	7	tif -> tif_postdecode
LEAF_NODE	1444:1	1444:1	8	tif
LEAF_NODE	1444:4	1444:4	8	->
LEAF_NODE	1444:6	1444:6	8	tif_postdecode
ASSIGN_OP	1444:21	1444:21	6	=
LEAF_NODE	1444:21	1444:21	7	=
RVAL	1444:23	1444:23	6	_TIFFNoPostDecode
FIELD	1444:23	1444:23	7	_TIFFNoPostDecode
LEAF_NODE	1444:23	1444:23	8	_TIFFNoPostDecode
LEAF_NODE	1444:40	1444:40	4	;
SELECTION	1445:1	1445:29	3	
KEYWORD	1445:1	1445:1	4	switch
LEAF_NODE	1445:1	1445:1	5	switch
LEAF_NODE	1445:8	1445:8	4	(
CONDITION	1445:9	1445:9	4	td -> td_photometric
EXPR	1445:9	1445:9	5	td -> td_photometric
FIELD	1445:9	1445:13	6	td -> td_photometric
LEAF_NODE	1445:9	1445:9	7	td
LEAF_NODE	1445:11	1445:11	7	->
LEAF_NODE	1445:13	1445:13	7	td_photometric
LEAF_NODE	1445:27	1445:27	4	)
STATEMENTS	1445:29	1495:1	4	
LEAF_NODE	1445:29	1445:29	5	{
STATEMENTS	1446:1	1494:2	5	
LABEL	1446:1	1446:24	6	case PHOTOMETRIC_LOGLUV :
LEAF_NODE	1446:1	1446:1	7	case
LEAF_NODE	1446:6	1446:6	7	PHOTOMETRIC_LOGLUV
LEAF_NODE	1446:24	1446:24	7	:
SELECTION	1447:2	1448:3	6	
KEYWORD	1447:2	1447:2	7	if
LEAF_NODE	1447:2	1447:2	8	if
LEAF_NODE	1447:5	1447:5	7	(
CONDITION	1447:6	1447:6	7	! LogLuvInitState ( tif )
EXPR	1447:6	1447:6	8	! LogLuvInitState ( tif )
UNARY_EXPR	1447:6	1447:7	9	! LogLuvInitState ( tif )
UNARY_OPERATOR	1447:6	1447:6	10	!
LEAF_NODE	1447:6	1447:6	11	!
FUNCTION_CALL	1447:7	1447:26	10	LogLuvInitState ( tif )
CALLEE	1447:7	1447:7	11	LogLuvInitState
LEAF_NODE	1447:7	1447:7	12	LogLuvInitState
LEAF_NODE	1447:22	1447:22	11	(
ARGUMENT	1447:23	1447:23	11	tif
FIELD	1447:23	1447:23	12	tif
LEAF_NODE	1447:23	1447:23	13	tif
LEAF_NODE	1447:26	1447:26	11	)
LEAF_NODE	1447:27	1447:27	7	)
STATEMENTS	1448:3	1448:3	7	
JUMP_STATEMENT	1448:3	1448:8	8	break DESTINATION ;
KEYWORD	1448:3	1448:3	9	break
LEAF_NODE	1448:3	1448:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	1448:8	1448:8	9	;
SELECTION	1449:2	1449:50	6	
KEYWORD	1449:2	1449:2	7	if
LEAF_NODE	1449:2	1449:2	8	if
LEAF_NODE	1449:5	1449:5	7	(
CONDITION	1449:6	1449:6	7	td -> td_compression == COMPRESSION_SGILOG24
EXPR	1449:6	1449:28	8	td -> td_compression == COMPRESSION_SGILOG24
FIELD	1449:6	1449:10	9	td -> td_compression
LEAF_NODE	1449:6	1449:6	10	td
LEAF_NODE	1449:8	1449:8	10	->
LEAF_NODE	1449:10	1449:10	10	td_compression
EQ_OPERATOR	1449:25	1449:25	9	==
LEAF_NODE	1449:25	1449:25	10	==
FIELD	1449:28	1449:28	9	COMPRESSION_SGILOG24
LEAF_NODE	1449:28	1449:28	10	COMPRESSION_SGILOG24
LEAF_NODE	1449:48	1449:48	7	)
STATEMENTS	1449:50	1462:2	7	
LEAF_NODE	1449:50	1449:50	8	{
STATEMENTS	1450:3	1451:3	8	
EXPR_STATEMENT	1450:3	1450:38	9	tif -> tif_decoderow = LogLuvDecode24 ;
EXPR	1450:3	1450:3	10	tif -> tif_decoderow = LogLuvDecode24
ASSIGN	1450:3	1450:24	11	tif -> tif_decoderow = LogLuvDecode24
LVAL	1450:3	1450:3	12	tif -> tif_decoderow
FIELD	1450:3	1450:8	13	tif -> tif_decoderow
LEAF_NODE	1450:3	1450:3	14	tif
LEAF_NODE	1450:6	1450:6	14	->
LEAF_NODE	1450:8	1450:8	14	tif_decoderow
ASSIGN_OP	1450:22	1450:22	12	=
LEAF_NODE	1450:22	1450:22	13	=
RVAL	1450:24	1450:24	12	LogLuvDecode24
FIELD	1450:24	1450:24	13	LogLuvDecode24
LEAF_NODE	1450:24	1450:24	14	LogLuvDecode24
LEAF_NODE	1450:38	1450:38	10	;
SELECTION	1451:3	1451:29	9	
KEYWORD	1451:3	1451:3	10	switch
LEAF_NODE	1451:3	1451:3	11	switch
LEAF_NODE	1451:10	1451:10	10	(
CONDITION	1451:11	1451:11	10	sp -> user_datafmt
EXPR	1451:11	1451:11	11	sp -> user_datafmt
FIELD	1451:11	1451:15	12	sp -> user_datafmt
LEAF_NODE	1451:11	1451:11	13	sp
LEAF_NODE	1451:13	1451:13	13	->
LEAF_NODE	1451:15	1451:15	13	user_datafmt
LEAF_NODE	1451:27	1451:27	10	)
STATEMENTS	1451:29	1461:3	10	
LEAF_NODE	1451:29	1451:29	11	{
STATEMENTS	1452:3	1460:4	11	
LABEL	1452:3	1452:27	12	case SGILOGDATAFMT_FLOAT :
LEAF_NODE	1452:3	1452:3	13	case
LEAF_NODE	1452:8	1452:8	13	SGILOGDATAFMT_FLOAT
LEAF_NODE	1452:27	1452:27	13	:
EXPR_STATEMENT	1453:4	1453:26	12	sp -> tfunc = Luv24toXYZ ;
EXPR	1453:4	1453:4	13	sp -> tfunc = Luv24toXYZ
ASSIGN	1453:4	1453:16	14	sp -> tfunc = Luv24toXYZ
LVAL	1453:4	1453:4	15	sp -> tfunc
FIELD	1453:4	1453:8	16	sp -> tfunc
LEAF_NODE	1453:4	1453:4	17	sp
LEAF_NODE	1453:6	1453:6	17	->
LEAF_NODE	1453:8	1453:8	17	tfunc
ASSIGN_OP	1453:14	1453:14	15	=
LEAF_NODE	1453:14	1453:14	16	=
RVAL	1453:16	1453:16	15	Luv24toXYZ
FIELD	1453:16	1453:16	16	Luv24toXYZ
LEAF_NODE	1453:16	1453:16	17	Luv24toXYZ
LEAF_NODE	1453:26	1453:26	13	;
JUMP_STATEMENT	1454:4	1454:9	12	break DESTINATION ;
KEYWORD	1454:4	1454:4	13	break
LEAF_NODE	1454:4	1454:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1454:9	1454:9	13	;
LABEL	1455:3	1455:27	12	case SGILOGDATAFMT_16BIT :
LEAF_NODE	1455:3	1455:3	13	case
LEAF_NODE	1455:8	1455:8	13	SGILOGDATAFMT_16BIT
LEAF_NODE	1455:27	1455:27	13	:
EXPR_STATEMENT	1456:4	1456:28	12	sp -> tfunc = Luv24toLuv48 ;
EXPR	1456:4	1456:4	13	sp -> tfunc = Luv24toLuv48
ASSIGN	1456:4	1456:16	14	sp -> tfunc = Luv24toLuv48
LVAL	1456:4	1456:4	15	sp -> tfunc
FIELD	1456:4	1456:8	16	sp -> tfunc
LEAF_NODE	1456:4	1456:4	17	sp
LEAF_NODE	1456:6	1456:6	17	->
LEAF_NODE	1456:8	1456:8	17	tfunc
ASSIGN_OP	1456:14	1456:14	15	=
LEAF_NODE	1456:14	1456:14	16	=
RVAL	1456:16	1456:16	15	Luv24toLuv48
FIELD	1456:16	1456:16	16	Luv24toLuv48
LEAF_NODE	1456:16	1456:16	17	Luv24toLuv48
LEAF_NODE	1456:28	1456:28	13	;
JUMP_STATEMENT	1457:4	1457:9	12	break DESTINATION ;
KEYWORD	1457:4	1457:4	13	break
LEAF_NODE	1457:4	1457:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1457:9	1457:9	13	;
LABEL	1458:3	1458:26	12	case SGILOGDATAFMT_8BIT :
LEAF_NODE	1458:3	1458:3	13	case
LEAF_NODE	1458:8	1458:8	13	SGILOGDATAFMT_8BIT
LEAF_NODE	1458:26	1458:26	13	:
EXPR_STATEMENT	1459:4	1459:26	12	sp -> tfunc = Luv24toRGB ;
EXPR	1459:4	1459:4	13	sp -> tfunc = Luv24toRGB
ASSIGN	1459:4	1459:16	14	sp -> tfunc = Luv24toRGB
LVAL	1459:4	1459:4	15	sp -> tfunc
FIELD	1459:4	1459:8	16	sp -> tfunc
LEAF_NODE	1459:4	1459:4	17	sp
LEAF_NODE	1459:6	1459:6	17	->
LEAF_NODE	1459:8	1459:8	17	tfunc
ASSIGN_OP	1459:14	1459:14	15	=
LEAF_NODE	1459:14	1459:14	16	=
RVAL	1459:16	1459:16	15	Luv24toRGB
FIELD	1459:16	1459:16	16	Luv24toRGB
LEAF_NODE	1459:16	1459:16	17	Luv24toRGB
LEAF_NODE	1459:26	1459:26	13	;
JUMP_STATEMENT	1460:4	1460:9	12	break DESTINATION ;
KEYWORD	1460:4	1460:4	13	break
LEAF_NODE	1460:4	1460:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1460:9	1460:9	13	;
LEAF_NODE	1461:3	1461:3	11	}
LEAF_NODE	1462:2	1462:2	8	}
SELECTION	1462:4	1462:9	6	
KEYWORD	1462:4	1462:4	7	else
LEAF_NODE	1462:4	1462:4	8	else
STATEMENTS	1462:9	1475:2	7	
LEAF_NODE	1462:9	1462:9	8	{
STATEMENTS	1463:3	1464:3	8	
EXPR_STATEMENT	1463:3	1463:38	9	tif -> tif_decoderow = LogLuvDecode32 ;
EXPR	1463:3	1463:3	10	tif -> tif_decoderow = LogLuvDecode32
ASSIGN	1463:3	1463:24	11	tif -> tif_decoderow = LogLuvDecode32
LVAL	1463:3	1463:3	12	tif -> tif_decoderow
FIELD	1463:3	1463:8	13	tif -> tif_decoderow
LEAF_NODE	1463:3	1463:3	14	tif
LEAF_NODE	1463:6	1463:6	14	->
LEAF_NODE	1463:8	1463:8	14	tif_decoderow
ASSIGN_OP	1463:22	1463:22	12	=
LEAF_NODE	1463:22	1463:22	13	=
RVAL	1463:24	1463:24	12	LogLuvDecode32
FIELD	1463:24	1463:24	13	LogLuvDecode32
LEAF_NODE	1463:24	1463:24	14	LogLuvDecode32
LEAF_NODE	1463:38	1463:38	10	;
SELECTION	1464:3	1464:29	9	
KEYWORD	1464:3	1464:3	10	switch
LEAF_NODE	1464:3	1464:3	11	switch
LEAF_NODE	1464:10	1464:10	10	(
CONDITION	1464:11	1464:11	10	sp -> user_datafmt
EXPR	1464:11	1464:11	11	sp -> user_datafmt
FIELD	1464:11	1464:15	12	sp -> user_datafmt
LEAF_NODE	1464:11	1464:11	13	sp
LEAF_NODE	1464:13	1464:13	13	->
LEAF_NODE	1464:15	1464:15	13	user_datafmt
LEAF_NODE	1464:27	1464:27	10	)
STATEMENTS	1464:29	1474:3	10	
LEAF_NODE	1464:29	1464:29	11	{
STATEMENTS	1465:3	1473:4	11	
LABEL	1465:3	1465:27	12	case SGILOGDATAFMT_FLOAT :
LEAF_NODE	1465:3	1465:3	13	case
LEAF_NODE	1465:8	1465:8	13	SGILOGDATAFMT_FLOAT
LEAF_NODE	1465:27	1465:27	13	:
EXPR_STATEMENT	1466:4	1466:26	12	sp -> tfunc = Luv32toXYZ ;
EXPR	1466:4	1466:4	13	sp -> tfunc = Luv32toXYZ
ASSIGN	1466:4	1466:16	14	sp -> tfunc = Luv32toXYZ
LVAL	1466:4	1466:4	15	sp -> tfunc
FIELD	1466:4	1466:8	16	sp -> tfunc
LEAF_NODE	1466:4	1466:4	17	sp
LEAF_NODE	1466:6	1466:6	17	->
LEAF_NODE	1466:8	1466:8	17	tfunc
ASSIGN_OP	1466:14	1466:14	15	=
LEAF_NODE	1466:14	1466:14	16	=
RVAL	1466:16	1466:16	15	Luv32toXYZ
FIELD	1466:16	1466:16	16	Luv32toXYZ
LEAF_NODE	1466:16	1466:16	17	Luv32toXYZ
LEAF_NODE	1466:26	1466:26	13	;
JUMP_STATEMENT	1467:4	1467:9	12	break DESTINATION ;
KEYWORD	1467:4	1467:4	13	break
LEAF_NODE	1467:4	1467:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1467:9	1467:9	13	;
LABEL	1468:3	1468:27	12	case SGILOGDATAFMT_16BIT :
LEAF_NODE	1468:3	1468:3	13	case
LEAF_NODE	1468:8	1468:8	13	SGILOGDATAFMT_16BIT
LEAF_NODE	1468:27	1468:27	13	:
EXPR_STATEMENT	1469:4	1469:28	12	sp -> tfunc = Luv32toLuv48 ;
EXPR	1469:4	1469:4	13	sp -> tfunc = Luv32toLuv48
ASSIGN	1469:4	1469:16	14	sp -> tfunc = Luv32toLuv48
LVAL	1469:4	1469:4	15	sp -> tfunc
FIELD	1469:4	1469:8	16	sp -> tfunc
LEAF_NODE	1469:4	1469:4	17	sp
LEAF_NODE	1469:6	1469:6	17	->
LEAF_NODE	1469:8	1469:8	17	tfunc
ASSIGN_OP	1469:14	1469:14	15	=
LEAF_NODE	1469:14	1469:14	16	=
RVAL	1469:16	1469:16	15	Luv32toLuv48
FIELD	1469:16	1469:16	16	Luv32toLuv48
LEAF_NODE	1469:16	1469:16	17	Luv32toLuv48
LEAF_NODE	1469:28	1469:28	13	;
JUMP_STATEMENT	1470:4	1470:9	12	break DESTINATION ;
KEYWORD	1470:4	1470:4	13	break
LEAF_NODE	1470:4	1470:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1470:9	1470:9	13	;
LABEL	1471:3	1471:26	12	case SGILOGDATAFMT_8BIT :
LEAF_NODE	1471:3	1471:3	13	case
LEAF_NODE	1471:8	1471:8	13	SGILOGDATAFMT_8BIT
LEAF_NODE	1471:26	1471:26	13	:
EXPR_STATEMENT	1472:4	1472:26	12	sp -> tfunc = Luv32toRGB ;
EXPR	1472:4	1472:4	13	sp -> tfunc = Luv32toRGB
ASSIGN	1472:4	1472:16	14	sp -> tfunc = Luv32toRGB
LVAL	1472:4	1472:4	15	sp -> tfunc
FIELD	1472:4	1472:8	16	sp -> tfunc
LEAF_NODE	1472:4	1472:4	17	sp
LEAF_NODE	1472:6	1472:6	17	->
LEAF_NODE	1472:8	1472:8	17	tfunc
ASSIGN_OP	1472:14	1472:14	15	=
LEAF_NODE	1472:14	1472:14	16	=
RVAL	1472:16	1472:16	15	Luv32toRGB
FIELD	1472:16	1472:16	16	Luv32toRGB
LEAF_NODE	1472:16	1472:16	17	Luv32toRGB
LEAF_NODE	1472:26	1472:26	13	;
JUMP_STATEMENT	1473:4	1473:9	12	break DESTINATION ;
KEYWORD	1473:4	1473:4	13	break
LEAF_NODE	1473:4	1473:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1473:9	1473:9	13	;
LEAF_NODE	1474:3	1474:3	11	}
LEAF_NODE	1475:2	1475:2	8	}
JUMP_STATEMENT	1476:2	1476:12	6	return ( 1 ) ;
KEYWORD	1476:2	1476:2	7	return
LEAF_NODE	1476:2	1476:2	8	return
DESTINATION	1476:9	1476:9	7	( 1 )
EXPR	1476:9	1476:11	8	( 1 )
LEAF_NODE	1476:9	1476:9	9	(
FIELD	1476:10	1476:10	9	1
LEAF_NODE	1476:10	1476:10	10	1
LEAF_NODE	1476:11	1476:11	9	)
LEAF_NODE	1476:12	1476:12	7	;
LABEL	1477:1	1477:22	6	case PHOTOMETRIC_LOGL :
LEAF_NODE	1477:1	1477:1	7	case
LEAF_NODE	1477:6	1477:6	7	PHOTOMETRIC_LOGL
LEAF_NODE	1477:22	1477:22	7	:
SELECTION	1478:2	1479:3	6	
KEYWORD	1478:2	1478:2	7	if
LEAF_NODE	1478:2	1478:2	8	if
LEAF_NODE	1478:5	1478:5	7	(
CONDITION	1478:6	1478:6	7	! LogL16InitState ( tif )
EXPR	1478:6	1478:6	8	! LogL16InitState ( tif )
UNARY_EXPR	1478:6	1478:7	9	! LogL16InitState ( tif )
UNARY_OPERATOR	1478:6	1478:6	10	!
LEAF_NODE	1478:6	1478:6	11	!
FUNCTION_CALL	1478:7	1478:26	10	LogL16InitState ( tif )
CALLEE	1478:7	1478:7	11	LogL16InitState
LEAF_NODE	1478:7	1478:7	12	LogL16InitState
LEAF_NODE	1478:22	1478:22	11	(
ARGUMENT	1478:23	1478:23	11	tif
FIELD	1478:23	1478:23	12	tif
LEAF_NODE	1478:23	1478:23	13	tif
LEAF_NODE	1478:26	1478:26	11	)
LEAF_NODE	1478:27	1478:27	7	)
STATEMENTS	1479:3	1479:3	7	
JUMP_STATEMENT	1479:3	1479:8	8	break DESTINATION ;
KEYWORD	1479:3	1479:3	9	break
LEAF_NODE	1479:3	1479:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	1479:8	1479:8	9	;
EXPR_STATEMENT	1480:2	1480:35	6	tif -> tif_decoderow = LogL16Decode ;
EXPR	1480:2	1480:2	7	tif -> tif_decoderow = LogL16Decode
ASSIGN	1480:2	1480:23	8	tif -> tif_decoderow = LogL16Decode
LVAL	1480:2	1480:2	9	tif -> tif_decoderow
FIELD	1480:2	1480:7	10	tif -> tif_decoderow
LEAF_NODE	1480:2	1480:2	11	tif
LEAF_NODE	1480:5	1480:5	11	->
LEAF_NODE	1480:7	1480:7	11	tif_decoderow
ASSIGN_OP	1480:21	1480:21	9	=
LEAF_NODE	1480:21	1480:21	10	=
RVAL	1480:23	1480:23	9	LogL16Decode
FIELD	1480:23	1480:23	10	LogL16Decode
LEAF_NODE	1480:23	1480:23	11	LogL16Decode
LEAF_NODE	1480:35	1480:35	7	;
SELECTION	1481:2	1481:28	6	
KEYWORD	1481:2	1481:2	7	switch
LEAF_NODE	1481:2	1481:2	8	switch
LEAF_NODE	1481:9	1481:9	7	(
CONDITION	1481:10	1481:10	7	sp -> user_datafmt
EXPR	1481:10	1481:10	8	sp -> user_datafmt
FIELD	1481:10	1481:14	9	sp -> user_datafmt
LEAF_NODE	1481:10	1481:10	10	sp
LEAF_NODE	1481:12	1481:12	10	->
LEAF_NODE	1481:14	1481:14	10	user_datafmt
LEAF_NODE	1481:26	1481:26	7	)
STATEMENTS	1481:28	1488:2	7	
LEAF_NODE	1481:28	1481:28	8	{
STATEMENTS	1482:2	1487:3	8	
LABEL	1482:2	1482:26	9	case SGILOGDATAFMT_FLOAT :
LEAF_NODE	1482:2	1482:2	10	case
LEAF_NODE	1482:7	1482:7	10	SGILOGDATAFMT_FLOAT
LEAF_NODE	1482:26	1482:26	10	:
EXPR_STATEMENT	1483:3	1483:21	9	sp -> tfunc = L16toY ;
EXPR	1483:3	1483:3	10	sp -> tfunc = L16toY
ASSIGN	1483:3	1483:15	11	sp -> tfunc = L16toY
LVAL	1483:3	1483:3	12	sp -> tfunc
FIELD	1483:3	1483:7	13	sp -> tfunc
LEAF_NODE	1483:3	1483:3	14	sp
LEAF_NODE	1483:5	1483:5	14	->
LEAF_NODE	1483:7	1483:7	14	tfunc
ASSIGN_OP	1483:13	1483:13	12	=
LEAF_NODE	1483:13	1483:13	13	=
RVAL	1483:15	1483:15	12	L16toY
FIELD	1483:15	1483:15	13	L16toY
LEAF_NODE	1483:15	1483:15	14	L16toY
LEAF_NODE	1483:21	1483:21	10	;
JUMP_STATEMENT	1484:3	1484:8	9	break DESTINATION ;
KEYWORD	1484:3	1484:3	10	break
LEAF_NODE	1484:3	1484:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1484:8	1484:8	10	;
LABEL	1485:2	1485:25	9	case SGILOGDATAFMT_8BIT :
LEAF_NODE	1485:2	1485:2	10	case
LEAF_NODE	1485:7	1485:7	10	SGILOGDATAFMT_8BIT
LEAF_NODE	1485:25	1485:25	10	:
EXPR_STATEMENT	1486:3	1486:23	9	sp -> tfunc = L16toGry ;
EXPR	1486:3	1486:3	10	sp -> tfunc = L16toGry
ASSIGN	1486:3	1486:15	11	sp -> tfunc = L16toGry
LVAL	1486:3	1486:3	12	sp -> tfunc
FIELD	1486:3	1486:7	13	sp -> tfunc
LEAF_NODE	1486:3	1486:3	14	sp
LEAF_NODE	1486:5	1486:5	14	->
LEAF_NODE	1486:7	1486:7	14	tfunc
ASSIGN_OP	1486:13	1486:13	12	=
LEAF_NODE	1486:13	1486:13	13	=
RVAL	1486:15	1486:15	12	L16toGry
FIELD	1486:15	1486:15	13	L16toGry
LEAF_NODE	1486:15	1486:15	14	L16toGry
LEAF_NODE	1486:23	1486:23	10	;
JUMP_STATEMENT	1487:3	1487:8	9	break DESTINATION ;
KEYWORD	1487:3	1487:3	10	break
LEAF_NODE	1487:3	1487:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1487:8	1487:8	10	;
LEAF_NODE	1488:2	1488:2	8	}
JUMP_STATEMENT	1489:2	1489:12	6	return ( 1 ) ;
KEYWORD	1489:2	1489:2	7	return
LEAF_NODE	1489:2	1489:2	8	return
DESTINATION	1489:9	1489:9	7	( 1 )
EXPR	1489:9	1489:11	8	( 1 )
LEAF_NODE	1489:9	1489:9	9	(
FIELD	1489:10	1489:10	9	1
LEAF_NODE	1489:10	1489:10	10	1
LEAF_NODE	1489:11	1489:11	9	)
LEAF_NODE	1489:12	1489:12	7	;
LABEL	1490:1	1490:8	6	default :
LEAF_NODE	1490:1	1490:1	7	default
LEAF_NODE	1490:8	1490:8	7	:
EXPR_STATEMENT	1491:2	1493:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Inappropriate photometric interpretation %d for SGILog compression; %s" , td -> td_photometric , "must be either LogLUV or LogL" ) ;
EXPR	1491:2	1491:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Inappropriate photometric interpretation %d for SGILog compression; %s" , td -> td_photometric , "must be either LogLUV or LogL" )
FUNCTION_CALL	1491:2	1493:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Inappropriate photometric interpretation %d for SGILog compression; %s" , td -> td_photometric , "must be either LogLUV or LogL" )
CALLEE	1491:2	1491:2	9	TIFFErrorExt
LEAF_NODE	1491:2	1491:2	10	TIFFErrorExt
LEAF_NODE	1491:14	1491:14	9	(
ARGUMENT	1491:15	1491:15	9	tif -> tif_clientdata
FIELD	1491:15	1491:20	10	tif -> tif_clientdata
LEAF_NODE	1491:15	1491:15	11	tif
LEAF_NODE	1491:18	1491:18	11	->
LEAF_NODE	1491:20	1491:20	11	tif_clientdata
LEAF_NODE	1491:34	1491:34	9	,
ARGUMENT	1491:36	1491:36	9	module
FIELD	1491:36	1491:36	10	module
LEAF_NODE	1491:36	1491:36	11	module
LEAF_NODE	1491:42	1491:42	9	,
ARGUMENT	1492:6	1492:6	9	"Inappropriate photometric interpretation %d for SGILog compression; %s"
FIELD	1492:6	1492:6	10	"Inappropriate photometric interpretation %d for SGILog compression; %s"
LEAF_NODE	1492:6	1492:6	11	"Inappropriate photometric interpretation %d for SGILog compression; %s"
LEAF_NODE	1492:78	1492:78	9	,
ARGUMENT	1493:6	1493:6	9	td -> td_photometric
FIELD	1493:6	1493:10	10	td -> td_photometric
LEAF_NODE	1493:6	1493:6	11	td
LEAF_NODE	1493:8	1493:8	11	->
LEAF_NODE	1493:10	1493:10	11	td_photometric
LEAF_NODE	1493:24	1493:24	9	,
ARGUMENT	1493:26	1493:26	9	"must be either LogLUV or LogL"
FIELD	1493:26	1493:26	10	"must be either LogLUV or LogL"
LEAF_NODE	1493:26	1493:26	11	"must be either LogLUV or LogL"
LEAF_NODE	1493:57	1493:57	9	)
LEAF_NODE	1493:58	1493:58	7	;
JUMP_STATEMENT	1494:2	1494:7	6	break DESTINATION ;
KEYWORD	1494:2	1494:2	7	break
LEAF_NODE	1494:2	1494:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1494:7	1494:7	7	;
LEAF_NODE	1495:1	1495:1	5	}
JUMP_STATEMENT	1496:1	1496:11	3	return ( 0 ) ;
KEYWORD	1496:1	1496:1	4	return
LEAF_NODE	1496:1	1496:1	5	return
DESTINATION	1496:8	1496:8	4	( 0 )
EXPR	1496:8	1496:10	5	( 0 )
LEAF_NODE	1496:8	1496:8	6	(
FIELD	1496:9	1496:9	6	0
LEAF_NODE	1496:9	1496:9	7	0
LEAF_NODE	1496:10	1496:10	6	)
LEAF_NODE	1496:11	1496:11	4	;
LEAF_NODE	1497:0	1497:0	2	}
FUNCTION_DEF	1499:0	1567:0	1	
RETURN_TYPE	1499:0	1499:7	2	static int
LEAF_NODE	1499:0	1499:0	3	static
TYPE_NAME	1499:7	1499:7	3	int
LEAF_NODE	1499:7	1499:7	4	int
FUNCTION_NAME	1500:0	1500:0	2	LogLuvSetupEncode
LEAF_NODE	1500:0	1500:0	3	LogLuvSetupEncode
PARAMETER_LIST	1500:17	1500:27	2	( TIFF * tif )
LEAF_NODE	1500:17	1500:17	3	(
PARAMETER_DECL	1500:18	1500:24	3	TIFF * tif
TYPE	1500:18	1500:22	4	TIFF *
TYPE_NAME	1500:18	1500:18	5	TIFF
LEAF_NODE	1500:18	1500:18	6	TIFF
POINTER	1500:22	1500:22	5	*
LEAF_NODE	1500:22	1500:22	6	*
NAME	1500:24	1500:24	4	tif
LEAF_NODE	1500:24	1500:24	5	tif
LEAF_NODE	1500:27	1500:27	3	)
LEAF_NODE	1501:0	1501:0	2	{
STATEMENTS	1502:1	1566:1	2	
LEAF_NODE	1502:1	1502:1	3	static
SIMPLE_DECL	1502:8	1502:49	3	const char [ ] module ; module = "LogLuvSetupEncode" ;
VAR_DECL	1502:8	1502:19	4	const char [ ] module ; module = "LogLuvSetupEncode"
TYPE	1502:8	1502:25	5	const char [ ]
TYPE_NAME	1502:8	1502:14	6	const char
LEAF_NODE	1502:8	1502:8	7	const
LEAF_NODE	1502:14	1502:14	7	char
TYPE_SUFFIX	1502:25	1502:26	6	[ ]
LEAF_NODE	1502:25	1502:25	7	[
LEAF_NODE	1502:26	1502:26	7	]
NAME	1502:19	1502:19	5	module
LEAF_NODE	1502:19	1502:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1502:19	1502:19	5	module = "LogLuvSetupEncode"
ASSIGN	1502:19	1502:30	6	module = "LogLuvSetupEncode"
LVAL	1502:19	1502:19	7	module
NAME	1502:19	1502:19	8	module
LEAF_NODE	1502:19	1502:19	9	module
ASSIGN_OP	1502:28	1502:28	7	=
LEAF_NODE	1502:28	1502:28	8	=
RVAL	1502:30	1502:30	7	"LogLuvSetupEncode"
FIELD	1502:30	1502:30	8	"LogLuvSetupEncode"
LEAF_NODE	1502:30	1502:30	9	"LogLuvSetupEncode"
LEAF_NODE	1502:49	1502:49	4	;
SIMPLE_DECL	1503:1	1503:36	3	LogLuvState * sp ; sp = EncoderState ( tif ) ;
VAR_DECL	1503:1	1503:14	4	LogLuvState * sp ; sp = EncoderState ( tif )
TYPE	1503:1	1503:12	5	LogLuvState *
TYPE_NAME	1503:1	1503:1	6	LogLuvState
LEAF_NODE	1503:1	1503:1	7	LogLuvState
POINTER	1503:12	1503:12	6	*
LEAF_NODE	1503:12	1503:12	7	*
NAME	1503:14	1503:14	5	sp
LEAF_NODE	1503:14	1503:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1503:14	1503:14	5	sp = EncoderState ( tif )
ASSIGN	1503:14	1503:19	6	sp = EncoderState ( tif )
LVAL	1503:14	1503:14	7	sp
NAME	1503:14	1503:14	8	sp
LEAF_NODE	1503:14	1503:14	9	sp
ASSIGN_OP	1503:17	1503:17	7	=
LEAF_NODE	1503:17	1503:17	8	=
RVAL	1503:19	1503:19	7	EncoderState ( tif )
FUNCTION_CALL	1503:19	1503:35	8	EncoderState ( tif )
CALLEE	1503:19	1503:19	9	EncoderState
LEAF_NODE	1503:19	1503:19	10	EncoderState
LEAF_NODE	1503:31	1503:31	9	(
ARGUMENT	1503:32	1503:32	9	tif
FIELD	1503:32	1503:32	10	tif
LEAF_NODE	1503:32	1503:32	11	tif
LEAF_NODE	1503:35	1503:35	9	)
LEAF_NODE	1503:36	1503:36	4	;
SIMPLE_DECL	1504:1	1504:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1504:1	1504:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1504:1	1504:14	5	TIFFDirectory *
TYPE_NAME	1504:1	1504:1	6	TIFFDirectory
LEAF_NODE	1504:1	1504:1	7	TIFFDirectory
POINTER	1504:14	1504:14	6	*
LEAF_NODE	1504:14	1504:14	7	*
NAME	1504:16	1504:16	5	td
LEAF_NODE	1504:16	1504:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1504:16	1504:16	5	td = & tif -> tif_dir
ASSIGN	1504:16	1504:21	6	td = & tif -> tif_dir
LVAL	1504:16	1504:16	7	td
NAME	1504:16	1504:16	8	td
LEAF_NODE	1504:16	1504:16	9	td
ASSIGN_OP	1504:19	1504:19	7	=
LEAF_NODE	1504:19	1504:19	8	=
RVAL	1504:21	1504:21	7	& tif -> tif_dir
UNARY_EXPR	1504:21	1504:22	8	& tif -> tif_dir
UNARY_OPERATOR	1504:21	1504:21	9	&
LEAF_NODE	1504:21	1504:21	10	&
FIELD	1504:22	1504:27	9	tif -> tif_dir
LEAF_NODE	1504:22	1504:22	10	tif
LEAF_NODE	1504:25	1504:25	10	->
LEAF_NODE	1504:27	1504:27	10	tif_dir
LEAF_NODE	1504:34	1504:34	4	;
SELECTION	1506:1	1506:29	3	
KEYWORD	1506:1	1506:1	4	switch
LEAF_NODE	1506:1	1506:1	5	switch
LEAF_NODE	1506:8	1506:8	4	(
CONDITION	1506:9	1506:9	4	td -> td_photometric
EXPR	1506:9	1506:9	5	td -> td_photometric
FIELD	1506:9	1506:13	6	td -> td_photometric
LEAF_NODE	1506:9	1506:9	7	td
LEAF_NODE	1506:11	1506:11	7	->
LEAF_NODE	1506:13	1506:13	7	td_photometric
LEAF_NODE	1506:27	1506:27	4	)
STATEMENTS	1506:29	1559:1	4	
LEAF_NODE	1506:29	1506:29	5	{
STATEMENTS	1507:1	1558:2	5	
LABEL	1507:1	1507:24	6	case PHOTOMETRIC_LOGLUV :
LEAF_NODE	1507:1	1507:1	7	case
LEAF_NODE	1507:6	1507:6	7	PHOTOMETRIC_LOGLUV
LEAF_NODE	1507:24	1507:24	7	:
SELECTION	1508:2	1509:3	6	
KEYWORD	1508:2	1508:2	7	if
LEAF_NODE	1508:2	1508:2	8	if
LEAF_NODE	1508:5	1508:5	7	(
CONDITION	1508:6	1508:6	7	! LogLuvInitState ( tif )
EXPR	1508:6	1508:6	8	! LogLuvInitState ( tif )
UNARY_EXPR	1508:6	1508:7	9	! LogLuvInitState ( tif )
UNARY_OPERATOR	1508:6	1508:6	10	!
LEAF_NODE	1508:6	1508:6	11	!
FUNCTION_CALL	1508:7	1508:26	10	LogLuvInitState ( tif )
CALLEE	1508:7	1508:7	11	LogLuvInitState
LEAF_NODE	1508:7	1508:7	12	LogLuvInitState
LEAF_NODE	1508:22	1508:22	11	(
ARGUMENT	1508:23	1508:23	11	tif
FIELD	1508:23	1508:23	12	tif
LEAF_NODE	1508:23	1508:23	13	tif
LEAF_NODE	1508:26	1508:26	11	)
LEAF_NODE	1508:27	1508:27	7	)
STATEMENTS	1509:3	1509:3	7	
JUMP_STATEMENT	1509:3	1509:13	8	return ( 0 ) ;
KEYWORD	1509:3	1509:3	9	return
LEAF_NODE	1509:3	1509:3	10	return
DESTINATION	1509:10	1509:10	9	( 0 )
EXPR	1509:10	1509:12	10	( 0 )
LEAF_NODE	1509:10	1509:10	11	(
FIELD	1509:11	1509:11	11	0
LEAF_NODE	1509:11	1509:11	12	0
LEAF_NODE	1509:12	1509:12	11	)
LEAF_NODE	1509:13	1509:13	9	;
SELECTION	1510:2	1510:50	6	
KEYWORD	1510:2	1510:2	7	if
LEAF_NODE	1510:2	1510:2	8	if
LEAF_NODE	1510:5	1510:5	7	(
CONDITION	1510:6	1510:6	7	td -> td_compression == COMPRESSION_SGILOG24
EXPR	1510:6	1510:28	8	td -> td_compression == COMPRESSION_SGILOG24
FIELD	1510:6	1510:10	9	td -> td_compression
LEAF_NODE	1510:6	1510:6	10	td
LEAF_NODE	1510:8	1510:8	10	->
LEAF_NODE	1510:10	1510:10	10	td_compression
EQ_OPERATOR	1510:25	1510:25	9	==
LEAF_NODE	1510:25	1510:25	10	==
FIELD	1510:28	1510:28	9	COMPRESSION_SGILOG24
LEAF_NODE	1510:28	1510:28	10	COMPRESSION_SGILOG24
LEAF_NODE	1510:48	1510:48	7	)
STATEMENTS	1510:50	1524:2	7	
LEAF_NODE	1510:50	1510:50	8	{
STATEMENTS	1511:3	1512:3	8	
EXPR_STATEMENT	1511:3	1511:38	9	tif -> tif_encoderow = LogLuvEncode24 ;
EXPR	1511:3	1511:3	10	tif -> tif_encoderow = LogLuvEncode24
ASSIGN	1511:3	1511:24	11	tif -> tif_encoderow = LogLuvEncode24
LVAL	1511:3	1511:3	12	tif -> tif_encoderow
FIELD	1511:3	1511:8	13	tif -> tif_encoderow
LEAF_NODE	1511:3	1511:3	14	tif
LEAF_NODE	1511:6	1511:6	14	->
LEAF_NODE	1511:8	1511:8	14	tif_encoderow
ASSIGN_OP	1511:22	1511:22	12	=
LEAF_NODE	1511:22	1511:22	13	=
RVAL	1511:24	1511:24	12	LogLuvEncode24
FIELD	1511:24	1511:24	13	LogLuvEncode24
LEAF_NODE	1511:24	1511:24	14	LogLuvEncode24
LEAF_NODE	1511:38	1511:38	10	;
SELECTION	1512:3	1512:29	9	
KEYWORD	1512:3	1512:3	10	switch
LEAF_NODE	1512:3	1512:3	11	switch
LEAF_NODE	1512:10	1512:10	10	(
CONDITION	1512:11	1512:11	10	sp -> user_datafmt
EXPR	1512:11	1512:11	11	sp -> user_datafmt
FIELD	1512:11	1512:15	12	sp -> user_datafmt
LEAF_NODE	1512:11	1512:11	13	sp
LEAF_NODE	1512:13	1512:13	13	->
LEAF_NODE	1512:15	1512:15	13	user_datafmt
LEAF_NODE	1512:27	1512:27	10	)
STATEMENTS	1512:29	1523:3	10	
LEAF_NODE	1512:29	1512:29	11	{
STATEMENTS	1513:3	1522:4	11	
LABEL	1513:3	1513:27	12	case SGILOGDATAFMT_FLOAT :
LEAF_NODE	1513:3	1513:3	13	case
LEAF_NODE	1513:8	1513:8	13	SGILOGDATAFMT_FLOAT
LEAF_NODE	1513:27	1513:27	13	:
EXPR_STATEMENT	1514:4	1514:28	12	sp -> tfunc = Luv24fromXYZ ;
EXPR	1514:4	1514:4	13	sp -> tfunc = Luv24fromXYZ
ASSIGN	1514:4	1514:16	14	sp -> tfunc = Luv24fromXYZ
LVAL	1514:4	1514:4	15	sp -> tfunc
FIELD	1514:4	1514:8	16	sp -> tfunc
LEAF_NODE	1514:4	1514:4	17	sp
LEAF_NODE	1514:6	1514:6	17	->
LEAF_NODE	1514:8	1514:8	17	tfunc
ASSIGN_OP	1514:14	1514:14	15	=
LEAF_NODE	1514:14	1514:14	16	=
RVAL	1514:16	1514:16	15	Luv24fromXYZ
FIELD	1514:16	1514:16	16	Luv24fromXYZ
LEAF_NODE	1514:16	1514:16	17	Luv24fromXYZ
LEAF_NODE	1514:28	1514:28	13	;
JUMP_STATEMENT	1515:4	1515:9	12	break DESTINATION ;
KEYWORD	1515:4	1515:4	13	break
LEAF_NODE	1515:4	1515:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1515:9	1515:9	13	;
LABEL	1516:3	1516:27	12	case SGILOGDATAFMT_16BIT :
LEAF_NODE	1516:3	1516:3	13	case
LEAF_NODE	1516:8	1516:8	13	SGILOGDATAFMT_16BIT
LEAF_NODE	1516:27	1516:27	13	:
EXPR_STATEMENT	1517:4	1517:30	12	sp -> tfunc = Luv24fromLuv48 ;
EXPR	1517:4	1517:4	13	sp -> tfunc = Luv24fromLuv48
ASSIGN	1517:4	1517:16	14	sp -> tfunc = Luv24fromLuv48
LVAL	1517:4	1517:4	15	sp -> tfunc
FIELD	1517:4	1517:8	16	sp -> tfunc
LEAF_NODE	1517:4	1517:4	17	sp
LEAF_NODE	1517:6	1517:6	17	->
LEAF_NODE	1517:8	1517:8	17	tfunc
ASSIGN_OP	1517:14	1517:14	15	=
LEAF_NODE	1517:14	1517:14	16	=
RVAL	1517:16	1517:16	15	Luv24fromLuv48
FIELD	1517:16	1517:16	16	Luv24fromLuv48
LEAF_NODE	1517:16	1517:16	17	Luv24fromLuv48
LEAF_NODE	1517:30	1517:30	13	;
JUMP_STATEMENT	1518:4	1518:9	12	break DESTINATION ;
KEYWORD	1518:4	1518:4	13	break
LEAF_NODE	1518:4	1518:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1518:9	1518:9	13	;
LABEL	1519:3	1519:25	12	case SGILOGDATAFMT_RAW :
LEAF_NODE	1519:3	1519:3	13	case
LEAF_NODE	1519:8	1519:8	13	SGILOGDATAFMT_RAW
LEAF_NODE	1519:25	1519:25	13	:
JUMP_STATEMENT	1520:4	1520:9	12	break DESTINATION ;
KEYWORD	1520:4	1520:4	13	break
LEAF_NODE	1520:4	1520:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1520:9	1520:9	13	;
LABEL	1521:3	1521:10	12	default :
LEAF_NODE	1521:3	1521:3	13	default
LEAF_NODE	1521:10	1521:10	13	:
JUMP_STATEMENT	1522:4	1522:21	12	goto notsupported ;
KEYWORD	1522:4	1522:4	13	goto
LEAF_NODE	1522:4	1522:4	14	goto
DESTINATION	1522:9	1522:9	13	notsupported
LEAF_NODE	1522:9	1522:9	14	notsupported
LEAF_NODE	1522:21	1522:21	13	;
LEAF_NODE	1523:3	1523:3	11	}
LEAF_NODE	1524:2	1524:2	8	}
SELECTION	1524:4	1524:9	6	
KEYWORD	1524:4	1524:4	7	else
LEAF_NODE	1524:4	1524:4	8	else
STATEMENTS	1524:9	1538:2	7	
LEAF_NODE	1524:9	1524:9	8	{
STATEMENTS	1525:3	1526:3	8	
EXPR_STATEMENT	1525:3	1525:38	9	tif -> tif_encoderow = LogLuvEncode32 ;
EXPR	1525:3	1525:3	10	tif -> tif_encoderow = LogLuvEncode32
ASSIGN	1525:3	1525:24	11	tif -> tif_encoderow = LogLuvEncode32
LVAL	1525:3	1525:3	12	tif -> tif_encoderow
FIELD	1525:3	1525:8	13	tif -> tif_encoderow
LEAF_NODE	1525:3	1525:3	14	tif
LEAF_NODE	1525:6	1525:6	14	->
LEAF_NODE	1525:8	1525:8	14	tif_encoderow
ASSIGN_OP	1525:22	1525:22	12	=
LEAF_NODE	1525:22	1525:22	13	=
RVAL	1525:24	1525:24	12	LogLuvEncode32
FIELD	1525:24	1525:24	13	LogLuvEncode32
LEAF_NODE	1525:24	1525:24	14	LogLuvEncode32
LEAF_NODE	1525:38	1525:38	10	;
SELECTION	1526:3	1526:29	9	
KEYWORD	1526:3	1526:3	10	switch
LEAF_NODE	1526:3	1526:3	11	switch
LEAF_NODE	1526:10	1526:10	10	(
CONDITION	1526:11	1526:11	10	sp -> user_datafmt
EXPR	1526:11	1526:11	11	sp -> user_datafmt
FIELD	1526:11	1526:15	12	sp -> user_datafmt
LEAF_NODE	1526:11	1526:11	13	sp
LEAF_NODE	1526:13	1526:13	13	->
LEAF_NODE	1526:15	1526:15	13	user_datafmt
LEAF_NODE	1526:27	1526:27	10	)
STATEMENTS	1526:29	1537:3	10	
LEAF_NODE	1526:29	1526:29	11	{
STATEMENTS	1527:3	1536:4	11	
LABEL	1527:3	1527:27	12	case SGILOGDATAFMT_FLOAT :
LEAF_NODE	1527:3	1527:3	13	case
LEAF_NODE	1527:8	1527:8	13	SGILOGDATAFMT_FLOAT
LEAF_NODE	1527:27	1527:27	13	:
EXPR_STATEMENT	1528:4	1528:28	12	sp -> tfunc = Luv32fromXYZ ;
EXPR	1528:4	1528:4	13	sp -> tfunc = Luv32fromXYZ
ASSIGN	1528:4	1528:16	14	sp -> tfunc = Luv32fromXYZ
LVAL	1528:4	1528:4	15	sp -> tfunc
FIELD	1528:4	1528:8	16	sp -> tfunc
LEAF_NODE	1528:4	1528:4	17	sp
LEAF_NODE	1528:6	1528:6	17	->
LEAF_NODE	1528:8	1528:8	17	tfunc
ASSIGN_OP	1528:14	1528:14	15	=
LEAF_NODE	1528:14	1528:14	16	=
RVAL	1528:16	1528:16	15	Luv32fromXYZ
FIELD	1528:16	1528:16	16	Luv32fromXYZ
LEAF_NODE	1528:16	1528:16	17	Luv32fromXYZ
LEAF_NODE	1528:28	1528:28	13	;
JUMP_STATEMENT	1529:4	1529:9	12	break DESTINATION ;
KEYWORD	1529:4	1529:4	13	break
LEAF_NODE	1529:4	1529:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1529:9	1529:9	13	;
LABEL	1530:3	1530:27	12	case SGILOGDATAFMT_16BIT :
LEAF_NODE	1530:3	1530:3	13	case
LEAF_NODE	1530:8	1530:8	13	SGILOGDATAFMT_16BIT
LEAF_NODE	1530:27	1530:27	13	:
EXPR_STATEMENT	1531:4	1531:30	12	sp -> tfunc = Luv32fromLuv48 ;
EXPR	1531:4	1531:4	13	sp -> tfunc = Luv32fromLuv48
ASSIGN	1531:4	1531:16	14	sp -> tfunc = Luv32fromLuv48
LVAL	1531:4	1531:4	15	sp -> tfunc
FIELD	1531:4	1531:8	16	sp -> tfunc
LEAF_NODE	1531:4	1531:4	17	sp
LEAF_NODE	1531:6	1531:6	17	->
LEAF_NODE	1531:8	1531:8	17	tfunc
ASSIGN_OP	1531:14	1531:14	15	=
LEAF_NODE	1531:14	1531:14	16	=
RVAL	1531:16	1531:16	15	Luv32fromLuv48
FIELD	1531:16	1531:16	16	Luv32fromLuv48
LEAF_NODE	1531:16	1531:16	17	Luv32fromLuv48
LEAF_NODE	1531:30	1531:30	13	;
JUMP_STATEMENT	1532:4	1532:9	12	break DESTINATION ;
KEYWORD	1532:4	1532:4	13	break
LEAF_NODE	1532:4	1532:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1532:9	1532:9	13	;
LABEL	1533:3	1533:25	12	case SGILOGDATAFMT_RAW :
LEAF_NODE	1533:3	1533:3	13	case
LEAF_NODE	1533:8	1533:8	13	SGILOGDATAFMT_RAW
LEAF_NODE	1533:25	1533:25	13	:
JUMP_STATEMENT	1534:4	1534:9	12	break DESTINATION ;
KEYWORD	1534:4	1534:4	13	break
LEAF_NODE	1534:4	1534:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1534:9	1534:9	13	;
LABEL	1535:3	1535:10	12	default :
LEAF_NODE	1535:3	1535:3	13	default
LEAF_NODE	1535:10	1535:10	13	:
JUMP_STATEMENT	1536:4	1536:21	12	goto notsupported ;
KEYWORD	1536:4	1536:4	13	goto
LEAF_NODE	1536:4	1536:4	14	goto
DESTINATION	1536:9	1536:9	13	notsupported
LEAF_NODE	1536:9	1536:9	14	notsupported
LEAF_NODE	1536:21	1536:21	13	;
LEAF_NODE	1537:3	1537:3	11	}
LEAF_NODE	1538:2	1538:2	8	}
JUMP_STATEMENT	1539:2	1539:7	6	break DESTINATION ;
KEYWORD	1539:2	1539:2	7	break
LEAF_NODE	1539:2	1539:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1539:7	1539:7	7	;
LABEL	1540:1	1540:22	6	case PHOTOMETRIC_LOGL :
LEAF_NODE	1540:1	1540:1	7	case
LEAF_NODE	1540:6	1540:6	7	PHOTOMETRIC_LOGL
LEAF_NODE	1540:22	1540:22	7	:
SELECTION	1541:2	1542:3	6	
KEYWORD	1541:2	1541:2	7	if
LEAF_NODE	1541:2	1541:2	8	if
LEAF_NODE	1541:5	1541:5	7	(
CONDITION	1541:6	1541:6	7	! LogL16InitState ( tif )
EXPR	1541:6	1541:6	8	! LogL16InitState ( tif )
UNARY_EXPR	1541:6	1541:7	9	! LogL16InitState ( tif )
UNARY_OPERATOR	1541:6	1541:6	10	!
LEAF_NODE	1541:6	1541:6	11	!
FUNCTION_CALL	1541:7	1541:26	10	LogL16InitState ( tif )
CALLEE	1541:7	1541:7	11	LogL16InitState
LEAF_NODE	1541:7	1541:7	12	LogL16InitState
LEAF_NODE	1541:22	1541:22	11	(
ARGUMENT	1541:23	1541:23	11	tif
FIELD	1541:23	1541:23	12	tif
LEAF_NODE	1541:23	1541:23	13	tif
LEAF_NODE	1541:26	1541:26	11	)
LEAF_NODE	1541:27	1541:27	7	)
STATEMENTS	1542:3	1542:3	7	
JUMP_STATEMENT	1542:3	1542:13	8	return ( 0 ) ;
KEYWORD	1542:3	1542:3	9	return
LEAF_NODE	1542:3	1542:3	10	return
DESTINATION	1542:10	1542:10	9	( 0 )
EXPR	1542:10	1542:12	10	( 0 )
LEAF_NODE	1542:10	1542:10	11	(
FIELD	1542:11	1542:11	11	0
LEAF_NODE	1542:11	1542:11	12	0
LEAF_NODE	1542:12	1542:12	11	)
LEAF_NODE	1542:13	1542:13	9	;
EXPR_STATEMENT	1543:2	1543:35	6	tif -> tif_encoderow = LogL16Encode ;
EXPR	1543:2	1543:2	7	tif -> tif_encoderow = LogL16Encode
ASSIGN	1543:2	1543:23	8	tif -> tif_encoderow = LogL16Encode
LVAL	1543:2	1543:2	9	tif -> tif_encoderow
FIELD	1543:2	1543:7	10	tif -> tif_encoderow
LEAF_NODE	1543:2	1543:2	11	tif
LEAF_NODE	1543:5	1543:5	11	->
LEAF_NODE	1543:7	1543:7	11	tif_encoderow
ASSIGN_OP	1543:21	1543:21	9	=
LEAF_NODE	1543:21	1543:21	10	=
RVAL	1543:23	1543:23	9	LogL16Encode
FIELD	1543:23	1543:23	10	LogL16Encode
LEAF_NODE	1543:23	1543:23	11	LogL16Encode
LEAF_NODE	1543:35	1543:35	7	;
SELECTION	1544:2	1544:28	6	
KEYWORD	1544:2	1544:2	7	switch
LEAF_NODE	1544:2	1544:2	8	switch
LEAF_NODE	1544:9	1544:9	7	(
CONDITION	1544:10	1544:10	7	sp -> user_datafmt
EXPR	1544:10	1544:10	8	sp -> user_datafmt
FIELD	1544:10	1544:14	9	sp -> user_datafmt
LEAF_NODE	1544:10	1544:10	10	sp
LEAF_NODE	1544:12	1544:12	10	->
LEAF_NODE	1544:14	1544:14	10	user_datafmt
LEAF_NODE	1544:26	1544:26	7	)
STATEMENTS	1544:28	1552:2	7	
LEAF_NODE	1544:28	1544:28	8	{
STATEMENTS	1545:2	1551:3	8	
LABEL	1545:2	1545:26	9	case SGILOGDATAFMT_FLOAT :
LEAF_NODE	1545:2	1545:2	10	case
LEAF_NODE	1545:7	1545:7	10	SGILOGDATAFMT_FLOAT
LEAF_NODE	1545:26	1545:26	10	:
EXPR_STATEMENT	1546:3	1546:23	9	sp -> tfunc = L16fromY ;
EXPR	1546:3	1546:3	10	sp -> tfunc = L16fromY
ASSIGN	1546:3	1546:15	11	sp -> tfunc = L16fromY
LVAL	1546:3	1546:3	12	sp -> tfunc
FIELD	1546:3	1546:7	13	sp -> tfunc
LEAF_NODE	1546:3	1546:3	14	sp
LEAF_NODE	1546:5	1546:5	14	->
LEAF_NODE	1546:7	1546:7	14	tfunc
ASSIGN_OP	1546:13	1546:13	12	=
LEAF_NODE	1546:13	1546:13	13	=
RVAL	1546:15	1546:15	12	L16fromY
FIELD	1546:15	1546:15	13	L16fromY
LEAF_NODE	1546:15	1546:15	14	L16fromY
LEAF_NODE	1546:23	1546:23	10	;
JUMP_STATEMENT	1547:3	1547:8	9	break DESTINATION ;
KEYWORD	1547:3	1547:3	10	break
LEAF_NODE	1547:3	1547:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1547:8	1547:8	10	;
LABEL	1548:2	1548:26	9	case SGILOGDATAFMT_16BIT :
LEAF_NODE	1548:2	1548:2	10	case
LEAF_NODE	1548:7	1548:7	10	SGILOGDATAFMT_16BIT
LEAF_NODE	1548:26	1548:26	10	:
JUMP_STATEMENT	1549:3	1549:8	9	break DESTINATION ;
KEYWORD	1549:3	1549:3	10	break
LEAF_NODE	1549:3	1549:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1549:8	1549:8	10	;
LABEL	1550:2	1550:9	9	default :
LEAF_NODE	1550:2	1550:2	10	default
LEAF_NODE	1550:9	1550:9	10	:
JUMP_STATEMENT	1551:3	1551:20	9	goto notsupported ;
KEYWORD	1551:3	1551:3	10	goto
LEAF_NODE	1551:3	1551:3	11	goto
DESTINATION	1551:8	1551:8	10	notsupported
LEAF_NODE	1551:8	1551:8	11	notsupported
LEAF_NODE	1551:20	1551:20	10	;
LEAF_NODE	1552:2	1552:2	8	}
JUMP_STATEMENT	1553:2	1553:7	6	break DESTINATION ;
KEYWORD	1553:2	1553:2	7	break
LEAF_NODE	1553:2	1553:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1553:7	1553:7	7	;
LABEL	1554:1	1554:8	6	default :
LEAF_NODE	1554:1	1554:1	7	default
LEAF_NODE	1554:8	1554:8	7	:
EXPR_STATEMENT	1555:2	1557:58	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Inappropriate photometric interpretation %d for SGILog compression; %s" , td -> td_photometric , "must be either LogLUV or LogL" ) ;
EXPR	1555:2	1555:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Inappropriate photometric interpretation %d for SGILog compression; %s" , td -> td_photometric , "must be either LogLUV or LogL" )
FUNCTION_CALL	1555:2	1557:57	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Inappropriate photometric interpretation %d for SGILog compression; %s" , td -> td_photometric , "must be either LogLUV or LogL" )
CALLEE	1555:2	1555:2	9	TIFFErrorExt
LEAF_NODE	1555:2	1555:2	10	TIFFErrorExt
LEAF_NODE	1555:14	1555:14	9	(
ARGUMENT	1555:15	1555:15	9	tif -> tif_clientdata
FIELD	1555:15	1555:20	10	tif -> tif_clientdata
LEAF_NODE	1555:15	1555:15	11	tif
LEAF_NODE	1555:18	1555:18	11	->
LEAF_NODE	1555:20	1555:20	11	tif_clientdata
LEAF_NODE	1555:34	1555:34	9	,
ARGUMENT	1555:36	1555:36	9	module
FIELD	1555:36	1555:36	10	module
LEAF_NODE	1555:36	1555:36	11	module
LEAF_NODE	1555:42	1555:42	9	,
ARGUMENT	1556:6	1556:6	9	"Inappropriate photometric interpretation %d for SGILog compression; %s"
FIELD	1556:6	1556:6	10	"Inappropriate photometric interpretation %d for SGILog compression; %s"
LEAF_NODE	1556:6	1556:6	11	"Inappropriate photometric interpretation %d for SGILog compression; %s"
LEAF_NODE	1556:78	1556:78	9	,
ARGUMENT	1557:6	1557:6	9	td -> td_photometric
FIELD	1557:6	1557:10	10	td -> td_photometric
LEAF_NODE	1557:6	1557:6	11	td
LEAF_NODE	1557:8	1557:8	11	->
LEAF_NODE	1557:10	1557:10	11	td_photometric
LEAF_NODE	1557:24	1557:24	9	,
ARGUMENT	1557:26	1557:26	9	"must be either LogLUV or LogL"
FIELD	1557:26	1557:26	10	"must be either LogLUV or LogL"
LEAF_NODE	1557:26	1557:26	11	"must be either LogLUV or LogL"
LEAF_NODE	1557:57	1557:57	9	)
LEAF_NODE	1557:58	1557:58	7	;
JUMP_STATEMENT	1558:2	1558:12	6	return ( 0 ) ;
KEYWORD	1558:2	1558:2	7	return
LEAF_NODE	1558:2	1558:2	8	return
DESTINATION	1558:9	1558:9	7	( 0 )
EXPR	1558:9	1558:11	8	( 0 )
LEAF_NODE	1558:9	1558:9	9	(
FIELD	1558:10	1558:10	9	0
LEAF_NODE	1558:10	1558:10	10	0
LEAF_NODE	1558:11	1558:11	9	)
LEAF_NODE	1558:12	1558:12	7	;
LEAF_NODE	1559:1	1559:1	5	}
EXPR_STATEMENT	1560:1	1560:22	3	sp -> encoder_state = 1 ;
EXPR	1560:1	1560:1	4	sp -> encoder_state = 1
ASSIGN	1560:1	1560:21	5	sp -> encoder_state = 1
LVAL	1560:1	1560:1	6	sp -> encoder_state
FIELD	1560:1	1560:5	7	sp -> encoder_state
LEAF_NODE	1560:1	1560:1	8	sp
LEAF_NODE	1560:3	1560:3	8	->
LEAF_NODE	1560:5	1560:5	8	encoder_state
ASSIGN_OP	1560:19	1560:19	6	=
LEAF_NODE	1560:19	1560:19	7	=
RVAL	1560:21	1560:21	6	1
FIELD	1560:21	1560:21	7	1
LEAF_NODE	1560:21	1560:21	8	1
LEAF_NODE	1560:22	1560:22	4	;
JUMP_STATEMENT	1561:1	1561:11	3	return ( 1 ) ;
KEYWORD	1561:1	1561:1	4	return
LEAF_NODE	1561:1	1561:1	5	return
DESTINATION	1561:8	1561:8	4	( 1 )
EXPR	1561:8	1561:10	5	( 1 )
LEAF_NODE	1561:8	1561:8	6	(
FIELD	1561:9	1561:9	6	1
LEAF_NODE	1561:9	1561:9	7	1
LEAF_NODE	1561:10	1561:10	6	)
LEAF_NODE	1561:11	1561:11	4	;
LABEL	1562:0	1562:12	3	notsupported :
LEAF_NODE	1562:0	1562:0	4	notsupported
LEAF_NODE	1562:12	1562:12	4	:
EXPR_STATEMENT	1563:1	1565:66	3	TIFFErrorExt ( tif -> tif_clientdata , module , "SGILog compression supported only for %s, or raw data" , td -> td_photometric == PHOTOMETRIC_LOGL ? "Y, L" : "XYZ, Luv" ) ;
EXPR	1563:1	1563:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "SGILog compression supported only for %s, or raw data" , td -> td_photometric == PHOTOMETRIC_LOGL ? "Y, L" : "XYZ, Luv" )
FUNCTION_CALL	1563:1	1565:65	5	TIFFErrorExt ( tif -> tif_clientdata , module , "SGILog compression supported only for %s, or raw data" , td -> td_photometric == PHOTOMETRIC_LOGL ? "Y, L" : "XYZ, Luv" )
CALLEE	1563:1	1563:1	6	TIFFErrorExt
LEAF_NODE	1563:1	1563:1	7	TIFFErrorExt
LEAF_NODE	1563:13	1563:13	6	(
ARGUMENT	1563:14	1563:14	6	tif -> tif_clientdata
FIELD	1563:14	1563:19	7	tif -> tif_clientdata
LEAF_NODE	1563:14	1563:14	8	tif
LEAF_NODE	1563:17	1563:17	8	->
LEAF_NODE	1563:19	1563:19	8	tif_clientdata
LEAF_NODE	1563:33	1563:33	6	,
ARGUMENT	1563:35	1563:35	6	module
FIELD	1563:35	1563:35	7	module
LEAF_NODE	1563:35	1563:35	8	module
LEAF_NODE	1563:41	1563:41	6	,
ARGUMENT	1564:5	1564:5	6	"SGILog compression supported only for %s, or raw data"
FIELD	1564:5	1564:5	7	"SGILog compression supported only for %s, or raw data"
LEAF_NODE	1564:5	1564:5	8	"SGILog compression supported only for %s, or raw data"
LEAF_NODE	1564:60	1564:60	6	,
ARGUMENT	1565:5	1565:5	6	td -> td_photometric == PHOTOMETRIC_LOGL ? "Y, L" : "XYZ, Luv"
COND_EXPR	1565:5	1565:55	7	td -> td_photometric == PHOTOMETRIC_LOGL ? "Y, L" : "XYZ, Luv"
CONDITION	1565:5	1565:27	8	td -> td_photometric == PHOTOMETRIC_LOGL
FIELD	1565:5	1565:9	9	td -> td_photometric
LEAF_NODE	1565:5	1565:5	10	td
LEAF_NODE	1565:7	1565:7	10	->
LEAF_NODE	1565:9	1565:9	10	td_photometric
EQ_OPERATOR	1565:24	1565:24	9	==
LEAF_NODE	1565:24	1565:24	10	==
FIELD	1565:27	1565:27	9	PHOTOMETRIC_LOGL
LEAF_NODE	1565:27	1565:27	10	PHOTOMETRIC_LOGL
LEAF_NODE	1565:44	1565:44	8	?
EXPR	1565:46	1565:46	8	"Y, L"
FIELD	1565:46	1565:46	9	"Y, L"
LEAF_NODE	1565:46	1565:46	10	"Y, L"
LEAF_NODE	1565:53	1565:53	8	:
FIELD	1565:55	1565:55	8	"XYZ, Luv"
LEAF_NODE	1565:55	1565:55	9	"XYZ, Luv"
LEAF_NODE	1565:65	1565:65	6	)
LEAF_NODE	1565:66	1565:66	4	;
JUMP_STATEMENT	1566:1	1566:11	3	return ( 0 ) ;
KEYWORD	1566:1	1566:1	4	return
LEAF_NODE	1566:1	1566:1	5	return
DESTINATION	1566:8	1566:8	4	( 0 )
EXPR	1566:8	1566:10	5	( 0 )
LEAF_NODE	1566:8	1566:8	6	(
FIELD	1566:9	1566:9	6	0
LEAF_NODE	1566:9	1566:9	7	0
LEAF_NODE	1566:10	1566:10	6	)
LEAF_NODE	1566:11	1566:11	4	;
LEAF_NODE	1567:0	1567:0	2	}
FUNCTION_DEF	1569:0	1593:0	1	
RETURN_TYPE	1569:0	1569:7	2	static void
LEAF_NODE	1569:0	1569:0	3	static
TYPE_NAME	1569:7	1569:7	3	void
LEAF_NODE	1569:7	1569:7	4	void
FUNCTION_NAME	1570:0	1570:0	2	LogLuvClose
LEAF_NODE	1570:0	1570:0	3	LogLuvClose
PARAMETER_LIST	1570:11	1570:21	2	( TIFF * tif )
LEAF_NODE	1570:11	1570:11	3	(
PARAMETER_DECL	1570:12	1570:18	3	TIFF * tif
TYPE	1570:12	1570:16	4	TIFF *
TYPE_NAME	1570:12	1570:12	5	TIFF
LEAF_NODE	1570:12	1570:12	6	TIFF
POINTER	1570:16	1570:16	5	*
LEAF_NODE	1570:16	1570:16	6	*
NAME	1570:18	1570:18	4	tif
LEAF_NODE	1570:18	1570:18	5	tif
LEAF_NODE	1570:21	1570:21	3	)
LEAF_NODE	1571:0	1571:0	2	{
STATEMENTS	1572:8	1584:8	2	
SIMPLE_DECL	1572:8	1572:54	3	LogLuvState * sp ; sp = ( LogLuvState * ) tif -> tif_data ;
VAR_DECL	1572:8	1572:21	4	LogLuvState * sp ; sp = ( LogLuvState * ) tif -> tif_data
TYPE	1572:8	1572:19	5	LogLuvState *
TYPE_NAME	1572:8	1572:8	6	LogLuvState
LEAF_NODE	1572:8	1572:8	7	LogLuvState
POINTER	1572:19	1572:19	6	*
LEAF_NODE	1572:19	1572:19	7	*
NAME	1572:21	1572:21	5	sp
LEAF_NODE	1572:21	1572:21	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1572:21	1572:21	5	sp = ( LogLuvState * ) tif -> tif_data
ASSIGN	1572:21	1572:26	6	sp = ( LogLuvState * ) tif -> tif_data
LVAL	1572:21	1572:21	7	sp
NAME	1572:21	1572:21	8	sp
LEAF_NODE	1572:21	1572:21	9	sp
ASSIGN_OP	1572:24	1572:24	7	=
LEAF_NODE	1572:24	1572:24	8	=
RVAL	1572:26	1572:41	7	( LogLuvState * ) tif -> tif_data
LEAF_NODE	1572:26	1572:26	8	(
TYPE_NAME	1572:27	1572:27	8	LogLuvState
LEAF_NODE	1572:27	1572:27	9	LogLuvState
LEAF_NODE	1572:38	1572:38	8	*
LEAF_NODE	1572:39	1572:39	8	)
FIELD	1572:41	1572:46	8	tif -> tif_data
LEAF_NODE	1572:41	1572:41	9	tif
LEAF_NODE	1572:44	1572:44	9	->
LEAF_NODE	1572:46	1572:46	9	tif_data
LEAF_NODE	1572:54	1572:54	4	;
SIMPLE_DECL	1573:1	1573:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1573:1	1573:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1573:1	1573:15	5	TIFFDirectory *
TYPE_NAME	1573:1	1573:1	6	TIFFDirectory
LEAF_NODE	1573:1	1573:1	7	TIFFDirectory
POINTER	1573:15	1573:15	6	*
LEAF_NODE	1573:15	1573:15	7	*
NAME	1573:16	1573:16	5	td
LEAF_NODE	1573:16	1573:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1573:16	1573:16	5	td = & tif -> tif_dir
ASSIGN	1573:16	1573:21	6	td = & tif -> tif_dir
LVAL	1573:16	1573:16	7	td
NAME	1573:16	1573:16	8	td
LEAF_NODE	1573:16	1573:16	9	td
ASSIGN_OP	1573:19	1573:19	7	=
LEAF_NODE	1573:19	1573:19	8	=
RVAL	1573:21	1573:21	7	& tif -> tif_dir
UNARY_EXPR	1573:21	1573:22	8	& tif -> tif_dir
UNARY_OPERATOR	1573:21	1573:21	9	&
LEAF_NODE	1573:21	1573:21	10	&
FIELD	1573:22	1573:27	9	tif -> tif_dir
LEAF_NODE	1573:22	1573:22	10	tif
LEAF_NODE	1573:25	1573:25	10	->
LEAF_NODE	1573:27	1573:27	10	tif_dir
LEAF_NODE	1573:34	1573:34	4	;
EXPR_STATEMENT	1575:1	1575:16	3	assert ( sp != 0 ) ;
EXPR	1575:1	1575:1	4	assert ( sp != 0 )
FUNCTION_CALL	1575:1	1575:15	5	assert ( sp != 0 )
CALLEE	1575:1	1575:1	6	assert
LEAF_NODE	1575:1	1575:1	7	assert
LEAF_NODE	1575:7	1575:7	6	(
ARGUMENT	1575:8	1575:14	6	sp != 0
FIELD	1575:8	1575:8	7	sp
LEAF_NODE	1575:8	1575:8	8	sp
EQ_OPERATOR	1575:11	1575:11	7	!=
LEAF_NODE	1575:11	1575:11	8	!=
FIELD	1575:14	1575:14	7	0
LEAF_NODE	1575:14	1575:14	8	0
LEAF_NODE	1575:15	1575:15	6	)
LEAF_NODE	1575:16	1575:16	4	;
SELECTION	1584:8	1585:8	3	
KEYWORD	1584:8	1584:8	4	if
LEAF_NODE	1584:8	1584:8	5	if
LEAF_NODE	1584:10	1584:10	4	(
CONDITION	1584:12	1584:12	4	sp -> encoder_state
EXPR	1584:12	1584:12	5	sp -> encoder_state
FIELD	1584:12	1584:16	6	sp -> encoder_state
LEAF_NODE	1584:12	1584:12	7	sp
LEAF_NODE	1584:14	1584:14	7	->
LEAF_NODE	1584:16	1584:16	7	encoder_state
LEAF_NODE	1584:30	1584:30	4	)
STATEMENTS	1585:8	1592:8	4	
LEAF_NODE	1585:8	1585:8	5	{
STATEMENTS	1588:12	1591:12	5	
EXPR_STATEMENT	1588:12	1589:64	6	td -> td_samplesperpixel = ( td -> td_photometric == PHOTOMETRIC_LOGL ) ? 1 : 3 ;
EXPR	1588:12	1588:12	7	td -> td_samplesperpixel = ( td -> td_photometric == PHOTOMETRIC_LOGL ) ? 1 : 3
ASSIGN	1588:12	1589:16	8	td -> td_samplesperpixel = ( td -> td_photometric == PHOTOMETRIC_LOGL ) ? 1 : 3
LVAL	1588:12	1588:12	9	td -> td_samplesperpixel
FIELD	1588:12	1588:16	10	td -> td_samplesperpixel
LEAF_NODE	1588:12	1588:12	11	td
LEAF_NODE	1588:14	1588:14	11	->
LEAF_NODE	1588:16	1588:16	11	td_samplesperpixel
ASSIGN_OP	1588:35	1588:35	9	=
LEAF_NODE	1588:35	1588:35	10	=
RVAL	1589:16	1589:16	9	( td -> td_photometric == PHOTOMETRIC_LOGL ) ? 1 : 3
COND_EXPR	1589:16	1589:63	10	( td -> td_photometric == PHOTOMETRIC_LOGL ) ? 1 : 3
CONDITION	1589:16	1589:55	11	( td -> td_photometric == PHOTOMETRIC_LOGL )
LEAF_NODE	1589:16	1589:16	12	(
FIELD	1589:17	1589:21	12	td -> td_photometric
LEAF_NODE	1589:17	1589:17	13	td
LEAF_NODE	1589:19	1589:19	13	->
LEAF_NODE	1589:21	1589:21	13	td_photometric
EQ_OPERATOR	1589:36	1589:36	12	==
LEAF_NODE	1589:36	1589:36	13	==
FIELD	1589:39	1589:39	12	PHOTOMETRIC_LOGL
LEAF_NODE	1589:39	1589:39	13	PHOTOMETRIC_LOGL
LEAF_NODE	1589:55	1589:55	12	)
LEAF_NODE	1589:57	1589:57	11	?
EXPR	1589:59	1589:59	11	1
FIELD	1589:59	1589:59	12	1
LEAF_NODE	1589:59	1589:59	13	1
LEAF_NODE	1589:61	1589:61	11	:
FIELD	1589:63	1589:63	11	3
LEAF_NODE	1589:63	1589:63	12	3
LEAF_NODE	1589:64	1589:64	7	;
EXPR_STATEMENT	1590:12	1590:37	6	td -> td_bitspersample = 16 ;
EXPR	1590:12	1590:12	7	td -> td_bitspersample = 16
ASSIGN	1590:12	1590:35	8	td -> td_bitspersample = 16
LVAL	1590:12	1590:12	9	td -> td_bitspersample
FIELD	1590:12	1590:16	10	td -> td_bitspersample
LEAF_NODE	1590:12	1590:12	11	td
LEAF_NODE	1590:14	1590:14	11	->
LEAF_NODE	1590:16	1590:16	11	td_bitspersample
ASSIGN_OP	1590:33	1590:33	9	=
LEAF_NODE	1590:33	1590:33	10	=
RVAL	1590:35	1590:35	9	16
FIELD	1590:35	1590:35	10	16
LEAF_NODE	1590:35	1590:35	11	16
LEAF_NODE	1590:37	1590:37	7	;
EXPR_STATEMENT	1591:12	1591:50	6	td -> td_sampleformat = SAMPLEFORMAT_INT ;
EXPR	1591:12	1591:12	7	td -> td_sampleformat = SAMPLEFORMAT_INT
ASSIGN	1591:12	1591:34	8	td -> td_sampleformat = SAMPLEFORMAT_INT
LVAL	1591:12	1591:12	9	td -> td_sampleformat
FIELD	1591:12	1591:16	10	td -> td_sampleformat
LEAF_NODE	1591:12	1591:12	11	td
LEAF_NODE	1591:14	1591:14	11	->
LEAF_NODE	1591:16	1591:16	11	td_sampleformat
ASSIGN_OP	1591:32	1591:32	9	=
LEAF_NODE	1591:32	1591:32	10	=
RVAL	1591:34	1591:34	9	SAMPLEFORMAT_INT
FIELD	1591:34	1591:34	10	SAMPLEFORMAT_INT
LEAF_NODE	1591:34	1591:34	11	SAMPLEFORMAT_INT
LEAF_NODE	1591:50	1591:50	7	;
LEAF_NODE	1592:8	1592:8	5	}
LEAF_NODE	1593:0	1593:0	2	}
FUNCTION_DEF	1595:0	1611:0	1	
RETURN_TYPE	1595:0	1595:7	2	static void
LEAF_NODE	1595:0	1595:0	3	static
TYPE_NAME	1595:7	1595:7	3	void
LEAF_NODE	1595:7	1595:7	4	void
FUNCTION_NAME	1596:0	1596:0	2	LogLuvCleanup
LEAF_NODE	1596:0	1596:0	3	LogLuvCleanup
PARAMETER_LIST	1596:13	1596:23	2	( TIFF * tif )
LEAF_NODE	1596:13	1596:13	3	(
PARAMETER_DECL	1596:14	1596:20	3	TIFF * tif
TYPE	1596:14	1596:18	4	TIFF *
TYPE_NAME	1596:14	1596:14	5	TIFF
LEAF_NODE	1596:14	1596:14	6	TIFF
POINTER	1596:18	1596:18	5	*
LEAF_NODE	1596:18	1596:18	6	*
NAME	1596:20	1596:20	4	tif
LEAF_NODE	1596:20	1596:20	5	tif
LEAF_NODE	1596:23	1596:23	3	)
LEAF_NODE	1597:0	1597:0	2	{
STATEMENTS	1598:1	1610:1	2	
SIMPLE_DECL	1598:1	1598:47	3	LogLuvState * sp ; sp = ( LogLuvState * ) tif -> tif_data ;
VAR_DECL	1598:1	1598:14	4	LogLuvState * sp ; sp = ( LogLuvState * ) tif -> tif_data
TYPE	1598:1	1598:12	5	LogLuvState *
TYPE_NAME	1598:1	1598:1	6	LogLuvState
LEAF_NODE	1598:1	1598:1	7	LogLuvState
POINTER	1598:12	1598:12	6	*
LEAF_NODE	1598:12	1598:12	7	*
NAME	1598:14	1598:14	5	sp
LEAF_NODE	1598:14	1598:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1598:14	1598:14	5	sp = ( LogLuvState * ) tif -> tif_data
ASSIGN	1598:14	1598:19	6	sp = ( LogLuvState * ) tif -> tif_data
LVAL	1598:14	1598:14	7	sp
NAME	1598:14	1598:14	8	sp
LEAF_NODE	1598:14	1598:14	9	sp
ASSIGN_OP	1598:17	1598:17	7	=
LEAF_NODE	1598:17	1598:17	8	=
RVAL	1598:19	1598:34	7	( LogLuvState * ) tif -> tif_data
LEAF_NODE	1598:19	1598:19	8	(
TYPE_NAME	1598:20	1598:20	8	LogLuvState
LEAF_NODE	1598:20	1598:20	9	LogLuvState
LEAF_NODE	1598:32	1598:32	8	*
LEAF_NODE	1598:33	1598:33	8	)
FIELD	1598:34	1598:39	8	tif -> tif_data
LEAF_NODE	1598:34	1598:34	9	tif
LEAF_NODE	1598:37	1598:37	9	->
LEAF_NODE	1598:39	1598:39	9	tif_data
LEAF_NODE	1598:47	1598:47	4	;
EXPR_STATEMENT	1600:1	1600:16	3	assert ( sp != 0 ) ;
EXPR	1600:1	1600:1	4	assert ( sp != 0 )
FUNCTION_CALL	1600:1	1600:15	5	assert ( sp != 0 )
CALLEE	1600:1	1600:1	6	assert
LEAF_NODE	1600:1	1600:1	7	assert
LEAF_NODE	1600:7	1600:7	6	(
ARGUMENT	1600:8	1600:14	6	sp != 0
FIELD	1600:8	1600:8	7	sp
LEAF_NODE	1600:8	1600:8	8	sp
EQ_OPERATOR	1600:11	1600:11	7	!=
LEAF_NODE	1600:11	1600:11	8	!=
FIELD	1600:14	1600:14	7	0
LEAF_NODE	1600:14	1600:14	8	0
LEAF_NODE	1600:15	1600:15	6	)
LEAF_NODE	1600:16	1600:16	4	;
EXPR_STATEMENT	1602:1	1602:47	3	tif -> tif_tagmethods . vgetfield = sp -> vgetparent ;
EXPR	1602:1	1602:1	4	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
ASSIGN	1602:1	1602:33	5	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
LVAL	1602:1	1602:1	6	tif -> tif_tagmethods . vgetfield
FIELD	1602:1	1602:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1602:1	1602:1	8	tif
LEAF_NODE	1602:4	1602:4	8	->
LEAF_NODE	1602:6	1602:6	8	tif_tagmethods
LEAF_NODE	1602:20	1602:20	8	.
LEAF_NODE	1602:21	1602:21	8	vgetfield
ASSIGN_OP	1602:31	1602:31	6	=
LEAF_NODE	1602:31	1602:31	7	=
RVAL	1602:33	1602:33	6	sp -> vgetparent
FIELD	1602:33	1602:37	7	sp -> vgetparent
LEAF_NODE	1602:33	1602:33	8	sp
LEAF_NODE	1602:35	1602:35	8	->
LEAF_NODE	1602:37	1602:37	8	vgetparent
LEAF_NODE	1602:47	1602:47	4	;
EXPR_STATEMENT	1603:1	1603:47	3	tif -> tif_tagmethods . vsetfield = sp -> vsetparent ;
EXPR	1603:1	1603:1	4	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
ASSIGN	1603:1	1603:33	5	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
LVAL	1603:1	1603:1	6	tif -> tif_tagmethods . vsetfield
FIELD	1603:1	1603:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	1603:1	1603:1	8	tif
LEAF_NODE	1603:4	1603:4	8	->
LEAF_NODE	1603:6	1603:6	8	tif_tagmethods
LEAF_NODE	1603:20	1603:20	8	.
LEAF_NODE	1603:21	1603:21	8	vsetfield
ASSIGN_OP	1603:31	1603:31	6	=
LEAF_NODE	1603:31	1603:31	7	=
RVAL	1603:33	1603:33	6	sp -> vsetparent
FIELD	1603:33	1603:37	7	sp -> vsetparent
LEAF_NODE	1603:33	1603:33	8	sp
LEAF_NODE	1603:35	1603:35	8	->
LEAF_NODE	1603:37	1603:37	8	vsetparent
LEAF_NODE	1603:47	1603:47	4	;
SELECTION	1605:1	1606:2	3	
KEYWORD	1605:1	1605:1	4	if
LEAF_NODE	1605:1	1605:1	5	if
LEAF_NODE	1605:4	1605:4	4	(
CONDITION	1605:5	1605:5	4	sp -> tbuf
EXPR	1605:5	1605:5	5	sp -> tbuf
FIELD	1605:5	1605:9	6	sp -> tbuf
LEAF_NODE	1605:5	1605:5	7	sp
LEAF_NODE	1605:7	1605:7	7	->
LEAF_NODE	1605:9	1605:9	7	tbuf
LEAF_NODE	1605:13	1605:13	4	)
STATEMENTS	1606:2	1606:2	4	
EXPR_STATEMENT	1606:2	1606:21	5	_TIFFfree ( sp -> tbuf ) ;
EXPR	1606:2	1606:2	6	_TIFFfree ( sp -> tbuf )
FUNCTION_CALL	1606:2	1606:20	7	_TIFFfree ( sp -> tbuf )
CALLEE	1606:2	1606:2	8	_TIFFfree
LEAF_NODE	1606:2	1606:2	9	_TIFFfree
LEAF_NODE	1606:11	1606:11	8	(
ARGUMENT	1606:12	1606:12	8	sp -> tbuf
FIELD	1606:12	1606:16	9	sp -> tbuf
LEAF_NODE	1606:12	1606:12	10	sp
LEAF_NODE	1606:14	1606:14	10	->
LEAF_NODE	1606:16	1606:16	10	tbuf
LEAF_NODE	1606:20	1606:20	8	)
LEAF_NODE	1606:21	1606:21	6	;
EXPR_STATEMENT	1607:1	1607:14	3	_TIFFfree ( sp ) ;
EXPR	1607:1	1607:1	4	_TIFFfree ( sp )
FUNCTION_CALL	1607:1	1607:13	5	_TIFFfree ( sp )
CALLEE	1607:1	1607:1	6	_TIFFfree
LEAF_NODE	1607:1	1607:1	7	_TIFFfree
LEAF_NODE	1607:10	1607:10	6	(
ARGUMENT	1607:11	1607:11	6	sp
FIELD	1607:11	1607:11	7	sp
LEAF_NODE	1607:11	1607:11	8	sp
LEAF_NODE	1607:13	1607:13	6	)
LEAF_NODE	1607:14	1607:14	4	;
EXPR_STATEMENT	1608:1	1608:21	3	tif -> tif_data = NULL ;
EXPR	1608:1	1608:1	4	tif -> tif_data = NULL
ASSIGN	1608:1	1608:17	5	tif -> tif_data = NULL
LVAL	1608:1	1608:1	6	tif -> tif_data
FIELD	1608:1	1608:6	7	tif -> tif_data
LEAF_NODE	1608:1	1608:1	8	tif
LEAF_NODE	1608:4	1608:4	8	->
LEAF_NODE	1608:6	1608:6	8	tif_data
ASSIGN_OP	1608:15	1608:15	6	=
LEAF_NODE	1608:15	1608:15	7	=
RVAL	1608:17	1608:17	6	NULL
FIELD	1608:17	1608:17	7	NULL
LEAF_NODE	1608:17	1608:17	8	NULL
LEAF_NODE	1608:21	1608:21	4	;
EXPR_STATEMENT	1610:1	1610:37	3	_TIFFSetDefaultCompressionState ( tif ) ;
EXPR	1610:1	1610:1	4	_TIFFSetDefaultCompressionState ( tif )
FUNCTION_CALL	1610:1	1610:36	5	_TIFFSetDefaultCompressionState ( tif )
CALLEE	1610:1	1610:1	6	_TIFFSetDefaultCompressionState
LEAF_NODE	1610:1	1610:1	7	_TIFFSetDefaultCompressionState
LEAF_NODE	1610:32	1610:32	6	(
ARGUMENT	1610:33	1610:33	6	tif
FIELD	1610:33	1610:33	7	tif
LEAF_NODE	1610:33	1610:33	8	tif
LEAF_NODE	1610:36	1610:36	6	)
LEAF_NODE	1610:37	1610:37	4	;
LEAF_NODE	1611:0	1611:0	2	}
FUNCTION_DEF	1613:0	1674:0	1	
RETURN_TYPE	1613:0	1613:7	2	static int
LEAF_NODE	1613:0	1613:0	3	static
TYPE_NAME	1613:7	1613:7	3	int
LEAF_NODE	1613:7	1613:7	4	int
FUNCTION_NAME	1614:0	1614:0	2	LogLuvVSetField
LEAF_NODE	1614:0	1614:0	3	LogLuvVSetField
PARAMETER_LIST	1614:15	1614:49	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	1614:15	1614:15	3	(
PARAMETER_DECL	1614:16	1614:22	3	TIFF * tif
TYPE	1614:16	1614:20	4	TIFF *
TYPE_NAME	1614:16	1614:16	5	TIFF
LEAF_NODE	1614:16	1614:16	6	TIFF
POINTER	1614:20	1614:20	5	*
LEAF_NODE	1614:20	1614:20	6	*
NAME	1614:22	1614:22	4	tif
LEAF_NODE	1614:22	1614:22	5	tif
LEAF_NODE	1614:25	1614:25	3	,
PARAMETER_DECL	1614:27	1614:34	3	uint32 tag
TYPE	1614:27	1614:27	4	uint32
TYPE_NAME	1614:27	1614:27	5	uint32
LEAF_NODE	1614:27	1614:27	6	uint32
NAME	1614:34	1614:34	4	tag
LEAF_NODE	1614:34	1614:34	5	tag
LEAF_NODE	1614:37	1614:37	3	,
PARAMETER_DECL	1614:39	1614:47	3	va_list ap
TYPE	1614:39	1614:39	4	va_list
TYPE_NAME	1614:39	1614:39	5	va_list
LEAF_NODE	1614:39	1614:39	6	va_list
NAME	1614:47	1614:47	4	ap
LEAF_NODE	1614:47	1614:47	5	ap
LEAF_NODE	1614:49	1614:49	3	)
LEAF_NODE	1615:0	1615:0	2	{
STATEMENTS	1616:1	1620:1	2	
LEAF_NODE	1616:1	1616:1	3	static
SIMPLE_DECL	1616:8	1616:47	3	const char [ ] module ; module = "LogLuvVSetField" ;
VAR_DECL	1616:8	1616:19	4	const char [ ] module ; module = "LogLuvVSetField"
TYPE	1616:8	1616:25	5	const char [ ]
TYPE_NAME	1616:8	1616:14	6	const char
LEAF_NODE	1616:8	1616:8	7	const
LEAF_NODE	1616:14	1616:14	7	char
TYPE_SUFFIX	1616:25	1616:26	6	[ ]
LEAF_NODE	1616:25	1616:25	7	[
LEAF_NODE	1616:26	1616:26	7	]
NAME	1616:19	1616:19	5	module
LEAF_NODE	1616:19	1616:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1616:19	1616:19	5	module = "LogLuvVSetField"
ASSIGN	1616:19	1616:30	6	module = "LogLuvVSetField"
LVAL	1616:19	1616:19	7	module
NAME	1616:19	1616:19	8	module
LEAF_NODE	1616:19	1616:19	9	module
ASSIGN_OP	1616:28	1616:28	7	=
LEAF_NODE	1616:28	1616:28	8	=
RVAL	1616:30	1616:30	7	"LogLuvVSetField"
FIELD	1616:30	1616:30	8	"LogLuvVSetField"
LEAF_NODE	1616:30	1616:30	9	"LogLuvVSetField"
LEAF_NODE	1616:47	1616:47	4	;
SIMPLE_DECL	1617:1	1617:36	3	LogLuvState * sp ; sp = DecoderState ( tif ) ;
VAR_DECL	1617:1	1617:14	4	LogLuvState * sp ; sp = DecoderState ( tif )
TYPE	1617:1	1617:12	5	LogLuvState *
TYPE_NAME	1617:1	1617:1	6	LogLuvState
LEAF_NODE	1617:1	1617:1	7	LogLuvState
POINTER	1617:12	1617:12	6	*
LEAF_NODE	1617:12	1617:12	7	*
NAME	1617:14	1617:14	5	sp
LEAF_NODE	1617:14	1617:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1617:14	1617:14	5	sp = DecoderState ( tif )
ASSIGN	1617:14	1617:19	6	sp = DecoderState ( tif )
LVAL	1617:14	1617:14	7	sp
NAME	1617:14	1617:14	8	sp
LEAF_NODE	1617:14	1617:14	9	sp
ASSIGN_OP	1617:17	1617:17	7	=
LEAF_NODE	1617:17	1617:17	8	=
RVAL	1617:19	1617:19	7	DecoderState ( tif )
FUNCTION_CALL	1617:19	1617:35	8	DecoderState ( tif )
CALLEE	1617:19	1617:19	9	DecoderState
LEAF_NODE	1617:19	1617:19	10	DecoderState
LEAF_NODE	1617:31	1617:31	9	(
ARGUMENT	1617:32	1617:32	9	tif
FIELD	1617:32	1617:32	10	tif
LEAF_NODE	1617:32	1617:32	11	tif
LEAF_NODE	1617:35	1617:35	9	)
LEAF_NODE	1617:36	1617:36	4	;
SIMPLE_DECL	1618:1	1618:13	3	int bps , int fmt ;
INIT_DECL_LIST	1618:1	1618:1	4	int bps , int fmt
VAR_DECL	1618:1	1618:5	5	int bps
TYPE	1618:1	1618:1	6	int
TYPE_NAME	1618:1	1618:1	7	int
LEAF_NODE	1618:1	1618:1	8	int
NAME	1618:5	1618:5	6	bps
LEAF_NODE	1618:5	1618:5	7	bps
LEAF_NODE	1618:8	1618:8	5	,
VAR_DECL	1618:1	1618:10	5	int fmt
TYPE	1618:1	1618:1	6	int
TYPE_NAME	1618:1	1618:1	7	int
LEAF_NODE	1618:1	1618:1	8	int
NAME	1618:10	1618:10	6	fmt
LEAF_NODE	1618:10	1618:10	7	fmt
LEAF_NODE	1618:13	1618:13	4	;
SELECTION	1620:1	1620:14	3	
KEYWORD	1620:1	1620:1	4	switch
LEAF_NODE	1620:1	1620:1	5	switch
LEAF_NODE	1620:8	1620:8	4	(
CONDITION	1620:9	1620:9	4	tag
EXPR	1620:9	1620:9	5	tag
FIELD	1620:9	1620:9	6	tag
LEAF_NODE	1620:9	1620:9	7	tag
LEAF_NODE	1620:12	1620:12	4	)
STATEMENTS	1620:14	1673:1	4	
LEAF_NODE	1620:14	1620:14	5	{
STATEMENTS	1621:1	1672:2	5	
LABEL	1621:1	1621:27	6	case TIFFTAG_SGILOGDATAFMT :
LEAF_NODE	1621:1	1621:1	7	case
LEAF_NODE	1621:6	1621:6	7	TIFFTAG_SGILOGDATAFMT
LEAF_NODE	1621:27	1621:27	7	:
EXPR_STATEMENT	1622:2	1622:42	6	sp -> user_datafmt = ( int ) va_arg ( ap , int ) ;
EXPR	1622:2	1622:2	7	sp -> user_datafmt = ( int ) va_arg ( ap , int )
ASSIGN	1622:2	1622:21	8	sp -> user_datafmt = ( int ) va_arg ( ap , int )
LVAL	1622:2	1622:2	9	sp -> user_datafmt
FIELD	1622:2	1622:6	10	sp -> user_datafmt
LEAF_NODE	1622:2	1622:2	11	sp
LEAF_NODE	1622:4	1622:4	11	->
LEAF_NODE	1622:6	1622:6	11	user_datafmt
ASSIGN_OP	1622:19	1622:19	9	=
LEAF_NODE	1622:19	1622:19	10	=
RVAL	1622:21	1622:27	9	( int ) va_arg ( ap , int )
LEAF_NODE	1622:21	1622:21	10	(
TYPE_NAME	1622:22	1622:22	10	int
LEAF_NODE	1622:22	1622:22	11	int
LEAF_NODE	1622:25	1622:25	10	)
FUNCTION_CALL	1622:27	1622:41	10	va_arg ( ap , int )
CALLEE	1622:27	1622:27	11	va_arg
LEAF_NODE	1622:27	1622:27	12	va_arg
LEAF_NODE	1622:33	1622:33	11	(
ARGUMENT	1622:34	1622:34	11	ap
FIELD	1622:34	1622:34	12	ap
LEAF_NODE	1622:34	1622:34	13	ap
LEAF_NODE	1622:36	1622:36	11	,
ARGUMENT	1622:38	1622:38	11	int
FIELD	1622:38	1622:38	12	int
LEAF_NODE	1622:38	1622:38	13	int
LEAF_NODE	1622:41	1622:41	11	)
LEAF_NODE	1622:42	1622:42	7	;
SELECTION	1629:2	1629:28	6	
KEYWORD	1629:2	1629:2	7	switch
LEAF_NODE	1629:2	1629:2	8	switch
LEAF_NODE	1629:9	1629:9	7	(
CONDITION	1629:10	1629:10	7	sp -> user_datafmt
EXPR	1629:10	1629:10	8	sp -> user_datafmt
FIELD	1629:10	1629:14	9	sp -> user_datafmt
LEAF_NODE	1629:10	1629:10	10	sp
LEAF_NODE	1629:12	1629:12	10	->
LEAF_NODE	1629:14	1629:14	10	user_datafmt
LEAF_NODE	1629:26	1629:26	7	)
STATEMENTS	1629:28	1652:2	7	
LEAF_NODE	1629:28	1629:28	8	{
STATEMENTS	1630:2	1651:3	8	
LABEL	1630:2	1630:26	9	case SGILOGDATAFMT_FLOAT :
LEAF_NODE	1630:2	1630:2	10	case
LEAF_NODE	1630:7	1630:7	10	SGILOGDATAFMT_FLOAT
LEAF_NODE	1630:26	1630:26	10	:
EXPR_STATEMENT	1631:3	1631:11	9	bps = 32 ;
EXPR	1631:3	1631:3	10	bps = 32
ASSIGN	1631:3	1631:9	11	bps = 32
LVAL	1631:3	1631:3	12	bps
FIELD	1631:3	1631:3	13	bps
LEAF_NODE	1631:3	1631:3	14	bps
ASSIGN_OP	1631:7	1631:7	12	=
LEAF_NODE	1631:7	1631:7	13	=
RVAL	1631:9	1631:9	12	32
FIELD	1631:9	1631:9	13	32
LEAF_NODE	1631:9	1631:9	14	32
LEAF_NODE	1631:11	1631:11	10	;
EXPR_STATEMENT	1632:3	1632:28	9	fmt = SAMPLEFORMAT_IEEEFP ;
EXPR	1632:3	1632:3	10	fmt = SAMPLEFORMAT_IEEEFP
ASSIGN	1632:3	1632:9	11	fmt = SAMPLEFORMAT_IEEEFP
LVAL	1632:3	1632:3	12	fmt
FIELD	1632:3	1632:3	13	fmt
LEAF_NODE	1632:3	1632:3	14	fmt
ASSIGN_OP	1632:7	1632:7	12	=
LEAF_NODE	1632:7	1632:7	13	=
RVAL	1632:9	1632:9	12	SAMPLEFORMAT_IEEEFP
FIELD	1632:9	1632:9	13	SAMPLEFORMAT_IEEEFP
LEAF_NODE	1632:9	1632:9	14	SAMPLEFORMAT_IEEEFP
LEAF_NODE	1632:28	1632:28	10	;
JUMP_STATEMENT	1633:3	1633:8	9	break DESTINATION ;
KEYWORD	1633:3	1633:3	10	break
LEAF_NODE	1633:3	1633:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1633:8	1633:8	10	;
LABEL	1634:2	1634:26	9	case SGILOGDATAFMT_16BIT :
LEAF_NODE	1634:2	1634:2	10	case
LEAF_NODE	1634:7	1634:7	10	SGILOGDATAFMT_16BIT
LEAF_NODE	1634:26	1634:26	10	:
EXPR_STATEMENT	1635:3	1635:11	9	bps = 16 ;
EXPR	1635:3	1635:3	10	bps = 16
ASSIGN	1635:3	1635:9	11	bps = 16
LVAL	1635:3	1635:3	12	bps
FIELD	1635:3	1635:3	13	bps
LEAF_NODE	1635:3	1635:3	14	bps
ASSIGN_OP	1635:7	1635:7	12	=
LEAF_NODE	1635:7	1635:7	13	=
RVAL	1635:9	1635:9	12	16
FIELD	1635:9	1635:9	13	16
LEAF_NODE	1635:9	1635:9	14	16
LEAF_NODE	1635:11	1635:11	10	;
EXPR_STATEMENT	1636:3	1636:25	9	fmt = SAMPLEFORMAT_INT ;
EXPR	1636:3	1636:3	10	fmt = SAMPLEFORMAT_INT
ASSIGN	1636:3	1636:9	11	fmt = SAMPLEFORMAT_INT
LVAL	1636:3	1636:3	12	fmt
FIELD	1636:3	1636:3	13	fmt
LEAF_NODE	1636:3	1636:3	14	fmt
ASSIGN_OP	1636:7	1636:7	12	=
LEAF_NODE	1636:7	1636:7	13	=
RVAL	1636:9	1636:9	12	SAMPLEFORMAT_INT
FIELD	1636:9	1636:9	13	SAMPLEFORMAT_INT
LEAF_NODE	1636:9	1636:9	14	SAMPLEFORMAT_INT
LEAF_NODE	1636:25	1636:25	10	;
JUMP_STATEMENT	1637:3	1637:8	9	break DESTINATION ;
KEYWORD	1637:3	1637:3	10	break
LEAF_NODE	1637:3	1637:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1637:8	1637:8	10	;
LABEL	1638:2	1638:24	9	case SGILOGDATAFMT_RAW :
LEAF_NODE	1638:2	1638:2	10	case
LEAF_NODE	1638:7	1638:7	10	SGILOGDATAFMT_RAW
LEAF_NODE	1638:24	1638:24	10	:
EXPR_STATEMENT	1639:3	1639:11	9	bps = 32 ;
EXPR	1639:3	1639:3	10	bps = 32
ASSIGN	1639:3	1639:9	11	bps = 32
LVAL	1639:3	1639:3	12	bps
FIELD	1639:3	1639:3	13	bps
LEAF_NODE	1639:3	1639:3	14	bps
ASSIGN_OP	1639:7	1639:7	12	=
LEAF_NODE	1639:7	1639:7	13	=
RVAL	1639:9	1639:9	12	32
FIELD	1639:9	1639:9	13	32
LEAF_NODE	1639:9	1639:9	14	32
LEAF_NODE	1639:11	1639:11	10	;
EXPR_STATEMENT	1640:3	1640:26	9	fmt = SAMPLEFORMAT_UINT ;
EXPR	1640:3	1640:3	10	fmt = SAMPLEFORMAT_UINT
ASSIGN	1640:3	1640:9	11	fmt = SAMPLEFORMAT_UINT
LVAL	1640:3	1640:3	12	fmt
FIELD	1640:3	1640:3	13	fmt
LEAF_NODE	1640:3	1640:3	14	fmt
ASSIGN_OP	1640:7	1640:7	12	=
LEAF_NODE	1640:7	1640:7	13	=
RVAL	1640:9	1640:9	12	SAMPLEFORMAT_UINT
FIELD	1640:9	1640:9	13	SAMPLEFORMAT_UINT
LEAF_NODE	1640:9	1640:9	14	SAMPLEFORMAT_UINT
LEAF_NODE	1640:26	1640:26	10	;
EXPR_STATEMENT	1641:3	1641:48	9	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 ) ;
EXPR	1641:3	1641:3	10	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
FUNCTION_CALL	1641:3	1641:47	11	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	1641:3	1641:3	12	TIFFSetField
LEAF_NODE	1641:3	1641:3	13	TIFFSetField
LEAF_NODE	1641:15	1641:15	12	(
ARGUMENT	1641:16	1641:16	12	tif
FIELD	1641:16	1641:16	13	tif
LEAF_NODE	1641:16	1641:16	14	tif
LEAF_NODE	1641:19	1641:19	12	,
ARGUMENT	1641:21	1641:21	12	TIFFTAG_SAMPLESPERPIXEL
FIELD	1641:21	1641:21	13	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	1641:21	1641:21	14	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	1641:44	1641:44	12	,
ARGUMENT	1641:46	1641:46	12	1
FIELD	1641:46	1641:46	13	1
LEAF_NODE	1641:46	1641:46	14	1
LEAF_NODE	1641:47	1641:47	12	)
LEAF_NODE	1641:48	1641:48	10	;
JUMP_STATEMENT	1642:3	1642:8	9	break DESTINATION ;
KEYWORD	1642:3	1642:3	10	break
LEAF_NODE	1642:3	1642:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1642:8	1642:8	10	;
LABEL	1643:2	1643:25	9	case SGILOGDATAFMT_8BIT :
LEAF_NODE	1643:2	1643:2	10	case
LEAF_NODE	1643:7	1643:7	10	SGILOGDATAFMT_8BIT
LEAF_NODE	1643:25	1643:25	10	:
EXPR_STATEMENT	1644:3	1644:10	9	bps = 8 ;
EXPR	1644:3	1644:3	10	bps = 8
ASSIGN	1644:3	1644:9	11	bps = 8
LVAL	1644:3	1644:3	12	bps
FIELD	1644:3	1644:3	13	bps
LEAF_NODE	1644:3	1644:3	14	bps
ASSIGN_OP	1644:7	1644:7	12	=
LEAF_NODE	1644:7	1644:7	13	=
RVAL	1644:9	1644:9	12	8
FIELD	1644:9	1644:9	13	8
LEAF_NODE	1644:9	1644:9	14	8
LEAF_NODE	1644:10	1644:10	10	;
EXPR_STATEMENT	1645:3	1645:26	9	fmt = SAMPLEFORMAT_UINT ;
EXPR	1645:3	1645:3	10	fmt = SAMPLEFORMAT_UINT
ASSIGN	1645:3	1645:9	11	fmt = SAMPLEFORMAT_UINT
LVAL	1645:3	1645:3	12	fmt
FIELD	1645:3	1645:3	13	fmt
LEAF_NODE	1645:3	1645:3	14	fmt
ASSIGN_OP	1645:7	1645:7	12	=
LEAF_NODE	1645:7	1645:7	13	=
RVAL	1645:9	1645:9	12	SAMPLEFORMAT_UINT
FIELD	1645:9	1645:9	13	SAMPLEFORMAT_UINT
LEAF_NODE	1645:9	1645:9	14	SAMPLEFORMAT_UINT
LEAF_NODE	1645:26	1645:26	10	;
JUMP_STATEMENT	1646:3	1646:8	9	break DESTINATION ;
KEYWORD	1646:3	1646:3	10	break
LEAF_NODE	1646:3	1646:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1646:8	1646:8	10	;
LABEL	1647:2	1647:9	9	default :
LEAF_NODE	1647:2	1647:2	10	default
LEAF_NODE	1647:9	1647:9	10	:
EXPR_STATEMENT	1648:3	1650:24	9	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Unknown data format %d for LogLuv compression" , sp -> user_datafmt ) ;
EXPR	1648:3	1648:3	10	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Unknown data format %d for LogLuv compression" , sp -> user_datafmt )
FUNCTION_CALL	1648:3	1650:23	11	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "Unknown data format %d for LogLuv compression" , sp -> user_datafmt )
CALLEE	1648:3	1648:3	12	TIFFErrorExt
LEAF_NODE	1648:3	1648:3	13	TIFFErrorExt
LEAF_NODE	1648:15	1648:15	12	(
ARGUMENT	1648:16	1648:16	12	tif -> tif_clientdata
FIELD	1648:16	1648:21	13	tif -> tif_clientdata
LEAF_NODE	1648:16	1648:16	14	tif
LEAF_NODE	1648:19	1648:19	14	->
LEAF_NODE	1648:21	1648:21	14	tif_clientdata
LEAF_NODE	1648:35	1648:35	12	,
ARGUMENT	1648:37	1648:37	12	tif -> tif_name
FIELD	1648:37	1648:42	13	tif -> tif_name
LEAF_NODE	1648:37	1648:37	14	tif
LEAF_NODE	1648:40	1648:40	14	->
LEAF_NODE	1648:42	1648:42	14	tif_name
LEAF_NODE	1648:50	1648:50	12	,
ARGUMENT	1649:7	1649:7	12	"Unknown data format %d for LogLuv compression"
FIELD	1649:7	1649:7	13	"Unknown data format %d for LogLuv compression"
LEAF_NODE	1649:7	1649:7	14	"Unknown data format %d for LogLuv compression"
LEAF_NODE	1649:54	1649:54	12	,
ARGUMENT	1650:7	1650:7	12	sp -> user_datafmt
FIELD	1650:7	1650:11	13	sp -> user_datafmt
LEAF_NODE	1650:7	1650:7	14	sp
LEAF_NODE	1650:9	1650:9	14	->
LEAF_NODE	1650:11	1650:11	14	user_datafmt
LEAF_NODE	1650:23	1650:23	12	)
LEAF_NODE	1650:24	1650:24	10	;
JUMP_STATEMENT	1651:3	1651:13	9	return ( 0 ) ;
KEYWORD	1651:3	1651:3	10	return
LEAF_NODE	1651:3	1651:3	11	return
DESTINATION	1651:10	1651:10	10	( 0 )
EXPR	1651:10	1651:12	11	( 0 )
LEAF_NODE	1651:10	1651:10	12	(
FIELD	1651:11	1651:11	12	0
LEAF_NODE	1651:11	1651:11	13	0
LEAF_NODE	1651:12	1651:12	12	)
LEAF_NODE	1651:13	1651:13	10	;
LEAF_NODE	1652:2	1652:2	8	}
EXPR_STATEMENT	1653:2	1653:47	6	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , bps ) ;
EXPR	1653:2	1653:2	7	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , bps )
FUNCTION_CALL	1653:2	1653:46	8	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , bps )
CALLEE	1653:2	1653:2	9	TIFFSetField
LEAF_NODE	1653:2	1653:2	10	TIFFSetField
LEAF_NODE	1653:14	1653:14	9	(
ARGUMENT	1653:15	1653:15	9	tif
FIELD	1653:15	1653:15	10	tif
LEAF_NODE	1653:15	1653:15	11	tif
LEAF_NODE	1653:18	1653:18	9	,
ARGUMENT	1653:20	1653:20	9	TIFFTAG_BITSPERSAMPLE
FIELD	1653:20	1653:20	10	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1653:20	1653:20	11	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1653:41	1653:41	9	,
ARGUMENT	1653:43	1653:43	9	bps
FIELD	1653:43	1653:43	10	bps
LEAF_NODE	1653:43	1653:43	11	bps
LEAF_NODE	1653:46	1653:46	9	)
LEAF_NODE	1653:47	1653:47	7	;
EXPR_STATEMENT	1654:2	1654:46	6	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , fmt ) ;
EXPR	1654:2	1654:2	7	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , fmt )
FUNCTION_CALL	1654:2	1654:45	8	TIFFSetField ( tif , TIFFTAG_SAMPLEFORMAT , fmt )
CALLEE	1654:2	1654:2	9	TIFFSetField
LEAF_NODE	1654:2	1654:2	10	TIFFSetField
LEAF_NODE	1654:14	1654:14	9	(
ARGUMENT	1654:15	1654:15	9	tif
FIELD	1654:15	1654:15	10	tif
LEAF_NODE	1654:15	1654:15	11	tif
LEAF_NODE	1654:18	1654:18	9	,
ARGUMENT	1654:20	1654:20	9	TIFFTAG_SAMPLEFORMAT
FIELD	1654:20	1654:20	10	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1654:20	1654:20	11	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	1654:40	1654:40	9	,
ARGUMENT	1654:42	1654:42	9	fmt
FIELD	1654:42	1654:42	10	fmt
LEAF_NODE	1654:42	1654:42	11	fmt
LEAF_NODE	1654:45	1654:45	9	)
LEAF_NODE	1654:46	1654:46	7	;
EXPR_STATEMENT	1658:2	1658:70	6	tif -> tif_tilesize = isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) - 1 ;
EXPR	1658:2	1658:2	7	tif -> tif_tilesize = isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) - 1
ASSIGN	1658:2	1658:22	8	tif -> tif_tilesize = isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) - 1
LVAL	1658:2	1658:2	9	tif -> tif_tilesize
FIELD	1658:2	1658:7	10	tif -> tif_tilesize
LEAF_NODE	1658:2	1658:2	11	tif
LEAF_NODE	1658:5	1658:5	11	->
LEAF_NODE	1658:7	1658:7	11	tif_tilesize
ASSIGN_OP	1658:20	1658:20	9	=
LEAF_NODE	1658:20	1658:20	10	=
RVAL	1658:22	1658:22	9	isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) - 1
COND_EXPR	1658:22	1658:68	10	isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) - 1
CONDITION	1658:22	1658:22	11	isTiled ( tif )
FUNCTION_CALL	1658:22	1658:33	12	isTiled ( tif )
CALLEE	1658:22	1658:22	13	isTiled
LEAF_NODE	1658:22	1658:22	14	isTiled
LEAF_NODE	1658:29	1658:29	13	(
ARGUMENT	1658:30	1658:30	13	tif
FIELD	1658:30	1658:30	14	tif
LEAF_NODE	1658:30	1658:30	15	tif
LEAF_NODE	1658:33	1658:33	13	)
LEAF_NODE	1658:35	1658:35	11	?
EXPR	1658:37	1658:37	11	TIFFTileSize ( tif )
FUNCTION_CALL	1658:37	1658:53	12	TIFFTileSize ( tif )
CALLEE	1658:37	1658:37	13	TIFFTileSize
LEAF_NODE	1658:37	1658:37	14	TIFFTileSize
LEAF_NODE	1658:49	1658:49	13	(
ARGUMENT	1658:50	1658:50	13	tif
FIELD	1658:50	1658:50	14	tif
LEAF_NODE	1658:50	1658:50	15	tif
LEAF_NODE	1658:53	1658:53	13	)
LEAF_NODE	1658:55	1658:55	11	:
LEAF_NODE	1658:57	1658:57	11	(
TYPE_NAME	1658:58	1658:58	11	tmsize_t
LEAF_NODE	1658:58	1658:58	12	tmsize_t
LEAF_NODE	1658:66	1658:66	11	)
UNARY_EXPR	1658:68	1658:69	11	- 1
UNARY_OPERATOR	1658:68	1658:68	12	-
LEAF_NODE	1658:68	1658:68	13	-
FIELD	1658:69	1658:69	12	1
LEAF_NODE	1658:69	1658:69	13	1
LEAF_NODE	1658:70	1658:70	7	;
EXPR_STATEMENT	1659:2	1659:47	6	tif -> tif_scanlinesize = TIFFScanlineSize ( tif ) ;
EXPR	1659:2	1659:2	7	tif -> tif_scanlinesize = TIFFScanlineSize ( tif )
ASSIGN	1659:2	1659:26	8	tif -> tif_scanlinesize = TIFFScanlineSize ( tif )
LVAL	1659:2	1659:2	9	tif -> tif_scanlinesize
FIELD	1659:2	1659:7	10	tif -> tif_scanlinesize
LEAF_NODE	1659:2	1659:2	11	tif
LEAF_NODE	1659:5	1659:5	11	->
LEAF_NODE	1659:7	1659:7	11	tif_scanlinesize
ASSIGN_OP	1659:24	1659:24	9	=
LEAF_NODE	1659:24	1659:24	10	=
RVAL	1659:26	1659:26	9	TIFFScanlineSize ( tif )
FUNCTION_CALL	1659:26	1659:46	10	TIFFScanlineSize ( tif )
CALLEE	1659:26	1659:26	11	TIFFScanlineSize
LEAF_NODE	1659:26	1659:26	12	TIFFScanlineSize
LEAF_NODE	1659:42	1659:42	11	(
ARGUMENT	1659:43	1659:43	11	tif
FIELD	1659:43	1659:43	12	tif
LEAF_NODE	1659:43	1659:43	13	tif
LEAF_NODE	1659:46	1659:46	11	)
LEAF_NODE	1659:47	1659:47	7	;
JUMP_STATEMENT	1660:2	1660:12	6	return ( 1 ) ;
KEYWORD	1660:2	1660:2	7	return
LEAF_NODE	1660:2	1660:2	8	return
DESTINATION	1660:9	1660:9	7	( 1 )
EXPR	1660:9	1660:11	8	( 1 )
LEAF_NODE	1660:9	1660:9	9	(
FIELD	1660:10	1660:10	9	1
LEAF_NODE	1660:10	1660:10	10	1
LEAF_NODE	1660:11	1660:11	9	)
LEAF_NODE	1660:12	1660:12	7	;
LABEL	1661:1	1661:26	6	case TIFFTAG_SGILOGENCODE :
LEAF_NODE	1661:1	1661:1	7	case
LEAF_NODE	1661:6	1661:6	7	TIFFTAG_SGILOGENCODE
LEAF_NODE	1661:26	1661:26	7	:
EXPR_STATEMENT	1662:2	1662:41	6	sp -> encode_meth = ( int ) va_arg ( ap , int ) ;
EXPR	1662:2	1662:2	7	sp -> encode_meth = ( int ) va_arg ( ap , int )
ASSIGN	1662:2	1662:20	8	sp -> encode_meth = ( int ) va_arg ( ap , int )
LVAL	1662:2	1662:2	9	sp -> encode_meth
FIELD	1662:2	1662:6	10	sp -> encode_meth
LEAF_NODE	1662:2	1662:2	11	sp
LEAF_NODE	1662:4	1662:4	11	->
LEAF_NODE	1662:6	1662:6	11	encode_meth
ASSIGN_OP	1662:18	1662:18	9	=
LEAF_NODE	1662:18	1662:18	10	=
RVAL	1662:20	1662:26	9	( int ) va_arg ( ap , int )
LEAF_NODE	1662:20	1662:20	10	(
TYPE_NAME	1662:21	1662:21	10	int
LEAF_NODE	1662:21	1662:21	11	int
LEAF_NODE	1662:24	1662:24	10	)
FUNCTION_CALL	1662:26	1662:40	10	va_arg ( ap , int )
CALLEE	1662:26	1662:26	11	va_arg
LEAF_NODE	1662:26	1662:26	12	va_arg
LEAF_NODE	1662:32	1662:32	11	(
ARGUMENT	1662:33	1662:33	11	ap
FIELD	1662:33	1662:33	12	ap
LEAF_NODE	1662:33	1662:33	13	ap
LEAF_NODE	1662:35	1662:35	11	,
ARGUMENT	1662:37	1662:37	11	int
FIELD	1662:37	1662:37	12	int
LEAF_NODE	1662:37	1662:37	13	int
LEAF_NODE	1662:40	1662:40	11	)
LEAF_NODE	1662:41	1662:41	7	;
SELECTION	1663:2	1664:49	6	
KEYWORD	1663:2	1663:2	7	if
LEAF_NODE	1663:2	1663:2	8	if
LEAF_NODE	1663:5	1663:5	7	(
CONDITION	1663:6	1663:6	7	sp -> encode_meth != SGILOGENCODE_NODITHER && sp -> encode_meth != SGILOGENCODE_RANDITHER
EXPR	1663:6	1663:6	8	sp -> encode_meth != SGILOGENCODE_NODITHER && sp -> encode_meth != SGILOGENCODE_RANDITHER
AND	1663:6	1664:6	9	sp -> encode_meth != SGILOGENCODE_NODITHER && sp -> encode_meth != SGILOGENCODE_RANDITHER
EXPR	1663:6	1663:25	10	sp -> encode_meth != SGILOGENCODE_NODITHER
FIELD	1663:6	1663:10	11	sp -> encode_meth
LEAF_NODE	1663:6	1663:6	12	sp
LEAF_NODE	1663:8	1663:8	12	->
LEAF_NODE	1663:10	1663:10	12	encode_meth
EQ_OPERATOR	1663:22	1663:22	11	!=
LEAF_NODE	1663:22	1663:22	12	!=
FIELD	1663:25	1663:25	11	SGILOGENCODE_NODITHER
LEAF_NODE	1663:25	1663:25	12	SGILOGENCODE_NODITHER
LEAF_NODE	1663:47	1663:47	10	&&
EXPR	1664:6	1664:25	10	sp -> encode_meth != SGILOGENCODE_RANDITHER
FIELD	1664:6	1664:10	11	sp -> encode_meth
LEAF_NODE	1664:6	1664:6	12	sp
LEAF_NODE	1664:8	1664:8	12	->
LEAF_NODE	1664:10	1664:10	12	encode_meth
EQ_OPERATOR	1664:22	1664:22	11	!=
LEAF_NODE	1664:22	1664:22	12	!=
FIELD	1664:25	1664:25	11	SGILOGENCODE_RANDITHER
LEAF_NODE	1664:25	1664:25	12	SGILOGENCODE_RANDITHER
LEAF_NODE	1664:47	1664:47	7	)
STATEMENTS	1664:49	1669:2	7	
LEAF_NODE	1664:49	1664:49	8	{
STATEMENTS	1665:3	1668:3	8	
EXPR_STATEMENT	1665:3	1667:23	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Unknown encoding %d for LogLuv compression" , sp -> encode_meth ) ;
EXPR	1665:3	1665:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Unknown encoding %d for LogLuv compression" , sp -> encode_meth )
FUNCTION_CALL	1665:3	1667:22	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Unknown encoding %d for LogLuv compression" , sp -> encode_meth )
CALLEE	1665:3	1665:3	12	TIFFErrorExt
LEAF_NODE	1665:3	1665:3	13	TIFFErrorExt
LEAF_NODE	1665:15	1665:15	12	(
ARGUMENT	1665:16	1665:16	12	tif -> tif_clientdata
FIELD	1665:16	1665:21	13	tif -> tif_clientdata
LEAF_NODE	1665:16	1665:16	14	tif
LEAF_NODE	1665:19	1665:19	14	->
LEAF_NODE	1665:21	1665:21	14	tif_clientdata
LEAF_NODE	1665:35	1665:35	12	,
ARGUMENT	1665:37	1665:37	12	module
FIELD	1665:37	1665:37	13	module
LEAF_NODE	1665:37	1665:37	14	module
LEAF_NODE	1665:43	1665:43	12	,
ARGUMENT	1666:7	1666:7	12	"Unknown encoding %d for LogLuv compression"
FIELD	1666:7	1666:7	13	"Unknown encoding %d for LogLuv compression"
LEAF_NODE	1666:7	1666:7	14	"Unknown encoding %d for LogLuv compression"
LEAF_NODE	1666:51	1666:51	12	,
ARGUMENT	1667:7	1667:7	12	sp -> encode_meth
FIELD	1667:7	1667:11	13	sp -> encode_meth
LEAF_NODE	1667:7	1667:7	14	sp
LEAF_NODE	1667:9	1667:9	14	->
LEAF_NODE	1667:11	1667:11	14	encode_meth
LEAF_NODE	1667:22	1667:22	12	)
LEAF_NODE	1667:23	1667:23	10	;
JUMP_STATEMENT	1668:3	1668:13	9	return ( 0 ) ;
KEYWORD	1668:3	1668:3	10	return
LEAF_NODE	1668:3	1668:3	11	return
DESTINATION	1668:10	1668:10	10	( 0 )
EXPR	1668:10	1668:12	11	( 0 )
LEAF_NODE	1668:10	1668:10	12	(
FIELD	1668:11	1668:11	12	0
LEAF_NODE	1668:11	1668:11	13	0
LEAF_NODE	1668:12	1668:12	12	)
LEAF_NODE	1668:13	1668:13	10	;
LEAF_NODE	1669:2	1669:2	8	}
JUMP_STATEMENT	1670:2	1670:12	6	return ( 1 ) ;
KEYWORD	1670:2	1670:2	7	return
LEAF_NODE	1670:2	1670:2	8	return
DESTINATION	1670:9	1670:9	7	( 1 )
EXPR	1670:9	1670:11	8	( 1 )
LEAF_NODE	1670:9	1670:9	9	(
FIELD	1670:10	1670:10	9	1
LEAF_NODE	1670:10	1670:10	10	1
LEAF_NODE	1670:11	1670:11	9	)
LEAF_NODE	1670:12	1670:12	7	;
LABEL	1671:1	1671:8	6	default :
LEAF_NODE	1671:1	1671:1	7	default
LEAF_NODE	1671:8	1671:8	7	:
JUMP_STATEMENT	1672:2	1672:40	6	return ( * sp -> vsetparent ) ( tif , tag , ap ) ;
KEYWORD	1672:2	1672:2	7	return
LEAF_NODE	1672:2	1672:2	8	return
DESTINATION	1672:9	1672:9	7	( * sp -> vsetparent ) ( tif , tag , ap )
EXPR	1672:9	1672:9	8	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	1672:9	1672:39	9	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	1672:9	1672:25	10	( * sp -> vsetparent )
LEAF_NODE	1672:9	1672:9	11	(
UNARY_EXPR	1672:10	1672:11	11	* sp -> vsetparent
UNARY_OPERATOR	1672:10	1672:10	12	*
LEAF_NODE	1672:10	1672:10	13	*
FIELD	1672:11	1672:15	12	sp -> vsetparent
LEAF_NODE	1672:11	1672:11	13	sp
LEAF_NODE	1672:13	1672:13	13	->
LEAF_NODE	1672:15	1672:15	13	vsetparent
LEAF_NODE	1672:25	1672:25	11	)
LEAF_NODE	1672:26	1672:26	10	(
ARGUMENT	1672:27	1672:27	10	tif
FIELD	1672:27	1672:27	11	tif
LEAF_NODE	1672:27	1672:27	12	tif
LEAF_NODE	1672:30	1672:30	10	,
ARGUMENT	1672:32	1672:32	10	tag
FIELD	1672:32	1672:32	11	tag
LEAF_NODE	1672:32	1672:32	12	tag
LEAF_NODE	1672:35	1672:35	10	,
ARGUMENT	1672:37	1672:37	10	ap
FIELD	1672:37	1672:37	11	ap
LEAF_NODE	1672:37	1672:37	12	ap
LEAF_NODE	1672:39	1672:39	10	)
LEAF_NODE	1672:40	1672:40	7	;
LEAF_NODE	1673:1	1673:1	5	}
LEAF_NODE	1674:0	1674:0	2	}
FUNCTION_DEF	1676:0	1688:0	1	
RETURN_TYPE	1676:0	1676:7	2	static int
LEAF_NODE	1676:0	1676:0	3	static
TYPE_NAME	1676:7	1676:7	3	int
LEAF_NODE	1676:7	1676:7	4	int
FUNCTION_NAME	1677:0	1677:0	2	LogLuvVGetField
LEAF_NODE	1677:0	1677:0	3	LogLuvVGetField
PARAMETER_LIST	1677:15	1677:49	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	1677:15	1677:15	3	(
PARAMETER_DECL	1677:16	1677:22	3	TIFF * tif
TYPE	1677:16	1677:20	4	TIFF *
TYPE_NAME	1677:16	1677:16	5	TIFF
LEAF_NODE	1677:16	1677:16	6	TIFF
POINTER	1677:20	1677:20	5	*
LEAF_NODE	1677:20	1677:20	6	*
NAME	1677:22	1677:22	4	tif
LEAF_NODE	1677:22	1677:22	5	tif
LEAF_NODE	1677:25	1677:25	3	,
PARAMETER_DECL	1677:27	1677:34	3	uint32 tag
TYPE	1677:27	1677:27	4	uint32
TYPE_NAME	1677:27	1677:27	5	uint32
LEAF_NODE	1677:27	1677:27	6	uint32
NAME	1677:34	1677:34	4	tag
LEAF_NODE	1677:34	1677:34	5	tag
LEAF_NODE	1677:37	1677:37	3	,
PARAMETER_DECL	1677:39	1677:47	3	va_list ap
TYPE	1677:39	1677:39	4	va_list
TYPE_NAME	1677:39	1677:39	5	va_list
LEAF_NODE	1677:39	1677:39	6	va_list
NAME	1677:47	1677:47	4	ap
LEAF_NODE	1677:47	1677:47	5	ap
LEAF_NODE	1677:49	1677:49	3	)
LEAF_NODE	1678:0	1678:0	2	{
STATEMENTS	1679:1	1681:1	2	
SIMPLE_DECL	1679:1	1679:47	3	LogLuvState * sp ; sp = ( LogLuvState * ) tif -> tif_data ;
VAR_DECL	1679:1	1679:14	4	LogLuvState * sp ; sp = ( LogLuvState * ) tif -> tif_data
TYPE	1679:1	1679:13	5	LogLuvState *
TYPE_NAME	1679:1	1679:1	6	LogLuvState
LEAF_NODE	1679:1	1679:1	7	LogLuvState
POINTER	1679:13	1679:13	6	*
LEAF_NODE	1679:13	1679:13	7	*
NAME	1679:14	1679:14	5	sp
LEAF_NODE	1679:14	1679:14	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1679:14	1679:14	5	sp = ( LogLuvState * ) tif -> tif_data
ASSIGN	1679:14	1679:19	6	sp = ( LogLuvState * ) tif -> tif_data
LVAL	1679:14	1679:14	7	sp
NAME	1679:14	1679:14	8	sp
LEAF_NODE	1679:14	1679:14	9	sp
ASSIGN_OP	1679:17	1679:17	7	=
LEAF_NODE	1679:17	1679:17	8	=
RVAL	1679:19	1679:34	7	( LogLuvState * ) tif -> tif_data
LEAF_NODE	1679:19	1679:19	8	(
TYPE_NAME	1679:20	1679:20	8	LogLuvState
LEAF_NODE	1679:20	1679:20	9	LogLuvState
LEAF_NODE	1679:32	1679:32	8	*
LEAF_NODE	1679:33	1679:33	8	)
FIELD	1679:34	1679:39	8	tif -> tif_data
LEAF_NODE	1679:34	1679:34	9	tif
LEAF_NODE	1679:37	1679:37	9	->
LEAF_NODE	1679:39	1679:39	9	tif_data
LEAF_NODE	1679:47	1679:47	4	;
SELECTION	1681:1	1681:14	3	
KEYWORD	1681:1	1681:1	4	switch
LEAF_NODE	1681:1	1681:1	5	switch
LEAF_NODE	1681:8	1681:8	4	(
CONDITION	1681:9	1681:9	4	tag
EXPR	1681:9	1681:9	5	tag
FIELD	1681:9	1681:9	6	tag
LEAF_NODE	1681:9	1681:9	7	tag
LEAF_NODE	1681:12	1681:12	4	)
STATEMENTS	1681:14	1687:1	4	
LEAF_NODE	1681:14	1681:14	5	{
STATEMENTS	1682:1	1686:2	5	
LABEL	1682:1	1682:27	6	case TIFFTAG_SGILOGDATAFMT :
LEAF_NODE	1682:1	1682:1	7	case
LEAF_NODE	1682:6	1682:6	7	TIFFTAG_SGILOGDATAFMT
LEAF_NODE	1682:27	1682:27	7	:
LEAF_NODE	1683:2	1683:2	6	*
LEAF_NODE	1683:3	1683:3	6	va_arg
LEAF_NODE	1683:9	1683:9	6	(
LEAF_NODE	1683:10	1683:10	6	ap
LEAF_NODE	1683:12	1683:12	6	,
LEAF_NODE	1683:14	1683:14	6	int
LEAF_NODE	1683:17	1683:17	6	*
LEAF_NODE	1683:18	1683:18	6	)
LEAF_NODE	1683:20	1683:20	6	=
EXPR_STATEMENT	1683:22	1683:38	6	sp -> user_datafmt ;
EXPR	1683:22	1683:22	7	sp -> user_datafmt
FIELD	1683:22	1683:26	8	sp -> user_datafmt
LEAF_NODE	1683:22	1683:22	9	sp
LEAF_NODE	1683:24	1683:24	9	->
LEAF_NODE	1683:26	1683:26	9	user_datafmt
LEAF_NODE	1683:38	1683:38	7	;
JUMP_STATEMENT	1684:2	1684:12	6	return ( 1 ) ;
KEYWORD	1684:2	1684:2	7	return
LEAF_NODE	1684:2	1684:2	8	return
DESTINATION	1684:9	1684:9	7	( 1 )
EXPR	1684:9	1684:11	8	( 1 )
LEAF_NODE	1684:9	1684:9	9	(
FIELD	1684:10	1684:10	9	1
LEAF_NODE	1684:10	1684:10	10	1
LEAF_NODE	1684:11	1684:11	9	)
LEAF_NODE	1684:12	1684:12	7	;
LABEL	1685:1	1685:8	6	default :
LEAF_NODE	1685:1	1685:1	7	default
LEAF_NODE	1685:8	1685:8	7	:
JUMP_STATEMENT	1686:2	1686:40	6	return ( * sp -> vgetparent ) ( tif , tag , ap ) ;
KEYWORD	1686:2	1686:2	7	return
LEAF_NODE	1686:2	1686:2	8	return
DESTINATION	1686:9	1686:9	7	( * sp -> vgetparent ) ( tif , tag , ap )
EXPR	1686:9	1686:9	8	( * sp -> vgetparent ) ( tif , tag , ap )
FUNCTION_CALL	1686:9	1686:39	9	( * sp -> vgetparent ) ( tif , tag , ap )
CALLEE	1686:9	1686:25	10	( * sp -> vgetparent )
LEAF_NODE	1686:9	1686:9	11	(
UNARY_EXPR	1686:10	1686:11	11	* sp -> vgetparent
UNARY_OPERATOR	1686:10	1686:10	12	*
LEAF_NODE	1686:10	1686:10	13	*
FIELD	1686:11	1686:15	12	sp -> vgetparent
LEAF_NODE	1686:11	1686:11	13	sp
LEAF_NODE	1686:13	1686:13	13	->
LEAF_NODE	1686:15	1686:15	13	vgetparent
LEAF_NODE	1686:25	1686:25	11	)
LEAF_NODE	1686:26	1686:26	10	(
ARGUMENT	1686:27	1686:27	10	tif
FIELD	1686:27	1686:27	11	tif
LEAF_NODE	1686:27	1686:27	12	tif
LEAF_NODE	1686:30	1686:30	10	,
ARGUMENT	1686:32	1686:32	10	tag
FIELD	1686:32	1686:32	11	tag
LEAF_NODE	1686:32	1686:32	12	tag
LEAF_NODE	1686:35	1686:35	10	,
ARGUMENT	1686:37	1686:37	10	ap
FIELD	1686:37	1686:37	11	ap
LEAF_NODE	1686:37	1686:37	12	ap
LEAF_NODE	1686:39	1686:39	10	)
LEAF_NODE	1686:40	1686:40	7	;
LEAF_NODE	1687:1	1687:1	5	}
LEAF_NODE	1688:0	1688:0	2	}
FUNCTION_DEF	1695:0	1754:0	1	
RETURN_TYPE	1695:0	1695:0	2	int
TYPE_NAME	1695:0	1695:0	3	int
LEAF_NODE	1695:0	1695:0	4	int
FUNCTION_NAME	1696:0	1696:0	2	TIFFInitSGILog
LEAF_NODE	1696:0	1696:0	3	TIFFInitSGILog
PARAMETER_LIST	1696:14	1696:36	2	( TIFF * tif , int scheme )
LEAF_NODE	1696:14	1696:14	3	(
PARAMETER_DECL	1696:15	1696:21	3	TIFF * tif
TYPE	1696:15	1696:19	4	TIFF *
TYPE_NAME	1696:15	1696:15	5	TIFF
LEAF_NODE	1696:15	1696:15	6	TIFF
POINTER	1696:19	1696:19	5	*
LEAF_NODE	1696:19	1696:19	6	*
NAME	1696:21	1696:21	4	tif
LEAF_NODE	1696:21	1696:21	5	tif
LEAF_NODE	1696:24	1696:24	3	,
PARAMETER_DECL	1696:26	1696:30	3	int scheme
TYPE	1696:26	1696:26	4	int
TYPE_NAME	1696:26	1696:26	5	int
LEAF_NODE	1696:26	1696:26	6	int
NAME	1696:30	1696:30	4	scheme
LEAF_NODE	1696:30	1696:30	5	scheme
LEAF_NODE	1696:36	1696:36	3	)
LEAF_NODE	1697:0	1697:0	2	{
STATEMENTS	1698:1	1753:1	2	
LEAF_NODE	1698:1	1698:1	3	static
SIMPLE_DECL	1698:8	1698:46	3	const char [ ] module ; module = "TIFFInitSGILog" ;
VAR_DECL	1698:8	1698:19	4	const char [ ] module ; module = "TIFFInitSGILog"
TYPE	1698:8	1698:25	5	const char [ ]
TYPE_NAME	1698:8	1698:14	6	const char
LEAF_NODE	1698:8	1698:8	7	const
LEAF_NODE	1698:14	1698:14	7	char
TYPE_SUFFIX	1698:25	1698:26	6	[ ]
LEAF_NODE	1698:25	1698:25	7	[
LEAF_NODE	1698:26	1698:26	7	]
NAME	1698:19	1698:19	5	module
LEAF_NODE	1698:19	1698:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1698:19	1698:19	5	module = "TIFFInitSGILog"
ASSIGN	1698:19	1698:30	6	module = "TIFFInitSGILog"
LVAL	1698:19	1698:19	7	module
NAME	1698:19	1698:19	8	module
LEAF_NODE	1698:19	1698:19	9	module
ASSIGN_OP	1698:28	1698:28	7	=
LEAF_NODE	1698:28	1698:28	8	=
RVAL	1698:30	1698:30	7	"TIFFInitSGILog"
FIELD	1698:30	1698:30	8	"TIFFInitSGILog"
LEAF_NODE	1698:30	1698:30	9	"TIFFInitSGILog"
LEAF_NODE	1698:46	1698:46	4	;
SIMPLE_DECL	1699:1	1699:16	3	LogLuvState * sp ;
VAR_DECL	1699:1	1699:14	4	LogLuvState * sp
TYPE	1699:1	1699:12	5	LogLuvState *
TYPE_NAME	1699:1	1699:1	6	LogLuvState
LEAF_NODE	1699:1	1699:1	7	LogLuvState
POINTER	1699:12	1699:12	6	*
LEAF_NODE	1699:12	1699:12	7	*
NAME	1699:14	1699:14	5	sp
LEAF_NODE	1699:14	1699:14	6	sp
LEAF_NODE	1699:16	1699:16	4	;
EXPR_STATEMENT	1701:1	1701:71	3	assert ( scheme == COMPRESSION_SGILOG24 || scheme == COMPRESSION_SGILOG ) ;
EXPR	1701:1	1701:1	4	assert ( scheme == COMPRESSION_SGILOG24 || scheme == COMPRESSION_SGILOG )
FUNCTION_CALL	1701:1	1701:70	5	assert ( scheme == COMPRESSION_SGILOG24 || scheme == COMPRESSION_SGILOG )
CALLEE	1701:1	1701:1	6	assert
LEAF_NODE	1701:1	1701:1	7	assert
LEAF_NODE	1701:7	1701:7	6	(
ARGUMENT	1701:8	1701:8	6	scheme == COMPRESSION_SGILOG24 || scheme == COMPRESSION_SGILOG
OR	1701:8	1701:42	7	scheme == COMPRESSION_SGILOG24 || scheme == COMPRESSION_SGILOG
EXPR	1701:8	1701:18	8	scheme == COMPRESSION_SGILOG24
FIELD	1701:8	1701:8	9	scheme
LEAF_NODE	1701:8	1701:8	10	scheme
EQ_OPERATOR	1701:15	1701:15	9	==
LEAF_NODE	1701:15	1701:15	10	==
FIELD	1701:18	1701:18	9	COMPRESSION_SGILOG24
LEAF_NODE	1701:18	1701:18	10	COMPRESSION_SGILOG24
LEAF_NODE	1701:39	1701:39	8	||
EXPR	1701:42	1701:52	8	scheme == COMPRESSION_SGILOG
FIELD	1701:42	1701:42	9	scheme
LEAF_NODE	1701:42	1701:42	10	scheme
EQ_OPERATOR	1701:49	1701:49	9	==
LEAF_NODE	1701:49	1701:49	10	==
FIELD	1701:52	1701:52	9	COMPRESSION_SGILOG
LEAF_NODE	1701:52	1701:52	10	COMPRESSION_SGILOG
LEAF_NODE	1701:70	1701:70	6	)
LEAF_NODE	1701:71	1701:71	4	;
SELECTION	1706:1	1707:40	3	
KEYWORD	1706:1	1706:1	4	if
LEAF_NODE	1706:1	1706:1	5	if
LEAF_NODE	1706:4	1706:4	4	(
CONDITION	1706:5	1706:5	4	! _TIFFMergeFields ( tif , LogLuvFields , TIFFArrayCount ( LogLuvFields ) )
EXPR	1706:5	1706:5	5	! _TIFFMergeFields ( tif , LogLuvFields , TIFFArrayCount ( LogLuvFields ) )
UNARY_EXPR	1706:5	1706:6	6	! _TIFFMergeFields ( tif , LogLuvFields , TIFFArrayCount ( LogLuvFields ) )
UNARY_OPERATOR	1706:5	1706:5	7	!
LEAF_NODE	1706:5	1706:5	8	!
FUNCTION_CALL	1706:6	1707:37	7	_TIFFMergeFields ( tif , LogLuvFields , TIFFArrayCount ( LogLuvFields ) )
CALLEE	1706:6	1706:6	8	_TIFFMergeFields
LEAF_NODE	1706:6	1706:6	9	_TIFFMergeFields
LEAF_NODE	1706:22	1706:22	8	(
ARGUMENT	1706:23	1706:23	8	tif
FIELD	1706:23	1706:23	9	tif
LEAF_NODE	1706:23	1706:23	10	tif
LEAF_NODE	1706:26	1706:26	8	,
ARGUMENT	1706:28	1706:28	8	LogLuvFields
FIELD	1706:28	1706:28	9	LogLuvFields
LEAF_NODE	1706:28	1706:28	10	LogLuvFields
LEAF_NODE	1706:40	1706:40	8	,
ARGUMENT	1707:9	1707:9	8	TIFFArrayCount ( LogLuvFields )
FUNCTION_CALL	1707:9	1707:36	9	TIFFArrayCount ( LogLuvFields )
CALLEE	1707:9	1707:9	10	TIFFArrayCount
LEAF_NODE	1707:9	1707:9	11	TIFFArrayCount
LEAF_NODE	1707:23	1707:23	10	(
ARGUMENT	1707:24	1707:24	10	LogLuvFields
FIELD	1707:24	1707:24	11	LogLuvFields
LEAF_NODE	1707:24	1707:24	12	LogLuvFields
LEAF_NODE	1707:36	1707:36	10	)
LEAF_NODE	1707:37	1707:37	8	)
LEAF_NODE	1707:38	1707:38	4	)
STATEMENTS	1707:40	1711:1	4	
LEAF_NODE	1707:40	1707:40	5	{
STATEMENTS	1708:2	1710:2	5	
EXPR_STATEMENT	1708:2	1709:50	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging SGILog codec-specific tags failed" ) ;
EXPR	1708:2	1708:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging SGILog codec-specific tags failed" )
FUNCTION_CALL	1708:2	1709:49	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging SGILog codec-specific tags failed" )
CALLEE	1708:2	1708:2	9	TIFFErrorExt
LEAF_NODE	1708:2	1708:2	10	TIFFErrorExt
LEAF_NODE	1708:14	1708:14	9	(
ARGUMENT	1708:15	1708:15	9	tif -> tif_clientdata
FIELD	1708:15	1708:20	10	tif -> tif_clientdata
LEAF_NODE	1708:15	1708:15	11	tif
LEAF_NODE	1708:18	1708:18	11	->
LEAF_NODE	1708:20	1708:20	11	tif_clientdata
LEAF_NODE	1708:34	1708:34	9	,
ARGUMENT	1708:36	1708:36	9	module
FIELD	1708:36	1708:36	10	module
LEAF_NODE	1708:36	1708:36	11	module
LEAF_NODE	1708:42	1708:42	9	,
ARGUMENT	1709:6	1709:6	9	"Merging SGILog codec-specific tags failed"
FIELD	1709:6	1709:6	10	"Merging SGILog codec-specific tags failed"
LEAF_NODE	1709:6	1709:6	11	"Merging SGILog codec-specific tags failed"
LEAF_NODE	1709:49	1709:49	9	)
LEAF_NODE	1709:50	1709:50	7	;
JUMP_STATEMENT	1710:2	1710:10	6	return 0 ;
KEYWORD	1710:2	1710:2	7	return
LEAF_NODE	1710:2	1710:2	8	return
DESTINATION	1710:9	1710:9	7	0
EXPR	1710:9	1710:9	8	0
FIELD	1710:9	1710:9	9	0
LEAF_NODE	1710:9	1710:9	10	0
LEAF_NODE	1710:10	1710:10	7	;
LEAF_NODE	1711:1	1711:1	5	}
EXPR_STATEMENT	1716:1	1716:59	3	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( LogLuvState ) ) ;
EXPR	1716:1	1716:1	4	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( LogLuvState ) )
ASSIGN	1716:1	1716:17	5	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( LogLuvState ) )
LVAL	1716:1	1716:1	6	tif -> tif_data
FIELD	1716:1	1716:6	7	tif -> tif_data
LEAF_NODE	1716:1	1716:1	8	tif
LEAF_NODE	1716:4	1716:4	8	->
LEAF_NODE	1716:6	1716:6	8	tif_data
ASSIGN_OP	1716:15	1716:15	6	=
LEAF_NODE	1716:15	1716:15	7	=
RVAL	1716:17	1716:26	6	( uint8 * ) _TIFFmalloc ( sizeof ( LogLuvState ) )
LEAF_NODE	1716:17	1716:17	7	(
TYPE_NAME	1716:18	1716:18	7	uint8
LEAF_NODE	1716:18	1716:18	8	uint8
LEAF_NODE	1716:23	1716:23	7	*
LEAF_NODE	1716:24	1716:24	7	)
FUNCTION_CALL	1716:26	1716:58	7	_TIFFmalloc ( sizeof ( LogLuvState ) )
CALLEE	1716:26	1716:26	8	_TIFFmalloc
LEAF_NODE	1716:26	1716:26	9	_TIFFmalloc
LEAF_NODE	1716:37	1716:37	8	(
ARGUMENT	1716:38	1716:38	8	sizeof ( LogLuvState )
FUNCTION_CALL	1716:38	1716:57	9	sizeof ( LogLuvState )
CALLEE	1716:38	1716:38	10	sizeof
LEAF_NODE	1716:38	1716:38	11	sizeof
LEAF_NODE	1716:45	1716:45	10	(
ARGUMENT	1716:46	1716:46	10	LogLuvState
FIELD	1716:46	1716:46	11	LogLuvState
LEAF_NODE	1716:46	1716:46	12	LogLuvState
LEAF_NODE	1716:57	1716:57	10	)
LEAF_NODE	1716:58	1716:58	8	)
LEAF_NODE	1716:59	1716:59	4	;
SELECTION	1717:1	1718:2	3	
KEYWORD	1717:1	1717:1	4	if
LEAF_NODE	1717:1	1717:1	5	if
LEAF_NODE	1717:4	1717:4	4	(
CONDITION	1717:5	1717:5	4	tif -> tif_data == NULL
EXPR	1717:5	1717:22	5	tif -> tif_data == NULL
FIELD	1717:5	1717:10	6	tif -> tif_data
LEAF_NODE	1717:5	1717:5	7	tif
LEAF_NODE	1717:8	1717:8	7	->
LEAF_NODE	1717:10	1717:10	7	tif_data
EQ_OPERATOR	1717:19	1717:19	6	==
LEAF_NODE	1717:19	1717:19	7	==
FIELD	1717:22	1717:22	6	NULL
LEAF_NODE	1717:22	1717:22	7	NULL
LEAF_NODE	1717:26	1717:26	4	)
STATEMENTS	1718:2	1718:2	4	
JUMP_STATEMENT	1718:2	1718:10	5	goto bad ;
KEYWORD	1718:2	1718:2	6	goto
LEAF_NODE	1718:2	1718:2	7	goto
DESTINATION	1718:7	1718:7	6	bad
LEAF_NODE	1718:7	1718:7	7	bad
LEAF_NODE	1718:10	1718:10	6	;
EXPR_STATEMENT	1719:1	1719:34	3	sp = ( LogLuvState * ) tif -> tif_data ;
EXPR	1719:1	1719:1	4	sp = ( LogLuvState * ) tif -> tif_data
ASSIGN	1719:1	1719:6	5	sp = ( LogLuvState * ) tif -> tif_data
LVAL	1719:1	1719:1	6	sp
FIELD	1719:1	1719:1	7	sp
LEAF_NODE	1719:1	1719:1	8	sp
ASSIGN_OP	1719:4	1719:4	6	=
LEAF_NODE	1719:4	1719:4	7	=
RVAL	1719:6	1719:21	6	( LogLuvState * ) tif -> tif_data
LEAF_NODE	1719:6	1719:6	7	(
TYPE_NAME	1719:7	1719:7	7	LogLuvState
LEAF_NODE	1719:7	1719:7	8	LogLuvState
LEAF_NODE	1719:18	1719:18	7	*
LEAF_NODE	1719:19	1719:19	7	)
FIELD	1719:21	1719:26	7	tif -> tif_data
LEAF_NODE	1719:21	1719:21	8	tif
LEAF_NODE	1719:24	1719:24	8	->
LEAF_NODE	1719:26	1719:26	8	tif_data
LEAF_NODE	1719:34	1719:34	4	;
EXPR_STATEMENT	1720:1	1720:40	3	_TIFFmemset ( ( void * ) sp , 0 , sizeof ( * sp ) ) ;
EXPR	1720:1	1720:1	4	_TIFFmemset ( ( void * ) sp , 0 , sizeof ( * sp ) )
FUNCTION_CALL	1720:1	1720:39	5	_TIFFmemset ( ( void * ) sp , 0 , sizeof ( * sp ) )
CALLEE	1720:1	1720:1	6	_TIFFmemset
LEAF_NODE	1720:1	1720:1	7	_TIFFmemset
LEAF_NODE	1720:12	1720:12	6	(
ARGUMENT	1720:13	1720:20	6	( void * ) sp
LEAF_NODE	1720:13	1720:13	7	(
TYPE_NAME	1720:14	1720:14	7	void
LEAF_NODE	1720:14	1720:14	8	void
LEAF_NODE	1720:18	1720:18	7	*
LEAF_NODE	1720:19	1720:19	7	)
FIELD	1720:20	1720:20	7	sp
LEAF_NODE	1720:20	1720:20	8	sp
LEAF_NODE	1720:22	1720:22	6	,
ARGUMENT	1720:24	1720:24	6	0
FIELD	1720:24	1720:24	7	0
LEAF_NODE	1720:24	1720:24	8	0
LEAF_NODE	1720:25	1720:25	6	,
ARGUMENT	1720:27	1720:27	6	sizeof ( * sp )
FUNCTION_CALL	1720:27	1720:38	7	sizeof ( * sp )
CALLEE	1720:27	1720:27	8	sizeof
LEAF_NODE	1720:27	1720:27	9	sizeof
LEAF_NODE	1720:34	1720:34	8	(
ARGUMENT	1720:35	1720:35	8	* sp
UNARY_EXPR	1720:35	1720:36	9	* sp
UNARY_OPERATOR	1720:35	1720:35	10	*
LEAF_NODE	1720:35	1720:35	11	*
FIELD	1720:36	1720:36	10	sp
LEAF_NODE	1720:36	1720:36	11	sp
LEAF_NODE	1720:38	1720:38	8	)
LEAF_NODE	1720:39	1720:39	6	)
LEAF_NODE	1720:40	1720:40	4	;
EXPR_STATEMENT	1721:1	1721:41	3	sp -> user_datafmt = SGILOGDATAFMT_UNKNOWN ;
EXPR	1721:1	1721:1	4	sp -> user_datafmt = SGILOGDATAFMT_UNKNOWN
ASSIGN	1721:1	1721:20	5	sp -> user_datafmt = SGILOGDATAFMT_UNKNOWN
LVAL	1721:1	1721:1	6	sp -> user_datafmt
FIELD	1721:1	1721:5	7	sp -> user_datafmt
LEAF_NODE	1721:1	1721:1	8	sp
LEAF_NODE	1721:3	1721:3	8	->
LEAF_NODE	1721:5	1721:5	8	user_datafmt
ASSIGN_OP	1721:18	1721:18	6	=
LEAF_NODE	1721:18	1721:18	7	=
RVAL	1721:20	1721:20	6	SGILOGDATAFMT_UNKNOWN
FIELD	1721:20	1721:20	7	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1721:20	1721:20	8	SGILOGDATAFMT_UNKNOWN
LEAF_NODE	1721:41	1721:41	4	;
EXPR_STATEMENT	1722:1	1723:51	3	sp -> encode_meth = ( scheme == COMPRESSION_SGILOG24 ) ? SGILOGENCODE_RANDITHER : SGILOGENCODE_NODITHER ;
EXPR	1722:1	1722:1	4	sp -> encode_meth = ( scheme == COMPRESSION_SGILOG24 ) ? SGILOGENCODE_RANDITHER : SGILOGENCODE_NODITHER
ASSIGN	1722:1	1722:19	5	sp -> encode_meth = ( scheme == COMPRESSION_SGILOG24 ) ? SGILOGENCODE_RANDITHER : SGILOGENCODE_NODITHER
LVAL	1722:1	1722:1	6	sp -> encode_meth
FIELD	1722:1	1722:5	7	sp -> encode_meth
LEAF_NODE	1722:1	1722:1	8	sp
LEAF_NODE	1722:3	1722:3	8	->
LEAF_NODE	1722:5	1722:5	8	encode_meth
ASSIGN_OP	1722:17	1722:17	6	=
LEAF_NODE	1722:17	1722:17	7	=
RVAL	1722:19	1722:19	6	( scheme == COMPRESSION_SGILOG24 ) ? SGILOGENCODE_RANDITHER : SGILOGENCODE_NODITHER
COND_EXPR	1722:19	1723:30	7	( scheme == COMPRESSION_SGILOG24 ) ? SGILOGENCODE_RANDITHER : SGILOGENCODE_NODITHER
CONDITION	1722:19	1722:50	8	( scheme == COMPRESSION_SGILOG24 )
LEAF_NODE	1722:19	1722:19	9	(
FIELD	1722:20	1722:20	9	scheme
LEAF_NODE	1722:20	1722:20	10	scheme
EQ_OPERATOR	1722:27	1722:27	9	==
LEAF_NODE	1722:27	1722:27	10	==
FIELD	1722:30	1722:30	9	COMPRESSION_SGILOG24
LEAF_NODE	1722:30	1722:30	10	COMPRESSION_SGILOG24
LEAF_NODE	1722:50	1722:50	9	)
LEAF_NODE	1722:52	1722:52	8	?
EXPR	1723:5	1723:5	8	SGILOGENCODE_RANDITHER
FIELD	1723:5	1723:5	9	SGILOGENCODE_RANDITHER
LEAF_NODE	1723:5	1723:5	10	SGILOGENCODE_RANDITHER
LEAF_NODE	1723:28	1723:28	8	:
FIELD	1723:30	1723:30	8	SGILOGENCODE_NODITHER
LEAF_NODE	1723:30	1723:30	9	SGILOGENCODE_NODITHER
LEAF_NODE	1723:51	1723:51	4	;
EXPR_STATEMENT	1724:1	1724:23	3	sp -> tfunc = _logLuvNop ;
EXPR	1724:1	1724:1	4	sp -> tfunc = _logLuvNop
ASSIGN	1724:1	1724:13	5	sp -> tfunc = _logLuvNop
LVAL	1724:1	1724:1	6	sp -> tfunc
FIELD	1724:1	1724:5	7	sp -> tfunc
LEAF_NODE	1724:1	1724:1	8	sp
LEAF_NODE	1724:3	1724:3	8	->
LEAF_NODE	1724:5	1724:5	8	tfunc
ASSIGN_OP	1724:11	1724:11	6	=
LEAF_NODE	1724:11	1724:11	7	=
RVAL	1724:13	1724:13	6	_logLuvNop
FIELD	1724:13	1724:13	7	_logLuvNop
LEAF_NODE	1724:13	1724:13	8	_logLuvNop
LEAF_NODE	1724:23	1724:23	4	;
EXPR_STATEMENT	1731:1	1731:37	3	tif -> tif_fixuptags = LogLuvFixupTags ;
EXPR	1731:1	1731:1	4	tif -> tif_fixuptags = LogLuvFixupTags
ASSIGN	1731:1	1731:22	5	tif -> tif_fixuptags = LogLuvFixupTags
LVAL	1731:1	1731:1	6	tif -> tif_fixuptags
FIELD	1731:1	1731:6	7	tif -> tif_fixuptags
LEAF_NODE	1731:1	1731:1	8	tif
LEAF_NODE	1731:4	1731:4	8	->
LEAF_NODE	1731:6	1731:6	8	tif_fixuptags
ASSIGN_OP	1731:20	1731:20	6	=
LEAF_NODE	1731:20	1731:20	7	=
RVAL	1731:22	1731:22	6	LogLuvFixupTags
FIELD	1731:22	1731:22	7	LogLuvFixupTags
LEAF_NODE	1731:22	1731:22	8	LogLuvFixupTags
LEAF_NODE	1731:37	1731:37	4	;
EXPR_STATEMENT	1732:1	1732:41	3	tif -> tif_setupdecode = LogLuvSetupDecode ;
EXPR	1732:1	1732:1	4	tif -> tif_setupdecode = LogLuvSetupDecode
ASSIGN	1732:1	1732:24	5	tif -> tif_setupdecode = LogLuvSetupDecode
LVAL	1732:1	1732:1	6	tif -> tif_setupdecode
FIELD	1732:1	1732:6	7	tif -> tif_setupdecode
LEAF_NODE	1732:1	1732:1	8	tif
LEAF_NODE	1732:4	1732:4	8	->
LEAF_NODE	1732:6	1732:6	8	tif_setupdecode
ASSIGN_OP	1732:22	1732:22	6	=
LEAF_NODE	1732:22	1732:22	7	=
RVAL	1732:24	1732:24	6	LogLuvSetupDecode
FIELD	1732:24	1732:24	7	LogLuvSetupDecode
LEAF_NODE	1732:24	1732:24	8	LogLuvSetupDecode
LEAF_NODE	1732:41	1732:41	4	;
EXPR_STATEMENT	1733:1	1733:41	3	tif -> tif_decodestrip = LogLuvDecodeStrip ;
EXPR	1733:1	1733:1	4	tif -> tif_decodestrip = LogLuvDecodeStrip
ASSIGN	1733:1	1733:24	5	tif -> tif_decodestrip = LogLuvDecodeStrip
LVAL	1733:1	1733:1	6	tif -> tif_decodestrip
FIELD	1733:1	1733:6	7	tif -> tif_decodestrip
LEAF_NODE	1733:1	1733:1	8	tif
LEAF_NODE	1733:4	1733:4	8	->
LEAF_NODE	1733:6	1733:6	8	tif_decodestrip
ASSIGN_OP	1733:22	1733:22	6	=
LEAF_NODE	1733:22	1733:22	7	=
RVAL	1733:24	1733:24	6	LogLuvDecodeStrip
FIELD	1733:24	1733:24	7	LogLuvDecodeStrip
LEAF_NODE	1733:24	1733:24	8	LogLuvDecodeStrip
LEAF_NODE	1733:41	1733:41	4	;
EXPR_STATEMENT	1734:1	1734:39	3	tif -> tif_decodetile = LogLuvDecodeTile ;
EXPR	1734:1	1734:1	4	tif -> tif_decodetile = LogLuvDecodeTile
ASSIGN	1734:1	1734:23	5	tif -> tif_decodetile = LogLuvDecodeTile
LVAL	1734:1	1734:1	6	tif -> tif_decodetile
FIELD	1734:1	1734:6	7	tif -> tif_decodetile
LEAF_NODE	1734:1	1734:1	8	tif
LEAF_NODE	1734:4	1734:4	8	->
LEAF_NODE	1734:6	1734:6	8	tif_decodetile
ASSIGN_OP	1734:21	1734:21	6	=
LEAF_NODE	1734:21	1734:21	7	=
RVAL	1734:23	1734:23	6	LogLuvDecodeTile
FIELD	1734:23	1734:23	7	LogLuvDecodeTile
LEAF_NODE	1734:23	1734:23	8	LogLuvDecodeTile
LEAF_NODE	1734:39	1734:39	4	;
EXPR_STATEMENT	1735:1	1735:41	3	tif -> tif_setupencode = LogLuvSetupEncode ;
EXPR	1735:1	1735:1	4	tif -> tif_setupencode = LogLuvSetupEncode
ASSIGN	1735:1	1735:24	5	tif -> tif_setupencode = LogLuvSetupEncode
LVAL	1735:1	1735:1	6	tif -> tif_setupencode
FIELD	1735:1	1735:6	7	tif -> tif_setupencode
LEAF_NODE	1735:1	1735:1	8	tif
LEAF_NODE	1735:4	1735:4	8	->
LEAF_NODE	1735:6	1735:6	8	tif_setupencode
ASSIGN_OP	1735:22	1735:22	6	=
LEAF_NODE	1735:22	1735:22	7	=
RVAL	1735:24	1735:24	6	LogLuvSetupEncode
FIELD	1735:24	1735:24	7	LogLuvSetupEncode
LEAF_NODE	1735:24	1735:24	8	LogLuvSetupEncode
LEAF_NODE	1735:41	1735:41	4	;
EXPR_STATEMENT	1736:1	1736:41	3	tif -> tif_encodestrip = LogLuvEncodeStrip ;
EXPR	1736:1	1736:1	4	tif -> tif_encodestrip = LogLuvEncodeStrip
ASSIGN	1736:1	1736:24	5	tif -> tif_encodestrip = LogLuvEncodeStrip
LVAL	1736:1	1736:1	6	tif -> tif_encodestrip
FIELD	1736:1	1736:6	7	tif -> tif_encodestrip
LEAF_NODE	1736:1	1736:1	8	tif
LEAF_NODE	1736:4	1736:4	8	->
LEAF_NODE	1736:6	1736:6	8	tif_encodestrip
ASSIGN_OP	1736:22	1736:22	6	=
LEAF_NODE	1736:22	1736:22	7	=
RVAL	1736:24	1736:24	6	LogLuvEncodeStrip
FIELD	1736:24	1736:24	7	LogLuvEncodeStrip
LEAF_NODE	1736:24	1736:24	8	LogLuvEncodeStrip
LEAF_NODE	1736:41	1736:41	4	;
EXPR_STATEMENT	1737:1	1737:39	3	tif -> tif_encodetile = LogLuvEncodeTile ;
EXPR	1737:1	1737:1	4	tif -> tif_encodetile = LogLuvEncodeTile
ASSIGN	1737:1	1737:23	5	tif -> tif_encodetile = LogLuvEncodeTile
LVAL	1737:1	1737:1	6	tif -> tif_encodetile
FIELD	1737:1	1737:6	7	tif -> tif_encodetile
LEAF_NODE	1737:1	1737:1	8	tif
LEAF_NODE	1737:4	1737:4	8	->
LEAF_NODE	1737:6	1737:6	8	tif_encodetile
ASSIGN_OP	1737:21	1737:21	6	=
LEAF_NODE	1737:21	1737:21	7	=
RVAL	1737:23	1737:23	6	LogLuvEncodeTile
FIELD	1737:23	1737:23	7	LogLuvEncodeTile
LEAF_NODE	1737:23	1737:23	8	LogLuvEncodeTile
LEAF_NODE	1737:39	1737:39	4	;
EXPR_STATEMENT	1738:1	1738:29	3	tif -> tif_close = LogLuvClose ;
EXPR	1738:1	1738:1	4	tif -> tif_close = LogLuvClose
ASSIGN	1738:1	1738:18	5	tif -> tif_close = LogLuvClose
LVAL	1738:1	1738:1	6	tif -> tif_close
FIELD	1738:1	1738:6	7	tif -> tif_close
LEAF_NODE	1738:1	1738:1	8	tif
LEAF_NODE	1738:4	1738:4	8	->
LEAF_NODE	1738:6	1738:6	8	tif_close
ASSIGN_OP	1738:16	1738:16	6	=
LEAF_NODE	1738:16	1738:16	7	=
RVAL	1738:18	1738:18	6	LogLuvClose
FIELD	1738:18	1738:18	7	LogLuvClose
LEAF_NODE	1738:18	1738:18	8	LogLuvClose
LEAF_NODE	1738:29	1738:29	4	;
EXPR_STATEMENT	1739:1	1739:33	3	tif -> tif_cleanup = LogLuvCleanup ;
EXPR	1739:1	1739:1	4	tif -> tif_cleanup = LogLuvCleanup
ASSIGN	1739:1	1739:20	5	tif -> tif_cleanup = LogLuvCleanup
LVAL	1739:1	1739:1	6	tif -> tif_cleanup
FIELD	1739:1	1739:6	7	tif -> tif_cleanup
LEAF_NODE	1739:1	1739:1	8	tif
LEAF_NODE	1739:4	1739:4	8	->
LEAF_NODE	1739:6	1739:6	8	tif_cleanup
ASSIGN_OP	1739:18	1739:18	6	=
LEAF_NODE	1739:18	1739:18	7	=
RVAL	1739:20	1739:20	6	LogLuvCleanup
FIELD	1739:20	1739:20	7	LogLuvCleanup
LEAF_NODE	1739:20	1739:20	8	LogLuvCleanup
LEAF_NODE	1739:33	1739:33	4	;
EXPR_STATEMENT	1744:1	1744:47	3	sp -> vgetparent = tif -> tif_tagmethods . vgetfield ;
EXPR	1744:1	1744:1	4	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
ASSIGN	1744:1	1744:18	5	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
LVAL	1744:1	1744:1	6	sp -> vgetparent
FIELD	1744:1	1744:5	7	sp -> vgetparent
LEAF_NODE	1744:1	1744:1	8	sp
LEAF_NODE	1744:3	1744:3	8	->
LEAF_NODE	1744:5	1744:5	8	vgetparent
ASSIGN_OP	1744:16	1744:16	6	=
LEAF_NODE	1744:16	1744:16	7	=
RVAL	1744:18	1744:18	6	tif -> tif_tagmethods . vgetfield
FIELD	1744:18	1744:38	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1744:18	1744:18	8	tif
LEAF_NODE	1744:21	1744:21	8	->
LEAF_NODE	1744:23	1744:23	8	tif_tagmethods
LEAF_NODE	1744:37	1744:37	8	.
LEAF_NODE	1744:38	1744:38	8	vgetfield
LEAF_NODE	1744:47	1744:47	4	;
EXPR_STATEMENT	1745:1	1745:48	3	tif -> tif_tagmethods . vgetfield = LogLuvVGetField ;
EXPR	1745:1	1745:1	4	tif -> tif_tagmethods . vgetfield = LogLuvVGetField
ASSIGN	1745:1	1745:33	5	tif -> tif_tagmethods . vgetfield = LogLuvVGetField
LVAL	1745:1	1745:1	6	tif -> tif_tagmethods . vgetfield
FIELD	1745:1	1745:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	1745:1	1745:1	8	tif
LEAF_NODE	1745:4	1745:4	8	->
LEAF_NODE	1745:6	1745:6	8	tif_tagmethods
LEAF_NODE	1745:20	1745:20	8	.
LEAF_NODE	1745:21	1745:21	8	vgetfield
ASSIGN_OP	1745:31	1745:31	6	=
LEAF_NODE	1745:31	1745:31	7	=
RVAL	1745:33	1745:33	6	LogLuvVGetField
FIELD	1745:33	1745:33	7	LogLuvVGetField
LEAF_NODE	1745:33	1745:33	8	LogLuvVGetField
LEAF_NODE	1745:48	1745:48	4	;
EXPR_STATEMENT	1746:1	1746:47	3	sp -> vsetparent = tif -> tif_tagmethods . vsetfield ;
EXPR	1746:1	1746:1	4	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
ASSIGN	1746:1	1746:18	5	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
LVAL	1746:1	1746:1	6	sp -> vsetparent
FIELD	1746:1	1746:5	7	sp -> vsetparent
LEAF_NODE	1746:1	1746:1	8	sp
LEAF_NODE	1746:3	1746:3	8	->
LEAF_NODE	1746:5	1746:5	8	vsetparent
ASSIGN_OP	1746:16	1746:16	6	=
LEAF_NODE	1746:16	1746:16	7	=
RVAL	1746:18	1746:18	6	tif -> tif_tagmethods . vsetfield
FIELD	1746:18	1746:38	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	1746:18	1746:18	8	tif
LEAF_NODE	1746:21	1746:21	8	->
LEAF_NODE	1746:23	1746:23	8	tif_tagmethods
LEAF_NODE	1746:37	1746:37	8	.
LEAF_NODE	1746:38	1746:38	8	vsetfield
LEAF_NODE	1746:47	1746:47	4	;
EXPR_STATEMENT	1747:1	1747:48	3	tif -> tif_tagmethods . vsetfield = LogLuvVSetField ;
EXPR	1747:1	1747:1	4	tif -> tif_tagmethods . vsetfield = LogLuvVSetField
ASSIGN	1747:1	1747:33	5	tif -> tif_tagmethods . vsetfield = LogLuvVSetField
LVAL	1747:1	1747:1	6	tif -> tif_tagmethods . vsetfield
FIELD	1747:1	1747:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	1747:1	1747:1	8	tif
LEAF_NODE	1747:4	1747:4	8	->
LEAF_NODE	1747:6	1747:6	8	tif_tagmethods
LEAF_NODE	1747:20	1747:20	8	.
LEAF_NODE	1747:21	1747:21	8	vsetfield
ASSIGN_OP	1747:31	1747:31	6	=
LEAF_NODE	1747:31	1747:31	7	=
RVAL	1747:33	1747:33	6	LogLuvVSetField
FIELD	1747:33	1747:33	7	LogLuvVSetField
LEAF_NODE	1747:33	1747:33	8	LogLuvVSetField
LEAF_NODE	1747:48	1747:48	4	;
JUMP_STATEMENT	1749:1	1749:11	3	return ( 1 ) ;
KEYWORD	1749:1	1749:1	4	return
LEAF_NODE	1749:1	1749:1	5	return
DESTINATION	1749:8	1749:8	4	( 1 )
EXPR	1749:8	1749:10	5	( 1 )
LEAF_NODE	1749:8	1749:8	6	(
FIELD	1749:9	1749:9	6	1
LEAF_NODE	1749:9	1749:9	7	1
LEAF_NODE	1749:10	1749:10	6	)
LEAF_NODE	1749:11	1749:11	4	;
LABEL	1750:0	1750:3	3	bad :
LEAF_NODE	1750:0	1750:0	4	bad
LEAF_NODE	1750:3	1750:3	4	:
EXPR_STATEMENT	1751:1	1752:60	3	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: No space for LogLuv state block" , tif -> tif_name ) ;
EXPR	1751:1	1751:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: No space for LogLuv state block" , tif -> tif_name )
FUNCTION_CALL	1751:1	1752:59	5	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: No space for LogLuv state block" , tif -> tif_name )
CALLEE	1751:1	1751:1	6	TIFFErrorExt
LEAF_NODE	1751:1	1751:1	7	TIFFErrorExt
LEAF_NODE	1751:13	1751:13	6	(
ARGUMENT	1751:14	1751:14	6	tif -> tif_clientdata
FIELD	1751:14	1751:19	7	tif -> tif_clientdata
LEAF_NODE	1751:14	1751:14	8	tif
LEAF_NODE	1751:17	1751:17	8	->
LEAF_NODE	1751:19	1751:19	8	tif_clientdata
LEAF_NODE	1751:33	1751:33	6	,
ARGUMENT	1751:35	1751:35	6	module
FIELD	1751:35	1751:35	7	module
LEAF_NODE	1751:35	1751:35	8	module
LEAF_NODE	1751:41	1751:41	6	,
ARGUMENT	1752:7	1752:7	6	"%s: No space for LogLuv state block"
FIELD	1752:7	1752:7	7	"%s: No space for LogLuv state block"
LEAF_NODE	1752:7	1752:7	8	"%s: No space for LogLuv state block"
LEAF_NODE	1752:44	1752:44	6	,
ARGUMENT	1752:46	1752:46	6	tif -> tif_name
FIELD	1752:46	1752:51	7	tif -> tif_name
LEAF_NODE	1752:46	1752:46	8	tif
LEAF_NODE	1752:49	1752:49	8	->
LEAF_NODE	1752:51	1752:51	8	tif_name
LEAF_NODE	1752:59	1752:59	6	)
LEAF_NODE	1752:60	1752:60	4	;
JUMP_STATEMENT	1753:1	1753:11	3	return ( 0 ) ;
KEYWORD	1753:1	1753:1	4	return
LEAF_NODE	1753:1	1753:1	5	return
DESTINATION	1753:8	1753:8	4	( 0 )
EXPR	1753:8	1753:10	5	( 0 )
LEAF_NODE	1753:8	1753:8	6	(
FIELD	1753:9	1753:9	6	0
LEAF_NODE	1753:9	1753:9	7	0
LEAF_NODE	1753:10	1753:10	6	)
LEAF_NODE	1753:11	1753:11	4	;
LEAF_NODE	1754:0	1754:0	2	}
