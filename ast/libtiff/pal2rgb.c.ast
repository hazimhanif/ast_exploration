SOURCE_FILE	45:7	450:0	0	
SIMPLE_DECL	45:7	45:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	45:7	45:12	2	void usage ; usage usage ( void )
TYPE	45:7	45:7	3	void
TYPE_NAME	45:7	45:7	4	void
LEAF_NODE	45:7	45:7	5	void
NAME	45:12	45:12	3	usage
LEAF_NODE	45:12	45:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	45:12	45:12	3	usage usage ( void )
ASSIGN	45:12	45:17	4	usage usage ( void )
LVAL	45:12	45:12	5	usage
NAME	45:12	45:12	6	usage
LEAF_NODE	45:12	45:12	7	usage
ASSIGN_OP	45:12	45:12	5	usage
NAME	45:12	45:12	6	usage
LEAF_NODE	45:12	45:12	7	usage
RVAL	45:17	45:22	5	( void )
LEAF_NODE	45:17	45:17	6	(
EXPR	45:18	45:18	6	void
FIELD	45:18	45:18	7	void
LEAF_NODE	45:18	45:18	8	void
LEAF_NODE	45:22	45:22	6	)
LEAF_NODE	45:23	45:23	2	;
SIMPLE_DECL	46:7	46:39	1	void cpTags ; cpTags cpTags ( TIFF * in , TIFF * out ) ;
VAR_DECL	46:7	46:12	2	void cpTags ; cpTags cpTags ( TIFF * in , TIFF * out )
TYPE	46:7	46:7	3	void
TYPE_NAME	46:7	46:7	4	void
LEAF_NODE	46:7	46:7	5	void
NAME	46:12	46:12	3	cpTags
LEAF_NODE	46:12	46:12	4	cpTags
LEAF_NODE	0:0	0:0	3	;
INIT	46:12	46:12	3	cpTags cpTags ( TIFF * in , TIFF * out )
ASSIGN	46:12	46:18	4	cpTags cpTags ( TIFF * in , TIFF * out )
LVAL	46:12	46:12	5	cpTags
NAME	46:12	46:12	6	cpTags
LEAF_NODE	46:12	46:12	7	cpTags
ASSIGN_OP	46:12	46:12	5	cpTags
NAME	46:12	46:12	6	cpTags
LEAF_NODE	46:12	46:12	7	cpTags
RVAL	46:18	46:38	5	( TIFF * in , TIFF * out )
LEAF_NODE	46:18	46:18	6	(
EXPR	46:19	46:35	6	TIFF * in , TIFF * out
FIELD	46:19	46:19	7	TIFF
LEAF_NODE	46:19	46:19	8	TIFF
LEAF_NODE	46:23	46:23	7	*
FIELD	46:25	46:25	7	in
LEAF_NODE	46:25	46:25	8	in
LEAF_NODE	46:27	46:27	7	,
FIELD	46:29	46:29	7	TIFF
LEAF_NODE	46:29	46:29	8	TIFF
LEAF_NODE	46:33	46:33	7	*
FIELD	46:35	46:35	7	out
LEAF_NODE	46:35	46:35	8	out
LEAF_NODE	46:38	46:38	6	)
LEAF_NODE	46:39	46:39	2	;
FUNCTION_DEF	48:0	56:0	1	
RETURN_TYPE	48:0	48:7	2	static int
LEAF_NODE	48:0	48:0	3	static
TYPE_NAME	48:7	48:7	3	int
LEAF_NODE	48:7	48:7	4	int
FUNCTION_NAME	49:0	49:0	2	checkcmap
LEAF_NODE	49:0	49:0	3	checkcmap
PARAMETER_LIST	49:9	49:48	2	( int n , uint16 * r , uint16 * g , uint16 * b )
LEAF_NODE	49:9	49:9	3	(
PARAMETER_DECL	49:10	49:14	3	int n
TYPE	49:10	49:10	4	int
TYPE_NAME	49:10	49:10	5	int
LEAF_NODE	49:10	49:10	6	int
NAME	49:14	49:14	4	n
LEAF_NODE	49:14	49:14	5	n
LEAF_NODE	49:15	49:15	3	,
PARAMETER_DECL	49:17	49:25	3	uint16 * r
TYPE	49:17	49:23	4	uint16 *
TYPE_NAME	49:17	49:17	5	uint16
LEAF_NODE	49:17	49:17	6	uint16
POINTER	49:23	49:23	5	*
LEAF_NODE	49:23	49:23	6	*
NAME	49:25	49:25	4	r
LEAF_NODE	49:25	49:25	5	r
LEAF_NODE	49:26	49:26	3	,
PARAMETER_DECL	49:28	49:36	3	uint16 * g
TYPE	49:28	49:34	4	uint16 *
TYPE_NAME	49:28	49:28	5	uint16
LEAF_NODE	49:28	49:28	6	uint16
POINTER	49:34	49:34	5	*
LEAF_NODE	49:34	49:34	6	*
NAME	49:36	49:36	4	g
LEAF_NODE	49:36	49:36	5	g
LEAF_NODE	49:37	49:37	3	,
PARAMETER_DECL	49:39	49:47	3	uint16 * b
TYPE	49:39	49:45	4	uint16 *
TYPE_NAME	49:39	49:39	5	uint16
LEAF_NODE	49:39	49:39	6	uint16
POINTER	49:45	49:45	5	*
LEAF_NODE	49:45	49:45	6	*
NAME	49:47	49:47	4	b
LEAF_NODE	49:47	49:47	5	b
LEAF_NODE	49:48	49:48	3	)
LEAF_NODE	50:0	50:0	2	{
STATEMENTS	51:1	55:1	2	
ITERATION	51:1	52:5	3	
KEYWORD	51:1	51:1	4	while
LEAF_NODE	51:1	51:1	5	while
LEAF_NODE	51:7	51:7	4	(
CONDITION	51:8	51:8	4	n -- > 0
EXPR	51:8	51:14	5	n -- > 0
FIELD	51:8	51:9	6	n --
LEAF_NODE	51:8	51:8	7	n
LEAF_NODE	51:9	51:9	7	--
REL_OPERATOR	51:12	51:12	6	>
LEAF_NODE	51:12	51:12	7	>
FIELD	51:14	51:14	6	0
LEAF_NODE	51:14	51:14	7	0
LEAF_NODE	51:15	51:15	4	)
STATEMENTS	52:5	52:5	4	
SELECTION	52:5	53:2	5	
KEYWORD	52:5	52:5	6	if
LEAF_NODE	52:5	52:5	7	if
LEAF_NODE	52:8	52:8	6	(
CONDITION	52:9	52:9	6	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
EXPR	52:9	52:9	7	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
OR	52:9	52:24	8	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
EXPR	52:9	52:17	9	* r ++ >= 256
UNARY_EXPR	52:9	52:10	10	* r ++
UNARY_OPERATOR	52:9	52:9	11	*
LEAF_NODE	52:9	52:9	12	*
FIELD	52:10	52:11	11	r ++
LEAF_NODE	52:10	52:10	12	r
LEAF_NODE	52:11	52:11	12	++
REL_OPERATOR	52:14	52:14	10	>=
LEAF_NODE	52:14	52:14	11	>=
FIELD	52:17	52:17	10	256
LEAF_NODE	52:17	52:17	11	256
LEAF_NODE	52:21	52:21	9	||
EXPR	52:24	52:24	9	* g ++ >= 256 || * b ++ >= 256
OR	52:24	52:39	10	* g ++ >= 256 || * b ++ >= 256
EXPR	52:24	52:32	11	* g ++ >= 256
UNARY_EXPR	52:24	52:25	12	* g ++
UNARY_OPERATOR	52:24	52:24	13	*
LEAF_NODE	52:24	52:24	14	*
FIELD	52:25	52:26	13	g ++
LEAF_NODE	52:25	52:25	14	g
LEAF_NODE	52:26	52:26	14	++
REL_OPERATOR	52:29	52:29	12	>=
LEAF_NODE	52:29	52:29	13	>=
FIELD	52:32	52:32	12	256
LEAF_NODE	52:32	52:32	13	256
LEAF_NODE	52:36	52:36	11	||
EXPR	52:39	52:47	11	* b ++ >= 256
UNARY_EXPR	52:39	52:40	12	* b ++
UNARY_OPERATOR	52:39	52:39	13	*
LEAF_NODE	52:39	52:39	14	*
FIELD	52:40	52:41	13	b ++
LEAF_NODE	52:40	52:40	14	b
LEAF_NODE	52:41	52:41	14	++
REL_OPERATOR	52:44	52:44	12	>=
LEAF_NODE	52:44	52:44	13	>=
FIELD	52:47	52:47	12	256
LEAF_NODE	52:47	52:47	13	256
LEAF_NODE	52:50	52:50	6	)
STATEMENTS	53:2	53:2	6	
JUMP_STATEMENT	53:2	53:13	7	return ( 16 ) ;
KEYWORD	53:2	53:2	8	return
LEAF_NODE	53:2	53:2	9	return
DESTINATION	53:9	53:9	8	( 16 )
EXPR	53:9	53:12	9	( 16 )
LEAF_NODE	53:9	53:9	10	(
FIELD	53:10	53:10	10	16
LEAF_NODE	53:10	53:10	11	16
LEAF_NODE	53:12	53:12	10	)
LEAF_NODE	53:13	53:13	8	;
EXPR_STATEMENT	54:1	54:55	3	fprintf ( stderr , "Warning, assuming 8-bit colormap.\n" ) ;
EXPR	54:1	54:1	4	fprintf ( stderr , "Warning, assuming 8-bit colormap.\n" )
FUNCTION_CALL	54:1	54:54	5	fprintf ( stderr , "Warning, assuming 8-bit colormap.\n" )
CALLEE	54:1	54:1	6	fprintf
LEAF_NODE	54:1	54:1	7	fprintf
LEAF_NODE	54:8	54:8	6	(
ARGUMENT	54:9	54:9	6	stderr
FIELD	54:9	54:9	7	stderr
LEAF_NODE	54:9	54:9	8	stderr
LEAF_NODE	54:15	54:15	6	,
ARGUMENT	54:17	54:17	6	"Warning, assuming 8-bit colormap.\n"
FIELD	54:17	54:17	7	"Warning, assuming 8-bit colormap.\n"
LEAF_NODE	54:17	54:17	8	"Warning, assuming 8-bit colormap.\n"
LEAF_NODE	54:54	54:54	6	)
LEAF_NODE	54:55	54:55	4	;
JUMP_STATEMENT	55:1	55:11	3	return ( 8 ) ;
KEYWORD	55:1	55:1	4	return
LEAF_NODE	55:1	55:1	5	return
DESTINATION	55:8	55:8	4	( 8 )
EXPR	55:8	55:10	5	( 8 )
LEAF_NODE	55:8	55:8	6	(
FIELD	55:9	55:9	6	8
LEAF_NODE	55:9	55:9	7	8
LEAF_NODE	55:10	55:10	6	)
LEAF_NODE	55:11	55:11	4	;
LEAF_NODE	56:0	56:0	2	}
SIMPLE_DECL	63:7	63:39	1	uint16 compression ; compression = ( uint16 ) - 1 ;
VAR_DECL	63:7	63:14	2	uint16 compression ; compression = ( uint16 ) - 1
TYPE	63:7	63:7	3	uint16
TYPE_NAME	63:7	63:7	4	uint16
LEAF_NODE	63:7	63:7	5	uint16
NAME	63:14	63:14	3	compression
LEAF_NODE	63:14	63:14	4	compression
LEAF_NODE	0:0	0:0	3	;
INIT	63:14	63:14	3	compression = ( uint16 ) - 1
ASSIGN	63:14	63:28	4	compression = ( uint16 ) - 1
LVAL	63:14	63:14	5	compression
NAME	63:14	63:14	6	compression
LEAF_NODE	63:14	63:14	7	compression
ASSIGN_OP	63:26	63:26	5	=
LEAF_NODE	63:26	63:26	6	=
RVAL	63:28	63:37	5	( uint16 ) - 1
LEAF_NODE	63:28	63:28	6	(
TYPE_NAME	63:29	63:29	6	uint16
LEAF_NODE	63:29	63:29	7	uint16
LEAF_NODE	63:35	63:35	6	)
UNARY_EXPR	63:37	63:38	6	- 1
UNARY_OPERATOR	63:37	63:37	7	-
LEAF_NODE	63:37	63:37	8	-
FIELD	63:38	63:38	7	1
LEAF_NODE	63:38	63:38	8	1
LEAF_NODE	63:39	63:39	2	;
SIMPLE_DECL	64:7	64:27	1	uint16 predictor ; predictor = 0 ;
VAR_DECL	64:7	64:14	2	uint16 predictor ; predictor = 0
TYPE	64:7	64:7	3	uint16
TYPE_NAME	64:7	64:7	4	uint16
LEAF_NODE	64:7	64:7	5	uint16
NAME	64:14	64:14	3	predictor
LEAF_NODE	64:14	64:14	4	predictor
LEAF_NODE	0:0	0:0	3	;
INIT	64:14	64:14	3	predictor = 0
ASSIGN	64:14	64:26	4	predictor = 0
LVAL	64:14	64:14	5	predictor
NAME	64:14	64:14	6	predictor
LEAF_NODE	64:14	64:14	7	predictor
ASSIGN_OP	64:24	64:24	5	=
LEAF_NODE	64:24	64:24	6	=
RVAL	64:26	64:26	5	0
FIELD	64:26	64:26	6	0
LEAF_NODE	64:26	64:26	7	0
LEAF_NODE	64:27	64:27	2	;
SIMPLE_DECL	65:7	65:23	1	int quality ; quality = 75 ;
VAR_DECL	65:7	65:11	2	int quality ; quality = 75
TYPE	65:7	65:7	3	int
TYPE_NAME	65:7	65:7	4	int
LEAF_NODE	65:7	65:7	5	int
NAME	65:11	65:11	3	quality
LEAF_NODE	65:11	65:11	4	quality
LEAF_NODE	0:0	0:0	3	;
INIT	65:11	65:11	3	quality = 75
ASSIGN	65:11	65:21	4	quality = 75
LVAL	65:11	65:11	5	quality
NAME	65:11	65:11	6	quality
LEAF_NODE	65:11	65:11	7	quality
ASSIGN_OP	65:19	65:19	5	=
LEAF_NODE	65:19	65:19	6	=
RVAL	65:21	65:21	5	75
FIELD	65:21	65:21	6	75
LEAF_NODE	65:21	65:21	7	75
LEAF_NODE	65:23	65:23	2	;
SIMPLE_DECL	66:7	66:44	1	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB ;
VAR_DECL	66:7	66:11	2	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB
TYPE	66:7	66:7	3	int
TYPE_NAME	66:7	66:7	4	int
LEAF_NODE	66:7	66:7	5	int
NAME	66:11	66:11	3	jpegcolormode
LEAF_NODE	66:11	66:11	4	jpegcolormode
LEAF_NODE	0:0	0:0	3	;
INIT	66:11	66:11	3	jpegcolormode = JPEGCOLORMODE_RGB
ASSIGN	66:11	66:27	4	jpegcolormode = JPEGCOLORMODE_RGB
LVAL	66:11	66:11	5	jpegcolormode
NAME	66:11	66:11	6	jpegcolormode
LEAF_NODE	66:11	66:11	7	jpegcolormode
ASSIGN_OP	66:25	66:25	5	=
LEAF_NODE	66:25	66:25	6	=
RVAL	66:27	66:27	5	JPEGCOLORMODE_RGB
FIELD	66:27	66:27	6	JPEGCOLORMODE_RGB
LEAF_NODE	66:27	66:27	7	JPEGCOLORMODE_RGB
LEAF_NODE	66:44	66:44	2	;
FUNCTION_DEF	69:0	246:0	1	
RETURN_TYPE	69:0	69:0	2	int
TYPE_NAME	69:0	69:0	3	int
LEAF_NODE	69:0	69:0	4	int
FUNCTION_NAME	70:0	70:0	2	main
LEAF_NODE	70:0	70:0	3	main
PARAMETER_LIST	70:4	70:27	2	( int argc , char * [ ] argv )
LEAF_NODE	70:4	70:4	3	(
PARAMETER_DECL	70:5	70:9	3	int argc
TYPE	70:5	70:5	4	int
TYPE_NAME	70:5	70:5	5	int
LEAF_NODE	70:5	70:5	6	int
NAME	70:9	70:9	4	argc
LEAF_NODE	70:9	70:9	5	argc
LEAF_NODE	70:13	70:13	3	,
PARAMETER_DECL	70:15	70:21	3	char * [ ] argv
TYPE	70:15	70:25	4	char * [ ]
TYPE_NAME	70:15	70:15	5	char
LEAF_NODE	70:15	70:15	6	char
POINTER	70:19	70:19	5	*
LEAF_NODE	70:19	70:19	6	*
TYPE_SUFFIX	70:25	70:26	5	[ ]
LEAF_NODE	70:25	70:25	6	[
LEAF_NODE	70:26	70:26	6	]
NAME	70:21	70:21	4	argv
LEAF_NODE	70:21	70:21	5	argv
LEAF_NODE	70:27	70:27	3	)
LEAF_NODE	71:0	71:0	2	{
STATEMENTS	72:1	245:1	2	
SIMPLE_DECL	72:1	72:29	3	uint16 bitspersample , uint16 shortv ;
INIT_DECL_LIST	72:1	72:1	4	uint16 bitspersample , uint16 shortv
VAR_DECL	72:1	72:8	5	uint16 bitspersample
TYPE	72:1	72:1	6	uint16
TYPE_NAME	72:1	72:1	7	uint16
LEAF_NODE	72:1	72:1	8	uint16
NAME	72:8	72:8	6	bitspersample
LEAF_NODE	72:8	72:8	7	bitspersample
LEAF_NODE	72:21	72:21	5	,
VAR_DECL	72:1	72:23	5	uint16 shortv
TYPE	72:1	72:1	6	uint16
TYPE_NAME	72:1	72:1	7	uint16
LEAF_NODE	72:1	72:1	8	uint16
NAME	72:23	72:23	6	shortv
LEAF_NODE	72:23	72:23	7	shortv
LEAF_NODE	72:29	72:29	4	;
SIMPLE_DECL	73:1	73:31	3	uint32 imagewidth , uint32 imagelength ;
INIT_DECL_LIST	73:1	73:1	4	uint32 imagewidth , uint32 imagelength
VAR_DECL	73:1	73:8	5	uint32 imagewidth
TYPE	73:1	73:1	6	uint32
TYPE_NAME	73:1	73:1	7	uint32
LEAF_NODE	73:1	73:1	8	uint32
NAME	73:8	73:8	6	imagewidth
LEAF_NODE	73:8	73:8	7	imagewidth
LEAF_NODE	73:18	73:18	5	,
VAR_DECL	73:1	73:20	5	uint32 imagelength
TYPE	73:1	73:1	6	uint32
TYPE_NAME	73:1	73:1	7	uint32
LEAF_NODE	73:1	73:1	8	uint32
NAME	73:20	73:20	6	imagelength
LEAF_NODE	73:20	73:20	7	imagelength
LEAF_NODE	73:31	73:31	4	;
SIMPLE_DECL	74:1	74:36	3	uint16 config ; config = PLANARCONFIG_CONTIG ;
VAR_DECL	74:1	74:8	4	uint16 config ; config = PLANARCONFIG_CONTIG
TYPE	74:1	74:1	5	uint16
TYPE_NAME	74:1	74:1	6	uint16
LEAF_NODE	74:1	74:1	7	uint16
NAME	74:8	74:8	5	config
LEAF_NODE	74:8	74:8	6	config
LEAF_NODE	0:0	0:0	5	;
INIT	74:8	74:8	5	config = PLANARCONFIG_CONTIG
ASSIGN	74:8	74:17	6	config = PLANARCONFIG_CONTIG
LVAL	74:8	74:8	7	config
NAME	74:8	74:8	8	config
LEAF_NODE	74:8	74:8	9	config
ASSIGN_OP	74:15	74:15	7	=
LEAF_NODE	74:15	74:15	8	=
RVAL	74:17	74:17	7	PLANARCONFIG_CONTIG
FIELD	74:17	74:17	8	PLANARCONFIG_CONTIG
LEAF_NODE	74:17	74:17	9	PLANARCONFIG_CONTIG
LEAF_NODE	74:36	74:36	4	;
SIMPLE_DECL	75:1	75:34	3	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1 ;
VAR_DECL	75:1	75:8	4	uint32 rowsperstrip ; rowsperstrip = ( uint32 ) - 1
TYPE	75:1	75:1	5	uint32
TYPE_NAME	75:1	75:1	6	uint32
LEAF_NODE	75:1	75:1	7	uint32
NAME	75:8	75:8	5	rowsperstrip
LEAF_NODE	75:8	75:8	6	rowsperstrip
LEAF_NODE	0:0	0:0	5	;
INIT	75:8	75:8	5	rowsperstrip = ( uint32 ) - 1
ASSIGN	75:8	75:23	6	rowsperstrip = ( uint32 ) - 1
LVAL	75:8	75:8	7	rowsperstrip
NAME	75:8	75:8	8	rowsperstrip
LEAF_NODE	75:8	75:8	9	rowsperstrip
ASSIGN_OP	75:21	75:21	7	=
LEAF_NODE	75:21	75:21	8	=
RVAL	75:23	75:32	7	( uint32 ) - 1
LEAF_NODE	75:23	75:23	8	(
TYPE_NAME	75:24	75:24	8	uint32
LEAF_NODE	75:24	75:24	9	uint32
LEAF_NODE	75:30	75:30	8	)
UNARY_EXPR	75:32	75:33	8	- 1
UNARY_OPERATOR	75:32	75:32	9	-
LEAF_NODE	75:32	75:32	10	-
FIELD	75:33	75:33	9	1
LEAF_NODE	75:33	75:33	10	1
LEAF_NODE	75:34	75:34	4	;
SIMPLE_DECL	76:1	76:37	3	uint16 photometric ; photometric = PHOTOMETRIC_RGB ;
VAR_DECL	76:1	76:8	4	uint16 photometric ; photometric = PHOTOMETRIC_RGB
TYPE	76:1	76:1	5	uint16
TYPE_NAME	76:1	76:1	6	uint16
LEAF_NODE	76:1	76:1	7	uint16
NAME	76:8	76:8	5	photometric
LEAF_NODE	76:8	76:8	6	photometric
LEAF_NODE	0:0	0:0	5	;
INIT	76:8	76:8	5	photometric = PHOTOMETRIC_RGB
ASSIGN	76:8	76:22	6	photometric = PHOTOMETRIC_RGB
LVAL	76:8	76:8	7	photometric
NAME	76:8	76:8	8	photometric
LEAF_NODE	76:8	76:8	9	photometric
ASSIGN_OP	76:20	76:20	7	=
LEAF_NODE	76:20	76:20	8	=
RVAL	76:22	76:22	7	PHOTOMETRIC_RGB
FIELD	76:22	76:22	8	PHOTOMETRIC_RGB
LEAF_NODE	76:22	76:22	9	PHOTOMETRIC_RGB
LEAF_NODE	76:37	76:37	4	;
SIMPLE_DECL	77:1	77:27	3	uint16 * rmap , uint16 * gmap , uint16 * bmap ;
INIT_DECL_LIST	77:1	77:1	4	uint16 * rmap , uint16 * gmap , uint16 * bmap
VAR_DECL	77:1	77:9	5	uint16 * rmap
TYPE	77:1	77:8	6	uint16 *
TYPE_NAME	77:1	77:1	7	uint16
LEAF_NODE	77:1	77:1	8	uint16
POINTER	77:8	77:8	7	*
LEAF_NODE	77:8	77:8	8	*
NAME	77:9	77:9	6	rmap
LEAF_NODE	77:9	77:9	7	rmap
LEAF_NODE	77:13	77:13	5	,
INIT_DECL_LIST	77:1	77:1	5	uint16 * gmap , uint16 * bmap
VAR_DECL	77:1	77:16	6	uint16 * gmap
TYPE	77:1	77:15	7	uint16 *
TYPE_NAME	77:1	77:1	8	uint16
LEAF_NODE	77:1	77:1	9	uint16
POINTER	77:15	77:15	8	*
LEAF_NODE	77:15	77:15	9	*
NAME	77:16	77:16	7	gmap
LEAF_NODE	77:16	77:16	8	gmap
LEAF_NODE	77:20	77:20	6	,
VAR_DECL	77:1	77:23	6	uint16 * bmap
TYPE	77:1	77:22	7	uint16 *
TYPE_NAME	77:1	77:1	8	uint16
LEAF_NODE	77:1	77:1	9	uint16
POINTER	77:22	77:22	8	*
LEAF_NODE	77:22	77:22	9	*
NAME	77:23	77:23	7	bmap
LEAF_NODE	77:23	77:23	8	bmap
LEAF_NODE	77:27	77:27	4	;
SIMPLE_DECL	78:1	78:11	3	uint32 row ;
VAR_DECL	78:1	78:8	4	uint32 row
TYPE	78:1	78:1	5	uint32
TYPE_NAME	78:1	78:1	6	uint32
LEAF_NODE	78:1	78:1	7	uint32
NAME	78:8	78:8	5	row
LEAF_NODE	78:8	78:8	6	row
LEAF_NODE	78:11	78:11	4	;
SIMPLE_DECL	79:1	79:14	3	int cmap ; cmap = - 1 ;
VAR_DECL	79:1	79:5	4	int cmap ; cmap = - 1
TYPE	79:1	79:1	5	int
TYPE_NAME	79:1	79:1	6	int
LEAF_NODE	79:1	79:1	7	int
NAME	79:5	79:5	5	cmap
LEAF_NODE	79:5	79:5	6	cmap
LEAF_NODE	0:0	0:0	5	;
INIT	79:5	79:5	5	cmap = - 1
ASSIGN	79:5	79:12	6	cmap = - 1
LVAL	79:5	79:5	7	cmap
NAME	79:5	79:5	8	cmap
LEAF_NODE	79:5	79:5	9	cmap
ASSIGN_OP	79:10	79:10	7	=
LEAF_NODE	79:10	79:10	8	=
RVAL	79:12	79:12	7	- 1
UNARY_EXPR	79:12	79:13	8	- 1
UNARY_OPERATOR	79:12	79:12	9	-
LEAF_NODE	79:12	79:12	10	-
FIELD	79:13	79:13	9	1
LEAF_NODE	79:13	79:13	10	1
LEAF_NODE	79:14	79:14	4	;
SIMPLE_DECL	80:1	80:15	3	TIFF * in , TIFF * out ;
INIT_DECL_LIST	80:1	80:1	4	TIFF * in , TIFF * out
VAR_DECL	80:1	80:7	5	TIFF * in
TYPE	80:1	80:6	6	TIFF *
TYPE_NAME	80:1	80:1	7	TIFF
LEAF_NODE	80:1	80:1	8	TIFF
POINTER	80:6	80:6	7	*
LEAF_NODE	80:6	80:6	8	*
NAME	80:7	80:7	6	in
LEAF_NODE	80:7	80:7	7	in
LEAF_NODE	80:9	80:9	5	,
VAR_DECL	80:1	80:12	5	TIFF * out
TYPE	80:1	80:11	6	TIFF *
TYPE_NAME	80:1	80:1	7	TIFF
LEAF_NODE	80:1	80:1	8	TIFF
POINTER	80:11	80:11	7	*
LEAF_NODE	80:11	80:11	8	*
NAME	80:12	80:12	6	out
LEAF_NODE	80:12	80:12	7	out
LEAF_NODE	80:15	80:15	4	;
SIMPLE_DECL	81:1	81:6	3	int c ;
VAR_DECL	81:1	81:5	4	int c
TYPE	81:1	81:1	5	int
TYPE_NAME	81:1	81:1	6	int
LEAF_NODE	81:1	81:1	7	int
NAME	81:5	81:5	5	c
LEAF_NODE	81:5	81:5	6	c
LEAF_NODE	81:6	81:6	4	;
LEAF_NODE	84:1	84:1	3	extern
SIMPLE_DECL	84:8	84:18	3	int optind ;
VAR_DECL	84:8	84:12	4	int optind
TYPE	84:8	84:8	5	int
TYPE_NAME	84:8	84:8	6	int
LEAF_NODE	84:8	84:8	7	int
NAME	84:12	84:12	5	optind
LEAF_NODE	84:12	84:12	6	optind
LEAF_NODE	84:18	84:18	4	;
LEAF_NODE	85:1	85:1	3	extern
SIMPLE_DECL	85:8	85:20	3	char * optarg ;
VAR_DECL	85:8	85:14	4	char * optarg
TYPE	85:8	85:12	5	char *
TYPE_NAME	85:8	85:8	6	char
LEAF_NODE	85:8	85:8	7	char
POINTER	85:12	85:12	6	*
LEAF_NODE	85:12	85:12	7	*
NAME	85:14	85:14	5	optarg
LEAF_NODE	85:14	85:14	6	optarg
LEAF_NODE	85:20	85:20	4	;
ITERATION	88:1	89:2	3	
KEYWORD	88:1	88:1	4	while
LEAF_NODE	88:1	88:1	5	while
LEAF_NODE	88:7	88:7	4	(
CONDITION	88:8	88:8	4	( c = getopt ( argc , argv , "C:c:p:r:" ) ) != - 1
EXPR	88:8	88:48	5	( c = getopt ( argc , argv , "C:c:p:r:" ) ) != - 1
LEAF_NODE	88:8	88:8	6	(
ASSIGN	88:9	88:13	6	c = getopt ( argc , argv , "C:c:p:r:" )
LVAL	88:9	88:9	7	c
FIELD	88:9	88:9	8	c
LEAF_NODE	88:9	88:9	9	c
ASSIGN_OP	88:11	88:11	7	=
LEAF_NODE	88:11	88:11	8	=
RVAL	88:13	88:13	7	getopt ( argc , argv , "C:c:p:r:" )
FUNCTION_CALL	88:13	88:42	8	getopt ( argc , argv , "C:c:p:r:" )
CALLEE	88:13	88:13	9	getopt
LEAF_NODE	88:13	88:13	10	getopt
LEAF_NODE	88:19	88:19	9	(
ARGUMENT	88:20	88:20	9	argc
FIELD	88:20	88:20	10	argc
LEAF_NODE	88:20	88:20	11	argc
LEAF_NODE	88:24	88:24	9	,
ARGUMENT	88:26	88:26	9	argv
FIELD	88:26	88:26	10	argv
LEAF_NODE	88:26	88:26	11	argv
LEAF_NODE	88:30	88:30	9	,
ARGUMENT	88:32	88:32	9	"C:c:p:r:"
FIELD	88:32	88:32	10	"C:c:p:r:"
LEAF_NODE	88:32	88:32	11	"C:c:p:r:"
LEAF_NODE	88:42	88:42	9	)
LEAF_NODE	88:43	88:43	6	)
EQ_OPERATOR	88:45	88:45	6	!=
LEAF_NODE	88:45	88:45	7	!=
UNARY_EXPR	88:48	88:49	6	- 1
UNARY_OPERATOR	88:48	88:48	7	-
LEAF_NODE	88:48	88:48	8	-
FIELD	88:49	88:49	7	1
LEAF_NODE	88:49	88:49	8	1
LEAF_NODE	88:50	88:50	4	)
STATEMENTS	89:2	89:2	4	
SELECTION	89:2	89:13	5	
KEYWORD	89:2	89:2	6	switch
LEAF_NODE	89:2	89:2	7	switch
LEAF_NODE	89:9	89:9	6	(
CONDITION	89:10	89:10	6	c
EXPR	89:10	89:10	7	c
FIELD	89:10	89:10	8	c
LEAF_NODE	89:10	89:10	9	c
LEAF_NODE	89:11	89:11	6	)
STATEMENTS	89:13	111:2	6	
LEAF_NODE	89:13	89:13	7	{
STATEMENTS	90:2	109:3	7	
LEAF_NODE	90:2	90:2	8	case
LEAF_NODE	90:7	90:7	8	'C'
LEAF_NODE	90:10	90:10	8	:
EXPR_STATEMENT	91:3	91:22	8	cmap = atoi ( optarg ) ;
EXPR	91:3	91:3	9	cmap = atoi ( optarg )
ASSIGN	91:3	91:10	10	cmap = atoi ( optarg )
LVAL	91:3	91:3	11	cmap
FIELD	91:3	91:3	12	cmap
LEAF_NODE	91:3	91:3	13	cmap
ASSIGN_OP	91:8	91:8	11	=
LEAF_NODE	91:8	91:8	12	=
RVAL	91:10	91:10	11	atoi ( optarg )
FUNCTION_CALL	91:10	91:21	12	atoi ( optarg )
CALLEE	91:10	91:10	13	atoi
LEAF_NODE	91:10	91:10	14	atoi
LEAF_NODE	91:14	91:14	13	(
ARGUMENT	91:15	91:15	13	optarg
FIELD	91:15	91:15	14	optarg
LEAF_NODE	91:15	91:15	15	optarg
LEAF_NODE	91:21	91:21	13	)
LEAF_NODE	91:22	91:22	9	;
JUMP_STATEMENT	92:3	92:8	8	break DESTINATION ;
KEYWORD	92:3	92:3	9	break
LEAF_NODE	92:3	92:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	92:8	92:8	9	;
LEAF_NODE	93:2	93:2	8	case
LEAF_NODE	93:7	93:7	8	'c'
LEAF_NODE	93:10	93:10	8	:
SELECTION	94:3	95:4	8	
KEYWORD	94:3	94:3	9	if
LEAF_NODE	94:3	94:3	10	if
LEAF_NODE	94:6	94:6	9	(
CONDITION	94:7	94:7	9	! processCompressOptions ( optarg )
EXPR	94:7	94:7	10	! processCompressOptions ( optarg )
UNARY_EXPR	94:7	94:8	11	! processCompressOptions ( optarg )
UNARY_OPERATOR	94:7	94:7	12	!
LEAF_NODE	94:7	94:7	13	!
FUNCTION_CALL	94:8	94:37	12	processCompressOptions ( optarg )
CALLEE	94:8	94:8	13	processCompressOptions
LEAF_NODE	94:8	94:8	14	processCompressOptions
LEAF_NODE	94:30	94:30	13	(
ARGUMENT	94:31	94:31	13	optarg
FIELD	94:31	94:31	14	optarg
LEAF_NODE	94:31	94:31	15	optarg
LEAF_NODE	94:37	94:37	13	)
LEAF_NODE	94:38	94:38	9	)
STATEMENTS	95:4	95:4	9	
EXPR_STATEMENT	95:4	95:11	10	usage ( ) ;
EXPR	95:4	95:4	11	usage ( )
FUNCTION_CALL	95:4	95:10	12	usage ( )
CALLEE	95:4	95:4	13	usage
LEAF_NODE	95:4	95:4	14	usage
LEAF_NODE	95:9	95:9	13	(
LEAF_NODE	95:10	95:10	13	)
LEAF_NODE	95:11	95:11	11	;
JUMP_STATEMENT	96:3	96:8	8	break DESTINATION ;
KEYWORD	96:3	96:3	9	break
LEAF_NODE	96:3	96:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	96:8	96:8	9	;
LEAF_NODE	97:2	97:2	8	case
LEAF_NODE	97:7	97:7	8	'p'
LEAF_NODE	97:10	97:10	8	:
SELECTION	98:3	99:4	8	
KEYWORD	98:3	98:3	9	if
LEAF_NODE	98:3	98:3	10	if
LEAF_NODE	98:6	98:6	9	(
CONDITION	98:7	98:7	9	streq ( optarg , "separate" )
EXPR	98:7	98:7	10	streq ( optarg , "separate" )
FUNCTION_CALL	98:7	98:31	11	streq ( optarg , "separate" )
CALLEE	98:7	98:7	12	streq
LEAF_NODE	98:7	98:7	13	streq
LEAF_NODE	98:12	98:12	12	(
ARGUMENT	98:13	98:13	12	optarg
FIELD	98:13	98:13	13	optarg
LEAF_NODE	98:13	98:13	14	optarg
LEAF_NODE	98:19	98:19	12	,
ARGUMENT	98:21	98:21	12	"separate"
FIELD	98:21	98:21	13	"separate"
LEAF_NODE	98:21	98:21	14	"separate"
LEAF_NODE	98:31	98:31	12	)
LEAF_NODE	98:32	98:32	9	)
STATEMENTS	99:4	99:4	9	
EXPR_STATEMENT	99:4	99:34	10	config = PLANARCONFIG_SEPARATE ;
EXPR	99:4	99:4	11	config = PLANARCONFIG_SEPARATE
ASSIGN	99:4	99:13	12	config = PLANARCONFIG_SEPARATE
LVAL	99:4	99:4	13	config
FIELD	99:4	99:4	14	config
LEAF_NODE	99:4	99:4	15	config
ASSIGN_OP	99:11	99:11	13	=
LEAF_NODE	99:11	99:11	14	=
RVAL	99:13	99:13	13	PLANARCONFIG_SEPARATE
FIELD	99:13	99:13	14	PLANARCONFIG_SEPARATE
LEAF_NODE	99:13	99:13	15	PLANARCONFIG_SEPARATE
LEAF_NODE	99:34	99:34	11	;
SELECTION	100:3	100:8	8	
KEYWORD	100:3	100:3	9	else
LEAF_NODE	100:3	100:3	10	else
STATEMENTS	100:8	100:8	9	
SELECTION	100:8	101:4	10	
KEYWORD	100:8	100:8	11	if
LEAF_NODE	100:8	100:8	12	if
LEAF_NODE	100:11	100:11	11	(
CONDITION	100:12	100:12	11	streq ( optarg , "contig" )
EXPR	100:12	100:12	12	streq ( optarg , "contig" )
FUNCTION_CALL	100:12	100:34	13	streq ( optarg , "contig" )
CALLEE	100:12	100:12	14	streq
LEAF_NODE	100:12	100:12	15	streq
LEAF_NODE	100:17	100:17	14	(
ARGUMENT	100:18	100:18	14	optarg
FIELD	100:18	100:18	15	optarg
LEAF_NODE	100:18	100:18	16	optarg
LEAF_NODE	100:24	100:24	14	,
ARGUMENT	100:26	100:26	14	"contig"
FIELD	100:26	100:26	15	"contig"
LEAF_NODE	100:26	100:26	16	"contig"
LEAF_NODE	100:34	100:34	14	)
LEAF_NODE	100:35	100:35	11	)
STATEMENTS	101:4	101:4	11	
EXPR_STATEMENT	101:4	101:32	12	config = PLANARCONFIG_CONTIG ;
EXPR	101:4	101:4	13	config = PLANARCONFIG_CONTIG
ASSIGN	101:4	101:13	14	config = PLANARCONFIG_CONTIG
LVAL	101:4	101:4	15	config
FIELD	101:4	101:4	16	config
LEAF_NODE	101:4	101:4	17	config
ASSIGN_OP	101:11	101:11	15	=
LEAF_NODE	101:11	101:11	16	=
RVAL	101:13	101:13	15	PLANARCONFIG_CONTIG
FIELD	101:13	101:13	16	PLANARCONFIG_CONTIG
LEAF_NODE	101:13	101:13	17	PLANARCONFIG_CONTIG
LEAF_NODE	101:32	101:32	13	;
SELECTION	102:3	103:4	8	
KEYWORD	102:3	102:3	9	else
LEAF_NODE	102:3	102:3	10	else
STATEMENTS	103:4	103:4	9	
EXPR_STATEMENT	103:4	103:11	10	usage ( ) ;
EXPR	103:4	103:4	11	usage ( )
FUNCTION_CALL	103:4	103:10	12	usage ( )
CALLEE	103:4	103:4	13	usage
LEAF_NODE	103:4	103:4	14	usage
LEAF_NODE	103:9	103:9	13	(
LEAF_NODE	103:10	103:10	13	)
LEAF_NODE	103:11	103:11	11	;
JUMP_STATEMENT	104:3	104:8	8	break DESTINATION ;
KEYWORD	104:3	104:3	9	break
LEAF_NODE	104:3	104:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	104:8	104:8	9	;
LEAF_NODE	105:2	105:2	8	case
LEAF_NODE	105:7	105:7	8	'r'
LEAF_NODE	105:10	105:10	8	:
EXPR_STATEMENT	106:3	106:30	8	rowsperstrip = atoi ( optarg ) ;
EXPR	106:3	106:3	9	rowsperstrip = atoi ( optarg )
ASSIGN	106:3	106:18	10	rowsperstrip = atoi ( optarg )
LVAL	106:3	106:3	11	rowsperstrip
FIELD	106:3	106:3	12	rowsperstrip
LEAF_NODE	106:3	106:3	13	rowsperstrip
ASSIGN_OP	106:16	106:16	11	=
LEAF_NODE	106:16	106:16	12	=
RVAL	106:18	106:18	11	atoi ( optarg )
FUNCTION_CALL	106:18	106:29	12	atoi ( optarg )
CALLEE	106:18	106:18	13	atoi
LEAF_NODE	106:18	106:18	14	atoi
LEAF_NODE	106:22	106:22	13	(
ARGUMENT	106:23	106:23	13	optarg
FIELD	106:23	106:23	14	optarg
LEAF_NODE	106:23	106:23	15	optarg
LEAF_NODE	106:29	106:29	13	)
LEAF_NODE	106:30	106:30	9	;
JUMP_STATEMENT	107:3	107:8	8	break DESTINATION ;
KEYWORD	107:3	107:3	9	break
LEAF_NODE	107:3	107:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	107:8	107:8	9	;
LEAF_NODE	108:2	108:2	8	case
LEAF_NODE	108:7	108:7	8	'?'
LEAF_NODE	108:10	108:10	8	:
EXPR_STATEMENT	109:3	109:10	8	usage ( ) ;
EXPR	109:3	109:3	9	usage ( )
FUNCTION_CALL	109:3	109:9	10	usage ( )
CALLEE	109:3	109:3	11	usage
LEAF_NODE	109:3	109:3	12	usage
LEAF_NODE	109:8	109:8	11	(
LEAF_NODE	109:9	109:9	11	)
LEAF_NODE	109:10	109:10	9	;
LEAF_NODE	111:2	111:2	7	}
SELECTION	112:1	113:2	3	
KEYWORD	112:1	112:1	4	if
LEAF_NODE	112:1	112:1	5	if
LEAF_NODE	112:4	112:4	4	(
CONDITION	112:5	112:5	4	argc - optind != 2
EXPR	112:5	112:22	5	argc - optind != 2
FIELD	112:5	112:5	6	argc
LEAF_NODE	112:5	112:5	7	argc
LEAF_NODE	112:10	112:10	6	-
FIELD	112:12	112:12	6	optind
LEAF_NODE	112:12	112:12	7	optind
EQ_OPERATOR	112:19	112:19	6	!=
LEAF_NODE	112:19	112:19	7	!=
FIELD	112:22	112:22	6	2
LEAF_NODE	112:22	112:22	7	2
LEAF_NODE	112:23	112:23	4	)
STATEMENTS	113:2	113:2	4	
EXPR_STATEMENT	113:2	113:9	5	usage ( ) ;
EXPR	113:2	113:2	6	usage ( )
FUNCTION_CALL	113:2	113:8	7	usage ( )
CALLEE	113:2	113:2	8	usage
LEAF_NODE	113:2	113:2	9	usage
LEAF_NODE	113:7	113:7	8	(
LEAF_NODE	113:8	113:8	8	)
LEAF_NODE	113:9	113:9	6	;
EXPR_STATEMENT	114:1	114:33	3	in = TIFFOpen ( argv [ optind ] , "r" ) ;
EXPR	114:1	114:1	4	in = TIFFOpen ( argv [ optind ] , "r" )
ASSIGN	114:1	114:6	5	in = TIFFOpen ( argv [ optind ] , "r" )
LVAL	114:1	114:1	6	in
FIELD	114:1	114:1	7	in
LEAF_NODE	114:1	114:1	8	in
ASSIGN_OP	114:4	114:4	6	=
LEAF_NODE	114:4	114:4	7	=
RVAL	114:6	114:6	6	TIFFOpen ( argv [ optind ] , "r" )
FUNCTION_CALL	114:6	114:32	7	TIFFOpen ( argv [ optind ] , "r" )
CALLEE	114:6	114:6	8	TIFFOpen
LEAF_NODE	114:6	114:6	9	TIFFOpen
LEAF_NODE	114:14	114:14	8	(
ARGUMENT	114:15	114:15	8	argv [ optind ]
FIELD	114:15	114:26	9	argv [ optind ]
LEAF_NODE	114:15	114:15	10	argv
LEAF_NODE	114:19	114:19	10	[
EXPR	114:20	114:20	10	optind
FIELD	114:20	114:20	11	optind
LEAF_NODE	114:20	114:20	12	optind
LEAF_NODE	114:26	114:26	10	]
LEAF_NODE	114:27	114:27	8	,
ARGUMENT	114:29	114:29	8	"r"
FIELD	114:29	114:29	9	"r"
LEAF_NODE	114:29	114:29	10	"r"
LEAF_NODE	114:32	114:32	8	)
LEAF_NODE	114:33	114:33	4	;
SELECTION	115:1	116:2	3	
KEYWORD	115:1	115:1	4	if
LEAF_NODE	115:1	115:1	5	if
LEAF_NODE	115:4	115:4	4	(
CONDITION	115:5	115:5	4	in == NULL
EXPR	115:5	115:11	5	in == NULL
FIELD	115:5	115:5	6	in
LEAF_NODE	115:5	115:5	7	in
EQ_OPERATOR	115:8	115:8	6	==
LEAF_NODE	115:8	115:8	7	==
FIELD	115:11	115:11	6	NULL
LEAF_NODE	115:11	115:11	7	NULL
LEAF_NODE	115:15	115:15	4	)
STATEMENTS	116:2	116:2	4	
JUMP_STATEMENT	116:2	116:13	5	return ( - 1 ) ;
KEYWORD	116:2	116:2	6	return
LEAF_NODE	116:2	116:2	7	return
DESTINATION	116:9	116:9	6	( - 1 )
EXPR	116:9	116:12	7	( - 1 )
LEAF_NODE	116:9	116:9	8	(
UNARY_EXPR	116:10	116:11	8	- 1
UNARY_OPERATOR	116:10	116:10	9	-
LEAF_NODE	116:10	116:10	10	-
FIELD	116:11	116:11	9	1
LEAF_NODE	116:11	116:11	10	1
LEAF_NODE	116:12	116:12	8	)
LEAF_NODE	116:13	116:13	6	;
SELECTION	117:1	118:36	3	
KEYWORD	117:1	117:1	4	if
LEAF_NODE	117:1	117:1	5	if
LEAF_NODE	117:4	117:4	4	(
CONDITION	117:5	117:5	4	! TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & shortv ) || shortv != PHOTOMETRIC_PALETTE
EXPR	117:5	117:5	5	! TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & shortv ) || shortv != PHOTOMETRIC_PALETTE
OR	117:5	118:5	6	! TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & shortv ) || shortv != PHOTOMETRIC_PALETTE
EXPR	117:5	117:5	7	! TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & shortv )
UNARY_EXPR	117:5	117:6	8	! TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & shortv )
UNARY_OPERATOR	117:5	117:5	9	!
LEAF_NODE	117:5	117:5	10	!
FUNCTION_CALL	117:6	117:51	9	TIFFGetField ( in , TIFFTAG_PHOTOMETRIC , & shortv )
CALLEE	117:6	117:6	10	TIFFGetField
LEAF_NODE	117:6	117:6	11	TIFFGetField
LEAF_NODE	117:18	117:18	10	(
ARGUMENT	117:19	117:19	10	in
FIELD	117:19	117:19	11	in
LEAF_NODE	117:19	117:19	12	in
LEAF_NODE	117:21	117:21	10	,
ARGUMENT	117:23	117:23	10	TIFFTAG_PHOTOMETRIC
FIELD	117:23	117:23	11	TIFFTAG_PHOTOMETRIC
LEAF_NODE	117:23	117:23	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	117:42	117:42	10	,
ARGUMENT	117:44	117:44	10	& shortv
UNARY_EXPR	117:44	117:45	11	& shortv
UNARY_OPERATOR	117:44	117:44	12	&
LEAF_NODE	117:44	117:44	13	&
FIELD	117:45	117:45	12	shortv
LEAF_NODE	117:45	117:45	13	shortv
LEAF_NODE	117:51	117:51	10	)
LEAF_NODE	117:53	117:53	7	||
EXPR	118:5	118:15	7	shortv != PHOTOMETRIC_PALETTE
FIELD	118:5	118:5	8	shortv
LEAF_NODE	118:5	118:5	9	shortv
EQ_OPERATOR	118:12	118:12	8	!=
LEAF_NODE	118:12	118:12	9	!=
FIELD	118:15	118:15	8	PHOTOMETRIC_PALETTE
LEAF_NODE	118:15	118:15	9	PHOTOMETRIC_PALETTE
LEAF_NODE	118:34	118:34	4	)
STATEMENTS	118:36	123:1	4	
LEAF_NODE	118:36	118:36	5	{
STATEMENTS	119:2	122:2	5	
EXPR_STATEMENT	119:2	120:19	6	fprintf ( stderr , "%s: Expecting a palette image.\n" , argv [ optind ] ) ;
EXPR	119:2	119:2	7	fprintf ( stderr , "%s: Expecting a palette image.\n" , argv [ optind ] )
FUNCTION_CALL	119:2	120:18	8	fprintf ( stderr , "%s: Expecting a palette image.\n" , argv [ optind ] )
CALLEE	119:2	119:2	9	fprintf
LEAF_NODE	119:2	119:2	10	fprintf
LEAF_NODE	119:9	119:9	9	(
ARGUMENT	119:10	119:10	9	stderr
FIELD	119:10	119:10	10	stderr
LEAF_NODE	119:10	119:10	11	stderr
LEAF_NODE	119:16	119:16	9	,
ARGUMENT	119:18	119:18	9	"%s: Expecting a palette image.\n"
FIELD	119:18	119:18	10	"%s: Expecting a palette image.\n"
LEAF_NODE	119:18	119:18	11	"%s: Expecting a palette image.\n"
LEAF_NODE	119:52	119:52	9	,
ARGUMENT	120:6	120:6	9	argv [ optind ]
FIELD	120:6	120:17	10	argv [ optind ]
LEAF_NODE	120:6	120:6	11	argv
LEAF_NODE	120:10	120:10	11	[
EXPR	120:11	120:11	11	optind
FIELD	120:11	120:11	12	optind
LEAF_NODE	120:11	120:11	13	optind
LEAF_NODE	120:17	120:17	11	]
LEAF_NODE	120:18	120:18	9	)
LEAF_NODE	120:19	120:19	7	;
EXPR_STATEMENT	121:2	121:22	6	( void ) TIFFClose ( in ) ;
EXPR	121:2	121:9	7	( void ) TIFFClose ( in )
LEAF_NODE	121:2	121:2	8	(
TYPE_NAME	121:3	121:3	8	void
LEAF_NODE	121:3	121:3	9	void
LEAF_NODE	121:7	121:7	8	)
FUNCTION_CALL	121:9	121:21	8	TIFFClose ( in )
CALLEE	121:9	121:9	9	TIFFClose
LEAF_NODE	121:9	121:9	10	TIFFClose
LEAF_NODE	121:18	121:18	9	(
ARGUMENT	121:19	121:19	9	in
FIELD	121:19	121:19	10	in
LEAF_NODE	121:19	121:19	11	in
LEAF_NODE	121:21	121:21	9	)
LEAF_NODE	121:22	121:22	7	;
JUMP_STATEMENT	122:2	122:13	6	return ( - 1 ) ;
KEYWORD	122:2	122:2	7	return
LEAF_NODE	122:2	122:2	8	return
DESTINATION	122:9	122:9	7	( - 1 )
EXPR	122:9	122:12	8	( - 1 )
LEAF_NODE	122:9	122:9	9	(
UNARY_EXPR	122:10	122:11	9	- 1
UNARY_OPERATOR	122:10	122:10	10	-
LEAF_NODE	122:10	122:10	11	-
FIELD	122:11	122:11	10	1
LEAF_NODE	122:11	122:11	11	1
LEAF_NODE	122:12	122:12	9	)
LEAF_NODE	122:13	122:13	7	;
LEAF_NODE	123:1	123:1	5	}
SELECTION	124:1	124:63	3	
KEYWORD	124:1	124:1	4	if
LEAF_NODE	124:1	124:1	5	if
LEAF_NODE	124:4	124:4	4	(
CONDITION	124:5	124:5	4	! TIFFGetField ( in , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
EXPR	124:5	124:5	5	! TIFFGetField ( in , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
UNARY_EXPR	124:5	124:6	6	! TIFFGetField ( in , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
UNARY_OPERATOR	124:5	124:5	7	!
LEAF_NODE	124:5	124:5	8	!
FUNCTION_CALL	124:6	124:60	7	TIFFGetField ( in , TIFFTAG_COLORMAP , & rmap , & gmap , & bmap )
CALLEE	124:6	124:6	8	TIFFGetField
LEAF_NODE	124:6	124:6	9	TIFFGetField
LEAF_NODE	124:18	124:18	8	(
ARGUMENT	124:19	124:19	8	in
FIELD	124:19	124:19	9	in
LEAF_NODE	124:19	124:19	10	in
LEAF_NODE	124:21	124:21	8	,
ARGUMENT	124:23	124:23	8	TIFFTAG_COLORMAP
FIELD	124:23	124:23	9	TIFFTAG_COLORMAP
LEAF_NODE	124:23	124:23	10	TIFFTAG_COLORMAP
LEAF_NODE	124:39	124:39	8	,
ARGUMENT	124:41	124:41	8	& rmap
UNARY_EXPR	124:41	124:42	9	& rmap
UNARY_OPERATOR	124:41	124:41	10	&
LEAF_NODE	124:41	124:41	11	&
FIELD	124:42	124:42	10	rmap
LEAF_NODE	124:42	124:42	11	rmap
LEAF_NODE	124:46	124:46	8	,
ARGUMENT	124:48	124:48	8	& gmap
UNARY_EXPR	124:48	124:49	9	& gmap
UNARY_OPERATOR	124:48	124:48	10	&
LEAF_NODE	124:48	124:48	11	&
FIELD	124:49	124:49	10	gmap
LEAF_NODE	124:49	124:49	11	gmap
LEAF_NODE	124:53	124:53	8	,
ARGUMENT	124:55	124:55	8	& bmap
UNARY_EXPR	124:55	124:56	9	& bmap
UNARY_OPERATOR	124:55	124:55	10	&
LEAF_NODE	124:55	124:55	11	&
FIELD	124:56	124:56	10	bmap
LEAF_NODE	124:56	124:56	11	bmap
LEAF_NODE	124:60	124:60	8	)
LEAF_NODE	124:61	124:61	4	)
STATEMENTS	124:63	130:1	4	
LEAF_NODE	124:63	124:63	5	{
STATEMENTS	125:2	129:2	5	
EXPR_STATEMENT	125:2	127:19	6	fprintf ( stderr , "%s: No colormap (not a valid palette image).\n" , argv [ optind ] ) ;
EXPR	125:2	125:2	7	fprintf ( stderr , "%s: No colormap (not a valid palette image).\n" , argv [ optind ] )
FUNCTION_CALL	125:2	127:18	8	fprintf ( stderr , "%s: No colormap (not a valid palette image).\n" , argv [ optind ] )
CALLEE	125:2	125:2	9	fprintf
LEAF_NODE	125:2	125:2	10	fprintf
LEAF_NODE	125:9	125:9	9	(
ARGUMENT	125:10	125:10	9	stderr
FIELD	125:10	125:10	10	stderr
LEAF_NODE	125:10	125:10	11	stderr
LEAF_NODE	125:16	125:16	9	,
ARGUMENT	126:6	126:6	9	"%s: No colormap (not a valid palette image).\n"
FIELD	126:6	126:6	10	"%s: No colormap (not a valid palette image).\n"
LEAF_NODE	126:6	126:6	11	"%s: No colormap (not a valid palette image).\n"
LEAF_NODE	126:54	126:54	9	,
ARGUMENT	127:6	127:6	9	argv [ optind ]
FIELD	127:6	127:17	10	argv [ optind ]
LEAF_NODE	127:6	127:6	11	argv
LEAF_NODE	127:10	127:10	11	[
EXPR	127:11	127:11	11	optind
FIELD	127:11	127:11	12	optind
LEAF_NODE	127:11	127:11	13	optind
LEAF_NODE	127:17	127:17	11	]
LEAF_NODE	127:18	127:18	9	)
LEAF_NODE	127:19	127:19	7	;
EXPR_STATEMENT	128:2	128:22	6	( void ) TIFFClose ( in ) ;
EXPR	128:2	128:9	7	( void ) TIFFClose ( in )
LEAF_NODE	128:2	128:2	8	(
TYPE_NAME	128:3	128:3	8	void
LEAF_NODE	128:3	128:3	9	void
LEAF_NODE	128:7	128:7	8	)
FUNCTION_CALL	128:9	128:21	8	TIFFClose ( in )
CALLEE	128:9	128:9	9	TIFFClose
LEAF_NODE	128:9	128:9	10	TIFFClose
LEAF_NODE	128:18	128:18	9	(
ARGUMENT	128:19	128:19	9	in
FIELD	128:19	128:19	10	in
LEAF_NODE	128:19	128:19	11	in
LEAF_NODE	128:21	128:21	9	)
LEAF_NODE	128:22	128:22	7	;
JUMP_STATEMENT	129:2	129:13	6	return ( - 1 ) ;
KEYWORD	129:2	129:2	7	return
LEAF_NODE	129:2	129:2	8	return
DESTINATION	129:9	129:9	7	( - 1 )
EXPR	129:9	129:12	8	( - 1 )
LEAF_NODE	129:9	129:9	9	(
UNARY_EXPR	129:10	129:11	9	- 1
UNARY_OPERATOR	129:10	129:10	10	-
LEAF_NODE	129:10	129:10	11	-
FIELD	129:11	129:11	10	1
LEAF_NODE	129:11	129:11	11	1
LEAF_NODE	129:12	129:12	9	)
LEAF_NODE	129:13	129:13	7	;
LEAF_NODE	130:1	130:1	5	}
EXPR_STATEMENT	131:1	131:18	3	bitspersample = 0 ;
EXPR	131:1	131:1	4	bitspersample = 0
ASSIGN	131:1	131:17	5	bitspersample = 0
LVAL	131:1	131:1	6	bitspersample
FIELD	131:1	131:1	7	bitspersample
LEAF_NODE	131:1	131:1	8	bitspersample
ASSIGN_OP	131:15	131:15	6	=
LEAF_NODE	131:15	131:15	7	=
RVAL	131:17	131:17	6	0
FIELD	131:17	131:17	7	0
LEAF_NODE	131:17	131:17	8	0
LEAF_NODE	131:18	131:18	4	;
EXPR_STATEMENT	132:1	132:56	3	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample ) ;
EXPR	132:1	132:1	4	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample )
FUNCTION_CALL	132:1	132:55	5	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bitspersample )
CALLEE	132:1	132:1	6	TIFFGetField
LEAF_NODE	132:1	132:1	7	TIFFGetField
LEAF_NODE	132:13	132:13	6	(
ARGUMENT	132:14	132:14	6	in
FIELD	132:14	132:14	7	in
LEAF_NODE	132:14	132:14	8	in
LEAF_NODE	132:16	132:16	6	,
ARGUMENT	132:18	132:18	6	TIFFTAG_BITSPERSAMPLE
FIELD	132:18	132:18	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	132:18	132:18	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	132:39	132:39	6	,
ARGUMENT	132:41	132:41	6	& bitspersample
UNARY_EXPR	132:41	132:42	7	& bitspersample
UNARY_OPERATOR	132:41	132:41	8	&
LEAF_NODE	132:41	132:41	9	&
FIELD	132:42	132:42	8	bitspersample
LEAF_NODE	132:42	132:42	9	bitspersample
LEAF_NODE	132:55	132:55	6	)
LEAF_NODE	132:56	132:56	4	;
SELECTION	133:1	133:25	3	
KEYWORD	133:1	133:1	4	if
LEAF_NODE	133:1	133:1	5	if
LEAF_NODE	133:4	133:4	4	(
CONDITION	133:5	133:5	4	bitspersample != 8
EXPR	133:5	133:22	5	bitspersample != 8
FIELD	133:5	133:5	6	bitspersample
LEAF_NODE	133:5	133:5	7	bitspersample
EQ_OPERATOR	133:19	133:19	6	!=
LEAF_NODE	133:19	133:19	7	!=
FIELD	133:22	133:22	6	8
LEAF_NODE	133:22	133:22	7	8
LEAF_NODE	133:23	133:23	4	)
STATEMENTS	133:25	138:1	4	
LEAF_NODE	133:25	133:25	5	{
STATEMENTS	134:2	137:2	5	
EXPR_STATEMENT	134:2	135:19	6	fprintf ( stderr , "%s: Sorry, can only handle 8-bit images.\n" , argv [ optind ] ) ;
EXPR	134:2	134:2	7	fprintf ( stderr , "%s: Sorry, can only handle 8-bit images.\n" , argv [ optind ] )
FUNCTION_CALL	134:2	135:18	8	fprintf ( stderr , "%s: Sorry, can only handle 8-bit images.\n" , argv [ optind ] )
CALLEE	134:2	134:2	9	fprintf
LEAF_NODE	134:2	134:2	10	fprintf
LEAF_NODE	134:9	134:9	9	(
ARGUMENT	134:10	134:10	9	stderr
FIELD	134:10	134:10	10	stderr
LEAF_NODE	134:10	134:10	11	stderr
LEAF_NODE	134:16	134:16	9	,
ARGUMENT	134:18	134:18	9	"%s: Sorry, can only handle 8-bit images.\n"
FIELD	134:18	134:18	10	"%s: Sorry, can only handle 8-bit images.\n"
LEAF_NODE	134:18	134:18	11	"%s: Sorry, can only handle 8-bit images.\n"
LEAF_NODE	134:62	134:62	9	,
ARGUMENT	135:6	135:6	9	argv [ optind ]
FIELD	135:6	135:17	10	argv [ optind ]
LEAF_NODE	135:6	135:6	11	argv
LEAF_NODE	135:10	135:10	11	[
EXPR	135:11	135:11	11	optind
FIELD	135:11	135:11	12	optind
LEAF_NODE	135:11	135:11	13	optind
LEAF_NODE	135:17	135:17	11	]
LEAF_NODE	135:18	135:18	9	)
LEAF_NODE	135:19	135:19	7	;
EXPR_STATEMENT	136:2	136:22	6	( void ) TIFFClose ( in ) ;
EXPR	136:2	136:9	7	( void ) TIFFClose ( in )
LEAF_NODE	136:2	136:2	8	(
TYPE_NAME	136:3	136:3	8	void
LEAF_NODE	136:3	136:3	9	void
LEAF_NODE	136:7	136:7	8	)
FUNCTION_CALL	136:9	136:21	8	TIFFClose ( in )
CALLEE	136:9	136:9	9	TIFFClose
LEAF_NODE	136:9	136:9	10	TIFFClose
LEAF_NODE	136:18	136:18	9	(
ARGUMENT	136:19	136:19	9	in
FIELD	136:19	136:19	10	in
LEAF_NODE	136:19	136:19	11	in
LEAF_NODE	136:21	136:21	9	)
LEAF_NODE	136:22	136:22	7	;
JUMP_STATEMENT	137:2	137:13	6	return ( - 1 ) ;
KEYWORD	137:2	137:2	7	return
LEAF_NODE	137:2	137:2	8	return
DESTINATION	137:9	137:9	7	( - 1 )
EXPR	137:9	137:12	8	( - 1 )
LEAF_NODE	137:9	137:9	9	(
UNARY_EXPR	137:10	137:11	9	- 1
UNARY_OPERATOR	137:10	137:10	10	-
LEAF_NODE	137:10	137:10	11	-
FIELD	137:11	137:11	10	1
LEAF_NODE	137:11	137:11	11	1
LEAF_NODE	137:12	137:12	9	)
LEAF_NODE	137:13	137:13	7	;
LEAF_NODE	138:1	138:1	5	}
EXPR_STATEMENT	139:1	139:36	3	out = TIFFOpen ( argv [ optind + 1 ] , "w" ) ;
EXPR	139:1	139:1	4	out = TIFFOpen ( argv [ optind + 1 ] , "w" )
ASSIGN	139:1	139:7	5	out = TIFFOpen ( argv [ optind + 1 ] , "w" )
LVAL	139:1	139:1	6	out
FIELD	139:1	139:1	7	out
LEAF_NODE	139:1	139:1	8	out
ASSIGN_OP	139:5	139:5	6	=
LEAF_NODE	139:5	139:5	7	=
RVAL	139:7	139:7	6	TIFFOpen ( argv [ optind + 1 ] , "w" )
FUNCTION_CALL	139:7	139:35	7	TIFFOpen ( argv [ optind + 1 ] , "w" )
CALLEE	139:7	139:7	8	TIFFOpen
LEAF_NODE	139:7	139:7	9	TIFFOpen
LEAF_NODE	139:15	139:15	8	(
ARGUMENT	139:16	139:16	8	argv [ optind + 1 ]
FIELD	139:16	139:29	9	argv [ optind + 1 ]
LEAF_NODE	139:16	139:16	10	argv
LEAF_NODE	139:20	139:20	10	[
EXPR	139:21	139:28	10	optind + 1
FIELD	139:21	139:21	11	optind
LEAF_NODE	139:21	139:21	12	optind
LEAF_NODE	139:27	139:27	11	+
FIELD	139:28	139:28	11	1
LEAF_NODE	139:28	139:28	12	1
LEAF_NODE	139:29	139:29	10	]
LEAF_NODE	139:30	139:30	8	,
ARGUMENT	139:32	139:32	8	"w"
FIELD	139:32	139:32	9	"w"
LEAF_NODE	139:32	139:32	10	"w"
LEAF_NODE	139:35	139:35	8	)
LEAF_NODE	139:36	139:36	4	;
SELECTION	140:1	140:18	3	
KEYWORD	140:1	140:1	4	if
LEAF_NODE	140:1	140:1	5	if
LEAF_NODE	140:4	140:4	4	(
CONDITION	140:5	140:5	4	out == NULL
EXPR	140:5	140:12	5	out == NULL
FIELD	140:5	140:5	6	out
LEAF_NODE	140:5	140:5	7	out
EQ_OPERATOR	140:9	140:9	6	==
LEAF_NODE	140:9	140:9	7	==
FIELD	140:12	140:12	6	NULL
LEAF_NODE	140:12	140:12	7	NULL
LEAF_NODE	140:16	140:16	4	)
STATEMENTS	140:18	143:1	4	
LEAF_NODE	140:18	140:18	5	{
STATEMENTS	141:2	142:2	5	
EXPR_STATEMENT	141:2	141:22	6	( void ) TIFFClose ( in ) ;
EXPR	141:2	141:9	7	( void ) TIFFClose ( in )
LEAF_NODE	141:2	141:2	8	(
TYPE_NAME	141:3	141:3	8	void
LEAF_NODE	141:3	141:3	9	void
LEAF_NODE	141:7	141:7	8	)
FUNCTION_CALL	141:9	141:21	8	TIFFClose ( in )
CALLEE	141:9	141:9	9	TIFFClose
LEAF_NODE	141:9	141:9	10	TIFFClose
LEAF_NODE	141:18	141:18	9	(
ARGUMENT	141:19	141:19	9	in
FIELD	141:19	141:19	10	in
LEAF_NODE	141:19	141:19	11	in
LEAF_NODE	141:21	141:21	9	)
LEAF_NODE	141:22	141:22	7	;
JUMP_STATEMENT	142:2	142:13	6	return ( - 2 ) ;
KEYWORD	142:2	142:2	7	return
LEAF_NODE	142:2	142:2	8	return
DESTINATION	142:9	142:9	7	( - 2 )
EXPR	142:9	142:12	8	( - 2 )
LEAF_NODE	142:9	142:9	9	(
UNARY_EXPR	142:10	142:11	9	- 2
UNARY_OPERATOR	142:10	142:10	10	-
LEAF_NODE	142:10	142:10	11	-
FIELD	142:11	142:11	10	2
LEAF_NODE	142:11	142:11	11	2
LEAF_NODE	142:12	142:12	9	)
LEAF_NODE	142:13	142:13	7	;
LEAF_NODE	143:1	143:1	5	}
EXPR_STATEMENT	144:1	144:16	3	cpTags ( in , out ) ;
EXPR	144:1	144:1	4	cpTags ( in , out )
FUNCTION_CALL	144:1	144:15	5	cpTags ( in , out )
CALLEE	144:1	144:1	6	cpTags
LEAF_NODE	144:1	144:1	7	cpTags
LEAF_NODE	144:7	144:7	6	(
ARGUMENT	144:8	144:8	6	in
FIELD	144:8	144:8	7	in
LEAF_NODE	144:8	144:8	8	in
LEAF_NODE	144:10	144:10	6	,
ARGUMENT	144:12	144:12	6	out
FIELD	144:12	144:12	7	out
LEAF_NODE	144:12	144:12	8	out
LEAF_NODE	144:15	144:15	6	)
LEAF_NODE	144:16	144:16	4	;
EXPR_STATEMENT	145:1	145:50	3	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & imagewidth ) ;
EXPR	145:1	145:1	4	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & imagewidth )
FUNCTION_CALL	145:1	145:49	5	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & imagewidth )
CALLEE	145:1	145:1	6	TIFFGetField
LEAF_NODE	145:1	145:1	7	TIFFGetField
LEAF_NODE	145:13	145:13	6	(
ARGUMENT	145:14	145:14	6	in
FIELD	145:14	145:14	7	in
LEAF_NODE	145:14	145:14	8	in
LEAF_NODE	145:16	145:16	6	,
ARGUMENT	145:18	145:18	6	TIFFTAG_IMAGEWIDTH
FIELD	145:18	145:18	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	145:18	145:18	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	145:36	145:36	6	,
ARGUMENT	145:38	145:38	6	& imagewidth
UNARY_EXPR	145:38	145:39	7	& imagewidth
UNARY_OPERATOR	145:38	145:38	8	&
LEAF_NODE	145:38	145:38	9	&
FIELD	145:39	145:39	8	imagewidth
LEAF_NODE	145:39	145:39	9	imagewidth
LEAF_NODE	145:49	145:49	6	)
LEAF_NODE	145:50	145:50	4	;
EXPR_STATEMENT	146:1	146:52	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & imagelength ) ;
EXPR	146:1	146:1	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & imagelength )
FUNCTION_CALL	146:1	146:51	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & imagelength )
CALLEE	146:1	146:1	6	TIFFGetField
LEAF_NODE	146:1	146:1	7	TIFFGetField
LEAF_NODE	146:13	146:13	6	(
ARGUMENT	146:14	146:14	6	in
FIELD	146:14	146:14	7	in
LEAF_NODE	146:14	146:14	8	in
LEAF_NODE	146:16	146:16	6	,
ARGUMENT	146:18	146:18	6	TIFFTAG_IMAGELENGTH
FIELD	146:18	146:18	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	146:18	146:18	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	146:37	146:37	6	,
ARGUMENT	146:39	146:39	6	& imagelength
UNARY_EXPR	146:39	146:40	7	& imagelength
UNARY_OPERATOR	146:39	146:39	8	&
LEAF_NODE	146:39	146:39	9	&
FIELD	146:40	146:40	8	imagelength
LEAF_NODE	146:40	146:40	9	imagelength
LEAF_NODE	146:51	146:51	6	)
LEAF_NODE	146:52	146:52	4	;
SELECTION	147:1	148:2	3	
KEYWORD	147:1	147:1	4	if
LEAF_NODE	147:1	147:1	5	if
LEAF_NODE	147:4	147:4	4	(
CONDITION	147:5	147:5	4	compression != ( uint16 ) - 1
EXPR	147:5	147:28	5	compression != ( uint16 ) - 1
FIELD	147:5	147:5	6	compression
LEAF_NODE	147:5	147:5	7	compression
EQ_OPERATOR	147:17	147:17	6	!=
LEAF_NODE	147:17	147:17	7	!=
LEAF_NODE	147:20	147:20	6	(
TYPE_NAME	147:21	147:21	6	uint16
LEAF_NODE	147:21	147:21	7	uint16
LEAF_NODE	147:27	147:27	6	)
UNARY_EXPR	147:28	147:29	6	- 1
UNARY_OPERATOR	147:28	147:28	7	-
LEAF_NODE	147:28	147:28	8	-
FIELD	147:29	147:29	7	1
LEAF_NODE	147:29	147:29	8	1
LEAF_NODE	147:30	147:30	4	)
STATEMENTS	148:2	148:2	4	
EXPR_STATEMENT	148:2	148:53	5	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	148:2	148:2	6	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	148:2	148:52	7	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	148:2	148:2	8	TIFFSetField
LEAF_NODE	148:2	148:2	9	TIFFSetField
LEAF_NODE	148:14	148:14	8	(
ARGUMENT	148:15	148:15	8	out
FIELD	148:15	148:15	9	out
LEAF_NODE	148:15	148:15	10	out
LEAF_NODE	148:18	148:18	8	,
ARGUMENT	148:20	148:20	8	TIFFTAG_COMPRESSION
FIELD	148:20	148:20	9	TIFFTAG_COMPRESSION
LEAF_NODE	148:20	148:20	10	TIFFTAG_COMPRESSION
LEAF_NODE	148:39	148:39	8	,
ARGUMENT	148:41	148:41	8	compression
FIELD	148:41	148:41	9	compression
LEAF_NODE	148:41	148:41	10	compression
LEAF_NODE	148:52	148:52	8	)
LEAF_NODE	148:53	148:53	6	;
SELECTION	149:1	150:2	3	
KEYWORD	149:1	149:1	4	else
LEAF_NODE	149:1	149:1	5	else
STATEMENTS	150:2	150:2	4	
EXPR_STATEMENT	150:2	150:53	5	TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) ;
EXPR	150:2	150:2	6	TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
FUNCTION_CALL	150:2	150:52	7	TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
CALLEE	150:2	150:2	8	TIFFGetField
LEAF_NODE	150:2	150:2	9	TIFFGetField
LEAF_NODE	150:14	150:14	8	(
ARGUMENT	150:15	150:15	8	in
FIELD	150:15	150:15	9	in
LEAF_NODE	150:15	150:15	10	in
LEAF_NODE	150:17	150:17	8	,
ARGUMENT	150:19	150:19	8	TIFFTAG_COMPRESSION
FIELD	150:19	150:19	9	TIFFTAG_COMPRESSION
LEAF_NODE	150:19	150:19	10	TIFFTAG_COMPRESSION
LEAF_NODE	150:38	150:38	8	,
ARGUMENT	150:40	150:40	8	& compression
UNARY_EXPR	150:40	150:41	9	& compression
UNARY_OPERATOR	150:40	150:40	10	&
LEAF_NODE	150:40	150:40	11	&
FIELD	150:41	150:41	10	compression
LEAF_NODE	150:41	150:41	11	compression
LEAF_NODE	150:52	150:52	8	)
LEAF_NODE	150:53	150:53	6	;
SELECTION	151:1	151:22	3	
KEYWORD	151:1	151:1	4	switch
LEAF_NODE	151:1	151:1	5	switch
LEAF_NODE	151:8	151:8	4	(
CONDITION	151:9	151:9	4	compression
EXPR	151:9	151:9	5	compression
FIELD	151:9	151:9	6	compression
LEAF_NODE	151:9	151:9	7	compression
LEAF_NODE	151:20	151:20	4	)
STATEMENTS	151:22	165:1	4	
LEAF_NODE	151:22	151:22	5	{
STATEMENTS	152:1	164:2	5	
LABEL	152:1	152:22	6	case COMPRESSION_JPEG :
LEAF_NODE	152:1	152:1	7	case
LEAF_NODE	152:6	152:6	7	COMPRESSION_JPEG
LEAF_NODE	152:22	152:22	7	:
SELECTION	153:2	154:3	6	
KEYWORD	153:2	153:2	7	if
LEAF_NODE	153:2	153:2	8	if
LEAF_NODE	153:5	153:5	7	(
CONDITION	153:6	153:6	7	jpegcolormode == JPEGCOLORMODE_RGB
EXPR	153:6	153:23	8	jpegcolormode == JPEGCOLORMODE_RGB
FIELD	153:6	153:6	9	jpegcolormode
LEAF_NODE	153:6	153:6	10	jpegcolormode
EQ_OPERATOR	153:20	153:20	9	==
LEAF_NODE	153:20	153:20	10	==
FIELD	153:23	153:23	9	JPEGCOLORMODE_RGB
LEAF_NODE	153:23	153:23	10	JPEGCOLORMODE_RGB
LEAF_NODE	153:40	153:40	7	)
STATEMENTS	154:3	154:3	7	
EXPR_STATEMENT	154:3	154:34	8	photometric = PHOTOMETRIC_YCBCR ;
EXPR	154:3	154:3	9	photometric = PHOTOMETRIC_YCBCR
ASSIGN	154:3	154:17	10	photometric = PHOTOMETRIC_YCBCR
LVAL	154:3	154:3	11	photometric
FIELD	154:3	154:3	12	photometric
LEAF_NODE	154:3	154:3	13	photometric
ASSIGN_OP	154:15	154:15	11	=
LEAF_NODE	154:15	154:15	12	=
RVAL	154:17	154:17	11	PHOTOMETRIC_YCBCR
FIELD	154:17	154:17	12	PHOTOMETRIC_YCBCR
LEAF_NODE	154:17	154:17	13	PHOTOMETRIC_YCBCR
LEAF_NODE	154:34	154:34	9	;
SELECTION	155:2	156:3	6	
KEYWORD	155:2	155:2	7	else
LEAF_NODE	155:2	155:2	8	else
STATEMENTS	156:3	156:3	7	
EXPR_STATEMENT	156:3	156:32	8	photometric = PHOTOMETRIC_RGB ;
EXPR	156:3	156:3	9	photometric = PHOTOMETRIC_RGB
ASSIGN	156:3	156:17	10	photometric = PHOTOMETRIC_RGB
LVAL	156:3	156:3	11	photometric
FIELD	156:3	156:3	12	photometric
LEAF_NODE	156:3	156:3	13	photometric
ASSIGN_OP	156:15	156:15	11	=
LEAF_NODE	156:15	156:15	12	=
RVAL	156:17	156:17	11	PHOTOMETRIC_RGB
FIELD	156:17	156:17	12	PHOTOMETRIC_RGB
LEAF_NODE	156:17	156:17	13	PHOTOMETRIC_RGB
LEAF_NODE	156:32	156:32	9	;
EXPR_STATEMENT	157:2	157:49	6	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality ) ;
EXPR	157:2	157:2	7	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
FUNCTION_CALL	157:2	157:48	8	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
CALLEE	157:2	157:2	9	TIFFSetField
LEAF_NODE	157:2	157:2	10	TIFFSetField
LEAF_NODE	157:14	157:14	9	(
ARGUMENT	157:15	157:15	9	out
FIELD	157:15	157:15	10	out
LEAF_NODE	157:15	157:15	11	out
LEAF_NODE	157:18	157:18	9	,
ARGUMENT	157:20	157:20	9	TIFFTAG_JPEGQUALITY
FIELD	157:20	157:20	10	TIFFTAG_JPEGQUALITY
LEAF_NODE	157:20	157:20	11	TIFFTAG_JPEGQUALITY
LEAF_NODE	157:39	157:39	9	,
ARGUMENT	157:41	157:41	9	quality
FIELD	157:41	157:41	10	quality
LEAF_NODE	157:41	157:41	11	quality
LEAF_NODE	157:48	157:48	9	)
LEAF_NODE	157:49	157:49	7	;
EXPR_STATEMENT	158:2	158:57	6	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode ) ;
EXPR	158:2	158:2	7	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode )
FUNCTION_CALL	158:2	158:56	8	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode )
CALLEE	158:2	158:2	9	TIFFSetField
LEAF_NODE	158:2	158:2	10	TIFFSetField
LEAF_NODE	158:14	158:14	9	(
ARGUMENT	158:15	158:15	9	out
FIELD	158:15	158:15	10	out
LEAF_NODE	158:15	158:15	11	out
LEAF_NODE	158:18	158:18	9	,
ARGUMENT	158:20	158:20	9	TIFFTAG_JPEGCOLORMODE
FIELD	158:20	158:20	10	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	158:20	158:20	11	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	158:41	158:41	9	,
ARGUMENT	158:43	158:43	9	jpegcolormode
FIELD	158:43	158:43	10	jpegcolormode
LEAF_NODE	158:43	158:43	11	jpegcolormode
LEAF_NODE	158:56	158:56	9	)
LEAF_NODE	158:57	158:57	7	;
JUMP_STATEMENT	159:2	159:7	6	break DESTINATION ;
KEYWORD	159:2	159:2	7	break
LEAF_NODE	159:2	159:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	159:7	159:7	7	;
LABEL	160:1	160:21	6	case COMPRESSION_LZW :
LEAF_NODE	160:1	160:1	7	case
LEAF_NODE	160:6	160:6	7	COMPRESSION_LZW
LEAF_NODE	160:21	160:21	7	:
LABEL	161:1	161:25	6	case COMPRESSION_DEFLATE :
LEAF_NODE	161:1	161:1	7	case
LEAF_NODE	161:6	161:6	7	COMPRESSION_DEFLATE
LEAF_NODE	161:25	161:25	7	:
SELECTION	162:2	163:3	6	
KEYWORD	162:2	162:2	7	if
LEAF_NODE	162:2	162:2	8	if
LEAF_NODE	162:5	162:5	7	(
CONDITION	162:6	162:6	7	predictor != 0
EXPR	162:6	162:19	8	predictor != 0
FIELD	162:6	162:6	9	predictor
LEAF_NODE	162:6	162:6	10	predictor
EQ_OPERATOR	162:16	162:16	9	!=
LEAF_NODE	162:16	162:16	10	!=
FIELD	162:19	162:19	9	0
LEAF_NODE	162:19	162:19	10	0
LEAF_NODE	162:20	162:20	7	)
STATEMENTS	163:3	163:3	7	
EXPR_STATEMENT	163:3	163:50	8	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor ) ;
EXPR	163:3	163:3	9	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	163:3	163:49	10	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
CALLEE	163:3	163:3	11	TIFFSetField
LEAF_NODE	163:3	163:3	12	TIFFSetField
LEAF_NODE	163:15	163:15	11	(
ARGUMENT	163:16	163:16	11	out
FIELD	163:16	163:16	12	out
LEAF_NODE	163:16	163:16	13	out
LEAF_NODE	163:19	163:19	11	,
ARGUMENT	163:21	163:21	11	TIFFTAG_PREDICTOR
FIELD	163:21	163:21	12	TIFFTAG_PREDICTOR
LEAF_NODE	163:21	163:21	13	TIFFTAG_PREDICTOR
LEAF_NODE	163:38	163:38	11	,
ARGUMENT	163:40	163:40	11	predictor
FIELD	163:40	163:40	12	predictor
LEAF_NODE	163:40	163:40	13	predictor
LEAF_NODE	163:49	163:49	11	)
LEAF_NODE	163:50	163:50	9	;
JUMP_STATEMENT	164:2	164:7	6	break DESTINATION ;
KEYWORD	164:2	164:2	7	break
LEAF_NODE	164:2	164:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	164:7	164:7	7	;
LEAF_NODE	165:1	165:1	5	}
EXPR_STATEMENT	166:1	166:52	3	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric ) ;
EXPR	166:1	166:1	4	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric )
FUNCTION_CALL	166:1	166:51	5	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , photometric )
CALLEE	166:1	166:1	6	TIFFSetField
LEAF_NODE	166:1	166:1	7	TIFFSetField
LEAF_NODE	166:13	166:13	6	(
ARGUMENT	166:14	166:14	6	out
FIELD	166:14	166:14	7	out
LEAF_NODE	166:14	166:14	8	out
LEAF_NODE	166:17	166:17	6	,
ARGUMENT	166:19	166:19	6	TIFFTAG_PHOTOMETRIC
FIELD	166:19	166:19	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	166:19	166:19	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	166:38	166:38	6	,
ARGUMENT	166:40	166:40	6	photometric
FIELD	166:40	166:40	7	photometric
LEAF_NODE	166:40	166:40	8	photometric
LEAF_NODE	166:51	166:51	6	)
LEAF_NODE	166:52	166:52	4	;
EXPR_STATEMENT	167:1	167:46	3	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 3 ) ;
EXPR	167:1	167:1	4	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 3 )
FUNCTION_CALL	167:1	167:45	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , 3 )
CALLEE	167:1	167:1	6	TIFFSetField
LEAF_NODE	167:1	167:1	7	TIFFSetField
LEAF_NODE	167:13	167:13	6	(
ARGUMENT	167:14	167:14	6	out
FIELD	167:14	167:14	7	out
LEAF_NODE	167:14	167:14	8	out
LEAF_NODE	167:17	167:17	6	,
ARGUMENT	167:19	167:19	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	167:19	167:19	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	167:19	167:19	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	167:42	167:42	6	,
ARGUMENT	167:44	167:44	6	3
FIELD	167:44	167:44	7	3
LEAF_NODE	167:44	167:44	8	3
LEAF_NODE	167:45	167:45	6	)
LEAF_NODE	167:46	167:46	4	;
EXPR_STATEMENT	168:1	168:48	3	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config ) ;
EXPR	168:1	168:1	4	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config )
FUNCTION_CALL	168:1	168:47	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config )
CALLEE	168:1	168:1	6	TIFFSetField
LEAF_NODE	168:1	168:1	7	TIFFSetField
LEAF_NODE	168:13	168:13	6	(
ARGUMENT	168:14	168:14	6	out
FIELD	168:14	168:14	7	out
LEAF_NODE	168:14	168:14	8	out
LEAF_NODE	168:17	168:17	6	,
ARGUMENT	168:19	168:19	6	TIFFTAG_PLANARCONFIG
FIELD	168:19	168:19	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	168:19	168:19	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	168:39	168:39	6	,
ARGUMENT	168:41	168:41	6	config
FIELD	168:41	168:41	7	config
LEAF_NODE	168:41	168:41	8	config
LEAF_NODE	168:47	168:47	6	)
LEAF_NODE	168:48	168:48	4	;
EXPR_STATEMENT	169:1	170:60	3	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip ) ) ;
EXPR	169:1	169:1	4	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip ) )
FUNCTION_CALL	169:1	170:59	5	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip ) )
CALLEE	169:1	169:1	6	TIFFSetField
LEAF_NODE	169:1	169:1	7	TIFFSetField
LEAF_NODE	169:13	169:13	6	(
ARGUMENT	169:14	169:14	6	out
FIELD	169:14	169:14	7	out
LEAF_NODE	169:14	169:14	8	out
LEAF_NODE	169:17	169:17	6	,
ARGUMENT	169:19	169:19	6	TIFFTAG_ROWSPERSTRIP
FIELD	169:19	169:19	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	169:19	169:19	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	169:39	169:39	6	,
ARGUMENT	170:5	170:5	6	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
ASSIGN	170:5	170:20	7	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
LVAL	170:5	170:5	8	rowsperstrip
FIELD	170:5	170:5	9	rowsperstrip
LEAF_NODE	170:5	170:5	10	rowsperstrip
ASSIGN_OP	170:18	170:18	8	=
LEAF_NODE	170:18	170:18	9	=
RVAL	170:20	170:20	8	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	170:20	170:58	9	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	170:20	170:20	10	TIFFDefaultStripSize
LEAF_NODE	170:20	170:20	11	TIFFDefaultStripSize
LEAF_NODE	170:40	170:40	10	(
ARGUMENT	170:41	170:41	10	out
FIELD	170:41	170:41	11	out
LEAF_NODE	170:41	170:41	12	out
LEAF_NODE	170:44	170:44	10	,
ARGUMENT	170:46	170:46	10	rowsperstrip
FIELD	170:46	170:46	11	rowsperstrip
LEAF_NODE	170:46	170:46	12	rowsperstrip
LEAF_NODE	170:58	170:58	10	)
LEAF_NODE	170:59	170:59	6	)
LEAF_NODE	170:60	170:60	4	;
EXPR_STATEMENT	171:1	171:55	3	( void ) TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & shortv ) ;
EXPR	171:1	171:8	4	( void ) TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & shortv )
LEAF_NODE	171:1	171:1	5	(
TYPE_NAME	171:2	171:2	5	void
LEAF_NODE	171:2	171:2	6	void
LEAF_NODE	171:6	171:6	5	)
FUNCTION_CALL	171:8	171:54	5	TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & shortv )
CALLEE	171:8	171:8	6	TIFFGetField
LEAF_NODE	171:8	171:8	7	TIFFGetField
LEAF_NODE	171:20	171:20	6	(
ARGUMENT	171:21	171:21	6	in
FIELD	171:21	171:21	7	in
LEAF_NODE	171:21	171:21	8	in
LEAF_NODE	171:23	171:23	6	,
ARGUMENT	171:25	171:25	6	TIFFTAG_PLANARCONFIG
FIELD	171:25	171:25	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	171:25	171:25	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	171:45	171:45	6	,
ARGUMENT	171:47	171:47	6	& shortv
UNARY_EXPR	171:47	171:48	7	& shortv
UNARY_OPERATOR	171:47	171:47	8	&
LEAF_NODE	171:47	171:47	9	&
FIELD	171:48	171:48	8	shortv
LEAF_NODE	171:48	171:48	9	shortv
LEAF_NODE	171:54	171:54	6	)
LEAF_NODE	171:55	171:55	4	;
SELECTION	172:1	173:2	3	
KEYWORD	172:1	172:1	4	if
LEAF_NODE	172:1	172:1	5	if
LEAF_NODE	172:4	172:4	4	(
CONDITION	172:5	172:5	4	cmap == - 1
EXPR	172:5	172:13	5	cmap == - 1
FIELD	172:5	172:5	6	cmap
LEAF_NODE	172:5	172:5	7	cmap
EQ_OPERATOR	172:10	172:10	6	==
LEAF_NODE	172:10	172:10	7	==
UNARY_EXPR	172:13	172:14	6	- 1
UNARY_OPERATOR	172:13	172:13	7	-
LEAF_NODE	172:13	172:13	8	-
FIELD	172:14	172:14	7	1
LEAF_NODE	172:14	172:14	8	1
LEAF_NODE	172:15	172:15	4	)
STATEMENTS	173:2	173:2	4	
EXPR_STATEMENT	173:2	173:54	5	cmap = checkcmap ( 1 << bitspersample , rmap , gmap , bmap ) ;
EXPR	173:2	173:2	6	cmap = checkcmap ( 1 << bitspersample , rmap , gmap , bmap )
ASSIGN	173:2	173:9	7	cmap = checkcmap ( 1 << bitspersample , rmap , gmap , bmap )
LVAL	173:2	173:2	8	cmap
FIELD	173:2	173:2	9	cmap
LEAF_NODE	173:2	173:2	10	cmap
ASSIGN_OP	173:7	173:7	8	=
LEAF_NODE	173:7	173:7	9	=
RVAL	173:9	173:9	8	checkcmap ( 1 << bitspersample , rmap , gmap , bmap )
FUNCTION_CALL	173:9	173:53	9	checkcmap ( 1 << bitspersample , rmap , gmap , bmap )
CALLEE	173:9	173:9	10	checkcmap
LEAF_NODE	173:9	173:9	11	checkcmap
LEAF_NODE	173:18	173:18	10	(
ARGUMENT	173:19	173:22	10	1 << bitspersample
FIELD	173:19	173:19	11	1
LEAF_NODE	173:19	173:19	12	1
LEAF_NODE	173:20	173:20	11	<<
FIELD	173:22	173:22	11	bitspersample
LEAF_NODE	173:22	173:22	12	bitspersample
LEAF_NODE	173:35	173:35	10	,
ARGUMENT	173:37	173:37	10	rmap
FIELD	173:37	173:37	11	rmap
LEAF_NODE	173:37	173:37	12	rmap
LEAF_NODE	173:41	173:41	10	,
ARGUMENT	173:43	173:43	10	gmap
FIELD	173:43	173:43	11	gmap
LEAF_NODE	173:43	173:43	12	gmap
LEAF_NODE	173:47	173:47	10	,
ARGUMENT	173:49	173:49	10	bmap
FIELD	173:49	173:49	11	bmap
LEAF_NODE	173:49	173:49	12	bmap
LEAF_NODE	173:53	173:53	10	)
LEAF_NODE	173:54	173:54	6	;
SELECTION	174:1	174:17	3	
KEYWORD	174:1	174:1	4	if
LEAF_NODE	174:1	174:1	5	if
LEAF_NODE	174:4	174:4	4	(
CONDITION	174:5	174:5	4	cmap == 16
EXPR	174:5	174:13	5	cmap == 16
FIELD	174:5	174:5	6	cmap
LEAF_NODE	174:5	174:5	7	cmap
EQ_OPERATOR	174:10	174:10	6	==
LEAF_NODE	174:10	174:10	7	==
FIELD	174:13	174:13	6	16
LEAF_NODE	174:13	174:13	7	16
LEAF_NODE	174:15	174:15	4	)
STATEMENTS	174:17	186:1	4	
LEAF_NODE	174:17	174:17	5	{
STATEMENTS	178:2	180:2	5	
SIMPLE_DECL	178:2	178:7	6	int i ;
VAR_DECL	178:2	178:6	7	int i
TYPE	178:2	178:2	8	int
TYPE_NAME	178:2	178:2	9	int
LEAF_NODE	178:2	178:2	10	int
NAME	178:6	178:6	8	i
LEAF_NODE	178:6	178:6	9	i
LEAF_NODE	178:7	178:7	7	;
ITERATION	180:2	180:46	6	
KEYWORD	180:2	180:2	7	for
LEAF_NODE	180:2	180:2	8	for
LEAF_NODE	180:6	180:6	7	(
FOR_INIT	180:7	180:31	7	i = ( 1 << bitspersample ) - 1 ;
EXPR	180:7	180:7	8	i = ( 1 << bitspersample ) - 1
ASSIGN	180:7	180:11	9	i = ( 1 << bitspersample ) - 1
LVAL	180:7	180:7	10	i
FIELD	180:7	180:7	11	i
LEAF_NODE	180:7	180:7	12	i
ASSIGN_OP	180:9	180:9	10	=
LEAF_NODE	180:9	180:9	11	=
RVAL	180:11	180:30	10	( 1 << bitspersample ) - 1
LEAF_NODE	180:11	180:11	11	(
FIELD	180:12	180:12	11	1
LEAF_NODE	180:12	180:12	12	1
LEAF_NODE	180:13	180:13	11	<<
FIELD	180:15	180:15	11	bitspersample
LEAF_NODE	180:15	180:15	12	bitspersample
LEAF_NODE	180:28	180:28	11	)
LEAF_NODE	180:29	180:29	11	-
FIELD	180:30	180:30	11	1
LEAF_NODE	180:30	180:30	12	1
LEAF_NODE	180:31	180:31	8	;
CONDITION	180:33	180:33	7	i >= 0
EXPR	180:33	180:38	8	i >= 0
FIELD	180:33	180:33	9	i
LEAF_NODE	180:33	180:33	10	i
REL_OPERATOR	180:35	180:35	9	>=
LEAF_NODE	180:35	180:35	10	>=
FIELD	180:38	180:38	9	0
LEAF_NODE	180:38	180:38	10	0
LEAF_NODE	180:39	180:39	7	;
FOR_EXPR	180:41	180:41	7	i --
EXPR	180:41	180:41	8	i --
FIELD	180:41	180:42	9	i --
LEAF_NODE	180:41	180:41	10	i
LEAF_NODE	180:42	180:42	10	--
LEAF_NODE	180:44	180:44	7	)
STATEMENTS	180:46	185:2	7	
LEAF_NODE	180:46	180:46	8	{
STATEMENTS	182:3	184:3	8	
EXPR_STATEMENT	182:3	182:25	9	rmap [ i ] = CVT ( rmap [ i ] ) ;
EXPR	182:3	182:3	10	rmap [ i ] = CVT ( rmap [ i ] )
ASSIGN	182:3	182:13	11	rmap [ i ] = CVT ( rmap [ i ] )
LVAL	182:3	182:3	12	rmap [ i ]
FIELD	182:3	182:9	13	rmap [ i ]
LEAF_NODE	182:3	182:3	14	rmap
LEAF_NODE	182:7	182:7	14	[
EXPR	182:8	182:8	14	i
FIELD	182:8	182:8	15	i
LEAF_NODE	182:8	182:8	16	i
LEAF_NODE	182:9	182:9	14	]
ASSIGN_OP	182:11	182:11	12	=
LEAF_NODE	182:11	182:11	13	=
RVAL	182:13	182:13	12	CVT ( rmap [ i ] )
FUNCTION_CALL	182:13	182:24	13	CVT ( rmap [ i ] )
CALLEE	182:13	182:13	14	CVT
LEAF_NODE	182:13	182:13	15	CVT
LEAF_NODE	182:16	182:16	14	(
ARGUMENT	182:17	182:17	14	rmap [ i ]
FIELD	182:17	182:23	15	rmap [ i ]
LEAF_NODE	182:17	182:17	16	rmap
LEAF_NODE	182:21	182:21	16	[
EXPR	182:22	182:22	16	i
FIELD	182:22	182:22	17	i
LEAF_NODE	182:22	182:22	18	i
LEAF_NODE	182:23	182:23	16	]
LEAF_NODE	182:24	182:24	14	)
LEAF_NODE	182:25	182:25	10	;
EXPR_STATEMENT	183:3	183:25	9	gmap [ i ] = CVT ( gmap [ i ] ) ;
EXPR	183:3	183:3	10	gmap [ i ] = CVT ( gmap [ i ] )
ASSIGN	183:3	183:13	11	gmap [ i ] = CVT ( gmap [ i ] )
LVAL	183:3	183:3	12	gmap [ i ]
FIELD	183:3	183:9	13	gmap [ i ]
LEAF_NODE	183:3	183:3	14	gmap
LEAF_NODE	183:7	183:7	14	[
EXPR	183:8	183:8	14	i
FIELD	183:8	183:8	15	i
LEAF_NODE	183:8	183:8	16	i
LEAF_NODE	183:9	183:9	14	]
ASSIGN_OP	183:11	183:11	12	=
LEAF_NODE	183:11	183:11	13	=
RVAL	183:13	183:13	12	CVT ( gmap [ i ] )
FUNCTION_CALL	183:13	183:24	13	CVT ( gmap [ i ] )
CALLEE	183:13	183:13	14	CVT
LEAF_NODE	183:13	183:13	15	CVT
LEAF_NODE	183:16	183:16	14	(
ARGUMENT	183:17	183:17	14	gmap [ i ]
FIELD	183:17	183:23	15	gmap [ i ]
LEAF_NODE	183:17	183:17	16	gmap
LEAF_NODE	183:21	183:21	16	[
EXPR	183:22	183:22	16	i
FIELD	183:22	183:22	17	i
LEAF_NODE	183:22	183:22	18	i
LEAF_NODE	183:23	183:23	16	]
LEAF_NODE	183:24	183:24	14	)
LEAF_NODE	183:25	183:25	10	;
EXPR_STATEMENT	184:3	184:25	9	bmap [ i ] = CVT ( bmap [ i ] ) ;
EXPR	184:3	184:3	10	bmap [ i ] = CVT ( bmap [ i ] )
ASSIGN	184:3	184:13	11	bmap [ i ] = CVT ( bmap [ i ] )
LVAL	184:3	184:3	12	bmap [ i ]
FIELD	184:3	184:9	13	bmap [ i ]
LEAF_NODE	184:3	184:3	14	bmap
LEAF_NODE	184:7	184:7	14	[
EXPR	184:8	184:8	14	i
FIELD	184:8	184:8	15	i
LEAF_NODE	184:8	184:8	16	i
LEAF_NODE	184:9	184:9	14	]
ASSIGN_OP	184:11	184:11	12	=
LEAF_NODE	184:11	184:11	13	=
RVAL	184:13	184:13	12	CVT ( bmap [ i ] )
FUNCTION_CALL	184:13	184:24	13	CVT ( bmap [ i ] )
CALLEE	184:13	184:13	14	CVT
LEAF_NODE	184:13	184:13	15	CVT
LEAF_NODE	184:16	184:16	14	(
ARGUMENT	184:17	184:17	14	bmap [ i ]
FIELD	184:17	184:23	15	bmap [ i ]
LEAF_NODE	184:17	184:17	16	bmap
LEAF_NODE	184:21	184:21	16	[
EXPR	184:22	184:22	16	i
FIELD	184:22	184:22	17	i
LEAF_NODE	184:22	184:22	18	i
LEAF_NODE	184:23	184:23	16	]
LEAF_NODE	184:24	184:24	14	)
LEAF_NODE	184:25	184:25	10	;
LEAF_NODE	185:2	185:2	8	}
LEAF_NODE	186:1	186:1	5	}
LEAF_NODE	187:1	187:1	3	{
STATEMENTS	187:3	240:3	3	
SIMPLE_DECL	187:3	187:29	4	unsigned char * ibuf , unsigned char * obuf ;
INIT_DECL_LIST	187:3	187:3	5	unsigned char * ibuf , unsigned char * obuf
VAR_DECL	187:3	187:18	6	unsigned char * ibuf
TYPE	187:3	187:17	7	unsigned char *
TYPE_NAME	187:3	187:12	8	unsigned char
LEAF_NODE	187:3	187:3	9	unsigned
LEAF_NODE	187:12	187:12	9	char
POINTER	187:17	187:17	8	*
LEAF_NODE	187:17	187:17	9	*
NAME	187:18	187:18	7	ibuf
LEAF_NODE	187:18	187:18	8	ibuf
LEAF_NODE	187:22	187:22	6	,
VAR_DECL	187:3	187:25	6	unsigned char * obuf
TYPE	187:3	187:24	7	unsigned char *
TYPE_NAME	187:3	187:12	8	unsigned char
LEAF_NODE	187:3	187:3	9	unsigned
LEAF_NODE	187:12	187:12	9	char
POINTER	187:24	187:24	8	*
LEAF_NODE	187:24	187:24	9	*
NAME	187:25	187:25	7	obuf
LEAF_NODE	187:25	187:25	8	obuf
LEAF_NODE	187:29	187:29	5	;
LEAF_NODE	188:3	188:3	4	register
SIMPLE_DECL	188:12	188:29	4	unsigned char * pp ;
VAR_DECL	188:12	188:27	5	unsigned char * pp
TYPE	188:12	188:25	6	unsigned char *
TYPE_NAME	188:12	188:21	7	unsigned char
LEAF_NODE	188:12	188:12	8	unsigned
LEAF_NODE	188:21	188:21	8	char
POINTER	188:25	188:25	7	*
LEAF_NODE	188:25	188:25	8	*
NAME	188:27	188:27	6	pp
LEAF_NODE	188:27	188:27	7	pp
LEAF_NODE	188:29	188:29	5	;
LEAF_NODE	189:3	189:3	4	register
SIMPLE_DECL	189:12	189:20	4	uint32 x ;
VAR_DECL	189:12	189:19	5	uint32 x
TYPE	189:12	189:12	6	uint32
TYPE_NAME	189:12	189:12	7	uint32
LEAF_NODE	189:12	189:12	8	uint32
NAME	189:19	189:19	6	x
LEAF_NODE	189:19	189:19	7	x
LEAF_NODE	189:20	189:20	5	;
SIMPLE_DECL	190:3	190:41	4	tmsize_t tss_in ; tss_in = TIFFScanlineSize ( in ) ;
VAR_DECL	190:3	190:12	5	tmsize_t tss_in ; tss_in = TIFFScanlineSize ( in )
TYPE	190:3	190:3	6	tmsize_t
TYPE_NAME	190:3	190:3	7	tmsize_t
LEAF_NODE	190:3	190:3	8	tmsize_t
NAME	190:12	190:12	6	tss_in
LEAF_NODE	190:12	190:12	7	tss_in
LEAF_NODE	0:0	0:0	6	;
INIT	190:12	190:12	6	tss_in = TIFFScanlineSize ( in )
ASSIGN	190:12	190:21	7	tss_in = TIFFScanlineSize ( in )
LVAL	190:12	190:12	8	tss_in
NAME	190:12	190:12	9	tss_in
LEAF_NODE	190:12	190:12	10	tss_in
ASSIGN_OP	190:19	190:19	8	=
LEAF_NODE	190:19	190:19	9	=
RVAL	190:21	190:21	8	TIFFScanlineSize ( in )
FUNCTION_CALL	190:21	190:40	9	TIFFScanlineSize ( in )
CALLEE	190:21	190:21	10	TIFFScanlineSize
LEAF_NODE	190:21	190:21	11	TIFFScanlineSize
LEAF_NODE	190:37	190:37	10	(
ARGUMENT	190:38	190:38	10	in
FIELD	190:38	190:38	11	in
LEAF_NODE	190:38	190:38	12	in
LEAF_NODE	190:40	190:40	10	)
LEAF_NODE	190:41	190:41	5	;
SIMPLE_DECL	191:3	191:43	4	tmsize_t tss_out ; tss_out = TIFFScanlineSize ( out ) ;
VAR_DECL	191:3	191:12	5	tmsize_t tss_out ; tss_out = TIFFScanlineSize ( out )
TYPE	191:3	191:3	6	tmsize_t
TYPE_NAME	191:3	191:3	7	tmsize_t
LEAF_NODE	191:3	191:3	8	tmsize_t
NAME	191:12	191:12	6	tss_out
LEAF_NODE	191:12	191:12	7	tss_out
LEAF_NODE	0:0	0:0	6	;
INIT	191:12	191:12	6	tss_out = TIFFScanlineSize ( out )
ASSIGN	191:12	191:22	7	tss_out = TIFFScanlineSize ( out )
LVAL	191:12	191:12	8	tss_out
NAME	191:12	191:12	9	tss_out
LEAF_NODE	191:12	191:12	10	tss_out
ASSIGN_OP	191:20	191:20	8	=
LEAF_NODE	191:20	191:20	9	=
RVAL	191:22	191:22	8	TIFFScanlineSize ( out )
FUNCTION_CALL	191:22	191:42	9	TIFFScanlineSize ( out )
CALLEE	191:22	191:22	10	TIFFScanlineSize
LEAF_NODE	191:22	191:22	11	TIFFScanlineSize
LEAF_NODE	191:38	191:38	10	(
ARGUMENT	191:39	191:39	10	out
FIELD	191:39	191:39	11	out
LEAF_NODE	191:39	191:39	12	out
LEAF_NODE	191:42	191:42	10	)
LEAF_NODE	191:43	191:43	5	;
SELECTION	192:3	192:29	4	
KEYWORD	192:3	192:3	5	if
LEAF_NODE	192:3	192:3	6	if
LEAF_NODE	192:6	192:6	5	(
CONDITION	192:7	192:7	5	tss_out / tss_in < 3
EXPR	192:7	192:26	6	tss_out / tss_in < 3
FIELD	192:7	192:7	7	tss_out
LEAF_NODE	192:7	192:7	8	tss_out
LEAF_NODE	192:15	192:15	7	/
FIELD	192:17	192:17	7	tss_in
LEAF_NODE	192:17	192:17	8	tss_in
REL_OPERATOR	192:24	192:24	7	<
LEAF_NODE	192:24	192:24	8	<
FIELD	192:26	192:26	7	3
LEAF_NODE	192:26	192:26	8	3
LEAF_NODE	192:27	192:27	5	)
STATEMENTS	192:29	202:6	5	
LEAF_NODE	192:29	192:29	6	{
STATEMENTS	200:2	201:2	6	
EXPR_STATEMENT	200:2	200:82	7	fprintf ( stderr , "Could not determine correct image size for output. Exiting.\n" ) ;
EXPR	200:2	200:2	8	fprintf ( stderr , "Could not determine correct image size for output. Exiting.\n" )
FUNCTION_CALL	200:2	200:81	9	fprintf ( stderr , "Could not determine correct image size for output. Exiting.\n" )
CALLEE	200:2	200:2	10	fprintf
LEAF_NODE	200:2	200:2	11	fprintf
LEAF_NODE	200:9	200:9	10	(
ARGUMENT	200:10	200:10	10	stderr
FIELD	200:10	200:10	11	stderr
LEAF_NODE	200:10	200:10	12	stderr
LEAF_NODE	200:16	200:16	10	,
ARGUMENT	200:18	200:18	10	"Could not determine correct image size for output. Exiting.\n"
FIELD	200:18	200:18	11	"Could not determine correct image size for output. Exiting.\n"
LEAF_NODE	200:18	200:18	12	"Could not determine correct image size for output. Exiting.\n"
LEAF_NODE	200:81	200:81	10	)
LEAF_NODE	200:82	200:82	8	;
JUMP_STATEMENT	201:2	201:11	7	return - 1 ;
KEYWORD	201:2	201:2	8	return
LEAF_NODE	201:2	201:2	9	return
DESTINATION	201:9	201:9	8	- 1
EXPR	201:9	201:9	9	- 1
UNARY_EXPR	201:9	201:10	10	- 1
UNARY_OPERATOR	201:9	201:9	11	-
LEAF_NODE	201:9	201:9	12	-
FIELD	201:10	201:10	11	1
LEAF_NODE	201:10	201:10	12	1
LEAF_NODE	201:11	201:11	8	;
LEAF_NODE	202:6	202:6	6	}
EXPR_STATEMENT	203:3	203:45	4	ibuf = ( unsigned char * ) _TIFFmalloc ( tss_in ) ;
EXPR	203:3	203:3	5	ibuf = ( unsigned char * ) _TIFFmalloc ( tss_in )
ASSIGN	203:3	203:10	6	ibuf = ( unsigned char * ) _TIFFmalloc ( tss_in )
LVAL	203:3	203:3	7	ibuf
FIELD	203:3	203:3	8	ibuf
LEAF_NODE	203:3	203:3	9	ibuf
ASSIGN_OP	203:8	203:8	7	=
LEAF_NODE	203:8	203:8	8	=
RVAL	203:10	203:26	7	( unsigned char * ) _TIFFmalloc ( tss_in )
LEAF_NODE	203:10	203:10	8	(
TYPE_NAME	203:11	203:20	8	unsigned char
LEAF_NODE	203:11	203:11	9	unsigned
LEAF_NODE	203:20	203:20	9	char
LEAF_NODE	203:24	203:24	8	*
LEAF_NODE	203:25	203:25	8	)
FUNCTION_CALL	203:26	203:44	8	_TIFFmalloc ( tss_in )
CALLEE	203:26	203:26	9	_TIFFmalloc
LEAF_NODE	203:26	203:26	10	_TIFFmalloc
LEAF_NODE	203:37	203:37	9	(
ARGUMENT	203:38	203:38	9	tss_in
FIELD	203:38	203:38	10	tss_in
LEAF_NODE	203:38	203:38	11	tss_in
LEAF_NODE	203:44	203:44	9	)
LEAF_NODE	203:45	203:45	5	;
EXPR_STATEMENT	204:3	204:46	4	obuf = ( unsigned char * ) _TIFFmalloc ( tss_out ) ;
EXPR	204:3	204:3	5	obuf = ( unsigned char * ) _TIFFmalloc ( tss_out )
ASSIGN	204:3	204:10	6	obuf = ( unsigned char * ) _TIFFmalloc ( tss_out )
LVAL	204:3	204:3	7	obuf
FIELD	204:3	204:3	8	obuf
LEAF_NODE	204:3	204:3	9	obuf
ASSIGN_OP	204:8	204:8	7	=
LEAF_NODE	204:8	204:8	8	=
RVAL	204:10	204:26	7	( unsigned char * ) _TIFFmalloc ( tss_out )
LEAF_NODE	204:10	204:10	8	(
TYPE_NAME	204:11	204:20	8	unsigned char
LEAF_NODE	204:11	204:11	9	unsigned
LEAF_NODE	204:20	204:20	9	char
LEAF_NODE	204:24	204:24	8	*
LEAF_NODE	204:25	204:25	8	)
FUNCTION_CALL	204:26	204:45	8	_TIFFmalloc ( tss_out )
CALLEE	204:26	204:26	9	_TIFFmalloc
LEAF_NODE	204:26	204:26	10	_TIFFmalloc
LEAF_NODE	204:37	204:37	9	(
ARGUMENT	204:38	204:38	9	tss_out
FIELD	204:38	204:38	10	tss_out
LEAF_NODE	204:38	204:38	11	tss_out
LEAF_NODE	204:45	204:45	9	)
LEAF_NODE	204:46	204:46	5	;
SELECTION	205:3	205:19	4	
KEYWORD	205:3	205:3	5	switch
LEAF_NODE	205:3	205:3	6	switch
LEAF_NODE	205:10	205:10	5	(
CONDITION	205:11	205:11	5	config
EXPR	205:11	205:11	6	config
FIELD	205:11	205:11	7	config
LEAF_NODE	205:11	205:11	8	config
LEAF_NODE	205:17	205:17	5	)
STATEMENTS	205:19	238:3	5	
LEAF_NODE	205:19	205:19	6	{
STATEMENTS	206:3	237:2	6	
LABEL	206:3	206:27	7	case PLANARCONFIG_CONTIG :
LEAF_NODE	206:3	206:3	8	case
LEAF_NODE	206:8	206:8	8	PLANARCONFIG_CONTIG
LEAF_NODE	206:27	206:27	8	:
ITERATION	207:2	207:42	7	
KEYWORD	207:2	207:2	8	for
LEAF_NODE	207:2	207:2	9	for
LEAF_NODE	207:6	207:6	8	(
FOR_INIT	207:7	207:14	8	row = 0 ;
EXPR	207:7	207:7	9	row = 0
ASSIGN	207:7	207:13	10	row = 0
LVAL	207:7	207:7	11	row
FIELD	207:7	207:7	12	row
LEAF_NODE	207:7	207:7	13	row
ASSIGN_OP	207:11	207:11	11	=
LEAF_NODE	207:11	207:11	12	=
RVAL	207:13	207:13	11	0
FIELD	207:13	207:13	12	0
LEAF_NODE	207:13	207:13	13	0
LEAF_NODE	207:14	207:14	9	;
CONDITION	207:16	207:16	8	row < imagelength
EXPR	207:16	207:22	9	row < imagelength
FIELD	207:16	207:16	10	row
LEAF_NODE	207:16	207:16	11	row
REL_OPERATOR	207:20	207:20	10	<
LEAF_NODE	207:20	207:20	11	<
FIELD	207:22	207:22	10	imagelength
LEAF_NODE	207:22	207:22	11	imagelength
LEAF_NODE	207:33	207:33	8	;
FOR_EXPR	207:35	207:35	8	row ++
EXPR	207:35	207:35	9	row ++
FIELD	207:35	207:38	10	row ++
LEAF_NODE	207:35	207:35	11	row
LEAF_NODE	207:38	207:38	11	++
LEAF_NODE	207:40	207:40	8	)
STATEMENTS	207:42	218:2	8	
LEAF_NODE	207:42	207:42	9	{
STATEMENTS	208:3	216:3	9	
SELECTION	208:3	209:4	10	
KEYWORD	208:3	208:3	11	if
LEAF_NODE	208:3	208:3	12	if
LEAF_NODE	208:6	208:6	11	(
CONDITION	208:7	208:7	11	! TIFFReadScanline ( in , ibuf , row , 0 )
EXPR	208:7	208:7	12	! TIFFReadScanline ( in , ibuf , row , 0 )
UNARY_EXPR	208:7	208:8	13	! TIFFReadScanline ( in , ibuf , row , 0 )
UNARY_OPERATOR	208:7	208:7	14	!
LEAF_NODE	208:7	208:7	15	!
FUNCTION_CALL	208:8	208:41	14	TIFFReadScanline ( in , ibuf , row , 0 )
CALLEE	208:8	208:8	15	TIFFReadScanline
LEAF_NODE	208:8	208:8	16	TIFFReadScanline
LEAF_NODE	208:24	208:24	15	(
ARGUMENT	208:25	208:25	15	in
FIELD	208:25	208:25	16	in
LEAF_NODE	208:25	208:25	17	in
LEAF_NODE	208:27	208:27	15	,
ARGUMENT	208:29	208:29	15	ibuf
FIELD	208:29	208:29	16	ibuf
LEAF_NODE	208:29	208:29	17	ibuf
LEAF_NODE	208:33	208:33	15	,
ARGUMENT	208:35	208:35	15	row
FIELD	208:35	208:35	16	row
LEAF_NODE	208:35	208:35	17	row
LEAF_NODE	208:38	208:38	15	,
ARGUMENT	208:40	208:40	15	0
FIELD	208:40	208:40	16	0
LEAF_NODE	208:40	208:40	17	0
LEAF_NODE	208:41	208:41	15	)
LEAF_NODE	208:42	208:42	11	)
STATEMENTS	209:4	209:4	11	
JUMP_STATEMENT	209:4	209:13	12	goto done ;
KEYWORD	209:4	209:4	13	goto
LEAF_NODE	209:4	209:4	14	goto
DESTINATION	209:9	209:9	13	done
LEAF_NODE	209:9	209:9	14	done
LEAF_NODE	209:13	209:13	13	;
EXPR_STATEMENT	210:3	210:12	10	pp = obuf ;
EXPR	210:3	210:3	11	pp = obuf
ASSIGN	210:3	210:8	12	pp = obuf
LVAL	210:3	210:3	13	pp
FIELD	210:3	210:3	14	pp
LEAF_NODE	210:3	210:3	15	pp
ASSIGN_OP	210:6	210:6	13	=
LEAF_NODE	210:6	210:6	14	=
RVAL	210:8	210:8	13	obuf
FIELD	210:8	210:8	14	obuf
LEAF_NODE	210:8	210:8	15	obuf
LEAF_NODE	210:12	210:12	11	;
ITERATION	211:3	211:36	10	
KEYWORD	211:3	211:3	11	for
LEAF_NODE	211:3	211:3	12	for
LEAF_NODE	211:7	211:7	11	(
FOR_INIT	211:8	211:13	11	x = 0 ;
EXPR	211:8	211:8	12	x = 0
ASSIGN	211:8	211:12	13	x = 0
LVAL	211:8	211:8	14	x
FIELD	211:8	211:8	15	x
LEAF_NODE	211:8	211:8	16	x
ASSIGN_OP	211:10	211:10	14	=
LEAF_NODE	211:10	211:10	15	=
RVAL	211:12	211:12	14	0
FIELD	211:12	211:12	15	0
LEAF_NODE	211:12	211:12	16	0
LEAF_NODE	211:13	211:13	12	;
CONDITION	211:15	211:15	11	x < imagewidth
EXPR	211:15	211:19	12	x < imagewidth
FIELD	211:15	211:15	13	x
LEAF_NODE	211:15	211:15	14	x
REL_OPERATOR	211:17	211:17	13	<
LEAF_NODE	211:17	211:17	14	<
FIELD	211:19	211:19	13	imagewidth
LEAF_NODE	211:19	211:19	14	imagewidth
LEAF_NODE	211:29	211:29	11	;
FOR_EXPR	211:31	211:31	11	x ++
EXPR	211:31	211:31	12	x ++
FIELD	211:31	211:32	13	x ++
LEAF_NODE	211:31	211:31	14	x
LEAF_NODE	211:32	211:32	14	++
LEAF_NODE	211:34	211:34	11	)
STATEMENTS	211:36	215:3	11	
LEAF_NODE	211:36	211:36	12	{
STATEMENTS	212:4	214:4	12	
EXPR_STATEMENT	212:4	212:41	13	* pp ++ = ( unsigned char ) rmap [ ibuf [ x ] ] ;
EXPR	212:4	212:4	14	* pp ++ = ( unsigned char ) rmap [ ibuf [ x ] ]
ASSIGN	212:4	212:12	15	* pp ++ = ( unsigned char ) rmap [ ibuf [ x ] ]
LVAL	212:4	212:4	16	* pp ++
UNARY_EXPR	212:4	212:5	17	* pp ++
UNARY_OPERATOR	212:4	212:4	18	*
LEAF_NODE	212:4	212:4	19	*
FIELD	212:5	212:7	18	pp ++
LEAF_NODE	212:5	212:5	19	pp
LEAF_NODE	212:7	212:7	19	++
ASSIGN_OP	212:10	212:10	16	=
LEAF_NODE	212:10	212:10	17	=
RVAL	212:12	212:28	16	( unsigned char ) rmap [ ibuf [ x ] ]
LEAF_NODE	212:12	212:12	17	(
TYPE_NAME	212:13	212:22	17	unsigned char
LEAF_NODE	212:13	212:13	18	unsigned
LEAF_NODE	212:22	212:22	18	char
LEAF_NODE	212:26	212:26	17	)
FIELD	212:28	212:40	17	rmap [ ibuf [ x ] ]
LEAF_NODE	212:28	212:28	18	rmap
LEAF_NODE	212:32	212:32	18	[
EXPR	212:33	212:33	18	ibuf [ x ]
FIELD	212:33	212:39	19	ibuf [ x ]
LEAF_NODE	212:33	212:33	20	ibuf
LEAF_NODE	212:37	212:37	20	[
EXPR	212:38	212:38	20	x
FIELD	212:38	212:38	21	x
LEAF_NODE	212:38	212:38	22	x
LEAF_NODE	212:39	212:39	20	]
LEAF_NODE	212:40	212:40	18	]
LEAF_NODE	212:41	212:41	14	;
EXPR_STATEMENT	213:4	213:41	13	* pp ++ = ( unsigned char ) gmap [ ibuf [ x ] ] ;
EXPR	213:4	213:4	14	* pp ++ = ( unsigned char ) gmap [ ibuf [ x ] ]
ASSIGN	213:4	213:12	15	* pp ++ = ( unsigned char ) gmap [ ibuf [ x ] ]
LVAL	213:4	213:4	16	* pp ++
UNARY_EXPR	213:4	213:5	17	* pp ++
UNARY_OPERATOR	213:4	213:4	18	*
LEAF_NODE	213:4	213:4	19	*
FIELD	213:5	213:7	18	pp ++
LEAF_NODE	213:5	213:5	19	pp
LEAF_NODE	213:7	213:7	19	++
ASSIGN_OP	213:10	213:10	16	=
LEAF_NODE	213:10	213:10	17	=
RVAL	213:12	213:28	16	( unsigned char ) gmap [ ibuf [ x ] ]
LEAF_NODE	213:12	213:12	17	(
TYPE_NAME	213:13	213:22	17	unsigned char
LEAF_NODE	213:13	213:13	18	unsigned
LEAF_NODE	213:22	213:22	18	char
LEAF_NODE	213:26	213:26	17	)
FIELD	213:28	213:40	17	gmap [ ibuf [ x ] ]
LEAF_NODE	213:28	213:28	18	gmap
LEAF_NODE	213:32	213:32	18	[
EXPR	213:33	213:33	18	ibuf [ x ]
FIELD	213:33	213:39	19	ibuf [ x ]
LEAF_NODE	213:33	213:33	20	ibuf
LEAF_NODE	213:37	213:37	20	[
EXPR	213:38	213:38	20	x
FIELD	213:38	213:38	21	x
LEAF_NODE	213:38	213:38	22	x
LEAF_NODE	213:39	213:39	20	]
LEAF_NODE	213:40	213:40	18	]
LEAF_NODE	213:41	213:41	14	;
EXPR_STATEMENT	214:4	214:41	13	* pp ++ = ( unsigned char ) bmap [ ibuf [ x ] ] ;
EXPR	214:4	214:4	14	* pp ++ = ( unsigned char ) bmap [ ibuf [ x ] ]
ASSIGN	214:4	214:12	15	* pp ++ = ( unsigned char ) bmap [ ibuf [ x ] ]
LVAL	214:4	214:4	16	* pp ++
UNARY_EXPR	214:4	214:5	17	* pp ++
UNARY_OPERATOR	214:4	214:4	18	*
LEAF_NODE	214:4	214:4	19	*
FIELD	214:5	214:7	18	pp ++
LEAF_NODE	214:5	214:5	19	pp
LEAF_NODE	214:7	214:7	19	++
ASSIGN_OP	214:10	214:10	16	=
LEAF_NODE	214:10	214:10	17	=
RVAL	214:12	214:28	16	( unsigned char ) bmap [ ibuf [ x ] ]
LEAF_NODE	214:12	214:12	17	(
TYPE_NAME	214:13	214:22	17	unsigned char
LEAF_NODE	214:13	214:13	18	unsigned
LEAF_NODE	214:22	214:22	18	char
LEAF_NODE	214:26	214:26	17	)
FIELD	214:28	214:40	17	bmap [ ibuf [ x ] ]
LEAF_NODE	214:28	214:28	18	bmap
LEAF_NODE	214:32	214:32	18	[
EXPR	214:33	214:33	18	ibuf [ x ]
FIELD	214:33	214:39	19	ibuf [ x ]
LEAF_NODE	214:33	214:33	20	ibuf
LEAF_NODE	214:37	214:37	20	[
EXPR	214:38	214:38	20	x
FIELD	214:38	214:38	21	x
LEAF_NODE	214:38	214:38	22	x
LEAF_NODE	214:39	214:39	20	]
LEAF_NODE	214:40	214:40	18	]
LEAF_NODE	214:41	214:41	14	;
LEAF_NODE	215:3	215:3	12	}
SELECTION	216:3	217:4	10	
KEYWORD	216:3	216:3	11	if
LEAF_NODE	216:3	216:3	12	if
LEAF_NODE	216:6	216:6	11	(
CONDITION	216:7	216:7	11	! TIFFWriteScanline ( out , obuf , row , 0 )
EXPR	216:7	216:7	12	! TIFFWriteScanline ( out , obuf , row , 0 )
UNARY_EXPR	216:7	216:8	13	! TIFFWriteScanline ( out , obuf , row , 0 )
UNARY_OPERATOR	216:7	216:7	14	!
LEAF_NODE	216:7	216:7	15	!
FUNCTION_CALL	216:8	216:43	14	TIFFWriteScanline ( out , obuf , row , 0 )
CALLEE	216:8	216:8	15	TIFFWriteScanline
LEAF_NODE	216:8	216:8	16	TIFFWriteScanline
LEAF_NODE	216:25	216:25	15	(
ARGUMENT	216:26	216:26	15	out
FIELD	216:26	216:26	16	out
LEAF_NODE	216:26	216:26	17	out
LEAF_NODE	216:29	216:29	15	,
ARGUMENT	216:31	216:31	15	obuf
FIELD	216:31	216:31	16	obuf
LEAF_NODE	216:31	216:31	17	obuf
LEAF_NODE	216:35	216:35	15	,
ARGUMENT	216:37	216:37	15	row
FIELD	216:37	216:37	16	row
LEAF_NODE	216:37	216:37	17	row
LEAF_NODE	216:40	216:40	15	,
ARGUMENT	216:42	216:42	15	0
FIELD	216:42	216:42	16	0
LEAF_NODE	216:42	216:42	17	0
LEAF_NODE	216:43	216:43	15	)
LEAF_NODE	216:44	216:44	11	)
STATEMENTS	217:4	217:4	11	
JUMP_STATEMENT	217:4	217:13	12	goto done ;
KEYWORD	217:4	217:4	13	goto
LEAF_NODE	217:4	217:4	14	goto
DESTINATION	217:9	217:9	13	done
LEAF_NODE	217:9	217:9	14	done
LEAF_NODE	217:13	217:13	13	;
LEAF_NODE	218:2	218:2	9	}
JUMP_STATEMENT	219:2	219:7	7	break DESTINATION ;
KEYWORD	219:2	219:2	8	break
LEAF_NODE	219:2	219:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	219:7	219:7	8	;
LABEL	220:3	220:29	7	case PLANARCONFIG_SEPARATE :
LEAF_NODE	220:3	220:3	8	case
LEAF_NODE	220:8	220:8	8	PLANARCONFIG_SEPARATE
LEAF_NODE	220:29	220:29	8	:
ITERATION	221:2	221:42	7	
KEYWORD	221:2	221:2	8	for
LEAF_NODE	221:2	221:2	9	for
LEAF_NODE	221:6	221:6	8	(
FOR_INIT	221:7	221:14	8	row = 0 ;
EXPR	221:7	221:7	9	row = 0
ASSIGN	221:7	221:13	10	row = 0
LVAL	221:7	221:7	11	row
FIELD	221:7	221:7	12	row
LEAF_NODE	221:7	221:7	13	row
ASSIGN_OP	221:11	221:11	11	=
LEAF_NODE	221:11	221:11	12	=
RVAL	221:13	221:13	11	0
FIELD	221:13	221:13	12	0
LEAF_NODE	221:13	221:13	13	0
LEAF_NODE	221:14	221:14	9	;
CONDITION	221:16	221:16	8	row < imagelength
EXPR	221:16	221:22	9	row < imagelength
FIELD	221:16	221:16	10	row
LEAF_NODE	221:16	221:16	11	row
REL_OPERATOR	221:20	221:20	10	<
LEAF_NODE	221:20	221:20	11	<
FIELD	221:22	221:22	10	imagelength
LEAF_NODE	221:22	221:22	11	imagelength
LEAF_NODE	221:33	221:33	8	;
FOR_EXPR	221:35	221:35	8	row ++
EXPR	221:35	221:35	9	row ++
FIELD	221:35	221:38	10	row ++
LEAF_NODE	221:35	221:35	11	row
LEAF_NODE	221:38	221:38	11	++
LEAF_NODE	221:40	221:40	8	)
STATEMENTS	221:42	236:2	8	
LEAF_NODE	221:42	221:42	9	{
STATEMENTS	222:3	234:3	9	
SELECTION	222:3	223:4	10	
KEYWORD	222:3	222:3	11	if
LEAF_NODE	222:3	222:3	12	if
LEAF_NODE	222:6	222:6	11	(
CONDITION	222:7	222:7	11	! TIFFReadScanline ( in , ibuf , row , 0 )
EXPR	222:7	222:7	12	! TIFFReadScanline ( in , ibuf , row , 0 )
UNARY_EXPR	222:7	222:8	13	! TIFFReadScanline ( in , ibuf , row , 0 )
UNARY_OPERATOR	222:7	222:7	14	!
LEAF_NODE	222:7	222:7	15	!
FUNCTION_CALL	222:8	222:41	14	TIFFReadScanline ( in , ibuf , row , 0 )
CALLEE	222:8	222:8	15	TIFFReadScanline
LEAF_NODE	222:8	222:8	16	TIFFReadScanline
LEAF_NODE	222:24	222:24	15	(
ARGUMENT	222:25	222:25	15	in
FIELD	222:25	222:25	16	in
LEAF_NODE	222:25	222:25	17	in
LEAF_NODE	222:27	222:27	15	,
ARGUMENT	222:29	222:29	15	ibuf
FIELD	222:29	222:29	16	ibuf
LEAF_NODE	222:29	222:29	17	ibuf
LEAF_NODE	222:33	222:33	15	,
ARGUMENT	222:35	222:35	15	row
FIELD	222:35	222:35	16	row
LEAF_NODE	222:35	222:35	17	row
LEAF_NODE	222:38	222:38	15	,
ARGUMENT	222:40	222:40	15	0
FIELD	222:40	222:40	16	0
LEAF_NODE	222:40	222:40	17	0
LEAF_NODE	222:41	222:41	15	)
LEAF_NODE	222:42	222:42	11	)
STATEMENTS	223:4	223:4	11	
JUMP_STATEMENT	223:4	223:13	12	goto done ;
KEYWORD	223:4	223:4	13	goto
LEAF_NODE	223:4	223:4	14	goto
DESTINATION	223:9	223:9	13	done
LEAF_NODE	223:9	223:9	14	done
LEAF_NODE	223:13	223:13	13	;
ITERATION	224:3	225:4	10	
KEYWORD	224:3	224:3	11	for
LEAF_NODE	224:3	224:3	12	for
LEAF_NODE	224:7	224:7	11	(
FOR_INIT	224:8	224:24	11	pp = obuf , x = 0 ;
EXPR	224:8	224:19	12	pp = obuf , x = 0
ASSIGN	224:8	224:13	13	pp = obuf
LVAL	224:8	224:8	14	pp
FIELD	224:8	224:8	15	pp
LEAF_NODE	224:8	224:8	16	pp
ASSIGN_OP	224:11	224:11	14	=
LEAF_NODE	224:11	224:11	15	=
RVAL	224:13	224:13	14	obuf
FIELD	224:13	224:13	15	obuf
LEAF_NODE	224:13	224:13	16	obuf
LEAF_NODE	224:17	224:17	13	,
ASSIGN	224:19	224:23	13	x = 0
LVAL	224:19	224:19	14	x
FIELD	224:19	224:19	15	x
LEAF_NODE	224:19	224:19	16	x
ASSIGN_OP	224:21	224:21	14	=
LEAF_NODE	224:21	224:21	15	=
RVAL	224:23	224:23	14	0
FIELD	224:23	224:23	15	0
LEAF_NODE	224:23	224:23	16	0
LEAF_NODE	224:24	224:24	12	;
CONDITION	224:26	224:26	11	x < imagewidth
EXPR	224:26	224:30	12	x < imagewidth
FIELD	224:26	224:26	13	x
LEAF_NODE	224:26	224:26	14	x
REL_OPERATOR	224:28	224:28	13	<
LEAF_NODE	224:28	224:28	14	<
FIELD	224:30	224:30	13	imagewidth
LEAF_NODE	224:30	224:30	14	imagewidth
LEAF_NODE	224:40	224:40	11	;
FOR_EXPR	224:42	224:42	11	x ++
EXPR	224:42	224:42	12	x ++
FIELD	224:42	224:43	13	x ++
LEAF_NODE	224:42	224:42	14	x
LEAF_NODE	224:43	224:43	14	++
LEAF_NODE	224:45	224:45	11	)
STATEMENTS	225:4	225:4	11	
EXPR_STATEMENT	225:4	225:41	12	* pp ++ = ( unsigned char ) rmap [ ibuf [ x ] ] ;
EXPR	225:4	225:4	13	* pp ++ = ( unsigned char ) rmap [ ibuf [ x ] ]
ASSIGN	225:4	225:12	14	* pp ++ = ( unsigned char ) rmap [ ibuf [ x ] ]
LVAL	225:4	225:4	15	* pp ++
UNARY_EXPR	225:4	225:5	16	* pp ++
UNARY_OPERATOR	225:4	225:4	17	*
LEAF_NODE	225:4	225:4	18	*
FIELD	225:5	225:7	17	pp ++
LEAF_NODE	225:5	225:5	18	pp
LEAF_NODE	225:7	225:7	18	++
ASSIGN_OP	225:10	225:10	15	=
LEAF_NODE	225:10	225:10	16	=
RVAL	225:12	225:28	15	( unsigned char ) rmap [ ibuf [ x ] ]
LEAF_NODE	225:12	225:12	16	(
TYPE_NAME	225:13	225:22	16	unsigned char
LEAF_NODE	225:13	225:13	17	unsigned
LEAF_NODE	225:22	225:22	17	char
LEAF_NODE	225:26	225:26	16	)
FIELD	225:28	225:40	16	rmap [ ibuf [ x ] ]
LEAF_NODE	225:28	225:28	17	rmap
LEAF_NODE	225:32	225:32	17	[
EXPR	225:33	225:33	17	ibuf [ x ]
FIELD	225:33	225:39	18	ibuf [ x ]
LEAF_NODE	225:33	225:33	19	ibuf
LEAF_NODE	225:37	225:37	19	[
EXPR	225:38	225:38	19	x
FIELD	225:38	225:38	20	x
LEAF_NODE	225:38	225:38	21	x
LEAF_NODE	225:39	225:39	19	]
LEAF_NODE	225:40	225:40	17	]
LEAF_NODE	225:41	225:41	13	;
SELECTION	226:3	227:4	10	
KEYWORD	226:3	226:3	11	if
LEAF_NODE	226:3	226:3	12	if
LEAF_NODE	226:6	226:6	11	(
CONDITION	226:7	226:7	11	! TIFFWriteScanline ( out , obuf , row , 0 )
EXPR	226:7	226:7	12	! TIFFWriteScanline ( out , obuf , row , 0 )
UNARY_EXPR	226:7	226:8	13	! TIFFWriteScanline ( out , obuf , row , 0 )
UNARY_OPERATOR	226:7	226:7	14	!
LEAF_NODE	226:7	226:7	15	!
FUNCTION_CALL	226:8	226:43	14	TIFFWriteScanline ( out , obuf , row , 0 )
CALLEE	226:8	226:8	15	TIFFWriteScanline
LEAF_NODE	226:8	226:8	16	TIFFWriteScanline
LEAF_NODE	226:25	226:25	15	(
ARGUMENT	226:26	226:26	15	out
FIELD	226:26	226:26	16	out
LEAF_NODE	226:26	226:26	17	out
LEAF_NODE	226:29	226:29	15	,
ARGUMENT	226:31	226:31	15	obuf
FIELD	226:31	226:31	16	obuf
LEAF_NODE	226:31	226:31	17	obuf
LEAF_NODE	226:35	226:35	15	,
ARGUMENT	226:37	226:37	15	row
FIELD	226:37	226:37	16	row
LEAF_NODE	226:37	226:37	17	row
LEAF_NODE	226:40	226:40	15	,
ARGUMENT	226:42	226:42	15	0
FIELD	226:42	226:42	16	0
LEAF_NODE	226:42	226:42	17	0
LEAF_NODE	226:43	226:43	15	)
LEAF_NODE	226:44	226:44	11	)
STATEMENTS	227:4	227:4	11	
JUMP_STATEMENT	227:4	227:13	12	goto done ;
KEYWORD	227:4	227:4	13	goto
LEAF_NODE	227:4	227:4	14	goto
DESTINATION	227:9	227:9	13	done
LEAF_NODE	227:9	227:9	14	done
LEAF_NODE	227:13	227:13	13	;
ITERATION	228:3	229:4	10	
KEYWORD	228:3	228:3	11	for
LEAF_NODE	228:3	228:3	12	for
LEAF_NODE	228:7	228:7	11	(
FOR_INIT	228:8	228:24	11	pp = obuf , x = 0 ;
EXPR	228:8	228:19	12	pp = obuf , x = 0
ASSIGN	228:8	228:13	13	pp = obuf
LVAL	228:8	228:8	14	pp
FIELD	228:8	228:8	15	pp
LEAF_NODE	228:8	228:8	16	pp
ASSIGN_OP	228:11	228:11	14	=
LEAF_NODE	228:11	228:11	15	=
RVAL	228:13	228:13	14	obuf
FIELD	228:13	228:13	15	obuf
LEAF_NODE	228:13	228:13	16	obuf
LEAF_NODE	228:17	228:17	13	,
ASSIGN	228:19	228:23	13	x = 0
LVAL	228:19	228:19	14	x
FIELD	228:19	228:19	15	x
LEAF_NODE	228:19	228:19	16	x
ASSIGN_OP	228:21	228:21	14	=
LEAF_NODE	228:21	228:21	15	=
RVAL	228:23	228:23	14	0
FIELD	228:23	228:23	15	0
LEAF_NODE	228:23	228:23	16	0
LEAF_NODE	228:24	228:24	12	;
CONDITION	228:26	228:26	11	x < imagewidth
EXPR	228:26	228:30	12	x < imagewidth
FIELD	228:26	228:26	13	x
LEAF_NODE	228:26	228:26	14	x
REL_OPERATOR	228:28	228:28	13	<
LEAF_NODE	228:28	228:28	14	<
FIELD	228:30	228:30	13	imagewidth
LEAF_NODE	228:30	228:30	14	imagewidth
LEAF_NODE	228:40	228:40	11	;
FOR_EXPR	228:42	228:42	11	x ++
EXPR	228:42	228:42	12	x ++
FIELD	228:42	228:43	13	x ++
LEAF_NODE	228:42	228:42	14	x
LEAF_NODE	228:43	228:43	14	++
LEAF_NODE	228:45	228:45	11	)
STATEMENTS	229:4	229:4	11	
EXPR_STATEMENT	229:4	229:41	12	* pp ++ = ( unsigned char ) gmap [ ibuf [ x ] ] ;
EXPR	229:4	229:4	13	* pp ++ = ( unsigned char ) gmap [ ibuf [ x ] ]
ASSIGN	229:4	229:12	14	* pp ++ = ( unsigned char ) gmap [ ibuf [ x ] ]
LVAL	229:4	229:4	15	* pp ++
UNARY_EXPR	229:4	229:5	16	* pp ++
UNARY_OPERATOR	229:4	229:4	17	*
LEAF_NODE	229:4	229:4	18	*
FIELD	229:5	229:7	17	pp ++
LEAF_NODE	229:5	229:5	18	pp
LEAF_NODE	229:7	229:7	18	++
ASSIGN_OP	229:10	229:10	15	=
LEAF_NODE	229:10	229:10	16	=
RVAL	229:12	229:28	15	( unsigned char ) gmap [ ibuf [ x ] ]
LEAF_NODE	229:12	229:12	16	(
TYPE_NAME	229:13	229:22	16	unsigned char
LEAF_NODE	229:13	229:13	17	unsigned
LEAF_NODE	229:22	229:22	17	char
LEAF_NODE	229:26	229:26	16	)
FIELD	229:28	229:40	16	gmap [ ibuf [ x ] ]
LEAF_NODE	229:28	229:28	17	gmap
LEAF_NODE	229:32	229:32	17	[
EXPR	229:33	229:33	17	ibuf [ x ]
FIELD	229:33	229:39	18	ibuf [ x ]
LEAF_NODE	229:33	229:33	19	ibuf
LEAF_NODE	229:37	229:37	19	[
EXPR	229:38	229:38	19	x
FIELD	229:38	229:38	20	x
LEAF_NODE	229:38	229:38	21	x
LEAF_NODE	229:39	229:39	19	]
LEAF_NODE	229:40	229:40	17	]
LEAF_NODE	229:41	229:41	13	;
SELECTION	230:3	231:4	10	
KEYWORD	230:3	230:3	11	if
LEAF_NODE	230:3	230:3	12	if
LEAF_NODE	230:6	230:6	11	(
CONDITION	230:7	230:7	11	! TIFFWriteScanline ( out , obuf , row , 0 )
EXPR	230:7	230:7	12	! TIFFWriteScanline ( out , obuf , row , 0 )
UNARY_EXPR	230:7	230:8	13	! TIFFWriteScanline ( out , obuf , row , 0 )
UNARY_OPERATOR	230:7	230:7	14	!
LEAF_NODE	230:7	230:7	15	!
FUNCTION_CALL	230:8	230:43	14	TIFFWriteScanline ( out , obuf , row , 0 )
CALLEE	230:8	230:8	15	TIFFWriteScanline
LEAF_NODE	230:8	230:8	16	TIFFWriteScanline
LEAF_NODE	230:25	230:25	15	(
ARGUMENT	230:26	230:26	15	out
FIELD	230:26	230:26	16	out
LEAF_NODE	230:26	230:26	17	out
LEAF_NODE	230:29	230:29	15	,
ARGUMENT	230:31	230:31	15	obuf
FIELD	230:31	230:31	16	obuf
LEAF_NODE	230:31	230:31	17	obuf
LEAF_NODE	230:35	230:35	15	,
ARGUMENT	230:37	230:37	15	row
FIELD	230:37	230:37	16	row
LEAF_NODE	230:37	230:37	17	row
LEAF_NODE	230:40	230:40	15	,
ARGUMENT	230:42	230:42	15	0
FIELD	230:42	230:42	16	0
LEAF_NODE	230:42	230:42	17	0
LEAF_NODE	230:43	230:43	15	)
LEAF_NODE	230:44	230:44	11	)
STATEMENTS	231:4	231:4	11	
JUMP_STATEMENT	231:4	231:13	12	goto done ;
KEYWORD	231:4	231:4	13	goto
LEAF_NODE	231:4	231:4	14	goto
DESTINATION	231:9	231:9	13	done
LEAF_NODE	231:9	231:9	14	done
LEAF_NODE	231:13	231:13	13	;
ITERATION	232:3	233:4	10	
KEYWORD	232:3	232:3	11	for
LEAF_NODE	232:3	232:3	12	for
LEAF_NODE	232:7	232:7	11	(
FOR_INIT	232:8	232:24	11	pp = obuf , x = 0 ;
EXPR	232:8	232:19	12	pp = obuf , x = 0
ASSIGN	232:8	232:13	13	pp = obuf
LVAL	232:8	232:8	14	pp
FIELD	232:8	232:8	15	pp
LEAF_NODE	232:8	232:8	16	pp
ASSIGN_OP	232:11	232:11	14	=
LEAF_NODE	232:11	232:11	15	=
RVAL	232:13	232:13	14	obuf
FIELD	232:13	232:13	15	obuf
LEAF_NODE	232:13	232:13	16	obuf
LEAF_NODE	232:17	232:17	13	,
ASSIGN	232:19	232:23	13	x = 0
LVAL	232:19	232:19	14	x
FIELD	232:19	232:19	15	x
LEAF_NODE	232:19	232:19	16	x
ASSIGN_OP	232:21	232:21	14	=
LEAF_NODE	232:21	232:21	15	=
RVAL	232:23	232:23	14	0
FIELD	232:23	232:23	15	0
LEAF_NODE	232:23	232:23	16	0
LEAF_NODE	232:24	232:24	12	;
CONDITION	232:26	232:26	11	x < imagewidth
EXPR	232:26	232:30	12	x < imagewidth
FIELD	232:26	232:26	13	x
LEAF_NODE	232:26	232:26	14	x
REL_OPERATOR	232:28	232:28	13	<
LEAF_NODE	232:28	232:28	14	<
FIELD	232:30	232:30	13	imagewidth
LEAF_NODE	232:30	232:30	14	imagewidth
LEAF_NODE	232:40	232:40	11	;
FOR_EXPR	232:42	232:42	11	x ++
EXPR	232:42	232:42	12	x ++
FIELD	232:42	232:43	13	x ++
LEAF_NODE	232:42	232:42	14	x
LEAF_NODE	232:43	232:43	14	++
LEAF_NODE	232:45	232:45	11	)
STATEMENTS	233:4	233:4	11	
EXPR_STATEMENT	233:4	233:41	12	* pp ++ = ( unsigned char ) bmap [ ibuf [ x ] ] ;
EXPR	233:4	233:4	13	* pp ++ = ( unsigned char ) bmap [ ibuf [ x ] ]
ASSIGN	233:4	233:12	14	* pp ++ = ( unsigned char ) bmap [ ibuf [ x ] ]
LVAL	233:4	233:4	15	* pp ++
UNARY_EXPR	233:4	233:5	16	* pp ++
UNARY_OPERATOR	233:4	233:4	17	*
LEAF_NODE	233:4	233:4	18	*
FIELD	233:5	233:7	17	pp ++
LEAF_NODE	233:5	233:5	18	pp
LEAF_NODE	233:7	233:7	18	++
ASSIGN_OP	233:10	233:10	15	=
LEAF_NODE	233:10	233:10	16	=
RVAL	233:12	233:28	15	( unsigned char ) bmap [ ibuf [ x ] ]
LEAF_NODE	233:12	233:12	16	(
TYPE_NAME	233:13	233:22	16	unsigned char
LEAF_NODE	233:13	233:13	17	unsigned
LEAF_NODE	233:22	233:22	17	char
LEAF_NODE	233:26	233:26	16	)
FIELD	233:28	233:40	16	bmap [ ibuf [ x ] ]
LEAF_NODE	233:28	233:28	17	bmap
LEAF_NODE	233:32	233:32	17	[
EXPR	233:33	233:33	17	ibuf [ x ]
FIELD	233:33	233:39	18	ibuf [ x ]
LEAF_NODE	233:33	233:33	19	ibuf
LEAF_NODE	233:37	233:37	19	[
EXPR	233:38	233:38	19	x
FIELD	233:38	233:38	20	x
LEAF_NODE	233:38	233:38	21	x
LEAF_NODE	233:39	233:39	19	]
LEAF_NODE	233:40	233:40	17	]
LEAF_NODE	233:41	233:41	13	;
SELECTION	234:3	235:4	10	
KEYWORD	234:3	234:3	11	if
LEAF_NODE	234:3	234:3	12	if
LEAF_NODE	234:6	234:6	11	(
CONDITION	234:7	234:7	11	! TIFFWriteScanline ( out , obuf , row , 0 )
EXPR	234:7	234:7	12	! TIFFWriteScanline ( out , obuf , row , 0 )
UNARY_EXPR	234:7	234:8	13	! TIFFWriteScanline ( out , obuf , row , 0 )
UNARY_OPERATOR	234:7	234:7	14	!
LEAF_NODE	234:7	234:7	15	!
FUNCTION_CALL	234:8	234:43	14	TIFFWriteScanline ( out , obuf , row , 0 )
CALLEE	234:8	234:8	15	TIFFWriteScanline
LEAF_NODE	234:8	234:8	16	TIFFWriteScanline
LEAF_NODE	234:25	234:25	15	(
ARGUMENT	234:26	234:26	15	out
FIELD	234:26	234:26	16	out
LEAF_NODE	234:26	234:26	17	out
LEAF_NODE	234:29	234:29	15	,
ARGUMENT	234:31	234:31	15	obuf
FIELD	234:31	234:31	16	obuf
LEAF_NODE	234:31	234:31	17	obuf
LEAF_NODE	234:35	234:35	15	,
ARGUMENT	234:37	234:37	15	row
FIELD	234:37	234:37	16	row
LEAF_NODE	234:37	234:37	17	row
LEAF_NODE	234:40	234:40	15	,
ARGUMENT	234:42	234:42	15	0
FIELD	234:42	234:42	16	0
LEAF_NODE	234:42	234:42	17	0
LEAF_NODE	234:43	234:43	15	)
LEAF_NODE	234:44	234:44	11	)
STATEMENTS	235:4	235:4	11	
JUMP_STATEMENT	235:4	235:13	12	goto done ;
KEYWORD	235:4	235:4	13	goto
LEAF_NODE	235:4	235:4	14	goto
DESTINATION	235:9	235:9	13	done
LEAF_NODE	235:9	235:9	14	done
LEAF_NODE	235:13	235:13	13	;
LEAF_NODE	236:2	236:2	9	}
JUMP_STATEMENT	237:2	237:7	7	break DESTINATION ;
KEYWORD	237:2	237:2	8	break
LEAF_NODE	237:2	237:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	237:7	237:7	8	;
LEAF_NODE	238:3	238:3	6	}
EXPR_STATEMENT	239:3	239:18	4	_TIFFfree ( ibuf ) ;
EXPR	239:3	239:3	5	_TIFFfree ( ibuf )
FUNCTION_CALL	239:3	239:17	6	_TIFFfree ( ibuf )
CALLEE	239:3	239:3	7	_TIFFfree
LEAF_NODE	239:3	239:3	8	_TIFFfree
LEAF_NODE	239:12	239:12	7	(
ARGUMENT	239:13	239:13	7	ibuf
FIELD	239:13	239:13	8	ibuf
LEAF_NODE	239:13	239:13	9	ibuf
LEAF_NODE	239:17	239:17	7	)
LEAF_NODE	239:18	239:18	5	;
EXPR_STATEMENT	240:3	240:18	4	_TIFFfree ( obuf ) ;
EXPR	240:3	240:3	5	_TIFFfree ( obuf )
FUNCTION_CALL	240:3	240:17	6	_TIFFfree ( obuf )
CALLEE	240:3	240:3	7	_TIFFfree
LEAF_NODE	240:3	240:3	8	_TIFFfree
LEAF_NODE	240:12	240:12	7	(
ARGUMENT	240:13	240:13	7	obuf
FIELD	240:13	240:13	8	obuf
LEAF_NODE	240:13	240:13	9	obuf
LEAF_NODE	240:17	240:17	7	)
LEAF_NODE	240:18	240:18	5	;
LEAF_NODE	241:1	241:1	3	}
LABEL	242:0	242:4	3	done :
LEAF_NODE	242:0	242:0	4	done
LEAF_NODE	242:4	242:4	4	:
EXPR_STATEMENT	243:1	243:21	3	( void ) TIFFClose ( in ) ;
EXPR	243:1	243:8	4	( void ) TIFFClose ( in )
LEAF_NODE	243:1	243:1	5	(
TYPE_NAME	243:2	243:2	5	void
LEAF_NODE	243:2	243:2	6	void
LEAF_NODE	243:6	243:6	5	)
FUNCTION_CALL	243:8	243:20	5	TIFFClose ( in )
CALLEE	243:8	243:8	6	TIFFClose
LEAF_NODE	243:8	243:8	7	TIFFClose
LEAF_NODE	243:17	243:17	6	(
ARGUMENT	243:18	243:18	6	in
FIELD	243:18	243:18	7	in
LEAF_NODE	243:18	243:18	8	in
LEAF_NODE	243:20	243:20	6	)
LEAF_NODE	243:21	243:21	4	;
EXPR_STATEMENT	244:1	244:22	3	( void ) TIFFClose ( out ) ;
EXPR	244:1	244:8	4	( void ) TIFFClose ( out )
LEAF_NODE	244:1	244:1	5	(
TYPE_NAME	244:2	244:2	5	void
LEAF_NODE	244:2	244:2	6	void
LEAF_NODE	244:6	244:6	5	)
FUNCTION_CALL	244:8	244:21	5	TIFFClose ( out )
CALLEE	244:8	244:8	6	TIFFClose
LEAF_NODE	244:8	244:8	7	TIFFClose
LEAF_NODE	244:17	244:17	6	(
ARGUMENT	244:18	244:18	6	out
FIELD	244:18	244:18	7	out
LEAF_NODE	244:18	244:18	8	out
LEAF_NODE	244:21	244:21	6	)
LEAF_NODE	244:22	244:22	4	;
JUMP_STATEMENT	245:1	245:11	3	return ( 0 ) ;
KEYWORD	245:1	245:1	4	return
LEAF_NODE	245:1	245:1	5	return
DESTINATION	245:8	245:8	4	( 0 )
EXPR	245:8	245:10	5	( 0 )
LEAF_NODE	245:8	245:8	6	(
FIELD	245:9	245:9	6	0
LEAF_NODE	245:9	245:9	7	0
LEAF_NODE	245:10	245:10	6	)
LEAF_NODE	245:11	245:11	4	;
LEAF_NODE	246:0	246:0	2	}
FUNCTION_DEF	248:0	283:0	1	
RETURN_TYPE	248:0	248:7	2	static int
LEAF_NODE	248:0	248:0	3	static
TYPE_NAME	248:7	248:7	3	int
LEAF_NODE	248:7	248:7	4	int
FUNCTION_NAME	249:0	249:0	2	processCompressOptions
LEAF_NODE	249:0	249:0	3	processCompressOptions
PARAMETER_LIST	249:22	249:32	2	( char * opt )
LEAF_NODE	249:22	249:22	3	(
PARAMETER_DECL	249:23	249:29	3	char * opt
TYPE	249:23	249:27	4	char *
TYPE_NAME	249:23	249:23	5	char
LEAF_NODE	249:23	249:23	6	char
POINTER	249:27	249:27	5	*
LEAF_NODE	249:27	249:27	6	*
NAME	249:29	249:29	4	opt
LEAF_NODE	249:29	249:29	5	opt
LEAF_NODE	249:32	249:32	3	)
LEAF_NODE	250:0	250:0	2	{
STATEMENTS	251:1	282:1	2	
SELECTION	251:1	252:2	3	
KEYWORD	251:1	251:1	4	if
LEAF_NODE	251:1	251:1	5	if
LEAF_NODE	251:4	251:4	4	(
CONDITION	251:5	251:5	4	streq ( opt , "none" )
EXPR	251:5	251:5	5	streq ( opt , "none" )
FUNCTION_CALL	251:5	251:22	6	streq ( opt , "none" )
CALLEE	251:5	251:5	7	streq
LEAF_NODE	251:5	251:5	8	streq
LEAF_NODE	251:10	251:10	7	(
ARGUMENT	251:11	251:11	7	opt
FIELD	251:11	251:11	8	opt
LEAF_NODE	251:11	251:11	9	opt
LEAF_NODE	251:14	251:14	7	,
ARGUMENT	251:16	251:16	7	"none"
FIELD	251:16	251:16	8	"none"
LEAF_NODE	251:16	251:16	9	"none"
LEAF_NODE	251:22	251:22	7	)
LEAF_NODE	251:23	251:23	4	)
STATEMENTS	252:2	252:2	4	
EXPR_STATEMENT	252:2	252:32	5	compression = COMPRESSION_NONE ;
EXPR	252:2	252:2	6	compression = COMPRESSION_NONE
ASSIGN	252:2	252:16	7	compression = COMPRESSION_NONE
LVAL	252:2	252:2	8	compression
FIELD	252:2	252:2	9	compression
LEAF_NODE	252:2	252:2	10	compression
ASSIGN_OP	252:14	252:14	8	=
LEAF_NODE	252:14	252:14	9	=
RVAL	252:16	252:16	8	COMPRESSION_NONE
FIELD	252:16	252:16	9	COMPRESSION_NONE
LEAF_NODE	252:16	252:16	10	COMPRESSION_NONE
LEAF_NODE	252:32	252:32	6	;
SELECTION	253:1	253:6	3	
KEYWORD	253:1	253:1	4	else
LEAF_NODE	253:1	253:1	5	else
STATEMENTS	253:6	253:6	4	
SELECTION	253:6	254:2	5	
KEYWORD	253:6	253:6	6	if
LEAF_NODE	253:6	253:6	7	if
LEAF_NODE	253:9	253:9	6	(
CONDITION	253:10	253:10	6	streq ( opt , "packbits" )
EXPR	253:10	253:10	7	streq ( opt , "packbits" )
FUNCTION_CALL	253:10	253:31	8	streq ( opt , "packbits" )
CALLEE	253:10	253:10	9	streq
LEAF_NODE	253:10	253:10	10	streq
LEAF_NODE	253:15	253:15	9	(
ARGUMENT	253:16	253:16	9	opt
FIELD	253:16	253:16	10	opt
LEAF_NODE	253:16	253:16	11	opt
LEAF_NODE	253:19	253:19	9	,
ARGUMENT	253:21	253:21	9	"packbits"
FIELD	253:21	253:21	10	"packbits"
LEAF_NODE	253:21	253:21	11	"packbits"
LEAF_NODE	253:31	253:31	9	)
LEAF_NODE	253:32	253:32	6	)
STATEMENTS	254:2	254:2	6	
EXPR_STATEMENT	254:2	254:36	7	compression = COMPRESSION_PACKBITS ;
EXPR	254:2	254:2	8	compression = COMPRESSION_PACKBITS
ASSIGN	254:2	254:16	9	compression = COMPRESSION_PACKBITS
LVAL	254:2	254:2	10	compression
FIELD	254:2	254:2	11	compression
LEAF_NODE	254:2	254:2	12	compression
ASSIGN_OP	254:14	254:14	10	=
LEAF_NODE	254:14	254:14	11	=
RVAL	254:16	254:16	10	COMPRESSION_PACKBITS
FIELD	254:16	254:16	11	COMPRESSION_PACKBITS
LEAF_NODE	254:16	254:16	12	COMPRESSION_PACKBITS
LEAF_NODE	254:36	254:36	8	;
SELECTION	255:1	255:6	3	
KEYWORD	255:1	255:1	4	else
LEAF_NODE	255:1	255:1	5	else
STATEMENTS	255:6	255:6	4	
SELECTION	255:6	255:34	5	
KEYWORD	255:6	255:6	6	if
LEAF_NODE	255:6	255:6	7	if
LEAF_NODE	255:9	255:9	6	(
CONDITION	255:10	255:10	6	strneq ( opt , "jpeg" , 4 )
EXPR	255:10	255:10	7	strneq ( opt , "jpeg" , 4 )
FUNCTION_CALL	255:10	255:31	8	strneq ( opt , "jpeg" , 4 )
CALLEE	255:10	255:10	9	strneq
LEAF_NODE	255:10	255:10	10	strneq
LEAF_NODE	255:16	255:16	9	(
ARGUMENT	255:17	255:17	9	opt
FIELD	255:17	255:17	10	opt
LEAF_NODE	255:17	255:17	11	opt
LEAF_NODE	255:20	255:20	9	,
ARGUMENT	255:22	255:22	9	"jpeg"
FIELD	255:22	255:22	10	"jpeg"
LEAF_NODE	255:22	255:22	11	"jpeg"
LEAF_NODE	255:28	255:28	9	,
ARGUMENT	255:30	255:30	9	4
FIELD	255:30	255:30	10	4
LEAF_NODE	255:30	255:30	11	4
LEAF_NODE	255:31	255:31	9	)
LEAF_NODE	255:32	255:32	6	)
STATEMENTS	255:34	270:1	6	
LEAF_NODE	255:34	255:34	7	{
STATEMENTS	256:2	259:16	7	
SIMPLE_DECL	256:2	256:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	256:2	256:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	256:2	256:6	10	char *
TYPE_NAME	256:2	256:2	11	char
LEAF_NODE	256:2	256:2	12	char
POINTER	256:6	256:6	11	*
LEAF_NODE	256:6	256:6	12	*
NAME	256:8	256:8	10	cp
LEAF_NODE	256:8	256:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	256:8	256:8	10	cp = strchr ( opt , ':' )
ASSIGN	256:8	256:13	11	cp = strchr ( opt , ':' )
LVAL	256:8	256:8	12	cp
NAME	256:8	256:8	13	cp
LEAF_NODE	256:8	256:8	14	cp
ASSIGN_OP	256:11	256:11	12	=
LEAF_NODE	256:11	256:11	13	=
RVAL	256:13	256:13	12	strchr ( opt , ':' )
FUNCTION_CALL	256:13	256:28	13	strchr ( opt , ':' )
CALLEE	256:13	256:13	14	strchr
LEAF_NODE	256:13	256:13	15	strchr
LEAF_NODE	256:19	256:19	14	(
ARGUMENT	256:20	256:20	14	opt
FIELD	256:20	256:20	15	opt
LEAF_NODE	256:20	256:20	16	opt
LEAF_NODE	256:23	256:23	14	,
ARGUMENT	256:25	256:25	14	':'
FIELD	256:25	256:25	15	':'
LEAF_NODE	256:25	256:25	16	':'
LEAF_NODE	256:28	256:28	14	)
LEAF_NODE	256:29	256:29	9	;
EXPR_STATEMENT	258:16	258:46	8	compression = COMPRESSION_JPEG ;
EXPR	258:16	258:16	9	compression = COMPRESSION_JPEG
ASSIGN	258:16	258:30	10	compression = COMPRESSION_JPEG
LVAL	258:16	258:16	11	compression
FIELD	258:16	258:16	12	compression
LEAF_NODE	258:16	258:16	13	compression
ASSIGN_OP	258:28	258:28	11	=
LEAF_NODE	258:28	258:28	12	=
RVAL	258:30	258:30	11	COMPRESSION_JPEG
FIELD	258:30	258:30	12	COMPRESSION_JPEG
LEAF_NODE	258:30	258:30	13	COMPRESSION_JPEG
LEAF_NODE	258:46	258:46	9	;
ITERATION	259:16	260:16	8	
KEYWORD	259:16	259:16	9	while
LEAF_NODE	259:16	259:16	10	while
LEAF_NODE	259:21	259:21	9	(
CONDITION	259:23	259:23	9	cp
EXPR	259:23	259:23	10	cp
FIELD	259:23	259:23	11	cp
LEAF_NODE	259:23	259:23	12	cp
LEAF_NODE	259:26	259:26	9	)
STATEMENTS	260:16	269:16	9	
LEAF_NODE	260:16	260:16	10	{
STATEMENTS	261:20	268:20	10	
SELECTION	261:20	262:3	11	
KEYWORD	261:20	261:20	12	if
LEAF_NODE	261:20	261:20	13	if
LEAF_NODE	261:23	261:23	12	(
CONDITION	261:24	261:24	12	isdigit ( ( int ) cp [ 1 ] )
EXPR	261:24	261:24	13	isdigit ( ( int ) cp [ 1 ] )
FUNCTION_CALL	261:24	261:42	14	isdigit ( ( int ) cp [ 1 ] )
CALLEE	261:24	261:24	15	isdigit
LEAF_NODE	261:24	261:24	16	isdigit
LEAF_NODE	261:31	261:31	15	(
ARGUMENT	261:32	261:37	15	( int ) cp [ 1 ]
LEAF_NODE	261:32	261:32	16	(
TYPE_NAME	261:33	261:33	16	int
LEAF_NODE	261:33	261:33	17	int
LEAF_NODE	261:36	261:36	16	)
FIELD	261:37	261:41	16	cp [ 1 ]
LEAF_NODE	261:37	261:37	17	cp
LEAF_NODE	261:39	261:39	17	[
EXPR	261:40	261:40	17	1
FIELD	261:40	261:40	18	1
LEAF_NODE	261:40	261:40	19	1
LEAF_NODE	261:41	261:41	17	]
LEAF_NODE	261:42	261:42	15	)
LEAF_NODE	261:43	261:43	12	)
STATEMENTS	262:3	262:3	12	
EXPR_STATEMENT	262:3	262:23	13	quality = atoi ( cp + 1 ) ;
EXPR	262:3	262:3	14	quality = atoi ( cp + 1 )
ASSIGN	262:3	262:13	15	quality = atoi ( cp + 1 )
LVAL	262:3	262:3	16	quality
FIELD	262:3	262:3	17	quality
LEAF_NODE	262:3	262:3	18	quality
ASSIGN_OP	262:11	262:11	16	=
LEAF_NODE	262:11	262:11	17	=
RVAL	262:13	262:13	16	atoi ( cp + 1 )
FUNCTION_CALL	262:13	262:22	17	atoi ( cp + 1 )
CALLEE	262:13	262:13	18	atoi
LEAF_NODE	262:13	262:13	19	atoi
LEAF_NODE	262:17	262:17	18	(
ARGUMENT	262:18	262:21	18	cp + 1
FIELD	262:18	262:18	19	cp
LEAF_NODE	262:18	262:18	20	cp
LEAF_NODE	262:20	262:20	19	+
FIELD	262:21	262:21	19	1
LEAF_NODE	262:21	262:21	20	1
LEAF_NODE	262:22	262:22	18	)
LEAF_NODE	262:23	262:23	14	;
SELECTION	263:20	263:25	11	
KEYWORD	263:20	263:20	12	else
LEAF_NODE	263:20	263:20	13	else
STATEMENTS	263:25	263:25	12	
SELECTION	263:25	264:3	13	
KEYWORD	263:25	263:25	14	if
LEAF_NODE	263:25	263:25	15	if
LEAF_NODE	263:28	263:28	14	(
CONDITION	263:29	263:29	14	cp [ 1 ] == 'r'
EXPR	263:29	263:38	15	cp [ 1 ] == 'r'
FIELD	263:29	263:33	16	cp [ 1 ]
LEAF_NODE	263:29	263:29	17	cp
LEAF_NODE	263:31	263:31	17	[
EXPR	263:32	263:32	17	1
FIELD	263:32	263:32	18	1
LEAF_NODE	263:32	263:32	19	1
LEAF_NODE	263:33	263:33	17	]
EQ_OPERATOR	263:35	263:35	16	==
LEAF_NODE	263:35	263:35	17	==
FIELD	263:38	263:38	16	'r'
LEAF_NODE	263:38	263:38	17	'r'
LEAF_NODE	263:42	263:42	14	)
STATEMENTS	264:3	264:3	14	
EXPR_STATEMENT	264:3	264:36	15	jpegcolormode = JPEGCOLORMODE_RAW ;
EXPR	264:3	264:3	16	jpegcolormode = JPEGCOLORMODE_RAW
ASSIGN	264:3	264:19	17	jpegcolormode = JPEGCOLORMODE_RAW
LVAL	264:3	264:3	18	jpegcolormode
FIELD	264:3	264:3	19	jpegcolormode
LEAF_NODE	264:3	264:3	20	jpegcolormode
ASSIGN_OP	264:17	264:17	18	=
LEAF_NODE	264:17	264:17	19	=
RVAL	264:19	264:19	18	JPEGCOLORMODE_RAW
FIELD	264:19	264:19	19	JPEGCOLORMODE_RAW
LEAF_NODE	264:19	264:19	20	JPEGCOLORMODE_RAW
LEAF_NODE	264:36	264:36	16	;
SELECTION	265:20	266:24	11	
KEYWORD	265:20	265:20	12	else
LEAF_NODE	265:20	265:20	13	else
STATEMENTS	266:24	266:24	12	
EXPR_STATEMENT	266:24	266:31	13	usage ( ) ;
EXPR	266:24	266:24	14	usage ( )
FUNCTION_CALL	266:24	266:30	15	usage ( )
CALLEE	266:24	266:24	16	usage
LEAF_NODE	266:24	266:24	17	usage
LEAF_NODE	266:29	266:29	16	(
LEAF_NODE	266:30	266:30	16	)
LEAF_NODE	266:31	266:31	14	;
EXPR_STATEMENT	268:20	268:41	11	cp = strchr ( cp + 1 , ':' ) ;
EXPR	268:20	268:20	12	cp = strchr ( cp + 1 , ':' )
ASSIGN	268:20	268:25	13	cp = strchr ( cp + 1 , ':' )
LVAL	268:20	268:20	14	cp
FIELD	268:20	268:20	15	cp
LEAF_NODE	268:20	268:20	16	cp
ASSIGN_OP	268:23	268:23	14	=
LEAF_NODE	268:23	268:23	15	=
RVAL	268:25	268:25	14	strchr ( cp + 1 , ':' )
FUNCTION_CALL	268:25	268:40	15	strchr ( cp + 1 , ':' )
CALLEE	268:25	268:25	16	strchr
LEAF_NODE	268:25	268:25	17	strchr
LEAF_NODE	268:31	268:31	16	(
ARGUMENT	268:32	268:35	16	cp + 1
FIELD	268:32	268:32	17	cp
LEAF_NODE	268:32	268:32	18	cp
LEAF_NODE	268:34	268:34	17	+
FIELD	268:35	268:35	17	1
LEAF_NODE	268:35	268:35	18	1
LEAF_NODE	268:36	268:36	16	,
ARGUMENT	268:37	268:37	16	':'
FIELD	268:37	268:37	17	':'
LEAF_NODE	268:37	268:37	18	':'
LEAF_NODE	268:40	268:40	16	)
LEAF_NODE	268:41	268:41	12	;
LEAF_NODE	269:16	269:16	10	}
LEAF_NODE	270:1	270:1	7	}
SELECTION	270:3	270:8	3	
KEYWORD	270:3	270:3	4	else
LEAF_NODE	270:3	270:3	5	else
STATEMENTS	270:8	270:8	4	
SELECTION	270:8	270:35	5	
KEYWORD	270:8	270:8	6	if
LEAF_NODE	270:8	270:8	7	if
LEAF_NODE	270:11	270:11	6	(
CONDITION	270:12	270:12	6	strneq ( opt , "lzw" , 3 )
EXPR	270:12	270:12	7	strneq ( opt , "lzw" , 3 )
FUNCTION_CALL	270:12	270:32	8	strneq ( opt , "lzw" , 3 )
CALLEE	270:12	270:12	9	strneq
LEAF_NODE	270:12	270:12	10	strneq
LEAF_NODE	270:18	270:18	9	(
ARGUMENT	270:19	270:19	9	opt
FIELD	270:19	270:19	10	opt
LEAF_NODE	270:19	270:19	11	opt
LEAF_NODE	270:22	270:22	9	,
ARGUMENT	270:24	270:24	9	"lzw"
FIELD	270:24	270:24	10	"lzw"
LEAF_NODE	270:24	270:24	11	"lzw"
LEAF_NODE	270:29	270:29	9	,
ARGUMENT	270:31	270:31	9	3
FIELD	270:31	270:31	10	3
LEAF_NODE	270:31	270:31	11	3
LEAF_NODE	270:32	270:32	9	)
LEAF_NODE	270:33	270:33	6	)
STATEMENTS	270:35	275:1	6	
LEAF_NODE	270:35	270:35	7	{
STATEMENTS	271:2	274:2	7	
SIMPLE_DECL	271:2	271:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	271:2	271:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	271:2	271:6	10	char *
TYPE_NAME	271:2	271:2	11	char
LEAF_NODE	271:2	271:2	12	char
POINTER	271:6	271:6	11	*
LEAF_NODE	271:6	271:6	12	*
NAME	271:8	271:8	10	cp
LEAF_NODE	271:8	271:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	271:8	271:8	10	cp = strchr ( opt , ':' )
ASSIGN	271:8	271:13	11	cp = strchr ( opt , ':' )
LVAL	271:8	271:8	12	cp
NAME	271:8	271:8	13	cp
LEAF_NODE	271:8	271:8	14	cp
ASSIGN_OP	271:11	271:11	12	=
LEAF_NODE	271:11	271:11	13	=
RVAL	271:13	271:13	12	strchr ( opt , ':' )
FUNCTION_CALL	271:13	271:28	13	strchr ( opt , ':' )
CALLEE	271:13	271:13	14	strchr
LEAF_NODE	271:13	271:13	15	strchr
LEAF_NODE	271:19	271:19	14	(
ARGUMENT	271:20	271:20	14	opt
FIELD	271:20	271:20	15	opt
LEAF_NODE	271:20	271:20	16	opt
LEAF_NODE	271:23	271:23	14	,
ARGUMENT	271:25	271:25	14	':'
FIELD	271:25	271:25	15	':'
LEAF_NODE	271:25	271:25	16	':'
LEAF_NODE	271:28	271:28	14	)
LEAF_NODE	271:29	271:29	9	;
SELECTION	272:2	273:3	8	
KEYWORD	272:2	272:2	9	if
LEAF_NODE	272:2	272:2	10	if
LEAF_NODE	272:5	272:5	9	(
CONDITION	272:6	272:6	9	cp
EXPR	272:6	272:6	10	cp
FIELD	272:6	272:6	11	cp
LEAF_NODE	272:6	272:6	12	cp
LEAF_NODE	272:8	272:8	9	)
STATEMENTS	273:3	273:3	9	
EXPR_STATEMENT	273:3	273:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	273:3	273:3	11	predictor = atoi ( cp + 1 )
ASSIGN	273:3	273:15	12	predictor = atoi ( cp + 1 )
LVAL	273:3	273:3	13	predictor
FIELD	273:3	273:3	14	predictor
LEAF_NODE	273:3	273:3	15	predictor
ASSIGN_OP	273:13	273:13	13	=
LEAF_NODE	273:13	273:13	14	=
RVAL	273:15	273:15	13	atoi ( cp + 1 )
FUNCTION_CALL	273:15	273:24	14	atoi ( cp + 1 )
CALLEE	273:15	273:15	15	atoi
LEAF_NODE	273:15	273:15	16	atoi
LEAF_NODE	273:19	273:19	15	(
ARGUMENT	273:20	273:23	15	cp + 1
FIELD	273:20	273:20	16	cp
LEAF_NODE	273:20	273:20	17	cp
LEAF_NODE	273:22	273:22	16	+
FIELD	273:23	273:23	16	1
LEAF_NODE	273:23	273:23	17	1
LEAF_NODE	273:24	273:24	15	)
LEAF_NODE	273:25	273:25	11	;
EXPR_STATEMENT	274:2	274:31	8	compression = COMPRESSION_LZW ;
EXPR	274:2	274:2	9	compression = COMPRESSION_LZW
ASSIGN	274:2	274:16	10	compression = COMPRESSION_LZW
LVAL	274:2	274:2	11	compression
FIELD	274:2	274:2	12	compression
LEAF_NODE	274:2	274:2	13	compression
ASSIGN_OP	274:14	274:14	11	=
LEAF_NODE	274:14	274:14	12	=
RVAL	274:16	274:16	11	COMPRESSION_LZW
FIELD	274:16	274:16	12	COMPRESSION_LZW
LEAF_NODE	274:16	274:16	13	COMPRESSION_LZW
LEAF_NODE	274:31	274:31	9	;
LEAF_NODE	275:1	275:1	7	}
SELECTION	275:3	275:8	3	
KEYWORD	275:3	275:3	4	else
LEAF_NODE	275:3	275:3	5	else
STATEMENTS	275:8	275:8	4	
SELECTION	275:8	275:35	5	
KEYWORD	275:8	275:8	6	if
LEAF_NODE	275:8	275:8	7	if
LEAF_NODE	275:11	275:11	6	(
CONDITION	275:12	275:12	6	strneq ( opt , "zip" , 3 )
EXPR	275:12	275:12	7	strneq ( opt , "zip" , 3 )
FUNCTION_CALL	275:12	275:32	8	strneq ( opt , "zip" , 3 )
CALLEE	275:12	275:12	9	strneq
LEAF_NODE	275:12	275:12	10	strneq
LEAF_NODE	275:18	275:18	9	(
ARGUMENT	275:19	275:19	9	opt
FIELD	275:19	275:19	10	opt
LEAF_NODE	275:19	275:19	11	opt
LEAF_NODE	275:22	275:22	9	,
ARGUMENT	275:24	275:24	9	"zip"
FIELD	275:24	275:24	10	"zip"
LEAF_NODE	275:24	275:24	11	"zip"
LEAF_NODE	275:29	275:29	9	,
ARGUMENT	275:31	275:31	9	3
FIELD	275:31	275:31	10	3
LEAF_NODE	275:31	275:31	11	3
LEAF_NODE	275:32	275:32	9	)
LEAF_NODE	275:33	275:33	6	)
STATEMENTS	275:35	280:1	6	
LEAF_NODE	275:35	275:35	7	{
STATEMENTS	276:2	279:2	7	
SIMPLE_DECL	276:2	276:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	276:2	276:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	276:2	276:6	10	char *
TYPE_NAME	276:2	276:2	11	char
LEAF_NODE	276:2	276:2	12	char
POINTER	276:6	276:6	11	*
LEAF_NODE	276:6	276:6	12	*
NAME	276:8	276:8	10	cp
LEAF_NODE	276:8	276:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	276:8	276:8	10	cp = strchr ( opt , ':' )
ASSIGN	276:8	276:13	11	cp = strchr ( opt , ':' )
LVAL	276:8	276:8	12	cp
NAME	276:8	276:8	13	cp
LEAF_NODE	276:8	276:8	14	cp
ASSIGN_OP	276:11	276:11	12	=
LEAF_NODE	276:11	276:11	13	=
RVAL	276:13	276:13	12	strchr ( opt , ':' )
FUNCTION_CALL	276:13	276:28	13	strchr ( opt , ':' )
CALLEE	276:13	276:13	14	strchr
LEAF_NODE	276:13	276:13	15	strchr
LEAF_NODE	276:19	276:19	14	(
ARGUMENT	276:20	276:20	14	opt
FIELD	276:20	276:20	15	opt
LEAF_NODE	276:20	276:20	16	opt
LEAF_NODE	276:23	276:23	14	,
ARGUMENT	276:25	276:25	14	':'
FIELD	276:25	276:25	15	':'
LEAF_NODE	276:25	276:25	16	':'
LEAF_NODE	276:28	276:28	14	)
LEAF_NODE	276:29	276:29	9	;
SELECTION	277:2	278:3	8	
KEYWORD	277:2	277:2	9	if
LEAF_NODE	277:2	277:2	10	if
LEAF_NODE	277:5	277:5	9	(
CONDITION	277:6	277:6	9	cp
EXPR	277:6	277:6	10	cp
FIELD	277:6	277:6	11	cp
LEAF_NODE	277:6	277:6	12	cp
LEAF_NODE	277:8	277:8	9	)
STATEMENTS	278:3	278:3	9	
EXPR_STATEMENT	278:3	278:25	10	predictor = atoi ( cp + 1 ) ;
EXPR	278:3	278:3	11	predictor = atoi ( cp + 1 )
ASSIGN	278:3	278:15	12	predictor = atoi ( cp + 1 )
LVAL	278:3	278:3	13	predictor
FIELD	278:3	278:3	14	predictor
LEAF_NODE	278:3	278:3	15	predictor
ASSIGN_OP	278:13	278:13	13	=
LEAF_NODE	278:13	278:13	14	=
RVAL	278:15	278:15	13	atoi ( cp + 1 )
FUNCTION_CALL	278:15	278:24	14	atoi ( cp + 1 )
CALLEE	278:15	278:15	15	atoi
LEAF_NODE	278:15	278:15	16	atoi
LEAF_NODE	278:19	278:19	15	(
ARGUMENT	278:20	278:23	15	cp + 1
FIELD	278:20	278:20	16	cp
LEAF_NODE	278:20	278:20	17	cp
LEAF_NODE	278:22	278:22	16	+
FIELD	278:23	278:23	16	1
LEAF_NODE	278:23	278:23	17	1
LEAF_NODE	278:24	278:24	15	)
LEAF_NODE	278:25	278:25	11	;
EXPR_STATEMENT	279:2	279:35	8	compression = COMPRESSION_DEFLATE ;
EXPR	279:2	279:2	9	compression = COMPRESSION_DEFLATE
ASSIGN	279:2	279:16	10	compression = COMPRESSION_DEFLATE
LVAL	279:2	279:2	11	compression
FIELD	279:2	279:2	12	compression
LEAF_NODE	279:2	279:2	13	compression
ASSIGN_OP	279:14	279:14	11	=
LEAF_NODE	279:14	279:14	12	=
RVAL	279:16	279:16	11	COMPRESSION_DEFLATE
FIELD	279:16	279:16	12	COMPRESSION_DEFLATE
LEAF_NODE	279:16	279:16	13	COMPRESSION_DEFLATE
LEAF_NODE	279:35	279:35	9	;
LEAF_NODE	280:1	280:1	7	}
SELECTION	280:3	281:2	3	
KEYWORD	280:3	280:3	4	else
LEAF_NODE	280:3	280:3	5	else
STATEMENTS	281:2	281:2	4	
JUMP_STATEMENT	281:2	281:12	5	return ( 0 ) ;
KEYWORD	281:2	281:2	6	return
LEAF_NODE	281:2	281:2	7	return
DESTINATION	281:9	281:9	6	( 0 )
EXPR	281:9	281:11	7	( 0 )
LEAF_NODE	281:9	281:9	8	(
FIELD	281:10	281:10	8	0
LEAF_NODE	281:10	281:10	9	0
LEAF_NODE	281:11	281:11	8	)
LEAF_NODE	281:12	281:12	6	;
JUMP_STATEMENT	282:1	282:11	3	return ( 1 ) ;
KEYWORD	282:1	282:1	4	return
LEAF_NODE	282:1	282:1	5	return
DESTINATION	282:8	282:8	4	( 1 )
EXPR	282:8	282:10	5	( 1 )
LEAF_NODE	282:8	282:8	6	(
FIELD	282:9	282:9	6	1
LEAF_NODE	282:9	282:9	7	1
LEAF_NODE	282:10	282:10	6	)
LEAF_NODE	282:11	282:11	4	;
LEAF_NODE	283:0	283:0	2	}
FUNCTION_DEF	294:0	347:0	1	
RETURN_TYPE	294:0	294:7	2	static void
LEAF_NODE	294:0	294:0	3	static
TYPE_NAME	294:7	294:7	3	void
LEAF_NODE	294:7	294:7	4	void
FUNCTION_NAME	295:0	295:0	2	cpTag
LEAF_NODE	295:0	295:0	3	cpTag
PARAMETER_LIST	295:5	295:70	2	( TIFF * in , TIFF * out , uint16 tag , uint16 count , TIFFDataType type )
LEAF_NODE	295:5	295:5	3	(
PARAMETER_DECL	295:6	295:12	3	TIFF * in
TYPE	295:6	295:10	4	TIFF *
TYPE_NAME	295:6	295:6	5	TIFF
LEAF_NODE	295:6	295:6	6	TIFF
POINTER	295:10	295:10	5	*
LEAF_NODE	295:10	295:10	6	*
NAME	295:12	295:12	4	in
LEAF_NODE	295:12	295:12	5	in
LEAF_NODE	295:14	295:14	3	,
PARAMETER_DECL	295:16	295:22	3	TIFF * out
TYPE	295:16	295:20	4	TIFF *
TYPE_NAME	295:16	295:16	5	TIFF
LEAF_NODE	295:16	295:16	6	TIFF
POINTER	295:20	295:20	5	*
LEAF_NODE	295:20	295:20	6	*
NAME	295:22	295:22	4	out
LEAF_NODE	295:22	295:22	5	out
LEAF_NODE	295:25	295:25	3	,
PARAMETER_DECL	295:27	295:34	3	uint16 tag
TYPE	295:27	295:27	4	uint16
TYPE_NAME	295:27	295:27	5	uint16
LEAF_NODE	295:27	295:27	6	uint16
NAME	295:34	295:34	4	tag
LEAF_NODE	295:34	295:34	5	tag
LEAF_NODE	295:37	295:37	3	,
PARAMETER_DECL	295:39	295:46	3	uint16 count
TYPE	295:39	295:39	4	uint16
TYPE_NAME	295:39	295:39	5	uint16
LEAF_NODE	295:39	295:39	6	uint16
NAME	295:46	295:46	4	count
LEAF_NODE	295:46	295:46	5	count
LEAF_NODE	295:51	295:51	3	,
PARAMETER_DECL	295:53	295:66	3	TIFFDataType type
TYPE	295:53	295:53	4	TIFFDataType
TYPE_NAME	295:53	295:53	5	TIFFDataType
LEAF_NODE	295:53	295:53	6	TIFFDataType
NAME	295:66	295:66	4	type
LEAF_NODE	295:66	295:66	5	type
LEAF_NODE	295:70	295:70	3	)
LEAF_NODE	296:0	296:0	2	{
STATEMENTS	297:1	297:1	2	
SELECTION	297:1	297:15	3	
KEYWORD	297:1	297:1	4	switch
LEAF_NODE	297:1	297:1	5	switch
LEAF_NODE	297:8	297:8	4	(
CONDITION	297:9	297:9	4	type
EXPR	297:9	297:9	5	type
FIELD	297:9	297:9	6	type
LEAF_NODE	297:9	297:9	7	type
LEAF_NODE	297:13	297:13	4	)
STATEMENTS	297:15	346:1	4	
LEAF_NODE	297:15	297:15	5	{
STATEMENTS	298:1	343:16	5	
LABEL	298:1	298:16	6	case TIFF_SHORT :
LEAF_NODE	298:1	298:1	7	case
LEAF_NODE	298:6	298:6	7	TIFF_SHORT
LEAF_NODE	298:16	298:16	7	:
SELECTION	299:2	299:18	6	
KEYWORD	299:2	299:2	7	if
LEAF_NODE	299:2	299:2	8	if
LEAF_NODE	299:5	299:5	7	(
CONDITION	299:6	299:6	7	count == 1
EXPR	299:6	299:15	8	count == 1
FIELD	299:6	299:6	9	count
LEAF_NODE	299:6	299:6	10	count
EQ_OPERATOR	299:12	299:12	9	==
LEAF_NODE	299:12	299:12	10	==
FIELD	299:15	299:15	9	1
LEAF_NODE	299:15	299:15	10	1
LEAF_NODE	299:16	299:16	7	)
STATEMENTS	299:18	302:2	7	
LEAF_NODE	299:18	299:18	8	{
STATEMENTS	300:3	301:3	8	
SIMPLE_DECL	300:3	300:16	9	uint16 shortv ;
VAR_DECL	300:3	300:10	10	uint16 shortv
TYPE	300:3	300:3	11	uint16
TYPE_NAME	300:3	300:3	12	uint16
LEAF_NODE	300:3	300:3	13	uint16
NAME	300:10	300:10	11	shortv
LEAF_NODE	300:10	300:10	12	shortv
LEAF_NODE	300:16	300:16	10	;
EXPR_STATEMENT	301:3	301:25	9	CopyField ( tag , shortv ) ;
EXPR	301:3	301:3	10	CopyField ( tag , shortv )
FUNCTION_CALL	301:3	301:24	11	CopyField ( tag , shortv )
CALLEE	301:3	301:3	12	CopyField
LEAF_NODE	301:3	301:3	13	CopyField
LEAF_NODE	301:12	301:12	12	(
ARGUMENT	301:13	301:13	12	tag
FIELD	301:13	301:13	13	tag
LEAF_NODE	301:13	301:13	14	tag
LEAF_NODE	301:16	301:16	12	,
ARGUMENT	301:18	301:18	12	shortv
FIELD	301:18	301:18	13	shortv
LEAF_NODE	301:18	301:18	14	shortv
LEAF_NODE	301:24	301:24	12	)
LEAF_NODE	301:25	301:25	10	;
LEAF_NODE	302:2	302:2	8	}
SELECTION	302:4	302:9	6	
KEYWORD	302:4	302:4	7	else
LEAF_NODE	302:4	302:4	8	else
STATEMENTS	302:9	302:9	7	
SELECTION	302:9	302:25	8	
KEYWORD	302:9	302:9	9	if
LEAF_NODE	302:9	302:9	10	if
LEAF_NODE	302:12	302:12	9	(
CONDITION	302:13	302:13	9	count == 2
EXPR	302:13	302:22	10	count == 2
FIELD	302:13	302:13	11	count
LEAF_NODE	302:13	302:13	12	count
EQ_OPERATOR	302:19	302:19	11	==
LEAF_NODE	302:19	302:19	12	==
FIELD	302:22	302:22	11	2
LEAF_NODE	302:22	302:22	12	2
LEAF_NODE	302:23	302:23	9	)
STATEMENTS	302:25	305:2	9	
LEAF_NODE	302:25	302:25	10	{
STATEMENTS	303:3	304:3	10	
SIMPLE_DECL	303:3	303:26	11	uint16 shortv1 , uint16 shortv2 ;
INIT_DECL_LIST	303:3	303:3	12	uint16 shortv1 , uint16 shortv2
VAR_DECL	303:3	303:10	13	uint16 shortv1
TYPE	303:3	303:3	14	uint16
TYPE_NAME	303:3	303:3	15	uint16
LEAF_NODE	303:3	303:3	16	uint16
NAME	303:10	303:10	14	shortv1
LEAF_NODE	303:10	303:10	15	shortv1
LEAF_NODE	303:17	303:17	13	,
VAR_DECL	303:3	303:19	13	uint16 shortv2
TYPE	303:3	303:3	14	uint16
TYPE_NAME	303:3	303:3	15	uint16
LEAF_NODE	303:3	303:3	16	uint16
NAME	303:19	303:19	14	shortv2
LEAF_NODE	303:19	303:19	15	shortv2
LEAF_NODE	303:26	303:26	12	;
EXPR_STATEMENT	304:3	304:36	11	CopyField2 ( tag , shortv1 , shortv2 ) ;
EXPR	304:3	304:3	12	CopyField2 ( tag , shortv1 , shortv2 )
FUNCTION_CALL	304:3	304:35	13	CopyField2 ( tag , shortv1 , shortv2 )
CALLEE	304:3	304:3	14	CopyField2
LEAF_NODE	304:3	304:3	15	CopyField2
LEAF_NODE	304:13	304:13	14	(
ARGUMENT	304:14	304:14	14	tag
FIELD	304:14	304:14	15	tag
LEAF_NODE	304:14	304:14	16	tag
LEAF_NODE	304:17	304:17	14	,
ARGUMENT	304:19	304:19	14	shortv1
FIELD	304:19	304:19	15	shortv1
LEAF_NODE	304:19	304:19	16	shortv1
LEAF_NODE	304:26	304:26	14	,
ARGUMENT	304:28	304:28	14	shortv2
FIELD	304:28	304:28	15	shortv2
LEAF_NODE	304:28	304:28	16	shortv2
LEAF_NODE	304:35	304:35	14	)
LEAF_NODE	304:36	304:36	12	;
LEAF_NODE	305:2	305:2	10	}
SELECTION	305:4	305:9	6	
KEYWORD	305:4	305:4	7	else
LEAF_NODE	305:4	305:4	8	else
STATEMENTS	305:9	305:9	7	
SELECTION	305:9	305:25	8	
KEYWORD	305:9	305:9	9	if
LEAF_NODE	305:9	305:9	10	if
LEAF_NODE	305:12	305:12	9	(
CONDITION	305:13	305:13	9	count == 4
EXPR	305:13	305:22	10	count == 4
FIELD	305:13	305:13	11	count
LEAF_NODE	305:13	305:13	12	count
EQ_OPERATOR	305:19	305:19	11	==
LEAF_NODE	305:19	305:19	12	==
FIELD	305:22	305:22	11	4
LEAF_NODE	305:22	305:22	12	4
LEAF_NODE	305:23	305:23	9	)
STATEMENTS	305:25	308:2	9	
LEAF_NODE	305:25	305:25	10	{
STATEMENTS	306:3	307:3	10	
SIMPLE_DECL	306:3	306:28	11	uint16 * tr , uint16 * tg , uint16 * tb , uint16 * ta ;
INIT_DECL_LIST	306:3	306:3	12	uint16 * tr , uint16 * tg , uint16 * tb , uint16 * ta
VAR_DECL	306:3	306:11	13	uint16 * tr
TYPE	306:3	306:10	14	uint16 *
TYPE_NAME	306:3	306:3	15	uint16
LEAF_NODE	306:3	306:3	16	uint16
POINTER	306:10	306:10	15	*
LEAF_NODE	306:10	306:10	16	*
NAME	306:11	306:11	14	tr
LEAF_NODE	306:11	306:11	15	tr
LEAF_NODE	306:13	306:13	13	,
INIT_DECL_LIST	306:3	306:3	13	uint16 * tg , uint16 * tb , uint16 * ta
VAR_DECL	306:3	306:16	14	uint16 * tg
TYPE	306:3	306:15	15	uint16 *
TYPE_NAME	306:3	306:3	16	uint16
LEAF_NODE	306:3	306:3	17	uint16
POINTER	306:15	306:15	16	*
LEAF_NODE	306:15	306:15	17	*
NAME	306:16	306:16	15	tg
LEAF_NODE	306:16	306:16	16	tg
LEAF_NODE	306:18	306:18	14	,
INIT_DECL_LIST	306:3	306:3	14	uint16 * tb , uint16 * ta
VAR_DECL	306:3	306:21	15	uint16 * tb
TYPE	306:3	306:20	16	uint16 *
TYPE_NAME	306:3	306:3	17	uint16
LEAF_NODE	306:3	306:3	18	uint16
POINTER	306:20	306:20	17	*
LEAF_NODE	306:20	306:20	18	*
NAME	306:21	306:21	16	tb
LEAF_NODE	306:21	306:21	17	tb
LEAF_NODE	306:23	306:23	15	,
VAR_DECL	306:3	306:26	15	uint16 * ta
TYPE	306:3	306:25	16	uint16 *
TYPE_NAME	306:3	306:3	17	uint16
LEAF_NODE	306:3	306:3	18	uint16
POINTER	306:25	306:25	17	*
LEAF_NODE	306:25	306:25	18	*
NAME	306:26	306:26	16	ta
LEAF_NODE	306:26	306:26	17	ta
LEAF_NODE	306:28	306:28	12	;
EXPR_STATEMENT	307:3	307:34	11	CopyField4 ( tag , tr , tg , tb , ta ) ;
EXPR	307:3	307:3	12	CopyField4 ( tag , tr , tg , tb , ta )
FUNCTION_CALL	307:3	307:33	13	CopyField4 ( tag , tr , tg , tb , ta )
CALLEE	307:3	307:3	14	CopyField4
LEAF_NODE	307:3	307:3	15	CopyField4
LEAF_NODE	307:13	307:13	14	(
ARGUMENT	307:14	307:14	14	tag
FIELD	307:14	307:14	15	tag
LEAF_NODE	307:14	307:14	16	tag
LEAF_NODE	307:17	307:17	14	,
ARGUMENT	307:19	307:19	14	tr
FIELD	307:19	307:19	15	tr
LEAF_NODE	307:19	307:19	16	tr
LEAF_NODE	307:21	307:21	14	,
ARGUMENT	307:23	307:23	14	tg
FIELD	307:23	307:23	15	tg
LEAF_NODE	307:23	307:23	16	tg
LEAF_NODE	307:25	307:25	14	,
ARGUMENT	307:27	307:27	14	tb
FIELD	307:27	307:27	15	tb
LEAF_NODE	307:27	307:27	16	tb
LEAF_NODE	307:29	307:29	14	,
ARGUMENT	307:31	307:31	14	ta
FIELD	307:31	307:31	15	ta
LEAF_NODE	307:31	307:31	16	ta
LEAF_NODE	307:33	307:33	14	)
LEAF_NODE	307:34	307:34	12	;
LEAF_NODE	308:2	308:2	10	}
SELECTION	308:4	308:9	6	
KEYWORD	308:4	308:4	7	else
LEAF_NODE	308:4	308:4	8	else
STATEMENTS	308:9	308:9	7	
SELECTION	308:9	308:35	8	
KEYWORD	308:9	308:9	9	if
LEAF_NODE	308:9	308:9	10	if
LEAF_NODE	308:12	308:12	9	(
CONDITION	308:13	308:13	9	count == ( uint16 ) - 1
EXPR	308:13	308:31	10	count == ( uint16 ) - 1
FIELD	308:13	308:13	11	count
LEAF_NODE	308:13	308:13	12	count
EQ_OPERATOR	308:19	308:19	11	==
LEAF_NODE	308:19	308:19	12	==
LEAF_NODE	308:22	308:22	11	(
TYPE_NAME	308:23	308:23	11	uint16
LEAF_NODE	308:23	308:23	12	uint16
LEAF_NODE	308:29	308:29	11	)
UNARY_EXPR	308:31	308:32	11	- 1
UNARY_OPERATOR	308:31	308:31	12	-
LEAF_NODE	308:31	308:31	13	-
FIELD	308:32	308:32	12	1
LEAF_NODE	308:32	308:32	13	1
LEAF_NODE	308:33	308:33	9	)
STATEMENTS	308:35	312:2	9	
LEAF_NODE	308:35	308:35	10	{
STATEMENTS	309:3	311:3	10	
SIMPLE_DECL	309:3	309:17	11	uint16 shortv1 ;
VAR_DECL	309:3	309:10	12	uint16 shortv1
TYPE	309:3	309:3	13	uint16
TYPE_NAME	309:3	309:3	14	uint16
LEAF_NODE	309:3	309:3	15	uint16
NAME	309:10	309:10	13	shortv1
LEAF_NODE	309:10	309:10	14	shortv1
LEAF_NODE	309:17	309:17	12	;
SIMPLE_DECL	310:3	310:18	11	uint16 * shortav ;
VAR_DECL	310:3	310:11	12	uint16 * shortav
TYPE	310:3	310:9	13	uint16 *
TYPE_NAME	310:3	310:3	14	uint16
LEAF_NODE	310:3	310:3	15	uint16
POINTER	310:9	310:9	14	*
LEAF_NODE	310:9	310:9	15	*
NAME	310:11	310:11	13	shortav
LEAF_NODE	310:11	310:11	14	shortav
LEAF_NODE	310:18	310:18	12	;
EXPR_STATEMENT	311:3	311:36	11	CopyField2 ( tag , shortv1 , shortav ) ;
EXPR	311:3	311:3	12	CopyField2 ( tag , shortv1 , shortav )
FUNCTION_CALL	311:3	311:35	13	CopyField2 ( tag , shortv1 , shortav )
CALLEE	311:3	311:3	14	CopyField2
LEAF_NODE	311:3	311:3	15	CopyField2
LEAF_NODE	311:13	311:13	14	(
ARGUMENT	311:14	311:14	14	tag
FIELD	311:14	311:14	15	tag
LEAF_NODE	311:14	311:14	16	tag
LEAF_NODE	311:17	311:17	14	,
ARGUMENT	311:19	311:19	14	shortv1
FIELD	311:19	311:19	15	shortv1
LEAF_NODE	311:19	311:19	16	shortv1
LEAF_NODE	311:26	311:26	14	,
ARGUMENT	311:28	311:28	14	shortav
FIELD	311:28	311:28	15	shortav
LEAF_NODE	311:28	311:28	16	shortav
LEAF_NODE	311:35	311:35	14	)
LEAF_NODE	311:36	311:36	12	;
LEAF_NODE	312:2	312:2	10	}
JUMP_STATEMENT	313:2	313:7	6	break DESTINATION ;
KEYWORD	313:2	313:2	7	break
LEAF_NODE	313:2	313:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	313:7	313:7	7	;
LABEL	314:1	314:15	6	case TIFF_LONG :
LEAF_NODE	314:1	314:1	7	case
LEAF_NODE	314:6	314:6	7	TIFF_LONG
LEAF_NODE	314:15	314:15	7	:
LEAF_NODE	315:2	315:2	6	{
STATEMENTS	315:4	316:4	6	
SIMPLE_DECL	315:4	315:16	7	uint32 longv ;
VAR_DECL	315:4	315:11	8	uint32 longv
TYPE	315:4	315:4	9	uint32
TYPE_NAME	315:4	315:4	10	uint32
LEAF_NODE	315:4	315:4	11	uint32
NAME	315:11	315:11	9	longv
LEAF_NODE	315:11	315:11	10	longv
LEAF_NODE	315:16	315:16	8	;
EXPR_STATEMENT	316:4	316:25	7	CopyField ( tag , longv ) ;
EXPR	316:4	316:4	8	CopyField ( tag , longv )
FUNCTION_CALL	316:4	316:24	9	CopyField ( tag , longv )
CALLEE	316:4	316:4	10	CopyField
LEAF_NODE	316:4	316:4	11	CopyField
LEAF_NODE	316:13	316:13	10	(
ARGUMENT	316:14	316:14	10	tag
FIELD	316:14	316:14	11	tag
LEAF_NODE	316:14	316:14	12	tag
LEAF_NODE	316:17	316:17	10	,
ARGUMENT	316:19	316:19	10	longv
FIELD	316:19	316:19	11	longv
LEAF_NODE	316:19	316:19	12	longv
LEAF_NODE	316:24	316:24	10	)
LEAF_NODE	316:25	316:25	8	;
LEAF_NODE	317:2	317:2	6	}
JUMP_STATEMENT	318:2	318:7	6	break DESTINATION ;
KEYWORD	318:2	318:2	7	break
LEAF_NODE	318:2	318:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	318:7	318:7	7	;
LABEL	319:1	319:19	6	case TIFF_RATIONAL :
LEAF_NODE	319:1	319:1	7	case
LEAF_NODE	319:6	319:6	7	TIFF_RATIONAL
LEAF_NODE	319:19	319:19	7	:
SELECTION	320:2	320:18	6	
KEYWORD	320:2	320:2	7	if
LEAF_NODE	320:2	320:2	8	if
LEAF_NODE	320:5	320:5	7	(
CONDITION	320:6	320:6	7	count == 1
EXPR	320:6	320:15	8	count == 1
FIELD	320:6	320:6	9	count
LEAF_NODE	320:6	320:6	10	count
EQ_OPERATOR	320:12	320:12	9	==
LEAF_NODE	320:12	320:12	10	==
FIELD	320:15	320:15	9	1
LEAF_NODE	320:15	320:15	10	1
LEAF_NODE	320:16	320:16	7	)
STATEMENTS	320:18	323:2	7	
LEAF_NODE	320:18	320:18	8	{
STATEMENTS	321:3	322:3	8	
SIMPLE_DECL	321:3	321:15	9	float floatv ;
VAR_DECL	321:3	321:9	10	float floatv
TYPE	321:3	321:3	11	float
TYPE_NAME	321:3	321:3	12	float
LEAF_NODE	321:3	321:3	13	float
NAME	321:9	321:9	11	floatv
LEAF_NODE	321:9	321:9	12	floatv
LEAF_NODE	321:15	321:15	10	;
EXPR_STATEMENT	322:3	322:25	9	CopyField ( tag , floatv ) ;
EXPR	322:3	322:3	10	CopyField ( tag , floatv )
FUNCTION_CALL	322:3	322:24	11	CopyField ( tag , floatv )
CALLEE	322:3	322:3	12	CopyField
LEAF_NODE	322:3	322:3	13	CopyField
LEAF_NODE	322:12	322:12	12	(
ARGUMENT	322:13	322:13	12	tag
FIELD	322:13	322:13	13	tag
LEAF_NODE	322:13	322:13	14	tag
LEAF_NODE	322:16	322:16	12	,
ARGUMENT	322:18	322:18	12	floatv
FIELD	322:18	322:18	13	floatv
LEAF_NODE	322:18	322:18	14	floatv
LEAF_NODE	322:24	322:24	12	)
LEAF_NODE	322:25	322:25	10	;
LEAF_NODE	323:2	323:2	8	}
SELECTION	323:4	323:9	6	
KEYWORD	323:4	323:4	7	else
LEAF_NODE	323:4	323:4	8	else
STATEMENTS	323:9	323:9	7	
SELECTION	323:9	323:35	8	
KEYWORD	323:9	323:9	9	if
LEAF_NODE	323:9	323:9	10	if
LEAF_NODE	323:12	323:12	9	(
CONDITION	323:13	323:13	9	count == ( uint16 ) - 1
EXPR	323:13	323:31	10	count == ( uint16 ) - 1
FIELD	323:13	323:13	11	count
LEAF_NODE	323:13	323:13	12	count
EQ_OPERATOR	323:19	323:19	11	==
LEAF_NODE	323:19	323:19	12	==
LEAF_NODE	323:22	323:22	11	(
TYPE_NAME	323:23	323:23	11	uint16
LEAF_NODE	323:23	323:23	12	uint16
LEAF_NODE	323:29	323:29	11	)
UNARY_EXPR	323:31	323:32	11	- 1
UNARY_OPERATOR	323:31	323:31	12	-
LEAF_NODE	323:31	323:31	13	-
FIELD	323:32	323:32	12	1
LEAF_NODE	323:32	323:32	13	1
LEAF_NODE	323:33	323:33	9	)
STATEMENTS	323:35	326:2	9	
LEAF_NODE	323:35	323:35	10	{
STATEMENTS	324:3	325:3	10	
SIMPLE_DECL	324:3	324:17	11	float * floatav ;
VAR_DECL	324:3	324:10	12	float * floatav
TYPE	324:3	324:8	13	float *
TYPE_NAME	324:3	324:3	14	float
LEAF_NODE	324:3	324:3	15	float
POINTER	324:8	324:8	14	*
LEAF_NODE	324:8	324:8	15	*
NAME	324:10	324:10	13	floatav
LEAF_NODE	324:10	324:10	14	floatav
LEAF_NODE	324:17	324:17	12	;
EXPR_STATEMENT	325:3	325:26	11	CopyField ( tag , floatav ) ;
EXPR	325:3	325:3	12	CopyField ( tag , floatav )
FUNCTION_CALL	325:3	325:25	13	CopyField ( tag , floatav )
CALLEE	325:3	325:3	14	CopyField
LEAF_NODE	325:3	325:3	15	CopyField
LEAF_NODE	325:12	325:12	14	(
ARGUMENT	325:13	325:13	14	tag
FIELD	325:13	325:13	15	tag
LEAF_NODE	325:13	325:13	16	tag
LEAF_NODE	325:16	325:16	14	,
ARGUMENT	325:18	325:18	14	floatav
FIELD	325:18	325:18	15	floatav
LEAF_NODE	325:18	325:18	16	floatav
LEAF_NODE	325:25	325:25	14	)
LEAF_NODE	325:26	325:26	12	;
LEAF_NODE	326:2	326:2	10	}
JUMP_STATEMENT	327:2	327:7	6	break DESTINATION ;
KEYWORD	327:2	327:2	7	break
LEAF_NODE	327:2	327:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	327:7	327:7	7	;
LABEL	328:1	328:16	6	case TIFF_ASCII :
LEAF_NODE	328:1	328:1	7	case
LEAF_NODE	328:6	328:6	7	TIFF_ASCII
LEAF_NODE	328:16	328:16	7	:
LEAF_NODE	329:2	329:2	6	{
STATEMENTS	329:4	330:4	6	
SIMPLE_DECL	329:4	329:17	7	char * stringv ;
VAR_DECL	329:4	329:10	8	char * stringv
TYPE	329:4	329:8	9	char *
TYPE_NAME	329:4	329:4	10	char
LEAF_NODE	329:4	329:4	11	char
POINTER	329:8	329:8	10	*
LEAF_NODE	329:8	329:8	11	*
NAME	329:10	329:10	9	stringv
LEAF_NODE	329:10	329:10	10	stringv
LEAF_NODE	329:17	329:17	8	;
EXPR_STATEMENT	330:4	330:27	7	CopyField ( tag , stringv ) ;
EXPR	330:4	330:4	8	CopyField ( tag , stringv )
FUNCTION_CALL	330:4	330:26	9	CopyField ( tag , stringv )
CALLEE	330:4	330:4	10	CopyField
LEAF_NODE	330:4	330:4	11	CopyField
LEAF_NODE	330:13	330:13	10	(
ARGUMENT	330:14	330:14	10	tag
FIELD	330:14	330:14	11	tag
LEAF_NODE	330:14	330:14	12	tag
LEAF_NODE	330:17	330:17	10	,
ARGUMENT	330:19	330:19	10	stringv
FIELD	330:19	330:19	11	stringv
LEAF_NODE	330:19	330:19	12	stringv
LEAF_NODE	330:26	330:26	10	)
LEAF_NODE	330:27	330:27	8	;
LEAF_NODE	331:2	331:2	6	}
JUMP_STATEMENT	332:2	332:7	6	break DESTINATION ;
KEYWORD	332:2	332:2	7	break
LEAF_NODE	332:2	332:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	332:7	332:7	7	;
LABEL	333:1	333:17	6	case TIFF_DOUBLE :
LEAF_NODE	333:1	333:1	7	case
LEAF_NODE	333:6	333:6	7	TIFF_DOUBLE
LEAF_NODE	333:17	333:17	7	:
SELECTION	334:2	334:18	6	
KEYWORD	334:2	334:2	7	if
LEAF_NODE	334:2	334:2	8	if
LEAF_NODE	334:5	334:5	7	(
CONDITION	334:6	334:6	7	count == 1
EXPR	334:6	334:15	8	count == 1
FIELD	334:6	334:6	9	count
LEAF_NODE	334:6	334:6	10	count
EQ_OPERATOR	334:12	334:12	9	==
LEAF_NODE	334:12	334:12	10	==
FIELD	334:15	334:15	9	1
LEAF_NODE	334:15	334:15	10	1
LEAF_NODE	334:16	334:16	7	)
STATEMENTS	334:18	337:2	7	
LEAF_NODE	334:18	334:18	8	{
STATEMENTS	335:3	336:3	8	
SIMPLE_DECL	335:3	335:17	9	double doublev ;
VAR_DECL	335:3	335:10	10	double doublev
TYPE	335:3	335:3	11	double
TYPE_NAME	335:3	335:3	12	double
LEAF_NODE	335:3	335:3	13	double
NAME	335:10	335:10	11	doublev
LEAF_NODE	335:10	335:10	12	doublev
LEAF_NODE	335:17	335:17	10	;
EXPR_STATEMENT	336:3	336:26	9	CopyField ( tag , doublev ) ;
EXPR	336:3	336:3	10	CopyField ( tag , doublev )
FUNCTION_CALL	336:3	336:25	11	CopyField ( tag , doublev )
CALLEE	336:3	336:3	12	CopyField
LEAF_NODE	336:3	336:3	13	CopyField
LEAF_NODE	336:12	336:12	12	(
ARGUMENT	336:13	336:13	12	tag
FIELD	336:13	336:13	13	tag
LEAF_NODE	336:13	336:13	14	tag
LEAF_NODE	336:16	336:16	12	,
ARGUMENT	336:18	336:18	12	doublev
FIELD	336:18	336:18	13	doublev
LEAF_NODE	336:18	336:18	14	doublev
LEAF_NODE	336:25	336:25	12	)
LEAF_NODE	336:26	336:26	10	;
LEAF_NODE	337:2	337:2	8	}
SELECTION	337:4	337:9	6	
KEYWORD	337:4	337:4	7	else
LEAF_NODE	337:4	337:4	8	else
STATEMENTS	337:9	337:9	7	
SELECTION	337:9	337:35	8	
KEYWORD	337:9	337:9	9	if
LEAF_NODE	337:9	337:9	10	if
LEAF_NODE	337:12	337:12	9	(
CONDITION	337:13	337:13	9	count == ( uint16 ) - 1
EXPR	337:13	337:31	10	count == ( uint16 ) - 1
FIELD	337:13	337:13	11	count
LEAF_NODE	337:13	337:13	12	count
EQ_OPERATOR	337:19	337:19	11	==
LEAF_NODE	337:19	337:19	12	==
LEAF_NODE	337:22	337:22	11	(
TYPE_NAME	337:23	337:23	11	uint16
LEAF_NODE	337:23	337:23	12	uint16
LEAF_NODE	337:29	337:29	11	)
UNARY_EXPR	337:31	337:32	11	- 1
UNARY_OPERATOR	337:31	337:31	12	-
LEAF_NODE	337:31	337:31	13	-
FIELD	337:32	337:32	12	1
LEAF_NODE	337:32	337:32	13	1
LEAF_NODE	337:33	337:33	9	)
STATEMENTS	337:35	340:2	9	
LEAF_NODE	337:35	337:35	10	{
STATEMENTS	338:3	339:3	10	
SIMPLE_DECL	338:3	338:19	11	double * doubleav ;
VAR_DECL	338:3	338:11	12	double * doubleav
TYPE	338:3	338:9	13	double *
TYPE_NAME	338:3	338:3	14	double
LEAF_NODE	338:3	338:3	15	double
POINTER	338:9	338:9	14	*
LEAF_NODE	338:9	338:9	15	*
NAME	338:11	338:11	13	doubleav
LEAF_NODE	338:11	338:11	14	doubleav
LEAF_NODE	338:19	338:19	12	;
EXPR_STATEMENT	339:3	339:27	11	CopyField ( tag , doubleav ) ;
EXPR	339:3	339:3	12	CopyField ( tag , doubleav )
FUNCTION_CALL	339:3	339:26	13	CopyField ( tag , doubleav )
CALLEE	339:3	339:3	14	CopyField
LEAF_NODE	339:3	339:3	15	CopyField
LEAF_NODE	339:12	339:12	14	(
ARGUMENT	339:13	339:13	14	tag
FIELD	339:13	339:13	15	tag
LEAF_NODE	339:13	339:13	16	tag
LEAF_NODE	339:16	339:16	14	,
ARGUMENT	339:18	339:18	14	doubleav
FIELD	339:18	339:18	15	doubleav
LEAF_NODE	339:18	339:18	16	doubleav
LEAF_NODE	339:26	339:26	14	)
LEAF_NODE	339:27	339:27	12	;
LEAF_NODE	340:2	340:2	10	}
JUMP_STATEMENT	341:2	341:7	6	break DESTINATION ;
KEYWORD	341:2	341:2	7	break
LEAF_NODE	341:2	341:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	341:7	341:7	7	;
LABEL	342:10	342:17	6	default :
LEAF_NODE	342:10	342:10	7	default
LEAF_NODE	342:17	342:17	7	:
EXPR_STATEMENT	343:16	345:36	6	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type ) ;
EXPR	343:16	343:16	7	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type )
FUNCTION_CALL	343:16	345:35	8	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type )
CALLEE	343:16	343:16	9	TIFFError
LEAF_NODE	343:16	343:16	10	TIFFError
LEAF_NODE	343:25	343:25	9	(
ARGUMENT	343:26	343:26	9	TIFFFileName ( in )
FUNCTION_CALL	343:26	343:41	10	TIFFFileName ( in )
CALLEE	343:26	343:26	11	TIFFFileName
LEAF_NODE	343:26	343:26	12	TIFFFileName
LEAF_NODE	343:38	343:38	11	(
ARGUMENT	343:39	343:39	11	in
FIELD	343:39	343:39	12	in
LEAF_NODE	343:39	343:39	13	in
LEAF_NODE	343:41	343:41	11	)
LEAF_NODE	343:42	343:42	9	,
ARGUMENT	344:26	344:26	9	"Data type %d is not supported, tag %d skipped."
FIELD	344:26	344:26	10	"Data type %d is not supported, tag %d skipped."
LEAF_NODE	344:26	344:26	11	"Data type %d is not supported, tag %d skipped."
LEAF_NODE	344:74	344:74	9	,
ARGUMENT	345:26	345:26	9	tag
FIELD	345:26	345:26	10	tag
LEAF_NODE	345:26	345:26	11	tag
LEAF_NODE	345:29	345:29	9	,
ARGUMENT	345:31	345:31	9	type
FIELD	345:31	345:31	10	type
LEAF_NODE	345:31	345:31	11	type
LEAF_NODE	345:35	345:35	9	)
LEAF_NODE	345:36	345:36	7	;
LEAF_NODE	346:1	346:1	5	}
LEAF_NODE	347:0	347:0	2	}
SIMPLE_DECL	355:4	355:14	1	uint16 tag ;
VAR_DECL	355:4	355:11	2	uint16 tag
TYPE	355:4	355:4	3	uint16
TYPE_NAME	355:4	355:4	4	uint16
LEAF_NODE	355:4	355:4	5	uint16
NAME	355:11	355:11	3	tag
LEAF_NODE	355:11	355:11	4	tag
LEAF_NODE	355:14	355:14	2	;
SIMPLE_DECL	356:4	356:16	1	uint16 count ;
VAR_DECL	356:4	356:11	2	uint16 count
TYPE	356:4	356:4	3	uint16
TYPE_NAME	356:4	356:4	4	uint16
LEAF_NODE	356:4	356:4	5	uint16
NAME	356:11	356:11	3	count
LEAF_NODE	356:11	356:11	4	count
LEAF_NODE	356:16	356:16	2	;
SIMPLE_DECL	357:4	357:21	1	TIFFDataType type ;
VAR_DECL	357:4	357:17	2	TIFFDataType type
TYPE	357:4	357:4	3	TIFFDataType
TYPE_NAME	357:4	357:4	4	TIFFDataType
LEAF_NODE	357:4	357:4	5	TIFFDataType
NAME	357:17	357:17	3	type
LEAF_NODE	357:17	357:17	4	type
LEAF_NODE	357:21	357:21	2	;
FUNCTION_DEF	405:0	427:0	1	
RETURN_TYPE	405:0	405:7	2	static void
LEAF_NODE	405:0	405:0	3	static
TYPE_NAME	405:7	405:7	3	void
LEAF_NODE	405:7	405:7	4	void
FUNCTION_NAME	406:0	406:0	2	cpTags
LEAF_NODE	406:0	406:0	3	cpTags
PARAMETER_LIST	406:6	406:26	2	( TIFF * in , TIFF * out )
LEAF_NODE	406:6	406:6	3	(
PARAMETER_DECL	406:7	406:13	3	TIFF * in
TYPE	406:7	406:11	4	TIFF *
TYPE_NAME	406:7	406:7	5	TIFF
LEAF_NODE	406:7	406:7	6	TIFF
POINTER	406:11	406:11	5	*
LEAF_NODE	406:11	406:11	6	*
NAME	406:13	406:13	4	in
LEAF_NODE	406:13	406:13	5	in
LEAF_NODE	406:15	406:15	3	,
PARAMETER_DECL	406:17	406:23	3	TIFF * out
TYPE	406:17	406:21	4	TIFF *
TYPE_NAME	406:17	406:17	5	TIFF
LEAF_NODE	406:17	406:17	6	TIFF
POINTER	406:21	406:21	5	*
LEAF_NODE	406:21	406:21	6	*
NAME	406:23	406:23	4	out
LEAF_NODE	406:23	406:23	5	out
LEAF_NODE	406:26	406:26	3	)
LEAF_NODE	407:0	407:0	2	{
STATEMENTS	408:4	409:4	2	
SIMPLE_DECL	408:4	408:19	3	struct cpTag * p ;
VAR_DECL	408:4	408:18	4	struct cpTag * p
TYPE	408:4	408:17	5	struct cpTag *
TYPE_NAME	408:4	408:11	6	struct cpTag
LEAF_NODE	408:4	408:4	7	struct
LEAF_NODE	408:11	408:11	7	cpTag
POINTER	408:17	408:17	6	*
LEAF_NODE	408:17	408:17	7	*
NAME	408:18	408:18	5	p
LEAF_NODE	408:18	408:18	6	p
LEAF_NODE	408:19	408:19	4	;
ITERATION	409:4	410:4	3	
KEYWORD	409:4	409:4	4	for
LEAF_NODE	409:4	409:4	5	for
LEAF_NODE	409:8	409:8	4	(
FOR_INIT	409:9	409:17	4	p = tags ;
EXPR	409:9	409:9	5	p = tags
ASSIGN	409:9	409:13	6	p = tags
LVAL	409:9	409:9	7	p
FIELD	409:9	409:9	8	p
LEAF_NODE	409:9	409:9	9	p
ASSIGN_OP	409:11	409:11	7	=
LEAF_NODE	409:11	409:11	8	=
RVAL	409:13	409:13	7	tags
FIELD	409:13	409:13	8	tags
LEAF_NODE	409:13	409:13	9	tags
LEAF_NODE	409:17	409:17	5	;
CONDITION	409:19	409:19	4	p < & tags [ NTAGS ]
EXPR	409:19	409:23	5	p < & tags [ NTAGS ]
FIELD	409:19	409:19	6	p
LEAF_NODE	409:19	409:19	7	p
REL_OPERATOR	409:21	409:21	6	<
LEAF_NODE	409:21	409:21	7	<
UNARY_EXPR	409:23	409:24	6	& tags [ NTAGS ]
UNARY_OPERATOR	409:23	409:23	7	&
LEAF_NODE	409:23	409:23	8	&
FIELD	409:24	409:34	7	tags [ NTAGS ]
LEAF_NODE	409:24	409:24	8	tags
LEAF_NODE	409:28	409:28	8	[
EXPR	409:29	409:29	8	NTAGS
FIELD	409:29	409:29	9	NTAGS
LEAF_NODE	409:29	409:29	10	NTAGS
LEAF_NODE	409:34	409:34	8	]
LEAF_NODE	409:35	409:35	4	;
FOR_EXPR	409:37	409:37	4	p ++
EXPR	409:37	409:37	5	p ++
FIELD	409:37	409:38	6	p ++
LEAF_NODE	409:37	409:37	7	p
LEAF_NODE	409:38	409:38	7	++
LEAF_NODE	409:40	409:40	4	)
STATEMENTS	410:4	426:4	4	
LEAF_NODE	410:4	410:4	5	{
STATEMENTS	411:8	425:8	5	
SELECTION	411:8	412:8	6	
KEYWORD	411:8	411:8	7	if
LEAF_NODE	411:8	411:8	8	if
LEAF_NODE	411:10	411:10	7	(
CONDITION	411:12	411:12	7	p -> tag == TIFFTAG_GROUP3OPTIONS
EXPR	411:12	411:22	8	p -> tag == TIFFTAG_GROUP3OPTIONS
FIELD	411:12	411:15	9	p -> tag
LEAF_NODE	411:12	411:12	10	p
LEAF_NODE	411:13	411:13	10	->
LEAF_NODE	411:15	411:15	10	tag
EQ_OPERATOR	411:19	411:19	9	==
LEAF_NODE	411:19	411:19	10	==
FIELD	411:22	411:22	9	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	411:22	411:22	10	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	411:44	411:44	7	)
STATEMENTS	412:8	417:8	7	
LEAF_NODE	412:8	412:8	8	{
STATEMENTS	413:12	414:12	8	
SIMPLE_DECL	413:12	413:30	9	uint16 compression ;
VAR_DECL	413:12	413:19	10	uint16 compression
TYPE	413:12	413:12	11	uint16
TYPE_NAME	413:12	413:12	12	uint16
LEAF_NODE	413:12	413:12	13	uint16
NAME	413:19	413:19	11	compression
LEAF_NODE	413:19	413:19	12	compression
LEAF_NODE	413:30	413:30	10	;
SELECTION	414:12	416:16	9	
KEYWORD	414:12	414:12	10	if
LEAF_NODE	414:12	414:12	11	if
LEAF_NODE	414:14	414:14	10	(
CONDITION	414:16	414:16	10	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX3
EXPR	414:16	414:16	11	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX3
OR	414:16	415:20	12	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX3
EXPR	414:16	414:16	13	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_EXPR	414:16	414:17	14	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_OPERATOR	414:16	414:16	15	!
LEAF_NODE	414:16	414:16	16	!
FUNCTION_CALL	414:17	414:67	15	TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
CALLEE	414:17	414:17	16	TIFFGetField
LEAF_NODE	414:17	414:17	17	TIFFGetField
LEAF_NODE	414:29	414:29	16	(
ARGUMENT	414:30	414:30	16	in
FIELD	414:30	414:30	17	in
LEAF_NODE	414:30	414:30	18	in
LEAF_NODE	414:32	414:32	16	,
ARGUMENT	414:34	414:34	16	TIFFTAG_COMPRESSION
FIELD	414:34	414:34	17	TIFFTAG_COMPRESSION
LEAF_NODE	414:34	414:34	18	TIFFTAG_COMPRESSION
LEAF_NODE	414:53	414:53	16	,
ARGUMENT	414:55	414:55	16	& compression
UNARY_EXPR	414:55	414:56	17	& compression
UNARY_OPERATOR	414:55	414:55	18	&
LEAF_NODE	414:55	414:55	19	&
FIELD	414:56	414:56	18	compression
LEAF_NODE	414:56	414:56	19	compression
LEAF_NODE	414:67	414:67	16	)
LEAF_NODE	414:69	414:69	13	||
EXPR	415:20	415:35	13	compression != COMPRESSION_CCITTFAX3
FIELD	415:20	415:20	14	compression
LEAF_NODE	415:20	415:20	15	compression
EQ_OPERATOR	415:32	415:32	14	!=
LEAF_NODE	415:32	415:32	15	!=
FIELD	415:35	415:35	14	COMPRESSION_CCITTFAX3
LEAF_NODE	415:35	415:35	15	COMPRESSION_CCITTFAX3
LEAF_NODE	415:57	415:57	10	)
STATEMENTS	416:16	416:16	10	
JUMP_STATEMENT	416:16	416:24	11	continue DESTINATION ;
KEYWORD	416:16	416:16	12	continue
LEAF_NODE	416:16	416:16	13	continue
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	416:24	416:24	12	;
LEAF_NODE	417:8	417:8	8	}
SELECTION	418:8	419:8	6	
KEYWORD	418:8	418:8	7	if
LEAF_NODE	418:8	418:8	8	if
LEAF_NODE	418:10	418:10	7	(
CONDITION	418:12	418:12	7	p -> tag == TIFFTAG_GROUP4OPTIONS
EXPR	418:12	418:22	8	p -> tag == TIFFTAG_GROUP4OPTIONS
FIELD	418:12	418:15	9	p -> tag
LEAF_NODE	418:12	418:12	10	p
LEAF_NODE	418:13	418:13	10	->
LEAF_NODE	418:15	418:15	10	tag
EQ_OPERATOR	418:19	418:19	9	==
LEAF_NODE	418:19	418:19	10	==
FIELD	418:22	418:22	9	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	418:22	418:22	10	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	418:44	418:44	7	)
STATEMENTS	419:8	424:8	7	
LEAF_NODE	419:8	419:8	8	{
STATEMENTS	420:12	421:12	8	
SIMPLE_DECL	420:12	420:30	9	uint16 compression ;
VAR_DECL	420:12	420:19	10	uint16 compression
TYPE	420:12	420:12	11	uint16
TYPE_NAME	420:12	420:12	12	uint16
LEAF_NODE	420:12	420:12	13	uint16
NAME	420:19	420:19	11	compression
LEAF_NODE	420:19	420:19	12	compression
LEAF_NODE	420:30	420:30	10	;
SELECTION	421:12	423:16	9	
KEYWORD	421:12	421:12	10	if
LEAF_NODE	421:12	421:12	11	if
LEAF_NODE	421:14	421:14	10	(
CONDITION	421:16	421:16	10	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX4
EXPR	421:16	421:16	11	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX4
OR	421:16	422:20	12	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression ) || compression != COMPRESSION_CCITTFAX4
EXPR	421:16	421:16	13	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_EXPR	421:16	421:17	14	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
UNARY_OPERATOR	421:16	421:16	15	!
LEAF_NODE	421:16	421:16	16	!
FUNCTION_CALL	421:17	421:67	15	TIFFGetField ( in , TIFFTAG_COMPRESSION , & compression )
CALLEE	421:17	421:17	16	TIFFGetField
LEAF_NODE	421:17	421:17	17	TIFFGetField
LEAF_NODE	421:29	421:29	16	(
ARGUMENT	421:30	421:30	16	in
FIELD	421:30	421:30	17	in
LEAF_NODE	421:30	421:30	18	in
LEAF_NODE	421:32	421:32	16	,
ARGUMENT	421:34	421:34	16	TIFFTAG_COMPRESSION
FIELD	421:34	421:34	17	TIFFTAG_COMPRESSION
LEAF_NODE	421:34	421:34	18	TIFFTAG_COMPRESSION
LEAF_NODE	421:53	421:53	16	,
ARGUMENT	421:55	421:55	16	& compression
UNARY_EXPR	421:55	421:56	17	& compression
UNARY_OPERATOR	421:55	421:55	18	&
LEAF_NODE	421:55	421:55	19	&
FIELD	421:56	421:56	18	compression
LEAF_NODE	421:56	421:56	19	compression
LEAF_NODE	421:67	421:67	16	)
LEAF_NODE	421:69	421:69	13	||
EXPR	422:20	422:35	13	compression != COMPRESSION_CCITTFAX4
FIELD	422:20	422:20	14	compression
LEAF_NODE	422:20	422:20	15	compression
EQ_OPERATOR	422:32	422:32	14	!=
LEAF_NODE	422:32	422:32	15	!=
FIELD	422:35	422:35	14	COMPRESSION_CCITTFAX4
LEAF_NODE	422:35	422:35	15	COMPRESSION_CCITTFAX4
LEAF_NODE	422:57	422:57	10	)
STATEMENTS	423:16	423:16	10	
JUMP_STATEMENT	423:16	423:24	11	continue DESTINATION ;
KEYWORD	423:16	423:16	12	continue
LEAF_NODE	423:16	423:16	13	continue
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	423:24	423:24	12	;
LEAF_NODE	424:8	424:8	8	}
EXPR_STATEMENT	425:8	425:49	6	cpTag ( in , out , p -> tag , p -> count , p -> type ) ;
EXPR	425:8	425:8	7	cpTag ( in , out , p -> tag , p -> count , p -> type )
FUNCTION_CALL	425:8	425:48	8	cpTag ( in , out , p -> tag , p -> count , p -> type )
CALLEE	425:8	425:8	9	cpTag
LEAF_NODE	425:8	425:8	10	cpTag
LEAF_NODE	425:13	425:13	9	(
ARGUMENT	425:14	425:14	9	in
FIELD	425:14	425:14	10	in
LEAF_NODE	425:14	425:14	11	in
LEAF_NODE	425:16	425:16	9	,
ARGUMENT	425:18	425:18	9	out
FIELD	425:18	425:18	10	out
LEAF_NODE	425:18	425:18	11	out
LEAF_NODE	425:21	425:21	9	,
ARGUMENT	425:23	425:23	9	p -> tag
FIELD	425:23	425:26	10	p -> tag
LEAF_NODE	425:23	425:23	11	p
LEAF_NODE	425:24	425:24	11	->
LEAF_NODE	425:26	425:26	11	tag
LEAF_NODE	425:29	425:29	9	,
ARGUMENT	425:31	425:31	9	p -> count
FIELD	425:31	425:34	10	p -> count
LEAF_NODE	425:31	425:31	11	p
LEAF_NODE	425:32	425:32	11	->
LEAF_NODE	425:34	425:34	11	count
LEAF_NODE	425:39	425:39	9	,
ARGUMENT	425:41	425:41	9	p -> type
FIELD	425:41	425:44	10	p -> type
LEAF_NODE	425:41	425:41	11	p
LEAF_NODE	425:42	425:42	11	->
LEAF_NODE	425:44	425:44	11	type
LEAF_NODE	425:48	425:48	9	)
LEAF_NODE	425:49	425:49	7	;
LEAF_NODE	426:4	426:4	5	}
LEAF_NODE	427:0	427:0	2	}
FUNCTION_DEF	450:0	461:0	1	
RETURN_TYPE	450:0	450:7	2	static void
LEAF_NODE	450:0	450:0	3	static
TYPE_NAME	450:7	450:7	3	void
LEAF_NODE	450:7	450:7	4	void
FUNCTION_NAME	451:0	451:0	2	usage
LEAF_NODE	451:0	451:0	3	usage
PARAMETER_LIST	451:5	451:10	2	( void )
LEAF_NODE	451:5	451:5	3	(
PARAMETER_DECL	451:6	451:6	3	void
LEAF_NODE	451:6	451:6	4	void
LEAF_NODE	451:10	451:10	3	)
LEAF_NODE	452:0	452:0	2	{
STATEMENTS	453:1	460:1	2	
SIMPLE_DECL	453:1	453:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	453:1	453:6	4	char [ BUFSIZ ] buf
TYPE	453:1	453:9	5	char [ BUFSIZ ]
TYPE_NAME	453:1	453:1	6	char
LEAF_NODE	453:1	453:1	7	char
TYPE_SUFFIX	453:9	453:16	6	[ BUFSIZ ]
LEAF_NODE	453:9	453:9	7	[
FIELD	453:10	453:10	7	BUFSIZ
LEAF_NODE	453:10	453:10	8	BUFSIZ
LEAF_NODE	453:16	453:16	7	]
NAME	453:6	453:6	5	buf
LEAF_NODE	453:6	453:6	6	buf
LEAF_NODE	453:17	453:17	4	;
SIMPLE_DECL	454:1	454:6	3	int i ;
VAR_DECL	454:1	454:5	4	int i
TYPE	454:1	454:1	5	int
TYPE_NAME	454:1	454:1	6	int
LEAF_NODE	454:1	454:1	7	int
NAME	454:5	454:5	5	i
LEAF_NODE	454:5	454:5	6	i
LEAF_NODE	454:6	454:6	4	;
EXPR_STATEMENT	456:1	456:20	3	setbuf ( stderr , buf ) ;
EXPR	456:1	456:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	456:1	456:19	5	setbuf ( stderr , buf )
CALLEE	456:1	456:1	6	setbuf
LEAF_NODE	456:1	456:1	7	setbuf
LEAF_NODE	456:7	456:7	6	(
ARGUMENT	456:8	456:8	6	stderr
FIELD	456:8	456:8	7	stderr
LEAF_NODE	456:8	456:8	8	stderr
LEAF_NODE	456:14	456:14	6	,
ARGUMENT	456:16	456:16	6	buf
FIELD	456:16	456:16	7	buf
LEAF_NODE	456:16	456:16	8	buf
LEAF_NODE	456:19	456:19	6	)
LEAF_NODE	456:20	456:20	4	;
EXPR_STATEMENT	457:8	457:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	457:8	457:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	457:8	457:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	457:8	457:8	6	fprintf
LEAF_NODE	457:8	457:8	7	fprintf
LEAF_NODE	457:15	457:15	6	(
ARGUMENT	457:16	457:16	6	stderr
FIELD	457:16	457:16	7	stderr
LEAF_NODE	457:16	457:16	8	stderr
LEAF_NODE	457:22	457:22	6	,
ARGUMENT	457:24	457:24	6	"%s\n\n"
FIELD	457:24	457:24	7	"%s\n\n"
LEAF_NODE	457:24	457:24	8	"%s\n\n"
LEAF_NODE	457:32	457:32	6	,
ARGUMENT	457:34	457:34	6	TIFFGetVersion ( )
FUNCTION_CALL	457:34	457:49	7	TIFFGetVersion ( )
CALLEE	457:34	457:34	8	TIFFGetVersion
LEAF_NODE	457:34	457:34	9	TIFFGetVersion
LEAF_NODE	457:48	457:48	8	(
LEAF_NODE	457:49	457:49	8	)
LEAF_NODE	457:50	457:50	6	)
LEAF_NODE	457:51	457:51	4	;
ITERATION	458:1	459:2	3	
KEYWORD	458:1	458:1	4	for
LEAF_NODE	458:1	458:1	5	for
LEAF_NODE	458:5	458:5	4	(
FOR_INIT	458:6	458:11	4	i = 0 ;
EXPR	458:6	458:6	5	i = 0
ASSIGN	458:6	458:10	6	i = 0
LVAL	458:6	458:6	7	i
FIELD	458:6	458:6	8	i
LEAF_NODE	458:6	458:6	9	i
ASSIGN_OP	458:8	458:8	7	=
LEAF_NODE	458:8	458:8	8	=
RVAL	458:10	458:10	7	0
FIELD	458:10	458:10	8	0
LEAF_NODE	458:10	458:10	9	0
LEAF_NODE	458:11	458:11	5	;
CONDITION	458:13	458:13	4	stuff [ i ] != NULL
EXPR	458:13	458:25	5	stuff [ i ] != NULL
FIELD	458:13	458:20	6	stuff [ i ]
LEAF_NODE	458:13	458:13	7	stuff
LEAF_NODE	458:18	458:18	7	[
EXPR	458:19	458:19	7	i
FIELD	458:19	458:19	8	i
LEAF_NODE	458:19	458:19	9	i
LEAF_NODE	458:20	458:20	7	]
EQ_OPERATOR	458:22	458:22	6	!=
LEAF_NODE	458:22	458:22	7	!=
FIELD	458:25	458:25	6	NULL
LEAF_NODE	458:25	458:25	7	NULL
LEAF_NODE	458:29	458:29	4	;
FOR_EXPR	458:31	458:31	4	i ++
EXPR	458:31	458:31	5	i ++
FIELD	458:31	458:32	6	i ++
LEAF_NODE	458:31	458:31	7	i
LEAF_NODE	458:32	458:32	7	++
LEAF_NODE	458:34	458:34	4	)
STATEMENTS	459:2	459:2	4	
EXPR_STATEMENT	459:2	459:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	459:2	459:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	459:2	459:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	459:2	459:2	8	fprintf
LEAF_NODE	459:2	459:2	9	fprintf
LEAF_NODE	459:9	459:9	8	(
ARGUMENT	459:10	459:10	8	stderr
FIELD	459:10	459:10	9	stderr
LEAF_NODE	459:10	459:10	10	stderr
LEAF_NODE	459:16	459:16	8	,
ARGUMENT	459:18	459:18	8	"%s\n"
FIELD	459:18	459:18	9	"%s\n"
LEAF_NODE	459:18	459:18	10	"%s\n"
LEAF_NODE	459:24	459:24	8	,
ARGUMENT	459:26	459:26	8	stuff [ i ]
FIELD	459:26	459:33	9	stuff [ i ]
LEAF_NODE	459:26	459:26	10	stuff
LEAF_NODE	459:31	459:31	10	[
EXPR	459:32	459:32	10	i
FIELD	459:32	459:32	11	i
LEAF_NODE	459:32	459:32	12	i
LEAF_NODE	459:33	459:33	10	]
LEAF_NODE	459:34	459:34	8	)
LEAF_NODE	459:35	459:35	6	;
EXPR_STATEMENT	460:1	460:9	3	exit ( - 1 ) ;
EXPR	460:1	460:1	4	exit ( - 1 )
FUNCTION_CALL	460:1	460:8	5	exit ( - 1 )
CALLEE	460:1	460:1	6	exit
LEAF_NODE	460:1	460:1	7	exit
LEAF_NODE	460:5	460:5	6	(
ARGUMENT	460:6	460:6	6	- 1
UNARY_EXPR	460:6	460:7	7	- 1
UNARY_OPERATOR	460:6	460:6	8	-
LEAF_NODE	460:6	460:6	9	-
FIELD	460:7	460:7	8	1
LEAF_NODE	460:7	460:7	9	1
LEAF_NODE	460:8	460:8	6	)
LEAF_NODE	460:9	460:9	4	;
LEAF_NODE	461:0	461:0	2	}
