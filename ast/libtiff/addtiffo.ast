SOURCE_FILE	41:0	326:0	0	
FUNCTION_DEF	41:0	125:0	1	
RETURN_TYPE	41:0	41:13	2	TIFFOvrCache *
TYPE_NAME	41:0	41:0	3	TIFFOvrCache
LEAF_NODE	41:0	41:0	4	TIFFOvrCache
LEAF_NODE	41:13	41:13	3	*
FUNCTION_NAME	41:14	41:14	2	TIFFCreateOvrCache
LEAF_NODE	41:14	41:14	3	TIFFCreateOvrCache
PARAMETER_LIST	41:32	41:65	2	( TIFF * hTIFF , toff_t nDirOffset )
LEAF_NODE	41:32	41:32	3	(
PARAMETER_DECL	41:34	41:40	3	TIFF * hTIFF
TYPE	41:34	41:39	4	TIFF *
TYPE_NAME	41:34	41:34	5	TIFF
LEAF_NODE	41:34	41:34	6	TIFF
POINTER	41:39	41:39	5	*
LEAF_NODE	41:39	41:39	6	*
NAME	41:40	41:40	4	hTIFF
LEAF_NODE	41:40	41:40	5	hTIFF
LEAF_NODE	41:45	41:45	3	,
PARAMETER_DECL	41:47	41:54	3	toff_t nDirOffset
TYPE	41:47	41:47	4	toff_t
TYPE_NAME	41:47	41:47	5	toff_t
LEAF_NODE	41:47	41:47	6	toff_t
NAME	41:54	41:54	4	nDirOffset
LEAF_NODE	41:54	41:54	5	nDirOffset
LEAF_NODE	41:65	41:65	3	)
LEAF_NODE	43:0	43:0	2	{
STATEMENTS	44:4	124:4	2	
SIMPLE_DECL	44:4	44:25	3	TIFFOvrCache * psCache ;
VAR_DECL	44:4	44:18	4	TIFFOvrCache * psCache
TYPE	44:4	44:17	5	TIFFOvrCache *
TYPE_NAME	44:4	44:4	6	TIFFOvrCache
LEAF_NODE	44:4	44:4	7	TIFFOvrCache
POINTER	44:17	44:17	6	*
LEAF_NODE	44:17	44:17	7	*
NAME	44:18	44:18	5	psCache
LEAF_NODE	44:18	44:18	6	psCache
LEAF_NODE	44:25	44:25	4	;
SIMPLE_DECL	45:4	45:26	3	toff_t nBaseDirOffset ;
VAR_DECL	45:4	45:12	4	toff_t nBaseDirOffset
TYPE	45:4	45:4	5	toff_t
TYPE_NAME	45:4	45:4	6	toff_t
LEAF_NODE	45:4	45:4	7	toff_t
NAME	45:12	45:12	5	nBaseDirOffset
LEAF_NODE	45:12	45:12	6	nBaseDirOffset
LEAF_NODE	45:26	45:26	4	;
EXPR_STATEMENT	47:4	47:64	3	psCache = ( TIFFOvrCache * ) _TIFFmalloc ( sizeof ( TIFFOvrCache ) ) ;
EXPR	47:4	47:4	4	psCache = ( TIFFOvrCache * ) _TIFFmalloc ( sizeof ( TIFFOvrCache ) )
ASSIGN	47:4	47:14	5	psCache = ( TIFFOvrCache * ) _TIFFmalloc ( sizeof ( TIFFOvrCache ) )
LVAL	47:4	47:4	6	psCache
FIELD	47:4	47:4	7	psCache
LEAF_NODE	47:4	47:4	8	psCache
ASSIGN_OP	47:12	47:12	6	=
LEAF_NODE	47:12	47:12	7	=
RVAL	47:14	47:31	6	( TIFFOvrCache * ) _TIFFmalloc ( sizeof ( TIFFOvrCache ) )
LEAF_NODE	47:14	47:14	7	(
TYPE_NAME	47:15	47:15	7	TIFFOvrCache
LEAF_NODE	47:15	47:15	8	TIFFOvrCache
LEAF_NODE	47:28	47:28	7	*
LEAF_NODE	47:29	47:29	7	)
FUNCTION_CALL	47:31	47:63	7	_TIFFmalloc ( sizeof ( TIFFOvrCache ) )
CALLEE	47:31	47:31	8	_TIFFmalloc
LEAF_NODE	47:31	47:31	9	_TIFFmalloc
LEAF_NODE	47:42	47:42	8	(
ARGUMENT	47:43	47:43	8	sizeof ( TIFFOvrCache )
FUNCTION_CALL	47:43	47:62	9	sizeof ( TIFFOvrCache )
CALLEE	47:43	47:43	10	sizeof
LEAF_NODE	47:43	47:43	11	sizeof
LEAF_NODE	47:49	47:49	10	(
ARGUMENT	47:50	47:50	10	TIFFOvrCache
FIELD	47:50	47:50	11	TIFFOvrCache
LEAF_NODE	47:50	47:50	12	TIFFOvrCache
LEAF_NODE	47:62	47:62	10	)
LEAF_NODE	47:63	47:63	8	)
LEAF_NODE	47:64	47:64	4	;
EXPR_STATEMENT	48:4	48:36	3	psCache -> nDirOffset = nDirOffset ;
EXPR	48:4	48:4	4	psCache -> nDirOffset = nDirOffset
ASSIGN	48:4	48:26	5	psCache -> nDirOffset = nDirOffset
LVAL	48:4	48:4	6	psCache -> nDirOffset
FIELD	48:4	48:13	7	psCache -> nDirOffset
LEAF_NODE	48:4	48:4	8	psCache
LEAF_NODE	48:11	48:11	8	->
LEAF_NODE	48:13	48:13	8	nDirOffset
ASSIGN_OP	48:24	48:24	6	=
LEAF_NODE	48:24	48:24	7	=
RVAL	48:26	48:26	6	nDirOffset
FIELD	48:26	48:26	7	nDirOffset
LEAF_NODE	48:26	48:26	8	nDirOffset
LEAF_NODE	48:36	48:36	4	;
EXPR_STATEMENT	49:4	49:26	3	psCache -> hTIFF = hTIFF ;
EXPR	49:4	49:4	4	psCache -> hTIFF = hTIFF
ASSIGN	49:4	49:21	5	psCache -> hTIFF = hTIFF
LVAL	49:4	49:4	6	psCache -> hTIFF
FIELD	49:4	49:13	7	psCache -> hTIFF
LEAF_NODE	49:4	49:4	8	psCache
LEAF_NODE	49:11	49:11	8	->
LEAF_NODE	49:13	49:13	8	hTIFF
ASSIGN_OP	49:19	49:19	6	=
LEAF_NODE	49:19	49:19	7	=
RVAL	49:21	49:21	6	hTIFF
FIELD	49:21	49:21	7	hTIFF
LEAF_NODE	49:21	49:21	8	hTIFF
LEAF_NODE	49:26	49:26	4	;
EXPR_STATEMENT	54:4	54:59	3	nBaseDirOffset = TIFFCurrentDirOffset ( psCache -> hTIFF ) ;
EXPR	54:4	54:4	4	nBaseDirOffset = TIFFCurrentDirOffset ( psCache -> hTIFF )
ASSIGN	54:4	54:21	5	nBaseDirOffset = TIFFCurrentDirOffset ( psCache -> hTIFF )
LVAL	54:4	54:4	6	nBaseDirOffset
FIELD	54:4	54:4	7	nBaseDirOffset
LEAF_NODE	54:4	54:4	8	nBaseDirOffset
ASSIGN_OP	54:19	54:19	6	=
LEAF_NODE	54:19	54:19	7	=
RVAL	54:21	54:21	6	TIFFCurrentDirOffset ( psCache -> hTIFF )
FUNCTION_CALL	54:21	54:58	7	TIFFCurrentDirOffset ( psCache -> hTIFF )
CALLEE	54:21	54:21	8	TIFFCurrentDirOffset
LEAF_NODE	54:21	54:21	9	TIFFCurrentDirOffset
LEAF_NODE	54:41	54:41	8	(
ARGUMENT	54:43	54:43	8	psCache -> hTIFF
FIELD	54:43	54:52	9	psCache -> hTIFF
LEAF_NODE	54:43	54:43	10	psCache
LEAF_NODE	54:50	54:50	10	->
LEAF_NODE	54:52	54:52	10	hTIFF
LEAF_NODE	54:58	54:58	8	)
LEAF_NODE	54:59	54:59	4	;
EXPR_STATEMENT	55:4	55:44	3	TIFFSetSubDirectory ( hTIFF , nDirOffset ) ;
EXPR	55:4	55:4	4	TIFFSetSubDirectory ( hTIFF , nDirOffset )
FUNCTION_CALL	55:4	55:43	5	TIFFSetSubDirectory ( hTIFF , nDirOffset )
CALLEE	55:4	55:4	6	TIFFSetSubDirectory
LEAF_NODE	55:4	55:4	7	TIFFSetSubDirectory
LEAF_NODE	55:23	55:23	6	(
ARGUMENT	55:25	55:25	6	hTIFF
FIELD	55:25	55:25	7	hTIFF
LEAF_NODE	55:25	55:25	8	hTIFF
LEAF_NODE	55:30	55:30	6	,
ARGUMENT	55:32	55:32	6	nDirOffset
FIELD	55:32	55:32	7	nDirOffset
LEAF_NODE	55:32	55:32	8	nDirOffset
LEAF_NODE	55:43	55:43	6	)
LEAF_NODE	55:44	55:44	4	;
EXPR_STATEMENT	57:4	57:65	3	TIFFGetField ( hTIFF , TIFFTAG_IMAGEWIDTH , & ( psCache -> nXSize ) ) ;
EXPR	57:4	57:4	4	TIFFGetField ( hTIFF , TIFFTAG_IMAGEWIDTH , & ( psCache -> nXSize ) )
FUNCTION_CALL	57:4	57:64	5	TIFFGetField ( hTIFF , TIFFTAG_IMAGEWIDTH , & ( psCache -> nXSize ) )
CALLEE	57:4	57:4	6	TIFFGetField
LEAF_NODE	57:4	57:4	7	TIFFGetField
LEAF_NODE	57:16	57:16	6	(
ARGUMENT	57:18	57:18	6	hTIFF
FIELD	57:18	57:18	7	hTIFF
LEAF_NODE	57:18	57:18	8	hTIFF
LEAF_NODE	57:23	57:23	6	,
ARGUMENT	57:25	57:25	6	TIFFTAG_IMAGEWIDTH
FIELD	57:25	57:25	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	57:25	57:25	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	57:43	57:43	6	,
ARGUMENT	57:45	57:45	6	& ( psCache -> nXSize )
UNARY_EXPR	57:45	57:62	7	& ( psCache -> nXSize )
UNARY_OPERATOR	57:45	57:45	8	&
LEAF_NODE	57:45	57:45	9	&
LEAF_NODE	57:46	57:46	8	(
FIELD	57:47	57:56	8	psCache -> nXSize
LEAF_NODE	57:47	57:47	9	psCache
LEAF_NODE	57:54	57:54	9	->
LEAF_NODE	57:56	57:56	9	nXSize
LEAF_NODE	57:62	57:62	8	)
LEAF_NODE	57:64	57:64	6	)
LEAF_NODE	57:65	57:65	4	;
EXPR_STATEMENT	58:4	58:66	3	TIFFGetField ( hTIFF , TIFFTAG_IMAGELENGTH , & ( psCache -> nYSize ) ) ;
EXPR	58:4	58:4	4	TIFFGetField ( hTIFF , TIFFTAG_IMAGELENGTH , & ( psCache -> nYSize ) )
FUNCTION_CALL	58:4	58:65	5	TIFFGetField ( hTIFF , TIFFTAG_IMAGELENGTH , & ( psCache -> nYSize ) )
CALLEE	58:4	58:4	6	TIFFGetField
LEAF_NODE	58:4	58:4	7	TIFFGetField
LEAF_NODE	58:16	58:16	6	(
ARGUMENT	58:18	58:18	6	hTIFF
FIELD	58:18	58:18	7	hTIFF
LEAF_NODE	58:18	58:18	8	hTIFF
LEAF_NODE	58:23	58:23	6	,
ARGUMENT	58:25	58:25	6	TIFFTAG_IMAGELENGTH
FIELD	58:25	58:25	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	58:25	58:25	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	58:44	58:44	6	,
ARGUMENT	58:46	58:46	6	& ( psCache -> nYSize )
UNARY_EXPR	58:46	58:63	7	& ( psCache -> nYSize )
UNARY_OPERATOR	58:46	58:46	8	&
LEAF_NODE	58:46	58:46	9	&
LEAF_NODE	58:47	58:47	8	(
FIELD	58:48	58:57	8	psCache -> nYSize
LEAF_NODE	58:48	58:48	9	psCache
LEAF_NODE	58:55	58:55	9	->
LEAF_NODE	58:57	58:57	9	nYSize
LEAF_NODE	58:63	58:63	8	)
LEAF_NODE	58:65	58:65	6	)
LEAF_NODE	58:66	58:66	4	;
EXPR_STATEMENT	60:4	60:75	3	TIFFGetField ( hTIFF , TIFFTAG_BITSPERSAMPLE , & ( psCache -> nBitsPerPixel ) ) ;
EXPR	60:4	60:4	4	TIFFGetField ( hTIFF , TIFFTAG_BITSPERSAMPLE , & ( psCache -> nBitsPerPixel ) )
FUNCTION_CALL	60:4	60:74	5	TIFFGetField ( hTIFF , TIFFTAG_BITSPERSAMPLE , & ( psCache -> nBitsPerPixel ) )
CALLEE	60:4	60:4	6	TIFFGetField
LEAF_NODE	60:4	60:4	7	TIFFGetField
LEAF_NODE	60:16	60:16	6	(
ARGUMENT	60:18	60:18	6	hTIFF
FIELD	60:18	60:18	7	hTIFF
LEAF_NODE	60:18	60:18	8	hTIFF
LEAF_NODE	60:23	60:23	6	,
ARGUMENT	60:25	60:25	6	TIFFTAG_BITSPERSAMPLE
FIELD	60:25	60:25	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	60:25	60:25	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	60:46	60:46	6	,
ARGUMENT	60:48	60:48	6	& ( psCache -> nBitsPerPixel )
UNARY_EXPR	60:48	60:72	7	& ( psCache -> nBitsPerPixel )
UNARY_OPERATOR	60:48	60:48	8	&
LEAF_NODE	60:48	60:48	9	&
LEAF_NODE	60:49	60:49	8	(
FIELD	60:50	60:59	8	psCache -> nBitsPerPixel
LEAF_NODE	60:50	60:50	9	psCache
LEAF_NODE	60:57	60:57	9	->
LEAF_NODE	60:59	60:59	9	nBitsPerPixel
LEAF_NODE	60:72	60:72	8	)
LEAF_NODE	60:74	60:74	6	)
LEAF_NODE	60:75	60:75	4	;
EXPR_STATEMENT	61:4	61:72	3	TIFFGetField ( hTIFF , TIFFTAG_SAMPLESPERPIXEL , & ( psCache -> nSamples ) ) ;
EXPR	61:4	61:4	4	TIFFGetField ( hTIFF , TIFFTAG_SAMPLESPERPIXEL , & ( psCache -> nSamples ) )
FUNCTION_CALL	61:4	61:71	5	TIFFGetField ( hTIFF , TIFFTAG_SAMPLESPERPIXEL , & ( psCache -> nSamples ) )
CALLEE	61:4	61:4	6	TIFFGetField
LEAF_NODE	61:4	61:4	7	TIFFGetField
LEAF_NODE	61:16	61:16	6	(
ARGUMENT	61:18	61:18	6	hTIFF
FIELD	61:18	61:18	7	hTIFF
LEAF_NODE	61:18	61:18	8	hTIFF
LEAF_NODE	61:23	61:23	6	,
ARGUMENT	61:25	61:25	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	61:25	61:25	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	61:25	61:25	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	61:48	61:48	6	,
ARGUMENT	61:50	61:50	6	& ( psCache -> nSamples )
UNARY_EXPR	61:50	61:69	7	& ( psCache -> nSamples )
UNARY_OPERATOR	61:50	61:50	8	&
LEAF_NODE	61:50	61:50	9	&
LEAF_NODE	61:51	61:51	8	(
FIELD	61:52	61:61	8	psCache -> nSamples
LEAF_NODE	61:52	61:52	9	psCache
LEAF_NODE	61:59	61:59	9	->
LEAF_NODE	61:61	61:61	9	nSamples
LEAF_NODE	61:69	61:69	8	)
LEAF_NODE	61:71	61:71	6	)
LEAF_NODE	61:72	61:72	4	;
EXPR_STATEMENT	62:4	62:74	3	TIFFGetField ( hTIFF , TIFFTAG_PLANARCONFIG , & ( psCache -> nPlanarConfig ) ) ;
EXPR	62:4	62:4	4	TIFFGetField ( hTIFF , TIFFTAG_PLANARCONFIG , & ( psCache -> nPlanarConfig ) )
FUNCTION_CALL	62:4	62:73	5	TIFFGetField ( hTIFF , TIFFTAG_PLANARCONFIG , & ( psCache -> nPlanarConfig ) )
CALLEE	62:4	62:4	6	TIFFGetField
LEAF_NODE	62:4	62:4	7	TIFFGetField
LEAF_NODE	62:16	62:16	6	(
ARGUMENT	62:18	62:18	6	hTIFF
FIELD	62:18	62:18	7	hTIFF
LEAF_NODE	62:18	62:18	8	hTIFF
LEAF_NODE	62:23	62:23	6	,
ARGUMENT	62:25	62:25	6	TIFFTAG_PLANARCONFIG
FIELD	62:25	62:25	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	62:25	62:25	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	62:45	62:45	6	,
ARGUMENT	62:47	62:47	6	& ( psCache -> nPlanarConfig )
UNARY_EXPR	62:47	62:71	7	& ( psCache -> nPlanarConfig )
UNARY_OPERATOR	62:47	62:47	8	&
LEAF_NODE	62:47	62:47	9	&
LEAF_NODE	62:48	62:48	8	(
FIELD	62:49	62:58	8	psCache -> nPlanarConfig
LEAF_NODE	62:49	62:49	9	psCache
LEAF_NODE	62:56	62:56	9	->
LEAF_NODE	62:58	62:58	9	nPlanarConfig
LEAF_NODE	62:71	62:71	8	)
LEAF_NODE	62:73	62:73	6	)
LEAF_NODE	62:74	62:74	4	;
SELECTION	64:4	65:4	3	
KEYWORD	64:4	64:4	4	if
LEAF_NODE	64:4	64:4	5	if
LEAF_NODE	64:6	64:6	4	(
CONDITION	64:8	64:8	4	! TIFFIsTiled ( hTIFF )
EXPR	64:8	64:8	5	! TIFFIsTiled ( hTIFF )
UNARY_EXPR	64:8	64:9	6	! TIFFIsTiled ( hTIFF )
UNARY_OPERATOR	64:8	64:8	7	!
LEAF_NODE	64:8	64:8	8	!
FUNCTION_CALL	64:9	64:28	7	TIFFIsTiled ( hTIFF )
CALLEE	64:9	64:9	8	TIFFIsTiled
LEAF_NODE	64:9	64:9	9	TIFFIsTiled
LEAF_NODE	64:20	64:20	8	(
ARGUMENT	64:22	64:22	8	hTIFF
FIELD	64:22	64:22	9	hTIFF
LEAF_NODE	64:22	64:22	10	hTIFF
LEAF_NODE	64:28	64:28	8	)
LEAF_NODE	64:30	64:30	4	)
STATEMENTS	65:4	70:4	4	
LEAF_NODE	65:4	65:4	5	{
STATEMENTS	66:8	69:8	5	
EXPR_STATEMENT	66:8	66:76	6	TIFFGetField ( hTIFF , TIFFTAG_ROWSPERSTRIP , & ( psCache -> nBlockYSize ) ) ;
EXPR	66:8	66:8	7	TIFFGetField ( hTIFF , TIFFTAG_ROWSPERSTRIP , & ( psCache -> nBlockYSize ) )
FUNCTION_CALL	66:8	66:75	8	TIFFGetField ( hTIFF , TIFFTAG_ROWSPERSTRIP , & ( psCache -> nBlockYSize ) )
CALLEE	66:8	66:8	9	TIFFGetField
LEAF_NODE	66:8	66:8	10	TIFFGetField
LEAF_NODE	66:20	66:20	9	(
ARGUMENT	66:22	66:22	9	hTIFF
FIELD	66:22	66:22	10	hTIFF
LEAF_NODE	66:22	66:22	11	hTIFF
LEAF_NODE	66:27	66:27	9	,
ARGUMENT	66:29	66:29	9	TIFFTAG_ROWSPERSTRIP
FIELD	66:29	66:29	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	66:29	66:29	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	66:49	66:49	9	,
ARGUMENT	66:51	66:51	9	& ( psCache -> nBlockYSize )
UNARY_EXPR	66:51	66:73	10	& ( psCache -> nBlockYSize )
UNARY_OPERATOR	66:51	66:51	11	&
LEAF_NODE	66:51	66:51	12	&
LEAF_NODE	66:52	66:52	11	(
FIELD	66:53	66:62	11	psCache -> nBlockYSize
LEAF_NODE	66:53	66:53	12	psCache
LEAF_NODE	66:60	66:60	12	->
LEAF_NODE	66:62	66:62	12	nBlockYSize
LEAF_NODE	66:73	66:73	11	)
LEAF_NODE	66:75	66:75	9	)
LEAF_NODE	66:76	66:76	7	;
EXPR_STATEMENT	67:8	67:46	6	psCache -> nBlockXSize = psCache -> nXSize ;
EXPR	67:8	67:8	7	psCache -> nBlockXSize = psCache -> nXSize
ASSIGN	67:8	67:31	8	psCache -> nBlockXSize = psCache -> nXSize
LVAL	67:8	67:8	9	psCache -> nBlockXSize
FIELD	67:8	67:17	10	psCache -> nBlockXSize
LEAF_NODE	67:8	67:8	11	psCache
LEAF_NODE	67:15	67:15	11	->
LEAF_NODE	67:17	67:17	11	nBlockXSize
ASSIGN_OP	67:29	67:29	9	=
LEAF_NODE	67:29	67:29	10	=
RVAL	67:31	67:31	9	psCache -> nXSize
FIELD	67:31	67:40	10	psCache -> nXSize
LEAF_NODE	67:31	67:31	11	psCache
LEAF_NODE	67:38	67:38	11	->
LEAF_NODE	67:40	67:40	11	nXSize
LEAF_NODE	67:46	67:46	7	;
EXPR_STATEMENT	68:8	68:54	6	psCache -> nBytesPerBlock = TIFFStripSize ( hTIFF ) ;
EXPR	68:8	68:8	7	psCache -> nBytesPerBlock = TIFFStripSize ( hTIFF )
ASSIGN	68:8	68:34	8	psCache -> nBytesPerBlock = TIFFStripSize ( hTIFF )
LVAL	68:8	68:8	9	psCache -> nBytesPerBlock
FIELD	68:8	68:17	10	psCache -> nBytesPerBlock
LEAF_NODE	68:8	68:8	11	psCache
LEAF_NODE	68:15	68:15	11	->
LEAF_NODE	68:17	68:17	11	nBytesPerBlock
ASSIGN_OP	68:32	68:32	9	=
LEAF_NODE	68:32	68:32	10	=
RVAL	68:34	68:34	9	TIFFStripSize ( hTIFF )
FUNCTION_CALL	68:34	68:53	10	TIFFStripSize ( hTIFF )
CALLEE	68:34	68:34	11	TIFFStripSize
LEAF_NODE	68:34	68:34	12	TIFFStripSize
LEAF_NODE	68:47	68:47	11	(
ARGUMENT	68:48	68:48	11	hTIFF
FIELD	68:48	68:48	12	hTIFF
LEAF_NODE	68:48	68:48	13	hTIFF
LEAF_NODE	68:53	68:53	11	)
LEAF_NODE	68:54	68:54	7	;
EXPR_STATEMENT	69:8	69:31	6	psCache -> bTiled = FALSE ;
EXPR	69:8	69:8	7	psCache -> bTiled = FALSE
ASSIGN	69:8	69:26	8	psCache -> bTiled = FALSE
LVAL	69:8	69:8	9	psCache -> bTiled
FIELD	69:8	69:17	10	psCache -> bTiled
LEAF_NODE	69:8	69:8	11	psCache
LEAF_NODE	69:15	69:15	11	->
LEAF_NODE	69:17	69:17	11	bTiled
ASSIGN_OP	69:24	69:24	9	=
LEAF_NODE	69:24	69:24	10	=
RVAL	69:26	69:26	9	FALSE
FIELD	69:26	69:26	10	FALSE
LEAF_NODE	69:26	69:26	11	FALSE
LEAF_NODE	69:31	69:31	7	;
LEAF_NODE	70:4	70:4	5	}
SELECTION	71:4	72:4	3	
KEYWORD	71:4	71:4	4	else
LEAF_NODE	71:4	71:4	5	else
STATEMENTS	72:4	77:4	4	
LEAF_NODE	72:4	72:4	5	{
STATEMENTS	73:8	76:8	5	
EXPR_STATEMENT	73:8	73:73	6	TIFFGetField ( hTIFF , TIFFTAG_TILEWIDTH , & ( psCache -> nBlockXSize ) ) ;
EXPR	73:8	73:8	7	TIFFGetField ( hTIFF , TIFFTAG_TILEWIDTH , & ( psCache -> nBlockXSize ) )
FUNCTION_CALL	73:8	73:72	8	TIFFGetField ( hTIFF , TIFFTAG_TILEWIDTH , & ( psCache -> nBlockXSize ) )
CALLEE	73:8	73:8	9	TIFFGetField
LEAF_NODE	73:8	73:8	10	TIFFGetField
LEAF_NODE	73:20	73:20	9	(
ARGUMENT	73:22	73:22	9	hTIFF
FIELD	73:22	73:22	10	hTIFF
LEAF_NODE	73:22	73:22	11	hTIFF
LEAF_NODE	73:27	73:27	9	,
ARGUMENT	73:29	73:29	9	TIFFTAG_TILEWIDTH
FIELD	73:29	73:29	10	TIFFTAG_TILEWIDTH
LEAF_NODE	73:29	73:29	11	TIFFTAG_TILEWIDTH
LEAF_NODE	73:46	73:46	9	,
ARGUMENT	73:48	73:48	9	& ( psCache -> nBlockXSize )
UNARY_EXPR	73:48	73:70	10	& ( psCache -> nBlockXSize )
UNARY_OPERATOR	73:48	73:48	11	&
LEAF_NODE	73:48	73:48	12	&
LEAF_NODE	73:49	73:49	11	(
FIELD	73:50	73:59	11	psCache -> nBlockXSize
LEAF_NODE	73:50	73:50	12	psCache
LEAF_NODE	73:57	73:57	12	->
LEAF_NODE	73:59	73:59	12	nBlockXSize
LEAF_NODE	73:70	73:70	11	)
LEAF_NODE	73:72	73:72	9	)
LEAF_NODE	73:73	73:73	7	;
EXPR_STATEMENT	74:8	74:74	6	TIFFGetField ( hTIFF , TIFFTAG_TILELENGTH , & ( psCache -> nBlockYSize ) ) ;
EXPR	74:8	74:8	7	TIFFGetField ( hTIFF , TIFFTAG_TILELENGTH , & ( psCache -> nBlockYSize ) )
FUNCTION_CALL	74:8	74:73	8	TIFFGetField ( hTIFF , TIFFTAG_TILELENGTH , & ( psCache -> nBlockYSize ) )
CALLEE	74:8	74:8	9	TIFFGetField
LEAF_NODE	74:8	74:8	10	TIFFGetField
LEAF_NODE	74:20	74:20	9	(
ARGUMENT	74:22	74:22	9	hTIFF
FIELD	74:22	74:22	10	hTIFF
LEAF_NODE	74:22	74:22	11	hTIFF
LEAF_NODE	74:27	74:27	9	,
ARGUMENT	74:29	74:29	9	TIFFTAG_TILELENGTH
FIELD	74:29	74:29	10	TIFFTAG_TILELENGTH
LEAF_NODE	74:29	74:29	11	TIFFTAG_TILELENGTH
LEAF_NODE	74:47	74:47	9	,
ARGUMENT	74:49	74:49	9	& ( psCache -> nBlockYSize )
UNARY_EXPR	74:49	74:71	10	& ( psCache -> nBlockYSize )
UNARY_OPERATOR	74:49	74:49	11	&
LEAF_NODE	74:49	74:49	12	&
LEAF_NODE	74:50	74:50	11	(
FIELD	74:51	74:60	11	psCache -> nBlockYSize
LEAF_NODE	74:51	74:51	12	psCache
LEAF_NODE	74:58	74:58	12	->
LEAF_NODE	74:60	74:60	12	nBlockYSize
LEAF_NODE	74:71	74:71	11	)
LEAF_NODE	74:73	74:73	9	)
LEAF_NODE	74:74	74:74	7	;
EXPR_STATEMENT	75:8	75:53	6	psCache -> nBytesPerBlock = TIFFTileSize ( hTIFF ) ;
EXPR	75:8	75:8	7	psCache -> nBytesPerBlock = TIFFTileSize ( hTIFF )
ASSIGN	75:8	75:34	8	psCache -> nBytesPerBlock = TIFFTileSize ( hTIFF )
LVAL	75:8	75:8	9	psCache -> nBytesPerBlock
FIELD	75:8	75:17	10	psCache -> nBytesPerBlock
LEAF_NODE	75:8	75:8	11	psCache
LEAF_NODE	75:15	75:15	11	->
LEAF_NODE	75:17	75:17	11	nBytesPerBlock
ASSIGN_OP	75:32	75:32	9	=
LEAF_NODE	75:32	75:32	10	=
RVAL	75:34	75:34	9	TIFFTileSize ( hTIFF )
FUNCTION_CALL	75:34	75:52	10	TIFFTileSize ( hTIFF )
CALLEE	75:34	75:34	11	TIFFTileSize
LEAF_NODE	75:34	75:34	12	TIFFTileSize
LEAF_NODE	75:46	75:46	11	(
ARGUMENT	75:47	75:47	11	hTIFF
FIELD	75:47	75:47	12	hTIFF
LEAF_NODE	75:47	75:47	13	hTIFF
LEAF_NODE	75:52	75:52	11	)
LEAF_NODE	75:53	75:53	7	;
EXPR_STATEMENT	76:8	76:30	6	psCache -> bTiled = TRUE ;
EXPR	76:8	76:8	7	psCache -> bTiled = TRUE
ASSIGN	76:8	76:26	8	psCache -> bTiled = TRUE
LVAL	76:8	76:8	9	psCache -> bTiled
FIELD	76:8	76:17	10	psCache -> bTiled
LEAF_NODE	76:8	76:8	11	psCache
LEAF_NODE	76:15	76:15	11	->
LEAF_NODE	76:17	76:17	11	bTiled
ASSIGN_OP	76:24	76:24	9	=
LEAF_NODE	76:24	76:24	10	=
RVAL	76:26	76:26	9	TRUE
FIELD	76:26	76:26	10	TRUE
LEAF_NODE	76:26	76:26	11	TRUE
LEAF_NODE	76:30	76:30	7	;
LEAF_NODE	77:4	77:4	5	}
EXPR_STATEMENT	83:4	84:32	3	psCache -> nBlocksPerRow = ( psCache -> nXSize + psCache -> nBlockXSize - 1 ) / psCache -> nBlockXSize ;
EXPR	83:4	83:4	4	psCache -> nBlocksPerRow = ( psCache -> nXSize + psCache -> nBlockXSize - 1 ) / psCache -> nBlockXSize
ASSIGN	83:4	83:29	5	psCache -> nBlocksPerRow = ( psCache -> nXSize + psCache -> nBlockXSize - 1 ) / psCache -> nBlockXSize
LVAL	83:4	83:4	6	psCache -> nBlocksPerRow
FIELD	83:4	83:13	7	psCache -> nBlocksPerRow
LEAF_NODE	83:4	83:4	8	psCache
LEAF_NODE	83:11	83:11	8	->
LEAF_NODE	83:13	83:13	8	nBlocksPerRow
ASSIGN_OP	83:27	83:27	6	=
LEAF_NODE	83:27	83:27	7	=
RVAL	83:29	84:12	6	( psCache -> nXSize + psCache -> nBlockXSize - 1 ) / psCache -> nBlockXSize
LEAF_NODE	83:29	83:29	7	(
FIELD	83:30	83:39	7	psCache -> nXSize
LEAF_NODE	83:30	83:30	8	psCache
LEAF_NODE	83:37	83:37	8	->
LEAF_NODE	83:39	83:39	8	nXSize
LEAF_NODE	83:46	83:46	7	+
FIELD	83:48	83:57	7	psCache -> nBlockXSize
LEAF_NODE	83:48	83:48	8	psCache
LEAF_NODE	83:55	83:55	8	->
LEAF_NODE	83:57	83:57	8	nBlockXSize
LEAF_NODE	83:69	83:69	7	-
FIELD	83:71	83:71	7	1
LEAF_NODE	83:71	83:71	8	1
LEAF_NODE	83:72	83:72	7	)
LEAF_NODE	84:10	84:10	7	/
FIELD	84:12	84:21	7	psCache -> nBlockXSize
LEAF_NODE	84:12	84:12	8	psCache
LEAF_NODE	84:19	84:19	8	->
LEAF_NODE	84:21	84:21	8	nBlockXSize
LEAF_NODE	84:32	84:32	4	;
EXPR_STATEMENT	85:4	86:32	3	psCache -> nBlocksPerColumn = ( psCache -> nYSize + psCache -> nBlockYSize - 1 ) / psCache -> nBlockYSize ;
EXPR	85:4	85:4	4	psCache -> nBlocksPerColumn = ( psCache -> nYSize + psCache -> nBlockYSize - 1 ) / psCache -> nBlockYSize
ASSIGN	85:4	85:32	5	psCache -> nBlocksPerColumn = ( psCache -> nYSize + psCache -> nBlockYSize - 1 ) / psCache -> nBlockYSize
LVAL	85:4	85:4	6	psCache -> nBlocksPerColumn
FIELD	85:4	85:13	7	psCache -> nBlocksPerColumn
LEAF_NODE	85:4	85:4	8	psCache
LEAF_NODE	85:11	85:11	8	->
LEAF_NODE	85:13	85:13	8	nBlocksPerColumn
ASSIGN_OP	85:30	85:30	6	=
LEAF_NODE	85:30	85:30	7	=
RVAL	85:32	86:12	6	( psCache -> nYSize + psCache -> nBlockYSize - 1 ) / psCache -> nBlockYSize
LEAF_NODE	85:32	85:32	7	(
FIELD	85:33	85:42	7	psCache -> nYSize
LEAF_NODE	85:33	85:33	8	psCache
LEAF_NODE	85:40	85:40	8	->
LEAF_NODE	85:42	85:42	8	nYSize
LEAF_NODE	85:49	85:49	7	+
FIELD	85:51	85:60	7	psCache -> nBlockYSize
LEAF_NODE	85:51	85:51	8	psCache
LEAF_NODE	85:58	85:58	8	->
LEAF_NODE	85:60	85:60	8	nBlockYSize
LEAF_NODE	85:72	85:72	7	-
FIELD	85:74	85:74	7	1
LEAF_NODE	85:74	85:74	8	1
LEAF_NODE	85:75	85:75	7	)
LEAF_NODE	86:10	86:10	7	/
FIELD	86:12	86:21	7	psCache -> nBlockYSize
LEAF_NODE	86:12	86:12	8	psCache
LEAF_NODE	86:19	86:19	8	->
LEAF_NODE	86:21	86:21	8	nBlockYSize
LEAF_NODE	86:32	86:32	4	;
SELECTION	88:4	89:8	3	
KEYWORD	88:4	88:4	4	if
LEAF_NODE	88:4	88:4	5	if
LEAF_NODE	88:7	88:7	4	(
CONDITION	88:8	88:8	4	psCache -> nPlanarConfig == PLANARCONFIG_SEPARATE
EXPR	88:8	88:34	5	psCache -> nPlanarConfig == PLANARCONFIG_SEPARATE
FIELD	88:8	88:17	6	psCache -> nPlanarConfig
LEAF_NODE	88:8	88:8	7	psCache
LEAF_NODE	88:15	88:15	7	->
LEAF_NODE	88:17	88:17	7	nPlanarConfig
EQ_OPERATOR	88:31	88:31	6	==
LEAF_NODE	88:31	88:31	7	==
FIELD	88:34	88:34	6	PLANARCONFIG_SEPARATE
LEAF_NODE	88:34	88:34	7	PLANARCONFIG_SEPARATE
LEAF_NODE	88:55	88:55	4	)
STATEMENTS	89:8	89:8	4	
LEAF_NODE	89:8	89:8	5	psCache
LEAF_NODE	89:15	89:15	3	->
LEAF_NODE	89:17	89:17	3	nBytesPerRow
LEAF_NODE	89:30	89:30	3	=
LEAF_NODE	89:32	89:32	3	psCache
LEAF_NODE	89:39	89:39	3	->
LEAF_NODE	89:41	89:41	3	nBytesPerBlock
EXPR_STATEMENT	90:12	90:56	3	* psCache -> nBlocksPerRow * psCache -> nSamples ;
EXPR	90:12	90:39	4	* psCache -> nBlocksPerRow * psCache -> nSamples
UNARY_EXPR	90:12	90:14	5	* psCache -> nBlocksPerRow
UNARY_OPERATOR	90:12	90:12	6	*
LEAF_NODE	90:12	90:12	7	*
FIELD	90:14	90:23	6	psCache -> nBlocksPerRow
LEAF_NODE	90:14	90:14	7	psCache
LEAF_NODE	90:21	90:21	7	->
LEAF_NODE	90:23	90:23	7	nBlocksPerRow
LEAF_NODE	90:37	90:37	5	*
FIELD	90:39	90:48	5	psCache -> nSamples
LEAF_NODE	90:39	90:39	6	psCache
LEAF_NODE	90:46	90:46	6	->
LEAF_NODE	90:48	90:48	6	nSamples
LEAF_NODE	90:56	90:56	4	;
SELECTION	91:4	92:8	3	
KEYWORD	91:4	91:4	4	else
LEAF_NODE	91:4	91:4	5	else
STATEMENTS	92:8	92:8	4	
EXPR_STATEMENT	92:8	93:60	5	psCache -> nBytesPerRow = psCache -> nBytesPerBlock * psCache -> nBlocksPerRow ;
EXPR	92:8	92:8	6	psCache -> nBytesPerRow = psCache -> nBytesPerBlock * psCache -> nBlocksPerRow
ASSIGN	92:8	93:12	7	psCache -> nBytesPerRow = psCache -> nBytesPerBlock * psCache -> nBlocksPerRow
LVAL	92:8	92:8	8	psCache -> nBytesPerRow
FIELD	92:8	92:17	9	psCache -> nBytesPerRow
LEAF_NODE	92:8	92:8	10	psCache
LEAF_NODE	92:15	92:15	10	->
LEAF_NODE	92:17	92:17	10	nBytesPerRow
ASSIGN_OP	92:30	92:30	8	=
LEAF_NODE	92:30	92:30	9	=
RVAL	93:12	93:38	8	psCache -> nBytesPerBlock * psCache -> nBlocksPerRow
FIELD	93:12	93:21	9	psCache -> nBytesPerBlock
LEAF_NODE	93:12	93:12	10	psCache
LEAF_NODE	93:19	93:19	10	->
LEAF_NODE	93:21	93:21	10	nBytesPerBlock
LEAF_NODE	93:36	93:36	9	*
FIELD	93:38	93:47	9	psCache -> nBlocksPerRow
LEAF_NODE	93:38	93:38	10	psCache
LEAF_NODE	93:45	93:45	10	->
LEAF_NODE	93:47	93:47	10	nBlocksPerRow
LEAF_NODE	93:60	93:60	6	;
EXPR_STATEMENT	100:4	101:60	3	psCache -> pabyRow1Blocks = ( unsigned char * ) _TIFFmalloc ( psCache -> nBytesPerRow ) ;
EXPR	100:4	100:4	4	psCache -> pabyRow1Blocks = ( unsigned char * ) _TIFFmalloc ( psCache -> nBytesPerRow )
ASSIGN	100:4	101:8	5	psCache -> pabyRow1Blocks = ( unsigned char * ) _TIFFmalloc ( psCache -> nBytesPerRow )
LVAL	100:4	100:4	6	psCache -> pabyRow1Blocks
FIELD	100:4	100:13	7	psCache -> pabyRow1Blocks
LEAF_NODE	100:4	100:4	8	psCache
LEAF_NODE	100:11	100:11	8	->
LEAF_NODE	100:13	100:13	8	pabyRow1Blocks
ASSIGN_OP	100:28	100:28	6	=
LEAF_NODE	100:28	100:28	7	=
RVAL	101:8	101:26	6	( unsigned char * ) _TIFFmalloc ( psCache -> nBytesPerRow )
LEAF_NODE	101:8	101:8	7	(
TYPE_NAME	101:9	101:18	7	unsigned char
LEAF_NODE	101:9	101:9	8	unsigned
LEAF_NODE	101:18	101:18	8	char
LEAF_NODE	101:23	101:23	7	*
LEAF_NODE	101:24	101:24	7	)
FUNCTION_CALL	101:26	101:59	7	_TIFFmalloc ( psCache -> nBytesPerRow )
CALLEE	101:26	101:26	8	_TIFFmalloc
LEAF_NODE	101:26	101:26	9	_TIFFmalloc
LEAF_NODE	101:37	101:37	8	(
ARGUMENT	101:38	101:38	8	psCache -> nBytesPerRow
FIELD	101:38	101:47	9	psCache -> nBytesPerRow
LEAF_NODE	101:38	101:38	10	psCache
LEAF_NODE	101:45	101:45	10	->
LEAF_NODE	101:47	101:47	10	nBytesPerRow
LEAF_NODE	101:59	101:59	8	)
LEAF_NODE	101:60	101:60	4	;
EXPR_STATEMENT	102:4	103:60	3	psCache -> pabyRow2Blocks = ( unsigned char * ) _TIFFmalloc ( psCache -> nBytesPerRow ) ;
EXPR	102:4	102:4	4	psCache -> pabyRow2Blocks = ( unsigned char * ) _TIFFmalloc ( psCache -> nBytesPerRow )
ASSIGN	102:4	103:8	5	psCache -> pabyRow2Blocks = ( unsigned char * ) _TIFFmalloc ( psCache -> nBytesPerRow )
LVAL	102:4	102:4	6	psCache -> pabyRow2Blocks
FIELD	102:4	102:13	7	psCache -> pabyRow2Blocks
LEAF_NODE	102:4	102:4	8	psCache
LEAF_NODE	102:11	102:11	8	->
LEAF_NODE	102:13	102:13	8	pabyRow2Blocks
ASSIGN_OP	102:28	102:28	6	=
LEAF_NODE	102:28	102:28	7	=
RVAL	103:8	103:26	6	( unsigned char * ) _TIFFmalloc ( psCache -> nBytesPerRow )
LEAF_NODE	103:8	103:8	7	(
TYPE_NAME	103:9	103:18	7	unsigned char
LEAF_NODE	103:9	103:9	8	unsigned
LEAF_NODE	103:18	103:18	8	char
LEAF_NODE	103:23	103:23	7	*
LEAF_NODE	103:24	103:24	7	)
FUNCTION_CALL	103:26	103:59	7	_TIFFmalloc ( psCache -> nBytesPerRow )
CALLEE	103:26	103:26	8	_TIFFmalloc
LEAF_NODE	103:26	103:26	9	_TIFFmalloc
LEAF_NODE	103:37	103:37	8	(
ARGUMENT	103:38	103:38	8	psCache -> nBytesPerRow
FIELD	103:38	103:47	9	psCache -> nBytesPerRow
LEAF_NODE	103:38	103:38	10	psCache
LEAF_NODE	103:45	103:45	10	->
LEAF_NODE	103:47	103:47	10	nBytesPerRow
LEAF_NODE	103:59	103:59	8	)
LEAF_NODE	103:60	103:60	4	;
SELECTION	105:4	107:4	3	
KEYWORD	105:4	105:4	4	if
LEAF_NODE	105:4	105:4	5	if
LEAF_NODE	105:7	105:7	4	(
CONDITION	105:9	105:9	4	psCache -> pabyRow1Blocks == NULL || psCache -> pabyRow2Blocks == NULL
EXPR	105:9	105:9	5	psCache -> pabyRow1Blocks == NULL || psCache -> pabyRow2Blocks == NULL
OR	105:9	106:12	6	psCache -> pabyRow1Blocks == NULL || psCache -> pabyRow2Blocks == NULL
EXPR	105:9	105:36	7	psCache -> pabyRow1Blocks == NULL
FIELD	105:9	105:18	8	psCache -> pabyRow1Blocks
LEAF_NODE	105:9	105:9	9	psCache
LEAF_NODE	105:16	105:16	9	->
LEAF_NODE	105:18	105:18	9	pabyRow1Blocks
EQ_OPERATOR	105:33	105:33	8	==
LEAF_NODE	105:33	105:33	9	==
FIELD	105:36	105:36	8	NULL
LEAF_NODE	105:36	105:36	9	NULL
LEAF_NODE	106:9	106:9	7	||
EXPR	106:12	106:39	7	psCache -> pabyRow2Blocks == NULL
FIELD	106:12	106:21	8	psCache -> pabyRow2Blocks
LEAF_NODE	106:12	106:12	9	psCache
LEAF_NODE	106:19	106:19	9	->
LEAF_NODE	106:21	106:21	9	pabyRow2Blocks
EQ_OPERATOR	106:36	106:36	8	==
LEAF_NODE	106:36	106:36	9	==
FIELD	106:39	106:39	8	NULL
LEAF_NODE	106:39	106:39	9	NULL
LEAF_NODE	106:44	106:44	4	)
STATEMENTS	107:4	115:4	4	
LEAF_NODE	107:4	107:4	5	{
STATEMENTS	108:2	114:8	5	
EXPR_STATEMENT	108:2	109:52	6	TIFFErrorExt ( hTIFF -> tif_clientdata , hTIFF -> tif_name , "Can't allocate memory for overview cache." ) ;
EXPR	108:2	108:2	7	TIFFErrorExt ( hTIFF -> tif_clientdata , hTIFF -> tif_name , "Can't allocate memory for overview cache." )
FUNCTION_CALL	108:2	109:51	8	TIFFErrorExt ( hTIFF -> tif_clientdata , hTIFF -> tif_name , "Can't allocate memory for overview cache." )
CALLEE	108:2	108:2	9	TIFFErrorExt
LEAF_NODE	108:2	108:2	10	TIFFErrorExt
LEAF_NODE	108:14	108:14	9	(
ARGUMENT	108:16	108:16	9	hTIFF -> tif_clientdata
FIELD	108:16	108:23	10	hTIFF -> tif_clientdata
LEAF_NODE	108:16	108:16	11	hTIFF
LEAF_NODE	108:21	108:21	11	->
LEAF_NODE	108:23	108:23	11	tif_clientdata
LEAF_NODE	108:37	108:37	9	,
ARGUMENT	108:39	108:39	9	hTIFF -> tif_name
FIELD	108:39	108:46	10	hTIFF -> tif_name
LEAF_NODE	108:39	108:39	11	hTIFF
LEAF_NODE	108:44	108:44	11	->
LEAF_NODE	108:46	108:46	11	tif_name
LEAF_NODE	108:54	108:54	9	,
ARGUMENT	109:7	109:7	9	"Can't allocate memory for overview cache."
FIELD	109:7	109:7	10	"Can't allocate memory for overview cache."
LEAF_NODE	109:7	109:7	11	"Can't allocate memory for overview cache."
LEAF_NODE	109:51	109:51	9	)
LEAF_NODE	109:52	109:52	7	;
SELECTION	111:16	111:45	6	
KEYWORD	111:16	111:16	7	if
LEAF_NODE	111:16	111:16	8	if
LEAF_NODE	111:19	111:19	7	(
CONDITION	111:20	111:20	7	psCache -> pabyRow1Blocks
EXPR	111:20	111:20	8	psCache -> pabyRow1Blocks
FIELD	111:20	111:29	9	psCache -> pabyRow1Blocks
LEAF_NODE	111:20	111:20	10	psCache
LEAF_NODE	111:27	111:27	10	->
LEAF_NODE	111:29	111:29	10	pabyRow1Blocks
LEAF_NODE	111:43	111:43	7	)
STATEMENTS	111:45	111:45	7	
EXPR_STATEMENT	111:45	111:79	8	_TIFFfree ( psCache -> pabyRow1Blocks ) ;
EXPR	111:45	111:45	9	_TIFFfree ( psCache -> pabyRow1Blocks )
FUNCTION_CALL	111:45	111:78	10	_TIFFfree ( psCache -> pabyRow1Blocks )
CALLEE	111:45	111:45	11	_TIFFfree
LEAF_NODE	111:45	111:45	12	_TIFFfree
LEAF_NODE	111:54	111:54	11	(
ARGUMENT	111:55	111:55	11	psCache -> pabyRow1Blocks
FIELD	111:55	111:64	12	psCache -> pabyRow1Blocks
LEAF_NODE	111:55	111:55	13	psCache
LEAF_NODE	111:62	111:62	13	->
LEAF_NODE	111:64	111:64	13	pabyRow1Blocks
LEAF_NODE	111:78	111:78	11	)
LEAF_NODE	111:79	111:79	9	;
SELECTION	112:16	112:45	6	
KEYWORD	112:16	112:16	7	if
LEAF_NODE	112:16	112:16	8	if
LEAF_NODE	112:19	112:19	7	(
CONDITION	112:20	112:20	7	psCache -> pabyRow2Blocks
EXPR	112:20	112:20	8	psCache -> pabyRow2Blocks
FIELD	112:20	112:29	9	psCache -> pabyRow2Blocks
LEAF_NODE	112:20	112:20	10	psCache
LEAF_NODE	112:27	112:27	10	->
LEAF_NODE	112:29	112:29	10	pabyRow2Blocks
LEAF_NODE	112:43	112:43	7	)
STATEMENTS	112:45	112:45	7	
EXPR_STATEMENT	112:45	112:79	8	_TIFFfree ( psCache -> pabyRow2Blocks ) ;
EXPR	112:45	112:45	9	_TIFFfree ( psCache -> pabyRow2Blocks )
FUNCTION_CALL	112:45	112:78	10	_TIFFfree ( psCache -> pabyRow2Blocks )
CALLEE	112:45	112:45	11	_TIFFfree
LEAF_NODE	112:45	112:45	12	_TIFFfree
LEAF_NODE	112:54	112:54	11	(
ARGUMENT	112:55	112:55	11	psCache -> pabyRow2Blocks
FIELD	112:55	112:64	12	psCache -> pabyRow2Blocks
LEAF_NODE	112:55	112:55	13	psCache
LEAF_NODE	112:62	112:62	13	->
LEAF_NODE	112:64	112:64	13	pabyRow2Blocks
LEAF_NODE	112:78	112:78	11	)
LEAF_NODE	112:79	112:79	9	;
EXPR_STATEMENT	113:16	113:36	6	_TIFFfree ( psCache ) ;
EXPR	113:16	113:16	7	_TIFFfree ( psCache )
FUNCTION_CALL	113:16	113:35	8	_TIFFfree ( psCache )
CALLEE	113:16	113:16	9	_TIFFfree
LEAF_NODE	113:16	113:16	10	_TIFFfree
LEAF_NODE	113:25	113:25	9	(
ARGUMENT	113:27	113:27	9	psCache
FIELD	113:27	113:27	10	psCache
LEAF_NODE	113:27	113:27	11	psCache
LEAF_NODE	113:35	113:35	9	)
LEAF_NODE	113:36	113:36	7	;
JUMP_STATEMENT	114:8	114:19	6	return NULL ;
KEYWORD	114:8	114:8	7	return
LEAF_NODE	114:8	114:8	8	return
DESTINATION	114:15	114:15	7	NULL
EXPR	114:15	114:15	8	NULL
FIELD	114:15	114:15	9	NULL
LEAF_NODE	114:15	114:15	10	NULL
LEAF_NODE	114:19	114:19	7	;
LEAF_NODE	115:4	115:4	5	}
EXPR_STATEMENT	117:4	117:68	3	_TIFFmemset ( psCache -> pabyRow1Blocks , 0 , psCache -> nBytesPerRow ) ;
EXPR	117:4	117:4	4	_TIFFmemset ( psCache -> pabyRow1Blocks , 0 , psCache -> nBytesPerRow )
FUNCTION_CALL	117:4	117:67	5	_TIFFmemset ( psCache -> pabyRow1Blocks , 0 , psCache -> nBytesPerRow )
CALLEE	117:4	117:4	6	_TIFFmemset
LEAF_NODE	117:4	117:4	7	_TIFFmemset
LEAF_NODE	117:15	117:15	6	(
ARGUMENT	117:17	117:17	6	psCache -> pabyRow1Blocks
FIELD	117:17	117:26	7	psCache -> pabyRow1Blocks
LEAF_NODE	117:17	117:17	8	psCache
LEAF_NODE	117:24	117:24	8	->
LEAF_NODE	117:26	117:26	8	pabyRow1Blocks
LEAF_NODE	117:40	117:40	6	,
ARGUMENT	117:42	117:42	6	0
FIELD	117:42	117:42	7	0
LEAF_NODE	117:42	117:42	8	0
LEAF_NODE	117:43	117:43	6	,
ARGUMENT	117:45	117:45	6	psCache -> nBytesPerRow
FIELD	117:45	117:54	7	psCache -> nBytesPerRow
LEAF_NODE	117:45	117:45	8	psCache
LEAF_NODE	117:52	117:52	8	->
LEAF_NODE	117:54	117:54	8	nBytesPerRow
LEAF_NODE	117:67	117:67	6	)
LEAF_NODE	117:68	117:68	4	;
EXPR_STATEMENT	118:4	118:68	3	_TIFFmemset ( psCache -> pabyRow2Blocks , 0 , psCache -> nBytesPerRow ) ;
EXPR	118:4	118:4	4	_TIFFmemset ( psCache -> pabyRow2Blocks , 0 , psCache -> nBytesPerRow )
FUNCTION_CALL	118:4	118:67	5	_TIFFmemset ( psCache -> pabyRow2Blocks , 0 , psCache -> nBytesPerRow )
CALLEE	118:4	118:4	6	_TIFFmemset
LEAF_NODE	118:4	118:4	7	_TIFFmemset
LEAF_NODE	118:15	118:15	6	(
ARGUMENT	118:17	118:17	6	psCache -> pabyRow2Blocks
FIELD	118:17	118:26	7	psCache -> pabyRow2Blocks
LEAF_NODE	118:17	118:17	8	psCache
LEAF_NODE	118:24	118:24	8	->
LEAF_NODE	118:26	118:26	8	pabyRow2Blocks
LEAF_NODE	118:40	118:40	6	,
ARGUMENT	118:42	118:42	6	0
FIELD	118:42	118:42	7	0
LEAF_NODE	118:42	118:42	8	0
LEAF_NODE	118:43	118:43	6	,
ARGUMENT	118:45	118:45	6	psCache -> nBytesPerRow
FIELD	118:45	118:54	7	psCache -> nBytesPerRow
LEAF_NODE	118:45	118:45	8	psCache
LEAF_NODE	118:52	118:52	8	->
LEAF_NODE	118:54	118:54	8	nBytesPerRow
LEAF_NODE	118:67	118:67	6	)
LEAF_NODE	118:68	118:68	4	;
EXPR_STATEMENT	120:4	120:29	3	psCache -> nBlockOffset = 0 ;
EXPR	120:4	120:4	4	psCache -> nBlockOffset = 0
ASSIGN	120:4	120:28	5	psCache -> nBlockOffset = 0
LVAL	120:4	120:4	6	psCache -> nBlockOffset
FIELD	120:4	120:13	7	psCache -> nBlockOffset
LEAF_NODE	120:4	120:4	8	psCache
LEAF_NODE	120:11	120:11	8	->
LEAF_NODE	120:13	120:13	8	nBlockOffset
ASSIGN_OP	120:26	120:26	6	=
LEAF_NODE	120:26	120:26	7	=
RVAL	120:28	120:28	6	0
FIELD	120:28	120:28	7	0
LEAF_NODE	120:28	120:28	8	0
LEAF_NODE	120:29	120:29	4	;
EXPR_STATEMENT	122:4	122:57	3	TIFFSetSubDirectory ( psCache -> hTIFF , nBaseDirOffset ) ;
EXPR	122:4	122:4	4	TIFFSetSubDirectory ( psCache -> hTIFF , nBaseDirOffset )
FUNCTION_CALL	122:4	122:56	5	TIFFSetSubDirectory ( psCache -> hTIFF , nBaseDirOffset )
CALLEE	122:4	122:4	6	TIFFSetSubDirectory
LEAF_NODE	122:4	122:4	7	TIFFSetSubDirectory
LEAF_NODE	122:23	122:23	6	(
ARGUMENT	122:25	122:25	6	psCache -> hTIFF
FIELD	122:25	122:34	7	psCache -> hTIFF
LEAF_NODE	122:25	122:25	8	psCache
LEAF_NODE	122:32	122:32	8	->
LEAF_NODE	122:34	122:34	8	hTIFF
LEAF_NODE	122:39	122:39	6	,
ARGUMENT	122:41	122:41	6	nBaseDirOffset
FIELD	122:41	122:41	7	nBaseDirOffset
LEAF_NODE	122:41	122:41	8	nBaseDirOffset
LEAF_NODE	122:56	122:56	6	)
LEAF_NODE	122:57	122:57	4	;
JUMP_STATEMENT	124:4	124:18	3	return psCache ;
KEYWORD	124:4	124:4	4	return
LEAF_NODE	124:4	124:4	5	return
DESTINATION	124:11	124:11	4	psCache
EXPR	124:11	124:11	5	psCache
FIELD	124:11	124:11	6	psCache
LEAF_NODE	124:11	124:11	7	psCache
LEAF_NODE	124:18	124:18	4	;
LEAF_NODE	125:0	125:0	2	}
FUNCTION_DEF	135:0	259:0	1	
RETURN_TYPE	135:0	135:7	2	static void
LEAF_NODE	135:0	135:0	3	static
TYPE_NAME	135:7	135:7	3	void
LEAF_NODE	135:7	135:7	4	void
FUNCTION_NAME	135:12	135:12	2	TIFFWriteOvrRow
LEAF_NODE	135:12	135:12	3	TIFFWriteOvrRow
PARAMETER_LIST	135:27	135:52	2	( TIFFOvrCache * psCache )
LEAF_NODE	135:27	135:27	3	(
PARAMETER_DECL	135:29	135:44	3	TIFFOvrCache * psCache
TYPE	135:29	135:42	4	TIFFOvrCache *
TYPE_NAME	135:29	135:29	5	TIFFOvrCache
LEAF_NODE	135:29	135:29	6	TIFFOvrCache
POINTER	135:42	135:42	5	*
LEAF_NODE	135:42	135:42	6	*
NAME	135:44	135:44	4	psCache
LEAF_NODE	135:44	135:44	5	psCache
LEAF_NODE	135:52	135:52	3	)
LEAF_NODE	137:0	137:0	2	{
STATEMENTS	138:4	257:4	2	
SIMPLE_DECL	138:4	138:53	3	int nRet , int iTileX , int iTileY ; iTileY = psCache -> nBlockOffset ;
INIT_DECL_LIST	138:4	138:4	4	int nRet , int iTileX , int iTileY ; iTileY = psCache -> nBlockOffset
VAR_DECL	138:4	138:9	5	int nRet
TYPE	138:4	138:4	6	int
TYPE_NAME	138:4	138:4	7	int
LEAF_NODE	138:4	138:4	8	int
NAME	138:9	138:9	6	nRet
LEAF_NODE	138:9	138:9	7	nRet
LEAF_NODE	138:13	138:13	5	,
INIT_DECL_LIST	138:4	138:4	5	int iTileX , int iTileY ; iTileY = psCache -> nBlockOffset
VAR_DECL	138:4	138:15	6	int iTileX
TYPE	138:4	138:4	7	int
TYPE_NAME	138:4	138:4	8	int
LEAF_NODE	138:4	138:4	9	int
NAME	138:15	138:15	7	iTileX
LEAF_NODE	138:15	138:15	8	iTileX
LEAF_NODE	138:21	138:21	6	,
VAR_DECL	138:4	138:23	6	int iTileY ; iTileY = psCache -> nBlockOffset
TYPE	138:4	138:4	7	int
TYPE_NAME	138:4	138:4	8	int
LEAF_NODE	138:4	138:4	9	int
NAME	138:23	138:23	7	iTileY
LEAF_NODE	138:23	138:23	8	iTileY
LEAF_NODE	0:0	0:0	7	;
INIT	138:23	138:23	7	iTileY = psCache -> nBlockOffset
ASSIGN	138:23	138:32	8	iTileY = psCache -> nBlockOffset
LVAL	138:23	138:23	9	iTileY
NAME	138:23	138:23	10	iTileY
LEAF_NODE	138:23	138:23	11	iTileY
ASSIGN_OP	138:30	138:30	9	=
LEAF_NODE	138:30	138:30	10	=
RVAL	138:32	138:32	9	psCache -> nBlockOffset
FIELD	138:32	138:41	10	psCache -> nBlockOffset
LEAF_NODE	138:32	138:32	11	psCache
LEAF_NODE	138:39	138:39	11	->
LEAF_NODE	138:41	138:41	11	nBlockOffset
LEAF_NODE	138:53	138:53	4	;
SIMPLE_DECL	139:4	139:27	3	unsigned char * pabyData ;
VAR_DECL	139:4	139:19	4	unsigned char * pabyData
TYPE	139:4	139:18	5	unsigned char *
TYPE_NAME	139:4	139:13	6	unsigned char
LEAF_NODE	139:4	139:4	7	unsigned
LEAF_NODE	139:13	139:13	7	char
POINTER	139:18	139:18	6	*
LEAF_NODE	139:18	139:18	7	*
NAME	139:19	139:19	5	pabyData
LEAF_NODE	139:19	139:19	6	pabyData
LEAF_NODE	139:27	139:27	4	;
SIMPLE_DECL	140:4	140:25	3	toff_t nBaseDirOffset ;
VAR_DECL	140:4	140:11	4	toff_t nBaseDirOffset
TYPE	140:4	140:4	5	toff_t
TYPE_NAME	140:4	140:4	6	toff_t
LEAF_NODE	140:4	140:4	7	toff_t
NAME	140:11	140:11	5	nBaseDirOffset
LEAF_NODE	140:11	140:11	6	nBaseDirOffset
LEAF_NODE	140:25	140:25	4	;
SIMPLE_DECL	141:4	141:27	3	uint32 RowsInStrip ;
VAR_DECL	141:4	141:16	4	uint32 RowsInStrip
TYPE	141:4	141:4	5	uint32
TYPE_NAME	141:4	141:4	6	uint32
LEAF_NODE	141:4	141:4	7	uint32
NAME	141:16	141:16	5	RowsInStrip
LEAF_NODE	141:16	141:16	6	RowsInStrip
LEAF_NODE	141:27	141:27	4	;
SELECTION	148:4	149:4	3	
KEYWORD	148:4	148:4	4	if
LEAF_NODE	148:4	148:4	5	if
LEAF_NODE	148:6	148:6	4	(
CONDITION	148:8	148:8	4	TIFFIsByteSwapped ( psCache -> hTIFF )
EXPR	148:8	148:8	5	TIFFIsByteSwapped ( psCache -> hTIFF )
FUNCTION_CALL	148:8	148:40	6	TIFFIsByteSwapped ( psCache -> hTIFF )
CALLEE	148:8	148:8	7	TIFFIsByteSwapped
LEAF_NODE	148:8	148:8	8	TIFFIsByteSwapped
LEAF_NODE	148:25	148:25	7	(
ARGUMENT	148:26	148:26	7	psCache -> hTIFF
FIELD	148:26	148:35	8	psCache -> hTIFF
LEAF_NODE	148:26	148:26	9	psCache
LEAF_NODE	148:33	148:33	9	->
LEAF_NODE	148:35	148:35	9	hTIFF
LEAF_NODE	148:40	148:40	7	)
LEAF_NODE	148:42	148:42	4	)
STATEMENTS	149:4	161:4	4	
LEAF_NODE	149:4	149:4	5	{
STATEMENTS	150:8	158:8	5	
SELECTION	150:8	151:12	6	
KEYWORD	150:8	150:8	7	if
LEAF_NODE	150:8	150:8	8	if
LEAF_NODE	150:10	150:10	7	(
CONDITION	150:12	150:12	7	psCache -> nBitsPerPixel == 16
EXPR	150:12	150:38	8	psCache -> nBitsPerPixel == 16
FIELD	150:12	150:21	9	psCache -> nBitsPerPixel
LEAF_NODE	150:12	150:12	10	psCache
LEAF_NODE	150:19	150:19	10	->
LEAF_NODE	150:21	150:21	10	nBitsPerPixel
EQ_OPERATOR	150:35	150:35	9	==
LEAF_NODE	150:35	150:35	10	==
FIELD	150:38	150:38	9	16
LEAF_NODE	150:38	150:38	10	16
LEAF_NODE	150:41	150:41	7	)
STATEMENTS	151:12	151:12	7	
EXPR_STATEMENT	151:12	152:73	8	TIFFSwabArrayOfShort ( ( uint16 * ) psCache -> pabyRow1Blocks , ( psCache -> nBytesPerBlock * psCache -> nSamples ) / 2 ) ;
EXPR	151:12	151:12	9	TIFFSwabArrayOfShort ( ( uint16 * ) psCache -> pabyRow1Blocks , ( psCache -> nBytesPerBlock * psCache -> nSamples ) / 2 )
FUNCTION_CALL	151:12	152:72	10	TIFFSwabArrayOfShort ( ( uint16 * ) psCache -> pabyRow1Blocks , ( psCache -> nBytesPerBlock * psCache -> nSamples ) / 2 )
CALLEE	151:12	151:12	11	TIFFSwabArrayOfShort
LEAF_NODE	151:12	151:12	12	TIFFSwabArrayOfShort
LEAF_NODE	151:32	151:32	11	(
ARGUMENT	151:34	151:45	11	( uint16 * ) psCache -> pabyRow1Blocks
LEAF_NODE	151:34	151:34	12	(
TYPE_NAME	151:35	151:35	12	uint16
LEAF_NODE	151:35	151:35	13	uint16
LEAF_NODE	151:42	151:42	12	*
LEAF_NODE	151:43	151:43	12	)
FIELD	151:45	151:54	12	psCache -> pabyRow1Blocks
LEAF_NODE	151:45	151:45	13	psCache
LEAF_NODE	151:52	151:52	13	->
LEAF_NODE	151:54	151:54	13	pabyRow1Blocks
LEAF_NODE	151:68	151:68	11	,
ARGUMENT	152:22	152:70	11	( psCache -> nBytesPerBlock * psCache -> nSamples ) / 2
LEAF_NODE	152:22	152:22	12	(
FIELD	152:23	152:32	12	psCache -> nBytesPerBlock
LEAF_NODE	152:23	152:23	13	psCache
LEAF_NODE	152:30	152:30	13	->
LEAF_NODE	152:32	152:32	13	nBytesPerBlock
LEAF_NODE	152:47	152:47	12	*
FIELD	152:49	152:58	12	psCache -> nSamples
LEAF_NODE	152:49	152:49	13	psCache
LEAF_NODE	152:56	152:56	13	->
LEAF_NODE	152:58	152:58	13	nSamples
LEAF_NODE	152:66	152:66	12	)
LEAF_NODE	152:68	152:68	12	/
FIELD	152:70	152:70	12	2
LEAF_NODE	152:70	152:70	13	2
LEAF_NODE	152:72	152:72	11	)
LEAF_NODE	152:73	152:73	9	;
SELECTION	154:8	154:13	6	
KEYWORD	154:8	154:8	7	else
LEAF_NODE	154:8	154:8	8	else
STATEMENTS	154:13	154:13	7	
SELECTION	154:13	155:12	8	
KEYWORD	154:13	154:13	9	if
LEAF_NODE	154:13	154:13	10	if
LEAF_NODE	154:15	154:15	9	(
CONDITION	154:17	154:17	9	psCache -> nBitsPerPixel == 32
EXPR	154:17	154:43	10	psCache -> nBitsPerPixel == 32
FIELD	154:17	154:26	11	psCache -> nBitsPerPixel
LEAF_NODE	154:17	154:17	12	psCache
LEAF_NODE	154:24	154:24	12	->
LEAF_NODE	154:26	154:26	12	nBitsPerPixel
EQ_OPERATOR	154:40	154:40	11	==
LEAF_NODE	154:40	154:40	12	==
FIELD	154:43	154:43	11	32
LEAF_NODE	154:43	154:43	12	32
LEAF_NODE	154:46	154:46	9	)
STATEMENTS	155:12	155:12	9	
EXPR_STATEMENT	155:12	156:76	10	TIFFSwabArrayOfLong ( ( uint32 * ) psCache -> pabyRow1Blocks , ( psCache -> nBytesPerBlock * psCache -> nSamples ) / 4 ) ;
EXPR	155:12	155:12	11	TIFFSwabArrayOfLong ( ( uint32 * ) psCache -> pabyRow1Blocks , ( psCache -> nBytesPerBlock * psCache -> nSamples ) / 4 )
FUNCTION_CALL	155:12	156:75	12	TIFFSwabArrayOfLong ( ( uint32 * ) psCache -> pabyRow1Blocks , ( psCache -> nBytesPerBlock * psCache -> nSamples ) / 4 )
CALLEE	155:12	155:12	13	TIFFSwabArrayOfLong
LEAF_NODE	155:12	155:12	14	TIFFSwabArrayOfLong
LEAF_NODE	155:31	155:31	13	(
ARGUMENT	155:33	155:44	13	( uint32 * ) psCache -> pabyRow1Blocks
LEAF_NODE	155:33	155:33	14	(
TYPE_NAME	155:34	155:34	14	uint32
LEAF_NODE	155:34	155:34	15	uint32
LEAF_NODE	155:41	155:41	14	*
LEAF_NODE	155:42	155:42	14	)
FIELD	155:44	155:53	14	psCache -> pabyRow1Blocks
LEAF_NODE	155:44	155:44	15	psCache
LEAF_NODE	155:51	155:51	15	->
LEAF_NODE	155:53	155:53	15	pabyRow1Blocks
LEAF_NODE	155:67	155:67	13	,
ARGUMENT	156:25	156:73	13	( psCache -> nBytesPerBlock * psCache -> nSamples ) / 4
LEAF_NODE	156:25	156:25	14	(
FIELD	156:26	156:35	14	psCache -> nBytesPerBlock
LEAF_NODE	156:26	156:26	15	psCache
LEAF_NODE	156:33	156:33	15	->
LEAF_NODE	156:35	156:35	15	nBytesPerBlock
LEAF_NODE	156:50	156:50	14	*
FIELD	156:52	156:61	14	psCache -> nSamples
LEAF_NODE	156:52	156:52	15	psCache
LEAF_NODE	156:59	156:59	15	->
LEAF_NODE	156:61	156:61	15	nSamples
LEAF_NODE	156:69	156:69	14	)
LEAF_NODE	156:71	156:71	14	/
FIELD	156:73	156:73	14	4
LEAF_NODE	156:73	156:73	15	4
LEAF_NODE	156:75	156:75	13	)
LEAF_NODE	156:76	156:76	11	;
SELECTION	158:8	158:13	6	
KEYWORD	158:8	158:8	7	else
LEAF_NODE	158:8	158:8	8	else
STATEMENTS	158:13	158:13	7	
SELECTION	158:13	159:12	8	
KEYWORD	158:13	158:13	9	if
LEAF_NODE	158:13	158:13	10	if
LEAF_NODE	158:15	158:15	9	(
CONDITION	158:17	158:17	9	psCache -> nBitsPerPixel == 64
EXPR	158:17	158:43	10	psCache -> nBitsPerPixel == 64
FIELD	158:17	158:26	11	psCache -> nBitsPerPixel
LEAF_NODE	158:17	158:17	12	psCache
LEAF_NODE	158:24	158:24	12	->
LEAF_NODE	158:26	158:26	12	nBitsPerPixel
EQ_OPERATOR	158:40	158:40	11	==
LEAF_NODE	158:40	158:40	12	==
FIELD	158:43	158:43	11	64
LEAF_NODE	158:43	158:43	12	64
LEAF_NODE	158:46	158:46	9	)
STATEMENTS	159:12	159:12	9	
EXPR_STATEMENT	159:12	160:76	10	TIFFSwabArrayOfDouble ( ( double * ) psCache -> pabyRow1Blocks , ( psCache -> nBytesPerBlock * psCache -> nSamples ) / 8 ) ;
EXPR	159:12	159:12	11	TIFFSwabArrayOfDouble ( ( double * ) psCache -> pabyRow1Blocks , ( psCache -> nBytesPerBlock * psCache -> nSamples ) / 8 )
FUNCTION_CALL	159:12	160:75	12	TIFFSwabArrayOfDouble ( ( double * ) psCache -> pabyRow1Blocks , ( psCache -> nBytesPerBlock * psCache -> nSamples ) / 8 )
CALLEE	159:12	159:12	13	TIFFSwabArrayOfDouble
LEAF_NODE	159:12	159:12	14	TIFFSwabArrayOfDouble
LEAF_NODE	159:33	159:33	13	(
ARGUMENT	159:35	159:46	13	( double * ) psCache -> pabyRow1Blocks
LEAF_NODE	159:35	159:35	14	(
TYPE_NAME	159:36	159:36	14	double
LEAF_NODE	159:36	159:36	15	double
LEAF_NODE	159:43	159:43	14	*
LEAF_NODE	159:44	159:44	14	)
FIELD	159:46	159:55	14	psCache -> pabyRow1Blocks
LEAF_NODE	159:46	159:46	15	psCache
LEAF_NODE	159:53	159:53	15	->
LEAF_NODE	159:55	159:55	15	pabyRow1Blocks
LEAF_NODE	159:69	159:69	13	,
ARGUMENT	160:25	160:73	13	( psCache -> nBytesPerBlock * psCache -> nSamples ) / 8
LEAF_NODE	160:25	160:25	14	(
FIELD	160:26	160:35	14	psCache -> nBytesPerBlock
LEAF_NODE	160:26	160:26	15	psCache
LEAF_NODE	160:33	160:33	15	->
LEAF_NODE	160:35	160:35	15	nBytesPerBlock
LEAF_NODE	160:50	160:50	14	*
FIELD	160:52	160:61	14	psCache -> nSamples
LEAF_NODE	160:52	160:52	15	psCache
LEAF_NODE	160:59	160:59	15	->
LEAF_NODE	160:61	160:61	15	nSamples
LEAF_NODE	160:69	160:69	14	)
LEAF_NODE	160:71	160:71	14	/
FIELD	160:73	160:73	14	8
LEAF_NODE	160:73	160:73	15	8
LEAF_NODE	160:75	160:75	13	)
LEAF_NODE	160:76	160:76	11	;
LEAF_NODE	161:4	161:4	5	}
EXPR_STATEMENT	167:4	167:59	3	nBaseDirOffset = TIFFCurrentDirOffset ( psCache -> hTIFF ) ;
EXPR	167:4	167:4	4	nBaseDirOffset = TIFFCurrentDirOffset ( psCache -> hTIFF )
ASSIGN	167:4	167:21	5	nBaseDirOffset = TIFFCurrentDirOffset ( psCache -> hTIFF )
LVAL	167:4	167:4	6	nBaseDirOffset
FIELD	167:4	167:4	7	nBaseDirOffset
LEAF_NODE	167:4	167:4	8	nBaseDirOffset
ASSIGN_OP	167:19	167:19	6	=
LEAF_NODE	167:19	167:19	7	=
RVAL	167:21	167:21	6	TIFFCurrentDirOffset ( psCache -> hTIFF )
FUNCTION_CALL	167:21	167:58	7	TIFFCurrentDirOffset ( psCache -> hTIFF )
CALLEE	167:21	167:21	8	TIFFCurrentDirOffset
LEAF_NODE	167:21	167:21	9	TIFFCurrentDirOffset
LEAF_NODE	167:41	167:41	8	(
ARGUMENT	167:43	167:43	8	psCache -> hTIFF
FIELD	167:43	167:52	9	psCache -> hTIFF
LEAF_NODE	167:43	167:43	10	psCache
LEAF_NODE	167:50	167:50	10	->
LEAF_NODE	167:52	167:52	10	hTIFF
LEAF_NODE	167:58	167:58	8	)
LEAF_NODE	167:59	167:59	4	;
EXPR_STATEMENT	168:4	168:69	3	nRet = TIFFSetSubDirectory ( psCache -> hTIFF , psCache -> nDirOffset ) ;
EXPR	168:4	168:4	4	nRet = TIFFSetSubDirectory ( psCache -> hTIFF , psCache -> nDirOffset )
ASSIGN	168:4	168:11	5	nRet = TIFFSetSubDirectory ( psCache -> hTIFF , psCache -> nDirOffset )
LVAL	168:4	168:4	6	nRet
FIELD	168:4	168:4	7	nRet
LEAF_NODE	168:4	168:4	8	nRet
ASSIGN_OP	168:9	168:9	6	=
LEAF_NODE	168:9	168:9	7	=
RVAL	168:11	168:11	6	TIFFSetSubDirectory ( psCache -> hTIFF , psCache -> nDirOffset )
FUNCTION_CALL	168:11	168:68	7	TIFFSetSubDirectory ( psCache -> hTIFF , psCache -> nDirOffset )
CALLEE	168:11	168:11	8	TIFFSetSubDirectory
LEAF_NODE	168:11	168:11	9	TIFFSetSubDirectory
LEAF_NODE	168:30	168:30	8	(
ARGUMENT	168:32	168:32	8	psCache -> hTIFF
FIELD	168:32	168:41	9	psCache -> hTIFF
LEAF_NODE	168:32	168:32	10	psCache
LEAF_NODE	168:39	168:39	10	->
LEAF_NODE	168:41	168:41	10	hTIFF
LEAF_NODE	168:46	168:46	8	,
ARGUMENT	168:48	168:48	8	psCache -> nDirOffset
FIELD	168:48	168:57	9	psCache -> nDirOffset
LEAF_NODE	168:48	168:48	10	psCache
LEAF_NODE	168:55	168:55	10	->
LEAF_NODE	168:57	168:57	10	nDirOffset
LEAF_NODE	168:68	168:68	8	)
LEAF_NODE	168:69	168:69	4	;
EXPR_STATEMENT	169:4	169:23	3	assert ( nRet == 1 ) ;
EXPR	169:4	169:4	4	assert ( nRet == 1 )
FUNCTION_CALL	169:4	169:22	5	assert ( nRet == 1 )
CALLEE	169:4	169:4	6	assert
LEAF_NODE	169:4	169:4	7	assert
LEAF_NODE	169:10	169:10	6	(
ARGUMENT	169:12	169:20	6	nRet == 1
FIELD	169:12	169:12	7	nRet
LEAF_NODE	169:12	169:12	8	nRet
EQ_OPERATOR	169:17	169:17	7	==
LEAF_NODE	169:17	169:17	8	==
FIELD	169:20	169:20	7	1
LEAF_NODE	169:20	169:20	8	1
LEAF_NODE	169:22	169:22	6	)
LEAF_NODE	169:23	169:23	4	;
ITERATION	174:1	175:1	3	
KEYWORD	174:1	174:1	4	for
LEAF_NODE	174:1	174:1	5	for
LEAF_NODE	174:4	174:4	4	(
FOR_INIT	174:6	174:16	4	iTileX = 0 ;
EXPR	174:6	174:6	5	iTileX = 0
ASSIGN	174:6	174:15	6	iTileX = 0
LVAL	174:6	174:6	7	iTileX
FIELD	174:6	174:6	8	iTileX
LEAF_NODE	174:6	174:6	9	iTileX
ASSIGN_OP	174:13	174:13	7	=
LEAF_NODE	174:13	174:13	8	=
RVAL	174:15	174:15	7	0
FIELD	174:15	174:15	8	0
LEAF_NODE	174:15	174:15	9	0
LEAF_NODE	174:16	174:16	5	;
CONDITION	174:18	174:18	4	iTileX < psCache -> nBlocksPerRow
EXPR	174:18	174:27	5	iTileX < psCache -> nBlocksPerRow
FIELD	174:18	174:18	6	iTileX
LEAF_NODE	174:18	174:18	7	iTileX
REL_OPERATOR	174:25	174:25	6	<
LEAF_NODE	174:25	174:25	7	<
FIELD	174:27	174:36	6	psCache -> nBlocksPerRow
LEAF_NODE	174:27	174:27	7	psCache
LEAF_NODE	174:34	174:34	7	->
LEAF_NODE	174:36	174:36	7	nBlocksPerRow
LEAF_NODE	174:49	174:49	4	;
FOR_EXPR	174:51	174:51	4	iTileX ++
EXPR	174:51	174:51	5	iTileX ++
FIELD	174:51	174:57	6	iTileX ++
LEAF_NODE	174:51	174:51	7	iTileX
LEAF_NODE	174:57	174:57	7	++
LEAF_NODE	174:60	174:60	4	)
STATEMENTS	175:1	238:1	4	
LEAF_NODE	175:1	175:1	5	{
STATEMENTS	176:2	211:2	5	
SIMPLE_DECL	176:2	176:13	6	int nTileID ;
VAR_DECL	176:2	176:6	7	int nTileID
TYPE	176:2	176:2	8	int
TYPE_NAME	176:2	176:2	9	int
LEAF_NODE	176:2	176:2	10	int
NAME	176:6	176:6	8	nTileID
LEAF_NODE	176:6	176:6	9	nTileID
LEAF_NODE	176:13	176:13	7	;
SELECTION	178:2	179:2	6	
KEYWORD	178:2	178:2	7	if
LEAF_NODE	178:2	178:2	8	if
LEAF_NODE	178:5	178:5	7	(
CONDITION	178:6	178:6	7	psCache -> nPlanarConfig == PLANARCONFIG_SEPARATE
EXPR	178:6	178:32	8	psCache -> nPlanarConfig == PLANARCONFIG_SEPARATE
FIELD	178:6	178:15	9	psCache -> nPlanarConfig
LEAF_NODE	178:6	178:6	10	psCache
LEAF_NODE	178:13	178:13	10	->
LEAF_NODE	178:15	178:15	10	nPlanarConfig
EQ_OPERATOR	178:29	178:29	9	==
LEAF_NODE	178:29	178:29	10	==
FIELD	178:32	178:32	9	PLANARCONFIG_SEPARATE
LEAF_NODE	178:32	178:32	10	PLANARCONFIG_SEPARATE
LEAF_NODE	178:53	178:53	7	)
STATEMENTS	179:2	210:2	7	
LEAF_NODE	179:2	179:2	8	{
STATEMENTS	180:3	182:3	8	
SIMPLE_DECL	180:3	180:14	9	int iSample ;
VAR_DECL	180:3	180:7	10	int iSample
TYPE	180:3	180:3	11	int
TYPE_NAME	180:3	180:3	12	int
LEAF_NODE	180:3	180:3	13	int
NAME	180:7	180:7	11	iSample
LEAF_NODE	180:7	180:7	12	iSample
LEAF_NODE	180:14	180:14	10	;
ITERATION	182:3	183:3	9	
KEYWORD	182:3	182:3	10	for
LEAF_NODE	182:3	182:3	11	for
LEAF_NODE	182:6	182:6	10	(
FOR_INIT	182:8	182:19	10	iSample = 0 ;
EXPR	182:8	182:8	11	iSample = 0
ASSIGN	182:8	182:18	12	iSample = 0
LVAL	182:8	182:8	13	iSample
FIELD	182:8	182:8	14	iSample
LEAF_NODE	182:8	182:8	15	iSample
ASSIGN_OP	182:16	182:16	13	=
LEAF_NODE	182:16	182:16	14	=
RVAL	182:18	182:18	13	0
FIELD	182:18	182:18	14	0
LEAF_NODE	182:18	182:18	15	0
LEAF_NODE	182:19	182:19	11	;
CONDITION	182:21	182:21	10	iSample < psCache -> nSamples
EXPR	182:21	182:31	11	iSample < psCache -> nSamples
FIELD	182:21	182:21	12	iSample
LEAF_NODE	182:21	182:21	13	iSample
REL_OPERATOR	182:29	182:29	12	<
LEAF_NODE	182:29	182:29	13	<
FIELD	182:31	182:40	12	psCache -> nSamples
LEAF_NODE	182:31	182:31	13	psCache
LEAF_NODE	182:38	182:38	13	->
LEAF_NODE	182:40	182:40	13	nSamples
LEAF_NODE	182:48	182:48	10	;
FOR_EXPR	182:50	182:50	10	iSample ++
EXPR	182:50	182:50	11	iSample ++
FIELD	182:50	182:57	12	iSample ++
LEAF_NODE	182:50	182:50	13	iSample
LEAF_NODE	182:57	182:57	13	++
LEAF_NODE	182:60	182:60	10	)
STATEMENTS	183:3	208:3	10	
LEAF_NODE	183:3	183:3	11	{
STATEMENTS	184:4	196:4	11	
EXPR_STATEMENT	184:4	184:66	12	pabyData = TIFFGetOvrBlock ( psCache , iTileX , iTileY , iSample ) ;
EXPR	184:4	184:4	13	pabyData = TIFFGetOvrBlock ( psCache , iTileX , iTileY , iSample )
ASSIGN	184:4	184:15	14	pabyData = TIFFGetOvrBlock ( psCache , iTileX , iTileY , iSample )
LVAL	184:4	184:4	15	pabyData
FIELD	184:4	184:4	16	pabyData
LEAF_NODE	184:4	184:4	17	pabyData
ASSIGN_OP	184:13	184:13	15	=
LEAF_NODE	184:13	184:13	16	=
RVAL	184:15	184:15	15	TIFFGetOvrBlock ( psCache , iTileX , iTileY , iSample )
FUNCTION_CALL	184:15	184:65	16	TIFFGetOvrBlock ( psCache , iTileX , iTileY , iSample )
CALLEE	184:15	184:15	17	TIFFGetOvrBlock
LEAF_NODE	184:15	184:15	18	TIFFGetOvrBlock
LEAF_NODE	184:30	184:30	17	(
ARGUMENT	184:32	184:32	17	psCache
FIELD	184:32	184:32	18	psCache
LEAF_NODE	184:32	184:32	19	psCache
LEAF_NODE	184:39	184:39	17	,
ARGUMENT	184:41	184:41	17	iTileX
FIELD	184:41	184:41	18	iTileX
LEAF_NODE	184:41	184:41	19	iTileX
LEAF_NODE	184:47	184:47	17	,
ARGUMENT	184:49	184:49	17	iTileY
FIELD	184:49	184:49	18	iTileY
LEAF_NODE	184:49	184:49	19	iTileY
LEAF_NODE	184:55	184:55	17	,
ARGUMENT	184:57	184:57	17	iSample
FIELD	184:57	184:57	18	iSample
LEAF_NODE	184:57	184:57	19	iSample
LEAF_NODE	184:65	184:65	17	)
LEAF_NODE	184:66	184:66	13	;
SELECTION	186:4	187:4	12	
KEYWORD	186:4	186:4	13	if
LEAF_NODE	186:4	186:4	14	if
LEAF_NODE	186:6	186:6	13	(
CONDITION	186:8	186:8	13	psCache -> bTiled
EXPR	186:8	186:8	14	psCache -> bTiled
FIELD	186:8	186:17	15	psCache -> bTiled
LEAF_NODE	186:8	186:8	16	psCache
LEAF_NODE	186:15	186:15	16	->
LEAF_NODE	186:17	186:17	16	bTiled
LEAF_NODE	186:24	186:24	13	)
STATEMENTS	187:4	195:4	13	
LEAF_NODE	187:4	187:4	14	{
STATEMENTS	188:5	192:5	14	
EXPR_STATEMENT	188:5	191:33	15	nTileID = TIFFComputeTile ( psCache -> hTIFF , iTileX * psCache -> nBlockXSize , iTileY * psCache -> nBlockYSize , 0 , ( tsample_t ) iSample ) ;
EXPR	188:5	188:5	16	nTileID = TIFFComputeTile ( psCache -> hTIFF , iTileX * psCache -> nBlockXSize , iTileY * psCache -> nBlockYSize , 0 , ( tsample_t ) iSample )
ASSIGN	188:5	188:15	17	nTileID = TIFFComputeTile ( psCache -> hTIFF , iTileX * psCache -> nBlockXSize , iTileY * psCache -> nBlockYSize , 0 , ( tsample_t ) iSample )
LVAL	188:5	188:5	18	nTileID
FIELD	188:5	188:5	19	nTileID
LEAF_NODE	188:5	188:5	20	nTileID
ASSIGN_OP	188:13	188:13	18	=
LEAF_NODE	188:13	188:13	19	=
RVAL	188:15	188:15	18	TIFFComputeTile ( psCache -> hTIFF , iTileX * psCache -> nBlockXSize , iTileY * psCache -> nBlockYSize , 0 , ( tsample_t ) iSample )
FUNCTION_CALL	188:15	191:32	19	TIFFComputeTile ( psCache -> hTIFF , iTileX * psCache -> nBlockXSize , iTileY * psCache -> nBlockYSize , 0 , ( tsample_t ) iSample )
CALLEE	188:15	188:15	20	TIFFComputeTile
LEAF_NODE	188:15	188:15	21	TIFFComputeTile
LEAF_NODE	188:30	188:30	20	(
ARGUMENT	188:32	188:32	20	psCache -> hTIFF
FIELD	188:32	188:41	21	psCache -> hTIFF
LEAF_NODE	188:32	188:32	22	psCache
LEAF_NODE	188:39	188:39	22	->
LEAF_NODE	188:41	188:41	22	hTIFF
LEAF_NODE	188:46	188:46	20	,
ARGUMENT	189:9	189:18	20	iTileX * psCache -> nBlockXSize
FIELD	189:9	189:9	21	iTileX
LEAF_NODE	189:9	189:9	22	iTileX
LEAF_NODE	189:16	189:16	21	*
FIELD	189:18	189:27	21	psCache -> nBlockXSize
LEAF_NODE	189:18	189:18	22	psCache
LEAF_NODE	189:25	189:25	22	->
LEAF_NODE	189:27	189:27	22	nBlockXSize
LEAF_NODE	189:38	189:38	20	,
ARGUMENT	190:9	190:18	20	iTileY * psCache -> nBlockYSize
FIELD	190:9	190:9	21	iTileY
LEAF_NODE	190:9	190:9	22	iTileY
LEAF_NODE	190:16	190:16	21	*
FIELD	190:18	190:27	21	psCache -> nBlockYSize
LEAF_NODE	190:18	190:18	22	psCache
LEAF_NODE	190:25	190:25	22	->
LEAF_NODE	190:27	190:27	22	nBlockYSize
LEAF_NODE	190:38	190:38	20	,
ARGUMENT	191:9	191:9	20	0
FIELD	191:9	191:9	21	0
LEAF_NODE	191:9	191:9	22	0
LEAF_NODE	191:10	191:10	20	,
ARGUMENT	191:12	191:24	20	( tsample_t ) iSample
LEAF_NODE	191:12	191:12	21	(
TYPE_NAME	191:13	191:13	21	tsample_t
LEAF_NODE	191:13	191:13	22	tsample_t
LEAF_NODE	191:22	191:22	21	)
FIELD	191:24	191:24	21	iSample
LEAF_NODE	191:24	191:24	22	iSample
LEAF_NODE	191:32	191:32	20	)
LEAF_NODE	191:33	191:33	16	;
EXPR_STATEMENT	192:5	194:39	15	TIFFWriteEncodedTile ( psCache -> hTIFF , nTileID , pabyData , TIFFTileSize ( psCache -> hTIFF ) ) ;
EXPR	192:5	192:5	16	TIFFWriteEncodedTile ( psCache -> hTIFF , nTileID , pabyData , TIFFTileSize ( psCache -> hTIFF ) )
FUNCTION_CALL	192:5	194:38	17	TIFFWriteEncodedTile ( psCache -> hTIFF , nTileID , pabyData , TIFFTileSize ( psCache -> hTIFF ) )
CALLEE	192:5	192:5	18	TIFFWriteEncodedTile
LEAF_NODE	192:5	192:5	19	TIFFWriteEncodedTile
LEAF_NODE	192:25	192:25	18	(
ARGUMENT	192:27	192:27	18	psCache -> hTIFF
FIELD	192:27	192:36	19	psCache -> hTIFF
LEAF_NODE	192:27	192:27	20	psCache
LEAF_NODE	192:34	192:34	20	->
LEAF_NODE	192:36	192:36	20	hTIFF
LEAF_NODE	192:41	192:41	18	,
ARGUMENT	192:43	192:43	18	nTileID
FIELD	192:43	192:43	19	nTileID
LEAF_NODE	192:43	192:43	20	nTileID
LEAF_NODE	192:50	192:50	18	,
ARGUMENT	193:9	193:9	18	pabyData
FIELD	193:9	193:9	19	pabyData
LEAF_NODE	193:9	193:9	20	pabyData
LEAF_NODE	193:17	193:17	18	,
ARGUMENT	194:9	194:9	18	TIFFTileSize ( psCache -> hTIFF )
FUNCTION_CALL	194:9	194:36	19	TIFFTileSize ( psCache -> hTIFF )
CALLEE	194:9	194:9	20	TIFFTileSize
LEAF_NODE	194:9	194:9	21	TIFFTileSize
LEAF_NODE	194:21	194:21	20	(
ARGUMENT	194:22	194:22	20	psCache -> hTIFF
FIELD	194:22	194:31	21	psCache -> hTIFF
LEAF_NODE	194:22	194:22	22	psCache
LEAF_NODE	194:29	194:29	22	->
LEAF_NODE	194:31	194:31	22	hTIFF
LEAF_NODE	194:36	194:36	20	)
LEAF_NODE	194:38	194:38	18	)
LEAF_NODE	194:39	194:39	16	;
LEAF_NODE	195:4	195:4	14	}
SELECTION	196:4	197:4	12	
KEYWORD	196:4	196:4	13	else
LEAF_NODE	196:4	196:4	14	else
STATEMENTS	197:4	207:4	13	
LEAF_NODE	197:4	197:4	14	{
STATEMENTS	198:5	204:5	14	
EXPR_STATEMENT	198:5	200:30	15	nTileID = TIFFComputeStrip ( psCache -> hTIFF , iTileY * psCache -> nBlockYSize , ( tsample_t ) iSample ) ;
EXPR	198:5	198:5	16	nTileID = TIFFComputeStrip ( psCache -> hTIFF , iTileY * psCache -> nBlockYSize , ( tsample_t ) iSample )
ASSIGN	198:5	198:15	17	nTileID = TIFFComputeStrip ( psCache -> hTIFF , iTileY * psCache -> nBlockYSize , ( tsample_t ) iSample )
LVAL	198:5	198:5	18	nTileID
FIELD	198:5	198:5	19	nTileID
LEAF_NODE	198:5	198:5	20	nTileID
ASSIGN_OP	198:13	198:13	18	=
LEAF_NODE	198:13	198:13	19	=
RVAL	198:15	198:15	18	TIFFComputeStrip ( psCache -> hTIFF , iTileY * psCache -> nBlockYSize , ( tsample_t ) iSample )
FUNCTION_CALL	198:15	200:29	19	TIFFComputeStrip ( psCache -> hTIFF , iTileY * psCache -> nBlockYSize , ( tsample_t ) iSample )
CALLEE	198:15	198:15	20	TIFFComputeStrip
LEAF_NODE	198:15	198:15	21	TIFFComputeStrip
LEAF_NODE	198:31	198:31	20	(
ARGUMENT	198:33	198:33	20	psCache -> hTIFF
FIELD	198:33	198:42	21	psCache -> hTIFF
LEAF_NODE	198:33	198:33	22	psCache
LEAF_NODE	198:40	198:40	22	->
LEAF_NODE	198:42	198:42	22	hTIFF
LEAF_NODE	198:47	198:47	20	,
ARGUMENT	199:9	199:18	20	iTileY * psCache -> nBlockYSize
FIELD	199:9	199:9	21	iTileY
LEAF_NODE	199:9	199:9	22	iTileY
LEAF_NODE	199:16	199:16	21	*
FIELD	199:18	199:27	21	psCache -> nBlockYSize
LEAF_NODE	199:18	199:18	22	psCache
LEAF_NODE	199:25	199:25	22	->
LEAF_NODE	199:27	199:27	22	nBlockYSize
LEAF_NODE	199:38	199:38	20	,
ARGUMENT	200:9	200:21	20	( tsample_t ) iSample
LEAF_NODE	200:9	200:9	21	(
TYPE_NAME	200:10	200:10	21	tsample_t
LEAF_NODE	200:10	200:10	22	tsample_t
LEAF_NODE	200:19	200:19	21	)
FIELD	200:21	200:21	21	iSample
LEAF_NODE	200:21	200:21	22	iSample
LEAF_NODE	200:29	200:29	20	)
LEAF_NODE	200:30	200:30	16	;
EXPR_STATEMENT	201:5	201:37	15	RowsInStrip = psCache -> nBlockYSize ;
EXPR	201:5	201:5	16	RowsInStrip = psCache -> nBlockYSize
ASSIGN	201:5	201:17	17	RowsInStrip = psCache -> nBlockYSize
LVAL	201:5	201:5	18	RowsInStrip
FIELD	201:5	201:5	19	RowsInStrip
LEAF_NODE	201:5	201:5	20	RowsInStrip
ASSIGN_OP	201:16	201:16	18	=
LEAF_NODE	201:16	201:16	19	=
RVAL	201:17	201:17	18	psCache -> nBlockYSize
FIELD	201:17	201:26	19	psCache -> nBlockYSize
LEAF_NODE	201:17	201:17	20	psCache
LEAF_NODE	201:24	201:24	20	->
LEAF_NODE	201:26	201:26	20	nBlockYSize
LEAF_NODE	201:37	201:37	16	;
SELECTION	202:5	203:6	15	
KEYWORD	202:5	202:5	16	if
LEAF_NODE	202:5	202:5	17	if
LEAF_NODE	202:8	202:8	16	(
CONDITION	202:9	202:9	16	( iTileY + 1 ) * psCache -> nBlockYSize > psCache -> nYSize
EXPR	202:9	202:41	17	( iTileY + 1 ) * psCache -> nBlockYSize > psCache -> nYSize
LEAF_NODE	202:9	202:9	18	(
FIELD	202:10	202:10	18	iTileY
LEAF_NODE	202:10	202:10	19	iTileY
LEAF_NODE	202:16	202:16	18	+
FIELD	202:17	202:17	18	1
LEAF_NODE	202:17	202:17	19	1
LEAF_NODE	202:18	202:18	18	)
LEAF_NODE	202:19	202:19	18	*
FIELD	202:20	202:29	18	psCache -> nBlockYSize
LEAF_NODE	202:20	202:20	19	psCache
LEAF_NODE	202:27	202:27	19	->
LEAF_NODE	202:29	202:29	19	nBlockYSize
REL_OPERATOR	202:40	202:40	18	>
LEAF_NODE	202:40	202:40	19	>
FIELD	202:41	202:50	18	psCache -> nYSize
LEAF_NODE	202:41	202:41	19	psCache
LEAF_NODE	202:48	202:48	19	->
LEAF_NODE	202:50	202:50	19	nYSize
LEAF_NODE	202:56	202:56	16	)
STATEMENTS	203:6	203:6	16	
EXPR_STATEMENT	203:6	203:61	17	RowsInStrip = psCache -> nYSize - iTileY * psCache -> nBlockYSize ;
EXPR	203:6	203:6	18	RowsInStrip = psCache -> nYSize - iTileY * psCache -> nBlockYSize
ASSIGN	203:6	203:18	19	RowsInStrip = psCache -> nYSize - iTileY * psCache -> nBlockYSize
LVAL	203:6	203:6	20	RowsInStrip
FIELD	203:6	203:6	21	RowsInStrip
LEAF_NODE	203:6	203:6	22	RowsInStrip
ASSIGN_OP	203:17	203:17	20	=
LEAF_NODE	203:17	203:17	21	=
RVAL	203:18	203:41	20	psCache -> nYSize - iTileY * psCache -> nBlockYSize
FIELD	203:18	203:27	21	psCache -> nYSize
LEAF_NODE	203:18	203:18	22	psCache
LEAF_NODE	203:25	203:25	22	->
LEAF_NODE	203:27	203:27	22	nYSize
LEAF_NODE	203:33	203:33	21	-
FIELD	203:34	203:34	21	iTileY
LEAF_NODE	203:34	203:34	22	iTileY
LEAF_NODE	203:40	203:40	21	*
FIELD	203:41	203:50	21	psCache -> nBlockYSize
LEAF_NODE	203:41	203:41	22	psCache
LEAF_NODE	203:48	203:48	22	->
LEAF_NODE	203:50	203:50	22	nBlockYSize
LEAF_NODE	203:61	203:61	18	;
EXPR_STATEMENT	204:5	206:53	15	TIFFWriteEncodedStrip ( psCache -> hTIFF , nTileID , pabyData , TIFFVStripSize ( psCache -> hTIFF , RowsInStrip ) ) ;
EXPR	204:5	204:5	16	TIFFWriteEncodedStrip ( psCache -> hTIFF , nTileID , pabyData , TIFFVStripSize ( psCache -> hTIFF , RowsInStrip ) )
FUNCTION_CALL	204:5	206:52	17	TIFFWriteEncodedStrip ( psCache -> hTIFF , nTileID , pabyData , TIFFVStripSize ( psCache -> hTIFF , RowsInStrip ) )
CALLEE	204:5	204:5	18	TIFFWriteEncodedStrip
LEAF_NODE	204:5	204:5	19	TIFFWriteEncodedStrip
LEAF_NODE	204:26	204:26	18	(
ARGUMENT	204:28	204:28	18	psCache -> hTIFF
FIELD	204:28	204:37	19	psCache -> hTIFF
LEAF_NODE	204:28	204:28	20	psCache
LEAF_NODE	204:35	204:35	20	->
LEAF_NODE	204:37	204:37	20	hTIFF
LEAF_NODE	204:42	204:42	18	,
ARGUMENT	204:44	204:44	18	nTileID
FIELD	204:44	204:44	19	nTileID
LEAF_NODE	204:44	204:44	20	nTileID
LEAF_NODE	204:51	204:51	18	,
ARGUMENT	205:9	205:9	18	pabyData
FIELD	205:9	205:9	19	pabyData
LEAF_NODE	205:9	205:9	20	pabyData
LEAF_NODE	205:17	205:17	18	,
ARGUMENT	206:9	206:9	18	TIFFVStripSize ( psCache -> hTIFF , RowsInStrip )
FUNCTION_CALL	206:9	206:50	19	TIFFVStripSize ( psCache -> hTIFF , RowsInStrip )
CALLEE	206:9	206:9	20	TIFFVStripSize
LEAF_NODE	206:9	206:9	21	TIFFVStripSize
LEAF_NODE	206:23	206:23	20	(
ARGUMENT	206:24	206:24	20	psCache -> hTIFF
FIELD	206:24	206:33	21	psCache -> hTIFF
LEAF_NODE	206:24	206:24	22	psCache
LEAF_NODE	206:31	206:31	22	->
LEAF_NODE	206:33	206:33	22	hTIFF
LEAF_NODE	206:38	206:38	20	,
ARGUMENT	206:39	206:39	20	RowsInStrip
FIELD	206:39	206:39	21	RowsInStrip
LEAF_NODE	206:39	206:39	22	RowsInStrip
LEAF_NODE	206:50	206:50	20	)
LEAF_NODE	206:52	206:52	18	)
LEAF_NODE	206:53	206:53	16	;
LEAF_NODE	207:4	207:4	14	}
LEAF_NODE	208:3	208:3	11	}
LEAF_NODE	210:2	210:2	8	}
SELECTION	211:2	212:2	6	
KEYWORD	211:2	211:2	7	else
LEAF_NODE	211:2	211:2	8	else
STATEMENTS	212:2	237:2	7	
LEAF_NODE	212:2	212:2	8	{
STATEMENTS	213:3	225:3	8	
EXPR_STATEMENT	213:3	213:59	9	pabyData = TIFFGetOvrBlock ( psCache , iTileX , iTileY , 0 ) ;
EXPR	213:3	213:3	10	pabyData = TIFFGetOvrBlock ( psCache , iTileX , iTileY , 0 )
ASSIGN	213:3	213:14	11	pabyData = TIFFGetOvrBlock ( psCache , iTileX , iTileY , 0 )
LVAL	213:3	213:3	12	pabyData
FIELD	213:3	213:3	13	pabyData
LEAF_NODE	213:3	213:3	14	pabyData
ASSIGN_OP	213:12	213:12	12	=
LEAF_NODE	213:12	213:12	13	=
RVAL	213:14	213:14	12	TIFFGetOvrBlock ( psCache , iTileX , iTileY , 0 )
FUNCTION_CALL	213:14	213:58	13	TIFFGetOvrBlock ( psCache , iTileX , iTileY , 0 )
CALLEE	213:14	213:14	14	TIFFGetOvrBlock
LEAF_NODE	213:14	213:14	15	TIFFGetOvrBlock
LEAF_NODE	213:29	213:29	14	(
ARGUMENT	213:31	213:31	14	psCache
FIELD	213:31	213:31	15	psCache
LEAF_NODE	213:31	213:31	16	psCache
LEAF_NODE	213:38	213:38	14	,
ARGUMENT	213:40	213:40	14	iTileX
FIELD	213:40	213:40	15	iTileX
LEAF_NODE	213:40	213:40	16	iTileX
LEAF_NODE	213:46	213:46	14	,
ARGUMENT	213:48	213:48	14	iTileY
FIELD	213:48	213:48	15	iTileY
LEAF_NODE	213:48	213:48	16	iTileY
LEAF_NODE	213:54	213:54	14	,
ARGUMENT	213:56	213:56	14	0
FIELD	213:56	213:56	15	0
LEAF_NODE	213:56	213:56	16	0
LEAF_NODE	213:58	213:58	14	)
LEAF_NODE	213:59	213:59	10	;
SELECTION	215:3	216:3	9	
KEYWORD	215:3	215:3	10	if
LEAF_NODE	215:3	215:3	11	if
LEAF_NODE	215:5	215:5	10	(
CONDITION	215:7	215:7	10	psCache -> bTiled
EXPR	215:7	215:7	11	psCache -> bTiled
FIELD	215:7	215:16	12	psCache -> bTiled
LEAF_NODE	215:7	215:7	13	psCache
LEAF_NODE	215:14	215:14	13	->
LEAF_NODE	215:16	215:16	13	bTiled
LEAF_NODE	215:23	215:23	10	)
STATEMENTS	216:3	224:3	10	
LEAF_NODE	216:3	216:3	11	{
STATEMENTS	217:4	221:4	11	
EXPR_STATEMENT	217:4	220:14	12	nTileID = TIFFComputeTile ( psCache -> hTIFF , iTileX * psCache -> nBlockXSize , iTileY * psCache -> nBlockYSize , 0 , 0 ) ;
EXPR	217:4	217:4	13	nTileID = TIFFComputeTile ( psCache -> hTIFF , iTileX * psCache -> nBlockXSize , iTileY * psCache -> nBlockYSize , 0 , 0 )
ASSIGN	217:4	217:14	14	nTileID = TIFFComputeTile ( psCache -> hTIFF , iTileX * psCache -> nBlockXSize , iTileY * psCache -> nBlockYSize , 0 , 0 )
LVAL	217:4	217:4	15	nTileID
FIELD	217:4	217:4	16	nTileID
LEAF_NODE	217:4	217:4	17	nTileID
ASSIGN_OP	217:12	217:12	15	=
LEAF_NODE	217:12	217:12	16	=
RVAL	217:14	217:14	15	TIFFComputeTile ( psCache -> hTIFF , iTileX * psCache -> nBlockXSize , iTileY * psCache -> nBlockYSize , 0 , 0 )
FUNCTION_CALL	217:14	220:13	16	TIFFComputeTile ( psCache -> hTIFF , iTileX * psCache -> nBlockXSize , iTileY * psCache -> nBlockYSize , 0 , 0 )
CALLEE	217:14	217:14	17	TIFFComputeTile
LEAF_NODE	217:14	217:14	18	TIFFComputeTile
LEAF_NODE	217:29	217:29	17	(
ARGUMENT	217:31	217:31	17	psCache -> hTIFF
FIELD	217:31	217:40	18	psCache -> hTIFF
LEAF_NODE	217:31	217:31	19	psCache
LEAF_NODE	217:38	217:38	19	->
LEAF_NODE	217:40	217:40	19	hTIFF
LEAF_NODE	217:45	217:45	17	,
ARGUMENT	218:8	218:17	17	iTileX * psCache -> nBlockXSize
FIELD	218:8	218:8	18	iTileX
LEAF_NODE	218:8	218:8	19	iTileX
LEAF_NODE	218:15	218:15	18	*
FIELD	218:17	218:26	18	psCache -> nBlockXSize
LEAF_NODE	218:17	218:17	19	psCache
LEAF_NODE	218:24	218:24	19	->
LEAF_NODE	218:26	218:26	19	nBlockXSize
LEAF_NODE	218:37	218:37	17	,
ARGUMENT	219:8	219:17	17	iTileY * psCache -> nBlockYSize
FIELD	219:8	219:8	18	iTileY
LEAF_NODE	219:8	219:8	19	iTileY
LEAF_NODE	219:15	219:15	18	*
FIELD	219:17	219:26	18	psCache -> nBlockYSize
LEAF_NODE	219:17	219:17	19	psCache
LEAF_NODE	219:24	219:24	19	->
LEAF_NODE	219:26	219:26	19	nBlockYSize
LEAF_NODE	219:37	219:37	17	,
ARGUMENT	220:8	220:8	17	0
FIELD	220:8	220:8	18	0
LEAF_NODE	220:8	220:8	19	0
LEAF_NODE	220:9	220:9	17	,
ARGUMENT	220:11	220:11	17	0
FIELD	220:11	220:11	18	0
LEAF_NODE	220:11	220:11	19	0
LEAF_NODE	220:13	220:13	17	)
LEAF_NODE	220:14	220:14	13	;
EXPR_STATEMENT	221:4	223:38	12	TIFFWriteEncodedTile ( psCache -> hTIFF , nTileID , pabyData , TIFFTileSize ( psCache -> hTIFF ) ) ;
EXPR	221:4	221:4	13	TIFFWriteEncodedTile ( psCache -> hTIFF , nTileID , pabyData , TIFFTileSize ( psCache -> hTIFF ) )
FUNCTION_CALL	221:4	223:37	14	TIFFWriteEncodedTile ( psCache -> hTIFF , nTileID , pabyData , TIFFTileSize ( psCache -> hTIFF ) )
CALLEE	221:4	221:4	15	TIFFWriteEncodedTile
LEAF_NODE	221:4	221:4	16	TIFFWriteEncodedTile
LEAF_NODE	221:24	221:24	15	(
ARGUMENT	221:26	221:26	15	psCache -> hTIFF
FIELD	221:26	221:35	16	psCache -> hTIFF
LEAF_NODE	221:26	221:26	17	psCache
LEAF_NODE	221:33	221:33	17	->
LEAF_NODE	221:35	221:35	17	hTIFF
LEAF_NODE	221:40	221:40	15	,
ARGUMENT	221:42	221:42	15	nTileID
FIELD	221:42	221:42	16	nTileID
LEAF_NODE	221:42	221:42	17	nTileID
LEAF_NODE	221:49	221:49	15	,
ARGUMENT	222:8	222:8	15	pabyData
FIELD	222:8	222:8	16	pabyData
LEAF_NODE	222:8	222:8	17	pabyData
LEAF_NODE	222:16	222:16	15	,
ARGUMENT	223:8	223:8	15	TIFFTileSize ( psCache -> hTIFF )
FUNCTION_CALL	223:8	223:35	16	TIFFTileSize ( psCache -> hTIFF )
CALLEE	223:8	223:8	17	TIFFTileSize
LEAF_NODE	223:8	223:8	18	TIFFTileSize
LEAF_NODE	223:20	223:20	17	(
ARGUMENT	223:21	223:21	17	psCache -> hTIFF
FIELD	223:21	223:30	18	psCache -> hTIFF
LEAF_NODE	223:21	223:21	19	psCache
LEAF_NODE	223:28	223:28	19	->
LEAF_NODE	223:30	223:30	19	hTIFF
LEAF_NODE	223:35	223:35	17	)
LEAF_NODE	223:37	223:37	15	)
LEAF_NODE	223:38	223:38	13	;
LEAF_NODE	224:3	224:3	11	}
SELECTION	225:3	226:3	9	
KEYWORD	225:3	225:3	10	else
LEAF_NODE	225:3	225:3	11	else
STATEMENTS	226:3	236:3	10	
LEAF_NODE	226:3	226:3	11	{
STATEMENTS	227:4	233:4	11	
EXPR_STATEMENT	227:4	229:11	12	nTileID = TIFFComputeStrip ( psCache -> hTIFF , iTileY * psCache -> nBlockYSize , 0 ) ;
EXPR	227:4	227:4	13	nTileID = TIFFComputeStrip ( psCache -> hTIFF , iTileY * psCache -> nBlockYSize , 0 )
ASSIGN	227:4	227:14	14	nTileID = TIFFComputeStrip ( psCache -> hTIFF , iTileY * psCache -> nBlockYSize , 0 )
LVAL	227:4	227:4	15	nTileID
FIELD	227:4	227:4	16	nTileID
LEAF_NODE	227:4	227:4	17	nTileID
ASSIGN_OP	227:12	227:12	15	=
LEAF_NODE	227:12	227:12	16	=
RVAL	227:14	227:14	15	TIFFComputeStrip ( psCache -> hTIFF , iTileY * psCache -> nBlockYSize , 0 )
FUNCTION_CALL	227:14	229:10	16	TIFFComputeStrip ( psCache -> hTIFF , iTileY * psCache -> nBlockYSize , 0 )
CALLEE	227:14	227:14	17	TIFFComputeStrip
LEAF_NODE	227:14	227:14	18	TIFFComputeStrip
LEAF_NODE	227:30	227:30	17	(
ARGUMENT	227:32	227:32	17	psCache -> hTIFF
FIELD	227:32	227:41	18	psCache -> hTIFF
LEAF_NODE	227:32	227:32	19	psCache
LEAF_NODE	227:39	227:39	19	->
LEAF_NODE	227:41	227:41	19	hTIFF
LEAF_NODE	227:46	227:46	17	,
ARGUMENT	228:8	228:17	17	iTileY * psCache -> nBlockYSize
FIELD	228:8	228:8	18	iTileY
LEAF_NODE	228:8	228:8	19	iTileY
LEAF_NODE	228:15	228:15	18	*
FIELD	228:17	228:26	18	psCache -> nBlockYSize
LEAF_NODE	228:17	228:17	19	psCache
LEAF_NODE	228:24	228:24	19	->
LEAF_NODE	228:26	228:26	19	nBlockYSize
LEAF_NODE	228:37	228:37	17	,
ARGUMENT	229:8	229:8	17	0
FIELD	229:8	229:8	18	0
LEAF_NODE	229:8	229:8	19	0
LEAF_NODE	229:10	229:10	17	)
LEAF_NODE	229:11	229:11	13	;
EXPR_STATEMENT	230:4	230:36	12	RowsInStrip = psCache -> nBlockYSize ;
EXPR	230:4	230:4	13	RowsInStrip = psCache -> nBlockYSize
ASSIGN	230:4	230:16	14	RowsInStrip = psCache -> nBlockYSize
LVAL	230:4	230:4	15	RowsInStrip
FIELD	230:4	230:4	16	RowsInStrip
LEAF_NODE	230:4	230:4	17	RowsInStrip
ASSIGN_OP	230:15	230:15	15	=
LEAF_NODE	230:15	230:15	16	=
RVAL	230:16	230:16	15	psCache -> nBlockYSize
FIELD	230:16	230:25	16	psCache -> nBlockYSize
LEAF_NODE	230:16	230:16	17	psCache
LEAF_NODE	230:23	230:23	17	->
LEAF_NODE	230:25	230:25	17	nBlockYSize
LEAF_NODE	230:36	230:36	13	;
SELECTION	231:4	232:5	12	
KEYWORD	231:4	231:4	13	if
LEAF_NODE	231:4	231:4	14	if
LEAF_NODE	231:7	231:7	13	(
CONDITION	231:8	231:8	13	( iTileY + 1 ) * psCache -> nBlockYSize > psCache -> nYSize
EXPR	231:8	231:40	14	( iTileY + 1 ) * psCache -> nBlockYSize > psCache -> nYSize
LEAF_NODE	231:8	231:8	15	(
FIELD	231:9	231:9	15	iTileY
LEAF_NODE	231:9	231:9	16	iTileY
LEAF_NODE	231:15	231:15	15	+
FIELD	231:16	231:16	15	1
LEAF_NODE	231:16	231:16	16	1
LEAF_NODE	231:17	231:17	15	)
LEAF_NODE	231:18	231:18	15	*
FIELD	231:19	231:28	15	psCache -> nBlockYSize
LEAF_NODE	231:19	231:19	16	psCache
LEAF_NODE	231:26	231:26	16	->
LEAF_NODE	231:28	231:28	16	nBlockYSize
REL_OPERATOR	231:39	231:39	15	>
LEAF_NODE	231:39	231:39	16	>
FIELD	231:40	231:49	15	psCache -> nYSize
LEAF_NODE	231:40	231:40	16	psCache
LEAF_NODE	231:47	231:47	16	->
LEAF_NODE	231:49	231:49	16	nYSize
LEAF_NODE	231:55	231:55	13	)
STATEMENTS	232:5	232:5	13	
EXPR_STATEMENT	232:5	232:60	14	RowsInStrip = psCache -> nYSize - iTileY * psCache -> nBlockYSize ;
EXPR	232:5	232:5	15	RowsInStrip = psCache -> nYSize - iTileY * psCache -> nBlockYSize
ASSIGN	232:5	232:17	16	RowsInStrip = psCache -> nYSize - iTileY * psCache -> nBlockYSize
LVAL	232:5	232:5	17	RowsInStrip
FIELD	232:5	232:5	18	RowsInStrip
LEAF_NODE	232:5	232:5	19	RowsInStrip
ASSIGN_OP	232:16	232:16	17	=
LEAF_NODE	232:16	232:16	18	=
RVAL	232:17	232:40	17	psCache -> nYSize - iTileY * psCache -> nBlockYSize
FIELD	232:17	232:26	18	psCache -> nYSize
LEAF_NODE	232:17	232:17	19	psCache
LEAF_NODE	232:24	232:24	19	->
LEAF_NODE	232:26	232:26	19	nYSize
LEAF_NODE	232:32	232:32	18	-
FIELD	232:33	232:33	18	iTileY
LEAF_NODE	232:33	232:33	19	iTileY
LEAF_NODE	232:39	232:39	18	*
FIELD	232:40	232:49	18	psCache -> nBlockYSize
LEAF_NODE	232:40	232:40	19	psCache
LEAF_NODE	232:47	232:47	19	->
LEAF_NODE	232:49	232:49	19	nBlockYSize
LEAF_NODE	232:60	232:60	15	;
EXPR_STATEMENT	233:4	235:52	12	TIFFWriteEncodedStrip ( psCache -> hTIFF , nTileID , pabyData , TIFFVStripSize ( psCache -> hTIFF , RowsInStrip ) ) ;
EXPR	233:4	233:4	13	TIFFWriteEncodedStrip ( psCache -> hTIFF , nTileID , pabyData , TIFFVStripSize ( psCache -> hTIFF , RowsInStrip ) )
FUNCTION_CALL	233:4	235:51	14	TIFFWriteEncodedStrip ( psCache -> hTIFF , nTileID , pabyData , TIFFVStripSize ( psCache -> hTIFF , RowsInStrip ) )
CALLEE	233:4	233:4	15	TIFFWriteEncodedStrip
LEAF_NODE	233:4	233:4	16	TIFFWriteEncodedStrip
LEAF_NODE	233:25	233:25	15	(
ARGUMENT	233:27	233:27	15	psCache -> hTIFF
FIELD	233:27	233:36	16	psCache -> hTIFF
LEAF_NODE	233:27	233:27	17	psCache
LEAF_NODE	233:34	233:34	17	->
LEAF_NODE	233:36	233:36	17	hTIFF
LEAF_NODE	233:41	233:41	15	,
ARGUMENT	233:43	233:43	15	nTileID
FIELD	233:43	233:43	16	nTileID
LEAF_NODE	233:43	233:43	17	nTileID
LEAF_NODE	233:50	233:50	15	,
ARGUMENT	234:8	234:8	15	pabyData
FIELD	234:8	234:8	16	pabyData
LEAF_NODE	234:8	234:8	17	pabyData
LEAF_NODE	234:16	234:16	15	,
ARGUMENT	235:8	235:8	15	TIFFVStripSize ( psCache -> hTIFF , RowsInStrip )
FUNCTION_CALL	235:8	235:49	16	TIFFVStripSize ( psCache -> hTIFF , RowsInStrip )
CALLEE	235:8	235:8	17	TIFFVStripSize
LEAF_NODE	235:8	235:8	18	TIFFVStripSize
LEAF_NODE	235:22	235:22	17	(
ARGUMENT	235:23	235:23	17	psCache -> hTIFF
FIELD	235:23	235:32	18	psCache -> hTIFF
LEAF_NODE	235:23	235:23	19	psCache
LEAF_NODE	235:30	235:30	19	->
LEAF_NODE	235:32	235:32	19	hTIFF
LEAF_NODE	235:37	235:37	17	,
ARGUMENT	235:38	235:38	17	RowsInStrip
FIELD	235:38	235:38	18	RowsInStrip
LEAF_NODE	235:38	235:38	19	RowsInStrip
LEAF_NODE	235:49	235:49	17	)
LEAF_NODE	235:51	235:51	15	)
LEAF_NODE	235:52	235:52	13	;
LEAF_NODE	236:3	236:3	11	}
LEAF_NODE	237:2	237:2	8	}
LEAF_NODE	238:1	238:1	5	}
EXPR_STATEMENT	244:4	244:38	3	pabyData = psCache -> pabyRow1Blocks ;
EXPR	244:4	244:4	4	pabyData = psCache -> pabyRow1Blocks
ASSIGN	244:4	244:15	5	pabyData = psCache -> pabyRow1Blocks
LVAL	244:4	244:4	6	pabyData
FIELD	244:4	244:4	7	pabyData
LEAF_NODE	244:4	244:4	8	pabyData
ASSIGN_OP	244:13	244:13	6	=
LEAF_NODE	244:13	244:13	7	=
RVAL	244:15	244:15	6	psCache -> pabyRow1Blocks
FIELD	244:15	244:24	7	psCache -> pabyRow1Blocks
LEAF_NODE	244:15	244:15	8	psCache
LEAF_NODE	244:22	244:22	8	->
LEAF_NODE	244:24	244:24	8	pabyRow1Blocks
LEAF_NODE	244:38	244:38	4	;
EXPR_STATEMENT	245:4	245:53	3	psCache -> pabyRow1Blocks = psCache -> pabyRow2Blocks ;
EXPR	245:4	245:4	4	psCache -> pabyRow1Blocks = psCache -> pabyRow2Blocks
ASSIGN	245:4	245:30	5	psCache -> pabyRow1Blocks = psCache -> pabyRow2Blocks
LVAL	245:4	245:4	6	psCache -> pabyRow1Blocks
FIELD	245:4	245:13	7	psCache -> pabyRow1Blocks
LEAF_NODE	245:4	245:4	8	psCache
LEAF_NODE	245:11	245:11	8	->
LEAF_NODE	245:13	245:13	8	pabyRow1Blocks
ASSIGN_OP	245:28	245:28	6	=
LEAF_NODE	245:28	245:28	7	=
RVAL	245:30	245:30	6	psCache -> pabyRow2Blocks
FIELD	245:30	245:39	7	psCache -> pabyRow2Blocks
LEAF_NODE	245:30	245:30	8	psCache
LEAF_NODE	245:37	245:37	8	->
LEAF_NODE	245:39	245:39	8	pabyRow2Blocks
LEAF_NODE	245:53	245:53	4	;
EXPR_STATEMENT	246:4	246:38	3	psCache -> pabyRow2Blocks = pabyData ;
EXPR	246:4	246:4	4	psCache -> pabyRow2Blocks = pabyData
ASSIGN	246:4	246:30	5	psCache -> pabyRow2Blocks = pabyData
LVAL	246:4	246:4	6	psCache -> pabyRow2Blocks
FIELD	246:4	246:13	7	psCache -> pabyRow2Blocks
LEAF_NODE	246:4	246:4	8	psCache
LEAF_NODE	246:11	246:11	8	->
LEAF_NODE	246:13	246:13	8	pabyRow2Blocks
ASSIGN_OP	246:28	246:28	6	=
LEAF_NODE	246:28	246:28	7	=
RVAL	246:30	246:30	6	pabyData
FIELD	246:30	246:30	7	pabyData
LEAF_NODE	246:30	246:30	8	pabyData
LEAF_NODE	246:38	246:38	4	;
EXPR_STATEMENT	248:4	248:53	3	_TIFFmemset ( pabyData , 0 , psCache -> nBytesPerRow ) ;
EXPR	248:4	248:4	4	_TIFFmemset ( pabyData , 0 , psCache -> nBytesPerRow )
FUNCTION_CALL	248:4	248:52	5	_TIFFmemset ( pabyData , 0 , psCache -> nBytesPerRow )
CALLEE	248:4	248:4	6	_TIFFmemset
LEAF_NODE	248:4	248:4	7	_TIFFmemset
LEAF_NODE	248:15	248:15	6	(
ARGUMENT	248:17	248:17	6	pabyData
FIELD	248:17	248:17	7	pabyData
LEAF_NODE	248:17	248:17	8	pabyData
LEAF_NODE	248:25	248:25	6	,
ARGUMENT	248:27	248:27	6	0
FIELD	248:27	248:27	7	0
LEAF_NODE	248:27	248:27	8	0
LEAF_NODE	248:28	248:28	6	,
ARGUMENT	248:30	248:30	6	psCache -> nBytesPerRow
FIELD	248:30	248:39	7	psCache -> nBytesPerRow
LEAF_NODE	248:30	248:30	8	psCache
LEAF_NODE	248:37	248:37	8	->
LEAF_NODE	248:39	248:39	8	nBytesPerRow
LEAF_NODE	248:52	248:52	6	)
LEAF_NODE	248:53	248:53	4	;
EXPR_STATEMENT	250:4	250:27	3	psCache -> nBlockOffset ++ ;
EXPR	250:4	250:4	4	psCache -> nBlockOffset ++
FIELD	250:4	250:25	5	psCache -> nBlockOffset ++
LEAF_NODE	250:4	250:4	6	psCache
LEAF_NODE	250:11	250:11	6	->
LEAF_NODE	250:13	250:13	6	nBlockOffset
LEAF_NODE	250:25	250:25	6	++
LEAF_NODE	250:27	250:27	4	;
EXPR_STATEMENT	255:4	255:31	3	TIFFFlush ( psCache -> hTIFF ) ;
EXPR	255:4	255:4	4	TIFFFlush ( psCache -> hTIFF )
FUNCTION_CALL	255:4	255:30	5	TIFFFlush ( psCache -> hTIFF )
CALLEE	255:4	255:4	6	TIFFFlush
LEAF_NODE	255:4	255:4	7	TIFFFlush
LEAF_NODE	255:13	255:13	6	(
ARGUMENT	255:15	255:15	6	psCache -> hTIFF
FIELD	255:15	255:24	7	psCache -> hTIFF
LEAF_NODE	255:15	255:15	8	psCache
LEAF_NODE	255:22	255:22	8	->
LEAF_NODE	255:24	255:24	8	hTIFF
LEAF_NODE	255:30	255:30	6	)
LEAF_NODE	255:31	255:31	4	;
EXPR_STATEMENT	257:4	257:57	3	TIFFSetSubDirectory ( psCache -> hTIFF , nBaseDirOffset ) ;
EXPR	257:4	257:4	4	TIFFSetSubDirectory ( psCache -> hTIFF , nBaseDirOffset )
FUNCTION_CALL	257:4	257:56	5	TIFFSetSubDirectory ( psCache -> hTIFF , nBaseDirOffset )
CALLEE	257:4	257:4	6	TIFFSetSubDirectory
LEAF_NODE	257:4	257:4	7	TIFFSetSubDirectory
LEAF_NODE	257:23	257:23	6	(
ARGUMENT	257:25	257:25	6	psCache -> hTIFF
FIELD	257:25	257:34	7	psCache -> hTIFF
LEAF_NODE	257:25	257:25	8	psCache
LEAF_NODE	257:32	257:32	8	->
LEAF_NODE	257:34	257:34	8	hTIFF
LEAF_NODE	257:39	257:39	6	,
ARGUMENT	257:41	257:41	6	nBaseDirOffset
FIELD	257:41	257:41	7	nBaseDirOffset
LEAF_NODE	257:41	257:41	8	nBaseDirOffset
LEAF_NODE	257:56	257:56	6	)
LEAF_NODE	257:57	257:57	4	;
LEAF_NODE	259:0	259:0	2	}
FUNCTION_DEF	267:0	293:0	1	
RETURN_TYPE	267:0	267:14	2	unsigned char *
TYPE_NAME	267:0	267:9	3	unsigned char
LEAF_NODE	267:0	267:0	4	unsigned
LEAF_NODE	267:9	267:9	4	char
LEAF_NODE	267:14	267:14	3	*
FUNCTION_NAME	267:15	267:15	2	TIFFGetOvrBlock
LEAF_NODE	267:15	267:15	3	TIFFGetOvrBlock
PARAMETER_LIST	267:30	268:44	2	( TIFFOvrCache * psCache , int iTileX , int iTileY , int iSample )
LEAF_NODE	267:30	267:30	3	(
PARAMETER_DECL	267:32	267:46	3	TIFFOvrCache * psCache
TYPE	267:32	267:45	4	TIFFOvrCache *
TYPE_NAME	267:32	267:32	5	TIFFOvrCache
LEAF_NODE	267:32	267:32	6	TIFFOvrCache
POINTER	267:45	267:45	5	*
LEAF_NODE	267:45	267:45	6	*
NAME	267:46	267:46	4	psCache
LEAF_NODE	267:46	267:46	5	psCache
LEAF_NODE	267:53	267:53	3	,
PARAMETER_DECL	267:55	267:59	3	int iTileX
TYPE	267:55	267:55	4	int
TYPE_NAME	267:55	267:55	5	int
LEAF_NODE	267:55	267:55	6	int
NAME	267:59	267:59	4	iTileX
LEAF_NODE	267:59	267:59	5	iTileX
LEAF_NODE	267:65	267:65	3	,
PARAMETER_DECL	267:67	267:71	3	int iTileY
TYPE	267:67	267:67	4	int
TYPE_NAME	267:67	267:67	5	int
LEAF_NODE	267:67	267:67	6	int
NAME	267:71	267:71	4	iTileY
LEAF_NODE	267:71	267:71	5	iTileY
LEAF_NODE	267:77	267:77	3	,
PARAMETER_DECL	268:32	268:36	3	int iSample
TYPE	268:32	268:32	4	int
TYPE_NAME	268:32	268:32	5	int
LEAF_NODE	268:32	268:32	6	int
NAME	268:36	268:36	4	iSample
LEAF_NODE	268:36	268:36	5	iSample
LEAF_NODE	268:44	268:44	3	)
LEAF_NODE	270:0	270:0	2	{
STATEMENTS	271:4	291:4	2	
SIMPLE_DECL	271:4	271:26	3	long nRowOffset ;
VAR_DECL	271:4	271:16	4	long nRowOffset
TYPE	271:4	271:4	5	long
TYPE_NAME	271:4	271:4	6	long
LEAF_NODE	271:4	271:4	7	long
NAME	271:16	271:16	5	nRowOffset
LEAF_NODE	271:16	271:16	6	nRowOffset
LEAF_NODE	271:26	271:26	4	;
SELECTION	273:4	274:8	3	
KEYWORD	273:4	273:4	4	if
LEAF_NODE	273:4	273:4	5	if
LEAF_NODE	273:7	273:7	4	(
CONDITION	273:9	273:9	4	iTileY > psCache -> nBlockOffset + 1
EXPR	273:9	273:42	5	iTileY > psCache -> nBlockOffset + 1
FIELD	273:9	273:9	6	iTileY
LEAF_NODE	273:9	273:9	7	iTileY
REL_OPERATOR	273:16	273:16	6	>
LEAF_NODE	273:16	273:16	7	>
FIELD	273:18	273:27	6	psCache -> nBlockOffset
LEAF_NODE	273:18	273:18	7	psCache
LEAF_NODE	273:25	273:25	7	->
LEAF_NODE	273:27	273:27	7	nBlockOffset
LEAF_NODE	273:40	273:40	6	+
FIELD	273:42	273:42	6	1
LEAF_NODE	273:42	273:42	7	1
LEAF_NODE	273:44	273:44	4	)
STATEMENTS	274:8	274:8	4	
EXPR_STATEMENT	274:8	274:34	5	TIFFWriteOvrRow ( psCache ) ;
EXPR	274:8	274:8	6	TIFFWriteOvrRow ( psCache )
FUNCTION_CALL	274:8	274:33	7	TIFFWriteOvrRow ( psCache )
CALLEE	274:8	274:8	8	TIFFWriteOvrRow
LEAF_NODE	274:8	274:8	9	TIFFWriteOvrRow
LEAF_NODE	274:23	274:23	8	(
ARGUMENT	274:25	274:25	8	psCache
FIELD	274:25	274:25	9	psCache
LEAF_NODE	274:25	274:25	10	psCache
LEAF_NODE	274:33	274:33	8	)
LEAF_NODE	274:34	274:34	6	;
EXPR_STATEMENT	276:4	276:60	3	assert ( iTileX >= 0 && iTileX < psCache -> nBlocksPerRow ) ;
EXPR	276:4	276:4	4	assert ( iTileX >= 0 && iTileX < psCache -> nBlocksPerRow )
FUNCTION_CALL	276:4	276:59	5	assert ( iTileX >= 0 && iTileX < psCache -> nBlocksPerRow )
CALLEE	276:4	276:4	6	assert
LEAF_NODE	276:4	276:4	7	assert
LEAF_NODE	276:10	276:10	6	(
ARGUMENT	276:12	276:12	6	iTileX >= 0 && iTileX < psCache -> nBlocksPerRow
AND	276:12	276:27	7	iTileX >= 0 && iTileX < psCache -> nBlocksPerRow
EXPR	276:12	276:22	8	iTileX >= 0
FIELD	276:12	276:12	9	iTileX
LEAF_NODE	276:12	276:12	10	iTileX
REL_OPERATOR	276:19	276:19	9	>=
LEAF_NODE	276:19	276:19	10	>=
FIELD	276:22	276:22	9	0
LEAF_NODE	276:22	276:22	10	0
LEAF_NODE	276:24	276:24	8	&&
EXPR	276:27	276:36	8	iTileX < psCache -> nBlocksPerRow
FIELD	276:27	276:27	9	iTileX
LEAF_NODE	276:27	276:27	10	iTileX
REL_OPERATOR	276:34	276:34	9	<
LEAF_NODE	276:34	276:34	10	<
FIELD	276:36	276:45	9	psCache -> nBlocksPerRow
LEAF_NODE	276:36	276:36	10	psCache
LEAF_NODE	276:43	276:43	10	->
LEAF_NODE	276:45	276:45	10	nBlocksPerRow
LEAF_NODE	276:59	276:59	6	)
LEAF_NODE	276:60	276:60	4	;
EXPR_STATEMENT	277:4	277:63	3	assert ( iTileY >= 0 && iTileY < psCache -> nBlocksPerColumn ) ;
EXPR	277:4	277:4	4	assert ( iTileY >= 0 && iTileY < psCache -> nBlocksPerColumn )
FUNCTION_CALL	277:4	277:62	5	assert ( iTileY >= 0 && iTileY < psCache -> nBlocksPerColumn )
CALLEE	277:4	277:4	6	assert
LEAF_NODE	277:4	277:4	7	assert
LEAF_NODE	277:10	277:10	6	(
ARGUMENT	277:12	277:12	6	iTileY >= 0 && iTileY < psCache -> nBlocksPerColumn
AND	277:12	277:27	7	iTileY >= 0 && iTileY < psCache -> nBlocksPerColumn
EXPR	277:12	277:22	8	iTileY >= 0
FIELD	277:12	277:12	9	iTileY
LEAF_NODE	277:12	277:12	10	iTileY
REL_OPERATOR	277:19	277:19	9	>=
LEAF_NODE	277:19	277:19	10	>=
FIELD	277:22	277:22	9	0
LEAF_NODE	277:22	277:22	10	0
LEAF_NODE	277:24	277:24	8	&&
EXPR	277:27	277:36	8	iTileY < psCache -> nBlocksPerColumn
FIELD	277:27	277:27	9	iTileY
LEAF_NODE	277:27	277:27	10	iTileY
REL_OPERATOR	277:34	277:34	9	<
LEAF_NODE	277:34	277:34	10	<
FIELD	277:36	277:45	9	psCache -> nBlocksPerColumn
LEAF_NODE	277:36	277:36	10	psCache
LEAF_NODE	277:43	277:43	10	->
LEAF_NODE	277:45	277:45	10	nBlocksPerColumn
LEAF_NODE	277:62	277:62	6	)
LEAF_NODE	277:63	277:63	4	;
EXPR_STATEMENT	278:4	279:49	3	assert ( iTileY >= psCache -> nBlockOffset && iTileY < psCache -> nBlockOffset + 2 ) ;
EXPR	278:4	278:4	4	assert ( iTileY >= psCache -> nBlockOffset && iTileY < psCache -> nBlockOffset + 2 )
FUNCTION_CALL	278:4	279:48	5	assert ( iTileY >= psCache -> nBlockOffset && iTileY < psCache -> nBlockOffset + 2 )
CALLEE	278:4	278:4	6	assert
LEAF_NODE	278:4	278:4	7	assert
LEAF_NODE	278:10	278:10	6	(
ARGUMENT	278:12	278:12	6	iTileY >= psCache -> nBlockOffset && iTileY < psCache -> nBlockOffset + 2
AND	278:12	279:15	7	iTileY >= psCache -> nBlockOffset && iTileY < psCache -> nBlockOffset + 2
EXPR	278:12	278:22	8	iTileY >= psCache -> nBlockOffset
FIELD	278:12	278:12	9	iTileY
LEAF_NODE	278:12	278:12	10	iTileY
REL_OPERATOR	278:19	278:19	9	>=
LEAF_NODE	278:19	278:19	10	>=
FIELD	278:22	278:31	9	psCache -> nBlockOffset
LEAF_NODE	278:22	278:22	10	psCache
LEAF_NODE	278:29	278:29	10	->
LEAF_NODE	278:31	278:31	10	nBlockOffset
LEAF_NODE	279:12	279:12	8	&&
EXPR	279:15	279:46	8	iTileY < psCache -> nBlockOffset + 2
FIELD	279:15	279:15	9	iTileY
LEAF_NODE	279:15	279:15	10	iTileY
REL_OPERATOR	279:22	279:22	9	<
LEAF_NODE	279:22	279:22	10	<
FIELD	279:24	279:33	9	psCache -> nBlockOffset
LEAF_NODE	279:24	279:24	10	psCache
LEAF_NODE	279:31	279:31	10	->
LEAF_NODE	279:33	279:33	10	nBlockOffset
LEAF_NODE	279:45	279:45	9	+
FIELD	279:46	279:46	9	2
LEAF_NODE	279:46	279:46	10	2
LEAF_NODE	279:48	279:48	6	)
LEAF_NODE	279:49	279:49	4	;
EXPR_STATEMENT	280:4	280:57	3	assert ( iSample >= 0 && iSample < psCache -> nSamples ) ;
EXPR	280:4	280:4	4	assert ( iSample >= 0 && iSample < psCache -> nSamples )
FUNCTION_CALL	280:4	280:56	5	assert ( iSample >= 0 && iSample < psCache -> nSamples )
CALLEE	280:4	280:4	6	assert
LEAF_NODE	280:4	280:4	7	assert
LEAF_NODE	280:10	280:10	6	(
ARGUMENT	280:12	280:12	6	iSample >= 0 && iSample < psCache -> nSamples
AND	280:12	280:28	7	iSample >= 0 && iSample < psCache -> nSamples
EXPR	280:12	280:23	8	iSample >= 0
FIELD	280:12	280:12	9	iSample
LEAF_NODE	280:12	280:12	10	iSample
REL_OPERATOR	280:20	280:20	9	>=
LEAF_NODE	280:20	280:20	10	>=
FIELD	280:23	280:23	9	0
LEAF_NODE	280:23	280:23	10	0
LEAF_NODE	280:25	280:25	8	&&
EXPR	280:28	280:38	8	iSample < psCache -> nSamples
FIELD	280:28	280:28	9	iSample
LEAF_NODE	280:28	280:28	10	iSample
REL_OPERATOR	280:36	280:36	9	<
LEAF_NODE	280:36	280:36	10	<
FIELD	280:38	280:47	9	psCache -> nSamples
LEAF_NODE	280:38	280:38	10	psCache
LEAF_NODE	280:45	280:45	10	->
LEAF_NODE	280:47	280:47	10	nSamples
LEAF_NODE	280:56	280:56	6	)
LEAF_NODE	280:57	280:57	4	;
SELECTION	282:4	283:8	3	
KEYWORD	282:4	282:4	4	if
LEAF_NODE	282:4	282:4	5	if
LEAF_NODE	282:7	282:7	4	(
CONDITION	282:8	282:8	4	psCache -> nPlanarConfig == PLANARCONFIG_SEPARATE
EXPR	282:8	282:34	5	psCache -> nPlanarConfig == PLANARCONFIG_SEPARATE
FIELD	282:8	282:17	6	psCache -> nPlanarConfig
LEAF_NODE	282:8	282:8	7	psCache
LEAF_NODE	282:15	282:15	7	->
LEAF_NODE	282:17	282:17	7	nPlanarConfig
EQ_OPERATOR	282:31	282:31	6	==
LEAF_NODE	282:31	282:31	7	==
FIELD	282:34	282:34	6	PLANARCONFIG_SEPARATE
LEAF_NODE	282:34	282:34	7	PLANARCONFIG_SEPARATE
LEAF_NODE	282:55	282:55	4	)
STATEMENTS	283:8	283:8	4	
EXPR_STATEMENT	283:8	284:48	5	nRowOffset = ( ( ( ( toff_t ) iTileX * psCache -> nSamples ) + iSample ) * psCache -> nBytesPerBlock ) ;
EXPR	283:8	283:8	6	nRowOffset = ( ( ( ( toff_t ) iTileX * psCache -> nSamples ) + iSample ) * psCache -> nBytesPerBlock )
ASSIGN	283:8	283:21	7	nRowOffset = ( ( ( ( toff_t ) iTileX * psCache -> nSamples ) + iSample ) * psCache -> nBytesPerBlock )
LVAL	283:8	283:8	8	nRowOffset
FIELD	283:8	283:8	9	nRowOffset
LEAF_NODE	283:8	283:8	10	nRowOffset
ASSIGN_OP	283:19	283:19	8	=
LEAF_NODE	283:19	283:19	9	=
RVAL	283:21	284:47	8	( ( ( ( toff_t ) iTileX * psCache -> nSamples ) + iSample ) * psCache -> nBytesPerBlock )
LEAF_NODE	283:21	283:21	9	(
LEAF_NODE	283:22	283:22	9	(
LEAF_NODE	283:23	283:23	9	(
LEAF_NODE	283:24	283:24	9	(
TYPE_NAME	283:25	283:25	9	toff_t
LEAF_NODE	283:25	283:25	10	toff_t
LEAF_NODE	283:31	283:31	9	)
FIELD	283:33	283:33	9	iTileX
LEAF_NODE	283:33	283:33	10	iTileX
LEAF_NODE	283:40	283:40	9	*
FIELD	283:42	283:51	9	psCache -> nSamples
LEAF_NODE	283:42	283:42	10	psCache
LEAF_NODE	283:49	283:49	10	->
LEAF_NODE	283:51	283:51	10	nSamples
LEAF_NODE	283:59	283:59	9	)
LEAF_NODE	283:61	283:61	9	+
FIELD	283:63	283:63	9	iSample
LEAF_NODE	283:63	283:63	10	iSample
LEAF_NODE	283:70	283:70	9	)
LEAF_NODE	284:22	284:22	9	*
FIELD	284:24	284:33	9	psCache -> nBytesPerBlock
LEAF_NODE	284:24	284:24	10	psCache
LEAF_NODE	284:31	284:31	10	->
LEAF_NODE	284:33	284:33	10	nBytesPerBlock
LEAF_NODE	284:47	284:47	9	)
LEAF_NODE	284:48	284:48	6	;
SELECTION	285:4	286:8	3	
KEYWORD	285:4	285:4	4	else
LEAF_NODE	285:4	285:4	5	else
STATEMENTS	286:8	286:8	4	
LEAF_NODE	286:8	286:8	5	nRowOffset
LEAF_NODE	286:19	286:19	3	=
LEAF_NODE	286:21	286:21	3	iTileX
LEAF_NODE	286:28	286:28	3	*
LEAF_NODE	286:30	286:30	3	psCache
LEAF_NODE	286:37	286:37	3	->
LEAF_NODE	286:39	286:39	3	nBytesPerBlock
LEAF_NODE	286:54	286:54	3	+
LEAF_NODE	287:12	287:12	3	(
LEAF_NODE	287:13	287:13	3	psCache
LEAF_NODE	287:20	287:20	3	->
LEAF_NODE	287:22	287:22	3	nBitsPerPixel
LEAF_NODE	287:36	287:36	3	+
LEAF_NODE	287:38	287:38	3	7
LEAF_NODE	287:39	287:39	3	)
LEAF_NODE	287:41	287:41	3	/
EXPR_STATEMENT	287:43	287:54	3	8 * iSample ;
EXPR	287:43	287:47	4	8 * iSample
FIELD	287:43	287:43	5	8
LEAF_NODE	287:43	287:43	6	8
LEAF_NODE	287:45	287:45	5	*
FIELD	287:47	287:47	5	iSample
LEAF_NODE	287:47	287:47	6	iSample
LEAF_NODE	287:54	287:54	4	;
SELECTION	289:4	290:8	3	
KEYWORD	289:4	289:4	4	if
LEAF_NODE	289:4	289:4	5	if
LEAF_NODE	289:7	289:7	4	(
CONDITION	289:9	289:9	4	iTileY == psCache -> nBlockOffset
EXPR	289:9	289:19	5	iTileY == psCache -> nBlockOffset
FIELD	289:9	289:9	6	iTileY
LEAF_NODE	289:9	289:9	7	iTileY
EQ_OPERATOR	289:16	289:16	6	==
LEAF_NODE	289:16	289:16	7	==
FIELD	289:19	289:28	6	psCache -> nBlockOffset
LEAF_NODE	289:19	289:19	7	psCache
LEAF_NODE	289:26	289:26	7	->
LEAF_NODE	289:28	289:28	7	nBlockOffset
LEAF_NODE	289:41	289:41	4	)
STATEMENTS	290:8	290:8	4	
JUMP_STATEMENT	290:8	290:51	5	return psCache -> pabyRow1Blocks + nRowOffset ;
KEYWORD	290:8	290:8	6	return
LEAF_NODE	290:8	290:8	7	return
DESTINATION	290:15	290:15	6	psCache -> pabyRow1Blocks + nRowOffset
EXPR	290:15	290:41	7	psCache -> pabyRow1Blocks + nRowOffset
FIELD	290:15	290:24	8	psCache -> pabyRow1Blocks
LEAF_NODE	290:15	290:15	9	psCache
LEAF_NODE	290:22	290:22	9	->
LEAF_NODE	290:24	290:24	9	pabyRow1Blocks
LEAF_NODE	290:39	290:39	8	+
FIELD	290:41	290:41	8	nRowOffset
LEAF_NODE	290:41	290:41	9	nRowOffset
LEAF_NODE	290:51	290:51	6	;
SELECTION	291:4	292:8	3	
KEYWORD	291:4	291:4	4	else
LEAF_NODE	291:4	291:4	5	else
STATEMENTS	292:8	292:8	4	
JUMP_STATEMENT	292:8	292:51	5	return psCache -> pabyRow2Blocks + nRowOffset ;
KEYWORD	292:8	292:8	6	return
LEAF_NODE	292:8	292:8	7	return
DESTINATION	292:15	292:15	6	psCache -> pabyRow2Blocks + nRowOffset
EXPR	292:15	292:41	7	psCache -> pabyRow2Blocks + nRowOffset
FIELD	292:15	292:24	8	psCache -> pabyRow2Blocks
LEAF_NODE	292:15	292:15	9	psCache
LEAF_NODE	292:22	292:22	9	->
LEAF_NODE	292:24	292:24	9	pabyRow2Blocks
LEAF_NODE	292:39	292:39	8	+
FIELD	292:41	292:41	8	nRowOffset
LEAF_NODE	292:41	292:41	9	nRowOffset
LEAF_NODE	292:51	292:51	6	;
LEAF_NODE	293:0	293:0	2	}
FUNCTION_DEF	299:0	320:0	1	
RETURN_TYPE	299:0	299:14	2	unsigned char *
TYPE_NAME	299:0	299:9	3	unsigned char
LEAF_NODE	299:0	299:0	4	unsigned
LEAF_NODE	299:9	299:9	4	char
LEAF_NODE	299:14	299:14	3	*
FUNCTION_NAME	299:15	299:15	2	TIFFGetOvrBlock_Subsampled
LEAF_NODE	299:15	299:15	3	TIFFGetOvrBlock_Subsampled
PARAMETER_LIST	299:41	300:66	2	( TIFFOvrCache * psCache , int iTileX , int iTileY )
LEAF_NODE	299:41	299:41	3	(
PARAMETER_DECL	299:43	299:57	3	TIFFOvrCache * psCache
TYPE	299:43	299:56	4	TIFFOvrCache *
TYPE_NAME	299:43	299:43	5	TIFFOvrCache
LEAF_NODE	299:43	299:43	6	TIFFOvrCache
POINTER	299:56	299:56	5	*
LEAF_NODE	299:56	299:56	6	*
NAME	299:57	299:57	4	psCache
LEAF_NODE	299:57	299:57	5	psCache
LEAF_NODE	299:64	299:64	3	,
PARAMETER_DECL	300:43	300:47	3	int iTileX
TYPE	300:43	300:43	4	int
TYPE_NAME	300:43	300:43	5	int
LEAF_NODE	300:43	300:43	6	int
NAME	300:47	300:47	4	iTileX
LEAF_NODE	300:47	300:47	5	iTileX
LEAF_NODE	300:53	300:53	3	,
PARAMETER_DECL	300:55	300:59	3	int iTileY
TYPE	300:55	300:55	4	int
TYPE_NAME	300:55	300:55	5	int
LEAF_NODE	300:55	300:55	6	int
NAME	300:59	300:59	4	iTileY
LEAF_NODE	300:59	300:59	5	iTileY
LEAF_NODE	300:66	300:66	3	)
LEAF_NODE	302:0	302:0	2	{
STATEMENTS	303:4	318:4	2	
SIMPLE_DECL	303:4	303:19	3	int nRowOffset ;
VAR_DECL	303:4	303:9	4	int nRowOffset
TYPE	303:4	303:4	5	int
TYPE_NAME	303:4	303:4	6	int
LEAF_NODE	303:4	303:4	7	int
NAME	303:9	303:9	5	nRowOffset
LEAF_NODE	303:9	303:9	6	nRowOffset
LEAF_NODE	303:19	303:19	4	;
SELECTION	305:4	306:8	3	
KEYWORD	305:4	305:4	4	if
LEAF_NODE	305:4	305:4	5	if
LEAF_NODE	305:6	305:6	4	(
CONDITION	305:8	305:8	4	iTileY > psCache -> nBlockOffset + 1
EXPR	305:8	305:41	5	iTileY > psCache -> nBlockOffset + 1
FIELD	305:8	305:8	6	iTileY
LEAF_NODE	305:8	305:8	7	iTileY
REL_OPERATOR	305:15	305:15	6	>
LEAF_NODE	305:15	305:15	7	>
FIELD	305:17	305:26	6	psCache -> nBlockOffset
LEAF_NODE	305:17	305:17	7	psCache
LEAF_NODE	305:24	305:24	7	->
LEAF_NODE	305:26	305:26	7	nBlockOffset
LEAF_NODE	305:39	305:39	6	+
FIELD	305:41	305:41	6	1
LEAF_NODE	305:41	305:41	7	1
LEAF_NODE	305:43	305:43	4	)
STATEMENTS	306:8	306:8	4	
EXPR_STATEMENT	306:8	306:34	5	TIFFWriteOvrRow ( psCache ) ;
EXPR	306:8	306:8	6	TIFFWriteOvrRow ( psCache )
FUNCTION_CALL	306:8	306:33	7	TIFFWriteOvrRow ( psCache )
CALLEE	306:8	306:8	8	TIFFWriteOvrRow
LEAF_NODE	306:8	306:8	9	TIFFWriteOvrRow
LEAF_NODE	306:23	306:23	8	(
ARGUMENT	306:25	306:25	8	psCache
FIELD	306:25	306:25	9	psCache
LEAF_NODE	306:25	306:25	10	psCache
LEAF_NODE	306:33	306:33	8	)
LEAF_NODE	306:34	306:34	6	;
EXPR_STATEMENT	308:4	308:60	3	assert ( iTileX >= 0 && iTileX < psCache -> nBlocksPerRow ) ;
EXPR	308:4	308:4	4	assert ( iTileX >= 0 && iTileX < psCache -> nBlocksPerRow )
FUNCTION_CALL	308:4	308:59	5	assert ( iTileX >= 0 && iTileX < psCache -> nBlocksPerRow )
CALLEE	308:4	308:4	6	assert
LEAF_NODE	308:4	308:4	7	assert
LEAF_NODE	308:10	308:10	6	(
ARGUMENT	308:12	308:12	6	iTileX >= 0 && iTileX < psCache -> nBlocksPerRow
AND	308:12	308:27	7	iTileX >= 0 && iTileX < psCache -> nBlocksPerRow
EXPR	308:12	308:22	8	iTileX >= 0
FIELD	308:12	308:12	9	iTileX
LEAF_NODE	308:12	308:12	10	iTileX
REL_OPERATOR	308:19	308:19	9	>=
LEAF_NODE	308:19	308:19	10	>=
FIELD	308:22	308:22	9	0
LEAF_NODE	308:22	308:22	10	0
LEAF_NODE	308:24	308:24	8	&&
EXPR	308:27	308:36	8	iTileX < psCache -> nBlocksPerRow
FIELD	308:27	308:27	9	iTileX
LEAF_NODE	308:27	308:27	10	iTileX
REL_OPERATOR	308:34	308:34	9	<
LEAF_NODE	308:34	308:34	10	<
FIELD	308:36	308:45	9	psCache -> nBlocksPerRow
LEAF_NODE	308:36	308:36	10	psCache
LEAF_NODE	308:43	308:43	10	->
LEAF_NODE	308:45	308:45	10	nBlocksPerRow
LEAF_NODE	308:59	308:59	6	)
LEAF_NODE	308:60	308:60	4	;
EXPR_STATEMENT	309:4	309:63	3	assert ( iTileY >= 0 && iTileY < psCache -> nBlocksPerColumn ) ;
EXPR	309:4	309:4	4	assert ( iTileY >= 0 && iTileY < psCache -> nBlocksPerColumn )
FUNCTION_CALL	309:4	309:62	5	assert ( iTileY >= 0 && iTileY < psCache -> nBlocksPerColumn )
CALLEE	309:4	309:4	6	assert
LEAF_NODE	309:4	309:4	7	assert
LEAF_NODE	309:10	309:10	6	(
ARGUMENT	309:12	309:12	6	iTileY >= 0 && iTileY < psCache -> nBlocksPerColumn
AND	309:12	309:27	7	iTileY >= 0 && iTileY < psCache -> nBlocksPerColumn
EXPR	309:12	309:22	8	iTileY >= 0
FIELD	309:12	309:12	9	iTileY
LEAF_NODE	309:12	309:12	10	iTileY
REL_OPERATOR	309:19	309:19	9	>=
LEAF_NODE	309:19	309:19	10	>=
FIELD	309:22	309:22	9	0
LEAF_NODE	309:22	309:22	10	0
LEAF_NODE	309:24	309:24	8	&&
EXPR	309:27	309:36	8	iTileY < psCache -> nBlocksPerColumn
FIELD	309:27	309:27	9	iTileY
LEAF_NODE	309:27	309:27	10	iTileY
REL_OPERATOR	309:34	309:34	9	<
LEAF_NODE	309:34	309:34	10	<
FIELD	309:36	309:45	9	psCache -> nBlocksPerColumn
LEAF_NODE	309:36	309:36	10	psCache
LEAF_NODE	309:43	309:43	10	->
LEAF_NODE	309:45	309:45	10	nBlocksPerColumn
LEAF_NODE	309:62	309:62	6	)
LEAF_NODE	309:63	309:63	4	;
EXPR_STATEMENT	310:4	311:49	3	assert ( iTileY >= psCache -> nBlockOffset && iTileY < psCache -> nBlockOffset + 2 ) ;
EXPR	310:4	310:4	4	assert ( iTileY >= psCache -> nBlockOffset && iTileY < psCache -> nBlockOffset + 2 )
FUNCTION_CALL	310:4	311:48	5	assert ( iTileY >= psCache -> nBlockOffset && iTileY < psCache -> nBlockOffset + 2 )
CALLEE	310:4	310:4	6	assert
LEAF_NODE	310:4	310:4	7	assert
LEAF_NODE	310:10	310:10	6	(
ARGUMENT	310:12	310:12	6	iTileY >= psCache -> nBlockOffset && iTileY < psCache -> nBlockOffset + 2
AND	310:12	311:15	7	iTileY >= psCache -> nBlockOffset && iTileY < psCache -> nBlockOffset + 2
EXPR	310:12	310:22	8	iTileY >= psCache -> nBlockOffset
FIELD	310:12	310:12	9	iTileY
LEAF_NODE	310:12	310:12	10	iTileY
REL_OPERATOR	310:19	310:19	9	>=
LEAF_NODE	310:19	310:19	10	>=
FIELD	310:22	310:31	9	psCache -> nBlockOffset
LEAF_NODE	310:22	310:22	10	psCache
LEAF_NODE	310:29	310:29	10	->
LEAF_NODE	310:31	310:31	10	nBlockOffset
LEAF_NODE	311:12	311:12	8	&&
EXPR	311:15	311:46	8	iTileY < psCache -> nBlockOffset + 2
FIELD	311:15	311:15	9	iTileY
LEAF_NODE	311:15	311:15	10	iTileY
REL_OPERATOR	311:22	311:22	9	<
LEAF_NODE	311:22	311:22	10	<
FIELD	311:24	311:33	9	psCache -> nBlockOffset
LEAF_NODE	311:24	311:24	10	psCache
LEAF_NODE	311:31	311:31	10	->
LEAF_NODE	311:33	311:33	10	nBlockOffset
LEAF_NODE	311:45	311:45	9	+
FIELD	311:46	311:46	9	2
LEAF_NODE	311:46	311:46	10	2
LEAF_NODE	311:48	311:48	6	)
LEAF_NODE	311:49	311:49	4	;
EXPR_STATEMENT	312:4	312:61	3	assert ( psCache -> nPlanarConfig != PLANARCONFIG_SEPARATE ) ;
EXPR	312:4	312:4	4	assert ( psCache -> nPlanarConfig != PLANARCONFIG_SEPARATE )
FUNCTION_CALL	312:4	312:60	5	assert ( psCache -> nPlanarConfig != PLANARCONFIG_SEPARATE )
CALLEE	312:4	312:4	6	assert
LEAF_NODE	312:4	312:4	7	assert
LEAF_NODE	312:10	312:10	6	(
ARGUMENT	312:12	312:38	6	psCache -> nPlanarConfig != PLANARCONFIG_SEPARATE
FIELD	312:12	312:21	7	psCache -> nPlanarConfig
LEAF_NODE	312:12	312:12	8	psCache
LEAF_NODE	312:19	312:19	8	->
LEAF_NODE	312:21	312:21	8	nPlanarConfig
EQ_OPERATOR	312:35	312:35	7	!=
LEAF_NODE	312:35	312:35	8	!=
FIELD	312:38	312:38	7	PLANARCONFIG_SEPARATE
LEAF_NODE	312:38	312:38	8	PLANARCONFIG_SEPARATE
LEAF_NODE	312:60	312:60	6	)
LEAF_NODE	312:61	312:61	4	;
EXPR_STATEMENT	314:4	314:49	3	nRowOffset = iTileX * psCache -> nBytesPerBlock ;
EXPR	314:4	314:4	4	nRowOffset = iTileX * psCache -> nBytesPerBlock
ASSIGN	314:4	314:17	5	nRowOffset = iTileX * psCache -> nBytesPerBlock
LVAL	314:4	314:4	6	nRowOffset
FIELD	314:4	314:4	7	nRowOffset
LEAF_NODE	314:4	314:4	8	nRowOffset
ASSIGN_OP	314:15	314:15	6	=
LEAF_NODE	314:15	314:15	7	=
RVAL	314:17	314:26	6	iTileX * psCache -> nBytesPerBlock
FIELD	314:17	314:17	7	iTileX
LEAF_NODE	314:17	314:17	8	iTileX
LEAF_NODE	314:24	314:24	7	*
FIELD	314:26	314:35	7	psCache -> nBytesPerBlock
LEAF_NODE	314:26	314:26	8	psCache
LEAF_NODE	314:33	314:33	8	->
LEAF_NODE	314:35	314:35	8	nBytesPerBlock
LEAF_NODE	314:49	314:49	4	;
SELECTION	316:4	317:8	3	
KEYWORD	316:4	316:4	4	if
LEAF_NODE	316:4	316:4	5	if
LEAF_NODE	316:6	316:6	4	(
CONDITION	316:8	316:8	4	iTileY == psCache -> nBlockOffset
EXPR	316:8	316:18	5	iTileY == psCache -> nBlockOffset
FIELD	316:8	316:8	6	iTileY
LEAF_NODE	316:8	316:8	7	iTileY
EQ_OPERATOR	316:15	316:15	6	==
LEAF_NODE	316:15	316:15	7	==
FIELD	316:18	316:27	6	psCache -> nBlockOffset
LEAF_NODE	316:18	316:18	7	psCache
LEAF_NODE	316:25	316:25	7	->
LEAF_NODE	316:27	316:27	7	nBlockOffset
LEAF_NODE	316:40	316:40	4	)
STATEMENTS	317:8	317:8	4	
JUMP_STATEMENT	317:8	317:51	5	return psCache -> pabyRow1Blocks + nRowOffset ;
KEYWORD	317:8	317:8	6	return
LEAF_NODE	317:8	317:8	7	return
DESTINATION	317:15	317:15	6	psCache -> pabyRow1Blocks + nRowOffset
EXPR	317:15	317:41	7	psCache -> pabyRow1Blocks + nRowOffset
FIELD	317:15	317:24	8	psCache -> pabyRow1Blocks
LEAF_NODE	317:15	317:15	9	psCache
LEAF_NODE	317:22	317:22	9	->
LEAF_NODE	317:24	317:24	9	pabyRow1Blocks
LEAF_NODE	317:39	317:39	8	+
FIELD	317:41	317:41	8	nRowOffset
LEAF_NODE	317:41	317:41	9	nRowOffset
LEAF_NODE	317:51	317:51	6	;
SELECTION	318:4	319:8	3	
KEYWORD	318:4	318:4	4	else
LEAF_NODE	318:4	318:4	5	else
STATEMENTS	319:8	319:8	4	
JUMP_STATEMENT	319:8	319:51	5	return psCache -> pabyRow2Blocks + nRowOffset ;
KEYWORD	319:8	319:8	6	return
LEAF_NODE	319:8	319:8	7	return
DESTINATION	319:15	319:15	6	psCache -> pabyRow2Blocks + nRowOffset
EXPR	319:15	319:41	7	psCache -> pabyRow2Blocks + nRowOffset
FIELD	319:15	319:24	8	psCache -> pabyRow2Blocks
LEAF_NODE	319:15	319:15	9	psCache
LEAF_NODE	319:22	319:22	9	->
LEAF_NODE	319:24	319:24	9	pabyRow2Blocks
LEAF_NODE	319:39	319:39	8	+
FIELD	319:41	319:41	8	nRowOffset
LEAF_NODE	319:41	319:41	9	nRowOffset
LEAF_NODE	319:51	319:51	6	;
LEAF_NODE	320:0	320:0	2	}
FUNCTION_DEF	326:0	335:0	1	
RETURN_TYPE	326:0	326:0	2	void
TYPE_NAME	326:0	326:0	3	void
LEAF_NODE	326:0	326:0	4	void
FUNCTION_NAME	326:5	326:5	2	TIFFDestroyOvrCache
LEAF_NODE	326:5	326:5	3	TIFFDestroyOvrCache
PARAMETER_LIST	326:24	326:49	2	( TIFFOvrCache * psCache )
LEAF_NODE	326:24	326:24	3	(
PARAMETER_DECL	326:26	326:41	3	TIFFOvrCache * psCache
TYPE	326:26	326:39	4	TIFFOvrCache *
TYPE_NAME	326:26	326:26	5	TIFFOvrCache
LEAF_NODE	326:26	326:26	6	TIFFOvrCache
POINTER	326:39	326:39	5	*
LEAF_NODE	326:39	326:39	6	*
NAME	326:41	326:41	4	psCache
LEAF_NODE	326:41	326:41	5	psCache
LEAF_NODE	326:49	326:49	3	)
LEAF_NODE	328:0	328:0	2	{
STATEMENTS	329:4	334:4	2	
ITERATION	329:4	330:8	3	
KEYWORD	329:4	329:4	4	while
LEAF_NODE	329:4	329:4	5	while
LEAF_NODE	329:9	329:9	4	(
CONDITION	329:11	329:11	4	psCache -> nBlockOffset < psCache -> nBlocksPerColumn
EXPR	329:11	329:35	5	psCache -> nBlockOffset < psCache -> nBlocksPerColumn
FIELD	329:11	329:20	6	psCache -> nBlockOffset
LEAF_NODE	329:11	329:11	7	psCache
LEAF_NODE	329:18	329:18	7	->
LEAF_NODE	329:20	329:20	7	nBlockOffset
REL_OPERATOR	329:33	329:33	6	<
LEAF_NODE	329:33	329:33	7	<
FIELD	329:35	329:44	6	psCache -> nBlocksPerColumn
LEAF_NODE	329:35	329:35	7	psCache
LEAF_NODE	329:42	329:42	7	->
LEAF_NODE	329:44	329:44	7	nBlocksPerColumn
LEAF_NODE	329:61	329:61	4	)
STATEMENTS	330:8	330:8	4	
EXPR_STATEMENT	330:8	330:34	5	TIFFWriteOvrRow ( psCache ) ;
EXPR	330:8	330:8	6	TIFFWriteOvrRow ( psCache )
FUNCTION_CALL	330:8	330:33	7	TIFFWriteOvrRow ( psCache )
CALLEE	330:8	330:8	8	TIFFWriteOvrRow
LEAF_NODE	330:8	330:8	9	TIFFWriteOvrRow
LEAF_NODE	330:23	330:23	8	(
ARGUMENT	330:25	330:25	8	psCache
FIELD	330:25	330:25	9	psCache
LEAF_NODE	330:25	330:25	10	psCache
LEAF_NODE	330:33	330:33	8	)
LEAF_NODE	330:34	330:34	6	;
EXPR_STATEMENT	332:4	332:40	3	_TIFFfree ( psCache -> pabyRow1Blocks ) ;
EXPR	332:4	332:4	4	_TIFFfree ( psCache -> pabyRow1Blocks )
FUNCTION_CALL	332:4	332:39	5	_TIFFfree ( psCache -> pabyRow1Blocks )
CALLEE	332:4	332:4	6	_TIFFfree
LEAF_NODE	332:4	332:4	7	_TIFFfree
LEAF_NODE	332:13	332:13	6	(
ARGUMENT	332:15	332:15	6	psCache -> pabyRow1Blocks
FIELD	332:15	332:24	7	psCache -> pabyRow1Blocks
LEAF_NODE	332:15	332:15	8	psCache
LEAF_NODE	332:22	332:22	8	->
LEAF_NODE	332:24	332:24	8	pabyRow1Blocks
LEAF_NODE	332:39	332:39	6	)
LEAF_NODE	332:40	332:40	4	;
EXPR_STATEMENT	333:4	333:40	3	_TIFFfree ( psCache -> pabyRow2Blocks ) ;
EXPR	333:4	333:4	4	_TIFFfree ( psCache -> pabyRow2Blocks )
FUNCTION_CALL	333:4	333:39	5	_TIFFfree ( psCache -> pabyRow2Blocks )
CALLEE	333:4	333:4	6	_TIFFfree
LEAF_NODE	333:4	333:4	7	_TIFFfree
LEAF_NODE	333:13	333:13	6	(
ARGUMENT	333:15	333:15	6	psCache -> pabyRow2Blocks
FIELD	333:15	333:24	7	psCache -> pabyRow2Blocks
LEAF_NODE	333:15	333:15	8	psCache
LEAF_NODE	333:22	333:22	8	->
LEAF_NODE	333:24	333:24	8	pabyRow2Blocks
LEAF_NODE	333:39	333:39	6	)
LEAF_NODE	333:40	333:40	4	;
EXPR_STATEMENT	334:4	334:24	3	_TIFFfree ( psCache ) ;
EXPR	334:4	334:4	4	_TIFFfree ( psCache )
FUNCTION_CALL	334:4	334:23	5	_TIFFfree ( psCache )
CALLEE	334:4	334:4	6	_TIFFfree
LEAF_NODE	334:4	334:4	7	_TIFFfree
LEAF_NODE	334:13	334:13	6	(
ARGUMENT	334:15	334:15	6	psCache
FIELD	334:15	334:15	7	psCache
LEAF_NODE	334:15	334:15	8	psCache
LEAF_NODE	334:23	334:23	6	)
LEAF_NODE	334:24	334:24	4	;
LEAF_NODE	335:0	335:0	2	}
