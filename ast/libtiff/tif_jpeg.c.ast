SOURCE_FILE	50:0	2477:0	0	
SIMPLE_DECL	50:0	50:45	1	int TIFFJPEGIsFullStripRequired_12 ; TIFFJPEGIsFullStripRequired_12 TIFFJPEGIsFullStripRequired_12 ( TIFF * tif ) ;
VAR_DECL	50:0	50:4	2	int TIFFJPEGIsFullStripRequired_12 ; TIFFJPEGIsFullStripRequired_12 TIFFJPEGIsFullStripRequired_12 ( TIFF * tif )
TYPE	50:0	50:0	3	int
TYPE_NAME	50:0	50:0	4	int
LEAF_NODE	50:0	50:0	5	int
NAME	50:4	50:4	3	TIFFJPEGIsFullStripRequired_12
LEAF_NODE	50:4	50:4	4	TIFFJPEGIsFullStripRequired_12
LEAF_NODE	0:0	0:0	3	;
INIT	50:4	50:4	3	TIFFJPEGIsFullStripRequired_12 TIFFJPEGIsFullStripRequired_12 ( TIFF * tif )
ASSIGN	50:4	50:34	4	TIFFJPEGIsFullStripRequired_12 TIFFJPEGIsFullStripRequired_12 ( TIFF * tif )
LVAL	50:4	50:4	5	TIFFJPEGIsFullStripRequired_12
NAME	50:4	50:4	6	TIFFJPEGIsFullStripRequired_12
LEAF_NODE	50:4	50:4	7	TIFFJPEGIsFullStripRequired_12
ASSIGN_OP	50:4	50:4	5	TIFFJPEGIsFullStripRequired_12
NAME	50:4	50:4	6	TIFFJPEGIsFullStripRequired_12
LEAF_NODE	50:4	50:4	7	TIFFJPEGIsFullStripRequired_12
RVAL	50:34	50:44	5	( TIFF * tif )
LEAF_NODE	50:34	50:34	6	(
EXPR	50:35	50:41	6	TIFF * tif
FIELD	50:35	50:35	7	TIFF
LEAF_NODE	50:35	50:35	8	TIFF
LEAF_NODE	50:39	50:39	7	*
FIELD	50:41	50:41	7	tif
LEAF_NODE	50:41	50:41	8	tif
LEAF_NODE	50:44	50:44	6	)
LEAF_NODE	50:45	50:45	2	;
SIMPLE_DECL	84:11	84:32	1	unsigned char boolean ;
VAR_DECL	84:11	84:25	2	unsigned char boolean
TYPE	84:11	84:11	3	unsigned char
TYPE_NAME	84:11	84:20	4	unsigned char
LEAF_NODE	84:11	84:11	5	unsigned
LEAF_NODE	84:20	84:20	5	char
NAME	84:25	84:25	3	boolean
LEAF_NODE	84:25	84:25	4	boolean
LEAF_NODE	84:32	84:32	2	;
SIMPLE_DECL	122:8	122:56	1	struct jpeg_destination_mgr jpeg_destination_mgr ;
VAR_DECL	122:8	122:36	2	struct jpeg_destination_mgr jpeg_destination_mgr
TYPE	122:8	122:8	3	struct jpeg_destination_mgr
TYPE_NAME	122:8	122:15	4	struct jpeg_destination_mgr
LEAF_NODE	122:8	122:8	5	struct
LEAF_NODE	122:15	122:15	5	jpeg_destination_mgr
NAME	122:36	122:36	3	jpeg_destination_mgr
LEAF_NODE	122:36	122:36	4	jpeg_destination_mgr
LEAF_NODE	122:56	122:56	2	;
SIMPLE_DECL	123:8	123:46	1	struct jpeg_source_mgr jpeg_source_mgr ;
VAR_DECL	123:8	123:31	2	struct jpeg_source_mgr jpeg_source_mgr
TYPE	123:8	123:8	3	struct jpeg_source_mgr
TYPE_NAME	123:8	123:15	4	struct jpeg_source_mgr
LEAF_NODE	123:8	123:8	5	struct
LEAF_NODE	123:15	123:15	5	jpeg_source_mgr
NAME	123:31	123:31	3	jpeg_source_mgr
LEAF_NODE	123:31	123:31	4	jpeg_source_mgr
LEAF_NODE	123:46	123:46	2	;
SIMPLE_DECL	124:8	124:44	1	struct jpeg_error_mgr jpeg_error_mgr ;
VAR_DECL	124:8	124:30	2	struct jpeg_error_mgr jpeg_error_mgr
TYPE	124:8	124:8	3	struct jpeg_error_mgr
TYPE_NAME	124:8	124:15	4	struct jpeg_error_mgr
LEAF_NODE	124:8	124:8	5	struct
LEAF_NODE	124:15	124:15	5	jpeg_error_mgr
NAME	124:30	124:30	3	jpeg_error_mgr
LEAF_NODE	124:30	124:30	4	jpeg_error_mgr
LEAF_NODE	124:44	124:44	2	;
SIMPLE_DECL	139:8	182:11	1	struct CLASS_NAME BASE_CLASSES { union CLASS_NAME BASE_CLASSES { struct jpeg_compress_struct c ; struct jpeg_decompress_struct d ; struct jpeg_common_struct comm ; } cinfo ; int cinfo_initialized ; jpeg_error_mgr err ; JMP_BUF exit_jmpbuf ; struct jpeg_progress_mgr progress ; jpeg_destination_mgr dest ; jpeg_source_mgr src ; TIFF * tif ; uint16 photometric ; uint16 h_sampling ; uint16 v_sampling ; tmsize_t bytesperline ; JSAMPARRAY [ MAX_COMPONENTS ] ds_buffer ; int scancount ; int samplesperclump ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; TIFFStripMethod defsparent ; TIFFTileMethod deftparent ; void * jpegtables ; uint32 jpegtables_length ; int jpegquality ; int jpegcolormode ; int jpegtablesmode ; int ycbcrsampling_fetched ; int max_allowed_scan_number ; } JPEGState ;
VAR_DECL	139:8	182:2	2	struct CLASS_NAME BASE_CLASSES { union CLASS_NAME BASE_CLASSES { struct jpeg_compress_struct c ; struct jpeg_decompress_struct d ; struct jpeg_common_struct comm ; } cinfo ; int cinfo_initialized ; jpeg_error_mgr err ; JMP_BUF exit_jmpbuf ; struct jpeg_progress_mgr progress ; jpeg_destination_mgr dest ; jpeg_source_mgr src ; TIFF * tif ; uint16 photometric ; uint16 h_sampling ; uint16 v_sampling ; tmsize_t bytesperline ; JSAMPARRAY [ MAX_COMPONENTS ] ds_buffer ; int scancount ; int samplesperclump ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; TIFFStripMethod defsparent ; TIFFTileMethod deftparent ; void * jpegtables ; uint32 jpegtables_length ; int jpegquality ; int jpegcolormode ; int jpegtablesmode ; int ycbcrsampling_fetched ; int max_allowed_scan_number ; } JPEGState
TYPE	139:8	139:8	3	struct CLASS_NAME BASE_CLASSES { union CLASS_NAME BASE_CLASSES { struct jpeg_compress_struct c ; struct jpeg_decompress_struct d ; struct jpeg_common_struct comm ; } cinfo ; int cinfo_initialized ; jpeg_error_mgr err ; JMP_BUF exit_jmpbuf ; struct jpeg_progress_mgr progress ; jpeg_destination_mgr dest ; jpeg_source_mgr src ; TIFF * tif ; uint16 photometric ; uint16 h_sampling ; uint16 v_sampling ; tmsize_t bytesperline ; JSAMPARRAY [ MAX_COMPONENTS ] ds_buffer ; int scancount ; int samplesperclump ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; TIFFStripMethod defsparent ; TIFFTileMethod deftparent ; void * jpegtables ; uint32 jpegtables_length ; int jpegquality ; int jpegcolormode ; int jpegtablesmode ; int ycbcrsampling_fetched ; int max_allowed_scan_number ; }
CLASS_DEF	139:8	182:0	4	struct CLASS_NAME BASE_CLASSES { union CLASS_NAME BASE_CLASSES { struct jpeg_compress_struct c ; struct jpeg_decompress_struct d ; struct jpeg_common_struct comm ; } cinfo ; int cinfo_initialized ; jpeg_error_mgr err ; JMP_BUF exit_jmpbuf ; struct jpeg_progress_mgr progress ; jpeg_destination_mgr dest ; jpeg_source_mgr src ; TIFF * tif ; uint16 photometric ; uint16 h_sampling ; uint16 v_sampling ; tmsize_t bytesperline ; JSAMPARRAY [ MAX_COMPONENTS ] ds_buffer ; int scancount ; int samplesperclump ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; TIFFStripMethod defsparent ; TIFFTileMethod deftparent ; void * jpegtables ; uint32 jpegtables_length ; int jpegquality ; int jpegcolormode ; int jpegtablesmode ; int ycbcrsampling_fetched ; int max_allowed_scan_number ; }
LEAF_NODE	139:8	139:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	139:15	139:15	5	{
CLASS_CONTENT	140:1	181:8	5	union CLASS_NAME BASE_CLASSES { struct jpeg_compress_struct c ; struct jpeg_decompress_struct d ; struct jpeg_common_struct comm ; } cinfo ; int cinfo_initialized ; jpeg_error_mgr err ; JMP_BUF exit_jmpbuf ; struct jpeg_progress_mgr progress ; jpeg_destination_mgr dest ; jpeg_source_mgr src ; TIFF * tif ; uint16 photometric ; uint16 h_sampling ; uint16 v_sampling ; tmsize_t bytesperline ; JSAMPARRAY [ MAX_COMPONENTS ] ds_buffer ; int scancount ; int samplesperclump ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; TIFFStripMethod defsparent ; TIFFTileMethod deftparent ; void * jpegtables ; uint32 jpegtables_length ; int jpegquality ; int jpegcolormode ; int jpegtablesmode ; int ycbcrsampling_fetched ; int max_allowed_scan_number ;
SIMPLE_DECL	140:1	144:8	6	union CLASS_NAME BASE_CLASSES { struct jpeg_compress_struct c ; struct jpeg_decompress_struct d ; struct jpeg_common_struct comm ; } cinfo ;
VAR_DECL	140:1	144:3	7	union CLASS_NAME BASE_CLASSES { struct jpeg_compress_struct c ; struct jpeg_decompress_struct d ; struct jpeg_common_struct comm ; } cinfo
TYPE	140:1	140:1	8	union CLASS_NAME BASE_CLASSES { struct jpeg_compress_struct c ; struct jpeg_decompress_struct d ; struct jpeg_common_struct comm ; }
CLASS_DEF	140:1	144:1	9	union CLASS_NAME BASE_CLASSES { struct jpeg_compress_struct c ; struct jpeg_decompress_struct d ; struct jpeg_common_struct comm ; }
LEAF_NODE	140:1	140:1	10	union
LEAF_NODE	0:0	0:0	10	CLASS_NAME
LEAF_NODE	0:0	0:0	10	BASE_CLASSES
LEAF_NODE	140:7	140:7	10	{
CLASS_CONTENT	141:2	143:2	10	struct jpeg_compress_struct c ; struct jpeg_decompress_struct d ; struct jpeg_common_struct comm ;
SIMPLE_DECL	141:2	141:31	11	struct jpeg_compress_struct c ;
VAR_DECL	141:2	141:30	12	struct jpeg_compress_struct c
TYPE	141:2	141:2	13	struct jpeg_compress_struct
TYPE_NAME	141:2	141:9	14	struct jpeg_compress_struct
LEAF_NODE	141:2	141:2	15	struct
LEAF_NODE	141:9	141:9	15	jpeg_compress_struct
NAME	141:30	141:30	13	c
LEAF_NODE	141:30	141:30	14	c
LEAF_NODE	141:31	141:31	12	;
SIMPLE_DECL	142:2	142:33	11	struct jpeg_decompress_struct d ;
VAR_DECL	142:2	142:32	12	struct jpeg_decompress_struct d
TYPE	142:2	142:2	13	struct jpeg_decompress_struct
TYPE_NAME	142:2	142:9	14	struct jpeg_decompress_struct
LEAF_NODE	142:2	142:2	15	struct
LEAF_NODE	142:9	142:9	15	jpeg_decompress_struct
NAME	142:32	142:32	13	d
LEAF_NODE	142:32	142:32	14	d
LEAF_NODE	142:33	142:33	12	;
SIMPLE_DECL	143:2	143:32	11	struct jpeg_common_struct comm ;
VAR_DECL	143:2	143:28	12	struct jpeg_common_struct comm
TYPE	143:2	143:2	13	struct jpeg_common_struct
TYPE_NAME	143:2	143:9	14	struct jpeg_common_struct
LEAF_NODE	143:2	143:2	15	struct
LEAF_NODE	143:9	143:9	15	jpeg_common_struct
NAME	143:28	143:28	13	comm
LEAF_NODE	143:28	143:28	14	comm
LEAF_NODE	143:32	143:32	12	;
LEAF_NODE	144:1	144:1	10	}
NAME	144:3	144:3	8	cinfo
LEAF_NODE	144:3	144:3	9	cinfo
LEAF_NODE	144:8	144:8	7	;
SIMPLE_DECL	145:1	145:34	6	int cinfo_initialized ;
VAR_DECL	145:1	145:17	7	int cinfo_initialized
TYPE	145:1	145:1	8	int
TYPE_NAME	145:1	145:1	9	int
LEAF_NODE	145:1	145:1	10	int
NAME	145:17	145:17	8	cinfo_initialized
LEAF_NODE	145:17	145:17	9	cinfo_initialized
LEAF_NODE	145:34	145:34	7	;
SIMPLE_DECL	147:1	147:19	6	jpeg_error_mgr err ;
VAR_DECL	147:1	147:16	7	jpeg_error_mgr err
TYPE	147:1	147:1	8	jpeg_error_mgr
TYPE_NAME	147:1	147:1	9	jpeg_error_mgr
LEAF_NODE	147:1	147:1	10	jpeg_error_mgr
NAME	147:16	147:16	8	err
LEAF_NODE	147:16	147:16	9	err
LEAF_NODE	147:19	147:19	7	;
SIMPLE_DECL	148:1	148:21	6	JMP_BUF exit_jmpbuf ;
VAR_DECL	148:1	148:10	7	JMP_BUF exit_jmpbuf
TYPE	148:1	148:1	8	JMP_BUF
TYPE_NAME	148:1	148:1	9	JMP_BUF
LEAF_NODE	148:1	148:1	10	JMP_BUF
NAME	148:10	148:10	8	exit_jmpbuf
LEAF_NODE	148:10	148:10	9	exit_jmpbuf
LEAF_NODE	148:21	148:21	7	;
SIMPLE_DECL	150:1	150:34	6	struct jpeg_progress_mgr progress ;
VAR_DECL	150:1	150:26	7	struct jpeg_progress_mgr progress
TYPE	150:1	150:1	8	struct jpeg_progress_mgr
TYPE_NAME	150:1	150:8	9	struct jpeg_progress_mgr
LEAF_NODE	150:1	150:1	10	struct
LEAF_NODE	150:8	150:8	10	jpeg_progress_mgr
NAME	150:26	150:26	8	progress
LEAF_NODE	150:26	150:26	9	progress
LEAF_NODE	150:34	150:34	7	;
SIMPLE_DECL	155:1	155:26	6	jpeg_destination_mgr dest ;
VAR_DECL	155:1	155:22	7	jpeg_destination_mgr dest
TYPE	155:1	155:1	8	jpeg_destination_mgr
TYPE_NAME	155:1	155:1	9	jpeg_destination_mgr
LEAF_NODE	155:1	155:1	10	jpeg_destination_mgr
NAME	155:22	155:22	8	dest
LEAF_NODE	155:22	155:22	9	dest
LEAF_NODE	155:26	155:26	7	;
SIMPLE_DECL	156:1	156:20	6	jpeg_source_mgr src ;
VAR_DECL	156:1	156:17	7	jpeg_source_mgr src
TYPE	156:1	156:1	8	jpeg_source_mgr
TYPE_NAME	156:1	156:1	9	jpeg_source_mgr
LEAF_NODE	156:1	156:1	10	jpeg_source_mgr
NAME	156:17	156:17	8	src
LEAF_NODE	156:17	156:17	9	src
LEAF_NODE	156:20	156:20	7	;
SIMPLE_DECL	158:1	158:11	6	TIFF * tif ;
VAR_DECL	158:1	158:8	7	TIFF * tif
TYPE	158:1	158:5	8	TIFF *
TYPE_NAME	158:1	158:1	9	TIFF
LEAF_NODE	158:1	158:1	10	TIFF
POINTER	158:5	158:5	9	*
LEAF_NODE	158:5	158:5	10	*
NAME	158:8	158:8	8	tif
LEAF_NODE	158:8	158:8	9	tif
LEAF_NODE	158:11	158:11	7	;
SIMPLE_DECL	159:1	159:20	6	uint16 photometric ;
VAR_DECL	159:1	159:9	7	uint16 photometric
TYPE	159:1	159:1	8	uint16
TYPE_NAME	159:1	159:1	9	uint16
LEAF_NODE	159:1	159:1	10	uint16
NAME	159:9	159:9	8	photometric
LEAF_NODE	159:9	159:9	9	photometric
LEAF_NODE	159:20	159:20	7	;
SIMPLE_DECL	160:1	160:19	6	uint16 h_sampling ;
VAR_DECL	160:1	160:9	7	uint16 h_sampling
TYPE	160:1	160:1	8	uint16
TYPE_NAME	160:1	160:1	9	uint16
LEAF_NODE	160:1	160:1	10	uint16
NAME	160:9	160:9	8	h_sampling
LEAF_NODE	160:9	160:9	9	h_sampling
LEAF_NODE	160:19	160:19	7	;
SIMPLE_DECL	161:1	161:19	6	uint16 v_sampling ;
VAR_DECL	161:1	161:9	7	uint16 v_sampling
TYPE	161:1	161:1	8	uint16
TYPE_NAME	161:1	161:1	9	uint16
LEAF_NODE	161:1	161:1	10	uint16
NAME	161:9	161:9	8	v_sampling
LEAF_NODE	161:9	161:9	9	v_sampling
LEAF_NODE	161:19	161:19	7	;
SIMPLE_DECL	162:1	162:25	6	tmsize_t bytesperline ;
VAR_DECL	162:1	162:13	7	tmsize_t bytesperline
TYPE	162:1	162:1	8	tmsize_t
TYPE_NAME	162:1	162:1	9	tmsize_t
LEAF_NODE	162:1	162:1	10	tmsize_t
NAME	162:13	162:13	8	bytesperline
LEAF_NODE	162:13	162:13	9	bytesperline
LEAF_NODE	162:25	162:25	7	;
SIMPLE_DECL	164:1	164:37	6	JSAMPARRAY [ MAX_COMPONENTS ] ds_buffer ;
VAR_DECL	164:1	164:12	7	JSAMPARRAY [ MAX_COMPONENTS ] ds_buffer
TYPE	164:1	164:21	8	JSAMPARRAY [ MAX_COMPONENTS ]
TYPE_NAME	164:1	164:1	9	JSAMPARRAY
LEAF_NODE	164:1	164:1	10	JSAMPARRAY
TYPE_SUFFIX	164:21	164:36	9	[ MAX_COMPONENTS ]
LEAF_NODE	164:21	164:21	10	[
FIELD	164:22	164:22	10	MAX_COMPONENTS
LEAF_NODE	164:22	164:22	11	MAX_COMPONENTS
LEAF_NODE	164:36	164:36	10	]
NAME	164:12	164:12	8	ds_buffer
LEAF_NODE	164:12	164:12	9	ds_buffer
LEAF_NODE	164:37	164:37	7	;
SIMPLE_DECL	165:1	165:15	6	int scancount ;
VAR_DECL	165:1	165:6	7	int scancount
TYPE	165:1	165:1	8	int
TYPE_NAME	165:1	165:1	9	int
LEAF_NODE	165:1	165:1	10	int
NAME	165:6	165:6	8	scancount
LEAF_NODE	165:6	165:6	9	scancount
LEAF_NODE	165:15	165:15	7	;
SIMPLE_DECL	166:1	166:21	6	int samplesperclump ;
VAR_DECL	166:1	166:6	7	int samplesperclump
TYPE	166:1	166:1	8	int
TYPE_NAME	166:1	166:1	9	int
LEAF_NODE	166:1	166:1	10	int
NAME	166:6	166:6	8	samplesperclump
LEAF_NODE	166:6	166:6	9	samplesperclump
LEAF_NODE	166:21	166:21	7	;
SIMPLE_DECL	168:1	168:26	6	TIFFVGetMethod vgetparent ;
VAR_DECL	168:1	168:16	7	TIFFVGetMethod vgetparent
TYPE	168:1	168:1	8	TIFFVGetMethod
TYPE_NAME	168:1	168:1	9	TIFFVGetMethod
LEAF_NODE	168:1	168:1	10	TIFFVGetMethod
NAME	168:16	168:16	8	vgetparent
LEAF_NODE	168:16	168:16	9	vgetparent
LEAF_NODE	168:26	168:26	7	;
SIMPLE_DECL	169:1	169:26	6	TIFFVSetMethod vsetparent ;
VAR_DECL	169:1	169:16	7	TIFFVSetMethod vsetparent
TYPE	169:1	169:1	8	TIFFVSetMethod
TYPE_NAME	169:1	169:1	9	TIFFVSetMethod
LEAF_NODE	169:1	169:1	10	TIFFVSetMethod
NAME	169:16	169:16	8	vsetparent
LEAF_NODE	169:16	169:16	9	vsetparent
LEAF_NODE	169:26	169:26	7	;
SIMPLE_DECL	170:1	170:25	6	TIFFPrintMethod printdir ;
VAR_DECL	170:1	170:17	7	TIFFPrintMethod printdir
TYPE	170:1	170:1	8	TIFFPrintMethod
TYPE_NAME	170:1	170:1	9	TIFFPrintMethod
LEAF_NODE	170:1	170:1	10	TIFFPrintMethod
NAME	170:17	170:17	8	printdir
LEAF_NODE	170:17	170:17	9	printdir
LEAF_NODE	170:25	170:25	7	;
SIMPLE_DECL	171:1	171:27	6	TIFFStripMethod defsparent ;
VAR_DECL	171:1	171:17	7	TIFFStripMethod defsparent
TYPE	171:1	171:1	8	TIFFStripMethod
TYPE_NAME	171:1	171:1	9	TIFFStripMethod
LEAF_NODE	171:1	171:1	10	TIFFStripMethod
NAME	171:17	171:17	8	defsparent
LEAF_NODE	171:17	171:17	9	defsparent
LEAF_NODE	171:27	171:27	7	;
SIMPLE_DECL	172:1	172:26	6	TIFFTileMethod deftparent ;
VAR_DECL	172:1	172:16	7	TIFFTileMethod deftparent
TYPE	172:1	172:1	8	TIFFTileMethod
TYPE_NAME	172:1	172:1	9	TIFFTileMethod
LEAF_NODE	172:1	172:1	10	TIFFTileMethod
NAME	172:16	172:16	8	deftparent
LEAF_NODE	172:16	172:16	9	deftparent
LEAF_NODE	172:26	172:26	7	;
SIMPLE_DECL	174:1	174:18	6	void * jpegtables ;
VAR_DECL	174:1	174:8	7	void * jpegtables
TYPE	174:1	174:5	8	void *
TYPE_NAME	174:1	174:1	9	void
LEAF_NODE	174:1	174:1	10	void
POINTER	174:5	174:5	9	*
LEAF_NODE	174:5	174:5	10	*
NAME	174:8	174:8	8	jpegtables
LEAF_NODE	174:8	174:8	9	jpegtables
LEAF_NODE	174:18	174:18	7	;
SIMPLE_DECL	175:1	175:26	6	uint32 jpegtables_length ;
VAR_DECL	175:1	175:9	7	uint32 jpegtables_length
TYPE	175:1	175:1	8	uint32
TYPE_NAME	175:1	175:1	9	uint32
LEAF_NODE	175:1	175:1	10	uint32
NAME	175:9	175:9	8	jpegtables_length
LEAF_NODE	175:9	175:9	9	jpegtables_length
LEAF_NODE	175:26	175:26	7	;
SIMPLE_DECL	176:1	176:17	6	int jpegquality ;
VAR_DECL	176:1	176:6	7	int jpegquality
TYPE	176:1	176:1	8	int
TYPE_NAME	176:1	176:1	9	int
LEAF_NODE	176:1	176:1	10	int
NAME	176:6	176:6	8	jpegquality
LEAF_NODE	176:6	176:6	9	jpegquality
LEAF_NODE	176:17	176:17	7	;
SIMPLE_DECL	177:1	177:19	6	int jpegcolormode ;
VAR_DECL	177:1	177:6	7	int jpegcolormode
TYPE	177:1	177:1	8	int
TYPE_NAME	177:1	177:1	9	int
LEAF_NODE	177:1	177:1	10	int
NAME	177:6	177:6	8	jpegcolormode
LEAF_NODE	177:6	177:6	9	jpegcolormode
LEAF_NODE	177:19	177:19	7	;
SIMPLE_DECL	178:1	178:20	6	int jpegtablesmode ;
VAR_DECL	178:1	178:6	7	int jpegtablesmode
TYPE	178:1	178:1	8	int
TYPE_NAME	178:1	178:1	9	int
LEAF_NODE	178:1	178:1	10	int
NAME	178:6	178:6	8	jpegtablesmode
LEAF_NODE	178:6	178:6	9	jpegtablesmode
LEAF_NODE	178:20	178:20	7	;
SIMPLE_DECL	180:8	180:45	6	int ycbcrsampling_fetched ;
VAR_DECL	180:8	180:24	7	int ycbcrsampling_fetched
TYPE	180:8	180:8	8	int
TYPE_NAME	180:8	180:8	9	int
LEAF_NODE	180:8	180:8	10	int
NAME	180:24	180:24	8	ycbcrsampling_fetched
LEAF_NODE	180:24	180:24	9	ycbcrsampling_fetched
LEAF_NODE	180:45	180:45	7	;
SIMPLE_DECL	181:8	181:47	6	int max_allowed_scan_number ;
VAR_DECL	181:8	181:24	7	int max_allowed_scan_number
TYPE	181:8	181:8	8	int
TYPE_NAME	181:8	181:8	9	int
LEAF_NODE	181:8	181:8	10	int
NAME	181:24	181:24	8	max_allowed_scan_number
LEAF_NODE	181:24	181:24	9	max_allowed_scan_number
LEAF_NODE	181:47	181:47	7	;
LEAF_NODE	182:0	182:0	5	}
NAME	182:2	182:2	3	JPEGState
LEAF_NODE	182:2	182:2	4	JPEGState
LEAF_NODE	182:11	182:11	2	;
FUNCTION_DEF	216:0	226:0	1	
RETURN_TYPE	216:0	216:7	2	static void
LEAF_NODE	216:0	216:0	3	static
TYPE_NAME	216:7	216:7	3	void
LEAF_NODE	216:7	216:7	4	void
FUNCTION_NAME	217:0	217:0	2	TIFFjpeg_error_exit
LEAF_NODE	217:0	217:0	3	TIFFjpeg_error_exit
PARAMETER_LIST	217:19	217:38	2	( j_common_ptr cinfo )
LEAF_NODE	217:19	217:19	3	(
PARAMETER_DECL	217:20	217:33	3	j_common_ptr cinfo
TYPE	217:20	217:20	4	j_common_ptr
TYPE_NAME	217:20	217:20	5	j_common_ptr
LEAF_NODE	217:20	217:20	6	j_common_ptr
NAME	217:33	217:33	4	cinfo
LEAF_NODE	217:33	217:33	5	cinfo
LEAF_NODE	217:38	217:38	3	)
LEAF_NODE	218:0	218:0	2	{
STATEMENTS	219:1	225:1	2	
SIMPLE_DECL	219:1	219:36	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	219:1	219:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	219:1	219:11	5	JPEGState *
TYPE_NAME	219:1	219:1	6	JPEGState
LEAF_NODE	219:1	219:1	7	JPEGState
POINTER	219:11	219:11	6	*
LEAF_NODE	219:11	219:11	7	*
NAME	219:12	219:12	5	sp
LEAF_NODE	219:12	219:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	219:12	219:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	219:12	219:17	6	sp = ( JPEGState * ) cinfo
LVAL	219:12	219:12	7	sp
NAME	219:12	219:12	8	sp
LEAF_NODE	219:12	219:12	9	sp
ASSIGN_OP	219:15	219:15	7	=
LEAF_NODE	219:15	219:15	8	=
RVAL	219:17	219:31	7	( JPEGState * ) cinfo
LEAF_NODE	219:17	219:17	8	(
TYPE_NAME	219:18	219:18	8	JPEGState
LEAF_NODE	219:18	219:18	9	JPEGState
LEAF_NODE	219:28	219:28	8	*
LEAF_NODE	219:29	219:29	8	)
FIELD	219:31	219:31	8	cinfo
LEAF_NODE	219:31	219:31	9	cinfo
LEAF_NODE	219:36	219:36	4	;
SIMPLE_DECL	220:1	220:29	3	char [ JMSG_LENGTH_MAX ] buffer ;
VAR_DECL	220:1	220:6	4	char [ JMSG_LENGTH_MAX ] buffer
TYPE	220:1	220:12	5	char [ JMSG_LENGTH_MAX ]
TYPE_NAME	220:1	220:1	6	char
LEAF_NODE	220:1	220:1	7	char
TYPE_SUFFIX	220:12	220:28	6	[ JMSG_LENGTH_MAX ]
LEAF_NODE	220:12	220:12	7	[
FIELD	220:13	220:13	7	JMSG_LENGTH_MAX
LEAF_NODE	220:13	220:13	8	JMSG_LENGTH_MAX
LEAF_NODE	220:28	220:28	7	]
NAME	220:6	220:6	5	buffer
LEAF_NODE	220:6	220:6	6	buffer
LEAF_NODE	220:29	220:29	4	;
EXPR_STATEMENT	222:1	222:46	3	( * cinfo -> err -> format_message ) ( cinfo , buffer ) ;
EXPR	222:1	222:1	4	( * cinfo -> err -> format_message ) ( cinfo , buffer )
FUNCTION_CALL	222:1	222:45	5	( * cinfo -> err -> format_message ) ( cinfo , buffer )
CALLEE	222:1	222:29	6	( * cinfo -> err -> format_message )
LEAF_NODE	222:1	222:1	7	(
UNARY_EXPR	222:2	222:3	7	* cinfo -> err -> format_message
UNARY_OPERATOR	222:2	222:2	8	*
LEAF_NODE	222:2	222:2	9	*
FIELD	222:3	222:15	8	cinfo -> err -> format_message
LEAF_NODE	222:3	222:3	9	cinfo
LEAF_NODE	222:8	222:8	9	->
LEAF_NODE	222:10	222:10	9	err
LEAF_NODE	222:13	222:13	9	->
LEAF_NODE	222:15	222:15	9	format_message
LEAF_NODE	222:29	222:29	7	)
LEAF_NODE	222:31	222:31	6	(
ARGUMENT	222:32	222:32	6	cinfo
FIELD	222:32	222:32	7	cinfo
LEAF_NODE	222:32	222:32	8	cinfo
LEAF_NODE	222:37	222:37	6	,
ARGUMENT	222:39	222:39	6	buffer
FIELD	222:39	222:39	7	buffer
LEAF_NODE	222:39	222:39	8	buffer
LEAF_NODE	222:45	222:45	6	)
LEAF_NODE	222:46	222:46	4	;
EXPR_STATEMENT	223:1	223:63	3	TIFFErrorExt ( sp -> tif -> tif_clientdata , "JPEGLib" , "%s" , buffer ) ;
EXPR	223:1	223:1	4	TIFFErrorExt ( sp -> tif -> tif_clientdata , "JPEGLib" , "%s" , buffer )
FUNCTION_CALL	223:1	223:62	5	TIFFErrorExt ( sp -> tif -> tif_clientdata , "JPEGLib" , "%s" , buffer )
CALLEE	223:1	223:1	6	TIFFErrorExt
LEAF_NODE	223:1	223:1	7	TIFFErrorExt
LEAF_NODE	223:13	223:13	6	(
ARGUMENT	223:14	223:14	6	sp -> tif -> tif_clientdata
FIELD	223:14	223:23	7	sp -> tif -> tif_clientdata
LEAF_NODE	223:14	223:14	8	sp
LEAF_NODE	223:16	223:16	8	->
LEAF_NODE	223:18	223:18	8	tif
LEAF_NODE	223:21	223:21	8	->
LEAF_NODE	223:23	223:23	8	tif_clientdata
LEAF_NODE	223:37	223:37	6	,
ARGUMENT	223:39	223:39	6	"JPEGLib"
FIELD	223:39	223:39	7	"JPEGLib"
LEAF_NODE	223:39	223:39	8	"JPEGLib"
LEAF_NODE	223:48	223:48	6	,
ARGUMENT	223:50	223:50	6	"%s"
FIELD	223:50	223:50	7	"%s"
LEAF_NODE	223:50	223:50	8	"%s"
LEAF_NODE	223:54	223:54	6	,
ARGUMENT	223:56	223:56	6	buffer
FIELD	223:56	223:56	7	buffer
LEAF_NODE	223:56	223:56	8	buffer
LEAF_NODE	223:62	223:62	6	)
LEAF_NODE	223:63	223:63	4	;
EXPR_STATEMENT	224:1	224:18	3	jpeg_abort ( cinfo ) ;
EXPR	224:1	224:1	4	jpeg_abort ( cinfo )
FUNCTION_CALL	224:1	224:17	5	jpeg_abort ( cinfo )
CALLEE	224:1	224:1	6	jpeg_abort
LEAF_NODE	224:1	224:1	7	jpeg_abort
LEAF_NODE	224:11	224:11	6	(
ARGUMENT	224:12	224:12	6	cinfo
FIELD	224:12	224:12	7	cinfo
LEAF_NODE	224:12	224:12	8	cinfo
LEAF_NODE	224:17	224:17	6	)
LEAF_NODE	224:18	224:18	4	;
EXPR_STATEMENT	225:1	225:28	3	LONGJMP ( sp -> exit_jmpbuf , 1 ) ;
EXPR	225:1	225:1	4	LONGJMP ( sp -> exit_jmpbuf , 1 )
FUNCTION_CALL	225:1	225:27	5	LONGJMP ( sp -> exit_jmpbuf , 1 )
CALLEE	225:1	225:1	6	LONGJMP
LEAF_NODE	225:1	225:1	7	LONGJMP
LEAF_NODE	225:8	225:8	6	(
ARGUMENT	225:9	225:9	6	sp -> exit_jmpbuf
FIELD	225:9	225:13	7	sp -> exit_jmpbuf
LEAF_NODE	225:9	225:9	8	sp
LEAF_NODE	225:11	225:11	8	->
LEAF_NODE	225:13	225:13	8	exit_jmpbuf
LEAF_NODE	225:24	225:24	6	,
ARGUMENT	225:26	225:26	6	1
FIELD	225:26	225:26	7	1
LEAF_NODE	225:26	225:26	8	1
LEAF_NODE	225:27	225:27	6	)
LEAF_NODE	225:28	225:28	4	;
LEAF_NODE	226:0	226:0	2	}
FUNCTION_DEF	233:0	240:0	1	
RETURN_TYPE	233:0	233:7	2	static void
LEAF_NODE	233:0	233:0	3	static
TYPE_NAME	233:7	233:7	3	void
LEAF_NODE	233:7	233:7	4	void
FUNCTION_NAME	234:0	234:0	2	TIFFjpeg_output_message
LEAF_NODE	234:0	234:0	3	TIFFjpeg_output_message
PARAMETER_LIST	234:23	234:42	2	( j_common_ptr cinfo )
LEAF_NODE	234:23	234:23	3	(
PARAMETER_DECL	234:24	234:37	3	j_common_ptr cinfo
TYPE	234:24	234:24	4	j_common_ptr
TYPE_NAME	234:24	234:24	5	j_common_ptr
LEAF_NODE	234:24	234:24	6	j_common_ptr
NAME	234:37	234:37	4	cinfo
LEAF_NODE	234:37	234:37	5	cinfo
LEAF_NODE	234:42	234:42	3	)
LEAF_NODE	235:0	235:0	2	{
STATEMENTS	236:1	239:1	2	
SIMPLE_DECL	236:1	236:29	3	char [ JMSG_LENGTH_MAX ] buffer ;
VAR_DECL	236:1	236:6	4	char [ JMSG_LENGTH_MAX ] buffer
TYPE	236:1	236:12	5	char [ JMSG_LENGTH_MAX ]
TYPE_NAME	236:1	236:1	6	char
LEAF_NODE	236:1	236:1	7	char
TYPE_SUFFIX	236:12	236:28	6	[ JMSG_LENGTH_MAX ]
LEAF_NODE	236:12	236:12	7	[
FIELD	236:13	236:13	7	JMSG_LENGTH_MAX
LEAF_NODE	236:13	236:13	8	JMSG_LENGTH_MAX
LEAF_NODE	236:28	236:28	7	]
NAME	236:6	236:6	5	buffer
LEAF_NODE	236:6	236:6	6	buffer
LEAF_NODE	236:29	236:29	4	;
EXPR_STATEMENT	238:1	238:46	3	( * cinfo -> err -> format_message ) ( cinfo , buffer ) ;
EXPR	238:1	238:1	4	( * cinfo -> err -> format_message ) ( cinfo , buffer )
FUNCTION_CALL	238:1	238:45	5	( * cinfo -> err -> format_message ) ( cinfo , buffer )
CALLEE	238:1	238:29	6	( * cinfo -> err -> format_message )
LEAF_NODE	238:1	238:1	7	(
UNARY_EXPR	238:2	238:3	7	* cinfo -> err -> format_message
UNARY_OPERATOR	238:2	238:2	8	*
LEAF_NODE	238:2	238:2	9	*
FIELD	238:3	238:15	8	cinfo -> err -> format_message
LEAF_NODE	238:3	238:3	9	cinfo
LEAF_NODE	238:8	238:8	9	->
LEAF_NODE	238:10	238:10	9	err
LEAF_NODE	238:13	238:13	9	->
LEAF_NODE	238:15	238:15	9	format_message
LEAF_NODE	238:29	238:29	7	)
LEAF_NODE	238:31	238:31	6	(
ARGUMENT	238:32	238:32	6	cinfo
FIELD	238:32	238:32	7	cinfo
LEAF_NODE	238:32	238:32	8	cinfo
LEAF_NODE	238:37	238:37	6	,
ARGUMENT	238:39	238:39	6	buffer
FIELD	238:39	238:39	7	buffer
LEAF_NODE	238:39	238:39	8	buffer
LEAF_NODE	238:45	238:45	6	)
LEAF_NODE	238:46	238:46	4	;
EXPR_STATEMENT	239:1	239:84	3	TIFFWarningExt ( ( ( JPEGState * ) cinfo ) -> tif -> tif_clientdata , "JPEGLib" , "%s" , buffer ) ;
EXPR	239:1	239:1	4	TIFFWarningExt ( ( ( JPEGState * ) cinfo ) -> tif -> tif_clientdata , "JPEGLib" , "%s" , buffer )
FUNCTION_CALL	239:1	239:83	5	TIFFWarningExt ( ( ( JPEGState * ) cinfo ) -> tif -> tif_clientdata , "JPEGLib" , "%s" , buffer )
CALLEE	239:1	239:1	6	TIFFWarningExt
LEAF_NODE	239:1	239:1	7	TIFFWarningExt
LEAF_NODE	239:15	239:15	6	(
ARGUMENT	239:16	239:44	6	( ( JPEGState * ) cinfo ) -> tif -> tif_clientdata
LEAF_NODE	239:16	239:16	7	(
LEAF_NODE	239:17	239:17	7	(
TYPE_NAME	239:18	239:18	7	JPEGState
LEAF_NODE	239:18	239:18	8	JPEGState
LEAF_NODE	239:28	239:28	7	*
LEAF_NODE	239:29	239:29	7	)
FIELD	239:31	239:31	7	cinfo
LEAF_NODE	239:31	239:31	8	cinfo
LEAF_NODE	239:36	239:36	7	)
LEAF_NODE	239:37	239:37	7	->
LEAF_NODE	239:39	239:39	7	tif
LEAF_NODE	239:42	239:42	7	->
LEAF_NODE	239:44	239:44	7	tif_clientdata
LEAF_NODE	239:58	239:58	6	,
ARGUMENT	239:60	239:60	6	"JPEGLib"
FIELD	239:60	239:60	7	"JPEGLib"
LEAF_NODE	239:60	239:60	8	"JPEGLib"
LEAF_NODE	239:69	239:69	6	,
ARGUMENT	239:71	239:71	6	"%s"
FIELD	239:71	239:71	7	"%s"
LEAF_NODE	239:71	239:71	8	"%s"
LEAF_NODE	239:75	239:75	6	,
ARGUMENT	239:77	239:77	6	buffer
FIELD	239:77	239:77	7	buffer
LEAF_NODE	239:77	239:77	8	buffer
LEAF_NODE	239:83	239:83	6	)
LEAF_NODE	239:84	239:84	4	;
LEAF_NODE	240:0	240:0	2	}
FUNCTION_DEF	245:0	266:0	1	
RETURN_TYPE	245:0	245:7	2	static void
LEAF_NODE	245:0	245:0	3	static
TYPE_NAME	245:7	245:7	3	void
LEAF_NODE	245:7	245:7	4	void
FUNCTION_NAME	246:0	246:0	2	TIFFjpeg_progress_monitor
LEAF_NODE	246:0	246:0	3	TIFFjpeg_progress_monitor
PARAMETER_LIST	246:25	246:44	2	( j_common_ptr cinfo )
LEAF_NODE	246:25	246:25	3	(
PARAMETER_DECL	246:26	246:39	3	j_common_ptr cinfo
TYPE	246:26	246:26	4	j_common_ptr
TYPE_NAME	246:26	246:26	5	j_common_ptr
LEAF_NODE	246:26	246:26	6	j_common_ptr
NAME	246:39	246:39	4	cinfo
LEAF_NODE	246:39	246:39	5	cinfo
LEAF_NODE	246:44	246:44	3	)
LEAF_NODE	247:0	247:0	2	{
STATEMENTS	248:4	249:4	2	
SIMPLE_DECL	248:4	248:39	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	248:4	248:15	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	248:4	248:14	5	JPEGState *
TYPE_NAME	248:4	248:4	6	JPEGState
LEAF_NODE	248:4	248:4	7	JPEGState
POINTER	248:14	248:14	6	*
LEAF_NODE	248:14	248:14	7	*
NAME	248:15	248:15	5	sp
LEAF_NODE	248:15	248:15	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	248:15	248:15	5	sp = ( JPEGState * ) cinfo
ASSIGN	248:15	248:20	6	sp = ( JPEGState * ) cinfo
LVAL	248:15	248:15	7	sp
NAME	248:15	248:15	8	sp
LEAF_NODE	248:15	248:15	9	sp
ASSIGN_OP	248:18	248:18	7	=
LEAF_NODE	248:18	248:18	8	=
RVAL	248:20	248:34	7	( JPEGState * ) cinfo
LEAF_NODE	248:20	248:20	8	(
TYPE_NAME	248:21	248:21	8	JPEGState
LEAF_NODE	248:21	248:21	9	JPEGState
LEAF_NODE	248:31	248:31	8	*
LEAF_NODE	248:32	248:32	8	)
FIELD	248:34	248:34	8	cinfo
LEAF_NODE	248:34	248:34	9	cinfo
LEAF_NODE	248:39	248:39	4	;
SELECTION	249:4	250:4	3	
KEYWORD	249:4	249:4	4	if
LEAF_NODE	249:4	249:4	5	if
LEAF_NODE	249:7	249:7	4	(
CONDITION	249:8	249:8	4	cinfo -> is_decompressor
EXPR	249:8	249:8	5	cinfo -> is_decompressor
FIELD	249:8	249:15	6	cinfo -> is_decompressor
LEAF_NODE	249:8	249:8	7	cinfo
LEAF_NODE	249:13	249:13	7	->
LEAF_NODE	249:15	249:15	7	is_decompressor
LEAF_NODE	249:30	249:30	4	)
STATEMENTS	250:4	265:4	4	
LEAF_NODE	250:4	250:4	5	{
STATEMENTS	251:8	253:8	5	
SIMPLE_DECL	251:8	252:56	6	const int scan_no ; scan_no = ( ( j_decompress_ptr ) cinfo ) -> input_scan_number ;
VAR_DECL	251:8	251:18	7	const int scan_no ; scan_no = ( ( j_decompress_ptr ) cinfo ) -> input_scan_number
TYPE	251:8	251:8	8	const int
TYPE_NAME	251:8	251:14	9	const int
LEAF_NODE	251:8	251:8	10	const
LEAF_NODE	251:14	251:14	10	int
NAME	251:18	251:18	8	scan_no
LEAF_NODE	251:18	251:18	9	scan_no
LEAF_NODE	0:0	0:0	8	;
INIT	251:18	251:18	8	scan_no = ( ( j_decompress_ptr ) cinfo ) -> input_scan_number
ASSIGN	251:18	252:12	9	scan_no = ( ( j_decompress_ptr ) cinfo ) -> input_scan_number
LVAL	251:18	251:18	10	scan_no
NAME	251:18	251:18	11	scan_no
LEAF_NODE	251:18	251:18	12	scan_no
ASSIGN_OP	251:26	251:26	10	=
LEAF_NODE	251:26	251:26	11	=
RVAL	252:12	252:39	10	( ( j_decompress_ptr ) cinfo ) -> input_scan_number
LEAF_NODE	252:12	252:12	11	(
LEAF_NODE	252:13	252:13	11	(
TYPE_NAME	252:14	252:14	11	j_decompress_ptr
LEAF_NODE	252:14	252:14	12	j_decompress_ptr
LEAF_NODE	252:30	252:30	11	)
FIELD	252:31	252:31	11	cinfo
LEAF_NODE	252:31	252:31	12	cinfo
LEAF_NODE	252:36	252:36	11	)
LEAF_NODE	252:37	252:37	11	->
LEAF_NODE	252:39	252:39	11	input_scan_number
LEAF_NODE	252:56	252:56	7	;
SELECTION	253:8	254:8	6	
KEYWORD	253:8	253:8	7	if
LEAF_NODE	253:8	253:8	8	if
LEAF_NODE	253:11	253:11	7	(
CONDITION	253:12	253:12	7	scan_no >= sp -> max_allowed_scan_number
EXPR	253:12	253:23	8	scan_no >= sp -> max_allowed_scan_number
FIELD	253:12	253:12	9	scan_no
LEAF_NODE	253:12	253:12	10	scan_no
REL_OPERATOR	253:20	253:20	9	>=
LEAF_NODE	253:20	253:20	10	>=
FIELD	253:23	253:27	9	sp -> max_allowed_scan_number
LEAF_NODE	253:23	253:23	10	sp
LEAF_NODE	253:25	253:25	10	->
LEAF_NODE	253:27	253:27	10	max_allowed_scan_number
LEAF_NODE	253:50	253:50	7	)
STATEMENTS	254:8	264:8	7	
LEAF_NODE	254:8	254:8	8	{
STATEMENTS	255:12	263:12	8	
LEAF_NODE	255:12	255:12	9	TIFFErrorExt
LEAF_NODE	255:24	255:24	9	(
LEAF_NODE	255:25	255:25	9	(
LEAF_NODE	255:26	255:26	9	(
LEAF_NODE	255:27	255:27	9	JPEGState
LEAF_NODE	255:37	255:37	9	*
LEAF_NODE	255:38	255:38	9	)
LEAF_NODE	255:40	255:40	9	cinfo
LEAF_NODE	255:45	255:45	9	)
LEAF_NODE	255:46	255:46	9	->
LEAF_NODE	255:48	255:48	9	tif
LEAF_NODE	255:51	255:51	9	->
LEAF_NODE	255:53	255:53	9	tif_clientdata
LEAF_NODE	255:67	255:67	9	,
LEAF_NODE	256:21	256:21	9	"TIFFjpeg_progress_monitor"
LEAF_NODE	256:48	256:48	9	,
LEAF_NODE	257:21	257:21	9	"Scan number %d exceeds maximum scans (%d). This limit "
LEAF_NODE	258:21	258:21	9	"can be raised through the LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER "
LEAF_NODE	259:21	259:21	9	"environment variable."
LEAF_NODE	259:44	259:44	9	,
LEAF_NODE	260:21	260:21	9	scan_no
LEAF_NODE	260:28	260:28	9	,
LEAF_NODE	260:30	260:30	9	sp
LEAF_NODE	260:32	260:32	9	->
LEAF_NODE	260:34	260:34	9	max_allowed_scan_number
LEAF_NODE	260:57	260:57	9	)
LEAF_NODE	260:58	260:58	9	;
EXPR_STATEMENT	262:12	262:29	9	jpeg_abort ( cinfo ) ;
EXPR	262:12	262:12	10	jpeg_abort ( cinfo )
FUNCTION_CALL	262:12	262:28	11	jpeg_abort ( cinfo )
CALLEE	262:12	262:12	12	jpeg_abort
LEAF_NODE	262:12	262:12	13	jpeg_abort
LEAF_NODE	262:22	262:22	12	(
ARGUMENT	262:23	262:23	12	cinfo
FIELD	262:23	262:23	13	cinfo
LEAF_NODE	262:23	262:23	14	cinfo
LEAF_NODE	262:28	262:28	12	)
LEAF_NODE	262:29	262:29	10	;
EXPR_STATEMENT	263:12	263:39	9	LONGJMP ( sp -> exit_jmpbuf , 1 ) ;
EXPR	263:12	263:12	10	LONGJMP ( sp -> exit_jmpbuf , 1 )
FUNCTION_CALL	263:12	263:38	11	LONGJMP ( sp -> exit_jmpbuf , 1 )
CALLEE	263:12	263:12	12	LONGJMP
LEAF_NODE	263:12	263:12	13	LONGJMP
LEAF_NODE	263:19	263:19	12	(
ARGUMENT	263:20	263:20	12	sp -> exit_jmpbuf
FIELD	263:20	263:24	13	sp -> exit_jmpbuf
LEAF_NODE	263:20	263:20	14	sp
LEAF_NODE	263:22	263:22	14	->
LEAF_NODE	263:24	263:24	14	exit_jmpbuf
LEAF_NODE	263:35	263:35	12	,
ARGUMENT	263:37	263:37	12	1
FIELD	263:37	263:37	13	1
LEAF_NODE	263:37	263:37	14	1
LEAF_NODE	263:38	263:38	12	)
LEAF_NODE	263:39	263:39	10	;
LEAF_NODE	264:8	264:8	8	}
LEAF_NODE	265:4	265:4	5	}
LEAF_NODE	266:0	266:0	2	}
FUNCTION_DEF	278:0	290:0	1	
RETURN_TYPE	278:0	278:7	2	static int
LEAF_NODE	278:0	278:0	3	static
TYPE_NAME	278:7	278:7	3	int
LEAF_NODE	278:7	278:7	4	int
FUNCTION_NAME	279:0	279:0	2	TIFFjpeg_create_compress
LEAF_NODE	279:0	279:0	3	TIFFjpeg_create_compress
PARAMETER_LIST	279:24	279:38	2	( JPEGState * sp )
LEAF_NODE	279:24	279:24	3	(
PARAMETER_DECL	279:25	279:36	3	JPEGState * sp
TYPE	279:25	279:34	4	JPEGState *
TYPE_NAME	279:25	279:25	5	JPEGState
LEAF_NODE	279:25	279:25	6	JPEGState
POINTER	279:34	279:34	5	*
LEAF_NODE	279:34	279:34	6	*
NAME	279:36	279:36	4	sp
LEAF_NODE	279:36	279:36	5	sp
LEAF_NODE	279:38	279:38	3	)
LEAF_NODE	280:0	280:0	2	{
STATEMENTS	282:1	289:1	2	
EXPR_STATEMENT	282:1	282:43	3	sp -> cinfo . c . err = jpeg_std_error ( & sp -> err ) ;
EXPR	282:1	282:1	4	sp -> cinfo . c . err = jpeg_std_error ( & sp -> err )
ASSIGN	282:1	282:19	5	sp -> cinfo . c . err = jpeg_std_error ( & sp -> err )
LVAL	282:1	282:1	6	sp -> cinfo . c . err
FIELD	282:1	282:13	7	sp -> cinfo . c . err
LEAF_NODE	282:1	282:1	8	sp
LEAF_NODE	282:3	282:3	8	->
LEAF_NODE	282:5	282:5	8	cinfo
LEAF_NODE	282:10	282:10	8	.
LEAF_NODE	282:11	282:11	8	c
LEAF_NODE	282:12	282:12	8	.
LEAF_NODE	282:13	282:13	8	err
ASSIGN_OP	282:17	282:17	6	=
LEAF_NODE	282:17	282:17	7	=
RVAL	282:19	282:19	6	jpeg_std_error ( & sp -> err )
FUNCTION_CALL	282:19	282:42	7	jpeg_std_error ( & sp -> err )
CALLEE	282:19	282:19	8	jpeg_std_error
LEAF_NODE	282:19	282:19	9	jpeg_std_error
LEAF_NODE	282:33	282:33	8	(
ARGUMENT	282:34	282:34	8	& sp -> err
UNARY_EXPR	282:34	282:35	9	& sp -> err
UNARY_OPERATOR	282:34	282:34	10	&
LEAF_NODE	282:34	282:34	11	&
FIELD	282:35	282:39	10	sp -> err
LEAF_NODE	282:35	282:35	11	sp
LEAF_NODE	282:37	282:37	11	->
LEAF_NODE	282:39	282:39	11	err
LEAF_NODE	282:42	282:42	8	)
LEAF_NODE	282:43	282:43	4	;
EXPR_STATEMENT	283:1	283:41	3	sp -> err . error_exit = TIFFjpeg_error_exit ;
EXPR	283:1	283:1	4	sp -> err . error_exit = TIFFjpeg_error_exit
ASSIGN	283:1	283:22	5	sp -> err . error_exit = TIFFjpeg_error_exit
LVAL	283:1	283:1	6	sp -> err . error_exit
FIELD	283:1	283:9	7	sp -> err . error_exit
LEAF_NODE	283:1	283:1	8	sp
LEAF_NODE	283:3	283:3	8	->
LEAF_NODE	283:5	283:5	8	err
LEAF_NODE	283:8	283:8	8	.
LEAF_NODE	283:9	283:9	8	error_exit
ASSIGN_OP	283:20	283:20	6	=
LEAF_NODE	283:20	283:20	7	=
RVAL	283:22	283:22	6	TIFFjpeg_error_exit
FIELD	283:22	283:22	7	TIFFjpeg_error_exit
LEAF_NODE	283:22	283:22	8	TIFFjpeg_error_exit
LEAF_NODE	283:41	283:41	4	;
EXPR_STATEMENT	284:1	284:49	3	sp -> err . output_message = TIFFjpeg_output_message ;
EXPR	284:1	284:1	4	sp -> err . output_message = TIFFjpeg_output_message
ASSIGN	284:1	284:26	5	sp -> err . output_message = TIFFjpeg_output_message
LVAL	284:1	284:1	6	sp -> err . output_message
FIELD	284:1	284:9	7	sp -> err . output_message
LEAF_NODE	284:1	284:1	8	sp
LEAF_NODE	284:3	284:3	8	->
LEAF_NODE	284:5	284:5	8	err
LEAF_NODE	284:8	284:8	8	.
LEAF_NODE	284:9	284:9	8	output_message
ASSIGN_OP	284:24	284:24	6	=
LEAF_NODE	284:24	284:24	7	=
RVAL	284:26	284:26	6	TIFFjpeg_output_message
FIELD	284:26	284:26	7	TIFFjpeg_output_message
LEAF_NODE	284:26	284:26	8	TIFFjpeg_output_message
LEAF_NODE	284:49	284:49	4	;
EXPR_STATEMENT	287:1	287:31	3	sp -> cinfo . c . client_data = NULL ;
EXPR	287:1	287:1	4	sp -> cinfo . c . client_data = NULL
ASSIGN	287:1	287:27	5	sp -> cinfo . c . client_data = NULL
LVAL	287:1	287:1	6	sp -> cinfo . c . client_data
FIELD	287:1	287:13	7	sp -> cinfo . c . client_data
LEAF_NODE	287:1	287:1	8	sp
LEAF_NODE	287:3	287:3	8	->
LEAF_NODE	287:5	287:5	8	cinfo
LEAF_NODE	287:10	287:10	8	.
LEAF_NODE	287:11	287:11	8	c
LEAF_NODE	287:12	287:12	8	.
LEAF_NODE	287:13	287:13	8	client_data
ASSIGN_OP	287:25	287:25	6	=
LEAF_NODE	287:25	287:25	7	=
RVAL	287:27	287:27	6	NULL
FIELD	287:27	287:27	7	NULL
LEAF_NODE	287:27	287:27	8	NULL
LEAF_NODE	287:31	287:31	4	;
JUMP_STATEMENT	289:1	289:57	3	return CALLVJPEG ( sp , jpeg_create_compress ( & sp -> cinfo . c ) ) ;
KEYWORD	289:1	289:1	4	return
LEAF_NODE	289:1	289:1	5	return
DESTINATION	289:8	289:8	4	CALLVJPEG ( sp , jpeg_create_compress ( & sp -> cinfo . c ) )
EXPR	289:8	289:8	5	CALLVJPEG ( sp , jpeg_create_compress ( & sp -> cinfo . c ) )
FUNCTION_CALL	289:8	289:56	6	CALLVJPEG ( sp , jpeg_create_compress ( & sp -> cinfo . c ) )
CALLEE	289:8	289:8	7	CALLVJPEG
LEAF_NODE	289:8	289:8	8	CALLVJPEG
LEAF_NODE	289:17	289:17	7	(
ARGUMENT	289:18	289:18	7	sp
FIELD	289:18	289:18	8	sp
LEAF_NODE	289:18	289:18	9	sp
LEAF_NODE	289:20	289:20	7	,
ARGUMENT	289:22	289:22	7	jpeg_create_compress ( & sp -> cinfo . c )
FUNCTION_CALL	289:22	289:55	8	jpeg_create_compress ( & sp -> cinfo . c )
CALLEE	289:22	289:22	9	jpeg_create_compress
LEAF_NODE	289:22	289:22	10	jpeg_create_compress
LEAF_NODE	289:42	289:42	9	(
ARGUMENT	289:43	289:43	9	& sp -> cinfo . c
UNARY_EXPR	289:43	289:44	10	& sp -> cinfo . c
UNARY_OPERATOR	289:43	289:43	11	&
LEAF_NODE	289:43	289:43	12	&
FIELD	289:44	289:54	11	sp -> cinfo . c
LEAF_NODE	289:44	289:44	12	sp
LEAF_NODE	289:46	289:46	12	->
LEAF_NODE	289:48	289:48	12	cinfo
LEAF_NODE	289:53	289:53	12	.
LEAF_NODE	289:54	289:54	12	c
LEAF_NODE	289:55	289:55	9	)
LEAF_NODE	289:56	289:56	7	)
LEAF_NODE	289:57	289:57	4	;
LEAF_NODE	290:0	290:0	2	}
FUNCTION_DEF	292:0	304:0	1	
RETURN_TYPE	292:0	292:7	2	static int
LEAF_NODE	292:0	292:0	3	static
TYPE_NAME	292:7	292:7	3	int
LEAF_NODE	292:7	292:7	4	int
FUNCTION_NAME	293:0	293:0	2	TIFFjpeg_create_decompress
LEAF_NODE	293:0	293:0	3	TIFFjpeg_create_decompress
PARAMETER_LIST	293:26	293:40	2	( JPEGState * sp )
LEAF_NODE	293:26	293:26	3	(
PARAMETER_DECL	293:27	293:38	3	JPEGState * sp
TYPE	293:27	293:36	4	JPEGState *
TYPE_NAME	293:27	293:27	5	JPEGState
LEAF_NODE	293:27	293:27	6	JPEGState
POINTER	293:36	293:36	5	*
LEAF_NODE	293:36	293:36	6	*
NAME	293:38	293:38	4	sp
LEAF_NODE	293:38	293:38	5	sp
LEAF_NODE	293:40	293:40	3	)
LEAF_NODE	294:0	294:0	2	{
STATEMENTS	296:1	303:1	2	
EXPR_STATEMENT	296:1	296:43	3	sp -> cinfo . d . err = jpeg_std_error ( & sp -> err ) ;
EXPR	296:1	296:1	4	sp -> cinfo . d . err = jpeg_std_error ( & sp -> err )
ASSIGN	296:1	296:19	5	sp -> cinfo . d . err = jpeg_std_error ( & sp -> err )
LVAL	296:1	296:1	6	sp -> cinfo . d . err
FIELD	296:1	296:13	7	sp -> cinfo . d . err
LEAF_NODE	296:1	296:1	8	sp
LEAF_NODE	296:3	296:3	8	->
LEAF_NODE	296:5	296:5	8	cinfo
LEAF_NODE	296:10	296:10	8	.
LEAF_NODE	296:11	296:11	8	d
LEAF_NODE	296:12	296:12	8	.
LEAF_NODE	296:13	296:13	8	err
ASSIGN_OP	296:17	296:17	6	=
LEAF_NODE	296:17	296:17	7	=
RVAL	296:19	296:19	6	jpeg_std_error ( & sp -> err )
FUNCTION_CALL	296:19	296:42	7	jpeg_std_error ( & sp -> err )
CALLEE	296:19	296:19	8	jpeg_std_error
LEAF_NODE	296:19	296:19	9	jpeg_std_error
LEAF_NODE	296:33	296:33	8	(
ARGUMENT	296:34	296:34	8	& sp -> err
UNARY_EXPR	296:34	296:35	9	& sp -> err
UNARY_OPERATOR	296:34	296:34	10	&
LEAF_NODE	296:34	296:34	11	&
FIELD	296:35	296:39	10	sp -> err
LEAF_NODE	296:35	296:35	11	sp
LEAF_NODE	296:37	296:37	11	->
LEAF_NODE	296:39	296:39	11	err
LEAF_NODE	296:42	296:42	8	)
LEAF_NODE	296:43	296:43	4	;
EXPR_STATEMENT	297:1	297:41	3	sp -> err . error_exit = TIFFjpeg_error_exit ;
EXPR	297:1	297:1	4	sp -> err . error_exit = TIFFjpeg_error_exit
ASSIGN	297:1	297:22	5	sp -> err . error_exit = TIFFjpeg_error_exit
LVAL	297:1	297:1	6	sp -> err . error_exit
FIELD	297:1	297:9	7	sp -> err . error_exit
LEAF_NODE	297:1	297:1	8	sp
LEAF_NODE	297:3	297:3	8	->
LEAF_NODE	297:5	297:5	8	err
LEAF_NODE	297:8	297:8	8	.
LEAF_NODE	297:9	297:9	8	error_exit
ASSIGN_OP	297:20	297:20	6	=
LEAF_NODE	297:20	297:20	7	=
RVAL	297:22	297:22	6	TIFFjpeg_error_exit
FIELD	297:22	297:22	7	TIFFjpeg_error_exit
LEAF_NODE	297:22	297:22	8	TIFFjpeg_error_exit
LEAF_NODE	297:41	297:41	4	;
EXPR_STATEMENT	298:1	298:49	3	sp -> err . output_message = TIFFjpeg_output_message ;
EXPR	298:1	298:1	4	sp -> err . output_message = TIFFjpeg_output_message
ASSIGN	298:1	298:26	5	sp -> err . output_message = TIFFjpeg_output_message
LVAL	298:1	298:1	6	sp -> err . output_message
FIELD	298:1	298:9	7	sp -> err . output_message
LEAF_NODE	298:1	298:1	8	sp
LEAF_NODE	298:3	298:3	8	->
LEAF_NODE	298:5	298:5	8	err
LEAF_NODE	298:8	298:8	8	.
LEAF_NODE	298:9	298:9	8	output_message
ASSIGN_OP	298:24	298:24	6	=
LEAF_NODE	298:24	298:24	7	=
RVAL	298:26	298:26	6	TIFFjpeg_output_message
FIELD	298:26	298:26	7	TIFFjpeg_output_message
LEAF_NODE	298:26	298:26	8	TIFFjpeg_output_message
LEAF_NODE	298:49	298:49	4	;
EXPR_STATEMENT	301:1	301:31	3	sp -> cinfo . d . client_data = NULL ;
EXPR	301:1	301:1	4	sp -> cinfo . d . client_data = NULL
ASSIGN	301:1	301:27	5	sp -> cinfo . d . client_data = NULL
LVAL	301:1	301:1	6	sp -> cinfo . d . client_data
FIELD	301:1	301:13	7	sp -> cinfo . d . client_data
LEAF_NODE	301:1	301:1	8	sp
LEAF_NODE	301:3	301:3	8	->
LEAF_NODE	301:5	301:5	8	cinfo
LEAF_NODE	301:10	301:10	8	.
LEAF_NODE	301:11	301:11	8	d
LEAF_NODE	301:12	301:12	8	.
LEAF_NODE	301:13	301:13	8	client_data
ASSIGN_OP	301:25	301:25	6	=
LEAF_NODE	301:25	301:25	7	=
RVAL	301:27	301:27	6	NULL
FIELD	301:27	301:27	7	NULL
LEAF_NODE	301:27	301:27	8	NULL
LEAF_NODE	301:31	301:31	4	;
JUMP_STATEMENT	303:1	303:59	3	return CALLVJPEG ( sp , jpeg_create_decompress ( & sp -> cinfo . d ) ) ;
KEYWORD	303:1	303:1	4	return
LEAF_NODE	303:1	303:1	5	return
DESTINATION	303:8	303:8	4	CALLVJPEG ( sp , jpeg_create_decompress ( & sp -> cinfo . d ) )
EXPR	303:8	303:8	5	CALLVJPEG ( sp , jpeg_create_decompress ( & sp -> cinfo . d ) )
FUNCTION_CALL	303:8	303:58	6	CALLVJPEG ( sp , jpeg_create_decompress ( & sp -> cinfo . d ) )
CALLEE	303:8	303:8	7	CALLVJPEG
LEAF_NODE	303:8	303:8	8	CALLVJPEG
LEAF_NODE	303:17	303:17	7	(
ARGUMENT	303:18	303:18	7	sp
FIELD	303:18	303:18	8	sp
LEAF_NODE	303:18	303:18	9	sp
LEAF_NODE	303:20	303:20	7	,
ARGUMENT	303:22	303:22	7	jpeg_create_decompress ( & sp -> cinfo . d )
FUNCTION_CALL	303:22	303:57	8	jpeg_create_decompress ( & sp -> cinfo . d )
CALLEE	303:22	303:22	9	jpeg_create_decompress
LEAF_NODE	303:22	303:22	10	jpeg_create_decompress
LEAF_NODE	303:44	303:44	9	(
ARGUMENT	303:45	303:45	9	& sp -> cinfo . d
UNARY_EXPR	303:45	303:46	10	& sp -> cinfo . d
UNARY_OPERATOR	303:45	303:45	11	&
LEAF_NODE	303:45	303:45	12	&
FIELD	303:46	303:56	11	sp -> cinfo . d
LEAF_NODE	303:46	303:46	12	sp
LEAF_NODE	303:48	303:48	12	->
LEAF_NODE	303:50	303:50	12	cinfo
LEAF_NODE	303:55	303:55	12	.
LEAF_NODE	303:56	303:56	12	d
LEAF_NODE	303:57	303:57	9	)
LEAF_NODE	303:58	303:58	7	)
LEAF_NODE	303:59	303:59	4	;
LEAF_NODE	304:0	304:0	2	}
FUNCTION_DEF	306:0	310:0	1	
RETURN_TYPE	306:0	306:7	2	static int
LEAF_NODE	306:0	306:0	3	static
TYPE_NAME	306:7	306:7	3	int
LEAF_NODE	306:7	306:7	4	int
FUNCTION_NAME	307:0	307:0	2	TIFFjpeg_set_defaults
LEAF_NODE	307:0	307:0	3	TIFFjpeg_set_defaults
PARAMETER_LIST	307:21	307:35	2	( JPEGState * sp )
LEAF_NODE	307:21	307:21	3	(
PARAMETER_DECL	307:22	307:33	3	JPEGState * sp
TYPE	307:22	307:31	4	JPEGState *
TYPE_NAME	307:22	307:22	5	JPEGState
LEAF_NODE	307:22	307:22	6	JPEGState
POINTER	307:31	307:31	5	*
LEAF_NODE	307:31	307:31	6	*
NAME	307:33	307:33	4	sp
LEAF_NODE	307:33	307:33	5	sp
LEAF_NODE	307:35	307:35	3	)
LEAF_NODE	308:0	308:0	2	{
STATEMENTS	309:1	309:1	2	
JUMP_STATEMENT	309:1	309:54	3	return CALLVJPEG ( sp , jpeg_set_defaults ( & sp -> cinfo . c ) ) ;
KEYWORD	309:1	309:1	4	return
LEAF_NODE	309:1	309:1	5	return
DESTINATION	309:8	309:8	4	CALLVJPEG ( sp , jpeg_set_defaults ( & sp -> cinfo . c ) )
EXPR	309:8	309:8	5	CALLVJPEG ( sp , jpeg_set_defaults ( & sp -> cinfo . c ) )
FUNCTION_CALL	309:8	309:53	6	CALLVJPEG ( sp , jpeg_set_defaults ( & sp -> cinfo . c ) )
CALLEE	309:8	309:8	7	CALLVJPEG
LEAF_NODE	309:8	309:8	8	CALLVJPEG
LEAF_NODE	309:17	309:17	7	(
ARGUMENT	309:18	309:18	7	sp
FIELD	309:18	309:18	8	sp
LEAF_NODE	309:18	309:18	9	sp
LEAF_NODE	309:20	309:20	7	,
ARGUMENT	309:22	309:22	7	jpeg_set_defaults ( & sp -> cinfo . c )
FUNCTION_CALL	309:22	309:52	8	jpeg_set_defaults ( & sp -> cinfo . c )
CALLEE	309:22	309:22	9	jpeg_set_defaults
LEAF_NODE	309:22	309:22	10	jpeg_set_defaults
LEAF_NODE	309:39	309:39	9	(
ARGUMENT	309:40	309:40	9	& sp -> cinfo . c
UNARY_EXPR	309:40	309:41	10	& sp -> cinfo . c
UNARY_OPERATOR	309:40	309:40	11	&
LEAF_NODE	309:40	309:40	12	&
FIELD	309:41	309:51	11	sp -> cinfo . c
LEAF_NODE	309:41	309:41	12	sp
LEAF_NODE	309:43	309:43	12	->
LEAF_NODE	309:45	309:45	12	cinfo
LEAF_NODE	309:50	309:50	12	.
LEAF_NODE	309:51	309:51	12	c
LEAF_NODE	309:52	309:52	9	)
LEAF_NODE	309:53	309:53	7	)
LEAF_NODE	309:54	309:54	4	;
LEAF_NODE	310:0	310:0	2	}
FUNCTION_DEF	312:0	316:0	1	
RETURN_TYPE	312:0	312:7	2	static int
LEAF_NODE	312:0	312:0	3	static
TYPE_NAME	312:7	312:7	3	int
LEAF_NODE	312:7	312:7	4	int
FUNCTION_NAME	313:0	313:0	2	TIFFjpeg_set_colorspace
LEAF_NODE	313:0	313:0	3	TIFFjpeg_set_colorspace
PARAMETER_LIST	313:23	313:63	2	( JPEGState * sp , J_COLOR_SPACE colorspace )
LEAF_NODE	313:23	313:23	3	(
PARAMETER_DECL	313:24	313:35	3	JPEGState * sp
TYPE	313:24	313:33	4	JPEGState *
TYPE_NAME	313:24	313:24	5	JPEGState
LEAF_NODE	313:24	313:24	6	JPEGState
POINTER	313:33	313:33	5	*
LEAF_NODE	313:33	313:33	6	*
NAME	313:35	313:35	4	sp
LEAF_NODE	313:35	313:35	5	sp
LEAF_NODE	313:37	313:37	3	,
PARAMETER_DECL	313:39	313:53	3	J_COLOR_SPACE colorspace
TYPE	313:39	313:39	4	J_COLOR_SPACE
TYPE_NAME	313:39	313:39	5	J_COLOR_SPACE
LEAF_NODE	313:39	313:39	6	J_COLOR_SPACE
NAME	313:53	313:53	4	colorspace
LEAF_NODE	313:53	313:53	5	colorspace
LEAF_NODE	313:63	313:63	3	)
LEAF_NODE	314:0	314:0	2	{
STATEMENTS	315:1	315:1	2	
JUMP_STATEMENT	315:1	315:68	3	return CALLVJPEG ( sp , jpeg_set_colorspace ( & sp -> cinfo . c , colorspace ) ) ;
KEYWORD	315:1	315:1	4	return
LEAF_NODE	315:1	315:1	5	return
DESTINATION	315:8	315:8	4	CALLVJPEG ( sp , jpeg_set_colorspace ( & sp -> cinfo . c , colorspace ) )
EXPR	315:8	315:8	5	CALLVJPEG ( sp , jpeg_set_colorspace ( & sp -> cinfo . c , colorspace ) )
FUNCTION_CALL	315:8	315:67	6	CALLVJPEG ( sp , jpeg_set_colorspace ( & sp -> cinfo . c , colorspace ) )
CALLEE	315:8	315:8	7	CALLVJPEG
LEAF_NODE	315:8	315:8	8	CALLVJPEG
LEAF_NODE	315:17	315:17	7	(
ARGUMENT	315:18	315:18	7	sp
FIELD	315:18	315:18	8	sp
LEAF_NODE	315:18	315:18	9	sp
LEAF_NODE	315:20	315:20	7	,
ARGUMENT	315:22	315:22	7	jpeg_set_colorspace ( & sp -> cinfo . c , colorspace )
FUNCTION_CALL	315:22	315:66	8	jpeg_set_colorspace ( & sp -> cinfo . c , colorspace )
CALLEE	315:22	315:22	9	jpeg_set_colorspace
LEAF_NODE	315:22	315:22	10	jpeg_set_colorspace
LEAF_NODE	315:41	315:41	9	(
ARGUMENT	315:42	315:42	9	& sp -> cinfo . c
UNARY_EXPR	315:42	315:43	10	& sp -> cinfo . c
UNARY_OPERATOR	315:42	315:42	11	&
LEAF_NODE	315:42	315:42	12	&
FIELD	315:43	315:53	11	sp -> cinfo . c
LEAF_NODE	315:43	315:43	12	sp
LEAF_NODE	315:45	315:45	12	->
LEAF_NODE	315:47	315:47	12	cinfo
LEAF_NODE	315:52	315:52	12	.
LEAF_NODE	315:53	315:53	12	c
LEAF_NODE	315:54	315:54	9	,
ARGUMENT	315:56	315:56	9	colorspace
FIELD	315:56	315:56	10	colorspace
LEAF_NODE	315:56	315:56	11	colorspace
LEAF_NODE	315:66	315:66	9	)
LEAF_NODE	315:67	315:67	7	)
LEAF_NODE	315:68	315:68	4	;
LEAF_NODE	316:0	316:0	2	}
FUNCTION_DEF	318:0	323:0	1	
RETURN_TYPE	318:0	318:7	2	static int
LEAF_NODE	318:0	318:0	3	static
TYPE_NAME	318:7	318:7	3	int
LEAF_NODE	318:7	318:7	4	int
FUNCTION_NAME	319:0	319:0	2	TIFFjpeg_set_quality
LEAF_NODE	319:0	319:0	3	TIFFjpeg_set_quality
PARAMETER_LIST	319:20	319:71	2	( JPEGState * sp , int quality , boolean force_baseline )
LEAF_NODE	319:20	319:20	3	(
PARAMETER_DECL	319:21	319:32	3	JPEGState * sp
TYPE	319:21	319:30	4	JPEGState *
TYPE_NAME	319:21	319:21	5	JPEGState
LEAF_NODE	319:21	319:21	6	JPEGState
POINTER	319:30	319:30	5	*
LEAF_NODE	319:30	319:30	6	*
NAME	319:32	319:32	4	sp
LEAF_NODE	319:32	319:32	5	sp
LEAF_NODE	319:34	319:34	3	,
PARAMETER_DECL	319:36	319:40	3	int quality
TYPE	319:36	319:36	4	int
TYPE_NAME	319:36	319:36	5	int
LEAF_NODE	319:36	319:36	6	int
NAME	319:40	319:40	4	quality
LEAF_NODE	319:40	319:40	5	quality
LEAF_NODE	319:47	319:47	3	,
PARAMETER_DECL	319:49	319:57	3	boolean force_baseline
TYPE	319:49	319:49	4	boolean
TYPE_NAME	319:49	319:49	5	boolean
LEAF_NODE	319:49	319:49	6	boolean
NAME	319:57	319:57	4	force_baseline
LEAF_NODE	319:57	319:57	5	force_baseline
LEAF_NODE	319:71	319:71	3	)
LEAF_NODE	320:0	320:0	2	{
STATEMENTS	321:1	321:1	2	
JUMP_STATEMENT	321:1	322:61	3	return CALLVJPEG ( sp , jpeg_set_quality ( & sp -> cinfo . c , quality , force_baseline ) ) ;
KEYWORD	321:1	321:1	4	return
LEAF_NODE	321:1	321:1	5	return
DESTINATION	321:8	321:8	4	CALLVJPEG ( sp , jpeg_set_quality ( & sp -> cinfo . c , quality , force_baseline ) )
EXPR	321:8	321:8	5	CALLVJPEG ( sp , jpeg_set_quality ( & sp -> cinfo . c , quality , force_baseline ) )
FUNCTION_CALL	321:8	322:60	6	CALLVJPEG ( sp , jpeg_set_quality ( & sp -> cinfo . c , quality , force_baseline ) )
CALLEE	321:8	321:8	7	CALLVJPEG
LEAF_NODE	321:8	321:8	8	CALLVJPEG
LEAF_NODE	321:17	321:17	7	(
ARGUMENT	321:18	321:18	7	sp
FIELD	321:18	321:18	8	sp
LEAF_NODE	321:18	321:18	9	sp
LEAF_NODE	321:20	321:20	7	,
ARGUMENT	322:5	322:5	7	jpeg_set_quality ( & sp -> cinfo . c , quality , force_baseline )
FUNCTION_CALL	322:5	322:59	8	jpeg_set_quality ( & sp -> cinfo . c , quality , force_baseline )
CALLEE	322:5	322:5	9	jpeg_set_quality
LEAF_NODE	322:5	322:5	10	jpeg_set_quality
LEAF_NODE	322:21	322:21	9	(
ARGUMENT	322:22	322:22	9	& sp -> cinfo . c
UNARY_EXPR	322:22	322:23	10	& sp -> cinfo . c
UNARY_OPERATOR	322:22	322:22	11	&
LEAF_NODE	322:22	322:22	12	&
FIELD	322:23	322:33	11	sp -> cinfo . c
LEAF_NODE	322:23	322:23	12	sp
LEAF_NODE	322:25	322:25	12	->
LEAF_NODE	322:27	322:27	12	cinfo
LEAF_NODE	322:32	322:32	12	.
LEAF_NODE	322:33	322:33	12	c
LEAF_NODE	322:34	322:34	9	,
ARGUMENT	322:36	322:36	9	quality
FIELD	322:36	322:36	10	quality
LEAF_NODE	322:36	322:36	11	quality
LEAF_NODE	322:43	322:43	9	,
ARGUMENT	322:45	322:45	9	force_baseline
FIELD	322:45	322:45	10	force_baseline
LEAF_NODE	322:45	322:45	11	force_baseline
LEAF_NODE	322:59	322:59	9	)
LEAF_NODE	322:60	322:60	7	)
LEAF_NODE	322:61	322:61	4	;
LEAF_NODE	323:0	323:0	2	}
FUNCTION_DEF	325:0	329:0	1	
RETURN_TYPE	325:0	325:7	2	static int
LEAF_NODE	325:0	325:0	3	static
TYPE_NAME	325:7	325:7	3	int
LEAF_NODE	325:7	325:7	4	int
FUNCTION_NAME	326:0	326:0	2	TIFFjpeg_suppress_tables
LEAF_NODE	326:0	326:0	3	TIFFjpeg_suppress_tables
PARAMETER_LIST	326:24	326:56	2	( JPEGState * sp , boolean suppress )
LEAF_NODE	326:24	326:24	3	(
PARAMETER_DECL	326:25	326:36	3	JPEGState * sp
TYPE	326:25	326:34	4	JPEGState *
TYPE_NAME	326:25	326:25	5	JPEGState
LEAF_NODE	326:25	326:25	6	JPEGState
POINTER	326:34	326:34	5	*
LEAF_NODE	326:34	326:34	6	*
NAME	326:36	326:36	4	sp
LEAF_NODE	326:36	326:36	5	sp
LEAF_NODE	326:38	326:38	3	,
PARAMETER_DECL	326:40	326:48	3	boolean suppress
TYPE	326:40	326:40	4	boolean
TYPE_NAME	326:40	326:40	5	boolean
LEAF_NODE	326:40	326:40	6	boolean
NAME	326:48	326:48	4	suppress
LEAF_NODE	326:48	326:48	5	suppress
LEAF_NODE	326:56	326:56	3	)
LEAF_NODE	327:0	327:0	2	{
STATEMENTS	328:1	328:1	2	
JUMP_STATEMENT	328:1	328:67	3	return CALLVJPEG ( sp , jpeg_suppress_tables ( & sp -> cinfo . c , suppress ) ) ;
KEYWORD	328:1	328:1	4	return
LEAF_NODE	328:1	328:1	5	return
DESTINATION	328:8	328:8	4	CALLVJPEG ( sp , jpeg_suppress_tables ( & sp -> cinfo . c , suppress ) )
EXPR	328:8	328:8	5	CALLVJPEG ( sp , jpeg_suppress_tables ( & sp -> cinfo . c , suppress ) )
FUNCTION_CALL	328:8	328:66	6	CALLVJPEG ( sp , jpeg_suppress_tables ( & sp -> cinfo . c , suppress ) )
CALLEE	328:8	328:8	7	CALLVJPEG
LEAF_NODE	328:8	328:8	8	CALLVJPEG
LEAF_NODE	328:17	328:17	7	(
ARGUMENT	328:18	328:18	7	sp
FIELD	328:18	328:18	8	sp
LEAF_NODE	328:18	328:18	9	sp
LEAF_NODE	328:20	328:20	7	,
ARGUMENT	328:22	328:22	7	jpeg_suppress_tables ( & sp -> cinfo . c , suppress )
FUNCTION_CALL	328:22	328:65	8	jpeg_suppress_tables ( & sp -> cinfo . c , suppress )
CALLEE	328:22	328:22	9	jpeg_suppress_tables
LEAF_NODE	328:22	328:22	10	jpeg_suppress_tables
LEAF_NODE	328:42	328:42	9	(
ARGUMENT	328:43	328:43	9	& sp -> cinfo . c
UNARY_EXPR	328:43	328:44	10	& sp -> cinfo . c
UNARY_OPERATOR	328:43	328:43	11	&
LEAF_NODE	328:43	328:43	12	&
FIELD	328:44	328:54	11	sp -> cinfo . c
LEAF_NODE	328:44	328:44	12	sp
LEAF_NODE	328:46	328:46	12	->
LEAF_NODE	328:48	328:48	12	cinfo
LEAF_NODE	328:53	328:53	12	.
LEAF_NODE	328:54	328:54	12	c
LEAF_NODE	328:55	328:55	9	,
ARGUMENT	328:57	328:57	9	suppress
FIELD	328:57	328:57	10	suppress
LEAF_NODE	328:57	328:57	11	suppress
LEAF_NODE	328:65	328:65	9	)
LEAF_NODE	328:66	328:66	7	)
LEAF_NODE	328:67	328:67	4	;
LEAF_NODE	329:0	329:0	2	}
FUNCTION_DEF	331:0	336:0	1	
RETURN_TYPE	331:0	331:7	2	static int
LEAF_NODE	331:0	331:0	3	static
TYPE_NAME	331:7	331:7	3	int
LEAF_NODE	331:7	331:7	4	int
FUNCTION_NAME	332:0	332:0	2	TIFFjpeg_start_compress
LEAF_NODE	332:0	332:0	3	TIFFjpeg_start_compress
PARAMETER_LIST	332:23	332:63	2	( JPEGState * sp , boolean write_all_tables )
LEAF_NODE	332:23	332:23	3	(
PARAMETER_DECL	332:24	332:35	3	JPEGState * sp
TYPE	332:24	332:33	4	JPEGState *
TYPE_NAME	332:24	332:24	5	JPEGState
LEAF_NODE	332:24	332:24	6	JPEGState
POINTER	332:33	332:33	5	*
LEAF_NODE	332:33	332:33	6	*
NAME	332:35	332:35	4	sp
LEAF_NODE	332:35	332:35	5	sp
LEAF_NODE	332:37	332:37	3	,
PARAMETER_DECL	332:39	332:47	3	boolean write_all_tables
TYPE	332:39	332:39	4	boolean
TYPE_NAME	332:39	332:39	5	boolean
LEAF_NODE	332:39	332:39	6	boolean
NAME	332:47	332:47	4	write_all_tables
LEAF_NODE	332:47	332:47	5	write_all_tables
LEAF_NODE	332:63	332:63	3	)
LEAF_NODE	333:0	333:0	2	{
STATEMENTS	334:1	334:1	2	
JUMP_STATEMENT	334:1	335:57	3	return CALLVJPEG ( sp , jpeg_start_compress ( & sp -> cinfo . c , write_all_tables ) ) ;
KEYWORD	334:1	334:1	4	return
LEAF_NODE	334:1	334:1	5	return
DESTINATION	334:8	334:8	4	CALLVJPEG ( sp , jpeg_start_compress ( & sp -> cinfo . c , write_all_tables ) )
EXPR	334:8	334:8	5	CALLVJPEG ( sp , jpeg_start_compress ( & sp -> cinfo . c , write_all_tables ) )
FUNCTION_CALL	334:8	335:56	6	CALLVJPEG ( sp , jpeg_start_compress ( & sp -> cinfo . c , write_all_tables ) )
CALLEE	334:8	334:8	7	CALLVJPEG
LEAF_NODE	334:8	334:8	8	CALLVJPEG
LEAF_NODE	334:17	334:17	7	(
ARGUMENT	334:18	334:18	7	sp
FIELD	334:18	334:18	8	sp
LEAF_NODE	334:18	334:18	9	sp
LEAF_NODE	334:20	334:20	7	,
ARGUMENT	335:5	335:5	7	jpeg_start_compress ( & sp -> cinfo . c , write_all_tables )
FUNCTION_CALL	335:5	335:55	8	jpeg_start_compress ( & sp -> cinfo . c , write_all_tables )
CALLEE	335:5	335:5	9	jpeg_start_compress
LEAF_NODE	335:5	335:5	10	jpeg_start_compress
LEAF_NODE	335:24	335:24	9	(
ARGUMENT	335:25	335:25	9	& sp -> cinfo . c
UNARY_EXPR	335:25	335:26	10	& sp -> cinfo . c
UNARY_OPERATOR	335:25	335:25	11	&
LEAF_NODE	335:25	335:25	12	&
FIELD	335:26	335:36	11	sp -> cinfo . c
LEAF_NODE	335:26	335:26	12	sp
LEAF_NODE	335:28	335:28	12	->
LEAF_NODE	335:30	335:30	12	cinfo
LEAF_NODE	335:35	335:35	12	.
LEAF_NODE	335:36	335:36	12	c
LEAF_NODE	335:37	335:37	9	,
ARGUMENT	335:39	335:39	9	write_all_tables
FIELD	335:39	335:39	10	write_all_tables
LEAF_NODE	335:39	335:39	11	write_all_tables
LEAF_NODE	335:55	335:55	9	)
LEAF_NODE	335:56	335:56	7	)
LEAF_NODE	335:57	335:57	4	;
LEAF_NODE	336:0	336:0	2	}
FUNCTION_DEF	338:0	343:0	1	
RETURN_TYPE	338:0	338:7	2	static int
LEAF_NODE	338:0	338:0	3	static
TYPE_NAME	338:7	338:7	3	int
LEAF_NODE	338:7	338:7	4	int
FUNCTION_NAME	339:0	339:0	2	TIFFjpeg_write_scanlines
LEAF_NODE	339:0	339:0	3	TIFFjpeg_write_scanlines
PARAMETER_LIST	339:24	339:75	2	( JPEGState * sp , JSAMPARRAY scanlines , int num_lines )
LEAF_NODE	339:24	339:24	3	(
PARAMETER_DECL	339:25	339:36	3	JPEGState * sp
TYPE	339:25	339:34	4	JPEGState *
TYPE_NAME	339:25	339:25	5	JPEGState
LEAF_NODE	339:25	339:25	6	JPEGState
POINTER	339:34	339:34	5	*
LEAF_NODE	339:34	339:34	6	*
NAME	339:36	339:36	4	sp
LEAF_NODE	339:36	339:36	5	sp
LEAF_NODE	339:38	339:38	3	,
PARAMETER_DECL	339:40	339:51	3	JSAMPARRAY scanlines
TYPE	339:40	339:40	4	JSAMPARRAY
TYPE_NAME	339:40	339:40	5	JSAMPARRAY
LEAF_NODE	339:40	339:40	6	JSAMPARRAY
NAME	339:51	339:51	4	scanlines
LEAF_NODE	339:51	339:51	5	scanlines
LEAF_NODE	339:60	339:60	3	,
PARAMETER_DECL	339:62	339:66	3	int num_lines
TYPE	339:62	339:62	4	int
TYPE_NAME	339:62	339:62	5	int
LEAF_NODE	339:62	339:62	6	int
NAME	339:66	339:66	4	num_lines
LEAF_NODE	339:66	339:66	5	num_lines
LEAF_NODE	339:75	339:75	3	)
LEAF_NODE	340:0	340:0	2	{
STATEMENTS	341:1	341:1	2	
JUMP_STATEMENT	341:1	342:40	3	return CALLJPEG ( sp , - 1 , ( int ) jpeg_write_scanlines ( & sp -> cinfo . c , scanlines , ( JDIMENSION ) num_lines ) ) ;
KEYWORD	341:1	341:1	4	return
LEAF_NODE	341:1	341:1	5	return
DESTINATION	341:8	341:8	4	CALLJPEG ( sp , - 1 , ( int ) jpeg_write_scanlines ( & sp -> cinfo . c , scanlines , ( JDIMENSION ) num_lines ) )
EXPR	341:8	341:8	5	CALLJPEG ( sp , - 1 , ( int ) jpeg_write_scanlines ( & sp -> cinfo . c , scanlines , ( JDIMENSION ) num_lines ) )
FUNCTION_CALL	341:8	342:39	6	CALLJPEG ( sp , - 1 , ( int ) jpeg_write_scanlines ( & sp -> cinfo . c , scanlines , ( JDIMENSION ) num_lines ) )
CALLEE	341:8	341:8	7	CALLJPEG
LEAF_NODE	341:8	341:8	8	CALLJPEG
LEAF_NODE	341:16	341:16	7	(
ARGUMENT	341:17	341:17	7	sp
FIELD	341:17	341:17	8	sp
LEAF_NODE	341:17	341:17	9	sp
LEAF_NODE	341:19	341:19	7	,
ARGUMENT	341:21	341:21	7	- 1
UNARY_EXPR	341:21	341:22	8	- 1
UNARY_OPERATOR	341:21	341:21	9	-
LEAF_NODE	341:21	341:21	10	-
FIELD	341:22	341:22	9	1
LEAF_NODE	341:22	341:22	10	1
LEAF_NODE	341:23	341:23	7	,
ARGUMENT	341:25	341:31	7	( int ) jpeg_write_scanlines ( & sp -> cinfo . c , scanlines , ( JDIMENSION ) num_lines )
LEAF_NODE	341:25	341:25	8	(
TYPE_NAME	341:26	341:26	8	int
LEAF_NODE	341:26	341:26	9	int
LEAF_NODE	341:29	341:29	8	)
FUNCTION_CALL	341:31	342:38	8	jpeg_write_scanlines ( & sp -> cinfo . c , scanlines , ( JDIMENSION ) num_lines )
CALLEE	341:31	341:31	9	jpeg_write_scanlines
LEAF_NODE	341:31	341:31	10	jpeg_write_scanlines
LEAF_NODE	341:51	341:51	9	(
ARGUMENT	341:52	341:52	9	& sp -> cinfo . c
UNARY_EXPR	341:52	341:53	10	& sp -> cinfo . c
UNARY_OPERATOR	341:52	341:52	11	&
LEAF_NODE	341:52	341:52	12	&
FIELD	341:53	341:63	11	sp -> cinfo . c
LEAF_NODE	341:53	341:53	12	sp
LEAF_NODE	341:55	341:55	12	->
LEAF_NODE	341:57	341:57	12	cinfo
LEAF_NODE	341:62	341:62	12	.
LEAF_NODE	341:63	341:63	12	c
LEAF_NODE	341:64	341:64	9	,
ARGUMENT	342:5	342:5	9	scanlines
FIELD	342:5	342:5	10	scanlines
LEAF_NODE	342:5	342:5	11	scanlines
LEAF_NODE	342:14	342:14	9	,
ARGUMENT	342:16	342:29	9	( JDIMENSION ) num_lines
LEAF_NODE	342:16	342:16	10	(
TYPE_NAME	342:17	342:17	10	JDIMENSION
LEAF_NODE	342:17	342:17	11	JDIMENSION
LEAF_NODE	342:27	342:27	10	)
FIELD	342:29	342:29	10	num_lines
LEAF_NODE	342:29	342:29	11	num_lines
LEAF_NODE	342:38	342:38	9	)
LEAF_NODE	342:39	342:39	7	)
LEAF_NODE	342:40	342:40	4	;
LEAF_NODE	343:0	343:0	2	}
FUNCTION_DEF	345:0	350:0	1	
RETURN_TYPE	345:0	345:7	2	static int
LEAF_NODE	345:0	345:0	3	static
TYPE_NAME	345:7	345:7	3	int
LEAF_NODE	345:7	345:7	4	int
FUNCTION_NAME	346:0	346:0	2	TIFFjpeg_write_raw_data
LEAF_NODE	346:0	346:0	3	TIFFjpeg_write_raw_data
PARAMETER_LIST	346:23	346:69	2	( JPEGState * sp , JSAMPIMAGE data , int num_lines )
LEAF_NODE	346:23	346:23	3	(
PARAMETER_DECL	346:24	346:35	3	JPEGState * sp
TYPE	346:24	346:33	4	JPEGState *
TYPE_NAME	346:24	346:24	5	JPEGState
LEAF_NODE	346:24	346:24	6	JPEGState
POINTER	346:33	346:33	5	*
LEAF_NODE	346:33	346:33	6	*
NAME	346:35	346:35	4	sp
LEAF_NODE	346:35	346:35	5	sp
LEAF_NODE	346:37	346:37	3	,
PARAMETER_DECL	346:39	346:50	3	JSAMPIMAGE data
TYPE	346:39	346:39	4	JSAMPIMAGE
TYPE_NAME	346:39	346:39	5	JSAMPIMAGE
LEAF_NODE	346:39	346:39	6	JSAMPIMAGE
NAME	346:50	346:50	4	data
LEAF_NODE	346:50	346:50	5	data
LEAF_NODE	346:54	346:54	3	,
PARAMETER_DECL	346:56	346:60	3	int num_lines
TYPE	346:56	346:56	4	int
TYPE_NAME	346:56	346:56	5	int
LEAF_NODE	346:56	346:56	6	int
NAME	346:60	346:60	4	num_lines
LEAF_NODE	346:60	346:60	5	num_lines
LEAF_NODE	346:69	346:69	3	)
LEAF_NODE	347:0	347:0	2	{
STATEMENTS	348:1	348:1	2	
JUMP_STATEMENT	348:1	349:35	3	return CALLJPEG ( sp , - 1 , ( int ) jpeg_write_raw_data ( & sp -> cinfo . c , data , ( JDIMENSION ) num_lines ) ) ;
KEYWORD	348:1	348:1	4	return
LEAF_NODE	348:1	348:1	5	return
DESTINATION	348:8	348:8	4	CALLJPEG ( sp , - 1 , ( int ) jpeg_write_raw_data ( & sp -> cinfo . c , data , ( JDIMENSION ) num_lines ) )
EXPR	348:8	348:8	5	CALLJPEG ( sp , - 1 , ( int ) jpeg_write_raw_data ( & sp -> cinfo . c , data , ( JDIMENSION ) num_lines ) )
FUNCTION_CALL	348:8	349:34	6	CALLJPEG ( sp , - 1 , ( int ) jpeg_write_raw_data ( & sp -> cinfo . c , data , ( JDIMENSION ) num_lines ) )
CALLEE	348:8	348:8	7	CALLJPEG
LEAF_NODE	348:8	348:8	8	CALLJPEG
LEAF_NODE	348:16	348:16	7	(
ARGUMENT	348:17	348:17	7	sp
FIELD	348:17	348:17	8	sp
LEAF_NODE	348:17	348:17	9	sp
LEAF_NODE	348:19	348:19	7	,
ARGUMENT	348:21	348:21	7	- 1
UNARY_EXPR	348:21	348:22	8	- 1
UNARY_OPERATOR	348:21	348:21	9	-
LEAF_NODE	348:21	348:21	10	-
FIELD	348:22	348:22	9	1
LEAF_NODE	348:22	348:22	10	1
LEAF_NODE	348:23	348:23	7	,
ARGUMENT	348:25	348:31	7	( int ) jpeg_write_raw_data ( & sp -> cinfo . c , data , ( JDIMENSION ) num_lines )
LEAF_NODE	348:25	348:25	8	(
TYPE_NAME	348:26	348:26	8	int
LEAF_NODE	348:26	348:26	9	int
LEAF_NODE	348:29	348:29	8	)
FUNCTION_CALL	348:31	349:33	8	jpeg_write_raw_data ( & sp -> cinfo . c , data , ( JDIMENSION ) num_lines )
CALLEE	348:31	348:31	9	jpeg_write_raw_data
LEAF_NODE	348:31	348:31	10	jpeg_write_raw_data
LEAF_NODE	348:50	348:50	9	(
ARGUMENT	348:51	348:51	9	& sp -> cinfo . c
UNARY_EXPR	348:51	348:52	10	& sp -> cinfo . c
UNARY_OPERATOR	348:51	348:51	11	&
LEAF_NODE	348:51	348:51	12	&
FIELD	348:52	348:62	11	sp -> cinfo . c
LEAF_NODE	348:52	348:52	12	sp
LEAF_NODE	348:54	348:54	12	->
LEAF_NODE	348:56	348:56	12	cinfo
LEAF_NODE	348:61	348:61	12	.
LEAF_NODE	348:62	348:62	12	c
LEAF_NODE	348:63	348:63	9	,
ARGUMENT	349:5	349:5	9	data
FIELD	349:5	349:5	10	data
LEAF_NODE	349:5	349:5	11	data
LEAF_NODE	349:9	349:9	9	,
ARGUMENT	349:11	349:24	9	( JDIMENSION ) num_lines
LEAF_NODE	349:11	349:11	10	(
TYPE_NAME	349:12	349:12	10	JDIMENSION
LEAF_NODE	349:12	349:12	11	JDIMENSION
LEAF_NODE	349:22	349:22	10	)
FIELD	349:24	349:24	10	num_lines
LEAF_NODE	349:24	349:24	11	num_lines
LEAF_NODE	349:33	349:33	9	)
LEAF_NODE	349:34	349:34	7	)
LEAF_NODE	349:35	349:35	4	;
LEAF_NODE	350:0	350:0	2	}
FUNCTION_DEF	352:0	356:0	1	
RETURN_TYPE	352:0	352:7	2	static int
LEAF_NODE	352:0	352:0	3	static
TYPE_NAME	352:7	352:7	3	int
LEAF_NODE	352:7	352:7	4	int
FUNCTION_NAME	353:0	353:0	2	TIFFjpeg_finish_compress
LEAF_NODE	353:0	353:0	3	TIFFjpeg_finish_compress
PARAMETER_LIST	353:24	353:38	2	( JPEGState * sp )
LEAF_NODE	353:24	353:24	3	(
PARAMETER_DECL	353:25	353:36	3	JPEGState * sp
TYPE	353:25	353:34	4	JPEGState *
TYPE_NAME	353:25	353:25	5	JPEGState
LEAF_NODE	353:25	353:25	6	JPEGState
POINTER	353:34	353:34	5	*
LEAF_NODE	353:34	353:34	6	*
NAME	353:36	353:36	4	sp
LEAF_NODE	353:36	353:36	5	sp
LEAF_NODE	353:38	353:38	3	)
LEAF_NODE	354:0	354:0	2	{
STATEMENTS	355:1	355:1	2	
JUMP_STATEMENT	355:1	355:57	3	return CALLVJPEG ( sp , jpeg_finish_compress ( & sp -> cinfo . c ) ) ;
KEYWORD	355:1	355:1	4	return
LEAF_NODE	355:1	355:1	5	return
DESTINATION	355:8	355:8	4	CALLVJPEG ( sp , jpeg_finish_compress ( & sp -> cinfo . c ) )
EXPR	355:8	355:8	5	CALLVJPEG ( sp , jpeg_finish_compress ( & sp -> cinfo . c ) )
FUNCTION_CALL	355:8	355:56	6	CALLVJPEG ( sp , jpeg_finish_compress ( & sp -> cinfo . c ) )
CALLEE	355:8	355:8	7	CALLVJPEG
LEAF_NODE	355:8	355:8	8	CALLVJPEG
LEAF_NODE	355:17	355:17	7	(
ARGUMENT	355:18	355:18	7	sp
FIELD	355:18	355:18	8	sp
LEAF_NODE	355:18	355:18	9	sp
LEAF_NODE	355:20	355:20	7	,
ARGUMENT	355:22	355:22	7	jpeg_finish_compress ( & sp -> cinfo . c )
FUNCTION_CALL	355:22	355:55	8	jpeg_finish_compress ( & sp -> cinfo . c )
CALLEE	355:22	355:22	9	jpeg_finish_compress
LEAF_NODE	355:22	355:22	10	jpeg_finish_compress
LEAF_NODE	355:42	355:42	9	(
ARGUMENT	355:43	355:43	9	& sp -> cinfo . c
UNARY_EXPR	355:43	355:44	10	& sp -> cinfo . c
UNARY_OPERATOR	355:43	355:43	11	&
LEAF_NODE	355:43	355:43	12	&
FIELD	355:44	355:54	11	sp -> cinfo . c
LEAF_NODE	355:44	355:44	12	sp
LEAF_NODE	355:46	355:46	12	->
LEAF_NODE	355:48	355:48	12	cinfo
LEAF_NODE	355:53	355:53	12	.
LEAF_NODE	355:54	355:54	12	c
LEAF_NODE	355:55	355:55	9	)
LEAF_NODE	355:56	355:56	7	)
LEAF_NODE	355:57	355:57	4	;
LEAF_NODE	356:0	356:0	2	}
FUNCTION_DEF	358:0	362:0	1	
RETURN_TYPE	358:0	358:7	2	static int
LEAF_NODE	358:0	358:0	3	static
TYPE_NAME	358:7	358:7	3	int
LEAF_NODE	358:7	358:7	4	int
FUNCTION_NAME	359:0	359:0	2	TIFFjpeg_write_tables
LEAF_NODE	359:0	359:0	3	TIFFjpeg_write_tables
PARAMETER_LIST	359:21	359:35	2	( JPEGState * sp )
LEAF_NODE	359:21	359:21	3	(
PARAMETER_DECL	359:22	359:33	3	JPEGState * sp
TYPE	359:22	359:31	4	JPEGState *
TYPE_NAME	359:22	359:22	5	JPEGState
LEAF_NODE	359:22	359:22	6	JPEGState
POINTER	359:31	359:31	5	*
LEAF_NODE	359:31	359:31	6	*
NAME	359:33	359:33	4	sp
LEAF_NODE	359:33	359:33	5	sp
LEAF_NODE	359:35	359:35	3	)
LEAF_NODE	360:0	360:0	2	{
STATEMENTS	361:1	361:1	2	
JUMP_STATEMENT	361:1	361:54	3	return CALLVJPEG ( sp , jpeg_write_tables ( & sp -> cinfo . c ) ) ;
KEYWORD	361:1	361:1	4	return
LEAF_NODE	361:1	361:1	5	return
DESTINATION	361:8	361:8	4	CALLVJPEG ( sp , jpeg_write_tables ( & sp -> cinfo . c ) )
EXPR	361:8	361:8	5	CALLVJPEG ( sp , jpeg_write_tables ( & sp -> cinfo . c ) )
FUNCTION_CALL	361:8	361:53	6	CALLVJPEG ( sp , jpeg_write_tables ( & sp -> cinfo . c ) )
CALLEE	361:8	361:8	7	CALLVJPEG
LEAF_NODE	361:8	361:8	8	CALLVJPEG
LEAF_NODE	361:17	361:17	7	(
ARGUMENT	361:18	361:18	7	sp
FIELD	361:18	361:18	8	sp
LEAF_NODE	361:18	361:18	9	sp
LEAF_NODE	361:20	361:20	7	,
ARGUMENT	361:22	361:22	7	jpeg_write_tables ( & sp -> cinfo . c )
FUNCTION_CALL	361:22	361:52	8	jpeg_write_tables ( & sp -> cinfo . c )
CALLEE	361:22	361:22	9	jpeg_write_tables
LEAF_NODE	361:22	361:22	10	jpeg_write_tables
LEAF_NODE	361:39	361:39	9	(
ARGUMENT	361:40	361:40	9	& sp -> cinfo . c
UNARY_EXPR	361:40	361:41	10	& sp -> cinfo . c
UNARY_OPERATOR	361:40	361:40	11	&
LEAF_NODE	361:40	361:40	12	&
FIELD	361:41	361:51	11	sp -> cinfo . c
LEAF_NODE	361:41	361:41	12	sp
LEAF_NODE	361:43	361:43	12	->
LEAF_NODE	361:45	361:45	12	cinfo
LEAF_NODE	361:50	361:50	12	.
LEAF_NODE	361:51	361:51	12	c
LEAF_NODE	361:52	361:52	9	)
LEAF_NODE	361:53	361:53	7	)
LEAF_NODE	361:54	361:54	4	;
LEAF_NODE	362:0	362:0	2	}
FUNCTION_DEF	364:0	368:0	1	
RETURN_TYPE	364:0	364:7	2	static int
LEAF_NODE	364:0	364:0	3	static
TYPE_NAME	364:7	364:7	3	int
LEAF_NODE	364:7	364:7	4	int
FUNCTION_NAME	365:0	365:0	2	TIFFjpeg_read_header
LEAF_NODE	365:0	365:0	3	TIFFjpeg_read_header
PARAMETER_LIST	365:20	365:57	2	( JPEGState * sp , boolean require_image )
LEAF_NODE	365:20	365:20	3	(
PARAMETER_DECL	365:21	365:32	3	JPEGState * sp
TYPE	365:21	365:30	4	JPEGState *
TYPE_NAME	365:21	365:21	5	JPEGState
LEAF_NODE	365:21	365:21	6	JPEGState
POINTER	365:30	365:30	5	*
LEAF_NODE	365:30	365:30	6	*
NAME	365:32	365:32	4	sp
LEAF_NODE	365:32	365:32	5	sp
LEAF_NODE	365:34	365:34	3	,
PARAMETER_DECL	365:36	365:44	3	boolean require_image
TYPE	365:36	365:36	4	boolean
TYPE_NAME	365:36	365:36	5	boolean
LEAF_NODE	365:36	365:36	6	boolean
NAME	365:44	365:44	4	require_image
LEAF_NODE	365:44	365:44	5	require_image
LEAF_NODE	365:57	365:57	3	)
LEAF_NODE	366:0	366:0	2	{
STATEMENTS	367:1	367:1	2	
JUMP_STATEMENT	367:1	367:71	3	return CALLJPEG ( sp , - 1 , jpeg_read_header ( & sp -> cinfo . d , require_image ) ) ;
KEYWORD	367:1	367:1	4	return
LEAF_NODE	367:1	367:1	5	return
DESTINATION	367:8	367:8	4	CALLJPEG ( sp , - 1 , jpeg_read_header ( & sp -> cinfo . d , require_image ) )
EXPR	367:8	367:8	5	CALLJPEG ( sp , - 1 , jpeg_read_header ( & sp -> cinfo . d , require_image ) )
FUNCTION_CALL	367:8	367:70	6	CALLJPEG ( sp , - 1 , jpeg_read_header ( & sp -> cinfo . d , require_image ) )
CALLEE	367:8	367:8	7	CALLJPEG
LEAF_NODE	367:8	367:8	8	CALLJPEG
LEAF_NODE	367:16	367:16	7	(
ARGUMENT	367:17	367:17	7	sp
FIELD	367:17	367:17	8	sp
LEAF_NODE	367:17	367:17	9	sp
LEAF_NODE	367:19	367:19	7	,
ARGUMENT	367:21	367:21	7	- 1
UNARY_EXPR	367:21	367:22	8	- 1
UNARY_OPERATOR	367:21	367:21	9	-
LEAF_NODE	367:21	367:21	10	-
FIELD	367:22	367:22	9	1
LEAF_NODE	367:22	367:22	10	1
LEAF_NODE	367:23	367:23	7	,
ARGUMENT	367:25	367:25	7	jpeg_read_header ( & sp -> cinfo . d , require_image )
FUNCTION_CALL	367:25	367:69	8	jpeg_read_header ( & sp -> cinfo . d , require_image )
CALLEE	367:25	367:25	9	jpeg_read_header
LEAF_NODE	367:25	367:25	10	jpeg_read_header
LEAF_NODE	367:41	367:41	9	(
ARGUMENT	367:42	367:42	9	& sp -> cinfo . d
UNARY_EXPR	367:42	367:43	10	& sp -> cinfo . d
UNARY_OPERATOR	367:42	367:42	11	&
LEAF_NODE	367:42	367:42	12	&
FIELD	367:43	367:53	11	sp -> cinfo . d
LEAF_NODE	367:43	367:43	12	sp
LEAF_NODE	367:45	367:45	12	->
LEAF_NODE	367:47	367:47	12	cinfo
LEAF_NODE	367:52	367:52	12	.
LEAF_NODE	367:53	367:53	12	d
LEAF_NODE	367:54	367:54	9	,
ARGUMENT	367:56	367:56	9	require_image
FIELD	367:56	367:56	10	require_image
LEAF_NODE	367:56	367:56	11	require_image
LEAF_NODE	367:69	367:69	9	)
LEAF_NODE	367:70	367:70	7	)
LEAF_NODE	367:71	367:71	4	;
LEAF_NODE	368:0	368:0	2	}
FUNCTION_DEF	370:0	374:0	1	
RETURN_TYPE	370:0	370:7	2	static int
LEAF_NODE	370:0	370:0	3	static
TYPE_NAME	370:7	370:7	3	int
LEAF_NODE	370:7	370:7	4	int
FUNCTION_NAME	371:0	371:0	2	TIFFjpeg_has_multiple_scans
LEAF_NODE	371:0	371:0	3	TIFFjpeg_has_multiple_scans
PARAMETER_LIST	371:27	371:41	2	( JPEGState * sp )
LEAF_NODE	371:27	371:27	3	(
PARAMETER_DECL	371:28	371:39	3	JPEGState * sp
TYPE	371:28	371:37	4	JPEGState *
TYPE_NAME	371:28	371:28	5	JPEGState
LEAF_NODE	371:28	371:28	6	JPEGState
POINTER	371:37	371:37	5	*
LEAF_NODE	371:37	371:37	6	*
NAME	371:39	371:39	4	sp
LEAF_NODE	371:39	371:39	5	sp
LEAF_NODE	371:41	371:41	3	)
LEAF_NODE	372:0	372:0	2	{
STATEMENTS	373:1	373:1	2	
JUMP_STATEMENT	373:1	373:62	3	return CALLJPEG ( sp , 0 , jpeg_has_multiple_scans ( & sp -> cinfo . d ) ) ;
KEYWORD	373:1	373:1	4	return
LEAF_NODE	373:1	373:1	5	return
DESTINATION	373:8	373:8	4	CALLJPEG ( sp , 0 , jpeg_has_multiple_scans ( & sp -> cinfo . d ) )
EXPR	373:8	373:8	5	CALLJPEG ( sp , 0 , jpeg_has_multiple_scans ( & sp -> cinfo . d ) )
FUNCTION_CALL	373:8	373:61	6	CALLJPEG ( sp , 0 , jpeg_has_multiple_scans ( & sp -> cinfo . d ) )
CALLEE	373:8	373:8	7	CALLJPEG
LEAF_NODE	373:8	373:8	8	CALLJPEG
LEAF_NODE	373:16	373:16	7	(
ARGUMENT	373:17	373:17	7	sp
FIELD	373:17	373:17	8	sp
LEAF_NODE	373:17	373:17	9	sp
LEAF_NODE	373:19	373:19	7	,
ARGUMENT	373:21	373:21	7	0
FIELD	373:21	373:21	8	0
LEAF_NODE	373:21	373:21	9	0
LEAF_NODE	373:22	373:22	7	,
ARGUMENT	373:24	373:24	7	jpeg_has_multiple_scans ( & sp -> cinfo . d )
FUNCTION_CALL	373:24	373:60	8	jpeg_has_multiple_scans ( & sp -> cinfo . d )
CALLEE	373:24	373:24	9	jpeg_has_multiple_scans
LEAF_NODE	373:24	373:24	10	jpeg_has_multiple_scans
LEAF_NODE	373:47	373:47	9	(
ARGUMENT	373:48	373:48	9	& sp -> cinfo . d
UNARY_EXPR	373:48	373:49	10	& sp -> cinfo . d
UNARY_OPERATOR	373:48	373:48	11	&
LEAF_NODE	373:48	373:48	12	&
FIELD	373:49	373:59	11	sp -> cinfo . d
LEAF_NODE	373:49	373:49	12	sp
LEAF_NODE	373:51	373:51	12	->
LEAF_NODE	373:53	373:53	12	cinfo
LEAF_NODE	373:58	373:58	12	.
LEAF_NODE	373:59	373:59	12	d
LEAF_NODE	373:60	373:60	9	)
LEAF_NODE	373:61	373:61	7	)
LEAF_NODE	373:62	373:62	4	;
LEAF_NODE	374:0	374:0	2	}
FUNCTION_DEF	376:0	389:0	1	
RETURN_TYPE	376:0	376:7	2	static int
LEAF_NODE	376:0	376:0	3	static
TYPE_NAME	376:7	376:7	3	int
LEAF_NODE	376:7	376:7	4	int
FUNCTION_NAME	377:0	377:0	2	TIFFjpeg_start_decompress
LEAF_NODE	377:0	377:0	3	TIFFjpeg_start_decompress
PARAMETER_LIST	377:25	377:39	2	( JPEGState * sp )
LEAF_NODE	377:25	377:25	3	(
PARAMETER_DECL	377:26	377:37	3	JPEGState * sp
TYPE	377:26	377:35	4	JPEGState *
TYPE_NAME	377:26	377:26	5	JPEGState
LEAF_NODE	377:26	377:26	6	JPEGState
POINTER	377:35	377:35	5	*
LEAF_NODE	377:35	377:35	6	*
NAME	377:37	377:37	4	sp
LEAF_NODE	377:37	377:37	5	sp
LEAF_NODE	377:39	377:39	3	)
LEAF_NODE	378:0	378:0	2	{
STATEMENTS	379:8	388:1	2	
SIMPLE_DECL	379:8	379:46	3	const char * sz_max_allowed_scan_number ;
VAR_DECL	379:8	379:20	4	const char * sz_max_allowed_scan_number
TYPE	379:8	379:18	5	const char *
TYPE_NAME	379:8	379:14	6	const char
LEAF_NODE	379:8	379:8	7	const
LEAF_NODE	379:14	379:14	7	char
POINTER	379:18	379:18	6	*
LEAF_NODE	379:18	379:18	7	*
NAME	379:20	379:20	5	sz_max_allowed_scan_number
LEAF_NODE	379:20	379:20	6	sz_max_allowed_scan_number
LEAF_NODE	379:46	379:46	4	;
EXPR_STATEMENT	381:8	381:44	3	sp -> cinfo . d . progress = & sp -> progress ;
EXPR	381:8	381:8	4	sp -> cinfo . d . progress = & sp -> progress
ASSIGN	381:8	381:31	5	sp -> cinfo . d . progress = & sp -> progress
LVAL	381:8	381:8	6	sp -> cinfo . d . progress
FIELD	381:8	381:20	7	sp -> cinfo . d . progress
LEAF_NODE	381:8	381:8	8	sp
LEAF_NODE	381:10	381:10	8	->
LEAF_NODE	381:12	381:12	8	cinfo
LEAF_NODE	381:17	381:17	8	.
LEAF_NODE	381:18	381:18	8	d
LEAF_NODE	381:19	381:19	8	.
LEAF_NODE	381:20	381:20	8	progress
ASSIGN_OP	381:29	381:29	6	=
LEAF_NODE	381:29	381:29	7	=
RVAL	381:31	381:31	6	& sp -> progress
UNARY_EXPR	381:31	381:32	7	& sp -> progress
UNARY_OPERATOR	381:31	381:31	8	&
LEAF_NODE	381:31	381:31	9	&
FIELD	381:32	381:36	8	sp -> progress
LEAF_NODE	381:32	381:32	9	sp
LEAF_NODE	381:34	381:34	9	->
LEAF_NODE	381:36	381:36	9	progress
LEAF_NODE	381:44	381:44	4	;
EXPR_STATEMENT	382:8	382:65	3	sp -> progress . progress_monitor = TIFFjpeg_progress_monitor ;
EXPR	382:8	382:8	4	sp -> progress . progress_monitor = TIFFjpeg_progress_monitor
ASSIGN	382:8	382:40	5	sp -> progress . progress_monitor = TIFFjpeg_progress_monitor
LVAL	382:8	382:8	6	sp -> progress . progress_monitor
FIELD	382:8	382:21	7	sp -> progress . progress_monitor
LEAF_NODE	382:8	382:8	8	sp
LEAF_NODE	382:10	382:10	8	->
LEAF_NODE	382:12	382:12	8	progress
LEAF_NODE	382:20	382:20	8	.
LEAF_NODE	382:21	382:21	8	progress_monitor
ASSIGN_OP	382:38	382:38	6	=
LEAF_NODE	382:38	382:38	7	=
RVAL	382:40	382:40	6	TIFFjpeg_progress_monitor
FIELD	382:40	382:40	7	TIFFjpeg_progress_monitor
LEAF_NODE	382:40	382:40	8	TIFFjpeg_progress_monitor
LEAF_NODE	382:65	382:65	4	;
EXPR_STATEMENT	383:8	383:41	3	sp -> max_allowed_scan_number = 100 ;
EXPR	383:8	383:8	4	sp -> max_allowed_scan_number = 100
ASSIGN	383:8	383:38	5	sp -> max_allowed_scan_number = 100
LVAL	383:8	383:8	6	sp -> max_allowed_scan_number
FIELD	383:8	383:12	7	sp -> max_allowed_scan_number
LEAF_NODE	383:8	383:8	8	sp
LEAF_NODE	383:10	383:10	8	->
LEAF_NODE	383:12	383:12	8	max_allowed_scan_number
ASSIGN_OP	383:36	383:36	6	=
LEAF_NODE	383:36	383:36	7	=
RVAL	383:38	383:38	6	100
FIELD	383:38	383:38	7	100
LEAF_NODE	383:38	383:38	8	100
LEAF_NODE	383:41	383:41	4	;
EXPR_STATEMENT	384:8	384:83	3	sz_max_allowed_scan_number = getenv ( "LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER" ) ;
EXPR	384:8	384:8	4	sz_max_allowed_scan_number = getenv ( "LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER" )
ASSIGN	384:8	384:37	5	sz_max_allowed_scan_number = getenv ( "LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER" )
LVAL	384:8	384:8	6	sz_max_allowed_scan_number
FIELD	384:8	384:8	7	sz_max_allowed_scan_number
LEAF_NODE	384:8	384:8	8	sz_max_allowed_scan_number
ASSIGN_OP	384:35	384:35	6	=
LEAF_NODE	384:35	384:35	7	=
RVAL	384:37	384:37	6	getenv ( "LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER" )
FUNCTION_CALL	384:37	384:82	7	getenv ( "LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER" )
CALLEE	384:37	384:37	8	getenv
LEAF_NODE	384:37	384:37	9	getenv
LEAF_NODE	384:43	384:43	8	(
ARGUMENT	384:44	384:44	8	"LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER"
FIELD	384:44	384:44	9	"LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER"
LEAF_NODE	384:44	384:44	10	"LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER"
LEAF_NODE	384:82	384:82	8	)
LEAF_NODE	384:83	384:83	4	;
SELECTION	385:8	386:12	3	
KEYWORD	385:8	385:8	4	if
LEAF_NODE	385:8	385:8	5	if
LEAF_NODE	385:10	385:10	4	(
CONDITION	385:12	385:12	4	sz_max_allowed_scan_number
EXPR	385:12	385:12	5	sz_max_allowed_scan_number
FIELD	385:12	385:12	6	sz_max_allowed_scan_number
LEAF_NODE	385:12	385:12	7	sz_max_allowed_scan_number
LEAF_NODE	385:39	385:39	4	)
STATEMENTS	386:12	386:12	4	
EXPR_STATEMENT	386:12	386:74	5	sp -> max_allowed_scan_number = atoi ( sz_max_allowed_scan_number ) ;
EXPR	386:12	386:12	6	sp -> max_allowed_scan_number = atoi ( sz_max_allowed_scan_number )
ASSIGN	386:12	386:42	7	sp -> max_allowed_scan_number = atoi ( sz_max_allowed_scan_number )
LVAL	386:12	386:12	8	sp -> max_allowed_scan_number
FIELD	386:12	386:16	9	sp -> max_allowed_scan_number
LEAF_NODE	386:12	386:12	10	sp
LEAF_NODE	386:14	386:14	10	->
LEAF_NODE	386:16	386:16	10	max_allowed_scan_number
ASSIGN_OP	386:40	386:40	8	=
LEAF_NODE	386:40	386:40	9	=
RVAL	386:42	386:42	8	atoi ( sz_max_allowed_scan_number )
FUNCTION_CALL	386:42	386:73	9	atoi ( sz_max_allowed_scan_number )
CALLEE	386:42	386:42	10	atoi
LEAF_NODE	386:42	386:42	11	atoi
LEAF_NODE	386:46	386:46	10	(
ARGUMENT	386:47	386:47	10	sz_max_allowed_scan_number
FIELD	386:47	386:47	11	sz_max_allowed_scan_number
LEAF_NODE	386:47	386:47	12	sz_max_allowed_scan_number
LEAF_NODE	386:73	386:73	10	)
LEAF_NODE	386:74	386:74	6	;
JUMP_STATEMENT	388:1	388:58	3	return CALLVJPEG ( sp , jpeg_start_decompress ( & sp -> cinfo . d ) ) ;
KEYWORD	388:1	388:1	4	return
LEAF_NODE	388:1	388:1	5	return
DESTINATION	388:8	388:8	4	CALLVJPEG ( sp , jpeg_start_decompress ( & sp -> cinfo . d ) )
EXPR	388:8	388:8	5	CALLVJPEG ( sp , jpeg_start_decompress ( & sp -> cinfo . d ) )
FUNCTION_CALL	388:8	388:57	6	CALLVJPEG ( sp , jpeg_start_decompress ( & sp -> cinfo . d ) )
CALLEE	388:8	388:8	7	CALLVJPEG
LEAF_NODE	388:8	388:8	8	CALLVJPEG
LEAF_NODE	388:17	388:17	7	(
ARGUMENT	388:18	388:18	7	sp
FIELD	388:18	388:18	8	sp
LEAF_NODE	388:18	388:18	9	sp
LEAF_NODE	388:20	388:20	7	,
ARGUMENT	388:22	388:22	7	jpeg_start_decompress ( & sp -> cinfo . d )
FUNCTION_CALL	388:22	388:56	8	jpeg_start_decompress ( & sp -> cinfo . d )
CALLEE	388:22	388:22	9	jpeg_start_decompress
LEAF_NODE	388:22	388:22	10	jpeg_start_decompress
LEAF_NODE	388:43	388:43	9	(
ARGUMENT	388:44	388:44	9	& sp -> cinfo . d
UNARY_EXPR	388:44	388:45	10	& sp -> cinfo . d
UNARY_OPERATOR	388:44	388:44	11	&
LEAF_NODE	388:44	388:44	12	&
FIELD	388:45	388:55	11	sp -> cinfo . d
LEAF_NODE	388:45	388:45	12	sp
LEAF_NODE	388:47	388:47	12	->
LEAF_NODE	388:49	388:49	12	cinfo
LEAF_NODE	388:54	388:54	12	.
LEAF_NODE	388:55	388:55	12	d
LEAF_NODE	388:56	388:56	9	)
LEAF_NODE	388:57	388:57	7	)
LEAF_NODE	388:58	388:58	4	;
LEAF_NODE	389:0	389:0	2	}
FUNCTION_DEF	391:0	396:0	1	
RETURN_TYPE	391:0	391:7	2	static int
LEAF_NODE	391:0	391:0	3	static
TYPE_NAME	391:7	391:7	3	int
LEAF_NODE	391:7	391:7	4	int
FUNCTION_NAME	392:0	392:0	2	TIFFjpeg_read_scanlines
LEAF_NODE	392:0	392:0	3	TIFFjpeg_read_scanlines
PARAMETER_LIST	392:23	392:74	2	( JPEGState * sp , JSAMPARRAY scanlines , int max_lines )
LEAF_NODE	392:23	392:23	3	(
PARAMETER_DECL	392:24	392:35	3	JPEGState * sp
TYPE	392:24	392:33	4	JPEGState *
TYPE_NAME	392:24	392:24	5	JPEGState
LEAF_NODE	392:24	392:24	6	JPEGState
POINTER	392:33	392:33	5	*
LEAF_NODE	392:33	392:33	6	*
NAME	392:35	392:35	4	sp
LEAF_NODE	392:35	392:35	5	sp
LEAF_NODE	392:37	392:37	3	,
PARAMETER_DECL	392:39	392:50	3	JSAMPARRAY scanlines
TYPE	392:39	392:39	4	JSAMPARRAY
TYPE_NAME	392:39	392:39	5	JSAMPARRAY
LEAF_NODE	392:39	392:39	6	JSAMPARRAY
NAME	392:50	392:50	4	scanlines
LEAF_NODE	392:50	392:50	5	scanlines
LEAF_NODE	392:59	392:59	3	,
PARAMETER_DECL	392:61	392:65	3	int max_lines
TYPE	392:61	392:61	4	int
TYPE_NAME	392:61	392:61	5	int
LEAF_NODE	392:61	392:61	6	int
NAME	392:65	392:65	4	max_lines
LEAF_NODE	392:65	392:65	5	max_lines
LEAF_NODE	392:74	392:74	3	)
LEAF_NODE	393:0	393:0	2	{
STATEMENTS	394:1	394:1	2	
JUMP_STATEMENT	394:1	395:40	3	return CALLJPEG ( sp , - 1 , ( int ) jpeg_read_scanlines ( & sp -> cinfo . d , scanlines , ( JDIMENSION ) max_lines ) ) ;
KEYWORD	394:1	394:1	4	return
LEAF_NODE	394:1	394:1	5	return
DESTINATION	394:8	394:8	4	CALLJPEG ( sp , - 1 , ( int ) jpeg_read_scanlines ( & sp -> cinfo . d , scanlines , ( JDIMENSION ) max_lines ) )
EXPR	394:8	394:8	5	CALLJPEG ( sp , - 1 , ( int ) jpeg_read_scanlines ( & sp -> cinfo . d , scanlines , ( JDIMENSION ) max_lines ) )
FUNCTION_CALL	394:8	395:39	6	CALLJPEG ( sp , - 1 , ( int ) jpeg_read_scanlines ( & sp -> cinfo . d , scanlines , ( JDIMENSION ) max_lines ) )
CALLEE	394:8	394:8	7	CALLJPEG
LEAF_NODE	394:8	394:8	8	CALLJPEG
LEAF_NODE	394:16	394:16	7	(
ARGUMENT	394:17	394:17	7	sp
FIELD	394:17	394:17	8	sp
LEAF_NODE	394:17	394:17	9	sp
LEAF_NODE	394:19	394:19	7	,
ARGUMENT	394:21	394:21	7	- 1
UNARY_EXPR	394:21	394:22	8	- 1
UNARY_OPERATOR	394:21	394:21	9	-
LEAF_NODE	394:21	394:21	10	-
FIELD	394:22	394:22	9	1
LEAF_NODE	394:22	394:22	10	1
LEAF_NODE	394:23	394:23	7	,
ARGUMENT	394:25	394:31	7	( int ) jpeg_read_scanlines ( & sp -> cinfo . d , scanlines , ( JDIMENSION ) max_lines )
LEAF_NODE	394:25	394:25	8	(
TYPE_NAME	394:26	394:26	8	int
LEAF_NODE	394:26	394:26	9	int
LEAF_NODE	394:29	394:29	8	)
FUNCTION_CALL	394:31	395:38	8	jpeg_read_scanlines ( & sp -> cinfo . d , scanlines , ( JDIMENSION ) max_lines )
CALLEE	394:31	394:31	9	jpeg_read_scanlines
LEAF_NODE	394:31	394:31	10	jpeg_read_scanlines
LEAF_NODE	394:50	394:50	9	(
ARGUMENT	394:51	394:51	9	& sp -> cinfo . d
UNARY_EXPR	394:51	394:52	10	& sp -> cinfo . d
UNARY_OPERATOR	394:51	394:51	11	&
LEAF_NODE	394:51	394:51	12	&
FIELD	394:52	394:62	11	sp -> cinfo . d
LEAF_NODE	394:52	394:52	12	sp
LEAF_NODE	394:54	394:54	12	->
LEAF_NODE	394:56	394:56	12	cinfo
LEAF_NODE	394:61	394:61	12	.
LEAF_NODE	394:62	394:62	12	d
LEAF_NODE	394:63	394:63	9	,
ARGUMENT	395:5	395:5	9	scanlines
FIELD	395:5	395:5	10	scanlines
LEAF_NODE	395:5	395:5	11	scanlines
LEAF_NODE	395:14	395:14	9	,
ARGUMENT	395:16	395:29	9	( JDIMENSION ) max_lines
LEAF_NODE	395:16	395:16	10	(
TYPE_NAME	395:17	395:17	10	JDIMENSION
LEAF_NODE	395:17	395:17	11	JDIMENSION
LEAF_NODE	395:27	395:27	10	)
FIELD	395:29	395:29	10	max_lines
LEAF_NODE	395:29	395:29	11	max_lines
LEAF_NODE	395:38	395:38	9	)
LEAF_NODE	395:39	395:39	7	)
LEAF_NODE	395:40	395:40	4	;
LEAF_NODE	396:0	396:0	2	}
FUNCTION_DEF	398:0	403:0	1	
RETURN_TYPE	398:0	398:7	2	static int
LEAF_NODE	398:0	398:0	3	static
TYPE_NAME	398:7	398:7	3	int
LEAF_NODE	398:7	398:7	4	int
FUNCTION_NAME	399:0	399:0	2	TIFFjpeg_read_raw_data
LEAF_NODE	399:0	399:0	3	TIFFjpeg_read_raw_data
PARAMETER_LIST	399:22	399:68	2	( JPEGState * sp , JSAMPIMAGE data , int max_lines )
LEAF_NODE	399:22	399:22	3	(
PARAMETER_DECL	399:23	399:34	3	JPEGState * sp
TYPE	399:23	399:32	4	JPEGState *
TYPE_NAME	399:23	399:23	5	JPEGState
LEAF_NODE	399:23	399:23	6	JPEGState
POINTER	399:32	399:32	5	*
LEAF_NODE	399:32	399:32	6	*
NAME	399:34	399:34	4	sp
LEAF_NODE	399:34	399:34	5	sp
LEAF_NODE	399:36	399:36	3	,
PARAMETER_DECL	399:38	399:49	3	JSAMPIMAGE data
TYPE	399:38	399:38	4	JSAMPIMAGE
TYPE_NAME	399:38	399:38	5	JSAMPIMAGE
LEAF_NODE	399:38	399:38	6	JSAMPIMAGE
NAME	399:49	399:49	4	data
LEAF_NODE	399:49	399:49	5	data
LEAF_NODE	399:53	399:53	3	,
PARAMETER_DECL	399:55	399:59	3	int max_lines
TYPE	399:55	399:55	4	int
TYPE_NAME	399:55	399:55	5	int
LEAF_NODE	399:55	399:55	6	int
NAME	399:59	399:59	4	max_lines
LEAF_NODE	399:59	399:59	5	max_lines
LEAF_NODE	399:68	399:68	3	)
LEAF_NODE	400:0	400:0	2	{
STATEMENTS	401:1	401:1	2	
JUMP_STATEMENT	401:1	402:35	3	return CALLJPEG ( sp , - 1 , ( int ) jpeg_read_raw_data ( & sp -> cinfo . d , data , ( JDIMENSION ) max_lines ) ) ;
KEYWORD	401:1	401:1	4	return
LEAF_NODE	401:1	401:1	5	return
DESTINATION	401:8	401:8	4	CALLJPEG ( sp , - 1 , ( int ) jpeg_read_raw_data ( & sp -> cinfo . d , data , ( JDIMENSION ) max_lines ) )
EXPR	401:8	401:8	5	CALLJPEG ( sp , - 1 , ( int ) jpeg_read_raw_data ( & sp -> cinfo . d , data , ( JDIMENSION ) max_lines ) )
FUNCTION_CALL	401:8	402:34	6	CALLJPEG ( sp , - 1 , ( int ) jpeg_read_raw_data ( & sp -> cinfo . d , data , ( JDIMENSION ) max_lines ) )
CALLEE	401:8	401:8	7	CALLJPEG
LEAF_NODE	401:8	401:8	8	CALLJPEG
LEAF_NODE	401:16	401:16	7	(
ARGUMENT	401:17	401:17	7	sp
FIELD	401:17	401:17	8	sp
LEAF_NODE	401:17	401:17	9	sp
LEAF_NODE	401:19	401:19	7	,
ARGUMENT	401:21	401:21	7	- 1
UNARY_EXPR	401:21	401:22	8	- 1
UNARY_OPERATOR	401:21	401:21	9	-
LEAF_NODE	401:21	401:21	10	-
FIELD	401:22	401:22	9	1
LEAF_NODE	401:22	401:22	10	1
LEAF_NODE	401:23	401:23	7	,
ARGUMENT	401:25	401:31	7	( int ) jpeg_read_raw_data ( & sp -> cinfo . d , data , ( JDIMENSION ) max_lines )
LEAF_NODE	401:25	401:25	8	(
TYPE_NAME	401:26	401:26	8	int
LEAF_NODE	401:26	401:26	9	int
LEAF_NODE	401:29	401:29	8	)
FUNCTION_CALL	401:31	402:33	8	jpeg_read_raw_data ( & sp -> cinfo . d , data , ( JDIMENSION ) max_lines )
CALLEE	401:31	401:31	9	jpeg_read_raw_data
LEAF_NODE	401:31	401:31	10	jpeg_read_raw_data
LEAF_NODE	401:49	401:49	9	(
ARGUMENT	401:50	401:50	9	& sp -> cinfo . d
UNARY_EXPR	401:50	401:51	10	& sp -> cinfo . d
UNARY_OPERATOR	401:50	401:50	11	&
LEAF_NODE	401:50	401:50	12	&
FIELD	401:51	401:61	11	sp -> cinfo . d
LEAF_NODE	401:51	401:51	12	sp
LEAF_NODE	401:53	401:53	12	->
LEAF_NODE	401:55	401:55	12	cinfo
LEAF_NODE	401:60	401:60	12	.
LEAF_NODE	401:61	401:61	12	d
LEAF_NODE	401:62	401:62	9	,
ARGUMENT	402:5	402:5	9	data
FIELD	402:5	402:5	10	data
LEAF_NODE	402:5	402:5	11	data
LEAF_NODE	402:9	402:9	9	,
ARGUMENT	402:11	402:24	9	( JDIMENSION ) max_lines
LEAF_NODE	402:11	402:11	10	(
TYPE_NAME	402:12	402:12	10	JDIMENSION
LEAF_NODE	402:12	402:12	11	JDIMENSION
LEAF_NODE	402:22	402:22	10	)
FIELD	402:24	402:24	10	max_lines
LEAF_NODE	402:24	402:24	11	max_lines
LEAF_NODE	402:33	402:33	9	)
LEAF_NODE	402:34	402:34	7	)
LEAF_NODE	402:35	402:35	4	;
LEAF_NODE	403:0	403:0	2	}
FUNCTION_DEF	405:0	409:0	1	
RETURN_TYPE	405:0	405:7	2	static int
LEAF_NODE	405:0	405:0	3	static
TYPE_NAME	405:7	405:7	3	int
LEAF_NODE	405:7	405:7	4	int
FUNCTION_NAME	406:0	406:0	2	TIFFjpeg_finish_decompress
LEAF_NODE	406:0	406:0	3	TIFFjpeg_finish_decompress
PARAMETER_LIST	406:26	406:40	2	( JPEGState * sp )
LEAF_NODE	406:26	406:26	3	(
PARAMETER_DECL	406:27	406:38	3	JPEGState * sp
TYPE	406:27	406:36	4	JPEGState *
TYPE_NAME	406:27	406:27	5	JPEGState
LEAF_NODE	406:27	406:27	6	JPEGState
POINTER	406:36	406:36	5	*
LEAF_NODE	406:36	406:36	6	*
NAME	406:38	406:38	4	sp
LEAF_NODE	406:38	406:38	5	sp
LEAF_NODE	406:40	406:40	3	)
LEAF_NODE	407:0	407:0	2	{
STATEMENTS	408:1	408:1	2	
JUMP_STATEMENT	408:1	408:68	3	return CALLJPEG ( sp , - 1 , ( int ) jpeg_finish_decompress ( & sp -> cinfo . d ) ) ;
KEYWORD	408:1	408:1	4	return
LEAF_NODE	408:1	408:1	5	return
DESTINATION	408:8	408:8	4	CALLJPEG ( sp , - 1 , ( int ) jpeg_finish_decompress ( & sp -> cinfo . d ) )
EXPR	408:8	408:8	5	CALLJPEG ( sp , - 1 , ( int ) jpeg_finish_decompress ( & sp -> cinfo . d ) )
FUNCTION_CALL	408:8	408:67	6	CALLJPEG ( sp , - 1 , ( int ) jpeg_finish_decompress ( & sp -> cinfo . d ) )
CALLEE	408:8	408:8	7	CALLJPEG
LEAF_NODE	408:8	408:8	8	CALLJPEG
LEAF_NODE	408:16	408:16	7	(
ARGUMENT	408:17	408:17	7	sp
FIELD	408:17	408:17	8	sp
LEAF_NODE	408:17	408:17	9	sp
LEAF_NODE	408:19	408:19	7	,
ARGUMENT	408:21	408:21	7	- 1
UNARY_EXPR	408:21	408:22	8	- 1
UNARY_OPERATOR	408:21	408:21	9	-
LEAF_NODE	408:21	408:21	10	-
FIELD	408:22	408:22	9	1
LEAF_NODE	408:22	408:22	10	1
LEAF_NODE	408:23	408:23	7	,
ARGUMENT	408:25	408:31	7	( int ) jpeg_finish_decompress ( & sp -> cinfo . d )
LEAF_NODE	408:25	408:25	8	(
TYPE_NAME	408:26	408:26	8	int
LEAF_NODE	408:26	408:26	9	int
LEAF_NODE	408:29	408:29	8	)
FUNCTION_CALL	408:31	408:66	8	jpeg_finish_decompress ( & sp -> cinfo . d )
CALLEE	408:31	408:31	9	jpeg_finish_decompress
LEAF_NODE	408:31	408:31	10	jpeg_finish_decompress
LEAF_NODE	408:53	408:53	9	(
ARGUMENT	408:54	408:54	9	& sp -> cinfo . d
UNARY_EXPR	408:54	408:55	10	& sp -> cinfo . d
UNARY_OPERATOR	408:54	408:54	11	&
LEAF_NODE	408:54	408:54	12	&
FIELD	408:55	408:65	11	sp -> cinfo . d
LEAF_NODE	408:55	408:55	12	sp
LEAF_NODE	408:57	408:57	12	->
LEAF_NODE	408:59	408:59	12	cinfo
LEAF_NODE	408:64	408:64	12	.
LEAF_NODE	408:65	408:65	12	d
LEAF_NODE	408:66	408:66	9	)
LEAF_NODE	408:67	408:67	7	)
LEAF_NODE	408:68	408:68	4	;
LEAF_NODE	409:0	409:0	2	}
FUNCTION_DEF	411:0	415:0	1	
RETURN_TYPE	411:0	411:7	2	static int
LEAF_NODE	411:0	411:0	3	static
TYPE_NAME	411:7	411:7	3	int
LEAF_NODE	411:7	411:7	4	int
FUNCTION_NAME	412:0	412:0	2	TIFFjpeg_abort
LEAF_NODE	412:0	412:0	3	TIFFjpeg_abort
PARAMETER_LIST	412:14	412:28	2	( JPEGState * sp )
LEAF_NODE	412:14	412:14	3	(
PARAMETER_DECL	412:15	412:26	3	JPEGState * sp
TYPE	412:15	412:24	4	JPEGState *
TYPE_NAME	412:15	412:15	5	JPEGState
LEAF_NODE	412:15	412:15	6	JPEGState
POINTER	412:24	412:24	5	*
LEAF_NODE	412:24	412:24	6	*
NAME	412:26	412:26	4	sp
LEAF_NODE	412:26	412:26	5	sp
LEAF_NODE	412:28	412:28	3	)
LEAF_NODE	413:0	413:0	2	{
STATEMENTS	414:1	414:1	2	
JUMP_STATEMENT	414:1	414:50	3	return CALLVJPEG ( sp , jpeg_abort ( & sp -> cinfo . comm ) ) ;
KEYWORD	414:1	414:1	4	return
LEAF_NODE	414:1	414:1	5	return
DESTINATION	414:8	414:8	4	CALLVJPEG ( sp , jpeg_abort ( & sp -> cinfo . comm ) )
EXPR	414:8	414:8	5	CALLVJPEG ( sp , jpeg_abort ( & sp -> cinfo . comm ) )
FUNCTION_CALL	414:8	414:49	6	CALLVJPEG ( sp , jpeg_abort ( & sp -> cinfo . comm ) )
CALLEE	414:8	414:8	7	CALLVJPEG
LEAF_NODE	414:8	414:8	8	CALLVJPEG
LEAF_NODE	414:17	414:17	7	(
ARGUMENT	414:18	414:18	7	sp
FIELD	414:18	414:18	8	sp
LEAF_NODE	414:18	414:18	9	sp
LEAF_NODE	414:20	414:20	7	,
ARGUMENT	414:22	414:22	7	jpeg_abort ( & sp -> cinfo . comm )
FUNCTION_CALL	414:22	414:48	8	jpeg_abort ( & sp -> cinfo . comm )
CALLEE	414:22	414:22	9	jpeg_abort
LEAF_NODE	414:22	414:22	10	jpeg_abort
LEAF_NODE	414:32	414:32	9	(
ARGUMENT	414:33	414:33	9	& sp -> cinfo . comm
UNARY_EXPR	414:33	414:34	10	& sp -> cinfo . comm
UNARY_OPERATOR	414:33	414:33	11	&
LEAF_NODE	414:33	414:33	12	&
FIELD	414:34	414:44	11	sp -> cinfo . comm
LEAF_NODE	414:34	414:34	12	sp
LEAF_NODE	414:36	414:36	12	->
LEAF_NODE	414:38	414:38	12	cinfo
LEAF_NODE	414:43	414:43	12	.
LEAF_NODE	414:44	414:44	12	comm
LEAF_NODE	414:48	414:48	9	)
LEAF_NODE	414:49	414:49	7	)
LEAF_NODE	414:50	414:50	4	;
LEAF_NODE	415:0	415:0	2	}
FUNCTION_DEF	417:0	421:0	1	
RETURN_TYPE	417:0	417:7	2	static int
LEAF_NODE	417:0	417:0	3	static
TYPE_NAME	417:7	417:7	3	int
LEAF_NODE	417:7	417:7	4	int
FUNCTION_NAME	418:0	418:0	2	TIFFjpeg_destroy
LEAF_NODE	418:0	418:0	3	TIFFjpeg_destroy
PARAMETER_LIST	418:16	418:30	2	( JPEGState * sp )
LEAF_NODE	418:16	418:16	3	(
PARAMETER_DECL	418:17	418:28	3	JPEGState * sp
TYPE	418:17	418:26	4	JPEGState *
TYPE_NAME	418:17	418:17	5	JPEGState
LEAF_NODE	418:17	418:17	6	JPEGState
POINTER	418:26	418:26	5	*
LEAF_NODE	418:26	418:26	6	*
NAME	418:28	418:28	4	sp
LEAF_NODE	418:28	418:28	5	sp
LEAF_NODE	418:30	418:30	3	)
LEAF_NODE	419:0	419:0	2	{
STATEMENTS	420:1	420:1	2	
JUMP_STATEMENT	420:1	420:52	3	return CALLVJPEG ( sp , jpeg_destroy ( & sp -> cinfo . comm ) ) ;
KEYWORD	420:1	420:1	4	return
LEAF_NODE	420:1	420:1	5	return
DESTINATION	420:8	420:8	4	CALLVJPEG ( sp , jpeg_destroy ( & sp -> cinfo . comm ) )
EXPR	420:8	420:8	5	CALLVJPEG ( sp , jpeg_destroy ( & sp -> cinfo . comm ) )
FUNCTION_CALL	420:8	420:51	6	CALLVJPEG ( sp , jpeg_destroy ( & sp -> cinfo . comm ) )
CALLEE	420:8	420:8	7	CALLVJPEG
LEAF_NODE	420:8	420:8	8	CALLVJPEG
LEAF_NODE	420:17	420:17	7	(
ARGUMENT	420:18	420:18	7	sp
FIELD	420:18	420:18	8	sp
LEAF_NODE	420:18	420:18	9	sp
LEAF_NODE	420:20	420:20	7	,
ARGUMENT	420:22	420:22	7	jpeg_destroy ( & sp -> cinfo . comm )
FUNCTION_CALL	420:22	420:50	8	jpeg_destroy ( & sp -> cinfo . comm )
CALLEE	420:22	420:22	9	jpeg_destroy
LEAF_NODE	420:22	420:22	10	jpeg_destroy
LEAF_NODE	420:34	420:34	9	(
ARGUMENT	420:35	420:35	9	& sp -> cinfo . comm
UNARY_EXPR	420:35	420:36	10	& sp -> cinfo . comm
UNARY_OPERATOR	420:35	420:35	11	&
LEAF_NODE	420:35	420:35	12	&
FIELD	420:36	420:46	11	sp -> cinfo . comm
LEAF_NODE	420:36	420:36	12	sp
LEAF_NODE	420:38	420:38	12	->
LEAF_NODE	420:40	420:40	12	cinfo
LEAF_NODE	420:45	420:45	12	.
LEAF_NODE	420:46	420:46	12	comm
LEAF_NODE	420:50	420:50	9	)
LEAF_NODE	420:51	420:51	7	)
LEAF_NODE	420:52	420:52	4	;
LEAF_NODE	421:0	421:0	2	}
FUNCTION_DEF	423:0	430:0	1	
RETURN_TYPE	423:0	423:7	2	static JSAMPARRAY
LEAF_NODE	423:0	423:0	3	static
TYPE_NAME	423:7	423:7	3	JSAMPARRAY
LEAF_NODE	423:7	423:7	4	JSAMPARRAY
FUNCTION_NAME	424:0	424:0	2	TIFFjpeg_alloc_sarray
LEAF_NODE	424:0	424:0	3	TIFFjpeg_alloc_sarray
PARAMETER_LIST	424:21	425:52	2	( JPEGState * sp , int pool_id , JDIMENSION samplesperrow , JDIMENSION numrows )
LEAF_NODE	424:21	424:21	3	(
PARAMETER_DECL	424:22	424:33	3	JPEGState * sp
TYPE	424:22	424:31	4	JPEGState *
TYPE_NAME	424:22	424:22	5	JPEGState
LEAF_NODE	424:22	424:22	6	JPEGState
POINTER	424:31	424:31	5	*
LEAF_NODE	424:31	424:31	6	*
NAME	424:33	424:33	4	sp
LEAF_NODE	424:33	424:33	5	sp
LEAF_NODE	424:35	424:35	3	,
PARAMETER_DECL	424:37	424:41	3	int pool_id
TYPE	424:37	424:37	4	int
TYPE_NAME	424:37	424:37	5	int
LEAF_NODE	424:37	424:37	6	int
NAME	424:41	424:41	4	pool_id
LEAF_NODE	424:41	424:41	5	pool_id
LEAF_NODE	424:48	424:48	3	,
PARAMETER_DECL	425:8	425:19	3	JDIMENSION samplesperrow
TYPE	425:8	425:8	4	JDIMENSION
TYPE_NAME	425:8	425:8	5	JDIMENSION
LEAF_NODE	425:8	425:8	6	JDIMENSION
NAME	425:19	425:19	4	samplesperrow
LEAF_NODE	425:19	425:19	5	samplesperrow
LEAF_NODE	425:32	425:32	3	,
PARAMETER_DECL	425:34	425:45	3	JDIMENSION numrows
TYPE	425:34	425:34	4	JDIMENSION
TYPE_NAME	425:34	425:34	5	JDIMENSION
LEAF_NODE	425:34	425:34	6	JDIMENSION
NAME	425:45	425:45	4	numrows
LEAF_NODE	425:45	425:45	5	numrows
LEAF_NODE	425:52	425:52	3	)
LEAF_NODE	426:0	426:0	2	{
STATEMENTS	427:1	427:1	2	
JUMP_STATEMENT	427:1	429:53	3	return CALLJPEG ( sp , ( JSAMPARRAY ) NULL , ( * sp -> cinfo . comm . mem -> alloc_sarray ) ( & sp -> cinfo . comm , pool_id , samplesperrow , numrows ) ) ;
KEYWORD	427:1	427:1	4	return
LEAF_NODE	427:1	427:1	5	return
DESTINATION	427:8	427:8	4	CALLJPEG ( sp , ( JSAMPARRAY ) NULL , ( * sp -> cinfo . comm . mem -> alloc_sarray ) ( & sp -> cinfo . comm , pool_id , samplesperrow , numrows ) )
EXPR	427:8	427:8	5	CALLJPEG ( sp , ( JSAMPARRAY ) NULL , ( * sp -> cinfo . comm . mem -> alloc_sarray ) ( & sp -> cinfo . comm , pool_id , samplesperrow , numrows ) )
FUNCTION_CALL	427:8	429:52	6	CALLJPEG ( sp , ( JSAMPARRAY ) NULL , ( * sp -> cinfo . comm . mem -> alloc_sarray ) ( & sp -> cinfo . comm , pool_id , samplesperrow , numrows ) )
CALLEE	427:8	427:8	7	CALLJPEG
LEAF_NODE	427:8	427:8	8	CALLJPEG
LEAF_NODE	427:16	427:16	7	(
ARGUMENT	427:17	427:17	7	sp
FIELD	427:17	427:17	8	sp
LEAF_NODE	427:17	427:17	9	sp
LEAF_NODE	427:19	427:19	7	,
ARGUMENT	427:21	427:34	7	( JSAMPARRAY ) NULL
LEAF_NODE	427:21	427:21	8	(
TYPE_NAME	427:22	427:22	8	JSAMPARRAY
LEAF_NODE	427:22	427:22	9	JSAMPARRAY
LEAF_NODE	427:32	427:32	8	)
FIELD	427:34	427:34	8	NULL
LEAF_NODE	427:34	427:34	9	NULL
LEAF_NODE	427:38	427:38	7	,
ARGUMENT	428:5	428:5	7	( * sp -> cinfo . comm . mem -> alloc_sarray ) ( & sp -> cinfo . comm , pool_id , samplesperrow , numrows )
FUNCTION_CALL	428:5	429:51	8	( * sp -> cinfo . comm . mem -> alloc_sarray ) ( & sp -> cinfo . comm , pool_id , samplesperrow , numrows )
CALLEE	428:5	428:39	9	( * sp -> cinfo . comm . mem -> alloc_sarray )
LEAF_NODE	428:5	428:5	10	(
UNARY_EXPR	428:6	428:7	10	* sp -> cinfo . comm . mem -> alloc_sarray
UNARY_OPERATOR	428:6	428:6	11	*
LEAF_NODE	428:6	428:6	12	*
FIELD	428:7	428:27	11	sp -> cinfo . comm . mem -> alloc_sarray
LEAF_NODE	428:7	428:7	12	sp
LEAF_NODE	428:9	428:9	12	->
LEAF_NODE	428:11	428:11	12	cinfo
LEAF_NODE	428:16	428:16	12	.
LEAF_NODE	428:17	428:17	12	comm
LEAF_NODE	428:21	428:21	12	.
LEAF_NODE	428:22	428:22	12	mem
LEAF_NODE	428:25	428:25	12	->
LEAF_NODE	428:27	428:27	12	alloc_sarray
LEAF_NODE	428:39	428:39	10	)
LEAF_NODE	429:2	429:2	9	(
ARGUMENT	429:3	429:3	9	& sp -> cinfo . comm
UNARY_EXPR	429:3	429:4	10	& sp -> cinfo . comm
UNARY_OPERATOR	429:3	429:3	11	&
LEAF_NODE	429:3	429:3	12	&
FIELD	429:4	429:14	11	sp -> cinfo . comm
LEAF_NODE	429:4	429:4	12	sp
LEAF_NODE	429:6	429:6	12	->
LEAF_NODE	429:8	429:8	12	cinfo
LEAF_NODE	429:13	429:13	12	.
LEAF_NODE	429:14	429:14	12	comm
LEAF_NODE	429:18	429:18	9	,
ARGUMENT	429:20	429:20	9	pool_id
FIELD	429:20	429:20	10	pool_id
LEAF_NODE	429:20	429:20	11	pool_id
LEAF_NODE	429:27	429:27	9	,
ARGUMENT	429:29	429:29	9	samplesperrow
FIELD	429:29	429:29	10	samplesperrow
LEAF_NODE	429:29	429:29	11	samplesperrow
LEAF_NODE	429:42	429:42	9	,
ARGUMENT	429:44	429:44	9	numrows
FIELD	429:44	429:44	10	numrows
LEAF_NODE	429:44	429:44	11	numrows
LEAF_NODE	429:51	429:51	9	)
LEAF_NODE	429:52	429:52	7	)
LEAF_NODE	429:53	429:53	4	;
LEAF_NODE	430:0	430:0	2	}
FUNCTION_DEF	438:0	446:0	1	
RETURN_TYPE	438:0	438:7	2	static void
LEAF_NODE	438:0	438:0	3	static
TYPE_NAME	438:7	438:7	3	void
LEAF_NODE	438:7	438:7	4	void
FUNCTION_NAME	439:0	439:0	2	std_init_destination
LEAF_NODE	439:0	439:0	3	std_init_destination
PARAMETER_LIST	439:20	439:41	2	( j_compress_ptr cinfo )
LEAF_NODE	439:20	439:20	3	(
PARAMETER_DECL	439:21	439:36	3	j_compress_ptr cinfo
TYPE	439:21	439:21	4	j_compress_ptr
TYPE_NAME	439:21	439:21	5	j_compress_ptr
LEAF_NODE	439:21	439:21	6	j_compress_ptr
NAME	439:36	439:36	4	cinfo
LEAF_NODE	439:36	439:36	5	cinfo
LEAF_NODE	439:41	439:41	3	)
LEAF_NODE	440:0	440:0	2	{
STATEMENTS	441:1	445:1	2	
SIMPLE_DECL	441:1	441:35	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	441:1	441:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	441:1	441:10	5	JPEGState *
TYPE_NAME	441:1	441:1	6	JPEGState
LEAF_NODE	441:1	441:1	7	JPEGState
POINTER	441:10	441:10	6	*
LEAF_NODE	441:10	441:10	7	*
NAME	441:12	441:12	5	sp
LEAF_NODE	441:12	441:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	441:12	441:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	441:12	441:17	6	sp = ( JPEGState * ) cinfo
LVAL	441:12	441:12	7	sp
NAME	441:12	441:12	8	sp
LEAF_NODE	441:12	441:12	9	sp
ASSIGN_OP	441:15	441:15	7	=
LEAF_NODE	441:15	441:15	8	=
RVAL	441:17	441:30	7	( JPEGState * ) cinfo
LEAF_NODE	441:17	441:17	8	(
TYPE_NAME	441:18	441:18	8	JPEGState
LEAF_NODE	441:18	441:18	9	JPEGState
LEAF_NODE	441:27	441:27	8	*
LEAF_NODE	441:28	441:28	8	)
FIELD	441:30	441:30	8	cinfo
LEAF_NODE	441:30	441:30	9	cinfo
LEAF_NODE	441:35	441:35	4	;
SIMPLE_DECL	442:1	442:20	3	TIFF * tif ; tif = sp -> tif ;
VAR_DECL	442:1	442:7	4	TIFF * tif ; tif = sp -> tif
TYPE	442:1	442:5	5	TIFF *
TYPE_NAME	442:1	442:1	6	TIFF
LEAF_NODE	442:1	442:1	7	TIFF
POINTER	442:5	442:5	6	*
LEAF_NODE	442:5	442:5	7	*
NAME	442:7	442:7	5	tif
LEAF_NODE	442:7	442:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	442:7	442:7	5	tif = sp -> tif
ASSIGN	442:7	442:13	6	tif = sp -> tif
LVAL	442:7	442:7	7	tif
NAME	442:7	442:7	8	tif
LEAF_NODE	442:7	442:7	9	tif
ASSIGN_OP	442:11	442:11	7	=
LEAF_NODE	442:11	442:11	8	=
RVAL	442:13	442:13	7	sp -> tif
FIELD	442:13	442:17	8	sp -> tif
LEAF_NODE	442:13	442:13	9	sp
LEAF_NODE	442:15	442:15	9	->
LEAF_NODE	442:17	442:17	9	tif
LEAF_NODE	442:20	442:20	4	;
EXPR_STATEMENT	444:1	444:55	3	sp -> dest . next_output_byte = ( JOCTET * ) tif -> tif_rawdata ;
EXPR	444:1	444:1	4	sp -> dest . next_output_byte = ( JOCTET * ) tif -> tif_rawdata
ASSIGN	444:1	444:29	5	sp -> dest . next_output_byte = ( JOCTET * ) tif -> tif_rawdata
LVAL	444:1	444:1	6	sp -> dest . next_output_byte
FIELD	444:1	444:10	7	sp -> dest . next_output_byte
LEAF_NODE	444:1	444:1	8	sp
LEAF_NODE	444:3	444:3	8	->
LEAF_NODE	444:5	444:5	8	dest
LEAF_NODE	444:9	444:9	8	.
LEAF_NODE	444:10	444:10	8	next_output_byte
ASSIGN_OP	444:27	444:27	6	=
LEAF_NODE	444:27	444:27	7	=
RVAL	444:29	444:39	6	( JOCTET * ) tif -> tif_rawdata
LEAF_NODE	444:29	444:29	7	(
TYPE_NAME	444:30	444:30	7	JOCTET
LEAF_NODE	444:30	444:30	8	JOCTET
LEAF_NODE	444:36	444:36	7	*
LEAF_NODE	444:37	444:37	7	)
FIELD	444:39	444:44	7	tif -> tif_rawdata
LEAF_NODE	444:39	444:39	8	tif
LEAF_NODE	444:42	444:42	8	->
LEAF_NODE	444:44	444:44	8	tif_rawdata
LEAF_NODE	444:55	444:55	4	;
EXPR_STATEMENT	445:1	445:56	3	sp -> dest . free_in_buffer = ( size_t ) tif -> tif_rawdatasize ;
EXPR	445:1	445:1	4	sp -> dest . free_in_buffer = ( size_t ) tif -> tif_rawdatasize
ASSIGN	445:1	445:27	5	sp -> dest . free_in_buffer = ( size_t ) tif -> tif_rawdatasize
LVAL	445:1	445:1	6	sp -> dest . free_in_buffer
FIELD	445:1	445:10	7	sp -> dest . free_in_buffer
LEAF_NODE	445:1	445:1	8	sp
LEAF_NODE	445:3	445:3	8	->
LEAF_NODE	445:5	445:5	8	dest
LEAF_NODE	445:9	445:9	8	.
LEAF_NODE	445:10	445:10	8	free_in_buffer
ASSIGN_OP	445:25	445:25	6	=
LEAF_NODE	445:25	445:25	7	=
RVAL	445:27	445:36	6	( size_t ) tif -> tif_rawdatasize
LEAF_NODE	445:27	445:27	7	(
TYPE_NAME	445:28	445:28	7	size_t
LEAF_NODE	445:28	445:28	8	size_t
LEAF_NODE	445:34	445:34	7	)
FIELD	445:36	445:41	7	tif -> tif_rawdatasize
LEAF_NODE	445:36	445:36	8	tif
LEAF_NODE	445:39	445:39	8	->
LEAF_NODE	445:41	445:41	8	tif_rawdatasize
LEAF_NODE	445:56	445:56	4	;
LEAF_NODE	446:0	446:0	2	}
FUNCTION_DEF	448:0	474:0	1	
RETURN_TYPE	448:0	448:7	2	static boolean
LEAF_NODE	448:0	448:0	3	static
TYPE_NAME	448:7	448:7	3	boolean
LEAF_NODE	448:7	448:7	4	boolean
FUNCTION_NAME	449:0	449:0	2	std_empty_output_buffer
LEAF_NODE	449:0	449:0	3	std_empty_output_buffer
PARAMETER_LIST	449:23	449:44	2	( j_compress_ptr cinfo )
LEAF_NODE	449:23	449:23	3	(
PARAMETER_DECL	449:24	449:39	3	j_compress_ptr cinfo
TYPE	449:24	449:24	4	j_compress_ptr
TYPE_NAME	449:24	449:24	5	j_compress_ptr
LEAF_NODE	449:24	449:24	6	j_compress_ptr
NAME	449:39	449:39	4	cinfo
LEAF_NODE	449:39	449:39	5	cinfo
LEAF_NODE	449:44	449:44	3	)
LEAF_NODE	450:0	450:0	2	{
STATEMENTS	451:1	473:14	2	
SIMPLE_DECL	451:1	451:35	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	451:1	451:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	451:1	451:10	5	JPEGState *
TYPE_NAME	451:1	451:1	6	JPEGState
LEAF_NODE	451:1	451:1	7	JPEGState
POINTER	451:10	451:10	6	*
LEAF_NODE	451:10	451:10	7	*
NAME	451:12	451:12	5	sp
LEAF_NODE	451:12	451:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	451:12	451:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	451:12	451:17	6	sp = ( JPEGState * ) cinfo
LVAL	451:12	451:12	7	sp
NAME	451:12	451:12	8	sp
LEAF_NODE	451:12	451:12	9	sp
ASSIGN_OP	451:15	451:15	7	=
LEAF_NODE	451:15	451:15	8	=
RVAL	451:17	451:30	7	( JPEGState * ) cinfo
LEAF_NODE	451:17	451:17	8	(
TYPE_NAME	451:18	451:18	8	JPEGState
LEAF_NODE	451:18	451:18	9	JPEGState
LEAF_NODE	451:27	451:27	8	*
LEAF_NODE	451:28	451:28	8	)
FIELD	451:30	451:30	8	cinfo
LEAF_NODE	451:30	451:30	9	cinfo
LEAF_NODE	451:35	451:35	4	;
SIMPLE_DECL	452:1	452:20	3	TIFF * tif ; tif = sp -> tif ;
VAR_DECL	452:1	452:7	4	TIFF * tif ; tif = sp -> tif
TYPE	452:1	452:5	5	TIFF *
TYPE_NAME	452:1	452:1	6	TIFF
LEAF_NODE	452:1	452:1	7	TIFF
POINTER	452:5	452:5	6	*
LEAF_NODE	452:5	452:5	7	*
NAME	452:7	452:7	5	tif
LEAF_NODE	452:7	452:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	452:7	452:7	5	tif = sp -> tif
ASSIGN	452:7	452:13	6	tif = sp -> tif
LVAL	452:7	452:7	7	tif
NAME	452:7	452:7	8	tif
LEAF_NODE	452:7	452:7	9	tif
ASSIGN_OP	452:11	452:11	7	=
LEAF_NODE	452:11	452:11	8	=
RVAL	452:13	452:13	7	sp -> tif
FIELD	452:13	452:17	8	sp -> tif
LEAF_NODE	452:13	452:13	9	sp
LEAF_NODE	452:15	452:15	9	->
LEAF_NODE	452:17	452:17	9	tif
LEAF_NODE	452:20	452:20	4	;
EXPR_STATEMENT	455:1	455:38	3	tif -> tif_rawcc = tif -> tif_rawdatasize ;
EXPR	455:1	455:1	4	tif -> tif_rawcc = tif -> tif_rawdatasize
ASSIGN	455:1	455:18	5	tif -> tif_rawcc = tif -> tif_rawdatasize
LVAL	455:1	455:1	6	tif -> tif_rawcc
FIELD	455:1	455:6	7	tif -> tif_rawcc
LEAF_NODE	455:1	455:1	8	tif
LEAF_NODE	455:4	455:4	8	->
LEAF_NODE	455:6	455:6	8	tif_rawcc
ASSIGN_OP	455:16	455:16	6	=
LEAF_NODE	455:16	455:16	7	=
RVAL	455:18	455:18	6	tif -> tif_rawdatasize
FIELD	455:18	455:23	7	tif -> tif_rawdatasize
LEAF_NODE	455:18	455:18	8	tif
LEAF_NODE	455:21	455:21	8	->
LEAF_NODE	455:23	455:23	8	tif_rawdatasize
LEAF_NODE	455:38	455:38	4	;
SELECTION	464:7	464:43	3	
KEYWORD	464:7	464:7	4	if
LEAF_NODE	464:7	464:7	5	if
LEAF_NODE	464:10	464:10	4	(
CONDITION	464:12	464:12	4	sp -> dest . free_in_buffer >= 0
EXPR	464:12	464:39	5	sp -> dest . free_in_buffer >= 0
FIELD	464:12	464:21	6	sp -> dest . free_in_buffer
LEAF_NODE	464:12	464:12	7	sp
LEAF_NODE	464:14	464:14	7	->
LEAF_NODE	464:16	464:16	7	dest
LEAF_NODE	464:20	464:20	7	.
LEAF_NODE	464:21	464:21	7	free_in_buffer
REL_OPERATOR	464:36	464:36	6	>=
LEAF_NODE	464:36	464:36	7	>=
FIELD	464:39	464:39	6	0
LEAF_NODE	464:39	464:39	7	0
LEAF_NODE	464:41	464:41	4	)
STATEMENTS	464:43	466:7	4	
LEAF_NODE	464:43	464:43	5	{
STATEMENTS	465:15	465:15	5	
EXPR_STATEMENT	465:15	465:78	6	tif -> tif_rawcc = tif -> tif_rawdatasize - sp -> dest . free_in_buffer ;
EXPR	465:15	465:15	7	tif -> tif_rawcc = tif -> tif_rawdatasize - sp -> dest . free_in_buffer
ASSIGN	465:15	465:32	8	tif -> tif_rawcc = tif -> tif_rawdatasize - sp -> dest . free_in_buffer
LVAL	465:15	465:15	9	tif -> tif_rawcc
FIELD	465:15	465:20	10	tif -> tif_rawcc
LEAF_NODE	465:15	465:15	11	tif
LEAF_NODE	465:18	465:18	11	->
LEAF_NODE	465:20	465:20	11	tif_rawcc
ASSIGN_OP	465:30	465:30	9	=
LEAF_NODE	465:30	465:30	10	=
RVAL	465:32	465:55	9	tif -> tif_rawdatasize - sp -> dest . free_in_buffer
FIELD	465:32	465:37	10	tif -> tif_rawdatasize
LEAF_NODE	465:32	465:32	11	tif
LEAF_NODE	465:35	465:35	11	->
LEAF_NODE	465:37	465:37	11	tif_rawdatasize
LEAF_NODE	465:53	465:53	10	-
FIELD	465:55	465:64	10	sp -> dest . free_in_buffer
LEAF_NODE	465:55	465:55	11	sp
LEAF_NODE	465:57	465:57	11	->
LEAF_NODE	465:59	465:59	11	dest
LEAF_NODE	465:63	465:63	11	.
LEAF_NODE	465:64	465:64	11	free_in_buffer
LEAF_NODE	465:78	465:78	7	;
LEAF_NODE	466:7	466:7	5	}
EXPR_STATEMENT	469:1	469:20	3	TIFFFlushData1 ( tif ) ;
EXPR	469:1	469:1	4	TIFFFlushData1 ( tif )
FUNCTION_CALL	469:1	469:19	5	TIFFFlushData1 ( tif )
CALLEE	469:1	469:1	6	TIFFFlushData1
LEAF_NODE	469:1	469:1	7	TIFFFlushData1
LEAF_NODE	469:15	469:15	6	(
ARGUMENT	469:16	469:16	6	tif
FIELD	469:16	469:16	7	tif
LEAF_NODE	469:16	469:16	8	tif
LEAF_NODE	469:19	469:19	6	)
LEAF_NODE	469:20	469:20	4	;
EXPR_STATEMENT	470:1	470:55	3	sp -> dest . next_output_byte = ( JOCTET * ) tif -> tif_rawdata ;
EXPR	470:1	470:1	4	sp -> dest . next_output_byte = ( JOCTET * ) tif -> tif_rawdata
ASSIGN	470:1	470:29	5	sp -> dest . next_output_byte = ( JOCTET * ) tif -> tif_rawdata
LVAL	470:1	470:1	6	sp -> dest . next_output_byte
FIELD	470:1	470:10	7	sp -> dest . next_output_byte
LEAF_NODE	470:1	470:1	8	sp
LEAF_NODE	470:3	470:3	8	->
LEAF_NODE	470:5	470:5	8	dest
LEAF_NODE	470:9	470:9	8	.
LEAF_NODE	470:10	470:10	8	next_output_byte
ASSIGN_OP	470:27	470:27	6	=
LEAF_NODE	470:27	470:27	7	=
RVAL	470:29	470:39	6	( JOCTET * ) tif -> tif_rawdata
LEAF_NODE	470:29	470:29	7	(
TYPE_NAME	470:30	470:30	7	JOCTET
LEAF_NODE	470:30	470:30	8	JOCTET
LEAF_NODE	470:36	470:36	7	*
LEAF_NODE	470:37	470:37	7	)
FIELD	470:39	470:44	7	tif -> tif_rawdata
LEAF_NODE	470:39	470:39	8	tif
LEAF_NODE	470:42	470:42	8	->
LEAF_NODE	470:44	470:44	8	tif_rawdata
LEAF_NODE	470:55	470:55	4	;
EXPR_STATEMENT	471:1	471:56	3	sp -> dest . free_in_buffer = ( size_t ) tif -> tif_rawdatasize ;
EXPR	471:1	471:1	4	sp -> dest . free_in_buffer = ( size_t ) tif -> tif_rawdatasize
ASSIGN	471:1	471:27	5	sp -> dest . free_in_buffer = ( size_t ) tif -> tif_rawdatasize
LVAL	471:1	471:1	6	sp -> dest . free_in_buffer
FIELD	471:1	471:10	7	sp -> dest . free_in_buffer
LEAF_NODE	471:1	471:1	8	sp
LEAF_NODE	471:3	471:3	8	->
LEAF_NODE	471:5	471:5	8	dest
LEAF_NODE	471:9	471:9	8	.
LEAF_NODE	471:10	471:10	8	free_in_buffer
ASSIGN_OP	471:25	471:25	6	=
LEAF_NODE	471:25	471:25	7	=
RVAL	471:27	471:36	6	( size_t ) tif -> tif_rawdatasize
LEAF_NODE	471:27	471:27	7	(
TYPE_NAME	471:28	471:28	7	size_t
LEAF_NODE	471:28	471:28	8	size_t
LEAF_NODE	471:34	471:34	7	)
FIELD	471:36	471:41	7	tif -> tif_rawdatasize
LEAF_NODE	471:36	471:36	8	tif
LEAF_NODE	471:39	471:39	8	->
LEAF_NODE	471:41	471:41	8	tif_rawdatasize
LEAF_NODE	471:56	471:56	4	;
LEAF_NODE	473:1	473:1	3	return
LEAF_NODE	473:8	473:8	3	(
LEAF_NODE	473:9	473:9	3	TRUE
LEAF_NODE	473:13	473:13	3	)
LEAF_NODE	473:14	473:14	3	;
LEAF_NODE	474:0	474:0	2	}
FUNCTION_DEF	476:0	486:0	1	
RETURN_TYPE	476:0	476:7	2	static void
LEAF_NODE	476:0	476:0	3	static
TYPE_NAME	476:7	476:7	3	void
LEAF_NODE	476:7	476:7	4	void
FUNCTION_NAME	477:0	477:0	2	std_term_destination
LEAF_NODE	477:0	477:0	3	std_term_destination
PARAMETER_LIST	477:20	477:41	2	( j_compress_ptr cinfo )
LEAF_NODE	477:20	477:20	3	(
PARAMETER_DECL	477:21	477:36	3	j_compress_ptr cinfo
TYPE	477:21	477:21	4	j_compress_ptr
TYPE_NAME	477:21	477:21	5	j_compress_ptr
LEAF_NODE	477:21	477:21	6	j_compress_ptr
NAME	477:36	477:36	4	cinfo
LEAF_NODE	477:36	477:36	5	cinfo
LEAF_NODE	477:41	477:41	3	)
LEAF_NODE	478:0	478:0	2	{
STATEMENTS	479:1	483:1	2	
SIMPLE_DECL	479:1	479:35	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	479:1	479:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	479:1	479:10	5	JPEGState *
TYPE_NAME	479:1	479:1	6	JPEGState
LEAF_NODE	479:1	479:1	7	JPEGState
POINTER	479:10	479:10	6	*
LEAF_NODE	479:10	479:10	7	*
NAME	479:12	479:12	5	sp
LEAF_NODE	479:12	479:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	479:12	479:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	479:12	479:17	6	sp = ( JPEGState * ) cinfo
LVAL	479:12	479:12	7	sp
NAME	479:12	479:12	8	sp
LEAF_NODE	479:12	479:12	9	sp
ASSIGN_OP	479:15	479:15	7	=
LEAF_NODE	479:15	479:15	8	=
RVAL	479:17	479:30	7	( JPEGState * ) cinfo
LEAF_NODE	479:17	479:17	8	(
TYPE_NAME	479:18	479:18	8	JPEGState
LEAF_NODE	479:18	479:18	9	JPEGState
LEAF_NODE	479:27	479:27	8	*
LEAF_NODE	479:28	479:28	8	)
FIELD	479:30	479:30	8	cinfo
LEAF_NODE	479:30	479:30	9	cinfo
LEAF_NODE	479:35	479:35	4	;
SIMPLE_DECL	480:1	480:20	3	TIFF * tif ; tif = sp -> tif ;
VAR_DECL	480:1	480:7	4	TIFF * tif ; tif = sp -> tif
TYPE	480:1	480:5	5	TIFF *
TYPE_NAME	480:1	480:1	6	TIFF
LEAF_NODE	480:1	480:1	7	TIFF
POINTER	480:5	480:5	6	*
LEAF_NODE	480:5	480:5	7	*
NAME	480:7	480:7	5	tif
LEAF_NODE	480:7	480:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	480:7	480:7	5	tif = sp -> tif
ASSIGN	480:7	480:13	6	tif = sp -> tif
LVAL	480:7	480:7	7	tif
NAME	480:7	480:7	8	tif
LEAF_NODE	480:7	480:7	9	tif
ASSIGN_OP	480:11	480:11	7	=
LEAF_NODE	480:11	480:11	8	=
RVAL	480:13	480:13	7	sp -> tif
FIELD	480:13	480:17	8	sp -> tif
LEAF_NODE	480:13	480:13	9	sp
LEAF_NODE	480:15	480:15	9	->
LEAF_NODE	480:17	480:17	9	tif
LEAF_NODE	480:20	480:20	4	;
EXPR_STATEMENT	482:1	482:52	3	tif -> tif_rawcp = ( uint8 * ) sp -> dest . next_output_byte ;
EXPR	482:1	482:1	4	tif -> tif_rawcp = ( uint8 * ) sp -> dest . next_output_byte
ASSIGN	482:1	482:18	5	tif -> tif_rawcp = ( uint8 * ) sp -> dest . next_output_byte
LVAL	482:1	482:1	6	tif -> tif_rawcp
FIELD	482:1	482:6	7	tif -> tif_rawcp
LEAF_NODE	482:1	482:1	8	tif
LEAF_NODE	482:4	482:4	8	->
LEAF_NODE	482:6	482:6	8	tif_rawcp
ASSIGN_OP	482:16	482:16	6	=
LEAF_NODE	482:16	482:16	7	=
RVAL	482:18	482:27	6	( uint8 * ) sp -> dest . next_output_byte
LEAF_NODE	482:18	482:18	7	(
TYPE_NAME	482:19	482:19	7	uint8
LEAF_NODE	482:19	482:19	8	uint8
LEAF_NODE	482:24	482:24	7	*
LEAF_NODE	482:25	482:25	7	)
FIELD	482:27	482:36	7	sp -> dest . next_output_byte
LEAF_NODE	482:27	482:27	8	sp
LEAF_NODE	482:29	482:29	8	->
LEAF_NODE	482:31	482:31	8	dest
LEAF_NODE	482:35	482:35	8	.
LEAF_NODE	482:36	482:36	8	next_output_byte
LEAF_NODE	482:52	482:52	4	;
EXPR_STATEMENT	483:1	484:62	3	tif -> tif_rawcc = tif -> tif_rawdatasize - ( tmsize_t ) sp -> dest . free_in_buffer ;
EXPR	483:1	483:1	4	tif -> tif_rawcc = tif -> tif_rawdatasize - ( tmsize_t ) sp -> dest . free_in_buffer
ASSIGN	483:1	484:5	5	tif -> tif_rawcc = tif -> tif_rawdatasize - ( tmsize_t ) sp -> dest . free_in_buffer
LVAL	483:1	483:1	6	tif -> tif_rawcc
FIELD	483:1	483:6	7	tif -> tif_rawcc
LEAF_NODE	483:1	483:1	8	tif
LEAF_NODE	483:4	483:4	8	->
LEAF_NODE	483:6	483:6	8	tif_rawcc
ASSIGN_OP	483:16	483:16	6	=
LEAF_NODE	483:16	483:16	7	=
RVAL	484:5	484:39	6	tif -> tif_rawdatasize - ( tmsize_t ) sp -> dest . free_in_buffer
FIELD	484:5	484:10	7	tif -> tif_rawdatasize
LEAF_NODE	484:5	484:5	8	tif
LEAF_NODE	484:8	484:8	8	->
LEAF_NODE	484:10	484:10	8	tif_rawdatasize
LEAF_NODE	484:26	484:26	7	-
LEAF_NODE	484:28	484:28	7	(
TYPE_NAME	484:29	484:29	7	tmsize_t
LEAF_NODE	484:29	484:29	8	tmsize_t
LEAF_NODE	484:37	484:37	7	)
FIELD	484:39	484:48	7	sp -> dest . free_in_buffer
LEAF_NODE	484:39	484:39	8	sp
LEAF_NODE	484:41	484:41	8	->
LEAF_NODE	484:43	484:43	8	dest
LEAF_NODE	484:47	484:47	8	.
LEAF_NODE	484:48	484:48	8	free_in_buffer
LEAF_NODE	484:62	484:62	4	;
LEAF_NODE	486:0	486:0	2	}
FUNCTION_DEF	488:0	496:0	1	
RETURN_TYPE	488:0	488:7	2	static void
LEAF_NODE	488:0	488:0	3	static
TYPE_NAME	488:7	488:7	3	void
LEAF_NODE	488:7	488:7	4	void
FUNCTION_NAME	489:0	489:0	2	TIFFjpeg_data_dest
LEAF_NODE	489:0	489:0	3	TIFFjpeg_data_dest
PARAMETER_LIST	489:18	489:43	2	( JPEGState * sp , TIFF * tif )
LEAF_NODE	489:18	489:18	3	(
PARAMETER_DECL	489:19	489:30	3	JPEGState * sp
TYPE	489:19	489:28	4	JPEGState *
TYPE_NAME	489:19	489:19	5	JPEGState
LEAF_NODE	489:19	489:19	6	JPEGState
POINTER	489:28	489:28	5	*
LEAF_NODE	489:28	489:28	6	*
NAME	489:30	489:30	4	sp
LEAF_NODE	489:30	489:30	5	sp
LEAF_NODE	489:32	489:32	3	,
PARAMETER_DECL	489:34	489:40	3	TIFF * tif
TYPE	489:34	489:38	4	TIFF *
TYPE_NAME	489:34	489:34	5	TIFF
LEAF_NODE	489:34	489:34	6	TIFF
POINTER	489:38	489:38	5	*
LEAF_NODE	489:38	489:38	6	*
NAME	489:40	489:40	4	tif
LEAF_NODE	489:40	489:40	5	tif
LEAF_NODE	489:43	489:43	3	)
LEAF_NODE	490:0	490:0	2	{
STATEMENTS	491:1	495:1	2	
EXPR_STATEMENT	491:1	491:11	3	( void ) tif ;
EXPR	491:1	491:8	4	( void ) tif
LEAF_NODE	491:1	491:1	5	(
TYPE_NAME	491:2	491:2	5	void
LEAF_NODE	491:2	491:2	6	void
LEAF_NODE	491:6	491:6	5	)
FIELD	491:8	491:8	5	tif
LEAF_NODE	491:8	491:8	6	tif
LEAF_NODE	491:11	491:11	4	;
EXPR_STATEMENT	492:1	492:29	3	sp -> cinfo . c . dest = & sp -> dest ;
EXPR	492:1	492:1	4	sp -> cinfo . c . dest = & sp -> dest
ASSIGN	492:1	492:20	5	sp -> cinfo . c . dest = & sp -> dest
LVAL	492:1	492:1	6	sp -> cinfo . c . dest
FIELD	492:1	492:13	7	sp -> cinfo . c . dest
LEAF_NODE	492:1	492:1	8	sp
LEAF_NODE	492:3	492:3	8	->
LEAF_NODE	492:5	492:5	8	cinfo
LEAF_NODE	492:10	492:10	8	.
LEAF_NODE	492:11	492:11	8	c
LEAF_NODE	492:12	492:12	8	.
LEAF_NODE	492:13	492:13	8	dest
ASSIGN_OP	492:18	492:18	6	=
LEAF_NODE	492:18	492:18	7	=
RVAL	492:20	492:20	6	& sp -> dest
UNARY_EXPR	492:20	492:21	7	& sp -> dest
UNARY_OPERATOR	492:20	492:20	8	&
LEAF_NODE	492:20	492:20	9	&
FIELD	492:21	492:25	8	sp -> dest
LEAF_NODE	492:21	492:21	9	sp
LEAF_NODE	492:23	492:23	9	->
LEAF_NODE	492:25	492:25	9	dest
LEAF_NODE	492:29	492:29	4	;
EXPR_STATEMENT	493:1	493:49	3	sp -> dest . init_destination = std_init_destination ;
EXPR	493:1	493:1	4	sp -> dest . init_destination = std_init_destination
ASSIGN	493:1	493:29	5	sp -> dest . init_destination = std_init_destination
LVAL	493:1	493:1	6	sp -> dest . init_destination
FIELD	493:1	493:10	7	sp -> dest . init_destination
LEAF_NODE	493:1	493:1	8	sp
LEAF_NODE	493:3	493:3	8	->
LEAF_NODE	493:5	493:5	8	dest
LEAF_NODE	493:9	493:9	8	.
LEAF_NODE	493:10	493:10	8	init_destination
ASSIGN_OP	493:27	493:27	6	=
LEAF_NODE	493:27	493:27	7	=
RVAL	493:29	493:29	6	std_init_destination
FIELD	493:29	493:29	7	std_init_destination
LEAF_NODE	493:29	493:29	8	std_init_destination
LEAF_NODE	493:49	493:49	4	;
EXPR_STATEMENT	494:1	494:55	3	sp -> dest . empty_output_buffer = std_empty_output_buffer ;
EXPR	494:1	494:1	4	sp -> dest . empty_output_buffer = std_empty_output_buffer
ASSIGN	494:1	494:32	5	sp -> dest . empty_output_buffer = std_empty_output_buffer
LVAL	494:1	494:1	6	sp -> dest . empty_output_buffer
FIELD	494:1	494:10	7	sp -> dest . empty_output_buffer
LEAF_NODE	494:1	494:1	8	sp
LEAF_NODE	494:3	494:3	8	->
LEAF_NODE	494:5	494:5	8	dest
LEAF_NODE	494:9	494:9	8	.
LEAF_NODE	494:10	494:10	8	empty_output_buffer
ASSIGN_OP	494:30	494:30	6	=
LEAF_NODE	494:30	494:30	7	=
RVAL	494:32	494:32	6	std_empty_output_buffer
FIELD	494:32	494:32	7	std_empty_output_buffer
LEAF_NODE	494:32	494:32	8	std_empty_output_buffer
LEAF_NODE	494:55	494:55	4	;
EXPR_STATEMENT	495:1	495:49	3	sp -> dest . term_destination = std_term_destination ;
EXPR	495:1	495:1	4	sp -> dest . term_destination = std_term_destination
ASSIGN	495:1	495:29	5	sp -> dest . term_destination = std_term_destination
LVAL	495:1	495:1	6	sp -> dest . term_destination
FIELD	495:1	495:10	7	sp -> dest . term_destination
LEAF_NODE	495:1	495:1	8	sp
LEAF_NODE	495:3	495:3	8	->
LEAF_NODE	495:5	495:5	8	dest
LEAF_NODE	495:9	495:9	8	.
LEAF_NODE	495:10	495:10	8	term_destination
ASSIGN_OP	495:27	495:27	6	=
LEAF_NODE	495:27	495:27	7	=
RVAL	495:29	495:29	6	std_term_destination
FIELD	495:29	495:29	7	std_term_destination
LEAF_NODE	495:29	495:29	8	std_term_destination
LEAF_NODE	495:49	495:49	4	;
LEAF_NODE	496:0	496:0	2	}
FUNCTION_DEF	502:0	510:0	1	
RETURN_TYPE	502:0	502:7	2	static void
LEAF_NODE	502:0	502:0	3	static
TYPE_NAME	502:7	502:7	3	void
LEAF_NODE	502:7	502:7	4	void
FUNCTION_NAME	503:0	503:0	2	tables_init_destination
LEAF_NODE	503:0	503:0	3	tables_init_destination
PARAMETER_LIST	503:23	503:44	2	( j_compress_ptr cinfo )
LEAF_NODE	503:23	503:23	3	(
PARAMETER_DECL	503:24	503:39	3	j_compress_ptr cinfo
TYPE	503:24	503:24	4	j_compress_ptr
TYPE_NAME	503:24	503:24	5	j_compress_ptr
LEAF_NODE	503:24	503:24	6	j_compress_ptr
NAME	503:39	503:39	4	cinfo
LEAF_NODE	503:39	503:39	5	cinfo
LEAF_NODE	503:44	503:44	3	)
LEAF_NODE	504:0	504:0	2	{
STATEMENTS	505:1	509:1	2	
SIMPLE_DECL	505:1	505:35	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	505:1	505:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	505:1	505:10	5	JPEGState *
TYPE_NAME	505:1	505:1	6	JPEGState
LEAF_NODE	505:1	505:1	7	JPEGState
POINTER	505:10	505:10	6	*
LEAF_NODE	505:10	505:10	7	*
NAME	505:12	505:12	5	sp
LEAF_NODE	505:12	505:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	505:12	505:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	505:12	505:17	6	sp = ( JPEGState * ) cinfo
LVAL	505:12	505:12	7	sp
NAME	505:12	505:12	8	sp
LEAF_NODE	505:12	505:12	9	sp
ASSIGN_OP	505:15	505:15	7	=
LEAF_NODE	505:15	505:15	8	=
RVAL	505:17	505:30	7	( JPEGState * ) cinfo
LEAF_NODE	505:17	505:17	8	(
TYPE_NAME	505:18	505:18	8	JPEGState
LEAF_NODE	505:18	505:18	9	JPEGState
LEAF_NODE	505:27	505:27	8	*
LEAF_NODE	505:28	505:28	8	)
FIELD	505:30	505:30	8	cinfo
LEAF_NODE	505:30	505:30	9	cinfo
LEAF_NODE	505:35	505:35	4	;
EXPR_STATEMENT	508:1	508:53	3	sp -> dest . next_output_byte = ( JOCTET * ) sp -> jpegtables ;
EXPR	508:1	508:1	4	sp -> dest . next_output_byte = ( JOCTET * ) sp -> jpegtables
ASSIGN	508:1	508:29	5	sp -> dest . next_output_byte = ( JOCTET * ) sp -> jpegtables
LVAL	508:1	508:1	6	sp -> dest . next_output_byte
FIELD	508:1	508:10	7	sp -> dest . next_output_byte
LEAF_NODE	508:1	508:1	8	sp
LEAF_NODE	508:3	508:3	8	->
LEAF_NODE	508:5	508:5	8	dest
LEAF_NODE	508:9	508:9	8	.
LEAF_NODE	508:10	508:10	8	next_output_byte
ASSIGN_OP	508:27	508:27	6	=
LEAF_NODE	508:27	508:27	7	=
RVAL	508:29	508:39	6	( JOCTET * ) sp -> jpegtables
LEAF_NODE	508:29	508:29	7	(
TYPE_NAME	508:30	508:30	7	JOCTET
LEAF_NODE	508:30	508:30	8	JOCTET
LEAF_NODE	508:36	508:36	7	*
LEAF_NODE	508:37	508:37	7	)
FIELD	508:39	508:43	7	sp -> jpegtables
LEAF_NODE	508:39	508:39	8	sp
LEAF_NODE	508:41	508:41	8	->
LEAF_NODE	508:43	508:43	8	jpegtables
LEAF_NODE	508:53	508:53	4	;
EXPR_STATEMENT	509:1	509:57	3	sp -> dest . free_in_buffer = ( size_t ) sp -> jpegtables_length ;
EXPR	509:1	509:1	4	sp -> dest . free_in_buffer = ( size_t ) sp -> jpegtables_length
ASSIGN	509:1	509:27	5	sp -> dest . free_in_buffer = ( size_t ) sp -> jpegtables_length
LVAL	509:1	509:1	6	sp -> dest . free_in_buffer
FIELD	509:1	509:10	7	sp -> dest . free_in_buffer
LEAF_NODE	509:1	509:1	8	sp
LEAF_NODE	509:3	509:3	8	->
LEAF_NODE	509:5	509:5	8	dest
LEAF_NODE	509:9	509:9	8	.
LEAF_NODE	509:10	509:10	8	free_in_buffer
ASSIGN_OP	509:25	509:25	6	=
LEAF_NODE	509:25	509:25	7	=
RVAL	509:27	509:36	6	( size_t ) sp -> jpegtables_length
LEAF_NODE	509:27	509:27	7	(
TYPE_NAME	509:28	509:28	7	size_t
LEAF_NODE	509:28	509:28	8	size_t
LEAF_NODE	509:34	509:34	7	)
FIELD	509:36	509:40	7	sp -> jpegtables_length
LEAF_NODE	509:36	509:36	8	sp
LEAF_NODE	509:38	509:38	8	->
LEAF_NODE	509:40	509:40	8	jpegtables_length
LEAF_NODE	509:57	509:57	4	;
LEAF_NODE	510:0	510:0	2	}
FUNCTION_DEF	512:0	528:0	1	
RETURN_TYPE	512:0	512:7	2	static boolean
LEAF_NODE	512:0	512:0	3	static
TYPE_NAME	512:7	512:7	3	boolean
LEAF_NODE	512:7	512:7	4	boolean
FUNCTION_NAME	513:0	513:0	2	tables_empty_output_buffer
LEAF_NODE	513:0	513:0	3	tables_empty_output_buffer
PARAMETER_LIST	513:26	513:47	2	( j_compress_ptr cinfo )
LEAF_NODE	513:26	513:26	3	(
PARAMETER_DECL	513:27	513:42	3	j_compress_ptr cinfo
TYPE	513:27	513:27	4	j_compress_ptr
TYPE_NAME	513:27	513:27	5	j_compress_ptr
LEAF_NODE	513:27	513:27	6	j_compress_ptr
NAME	513:42	513:42	4	cinfo
LEAF_NODE	513:42	513:42	5	cinfo
LEAF_NODE	513:47	513:47	3	)
LEAF_NODE	514:0	514:0	2	{
STATEMENTS	515:1	527:14	2	
SIMPLE_DECL	515:1	515:35	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	515:1	515:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	515:1	515:10	5	JPEGState *
TYPE_NAME	515:1	515:1	6	JPEGState
LEAF_NODE	515:1	515:1	7	JPEGState
POINTER	515:10	515:10	6	*
LEAF_NODE	515:10	515:10	7	*
NAME	515:12	515:12	5	sp
LEAF_NODE	515:12	515:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	515:12	515:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	515:12	515:17	6	sp = ( JPEGState * ) cinfo
LVAL	515:12	515:12	7	sp
NAME	515:12	515:12	8	sp
LEAF_NODE	515:12	515:12	9	sp
ASSIGN_OP	515:15	515:15	7	=
LEAF_NODE	515:15	515:15	8	=
RVAL	515:17	515:30	7	( JPEGState * ) cinfo
LEAF_NODE	515:17	515:17	8	(
TYPE_NAME	515:18	515:18	8	JPEGState
LEAF_NODE	515:18	515:18	9	JPEGState
LEAF_NODE	515:27	515:27	8	*
LEAF_NODE	515:28	515:28	8	)
FIELD	515:30	515:30	8	cinfo
LEAF_NODE	515:30	515:30	9	cinfo
LEAF_NODE	515:35	515:35	4	;
SIMPLE_DECL	516:1	516:13	3	void * newbuf ;
VAR_DECL	516:1	516:7	4	void * newbuf
TYPE	516:1	516:5	5	void *
TYPE_NAME	516:1	516:1	6	void
LEAF_NODE	516:1	516:1	7	void
POINTER	516:5	516:5	6	*
LEAF_NODE	516:5	516:5	7	*
NAME	516:7	516:7	5	newbuf
LEAF_NODE	516:7	516:7	6	newbuf
LEAF_NODE	516:13	516:13	4	;
EXPR_STATEMENT	519:1	520:51	3	newbuf = _TIFFrealloc ( ( void * ) sp -> jpegtables , ( tmsize_t ) ( sp -> jpegtables_length + 1000 ) ) ;
EXPR	519:1	519:1	4	newbuf = _TIFFrealloc ( ( void * ) sp -> jpegtables , ( tmsize_t ) ( sp -> jpegtables_length + 1000 ) )
ASSIGN	519:1	519:10	5	newbuf = _TIFFrealloc ( ( void * ) sp -> jpegtables , ( tmsize_t ) ( sp -> jpegtables_length + 1000 ) )
LVAL	519:1	519:1	6	newbuf
FIELD	519:1	519:1	7	newbuf
LEAF_NODE	519:1	519:1	8	newbuf
ASSIGN_OP	519:8	519:8	6	=
LEAF_NODE	519:8	519:8	7	=
RVAL	519:10	519:10	6	_TIFFrealloc ( ( void * ) sp -> jpegtables , ( tmsize_t ) ( sp -> jpegtables_length + 1000 ) )
FUNCTION_CALL	519:10	520:50	7	_TIFFrealloc ( ( void * ) sp -> jpegtables , ( tmsize_t ) ( sp -> jpegtables_length + 1000 ) )
CALLEE	519:10	519:10	8	_TIFFrealloc
LEAF_NODE	519:10	519:10	9	_TIFFrealloc
LEAF_NODE	519:22	519:22	8	(
ARGUMENT	519:23	519:31	8	( void * ) sp -> jpegtables
LEAF_NODE	519:23	519:23	9	(
TYPE_NAME	519:24	519:24	9	void
LEAF_NODE	519:24	519:24	10	void
LEAF_NODE	519:28	519:28	9	*
LEAF_NODE	519:29	519:29	9	)
FIELD	519:31	519:35	9	sp -> jpegtables
LEAF_NODE	519:31	519:31	10	sp
LEAF_NODE	519:33	519:33	10	->
LEAF_NODE	519:35	519:35	10	jpegtables
LEAF_NODE	519:45	519:45	8	,
ARGUMENT	520:9	520:49	8	( tmsize_t ) ( sp -> jpegtables_length + 1000 )
LEAF_NODE	520:9	520:9	9	(
TYPE_NAME	520:10	520:10	9	tmsize_t
LEAF_NODE	520:10	520:10	10	tmsize_t
LEAF_NODE	520:18	520:18	9	)
LEAF_NODE	520:20	520:20	9	(
FIELD	520:21	520:25	9	sp -> jpegtables_length
LEAF_NODE	520:21	520:21	10	sp
LEAF_NODE	520:23	520:23	10	->
LEAF_NODE	520:25	520:25	10	jpegtables_length
LEAF_NODE	520:43	520:43	9	+
FIELD	520:45	520:45	9	1000
LEAF_NODE	520:45	520:45	10	1000
LEAF_NODE	520:49	520:49	9	)
LEAF_NODE	520:50	520:50	8	)
LEAF_NODE	520:51	520:51	4	;
SELECTION	521:1	522:2	3	
KEYWORD	521:1	521:1	4	if
LEAF_NODE	521:1	521:1	5	if
LEAF_NODE	521:4	521:4	4	(
CONDITION	521:5	521:5	4	newbuf == NULL
EXPR	521:5	521:15	5	newbuf == NULL
FIELD	521:5	521:5	6	newbuf
LEAF_NODE	521:5	521:5	7	newbuf
EQ_OPERATOR	521:12	521:12	6	==
LEAF_NODE	521:12	521:12	7	==
FIELD	521:15	521:15	6	NULL
LEAF_NODE	521:15	521:15	7	NULL
LEAF_NODE	521:19	521:19	4	)
STATEMENTS	522:2	522:2	4	
EXPR_STATEMENT	522:2	522:42	5	ERREXIT1 ( cinfo , JERR_OUT_OF_MEMORY , 100 ) ;
EXPR	522:2	522:2	6	ERREXIT1 ( cinfo , JERR_OUT_OF_MEMORY , 100 )
FUNCTION_CALL	522:2	522:41	7	ERREXIT1 ( cinfo , JERR_OUT_OF_MEMORY , 100 )
CALLEE	522:2	522:2	8	ERREXIT1
LEAF_NODE	522:2	522:2	9	ERREXIT1
LEAF_NODE	522:10	522:10	8	(
ARGUMENT	522:11	522:11	8	cinfo
FIELD	522:11	522:11	9	cinfo
LEAF_NODE	522:11	522:11	10	cinfo
LEAF_NODE	522:16	522:16	8	,
ARGUMENT	522:18	522:18	8	JERR_OUT_OF_MEMORY
FIELD	522:18	522:18	9	JERR_OUT_OF_MEMORY
LEAF_NODE	522:18	522:18	10	JERR_OUT_OF_MEMORY
LEAF_NODE	522:36	522:36	8	,
ARGUMENT	522:38	522:38	8	100
FIELD	522:38	522:38	9	100
LEAF_NODE	522:38	522:38	10	100
LEAF_NODE	522:41	522:41	8	)
LEAF_NODE	522:42	522:42	6	;
EXPR_STATEMENT	523:1	523:69	3	sp -> dest . next_output_byte = ( JOCTET * ) newbuf + sp -> jpegtables_length ;
EXPR	523:1	523:1	4	sp -> dest . next_output_byte = ( JOCTET * ) newbuf + sp -> jpegtables_length
ASSIGN	523:1	523:29	5	sp -> dest . next_output_byte = ( JOCTET * ) newbuf + sp -> jpegtables_length
LVAL	523:1	523:1	6	sp -> dest . next_output_byte
FIELD	523:1	523:10	7	sp -> dest . next_output_byte
LEAF_NODE	523:1	523:1	8	sp
LEAF_NODE	523:3	523:3	8	->
LEAF_NODE	523:5	523:5	8	dest
LEAF_NODE	523:9	523:9	8	.
LEAF_NODE	523:10	523:10	8	next_output_byte
ASSIGN_OP	523:27	523:27	6	=
LEAF_NODE	523:27	523:27	7	=
RVAL	523:29	523:48	6	( JOCTET * ) newbuf + sp -> jpegtables_length
LEAF_NODE	523:29	523:29	7	(
TYPE_NAME	523:30	523:30	7	JOCTET
LEAF_NODE	523:30	523:30	8	JOCTET
LEAF_NODE	523:36	523:36	7	*
LEAF_NODE	523:37	523:37	7	)
FIELD	523:39	523:39	7	newbuf
LEAF_NODE	523:39	523:39	8	newbuf
LEAF_NODE	523:46	523:46	7	+
FIELD	523:48	523:52	7	sp -> jpegtables_length
LEAF_NODE	523:48	523:48	8	sp
LEAF_NODE	523:50	523:50	8	->
LEAF_NODE	523:52	523:52	8	jpegtables_length
LEAF_NODE	523:69	523:69	4	;
EXPR_STATEMENT	524:1	524:40	3	sp -> dest . free_in_buffer = ( size_t ) 1000 ;
EXPR	524:1	524:1	4	sp -> dest . free_in_buffer = ( size_t ) 1000
ASSIGN	524:1	524:27	5	sp -> dest . free_in_buffer = ( size_t ) 1000
LVAL	524:1	524:1	6	sp -> dest . free_in_buffer
FIELD	524:1	524:10	7	sp -> dest . free_in_buffer
LEAF_NODE	524:1	524:1	8	sp
LEAF_NODE	524:3	524:3	8	->
LEAF_NODE	524:5	524:5	8	dest
LEAF_NODE	524:9	524:9	8	.
LEAF_NODE	524:10	524:10	8	free_in_buffer
ASSIGN_OP	524:25	524:25	6	=
LEAF_NODE	524:25	524:25	7	=
RVAL	524:27	524:36	6	( size_t ) 1000
LEAF_NODE	524:27	524:27	7	(
TYPE_NAME	524:28	524:28	7	size_t
LEAF_NODE	524:28	524:28	8	size_t
LEAF_NODE	524:34	524:34	7	)
FIELD	524:36	524:36	7	1000
LEAF_NODE	524:36	524:36	8	1000
LEAF_NODE	524:40	524:40	4	;
EXPR_STATEMENT	525:1	525:24	3	sp -> jpegtables = newbuf ;
EXPR	525:1	525:1	4	sp -> jpegtables = newbuf
ASSIGN	525:1	525:18	5	sp -> jpegtables = newbuf
LVAL	525:1	525:1	6	sp -> jpegtables
FIELD	525:1	525:5	7	sp -> jpegtables
LEAF_NODE	525:1	525:1	8	sp
LEAF_NODE	525:3	525:3	8	->
LEAF_NODE	525:5	525:5	8	jpegtables
ASSIGN_OP	525:16	525:16	6	=
LEAF_NODE	525:16	525:16	7	=
RVAL	525:18	525:18	6	newbuf
FIELD	525:18	525:18	7	newbuf
LEAF_NODE	525:18	525:18	8	newbuf
LEAF_NODE	525:24	525:24	4	;
EXPR_STATEMENT	526:1	526:30	3	sp -> jpegtables_length += 1000 ;
EXPR	526:1	526:1	4	sp -> jpegtables_length += 1000
ASSIGN	526:1	526:26	5	sp -> jpegtables_length += 1000
LVAL	526:1	526:1	6	sp -> jpegtables_length
FIELD	526:1	526:5	7	sp -> jpegtables_length
LEAF_NODE	526:1	526:1	8	sp
LEAF_NODE	526:3	526:3	8	->
LEAF_NODE	526:5	526:5	8	jpegtables_length
ASSIGN_OP	526:23	526:23	6	+=
LEAF_NODE	526:23	526:23	7	+=
RVAL	526:26	526:26	6	1000
FIELD	526:26	526:26	7	1000
LEAF_NODE	526:26	526:26	8	1000
LEAF_NODE	526:30	526:30	4	;
LEAF_NODE	527:1	527:1	3	return
LEAF_NODE	527:8	527:8	3	(
LEAF_NODE	527:9	527:9	3	TRUE
LEAF_NODE	527:13	527:13	3	)
LEAF_NODE	527:14	527:14	3	;
LEAF_NODE	528:0	528:0	2	}
FUNCTION_DEF	530:0	537:0	1	
RETURN_TYPE	530:0	530:7	2	static void
LEAF_NODE	530:0	530:0	3	static
TYPE_NAME	530:7	530:7	3	void
LEAF_NODE	530:7	530:7	4	void
FUNCTION_NAME	531:0	531:0	2	tables_term_destination
LEAF_NODE	531:0	531:0	3	tables_term_destination
PARAMETER_LIST	531:23	531:44	2	( j_compress_ptr cinfo )
LEAF_NODE	531:23	531:23	3	(
PARAMETER_DECL	531:24	531:39	3	j_compress_ptr cinfo
TYPE	531:24	531:24	4	j_compress_ptr
TYPE_NAME	531:24	531:24	5	j_compress_ptr
LEAF_NODE	531:24	531:24	6	j_compress_ptr
NAME	531:39	531:39	4	cinfo
LEAF_NODE	531:39	531:39	5	cinfo
LEAF_NODE	531:44	531:44	3	)
LEAF_NODE	532:0	532:0	2	{
STATEMENTS	533:1	536:1	2	
SIMPLE_DECL	533:1	533:35	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	533:1	533:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	533:1	533:10	5	JPEGState *
TYPE_NAME	533:1	533:1	6	JPEGState
LEAF_NODE	533:1	533:1	7	JPEGState
POINTER	533:10	533:10	6	*
LEAF_NODE	533:10	533:10	7	*
NAME	533:12	533:12	5	sp
LEAF_NODE	533:12	533:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	533:12	533:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	533:12	533:17	6	sp = ( JPEGState * ) cinfo
LVAL	533:12	533:12	7	sp
NAME	533:12	533:12	8	sp
LEAF_NODE	533:12	533:12	9	sp
ASSIGN_OP	533:15	533:15	7	=
LEAF_NODE	533:15	533:15	8	=
RVAL	533:17	533:30	7	( JPEGState * ) cinfo
LEAF_NODE	533:17	533:17	8	(
TYPE_NAME	533:18	533:18	8	JPEGState
LEAF_NODE	533:18	533:18	9	JPEGState
LEAF_NODE	533:27	533:27	8	*
LEAF_NODE	533:28	533:28	8	)
FIELD	533:30	533:30	8	cinfo
LEAF_NODE	533:30	533:30	9	cinfo
LEAF_NODE	533:35	533:35	4	;
EXPR_STATEMENT	536:1	536:58	3	sp -> jpegtables_length -= ( uint32 ) sp -> dest . free_in_buffer ;
EXPR	536:1	536:1	4	sp -> jpegtables_length -= ( uint32 ) sp -> dest . free_in_buffer
ASSIGN	536:1	536:26	5	sp -> jpegtables_length -= ( uint32 ) sp -> dest . free_in_buffer
LVAL	536:1	536:1	6	sp -> jpegtables_length
FIELD	536:1	536:5	7	sp -> jpegtables_length
LEAF_NODE	536:1	536:1	8	sp
LEAF_NODE	536:3	536:3	8	->
LEAF_NODE	536:5	536:5	8	jpegtables_length
ASSIGN_OP	536:23	536:23	6	-=
LEAF_NODE	536:23	536:23	7	-=
RVAL	536:26	536:35	6	( uint32 ) sp -> dest . free_in_buffer
LEAF_NODE	536:26	536:26	7	(
TYPE_NAME	536:27	536:27	7	uint32
LEAF_NODE	536:27	536:27	8	uint32
LEAF_NODE	536:33	536:33	7	)
FIELD	536:35	536:44	7	sp -> dest . free_in_buffer
LEAF_NODE	536:35	536:35	8	sp
LEAF_NODE	536:37	536:37	8	->
LEAF_NODE	536:39	536:39	8	dest
LEAF_NODE	536:43	536:43	8	.
LEAF_NODE	536:44	536:44	8	free_in_buffer
LEAF_NODE	536:58	536:58	4	;
LEAF_NODE	537:0	537:0	2	}
FUNCTION_DEF	539:0	561:0	1	
RETURN_TYPE	539:0	539:7	2	static int
LEAF_NODE	539:0	539:0	3	static
TYPE_NAME	539:7	539:7	3	int
LEAF_NODE	539:7	539:7	4	int
FUNCTION_NAME	540:0	540:0	2	TIFFjpeg_tables_dest
LEAF_NODE	540:0	540:0	3	TIFFjpeg_tables_dest
PARAMETER_LIST	540:20	540:45	2	( JPEGState * sp , TIFF * tif )
LEAF_NODE	540:20	540:20	3	(
PARAMETER_DECL	540:21	540:32	3	JPEGState * sp
TYPE	540:21	540:30	4	JPEGState *
TYPE_NAME	540:21	540:21	5	JPEGState
LEAF_NODE	540:21	540:21	6	JPEGState
POINTER	540:30	540:30	5	*
LEAF_NODE	540:30	540:30	6	*
NAME	540:32	540:32	4	sp
LEAF_NODE	540:32	540:32	5	sp
LEAF_NODE	540:34	540:34	3	,
PARAMETER_DECL	540:36	540:42	3	TIFF * tif
TYPE	540:36	540:40	4	TIFF *
TYPE_NAME	540:36	540:36	5	TIFF
LEAF_NODE	540:36	540:36	6	TIFF
POINTER	540:40	540:40	5	*
LEAF_NODE	540:40	540:40	6	*
NAME	540:42	540:42	4	tif
LEAF_NODE	540:42	540:42	5	tif
LEAF_NODE	540:45	540:45	3	)
LEAF_NODE	541:0	541:0	2	{
STATEMENTS	542:1	560:1	2	
EXPR_STATEMENT	542:1	542:11	3	( void ) tif ;
EXPR	542:1	542:8	4	( void ) tif
LEAF_NODE	542:1	542:1	5	(
TYPE_NAME	542:2	542:2	5	void
LEAF_NODE	542:2	542:2	6	void
LEAF_NODE	542:6	542:6	5	)
FIELD	542:8	542:8	5	tif
LEAF_NODE	542:8	542:8	6	tif
LEAF_NODE	542:11	542:11	4	;
SELECTION	547:1	548:2	3	
KEYWORD	547:1	547:1	4	if
LEAF_NODE	547:1	547:1	5	if
LEAF_NODE	547:4	547:4	4	(
CONDITION	547:5	547:5	4	sp -> jpegtables
EXPR	547:5	547:5	5	sp -> jpegtables
FIELD	547:5	547:9	6	sp -> jpegtables
LEAF_NODE	547:5	547:5	7	sp
LEAF_NODE	547:7	547:7	7	->
LEAF_NODE	547:9	547:9	7	jpegtables
LEAF_NODE	547:19	547:19	4	)
STATEMENTS	548:2	548:2	4	
EXPR_STATEMENT	548:2	548:27	5	_TIFFfree ( sp -> jpegtables ) ;
EXPR	548:2	548:2	6	_TIFFfree ( sp -> jpegtables )
FUNCTION_CALL	548:2	548:26	7	_TIFFfree ( sp -> jpegtables )
CALLEE	548:2	548:2	8	_TIFFfree
LEAF_NODE	548:2	548:2	9	_TIFFfree
LEAF_NODE	548:11	548:11	8	(
ARGUMENT	548:12	548:12	8	sp -> jpegtables
FIELD	548:12	548:16	9	sp -> jpegtables
LEAF_NODE	548:12	548:12	10	sp
LEAF_NODE	548:14	548:14	10	->
LEAF_NODE	548:16	548:16	10	jpegtables
LEAF_NODE	548:26	548:26	8	)
LEAF_NODE	548:27	548:27	6	;
EXPR_STATEMENT	549:1	549:29	3	sp -> jpegtables_length = 1000 ;
EXPR	549:1	549:1	4	sp -> jpegtables_length = 1000
ASSIGN	549:1	549:25	5	sp -> jpegtables_length = 1000
LVAL	549:1	549:1	6	sp -> jpegtables_length
FIELD	549:1	549:5	7	sp -> jpegtables_length
LEAF_NODE	549:1	549:1	8	sp
LEAF_NODE	549:3	549:3	8	->
LEAF_NODE	549:5	549:5	8	jpegtables_length
ASSIGN_OP	549:23	549:23	6	=
LEAF_NODE	549:23	549:23	7	=
RVAL	549:25	549:25	6	1000
FIELD	549:25	549:25	7	1000
LEAF_NODE	549:25	549:25	8	1000
LEAF_NODE	549:29	549:29	4	;
EXPR_STATEMENT	550:1	550:71	3	sp -> jpegtables = ( void * ) _TIFFmalloc ( ( tmsize_t ) sp -> jpegtables_length ) ;
EXPR	550:1	550:1	4	sp -> jpegtables = ( void * ) _TIFFmalloc ( ( tmsize_t ) sp -> jpegtables_length )
ASSIGN	550:1	550:18	5	sp -> jpegtables = ( void * ) _TIFFmalloc ( ( tmsize_t ) sp -> jpegtables_length )
LVAL	550:1	550:1	6	sp -> jpegtables
FIELD	550:1	550:5	7	sp -> jpegtables
LEAF_NODE	550:1	550:1	8	sp
LEAF_NODE	550:3	550:3	8	->
LEAF_NODE	550:5	550:5	8	jpegtables
ASSIGN_OP	550:16	550:16	6	=
LEAF_NODE	550:16	550:16	7	=
RVAL	550:18	550:26	6	( void * ) _TIFFmalloc ( ( tmsize_t ) sp -> jpegtables_length )
LEAF_NODE	550:18	550:18	7	(
TYPE_NAME	550:19	550:19	7	void
LEAF_NODE	550:19	550:19	8	void
LEAF_NODE	550:23	550:23	7	*
LEAF_NODE	550:24	550:24	7	)
FUNCTION_CALL	550:26	550:70	7	_TIFFmalloc ( ( tmsize_t ) sp -> jpegtables_length )
CALLEE	550:26	550:26	8	_TIFFmalloc
LEAF_NODE	550:26	550:26	9	_TIFFmalloc
LEAF_NODE	550:37	550:37	8	(
ARGUMENT	550:38	550:49	8	( tmsize_t ) sp -> jpegtables_length
LEAF_NODE	550:38	550:38	9	(
TYPE_NAME	550:39	550:39	9	tmsize_t
LEAF_NODE	550:39	550:39	10	tmsize_t
LEAF_NODE	550:47	550:47	9	)
FIELD	550:49	550:53	9	sp -> jpegtables_length
LEAF_NODE	550:49	550:49	10	sp
LEAF_NODE	550:51	550:51	10	->
LEAF_NODE	550:53	550:53	10	jpegtables_length
LEAF_NODE	550:70	550:70	8	)
LEAF_NODE	550:71	550:71	4	;
SELECTION	551:1	551:29	3	
KEYWORD	551:1	551:1	4	if
LEAF_NODE	551:1	551:1	5	if
LEAF_NODE	551:4	551:4	4	(
CONDITION	551:5	551:5	4	sp -> jpegtables == NULL
EXPR	551:5	551:23	5	sp -> jpegtables == NULL
FIELD	551:5	551:9	6	sp -> jpegtables
LEAF_NODE	551:5	551:5	7	sp
LEAF_NODE	551:7	551:7	7	->
LEAF_NODE	551:9	551:9	7	jpegtables
EQ_OPERATOR	551:20	551:20	6	==
LEAF_NODE	551:20	551:20	7	==
FIELD	551:23	551:23	6	NULL
LEAF_NODE	551:23	551:23	7	NULL
LEAF_NODE	551:27	551:27	4	)
STATEMENTS	551:29	555:1	4	
LEAF_NODE	551:29	551:29	5	{
STATEMENTS	552:2	554:2	5	
EXPR_STATEMENT	552:2	552:27	6	sp -> jpegtables_length = 0 ;
EXPR	552:2	552:2	7	sp -> jpegtables_length = 0
ASSIGN	552:2	552:26	8	sp -> jpegtables_length = 0
LVAL	552:2	552:2	9	sp -> jpegtables_length
FIELD	552:2	552:6	10	sp -> jpegtables_length
LEAF_NODE	552:2	552:2	11	sp
LEAF_NODE	552:4	552:4	11	->
LEAF_NODE	552:6	552:6	11	jpegtables_length
ASSIGN_OP	552:24	552:24	9	=
LEAF_NODE	552:24	552:24	10	=
RVAL	552:26	552:26	9	0
FIELD	552:26	552:26	10	0
LEAF_NODE	552:26	552:26	11	0
LEAF_NODE	552:27	552:27	7	;
EXPR_STATEMENT	553:2	553:90	6	TIFFErrorExt ( sp -> tif -> tif_clientdata , "TIFFjpeg_tables_dest" , "No space for JPEGTables" ) ;
EXPR	553:2	553:2	7	TIFFErrorExt ( sp -> tif -> tif_clientdata , "TIFFjpeg_tables_dest" , "No space for JPEGTables" )
FUNCTION_CALL	553:2	553:89	8	TIFFErrorExt ( sp -> tif -> tif_clientdata , "TIFFjpeg_tables_dest" , "No space for JPEGTables" )
CALLEE	553:2	553:2	9	TIFFErrorExt
LEAF_NODE	553:2	553:2	10	TIFFErrorExt
LEAF_NODE	553:14	553:14	9	(
ARGUMENT	553:15	553:15	9	sp -> tif -> tif_clientdata
FIELD	553:15	553:24	10	sp -> tif -> tif_clientdata
LEAF_NODE	553:15	553:15	11	sp
LEAF_NODE	553:17	553:17	11	->
LEAF_NODE	553:19	553:19	11	tif
LEAF_NODE	553:22	553:22	11	->
LEAF_NODE	553:24	553:24	11	tif_clientdata
LEAF_NODE	553:38	553:38	9	,
ARGUMENT	553:40	553:40	9	"TIFFjpeg_tables_dest"
FIELD	553:40	553:40	10	"TIFFjpeg_tables_dest"
LEAF_NODE	553:40	553:40	11	"TIFFjpeg_tables_dest"
LEAF_NODE	553:62	553:62	9	,
ARGUMENT	553:64	553:64	9	"No space for JPEGTables"
FIELD	553:64	553:64	10	"No space for JPEGTables"
LEAF_NODE	553:64	553:64	11	"No space for JPEGTables"
LEAF_NODE	553:89	553:89	9	)
LEAF_NODE	553:90	553:90	7	;
JUMP_STATEMENT	554:2	554:12	6	return ( 0 ) ;
KEYWORD	554:2	554:2	7	return
LEAF_NODE	554:2	554:2	8	return
DESTINATION	554:9	554:9	7	( 0 )
EXPR	554:9	554:11	8	( 0 )
LEAF_NODE	554:9	554:9	9	(
FIELD	554:10	554:10	9	0
LEAF_NODE	554:10	554:10	10	0
LEAF_NODE	554:11	554:11	9	)
LEAF_NODE	554:12	554:12	7	;
LEAF_NODE	555:1	555:1	5	}
EXPR_STATEMENT	556:1	556:29	3	sp -> cinfo . c . dest = & sp -> dest ;
EXPR	556:1	556:1	4	sp -> cinfo . c . dest = & sp -> dest
ASSIGN	556:1	556:20	5	sp -> cinfo . c . dest = & sp -> dest
LVAL	556:1	556:1	6	sp -> cinfo . c . dest
FIELD	556:1	556:13	7	sp -> cinfo . c . dest
LEAF_NODE	556:1	556:1	8	sp
LEAF_NODE	556:3	556:3	8	->
LEAF_NODE	556:5	556:5	8	cinfo
LEAF_NODE	556:10	556:10	8	.
LEAF_NODE	556:11	556:11	8	c
LEAF_NODE	556:12	556:12	8	.
LEAF_NODE	556:13	556:13	8	dest
ASSIGN_OP	556:18	556:18	6	=
LEAF_NODE	556:18	556:18	7	=
RVAL	556:20	556:20	6	& sp -> dest
UNARY_EXPR	556:20	556:21	7	& sp -> dest
UNARY_OPERATOR	556:20	556:20	8	&
LEAF_NODE	556:20	556:20	9	&
FIELD	556:21	556:25	8	sp -> dest
LEAF_NODE	556:21	556:21	9	sp
LEAF_NODE	556:23	556:23	9	->
LEAF_NODE	556:25	556:25	9	dest
LEAF_NODE	556:29	556:29	4	;
EXPR_STATEMENT	557:1	557:52	3	sp -> dest . init_destination = tables_init_destination ;
EXPR	557:1	557:1	4	sp -> dest . init_destination = tables_init_destination
ASSIGN	557:1	557:29	5	sp -> dest . init_destination = tables_init_destination
LVAL	557:1	557:1	6	sp -> dest . init_destination
FIELD	557:1	557:10	7	sp -> dest . init_destination
LEAF_NODE	557:1	557:1	8	sp
LEAF_NODE	557:3	557:3	8	->
LEAF_NODE	557:5	557:5	8	dest
LEAF_NODE	557:9	557:9	8	.
LEAF_NODE	557:10	557:10	8	init_destination
ASSIGN_OP	557:27	557:27	6	=
LEAF_NODE	557:27	557:27	7	=
RVAL	557:29	557:29	6	tables_init_destination
FIELD	557:29	557:29	7	tables_init_destination
LEAF_NODE	557:29	557:29	8	tables_init_destination
LEAF_NODE	557:52	557:52	4	;
EXPR_STATEMENT	558:1	558:58	3	sp -> dest . empty_output_buffer = tables_empty_output_buffer ;
EXPR	558:1	558:1	4	sp -> dest . empty_output_buffer = tables_empty_output_buffer
ASSIGN	558:1	558:32	5	sp -> dest . empty_output_buffer = tables_empty_output_buffer
LVAL	558:1	558:1	6	sp -> dest . empty_output_buffer
FIELD	558:1	558:10	7	sp -> dest . empty_output_buffer
LEAF_NODE	558:1	558:1	8	sp
LEAF_NODE	558:3	558:3	8	->
LEAF_NODE	558:5	558:5	8	dest
LEAF_NODE	558:9	558:9	8	.
LEAF_NODE	558:10	558:10	8	empty_output_buffer
ASSIGN_OP	558:30	558:30	6	=
LEAF_NODE	558:30	558:30	7	=
RVAL	558:32	558:32	6	tables_empty_output_buffer
FIELD	558:32	558:32	7	tables_empty_output_buffer
LEAF_NODE	558:32	558:32	8	tables_empty_output_buffer
LEAF_NODE	558:58	558:58	4	;
EXPR_STATEMENT	559:1	559:52	3	sp -> dest . term_destination = tables_term_destination ;
EXPR	559:1	559:1	4	sp -> dest . term_destination = tables_term_destination
ASSIGN	559:1	559:29	5	sp -> dest . term_destination = tables_term_destination
LVAL	559:1	559:1	6	sp -> dest . term_destination
FIELD	559:1	559:10	7	sp -> dest . term_destination
LEAF_NODE	559:1	559:1	8	sp
LEAF_NODE	559:3	559:3	8	->
LEAF_NODE	559:5	559:5	8	dest
LEAF_NODE	559:9	559:9	8	.
LEAF_NODE	559:10	559:10	8	term_destination
ASSIGN_OP	559:27	559:27	6	=
LEAF_NODE	559:27	559:27	7	=
RVAL	559:29	559:29	6	tables_term_destination
FIELD	559:29	559:29	7	tables_term_destination
LEAF_NODE	559:29	559:29	8	tables_term_destination
LEAF_NODE	559:52	559:52	4	;
JUMP_STATEMENT	560:1	560:11	3	return ( 1 ) ;
KEYWORD	560:1	560:1	4	return
LEAF_NODE	560:1	560:1	5	return
DESTINATION	560:8	560:8	4	( 1 )
EXPR	560:8	560:10	5	( 1 )
LEAF_NODE	560:8	560:8	6	(
FIELD	560:9	560:9	6	1
LEAF_NODE	560:9	560:9	7	1
LEAF_NODE	560:10	560:10	6	)
LEAF_NODE	560:11	560:11	4	;
LEAF_NODE	561:0	561:0	2	}
FUNCTION_DEF	568:0	576:0	1	
RETURN_TYPE	568:0	568:7	2	static void
LEAF_NODE	568:0	568:0	3	static
TYPE_NAME	568:7	568:7	3	void
LEAF_NODE	568:7	568:7	4	void
FUNCTION_NAME	569:0	569:0	2	std_init_source
LEAF_NODE	569:0	569:0	3	std_init_source
PARAMETER_LIST	569:15	569:38	2	( j_decompress_ptr cinfo )
LEAF_NODE	569:15	569:15	3	(
PARAMETER_DECL	569:16	569:33	3	j_decompress_ptr cinfo
TYPE	569:16	569:16	4	j_decompress_ptr
TYPE_NAME	569:16	569:16	5	j_decompress_ptr
LEAF_NODE	569:16	569:16	6	j_decompress_ptr
NAME	569:33	569:33	4	cinfo
LEAF_NODE	569:33	569:33	5	cinfo
LEAF_NODE	569:38	569:38	3	)
LEAF_NODE	570:0	570:0	2	{
STATEMENTS	571:1	575:1	2	
SIMPLE_DECL	571:1	571:35	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	571:1	571:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	571:1	571:10	5	JPEGState *
TYPE_NAME	571:1	571:1	6	JPEGState
LEAF_NODE	571:1	571:1	7	JPEGState
POINTER	571:10	571:10	6	*
LEAF_NODE	571:10	571:10	7	*
NAME	571:12	571:12	5	sp
LEAF_NODE	571:12	571:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	571:12	571:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	571:12	571:17	6	sp = ( JPEGState * ) cinfo
LVAL	571:12	571:12	7	sp
NAME	571:12	571:12	8	sp
LEAF_NODE	571:12	571:12	9	sp
ASSIGN_OP	571:15	571:15	7	=
LEAF_NODE	571:15	571:15	8	=
RVAL	571:17	571:30	7	( JPEGState * ) cinfo
LEAF_NODE	571:17	571:17	8	(
TYPE_NAME	571:18	571:18	8	JPEGState
LEAF_NODE	571:18	571:18	9	JPEGState
LEAF_NODE	571:27	571:27	8	*
LEAF_NODE	571:28	571:28	8	)
FIELD	571:30	571:30	8	cinfo
LEAF_NODE	571:30	571:30	9	cinfo
LEAF_NODE	571:35	571:35	4	;
SIMPLE_DECL	572:1	572:20	3	TIFF * tif ; tif = sp -> tif ;
VAR_DECL	572:1	572:7	4	TIFF * tif ; tif = sp -> tif
TYPE	572:1	572:5	5	TIFF *
TYPE_NAME	572:1	572:1	6	TIFF
LEAF_NODE	572:1	572:1	7	TIFF
POINTER	572:5	572:5	6	*
LEAF_NODE	572:5	572:5	7	*
NAME	572:7	572:7	5	tif
LEAF_NODE	572:7	572:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	572:7	572:7	5	tif = sp -> tif
ASSIGN	572:7	572:13	6	tif = sp -> tif
LVAL	572:7	572:7	7	tif
NAME	572:7	572:7	8	tif
LEAF_NODE	572:7	572:7	9	tif
ASSIGN_OP	572:11	572:11	7	=
LEAF_NODE	572:11	572:11	8	=
RVAL	572:13	572:13	7	sp -> tif
FIELD	572:13	572:17	8	sp -> tif
LEAF_NODE	572:13	572:13	9	sp
LEAF_NODE	572:15	572:15	9	->
LEAF_NODE	572:17	572:17	9	tif
LEAF_NODE	572:20	572:20	4	;
EXPR_STATEMENT	574:1	574:59	3	sp -> src . next_input_byte = ( const JOCTET * ) tif -> tif_rawdata ;
EXPR	574:1	574:1	4	sp -> src . next_input_byte = ( const JOCTET * ) tif -> tif_rawdata
ASSIGN	574:1	574:27	5	sp -> src . next_input_byte = ( const JOCTET * ) tif -> tif_rawdata
LVAL	574:1	574:1	6	sp -> src . next_input_byte
FIELD	574:1	574:9	7	sp -> src . next_input_byte
LEAF_NODE	574:1	574:1	8	sp
LEAF_NODE	574:3	574:3	8	->
LEAF_NODE	574:5	574:5	8	src
LEAF_NODE	574:8	574:8	8	.
LEAF_NODE	574:9	574:9	8	next_input_byte
ASSIGN_OP	574:25	574:25	6	=
LEAF_NODE	574:25	574:25	7	=
RVAL	574:27	574:43	6	( const JOCTET * ) tif -> tif_rawdata
LEAF_NODE	574:27	574:27	7	(
TYPE_NAME	574:28	574:34	7	const JOCTET
LEAF_NODE	574:28	574:28	8	const
LEAF_NODE	574:34	574:34	8	JOCTET
LEAF_NODE	574:40	574:40	7	*
LEAF_NODE	574:41	574:41	7	)
FIELD	574:43	574:48	7	tif -> tif_rawdata
LEAF_NODE	574:43	574:43	8	tif
LEAF_NODE	574:46	574:46	8	->
LEAF_NODE	574:48	574:48	8	tif_rawdata
LEAF_NODE	574:59	574:59	4	;
EXPR_STATEMENT	575:1	575:50	3	sp -> src . bytes_in_buffer = ( size_t ) tif -> tif_rawcc ;
EXPR	575:1	575:1	4	sp -> src . bytes_in_buffer = ( size_t ) tif -> tif_rawcc
ASSIGN	575:1	575:27	5	sp -> src . bytes_in_buffer = ( size_t ) tif -> tif_rawcc
LVAL	575:1	575:1	6	sp -> src . bytes_in_buffer
FIELD	575:1	575:9	7	sp -> src . bytes_in_buffer
LEAF_NODE	575:1	575:1	8	sp
LEAF_NODE	575:3	575:3	8	->
LEAF_NODE	575:5	575:5	8	src
LEAF_NODE	575:8	575:8	8	.
LEAF_NODE	575:9	575:9	8	bytes_in_buffer
ASSIGN_OP	575:25	575:25	6	=
LEAF_NODE	575:25	575:25	7	=
RVAL	575:27	575:36	6	( size_t ) tif -> tif_rawcc
LEAF_NODE	575:27	575:27	7	(
TYPE_NAME	575:28	575:28	7	size_t
LEAF_NODE	575:28	575:28	8	size_t
LEAF_NODE	575:34	575:34	7	)
FIELD	575:36	575:41	7	tif -> tif_rawcc
LEAF_NODE	575:36	575:36	8	tif
LEAF_NODE	575:39	575:39	8	->
LEAF_NODE	575:41	575:41	8	tif_rawcc
LEAF_NODE	575:50	575:50	4	;
LEAF_NODE	576:0	576:0	2	}
FUNCTION_DEF	578:0	612:0	1	
RETURN_TYPE	578:0	578:7	2	static boolean
LEAF_NODE	578:0	578:0	3	static
TYPE_NAME	578:7	578:7	3	boolean
LEAF_NODE	578:7	578:7	4	boolean
FUNCTION_NAME	579:0	579:0	2	std_fill_input_buffer
LEAF_NODE	579:0	579:0	3	std_fill_input_buffer
PARAMETER_LIST	579:21	579:44	2	( j_decompress_ptr cinfo )
LEAF_NODE	579:21	579:21	3	(
PARAMETER_DECL	579:22	579:39	3	j_decompress_ptr cinfo
TYPE	579:22	579:22	4	j_decompress_ptr
TYPE_NAME	579:22	579:22	5	j_decompress_ptr
LEAF_NODE	579:22	579:22	6	j_decompress_ptr
NAME	579:39	579:39	4	cinfo
LEAF_NODE	579:39	579:39	5	cinfo
LEAF_NODE	579:44	579:44	3	)
LEAF_NODE	580:0	580:0	2	{
STATEMENTS	581:1	611:14	2	
SIMPLE_DECL	581:1	581:36	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	581:1	581:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	581:1	581:10	5	JPEGState *
TYPE_NAME	581:1	581:1	6	JPEGState
LEAF_NODE	581:1	581:1	7	JPEGState
POINTER	581:10	581:10	6	*
LEAF_NODE	581:10	581:10	7	*
NAME	581:12	581:12	5	sp
LEAF_NODE	581:12	581:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	581:12	581:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	581:12	581:17	6	sp = ( JPEGState * ) cinfo
LVAL	581:12	581:12	7	sp
NAME	581:12	581:12	8	sp
LEAF_NODE	581:12	581:12	9	sp
ASSIGN_OP	581:15	581:15	7	=
LEAF_NODE	581:15	581:15	8	=
RVAL	581:17	581:31	7	( JPEGState * ) cinfo
LEAF_NODE	581:17	581:17	8	(
TYPE_NAME	581:18	581:18	8	JPEGState
LEAF_NODE	581:18	581:18	9	JPEGState
LEAF_NODE	581:27	581:27	8	*
LEAF_NODE	581:29	581:29	8	)
FIELD	581:31	581:31	8	cinfo
LEAF_NODE	581:31	581:31	9	cinfo
LEAF_NODE	581:36	581:36	4	;
LEAF_NODE	582:1	582:1	3	static
LEAF_NODE	582:8	582:8	3	const
LEAF_NODE	582:14	582:14	3	JOCTET
LEAF_NODE	582:21	582:21	3	dummy_EOI
LEAF_NODE	582:30	582:30	3	[
LEAF_NODE	582:31	582:31	3	2
LEAF_NODE	582:32	582:32	3	]
LEAF_NODE	582:34	582:34	3	=
LEAF_NODE	582:36	582:36	3	{
STATEMENTS	582:38	582:44	3	
LEAF_NODE	582:38	582:38	4	0xFF
LEAF_NODE	582:42	582:42	4	,
LEAF_NODE	582:44	582:44	4	JPEG_EOI
LEAF_NODE	582:53	582:53	3	}
LEAF_NODE	582:54	582:54	3	;
SELECTION	594:8	594:42	3	
KEYWORD	594:8	594:8	4	if
LEAF_NODE	594:8	594:8	5	if
LEAF_NODE	594:10	594:10	4	(
CONDITION	594:12	594:12	4	sp -> src . bytes_in_buffer > 0
EXPR	594:12	594:38	5	sp -> src . bytes_in_buffer > 0
FIELD	594:12	594:20	6	sp -> src . bytes_in_buffer
LEAF_NODE	594:12	594:12	7	sp
LEAF_NODE	594:14	594:14	7	->
LEAF_NODE	594:16	594:16	7	src
LEAF_NODE	594:19	594:19	7	.
LEAF_NODE	594:20	594:20	7	bytes_in_buffer
REL_OPERATOR	594:36	594:36	6	>
LEAF_NODE	594:36	594:36	7	>
FIELD	594:38	594:38	6	0
LEAF_NODE	594:38	594:38	7	0
LEAF_NODE	594:40	594:40	4	)
STATEMENTS	594:42	596:8	4	
LEAF_NODE	594:42	594:42	5	{
STATEMENTS	595:12	595:25	5	
LEAF_NODE	595:12	595:12	6	return
LEAF_NODE	595:19	595:19	6	(
LEAF_NODE	595:20	595:20	6	TRUE
LEAF_NODE	595:24	595:24	6	)
LEAF_NODE	595:25	595:25	6	;
LEAF_NODE	596:8	596:8	5	}
EXPR_STATEMENT	607:1	607:29	3	WARNMS ( cinfo , JWRN_JPEG_EOF ) ;
EXPR	607:1	607:1	4	WARNMS ( cinfo , JWRN_JPEG_EOF )
FUNCTION_CALL	607:1	607:28	5	WARNMS ( cinfo , JWRN_JPEG_EOF )
CALLEE	607:1	607:1	6	WARNMS
LEAF_NODE	607:1	607:1	7	WARNMS
LEAF_NODE	607:7	607:7	6	(
ARGUMENT	607:8	607:8	6	cinfo
FIELD	607:8	607:8	7	cinfo
LEAF_NODE	607:8	607:8	8	cinfo
LEAF_NODE	607:13	607:13	6	,
ARGUMENT	607:15	607:15	6	JWRN_JPEG_EOF
FIELD	607:15	607:15	7	JWRN_JPEG_EOF
LEAF_NODE	607:15	607:15	8	JWRN_JPEG_EOF
LEAF_NODE	607:28	607:28	6	)
LEAF_NODE	607:29	607:29	4	;
EXPR_STATEMENT	609:1	609:36	3	sp -> src . next_input_byte = dummy_EOI ;
EXPR	609:1	609:1	4	sp -> src . next_input_byte = dummy_EOI
ASSIGN	609:1	609:27	5	sp -> src . next_input_byte = dummy_EOI
LVAL	609:1	609:1	6	sp -> src . next_input_byte
FIELD	609:1	609:9	7	sp -> src . next_input_byte
LEAF_NODE	609:1	609:1	8	sp
LEAF_NODE	609:3	609:3	8	->
LEAF_NODE	609:5	609:5	8	src
LEAF_NODE	609:8	609:8	8	.
LEAF_NODE	609:9	609:9	8	next_input_byte
ASSIGN_OP	609:25	609:25	6	=
LEAF_NODE	609:25	609:25	7	=
RVAL	609:27	609:27	6	dummy_EOI
FIELD	609:27	609:27	7	dummy_EOI
LEAF_NODE	609:27	609:27	8	dummy_EOI
LEAF_NODE	609:36	609:36	4	;
EXPR_STATEMENT	610:1	610:28	3	sp -> src . bytes_in_buffer = 2 ;
EXPR	610:1	610:1	4	sp -> src . bytes_in_buffer = 2
ASSIGN	610:1	610:27	5	sp -> src . bytes_in_buffer = 2
LVAL	610:1	610:1	6	sp -> src . bytes_in_buffer
FIELD	610:1	610:9	7	sp -> src . bytes_in_buffer
LEAF_NODE	610:1	610:1	8	sp
LEAF_NODE	610:3	610:3	8	->
LEAF_NODE	610:5	610:5	8	src
LEAF_NODE	610:8	610:8	8	.
LEAF_NODE	610:9	610:9	8	bytes_in_buffer
ASSIGN_OP	610:25	610:25	6	=
LEAF_NODE	610:25	610:25	7	=
RVAL	610:27	610:27	6	2
FIELD	610:27	610:27	7	2
LEAF_NODE	610:27	610:27	8	2
LEAF_NODE	610:28	610:28	4	;
LEAF_NODE	611:1	611:1	3	return
LEAF_NODE	611:8	611:8	3	(
LEAF_NODE	611:9	611:9	3	TRUE
LEAF_NODE	611:13	611:13	3	)
LEAF_NODE	611:14	611:14	3	;
LEAF_NODE	612:0	612:0	2	}
FUNCTION_DEF	614:0	628:0	1	
RETURN_TYPE	614:0	614:7	2	static void
LEAF_NODE	614:0	614:0	3	static
TYPE_NAME	614:7	614:7	3	void
LEAF_NODE	614:7	614:7	4	void
FUNCTION_NAME	615:0	615:0	2	std_skip_input_data
LEAF_NODE	615:0	615:0	3	std_skip_input_data
PARAMETER_LIST	615:19	615:58	2	( j_decompress_ptr cinfo , long num_bytes )
LEAF_NODE	615:19	615:19	3	(
PARAMETER_DECL	615:20	615:37	3	j_decompress_ptr cinfo
TYPE	615:20	615:20	4	j_decompress_ptr
TYPE_NAME	615:20	615:20	5	j_decompress_ptr
LEAF_NODE	615:20	615:20	6	j_decompress_ptr
NAME	615:37	615:37	4	cinfo
LEAF_NODE	615:37	615:37	5	cinfo
LEAF_NODE	615:42	615:42	3	,
PARAMETER_DECL	615:44	615:49	3	long num_bytes
TYPE	615:44	615:44	4	long
TYPE_NAME	615:44	615:44	5	long
LEAF_NODE	615:44	615:44	6	long
NAME	615:49	615:49	4	num_bytes
LEAF_NODE	615:49	615:49	5	num_bytes
LEAF_NODE	615:58	615:58	3	)
LEAF_NODE	616:0	616:0	2	{
STATEMENTS	617:1	619:1	2	
SIMPLE_DECL	617:1	617:35	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	617:1	617:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	617:1	617:10	5	JPEGState *
TYPE_NAME	617:1	617:1	6	JPEGState
LEAF_NODE	617:1	617:1	7	JPEGState
POINTER	617:10	617:10	6	*
LEAF_NODE	617:10	617:10	7	*
NAME	617:12	617:12	5	sp
LEAF_NODE	617:12	617:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	617:12	617:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	617:12	617:17	6	sp = ( JPEGState * ) cinfo
LVAL	617:12	617:12	7	sp
NAME	617:12	617:12	8	sp
LEAF_NODE	617:12	617:12	9	sp
ASSIGN_OP	617:15	617:15	7	=
LEAF_NODE	617:15	617:15	8	=
RVAL	617:17	617:30	7	( JPEGState * ) cinfo
LEAF_NODE	617:17	617:17	8	(
TYPE_NAME	617:18	617:18	8	JPEGState
LEAF_NODE	617:18	617:18	9	JPEGState
LEAF_NODE	617:27	617:27	8	*
LEAF_NODE	617:28	617:28	8	)
FIELD	617:30	617:30	8	cinfo
LEAF_NODE	617:30	617:30	9	cinfo
LEAF_NODE	617:35	617:35	4	;
SELECTION	619:1	619:20	3	
KEYWORD	619:1	619:1	4	if
LEAF_NODE	619:1	619:1	5	if
LEAF_NODE	619:4	619:4	4	(
CONDITION	619:5	619:5	4	num_bytes > 0
EXPR	619:5	619:17	5	num_bytes > 0
FIELD	619:5	619:5	6	num_bytes
LEAF_NODE	619:5	619:5	7	num_bytes
REL_OPERATOR	619:15	619:15	6	>
LEAF_NODE	619:15	619:15	7	>
FIELD	619:17	619:17	6	0
LEAF_NODE	619:17	619:17	7	0
LEAF_NODE	619:18	619:18	4	)
STATEMENTS	619:20	627:1	4	
LEAF_NODE	619:20	619:20	5	{
STATEMENTS	620:2	623:4	5	
SELECTION	620:2	620:51	6	
KEYWORD	620:2	620:2	7	if
LEAF_NODE	620:2	620:2	8	if
LEAF_NODE	620:5	620:5	7	(
CONDITION	620:6	620:6	7	( size_t ) num_bytes > sp -> src . bytes_in_buffer
EXPR	620:6	620:26	8	( size_t ) num_bytes > sp -> src . bytes_in_buffer
LEAF_NODE	620:6	620:6	9	(
TYPE_NAME	620:7	620:7	9	size_t
LEAF_NODE	620:7	620:7	10	size_t
LEAF_NODE	620:13	620:13	9	)
FIELD	620:14	620:14	9	num_bytes
LEAF_NODE	620:14	620:14	10	num_bytes
REL_OPERATOR	620:24	620:24	9	>
LEAF_NODE	620:24	620:24	10	>
FIELD	620:26	620:34	9	sp -> src . bytes_in_buffer
LEAF_NODE	620:26	620:26	10	sp
LEAF_NODE	620:28	620:28	10	->
LEAF_NODE	620:30	620:30	10	src
LEAF_NODE	620:33	620:33	10	.
LEAF_NODE	620:34	620:34	10	bytes_in_buffer
LEAF_NODE	620:49	620:49	7	)
STATEMENTS	620:51	623:2	7	
LEAF_NODE	620:51	620:51	8	{
STATEMENTS	622:3	622:3	8	
EXPR_STATEMENT	622:3	622:38	9	( void ) std_fill_input_buffer ( cinfo ) ;
EXPR	622:3	622:10	10	( void ) std_fill_input_buffer ( cinfo )
LEAF_NODE	622:3	622:3	11	(
TYPE_NAME	622:4	622:4	11	void
LEAF_NODE	622:4	622:4	12	void
LEAF_NODE	622:8	622:8	11	)
FUNCTION_CALL	622:10	622:37	11	std_fill_input_buffer ( cinfo )
CALLEE	622:10	622:10	12	std_fill_input_buffer
LEAF_NODE	622:10	622:10	13	std_fill_input_buffer
LEAF_NODE	622:31	622:31	12	(
ARGUMENT	622:32	622:32	12	cinfo
FIELD	622:32	622:32	13	cinfo
LEAF_NODE	622:32	622:32	14	cinfo
LEAF_NODE	622:37	622:37	12	)
LEAF_NODE	622:38	622:38	10	;
LEAF_NODE	623:2	623:2	8	}
SELECTION	623:4	623:9	6	
KEYWORD	623:4	623:4	7	else
LEAF_NODE	623:4	623:4	8	else
STATEMENTS	623:9	626:2	7	
LEAF_NODE	623:9	623:9	8	{
STATEMENTS	624:3	625:3	8	
EXPR_STATEMENT	624:3	624:48	9	sp -> src . next_input_byte += ( size_t ) num_bytes ;
EXPR	624:3	624:3	10	sp -> src . next_input_byte += ( size_t ) num_bytes
ASSIGN	624:3	624:30	11	sp -> src . next_input_byte += ( size_t ) num_bytes
LVAL	624:3	624:3	12	sp -> src . next_input_byte
FIELD	624:3	624:11	13	sp -> src . next_input_byte
LEAF_NODE	624:3	624:3	14	sp
LEAF_NODE	624:5	624:5	14	->
LEAF_NODE	624:7	624:7	14	src
LEAF_NODE	624:10	624:10	14	.
LEAF_NODE	624:11	624:11	14	next_input_byte
ASSIGN_OP	624:27	624:27	12	+=
LEAF_NODE	624:27	624:27	13	+=
RVAL	624:30	624:39	12	( size_t ) num_bytes
LEAF_NODE	624:30	624:30	13	(
TYPE_NAME	624:31	624:31	13	size_t
LEAF_NODE	624:31	624:31	14	size_t
LEAF_NODE	624:37	624:37	13	)
FIELD	624:39	624:39	13	num_bytes
LEAF_NODE	624:39	624:39	14	num_bytes
LEAF_NODE	624:48	624:48	10	;
EXPR_STATEMENT	625:3	625:48	9	sp -> src . bytes_in_buffer -= ( size_t ) num_bytes ;
EXPR	625:3	625:3	10	sp -> src . bytes_in_buffer -= ( size_t ) num_bytes
ASSIGN	625:3	625:30	11	sp -> src . bytes_in_buffer -= ( size_t ) num_bytes
LVAL	625:3	625:3	12	sp -> src . bytes_in_buffer
FIELD	625:3	625:11	13	sp -> src . bytes_in_buffer
LEAF_NODE	625:3	625:3	14	sp
LEAF_NODE	625:5	625:5	14	->
LEAF_NODE	625:7	625:7	14	src
LEAF_NODE	625:10	625:10	14	.
LEAF_NODE	625:11	625:11	14	bytes_in_buffer
ASSIGN_OP	625:27	625:27	12	-=
LEAF_NODE	625:27	625:27	13	-=
RVAL	625:30	625:39	12	( size_t ) num_bytes
LEAF_NODE	625:30	625:30	13	(
TYPE_NAME	625:31	625:31	13	size_t
LEAF_NODE	625:31	625:31	14	size_t
LEAF_NODE	625:37	625:37	13	)
FIELD	625:39	625:39	13	num_bytes
LEAF_NODE	625:39	625:39	14	num_bytes
LEAF_NODE	625:48	625:48	10	;
LEAF_NODE	626:2	626:2	8	}
LEAF_NODE	627:1	627:1	5	}
LEAF_NODE	628:0	628:0	2	}
FUNCTION_DEF	630:0	635:0	1	
RETURN_TYPE	630:0	630:7	2	static void
LEAF_NODE	630:0	630:0	3	static
TYPE_NAME	630:7	630:7	3	void
LEAF_NODE	630:7	630:7	4	void
FUNCTION_NAME	631:0	631:0	2	std_term_source
LEAF_NODE	631:0	631:0	3	std_term_source
PARAMETER_LIST	631:15	631:38	2	( j_decompress_ptr cinfo )
LEAF_NODE	631:15	631:15	3	(
PARAMETER_DECL	631:16	631:33	3	j_decompress_ptr cinfo
TYPE	631:16	631:16	4	j_decompress_ptr
TYPE_NAME	631:16	631:16	5	j_decompress_ptr
LEAF_NODE	631:16	631:16	6	j_decompress_ptr
NAME	631:33	631:33	4	cinfo
LEAF_NODE	631:33	631:33	5	cinfo
LEAF_NODE	631:38	631:38	3	)
LEAF_NODE	632:0	632:0	2	{
STATEMENTS	634:1	634:1	2	
EXPR_STATEMENT	634:1	634:13	3	( void ) cinfo ;
EXPR	634:1	634:8	4	( void ) cinfo
LEAF_NODE	634:1	634:1	5	(
TYPE_NAME	634:2	634:2	5	void
LEAF_NODE	634:2	634:2	6	void
LEAF_NODE	634:6	634:6	5	)
FIELD	634:8	634:8	5	cinfo
LEAF_NODE	634:8	634:8	6	cinfo
LEAF_NODE	634:13	634:13	4	;
LEAF_NODE	635:0	635:0	2	}
FUNCTION_DEF	637:0	648:0	1	
RETURN_TYPE	637:0	637:7	2	static void
LEAF_NODE	637:0	637:0	3	static
TYPE_NAME	637:7	637:7	3	void
LEAF_NODE	637:7	637:7	4	void
FUNCTION_NAME	638:0	638:0	2	TIFFjpeg_data_src
LEAF_NODE	638:0	638:0	3	TIFFjpeg_data_src
PARAMETER_LIST	638:17	638:31	2	( JPEGState * sp )
LEAF_NODE	638:17	638:17	3	(
PARAMETER_DECL	638:18	638:29	3	JPEGState * sp
TYPE	638:18	638:27	4	JPEGState *
TYPE_NAME	638:18	638:18	5	JPEGState
LEAF_NODE	638:18	638:18	6	JPEGState
POINTER	638:27	638:27	5	*
LEAF_NODE	638:27	638:27	6	*
NAME	638:29	638:29	4	sp
LEAF_NODE	638:29	638:29	5	sp
LEAF_NODE	638:31	638:31	3	)
LEAF_NODE	639:0	639:0	2	{
STATEMENTS	640:1	647:1	2	
EXPR_STATEMENT	640:1	640:27	3	sp -> cinfo . d . src = & sp -> src ;
EXPR	640:1	640:1	4	sp -> cinfo . d . src = & sp -> src
ASSIGN	640:1	640:19	5	sp -> cinfo . d . src = & sp -> src
LVAL	640:1	640:1	6	sp -> cinfo . d . src
FIELD	640:1	640:13	7	sp -> cinfo . d . src
LEAF_NODE	640:1	640:1	8	sp
LEAF_NODE	640:3	640:3	8	->
LEAF_NODE	640:5	640:5	8	cinfo
LEAF_NODE	640:10	640:10	8	.
LEAF_NODE	640:11	640:11	8	d
LEAF_NODE	640:12	640:12	8	.
LEAF_NODE	640:13	640:13	8	src
ASSIGN_OP	640:17	640:17	6	=
LEAF_NODE	640:17	640:17	7	=
RVAL	640:19	640:19	6	& sp -> src
UNARY_EXPR	640:19	640:20	7	& sp -> src
UNARY_OPERATOR	640:19	640:19	8	&
LEAF_NODE	640:19	640:19	9	&
FIELD	640:20	640:24	8	sp -> src
LEAF_NODE	640:20	640:20	9	sp
LEAF_NODE	640:22	640:22	9	->
LEAF_NODE	640:24	640:24	9	src
LEAF_NODE	640:27	640:27	4	;
EXPR_STATEMENT	641:1	641:38	3	sp -> src . init_source = std_init_source ;
EXPR	641:1	641:1	4	sp -> src . init_source = std_init_source
ASSIGN	641:1	641:23	5	sp -> src . init_source = std_init_source
LVAL	641:1	641:1	6	sp -> src . init_source
FIELD	641:1	641:9	7	sp -> src . init_source
LEAF_NODE	641:1	641:1	8	sp
LEAF_NODE	641:3	641:3	8	->
LEAF_NODE	641:5	641:5	8	src
LEAF_NODE	641:8	641:8	8	.
LEAF_NODE	641:9	641:9	8	init_source
ASSIGN_OP	641:21	641:21	6	=
LEAF_NODE	641:21	641:21	7	=
RVAL	641:23	641:23	6	std_init_source
FIELD	641:23	641:23	7	std_init_source
LEAF_NODE	641:23	641:23	8	std_init_source
LEAF_NODE	641:38	641:38	4	;
EXPR_STATEMENT	642:1	642:50	3	sp -> src . fill_input_buffer = std_fill_input_buffer ;
EXPR	642:1	642:1	4	sp -> src . fill_input_buffer = std_fill_input_buffer
ASSIGN	642:1	642:29	5	sp -> src . fill_input_buffer = std_fill_input_buffer
LVAL	642:1	642:1	6	sp -> src . fill_input_buffer
FIELD	642:1	642:9	7	sp -> src . fill_input_buffer
LEAF_NODE	642:1	642:1	8	sp
LEAF_NODE	642:3	642:3	8	->
LEAF_NODE	642:5	642:5	8	src
LEAF_NODE	642:8	642:8	8	.
LEAF_NODE	642:9	642:9	8	fill_input_buffer
ASSIGN_OP	642:27	642:27	6	=
LEAF_NODE	642:27	642:27	7	=
RVAL	642:29	642:29	6	std_fill_input_buffer
FIELD	642:29	642:29	7	std_fill_input_buffer
LEAF_NODE	642:29	642:29	8	std_fill_input_buffer
LEAF_NODE	642:50	642:50	4	;
EXPR_STATEMENT	643:1	643:46	3	sp -> src . skip_input_data = std_skip_input_data ;
EXPR	643:1	643:1	4	sp -> src . skip_input_data = std_skip_input_data
ASSIGN	643:1	643:27	5	sp -> src . skip_input_data = std_skip_input_data
LVAL	643:1	643:1	6	sp -> src . skip_input_data
FIELD	643:1	643:9	7	sp -> src . skip_input_data
LEAF_NODE	643:1	643:1	8	sp
LEAF_NODE	643:3	643:3	8	->
LEAF_NODE	643:5	643:5	8	src
LEAF_NODE	643:8	643:8	8	.
LEAF_NODE	643:9	643:9	8	skip_input_data
ASSIGN_OP	643:25	643:25	6	=
LEAF_NODE	643:25	643:25	7	=
RVAL	643:27	643:27	6	std_skip_input_data
FIELD	643:27	643:27	7	std_skip_input_data
LEAF_NODE	643:27	643:27	8	std_skip_input_data
LEAF_NODE	643:46	643:46	4	;
EXPR_STATEMENT	644:1	644:51	3	sp -> src . resync_to_restart = jpeg_resync_to_restart ;
EXPR	644:1	644:1	4	sp -> src . resync_to_restart = jpeg_resync_to_restart
ASSIGN	644:1	644:29	5	sp -> src . resync_to_restart = jpeg_resync_to_restart
LVAL	644:1	644:1	6	sp -> src . resync_to_restart
FIELD	644:1	644:9	7	sp -> src . resync_to_restart
LEAF_NODE	644:1	644:1	8	sp
LEAF_NODE	644:3	644:3	8	->
LEAF_NODE	644:5	644:5	8	src
LEAF_NODE	644:8	644:8	8	.
LEAF_NODE	644:9	644:9	8	resync_to_restart
ASSIGN_OP	644:27	644:27	6	=
LEAF_NODE	644:27	644:27	7	=
RVAL	644:29	644:29	6	jpeg_resync_to_restart
FIELD	644:29	644:29	7	jpeg_resync_to_restart
LEAF_NODE	644:29	644:29	8	jpeg_resync_to_restart
LEAF_NODE	644:51	644:51	4	;
EXPR_STATEMENT	645:1	645:38	3	sp -> src . term_source = std_term_source ;
EXPR	645:1	645:1	4	sp -> src . term_source = std_term_source
ASSIGN	645:1	645:23	5	sp -> src . term_source = std_term_source
LVAL	645:1	645:1	6	sp -> src . term_source
FIELD	645:1	645:9	7	sp -> src . term_source
LEAF_NODE	645:1	645:1	8	sp
LEAF_NODE	645:3	645:3	8	->
LEAF_NODE	645:5	645:5	8	src
LEAF_NODE	645:8	645:8	8	.
LEAF_NODE	645:9	645:9	8	term_source
ASSIGN_OP	645:21	645:21	6	=
LEAF_NODE	645:21	645:21	7	=
RVAL	645:23	645:23	6	std_term_source
FIELD	645:23	645:23	7	std_term_source
LEAF_NODE	645:23	645:23	8	std_term_source
LEAF_NODE	645:38	645:38	4	;
EXPR_STATEMENT	646:1	646:28	3	sp -> src . bytes_in_buffer = 0 ;
EXPR	646:1	646:1	4	sp -> src . bytes_in_buffer = 0
ASSIGN	646:1	646:27	5	sp -> src . bytes_in_buffer = 0
LVAL	646:1	646:1	6	sp -> src . bytes_in_buffer
FIELD	646:1	646:9	7	sp -> src . bytes_in_buffer
LEAF_NODE	646:1	646:1	8	sp
LEAF_NODE	646:3	646:3	8	->
LEAF_NODE	646:5	646:5	8	src
LEAF_NODE	646:8	646:8	8	.
LEAF_NODE	646:9	646:9	8	bytes_in_buffer
ASSIGN_OP	646:25	646:25	6	=
LEAF_NODE	646:25	646:25	7	=
RVAL	646:27	646:27	6	0
FIELD	646:27	646:27	7	0
LEAF_NODE	646:27	646:27	8	0
LEAF_NODE	646:28	646:28	4	;
EXPR_STATEMENT	647:1	647:31	3	sp -> src . next_input_byte = NULL ;
EXPR	647:1	647:1	4	sp -> src . next_input_byte = NULL
ASSIGN	647:1	647:27	5	sp -> src . next_input_byte = NULL
LVAL	647:1	647:1	6	sp -> src . next_input_byte
FIELD	647:1	647:9	7	sp -> src . next_input_byte
LEAF_NODE	647:1	647:1	8	sp
LEAF_NODE	647:3	647:3	8	->
LEAF_NODE	647:5	647:5	8	src
LEAF_NODE	647:8	647:8	8	.
LEAF_NODE	647:9	647:9	8	next_input_byte
ASSIGN_OP	647:25	647:25	6	=
LEAF_NODE	647:25	647:25	7	=
RVAL	647:27	647:27	6	NULL
FIELD	647:27	647:27	7	NULL
LEAF_NODE	647:27	647:27	8	NULL
LEAF_NODE	647:31	647:31	4	;
LEAF_NODE	648:0	648:0	2	}
FUNCTION_DEF	655:0	662:0	1	
RETURN_TYPE	655:0	655:7	2	static void
LEAF_NODE	655:0	655:0	3	static
TYPE_NAME	655:7	655:7	3	void
LEAF_NODE	655:7	655:7	4	void
FUNCTION_NAME	656:0	656:0	2	tables_init_source
LEAF_NODE	656:0	656:0	3	tables_init_source
PARAMETER_LIST	656:18	656:41	2	( j_decompress_ptr cinfo )
LEAF_NODE	656:18	656:18	3	(
PARAMETER_DECL	656:19	656:36	3	j_decompress_ptr cinfo
TYPE	656:19	656:19	4	j_decompress_ptr
TYPE_NAME	656:19	656:19	5	j_decompress_ptr
LEAF_NODE	656:19	656:19	6	j_decompress_ptr
NAME	656:36	656:36	4	cinfo
LEAF_NODE	656:36	656:36	5	cinfo
LEAF_NODE	656:41	656:41	3	)
LEAF_NODE	657:0	657:0	2	{
STATEMENTS	658:1	661:1	2	
SIMPLE_DECL	658:1	658:35	3	JPEGState * sp ; sp = ( JPEGState * ) cinfo ;
VAR_DECL	658:1	658:12	4	JPEGState * sp ; sp = ( JPEGState * ) cinfo
TYPE	658:1	658:10	5	JPEGState *
TYPE_NAME	658:1	658:1	6	JPEGState
LEAF_NODE	658:1	658:1	7	JPEGState
POINTER	658:10	658:10	6	*
LEAF_NODE	658:10	658:10	7	*
NAME	658:12	658:12	5	sp
LEAF_NODE	658:12	658:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	658:12	658:12	5	sp = ( JPEGState * ) cinfo
ASSIGN	658:12	658:17	6	sp = ( JPEGState * ) cinfo
LVAL	658:12	658:12	7	sp
NAME	658:12	658:12	8	sp
LEAF_NODE	658:12	658:12	9	sp
ASSIGN_OP	658:15	658:15	7	=
LEAF_NODE	658:15	658:15	8	=
RVAL	658:17	658:30	7	( JPEGState * ) cinfo
LEAF_NODE	658:17	658:17	8	(
TYPE_NAME	658:18	658:18	8	JPEGState
LEAF_NODE	658:18	658:18	9	JPEGState
LEAF_NODE	658:27	658:27	8	*
LEAF_NODE	658:28	658:28	8	)
FIELD	658:30	658:30	8	cinfo
LEAF_NODE	658:30	658:30	9	cinfo
LEAF_NODE	658:35	658:35	4	;
EXPR_STATEMENT	660:1	660:57	3	sp -> src . next_input_byte = ( const JOCTET * ) sp -> jpegtables ;
EXPR	660:1	660:1	4	sp -> src . next_input_byte = ( const JOCTET * ) sp -> jpegtables
ASSIGN	660:1	660:27	5	sp -> src . next_input_byte = ( const JOCTET * ) sp -> jpegtables
LVAL	660:1	660:1	6	sp -> src . next_input_byte
FIELD	660:1	660:9	7	sp -> src . next_input_byte
LEAF_NODE	660:1	660:1	8	sp
LEAF_NODE	660:3	660:3	8	->
LEAF_NODE	660:5	660:5	8	src
LEAF_NODE	660:8	660:8	8	.
LEAF_NODE	660:9	660:9	8	next_input_byte
ASSIGN_OP	660:25	660:25	6	=
LEAF_NODE	660:25	660:25	7	=
RVAL	660:27	660:43	6	( const JOCTET * ) sp -> jpegtables
LEAF_NODE	660:27	660:27	7	(
TYPE_NAME	660:28	660:34	7	const JOCTET
LEAF_NODE	660:28	660:28	8	const
LEAF_NODE	660:34	660:34	8	JOCTET
LEAF_NODE	660:40	660:40	7	*
LEAF_NODE	660:41	660:41	7	)
FIELD	660:43	660:47	7	sp -> jpegtables
LEAF_NODE	660:43	660:43	8	sp
LEAF_NODE	660:45	660:45	8	->
LEAF_NODE	660:47	660:47	8	jpegtables
LEAF_NODE	660:57	660:57	4	;
EXPR_STATEMENT	661:1	661:57	3	sp -> src . bytes_in_buffer = ( size_t ) sp -> jpegtables_length ;
EXPR	661:1	661:1	4	sp -> src . bytes_in_buffer = ( size_t ) sp -> jpegtables_length
ASSIGN	661:1	661:27	5	sp -> src . bytes_in_buffer = ( size_t ) sp -> jpegtables_length
LVAL	661:1	661:1	6	sp -> src . bytes_in_buffer
FIELD	661:1	661:9	7	sp -> src . bytes_in_buffer
LEAF_NODE	661:1	661:1	8	sp
LEAF_NODE	661:3	661:3	8	->
LEAF_NODE	661:5	661:5	8	src
LEAF_NODE	661:8	661:8	8	.
LEAF_NODE	661:9	661:9	8	bytes_in_buffer
ASSIGN_OP	661:25	661:25	6	=
LEAF_NODE	661:25	661:25	7	=
RVAL	661:27	661:36	6	( size_t ) sp -> jpegtables_length
LEAF_NODE	661:27	661:27	7	(
TYPE_NAME	661:28	661:28	7	size_t
LEAF_NODE	661:28	661:28	8	size_t
LEAF_NODE	661:34	661:34	7	)
FIELD	661:36	661:40	7	sp -> jpegtables_length
LEAF_NODE	661:36	661:36	8	sp
LEAF_NODE	661:38	661:38	8	->
LEAF_NODE	661:40	661:40	8	jpegtables_length
LEAF_NODE	661:57	661:57	4	;
LEAF_NODE	662:0	662:0	2	}
FUNCTION_DEF	664:0	669:0	1	
RETURN_TYPE	664:0	664:7	2	static void
LEAF_NODE	664:0	664:0	3	static
TYPE_NAME	664:7	664:7	3	void
LEAF_NODE	664:7	664:7	4	void
FUNCTION_NAME	665:0	665:0	2	TIFFjpeg_tables_src
LEAF_NODE	665:0	665:0	3	TIFFjpeg_tables_src
PARAMETER_LIST	665:19	665:33	2	( JPEGState * sp )
LEAF_NODE	665:19	665:19	3	(
PARAMETER_DECL	665:20	665:31	3	JPEGState * sp
TYPE	665:20	665:29	4	JPEGState *
TYPE_NAME	665:20	665:20	5	JPEGState
LEAF_NODE	665:20	665:20	6	JPEGState
POINTER	665:29	665:29	5	*
LEAF_NODE	665:29	665:29	6	*
NAME	665:31	665:31	4	sp
LEAF_NODE	665:31	665:31	5	sp
LEAF_NODE	665:33	665:33	3	)
LEAF_NODE	666:0	666:0	2	{
STATEMENTS	667:1	668:1	2	
EXPR_STATEMENT	667:1	667:22	3	TIFFjpeg_data_src ( sp ) ;
EXPR	667:1	667:1	4	TIFFjpeg_data_src ( sp )
FUNCTION_CALL	667:1	667:21	5	TIFFjpeg_data_src ( sp )
CALLEE	667:1	667:1	6	TIFFjpeg_data_src
LEAF_NODE	667:1	667:1	7	TIFFjpeg_data_src
LEAF_NODE	667:18	667:18	6	(
ARGUMENT	667:19	667:19	6	sp
FIELD	667:19	667:19	7	sp
LEAF_NODE	667:19	667:19	8	sp
LEAF_NODE	667:21	667:21	6	)
LEAF_NODE	667:22	667:22	4	;
EXPR_STATEMENT	668:1	668:41	3	sp -> src . init_source = tables_init_source ;
EXPR	668:1	668:1	4	sp -> src . init_source = tables_init_source
ASSIGN	668:1	668:23	5	sp -> src . init_source = tables_init_source
LVAL	668:1	668:1	6	sp -> src . init_source
FIELD	668:1	668:9	7	sp -> src . init_source
LEAF_NODE	668:1	668:1	8	sp
LEAF_NODE	668:3	668:3	8	->
LEAF_NODE	668:5	668:5	8	src
LEAF_NODE	668:8	668:8	8	.
LEAF_NODE	668:9	668:9	8	init_source
ASSIGN_OP	668:21	668:21	6	=
LEAF_NODE	668:21	668:21	7	=
RVAL	668:23	668:23	6	tables_init_source
FIELD	668:23	668:23	7	tables_init_source
LEAF_NODE	668:23	668:23	8	tables_init_source
LEAF_NODE	668:41	668:41	4	;
LEAF_NODE	669:0	669:0	2	}
FUNCTION_DEF	678:0	701:0	1	
RETURN_TYPE	678:0	678:7	2	static int
LEAF_NODE	678:0	678:0	3	static
TYPE_NAME	678:7	678:7	3	int
LEAF_NODE	678:7	678:7	4	int
FUNCTION_NAME	679:0	679:0	2	alloc_downsampled_buffers
LEAF_NODE	679:0	679:0	3	alloc_downsampled_buffers
PARAMETER_LIST	679:25	680:23	2	( TIFF * tif , jpeg_component_info * comp_info , int num_components )
LEAF_NODE	679:25	679:25	3	(
PARAMETER_DECL	679:26	679:32	3	TIFF * tif
TYPE	679:26	679:30	4	TIFF *
TYPE_NAME	679:26	679:26	5	TIFF
LEAF_NODE	679:26	679:26	6	TIFF
POINTER	679:30	679:30	5	*
LEAF_NODE	679:30	679:30	6	*
NAME	679:32	679:32	4	tif
LEAF_NODE	679:32	679:32	5	tif
LEAF_NODE	679:35	679:35	3	,
PARAMETER_DECL	679:37	679:58	3	jpeg_component_info * comp_info
TYPE	679:37	679:56	4	jpeg_component_info *
TYPE_NAME	679:37	679:37	5	jpeg_component_info
LEAF_NODE	679:37	679:37	6	jpeg_component_info
POINTER	679:56	679:56	5	*
LEAF_NODE	679:56	679:56	6	*
NAME	679:58	679:58	4	comp_info
LEAF_NODE	679:58	679:58	5	comp_info
LEAF_NODE	679:67	679:67	3	,
PARAMETER_DECL	680:5	680:9	3	int num_components
TYPE	680:5	680:5	4	int
TYPE_NAME	680:5	680:5	5	int
LEAF_NODE	680:5	680:5	6	int
NAME	680:9	680:9	4	num_components
LEAF_NODE	680:9	680:9	5	num_components
LEAF_NODE	680:23	680:23	3	)
LEAF_NODE	681:0	681:0	2	{
STATEMENTS	682:1	700:1	2	
SIMPLE_DECL	682:1	682:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	682:1	682:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	682:1	682:10	5	JPEGState *
TYPE_NAME	682:1	682:1	6	JPEGState
LEAF_NODE	682:1	682:1	7	JPEGState
POINTER	682:10	682:10	6	*
LEAF_NODE	682:10	682:10	7	*
NAME	682:12	682:12	5	sp
LEAF_NODE	682:12	682:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	682:12	682:12	5	sp = JState ( tif )
ASSIGN	682:12	682:17	6	sp = JState ( tif )
LVAL	682:12	682:12	7	sp
NAME	682:12	682:12	8	sp
LEAF_NODE	682:12	682:12	9	sp
ASSIGN_OP	682:15	682:15	7	=
LEAF_NODE	682:15	682:15	8	=
RVAL	682:17	682:17	7	JState ( tif )
FUNCTION_CALL	682:17	682:27	8	JState ( tif )
CALLEE	682:17	682:17	9	JState
LEAF_NODE	682:17	682:17	10	JState
LEAF_NODE	682:23	682:23	9	(
ARGUMENT	682:24	682:24	9	tif
FIELD	682:24	682:24	10	tif
LEAF_NODE	682:24	682:24	11	tif
LEAF_NODE	682:27	682:27	9	)
LEAF_NODE	682:28	682:28	4	;
SIMPLE_DECL	683:1	683:7	3	int ci ;
VAR_DECL	683:1	683:5	4	int ci
TYPE	683:1	683:1	5	int
TYPE_NAME	683:1	683:1	6	int
LEAF_NODE	683:1	683:1	7	int
NAME	683:5	683:5	5	ci
LEAF_NODE	683:5	683:5	6	ci
LEAF_NODE	683:7	683:7	4	;
SIMPLE_DECL	684:1	684:29	3	jpeg_component_info * compptr ;
VAR_DECL	684:1	684:22	4	jpeg_component_info * compptr
TYPE	684:1	684:20	5	jpeg_component_info *
TYPE_NAME	684:1	684:1	6	jpeg_component_info
LEAF_NODE	684:1	684:1	7	jpeg_component_info
POINTER	684:20	684:20	6	*
LEAF_NODE	684:20	684:20	7	*
NAME	684:22	684:22	5	compptr
LEAF_NODE	684:22	684:22	6	compptr
LEAF_NODE	684:29	684:29	4	;
SIMPLE_DECL	685:1	685:15	3	JSAMPARRAY buf ;
VAR_DECL	685:1	685:12	4	JSAMPARRAY buf
TYPE	685:1	685:1	5	JSAMPARRAY
TYPE_NAME	685:1	685:1	6	JSAMPARRAY
LEAF_NODE	685:1	685:1	7	JSAMPARRAY
NAME	685:12	685:12	5	buf
LEAF_NODE	685:12	685:12	6	buf
LEAF_NODE	685:15	685:15	4	;
SIMPLE_DECL	686:1	686:26	3	int samples_per_clump ; samples_per_clump = 0 ;
VAR_DECL	686:1	686:5	4	int samples_per_clump ; samples_per_clump = 0
TYPE	686:1	686:1	5	int
TYPE_NAME	686:1	686:1	6	int
LEAF_NODE	686:1	686:1	7	int
NAME	686:5	686:5	5	samples_per_clump
LEAF_NODE	686:5	686:5	6	samples_per_clump
LEAF_NODE	0:0	0:0	5	;
INIT	686:5	686:5	5	samples_per_clump = 0
ASSIGN	686:5	686:25	6	samples_per_clump = 0
LVAL	686:5	686:5	7	samples_per_clump
NAME	686:5	686:5	8	samples_per_clump
LEAF_NODE	686:5	686:5	9	samples_per_clump
ASSIGN_OP	686:23	686:23	7	=
LEAF_NODE	686:23	686:23	8	=
RVAL	686:25	686:25	7	0
FIELD	686:25	686:25	8	0
LEAF_NODE	686:25	686:25	9	0
LEAF_NODE	686:26	686:26	4	;
ITERATION	688:1	689:23	3	
KEYWORD	688:1	688:1	4	for
LEAF_NODE	688:1	688:1	5	for
LEAF_NODE	688:5	688:5	4	(
FOR_INIT	688:6	688:33	4	ci = 0 , compptr = comp_info ;
EXPR	688:6	688:14	5	ci = 0 , compptr = comp_info
ASSIGN	688:6	688:11	6	ci = 0
LVAL	688:6	688:6	7	ci
FIELD	688:6	688:6	8	ci
LEAF_NODE	688:6	688:6	9	ci
ASSIGN_OP	688:9	688:9	7	=
LEAF_NODE	688:9	688:9	8	=
RVAL	688:11	688:11	7	0
FIELD	688:11	688:11	8	0
LEAF_NODE	688:11	688:11	9	0
LEAF_NODE	688:12	688:12	6	,
ASSIGN	688:14	688:24	6	compptr = comp_info
LVAL	688:14	688:14	7	compptr
FIELD	688:14	688:14	8	compptr
LEAF_NODE	688:14	688:14	9	compptr
ASSIGN_OP	688:22	688:22	7	=
LEAF_NODE	688:22	688:22	8	=
RVAL	688:24	688:24	7	comp_info
FIELD	688:24	688:24	8	comp_info
LEAF_NODE	688:24	688:24	9	comp_info
LEAF_NODE	688:33	688:33	5	;
CONDITION	688:35	688:35	4	ci < num_components
EXPR	688:35	688:40	5	ci < num_components
FIELD	688:35	688:35	6	ci
LEAF_NODE	688:35	688:35	7	ci
REL_OPERATOR	688:38	688:38	6	<
LEAF_NODE	688:38	688:38	7	<
FIELD	688:40	688:40	6	num_components
LEAF_NODE	688:40	688:40	7	num_components
LEAF_NODE	688:54	688:54	4	;
FOR_EXPR	689:6	689:6	4	ci ++ , compptr ++
EXPR	689:6	689:12	5	ci ++ , compptr ++
FIELD	689:6	689:8	6	ci ++
LEAF_NODE	689:6	689:6	7	ci
LEAF_NODE	689:8	689:8	7	++
LEAF_NODE	689:10	689:10	6	,
FIELD	689:12	689:19	6	compptr ++
LEAF_NODE	689:12	689:12	7	compptr
LEAF_NODE	689:19	689:19	7	++
LEAF_NODE	689:21	689:21	4	)
STATEMENTS	689:23	698:1	4	
LEAF_NODE	689:23	689:23	5	{
STATEMENTS	690:2	697:2	5	
EXPR_STATEMENT	690:2	691:25	6	samples_per_clump += compptr -> h_samp_factor * compptr -> v_samp_factor ;
EXPR	690:2	690:2	7	samples_per_clump += compptr -> h_samp_factor * compptr -> v_samp_factor
ASSIGN	690:2	690:23	8	samples_per_clump += compptr -> h_samp_factor * compptr -> v_samp_factor
LVAL	690:2	690:2	9	samples_per_clump
FIELD	690:2	690:2	10	samples_per_clump
LEAF_NODE	690:2	690:2	11	samples_per_clump
ASSIGN_OP	690:20	690:20	9	+=
LEAF_NODE	690:20	690:20	10	+=
RVAL	690:23	691:3	9	compptr -> h_samp_factor * compptr -> v_samp_factor
FIELD	690:23	690:32	10	compptr -> h_samp_factor
LEAF_NODE	690:23	690:23	11	compptr
LEAF_NODE	690:30	690:30	11	->
LEAF_NODE	690:32	690:32	11	h_samp_factor
LEAF_NODE	690:46	690:46	10	*
FIELD	691:3	691:12	10	compptr -> v_samp_factor
LEAF_NODE	691:3	691:3	11	compptr
LEAF_NODE	691:10	691:10	11	->
LEAF_NODE	691:12	691:12	11	v_samp_factor
LEAF_NODE	691:25	691:25	7	;
EXPR_STATEMENT	692:2	694:50	6	buf = TIFFjpeg_alloc_sarray ( sp , JPOOL_IMAGE , compptr -> width_in_blocks * DCTSIZE , ( JDIMENSION ) ( compptr -> v_samp_factor * DCTSIZE ) ) ;
EXPR	692:2	692:2	7	buf = TIFFjpeg_alloc_sarray ( sp , JPOOL_IMAGE , compptr -> width_in_blocks * DCTSIZE , ( JDIMENSION ) ( compptr -> v_samp_factor * DCTSIZE ) )
ASSIGN	692:2	692:8	8	buf = TIFFjpeg_alloc_sarray ( sp , JPOOL_IMAGE , compptr -> width_in_blocks * DCTSIZE , ( JDIMENSION ) ( compptr -> v_samp_factor * DCTSIZE ) )
LVAL	692:2	692:2	9	buf
FIELD	692:2	692:2	10	buf
LEAF_NODE	692:2	692:2	11	buf
ASSIGN_OP	692:6	692:6	9	=
LEAF_NODE	692:6	692:6	10	=
RVAL	692:8	692:8	9	TIFFjpeg_alloc_sarray ( sp , JPOOL_IMAGE , compptr -> width_in_blocks * DCTSIZE , ( JDIMENSION ) ( compptr -> v_samp_factor * DCTSIZE ) )
FUNCTION_CALL	692:8	694:49	10	TIFFjpeg_alloc_sarray ( sp , JPOOL_IMAGE , compptr -> width_in_blocks * DCTSIZE , ( JDIMENSION ) ( compptr -> v_samp_factor * DCTSIZE ) )
CALLEE	692:8	692:8	11	TIFFjpeg_alloc_sarray
LEAF_NODE	692:8	692:8	12	TIFFjpeg_alloc_sarray
LEAF_NODE	692:29	692:29	11	(
ARGUMENT	692:30	692:30	11	sp
FIELD	692:30	692:30	12	sp
LEAF_NODE	692:30	692:30	13	sp
LEAF_NODE	692:32	692:32	11	,
ARGUMENT	692:34	692:34	11	JPOOL_IMAGE
FIELD	692:34	692:34	12	JPOOL_IMAGE
LEAF_NODE	692:34	692:34	13	JPOOL_IMAGE
LEAF_NODE	692:45	692:45	11	,
ARGUMENT	693:4	693:31	11	compptr -> width_in_blocks * DCTSIZE
FIELD	693:4	693:13	12	compptr -> width_in_blocks
LEAF_NODE	693:4	693:4	13	compptr
LEAF_NODE	693:11	693:11	13	->
LEAF_NODE	693:13	693:13	13	width_in_blocks
LEAF_NODE	693:29	693:29	12	*
FIELD	693:31	693:31	12	DCTSIZE
LEAF_NODE	693:31	693:31	13	DCTSIZE
LEAF_NODE	693:38	693:38	11	,
ARGUMENT	694:4	694:48	11	( JDIMENSION ) ( compptr -> v_samp_factor * DCTSIZE )
LEAF_NODE	694:4	694:4	12	(
TYPE_NAME	694:5	694:5	12	JDIMENSION
LEAF_NODE	694:5	694:5	13	JDIMENSION
LEAF_NODE	694:15	694:15	12	)
LEAF_NODE	694:17	694:17	12	(
FIELD	694:18	694:27	12	compptr -> v_samp_factor
LEAF_NODE	694:18	694:18	13	compptr
LEAF_NODE	694:25	694:25	13	->
LEAF_NODE	694:27	694:27	13	v_samp_factor
LEAF_NODE	694:40	694:40	12	*
FIELD	694:41	694:41	12	DCTSIZE
LEAF_NODE	694:41	694:41	13	DCTSIZE
LEAF_NODE	694:48	694:48	12	)
LEAF_NODE	694:49	694:49	11	)
LEAF_NODE	694:50	694:50	7	;
SELECTION	695:2	696:3	6	
KEYWORD	695:2	695:2	7	if
LEAF_NODE	695:2	695:2	8	if
LEAF_NODE	695:5	695:5	7	(
CONDITION	695:6	695:6	7	buf == NULL
EXPR	695:6	695:13	8	buf == NULL
FIELD	695:6	695:6	9	buf
LEAF_NODE	695:6	695:6	10	buf
EQ_OPERATOR	695:10	695:10	9	==
LEAF_NODE	695:10	695:10	10	==
FIELD	695:13	695:13	9	NULL
LEAF_NODE	695:13	695:13	10	NULL
LEAF_NODE	695:17	695:17	7	)
STATEMENTS	696:3	696:3	7	
JUMP_STATEMENT	696:3	696:13	8	return ( 0 ) ;
KEYWORD	696:3	696:3	9	return
LEAF_NODE	696:3	696:3	10	return
DESTINATION	696:10	696:10	9	( 0 )
EXPR	696:10	696:12	10	( 0 )
LEAF_NODE	696:10	696:10	11	(
FIELD	696:11	696:11	11	0
LEAF_NODE	696:11	696:11	12	0
LEAF_NODE	696:12	696:12	11	)
LEAF_NODE	696:13	696:13	9	;
EXPR_STATEMENT	697:2	697:25	6	sp -> ds_buffer [ ci ] = buf ;
EXPR	697:2	697:2	7	sp -> ds_buffer [ ci ] = buf
ASSIGN	697:2	697:22	8	sp -> ds_buffer [ ci ] = buf
LVAL	697:2	697:2	9	sp -> ds_buffer [ ci ]
FIELD	697:2	697:18	10	sp -> ds_buffer [ ci ]
LEAF_NODE	697:2	697:2	11	sp
LEAF_NODE	697:4	697:4	11	->
LEAF_NODE	697:6	697:6	11	ds_buffer
LEAF_NODE	697:15	697:15	11	[
EXPR	697:16	697:16	11	ci
FIELD	697:16	697:16	12	ci
LEAF_NODE	697:16	697:16	13	ci
LEAF_NODE	697:18	697:18	11	]
ASSIGN_OP	697:20	697:20	9	=
LEAF_NODE	697:20	697:20	10	=
RVAL	697:22	697:22	9	buf
FIELD	697:22	697:22	10	buf
LEAF_NODE	697:22	697:22	11	buf
LEAF_NODE	697:25	697:25	7	;
LEAF_NODE	698:1	698:1	5	}
EXPR_STATEMENT	699:1	699:40	3	sp -> samplesperclump = samples_per_clump ;
EXPR	699:1	699:1	4	sp -> samplesperclump = samples_per_clump
ASSIGN	699:1	699:23	5	sp -> samplesperclump = samples_per_clump
LVAL	699:1	699:1	6	sp -> samplesperclump
FIELD	699:1	699:5	7	sp -> samplesperclump
LEAF_NODE	699:1	699:1	8	sp
LEAF_NODE	699:3	699:3	8	->
LEAF_NODE	699:5	699:5	8	samplesperclump
ASSIGN_OP	699:21	699:21	6	=
LEAF_NODE	699:21	699:21	7	=
RVAL	699:23	699:23	6	samples_per_clump
FIELD	699:23	699:23	7	samples_per_clump
LEAF_NODE	699:23	699:23	8	samples_per_clump
LEAF_NODE	699:40	699:40	4	;
JUMP_STATEMENT	700:1	700:11	3	return ( 1 ) ;
KEYWORD	700:1	700:1	4	return
LEAF_NODE	700:1	700:1	5	return
DESTINATION	700:8	700:8	4	( 1 )
EXPR	700:8	700:10	5	( 1 )
LEAF_NODE	700:8	700:8	6	(
FIELD	700:9	700:9	6	1
LEAF_NODE	700:9	700:9	7	1
LEAF_NODE	700:10	700:10	6	)
LEAF_NODE	700:11	700:11	4	;
LEAF_NODE	701:0	701:0	2	}
SIMPLE_DECL	722:0	732:1	1	struct JPEGFixupTagsSubsamplingData BASE_CLASSES { TIFF * tif ; void * buffer ; uint32 buffersize ; uint8 * buffercurrentbyte ; uint32 bufferbytesleft ; uint64 fileoffset ; uint64 filebytesleft ; uint8 filepositioned ; } ;
CLASS_DEF	722:0	722:0	2	struct JPEGFixupTagsSubsamplingData BASE_CLASSES { TIFF * tif ; void * buffer ; uint32 buffersize ; uint8 * buffercurrentbyte ; uint32 bufferbytesleft ; uint64 fileoffset ; uint64 filebytesleft ; uint8 filepositioned ; }
CLASS_DEF	722:0	732:0	3	struct JPEGFixupTagsSubsamplingData BASE_CLASSES { TIFF * tif ; void * buffer ; uint32 buffersize ; uint8 * buffercurrentbyte ; uint32 bufferbytesleft ; uint64 fileoffset ; uint64 filebytesleft ; uint8 filepositioned ; }
LEAF_NODE	722:0	722:0	4	struct
CLASS_NAME	722:7	722:7	4	JPEGFixupTagsSubsamplingData
LEAF_NODE	722:7	722:7	5	JPEGFixupTagsSubsamplingData
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	723:0	723:0	4	{
CLASS_CONTENT	724:1	731:1	4	TIFF * tif ; void * buffer ; uint32 buffersize ; uint8 * buffercurrentbyte ; uint32 bufferbytesleft ; uint64 fileoffset ; uint64 filebytesleft ; uint8 filepositioned ;
SIMPLE_DECL	724:1	724:10	5	TIFF * tif ;
VAR_DECL	724:1	724:7	6	TIFF * tif
TYPE	724:1	724:5	7	TIFF *
TYPE_NAME	724:1	724:1	8	TIFF
LEAF_NODE	724:1	724:1	9	TIFF
POINTER	724:5	724:5	8	*
LEAF_NODE	724:5	724:5	9	*
NAME	724:7	724:7	7	tif
LEAF_NODE	724:7	724:7	8	tif
LEAF_NODE	724:10	724:10	6	;
SIMPLE_DECL	725:1	725:13	5	void * buffer ;
VAR_DECL	725:1	725:7	6	void * buffer
TYPE	725:1	725:5	7	void *
TYPE_NAME	725:1	725:1	8	void
LEAF_NODE	725:1	725:1	9	void
POINTER	725:5	725:5	8	*
LEAF_NODE	725:5	725:5	9	*
NAME	725:7	725:7	7	buffer
LEAF_NODE	725:7	725:7	8	buffer
LEAF_NODE	725:13	725:13	6	;
SIMPLE_DECL	726:1	726:18	5	uint32 buffersize ;
VAR_DECL	726:1	726:8	6	uint32 buffersize
TYPE	726:1	726:1	7	uint32
TYPE_NAME	726:1	726:1	8	uint32
LEAF_NODE	726:1	726:1	9	uint32
NAME	726:8	726:8	7	buffersize
LEAF_NODE	726:8	726:8	8	buffersize
LEAF_NODE	726:18	726:18	6	;
SIMPLE_DECL	727:1	727:25	5	uint8 * buffercurrentbyte ;
VAR_DECL	727:1	727:8	6	uint8 * buffercurrentbyte
TYPE	727:1	727:6	7	uint8 *
TYPE_NAME	727:1	727:1	8	uint8
LEAF_NODE	727:1	727:1	9	uint8
POINTER	727:6	727:6	8	*
LEAF_NODE	727:6	727:6	9	*
NAME	727:8	727:8	7	buffercurrentbyte
LEAF_NODE	727:8	727:8	8	buffercurrentbyte
LEAF_NODE	727:25	727:25	6	;
SIMPLE_DECL	728:1	728:23	5	uint32 bufferbytesleft ;
VAR_DECL	728:1	728:8	6	uint32 bufferbytesleft
TYPE	728:1	728:1	7	uint32
TYPE_NAME	728:1	728:1	8	uint32
LEAF_NODE	728:1	728:1	9	uint32
NAME	728:8	728:8	7	bufferbytesleft
LEAF_NODE	728:8	728:8	8	bufferbytesleft
LEAF_NODE	728:23	728:23	6	;
SIMPLE_DECL	729:1	729:18	5	uint64 fileoffset ;
VAR_DECL	729:1	729:8	6	uint64 fileoffset
TYPE	729:1	729:1	7	uint64
TYPE_NAME	729:1	729:1	8	uint64
LEAF_NODE	729:1	729:1	9	uint64
NAME	729:8	729:8	7	fileoffset
LEAF_NODE	729:8	729:8	8	fileoffset
LEAF_NODE	729:18	729:18	6	;
SIMPLE_DECL	730:1	730:21	5	uint64 filebytesleft ;
VAR_DECL	730:1	730:8	6	uint64 filebytesleft
TYPE	730:1	730:1	7	uint64
TYPE_NAME	730:1	730:1	8	uint64
LEAF_NODE	730:1	730:1	9	uint64
NAME	730:8	730:8	7	filebytesleft
LEAF_NODE	730:8	730:8	8	filebytesleft
LEAF_NODE	730:21	730:21	6	;
SIMPLE_DECL	731:1	731:21	5	uint8 filepositioned ;
VAR_DECL	731:1	731:7	6	uint8 filepositioned
TYPE	731:1	731:1	7	uint8
TYPE_NAME	731:1	731:1	8	uint8
LEAF_NODE	731:1	731:1	9	uint8
NAME	731:7	731:7	7	filepositioned
LEAF_NODE	731:7	731:7	8	filepositioned
LEAF_NODE	731:21	731:21	6	;
LEAF_NODE	732:0	732:0	4	}
LEAF_NODE	732:1	732:1	2	;
SIMPLE_DECL	733:7	733:47	1	void JPEGFixupTagsSubsampling ; JPEGFixupTagsSubsampling JPEGFixupTagsSubsampling ( TIFF * tif ) ;
VAR_DECL	733:7	733:12	2	void JPEGFixupTagsSubsampling ; JPEGFixupTagsSubsampling JPEGFixupTagsSubsampling ( TIFF * tif )
TYPE	733:7	733:7	3	void
TYPE_NAME	733:7	733:7	4	void
LEAF_NODE	733:7	733:7	5	void
NAME	733:12	733:12	3	JPEGFixupTagsSubsampling
LEAF_NODE	733:12	733:12	4	JPEGFixupTagsSubsampling
LEAF_NODE	0:0	0:0	3	;
INIT	733:12	733:12	3	JPEGFixupTagsSubsampling JPEGFixupTagsSubsampling ( TIFF * tif )
ASSIGN	733:12	733:36	4	JPEGFixupTagsSubsampling JPEGFixupTagsSubsampling ( TIFF * tif )
LVAL	733:12	733:12	5	JPEGFixupTagsSubsampling
NAME	733:12	733:12	6	JPEGFixupTagsSubsampling
LEAF_NODE	733:12	733:12	7	JPEGFixupTagsSubsampling
ASSIGN_OP	733:12	733:12	5	JPEGFixupTagsSubsampling
NAME	733:12	733:12	6	JPEGFixupTagsSubsampling
LEAF_NODE	733:12	733:12	7	JPEGFixupTagsSubsampling
RVAL	733:36	733:46	5	( TIFF * tif )
LEAF_NODE	733:36	733:36	6	(
EXPR	733:37	733:43	6	TIFF * tif
FIELD	733:37	733:37	7	TIFF
LEAF_NODE	733:37	733:37	8	TIFF
LEAF_NODE	733:41	733:41	7	*
FIELD	733:43	733:43	7	tif
LEAF_NODE	733:43	733:43	8	tif
LEAF_NODE	733:46	733:46	6	)
LEAF_NODE	733:47	733:47	2	;
FUNCTION_DEF	741:0	754:0	1	
RETURN_TYPE	741:0	741:7	2	static int
LEAF_NODE	741:0	741:0	3	static
TYPE_NAME	741:7	741:7	3	int
LEAF_NODE	741:7	741:7	4	int
FUNCTION_NAME	742:0	742:0	2	JPEGFixupTags
LEAF_NODE	742:0	742:0	3	JPEGFixupTags
PARAMETER_LIST	742:13	742:23	2	( TIFF * tif )
LEAF_NODE	742:13	742:13	3	(
PARAMETER_DECL	742:14	742:20	3	TIFF * tif
TYPE	742:14	742:18	4	TIFF *
TYPE_NAME	742:14	742:14	5	TIFF
LEAF_NODE	742:14	742:14	6	TIFF
POINTER	742:18	742:18	5	*
LEAF_NODE	742:18	742:18	6	*
NAME	742:20	742:20	4	tif
LEAF_NODE	742:20	742:20	5	tif
LEAF_NODE	742:23	742:23	3	)
LEAF_NODE	743:0	743:0	2	{
STATEMENTS	745:8	753:1	2	
SIMPLE_DECL	745:8	745:35	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	745:8	745:19	4	JPEGState * sp ; sp = JState ( tif )
TYPE	745:8	745:17	5	JPEGState *
TYPE_NAME	745:8	745:8	6	JPEGState
LEAF_NODE	745:8	745:8	7	JPEGState
POINTER	745:17	745:17	6	*
LEAF_NODE	745:17	745:17	7	*
NAME	745:19	745:19	5	sp
LEAF_NODE	745:19	745:19	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	745:19	745:19	5	sp = JState ( tif )
ASSIGN	745:19	745:24	6	sp = JState ( tif )
LVAL	745:19	745:19	7	sp
NAME	745:19	745:19	8	sp
LEAF_NODE	745:19	745:19	9	sp
ASSIGN_OP	745:22	745:22	7	=
LEAF_NODE	745:22	745:22	8	=
RVAL	745:24	745:24	7	JState ( tif )
FUNCTION_CALL	745:24	745:34	8	JState ( tif )
CALLEE	745:24	745:24	9	JState
LEAF_NODE	745:24	745:24	10	JState
LEAF_NODE	745:30	745:30	9	(
ARGUMENT	745:31	745:31	9	tif
FIELD	745:31	745:31	10	tif
LEAF_NODE	745:31	745:31	11	tif
LEAF_NODE	745:34	745:34	9	)
LEAF_NODE	745:35	745:35	4	;
SELECTION	746:1	750:2	3	
KEYWORD	746:1	746:1	4	if
LEAF_NODE	746:1	746:1	5	if
LEAF_NODE	746:4	746:4	4	(
CONDITION	746:5	746:5	4	( tif -> tif_dir . td_photometric == PHOTOMETRIC_YCBCR ) && ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG ) && ( tif -> tif_dir . td_samplesperpixel == 3 ) && ! sp -> ycbcrsampling_fetched
EXPR	746:5	746:5	5	( tif -> tif_dir . td_photometric == PHOTOMETRIC_YCBCR ) && ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG ) && ( tif -> tif_dir . td_samplesperpixel == 3 ) && ! sp -> ycbcrsampling_fetched
AND	746:5	747:5	6	( tif -> tif_dir . td_photometric == PHOTOMETRIC_YCBCR ) && ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG ) && ( tif -> tif_dir . td_samplesperpixel == 3 ) && ! sp -> ycbcrsampling_fetched
EXPR	746:5	746:52	7	( tif -> tif_dir . td_photometric == PHOTOMETRIC_YCBCR )
LEAF_NODE	746:5	746:5	8	(
FIELD	746:6	746:19	8	tif -> tif_dir . td_photometric
LEAF_NODE	746:6	746:6	9	tif
LEAF_NODE	746:9	746:9	9	->
LEAF_NODE	746:11	746:11	9	tif_dir
LEAF_NODE	746:18	746:18	9	.
LEAF_NODE	746:19	746:19	9	td_photometric
EQ_OPERATOR	746:33	746:33	8	==
LEAF_NODE	746:33	746:33	9	==
FIELD	746:35	746:35	8	PHOTOMETRIC_YCBCR
LEAF_NODE	746:35	746:35	9	PHOTOMETRIC_YCBCR
LEAF_NODE	746:52	746:52	8	)
LEAF_NODE	746:53	746:53	7	&&
EXPR	747:5	747:5	7	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG ) && ( tif -> tif_dir . td_samplesperpixel == 3 ) && ! sp -> ycbcrsampling_fetched
AND	747:5	748:5	8	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG ) && ( tif -> tif_dir . td_samplesperpixel == 3 ) && ! sp -> ycbcrsampling_fetched
EXPR	747:5	747:55	9	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG )
LEAF_NODE	747:5	747:5	10	(
FIELD	747:6	747:19	10	tif -> tif_dir . td_planarconfig
LEAF_NODE	747:6	747:6	11	tif
LEAF_NODE	747:9	747:9	11	->
LEAF_NODE	747:11	747:11	11	tif_dir
LEAF_NODE	747:18	747:18	11	.
LEAF_NODE	747:19	747:19	11	td_planarconfig
EQ_OPERATOR	747:34	747:34	10	==
LEAF_NODE	747:34	747:34	11	==
FIELD	747:36	747:36	10	PLANARCONFIG_CONTIG
LEAF_NODE	747:36	747:36	11	PLANARCONFIG_CONTIG
LEAF_NODE	747:55	747:55	10	)
LEAF_NODE	747:56	747:56	9	&&
EXPR	748:5	748:5	9	( tif -> tif_dir . td_samplesperpixel == 3 ) && ! sp -> ycbcrsampling_fetched
AND	748:5	749:12	10	( tif -> tif_dir . td_samplesperpixel == 3 ) && ! sp -> ycbcrsampling_fetched
EXPR	748:5	748:40	11	( tif -> tif_dir . td_samplesperpixel == 3 )
LEAF_NODE	748:5	748:5	12	(
FIELD	748:6	748:19	12	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	748:6	748:6	13	tif
LEAF_NODE	748:9	748:9	13	->
LEAF_NODE	748:11	748:11	13	tif_dir
LEAF_NODE	748:18	748:18	13	.
LEAF_NODE	748:19	748:19	13	td_samplesperpixel
EQ_OPERATOR	748:37	748:37	12	==
LEAF_NODE	748:37	748:37	13	==
FIELD	748:39	748:39	12	3
LEAF_NODE	748:39	748:39	13	3
LEAF_NODE	748:40	748:40	12	)
LEAF_NODE	748:42	748:42	11	&&
EXPR	749:12	749:12	11	! sp -> ycbcrsampling_fetched
UNARY_EXPR	749:12	749:13	12	! sp -> ycbcrsampling_fetched
UNARY_OPERATOR	749:12	749:12	13	!
LEAF_NODE	749:12	749:12	14	!
FIELD	749:13	749:17	13	sp -> ycbcrsampling_fetched
LEAF_NODE	749:13	749:13	14	sp
LEAF_NODE	749:15	749:15	14	->
LEAF_NODE	749:17	749:17	14	ycbcrsampling_fetched
LEAF_NODE	749:38	749:38	4	)
STATEMENTS	750:2	750:2	4	
EXPR_STATEMENT	750:2	750:31	5	JPEGFixupTagsSubsampling ( tif ) ;
EXPR	750:2	750:2	6	JPEGFixupTagsSubsampling ( tif )
FUNCTION_CALL	750:2	750:30	7	JPEGFixupTagsSubsampling ( tif )
CALLEE	750:2	750:2	8	JPEGFixupTagsSubsampling
LEAF_NODE	750:2	750:2	9	JPEGFixupTagsSubsampling
LEAF_NODE	750:26	750:26	8	(
ARGUMENT	750:27	750:27	8	tif
FIELD	750:27	750:27	9	tif
LEAF_NODE	750:27	750:27	10	tif
LEAF_NODE	750:30	750:30	8	)
LEAF_NODE	750:31	750:31	6	;
JUMP_STATEMENT	753:1	753:10	3	return ( 1 ) ;
KEYWORD	753:1	753:1	4	return
LEAF_NODE	753:1	753:1	5	return
DESTINATION	753:7	753:7	4	( 1 )
EXPR	753:7	753:9	5	( 1 )
LEAF_NODE	753:7	753:7	6	(
FIELD	753:8	753:8	6	1
LEAF_NODE	753:8	753:8	7	1
LEAF_NODE	753:9	753:9	6	)
LEAF_NODE	753:10	753:10	4	;
LEAF_NODE	754:0	754:0	2	}
FUNCTION_DEF	758:0	811:0	1	
RETURN_TYPE	758:0	758:7	2	static void
LEAF_NODE	758:0	758:0	3	static
TYPE_NAME	758:7	758:7	3	void
LEAF_NODE	758:7	758:7	4	void
FUNCTION_NAME	759:0	759:0	2	JPEGFixupTagsSubsampling
LEAF_NODE	759:0	759:0	3	JPEGFixupTagsSubsampling
PARAMETER_LIST	759:24	759:34	2	( TIFF * tif )
LEAF_NODE	759:24	759:24	3	(
PARAMETER_DECL	759:25	759:31	3	TIFF * tif
TYPE	759:25	759:29	4	TIFF *
TYPE_NAME	759:25	759:25	5	TIFF
LEAF_NODE	759:25	759:25	6	TIFF
POINTER	759:29	759:29	5	*
LEAF_NODE	759:29	759:29	6	*
NAME	759:31	759:31	4	tif
LEAF_NODE	759:31	759:31	5	tif
LEAF_NODE	759:34	759:34	3	)
LEAF_NODE	760:0	760:0	2	{
STATEMENTS	781:1	810:1	2	
LEAF_NODE	781:1	781:1	3	static
SIMPLE_DECL	781:8	781:56	3	const char [ ] module ; module = "JPEGFixupTagsSubsampling" ;
VAR_DECL	781:8	781:19	4	const char [ ] module ; module = "JPEGFixupTagsSubsampling"
TYPE	781:8	781:25	5	const char [ ]
TYPE_NAME	781:8	781:14	6	const char
LEAF_NODE	781:8	781:8	7	const
LEAF_NODE	781:14	781:14	7	char
TYPE_SUFFIX	781:25	781:26	6	[ ]
LEAF_NODE	781:25	781:25	7	[
LEAF_NODE	781:26	781:26	7	]
NAME	781:19	781:19	5	module
LEAF_NODE	781:19	781:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	781:19	781:19	5	module = "JPEGFixupTagsSubsampling"
ASSIGN	781:19	781:30	6	module = "JPEGFixupTagsSubsampling"
LVAL	781:19	781:19	7	module
NAME	781:19	781:19	8	module
LEAF_NODE	781:19	781:19	9	module
ASSIGN_OP	781:28	781:28	7	=
LEAF_NODE	781:28	781:28	8	=
RVAL	781:30	781:30	7	"JPEGFixupTagsSubsampling"
FIELD	781:30	781:30	8	"JPEGFixupTagsSubsampling"
LEAF_NODE	781:30	781:30	9	"JPEGFixupTagsSubsampling"
LEAF_NODE	781:56	781:56	4	;
SIMPLE_DECL	782:1	782:38	3	struct JPEGFixupTagsSubsamplingData m ;
VAR_DECL	782:1	782:37	4	struct JPEGFixupTagsSubsamplingData m
TYPE	782:1	782:1	5	struct JPEGFixupTagsSubsamplingData
TYPE_NAME	782:1	782:8	6	struct JPEGFixupTagsSubsamplingData
LEAF_NODE	782:1	782:1	7	struct
LEAF_NODE	782:8	782:8	7	JPEGFixupTagsSubsamplingData
NAME	782:37	782:37	5	m
LEAF_NODE	782:37	782:37	6	m
LEAF_NODE	782:38	782:38	4	;
SIMPLE_DECL	783:8	783:55	3	uint64 fileoffset ; fileoffset = TIFFGetStrileOffset ( tif , 0 ) ;
VAR_DECL	783:8	783:15	4	uint64 fileoffset ; fileoffset = TIFFGetStrileOffset ( tif , 0 )
TYPE	783:8	783:8	5	uint64
TYPE_NAME	783:8	783:8	6	uint64
LEAF_NODE	783:8	783:8	7	uint64
NAME	783:15	783:15	5	fileoffset
LEAF_NODE	783:15	783:15	6	fileoffset
LEAF_NODE	0:0	0:0	5	;
INIT	783:15	783:15	5	fileoffset = TIFFGetStrileOffset ( tif , 0 )
ASSIGN	783:15	783:28	6	fileoffset = TIFFGetStrileOffset ( tif , 0 )
LVAL	783:15	783:15	7	fileoffset
NAME	783:15	783:15	8	fileoffset
LEAF_NODE	783:15	783:15	9	fileoffset
ASSIGN_OP	783:26	783:26	7	=
LEAF_NODE	783:26	783:26	8	=
RVAL	783:28	783:28	7	TIFFGetStrileOffset ( tif , 0 )
FUNCTION_CALL	783:28	783:54	8	TIFFGetStrileOffset ( tif , 0 )
CALLEE	783:28	783:28	9	TIFFGetStrileOffset
LEAF_NODE	783:28	783:28	10	TIFFGetStrileOffset
LEAF_NODE	783:47	783:47	9	(
ARGUMENT	783:48	783:48	9	tif
FIELD	783:48	783:48	10	tif
LEAF_NODE	783:48	783:48	11	tif
LEAF_NODE	783:51	783:51	9	,
ARGUMENT	783:53	783:53	9	0
FIELD	783:53	783:53	10	0
LEAF_NODE	783:53	783:53	11	0
LEAF_NODE	783:54	783:54	9	)
LEAF_NODE	783:55	783:55	4	;
SELECTION	785:8	786:8	3	
KEYWORD	785:8	785:8	4	if
LEAF_NODE	785:8	785:8	5	if
LEAF_NODE	785:10	785:10	4	(
CONDITION	785:12	785:12	4	fileoffset == 0
EXPR	785:12	785:26	5	fileoffset == 0
FIELD	785:12	785:12	6	fileoffset
LEAF_NODE	785:12	785:12	7	fileoffset
EQ_OPERATOR	785:23	785:23	6	==
LEAF_NODE	785:23	785:23	7	==
FIELD	785:26	785:26	6	0
LEAF_NODE	785:26	785:26	7	0
LEAF_NODE	785:28	785:28	4	)
STATEMENTS	786:8	791:8	4	
LEAF_NODE	786:8	786:8	5	{
STATEMENTS	790:12	790:12	5	
JUMP_STATEMENT	790:12	790:18	6	return DESTINATION ;
KEYWORD	790:12	790:12	7	return
LEAF_NODE	790:12	790:12	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	790:18	790:18	7	;
LEAF_NODE	791:8	791:8	5	}
EXPR_STATEMENT	793:1	793:10	3	m . tif = tif ;
EXPR	793:1	793:1	4	m . tif = tif
ASSIGN	793:1	793:7	5	m . tif = tif
LVAL	793:1	793:1	6	m . tif
FIELD	793:1	793:3	7	m . tif
LEAF_NODE	793:1	793:1	8	m
LEAF_NODE	793:2	793:2	8	.
LEAF_NODE	793:3	793:3	8	tif
ASSIGN_OP	793:6	793:6	6	=
LEAF_NODE	793:6	793:6	7	=
RVAL	793:7	793:7	6	tif
FIELD	793:7	793:7	7	tif
LEAF_NODE	793:7	793:7	8	tif
LEAF_NODE	793:10	793:10	4	;
EXPR_STATEMENT	794:1	794:18	3	m . buffersize = 2048 ;
EXPR	794:1	794:1	4	m . buffersize = 2048
ASSIGN	794:1	794:14	5	m . buffersize = 2048
LVAL	794:1	794:1	6	m . buffersize
FIELD	794:1	794:3	7	m . buffersize
LEAF_NODE	794:1	794:1	8	m
LEAF_NODE	794:2	794:2	8	.
LEAF_NODE	794:3	794:3	8	buffersize
ASSIGN_OP	794:13	794:13	6	=
LEAF_NODE	794:13	794:13	7	=
RVAL	794:14	794:14	6	2048
FIELD	794:14	794:14	7	2048
LEAF_NODE	794:14	794:14	8	2048
LEAF_NODE	794:18	794:18	4	;
EXPR_STATEMENT	795:1	795:35	3	m . buffer = _TIFFmalloc ( m . buffersize ) ;
EXPR	795:1	795:1	4	m . buffer = _TIFFmalloc ( m . buffersize )
ASSIGN	795:1	795:10	5	m . buffer = _TIFFmalloc ( m . buffersize )
LVAL	795:1	795:1	6	m . buffer
FIELD	795:1	795:3	7	m . buffer
LEAF_NODE	795:1	795:1	8	m
LEAF_NODE	795:2	795:2	8	.
LEAF_NODE	795:3	795:3	8	buffer
ASSIGN_OP	795:9	795:9	6	=
LEAF_NODE	795:9	795:9	7	=
RVAL	795:10	795:10	6	_TIFFmalloc ( m . buffersize )
FUNCTION_CALL	795:10	795:34	7	_TIFFmalloc ( m . buffersize )
CALLEE	795:10	795:10	8	_TIFFmalloc
LEAF_NODE	795:10	795:10	9	_TIFFmalloc
LEAF_NODE	795:21	795:21	8	(
ARGUMENT	795:22	795:22	8	m . buffersize
FIELD	795:22	795:24	9	m . buffersize
LEAF_NODE	795:22	795:22	10	m
LEAF_NODE	795:23	795:23	10	.
LEAF_NODE	795:24	795:24	10	buffersize
LEAF_NODE	795:34	795:34	8	)
LEAF_NODE	795:35	795:35	4	;
SELECTION	796:1	797:1	3	
KEYWORD	796:1	796:1	4	if
LEAF_NODE	796:1	796:1	5	if
LEAF_NODE	796:4	796:4	4	(
CONDITION	796:5	796:5	4	m . buffer == NULL
EXPR	796:5	796:15	5	m . buffer == NULL
FIELD	796:5	796:7	6	m . buffer
LEAF_NODE	796:5	796:5	7	m
LEAF_NODE	796:6	796:6	7	.
LEAF_NODE	796:7	796:7	7	buffer
EQ_OPERATOR	796:13	796:13	6	==
LEAF_NODE	796:13	796:13	7	==
FIELD	796:15	796:15	6	NULL
LEAF_NODE	796:15	796:15	7	NULL
LEAF_NODE	796:19	796:19	4	)
STATEMENTS	797:1	801:1	4	
LEAF_NODE	797:1	797:1	5	{
STATEMENTS	798:2	800:2	5	
EXPR_STATEMENT	798:2	799:101	6	TIFFWarningExt ( tif -> tif_clientdata , module , "Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped" ) ;
EXPR	798:2	798:2	7	TIFFWarningExt ( tif -> tif_clientdata , module , "Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped" )
FUNCTION_CALL	798:2	799:100	8	TIFFWarningExt ( tif -> tif_clientdata , module , "Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped" )
CALLEE	798:2	798:2	9	TIFFWarningExt
LEAF_NODE	798:2	798:2	10	TIFFWarningExt
LEAF_NODE	798:16	798:16	9	(
ARGUMENT	798:17	798:17	9	tif -> tif_clientdata
FIELD	798:17	798:22	10	tif -> tif_clientdata
LEAF_NODE	798:17	798:17	11	tif
LEAF_NODE	798:20	798:20	11	->
LEAF_NODE	798:22	798:22	11	tif_clientdata
LEAF_NODE	798:36	798:36	9	,
ARGUMENT	798:37	798:37	9	module
FIELD	798:37	798:37	10	module
LEAF_NODE	798:37	798:37	11	module
LEAF_NODE	798:43	798:43	9	,
ARGUMENT	799:6	799:6	9	"Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped"
FIELD	799:6	799:6	10	"Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped"
LEAF_NODE	799:6	799:6	11	"Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped"
LEAF_NODE	799:100	799:100	9	)
LEAF_NODE	799:101	799:101	7	;
JUMP_STATEMENT	800:2	800:8	6	return DESTINATION ;
KEYWORD	800:2	800:2	7	return
LEAF_NODE	800:2	800:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	800:8	800:8	7	;
LEAF_NODE	801:1	801:1	5	}
EXPR_STATEMENT	802:1	802:25	3	m . buffercurrentbyte = NULL ;
EXPR	802:1	802:1	4	m . buffercurrentbyte = NULL
ASSIGN	802:1	802:21	5	m . buffercurrentbyte = NULL
LVAL	802:1	802:1	6	m . buffercurrentbyte
FIELD	802:1	802:3	7	m . buffercurrentbyte
LEAF_NODE	802:1	802:1	8	m
LEAF_NODE	802:2	802:2	8	.
LEAF_NODE	802:3	802:3	8	buffercurrentbyte
ASSIGN_OP	802:20	802:20	6	=
LEAF_NODE	802:20	802:20	7	=
RVAL	802:21	802:21	6	NULL
FIELD	802:21	802:21	7	NULL
LEAF_NODE	802:21	802:21	8	NULL
LEAF_NODE	802:25	802:25	4	;
EXPR_STATEMENT	803:1	803:20	3	m . bufferbytesleft = 0 ;
EXPR	803:1	803:1	4	m . bufferbytesleft = 0
ASSIGN	803:1	803:19	5	m . bufferbytesleft = 0
LVAL	803:1	803:1	6	m . bufferbytesleft
FIELD	803:1	803:3	7	m . bufferbytesleft
LEAF_NODE	803:1	803:1	8	m
LEAF_NODE	803:2	803:2	8	.
LEAF_NODE	803:3	803:3	8	bufferbytesleft
ASSIGN_OP	803:18	803:18	6	=
LEAF_NODE	803:18	803:18	7	=
RVAL	803:19	803:19	6	0
FIELD	803:19	803:19	7	0
LEAF_NODE	803:19	803:19	8	0
LEAF_NODE	803:20	803:20	4	;
EXPR_STATEMENT	804:1	804:24	3	m . fileoffset = fileoffset ;
EXPR	804:1	804:1	4	m . fileoffset = fileoffset
ASSIGN	804:1	804:14	5	m . fileoffset = fileoffset
LVAL	804:1	804:1	6	m . fileoffset
FIELD	804:1	804:3	7	m . fileoffset
LEAF_NODE	804:1	804:1	8	m
LEAF_NODE	804:2	804:2	8	.
LEAF_NODE	804:3	804:3	8	fileoffset
ASSIGN_OP	804:13	804:13	6	=
LEAF_NODE	804:13	804:13	7	=
RVAL	804:14	804:14	6	fileoffset
FIELD	804:14	804:14	7	fileoffset
LEAF_NODE	804:14	804:14	8	fileoffset
LEAF_NODE	804:24	804:24	4	;
EXPR_STATEMENT	805:1	805:19	3	m . filepositioned = 0 ;
EXPR	805:1	805:1	4	m . filepositioned = 0
ASSIGN	805:1	805:18	5	m . filepositioned = 0
LVAL	805:1	805:1	6	m . filepositioned
FIELD	805:1	805:3	7	m . filepositioned
LEAF_NODE	805:1	805:1	8	m
LEAF_NODE	805:2	805:2	8	.
LEAF_NODE	805:3	805:3	8	filepositioned
ASSIGN_OP	805:17	805:17	6	=
LEAF_NODE	805:17	805:17	7	=
RVAL	805:18	805:18	6	0
FIELD	805:18	805:18	7	0
LEAF_NODE	805:18	805:18	8	0
LEAF_NODE	805:19	805:19	4	;
EXPR_STATEMENT	806:1	806:47	3	m . filebytesleft = TIFFGetStrileByteCount ( tif , 0 ) ;
EXPR	806:1	806:1	4	m . filebytesleft = TIFFGetStrileByteCount ( tif , 0 )
ASSIGN	806:1	806:17	5	m . filebytesleft = TIFFGetStrileByteCount ( tif , 0 )
LVAL	806:1	806:1	6	m . filebytesleft
FIELD	806:1	806:3	7	m . filebytesleft
LEAF_NODE	806:1	806:1	8	m
LEAF_NODE	806:2	806:2	8	.
LEAF_NODE	806:3	806:3	8	filebytesleft
ASSIGN_OP	806:16	806:16	6	=
LEAF_NODE	806:16	806:16	7	=
RVAL	806:17	806:17	6	TIFFGetStrileByteCount ( tif , 0 )
FUNCTION_CALL	806:17	806:46	7	TIFFGetStrileByteCount ( tif , 0 )
CALLEE	806:17	806:17	8	TIFFGetStrileByteCount
LEAF_NODE	806:17	806:17	9	TIFFGetStrileByteCount
LEAF_NODE	806:39	806:39	8	(
ARGUMENT	806:40	806:40	8	tif
FIELD	806:40	806:40	9	tif
LEAF_NODE	806:40	806:40	10	tif
LEAF_NODE	806:43	806:43	8	,
ARGUMENT	806:45	806:45	8	0
FIELD	806:45	806:45	9	0
LEAF_NODE	806:45	806:45	10	0
LEAF_NODE	806:46	806:46	8	)
LEAF_NODE	806:47	806:47	4	;
SELECTION	807:1	808:2	3	
KEYWORD	807:1	807:1	4	if
LEAF_NODE	807:1	807:1	5	if
LEAF_NODE	807:4	807:4	4	(
CONDITION	807:5	807:5	4	! JPEGFixupTagsSubsamplingSec ( & m )
EXPR	807:5	807:5	5	! JPEGFixupTagsSubsamplingSec ( & m )
UNARY_EXPR	807:5	807:6	6	! JPEGFixupTagsSubsamplingSec ( & m )
UNARY_OPERATOR	807:5	807:5	7	!
LEAF_NODE	807:5	807:5	8	!
FUNCTION_CALL	807:6	807:36	7	JPEGFixupTagsSubsamplingSec ( & m )
CALLEE	807:6	807:6	8	JPEGFixupTagsSubsamplingSec
LEAF_NODE	807:6	807:6	9	JPEGFixupTagsSubsamplingSec
LEAF_NODE	807:33	807:33	8	(
ARGUMENT	807:34	807:34	8	& m
UNARY_EXPR	807:34	807:35	9	& m
UNARY_OPERATOR	807:34	807:34	10	&
LEAF_NODE	807:34	807:34	11	&
FIELD	807:35	807:35	10	m
LEAF_NODE	807:35	807:35	11	m
LEAF_NODE	807:36	807:36	8	)
LEAF_NODE	807:37	807:37	4	)
STATEMENTS	808:2	808:2	4	
EXPR_STATEMENT	808:2	809:132	5	TIFFWarningExt ( tif -> tif_clientdata , module , "Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-correcting skipped" ) ;
EXPR	808:2	808:2	6	TIFFWarningExt ( tif -> tif_clientdata , module , "Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-correcting skipped" )
FUNCTION_CALL	808:2	809:131	7	TIFFWarningExt ( tif -> tif_clientdata , module , "Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-correcting skipped" )
CALLEE	808:2	808:2	8	TIFFWarningExt
LEAF_NODE	808:2	808:2	9	TIFFWarningExt
LEAF_NODE	808:16	808:16	8	(
ARGUMENT	808:17	808:17	8	tif -> tif_clientdata
FIELD	808:17	808:22	9	tif -> tif_clientdata
LEAF_NODE	808:17	808:17	10	tif
LEAF_NODE	808:20	808:20	10	->
LEAF_NODE	808:22	808:22	10	tif_clientdata
LEAF_NODE	808:36	808:36	8	,
ARGUMENT	808:37	808:37	8	module
FIELD	808:37	808:37	9	module
LEAF_NODE	808:37	808:37	10	module
LEAF_NODE	808:43	808:43	8	,
ARGUMENT	809:6	809:6	8	"Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-correcting skipped"
FIELD	809:6	809:6	9	"Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-correcting skipped"
LEAF_NODE	809:6	809:6	10	"Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-correcting skipped"
LEAF_NODE	809:131	809:131	8	)
LEAF_NODE	809:132	809:132	6	;
EXPR_STATEMENT	810:1	810:20	3	_TIFFfree ( m . buffer ) ;
EXPR	810:1	810:1	4	_TIFFfree ( m . buffer )
FUNCTION_CALL	810:1	810:19	5	_TIFFfree ( m . buffer )
CALLEE	810:1	810:1	6	_TIFFfree
LEAF_NODE	810:1	810:1	7	_TIFFfree
LEAF_NODE	810:10	810:10	6	(
ARGUMENT	810:11	810:11	6	m . buffer
FIELD	810:11	810:13	7	m . buffer
LEAF_NODE	810:11	810:11	8	m
LEAF_NODE	810:12	810:12	8	.
LEAF_NODE	810:13	810:13	8	buffer
LEAF_NODE	810:19	810:19	6	)
LEAF_NODE	810:20	810:20	4	;
LEAF_NODE	811:0	811:0	2	}
FUNCTION_DEF	813:0	928:0	1	
RETURN_TYPE	813:0	813:7	2	static int
LEAF_NODE	813:0	813:0	3	static
TYPE_NAME	813:7	813:7	3	int
LEAF_NODE	813:7	813:7	4	int
FUNCTION_NAME	814:0	814:0	2	JPEGFixupTagsSubsamplingSec
LEAF_NODE	814:0	814:0	3	JPEGFixupTagsSubsamplingSec
PARAMETER_LIST	814:27	814:69	2	( struct JPEGFixupTagsSubsamplingData * data )
LEAF_NODE	814:27	814:27	3	(
PARAMETER_DECL	814:28	814:65	3	struct JPEGFixupTagsSubsamplingData * data
TYPE	814:28	814:63	4	struct JPEGFixupTagsSubsamplingData *
TYPE_NAME	814:28	814:35	5	struct JPEGFixupTagsSubsamplingData
LEAF_NODE	814:28	814:28	6	struct
LEAF_NODE	814:35	814:35	6	JPEGFixupTagsSubsamplingData
POINTER	814:63	814:63	5	*
LEAF_NODE	814:63	814:63	6	*
NAME	814:65	814:65	4	data
LEAF_NODE	814:65	814:65	5	data
LEAF_NODE	814:69	814:69	3	)
LEAF_NODE	815:0	815:0	2	{
STATEMENTS	816:1	818:1	2	
LEAF_NODE	816:1	816:1	3	static
SIMPLE_DECL	816:8	816:59	3	const char [ ] module ; module = "JPEGFixupTagsSubsamplingSec" ;
VAR_DECL	816:8	816:19	4	const char [ ] module ; module = "JPEGFixupTagsSubsamplingSec"
TYPE	816:8	816:25	5	const char [ ]
TYPE_NAME	816:8	816:14	6	const char
LEAF_NODE	816:8	816:8	7	const
LEAF_NODE	816:14	816:14	7	char
TYPE_SUFFIX	816:25	816:26	6	[ ]
LEAF_NODE	816:25	816:25	7	[
LEAF_NODE	816:26	816:26	7	]
NAME	816:19	816:19	5	module
LEAF_NODE	816:19	816:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	816:19	816:19	5	module = "JPEGFixupTagsSubsamplingSec"
ASSIGN	816:19	816:30	6	module = "JPEGFixupTagsSubsamplingSec"
LVAL	816:19	816:19	7	module
NAME	816:19	816:19	8	module
LEAF_NODE	816:19	816:19	9	module
ASSIGN_OP	816:28	816:28	7	=
LEAF_NODE	816:28	816:28	8	=
RVAL	816:30	816:30	7	"JPEGFixupTagsSubsamplingSec"
FIELD	816:30	816:30	8	"JPEGFixupTagsSubsamplingSec"
LEAF_NODE	816:30	816:30	9	"JPEGFixupTagsSubsamplingSec"
LEAF_NODE	816:59	816:59	4	;
SIMPLE_DECL	817:1	817:8	3	uint8 m ;
VAR_DECL	817:1	817:7	4	uint8 m
TYPE	817:1	817:1	5	uint8
TYPE_NAME	817:1	817:1	6	uint8
LEAF_NODE	817:1	817:1	7	uint8
NAME	817:7	817:7	5	m
LEAF_NODE	817:7	817:7	6	m
LEAF_NODE	817:8	817:8	4	;
ITERATION	818:1	819:1	3	
KEYWORD	818:1	818:1	4	while
LEAF_NODE	818:1	818:1	5	while
LEAF_NODE	818:7	818:7	4	(
CONDITION	818:8	818:8	4	1
EXPR	818:8	818:8	5	1
FIELD	818:8	818:8	6	1
LEAF_NODE	818:8	818:8	7	1
LEAF_NODE	818:9	818:9	4	)
STATEMENTS	819:1	927:1	4	
LEAF_NODE	819:1	819:1	5	{
STATEMENTS	820:2	834:2	5	
ITERATION	820:2	821:2	6	
KEYWORD	820:2	820:2	7	while
LEAF_NODE	820:2	820:2	8	while
LEAF_NODE	820:8	820:8	7	(
CONDITION	820:9	820:9	7	1
EXPR	820:9	820:9	8	1
FIELD	820:9	820:9	9	1
LEAF_NODE	820:9	820:9	10	1
LEAF_NODE	820:10	820:10	7	)
STATEMENTS	821:2	826:2	7	
LEAF_NODE	821:2	821:2	8	{
STATEMENTS	822:3	824:3	8	
SELECTION	822:3	823:4	9	
KEYWORD	822:3	822:3	10	if
LEAF_NODE	822:3	822:3	11	if
LEAF_NODE	822:6	822:6	10	(
CONDITION	822:7	822:7	10	! JPEGFixupTagsSubsamplingReadByte ( data , & m )
EXPR	822:7	822:7	11	! JPEGFixupTagsSubsamplingReadByte ( data , & m )
UNARY_EXPR	822:7	822:8	12	! JPEGFixupTagsSubsamplingReadByte ( data , & m )
UNARY_OPERATOR	822:7	822:7	13	!
LEAF_NODE	822:7	822:7	14	!
FUNCTION_CALL	822:8	822:48	13	JPEGFixupTagsSubsamplingReadByte ( data , & m )
CALLEE	822:8	822:8	14	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	822:8	822:8	15	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	822:40	822:40	14	(
ARGUMENT	822:41	822:41	14	data
FIELD	822:41	822:41	15	data
LEAF_NODE	822:41	822:41	16	data
LEAF_NODE	822:45	822:45	14	,
ARGUMENT	822:46	822:46	14	& m
UNARY_EXPR	822:46	822:47	15	& m
UNARY_OPERATOR	822:46	822:46	16	&
LEAF_NODE	822:46	822:46	17	&
FIELD	822:47	822:47	16	m
LEAF_NODE	822:47	822:47	17	m
LEAF_NODE	822:48	822:48	14	)
LEAF_NODE	822:49	822:49	10	)
STATEMENTS	823:4	823:4	10	
JUMP_STATEMENT	823:4	823:13	11	return ( 0 ) ;
KEYWORD	823:4	823:4	12	return
LEAF_NODE	823:4	823:4	13	return
DESTINATION	823:10	823:10	12	( 0 )
EXPR	823:10	823:12	13	( 0 )
LEAF_NODE	823:10	823:10	14	(
FIELD	823:11	823:11	14	0
LEAF_NODE	823:11	823:11	15	0
LEAF_NODE	823:12	823:12	14	)
LEAF_NODE	823:13	823:13	12	;
SELECTION	824:3	825:4	9	
KEYWORD	824:3	824:3	10	if
LEAF_NODE	824:3	824:3	11	if
LEAF_NODE	824:6	824:6	10	(
CONDITION	824:7	824:7	10	m == 255
EXPR	824:7	824:10	11	m == 255
FIELD	824:7	824:7	12	m
LEAF_NODE	824:7	824:7	13	m
EQ_OPERATOR	824:8	824:8	12	==
LEAF_NODE	824:8	824:8	13	==
FIELD	824:10	824:10	12	255
LEAF_NODE	824:10	824:10	13	255
LEAF_NODE	824:13	824:13	10	)
STATEMENTS	825:4	825:4	10	
JUMP_STATEMENT	825:4	825:9	11	break DESTINATION ;
KEYWORD	825:4	825:4	12	break
LEAF_NODE	825:4	825:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	825:9	825:9	12	;
LEAF_NODE	826:2	826:2	8	}
ITERATION	827:2	828:2	6	
KEYWORD	827:2	827:2	7	while
LEAF_NODE	827:2	827:2	8	while
LEAF_NODE	827:8	827:8	7	(
CONDITION	827:9	827:9	7	1
EXPR	827:9	827:9	8	1
FIELD	827:9	827:9	9	1
LEAF_NODE	827:9	827:9	10	1
LEAF_NODE	827:10	827:10	7	)
STATEMENTS	828:2	833:2	7	
LEAF_NODE	828:2	828:2	8	{
STATEMENTS	829:3	831:3	8	
SELECTION	829:3	830:4	9	
KEYWORD	829:3	829:3	10	if
LEAF_NODE	829:3	829:3	11	if
LEAF_NODE	829:6	829:6	10	(
CONDITION	829:7	829:7	10	! JPEGFixupTagsSubsamplingReadByte ( data , & m )
EXPR	829:7	829:7	11	! JPEGFixupTagsSubsamplingReadByte ( data , & m )
UNARY_EXPR	829:7	829:8	12	! JPEGFixupTagsSubsamplingReadByte ( data , & m )
UNARY_OPERATOR	829:7	829:7	13	!
LEAF_NODE	829:7	829:7	14	!
FUNCTION_CALL	829:8	829:48	13	JPEGFixupTagsSubsamplingReadByte ( data , & m )
CALLEE	829:8	829:8	14	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	829:8	829:8	15	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	829:40	829:40	14	(
ARGUMENT	829:41	829:41	14	data
FIELD	829:41	829:41	15	data
LEAF_NODE	829:41	829:41	16	data
LEAF_NODE	829:45	829:45	14	,
ARGUMENT	829:46	829:46	14	& m
UNARY_EXPR	829:46	829:47	15	& m
UNARY_OPERATOR	829:46	829:46	16	&
LEAF_NODE	829:46	829:46	17	&
FIELD	829:47	829:47	16	m
LEAF_NODE	829:47	829:47	17	m
LEAF_NODE	829:48	829:48	14	)
LEAF_NODE	829:49	829:49	10	)
STATEMENTS	830:4	830:4	10	
JUMP_STATEMENT	830:4	830:13	11	return ( 0 ) ;
KEYWORD	830:4	830:4	12	return
LEAF_NODE	830:4	830:4	13	return
DESTINATION	830:10	830:10	12	( 0 )
EXPR	830:10	830:12	13	( 0 )
LEAF_NODE	830:10	830:10	14	(
FIELD	830:11	830:11	14	0
LEAF_NODE	830:11	830:11	15	0
LEAF_NODE	830:12	830:12	14	)
LEAF_NODE	830:13	830:13	12	;
SELECTION	831:3	832:4	9	
KEYWORD	831:3	831:3	10	if
LEAF_NODE	831:3	831:3	11	if
LEAF_NODE	831:6	831:6	10	(
CONDITION	831:7	831:7	10	m != 255
EXPR	831:7	831:10	11	m != 255
FIELD	831:7	831:7	12	m
LEAF_NODE	831:7	831:7	13	m
EQ_OPERATOR	831:8	831:8	12	!=
LEAF_NODE	831:8	831:8	13	!=
FIELD	831:10	831:10	12	255
LEAF_NODE	831:10	831:10	13	255
LEAF_NODE	831:13	831:13	10	)
STATEMENTS	832:4	832:4	10	
JUMP_STATEMENT	832:4	832:9	11	break DESTINATION ;
KEYWORD	832:4	832:4	12	break
LEAF_NODE	832:4	832:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	832:9	832:9	12	;
LEAF_NODE	833:2	833:2	8	}
SELECTION	834:2	835:2	6	
KEYWORD	834:2	834:2	7	switch
LEAF_NODE	834:2	834:2	8	switch
LEAF_NODE	834:9	834:9	7	(
CONDITION	834:10	834:10	7	m
EXPR	834:10	834:10	8	m
FIELD	834:10	834:10	9	m
LEAF_NODE	834:10	834:10	10	m
LEAF_NODE	834:11	834:11	7	)
STATEMENTS	835:2	926:2	7	
LEAF_NODE	835:2	835:2	8	{
STATEMENTS	836:3	925:4	8	
LABEL	836:3	836:23	9	case JPEG_MARKER_SOI :
LEAF_NODE	836:3	836:3	10	case
LEAF_NODE	836:8	836:8	10	JPEG_MARKER_SOI
LEAF_NODE	836:23	836:23	10	:
JUMP_STATEMENT	838:4	838:9	9	break DESTINATION ;
KEYWORD	838:4	838:4	10	break
LEAF_NODE	838:4	838:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	838:9	838:9	10	;
LABEL	839:3	839:23	9	case JPEG_MARKER_COM :
LEAF_NODE	839:3	839:3	10	case
LEAF_NODE	839:8	839:8	10	JPEG_MARKER_COM
LEAF_NODE	839:23	839:23	10	:
LABEL	840:3	840:24	9	case JPEG_MARKER_APP0 :
LEAF_NODE	840:3	840:3	10	case
LEAF_NODE	840:8	840:8	10	JPEG_MARKER_APP0
LEAF_NODE	840:24	840:24	10	:
LEAF_NODE	841:3	841:3	9	case
LEAF_NODE	841:8	841:8	9	JPEG_MARKER_APP0
LEAF_NODE	841:24	841:24	9	+
LABEL	841:25	841:26	9	1 :
LEAF_NODE	841:25	841:25	10	1
LEAF_NODE	841:26	841:26	10	:
LEAF_NODE	842:3	842:3	9	case
LEAF_NODE	842:8	842:8	9	JPEG_MARKER_APP0
LEAF_NODE	842:24	842:24	9	+
LABEL	842:25	842:26	9	2 :
LEAF_NODE	842:25	842:25	10	2
LEAF_NODE	842:26	842:26	10	:
LEAF_NODE	843:3	843:3	9	case
LEAF_NODE	843:8	843:8	9	JPEG_MARKER_APP0
LEAF_NODE	843:24	843:24	9	+
LABEL	843:25	843:26	9	3 :
LEAF_NODE	843:25	843:25	10	3
LEAF_NODE	843:26	843:26	10	:
LEAF_NODE	844:3	844:3	9	case
LEAF_NODE	844:8	844:8	9	JPEG_MARKER_APP0
LEAF_NODE	844:24	844:24	9	+
LABEL	844:25	844:26	9	4 :
LEAF_NODE	844:25	844:25	10	4
LEAF_NODE	844:26	844:26	10	:
LEAF_NODE	845:3	845:3	9	case
LEAF_NODE	845:8	845:8	9	JPEG_MARKER_APP0
LEAF_NODE	845:24	845:24	9	+
LABEL	845:25	845:26	9	5 :
LEAF_NODE	845:25	845:25	10	5
LEAF_NODE	845:26	845:26	10	:
LEAF_NODE	846:3	846:3	9	case
LEAF_NODE	846:8	846:8	9	JPEG_MARKER_APP0
LEAF_NODE	846:24	846:24	9	+
LABEL	846:25	846:26	9	6 :
LEAF_NODE	846:25	846:25	10	6
LEAF_NODE	846:26	846:26	10	:
LEAF_NODE	847:3	847:3	9	case
LEAF_NODE	847:8	847:8	9	JPEG_MARKER_APP0
LEAF_NODE	847:24	847:24	9	+
LABEL	847:25	847:26	9	7 :
LEAF_NODE	847:25	847:25	10	7
LEAF_NODE	847:26	847:26	10	:
LEAF_NODE	848:3	848:3	9	case
LEAF_NODE	848:8	848:8	9	JPEG_MARKER_APP0
LEAF_NODE	848:24	848:24	9	+
LABEL	848:25	848:26	9	8 :
LEAF_NODE	848:25	848:25	10	8
LEAF_NODE	848:26	848:26	10	:
LEAF_NODE	849:3	849:3	9	case
LEAF_NODE	849:8	849:8	9	JPEG_MARKER_APP0
LEAF_NODE	849:24	849:24	9	+
LABEL	849:25	849:26	9	9 :
LEAF_NODE	849:25	849:25	10	9
LEAF_NODE	849:26	849:26	10	:
LEAF_NODE	850:3	850:3	9	case
LEAF_NODE	850:8	850:8	9	JPEG_MARKER_APP0
LEAF_NODE	850:24	850:24	9	+
LABEL	850:25	850:27	9	10 :
LEAF_NODE	850:25	850:25	10	10
LEAF_NODE	850:27	850:27	10	:
LEAF_NODE	851:3	851:3	9	case
LEAF_NODE	851:8	851:8	9	JPEG_MARKER_APP0
LEAF_NODE	851:24	851:24	9	+
LABEL	851:25	851:27	9	11 :
LEAF_NODE	851:25	851:25	10	11
LEAF_NODE	851:27	851:27	10	:
LEAF_NODE	852:3	852:3	9	case
LEAF_NODE	852:8	852:8	9	JPEG_MARKER_APP0
LEAF_NODE	852:24	852:24	9	+
LABEL	852:25	852:27	9	12 :
LEAF_NODE	852:25	852:25	10	12
LEAF_NODE	852:27	852:27	10	:
LEAF_NODE	853:3	853:3	9	case
LEAF_NODE	853:8	853:8	9	JPEG_MARKER_APP0
LEAF_NODE	853:24	853:24	9	+
LABEL	853:25	853:27	9	13 :
LEAF_NODE	853:25	853:25	10	13
LEAF_NODE	853:27	853:27	10	:
LEAF_NODE	854:3	854:3	9	case
LEAF_NODE	854:8	854:8	9	JPEG_MARKER_APP0
LEAF_NODE	854:24	854:24	9	+
LABEL	854:25	854:27	9	14 :
LEAF_NODE	854:25	854:25	10	14
LEAF_NODE	854:27	854:27	10	:
LEAF_NODE	855:3	855:3	9	case
LEAF_NODE	855:8	855:8	9	JPEG_MARKER_APP0
LEAF_NODE	855:24	855:24	9	+
LABEL	855:25	855:27	9	15 :
LEAF_NODE	855:25	855:25	10	15
LEAF_NODE	855:27	855:27	10	:
LABEL	856:3	856:23	9	case JPEG_MARKER_DQT :
LEAF_NODE	856:3	856:3	10	case
LEAF_NODE	856:8	856:8	10	JPEG_MARKER_DQT
LEAF_NODE	856:23	856:23	10	:
LABEL	857:3	857:23	9	case JPEG_MARKER_SOS :
LEAF_NODE	857:3	857:3	10	case
LEAF_NODE	857:8	857:8	10	JPEG_MARKER_SOS
LEAF_NODE	857:23	857:23	10	:
LABEL	858:3	858:23	9	case JPEG_MARKER_DHT :
LEAF_NODE	858:3	858:3	10	case
LEAF_NODE	858:8	858:8	10	JPEG_MARKER_DHT
LEAF_NODE	858:23	858:23	10	:
LABEL	859:3	859:23	9	case JPEG_MARKER_DRI :
LEAF_NODE	859:3	859:3	10	case
LEAF_NODE	859:8	859:8	10	JPEG_MARKER_DRI
LEAF_NODE	859:23	859:23	10	:
LEAF_NODE	861:4	861:4	9	{
STATEMENTS	862:5	868:5	9	
SIMPLE_DECL	862:5	862:13	10	uint16 n ;
VAR_DECL	862:5	862:12	11	uint16 n
TYPE	862:5	862:5	12	uint16
TYPE_NAME	862:5	862:5	13	uint16
LEAF_NODE	862:5	862:5	14	uint16
NAME	862:12	862:12	12	n
LEAF_NODE	862:12	862:12	13	n
LEAF_NODE	862:13	862:13	11	;
SELECTION	863:5	864:6	10	
KEYWORD	863:5	863:5	11	if
LEAF_NODE	863:5	863:5	12	if
LEAF_NODE	863:8	863:8	11	(
CONDITION	863:9	863:9	11	! JPEGFixupTagsSubsamplingReadWord ( data , & n )
EXPR	863:9	863:9	12	! JPEGFixupTagsSubsamplingReadWord ( data , & n )
UNARY_EXPR	863:9	863:10	13	! JPEGFixupTagsSubsamplingReadWord ( data , & n )
UNARY_OPERATOR	863:9	863:9	14	!
LEAF_NODE	863:9	863:9	15	!
FUNCTION_CALL	863:10	863:50	14	JPEGFixupTagsSubsamplingReadWord ( data , & n )
CALLEE	863:10	863:10	15	JPEGFixupTagsSubsamplingReadWord
LEAF_NODE	863:10	863:10	16	JPEGFixupTagsSubsamplingReadWord
LEAF_NODE	863:42	863:42	15	(
ARGUMENT	863:43	863:43	15	data
FIELD	863:43	863:43	16	data
LEAF_NODE	863:43	863:43	17	data
LEAF_NODE	863:47	863:47	15	,
ARGUMENT	863:48	863:48	15	& n
UNARY_EXPR	863:48	863:49	16	& n
UNARY_OPERATOR	863:48	863:48	17	&
LEAF_NODE	863:48	863:48	18	&
FIELD	863:49	863:49	17	n
LEAF_NODE	863:49	863:49	18	n
LEAF_NODE	863:50	863:50	15	)
LEAF_NODE	863:51	863:51	11	)
STATEMENTS	864:6	864:6	11	
JUMP_STATEMENT	864:6	864:15	12	return ( 0 ) ;
KEYWORD	864:6	864:6	13	return
LEAF_NODE	864:6	864:6	14	return
DESTINATION	864:12	864:12	13	( 0 )
EXPR	864:12	864:14	14	( 0 )
LEAF_NODE	864:12	864:12	15	(
FIELD	864:13	864:13	15	0
LEAF_NODE	864:13	864:13	16	0
LEAF_NODE	864:14	864:14	15	)
LEAF_NODE	864:15	864:15	13	;
SELECTION	865:5	866:6	10	
KEYWORD	865:5	865:5	11	if
LEAF_NODE	865:5	865:5	12	if
LEAF_NODE	865:8	865:8	11	(
CONDITION	865:9	865:9	11	n < 2
EXPR	865:9	865:11	12	n < 2
FIELD	865:9	865:9	13	n
LEAF_NODE	865:9	865:9	14	n
REL_OPERATOR	865:10	865:10	13	<
LEAF_NODE	865:10	865:10	14	<
FIELD	865:11	865:11	13	2
LEAF_NODE	865:11	865:11	14	2
LEAF_NODE	865:12	865:12	11	)
STATEMENTS	866:6	866:6	11	
JUMP_STATEMENT	866:6	866:15	12	return ( 0 ) ;
KEYWORD	866:6	866:6	13	return
LEAF_NODE	866:6	866:6	14	return
DESTINATION	866:12	866:12	13	( 0 )
EXPR	866:12	866:14	14	( 0 )
LEAF_NODE	866:12	866:12	15	(
FIELD	866:13	866:13	15	0
LEAF_NODE	866:13	866:13	16	0
LEAF_NODE	866:14	866:14	15	)
LEAF_NODE	866:15	866:15	13	;
EXPR_STATEMENT	867:5	867:9	10	n -= 2 ;
EXPR	867:5	867:5	11	n -= 2
ASSIGN	867:5	867:8	12	n -= 2
LVAL	867:5	867:5	13	n
FIELD	867:5	867:5	14	n
LEAF_NODE	867:5	867:5	15	n
ASSIGN_OP	867:6	867:6	13	-=
LEAF_NODE	867:6	867:6	14	-=
RVAL	867:8	867:8	13	2
FIELD	867:8	867:8	14	2
LEAF_NODE	867:8	867:8	15	2
LEAF_NODE	867:9	867:9	11	;
SELECTION	868:5	869:6	10	
KEYWORD	868:5	868:5	11	if
LEAF_NODE	868:5	868:5	12	if
LEAF_NODE	868:8	868:8	11	(
CONDITION	868:9	868:9	11	n > 0
EXPR	868:9	868:11	12	n > 0
FIELD	868:9	868:9	13	n
LEAF_NODE	868:9	868:9	14	n
REL_OPERATOR	868:10	868:10	13	>
LEAF_NODE	868:10	868:10	14	>
FIELD	868:11	868:11	13	0
LEAF_NODE	868:11	868:11	14	0
LEAF_NODE	868:12	868:12	11	)
STATEMENTS	869:6	869:6	11	
EXPR_STATEMENT	869:6	869:42	12	JPEGFixupTagsSubsamplingSkip ( data , n ) ;
EXPR	869:6	869:6	13	JPEGFixupTagsSubsamplingSkip ( data , n )
FUNCTION_CALL	869:6	869:41	14	JPEGFixupTagsSubsamplingSkip ( data , n )
CALLEE	869:6	869:6	15	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	869:6	869:6	16	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	869:34	869:34	15	(
ARGUMENT	869:35	869:35	15	data
FIELD	869:35	869:35	16	data
LEAF_NODE	869:35	869:35	17	data
LEAF_NODE	869:39	869:39	15	,
ARGUMENT	869:40	869:40	15	n
FIELD	869:40	869:40	16	n
LEAF_NODE	869:40	869:40	17	n
LEAF_NODE	869:41	869:41	15	)
LEAF_NODE	869:42	869:42	13	;
LEAF_NODE	870:4	870:4	9	}
JUMP_STATEMENT	871:4	871:9	9	break DESTINATION ;
KEYWORD	871:4	871:4	10	break
LEAF_NODE	871:4	871:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	871:9	871:9	10	;
LABEL	872:3	872:24	9	case JPEG_MARKER_SOF0 :
LEAF_NODE	872:3	872:3	10	case
LEAF_NODE	872:8	872:8	10	JPEG_MARKER_SOF0
LEAF_NODE	872:24	872:24	10	:
LABEL	873:3	873:24	9	case JPEG_MARKER_SOF1 :
LEAF_NODE	873:3	873:3	10	case
LEAF_NODE	873:8	873:8	10	JPEG_MARKER_SOF1
LEAF_NODE	873:24	873:24	10	:
LABEL	874:3	874:24	9	case JPEG_MARKER_SOF2 :
LEAF_NODE	874:3	874:3	10	case
LEAF_NODE	874:8	874:8	10	JPEG_MARKER_SOF2
LEAF_NODE	874:24	874:24	10	:
LABEL	875:3	875:24	9	case JPEG_MARKER_SOF9 :
LEAF_NODE	875:3	875:3	10	case
LEAF_NODE	875:8	875:8	10	JPEG_MARKER_SOF9
LEAF_NODE	875:24	875:24	10	:
LABEL	876:3	876:25	9	case JPEG_MARKER_SOF10 :
LEAF_NODE	876:3	876:3	10	case
LEAF_NODE	876:8	876:8	10	JPEG_MARKER_SOF10
LEAF_NODE	876:25	876:25	10	:
LEAF_NODE	878:4	878:4	9	{
STATEMENTS	879:5	912:5	9	
SIMPLE_DECL	879:5	879:13	10	uint16 n ;
VAR_DECL	879:5	879:12	11	uint16 n
TYPE	879:5	879:5	12	uint16
TYPE_NAME	879:5	879:5	13	uint16
LEAF_NODE	879:5	879:5	14	uint16
NAME	879:12	879:12	12	n
LEAF_NODE	879:12	879:12	13	n
LEAF_NODE	879:13	879:13	11	;
SIMPLE_DECL	880:5	880:13	10	uint16 o ;
VAR_DECL	880:5	880:12	11	uint16 o
TYPE	880:5	880:5	12	uint16
TYPE_NAME	880:5	880:5	13	uint16
LEAF_NODE	880:5	880:5	14	uint16
NAME	880:12	880:12	12	o
LEAF_NODE	880:12	880:12	13	o
LEAF_NODE	880:13	880:13	11	;
SIMPLE_DECL	881:5	881:12	10	uint8 p ;
VAR_DECL	881:5	881:11	11	uint8 p
TYPE	881:5	881:5	12	uint8
TYPE_NAME	881:5	881:5	13	uint8
LEAF_NODE	881:5	881:5	14	uint8
NAME	881:11	881:11	12	p
LEAF_NODE	881:11	881:11	13	p
LEAF_NODE	881:12	881:12	11	;
SIMPLE_DECL	882:5	882:16	10	uint8 ph , uint8 pv ;
INIT_DECL_LIST	882:5	882:5	11	uint8 ph , uint8 pv
VAR_DECL	882:5	882:11	12	uint8 ph
TYPE	882:5	882:5	13	uint8
TYPE_NAME	882:5	882:5	14	uint8
LEAF_NODE	882:5	882:5	15	uint8
NAME	882:11	882:11	13	ph
LEAF_NODE	882:11	882:11	14	ph
LEAF_NODE	882:13	882:13	12	,
VAR_DECL	882:5	882:14	12	uint8 pv
TYPE	882:5	882:5	13	uint8
TYPE_NAME	882:5	882:5	14	uint8
LEAF_NODE	882:5	882:5	15	uint8
NAME	882:14	882:14	13	pv
LEAF_NODE	882:14	882:14	14	pv
LEAF_NODE	882:16	882:16	11	;
SELECTION	883:5	884:6	10	
KEYWORD	883:5	883:5	11	if
LEAF_NODE	883:5	883:5	12	if
LEAF_NODE	883:8	883:8	11	(
CONDITION	883:9	883:9	11	! JPEGFixupTagsSubsamplingReadWord ( data , & n )
EXPR	883:9	883:9	12	! JPEGFixupTagsSubsamplingReadWord ( data , & n )
UNARY_EXPR	883:9	883:10	13	! JPEGFixupTagsSubsamplingReadWord ( data , & n )
UNARY_OPERATOR	883:9	883:9	14	!
LEAF_NODE	883:9	883:9	15	!
FUNCTION_CALL	883:10	883:50	14	JPEGFixupTagsSubsamplingReadWord ( data , & n )
CALLEE	883:10	883:10	15	JPEGFixupTagsSubsamplingReadWord
LEAF_NODE	883:10	883:10	16	JPEGFixupTagsSubsamplingReadWord
LEAF_NODE	883:42	883:42	15	(
ARGUMENT	883:43	883:43	15	data
FIELD	883:43	883:43	16	data
LEAF_NODE	883:43	883:43	17	data
LEAF_NODE	883:47	883:47	15	,
ARGUMENT	883:48	883:48	15	& n
UNARY_EXPR	883:48	883:49	16	& n
UNARY_OPERATOR	883:48	883:48	17	&
LEAF_NODE	883:48	883:48	18	&
FIELD	883:49	883:49	17	n
LEAF_NODE	883:49	883:49	18	n
LEAF_NODE	883:50	883:50	15	)
LEAF_NODE	883:51	883:51	11	)
STATEMENTS	884:6	884:6	11	
JUMP_STATEMENT	884:6	884:15	12	return ( 0 ) ;
KEYWORD	884:6	884:6	13	return
LEAF_NODE	884:6	884:6	14	return
DESTINATION	884:12	884:12	13	( 0 )
EXPR	884:12	884:14	14	( 0 )
LEAF_NODE	884:12	884:12	15	(
FIELD	884:13	884:13	15	0
LEAF_NODE	884:13	884:13	16	0
LEAF_NODE	884:14	884:14	15	)
LEAF_NODE	884:15	884:15	13	;
SELECTION	885:5	886:6	10	
KEYWORD	885:5	885:5	11	if
LEAF_NODE	885:5	885:5	12	if
LEAF_NODE	885:8	885:8	11	(
CONDITION	885:9	885:9	11	n != 8 + data -> tif -> tif_dir . td_samplesperpixel * 3
EXPR	885:9	885:52	12	n != 8 + data -> tif -> tif_dir . td_samplesperpixel * 3
FIELD	885:9	885:9	13	n
LEAF_NODE	885:9	885:9	14	n
EQ_OPERATOR	885:10	885:10	13	!=
LEAF_NODE	885:10	885:10	14	!=
FIELD	885:12	885:12	13	8
LEAF_NODE	885:12	885:12	14	8
LEAF_NODE	885:13	885:13	13	+
FIELD	885:14	885:33	13	data -> tif -> tif_dir . td_samplesperpixel
LEAF_NODE	885:14	885:14	14	data
LEAF_NODE	885:18	885:18	14	->
LEAF_NODE	885:20	885:20	14	tif
LEAF_NODE	885:23	885:23	14	->
LEAF_NODE	885:25	885:25	14	tif_dir
LEAF_NODE	885:32	885:32	14	.
LEAF_NODE	885:33	885:33	14	td_samplesperpixel
LEAF_NODE	885:51	885:51	13	*
FIELD	885:52	885:52	13	3
LEAF_NODE	885:52	885:52	14	3
LEAF_NODE	885:53	885:53	11	)
STATEMENTS	886:6	886:6	11	
JUMP_STATEMENT	886:6	886:15	12	return ( 0 ) ;
KEYWORD	886:6	886:6	13	return
LEAF_NODE	886:6	886:6	14	return
DESTINATION	886:12	886:12	13	( 0 )
EXPR	886:12	886:14	14	( 0 )
LEAF_NODE	886:12	886:12	15	(
FIELD	886:13	886:13	15	0
LEAF_NODE	886:13	886:13	16	0
LEAF_NODE	886:14	886:14	15	)
LEAF_NODE	886:15	886:15	13	;
EXPR_STATEMENT	887:5	887:41	10	JPEGFixupTagsSubsamplingSkip ( data , 7 ) ;
EXPR	887:5	887:5	11	JPEGFixupTagsSubsamplingSkip ( data , 7 )
FUNCTION_CALL	887:5	887:40	12	JPEGFixupTagsSubsamplingSkip ( data , 7 )
CALLEE	887:5	887:5	13	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	887:5	887:5	14	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	887:33	887:33	13	(
ARGUMENT	887:34	887:34	13	data
FIELD	887:34	887:34	14	data
LEAF_NODE	887:34	887:34	15	data
LEAF_NODE	887:38	887:38	13	,
ARGUMENT	887:39	887:39	13	7
FIELD	887:39	887:39	14	7
LEAF_NODE	887:39	887:39	15	7
LEAF_NODE	887:40	887:40	13	)
LEAF_NODE	887:41	887:41	11	;
SELECTION	888:5	889:6	10	
KEYWORD	888:5	888:5	11	if
LEAF_NODE	888:5	888:5	12	if
LEAF_NODE	888:8	888:8	11	(
CONDITION	888:9	888:9	11	! JPEGFixupTagsSubsamplingReadByte ( data , & p )
EXPR	888:9	888:9	12	! JPEGFixupTagsSubsamplingReadByte ( data , & p )
UNARY_EXPR	888:9	888:10	13	! JPEGFixupTagsSubsamplingReadByte ( data , & p )
UNARY_OPERATOR	888:9	888:9	14	!
LEAF_NODE	888:9	888:9	15	!
FUNCTION_CALL	888:10	888:50	14	JPEGFixupTagsSubsamplingReadByte ( data , & p )
CALLEE	888:10	888:10	15	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	888:10	888:10	16	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	888:42	888:42	15	(
ARGUMENT	888:43	888:43	15	data
FIELD	888:43	888:43	16	data
LEAF_NODE	888:43	888:43	17	data
LEAF_NODE	888:47	888:47	15	,
ARGUMENT	888:48	888:48	15	& p
UNARY_EXPR	888:48	888:49	16	& p
UNARY_OPERATOR	888:48	888:48	17	&
LEAF_NODE	888:48	888:48	18	&
FIELD	888:49	888:49	17	p
LEAF_NODE	888:49	888:49	18	p
LEAF_NODE	888:50	888:50	15	)
LEAF_NODE	888:51	888:51	11	)
STATEMENTS	889:6	889:6	11	
JUMP_STATEMENT	889:6	889:15	12	return ( 0 ) ;
KEYWORD	889:6	889:6	13	return
LEAF_NODE	889:6	889:6	14	return
DESTINATION	889:12	889:12	13	( 0 )
EXPR	889:12	889:14	14	( 0 )
LEAF_NODE	889:12	889:12	15	(
FIELD	889:13	889:13	15	0
LEAF_NODE	889:13	889:13	16	0
LEAF_NODE	889:14	889:14	15	)
LEAF_NODE	889:15	889:15	13	;
EXPR_STATEMENT	890:5	890:14	10	ph = ( p >> 4 ) ;
EXPR	890:5	890:5	11	ph = ( p >> 4 )
ASSIGN	890:5	890:8	12	ph = ( p >> 4 )
LVAL	890:5	890:5	13	ph
FIELD	890:5	890:5	14	ph
LEAF_NODE	890:5	890:5	15	ph
ASSIGN_OP	890:7	890:7	13	=
LEAF_NODE	890:7	890:7	14	=
RVAL	890:8	890:13	13	( p >> 4 )
LEAF_NODE	890:8	890:8	14	(
FIELD	890:9	890:9	14	p
LEAF_NODE	890:9	890:9	15	p
LEAF_NODE	890:10	890:10	14	>>
FIELD	890:12	890:12	14	4
LEAF_NODE	890:12	890:12	15	4
LEAF_NODE	890:13	890:13	14	)
LEAF_NODE	890:14	890:14	11	;
EXPR_STATEMENT	891:5	891:14	10	pv = ( p & 15 ) ;
EXPR	891:5	891:5	11	pv = ( p & 15 )
ASSIGN	891:5	891:8	12	pv = ( p & 15 )
LVAL	891:5	891:5	13	pv
FIELD	891:5	891:5	14	pv
LEAF_NODE	891:5	891:5	15	pv
ASSIGN_OP	891:7	891:7	13	=
LEAF_NODE	891:7	891:7	14	=
RVAL	891:8	891:13	13	( p & 15 )
LEAF_NODE	891:8	891:8	14	(
FIELD	891:9	891:9	14	p
LEAF_NODE	891:9	891:9	15	p
LEAF_NODE	891:10	891:10	14	&
FIELD	891:11	891:11	14	15
LEAF_NODE	891:11	891:11	15	15
LEAF_NODE	891:13	891:13	14	)
LEAF_NODE	891:14	891:14	11	;
EXPR_STATEMENT	892:5	892:41	10	JPEGFixupTagsSubsamplingSkip ( data , 1 ) ;
EXPR	892:5	892:5	11	JPEGFixupTagsSubsamplingSkip ( data , 1 )
FUNCTION_CALL	892:5	892:40	12	JPEGFixupTagsSubsamplingSkip ( data , 1 )
CALLEE	892:5	892:5	13	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	892:5	892:5	14	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	892:33	892:33	13	(
ARGUMENT	892:34	892:34	13	data
FIELD	892:34	892:34	14	data
LEAF_NODE	892:34	892:34	15	data
LEAF_NODE	892:38	892:38	13	,
ARGUMENT	892:39	892:39	13	1
FIELD	892:39	892:39	14	1
LEAF_NODE	892:39	892:39	15	1
LEAF_NODE	892:40	892:40	13	)
LEAF_NODE	892:41	892:41	11	;
ITERATION	893:5	894:5	10	
KEYWORD	893:5	893:5	11	for
LEAF_NODE	893:5	893:5	12	for
LEAF_NODE	893:9	893:9	11	(
FOR_INIT	893:10	893:13	11	o = 1 ;
EXPR	893:10	893:10	12	o = 1
ASSIGN	893:10	893:12	13	o = 1
LVAL	893:10	893:10	14	o
FIELD	893:10	893:10	15	o
LEAF_NODE	893:10	893:10	16	o
ASSIGN_OP	893:11	893:11	14	=
LEAF_NODE	893:11	893:11	15	=
RVAL	893:12	893:12	14	1
FIELD	893:12	893:12	15	1
LEAF_NODE	893:12	893:12	16	1
LEAF_NODE	893:13	893:13	12	;
CONDITION	893:15	893:15	11	o < data -> tif -> tif_dir . td_samplesperpixel
EXPR	893:15	893:17	12	o < data -> tif -> tif_dir . td_samplesperpixel
FIELD	893:15	893:15	13	o
LEAF_NODE	893:15	893:15	14	o
REL_OPERATOR	893:16	893:16	13	<
LEAF_NODE	893:16	893:16	14	<
FIELD	893:17	893:36	13	data -> tif -> tif_dir . td_samplesperpixel
LEAF_NODE	893:17	893:17	14	data
LEAF_NODE	893:21	893:21	14	->
LEAF_NODE	893:23	893:23	14	tif
LEAF_NODE	893:26	893:26	14	->
LEAF_NODE	893:28	893:28	14	tif_dir
LEAF_NODE	893:35	893:35	14	.
LEAF_NODE	893:36	893:36	14	td_samplesperpixel
LEAF_NODE	893:54	893:54	11	;
FOR_EXPR	893:56	893:56	11	o ++
EXPR	893:56	893:56	12	o ++
FIELD	893:56	893:57	13	o ++
LEAF_NODE	893:56	893:56	14	o
LEAF_NODE	893:57	893:57	14	++
LEAF_NODE	893:59	893:59	11	)
STATEMENTS	894:5	905:5	11	
LEAF_NODE	894:5	894:5	12	{
STATEMENTS	895:6	904:6	12	
EXPR_STATEMENT	895:6	895:42	13	JPEGFixupTagsSubsamplingSkip ( data , 1 ) ;
EXPR	895:6	895:6	14	JPEGFixupTagsSubsamplingSkip ( data , 1 )
FUNCTION_CALL	895:6	895:41	15	JPEGFixupTagsSubsamplingSkip ( data , 1 )
CALLEE	895:6	895:6	16	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	895:6	895:6	17	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	895:34	895:34	16	(
ARGUMENT	895:35	895:35	16	data
FIELD	895:35	895:35	17	data
LEAF_NODE	895:35	895:35	18	data
LEAF_NODE	895:39	895:39	16	,
ARGUMENT	895:40	895:40	16	1
FIELD	895:40	895:40	17	1
LEAF_NODE	895:40	895:40	18	1
LEAF_NODE	895:41	895:41	16	)
LEAF_NODE	895:42	895:42	14	;
SELECTION	896:6	897:7	13	
KEYWORD	896:6	896:6	14	if
LEAF_NODE	896:6	896:6	15	if
LEAF_NODE	896:9	896:9	14	(
CONDITION	896:10	896:10	14	! JPEGFixupTagsSubsamplingReadByte ( data , & p )
EXPR	896:10	896:10	15	! JPEGFixupTagsSubsamplingReadByte ( data , & p )
UNARY_EXPR	896:10	896:11	16	! JPEGFixupTagsSubsamplingReadByte ( data , & p )
UNARY_OPERATOR	896:10	896:10	17	!
LEAF_NODE	896:10	896:10	18	!
FUNCTION_CALL	896:11	896:51	17	JPEGFixupTagsSubsamplingReadByte ( data , & p )
CALLEE	896:11	896:11	18	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	896:11	896:11	19	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	896:43	896:43	18	(
ARGUMENT	896:44	896:44	18	data
FIELD	896:44	896:44	19	data
LEAF_NODE	896:44	896:44	20	data
LEAF_NODE	896:48	896:48	18	,
ARGUMENT	896:49	896:49	18	& p
UNARY_EXPR	896:49	896:50	19	& p
UNARY_OPERATOR	896:49	896:49	20	&
LEAF_NODE	896:49	896:49	21	&
FIELD	896:50	896:50	20	p
LEAF_NODE	896:50	896:50	21	p
LEAF_NODE	896:51	896:51	18	)
LEAF_NODE	896:52	896:52	14	)
STATEMENTS	897:7	897:7	14	
JUMP_STATEMENT	897:7	897:16	15	return ( 0 ) ;
KEYWORD	897:7	897:7	16	return
LEAF_NODE	897:7	897:7	17	return
DESTINATION	897:13	897:13	16	( 0 )
EXPR	897:13	897:15	17	( 0 )
LEAF_NODE	897:13	897:13	18	(
FIELD	897:14	897:14	18	0
LEAF_NODE	897:14	897:14	19	0
LEAF_NODE	897:15	897:15	18	)
LEAF_NODE	897:16	897:16	16	;
SELECTION	898:6	899:6	13	
KEYWORD	898:6	898:6	14	if
LEAF_NODE	898:6	898:6	15	if
LEAF_NODE	898:9	898:9	14	(
CONDITION	898:10	898:10	14	p != 0x11
EXPR	898:10	898:13	15	p != 0x11
FIELD	898:10	898:10	16	p
LEAF_NODE	898:10	898:10	17	p
EQ_OPERATOR	898:11	898:11	16	!=
LEAF_NODE	898:11	898:11	17	!=
FIELD	898:13	898:13	16	0x11
LEAF_NODE	898:13	898:13	17	0x11
LEAF_NODE	898:17	898:17	14	)
STATEMENTS	899:6	903:6	14	
LEAF_NODE	899:6	899:6	15	{
STATEMENTS	900:7	902:7	15	
EXPR_STATEMENT	900:7	901:135	16	TIFFWarningExt ( data -> tif -> tif_clientdata , module , "Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed" ) ;
EXPR	900:7	900:7	17	TIFFWarningExt ( data -> tif -> tif_clientdata , module , "Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed" )
FUNCTION_CALL	900:7	901:134	18	TIFFWarningExt ( data -> tif -> tif_clientdata , module , "Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed" )
CALLEE	900:7	900:7	19	TIFFWarningExt
LEAF_NODE	900:7	900:7	20	TIFFWarningExt
LEAF_NODE	900:21	900:21	19	(
ARGUMENT	900:22	900:22	19	data -> tif -> tif_clientdata
FIELD	900:22	900:33	20	data -> tif -> tif_clientdata
LEAF_NODE	900:22	900:22	21	data
LEAF_NODE	900:26	900:26	21	->
LEAF_NODE	900:28	900:28	21	tif
LEAF_NODE	900:31	900:31	21	->
LEAF_NODE	900:33	900:33	21	tif_clientdata
LEAF_NODE	900:47	900:47	19	,
ARGUMENT	900:48	900:48	19	module
FIELD	900:48	900:48	20	module
LEAF_NODE	900:48	900:48	21	module
LEAF_NODE	900:54	900:54	19	,
ARGUMENT	901:11	901:11	19	"Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed"
FIELD	901:11	901:11	20	"Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed"
LEAF_NODE	901:11	901:11	21	"Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed"
LEAF_NODE	901:134	901:134	19	)
LEAF_NODE	901:135	901:135	17	;
JUMP_STATEMENT	902:7	902:16	16	return ( 1 ) ;
KEYWORD	902:7	902:7	17	return
LEAF_NODE	902:7	902:7	18	return
DESTINATION	902:13	902:13	17	( 1 )
EXPR	902:13	902:15	18	( 1 )
LEAF_NODE	902:13	902:13	19	(
FIELD	902:14	902:14	19	1
LEAF_NODE	902:14	902:14	20	1
LEAF_NODE	902:15	902:15	19	)
LEAF_NODE	902:16	902:16	17	;
LEAF_NODE	903:6	903:6	15	}
EXPR_STATEMENT	904:6	904:42	13	JPEGFixupTagsSubsamplingSkip ( data , 1 ) ;
EXPR	904:6	904:6	14	JPEGFixupTagsSubsamplingSkip ( data , 1 )
FUNCTION_CALL	904:6	904:41	15	JPEGFixupTagsSubsamplingSkip ( data , 1 )
CALLEE	904:6	904:6	16	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	904:6	904:6	17	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	904:34	904:34	16	(
ARGUMENT	904:35	904:35	16	data
FIELD	904:35	904:35	17	data
LEAF_NODE	904:35	904:35	18	data
LEAF_NODE	904:39	904:39	16	,
ARGUMENT	904:40	904:40	16	1
FIELD	904:40	904:40	17	1
LEAF_NODE	904:40	904:40	18	1
LEAF_NODE	904:41	904:41	16	)
LEAF_NODE	904:42	904:42	14	;
LEAF_NODE	905:5	905:5	12	}
SELECTION	906:5	907:5	10	
KEYWORD	906:5	906:5	11	if
LEAF_NODE	906:5	906:5	12	if
LEAF_NODE	906:8	906:8	11	(
CONDITION	906:9	906:9	11	( ( ph != 1 ) && ( ph != 2 ) && ( ph != 4 ) ) || ( ( pv != 1 ) && ( pv != 2 ) && ( pv != 4 ) )
EXPR	906:9	906:9	12	( ( ph != 1 ) && ( ph != 2 ) && ( ph != 4 ) ) || ( ( pv != 1 ) && ( pv != 2 ) && ( pv != 4 ) )
OR	906:9	906:38	13	( ( ph != 1 ) && ( ph != 2 ) && ( ph != 4 ) ) || ( ( pv != 1 ) && ( pv != 2 ) && ( pv != 4 ) )
EXPR	906:9	906:35	14	( ( ph != 1 ) && ( ph != 2 ) && ( ph != 4 ) )
LEAF_NODE	906:9	906:9	15	(
AND	906:10	906:19	15	( ph != 1 ) && ( ph != 2 ) && ( ph != 4 )
EXPR	906:10	906:16	16	( ph != 1 )
LEAF_NODE	906:10	906:10	17	(
FIELD	906:11	906:11	17	ph
LEAF_NODE	906:11	906:11	18	ph
EQ_OPERATOR	906:13	906:13	17	!=
LEAF_NODE	906:13	906:13	18	!=
FIELD	906:15	906:15	17	1
LEAF_NODE	906:15	906:15	18	1
LEAF_NODE	906:16	906:16	17	)
LEAF_NODE	906:17	906:17	16	&&
EXPR	906:19	906:19	16	( ph != 2 ) && ( ph != 4 )
AND	906:19	906:28	17	( ph != 2 ) && ( ph != 4 )
EXPR	906:19	906:25	18	( ph != 2 )
LEAF_NODE	906:19	906:19	19	(
FIELD	906:20	906:20	19	ph
LEAF_NODE	906:20	906:20	20	ph
EQ_OPERATOR	906:22	906:22	19	!=
LEAF_NODE	906:22	906:22	20	!=
FIELD	906:24	906:24	19	2
LEAF_NODE	906:24	906:24	20	2
LEAF_NODE	906:25	906:25	19	)
LEAF_NODE	906:26	906:26	18	&&
EXPR	906:28	906:34	18	( ph != 4 )
LEAF_NODE	906:28	906:28	19	(
FIELD	906:29	906:29	19	ph
LEAF_NODE	906:29	906:29	20	ph
EQ_OPERATOR	906:31	906:31	19	!=
LEAF_NODE	906:31	906:31	20	!=
FIELD	906:33	906:33	19	4
LEAF_NODE	906:33	906:33	20	4
LEAF_NODE	906:34	906:34	19	)
LEAF_NODE	906:35	906:35	15	)
LEAF_NODE	906:36	906:36	14	||
EXPR	906:38	906:64	14	( ( pv != 1 ) && ( pv != 2 ) && ( pv != 4 ) )
LEAF_NODE	906:38	906:38	15	(
AND	906:39	906:48	15	( pv != 1 ) && ( pv != 2 ) && ( pv != 4 )
EXPR	906:39	906:45	16	( pv != 1 )
LEAF_NODE	906:39	906:39	17	(
FIELD	906:40	906:40	17	pv
LEAF_NODE	906:40	906:40	18	pv
EQ_OPERATOR	906:42	906:42	17	!=
LEAF_NODE	906:42	906:42	18	!=
FIELD	906:44	906:44	17	1
LEAF_NODE	906:44	906:44	18	1
LEAF_NODE	906:45	906:45	17	)
LEAF_NODE	906:46	906:46	16	&&
EXPR	906:48	906:48	16	( pv != 2 ) && ( pv != 4 )
AND	906:48	906:57	17	( pv != 2 ) && ( pv != 4 )
EXPR	906:48	906:54	18	( pv != 2 )
LEAF_NODE	906:48	906:48	19	(
FIELD	906:49	906:49	19	pv
LEAF_NODE	906:49	906:49	20	pv
EQ_OPERATOR	906:51	906:51	19	!=
LEAF_NODE	906:51	906:51	20	!=
FIELD	906:53	906:53	19	2
LEAF_NODE	906:53	906:53	20	2
LEAF_NODE	906:54	906:54	19	)
LEAF_NODE	906:55	906:55	18	&&
EXPR	906:57	906:63	18	( pv != 4 )
LEAF_NODE	906:57	906:57	19	(
FIELD	906:58	906:58	19	pv
LEAF_NODE	906:58	906:58	20	pv
EQ_OPERATOR	906:60	906:60	19	!=
LEAF_NODE	906:60	906:60	20	!=
FIELD	906:62	906:62	19	4
LEAF_NODE	906:62	906:62	20	4
LEAF_NODE	906:63	906:63	19	)
LEAF_NODE	906:64	906:64	15	)
LEAF_NODE	906:65	906:65	11	)
STATEMENTS	907:5	911:5	11	
LEAF_NODE	907:5	907:5	12	{
STATEMENTS	908:6	910:6	12	
EXPR_STATEMENT	908:6	909:134	13	TIFFWarningExt ( data -> tif -> tif_clientdata , module , "Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed" ) ;
EXPR	908:6	908:6	14	TIFFWarningExt ( data -> tif -> tif_clientdata , module , "Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed" )
FUNCTION_CALL	908:6	909:133	15	TIFFWarningExt ( data -> tif -> tif_clientdata , module , "Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed" )
CALLEE	908:6	908:6	16	TIFFWarningExt
LEAF_NODE	908:6	908:6	17	TIFFWarningExt
LEAF_NODE	908:20	908:20	16	(
ARGUMENT	908:21	908:21	16	data -> tif -> tif_clientdata
FIELD	908:21	908:32	17	data -> tif -> tif_clientdata
LEAF_NODE	908:21	908:21	18	data
LEAF_NODE	908:25	908:25	18	->
LEAF_NODE	908:27	908:27	18	tif
LEAF_NODE	908:30	908:30	18	->
LEAF_NODE	908:32	908:32	18	tif_clientdata
LEAF_NODE	908:46	908:46	16	,
ARGUMENT	908:47	908:47	16	module
FIELD	908:47	908:47	17	module
LEAF_NODE	908:47	908:47	18	module
LEAF_NODE	908:53	908:53	16	,
ARGUMENT	909:10	909:10	16	"Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed"
FIELD	909:10	909:10	17	"Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed"
LEAF_NODE	909:10	909:10	18	"Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed"
LEAF_NODE	909:133	909:133	16	)
LEAF_NODE	909:134	909:134	14	;
JUMP_STATEMENT	910:6	910:15	13	return ( 1 ) ;
KEYWORD	910:6	910:6	14	return
LEAF_NODE	910:6	910:6	15	return
DESTINATION	910:12	910:12	14	( 1 )
EXPR	910:12	910:14	15	( 1 )
LEAF_NODE	910:12	910:12	16	(
FIELD	910:13	910:13	16	1
LEAF_NODE	910:13	910:13	17	1
LEAF_NODE	910:14	910:14	16	)
LEAF_NODE	910:15	910:15	14	;
LEAF_NODE	911:5	911:5	12	}
SELECTION	912:5	913:5	10	
KEYWORD	912:5	912:5	11	if
LEAF_NODE	912:5	912:5	12	if
LEAF_NODE	912:8	912:8	11	(
CONDITION	912:9	912:9	11	( ph != data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ] ) || ( pv != data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ] )
EXPR	912:9	912:9	12	( ph != data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ] ) || ( pv != data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ] )
OR	912:9	912:58	13	( ph != data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ] ) || ( pv != data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ] )
EXPR	912:9	912:55	14	( ph != data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ] )
LEAF_NODE	912:9	912:9	15	(
FIELD	912:10	912:10	15	ph
LEAF_NODE	912:10	912:10	16	ph
EQ_OPERATOR	912:12	912:12	15	!=
LEAF_NODE	912:12	912:12	16	!=
FIELD	912:14	912:54	15	data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ]
LEAF_NODE	912:14	912:14	16	data
LEAF_NODE	912:18	912:18	16	->
LEAF_NODE	912:20	912:20	16	tif
LEAF_NODE	912:23	912:23	16	->
LEAF_NODE	912:25	912:25	16	tif_dir
LEAF_NODE	912:32	912:32	16	.
LEAF_NODE	912:33	912:33	16	td_ycbcrsubsampling
LEAF_NODE	912:52	912:52	16	[
EXPR	912:53	912:53	16	0
FIELD	912:53	912:53	17	0
LEAF_NODE	912:53	912:53	18	0
LEAF_NODE	912:54	912:54	16	]
LEAF_NODE	912:55	912:55	15	)
LEAF_NODE	912:56	912:56	14	||
EXPR	912:58	912:104	14	( pv != data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ] )
LEAF_NODE	912:58	912:58	15	(
FIELD	912:59	912:59	15	pv
LEAF_NODE	912:59	912:59	16	pv
EQ_OPERATOR	912:61	912:61	15	!=
LEAF_NODE	912:61	912:61	16	!=
FIELD	912:63	912:103	15	data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ]
LEAF_NODE	912:63	912:63	16	data
LEAF_NODE	912:67	912:67	16	->
LEAF_NODE	912:69	912:69	16	tif
LEAF_NODE	912:72	912:72	16	->
LEAF_NODE	912:74	912:74	16	tif_dir
LEAF_NODE	912:81	912:81	16	.
LEAF_NODE	912:82	912:82	16	td_ycbcrsubsampling
LEAF_NODE	912:101	912:101	16	[
EXPR	912:102	912:102	16	1
FIELD	912:102	912:102	17	1
LEAF_NODE	912:102	912:102	18	1
LEAF_NODE	912:103	912:103	16	]
LEAF_NODE	912:104	912:104	15	)
LEAF_NODE	912:105	912:105	11	)
STATEMENTS	913:5	921:5	11	
LEAF_NODE	913:5	913:5	12	{
STATEMENTS	914:6	920:6	12	
EXPR_STATEMENT	914:6	918:26	13	TIFFWarningExt ( data -> tif -> tif_clientdata , module , "Auto-corrected former TIFF subsampling values [%d,%d] to match subsampling values inside JPEG compressed data [%d,%d]" , ( int ) data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ] , ( int ) data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ] , ( int ) ph , ( int ) pv ) ;
EXPR	914:6	914:6	14	TIFFWarningExt ( data -> tif -> tif_clientdata , module , "Auto-corrected former TIFF subsampling values [%d,%d] to match subsampling values inside JPEG compressed data [%d,%d]" , ( int ) data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ] , ( int ) data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ] , ( int ) ph , ( int ) pv )
FUNCTION_CALL	914:6	918:25	15	TIFFWarningExt ( data -> tif -> tif_clientdata , module , "Auto-corrected former TIFF subsampling values [%d,%d] to match subsampling values inside JPEG compressed data [%d,%d]" , ( int ) data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ] , ( int ) data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ] , ( int ) ph , ( int ) pv )
CALLEE	914:6	914:6	16	TIFFWarningExt
LEAF_NODE	914:6	914:6	17	TIFFWarningExt
LEAF_NODE	914:20	914:20	16	(
ARGUMENT	914:21	914:21	16	data -> tif -> tif_clientdata
FIELD	914:21	914:32	17	data -> tif -> tif_clientdata
LEAF_NODE	914:21	914:21	18	data
LEAF_NODE	914:25	914:25	18	->
LEAF_NODE	914:27	914:27	18	tif
LEAF_NODE	914:30	914:30	18	->
LEAF_NODE	914:32	914:32	18	tif_clientdata
LEAF_NODE	914:46	914:46	16	,
ARGUMENT	914:47	914:47	16	module
FIELD	914:47	914:47	17	module
LEAF_NODE	914:47	914:47	18	module
LEAF_NODE	914:53	914:53	16	,
ARGUMENT	915:10	915:10	16	"Auto-corrected former TIFF subsampling values [%d,%d] to match subsampling values inside JPEG compressed data [%d,%d]"
FIELD	915:10	915:10	17	"Auto-corrected former TIFF subsampling values [%d,%d] to match subsampling values inside JPEG compressed data [%d,%d]"
LEAF_NODE	915:10	915:10	18	"Auto-corrected former TIFF subsampling values [%d,%d] to match subsampling values inside JPEG compressed data [%d,%d]"
LEAF_NODE	915:129	915:129	16	,
ARGUMENT	916:10	916:15	16	( int ) data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ]
LEAF_NODE	916:10	916:10	17	(
TYPE_NAME	916:11	916:11	17	int
LEAF_NODE	916:11	916:11	18	int
LEAF_NODE	916:14	916:14	17	)
FIELD	916:15	916:55	17	data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ]
LEAF_NODE	916:15	916:15	18	data
LEAF_NODE	916:19	916:19	18	->
LEAF_NODE	916:21	916:21	18	tif
LEAF_NODE	916:24	916:24	18	->
LEAF_NODE	916:26	916:26	18	tif_dir
LEAF_NODE	916:33	916:33	18	.
LEAF_NODE	916:34	916:34	18	td_ycbcrsubsampling
LEAF_NODE	916:53	916:53	18	[
EXPR	916:54	916:54	18	0
FIELD	916:54	916:54	19	0
LEAF_NODE	916:54	916:54	20	0
LEAF_NODE	916:55	916:55	18	]
LEAF_NODE	916:56	916:56	16	,
ARGUMENT	917:10	917:15	16	( int ) data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ]
LEAF_NODE	917:10	917:10	17	(
TYPE_NAME	917:11	917:11	17	int
LEAF_NODE	917:11	917:11	18	int
LEAF_NODE	917:14	917:14	17	)
FIELD	917:15	917:55	17	data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ]
LEAF_NODE	917:15	917:15	18	data
LEAF_NODE	917:19	917:19	18	->
LEAF_NODE	917:21	917:21	18	tif
LEAF_NODE	917:24	917:24	18	->
LEAF_NODE	917:26	917:26	18	tif_dir
LEAF_NODE	917:33	917:33	18	.
LEAF_NODE	917:34	917:34	18	td_ycbcrsubsampling
LEAF_NODE	917:53	917:53	18	[
EXPR	917:54	917:54	18	1
FIELD	917:54	917:54	19	1
LEAF_NODE	917:54	917:54	20	1
LEAF_NODE	917:55	917:55	18	]
LEAF_NODE	917:56	917:56	16	,
ARGUMENT	918:10	918:15	16	( int ) ph
LEAF_NODE	918:10	918:10	17	(
TYPE_NAME	918:11	918:11	17	int
LEAF_NODE	918:11	918:11	18	int
LEAF_NODE	918:14	918:14	17	)
FIELD	918:15	918:15	17	ph
LEAF_NODE	918:15	918:15	18	ph
LEAF_NODE	918:17	918:17	16	,
ARGUMENT	918:18	918:23	16	( int ) pv
LEAF_NODE	918:18	918:18	17	(
TYPE_NAME	918:19	918:19	17	int
LEAF_NODE	918:19	918:19	18	int
LEAF_NODE	918:22	918:22	17	)
FIELD	918:23	918:23	17	pv
LEAF_NODE	918:23	918:23	18	pv
LEAF_NODE	918:25	918:25	16	)
LEAF_NODE	918:26	918:26	14	;
EXPR_STATEMENT	919:6	919:50	13	data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ] = ph ;
EXPR	919:6	919:6	14	data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ] = ph
ASSIGN	919:6	919:48	15	data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ] = ph
LVAL	919:6	919:6	16	data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ]
FIELD	919:6	919:46	17	data -> tif -> tif_dir . td_ycbcrsubsampling [ 0 ]
LEAF_NODE	919:6	919:6	18	data
LEAF_NODE	919:10	919:10	18	->
LEAF_NODE	919:12	919:12	18	tif
LEAF_NODE	919:15	919:15	18	->
LEAF_NODE	919:17	919:17	18	tif_dir
LEAF_NODE	919:24	919:24	18	.
LEAF_NODE	919:25	919:25	18	td_ycbcrsubsampling
LEAF_NODE	919:44	919:44	18	[
EXPR	919:45	919:45	18	0
FIELD	919:45	919:45	19	0
LEAF_NODE	919:45	919:45	20	0
LEAF_NODE	919:46	919:46	18	]
ASSIGN_OP	919:47	919:47	16	=
LEAF_NODE	919:47	919:47	17	=
RVAL	919:48	919:48	16	ph
FIELD	919:48	919:48	17	ph
LEAF_NODE	919:48	919:48	18	ph
LEAF_NODE	919:50	919:50	14	;
EXPR_STATEMENT	920:6	920:50	13	data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ] = pv ;
EXPR	920:6	920:6	14	data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ] = pv
ASSIGN	920:6	920:48	15	data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ] = pv
LVAL	920:6	920:6	16	data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ]
FIELD	920:6	920:46	17	data -> tif -> tif_dir . td_ycbcrsubsampling [ 1 ]
LEAF_NODE	920:6	920:6	18	data
LEAF_NODE	920:10	920:10	18	->
LEAF_NODE	920:12	920:12	18	tif
LEAF_NODE	920:15	920:15	18	->
LEAF_NODE	920:17	920:17	18	tif_dir
LEAF_NODE	920:24	920:24	18	.
LEAF_NODE	920:25	920:25	18	td_ycbcrsubsampling
LEAF_NODE	920:44	920:44	18	[
EXPR	920:45	920:45	18	1
FIELD	920:45	920:45	19	1
LEAF_NODE	920:45	920:45	20	1
LEAF_NODE	920:46	920:46	18	]
ASSIGN_OP	920:47	920:47	16	=
LEAF_NODE	920:47	920:47	17	=
RVAL	920:48	920:48	16	pv
FIELD	920:48	920:48	17	pv
LEAF_NODE	920:48	920:48	18	pv
LEAF_NODE	920:50	920:50	14	;
LEAF_NODE	921:5	921:5	12	}
LEAF_NODE	922:4	922:4	9	}
JUMP_STATEMENT	923:4	923:13	9	return ( 1 ) ;
KEYWORD	923:4	923:4	10	return
LEAF_NODE	923:4	923:4	11	return
DESTINATION	923:10	923:10	10	( 1 )
EXPR	923:10	923:12	11	( 1 )
LEAF_NODE	923:10	923:10	12	(
FIELD	923:11	923:11	12	1
LEAF_NODE	923:11	923:11	13	1
LEAF_NODE	923:12	923:12	12	)
LEAF_NODE	923:13	923:13	10	;
LABEL	924:3	924:10	9	default :
LEAF_NODE	924:3	924:3	10	default
LEAF_NODE	924:10	924:10	10	:
JUMP_STATEMENT	925:4	925:13	9	return ( 0 ) ;
KEYWORD	925:4	925:4	10	return
LEAF_NODE	925:4	925:4	11	return
DESTINATION	925:10	925:10	10	( 0 )
EXPR	925:10	925:12	11	( 0 )
LEAF_NODE	925:10	925:10	12	(
FIELD	925:11	925:11	12	0
LEAF_NODE	925:11	925:11	13	0
LEAF_NODE	925:12	925:12	12	)
LEAF_NODE	925:13	925:13	10	;
LEAF_NODE	926:2	926:2	8	}
LEAF_NODE	927:1	927:1	5	}
LEAF_NODE	928:0	928:0	2	}
FUNCTION_DEF	930:0	958:0	1	
RETURN_TYPE	930:0	930:7	2	static int
LEAF_NODE	930:0	930:0	3	static
TYPE_NAME	930:7	930:7	3	int
LEAF_NODE	930:7	930:7	4	int
FUNCTION_NAME	931:0	931:0	2	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	931:0	931:0	3	JPEGFixupTagsSubsamplingReadByte
PARAMETER_LIST	931:32	931:89	2	( struct JPEGFixupTagsSubsamplingData * data , uint8 * result )
LEAF_NODE	931:32	931:32	3	(
PARAMETER_DECL	931:33	931:70	3	struct JPEGFixupTagsSubsamplingData * data
TYPE	931:33	931:68	4	struct JPEGFixupTagsSubsamplingData *
TYPE_NAME	931:33	931:40	5	struct JPEGFixupTagsSubsamplingData
LEAF_NODE	931:33	931:33	6	struct
LEAF_NODE	931:40	931:40	6	JPEGFixupTagsSubsamplingData
POINTER	931:68	931:68	5	*
LEAF_NODE	931:68	931:68	6	*
NAME	931:70	931:70	4	data
LEAF_NODE	931:70	931:70	5	data
LEAF_NODE	931:74	931:74	3	,
PARAMETER_DECL	931:76	931:83	3	uint8 * result
TYPE	931:76	931:81	4	uint8 *
TYPE_NAME	931:76	931:76	5	uint8
LEAF_NODE	931:76	931:76	6	uint8
POINTER	931:81	931:81	5	*
LEAF_NODE	931:81	931:81	6	*
NAME	931:83	931:83	4	result
LEAF_NODE	931:83	931:83	5	result
LEAF_NODE	931:89	931:89	3	)
LEAF_NODE	932:0	932:0	2	{
STATEMENTS	933:1	957:1	2	
SELECTION	933:1	934:1	3	
KEYWORD	933:1	933:1	4	if
LEAF_NODE	933:1	933:1	5	if
LEAF_NODE	933:4	933:4	4	(
CONDITION	933:5	933:5	4	data -> bufferbytesleft == 0
EXPR	933:5	933:28	5	data -> bufferbytesleft == 0
FIELD	933:5	933:11	6	data -> bufferbytesleft
LEAF_NODE	933:5	933:5	7	data
LEAF_NODE	933:9	933:9	7	->
LEAF_NODE	933:11	933:11	7	bufferbytesleft
EQ_OPERATOR	933:26	933:26	6	==
LEAF_NODE	933:26	933:26	7	==
FIELD	933:28	933:28	6	0
LEAF_NODE	933:28	933:28	7	0
LEAF_NODE	933:29	933:29	4	)
STATEMENTS	934:1	953:1	4	
LEAF_NODE	934:1	934:1	5	{
STATEMENTS	935:2	952:2	5	
SIMPLE_DECL	935:2	935:10	6	uint32 m ;
VAR_DECL	935:2	935:9	7	uint32 m
TYPE	935:2	935:2	8	uint32
TYPE_NAME	935:2	935:2	9	uint32
LEAF_NODE	935:2	935:2	10	uint32
NAME	935:9	935:9	8	m
LEAF_NODE	935:9	935:9	9	m
LEAF_NODE	935:10	935:10	7	;
SELECTION	936:2	937:3	6	
KEYWORD	936:2	936:2	7	if
LEAF_NODE	936:2	936:2	8	if
LEAF_NODE	936:5	936:5	7	(
CONDITION	936:6	936:6	7	data -> filebytesleft == 0
EXPR	936:6	936:27	8	data -> filebytesleft == 0
FIELD	936:6	936:12	9	data -> filebytesleft
LEAF_NODE	936:6	936:6	10	data
LEAF_NODE	936:10	936:10	10	->
LEAF_NODE	936:12	936:12	10	filebytesleft
EQ_OPERATOR	936:25	936:25	9	==
LEAF_NODE	936:25	936:25	10	==
FIELD	936:27	936:27	9	0
LEAF_NODE	936:27	936:27	10	0
LEAF_NODE	936:28	936:28	7	)
STATEMENTS	937:3	937:3	7	
JUMP_STATEMENT	937:3	937:12	8	return ( 0 ) ;
KEYWORD	937:3	937:3	9	return
LEAF_NODE	937:3	937:3	10	return
DESTINATION	937:9	937:9	9	( 0 )
EXPR	937:9	937:11	10	( 0 )
LEAF_NODE	937:9	937:9	11	(
FIELD	937:10	937:10	11	0
LEAF_NODE	937:10	937:10	12	0
LEAF_NODE	937:11	937:11	11	)
LEAF_NODE	937:12	937:12	9	;
SELECTION	938:2	939:2	6	
KEYWORD	938:2	938:2	7	if
LEAF_NODE	938:2	938:2	8	if
LEAF_NODE	938:5	938:5	7	(
CONDITION	938:6	938:6	7	! data -> filepositioned
EXPR	938:6	938:6	8	! data -> filepositioned
UNARY_EXPR	938:6	938:7	9	! data -> filepositioned
UNARY_OPERATOR	938:6	938:6	10	!
LEAF_NODE	938:6	938:6	11	!
FIELD	938:7	938:13	10	data -> filepositioned
LEAF_NODE	938:7	938:7	11	data
LEAF_NODE	938:11	938:11	11	->
LEAF_NODE	938:13	938:13	11	filepositioned
LEAF_NODE	938:27	938:27	7	)
STATEMENTS	939:2	942:2	7	
LEAF_NODE	939:2	939:2	8	{
STATEMENTS	940:3	941:3	8	
EXPR_STATEMENT	940:3	940:52	9	TIFFSeekFile ( data -> tif , data -> fileoffset , SEEK_SET ) ;
EXPR	940:3	940:3	10	TIFFSeekFile ( data -> tif , data -> fileoffset , SEEK_SET )
FUNCTION_CALL	940:3	940:51	11	TIFFSeekFile ( data -> tif , data -> fileoffset , SEEK_SET )
CALLEE	940:3	940:3	12	TIFFSeekFile
LEAF_NODE	940:3	940:3	13	TIFFSeekFile
LEAF_NODE	940:15	940:15	12	(
ARGUMENT	940:16	940:16	12	data -> tif
FIELD	940:16	940:22	13	data -> tif
LEAF_NODE	940:16	940:16	14	data
LEAF_NODE	940:20	940:20	14	->
LEAF_NODE	940:22	940:22	14	tif
LEAF_NODE	940:25	940:25	12	,
ARGUMENT	940:26	940:26	12	data -> fileoffset
FIELD	940:26	940:32	13	data -> fileoffset
LEAF_NODE	940:26	940:26	14	data
LEAF_NODE	940:30	940:30	14	->
LEAF_NODE	940:32	940:32	14	fileoffset
LEAF_NODE	940:42	940:42	12	,
ARGUMENT	940:43	940:43	12	SEEK_SET
FIELD	940:43	940:43	13	SEEK_SET
LEAF_NODE	940:43	940:43	14	SEEK_SET
LEAF_NODE	940:51	940:51	12	)
LEAF_NODE	940:52	940:52	10	;
EXPR_STATEMENT	941:3	941:25	9	data -> filepositioned = 1 ;
EXPR	941:3	941:3	10	data -> filepositioned = 1
ASSIGN	941:3	941:24	11	data -> filepositioned = 1
LVAL	941:3	941:3	12	data -> filepositioned
FIELD	941:3	941:9	13	data -> filepositioned
LEAF_NODE	941:3	941:3	14	data
LEAF_NODE	941:7	941:7	14	->
LEAF_NODE	941:9	941:9	14	filepositioned
ASSIGN_OP	941:23	941:23	12	=
LEAF_NODE	941:23	941:23	13	=
RVAL	941:24	941:24	12	1
FIELD	941:24	941:24	13	1
LEAF_NODE	941:24	941:24	14	1
LEAF_NODE	941:25	941:25	10	;
LEAF_NODE	942:2	942:2	8	}
EXPR_STATEMENT	943:2	943:20	6	m = data -> buffersize ;
EXPR	943:2	943:2	7	m = data -> buffersize
ASSIGN	943:2	943:4	8	m = data -> buffersize
LVAL	943:2	943:2	9	m
FIELD	943:2	943:2	10	m
LEAF_NODE	943:2	943:2	11	m
ASSIGN_OP	943:3	943:3	9	=
LEAF_NODE	943:3	943:3	10	=
RVAL	943:4	943:4	9	data -> buffersize
FIELD	943:4	943:10	10	data -> buffersize
LEAF_NODE	943:4	943:4	11	data
LEAF_NODE	943:8	943:8	11	->
LEAF_NODE	943:10	943:10	11	buffersize
LEAF_NODE	943:20	943:20	7	;
SELECTION	944:2	945:3	6	
KEYWORD	944:2	944:2	7	if
LEAF_NODE	944:2	944:2	8	if
LEAF_NODE	944:5	944:5	7	(
CONDITION	944:6	944:6	7	( uint64 ) m > data -> filebytesleft
EXPR	944:6	944:16	8	( uint64 ) m > data -> filebytesleft
LEAF_NODE	944:6	944:6	9	(
TYPE_NAME	944:7	944:7	9	uint64
LEAF_NODE	944:7	944:7	10	uint64
LEAF_NODE	944:13	944:13	9	)
FIELD	944:14	944:14	9	m
LEAF_NODE	944:14	944:14	10	m
REL_OPERATOR	944:15	944:15	9	>
LEAF_NODE	944:15	944:15	10	>
FIELD	944:16	944:22	9	data -> filebytesleft
LEAF_NODE	944:16	944:16	10	data
LEAF_NODE	944:20	944:20	10	->
LEAF_NODE	944:22	944:22	10	filebytesleft
LEAF_NODE	944:35	944:35	7	)
STATEMENTS	945:3	945:3	7	
EXPR_STATEMENT	945:3	945:32	8	m = ( uint32 ) data -> filebytesleft ;
EXPR	945:3	945:3	9	m = ( uint32 ) data -> filebytesleft
ASSIGN	945:3	945:5	10	m = ( uint32 ) data -> filebytesleft
LVAL	945:3	945:3	11	m
FIELD	945:3	945:3	12	m
LEAF_NODE	945:3	945:3	13	m
ASSIGN_OP	945:4	945:4	11	=
LEAF_NODE	945:4	945:4	12	=
RVAL	945:5	945:13	11	( uint32 ) data -> filebytesleft
LEAF_NODE	945:5	945:5	12	(
TYPE_NAME	945:6	945:6	12	uint32
LEAF_NODE	945:6	945:6	13	uint32
LEAF_NODE	945:12	945:12	12	)
FIELD	945:13	945:19	12	data -> filebytesleft
LEAF_NODE	945:13	945:13	13	data
LEAF_NODE	945:17	945:17	13	->
LEAF_NODE	945:19	945:19	13	filebytesleft
LEAF_NODE	945:32	945:32	9	;
EXPR_STATEMENT	946:2	946:24	6	assert ( m < 0x80000000UL ) ;
EXPR	946:2	946:2	7	assert ( m < 0x80000000UL )
FUNCTION_CALL	946:2	946:23	8	assert ( m < 0x80000000UL )
CALLEE	946:2	946:2	9	assert
LEAF_NODE	946:2	946:2	10	assert
LEAF_NODE	946:8	946:8	9	(
ARGUMENT	946:9	946:11	9	m < 0x80000000UL
FIELD	946:9	946:9	10	m
LEAF_NODE	946:9	946:9	11	m
REL_OPERATOR	946:10	946:10	10	<
LEAF_NODE	946:10	946:10	11	<
FIELD	946:11	946:11	10	0x80000000UL
LEAF_NODE	946:11	946:11	11	0x80000000UL
LEAF_NODE	946:23	946:23	9	)
LEAF_NODE	946:24	946:24	7	;
SELECTION	947:2	948:3	6	
KEYWORD	947:2	947:2	7	if
LEAF_NODE	947:2	947:2	8	if
LEAF_NODE	947:5	947:5	7	(
CONDITION	947:6	947:6	7	TIFFReadFile ( data -> tif , data -> buffer , ( tmsize_t ) m ) != ( tmsize_t ) m
EXPR	947:6	947:66	8	TIFFReadFile ( data -> tif , data -> buffer , ( tmsize_t ) m ) != ( tmsize_t ) m
FUNCTION_CALL	947:6	947:53	9	TIFFReadFile ( data -> tif , data -> buffer , ( tmsize_t ) m )
CALLEE	947:6	947:6	10	TIFFReadFile
LEAF_NODE	947:6	947:6	11	TIFFReadFile
LEAF_NODE	947:18	947:18	10	(
ARGUMENT	947:19	947:19	10	data -> tif
FIELD	947:19	947:25	11	data -> tif
LEAF_NODE	947:19	947:19	12	data
LEAF_NODE	947:23	947:23	12	->
LEAF_NODE	947:25	947:25	12	tif
LEAF_NODE	947:28	947:28	10	,
ARGUMENT	947:29	947:29	10	data -> buffer
FIELD	947:29	947:35	11	data -> buffer
LEAF_NODE	947:29	947:29	12	data
LEAF_NODE	947:33	947:33	12	->
LEAF_NODE	947:35	947:35	12	buffer
LEAF_NODE	947:41	947:41	10	,
ARGUMENT	947:42	947:52	10	( tmsize_t ) m
LEAF_NODE	947:42	947:42	11	(
TYPE_NAME	947:43	947:43	11	tmsize_t
LEAF_NODE	947:43	947:43	12	tmsize_t
LEAF_NODE	947:51	947:51	11	)
FIELD	947:52	947:52	11	m
LEAF_NODE	947:52	947:52	12	m
LEAF_NODE	947:53	947:53	10	)
EQ_OPERATOR	947:54	947:54	9	!=
LEAF_NODE	947:54	947:54	10	!=
LEAF_NODE	947:56	947:56	9	(
TYPE_NAME	947:57	947:57	9	tmsize_t
LEAF_NODE	947:57	947:57	10	tmsize_t
LEAF_NODE	947:65	947:65	9	)
FIELD	947:66	947:66	9	m
LEAF_NODE	947:66	947:66	10	m
LEAF_NODE	947:67	947:67	7	)
STATEMENTS	948:3	948:3	7	
JUMP_STATEMENT	948:3	948:12	8	return ( 0 ) ;
KEYWORD	948:3	948:3	9	return
LEAF_NODE	948:3	948:3	10	return
DESTINATION	948:9	948:9	9	( 0 )
EXPR	948:9	948:11	10	( 0 )
LEAF_NODE	948:9	948:9	11	(
FIELD	948:10	948:10	11	0
LEAF_NODE	948:10	948:10	12	0
LEAF_NODE	948:11	948:11	11	)
LEAF_NODE	948:12	948:12	9	;
EXPR_STATEMENT	949:2	949:38	6	data -> buffercurrentbyte = data -> buffer ;
EXPR	949:2	949:2	7	data -> buffercurrentbyte = data -> buffer
ASSIGN	949:2	949:26	8	data -> buffercurrentbyte = data -> buffer
LVAL	949:2	949:2	9	data -> buffercurrentbyte
FIELD	949:2	949:8	10	data -> buffercurrentbyte
LEAF_NODE	949:2	949:2	11	data
LEAF_NODE	949:6	949:6	11	->
LEAF_NODE	949:8	949:8	11	buffercurrentbyte
ASSIGN_OP	949:25	949:25	9	=
LEAF_NODE	949:25	949:25	10	=
RVAL	949:26	949:26	9	data -> buffer
FIELD	949:26	949:32	10	data -> buffer
LEAF_NODE	949:26	949:26	11	data
LEAF_NODE	949:30	949:30	11	->
LEAF_NODE	949:32	949:32	11	buffer
LEAF_NODE	949:38	949:38	7	;
EXPR_STATEMENT	950:2	950:25	6	data -> bufferbytesleft = m ;
EXPR	950:2	950:2	7	data -> bufferbytesleft = m
ASSIGN	950:2	950:24	8	data -> bufferbytesleft = m
LVAL	950:2	950:2	9	data -> bufferbytesleft
FIELD	950:2	950:8	10	data -> bufferbytesleft
LEAF_NODE	950:2	950:2	11	data
LEAF_NODE	950:6	950:6	11	->
LEAF_NODE	950:8	950:8	11	bufferbytesleft
ASSIGN_OP	950:23	950:23	9	=
LEAF_NODE	950:23	950:23	10	=
RVAL	950:24	950:24	9	m
FIELD	950:24	950:24	10	m
LEAF_NODE	950:24	950:24	11	m
LEAF_NODE	950:25	950:25	7	;
EXPR_STATEMENT	951:2	951:21	6	data -> fileoffset += m ;
EXPR	951:2	951:2	7	data -> fileoffset += m
ASSIGN	951:2	951:20	8	data -> fileoffset += m
LVAL	951:2	951:2	9	data -> fileoffset
FIELD	951:2	951:8	10	data -> fileoffset
LEAF_NODE	951:2	951:2	11	data
LEAF_NODE	951:6	951:6	11	->
LEAF_NODE	951:8	951:8	11	fileoffset
ASSIGN_OP	951:18	951:18	9	+=
LEAF_NODE	951:18	951:18	10	+=
RVAL	951:20	951:20	9	m
FIELD	951:20	951:20	10	m
LEAF_NODE	951:20	951:20	11	m
LEAF_NODE	951:21	951:21	7	;
EXPR_STATEMENT	952:2	952:24	6	data -> filebytesleft -= m ;
EXPR	952:2	952:2	7	data -> filebytesleft -= m
ASSIGN	952:2	952:23	8	data -> filebytesleft -= m
LVAL	952:2	952:2	9	data -> filebytesleft
FIELD	952:2	952:8	10	data -> filebytesleft
LEAF_NODE	952:2	952:2	11	data
LEAF_NODE	952:6	952:6	11	->
LEAF_NODE	952:8	952:8	11	filebytesleft
ASSIGN_OP	952:21	952:21	9	-=
LEAF_NODE	952:21	952:21	10	-=
RVAL	952:23	952:23	9	m
FIELD	952:23	952:23	10	m
LEAF_NODE	952:23	952:23	11	m
LEAF_NODE	952:24	952:24	7	;
LEAF_NODE	953:1	953:1	5	}
EXPR_STATEMENT	954:1	954:33	3	* result = * data -> buffercurrentbyte ;
EXPR	954:1	954:1	4	* result = * data -> buffercurrentbyte
ASSIGN	954:1	954:9	5	* result = * data -> buffercurrentbyte
LVAL	954:1	954:1	6	* result
UNARY_EXPR	954:1	954:2	7	* result
UNARY_OPERATOR	954:1	954:1	8	*
LEAF_NODE	954:1	954:1	9	*
FIELD	954:2	954:2	8	result
LEAF_NODE	954:2	954:2	9	result
ASSIGN_OP	954:8	954:8	6	=
LEAF_NODE	954:8	954:8	7	=
RVAL	954:9	954:9	6	* data -> buffercurrentbyte
UNARY_EXPR	954:9	954:10	7	* data -> buffercurrentbyte
UNARY_OPERATOR	954:9	954:9	8	*
LEAF_NODE	954:9	954:9	9	*
FIELD	954:10	954:16	8	data -> buffercurrentbyte
LEAF_NODE	954:10	954:10	9	data
LEAF_NODE	954:14	954:14	9	->
LEAF_NODE	954:16	954:16	9	buffercurrentbyte
LEAF_NODE	954:33	954:33	4	;
EXPR_STATEMENT	955:1	955:26	3	data -> buffercurrentbyte ++ ;
EXPR	955:1	955:1	4	data -> buffercurrentbyte ++
FIELD	955:1	955:24	5	data -> buffercurrentbyte ++
LEAF_NODE	955:1	955:1	6	data
LEAF_NODE	955:5	955:5	6	->
LEAF_NODE	955:7	955:7	6	buffercurrentbyte
LEAF_NODE	955:24	955:24	6	++
LEAF_NODE	955:26	955:26	4	;
EXPR_STATEMENT	956:1	956:24	3	data -> bufferbytesleft -- ;
EXPR	956:1	956:1	4	data -> bufferbytesleft --
FIELD	956:1	956:22	5	data -> bufferbytesleft --
LEAF_NODE	956:1	956:1	6	data
LEAF_NODE	956:5	956:5	6	->
LEAF_NODE	956:7	956:7	6	bufferbytesleft
LEAF_NODE	956:22	956:22	6	--
LEAF_NODE	956:24	956:24	4	;
JUMP_STATEMENT	957:1	957:10	3	return ( 1 ) ;
KEYWORD	957:1	957:1	4	return
LEAF_NODE	957:1	957:1	5	return
DESTINATION	957:7	957:7	4	( 1 )
EXPR	957:7	957:9	5	( 1 )
LEAF_NODE	957:7	957:7	6	(
FIELD	957:8	957:8	6	1
LEAF_NODE	957:8	957:8	7	1
LEAF_NODE	957:9	957:9	6	)
LEAF_NODE	957:10	957:10	4	;
LEAF_NODE	958:0	958:0	2	}
FUNCTION_DEF	960:0	971:0	1	
RETURN_TYPE	960:0	960:7	2	static int
LEAF_NODE	960:0	960:0	3	static
TYPE_NAME	960:7	960:7	3	int
LEAF_NODE	960:7	960:7	4	int
FUNCTION_NAME	961:0	961:0	2	JPEGFixupTagsSubsamplingReadWord
LEAF_NODE	961:0	961:0	3	JPEGFixupTagsSubsamplingReadWord
PARAMETER_LIST	961:32	961:90	2	( struct JPEGFixupTagsSubsamplingData * data , uint16 * result )
LEAF_NODE	961:32	961:32	3	(
PARAMETER_DECL	961:33	961:70	3	struct JPEGFixupTagsSubsamplingData * data
TYPE	961:33	961:68	4	struct JPEGFixupTagsSubsamplingData *
TYPE_NAME	961:33	961:40	5	struct JPEGFixupTagsSubsamplingData
LEAF_NODE	961:33	961:33	6	struct
LEAF_NODE	961:40	961:40	6	JPEGFixupTagsSubsamplingData
POINTER	961:68	961:68	5	*
LEAF_NODE	961:68	961:68	6	*
NAME	961:70	961:70	4	data
LEAF_NODE	961:70	961:70	5	data
LEAF_NODE	961:74	961:74	3	,
PARAMETER_DECL	961:76	961:84	3	uint16 * result
TYPE	961:76	961:82	4	uint16 *
TYPE_NAME	961:76	961:76	5	uint16
LEAF_NODE	961:76	961:76	6	uint16
POINTER	961:82	961:82	5	*
LEAF_NODE	961:82	961:82	6	*
NAME	961:84	961:84	4	result
LEAF_NODE	961:84	961:84	5	result
LEAF_NODE	961:90	961:90	3	)
LEAF_NODE	962:0	962:0	2	{
STATEMENTS	963:1	970:1	2	
SIMPLE_DECL	963:1	963:9	3	uint8 ma ;
VAR_DECL	963:1	963:7	4	uint8 ma
TYPE	963:1	963:1	5	uint8
TYPE_NAME	963:1	963:1	6	uint8
LEAF_NODE	963:1	963:1	7	uint8
NAME	963:7	963:7	5	ma
LEAF_NODE	963:7	963:7	6	ma
LEAF_NODE	963:9	963:9	4	;
SIMPLE_DECL	964:1	964:9	3	uint8 mb ;
VAR_DECL	964:1	964:7	4	uint8 mb
TYPE	964:1	964:1	5	uint8
TYPE_NAME	964:1	964:1	6	uint8
LEAF_NODE	964:1	964:1	7	uint8
NAME	964:7	964:7	5	mb
LEAF_NODE	964:7	964:7	6	mb
LEAF_NODE	964:9	964:9	4	;
SELECTION	965:1	966:2	3	
KEYWORD	965:1	965:1	4	if
LEAF_NODE	965:1	965:1	5	if
LEAF_NODE	965:4	965:4	4	(
CONDITION	965:5	965:5	4	! JPEGFixupTagsSubsamplingReadByte ( data , & ma )
EXPR	965:5	965:5	5	! JPEGFixupTagsSubsamplingReadByte ( data , & ma )
UNARY_EXPR	965:5	965:6	6	! JPEGFixupTagsSubsamplingReadByte ( data , & ma )
UNARY_OPERATOR	965:5	965:5	7	!
LEAF_NODE	965:5	965:5	8	!
FUNCTION_CALL	965:6	965:47	7	JPEGFixupTagsSubsamplingReadByte ( data , & ma )
CALLEE	965:6	965:6	8	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	965:6	965:6	9	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	965:38	965:38	8	(
ARGUMENT	965:39	965:39	8	data
FIELD	965:39	965:39	9	data
LEAF_NODE	965:39	965:39	10	data
LEAF_NODE	965:43	965:43	8	,
ARGUMENT	965:44	965:44	8	& ma
UNARY_EXPR	965:44	965:45	9	& ma
UNARY_OPERATOR	965:44	965:44	10	&
LEAF_NODE	965:44	965:44	11	&
FIELD	965:45	965:45	10	ma
LEAF_NODE	965:45	965:45	11	ma
LEAF_NODE	965:47	965:47	8	)
LEAF_NODE	965:48	965:48	4	)
STATEMENTS	966:2	966:2	4	
JUMP_STATEMENT	966:2	966:11	5	return ( 0 ) ;
KEYWORD	966:2	966:2	6	return
LEAF_NODE	966:2	966:2	7	return
DESTINATION	966:8	966:8	6	( 0 )
EXPR	966:8	966:10	7	( 0 )
LEAF_NODE	966:8	966:8	8	(
FIELD	966:9	966:9	8	0
LEAF_NODE	966:9	966:9	9	0
LEAF_NODE	966:10	966:10	8	)
LEAF_NODE	966:11	966:11	6	;
SELECTION	967:1	968:2	3	
KEYWORD	967:1	967:1	4	if
LEAF_NODE	967:1	967:1	5	if
LEAF_NODE	967:4	967:4	4	(
CONDITION	967:5	967:5	4	! JPEGFixupTagsSubsamplingReadByte ( data , & mb )
EXPR	967:5	967:5	5	! JPEGFixupTagsSubsamplingReadByte ( data , & mb )
UNARY_EXPR	967:5	967:6	6	! JPEGFixupTagsSubsamplingReadByte ( data , & mb )
UNARY_OPERATOR	967:5	967:5	7	!
LEAF_NODE	967:5	967:5	8	!
FUNCTION_CALL	967:6	967:47	7	JPEGFixupTagsSubsamplingReadByte ( data , & mb )
CALLEE	967:6	967:6	8	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	967:6	967:6	9	JPEGFixupTagsSubsamplingReadByte
LEAF_NODE	967:38	967:38	8	(
ARGUMENT	967:39	967:39	8	data
FIELD	967:39	967:39	9	data
LEAF_NODE	967:39	967:39	10	data
LEAF_NODE	967:43	967:43	8	,
ARGUMENT	967:44	967:44	8	& mb
UNARY_EXPR	967:44	967:45	9	& mb
UNARY_OPERATOR	967:44	967:44	10	&
LEAF_NODE	967:44	967:44	11	&
FIELD	967:45	967:45	10	mb
LEAF_NODE	967:45	967:45	11	mb
LEAF_NODE	967:47	967:47	8	)
LEAF_NODE	967:48	967:48	4	)
STATEMENTS	968:2	968:2	4	
JUMP_STATEMENT	968:2	968:11	5	return ( 0 ) ;
KEYWORD	968:2	968:2	6	return
LEAF_NODE	968:2	968:2	7	return
DESTINATION	968:8	968:8	6	( 0 )
EXPR	968:8	968:10	7	( 0 )
LEAF_NODE	968:8	968:8	8	(
FIELD	968:9	968:9	8	0
LEAF_NODE	968:9	968:9	9	0
LEAF_NODE	968:10	968:10	8	)
LEAF_NODE	968:11	968:11	6	;
EXPR_STATEMENT	969:1	969:19	3	* result = ( ma << 8 ) | mb ;
EXPR	969:1	969:1	4	* result = ( ma << 8 ) | mb
ASSIGN	969:1	969:9	5	* result = ( ma << 8 ) | mb
LVAL	969:1	969:1	6	* result
UNARY_EXPR	969:1	969:2	7	* result
UNARY_OPERATOR	969:1	969:1	8	*
LEAF_NODE	969:1	969:1	9	*
FIELD	969:2	969:2	8	result
LEAF_NODE	969:2	969:2	9	result
ASSIGN_OP	969:8	969:8	6	=
LEAF_NODE	969:8	969:8	7	=
RVAL	969:9	969:9	6	( ma << 8 ) | mb
BIT_OR	969:9	969:17	7	( ma << 8 ) | mb
BIT_OR_ELEM	969:9	969:15	8	( ma << 8 )
LEAF_NODE	969:9	969:9	9	(
FIELD	969:10	969:10	9	ma
LEAF_NODE	969:10	969:10	10	ma
LEAF_NODE	969:12	969:12	9	<<
FIELD	969:14	969:14	9	8
LEAF_NODE	969:14	969:14	10	8
LEAF_NODE	969:15	969:15	9	)
LEAF_NODE	969:16	969:16	8	|
BIT_OR_ELEM	969:17	969:17	8	mb
FIELD	969:17	969:17	9	mb
LEAF_NODE	969:17	969:17	10	mb
LEAF_NODE	969:19	969:19	4	;
JUMP_STATEMENT	970:1	970:10	3	return ( 1 ) ;
KEYWORD	970:1	970:1	4	return
LEAF_NODE	970:1	970:1	5	return
DESTINATION	970:7	970:7	4	( 1 )
EXPR	970:7	970:9	5	( 1 )
LEAF_NODE	970:7	970:7	6	(
FIELD	970:8	970:8	6	1
LEAF_NODE	970:8	970:8	7	1
LEAF_NODE	970:9	970:9	6	)
LEAF_NODE	970:10	970:10	4	;
LEAF_NODE	971:0	971:0	2	}
FUNCTION_DEF	973:0	998:0	1	
RETURN_TYPE	973:0	973:7	2	static void
LEAF_NODE	973:0	973:0	3	static
TYPE_NAME	973:7	973:7	3	void
LEAF_NODE	973:7	973:7	4	void
FUNCTION_NAME	974:0	974:0	2	JPEGFixupTagsSubsamplingSkip
LEAF_NODE	974:0	974:0	3	JPEGFixupTagsSubsamplingSkip
PARAMETER_LIST	974:28	974:89	2	( struct JPEGFixupTagsSubsamplingData * data , uint16 skiplength )
LEAF_NODE	974:28	974:28	3	(
PARAMETER_DECL	974:29	974:66	3	struct JPEGFixupTagsSubsamplingData * data
TYPE	974:29	974:64	4	struct JPEGFixupTagsSubsamplingData *
TYPE_NAME	974:29	974:36	5	struct JPEGFixupTagsSubsamplingData
LEAF_NODE	974:29	974:29	6	struct
LEAF_NODE	974:36	974:36	6	JPEGFixupTagsSubsamplingData
POINTER	974:64	974:64	5	*
LEAF_NODE	974:64	974:64	6	*
NAME	974:66	974:66	4	data
LEAF_NODE	974:66	974:66	5	data
LEAF_NODE	974:70	974:70	3	,
PARAMETER_DECL	974:72	974:79	3	uint16 skiplength
TYPE	974:72	974:72	4	uint16
TYPE_NAME	974:72	974:72	5	uint16
LEAF_NODE	974:72	974:72	6	uint16
NAME	974:79	974:79	4	skiplength
LEAF_NODE	974:79	974:79	5	skiplength
LEAF_NODE	974:89	974:89	3	)
LEAF_NODE	975:0	975:0	2	{
STATEMENTS	976:1	981:1	2	
SELECTION	976:1	977:1	3	
KEYWORD	976:1	976:1	4	if
LEAF_NODE	976:1	976:1	5	if
LEAF_NODE	976:4	976:4	4	(
CONDITION	976:5	976:5	4	( uint32 ) skiplength <= data -> bufferbytesleft
EXPR	976:5	976:25	5	( uint32 ) skiplength <= data -> bufferbytesleft
LEAF_NODE	976:5	976:5	6	(
TYPE_NAME	976:6	976:6	6	uint32
LEAF_NODE	976:6	976:6	7	uint32
LEAF_NODE	976:12	976:12	6	)
FIELD	976:13	976:13	6	skiplength
LEAF_NODE	976:13	976:13	7	skiplength
REL_OPERATOR	976:23	976:23	6	<=
LEAF_NODE	976:23	976:23	7	<=
FIELD	976:25	976:31	6	data -> bufferbytesleft
LEAF_NODE	976:25	976:25	7	data
LEAF_NODE	976:29	976:29	7	->
LEAF_NODE	976:31	976:31	7	bufferbytesleft
LEAF_NODE	976:46	976:46	4	)
STATEMENTS	977:1	980:1	4	
LEAF_NODE	977:1	977:1	5	{
STATEMENTS	978:2	979:2	5	
EXPR_STATEMENT	978:2	978:37	6	data -> buffercurrentbyte += skiplength ;
EXPR	978:2	978:2	7	data -> buffercurrentbyte += skiplength
ASSIGN	978:2	978:27	8	data -> buffercurrentbyte += skiplength
LVAL	978:2	978:2	9	data -> buffercurrentbyte
FIELD	978:2	978:8	10	data -> buffercurrentbyte
LEAF_NODE	978:2	978:2	11	data
LEAF_NODE	978:6	978:6	11	->
LEAF_NODE	978:8	978:8	11	buffercurrentbyte
ASSIGN_OP	978:25	978:25	9	+=
LEAF_NODE	978:25	978:25	10	+=
RVAL	978:27	978:27	9	skiplength
FIELD	978:27	978:27	10	skiplength
LEAF_NODE	978:27	978:27	11	skiplength
LEAF_NODE	978:37	978:37	7	;
EXPR_STATEMENT	979:2	979:35	6	data -> bufferbytesleft -= skiplength ;
EXPR	979:2	979:2	7	data -> bufferbytesleft -= skiplength
ASSIGN	979:2	979:25	8	data -> bufferbytesleft -= skiplength
LVAL	979:2	979:2	9	data -> bufferbytesleft
FIELD	979:2	979:8	10	data -> bufferbytesleft
LEAF_NODE	979:2	979:2	11	data
LEAF_NODE	979:6	979:6	11	->
LEAF_NODE	979:8	979:8	11	bufferbytesleft
ASSIGN_OP	979:23	979:23	9	-=
LEAF_NODE	979:23	979:23	10	-=
RVAL	979:25	979:25	9	skiplength
FIELD	979:25	979:25	10	skiplength
LEAF_NODE	979:25	979:25	11	skiplength
LEAF_NODE	979:35	979:35	7	;
LEAF_NODE	980:1	980:1	5	}
SELECTION	981:1	982:1	3	
KEYWORD	981:1	981:1	4	else
LEAF_NODE	981:1	981:1	5	else
STATEMENTS	982:1	997:1	4	
LEAF_NODE	982:1	982:1	5	{
STATEMENTS	983:2	992:2	5	
SIMPLE_DECL	983:2	983:10	6	uint16 m ;
VAR_DECL	983:2	983:9	7	uint16 m
TYPE	983:2	983:2	8	uint16
TYPE_NAME	983:2	983:2	9	uint16
LEAF_NODE	983:2	983:2	10	uint16
NAME	983:9	983:9	8	m
LEAF_NODE	983:9	983:9	9	m
LEAF_NODE	983:10	983:10	7	;
EXPR_STATEMENT	984:2	984:46	6	m = ( uint16 ) ( skiplength - data -> bufferbytesleft ) ;
EXPR	984:2	984:2	7	m = ( uint16 ) ( skiplength - data -> bufferbytesleft )
ASSIGN	984:2	984:4	8	m = ( uint16 ) ( skiplength - data -> bufferbytesleft )
LVAL	984:2	984:2	9	m
FIELD	984:2	984:2	10	m
LEAF_NODE	984:2	984:2	11	m
ASSIGN_OP	984:3	984:3	9	=
LEAF_NODE	984:3	984:3	10	=
RVAL	984:4	984:45	9	( uint16 ) ( skiplength - data -> bufferbytesleft )
LEAF_NODE	984:4	984:4	10	(
TYPE_NAME	984:5	984:5	10	uint16
LEAF_NODE	984:5	984:5	11	uint16
LEAF_NODE	984:11	984:11	10	)
LEAF_NODE	984:12	984:12	10	(
FIELD	984:13	984:13	10	skiplength
LEAF_NODE	984:13	984:13	11	skiplength
LEAF_NODE	984:23	984:23	10	-
FIELD	984:24	984:30	10	data -> bufferbytesleft
LEAF_NODE	984:24	984:24	11	data
LEAF_NODE	984:28	984:28	11	->
LEAF_NODE	984:30	984:30	11	bufferbytesleft
LEAF_NODE	984:45	984:45	10	)
LEAF_NODE	984:46	984:46	7	;
SELECTION	985:2	986:2	6	
KEYWORD	985:2	985:2	7	if
LEAF_NODE	985:2	985:2	8	if
LEAF_NODE	985:5	985:5	7	(
CONDITION	985:6	985:6	7	m <= data -> filebytesleft
EXPR	985:6	985:9	8	m <= data -> filebytesleft
FIELD	985:6	985:6	9	m
LEAF_NODE	985:6	985:6	10	m
REL_OPERATOR	985:7	985:7	9	<=
LEAF_NODE	985:7	985:7	10	<=
FIELD	985:9	985:15	9	data -> filebytesleft
LEAF_NODE	985:9	985:9	10	data
LEAF_NODE	985:13	985:13	10	->
LEAF_NODE	985:15	985:15	10	filebytesleft
LEAF_NODE	985:28	985:28	7	)
STATEMENTS	986:2	991:2	7	
LEAF_NODE	986:2	986:2	8	{
STATEMENTS	987:3	990:3	8	
EXPR_STATEMENT	987:3	987:26	9	data -> bufferbytesleft = 0 ;
EXPR	987:3	987:3	10	data -> bufferbytesleft = 0
ASSIGN	987:3	987:25	11	data -> bufferbytesleft = 0
LVAL	987:3	987:3	12	data -> bufferbytesleft
FIELD	987:3	987:9	13	data -> bufferbytesleft
LEAF_NODE	987:3	987:3	14	data
LEAF_NODE	987:7	987:7	14	->
LEAF_NODE	987:9	987:9	14	bufferbytesleft
ASSIGN_OP	987:24	987:24	12	=
LEAF_NODE	987:24	987:24	13	=
RVAL	987:25	987:25	12	0
FIELD	987:25	987:25	13	0
LEAF_NODE	987:25	987:25	14	0
LEAF_NODE	987:26	987:26	10	;
EXPR_STATEMENT	988:3	988:22	9	data -> fileoffset += m ;
EXPR	988:3	988:3	10	data -> fileoffset += m
ASSIGN	988:3	988:21	11	data -> fileoffset += m
LVAL	988:3	988:3	12	data -> fileoffset
FIELD	988:3	988:9	13	data -> fileoffset
LEAF_NODE	988:3	988:3	14	data
LEAF_NODE	988:7	988:7	14	->
LEAF_NODE	988:9	988:9	14	fileoffset
ASSIGN_OP	988:19	988:19	12	+=
LEAF_NODE	988:19	988:19	13	+=
RVAL	988:21	988:21	12	m
FIELD	988:21	988:21	13	m
LEAF_NODE	988:21	988:21	14	m
LEAF_NODE	988:22	988:22	10	;
EXPR_STATEMENT	989:3	989:25	9	data -> filebytesleft -= m ;
EXPR	989:3	989:3	10	data -> filebytesleft -= m
ASSIGN	989:3	989:24	11	data -> filebytesleft -= m
LVAL	989:3	989:3	12	data -> filebytesleft
FIELD	989:3	989:9	13	data -> filebytesleft
LEAF_NODE	989:3	989:3	14	data
LEAF_NODE	989:7	989:7	14	->
LEAF_NODE	989:9	989:9	14	filebytesleft
ASSIGN_OP	989:22	989:22	12	-=
LEAF_NODE	989:22	989:22	13	-=
RVAL	989:24	989:24	12	m
FIELD	989:24	989:24	13	m
LEAF_NODE	989:24	989:24	14	m
LEAF_NODE	989:25	989:25	10	;
EXPR_STATEMENT	990:3	990:25	9	data -> filepositioned = 0 ;
EXPR	990:3	990:3	10	data -> filepositioned = 0
ASSIGN	990:3	990:24	11	data -> filepositioned = 0
LVAL	990:3	990:3	12	data -> filepositioned
FIELD	990:3	990:9	13	data -> filepositioned
LEAF_NODE	990:3	990:3	14	data
LEAF_NODE	990:7	990:7	14	->
LEAF_NODE	990:9	990:9	14	filepositioned
ASSIGN_OP	990:23	990:23	12	=
LEAF_NODE	990:23	990:23	13	=
RVAL	990:24	990:24	12	0
FIELD	990:24	990:24	13	0
LEAF_NODE	990:24	990:24	14	0
LEAF_NODE	990:25	990:25	10	;
LEAF_NODE	991:2	991:2	8	}
SELECTION	992:2	993:2	6	
KEYWORD	992:2	992:2	7	else
LEAF_NODE	992:2	992:2	8	else
STATEMENTS	993:2	996:2	7	
LEAF_NODE	993:2	993:2	8	{
STATEMENTS	994:3	995:3	8	
EXPR_STATEMENT	994:3	994:26	9	data -> bufferbytesleft = 0 ;
EXPR	994:3	994:3	10	data -> bufferbytesleft = 0
ASSIGN	994:3	994:25	11	data -> bufferbytesleft = 0
LVAL	994:3	994:3	12	data -> bufferbytesleft
FIELD	994:3	994:9	13	data -> bufferbytesleft
LEAF_NODE	994:3	994:3	14	data
LEAF_NODE	994:7	994:7	14	->
LEAF_NODE	994:9	994:9	14	bufferbytesleft
ASSIGN_OP	994:24	994:24	12	=
LEAF_NODE	994:24	994:24	13	=
RVAL	994:25	994:25	12	0
FIELD	994:25	994:25	13	0
LEAF_NODE	994:25	994:25	14	0
LEAF_NODE	994:26	994:26	10	;
EXPR_STATEMENT	995:3	995:24	9	data -> filebytesleft = 0 ;
EXPR	995:3	995:3	10	data -> filebytesleft = 0
ASSIGN	995:3	995:23	11	data -> filebytesleft = 0
LVAL	995:3	995:3	12	data -> filebytesleft
FIELD	995:3	995:9	13	data -> filebytesleft
LEAF_NODE	995:3	995:3	14	data
LEAF_NODE	995:7	995:7	14	->
LEAF_NODE	995:9	995:9	14	filebytesleft
ASSIGN_OP	995:22	995:22	12	=
LEAF_NODE	995:22	995:22	13	=
RVAL	995:23	995:23	12	0
FIELD	995:23	995:23	13	0
LEAF_NODE	995:23	995:23	14	0
LEAF_NODE	995:24	995:24	10	;
LEAF_NODE	996:2	996:2	8	}
LEAF_NODE	997:1	997:1	5	}
LEAF_NODE	998:0	998:0	2	}
FUNCTION_DEF	1003:0	1046:0	1	
RETURN_TYPE	1003:0	1003:7	2	static int
LEAF_NODE	1003:0	1003:0	3	static
TYPE_NAME	1003:7	1003:7	3	int
LEAF_NODE	1003:7	1003:7	4	int
FUNCTION_NAME	1004:0	1004:0	2	JPEGSetupDecode
LEAF_NODE	1004:0	1004:0	3	JPEGSetupDecode
PARAMETER_LIST	1004:15	1004:25	2	( TIFF * tif )
LEAF_NODE	1004:15	1004:15	3	(
PARAMETER_DECL	1004:16	1004:22	3	TIFF * tif
TYPE	1004:16	1004:20	4	TIFF *
TYPE_NAME	1004:16	1004:16	5	TIFF
LEAF_NODE	1004:16	1004:16	6	TIFF
POINTER	1004:20	1004:20	5	*
LEAF_NODE	1004:20	1004:20	6	*
NAME	1004:22	1004:22	4	tif
LEAF_NODE	1004:22	1004:22	5	tif
LEAF_NODE	1004:25	1004:25	3	)
LEAF_NODE	1005:0	1005:0	2	{
STATEMENTS	1006:1	1045:1	2	
SIMPLE_DECL	1006:1	1006:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	1006:1	1006:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	1006:1	1006:10	5	JPEGState *
TYPE_NAME	1006:1	1006:1	6	JPEGState
LEAF_NODE	1006:1	1006:1	7	JPEGState
POINTER	1006:10	1006:10	6	*
LEAF_NODE	1006:10	1006:10	7	*
NAME	1006:12	1006:12	5	sp
LEAF_NODE	1006:12	1006:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1006:12	1006:12	5	sp = JState ( tif )
ASSIGN	1006:12	1006:17	6	sp = JState ( tif )
LVAL	1006:12	1006:12	7	sp
NAME	1006:12	1006:12	8	sp
LEAF_NODE	1006:12	1006:12	9	sp
ASSIGN_OP	1006:15	1006:15	7	=
LEAF_NODE	1006:15	1006:15	8	=
RVAL	1006:17	1006:17	7	JState ( tif )
FUNCTION_CALL	1006:17	1006:27	8	JState ( tif )
CALLEE	1006:17	1006:17	9	JState
LEAF_NODE	1006:17	1006:17	10	JState
LEAF_NODE	1006:23	1006:23	9	(
ARGUMENT	1006:24	1006:24	9	tif
FIELD	1006:24	1006:24	10	tif
LEAF_NODE	1006:24	1006:24	11	tif
LEAF_NODE	1006:27	1006:27	9	)
LEAF_NODE	1006:28	1006:28	4	;
SIMPLE_DECL	1007:1	1007:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1007:1	1007:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1007:1	1007:15	5	TIFFDirectory *
TYPE_NAME	1007:1	1007:1	6	TIFFDirectory
LEAF_NODE	1007:1	1007:1	7	TIFFDirectory
POINTER	1007:15	1007:15	6	*
LEAF_NODE	1007:15	1007:15	7	*
NAME	1007:16	1007:16	5	td
LEAF_NODE	1007:16	1007:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1007:16	1007:16	5	td = & tif -> tif_dir
ASSIGN	1007:16	1007:21	6	td = & tif -> tif_dir
LVAL	1007:16	1007:16	7	td
NAME	1007:16	1007:16	8	td
LEAF_NODE	1007:16	1007:16	9	td
ASSIGN_OP	1007:19	1007:19	7	=
LEAF_NODE	1007:19	1007:19	8	=
RVAL	1007:21	1007:21	7	& tif -> tif_dir
UNARY_EXPR	1007:21	1007:22	8	& tif -> tif_dir
UNARY_OPERATOR	1007:21	1007:21	9	&
LEAF_NODE	1007:21	1007:21	10	&
FIELD	1007:22	1007:27	9	tif -> tif_dir
LEAF_NODE	1007:22	1007:22	10	tif
LEAF_NODE	1007:25	1007:25	10	->
LEAF_NODE	1007:27	1007:27	10	tif_dir
LEAF_NODE	1007:34	1007:34	4	;
SELECTION	1010:8	1011:12	3	
KEYWORD	1010:8	1010:8	4	if
LEAF_NODE	1010:8	1010:8	5	if
LEAF_NODE	1010:10	1010:10	4	(
CONDITION	1010:12	1010:12	4	tif -> tif_dir . td_bitspersample == 12
EXPR	1010:12	1010:45	5	tif -> tif_dir . td_bitspersample == 12
FIELD	1010:12	1010:25	6	tif -> tif_dir . td_bitspersample
LEAF_NODE	1010:12	1010:12	7	tif
LEAF_NODE	1010:15	1010:15	7	->
LEAF_NODE	1010:17	1010:17	7	tif_dir
LEAF_NODE	1010:24	1010:24	7	.
LEAF_NODE	1010:25	1010:25	7	td_bitspersample
EQ_OPERATOR	1010:42	1010:42	6	==
LEAF_NODE	1010:42	1010:42	7	==
FIELD	1010:45	1010:45	6	12
LEAF_NODE	1010:45	1010:45	7	12
LEAF_NODE	1010:48	1010:48	4	)
STATEMENTS	1011:12	1011:12	4	
JUMP_STATEMENT	1011:12	1011:64	5	return TIFFReInitJPEG_12 ( tif , COMPRESSION_JPEG , 0 ) ;
KEYWORD	1011:12	1011:12	6	return
LEAF_NODE	1011:12	1011:12	7	return
DESTINATION	1011:19	1011:19	6	TIFFReInitJPEG_12 ( tif , COMPRESSION_JPEG , 0 )
EXPR	1011:19	1011:19	7	TIFFReInitJPEG_12 ( tif , COMPRESSION_JPEG , 0 )
FUNCTION_CALL	1011:19	1011:63	8	TIFFReInitJPEG_12 ( tif , COMPRESSION_JPEG , 0 )
CALLEE	1011:19	1011:19	9	TIFFReInitJPEG_12
LEAF_NODE	1011:19	1011:19	10	TIFFReInitJPEG_12
LEAF_NODE	1011:36	1011:36	9	(
ARGUMENT	1011:38	1011:38	9	tif
FIELD	1011:38	1011:38	10	tif
LEAF_NODE	1011:38	1011:38	11	tif
LEAF_NODE	1011:41	1011:41	9	,
ARGUMENT	1011:43	1011:43	9	COMPRESSION_JPEG
FIELD	1011:43	1011:43	10	COMPRESSION_JPEG
LEAF_NODE	1011:43	1011:43	11	COMPRESSION_JPEG
LEAF_NODE	1011:59	1011:59	9	,
ARGUMENT	1011:61	1011:61	9	0
FIELD	1011:61	1011:61	10	0
LEAF_NODE	1011:61	1011:61	11	0
LEAF_NODE	1011:63	1011:63	9	)
LEAF_NODE	1011:64	1011:64	6	;
EXPR_STATEMENT	1014:1	1014:35	3	JPEGInitializeLibJPEG ( tif , TRUE ) ;
EXPR	1014:1	1014:1	4	JPEGInitializeLibJPEG ( tif , TRUE )
FUNCTION_CALL	1014:1	1014:34	5	JPEGInitializeLibJPEG ( tif , TRUE )
CALLEE	1014:1	1014:1	6	JPEGInitializeLibJPEG
LEAF_NODE	1014:1	1014:1	7	JPEGInitializeLibJPEG
LEAF_NODE	1014:22	1014:22	6	(
ARGUMENT	1014:24	1014:24	6	tif
FIELD	1014:24	1014:24	7	tif
LEAF_NODE	1014:24	1014:24	8	tif
LEAF_NODE	1014:27	1014:27	6	,
ARGUMENT	1014:29	1014:29	6	TRUE
FIELD	1014:29	1014:29	7	TRUE
LEAF_NODE	1014:29	1014:29	8	TRUE
LEAF_NODE	1014:34	1014:34	6	)
LEAF_NODE	1014:35	1014:35	4	;
EXPR_STATEMENT	1016:1	1016:19	3	assert ( sp != NULL ) ;
EXPR	1016:1	1016:1	4	assert ( sp != NULL )
FUNCTION_CALL	1016:1	1016:18	5	assert ( sp != NULL )
CALLEE	1016:1	1016:1	6	assert
LEAF_NODE	1016:1	1016:1	7	assert
LEAF_NODE	1016:7	1016:7	6	(
ARGUMENT	1016:8	1016:14	6	sp != NULL
FIELD	1016:8	1016:8	7	sp
LEAF_NODE	1016:8	1016:8	8	sp
EQ_OPERATOR	1016:11	1016:11	7	!=
LEAF_NODE	1016:11	1016:11	8	!=
FIELD	1016:14	1016:14	7	NULL
LEAF_NODE	1016:14	1016:14	8	NULL
LEAF_NODE	1016:18	1016:18	6	)
LEAF_NODE	1016:19	1016:19	4	;
EXPR_STATEMENT	1017:1	1017:39	3	assert ( sp -> cinfo . comm . is_decompressor ) ;
EXPR	1017:1	1017:1	4	assert ( sp -> cinfo . comm . is_decompressor )
FUNCTION_CALL	1017:1	1017:38	5	assert ( sp -> cinfo . comm . is_decompressor )
CALLEE	1017:1	1017:1	6	assert
LEAF_NODE	1017:1	1017:1	7	assert
LEAF_NODE	1017:7	1017:7	6	(
ARGUMENT	1017:8	1017:8	6	sp -> cinfo . comm . is_decompressor
FIELD	1017:8	1017:23	7	sp -> cinfo . comm . is_decompressor
LEAF_NODE	1017:8	1017:8	8	sp
LEAF_NODE	1017:10	1017:10	8	->
LEAF_NODE	1017:12	1017:12	8	cinfo
LEAF_NODE	1017:17	1017:17	8	.
LEAF_NODE	1017:18	1017:18	8	comm
LEAF_NODE	1017:22	1017:22	8	.
LEAF_NODE	1017:23	1017:23	8	is_decompressor
LEAF_NODE	1017:38	1017:38	6	)
LEAF_NODE	1017:39	1017:39	4	;
SELECTION	1020:1	1020:41	3	
KEYWORD	1020:1	1020:1	4	if
LEAF_NODE	1020:1	1020:1	5	if
LEAF_NODE	1020:4	1020:4	4	(
CONDITION	1020:5	1020:5	4	TIFFFieldSet ( tif , FIELD_JPEGTABLES )
EXPR	1020:5	1020:5	5	TIFFFieldSet ( tif , FIELD_JPEGTABLES )
FUNCTION_CALL	1020:5	1020:38	6	TIFFFieldSet ( tif , FIELD_JPEGTABLES )
CALLEE	1020:5	1020:5	7	TIFFFieldSet
LEAF_NODE	1020:5	1020:5	8	TIFFFieldSet
LEAF_NODE	1020:17	1020:17	7	(
ARGUMENT	1020:18	1020:18	7	tif
FIELD	1020:18	1020:18	8	tif
LEAF_NODE	1020:18	1020:18	9	tif
LEAF_NODE	1020:21	1020:21	7	,
ARGUMENT	1020:22	1020:22	7	FIELD_JPEGTABLES
FIELD	1020:22	1020:22	8	FIELD_JPEGTABLES
LEAF_NODE	1020:22	1020:22	9	FIELD_JPEGTABLES
LEAF_NODE	1020:38	1020:38	7	)
LEAF_NODE	1020:39	1020:39	4	)
STATEMENTS	1020:41	1026:1	4	
LEAF_NODE	1020:41	1020:41	5	{
STATEMENTS	1021:2	1022:2	5	
EXPR_STATEMENT	1021:2	1021:25	6	TIFFjpeg_tables_src ( sp ) ;
EXPR	1021:2	1021:2	7	TIFFjpeg_tables_src ( sp )
FUNCTION_CALL	1021:2	1021:24	8	TIFFjpeg_tables_src ( sp )
CALLEE	1021:2	1021:2	9	TIFFjpeg_tables_src
LEAF_NODE	1021:2	1021:2	10	TIFFjpeg_tables_src
LEAF_NODE	1021:21	1021:21	9	(
ARGUMENT	1021:22	1021:22	9	sp
FIELD	1021:22	1021:22	10	sp
LEAF_NODE	1021:22	1021:22	11	sp
LEAF_NODE	1021:24	1021:24	9	)
LEAF_NODE	1021:25	1021:25	7	;
SELECTION	1022:2	1022:64	6	
KEYWORD	1022:2	1022:2	7	if
LEAF_NODE	1022:2	1022:2	8	if
LEAF_NODE	1022:4	1022:4	7	(
CONDITION	1022:5	1022:5	7	TIFFjpeg_read_header ( sp , FALSE ) != JPEG_HEADER_TABLES_ONLY
EXPR	1022:5	1022:39	8	TIFFjpeg_read_header ( sp , FALSE ) != JPEG_HEADER_TABLES_ONLY
FUNCTION_CALL	1022:5	1022:34	9	TIFFjpeg_read_header ( sp , FALSE )
CALLEE	1022:5	1022:5	10	TIFFjpeg_read_header
LEAF_NODE	1022:5	1022:5	11	TIFFjpeg_read_header
LEAF_NODE	1022:25	1022:25	10	(
ARGUMENT	1022:26	1022:26	10	sp
FIELD	1022:26	1022:26	11	sp
LEAF_NODE	1022:26	1022:26	12	sp
LEAF_NODE	1022:28	1022:28	10	,
ARGUMENT	1022:29	1022:29	10	FALSE
FIELD	1022:29	1022:29	11	FALSE
LEAF_NODE	1022:29	1022:29	12	FALSE
LEAF_NODE	1022:34	1022:34	10	)
EQ_OPERATOR	1022:36	1022:36	9	!=
LEAF_NODE	1022:36	1022:36	10	!=
FIELD	1022:39	1022:39	9	JPEG_HEADER_TABLES_ONLY
LEAF_NODE	1022:39	1022:39	10	JPEG_HEADER_TABLES_ONLY
LEAF_NODE	1022:62	1022:62	7	)
STATEMENTS	1022:64	1025:2	7	
LEAF_NODE	1022:64	1022:64	8	{
STATEMENTS	1023:3	1024:3	8	
EXPR_STATEMENT	1023:3	1023:81	9	TIFFErrorExt ( tif -> tif_clientdata , "JPEGSetupDecode" , "Bogus JPEGTables field" ) ;
EXPR	1023:3	1023:3	10	TIFFErrorExt ( tif -> tif_clientdata , "JPEGSetupDecode" , "Bogus JPEGTables field" )
FUNCTION_CALL	1023:3	1023:80	11	TIFFErrorExt ( tif -> tif_clientdata , "JPEGSetupDecode" , "Bogus JPEGTables field" )
CALLEE	1023:3	1023:3	12	TIFFErrorExt
LEAF_NODE	1023:3	1023:3	13	TIFFErrorExt
LEAF_NODE	1023:15	1023:15	12	(
ARGUMENT	1023:16	1023:16	12	tif -> tif_clientdata
FIELD	1023:16	1023:21	13	tif -> tif_clientdata
LEAF_NODE	1023:16	1023:16	14	tif
LEAF_NODE	1023:19	1023:19	14	->
LEAF_NODE	1023:21	1023:21	14	tif_clientdata
LEAF_NODE	1023:35	1023:35	12	,
ARGUMENT	1023:37	1023:37	12	"JPEGSetupDecode"
FIELD	1023:37	1023:37	13	"JPEGSetupDecode"
LEAF_NODE	1023:37	1023:37	14	"JPEGSetupDecode"
LEAF_NODE	1023:54	1023:54	12	,
ARGUMENT	1023:56	1023:56	12	"Bogus JPEGTables field"
FIELD	1023:56	1023:56	13	"Bogus JPEGTables field"
LEAF_NODE	1023:56	1023:56	14	"Bogus JPEGTables field"
LEAF_NODE	1023:80	1023:80	12	)
LEAF_NODE	1023:81	1023:81	10	;
JUMP_STATEMENT	1024:3	1024:13	9	return ( 0 ) ;
KEYWORD	1024:3	1024:3	10	return
LEAF_NODE	1024:3	1024:3	11	return
DESTINATION	1024:10	1024:10	10	( 0 )
EXPR	1024:10	1024:12	11	( 0 )
LEAF_NODE	1024:10	1024:10	12	(
FIELD	1024:11	1024:11	12	0
LEAF_NODE	1024:11	1024:11	13	0
LEAF_NODE	1024:12	1024:12	12	)
LEAF_NODE	1024:13	1024:13	10	;
LEAF_NODE	1025:2	1025:2	8	}
LEAF_NODE	1026:1	1026:1	5	}
EXPR_STATEMENT	1029:1	1029:37	3	sp -> photometric = td -> td_photometric ;
EXPR	1029:1	1029:1	4	sp -> photometric = td -> td_photometric
ASSIGN	1029:1	1029:19	5	sp -> photometric = td -> td_photometric
LVAL	1029:1	1029:1	6	sp -> photometric
FIELD	1029:1	1029:5	7	sp -> photometric
LEAF_NODE	1029:1	1029:1	8	sp
LEAF_NODE	1029:3	1029:3	8	->
LEAF_NODE	1029:5	1029:5	8	photometric
ASSIGN_OP	1029:17	1029:17	6	=
LEAF_NODE	1029:17	1029:17	7	=
RVAL	1029:19	1029:19	6	td -> td_photometric
FIELD	1029:19	1029:23	7	td -> td_photometric
LEAF_NODE	1029:19	1029:19	8	td
LEAF_NODE	1029:21	1029:21	8	->
LEAF_NODE	1029:23	1029:23	8	td_photometric
LEAF_NODE	1029:37	1029:37	4	;
SELECTION	1030:1	1030:26	3	
KEYWORD	1030:1	1030:1	4	switch
LEAF_NODE	1030:1	1030:1	5	switch
LEAF_NODE	1030:8	1030:8	4	(
CONDITION	1030:9	1030:9	4	sp -> photometric
EXPR	1030:9	1030:9	5	sp -> photometric
FIELD	1030:9	1030:13	6	sp -> photometric
LEAF_NODE	1030:9	1030:9	7	sp
LEAF_NODE	1030:11	1030:11	7	->
LEAF_NODE	1030:13	1030:13	7	photometric
LEAF_NODE	1030:24	1030:24	4	)
STATEMENTS	1030:26	1040:1	4	
LEAF_NODE	1030:26	1030:26	5	{
STATEMENTS	1031:1	1039:2	5	
LABEL	1031:1	1031:23	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	1031:1	1031:1	7	case
LEAF_NODE	1031:6	1031:6	7	PHOTOMETRIC_YCBCR
LEAF_NODE	1031:23	1031:23	7	:
EXPR_STATEMENT	1032:2	1032:45	6	sp -> h_sampling = td -> td_ycbcrsubsampling [ 0 ] ;
EXPR	1032:2	1032:2	7	sp -> h_sampling = td -> td_ycbcrsubsampling [ 0 ]
ASSIGN	1032:2	1032:19	8	sp -> h_sampling = td -> td_ycbcrsubsampling [ 0 ]
LVAL	1032:2	1032:2	9	sp -> h_sampling
FIELD	1032:2	1032:6	10	sp -> h_sampling
LEAF_NODE	1032:2	1032:2	11	sp
LEAF_NODE	1032:4	1032:4	11	->
LEAF_NODE	1032:6	1032:6	11	h_sampling
ASSIGN_OP	1032:17	1032:17	9	=
LEAF_NODE	1032:17	1032:17	10	=
RVAL	1032:19	1032:19	9	td -> td_ycbcrsubsampling [ 0 ]
FIELD	1032:19	1032:44	10	td -> td_ycbcrsubsampling [ 0 ]
LEAF_NODE	1032:19	1032:19	11	td
LEAF_NODE	1032:21	1032:21	11	->
LEAF_NODE	1032:23	1032:23	11	td_ycbcrsubsampling
LEAF_NODE	1032:42	1032:42	11	[
EXPR	1032:43	1032:43	11	0
FIELD	1032:43	1032:43	12	0
LEAF_NODE	1032:43	1032:43	13	0
LEAF_NODE	1032:44	1032:44	11	]
LEAF_NODE	1032:45	1032:45	7	;
EXPR_STATEMENT	1033:2	1033:45	6	sp -> v_sampling = td -> td_ycbcrsubsampling [ 1 ] ;
EXPR	1033:2	1033:2	7	sp -> v_sampling = td -> td_ycbcrsubsampling [ 1 ]
ASSIGN	1033:2	1033:19	8	sp -> v_sampling = td -> td_ycbcrsubsampling [ 1 ]
LVAL	1033:2	1033:2	9	sp -> v_sampling
FIELD	1033:2	1033:6	10	sp -> v_sampling
LEAF_NODE	1033:2	1033:2	11	sp
LEAF_NODE	1033:4	1033:4	11	->
LEAF_NODE	1033:6	1033:6	11	v_sampling
ASSIGN_OP	1033:17	1033:17	9	=
LEAF_NODE	1033:17	1033:17	10	=
RVAL	1033:19	1033:19	9	td -> td_ycbcrsubsampling [ 1 ]
FIELD	1033:19	1033:44	10	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	1033:19	1033:19	11	td
LEAF_NODE	1033:21	1033:21	11	->
LEAF_NODE	1033:23	1033:23	11	td_ycbcrsubsampling
LEAF_NODE	1033:42	1033:42	11	[
EXPR	1033:43	1033:43	11	1
FIELD	1033:43	1033:43	12	1
LEAF_NODE	1033:43	1033:43	13	1
LEAF_NODE	1033:44	1033:44	11	]
LEAF_NODE	1033:45	1033:45	7	;
JUMP_STATEMENT	1034:2	1034:7	6	break DESTINATION ;
KEYWORD	1034:2	1034:2	7	break
LEAF_NODE	1034:2	1034:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1034:7	1034:7	7	;
LABEL	1035:1	1035:8	6	default :
LEAF_NODE	1035:1	1035:1	7	default
LEAF_NODE	1035:8	1035:8	7	:
EXPR_STATEMENT	1037:2	1037:20	6	sp -> h_sampling = 1 ;
EXPR	1037:2	1037:2	7	sp -> h_sampling = 1
ASSIGN	1037:2	1037:19	8	sp -> h_sampling = 1
LVAL	1037:2	1037:2	9	sp -> h_sampling
FIELD	1037:2	1037:6	10	sp -> h_sampling
LEAF_NODE	1037:2	1037:2	11	sp
LEAF_NODE	1037:4	1037:4	11	->
LEAF_NODE	1037:6	1037:6	11	h_sampling
ASSIGN_OP	1037:17	1037:17	9	=
LEAF_NODE	1037:17	1037:17	10	=
RVAL	1037:19	1037:19	9	1
FIELD	1037:19	1037:19	10	1
LEAF_NODE	1037:19	1037:19	11	1
LEAF_NODE	1037:20	1037:20	7	;
EXPR_STATEMENT	1038:2	1038:20	6	sp -> v_sampling = 1 ;
EXPR	1038:2	1038:2	7	sp -> v_sampling = 1
ASSIGN	1038:2	1038:19	8	sp -> v_sampling = 1
LVAL	1038:2	1038:2	9	sp -> v_sampling
FIELD	1038:2	1038:6	10	sp -> v_sampling
LEAF_NODE	1038:2	1038:2	11	sp
LEAF_NODE	1038:4	1038:4	11	->
LEAF_NODE	1038:6	1038:6	11	v_sampling
ASSIGN_OP	1038:17	1038:17	9	=
LEAF_NODE	1038:17	1038:17	10	=
RVAL	1038:19	1038:19	9	1
FIELD	1038:19	1038:19	10	1
LEAF_NODE	1038:19	1038:19	11	1
LEAF_NODE	1038:20	1038:20	7	;
JUMP_STATEMENT	1039:2	1039:7	6	break DESTINATION ;
KEYWORD	1039:2	1039:2	7	break
LEAF_NODE	1039:2	1039:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1039:7	1039:7	7	;
LEAF_NODE	1040:1	1040:1	5	}
EXPR_STATEMENT	1043:1	1043:22	3	TIFFjpeg_data_src ( sp ) ;
EXPR	1043:1	1043:1	4	TIFFjpeg_data_src ( sp )
FUNCTION_CALL	1043:1	1043:21	5	TIFFjpeg_data_src ( sp )
CALLEE	1043:1	1043:1	6	TIFFjpeg_data_src
LEAF_NODE	1043:1	1043:1	7	TIFFjpeg_data_src
LEAF_NODE	1043:18	1043:18	6	(
ARGUMENT	1043:19	1043:19	6	sp
FIELD	1043:19	1043:19	7	sp
LEAF_NODE	1043:19	1043:19	8	sp
LEAF_NODE	1043:21	1043:21	6	)
LEAF_NODE	1043:22	1043:22	4	;
EXPR_STATEMENT	1044:1	1044:40	3	tif -> tif_postdecode = _TIFFNoPostDecode ;
EXPR	1044:1	1044:1	4	tif -> tif_postdecode = _TIFFNoPostDecode
ASSIGN	1044:1	1044:23	5	tif -> tif_postdecode = _TIFFNoPostDecode
LVAL	1044:1	1044:1	6	tif -> tif_postdecode
FIELD	1044:1	1044:6	7	tif -> tif_postdecode
LEAF_NODE	1044:1	1044:1	8	tif
LEAF_NODE	1044:4	1044:4	8	->
LEAF_NODE	1044:6	1044:6	8	tif_postdecode
ASSIGN_OP	1044:21	1044:21	6	=
LEAF_NODE	1044:21	1044:21	7	=
RVAL	1044:23	1044:23	6	_TIFFNoPostDecode
FIELD	1044:23	1044:23	7	_TIFFNoPostDecode
LEAF_NODE	1044:23	1044:23	8	_TIFFNoPostDecode
LEAF_NODE	1044:40	1044:40	4	;
JUMP_STATEMENT	1045:1	1045:11	3	return ( 1 ) ;
KEYWORD	1045:1	1045:1	4	return
LEAF_NODE	1045:1	1045:1	5	return
DESTINATION	1045:8	1045:8	4	( 1 )
EXPR	1045:8	1045:10	5	( 1 )
LEAF_NODE	1045:8	1045:8	6	(
FIELD	1045:9	1045:9	6	1
LEAF_NODE	1045:9	1045:9	7	1
LEAF_NODE	1045:10	1045:10	6	)
LEAF_NODE	1045:11	1045:11	4	;
LEAF_NODE	1046:0	1046:0	2	}
FUNCTION_DEF	1055:0	1082:0	1	
RETURN_TYPE	1055:0	1055:0	2	int
TYPE_NAME	1055:0	1055:0	3	int
LEAF_NODE	1055:0	1055:0	4	int
FUNCTION_NAME	1055:4	1055:4	2	TIFFJPEGIsFullStripRequired
LEAF_NODE	1055:4	1055:4	3	TIFFJPEGIsFullStripRequired
PARAMETER_LIST	1055:31	1055:41	2	( TIFF * tif )
LEAF_NODE	1055:31	1055:31	3	(
PARAMETER_DECL	1055:32	1055:38	3	TIFF * tif
TYPE	1055:32	1055:36	4	TIFF *
TYPE_NAME	1055:32	1055:32	5	TIFF
LEAF_NODE	1055:32	1055:32	6	TIFF
POINTER	1055:36	1055:36	5	*
LEAF_NODE	1055:36	1055:36	6	*
NAME	1055:38	1055:38	4	tif
LEAF_NODE	1055:38	1055:38	5	tif
LEAF_NODE	1055:41	1055:41	3	)
LEAF_NODE	1056:0	1056:0	2	{
STATEMENTS	1057:4	1081:4	2	
SIMPLE_DECL	1057:4	1057:11	3	int ret ;
VAR_DECL	1057:4	1057:8	4	int ret
TYPE	1057:4	1057:4	5	int
TYPE_NAME	1057:4	1057:4	6	int
LEAF_NODE	1057:4	1057:4	7	int
NAME	1057:8	1057:8	5	ret
LEAF_NODE	1057:8	1057:8	6	ret
LEAF_NODE	1057:11	1057:11	4	;
SIMPLE_DECL	1058:4	1058:19	3	JPEGState state ;
VAR_DECL	1058:4	1058:14	4	JPEGState state
TYPE	1058:4	1058:4	5	JPEGState
TYPE_NAME	1058:4	1058:4	6	JPEGState
LEAF_NODE	1058:4	1058:4	7	JPEGState
NAME	1058:14	1058:14	5	state
LEAF_NODE	1058:14	1058:14	6	state
LEAF_NODE	1058:19	1058:19	4	;
SELECTION	1061:4	1062:8	3	
KEYWORD	1061:4	1061:4	4	if
LEAF_NODE	1061:4	1061:4	5	if
LEAF_NODE	1061:6	1061:6	4	(
CONDITION	1061:8	1061:8	4	tif -> tif_dir . td_bitspersample == 12
EXPR	1061:8	1061:41	5	tif -> tif_dir . td_bitspersample == 12
FIELD	1061:8	1061:21	6	tif -> tif_dir . td_bitspersample
LEAF_NODE	1061:8	1061:8	7	tif
LEAF_NODE	1061:11	1061:11	7	->
LEAF_NODE	1061:13	1061:13	7	tif_dir
LEAF_NODE	1061:20	1061:20	7	.
LEAF_NODE	1061:21	1061:21	7	td_bitspersample
EQ_OPERATOR	1061:38	1061:38	6	==
LEAF_NODE	1061:38	1061:38	7	==
FIELD	1061:41	1061:41	6	12
LEAF_NODE	1061:41	1061:41	7	12
LEAF_NODE	1061:44	1061:44	4	)
STATEMENTS	1062:8	1062:8	4	
JUMP_STATEMENT	1062:8	1062:52	5	return TIFFJPEGIsFullStripRequired_12 ( tif ) ;
KEYWORD	1062:8	1062:8	6	return
LEAF_NODE	1062:8	1062:8	7	return
DESTINATION	1062:15	1062:15	6	TIFFJPEGIsFullStripRequired_12 ( tif )
EXPR	1062:15	1062:15	7	TIFFJPEGIsFullStripRequired_12 ( tif )
FUNCTION_CALL	1062:15	1062:51	8	TIFFJPEGIsFullStripRequired_12 ( tif )
CALLEE	1062:15	1062:15	9	TIFFJPEGIsFullStripRequired_12
LEAF_NODE	1062:15	1062:15	10	TIFFJPEGIsFullStripRequired_12
LEAF_NODE	1062:45	1062:45	9	(
ARGUMENT	1062:47	1062:47	9	tif
FIELD	1062:47	1062:47	10	tif
LEAF_NODE	1062:47	1062:47	11	tif
LEAF_NODE	1062:51	1062:51	9	)
LEAF_NODE	1062:52	1062:52	6	;
EXPR_STATEMENT	1065:4	1065:40	3	memset ( & state , 0 , sizeof ( JPEGState ) ) ;
EXPR	1065:4	1065:4	4	memset ( & state , 0 , sizeof ( JPEGState ) )
FUNCTION_CALL	1065:4	1065:39	5	memset ( & state , 0 , sizeof ( JPEGState ) )
CALLEE	1065:4	1065:4	6	memset
LEAF_NODE	1065:4	1065:4	7	memset
LEAF_NODE	1065:10	1065:10	6	(
ARGUMENT	1065:11	1065:11	6	& state
UNARY_EXPR	1065:11	1065:12	7	& state
UNARY_OPERATOR	1065:11	1065:11	8	&
LEAF_NODE	1065:11	1065:11	9	&
FIELD	1065:12	1065:12	8	state
LEAF_NODE	1065:12	1065:12	9	state
LEAF_NODE	1065:17	1065:17	6	,
ARGUMENT	1065:19	1065:19	6	0
FIELD	1065:19	1065:19	7	0
LEAF_NODE	1065:19	1065:19	8	0
LEAF_NODE	1065:20	1065:20	6	,
ARGUMENT	1065:22	1065:22	6	sizeof ( JPEGState )
FUNCTION_CALL	1065:22	1065:38	7	sizeof ( JPEGState )
CALLEE	1065:22	1065:22	8	sizeof
LEAF_NODE	1065:22	1065:22	9	sizeof
LEAF_NODE	1065:28	1065:28	8	(
ARGUMENT	1065:29	1065:29	8	JPEGState
FIELD	1065:29	1065:29	9	JPEGState
LEAF_NODE	1065:29	1065:29	10	JPEGState
LEAF_NODE	1065:38	1065:38	8	)
LEAF_NODE	1065:39	1065:39	6	)
LEAF_NODE	1065:40	1065:40	4	;
EXPR_STATEMENT	1066:4	1066:19	3	state . tif = tif ;
EXPR	1066:4	1066:4	4	state . tif = tif
ASSIGN	1066:4	1066:16	5	state . tif = tif
LVAL	1066:4	1066:4	6	state . tif
FIELD	1066:4	1066:10	7	state . tif
LEAF_NODE	1066:4	1066:4	8	state
LEAF_NODE	1066:9	1066:9	8	.
LEAF_NODE	1066:10	1066:10	8	tif
ASSIGN_OP	1066:14	1066:14	6	=
LEAF_NODE	1066:14	1066:14	7	=
RVAL	1066:16	1066:16	6	tif
FIELD	1066:16	1066:16	7	tif
LEAF_NODE	1066:16	1066:16	8	tif
LEAF_NODE	1066:19	1066:19	4	;
EXPR_STATEMENT	1068:4	1068:38	3	TIFFjpeg_create_decompress ( & state ) ;
EXPR	1068:4	1068:4	4	TIFFjpeg_create_decompress ( & state )
FUNCTION_CALL	1068:4	1068:37	5	TIFFjpeg_create_decompress ( & state )
CALLEE	1068:4	1068:4	6	TIFFjpeg_create_decompress
LEAF_NODE	1068:4	1068:4	7	TIFFjpeg_create_decompress
LEAF_NODE	1068:30	1068:30	6	(
ARGUMENT	1068:31	1068:31	6	& state
UNARY_EXPR	1068:31	1068:32	7	& state
UNARY_OPERATOR	1068:31	1068:31	8	&
LEAF_NODE	1068:31	1068:31	9	&
FIELD	1068:32	1068:32	8	state
LEAF_NODE	1068:32	1068:32	9	state
LEAF_NODE	1068:37	1068:37	6	)
LEAF_NODE	1068:38	1068:38	4	;
EXPR_STATEMENT	1070:4	1070:29	3	TIFFjpeg_data_src ( & state ) ;
EXPR	1070:4	1070:4	4	TIFFjpeg_data_src ( & state )
FUNCTION_CALL	1070:4	1070:28	5	TIFFjpeg_data_src ( & state )
CALLEE	1070:4	1070:4	6	TIFFjpeg_data_src
LEAF_NODE	1070:4	1070:4	7	TIFFjpeg_data_src
LEAF_NODE	1070:21	1070:21	6	(
ARGUMENT	1070:22	1070:22	6	& state
UNARY_EXPR	1070:22	1070:23	7	& state
UNARY_OPERATOR	1070:22	1070:22	8	&
LEAF_NODE	1070:22	1070:22	9	&
FIELD	1070:23	1070:23	8	state
LEAF_NODE	1070:23	1070:23	9	state
LEAF_NODE	1070:28	1070:28	6	)
LEAF_NODE	1070:29	1070:29	4	;
SELECTION	1072:4	1073:4	3	
KEYWORD	1072:4	1072:4	4	if
LEAF_NODE	1072:4	1072:4	5	if
LEAF_NODE	1072:7	1072:7	4	(
CONDITION	1072:8	1072:8	4	TIFFjpeg_read_header ( & state , TRUE ) != JPEG_HEADER_OK
EXPR	1072:8	1072:46	5	TIFFjpeg_read_header ( & state , TRUE ) != JPEG_HEADER_OK
FUNCTION_CALL	1072:8	1072:41	6	TIFFjpeg_read_header ( & state , TRUE )
CALLEE	1072:8	1072:8	7	TIFFjpeg_read_header
LEAF_NODE	1072:8	1072:8	8	TIFFjpeg_read_header
LEAF_NODE	1072:28	1072:28	7	(
ARGUMENT	1072:29	1072:29	7	& state
UNARY_EXPR	1072:29	1072:30	8	& state
UNARY_OPERATOR	1072:29	1072:29	9	&
LEAF_NODE	1072:29	1072:29	10	&
FIELD	1072:30	1072:30	9	state
LEAF_NODE	1072:30	1072:30	10	state
LEAF_NODE	1072:35	1072:35	7	,
ARGUMENT	1072:37	1072:37	7	TRUE
FIELD	1072:37	1072:37	8	TRUE
LEAF_NODE	1072:37	1072:37	9	TRUE
LEAF_NODE	1072:41	1072:41	7	)
EQ_OPERATOR	1072:43	1072:43	6	!=
LEAF_NODE	1072:43	1072:43	7	!=
FIELD	1072:46	1072:46	6	JPEG_HEADER_OK
LEAF_NODE	1072:46	1072:46	7	JPEG_HEADER_OK
LEAF_NODE	1072:60	1072:60	4	)
STATEMENTS	1073:4	1076:4	4	
LEAF_NODE	1073:4	1073:4	5	{
STATEMENTS	1074:8	1075:8	5	
EXPR_STATEMENT	1074:8	1074:32	6	TIFFjpeg_destroy ( & state ) ;
EXPR	1074:8	1074:8	7	TIFFjpeg_destroy ( & state )
FUNCTION_CALL	1074:8	1074:31	8	TIFFjpeg_destroy ( & state )
CALLEE	1074:8	1074:8	9	TIFFjpeg_destroy
LEAF_NODE	1074:8	1074:8	10	TIFFjpeg_destroy
LEAF_NODE	1074:24	1074:24	9	(
ARGUMENT	1074:25	1074:25	9	& state
UNARY_EXPR	1074:25	1074:26	10	& state
UNARY_OPERATOR	1074:25	1074:25	11	&
LEAF_NODE	1074:25	1074:25	12	&
FIELD	1074:26	1074:26	11	state
LEAF_NODE	1074:26	1074:26	12	state
LEAF_NODE	1074:31	1074:31	9	)
LEAF_NODE	1074:32	1074:32	7	;
JUMP_STATEMENT	1075:8	1075:18	6	return ( 0 ) ;
KEYWORD	1075:8	1075:8	7	return
LEAF_NODE	1075:8	1075:8	8	return
DESTINATION	1075:15	1075:15	7	( 0 )
EXPR	1075:15	1075:17	8	( 0 )
LEAF_NODE	1075:15	1075:15	9	(
FIELD	1075:16	1075:16	9	0
LEAF_NODE	1075:16	1075:16	10	0
LEAF_NODE	1075:17	1075:17	9	)
LEAF_NODE	1075:18	1075:18	7	;
LEAF_NODE	1076:4	1076:4	5	}
EXPR_STATEMENT	1077:4	1077:45	3	ret = TIFFjpeg_has_multiple_scans ( & state ) ;
EXPR	1077:4	1077:4	4	ret = TIFFjpeg_has_multiple_scans ( & state )
ASSIGN	1077:4	1077:10	5	ret = TIFFjpeg_has_multiple_scans ( & state )
LVAL	1077:4	1077:4	6	ret
FIELD	1077:4	1077:4	7	ret
LEAF_NODE	1077:4	1077:4	8	ret
ASSIGN_OP	1077:8	1077:8	6	=
LEAF_NODE	1077:8	1077:8	7	=
RVAL	1077:10	1077:10	6	TIFFjpeg_has_multiple_scans ( & state )
FUNCTION_CALL	1077:10	1077:44	7	TIFFjpeg_has_multiple_scans ( & state )
CALLEE	1077:10	1077:10	8	TIFFjpeg_has_multiple_scans
LEAF_NODE	1077:10	1077:10	9	TIFFjpeg_has_multiple_scans
LEAF_NODE	1077:37	1077:37	8	(
ARGUMENT	1077:38	1077:38	8	& state
UNARY_EXPR	1077:38	1077:39	9	& state
UNARY_OPERATOR	1077:38	1077:38	10	&
LEAF_NODE	1077:38	1077:38	11	&
FIELD	1077:39	1077:39	10	state
LEAF_NODE	1077:39	1077:39	11	state
LEAF_NODE	1077:44	1077:44	8	)
LEAF_NODE	1077:45	1077:45	4	;
EXPR_STATEMENT	1079:4	1079:28	3	TIFFjpeg_destroy ( & state ) ;
EXPR	1079:4	1079:4	4	TIFFjpeg_destroy ( & state )
FUNCTION_CALL	1079:4	1079:27	5	TIFFjpeg_destroy ( & state )
CALLEE	1079:4	1079:4	6	TIFFjpeg_destroy
LEAF_NODE	1079:4	1079:4	7	TIFFjpeg_destroy
LEAF_NODE	1079:20	1079:20	6	(
ARGUMENT	1079:21	1079:21	6	& state
UNARY_EXPR	1079:21	1079:22	7	& state
UNARY_OPERATOR	1079:21	1079:21	8	&
LEAF_NODE	1079:21	1079:21	9	&
FIELD	1079:22	1079:22	8	state
LEAF_NODE	1079:22	1079:22	9	state
LEAF_NODE	1079:27	1079:27	6	)
LEAF_NODE	1079:28	1079:28	4	;
JUMP_STATEMENT	1081:4	1081:14	3	return ret ;
KEYWORD	1081:4	1081:4	4	return
LEAF_NODE	1081:4	1081:4	5	return
DESTINATION	1081:11	1081:11	4	ret
EXPR	1081:11	1081:11	5	ret
FIELD	1081:11	1081:11	6	ret
LEAF_NODE	1081:11	1081:11	7	ret
LEAF_NODE	1081:14	1081:14	4	;
LEAF_NODE	1082:0	1082:0	2	}
FUNCTION_DEF	1087:13	1312:0	1	
RETURN_TYPE	1087:13	1087:20	2	static int
LEAF_NODE	1087:13	1087:13	3	static
TYPE_NAME	1087:20	1087:20	3	int
LEAF_NODE	1087:20	1087:20	4	int
FUNCTION_NAME	1088:0	1088:0	2	JPEGPreDecode
LEAF_NODE	1088:0	1088:0	3	JPEGPreDecode
PARAMETER_LIST	1088:13	1088:33	2	( TIFF * tif , uint16 s )
LEAF_NODE	1088:13	1088:13	3	(
PARAMETER_DECL	1088:14	1088:20	3	TIFF * tif
TYPE	1088:14	1088:18	4	TIFF *
TYPE_NAME	1088:14	1088:14	5	TIFF
LEAF_NODE	1088:14	1088:14	6	TIFF
POINTER	1088:18	1088:18	5	*
LEAF_NODE	1088:18	1088:18	6	*
NAME	1088:20	1088:20	4	tif
LEAF_NODE	1088:20	1088:20	5	tif
LEAF_NODE	1088:23	1088:23	3	,
PARAMETER_DECL	1088:25	1088:32	3	uint16 s
TYPE	1088:25	1088:25	4	uint16
TYPE_NAME	1088:25	1088:25	5	uint16
LEAF_NODE	1088:25	1088:25	6	uint16
NAME	1088:32	1088:32	4	s
LEAF_NODE	1088:32	1088:32	5	s
LEAF_NODE	1088:33	1088:33	3	)
LEAF_NODE	1089:0	1089:0	2	{
STATEMENTS	1090:1	1311:1	2	
SIMPLE_DECL	1090:1	1090:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	1090:1	1090:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	1090:1	1090:11	5	JPEGState *
TYPE_NAME	1090:1	1090:1	6	JPEGState
LEAF_NODE	1090:1	1090:1	7	JPEGState
POINTER	1090:11	1090:11	6	*
LEAF_NODE	1090:11	1090:11	7	*
NAME	1090:12	1090:12	5	sp
LEAF_NODE	1090:12	1090:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1090:12	1090:12	5	sp = JState ( tif )
ASSIGN	1090:12	1090:17	6	sp = JState ( tif )
LVAL	1090:12	1090:12	7	sp
NAME	1090:12	1090:12	8	sp
LEAF_NODE	1090:12	1090:12	9	sp
ASSIGN_OP	1090:15	1090:15	7	=
LEAF_NODE	1090:15	1090:15	8	=
RVAL	1090:17	1090:17	7	JState ( tif )
FUNCTION_CALL	1090:17	1090:27	8	JState ( tif )
CALLEE	1090:17	1090:17	9	JState
LEAF_NODE	1090:17	1090:17	10	JState
LEAF_NODE	1090:23	1090:23	9	(
ARGUMENT	1090:24	1090:24	9	tif
FIELD	1090:24	1090:24	10	tif
LEAF_NODE	1090:24	1090:24	11	tif
LEAF_NODE	1090:27	1090:27	9	)
LEAF_NODE	1090:28	1090:28	4	;
SIMPLE_DECL	1091:1	1091:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1091:1	1091:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1091:1	1091:15	5	TIFFDirectory *
TYPE_NAME	1091:1	1091:1	6	TIFFDirectory
LEAF_NODE	1091:1	1091:1	7	TIFFDirectory
POINTER	1091:15	1091:15	6	*
LEAF_NODE	1091:15	1091:15	7	*
NAME	1091:16	1091:16	5	td
LEAF_NODE	1091:16	1091:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1091:16	1091:16	5	td = & tif -> tif_dir
ASSIGN	1091:16	1091:21	6	td = & tif -> tif_dir
LVAL	1091:16	1091:16	7	td
NAME	1091:16	1091:16	8	td
LEAF_NODE	1091:16	1091:16	9	td
ASSIGN_OP	1091:19	1091:19	7	=
LEAF_NODE	1091:19	1091:19	8	=
RVAL	1091:21	1091:21	7	& tif -> tif_dir
UNARY_EXPR	1091:21	1091:22	8	& tif -> tif_dir
UNARY_OPERATOR	1091:21	1091:21	9	&
LEAF_NODE	1091:21	1091:21	10	&
FIELD	1091:22	1091:27	9	tif -> tif_dir
LEAF_NODE	1091:22	1091:22	10	tif
LEAF_NODE	1091:25	1091:25	10	->
LEAF_NODE	1091:27	1091:27	10	tif_dir
LEAF_NODE	1091:34	1091:34	4	;
LEAF_NODE	1092:1	1092:1	3	static
SIMPLE_DECL	1092:8	1092:45	3	const char [ ] module ; module = "JPEGPreDecode" ;
VAR_DECL	1092:8	1092:19	4	const char [ ] module ; module = "JPEGPreDecode"
TYPE	1092:8	1092:25	5	const char [ ]
TYPE_NAME	1092:8	1092:14	6	const char
LEAF_NODE	1092:8	1092:8	7	const
LEAF_NODE	1092:14	1092:14	7	char
TYPE_SUFFIX	1092:25	1092:26	6	[ ]
LEAF_NODE	1092:25	1092:25	7	[
LEAF_NODE	1092:26	1092:26	7	]
NAME	1092:19	1092:19	5	module
LEAF_NODE	1092:19	1092:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1092:19	1092:19	5	module = "JPEGPreDecode"
ASSIGN	1092:19	1092:30	6	module = "JPEGPreDecode"
LVAL	1092:19	1092:19	7	module
NAME	1092:19	1092:19	8	module
LEAF_NODE	1092:19	1092:19	9	module
ASSIGN_OP	1092:28	1092:28	7	=
LEAF_NODE	1092:28	1092:28	8	=
RVAL	1092:30	1092:30	7	"JPEGPreDecode"
FIELD	1092:30	1092:30	8	"JPEGPreDecode"
LEAF_NODE	1092:30	1092:30	9	"JPEGPreDecode"
LEAF_NODE	1092:45	1092:45	4	;
SIMPLE_DECL	1093:1	1093:37	3	uint32 segment_width , uint32 segment_height ;
INIT_DECL_LIST	1093:1	1093:1	4	uint32 segment_width , uint32 segment_height
VAR_DECL	1093:1	1093:8	5	uint32 segment_width
TYPE	1093:1	1093:1	6	uint32
TYPE_NAME	1093:1	1093:1	7	uint32
LEAF_NODE	1093:1	1093:1	8	uint32
NAME	1093:8	1093:8	6	segment_width
LEAF_NODE	1093:8	1093:8	7	segment_width
LEAF_NODE	1093:21	1093:21	5	,
VAR_DECL	1093:1	1093:23	5	uint32 segment_height
TYPE	1093:1	1093:1	6	uint32
TYPE_NAME	1093:1	1093:1	7	uint32
LEAF_NODE	1093:1	1093:1	8	uint32
NAME	1093:23	1093:23	6	segment_height
LEAF_NODE	1093:23	1093:23	7	segment_height
LEAF_NODE	1093:37	1093:37	4	;
SIMPLE_DECL	1094:1	1094:23	3	int downsampled_output ;
VAR_DECL	1094:1	1094:5	4	int downsampled_output
TYPE	1094:1	1094:1	5	int
TYPE_NAME	1094:1	1094:1	6	int
LEAF_NODE	1094:1	1094:1	7	int
NAME	1094:5	1094:5	5	downsampled_output
LEAF_NODE	1094:5	1094:5	6	downsampled_output
LEAF_NODE	1094:23	1094:23	4	;
SIMPLE_DECL	1095:1	1095:7	3	int ci ;
VAR_DECL	1095:1	1095:5	4	int ci
TYPE	1095:1	1095:1	5	int
TYPE_NAME	1095:1	1095:1	6	int
LEAF_NODE	1095:1	1095:1	7	int
NAME	1095:5	1095:5	5	ci
LEAF_NODE	1095:5	1095:5	6	ci
LEAF_NODE	1095:7	1095:7	4	;
EXPR_STATEMENT	1097:1	1097:19	3	assert ( sp != NULL ) ;
EXPR	1097:1	1097:1	4	assert ( sp != NULL )
FUNCTION_CALL	1097:1	1097:18	5	assert ( sp != NULL )
CALLEE	1097:1	1097:1	6	assert
LEAF_NODE	1097:1	1097:1	7	assert
LEAF_NODE	1097:7	1097:7	6	(
ARGUMENT	1097:8	1097:14	6	sp != NULL
FIELD	1097:8	1097:8	7	sp
LEAF_NODE	1097:8	1097:8	8	sp
EQ_OPERATOR	1097:11	1097:11	7	!=
LEAF_NODE	1097:11	1097:11	8	!=
FIELD	1097:14	1097:14	7	NULL
LEAF_NODE	1097:14	1097:14	8	NULL
LEAF_NODE	1097:18	1097:18	6	)
LEAF_NODE	1097:19	1097:19	4	;
SELECTION	1099:1	1100:1	3	
KEYWORD	1099:1	1099:1	4	if
LEAF_NODE	1099:1	1099:1	5	if
LEAF_NODE	1099:4	1099:4	4	(
CONDITION	1099:5	1099:5	4	sp -> cinfo . comm . is_decompressor == 0
EXPR	1099:5	1099:39	5	sp -> cinfo . comm . is_decompressor == 0
FIELD	1099:5	1099:20	6	sp -> cinfo . comm . is_decompressor
LEAF_NODE	1099:5	1099:5	7	sp
LEAF_NODE	1099:7	1099:7	7	->
LEAF_NODE	1099:9	1099:9	7	cinfo
LEAF_NODE	1099:14	1099:14	7	.
LEAF_NODE	1099:15	1099:15	7	comm
LEAF_NODE	1099:19	1099:19	7	.
LEAF_NODE	1099:20	1099:20	7	is_decompressor
EQ_OPERATOR	1099:36	1099:36	6	==
LEAF_NODE	1099:36	1099:36	7	==
FIELD	1099:39	1099:39	6	0
LEAF_NODE	1099:39	1099:39	7	0
LEAF_NODE	1099:40	1099:40	4	)
STATEMENTS	1100:1	1102:1	4	
LEAF_NODE	1100:1	1100:1	5	{
STATEMENTS	1101:2	1101:2	5	
EXPR_STATEMENT	1101:2	1101:29	6	tif -> tif_setupdecode ( tif ) ;
EXPR	1101:2	1101:2	7	tif -> tif_setupdecode ( tif )
FUNCTION_CALL	1101:2	1101:28	8	tif -> tif_setupdecode ( tif )
CALLEE	1101:2	1101:7	9	tif -> tif_setupdecode
LEAF_NODE	1101:2	1101:2	10	tif
LEAF_NODE	1101:5	1101:5	10	->
LEAF_NODE	1101:7	1101:7	10	tif_setupdecode
LEAF_NODE	1101:22	1101:22	9	(
ARGUMENT	1101:24	1101:24	9	tif
FIELD	1101:24	1101:24	10	tif
LEAF_NODE	1101:24	1101:24	11	tif
LEAF_NODE	1101:28	1101:28	9	)
LEAF_NODE	1101:29	1101:29	7	;
LEAF_NODE	1102:1	1102:1	5	}
EXPR_STATEMENT	1104:1	1104:39	3	assert ( sp -> cinfo . comm . is_decompressor ) ;
EXPR	1104:1	1104:1	4	assert ( sp -> cinfo . comm . is_decompressor )
FUNCTION_CALL	1104:1	1104:38	5	assert ( sp -> cinfo . comm . is_decompressor )
CALLEE	1104:1	1104:1	6	assert
LEAF_NODE	1104:1	1104:1	7	assert
LEAF_NODE	1104:7	1104:7	6	(
ARGUMENT	1104:8	1104:8	6	sp -> cinfo . comm . is_decompressor
FIELD	1104:8	1104:23	7	sp -> cinfo . comm . is_decompressor
LEAF_NODE	1104:8	1104:8	8	sp
LEAF_NODE	1104:10	1104:10	8	->
LEAF_NODE	1104:12	1104:12	8	cinfo
LEAF_NODE	1104:17	1104:17	8	.
LEAF_NODE	1104:18	1104:18	8	comm
LEAF_NODE	1104:22	1104:22	8	.
LEAF_NODE	1104:23	1104:23	8	is_decompressor
LEAF_NODE	1104:38	1104:38	6	)
LEAF_NODE	1104:39	1104:39	4	;
SELECTION	1109:1	1110:2	3	
KEYWORD	1109:1	1109:1	4	if
LEAF_NODE	1109:1	1109:1	5	if
LEAF_NODE	1109:4	1109:4	4	(
CONDITION	1109:5	1109:5	4	! TIFFjpeg_abort ( sp )
EXPR	1109:5	1109:5	5	! TIFFjpeg_abort ( sp )
UNARY_EXPR	1109:5	1109:6	6	! TIFFjpeg_abort ( sp )
UNARY_OPERATOR	1109:5	1109:5	7	!
LEAF_NODE	1109:5	1109:5	8	!
FUNCTION_CALL	1109:6	1109:23	7	TIFFjpeg_abort ( sp )
CALLEE	1109:6	1109:6	8	TIFFjpeg_abort
LEAF_NODE	1109:6	1109:6	9	TIFFjpeg_abort
LEAF_NODE	1109:20	1109:20	8	(
ARGUMENT	1109:21	1109:21	8	sp
FIELD	1109:21	1109:21	9	sp
LEAF_NODE	1109:21	1109:21	10	sp
LEAF_NODE	1109:23	1109:23	8	)
LEAF_NODE	1109:24	1109:24	4	)
STATEMENTS	1110:2	1110:2	4	
JUMP_STATEMENT	1110:2	1110:12	5	return ( 0 ) ;
KEYWORD	1110:2	1110:2	6	return
LEAF_NODE	1110:2	1110:2	7	return
DESTINATION	1110:9	1110:9	6	( 0 )
EXPR	1110:9	1110:11	7	( 0 )
LEAF_NODE	1110:9	1110:9	8	(
FIELD	1110:10	1110:10	8	0
LEAF_NODE	1110:10	1110:10	9	0
LEAF_NODE	1110:11	1110:11	8	)
LEAF_NODE	1110:12	1110:12	6	;
SELECTION	1115:1	1116:2	3	
KEYWORD	1115:1	1115:1	4	if
LEAF_NODE	1115:1	1115:1	5	if
LEAF_NODE	1115:4	1115:4	4	(
CONDITION	1115:5	1115:5	4	TIFFjpeg_read_header ( sp , TRUE ) != JPEG_HEADER_OK
EXPR	1115:5	1115:39	5	TIFFjpeg_read_header ( sp , TRUE ) != JPEG_HEADER_OK
FUNCTION_CALL	1115:5	1115:34	6	TIFFjpeg_read_header ( sp , TRUE )
CALLEE	1115:5	1115:5	7	TIFFjpeg_read_header
LEAF_NODE	1115:5	1115:5	8	TIFFjpeg_read_header
LEAF_NODE	1115:25	1115:25	7	(
ARGUMENT	1115:26	1115:26	7	sp
FIELD	1115:26	1115:26	8	sp
LEAF_NODE	1115:26	1115:26	9	sp
LEAF_NODE	1115:28	1115:28	7	,
ARGUMENT	1115:30	1115:30	7	TRUE
FIELD	1115:30	1115:30	8	TRUE
LEAF_NODE	1115:30	1115:30	9	TRUE
LEAF_NODE	1115:34	1115:34	7	)
EQ_OPERATOR	1115:36	1115:36	6	!=
LEAF_NODE	1115:36	1115:36	7	!=
FIELD	1115:39	1115:39	6	JPEG_HEADER_OK
LEAF_NODE	1115:39	1115:39	7	JPEG_HEADER_OK
LEAF_NODE	1115:53	1115:53	4	)
STATEMENTS	1116:2	1116:2	4	
JUMP_STATEMENT	1116:2	1116:12	5	return ( 0 ) ;
KEYWORD	1116:2	1116:2	6	return
LEAF_NODE	1116:2	1116:2	7	return
DESTINATION	1116:9	1116:9	6	( 0 )
EXPR	1116:9	1116:11	7	( 0 )
LEAF_NODE	1116:9	1116:9	8	(
FIELD	1116:10	1116:10	8	0
LEAF_NODE	1116:10	1116:10	9	0
LEAF_NODE	1116:11	1116:11	8	)
LEAF_NODE	1116:12	1116:12	6	;
EXPR_STATEMENT	1118:8	1118:57	3	tif -> tif_rawcp = ( uint8 * ) sp -> src . next_input_byte ;
EXPR	1118:8	1118:8	4	tif -> tif_rawcp = ( uint8 * ) sp -> src . next_input_byte
ASSIGN	1118:8	1118:25	5	tif -> tif_rawcp = ( uint8 * ) sp -> src . next_input_byte
LVAL	1118:8	1118:8	6	tif -> tif_rawcp
FIELD	1118:8	1118:13	7	tif -> tif_rawcp
LEAF_NODE	1118:8	1118:8	8	tif
LEAF_NODE	1118:11	1118:11	8	->
LEAF_NODE	1118:13	1118:13	8	tif_rawcp
ASSIGN_OP	1118:23	1118:23	6	=
LEAF_NODE	1118:23	1118:23	7	=
RVAL	1118:25	1118:34	6	( uint8 * ) sp -> src . next_input_byte
LEAF_NODE	1118:25	1118:25	7	(
TYPE_NAME	1118:26	1118:26	7	uint8
LEAF_NODE	1118:26	1118:26	8	uint8
LEAF_NODE	1118:31	1118:31	7	*
LEAF_NODE	1118:32	1118:32	7	)
FIELD	1118:34	1118:42	7	sp -> src . next_input_byte
LEAF_NODE	1118:34	1118:34	8	sp
LEAF_NODE	1118:36	1118:36	8	->
LEAF_NODE	1118:38	1118:38	8	src
LEAF_NODE	1118:41	1118:41	8	.
LEAF_NODE	1118:42	1118:42	8	next_input_byte
LEAF_NODE	1118:57	1118:57	4	;
EXPR_STATEMENT	1119:8	1119:48	3	tif -> tif_rawcc = sp -> src . bytes_in_buffer ;
EXPR	1119:8	1119:8	4	tif -> tif_rawcc = sp -> src . bytes_in_buffer
ASSIGN	1119:8	1119:25	5	tif -> tif_rawcc = sp -> src . bytes_in_buffer
LVAL	1119:8	1119:8	6	tif -> tif_rawcc
FIELD	1119:8	1119:13	7	tif -> tif_rawcc
LEAF_NODE	1119:8	1119:8	8	tif
LEAF_NODE	1119:11	1119:11	8	->
LEAF_NODE	1119:13	1119:13	8	tif_rawcc
ASSIGN_OP	1119:23	1119:23	6	=
LEAF_NODE	1119:23	1119:23	7	=
RVAL	1119:25	1119:25	6	sp -> src . bytes_in_buffer
FIELD	1119:25	1119:33	7	sp -> src . bytes_in_buffer
LEAF_NODE	1119:25	1119:25	8	sp
LEAF_NODE	1119:27	1119:27	8	->
LEAF_NODE	1119:29	1119:29	8	src
LEAF_NODE	1119:32	1119:32	8	.
LEAF_NODE	1119:33	1119:33	8	bytes_in_buffer
LEAF_NODE	1119:48	1119:48	4	;
SELECTION	1124:1	1124:19	3	
KEYWORD	1124:1	1124:1	4	if
LEAF_NODE	1124:1	1124:1	5	if
LEAF_NODE	1124:4	1124:4	4	(
CONDITION	1124:5	1124:5	4	isTiled ( tif )
EXPR	1124:5	1124:5	5	isTiled ( tif )
FUNCTION_CALL	1124:5	1124:16	6	isTiled ( tif )
CALLEE	1124:5	1124:5	7	isTiled
LEAF_NODE	1124:5	1124:5	8	isTiled
LEAF_NODE	1124:12	1124:12	7	(
ARGUMENT	1124:13	1124:13	7	tif
FIELD	1124:13	1124:13	8	tif
LEAF_NODE	1124:13	1124:13	9	tif
LEAF_NODE	1124:16	1124:16	7	)
LEAF_NODE	1124:17	1124:17	4	)
STATEMENTS	1124:19	1128:1	4	
LEAF_NODE	1124:19	1124:19	5	{
STATEMENTS	1125:16	1127:2	5	
EXPR_STATEMENT	1125:16	1125:48	6	segment_width = td -> td_tilewidth ;
EXPR	1125:16	1125:16	7	segment_width = td -> td_tilewidth
ASSIGN	1125:16	1125:32	8	segment_width = td -> td_tilewidth
LVAL	1125:16	1125:16	9	segment_width
FIELD	1125:16	1125:16	10	segment_width
LEAF_NODE	1125:16	1125:16	11	segment_width
ASSIGN_OP	1125:30	1125:30	9	=
LEAF_NODE	1125:30	1125:30	10	=
RVAL	1125:32	1125:32	9	td -> td_tilewidth
FIELD	1125:32	1125:36	10	td -> td_tilewidth
LEAF_NODE	1125:32	1125:32	11	td
LEAF_NODE	1125:34	1125:34	11	->
LEAF_NODE	1125:36	1125:36	11	td_tilewidth
LEAF_NODE	1125:48	1125:48	7	;
EXPR_STATEMENT	1126:16	1126:50	6	segment_height = td -> td_tilelength ;
EXPR	1126:16	1126:16	7	segment_height = td -> td_tilelength
ASSIGN	1126:16	1126:33	8	segment_height = td -> td_tilelength
LVAL	1126:16	1126:16	9	segment_height
FIELD	1126:16	1126:16	10	segment_height
LEAF_NODE	1126:16	1126:16	11	segment_height
ASSIGN_OP	1126:31	1126:31	9	=
LEAF_NODE	1126:31	1126:31	10	=
RVAL	1126:33	1126:33	9	td -> td_tilelength
FIELD	1126:33	1126:37	10	td -> td_tilelength
LEAF_NODE	1126:33	1126:33	11	td
LEAF_NODE	1126:35	1126:35	11	->
LEAF_NODE	1126:37	1126:37	11	td_tilelength
LEAF_NODE	1126:50	1126:50	7	;
EXPR_STATEMENT	1127:2	1127:41	6	sp -> bytesperline = TIFFTileRowSize ( tif ) ;
EXPR	1127:2	1127:2	7	sp -> bytesperline = TIFFTileRowSize ( tif )
ASSIGN	1127:2	1127:21	8	sp -> bytesperline = TIFFTileRowSize ( tif )
LVAL	1127:2	1127:2	9	sp -> bytesperline
FIELD	1127:2	1127:6	10	sp -> bytesperline
LEAF_NODE	1127:2	1127:2	11	sp
LEAF_NODE	1127:4	1127:4	11	->
LEAF_NODE	1127:6	1127:6	11	bytesperline
ASSIGN_OP	1127:19	1127:19	9	=
LEAF_NODE	1127:19	1127:19	10	=
RVAL	1127:21	1127:21	9	TIFFTileRowSize ( tif )
FUNCTION_CALL	1127:21	1127:40	10	TIFFTileRowSize ( tif )
CALLEE	1127:21	1127:21	11	TIFFTileRowSize
LEAF_NODE	1127:21	1127:21	12	TIFFTileRowSize
LEAF_NODE	1127:36	1127:36	11	(
ARGUMENT	1127:37	1127:37	11	tif
FIELD	1127:37	1127:37	12	tif
LEAF_NODE	1127:37	1127:37	13	tif
LEAF_NODE	1127:40	1127:40	11	)
LEAF_NODE	1127:41	1127:41	7	;
LEAF_NODE	1128:1	1128:1	5	}
SELECTION	1128:3	1128:8	3	
KEYWORD	1128:3	1128:3	4	else
LEAF_NODE	1128:3	1128:3	5	else
STATEMENTS	1128:8	1134:1	4	
LEAF_NODE	1128:8	1128:8	5	{
STATEMENTS	1129:2	1133:2	5	
EXPR_STATEMENT	1129:2	1129:35	6	segment_width = td -> td_imagewidth ;
EXPR	1129:2	1129:2	7	segment_width = td -> td_imagewidth
ASSIGN	1129:2	1129:18	8	segment_width = td -> td_imagewidth
LVAL	1129:2	1129:2	9	segment_width
FIELD	1129:2	1129:2	10	segment_width
LEAF_NODE	1129:2	1129:2	11	segment_width
ASSIGN_OP	1129:16	1129:16	9	=
LEAF_NODE	1129:16	1129:16	10	=
RVAL	1129:18	1129:18	9	td -> td_imagewidth
FIELD	1129:18	1129:22	10	td -> td_imagewidth
LEAF_NODE	1129:18	1129:18	11	td
LEAF_NODE	1129:20	1129:20	11	->
LEAF_NODE	1129:22	1129:22	11	td_imagewidth
LEAF_NODE	1129:35	1129:35	7	;
EXPR_STATEMENT	1130:2	1130:52	6	segment_height = td -> td_imagelength - tif -> tif_row ;
EXPR	1130:2	1130:2	7	segment_height = td -> td_imagelength - tif -> tif_row
ASSIGN	1130:2	1130:19	8	segment_height = td -> td_imagelength - tif -> tif_row
LVAL	1130:2	1130:2	9	segment_height
FIELD	1130:2	1130:2	10	segment_height
LEAF_NODE	1130:2	1130:2	11	segment_height
ASSIGN_OP	1130:17	1130:17	9	=
LEAF_NODE	1130:17	1130:17	10	=
RVAL	1130:19	1130:40	9	td -> td_imagelength - tif -> tif_row
FIELD	1130:19	1130:23	10	td -> td_imagelength
LEAF_NODE	1130:19	1130:19	11	td
LEAF_NODE	1130:21	1130:21	11	->
LEAF_NODE	1130:23	1130:23	11	td_imagelength
LEAF_NODE	1130:38	1130:38	10	-
FIELD	1130:40	1130:45	10	tif -> tif_row
LEAF_NODE	1130:40	1130:40	11	tif
LEAF_NODE	1130:43	1130:43	11	->
LEAF_NODE	1130:45	1130:45	11	tif_row
LEAF_NODE	1130:52	1130:52	7	;
SELECTION	1131:2	1132:3	6	
KEYWORD	1131:2	1131:2	7	if
LEAF_NODE	1131:2	1131:2	8	if
LEAF_NODE	1131:5	1131:5	7	(
CONDITION	1131:6	1131:6	7	segment_height > td -> td_rowsperstrip
EXPR	1131:6	1131:23	8	segment_height > td -> td_rowsperstrip
FIELD	1131:6	1131:6	9	segment_height
LEAF_NODE	1131:6	1131:6	10	segment_height
REL_OPERATOR	1131:21	1131:21	9	>
LEAF_NODE	1131:21	1131:21	10	>
FIELD	1131:23	1131:27	9	td -> td_rowsperstrip
LEAF_NODE	1131:23	1131:23	10	td
LEAF_NODE	1131:25	1131:25	10	->
LEAF_NODE	1131:27	1131:27	10	td_rowsperstrip
LEAF_NODE	1131:42	1131:42	7	)
STATEMENTS	1132:3	1132:3	7	
EXPR_STATEMENT	1132:3	1132:39	8	segment_height = td -> td_rowsperstrip ;
EXPR	1132:3	1132:3	9	segment_height = td -> td_rowsperstrip
ASSIGN	1132:3	1132:20	10	segment_height = td -> td_rowsperstrip
LVAL	1132:3	1132:3	11	segment_height
FIELD	1132:3	1132:3	12	segment_height
LEAF_NODE	1132:3	1132:3	13	segment_height
ASSIGN_OP	1132:18	1132:18	11	=
LEAF_NODE	1132:18	1132:18	12	=
RVAL	1132:20	1132:20	11	td -> td_rowsperstrip
FIELD	1132:20	1132:24	12	td -> td_rowsperstrip
LEAF_NODE	1132:20	1132:20	13	td
LEAF_NODE	1132:22	1132:22	13	->
LEAF_NODE	1132:24	1132:24	13	td_rowsperstrip
LEAF_NODE	1132:39	1132:39	9	;
EXPR_STATEMENT	1133:2	1133:42	6	sp -> bytesperline = TIFFScanlineSize ( tif ) ;
EXPR	1133:2	1133:2	7	sp -> bytesperline = TIFFScanlineSize ( tif )
ASSIGN	1133:2	1133:21	8	sp -> bytesperline = TIFFScanlineSize ( tif )
LVAL	1133:2	1133:2	9	sp -> bytesperline
FIELD	1133:2	1133:6	10	sp -> bytesperline
LEAF_NODE	1133:2	1133:2	11	sp
LEAF_NODE	1133:4	1133:4	11	->
LEAF_NODE	1133:6	1133:6	11	bytesperline
ASSIGN_OP	1133:19	1133:19	9	=
LEAF_NODE	1133:19	1133:19	10	=
RVAL	1133:21	1133:21	9	TIFFScanlineSize ( tif )
FUNCTION_CALL	1133:21	1133:41	10	TIFFScanlineSize ( tif )
CALLEE	1133:21	1133:21	11	TIFFScanlineSize
LEAF_NODE	1133:21	1133:21	12	TIFFScanlineSize
LEAF_NODE	1133:37	1133:37	11	(
ARGUMENT	1133:38	1133:38	11	tif
FIELD	1133:38	1133:38	12	tif
LEAF_NODE	1133:38	1133:38	13	tif
LEAF_NODE	1133:41	1133:41	11	)
LEAF_NODE	1133:42	1133:42	7	;
LEAF_NODE	1134:1	1134:1	5	}
SELECTION	1135:1	1135:60	3	
KEYWORD	1135:1	1135:1	4	if
LEAF_NODE	1135:1	1135:1	5	if
LEAF_NODE	1135:4	1135:4	4	(
CONDITION	1135:5	1135:5	4	td -> td_planarconfig == PLANARCONFIG_SEPARATE && s > 0
EXPR	1135:5	1135:5	5	td -> td_planarconfig == PLANARCONFIG_SEPARATE && s > 0
AND	1135:5	1135:53	6	td -> td_planarconfig == PLANARCONFIG_SEPARATE && s > 0
EXPR	1135:5	1135:28	7	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	1135:5	1135:9	8	td -> td_planarconfig
LEAF_NODE	1135:5	1135:5	9	td
LEAF_NODE	1135:7	1135:7	9	->
LEAF_NODE	1135:9	1135:9	9	td_planarconfig
EQ_OPERATOR	1135:25	1135:25	8	==
LEAF_NODE	1135:25	1135:25	9	==
FIELD	1135:28	1135:28	8	PLANARCONFIG_SEPARATE
LEAF_NODE	1135:28	1135:28	9	PLANARCONFIG_SEPARATE
LEAF_NODE	1135:50	1135:50	7	&&
EXPR	1135:53	1135:57	7	s > 0
FIELD	1135:53	1135:53	8	s
LEAF_NODE	1135:53	1135:53	9	s
REL_OPERATOR	1135:55	1135:55	8	>
LEAF_NODE	1135:55	1135:55	9	>
FIELD	1135:57	1135:57	8	0
LEAF_NODE	1135:57	1135:57	9	0
LEAF_NODE	1135:58	1135:58	4	)
STATEMENTS	1135:60	1142:1	4	
LEAF_NODE	1135:60	1135:60	5	{
STATEMENTS	1140:2	1141:2	5	
EXPR_STATEMENT	1140:2	1140:63	6	segment_width = TIFFhowmany_32 ( segment_width , sp -> h_sampling ) ;
EXPR	1140:2	1140:2	7	segment_width = TIFFhowmany_32 ( segment_width , sp -> h_sampling )
ASSIGN	1140:2	1140:18	8	segment_width = TIFFhowmany_32 ( segment_width , sp -> h_sampling )
LVAL	1140:2	1140:2	9	segment_width
FIELD	1140:2	1140:2	10	segment_width
LEAF_NODE	1140:2	1140:2	11	segment_width
ASSIGN_OP	1140:16	1140:16	9	=
LEAF_NODE	1140:16	1140:16	10	=
RVAL	1140:18	1140:18	9	TIFFhowmany_32 ( segment_width , sp -> h_sampling )
FUNCTION_CALL	1140:18	1140:62	10	TIFFhowmany_32 ( segment_width , sp -> h_sampling )
CALLEE	1140:18	1140:18	11	TIFFhowmany_32
LEAF_NODE	1140:18	1140:18	12	TIFFhowmany_32
LEAF_NODE	1140:32	1140:32	11	(
ARGUMENT	1140:33	1140:33	11	segment_width
FIELD	1140:33	1140:33	12	segment_width
LEAF_NODE	1140:33	1140:33	13	segment_width
LEAF_NODE	1140:46	1140:46	11	,
ARGUMENT	1140:48	1140:48	11	sp -> h_sampling
FIELD	1140:48	1140:52	12	sp -> h_sampling
LEAF_NODE	1140:48	1140:48	13	sp
LEAF_NODE	1140:50	1140:50	13	->
LEAF_NODE	1140:52	1140:52	13	h_sampling
LEAF_NODE	1140:62	1140:62	11	)
LEAF_NODE	1140:63	1140:63	7	;
EXPR_STATEMENT	1141:2	1141:65	6	segment_height = TIFFhowmany_32 ( segment_height , sp -> v_sampling ) ;
EXPR	1141:2	1141:2	7	segment_height = TIFFhowmany_32 ( segment_height , sp -> v_sampling )
ASSIGN	1141:2	1141:19	8	segment_height = TIFFhowmany_32 ( segment_height , sp -> v_sampling )
LVAL	1141:2	1141:2	9	segment_height
FIELD	1141:2	1141:2	10	segment_height
LEAF_NODE	1141:2	1141:2	11	segment_height
ASSIGN_OP	1141:17	1141:17	9	=
LEAF_NODE	1141:17	1141:17	10	=
RVAL	1141:19	1141:19	9	TIFFhowmany_32 ( segment_height , sp -> v_sampling )
FUNCTION_CALL	1141:19	1141:64	10	TIFFhowmany_32 ( segment_height , sp -> v_sampling )
CALLEE	1141:19	1141:19	11	TIFFhowmany_32
LEAF_NODE	1141:19	1141:19	12	TIFFhowmany_32
LEAF_NODE	1141:33	1141:33	11	(
ARGUMENT	1141:34	1141:34	11	segment_height
FIELD	1141:34	1141:34	12	segment_height
LEAF_NODE	1141:34	1141:34	13	segment_height
LEAF_NODE	1141:48	1141:48	11	,
ARGUMENT	1141:50	1141:50	11	sp -> v_sampling
FIELD	1141:50	1141:54	12	sp -> v_sampling
LEAF_NODE	1141:50	1141:50	13	sp
LEAF_NODE	1141:52	1141:52	13	->
LEAF_NODE	1141:54	1141:54	13	v_sampling
LEAF_NODE	1141:64	1141:64	11	)
LEAF_NODE	1141:65	1141:65	7	;
LEAF_NODE	1142:1	1142:1	5	}
SELECTION	1143:1	1144:48	3	
KEYWORD	1143:1	1143:1	4	if
LEAF_NODE	1143:1	1143:1	5	if
LEAF_NODE	1143:4	1143:4	4	(
CONDITION	1143:5	1143:5	4	sp -> cinfo . d . image_width < segment_width || sp -> cinfo . d . image_height < segment_height
EXPR	1143:5	1143:5	5	sp -> cinfo . d . image_width < segment_width || sp -> cinfo . d . image_height < segment_height
OR	1143:5	1144:5	6	sp -> cinfo . d . image_width < segment_width || sp -> cinfo . d . image_height < segment_height
EXPR	1143:5	1143:31	7	sp -> cinfo . d . image_width < segment_width
FIELD	1143:5	1143:17	8	sp -> cinfo . d . image_width
LEAF_NODE	1143:5	1143:5	9	sp
LEAF_NODE	1143:7	1143:7	9	->
LEAF_NODE	1143:9	1143:9	9	cinfo
LEAF_NODE	1143:14	1143:14	9	.
LEAF_NODE	1143:15	1143:15	9	d
LEAF_NODE	1143:16	1143:16	9	.
LEAF_NODE	1143:17	1143:17	9	image_width
REL_OPERATOR	1143:29	1143:29	8	<
LEAF_NODE	1143:29	1143:29	9	<
FIELD	1143:31	1143:31	8	segment_width
LEAF_NODE	1143:31	1143:31	9	segment_width
LEAF_NODE	1143:45	1143:45	7	||
EXPR	1144:5	1144:32	7	sp -> cinfo . d . image_height < segment_height
FIELD	1144:5	1144:17	8	sp -> cinfo . d . image_height
LEAF_NODE	1144:5	1144:5	9	sp
LEAF_NODE	1144:7	1144:7	9	->
LEAF_NODE	1144:9	1144:9	9	cinfo
LEAF_NODE	1144:14	1144:14	9	.
LEAF_NODE	1144:15	1144:15	9	d
LEAF_NODE	1144:16	1144:16	9	.
LEAF_NODE	1144:17	1144:17	9	image_height
REL_OPERATOR	1144:30	1144:30	8	<
LEAF_NODE	1144:30	1144:30	9	<
FIELD	1144:32	1144:32	8	segment_height
LEAF_NODE	1144:32	1144:32	9	segment_height
LEAF_NODE	1144:46	1144:46	4	)
STATEMENTS	1144:48	1151:1	4	
LEAF_NODE	1144:48	1144:48	5	{
STATEMENTS	1145:2	1150:35	5	
LEAF_NODE	1145:2	1145:2	6	TIFFWarningExt
LEAF_NODE	1145:16	1145:16	6	(
LEAF_NODE	1145:17	1145:17	6	tif
LEAF_NODE	1145:20	1145:20	6	->
LEAF_NODE	1145:22	1145:22	6	tif_clientdata
LEAF_NODE	1145:36	1145:36	6	,
LEAF_NODE	1145:38	1145:38	6	module
LEAF_NODE	1145:44	1145:44	6	,
LEAF_NODE	1146:10	1146:10	6	"Improper JPEG strip/tile size, "
LEAF_NODE	1147:10	1147:10	6	"expected %dx%d, got %dx%d"
LEAF_NODE	1147:37	1147:37	6	,
LEAF_NODE	1148:10	1148:10	6	segment_width
LEAF_NODE	1148:23	1148:23	6	,
LEAF_NODE	1148:25	1148:25	6	segment_height
LEAF_NODE	1148:39	1148:39	6	,
LEAF_NODE	1149:10	1149:10	6	sp
LEAF_NODE	1149:12	1149:12	6	->
LEAF_NODE	1149:14	1149:14	6	cinfo
LEAF_NODE	1149:19	1149:19	6	.
LEAF_NODE	1149:20	1149:20	6	d
LEAF_NODE	1149:21	1149:21	6	.
LEAF_NODE	1149:22	1149:22	6	image_width
LEAF_NODE	1149:33	1149:33	6	,
LEAF_NODE	1150:10	1150:10	6	sp
LEAF_NODE	1150:12	1150:12	6	->
LEAF_NODE	1150:14	1150:14	6	cinfo
LEAF_NODE	1150:19	1150:19	6	.
LEAF_NODE	1150:20	1150:20	6	d
LEAF_NODE	1150:21	1150:21	6	.
LEAF_NODE	1150:22	1150:22	6	image_height
LEAF_NODE	1150:34	1150:34	6	)
LEAF_NODE	1150:35	1150:35	6	;
LEAF_NODE	1151:1	1151:1	5	}
SELECTION	1152:1	1155:21	3	
KEYWORD	1152:1	1152:1	4	if
LEAF_NODE	1152:1	1152:1	5	if
LEAF_NODE	1152:3	1152:3	4	(
CONDITION	1152:5	1152:5	4	sp -> cinfo . d . image_width == segment_width && sp -> cinfo . d . image_height > segment_height && tif -> tif_row + segment_height == td -> td_imagelength && ! isTiled ( tif )
EXPR	1152:5	1152:5	5	sp -> cinfo . d . image_width == segment_width && sp -> cinfo . d . image_height > segment_height && tif -> tif_row + segment_height == td -> td_imagelength && ! isTiled ( tif )
AND	1152:5	1153:5	6	sp -> cinfo . d . image_width == segment_width && sp -> cinfo . d . image_height > segment_height && tif -> tif_row + segment_height == td -> td_imagelength && ! isTiled ( tif )
EXPR	1152:5	1152:32	7	sp -> cinfo . d . image_width == segment_width
FIELD	1152:5	1152:17	8	sp -> cinfo . d . image_width
LEAF_NODE	1152:5	1152:5	9	sp
LEAF_NODE	1152:7	1152:7	9	->
LEAF_NODE	1152:9	1152:9	9	cinfo
LEAF_NODE	1152:14	1152:14	9	.
LEAF_NODE	1152:15	1152:15	9	d
LEAF_NODE	1152:16	1152:16	9	.
LEAF_NODE	1152:17	1152:17	9	image_width
EQ_OPERATOR	1152:29	1152:29	8	==
LEAF_NODE	1152:29	1152:29	9	==
FIELD	1152:32	1152:32	8	segment_width
LEAF_NODE	1152:32	1152:32	9	segment_width
LEAF_NODE	1152:46	1152:46	7	&&
EXPR	1153:5	1153:5	7	sp -> cinfo . d . image_height > segment_height && tif -> tif_row + segment_height == td -> td_imagelength && ! isTiled ( tif )
AND	1153:5	1154:5	8	sp -> cinfo . d . image_height > segment_height && tif -> tif_row + segment_height == td -> td_imagelength && ! isTiled ( tif )
EXPR	1153:5	1153:32	9	sp -> cinfo . d . image_height > segment_height
FIELD	1153:5	1153:17	10	sp -> cinfo . d . image_height
LEAF_NODE	1153:5	1153:5	11	sp
LEAF_NODE	1153:7	1153:7	11	->
LEAF_NODE	1153:9	1153:9	11	cinfo
LEAF_NODE	1153:14	1153:14	11	.
LEAF_NODE	1153:15	1153:15	11	d
LEAF_NODE	1153:16	1153:16	11	.
LEAF_NODE	1153:17	1153:17	11	image_height
REL_OPERATOR	1153:30	1153:30	10	>
LEAF_NODE	1153:30	1153:30	11	>
FIELD	1153:32	1153:32	10	segment_height
LEAF_NODE	1153:32	1153:32	11	segment_height
LEAF_NODE	1153:47	1153:47	9	&&
EXPR	1154:5	1154:5	9	tif -> tif_row + segment_height == td -> td_imagelength && ! isTiled ( tif )
AND	1154:5	1155:5	10	tif -> tif_row + segment_height == td -> td_imagelength && ! isTiled ( tif )
EXPR	1154:5	1154:38	11	tif -> tif_row + segment_height == td -> td_imagelength
FIELD	1154:5	1154:10	12	tif -> tif_row
LEAF_NODE	1154:5	1154:5	13	tif
LEAF_NODE	1154:8	1154:8	13	->
LEAF_NODE	1154:10	1154:10	13	tif_row
LEAF_NODE	1154:18	1154:18	12	+
FIELD	1154:20	1154:20	12	segment_height
LEAF_NODE	1154:20	1154:20	13	segment_height
EQ_OPERATOR	1154:35	1154:35	12	==
LEAF_NODE	1154:35	1154:35	13	==
FIELD	1154:38	1154:42	12	td -> td_imagelength
LEAF_NODE	1154:38	1154:38	13	td
LEAF_NODE	1154:40	1154:40	13	->
LEAF_NODE	1154:42	1154:42	13	td_imagelength
LEAF_NODE	1154:57	1154:57	11	&&
EXPR	1155:5	1155:5	11	! isTiled ( tif )
UNARY_EXPR	1155:5	1155:6	12	! isTiled ( tif )
UNARY_OPERATOR	1155:5	1155:5	13	!
LEAF_NODE	1155:5	1155:5	14	!
FUNCTION_CALL	1155:6	1155:17	13	isTiled ( tif )
CALLEE	1155:6	1155:6	14	isTiled
LEAF_NODE	1155:6	1155:6	15	isTiled
LEAF_NODE	1155:13	1155:13	14	(
ARGUMENT	1155:14	1155:14	14	tif
FIELD	1155:14	1155:14	15	tif
LEAF_NODE	1155:14	1155:14	16	tif
LEAF_NODE	1155:17	1155:17	14	)
LEAF_NODE	1155:19	1155:19	4	)
STATEMENTS	1155:21	1165:1	4	
LEAF_NODE	1155:21	1155:21	5	{
STATEMENTS	1160:2	1164:58	5	
LEAF_NODE	1160:2	1160:2	6	TIFFWarningExt
LEAF_NODE	1160:16	1160:16	6	(
LEAF_NODE	1160:17	1160:17	6	tif
LEAF_NODE	1160:20	1160:20	6	->
LEAF_NODE	1160:22	1160:22	6	tif_clientdata
LEAF_NODE	1160:36	1160:36	6	,
LEAF_NODE	1160:38	1160:38	6	module
LEAF_NODE	1160:44	1160:44	6	,
LEAF_NODE	1161:8	1161:8	6	"JPEG strip size exceeds expected dimensions,"
LEAF_NODE	1162:8	1162:8	6	" expected %dx%d, got %dx%d"
LEAF_NODE	1162:36	1162:36	6	,
LEAF_NODE	1163:8	1163:8	6	segment_width
LEAF_NODE	1163:21	1163:21	6	,
LEAF_NODE	1163:23	1163:23	6	segment_height
LEAF_NODE	1163:37	1163:37	6	,
LEAF_NODE	1164:8	1164:8	6	sp
LEAF_NODE	1164:10	1164:10	6	->
LEAF_NODE	1164:12	1164:12	6	cinfo
LEAF_NODE	1164:17	1164:17	6	.
LEAF_NODE	1164:18	1164:18	6	d
LEAF_NODE	1164:19	1164:19	6	.
LEAF_NODE	1164:20	1164:20	6	image_width
LEAF_NODE	1164:31	1164:31	6	,
LEAF_NODE	1164:33	1164:33	6	sp
LEAF_NODE	1164:35	1164:35	6	->
LEAF_NODE	1164:37	1164:37	6	cinfo
LEAF_NODE	1164:42	1164:42	6	.
LEAF_NODE	1164:43	1164:43	6	d
LEAF_NODE	1164:44	1164:44	6	.
LEAF_NODE	1164:45	1164:45	6	image_height
LEAF_NODE	1164:57	1164:57	6	)
LEAF_NODE	1164:58	1164:58	6	;
LEAF_NODE	1165:1	1165:1	5	}
SELECTION	1166:1	1166:6	3	
KEYWORD	1166:1	1166:1	4	else
LEAF_NODE	1166:1	1166:1	5	else
STATEMENTS	1166:6	1166:6	4	
SELECTION	1166:6	1167:46	5	
KEYWORD	1166:6	1166:6	6	if
LEAF_NODE	1166:6	1166:6	7	if
LEAF_NODE	1166:9	1166:9	6	(
CONDITION	1166:10	1166:10	6	sp -> cinfo . d . image_width > segment_width || sp -> cinfo . d . image_height > segment_height
EXPR	1166:10	1166:10	7	sp -> cinfo . d . image_width > segment_width || sp -> cinfo . d . image_height > segment_height
OR	1166:10	1167:3	8	sp -> cinfo . d . image_width > segment_width || sp -> cinfo . d . image_height > segment_height
EXPR	1166:10	1166:36	9	sp -> cinfo . d . image_width > segment_width
FIELD	1166:10	1166:22	10	sp -> cinfo . d . image_width
LEAF_NODE	1166:10	1166:10	11	sp
LEAF_NODE	1166:12	1166:12	11	->
LEAF_NODE	1166:14	1166:14	11	cinfo
LEAF_NODE	1166:19	1166:19	11	.
LEAF_NODE	1166:20	1166:20	11	d
LEAF_NODE	1166:21	1166:21	11	.
LEAF_NODE	1166:22	1166:22	11	image_width
REL_OPERATOR	1166:34	1166:34	10	>
LEAF_NODE	1166:34	1166:34	11	>
FIELD	1166:36	1166:36	10	segment_width
LEAF_NODE	1166:36	1166:36	11	segment_width
LEAF_NODE	1166:50	1166:50	9	||
EXPR	1167:3	1167:30	9	sp -> cinfo . d . image_height > segment_height
FIELD	1167:3	1167:15	10	sp -> cinfo . d . image_height
LEAF_NODE	1167:3	1167:3	11	sp
LEAF_NODE	1167:5	1167:5	11	->
LEAF_NODE	1167:7	1167:7	11	cinfo
LEAF_NODE	1167:12	1167:12	11	.
LEAF_NODE	1167:13	1167:13	11	d
LEAF_NODE	1167:14	1167:14	11	.
LEAF_NODE	1167:15	1167:15	11	image_height
REL_OPERATOR	1167:28	1167:28	10	>
LEAF_NODE	1167:28	1167:28	11	>
FIELD	1167:30	1167:30	10	segment_height
LEAF_NODE	1167:30	1167:30	11	segment_height
LEAF_NODE	1167:44	1167:44	6	)
STATEMENTS	1167:46	1180:1	6	
LEAF_NODE	1167:46	1167:46	7	{
STATEMENTS	1174:2	1179:2	7	
LEAF_NODE	1174:2	1174:2	8	TIFFErrorExt
LEAF_NODE	1174:14	1174:14	8	(
LEAF_NODE	1174:15	1174:15	8	tif
LEAF_NODE	1174:18	1174:18	8	->
LEAF_NODE	1174:20	1174:20	8	tif_clientdata
LEAF_NODE	1174:34	1174:34	8	,
LEAF_NODE	1174:36	1174:36	8	module
LEAF_NODE	1174:42	1174:42	8	,
LEAF_NODE	1175:8	1175:8	8	"JPEG strip/tile size exceeds expected dimensions,"
LEAF_NODE	1176:8	1176:8	8	" expected %dx%d, got %dx%d"
LEAF_NODE	1176:36	1176:36	8	,
LEAF_NODE	1177:8	1177:8	8	segment_width
LEAF_NODE	1177:21	1177:21	8	,
LEAF_NODE	1177:23	1177:23	8	segment_height
LEAF_NODE	1177:37	1177:37	8	,
LEAF_NODE	1178:8	1178:8	8	sp
LEAF_NODE	1178:10	1178:10	8	->
LEAF_NODE	1178:12	1178:12	8	cinfo
LEAF_NODE	1178:17	1178:17	8	.
LEAF_NODE	1178:18	1178:18	8	d
LEAF_NODE	1178:19	1178:19	8	.
LEAF_NODE	1178:20	1178:20	8	image_width
LEAF_NODE	1178:31	1178:31	8	,
LEAF_NODE	1178:33	1178:33	8	sp
LEAF_NODE	1178:35	1178:35	8	->
LEAF_NODE	1178:37	1178:37	8	cinfo
LEAF_NODE	1178:42	1178:42	8	.
LEAF_NODE	1178:43	1178:43	8	d
LEAF_NODE	1178:44	1178:44	8	.
LEAF_NODE	1178:45	1178:45	8	image_height
LEAF_NODE	1178:57	1178:57	8	)
LEAF_NODE	1178:58	1178:58	8	;
JUMP_STATEMENT	1179:2	1179:12	8	return ( 0 ) ;
KEYWORD	1179:2	1179:2	9	return
LEAF_NODE	1179:2	1179:2	10	return
DESTINATION	1179:9	1179:9	9	( 0 )
EXPR	1179:9	1179:11	10	( 0 )
LEAF_NODE	1179:9	1179:9	11	(
FIELD	1179:10	1179:10	11	0
LEAF_NODE	1179:10	1179:10	12	0
LEAF_NODE	1179:11	1179:11	11	)
LEAF_NODE	1179:12	1179:12	9	;
LEAF_NODE	1180:1	1180:1	7	}
SELECTION	1181:1	1183:35	3	
KEYWORD	1181:1	1181:1	4	if
LEAF_NODE	1181:1	1181:1	5	if
LEAF_NODE	1181:4	1181:4	4	(
CONDITION	1181:5	1181:5	4	sp -> cinfo . d . num_components != ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
EXPR	1181:5	1183:32	5	sp -> cinfo . d . num_components != ( td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1 )
FIELD	1181:5	1181:17	6	sp -> cinfo . d . num_components
LEAF_NODE	1181:5	1181:5	7	sp
LEAF_NODE	1181:7	1181:7	7	->
LEAF_NODE	1181:9	1181:9	7	cinfo
LEAF_NODE	1181:14	1181:14	7	.
LEAF_NODE	1181:15	1181:15	7	d
LEAF_NODE	1181:16	1181:16	7	.
LEAF_NODE	1181:17	1181:17	7	num_components
EQ_OPERATOR	1181:32	1181:32	6	!=
LEAF_NODE	1181:32	1181:32	7	!=
LEAF_NODE	1182:5	1182:5	6	(
COND_EXPR	1182:6	1183:31	6	td -> td_planarconfig == PLANARCONFIG_CONTIG ? td -> td_samplesperpixel : 1
CONDITION	1182:6	1182:29	7	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	1182:6	1182:10	8	td -> td_planarconfig
LEAF_NODE	1182:6	1182:6	9	td
LEAF_NODE	1182:8	1182:8	9	->
LEAF_NODE	1182:10	1182:10	9	td_planarconfig
EQ_OPERATOR	1182:26	1182:26	8	==
LEAF_NODE	1182:26	1182:26	9	==
FIELD	1182:29	1182:29	8	PLANARCONFIG_CONTIG
LEAF_NODE	1182:29	1182:29	9	PLANARCONFIG_CONTIG
LEAF_NODE	1182:49	1182:49	7	?
EXPR	1183:6	1183:6	7	td -> td_samplesperpixel
FIELD	1183:6	1183:10	8	td -> td_samplesperpixel
LEAF_NODE	1183:6	1183:6	9	td
LEAF_NODE	1183:8	1183:8	9	->
LEAF_NODE	1183:10	1183:10	9	td_samplesperpixel
LEAF_NODE	1183:29	1183:29	7	:
FIELD	1183:31	1183:31	7	1
LEAF_NODE	1183:31	1183:31	8	1
LEAF_NODE	1183:32	1183:32	6	)
LEAF_NODE	1183:33	1183:33	4	)
STATEMENTS	1183:35	1186:1	4	
LEAF_NODE	1183:35	1183:35	5	{
STATEMENTS	1184:2	1185:2	5	
EXPR_STATEMENT	1184:2	1184:76	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG component count" ) ;
EXPR	1184:2	1184:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG component count" )
FUNCTION_CALL	1184:2	1184:75	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG component count" )
CALLEE	1184:2	1184:2	9	TIFFErrorExt
LEAF_NODE	1184:2	1184:2	10	TIFFErrorExt
LEAF_NODE	1184:14	1184:14	9	(
ARGUMENT	1184:15	1184:15	9	tif -> tif_clientdata
FIELD	1184:15	1184:20	10	tif -> tif_clientdata
LEAF_NODE	1184:15	1184:15	11	tif
LEAF_NODE	1184:18	1184:18	11	->
LEAF_NODE	1184:20	1184:20	11	tif_clientdata
LEAF_NODE	1184:34	1184:34	9	,
ARGUMENT	1184:36	1184:36	9	module
FIELD	1184:36	1184:36	10	module
LEAF_NODE	1184:36	1184:36	11	module
LEAF_NODE	1184:42	1184:42	9	,
ARGUMENT	1184:44	1184:44	9	"Improper JPEG component count"
FIELD	1184:44	1184:44	10	"Improper JPEG component count"
LEAF_NODE	1184:44	1184:44	11	"Improper JPEG component count"
LEAF_NODE	1184:75	1184:75	9	)
LEAF_NODE	1184:76	1184:76	7	;
JUMP_STATEMENT	1185:2	1185:12	6	return ( 0 ) ;
KEYWORD	1185:2	1185:2	7	return
LEAF_NODE	1185:2	1185:2	8	return
DESTINATION	1185:9	1185:9	7	( 0 )
EXPR	1185:9	1185:11	8	( 0 )
LEAF_NODE	1185:9	1185:9	9	(
FIELD	1185:10	1185:10	9	0
LEAF_NODE	1185:10	1185:10	10	0
LEAF_NODE	1185:11	1185:11	9	)
LEAF_NODE	1185:12	1185:12	7	;
LEAF_NODE	1186:1	1186:1	5	}
SELECTION	1188:1	1188:62	3	
KEYWORD	1188:1	1188:1	4	if
LEAF_NODE	1188:1	1188:1	5	if
LEAF_NODE	1188:4	1188:4	4	(
CONDITION	1188:5	1188:5	4	12 != td -> td_bitspersample && 8 != td -> td_bitspersample
EXPR	1188:5	1188:5	5	12 != td -> td_bitspersample && 8 != td -> td_bitspersample
AND	1188:5	1188:35	6	12 != td -> td_bitspersample && 8 != td -> td_bitspersample
EXPR	1188:5	1188:11	7	12 != td -> td_bitspersample
FIELD	1188:5	1188:5	8	12
LEAF_NODE	1188:5	1188:5	9	12
EQ_OPERATOR	1188:8	1188:8	8	!=
LEAF_NODE	1188:8	1188:8	9	!=
FIELD	1188:11	1188:15	8	td -> td_bitspersample
LEAF_NODE	1188:11	1188:11	9	td
LEAF_NODE	1188:13	1188:13	9	->
LEAF_NODE	1188:15	1188:15	9	td_bitspersample
LEAF_NODE	1188:32	1188:32	7	&&
EXPR	1188:35	1188:40	7	8 != td -> td_bitspersample
FIELD	1188:35	1188:35	8	8
LEAF_NODE	1188:35	1188:35	9	8
EQ_OPERATOR	1188:37	1188:37	8	!=
LEAF_NODE	1188:37	1188:37	9	!=
FIELD	1188:40	1188:44	8	td -> td_bitspersample
LEAF_NODE	1188:40	1188:40	9	td
LEAF_NODE	1188:42	1188:42	9	->
LEAF_NODE	1188:44	1188:44	9	td_bitspersample
LEAF_NODE	1188:60	1188:60	4	)
STATEMENTS	1188:62	1191:1	4	
LEAF_NODE	1188:62	1188:62	5	{
STATEMENTS	1189:2	1190:2	5	
EXPR_STATEMENT	1189:2	1189:75	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG data precision" ) ;
EXPR	1189:2	1189:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG data precision" )
FUNCTION_CALL	1189:2	1189:74	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG data precision" )
CALLEE	1189:2	1189:2	9	TIFFErrorExt
LEAF_NODE	1189:2	1189:2	10	TIFFErrorExt
LEAF_NODE	1189:14	1189:14	9	(
ARGUMENT	1189:15	1189:15	9	tif -> tif_clientdata
FIELD	1189:15	1189:20	10	tif -> tif_clientdata
LEAF_NODE	1189:15	1189:15	11	tif
LEAF_NODE	1189:18	1189:18	11	->
LEAF_NODE	1189:20	1189:20	11	tif_clientdata
LEAF_NODE	1189:34	1189:34	9	,
ARGUMENT	1189:36	1189:36	9	module
FIELD	1189:36	1189:36	10	module
LEAF_NODE	1189:36	1189:36	11	module
LEAF_NODE	1189:42	1189:42	9	,
ARGUMENT	1189:44	1189:44	9	"Improper JPEG data precision"
FIELD	1189:44	1189:44	10	"Improper JPEG data precision"
LEAF_NODE	1189:44	1189:44	11	"Improper JPEG data precision"
LEAF_NODE	1189:74	1189:74	9	)
LEAF_NODE	1189:75	1189:75	7	;
JUMP_STATEMENT	1190:2	1190:12	6	return ( 0 ) ;
KEYWORD	1190:2	1190:2	7	return
LEAF_NODE	1190:2	1190:2	8	return
DESTINATION	1190:9	1190:9	7	( 0 )
EXPR	1190:9	1190:11	8	( 0 )
LEAF_NODE	1190:9	1190:9	9	(
FIELD	1190:10	1190:10	9	0
LEAF_NODE	1190:10	1190:10	10	0
LEAF_NODE	1190:11	1190:11	9	)
LEAF_NODE	1190:12	1190:12	7	;
LEAF_NODE	1191:1	1191:1	5	}
EXPR_STATEMENT	1192:1	1192:50	3	sp -> cinfo . d . data_precision = td -> td_bitspersample ;
EXPR	1192:1	1192:1	4	sp -> cinfo . d . data_precision = td -> td_bitspersample
ASSIGN	1192:1	1192:30	5	sp -> cinfo . d . data_precision = td -> td_bitspersample
LVAL	1192:1	1192:1	6	sp -> cinfo . d . data_precision
FIELD	1192:1	1192:13	7	sp -> cinfo . d . data_precision
LEAF_NODE	1192:1	1192:1	8	sp
LEAF_NODE	1192:3	1192:3	8	->
LEAF_NODE	1192:5	1192:5	8	cinfo
LEAF_NODE	1192:10	1192:10	8	.
LEAF_NODE	1192:11	1192:11	8	d
LEAF_NODE	1192:12	1192:12	8	.
LEAF_NODE	1192:13	1192:13	8	data_precision
ASSIGN_OP	1192:28	1192:28	6	=
LEAF_NODE	1192:28	1192:28	7	=
RVAL	1192:30	1192:30	6	td -> td_bitspersample
FIELD	1192:30	1192:34	7	td -> td_bitspersample
LEAF_NODE	1192:30	1192:30	8	td
LEAF_NODE	1192:32	1192:32	8	->
LEAF_NODE	1192:34	1192:34	8	td_bitspersample
LEAF_NODE	1192:50	1192:50	4	;
EXPR_STATEMENT	1193:1	1193:51	3	sp -> cinfo . d . bits_in_jsample = td -> td_bitspersample ;
EXPR	1193:1	1193:1	4	sp -> cinfo . d . bits_in_jsample = td -> td_bitspersample
ASSIGN	1193:1	1193:31	5	sp -> cinfo . d . bits_in_jsample = td -> td_bitspersample
LVAL	1193:1	1193:1	6	sp -> cinfo . d . bits_in_jsample
FIELD	1193:1	1193:13	7	sp -> cinfo . d . bits_in_jsample
LEAF_NODE	1193:1	1193:1	8	sp
LEAF_NODE	1193:3	1193:3	8	->
LEAF_NODE	1193:5	1193:5	8	cinfo
LEAF_NODE	1193:10	1193:10	8	.
LEAF_NODE	1193:11	1193:11	8	d
LEAF_NODE	1193:12	1193:12	8	.
LEAF_NODE	1193:13	1193:13	8	bits_in_jsample
ASSIGN_OP	1193:29	1193:29	6	=
LEAF_NODE	1193:29	1193:29	7	=
RVAL	1193:31	1193:31	6	td -> td_bitspersample
FIELD	1193:31	1193:35	7	td -> td_bitspersample
LEAF_NODE	1193:31	1193:31	8	td
LEAF_NODE	1193:33	1193:33	8	->
LEAF_NODE	1193:35	1193:35	8	td_bitspersample
LEAF_NODE	1193:51	1193:51	4	;
SELECTION	1195:1	1195:57	3	
KEYWORD	1195:1	1195:1	4	if
LEAF_NODE	1195:1	1195:1	5	if
LEAF_NODE	1195:4	1195:4	4	(
CONDITION	1195:5	1195:5	4	sp -> cinfo . d . data_precision != td -> td_bitspersample
EXPR	1195:5	1195:35	5	sp -> cinfo . d . data_precision != td -> td_bitspersample
FIELD	1195:5	1195:17	6	sp -> cinfo . d . data_precision
LEAF_NODE	1195:5	1195:5	7	sp
LEAF_NODE	1195:7	1195:7	7	->
LEAF_NODE	1195:9	1195:9	7	cinfo
LEAF_NODE	1195:14	1195:14	7	.
LEAF_NODE	1195:15	1195:15	7	d
LEAF_NODE	1195:16	1195:16	7	.
LEAF_NODE	1195:17	1195:17	7	data_precision
EQ_OPERATOR	1195:32	1195:32	6	!=
LEAF_NODE	1195:32	1195:32	7	!=
FIELD	1195:35	1195:39	6	td -> td_bitspersample
LEAF_NODE	1195:35	1195:35	7	td
LEAF_NODE	1195:37	1195:37	7	->
LEAF_NODE	1195:39	1195:39	7	td_bitspersample
LEAF_NODE	1195:55	1195:55	4	)
STATEMENTS	1195:57	1198:1	4	
LEAF_NODE	1195:57	1195:57	5	{
STATEMENTS	1196:2	1197:2	5	
EXPR_STATEMENT	1196:2	1196:75	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG data precision" ) ;
EXPR	1196:2	1196:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG data precision" )
FUNCTION_CALL	1196:2	1196:74	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG data precision" )
CALLEE	1196:2	1196:2	9	TIFFErrorExt
LEAF_NODE	1196:2	1196:2	10	TIFFErrorExt
LEAF_NODE	1196:14	1196:14	9	(
ARGUMENT	1196:15	1196:15	9	tif -> tif_clientdata
FIELD	1196:15	1196:20	10	tif -> tif_clientdata
LEAF_NODE	1196:15	1196:15	11	tif
LEAF_NODE	1196:18	1196:18	11	->
LEAF_NODE	1196:20	1196:20	11	tif_clientdata
LEAF_NODE	1196:34	1196:34	9	,
ARGUMENT	1196:36	1196:36	9	module
FIELD	1196:36	1196:36	10	module
LEAF_NODE	1196:36	1196:36	11	module
LEAF_NODE	1196:42	1196:42	9	,
ARGUMENT	1196:44	1196:44	9	"Improper JPEG data precision"
FIELD	1196:44	1196:44	10	"Improper JPEG data precision"
LEAF_NODE	1196:44	1196:44	11	"Improper JPEG data precision"
LEAF_NODE	1196:74	1196:74	9	)
LEAF_NODE	1196:75	1196:75	7	;
JUMP_STATEMENT	1197:2	1197:12	6	return ( 0 ) ;
KEYWORD	1197:2	1197:2	7	return
LEAF_NODE	1197:2	1197:2	8	return
DESTINATION	1197:9	1197:9	7	( 0 )
EXPR	1197:9	1197:11	8	( 0 )
LEAF_NODE	1197:9	1197:9	9	(
FIELD	1197:10	1197:10	9	0
LEAF_NODE	1197:10	1197:10	10	0
LEAF_NODE	1197:11	1197:11	9	)
LEAF_NODE	1197:12	1197:12	7	;
LEAF_NODE	1198:1	1198:1	5	}
SELECTION	1203:8	1204:8	3	
KEYWORD	1203:8	1203:8	4	if
LEAF_NODE	1203:8	1203:8	5	if
LEAF_NODE	1203:10	1203:10	4	(
CONDITION	1203:12	1203:12	4	TIFFjpeg_has_multiple_scans ( sp )
EXPR	1203:12	1203:12	5	TIFFjpeg_has_multiple_scans ( sp )
FUNCTION_CALL	1203:12	1203:42	6	TIFFjpeg_has_multiple_scans ( sp )
CALLEE	1203:12	1203:12	7	TIFFjpeg_has_multiple_scans
LEAF_NODE	1203:12	1203:12	8	TIFFjpeg_has_multiple_scans
LEAF_NODE	1203:39	1203:39	7	(
ARGUMENT	1203:40	1203:40	7	sp
FIELD	1203:40	1203:40	8	sp
LEAF_NODE	1203:40	1203:40	9	sp
LEAF_NODE	1203:42	1203:42	7	)
LEAF_NODE	1203:44	1203:44	4	)
STATEMENTS	1204:8	1239:8	4	
LEAF_NODE	1204:8	1204:8	5	{
STATEMENTS	1209:12	1222:12	5	
LEAF_NODE	1209:12	1209:12	6	toff_t
LEAF_NODE	1209:19	1209:19	6	nRequiredMemory
LEAF_NODE	1209:35	1209:35	6	=
LEAF_NODE	1209:37	1209:37	6	(
LEAF_NODE	1209:38	1209:38	6	toff_t
LEAF_NODE	1209:44	1209:44	6	)
LEAF_NODE	1209:45	1209:45	6	sp
LEAF_NODE	1209:47	1209:47	6	->
LEAF_NODE	1209:49	1209:49	6	cinfo
LEAF_NODE	1209:54	1209:54	6	.
LEAF_NODE	1209:55	1209:55	6	d
LEAF_NODE	1209:56	1209:56	6	.
LEAF_NODE	1209:57	1209:57	6	image_width
LEAF_NODE	1209:69	1209:69	6	*
LEAF_NODE	1210:37	1210:37	6	sp
LEAF_NODE	1210:39	1210:39	6	->
LEAF_NODE	1210:41	1210:41	6	cinfo
LEAF_NODE	1210:46	1210:46	6	.
LEAF_NODE	1210:47	1210:47	6	d
LEAF_NODE	1210:48	1210:48	6	.
LEAF_NODE	1210:49	1210:49	6	image_height
EXPR_STATEMENT	1210:62	1212:65	6	* sp -> cinfo . d . num_components * ( ( td -> td_bitspersample + 7 ) / 8 ) ;
EXPR	1210:62	1212:64	7	* sp -> cinfo . d . num_components * ( ( td -> td_bitspersample + 7 ) / 8 )
UNARY_EXPR	1210:62	1211:37	8	* sp -> cinfo . d . num_components
UNARY_OPERATOR	1210:62	1210:62	9	*
LEAF_NODE	1210:62	1210:62	10	*
FIELD	1211:37	1211:49	9	sp -> cinfo . d . num_components
LEAF_NODE	1211:37	1211:37	10	sp
LEAF_NODE	1211:39	1211:39	10	->
LEAF_NODE	1211:41	1211:41	10	cinfo
LEAF_NODE	1211:46	1211:46	10	.
LEAF_NODE	1211:47	1211:47	10	d
LEAF_NODE	1211:48	1211:48	10	.
LEAF_NODE	1211:49	1211:49	10	num_components
LEAF_NODE	1211:64	1211:64	8	*
LEAF_NODE	1212:37	1212:37	8	(
LEAF_NODE	1212:38	1212:38	8	(
FIELD	1212:39	1212:43	8	td -> td_bitspersample
LEAF_NODE	1212:39	1212:39	9	td
LEAF_NODE	1212:41	1212:41	9	->
LEAF_NODE	1212:43	1212:43	9	td_bitspersample
LEAF_NODE	1212:59	1212:59	8	+
FIELD	1212:60	1212:60	8	7
LEAF_NODE	1212:60	1212:60	9	7
LEAF_NODE	1212:61	1212:61	8	)
LEAF_NODE	1212:62	1212:62	8	/
FIELD	1212:63	1212:63	8	8
LEAF_NODE	1212:63	1212:63	9	8
LEAF_NODE	1212:64	1212:64	8	)
LEAF_NODE	1212:65	1212:65	7	;
SELECTION	1215:12	1216:16	6	
KEYWORD	1215:12	1215:12	7	if
LEAF_NODE	1215:12	1215:12	8	if
LEAF_NODE	1215:14	1215:14	7	(
CONDITION	1215:16	1215:16	7	sp -> cinfo . d . progressive_mode
EXPR	1215:16	1215:16	8	sp -> cinfo . d . progressive_mode
FIELD	1215:16	1215:28	9	sp -> cinfo . d . progressive_mode
LEAF_NODE	1215:16	1215:16	10	sp
LEAF_NODE	1215:18	1215:18	10	->
LEAF_NODE	1215:20	1215:20	10	cinfo
LEAF_NODE	1215:25	1215:25	10	.
LEAF_NODE	1215:26	1215:26	10	d
LEAF_NODE	1215:27	1215:27	10	.
LEAF_NODE	1215:28	1215:28	10	progressive_mode
LEAF_NODE	1215:45	1215:45	7	)
STATEMENTS	1216:16	1216:16	7	
EXPR_STATEMENT	1216:16	1216:36	8	nRequiredMemory *= 3 ;
EXPR	1216:16	1216:16	9	nRequiredMemory *= 3
ASSIGN	1216:16	1216:35	10	nRequiredMemory *= 3
LVAL	1216:16	1216:16	11	nRequiredMemory
FIELD	1216:16	1216:16	12	nRequiredMemory
LEAF_NODE	1216:16	1216:16	13	nRequiredMemory
ASSIGN_OP	1216:32	1216:32	11	*=
LEAF_NODE	1216:32	1216:32	12	*=
RVAL	1216:35	1216:35	11	3
FIELD	1216:35	1216:35	12	3
LEAF_NODE	1216:35	1216:35	13	3
LEAF_NODE	1216:36	1216:36	9	;
SELECTION	1222:12	1224:12	6	
KEYWORD	1222:12	1222:12	7	if
LEAF_NODE	1222:12	1222:12	8	if
LEAF_NODE	1222:14	1222:14	7	(
CONDITION	1222:16	1222:16	7	nRequiredMemory > TIFF_LIBJPEG_LARGEST_MEM_ALLOC && getenv ( "LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC" ) == NULL
EXPR	1222:16	1222:16	8	nRequiredMemory > TIFF_LIBJPEG_LARGEST_MEM_ALLOC && getenv ( "LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC" ) == NULL
AND	1222:16	1223:16	9	nRequiredMemory > TIFF_LIBJPEG_LARGEST_MEM_ALLOC && getenv ( "LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC" ) == NULL
EXPR	1222:16	1222:34	10	nRequiredMemory > TIFF_LIBJPEG_LARGEST_MEM_ALLOC
FIELD	1222:16	1222:16	11	nRequiredMemory
LEAF_NODE	1222:16	1222:16	12	nRequiredMemory
REL_OPERATOR	1222:32	1222:32	11	>
LEAF_NODE	1222:32	1222:32	12	>
FIELD	1222:34	1222:34	11	TIFF_LIBJPEG_LARGEST_MEM_ALLOC
LEAF_NODE	1222:34	1222:34	12	TIFF_LIBJPEG_LARGEST_MEM_ALLOC
LEAF_NODE	1222:65	1222:65	10	&&
EXPR	1223:16	1223:67	10	getenv ( "LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC" ) == NULL
FUNCTION_CALL	1223:16	1223:62	11	getenv ( "LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC" )
CALLEE	1223:16	1223:16	12	getenv
LEAF_NODE	1223:16	1223:16	13	getenv
LEAF_NODE	1223:22	1223:22	12	(
ARGUMENT	1223:23	1223:23	12	"LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC"
FIELD	1223:23	1223:23	13	"LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC"
LEAF_NODE	1223:23	1223:23	14	"LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC"
LEAF_NODE	1223:62	1223:62	12	)
EQ_OPERATOR	1223:64	1223:64	11	==
LEAF_NODE	1223:64	1223:64	12	==
FIELD	1223:67	1223:67	11	NULL
LEAF_NODE	1223:67	1223:67	12	NULL
LEAF_NODE	1223:72	1223:72	7	)
STATEMENTS	1224:12	1238:12	7	
LEAF_NODE	1224:12	1224:12	8	{
STATEMENTS	1225:20	1237:20	8	
LEAF_NODE	1225:20	1225:20	9	TIFFErrorExt
LEAF_NODE	1225:32	1225:32	9	(
LEAF_NODE	1225:33	1225:33	9	tif
LEAF_NODE	1225:36	1225:36	9	->
LEAF_NODE	1225:38	1225:38	9	tif_clientdata
LEAF_NODE	1225:52	1225:52	9	,
LEAF_NODE	1225:54	1225:54	9	module
LEAF_NODE	1225:60	1225:60	9	,
LEAF_NODE	1226:24	1226:24	9	"Reading this strip would require libjpeg to allocate "
LEAF_NODE	1227:24	1227:24	9	"at least %u bytes. "
LEAF_NODE	1228:24	1228:24	9	"This is disabled since above the %u threshold. "
LEAF_NODE	1229:24	1229:24	9	"You may override this restriction by defining the "
LEAF_NODE	1230:24	1230:24	9	"LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC environment variable, "
LEAF_NODE	1231:24	1231:24	9	"or recompile libtiff by defining the "
LEAF_NODE	1232:24	1232:24	9	"TIFF_LIBJPEG_LARGEST_MEM_ALLOC macro to a value greater "
LEAF_NODE	1233:24	1233:24	9	"than %u"
LEAF_NODE	1233:33	1233:33	9	,
LEAF_NODE	1234:24	1234:24	9	(
LEAF_NODE	1234:25	1234:25	9	unsigned
LEAF_NODE	1234:33	1234:33	9	)
LEAF_NODE	1234:34	1234:34	9	nRequiredMemory
LEAF_NODE	1234:49	1234:49	9	,
LEAF_NODE	1235:24	1235:24	9	(
LEAF_NODE	1235:25	1235:25	9	unsigned
LEAF_NODE	1235:33	1235:33	9	)
LEAF_NODE	1235:34	1235:34	9	TIFF_LIBJPEG_LARGEST_MEM_ALLOC
LEAF_NODE	1235:64	1235:64	9	,
LEAF_NODE	1236:24	1236:24	9	(
LEAF_NODE	1236:25	1236:25	9	unsigned
LEAF_NODE	1236:33	1236:33	9	)
LEAF_NODE	1236:34	1236:34	9	TIFF_LIBJPEG_LARGEST_MEM_ALLOC
LEAF_NODE	1236:64	1236:64	9	)
LEAF_NODE	1236:65	1236:65	9	;
JUMP_STATEMENT	1237:20	1237:30	9	return ( 0 ) ;
KEYWORD	1237:20	1237:20	10	return
LEAF_NODE	1237:20	1237:20	11	return
DESTINATION	1237:27	1237:27	10	( 0 )
EXPR	1237:27	1237:29	11	( 0 )
LEAF_NODE	1237:27	1237:27	12	(
FIELD	1237:28	1237:28	12	0
LEAF_NODE	1237:28	1237:28	13	0
LEAF_NODE	1237:29	1237:29	12	)
LEAF_NODE	1237:30	1237:30	10	;
LEAF_NODE	1238:12	1238:12	8	}
LEAF_NODE	1239:8	1239:8	5	}
SELECTION	1241:1	1241:49	3	
KEYWORD	1241:1	1241:1	4	if
LEAF_NODE	1241:1	1241:1	5	if
LEAF_NODE	1241:4	1241:4	4	(
CONDITION	1241:5	1241:5	4	td -> td_planarconfig == PLANARCONFIG_CONTIG
EXPR	1241:5	1241:28	5	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	1241:5	1241:9	6	td -> td_planarconfig
LEAF_NODE	1241:5	1241:5	7	td
LEAF_NODE	1241:7	1241:7	7	->
LEAF_NODE	1241:9	1241:9	7	td_planarconfig
EQ_OPERATOR	1241:25	1241:25	6	==
LEAF_NODE	1241:25	1241:25	7	==
FIELD	1241:28	1241:28	6	PLANARCONFIG_CONTIG
LEAF_NODE	1241:28	1241:28	7	PLANARCONFIG_CONTIG
LEAF_NODE	1241:47	1241:47	4	)
STATEMENTS	1241:49	1261:1	4	
LEAF_NODE	1241:49	1241:49	5	{
STATEMENTS	1243:2	1254:2	5	
SELECTION	1243:2	1244:64	6	
KEYWORD	1243:2	1243:2	7	if
LEAF_NODE	1243:2	1243:2	8	if
LEAF_NODE	1243:5	1243:5	7	(
CONDITION	1243:6	1243:6	7	sp -> cinfo . d . comp_info [ 0 ] . h_samp_factor != sp -> h_sampling || sp -> cinfo . d . comp_info [ 0 ] . v_samp_factor != sp -> v_sampling
EXPR	1243:6	1243:6	8	sp -> cinfo . d . comp_info [ 0 ] . h_samp_factor != sp -> h_sampling || sp -> cinfo . d . comp_info [ 0 ] . v_samp_factor != sp -> v_sampling
OR	1243:6	1244:6	9	sp -> cinfo . d . comp_info [ 0 ] . h_samp_factor != sp -> h_sampling || sp -> cinfo . d . comp_info [ 0 ] . v_samp_factor != sp -> v_sampling
EXPR	1243:6	1243:48	10	sp -> cinfo . d . comp_info [ 0 ] . h_samp_factor != sp -> h_sampling
FIELD	1243:6	1243:31	11	sp -> cinfo . d . comp_info [ 0 ] . h_samp_factor
LEAF_NODE	1243:6	1243:6	12	sp
LEAF_NODE	1243:8	1243:8	12	->
LEAF_NODE	1243:10	1243:10	12	cinfo
LEAF_NODE	1243:15	1243:15	12	.
LEAF_NODE	1243:16	1243:16	12	d
LEAF_NODE	1243:17	1243:17	12	.
LEAF_NODE	1243:18	1243:18	12	comp_info
LEAF_NODE	1243:27	1243:27	12	[
EXPR	1243:28	1243:28	12	0
FIELD	1243:28	1243:28	13	0
LEAF_NODE	1243:28	1243:28	14	0
LEAF_NODE	1243:29	1243:29	12	]
LEAF_NODE	1243:30	1243:30	12	.
LEAF_NODE	1243:31	1243:31	12	h_samp_factor
EQ_OPERATOR	1243:45	1243:45	11	!=
LEAF_NODE	1243:45	1243:45	12	!=
FIELD	1243:48	1243:52	11	sp -> h_sampling
LEAF_NODE	1243:48	1243:48	12	sp
LEAF_NODE	1243:50	1243:50	12	->
LEAF_NODE	1243:52	1243:52	12	h_sampling
LEAF_NODE	1243:63	1243:63	10	||
EXPR	1244:6	1244:48	10	sp -> cinfo . d . comp_info [ 0 ] . v_samp_factor != sp -> v_sampling
FIELD	1244:6	1244:31	11	sp -> cinfo . d . comp_info [ 0 ] . v_samp_factor
LEAF_NODE	1244:6	1244:6	12	sp
LEAF_NODE	1244:8	1244:8	12	->
LEAF_NODE	1244:10	1244:10	12	cinfo
LEAF_NODE	1244:15	1244:15	12	.
LEAF_NODE	1244:16	1244:16	12	d
LEAF_NODE	1244:17	1244:17	12	.
LEAF_NODE	1244:18	1244:18	12	comp_info
LEAF_NODE	1244:27	1244:27	12	[
EXPR	1244:28	1244:28	12	0
FIELD	1244:28	1244:28	13	0
LEAF_NODE	1244:28	1244:28	14	0
LEAF_NODE	1244:29	1244:29	12	]
LEAF_NODE	1244:30	1244:30	12	.
LEAF_NODE	1244:31	1244:31	12	v_samp_factor
EQ_OPERATOR	1244:45	1244:45	11	!=
LEAF_NODE	1244:45	1244:45	12	!=
FIELD	1244:48	1244:52	11	sp -> v_sampling
LEAF_NODE	1244:48	1244:48	12	sp
LEAF_NODE	1244:50	1244:50	12	->
LEAF_NODE	1244:52	1244:52	12	v_sampling
LEAF_NODE	1244:62	1244:62	7	)
STATEMENTS	1244:64	1252:2	7	
LEAF_NODE	1244:64	1244:64	8	{
STATEMENTS	1245:3	1251:3	8	
LEAF_NODE	1245:3	1245:3	9	TIFFErrorExt
LEAF_NODE	1245:15	1245:15	9	(
LEAF_NODE	1245:16	1245:16	9	tif
LEAF_NODE	1245:19	1245:19	9	->
LEAF_NODE	1245:21	1245:21	9	tif_clientdata
LEAF_NODE	1245:35	1245:35	9	,
LEAF_NODE	1245:37	1245:37	9	module
LEAF_NODE	1245:43	1245:43	9	,
LEAF_NODE	1246:11	1246:11	9	"Improper JPEG sampling factors %d,%d\n"
LEAF_NODE	1247:11	1247:11	9	"Apparently should be %d,%d."
LEAF_NODE	1247:40	1247:40	9	,
LEAF_NODE	1248:11	1248:11	9	sp
LEAF_NODE	1248:13	1248:13	9	->
LEAF_NODE	1248:15	1248:15	9	cinfo
LEAF_NODE	1248:20	1248:20	9	.
LEAF_NODE	1248:21	1248:21	9	d
LEAF_NODE	1248:22	1248:22	9	.
LEAF_NODE	1248:23	1248:23	9	comp_info
LEAF_NODE	1248:32	1248:32	9	[
LEAF_NODE	1248:33	1248:33	9	0
LEAF_NODE	1248:34	1248:34	9	]
LEAF_NODE	1248:35	1248:35	9	.
LEAF_NODE	1248:36	1248:36	9	h_samp_factor
LEAF_NODE	1248:49	1248:49	9	,
LEAF_NODE	1249:11	1249:11	9	sp
LEAF_NODE	1249:13	1249:13	9	->
LEAF_NODE	1249:15	1249:15	9	cinfo
LEAF_NODE	1249:20	1249:20	9	.
LEAF_NODE	1249:21	1249:21	9	d
LEAF_NODE	1249:22	1249:22	9	.
LEAF_NODE	1249:23	1249:23	9	comp_info
LEAF_NODE	1249:32	1249:32	9	[
LEAF_NODE	1249:33	1249:33	9	0
LEAF_NODE	1249:34	1249:34	9	]
LEAF_NODE	1249:35	1249:35	9	.
LEAF_NODE	1249:36	1249:36	9	v_samp_factor
LEAF_NODE	1249:49	1249:49	9	,
LEAF_NODE	1250:11	1250:11	9	sp
LEAF_NODE	1250:13	1250:13	9	->
LEAF_NODE	1250:15	1250:15	9	h_sampling
LEAF_NODE	1250:25	1250:25	9	,
LEAF_NODE	1250:27	1250:27	9	sp
LEAF_NODE	1250:29	1250:29	9	->
LEAF_NODE	1250:31	1250:31	9	v_sampling
LEAF_NODE	1250:41	1250:41	9	)
LEAF_NODE	1250:42	1250:42	9	;
JUMP_STATEMENT	1251:3	1251:13	9	return ( 0 ) ;
KEYWORD	1251:3	1251:3	10	return
LEAF_NODE	1251:3	1251:3	11	return
DESTINATION	1251:10	1251:10	10	( 0 )
EXPR	1251:10	1251:12	11	( 0 )
LEAF_NODE	1251:10	1251:10	12	(
FIELD	1251:11	1251:11	12	0
LEAF_NODE	1251:11	1251:11	13	0
LEAF_NODE	1251:12	1251:12	12	)
LEAF_NODE	1251:13	1251:13	10	;
LEAF_NODE	1252:2	1252:2	8	}
ITERATION	1254:2	1254:54	6	
KEYWORD	1254:2	1254:2	7	for
LEAF_NODE	1254:2	1254:2	8	for
LEAF_NODE	1254:6	1254:6	7	(
FOR_INIT	1254:7	1254:13	7	ci = 1 ;
EXPR	1254:7	1254:7	8	ci = 1
ASSIGN	1254:7	1254:12	9	ci = 1
LVAL	1254:7	1254:7	10	ci
FIELD	1254:7	1254:7	11	ci
LEAF_NODE	1254:7	1254:7	12	ci
ASSIGN_OP	1254:10	1254:10	10	=
LEAF_NODE	1254:10	1254:10	11	=
RVAL	1254:12	1254:12	10	1
FIELD	1254:12	1254:12	11	1
LEAF_NODE	1254:12	1254:12	12	1
LEAF_NODE	1254:13	1254:13	8	;
CONDITION	1254:15	1254:15	7	ci < sp -> cinfo . d . num_components
EXPR	1254:15	1254:20	8	ci < sp -> cinfo . d . num_components
FIELD	1254:15	1254:15	9	ci
LEAF_NODE	1254:15	1254:15	10	ci
REL_OPERATOR	1254:18	1254:18	9	<
LEAF_NODE	1254:18	1254:18	10	<
FIELD	1254:20	1254:32	9	sp -> cinfo . d . num_components
LEAF_NODE	1254:20	1254:20	10	sp
LEAF_NODE	1254:22	1254:22	10	->
LEAF_NODE	1254:24	1254:24	10	cinfo
LEAF_NODE	1254:29	1254:29	10	.
LEAF_NODE	1254:30	1254:30	10	d
LEAF_NODE	1254:31	1254:31	10	.
LEAF_NODE	1254:32	1254:32	10	num_components
LEAF_NODE	1254:46	1254:46	7	;
FOR_EXPR	1254:48	1254:48	7	ci ++
EXPR	1254:48	1254:48	8	ci ++
FIELD	1254:48	1254:50	9	ci ++
LEAF_NODE	1254:48	1254:48	10	ci
LEAF_NODE	1254:50	1254:50	10	++
LEAF_NODE	1254:52	1254:52	7	)
STATEMENTS	1254:54	1260:2	7	
LEAF_NODE	1254:54	1254:54	8	{
STATEMENTS	1255:3	1255:3	8	
SELECTION	1255:3	1256:53	9	
KEYWORD	1255:3	1255:3	10	if
LEAF_NODE	1255:3	1255:3	11	if
LEAF_NODE	1255:6	1255:6	10	(
CONDITION	1255:7	1255:7	10	sp -> cinfo . d . comp_info [ ci ] . h_samp_factor != 1 || sp -> cinfo . d . comp_info [ ci ] . v_samp_factor != 1
EXPR	1255:7	1255:7	11	sp -> cinfo . d . comp_info [ ci ] . h_samp_factor != 1 || sp -> cinfo . d . comp_info [ ci ] . v_samp_factor != 1
OR	1255:7	1256:7	12	sp -> cinfo . d . comp_info [ ci ] . h_samp_factor != 1 || sp -> cinfo . d . comp_info [ ci ] . v_samp_factor != 1
EXPR	1255:7	1255:50	13	sp -> cinfo . d . comp_info [ ci ] . h_samp_factor != 1
FIELD	1255:7	1255:33	14	sp -> cinfo . d . comp_info [ ci ] . h_samp_factor
LEAF_NODE	1255:7	1255:7	15	sp
LEAF_NODE	1255:9	1255:9	15	->
LEAF_NODE	1255:11	1255:11	15	cinfo
LEAF_NODE	1255:16	1255:16	15	.
LEAF_NODE	1255:17	1255:17	15	d
LEAF_NODE	1255:18	1255:18	15	.
LEAF_NODE	1255:19	1255:19	15	comp_info
LEAF_NODE	1255:28	1255:28	15	[
EXPR	1255:29	1255:29	15	ci
FIELD	1255:29	1255:29	16	ci
LEAF_NODE	1255:29	1255:29	17	ci
LEAF_NODE	1255:31	1255:31	15	]
LEAF_NODE	1255:32	1255:32	15	.
LEAF_NODE	1255:33	1255:33	15	h_samp_factor
EQ_OPERATOR	1255:47	1255:47	14	!=
LEAF_NODE	1255:47	1255:47	15	!=
FIELD	1255:50	1255:50	14	1
LEAF_NODE	1255:50	1255:50	15	1
LEAF_NODE	1255:52	1255:52	13	||
EXPR	1256:7	1256:50	13	sp -> cinfo . d . comp_info [ ci ] . v_samp_factor != 1
FIELD	1256:7	1256:33	14	sp -> cinfo . d . comp_info [ ci ] . v_samp_factor
LEAF_NODE	1256:7	1256:7	15	sp
LEAF_NODE	1256:9	1256:9	15	->
LEAF_NODE	1256:11	1256:11	15	cinfo
LEAF_NODE	1256:16	1256:16	15	.
LEAF_NODE	1256:17	1256:17	15	d
LEAF_NODE	1256:18	1256:18	15	.
LEAF_NODE	1256:19	1256:19	15	comp_info
LEAF_NODE	1256:28	1256:28	15	[
EXPR	1256:29	1256:29	15	ci
FIELD	1256:29	1256:29	16	ci
LEAF_NODE	1256:29	1256:29	17	ci
LEAF_NODE	1256:31	1256:31	15	]
LEAF_NODE	1256:32	1256:32	15	.
LEAF_NODE	1256:33	1256:33	15	v_samp_factor
EQ_OPERATOR	1256:47	1256:47	14	!=
LEAF_NODE	1256:47	1256:47	15	!=
FIELD	1256:50	1256:50	14	1
LEAF_NODE	1256:50	1256:50	15	1
LEAF_NODE	1256:51	1256:51	10	)
STATEMENTS	1256:53	1259:3	10	
LEAF_NODE	1256:53	1256:53	11	{
STATEMENTS	1257:4	1258:4	11	
EXPR_STATEMENT	1257:4	1257:79	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG sampling factors" ) ;
EXPR	1257:4	1257:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG sampling factors" )
FUNCTION_CALL	1257:4	1257:78	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG sampling factors" )
CALLEE	1257:4	1257:4	15	TIFFErrorExt
LEAF_NODE	1257:4	1257:4	16	TIFFErrorExt
LEAF_NODE	1257:16	1257:16	15	(
ARGUMENT	1257:17	1257:17	15	tif -> tif_clientdata
FIELD	1257:17	1257:22	16	tif -> tif_clientdata
LEAF_NODE	1257:17	1257:17	17	tif
LEAF_NODE	1257:20	1257:20	17	->
LEAF_NODE	1257:22	1257:22	17	tif_clientdata
LEAF_NODE	1257:36	1257:36	15	,
ARGUMENT	1257:38	1257:38	15	module
FIELD	1257:38	1257:38	16	module
LEAF_NODE	1257:38	1257:38	17	module
LEAF_NODE	1257:44	1257:44	15	,
ARGUMENT	1257:46	1257:46	15	"Improper JPEG sampling factors"
FIELD	1257:46	1257:46	16	"Improper JPEG sampling factors"
LEAF_NODE	1257:46	1257:46	17	"Improper JPEG sampling factors"
LEAF_NODE	1257:78	1257:78	15	)
LEAF_NODE	1257:79	1257:79	13	;
JUMP_STATEMENT	1258:4	1258:14	12	return ( 0 ) ;
KEYWORD	1258:4	1258:4	13	return
LEAF_NODE	1258:4	1258:4	14	return
DESTINATION	1258:11	1258:11	13	( 0 )
EXPR	1258:11	1258:13	14	( 0 )
LEAF_NODE	1258:11	1258:11	15	(
FIELD	1258:12	1258:12	15	0
LEAF_NODE	1258:12	1258:12	16	0
LEAF_NODE	1258:13	1258:13	15	)
LEAF_NODE	1258:14	1258:14	13	;
LEAF_NODE	1259:3	1259:3	11	}
LEAF_NODE	1260:2	1260:2	8	}
LEAF_NODE	1261:1	1261:1	5	}
SELECTION	1261:3	1261:8	3	
KEYWORD	1261:3	1261:3	4	else
LEAF_NODE	1261:3	1261:3	5	else
STATEMENTS	1261:8	1268:1	4	
LEAF_NODE	1261:8	1261:8	5	{
STATEMENTS	1263:2	1263:2	5	
SELECTION	1263:2	1264:51	6	
KEYWORD	1263:2	1263:2	7	if
LEAF_NODE	1263:2	1263:2	8	if
LEAF_NODE	1263:5	1263:5	7	(
CONDITION	1263:6	1263:6	7	sp -> cinfo . d . comp_info [ 0 ] . h_samp_factor != 1 || sp -> cinfo . d . comp_info [ 0 ] . v_samp_factor != 1
EXPR	1263:6	1263:6	8	sp -> cinfo . d . comp_info [ 0 ] . h_samp_factor != 1 || sp -> cinfo . d . comp_info [ 0 ] . v_samp_factor != 1
OR	1263:6	1264:6	9	sp -> cinfo . d . comp_info [ 0 ] . h_samp_factor != 1 || sp -> cinfo . d . comp_info [ 0 ] . v_samp_factor != 1
EXPR	1263:6	1263:48	10	sp -> cinfo . d . comp_info [ 0 ] . h_samp_factor != 1
FIELD	1263:6	1263:31	11	sp -> cinfo . d . comp_info [ 0 ] . h_samp_factor
LEAF_NODE	1263:6	1263:6	12	sp
LEAF_NODE	1263:8	1263:8	12	->
LEAF_NODE	1263:10	1263:10	12	cinfo
LEAF_NODE	1263:15	1263:15	12	.
LEAF_NODE	1263:16	1263:16	12	d
LEAF_NODE	1263:17	1263:17	12	.
LEAF_NODE	1263:18	1263:18	12	comp_info
LEAF_NODE	1263:27	1263:27	12	[
EXPR	1263:28	1263:28	12	0
FIELD	1263:28	1263:28	13	0
LEAF_NODE	1263:28	1263:28	14	0
LEAF_NODE	1263:29	1263:29	12	]
LEAF_NODE	1263:30	1263:30	12	.
LEAF_NODE	1263:31	1263:31	12	h_samp_factor
EQ_OPERATOR	1263:45	1263:45	11	!=
LEAF_NODE	1263:45	1263:45	12	!=
FIELD	1263:48	1263:48	11	1
LEAF_NODE	1263:48	1263:48	12	1
LEAF_NODE	1263:50	1263:50	10	||
EXPR	1264:6	1264:48	10	sp -> cinfo . d . comp_info [ 0 ] . v_samp_factor != 1
FIELD	1264:6	1264:31	11	sp -> cinfo . d . comp_info [ 0 ] . v_samp_factor
LEAF_NODE	1264:6	1264:6	12	sp
LEAF_NODE	1264:8	1264:8	12	->
LEAF_NODE	1264:10	1264:10	12	cinfo
LEAF_NODE	1264:15	1264:15	12	.
LEAF_NODE	1264:16	1264:16	12	d
LEAF_NODE	1264:17	1264:17	12	.
LEAF_NODE	1264:18	1264:18	12	comp_info
LEAF_NODE	1264:27	1264:27	12	[
EXPR	1264:28	1264:28	12	0
FIELD	1264:28	1264:28	13	0
LEAF_NODE	1264:28	1264:28	14	0
LEAF_NODE	1264:29	1264:29	12	]
LEAF_NODE	1264:30	1264:30	12	.
LEAF_NODE	1264:31	1264:31	12	v_samp_factor
EQ_OPERATOR	1264:45	1264:45	11	!=
LEAF_NODE	1264:45	1264:45	12	!=
FIELD	1264:48	1264:48	11	1
LEAF_NODE	1264:48	1264:48	12	1
LEAF_NODE	1264:49	1264:49	7	)
STATEMENTS	1264:51	1267:2	7	
LEAF_NODE	1264:51	1264:51	8	{
STATEMENTS	1265:3	1266:3	8	
EXPR_STATEMENT	1265:3	1265:78	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG sampling factors" ) ;
EXPR	1265:3	1265:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG sampling factors" )
FUNCTION_CALL	1265:3	1265:77	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Improper JPEG sampling factors" )
CALLEE	1265:3	1265:3	12	TIFFErrorExt
LEAF_NODE	1265:3	1265:3	13	TIFFErrorExt
LEAF_NODE	1265:15	1265:15	12	(
ARGUMENT	1265:16	1265:16	12	tif -> tif_clientdata
FIELD	1265:16	1265:21	13	tif -> tif_clientdata
LEAF_NODE	1265:16	1265:16	14	tif
LEAF_NODE	1265:19	1265:19	14	->
LEAF_NODE	1265:21	1265:21	14	tif_clientdata
LEAF_NODE	1265:35	1265:35	12	,
ARGUMENT	1265:37	1265:37	12	module
FIELD	1265:37	1265:37	13	module
LEAF_NODE	1265:37	1265:37	14	module
LEAF_NODE	1265:43	1265:43	12	,
ARGUMENT	1265:45	1265:45	12	"Improper JPEG sampling factors"
FIELD	1265:45	1265:45	13	"Improper JPEG sampling factors"
LEAF_NODE	1265:45	1265:45	14	"Improper JPEG sampling factors"
LEAF_NODE	1265:77	1265:77	12	)
LEAF_NODE	1265:78	1265:78	10	;
JUMP_STATEMENT	1266:3	1266:13	9	return ( 0 ) ;
KEYWORD	1266:3	1266:3	10	return
LEAF_NODE	1266:3	1266:3	11	return
DESTINATION	1266:10	1266:10	10	( 0 )
EXPR	1266:10	1266:12	11	( 0 )
LEAF_NODE	1266:10	1266:10	12	(
FIELD	1266:11	1266:11	12	0
LEAF_NODE	1266:11	1266:11	13	0
LEAF_NODE	1266:12	1266:12	12	)
LEAF_NODE	1266:13	1266:13	10	;
LEAF_NODE	1267:2	1267:2	8	}
LEAF_NODE	1268:1	1268:1	5	}
EXPR_STATEMENT	1269:1	1269:27	3	downsampled_output = FALSE ;
EXPR	1269:1	1269:1	4	downsampled_output = FALSE
ASSIGN	1269:1	1269:22	5	downsampled_output = FALSE
LVAL	1269:1	1269:1	6	downsampled_output
FIELD	1269:1	1269:1	7	downsampled_output
LEAF_NODE	1269:1	1269:1	8	downsampled_output
ASSIGN_OP	1269:20	1269:20	6	=
LEAF_NODE	1269:20	1269:20	7	=
RVAL	1269:22	1269:22	6	FALSE
FIELD	1269:22	1269:22	7	FALSE
LEAF_NODE	1269:22	1269:22	8	FALSE
LEAF_NODE	1269:27	1269:27	4	;
SELECTION	1270:1	1272:45	3	
KEYWORD	1270:1	1270:1	4	if
LEAF_NODE	1270:1	1270:1	5	if
LEAF_NODE	1270:4	1270:4	4	(
CONDITION	1270:5	1270:5	4	td -> td_planarconfig == PLANARCONFIG_CONTIG && sp -> photometric == PHOTOMETRIC_YCBCR && sp -> jpegcolormode == JPEGCOLORMODE_RGB
EXPR	1270:5	1270:5	5	td -> td_planarconfig == PLANARCONFIG_CONTIG && sp -> photometric == PHOTOMETRIC_YCBCR && sp -> jpegcolormode == JPEGCOLORMODE_RGB
AND	1270:5	1271:5	6	td -> td_planarconfig == PLANARCONFIG_CONTIG && sp -> photometric == PHOTOMETRIC_YCBCR && sp -> jpegcolormode == JPEGCOLORMODE_RGB
EXPR	1270:5	1270:28	7	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	1270:5	1270:9	8	td -> td_planarconfig
LEAF_NODE	1270:5	1270:5	9	td
LEAF_NODE	1270:7	1270:7	9	->
LEAF_NODE	1270:9	1270:9	9	td_planarconfig
EQ_OPERATOR	1270:25	1270:25	8	==
LEAF_NODE	1270:25	1270:25	9	==
FIELD	1270:28	1270:28	8	PLANARCONFIG_CONTIG
LEAF_NODE	1270:28	1270:28	9	PLANARCONFIG_CONTIG
LEAF_NODE	1270:48	1270:48	7	&&
EXPR	1271:5	1271:5	7	sp -> photometric == PHOTOMETRIC_YCBCR && sp -> jpegcolormode == JPEGCOLORMODE_RGB
AND	1271:5	1272:5	8	sp -> photometric == PHOTOMETRIC_YCBCR && sp -> jpegcolormode == JPEGCOLORMODE_RGB
EXPR	1271:5	1271:24	9	sp -> photometric == PHOTOMETRIC_YCBCR
FIELD	1271:5	1271:9	10	sp -> photometric
LEAF_NODE	1271:5	1271:5	11	sp
LEAF_NODE	1271:7	1271:7	11	->
LEAF_NODE	1271:9	1271:9	11	photometric
EQ_OPERATOR	1271:21	1271:21	10	==
LEAF_NODE	1271:21	1271:21	11	==
FIELD	1271:24	1271:24	10	PHOTOMETRIC_YCBCR
LEAF_NODE	1271:24	1271:24	11	PHOTOMETRIC_YCBCR
LEAF_NODE	1271:42	1271:42	9	&&
EXPR	1272:5	1272:26	9	sp -> jpegcolormode == JPEGCOLORMODE_RGB
FIELD	1272:5	1272:9	10	sp -> jpegcolormode
LEAF_NODE	1272:5	1272:5	11	sp
LEAF_NODE	1272:7	1272:7	11	->
LEAF_NODE	1272:9	1272:9	11	jpegcolormode
EQ_OPERATOR	1272:23	1272:23	10	==
LEAF_NODE	1272:23	1272:23	11	==
FIELD	1272:26	1272:26	10	JPEGCOLORMODE_RGB
LEAF_NODE	1272:26	1272:26	11	JPEGCOLORMODE_RGB
LEAF_NODE	1272:43	1272:43	4	)
STATEMENTS	1272:45	1276:1	4	
LEAF_NODE	1272:45	1272:45	5	{
STATEMENTS	1274:2	1275:2	5	
EXPR_STATEMENT	1274:2	1274:42	6	sp -> cinfo . d . jpeg_color_space = JCS_YCbCr ;
EXPR	1274:2	1274:2	7	sp -> cinfo . d . jpeg_color_space = JCS_YCbCr
ASSIGN	1274:2	1274:33	8	sp -> cinfo . d . jpeg_color_space = JCS_YCbCr
LVAL	1274:2	1274:2	9	sp -> cinfo . d . jpeg_color_space
FIELD	1274:2	1274:14	10	sp -> cinfo . d . jpeg_color_space
LEAF_NODE	1274:2	1274:2	11	sp
LEAF_NODE	1274:4	1274:4	11	->
LEAF_NODE	1274:6	1274:6	11	cinfo
LEAF_NODE	1274:11	1274:11	11	.
LEAF_NODE	1274:12	1274:12	11	d
LEAF_NODE	1274:13	1274:13	11	.
LEAF_NODE	1274:14	1274:14	11	jpeg_color_space
ASSIGN_OP	1274:31	1274:31	9	=
LEAF_NODE	1274:31	1274:31	10	=
RVAL	1274:33	1274:33	9	JCS_YCbCr
FIELD	1274:33	1274:33	10	JCS_YCbCr
LEAF_NODE	1274:33	1274:33	11	JCS_YCbCr
LEAF_NODE	1274:42	1274:42	7	;
EXPR_STATEMENT	1275:2	1275:39	6	sp -> cinfo . d . out_color_space = JCS_RGB ;
EXPR	1275:2	1275:2	7	sp -> cinfo . d . out_color_space = JCS_RGB
ASSIGN	1275:2	1275:32	8	sp -> cinfo . d . out_color_space = JCS_RGB
LVAL	1275:2	1275:2	9	sp -> cinfo . d . out_color_space
FIELD	1275:2	1275:14	10	sp -> cinfo . d . out_color_space
LEAF_NODE	1275:2	1275:2	11	sp
LEAF_NODE	1275:4	1275:4	11	->
LEAF_NODE	1275:6	1275:6	11	cinfo
LEAF_NODE	1275:11	1275:11	11	.
LEAF_NODE	1275:12	1275:12	11	d
LEAF_NODE	1275:13	1275:13	11	.
LEAF_NODE	1275:14	1275:14	11	out_color_space
ASSIGN_OP	1275:30	1275:30	9	=
LEAF_NODE	1275:30	1275:30	10	=
RVAL	1275:32	1275:32	9	JCS_RGB
FIELD	1275:32	1275:32	10	JCS_RGB
LEAF_NODE	1275:32	1275:32	11	JCS_RGB
LEAF_NODE	1275:39	1275:39	7	;
LEAF_NODE	1276:1	1276:1	5	}
SELECTION	1276:3	1276:8	3	
KEYWORD	1276:3	1276:3	4	else
LEAF_NODE	1276:3	1276:3	5	else
STATEMENTS	1276:8	1284:1	4	
LEAF_NODE	1276:8	1276:8	5	{
STATEMENTS	1278:2	1280:2	5	
EXPR_STATEMENT	1278:2	1278:44	6	sp -> cinfo . d . jpeg_color_space = JCS_UNKNOWN ;
EXPR	1278:2	1278:2	7	sp -> cinfo . d . jpeg_color_space = JCS_UNKNOWN
ASSIGN	1278:2	1278:33	8	sp -> cinfo . d . jpeg_color_space = JCS_UNKNOWN
LVAL	1278:2	1278:2	9	sp -> cinfo . d . jpeg_color_space
FIELD	1278:2	1278:14	10	sp -> cinfo . d . jpeg_color_space
LEAF_NODE	1278:2	1278:2	11	sp
LEAF_NODE	1278:4	1278:4	11	->
LEAF_NODE	1278:6	1278:6	11	cinfo
LEAF_NODE	1278:11	1278:11	11	.
LEAF_NODE	1278:12	1278:12	11	d
LEAF_NODE	1278:13	1278:13	11	.
LEAF_NODE	1278:14	1278:14	11	jpeg_color_space
ASSIGN_OP	1278:31	1278:31	9	=
LEAF_NODE	1278:31	1278:31	10	=
RVAL	1278:33	1278:33	9	JCS_UNKNOWN
FIELD	1278:33	1278:33	10	JCS_UNKNOWN
LEAF_NODE	1278:33	1278:33	11	JCS_UNKNOWN
LEAF_NODE	1278:44	1278:44	7	;
EXPR_STATEMENT	1279:2	1279:43	6	sp -> cinfo . d . out_color_space = JCS_UNKNOWN ;
EXPR	1279:2	1279:2	7	sp -> cinfo . d . out_color_space = JCS_UNKNOWN
ASSIGN	1279:2	1279:32	8	sp -> cinfo . d . out_color_space = JCS_UNKNOWN
LVAL	1279:2	1279:2	9	sp -> cinfo . d . out_color_space
FIELD	1279:2	1279:14	10	sp -> cinfo . d . out_color_space
LEAF_NODE	1279:2	1279:2	11	sp
LEAF_NODE	1279:4	1279:4	11	->
LEAF_NODE	1279:6	1279:6	11	cinfo
LEAF_NODE	1279:11	1279:11	11	.
LEAF_NODE	1279:12	1279:12	11	d
LEAF_NODE	1279:13	1279:13	11	.
LEAF_NODE	1279:14	1279:14	11	out_color_space
ASSIGN_OP	1279:30	1279:30	9	=
LEAF_NODE	1279:30	1279:30	10	=
RVAL	1279:32	1279:32	9	JCS_UNKNOWN
FIELD	1279:32	1279:32	10	JCS_UNKNOWN
LEAF_NODE	1279:32	1279:32	11	JCS_UNKNOWN
LEAF_NODE	1279:43	1279:43	7	;
SELECTION	1280:2	1282:3	6	
KEYWORD	1280:2	1280:2	7	if
LEAF_NODE	1280:2	1280:2	8	if
LEAF_NODE	1280:5	1280:5	7	(
CONDITION	1280:6	1280:6	7	td -> td_planarconfig == PLANARCONFIG_CONTIG && ( sp -> h_sampling != 1 || sp -> v_sampling != 1 )
EXPR	1280:6	1280:6	8	td -> td_planarconfig == PLANARCONFIG_CONTIG && ( sp -> h_sampling != 1 || sp -> v_sampling != 1 )
AND	1280:6	1281:6	9	td -> td_planarconfig == PLANARCONFIG_CONTIG && ( sp -> h_sampling != 1 || sp -> v_sampling != 1 )
EXPR	1280:6	1280:29	10	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	1280:6	1280:10	11	td -> td_planarconfig
LEAF_NODE	1280:6	1280:6	12	td
LEAF_NODE	1280:8	1280:8	12	->
LEAF_NODE	1280:10	1280:10	12	td_planarconfig
EQ_OPERATOR	1280:26	1280:26	11	==
LEAF_NODE	1280:26	1280:26	12	==
FIELD	1280:29	1280:29	11	PLANARCONFIG_CONTIG
LEAF_NODE	1280:29	1280:29	12	PLANARCONFIG_CONTIG
LEAF_NODE	1280:49	1280:49	10	&&
EXPR	1281:6	1281:49	10	( sp -> h_sampling != 1 || sp -> v_sampling != 1 )
LEAF_NODE	1281:6	1281:6	11	(
OR	1281:7	1281:30	11	sp -> h_sampling != 1 || sp -> v_sampling != 1
EXPR	1281:7	1281:25	12	sp -> h_sampling != 1
FIELD	1281:7	1281:11	13	sp -> h_sampling
LEAF_NODE	1281:7	1281:7	14	sp
LEAF_NODE	1281:9	1281:9	14	->
LEAF_NODE	1281:11	1281:11	14	h_sampling
EQ_OPERATOR	1281:22	1281:22	13	!=
LEAF_NODE	1281:22	1281:22	14	!=
FIELD	1281:25	1281:25	13	1
LEAF_NODE	1281:25	1281:25	14	1
LEAF_NODE	1281:27	1281:27	12	||
EXPR	1281:30	1281:48	12	sp -> v_sampling != 1
FIELD	1281:30	1281:34	13	sp -> v_sampling
LEAF_NODE	1281:30	1281:30	14	sp
LEAF_NODE	1281:32	1281:32	14	->
LEAF_NODE	1281:34	1281:34	14	v_sampling
EQ_OPERATOR	1281:45	1281:45	13	!=
LEAF_NODE	1281:45	1281:45	14	!=
FIELD	1281:48	1281:48	13	1
LEAF_NODE	1281:48	1281:48	14	1
LEAF_NODE	1281:49	1281:49	11	)
LEAF_NODE	1281:50	1281:50	7	)
STATEMENTS	1282:3	1282:3	7	
EXPR_STATEMENT	1282:3	1282:28	8	downsampled_output = TRUE ;
EXPR	1282:3	1282:3	9	downsampled_output = TRUE
ASSIGN	1282:3	1282:24	10	downsampled_output = TRUE
LVAL	1282:3	1282:3	11	downsampled_output
FIELD	1282:3	1282:3	12	downsampled_output
LEAF_NODE	1282:3	1282:3	13	downsampled_output
ASSIGN_OP	1282:22	1282:22	11	=
LEAF_NODE	1282:22	1282:22	12	=
RVAL	1282:24	1282:24	11	TRUE
FIELD	1282:24	1282:24	12	TRUE
LEAF_NODE	1282:24	1282:24	13	TRUE
LEAF_NODE	1282:28	1282:28	9	;
LEAF_NODE	1284:1	1284:1	5	}
SELECTION	1285:1	1285:25	3	
KEYWORD	1285:1	1285:1	4	if
LEAF_NODE	1285:1	1285:1	5	if
LEAF_NODE	1285:4	1285:4	4	(
CONDITION	1285:5	1285:5	4	downsampled_output
EXPR	1285:5	1285:5	5	downsampled_output
FIELD	1285:5	1285:5	6	downsampled_output
LEAF_NODE	1285:5	1285:5	7	downsampled_output
LEAF_NODE	1285:23	1285:23	4	)
STATEMENTS	1285:25	1294:1	4	
LEAF_NODE	1285:25	1285:25	5	{
STATEMENTS	1287:2	1293:2	5	
EXPR_STATEMENT	1287:2	1287:33	6	sp -> cinfo . d . raw_data_out = TRUE ;
EXPR	1287:2	1287:2	7	sp -> cinfo . d . raw_data_out = TRUE
ASSIGN	1287:2	1287:29	8	sp -> cinfo . d . raw_data_out = TRUE
LVAL	1287:2	1287:2	9	sp -> cinfo . d . raw_data_out
FIELD	1287:2	1287:14	10	sp -> cinfo . d . raw_data_out
LEAF_NODE	1287:2	1287:2	11	sp
LEAF_NODE	1287:4	1287:4	11	->
LEAF_NODE	1287:6	1287:6	11	cinfo
LEAF_NODE	1287:11	1287:11	11	.
LEAF_NODE	1287:12	1287:12	11	d
LEAF_NODE	1287:13	1287:13	11	.
LEAF_NODE	1287:14	1287:14	11	raw_data_out
ASSIGN_OP	1287:27	1287:27	9	=
LEAF_NODE	1287:27	1287:27	10	=
RVAL	1287:29	1287:29	9	TRUE
FIELD	1287:29	1287:29	10	TRUE
LEAF_NODE	1287:29	1287:29	11	TRUE
LEAF_NODE	1287:33	1287:33	7	;
EXPR_STATEMENT	1289:2	1289:41	6	sp -> cinfo . d . do_fancy_upsampling = FALSE ;
EXPR	1289:2	1289:2	7	sp -> cinfo . d . do_fancy_upsampling = FALSE
ASSIGN	1289:2	1289:36	8	sp -> cinfo . d . do_fancy_upsampling = FALSE
LVAL	1289:2	1289:2	9	sp -> cinfo . d . do_fancy_upsampling
FIELD	1289:2	1289:14	10	sp -> cinfo . d . do_fancy_upsampling
LEAF_NODE	1289:2	1289:2	11	sp
LEAF_NODE	1289:4	1289:4	11	->
LEAF_NODE	1289:6	1289:6	11	cinfo
LEAF_NODE	1289:11	1289:11	11	.
LEAF_NODE	1289:12	1289:12	11	d
LEAF_NODE	1289:13	1289:13	11	.
LEAF_NODE	1289:14	1289:14	11	do_fancy_upsampling
ASSIGN_OP	1289:34	1289:34	9	=
LEAF_NODE	1289:34	1289:34	10	=
RVAL	1289:36	1289:36	9	FALSE
FIELD	1289:36	1289:36	10	FALSE
LEAF_NODE	1289:36	1289:36	11	FALSE
LEAF_NODE	1289:41	1289:41	7	;
EXPR_STATEMENT	1291:2	1291:37	6	tif -> tif_decoderow = DecodeRowError ;
EXPR	1291:2	1291:2	7	tif -> tif_decoderow = DecodeRowError
ASSIGN	1291:2	1291:23	8	tif -> tif_decoderow = DecodeRowError
LVAL	1291:2	1291:2	9	tif -> tif_decoderow
FIELD	1291:2	1291:7	10	tif -> tif_decoderow
LEAF_NODE	1291:2	1291:2	11	tif
LEAF_NODE	1291:5	1291:5	11	->
LEAF_NODE	1291:7	1291:7	11	tif_decoderow
ASSIGN_OP	1291:21	1291:21	9	=
LEAF_NODE	1291:21	1291:21	10	=
RVAL	1291:23	1291:23	9	DecodeRowError
FIELD	1291:23	1291:23	10	DecodeRowError
LEAF_NODE	1291:23	1291:23	11	DecodeRowError
LEAF_NODE	1291:37	1291:37	7	;
EXPR_STATEMENT	1292:2	1292:38	6	tif -> tif_decodestrip = JPEGDecodeRaw ;
EXPR	1292:2	1292:2	7	tif -> tif_decodestrip = JPEGDecodeRaw
ASSIGN	1292:2	1292:25	8	tif -> tif_decodestrip = JPEGDecodeRaw
LVAL	1292:2	1292:2	9	tif -> tif_decodestrip
FIELD	1292:2	1292:7	10	tif -> tif_decodestrip
LEAF_NODE	1292:2	1292:2	11	tif
LEAF_NODE	1292:5	1292:5	11	->
LEAF_NODE	1292:7	1292:7	11	tif_decodestrip
ASSIGN_OP	1292:23	1292:23	9	=
LEAF_NODE	1292:23	1292:23	10	=
RVAL	1292:25	1292:25	9	JPEGDecodeRaw
FIELD	1292:25	1292:25	10	JPEGDecodeRaw
LEAF_NODE	1292:25	1292:25	11	JPEGDecodeRaw
LEAF_NODE	1292:38	1292:38	7	;
EXPR_STATEMENT	1293:2	1293:37	6	tif -> tif_decodetile = JPEGDecodeRaw ;
EXPR	1293:2	1293:2	7	tif -> tif_decodetile = JPEGDecodeRaw
ASSIGN	1293:2	1293:24	8	tif -> tif_decodetile = JPEGDecodeRaw
LVAL	1293:2	1293:2	9	tif -> tif_decodetile
FIELD	1293:2	1293:7	10	tif -> tif_decodetile
LEAF_NODE	1293:2	1293:2	11	tif
LEAF_NODE	1293:5	1293:5	11	->
LEAF_NODE	1293:7	1293:7	11	tif_decodetile
ASSIGN_OP	1293:22	1293:22	9	=
LEAF_NODE	1293:22	1293:22	10	=
RVAL	1293:24	1293:24	9	JPEGDecodeRaw
FIELD	1293:24	1293:24	10	JPEGDecodeRaw
LEAF_NODE	1293:24	1293:24	11	JPEGDecodeRaw
LEAF_NODE	1293:37	1293:37	7	;
LEAF_NODE	1294:1	1294:1	5	}
SELECTION	1294:3	1294:8	3	
KEYWORD	1294:3	1294:3	4	else
LEAF_NODE	1294:3	1294:3	5	else
STATEMENTS	1294:8	1300:1	4	
LEAF_NODE	1294:8	1294:8	5	{
STATEMENTS	1296:2	1299:2	5	
EXPR_STATEMENT	1296:2	1296:34	6	sp -> cinfo . d . raw_data_out = FALSE ;
EXPR	1296:2	1296:2	7	sp -> cinfo . d . raw_data_out = FALSE
ASSIGN	1296:2	1296:29	8	sp -> cinfo . d . raw_data_out = FALSE
LVAL	1296:2	1296:2	9	sp -> cinfo . d . raw_data_out
FIELD	1296:2	1296:14	10	sp -> cinfo . d . raw_data_out
LEAF_NODE	1296:2	1296:2	11	sp
LEAF_NODE	1296:4	1296:4	11	->
LEAF_NODE	1296:6	1296:6	11	cinfo
LEAF_NODE	1296:11	1296:11	11	.
LEAF_NODE	1296:12	1296:12	11	d
LEAF_NODE	1296:13	1296:13	11	.
LEAF_NODE	1296:14	1296:14	11	raw_data_out
ASSIGN_OP	1296:27	1296:27	9	=
LEAF_NODE	1296:27	1296:27	10	=
RVAL	1296:29	1296:29	9	FALSE
FIELD	1296:29	1296:29	10	FALSE
LEAF_NODE	1296:29	1296:29	11	FALSE
LEAF_NODE	1296:34	1296:34	7	;
EXPR_STATEMENT	1297:2	1297:33	6	tif -> tif_decoderow = JPEGDecode ;
EXPR	1297:2	1297:2	7	tif -> tif_decoderow = JPEGDecode
ASSIGN	1297:2	1297:23	8	tif -> tif_decoderow = JPEGDecode
LVAL	1297:2	1297:2	9	tif -> tif_decoderow
FIELD	1297:2	1297:7	10	tif -> tif_decoderow
LEAF_NODE	1297:2	1297:2	11	tif
LEAF_NODE	1297:5	1297:5	11	->
LEAF_NODE	1297:7	1297:7	11	tif_decoderow
ASSIGN_OP	1297:21	1297:21	9	=
LEAF_NODE	1297:21	1297:21	10	=
RVAL	1297:23	1297:23	9	JPEGDecode
FIELD	1297:23	1297:23	10	JPEGDecode
LEAF_NODE	1297:23	1297:23	11	JPEGDecode
LEAF_NODE	1297:33	1297:33	7	;
EXPR_STATEMENT	1298:2	1298:35	6	tif -> tif_decodestrip = JPEGDecode ;
EXPR	1298:2	1298:2	7	tif -> tif_decodestrip = JPEGDecode
ASSIGN	1298:2	1298:25	8	tif -> tif_decodestrip = JPEGDecode
LVAL	1298:2	1298:2	9	tif -> tif_decodestrip
FIELD	1298:2	1298:7	10	tif -> tif_decodestrip
LEAF_NODE	1298:2	1298:2	11	tif
LEAF_NODE	1298:5	1298:5	11	->
LEAF_NODE	1298:7	1298:7	11	tif_decodestrip
ASSIGN_OP	1298:23	1298:23	9	=
LEAF_NODE	1298:23	1298:23	10	=
RVAL	1298:25	1298:25	9	JPEGDecode
FIELD	1298:25	1298:25	10	JPEGDecode
LEAF_NODE	1298:25	1298:25	11	JPEGDecode
LEAF_NODE	1298:35	1298:35	7	;
EXPR_STATEMENT	1299:2	1299:34	6	tif -> tif_decodetile = JPEGDecode ;
EXPR	1299:2	1299:2	7	tif -> tif_decodetile = JPEGDecode
ASSIGN	1299:2	1299:24	8	tif -> tif_decodetile = JPEGDecode
LVAL	1299:2	1299:2	9	tif -> tif_decodetile
FIELD	1299:2	1299:7	10	tif -> tif_decodetile
LEAF_NODE	1299:2	1299:2	11	tif
LEAF_NODE	1299:5	1299:5	11	->
LEAF_NODE	1299:7	1299:7	11	tif_decodetile
ASSIGN_OP	1299:22	1299:22	9	=
LEAF_NODE	1299:22	1299:22	10	=
RVAL	1299:24	1299:24	9	JPEGDecode
FIELD	1299:24	1299:24	10	JPEGDecode
LEAF_NODE	1299:24	1299:24	11	JPEGDecode
LEAF_NODE	1299:34	1299:34	7	;
LEAF_NODE	1300:1	1300:1	5	}
SELECTION	1302:1	1303:2	3	
KEYWORD	1302:1	1302:1	4	if
LEAF_NODE	1302:1	1302:1	5	if
LEAF_NODE	1302:4	1302:4	4	(
CONDITION	1302:5	1302:5	4	! TIFFjpeg_start_decompress ( sp )
EXPR	1302:5	1302:5	5	! TIFFjpeg_start_decompress ( sp )
UNARY_EXPR	1302:5	1302:6	6	! TIFFjpeg_start_decompress ( sp )
UNARY_OPERATOR	1302:5	1302:5	7	!
LEAF_NODE	1302:5	1302:5	8	!
FUNCTION_CALL	1302:6	1302:34	7	TIFFjpeg_start_decompress ( sp )
CALLEE	1302:6	1302:6	8	TIFFjpeg_start_decompress
LEAF_NODE	1302:6	1302:6	9	TIFFjpeg_start_decompress
LEAF_NODE	1302:31	1302:31	8	(
ARGUMENT	1302:32	1302:32	8	sp
FIELD	1302:32	1302:32	9	sp
LEAF_NODE	1302:32	1302:32	10	sp
LEAF_NODE	1302:34	1302:34	8	)
LEAF_NODE	1302:35	1302:35	4	)
STATEMENTS	1303:2	1303:2	4	
JUMP_STATEMENT	1303:2	1303:12	5	return ( 0 ) ;
KEYWORD	1303:2	1303:2	6	return
LEAF_NODE	1303:2	1303:2	7	return
DESTINATION	1303:9	1303:9	6	( 0 )
EXPR	1303:9	1303:11	7	( 0 )
LEAF_NODE	1303:9	1303:9	8	(
FIELD	1303:10	1303:10	8	0
LEAF_NODE	1303:10	1303:10	9	0
LEAF_NODE	1303:11	1303:11	8	)
LEAF_NODE	1303:12	1303:12	6	;
SELECTION	1305:1	1305:25	3	
KEYWORD	1305:1	1305:1	4	if
LEAF_NODE	1305:1	1305:1	5	if
LEAF_NODE	1305:4	1305:4	4	(
CONDITION	1305:5	1305:5	4	downsampled_output
EXPR	1305:5	1305:5	5	downsampled_output
FIELD	1305:5	1305:5	6	downsampled_output
LEAF_NODE	1305:5	1305:5	7	downsampled_output
LEAF_NODE	1305:23	1305:23	4	)
STATEMENTS	1305:25	1310:1	4	
LEAF_NODE	1305:25	1305:25	5	{
STATEMENTS	1306:2	1309:2	5	
SELECTION	1306:2	1308:3	6	
KEYWORD	1306:2	1306:2	7	if
LEAF_NODE	1306:2	1306:2	8	if
LEAF_NODE	1306:5	1306:5	7	(
CONDITION	1306:6	1306:6	7	! alloc_downsampled_buffers ( tif , sp -> cinfo . d . comp_info , sp -> cinfo . d . num_components )
EXPR	1306:6	1306:6	8	! alloc_downsampled_buffers ( tif , sp -> cinfo . d . comp_info , sp -> cinfo . d . num_components )
UNARY_EXPR	1306:6	1306:7	9	! alloc_downsampled_buffers ( tif , sp -> cinfo . d . comp_info , sp -> cinfo . d . num_components )
UNARY_OPERATOR	1306:6	1306:6	10	!
LEAF_NODE	1306:6	1306:6	11	!
FUNCTION_CALL	1306:7	1307:38	10	alloc_downsampled_buffers ( tif , sp -> cinfo . d . comp_info , sp -> cinfo . d . num_components )
CALLEE	1306:7	1306:7	11	alloc_downsampled_buffers
LEAF_NODE	1306:7	1306:7	12	alloc_downsampled_buffers
LEAF_NODE	1306:32	1306:32	11	(
ARGUMENT	1306:33	1306:33	11	tif
FIELD	1306:33	1306:33	12	tif
LEAF_NODE	1306:33	1306:33	13	tif
LEAF_NODE	1306:36	1306:36	11	,
ARGUMENT	1306:38	1306:38	11	sp -> cinfo . d . comp_info
FIELD	1306:38	1306:50	12	sp -> cinfo . d . comp_info
LEAF_NODE	1306:38	1306:38	13	sp
LEAF_NODE	1306:40	1306:40	13	->
LEAF_NODE	1306:42	1306:42	13	cinfo
LEAF_NODE	1306:47	1306:47	13	.
LEAF_NODE	1306:48	1306:48	13	d
LEAF_NODE	1306:49	1306:49	13	.
LEAF_NODE	1306:50	1306:50	13	comp_info
LEAF_NODE	1306:59	1306:59	11	,
ARGUMENT	1307:12	1307:12	11	sp -> cinfo . d . num_components
FIELD	1307:12	1307:24	12	sp -> cinfo . d . num_components
LEAF_NODE	1307:12	1307:12	13	sp
LEAF_NODE	1307:14	1307:14	13	->
LEAF_NODE	1307:16	1307:16	13	cinfo
LEAF_NODE	1307:21	1307:21	13	.
LEAF_NODE	1307:22	1307:22	13	d
LEAF_NODE	1307:23	1307:23	13	.
LEAF_NODE	1307:24	1307:24	13	num_components
LEAF_NODE	1307:38	1307:38	11	)
LEAF_NODE	1307:39	1307:39	7	)
STATEMENTS	1308:3	1308:3	7	
JUMP_STATEMENT	1308:3	1308:13	8	return ( 0 ) ;
KEYWORD	1308:3	1308:3	9	return
LEAF_NODE	1308:3	1308:3	10	return
DESTINATION	1308:10	1308:10	9	( 0 )
EXPR	1308:10	1308:12	10	( 0 )
LEAF_NODE	1308:10	1308:10	11	(
FIELD	1308:11	1308:11	11	0
LEAF_NODE	1308:11	1308:11	12	0
LEAF_NODE	1308:12	1308:12	11	)
LEAF_NODE	1308:13	1308:13	9	;
EXPR_STATEMENT	1309:2	1309:25	6	sp -> scancount = DCTSIZE ;
EXPR	1309:2	1309:2	7	sp -> scancount = DCTSIZE
ASSIGN	1309:2	1309:18	8	sp -> scancount = DCTSIZE
LVAL	1309:2	1309:2	9	sp -> scancount
FIELD	1309:2	1309:6	10	sp -> scancount
LEAF_NODE	1309:2	1309:2	11	sp
LEAF_NODE	1309:4	1309:4	11	->
LEAF_NODE	1309:6	1309:6	11	scancount
ASSIGN_OP	1309:16	1309:16	9	=
LEAF_NODE	1309:16	1309:16	10	=
RVAL	1309:18	1309:18	9	DCTSIZE
FIELD	1309:18	1309:18	10	DCTSIZE
LEAF_NODE	1309:18	1309:18	11	DCTSIZE
LEAF_NODE	1309:25	1309:25	7	;
LEAF_NODE	1310:1	1310:1	5	}
JUMP_STATEMENT	1311:1	1311:11	3	return ( 1 ) ;
KEYWORD	1311:1	1311:1	4	return
LEAF_NODE	1311:1	1311:1	5	return
DESTINATION	1311:8	1311:8	4	( 1 )
EXPR	1311:8	1311:10	5	( 1 )
LEAF_NODE	1311:8	1311:8	6	(
FIELD	1311:9	1311:9	6	1
LEAF_NODE	1311:9	1311:9	7	1
LEAF_NODE	1311:10	1311:10	6	)
LEAF_NODE	1311:11	1311:11	4	;
LEAF_NODE	1312:0	1312:0	2	}
FUNCTION_DEF	1319:0	1371:0	1	
RETURN_TYPE	1319:0	1319:7	2	static int
LEAF_NODE	1319:0	1319:0	3	static
TYPE_NAME	1319:7	1319:7	3	int
LEAF_NODE	1319:7	1319:7	4	int
FUNCTION_NAME	1320:0	1320:0	2	JPEGDecode
LEAF_NODE	1320:0	1320:0	3	JPEGDecode
PARAMETER_LIST	1320:10	1320:55	2	( TIFF * tif , uint8 * buf , tmsize_t cc , uint16 s )
LEAF_NODE	1320:10	1320:10	3	(
PARAMETER_DECL	1320:11	1320:17	3	TIFF * tif
TYPE	1320:11	1320:15	4	TIFF *
TYPE_NAME	1320:11	1320:11	5	TIFF
LEAF_NODE	1320:11	1320:11	6	TIFF
POINTER	1320:15	1320:15	5	*
LEAF_NODE	1320:15	1320:15	6	*
NAME	1320:17	1320:17	4	tif
LEAF_NODE	1320:17	1320:17	5	tif
LEAF_NODE	1320:20	1320:20	3	,
PARAMETER_DECL	1320:22	1320:29	3	uint8 * buf
TYPE	1320:22	1320:27	4	uint8 *
TYPE_NAME	1320:22	1320:22	5	uint8
LEAF_NODE	1320:22	1320:22	6	uint8
POINTER	1320:27	1320:27	5	*
LEAF_NODE	1320:27	1320:27	6	*
NAME	1320:29	1320:29	4	buf
LEAF_NODE	1320:29	1320:29	5	buf
LEAF_NODE	1320:32	1320:32	3	,
PARAMETER_DECL	1320:34	1320:43	3	tmsize_t cc
TYPE	1320:34	1320:34	4	tmsize_t
TYPE_NAME	1320:34	1320:34	5	tmsize_t
LEAF_NODE	1320:34	1320:34	6	tmsize_t
NAME	1320:43	1320:43	4	cc
LEAF_NODE	1320:43	1320:43	5	cc
LEAF_NODE	1320:45	1320:45	3	,
PARAMETER_DECL	1320:47	1320:54	3	uint16 s
TYPE	1320:47	1320:47	4	uint16
TYPE_NAME	1320:47	1320:47	5	uint16
LEAF_NODE	1320:47	1320:47	6	uint16
NAME	1320:54	1320:54	4	s
LEAF_NODE	1320:54	1320:54	5	s
LEAF_NODE	1320:55	1320:55	3	)
LEAF_NODE	1321:0	1321:0	2	{
STATEMENTS	1322:1	1369:1	2	
SIMPLE_DECL	1322:1	1322:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	1322:1	1322:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	1322:1	1322:11	5	JPEGState *
TYPE_NAME	1322:1	1322:1	6	JPEGState
LEAF_NODE	1322:1	1322:1	7	JPEGState
POINTER	1322:11	1322:11	6	*
LEAF_NODE	1322:11	1322:11	7	*
NAME	1322:12	1322:12	5	sp
LEAF_NODE	1322:12	1322:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1322:12	1322:12	5	sp = JState ( tif )
ASSIGN	1322:12	1322:17	6	sp = JState ( tif )
LVAL	1322:12	1322:12	7	sp
NAME	1322:12	1322:12	8	sp
LEAF_NODE	1322:12	1322:12	9	sp
ASSIGN_OP	1322:15	1322:15	7	=
LEAF_NODE	1322:15	1322:15	8	=
RVAL	1322:17	1322:17	7	JState ( tif )
FUNCTION_CALL	1322:17	1322:27	8	JState ( tif )
CALLEE	1322:17	1322:17	9	JState
LEAF_NODE	1322:17	1322:17	10	JState
LEAF_NODE	1322:23	1322:23	9	(
ARGUMENT	1322:24	1322:24	9	tif
FIELD	1322:24	1322:24	10	tif
LEAF_NODE	1322:24	1322:24	11	tif
LEAF_NODE	1322:27	1322:27	9	)
LEAF_NODE	1322:28	1322:28	4	;
SIMPLE_DECL	1323:1	1323:15	3	tmsize_t nrows ;
VAR_DECL	1323:1	1323:10	4	tmsize_t nrows
TYPE	1323:1	1323:1	5	tmsize_t
TYPE_NAME	1323:1	1323:1	6	tmsize_t
LEAF_NODE	1323:1	1323:1	7	tmsize_t
NAME	1323:10	1323:10	5	nrows
LEAF_NODE	1323:10	1323:10	6	nrows
LEAF_NODE	1323:15	1323:15	4	;
EXPR_STATEMENT	1324:1	1324:9	3	( void ) s ;
EXPR	1324:1	1324:8	4	( void ) s
LEAF_NODE	1324:1	1324:1	5	(
TYPE_NAME	1324:2	1324:2	5	void
LEAF_NODE	1324:2	1324:2	6	void
LEAF_NODE	1324:6	1324:6	5	)
FIELD	1324:8	1324:8	5	s
LEAF_NODE	1324:8	1324:8	6	s
LEAF_NODE	1324:9	1324:9	4	;
EXPR_STATEMENT	1330:1	1330:57	3	sp -> src . next_input_byte = ( const JOCTET * ) tif -> tif_rawcp ;
EXPR	1330:1	1330:1	4	sp -> src . next_input_byte = ( const JOCTET * ) tif -> tif_rawcp
ASSIGN	1330:1	1330:27	5	sp -> src . next_input_byte = ( const JOCTET * ) tif -> tif_rawcp
LVAL	1330:1	1330:1	6	sp -> src . next_input_byte
FIELD	1330:1	1330:9	7	sp -> src . next_input_byte
LEAF_NODE	1330:1	1330:1	8	sp
LEAF_NODE	1330:3	1330:3	8	->
LEAF_NODE	1330:5	1330:5	8	src
LEAF_NODE	1330:8	1330:8	8	.
LEAF_NODE	1330:9	1330:9	8	next_input_byte
ASSIGN_OP	1330:25	1330:25	6	=
LEAF_NODE	1330:25	1330:25	7	=
RVAL	1330:27	1330:43	6	( const JOCTET * ) tif -> tif_rawcp
LEAF_NODE	1330:27	1330:27	7	(
TYPE_NAME	1330:28	1330:34	7	const JOCTET
LEAF_NODE	1330:28	1330:28	8	const
LEAF_NODE	1330:34	1330:34	8	JOCTET
LEAF_NODE	1330:40	1330:40	7	*
LEAF_NODE	1330:41	1330:41	7	)
FIELD	1330:43	1330:48	7	tif -> tif_rawcp
LEAF_NODE	1330:43	1330:43	8	tif
LEAF_NODE	1330:46	1330:46	8	->
LEAF_NODE	1330:48	1330:48	8	tif_rawcp
LEAF_NODE	1330:57	1330:57	4	;
EXPR_STATEMENT	1331:1	1331:50	3	sp -> src . bytes_in_buffer = ( size_t ) tif -> tif_rawcc ;
EXPR	1331:1	1331:1	4	sp -> src . bytes_in_buffer = ( size_t ) tif -> tif_rawcc
ASSIGN	1331:1	1331:27	5	sp -> src . bytes_in_buffer = ( size_t ) tif -> tif_rawcc
LVAL	1331:1	1331:1	6	sp -> src . bytes_in_buffer
FIELD	1331:1	1331:9	7	sp -> src . bytes_in_buffer
LEAF_NODE	1331:1	1331:1	8	sp
LEAF_NODE	1331:3	1331:3	8	->
LEAF_NODE	1331:5	1331:5	8	src
LEAF_NODE	1331:8	1331:8	8	.
LEAF_NODE	1331:9	1331:9	8	bytes_in_buffer
ASSIGN_OP	1331:25	1331:25	6	=
LEAF_NODE	1331:25	1331:25	7	=
RVAL	1331:27	1331:36	6	( size_t ) tif -> tif_rawcc
LEAF_NODE	1331:27	1331:27	7	(
TYPE_NAME	1331:28	1331:28	7	size_t
LEAF_NODE	1331:28	1331:28	8	size_t
LEAF_NODE	1331:34	1331:34	7	)
FIELD	1331:36	1331:41	7	tif -> tif_rawcc
LEAF_NODE	1331:36	1331:36	8	tif
LEAF_NODE	1331:39	1331:39	8	->
LEAF_NODE	1331:41	1331:41	8	tif_rawcc
LEAF_NODE	1331:50	1331:50	4	;
SELECTION	1333:8	1334:16	3	
KEYWORD	1333:8	1333:8	4	if
LEAF_NODE	1333:8	1333:8	5	if
LEAF_NODE	1333:10	1333:10	4	(
CONDITION	1333:12	1333:12	4	sp -> bytesperline == 0
EXPR	1333:12	1333:32	5	sp -> bytesperline == 0
FIELD	1333:12	1333:16	6	sp -> bytesperline
LEAF_NODE	1333:12	1333:12	7	sp
LEAF_NODE	1333:14	1333:14	7	->
LEAF_NODE	1333:16	1333:16	7	bytesperline
EQ_OPERATOR	1333:29	1333:29	6	==
LEAF_NODE	1333:29	1333:29	7	==
FIELD	1333:32	1333:32	6	0
LEAF_NODE	1333:32	1333:32	7	0
LEAF_NODE	1333:34	1333:34	4	)
STATEMENTS	1334:16	1334:16	4	
JUMP_STATEMENT	1334:16	1334:24	5	return 0 ;
KEYWORD	1334:16	1334:16	6	return
LEAF_NODE	1334:16	1334:16	7	return
DESTINATION	1334:23	1334:23	6	0
EXPR	1334:23	1334:23	7	0
FIELD	1334:23	1334:23	8	0
LEAF_NODE	1334:23	1334:23	9	0
LEAF_NODE	1334:24	1334:24	6	;
EXPR_STATEMENT	1336:1	1336:30	3	nrows = cc / sp -> bytesperline ;
EXPR	1336:1	1336:1	4	nrows = cc / sp -> bytesperline
ASSIGN	1336:1	1336:9	5	nrows = cc / sp -> bytesperline
LVAL	1336:1	1336:1	6	nrows
FIELD	1336:1	1336:1	7	nrows
LEAF_NODE	1336:1	1336:1	8	nrows
ASSIGN_OP	1336:7	1336:7	6	=
LEAF_NODE	1336:7	1336:7	7	=
RVAL	1336:9	1336:14	6	cc / sp -> bytesperline
FIELD	1336:9	1336:9	7	cc
LEAF_NODE	1336:9	1336:9	8	cc
LEAF_NODE	1336:12	1336:12	7	/
FIELD	1336:14	1336:18	7	sp -> bytesperline
LEAF_NODE	1336:14	1336:14	8	sp
LEAF_NODE	1336:16	1336:16	8	->
LEAF_NODE	1336:18	1336:18	8	bytesperline
LEAF_NODE	1336:30	1336:30	4	;
SELECTION	1337:1	1338:2	3	
KEYWORD	1337:1	1337:1	4	if
LEAF_NODE	1337:1	1337:1	5	if
LEAF_NODE	1337:4	1337:4	4	(
CONDITION	1337:5	1337:5	4	cc % sp -> bytesperline
EXPR	1337:5	1337:10	5	cc % sp -> bytesperline
FIELD	1337:5	1337:5	6	cc
LEAF_NODE	1337:5	1337:5	7	cc
LEAF_NODE	1337:8	1337:8	6	%
FIELD	1337:10	1337:14	6	sp -> bytesperline
LEAF_NODE	1337:10	1337:10	7	sp
LEAF_NODE	1337:12	1337:12	7	->
LEAF_NODE	1337:14	1337:14	7	bytesperline
LEAF_NODE	1337:26	1337:26	4	)
STATEMENTS	1338:2	1338:2	4	
EXPR_STATEMENT	1338:2	1339:62	5	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline not read" ) ;
EXPR	1338:2	1338:2	6	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline not read" )
FUNCTION_CALL	1338:2	1339:61	7	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline not read" )
CALLEE	1338:2	1338:2	8	TIFFWarningExt
LEAF_NODE	1338:2	1338:2	9	TIFFWarningExt
LEAF_NODE	1338:16	1338:16	8	(
ARGUMENT	1338:17	1338:17	8	tif -> tif_clientdata
FIELD	1338:17	1338:22	9	tif -> tif_clientdata
LEAF_NODE	1338:17	1338:17	10	tif
LEAF_NODE	1338:20	1338:20	10	->
LEAF_NODE	1338:22	1338:22	10	tif_clientdata
LEAF_NODE	1338:36	1338:36	8	,
ARGUMENT	1338:38	1338:38	8	tif -> tif_name
FIELD	1338:38	1338:43	9	tif -> tif_name
LEAF_NODE	1338:38	1338:38	10	tif
LEAF_NODE	1338:41	1338:41	10	->
LEAF_NODE	1338:43	1338:43	10	tif_name
LEAF_NODE	1338:51	1338:51	8	,
ARGUMENT	1339:31	1339:31	8	"fractional scanline not read"
FIELD	1339:31	1339:31	9	"fractional scanline not read"
LEAF_NODE	1339:31	1339:31	10	"fractional scanline not read"
LEAF_NODE	1339:61	1339:61	8	)
LEAF_NODE	1339:62	1339:62	6	;
SELECTION	1341:1	1342:2	3	
KEYWORD	1341:1	1341:1	4	if
LEAF_NODE	1341:1	1341:1	5	if
LEAF_NODE	1341:3	1341:3	4	(
CONDITION	1341:5	1341:5	4	nrows > ( tmsize_t ) sp -> cinfo . d . image_height
EXPR	1341:5	1341:24	5	nrows > ( tmsize_t ) sp -> cinfo . d . image_height
FIELD	1341:5	1341:5	6	nrows
LEAF_NODE	1341:5	1341:5	7	nrows
REL_OPERATOR	1341:11	1341:11	6	>
LEAF_NODE	1341:11	1341:11	7	>
LEAF_NODE	1341:13	1341:13	6	(
TYPE_NAME	1341:14	1341:14	6	tmsize_t
LEAF_NODE	1341:14	1341:14	7	tmsize_t
LEAF_NODE	1341:22	1341:22	6	)
FIELD	1341:24	1341:36	6	sp -> cinfo . d . image_height
LEAF_NODE	1341:24	1341:24	7	sp
LEAF_NODE	1341:26	1341:26	7	->
LEAF_NODE	1341:28	1341:28	7	cinfo
LEAF_NODE	1341:33	1341:33	7	.
LEAF_NODE	1341:34	1341:34	7	d
LEAF_NODE	1341:35	1341:35	7	.
LEAF_NODE	1341:36	1341:36	7	image_height
LEAF_NODE	1341:49	1341:49	4	)
STATEMENTS	1342:2	1342:2	4	
EXPR_STATEMENT	1342:2	1342:34	5	nrows = sp -> cinfo . d . image_height ;
EXPR	1342:2	1342:2	6	nrows = sp -> cinfo . d . image_height
ASSIGN	1342:2	1342:10	7	nrows = sp -> cinfo . d . image_height
LVAL	1342:2	1342:2	8	nrows
FIELD	1342:2	1342:2	9	nrows
LEAF_NODE	1342:2	1342:2	10	nrows
ASSIGN_OP	1342:8	1342:8	8	=
LEAF_NODE	1342:8	1342:8	9	=
RVAL	1342:10	1342:10	8	sp -> cinfo . d . image_height
FIELD	1342:10	1342:22	9	sp -> cinfo . d . image_height
LEAF_NODE	1342:10	1342:10	10	sp
LEAF_NODE	1342:12	1342:12	10	->
LEAF_NODE	1342:14	1342:14	10	cinfo
LEAF_NODE	1342:19	1342:19	10	.
LEAF_NODE	1342:20	1342:20	10	d
LEAF_NODE	1342:21	1342:21	10	.
LEAF_NODE	1342:22	1342:22	10	image_height
LEAF_NODE	1342:34	1342:34	6	;
SELECTION	1345:1	1346:8	3	
KEYWORD	1345:1	1345:1	4	if
LEAF_NODE	1345:1	1345:1	5	if
LEAF_NODE	1345:4	1345:4	4	(
CONDITION	1345:5	1345:5	4	nrows
EXPR	1345:5	1345:5	5	nrows
FIELD	1345:5	1345:5	6	nrows
LEAF_NODE	1345:5	1345:5	7	nrows
LEAF_NODE	1345:10	1345:10	4	)
STATEMENTS	1346:8	1362:8	4	
LEAF_NODE	1346:8	1346:8	5	{
STATEMENTS	1347:16	1361:37	5	
ITERATION	1347:16	1348:16	6	
KEYWORD	1347:16	1347:16	7	do
LEAF_NODE	1347:16	1347:16	8	do
LEAF_NODE	1361:24	1361:24	7	(
CONDITION	1361:25	1361:25	7	-- nrows > 0
EXPR	1361:25	1361:35	8	-- nrows > 0
LEAF_NODE	1361:25	1361:25	9	--
FIELD	1361:27	1361:27	9	nrows
LEAF_NODE	1361:27	1361:27	10	nrows
REL_OPERATOR	1361:33	1361:33	9	>
LEAF_NODE	1361:33	1361:33	10	>
FIELD	1361:35	1361:35	9	0
LEAF_NODE	1361:35	1361:35	10	0
LEAF_NODE	1361:36	1361:36	7	)
STATEMENTS	1348:16	1361:16	7	
LEAF_NODE	1348:16	1348:16	8	{
STATEMENTS	1353:24	1360:24	8	
SIMPLE_DECL	1353:24	1353:55	9	JSAMPROW bufptr ; bufptr = ( JSAMPROW ) buf ;
VAR_DECL	1353:24	1353:33	10	JSAMPROW bufptr ; bufptr = ( JSAMPROW ) buf
TYPE	1353:24	1353:24	11	JSAMPROW
TYPE_NAME	1353:24	1353:24	12	JSAMPROW
LEAF_NODE	1353:24	1353:24	13	JSAMPROW
NAME	1353:33	1353:33	11	bufptr
LEAF_NODE	1353:33	1353:33	12	bufptr
LEAF_NODE	0:0	0:0	11	;
INIT	1353:33	1353:33	11	bufptr = ( JSAMPROW ) buf
ASSIGN	1353:33	1353:42	12	bufptr = ( JSAMPROW ) buf
LVAL	1353:33	1353:33	13	bufptr
NAME	1353:33	1353:33	14	bufptr
LEAF_NODE	1353:33	1353:33	15	bufptr
ASSIGN_OP	1353:40	1353:40	13	=
LEAF_NODE	1353:40	1353:40	14	=
RVAL	1353:42	1353:52	13	( JSAMPROW ) buf
LEAF_NODE	1353:42	1353:42	14	(
TYPE_NAME	1353:43	1353:43	14	JSAMPROW
LEAF_NODE	1353:43	1353:43	15	JSAMPROW
LEAF_NODE	1353:51	1353:51	14	)
FIELD	1353:52	1353:52	14	buf
LEAF_NODE	1353:52	1353:52	15	buf
LEAF_NODE	1353:55	1353:55	10	;
SELECTION	1355:24	1356:32	9	
KEYWORD	1355:24	1355:24	10	if
LEAF_NODE	1355:24	1355:24	11	if
LEAF_NODE	1355:27	1355:27	10	(
CONDITION	1355:28	1355:28	10	TIFFjpeg_read_scanlines ( sp , & bufptr , 1 ) != 1
EXPR	1355:28	1355:71	11	TIFFjpeg_read_scanlines ( sp , & bufptr , 1 ) != 1
FUNCTION_CALL	1355:28	1355:66	12	TIFFjpeg_read_scanlines ( sp , & bufptr , 1 )
CALLEE	1355:28	1355:28	13	TIFFjpeg_read_scanlines
LEAF_NODE	1355:28	1355:28	14	TIFFjpeg_read_scanlines
LEAF_NODE	1355:51	1355:51	13	(
ARGUMENT	1355:52	1355:52	13	sp
FIELD	1355:52	1355:52	14	sp
LEAF_NODE	1355:52	1355:52	15	sp
LEAF_NODE	1355:54	1355:54	13	,
ARGUMENT	1355:56	1355:56	13	& bufptr
UNARY_EXPR	1355:56	1355:57	14	& bufptr
UNARY_OPERATOR	1355:56	1355:56	15	&
LEAF_NODE	1355:56	1355:56	16	&
FIELD	1355:57	1355:57	15	bufptr
LEAF_NODE	1355:57	1355:57	16	bufptr
LEAF_NODE	1355:63	1355:63	13	,
ARGUMENT	1355:65	1355:65	13	1
FIELD	1355:65	1355:65	14	1
LEAF_NODE	1355:65	1355:65	15	1
LEAF_NODE	1355:66	1355:66	13	)
EQ_OPERATOR	1355:68	1355:68	12	!=
LEAF_NODE	1355:68	1355:68	13	!=
FIELD	1355:71	1355:71	12	1
LEAF_NODE	1355:71	1355:71	13	1
LEAF_NODE	1355:72	1355:72	10	)
STATEMENTS	1356:32	1356:32	10	
JUMP_STATEMENT	1356:32	1356:42	11	return ( 0 ) ;
KEYWORD	1356:32	1356:32	12	return
LEAF_NODE	1356:32	1356:32	13	return
DESTINATION	1356:39	1356:39	12	( 0 )
EXPR	1356:39	1356:41	13	( 0 )
LEAF_NODE	1356:39	1356:39	14	(
FIELD	1356:40	1356:40	14	0
LEAF_NODE	1356:40	1356:40	15	0
LEAF_NODE	1356:41	1356:41	14	)
LEAF_NODE	1356:42	1356:42	12	;
EXPR_STATEMENT	1358:24	1358:38	9	++ tif -> tif_row ;
EXPR	1358:24	1358:26	10	++ tif -> tif_row
LEAF_NODE	1358:24	1358:24	11	++
FIELD	1358:26	1358:31	11	tif -> tif_row
LEAF_NODE	1358:26	1358:26	12	tif
LEAF_NODE	1358:29	1358:29	12	->
LEAF_NODE	1358:31	1358:31	12	tif_row
LEAF_NODE	1358:38	1358:38	10	;
EXPR_STATEMENT	1359:24	1359:47	9	buf += sp -> bytesperline ;
EXPR	1359:24	1359:24	10	buf += sp -> bytesperline
ASSIGN	1359:24	1359:31	11	buf += sp -> bytesperline
LVAL	1359:24	1359:24	12	buf
FIELD	1359:24	1359:24	13	buf
LEAF_NODE	1359:24	1359:24	14	buf
ASSIGN_OP	1359:28	1359:28	12	+=
LEAF_NODE	1359:28	1359:28	13	+=
RVAL	1359:31	1359:31	12	sp -> bytesperline
FIELD	1359:31	1359:35	13	sp -> bytesperline
LEAF_NODE	1359:31	1359:31	14	sp
LEAF_NODE	1359:33	1359:33	14	->
LEAF_NODE	1359:35	1359:35	14	bytesperline
LEAF_NODE	1359:47	1359:47	10	;
EXPR_STATEMENT	1360:24	1360:46	9	cc -= sp -> bytesperline ;
EXPR	1360:24	1360:24	10	cc -= sp -> bytesperline
ASSIGN	1360:24	1360:30	11	cc -= sp -> bytesperline
LVAL	1360:24	1360:24	12	cc
FIELD	1360:24	1360:24	13	cc
LEAF_NODE	1360:24	1360:24	14	cc
ASSIGN_OP	1360:27	1360:27	12	-=
LEAF_NODE	1360:27	1360:27	13	-=
RVAL	1360:30	1360:30	12	sp -> bytesperline
FIELD	1360:30	1360:34	13	sp -> bytesperline
LEAF_NODE	1360:30	1360:30	14	sp
LEAF_NODE	1360:32	1360:32	14	->
LEAF_NODE	1360:34	1360:34	14	bytesperline
LEAF_NODE	1360:46	1360:46	10	;
LEAF_NODE	1361:16	1361:16	8	}
LEAF_NODE	1361:37	1361:37	6	;
LEAF_NODE	1362:8	1362:8	5	}
EXPR_STATEMENT	1365:8	1365:57	3	tif -> tif_rawcp = ( uint8 * ) sp -> src . next_input_byte ;
EXPR	1365:8	1365:8	4	tif -> tif_rawcp = ( uint8 * ) sp -> src . next_input_byte
ASSIGN	1365:8	1365:25	5	tif -> tif_rawcp = ( uint8 * ) sp -> src . next_input_byte
LVAL	1365:8	1365:8	6	tif -> tif_rawcp
FIELD	1365:8	1365:13	7	tif -> tif_rawcp
LEAF_NODE	1365:8	1365:8	8	tif
LEAF_NODE	1365:11	1365:11	8	->
LEAF_NODE	1365:13	1365:13	8	tif_rawcp
ASSIGN_OP	1365:23	1365:23	6	=
LEAF_NODE	1365:23	1365:23	7	=
RVAL	1365:25	1365:34	6	( uint8 * ) sp -> src . next_input_byte
LEAF_NODE	1365:25	1365:25	7	(
TYPE_NAME	1365:26	1365:26	7	uint8
LEAF_NODE	1365:26	1365:26	8	uint8
LEAF_NODE	1365:31	1365:31	7	*
LEAF_NODE	1365:32	1365:32	7	)
FIELD	1365:34	1365:42	7	sp -> src . next_input_byte
LEAF_NODE	1365:34	1365:34	8	sp
LEAF_NODE	1365:36	1365:36	8	->
LEAF_NODE	1365:38	1365:38	8	src
LEAF_NODE	1365:41	1365:41	8	.
LEAF_NODE	1365:42	1365:42	8	next_input_byte
LEAF_NODE	1365:57	1365:57	4	;
EXPR_STATEMENT	1366:8	1366:48	3	tif -> tif_rawcc = sp -> src . bytes_in_buffer ;
EXPR	1366:8	1366:8	4	tif -> tif_rawcc = sp -> src . bytes_in_buffer
ASSIGN	1366:8	1366:25	5	tif -> tif_rawcc = sp -> src . bytes_in_buffer
LVAL	1366:8	1366:8	6	tif -> tif_rawcc
FIELD	1366:8	1366:13	7	tif -> tif_rawcc
LEAF_NODE	1366:8	1366:8	8	tif
LEAF_NODE	1366:11	1366:11	8	->
LEAF_NODE	1366:13	1366:13	8	tif_rawcc
ASSIGN_OP	1366:23	1366:23	6	=
LEAF_NODE	1366:23	1366:23	7	=
RVAL	1366:25	1366:25	6	sp -> src . bytes_in_buffer
FIELD	1366:25	1366:33	7	sp -> src . bytes_in_buffer
LEAF_NODE	1366:25	1366:25	8	sp
LEAF_NODE	1366:27	1366:27	8	->
LEAF_NODE	1366:29	1366:29	8	src
LEAF_NODE	1366:32	1366:32	8	.
LEAF_NODE	1366:33	1366:33	8	bytes_in_buffer
LEAF_NODE	1366:48	1366:48	4	;
JUMP_STATEMENT	1369:1	1370:49	3	return sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp ) ;
KEYWORD	1369:1	1369:1	4	return
LEAF_NODE	1369:1	1369:1	5	return
DESTINATION	1369:8	1369:8	4	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp )
EXPR	1369:8	1369:8	5	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp )
OR	1369:8	1370:19	6	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp )
EXPR	1369:8	1369:38	7	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height
FIELD	1369:8	1369:20	8	sp -> cinfo . d . output_scanline
LEAF_NODE	1369:8	1369:8	9	sp
LEAF_NODE	1369:10	1369:10	9	->
LEAF_NODE	1369:12	1369:12	9	cinfo
LEAF_NODE	1369:17	1369:17	9	.
LEAF_NODE	1369:18	1369:18	9	d
LEAF_NODE	1369:19	1369:19	9	.
LEAF_NODE	1369:20	1369:20	9	output_scanline
REL_OPERATOR	1369:36	1369:36	8	<
LEAF_NODE	1369:36	1369:36	9	<
FIELD	1369:38	1369:50	8	sp -> cinfo . d . output_height
LEAF_NODE	1369:38	1369:38	9	sp
LEAF_NODE	1369:40	1369:40	9	->
LEAF_NODE	1369:42	1369:42	9	cinfo
LEAF_NODE	1369:47	1369:47	9	.
LEAF_NODE	1369:48	1369:48	9	d
LEAF_NODE	1369:49	1369:49	9	.
LEAF_NODE	1369:50	1369:50	9	output_height
LEAF_NODE	1370:16	1370:16	7	||
EXPR	1370:19	1370:19	7	TIFFjpeg_finish_decompress ( sp )
FUNCTION_CALL	1370:19	1370:48	8	TIFFjpeg_finish_decompress ( sp )
CALLEE	1370:19	1370:19	9	TIFFjpeg_finish_decompress
LEAF_NODE	1370:19	1370:19	10	TIFFjpeg_finish_decompress
LEAF_NODE	1370:45	1370:45	9	(
ARGUMENT	1370:46	1370:46	9	sp
FIELD	1370:46	1370:46	10	sp
LEAF_NODE	1370:46	1370:46	11	sp
LEAF_NODE	1370:48	1370:48	9	)
LEAF_NODE	1370:49	1370:49	4	;
LEAF_NODE	1371:0	1371:0	2	}
FUNCTION_DEF	1375:13	1477:0	1	
RETURN_TYPE	1375:13	1375:20	2	static int
LEAF_NODE	1375:13	1375:13	3	static
TYPE_NAME	1375:20	1375:20	3	int
LEAF_NODE	1375:20	1375:20	4	int
FUNCTION_NAME	1376:0	1376:0	2	JPEGDecode
LEAF_NODE	1376:0	1376:0	3	JPEGDecode
PARAMETER_LIST	1376:10	1376:55	2	( TIFF * tif , uint8 * buf , tmsize_t cc , uint16 s )
LEAF_NODE	1376:10	1376:10	3	(
PARAMETER_DECL	1376:11	1376:17	3	TIFF * tif
TYPE	1376:11	1376:15	4	TIFF *
TYPE_NAME	1376:11	1376:11	5	TIFF
LEAF_NODE	1376:11	1376:11	6	TIFF
POINTER	1376:15	1376:15	5	*
LEAF_NODE	1376:15	1376:15	6	*
NAME	1376:17	1376:17	4	tif
LEAF_NODE	1376:17	1376:17	5	tif
LEAF_NODE	1376:20	1376:20	3	,
PARAMETER_DECL	1376:22	1376:29	3	uint8 * buf
TYPE	1376:22	1376:27	4	uint8 *
TYPE_NAME	1376:22	1376:22	5	uint8
LEAF_NODE	1376:22	1376:22	6	uint8
POINTER	1376:27	1376:27	5	*
LEAF_NODE	1376:27	1376:27	6	*
NAME	1376:29	1376:29	4	buf
LEAF_NODE	1376:29	1376:29	5	buf
LEAF_NODE	1376:32	1376:32	3	,
PARAMETER_DECL	1376:34	1376:43	3	tmsize_t cc
TYPE	1376:34	1376:34	4	tmsize_t
TYPE_NAME	1376:34	1376:34	5	tmsize_t
LEAF_NODE	1376:34	1376:34	6	tmsize_t
NAME	1376:43	1376:43	4	cc
LEAF_NODE	1376:43	1376:43	5	cc
LEAF_NODE	1376:45	1376:45	3	,
PARAMETER_DECL	1376:47	1376:54	3	uint16 s
TYPE	1376:47	1376:47	4	uint16
TYPE_NAME	1376:47	1376:47	5	uint16
LEAF_NODE	1376:47	1376:47	6	uint16
NAME	1376:54	1376:54	4	s
LEAF_NODE	1376:54	1376:54	5	s
LEAF_NODE	1376:55	1376:55	3	)
LEAF_NODE	1377:0	1377:0	2	{
STATEMENTS	1378:1	1475:1	2	
SIMPLE_DECL	1378:1	1378:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	1378:1	1378:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	1378:1	1378:11	5	JPEGState *
TYPE_NAME	1378:1	1378:1	6	JPEGState
LEAF_NODE	1378:1	1378:1	7	JPEGState
POINTER	1378:11	1378:11	6	*
LEAF_NODE	1378:11	1378:11	7	*
NAME	1378:12	1378:12	5	sp
LEAF_NODE	1378:12	1378:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1378:12	1378:12	5	sp = JState ( tif )
ASSIGN	1378:12	1378:17	6	sp = JState ( tif )
LVAL	1378:12	1378:12	7	sp
NAME	1378:12	1378:12	8	sp
LEAF_NODE	1378:12	1378:12	9	sp
ASSIGN_OP	1378:15	1378:15	7	=
LEAF_NODE	1378:15	1378:15	8	=
RVAL	1378:17	1378:17	7	JState ( tif )
FUNCTION_CALL	1378:17	1378:27	8	JState ( tif )
CALLEE	1378:17	1378:17	9	JState
LEAF_NODE	1378:17	1378:17	10	JState
LEAF_NODE	1378:23	1378:23	9	(
ARGUMENT	1378:24	1378:24	9	tif
FIELD	1378:24	1378:24	10	tif
LEAF_NODE	1378:24	1378:24	11	tif
LEAF_NODE	1378:27	1378:27	9	)
LEAF_NODE	1378:28	1378:28	4	;
SIMPLE_DECL	1379:1	1379:15	3	tmsize_t nrows ;
VAR_DECL	1379:1	1379:10	4	tmsize_t nrows
TYPE	1379:1	1379:1	5	tmsize_t
TYPE_NAME	1379:1	1379:1	6	tmsize_t
LEAF_NODE	1379:1	1379:1	7	tmsize_t
NAME	1379:10	1379:10	5	nrows
LEAF_NODE	1379:10	1379:10	6	nrows
LEAF_NODE	1379:15	1379:15	4	;
EXPR_STATEMENT	1380:1	1380:9	3	( void ) s ;
EXPR	1380:1	1380:8	4	( void ) s
LEAF_NODE	1380:1	1380:1	5	(
TYPE_NAME	1380:2	1380:2	5	void
LEAF_NODE	1380:2	1380:2	6	void
LEAF_NODE	1380:6	1380:6	5	)
FIELD	1380:8	1380:8	5	s
LEAF_NODE	1380:8	1380:8	6	s
LEAF_NODE	1380:9	1380:9	4	;
EXPR_STATEMENT	1386:1	1386:57	3	sp -> src . next_input_byte = ( const JOCTET * ) tif -> tif_rawcp ;
EXPR	1386:1	1386:1	4	sp -> src . next_input_byte = ( const JOCTET * ) tif -> tif_rawcp
ASSIGN	1386:1	1386:27	5	sp -> src . next_input_byte = ( const JOCTET * ) tif -> tif_rawcp
LVAL	1386:1	1386:1	6	sp -> src . next_input_byte
FIELD	1386:1	1386:9	7	sp -> src . next_input_byte
LEAF_NODE	1386:1	1386:1	8	sp
LEAF_NODE	1386:3	1386:3	8	->
LEAF_NODE	1386:5	1386:5	8	src
LEAF_NODE	1386:8	1386:8	8	.
LEAF_NODE	1386:9	1386:9	8	next_input_byte
ASSIGN_OP	1386:25	1386:25	6	=
LEAF_NODE	1386:25	1386:25	7	=
RVAL	1386:27	1386:43	6	( const JOCTET * ) tif -> tif_rawcp
LEAF_NODE	1386:27	1386:27	7	(
TYPE_NAME	1386:28	1386:34	7	const JOCTET
LEAF_NODE	1386:28	1386:28	8	const
LEAF_NODE	1386:34	1386:34	8	JOCTET
LEAF_NODE	1386:40	1386:40	7	*
LEAF_NODE	1386:41	1386:41	7	)
FIELD	1386:43	1386:48	7	tif -> tif_rawcp
LEAF_NODE	1386:43	1386:43	8	tif
LEAF_NODE	1386:46	1386:46	8	->
LEAF_NODE	1386:48	1386:48	8	tif_rawcp
LEAF_NODE	1386:57	1386:57	4	;
EXPR_STATEMENT	1387:1	1387:50	3	sp -> src . bytes_in_buffer = ( size_t ) tif -> tif_rawcc ;
EXPR	1387:1	1387:1	4	sp -> src . bytes_in_buffer = ( size_t ) tif -> tif_rawcc
ASSIGN	1387:1	1387:27	5	sp -> src . bytes_in_buffer = ( size_t ) tif -> tif_rawcc
LVAL	1387:1	1387:1	6	sp -> src . bytes_in_buffer
FIELD	1387:1	1387:9	7	sp -> src . bytes_in_buffer
LEAF_NODE	1387:1	1387:1	8	sp
LEAF_NODE	1387:3	1387:3	8	->
LEAF_NODE	1387:5	1387:5	8	src
LEAF_NODE	1387:8	1387:8	8	.
LEAF_NODE	1387:9	1387:9	8	bytes_in_buffer
ASSIGN_OP	1387:25	1387:25	6	=
LEAF_NODE	1387:25	1387:25	7	=
RVAL	1387:27	1387:36	6	( size_t ) tif -> tif_rawcc
LEAF_NODE	1387:27	1387:27	7	(
TYPE_NAME	1387:28	1387:28	7	size_t
LEAF_NODE	1387:28	1387:28	8	size_t
LEAF_NODE	1387:34	1387:34	7	)
FIELD	1387:36	1387:41	7	tif -> tif_rawcc
LEAF_NODE	1387:36	1387:36	8	tif
LEAF_NODE	1387:39	1387:39	8	->
LEAF_NODE	1387:41	1387:41	8	tif_rawcc
LEAF_NODE	1387:50	1387:50	4	;
SELECTION	1389:8	1390:16	3	
KEYWORD	1389:8	1389:8	4	if
LEAF_NODE	1389:8	1389:8	5	if
LEAF_NODE	1389:10	1389:10	4	(
CONDITION	1389:12	1389:12	4	sp -> bytesperline == 0
EXPR	1389:12	1389:32	5	sp -> bytesperline == 0
FIELD	1389:12	1389:16	6	sp -> bytesperline
LEAF_NODE	1389:12	1389:12	7	sp
LEAF_NODE	1389:14	1389:14	7	->
LEAF_NODE	1389:16	1389:16	7	bytesperline
EQ_OPERATOR	1389:29	1389:29	6	==
LEAF_NODE	1389:29	1389:29	7	==
FIELD	1389:32	1389:32	6	0
LEAF_NODE	1389:32	1389:32	7	0
LEAF_NODE	1389:34	1389:34	4	)
STATEMENTS	1390:16	1390:16	4	
JUMP_STATEMENT	1390:16	1390:24	5	return 0 ;
KEYWORD	1390:16	1390:16	6	return
LEAF_NODE	1390:16	1390:16	7	return
DESTINATION	1390:23	1390:23	6	0
EXPR	1390:23	1390:23	7	0
FIELD	1390:23	1390:23	8	0
LEAF_NODE	1390:23	1390:23	9	0
LEAF_NODE	1390:24	1390:24	6	;
EXPR_STATEMENT	1392:1	1392:30	3	nrows = cc / sp -> bytesperline ;
EXPR	1392:1	1392:1	4	nrows = cc / sp -> bytesperline
ASSIGN	1392:1	1392:9	5	nrows = cc / sp -> bytesperline
LVAL	1392:1	1392:1	6	nrows
FIELD	1392:1	1392:1	7	nrows
LEAF_NODE	1392:1	1392:1	8	nrows
ASSIGN_OP	1392:7	1392:7	6	=
LEAF_NODE	1392:7	1392:7	7	=
RVAL	1392:9	1392:14	6	cc / sp -> bytesperline
FIELD	1392:9	1392:9	7	cc
LEAF_NODE	1392:9	1392:9	8	cc
LEAF_NODE	1392:12	1392:12	7	/
FIELD	1392:14	1392:18	7	sp -> bytesperline
LEAF_NODE	1392:14	1392:14	8	sp
LEAF_NODE	1392:16	1392:16	8	->
LEAF_NODE	1392:18	1392:18	8	bytesperline
LEAF_NODE	1392:30	1392:30	4	;
SELECTION	1393:1	1394:2	3	
KEYWORD	1393:1	1393:1	4	if
LEAF_NODE	1393:1	1393:1	5	if
LEAF_NODE	1393:4	1393:4	4	(
CONDITION	1393:5	1393:5	4	cc % sp -> bytesperline
EXPR	1393:5	1393:10	5	cc % sp -> bytesperline
FIELD	1393:5	1393:5	6	cc
LEAF_NODE	1393:5	1393:5	7	cc
LEAF_NODE	1393:8	1393:8	6	%
FIELD	1393:10	1393:14	6	sp -> bytesperline
LEAF_NODE	1393:10	1393:10	7	sp
LEAF_NODE	1393:12	1393:12	7	->
LEAF_NODE	1393:14	1393:14	7	bytesperline
LEAF_NODE	1393:26	1393:26	4	)
STATEMENTS	1394:2	1394:2	4	
EXPR_STATEMENT	1394:2	1395:62	5	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline not read" ) ;
EXPR	1394:2	1394:2	6	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline not read" )
FUNCTION_CALL	1394:2	1395:61	7	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline not read" )
CALLEE	1394:2	1394:2	8	TIFFWarningExt
LEAF_NODE	1394:2	1394:2	9	TIFFWarningExt
LEAF_NODE	1394:16	1394:16	8	(
ARGUMENT	1394:17	1394:17	8	tif -> tif_clientdata
FIELD	1394:17	1394:22	9	tif -> tif_clientdata
LEAF_NODE	1394:17	1394:17	10	tif
LEAF_NODE	1394:20	1394:20	10	->
LEAF_NODE	1394:22	1394:22	10	tif_clientdata
LEAF_NODE	1394:36	1394:36	8	,
ARGUMENT	1394:38	1394:38	8	tif -> tif_name
FIELD	1394:38	1394:43	9	tif -> tif_name
LEAF_NODE	1394:38	1394:38	10	tif
LEAF_NODE	1394:41	1394:41	10	->
LEAF_NODE	1394:43	1394:43	10	tif_name
LEAF_NODE	1394:51	1394:51	8	,
ARGUMENT	1395:31	1395:31	8	"fractional scanline not read"
FIELD	1395:31	1395:31	9	"fractional scanline not read"
LEAF_NODE	1395:31	1395:31	10	"fractional scanline not read"
LEAF_NODE	1395:61	1395:61	8	)
LEAF_NODE	1395:62	1395:62	6	;
SELECTION	1397:1	1398:2	3	
KEYWORD	1397:1	1397:1	4	if
LEAF_NODE	1397:1	1397:1	5	if
LEAF_NODE	1397:3	1397:3	4	(
CONDITION	1397:5	1397:5	4	nrows > ( tmsize_t ) sp -> cinfo . d . image_height
EXPR	1397:5	1397:24	5	nrows > ( tmsize_t ) sp -> cinfo . d . image_height
FIELD	1397:5	1397:5	6	nrows
LEAF_NODE	1397:5	1397:5	7	nrows
REL_OPERATOR	1397:11	1397:11	6	>
LEAF_NODE	1397:11	1397:11	7	>
LEAF_NODE	1397:13	1397:13	6	(
TYPE_NAME	1397:14	1397:14	6	tmsize_t
LEAF_NODE	1397:14	1397:14	7	tmsize_t
LEAF_NODE	1397:22	1397:22	6	)
FIELD	1397:24	1397:36	6	sp -> cinfo . d . image_height
LEAF_NODE	1397:24	1397:24	7	sp
LEAF_NODE	1397:26	1397:26	7	->
LEAF_NODE	1397:28	1397:28	7	cinfo
LEAF_NODE	1397:33	1397:33	7	.
LEAF_NODE	1397:34	1397:34	7	d
LEAF_NODE	1397:35	1397:35	7	.
LEAF_NODE	1397:36	1397:36	7	image_height
LEAF_NODE	1397:49	1397:49	4	)
STATEMENTS	1398:2	1398:2	4	
EXPR_STATEMENT	1398:2	1398:34	5	nrows = sp -> cinfo . d . image_height ;
EXPR	1398:2	1398:2	6	nrows = sp -> cinfo . d . image_height
ASSIGN	1398:2	1398:10	7	nrows = sp -> cinfo . d . image_height
LVAL	1398:2	1398:2	8	nrows
FIELD	1398:2	1398:2	9	nrows
LEAF_NODE	1398:2	1398:2	10	nrows
ASSIGN_OP	1398:8	1398:8	8	=
LEAF_NODE	1398:8	1398:8	9	=
RVAL	1398:10	1398:10	8	sp -> cinfo . d . image_height
FIELD	1398:10	1398:22	9	sp -> cinfo . d . image_height
LEAF_NODE	1398:10	1398:10	10	sp
LEAF_NODE	1398:12	1398:12	10	->
LEAF_NODE	1398:14	1398:14	10	cinfo
LEAF_NODE	1398:19	1398:19	10	.
LEAF_NODE	1398:20	1398:20	10	d
LEAF_NODE	1398:21	1398:21	10	.
LEAF_NODE	1398:22	1398:22	10	image_height
LEAF_NODE	1398:34	1398:34	6	;
SELECTION	1401:1	1402:8	3	
KEYWORD	1401:1	1401:1	4	if
LEAF_NODE	1401:1	1401:1	5	if
LEAF_NODE	1401:4	1401:4	4	(
CONDITION	1401:5	1401:5	4	nrows
EXPR	1401:5	1401:5	5	nrows
FIELD	1401:5	1401:5	6	nrows
LEAF_NODE	1401:5	1401:5	7	nrows
LEAF_NODE	1401:10	1401:10	4	)
STATEMENTS	1402:8	1468:8	4	
LEAF_NODE	1402:8	1402:8	5	{
STATEMENTS	1403:16	1466:15	5	
SIMPLE_DECL	1403:16	1403:45	6	JSAMPROW line_work_buf ; line_work_buf = NULL ;
VAR_DECL	1403:16	1403:25	7	JSAMPROW line_work_buf ; line_work_buf = NULL
TYPE	1403:16	1403:16	8	JSAMPROW
TYPE_NAME	1403:16	1403:16	9	JSAMPROW
LEAF_NODE	1403:16	1403:16	10	JSAMPROW
NAME	1403:25	1403:25	8	line_work_buf
LEAF_NODE	1403:25	1403:25	9	line_work_buf
LEAF_NODE	0:0	0:0	8	;
INIT	1403:25	1403:25	8	line_work_buf = NULL
ASSIGN	1403:25	1403:41	9	line_work_buf = NULL
LVAL	1403:25	1403:25	10	line_work_buf
NAME	1403:25	1403:25	11	line_work_buf
LEAF_NODE	1403:25	1403:25	12	line_work_buf
ASSIGN_OP	1403:39	1403:39	10	=
LEAF_NODE	1403:39	1403:39	11	=
RVAL	1403:41	1403:41	10	NULL
FIELD	1403:41	1403:41	11	NULL
LEAF_NODE	1403:41	1403:41	12	NULL
LEAF_NODE	1403:45	1403:45	7	;
SELECTION	1409:16	1410:16	6	
KEYWORD	1409:16	1409:16	7	if
LEAF_NODE	1409:16	1409:16	8	if
LEAF_NODE	1409:18	1409:18	7	(
CONDITION	1409:20	1409:20	7	sp -> cinfo . d . data_precision == 12
EXPR	1409:20	1409:50	8	sp -> cinfo . d . data_precision == 12
FIELD	1409:20	1409:32	9	sp -> cinfo . d . data_precision
LEAF_NODE	1409:20	1409:20	10	sp
LEAF_NODE	1409:22	1409:22	10	->
LEAF_NODE	1409:24	1409:24	10	cinfo
LEAF_NODE	1409:29	1409:29	10	.
LEAF_NODE	1409:30	1409:30	10	d
LEAF_NODE	1409:31	1409:31	10	.
LEAF_NODE	1409:32	1409:32	10	data_precision
EQ_OPERATOR	1409:47	1409:47	9	==
LEAF_NODE	1409:47	1409:47	10	==
FIELD	1409:50	1409:50	9	12
LEAF_NODE	1409:50	1409:50	10	12
LEAF_NODE	1409:53	1409:53	7	)
STATEMENTS	1410:16	1414:16	7	
LEAF_NODE	1410:16	1410:16	8	{
STATEMENTS	1411:24	1413:74	8	
LEAF_NODE	1411:24	1411:24	9	line_work_buf
LEAF_NODE	1411:38	1411:38	9	=
LEAF_NODE	1411:40	1411:40	9	(
LEAF_NODE	1411:41	1411:41	9	JSAMPROW
LEAF_NODE	1411:49	1411:49	9	)
LEAF_NODE	1412:32	1412:32	9	_TIFFmalloc
LEAF_NODE	1412:43	1412:43	9	(
LEAF_NODE	1412:44	1412:44	9	sizeof
LEAF_NODE	1412:50	1412:50	9	(
LEAF_NODE	1412:51	1412:51	9	short
LEAF_NODE	1412:56	1412:56	9	)
LEAF_NODE	1412:58	1412:58	9	*
LEAF_NODE	1412:60	1412:60	9	sp
LEAF_NODE	1412:62	1412:62	9	->
LEAF_NODE	1412:64	1412:64	9	cinfo
LEAF_NODE	1412:69	1412:69	9	.
LEAF_NODE	1412:70	1412:70	9	d
LEAF_NODE	1412:71	1412:71	9	.
LEAF_NODE	1412:72	1412:72	9	output_width
LEAF_NODE	1413:44	1413:44	9	*
LEAF_NODE	1413:46	1413:46	9	sp
LEAF_NODE	1413:48	1413:48	9	->
LEAF_NODE	1413:50	1413:50	9	cinfo
LEAF_NODE	1413:55	1413:55	9	.
LEAF_NODE	1413:56	1413:56	9	d
LEAF_NODE	1413:57	1413:57	9	.
LEAF_NODE	1413:58	1413:58	9	num_components
LEAF_NODE	1413:73	1413:73	9	)
LEAF_NODE	1413:74	1413:74	9	;
LEAF_NODE	1414:16	1414:16	8	}
ITERATION	1416:15	1417:15	6	
KEYWORD	1416:15	1416:15	7	do
LEAF_NODE	1416:15	1416:15	8	do
LEAF_NODE	1464:23	1464:23	7	(
CONDITION	1464:24	1464:24	7	-- nrows > 0
EXPR	1464:24	1464:34	8	-- nrows > 0
LEAF_NODE	1464:24	1464:24	9	--
FIELD	1464:26	1464:26	9	nrows
LEAF_NODE	1464:26	1464:26	10	nrows
REL_OPERATOR	1464:32	1464:32	9	>
LEAF_NODE	1464:32	1464:32	10	>
FIELD	1464:34	1464:34	9	0
LEAF_NODE	1464:34	1464:34	10	0
LEAF_NODE	1464:35	1464:35	7	)
STATEMENTS	1417:15	1464:15	7	
LEAF_NODE	1417:15	1417:15	8	{
STATEMENTS	1418:23	1463:23	8	
SELECTION	1418:23	1419:23	9	
KEYWORD	1418:23	1418:23	10	if
LEAF_NODE	1418:23	1418:23	11	if
LEAF_NODE	1418:25	1418:25	10	(
CONDITION	1418:27	1418:27	10	line_work_buf != NULL
EXPR	1418:27	1418:44	11	line_work_buf != NULL
FIELD	1418:27	1418:27	12	line_work_buf
LEAF_NODE	1418:27	1418:27	13	line_work_buf
EQ_OPERATOR	1418:41	1418:41	12	!=
LEAF_NODE	1418:41	1418:41	13	!=
FIELD	1418:44	1418:44	12	NULL
LEAF_NODE	1418:44	1418:44	13	NULL
LEAF_NODE	1418:49	1418:49	10	)
STATEMENTS	1419:23	1459:23	10	
LEAF_NODE	1419:23	1419:23	11	{
STATEMENTS	1426:31	1447:31	11	
SELECTION	1426:31	1427:39	12	
KEYWORD	1426:31	1426:31	13	if
LEAF_NODE	1426:31	1426:31	14	if
LEAF_NODE	1426:34	1426:34	13	(
CONDITION	1426:35	1426:35	13	TIFFjpeg_read_scanlines ( sp , & line_work_buf , 1 ) != 1
EXPR	1426:35	1426:85	14	TIFFjpeg_read_scanlines ( sp , & line_work_buf , 1 ) != 1
FUNCTION_CALL	1426:35	1426:80	15	TIFFjpeg_read_scanlines ( sp , & line_work_buf , 1 )
CALLEE	1426:35	1426:35	16	TIFFjpeg_read_scanlines
LEAF_NODE	1426:35	1426:35	17	TIFFjpeg_read_scanlines
LEAF_NODE	1426:58	1426:58	16	(
ARGUMENT	1426:59	1426:59	16	sp
FIELD	1426:59	1426:59	17	sp
LEAF_NODE	1426:59	1426:59	18	sp
LEAF_NODE	1426:61	1426:61	16	,
ARGUMENT	1426:63	1426:63	16	& line_work_buf
UNARY_EXPR	1426:63	1426:64	17	& line_work_buf
UNARY_OPERATOR	1426:63	1426:63	18	&
LEAF_NODE	1426:63	1426:63	19	&
FIELD	1426:64	1426:64	18	line_work_buf
LEAF_NODE	1426:64	1426:64	19	line_work_buf
LEAF_NODE	1426:77	1426:77	16	,
ARGUMENT	1426:79	1426:79	16	1
FIELD	1426:79	1426:79	17	1
LEAF_NODE	1426:79	1426:79	18	1
LEAF_NODE	1426:80	1426:80	16	)
EQ_OPERATOR	1426:82	1426:82	15	!=
LEAF_NODE	1426:82	1426:82	16	!=
FIELD	1426:85	1426:85	15	1
LEAF_NODE	1426:85	1426:85	16	1
LEAF_NODE	1426:86	1426:86	13	)
STATEMENTS	1427:39	1427:39	13	
JUMP_STATEMENT	1427:39	1427:49	14	return ( 0 ) ;
KEYWORD	1427:39	1427:39	15	return
LEAF_NODE	1427:39	1427:39	16	return
DESTINATION	1427:46	1427:46	15	( 0 )
EXPR	1427:46	1427:48	16	( 0 )
LEAF_NODE	1427:46	1427:46	17	(
FIELD	1427:47	1427:47	17	0
LEAF_NODE	1427:47	1427:47	18	0
LEAF_NODE	1427:48	1427:48	17	)
LEAF_NODE	1427:49	1427:49	15	;
SELECTION	1429:31	1430:31	12	
KEYWORD	1429:31	1429:31	13	if
LEAF_NODE	1429:31	1429:31	14	if
LEAF_NODE	1429:33	1429:33	13	(
CONDITION	1429:35	1429:35	13	sp -> cinfo . d . data_precision == 12
EXPR	1429:35	1429:65	14	sp -> cinfo . d . data_precision == 12
FIELD	1429:35	1429:47	15	sp -> cinfo . d . data_precision
LEAF_NODE	1429:35	1429:35	16	sp
LEAF_NODE	1429:37	1429:37	16	->
LEAF_NODE	1429:39	1429:39	16	cinfo
LEAF_NODE	1429:44	1429:44	16	.
LEAF_NODE	1429:45	1429:45	16	d
LEAF_NODE	1429:46	1429:46	16	.
LEAF_NODE	1429:47	1429:47	16	data_precision
EQ_OPERATOR	1429:62	1429:62	15	==
LEAF_NODE	1429:62	1429:62	16	==
FIELD	1429:65	1429:65	15	12
LEAF_NODE	1429:65	1429:65	16	12
LEAF_NODE	1429:68	1429:68	13	)
STATEMENTS	1430:31	1446:31	13	
LEAF_NODE	1430:31	1430:31	14	{
STATEMENTS	1431:39	1435:39	14	
SIMPLE_DECL	1431:39	1432:91	15	int value_pairs ; value_pairs = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) / 2 ;
VAR_DECL	1431:39	1431:43	16	int value_pairs ; value_pairs = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) / 2
TYPE	1431:39	1431:39	17	int
TYPE_NAME	1431:39	1431:39	18	int
LEAF_NODE	1431:39	1431:39	19	int
NAME	1431:43	1431:43	17	value_pairs
LEAF_NODE	1431:43	1431:43	18	value_pairs
LEAF_NODE	0:0	0:0	17	;
INIT	1431:43	1431:43	17	value_pairs = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) / 2
ASSIGN	1431:43	1431:57	18	value_pairs = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) / 2
LVAL	1431:43	1431:43	19	value_pairs
NAME	1431:43	1431:43	20	value_pairs
LEAF_NODE	1431:43	1431:43	21	value_pairs
ASSIGN_OP	1431:55	1431:55	19	=
LEAF_NODE	1431:55	1431:55	20	=
RVAL	1431:57	1432:90	19	( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) / 2
LEAF_NODE	1431:57	1431:57	20	(
FIELD	1431:58	1431:70	20	sp -> cinfo . d . output_width
LEAF_NODE	1431:58	1431:58	21	sp
LEAF_NODE	1431:60	1431:60	21	->
LEAF_NODE	1431:62	1431:62	21	cinfo
LEAF_NODE	1431:67	1431:67	21	.
LEAF_NODE	1431:68	1431:68	21	d
LEAF_NODE	1431:69	1431:69	21	.
LEAF_NODE	1431:70	1431:70	21	output_width
LEAF_NODE	1432:58	1432:58	20	*
FIELD	1432:60	1432:72	20	sp -> cinfo . d . num_components
LEAF_NODE	1432:60	1432:60	21	sp
LEAF_NODE	1432:62	1432:62	21	->
LEAF_NODE	1432:64	1432:64	21	cinfo
LEAF_NODE	1432:69	1432:69	21	.
LEAF_NODE	1432:70	1432:70	21	d
LEAF_NODE	1432:71	1432:71	21	.
LEAF_NODE	1432:72	1432:72	21	num_components
LEAF_NODE	1432:86	1432:86	20	)
LEAF_NODE	1432:88	1432:88	20	/
FIELD	1432:90	1432:90	20	2
LEAF_NODE	1432:90	1432:90	21	2
LEAF_NODE	1432:91	1432:91	16	;
SIMPLE_DECL	1433:39	1433:48	15	int iPair ;
VAR_DECL	1433:39	1433:43	16	int iPair
TYPE	1433:39	1433:39	17	int
TYPE_NAME	1433:39	1433:39	18	int
LEAF_NODE	1433:39	1433:39	19	int
NAME	1433:43	1433:43	17	iPair
LEAF_NODE	1433:43	1433:43	18	iPair
LEAF_NODE	1433:48	1433:48	16	;
ITERATION	1435:39	1436:39	15	
KEYWORD	1435:39	1435:39	16	for
LEAF_NODE	1435:39	1435:39	17	for
LEAF_NODE	1435:42	1435:42	16	(
FOR_INIT	1435:44	1435:53	16	iPair = 0 ;
EXPR	1435:44	1435:44	17	iPair = 0
ASSIGN	1435:44	1435:52	18	iPair = 0
LVAL	1435:44	1435:44	19	iPair
FIELD	1435:44	1435:44	20	iPair
LEAF_NODE	1435:44	1435:44	21	iPair
ASSIGN_OP	1435:50	1435:50	19	=
LEAF_NODE	1435:50	1435:50	20	=
RVAL	1435:52	1435:52	19	0
FIELD	1435:52	1435:52	20	0
LEAF_NODE	1435:52	1435:52	21	0
LEAF_NODE	1435:53	1435:53	17	;
CONDITION	1435:55	1435:55	16	iPair < value_pairs
EXPR	1435:55	1435:63	17	iPair < value_pairs
FIELD	1435:55	1435:55	18	iPair
LEAF_NODE	1435:55	1435:55	19	iPair
REL_OPERATOR	1435:61	1435:61	18	<
LEAF_NODE	1435:61	1435:61	19	<
FIELD	1435:63	1435:63	18	value_pairs
LEAF_NODE	1435:63	1435:63	19	value_pairs
LEAF_NODE	1435:74	1435:74	16	;
FOR_EXPR	1435:76	1435:76	16	iPair ++
EXPR	1435:76	1435:76	17	iPair ++
FIELD	1435:76	1435:81	18	iPair ++
LEAF_NODE	1435:76	1435:76	19	iPair
LEAF_NODE	1435:81	1435:81	19	++
LEAF_NODE	1435:84	1435:84	16	)
STATEMENTS	1436:39	1445:39	16	
LEAF_NODE	1436:39	1436:39	17	{
STATEMENTS	1437:47	1444:47	17	
SIMPLE_DECL	1437:47	1438:90	18	unsigned char * out_ptr ; out_ptr = ( ( unsigned char * ) buf ) + iPair * 3 ;
VAR_DECL	1437:47	1437:62	19	unsigned char * out_ptr ; out_ptr = ( ( unsigned char * ) buf ) + iPair * 3
TYPE	1437:47	1437:61	20	unsigned char *
TYPE_NAME	1437:47	1437:56	21	unsigned char
LEAF_NODE	1437:47	1437:47	22	unsigned
LEAF_NODE	1437:56	1437:56	22	char
POINTER	1437:61	1437:61	21	*
LEAF_NODE	1437:61	1437:61	22	*
NAME	1437:62	1437:62	20	out_ptr
LEAF_NODE	1437:62	1437:62	21	out_ptr
LEAF_NODE	0:0	0:0	20	;
INIT	1437:62	1437:62	20	out_ptr = ( ( unsigned char * ) buf ) + iPair * 3
ASSIGN	1437:62	1438:55	21	out_ptr = ( ( unsigned char * ) buf ) + iPair * 3
LVAL	1437:62	1437:62	22	out_ptr
NAME	1437:62	1437:62	23	out_ptr
LEAF_NODE	1437:62	1437:62	24	out_ptr
ASSIGN_OP	1437:70	1437:70	22	=
LEAF_NODE	1437:70	1437:70	23	=
RVAL	1438:55	1438:89	22	( ( unsigned char * ) buf ) + iPair * 3
LEAF_NODE	1438:55	1438:55	23	(
LEAF_NODE	1438:56	1438:56	23	(
TYPE_NAME	1438:57	1438:66	23	unsigned char
LEAF_NODE	1438:57	1438:57	24	unsigned
LEAF_NODE	1438:66	1438:66	24	char
LEAF_NODE	1438:71	1438:71	23	*
LEAF_NODE	1438:72	1438:72	23	)
FIELD	1438:74	1438:74	23	buf
LEAF_NODE	1438:74	1438:74	24	buf
LEAF_NODE	1438:77	1438:77	23	)
LEAF_NODE	1438:79	1438:79	23	+
FIELD	1438:81	1438:81	23	iPair
LEAF_NODE	1438:81	1438:81	24	iPair
LEAF_NODE	1438:87	1438:87	23	*
FIELD	1438:89	1438:89	23	3
LEAF_NODE	1438:89	1438:89	24	3
LEAF_NODE	1438:90	1438:90	19	;
SIMPLE_DECL	1439:47	1439:90	18	JSAMPLE * in_ptr ; in_ptr = line_work_buf + iPair * 2 ;
VAR_DECL	1439:47	1439:56	19	JSAMPLE * in_ptr ; in_ptr = line_work_buf + iPair * 2
TYPE	1439:47	1439:55	20	JSAMPLE *
TYPE_NAME	1439:47	1439:47	21	JSAMPLE
LEAF_NODE	1439:47	1439:47	22	JSAMPLE
POINTER	1439:55	1439:55	21	*
LEAF_NODE	1439:55	1439:55	22	*
NAME	1439:56	1439:56	20	in_ptr
LEAF_NODE	1439:56	1439:56	21	in_ptr
LEAF_NODE	0:0	0:0	20	;
INIT	1439:56	1439:56	20	in_ptr = line_work_buf + iPair * 2
ASSIGN	1439:56	1439:65	21	in_ptr = line_work_buf + iPair * 2
LVAL	1439:56	1439:56	22	in_ptr
NAME	1439:56	1439:56	23	in_ptr
LEAF_NODE	1439:56	1439:56	24	in_ptr
ASSIGN_OP	1439:63	1439:63	22	=
LEAF_NODE	1439:63	1439:63	23	=
RVAL	1439:65	1439:89	22	line_work_buf + iPair * 2
FIELD	1439:65	1439:65	23	line_work_buf
LEAF_NODE	1439:65	1439:65	24	line_work_buf
LEAF_NODE	1439:79	1439:79	23	+
FIELD	1439:81	1439:81	23	iPair
LEAF_NODE	1439:81	1439:81	24	iPair
LEAF_NODE	1439:87	1439:87	23	*
FIELD	1439:89	1439:89	23	2
LEAF_NODE	1439:89	1439:89	24	2
LEAF_NODE	1439:90	1439:90	19	;
EXPR_STATEMENT	1441:47	1441:101	18	out_ptr [ 0 ] = ( unsigned char ) ( ( in_ptr [ 0 ] & 0xff0 ) >> 4 ) ;
EXPR	1441:47	1441:47	19	out_ptr [ 0 ] = ( unsigned char ) ( ( in_ptr [ 0 ] & 0xff0 ) >> 4 )
ASSIGN	1441:47	1441:60	20	out_ptr [ 0 ] = ( unsigned char ) ( ( in_ptr [ 0 ] & 0xff0 ) >> 4 )
LVAL	1441:47	1441:47	21	out_ptr [ 0 ]
FIELD	1441:47	1441:56	22	out_ptr [ 0 ]
LEAF_NODE	1441:47	1441:47	23	out_ptr
LEAF_NODE	1441:54	1441:54	23	[
EXPR	1441:55	1441:55	23	0
FIELD	1441:55	1441:55	24	0
LEAF_NODE	1441:55	1441:55	25	0
LEAF_NODE	1441:56	1441:56	23	]
ASSIGN_OP	1441:58	1441:58	21	=
LEAF_NODE	1441:58	1441:58	22	=
RVAL	1441:60	1441:100	21	( unsigned char ) ( ( in_ptr [ 0 ] & 0xff0 ) >> 4 )
LEAF_NODE	1441:60	1441:60	22	(
TYPE_NAME	1441:61	1441:70	22	unsigned char
LEAF_NODE	1441:61	1441:61	23	unsigned
LEAF_NODE	1441:70	1441:70	23	char
LEAF_NODE	1441:74	1441:74	22	)
LEAF_NODE	1441:75	1441:75	22	(
LEAF_NODE	1441:76	1441:76	22	(
FIELD	1441:77	1441:85	22	in_ptr [ 0 ]
LEAF_NODE	1441:77	1441:77	23	in_ptr
LEAF_NODE	1441:83	1441:83	23	[
EXPR	1441:84	1441:84	23	0
FIELD	1441:84	1441:84	24	0
LEAF_NODE	1441:84	1441:84	25	0
LEAF_NODE	1441:85	1441:85	23	]
LEAF_NODE	1441:87	1441:87	22	&
FIELD	1441:89	1441:89	22	0xff0
LEAF_NODE	1441:89	1441:89	23	0xff0
LEAF_NODE	1441:94	1441:94	22	)
LEAF_NODE	1441:96	1441:96	22	>>
FIELD	1441:99	1441:99	22	4
LEAF_NODE	1441:99	1441:99	23	4
LEAF_NODE	1441:100	1441:100	22	)
LEAF_NODE	1441:101	1441:101	19	;
EXPR_STATEMENT	1442:47	1443:84	18	out_ptr [ 1 ] = ( unsigned char ) ( ( ( in_ptr [ 0 ] & 0xf ) << 4 ) | ( ( in_ptr [ 1 ] & 0xf00 ) >> 8 ) ) ;
EXPR	1442:47	1442:47	19	out_ptr [ 1 ] = ( unsigned char ) ( ( ( in_ptr [ 0 ] & 0xf ) << 4 ) | ( ( in_ptr [ 1 ] & 0xf00 ) >> 8 ) )
ASSIGN	1442:47	1442:60	20	out_ptr [ 1 ] = ( unsigned char ) ( ( ( in_ptr [ 0 ] & 0xf ) << 4 ) | ( ( in_ptr [ 1 ] & 0xf00 ) >> 8 ) )
LVAL	1442:47	1442:47	21	out_ptr [ 1 ]
FIELD	1442:47	1442:56	22	out_ptr [ 1 ]
LEAF_NODE	1442:47	1442:47	23	out_ptr
LEAF_NODE	1442:54	1442:54	23	[
EXPR	1442:55	1442:55	23	1
FIELD	1442:55	1442:55	24	1
LEAF_NODE	1442:55	1442:55	25	1
LEAF_NODE	1442:56	1442:56	23	]
ASSIGN_OP	1442:58	1442:58	21	=
LEAF_NODE	1442:58	1442:58	22	=
RVAL	1442:60	1443:83	21	( unsigned char ) ( ( ( in_ptr [ 0 ] & 0xf ) << 4 ) | ( ( in_ptr [ 1 ] & 0xf00 ) >> 8 ) )
LEAF_NODE	1442:60	1442:60	22	(
TYPE_NAME	1442:61	1442:70	22	unsigned char
LEAF_NODE	1442:61	1442:61	23	unsigned
LEAF_NODE	1442:70	1442:70	23	char
LEAF_NODE	1442:74	1442:74	22	)
LEAF_NODE	1442:75	1442:75	22	(
BIT_OR	1442:76	1443:57	22	( ( in_ptr [ 0 ] & 0xf ) << 4 ) | ( ( in_ptr [ 1 ] & 0xf00 ) >> 8 )
BIT_OR_ELEM	1442:76	1442:99	23	( ( in_ptr [ 0 ] & 0xf ) << 4 )
LEAF_NODE	1442:76	1442:76	24	(
LEAF_NODE	1442:77	1442:77	24	(
FIELD	1442:78	1442:86	24	in_ptr [ 0 ]
LEAF_NODE	1442:78	1442:78	25	in_ptr
LEAF_NODE	1442:84	1442:84	25	[
EXPR	1442:85	1442:85	25	0
FIELD	1442:85	1442:85	26	0
LEAF_NODE	1442:85	1442:85	27	0
LEAF_NODE	1442:86	1442:86	25	]
LEAF_NODE	1442:88	1442:88	24	&
FIELD	1442:90	1442:90	24	0xf
LEAF_NODE	1442:90	1442:90	25	0xf
LEAF_NODE	1442:93	1442:93	24	)
LEAF_NODE	1442:95	1442:95	24	<<
FIELD	1442:98	1442:98	24	4
LEAF_NODE	1442:98	1442:98	25	4
LEAF_NODE	1442:99	1442:99	24	)
LEAF_NODE	1443:55	1443:55	23	|
BIT_OR_ELEM	1443:57	1443:82	23	( ( in_ptr [ 1 ] & 0xf00 ) >> 8 )
LEAF_NODE	1443:57	1443:57	24	(
LEAF_NODE	1443:58	1443:58	24	(
FIELD	1443:59	1443:67	24	in_ptr [ 1 ]
LEAF_NODE	1443:59	1443:59	25	in_ptr
LEAF_NODE	1443:65	1443:65	25	[
EXPR	1443:66	1443:66	25	1
FIELD	1443:66	1443:66	26	1
LEAF_NODE	1443:66	1443:66	27	1
LEAF_NODE	1443:67	1443:67	25	]
LEAF_NODE	1443:69	1443:69	24	&
FIELD	1443:71	1443:71	24	0xf00
LEAF_NODE	1443:71	1443:71	25	0xf00
LEAF_NODE	1443:76	1443:76	24	)
LEAF_NODE	1443:78	1443:78	24	>>
FIELD	1443:81	1443:81	24	8
LEAF_NODE	1443:81	1443:81	25	8
LEAF_NODE	1443:82	1443:82	24	)
LEAF_NODE	1443:83	1443:83	22	)
LEAF_NODE	1443:84	1443:84	19	;
EXPR_STATEMENT	1444:47	1444:102	18	out_ptr [ 2 ] = ( unsigned char ) ( ( ( in_ptr [ 1 ] & 0xff ) >> 0 ) ) ;
EXPR	1444:47	1444:47	19	out_ptr [ 2 ] = ( unsigned char ) ( ( ( in_ptr [ 1 ] & 0xff ) >> 0 ) )
ASSIGN	1444:47	1444:60	20	out_ptr [ 2 ] = ( unsigned char ) ( ( ( in_ptr [ 1 ] & 0xff ) >> 0 ) )
LVAL	1444:47	1444:47	21	out_ptr [ 2 ]
FIELD	1444:47	1444:56	22	out_ptr [ 2 ]
LEAF_NODE	1444:47	1444:47	23	out_ptr
LEAF_NODE	1444:54	1444:54	23	[
EXPR	1444:55	1444:55	23	2
FIELD	1444:55	1444:55	24	2
LEAF_NODE	1444:55	1444:55	25	2
LEAF_NODE	1444:56	1444:56	23	]
ASSIGN_OP	1444:58	1444:58	21	=
LEAF_NODE	1444:58	1444:58	22	=
RVAL	1444:60	1444:101	21	( unsigned char ) ( ( ( in_ptr [ 1 ] & 0xff ) >> 0 ) )
LEAF_NODE	1444:60	1444:60	22	(
TYPE_NAME	1444:61	1444:70	22	unsigned char
LEAF_NODE	1444:61	1444:61	23	unsigned
LEAF_NODE	1444:70	1444:70	23	char
LEAF_NODE	1444:74	1444:74	22	)
LEAF_NODE	1444:75	1444:75	22	(
LEAF_NODE	1444:76	1444:76	22	(
LEAF_NODE	1444:77	1444:77	22	(
FIELD	1444:78	1444:86	22	in_ptr [ 1 ]
LEAF_NODE	1444:78	1444:78	23	in_ptr
LEAF_NODE	1444:84	1444:84	23	[
EXPR	1444:85	1444:85	23	1
FIELD	1444:85	1444:85	24	1
LEAF_NODE	1444:85	1444:85	25	1
LEAF_NODE	1444:86	1444:86	23	]
LEAF_NODE	1444:88	1444:88	22	&
FIELD	1444:90	1444:90	22	0xff
LEAF_NODE	1444:90	1444:90	23	0xff
LEAF_NODE	1444:94	1444:94	22	)
LEAF_NODE	1444:96	1444:96	22	>>
FIELD	1444:99	1444:99	22	0
LEAF_NODE	1444:99	1444:99	23	0
LEAF_NODE	1444:100	1444:100	22	)
LEAF_NODE	1444:101	1444:101	22	)
LEAF_NODE	1444:102	1444:102	19	;
LEAF_NODE	1445:39	1445:39	17	}
LEAF_NODE	1446:31	1446:31	14	}
SELECTION	1447:31	1447:36	12	
KEYWORD	1447:31	1447:31	13	else
LEAF_NODE	1447:31	1447:31	14	else
STATEMENTS	1447:36	1447:36	13	
SELECTION	1447:36	1448:31	14	
KEYWORD	1447:36	1447:36	15	if
LEAF_NODE	1447:36	1447:36	16	if
LEAF_NODE	1447:38	1447:38	15	(
CONDITION	1447:40	1447:40	15	sp -> cinfo . d . data_precision == 8
EXPR	1447:40	1447:70	16	sp -> cinfo . d . data_precision == 8
FIELD	1447:40	1447:52	17	sp -> cinfo . d . data_precision
LEAF_NODE	1447:40	1447:40	18	sp
LEAF_NODE	1447:42	1447:42	18	->
LEAF_NODE	1447:44	1447:44	18	cinfo
LEAF_NODE	1447:49	1447:49	18	.
LEAF_NODE	1447:50	1447:50	18	d
LEAF_NODE	1447:51	1447:51	18	.
LEAF_NODE	1447:52	1447:52	18	data_precision
EQ_OPERATOR	1447:67	1447:67	17	==
LEAF_NODE	1447:67	1447:67	18	==
FIELD	1447:70	1447:70	17	8
LEAF_NODE	1447:70	1447:70	18	8
LEAF_NODE	1447:72	1447:72	15	)
STATEMENTS	1448:31	1458:31	15	
LEAF_NODE	1448:31	1448:31	16	{
STATEMENTS	1449:39	1453:39	16	
SIMPLE_DECL	1449:39	1450:87	17	int value_count ; value_count = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) ;
VAR_DECL	1449:39	1449:43	18	int value_count ; value_count = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components )
TYPE	1449:39	1449:39	19	int
TYPE_NAME	1449:39	1449:39	20	int
LEAF_NODE	1449:39	1449:39	21	int
NAME	1449:43	1449:43	19	value_count
LEAF_NODE	1449:43	1449:43	20	value_count
LEAF_NODE	0:0	0:0	19	;
INIT	1449:43	1449:43	19	value_count = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components )
ASSIGN	1449:43	1449:57	20	value_count = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components )
LVAL	1449:43	1449:43	21	value_count
NAME	1449:43	1449:43	22	value_count
LEAF_NODE	1449:43	1449:43	23	value_count
ASSIGN_OP	1449:55	1449:55	21	=
LEAF_NODE	1449:55	1449:55	22	=
RVAL	1449:57	1450:86	21	( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components )
LEAF_NODE	1449:57	1449:57	22	(
FIELD	1449:58	1449:70	22	sp -> cinfo . d . output_width
LEAF_NODE	1449:58	1449:58	23	sp
LEAF_NODE	1449:60	1449:60	23	->
LEAF_NODE	1449:62	1449:62	23	cinfo
LEAF_NODE	1449:67	1449:67	23	.
LEAF_NODE	1449:68	1449:68	23	d
LEAF_NODE	1449:69	1449:69	23	.
LEAF_NODE	1449:70	1449:70	23	output_width
LEAF_NODE	1450:58	1450:58	22	*
FIELD	1450:60	1450:72	22	sp -> cinfo . d . num_components
LEAF_NODE	1450:60	1450:60	23	sp
LEAF_NODE	1450:62	1450:62	23	->
LEAF_NODE	1450:64	1450:64	23	cinfo
LEAF_NODE	1450:69	1450:69	23	.
LEAF_NODE	1450:70	1450:70	23	d
LEAF_NODE	1450:71	1450:71	23	.
LEAF_NODE	1450:72	1450:72	23	num_components
LEAF_NODE	1450:86	1450:86	22	)
LEAF_NODE	1450:87	1450:87	18	;
SIMPLE_DECL	1451:39	1451:49	17	int iValue ;
VAR_DECL	1451:39	1451:43	18	int iValue
TYPE	1451:39	1451:39	19	int
TYPE_NAME	1451:39	1451:39	20	int
LEAF_NODE	1451:39	1451:39	21	int
NAME	1451:43	1451:43	19	iValue
LEAF_NODE	1451:43	1451:43	20	iValue
LEAF_NODE	1451:49	1451:49	18	;
ITERATION	1453:39	1454:39	17	
KEYWORD	1453:39	1453:39	18	for
LEAF_NODE	1453:39	1453:39	19	for
LEAF_NODE	1453:42	1453:42	18	(
FOR_INIT	1453:44	1453:54	18	iValue = 0 ;
EXPR	1453:44	1453:44	19	iValue = 0
ASSIGN	1453:44	1453:53	20	iValue = 0
LVAL	1453:44	1453:44	21	iValue
FIELD	1453:44	1453:44	22	iValue
LEAF_NODE	1453:44	1453:44	23	iValue
ASSIGN_OP	1453:51	1453:51	21	=
LEAF_NODE	1453:51	1453:51	22	=
RVAL	1453:53	1453:53	21	0
FIELD	1453:53	1453:53	22	0
LEAF_NODE	1453:53	1453:53	23	0
LEAF_NODE	1453:54	1453:54	19	;
CONDITION	1453:56	1453:56	18	iValue < value_count
EXPR	1453:56	1453:65	19	iValue < value_count
FIELD	1453:56	1453:56	20	iValue
LEAF_NODE	1453:56	1453:56	21	iValue
REL_OPERATOR	1453:63	1453:63	20	<
LEAF_NODE	1453:63	1453:63	21	<
FIELD	1453:65	1453:65	20	value_count
LEAF_NODE	1453:65	1453:65	21	value_count
LEAF_NODE	1453:76	1453:76	18	;
FOR_EXPR	1453:78	1453:78	18	iValue ++
EXPR	1453:78	1453:78	19	iValue ++
FIELD	1453:78	1453:84	20	iValue ++
LEAF_NODE	1453:78	1453:78	21	iValue
LEAF_NODE	1453:84	1453:84	21	++
LEAF_NODE	1453:87	1453:87	18	)
STATEMENTS	1454:39	1457:39	18	
LEAF_NODE	1454:39	1454:39	19	{
STATEMENTS	1455:47	1455:47	19	
EXPR_STATEMENT	1455:47	1456:83	20	( ( unsigned char * ) buf ) [ iValue ] = line_work_buf [ iValue ] & 0xff ;
EXPR	1455:47	1455:47	21	( ( unsigned char * ) buf ) [ iValue ] = line_work_buf [ iValue ] & 0xff
ASSIGN	1455:47	1456:55	22	( ( unsigned char * ) buf ) [ iValue ] = line_work_buf [ iValue ] & 0xff
LVAL	1455:47	1455:77	23	( ( unsigned char * ) buf ) [ iValue ]
LEAF_NODE	1455:47	1455:47	24	(
LEAF_NODE	1455:48	1455:48	24	(
TYPE_NAME	1455:49	1455:58	24	unsigned char
LEAF_NODE	1455:49	1455:49	25	unsigned
LEAF_NODE	1455:58	1455:58	25	char
LEAF_NODE	1455:63	1455:63	24	*
LEAF_NODE	1455:64	1455:64	24	)
FIELD	1455:66	1455:66	24	buf
LEAF_NODE	1455:66	1455:66	25	buf
LEAF_NODE	1455:69	1455:69	24	)
LEAF_NODE	1455:70	1455:70	24	[
EXPR	1455:71	1455:71	24	iValue
FIELD	1455:71	1455:71	25	iValue
LEAF_NODE	1455:71	1455:71	26	iValue
LEAF_NODE	1455:77	1455:77	24	]
ASSIGN_OP	1455:79	1455:79	23	=
LEAF_NODE	1455:79	1455:79	24	=
RVAL	1456:55	1456:79	23	line_work_buf [ iValue ] & 0xff
FIELD	1456:55	1456:75	24	line_work_buf [ iValue ]
LEAF_NODE	1456:55	1456:55	25	line_work_buf
LEAF_NODE	1456:68	1456:68	25	[
EXPR	1456:69	1456:69	25	iValue
FIELD	1456:69	1456:69	26	iValue
LEAF_NODE	1456:69	1456:69	27	iValue
LEAF_NODE	1456:75	1456:75	25	]
LEAF_NODE	1456:77	1456:77	24	&
FIELD	1456:79	1456:79	24	0xff
LEAF_NODE	1456:79	1456:79	25	0xff
LEAF_NODE	1456:83	1456:83	21	;
LEAF_NODE	1457:39	1457:39	19	}
LEAF_NODE	1458:31	1458:31	16	}
LEAF_NODE	1459:23	1459:23	11	}
EXPR_STATEMENT	1461:23	1461:37	9	++ tif -> tif_row ;
EXPR	1461:23	1461:25	10	++ tif -> tif_row
LEAF_NODE	1461:23	1461:23	11	++
FIELD	1461:25	1461:30	11	tif -> tif_row
LEAF_NODE	1461:25	1461:25	12	tif
LEAF_NODE	1461:28	1461:28	12	->
LEAF_NODE	1461:30	1461:30	12	tif_row
LEAF_NODE	1461:37	1461:37	10	;
EXPR_STATEMENT	1462:23	1462:46	9	buf += sp -> bytesperline ;
EXPR	1462:23	1462:23	10	buf += sp -> bytesperline
ASSIGN	1462:23	1462:30	11	buf += sp -> bytesperline
LVAL	1462:23	1462:23	12	buf
FIELD	1462:23	1462:23	13	buf
LEAF_NODE	1462:23	1462:23	14	buf
ASSIGN_OP	1462:27	1462:27	12	+=
LEAF_NODE	1462:27	1462:27	13	+=
RVAL	1462:30	1462:30	12	sp -> bytesperline
FIELD	1462:30	1462:34	13	sp -> bytesperline
LEAF_NODE	1462:30	1462:30	14	sp
LEAF_NODE	1462:32	1462:32	14	->
LEAF_NODE	1462:34	1462:34	14	bytesperline
LEAF_NODE	1462:46	1462:46	10	;
EXPR_STATEMENT	1463:23	1463:45	9	cc -= sp -> bytesperline ;
EXPR	1463:23	1463:23	10	cc -= sp -> bytesperline
ASSIGN	1463:23	1463:29	11	cc -= sp -> bytesperline
LVAL	1463:23	1463:23	12	cc
FIELD	1463:23	1463:23	13	cc
LEAF_NODE	1463:23	1463:23	14	cc
ASSIGN_OP	1463:26	1463:26	12	-=
LEAF_NODE	1463:26	1463:26	13	-=
RVAL	1463:29	1463:29	12	sp -> bytesperline
FIELD	1463:29	1463:33	13	sp -> bytesperline
LEAF_NODE	1463:29	1463:29	14	sp
LEAF_NODE	1463:31	1463:31	14	->
LEAF_NODE	1463:33	1463:33	14	bytesperline
LEAF_NODE	1463:45	1463:45	10	;
LEAF_NODE	1464:15	1464:15	8	}
LEAF_NODE	1464:36	1464:36	6	;
SELECTION	1466:15	1467:23	6	
KEYWORD	1466:15	1466:15	7	if
LEAF_NODE	1466:15	1466:15	8	if
LEAF_NODE	1466:17	1466:17	7	(
CONDITION	1466:19	1466:19	7	line_work_buf != NULL
EXPR	1466:19	1466:36	8	line_work_buf != NULL
FIELD	1466:19	1466:19	9	line_work_buf
LEAF_NODE	1466:19	1466:19	10	line_work_buf
EQ_OPERATOR	1466:33	1466:33	9	!=
LEAF_NODE	1466:33	1466:33	10	!=
FIELD	1466:36	1466:36	9	NULL
LEAF_NODE	1466:36	1466:36	10	NULL
LEAF_NODE	1466:41	1466:41	7	)
STATEMENTS	1467:23	1467:23	7	
EXPR_STATEMENT	1467:23	1467:49	8	_TIFFfree ( line_work_buf ) ;
EXPR	1467:23	1467:23	9	_TIFFfree ( line_work_buf )
FUNCTION_CALL	1467:23	1467:48	10	_TIFFfree ( line_work_buf )
CALLEE	1467:23	1467:23	11	_TIFFfree
LEAF_NODE	1467:23	1467:23	12	_TIFFfree
LEAF_NODE	1467:32	1467:32	11	(
ARGUMENT	1467:34	1467:34	11	line_work_buf
FIELD	1467:34	1467:34	12	line_work_buf
LEAF_NODE	1467:34	1467:34	13	line_work_buf
LEAF_NODE	1467:48	1467:48	11	)
LEAF_NODE	1467:49	1467:49	9	;
LEAF_NODE	1468:8	1468:8	5	}
EXPR_STATEMENT	1471:8	1471:57	3	tif -> tif_rawcp = ( uint8 * ) sp -> src . next_input_byte ;
EXPR	1471:8	1471:8	4	tif -> tif_rawcp = ( uint8 * ) sp -> src . next_input_byte
ASSIGN	1471:8	1471:25	5	tif -> tif_rawcp = ( uint8 * ) sp -> src . next_input_byte
LVAL	1471:8	1471:8	6	tif -> tif_rawcp
FIELD	1471:8	1471:13	7	tif -> tif_rawcp
LEAF_NODE	1471:8	1471:8	8	tif
LEAF_NODE	1471:11	1471:11	8	->
LEAF_NODE	1471:13	1471:13	8	tif_rawcp
ASSIGN_OP	1471:23	1471:23	6	=
LEAF_NODE	1471:23	1471:23	7	=
RVAL	1471:25	1471:34	6	( uint8 * ) sp -> src . next_input_byte
LEAF_NODE	1471:25	1471:25	7	(
TYPE_NAME	1471:26	1471:26	7	uint8
LEAF_NODE	1471:26	1471:26	8	uint8
LEAF_NODE	1471:31	1471:31	7	*
LEAF_NODE	1471:32	1471:32	7	)
FIELD	1471:34	1471:42	7	sp -> src . next_input_byte
LEAF_NODE	1471:34	1471:34	8	sp
LEAF_NODE	1471:36	1471:36	8	->
LEAF_NODE	1471:38	1471:38	8	src
LEAF_NODE	1471:41	1471:41	8	.
LEAF_NODE	1471:42	1471:42	8	next_input_byte
LEAF_NODE	1471:57	1471:57	4	;
EXPR_STATEMENT	1472:8	1472:48	3	tif -> tif_rawcc = sp -> src . bytes_in_buffer ;
EXPR	1472:8	1472:8	4	tif -> tif_rawcc = sp -> src . bytes_in_buffer
ASSIGN	1472:8	1472:25	5	tif -> tif_rawcc = sp -> src . bytes_in_buffer
LVAL	1472:8	1472:8	6	tif -> tif_rawcc
FIELD	1472:8	1472:13	7	tif -> tif_rawcc
LEAF_NODE	1472:8	1472:8	8	tif
LEAF_NODE	1472:11	1472:11	8	->
LEAF_NODE	1472:13	1472:13	8	tif_rawcc
ASSIGN_OP	1472:23	1472:23	6	=
LEAF_NODE	1472:23	1472:23	7	=
RVAL	1472:25	1472:25	6	sp -> src . bytes_in_buffer
FIELD	1472:25	1472:33	7	sp -> src . bytes_in_buffer
LEAF_NODE	1472:25	1472:25	8	sp
LEAF_NODE	1472:27	1472:27	8	->
LEAF_NODE	1472:29	1472:29	8	src
LEAF_NODE	1472:32	1472:32	8	.
LEAF_NODE	1472:33	1472:33	8	bytes_in_buffer
LEAF_NODE	1472:48	1472:48	4	;
JUMP_STATEMENT	1475:1	1476:49	3	return sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp ) ;
KEYWORD	1475:1	1475:1	4	return
LEAF_NODE	1475:1	1475:1	5	return
DESTINATION	1475:8	1475:8	4	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp )
EXPR	1475:8	1475:8	5	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp )
OR	1475:8	1476:19	6	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp )
EXPR	1475:8	1475:38	7	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height
FIELD	1475:8	1475:20	8	sp -> cinfo . d . output_scanline
LEAF_NODE	1475:8	1475:8	9	sp
LEAF_NODE	1475:10	1475:10	9	->
LEAF_NODE	1475:12	1475:12	9	cinfo
LEAF_NODE	1475:17	1475:17	9	.
LEAF_NODE	1475:18	1475:18	9	d
LEAF_NODE	1475:19	1475:19	9	.
LEAF_NODE	1475:20	1475:20	9	output_scanline
REL_OPERATOR	1475:36	1475:36	8	<
LEAF_NODE	1475:36	1475:36	9	<
FIELD	1475:38	1475:50	8	sp -> cinfo . d . output_height
LEAF_NODE	1475:38	1475:38	9	sp
LEAF_NODE	1475:40	1475:40	9	->
LEAF_NODE	1475:42	1475:42	9	cinfo
LEAF_NODE	1475:47	1475:47	9	.
LEAF_NODE	1475:48	1475:48	9	d
LEAF_NODE	1475:49	1475:49	9	.
LEAF_NODE	1475:50	1475:50	9	output_height
LEAF_NODE	1476:16	1476:16	7	||
EXPR	1476:19	1476:19	7	TIFFjpeg_finish_decompress ( sp )
FUNCTION_CALL	1476:19	1476:48	8	TIFFjpeg_finish_decompress ( sp )
CALLEE	1476:19	1476:19	9	TIFFjpeg_finish_decompress
LEAF_NODE	1476:19	1476:19	10	TIFFjpeg_finish_decompress
LEAF_NODE	1476:45	1476:45	9	(
ARGUMENT	1476:46	1476:46	9	sp
FIELD	1476:46	1476:46	10	sp
LEAF_NODE	1476:46	1476:46	11	sp
LEAF_NODE	1476:48	1476:48	9	)
LEAF_NODE	1476:49	1476:49	4	;
LEAF_NODE	1477:0	1477:0	2	}
FUNCTION_DEF	1480:13	1491:0	1	
RETURN_TYPE	1480:13	1480:20	2	static int
LEAF_NODE	1480:13	1480:13	3	static
TYPE_NAME	1480:20	1480:20	3	int
LEAF_NODE	1480:20	1480:20	4	int
FUNCTION_NAME	1481:0	1481:0	2	DecodeRowError
LEAF_NODE	1481:0	1481:0	3	DecodeRowError
PARAMETER_LIST	1481:14	1481:59	2	( TIFF * tif , uint8 * buf , tmsize_t cc , uint16 s )
LEAF_NODE	1481:14	1481:14	3	(
PARAMETER_DECL	1481:15	1481:21	3	TIFF * tif
TYPE	1481:15	1481:19	4	TIFF *
TYPE_NAME	1481:15	1481:15	5	TIFF
LEAF_NODE	1481:15	1481:15	6	TIFF
POINTER	1481:19	1481:19	5	*
LEAF_NODE	1481:19	1481:19	6	*
NAME	1481:21	1481:21	4	tif
LEAF_NODE	1481:21	1481:21	5	tif
LEAF_NODE	1481:24	1481:24	3	,
PARAMETER_DECL	1481:26	1481:33	3	uint8 * buf
TYPE	1481:26	1481:31	4	uint8 *
TYPE_NAME	1481:26	1481:26	5	uint8
LEAF_NODE	1481:26	1481:26	6	uint8
POINTER	1481:31	1481:31	5	*
LEAF_NODE	1481:31	1481:31	6	*
NAME	1481:33	1481:33	4	buf
LEAF_NODE	1481:33	1481:33	5	buf
LEAF_NODE	1481:36	1481:36	3	,
PARAMETER_DECL	1481:38	1481:47	3	tmsize_t cc
TYPE	1481:38	1481:38	4	tmsize_t
TYPE_NAME	1481:38	1481:38	5	tmsize_t
LEAF_NODE	1481:38	1481:38	6	tmsize_t
NAME	1481:47	1481:47	4	cc
LEAF_NODE	1481:47	1481:47	5	cc
LEAF_NODE	1481:49	1481:49	3	,
PARAMETER_DECL	1481:51	1481:58	3	uint16 s
TYPE	1481:51	1481:51	4	uint16
TYPE_NAME	1481:51	1481:51	5	uint16
LEAF_NODE	1481:51	1481:51	6	uint16
NAME	1481:58	1481:58	4	s
LEAF_NODE	1481:58	1481:58	5	s
LEAF_NODE	1481:59	1481:59	3	)
LEAF_NODE	1483:0	1483:0	2	{
STATEMENTS	1484:4	1490:4	2	
EXPR_STATEMENT	1484:4	1484:14	3	( void ) buf ;
EXPR	1484:4	1484:11	4	( void ) buf
LEAF_NODE	1484:4	1484:4	5	(
TYPE_NAME	1484:5	1484:5	5	void
LEAF_NODE	1484:5	1484:5	6	void
LEAF_NODE	1484:9	1484:9	5	)
FIELD	1484:11	1484:11	5	buf
LEAF_NODE	1484:11	1484:11	6	buf
LEAF_NODE	1484:14	1484:14	4	;
EXPR_STATEMENT	1485:4	1485:13	3	( void ) cc ;
EXPR	1485:4	1485:11	4	( void ) cc
LEAF_NODE	1485:4	1485:4	5	(
TYPE_NAME	1485:5	1485:5	5	void
LEAF_NODE	1485:5	1485:5	6	void
LEAF_NODE	1485:9	1485:9	5	)
FIELD	1485:11	1485:11	5	cc
LEAF_NODE	1485:11	1485:11	6	cc
LEAF_NODE	1485:13	1485:13	4	;
EXPR_STATEMENT	1486:4	1486:12	3	( void ) s ;
EXPR	1486:4	1486:11	4	( void ) s
LEAF_NODE	1486:4	1486:4	5	(
TYPE_NAME	1486:5	1486:5	5	void
LEAF_NODE	1486:5	1486:5	6	void
LEAF_NODE	1486:9	1486:9	5	)
FIELD	1486:11	1486:11	5	s
LEAF_NODE	1486:11	1486:11	6	s
LEAF_NODE	1486:12	1486:12	4	;
EXPR_STATEMENT	1488:4	1489:161	3	TIFFErrorExt ( tif -> tif_clientdata , "TIFFReadScanline" , "scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB." ) ;
EXPR	1488:4	1488:4	4	TIFFErrorExt ( tif -> tif_clientdata , "TIFFReadScanline" , "scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB." )
FUNCTION_CALL	1488:4	1489:160	5	TIFFErrorExt ( tif -> tif_clientdata , "TIFFReadScanline" , "scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB." )
CALLEE	1488:4	1488:4	6	TIFFErrorExt
LEAF_NODE	1488:4	1488:4	7	TIFFErrorExt
LEAF_NODE	1488:16	1488:16	6	(
ARGUMENT	1488:17	1488:17	6	tif -> tif_clientdata
FIELD	1488:17	1488:22	7	tif -> tif_clientdata
LEAF_NODE	1488:17	1488:17	8	tif
LEAF_NODE	1488:20	1488:20	8	->
LEAF_NODE	1488:22	1488:22	8	tif_clientdata
LEAF_NODE	1488:36	1488:36	6	,
ARGUMENT	1488:38	1488:38	6	"TIFFReadScanline"
FIELD	1488:38	1488:38	7	"TIFFReadScanline"
LEAF_NODE	1488:38	1488:38	8	"TIFFReadScanline"
LEAF_NODE	1488:56	1488:56	6	,
ARGUMENT	1489:17	1489:17	6	"scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB."
FIELD	1489:17	1489:17	7	"scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB."
LEAF_NODE	1489:17	1489:17	8	"scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB."
LEAF_NODE	1489:160	1489:160	6	)
LEAF_NODE	1489:161	1489:161	4	;
JUMP_STATEMENT	1490:4	1490:12	3	return 0 ;
KEYWORD	1490:4	1490:4	4	return
LEAF_NODE	1490:4	1490:4	5	return
DESTINATION	1490:11	1490:11	4	0
EXPR	1490:11	1490:11	5	0
FIELD	1490:11	1490:11	6	0
LEAF_NODE	1490:11	1490:11	7	0
LEAF_NODE	1490:12	1490:12	4	;
LEAF_NODE	1491:0	1491:0	2	}
FUNCTION_DEF	1497:13	1640:0	1	
RETURN_TYPE	1497:13	1497:20	2	static int
LEAF_NODE	1497:13	1497:13	3	static
TYPE_NAME	1497:20	1497:20	3	int
LEAF_NODE	1497:20	1497:20	4	int
FUNCTION_NAME	1498:0	1498:0	2	JPEGDecodeRaw
LEAF_NODE	1498:0	1498:0	3	JPEGDecodeRaw
PARAMETER_LIST	1498:13	1498:58	2	( TIFF * tif , uint8 * buf , tmsize_t cc , uint16 s )
LEAF_NODE	1498:13	1498:13	3	(
PARAMETER_DECL	1498:14	1498:20	3	TIFF * tif
TYPE	1498:14	1498:18	4	TIFF *
TYPE_NAME	1498:14	1498:14	5	TIFF
LEAF_NODE	1498:14	1498:14	6	TIFF
POINTER	1498:18	1498:18	5	*
LEAF_NODE	1498:18	1498:18	6	*
NAME	1498:20	1498:20	4	tif
LEAF_NODE	1498:20	1498:20	5	tif
LEAF_NODE	1498:23	1498:23	3	,
PARAMETER_DECL	1498:25	1498:32	3	uint8 * buf
TYPE	1498:25	1498:30	4	uint8 *
TYPE_NAME	1498:25	1498:25	5	uint8
LEAF_NODE	1498:25	1498:25	6	uint8
POINTER	1498:30	1498:30	5	*
LEAF_NODE	1498:30	1498:30	6	*
NAME	1498:32	1498:32	4	buf
LEAF_NODE	1498:32	1498:32	5	buf
LEAF_NODE	1498:35	1498:35	3	,
PARAMETER_DECL	1498:37	1498:46	3	tmsize_t cc
TYPE	1498:37	1498:37	4	tmsize_t
TYPE_NAME	1498:37	1498:37	5	tmsize_t
LEAF_NODE	1498:37	1498:37	6	tmsize_t
NAME	1498:46	1498:46	4	cc
LEAF_NODE	1498:46	1498:46	5	cc
LEAF_NODE	1498:48	1498:48	3	,
PARAMETER_DECL	1498:50	1498:57	3	uint16 s
TYPE	1498:50	1498:50	4	uint16
TYPE_NAME	1498:50	1498:50	5	uint16
LEAF_NODE	1498:50	1498:50	6	uint16
NAME	1498:57	1498:57	4	s
LEAF_NODE	1498:57	1498:57	5	s
LEAF_NODE	1498:58	1498:58	3	)
LEAF_NODE	1499:0	1499:0	2	{
STATEMENTS	1500:1	1638:1	2	
SIMPLE_DECL	1500:1	1500:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	1500:1	1500:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	1500:1	1500:11	5	JPEGState *
TYPE_NAME	1500:1	1500:1	6	JPEGState
LEAF_NODE	1500:1	1500:1	7	JPEGState
POINTER	1500:11	1500:11	6	*
LEAF_NODE	1500:11	1500:11	7	*
NAME	1500:12	1500:12	5	sp
LEAF_NODE	1500:12	1500:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1500:12	1500:12	5	sp = JState ( tif )
ASSIGN	1500:12	1500:17	6	sp = JState ( tif )
LVAL	1500:12	1500:12	7	sp
NAME	1500:12	1500:12	8	sp
LEAF_NODE	1500:12	1500:12	9	sp
ASSIGN_OP	1500:15	1500:15	7	=
LEAF_NODE	1500:15	1500:15	8	=
RVAL	1500:17	1500:17	7	JState ( tif )
FUNCTION_CALL	1500:17	1500:27	8	JState ( tif )
CALLEE	1500:17	1500:17	9	JState
LEAF_NODE	1500:17	1500:17	10	JState
LEAF_NODE	1500:23	1500:23	9	(
ARGUMENT	1500:24	1500:24	9	tif
FIELD	1500:24	1500:24	10	tif
LEAF_NODE	1500:24	1500:24	11	tif
LEAF_NODE	1500:27	1500:27	9	)
LEAF_NODE	1500:28	1500:28	4	;
SIMPLE_DECL	1501:1	1501:15	3	tmsize_t nrows ;
VAR_DECL	1501:1	1501:10	4	tmsize_t nrows
TYPE	1501:1	1501:1	5	tmsize_t
TYPE_NAME	1501:1	1501:1	6	tmsize_t
LEAF_NODE	1501:1	1501:1	7	tmsize_t
NAME	1501:10	1501:10	5	nrows
LEAF_NODE	1501:10	1501:10	6	nrows
LEAF_NODE	1501:15	1501:15	4	;
SIMPLE_DECL	1502:8	1502:41	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1502:8	1502:23	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1502:8	1502:22	5	TIFFDirectory *
TYPE_NAME	1502:8	1502:8	6	TIFFDirectory
LEAF_NODE	1502:8	1502:8	7	TIFFDirectory
POINTER	1502:22	1502:22	6	*
LEAF_NODE	1502:22	1502:22	7	*
NAME	1502:23	1502:23	5	td
LEAF_NODE	1502:23	1502:23	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1502:23	1502:23	5	td = & tif -> tif_dir
ASSIGN	1502:23	1502:28	6	td = & tif -> tif_dir
LVAL	1502:23	1502:23	7	td
NAME	1502:23	1502:23	8	td
LEAF_NODE	1502:23	1502:23	9	td
ASSIGN_OP	1502:26	1502:26	7	=
LEAF_NODE	1502:26	1502:26	8	=
RVAL	1502:28	1502:28	7	& tif -> tif_dir
UNARY_EXPR	1502:28	1502:29	8	& tif -> tif_dir
UNARY_OPERATOR	1502:28	1502:28	9	&
LEAF_NODE	1502:28	1502:28	10	&
FIELD	1502:29	1502:34	9	tif -> tif_dir
LEAF_NODE	1502:29	1502:29	10	tif
LEAF_NODE	1502:32	1502:32	10	->
LEAF_NODE	1502:34	1502:34	10	tif_dir
LEAF_NODE	1502:41	1502:41	4	;
EXPR_STATEMENT	1503:1	1503:9	3	( void ) s ;
EXPR	1503:1	1503:8	4	( void ) s
LEAF_NODE	1503:1	1503:1	5	(
TYPE_NAME	1503:2	1503:2	5	void
LEAF_NODE	1503:2	1503:2	6	void
LEAF_NODE	1503:6	1503:6	5	)
FIELD	1503:8	1503:8	5	s
LEAF_NODE	1503:8	1503:8	6	s
LEAF_NODE	1503:9	1503:9	4	;
EXPR_STATEMENT	1505:8	1505:40	3	nrows = sp -> cinfo . d . image_height ;
EXPR	1505:8	1505:8	4	nrows = sp -> cinfo . d . image_height
ASSIGN	1505:8	1505:16	5	nrows = sp -> cinfo . d . image_height
LVAL	1505:8	1505:8	6	nrows
FIELD	1505:8	1505:8	7	nrows
LEAF_NODE	1505:8	1505:8	8	nrows
ASSIGN_OP	1505:14	1505:14	6	=
LEAF_NODE	1505:14	1505:14	7	=
RVAL	1505:16	1505:16	6	sp -> cinfo . d . image_height
FIELD	1505:16	1505:28	7	sp -> cinfo . d . image_height
LEAF_NODE	1505:16	1505:16	8	sp
LEAF_NODE	1505:18	1505:18	8	->
LEAF_NODE	1505:20	1505:20	8	cinfo
LEAF_NODE	1505:25	1505:25	8	.
LEAF_NODE	1505:26	1505:26	8	d
LEAF_NODE	1505:27	1505:27	8	.
LEAF_NODE	1505:28	1505:28	8	image_height
LEAF_NODE	1505:40	1505:40	4	;
SELECTION	1509:8	1510:12	3	
KEYWORD	1509:8	1509:8	4	if
LEAF_NODE	1509:8	1509:8	5	if
LEAF_NODE	1509:10	1509:10	4	(
CONDITION	1509:12	1509:12	4	( uint32 ) nrows > td -> td_imagelength - tif -> tif_row && ! isTiled ( tif )
EXPR	1509:12	1509:12	5	( uint32 ) nrows > td -> td_imagelength - tif -> tif_row && ! isTiled ( tif )
AND	1509:12	1509:65	6	( uint32 ) nrows > td -> td_imagelength - tif -> tif_row && ! isTiled ( tif )
EXPR	1509:12	1509:49	7	( uint32 ) nrows > td -> td_imagelength - tif -> tif_row
LEAF_NODE	1509:12	1509:12	8	(
TYPE_NAME	1509:13	1509:13	8	uint32
LEAF_NODE	1509:13	1509:13	9	uint32
LEAF_NODE	1509:19	1509:19	8	)
FIELD	1509:20	1509:20	8	nrows
LEAF_NODE	1509:20	1509:20	9	nrows
REL_OPERATOR	1509:26	1509:26	8	>
LEAF_NODE	1509:26	1509:26	9	>
FIELD	1509:28	1509:32	8	td -> td_imagelength
LEAF_NODE	1509:28	1509:28	9	td
LEAF_NODE	1509:30	1509:30	9	->
LEAF_NODE	1509:32	1509:32	9	td_imagelength
LEAF_NODE	1509:47	1509:47	8	-
FIELD	1509:49	1509:54	8	tif -> tif_row
LEAF_NODE	1509:49	1509:49	9	tif
LEAF_NODE	1509:52	1509:52	9	->
LEAF_NODE	1509:54	1509:54	9	tif_row
LEAF_NODE	1509:62	1509:62	7	&&
EXPR	1509:65	1509:65	7	! isTiled ( tif )
UNARY_EXPR	1509:65	1509:66	8	! isTiled ( tif )
UNARY_OPERATOR	1509:65	1509:65	9	!
LEAF_NODE	1509:65	1509:65	10	!
FUNCTION_CALL	1509:66	1509:77	9	isTiled ( tif )
CALLEE	1509:66	1509:66	10	isTiled
LEAF_NODE	1509:66	1509:66	11	isTiled
LEAF_NODE	1509:73	1509:73	10	(
ARGUMENT	1509:74	1509:74	10	tif
FIELD	1509:74	1509:74	11	tif
LEAF_NODE	1509:74	1509:74	12	tif
LEAF_NODE	1509:77	1509:77	10	)
LEAF_NODE	1509:79	1509:79	4	)
STATEMENTS	1510:12	1510:12	4	
EXPR_STATEMENT	1510:12	1510:53	5	nrows = td -> td_imagelength - tif -> tif_row ;
EXPR	1510:12	1510:12	6	nrows = td -> td_imagelength - tif -> tif_row
ASSIGN	1510:12	1510:20	7	nrows = td -> td_imagelength - tif -> tif_row
LVAL	1510:12	1510:12	8	nrows
FIELD	1510:12	1510:12	9	nrows
LEAF_NODE	1510:12	1510:12	10	nrows
ASSIGN_OP	1510:18	1510:18	8	=
LEAF_NODE	1510:18	1510:18	9	=
RVAL	1510:20	1510:41	8	td -> td_imagelength - tif -> tif_row
FIELD	1510:20	1510:24	9	td -> td_imagelength
LEAF_NODE	1510:20	1510:20	10	td
LEAF_NODE	1510:22	1510:22	10	->
LEAF_NODE	1510:24	1510:24	10	td_imagelength
LEAF_NODE	1510:39	1510:39	9	-
FIELD	1510:41	1510:46	9	tif -> tif_row
LEAF_NODE	1510:41	1510:41	10	tif
LEAF_NODE	1510:44	1510:44	10	->
LEAF_NODE	1510:46	1510:46	10	tif_row
LEAF_NODE	1510:53	1510:53	6	;
SELECTION	1513:1	1513:19	3	
KEYWORD	1513:1	1513:1	4	if
LEAF_NODE	1513:1	1513:1	5	if
LEAF_NODE	1513:4	1513:4	4	(
CONDITION	1513:6	1513:6	4	nrows != 0
EXPR	1513:6	1513:15	5	nrows != 0
FIELD	1513:6	1513:6	6	nrows
LEAF_NODE	1513:6	1513:6	7	nrows
EQ_OPERATOR	1513:12	1513:12	6	!=
LEAF_NODE	1513:12	1513:12	7	!=
FIELD	1513:15	1513:15	6	0
LEAF_NODE	1513:15	1513:15	7	0
LEAF_NODE	1513:17	1513:17	4	)
STATEMENTS	1513:19	1635:1	4	
LEAF_NODE	1513:19	1513:19	5	{
STATEMENTS	1516:2	1632:2	5	
SIMPLE_DECL	1516:2	1516:73	6	JDIMENSION clumps_per_line ; clumps_per_line = sp -> cinfo . d . comp_info [ 1 ] . downsampled_width ;
VAR_DECL	1516:2	1516:13	7	JDIMENSION clumps_per_line ; clumps_per_line = sp -> cinfo . d . comp_info [ 1 ] . downsampled_width
TYPE	1516:2	1516:2	8	JDIMENSION
TYPE_NAME	1516:2	1516:2	9	JDIMENSION
LEAF_NODE	1516:2	1516:2	10	JDIMENSION
NAME	1516:13	1516:13	8	clumps_per_line
LEAF_NODE	1516:13	1516:13	9	clumps_per_line
LEAF_NODE	0:0	0:0	8	;
INIT	1516:13	1516:13	8	clumps_per_line = sp -> cinfo . d . comp_info [ 1 ] . downsampled_width
ASSIGN	1516:13	1516:31	9	clumps_per_line = sp -> cinfo . d . comp_info [ 1 ] . downsampled_width
LVAL	1516:13	1516:13	10	clumps_per_line
NAME	1516:13	1516:13	11	clumps_per_line
LEAF_NODE	1516:13	1516:13	12	clumps_per_line
ASSIGN_OP	1516:29	1516:29	10	=
LEAF_NODE	1516:29	1516:29	11	=
RVAL	1516:31	1516:31	10	sp -> cinfo . d . comp_info [ 1 ] . downsampled_width
FIELD	1516:31	1516:56	11	sp -> cinfo . d . comp_info [ 1 ] . downsampled_width
LEAF_NODE	1516:31	1516:31	12	sp
LEAF_NODE	1516:33	1516:33	12	->
LEAF_NODE	1516:35	1516:35	12	cinfo
LEAF_NODE	1516:40	1516:40	12	.
LEAF_NODE	1516:41	1516:41	12	d
LEAF_NODE	1516:42	1516:42	12	.
LEAF_NODE	1516:43	1516:43	12	comp_info
LEAF_NODE	1516:52	1516:52	12	[
EXPR	1516:53	1516:53	12	1
FIELD	1516:53	1516:53	13	1
LEAF_NODE	1516:53	1516:53	14	1
LEAF_NODE	1516:54	1516:54	12	]
LEAF_NODE	1516:55	1516:55	12	.
LEAF_NODE	1516:56	1516:56	12	downsampled_width
LEAF_NODE	1516:73	1516:73	7	;
SIMPLE_DECL	1517:2	1517:45	6	int samples_per_clump ; samples_per_clump = sp -> samplesperclump ;
VAR_DECL	1517:2	1517:6	7	int samples_per_clump ; samples_per_clump = sp -> samplesperclump
TYPE	1517:2	1517:2	8	int
TYPE_NAME	1517:2	1517:2	9	int
LEAF_NODE	1517:2	1517:2	10	int
NAME	1517:6	1517:6	8	samples_per_clump
LEAF_NODE	1517:6	1517:6	9	samples_per_clump
LEAF_NODE	0:0	0:0	8	;
INIT	1517:6	1517:6	8	samples_per_clump = sp -> samplesperclump
ASSIGN	1517:6	1517:26	9	samples_per_clump = sp -> samplesperclump
LVAL	1517:6	1517:6	10	samples_per_clump
NAME	1517:6	1517:6	11	samples_per_clump
LEAF_NODE	1517:6	1517:6	12	samples_per_clump
ASSIGN_OP	1517:24	1517:24	10	=
LEAF_NODE	1517:24	1517:24	11	=
RVAL	1517:26	1517:26	10	sp -> samplesperclump
FIELD	1517:26	1517:30	11	sp -> samplesperclump
LEAF_NODE	1517:26	1517:26	12	sp
LEAF_NODE	1517:28	1517:28	12	->
LEAF_NODE	1517:30	1517:30	12	samplesperclump
LEAF_NODE	1517:45	1517:45	7	;
LEAF_NODE	1520:2	1520:2	6	unsigned
LEAF_NODE	1520:11	1520:11	6	short
LEAF_NODE	1520:16	1520:16	6	*
LEAF_NODE	1520:18	1520:18	6	tmpbuf
LEAF_NODE	1520:25	1520:25	6	=
LEAF_NODE	1520:27	1520:27	6	_TIFFmalloc
LEAF_NODE	1520:38	1520:38	6	(
LEAF_NODE	1520:39	1520:39	6	sizeof
LEAF_NODE	1520:45	1520:45	6	(
LEAF_NODE	1520:46	1520:46	6	unsigned
LEAF_NODE	1520:55	1520:55	6	short
LEAF_NODE	1520:60	1520:60	6	)
LEAF_NODE	1520:62	1520:62	6	*
LEAF_NODE	1521:11	1521:11	6	sp
LEAF_NODE	1521:13	1521:13	6	->
LEAF_NODE	1521:15	1521:15	6	cinfo
LEAF_NODE	1521:20	1521:20	6	.
LEAF_NODE	1521:21	1521:21	6	d
LEAF_NODE	1521:22	1521:22	6	.
LEAF_NODE	1521:23	1521:23	6	output_width
LEAF_NODE	1521:36	1521:36	6	*
LEAF_NODE	1522:11	1522:11	6	sp
LEAF_NODE	1522:13	1522:13	6	->
LEAF_NODE	1522:15	1522:15	6	cinfo
LEAF_NODE	1522:20	1522:20	6	.
LEAF_NODE	1522:21	1522:21	6	d
LEAF_NODE	1522:22	1522:22	6	.
LEAF_NODE	1522:23	1522:23	6	num_components
LEAF_NODE	1522:37	1522:37	6	)
LEAF_NODE	1522:38	1522:38	6	;
SELECTION	1523:2	1523:19	6	
KEYWORD	1523:2	1523:2	7	if
LEAF_NODE	1523:2	1523:2	8	if
LEAF_NODE	1523:4	1523:4	7	(
CONDITION	1523:5	1523:5	7	tmpbuf == NULL
EXPR	1523:5	1523:13	8	tmpbuf == NULL
FIELD	1523:5	1523:5	9	tmpbuf
LEAF_NODE	1523:5	1523:5	10	tmpbuf
EQ_OPERATOR	1523:11	1523:11	9	==
LEAF_NODE	1523:11	1523:11	10	==
FIELD	1523:13	1523:13	9	NULL
LEAF_NODE	1523:13	1523:13	10	NULL
LEAF_NODE	1523:17	1523:17	7	)
STATEMENTS	1523:19	1527:16	7	
LEAF_NODE	1523:19	1523:19	8	{
STATEMENTS	1524:24	1526:3	8	
EXPR_STATEMENT	1524:24	1525:25	9	TIFFErrorExt ( tif -> tif_clientdata , "JPEGDecodeRaw" , "Out of memory" ) ;
EXPR	1524:24	1524:24	10	TIFFErrorExt ( tif -> tif_clientdata , "JPEGDecodeRaw" , "Out of memory" )
FUNCTION_CALL	1524:24	1525:24	11	TIFFErrorExt ( tif -> tif_clientdata , "JPEGDecodeRaw" , "Out of memory" )
CALLEE	1524:24	1524:24	12	TIFFErrorExt
LEAF_NODE	1524:24	1524:24	13	TIFFErrorExt
LEAF_NODE	1524:36	1524:36	12	(
ARGUMENT	1524:37	1524:37	12	tif -> tif_clientdata
FIELD	1524:37	1524:42	13	tif -> tif_clientdata
LEAF_NODE	1524:37	1524:37	14	tif
LEAF_NODE	1524:40	1524:40	14	->
LEAF_NODE	1524:42	1524:42	14	tif_clientdata
LEAF_NODE	1524:56	1524:56	12	,
ARGUMENT	1524:58	1524:58	12	"JPEGDecodeRaw"
FIELD	1524:58	1524:58	13	"JPEGDecodeRaw"
LEAF_NODE	1524:58	1524:58	14	"JPEGDecodeRaw"
LEAF_NODE	1524:73	1524:73	12	,
ARGUMENT	1525:9	1525:9	12	"Out of memory"
FIELD	1525:9	1525:9	13	"Out of memory"
LEAF_NODE	1525:9	1525:9	14	"Out of memory"
LEAF_NODE	1525:24	1525:24	12	)
LEAF_NODE	1525:25	1525:25	10	;
JUMP_STATEMENT	1526:3	1526:11	9	return 0 ;
KEYWORD	1526:3	1526:3	10	return
LEAF_NODE	1526:3	1526:3	11	return
DESTINATION	1526:10	1526:10	10	0
EXPR	1526:10	1526:10	11	0
FIELD	1526:10	1526:10	12	0
LEAF_NODE	1526:10	1526:10	13	0
LEAF_NODE	1526:11	1526:11	10	;
LEAF_NODE	1527:16	1527:16	8	}
ITERATION	1530:2	1530:5	6	
KEYWORD	1530:2	1530:2	7	do
LEAF_NODE	1530:2	1530:2	8	do
LEAF_NODE	1629:10	1629:10	7	(
CONDITION	1629:11	1629:11	7	nrows > 0
EXPR	1629:11	1629:19	8	nrows > 0
FIELD	1629:11	1629:11	9	nrows
LEAF_NODE	1629:11	1629:11	10	nrows
REL_OPERATOR	1629:17	1629:17	9	>
LEAF_NODE	1629:17	1629:17	10	>
FIELD	1629:19	1629:19	9	0
LEAF_NODE	1629:19	1629:19	10	0
LEAF_NODE	1629:20	1629:20	7	)
STATEMENTS	1530:5	1629:2	7	
LEAF_NODE	1530:5	1530:5	8	{
STATEMENTS	1531:3	1628:3	8	
SIMPLE_DECL	1531:3	1531:31	9	jpeg_component_info * compptr ;
VAR_DECL	1531:3	1531:24	10	jpeg_component_info * compptr
TYPE	1531:3	1531:23	11	jpeg_component_info *
TYPE_NAME	1531:3	1531:3	12	jpeg_component_info
LEAF_NODE	1531:3	1531:3	13	jpeg_component_info
POINTER	1531:23	1531:23	12	*
LEAF_NODE	1531:23	1531:23	13	*
NAME	1531:24	1531:24	11	compptr
LEAF_NODE	1531:24	1531:24	12	compptr
LEAF_NODE	1531:31	1531:31	10	;
SIMPLE_DECL	1532:3	1532:22	9	int ci , int clumpoffset ;
INIT_DECL_LIST	1532:3	1532:3	10	int ci , int clumpoffset
VAR_DECL	1532:3	1532:7	11	int ci
TYPE	1532:3	1532:3	12	int
TYPE_NAME	1532:3	1532:3	13	int
LEAF_NODE	1532:3	1532:3	14	int
NAME	1532:7	1532:7	12	ci
LEAF_NODE	1532:7	1532:7	13	ci
LEAF_NODE	1532:9	1532:9	11	,
VAR_DECL	1532:3	1532:11	11	int clumpoffset
TYPE	1532:3	1532:3	12	int
TYPE_NAME	1532:3	1532:3	13	int
LEAF_NODE	1532:3	1532:3	14	int
NAME	1532:11	1532:11	12	clumpoffset
LEAF_NODE	1532:11	1532:11	13	clumpoffset
LEAF_NODE	1532:22	1532:22	10	;
SELECTION	1534:24	1534:52	9	
KEYWORD	1534:24	1534:24	10	if
LEAF_NODE	1534:24	1534:24	11	if
LEAF_NODE	1534:26	1534:26	10	(
CONDITION	1534:28	1534:28	10	cc < sp -> bytesperline
EXPR	1534:28	1534:33	11	cc < sp -> bytesperline
FIELD	1534:28	1534:28	12	cc
LEAF_NODE	1534:28	1534:28	13	cc
REL_OPERATOR	1534:31	1534:31	12	<
LEAF_NODE	1534:31	1534:31	13	<
FIELD	1534:33	1534:37	12	sp -> bytesperline
LEAF_NODE	1534:33	1534:33	13	sp
LEAF_NODE	1534:35	1534:35	13	->
LEAF_NODE	1534:37	1534:37	13	bytesperline
LEAF_NODE	1534:50	1534:50	10	)
STATEMENTS	1534:52	1538:24	10	
LEAF_NODE	1534:52	1534:52	11	{
STATEMENTS	1535:4	1537:4	11	
EXPR_STATEMENT	1535:4	1536:62	12	TIFFErrorExt ( tif -> tif_clientdata , "JPEGDecodeRaw" , "application buffer not large enough for all data." ) ;
EXPR	1535:4	1535:4	13	TIFFErrorExt ( tif -> tif_clientdata , "JPEGDecodeRaw" , "application buffer not large enough for all data." )
FUNCTION_CALL	1535:4	1536:61	14	TIFFErrorExt ( tif -> tif_clientdata , "JPEGDecodeRaw" , "application buffer not large enough for all data." )
CALLEE	1535:4	1535:4	15	TIFFErrorExt
LEAF_NODE	1535:4	1535:4	16	TIFFErrorExt
LEAF_NODE	1535:16	1535:16	15	(
ARGUMENT	1535:17	1535:17	15	tif -> tif_clientdata
FIELD	1535:17	1535:22	16	tif -> tif_clientdata
LEAF_NODE	1535:17	1535:17	17	tif
LEAF_NODE	1535:20	1535:20	17	->
LEAF_NODE	1535:22	1535:22	17	tif_clientdata
LEAF_NODE	1535:36	1535:36	15	,
ARGUMENT	1535:38	1535:38	15	"JPEGDecodeRaw"
FIELD	1535:38	1535:38	16	"JPEGDecodeRaw"
LEAF_NODE	1535:38	1535:38	17	"JPEGDecodeRaw"
LEAF_NODE	1535:53	1535:53	15	,
ARGUMENT	1536:10	1536:10	15	"application buffer not large enough for all data."
FIELD	1536:10	1536:10	16	"application buffer not large enough for all data."
LEAF_NODE	1536:10	1536:10	17	"application buffer not large enough for all data."
LEAF_NODE	1536:61	1536:61	15	)
LEAF_NODE	1536:62	1536:62	13	;
JUMP_STATEMENT	1537:4	1537:12	12	return 0 ;
KEYWORD	1537:4	1537:4	13	return
LEAF_NODE	1537:4	1537:4	14	return
DESTINATION	1537:11	1537:11	13	0
EXPR	1537:11	1537:11	14	0
FIELD	1537:11	1537:11	15	0
LEAF_NODE	1537:11	1537:11	16	0
LEAF_NODE	1537:12	1537:12	13	;
LEAF_NODE	1538:24	1538:24	11	}
SELECTION	1541:3	1541:33	9	
KEYWORD	1541:3	1541:3	10	if
LEAF_NODE	1541:3	1541:3	11	if
LEAF_NODE	1541:6	1541:6	10	(
CONDITION	1541:7	1541:7	10	sp -> scancount >= DCTSIZE
EXPR	1541:7	1541:24	11	sp -> scancount >= DCTSIZE
FIELD	1541:7	1541:11	12	sp -> scancount
LEAF_NODE	1541:7	1541:7	13	sp
LEAF_NODE	1541:9	1541:9	13	->
LEAF_NODE	1541:11	1541:11	13	scancount
REL_OPERATOR	1541:21	1541:21	12	>=
LEAF_NODE	1541:21	1541:21	13	>=
FIELD	1541:24	1541:24	12	DCTSIZE
LEAF_NODE	1541:24	1541:24	13	DCTSIZE
LEAF_NODE	1541:31	1541:31	10	)
STATEMENTS	1541:33	1546:3	10	
LEAF_NODE	1541:33	1541:33	11	{
STATEMENTS	1542:4	1545:4	11	
SIMPLE_DECL	1542:4	1542:51	12	int n ; n = sp -> cinfo . d . max_v_samp_factor * DCTSIZE ;
VAR_DECL	1542:4	1542:8	13	int n ; n = sp -> cinfo . d . max_v_samp_factor * DCTSIZE
TYPE	1542:4	1542:4	14	int
TYPE_NAME	1542:4	1542:4	15	int
LEAF_NODE	1542:4	1542:4	16	int
NAME	1542:8	1542:8	14	n
LEAF_NODE	1542:8	1542:8	15	n
LEAF_NODE	0:0	0:0	14	;
INIT	1542:8	1542:8	14	n = sp -> cinfo . d . max_v_samp_factor * DCTSIZE
ASSIGN	1542:8	1542:12	15	n = sp -> cinfo . d . max_v_samp_factor * DCTSIZE
LVAL	1542:8	1542:8	16	n
NAME	1542:8	1542:8	17	n
LEAF_NODE	1542:8	1542:8	18	n
ASSIGN_OP	1542:10	1542:10	16	=
LEAF_NODE	1542:10	1542:10	17	=
RVAL	1542:12	1542:44	16	sp -> cinfo . d . max_v_samp_factor * DCTSIZE
FIELD	1542:12	1542:24	17	sp -> cinfo . d . max_v_samp_factor
LEAF_NODE	1542:12	1542:12	18	sp
LEAF_NODE	1542:14	1542:14	18	->
LEAF_NODE	1542:16	1542:16	18	cinfo
LEAF_NODE	1542:21	1542:21	18	.
LEAF_NODE	1542:22	1542:22	18	d
LEAF_NODE	1542:23	1542:23	18	.
LEAF_NODE	1542:24	1542:24	18	max_v_samp_factor
LEAF_NODE	1542:42	1542:42	17	*
FIELD	1542:44	1542:44	17	DCTSIZE
LEAF_NODE	1542:44	1542:44	18	DCTSIZE
LEAF_NODE	1542:51	1542:51	13	;
SELECTION	1543:4	1544:5	12	
KEYWORD	1543:4	1543:4	13	if
LEAF_NODE	1543:4	1543:4	14	if
LEAF_NODE	1543:7	1543:7	13	(
CONDITION	1543:8	1543:8	13	TIFFjpeg_read_raw_data ( sp , sp -> ds_buffer , n ) != n
EXPR	1543:8	1543:56	14	TIFFjpeg_read_raw_data ( sp , sp -> ds_buffer , n ) != n
FUNCTION_CALL	1543:8	1543:51	15	TIFFjpeg_read_raw_data ( sp , sp -> ds_buffer , n )
CALLEE	1543:8	1543:8	16	TIFFjpeg_read_raw_data
LEAF_NODE	1543:8	1543:8	17	TIFFjpeg_read_raw_data
LEAF_NODE	1543:30	1543:30	16	(
ARGUMENT	1543:31	1543:31	16	sp
FIELD	1543:31	1543:31	17	sp
LEAF_NODE	1543:31	1543:31	18	sp
LEAF_NODE	1543:33	1543:33	16	,
ARGUMENT	1543:35	1543:35	16	sp -> ds_buffer
FIELD	1543:35	1543:39	17	sp -> ds_buffer
LEAF_NODE	1543:35	1543:35	18	sp
LEAF_NODE	1543:37	1543:37	18	->
LEAF_NODE	1543:39	1543:39	18	ds_buffer
LEAF_NODE	1543:48	1543:48	16	,
ARGUMENT	1543:50	1543:50	16	n
FIELD	1543:50	1543:50	17	n
LEAF_NODE	1543:50	1543:50	18	n
LEAF_NODE	1543:51	1543:51	16	)
EQ_OPERATOR	1543:53	1543:53	15	!=
LEAF_NODE	1543:53	1543:53	16	!=
FIELD	1543:56	1543:56	15	n
LEAF_NODE	1543:56	1543:56	16	n
LEAF_NODE	1543:57	1543:57	13	)
STATEMENTS	1544:5	1544:5	13	
JUMP_STATEMENT	1544:5	1544:15	14	return ( 0 ) ;
KEYWORD	1544:5	1544:5	15	return
LEAF_NODE	1544:5	1544:5	16	return
DESTINATION	1544:12	1544:12	15	( 0 )
EXPR	1544:12	1544:14	16	( 0 )
LEAF_NODE	1544:12	1544:12	17	(
FIELD	1544:13	1544:13	17	0
LEAF_NODE	1544:13	1544:13	18	0
LEAF_NODE	1544:14	1544:14	17	)
LEAF_NODE	1544:15	1544:15	15	;
EXPR_STATEMENT	1545:4	1545:21	12	sp -> scancount = 0 ;
EXPR	1545:4	1545:4	13	sp -> scancount = 0
ASSIGN	1545:4	1545:20	14	sp -> scancount = 0
LVAL	1545:4	1545:4	15	sp -> scancount
FIELD	1545:4	1545:8	16	sp -> scancount
LEAF_NODE	1545:4	1545:4	17	sp
LEAF_NODE	1545:6	1545:6	17	->
LEAF_NODE	1545:8	1545:8	17	scancount
ASSIGN_OP	1545:18	1545:18	15	=
LEAF_NODE	1545:18	1545:18	16	=
RVAL	1545:20	1545:20	15	0
FIELD	1545:20	1545:20	16	0
LEAF_NODE	1545:20	1545:20	17	0
LEAF_NODE	1545:21	1545:21	13	;
LEAF_NODE	1546:3	1546:3	11	}
EXPR_STATEMENT	1551:3	1551:18	9	clumpoffset = 0 ;
EXPR	1551:3	1551:3	10	clumpoffset = 0
ASSIGN	1551:3	1551:17	11	clumpoffset = 0
LVAL	1551:3	1551:3	12	clumpoffset
FIELD	1551:3	1551:3	13	clumpoffset
LEAF_NODE	1551:3	1551:3	14	clumpoffset
ASSIGN_OP	1551:15	1551:15	12	=
LEAF_NODE	1551:15	1551:15	13	=
RVAL	1551:17	1551:17	12	0
FIELD	1551:17	1551:17	13	0
LEAF_NODE	1551:17	1551:17	14	0
LEAF_NODE	1551:18	1551:18	10	;
ITERATION	1552:3	1554:25	9	
KEYWORD	1552:3	1552:3	10	for
LEAF_NODE	1552:3	1552:3	11	for
LEAF_NODE	1552:7	1552:7	10	(
FOR_INIT	1552:8	1552:47	10	ci = 0 , compptr = sp -> cinfo . d . comp_info ;
EXPR	1552:8	1552:16	11	ci = 0 , compptr = sp -> cinfo . d . comp_info
ASSIGN	1552:8	1552:13	12	ci = 0
LVAL	1552:8	1552:8	13	ci
FIELD	1552:8	1552:8	14	ci
LEAF_NODE	1552:8	1552:8	15	ci
ASSIGN_OP	1552:11	1552:11	13	=
LEAF_NODE	1552:11	1552:11	14	=
RVAL	1552:13	1552:13	13	0
FIELD	1552:13	1552:13	14	0
LEAF_NODE	1552:13	1552:13	15	0
LEAF_NODE	1552:14	1552:14	12	,
ASSIGN	1552:16	1552:26	12	compptr = sp -> cinfo . d . comp_info
LVAL	1552:16	1552:16	13	compptr
FIELD	1552:16	1552:16	14	compptr
LEAF_NODE	1552:16	1552:16	15	compptr
ASSIGN_OP	1552:24	1552:24	13	=
LEAF_NODE	1552:24	1552:24	14	=
RVAL	1552:26	1552:26	13	sp -> cinfo . d . comp_info
FIELD	1552:26	1552:38	14	sp -> cinfo . d . comp_info
LEAF_NODE	1552:26	1552:26	15	sp
LEAF_NODE	1552:28	1552:28	15	->
LEAF_NODE	1552:30	1552:30	15	cinfo
LEAF_NODE	1552:35	1552:35	15	.
LEAF_NODE	1552:36	1552:36	15	d
LEAF_NODE	1552:37	1552:37	15	.
LEAF_NODE	1552:38	1552:38	15	comp_info
LEAF_NODE	1552:47	1552:47	11	;
CONDITION	1553:8	1553:8	10	ci < sp -> cinfo . d . num_components
EXPR	1553:8	1553:13	11	ci < sp -> cinfo . d . num_components
FIELD	1553:8	1553:8	12	ci
LEAF_NODE	1553:8	1553:8	13	ci
REL_OPERATOR	1553:11	1553:11	12	<
LEAF_NODE	1553:11	1553:11	13	<
FIELD	1553:13	1553:25	12	sp -> cinfo . d . num_components
LEAF_NODE	1553:13	1553:13	13	sp
LEAF_NODE	1553:15	1553:15	13	->
LEAF_NODE	1553:17	1553:17	13	cinfo
LEAF_NODE	1553:22	1553:22	13	.
LEAF_NODE	1553:23	1553:23	13	d
LEAF_NODE	1553:24	1553:24	13	.
LEAF_NODE	1553:25	1553:25	13	num_components
LEAF_NODE	1553:39	1553:39	10	;
FOR_EXPR	1554:8	1554:8	10	ci ++ , compptr ++
EXPR	1554:8	1554:14	11	ci ++ , compptr ++
FIELD	1554:8	1554:10	12	ci ++
LEAF_NODE	1554:8	1554:8	13	ci
LEAF_NODE	1554:10	1554:10	13	++
LEAF_NODE	1554:12	1554:12	12	,
FIELD	1554:14	1554:21	12	compptr ++
LEAF_NODE	1554:14	1554:14	13	compptr
LEAF_NODE	1554:21	1554:21	13	++
LEAF_NODE	1554:23	1554:23	10	)
STATEMENTS	1554:25	1591:3	10	
LEAF_NODE	1554:25	1554:25	11	{
STATEMENTS	1555:4	1559:4	11	
SIMPLE_DECL	1555:4	1555:38	12	int hsamp ; hsamp = compptr -> h_samp_factor ;
VAR_DECL	1555:4	1555:8	13	int hsamp ; hsamp = compptr -> h_samp_factor
TYPE	1555:4	1555:4	14	int
TYPE_NAME	1555:4	1555:4	15	int
LEAF_NODE	1555:4	1555:4	16	int
NAME	1555:8	1555:8	14	hsamp
LEAF_NODE	1555:8	1555:8	15	hsamp
LEAF_NODE	0:0	0:0	14	;
INIT	1555:8	1555:8	14	hsamp = compptr -> h_samp_factor
ASSIGN	1555:8	1555:16	15	hsamp = compptr -> h_samp_factor
LVAL	1555:8	1555:8	16	hsamp
NAME	1555:8	1555:8	17	hsamp
LEAF_NODE	1555:8	1555:8	18	hsamp
ASSIGN_OP	1555:14	1555:14	16	=
LEAF_NODE	1555:14	1555:14	17	=
RVAL	1555:16	1555:16	16	compptr -> h_samp_factor
FIELD	1555:16	1555:25	17	compptr -> h_samp_factor
LEAF_NODE	1555:16	1555:16	18	compptr
LEAF_NODE	1555:23	1555:23	18	->
LEAF_NODE	1555:25	1555:25	18	h_samp_factor
LEAF_NODE	1555:38	1555:38	13	;
SIMPLE_DECL	1556:4	1556:38	12	int vsamp ; vsamp = compptr -> v_samp_factor ;
VAR_DECL	1556:4	1556:8	13	int vsamp ; vsamp = compptr -> v_samp_factor
TYPE	1556:4	1556:4	14	int
TYPE_NAME	1556:4	1556:4	15	int
LEAF_NODE	1556:4	1556:4	16	int
NAME	1556:8	1556:8	14	vsamp
LEAF_NODE	1556:8	1556:8	15	vsamp
LEAF_NODE	0:0	0:0	14	;
INIT	1556:8	1556:8	14	vsamp = compptr -> v_samp_factor
ASSIGN	1556:8	1556:16	15	vsamp = compptr -> v_samp_factor
LVAL	1556:8	1556:8	16	vsamp
NAME	1556:8	1556:8	17	vsamp
LEAF_NODE	1556:8	1556:8	18	vsamp
ASSIGN_OP	1556:14	1556:14	16	=
LEAF_NODE	1556:14	1556:14	17	=
RVAL	1556:16	1556:16	16	compptr -> v_samp_factor
FIELD	1556:16	1556:25	17	compptr -> v_samp_factor
LEAF_NODE	1556:16	1556:16	18	compptr
LEAF_NODE	1556:23	1556:23	18	->
LEAF_NODE	1556:25	1556:25	18	v_samp_factor
LEAF_NODE	1556:38	1556:38	13	;
SIMPLE_DECL	1557:4	1557:12	12	int ypos ;
VAR_DECL	1557:4	1557:8	13	int ypos
TYPE	1557:4	1557:4	14	int
TYPE_NAME	1557:4	1557:4	15	int
LEAF_NODE	1557:4	1557:4	16	int
NAME	1557:8	1557:8	14	ypos
LEAF_NODE	1557:8	1557:8	15	ypos
LEAF_NODE	1557:12	1557:12	13	;
ITERATION	1559:4	1559:41	12	
KEYWORD	1559:4	1559:4	13	for
LEAF_NODE	1559:4	1559:4	14	for
LEAF_NODE	1559:8	1559:8	13	(
FOR_INIT	1559:9	1559:17	13	ypos = 0 ;
EXPR	1559:9	1559:9	14	ypos = 0
ASSIGN	1559:9	1559:16	15	ypos = 0
LVAL	1559:9	1559:9	16	ypos
FIELD	1559:9	1559:9	17	ypos
LEAF_NODE	1559:9	1559:9	18	ypos
ASSIGN_OP	1559:14	1559:14	16	=
LEAF_NODE	1559:14	1559:14	17	=
RVAL	1559:16	1559:16	16	0
FIELD	1559:16	1559:16	17	0
LEAF_NODE	1559:16	1559:16	18	0
LEAF_NODE	1559:17	1559:17	14	;
CONDITION	1559:19	1559:19	13	ypos < vsamp
EXPR	1559:19	1559:26	14	ypos < vsamp
FIELD	1559:19	1559:19	15	ypos
LEAF_NODE	1559:19	1559:19	16	ypos
REL_OPERATOR	1559:24	1559:24	15	<
LEAF_NODE	1559:24	1559:24	16	<
FIELD	1559:26	1559:26	15	vsamp
LEAF_NODE	1559:26	1559:26	16	vsamp
LEAF_NODE	1559:31	1559:31	13	;
FOR_EXPR	1559:33	1559:33	13	ypos ++
EXPR	1559:33	1559:33	14	ypos ++
FIELD	1559:33	1559:37	15	ypos ++
LEAF_NODE	1559:33	1559:33	16	ypos
LEAF_NODE	1559:37	1559:37	16	++
LEAF_NODE	1559:39	1559:39	13	)
STATEMENTS	1559:41	1590:4	13	
LEAF_NODE	1559:41	1559:41	14	{
STATEMENTS	1560:5	1589:5	14	
SIMPLE_DECL	1560:5	1560:67	15	JSAMPLE * inptr ; inptr = sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ] ;
VAR_DECL	1560:5	1560:14	16	JSAMPLE * inptr ; inptr = sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ]
TYPE	1560:5	1560:13	17	JSAMPLE *
TYPE_NAME	1560:5	1560:5	18	JSAMPLE
LEAF_NODE	1560:5	1560:5	19	JSAMPLE
POINTER	1560:13	1560:13	18	*
LEAF_NODE	1560:13	1560:13	19	*
NAME	1560:14	1560:14	17	inptr
LEAF_NODE	1560:14	1560:14	18	inptr
LEAF_NODE	0:0	0:0	17	;
INIT	1560:14	1560:14	17	inptr = sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ]
ASSIGN	1560:14	1560:22	18	inptr = sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ]
LVAL	1560:14	1560:14	19	inptr
NAME	1560:14	1560:14	20	inptr
LEAF_NODE	1560:14	1560:14	21	inptr
ASSIGN_OP	1560:20	1560:20	19	=
LEAF_NODE	1560:20	1560:20	20	=
RVAL	1560:22	1560:22	19	sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ]
FIELD	1560:22	1560:66	20	sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ]
LEAF_NODE	1560:22	1560:22	21	sp
LEAF_NODE	1560:24	1560:24	21	->
LEAF_NODE	1560:26	1560:26	21	ds_buffer
LEAF_NODE	1560:35	1560:35	21	[
EXPR	1560:36	1560:36	21	ci
FIELD	1560:36	1560:36	22	ci
LEAF_NODE	1560:36	1560:36	23	ci
LEAF_NODE	1560:38	1560:38	21	]
LEAF_NODE	1560:39	1560:39	21	[
EXPR	1560:40	1560:62	21	sp -> scancount * vsamp + ypos
FIELD	1560:40	1560:44	22	sp -> scancount
LEAF_NODE	1560:40	1560:40	23	sp
LEAF_NODE	1560:42	1560:42	23	->
LEAF_NODE	1560:44	1560:44	23	scancount
LEAF_NODE	1560:53	1560:53	22	*
FIELD	1560:54	1560:54	22	vsamp
LEAF_NODE	1560:54	1560:54	23	vsamp
LEAF_NODE	1560:60	1560:60	22	+
FIELD	1560:62	1560:62	22	ypos
LEAF_NODE	1560:62	1560:62	23	ypos
LEAF_NODE	1560:66	1560:66	21	]
LEAF_NODE	1560:67	1560:67	16	;
SIMPLE_DECL	1561:5	1561:22	15	JDIMENSION nclump ;
VAR_DECL	1561:5	1561:16	16	JDIMENSION nclump
TYPE	1561:5	1561:5	17	JDIMENSION
TYPE_NAME	1561:5	1561:5	18	JDIMENSION
LEAF_NODE	1561:5	1561:5	19	JDIMENSION
NAME	1561:16	1561:16	17	nclump
LEAF_NODE	1561:16	1561:16	18	nclump
LEAF_NODE	1561:22	1561:22	16	;
SIMPLE_DECL	1563:5	1563:53	15	JSAMPLE * outptr ; outptr = ( JSAMPLE * ) tmpbuf + clumpoffset ;
VAR_DECL	1563:5	1563:14	16	JSAMPLE * outptr ; outptr = ( JSAMPLE * ) tmpbuf + clumpoffset
TYPE	1563:5	1563:13	17	JSAMPLE *
TYPE_NAME	1563:5	1563:5	18	JSAMPLE
LEAF_NODE	1563:5	1563:5	19	JSAMPLE
POINTER	1563:13	1563:13	18	*
LEAF_NODE	1563:13	1563:13	19	*
NAME	1563:14	1563:14	17	outptr
LEAF_NODE	1563:14	1563:14	18	outptr
LEAF_NODE	0:0	0:0	17	;
INIT	1563:14	1563:14	17	outptr = ( JSAMPLE * ) tmpbuf + clumpoffset
ASSIGN	1563:14	1563:23	18	outptr = ( JSAMPLE * ) tmpbuf + clumpoffset
LVAL	1563:14	1563:14	19	outptr
NAME	1563:14	1563:14	20	outptr
LEAF_NODE	1563:14	1563:14	21	outptr
ASSIGN_OP	1563:21	1563:21	19	=
LEAF_NODE	1563:21	1563:21	20	=
RVAL	1563:23	1563:42	19	( JSAMPLE * ) tmpbuf + clumpoffset
LEAF_NODE	1563:23	1563:23	20	(
TYPE_NAME	1563:24	1563:24	20	JSAMPLE
LEAF_NODE	1563:24	1563:24	21	JSAMPLE
LEAF_NODE	1563:31	1563:31	20	*
LEAF_NODE	1563:32	1563:32	20	)
FIELD	1563:33	1563:33	20	tmpbuf
LEAF_NODE	1563:33	1563:33	21	tmpbuf
LEAF_NODE	1563:40	1563:40	20	+
FIELD	1563:42	1563:42	20	clumpoffset
LEAF_NODE	1563:42	1563:42	21	clumpoffset
LEAF_NODE	1563:53	1563:53	16	;
SIMPLE_DECL	1565:5	1565:50	15	JSAMPLE * outptr ; outptr = ( JSAMPLE * ) buf + clumpoffset ;
VAR_DECL	1565:5	1565:14	16	JSAMPLE * outptr ; outptr = ( JSAMPLE * ) buf + clumpoffset
TYPE	1565:5	1565:13	17	JSAMPLE *
TYPE_NAME	1565:5	1565:5	18	JSAMPLE
LEAF_NODE	1565:5	1565:5	19	JSAMPLE
POINTER	1565:13	1565:13	18	*
LEAF_NODE	1565:13	1565:13	19	*
NAME	1565:14	1565:14	17	outptr
LEAF_NODE	1565:14	1565:14	18	outptr
LEAF_NODE	0:0	0:0	17	;
INIT	1565:14	1565:14	17	outptr = ( JSAMPLE * ) buf + clumpoffset
ASSIGN	1565:14	1565:23	18	outptr = ( JSAMPLE * ) buf + clumpoffset
LVAL	1565:14	1565:14	19	outptr
NAME	1565:14	1565:14	20	outptr
LEAF_NODE	1565:14	1565:14	21	outptr
ASSIGN_OP	1565:21	1565:21	19	=
LEAF_NODE	1565:21	1565:21	20	=
RVAL	1565:23	1565:39	19	( JSAMPLE * ) buf + clumpoffset
LEAF_NODE	1565:23	1565:23	20	(
TYPE_NAME	1565:24	1565:24	20	JSAMPLE
LEAF_NODE	1565:24	1565:24	21	JSAMPLE
LEAF_NODE	1565:31	1565:31	20	*
LEAF_NODE	1565:32	1565:32	20	)
FIELD	1565:33	1565:33	20	buf
LEAF_NODE	1565:33	1565:33	21	buf
LEAF_NODE	1565:37	1565:37	20	+
FIELD	1565:39	1565:39	20	clumpoffset
LEAF_NODE	1565:39	1565:39	21	clumpoffset
LEAF_NODE	1565:50	1565:50	16	;
SELECTION	1566:5	1566:97	15	
KEYWORD	1566:5	1566:5	16	if
LEAF_NODE	1566:5	1566:5	17	if
LEAF_NODE	1566:8	1566:8	16	(
CONDITION	1566:9	1566:9	16	cc < ( tmsize_t ) ( clumpoffset + ( tmsize_t ) samples_per_clump * ( clumps_per_line - 1 ) + hsamp )
EXPR	1566:9	1566:94	17	cc < ( tmsize_t ) ( clumpoffset + ( tmsize_t ) samples_per_clump * ( clumps_per_line - 1 ) + hsamp )
FIELD	1566:9	1566:9	18	cc
LEAF_NODE	1566:9	1566:9	19	cc
REL_OPERATOR	1566:12	1566:12	18	<
LEAF_NODE	1566:12	1566:12	19	<
LEAF_NODE	1566:14	1566:14	18	(
TYPE_NAME	1566:15	1566:15	18	tmsize_t
LEAF_NODE	1566:15	1566:15	19	tmsize_t
LEAF_NODE	1566:23	1566:23	18	)
LEAF_NODE	1566:24	1566:24	18	(
FIELD	1566:25	1566:25	18	clumpoffset
LEAF_NODE	1566:25	1566:25	19	clumpoffset
LEAF_NODE	1566:37	1566:37	18	+
LEAF_NODE	1566:39	1566:39	18	(
TYPE_NAME	1566:40	1566:40	18	tmsize_t
LEAF_NODE	1566:40	1566:40	19	tmsize_t
LEAF_NODE	1566:48	1566:48	18	)
FIELD	1566:49	1566:49	18	samples_per_clump
LEAF_NODE	1566:49	1566:49	19	samples_per_clump
LEAF_NODE	1566:66	1566:66	18	*
LEAF_NODE	1566:67	1566:67	18	(
FIELD	1566:68	1566:68	18	clumps_per_line
LEAF_NODE	1566:68	1566:68	19	clumps_per_line
LEAF_NODE	1566:83	1566:83	18	-
FIELD	1566:84	1566:84	18	1
LEAF_NODE	1566:84	1566:84	19	1
LEAF_NODE	1566:85	1566:85	18	)
LEAF_NODE	1566:87	1566:87	18	+
FIELD	1566:89	1566:89	18	hsamp
LEAF_NODE	1566:89	1566:89	19	hsamp
LEAF_NODE	1566:94	1566:94	18	)
LEAF_NODE	1566:95	1566:95	16	)
STATEMENTS	1566:97	1570:5	16	
LEAF_NODE	1566:97	1566:97	17	{
STATEMENTS	1567:6	1569:6	17	
EXPR_STATEMENT	1567:6	1568:91	18	TIFFErrorExt ( tif -> tif_clientdata , "JPEGDecodeRaw" , "application buffer not large enough for all data, possible subsampling issue" ) ;
EXPR	1567:6	1567:6	19	TIFFErrorExt ( tif -> tif_clientdata , "JPEGDecodeRaw" , "application buffer not large enough for all data, possible subsampling issue" )
FUNCTION_CALL	1567:6	1568:90	20	TIFFErrorExt ( tif -> tif_clientdata , "JPEGDecodeRaw" , "application buffer not large enough for all data, possible subsampling issue" )
CALLEE	1567:6	1567:6	21	TIFFErrorExt
LEAF_NODE	1567:6	1567:6	22	TIFFErrorExt
LEAF_NODE	1567:18	1567:18	21	(
ARGUMENT	1567:19	1567:19	21	tif -> tif_clientdata
FIELD	1567:19	1567:24	22	tif -> tif_clientdata
LEAF_NODE	1567:19	1567:19	23	tif
LEAF_NODE	1567:22	1567:22	23	->
LEAF_NODE	1567:24	1567:24	23	tif_clientdata
LEAF_NODE	1567:38	1567:38	21	,
ARGUMENT	1567:40	1567:40	21	"JPEGDecodeRaw"
FIELD	1567:40	1567:40	22	"JPEGDecodeRaw"
LEAF_NODE	1567:40	1567:40	23	"JPEGDecodeRaw"
LEAF_NODE	1567:55	1567:55	21	,
ARGUMENT	1568:12	1568:12	21	"application buffer not large enough for all data, possible subsampling issue"
FIELD	1568:12	1568:12	22	"application buffer not large enough for all data, possible subsampling issue"
LEAF_NODE	1568:12	1568:12	23	"application buffer not large enough for all data, possible subsampling issue"
LEAF_NODE	1568:90	1568:90	21	)
LEAF_NODE	1568:91	1568:91	19	;
JUMP_STATEMENT	1569:6	1569:14	18	return 0 ;
KEYWORD	1569:6	1569:6	19	return
LEAF_NODE	1569:6	1569:6	20	return
DESTINATION	1569:13	1569:13	19	0
EXPR	1569:13	1569:13	20	0
FIELD	1569:13	1569:13	21	0
LEAF_NODE	1569:13	1569:13	22	0
LEAF_NODE	1569:14	1569:14	19	;
LEAF_NODE	1570:5	1570:5	17	}
SELECTION	1573:5	1573:21	15	
KEYWORD	1573:5	1573:5	16	if
LEAF_NODE	1573:5	1573:5	17	if
LEAF_NODE	1573:8	1573:8	16	(
CONDITION	1573:9	1573:9	16	hsamp == 1
EXPR	1573:9	1573:18	17	hsamp == 1
FIELD	1573:9	1573:9	18	hsamp
LEAF_NODE	1573:9	1573:9	19	hsamp
EQ_OPERATOR	1573:15	1573:15	18	==
LEAF_NODE	1573:15	1573:15	19	==
FIELD	1573:18	1573:18	18	1
LEAF_NODE	1573:18	1573:18	19	1
LEAF_NODE	1573:19	1573:19	16	)
STATEMENTS	1573:21	1579:5	16	
LEAF_NODE	1573:21	1573:21	17	{
STATEMENTS	1575:6	1575:6	17	
ITERATION	1575:6	1575:53	18	
KEYWORD	1575:6	1575:6	19	for
LEAF_NODE	1575:6	1575:6	20	for
LEAF_NODE	1575:10	1575:10	19	(
FOR_INIT	1575:11	1575:35	19	nclump = clumps_per_line ;
EXPR	1575:11	1575:11	20	nclump = clumps_per_line
ASSIGN	1575:11	1575:20	21	nclump = clumps_per_line
LVAL	1575:11	1575:11	22	nclump
FIELD	1575:11	1575:11	23	nclump
LEAF_NODE	1575:11	1575:11	24	nclump
ASSIGN_OP	1575:18	1575:18	22	=
LEAF_NODE	1575:18	1575:18	23	=
RVAL	1575:20	1575:20	22	clumps_per_line
FIELD	1575:20	1575:20	23	clumps_per_line
LEAF_NODE	1575:20	1575:20	24	clumps_per_line
LEAF_NODE	1575:35	1575:35	20	;
CONDITION	1575:37	1575:37	19	nclump -- > 0
EXPR	1575:37	1575:48	20	nclump -- > 0
FIELD	1575:37	1575:43	21	nclump --
LEAF_NODE	1575:37	1575:37	22	nclump
LEAF_NODE	1575:43	1575:43	22	--
REL_OPERATOR	1575:46	1575:46	21	>
LEAF_NODE	1575:46	1575:46	22	>
FIELD	1575:48	1575:48	21	0
LEAF_NODE	1575:48	1575:48	22	0
LEAF_NODE	1575:49	1575:49	19	;
LEAF_NODE	0:0	0:0	19	FOR_EXPR
LEAF_NODE	1575:51	1575:51	19	)
STATEMENTS	1575:53	1578:6	19	
LEAF_NODE	1575:53	1575:53	20	{
STATEMENTS	1576:7	1577:7	20	
EXPR_STATEMENT	1576:7	1576:27	21	outptr [ 0 ] = * inptr ++ ;
EXPR	1576:7	1576:7	22	outptr [ 0 ] = * inptr ++
ASSIGN	1576:7	1576:19	23	outptr [ 0 ] = * inptr ++
LVAL	1576:7	1576:7	24	outptr [ 0 ]
FIELD	1576:7	1576:15	25	outptr [ 0 ]
LEAF_NODE	1576:7	1576:7	26	outptr
LEAF_NODE	1576:13	1576:13	26	[
EXPR	1576:14	1576:14	26	0
FIELD	1576:14	1576:14	27	0
LEAF_NODE	1576:14	1576:14	28	0
LEAF_NODE	1576:15	1576:15	26	]
ASSIGN_OP	1576:17	1576:17	24	=
LEAF_NODE	1576:17	1576:17	25	=
RVAL	1576:19	1576:19	24	* inptr ++
UNARY_EXPR	1576:19	1576:20	25	* inptr ++
UNARY_OPERATOR	1576:19	1576:19	26	*
LEAF_NODE	1576:19	1576:19	27	*
FIELD	1576:20	1576:25	26	inptr ++
LEAF_NODE	1576:20	1576:20	27	inptr
LEAF_NODE	1576:25	1576:25	27	++
LEAF_NODE	1576:27	1576:27	22	;
EXPR_STATEMENT	1577:7	1577:34	21	outptr += samples_per_clump ;
EXPR	1577:7	1577:7	22	outptr += samples_per_clump
ASSIGN	1577:7	1577:17	23	outptr += samples_per_clump
LVAL	1577:7	1577:7	24	outptr
FIELD	1577:7	1577:7	25	outptr
LEAF_NODE	1577:7	1577:7	26	outptr
ASSIGN_OP	1577:14	1577:14	24	+=
LEAF_NODE	1577:14	1577:14	25	+=
RVAL	1577:17	1577:17	24	samples_per_clump
FIELD	1577:17	1577:17	25	samples_per_clump
LEAF_NODE	1577:17	1577:17	26	samples_per_clump
LEAF_NODE	1577:34	1577:34	22	;
LEAF_NODE	1578:6	1578:6	20	}
LEAF_NODE	1579:5	1579:5	17	}
SELECTION	1579:7	1579:12	15	
KEYWORD	1579:7	1579:7	16	else
LEAF_NODE	1579:7	1579:7	17	else
STATEMENTS	1579:12	1588:5	16	
LEAF_NODE	1579:12	1579:12	17	{
STATEMENTS	1580:6	1583:6	17	
SIMPLE_DECL	1580:6	1580:14	18	int xpos ;
VAR_DECL	1580:6	1580:10	19	int xpos
TYPE	1580:6	1580:6	20	int
TYPE_NAME	1580:6	1580:6	21	int
LEAF_NODE	1580:6	1580:6	22	int
NAME	1580:10	1580:10	20	xpos
LEAF_NODE	1580:10	1580:10	21	xpos
LEAF_NODE	1580:14	1580:14	19	;
ITERATION	1583:6	1583:53	18	
KEYWORD	1583:6	1583:6	19	for
LEAF_NODE	1583:6	1583:6	20	for
LEAF_NODE	1583:10	1583:10	19	(
FOR_INIT	1583:11	1583:35	19	nclump = clumps_per_line ;
EXPR	1583:11	1583:11	20	nclump = clumps_per_line
ASSIGN	1583:11	1583:20	21	nclump = clumps_per_line
LVAL	1583:11	1583:11	22	nclump
FIELD	1583:11	1583:11	23	nclump
LEAF_NODE	1583:11	1583:11	24	nclump
ASSIGN_OP	1583:18	1583:18	22	=
LEAF_NODE	1583:18	1583:18	23	=
RVAL	1583:20	1583:20	22	clumps_per_line
FIELD	1583:20	1583:20	23	clumps_per_line
LEAF_NODE	1583:20	1583:20	24	clumps_per_line
LEAF_NODE	1583:35	1583:35	20	;
CONDITION	1583:37	1583:37	19	nclump -- > 0
EXPR	1583:37	1583:48	20	nclump -- > 0
FIELD	1583:37	1583:43	21	nclump --
LEAF_NODE	1583:37	1583:37	22	nclump
LEAF_NODE	1583:43	1583:43	22	--
REL_OPERATOR	1583:46	1583:46	21	>
LEAF_NODE	1583:46	1583:46	22	>
FIELD	1583:48	1583:48	21	0
LEAF_NODE	1583:48	1583:48	22	0
LEAF_NODE	1583:49	1583:49	19	;
LEAF_NODE	0:0	0:0	19	FOR_EXPR
LEAF_NODE	1583:51	1583:51	19	)
STATEMENTS	1583:53	1587:6	19	
LEAF_NODE	1583:53	1583:53	20	{
STATEMENTS	1584:7	1586:7	20	
ITERATION	1584:7	1585:8	21	
KEYWORD	1584:7	1584:7	22	for
LEAF_NODE	1584:7	1584:7	23	for
LEAF_NODE	1584:11	1584:11	22	(
FOR_INIT	1584:12	1584:20	22	xpos = 0 ;
EXPR	1584:12	1584:12	23	xpos = 0
ASSIGN	1584:12	1584:19	24	xpos = 0
LVAL	1584:12	1584:12	25	xpos
FIELD	1584:12	1584:12	26	xpos
LEAF_NODE	1584:12	1584:12	27	xpos
ASSIGN_OP	1584:17	1584:17	25	=
LEAF_NODE	1584:17	1584:17	26	=
RVAL	1584:19	1584:19	25	0
FIELD	1584:19	1584:19	26	0
LEAF_NODE	1584:19	1584:19	27	0
LEAF_NODE	1584:20	1584:20	23	;
CONDITION	1584:22	1584:22	22	xpos < hsamp
EXPR	1584:22	1584:29	23	xpos < hsamp
FIELD	1584:22	1584:22	24	xpos
LEAF_NODE	1584:22	1584:22	25	xpos
REL_OPERATOR	1584:27	1584:27	24	<
LEAF_NODE	1584:27	1584:27	25	<
FIELD	1584:29	1584:29	24	hsamp
LEAF_NODE	1584:29	1584:29	25	hsamp
LEAF_NODE	1584:34	1584:34	22	;
FOR_EXPR	1584:36	1584:36	22	xpos ++
EXPR	1584:36	1584:36	23	xpos ++
FIELD	1584:36	1584:40	24	xpos ++
LEAF_NODE	1584:36	1584:36	25	xpos
LEAF_NODE	1584:40	1584:40	25	++
LEAF_NODE	1584:42	1584:42	22	)
STATEMENTS	1585:8	1585:8	22	
EXPR_STATEMENT	1585:8	1585:31	23	outptr [ xpos ] = * inptr ++ ;
EXPR	1585:8	1585:8	24	outptr [ xpos ] = * inptr ++
ASSIGN	1585:8	1585:23	25	outptr [ xpos ] = * inptr ++
LVAL	1585:8	1585:8	26	outptr [ xpos ]
FIELD	1585:8	1585:19	27	outptr [ xpos ]
LEAF_NODE	1585:8	1585:8	28	outptr
LEAF_NODE	1585:14	1585:14	28	[
EXPR	1585:15	1585:15	28	xpos
FIELD	1585:15	1585:15	29	xpos
LEAF_NODE	1585:15	1585:15	30	xpos
LEAF_NODE	1585:19	1585:19	28	]
ASSIGN_OP	1585:21	1585:21	26	=
LEAF_NODE	1585:21	1585:21	27	=
RVAL	1585:23	1585:23	26	* inptr ++
UNARY_EXPR	1585:23	1585:24	27	* inptr ++
UNARY_OPERATOR	1585:23	1585:23	28	*
LEAF_NODE	1585:23	1585:23	29	*
FIELD	1585:24	1585:29	28	inptr ++
LEAF_NODE	1585:24	1585:24	29	inptr
LEAF_NODE	1585:29	1585:29	29	++
LEAF_NODE	1585:31	1585:31	24	;
EXPR_STATEMENT	1586:7	1586:34	21	outptr += samples_per_clump ;
EXPR	1586:7	1586:7	22	outptr += samples_per_clump
ASSIGN	1586:7	1586:17	23	outptr += samples_per_clump
LVAL	1586:7	1586:7	24	outptr
FIELD	1586:7	1586:7	25	outptr
LEAF_NODE	1586:7	1586:7	26	outptr
ASSIGN_OP	1586:14	1586:14	24	+=
LEAF_NODE	1586:14	1586:14	25	+=
RVAL	1586:17	1586:17	24	samples_per_clump
FIELD	1586:17	1586:17	25	samples_per_clump
LEAF_NODE	1586:17	1586:17	26	samples_per_clump
LEAF_NODE	1586:34	1586:34	22	;
LEAF_NODE	1587:6	1587:6	20	}
LEAF_NODE	1588:5	1588:5	17	}
EXPR_STATEMENT	1589:5	1589:25	15	clumpoffset += hsamp ;
EXPR	1589:5	1589:5	16	clumpoffset += hsamp
ASSIGN	1589:5	1589:20	17	clumpoffset += hsamp
LVAL	1589:5	1589:5	18	clumpoffset
FIELD	1589:5	1589:5	19	clumpoffset
LEAF_NODE	1589:5	1589:5	20	clumpoffset
ASSIGN_OP	1589:17	1589:17	18	+=
LEAF_NODE	1589:17	1589:17	19	+=
RVAL	1589:20	1589:20	18	hsamp
FIELD	1589:20	1589:20	19	hsamp
LEAF_NODE	1589:20	1589:20	20	hsamp
LEAF_NODE	1589:25	1589:25	16	;
LEAF_NODE	1590:4	1590:4	14	}
LEAF_NODE	1591:3	1591:3	11	}
LEAF_NODE	1594:3	1594:3	9	{
STATEMENTS	1595:4	1604:4	9	
SELECTION	1595:4	1596:4	10	
KEYWORD	1595:4	1595:4	11	if
LEAF_NODE	1595:4	1595:4	12	if
LEAF_NODE	1595:7	1595:7	11	(
CONDITION	1595:8	1595:8	11	sp -> cinfo . d . data_precision == 8
EXPR	1595:8	1595:38	12	sp -> cinfo . d . data_precision == 8
FIELD	1595:8	1595:20	13	sp -> cinfo . d . data_precision
LEAF_NODE	1595:8	1595:8	14	sp
LEAF_NODE	1595:10	1595:10	14	->
LEAF_NODE	1595:12	1595:12	14	cinfo
LEAF_NODE	1595:17	1595:17	14	.
LEAF_NODE	1595:18	1595:18	14	d
LEAF_NODE	1595:19	1595:19	14	.
LEAF_NODE	1595:20	1595:20	14	data_precision
EQ_OPERATOR	1595:35	1595:35	13	==
LEAF_NODE	1595:35	1595:35	14	==
FIELD	1595:38	1595:38	13	8
LEAF_NODE	1595:38	1595:38	14	8
LEAF_NODE	1595:39	1595:39	11	)
STATEMENTS	1596:4	1603:4	11	
LEAF_NODE	1596:4	1596:4	12	{
STATEMENTS	1597:5	1599:5	12	
SIMPLE_DECL	1597:5	1597:12	13	int i ; i = 0 ;
VAR_DECL	1597:5	1597:9	14	int i ; i = 0
TYPE	1597:5	1597:5	15	int
TYPE_NAME	1597:5	1597:5	16	int
LEAF_NODE	1597:5	1597:5	17	int
NAME	1597:9	1597:9	15	i
LEAF_NODE	1597:9	1597:9	16	i
LEAF_NODE	0:0	0:0	15	;
INIT	1597:9	1597:9	15	i = 0
ASSIGN	1597:9	1597:11	16	i = 0
LVAL	1597:9	1597:9	17	i
NAME	1597:9	1597:9	18	i
LEAF_NODE	1597:9	1597:9	19	i
ASSIGN_OP	1597:10	1597:10	17	=
LEAF_NODE	1597:10	1597:10	18	=
RVAL	1597:11	1597:11	17	0
FIELD	1597:11	1597:11	18	0
LEAF_NODE	1597:11	1597:11	19	0
LEAF_NODE	1597:12	1597:12	14	;
SIMPLE_DECL	1598:5	1598:68	13	int len ; len = sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ;
VAR_DECL	1598:5	1598:9	14	int len ; len = sp -> cinfo . d . output_width * sp -> cinfo . d . num_components
TYPE	1598:5	1598:5	15	int
TYPE_NAME	1598:5	1598:5	16	int
LEAF_NODE	1598:5	1598:5	17	int
NAME	1598:9	1598:9	15	len
LEAF_NODE	1598:9	1598:9	16	len
LEAF_NODE	0:0	0:0	15	;
INIT	1598:9	1598:9	15	len = sp -> cinfo . d . output_width * sp -> cinfo . d . num_components
ASSIGN	1598:9	1598:15	16	len = sp -> cinfo . d . output_width * sp -> cinfo . d . num_components
LVAL	1598:9	1598:9	17	len
NAME	1598:9	1598:9	18	len
LEAF_NODE	1598:9	1598:9	19	len
ASSIGN_OP	1598:13	1598:13	17	=
LEAF_NODE	1598:13	1598:13	18	=
RVAL	1598:15	1598:42	17	sp -> cinfo . d . output_width * sp -> cinfo . d . num_components
FIELD	1598:15	1598:27	18	sp -> cinfo . d . output_width
LEAF_NODE	1598:15	1598:15	19	sp
LEAF_NODE	1598:17	1598:17	19	->
LEAF_NODE	1598:19	1598:19	19	cinfo
LEAF_NODE	1598:24	1598:24	19	.
LEAF_NODE	1598:25	1598:25	19	d
LEAF_NODE	1598:26	1598:26	19	.
LEAF_NODE	1598:27	1598:27	19	output_width
LEAF_NODE	1598:40	1598:40	18	*
FIELD	1598:42	1598:54	18	sp -> cinfo . d . num_components
LEAF_NODE	1598:42	1598:42	19	sp
LEAF_NODE	1598:44	1598:44	19	->
LEAF_NODE	1598:46	1598:46	19	cinfo
LEAF_NODE	1598:51	1598:51	19	.
LEAF_NODE	1598:52	1598:52	19	d
LEAF_NODE	1598:53	1598:53	19	.
LEAF_NODE	1598:54	1598:54	19	num_components
LEAF_NODE	1598:68	1598:68	14	;
ITERATION	1599:5	1600:5	13	
KEYWORD	1599:5	1599:5	14	for
LEAF_NODE	1599:5	1599:5	15	for
LEAF_NODE	1599:9	1599:9	14	(
FOR_INIT	1599:10	1599:13	14	i = 0 ;
EXPR	1599:10	1599:10	15	i = 0
ASSIGN	1599:10	1599:12	16	i = 0
LVAL	1599:10	1599:10	17	i
FIELD	1599:10	1599:10	18	i
LEAF_NODE	1599:10	1599:10	19	i
ASSIGN_OP	1599:11	1599:11	17	=
LEAF_NODE	1599:11	1599:11	18	=
RVAL	1599:12	1599:12	17	0
FIELD	1599:12	1599:12	18	0
LEAF_NODE	1599:12	1599:12	19	0
LEAF_NODE	1599:13	1599:13	15	;
CONDITION	1599:15	1599:15	14	i < len
EXPR	1599:15	1599:17	15	i < len
FIELD	1599:15	1599:15	16	i
LEAF_NODE	1599:15	1599:15	17	i
REL_OPERATOR	1599:16	1599:16	16	<
LEAF_NODE	1599:16	1599:16	17	<
FIELD	1599:17	1599:17	16	len
LEAF_NODE	1599:17	1599:17	17	len
LEAF_NODE	1599:20	1599:20	14	;
FOR_EXPR	1599:22	1599:22	14	i ++
EXPR	1599:22	1599:22	15	i ++
FIELD	1599:22	1599:23	16	i ++
LEAF_NODE	1599:22	1599:22	17	i
LEAF_NODE	1599:23	1599:23	17	++
LEAF_NODE	1599:25	1599:25	14	)
STATEMENTS	1600:5	1602:5	14	
LEAF_NODE	1600:5	1600:5	15	{
STATEMENTS	1601:6	1601:6	15	
EXPR_STATEMENT	1601:6	1601:49	16	( ( unsigned char * ) buf ) [ i ] = tmpbuf [ i ] & 0xff ;
EXPR	1601:6	1601:6	17	( ( unsigned char * ) buf ) [ i ] = tmpbuf [ i ] & 0xff
ASSIGN	1601:6	1601:33	18	( ( unsigned char * ) buf ) [ i ] = tmpbuf [ i ] & 0xff
LVAL	1601:6	1601:29	19	( ( unsigned char * ) buf ) [ i ]
LEAF_NODE	1601:6	1601:6	20	(
LEAF_NODE	1601:7	1601:7	20	(
TYPE_NAME	1601:8	1601:17	20	unsigned char
LEAF_NODE	1601:8	1601:8	21	unsigned
LEAF_NODE	1601:17	1601:17	21	char
LEAF_NODE	1601:21	1601:21	20	*
LEAF_NODE	1601:22	1601:22	20	)
FIELD	1601:23	1601:23	20	buf
LEAF_NODE	1601:23	1601:23	21	buf
LEAF_NODE	1601:26	1601:26	20	)
LEAF_NODE	1601:27	1601:27	20	[
EXPR	1601:28	1601:28	20	i
FIELD	1601:28	1601:28	21	i
LEAF_NODE	1601:28	1601:28	22	i
LEAF_NODE	1601:29	1601:29	20	]
ASSIGN_OP	1601:31	1601:31	19	=
LEAF_NODE	1601:31	1601:31	20	=
RVAL	1601:33	1601:45	19	tmpbuf [ i ] & 0xff
FIELD	1601:33	1601:41	20	tmpbuf [ i ]
LEAF_NODE	1601:33	1601:33	21	tmpbuf
LEAF_NODE	1601:39	1601:39	21	[
EXPR	1601:40	1601:40	21	i
FIELD	1601:40	1601:40	22	i
LEAF_NODE	1601:40	1601:40	23	i
LEAF_NODE	1601:41	1601:41	21	]
LEAF_NODE	1601:43	1601:43	20	&
FIELD	1601:45	1601:45	20	0xff
LEAF_NODE	1601:45	1601:45	21	0xff
LEAF_NODE	1601:49	1601:49	17	;
LEAF_NODE	1602:5	1602:5	15	}
LEAF_NODE	1603:4	1603:4	12	}
SELECTION	1604:4	1605:4	10	
KEYWORD	1604:4	1604:4	11	else
LEAF_NODE	1604:4	1604:4	12	else
STATEMENTS	1605:4	1618:4	11	
LEAF_NODE	1605:4	1605:4	12	{
STATEMENTS	1606:5	1609:5	12	
SIMPLE_DECL	1606:5	1607:43	13	int value_pairs ; value_pairs = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) / 2 ;
VAR_DECL	1606:5	1606:9	14	int value_pairs ; value_pairs = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) / 2
TYPE	1606:5	1606:5	15	int
TYPE_NAME	1606:5	1606:5	16	int
LEAF_NODE	1606:5	1606:5	17	int
NAME	1606:9	1606:9	15	value_pairs
LEAF_NODE	1606:9	1606:9	16	value_pairs
LEAF_NODE	0:0	0:0	15	;
INIT	1606:9	1606:9	15	value_pairs = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) / 2
ASSIGN	1606:9	1606:23	16	value_pairs = ( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) / 2
LVAL	1606:9	1606:9	17	value_pairs
NAME	1606:9	1606:9	18	value_pairs
LEAF_NODE	1606:9	1606:9	19	value_pairs
ASSIGN_OP	1606:21	1606:21	17	=
LEAF_NODE	1606:21	1606:21	18	=
RVAL	1606:23	1607:42	17	( sp -> cinfo . d . output_width * sp -> cinfo . d . num_components ) / 2
LEAF_NODE	1606:23	1606:23	18	(
FIELD	1606:24	1606:36	18	sp -> cinfo . d . output_width
LEAF_NODE	1606:24	1606:24	19	sp
LEAF_NODE	1606:26	1606:26	19	->
LEAF_NODE	1606:28	1606:28	19	cinfo
LEAF_NODE	1606:33	1606:33	19	.
LEAF_NODE	1606:34	1606:34	19	d
LEAF_NODE	1606:35	1606:35	19	.
LEAF_NODE	1606:36	1606:36	19	output_width
LEAF_NODE	1607:10	1607:10	18	*
FIELD	1607:12	1607:24	18	sp -> cinfo . d . num_components
LEAF_NODE	1607:12	1607:12	19	sp
LEAF_NODE	1607:14	1607:14	19	->
LEAF_NODE	1607:16	1607:16	19	cinfo
LEAF_NODE	1607:21	1607:21	19	.
LEAF_NODE	1607:22	1607:22	19	d
LEAF_NODE	1607:23	1607:23	19	.
LEAF_NODE	1607:24	1607:24	19	num_components
LEAF_NODE	1607:38	1607:38	18	)
LEAF_NODE	1607:40	1607:40	18	/
FIELD	1607:42	1607:42	18	2
LEAF_NODE	1607:42	1607:42	19	2
LEAF_NODE	1607:43	1607:43	14	;
SIMPLE_DECL	1608:5	1608:14	13	int iPair ;
VAR_DECL	1608:5	1608:9	14	int iPair
TYPE	1608:5	1608:5	15	int
TYPE_NAME	1608:5	1608:5	16	int
LEAF_NODE	1608:5	1608:5	17	int
NAME	1608:9	1608:9	15	iPair
LEAF_NODE	1608:9	1608:9	16	iPair
LEAF_NODE	1608:14	1608:14	14	;
ITERATION	1609:5	1610:5	13	
KEYWORD	1609:5	1609:5	14	for
LEAF_NODE	1609:5	1609:5	15	for
LEAF_NODE	1609:8	1609:8	14	(
FOR_INIT	1609:10	1609:19	14	iPair = 0 ;
EXPR	1609:10	1609:10	15	iPair = 0
ASSIGN	1609:10	1609:18	16	iPair = 0
LVAL	1609:10	1609:10	17	iPair
FIELD	1609:10	1609:10	18	iPair
LEAF_NODE	1609:10	1609:10	19	iPair
ASSIGN_OP	1609:16	1609:16	17	=
LEAF_NODE	1609:16	1609:16	18	=
RVAL	1609:18	1609:18	17	0
FIELD	1609:18	1609:18	18	0
LEAF_NODE	1609:18	1609:18	19	0
LEAF_NODE	1609:19	1609:19	15	;
CONDITION	1609:21	1609:21	14	iPair < value_pairs
EXPR	1609:21	1609:29	15	iPair < value_pairs
FIELD	1609:21	1609:21	16	iPair
LEAF_NODE	1609:21	1609:21	17	iPair
REL_OPERATOR	1609:27	1609:27	16	<
LEAF_NODE	1609:27	1609:27	17	<
FIELD	1609:29	1609:29	16	value_pairs
LEAF_NODE	1609:29	1609:29	17	value_pairs
LEAF_NODE	1609:40	1609:40	14	;
FOR_EXPR	1609:42	1609:42	14	iPair ++
EXPR	1609:42	1609:42	15	iPair ++
FIELD	1609:42	1609:47	16	iPair ++
LEAF_NODE	1609:42	1609:42	17	iPair
LEAF_NODE	1609:47	1609:47	17	++
LEAF_NODE	1609:50	1609:50	14	)
STATEMENTS	1610:5	1617:5	14	
LEAF_NODE	1610:5	1610:5	15	{
STATEMENTS	1611:6	1616:6	15	
SIMPLE_DECL	1611:6	1611:66	16	unsigned char * out_ptr ; out_ptr = ( ( unsigned char * ) buf ) + iPair * 3 ;
VAR_DECL	1611:6	1611:21	17	unsigned char * out_ptr ; out_ptr = ( ( unsigned char * ) buf ) + iPair * 3
TYPE	1611:6	1611:20	18	unsigned char *
TYPE_NAME	1611:6	1611:15	19	unsigned char
LEAF_NODE	1611:6	1611:6	20	unsigned
LEAF_NODE	1611:15	1611:15	20	char
POINTER	1611:20	1611:20	19	*
LEAF_NODE	1611:20	1611:20	20	*
NAME	1611:21	1611:21	18	out_ptr
LEAF_NODE	1611:21	1611:21	19	out_ptr
LEAF_NODE	0:0	0:0	18	;
INIT	1611:21	1611:21	18	out_ptr = ( ( unsigned char * ) buf ) + iPair * 3
ASSIGN	1611:21	1611:31	19	out_ptr = ( ( unsigned char * ) buf ) + iPair * 3
LVAL	1611:21	1611:21	20	out_ptr
NAME	1611:21	1611:21	21	out_ptr
LEAF_NODE	1611:21	1611:21	22	out_ptr
ASSIGN_OP	1611:29	1611:29	20	=
LEAF_NODE	1611:29	1611:29	21	=
RVAL	1611:31	1611:65	20	( ( unsigned char * ) buf ) + iPair * 3
LEAF_NODE	1611:31	1611:31	21	(
LEAF_NODE	1611:32	1611:32	21	(
TYPE_NAME	1611:33	1611:42	21	unsigned char
LEAF_NODE	1611:33	1611:33	22	unsigned
LEAF_NODE	1611:42	1611:42	22	char
LEAF_NODE	1611:47	1611:47	21	*
LEAF_NODE	1611:48	1611:48	21	)
FIELD	1611:50	1611:50	21	buf
LEAF_NODE	1611:50	1611:50	22	buf
LEAF_NODE	1611:53	1611:53	21	)
LEAF_NODE	1611:55	1611:55	21	+
FIELD	1611:57	1611:57	21	iPair
LEAF_NODE	1611:57	1611:57	22	iPair
LEAF_NODE	1611:63	1611:63	21	*
FIELD	1611:65	1611:65	21	3
LEAF_NODE	1611:65	1611:65	22	3
LEAF_NODE	1611:66	1611:66	17	;
SIMPLE_DECL	1612:6	1612:56	16	JSAMPLE * in_ptr ; in_ptr = ( JSAMPLE * ) ( tmpbuf + iPair * 2 ) ;
VAR_DECL	1612:6	1612:15	17	JSAMPLE * in_ptr ; in_ptr = ( JSAMPLE * ) ( tmpbuf + iPair * 2 )
TYPE	1612:6	1612:14	18	JSAMPLE *
TYPE_NAME	1612:6	1612:6	19	JSAMPLE
LEAF_NODE	1612:6	1612:6	20	JSAMPLE
POINTER	1612:14	1612:14	19	*
LEAF_NODE	1612:14	1612:14	20	*
NAME	1612:15	1612:15	18	in_ptr
LEAF_NODE	1612:15	1612:15	19	in_ptr
LEAF_NODE	0:0	0:0	18	;
INIT	1612:15	1612:15	18	in_ptr = ( JSAMPLE * ) ( tmpbuf + iPair * 2 )
ASSIGN	1612:15	1612:24	19	in_ptr = ( JSAMPLE * ) ( tmpbuf + iPair * 2 )
LVAL	1612:15	1612:15	20	in_ptr
NAME	1612:15	1612:15	21	in_ptr
LEAF_NODE	1612:15	1612:15	22	in_ptr
ASSIGN_OP	1612:22	1612:22	20	=
LEAF_NODE	1612:22	1612:22	21	=
RVAL	1612:24	1612:55	20	( JSAMPLE * ) ( tmpbuf + iPair * 2 )
LEAF_NODE	1612:24	1612:24	21	(
TYPE_NAME	1612:25	1612:25	21	JSAMPLE
LEAF_NODE	1612:25	1612:25	22	JSAMPLE
LEAF_NODE	1612:33	1612:33	21	*
LEAF_NODE	1612:34	1612:34	21	)
LEAF_NODE	1612:36	1612:36	21	(
FIELD	1612:37	1612:37	21	tmpbuf
LEAF_NODE	1612:37	1612:37	22	tmpbuf
LEAF_NODE	1612:44	1612:44	21	+
FIELD	1612:46	1612:46	21	iPair
LEAF_NODE	1612:46	1612:46	22	iPair
LEAF_NODE	1612:52	1612:52	21	*
FIELD	1612:54	1612:54	21	2
LEAF_NODE	1612:54	1612:54	22	2
LEAF_NODE	1612:55	1612:55	21	)
LEAF_NODE	1612:56	1612:56	17	;
EXPR_STATEMENT	1613:6	1613:60	16	out_ptr [ 0 ] = ( unsigned char ) ( ( in_ptr [ 0 ] & 0xff0 ) >> 4 ) ;
EXPR	1613:6	1613:6	17	out_ptr [ 0 ] = ( unsigned char ) ( ( in_ptr [ 0 ] & 0xff0 ) >> 4 )
ASSIGN	1613:6	1613:19	18	out_ptr [ 0 ] = ( unsigned char ) ( ( in_ptr [ 0 ] & 0xff0 ) >> 4 )
LVAL	1613:6	1613:6	19	out_ptr [ 0 ]
FIELD	1613:6	1613:15	20	out_ptr [ 0 ]
LEAF_NODE	1613:6	1613:6	21	out_ptr
LEAF_NODE	1613:13	1613:13	21	[
EXPR	1613:14	1613:14	21	0
FIELD	1613:14	1613:14	22	0
LEAF_NODE	1613:14	1613:14	23	0
LEAF_NODE	1613:15	1613:15	21	]
ASSIGN_OP	1613:17	1613:17	19	=
LEAF_NODE	1613:17	1613:17	20	=
RVAL	1613:19	1613:59	19	( unsigned char ) ( ( in_ptr [ 0 ] & 0xff0 ) >> 4 )
LEAF_NODE	1613:19	1613:19	20	(
TYPE_NAME	1613:20	1613:29	20	unsigned char
LEAF_NODE	1613:20	1613:20	21	unsigned
LEAF_NODE	1613:29	1613:29	21	char
LEAF_NODE	1613:33	1613:33	20	)
LEAF_NODE	1613:34	1613:34	20	(
LEAF_NODE	1613:35	1613:35	20	(
FIELD	1613:36	1613:44	20	in_ptr [ 0 ]
LEAF_NODE	1613:36	1613:36	21	in_ptr
LEAF_NODE	1613:42	1613:42	21	[
EXPR	1613:43	1613:43	21	0
FIELD	1613:43	1613:43	22	0
LEAF_NODE	1613:43	1613:43	23	0
LEAF_NODE	1613:44	1613:44	21	]
LEAF_NODE	1613:46	1613:46	20	&
FIELD	1613:48	1613:48	20	0xff0
LEAF_NODE	1613:48	1613:48	21	0xff0
LEAF_NODE	1613:53	1613:53	20	)
LEAF_NODE	1613:55	1613:55	20	>>
FIELD	1613:58	1613:58	20	4
LEAF_NODE	1613:58	1613:58	21	4
LEAF_NODE	1613:59	1613:59	20	)
LEAF_NODE	1613:60	1613:60	17	;
EXPR_STATEMENT	1614:6	1615:36	16	out_ptr [ 1 ] = ( unsigned char ) ( ( ( in_ptr [ 0 ] & 0xf ) << 4 ) | ( ( in_ptr [ 1 ] & 0xf00 ) >> 8 ) ) ;
EXPR	1614:6	1614:6	17	out_ptr [ 1 ] = ( unsigned char ) ( ( ( in_ptr [ 0 ] & 0xf ) << 4 ) | ( ( in_ptr [ 1 ] & 0xf00 ) >> 8 ) )
ASSIGN	1614:6	1614:19	18	out_ptr [ 1 ] = ( unsigned char ) ( ( ( in_ptr [ 0 ] & 0xf ) << 4 ) | ( ( in_ptr [ 1 ] & 0xf00 ) >> 8 ) )
LVAL	1614:6	1614:6	19	out_ptr [ 1 ]
FIELD	1614:6	1614:15	20	out_ptr [ 1 ]
LEAF_NODE	1614:6	1614:6	21	out_ptr
LEAF_NODE	1614:13	1614:13	21	[
EXPR	1614:14	1614:14	21	1
FIELD	1614:14	1614:14	22	1
LEAF_NODE	1614:14	1614:14	23	1
LEAF_NODE	1614:15	1614:15	21	]
ASSIGN_OP	1614:17	1614:17	19	=
LEAF_NODE	1614:17	1614:17	20	=
RVAL	1614:19	1615:35	19	( unsigned char ) ( ( ( in_ptr [ 0 ] & 0xf ) << 4 ) | ( ( in_ptr [ 1 ] & 0xf00 ) >> 8 ) )
LEAF_NODE	1614:19	1614:19	20	(
TYPE_NAME	1614:20	1614:29	20	unsigned char
LEAF_NODE	1614:20	1614:20	21	unsigned
LEAF_NODE	1614:29	1614:29	21	char
LEAF_NODE	1614:33	1614:33	20	)
LEAF_NODE	1614:34	1614:34	20	(
BIT_OR	1614:35	1615:9	20	( ( in_ptr [ 0 ] & 0xf ) << 4 ) | ( ( in_ptr [ 1 ] & 0xf00 ) >> 8 )
BIT_OR_ELEM	1614:35	1614:58	21	( ( in_ptr [ 0 ] & 0xf ) << 4 )
LEAF_NODE	1614:35	1614:35	22	(
LEAF_NODE	1614:36	1614:36	22	(
FIELD	1614:37	1614:45	22	in_ptr [ 0 ]
LEAF_NODE	1614:37	1614:37	23	in_ptr
LEAF_NODE	1614:43	1614:43	23	[
EXPR	1614:44	1614:44	23	0
FIELD	1614:44	1614:44	24	0
LEAF_NODE	1614:44	1614:44	25	0
LEAF_NODE	1614:45	1614:45	23	]
LEAF_NODE	1614:47	1614:47	22	&
FIELD	1614:49	1614:49	22	0xf
LEAF_NODE	1614:49	1614:49	23	0xf
LEAF_NODE	1614:52	1614:52	22	)
LEAF_NODE	1614:54	1614:54	22	<<
FIELD	1614:57	1614:57	22	4
LEAF_NODE	1614:57	1614:57	23	4
LEAF_NODE	1614:58	1614:58	22	)
LEAF_NODE	1615:7	1615:7	21	|
BIT_OR_ELEM	1615:9	1615:34	21	( ( in_ptr [ 1 ] & 0xf00 ) >> 8 )
LEAF_NODE	1615:9	1615:9	22	(
LEAF_NODE	1615:10	1615:10	22	(
FIELD	1615:11	1615:19	22	in_ptr [ 1 ]
LEAF_NODE	1615:11	1615:11	23	in_ptr
LEAF_NODE	1615:17	1615:17	23	[
EXPR	1615:18	1615:18	23	1
FIELD	1615:18	1615:18	24	1
LEAF_NODE	1615:18	1615:18	25	1
LEAF_NODE	1615:19	1615:19	23	]
LEAF_NODE	1615:21	1615:21	22	&
FIELD	1615:23	1615:23	22	0xf00
LEAF_NODE	1615:23	1615:23	23	0xf00
LEAF_NODE	1615:28	1615:28	22	)
LEAF_NODE	1615:30	1615:30	22	>>
FIELD	1615:33	1615:33	22	8
LEAF_NODE	1615:33	1615:33	23	8
LEAF_NODE	1615:34	1615:34	22	)
LEAF_NODE	1615:35	1615:35	20	)
LEAF_NODE	1615:36	1615:36	17	;
EXPR_STATEMENT	1616:6	1616:61	16	out_ptr [ 2 ] = ( unsigned char ) ( ( ( in_ptr [ 1 ] & 0xff ) >> 0 ) ) ;
EXPR	1616:6	1616:6	17	out_ptr [ 2 ] = ( unsigned char ) ( ( ( in_ptr [ 1 ] & 0xff ) >> 0 ) )
ASSIGN	1616:6	1616:19	18	out_ptr [ 2 ] = ( unsigned char ) ( ( ( in_ptr [ 1 ] & 0xff ) >> 0 ) )
LVAL	1616:6	1616:6	19	out_ptr [ 2 ]
FIELD	1616:6	1616:15	20	out_ptr [ 2 ]
LEAF_NODE	1616:6	1616:6	21	out_ptr
LEAF_NODE	1616:13	1616:13	21	[
EXPR	1616:14	1616:14	21	2
FIELD	1616:14	1616:14	22	2
LEAF_NODE	1616:14	1616:14	23	2
LEAF_NODE	1616:15	1616:15	21	]
ASSIGN_OP	1616:17	1616:17	19	=
LEAF_NODE	1616:17	1616:17	20	=
RVAL	1616:19	1616:60	19	( unsigned char ) ( ( ( in_ptr [ 1 ] & 0xff ) >> 0 ) )
LEAF_NODE	1616:19	1616:19	20	(
TYPE_NAME	1616:20	1616:29	20	unsigned char
LEAF_NODE	1616:20	1616:20	21	unsigned
LEAF_NODE	1616:29	1616:29	21	char
LEAF_NODE	1616:33	1616:33	20	)
LEAF_NODE	1616:34	1616:34	20	(
LEAF_NODE	1616:35	1616:35	20	(
LEAF_NODE	1616:36	1616:36	20	(
FIELD	1616:37	1616:45	20	in_ptr [ 1 ]
LEAF_NODE	1616:37	1616:37	21	in_ptr
LEAF_NODE	1616:43	1616:43	21	[
EXPR	1616:44	1616:44	21	1
FIELD	1616:44	1616:44	22	1
LEAF_NODE	1616:44	1616:44	23	1
LEAF_NODE	1616:45	1616:45	21	]
LEAF_NODE	1616:47	1616:47	20	&
FIELD	1616:49	1616:49	20	0xff
LEAF_NODE	1616:49	1616:49	21	0xff
LEAF_NODE	1616:53	1616:53	20	)
LEAF_NODE	1616:55	1616:55	20	>>
FIELD	1616:58	1616:58	20	0
LEAF_NODE	1616:58	1616:58	21	0
LEAF_NODE	1616:59	1616:59	20	)
LEAF_NODE	1616:60	1616:60	20	)
LEAF_NODE	1616:61	1616:61	17	;
LEAF_NODE	1617:5	1617:5	15	}
LEAF_NODE	1618:4	1618:4	12	}
LEAF_NODE	1619:3	1619:3	9	}
EXPR_STATEMENT	1622:3	1622:19	9	sp -> scancount ++ ;
EXPR	1622:3	1622:3	10	sp -> scancount ++
FIELD	1622:3	1622:17	11	sp -> scancount ++
LEAF_NODE	1622:3	1622:3	12	sp
LEAF_NODE	1622:5	1622:5	12	->
LEAF_NODE	1622:7	1622:7	12	scancount
LEAF_NODE	1622:17	1622:17	12	++
LEAF_NODE	1622:19	1622:19	10	;
EXPR_STATEMENT	1623:3	1623:33	9	tif -> tif_row += sp -> v_sampling ;
EXPR	1623:3	1623:3	10	tif -> tif_row += sp -> v_sampling
ASSIGN	1623:3	1623:19	11	tif -> tif_row += sp -> v_sampling
LVAL	1623:3	1623:3	12	tif -> tif_row
FIELD	1623:3	1623:8	13	tif -> tif_row
LEAF_NODE	1623:3	1623:3	14	tif
LEAF_NODE	1623:6	1623:6	14	->
LEAF_NODE	1623:8	1623:8	14	tif_row
ASSIGN_OP	1623:16	1623:16	12	+=
LEAF_NODE	1623:16	1623:16	13	+=
RVAL	1623:19	1623:19	12	sp -> v_sampling
FIELD	1623:19	1623:23	13	sp -> v_sampling
LEAF_NODE	1623:19	1623:19	14	sp
LEAF_NODE	1623:21	1623:21	14	->
LEAF_NODE	1623:23	1623:23	14	v_sampling
LEAF_NODE	1623:33	1623:33	10	;
EXPR_STATEMENT	1625:3	1625:26	9	buf += sp -> bytesperline ;
EXPR	1625:3	1625:3	10	buf += sp -> bytesperline
ASSIGN	1625:3	1625:10	11	buf += sp -> bytesperline
LVAL	1625:3	1625:3	12	buf
FIELD	1625:3	1625:3	13	buf
LEAF_NODE	1625:3	1625:3	14	buf
ASSIGN_OP	1625:7	1625:7	12	+=
LEAF_NODE	1625:7	1625:7	13	+=
RVAL	1625:10	1625:10	12	sp -> bytesperline
FIELD	1625:10	1625:14	13	sp -> bytesperline
LEAF_NODE	1625:10	1625:10	14	sp
LEAF_NODE	1625:12	1625:12	14	->
LEAF_NODE	1625:14	1625:14	14	bytesperline
LEAF_NODE	1625:26	1625:26	10	;
EXPR_STATEMENT	1626:3	1626:25	9	cc -= sp -> bytesperline ;
EXPR	1626:3	1626:3	10	cc -= sp -> bytesperline
ASSIGN	1626:3	1626:9	11	cc -= sp -> bytesperline
LVAL	1626:3	1626:3	12	cc
FIELD	1626:3	1626:3	13	cc
LEAF_NODE	1626:3	1626:3	14	cc
ASSIGN_OP	1626:6	1626:6	12	-=
LEAF_NODE	1626:6	1626:6	13	-=
RVAL	1626:9	1626:9	12	sp -> bytesperline
FIELD	1626:9	1626:13	13	sp -> bytesperline
LEAF_NODE	1626:9	1626:9	14	sp
LEAF_NODE	1626:11	1626:11	14	->
LEAF_NODE	1626:13	1626:13	14	bytesperline
LEAF_NODE	1626:25	1626:25	10	;
EXPR_STATEMENT	1628:3	1628:26	9	nrows -= sp -> v_sampling ;
EXPR	1628:3	1628:3	10	nrows -= sp -> v_sampling
ASSIGN	1628:3	1628:12	11	nrows -= sp -> v_sampling
LVAL	1628:3	1628:3	12	nrows
FIELD	1628:3	1628:3	13	nrows
LEAF_NODE	1628:3	1628:3	14	nrows
ASSIGN_OP	1628:9	1628:9	12	-=
LEAF_NODE	1628:9	1628:9	13	-=
RVAL	1628:12	1628:12	12	sp -> v_sampling
FIELD	1628:12	1628:16	13	sp -> v_sampling
LEAF_NODE	1628:12	1628:12	14	sp
LEAF_NODE	1628:14	1628:14	14	->
LEAF_NODE	1628:16	1628:16	14	v_sampling
LEAF_NODE	1628:26	1628:26	10	;
LEAF_NODE	1629:2	1629:2	8	}
LEAF_NODE	1629:21	1629:21	6	;
EXPR_STATEMENT	1632:2	1632:19	6	_TIFFfree ( tmpbuf ) ;
EXPR	1632:2	1632:2	7	_TIFFfree ( tmpbuf )
FUNCTION_CALL	1632:2	1632:18	8	_TIFFfree ( tmpbuf )
CALLEE	1632:2	1632:2	9	_TIFFfree
LEAF_NODE	1632:2	1632:2	10	_TIFFfree
LEAF_NODE	1632:11	1632:11	9	(
ARGUMENT	1632:12	1632:12	9	tmpbuf
FIELD	1632:12	1632:12	10	tmpbuf
LEAF_NODE	1632:12	1632:12	11	tmpbuf
LEAF_NODE	1632:18	1632:18	9	)
LEAF_NODE	1632:19	1632:19	7	;
LEAF_NODE	1635:1	1635:1	5	}
JUMP_STATEMENT	1638:1	1639:35	3	return sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp ) ;
KEYWORD	1638:1	1638:1	4	return
LEAF_NODE	1638:1	1638:1	5	return
DESTINATION	1638:8	1638:8	4	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp )
EXPR	1638:8	1638:8	5	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp )
OR	1638:8	1639:5	6	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height || TIFFjpeg_finish_decompress ( sp )
EXPR	1638:8	1638:38	7	sp -> cinfo . d . output_scanline < sp -> cinfo . d . output_height
FIELD	1638:8	1638:20	8	sp -> cinfo . d . output_scanline
LEAF_NODE	1638:8	1638:8	9	sp
LEAF_NODE	1638:10	1638:10	9	->
LEAF_NODE	1638:12	1638:12	9	cinfo
LEAF_NODE	1638:17	1638:17	9	.
LEAF_NODE	1638:18	1638:18	9	d
LEAF_NODE	1638:19	1638:19	9	.
LEAF_NODE	1638:20	1638:20	9	output_scanline
REL_OPERATOR	1638:36	1638:36	8	<
LEAF_NODE	1638:36	1638:36	9	<
FIELD	1638:38	1638:50	8	sp -> cinfo . d . output_height
LEAF_NODE	1638:38	1638:38	9	sp
LEAF_NODE	1638:40	1638:40	9	->
LEAF_NODE	1638:42	1638:42	9	cinfo
LEAF_NODE	1638:47	1638:47	9	.
LEAF_NODE	1638:48	1638:48	9	d
LEAF_NODE	1638:49	1638:49	9	.
LEAF_NODE	1638:50	1638:50	9	output_height
LEAF_NODE	1639:2	1639:2	7	||
EXPR	1639:5	1639:5	7	TIFFjpeg_finish_decompress ( sp )
FUNCTION_CALL	1639:5	1639:34	8	TIFFjpeg_finish_decompress ( sp )
CALLEE	1639:5	1639:5	9	TIFFjpeg_finish_decompress
LEAF_NODE	1639:5	1639:5	10	TIFFjpeg_finish_decompress
LEAF_NODE	1639:31	1639:31	9	(
ARGUMENT	1639:32	1639:32	9	sp
FIELD	1639:32	1639:32	10	sp
LEAF_NODE	1639:32	1639:32	11	sp
LEAF_NODE	1639:34	1639:34	9	)
LEAF_NODE	1639:35	1639:35	4	;
LEAF_NODE	1640:0	1640:0	2	}
FUNCTION_DEF	1647:0	1654:0	1	
RETURN_TYPE	1647:0	1647:7	2	static void
LEAF_NODE	1647:0	1647:0	3	static
TYPE_NAME	1647:7	1647:7	3	void
LEAF_NODE	1647:7	1647:7	4	void
FUNCTION_NAME	1648:0	1648:0	2	unsuppress_quant_table
LEAF_NODE	1648:0	1648:0	3	unsuppress_quant_table
PARAMETER_LIST	1648:23	1648:48	2	( JPEGState * sp , int tblno )
LEAF_NODE	1648:23	1648:23	3	(
PARAMETER_DECL	1648:24	1648:35	3	JPEGState * sp
TYPE	1648:24	1648:33	4	JPEGState *
TYPE_NAME	1648:24	1648:24	5	JPEGState
LEAF_NODE	1648:24	1648:24	6	JPEGState
POINTER	1648:33	1648:33	5	*
LEAF_NODE	1648:33	1648:33	6	*
NAME	1648:35	1648:35	4	sp
LEAF_NODE	1648:35	1648:35	5	sp
LEAF_NODE	1648:37	1648:37	3	,
PARAMETER_DECL	1648:39	1648:43	3	int tblno
TYPE	1648:39	1648:39	4	int
TYPE_NAME	1648:39	1648:39	5	int
LEAF_NODE	1648:39	1648:39	6	int
NAME	1648:43	1648:43	4	tblno
LEAF_NODE	1648:43	1648:43	5	tblno
LEAF_NODE	1648:48	1648:48	3	)
LEAF_NODE	1649:0	1649:0	2	{
STATEMENTS	1650:1	1652:1	2	
SIMPLE_DECL	1650:1	1650:17	3	JQUANT_TBL * qtbl ;
VAR_DECL	1650:1	1650:13	4	JQUANT_TBL * qtbl
TYPE	1650:1	1650:11	5	JQUANT_TBL *
TYPE_NAME	1650:1	1650:1	6	JQUANT_TBL
LEAF_NODE	1650:1	1650:1	7	JQUANT_TBL
POINTER	1650:11	1650:11	6	*
LEAF_NODE	1650:11	1650:11	7	*
NAME	1650:13	1650:13	5	qtbl
LEAF_NODE	1650:13	1650:13	6	qtbl
LEAF_NODE	1650:17	1650:17	4	;
SELECTION	1652:1	1653:2	3	
KEYWORD	1652:1	1652:1	4	if
LEAF_NODE	1652:1	1652:1	5	if
LEAF_NODE	1652:4	1652:4	4	(
CONDITION	1652:5	1652:5	4	( qtbl = sp -> cinfo . c . quant_tbl_ptrs [ tblno ] ) != NULL
EXPR	1652:5	1652:51	5	( qtbl = sp -> cinfo . c . quant_tbl_ptrs [ tblno ] ) != NULL
LEAF_NODE	1652:5	1652:5	6	(
ASSIGN	1652:6	1652:13	6	qtbl = sp -> cinfo . c . quant_tbl_ptrs [ tblno ]
LVAL	1652:6	1652:6	7	qtbl
FIELD	1652:6	1652:6	8	qtbl
LEAF_NODE	1652:6	1652:6	9	qtbl
ASSIGN_OP	1652:11	1652:11	7	=
LEAF_NODE	1652:11	1652:11	8	=
RVAL	1652:13	1652:13	7	sp -> cinfo . c . quant_tbl_ptrs [ tblno ]
FIELD	1652:13	1652:45	8	sp -> cinfo . c . quant_tbl_ptrs [ tblno ]
LEAF_NODE	1652:13	1652:13	9	sp
LEAF_NODE	1652:15	1652:15	9	->
LEAF_NODE	1652:17	1652:17	9	cinfo
LEAF_NODE	1652:22	1652:22	9	.
LEAF_NODE	1652:23	1652:23	9	c
LEAF_NODE	1652:24	1652:24	9	.
LEAF_NODE	1652:25	1652:25	9	quant_tbl_ptrs
LEAF_NODE	1652:39	1652:39	9	[
EXPR	1652:40	1652:40	9	tblno
FIELD	1652:40	1652:40	10	tblno
LEAF_NODE	1652:40	1652:40	11	tblno
LEAF_NODE	1652:45	1652:45	9	]
LEAF_NODE	1652:46	1652:46	6	)
EQ_OPERATOR	1652:48	1652:48	6	!=
LEAF_NODE	1652:48	1652:48	7	!=
FIELD	1652:51	1652:51	6	NULL
LEAF_NODE	1652:51	1652:51	7	NULL
LEAF_NODE	1652:55	1652:55	4	)
STATEMENTS	1653:2	1653:2	4	
EXPR_STATEMENT	1653:2	1653:26	5	qtbl -> sent_table = FALSE ;
EXPR	1653:2	1653:2	6	qtbl -> sent_table = FALSE
ASSIGN	1653:2	1653:21	7	qtbl -> sent_table = FALSE
LVAL	1653:2	1653:2	8	qtbl -> sent_table
FIELD	1653:2	1653:8	9	qtbl -> sent_table
LEAF_NODE	1653:2	1653:2	10	qtbl
LEAF_NODE	1653:6	1653:6	10	->
LEAF_NODE	1653:8	1653:8	10	sent_table
ASSIGN_OP	1653:19	1653:19	8	=
LEAF_NODE	1653:19	1653:19	9	=
RVAL	1653:21	1653:21	8	FALSE
FIELD	1653:21	1653:21	9	FALSE
LEAF_NODE	1653:21	1653:21	10	FALSE
LEAF_NODE	1653:26	1653:26	6	;
LEAF_NODE	1654:0	1654:0	2	}
FUNCTION_DEF	1656:0	1663:0	1	
RETURN_TYPE	1656:0	1656:7	2	static void
LEAF_NODE	1656:0	1656:0	3	static
TYPE_NAME	1656:7	1656:7	3	void
LEAF_NODE	1656:7	1656:7	4	void
FUNCTION_NAME	1657:0	1657:0	2	suppress_quant_table
LEAF_NODE	1657:0	1657:0	3	suppress_quant_table
PARAMETER_LIST	1657:21	1657:46	2	( JPEGState * sp , int tblno )
LEAF_NODE	1657:21	1657:21	3	(
PARAMETER_DECL	1657:22	1657:33	3	JPEGState * sp
TYPE	1657:22	1657:31	4	JPEGState *
TYPE_NAME	1657:22	1657:22	5	JPEGState
LEAF_NODE	1657:22	1657:22	6	JPEGState
POINTER	1657:31	1657:31	5	*
LEAF_NODE	1657:31	1657:31	6	*
NAME	1657:33	1657:33	4	sp
LEAF_NODE	1657:33	1657:33	5	sp
LEAF_NODE	1657:35	1657:35	3	,
PARAMETER_DECL	1657:37	1657:41	3	int tblno
TYPE	1657:37	1657:37	4	int
TYPE_NAME	1657:37	1657:37	5	int
LEAF_NODE	1657:37	1657:37	6	int
NAME	1657:41	1657:41	4	tblno
LEAF_NODE	1657:41	1657:41	5	tblno
LEAF_NODE	1657:46	1657:46	3	)
LEAF_NODE	1658:0	1658:0	2	{
STATEMENTS	1659:1	1661:1	2	
SIMPLE_DECL	1659:1	1659:17	3	JQUANT_TBL * qtbl ;
VAR_DECL	1659:1	1659:13	4	JQUANT_TBL * qtbl
TYPE	1659:1	1659:11	5	JQUANT_TBL *
TYPE_NAME	1659:1	1659:1	6	JQUANT_TBL
LEAF_NODE	1659:1	1659:1	7	JQUANT_TBL
POINTER	1659:11	1659:11	6	*
LEAF_NODE	1659:11	1659:11	7	*
NAME	1659:13	1659:13	5	qtbl
LEAF_NODE	1659:13	1659:13	6	qtbl
LEAF_NODE	1659:17	1659:17	4	;
SELECTION	1661:1	1662:2	3	
KEYWORD	1661:1	1661:1	4	if
LEAF_NODE	1661:1	1661:1	5	if
LEAF_NODE	1661:4	1661:4	4	(
CONDITION	1661:5	1661:5	4	( qtbl = sp -> cinfo . c . quant_tbl_ptrs [ tblno ] ) != NULL
EXPR	1661:5	1661:51	5	( qtbl = sp -> cinfo . c . quant_tbl_ptrs [ tblno ] ) != NULL
LEAF_NODE	1661:5	1661:5	6	(
ASSIGN	1661:6	1661:13	6	qtbl = sp -> cinfo . c . quant_tbl_ptrs [ tblno ]
LVAL	1661:6	1661:6	7	qtbl
FIELD	1661:6	1661:6	8	qtbl
LEAF_NODE	1661:6	1661:6	9	qtbl
ASSIGN_OP	1661:11	1661:11	7	=
LEAF_NODE	1661:11	1661:11	8	=
RVAL	1661:13	1661:13	7	sp -> cinfo . c . quant_tbl_ptrs [ tblno ]
FIELD	1661:13	1661:45	8	sp -> cinfo . c . quant_tbl_ptrs [ tblno ]
LEAF_NODE	1661:13	1661:13	9	sp
LEAF_NODE	1661:15	1661:15	9	->
LEAF_NODE	1661:17	1661:17	9	cinfo
LEAF_NODE	1661:22	1661:22	9	.
LEAF_NODE	1661:23	1661:23	9	c
LEAF_NODE	1661:24	1661:24	9	.
LEAF_NODE	1661:25	1661:25	9	quant_tbl_ptrs
LEAF_NODE	1661:39	1661:39	9	[
EXPR	1661:40	1661:40	9	tblno
FIELD	1661:40	1661:40	10	tblno
LEAF_NODE	1661:40	1661:40	11	tblno
LEAF_NODE	1661:45	1661:45	9	]
LEAF_NODE	1661:46	1661:46	6	)
EQ_OPERATOR	1661:48	1661:48	6	!=
LEAF_NODE	1661:48	1661:48	7	!=
FIELD	1661:51	1661:51	6	NULL
LEAF_NODE	1661:51	1661:51	7	NULL
LEAF_NODE	1661:55	1661:55	4	)
STATEMENTS	1662:2	1662:2	4	
EXPR_STATEMENT	1662:2	1662:25	5	qtbl -> sent_table = TRUE ;
EXPR	1662:2	1662:2	6	qtbl -> sent_table = TRUE
ASSIGN	1662:2	1662:21	7	qtbl -> sent_table = TRUE
LVAL	1662:2	1662:2	8	qtbl -> sent_table
FIELD	1662:2	1662:8	9	qtbl -> sent_table
LEAF_NODE	1662:2	1662:2	10	qtbl
LEAF_NODE	1662:6	1662:6	10	->
LEAF_NODE	1662:8	1662:8	10	sent_table
ASSIGN_OP	1662:19	1662:19	8	=
LEAF_NODE	1662:19	1662:19	9	=
RVAL	1662:21	1662:21	8	TRUE
FIELD	1662:21	1662:21	9	TRUE
LEAF_NODE	1662:21	1662:21	10	TRUE
LEAF_NODE	1662:25	1662:25	6	;
LEAF_NODE	1663:0	1663:0	2	}
FUNCTION_DEF	1665:0	1674:0	1	
RETURN_TYPE	1665:0	1665:7	2	static void
LEAF_NODE	1665:0	1665:0	3	static
TYPE_NAME	1665:7	1665:7	3	void
LEAF_NODE	1665:7	1665:7	4	void
FUNCTION_NAME	1666:0	1666:0	2	unsuppress_huff_table
LEAF_NODE	1666:0	1666:0	3	unsuppress_huff_table
PARAMETER_LIST	1666:22	1666:47	2	( JPEGState * sp , int tblno )
LEAF_NODE	1666:22	1666:22	3	(
PARAMETER_DECL	1666:23	1666:34	3	JPEGState * sp
TYPE	1666:23	1666:32	4	JPEGState *
TYPE_NAME	1666:23	1666:23	5	JPEGState
LEAF_NODE	1666:23	1666:23	6	JPEGState
POINTER	1666:32	1666:32	5	*
LEAF_NODE	1666:32	1666:32	6	*
NAME	1666:34	1666:34	4	sp
LEAF_NODE	1666:34	1666:34	5	sp
LEAF_NODE	1666:36	1666:36	3	,
PARAMETER_DECL	1666:38	1666:42	3	int tblno
TYPE	1666:38	1666:38	4	int
TYPE_NAME	1666:38	1666:38	5	int
LEAF_NODE	1666:38	1666:38	6	int
NAME	1666:42	1666:42	4	tblno
LEAF_NODE	1666:42	1666:42	5	tblno
LEAF_NODE	1666:47	1666:47	3	)
LEAF_NODE	1667:0	1667:0	2	{
STATEMENTS	1668:1	1672:1	2	
SIMPLE_DECL	1668:1	1668:16	3	JHUFF_TBL * htbl ;
VAR_DECL	1668:1	1668:12	4	JHUFF_TBL * htbl
TYPE	1668:1	1668:10	5	JHUFF_TBL *
TYPE_NAME	1668:1	1668:1	6	JHUFF_TBL
LEAF_NODE	1668:1	1668:1	7	JHUFF_TBL
POINTER	1668:10	1668:10	6	*
LEAF_NODE	1668:10	1668:10	7	*
NAME	1668:12	1668:12	5	htbl
LEAF_NODE	1668:12	1668:12	6	htbl
LEAF_NODE	1668:16	1668:16	4	;
SELECTION	1670:1	1671:2	3	
KEYWORD	1670:1	1670:1	4	if
LEAF_NODE	1670:1	1670:1	5	if
LEAF_NODE	1670:4	1670:4	4	(
CONDITION	1670:5	1670:5	4	( htbl = sp -> cinfo . c . dc_huff_tbl_ptrs [ tblno ] ) != NULL
EXPR	1670:5	1670:53	5	( htbl = sp -> cinfo . c . dc_huff_tbl_ptrs [ tblno ] ) != NULL
LEAF_NODE	1670:5	1670:5	6	(
ASSIGN	1670:6	1670:13	6	htbl = sp -> cinfo . c . dc_huff_tbl_ptrs [ tblno ]
LVAL	1670:6	1670:6	7	htbl
FIELD	1670:6	1670:6	8	htbl
LEAF_NODE	1670:6	1670:6	9	htbl
ASSIGN_OP	1670:11	1670:11	7	=
LEAF_NODE	1670:11	1670:11	8	=
RVAL	1670:13	1670:13	7	sp -> cinfo . c . dc_huff_tbl_ptrs [ tblno ]
FIELD	1670:13	1670:47	8	sp -> cinfo . c . dc_huff_tbl_ptrs [ tblno ]
LEAF_NODE	1670:13	1670:13	9	sp
LEAF_NODE	1670:15	1670:15	9	->
LEAF_NODE	1670:17	1670:17	9	cinfo
LEAF_NODE	1670:22	1670:22	9	.
LEAF_NODE	1670:23	1670:23	9	c
LEAF_NODE	1670:24	1670:24	9	.
LEAF_NODE	1670:25	1670:25	9	dc_huff_tbl_ptrs
LEAF_NODE	1670:41	1670:41	9	[
EXPR	1670:42	1670:42	9	tblno
FIELD	1670:42	1670:42	10	tblno
LEAF_NODE	1670:42	1670:42	11	tblno
LEAF_NODE	1670:47	1670:47	9	]
LEAF_NODE	1670:48	1670:48	6	)
EQ_OPERATOR	1670:50	1670:50	6	!=
LEAF_NODE	1670:50	1670:50	7	!=
FIELD	1670:53	1670:53	6	NULL
LEAF_NODE	1670:53	1670:53	7	NULL
LEAF_NODE	1670:57	1670:57	4	)
STATEMENTS	1671:2	1671:2	4	
EXPR_STATEMENT	1671:2	1671:26	5	htbl -> sent_table = FALSE ;
EXPR	1671:2	1671:2	6	htbl -> sent_table = FALSE
ASSIGN	1671:2	1671:21	7	htbl -> sent_table = FALSE
LVAL	1671:2	1671:2	8	htbl -> sent_table
FIELD	1671:2	1671:8	9	htbl -> sent_table
LEAF_NODE	1671:2	1671:2	10	htbl
LEAF_NODE	1671:6	1671:6	10	->
LEAF_NODE	1671:8	1671:8	10	sent_table
ASSIGN_OP	1671:19	1671:19	8	=
LEAF_NODE	1671:19	1671:19	9	=
RVAL	1671:21	1671:21	8	FALSE
FIELD	1671:21	1671:21	9	FALSE
LEAF_NODE	1671:21	1671:21	10	FALSE
LEAF_NODE	1671:26	1671:26	6	;
SELECTION	1672:1	1673:2	3	
KEYWORD	1672:1	1672:1	4	if
LEAF_NODE	1672:1	1672:1	5	if
LEAF_NODE	1672:4	1672:4	4	(
CONDITION	1672:5	1672:5	4	( htbl = sp -> cinfo . c . ac_huff_tbl_ptrs [ tblno ] ) != NULL
EXPR	1672:5	1672:53	5	( htbl = sp -> cinfo . c . ac_huff_tbl_ptrs [ tblno ] ) != NULL
LEAF_NODE	1672:5	1672:5	6	(
ASSIGN	1672:6	1672:13	6	htbl = sp -> cinfo . c . ac_huff_tbl_ptrs [ tblno ]
LVAL	1672:6	1672:6	7	htbl
FIELD	1672:6	1672:6	8	htbl
LEAF_NODE	1672:6	1672:6	9	htbl
ASSIGN_OP	1672:11	1672:11	7	=
LEAF_NODE	1672:11	1672:11	8	=
RVAL	1672:13	1672:13	7	sp -> cinfo . c . ac_huff_tbl_ptrs [ tblno ]
FIELD	1672:13	1672:47	8	sp -> cinfo . c . ac_huff_tbl_ptrs [ tblno ]
LEAF_NODE	1672:13	1672:13	9	sp
LEAF_NODE	1672:15	1672:15	9	->
LEAF_NODE	1672:17	1672:17	9	cinfo
LEAF_NODE	1672:22	1672:22	9	.
LEAF_NODE	1672:23	1672:23	9	c
LEAF_NODE	1672:24	1672:24	9	.
LEAF_NODE	1672:25	1672:25	9	ac_huff_tbl_ptrs
LEAF_NODE	1672:41	1672:41	9	[
EXPR	1672:42	1672:42	9	tblno
FIELD	1672:42	1672:42	10	tblno
LEAF_NODE	1672:42	1672:42	11	tblno
LEAF_NODE	1672:47	1672:47	9	]
LEAF_NODE	1672:48	1672:48	6	)
EQ_OPERATOR	1672:50	1672:50	6	!=
LEAF_NODE	1672:50	1672:50	7	!=
FIELD	1672:53	1672:53	6	NULL
LEAF_NODE	1672:53	1672:53	7	NULL
LEAF_NODE	1672:57	1672:57	4	)
STATEMENTS	1673:2	1673:2	4	
EXPR_STATEMENT	1673:2	1673:26	5	htbl -> sent_table = FALSE ;
EXPR	1673:2	1673:2	6	htbl -> sent_table = FALSE
ASSIGN	1673:2	1673:21	7	htbl -> sent_table = FALSE
LVAL	1673:2	1673:2	8	htbl -> sent_table
FIELD	1673:2	1673:8	9	htbl -> sent_table
LEAF_NODE	1673:2	1673:2	10	htbl
LEAF_NODE	1673:6	1673:6	10	->
LEAF_NODE	1673:8	1673:8	10	sent_table
ASSIGN_OP	1673:19	1673:19	8	=
LEAF_NODE	1673:19	1673:19	9	=
RVAL	1673:21	1673:21	8	FALSE
FIELD	1673:21	1673:21	9	FALSE
LEAF_NODE	1673:21	1673:21	10	FALSE
LEAF_NODE	1673:26	1673:26	6	;
LEAF_NODE	1674:0	1674:0	2	}
FUNCTION_DEF	1676:0	1685:0	1	
RETURN_TYPE	1676:0	1676:7	2	static void
LEAF_NODE	1676:0	1676:0	3	static
TYPE_NAME	1676:7	1676:7	3	void
LEAF_NODE	1676:7	1676:7	4	void
FUNCTION_NAME	1677:0	1677:0	2	suppress_huff_table
LEAF_NODE	1677:0	1677:0	3	suppress_huff_table
PARAMETER_LIST	1677:20	1677:45	2	( JPEGState * sp , int tblno )
LEAF_NODE	1677:20	1677:20	3	(
PARAMETER_DECL	1677:21	1677:32	3	JPEGState * sp
TYPE	1677:21	1677:30	4	JPEGState *
TYPE_NAME	1677:21	1677:21	5	JPEGState
LEAF_NODE	1677:21	1677:21	6	JPEGState
POINTER	1677:30	1677:30	5	*
LEAF_NODE	1677:30	1677:30	6	*
NAME	1677:32	1677:32	4	sp
LEAF_NODE	1677:32	1677:32	5	sp
LEAF_NODE	1677:34	1677:34	3	,
PARAMETER_DECL	1677:36	1677:40	3	int tblno
TYPE	1677:36	1677:36	4	int
TYPE_NAME	1677:36	1677:36	5	int
LEAF_NODE	1677:36	1677:36	6	int
NAME	1677:40	1677:40	4	tblno
LEAF_NODE	1677:40	1677:40	5	tblno
LEAF_NODE	1677:45	1677:45	3	)
LEAF_NODE	1678:0	1678:0	2	{
STATEMENTS	1679:1	1683:1	2	
SIMPLE_DECL	1679:1	1679:16	3	JHUFF_TBL * htbl ;
VAR_DECL	1679:1	1679:12	4	JHUFF_TBL * htbl
TYPE	1679:1	1679:10	5	JHUFF_TBL *
TYPE_NAME	1679:1	1679:1	6	JHUFF_TBL
LEAF_NODE	1679:1	1679:1	7	JHUFF_TBL
POINTER	1679:10	1679:10	6	*
LEAF_NODE	1679:10	1679:10	7	*
NAME	1679:12	1679:12	5	htbl
LEAF_NODE	1679:12	1679:12	6	htbl
LEAF_NODE	1679:16	1679:16	4	;
SELECTION	1681:1	1682:2	3	
KEYWORD	1681:1	1681:1	4	if
LEAF_NODE	1681:1	1681:1	5	if
LEAF_NODE	1681:4	1681:4	4	(
CONDITION	1681:5	1681:5	4	( htbl = sp -> cinfo . c . dc_huff_tbl_ptrs [ tblno ] ) != NULL
EXPR	1681:5	1681:53	5	( htbl = sp -> cinfo . c . dc_huff_tbl_ptrs [ tblno ] ) != NULL
LEAF_NODE	1681:5	1681:5	6	(
ASSIGN	1681:6	1681:13	6	htbl = sp -> cinfo . c . dc_huff_tbl_ptrs [ tblno ]
LVAL	1681:6	1681:6	7	htbl
FIELD	1681:6	1681:6	8	htbl
LEAF_NODE	1681:6	1681:6	9	htbl
ASSIGN_OP	1681:11	1681:11	7	=
LEAF_NODE	1681:11	1681:11	8	=
RVAL	1681:13	1681:13	7	sp -> cinfo . c . dc_huff_tbl_ptrs [ tblno ]
FIELD	1681:13	1681:47	8	sp -> cinfo . c . dc_huff_tbl_ptrs [ tblno ]
LEAF_NODE	1681:13	1681:13	9	sp
LEAF_NODE	1681:15	1681:15	9	->
LEAF_NODE	1681:17	1681:17	9	cinfo
LEAF_NODE	1681:22	1681:22	9	.
LEAF_NODE	1681:23	1681:23	9	c
LEAF_NODE	1681:24	1681:24	9	.
LEAF_NODE	1681:25	1681:25	9	dc_huff_tbl_ptrs
LEAF_NODE	1681:41	1681:41	9	[
EXPR	1681:42	1681:42	9	tblno
FIELD	1681:42	1681:42	10	tblno
LEAF_NODE	1681:42	1681:42	11	tblno
LEAF_NODE	1681:47	1681:47	9	]
LEAF_NODE	1681:48	1681:48	6	)
EQ_OPERATOR	1681:50	1681:50	6	!=
LEAF_NODE	1681:50	1681:50	7	!=
FIELD	1681:53	1681:53	6	NULL
LEAF_NODE	1681:53	1681:53	7	NULL
LEAF_NODE	1681:57	1681:57	4	)
STATEMENTS	1682:2	1682:2	4	
EXPR_STATEMENT	1682:2	1682:25	5	htbl -> sent_table = TRUE ;
EXPR	1682:2	1682:2	6	htbl -> sent_table = TRUE
ASSIGN	1682:2	1682:21	7	htbl -> sent_table = TRUE
LVAL	1682:2	1682:2	8	htbl -> sent_table
FIELD	1682:2	1682:8	9	htbl -> sent_table
LEAF_NODE	1682:2	1682:2	10	htbl
LEAF_NODE	1682:6	1682:6	10	->
LEAF_NODE	1682:8	1682:8	10	sent_table
ASSIGN_OP	1682:19	1682:19	8	=
LEAF_NODE	1682:19	1682:19	9	=
RVAL	1682:21	1682:21	8	TRUE
FIELD	1682:21	1682:21	9	TRUE
LEAF_NODE	1682:21	1682:21	10	TRUE
LEAF_NODE	1682:25	1682:25	6	;
SELECTION	1683:1	1684:2	3	
KEYWORD	1683:1	1683:1	4	if
LEAF_NODE	1683:1	1683:1	5	if
LEAF_NODE	1683:4	1683:4	4	(
CONDITION	1683:5	1683:5	4	( htbl = sp -> cinfo . c . ac_huff_tbl_ptrs [ tblno ] ) != NULL
EXPR	1683:5	1683:53	5	( htbl = sp -> cinfo . c . ac_huff_tbl_ptrs [ tblno ] ) != NULL
LEAF_NODE	1683:5	1683:5	6	(
ASSIGN	1683:6	1683:13	6	htbl = sp -> cinfo . c . ac_huff_tbl_ptrs [ tblno ]
LVAL	1683:6	1683:6	7	htbl
FIELD	1683:6	1683:6	8	htbl
LEAF_NODE	1683:6	1683:6	9	htbl
ASSIGN_OP	1683:11	1683:11	7	=
LEAF_NODE	1683:11	1683:11	8	=
RVAL	1683:13	1683:13	7	sp -> cinfo . c . ac_huff_tbl_ptrs [ tblno ]
FIELD	1683:13	1683:47	8	sp -> cinfo . c . ac_huff_tbl_ptrs [ tblno ]
LEAF_NODE	1683:13	1683:13	9	sp
LEAF_NODE	1683:15	1683:15	9	->
LEAF_NODE	1683:17	1683:17	9	cinfo
LEAF_NODE	1683:22	1683:22	9	.
LEAF_NODE	1683:23	1683:23	9	c
LEAF_NODE	1683:24	1683:24	9	.
LEAF_NODE	1683:25	1683:25	9	ac_huff_tbl_ptrs
LEAF_NODE	1683:41	1683:41	9	[
EXPR	1683:42	1683:42	9	tblno
FIELD	1683:42	1683:42	10	tblno
LEAF_NODE	1683:42	1683:42	11	tblno
LEAF_NODE	1683:47	1683:47	9	]
LEAF_NODE	1683:48	1683:48	6	)
EQ_OPERATOR	1683:50	1683:50	6	!=
LEAF_NODE	1683:50	1683:50	7	!=
FIELD	1683:53	1683:53	6	NULL
LEAF_NODE	1683:53	1683:53	7	NULL
LEAF_NODE	1683:57	1683:57	4	)
STATEMENTS	1684:2	1684:2	4	
EXPR_STATEMENT	1684:2	1684:25	5	htbl -> sent_table = TRUE ;
EXPR	1684:2	1684:2	6	htbl -> sent_table = TRUE
ASSIGN	1684:2	1684:21	7	htbl -> sent_table = TRUE
LVAL	1684:2	1684:2	8	htbl -> sent_table
FIELD	1684:2	1684:8	9	htbl -> sent_table
LEAF_NODE	1684:2	1684:2	10	htbl
LEAF_NODE	1684:6	1684:6	10	->
LEAF_NODE	1684:8	1684:8	10	sent_table
ASSIGN_OP	1684:19	1684:19	8	=
LEAF_NODE	1684:19	1684:19	9	=
RVAL	1684:21	1684:21	8	TRUE
FIELD	1684:21	1684:21	9	TRUE
LEAF_NODE	1684:21	1684:21	10	TRUE
LEAF_NODE	1684:25	1684:25	6	;
LEAF_NODE	1685:0	1685:0	2	}
FUNCTION_DEF	1687:0	1717:0	1	
RETURN_TYPE	1687:0	1687:7	2	static int
LEAF_NODE	1687:0	1687:0	3	static
TYPE_NAME	1687:7	1687:7	3	int
LEAF_NODE	1687:7	1687:7	4	int
FUNCTION_NAME	1688:0	1688:0	2	prepare_JPEGTables
LEAF_NODE	1688:0	1688:0	3	prepare_JPEGTables
PARAMETER_LIST	1688:18	1688:28	2	( TIFF * tif )
LEAF_NODE	1688:18	1688:18	3	(
PARAMETER_DECL	1688:19	1688:25	3	TIFF * tif
TYPE	1688:19	1688:23	4	TIFF *
TYPE_NAME	1688:19	1688:19	5	TIFF
LEAF_NODE	1688:19	1688:19	6	TIFF
POINTER	1688:23	1688:23	5	*
LEAF_NODE	1688:23	1688:23	6	*
NAME	1688:25	1688:25	4	tif
LEAF_NODE	1688:25	1688:25	5	tif
LEAF_NODE	1688:28	1688:28	3	)
LEAF_NODE	1689:0	1689:0	2	{
STATEMENTS	1690:1	1716:1	2	
SIMPLE_DECL	1690:1	1690:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	1690:1	1690:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	1690:1	1690:10	5	JPEGState *
TYPE_NAME	1690:1	1690:1	6	JPEGState
LEAF_NODE	1690:1	1690:1	7	JPEGState
POINTER	1690:10	1690:10	6	*
LEAF_NODE	1690:10	1690:10	7	*
NAME	1690:12	1690:12	5	sp
LEAF_NODE	1690:12	1690:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1690:12	1690:12	5	sp = JState ( tif )
ASSIGN	1690:12	1690:17	6	sp = JState ( tif )
LVAL	1690:12	1690:12	7	sp
NAME	1690:12	1690:12	8	sp
LEAF_NODE	1690:12	1690:12	9	sp
ASSIGN_OP	1690:15	1690:15	7	=
LEAF_NODE	1690:15	1690:15	8	=
RVAL	1690:17	1690:17	7	JState ( tif )
FUNCTION_CALL	1690:17	1690:27	8	JState ( tif )
CALLEE	1690:17	1690:17	9	JState
LEAF_NODE	1690:17	1690:17	10	JState
LEAF_NODE	1690:23	1690:23	9	(
ARGUMENT	1690:24	1690:24	9	tif
FIELD	1690:24	1690:24	10	tif
LEAF_NODE	1690:24	1690:24	11	tif
LEAF_NODE	1690:27	1690:27	9	)
LEAF_NODE	1690:28	1690:28	4	;
SELECTION	1693:1	1694:2	3	
KEYWORD	1693:1	1693:1	4	if
LEAF_NODE	1693:1	1693:1	5	if
LEAF_NODE	1693:4	1693:4	4	(
CONDITION	1693:5	1693:5	4	! TIFFjpeg_set_quality ( sp , sp -> jpegquality , FALSE )
EXPR	1693:5	1693:5	5	! TIFFjpeg_set_quality ( sp , sp -> jpegquality , FALSE )
UNARY_EXPR	1693:5	1693:6	6	! TIFFjpeg_set_quality ( sp , sp -> jpegquality , FALSE )
UNARY_OPERATOR	1693:5	1693:5	7	!
LEAF_NODE	1693:5	1693:5	8	!
FUNCTION_CALL	1693:6	1693:53	7	TIFFjpeg_set_quality ( sp , sp -> jpegquality , FALSE )
CALLEE	1693:6	1693:6	8	TIFFjpeg_set_quality
LEAF_NODE	1693:6	1693:6	9	TIFFjpeg_set_quality
LEAF_NODE	1693:26	1693:26	8	(
ARGUMENT	1693:27	1693:27	8	sp
FIELD	1693:27	1693:27	9	sp
LEAF_NODE	1693:27	1693:27	10	sp
LEAF_NODE	1693:29	1693:29	8	,
ARGUMENT	1693:31	1693:31	8	sp -> jpegquality
FIELD	1693:31	1693:35	9	sp -> jpegquality
LEAF_NODE	1693:31	1693:31	10	sp
LEAF_NODE	1693:33	1693:33	10	->
LEAF_NODE	1693:35	1693:35	10	jpegquality
LEAF_NODE	1693:46	1693:46	8	,
ARGUMENT	1693:48	1693:48	8	FALSE
FIELD	1693:48	1693:48	9	FALSE
LEAF_NODE	1693:48	1693:48	10	FALSE
LEAF_NODE	1693:53	1693:53	8	)
LEAF_NODE	1693:54	1693:54	4	)
STATEMENTS	1694:2	1694:2	4	
JUMP_STATEMENT	1694:2	1694:12	5	return ( 0 ) ;
KEYWORD	1694:2	1694:2	6	return
LEAF_NODE	1694:2	1694:2	7	return
DESTINATION	1694:9	1694:9	6	( 0 )
EXPR	1694:9	1694:11	7	( 0 )
LEAF_NODE	1694:9	1694:9	8	(
FIELD	1694:10	1694:10	8	0
LEAF_NODE	1694:10	1694:10	9	0
LEAF_NODE	1694:11	1694:11	8	)
LEAF_NODE	1694:12	1694:12	6	;
SELECTION	1697:1	1698:2	3	
KEYWORD	1697:1	1697:1	4	if
LEAF_NODE	1697:1	1697:1	5	if
LEAF_NODE	1697:4	1697:4	4	(
CONDITION	1697:5	1697:5	4	! TIFFjpeg_suppress_tables ( sp , TRUE )
EXPR	1697:5	1697:5	5	! TIFFjpeg_suppress_tables ( sp , TRUE )
UNARY_EXPR	1697:5	1697:6	6	! TIFFjpeg_suppress_tables ( sp , TRUE )
UNARY_OPERATOR	1697:5	1697:5	7	!
LEAF_NODE	1697:5	1697:5	8	!
FUNCTION_CALL	1697:6	1697:39	7	TIFFjpeg_suppress_tables ( sp , TRUE )
CALLEE	1697:6	1697:6	8	TIFFjpeg_suppress_tables
LEAF_NODE	1697:6	1697:6	9	TIFFjpeg_suppress_tables
LEAF_NODE	1697:30	1697:30	8	(
ARGUMENT	1697:31	1697:31	8	sp
FIELD	1697:31	1697:31	9	sp
LEAF_NODE	1697:31	1697:31	10	sp
LEAF_NODE	1697:33	1697:33	8	,
ARGUMENT	1697:35	1697:35	8	TRUE
FIELD	1697:35	1697:35	9	TRUE
LEAF_NODE	1697:35	1697:35	10	TRUE
LEAF_NODE	1697:39	1697:39	8	)
LEAF_NODE	1697:40	1697:40	4	)
STATEMENTS	1698:2	1698:2	4	
JUMP_STATEMENT	1698:2	1698:12	5	return ( 0 ) ;
KEYWORD	1698:2	1698:2	6	return
LEAF_NODE	1698:2	1698:2	7	return
DESTINATION	1698:9	1698:9	6	( 0 )
EXPR	1698:9	1698:11	7	( 0 )
LEAF_NODE	1698:9	1698:9	8	(
FIELD	1698:10	1698:10	8	0
LEAF_NODE	1698:10	1698:10	9	0
LEAF_NODE	1698:11	1698:11	8	)
LEAF_NODE	1698:12	1698:12	6	;
SELECTION	1699:1	1699:48	3	
KEYWORD	1699:1	1699:1	4	if
LEAF_NODE	1699:1	1699:1	5	if
LEAF_NODE	1699:4	1699:4	4	(
CONDITION	1699:5	1699:5	4	sp -> jpegtablesmode & JPEGTABLESMODE_QUANT
EXPR	1699:5	1699:26	5	sp -> jpegtablesmode & JPEGTABLESMODE_QUANT
FIELD	1699:5	1699:9	6	sp -> jpegtablesmode
LEAF_NODE	1699:5	1699:5	7	sp
LEAF_NODE	1699:7	1699:7	7	->
LEAF_NODE	1699:9	1699:9	7	jpegtablesmode
LEAF_NODE	1699:24	1699:24	6	&
FIELD	1699:26	1699:26	6	JPEGTABLESMODE_QUANT
LEAF_NODE	1699:26	1699:26	7	JPEGTABLESMODE_QUANT
LEAF_NODE	1699:46	1699:46	4	)
STATEMENTS	1699:48	1703:1	4	
LEAF_NODE	1699:48	1699:48	5	{
STATEMENTS	1700:2	1701:2	5	
EXPR_STATEMENT	1700:2	1700:31	6	unsuppress_quant_table ( sp , 0 ) ;
EXPR	1700:2	1700:2	7	unsuppress_quant_table ( sp , 0 )
FUNCTION_CALL	1700:2	1700:30	8	unsuppress_quant_table ( sp , 0 )
CALLEE	1700:2	1700:2	9	unsuppress_quant_table
LEAF_NODE	1700:2	1700:2	10	unsuppress_quant_table
LEAF_NODE	1700:24	1700:24	9	(
ARGUMENT	1700:25	1700:25	9	sp
FIELD	1700:25	1700:25	10	sp
LEAF_NODE	1700:25	1700:25	11	sp
LEAF_NODE	1700:27	1700:27	9	,
ARGUMENT	1700:29	1700:29	9	0
FIELD	1700:29	1700:29	10	0
LEAF_NODE	1700:29	1700:29	11	0
LEAF_NODE	1700:30	1700:30	9	)
LEAF_NODE	1700:31	1700:31	7	;
SELECTION	1701:2	1702:3	6	
KEYWORD	1701:2	1701:2	7	if
LEAF_NODE	1701:2	1701:2	8	if
LEAF_NODE	1701:5	1701:5	7	(
CONDITION	1701:6	1701:6	7	sp -> photometric == PHOTOMETRIC_YCBCR
EXPR	1701:6	1701:25	8	sp -> photometric == PHOTOMETRIC_YCBCR
FIELD	1701:6	1701:10	9	sp -> photometric
LEAF_NODE	1701:6	1701:6	10	sp
LEAF_NODE	1701:8	1701:8	10	->
LEAF_NODE	1701:10	1701:10	10	photometric
EQ_OPERATOR	1701:22	1701:22	9	==
LEAF_NODE	1701:22	1701:22	10	==
FIELD	1701:25	1701:25	9	PHOTOMETRIC_YCBCR
LEAF_NODE	1701:25	1701:25	10	PHOTOMETRIC_YCBCR
LEAF_NODE	1701:42	1701:42	7	)
STATEMENTS	1702:3	1702:3	7	
EXPR_STATEMENT	1702:3	1702:32	8	unsuppress_quant_table ( sp , 1 ) ;
EXPR	1702:3	1702:3	9	unsuppress_quant_table ( sp , 1 )
FUNCTION_CALL	1702:3	1702:31	10	unsuppress_quant_table ( sp , 1 )
CALLEE	1702:3	1702:3	11	unsuppress_quant_table
LEAF_NODE	1702:3	1702:3	12	unsuppress_quant_table
LEAF_NODE	1702:25	1702:25	11	(
ARGUMENT	1702:26	1702:26	11	sp
FIELD	1702:26	1702:26	12	sp
LEAF_NODE	1702:26	1702:26	13	sp
LEAF_NODE	1702:28	1702:28	11	,
ARGUMENT	1702:30	1702:30	11	1
FIELD	1702:30	1702:30	12	1
LEAF_NODE	1702:30	1702:30	13	1
LEAF_NODE	1702:31	1702:31	11	)
LEAF_NODE	1702:32	1702:32	9	;
LEAF_NODE	1703:1	1703:1	5	}
SELECTION	1704:1	1704:47	3	
KEYWORD	1704:1	1704:1	4	if
LEAF_NODE	1704:1	1704:1	5	if
LEAF_NODE	1704:4	1704:4	4	(
CONDITION	1704:5	1704:5	4	sp -> jpegtablesmode & JPEGTABLESMODE_HUFF
EXPR	1704:5	1704:26	5	sp -> jpegtablesmode & JPEGTABLESMODE_HUFF
FIELD	1704:5	1704:9	6	sp -> jpegtablesmode
LEAF_NODE	1704:5	1704:5	7	sp
LEAF_NODE	1704:7	1704:7	7	->
LEAF_NODE	1704:9	1704:9	7	jpegtablesmode
LEAF_NODE	1704:24	1704:24	6	&
FIELD	1704:26	1704:26	6	JPEGTABLESMODE_HUFF
LEAF_NODE	1704:26	1704:26	7	JPEGTABLESMODE_HUFF
LEAF_NODE	1704:45	1704:45	4	)
STATEMENTS	1704:47	1708:1	4	
LEAF_NODE	1704:47	1704:47	5	{
STATEMENTS	1705:2	1706:2	5	
EXPR_STATEMENT	1705:2	1705:30	6	unsuppress_huff_table ( sp , 0 ) ;
EXPR	1705:2	1705:2	7	unsuppress_huff_table ( sp , 0 )
FUNCTION_CALL	1705:2	1705:29	8	unsuppress_huff_table ( sp , 0 )
CALLEE	1705:2	1705:2	9	unsuppress_huff_table
LEAF_NODE	1705:2	1705:2	10	unsuppress_huff_table
LEAF_NODE	1705:23	1705:23	9	(
ARGUMENT	1705:24	1705:24	9	sp
FIELD	1705:24	1705:24	10	sp
LEAF_NODE	1705:24	1705:24	11	sp
LEAF_NODE	1705:26	1705:26	9	,
ARGUMENT	1705:28	1705:28	9	0
FIELD	1705:28	1705:28	10	0
LEAF_NODE	1705:28	1705:28	11	0
LEAF_NODE	1705:29	1705:29	9	)
LEAF_NODE	1705:30	1705:30	7	;
SELECTION	1706:2	1707:3	6	
KEYWORD	1706:2	1706:2	7	if
LEAF_NODE	1706:2	1706:2	8	if
LEAF_NODE	1706:5	1706:5	7	(
CONDITION	1706:6	1706:6	7	sp -> photometric == PHOTOMETRIC_YCBCR
EXPR	1706:6	1706:25	8	sp -> photometric == PHOTOMETRIC_YCBCR
FIELD	1706:6	1706:10	9	sp -> photometric
LEAF_NODE	1706:6	1706:6	10	sp
LEAF_NODE	1706:8	1706:8	10	->
LEAF_NODE	1706:10	1706:10	10	photometric
EQ_OPERATOR	1706:22	1706:22	9	==
LEAF_NODE	1706:22	1706:22	10	==
FIELD	1706:25	1706:25	9	PHOTOMETRIC_YCBCR
LEAF_NODE	1706:25	1706:25	10	PHOTOMETRIC_YCBCR
LEAF_NODE	1706:42	1706:42	7	)
STATEMENTS	1707:3	1707:3	7	
EXPR_STATEMENT	1707:3	1707:31	8	unsuppress_huff_table ( sp , 1 ) ;
EXPR	1707:3	1707:3	9	unsuppress_huff_table ( sp , 1 )
FUNCTION_CALL	1707:3	1707:30	10	unsuppress_huff_table ( sp , 1 )
CALLEE	1707:3	1707:3	11	unsuppress_huff_table
LEAF_NODE	1707:3	1707:3	12	unsuppress_huff_table
LEAF_NODE	1707:24	1707:24	11	(
ARGUMENT	1707:25	1707:25	11	sp
FIELD	1707:25	1707:25	12	sp
LEAF_NODE	1707:25	1707:25	13	sp
LEAF_NODE	1707:27	1707:27	11	,
ARGUMENT	1707:29	1707:29	11	1
FIELD	1707:29	1707:29	12	1
LEAF_NODE	1707:29	1707:29	13	1
LEAF_NODE	1707:30	1707:30	11	)
LEAF_NODE	1707:31	1707:31	9	;
LEAF_NODE	1708:1	1708:1	5	}
SELECTION	1710:1	1711:2	3	
KEYWORD	1710:1	1710:1	4	if
LEAF_NODE	1710:1	1710:1	5	if
LEAF_NODE	1710:4	1710:4	4	(
CONDITION	1710:5	1710:5	4	! TIFFjpeg_tables_dest ( sp , tif )
EXPR	1710:5	1710:5	5	! TIFFjpeg_tables_dest ( sp , tif )
UNARY_EXPR	1710:5	1710:6	6	! TIFFjpeg_tables_dest ( sp , tif )
UNARY_OPERATOR	1710:5	1710:5	7	!
LEAF_NODE	1710:5	1710:5	8	!
FUNCTION_CALL	1710:6	1710:34	7	TIFFjpeg_tables_dest ( sp , tif )
CALLEE	1710:6	1710:6	8	TIFFjpeg_tables_dest
LEAF_NODE	1710:6	1710:6	9	TIFFjpeg_tables_dest
LEAF_NODE	1710:26	1710:26	8	(
ARGUMENT	1710:27	1710:27	8	sp
FIELD	1710:27	1710:27	9	sp
LEAF_NODE	1710:27	1710:27	10	sp
LEAF_NODE	1710:29	1710:29	8	,
ARGUMENT	1710:31	1710:31	8	tif
FIELD	1710:31	1710:31	9	tif
LEAF_NODE	1710:31	1710:31	10	tif
LEAF_NODE	1710:34	1710:34	8	)
LEAF_NODE	1710:35	1710:35	4	)
STATEMENTS	1711:2	1711:2	4	
JUMP_STATEMENT	1711:2	1711:12	5	return ( 0 ) ;
KEYWORD	1711:2	1711:2	6	return
LEAF_NODE	1711:2	1711:2	7	return
DESTINATION	1711:9	1711:9	6	( 0 )
EXPR	1711:9	1711:11	7	( 0 )
LEAF_NODE	1711:9	1711:9	8	(
FIELD	1711:10	1711:10	8	0
LEAF_NODE	1711:10	1711:10	9	0
LEAF_NODE	1711:11	1711:11	8	)
LEAF_NODE	1711:12	1711:12	6	;
SELECTION	1713:1	1714:2	3	
KEYWORD	1713:1	1713:1	4	if
LEAF_NODE	1713:1	1713:1	5	if
LEAF_NODE	1713:4	1713:4	4	(
CONDITION	1713:5	1713:5	4	! TIFFjpeg_write_tables ( sp )
EXPR	1713:5	1713:5	5	! TIFFjpeg_write_tables ( sp )
UNARY_EXPR	1713:5	1713:6	6	! TIFFjpeg_write_tables ( sp )
UNARY_OPERATOR	1713:5	1713:5	7	!
LEAF_NODE	1713:5	1713:5	8	!
FUNCTION_CALL	1713:6	1713:30	7	TIFFjpeg_write_tables ( sp )
CALLEE	1713:6	1713:6	8	TIFFjpeg_write_tables
LEAF_NODE	1713:6	1713:6	9	TIFFjpeg_write_tables
LEAF_NODE	1713:27	1713:27	8	(
ARGUMENT	1713:28	1713:28	8	sp
FIELD	1713:28	1713:28	9	sp
LEAF_NODE	1713:28	1713:28	10	sp
LEAF_NODE	1713:30	1713:30	8	)
LEAF_NODE	1713:31	1713:31	4	)
STATEMENTS	1714:2	1714:2	4	
JUMP_STATEMENT	1714:2	1714:12	5	return ( 0 ) ;
KEYWORD	1714:2	1714:2	6	return
LEAF_NODE	1714:2	1714:2	7	return
DESTINATION	1714:9	1714:9	6	( 0 )
EXPR	1714:9	1714:11	7	( 0 )
LEAF_NODE	1714:9	1714:9	8	(
FIELD	1714:10	1714:10	8	0
LEAF_NODE	1714:10	1714:10	9	0
LEAF_NODE	1714:11	1714:11	8	)
LEAF_NODE	1714:12	1714:12	6	;
JUMP_STATEMENT	1716:1	1716:11	3	return ( 1 ) ;
KEYWORD	1716:1	1716:1	4	return
LEAF_NODE	1716:1	1716:1	5	return
DESTINATION	1716:8	1716:8	4	( 1 )
EXPR	1716:8	1716:10	5	( 1 )
LEAF_NODE	1716:8	1716:8	6	(
FIELD	1716:9	1716:9	6	1
LEAF_NODE	1716:9	1716:9	7	1
LEAF_NODE	1716:10	1716:10	6	)
LEAF_NODE	1716:11	1716:11	4	;
LEAF_NODE	1717:0	1717:0	2	}
FUNCTION_DEF	1719:0	1888:0	1	
RETURN_TYPE	1719:0	1719:7	2	static int
LEAF_NODE	1719:0	1719:0	3	static
TYPE_NAME	1719:7	1719:7	3	int
LEAF_NODE	1719:7	1719:7	4	int
FUNCTION_NAME	1720:0	1720:0	2	JPEGSetupEncode
LEAF_NODE	1720:0	1720:0	3	JPEGSetupEncode
PARAMETER_LIST	1720:15	1720:25	2	( TIFF * tif )
LEAF_NODE	1720:15	1720:15	3	(
PARAMETER_DECL	1720:16	1720:22	3	TIFF * tif
TYPE	1720:16	1720:20	4	TIFF *
TYPE_NAME	1720:16	1720:16	5	TIFF
LEAF_NODE	1720:16	1720:16	6	TIFF
POINTER	1720:20	1720:20	5	*
LEAF_NODE	1720:20	1720:20	6	*
NAME	1720:22	1720:22	4	tif
LEAF_NODE	1720:22	1720:22	5	tif
LEAF_NODE	1720:25	1720:25	3	)
LEAF_NODE	1721:0	1721:0	2	{
STATEMENTS	1722:1	1887:1	2	
SIMPLE_DECL	1722:1	1722:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	1722:1	1722:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	1722:1	1722:10	5	JPEGState *
TYPE_NAME	1722:1	1722:1	6	JPEGState
LEAF_NODE	1722:1	1722:1	7	JPEGState
POINTER	1722:10	1722:10	6	*
LEAF_NODE	1722:10	1722:10	7	*
NAME	1722:12	1722:12	5	sp
LEAF_NODE	1722:12	1722:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1722:12	1722:12	5	sp = JState ( tif )
ASSIGN	1722:12	1722:17	6	sp = JState ( tif )
LVAL	1722:12	1722:12	7	sp
NAME	1722:12	1722:12	8	sp
LEAF_NODE	1722:12	1722:12	9	sp
ASSIGN_OP	1722:15	1722:15	7	=
LEAF_NODE	1722:15	1722:15	8	=
RVAL	1722:17	1722:17	7	JState ( tif )
FUNCTION_CALL	1722:17	1722:27	8	JState ( tif )
CALLEE	1722:17	1722:17	9	JState
LEAF_NODE	1722:17	1722:17	10	JState
LEAF_NODE	1722:23	1722:23	9	(
ARGUMENT	1722:24	1722:24	9	tif
FIELD	1722:24	1722:24	10	tif
LEAF_NODE	1722:24	1722:24	11	tif
LEAF_NODE	1722:27	1722:27	9	)
LEAF_NODE	1722:28	1722:28	4	;
SIMPLE_DECL	1723:1	1723:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1723:1	1723:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1723:1	1723:15	5	TIFFDirectory *
TYPE_NAME	1723:1	1723:1	6	TIFFDirectory
LEAF_NODE	1723:1	1723:1	7	TIFFDirectory
POINTER	1723:15	1723:15	6	*
LEAF_NODE	1723:15	1723:15	7	*
NAME	1723:16	1723:16	5	td
LEAF_NODE	1723:16	1723:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1723:16	1723:16	5	td = & tif -> tif_dir
ASSIGN	1723:16	1723:21	6	td = & tif -> tif_dir
LVAL	1723:16	1723:16	7	td
NAME	1723:16	1723:16	8	td
LEAF_NODE	1723:16	1723:16	9	td
ASSIGN_OP	1723:19	1723:19	7	=
LEAF_NODE	1723:19	1723:19	8	=
RVAL	1723:21	1723:21	7	& tif -> tif_dir
UNARY_EXPR	1723:21	1723:22	8	& tif -> tif_dir
UNARY_OPERATOR	1723:21	1723:21	9	&
LEAF_NODE	1723:21	1723:21	10	&
FIELD	1723:22	1723:27	9	tif -> tif_dir
LEAF_NODE	1723:22	1723:22	10	tif
LEAF_NODE	1723:25	1723:25	10	->
LEAF_NODE	1723:27	1723:27	10	tif_dir
LEAF_NODE	1723:34	1723:34	4	;
LEAF_NODE	1724:1	1724:1	3	static
SIMPLE_DECL	1724:8	1724:47	3	const char [ ] module ; module = "JPEGSetupEncode" ;
VAR_DECL	1724:8	1724:19	4	const char [ ] module ; module = "JPEGSetupEncode"
TYPE	1724:8	1724:25	5	const char [ ]
TYPE_NAME	1724:8	1724:14	6	const char
LEAF_NODE	1724:8	1724:8	7	const
LEAF_NODE	1724:14	1724:14	7	char
TYPE_SUFFIX	1724:25	1724:26	6	[ ]
LEAF_NODE	1724:25	1724:25	7	[
LEAF_NODE	1724:26	1724:26	7	]
NAME	1724:19	1724:19	5	module
LEAF_NODE	1724:19	1724:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1724:19	1724:19	5	module = "JPEGSetupEncode"
ASSIGN	1724:19	1724:30	6	module = "JPEGSetupEncode"
LVAL	1724:19	1724:19	7	module
NAME	1724:19	1724:19	8	module
LEAF_NODE	1724:19	1724:19	9	module
ASSIGN_OP	1724:28	1724:28	7	=
LEAF_NODE	1724:28	1724:28	8	=
RVAL	1724:30	1724:30	7	"JPEGSetupEncode"
FIELD	1724:30	1724:30	8	"JPEGSetupEncode"
LEAF_NODE	1724:30	1724:30	9	"JPEGSetupEncode"
LEAF_NODE	1724:47	1724:47	4	;
SELECTION	1727:8	1728:12	3	
KEYWORD	1727:8	1727:8	4	if
LEAF_NODE	1727:8	1727:8	5	if
LEAF_NODE	1727:10	1727:10	4	(
CONDITION	1727:12	1727:12	4	tif -> tif_dir . td_bitspersample == 12
EXPR	1727:12	1727:45	5	tif -> tif_dir . td_bitspersample == 12
FIELD	1727:12	1727:25	6	tif -> tif_dir . td_bitspersample
LEAF_NODE	1727:12	1727:12	7	tif
LEAF_NODE	1727:15	1727:15	7	->
LEAF_NODE	1727:17	1727:17	7	tif_dir
LEAF_NODE	1727:24	1727:24	7	.
LEAF_NODE	1727:25	1727:25	7	td_bitspersample
EQ_OPERATOR	1727:42	1727:42	6	==
LEAF_NODE	1727:42	1727:42	7	==
FIELD	1727:45	1727:45	6	12
LEAF_NODE	1727:45	1727:45	7	12
LEAF_NODE	1727:48	1727:48	4	)
STATEMENTS	1728:12	1728:12	4	
JUMP_STATEMENT	1728:12	1728:64	5	return TIFFReInitJPEG_12 ( tif , COMPRESSION_JPEG , 1 ) ;
KEYWORD	1728:12	1728:12	6	return
LEAF_NODE	1728:12	1728:12	7	return
DESTINATION	1728:19	1728:19	6	TIFFReInitJPEG_12 ( tif , COMPRESSION_JPEG , 1 )
EXPR	1728:19	1728:19	7	TIFFReInitJPEG_12 ( tif , COMPRESSION_JPEG , 1 )
FUNCTION_CALL	1728:19	1728:63	8	TIFFReInitJPEG_12 ( tif , COMPRESSION_JPEG , 1 )
CALLEE	1728:19	1728:19	9	TIFFReInitJPEG_12
LEAF_NODE	1728:19	1728:19	10	TIFFReInitJPEG_12
LEAF_NODE	1728:36	1728:36	9	(
ARGUMENT	1728:38	1728:38	9	tif
FIELD	1728:38	1728:38	10	tif
LEAF_NODE	1728:38	1728:38	11	tif
LEAF_NODE	1728:41	1728:41	9	,
ARGUMENT	1728:43	1728:43	9	COMPRESSION_JPEG
FIELD	1728:43	1728:43	10	COMPRESSION_JPEG
LEAF_NODE	1728:43	1728:43	11	COMPRESSION_JPEG
LEAF_NODE	1728:59	1728:59	9	,
ARGUMENT	1728:61	1728:61	9	1
FIELD	1728:61	1728:61	10	1
LEAF_NODE	1728:61	1728:61	11	1
LEAF_NODE	1728:63	1728:63	9	)
LEAF_NODE	1728:64	1728:64	6	;
EXPR_STATEMENT	1731:8	1731:43	3	JPEGInitializeLibJPEG ( tif , FALSE ) ;
EXPR	1731:8	1731:8	4	JPEGInitializeLibJPEG ( tif , FALSE )
FUNCTION_CALL	1731:8	1731:42	5	JPEGInitializeLibJPEG ( tif , FALSE )
CALLEE	1731:8	1731:8	6	JPEGInitializeLibJPEG
LEAF_NODE	1731:8	1731:8	7	JPEGInitializeLibJPEG
LEAF_NODE	1731:29	1731:29	6	(
ARGUMENT	1731:31	1731:31	6	tif
FIELD	1731:31	1731:31	7	tif
LEAF_NODE	1731:31	1731:31	8	tif
LEAF_NODE	1731:34	1731:34	6	,
ARGUMENT	1731:36	1731:36	6	FALSE
FIELD	1731:36	1731:36	7	FALSE
LEAF_NODE	1731:36	1731:36	8	FALSE
LEAF_NODE	1731:42	1731:42	6	)
LEAF_NODE	1731:43	1731:43	4	;
EXPR_STATEMENT	1733:1	1733:19	3	assert ( sp != NULL ) ;
EXPR	1733:1	1733:1	4	assert ( sp != NULL )
FUNCTION_CALL	1733:1	1733:18	5	assert ( sp != NULL )
CALLEE	1733:1	1733:1	6	assert
LEAF_NODE	1733:1	1733:1	7	assert
LEAF_NODE	1733:7	1733:7	6	(
ARGUMENT	1733:8	1733:14	6	sp != NULL
FIELD	1733:8	1733:8	7	sp
LEAF_NODE	1733:8	1733:8	8	sp
EQ_OPERATOR	1733:11	1733:11	7	!=
LEAF_NODE	1733:11	1733:11	8	!=
FIELD	1733:14	1733:14	7	NULL
LEAF_NODE	1733:14	1733:14	8	NULL
LEAF_NODE	1733:18	1733:18	6	)
LEAF_NODE	1733:19	1733:19	4	;
EXPR_STATEMENT	1734:1	1734:40	3	assert ( ! sp -> cinfo . comm . is_decompressor ) ;
EXPR	1734:1	1734:1	4	assert ( ! sp -> cinfo . comm . is_decompressor )
FUNCTION_CALL	1734:1	1734:39	5	assert ( ! sp -> cinfo . comm . is_decompressor )
CALLEE	1734:1	1734:1	6	assert
LEAF_NODE	1734:1	1734:1	7	assert
LEAF_NODE	1734:7	1734:7	6	(
ARGUMENT	1734:8	1734:8	6	! sp -> cinfo . comm . is_decompressor
UNARY_EXPR	1734:8	1734:9	7	! sp -> cinfo . comm . is_decompressor
UNARY_OPERATOR	1734:8	1734:8	8	!
LEAF_NODE	1734:8	1734:8	9	!
FIELD	1734:9	1734:24	8	sp -> cinfo . comm . is_decompressor
LEAF_NODE	1734:9	1734:9	9	sp
LEAF_NODE	1734:11	1734:11	9	->
LEAF_NODE	1734:13	1734:13	9	cinfo
LEAF_NODE	1734:18	1734:18	9	.
LEAF_NODE	1734:19	1734:19	9	comm
LEAF_NODE	1734:23	1734:23	9	.
LEAF_NODE	1734:24	1734:24	9	is_decompressor
LEAF_NODE	1734:39	1734:39	6	)
LEAF_NODE	1734:40	1734:40	4	;
EXPR_STATEMENT	1736:1	1736:37	3	sp -> photometric = td -> td_photometric ;
EXPR	1736:1	1736:1	4	sp -> photometric = td -> td_photometric
ASSIGN	1736:1	1736:19	5	sp -> photometric = td -> td_photometric
LVAL	1736:1	1736:1	6	sp -> photometric
FIELD	1736:1	1736:5	7	sp -> photometric
LEAF_NODE	1736:1	1736:1	8	sp
LEAF_NODE	1736:3	1736:3	8	->
LEAF_NODE	1736:5	1736:5	8	photometric
ASSIGN_OP	1736:17	1736:17	6	=
LEAF_NODE	1736:17	1736:17	7	=
RVAL	1736:19	1736:19	6	td -> td_photometric
FIELD	1736:19	1736:23	7	td -> td_photometric
LEAF_NODE	1736:19	1736:19	8	td
LEAF_NODE	1736:21	1736:21	8	->
LEAF_NODE	1736:23	1736:23	8	td_photometric
LEAF_NODE	1736:37	1736:37	4	;
SELECTION	1743:1	1743:49	3	
KEYWORD	1743:1	1743:1	4	if
LEAF_NODE	1743:1	1743:1	5	if
LEAF_NODE	1743:4	1743:4	4	(
CONDITION	1743:5	1743:5	4	td -> td_planarconfig == PLANARCONFIG_CONTIG
EXPR	1743:5	1743:28	5	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	1743:5	1743:9	6	td -> td_planarconfig
LEAF_NODE	1743:5	1743:5	7	td
LEAF_NODE	1743:7	1743:7	7	->
LEAF_NODE	1743:9	1743:9	7	td_planarconfig
EQ_OPERATOR	1743:25	1743:25	6	==
LEAF_NODE	1743:25	1743:25	7	==
FIELD	1743:28	1743:28	6	PLANARCONFIG_CONTIG
LEAF_NODE	1743:28	1743:28	7	PLANARCONFIG_CONTIG
LEAF_NODE	1743:47	1743:47	4	)
STATEMENTS	1743:49	1761:1	4	
LEAF_NODE	1743:49	1743:49	5	{
STATEMENTS	1744:2	1751:4	5	
EXPR_STATEMENT	1744:2	1744:55	6	sp -> cinfo . c . input_components = td -> td_samplesperpixel ;
EXPR	1744:2	1744:2	7	sp -> cinfo . c . input_components = td -> td_samplesperpixel
ASSIGN	1744:2	1744:33	8	sp -> cinfo . c . input_components = td -> td_samplesperpixel
LVAL	1744:2	1744:2	9	sp -> cinfo . c . input_components
FIELD	1744:2	1744:14	10	sp -> cinfo . c . input_components
LEAF_NODE	1744:2	1744:2	11	sp
LEAF_NODE	1744:4	1744:4	11	->
LEAF_NODE	1744:6	1744:6	11	cinfo
LEAF_NODE	1744:11	1744:11	11	.
LEAF_NODE	1744:12	1744:12	11	c
LEAF_NODE	1744:13	1744:13	11	.
LEAF_NODE	1744:14	1744:14	11	input_components
ASSIGN_OP	1744:31	1744:31	9	=
LEAF_NODE	1744:31	1744:31	10	=
RVAL	1744:33	1744:33	9	td -> td_samplesperpixel
FIELD	1744:33	1744:37	10	td -> td_samplesperpixel
LEAF_NODE	1744:33	1744:33	11	td
LEAF_NODE	1744:35	1744:35	11	->
LEAF_NODE	1744:37	1744:37	11	td_samplesperpixel
LEAF_NODE	1744:55	1744:55	7	;
SELECTION	1745:2	1745:44	6	
KEYWORD	1745:2	1745:2	7	if
LEAF_NODE	1745:2	1745:2	8	if
LEAF_NODE	1745:5	1745:5	7	(
CONDITION	1745:6	1745:6	7	sp -> photometric == PHOTOMETRIC_YCBCR
EXPR	1745:6	1745:25	8	sp -> photometric == PHOTOMETRIC_YCBCR
FIELD	1745:6	1745:10	9	sp -> photometric
LEAF_NODE	1745:6	1745:6	10	sp
LEAF_NODE	1745:8	1745:8	10	->
LEAF_NODE	1745:10	1745:10	10	photometric
EQ_OPERATOR	1745:22	1745:22	9	==
LEAF_NODE	1745:22	1745:22	10	==
FIELD	1745:25	1745:25	9	PHOTOMETRIC_YCBCR
LEAF_NODE	1745:25	1745:25	10	PHOTOMETRIC_YCBCR
LEAF_NODE	1745:42	1745:42	7	)
STATEMENTS	1745:44	1751:2	7	
LEAF_NODE	1745:44	1745:44	8	{
STATEMENTS	1746:3	1748:5	8	
SELECTION	1746:3	1746:47	9	
KEYWORD	1746:3	1746:3	10	if
LEAF_NODE	1746:3	1746:3	11	if
LEAF_NODE	1746:6	1746:6	10	(
CONDITION	1746:7	1746:7	10	sp -> jpegcolormode == JPEGCOLORMODE_RGB
EXPR	1746:7	1746:28	11	sp -> jpegcolormode == JPEGCOLORMODE_RGB
FIELD	1746:7	1746:11	12	sp -> jpegcolormode
LEAF_NODE	1746:7	1746:7	13	sp
LEAF_NODE	1746:9	1746:9	13	->
LEAF_NODE	1746:11	1746:11	13	jpegcolormode
EQ_OPERATOR	1746:25	1746:25	12	==
LEAF_NODE	1746:25	1746:25	13	==
FIELD	1746:28	1746:28	12	JPEGCOLORMODE_RGB
LEAF_NODE	1746:28	1746:28	13	JPEGCOLORMODE_RGB
LEAF_NODE	1746:45	1746:45	10	)
STATEMENTS	1746:47	1748:3	10	
LEAF_NODE	1746:47	1746:47	11	{
STATEMENTS	1747:4	1747:4	11	
EXPR_STATEMENT	1747:4	1747:40	12	sp -> cinfo . c . in_color_space = JCS_RGB ;
EXPR	1747:4	1747:4	13	sp -> cinfo . c . in_color_space = JCS_RGB
ASSIGN	1747:4	1747:33	14	sp -> cinfo . c . in_color_space = JCS_RGB
LVAL	1747:4	1747:4	15	sp -> cinfo . c . in_color_space
FIELD	1747:4	1747:16	16	sp -> cinfo . c . in_color_space
LEAF_NODE	1747:4	1747:4	17	sp
LEAF_NODE	1747:6	1747:6	17	->
LEAF_NODE	1747:8	1747:8	17	cinfo
LEAF_NODE	1747:13	1747:13	17	.
LEAF_NODE	1747:14	1747:14	17	c
LEAF_NODE	1747:15	1747:15	17	.
LEAF_NODE	1747:16	1747:16	17	in_color_space
ASSIGN_OP	1747:31	1747:31	15	=
LEAF_NODE	1747:31	1747:31	16	=
RVAL	1747:33	1747:33	15	JCS_RGB
FIELD	1747:33	1747:33	16	JCS_RGB
LEAF_NODE	1747:33	1747:33	17	JCS_RGB
LEAF_NODE	1747:40	1747:40	13	;
LEAF_NODE	1748:3	1748:3	11	}
SELECTION	1748:5	1748:10	9	
KEYWORD	1748:5	1748:5	10	else
LEAF_NODE	1748:5	1748:5	11	else
STATEMENTS	1748:10	1750:3	10	
LEAF_NODE	1748:10	1748:10	11	{
STATEMENTS	1749:4	1749:4	11	
EXPR_STATEMENT	1749:4	1749:42	12	sp -> cinfo . c . in_color_space = JCS_YCbCr ;
EXPR	1749:4	1749:4	13	sp -> cinfo . c . in_color_space = JCS_YCbCr
ASSIGN	1749:4	1749:33	14	sp -> cinfo . c . in_color_space = JCS_YCbCr
LVAL	1749:4	1749:4	15	sp -> cinfo . c . in_color_space
FIELD	1749:4	1749:16	16	sp -> cinfo . c . in_color_space
LEAF_NODE	1749:4	1749:4	17	sp
LEAF_NODE	1749:6	1749:6	17	->
LEAF_NODE	1749:8	1749:8	17	cinfo
LEAF_NODE	1749:13	1749:13	17	.
LEAF_NODE	1749:14	1749:14	17	c
LEAF_NODE	1749:15	1749:15	17	.
LEAF_NODE	1749:16	1749:16	17	in_color_space
ASSIGN_OP	1749:31	1749:31	15	=
LEAF_NODE	1749:31	1749:31	16	=
RVAL	1749:33	1749:33	15	JCS_YCbCr
FIELD	1749:33	1749:33	16	JCS_YCbCr
LEAF_NODE	1749:33	1749:33	17	JCS_YCbCr
LEAF_NODE	1749:42	1749:42	13	;
LEAF_NODE	1750:3	1750:3	11	}
LEAF_NODE	1751:2	1751:2	8	}
SELECTION	1751:4	1751:9	6	
KEYWORD	1751:4	1751:4	7	else
LEAF_NODE	1751:4	1751:4	8	else
STATEMENTS	1751:9	1760:2	7	
LEAF_NODE	1751:9	1751:9	8	{
STATEMENTS	1752:3	1758:3	8	
SELECTION	1752:3	1753:4	9	
KEYWORD	1752:3	1752:3	10	if
LEAF_NODE	1752:3	1752:3	11	if
LEAF_NODE	1752:6	1752:6	10	(
CONDITION	1752:7	1752:7	10	( td -> td_photometric == PHOTOMETRIC_MINISWHITE || td -> td_photometric == PHOTOMETRIC_MINISBLACK ) && td -> td_samplesperpixel == 1
EXPR	1752:7	1752:7	11	( td -> td_photometric == PHOTOMETRIC_MINISWHITE || td -> td_photometric == PHOTOMETRIC_MINISBLACK ) && td -> td_samplesperpixel == 1
AND	1752:7	1752:105	12	( td -> td_photometric == PHOTOMETRIC_MINISWHITE || td -> td_photometric == PHOTOMETRIC_MINISBLACK ) && td -> td_samplesperpixel == 1
EXPR	1752:7	1752:100	13	( td -> td_photometric == PHOTOMETRIC_MINISWHITE || td -> td_photometric == PHOTOMETRIC_MINISBLACK )
LEAF_NODE	1752:7	1752:7	14	(
OR	1752:8	1752:56	14	td -> td_photometric == PHOTOMETRIC_MINISWHITE || td -> td_photometric == PHOTOMETRIC_MINISBLACK
EXPR	1752:8	1752:30	15	td -> td_photometric == PHOTOMETRIC_MINISWHITE
FIELD	1752:8	1752:12	16	td -> td_photometric
LEAF_NODE	1752:8	1752:8	17	td
LEAF_NODE	1752:10	1752:10	17	->
LEAF_NODE	1752:12	1752:12	17	td_photometric
EQ_OPERATOR	1752:27	1752:27	16	==
LEAF_NODE	1752:27	1752:27	17	==
FIELD	1752:30	1752:30	16	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1752:30	1752:30	17	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1752:53	1752:53	15	||
EXPR	1752:56	1752:78	15	td -> td_photometric == PHOTOMETRIC_MINISBLACK
FIELD	1752:56	1752:60	16	td -> td_photometric
LEAF_NODE	1752:56	1752:56	17	td
LEAF_NODE	1752:58	1752:58	17	->
LEAF_NODE	1752:60	1752:60	17	td_photometric
EQ_OPERATOR	1752:75	1752:75	16	==
LEAF_NODE	1752:75	1752:75	17	==
FIELD	1752:78	1752:78	16	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1752:78	1752:78	17	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1752:100	1752:100	14	)
LEAF_NODE	1752:102	1752:102	13	&&
EXPR	1752:105	1752:131	13	td -> td_samplesperpixel == 1
FIELD	1752:105	1752:109	14	td -> td_samplesperpixel
LEAF_NODE	1752:105	1752:105	15	td
LEAF_NODE	1752:107	1752:107	15	->
LEAF_NODE	1752:109	1752:109	15	td_samplesperpixel
EQ_OPERATOR	1752:128	1752:128	14	==
LEAF_NODE	1752:128	1752:128	15	==
FIELD	1752:131	1752:131	14	1
LEAF_NODE	1752:131	1752:131	15	1
LEAF_NODE	1752:132	1752:132	10	)
STATEMENTS	1753:4	1753:4	10	
EXPR_STATEMENT	1753:4	1753:46	11	sp -> cinfo . c . in_color_space = JCS_GRAYSCALE ;
EXPR	1753:4	1753:4	12	sp -> cinfo . c . in_color_space = JCS_GRAYSCALE
ASSIGN	1753:4	1753:33	13	sp -> cinfo . c . in_color_space = JCS_GRAYSCALE
LVAL	1753:4	1753:4	14	sp -> cinfo . c . in_color_space
FIELD	1753:4	1753:16	15	sp -> cinfo . c . in_color_space
LEAF_NODE	1753:4	1753:4	16	sp
LEAF_NODE	1753:6	1753:6	16	->
LEAF_NODE	1753:8	1753:8	16	cinfo
LEAF_NODE	1753:13	1753:13	16	.
LEAF_NODE	1753:14	1753:14	16	c
LEAF_NODE	1753:15	1753:15	16	.
LEAF_NODE	1753:16	1753:16	16	in_color_space
ASSIGN_OP	1753:31	1753:31	14	=
LEAF_NODE	1753:31	1753:31	15	=
RVAL	1753:33	1753:33	14	JCS_GRAYSCALE
FIELD	1753:33	1753:33	15	JCS_GRAYSCALE
LEAF_NODE	1753:33	1753:33	16	JCS_GRAYSCALE
LEAF_NODE	1753:46	1753:46	12	;
SELECTION	1754:3	1754:8	9	
KEYWORD	1754:3	1754:3	10	else
LEAF_NODE	1754:3	1754:3	11	else
STATEMENTS	1754:8	1754:8	10	
SELECTION	1754:8	1755:4	11	
KEYWORD	1754:8	1754:8	12	if
LEAF_NODE	1754:8	1754:8	13	if
LEAF_NODE	1754:11	1754:11	12	(
CONDITION	1754:12	1754:12	12	td -> td_photometric == PHOTOMETRIC_RGB && td -> td_samplesperpixel == 3
EXPR	1754:12	1754:12	13	td -> td_photometric == PHOTOMETRIC_RGB && td -> td_samplesperpixel == 3
AND	1754:12	1754:53	14	td -> td_photometric == PHOTOMETRIC_RGB && td -> td_samplesperpixel == 3
EXPR	1754:12	1754:34	15	td -> td_photometric == PHOTOMETRIC_RGB
FIELD	1754:12	1754:16	16	td -> td_photometric
LEAF_NODE	1754:12	1754:12	17	td
LEAF_NODE	1754:14	1754:14	17	->
LEAF_NODE	1754:16	1754:16	17	td_photometric
EQ_OPERATOR	1754:31	1754:31	16	==
LEAF_NODE	1754:31	1754:31	17	==
FIELD	1754:34	1754:34	16	PHOTOMETRIC_RGB
LEAF_NODE	1754:34	1754:34	17	PHOTOMETRIC_RGB
LEAF_NODE	1754:50	1754:50	15	&&
EXPR	1754:53	1754:79	15	td -> td_samplesperpixel == 3
FIELD	1754:53	1754:57	16	td -> td_samplesperpixel
LEAF_NODE	1754:53	1754:53	17	td
LEAF_NODE	1754:55	1754:55	17	->
LEAF_NODE	1754:57	1754:57	17	td_samplesperpixel
EQ_OPERATOR	1754:76	1754:76	16	==
LEAF_NODE	1754:76	1754:76	17	==
FIELD	1754:79	1754:79	16	3
LEAF_NODE	1754:79	1754:79	17	3
LEAF_NODE	1754:80	1754:80	12	)
STATEMENTS	1755:4	1755:4	12	
EXPR_STATEMENT	1755:4	1755:40	13	sp -> cinfo . c . in_color_space = JCS_RGB ;
EXPR	1755:4	1755:4	14	sp -> cinfo . c . in_color_space = JCS_RGB
ASSIGN	1755:4	1755:33	15	sp -> cinfo . c . in_color_space = JCS_RGB
LVAL	1755:4	1755:4	16	sp -> cinfo . c . in_color_space
FIELD	1755:4	1755:16	17	sp -> cinfo . c . in_color_space
LEAF_NODE	1755:4	1755:4	18	sp
LEAF_NODE	1755:6	1755:6	18	->
LEAF_NODE	1755:8	1755:8	18	cinfo
LEAF_NODE	1755:13	1755:13	18	.
LEAF_NODE	1755:14	1755:14	18	c
LEAF_NODE	1755:15	1755:15	18	.
LEAF_NODE	1755:16	1755:16	18	in_color_space
ASSIGN_OP	1755:31	1755:31	16	=
LEAF_NODE	1755:31	1755:31	17	=
RVAL	1755:33	1755:33	16	JCS_RGB
FIELD	1755:33	1755:33	17	JCS_RGB
LEAF_NODE	1755:33	1755:33	18	JCS_RGB
LEAF_NODE	1755:40	1755:40	14	;
SELECTION	1756:3	1756:8	9	
KEYWORD	1756:3	1756:3	10	else
LEAF_NODE	1756:3	1756:3	11	else
STATEMENTS	1756:8	1756:8	10	
SELECTION	1756:8	1757:4	11	
KEYWORD	1756:8	1756:8	12	if
LEAF_NODE	1756:8	1756:8	13	if
LEAF_NODE	1756:11	1756:11	12	(
CONDITION	1756:12	1756:12	12	td -> td_photometric == PHOTOMETRIC_SEPARATED && td -> td_samplesperpixel == 4
EXPR	1756:12	1756:12	13	td -> td_photometric == PHOTOMETRIC_SEPARATED && td -> td_samplesperpixel == 4
AND	1756:12	1756:59	14	td -> td_photometric == PHOTOMETRIC_SEPARATED && td -> td_samplesperpixel == 4
EXPR	1756:12	1756:34	15	td -> td_photometric == PHOTOMETRIC_SEPARATED
FIELD	1756:12	1756:16	16	td -> td_photometric
LEAF_NODE	1756:12	1756:12	17	td
LEAF_NODE	1756:14	1756:14	17	->
LEAF_NODE	1756:16	1756:16	17	td_photometric
EQ_OPERATOR	1756:31	1756:31	16	==
LEAF_NODE	1756:31	1756:31	17	==
FIELD	1756:34	1756:34	16	PHOTOMETRIC_SEPARATED
LEAF_NODE	1756:34	1756:34	17	PHOTOMETRIC_SEPARATED
LEAF_NODE	1756:56	1756:56	15	&&
EXPR	1756:59	1756:85	15	td -> td_samplesperpixel == 4
FIELD	1756:59	1756:63	16	td -> td_samplesperpixel
LEAF_NODE	1756:59	1756:59	17	td
LEAF_NODE	1756:61	1756:61	17	->
LEAF_NODE	1756:63	1756:63	17	td_samplesperpixel
EQ_OPERATOR	1756:82	1756:82	16	==
LEAF_NODE	1756:82	1756:82	17	==
FIELD	1756:85	1756:85	16	4
LEAF_NODE	1756:85	1756:85	17	4
LEAF_NODE	1756:86	1756:86	12	)
STATEMENTS	1757:4	1757:4	12	
EXPR_STATEMENT	1757:4	1757:41	13	sp -> cinfo . c . in_color_space = JCS_CMYK ;
EXPR	1757:4	1757:4	14	sp -> cinfo . c . in_color_space = JCS_CMYK
ASSIGN	1757:4	1757:33	15	sp -> cinfo . c . in_color_space = JCS_CMYK
LVAL	1757:4	1757:4	16	sp -> cinfo . c . in_color_space
FIELD	1757:4	1757:16	17	sp -> cinfo . c . in_color_space
LEAF_NODE	1757:4	1757:4	18	sp
LEAF_NODE	1757:6	1757:6	18	->
LEAF_NODE	1757:8	1757:8	18	cinfo
LEAF_NODE	1757:13	1757:13	18	.
LEAF_NODE	1757:14	1757:14	18	c
LEAF_NODE	1757:15	1757:15	18	.
LEAF_NODE	1757:16	1757:16	18	in_color_space
ASSIGN_OP	1757:31	1757:31	16	=
LEAF_NODE	1757:31	1757:31	17	=
RVAL	1757:33	1757:33	16	JCS_CMYK
FIELD	1757:33	1757:33	17	JCS_CMYK
LEAF_NODE	1757:33	1757:33	18	JCS_CMYK
LEAF_NODE	1757:41	1757:41	14	;
SELECTION	1758:3	1759:4	9	
KEYWORD	1758:3	1758:3	10	else
LEAF_NODE	1758:3	1758:3	11	else
STATEMENTS	1759:4	1759:4	10	
EXPR_STATEMENT	1759:4	1759:44	11	sp -> cinfo . c . in_color_space = JCS_UNKNOWN ;
EXPR	1759:4	1759:4	12	sp -> cinfo . c . in_color_space = JCS_UNKNOWN
ASSIGN	1759:4	1759:33	13	sp -> cinfo . c . in_color_space = JCS_UNKNOWN
LVAL	1759:4	1759:4	14	sp -> cinfo . c . in_color_space
FIELD	1759:4	1759:16	15	sp -> cinfo . c . in_color_space
LEAF_NODE	1759:4	1759:4	16	sp
LEAF_NODE	1759:6	1759:6	16	->
LEAF_NODE	1759:8	1759:8	16	cinfo
LEAF_NODE	1759:13	1759:13	16	.
LEAF_NODE	1759:14	1759:14	16	c
LEAF_NODE	1759:15	1759:15	16	.
LEAF_NODE	1759:16	1759:16	16	in_color_space
ASSIGN_OP	1759:31	1759:31	14	=
LEAF_NODE	1759:31	1759:31	15	=
RVAL	1759:33	1759:33	14	JCS_UNKNOWN
FIELD	1759:33	1759:33	15	JCS_UNKNOWN
LEAF_NODE	1759:33	1759:33	16	JCS_UNKNOWN
LEAF_NODE	1759:44	1759:44	12	;
LEAF_NODE	1760:2	1760:2	8	}
LEAF_NODE	1761:1	1761:1	5	}
SELECTION	1761:3	1761:8	3	
KEYWORD	1761:3	1761:3	4	else
LEAF_NODE	1761:3	1761:3	5	else
STATEMENTS	1761:8	1764:1	4	
LEAF_NODE	1761:8	1761:8	5	{
STATEMENTS	1762:2	1763:2	5	
EXPR_STATEMENT	1762:2	1762:34	6	sp -> cinfo . c . input_components = 1 ;
EXPR	1762:2	1762:2	7	sp -> cinfo . c . input_components = 1
ASSIGN	1762:2	1762:33	8	sp -> cinfo . c . input_components = 1
LVAL	1762:2	1762:2	9	sp -> cinfo . c . input_components
FIELD	1762:2	1762:14	10	sp -> cinfo . c . input_components
LEAF_NODE	1762:2	1762:2	11	sp
LEAF_NODE	1762:4	1762:4	11	->
LEAF_NODE	1762:6	1762:6	11	cinfo
LEAF_NODE	1762:11	1762:11	11	.
LEAF_NODE	1762:12	1762:12	11	c
LEAF_NODE	1762:13	1762:13	11	.
LEAF_NODE	1762:14	1762:14	11	input_components
ASSIGN_OP	1762:31	1762:31	9	=
LEAF_NODE	1762:31	1762:31	10	=
RVAL	1762:33	1762:33	9	1
FIELD	1762:33	1762:33	10	1
LEAF_NODE	1762:33	1762:33	11	1
LEAF_NODE	1762:34	1762:34	7	;
EXPR_STATEMENT	1763:2	1763:42	6	sp -> cinfo . c . in_color_space = JCS_UNKNOWN ;
EXPR	1763:2	1763:2	7	sp -> cinfo . c . in_color_space = JCS_UNKNOWN
ASSIGN	1763:2	1763:31	8	sp -> cinfo . c . in_color_space = JCS_UNKNOWN
LVAL	1763:2	1763:2	9	sp -> cinfo . c . in_color_space
FIELD	1763:2	1763:14	10	sp -> cinfo . c . in_color_space
LEAF_NODE	1763:2	1763:2	11	sp
LEAF_NODE	1763:4	1763:4	11	->
LEAF_NODE	1763:6	1763:6	11	cinfo
LEAF_NODE	1763:11	1763:11	11	.
LEAF_NODE	1763:12	1763:12	11	c
LEAF_NODE	1763:13	1763:13	11	.
LEAF_NODE	1763:14	1763:14	11	in_color_space
ASSIGN_OP	1763:29	1763:29	9	=
LEAF_NODE	1763:29	1763:29	10	=
RVAL	1763:31	1763:31	9	JCS_UNKNOWN
FIELD	1763:31	1763:31	10	JCS_UNKNOWN
LEAF_NODE	1763:31	1763:31	11	JCS_UNKNOWN
LEAF_NODE	1763:42	1763:42	7	;
LEAF_NODE	1764:1	1764:1	5	}
SELECTION	1765:1	1766:2	3	
KEYWORD	1765:1	1765:1	4	if
LEAF_NODE	1765:1	1765:1	5	if
LEAF_NODE	1765:4	1765:4	4	(
CONDITION	1765:5	1765:5	4	! TIFFjpeg_set_defaults ( sp )
EXPR	1765:5	1765:5	5	! TIFFjpeg_set_defaults ( sp )
UNARY_EXPR	1765:5	1765:6	6	! TIFFjpeg_set_defaults ( sp )
UNARY_OPERATOR	1765:5	1765:5	7	!
LEAF_NODE	1765:5	1765:5	8	!
FUNCTION_CALL	1765:6	1765:30	7	TIFFjpeg_set_defaults ( sp )
CALLEE	1765:6	1765:6	8	TIFFjpeg_set_defaults
LEAF_NODE	1765:6	1765:6	9	TIFFjpeg_set_defaults
LEAF_NODE	1765:27	1765:27	8	(
ARGUMENT	1765:28	1765:28	8	sp
FIELD	1765:28	1765:28	9	sp
LEAF_NODE	1765:28	1765:28	10	sp
LEAF_NODE	1765:30	1765:30	8	)
LEAF_NODE	1765:31	1765:31	4	)
STATEMENTS	1766:2	1766:2	4	
JUMP_STATEMENT	1766:2	1766:12	5	return ( 0 ) ;
KEYWORD	1766:2	1766:2	6	return
LEAF_NODE	1766:2	1766:2	7	return
DESTINATION	1766:9	1766:9	6	( 0 )
EXPR	1766:9	1766:11	7	( 0 )
LEAF_NODE	1766:9	1766:9	8	(
FIELD	1766:10	1766:10	8	0
LEAF_NODE	1766:10	1766:10	9	0
LEAF_NODE	1766:11	1766:11	8	)
LEAF_NODE	1766:12	1766:12	6	;
SELECTION	1768:1	1768:26	3	
KEYWORD	1768:1	1768:1	4	switch
LEAF_NODE	1768:1	1768:1	5	switch
LEAF_NODE	1768:8	1768:8	4	(
CONDITION	1768:9	1768:9	4	sp -> photometric
EXPR	1768:9	1768:9	5	sp -> photometric
FIELD	1768:9	1768:13	6	sp -> photometric
LEAF_NODE	1768:9	1768:9	7	sp
LEAF_NODE	1768:11	1768:11	7	->
LEAF_NODE	1768:13	1768:13	7	photometric
LEAF_NODE	1768:24	1768:24	4	)
STATEMENTS	1768:26	1819:1	4	
LEAF_NODE	1768:26	1768:26	5	{
STATEMENTS	1769:1	1818:2	5	
LABEL	1769:1	1769:23	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	1769:1	1769:1	7	case
LEAF_NODE	1769:6	1769:6	7	PHOTOMETRIC_YCBCR
LEAF_NODE	1769:23	1769:23	7	:
EXPR_STATEMENT	1770:2	1770:45	6	sp -> h_sampling = td -> td_ycbcrsubsampling [ 0 ] ;
EXPR	1770:2	1770:2	7	sp -> h_sampling = td -> td_ycbcrsubsampling [ 0 ]
ASSIGN	1770:2	1770:19	8	sp -> h_sampling = td -> td_ycbcrsubsampling [ 0 ]
LVAL	1770:2	1770:2	9	sp -> h_sampling
FIELD	1770:2	1770:6	10	sp -> h_sampling
LEAF_NODE	1770:2	1770:2	11	sp
LEAF_NODE	1770:4	1770:4	11	->
LEAF_NODE	1770:6	1770:6	11	h_sampling
ASSIGN_OP	1770:17	1770:17	9	=
LEAF_NODE	1770:17	1770:17	10	=
RVAL	1770:19	1770:19	9	td -> td_ycbcrsubsampling [ 0 ]
FIELD	1770:19	1770:44	10	td -> td_ycbcrsubsampling [ 0 ]
LEAF_NODE	1770:19	1770:19	11	td
LEAF_NODE	1770:21	1770:21	11	->
LEAF_NODE	1770:23	1770:23	11	td_ycbcrsubsampling
LEAF_NODE	1770:42	1770:42	11	[
EXPR	1770:43	1770:43	11	0
FIELD	1770:43	1770:43	12	0
LEAF_NODE	1770:43	1770:43	13	0
LEAF_NODE	1770:44	1770:44	11	]
LEAF_NODE	1770:45	1770:45	7	;
EXPR_STATEMENT	1771:2	1771:45	6	sp -> v_sampling = td -> td_ycbcrsubsampling [ 1 ] ;
EXPR	1771:2	1771:2	7	sp -> v_sampling = td -> td_ycbcrsubsampling [ 1 ]
ASSIGN	1771:2	1771:19	8	sp -> v_sampling = td -> td_ycbcrsubsampling [ 1 ]
LVAL	1771:2	1771:2	9	sp -> v_sampling
FIELD	1771:2	1771:6	10	sp -> v_sampling
LEAF_NODE	1771:2	1771:2	11	sp
LEAF_NODE	1771:4	1771:4	11	->
LEAF_NODE	1771:6	1771:6	11	v_sampling
ASSIGN_OP	1771:17	1771:17	9	=
LEAF_NODE	1771:17	1771:17	10	=
RVAL	1771:19	1771:19	9	td -> td_ycbcrsubsampling [ 1 ]
FIELD	1771:19	1771:44	10	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	1771:19	1771:19	11	td
LEAF_NODE	1771:21	1771:21	11	->
LEAF_NODE	1771:23	1771:23	11	td_ycbcrsubsampling
LEAF_NODE	1771:42	1771:42	11	[
EXPR	1771:43	1771:43	11	1
FIELD	1771:43	1771:43	12	1
LEAF_NODE	1771:43	1771:43	13	1
LEAF_NODE	1771:44	1771:44	11	]
LEAF_NODE	1771:45	1771:45	7	;
SELECTION	1772:16	1773:16	6	
KEYWORD	1772:16	1772:16	7	if
LEAF_NODE	1772:16	1772:16	8	if
LEAF_NODE	1772:18	1772:18	7	(
CONDITION	1772:20	1772:20	7	sp -> h_sampling == 0 || sp -> v_sampling == 0
EXPR	1772:20	1772:20	8	sp -> h_sampling == 0 || sp -> v_sampling == 0
OR	1772:20	1772:43	9	sp -> h_sampling == 0 || sp -> v_sampling == 0
EXPR	1772:20	1772:38	10	sp -> h_sampling == 0
FIELD	1772:20	1772:24	11	sp -> h_sampling
LEAF_NODE	1772:20	1772:20	12	sp
LEAF_NODE	1772:22	1772:22	12	->
LEAF_NODE	1772:24	1772:24	12	h_sampling
EQ_OPERATOR	1772:35	1772:35	11	==
LEAF_NODE	1772:35	1772:35	12	==
FIELD	1772:38	1772:38	11	0
LEAF_NODE	1772:38	1772:38	12	0
LEAF_NODE	1772:40	1772:40	10	||
EXPR	1772:43	1772:61	10	sp -> v_sampling == 0
FIELD	1772:43	1772:47	11	sp -> v_sampling
LEAF_NODE	1772:43	1772:43	12	sp
LEAF_NODE	1772:45	1772:45	12	->
LEAF_NODE	1772:47	1772:47	12	v_sampling
EQ_OPERATOR	1772:58	1772:58	11	==
LEAF_NODE	1772:58	1772:58	12	==
FIELD	1772:61	1772:61	11	0
LEAF_NODE	1772:61	1772:61	12	0
LEAF_NODE	1772:63	1772:63	7	)
STATEMENTS	1773:16	1777:16	7	
LEAF_NODE	1773:16	1773:16	8	{
STATEMENTS	1774:20	1776:20	8	
EXPR_STATEMENT	1774:20	1775:73	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalig horizontal/vertical sampling value" ) ;
EXPR	1774:20	1774:20	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalig horizontal/vertical sampling value" )
FUNCTION_CALL	1774:20	1775:72	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalig horizontal/vertical sampling value" )
CALLEE	1774:20	1774:20	12	TIFFErrorExt
LEAF_NODE	1774:20	1774:20	13	TIFFErrorExt
LEAF_NODE	1774:32	1774:32	12	(
ARGUMENT	1774:33	1774:33	12	tif -> tif_clientdata
FIELD	1774:33	1774:38	13	tif -> tif_clientdata
LEAF_NODE	1774:33	1774:33	14	tif
LEAF_NODE	1774:36	1774:36	14	->
LEAF_NODE	1774:38	1774:38	14	tif_clientdata
LEAF_NODE	1774:52	1774:52	12	,
ARGUMENT	1774:54	1774:54	12	module
FIELD	1774:54	1774:54	13	module
LEAF_NODE	1774:54	1774:54	14	module
LEAF_NODE	1774:60	1774:60	12	,
ARGUMENT	1775:28	1775:28	12	"Invalig horizontal/vertical sampling value"
FIELD	1775:28	1775:28	13	"Invalig horizontal/vertical sampling value"
LEAF_NODE	1775:28	1775:28	14	"Invalig horizontal/vertical sampling value"
LEAF_NODE	1775:72	1775:72	12	)
LEAF_NODE	1775:73	1775:73	10	;
JUMP_STATEMENT	1776:20	1776:30	9	return ( 0 ) ;
KEYWORD	1776:20	1776:20	10	return
LEAF_NODE	1776:20	1776:20	11	return
DESTINATION	1776:27	1776:27	10	( 0 )
EXPR	1776:27	1776:29	11	( 0 )
LEAF_NODE	1776:27	1776:27	12	(
FIELD	1776:28	1776:28	12	0
LEAF_NODE	1776:28	1776:28	13	0
LEAF_NODE	1776:29	1776:29	12	)
LEAF_NODE	1776:30	1776:30	10	;
LEAF_NODE	1777:16	1777:16	8	}
SELECTION	1778:16	1779:16	6	
KEYWORD	1778:16	1778:16	7	if
LEAF_NODE	1778:16	1778:16	8	if
LEAF_NODE	1778:18	1778:18	7	(
CONDITION	1778:20	1778:20	7	td -> td_bitspersample > 16
EXPR	1778:20	1778:43	8	td -> td_bitspersample > 16
FIELD	1778:20	1778:24	9	td -> td_bitspersample
LEAF_NODE	1778:20	1778:20	10	td
LEAF_NODE	1778:22	1778:22	10	->
LEAF_NODE	1778:24	1778:24	10	td_bitspersample
REL_OPERATOR	1778:41	1778:41	9	>
LEAF_NODE	1778:41	1778:41	10	>
FIELD	1778:43	1778:43	9	16
LEAF_NODE	1778:43	1778:43	10	16
LEAF_NODE	1778:46	1778:46	7	)
STATEMENTS	1779:16	1784:16	7	
LEAF_NODE	1779:16	1779:16	8	{
STATEMENTS	1780:20	1783:20	8	
EXPR_STATEMENT	1780:20	1782:54	9	TIFFErrorExt ( tif -> tif_clientdata , module , "BitsPerSample %d not allowed for JPEG" , td -> td_bitspersample ) ;
EXPR	1780:20	1780:20	10	TIFFErrorExt ( tif -> tif_clientdata , module , "BitsPerSample %d not allowed for JPEG" , td -> td_bitspersample )
FUNCTION_CALL	1780:20	1782:53	11	TIFFErrorExt ( tif -> tif_clientdata , module , "BitsPerSample %d not allowed for JPEG" , td -> td_bitspersample )
CALLEE	1780:20	1780:20	12	TIFFErrorExt
LEAF_NODE	1780:20	1780:20	13	TIFFErrorExt
LEAF_NODE	1780:32	1780:32	12	(
ARGUMENT	1780:33	1780:33	12	tif -> tif_clientdata
FIELD	1780:33	1780:38	13	tif -> tif_clientdata
LEAF_NODE	1780:33	1780:33	14	tif
LEAF_NODE	1780:36	1780:36	14	->
LEAF_NODE	1780:38	1780:38	14	tif_clientdata
LEAF_NODE	1780:52	1780:52	12	,
ARGUMENT	1780:54	1780:54	12	module
FIELD	1780:54	1780:54	13	module
LEAF_NODE	1780:54	1780:54	14	module
LEAF_NODE	1780:60	1780:60	12	,
ARGUMENT	1781:33	1781:33	12	"BitsPerSample %d not allowed for JPEG"
FIELD	1781:33	1781:33	13	"BitsPerSample %d not allowed for JPEG"
LEAF_NODE	1781:33	1781:33	14	"BitsPerSample %d not allowed for JPEG"
LEAF_NODE	1781:72	1781:72	12	,
ARGUMENT	1782:33	1782:33	12	td -> td_bitspersample
FIELD	1782:33	1782:37	13	td -> td_bitspersample
LEAF_NODE	1782:33	1782:33	14	td
LEAF_NODE	1782:35	1782:35	14	->
LEAF_NODE	1782:37	1782:37	14	td_bitspersample
LEAF_NODE	1782:53	1782:53	12	)
LEAF_NODE	1782:54	1782:54	10	;
JUMP_STATEMENT	1783:20	1783:30	9	return ( 0 ) ;
KEYWORD	1783:20	1783:20	10	return
LEAF_NODE	1783:20	1783:20	11	return
DESTINATION	1783:27	1783:27	10	( 0 )
EXPR	1783:27	1783:29	11	( 0 )
LEAF_NODE	1783:27	1783:27	12	(
FIELD	1783:28	1783:28	12	0
LEAF_NODE	1783:28	1783:28	13	0
LEAF_NODE	1783:29	1783:29	12	)
LEAF_NODE	1783:30	1783:30	10	;
LEAF_NODE	1784:16	1784:16	8	}
LEAF_NODE	1791:2	1791:2	6	{
STATEMENTS	1792:3	1793:3	6	
SIMPLE_DECL	1792:3	1792:13	7	float * ref ;
VAR_DECL	1792:3	1792:10	8	float * ref
TYPE	1792:3	1792:9	9	float *
TYPE_NAME	1792:3	1792:3	10	float
LEAF_NODE	1792:3	1792:3	11	float
POINTER	1792:9	1792:9	10	*
LEAF_NODE	1792:9	1792:9	11	*
NAME	1792:10	1792:10	9	ref
LEAF_NODE	1792:10	1792:10	10	ref
LEAF_NODE	1792:13	1792:13	8	;
SELECTION	1793:3	1794:14	7	
KEYWORD	1793:3	1793:3	8	if
LEAF_NODE	1793:3	1793:3	9	if
LEAF_NODE	1793:6	1793:6	8	(
CONDITION	1793:7	1793:7	8	! TIFFGetField ( tif , TIFFTAG_REFERENCEBLACKWHITE , & ref )
EXPR	1793:7	1793:7	9	! TIFFGetField ( tif , TIFFTAG_REFERENCEBLACKWHITE , & ref )
UNARY_EXPR	1793:7	1793:8	10	! TIFFGetField ( tif , TIFFTAG_REFERENCEBLACKWHITE , & ref )
UNARY_OPERATOR	1793:7	1793:7	11	!
LEAF_NODE	1793:7	1793:7	12	!
FUNCTION_CALL	1793:8	1794:11	11	TIFFGetField ( tif , TIFFTAG_REFERENCEBLACKWHITE , & ref )
CALLEE	1793:8	1793:8	12	TIFFGetField
LEAF_NODE	1793:8	1793:8	13	TIFFGetField
LEAF_NODE	1793:20	1793:20	12	(
ARGUMENT	1793:21	1793:21	12	tif
FIELD	1793:21	1793:21	13	tif
LEAF_NODE	1793:21	1793:21	14	tif
LEAF_NODE	1793:24	1793:24	12	,
ARGUMENT	1793:26	1793:26	12	TIFFTAG_REFERENCEBLACKWHITE
FIELD	1793:26	1793:26	13	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	1793:26	1793:26	14	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	1793:53	1793:53	12	,
ARGUMENT	1794:7	1794:7	12	& ref
UNARY_EXPR	1794:7	1794:8	13	& ref
UNARY_OPERATOR	1794:7	1794:7	14	&
LEAF_NODE	1794:7	1794:7	15	&
FIELD	1794:8	1794:8	14	ref
LEAF_NODE	1794:8	1794:8	15	ref
LEAF_NODE	1794:11	1794:11	12	)
LEAF_NODE	1794:12	1794:12	8	)
STATEMENTS	1794:14	1805:3	8	
LEAF_NODE	1794:14	1794:14	9	{
STATEMENTS	1795:4	1803:4	9	
SIMPLE_DECL	1795:4	1795:18	10	float [ 6 ] refbw ;
VAR_DECL	1795:4	1795:10	11	float [ 6 ] refbw
TYPE	1795:4	1795:15	12	float [ 6 ]
TYPE_NAME	1795:4	1795:4	13	float
LEAF_NODE	1795:4	1795:4	14	float
TYPE_SUFFIX	1795:15	1795:17	13	[ 6 ]
LEAF_NODE	1795:15	1795:15	14	[
FIELD	1795:16	1795:16	14	6
LEAF_NODE	1795:16	1795:16	15	6
LEAF_NODE	1795:17	1795:17	14	]
NAME	1795:10	1795:10	12	refbw
LEAF_NODE	1795:10	1795:10	13	refbw
LEAF_NODE	1795:18	1795:18	11	;
SIMPLE_DECL	1796:4	1796:41	10	long top ; top = 1L << td -> td_bitspersample ;
VAR_DECL	1796:4	1796:9	11	long top ; top = 1L << td -> td_bitspersample
TYPE	1796:4	1796:4	12	long
TYPE_NAME	1796:4	1796:4	13	long
LEAF_NODE	1796:4	1796:4	14	long
NAME	1796:9	1796:9	12	top
LEAF_NODE	1796:9	1796:9	13	top
LEAF_NODE	0:0	0:0	12	;
INIT	1796:9	1796:9	12	top = 1L << td -> td_bitspersample
ASSIGN	1796:9	1796:15	13	top = 1L << td -> td_bitspersample
LVAL	1796:9	1796:9	14	top
NAME	1796:9	1796:9	15	top
LEAF_NODE	1796:9	1796:9	16	top
ASSIGN_OP	1796:13	1796:13	14	=
LEAF_NODE	1796:13	1796:13	15	=
RVAL	1796:15	1796:21	14	1L << td -> td_bitspersample
FIELD	1796:15	1796:15	15	1L
LEAF_NODE	1796:15	1796:15	16	1L
LEAF_NODE	1796:18	1796:18	15	<<
FIELD	1796:21	1796:25	15	td -> td_bitspersample
LEAF_NODE	1796:21	1796:21	16	td
LEAF_NODE	1796:23	1796:23	16	->
LEAF_NODE	1796:25	1796:25	16	td_bitspersample
LEAF_NODE	1796:41	1796:41	11	;
EXPR_STATEMENT	1797:4	1797:16	10	refbw [ 0 ] = 0 ;
EXPR	1797:4	1797:4	11	refbw [ 0 ] = 0
ASSIGN	1797:4	1797:15	12	refbw [ 0 ] = 0
LVAL	1797:4	1797:4	13	refbw [ 0 ]
FIELD	1797:4	1797:11	14	refbw [ 0 ]
LEAF_NODE	1797:4	1797:4	15	refbw
LEAF_NODE	1797:9	1797:9	15	[
EXPR	1797:10	1797:10	15	0
FIELD	1797:10	1797:10	16	0
LEAF_NODE	1797:10	1797:10	17	0
LEAF_NODE	1797:11	1797:11	15	]
ASSIGN_OP	1797:13	1797:13	13	=
LEAF_NODE	1797:13	1797:13	14	=
RVAL	1797:15	1797:15	13	0
FIELD	1797:15	1797:15	14	0
LEAF_NODE	1797:15	1797:15	15	0
LEAF_NODE	1797:16	1797:16	11	;
EXPR_STATEMENT	1798:4	1798:30	10	refbw [ 1 ] = ( float ) ( top - 1L ) ;
EXPR	1798:4	1798:4	11	refbw [ 1 ] = ( float ) ( top - 1L )
ASSIGN	1798:4	1798:15	12	refbw [ 1 ] = ( float ) ( top - 1L )
LVAL	1798:4	1798:4	13	refbw [ 1 ]
FIELD	1798:4	1798:11	14	refbw [ 1 ]
LEAF_NODE	1798:4	1798:4	15	refbw
LEAF_NODE	1798:9	1798:9	15	[
EXPR	1798:10	1798:10	15	1
FIELD	1798:10	1798:10	16	1
LEAF_NODE	1798:10	1798:10	17	1
LEAF_NODE	1798:11	1798:11	15	]
ASSIGN_OP	1798:13	1798:13	13	=
LEAF_NODE	1798:13	1798:13	14	=
RVAL	1798:15	1798:29	13	( float ) ( top - 1L )
LEAF_NODE	1798:15	1798:15	14	(
TYPE_NAME	1798:16	1798:16	14	float
LEAF_NODE	1798:16	1798:16	15	float
LEAF_NODE	1798:21	1798:21	14	)
LEAF_NODE	1798:22	1798:22	14	(
FIELD	1798:23	1798:23	14	top
LEAF_NODE	1798:23	1798:23	15	top
LEAF_NODE	1798:26	1798:26	14	-
FIELD	1798:27	1798:27	14	1L
LEAF_NODE	1798:27	1798:27	15	1L
LEAF_NODE	1798:29	1798:29	14	)
LEAF_NODE	1798:30	1798:30	11	;
EXPR_STATEMENT	1799:4	1799:30	10	refbw [ 2 ] = ( float ) ( top >> 1 ) ;
EXPR	1799:4	1799:4	11	refbw [ 2 ] = ( float ) ( top >> 1 )
ASSIGN	1799:4	1799:15	12	refbw [ 2 ] = ( float ) ( top >> 1 )
LVAL	1799:4	1799:4	13	refbw [ 2 ]
FIELD	1799:4	1799:11	14	refbw [ 2 ]
LEAF_NODE	1799:4	1799:4	15	refbw
LEAF_NODE	1799:9	1799:9	15	[
EXPR	1799:10	1799:10	15	2
FIELD	1799:10	1799:10	16	2
LEAF_NODE	1799:10	1799:10	17	2
LEAF_NODE	1799:11	1799:11	15	]
ASSIGN_OP	1799:13	1799:13	13	=
LEAF_NODE	1799:13	1799:13	14	=
RVAL	1799:15	1799:29	13	( float ) ( top >> 1 )
LEAF_NODE	1799:15	1799:15	14	(
TYPE_NAME	1799:16	1799:16	14	float
LEAF_NODE	1799:16	1799:16	15	float
LEAF_NODE	1799:21	1799:21	14	)
LEAF_NODE	1799:22	1799:22	14	(
FIELD	1799:23	1799:23	14	top
LEAF_NODE	1799:23	1799:23	15	top
LEAF_NODE	1799:26	1799:26	14	>>
FIELD	1799:28	1799:28	14	1
LEAF_NODE	1799:28	1799:28	15	1
LEAF_NODE	1799:29	1799:29	14	)
LEAF_NODE	1799:30	1799:30	11	;
EXPR_STATEMENT	1800:4	1800:23	10	refbw [ 3 ] = refbw [ 1 ] ;
EXPR	1800:4	1800:4	11	refbw [ 3 ] = refbw [ 1 ]
ASSIGN	1800:4	1800:15	12	refbw [ 3 ] = refbw [ 1 ]
LVAL	1800:4	1800:4	13	refbw [ 3 ]
FIELD	1800:4	1800:11	14	refbw [ 3 ]
LEAF_NODE	1800:4	1800:4	15	refbw
LEAF_NODE	1800:9	1800:9	15	[
EXPR	1800:10	1800:10	15	3
FIELD	1800:10	1800:10	16	3
LEAF_NODE	1800:10	1800:10	17	3
LEAF_NODE	1800:11	1800:11	15	]
ASSIGN_OP	1800:13	1800:13	13	=
LEAF_NODE	1800:13	1800:13	14	=
RVAL	1800:15	1800:15	13	refbw [ 1 ]
FIELD	1800:15	1800:22	14	refbw [ 1 ]
LEAF_NODE	1800:15	1800:15	15	refbw
LEAF_NODE	1800:20	1800:20	15	[
EXPR	1800:21	1800:21	15	1
FIELD	1800:21	1800:21	16	1
LEAF_NODE	1800:21	1800:21	17	1
LEAF_NODE	1800:22	1800:22	15	]
LEAF_NODE	1800:23	1800:23	11	;
EXPR_STATEMENT	1801:4	1801:23	10	refbw [ 4 ] = refbw [ 2 ] ;
EXPR	1801:4	1801:4	11	refbw [ 4 ] = refbw [ 2 ]
ASSIGN	1801:4	1801:15	12	refbw [ 4 ] = refbw [ 2 ]
LVAL	1801:4	1801:4	13	refbw [ 4 ]
FIELD	1801:4	1801:11	14	refbw [ 4 ]
LEAF_NODE	1801:4	1801:4	15	refbw
LEAF_NODE	1801:9	1801:9	15	[
EXPR	1801:10	1801:10	15	4
FIELD	1801:10	1801:10	16	4
LEAF_NODE	1801:10	1801:10	17	4
LEAF_NODE	1801:11	1801:11	15	]
ASSIGN_OP	1801:13	1801:13	13	=
LEAF_NODE	1801:13	1801:13	14	=
RVAL	1801:15	1801:15	13	refbw [ 2 ]
FIELD	1801:15	1801:22	14	refbw [ 2 ]
LEAF_NODE	1801:15	1801:15	15	refbw
LEAF_NODE	1801:20	1801:20	15	[
EXPR	1801:21	1801:21	15	2
FIELD	1801:21	1801:21	16	2
LEAF_NODE	1801:21	1801:21	17	2
LEAF_NODE	1801:22	1801:22	15	]
LEAF_NODE	1801:23	1801:23	11	;
EXPR_STATEMENT	1802:4	1802:23	10	refbw [ 5 ] = refbw [ 1 ] ;
EXPR	1802:4	1802:4	11	refbw [ 5 ] = refbw [ 1 ]
ASSIGN	1802:4	1802:15	12	refbw [ 5 ] = refbw [ 1 ]
LVAL	1802:4	1802:4	13	refbw [ 5 ]
FIELD	1802:4	1802:11	14	refbw [ 5 ]
LEAF_NODE	1802:4	1802:4	15	refbw
LEAF_NODE	1802:9	1802:9	15	[
EXPR	1802:10	1802:10	15	5
FIELD	1802:10	1802:10	16	5
LEAF_NODE	1802:10	1802:10	17	5
LEAF_NODE	1802:11	1802:11	15	]
ASSIGN_OP	1802:13	1802:13	13	=
LEAF_NODE	1802:13	1802:13	14	=
RVAL	1802:15	1802:15	13	refbw [ 1 ]
FIELD	1802:15	1802:22	14	refbw [ 1 ]
LEAF_NODE	1802:15	1802:15	15	refbw
LEAF_NODE	1802:20	1802:20	15	[
EXPR	1802:21	1802:21	15	1
FIELD	1802:21	1802:21	16	1
LEAF_NODE	1802:21	1802:21	17	1
LEAF_NODE	1802:22	1802:22	15	]
LEAF_NODE	1802:23	1802:23	11	;
EXPR_STATEMENT	1803:4	1804:16	10	TIFFSetField ( tif , TIFFTAG_REFERENCEBLACKWHITE , refbw ) ;
EXPR	1803:4	1803:4	11	TIFFSetField ( tif , TIFFTAG_REFERENCEBLACKWHITE , refbw )
FUNCTION_CALL	1803:4	1804:15	12	TIFFSetField ( tif , TIFFTAG_REFERENCEBLACKWHITE , refbw )
CALLEE	1803:4	1803:4	13	TIFFSetField
LEAF_NODE	1803:4	1803:4	14	TIFFSetField
LEAF_NODE	1803:16	1803:16	13	(
ARGUMENT	1803:17	1803:17	13	tif
FIELD	1803:17	1803:17	14	tif
LEAF_NODE	1803:17	1803:17	15	tif
LEAF_NODE	1803:20	1803:20	13	,
ARGUMENT	1803:22	1803:22	13	TIFFTAG_REFERENCEBLACKWHITE
FIELD	1803:22	1803:22	14	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	1803:22	1803:22	15	TIFFTAG_REFERENCEBLACKWHITE
LEAF_NODE	1803:49	1803:49	13	,
ARGUMENT	1804:10	1804:10	13	refbw
FIELD	1804:10	1804:10	14	refbw
LEAF_NODE	1804:10	1804:10	15	refbw
LEAF_NODE	1804:15	1804:15	13	)
LEAF_NODE	1804:16	1804:16	11	;
LEAF_NODE	1805:3	1805:3	9	}
LEAF_NODE	1806:2	1806:2	6	}
JUMP_STATEMENT	1807:2	1807:7	6	break DESTINATION ;
KEYWORD	1807:2	1807:2	7	break
LEAF_NODE	1807:2	1807:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1807:7	1807:7	7	;
LABEL	1808:1	1808:25	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	1808:1	1808:1	7	case
LEAF_NODE	1808:6	1808:6	7	PHOTOMETRIC_PALETTE
LEAF_NODE	1808:25	1808:25	7	:
LABEL	1809:1	1809:22	6	case PHOTOMETRIC_MASK :
LEAF_NODE	1809:1	1809:1	7	case
LEAF_NODE	1809:6	1809:6	7	PHOTOMETRIC_MASK
LEAF_NODE	1809:22	1809:22	7	:
EXPR_STATEMENT	1810:2	1812:27	6	TIFFErrorExt ( tif -> tif_clientdata , module , "PhotometricInterpretation %d not allowed for JPEG" , ( int ) sp -> photometric ) ;
EXPR	1810:2	1810:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "PhotometricInterpretation %d not allowed for JPEG" , ( int ) sp -> photometric )
FUNCTION_CALL	1810:2	1812:26	8	TIFFErrorExt ( tif -> tif_clientdata , module , "PhotometricInterpretation %d not allowed for JPEG" , ( int ) sp -> photometric )
CALLEE	1810:2	1810:2	9	TIFFErrorExt
LEAF_NODE	1810:2	1810:2	10	TIFFErrorExt
LEAF_NODE	1810:14	1810:14	9	(
ARGUMENT	1810:15	1810:15	9	tif -> tif_clientdata
FIELD	1810:15	1810:20	10	tif -> tif_clientdata
LEAF_NODE	1810:15	1810:15	11	tif
LEAF_NODE	1810:18	1810:18	11	->
LEAF_NODE	1810:20	1810:20	11	tif_clientdata
LEAF_NODE	1810:34	1810:34	9	,
ARGUMENT	1810:36	1810:36	9	module
FIELD	1810:36	1810:36	10	module
LEAF_NODE	1810:36	1810:36	11	module
LEAF_NODE	1810:42	1810:42	9	,
ARGUMENT	1811:5	1811:5	9	"PhotometricInterpretation %d not allowed for JPEG"
FIELD	1811:5	1811:5	10	"PhotometricInterpretation %d not allowed for JPEG"
LEAF_NODE	1811:5	1811:5	11	"PhotometricInterpretation %d not allowed for JPEG"
LEAF_NODE	1811:56	1811:56	9	,
ARGUMENT	1812:5	1812:11	9	( int ) sp -> photometric
LEAF_NODE	1812:5	1812:5	10	(
TYPE_NAME	1812:6	1812:6	10	int
LEAF_NODE	1812:6	1812:6	11	int
LEAF_NODE	1812:9	1812:9	10	)
FIELD	1812:11	1812:15	10	sp -> photometric
LEAF_NODE	1812:11	1812:11	11	sp
LEAF_NODE	1812:13	1812:13	11	->
LEAF_NODE	1812:15	1812:15	11	photometric
LEAF_NODE	1812:26	1812:26	9	)
LEAF_NODE	1812:27	1812:27	7	;
JUMP_STATEMENT	1813:2	1813:12	6	return ( 0 ) ;
KEYWORD	1813:2	1813:2	7	return
LEAF_NODE	1813:2	1813:2	8	return
DESTINATION	1813:9	1813:9	7	( 0 )
EXPR	1813:9	1813:11	8	( 0 )
LEAF_NODE	1813:9	1813:9	9	(
FIELD	1813:10	1813:10	9	0
LEAF_NODE	1813:10	1813:10	10	0
LEAF_NODE	1813:11	1813:11	9	)
LEAF_NODE	1813:12	1813:12	7	;
LABEL	1814:1	1814:8	6	default :
LEAF_NODE	1814:1	1814:1	7	default
LEAF_NODE	1814:8	1814:8	7	:
EXPR_STATEMENT	1816:2	1816:20	6	sp -> h_sampling = 1 ;
EXPR	1816:2	1816:2	7	sp -> h_sampling = 1
ASSIGN	1816:2	1816:19	8	sp -> h_sampling = 1
LVAL	1816:2	1816:2	9	sp -> h_sampling
FIELD	1816:2	1816:6	10	sp -> h_sampling
LEAF_NODE	1816:2	1816:2	11	sp
LEAF_NODE	1816:4	1816:4	11	->
LEAF_NODE	1816:6	1816:6	11	h_sampling
ASSIGN_OP	1816:17	1816:17	9	=
LEAF_NODE	1816:17	1816:17	10	=
RVAL	1816:19	1816:19	9	1
FIELD	1816:19	1816:19	10	1
LEAF_NODE	1816:19	1816:19	11	1
LEAF_NODE	1816:20	1816:20	7	;
EXPR_STATEMENT	1817:2	1817:20	6	sp -> v_sampling = 1 ;
EXPR	1817:2	1817:2	7	sp -> v_sampling = 1
ASSIGN	1817:2	1817:19	8	sp -> v_sampling = 1
LVAL	1817:2	1817:2	9	sp -> v_sampling
FIELD	1817:2	1817:6	10	sp -> v_sampling
LEAF_NODE	1817:2	1817:2	11	sp
LEAF_NODE	1817:4	1817:4	11	->
LEAF_NODE	1817:6	1817:6	11	v_sampling
ASSIGN_OP	1817:17	1817:17	9	=
LEAF_NODE	1817:17	1817:17	10	=
RVAL	1817:19	1817:19	9	1
FIELD	1817:19	1817:19	10	1
LEAF_NODE	1817:19	1817:19	11	1
LEAF_NODE	1817:20	1817:20	7	;
JUMP_STATEMENT	1818:2	1818:7	6	break DESTINATION ;
KEYWORD	1818:2	1818:2	7	break
LEAF_NODE	1818:2	1818:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1818:7	1818:7	7	;
LEAF_NODE	1819:1	1819:1	5	}
SELECTION	1830:1	1832:1	3	
KEYWORD	1830:1	1830:1	4	if
LEAF_NODE	1830:1	1830:1	5	if
LEAF_NODE	1830:4	1830:4	4	(
CONDITION	1830:5	1830:5	4	td -> td_bitspersample != 8 && td -> td_bitspersample != 12
EXPR	1830:5	1830:5	5	td -> td_bitspersample != 8 && td -> td_bitspersample != 12
AND	1830:5	1830:34	6	td -> td_bitspersample != 8 && td -> td_bitspersample != 12
EXPR	1830:5	1830:29	7	td -> td_bitspersample != 8
FIELD	1830:5	1830:9	8	td -> td_bitspersample
LEAF_NODE	1830:5	1830:5	9	td
LEAF_NODE	1830:7	1830:7	9	->
LEAF_NODE	1830:9	1830:9	9	td_bitspersample
EQ_OPERATOR	1830:26	1830:26	8	!=
LEAF_NODE	1830:26	1830:26	9	!=
FIELD	1830:29	1830:29	8	8
LEAF_NODE	1830:29	1830:29	9	8
LEAF_NODE	1830:31	1830:31	7	&&
EXPR	1830:34	1830:58	7	td -> td_bitspersample != 12
FIELD	1830:34	1830:38	8	td -> td_bitspersample
LEAF_NODE	1830:34	1830:34	9	td
LEAF_NODE	1830:36	1830:36	9	->
LEAF_NODE	1830:38	1830:38	9	td_bitspersample
EQ_OPERATOR	1830:55	1830:55	8	!=
LEAF_NODE	1830:55	1830:55	9	!=
FIELD	1830:58	1830:58	8	12
LEAF_NODE	1830:58	1830:58	9	12
LEAF_NODE	1830:60	1830:60	4	)
STATEMENTS	1832:1	1832:1	4	
SELECTION	1832:1	1834:1	5	
KEYWORD	1832:1	1832:1	6	if
LEAF_NODE	1832:1	1832:1	7	if
LEAF_NODE	1832:4	1832:4	6	(
CONDITION	1832:5	1832:5	6	td -> td_bitspersample != BITS_IN_JSAMPLE
EXPR	1832:5	1832:29	7	td -> td_bitspersample != BITS_IN_JSAMPLE
FIELD	1832:5	1832:9	8	td -> td_bitspersample
LEAF_NODE	1832:5	1832:5	9	td
LEAF_NODE	1832:7	1832:7	9	->
LEAF_NODE	1832:9	1832:9	9	td_bitspersample
EQ_OPERATOR	1832:26	1832:26	8	!=
LEAF_NODE	1832:26	1832:26	9	!=
FIELD	1832:29	1832:29	8	BITS_IN_JSAMPLE
LEAF_NODE	1832:29	1832:29	9	BITS_IN_JSAMPLE
LEAF_NODE	1832:45	1832:45	6	)
STATEMENTS	1834:1	1838:1	6	
LEAF_NODE	1834:1	1834:1	7	{
STATEMENTS	1835:2	1837:2	7	
EXPR_STATEMENT	1835:2	1836:32	8	TIFFErrorExt ( tif -> tif_clientdata , module , "BitsPerSample %d not allowed for JPEG" , ( int ) td -> td_bitspersample ) ;
EXPR	1835:2	1835:2	9	TIFFErrorExt ( tif -> tif_clientdata , module , "BitsPerSample %d not allowed for JPEG" , ( int ) td -> td_bitspersample )
FUNCTION_CALL	1835:2	1836:31	10	TIFFErrorExt ( tif -> tif_clientdata , module , "BitsPerSample %d not allowed for JPEG" , ( int ) td -> td_bitspersample )
CALLEE	1835:2	1835:2	11	TIFFErrorExt
LEAF_NODE	1835:2	1835:2	12	TIFFErrorExt
LEAF_NODE	1835:14	1835:14	11	(
ARGUMENT	1835:15	1835:15	11	tif -> tif_clientdata
FIELD	1835:15	1835:20	12	tif -> tif_clientdata
LEAF_NODE	1835:15	1835:15	13	tif
LEAF_NODE	1835:18	1835:18	13	->
LEAF_NODE	1835:20	1835:20	13	tif_clientdata
LEAF_NODE	1835:34	1835:34	11	,
ARGUMENT	1835:36	1835:36	11	module
FIELD	1835:36	1835:36	12	module
LEAF_NODE	1835:36	1835:36	13	module
LEAF_NODE	1835:42	1835:42	11	,
ARGUMENT	1835:44	1835:44	11	"BitsPerSample %d not allowed for JPEG"
FIELD	1835:44	1835:44	12	"BitsPerSample %d not allowed for JPEG"
LEAF_NODE	1835:44	1835:44	13	"BitsPerSample %d not allowed for JPEG"
LEAF_NODE	1835:83	1835:83	11	,
ARGUMENT	1836:5	1836:11	11	( int ) td -> td_bitspersample
LEAF_NODE	1836:5	1836:5	12	(
TYPE_NAME	1836:6	1836:6	12	int
LEAF_NODE	1836:6	1836:6	13	int
LEAF_NODE	1836:9	1836:9	12	)
FIELD	1836:11	1836:15	12	td -> td_bitspersample
LEAF_NODE	1836:11	1836:11	13	td
LEAF_NODE	1836:13	1836:13	13	->
LEAF_NODE	1836:15	1836:15	13	td_bitspersample
LEAF_NODE	1836:31	1836:31	11	)
LEAF_NODE	1836:32	1836:32	9	;
JUMP_STATEMENT	1837:2	1837:12	8	return ( 0 ) ;
KEYWORD	1837:2	1837:2	9	return
LEAF_NODE	1837:2	1837:2	10	return
DESTINATION	1837:9	1837:9	9	( 0 )
EXPR	1837:9	1837:11	10	( 0 )
LEAF_NODE	1837:9	1837:9	11	(
FIELD	1837:10	1837:10	11	0
LEAF_NODE	1837:10	1837:10	12	0
LEAF_NODE	1837:11	1837:11	11	)
LEAF_NODE	1837:12	1837:12	9	;
LEAF_NODE	1838:1	1838:1	7	}
EXPR_STATEMENT	1839:1	1839:50	3	sp -> cinfo . c . data_precision = td -> td_bitspersample ;
EXPR	1839:1	1839:1	4	sp -> cinfo . c . data_precision = td -> td_bitspersample
ASSIGN	1839:1	1839:30	5	sp -> cinfo . c . data_precision = td -> td_bitspersample
LVAL	1839:1	1839:1	6	sp -> cinfo . c . data_precision
FIELD	1839:1	1839:13	7	sp -> cinfo . c . data_precision
LEAF_NODE	1839:1	1839:1	8	sp
LEAF_NODE	1839:3	1839:3	8	->
LEAF_NODE	1839:5	1839:5	8	cinfo
LEAF_NODE	1839:10	1839:10	8	.
LEAF_NODE	1839:11	1839:11	8	c
LEAF_NODE	1839:12	1839:12	8	.
LEAF_NODE	1839:13	1839:13	8	data_precision
ASSIGN_OP	1839:28	1839:28	6	=
LEAF_NODE	1839:28	1839:28	7	=
RVAL	1839:30	1839:30	6	td -> td_bitspersample
FIELD	1839:30	1839:34	7	td -> td_bitspersample
LEAF_NODE	1839:30	1839:30	8	td
LEAF_NODE	1839:32	1839:32	8	->
LEAF_NODE	1839:34	1839:34	8	td_bitspersample
LEAF_NODE	1839:50	1839:50	4	;
EXPR_STATEMENT	1841:8	1841:58	3	sp -> cinfo . c . bits_in_jsample = td -> td_bitspersample ;
EXPR	1841:8	1841:8	4	sp -> cinfo . c . bits_in_jsample = td -> td_bitspersample
ASSIGN	1841:8	1841:38	5	sp -> cinfo . c . bits_in_jsample = td -> td_bitspersample
LVAL	1841:8	1841:8	6	sp -> cinfo . c . bits_in_jsample
FIELD	1841:8	1841:20	7	sp -> cinfo . c . bits_in_jsample
LEAF_NODE	1841:8	1841:8	8	sp
LEAF_NODE	1841:10	1841:10	8	->
LEAF_NODE	1841:12	1841:12	8	cinfo
LEAF_NODE	1841:17	1841:17	8	.
LEAF_NODE	1841:18	1841:18	8	c
LEAF_NODE	1841:19	1841:19	8	.
LEAF_NODE	1841:20	1841:20	8	bits_in_jsample
ASSIGN_OP	1841:36	1841:36	6	=
LEAF_NODE	1841:36	1841:36	7	=
RVAL	1841:38	1841:38	6	td -> td_bitspersample
FIELD	1841:38	1841:42	7	td -> td_bitspersample
LEAF_NODE	1841:38	1841:38	8	td
LEAF_NODE	1841:40	1841:40	8	->
LEAF_NODE	1841:42	1841:42	8	td_bitspersample
LEAF_NODE	1841:58	1841:58	4	;
SELECTION	1843:1	1843:19	3	
KEYWORD	1843:1	1843:1	4	if
LEAF_NODE	1843:1	1843:1	5	if
LEAF_NODE	1843:4	1843:4	4	(
CONDITION	1843:5	1843:5	4	isTiled ( tif )
EXPR	1843:5	1843:5	5	isTiled ( tif )
FUNCTION_CALL	1843:5	1843:16	6	isTiled ( tif )
CALLEE	1843:5	1843:5	7	isTiled
LEAF_NODE	1843:5	1843:5	8	isTiled
LEAF_NODE	1843:12	1843:12	7	(
ARGUMENT	1843:13	1843:13	7	tif
FIELD	1843:13	1843:13	8	tif
LEAF_NODE	1843:13	1843:13	9	tif
LEAF_NODE	1843:16	1843:16	7	)
LEAF_NODE	1843:17	1843:17	4	)
STATEMENTS	1843:19	1856:1	4	
LEAF_NODE	1843:19	1843:19	5	{
STATEMENTS	1844:2	1850:2	5	
SELECTION	1844:2	1844:61	6	
KEYWORD	1844:2	1844:2	7	if
LEAF_NODE	1844:2	1844:2	8	if
LEAF_NODE	1844:5	1844:5	7	(
CONDITION	1844:6	1844:6	7	( td -> td_tilelength % ( sp -> v_sampling * DCTSIZE ) ) != 0
EXPR	1844:6	1844:58	8	( td -> td_tilelength % ( sp -> v_sampling * DCTSIZE ) ) != 0
LEAF_NODE	1844:6	1844:6	9	(
FIELD	1844:7	1844:11	9	td -> td_tilelength
LEAF_NODE	1844:7	1844:7	10	td
LEAF_NODE	1844:9	1844:9	10	->
LEAF_NODE	1844:11	1844:11	10	td_tilelength
LEAF_NODE	1844:25	1844:25	9	%
LEAF_NODE	1844:27	1844:27	9	(
FIELD	1844:28	1844:32	9	sp -> v_sampling
LEAF_NODE	1844:28	1844:28	10	sp
LEAF_NODE	1844:30	1844:30	10	->
LEAF_NODE	1844:32	1844:32	10	v_sampling
LEAF_NODE	1844:43	1844:43	9	*
FIELD	1844:45	1844:45	9	DCTSIZE
LEAF_NODE	1844:45	1844:45	10	DCTSIZE
LEAF_NODE	1844:52	1844:52	9	)
LEAF_NODE	1844:53	1844:53	9	)
EQ_OPERATOR	1844:55	1844:55	9	!=
LEAF_NODE	1844:55	1844:55	10	!=
FIELD	1844:58	1844:58	9	0
LEAF_NODE	1844:58	1844:58	10	0
LEAF_NODE	1844:59	1844:59	7	)
STATEMENTS	1844:61	1849:2	7	
LEAF_NODE	1844:61	1844:61	8	{
STATEMENTS	1845:3	1848:3	8	
EXPR_STATEMENT	1845:3	1847:31	9	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG tile height must be multiple of %d" , sp -> v_sampling * DCTSIZE ) ;
EXPR	1845:3	1845:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG tile height must be multiple of %d" , sp -> v_sampling * DCTSIZE )
FUNCTION_CALL	1845:3	1847:30	11	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG tile height must be multiple of %d" , sp -> v_sampling * DCTSIZE )
CALLEE	1845:3	1845:3	12	TIFFErrorExt
LEAF_NODE	1845:3	1845:3	13	TIFFErrorExt
LEAF_NODE	1845:15	1845:15	12	(
ARGUMENT	1845:16	1845:16	12	tif -> tif_clientdata
FIELD	1845:16	1845:21	13	tif -> tif_clientdata
LEAF_NODE	1845:16	1845:16	14	tif
LEAF_NODE	1845:19	1845:19	14	->
LEAF_NODE	1845:21	1845:21	14	tif_clientdata
LEAF_NODE	1845:35	1845:35	12	,
ARGUMENT	1845:37	1845:37	12	module
FIELD	1845:37	1845:37	13	module
LEAF_NODE	1845:37	1845:37	14	module
LEAF_NODE	1845:43	1845:43	12	,
ARGUMENT	1846:6	1846:6	12	"JPEG tile height must be multiple of %d"
FIELD	1846:6	1846:6	13	"JPEG tile height must be multiple of %d"
LEAF_NODE	1846:6	1846:6	14	"JPEG tile height must be multiple of %d"
LEAF_NODE	1846:47	1846:47	12	,
ARGUMENT	1847:6	1847:23	12	sp -> v_sampling * DCTSIZE
FIELD	1847:6	1847:10	13	sp -> v_sampling
LEAF_NODE	1847:6	1847:6	14	sp
LEAF_NODE	1847:8	1847:8	14	->
LEAF_NODE	1847:10	1847:10	14	v_sampling
LEAF_NODE	1847:21	1847:21	13	*
FIELD	1847:23	1847:23	13	DCTSIZE
LEAF_NODE	1847:23	1847:23	14	DCTSIZE
LEAF_NODE	1847:30	1847:30	12	)
LEAF_NODE	1847:31	1847:31	10	;
JUMP_STATEMENT	1848:3	1848:13	9	return ( 0 ) ;
KEYWORD	1848:3	1848:3	10	return
LEAF_NODE	1848:3	1848:3	11	return
DESTINATION	1848:10	1848:10	10	( 0 )
EXPR	1848:10	1848:12	11	( 0 )
LEAF_NODE	1848:10	1848:10	12	(
FIELD	1848:11	1848:11	12	0
LEAF_NODE	1848:11	1848:11	13	0
LEAF_NODE	1848:12	1848:12	12	)
LEAF_NODE	1848:13	1848:13	10	;
LEAF_NODE	1849:2	1849:2	8	}
SELECTION	1850:2	1850:60	6	
KEYWORD	1850:2	1850:2	7	if
LEAF_NODE	1850:2	1850:2	8	if
LEAF_NODE	1850:5	1850:5	7	(
CONDITION	1850:6	1850:6	7	( td -> td_tilewidth % ( sp -> h_sampling * DCTSIZE ) ) != 0
EXPR	1850:6	1850:57	8	( td -> td_tilewidth % ( sp -> h_sampling * DCTSIZE ) ) != 0
LEAF_NODE	1850:6	1850:6	9	(
FIELD	1850:7	1850:11	9	td -> td_tilewidth
LEAF_NODE	1850:7	1850:7	10	td
LEAF_NODE	1850:9	1850:9	10	->
LEAF_NODE	1850:11	1850:11	10	td_tilewidth
LEAF_NODE	1850:24	1850:24	9	%
LEAF_NODE	1850:26	1850:26	9	(
FIELD	1850:27	1850:31	9	sp -> h_sampling
LEAF_NODE	1850:27	1850:27	10	sp
LEAF_NODE	1850:29	1850:29	10	->
LEAF_NODE	1850:31	1850:31	10	h_sampling
LEAF_NODE	1850:42	1850:42	9	*
FIELD	1850:44	1850:44	9	DCTSIZE
LEAF_NODE	1850:44	1850:44	10	DCTSIZE
LEAF_NODE	1850:51	1850:51	9	)
LEAF_NODE	1850:52	1850:52	9	)
EQ_OPERATOR	1850:54	1850:54	9	!=
LEAF_NODE	1850:54	1850:54	10	!=
FIELD	1850:57	1850:57	9	0
LEAF_NODE	1850:57	1850:57	10	0
LEAF_NODE	1850:58	1850:58	7	)
STATEMENTS	1850:60	1855:2	7	
LEAF_NODE	1850:60	1850:60	8	{
STATEMENTS	1851:3	1854:3	8	
EXPR_STATEMENT	1851:3	1853:31	9	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG tile width must be multiple of %d" , sp -> h_sampling * DCTSIZE ) ;
EXPR	1851:3	1851:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG tile width must be multiple of %d" , sp -> h_sampling * DCTSIZE )
FUNCTION_CALL	1851:3	1853:30	11	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG tile width must be multiple of %d" , sp -> h_sampling * DCTSIZE )
CALLEE	1851:3	1851:3	12	TIFFErrorExt
LEAF_NODE	1851:3	1851:3	13	TIFFErrorExt
LEAF_NODE	1851:15	1851:15	12	(
ARGUMENT	1851:16	1851:16	12	tif -> tif_clientdata
FIELD	1851:16	1851:21	13	tif -> tif_clientdata
LEAF_NODE	1851:16	1851:16	14	tif
LEAF_NODE	1851:19	1851:19	14	->
LEAF_NODE	1851:21	1851:21	14	tif_clientdata
LEAF_NODE	1851:35	1851:35	12	,
ARGUMENT	1851:37	1851:37	12	module
FIELD	1851:37	1851:37	13	module
LEAF_NODE	1851:37	1851:37	14	module
LEAF_NODE	1851:43	1851:43	12	,
ARGUMENT	1852:6	1852:6	12	"JPEG tile width must be multiple of %d"
FIELD	1852:6	1852:6	13	"JPEG tile width must be multiple of %d"
LEAF_NODE	1852:6	1852:6	14	"JPEG tile width must be multiple of %d"
LEAF_NODE	1852:46	1852:46	12	,
ARGUMENT	1853:6	1853:23	12	sp -> h_sampling * DCTSIZE
FIELD	1853:6	1853:10	13	sp -> h_sampling
LEAF_NODE	1853:6	1853:6	14	sp
LEAF_NODE	1853:8	1853:8	14	->
LEAF_NODE	1853:10	1853:10	14	h_sampling
LEAF_NODE	1853:21	1853:21	13	*
FIELD	1853:23	1853:23	13	DCTSIZE
LEAF_NODE	1853:23	1853:23	14	DCTSIZE
LEAF_NODE	1853:30	1853:30	12	)
LEAF_NODE	1853:31	1853:31	10	;
JUMP_STATEMENT	1854:3	1854:13	9	return ( 0 ) ;
KEYWORD	1854:3	1854:3	10	return
LEAF_NODE	1854:3	1854:3	11	return
DESTINATION	1854:10	1854:10	10	( 0 )
EXPR	1854:10	1854:12	11	( 0 )
LEAF_NODE	1854:10	1854:10	12	(
FIELD	1854:11	1854:11	12	0
LEAF_NODE	1854:11	1854:11	13	0
LEAF_NODE	1854:12	1854:12	12	)
LEAF_NODE	1854:13	1854:13	10	;
LEAF_NODE	1855:2	1855:2	8	}
LEAF_NODE	1856:1	1856:1	5	}
SELECTION	1856:3	1856:8	3	
KEYWORD	1856:3	1856:3	4	else
LEAF_NODE	1856:3	1856:3	5	else
STATEMENTS	1856:8	1864:1	4	
LEAF_NODE	1856:8	1856:8	5	{
STATEMENTS	1857:2	1857:2	5	
SELECTION	1857:2	1858:63	6	
KEYWORD	1857:2	1857:2	7	if
LEAF_NODE	1857:2	1857:2	8	if
LEAF_NODE	1857:5	1857:5	7	(
CONDITION	1857:6	1857:6	7	td -> td_rowsperstrip < td -> td_imagelength && ( td -> td_rowsperstrip % ( sp -> v_sampling * DCTSIZE ) ) != 0
EXPR	1857:6	1857:6	8	td -> td_rowsperstrip < td -> td_imagelength && ( td -> td_rowsperstrip % ( sp -> v_sampling * DCTSIZE ) ) != 0
AND	1857:6	1858:6	9	td -> td_rowsperstrip < td -> td_imagelength && ( td -> td_rowsperstrip % ( sp -> v_sampling * DCTSIZE ) ) != 0
EXPR	1857:6	1857:28	10	td -> td_rowsperstrip < td -> td_imagelength
FIELD	1857:6	1857:10	11	td -> td_rowsperstrip
LEAF_NODE	1857:6	1857:6	12	td
LEAF_NODE	1857:8	1857:8	12	->
LEAF_NODE	1857:10	1857:10	12	td_rowsperstrip
REL_OPERATOR	1857:26	1857:26	11	<
LEAF_NODE	1857:26	1857:26	12	<
FIELD	1857:28	1857:32	11	td -> td_imagelength
LEAF_NODE	1857:28	1857:28	12	td
LEAF_NODE	1857:30	1857:30	12	->
LEAF_NODE	1857:32	1857:32	12	td_imagelength
LEAF_NODE	1857:47	1857:47	10	&&
EXPR	1858:6	1858:60	10	( td -> td_rowsperstrip % ( sp -> v_sampling * DCTSIZE ) ) != 0
LEAF_NODE	1858:6	1858:6	11	(
FIELD	1858:7	1858:11	11	td -> td_rowsperstrip
LEAF_NODE	1858:7	1858:7	12	td
LEAF_NODE	1858:9	1858:9	12	->
LEAF_NODE	1858:11	1858:11	12	td_rowsperstrip
LEAF_NODE	1858:27	1858:27	11	%
LEAF_NODE	1858:29	1858:29	11	(
FIELD	1858:30	1858:34	11	sp -> v_sampling
LEAF_NODE	1858:30	1858:30	12	sp
LEAF_NODE	1858:32	1858:32	12	->
LEAF_NODE	1858:34	1858:34	12	v_sampling
LEAF_NODE	1858:45	1858:45	11	*
FIELD	1858:47	1858:47	11	DCTSIZE
LEAF_NODE	1858:47	1858:47	12	DCTSIZE
LEAF_NODE	1858:54	1858:54	11	)
LEAF_NODE	1858:55	1858:55	11	)
EQ_OPERATOR	1858:57	1858:57	11	!=
LEAF_NODE	1858:57	1858:57	12	!=
FIELD	1858:60	1858:60	11	0
LEAF_NODE	1858:60	1858:60	12	0
LEAF_NODE	1858:61	1858:61	7	)
STATEMENTS	1858:63	1863:2	7	
LEAF_NODE	1858:63	1858:63	8	{
STATEMENTS	1859:3	1862:3	8	
EXPR_STATEMENT	1859:3	1861:31	9	TIFFErrorExt ( tif -> tif_clientdata , module , "RowsPerStrip must be multiple of %d for JPEG" , sp -> v_sampling * DCTSIZE ) ;
EXPR	1859:3	1859:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "RowsPerStrip must be multiple of %d for JPEG" , sp -> v_sampling * DCTSIZE )
FUNCTION_CALL	1859:3	1861:30	11	TIFFErrorExt ( tif -> tif_clientdata , module , "RowsPerStrip must be multiple of %d for JPEG" , sp -> v_sampling * DCTSIZE )
CALLEE	1859:3	1859:3	12	TIFFErrorExt
LEAF_NODE	1859:3	1859:3	13	TIFFErrorExt
LEAF_NODE	1859:15	1859:15	12	(
ARGUMENT	1859:16	1859:16	12	tif -> tif_clientdata
FIELD	1859:16	1859:21	13	tif -> tif_clientdata
LEAF_NODE	1859:16	1859:16	14	tif
LEAF_NODE	1859:19	1859:19	14	->
LEAF_NODE	1859:21	1859:21	14	tif_clientdata
LEAF_NODE	1859:35	1859:35	12	,
ARGUMENT	1859:37	1859:37	12	module
FIELD	1859:37	1859:37	13	module
LEAF_NODE	1859:37	1859:37	14	module
LEAF_NODE	1859:43	1859:43	12	,
ARGUMENT	1860:6	1860:6	12	"RowsPerStrip must be multiple of %d for JPEG"
FIELD	1860:6	1860:6	13	"RowsPerStrip must be multiple of %d for JPEG"
LEAF_NODE	1860:6	1860:6	14	"RowsPerStrip must be multiple of %d for JPEG"
LEAF_NODE	1860:52	1860:52	12	,
ARGUMENT	1861:6	1861:23	12	sp -> v_sampling * DCTSIZE
FIELD	1861:6	1861:10	13	sp -> v_sampling
LEAF_NODE	1861:6	1861:6	14	sp
LEAF_NODE	1861:8	1861:8	14	->
LEAF_NODE	1861:10	1861:10	14	v_sampling
LEAF_NODE	1861:21	1861:21	13	*
FIELD	1861:23	1861:23	13	DCTSIZE
LEAF_NODE	1861:23	1861:23	14	DCTSIZE
LEAF_NODE	1861:30	1861:30	12	)
LEAF_NODE	1861:31	1861:31	10	;
JUMP_STATEMENT	1862:3	1862:13	9	return ( 0 ) ;
KEYWORD	1862:3	1862:3	10	return
LEAF_NODE	1862:3	1862:3	11	return
DESTINATION	1862:10	1862:10	10	( 0 )
EXPR	1862:10	1862:12	11	( 0 )
LEAF_NODE	1862:10	1862:10	12	(
FIELD	1862:11	1862:11	12	0
LEAF_NODE	1862:11	1862:11	13	0
LEAF_NODE	1862:12	1862:12	12	)
LEAF_NODE	1862:13	1862:13	10	;
LEAF_NODE	1863:2	1863:2	8	}
LEAF_NODE	1864:1	1864:1	5	}
SELECTION	1867:1	1867:70	3	
KEYWORD	1867:1	1867:1	4	if
LEAF_NODE	1867:1	1867:1	5	if
LEAF_NODE	1867:4	1867:4	4	(
CONDITION	1867:5	1867:5	4	sp -> jpegtablesmode & ( JPEGTABLESMODE_QUANT | JPEGTABLESMODE_HUFF )
EXPR	1867:5	1867:67	5	sp -> jpegtablesmode & ( JPEGTABLESMODE_QUANT | JPEGTABLESMODE_HUFF )
FIELD	1867:5	1867:9	6	sp -> jpegtablesmode
LEAF_NODE	1867:5	1867:5	7	sp
LEAF_NODE	1867:7	1867:7	7	->
LEAF_NODE	1867:9	1867:9	7	jpegtablesmode
LEAF_NODE	1867:24	1867:24	6	&
LEAF_NODE	1867:26	1867:26	6	(
BIT_OR	1867:27	1867:48	6	JPEGTABLESMODE_QUANT | JPEGTABLESMODE_HUFF
BIT_OR_ELEM	1867:27	1867:27	7	JPEGTABLESMODE_QUANT
FIELD	1867:27	1867:27	8	JPEGTABLESMODE_QUANT
LEAF_NODE	1867:27	1867:27	9	JPEGTABLESMODE_QUANT
LEAF_NODE	1867:47	1867:47	7	|
BIT_OR_ELEM	1867:48	1867:48	7	JPEGTABLESMODE_HUFF
FIELD	1867:48	1867:48	8	JPEGTABLESMODE_HUFF
LEAF_NODE	1867:48	1867:48	9	JPEGTABLESMODE_HUFF
LEAF_NODE	1867:67	1867:67	6	)
LEAF_NODE	1867:68	1867:68	4	)
STATEMENTS	1867:70	1878:1	4	
LEAF_NODE	1867:70	1867:70	5	{
STATEMENTS	1868:16	1868:16	5	
SELECTION	1868:16	1870:16	6	
KEYWORD	1868:16	1868:16	7	if
LEAF_NODE	1868:16	1868:16	8	if
LEAF_NODE	1868:18	1868:18	7	(
CONDITION	1868:20	1868:20	7	sp -> jpegtables == NULL || memcmp ( sp -> jpegtables , "\0\0\0\0\0\0\0\0\0" , 8 ) == 0
EXPR	1868:20	1868:20	8	sp -> jpegtables == NULL || memcmp ( sp -> jpegtables , "\0\0\0\0\0\0\0\0\0" , 8 ) == 0
OR	1868:20	1869:23	9	sp -> jpegtables == NULL || memcmp ( sp -> jpegtables , "\0\0\0\0\0\0\0\0\0" , 8 ) == 0
EXPR	1868:20	1868:38	10	sp -> jpegtables == NULL
FIELD	1868:20	1868:24	11	sp -> jpegtables
LEAF_NODE	1868:20	1868:20	12	sp
LEAF_NODE	1868:22	1868:22	12	->
LEAF_NODE	1868:24	1868:24	12	jpegtables
EQ_OPERATOR	1868:35	1868:35	11	==
LEAF_NODE	1868:35	1868:35	12	==
FIELD	1868:38	1868:38	11	NULL
LEAF_NODE	1868:38	1868:38	12	NULL
LEAF_NODE	1869:20	1869:20	10	||
EXPR	1869:23	1869:72	10	memcmp ( sp -> jpegtables , "\0\0\0\0\0\0\0\0\0" , 8 ) == 0
FUNCTION_CALL	1869:23	1869:67	11	memcmp ( sp -> jpegtables , "\0\0\0\0\0\0\0\0\0" , 8 )
CALLEE	1869:23	1869:23	12	memcmp
LEAF_NODE	1869:23	1869:23	13	memcmp
LEAF_NODE	1869:29	1869:29	12	(
ARGUMENT	1869:30	1869:30	12	sp -> jpegtables
FIELD	1869:30	1869:34	13	sp -> jpegtables
LEAF_NODE	1869:30	1869:30	14	sp
LEAF_NODE	1869:32	1869:32	14	->
LEAF_NODE	1869:34	1869:34	14	jpegtables
LEAF_NODE	1869:44	1869:44	12	,
ARGUMENT	1869:45	1869:45	12	"\0\0\0\0\0\0\0\0\0"
FIELD	1869:45	1869:45	13	"\0\0\0\0\0\0\0\0\0"
LEAF_NODE	1869:45	1869:45	14	"\0\0\0\0\0\0\0\0\0"
LEAF_NODE	1869:65	1869:65	12	,
ARGUMENT	1869:66	1869:66	12	8
FIELD	1869:66	1869:66	13	8
LEAF_NODE	1869:66	1869:66	14	8
LEAF_NODE	1869:67	1869:67	12	)
EQ_OPERATOR	1869:69	1869:69	11	==
LEAF_NODE	1869:69	1869:69	12	==
FIELD	1869:72	1869:72	11	0
LEAF_NODE	1869:72	1869:72	12	0
LEAF_NODE	1869:74	1869:74	7	)
STATEMENTS	1870:16	1877:16	7	
LEAF_NODE	1870:16	1870:16	8	{
STATEMENTS	1871:24	1876:24	8	
SELECTION	1871:24	1872:32	9	
KEYWORD	1871:24	1871:24	10	if
LEAF_NODE	1871:24	1871:24	11	if
LEAF_NODE	1871:27	1871:27	10	(
CONDITION	1871:28	1871:28	10	! prepare_JPEGTables ( tif )
EXPR	1871:28	1871:28	11	! prepare_JPEGTables ( tif )
UNARY_EXPR	1871:28	1871:29	12	! prepare_JPEGTables ( tif )
UNARY_OPERATOR	1871:28	1871:28	13	!
LEAF_NODE	1871:28	1871:28	14	!
FUNCTION_CALL	1871:29	1871:51	13	prepare_JPEGTables ( tif )
CALLEE	1871:29	1871:29	14	prepare_JPEGTables
LEAF_NODE	1871:29	1871:29	15	prepare_JPEGTables
LEAF_NODE	1871:47	1871:47	14	(
ARGUMENT	1871:48	1871:48	14	tif
FIELD	1871:48	1871:48	15	tif
LEAF_NODE	1871:48	1871:48	16	tif
LEAF_NODE	1871:51	1871:51	14	)
LEAF_NODE	1871:52	1871:52	10	)
STATEMENTS	1872:32	1872:32	10	
JUMP_STATEMENT	1872:32	1872:42	11	return ( 0 ) ;
KEYWORD	1872:32	1872:32	12	return
LEAF_NODE	1872:32	1872:32	13	return
DESTINATION	1872:39	1872:39	12	( 0 )
EXPR	1872:39	1872:41	13	( 0 )
LEAF_NODE	1872:39	1872:39	14	(
FIELD	1872:40	1872:40	14	0
LEAF_NODE	1872:40	1872:40	15	0
LEAF_NODE	1872:41	1872:41	14	)
LEAF_NODE	1872:42	1872:42	12	;
EXPR_STATEMENT	1875:24	1875:58	9	tif -> tif_flags |= TIFF_DIRTYDIRECT ;
EXPR	1875:24	1875:24	10	tif -> tif_flags |= TIFF_DIRTYDIRECT
ASSIGN	1875:24	1875:42	11	tif -> tif_flags |= TIFF_DIRTYDIRECT
LVAL	1875:24	1875:24	12	tif -> tif_flags
FIELD	1875:24	1875:29	13	tif -> tif_flags
LEAF_NODE	1875:24	1875:24	14	tif
LEAF_NODE	1875:27	1875:27	14	->
LEAF_NODE	1875:29	1875:29	14	tif_flags
ASSIGN_OP	1875:39	1875:39	12	|=
LEAF_NODE	1875:39	1875:39	13	|=
RVAL	1875:42	1875:42	12	TIFF_DIRTYDIRECT
FIELD	1875:42	1875:42	13	TIFF_DIRTYDIRECT
LEAF_NODE	1875:42	1875:42	14	TIFF_DIRTYDIRECT
LEAF_NODE	1875:58	1875:58	10	;
EXPR_STATEMENT	1876:24	1876:62	9	TIFFSetFieldBit ( tif , FIELD_JPEGTABLES ) ;
EXPR	1876:24	1876:24	10	TIFFSetFieldBit ( tif , FIELD_JPEGTABLES )
FUNCTION_CALL	1876:24	1876:61	11	TIFFSetFieldBit ( tif , FIELD_JPEGTABLES )
CALLEE	1876:24	1876:24	12	TIFFSetFieldBit
LEAF_NODE	1876:24	1876:24	13	TIFFSetFieldBit
LEAF_NODE	1876:39	1876:39	12	(
ARGUMENT	1876:40	1876:40	12	tif
FIELD	1876:40	1876:40	13	tif
LEAF_NODE	1876:40	1876:40	14	tif
LEAF_NODE	1876:43	1876:43	12	,
ARGUMENT	1876:45	1876:45	12	FIELD_JPEGTABLES
FIELD	1876:45	1876:45	13	FIELD_JPEGTABLES
LEAF_NODE	1876:45	1876:45	14	FIELD_JPEGTABLES
LEAF_NODE	1876:61	1876:61	12	)
LEAF_NODE	1876:62	1876:62	10	;
LEAF_NODE	1877:16	1877:16	8	}
LEAF_NODE	1878:1	1878:1	5	}
SELECTION	1878:3	1878:8	3	
KEYWORD	1878:3	1878:3	4	else
LEAF_NODE	1878:3	1878:3	5	else
STATEMENTS	1878:8	1882:1	4	
LEAF_NODE	1878:8	1878:8	5	{
STATEMENTS	1881:2	1881:2	5	
EXPR_STATEMENT	1881:2	1881:40	6	TIFFClrFieldBit ( tif , FIELD_JPEGTABLES ) ;
EXPR	1881:2	1881:2	7	TIFFClrFieldBit ( tif , FIELD_JPEGTABLES )
FUNCTION_CALL	1881:2	1881:39	8	TIFFClrFieldBit ( tif , FIELD_JPEGTABLES )
CALLEE	1881:2	1881:2	9	TIFFClrFieldBit
LEAF_NODE	1881:2	1881:2	10	TIFFClrFieldBit
LEAF_NODE	1881:17	1881:17	9	(
ARGUMENT	1881:18	1881:18	9	tif
FIELD	1881:18	1881:18	10	tif
LEAF_NODE	1881:18	1881:18	11	tif
LEAF_NODE	1881:21	1881:21	9	,
ARGUMENT	1881:23	1881:23	9	FIELD_JPEGTABLES
FIELD	1881:23	1881:23	10	FIELD_JPEGTABLES
LEAF_NODE	1881:23	1881:23	11	FIELD_JPEGTABLES
LEAF_NODE	1881:39	1881:39	9	)
LEAF_NODE	1881:40	1881:40	7	;
LEAF_NODE	1882:1	1882:1	5	}
EXPR_STATEMENT	1885:1	1885:28	3	TIFFjpeg_data_dest ( sp , tif ) ;
EXPR	1885:1	1885:1	4	TIFFjpeg_data_dest ( sp , tif )
FUNCTION_CALL	1885:1	1885:27	5	TIFFjpeg_data_dest ( sp , tif )
CALLEE	1885:1	1885:1	6	TIFFjpeg_data_dest
LEAF_NODE	1885:1	1885:1	7	TIFFjpeg_data_dest
LEAF_NODE	1885:19	1885:19	6	(
ARGUMENT	1885:20	1885:20	6	sp
FIELD	1885:20	1885:20	7	sp
LEAF_NODE	1885:20	1885:20	8	sp
LEAF_NODE	1885:22	1885:22	6	,
ARGUMENT	1885:24	1885:24	6	tif
FIELD	1885:24	1885:24	7	tif
LEAF_NODE	1885:24	1885:24	8	tif
LEAF_NODE	1885:27	1885:27	6	)
LEAF_NODE	1885:28	1885:28	4	;
JUMP_STATEMENT	1887:1	1887:11	3	return ( 1 ) ;
KEYWORD	1887:1	1887:1	4	return
LEAF_NODE	1887:1	1887:1	5	return
DESTINATION	1887:8	1887:8	4	( 1 )
EXPR	1887:8	1887:10	5	( 1 )
LEAF_NODE	1887:8	1887:8	6	(
FIELD	1887:9	1887:9	6	1
LEAF_NODE	1887:9	1887:9	7	1
LEAF_NODE	1887:10	1887:10	6	)
LEAF_NODE	1887:11	1887:11	4	;
LEAF_NODE	1888:0	1888:0	2	}
FUNCTION_DEF	1893:0	2024:0	1	
RETURN_TYPE	1893:0	1893:7	2	static int
LEAF_NODE	1893:0	1893:0	3	static
TYPE_NAME	1893:7	1893:7	3	int
LEAF_NODE	1893:7	1893:7	4	int
FUNCTION_NAME	1894:0	1894:0	2	JPEGPreEncode
LEAF_NODE	1894:0	1894:0	3	JPEGPreEncode
PARAMETER_LIST	1894:13	1894:33	2	( TIFF * tif , uint16 s )
LEAF_NODE	1894:13	1894:13	3	(
PARAMETER_DECL	1894:14	1894:20	3	TIFF * tif
TYPE	1894:14	1894:18	4	TIFF *
TYPE_NAME	1894:14	1894:14	5	TIFF
LEAF_NODE	1894:14	1894:14	6	TIFF
POINTER	1894:18	1894:18	5	*
LEAF_NODE	1894:18	1894:18	6	*
NAME	1894:20	1894:20	4	tif
LEAF_NODE	1894:20	1894:20	5	tif
LEAF_NODE	1894:23	1894:23	3	,
PARAMETER_DECL	1894:25	1894:32	3	uint16 s
TYPE	1894:25	1894:25	4	uint16
TYPE_NAME	1894:25	1894:25	5	uint16
LEAF_NODE	1894:25	1894:25	6	uint16
NAME	1894:32	1894:32	4	s
LEAF_NODE	1894:32	1894:32	5	s
LEAF_NODE	1894:33	1894:33	3	)
LEAF_NODE	1895:0	1895:0	2	{
STATEMENTS	1896:1	2023:1	2	
SIMPLE_DECL	1896:1	1896:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	1896:1	1896:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	1896:1	1896:11	5	JPEGState *
TYPE_NAME	1896:1	1896:1	6	JPEGState
LEAF_NODE	1896:1	1896:1	7	JPEGState
POINTER	1896:11	1896:11	6	*
LEAF_NODE	1896:11	1896:11	7	*
NAME	1896:12	1896:12	5	sp
LEAF_NODE	1896:12	1896:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1896:12	1896:12	5	sp = JState ( tif )
ASSIGN	1896:12	1896:17	6	sp = JState ( tif )
LVAL	1896:12	1896:12	7	sp
NAME	1896:12	1896:12	8	sp
LEAF_NODE	1896:12	1896:12	9	sp
ASSIGN_OP	1896:15	1896:15	7	=
LEAF_NODE	1896:15	1896:15	8	=
RVAL	1896:17	1896:17	7	JState ( tif )
FUNCTION_CALL	1896:17	1896:27	8	JState ( tif )
CALLEE	1896:17	1896:17	9	JState
LEAF_NODE	1896:17	1896:17	10	JState
LEAF_NODE	1896:23	1896:23	9	(
ARGUMENT	1896:24	1896:24	9	tif
FIELD	1896:24	1896:24	10	tif
LEAF_NODE	1896:24	1896:24	11	tif
LEAF_NODE	1896:27	1896:27	9	)
LEAF_NODE	1896:28	1896:28	4	;
SIMPLE_DECL	1897:1	1897:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1897:1	1897:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1897:1	1897:15	5	TIFFDirectory *
TYPE_NAME	1897:1	1897:1	6	TIFFDirectory
LEAF_NODE	1897:1	1897:1	7	TIFFDirectory
POINTER	1897:15	1897:15	6	*
LEAF_NODE	1897:15	1897:15	7	*
NAME	1897:16	1897:16	5	td
LEAF_NODE	1897:16	1897:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1897:16	1897:16	5	td = & tif -> tif_dir
ASSIGN	1897:16	1897:21	6	td = & tif -> tif_dir
LVAL	1897:16	1897:16	7	td
NAME	1897:16	1897:16	8	td
LEAF_NODE	1897:16	1897:16	9	td
ASSIGN_OP	1897:19	1897:19	7	=
LEAF_NODE	1897:19	1897:19	8	=
RVAL	1897:21	1897:21	7	& tif -> tif_dir
UNARY_EXPR	1897:21	1897:22	8	& tif -> tif_dir
UNARY_OPERATOR	1897:21	1897:21	9	&
LEAF_NODE	1897:21	1897:21	10	&
FIELD	1897:22	1897:27	9	tif -> tif_dir
LEAF_NODE	1897:22	1897:22	10	tif
LEAF_NODE	1897:25	1897:25	10	->
LEAF_NODE	1897:27	1897:27	10	tif_dir
LEAF_NODE	1897:34	1897:34	4	;
LEAF_NODE	1898:1	1898:1	3	static
SIMPLE_DECL	1898:8	1898:45	3	const char [ ] module ; module = "JPEGPreEncode" ;
VAR_DECL	1898:8	1898:19	4	const char [ ] module ; module = "JPEGPreEncode"
TYPE	1898:8	1898:25	5	const char [ ]
TYPE_NAME	1898:8	1898:14	6	const char
LEAF_NODE	1898:8	1898:8	7	const
LEAF_NODE	1898:14	1898:14	7	char
TYPE_SUFFIX	1898:25	1898:26	6	[ ]
LEAF_NODE	1898:25	1898:25	7	[
LEAF_NODE	1898:26	1898:26	7	]
NAME	1898:19	1898:19	5	module
LEAF_NODE	1898:19	1898:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1898:19	1898:19	5	module = "JPEGPreEncode"
ASSIGN	1898:19	1898:30	6	module = "JPEGPreEncode"
LVAL	1898:19	1898:19	7	module
NAME	1898:19	1898:19	8	module
LEAF_NODE	1898:19	1898:19	9	module
ASSIGN_OP	1898:28	1898:28	7	=
LEAF_NODE	1898:28	1898:28	8	=
RVAL	1898:30	1898:30	7	"JPEGPreEncode"
FIELD	1898:30	1898:30	8	"JPEGPreEncode"
LEAF_NODE	1898:30	1898:30	9	"JPEGPreEncode"
LEAF_NODE	1898:45	1898:45	4	;
SIMPLE_DECL	1899:1	1899:37	3	uint32 segment_width , uint32 segment_height ;
INIT_DECL_LIST	1899:1	1899:1	4	uint32 segment_width , uint32 segment_height
VAR_DECL	1899:1	1899:8	5	uint32 segment_width
TYPE	1899:1	1899:1	6	uint32
TYPE_NAME	1899:1	1899:1	7	uint32
LEAF_NODE	1899:1	1899:1	8	uint32
NAME	1899:8	1899:8	6	segment_width
LEAF_NODE	1899:8	1899:8	7	segment_width
LEAF_NODE	1899:21	1899:21	5	,
VAR_DECL	1899:1	1899:23	5	uint32 segment_height
TYPE	1899:1	1899:1	6	uint32
TYPE_NAME	1899:1	1899:1	7	uint32
LEAF_NODE	1899:1	1899:1	8	uint32
NAME	1899:23	1899:23	6	segment_height
LEAF_NODE	1899:23	1899:23	7	segment_height
LEAF_NODE	1899:37	1899:37	4	;
SIMPLE_DECL	1900:1	1900:22	3	int downsampled_input ;
VAR_DECL	1900:1	1900:5	4	int downsampled_input
TYPE	1900:1	1900:1	5	int
TYPE_NAME	1900:1	1900:1	6	int
LEAF_NODE	1900:1	1900:1	7	int
NAME	1900:5	1900:5	5	downsampled_input
LEAF_NODE	1900:5	1900:5	6	downsampled_input
LEAF_NODE	1900:22	1900:22	4	;
EXPR_STATEMENT	1902:1	1902:19	3	assert ( sp != NULL ) ;
EXPR	1902:1	1902:1	4	assert ( sp != NULL )
FUNCTION_CALL	1902:1	1902:18	5	assert ( sp != NULL )
CALLEE	1902:1	1902:1	6	assert
LEAF_NODE	1902:1	1902:1	7	assert
LEAF_NODE	1902:7	1902:7	6	(
ARGUMENT	1902:8	1902:14	6	sp != NULL
FIELD	1902:8	1902:8	7	sp
LEAF_NODE	1902:8	1902:8	8	sp
EQ_OPERATOR	1902:11	1902:11	7	!=
LEAF_NODE	1902:11	1902:11	8	!=
FIELD	1902:14	1902:14	7	NULL
LEAF_NODE	1902:14	1902:14	8	NULL
LEAF_NODE	1902:18	1902:18	6	)
LEAF_NODE	1902:19	1902:19	4	;
SELECTION	1904:1	1905:1	3	
KEYWORD	1904:1	1904:1	4	if
LEAF_NODE	1904:1	1904:1	5	if
LEAF_NODE	1904:4	1904:4	4	(
CONDITION	1904:5	1904:5	4	sp -> cinfo . comm . is_decompressor == 1
EXPR	1904:5	1904:39	5	sp -> cinfo . comm . is_decompressor == 1
FIELD	1904:5	1904:20	6	sp -> cinfo . comm . is_decompressor
LEAF_NODE	1904:5	1904:5	7	sp
LEAF_NODE	1904:7	1904:7	7	->
LEAF_NODE	1904:9	1904:9	7	cinfo
LEAF_NODE	1904:14	1904:14	7	.
LEAF_NODE	1904:15	1904:15	7	comm
LEAF_NODE	1904:19	1904:19	7	.
LEAF_NODE	1904:20	1904:20	7	is_decompressor
EQ_OPERATOR	1904:36	1904:36	6	==
LEAF_NODE	1904:36	1904:36	7	==
FIELD	1904:39	1904:39	6	1
LEAF_NODE	1904:39	1904:39	7	1
LEAF_NODE	1904:40	1904:40	4	)
STATEMENTS	1905:1	1907:1	4	
LEAF_NODE	1905:1	1905:1	5	{
STATEMENTS	1906:2	1906:2	5	
EXPR_STATEMENT	1906:2	1906:29	6	tif -> tif_setupencode ( tif ) ;
EXPR	1906:2	1906:2	7	tif -> tif_setupencode ( tif )
FUNCTION_CALL	1906:2	1906:28	8	tif -> tif_setupencode ( tif )
CALLEE	1906:2	1906:7	9	tif -> tif_setupencode
LEAF_NODE	1906:2	1906:2	10	tif
LEAF_NODE	1906:5	1906:5	10	->
LEAF_NODE	1906:7	1906:7	10	tif_setupencode
LEAF_NODE	1906:22	1906:22	9	(
ARGUMENT	1906:24	1906:24	9	tif
FIELD	1906:24	1906:24	10	tif
LEAF_NODE	1906:24	1906:24	11	tif
LEAF_NODE	1906:28	1906:28	9	)
LEAF_NODE	1906:29	1906:29	7	;
LEAF_NODE	1907:1	1907:1	5	}
EXPR_STATEMENT	1909:1	1909:40	3	assert ( ! sp -> cinfo . comm . is_decompressor ) ;
EXPR	1909:1	1909:1	4	assert ( ! sp -> cinfo . comm . is_decompressor )
FUNCTION_CALL	1909:1	1909:39	5	assert ( ! sp -> cinfo . comm . is_decompressor )
CALLEE	1909:1	1909:1	6	assert
LEAF_NODE	1909:1	1909:1	7	assert
LEAF_NODE	1909:7	1909:7	6	(
ARGUMENT	1909:8	1909:8	6	! sp -> cinfo . comm . is_decompressor
UNARY_EXPR	1909:8	1909:9	7	! sp -> cinfo . comm . is_decompressor
UNARY_OPERATOR	1909:8	1909:8	8	!
LEAF_NODE	1909:8	1909:8	9	!
FIELD	1909:9	1909:24	8	sp -> cinfo . comm . is_decompressor
LEAF_NODE	1909:9	1909:9	9	sp
LEAF_NODE	1909:11	1909:11	9	->
LEAF_NODE	1909:13	1909:13	9	cinfo
LEAF_NODE	1909:18	1909:18	9	.
LEAF_NODE	1909:19	1909:19	9	comm
LEAF_NODE	1909:23	1909:23	9	.
LEAF_NODE	1909:24	1909:24	9	is_decompressor
LEAF_NODE	1909:39	1909:39	6	)
LEAF_NODE	1909:40	1909:40	4	;
SELECTION	1913:1	1913:19	3	
KEYWORD	1913:1	1913:1	4	if
LEAF_NODE	1913:1	1913:1	5	if
LEAF_NODE	1913:4	1913:4	4	(
CONDITION	1913:5	1913:5	4	isTiled ( tif )
EXPR	1913:5	1913:5	5	isTiled ( tif )
FUNCTION_CALL	1913:5	1913:16	6	isTiled ( tif )
CALLEE	1913:5	1913:5	7	isTiled
LEAF_NODE	1913:5	1913:5	8	isTiled
LEAF_NODE	1913:12	1913:12	7	(
ARGUMENT	1913:13	1913:13	7	tif
FIELD	1913:13	1913:13	8	tif
LEAF_NODE	1913:13	1913:13	9	tif
LEAF_NODE	1913:16	1913:16	7	)
LEAF_NODE	1913:17	1913:17	4	)
STATEMENTS	1913:19	1917:1	4	
LEAF_NODE	1913:19	1913:19	5	{
STATEMENTS	1914:2	1916:2	5	
EXPR_STATEMENT	1914:2	1914:34	6	segment_width = td -> td_tilewidth ;
EXPR	1914:2	1914:2	7	segment_width = td -> td_tilewidth
ASSIGN	1914:2	1914:18	8	segment_width = td -> td_tilewidth
LVAL	1914:2	1914:2	9	segment_width
FIELD	1914:2	1914:2	10	segment_width
LEAF_NODE	1914:2	1914:2	11	segment_width
ASSIGN_OP	1914:16	1914:16	9	=
LEAF_NODE	1914:16	1914:16	10	=
RVAL	1914:18	1914:18	9	td -> td_tilewidth
FIELD	1914:18	1914:22	10	td -> td_tilewidth
LEAF_NODE	1914:18	1914:18	11	td
LEAF_NODE	1914:20	1914:20	11	->
LEAF_NODE	1914:22	1914:22	11	td_tilewidth
LEAF_NODE	1914:34	1914:34	7	;
EXPR_STATEMENT	1915:2	1915:36	6	segment_height = td -> td_tilelength ;
EXPR	1915:2	1915:2	7	segment_height = td -> td_tilelength
ASSIGN	1915:2	1915:19	8	segment_height = td -> td_tilelength
LVAL	1915:2	1915:2	9	segment_height
FIELD	1915:2	1915:2	10	segment_height
LEAF_NODE	1915:2	1915:2	11	segment_height
ASSIGN_OP	1915:17	1915:17	9	=
LEAF_NODE	1915:17	1915:17	10	=
RVAL	1915:19	1915:19	9	td -> td_tilelength
FIELD	1915:19	1915:23	10	td -> td_tilelength
LEAF_NODE	1915:19	1915:19	11	td
LEAF_NODE	1915:21	1915:21	11	->
LEAF_NODE	1915:23	1915:23	11	td_tilelength
LEAF_NODE	1915:36	1915:36	7	;
EXPR_STATEMENT	1916:2	1916:41	6	sp -> bytesperline = TIFFTileRowSize ( tif ) ;
EXPR	1916:2	1916:2	7	sp -> bytesperline = TIFFTileRowSize ( tif )
ASSIGN	1916:2	1916:21	8	sp -> bytesperline = TIFFTileRowSize ( tif )
LVAL	1916:2	1916:2	9	sp -> bytesperline
FIELD	1916:2	1916:6	10	sp -> bytesperline
LEAF_NODE	1916:2	1916:2	11	sp
LEAF_NODE	1916:4	1916:4	11	->
LEAF_NODE	1916:6	1916:6	11	bytesperline
ASSIGN_OP	1916:19	1916:19	9	=
LEAF_NODE	1916:19	1916:19	10	=
RVAL	1916:21	1916:21	9	TIFFTileRowSize ( tif )
FUNCTION_CALL	1916:21	1916:40	10	TIFFTileRowSize ( tif )
CALLEE	1916:21	1916:21	11	TIFFTileRowSize
LEAF_NODE	1916:21	1916:21	12	TIFFTileRowSize
LEAF_NODE	1916:36	1916:36	11	(
ARGUMENT	1916:37	1916:37	11	tif
FIELD	1916:37	1916:37	12	tif
LEAF_NODE	1916:37	1916:37	13	tif
LEAF_NODE	1916:40	1916:40	11	)
LEAF_NODE	1916:41	1916:41	7	;
LEAF_NODE	1917:1	1917:1	5	}
SELECTION	1917:3	1917:8	3	
KEYWORD	1917:3	1917:3	4	else
LEAF_NODE	1917:3	1917:3	5	else
STATEMENTS	1917:8	1923:1	4	
LEAF_NODE	1917:8	1917:8	5	{
STATEMENTS	1918:2	1922:2	5	
EXPR_STATEMENT	1918:2	1918:35	6	segment_width = td -> td_imagewidth ;
EXPR	1918:2	1918:2	7	segment_width = td -> td_imagewidth
ASSIGN	1918:2	1918:18	8	segment_width = td -> td_imagewidth
LVAL	1918:2	1918:2	9	segment_width
FIELD	1918:2	1918:2	10	segment_width
LEAF_NODE	1918:2	1918:2	11	segment_width
ASSIGN_OP	1918:16	1918:16	9	=
LEAF_NODE	1918:16	1918:16	10	=
RVAL	1918:18	1918:18	9	td -> td_imagewidth
FIELD	1918:18	1918:22	10	td -> td_imagewidth
LEAF_NODE	1918:18	1918:18	11	td
LEAF_NODE	1918:20	1918:20	11	->
LEAF_NODE	1918:22	1918:22	11	td_imagewidth
LEAF_NODE	1918:35	1918:35	7	;
EXPR_STATEMENT	1919:2	1919:52	6	segment_height = td -> td_imagelength - tif -> tif_row ;
EXPR	1919:2	1919:2	7	segment_height = td -> td_imagelength - tif -> tif_row
ASSIGN	1919:2	1919:19	8	segment_height = td -> td_imagelength - tif -> tif_row
LVAL	1919:2	1919:2	9	segment_height
FIELD	1919:2	1919:2	10	segment_height
LEAF_NODE	1919:2	1919:2	11	segment_height
ASSIGN_OP	1919:17	1919:17	9	=
LEAF_NODE	1919:17	1919:17	10	=
RVAL	1919:19	1919:40	9	td -> td_imagelength - tif -> tif_row
FIELD	1919:19	1919:23	10	td -> td_imagelength
LEAF_NODE	1919:19	1919:19	11	td
LEAF_NODE	1919:21	1919:21	11	->
LEAF_NODE	1919:23	1919:23	11	td_imagelength
LEAF_NODE	1919:38	1919:38	10	-
FIELD	1919:40	1919:45	10	tif -> tif_row
LEAF_NODE	1919:40	1919:40	11	tif
LEAF_NODE	1919:43	1919:43	11	->
LEAF_NODE	1919:45	1919:45	11	tif_row
LEAF_NODE	1919:52	1919:52	7	;
SELECTION	1920:2	1921:3	6	
KEYWORD	1920:2	1920:2	7	if
LEAF_NODE	1920:2	1920:2	8	if
LEAF_NODE	1920:5	1920:5	7	(
CONDITION	1920:6	1920:6	7	segment_height > td -> td_rowsperstrip
EXPR	1920:6	1920:23	8	segment_height > td -> td_rowsperstrip
FIELD	1920:6	1920:6	9	segment_height
LEAF_NODE	1920:6	1920:6	10	segment_height
REL_OPERATOR	1920:21	1920:21	9	>
LEAF_NODE	1920:21	1920:21	10	>
FIELD	1920:23	1920:27	9	td -> td_rowsperstrip
LEAF_NODE	1920:23	1920:23	10	td
LEAF_NODE	1920:25	1920:25	10	->
LEAF_NODE	1920:27	1920:27	10	td_rowsperstrip
LEAF_NODE	1920:42	1920:42	7	)
STATEMENTS	1921:3	1921:3	7	
EXPR_STATEMENT	1921:3	1921:39	8	segment_height = td -> td_rowsperstrip ;
EXPR	1921:3	1921:3	9	segment_height = td -> td_rowsperstrip
ASSIGN	1921:3	1921:20	10	segment_height = td -> td_rowsperstrip
LVAL	1921:3	1921:3	11	segment_height
FIELD	1921:3	1921:3	12	segment_height
LEAF_NODE	1921:3	1921:3	13	segment_height
ASSIGN_OP	1921:18	1921:18	11	=
LEAF_NODE	1921:18	1921:18	12	=
RVAL	1921:20	1921:20	11	td -> td_rowsperstrip
FIELD	1921:20	1921:24	12	td -> td_rowsperstrip
LEAF_NODE	1921:20	1921:20	13	td
LEAF_NODE	1921:22	1921:22	13	->
LEAF_NODE	1921:24	1921:24	13	td_rowsperstrip
LEAF_NODE	1921:39	1921:39	9	;
EXPR_STATEMENT	1922:2	1922:42	6	sp -> bytesperline = TIFFScanlineSize ( tif ) ;
EXPR	1922:2	1922:2	7	sp -> bytesperline = TIFFScanlineSize ( tif )
ASSIGN	1922:2	1922:21	8	sp -> bytesperline = TIFFScanlineSize ( tif )
LVAL	1922:2	1922:2	9	sp -> bytesperline
FIELD	1922:2	1922:6	10	sp -> bytesperline
LEAF_NODE	1922:2	1922:2	11	sp
LEAF_NODE	1922:4	1922:4	11	->
LEAF_NODE	1922:6	1922:6	11	bytesperline
ASSIGN_OP	1922:19	1922:19	9	=
LEAF_NODE	1922:19	1922:19	10	=
RVAL	1922:21	1922:21	9	TIFFScanlineSize ( tif )
FUNCTION_CALL	1922:21	1922:41	10	TIFFScanlineSize ( tif )
CALLEE	1922:21	1922:21	11	TIFFScanlineSize
LEAF_NODE	1922:21	1922:21	12	TIFFScanlineSize
LEAF_NODE	1922:37	1922:37	11	(
ARGUMENT	1922:38	1922:38	11	tif
FIELD	1922:38	1922:38	12	tif
LEAF_NODE	1922:38	1922:38	13	tif
LEAF_NODE	1922:41	1922:41	11	)
LEAF_NODE	1922:42	1922:42	7	;
LEAF_NODE	1923:1	1923:1	5	}
SELECTION	1924:1	1924:60	3	
KEYWORD	1924:1	1924:1	4	if
LEAF_NODE	1924:1	1924:1	5	if
LEAF_NODE	1924:4	1924:4	4	(
CONDITION	1924:5	1924:5	4	td -> td_planarconfig == PLANARCONFIG_SEPARATE && s > 0
EXPR	1924:5	1924:5	5	td -> td_planarconfig == PLANARCONFIG_SEPARATE && s > 0
AND	1924:5	1924:53	6	td -> td_planarconfig == PLANARCONFIG_SEPARATE && s > 0
EXPR	1924:5	1924:28	7	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	1924:5	1924:9	8	td -> td_planarconfig
LEAF_NODE	1924:5	1924:5	9	td
LEAF_NODE	1924:7	1924:7	9	->
LEAF_NODE	1924:9	1924:9	9	td_planarconfig
EQ_OPERATOR	1924:25	1924:25	8	==
LEAF_NODE	1924:25	1924:25	9	==
FIELD	1924:28	1924:28	8	PLANARCONFIG_SEPARATE
LEAF_NODE	1924:28	1924:28	9	PLANARCONFIG_SEPARATE
LEAF_NODE	1924:50	1924:50	7	&&
EXPR	1924:53	1924:57	7	s > 0
FIELD	1924:53	1924:53	8	s
LEAF_NODE	1924:53	1924:53	9	s
REL_OPERATOR	1924:55	1924:55	8	>
LEAF_NODE	1924:55	1924:55	9	>
FIELD	1924:57	1924:57	8	0
LEAF_NODE	1924:57	1924:57	9	0
LEAF_NODE	1924:58	1924:58	4	)
STATEMENTS	1924:60	1930:1	4	
LEAF_NODE	1924:60	1924:60	5	{
STATEMENTS	1928:2	1929:2	5	
EXPR_STATEMENT	1928:2	1928:63	6	segment_width = TIFFhowmany_32 ( segment_width , sp -> h_sampling ) ;
EXPR	1928:2	1928:2	7	segment_width = TIFFhowmany_32 ( segment_width , sp -> h_sampling )
ASSIGN	1928:2	1928:18	8	segment_width = TIFFhowmany_32 ( segment_width , sp -> h_sampling )
LVAL	1928:2	1928:2	9	segment_width
FIELD	1928:2	1928:2	10	segment_width
LEAF_NODE	1928:2	1928:2	11	segment_width
ASSIGN_OP	1928:16	1928:16	9	=
LEAF_NODE	1928:16	1928:16	10	=
RVAL	1928:18	1928:18	9	TIFFhowmany_32 ( segment_width , sp -> h_sampling )
FUNCTION_CALL	1928:18	1928:62	10	TIFFhowmany_32 ( segment_width , sp -> h_sampling )
CALLEE	1928:18	1928:18	11	TIFFhowmany_32
LEAF_NODE	1928:18	1928:18	12	TIFFhowmany_32
LEAF_NODE	1928:32	1928:32	11	(
ARGUMENT	1928:33	1928:33	11	segment_width
FIELD	1928:33	1928:33	12	segment_width
LEAF_NODE	1928:33	1928:33	13	segment_width
LEAF_NODE	1928:46	1928:46	11	,
ARGUMENT	1928:48	1928:48	11	sp -> h_sampling
FIELD	1928:48	1928:52	12	sp -> h_sampling
LEAF_NODE	1928:48	1928:48	13	sp
LEAF_NODE	1928:50	1928:50	13	->
LEAF_NODE	1928:52	1928:52	13	h_sampling
LEAF_NODE	1928:62	1928:62	11	)
LEAF_NODE	1928:63	1928:63	7	;
EXPR_STATEMENT	1929:2	1929:65	6	segment_height = TIFFhowmany_32 ( segment_height , sp -> v_sampling ) ;
EXPR	1929:2	1929:2	7	segment_height = TIFFhowmany_32 ( segment_height , sp -> v_sampling )
ASSIGN	1929:2	1929:19	8	segment_height = TIFFhowmany_32 ( segment_height , sp -> v_sampling )
LVAL	1929:2	1929:2	9	segment_height
FIELD	1929:2	1929:2	10	segment_height
LEAF_NODE	1929:2	1929:2	11	segment_height
ASSIGN_OP	1929:17	1929:17	9	=
LEAF_NODE	1929:17	1929:17	10	=
RVAL	1929:19	1929:19	9	TIFFhowmany_32 ( segment_height , sp -> v_sampling )
FUNCTION_CALL	1929:19	1929:64	10	TIFFhowmany_32 ( segment_height , sp -> v_sampling )
CALLEE	1929:19	1929:19	11	TIFFhowmany_32
LEAF_NODE	1929:19	1929:19	12	TIFFhowmany_32
LEAF_NODE	1929:33	1929:33	11	(
ARGUMENT	1929:34	1929:34	11	segment_height
FIELD	1929:34	1929:34	12	segment_height
LEAF_NODE	1929:34	1929:34	13	segment_height
LEAF_NODE	1929:48	1929:48	11	,
ARGUMENT	1929:50	1929:50	11	sp -> v_sampling
FIELD	1929:50	1929:54	12	sp -> v_sampling
LEAF_NODE	1929:50	1929:50	13	sp
LEAF_NODE	1929:52	1929:52	13	->
LEAF_NODE	1929:54	1929:54	13	v_sampling
LEAF_NODE	1929:64	1929:64	11	)
LEAF_NODE	1929:65	1929:65	7	;
LEAF_NODE	1930:1	1930:1	5	}
SELECTION	1931:1	1931:54	3	
KEYWORD	1931:1	1931:1	4	if
LEAF_NODE	1931:1	1931:1	5	if
LEAF_NODE	1931:4	1931:4	4	(
CONDITION	1931:5	1931:5	4	segment_width > 65535 || segment_height > 65535
EXPR	1931:5	1931:5	5	segment_width > 65535 || segment_height > 65535
OR	1931:5	1931:30	6	segment_width > 65535 || segment_height > 65535
EXPR	1931:5	1931:21	7	segment_width > 65535
FIELD	1931:5	1931:5	8	segment_width
LEAF_NODE	1931:5	1931:5	9	segment_width
REL_OPERATOR	1931:19	1931:19	8	>
LEAF_NODE	1931:19	1931:19	9	>
FIELD	1931:21	1931:21	8	65535
LEAF_NODE	1931:21	1931:21	9	65535
LEAF_NODE	1931:27	1931:27	7	||
EXPR	1931:30	1931:47	7	segment_height > 65535
FIELD	1931:30	1931:30	8	segment_height
LEAF_NODE	1931:30	1931:30	9	segment_height
REL_OPERATOR	1931:45	1931:45	8	>
LEAF_NODE	1931:45	1931:45	9	>
FIELD	1931:47	1931:47	8	65535
LEAF_NODE	1931:47	1931:47	9	65535
LEAF_NODE	1931:52	1931:52	4	)
STATEMENTS	1931:54	1934:1	4	
LEAF_NODE	1931:54	1931:54	5	{
STATEMENTS	1932:2	1933:2	5	
EXPR_STATEMENT	1932:2	1932:76	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Strip/tile too large for JPEG" ) ;
EXPR	1932:2	1932:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Strip/tile too large for JPEG" )
FUNCTION_CALL	1932:2	1932:75	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Strip/tile too large for JPEG" )
CALLEE	1932:2	1932:2	9	TIFFErrorExt
LEAF_NODE	1932:2	1932:2	10	TIFFErrorExt
LEAF_NODE	1932:14	1932:14	9	(
ARGUMENT	1932:15	1932:15	9	tif -> tif_clientdata
FIELD	1932:15	1932:20	10	tif -> tif_clientdata
LEAF_NODE	1932:15	1932:15	11	tif
LEAF_NODE	1932:18	1932:18	11	->
LEAF_NODE	1932:20	1932:20	11	tif_clientdata
LEAF_NODE	1932:34	1932:34	9	,
ARGUMENT	1932:36	1932:36	9	module
FIELD	1932:36	1932:36	10	module
LEAF_NODE	1932:36	1932:36	11	module
LEAF_NODE	1932:42	1932:42	9	,
ARGUMENT	1932:44	1932:44	9	"Strip/tile too large for JPEG"
FIELD	1932:44	1932:44	10	"Strip/tile too large for JPEG"
LEAF_NODE	1932:44	1932:44	11	"Strip/tile too large for JPEG"
LEAF_NODE	1932:75	1932:75	9	)
LEAF_NODE	1932:76	1932:76	7	;
JUMP_STATEMENT	1933:2	1933:12	6	return ( 0 ) ;
KEYWORD	1933:2	1933:2	7	return
LEAF_NODE	1933:2	1933:2	8	return
DESTINATION	1933:9	1933:9	7	( 0 )
EXPR	1933:9	1933:11	8	( 0 )
LEAF_NODE	1933:9	1933:9	9	(
FIELD	1933:10	1933:10	9	0
LEAF_NODE	1933:10	1933:10	10	0
LEAF_NODE	1933:11	1933:11	9	)
LEAF_NODE	1933:12	1933:12	7	;
LEAF_NODE	1934:1	1934:1	5	}
EXPR_STATEMENT	1935:1	1935:40	3	sp -> cinfo . c . image_width = segment_width ;
EXPR	1935:1	1935:1	4	sp -> cinfo . c . image_width = segment_width
ASSIGN	1935:1	1935:27	5	sp -> cinfo . c . image_width = segment_width
LVAL	1935:1	1935:1	6	sp -> cinfo . c . image_width
FIELD	1935:1	1935:13	7	sp -> cinfo . c . image_width
LEAF_NODE	1935:1	1935:1	8	sp
LEAF_NODE	1935:3	1935:3	8	->
LEAF_NODE	1935:5	1935:5	8	cinfo
LEAF_NODE	1935:10	1935:10	8	.
LEAF_NODE	1935:11	1935:11	8	c
LEAF_NODE	1935:12	1935:12	8	.
LEAF_NODE	1935:13	1935:13	8	image_width
ASSIGN_OP	1935:25	1935:25	6	=
LEAF_NODE	1935:25	1935:25	7	=
RVAL	1935:27	1935:27	6	segment_width
FIELD	1935:27	1935:27	7	segment_width
LEAF_NODE	1935:27	1935:27	8	segment_width
LEAF_NODE	1935:40	1935:40	4	;
EXPR_STATEMENT	1936:1	1936:42	3	sp -> cinfo . c . image_height = segment_height ;
EXPR	1936:1	1936:1	4	sp -> cinfo . c . image_height = segment_height
ASSIGN	1936:1	1936:28	5	sp -> cinfo . c . image_height = segment_height
LVAL	1936:1	1936:1	6	sp -> cinfo . c . image_height
FIELD	1936:1	1936:13	7	sp -> cinfo . c . image_height
LEAF_NODE	1936:1	1936:1	8	sp
LEAF_NODE	1936:3	1936:3	8	->
LEAF_NODE	1936:5	1936:5	8	cinfo
LEAF_NODE	1936:10	1936:10	8	.
LEAF_NODE	1936:11	1936:11	8	c
LEAF_NODE	1936:12	1936:12	8	.
LEAF_NODE	1936:13	1936:13	8	image_height
ASSIGN_OP	1936:26	1936:26	6	=
LEAF_NODE	1936:26	1936:26	7	=
RVAL	1936:28	1936:28	6	segment_height
FIELD	1936:28	1936:28	7	segment_height
LEAF_NODE	1936:28	1936:28	8	segment_height
LEAF_NODE	1936:42	1936:42	4	;
EXPR_STATEMENT	1937:1	1937:26	3	downsampled_input = FALSE ;
EXPR	1937:1	1937:1	4	downsampled_input = FALSE
ASSIGN	1937:1	1937:21	5	downsampled_input = FALSE
LVAL	1937:1	1937:1	6	downsampled_input
FIELD	1937:1	1937:1	7	downsampled_input
LEAF_NODE	1937:1	1937:1	8	downsampled_input
ASSIGN_OP	1937:19	1937:19	6	=
LEAF_NODE	1937:19	1937:19	7	=
RVAL	1937:21	1937:21	6	FALSE
FIELD	1937:21	1937:21	7	FALSE
LEAF_NODE	1937:21	1937:21	8	FALSE
LEAF_NODE	1937:26	1937:26	4	;
SELECTION	1938:1	1938:49	3	
KEYWORD	1938:1	1938:1	4	if
LEAF_NODE	1938:1	1938:1	5	if
LEAF_NODE	1938:4	1938:4	4	(
CONDITION	1938:5	1938:5	4	td -> td_planarconfig == PLANARCONFIG_CONTIG
EXPR	1938:5	1938:28	5	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	1938:5	1938:9	6	td -> td_planarconfig
LEAF_NODE	1938:5	1938:5	7	td
LEAF_NODE	1938:7	1938:7	7	->
LEAF_NODE	1938:9	1938:9	7	td_planarconfig
EQ_OPERATOR	1938:25	1938:25	6	==
LEAF_NODE	1938:25	1938:25	7	==
FIELD	1938:28	1938:28	6	PLANARCONFIG_CONTIG
LEAF_NODE	1938:28	1938:28	7	PLANARCONFIG_CONTIG
LEAF_NODE	1938:47	1938:47	4	)
STATEMENTS	1938:49	1958:1	4	
LEAF_NODE	1938:49	1938:49	5	{
STATEMENTS	1939:2	1953:4	5	
EXPR_STATEMENT	1939:2	1939:55	6	sp -> cinfo . c . input_components = td -> td_samplesperpixel ;
EXPR	1939:2	1939:2	7	sp -> cinfo . c . input_components = td -> td_samplesperpixel
ASSIGN	1939:2	1939:33	8	sp -> cinfo . c . input_components = td -> td_samplesperpixel
LVAL	1939:2	1939:2	9	sp -> cinfo . c . input_components
FIELD	1939:2	1939:14	10	sp -> cinfo . c . input_components
LEAF_NODE	1939:2	1939:2	11	sp
LEAF_NODE	1939:4	1939:4	11	->
LEAF_NODE	1939:6	1939:6	11	cinfo
LEAF_NODE	1939:11	1939:11	11	.
LEAF_NODE	1939:12	1939:12	11	c
LEAF_NODE	1939:13	1939:13	11	.
LEAF_NODE	1939:14	1939:14	11	input_components
ASSIGN_OP	1939:31	1939:31	9	=
LEAF_NODE	1939:31	1939:31	10	=
RVAL	1939:33	1939:33	9	td -> td_samplesperpixel
FIELD	1939:33	1939:37	10	td -> td_samplesperpixel
LEAF_NODE	1939:33	1939:33	11	td
LEAF_NODE	1939:35	1939:35	11	->
LEAF_NODE	1939:37	1939:37	11	td_samplesperpixel
LEAF_NODE	1939:55	1939:55	7	;
SELECTION	1940:2	1940:44	6	
KEYWORD	1940:2	1940:2	7	if
LEAF_NODE	1940:2	1940:2	8	if
LEAF_NODE	1940:5	1940:5	7	(
CONDITION	1940:6	1940:6	7	sp -> photometric == PHOTOMETRIC_YCBCR
EXPR	1940:6	1940:25	8	sp -> photometric == PHOTOMETRIC_YCBCR
FIELD	1940:6	1940:10	9	sp -> photometric
LEAF_NODE	1940:6	1940:6	10	sp
LEAF_NODE	1940:8	1940:8	10	->
LEAF_NODE	1940:10	1940:10	10	photometric
EQ_OPERATOR	1940:22	1940:22	9	==
LEAF_NODE	1940:22	1940:22	10	==
FIELD	1940:25	1940:25	9	PHOTOMETRIC_YCBCR
LEAF_NODE	1940:25	1940:25	10	PHOTOMETRIC_YCBCR
LEAF_NODE	1940:42	1940:42	7	)
STATEMENTS	1940:44	1953:2	7	
LEAF_NODE	1940:44	1940:44	8	{
STATEMENTS	1941:3	1952:3	8	
SELECTION	1941:3	1941:47	9	
KEYWORD	1941:3	1941:3	10	if
LEAF_NODE	1941:3	1941:3	11	if
LEAF_NODE	1941:6	1941:6	10	(
CONDITION	1941:7	1941:7	10	sp -> jpegcolormode != JPEGCOLORMODE_RGB
EXPR	1941:7	1941:28	11	sp -> jpegcolormode != JPEGCOLORMODE_RGB
FIELD	1941:7	1941:11	12	sp -> jpegcolormode
LEAF_NODE	1941:7	1941:7	13	sp
LEAF_NODE	1941:9	1941:9	13	->
LEAF_NODE	1941:11	1941:11	13	jpegcolormode
EQ_OPERATOR	1941:25	1941:25	12	!=
LEAF_NODE	1941:25	1941:25	13	!=
FIELD	1941:28	1941:28	12	JPEGCOLORMODE_RGB
LEAF_NODE	1941:28	1941:28	13	JPEGCOLORMODE_RGB
LEAF_NODE	1941:45	1941:45	10	)
STATEMENTS	1941:47	1944:3	10	
LEAF_NODE	1941:47	1941:47	11	{
STATEMENTS	1942:4	1942:4	11	
SELECTION	1942:4	1943:5	12	
KEYWORD	1942:4	1942:4	13	if
LEAF_NODE	1942:4	1942:4	14	if
LEAF_NODE	1942:7	1942:7	13	(
CONDITION	1942:8	1942:8	13	sp -> h_sampling != 1 || sp -> v_sampling != 1
EXPR	1942:8	1942:8	14	sp -> h_sampling != 1 || sp -> v_sampling != 1
OR	1942:8	1942:31	15	sp -> h_sampling != 1 || sp -> v_sampling != 1
EXPR	1942:8	1942:26	16	sp -> h_sampling != 1
FIELD	1942:8	1942:12	17	sp -> h_sampling
LEAF_NODE	1942:8	1942:8	18	sp
LEAF_NODE	1942:10	1942:10	18	->
LEAF_NODE	1942:12	1942:12	18	h_sampling
EQ_OPERATOR	1942:23	1942:23	17	!=
LEAF_NODE	1942:23	1942:23	18	!=
FIELD	1942:26	1942:26	17	1
LEAF_NODE	1942:26	1942:26	18	1
LEAF_NODE	1942:28	1942:28	16	||
EXPR	1942:31	1942:49	16	sp -> v_sampling != 1
FIELD	1942:31	1942:35	17	sp -> v_sampling
LEAF_NODE	1942:31	1942:31	18	sp
LEAF_NODE	1942:33	1942:33	18	->
LEAF_NODE	1942:35	1942:35	18	v_sampling
EQ_OPERATOR	1942:46	1942:46	17	!=
LEAF_NODE	1942:46	1942:46	18	!=
FIELD	1942:49	1942:49	17	1
LEAF_NODE	1942:49	1942:49	18	1
LEAF_NODE	1942:50	1942:50	13	)
STATEMENTS	1943:5	1943:5	13	
EXPR_STATEMENT	1943:5	1943:29	14	downsampled_input = TRUE ;
EXPR	1943:5	1943:5	15	downsampled_input = TRUE
ASSIGN	1943:5	1943:25	16	downsampled_input = TRUE
LVAL	1943:5	1943:5	17	downsampled_input
FIELD	1943:5	1943:5	18	downsampled_input
LEAF_NODE	1943:5	1943:5	19	downsampled_input
ASSIGN_OP	1943:23	1943:23	17	=
LEAF_NODE	1943:23	1943:23	18	=
RVAL	1943:25	1943:25	17	TRUE
FIELD	1943:25	1943:25	18	TRUE
LEAF_NODE	1943:25	1943:25	19	TRUE
LEAF_NODE	1943:29	1943:29	15	;
LEAF_NODE	1944:3	1944:3	11	}
SELECTION	1945:3	1946:4	9	
KEYWORD	1945:3	1945:3	10	if
LEAF_NODE	1945:3	1945:3	11	if
LEAF_NODE	1945:6	1945:6	10	(
CONDITION	1945:7	1945:7	10	! TIFFjpeg_set_colorspace ( sp , JCS_YCbCr )
EXPR	1945:7	1945:7	11	! TIFFjpeg_set_colorspace ( sp , JCS_YCbCr )
UNARY_EXPR	1945:7	1945:8	12	! TIFFjpeg_set_colorspace ( sp , JCS_YCbCr )
UNARY_OPERATOR	1945:7	1945:7	13	!
LEAF_NODE	1945:7	1945:7	14	!
FUNCTION_CALL	1945:8	1945:45	13	TIFFjpeg_set_colorspace ( sp , JCS_YCbCr )
CALLEE	1945:8	1945:8	14	TIFFjpeg_set_colorspace
LEAF_NODE	1945:8	1945:8	15	TIFFjpeg_set_colorspace
LEAF_NODE	1945:31	1945:31	14	(
ARGUMENT	1945:32	1945:32	14	sp
FIELD	1945:32	1945:32	15	sp
LEAF_NODE	1945:32	1945:32	16	sp
LEAF_NODE	1945:34	1945:34	14	,
ARGUMENT	1945:36	1945:36	14	JCS_YCbCr
FIELD	1945:36	1945:36	15	JCS_YCbCr
LEAF_NODE	1945:36	1945:36	16	JCS_YCbCr
LEAF_NODE	1945:45	1945:45	14	)
LEAF_NODE	1945:46	1945:46	10	)
STATEMENTS	1946:4	1946:4	10	
JUMP_STATEMENT	1946:4	1946:14	11	return ( 0 ) ;
KEYWORD	1946:4	1946:4	12	return
LEAF_NODE	1946:4	1946:4	13	return
DESTINATION	1946:11	1946:11	12	( 0 )
EXPR	1946:11	1946:13	13	( 0 )
LEAF_NODE	1946:11	1946:11	14	(
FIELD	1946:12	1946:12	14	0
LEAF_NODE	1946:12	1946:12	15	0
LEAF_NODE	1946:13	1946:13	14	)
LEAF_NODE	1946:14	1946:14	12	;
EXPR_STATEMENT	1951:3	1951:58	9	sp -> cinfo . c . comp_info [ 0 ] . h_samp_factor = sp -> h_sampling ;
EXPR	1951:3	1951:3	10	sp -> cinfo . c . comp_info [ 0 ] . h_samp_factor = sp -> h_sampling
ASSIGN	1951:3	1951:44	11	sp -> cinfo . c . comp_info [ 0 ] . h_samp_factor = sp -> h_sampling
LVAL	1951:3	1951:3	12	sp -> cinfo . c . comp_info [ 0 ] . h_samp_factor
FIELD	1951:3	1951:28	13	sp -> cinfo . c . comp_info [ 0 ] . h_samp_factor
LEAF_NODE	1951:3	1951:3	14	sp
LEAF_NODE	1951:5	1951:5	14	->
LEAF_NODE	1951:7	1951:7	14	cinfo
LEAF_NODE	1951:12	1951:12	14	.
LEAF_NODE	1951:13	1951:13	14	c
LEAF_NODE	1951:14	1951:14	14	.
LEAF_NODE	1951:15	1951:15	14	comp_info
LEAF_NODE	1951:24	1951:24	14	[
EXPR	1951:25	1951:25	14	0
FIELD	1951:25	1951:25	15	0
LEAF_NODE	1951:25	1951:25	16	0
LEAF_NODE	1951:26	1951:26	14	]
LEAF_NODE	1951:27	1951:27	14	.
LEAF_NODE	1951:28	1951:28	14	h_samp_factor
ASSIGN_OP	1951:42	1951:42	12	=
LEAF_NODE	1951:42	1951:42	13	=
RVAL	1951:44	1951:44	12	sp -> h_sampling
FIELD	1951:44	1951:48	13	sp -> h_sampling
LEAF_NODE	1951:44	1951:44	14	sp
LEAF_NODE	1951:46	1951:46	14	->
LEAF_NODE	1951:48	1951:48	14	h_sampling
LEAF_NODE	1951:58	1951:58	10	;
EXPR_STATEMENT	1952:3	1952:58	9	sp -> cinfo . c . comp_info [ 0 ] . v_samp_factor = sp -> v_sampling ;
EXPR	1952:3	1952:3	10	sp -> cinfo . c . comp_info [ 0 ] . v_samp_factor = sp -> v_sampling
ASSIGN	1952:3	1952:44	11	sp -> cinfo . c . comp_info [ 0 ] . v_samp_factor = sp -> v_sampling
LVAL	1952:3	1952:3	12	sp -> cinfo . c . comp_info [ 0 ] . v_samp_factor
FIELD	1952:3	1952:28	13	sp -> cinfo . c . comp_info [ 0 ] . v_samp_factor
LEAF_NODE	1952:3	1952:3	14	sp
LEAF_NODE	1952:5	1952:5	14	->
LEAF_NODE	1952:7	1952:7	14	cinfo
LEAF_NODE	1952:12	1952:12	14	.
LEAF_NODE	1952:13	1952:13	14	c
LEAF_NODE	1952:14	1952:14	14	.
LEAF_NODE	1952:15	1952:15	14	comp_info
LEAF_NODE	1952:24	1952:24	14	[
EXPR	1952:25	1952:25	14	0
FIELD	1952:25	1952:25	15	0
LEAF_NODE	1952:25	1952:25	16	0
LEAF_NODE	1952:26	1952:26	14	]
LEAF_NODE	1952:27	1952:27	14	.
LEAF_NODE	1952:28	1952:28	14	v_samp_factor
ASSIGN_OP	1952:42	1952:42	12	=
LEAF_NODE	1952:42	1952:42	13	=
RVAL	1952:44	1952:44	12	sp -> v_sampling
FIELD	1952:44	1952:48	13	sp -> v_sampling
LEAF_NODE	1952:44	1952:44	14	sp
LEAF_NODE	1952:46	1952:46	14	->
LEAF_NODE	1952:48	1952:48	14	v_sampling
LEAF_NODE	1952:58	1952:58	10	;
LEAF_NODE	1953:2	1953:2	8	}
SELECTION	1953:4	1953:9	6	
KEYWORD	1953:4	1953:4	7	else
LEAF_NODE	1953:4	1953:4	8	else
STATEMENTS	1953:9	1957:2	7	
LEAF_NODE	1953:9	1953:9	8	{
STATEMENTS	1954:3	1954:3	8	
SELECTION	1954:3	1955:4	9	
KEYWORD	1954:3	1954:3	10	if
LEAF_NODE	1954:3	1954:3	11	if
LEAF_NODE	1954:6	1954:6	10	(
CONDITION	1954:7	1954:7	10	! TIFFjpeg_set_colorspace ( sp , sp -> cinfo . c . in_color_space )
EXPR	1954:7	1954:7	11	! TIFFjpeg_set_colorspace ( sp , sp -> cinfo . c . in_color_space )
UNARY_EXPR	1954:7	1954:8	12	! TIFFjpeg_set_colorspace ( sp , sp -> cinfo . c . in_color_space )
UNARY_OPERATOR	1954:7	1954:7	13	!
LEAF_NODE	1954:7	1954:7	14	!
FUNCTION_CALL	1954:8	1954:62	13	TIFFjpeg_set_colorspace ( sp , sp -> cinfo . c . in_color_space )
CALLEE	1954:8	1954:8	14	TIFFjpeg_set_colorspace
LEAF_NODE	1954:8	1954:8	15	TIFFjpeg_set_colorspace
LEAF_NODE	1954:31	1954:31	14	(
ARGUMENT	1954:32	1954:32	14	sp
FIELD	1954:32	1954:32	15	sp
LEAF_NODE	1954:32	1954:32	16	sp
LEAF_NODE	1954:34	1954:34	14	,
ARGUMENT	1954:36	1954:36	14	sp -> cinfo . c . in_color_space
FIELD	1954:36	1954:48	15	sp -> cinfo . c . in_color_space
LEAF_NODE	1954:36	1954:36	16	sp
LEAF_NODE	1954:38	1954:38	16	->
LEAF_NODE	1954:40	1954:40	16	cinfo
LEAF_NODE	1954:45	1954:45	16	.
LEAF_NODE	1954:46	1954:46	16	c
LEAF_NODE	1954:47	1954:47	16	.
LEAF_NODE	1954:48	1954:48	16	in_color_space
LEAF_NODE	1954:62	1954:62	14	)
LEAF_NODE	1954:63	1954:63	10	)
STATEMENTS	1955:4	1955:4	10	
JUMP_STATEMENT	1955:4	1955:14	11	return ( 0 ) ;
KEYWORD	1955:4	1955:4	12	return
LEAF_NODE	1955:4	1955:4	13	return
DESTINATION	1955:11	1955:11	12	( 0 )
EXPR	1955:11	1955:13	13	( 0 )
LEAF_NODE	1955:11	1955:11	14	(
FIELD	1955:12	1955:12	14	0
LEAF_NODE	1955:12	1955:12	15	0
LEAF_NODE	1955:13	1955:13	14	)
LEAF_NODE	1955:14	1955:14	12	;
LEAF_NODE	1957:2	1957:2	8	}
LEAF_NODE	1958:1	1958:1	5	}
SELECTION	1958:3	1958:8	3	
KEYWORD	1958:3	1958:3	4	else
LEAF_NODE	1958:3	1958:3	5	else
STATEMENTS	1958:8	1968:1	4	
LEAF_NODE	1958:8	1958:8	5	{
STATEMENTS	1959:2	1963:2	5	
SELECTION	1959:2	1960:3	6	
KEYWORD	1959:2	1959:2	7	if
LEAF_NODE	1959:2	1959:2	8	if
LEAF_NODE	1959:5	1959:5	7	(
CONDITION	1959:6	1959:6	7	! TIFFjpeg_set_colorspace ( sp , JCS_UNKNOWN )
EXPR	1959:6	1959:6	8	! TIFFjpeg_set_colorspace ( sp , JCS_UNKNOWN )
UNARY_EXPR	1959:6	1959:7	9	! TIFFjpeg_set_colorspace ( sp , JCS_UNKNOWN )
UNARY_OPERATOR	1959:6	1959:6	10	!
LEAF_NODE	1959:6	1959:6	11	!
FUNCTION_CALL	1959:7	1959:46	10	TIFFjpeg_set_colorspace ( sp , JCS_UNKNOWN )
CALLEE	1959:7	1959:7	11	TIFFjpeg_set_colorspace
LEAF_NODE	1959:7	1959:7	12	TIFFjpeg_set_colorspace
LEAF_NODE	1959:30	1959:30	11	(
ARGUMENT	1959:31	1959:31	11	sp
FIELD	1959:31	1959:31	12	sp
LEAF_NODE	1959:31	1959:31	13	sp
LEAF_NODE	1959:33	1959:33	11	,
ARGUMENT	1959:35	1959:35	11	JCS_UNKNOWN
FIELD	1959:35	1959:35	12	JCS_UNKNOWN
LEAF_NODE	1959:35	1959:35	13	JCS_UNKNOWN
LEAF_NODE	1959:46	1959:46	11	)
LEAF_NODE	1959:47	1959:47	7	)
STATEMENTS	1960:3	1960:3	7	
JUMP_STATEMENT	1960:3	1960:13	8	return ( 0 ) ;
KEYWORD	1960:3	1960:3	9	return
LEAF_NODE	1960:3	1960:3	10	return
DESTINATION	1960:10	1960:10	9	( 0 )
EXPR	1960:10	1960:12	10	( 0 )
LEAF_NODE	1960:10	1960:10	11	(
FIELD	1960:11	1960:11	11	0
LEAF_NODE	1960:11	1960:11	12	0
LEAF_NODE	1960:12	1960:12	11	)
LEAF_NODE	1960:13	1960:13	9	;
EXPR_STATEMENT	1961:2	1961:43	6	sp -> cinfo . c . comp_info [ 0 ] . component_id = s ;
EXPR	1961:2	1961:2	7	sp -> cinfo . c . comp_info [ 0 ] . component_id = s
ASSIGN	1961:2	1961:42	8	sp -> cinfo . c . comp_info [ 0 ] . component_id = s
LVAL	1961:2	1961:2	9	sp -> cinfo . c . comp_info [ 0 ] . component_id
FIELD	1961:2	1961:27	10	sp -> cinfo . c . comp_info [ 0 ] . component_id
LEAF_NODE	1961:2	1961:2	11	sp
LEAF_NODE	1961:4	1961:4	11	->
LEAF_NODE	1961:6	1961:6	11	cinfo
LEAF_NODE	1961:11	1961:11	11	.
LEAF_NODE	1961:12	1961:12	11	c
LEAF_NODE	1961:13	1961:13	11	.
LEAF_NODE	1961:14	1961:14	11	comp_info
LEAF_NODE	1961:23	1961:23	11	[
EXPR	1961:24	1961:24	11	0
FIELD	1961:24	1961:24	12	0
LEAF_NODE	1961:24	1961:24	13	0
LEAF_NODE	1961:25	1961:25	11	]
LEAF_NODE	1961:26	1961:26	11	.
LEAF_NODE	1961:27	1961:27	11	component_id
ASSIGN_OP	1961:40	1961:40	9	=
LEAF_NODE	1961:40	1961:40	10	=
RVAL	1961:42	1961:42	9	s
FIELD	1961:42	1961:42	10	s
LEAF_NODE	1961:42	1961:42	11	s
LEAF_NODE	1961:43	1961:43	7	;
SELECTION	1963:2	1963:53	6	
KEYWORD	1963:2	1963:2	7	if
LEAF_NODE	1963:2	1963:2	8	if
LEAF_NODE	1963:5	1963:5	7	(
CONDITION	1963:6	1963:6	7	sp -> photometric == PHOTOMETRIC_YCBCR && s > 0
EXPR	1963:6	1963:6	8	sp -> photometric == PHOTOMETRIC_YCBCR && s > 0
AND	1963:6	1963:46	9	sp -> photometric == PHOTOMETRIC_YCBCR && s > 0
EXPR	1963:6	1963:25	10	sp -> photometric == PHOTOMETRIC_YCBCR
FIELD	1963:6	1963:10	11	sp -> photometric
LEAF_NODE	1963:6	1963:6	12	sp
LEAF_NODE	1963:8	1963:8	12	->
LEAF_NODE	1963:10	1963:10	12	photometric
EQ_OPERATOR	1963:22	1963:22	11	==
LEAF_NODE	1963:22	1963:22	12	==
FIELD	1963:25	1963:25	11	PHOTOMETRIC_YCBCR
LEAF_NODE	1963:25	1963:25	12	PHOTOMETRIC_YCBCR
LEAF_NODE	1963:43	1963:43	10	&&
EXPR	1963:46	1963:50	10	s > 0
FIELD	1963:46	1963:46	11	s
LEAF_NODE	1963:46	1963:46	12	s
REL_OPERATOR	1963:48	1963:48	11	>
LEAF_NODE	1963:48	1963:48	12	>
FIELD	1963:50	1963:50	11	0
LEAF_NODE	1963:50	1963:50	12	0
LEAF_NODE	1963:51	1963:51	7	)
STATEMENTS	1963:53	1967:2	7	
LEAF_NODE	1963:53	1963:53	8	{
STATEMENTS	1964:3	1966:3	8	
EXPR_STATEMENT	1964:3	1964:44	9	sp -> cinfo . c . comp_info [ 0 ] . quant_tbl_no = 1 ;
EXPR	1964:3	1964:3	10	sp -> cinfo . c . comp_info [ 0 ] . quant_tbl_no = 1
ASSIGN	1964:3	1964:43	11	sp -> cinfo . c . comp_info [ 0 ] . quant_tbl_no = 1
LVAL	1964:3	1964:3	12	sp -> cinfo . c . comp_info [ 0 ] . quant_tbl_no
FIELD	1964:3	1964:28	13	sp -> cinfo . c . comp_info [ 0 ] . quant_tbl_no
LEAF_NODE	1964:3	1964:3	14	sp
LEAF_NODE	1964:5	1964:5	14	->
LEAF_NODE	1964:7	1964:7	14	cinfo
LEAF_NODE	1964:12	1964:12	14	.
LEAF_NODE	1964:13	1964:13	14	c
LEAF_NODE	1964:14	1964:14	14	.
LEAF_NODE	1964:15	1964:15	14	comp_info
LEAF_NODE	1964:24	1964:24	14	[
EXPR	1964:25	1964:25	14	0
FIELD	1964:25	1964:25	15	0
LEAF_NODE	1964:25	1964:25	16	0
LEAF_NODE	1964:26	1964:26	14	]
LEAF_NODE	1964:27	1964:27	14	.
LEAF_NODE	1964:28	1964:28	14	quant_tbl_no
ASSIGN_OP	1964:41	1964:41	12	=
LEAF_NODE	1964:41	1964:41	13	=
RVAL	1964:43	1964:43	12	1
FIELD	1964:43	1964:43	13	1
LEAF_NODE	1964:43	1964:43	14	1
LEAF_NODE	1964:44	1964:44	10	;
EXPR_STATEMENT	1965:3	1965:41	9	sp -> cinfo . c . comp_info [ 0 ] . dc_tbl_no = 1 ;
EXPR	1965:3	1965:3	10	sp -> cinfo . c . comp_info [ 0 ] . dc_tbl_no = 1
ASSIGN	1965:3	1965:40	11	sp -> cinfo . c . comp_info [ 0 ] . dc_tbl_no = 1
LVAL	1965:3	1965:3	12	sp -> cinfo . c . comp_info [ 0 ] . dc_tbl_no
FIELD	1965:3	1965:28	13	sp -> cinfo . c . comp_info [ 0 ] . dc_tbl_no
LEAF_NODE	1965:3	1965:3	14	sp
LEAF_NODE	1965:5	1965:5	14	->
LEAF_NODE	1965:7	1965:7	14	cinfo
LEAF_NODE	1965:12	1965:12	14	.
LEAF_NODE	1965:13	1965:13	14	c
LEAF_NODE	1965:14	1965:14	14	.
LEAF_NODE	1965:15	1965:15	14	comp_info
LEAF_NODE	1965:24	1965:24	14	[
EXPR	1965:25	1965:25	14	0
FIELD	1965:25	1965:25	15	0
LEAF_NODE	1965:25	1965:25	16	0
LEAF_NODE	1965:26	1965:26	14	]
LEAF_NODE	1965:27	1965:27	14	.
LEAF_NODE	1965:28	1965:28	14	dc_tbl_no
ASSIGN_OP	1965:38	1965:38	12	=
LEAF_NODE	1965:38	1965:38	13	=
RVAL	1965:40	1965:40	12	1
FIELD	1965:40	1965:40	13	1
LEAF_NODE	1965:40	1965:40	14	1
LEAF_NODE	1965:41	1965:41	10	;
EXPR_STATEMENT	1966:3	1966:41	9	sp -> cinfo . c . comp_info [ 0 ] . ac_tbl_no = 1 ;
EXPR	1966:3	1966:3	10	sp -> cinfo . c . comp_info [ 0 ] . ac_tbl_no = 1
ASSIGN	1966:3	1966:40	11	sp -> cinfo . c . comp_info [ 0 ] . ac_tbl_no = 1
LVAL	1966:3	1966:3	12	sp -> cinfo . c . comp_info [ 0 ] . ac_tbl_no
FIELD	1966:3	1966:28	13	sp -> cinfo . c . comp_info [ 0 ] . ac_tbl_no
LEAF_NODE	1966:3	1966:3	14	sp
LEAF_NODE	1966:5	1966:5	14	->
LEAF_NODE	1966:7	1966:7	14	cinfo
LEAF_NODE	1966:12	1966:12	14	.
LEAF_NODE	1966:13	1966:13	14	c
LEAF_NODE	1966:14	1966:14	14	.
LEAF_NODE	1966:15	1966:15	14	comp_info
LEAF_NODE	1966:24	1966:24	14	[
EXPR	1966:25	1966:25	14	0
FIELD	1966:25	1966:25	15	0
LEAF_NODE	1966:25	1966:25	16	0
LEAF_NODE	1966:26	1966:26	14	]
LEAF_NODE	1966:27	1966:27	14	.
LEAF_NODE	1966:28	1966:28	14	ac_tbl_no
ASSIGN_OP	1966:38	1966:38	12	=
LEAF_NODE	1966:38	1966:38	13	=
RVAL	1966:40	1966:40	12	1
FIELD	1966:40	1966:40	13	1
LEAF_NODE	1966:40	1966:40	14	1
LEAF_NODE	1966:41	1966:41	10	;
LEAF_NODE	1967:2	1967:2	8	}
LEAF_NODE	1968:1	1968:1	5	}
EXPR_STATEMENT	1970:1	1970:38	3	sp -> cinfo . c . write_JFIF_header = FALSE ;
EXPR	1970:1	1970:1	4	sp -> cinfo . c . write_JFIF_header = FALSE
ASSIGN	1970:1	1970:33	5	sp -> cinfo . c . write_JFIF_header = FALSE
LVAL	1970:1	1970:1	6	sp -> cinfo . c . write_JFIF_header
FIELD	1970:1	1970:13	7	sp -> cinfo . c . write_JFIF_header
LEAF_NODE	1970:1	1970:1	8	sp
LEAF_NODE	1970:3	1970:3	8	->
LEAF_NODE	1970:5	1970:5	8	cinfo
LEAF_NODE	1970:10	1970:10	8	.
LEAF_NODE	1970:11	1970:11	8	c
LEAF_NODE	1970:12	1970:12	8	.
LEAF_NODE	1970:13	1970:13	8	write_JFIF_header
ASSIGN_OP	1970:31	1970:31	6	=
LEAF_NODE	1970:31	1970:31	7	=
RVAL	1970:33	1970:33	6	FALSE
FIELD	1970:33	1970:33	7	FALSE
LEAF_NODE	1970:33	1970:33	8	FALSE
LEAF_NODE	1970:38	1970:38	4	;
EXPR_STATEMENT	1971:1	1971:39	3	sp -> cinfo . c . write_Adobe_marker = FALSE ;
EXPR	1971:1	1971:1	4	sp -> cinfo . c . write_Adobe_marker = FALSE
ASSIGN	1971:1	1971:34	5	sp -> cinfo . c . write_Adobe_marker = FALSE
LVAL	1971:1	1971:1	6	sp -> cinfo . c . write_Adobe_marker
FIELD	1971:1	1971:13	7	sp -> cinfo . c . write_Adobe_marker
LEAF_NODE	1971:1	1971:1	8	sp
LEAF_NODE	1971:3	1971:3	8	->
LEAF_NODE	1971:5	1971:5	8	cinfo
LEAF_NODE	1971:10	1971:10	8	.
LEAF_NODE	1971:11	1971:11	8	c
LEAF_NODE	1971:12	1971:12	8	.
LEAF_NODE	1971:13	1971:13	8	write_Adobe_marker
ASSIGN_OP	1971:32	1971:32	6	=
LEAF_NODE	1971:32	1971:32	7	=
RVAL	1971:34	1971:34	6	FALSE
FIELD	1971:34	1971:34	7	FALSE
LEAF_NODE	1971:34	1971:34	8	FALSE
LEAF_NODE	1971:39	1971:39	4	;
SELECTION	1978:1	1979:2	3	
KEYWORD	1978:1	1978:1	4	if
LEAF_NODE	1978:1	1978:1	5	if
LEAF_NODE	1978:4	1978:4	4	(
CONDITION	1978:5	1978:5	4	! TIFFjpeg_set_quality ( sp , sp -> jpegquality , FALSE )
EXPR	1978:5	1978:5	5	! TIFFjpeg_set_quality ( sp , sp -> jpegquality , FALSE )
UNARY_EXPR	1978:5	1978:6	6	! TIFFjpeg_set_quality ( sp , sp -> jpegquality , FALSE )
UNARY_OPERATOR	1978:5	1978:5	7	!
LEAF_NODE	1978:5	1978:5	8	!
FUNCTION_CALL	1978:6	1978:53	7	TIFFjpeg_set_quality ( sp , sp -> jpegquality , FALSE )
CALLEE	1978:6	1978:6	8	TIFFjpeg_set_quality
LEAF_NODE	1978:6	1978:6	9	TIFFjpeg_set_quality
LEAF_NODE	1978:26	1978:26	8	(
ARGUMENT	1978:27	1978:27	8	sp
FIELD	1978:27	1978:27	9	sp
LEAF_NODE	1978:27	1978:27	10	sp
LEAF_NODE	1978:29	1978:29	8	,
ARGUMENT	1978:31	1978:31	8	sp -> jpegquality
FIELD	1978:31	1978:35	9	sp -> jpegquality
LEAF_NODE	1978:31	1978:31	10	sp
LEAF_NODE	1978:33	1978:33	10	->
LEAF_NODE	1978:35	1978:35	10	jpegquality
LEAF_NODE	1978:46	1978:46	8	,
ARGUMENT	1978:48	1978:48	8	FALSE
FIELD	1978:48	1978:48	9	FALSE
LEAF_NODE	1978:48	1978:48	10	FALSE
LEAF_NODE	1978:53	1978:53	8	)
LEAF_NODE	1978:54	1978:54	4	)
STATEMENTS	1979:2	1979:2	4	
JUMP_STATEMENT	1979:2	1979:12	5	return ( 0 ) ;
KEYWORD	1979:2	1979:2	6	return
LEAF_NODE	1979:2	1979:2	7	return
DESTINATION	1979:9	1979:9	6	( 0 )
EXPR	1979:9	1979:11	7	( 0 )
LEAF_NODE	1979:9	1979:9	8	(
FIELD	1979:10	1979:10	8	0
LEAF_NODE	1979:10	1979:10	9	0
LEAF_NODE	1979:11	1979:11	8	)
LEAF_NODE	1979:12	1979:12	6	;
SELECTION	1980:1	1980:48	3	
KEYWORD	1980:1	1980:1	4	if
LEAF_NODE	1980:1	1980:1	5	if
LEAF_NODE	1980:4	1980:4	4	(
CONDITION	1980:5	1980:5	4	sp -> jpegtablesmode & JPEGTABLESMODE_QUANT
EXPR	1980:5	1980:26	5	sp -> jpegtablesmode & JPEGTABLESMODE_QUANT
FIELD	1980:5	1980:9	6	sp -> jpegtablesmode
LEAF_NODE	1980:5	1980:5	7	sp
LEAF_NODE	1980:7	1980:7	7	->
LEAF_NODE	1980:9	1980:9	7	jpegtablesmode
LEAF_NODE	1980:24	1980:24	6	&
FIELD	1980:26	1980:26	6	JPEGTABLESMODE_QUANT
LEAF_NODE	1980:26	1980:26	7	JPEGTABLESMODE_QUANT
LEAF_NODE	1980:46	1980:46	4	)
STATEMENTS	1980:48	1983:1	4	
LEAF_NODE	1980:48	1980:48	5	{
STATEMENTS	1981:2	1982:2	5	
EXPR_STATEMENT	1981:2	1981:29	6	suppress_quant_table ( sp , 0 ) ;
EXPR	1981:2	1981:2	7	suppress_quant_table ( sp , 0 )
FUNCTION_CALL	1981:2	1981:28	8	suppress_quant_table ( sp , 0 )
CALLEE	1981:2	1981:2	9	suppress_quant_table
LEAF_NODE	1981:2	1981:2	10	suppress_quant_table
LEAF_NODE	1981:22	1981:22	9	(
ARGUMENT	1981:23	1981:23	9	sp
FIELD	1981:23	1981:23	10	sp
LEAF_NODE	1981:23	1981:23	11	sp
LEAF_NODE	1981:25	1981:25	9	,
ARGUMENT	1981:27	1981:27	9	0
FIELD	1981:27	1981:27	10	0
LEAF_NODE	1981:27	1981:27	11	0
LEAF_NODE	1981:28	1981:28	9	)
LEAF_NODE	1981:29	1981:29	7	;
EXPR_STATEMENT	1982:2	1982:29	6	suppress_quant_table ( sp , 1 ) ;
EXPR	1982:2	1982:2	7	suppress_quant_table ( sp , 1 )
FUNCTION_CALL	1982:2	1982:28	8	suppress_quant_table ( sp , 1 )
CALLEE	1982:2	1982:2	9	suppress_quant_table
LEAF_NODE	1982:2	1982:2	10	suppress_quant_table
LEAF_NODE	1982:22	1982:22	9	(
ARGUMENT	1982:23	1982:23	9	sp
FIELD	1982:23	1982:23	10	sp
LEAF_NODE	1982:23	1982:23	11	sp
LEAF_NODE	1982:25	1982:25	9	,
ARGUMENT	1982:27	1982:27	9	1
FIELD	1982:27	1982:27	10	1
LEAF_NODE	1982:27	1982:27	11	1
LEAF_NODE	1982:28	1982:28	9	)
LEAF_NODE	1982:29	1982:29	7	;
LEAF_NODE	1983:1	1983:1	5	}
SELECTION	1984:1	1984:6	3	
KEYWORD	1984:1	1984:1	4	else
LEAF_NODE	1984:1	1984:1	5	else
STATEMENTS	1984:6	1987:1	4	
LEAF_NODE	1984:6	1984:6	5	{
STATEMENTS	1985:2	1986:2	5	
EXPR_STATEMENT	1985:2	1985:31	6	unsuppress_quant_table ( sp , 0 ) ;
EXPR	1985:2	1985:2	7	unsuppress_quant_table ( sp , 0 )
FUNCTION_CALL	1985:2	1985:30	8	unsuppress_quant_table ( sp , 0 )
CALLEE	1985:2	1985:2	9	unsuppress_quant_table
LEAF_NODE	1985:2	1985:2	10	unsuppress_quant_table
LEAF_NODE	1985:24	1985:24	9	(
ARGUMENT	1985:25	1985:25	9	sp
FIELD	1985:25	1985:25	10	sp
LEAF_NODE	1985:25	1985:25	11	sp
LEAF_NODE	1985:27	1985:27	9	,
ARGUMENT	1985:29	1985:29	9	0
FIELD	1985:29	1985:29	10	0
LEAF_NODE	1985:29	1985:29	11	0
LEAF_NODE	1985:30	1985:30	9	)
LEAF_NODE	1985:31	1985:31	7	;
EXPR_STATEMENT	1986:2	1986:31	6	unsuppress_quant_table ( sp , 1 ) ;
EXPR	1986:2	1986:2	7	unsuppress_quant_table ( sp , 1 )
FUNCTION_CALL	1986:2	1986:30	8	unsuppress_quant_table ( sp , 1 )
CALLEE	1986:2	1986:2	9	unsuppress_quant_table
LEAF_NODE	1986:2	1986:2	10	unsuppress_quant_table
LEAF_NODE	1986:24	1986:24	9	(
ARGUMENT	1986:25	1986:25	9	sp
FIELD	1986:25	1986:25	10	sp
LEAF_NODE	1986:25	1986:25	11	sp
LEAF_NODE	1986:27	1986:27	9	,
ARGUMENT	1986:29	1986:29	9	1
FIELD	1986:29	1986:29	10	1
LEAF_NODE	1986:29	1986:29	11	1
LEAF_NODE	1986:30	1986:30	9	)
LEAF_NODE	1986:31	1986:31	7	;
LEAF_NODE	1987:1	1987:1	5	}
SELECTION	1988:1	1989:1	3	
KEYWORD	1988:1	1988:1	4	if
LEAF_NODE	1988:1	1988:1	5	if
LEAF_NODE	1988:4	1988:4	4	(
CONDITION	1988:5	1988:5	4	sp -> jpegtablesmode & JPEGTABLESMODE_HUFF
EXPR	1988:5	1988:26	5	sp -> jpegtablesmode & JPEGTABLESMODE_HUFF
FIELD	1988:5	1988:9	6	sp -> jpegtablesmode
LEAF_NODE	1988:5	1988:5	7	sp
LEAF_NODE	1988:7	1988:7	7	->
LEAF_NODE	1988:9	1988:9	7	jpegtablesmode
LEAF_NODE	1988:24	1988:24	6	&
FIELD	1988:26	1988:26	6	JPEGTABLESMODE_HUFF
LEAF_NODE	1988:26	1988:26	7	JPEGTABLESMODE_HUFF
LEAF_NODE	1988:45	1988:45	4	)
STATEMENTS	1989:1	1996:1	4	
LEAF_NODE	1989:1	1989:1	5	{
STATEMENTS	1993:2	1995:2	5	
EXPR_STATEMENT	1993:2	1993:28	6	suppress_huff_table ( sp , 0 ) ;
EXPR	1993:2	1993:2	7	suppress_huff_table ( sp , 0 )
FUNCTION_CALL	1993:2	1993:27	8	suppress_huff_table ( sp , 0 )
CALLEE	1993:2	1993:2	9	suppress_huff_table
LEAF_NODE	1993:2	1993:2	10	suppress_huff_table
LEAF_NODE	1993:21	1993:21	9	(
ARGUMENT	1993:22	1993:22	9	sp
FIELD	1993:22	1993:22	10	sp
LEAF_NODE	1993:22	1993:22	11	sp
LEAF_NODE	1993:24	1993:24	9	,
ARGUMENT	1993:26	1993:26	9	0
FIELD	1993:26	1993:26	10	0
LEAF_NODE	1993:26	1993:26	11	0
LEAF_NODE	1993:27	1993:27	9	)
LEAF_NODE	1993:28	1993:28	7	;
EXPR_STATEMENT	1994:2	1994:28	6	suppress_huff_table ( sp , 1 ) ;
EXPR	1994:2	1994:2	7	suppress_huff_table ( sp , 1 )
FUNCTION_CALL	1994:2	1994:27	8	suppress_huff_table ( sp , 1 )
CALLEE	1994:2	1994:2	9	suppress_huff_table
LEAF_NODE	1994:2	1994:2	10	suppress_huff_table
LEAF_NODE	1994:21	1994:21	9	(
ARGUMENT	1994:22	1994:22	9	sp
FIELD	1994:22	1994:22	10	sp
LEAF_NODE	1994:22	1994:22	11	sp
LEAF_NODE	1994:24	1994:24	9	,
ARGUMENT	1994:26	1994:26	9	1
FIELD	1994:26	1994:26	10	1
LEAF_NODE	1994:26	1994:26	11	1
LEAF_NODE	1994:27	1994:27	9	)
LEAF_NODE	1994:28	1994:28	7	;
EXPR_STATEMENT	1995:2	1995:37	6	sp -> cinfo . c . optimize_coding = FALSE ;
EXPR	1995:2	1995:2	7	sp -> cinfo . c . optimize_coding = FALSE
ASSIGN	1995:2	1995:32	8	sp -> cinfo . c . optimize_coding = FALSE
LVAL	1995:2	1995:2	9	sp -> cinfo . c . optimize_coding
FIELD	1995:2	1995:14	10	sp -> cinfo . c . optimize_coding
LEAF_NODE	1995:2	1995:2	11	sp
LEAF_NODE	1995:4	1995:4	11	->
LEAF_NODE	1995:6	1995:6	11	cinfo
LEAF_NODE	1995:11	1995:11	11	.
LEAF_NODE	1995:12	1995:12	11	c
LEAF_NODE	1995:13	1995:13	11	.
LEAF_NODE	1995:14	1995:14	11	optimize_coding
ASSIGN_OP	1995:30	1995:30	9	=
LEAF_NODE	1995:30	1995:30	10	=
RVAL	1995:32	1995:32	9	FALSE
FIELD	1995:32	1995:32	10	FALSE
LEAF_NODE	1995:32	1995:32	11	FALSE
LEAF_NODE	1995:37	1995:37	7	;
LEAF_NODE	1996:1	1996:1	5	}
SELECTION	1997:1	1998:2	3	
KEYWORD	1997:1	1997:1	4	else
LEAF_NODE	1997:1	1997:1	5	else
STATEMENTS	1998:2	1998:2	4	
EXPR_STATEMENT	1998:2	1998:36	5	sp -> cinfo . c . optimize_coding = TRUE ;
EXPR	1998:2	1998:2	6	sp -> cinfo . c . optimize_coding = TRUE
ASSIGN	1998:2	1998:32	7	sp -> cinfo . c . optimize_coding = TRUE
LVAL	1998:2	1998:2	8	sp -> cinfo . c . optimize_coding
FIELD	1998:2	1998:14	9	sp -> cinfo . c . optimize_coding
LEAF_NODE	1998:2	1998:2	10	sp
LEAF_NODE	1998:4	1998:4	10	->
LEAF_NODE	1998:6	1998:6	10	cinfo
LEAF_NODE	1998:11	1998:11	10	.
LEAF_NODE	1998:12	1998:12	10	c
LEAF_NODE	1998:13	1998:13	10	.
LEAF_NODE	1998:14	1998:14	10	optimize_coding
ASSIGN_OP	1998:30	1998:30	8	=
LEAF_NODE	1998:30	1998:30	9	=
RVAL	1998:32	1998:32	8	TRUE
FIELD	1998:32	1998:32	9	TRUE
LEAF_NODE	1998:32	1998:32	10	TRUE
LEAF_NODE	1998:36	1998:36	6	;
SELECTION	1999:1	1999:24	3	
KEYWORD	1999:1	1999:1	4	if
LEAF_NODE	1999:1	1999:1	5	if
LEAF_NODE	1999:4	1999:4	4	(
CONDITION	1999:5	1999:5	4	downsampled_input
EXPR	1999:5	1999:5	5	downsampled_input
FIELD	1999:5	1999:5	6	downsampled_input
LEAF_NODE	1999:5	1999:5	7	downsampled_input
LEAF_NODE	1999:22	1999:22	4	)
STATEMENTS	1999:24	2005:1	4	
LEAF_NODE	1999:24	1999:24	5	{
STATEMENTS	2001:2	2004:2	5	
EXPR_STATEMENT	2001:2	2001:32	6	sp -> cinfo . c . raw_data_in = TRUE ;
EXPR	2001:2	2001:2	7	sp -> cinfo . c . raw_data_in = TRUE
ASSIGN	2001:2	2001:28	8	sp -> cinfo . c . raw_data_in = TRUE
LVAL	2001:2	2001:2	9	sp -> cinfo . c . raw_data_in
FIELD	2001:2	2001:14	10	sp -> cinfo . c . raw_data_in
LEAF_NODE	2001:2	2001:2	11	sp
LEAF_NODE	2001:4	2001:4	11	->
LEAF_NODE	2001:6	2001:6	11	cinfo
LEAF_NODE	2001:11	2001:11	11	.
LEAF_NODE	2001:12	2001:12	11	c
LEAF_NODE	2001:13	2001:13	11	.
LEAF_NODE	2001:14	2001:14	11	raw_data_in
ASSIGN_OP	2001:26	2001:26	9	=
LEAF_NODE	2001:26	2001:26	10	=
RVAL	2001:28	2001:28	9	TRUE
FIELD	2001:28	2001:28	10	TRUE
LEAF_NODE	2001:28	2001:28	11	TRUE
LEAF_NODE	2001:32	2001:32	7	;
EXPR_STATEMENT	2002:2	2002:36	6	tif -> tif_encoderow = JPEGEncodeRaw ;
EXPR	2002:2	2002:2	7	tif -> tif_encoderow = JPEGEncodeRaw
ASSIGN	2002:2	2002:23	8	tif -> tif_encoderow = JPEGEncodeRaw
LVAL	2002:2	2002:2	9	tif -> tif_encoderow
FIELD	2002:2	2002:7	10	tif -> tif_encoderow
LEAF_NODE	2002:2	2002:2	11	tif
LEAF_NODE	2002:5	2002:5	11	->
LEAF_NODE	2002:7	2002:7	11	tif_encoderow
ASSIGN_OP	2002:21	2002:21	9	=
LEAF_NODE	2002:21	2002:21	10	=
RVAL	2002:23	2002:23	9	JPEGEncodeRaw
FIELD	2002:23	2002:23	10	JPEGEncodeRaw
LEAF_NODE	2002:23	2002:23	11	JPEGEncodeRaw
LEAF_NODE	2002:36	2002:36	7	;
EXPR_STATEMENT	2003:2	2003:38	6	tif -> tif_encodestrip = JPEGEncodeRaw ;
EXPR	2003:2	2003:2	7	tif -> tif_encodestrip = JPEGEncodeRaw
ASSIGN	2003:2	2003:25	8	tif -> tif_encodestrip = JPEGEncodeRaw
LVAL	2003:2	2003:2	9	tif -> tif_encodestrip
FIELD	2003:2	2003:7	10	tif -> tif_encodestrip
LEAF_NODE	2003:2	2003:2	11	tif
LEAF_NODE	2003:5	2003:5	11	->
LEAF_NODE	2003:7	2003:7	11	tif_encodestrip
ASSIGN_OP	2003:23	2003:23	9	=
LEAF_NODE	2003:23	2003:23	10	=
RVAL	2003:25	2003:25	9	JPEGEncodeRaw
FIELD	2003:25	2003:25	10	JPEGEncodeRaw
LEAF_NODE	2003:25	2003:25	11	JPEGEncodeRaw
LEAF_NODE	2003:38	2003:38	7	;
EXPR_STATEMENT	2004:2	2004:37	6	tif -> tif_encodetile = JPEGEncodeRaw ;
EXPR	2004:2	2004:2	7	tif -> tif_encodetile = JPEGEncodeRaw
ASSIGN	2004:2	2004:24	8	tif -> tif_encodetile = JPEGEncodeRaw
LVAL	2004:2	2004:2	9	tif -> tif_encodetile
FIELD	2004:2	2004:7	10	tif -> tif_encodetile
LEAF_NODE	2004:2	2004:2	11	tif
LEAF_NODE	2004:5	2004:5	11	->
LEAF_NODE	2004:7	2004:7	11	tif_encodetile
ASSIGN_OP	2004:22	2004:22	9	=
LEAF_NODE	2004:22	2004:22	10	=
RVAL	2004:24	2004:24	9	JPEGEncodeRaw
FIELD	2004:24	2004:24	10	JPEGEncodeRaw
LEAF_NODE	2004:24	2004:24	11	JPEGEncodeRaw
LEAF_NODE	2004:37	2004:37	7	;
LEAF_NODE	2005:1	2005:1	5	}
SELECTION	2005:3	2005:8	3	
KEYWORD	2005:3	2005:3	4	else
LEAF_NODE	2005:3	2005:3	5	else
STATEMENTS	2005:8	2011:1	4	
LEAF_NODE	2005:8	2005:8	5	{
STATEMENTS	2007:2	2010:2	5	
EXPR_STATEMENT	2007:2	2007:33	6	sp -> cinfo . c . raw_data_in = FALSE ;
EXPR	2007:2	2007:2	7	sp -> cinfo . c . raw_data_in = FALSE
ASSIGN	2007:2	2007:28	8	sp -> cinfo . c . raw_data_in = FALSE
LVAL	2007:2	2007:2	9	sp -> cinfo . c . raw_data_in
FIELD	2007:2	2007:14	10	sp -> cinfo . c . raw_data_in
LEAF_NODE	2007:2	2007:2	11	sp
LEAF_NODE	2007:4	2007:4	11	->
LEAF_NODE	2007:6	2007:6	11	cinfo
LEAF_NODE	2007:11	2007:11	11	.
LEAF_NODE	2007:12	2007:12	11	c
LEAF_NODE	2007:13	2007:13	11	.
LEAF_NODE	2007:14	2007:14	11	raw_data_in
ASSIGN_OP	2007:26	2007:26	9	=
LEAF_NODE	2007:26	2007:26	10	=
RVAL	2007:28	2007:28	9	FALSE
FIELD	2007:28	2007:28	10	FALSE
LEAF_NODE	2007:28	2007:28	11	FALSE
LEAF_NODE	2007:33	2007:33	7	;
EXPR_STATEMENT	2008:2	2008:33	6	tif -> tif_encoderow = JPEGEncode ;
EXPR	2008:2	2008:2	7	tif -> tif_encoderow = JPEGEncode
ASSIGN	2008:2	2008:23	8	tif -> tif_encoderow = JPEGEncode
LVAL	2008:2	2008:2	9	tif -> tif_encoderow
FIELD	2008:2	2008:7	10	tif -> tif_encoderow
LEAF_NODE	2008:2	2008:2	11	tif
LEAF_NODE	2008:5	2008:5	11	->
LEAF_NODE	2008:7	2008:7	11	tif_encoderow
ASSIGN_OP	2008:21	2008:21	9	=
LEAF_NODE	2008:21	2008:21	10	=
RVAL	2008:23	2008:23	9	JPEGEncode
FIELD	2008:23	2008:23	10	JPEGEncode
LEAF_NODE	2008:23	2008:23	11	JPEGEncode
LEAF_NODE	2008:33	2008:33	7	;
EXPR_STATEMENT	2009:2	2009:35	6	tif -> tif_encodestrip = JPEGEncode ;
EXPR	2009:2	2009:2	7	tif -> tif_encodestrip = JPEGEncode
ASSIGN	2009:2	2009:25	8	tif -> tif_encodestrip = JPEGEncode
LVAL	2009:2	2009:2	9	tif -> tif_encodestrip
FIELD	2009:2	2009:7	10	tif -> tif_encodestrip
LEAF_NODE	2009:2	2009:2	11	tif
LEAF_NODE	2009:5	2009:5	11	->
LEAF_NODE	2009:7	2009:7	11	tif_encodestrip
ASSIGN_OP	2009:23	2009:23	9	=
LEAF_NODE	2009:23	2009:23	10	=
RVAL	2009:25	2009:25	9	JPEGEncode
FIELD	2009:25	2009:25	10	JPEGEncode
LEAF_NODE	2009:25	2009:25	11	JPEGEncode
LEAF_NODE	2009:35	2009:35	7	;
EXPR_STATEMENT	2010:2	2010:34	6	tif -> tif_encodetile = JPEGEncode ;
EXPR	2010:2	2010:2	7	tif -> tif_encodetile = JPEGEncode
ASSIGN	2010:2	2010:24	8	tif -> tif_encodetile = JPEGEncode
LVAL	2010:2	2010:2	9	tif -> tif_encodetile
FIELD	2010:2	2010:7	10	tif -> tif_encodetile
LEAF_NODE	2010:2	2010:2	11	tif
LEAF_NODE	2010:5	2010:5	11	->
LEAF_NODE	2010:7	2010:7	11	tif_encodetile
ASSIGN_OP	2010:22	2010:22	9	=
LEAF_NODE	2010:22	2010:22	10	=
RVAL	2010:24	2010:24	9	JPEGEncode
FIELD	2010:24	2010:24	10	JPEGEncode
LEAF_NODE	2010:24	2010:24	11	JPEGEncode
LEAF_NODE	2010:34	2010:34	7	;
LEAF_NODE	2011:1	2011:1	5	}
SELECTION	2013:1	2014:2	3	
KEYWORD	2013:1	2013:1	4	if
LEAF_NODE	2013:1	2013:1	5	if
LEAF_NODE	2013:4	2013:4	4	(
CONDITION	2013:5	2013:5	4	! TIFFjpeg_start_compress ( sp , FALSE )
EXPR	2013:5	2013:5	5	! TIFFjpeg_start_compress ( sp , FALSE )
UNARY_EXPR	2013:5	2013:6	6	! TIFFjpeg_start_compress ( sp , FALSE )
UNARY_OPERATOR	2013:5	2013:5	7	!
LEAF_NODE	2013:5	2013:5	8	!
FUNCTION_CALL	2013:6	2013:39	7	TIFFjpeg_start_compress ( sp , FALSE )
CALLEE	2013:6	2013:6	8	TIFFjpeg_start_compress
LEAF_NODE	2013:6	2013:6	9	TIFFjpeg_start_compress
LEAF_NODE	2013:29	2013:29	8	(
ARGUMENT	2013:30	2013:30	8	sp
FIELD	2013:30	2013:30	9	sp
LEAF_NODE	2013:30	2013:30	10	sp
LEAF_NODE	2013:32	2013:32	8	,
ARGUMENT	2013:34	2013:34	8	FALSE
FIELD	2013:34	2013:34	9	FALSE
LEAF_NODE	2013:34	2013:34	10	FALSE
LEAF_NODE	2013:39	2013:39	8	)
LEAF_NODE	2013:40	2013:40	4	)
STATEMENTS	2014:2	2014:2	4	
JUMP_STATEMENT	2014:2	2014:12	5	return ( 0 ) ;
KEYWORD	2014:2	2014:2	6	return
LEAF_NODE	2014:2	2014:2	7	return
DESTINATION	2014:9	2014:9	6	( 0 )
EXPR	2014:9	2014:11	7	( 0 )
LEAF_NODE	2014:9	2014:9	8	(
FIELD	2014:10	2014:10	8	0
LEAF_NODE	2014:10	2014:10	9	0
LEAF_NODE	2014:11	2014:11	8	)
LEAF_NODE	2014:12	2014:12	6	;
SELECTION	2016:1	2016:24	3	
KEYWORD	2016:1	2016:1	4	if
LEAF_NODE	2016:1	2016:1	5	if
LEAF_NODE	2016:4	2016:4	4	(
CONDITION	2016:5	2016:5	4	downsampled_input
EXPR	2016:5	2016:5	5	downsampled_input
FIELD	2016:5	2016:5	6	downsampled_input
LEAF_NODE	2016:5	2016:5	7	downsampled_input
LEAF_NODE	2016:22	2016:22	4	)
STATEMENTS	2016:24	2020:1	4	
LEAF_NODE	2016:24	2016:24	5	{
STATEMENTS	2017:2	2017:2	5	
SELECTION	2017:2	2019:3	6	
KEYWORD	2017:2	2017:2	7	if
LEAF_NODE	2017:2	2017:2	8	if
LEAF_NODE	2017:5	2017:5	7	(
CONDITION	2017:6	2017:6	7	! alloc_downsampled_buffers ( tif , sp -> cinfo . c . comp_info , sp -> cinfo . c . num_components )
EXPR	2017:6	2017:6	8	! alloc_downsampled_buffers ( tif , sp -> cinfo . c . comp_info , sp -> cinfo . c . num_components )
UNARY_EXPR	2017:6	2017:7	9	! alloc_downsampled_buffers ( tif , sp -> cinfo . c . comp_info , sp -> cinfo . c . num_components )
UNARY_OPERATOR	2017:6	2017:6	10	!
LEAF_NODE	2017:6	2017:6	11	!
FUNCTION_CALL	2017:7	2018:38	10	alloc_downsampled_buffers ( tif , sp -> cinfo . c . comp_info , sp -> cinfo . c . num_components )
CALLEE	2017:7	2017:7	11	alloc_downsampled_buffers
LEAF_NODE	2017:7	2017:7	12	alloc_downsampled_buffers
LEAF_NODE	2017:32	2017:32	11	(
ARGUMENT	2017:33	2017:33	11	tif
FIELD	2017:33	2017:33	12	tif
LEAF_NODE	2017:33	2017:33	13	tif
LEAF_NODE	2017:36	2017:36	11	,
ARGUMENT	2017:38	2017:38	11	sp -> cinfo . c . comp_info
FIELD	2017:38	2017:50	12	sp -> cinfo . c . comp_info
LEAF_NODE	2017:38	2017:38	13	sp
LEAF_NODE	2017:40	2017:40	13	->
LEAF_NODE	2017:42	2017:42	13	cinfo
LEAF_NODE	2017:47	2017:47	13	.
LEAF_NODE	2017:48	2017:48	13	c
LEAF_NODE	2017:49	2017:49	13	.
LEAF_NODE	2017:50	2017:50	13	comp_info
LEAF_NODE	2017:59	2017:59	11	,
ARGUMENT	2018:12	2018:12	11	sp -> cinfo . c . num_components
FIELD	2018:12	2018:24	12	sp -> cinfo . c . num_components
LEAF_NODE	2018:12	2018:12	13	sp
LEAF_NODE	2018:14	2018:14	13	->
LEAF_NODE	2018:16	2018:16	13	cinfo
LEAF_NODE	2018:21	2018:21	13	.
LEAF_NODE	2018:22	2018:22	13	c
LEAF_NODE	2018:23	2018:23	13	.
LEAF_NODE	2018:24	2018:24	13	num_components
LEAF_NODE	2018:38	2018:38	11	)
LEAF_NODE	2018:39	2018:39	7	)
STATEMENTS	2019:3	2019:3	7	
JUMP_STATEMENT	2019:3	2019:13	8	return ( 0 ) ;
KEYWORD	2019:3	2019:3	9	return
LEAF_NODE	2019:3	2019:3	10	return
DESTINATION	2019:10	2019:10	9	( 0 )
EXPR	2019:10	2019:12	10	( 0 )
LEAF_NODE	2019:10	2019:10	11	(
FIELD	2019:11	2019:11	11	0
LEAF_NODE	2019:11	2019:11	12	0
LEAF_NODE	2019:12	2019:12	11	)
LEAF_NODE	2019:13	2019:13	9	;
LEAF_NODE	2020:1	2020:1	5	}
EXPR_STATEMENT	2021:1	2021:18	3	sp -> scancount = 0 ;
EXPR	2021:1	2021:1	4	sp -> scancount = 0
ASSIGN	2021:1	2021:17	5	sp -> scancount = 0
LVAL	2021:1	2021:1	6	sp -> scancount
FIELD	2021:1	2021:5	7	sp -> scancount
LEAF_NODE	2021:1	2021:1	8	sp
LEAF_NODE	2021:3	2021:3	8	->
LEAF_NODE	2021:5	2021:5	8	scancount
ASSIGN_OP	2021:15	2021:15	6	=
LEAF_NODE	2021:15	2021:15	7	=
RVAL	2021:17	2021:17	6	0
FIELD	2021:17	2021:17	7	0
LEAF_NODE	2021:17	2021:17	8	0
LEAF_NODE	2021:18	2021:18	4	;
JUMP_STATEMENT	2023:1	2023:11	3	return ( 1 ) ;
KEYWORD	2023:1	2023:1	4	return
LEAF_NODE	2023:1	2023:1	5	return
DESTINATION	2023:8	2023:8	4	( 1 )
EXPR	2023:8	2023:10	5	( 1 )
LEAF_NODE	2023:8	2023:8	6	(
FIELD	2023:9	2023:9	6	1
LEAF_NODE	2023:9	2023:9	7	1
LEAF_NODE	2023:10	2023:10	6	)
LEAF_NODE	2023:11	2023:11	4	;
LEAF_NODE	2024:0	2024:0	2	}
FUNCTION_DEF	2030:0	2102:0	1	
RETURN_TYPE	2030:0	2030:7	2	static int
LEAF_NODE	2030:0	2030:0	3	static
TYPE_NAME	2030:7	2030:7	3	int
LEAF_NODE	2030:7	2030:7	4	int
FUNCTION_NAME	2031:0	2031:0	2	JPEGEncode
LEAF_NODE	2031:0	2031:0	3	JPEGEncode
PARAMETER_LIST	2031:10	2031:55	2	( TIFF * tif , uint8 * buf , tmsize_t cc , uint16 s )
LEAF_NODE	2031:10	2031:10	3	(
PARAMETER_DECL	2031:11	2031:17	3	TIFF * tif
TYPE	2031:11	2031:15	4	TIFF *
TYPE_NAME	2031:11	2031:11	5	TIFF
LEAF_NODE	2031:11	2031:11	6	TIFF
POINTER	2031:15	2031:15	5	*
LEAF_NODE	2031:15	2031:15	6	*
NAME	2031:17	2031:17	4	tif
LEAF_NODE	2031:17	2031:17	5	tif
LEAF_NODE	2031:20	2031:20	3	,
PARAMETER_DECL	2031:22	2031:29	3	uint8 * buf
TYPE	2031:22	2031:27	4	uint8 *
TYPE_NAME	2031:22	2031:22	5	uint8
LEAF_NODE	2031:22	2031:22	6	uint8
POINTER	2031:27	2031:27	5	*
LEAF_NODE	2031:27	2031:27	6	*
NAME	2031:29	2031:29	4	buf
LEAF_NODE	2031:29	2031:29	5	buf
LEAF_NODE	2031:32	2031:32	3	,
PARAMETER_DECL	2031:34	2031:43	3	tmsize_t cc
TYPE	2031:34	2031:34	4	tmsize_t
TYPE_NAME	2031:34	2031:34	5	tmsize_t
LEAF_NODE	2031:34	2031:34	6	tmsize_t
NAME	2031:43	2031:43	4	cc
LEAF_NODE	2031:43	2031:43	5	cc
LEAF_NODE	2031:45	2031:45	3	,
PARAMETER_DECL	2031:47	2031:54	3	uint16 s
TYPE	2031:47	2031:47	4	uint16
TYPE_NAME	2031:47	2031:47	5	uint16
LEAF_NODE	2031:47	2031:47	6	uint16
NAME	2031:54	2031:54	4	s
LEAF_NODE	2031:54	2031:54	5	s
LEAF_NODE	2031:55	2031:55	3	)
LEAF_NODE	2032:0	2032:0	2	{
STATEMENTS	2033:1	2101:1	2	
SIMPLE_DECL	2033:1	2033:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2033:1	2033:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2033:1	2033:11	5	JPEGState *
TYPE_NAME	2033:1	2033:1	6	JPEGState
LEAF_NODE	2033:1	2033:1	7	JPEGState
POINTER	2033:11	2033:11	6	*
LEAF_NODE	2033:11	2033:11	7	*
NAME	2033:12	2033:12	5	sp
LEAF_NODE	2033:12	2033:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2033:12	2033:12	5	sp = JState ( tif )
ASSIGN	2033:12	2033:17	6	sp = JState ( tif )
LVAL	2033:12	2033:12	7	sp
NAME	2033:12	2033:12	8	sp
LEAF_NODE	2033:12	2033:12	9	sp
ASSIGN_OP	2033:15	2033:15	7	=
LEAF_NODE	2033:15	2033:15	8	=
RVAL	2033:17	2033:17	7	JState ( tif )
FUNCTION_CALL	2033:17	2033:27	8	JState ( tif )
CALLEE	2033:17	2033:17	9	JState
LEAF_NODE	2033:17	2033:17	10	JState
LEAF_NODE	2033:23	2033:23	9	(
ARGUMENT	2033:24	2033:24	9	tif
FIELD	2033:24	2033:24	10	tif
LEAF_NODE	2033:24	2033:24	11	tif
LEAF_NODE	2033:27	2033:27	9	)
LEAF_NODE	2033:28	2033:28	4	;
SIMPLE_DECL	2034:1	2034:15	3	tmsize_t nrows ;
VAR_DECL	2034:1	2034:10	4	tmsize_t nrows
TYPE	2034:1	2034:1	5	tmsize_t
TYPE_NAME	2034:1	2034:1	6	tmsize_t
LEAF_NODE	2034:1	2034:1	7	tmsize_t
NAME	2034:10	2034:10	5	nrows
LEAF_NODE	2034:10	2034:10	6	nrows
LEAF_NODE	2034:15	2034:15	4	;
SIMPLE_DECL	2035:1	2035:19	3	JSAMPROW [ 1 ] bufptr ;
VAR_DECL	2035:1	2035:10	4	JSAMPROW [ 1 ] bufptr
TYPE	2035:1	2035:16	5	JSAMPROW [ 1 ]
TYPE_NAME	2035:1	2035:1	6	JSAMPROW
LEAF_NODE	2035:1	2035:1	7	JSAMPROW
TYPE_SUFFIX	2035:16	2035:18	6	[ 1 ]
LEAF_NODE	2035:16	2035:16	7	[
FIELD	2035:17	2035:17	7	1
LEAF_NODE	2035:17	2035:17	8	1
LEAF_NODE	2035:18	2035:18	7	]
NAME	2035:10	2035:10	5	bufptr
LEAF_NODE	2035:10	2035:10	6	bufptr
LEAF_NODE	2035:19	2035:19	4	;
SIMPLE_DECL	2036:8	2036:28	3	short * line16 ; line16 = NULL ;
VAR_DECL	2036:8	2036:15	4	short * line16 ; line16 = NULL
TYPE	2036:8	2036:14	5	short *
TYPE_NAME	2036:8	2036:8	6	short
LEAF_NODE	2036:8	2036:8	7	short
POINTER	2036:14	2036:14	6	*
LEAF_NODE	2036:14	2036:14	7	*
NAME	2036:15	2036:15	5	line16
LEAF_NODE	2036:15	2036:15	6	line16
LEAF_NODE	0:0	0:0	5	;
INIT	2036:15	2036:15	5	line16 = NULL
ASSIGN	2036:15	2036:24	6	line16 = NULL
LVAL	2036:15	2036:15	7	line16
NAME	2036:15	2036:15	8	line16
LEAF_NODE	2036:15	2036:15	9	line16
ASSIGN_OP	2036:22	2036:22	7	=
LEAF_NODE	2036:22	2036:22	8	=
RVAL	2036:24	2036:24	7	NULL
FIELD	2036:24	2036:24	8	NULL
LEAF_NODE	2036:24	2036:24	9	NULL
LEAF_NODE	2036:28	2036:28	4	;
SIMPLE_DECL	2037:8	2037:31	3	int line16_count ; line16_count = 0 ;
VAR_DECL	2037:8	2037:15	4	int line16_count ; line16_count = 0
TYPE	2037:8	2037:8	5	int
TYPE_NAME	2037:8	2037:8	6	int
LEAF_NODE	2037:8	2037:8	7	int
NAME	2037:15	2037:15	5	line16_count
LEAF_NODE	2037:15	2037:15	6	line16_count
LEAF_NODE	0:0	0:0	5	;
INIT	2037:15	2037:15	5	line16_count = 0
ASSIGN	2037:15	2037:30	6	line16_count = 0
LVAL	2037:15	2037:15	7	line16_count
NAME	2037:15	2037:15	8	line16_count
LEAF_NODE	2037:15	2037:15	9	line16_count
ASSIGN_OP	2037:28	2037:28	7	=
LEAF_NODE	2037:28	2037:28	8	=
RVAL	2037:30	2037:30	7	0
FIELD	2037:30	2037:30	8	0
LEAF_NODE	2037:30	2037:30	9	0
LEAF_NODE	2037:31	2037:31	4	;
EXPR_STATEMENT	2039:1	2039:9	3	( void ) s ;
EXPR	2039:1	2039:8	4	( void ) s
LEAF_NODE	2039:1	2039:1	5	(
TYPE_NAME	2039:2	2039:2	5	void
LEAF_NODE	2039:2	2039:2	6	void
LEAF_NODE	2039:6	2039:6	5	)
FIELD	2039:8	2039:8	5	s
LEAF_NODE	2039:8	2039:8	6	s
LEAF_NODE	2039:9	2039:9	4	;
EXPR_STATEMENT	2040:1	2040:19	3	assert ( sp != NULL ) ;
EXPR	2040:1	2040:1	4	assert ( sp != NULL )
FUNCTION_CALL	2040:1	2040:18	5	assert ( sp != NULL )
CALLEE	2040:1	2040:1	6	assert
LEAF_NODE	2040:1	2040:1	7	assert
LEAF_NODE	2040:7	2040:7	6	(
ARGUMENT	2040:8	2040:14	6	sp != NULL
FIELD	2040:8	2040:8	7	sp
LEAF_NODE	2040:8	2040:8	8	sp
EQ_OPERATOR	2040:11	2040:11	7	!=
LEAF_NODE	2040:11	2040:11	8	!=
FIELD	2040:14	2040:14	7	NULL
LEAF_NODE	2040:14	2040:14	8	NULL
LEAF_NODE	2040:18	2040:18	6	)
LEAF_NODE	2040:19	2040:19	4	;
EXPR_STATEMENT	2042:1	2042:30	3	nrows = cc / sp -> bytesperline ;
EXPR	2042:1	2042:1	4	nrows = cc / sp -> bytesperline
ASSIGN	2042:1	2042:9	5	nrows = cc / sp -> bytesperline
LVAL	2042:1	2042:1	6	nrows
FIELD	2042:1	2042:1	7	nrows
LEAF_NODE	2042:1	2042:1	8	nrows
ASSIGN_OP	2042:7	2042:7	6	=
LEAF_NODE	2042:7	2042:7	7	=
RVAL	2042:9	2042:14	6	cc / sp -> bytesperline
FIELD	2042:9	2042:9	7	cc
LEAF_NODE	2042:9	2042:9	8	cc
LEAF_NODE	2042:12	2042:12	7	/
FIELD	2042:14	2042:18	7	sp -> bytesperline
LEAF_NODE	2042:14	2042:14	8	sp
LEAF_NODE	2042:16	2042:16	8	->
LEAF_NODE	2042:18	2042:18	8	bytesperline
LEAF_NODE	2042:30	2042:30	4	;
SELECTION	2043:1	2044:12	3	
KEYWORD	2043:1	2043:1	4	if
LEAF_NODE	2043:1	2043:1	5	if
LEAF_NODE	2043:4	2043:4	4	(
CONDITION	2043:5	2043:5	4	cc % sp -> bytesperline
EXPR	2043:5	2043:10	5	cc % sp -> bytesperline
FIELD	2043:5	2043:5	6	cc
LEAF_NODE	2043:5	2043:5	7	cc
LEAF_NODE	2043:8	2043:8	6	%
FIELD	2043:10	2043:14	6	sp -> bytesperline
LEAF_NODE	2043:10	2043:10	7	sp
LEAF_NODE	2043:12	2043:12	7	->
LEAF_NODE	2043:14	2043:14	7	bytesperline
LEAF_NODE	2043:26	2043:26	4	)
STATEMENTS	2044:12	2044:12	4	
EXPR_STATEMENT	2044:12	2045:59	5	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline discarded" ) ;
EXPR	2044:12	2044:12	6	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline discarded" )
FUNCTION_CALL	2044:12	2045:58	7	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline discarded" )
CALLEE	2044:12	2044:12	8	TIFFWarningExt
LEAF_NODE	2044:12	2044:12	9	TIFFWarningExt
LEAF_NODE	2044:26	2044:26	8	(
ARGUMENT	2044:27	2044:27	8	tif -> tif_clientdata
FIELD	2044:27	2044:32	9	tif -> tif_clientdata
LEAF_NODE	2044:27	2044:27	10	tif
LEAF_NODE	2044:30	2044:30	10	->
LEAF_NODE	2044:32	2044:32	10	tif_clientdata
LEAF_NODE	2044:46	2044:46	8	,
ARGUMENT	2044:48	2044:48	8	tif -> tif_name
FIELD	2044:48	2044:53	9	tif -> tif_name
LEAF_NODE	2044:48	2044:48	10	tif
LEAF_NODE	2044:51	2044:51	10	->
LEAF_NODE	2044:53	2044:53	10	tif_name
LEAF_NODE	2044:61	2044:61	8	,
ARGUMENT	2045:27	2045:27	8	"fractional scanline discarded"
FIELD	2045:27	2045:27	9	"fractional scanline discarded"
LEAF_NODE	2045:27	2045:27	10	"fractional scanline discarded"
LEAF_NODE	2045:58	2045:58	8	)
LEAF_NODE	2045:59	2045:59	6	;
SELECTION	2048:8	2049:12	3	
KEYWORD	2048:8	2048:8	4	if
LEAF_NODE	2048:8	2048:8	5	if
LEAF_NODE	2048:10	2048:10	4	(
CONDITION	2048:12	2048:12	4	! isTiled ( tif ) && tif -> tif_row + nrows > tif -> tif_dir . td_imagelength
EXPR	2048:12	2048:12	5	! isTiled ( tif ) && tif -> tif_row + nrows > tif -> tif_dir . td_imagelength
AND	2048:12	2048:29	6	! isTiled ( tif ) && tif -> tif_row + nrows > tif -> tif_dir . td_imagelength
EXPR	2048:12	2048:12	7	! isTiled ( tif )
UNARY_EXPR	2048:12	2048:13	8	! isTiled ( tif )
UNARY_OPERATOR	2048:12	2048:12	9	!
LEAF_NODE	2048:12	2048:12	10	!
FUNCTION_CALL	2048:13	2048:24	9	isTiled ( tif )
CALLEE	2048:13	2048:13	10	isTiled
LEAF_NODE	2048:13	2048:13	11	isTiled
LEAF_NODE	2048:20	2048:20	10	(
ARGUMENT	2048:21	2048:21	10	tif
FIELD	2048:21	2048:21	11	tif
LEAF_NODE	2048:21	2048:21	12	tif
LEAF_NODE	2048:24	2048:24	10	)
LEAF_NODE	2048:26	2048:26	7	&&
EXPR	2048:29	2048:50	7	tif -> tif_row + nrows > tif -> tif_dir . td_imagelength
FIELD	2048:29	2048:34	8	tif -> tif_row
LEAF_NODE	2048:29	2048:29	9	tif
LEAF_NODE	2048:32	2048:32	9	->
LEAF_NODE	2048:34	2048:34	9	tif_row
LEAF_NODE	2048:41	2048:41	8	+
FIELD	2048:42	2048:42	8	nrows
LEAF_NODE	2048:42	2048:42	9	nrows
REL_OPERATOR	2048:48	2048:48	8	>
LEAF_NODE	2048:48	2048:48	9	>
FIELD	2048:50	2048:63	8	tif -> tif_dir . td_imagelength
LEAF_NODE	2048:50	2048:50	9	tif
LEAF_NODE	2048:53	2048:53	9	->
LEAF_NODE	2048:55	2048:55	9	tif_dir
LEAF_NODE	2048:62	2048:62	9	.
LEAF_NODE	2048:63	2048:63	9	td_imagelength
LEAF_NODE	2048:78	2048:78	4	)
STATEMENTS	2049:12	2049:12	4	
EXPR_STATEMENT	2049:12	2049:62	5	nrows = tif -> tif_dir . td_imagelength - tif -> tif_row ;
EXPR	2049:12	2049:12	6	nrows = tif -> tif_dir . td_imagelength - tif -> tif_row
ASSIGN	2049:12	2049:20	7	nrows = tif -> tif_dir . td_imagelength - tif -> tif_row
LVAL	2049:12	2049:12	8	nrows
FIELD	2049:12	2049:12	9	nrows
LEAF_NODE	2049:12	2049:12	10	nrows
ASSIGN_OP	2049:18	2049:18	8	=
LEAF_NODE	2049:18	2049:18	9	=
RVAL	2049:20	2049:50	8	tif -> tif_dir . td_imagelength - tif -> tif_row
FIELD	2049:20	2049:33	9	tif -> tif_dir . td_imagelength
LEAF_NODE	2049:20	2049:20	10	tif
LEAF_NODE	2049:23	2049:23	10	->
LEAF_NODE	2049:25	2049:25	10	tif_dir
LEAF_NODE	2049:32	2049:32	10	.
LEAF_NODE	2049:33	2049:33	10	td_imagelength
LEAF_NODE	2049:48	2049:48	9	-
FIELD	2049:50	2049:55	9	tif -> tif_row
LEAF_NODE	2049:50	2049:50	10	tif
LEAF_NODE	2049:53	2049:53	10	->
LEAF_NODE	2049:55	2049:55	10	tif_row
LEAF_NODE	2049:62	2049:62	6	;
SELECTION	2051:8	2052:8	3	
KEYWORD	2051:8	2051:8	4	if
LEAF_NODE	2051:8	2051:8	5	if
LEAF_NODE	2051:10	2051:10	4	(
CONDITION	2051:12	2051:12	4	sp -> cinfo . c . data_precision == 12
EXPR	2051:12	2051:42	5	sp -> cinfo . c . data_precision == 12
FIELD	2051:12	2051:24	6	sp -> cinfo . c . data_precision
LEAF_NODE	2051:12	2051:12	7	sp
LEAF_NODE	2051:14	2051:14	7	->
LEAF_NODE	2051:16	2051:16	7	cinfo
LEAF_NODE	2051:21	2051:21	7	.
LEAF_NODE	2051:22	2051:22	7	c
LEAF_NODE	2051:23	2051:23	7	.
LEAF_NODE	2051:24	2051:24	7	data_precision
EQ_OPERATOR	2051:39	2051:39	6	==
LEAF_NODE	2051:39	2051:39	7	==
FIELD	2051:42	2051:42	6	12
LEAF_NODE	2051:42	2051:42	7	12
LEAF_NODE	2051:45	2051:45	4	)
STATEMENTS	2052:8	2063:8	4	
LEAF_NODE	2052:8	2052:8	5	{
STATEMENTS	2053:12	2055:12	5	
EXPR_STATEMENT	2053:12	2053:60	6	line16_count = ( int ) ( ( sp -> bytesperline * 2 ) / 3 ) ;
EXPR	2053:12	2053:12	7	line16_count = ( int ) ( ( sp -> bytesperline * 2 ) / 3 )
ASSIGN	2053:12	2053:27	8	line16_count = ( int ) ( ( sp -> bytesperline * 2 ) / 3 )
LVAL	2053:12	2053:12	9	line16_count
FIELD	2053:12	2053:12	10	line16_count
LEAF_NODE	2053:12	2053:12	11	line16_count
ASSIGN_OP	2053:25	2053:25	9	=
LEAF_NODE	2053:25	2053:25	10	=
RVAL	2053:27	2053:59	9	( int ) ( ( sp -> bytesperline * 2 ) / 3 )
LEAF_NODE	2053:27	2053:27	10	(
TYPE_NAME	2053:28	2053:28	10	int
LEAF_NODE	2053:28	2053:28	11	int
LEAF_NODE	2053:31	2053:31	10	)
LEAF_NODE	2053:32	2053:32	10	(
LEAF_NODE	2053:33	2053:33	10	(
FIELD	2053:34	2053:38	10	sp -> bytesperline
LEAF_NODE	2053:34	2053:34	11	sp
LEAF_NODE	2053:36	2053:36	11	->
LEAF_NODE	2053:38	2053:38	11	bytesperline
LEAF_NODE	2053:51	2053:51	10	*
FIELD	2053:53	2053:53	10	2
LEAF_NODE	2053:53	2053:53	11	2
LEAF_NODE	2053:54	2053:54	10	)
LEAF_NODE	2053:56	2053:56	10	/
FIELD	2053:58	2053:58	10	3
LEAF_NODE	2053:58	2053:58	11	3
LEAF_NODE	2053:59	2053:59	10	)
LEAF_NODE	2053:60	2053:60	7	;
EXPR_STATEMENT	2054:12	2054:72	6	line16 = ( short * ) _TIFFmalloc ( sizeof ( short ) * line16_count ) ;
EXPR	2054:12	2054:12	7	line16 = ( short * ) _TIFFmalloc ( sizeof ( short ) * line16_count )
ASSIGN	2054:12	2054:21	8	line16 = ( short * ) _TIFFmalloc ( sizeof ( short ) * line16_count )
LVAL	2054:12	2054:12	9	line16
FIELD	2054:12	2054:12	10	line16
LEAF_NODE	2054:12	2054:12	11	line16
ASSIGN_OP	2054:19	2054:19	9	=
LEAF_NODE	2054:19	2054:19	10	=
RVAL	2054:21	2054:31	9	( short * ) _TIFFmalloc ( sizeof ( short ) * line16_count )
LEAF_NODE	2054:21	2054:21	10	(
TYPE_NAME	2054:22	2054:22	10	short
LEAF_NODE	2054:22	2054:22	11	short
LEAF_NODE	2054:28	2054:28	10	*
LEAF_NODE	2054:29	2054:29	10	)
FUNCTION_CALL	2054:31	2054:71	10	_TIFFmalloc ( sizeof ( short ) * line16_count )
CALLEE	2054:31	2054:31	11	_TIFFmalloc
LEAF_NODE	2054:31	2054:31	12	_TIFFmalloc
LEAF_NODE	2054:42	2054:42	11	(
ARGUMENT	2054:43	2054:59	11	sizeof ( short ) * line16_count
FUNCTION_CALL	2054:43	2054:55	12	sizeof ( short )
CALLEE	2054:43	2054:43	13	sizeof
LEAF_NODE	2054:43	2054:43	14	sizeof
LEAF_NODE	2054:49	2054:49	13	(
ARGUMENT	2054:50	2054:50	13	short
FIELD	2054:50	2054:50	14	short
LEAF_NODE	2054:50	2054:50	15	short
LEAF_NODE	2054:55	2054:55	13	)
LEAF_NODE	2054:57	2054:57	12	*
FIELD	2054:59	2054:59	12	line16_count
LEAF_NODE	2054:59	2054:59	13	line16_count
LEAF_NODE	2054:71	2054:71	11	)
LEAF_NODE	2054:72	2054:72	7	;
SELECTION	2055:12	2056:12	6	
KEYWORD	2055:12	2055:12	7	if
LEAF_NODE	2055:12	2055:12	8	if
LEAF_NODE	2055:15	2055:15	7	(
CONDITION	2055:16	2055:16	7	! line16
EXPR	2055:16	2055:16	8	! line16
UNARY_EXPR	2055:16	2055:17	9	! line16
UNARY_OPERATOR	2055:16	2055:16	10	!
LEAF_NODE	2055:16	2055:16	11	!
FIELD	2055:17	2055:17	10	line16
LEAF_NODE	2055:17	2055:17	11	line16
LEAF_NODE	2055:23	2055:23	7	)
STATEMENTS	2056:12	2062:12	7	
LEAF_NODE	2056:12	2056:12	8	{
STATEMENTS	2057:16	2061:16	8	
EXPR_STATEMENT	2057:16	2059:57	9	TIFFErrorExt ( tif -> tif_clientdata , "JPEGEncode" , "Failed to allocate memory" ) ;
EXPR	2057:16	2057:16	10	TIFFErrorExt ( tif -> tif_clientdata , "JPEGEncode" , "Failed to allocate memory" )
FUNCTION_CALL	2057:16	2059:56	11	TIFFErrorExt ( tif -> tif_clientdata , "JPEGEncode" , "Failed to allocate memory" )
CALLEE	2057:16	2057:16	12	TIFFErrorExt
LEAF_NODE	2057:16	2057:16	13	TIFFErrorExt
LEAF_NODE	2057:28	2057:28	12	(
ARGUMENT	2057:29	2057:29	12	tif -> tif_clientdata
FIELD	2057:29	2057:34	13	tif -> tif_clientdata
LEAF_NODE	2057:29	2057:29	14	tif
LEAF_NODE	2057:32	2057:32	14	->
LEAF_NODE	2057:34	2057:34	14	tif_clientdata
LEAF_NODE	2057:48	2057:48	12	,
ARGUMENT	2058:8	2058:8	12	"JPEGEncode"
FIELD	2058:8	2058:8	13	"JPEGEncode"
LEAF_NODE	2058:8	2058:8	14	"JPEGEncode"
LEAF_NODE	2058:20	2058:20	12	,
ARGUMENT	2059:29	2059:29	12	"Failed to allocate memory"
FIELD	2059:29	2059:29	13	"Failed to allocate memory"
LEAF_NODE	2059:29	2059:29	14	"Failed to allocate memory"
LEAF_NODE	2059:56	2059:56	12	)
LEAF_NODE	2059:57	2059:57	10	;
JUMP_STATEMENT	2061:16	2061:24	9	return 0 ;
KEYWORD	2061:16	2061:16	10	return
LEAF_NODE	2061:16	2061:16	11	return
DESTINATION	2061:23	2061:23	10	0
EXPR	2061:23	2061:23	11	0
FIELD	2061:23	2061:23	12	0
LEAF_NODE	2061:23	2061:23	13	0
LEAF_NODE	2061:24	2061:24	10	;
LEAF_NODE	2062:12	2062:12	8	}
LEAF_NODE	2063:8	2063:8	5	}
ITERATION	2065:1	2065:21	3	
KEYWORD	2065:1	2065:1	4	while
LEAF_NODE	2065:1	2065:1	5	while
LEAF_NODE	2065:7	2065:7	4	(
CONDITION	2065:8	2065:8	4	nrows -- > 0
EXPR	2065:8	2065:18	5	nrows -- > 0
FIELD	2065:8	2065:13	6	nrows --
LEAF_NODE	2065:8	2065:8	7	nrows
LEAF_NODE	2065:13	2065:13	7	--
REL_OPERATOR	2065:16	2065:16	6	>
LEAF_NODE	2065:16	2065:16	7	>
FIELD	2065:18	2065:18	6	0
LEAF_NODE	2065:18	2065:18	7	0
LEAF_NODE	2065:19	2065:19	4	)
STATEMENTS	2065:21	2094:1	4	
LEAF_NODE	2065:21	2065:21	5	{
STATEMENTS	2067:12	2093:12	5	
SELECTION	2067:12	2068:12	6	
KEYWORD	2067:12	2067:12	7	if
LEAF_NODE	2067:12	2067:12	8	if
LEAF_NODE	2067:14	2067:14	7	(
CONDITION	2067:16	2067:16	7	sp -> cinfo . c . data_precision == 12
EXPR	2067:16	2067:46	8	sp -> cinfo . c . data_precision == 12
FIELD	2067:16	2067:28	9	sp -> cinfo . c . data_precision
LEAF_NODE	2067:16	2067:16	10	sp
LEAF_NODE	2067:18	2067:18	10	->
LEAF_NODE	2067:20	2067:20	10	cinfo
LEAF_NODE	2067:25	2067:25	10	.
LEAF_NODE	2067:26	2067:26	10	c
LEAF_NODE	2067:27	2067:27	10	.
LEAF_NODE	2067:28	2067:28	10	data_precision
EQ_OPERATOR	2067:43	2067:43	9	==
LEAF_NODE	2067:43	2067:43	10	==
FIELD	2067:46	2067:46	9	12
LEAF_NODE	2067:46	2067:46	10	12
LEAF_NODE	2067:49	2067:49	7	)
STATEMENTS	2068:12	2084:12	7	
LEAF_NODE	2068:12	2068:12	8	{
STATEMENTS	2070:16	2075:16	8	
SIMPLE_DECL	2070:16	2070:50	9	int value_pairs ; value_pairs = line16_count / 2 ;
VAR_DECL	2070:16	2070:20	10	int value_pairs ; value_pairs = line16_count / 2
TYPE	2070:16	2070:16	11	int
TYPE_NAME	2070:16	2070:16	12	int
LEAF_NODE	2070:16	2070:16	13	int
NAME	2070:20	2070:20	11	value_pairs
LEAF_NODE	2070:20	2070:20	12	value_pairs
LEAF_NODE	0:0	0:0	11	;
INIT	2070:20	2070:20	11	value_pairs = line16_count / 2
ASSIGN	2070:20	2070:34	12	value_pairs = line16_count / 2
LVAL	2070:20	2070:20	13	value_pairs
NAME	2070:20	2070:20	14	value_pairs
LEAF_NODE	2070:20	2070:20	15	value_pairs
ASSIGN_OP	2070:32	2070:32	13	=
LEAF_NODE	2070:32	2070:32	14	=
RVAL	2070:34	2070:49	13	line16_count / 2
FIELD	2070:34	2070:34	14	line16_count
LEAF_NODE	2070:34	2070:34	15	line16_count
LEAF_NODE	2070:47	2070:47	14	/
FIELD	2070:49	2070:49	14	2
LEAF_NODE	2070:49	2070:49	15	2
LEAF_NODE	2070:50	2070:50	10	;
SIMPLE_DECL	2071:16	2071:25	9	int iPair ;
VAR_DECL	2071:16	2071:20	10	int iPair
TYPE	2071:16	2071:16	11	int
TYPE_NAME	2071:16	2071:16	12	int
LEAF_NODE	2071:16	2071:16	13	int
NAME	2071:20	2071:20	11	iPair
LEAF_NODE	2071:20	2071:20	12	iPair
LEAF_NODE	2071:25	2071:25	10	;
EXPR_STATEMENT	2073:2	2073:31	9	bufptr [ 0 ] = ( JSAMPROW ) line16 ;
EXPR	2073:2	2073:2	10	bufptr [ 0 ] = ( JSAMPROW ) line16
ASSIGN	2073:2	2073:14	11	bufptr [ 0 ] = ( JSAMPROW ) line16
LVAL	2073:2	2073:2	12	bufptr [ 0 ]
FIELD	2073:2	2073:10	13	bufptr [ 0 ]
LEAF_NODE	2073:2	2073:2	14	bufptr
LEAF_NODE	2073:8	2073:8	14	[
EXPR	2073:9	2073:9	14	0
FIELD	2073:9	2073:9	15	0
LEAF_NODE	2073:9	2073:9	16	0
LEAF_NODE	2073:10	2073:10	14	]
ASSIGN_OP	2073:12	2073:12	12	=
LEAF_NODE	2073:12	2073:12	13	=
RVAL	2073:14	2073:25	12	( JSAMPROW ) line16
LEAF_NODE	2073:14	2073:14	13	(
TYPE_NAME	2073:15	2073:15	13	JSAMPROW
LEAF_NODE	2073:15	2073:15	14	JSAMPROW
LEAF_NODE	2073:23	2073:23	13	)
FIELD	2073:25	2073:25	13	line16
LEAF_NODE	2073:25	2073:25	14	line16
LEAF_NODE	2073:31	2073:31	10	;
ITERATION	2075:16	2076:16	9	
KEYWORD	2075:16	2075:16	10	for
LEAF_NODE	2075:16	2075:16	11	for
LEAF_NODE	2075:19	2075:19	10	(
FOR_INIT	2075:21	2075:30	10	iPair = 0 ;
EXPR	2075:21	2075:21	11	iPair = 0
ASSIGN	2075:21	2075:29	12	iPair = 0
LVAL	2075:21	2075:21	13	iPair
FIELD	2075:21	2075:21	14	iPair
LEAF_NODE	2075:21	2075:21	15	iPair
ASSIGN_OP	2075:27	2075:27	13	=
LEAF_NODE	2075:27	2075:27	14	=
RVAL	2075:29	2075:29	13	0
FIELD	2075:29	2075:29	14	0
LEAF_NODE	2075:29	2075:29	15	0
LEAF_NODE	2075:30	2075:30	11	;
CONDITION	2075:32	2075:32	10	iPair < value_pairs
EXPR	2075:32	2075:40	11	iPair < value_pairs
FIELD	2075:32	2075:32	12	iPair
LEAF_NODE	2075:32	2075:32	13	iPair
REL_OPERATOR	2075:38	2075:38	12	<
LEAF_NODE	2075:38	2075:38	13	<
FIELD	2075:40	2075:40	12	value_pairs
LEAF_NODE	2075:40	2075:40	13	value_pairs
LEAF_NODE	2075:51	2075:51	10	;
FOR_EXPR	2075:53	2075:53	10	iPair ++
EXPR	2075:53	2075:53	11	iPair ++
FIELD	2075:53	2075:58	12	iPair ++
LEAF_NODE	2075:53	2075:53	13	iPair
LEAF_NODE	2075:58	2075:58	13	++
LEAF_NODE	2075:61	2075:61	10	)
STATEMENTS	2076:16	2083:16	10	
LEAF_NODE	2076:16	2076:16	11	{
STATEMENTS	2077:20	2082:20	11	
SIMPLE_DECL	2077:20	2078:59	12	unsigned char * in_ptr ; in_ptr = ( ( unsigned char * ) buf ) + iPair * 3 ;
VAR_DECL	2077:20	2077:35	13	unsigned char * in_ptr ; in_ptr = ( ( unsigned char * ) buf ) + iPair * 3
TYPE	2077:20	2077:34	14	unsigned char *
TYPE_NAME	2077:20	2077:29	15	unsigned char
LEAF_NODE	2077:20	2077:20	16	unsigned
LEAF_NODE	2077:29	2077:29	16	char
POINTER	2077:34	2077:34	15	*
LEAF_NODE	2077:34	2077:34	16	*
NAME	2077:35	2077:35	14	in_ptr
LEAF_NODE	2077:35	2077:35	15	in_ptr
LEAF_NODE	0:0	0:0	14	;
INIT	2077:35	2077:35	14	in_ptr = ( ( unsigned char * ) buf ) + iPair * 3
ASSIGN	2077:35	2078:24	15	in_ptr = ( ( unsigned char * ) buf ) + iPair * 3
LVAL	2077:35	2077:35	16	in_ptr
NAME	2077:35	2077:35	17	in_ptr
LEAF_NODE	2077:35	2077:35	18	in_ptr
ASSIGN_OP	2077:42	2077:42	16	=
LEAF_NODE	2077:42	2077:42	17	=
RVAL	2078:24	2078:58	16	( ( unsigned char * ) buf ) + iPair * 3
LEAF_NODE	2078:24	2078:24	17	(
LEAF_NODE	2078:25	2078:25	17	(
TYPE_NAME	2078:26	2078:35	17	unsigned char
LEAF_NODE	2078:26	2078:26	18	unsigned
LEAF_NODE	2078:35	2078:35	18	char
LEAF_NODE	2078:40	2078:40	17	*
LEAF_NODE	2078:41	2078:41	17	)
FIELD	2078:43	2078:43	17	buf
LEAF_NODE	2078:43	2078:43	18	buf
LEAF_NODE	2078:46	2078:46	17	)
LEAF_NODE	2078:48	2078:48	17	+
FIELD	2078:50	2078:50	17	iPair
LEAF_NODE	2078:50	2078:50	18	iPair
LEAF_NODE	2078:56	2078:56	17	*
FIELD	2078:58	2078:58	17	3
LEAF_NODE	2078:58	2078:58	18	3
LEAF_NODE	2078:59	2078:59	13	;
SIMPLE_DECL	2079:20	2079:71	12	JSAMPLE * out_ptr ; out_ptr = ( JSAMPLE * ) ( line16 + iPair * 2 ) ;
VAR_DECL	2079:20	2079:29	13	JSAMPLE * out_ptr ; out_ptr = ( JSAMPLE * ) ( line16 + iPair * 2 )
TYPE	2079:20	2079:28	14	JSAMPLE *
TYPE_NAME	2079:20	2079:20	15	JSAMPLE
LEAF_NODE	2079:20	2079:20	16	JSAMPLE
POINTER	2079:28	2079:28	15	*
LEAF_NODE	2079:28	2079:28	16	*
NAME	2079:29	2079:29	14	out_ptr
LEAF_NODE	2079:29	2079:29	15	out_ptr
LEAF_NODE	0:0	0:0	14	;
INIT	2079:29	2079:29	14	out_ptr = ( JSAMPLE * ) ( line16 + iPair * 2 )
ASSIGN	2079:29	2079:39	15	out_ptr = ( JSAMPLE * ) ( line16 + iPair * 2 )
LVAL	2079:29	2079:29	16	out_ptr
NAME	2079:29	2079:29	17	out_ptr
LEAF_NODE	2079:29	2079:29	18	out_ptr
ASSIGN_OP	2079:37	2079:37	16	=
LEAF_NODE	2079:37	2079:37	17	=
RVAL	2079:39	2079:70	16	( JSAMPLE * ) ( line16 + iPair * 2 )
LEAF_NODE	2079:39	2079:39	17	(
TYPE_NAME	2079:40	2079:40	17	JSAMPLE
LEAF_NODE	2079:40	2079:40	18	JSAMPLE
LEAF_NODE	2079:48	2079:48	17	*
LEAF_NODE	2079:49	2079:49	17	)
LEAF_NODE	2079:51	2079:51	17	(
FIELD	2079:52	2079:52	17	line16
LEAF_NODE	2079:52	2079:52	18	line16
LEAF_NODE	2079:59	2079:59	17	+
FIELD	2079:61	2079:61	17	iPair
LEAF_NODE	2079:61	2079:61	18	iPair
LEAF_NODE	2079:67	2079:67	17	*
FIELD	2079:69	2079:69	17	2
LEAF_NODE	2079:69	2079:69	18	2
LEAF_NODE	2079:70	2079:70	17	)
LEAF_NODE	2079:71	2079:71	13	;
EXPR_STATEMENT	2081:20	2081:77	12	out_ptr [ 0 ] = ( in_ptr [ 0 ] << 4 ) | ( ( in_ptr [ 1 ] & 0xf0 ) >> 4 ) ;
EXPR	2081:20	2081:20	13	out_ptr [ 0 ] = ( in_ptr [ 0 ] << 4 ) | ( ( in_ptr [ 1 ] & 0xf0 ) >> 4 )
ASSIGN	2081:20	2081:33	14	out_ptr [ 0 ] = ( in_ptr [ 0 ] << 4 ) | ( ( in_ptr [ 1 ] & 0xf0 ) >> 4 )
LVAL	2081:20	2081:20	15	out_ptr [ 0 ]
FIELD	2081:20	2081:29	16	out_ptr [ 0 ]
LEAF_NODE	2081:20	2081:20	17	out_ptr
LEAF_NODE	2081:27	2081:27	17	[
EXPR	2081:28	2081:28	17	0
FIELD	2081:28	2081:28	18	0
LEAF_NODE	2081:28	2081:28	19	0
LEAF_NODE	2081:29	2081:29	17	]
ASSIGN_OP	2081:31	2081:31	15	=
LEAF_NODE	2081:31	2081:31	16	=
RVAL	2081:33	2081:33	15	( in_ptr [ 0 ] << 4 ) | ( ( in_ptr [ 1 ] & 0xf0 ) >> 4 )
BIT_OR	2081:33	2081:52	16	( in_ptr [ 0 ] << 4 ) | ( ( in_ptr [ 1 ] & 0xf0 ) >> 4 )
BIT_OR_ELEM	2081:33	2081:48	17	( in_ptr [ 0 ] << 4 )
LEAF_NODE	2081:33	2081:33	18	(
FIELD	2081:34	2081:42	18	in_ptr [ 0 ]
LEAF_NODE	2081:34	2081:34	19	in_ptr
LEAF_NODE	2081:40	2081:40	19	[
EXPR	2081:41	2081:41	19	0
FIELD	2081:41	2081:41	20	0
LEAF_NODE	2081:41	2081:41	21	0
LEAF_NODE	2081:42	2081:42	19	]
LEAF_NODE	2081:44	2081:44	18	<<
FIELD	2081:47	2081:47	18	4
LEAF_NODE	2081:47	2081:47	19	4
LEAF_NODE	2081:48	2081:48	18	)
LEAF_NODE	2081:50	2081:50	17	|
BIT_OR_ELEM	2081:52	2081:76	17	( ( in_ptr [ 1 ] & 0xf0 ) >> 4 )
LEAF_NODE	2081:52	2081:52	18	(
LEAF_NODE	2081:53	2081:53	18	(
FIELD	2081:54	2081:62	18	in_ptr [ 1 ]
LEAF_NODE	2081:54	2081:54	19	in_ptr
LEAF_NODE	2081:60	2081:60	19	[
EXPR	2081:61	2081:61	19	1
FIELD	2081:61	2081:61	20	1
LEAF_NODE	2081:61	2081:61	21	1
LEAF_NODE	2081:62	2081:62	19	]
LEAF_NODE	2081:64	2081:64	18	&
FIELD	2081:66	2081:66	18	0xf0
LEAF_NODE	2081:66	2081:66	19	0xf0
LEAF_NODE	2081:70	2081:70	18	)
LEAF_NODE	2081:72	2081:72	18	>>
FIELD	2081:75	2081:75	18	4
LEAF_NODE	2081:75	2081:75	19	4
LEAF_NODE	2081:76	2081:76	18	)
LEAF_NODE	2081:77	2081:77	13	;
EXPR_STATEMENT	2082:20	2082:70	12	out_ptr [ 1 ] = ( ( in_ptr [ 1 ] & 0x0f ) << 8 ) | in_ptr [ 2 ] ;
EXPR	2082:20	2082:20	13	out_ptr [ 1 ] = ( ( in_ptr [ 1 ] & 0x0f ) << 8 ) | in_ptr [ 2 ]
ASSIGN	2082:20	2082:33	14	out_ptr [ 1 ] = ( ( in_ptr [ 1 ] & 0x0f ) << 8 ) | in_ptr [ 2 ]
LVAL	2082:20	2082:20	15	out_ptr [ 1 ]
FIELD	2082:20	2082:29	16	out_ptr [ 1 ]
LEAF_NODE	2082:20	2082:20	17	out_ptr
LEAF_NODE	2082:27	2082:27	17	[
EXPR	2082:28	2082:28	17	1
FIELD	2082:28	2082:28	18	1
LEAF_NODE	2082:28	2082:28	19	1
LEAF_NODE	2082:29	2082:29	17	]
ASSIGN_OP	2082:31	2082:31	15	=
LEAF_NODE	2082:31	2082:31	16	=
RVAL	2082:33	2082:33	15	( ( in_ptr [ 1 ] & 0x0f ) << 8 ) | in_ptr [ 2 ]
BIT_OR	2082:33	2082:61	16	( ( in_ptr [ 1 ] & 0x0f ) << 8 ) | in_ptr [ 2 ]
BIT_OR_ELEM	2082:33	2082:57	17	( ( in_ptr [ 1 ] & 0x0f ) << 8 )
LEAF_NODE	2082:33	2082:33	18	(
LEAF_NODE	2082:34	2082:34	18	(
FIELD	2082:35	2082:43	18	in_ptr [ 1 ]
LEAF_NODE	2082:35	2082:35	19	in_ptr
LEAF_NODE	2082:41	2082:41	19	[
EXPR	2082:42	2082:42	19	1
FIELD	2082:42	2082:42	20	1
LEAF_NODE	2082:42	2082:42	21	1
LEAF_NODE	2082:43	2082:43	19	]
LEAF_NODE	2082:45	2082:45	18	&
FIELD	2082:47	2082:47	18	0x0f
LEAF_NODE	2082:47	2082:47	19	0x0f
LEAF_NODE	2082:51	2082:51	18	)
LEAF_NODE	2082:53	2082:53	18	<<
FIELD	2082:56	2082:56	18	8
LEAF_NODE	2082:56	2082:56	19	8
LEAF_NODE	2082:57	2082:57	18	)
LEAF_NODE	2082:59	2082:59	17	|
BIT_OR_ELEM	2082:61	2082:61	17	in_ptr [ 2 ]
FIELD	2082:61	2082:69	18	in_ptr [ 2 ]
LEAF_NODE	2082:61	2082:61	19	in_ptr
LEAF_NODE	2082:67	2082:67	19	[
EXPR	2082:68	2082:68	19	2
FIELD	2082:68	2082:68	20	2
LEAF_NODE	2082:68	2082:68	21	2
LEAF_NODE	2082:69	2082:69	19	]
LEAF_NODE	2082:70	2082:70	13	;
LEAF_NODE	2083:16	2083:16	11	}
LEAF_NODE	2084:12	2084:12	8	}
SELECTION	2085:12	2086:12	6	
KEYWORD	2085:12	2085:12	7	else
LEAF_NODE	2085:12	2085:12	8	else
STATEMENTS	2086:12	2088:12	7	
LEAF_NODE	2086:12	2086:12	8	{
STATEMENTS	2087:2	2087:2	8	
EXPR_STATEMENT	2087:2	2087:28	9	bufptr [ 0 ] = ( JSAMPROW ) buf ;
EXPR	2087:2	2087:2	10	bufptr [ 0 ] = ( JSAMPROW ) buf
ASSIGN	2087:2	2087:14	11	bufptr [ 0 ] = ( JSAMPROW ) buf
LVAL	2087:2	2087:2	12	bufptr [ 0 ]
FIELD	2087:2	2087:10	13	bufptr [ 0 ]
LEAF_NODE	2087:2	2087:2	14	bufptr
LEAF_NODE	2087:8	2087:8	14	[
EXPR	2087:9	2087:9	14	0
FIELD	2087:9	2087:9	15	0
LEAF_NODE	2087:9	2087:9	16	0
LEAF_NODE	2087:10	2087:10	14	]
ASSIGN_OP	2087:12	2087:12	12	=
LEAF_NODE	2087:12	2087:12	13	=
RVAL	2087:14	2087:25	12	( JSAMPROW ) buf
LEAF_NODE	2087:14	2087:14	13	(
TYPE_NAME	2087:15	2087:15	13	JSAMPROW
LEAF_NODE	2087:15	2087:15	14	JSAMPROW
LEAF_NODE	2087:23	2087:23	13	)
FIELD	2087:25	2087:25	13	buf
LEAF_NODE	2087:25	2087:25	14	buf
LEAF_NODE	2087:28	2087:28	10	;
LEAF_NODE	2088:12	2088:12	8	}
SELECTION	2089:12	2090:16	6	
KEYWORD	2089:12	2089:12	7	if
LEAF_NODE	2089:12	2089:12	8	if
LEAF_NODE	2089:15	2089:15	7	(
CONDITION	2089:16	2089:16	7	TIFFjpeg_write_scanlines ( sp , bufptr , 1 ) != 1
EXPR	2089:16	2089:59	8	TIFFjpeg_write_scanlines ( sp , bufptr , 1 ) != 1
FUNCTION_CALL	2089:16	2089:54	9	TIFFjpeg_write_scanlines ( sp , bufptr , 1 )
CALLEE	2089:16	2089:16	10	TIFFjpeg_write_scanlines
LEAF_NODE	2089:16	2089:16	11	TIFFjpeg_write_scanlines
LEAF_NODE	2089:40	2089:40	10	(
ARGUMENT	2089:41	2089:41	10	sp
FIELD	2089:41	2089:41	11	sp
LEAF_NODE	2089:41	2089:41	12	sp
LEAF_NODE	2089:43	2089:43	10	,
ARGUMENT	2089:45	2089:45	10	bufptr
FIELD	2089:45	2089:45	11	bufptr
LEAF_NODE	2089:45	2089:45	12	bufptr
LEAF_NODE	2089:51	2089:51	10	,
ARGUMENT	2089:53	2089:53	10	1
FIELD	2089:53	2089:53	11	1
LEAF_NODE	2089:53	2089:53	12	1
LEAF_NODE	2089:54	2089:54	10	)
EQ_OPERATOR	2089:56	2089:56	9	!=
LEAF_NODE	2089:56	2089:56	10	!=
FIELD	2089:59	2089:59	9	1
LEAF_NODE	2089:59	2089:59	10	1
LEAF_NODE	2089:60	2089:60	7	)
STATEMENTS	2090:16	2090:16	7	
JUMP_STATEMENT	2090:16	2090:26	8	return ( 0 ) ;
KEYWORD	2090:16	2090:16	9	return
LEAF_NODE	2090:16	2090:16	10	return
DESTINATION	2090:23	2090:23	9	( 0 )
EXPR	2090:23	2090:25	10	( 0 )
LEAF_NODE	2090:23	2090:23	11	(
FIELD	2090:24	2090:24	11	0
LEAF_NODE	2090:24	2090:24	12	0
LEAF_NODE	2090:25	2090:25	11	)
LEAF_NODE	2090:26	2090:26	9	;
SELECTION	2091:12	2092:16	6	
KEYWORD	2091:12	2091:12	7	if
LEAF_NODE	2091:12	2091:12	8	if
LEAF_NODE	2091:15	2091:15	7	(
CONDITION	2091:16	2091:16	7	nrows > 0
EXPR	2091:16	2091:24	8	nrows > 0
FIELD	2091:16	2091:16	9	nrows
LEAF_NODE	2091:16	2091:16	10	nrows
REL_OPERATOR	2091:22	2091:22	9	>
LEAF_NODE	2091:22	2091:22	10	>
FIELD	2091:24	2091:24	9	0
LEAF_NODE	2091:24	2091:24	10	0
LEAF_NODE	2091:25	2091:25	7	)
STATEMENTS	2092:16	2092:16	7	
EXPR_STATEMENT	2092:16	2092:30	8	tif -> tif_row ++ ;
EXPR	2092:16	2092:16	9	tif -> tif_row ++
FIELD	2092:16	2092:28	10	tif -> tif_row ++
LEAF_NODE	2092:16	2092:16	11	tif
LEAF_NODE	2092:19	2092:19	11	->
LEAF_NODE	2092:21	2092:21	11	tif_row
LEAF_NODE	2092:28	2092:28	11	++
LEAF_NODE	2092:30	2092:30	9	;
EXPR_STATEMENT	2093:12	2093:35	6	buf += sp -> bytesperline ;
EXPR	2093:12	2093:12	7	buf += sp -> bytesperline
ASSIGN	2093:12	2093:19	8	buf += sp -> bytesperline
LVAL	2093:12	2093:12	9	buf
FIELD	2093:12	2093:12	10	buf
LEAF_NODE	2093:12	2093:12	11	buf
ASSIGN_OP	2093:16	2093:16	9	+=
LEAF_NODE	2093:16	2093:16	10	+=
RVAL	2093:19	2093:19	9	sp -> bytesperline
FIELD	2093:19	2093:23	10	sp -> bytesperline
LEAF_NODE	2093:19	2093:19	11	sp
LEAF_NODE	2093:21	2093:21	11	->
LEAF_NODE	2093:23	2093:23	11	bytesperline
LEAF_NODE	2093:35	2093:35	7	;
LEAF_NODE	2094:1	2094:1	5	}
SELECTION	2096:8	2097:8	3	
KEYWORD	2096:8	2096:8	4	if
LEAF_NODE	2096:8	2096:8	5	if
LEAF_NODE	2096:10	2096:10	4	(
CONDITION	2096:12	2096:12	4	sp -> cinfo . c . data_precision == 12
EXPR	2096:12	2096:42	5	sp -> cinfo . c . data_precision == 12
FIELD	2096:12	2096:24	6	sp -> cinfo . c . data_precision
LEAF_NODE	2096:12	2096:12	7	sp
LEAF_NODE	2096:14	2096:14	7	->
LEAF_NODE	2096:16	2096:16	7	cinfo
LEAF_NODE	2096:21	2096:21	7	.
LEAF_NODE	2096:22	2096:22	7	c
LEAF_NODE	2096:23	2096:23	7	.
LEAF_NODE	2096:24	2096:24	7	data_precision
EQ_OPERATOR	2096:39	2096:39	6	==
LEAF_NODE	2096:39	2096:39	7	==
FIELD	2096:42	2096:42	6	12
LEAF_NODE	2096:42	2096:42	7	12
LEAF_NODE	2096:45	2096:45	4	)
STATEMENTS	2097:8	2099:8	4	
LEAF_NODE	2097:8	2097:8	5	{
STATEMENTS	2098:12	2098:12	5	
EXPR_STATEMENT	2098:12	2098:31	6	_TIFFfree ( line16 ) ;
EXPR	2098:12	2098:12	7	_TIFFfree ( line16 )
FUNCTION_CALL	2098:12	2098:30	8	_TIFFfree ( line16 )
CALLEE	2098:12	2098:12	9	_TIFFfree
LEAF_NODE	2098:12	2098:12	10	_TIFFfree
LEAF_NODE	2098:21	2098:21	9	(
ARGUMENT	2098:23	2098:23	9	line16
FIELD	2098:23	2098:23	10	line16
LEAF_NODE	2098:23	2098:23	11	line16
LEAF_NODE	2098:30	2098:30	9	)
LEAF_NODE	2098:31	2098:31	7	;
LEAF_NODE	2099:8	2099:8	5	}
JUMP_STATEMENT	2101:1	2101:11	3	return ( 1 ) ;
KEYWORD	2101:1	2101:1	4	return
LEAF_NODE	2101:1	2101:1	5	return
DESTINATION	2101:8	2101:8	4	( 1 )
EXPR	2101:8	2101:10	5	( 1 )
LEAF_NODE	2101:8	2101:8	6	(
FIELD	2101:9	2101:9	6	1
LEAF_NODE	2101:9	2101:9	7	1
LEAF_NODE	2101:10	2101:10	6	)
LEAF_NODE	2101:11	2101:11	4	;
LEAF_NODE	2102:0	2102:0	2	}
FUNCTION_DEF	2108:0	2187:0	1	
RETURN_TYPE	2108:0	2108:7	2	static int
LEAF_NODE	2108:0	2108:0	3	static
TYPE_NAME	2108:7	2108:7	3	int
LEAF_NODE	2108:7	2108:7	4	int
FUNCTION_NAME	2109:0	2109:0	2	JPEGEncodeRaw
LEAF_NODE	2109:0	2109:0	3	JPEGEncodeRaw
PARAMETER_LIST	2109:13	2109:58	2	( TIFF * tif , uint8 * buf , tmsize_t cc , uint16 s )
LEAF_NODE	2109:13	2109:13	3	(
PARAMETER_DECL	2109:14	2109:20	3	TIFF * tif
TYPE	2109:14	2109:18	4	TIFF *
TYPE_NAME	2109:14	2109:14	5	TIFF
LEAF_NODE	2109:14	2109:14	6	TIFF
POINTER	2109:18	2109:18	5	*
LEAF_NODE	2109:18	2109:18	6	*
NAME	2109:20	2109:20	4	tif
LEAF_NODE	2109:20	2109:20	5	tif
LEAF_NODE	2109:23	2109:23	3	,
PARAMETER_DECL	2109:25	2109:32	3	uint8 * buf
TYPE	2109:25	2109:30	4	uint8 *
TYPE_NAME	2109:25	2109:25	5	uint8
LEAF_NODE	2109:25	2109:25	6	uint8
POINTER	2109:30	2109:30	5	*
LEAF_NODE	2109:30	2109:30	6	*
NAME	2109:32	2109:32	4	buf
LEAF_NODE	2109:32	2109:32	5	buf
LEAF_NODE	2109:35	2109:35	3	,
PARAMETER_DECL	2109:37	2109:46	3	tmsize_t cc
TYPE	2109:37	2109:37	4	tmsize_t
TYPE_NAME	2109:37	2109:37	5	tmsize_t
LEAF_NODE	2109:37	2109:37	6	tmsize_t
NAME	2109:46	2109:46	4	cc
LEAF_NODE	2109:46	2109:46	5	cc
LEAF_NODE	2109:48	2109:48	3	,
PARAMETER_DECL	2109:50	2109:57	3	uint16 s
TYPE	2109:50	2109:50	4	uint16
TYPE_NAME	2109:50	2109:50	5	uint16
LEAF_NODE	2109:50	2109:50	6	uint16
NAME	2109:57	2109:57	4	s
LEAF_NODE	2109:57	2109:57	5	s
LEAF_NODE	2109:58	2109:58	3	)
LEAF_NODE	2110:0	2110:0	2	{
STATEMENTS	2111:1	2186:1	2	
SIMPLE_DECL	2111:1	2111:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2111:1	2111:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2111:1	2111:11	5	JPEGState *
TYPE_NAME	2111:1	2111:1	6	JPEGState
LEAF_NODE	2111:1	2111:1	7	JPEGState
POINTER	2111:11	2111:11	6	*
LEAF_NODE	2111:11	2111:11	7	*
NAME	2111:12	2111:12	5	sp
LEAF_NODE	2111:12	2111:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2111:12	2111:12	5	sp = JState ( tif )
ASSIGN	2111:12	2111:17	6	sp = JState ( tif )
LVAL	2111:12	2111:12	7	sp
NAME	2111:12	2111:12	8	sp
LEAF_NODE	2111:12	2111:12	9	sp
ASSIGN_OP	2111:15	2111:15	7	=
LEAF_NODE	2111:15	2111:15	8	=
RVAL	2111:17	2111:17	7	JState ( tif )
FUNCTION_CALL	2111:17	2111:27	8	JState ( tif )
CALLEE	2111:17	2111:17	9	JState
LEAF_NODE	2111:17	2111:17	10	JState
LEAF_NODE	2111:23	2111:23	9	(
ARGUMENT	2111:24	2111:24	9	tif
FIELD	2111:24	2111:24	10	tif
LEAF_NODE	2111:24	2111:24	11	tif
LEAF_NODE	2111:27	2111:27	9	)
LEAF_NODE	2111:28	2111:28	4	;
SIMPLE_DECL	2112:1	2112:15	3	JSAMPLE * inptr ;
VAR_DECL	2112:1	2112:10	4	JSAMPLE * inptr
TYPE	2112:1	2112:8	5	JSAMPLE *
TYPE_NAME	2112:1	2112:1	6	JSAMPLE
LEAF_NODE	2112:1	2112:1	7	JSAMPLE
POINTER	2112:8	2112:8	6	*
LEAF_NODE	2112:8	2112:8	7	*
NAME	2112:10	2112:10	5	inptr
LEAF_NODE	2112:10	2112:10	6	inptr
LEAF_NODE	2112:15	2112:15	4	;
SIMPLE_DECL	2113:1	2113:16	3	JSAMPLE * outptr ;
VAR_DECL	2113:1	2113:10	4	JSAMPLE * outptr
TYPE	2113:1	2113:8	5	JSAMPLE *
TYPE_NAME	2113:1	2113:1	6	JSAMPLE
LEAF_NODE	2113:1	2113:1	7	JSAMPLE
POINTER	2113:8	2113:8	6	*
LEAF_NODE	2113:8	2113:8	7	*
NAME	2113:10	2113:10	5	outptr
LEAF_NODE	2113:10	2113:10	6	outptr
LEAF_NODE	2113:16	2113:16	4	;
SIMPLE_DECL	2114:1	2114:15	3	tmsize_t nrows ;
VAR_DECL	2114:1	2114:10	4	tmsize_t nrows
TYPE	2114:1	2114:1	5	tmsize_t
TYPE_NAME	2114:1	2114:1	6	tmsize_t
LEAF_NODE	2114:1	2114:1	7	tmsize_t
NAME	2114:10	2114:10	5	nrows
LEAF_NODE	2114:10	2114:10	6	nrows
LEAF_NODE	2114:15	2114:15	4	;
SIMPLE_DECL	2115:1	2115:35	3	JDIMENSION clumps_per_line , JDIMENSION nclump ;
INIT_DECL_LIST	2115:1	2115:1	4	JDIMENSION clumps_per_line , JDIMENSION nclump
VAR_DECL	2115:1	2115:12	5	JDIMENSION clumps_per_line
TYPE	2115:1	2115:1	6	JDIMENSION
TYPE_NAME	2115:1	2115:1	7	JDIMENSION
LEAF_NODE	2115:1	2115:1	8	JDIMENSION
NAME	2115:12	2115:12	6	clumps_per_line
LEAF_NODE	2115:12	2115:12	7	clumps_per_line
LEAF_NODE	2115:27	2115:27	5	,
VAR_DECL	2115:1	2115:29	5	JDIMENSION nclump
TYPE	2115:1	2115:1	6	JDIMENSION
TYPE_NAME	2115:1	2115:1	7	JDIMENSION
LEAF_NODE	2115:1	2115:1	8	JDIMENSION
NAME	2115:29	2115:29	6	nclump
LEAF_NODE	2115:29	2115:29	7	nclump
LEAF_NODE	2115:35	2115:35	4	;
SIMPLE_DECL	2116:1	2116:32	3	int clumpoffset , int ci , int xpos , int ypos ;
INIT_DECL_LIST	2116:1	2116:1	4	int clumpoffset , int ci , int xpos , int ypos
VAR_DECL	2116:1	2116:5	5	int clumpoffset
TYPE	2116:1	2116:1	6	int
TYPE_NAME	2116:1	2116:1	7	int
LEAF_NODE	2116:1	2116:1	8	int
NAME	2116:5	2116:5	6	clumpoffset
LEAF_NODE	2116:5	2116:5	7	clumpoffset
LEAF_NODE	2116:16	2116:16	5	,
INIT_DECL_LIST	2116:1	2116:1	5	int ci , int xpos , int ypos
VAR_DECL	2116:1	2116:18	6	int ci
TYPE	2116:1	2116:1	7	int
TYPE_NAME	2116:1	2116:1	8	int
LEAF_NODE	2116:1	2116:1	9	int
NAME	2116:18	2116:18	7	ci
LEAF_NODE	2116:18	2116:18	8	ci
LEAF_NODE	2116:20	2116:20	6	,
INIT_DECL_LIST	2116:1	2116:1	6	int xpos , int ypos
VAR_DECL	2116:1	2116:22	7	int xpos
TYPE	2116:1	2116:1	8	int
TYPE_NAME	2116:1	2116:1	9	int
LEAF_NODE	2116:1	2116:1	10	int
NAME	2116:22	2116:22	8	xpos
LEAF_NODE	2116:22	2116:22	9	xpos
LEAF_NODE	2116:26	2116:26	7	,
VAR_DECL	2116:1	2116:28	7	int ypos
TYPE	2116:1	2116:1	8	int
TYPE_NAME	2116:1	2116:1	9	int
LEAF_NODE	2116:1	2116:1	10	int
NAME	2116:28	2116:28	8	ypos
LEAF_NODE	2116:28	2116:28	9	ypos
LEAF_NODE	2116:32	2116:32	4	;
SIMPLE_DECL	2117:1	2117:29	3	jpeg_component_info * compptr ;
VAR_DECL	2117:1	2117:22	4	jpeg_component_info * compptr
TYPE	2117:1	2117:20	5	jpeg_component_info *
TYPE_NAME	2117:1	2117:1	6	jpeg_component_info
LEAF_NODE	2117:1	2117:1	7	jpeg_component_info
POINTER	2117:20	2117:20	6	*
LEAF_NODE	2117:20	2117:20	7	*
NAME	2117:22	2117:22	5	compptr
LEAF_NODE	2117:22	2117:22	6	compptr
LEAF_NODE	2117:29	2117:29	4	;
SIMPLE_DECL	2118:1	2118:44	3	int samples_per_clump ; samples_per_clump = sp -> samplesperclump ;
VAR_DECL	2118:1	2118:5	4	int samples_per_clump ; samples_per_clump = sp -> samplesperclump
TYPE	2118:1	2118:1	5	int
TYPE_NAME	2118:1	2118:1	6	int
LEAF_NODE	2118:1	2118:1	7	int
NAME	2118:5	2118:5	5	samples_per_clump
LEAF_NODE	2118:5	2118:5	6	samples_per_clump
LEAF_NODE	0:0	0:0	5	;
INIT	2118:5	2118:5	5	samples_per_clump = sp -> samplesperclump
ASSIGN	2118:5	2118:25	6	samples_per_clump = sp -> samplesperclump
LVAL	2118:5	2118:5	7	samples_per_clump
NAME	2118:5	2118:5	8	samples_per_clump
LEAF_NODE	2118:5	2118:5	9	samples_per_clump
ASSIGN_OP	2118:23	2118:23	7	=
LEAF_NODE	2118:23	2118:23	8	=
RVAL	2118:25	2118:25	7	sp -> samplesperclump
FIELD	2118:25	2118:29	8	sp -> samplesperclump
LEAF_NODE	2118:25	2118:25	9	sp
LEAF_NODE	2118:27	2118:27	9	->
LEAF_NODE	2118:29	2118:29	9	samplesperclump
LEAF_NODE	2118:44	2118:44	4	;
SIMPLE_DECL	2119:1	2119:27	3	tmsize_t bytesperclumpline ;
VAR_DECL	2119:1	2119:10	4	tmsize_t bytesperclumpline
TYPE	2119:1	2119:1	5	tmsize_t
TYPE_NAME	2119:1	2119:1	6	tmsize_t
LEAF_NODE	2119:1	2119:1	7	tmsize_t
NAME	2119:10	2119:10	5	bytesperclumpline
LEAF_NODE	2119:10	2119:10	6	bytesperclumpline
LEAF_NODE	2119:27	2119:27	4	;
EXPR_STATEMENT	2121:1	2121:9	3	( void ) s ;
EXPR	2121:1	2121:8	4	( void ) s
LEAF_NODE	2121:1	2121:1	5	(
TYPE_NAME	2121:2	2121:2	5	void
LEAF_NODE	2121:2	2121:2	6	void
LEAF_NODE	2121:6	2121:6	5	)
FIELD	2121:8	2121:8	5	s
LEAF_NODE	2121:8	2121:8	6	s
LEAF_NODE	2121:9	2121:9	4	;
EXPR_STATEMENT	2122:1	2122:19	3	assert ( sp != NULL ) ;
EXPR	2122:1	2122:1	4	assert ( sp != NULL )
FUNCTION_CALL	2122:1	2122:18	5	assert ( sp != NULL )
CALLEE	2122:1	2122:1	6	assert
LEAF_NODE	2122:1	2122:1	7	assert
LEAF_NODE	2122:7	2122:7	6	(
ARGUMENT	2122:8	2122:14	6	sp != NULL
FIELD	2122:8	2122:8	7	sp
LEAF_NODE	2122:8	2122:8	8	sp
EQ_OPERATOR	2122:11	2122:11	7	!=
LEAF_NODE	2122:11	2122:11	8	!=
FIELD	2122:14	2122:14	7	NULL
LEAF_NODE	2122:14	2122:14	8	NULL
LEAF_NODE	2122:18	2122:18	6	)
LEAF_NODE	2122:19	2122:19	4	;
LEAF_NODE	2126:1	2126:1	3	bytesperclumpline
LEAF_NODE	2126:19	2126:19	3	=
LEAF_NODE	2126:21	2126:21	3	(
LEAF_NODE	2126:22	2126:22	3	(
LEAF_NODE	2126:23	2126:23	3	(
LEAF_NODE	2126:24	2126:24	3	(
LEAF_NODE	2126:25	2126:25	3	tmsize_t
LEAF_NODE	2126:33	2126:33	3	)
LEAF_NODE	2126:34	2126:34	3	sp
LEAF_NODE	2126:36	2126:36	3	->
LEAF_NODE	2126:38	2126:38	3	cinfo
LEAF_NODE	2126:43	2126:43	3	.
LEAF_NODE	2126:44	2126:44	3	c
LEAF_NODE	2126:45	2126:45	3	.
LEAF_NODE	2126:46	2126:46	3	image_width
LEAF_NODE	2126:57	2126:57	3	+
LEAF_NODE	2126:58	2126:58	3	sp
LEAF_NODE	2126:60	2126:60	3	->
LEAF_NODE	2126:62	2126:62	3	h_sampling
LEAF_NODE	2126:72	2126:72	3	-
LEAF_NODE	2126:73	2126:73	3	1
LEAF_NODE	2126:74	2126:74	3	)
LEAF_NODE	2126:75	2126:75	3	/
LEAF_NODE	2126:76	2126:76	3	sp
LEAF_NODE	2126:78	2126:78	3	->
LEAF_NODE	2126:80	2126:80	3	h_sampling
LEAF_NODE	2126:90	2126:90	3	)
LEAF_NODE	2127:8	2127:8	3	*
LEAF_NODE	2127:9	2127:9	3	(
LEAF_NODE	2127:10	2127:10	3	(
LEAF_NODE	2127:11	2127:11	3	tmsize_t
LEAF_NODE	2127:19	2127:19	3	)
LEAF_NODE	2127:20	2127:20	3	sp
LEAF_NODE	2127:22	2127:22	3	->
LEAF_NODE	2127:24	2127:24	3	h_sampling
LEAF_NODE	2127:34	2127:34	3	*
LEAF_NODE	2127:35	2127:35	3	sp
LEAF_NODE	2127:37	2127:37	3	->
LEAF_NODE	2127:39	2127:39	3	v_sampling
LEAF_NODE	2127:49	2127:49	3	+
LEAF_NODE	2127:50	2127:50	3	2
LEAF_NODE	2127:51	2127:51	3	)
LEAF_NODE	2127:52	2127:52	3	*
LEAF_NODE	2127:53	2127:53	3	sp
LEAF_NODE	2127:55	2127:55	3	->
LEAF_NODE	2127:57	2127:57	3	cinfo
LEAF_NODE	2127:62	2127:62	3	.
LEAF_NODE	2127:63	2127:63	3	c
LEAF_NODE	2127:64	2127:64	3	.
LEAF_NODE	2127:65	2127:65	3	data_precision
LEAF_NODE	2127:79	2127:79	3	+
LEAF_NODE	2127:80	2127:80	3	7
LEAF_NODE	2127:81	2127:81	3	)
LEAF_NODE	2128:7	2128:7	3	/
EXPR_STATEMENT	2128:8	2128:9	3	8 ;
EXPR	2128:8	2128:8	4	8
FIELD	2128:8	2128:8	5	8
LEAF_NODE	2128:8	2128:8	6	8
LEAF_NODE	2128:9	2128:9	4	;
EXPR_STATEMENT	2130:1	2130:52	3	nrows = ( cc / bytesperclumpline ) * sp -> v_sampling ;
EXPR	2130:1	2130:1	4	nrows = ( cc / bytesperclumpline ) * sp -> v_sampling
ASSIGN	2130:1	2130:9	5	nrows = ( cc / bytesperclumpline ) * sp -> v_sampling
LVAL	2130:1	2130:1	6	nrows
FIELD	2130:1	2130:1	7	nrows
LEAF_NODE	2130:1	2130:1	8	nrows
ASSIGN_OP	2130:7	2130:7	6	=
LEAF_NODE	2130:7	2130:7	7	=
RVAL	2130:9	2130:38	6	( cc / bytesperclumpline ) * sp -> v_sampling
LEAF_NODE	2130:9	2130:9	7	(
FIELD	2130:11	2130:11	7	cc
LEAF_NODE	2130:11	2130:11	8	cc
LEAF_NODE	2130:14	2130:14	7	/
FIELD	2130:16	2130:16	7	bytesperclumpline
LEAF_NODE	2130:16	2130:16	8	bytesperclumpline
LEAF_NODE	2130:34	2130:34	7	)
LEAF_NODE	2130:36	2130:36	7	*
FIELD	2130:38	2130:42	7	sp -> v_sampling
LEAF_NODE	2130:38	2130:38	8	sp
LEAF_NODE	2130:40	2130:40	8	->
LEAF_NODE	2130:42	2130:42	8	v_sampling
LEAF_NODE	2130:52	2130:52	4	;
SELECTION	2131:1	2132:2	3	
KEYWORD	2131:1	2131:1	4	if
LEAF_NODE	2131:1	2131:1	5	if
LEAF_NODE	2131:4	2131:4	4	(
CONDITION	2131:5	2131:5	4	cc % bytesperclumpline
EXPR	2131:5	2131:10	5	cc % bytesperclumpline
FIELD	2131:5	2131:5	6	cc
LEAF_NODE	2131:5	2131:5	7	cc
LEAF_NODE	2131:8	2131:8	6	%
FIELD	2131:10	2131:10	6	bytesperclumpline
LEAF_NODE	2131:10	2131:10	7	bytesperclumpline
LEAF_NODE	2131:27	2131:27	4	)
STATEMENTS	2132:2	2132:2	4	
EXPR_STATEMENT	2132:2	2132:85	5	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline discarded" ) ;
EXPR	2132:2	2132:2	6	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline discarded" )
FUNCTION_CALL	2132:2	2132:84	7	TIFFWarningExt ( tif -> tif_clientdata , tif -> tif_name , "fractional scanline discarded" )
CALLEE	2132:2	2132:2	8	TIFFWarningExt
LEAF_NODE	2132:2	2132:2	9	TIFFWarningExt
LEAF_NODE	2132:16	2132:16	8	(
ARGUMENT	2132:17	2132:17	8	tif -> tif_clientdata
FIELD	2132:17	2132:22	9	tif -> tif_clientdata
LEAF_NODE	2132:17	2132:17	10	tif
LEAF_NODE	2132:20	2132:20	10	->
LEAF_NODE	2132:22	2132:22	10	tif_clientdata
LEAF_NODE	2132:36	2132:36	8	,
ARGUMENT	2132:38	2132:38	8	tif -> tif_name
FIELD	2132:38	2132:43	9	tif -> tif_name
LEAF_NODE	2132:38	2132:38	10	tif
LEAF_NODE	2132:41	2132:41	10	->
LEAF_NODE	2132:43	2132:43	10	tif_name
LEAF_NODE	2132:51	2132:51	8	,
ARGUMENT	2132:53	2132:53	8	"fractional scanline discarded"
FIELD	2132:53	2132:53	9	"fractional scanline discarded"
LEAF_NODE	2132:53	2132:53	10	"fractional scanline discarded"
LEAF_NODE	2132:84	2132:84	8	)
LEAF_NODE	2132:85	2132:85	6	;
EXPR_STATEMENT	2135:1	2135:61	3	clumps_per_line = sp -> cinfo . c . comp_info [ 1 ] . downsampled_width ;
EXPR	2135:1	2135:1	4	clumps_per_line = sp -> cinfo . c . comp_info [ 1 ] . downsampled_width
ASSIGN	2135:1	2135:19	5	clumps_per_line = sp -> cinfo . c . comp_info [ 1 ] . downsampled_width
LVAL	2135:1	2135:1	6	clumps_per_line
FIELD	2135:1	2135:1	7	clumps_per_line
LEAF_NODE	2135:1	2135:1	8	clumps_per_line
ASSIGN_OP	2135:17	2135:17	6	=
LEAF_NODE	2135:17	2135:17	7	=
RVAL	2135:19	2135:19	6	sp -> cinfo . c . comp_info [ 1 ] . downsampled_width
FIELD	2135:19	2135:44	7	sp -> cinfo . c . comp_info [ 1 ] . downsampled_width
LEAF_NODE	2135:19	2135:19	8	sp
LEAF_NODE	2135:21	2135:21	8	->
LEAF_NODE	2135:23	2135:23	8	cinfo
LEAF_NODE	2135:28	2135:28	8	.
LEAF_NODE	2135:29	2135:29	8	c
LEAF_NODE	2135:30	2135:30	8	.
LEAF_NODE	2135:31	2135:31	8	comp_info
LEAF_NODE	2135:40	2135:40	8	[
EXPR	2135:41	2135:41	8	1
FIELD	2135:41	2135:41	9	1
LEAF_NODE	2135:41	2135:41	10	1
LEAF_NODE	2135:42	2135:42	8	]
LEAF_NODE	2135:43	2135:43	8	.
LEAF_NODE	2135:44	2135:44	8	downsampled_width
LEAF_NODE	2135:61	2135:61	4	;
ITERATION	2137:1	2137:19	3	
KEYWORD	2137:1	2137:1	4	while
LEAF_NODE	2137:1	2137:1	5	while
LEAF_NODE	2137:7	2137:7	4	(
CONDITION	2137:8	2137:8	4	nrows > 0
EXPR	2137:8	2137:16	5	nrows > 0
FIELD	2137:8	2137:8	6	nrows
LEAF_NODE	2137:8	2137:8	7	nrows
REL_OPERATOR	2137:14	2137:14	6	>
LEAF_NODE	2137:14	2137:14	7	>
FIELD	2137:16	2137:16	6	0
LEAF_NODE	2137:16	2137:16	7	0
LEAF_NODE	2137:17	2137:17	4	)
STATEMENTS	2137:19	2185:1	4	
LEAF_NODE	2137:19	2137:19	5	{
STATEMENTS	2142:2	2184:2	5	
EXPR_STATEMENT	2142:2	2142:17	6	clumpoffset = 0 ;
EXPR	2142:2	2142:2	7	clumpoffset = 0
ASSIGN	2142:2	2142:16	8	clumpoffset = 0
LVAL	2142:2	2142:2	9	clumpoffset
FIELD	2142:2	2142:2	10	clumpoffset
LEAF_NODE	2142:2	2142:2	11	clumpoffset
ASSIGN_OP	2142:14	2142:14	9	=
LEAF_NODE	2142:14	2142:14	10	=
RVAL	2142:16	2142:16	9	0
FIELD	2142:16	2142:16	10	0
LEAF_NODE	2142:16	2142:16	11	0
LEAF_NODE	2142:17	2142:17	7	;
ITERATION	2143:2	2145:24	6	
KEYWORD	2143:2	2143:2	7	for
LEAF_NODE	2143:2	2143:2	8	for
LEAF_NODE	2143:6	2143:6	7	(
FOR_INIT	2143:7	2143:46	7	ci = 0 , compptr = sp -> cinfo . c . comp_info ;
EXPR	2143:7	2143:15	8	ci = 0 , compptr = sp -> cinfo . c . comp_info
ASSIGN	2143:7	2143:12	9	ci = 0
LVAL	2143:7	2143:7	10	ci
FIELD	2143:7	2143:7	11	ci
LEAF_NODE	2143:7	2143:7	12	ci
ASSIGN_OP	2143:10	2143:10	10	=
LEAF_NODE	2143:10	2143:10	11	=
RVAL	2143:12	2143:12	10	0
FIELD	2143:12	2143:12	11	0
LEAF_NODE	2143:12	2143:12	12	0
LEAF_NODE	2143:13	2143:13	9	,
ASSIGN	2143:15	2143:25	9	compptr = sp -> cinfo . c . comp_info
LVAL	2143:15	2143:15	10	compptr
FIELD	2143:15	2143:15	11	compptr
LEAF_NODE	2143:15	2143:15	12	compptr
ASSIGN_OP	2143:23	2143:23	10	=
LEAF_NODE	2143:23	2143:23	11	=
RVAL	2143:25	2143:25	10	sp -> cinfo . c . comp_info
FIELD	2143:25	2143:37	11	sp -> cinfo . c . comp_info
LEAF_NODE	2143:25	2143:25	12	sp
LEAF_NODE	2143:27	2143:27	12	->
LEAF_NODE	2143:29	2143:29	12	cinfo
LEAF_NODE	2143:34	2143:34	12	.
LEAF_NODE	2143:35	2143:35	12	c
LEAF_NODE	2143:36	2143:36	12	.
LEAF_NODE	2143:37	2143:37	12	comp_info
LEAF_NODE	2143:46	2143:46	8	;
CONDITION	2144:7	2144:7	7	ci < sp -> cinfo . c . num_components
EXPR	2144:7	2144:12	8	ci < sp -> cinfo . c . num_components
FIELD	2144:7	2144:7	9	ci
LEAF_NODE	2144:7	2144:7	10	ci
REL_OPERATOR	2144:10	2144:10	9	<
LEAF_NODE	2144:10	2144:10	10	<
FIELD	2144:12	2144:24	9	sp -> cinfo . c . num_components
LEAF_NODE	2144:12	2144:12	10	sp
LEAF_NODE	2144:14	2144:14	10	->
LEAF_NODE	2144:16	2144:16	10	cinfo
LEAF_NODE	2144:21	2144:21	10	.
LEAF_NODE	2144:22	2144:22	10	c
LEAF_NODE	2144:23	2144:23	10	.
LEAF_NODE	2144:24	2144:24	10	num_components
LEAF_NODE	2144:38	2144:38	7	;
FOR_EXPR	2145:7	2145:7	7	ci ++ , compptr ++
EXPR	2145:7	2145:13	8	ci ++ , compptr ++
FIELD	2145:7	2145:9	9	ci ++
LEAF_NODE	2145:7	2145:7	10	ci
LEAF_NODE	2145:9	2145:9	10	++
LEAF_NODE	2145:11	2145:11	9	,
FIELD	2145:13	2145:20	9	compptr ++
LEAF_NODE	2145:13	2145:13	10	compptr
LEAF_NODE	2145:20	2145:20	10	++
LEAF_NODE	2145:22	2145:22	7	)
STATEMENTS	2145:24	2174:2	7	
LEAF_NODE	2145:24	2145:24	8	{
STATEMENTS	2146:6	2150:6	8	
SIMPLE_DECL	2146:6	2146:40	9	int hsamp ; hsamp = compptr -> h_samp_factor ;
VAR_DECL	2146:6	2146:10	10	int hsamp ; hsamp = compptr -> h_samp_factor
TYPE	2146:6	2146:6	11	int
TYPE_NAME	2146:6	2146:6	12	int
LEAF_NODE	2146:6	2146:6	13	int
NAME	2146:10	2146:10	11	hsamp
LEAF_NODE	2146:10	2146:10	12	hsamp
LEAF_NODE	0:0	0:0	11	;
INIT	2146:10	2146:10	11	hsamp = compptr -> h_samp_factor
ASSIGN	2146:10	2146:18	12	hsamp = compptr -> h_samp_factor
LVAL	2146:10	2146:10	13	hsamp
NAME	2146:10	2146:10	14	hsamp
LEAF_NODE	2146:10	2146:10	15	hsamp
ASSIGN_OP	2146:16	2146:16	13	=
LEAF_NODE	2146:16	2146:16	14	=
RVAL	2146:18	2146:18	13	compptr -> h_samp_factor
FIELD	2146:18	2146:27	14	compptr -> h_samp_factor
LEAF_NODE	2146:18	2146:18	15	compptr
LEAF_NODE	2146:25	2146:25	15	->
LEAF_NODE	2146:27	2146:27	15	h_samp_factor
LEAF_NODE	2146:40	2146:40	10	;
SIMPLE_DECL	2147:6	2147:40	9	int vsamp ; vsamp = compptr -> v_samp_factor ;
VAR_DECL	2147:6	2147:10	10	int vsamp ; vsamp = compptr -> v_samp_factor
TYPE	2147:6	2147:6	11	int
TYPE_NAME	2147:6	2147:6	12	int
LEAF_NODE	2147:6	2147:6	13	int
NAME	2147:10	2147:10	11	vsamp
LEAF_NODE	2147:10	2147:10	12	vsamp
LEAF_NODE	0:0	0:0	11	;
INIT	2147:10	2147:10	11	vsamp = compptr -> v_samp_factor
ASSIGN	2147:10	2147:18	12	vsamp = compptr -> v_samp_factor
LVAL	2147:10	2147:10	13	vsamp
NAME	2147:10	2147:10	14	vsamp
LEAF_NODE	2147:10	2147:10	15	vsamp
ASSIGN_OP	2147:16	2147:16	13	=
LEAF_NODE	2147:16	2147:16	14	=
RVAL	2147:18	2147:18	13	compptr -> v_samp_factor
FIELD	2147:18	2147:27	14	compptr -> v_samp_factor
LEAF_NODE	2147:18	2147:18	15	compptr
LEAF_NODE	2147:25	2147:25	15	->
LEAF_NODE	2147:27	2147:27	15	v_samp_factor
LEAF_NODE	2147:40	2147:40	10	;
SIMPLE_DECL	2148:6	2149:30	9	int padding ; padding = ( int ) ( compptr -> width_in_blocks * DCTSIZE - clumps_per_line * hsamp ) ;
VAR_DECL	2148:6	2148:10	10	int padding ; padding = ( int ) ( compptr -> width_in_blocks * DCTSIZE - clumps_per_line * hsamp )
TYPE	2148:6	2148:6	11	int
TYPE_NAME	2148:6	2148:6	12	int
LEAF_NODE	2148:6	2148:6	13	int
NAME	2148:10	2148:10	11	padding
LEAF_NODE	2148:10	2148:10	12	padding
LEAF_NODE	0:0	0:0	11	;
INIT	2148:10	2148:10	11	padding = ( int ) ( compptr -> width_in_blocks * DCTSIZE - clumps_per_line * hsamp )
ASSIGN	2148:10	2148:20	12	padding = ( int ) ( compptr -> width_in_blocks * DCTSIZE - clumps_per_line * hsamp )
LVAL	2148:10	2148:10	13	padding
NAME	2148:10	2148:10	14	padding
LEAF_NODE	2148:10	2148:10	15	padding
ASSIGN_OP	2148:18	2148:18	13	=
LEAF_NODE	2148:18	2148:18	14	=
RVAL	2148:20	2149:29	13	( int ) ( compptr -> width_in_blocks * DCTSIZE - clumps_per_line * hsamp )
LEAF_NODE	2148:20	2148:20	14	(
TYPE_NAME	2148:21	2148:21	14	int
LEAF_NODE	2148:21	2148:21	15	int
LEAF_NODE	2148:24	2148:24	14	)
LEAF_NODE	2148:26	2148:26	14	(
FIELD	2148:27	2148:36	14	compptr -> width_in_blocks
LEAF_NODE	2148:27	2148:27	15	compptr
LEAF_NODE	2148:34	2148:34	15	->
LEAF_NODE	2148:36	2148:36	15	width_in_blocks
LEAF_NODE	2148:52	2148:52	14	*
FIELD	2148:54	2148:54	14	DCTSIZE
LEAF_NODE	2148:54	2148:54	15	DCTSIZE
LEAF_NODE	2148:62	2148:62	14	-
FIELD	2149:6	2149:6	14	clumps_per_line
LEAF_NODE	2149:6	2149:6	15	clumps_per_line
LEAF_NODE	2149:22	2149:22	14	*
FIELD	2149:24	2149:24	14	hsamp
LEAF_NODE	2149:24	2149:24	15	hsamp
LEAF_NODE	2149:29	2149:29	14	)
LEAF_NODE	2149:30	2149:30	10	;
ITERATION	2150:6	2150:43	9	
KEYWORD	2150:6	2150:6	10	for
LEAF_NODE	2150:6	2150:6	11	for
LEAF_NODE	2150:10	2150:10	10	(
FOR_INIT	2150:11	2150:19	10	ypos = 0 ;
EXPR	2150:11	2150:11	11	ypos = 0
ASSIGN	2150:11	2150:18	12	ypos = 0
LVAL	2150:11	2150:11	13	ypos
FIELD	2150:11	2150:11	14	ypos
LEAF_NODE	2150:11	2150:11	15	ypos
ASSIGN_OP	2150:16	2150:16	13	=
LEAF_NODE	2150:16	2150:16	14	=
RVAL	2150:18	2150:18	13	0
FIELD	2150:18	2150:18	14	0
LEAF_NODE	2150:18	2150:18	15	0
LEAF_NODE	2150:19	2150:19	11	;
CONDITION	2150:21	2150:21	10	ypos < vsamp
EXPR	2150:21	2150:28	11	ypos < vsamp
FIELD	2150:21	2150:21	12	ypos
LEAF_NODE	2150:21	2150:21	13	ypos
REL_OPERATOR	2150:26	2150:26	12	<
LEAF_NODE	2150:26	2150:26	13	<
FIELD	2150:28	2150:28	12	vsamp
LEAF_NODE	2150:28	2150:28	13	vsamp
LEAF_NODE	2150:33	2150:33	10	;
FOR_EXPR	2150:35	2150:35	10	ypos ++
EXPR	2150:35	2150:35	11	ypos ++
FIELD	2150:35	2150:39	12	ypos ++
LEAF_NODE	2150:35	2150:35	13	ypos
LEAF_NODE	2150:39	2150:39	13	++
LEAF_NODE	2150:41	2150:41	10	)
STATEMENTS	2150:43	2173:6	10	
LEAF_NODE	2150:43	2150:43	11	{
STATEMENTS	2151:3	2172:3	11	
EXPR_STATEMENT	2151:3	2151:41	12	inptr = ( ( JSAMPLE * ) buf ) + clumpoffset ;
EXPR	2151:3	2151:3	13	inptr = ( ( JSAMPLE * ) buf ) + clumpoffset
ASSIGN	2151:3	2151:11	14	inptr = ( ( JSAMPLE * ) buf ) + clumpoffset
LVAL	2151:3	2151:3	15	inptr
FIELD	2151:3	2151:3	16	inptr
LEAF_NODE	2151:3	2151:3	17	inptr
ASSIGN_OP	2151:9	2151:9	15	=
LEAF_NODE	2151:9	2151:9	16	=
RVAL	2151:11	2151:30	15	( ( JSAMPLE * ) buf ) + clumpoffset
LEAF_NODE	2151:11	2151:11	16	(
LEAF_NODE	2151:12	2151:12	16	(
TYPE_NAME	2151:13	2151:13	16	JSAMPLE
LEAF_NODE	2151:13	2151:13	17	JSAMPLE
LEAF_NODE	2151:20	2151:20	16	*
LEAF_NODE	2151:21	2151:21	16	)
FIELD	2151:23	2151:23	16	buf
LEAF_NODE	2151:23	2151:23	17	buf
LEAF_NODE	2151:26	2151:26	16	)
LEAF_NODE	2151:28	2151:28	16	+
FIELD	2151:30	2151:30	16	clumpoffset
LEAF_NODE	2151:30	2151:30	17	clumpoffset
LEAF_NODE	2151:41	2151:41	13	;
EXPR_STATEMENT	2152:3	2152:57	12	outptr = sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ] ;
EXPR	2152:3	2152:3	13	outptr = sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ]
ASSIGN	2152:3	2152:12	14	outptr = sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ]
LVAL	2152:3	2152:3	15	outptr
FIELD	2152:3	2152:3	16	outptr
LEAF_NODE	2152:3	2152:3	17	outptr
ASSIGN_OP	2152:10	2152:10	15	=
LEAF_NODE	2152:10	2152:10	16	=
RVAL	2152:12	2152:12	15	sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ]
FIELD	2152:12	2152:56	16	sp -> ds_buffer [ ci ] [ sp -> scancount * vsamp + ypos ]
LEAF_NODE	2152:12	2152:12	17	sp
LEAF_NODE	2152:14	2152:14	17	->
LEAF_NODE	2152:16	2152:16	17	ds_buffer
LEAF_NODE	2152:25	2152:25	17	[
EXPR	2152:26	2152:26	17	ci
FIELD	2152:26	2152:26	18	ci
LEAF_NODE	2152:26	2152:26	19	ci
LEAF_NODE	2152:28	2152:28	17	]
LEAF_NODE	2152:29	2152:29	17	[
EXPR	2152:30	2152:52	17	sp -> scancount * vsamp + ypos
FIELD	2152:30	2152:34	18	sp -> scancount
LEAF_NODE	2152:30	2152:30	19	sp
LEAF_NODE	2152:32	2152:32	19	->
LEAF_NODE	2152:34	2152:34	19	scancount
LEAF_NODE	2152:43	2152:43	18	*
FIELD	2152:44	2152:44	18	vsamp
LEAF_NODE	2152:44	2152:44	19	vsamp
LEAF_NODE	2152:50	2152:50	18	+
FIELD	2152:52	2152:52	18	ypos
LEAF_NODE	2152:52	2152:52	19	ypos
LEAF_NODE	2152:56	2152:56	17	]
LEAF_NODE	2152:57	2152:57	13	;
SELECTION	2153:3	2153:19	12	
KEYWORD	2153:3	2153:3	13	if
LEAF_NODE	2153:3	2153:3	14	if
LEAF_NODE	2153:6	2153:6	13	(
CONDITION	2153:7	2153:7	13	hsamp == 1
EXPR	2153:7	2153:16	14	hsamp == 1
FIELD	2153:7	2153:7	15	hsamp
LEAF_NODE	2153:7	2153:7	16	hsamp
EQ_OPERATOR	2153:13	2153:13	15	==
LEAF_NODE	2153:13	2153:13	16	==
FIELD	2153:16	2153:16	15	1
LEAF_NODE	2153:16	2153:16	16	1
LEAF_NODE	2153:17	2153:17	13	)
STATEMENTS	2153:19	2159:3	13	
LEAF_NODE	2153:19	2153:19	14	{
STATEMENTS	2155:7	2155:7	14	
ITERATION	2155:7	2155:54	15	
KEYWORD	2155:7	2155:7	16	for
LEAF_NODE	2155:7	2155:7	17	for
LEAF_NODE	2155:11	2155:11	16	(
FOR_INIT	2155:12	2155:36	16	nclump = clumps_per_line ;
EXPR	2155:12	2155:12	17	nclump = clumps_per_line
ASSIGN	2155:12	2155:21	18	nclump = clumps_per_line
LVAL	2155:12	2155:12	19	nclump
FIELD	2155:12	2155:12	20	nclump
LEAF_NODE	2155:12	2155:12	21	nclump
ASSIGN_OP	2155:19	2155:19	19	=
LEAF_NODE	2155:19	2155:19	20	=
RVAL	2155:21	2155:21	19	clumps_per_line
FIELD	2155:21	2155:21	20	clumps_per_line
LEAF_NODE	2155:21	2155:21	21	clumps_per_line
LEAF_NODE	2155:36	2155:36	17	;
CONDITION	2155:38	2155:38	16	nclump -- > 0
EXPR	2155:38	2155:49	17	nclump -- > 0
FIELD	2155:38	2155:44	18	nclump --
LEAF_NODE	2155:38	2155:38	19	nclump
LEAF_NODE	2155:44	2155:44	19	--
REL_OPERATOR	2155:47	2155:47	18	>
LEAF_NODE	2155:47	2155:47	19	>
FIELD	2155:49	2155:49	18	0
LEAF_NODE	2155:49	2155:49	19	0
LEAF_NODE	2155:50	2155:50	16	;
LEAF_NODE	0:0	0:0	16	FOR_EXPR
LEAF_NODE	2155:52	2155:52	16	)
STATEMENTS	2155:54	2158:7	16	
LEAF_NODE	2155:54	2155:54	17	{
STATEMENTS	2156:4	2157:4	17	
EXPR_STATEMENT	2156:4	2156:24	18	* outptr ++ = inptr [ 0 ] ;
EXPR	2156:4	2156:4	19	* outptr ++ = inptr [ 0 ]
ASSIGN	2156:4	2156:16	20	* outptr ++ = inptr [ 0 ]
LVAL	2156:4	2156:4	21	* outptr ++
UNARY_EXPR	2156:4	2156:5	22	* outptr ++
UNARY_OPERATOR	2156:4	2156:4	23	*
LEAF_NODE	2156:4	2156:4	24	*
FIELD	2156:5	2156:11	23	outptr ++
LEAF_NODE	2156:5	2156:5	24	outptr
LEAF_NODE	2156:11	2156:11	24	++
ASSIGN_OP	2156:14	2156:14	21	=
LEAF_NODE	2156:14	2156:14	22	=
RVAL	2156:16	2156:16	21	inptr [ 0 ]
FIELD	2156:16	2156:23	22	inptr [ 0 ]
LEAF_NODE	2156:16	2156:16	23	inptr
LEAF_NODE	2156:21	2156:21	23	[
EXPR	2156:22	2156:22	23	0
FIELD	2156:22	2156:22	24	0
LEAF_NODE	2156:22	2156:22	25	0
LEAF_NODE	2156:23	2156:23	23	]
LEAF_NODE	2156:24	2156:24	19	;
EXPR_STATEMENT	2157:4	2157:30	18	inptr += samples_per_clump ;
EXPR	2157:4	2157:4	19	inptr += samples_per_clump
ASSIGN	2157:4	2157:13	20	inptr += samples_per_clump
LVAL	2157:4	2157:4	21	inptr
FIELD	2157:4	2157:4	22	inptr
LEAF_NODE	2157:4	2157:4	23	inptr
ASSIGN_OP	2157:10	2157:10	21	+=
LEAF_NODE	2157:10	2157:10	22	+=
RVAL	2157:13	2157:13	21	samples_per_clump
FIELD	2157:13	2157:13	22	samples_per_clump
LEAF_NODE	2157:13	2157:13	23	samples_per_clump
LEAF_NODE	2157:30	2157:30	19	;
LEAF_NODE	2158:7	2158:7	17	}
LEAF_NODE	2159:3	2159:3	14	}
SELECTION	2159:5	2159:10	12	
KEYWORD	2159:5	2159:5	13	else
LEAF_NODE	2159:5	2159:5	14	else
STATEMENTS	2159:10	2166:3	13	
LEAF_NODE	2159:10	2159:10	14	{
STATEMENTS	2161:7	2161:7	14	
ITERATION	2161:7	2161:54	15	
KEYWORD	2161:7	2161:7	16	for
LEAF_NODE	2161:7	2161:7	17	for
LEAF_NODE	2161:11	2161:11	16	(
FOR_INIT	2161:12	2161:36	16	nclump = clumps_per_line ;
EXPR	2161:12	2161:12	17	nclump = clumps_per_line
ASSIGN	2161:12	2161:21	18	nclump = clumps_per_line
LVAL	2161:12	2161:12	19	nclump
FIELD	2161:12	2161:12	20	nclump
LEAF_NODE	2161:12	2161:12	21	nclump
ASSIGN_OP	2161:19	2161:19	19	=
LEAF_NODE	2161:19	2161:19	20	=
RVAL	2161:21	2161:21	19	clumps_per_line
FIELD	2161:21	2161:21	20	clumps_per_line
LEAF_NODE	2161:21	2161:21	21	clumps_per_line
LEAF_NODE	2161:36	2161:36	17	;
CONDITION	2161:38	2161:38	16	nclump -- > 0
EXPR	2161:38	2161:49	17	nclump -- > 0
FIELD	2161:38	2161:44	18	nclump --
LEAF_NODE	2161:38	2161:38	19	nclump
LEAF_NODE	2161:44	2161:44	19	--
REL_OPERATOR	2161:47	2161:47	18	>
LEAF_NODE	2161:47	2161:47	19	>
FIELD	2161:49	2161:49	18	0
LEAF_NODE	2161:49	2161:49	19	0
LEAF_NODE	2161:50	2161:50	16	;
LEAF_NODE	0:0	0:0	16	FOR_EXPR
LEAF_NODE	2161:52	2161:52	16	)
STATEMENTS	2161:54	2165:7	16	
LEAF_NODE	2161:54	2161:54	17	{
STATEMENTS	2162:4	2164:4	17	
ITERATION	2162:4	2163:8	18	
KEYWORD	2162:4	2162:4	19	for
LEAF_NODE	2162:4	2162:4	20	for
LEAF_NODE	2162:8	2162:8	19	(
FOR_INIT	2162:9	2162:17	19	xpos = 0 ;
EXPR	2162:9	2162:9	20	xpos = 0
ASSIGN	2162:9	2162:16	21	xpos = 0
LVAL	2162:9	2162:9	22	xpos
FIELD	2162:9	2162:9	23	xpos
LEAF_NODE	2162:9	2162:9	24	xpos
ASSIGN_OP	2162:14	2162:14	22	=
LEAF_NODE	2162:14	2162:14	23	=
RVAL	2162:16	2162:16	22	0
FIELD	2162:16	2162:16	23	0
LEAF_NODE	2162:16	2162:16	24	0
LEAF_NODE	2162:17	2162:17	20	;
CONDITION	2162:19	2162:19	19	xpos < hsamp
EXPR	2162:19	2162:26	20	xpos < hsamp
FIELD	2162:19	2162:19	21	xpos
LEAF_NODE	2162:19	2162:19	22	xpos
REL_OPERATOR	2162:24	2162:24	21	<
LEAF_NODE	2162:24	2162:24	22	<
FIELD	2162:26	2162:26	21	hsamp
LEAF_NODE	2162:26	2162:26	22	hsamp
LEAF_NODE	2162:31	2162:31	19	;
FOR_EXPR	2162:33	2162:33	19	xpos ++
EXPR	2162:33	2162:33	20	xpos ++
FIELD	2162:33	2162:37	21	xpos ++
LEAF_NODE	2162:33	2162:33	22	xpos
LEAF_NODE	2162:37	2162:37	22	++
LEAF_NODE	2162:39	2162:39	19	)
STATEMENTS	2163:8	2163:8	19	
EXPR_STATEMENT	2163:8	2163:31	20	* outptr ++ = inptr [ xpos ] ;
EXPR	2163:8	2163:8	21	* outptr ++ = inptr [ xpos ]
ASSIGN	2163:8	2163:20	22	* outptr ++ = inptr [ xpos ]
LVAL	2163:8	2163:8	23	* outptr ++
UNARY_EXPR	2163:8	2163:9	24	* outptr ++
UNARY_OPERATOR	2163:8	2163:8	25	*
LEAF_NODE	2163:8	2163:8	26	*
FIELD	2163:9	2163:15	25	outptr ++
LEAF_NODE	2163:9	2163:9	26	outptr
LEAF_NODE	2163:15	2163:15	26	++
ASSIGN_OP	2163:18	2163:18	23	=
LEAF_NODE	2163:18	2163:18	24	=
RVAL	2163:20	2163:20	23	inptr [ xpos ]
FIELD	2163:20	2163:30	24	inptr [ xpos ]
LEAF_NODE	2163:20	2163:20	25	inptr
LEAF_NODE	2163:25	2163:25	25	[
EXPR	2163:26	2163:26	25	xpos
FIELD	2163:26	2163:26	26	xpos
LEAF_NODE	2163:26	2163:26	27	xpos
LEAF_NODE	2163:30	2163:30	25	]
LEAF_NODE	2163:31	2163:31	21	;
EXPR_STATEMENT	2164:4	2164:30	18	inptr += samples_per_clump ;
EXPR	2164:4	2164:4	19	inptr += samples_per_clump
ASSIGN	2164:4	2164:13	20	inptr += samples_per_clump
LVAL	2164:4	2164:4	21	inptr
FIELD	2164:4	2164:4	22	inptr
LEAF_NODE	2164:4	2164:4	23	inptr
ASSIGN_OP	2164:10	2164:10	21	+=
LEAF_NODE	2164:10	2164:10	22	+=
RVAL	2164:13	2164:13	21	samples_per_clump
FIELD	2164:13	2164:13	22	samples_per_clump
LEAF_NODE	2164:13	2164:13	23	samples_per_clump
LEAF_NODE	2164:30	2164:30	19	;
LEAF_NODE	2165:7	2165:7	17	}
LEAF_NODE	2166:3	2166:3	14	}
ITERATION	2168:3	2168:42	12	
KEYWORD	2168:3	2168:3	13	for
LEAF_NODE	2168:3	2168:3	14	for
LEAF_NODE	2168:7	2168:7	13	(
FOR_INIT	2168:8	2168:16	13	xpos = 0 ;
EXPR	2168:8	2168:8	14	xpos = 0
ASSIGN	2168:8	2168:15	15	xpos = 0
LVAL	2168:8	2168:8	16	xpos
FIELD	2168:8	2168:8	17	xpos
LEAF_NODE	2168:8	2168:8	18	xpos
ASSIGN_OP	2168:13	2168:13	16	=
LEAF_NODE	2168:13	2168:13	17	=
RVAL	2168:15	2168:15	16	0
FIELD	2168:15	2168:15	17	0
LEAF_NODE	2168:15	2168:15	18	0
LEAF_NODE	2168:16	2168:16	14	;
CONDITION	2168:18	2168:18	13	xpos < padding
EXPR	2168:18	2168:25	14	xpos < padding
FIELD	2168:18	2168:18	15	xpos
LEAF_NODE	2168:18	2168:18	16	xpos
REL_OPERATOR	2168:23	2168:23	15	<
LEAF_NODE	2168:23	2168:23	16	<
FIELD	2168:25	2168:25	15	padding
LEAF_NODE	2168:25	2168:25	16	padding
LEAF_NODE	2168:32	2168:32	13	;
FOR_EXPR	2168:34	2168:34	13	xpos ++
EXPR	2168:34	2168:34	14	xpos ++
FIELD	2168:34	2168:38	15	xpos ++
LEAF_NODE	2168:34	2168:34	16	xpos
LEAF_NODE	2168:38	2168:38	16	++
LEAF_NODE	2168:40	2168:40	13	)
STATEMENTS	2168:42	2171:3	13	
LEAF_NODE	2168:42	2168:42	14	{
STATEMENTS	2169:7	2170:7	14	
EXPR_STATEMENT	2169:7	2169:27	15	* outptr = outptr [ - 1 ] ;
EXPR	2169:7	2169:7	16	* outptr = outptr [ - 1 ]
ASSIGN	2169:7	2169:17	17	* outptr = outptr [ - 1 ]
LVAL	2169:7	2169:7	18	* outptr
UNARY_EXPR	2169:7	2169:8	19	* outptr
UNARY_OPERATOR	2169:7	2169:7	20	*
LEAF_NODE	2169:7	2169:7	21	*
FIELD	2169:8	2169:8	20	outptr
LEAF_NODE	2169:8	2169:8	21	outptr
ASSIGN_OP	2169:15	2169:15	18	=
LEAF_NODE	2169:15	2169:15	19	=
RVAL	2169:17	2169:17	18	outptr [ - 1 ]
FIELD	2169:17	2169:26	19	outptr [ - 1 ]
LEAF_NODE	2169:17	2169:17	20	outptr
LEAF_NODE	2169:23	2169:23	20	[
EXPR	2169:24	2169:24	20	- 1
UNARY_EXPR	2169:24	2169:25	21	- 1
UNARY_OPERATOR	2169:24	2169:24	22	-
LEAF_NODE	2169:24	2169:24	23	-
FIELD	2169:25	2169:25	22	1
LEAF_NODE	2169:25	2169:25	23	1
LEAF_NODE	2169:26	2169:26	20	]
LEAF_NODE	2169:27	2169:27	16	;
EXPR_STATEMENT	2170:7	2170:15	15	outptr ++ ;
EXPR	2170:7	2170:7	16	outptr ++
FIELD	2170:7	2170:13	17	outptr ++
LEAF_NODE	2170:7	2170:7	18	outptr
LEAF_NODE	2170:13	2170:13	18	++
LEAF_NODE	2170:15	2170:15	16	;
LEAF_NODE	2171:3	2171:3	14	}
EXPR_STATEMENT	2172:3	2172:23	12	clumpoffset += hsamp ;
EXPR	2172:3	2172:3	13	clumpoffset += hsamp
ASSIGN	2172:3	2172:18	14	clumpoffset += hsamp
LVAL	2172:3	2172:3	15	clumpoffset
FIELD	2172:3	2172:3	16	clumpoffset
LEAF_NODE	2172:3	2172:3	17	clumpoffset
ASSIGN_OP	2172:15	2172:15	15	+=
LEAF_NODE	2172:15	2172:15	16	+=
RVAL	2172:18	2172:18	15	hsamp
FIELD	2172:18	2172:18	16	hsamp
LEAF_NODE	2172:18	2172:18	17	hsamp
LEAF_NODE	2172:23	2172:23	13	;
LEAF_NODE	2173:6	2173:6	11	}
LEAF_NODE	2174:2	2174:2	8	}
EXPR_STATEMENT	2175:2	2175:17	6	sp -> scancount ++ ;
EXPR	2175:2	2175:2	7	sp -> scancount ++
FIELD	2175:2	2175:15	8	sp -> scancount ++
LEAF_NODE	2175:2	2175:2	9	sp
LEAF_NODE	2175:4	2175:4	9	->
LEAF_NODE	2175:6	2175:6	9	scancount
LEAF_NODE	2175:15	2175:15	9	++
LEAF_NODE	2175:17	2175:17	7	;
SELECTION	2176:2	2176:32	6	
KEYWORD	2176:2	2176:2	7	if
LEAF_NODE	2176:2	2176:2	8	if
LEAF_NODE	2176:5	2176:5	7	(
CONDITION	2176:6	2176:6	7	sp -> scancount >= DCTSIZE
EXPR	2176:6	2176:23	8	sp -> scancount >= DCTSIZE
FIELD	2176:6	2176:10	9	sp -> scancount
LEAF_NODE	2176:6	2176:6	10	sp
LEAF_NODE	2176:8	2176:8	10	->
LEAF_NODE	2176:10	2176:10	10	scancount
REL_OPERATOR	2176:20	2176:20	9	>=
LEAF_NODE	2176:20	2176:20	10	>=
FIELD	2176:23	2176:23	9	DCTSIZE
LEAF_NODE	2176:23	2176:23	10	DCTSIZE
LEAF_NODE	2176:30	2176:30	7	)
STATEMENTS	2176:32	2181:2	7	
LEAF_NODE	2176:32	2176:32	8	{
STATEMENTS	2177:3	2180:3	8	
SIMPLE_DECL	2177:3	2177:50	9	int n ; n = sp -> cinfo . c . max_v_samp_factor * DCTSIZE ;
VAR_DECL	2177:3	2177:7	10	int n ; n = sp -> cinfo . c . max_v_samp_factor * DCTSIZE
TYPE	2177:3	2177:3	11	int
TYPE_NAME	2177:3	2177:3	12	int
LEAF_NODE	2177:3	2177:3	13	int
NAME	2177:7	2177:7	11	n
LEAF_NODE	2177:7	2177:7	12	n
LEAF_NODE	0:0	0:0	11	;
INIT	2177:7	2177:7	11	n = sp -> cinfo . c . max_v_samp_factor * DCTSIZE
ASSIGN	2177:7	2177:11	12	n = sp -> cinfo . c . max_v_samp_factor * DCTSIZE
LVAL	2177:7	2177:7	13	n
NAME	2177:7	2177:7	14	n
LEAF_NODE	2177:7	2177:7	15	n
ASSIGN_OP	2177:9	2177:9	13	=
LEAF_NODE	2177:9	2177:9	14	=
RVAL	2177:11	2177:43	13	sp -> cinfo . c . max_v_samp_factor * DCTSIZE
FIELD	2177:11	2177:23	14	sp -> cinfo . c . max_v_samp_factor
LEAF_NODE	2177:11	2177:11	15	sp
LEAF_NODE	2177:13	2177:13	15	->
LEAF_NODE	2177:15	2177:15	15	cinfo
LEAF_NODE	2177:20	2177:20	15	.
LEAF_NODE	2177:21	2177:21	15	c
LEAF_NODE	2177:22	2177:22	15	.
LEAF_NODE	2177:23	2177:23	15	max_v_samp_factor
LEAF_NODE	2177:41	2177:41	14	*
FIELD	2177:43	2177:43	14	DCTSIZE
LEAF_NODE	2177:43	2177:43	15	DCTSIZE
LEAF_NODE	2177:50	2177:50	10	;
SELECTION	2178:3	2179:4	9	
KEYWORD	2178:3	2178:3	10	if
LEAF_NODE	2178:3	2178:3	11	if
LEAF_NODE	2178:6	2178:6	10	(
CONDITION	2178:7	2178:7	10	TIFFjpeg_write_raw_data ( sp , sp -> ds_buffer , n ) != n
EXPR	2178:7	2178:56	11	TIFFjpeg_write_raw_data ( sp , sp -> ds_buffer , n ) != n
FUNCTION_CALL	2178:7	2178:51	12	TIFFjpeg_write_raw_data ( sp , sp -> ds_buffer , n )
CALLEE	2178:7	2178:7	13	TIFFjpeg_write_raw_data
LEAF_NODE	2178:7	2178:7	14	TIFFjpeg_write_raw_data
LEAF_NODE	2178:30	2178:30	13	(
ARGUMENT	2178:31	2178:31	13	sp
FIELD	2178:31	2178:31	14	sp
LEAF_NODE	2178:31	2178:31	15	sp
LEAF_NODE	2178:33	2178:33	13	,
ARGUMENT	2178:35	2178:35	13	sp -> ds_buffer
FIELD	2178:35	2178:39	14	sp -> ds_buffer
LEAF_NODE	2178:35	2178:35	15	sp
LEAF_NODE	2178:37	2178:37	15	->
LEAF_NODE	2178:39	2178:39	15	ds_buffer
LEAF_NODE	2178:48	2178:48	13	,
ARGUMENT	2178:50	2178:50	13	n
FIELD	2178:50	2178:50	14	n
LEAF_NODE	2178:50	2178:50	15	n
LEAF_NODE	2178:51	2178:51	13	)
EQ_OPERATOR	2178:53	2178:53	12	!=
LEAF_NODE	2178:53	2178:53	13	!=
FIELD	2178:56	2178:56	12	n
LEAF_NODE	2178:56	2178:56	13	n
LEAF_NODE	2178:57	2178:57	10	)
STATEMENTS	2179:4	2179:4	10	
JUMP_STATEMENT	2179:4	2179:14	11	return ( 0 ) ;
KEYWORD	2179:4	2179:4	12	return
LEAF_NODE	2179:4	2179:4	13	return
DESTINATION	2179:11	2179:11	12	( 0 )
EXPR	2179:11	2179:13	13	( 0 )
LEAF_NODE	2179:11	2179:11	14	(
FIELD	2179:12	2179:12	14	0
LEAF_NODE	2179:12	2179:12	15	0
LEAF_NODE	2179:13	2179:13	14	)
LEAF_NODE	2179:14	2179:14	12	;
EXPR_STATEMENT	2180:3	2180:20	9	sp -> scancount = 0 ;
EXPR	2180:3	2180:3	10	sp -> scancount = 0
ASSIGN	2180:3	2180:19	11	sp -> scancount = 0
LVAL	2180:3	2180:3	12	sp -> scancount
FIELD	2180:3	2180:7	13	sp -> scancount
LEAF_NODE	2180:3	2180:3	14	sp
LEAF_NODE	2180:5	2180:5	14	->
LEAF_NODE	2180:7	2180:7	14	scancount
ASSIGN_OP	2180:17	2180:17	12	=
LEAF_NODE	2180:17	2180:17	13	=
RVAL	2180:19	2180:19	12	0
FIELD	2180:19	2180:19	13	0
LEAF_NODE	2180:19	2180:19	14	0
LEAF_NODE	2180:20	2180:20	10	;
LEAF_NODE	2181:2	2181:2	8	}
EXPR_STATEMENT	2182:2	2182:32	6	tif -> tif_row += sp -> v_sampling ;
EXPR	2182:2	2182:2	7	tif -> tif_row += sp -> v_sampling
ASSIGN	2182:2	2182:18	8	tif -> tif_row += sp -> v_sampling
LVAL	2182:2	2182:2	9	tif -> tif_row
FIELD	2182:2	2182:7	10	tif -> tif_row
LEAF_NODE	2182:2	2182:2	11	tif
LEAF_NODE	2182:5	2182:5	11	->
LEAF_NODE	2182:7	2182:7	11	tif_row
ASSIGN_OP	2182:15	2182:15	9	+=
LEAF_NODE	2182:15	2182:15	10	+=
RVAL	2182:18	2182:18	9	sp -> v_sampling
FIELD	2182:18	2182:22	10	sp -> v_sampling
LEAF_NODE	2182:18	2182:18	11	sp
LEAF_NODE	2182:20	2182:20	11	->
LEAF_NODE	2182:22	2182:22	11	v_sampling
LEAF_NODE	2182:32	2182:32	7	;
EXPR_STATEMENT	2183:2	2183:26	6	buf += bytesperclumpline ;
EXPR	2183:2	2183:2	7	buf += bytesperclumpline
ASSIGN	2183:2	2183:9	8	buf += bytesperclumpline
LVAL	2183:2	2183:2	9	buf
FIELD	2183:2	2183:2	10	buf
LEAF_NODE	2183:2	2183:2	11	buf
ASSIGN_OP	2183:6	2183:6	9	+=
LEAF_NODE	2183:6	2183:6	10	+=
RVAL	2183:9	2183:9	9	bytesperclumpline
FIELD	2183:9	2183:9	10	bytesperclumpline
LEAF_NODE	2183:9	2183:9	11	bytesperclumpline
LEAF_NODE	2183:26	2183:26	7	;
EXPR_STATEMENT	2184:2	2184:25	6	nrows -= sp -> v_sampling ;
EXPR	2184:2	2184:2	7	nrows -= sp -> v_sampling
ASSIGN	2184:2	2184:11	8	nrows -= sp -> v_sampling
LVAL	2184:2	2184:2	9	nrows
FIELD	2184:2	2184:2	10	nrows
LEAF_NODE	2184:2	2184:2	11	nrows
ASSIGN_OP	2184:8	2184:8	9	-=
LEAF_NODE	2184:8	2184:8	10	-=
RVAL	2184:11	2184:11	9	sp -> v_sampling
FIELD	2184:11	2184:15	10	sp -> v_sampling
LEAF_NODE	2184:11	2184:11	11	sp
LEAF_NODE	2184:13	2184:13	11	->
LEAF_NODE	2184:15	2184:15	11	v_sampling
LEAF_NODE	2184:25	2184:25	7	;
LEAF_NODE	2185:1	2185:1	5	}
JUMP_STATEMENT	2186:1	2186:11	3	return ( 1 ) ;
KEYWORD	2186:1	2186:1	4	return
LEAF_NODE	2186:1	2186:1	5	return
DESTINATION	2186:8	2186:8	4	( 1 )
EXPR	2186:8	2186:10	5	( 1 )
LEAF_NODE	2186:8	2186:8	6	(
FIELD	2186:9	2186:9	6	1
LEAF_NODE	2186:9	2186:9	7	1
LEAF_NODE	2186:10	2186:10	6	)
LEAF_NODE	2186:11	2186:11	4	;
LEAF_NODE	2187:0	2187:0	2	}
FUNCTION_DEF	2192:0	2225:0	1	
RETURN_TYPE	2192:0	2192:7	2	static int
LEAF_NODE	2192:0	2192:0	3	static
TYPE_NAME	2192:7	2192:7	3	int
LEAF_NODE	2192:7	2192:7	4	int
FUNCTION_NAME	2193:0	2193:0	2	JPEGPostEncode
LEAF_NODE	2193:0	2193:0	3	JPEGPostEncode
PARAMETER_LIST	2193:14	2193:24	2	( TIFF * tif )
LEAF_NODE	2193:14	2193:14	3	(
PARAMETER_DECL	2193:15	2193:21	3	TIFF * tif
TYPE	2193:15	2193:19	4	TIFF *
TYPE_NAME	2193:15	2193:15	5	TIFF
LEAF_NODE	2193:15	2193:15	6	TIFF
POINTER	2193:19	2193:19	5	*
LEAF_NODE	2193:19	2193:19	6	*
NAME	2193:21	2193:21	4	tif
LEAF_NODE	2193:21	2193:21	5	tif
LEAF_NODE	2193:24	2193:24	3	)
LEAF_NODE	2194:0	2194:0	2	{
STATEMENTS	2195:1	2224:1	2	
SIMPLE_DECL	2195:1	2195:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2195:1	2195:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2195:1	2195:11	5	JPEGState *
TYPE_NAME	2195:1	2195:1	6	JPEGState
LEAF_NODE	2195:1	2195:1	7	JPEGState
POINTER	2195:11	2195:11	6	*
LEAF_NODE	2195:11	2195:11	7	*
NAME	2195:12	2195:12	5	sp
LEAF_NODE	2195:12	2195:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2195:12	2195:12	5	sp = JState ( tif )
ASSIGN	2195:12	2195:17	6	sp = JState ( tif )
LVAL	2195:12	2195:12	7	sp
NAME	2195:12	2195:12	8	sp
LEAF_NODE	2195:12	2195:12	9	sp
ASSIGN_OP	2195:15	2195:15	7	=
LEAF_NODE	2195:15	2195:15	8	=
RVAL	2195:17	2195:17	7	JState ( tif )
FUNCTION_CALL	2195:17	2195:27	8	JState ( tif )
CALLEE	2195:17	2195:17	9	JState
LEAF_NODE	2195:17	2195:17	10	JState
LEAF_NODE	2195:23	2195:23	9	(
ARGUMENT	2195:24	2195:24	9	tif
FIELD	2195:24	2195:24	10	tif
LEAF_NODE	2195:24	2195:24	11	tif
LEAF_NODE	2195:27	2195:27	9	)
LEAF_NODE	2195:28	2195:28	4	;
SELECTION	2197:1	2197:24	3	
KEYWORD	2197:1	2197:1	4	if
LEAF_NODE	2197:1	2197:1	5	if
LEAF_NODE	2197:4	2197:4	4	(
CONDITION	2197:5	2197:5	4	sp -> scancount > 0
EXPR	2197:5	2197:21	5	sp -> scancount > 0
FIELD	2197:5	2197:9	6	sp -> scancount
LEAF_NODE	2197:5	2197:5	7	sp
LEAF_NODE	2197:7	2197:7	7	->
LEAF_NODE	2197:9	2197:9	7	scancount
REL_OPERATOR	2197:19	2197:19	6	>
LEAF_NODE	2197:19	2197:19	7	>
FIELD	2197:21	2197:21	6	0
LEAF_NODE	2197:21	2197:21	7	0
LEAF_NODE	2197:22	2197:22	4	)
STATEMENTS	2197:24	2222:1	4	
LEAF_NODE	2197:24	2197:24	5	{
STATEMENTS	2202:2	2220:2	5	
SIMPLE_DECL	2202:2	2202:17	6	int ci , int ypos , int n ;
INIT_DECL_LIST	2202:2	2202:2	7	int ci , int ypos , int n
VAR_DECL	2202:2	2202:6	8	int ci
TYPE	2202:2	2202:2	9	int
TYPE_NAME	2202:2	2202:2	10	int
LEAF_NODE	2202:2	2202:2	11	int
NAME	2202:6	2202:6	9	ci
LEAF_NODE	2202:6	2202:6	10	ci
LEAF_NODE	2202:8	2202:8	8	,
INIT_DECL_LIST	2202:2	2202:2	8	int ypos , int n
VAR_DECL	2202:2	2202:10	9	int ypos
TYPE	2202:2	2202:2	10	int
TYPE_NAME	2202:2	2202:2	11	int
LEAF_NODE	2202:2	2202:2	12	int
NAME	2202:10	2202:10	10	ypos
LEAF_NODE	2202:10	2202:10	11	ypos
LEAF_NODE	2202:14	2202:14	9	,
VAR_DECL	2202:2	2202:16	9	int n
TYPE	2202:2	2202:2	10	int
TYPE_NAME	2202:2	2202:2	11	int
LEAF_NODE	2202:2	2202:2	12	int
NAME	2202:16	2202:16	10	n
LEAF_NODE	2202:16	2202:16	11	n
LEAF_NODE	2202:17	2202:17	7	;
SIMPLE_DECL	2203:2	2203:30	6	jpeg_component_info * compptr ;
VAR_DECL	2203:2	2203:23	7	jpeg_component_info * compptr
TYPE	2203:2	2203:21	8	jpeg_component_info *
TYPE_NAME	2203:2	2203:2	9	jpeg_component_info
LEAF_NODE	2203:2	2203:2	10	jpeg_component_info
POINTER	2203:21	2203:21	9	*
LEAF_NODE	2203:21	2203:21	10	*
NAME	2203:23	2203:23	8	compptr
LEAF_NODE	2203:23	2203:23	9	compptr
LEAF_NODE	2203:30	2203:30	7	;
ITERATION	2205:2	2207:24	6	
KEYWORD	2205:2	2205:2	7	for
LEAF_NODE	2205:2	2205:2	8	for
LEAF_NODE	2205:6	2205:6	7	(
FOR_INIT	2205:7	2205:46	7	ci = 0 , compptr = sp -> cinfo . c . comp_info ;
EXPR	2205:7	2205:15	8	ci = 0 , compptr = sp -> cinfo . c . comp_info
ASSIGN	2205:7	2205:12	9	ci = 0
LVAL	2205:7	2205:7	10	ci
FIELD	2205:7	2205:7	11	ci
LEAF_NODE	2205:7	2205:7	12	ci
ASSIGN_OP	2205:10	2205:10	10	=
LEAF_NODE	2205:10	2205:10	11	=
RVAL	2205:12	2205:12	10	0
FIELD	2205:12	2205:12	11	0
LEAF_NODE	2205:12	2205:12	12	0
LEAF_NODE	2205:13	2205:13	9	,
ASSIGN	2205:15	2205:25	9	compptr = sp -> cinfo . c . comp_info
LVAL	2205:15	2205:15	10	compptr
FIELD	2205:15	2205:15	11	compptr
LEAF_NODE	2205:15	2205:15	12	compptr
ASSIGN_OP	2205:23	2205:23	10	=
LEAF_NODE	2205:23	2205:23	11	=
RVAL	2205:25	2205:25	10	sp -> cinfo . c . comp_info
FIELD	2205:25	2205:37	11	sp -> cinfo . c . comp_info
LEAF_NODE	2205:25	2205:25	12	sp
LEAF_NODE	2205:27	2205:27	12	->
LEAF_NODE	2205:29	2205:29	12	cinfo
LEAF_NODE	2205:34	2205:34	12	.
LEAF_NODE	2205:35	2205:35	12	c
LEAF_NODE	2205:36	2205:36	12	.
LEAF_NODE	2205:37	2205:37	12	comp_info
LEAF_NODE	2205:46	2205:46	8	;
CONDITION	2206:7	2206:7	7	ci < sp -> cinfo . c . num_components
EXPR	2206:7	2206:12	8	ci < sp -> cinfo . c . num_components
FIELD	2206:7	2206:7	9	ci
LEAF_NODE	2206:7	2206:7	10	ci
REL_OPERATOR	2206:10	2206:10	9	<
LEAF_NODE	2206:10	2206:10	10	<
FIELD	2206:12	2206:24	9	sp -> cinfo . c . num_components
LEAF_NODE	2206:12	2206:12	10	sp
LEAF_NODE	2206:14	2206:14	10	->
LEAF_NODE	2206:16	2206:16	10	cinfo
LEAF_NODE	2206:21	2206:21	10	.
LEAF_NODE	2206:22	2206:22	10	c
LEAF_NODE	2206:23	2206:23	10	.
LEAF_NODE	2206:24	2206:24	10	num_components
LEAF_NODE	2206:38	2206:38	7	;
FOR_EXPR	2207:7	2207:7	7	ci ++ , compptr ++
EXPR	2207:7	2207:13	8	ci ++ , compptr ++
FIELD	2207:7	2207:9	9	ci ++
LEAF_NODE	2207:7	2207:7	10	ci
LEAF_NODE	2207:9	2207:9	10	++
LEAF_NODE	2207:11	2207:11	9	,
FIELD	2207:13	2207:20	9	compptr ++
LEAF_NODE	2207:13	2207:13	10	compptr
LEAF_NODE	2207:20	2207:20	10	++
LEAF_NODE	2207:22	2207:22	7	)
STATEMENTS	2207:24	2218:2	7	
LEAF_NODE	2207:24	2207:24	8	{
STATEMENTS	2208:3	2211:3	8	
SIMPLE_DECL	2208:3	2208:37	9	int vsamp ; vsamp = compptr -> v_samp_factor ;
VAR_DECL	2208:3	2208:7	10	int vsamp ; vsamp = compptr -> v_samp_factor
TYPE	2208:3	2208:3	11	int
TYPE_NAME	2208:3	2208:3	12	int
LEAF_NODE	2208:3	2208:3	13	int
NAME	2208:7	2208:7	11	vsamp
LEAF_NODE	2208:7	2208:7	12	vsamp
LEAF_NODE	0:0	0:0	11	;
INIT	2208:7	2208:7	11	vsamp = compptr -> v_samp_factor
ASSIGN	2208:7	2208:15	12	vsamp = compptr -> v_samp_factor
LVAL	2208:7	2208:7	13	vsamp
NAME	2208:7	2208:7	14	vsamp
LEAF_NODE	2208:7	2208:7	15	vsamp
ASSIGN_OP	2208:13	2208:13	13	=
LEAF_NODE	2208:13	2208:13	14	=
RVAL	2208:15	2208:15	13	compptr -> v_samp_factor
FIELD	2208:15	2208:24	14	compptr -> v_samp_factor
LEAF_NODE	2208:15	2208:15	15	compptr
LEAF_NODE	2208:22	2208:22	15	->
LEAF_NODE	2208:24	2208:24	15	v_samp_factor
LEAF_NODE	2208:37	2208:37	10	;
LEAF_NODE	2209:3	2209:3	9	tmsize_t
LEAF_NODE	2209:12	2209:12	9	row_width
LEAF_NODE	2209:22	2209:22	9	=
LEAF_NODE	2209:24	2209:24	9	compptr
LEAF_NODE	2209:31	2209:31	9	->
LEAF_NODE	2209:33	2209:33	9	width_in_blocks
EXPR_STATEMENT	2209:49	2210:21	9	* DCTSIZE * sizeof ( JSAMPLE ) ;
EXPR	2209:49	2210:6	10	* DCTSIZE * sizeof ( JSAMPLE )
UNARY_EXPR	2209:49	2209:51	11	* DCTSIZE
UNARY_OPERATOR	2209:49	2209:49	12	*
LEAF_NODE	2209:49	2209:49	13	*
FIELD	2209:51	2209:51	12	DCTSIZE
LEAF_NODE	2209:51	2209:51	13	DCTSIZE
LEAF_NODE	2210:4	2210:4	11	*
FUNCTION_CALL	2210:6	2210:20	11	sizeof ( JSAMPLE )
CALLEE	2210:6	2210:6	12	sizeof
LEAF_NODE	2210:6	2210:6	13	sizeof
LEAF_NODE	2210:12	2210:12	12	(
ARGUMENT	2210:13	2210:13	12	JSAMPLE
FIELD	2210:13	2210:13	13	JSAMPLE
LEAF_NODE	2210:13	2210:13	14	JSAMPLE
LEAF_NODE	2210:20	2210:20	12	)
LEAF_NODE	2210:21	2210:21	10	;
ITERATION	2211:3	2212:40	9	
KEYWORD	2211:3	2211:3	10	for
LEAF_NODE	2211:3	2211:3	11	for
LEAF_NODE	2211:7	2211:7	10	(
FOR_INIT	2211:8	2211:36	10	ypos = sp -> scancount * vsamp ;
EXPR	2211:8	2211:8	11	ypos = sp -> scancount * vsamp
ASSIGN	2211:8	2211:15	12	ypos = sp -> scancount * vsamp
LVAL	2211:8	2211:8	13	ypos
FIELD	2211:8	2211:8	14	ypos
LEAF_NODE	2211:8	2211:8	15	ypos
ASSIGN_OP	2211:13	2211:13	13	=
LEAF_NODE	2211:13	2211:13	14	=
RVAL	2211:15	2211:31	13	sp -> scancount * vsamp
FIELD	2211:15	2211:19	14	sp -> scancount
LEAF_NODE	2211:15	2211:15	15	sp
LEAF_NODE	2211:17	2211:17	15	->
LEAF_NODE	2211:19	2211:19	15	scancount
LEAF_NODE	2211:29	2211:29	14	*
FIELD	2211:31	2211:31	14	vsamp
LEAF_NODE	2211:31	2211:31	15	vsamp
LEAF_NODE	2211:36	2211:36	11	;
CONDITION	2212:8	2212:8	10	ypos < DCTSIZE * vsamp
EXPR	2212:8	2212:25	11	ypos < DCTSIZE * vsamp
FIELD	2212:8	2212:8	12	ypos
LEAF_NODE	2212:8	2212:8	13	ypos
REL_OPERATOR	2212:13	2212:13	12	<
LEAF_NODE	2212:13	2212:13	13	<
FIELD	2212:15	2212:15	12	DCTSIZE
LEAF_NODE	2212:15	2212:15	13	DCTSIZE
LEAF_NODE	2212:23	2212:23	12	*
FIELD	2212:25	2212:25	12	vsamp
LEAF_NODE	2212:25	2212:25	13	vsamp
LEAF_NODE	2212:30	2212:30	10	;
FOR_EXPR	2212:32	2212:32	10	ypos ++
EXPR	2212:32	2212:32	11	ypos ++
FIELD	2212:32	2212:36	12	ypos ++
LEAF_NODE	2212:32	2212:32	13	ypos
LEAF_NODE	2212:36	2212:36	13	++
LEAF_NODE	2212:38	2212:38	10	)
STATEMENTS	2212:40	2217:3	10	
LEAF_NODE	2212:40	2212:40	11	{
STATEMENTS	2213:4	2213:4	11	
EXPR_STATEMENT	2213:4	2215:19	12	_TIFFmemcpy ( ( void * ) sp -> ds_buffer [ ci ] [ ypos ] , ( void * ) sp -> ds_buffer [ ci ] [ ypos - 1 ] , row_width ) ;
EXPR	2213:4	2213:4	13	_TIFFmemcpy ( ( void * ) sp -> ds_buffer [ ci ] [ ypos ] , ( void * ) sp -> ds_buffer [ ci ] [ ypos - 1 ] , row_width )
FUNCTION_CALL	2213:4	2215:18	14	_TIFFmemcpy ( ( void * ) sp -> ds_buffer [ ci ] [ ypos ] , ( void * ) sp -> ds_buffer [ ci ] [ ypos - 1 ] , row_width )
CALLEE	2213:4	2213:4	15	_TIFFmemcpy
LEAF_NODE	2213:4	2213:4	16	_TIFFmemcpy
LEAF_NODE	2213:15	2213:15	15	(
ARGUMENT	2213:16	2213:23	15	( void * ) sp -> ds_buffer [ ci ] [ ypos ]
LEAF_NODE	2213:16	2213:16	16	(
TYPE_NAME	2213:17	2213:17	16	void
LEAF_NODE	2213:17	2213:17	17	void
LEAF_NODE	2213:21	2213:21	16	*
LEAF_NODE	2213:22	2213:22	16	)
FIELD	2213:23	2213:45	16	sp -> ds_buffer [ ci ] [ ypos ]
LEAF_NODE	2213:23	2213:23	17	sp
LEAF_NODE	2213:25	2213:25	17	->
LEAF_NODE	2213:27	2213:27	17	ds_buffer
LEAF_NODE	2213:36	2213:36	17	[
EXPR	2213:37	2213:37	17	ci
FIELD	2213:37	2213:37	18	ci
LEAF_NODE	2213:37	2213:37	19	ci
LEAF_NODE	2213:39	2213:39	17	]
LEAF_NODE	2213:40	2213:40	17	[
EXPR	2213:41	2213:41	17	ypos
FIELD	2213:41	2213:41	18	ypos
LEAF_NODE	2213:41	2213:41	19	ypos
LEAF_NODE	2213:45	2213:45	17	]
LEAF_NODE	2213:46	2213:46	15	,
ARGUMENT	2214:9	2214:16	15	( void * ) sp -> ds_buffer [ ci ] [ ypos - 1 ]
LEAF_NODE	2214:9	2214:9	16	(
TYPE_NAME	2214:10	2214:10	16	void
LEAF_NODE	2214:10	2214:10	17	void
LEAF_NODE	2214:14	2214:14	16	*
LEAF_NODE	2214:15	2214:15	16	)
FIELD	2214:16	2214:40	16	sp -> ds_buffer [ ci ] [ ypos - 1 ]
LEAF_NODE	2214:16	2214:16	17	sp
LEAF_NODE	2214:18	2214:18	17	->
LEAF_NODE	2214:20	2214:20	17	ds_buffer
LEAF_NODE	2214:29	2214:29	17	[
EXPR	2214:30	2214:30	17	ci
FIELD	2214:30	2214:30	18	ci
LEAF_NODE	2214:30	2214:30	19	ci
LEAF_NODE	2214:32	2214:32	17	]
LEAF_NODE	2214:33	2214:33	17	[
EXPR	2214:34	2214:39	17	ypos - 1
FIELD	2214:34	2214:34	18	ypos
LEAF_NODE	2214:34	2214:34	19	ypos
LEAF_NODE	2214:38	2214:38	18	-
FIELD	2214:39	2214:39	18	1
LEAF_NODE	2214:39	2214:39	19	1
LEAF_NODE	2214:40	2214:40	17	]
LEAF_NODE	2214:41	2214:41	15	,
ARGUMENT	2215:9	2215:9	15	row_width
FIELD	2215:9	2215:9	16	row_width
LEAF_NODE	2215:9	2215:9	17	row_width
LEAF_NODE	2215:18	2215:18	15	)
LEAF_NODE	2215:19	2215:19	13	;
LEAF_NODE	2217:3	2217:3	11	}
LEAF_NODE	2218:2	2218:2	8	}
EXPR_STATEMENT	2219:2	2219:45	6	n = sp -> cinfo . c . max_v_samp_factor * DCTSIZE ;
EXPR	2219:2	2219:2	7	n = sp -> cinfo . c . max_v_samp_factor * DCTSIZE
ASSIGN	2219:2	2219:6	8	n = sp -> cinfo . c . max_v_samp_factor * DCTSIZE
LVAL	2219:2	2219:2	9	n
FIELD	2219:2	2219:2	10	n
LEAF_NODE	2219:2	2219:2	11	n
ASSIGN_OP	2219:4	2219:4	9	=
LEAF_NODE	2219:4	2219:4	10	=
RVAL	2219:6	2219:38	9	sp -> cinfo . c . max_v_samp_factor * DCTSIZE
FIELD	2219:6	2219:18	10	sp -> cinfo . c . max_v_samp_factor
LEAF_NODE	2219:6	2219:6	11	sp
LEAF_NODE	2219:8	2219:8	11	->
LEAF_NODE	2219:10	2219:10	11	cinfo
LEAF_NODE	2219:15	2219:15	11	.
LEAF_NODE	2219:16	2219:16	11	c
LEAF_NODE	2219:17	2219:17	11	.
LEAF_NODE	2219:18	2219:18	11	max_v_samp_factor
LEAF_NODE	2219:36	2219:36	10	*
FIELD	2219:38	2219:38	10	DCTSIZE
LEAF_NODE	2219:38	2219:38	11	DCTSIZE
LEAF_NODE	2219:45	2219:45	7	;
SELECTION	2220:2	2221:3	6	
KEYWORD	2220:2	2220:2	7	if
LEAF_NODE	2220:2	2220:2	8	if
LEAF_NODE	2220:5	2220:5	7	(
CONDITION	2220:6	2220:6	7	TIFFjpeg_write_raw_data ( sp , sp -> ds_buffer , n ) != n
EXPR	2220:6	2220:55	8	TIFFjpeg_write_raw_data ( sp , sp -> ds_buffer , n ) != n
FUNCTION_CALL	2220:6	2220:50	9	TIFFjpeg_write_raw_data ( sp , sp -> ds_buffer , n )
CALLEE	2220:6	2220:6	10	TIFFjpeg_write_raw_data
LEAF_NODE	2220:6	2220:6	11	TIFFjpeg_write_raw_data
LEAF_NODE	2220:29	2220:29	10	(
ARGUMENT	2220:30	2220:30	10	sp
FIELD	2220:30	2220:30	11	sp
LEAF_NODE	2220:30	2220:30	12	sp
LEAF_NODE	2220:32	2220:32	10	,
ARGUMENT	2220:34	2220:34	10	sp -> ds_buffer
FIELD	2220:34	2220:38	11	sp -> ds_buffer
LEAF_NODE	2220:34	2220:34	12	sp
LEAF_NODE	2220:36	2220:36	12	->
LEAF_NODE	2220:38	2220:38	12	ds_buffer
LEAF_NODE	2220:47	2220:47	10	,
ARGUMENT	2220:49	2220:49	10	n
FIELD	2220:49	2220:49	11	n
LEAF_NODE	2220:49	2220:49	12	n
LEAF_NODE	2220:50	2220:50	10	)
EQ_OPERATOR	2220:52	2220:52	9	!=
LEAF_NODE	2220:52	2220:52	10	!=
FIELD	2220:55	2220:55	9	n
LEAF_NODE	2220:55	2220:55	10	n
LEAF_NODE	2220:56	2220:56	7	)
STATEMENTS	2221:3	2221:3	7	
JUMP_STATEMENT	2221:3	2221:13	8	return ( 0 ) ;
KEYWORD	2221:3	2221:3	9	return
LEAF_NODE	2221:3	2221:3	10	return
DESTINATION	2221:10	2221:10	9	( 0 )
EXPR	2221:10	2221:12	10	( 0 )
LEAF_NODE	2221:10	2221:10	11	(
FIELD	2221:11	2221:11	11	0
LEAF_NODE	2221:11	2221:11	12	0
LEAF_NODE	2221:12	2221:12	11	)
LEAF_NODE	2221:13	2221:13	9	;
LEAF_NODE	2222:1	2222:1	5	}
JUMP_STATEMENT	2224:1	2224:47	3	return ( TIFFjpeg_finish_compress ( JState ( tif ) ) ) ;
KEYWORD	2224:1	2224:1	4	return
LEAF_NODE	2224:1	2224:1	5	return
DESTINATION	2224:8	2224:8	4	( TIFFjpeg_finish_compress ( JState ( tif ) ) )
EXPR	2224:8	2224:46	5	( TIFFjpeg_finish_compress ( JState ( tif ) ) )
LEAF_NODE	2224:8	2224:8	6	(
FUNCTION_CALL	2224:9	2224:45	6	TIFFjpeg_finish_compress ( JState ( tif ) )
CALLEE	2224:9	2224:9	7	TIFFjpeg_finish_compress
LEAF_NODE	2224:9	2224:9	8	TIFFjpeg_finish_compress
LEAF_NODE	2224:33	2224:33	7	(
ARGUMENT	2224:34	2224:34	7	JState ( tif )
FUNCTION_CALL	2224:34	2224:44	8	JState ( tif )
CALLEE	2224:34	2224:34	9	JState
LEAF_NODE	2224:34	2224:34	10	JState
LEAF_NODE	2224:40	2224:40	9	(
ARGUMENT	2224:41	2224:41	9	tif
FIELD	2224:41	2224:41	10	tif
LEAF_NODE	2224:41	2224:41	11	tif
LEAF_NODE	2224:44	2224:44	9	)
LEAF_NODE	2224:45	2224:45	7	)
LEAF_NODE	2224:46	2224:46	6	)
LEAF_NODE	2224:47	2224:47	4	;
LEAF_NODE	2225:0	2225:0	2	}
FUNCTION_DEF	2227:0	2245:0	1	
RETURN_TYPE	2227:0	2227:7	2	static void
LEAF_NODE	2227:0	2227:0	3	static
TYPE_NAME	2227:7	2227:7	3	void
LEAF_NODE	2227:7	2227:7	4	void
FUNCTION_NAME	2228:0	2228:0	2	JPEGCleanup
LEAF_NODE	2228:0	2228:0	3	JPEGCleanup
PARAMETER_LIST	2228:11	2228:21	2	( TIFF * tif )
LEAF_NODE	2228:11	2228:11	3	(
PARAMETER_DECL	2228:12	2228:18	3	TIFF * tif
TYPE	2228:12	2228:16	4	TIFF *
TYPE_NAME	2228:12	2228:12	5	TIFF
LEAF_NODE	2228:12	2228:12	6	TIFF
POINTER	2228:16	2228:16	5	*
LEAF_NODE	2228:16	2228:16	6	*
NAME	2228:18	2228:18	4	tif
LEAF_NODE	2228:18	2228:18	5	tif
LEAF_NODE	2228:21	2228:21	3	)
LEAF_NODE	2229:0	2229:0	2	{
STATEMENTS	2230:1	2244:1	2	
SIMPLE_DECL	2230:1	2230:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2230:1	2230:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2230:1	2230:11	5	JPEGState *
TYPE_NAME	2230:1	2230:1	6	JPEGState
LEAF_NODE	2230:1	2230:1	7	JPEGState
POINTER	2230:11	2230:11	6	*
LEAF_NODE	2230:11	2230:11	7	*
NAME	2230:12	2230:12	5	sp
LEAF_NODE	2230:12	2230:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2230:12	2230:12	5	sp = JState ( tif )
ASSIGN	2230:12	2230:17	6	sp = JState ( tif )
LVAL	2230:12	2230:12	7	sp
NAME	2230:12	2230:12	8	sp
LEAF_NODE	2230:12	2230:12	9	sp
ASSIGN_OP	2230:15	2230:15	7	=
LEAF_NODE	2230:15	2230:15	8	=
RVAL	2230:17	2230:17	7	JState ( tif )
FUNCTION_CALL	2230:17	2230:27	8	JState ( tif )
CALLEE	2230:17	2230:17	9	JState
LEAF_NODE	2230:17	2230:17	10	JState
LEAF_NODE	2230:23	2230:23	9	(
ARGUMENT	2230:24	2230:24	9	tif
FIELD	2230:24	2230:24	10	tif
LEAF_NODE	2230:24	2230:24	11	tif
LEAF_NODE	2230:27	2230:27	9	)
LEAF_NODE	2230:28	2230:28	4	;
EXPR_STATEMENT	2232:1	2232:16	3	assert ( sp != 0 ) ;
EXPR	2232:1	2232:1	4	assert ( sp != 0 )
FUNCTION_CALL	2232:1	2232:15	5	assert ( sp != 0 )
CALLEE	2232:1	2232:1	6	assert
LEAF_NODE	2232:1	2232:1	7	assert
LEAF_NODE	2232:7	2232:7	6	(
ARGUMENT	2232:8	2232:14	6	sp != 0
FIELD	2232:8	2232:8	7	sp
LEAF_NODE	2232:8	2232:8	8	sp
EQ_OPERATOR	2232:11	2232:11	7	!=
LEAF_NODE	2232:11	2232:11	8	!=
FIELD	2232:14	2232:14	7	0
LEAF_NODE	2232:14	2232:14	8	0
LEAF_NODE	2232:15	2232:15	6	)
LEAF_NODE	2232:16	2232:16	4	;
EXPR_STATEMENT	2234:1	2234:47	3	tif -> tif_tagmethods . vgetfield = sp -> vgetparent ;
EXPR	2234:1	2234:1	4	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
ASSIGN	2234:1	2234:33	5	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
LVAL	2234:1	2234:1	6	tif -> tif_tagmethods . vgetfield
FIELD	2234:1	2234:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	2234:1	2234:1	8	tif
LEAF_NODE	2234:4	2234:4	8	->
LEAF_NODE	2234:6	2234:6	8	tif_tagmethods
LEAF_NODE	2234:20	2234:20	8	.
LEAF_NODE	2234:21	2234:21	8	vgetfield
ASSIGN_OP	2234:31	2234:31	6	=
LEAF_NODE	2234:31	2234:31	7	=
RVAL	2234:33	2234:33	6	sp -> vgetparent
FIELD	2234:33	2234:37	7	sp -> vgetparent
LEAF_NODE	2234:33	2234:33	8	sp
LEAF_NODE	2234:35	2234:35	8	->
LEAF_NODE	2234:37	2234:37	8	vgetparent
LEAF_NODE	2234:47	2234:47	4	;
EXPR_STATEMENT	2235:1	2235:47	3	tif -> tif_tagmethods . vsetfield = sp -> vsetparent ;
EXPR	2235:1	2235:1	4	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
ASSIGN	2235:1	2235:33	5	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
LVAL	2235:1	2235:1	6	tif -> tif_tagmethods . vsetfield
FIELD	2235:1	2235:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	2235:1	2235:1	8	tif
LEAF_NODE	2235:4	2235:4	8	->
LEAF_NODE	2235:6	2235:6	8	tif_tagmethods
LEAF_NODE	2235:20	2235:20	8	.
LEAF_NODE	2235:21	2235:21	8	vsetfield
ASSIGN_OP	2235:31	2235:31	6	=
LEAF_NODE	2235:31	2235:31	7	=
RVAL	2235:33	2235:33	6	sp -> vsetparent
FIELD	2235:33	2235:37	7	sp -> vsetparent
LEAF_NODE	2235:33	2235:33	8	sp
LEAF_NODE	2235:35	2235:35	8	->
LEAF_NODE	2235:37	2235:37	8	vsetparent
LEAF_NODE	2235:47	2235:47	4	;
EXPR_STATEMENT	2236:1	2236:44	3	tif -> tif_tagmethods . printdir = sp -> printdir ;
EXPR	2236:1	2236:1	4	tif -> tif_tagmethods . printdir = sp -> printdir
ASSIGN	2236:1	2236:32	5	tif -> tif_tagmethods . printdir = sp -> printdir
LVAL	2236:1	2236:1	6	tif -> tif_tagmethods . printdir
FIELD	2236:1	2236:21	7	tif -> tif_tagmethods . printdir
LEAF_NODE	2236:1	2236:1	8	tif
LEAF_NODE	2236:4	2236:4	8	->
LEAF_NODE	2236:6	2236:6	8	tif_tagmethods
LEAF_NODE	2236:20	2236:20	8	.
LEAF_NODE	2236:21	2236:21	8	printdir
ASSIGN_OP	2236:30	2236:30	6	=
LEAF_NODE	2236:30	2236:30	7	=
RVAL	2236:32	2236:32	6	sp -> printdir
FIELD	2236:32	2236:36	7	sp -> printdir
LEAF_NODE	2236:32	2236:32	8	sp
LEAF_NODE	2236:34	2236:34	8	->
LEAF_NODE	2236:36	2236:36	8	printdir
LEAF_NODE	2236:44	2236:44	4	;
SELECTION	2237:8	2238:16	3	
KEYWORD	2237:8	2237:8	4	if
LEAF_NODE	2237:8	2237:8	5	if
LEAF_NODE	2237:10	2237:10	4	(
CONDITION	2237:12	2237:12	4	sp -> cinfo_initialized
EXPR	2237:12	2237:12	5	sp -> cinfo_initialized
FIELD	2237:12	2237:16	6	sp -> cinfo_initialized
LEAF_NODE	2237:12	2237:12	7	sp
LEAF_NODE	2237:14	2237:14	7	->
LEAF_NODE	2237:16	2237:16	7	cinfo_initialized
LEAF_NODE	2237:34	2237:34	4	)
STATEMENTS	2238:16	2238:16	4	
EXPR_STATEMENT	2238:16	2238:36	5	TIFFjpeg_destroy ( sp ) ;
EXPR	2238:16	2238:16	6	TIFFjpeg_destroy ( sp )
FUNCTION_CALL	2238:16	2238:35	7	TIFFjpeg_destroy ( sp )
CALLEE	2238:16	2238:16	8	TIFFjpeg_destroy
LEAF_NODE	2238:16	2238:16	9	TIFFjpeg_destroy
LEAF_NODE	2238:32	2238:32	8	(
ARGUMENT	2238:33	2238:33	8	sp
FIELD	2238:33	2238:33	9	sp
LEAF_NODE	2238:33	2238:33	10	sp
LEAF_NODE	2238:35	2238:35	8	)
LEAF_NODE	2238:36	2238:36	6	;
SELECTION	2239:8	2240:16	3	
KEYWORD	2239:8	2239:8	4	if
LEAF_NODE	2239:8	2239:8	5	if
LEAF_NODE	2239:11	2239:11	4	(
CONDITION	2239:12	2239:12	4	sp -> jpegtables
EXPR	2239:12	2239:12	5	sp -> jpegtables
FIELD	2239:12	2239:16	6	sp -> jpegtables
LEAF_NODE	2239:12	2239:12	7	sp
LEAF_NODE	2239:14	2239:14	7	->
LEAF_NODE	2239:16	2239:16	7	jpegtables
LEAF_NODE	2239:26	2239:26	4	)
STATEMENTS	2240:16	2240:16	4	
EXPR_STATEMENT	2240:16	2240:41	5	_TIFFfree ( sp -> jpegtables ) ;
EXPR	2240:16	2240:16	6	_TIFFfree ( sp -> jpegtables )
FUNCTION_CALL	2240:16	2240:40	7	_TIFFfree ( sp -> jpegtables )
CALLEE	2240:16	2240:16	8	_TIFFfree
LEAF_NODE	2240:16	2240:16	9	_TIFFfree
LEAF_NODE	2240:25	2240:25	8	(
ARGUMENT	2240:26	2240:26	8	sp -> jpegtables
FIELD	2240:26	2240:30	9	sp -> jpegtables
LEAF_NODE	2240:26	2240:26	10	sp
LEAF_NODE	2240:28	2240:28	10	->
LEAF_NODE	2240:30	2240:30	10	jpegtables
LEAF_NODE	2240:40	2240:40	8	)
LEAF_NODE	2240:41	2240:41	6	;
EXPR_STATEMENT	2241:1	2241:25	3	_TIFFfree ( tif -> tif_data ) ;
EXPR	2241:1	2241:1	4	_TIFFfree ( tif -> tif_data )
FUNCTION_CALL	2241:1	2241:24	5	_TIFFfree ( tif -> tif_data )
CALLEE	2241:1	2241:1	6	_TIFFfree
LEAF_NODE	2241:1	2241:1	7	_TIFFfree
LEAF_NODE	2241:10	2241:10	6	(
ARGUMENT	2241:11	2241:11	6	tif -> tif_data
FIELD	2241:11	2241:16	7	tif -> tif_data
LEAF_NODE	2241:11	2241:11	8	tif
LEAF_NODE	2241:14	2241:14	8	->
LEAF_NODE	2241:16	2241:16	8	tif_data
LEAF_NODE	2241:24	2241:24	6	)
LEAF_NODE	2241:25	2241:25	4	;
EXPR_STATEMENT	2242:1	2242:21	3	tif -> tif_data = NULL ;
EXPR	2242:1	2242:1	4	tif -> tif_data = NULL
ASSIGN	2242:1	2242:17	5	tif -> tif_data = NULL
LVAL	2242:1	2242:1	6	tif -> tif_data
FIELD	2242:1	2242:6	7	tif -> tif_data
LEAF_NODE	2242:1	2242:1	8	tif
LEAF_NODE	2242:4	2242:4	8	->
LEAF_NODE	2242:6	2242:6	8	tif_data
ASSIGN_OP	2242:15	2242:15	6	=
LEAF_NODE	2242:15	2242:15	7	=
RVAL	2242:17	2242:17	6	NULL
FIELD	2242:17	2242:17	7	NULL
LEAF_NODE	2242:17	2242:17	8	NULL
LEAF_NODE	2242:21	2242:21	4	;
EXPR_STATEMENT	2244:1	2244:37	3	_TIFFSetDefaultCompressionState ( tif ) ;
EXPR	2244:1	2244:1	4	_TIFFSetDefaultCompressionState ( tif )
FUNCTION_CALL	2244:1	2244:36	5	_TIFFSetDefaultCompressionState ( tif )
CALLEE	2244:1	2244:1	6	_TIFFSetDefaultCompressionState
LEAF_NODE	2244:1	2244:1	7	_TIFFSetDefaultCompressionState
LEAF_NODE	2244:32	2244:32	6	(
ARGUMENT	2244:33	2244:33	6	tif
FIELD	2244:33	2244:33	7	tif
LEAF_NODE	2244:33	2244:33	8	tif
LEAF_NODE	2244:36	2244:36	6	)
LEAF_NODE	2244:37	2244:37	4	;
LEAF_NODE	2245:0	2245:0	2	}
FUNCTION_DEF	2247:0	2280:0	1	
RETURN_TYPE	2247:0	2247:7	2	static void
LEAF_NODE	2247:0	2247:0	3	static
TYPE_NAME	2247:7	2247:7	3	void
LEAF_NODE	2247:7	2247:7	4	void
FUNCTION_NAME	2248:0	2248:0	2	JPEGResetUpsampled
LEAF_NODE	2248:0	2248:0	3	JPEGResetUpsampled
PARAMETER_LIST	2248:18	2248:30	2	( TIFF * tif )
LEAF_NODE	2248:18	2248:18	3	(
PARAMETER_DECL	2248:20	2248:26	3	TIFF * tif
TYPE	2248:20	2248:24	4	TIFF *
TYPE_NAME	2248:20	2248:20	5	TIFF
LEAF_NODE	2248:20	2248:20	6	TIFF
POINTER	2248:24	2248:24	5	*
LEAF_NODE	2248:24	2248:24	6	*
NAME	2248:26	2248:26	4	tif
LEAF_NODE	2248:26	2248:26	5	tif
LEAF_NODE	2248:30	2248:30	3	)
LEAF_NODE	2249:0	2249:0	2	{
STATEMENTS	2250:1	2278:8	2	
SIMPLE_DECL	2250:1	2250:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2250:1	2250:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2250:1	2250:10	5	JPEGState *
TYPE_NAME	2250:1	2250:1	6	JPEGState
LEAF_NODE	2250:1	2250:1	7	JPEGState
POINTER	2250:10	2250:10	6	*
LEAF_NODE	2250:10	2250:10	7	*
NAME	2250:12	2250:12	5	sp
LEAF_NODE	2250:12	2250:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2250:12	2250:12	5	sp = JState ( tif )
ASSIGN	2250:12	2250:17	6	sp = JState ( tif )
LVAL	2250:12	2250:12	7	sp
NAME	2250:12	2250:12	8	sp
LEAF_NODE	2250:12	2250:12	9	sp
ASSIGN_OP	2250:15	2250:15	7	=
LEAF_NODE	2250:15	2250:15	8	=
RVAL	2250:17	2250:17	7	JState ( tif )
FUNCTION_CALL	2250:17	2250:27	8	JState ( tif )
CALLEE	2250:17	2250:17	9	JState
LEAF_NODE	2250:17	2250:17	10	JState
LEAF_NODE	2250:23	2250:23	9	(
ARGUMENT	2250:24	2250:24	9	tif
FIELD	2250:24	2250:24	10	tif
LEAF_NODE	2250:24	2250:24	11	tif
LEAF_NODE	2250:27	2250:27	9	)
LEAF_NODE	2250:28	2250:28	4	;
SIMPLE_DECL	2251:1	2251:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	2251:1	2251:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	2251:1	2251:14	5	TIFFDirectory *
TYPE_NAME	2251:1	2251:1	6	TIFFDirectory
LEAF_NODE	2251:1	2251:1	7	TIFFDirectory
POINTER	2251:14	2251:14	6	*
LEAF_NODE	2251:14	2251:14	7	*
NAME	2251:16	2251:16	5	td
LEAF_NODE	2251:16	2251:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	2251:16	2251:16	5	td = & tif -> tif_dir
ASSIGN	2251:16	2251:21	6	td = & tif -> tif_dir
LVAL	2251:16	2251:16	7	td
NAME	2251:16	2251:16	8	td
LEAF_NODE	2251:16	2251:16	9	td
ASSIGN_OP	2251:19	2251:19	7	=
LEAF_NODE	2251:19	2251:19	8	=
RVAL	2251:21	2251:21	7	& tif -> tif_dir
UNARY_EXPR	2251:21	2251:22	8	& tif -> tif_dir
UNARY_OPERATOR	2251:21	2251:21	9	&
LEAF_NODE	2251:21	2251:21	10	&
FIELD	2251:22	2251:27	9	tif -> tif_dir
LEAF_NODE	2251:22	2251:22	10	tif
LEAF_NODE	2251:25	2251:25	10	->
LEAF_NODE	2251:27	2251:27	10	tif_dir
LEAF_NODE	2251:34	2251:34	4	;
EXPR_STATEMENT	2258:1	2258:34	3	tif -> tif_flags &= ~TIFF_UPSAMPLED ;
EXPR	2258:1	2258:1	4	tif -> tif_flags &= ~TIFF_UPSAMPLED
ASSIGN	2258:1	2258:19	5	tif -> tif_flags &= ~TIFF_UPSAMPLED
LVAL	2258:1	2258:1	6	tif -> tif_flags
FIELD	2258:1	2258:6	7	tif -> tif_flags
LEAF_NODE	2258:1	2258:1	8	tif
LEAF_NODE	2258:4	2258:4	8	->
LEAF_NODE	2258:6	2258:6	8	tif_flags
ASSIGN_OP	2258:16	2258:16	6	&=
LEAF_NODE	2258:16	2258:16	7	&=
RVAL	2258:19	2258:19	6	~TIFF_UPSAMPLED
FIELD	2258:19	2258:19	7	~TIFF_UPSAMPLED
LEAF_NODE	2258:19	2258:19	8	~TIFF_UPSAMPLED
LEAF_NODE	2258:34	2258:34	4	;
SELECTION	2259:1	2259:49	3	
KEYWORD	2259:1	2259:1	4	if
LEAF_NODE	2259:1	2259:1	5	if
LEAF_NODE	2259:4	2259:4	4	(
CONDITION	2259:5	2259:5	4	td -> td_planarconfig == PLANARCONFIG_CONTIG
EXPR	2259:5	2259:28	5	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	2259:5	2259:9	6	td -> td_planarconfig
LEAF_NODE	2259:5	2259:5	7	td
LEAF_NODE	2259:7	2259:7	7	->
LEAF_NODE	2259:9	2259:9	7	td_planarconfig
EQ_OPERATOR	2259:25	2259:25	6	==
LEAF_NODE	2259:25	2259:25	7	==
FIELD	2259:28	2259:28	6	PLANARCONFIG_CONTIG
LEAF_NODE	2259:28	2259:28	7	PLANARCONFIG_CONTIG
LEAF_NODE	2259:47	2259:47	4	)
STATEMENTS	2259:49	2270:1	4	
LEAF_NODE	2259:49	2259:49	5	{
STATEMENTS	2260:2	2263:4	5	
SELECTION	2260:2	2261:46	6	
KEYWORD	2260:2	2260:2	7	if
LEAF_NODE	2260:2	2260:2	8	if
LEAF_NODE	2260:5	2260:5	7	(
CONDITION	2260:6	2260:6	7	td -> td_photometric == PHOTOMETRIC_YCBCR && sp -> jpegcolormode == JPEGCOLORMODE_RGB
EXPR	2260:6	2260:6	8	td -> td_photometric == PHOTOMETRIC_YCBCR && sp -> jpegcolormode == JPEGCOLORMODE_RGB
AND	2260:6	2261:6	9	td -> td_photometric == PHOTOMETRIC_YCBCR && sp -> jpegcolormode == JPEGCOLORMODE_RGB
EXPR	2260:6	2260:28	10	td -> td_photometric == PHOTOMETRIC_YCBCR
FIELD	2260:6	2260:10	11	td -> td_photometric
LEAF_NODE	2260:6	2260:6	12	td
LEAF_NODE	2260:8	2260:8	12	->
LEAF_NODE	2260:10	2260:10	12	td_photometric
EQ_OPERATOR	2260:25	2260:25	11	==
LEAF_NODE	2260:25	2260:25	12	==
FIELD	2260:28	2260:28	11	PHOTOMETRIC_YCBCR
LEAF_NODE	2260:28	2260:28	12	PHOTOMETRIC_YCBCR
LEAF_NODE	2260:46	2260:46	10	&&
EXPR	2261:6	2261:27	10	sp -> jpegcolormode == JPEGCOLORMODE_RGB
FIELD	2261:6	2261:10	11	sp -> jpegcolormode
LEAF_NODE	2261:6	2261:6	12	sp
LEAF_NODE	2261:8	2261:8	12	->
LEAF_NODE	2261:10	2261:10	12	jpegcolormode
EQ_OPERATOR	2261:24	2261:24	11	==
LEAF_NODE	2261:24	2261:24	12	==
FIELD	2261:27	2261:27	11	JPEGCOLORMODE_RGB
LEAF_NODE	2261:27	2261:27	12	JPEGCOLORMODE_RGB
LEAF_NODE	2261:44	2261:44	7	)
STATEMENTS	2261:46	2263:2	7	
LEAF_NODE	2261:46	2261:46	8	{
STATEMENTS	2262:3	2262:3	8	
EXPR_STATEMENT	2262:3	2262:35	9	tif -> tif_flags |= TIFF_UPSAMPLED ;
EXPR	2262:3	2262:3	10	tif -> tif_flags |= TIFF_UPSAMPLED
ASSIGN	2262:3	2262:21	11	tif -> tif_flags |= TIFF_UPSAMPLED
LVAL	2262:3	2262:3	12	tif -> tif_flags
FIELD	2262:3	2262:8	13	tif -> tif_flags
LEAF_NODE	2262:3	2262:3	14	tif
LEAF_NODE	2262:6	2262:6	14	->
LEAF_NODE	2262:8	2262:8	14	tif_flags
ASSIGN_OP	2262:18	2262:18	12	|=
LEAF_NODE	2262:18	2262:18	13	|=
RVAL	2262:21	2262:21	12	TIFF_UPSAMPLED
FIELD	2262:21	2262:21	13	TIFF_UPSAMPLED
LEAF_NODE	2262:21	2262:21	14	TIFF_UPSAMPLED
LEAF_NODE	2262:35	2262:35	10	;
LEAF_NODE	2263:2	2263:2	8	}
SELECTION	2263:4	2263:9	6	
KEYWORD	2263:4	2263:4	7	else
LEAF_NODE	2263:4	2263:4	8	else
STATEMENTS	2263:9	2269:2	7	
LEAF_NODE	2263:9	2263:9	8	{
STATEMENTS	2265:3	2265:3	8	
SELECTION	2265:3	2267:4	9	
KEYWORD	2265:3	2265:3	10	if
LEAF_NODE	2265:3	2265:3	11	if
LEAF_NODE	2265:6	2265:6	10	(
CONDITION	2265:7	2265:7	10	td -> td_ycbcrsubsampling [ 0 ] != 1 || td -> td_ycbcrsubsampling [ 1 ] != 1
EXPR	2265:7	2265:7	11	td -> td_ycbcrsubsampling [ 0 ] != 1 || td -> td_ycbcrsubsampling [ 1 ] != 1
OR	2265:7	2266:7	12	td -> td_ycbcrsubsampling [ 0 ] != 1 || td -> td_ycbcrsubsampling [ 1 ] != 1
EXPR	2265:7	2265:37	13	td -> td_ycbcrsubsampling [ 0 ] != 1
FIELD	2265:7	2265:32	14	td -> td_ycbcrsubsampling [ 0 ]
LEAF_NODE	2265:7	2265:7	15	td
LEAF_NODE	2265:9	2265:9	15	->
LEAF_NODE	2265:11	2265:11	15	td_ycbcrsubsampling
LEAF_NODE	2265:30	2265:30	15	[
EXPR	2265:31	2265:31	15	0
FIELD	2265:31	2265:31	16	0
LEAF_NODE	2265:31	2265:31	17	0
LEAF_NODE	2265:32	2265:32	15	]
EQ_OPERATOR	2265:34	2265:34	14	!=
LEAF_NODE	2265:34	2265:34	15	!=
FIELD	2265:37	2265:37	14	1
LEAF_NODE	2265:37	2265:37	15	1
LEAF_NODE	2265:39	2265:39	13	||
EXPR	2266:7	2266:37	13	td -> td_ycbcrsubsampling [ 1 ] != 1
FIELD	2266:7	2266:32	14	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	2266:7	2266:7	15	td
LEAF_NODE	2266:9	2266:9	15	->
LEAF_NODE	2266:11	2266:11	15	td_ycbcrsubsampling
LEAF_NODE	2266:30	2266:30	15	[
EXPR	2266:31	2266:31	15	1
FIELD	2266:31	2266:31	16	1
LEAF_NODE	2266:31	2266:31	17	1
LEAF_NODE	2266:32	2266:32	15	]
EQ_OPERATOR	2266:34	2266:34	14	!=
LEAF_NODE	2266:34	2266:34	15	!=
FIELD	2266:37	2266:37	14	1
LEAF_NODE	2266:37	2266:37	15	1
LEAF_NODE	2266:38	2266:38	10	)
STATEMENTS	2267:4	2267:4	10	
LEAF_NODE	2267:4	2267:4	11	;
LEAF_NODE	2269:2	2269:2	8	}
LEAF_NODE	2270:1	2270:1	5	}
SELECTION	2276:8	2277:12	3	
KEYWORD	2276:8	2276:8	4	if
LEAF_NODE	2276:8	2276:8	5	if
LEAF_NODE	2276:10	2276:10	4	(
CONDITION	2276:12	2276:12	4	tif -> tif_tilesize > 0
EXPR	2276:12	2276:32	5	tif -> tif_tilesize > 0
FIELD	2276:12	2276:17	6	tif -> tif_tilesize
LEAF_NODE	2276:12	2276:12	7	tif
LEAF_NODE	2276:15	2276:15	7	->
LEAF_NODE	2276:17	2276:17	7	tif_tilesize
REL_OPERATOR	2276:30	2276:30	6	>
LEAF_NODE	2276:30	2276:30	7	>
FIELD	2276:32	2276:32	6	0
LEAF_NODE	2276:32	2276:32	7	0
LEAF_NODE	2276:34	2276:34	4	)
STATEMENTS	2277:12	2277:12	4	
EXPR_STATEMENT	2277:12	2277:81	5	tif -> tif_tilesize = isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) ( - 1 ) ;
EXPR	2277:12	2277:12	6	tif -> tif_tilesize = isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) ( - 1 )
ASSIGN	2277:12	2277:32	7	tif -> tif_tilesize = isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) ( - 1 )
LVAL	2277:12	2277:12	8	tif -> tif_tilesize
FIELD	2277:12	2277:17	9	tif -> tif_tilesize
LEAF_NODE	2277:12	2277:12	10	tif
LEAF_NODE	2277:15	2277:15	10	->
LEAF_NODE	2277:17	2277:17	10	tif_tilesize
ASSIGN_OP	2277:30	2277:30	8	=
LEAF_NODE	2277:30	2277:30	9	=
RVAL	2277:32	2277:32	8	isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) ( - 1 )
COND_EXPR	2277:32	2277:80	9	isTiled ( tif ) ? TIFFTileSize ( tif ) : ( tmsize_t ) ( - 1 )
CONDITION	2277:32	2277:32	10	isTiled ( tif )
FUNCTION_CALL	2277:32	2277:43	11	isTiled ( tif )
CALLEE	2277:32	2277:32	12	isTiled
LEAF_NODE	2277:32	2277:32	13	isTiled
LEAF_NODE	2277:39	2277:39	12	(
ARGUMENT	2277:40	2277:40	12	tif
FIELD	2277:40	2277:40	13	tif
LEAF_NODE	2277:40	2277:40	14	tif
LEAF_NODE	2277:43	2277:43	12	)
LEAF_NODE	2277:45	2277:45	10	?
EXPR	2277:47	2277:47	10	TIFFTileSize ( tif )
FUNCTION_CALL	2277:47	2277:63	11	TIFFTileSize ( tif )
CALLEE	2277:47	2277:47	12	TIFFTileSize
LEAF_NODE	2277:47	2277:47	13	TIFFTileSize
LEAF_NODE	2277:59	2277:59	12	(
ARGUMENT	2277:60	2277:60	12	tif
FIELD	2277:60	2277:60	13	tif
LEAF_NODE	2277:60	2277:60	14	tif
LEAF_NODE	2277:63	2277:63	12	)
LEAF_NODE	2277:65	2277:65	10	:
LEAF_NODE	2277:67	2277:67	10	(
TYPE_NAME	2277:68	2277:68	10	tmsize_t
LEAF_NODE	2277:68	2277:68	11	tmsize_t
LEAF_NODE	2277:76	2277:76	10	)
LEAF_NODE	2277:77	2277:77	10	(
UNARY_EXPR	2277:78	2277:79	10	- 1
UNARY_OPERATOR	2277:78	2277:78	11	-
LEAF_NODE	2277:78	2277:78	12	-
FIELD	2277:79	2277:79	11	1
LEAF_NODE	2277:79	2277:79	12	1
LEAF_NODE	2277:80	2277:80	10	)
LEAF_NODE	2277:81	2277:81	6	;
SELECTION	2278:8	2279:12	3	
KEYWORD	2278:8	2278:8	4	if
LEAF_NODE	2278:8	2278:8	5	if
LEAF_NODE	2278:10	2278:10	4	(
CONDITION	2278:12	2278:12	4	tif -> tif_scanlinesize > 0
EXPR	2278:12	2278:36	5	tif -> tif_scanlinesize > 0
FIELD	2278:12	2278:17	6	tif -> tif_scanlinesize
LEAF_NODE	2278:12	2278:12	7	tif
LEAF_NODE	2278:15	2278:15	7	->
LEAF_NODE	2278:17	2278:17	7	tif_scanlinesize
REL_OPERATOR	2278:34	2278:34	6	>
LEAF_NODE	2278:34	2278:34	7	>
FIELD	2278:36	2278:36	6	0
LEAF_NODE	2278:36	2278:36	7	0
LEAF_NODE	2278:38	2278:38	4	)
STATEMENTS	2279:12	2279:12	4	
EXPR_STATEMENT	2279:12	2279:57	5	tif -> tif_scanlinesize = TIFFScanlineSize ( tif ) ;
EXPR	2279:12	2279:12	6	tif -> tif_scanlinesize = TIFFScanlineSize ( tif )
ASSIGN	2279:12	2279:36	7	tif -> tif_scanlinesize = TIFFScanlineSize ( tif )
LVAL	2279:12	2279:12	8	tif -> tif_scanlinesize
FIELD	2279:12	2279:17	9	tif -> tif_scanlinesize
LEAF_NODE	2279:12	2279:12	10	tif
LEAF_NODE	2279:15	2279:15	10	->
LEAF_NODE	2279:17	2279:17	10	tif_scanlinesize
ASSIGN_OP	2279:34	2279:34	8	=
LEAF_NODE	2279:34	2279:34	9	=
RVAL	2279:36	2279:36	8	TIFFScanlineSize ( tif )
FUNCTION_CALL	2279:36	2279:56	9	TIFFScanlineSize ( tif )
CALLEE	2279:36	2279:36	10	TIFFScanlineSize
LEAF_NODE	2279:36	2279:36	11	TIFFScanlineSize
LEAF_NODE	2279:52	2279:52	10	(
ARGUMENT	2279:53	2279:53	10	tif
FIELD	2279:53	2279:53	11	tif
LEAF_NODE	2279:53	2279:53	12	tif
LEAF_NODE	2279:56	2279:56	10	)
LEAF_NODE	2279:57	2279:57	6	;
LEAF_NODE	2280:0	2280:0	2	}
FUNCTION_DEF	2282:0	2335:0	1	
RETURN_TYPE	2282:0	2282:7	2	static int
LEAF_NODE	2282:0	2282:0	3	static
TYPE_NAME	2282:7	2282:7	3	int
LEAF_NODE	2282:7	2282:7	4	int
FUNCTION_NAME	2283:0	2283:0	2	JPEGVSetField
LEAF_NODE	2283:0	2283:0	3	JPEGVSetField
PARAMETER_LIST	2283:13	2283:47	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	2283:13	2283:13	3	(
PARAMETER_DECL	2283:14	2283:20	3	TIFF * tif
TYPE	2283:14	2283:18	4	TIFF *
TYPE_NAME	2283:14	2283:14	5	TIFF
LEAF_NODE	2283:14	2283:14	6	TIFF
POINTER	2283:18	2283:18	5	*
LEAF_NODE	2283:18	2283:18	6	*
NAME	2283:20	2283:20	4	tif
LEAF_NODE	2283:20	2283:20	5	tif
LEAF_NODE	2283:23	2283:23	3	,
PARAMETER_DECL	2283:25	2283:32	3	uint32 tag
TYPE	2283:25	2283:25	4	uint32
TYPE_NAME	2283:25	2283:25	5	uint32
LEAF_NODE	2283:25	2283:25	6	uint32
NAME	2283:32	2283:32	4	tag
LEAF_NODE	2283:32	2283:32	5	tag
LEAF_NODE	2283:35	2283:35	3	,
PARAMETER_DECL	2283:37	2283:45	3	va_list ap
TYPE	2283:37	2283:37	4	va_list
TYPE_NAME	2283:37	2283:37	5	va_list
LEAF_NODE	2283:37	2283:37	6	va_list
NAME	2283:45	2283:45	4	ap
LEAF_NODE	2283:45	2283:45	5	ap
LEAF_NODE	2283:47	2283:47	3	)
LEAF_NODE	2284:0	2284:0	2	{
STATEMENTS	2285:1	2334:1	2	
SIMPLE_DECL	2285:1	2285:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2285:1	2285:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2285:1	2285:10	5	JPEGState *
TYPE_NAME	2285:1	2285:1	6	JPEGState
LEAF_NODE	2285:1	2285:1	7	JPEGState
POINTER	2285:10	2285:10	6	*
LEAF_NODE	2285:10	2285:10	7	*
NAME	2285:12	2285:12	5	sp
LEAF_NODE	2285:12	2285:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2285:12	2285:12	5	sp = JState ( tif )
ASSIGN	2285:12	2285:17	6	sp = JState ( tif )
LVAL	2285:12	2285:12	7	sp
NAME	2285:12	2285:12	8	sp
LEAF_NODE	2285:12	2285:12	9	sp
ASSIGN_OP	2285:15	2285:15	7	=
LEAF_NODE	2285:15	2285:15	8	=
RVAL	2285:17	2285:17	7	JState ( tif )
FUNCTION_CALL	2285:17	2285:27	8	JState ( tif )
CALLEE	2285:17	2285:17	9	JState
LEAF_NODE	2285:17	2285:17	10	JState
LEAF_NODE	2285:23	2285:23	9	(
ARGUMENT	2285:24	2285:24	9	tif
FIELD	2285:24	2285:24	10	tif
LEAF_NODE	2285:24	2285:24	11	tif
LEAF_NODE	2285:27	2285:27	9	)
LEAF_NODE	2285:28	2285:28	4	;
SIMPLE_DECL	2286:1	2286:21	3	const TIFFField * fip ;
VAR_DECL	2286:1	2286:18	4	const TIFFField * fip
TYPE	2286:1	2286:16	5	const TIFFField *
TYPE_NAME	2286:1	2286:7	6	const TIFFField
LEAF_NODE	2286:1	2286:1	7	const
LEAF_NODE	2286:7	2286:7	7	TIFFField
POINTER	2286:16	2286:16	6	*
LEAF_NODE	2286:16	2286:16	7	*
NAME	2286:18	2286:18	5	fip
LEAF_NODE	2286:18	2286:18	6	fip
LEAF_NODE	2286:21	2286:21	4	;
SIMPLE_DECL	2287:1	2287:11	3	uint32 v32 ;
VAR_DECL	2287:1	2287:8	4	uint32 v32
TYPE	2287:1	2287:1	5	uint32
TYPE_NAME	2287:1	2287:1	6	uint32
LEAF_NODE	2287:1	2287:1	7	uint32
NAME	2287:8	2287:8	5	v32
LEAF_NODE	2287:8	2287:8	6	v32
LEAF_NODE	2287:11	2287:11	4	;
EXPR_STATEMENT	2289:1	2289:19	3	assert ( sp != NULL ) ;
EXPR	2289:1	2289:1	4	assert ( sp != NULL )
FUNCTION_CALL	2289:1	2289:18	5	assert ( sp != NULL )
CALLEE	2289:1	2289:1	6	assert
LEAF_NODE	2289:1	2289:1	7	assert
LEAF_NODE	2289:7	2289:7	6	(
ARGUMENT	2289:8	2289:14	6	sp != NULL
FIELD	2289:8	2289:8	7	sp
LEAF_NODE	2289:8	2289:8	8	sp
EQ_OPERATOR	2289:11	2289:11	7	!=
LEAF_NODE	2289:11	2289:11	8	!=
FIELD	2289:14	2289:14	7	NULL
LEAF_NODE	2289:14	2289:14	8	NULL
LEAF_NODE	2289:18	2289:18	6	)
LEAF_NODE	2289:19	2289:19	4	;
SELECTION	2291:1	2291:14	3	
KEYWORD	2291:1	2291:1	4	switch
LEAF_NODE	2291:1	2291:1	5	switch
LEAF_NODE	2291:8	2291:8	4	(
CONDITION	2291:9	2291:9	4	tag
EXPR	2291:9	2291:9	5	tag
FIELD	2291:9	2291:9	6	tag
LEAF_NODE	2291:9	2291:9	7	tag
LEAF_NODE	2291:12	2291:12	4	)
STATEMENTS	2291:14	2325:1	4	
LEAF_NODE	2291:14	2291:14	5	{
STATEMENTS	2292:1	2324:2	5	
LABEL	2292:1	2292:24	6	case TIFFTAG_JPEGTABLES :
LEAF_NODE	2292:1	2292:1	7	case
LEAF_NODE	2292:6	2292:6	7	TIFFTAG_JPEGTABLES
LEAF_NODE	2292:24	2292:24	7	:
EXPR_STATEMENT	2293:2	2293:35	6	v32 = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	2293:2	2293:2	7	v32 = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	2293:2	2293:8	8	v32 = ( uint32 ) va_arg ( ap , uint32 )
LVAL	2293:2	2293:2	9	v32
FIELD	2293:2	2293:2	10	v32
LEAF_NODE	2293:2	2293:2	11	v32
ASSIGN_OP	2293:6	2293:6	9	=
LEAF_NODE	2293:6	2293:6	10	=
RVAL	2293:8	2293:17	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	2293:8	2293:8	10	(
TYPE_NAME	2293:9	2293:9	10	uint32
LEAF_NODE	2293:9	2293:9	11	uint32
LEAF_NODE	2293:15	2293:15	10	)
FUNCTION_CALL	2293:17	2293:34	10	va_arg ( ap , uint32 )
CALLEE	2293:17	2293:17	11	va_arg
LEAF_NODE	2293:17	2293:17	12	va_arg
LEAF_NODE	2293:23	2293:23	11	(
ARGUMENT	2293:24	2293:24	11	ap
FIELD	2293:24	2293:24	12	ap
LEAF_NODE	2293:24	2293:24	13	ap
LEAF_NODE	2293:26	2293:26	11	,
ARGUMENT	2293:28	2293:28	11	uint32
FIELD	2293:28	2293:28	12	uint32
LEAF_NODE	2293:28	2293:28	13	uint32
LEAF_NODE	2293:34	2293:34	11	)
LEAF_NODE	2293:35	2293:35	7	;
SELECTION	2294:2	2294:16	6	
KEYWORD	2294:2	2294:2	7	if
LEAF_NODE	2294:2	2294:2	8	if
LEAF_NODE	2294:5	2294:5	7	(
CONDITION	2294:6	2294:6	7	v32 == 0
EXPR	2294:6	2294:13	8	v32 == 0
FIELD	2294:6	2294:6	9	v32
LEAF_NODE	2294:6	2294:6	10	v32
EQ_OPERATOR	2294:10	2294:10	9	==
LEAF_NODE	2294:10	2294:10	10	==
FIELD	2294:13	2294:13	9	0
LEAF_NODE	2294:13	2294:13	10	0
LEAF_NODE	2294:14	2294:14	7	)
STATEMENTS	2294:16	2297:2	7	
LEAF_NODE	2294:16	2294:16	8	{
STATEMENTS	2296:3	2296:3	8	
JUMP_STATEMENT	2296:3	2296:13	9	return ( 0 ) ;
KEYWORD	2296:3	2296:3	10	return
LEAF_NODE	2296:3	2296:3	11	return
DESTINATION	2296:10	2296:10	10	( 0 )
EXPR	2296:10	2296:12	11	( 0 )
LEAF_NODE	2296:10	2296:10	12	(
FIELD	2296:11	2296:11	12	0
LEAF_NODE	2296:11	2296:11	13	0
LEAF_NODE	2296:12	2296:12	12	)
LEAF_NODE	2296:13	2296:13	10	;
LEAF_NODE	2297:2	2297:2	8	}
LEAF_NODE	2298:2	2298:2	6	_TIFFsetByteArray
LEAF_NODE	2298:19	2298:19	6	(
LEAF_NODE	2298:20	2298:20	6	&
LEAF_NODE	2298:21	2298:21	6	sp
LEAF_NODE	2298:23	2298:23	6	->
LEAF_NODE	2298:25	2298:25	6	jpegtables
LEAF_NODE	2298:35	2298:35	6	,
LEAF_NODE	2298:37	2298:37	6	va_arg
LEAF_NODE	2298:43	2298:43	6	(
LEAF_NODE	2298:44	2298:44	6	ap
LEAF_NODE	2298:46	2298:46	6	,
LEAF_NODE	2298:48	2298:48	6	void
LEAF_NODE	2298:52	2298:52	6	*
LEAF_NODE	2298:53	2298:53	6	)
LEAF_NODE	2298:54	2298:54	6	,
LEAF_NODE	2298:56	2298:56	6	v32
LEAF_NODE	2298:59	2298:59	6	)
LEAF_NODE	2298:60	2298:60	6	;
EXPR_STATEMENT	2299:2	2299:29	6	sp -> jpegtables_length = v32 ;
EXPR	2299:2	2299:2	7	sp -> jpegtables_length = v32
ASSIGN	2299:2	2299:26	8	sp -> jpegtables_length = v32
LVAL	2299:2	2299:2	9	sp -> jpegtables_length
FIELD	2299:2	2299:6	10	sp -> jpegtables_length
LEAF_NODE	2299:2	2299:2	11	sp
LEAF_NODE	2299:4	2299:4	11	->
LEAF_NODE	2299:6	2299:6	11	jpegtables_length
ASSIGN_OP	2299:24	2299:24	9	=
LEAF_NODE	2299:24	2299:24	10	=
RVAL	2299:26	2299:26	9	v32
FIELD	2299:26	2299:26	10	v32
LEAF_NODE	2299:26	2299:26	11	v32
LEAF_NODE	2299:29	2299:29	7	;
EXPR_STATEMENT	2300:2	2300:40	6	TIFFSetFieldBit ( tif , FIELD_JPEGTABLES ) ;
EXPR	2300:2	2300:2	7	TIFFSetFieldBit ( tif , FIELD_JPEGTABLES )
FUNCTION_CALL	2300:2	2300:39	8	TIFFSetFieldBit ( tif , FIELD_JPEGTABLES )
CALLEE	2300:2	2300:2	9	TIFFSetFieldBit
LEAF_NODE	2300:2	2300:2	10	TIFFSetFieldBit
LEAF_NODE	2300:17	2300:17	9	(
ARGUMENT	2300:18	2300:18	9	tif
FIELD	2300:18	2300:18	10	tif
LEAF_NODE	2300:18	2300:18	11	tif
LEAF_NODE	2300:21	2300:21	9	,
ARGUMENT	2300:23	2300:23	9	FIELD_JPEGTABLES
FIELD	2300:23	2300:23	10	FIELD_JPEGTABLES
LEAF_NODE	2300:23	2300:23	11	FIELD_JPEGTABLES
LEAF_NODE	2300:39	2300:39	9	)
LEAF_NODE	2300:40	2300:40	7	;
JUMP_STATEMENT	2301:2	2301:7	6	break DESTINATION ;
KEYWORD	2301:2	2301:2	7	break
LEAF_NODE	2301:2	2301:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2301:7	2301:7	7	;
LABEL	2302:1	2302:25	6	case TIFFTAG_JPEGQUALITY :
LEAF_NODE	2302:1	2302:1	7	case
LEAF_NODE	2302:6	2302:6	7	TIFFTAG_JPEGQUALITY
LEAF_NODE	2302:25	2302:25	7	:
EXPR_STATEMENT	2303:2	2303:41	6	sp -> jpegquality = ( int ) va_arg ( ap , int ) ;
EXPR	2303:2	2303:2	7	sp -> jpegquality = ( int ) va_arg ( ap , int )
ASSIGN	2303:2	2303:20	8	sp -> jpegquality = ( int ) va_arg ( ap , int )
LVAL	2303:2	2303:2	9	sp -> jpegquality
FIELD	2303:2	2303:6	10	sp -> jpegquality
LEAF_NODE	2303:2	2303:2	11	sp
LEAF_NODE	2303:4	2303:4	11	->
LEAF_NODE	2303:6	2303:6	11	jpegquality
ASSIGN_OP	2303:18	2303:18	9	=
LEAF_NODE	2303:18	2303:18	10	=
RVAL	2303:20	2303:26	9	( int ) va_arg ( ap , int )
LEAF_NODE	2303:20	2303:20	10	(
TYPE_NAME	2303:21	2303:21	10	int
LEAF_NODE	2303:21	2303:21	11	int
LEAF_NODE	2303:24	2303:24	10	)
FUNCTION_CALL	2303:26	2303:40	10	va_arg ( ap , int )
CALLEE	2303:26	2303:26	11	va_arg
LEAF_NODE	2303:26	2303:26	12	va_arg
LEAF_NODE	2303:32	2303:32	11	(
ARGUMENT	2303:33	2303:33	11	ap
FIELD	2303:33	2303:33	12	ap
LEAF_NODE	2303:33	2303:33	13	ap
LEAF_NODE	2303:35	2303:35	11	,
ARGUMENT	2303:37	2303:37	11	int
FIELD	2303:37	2303:37	12	int
LEAF_NODE	2303:37	2303:37	13	int
LEAF_NODE	2303:40	2303:40	11	)
LEAF_NODE	2303:41	2303:41	7	;
JUMP_STATEMENT	2304:2	2304:12	6	return ( 1 ) ;
KEYWORD	2304:2	2304:2	7	return
LEAF_NODE	2304:2	2304:2	8	return
DESTINATION	2304:9	2304:9	7	( 1 )
EXPR	2304:9	2304:11	8	( 1 )
LEAF_NODE	2304:9	2304:9	9	(
FIELD	2304:10	2304:10	9	1
LEAF_NODE	2304:10	2304:10	10	1
LEAF_NODE	2304:11	2304:11	9	)
LEAF_NODE	2304:12	2304:12	7	;
LABEL	2305:1	2305:27	6	case TIFFTAG_JPEGCOLORMODE :
LEAF_NODE	2305:1	2305:1	7	case
LEAF_NODE	2305:6	2305:6	7	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	2305:27	2305:27	7	:
EXPR_STATEMENT	2306:2	2306:43	6	sp -> jpegcolormode = ( int ) va_arg ( ap , int ) ;
EXPR	2306:2	2306:2	7	sp -> jpegcolormode = ( int ) va_arg ( ap , int )
ASSIGN	2306:2	2306:22	8	sp -> jpegcolormode = ( int ) va_arg ( ap , int )
LVAL	2306:2	2306:2	9	sp -> jpegcolormode
FIELD	2306:2	2306:6	10	sp -> jpegcolormode
LEAF_NODE	2306:2	2306:2	11	sp
LEAF_NODE	2306:4	2306:4	11	->
LEAF_NODE	2306:6	2306:6	11	jpegcolormode
ASSIGN_OP	2306:20	2306:20	9	=
LEAF_NODE	2306:20	2306:20	10	=
RVAL	2306:22	2306:28	9	( int ) va_arg ( ap , int )
LEAF_NODE	2306:22	2306:22	10	(
TYPE_NAME	2306:23	2306:23	10	int
LEAF_NODE	2306:23	2306:23	11	int
LEAF_NODE	2306:26	2306:26	10	)
FUNCTION_CALL	2306:28	2306:42	10	va_arg ( ap , int )
CALLEE	2306:28	2306:28	11	va_arg
LEAF_NODE	2306:28	2306:28	12	va_arg
LEAF_NODE	2306:34	2306:34	11	(
ARGUMENT	2306:35	2306:35	11	ap
FIELD	2306:35	2306:35	12	ap
LEAF_NODE	2306:35	2306:35	13	ap
LEAF_NODE	2306:37	2306:37	11	,
ARGUMENT	2306:39	2306:39	11	int
FIELD	2306:39	2306:39	12	int
LEAF_NODE	2306:39	2306:39	13	int
LEAF_NODE	2306:42	2306:42	11	)
LEAF_NODE	2306:43	2306:43	7	;
EXPR_STATEMENT	2307:2	2307:27	6	JPEGResetUpsampled ( tif ) ;
EXPR	2307:2	2307:2	7	JPEGResetUpsampled ( tif )
FUNCTION_CALL	2307:2	2307:26	8	JPEGResetUpsampled ( tif )
CALLEE	2307:2	2307:2	9	JPEGResetUpsampled
LEAF_NODE	2307:2	2307:2	10	JPEGResetUpsampled
LEAF_NODE	2307:20	2307:20	9	(
ARGUMENT	2307:22	2307:22	9	tif
FIELD	2307:22	2307:22	10	tif
LEAF_NODE	2307:22	2307:22	11	tif
LEAF_NODE	2307:26	2307:26	9	)
LEAF_NODE	2307:27	2307:27	7	;
JUMP_STATEMENT	2308:2	2308:12	6	return ( 1 ) ;
KEYWORD	2308:2	2308:2	7	return
LEAF_NODE	2308:2	2308:2	8	return
DESTINATION	2308:9	2308:9	7	( 1 )
EXPR	2308:9	2308:11	8	( 1 )
LEAF_NODE	2308:9	2308:9	9	(
FIELD	2308:10	2308:10	9	1
LEAF_NODE	2308:10	2308:10	10	1
LEAF_NODE	2308:11	2308:11	9	)
LEAF_NODE	2308:12	2308:12	7	;
LABEL	2309:1	2309:25	6	case TIFFTAG_PHOTOMETRIC :
LEAF_NODE	2309:1	2309:1	7	case
LEAF_NODE	2309:6	2309:6	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	2309:25	2309:25	7	:
LEAF_NODE	2310:1	2310:1	6	{
STATEMENTS	2311:2	2313:2	6	
SIMPLE_DECL	2311:2	2311:49	7	int ret_value ; ret_value = ( * sp -> vsetparent ) ( tif , tag , ap ) ;
VAR_DECL	2311:2	2311:6	8	int ret_value ; ret_value = ( * sp -> vsetparent ) ( tif , tag , ap )
TYPE	2311:2	2311:2	9	int
TYPE_NAME	2311:2	2311:2	10	int
LEAF_NODE	2311:2	2311:2	11	int
NAME	2311:6	2311:6	9	ret_value
LEAF_NODE	2311:6	2311:6	10	ret_value
LEAF_NODE	0:0	0:0	9	;
INIT	2311:6	2311:6	9	ret_value = ( * sp -> vsetparent ) ( tif , tag , ap )
ASSIGN	2311:6	2311:18	10	ret_value = ( * sp -> vsetparent ) ( tif , tag , ap )
LVAL	2311:6	2311:6	11	ret_value
NAME	2311:6	2311:6	12	ret_value
LEAF_NODE	2311:6	2311:6	13	ret_value
ASSIGN_OP	2311:16	2311:16	11	=
LEAF_NODE	2311:16	2311:16	12	=
RVAL	2311:18	2311:18	11	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	2311:18	2311:48	12	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	2311:18	2311:34	13	( * sp -> vsetparent )
LEAF_NODE	2311:18	2311:18	14	(
UNARY_EXPR	2311:19	2311:20	14	* sp -> vsetparent
UNARY_OPERATOR	2311:19	2311:19	15	*
LEAF_NODE	2311:19	2311:19	16	*
FIELD	2311:20	2311:24	15	sp -> vsetparent
LEAF_NODE	2311:20	2311:20	16	sp
LEAF_NODE	2311:22	2311:22	16	->
LEAF_NODE	2311:24	2311:24	16	vsetparent
LEAF_NODE	2311:34	2311:34	14	)
LEAF_NODE	2311:35	2311:35	13	(
ARGUMENT	2311:36	2311:36	13	tif
FIELD	2311:36	2311:36	14	tif
LEAF_NODE	2311:36	2311:36	15	tif
LEAF_NODE	2311:39	2311:39	13	,
ARGUMENT	2311:41	2311:41	13	tag
FIELD	2311:41	2311:41	14	tag
LEAF_NODE	2311:41	2311:41	15	tag
LEAF_NODE	2311:44	2311:44	13	,
ARGUMENT	2311:46	2311:46	13	ap
FIELD	2311:46	2311:46	14	ap
LEAF_NODE	2311:46	2311:46	15	ap
LEAF_NODE	2311:48	2311:48	13	)
LEAF_NODE	2311:49	2311:49	8	;
EXPR_STATEMENT	2312:2	2312:27	7	JPEGResetUpsampled ( tif ) ;
EXPR	2312:2	2312:2	8	JPEGResetUpsampled ( tif )
FUNCTION_CALL	2312:2	2312:26	9	JPEGResetUpsampled ( tif )
CALLEE	2312:2	2312:2	10	JPEGResetUpsampled
LEAF_NODE	2312:2	2312:2	11	JPEGResetUpsampled
LEAF_NODE	2312:20	2312:20	10	(
ARGUMENT	2312:22	2312:22	10	tif
FIELD	2312:22	2312:22	11	tif
LEAF_NODE	2312:22	2312:22	12	tif
LEAF_NODE	2312:26	2312:26	10	)
LEAF_NODE	2312:27	2312:27	8	;
JUMP_STATEMENT	2313:2	2313:18	7	return ret_value ;
KEYWORD	2313:2	2313:2	8	return
LEAF_NODE	2313:2	2313:2	9	return
DESTINATION	2313:9	2313:9	8	ret_value
EXPR	2313:9	2313:9	9	ret_value
FIELD	2313:9	2313:9	10	ret_value
LEAF_NODE	2313:9	2313:9	11	ret_value
LEAF_NODE	2313:18	2313:18	8	;
LEAF_NODE	2314:1	2314:1	6	}
LABEL	2315:1	2315:28	6	case TIFFTAG_JPEGTABLESMODE :
LEAF_NODE	2315:1	2315:1	7	case
LEAF_NODE	2315:6	2315:6	7	TIFFTAG_JPEGTABLESMODE
LEAF_NODE	2315:28	2315:28	7	:
EXPR_STATEMENT	2316:2	2316:44	6	sp -> jpegtablesmode = ( int ) va_arg ( ap , int ) ;
EXPR	2316:2	2316:2	7	sp -> jpegtablesmode = ( int ) va_arg ( ap , int )
ASSIGN	2316:2	2316:23	8	sp -> jpegtablesmode = ( int ) va_arg ( ap , int )
LVAL	2316:2	2316:2	9	sp -> jpegtablesmode
FIELD	2316:2	2316:6	10	sp -> jpegtablesmode
LEAF_NODE	2316:2	2316:2	11	sp
LEAF_NODE	2316:4	2316:4	11	->
LEAF_NODE	2316:6	2316:6	11	jpegtablesmode
ASSIGN_OP	2316:21	2316:21	9	=
LEAF_NODE	2316:21	2316:21	10	=
RVAL	2316:23	2316:29	9	( int ) va_arg ( ap , int )
LEAF_NODE	2316:23	2316:23	10	(
TYPE_NAME	2316:24	2316:24	10	int
LEAF_NODE	2316:24	2316:24	11	int
LEAF_NODE	2316:27	2316:27	10	)
FUNCTION_CALL	2316:29	2316:43	10	va_arg ( ap , int )
CALLEE	2316:29	2316:29	11	va_arg
LEAF_NODE	2316:29	2316:29	12	va_arg
LEAF_NODE	2316:35	2316:35	11	(
ARGUMENT	2316:36	2316:36	11	ap
FIELD	2316:36	2316:36	12	ap
LEAF_NODE	2316:36	2316:36	13	ap
LEAF_NODE	2316:38	2316:38	11	,
ARGUMENT	2316:40	2316:40	11	int
FIELD	2316:40	2316:40	12	int
LEAF_NODE	2316:40	2316:40	13	int
LEAF_NODE	2316:43	2316:43	11	)
LEAF_NODE	2316:44	2316:44	7	;
JUMP_STATEMENT	2317:2	2317:12	6	return ( 1 ) ;
KEYWORD	2317:2	2317:2	7	return
LEAF_NODE	2317:2	2317:2	8	return
DESTINATION	2317:9	2317:9	7	( 1 )
EXPR	2317:9	2317:11	8	( 1 )
LEAF_NODE	2317:9	2317:9	9	(
FIELD	2317:10	2317:10	9	1
LEAF_NODE	2317:10	2317:10	10	1
LEAF_NODE	2317:11	2317:11	9	)
LEAF_NODE	2317:12	2317:12	7	;
LABEL	2318:1	2318:30	6	case TIFFTAG_YCBCRSUBSAMPLING :
LEAF_NODE	2318:1	2318:1	7	case
LEAF_NODE	2318:6	2318:6	7	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	2318:30	2318:30	7	:
EXPR_STATEMENT	2320:2	2320:31	6	sp -> ycbcrsampling_fetched = 1 ;
EXPR	2320:2	2320:2	7	sp -> ycbcrsampling_fetched = 1
ASSIGN	2320:2	2320:30	8	sp -> ycbcrsampling_fetched = 1
LVAL	2320:2	2320:2	9	sp -> ycbcrsampling_fetched
FIELD	2320:2	2320:6	10	sp -> ycbcrsampling_fetched
LEAF_NODE	2320:2	2320:2	11	sp
LEAF_NODE	2320:4	2320:4	11	->
LEAF_NODE	2320:6	2320:6	11	ycbcrsampling_fetched
ASSIGN_OP	2320:28	2320:28	9	=
LEAF_NODE	2320:28	2320:28	10	=
RVAL	2320:30	2320:30	9	1
FIELD	2320:30	2320:30	10	1
LEAF_NODE	2320:30	2320:30	11	1
LEAF_NODE	2320:31	2320:31	7	;
JUMP_STATEMENT	2322:2	2322:40	6	return ( * sp -> vsetparent ) ( tif , tag , ap ) ;
KEYWORD	2322:2	2322:2	7	return
LEAF_NODE	2322:2	2322:2	8	return
DESTINATION	2322:9	2322:9	7	( * sp -> vsetparent ) ( tif , tag , ap )
EXPR	2322:9	2322:9	8	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	2322:9	2322:39	9	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	2322:9	2322:25	10	( * sp -> vsetparent )
LEAF_NODE	2322:9	2322:9	11	(
UNARY_EXPR	2322:10	2322:11	11	* sp -> vsetparent
UNARY_OPERATOR	2322:10	2322:10	12	*
LEAF_NODE	2322:10	2322:10	13	*
FIELD	2322:11	2322:15	12	sp -> vsetparent
LEAF_NODE	2322:11	2322:11	13	sp
LEAF_NODE	2322:13	2322:13	13	->
LEAF_NODE	2322:15	2322:15	13	vsetparent
LEAF_NODE	2322:25	2322:25	11	)
LEAF_NODE	2322:26	2322:26	10	(
ARGUMENT	2322:27	2322:27	10	tif
FIELD	2322:27	2322:27	11	tif
LEAF_NODE	2322:27	2322:27	12	tif
LEAF_NODE	2322:30	2322:30	10	,
ARGUMENT	2322:32	2322:32	10	tag
FIELD	2322:32	2322:32	11	tag
LEAF_NODE	2322:32	2322:32	12	tag
LEAF_NODE	2322:35	2322:35	10	,
ARGUMENT	2322:37	2322:37	10	ap
FIELD	2322:37	2322:37	11	ap
LEAF_NODE	2322:37	2322:37	12	ap
LEAF_NODE	2322:39	2322:39	10	)
LEAF_NODE	2322:40	2322:40	7	;
LABEL	2323:1	2323:8	6	default :
LEAF_NODE	2323:1	2323:1	7	default
LEAF_NODE	2323:8	2323:8	7	:
JUMP_STATEMENT	2324:2	2324:40	6	return ( * sp -> vsetparent ) ( tif , tag , ap ) ;
KEYWORD	2324:2	2324:2	7	return
LEAF_NODE	2324:2	2324:2	8	return
DESTINATION	2324:9	2324:9	7	( * sp -> vsetparent ) ( tif , tag , ap )
EXPR	2324:9	2324:9	8	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	2324:9	2324:39	9	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	2324:9	2324:25	10	( * sp -> vsetparent )
LEAF_NODE	2324:9	2324:9	11	(
UNARY_EXPR	2324:10	2324:11	11	* sp -> vsetparent
UNARY_OPERATOR	2324:10	2324:10	12	*
LEAF_NODE	2324:10	2324:10	13	*
FIELD	2324:11	2324:15	12	sp -> vsetparent
LEAF_NODE	2324:11	2324:11	13	sp
LEAF_NODE	2324:13	2324:13	13	->
LEAF_NODE	2324:15	2324:15	13	vsetparent
LEAF_NODE	2324:25	2324:25	11	)
LEAF_NODE	2324:26	2324:26	10	(
ARGUMENT	2324:27	2324:27	10	tif
FIELD	2324:27	2324:27	11	tif
LEAF_NODE	2324:27	2324:27	12	tif
LEAF_NODE	2324:30	2324:30	10	,
ARGUMENT	2324:32	2324:32	10	tag
FIELD	2324:32	2324:32	11	tag
LEAF_NODE	2324:32	2324:32	12	tag
LEAF_NODE	2324:35	2324:35	10	,
ARGUMENT	2324:37	2324:37	10	ap
FIELD	2324:37	2324:37	11	ap
LEAF_NODE	2324:37	2324:37	12	ap
LEAF_NODE	2324:39	2324:39	10	)
LEAF_NODE	2324:40	2324:40	7	;
LEAF_NODE	2325:1	2325:1	5	}
SELECTION	2327:1	2327:49	3	
KEYWORD	2327:1	2327:1	4	if
LEAF_NODE	2327:1	2327:1	5	if
LEAF_NODE	2327:4	2327:4	4	(
CONDITION	2327:5	2327:5	4	( fip = TIFFFieldWithTag ( tif , tag ) ) != NULL
EXPR	2327:5	2327:43	5	( fip = TIFFFieldWithTag ( tif , tag ) ) != NULL
LEAF_NODE	2327:5	2327:5	6	(
ASSIGN	2327:6	2327:12	6	fip = TIFFFieldWithTag ( tif , tag )
LVAL	2327:6	2327:6	7	fip
FIELD	2327:6	2327:6	8	fip
LEAF_NODE	2327:6	2327:6	9	fip
ASSIGN_OP	2327:10	2327:10	7	=
LEAF_NODE	2327:10	2327:10	8	=
RVAL	2327:12	2327:12	7	TIFFFieldWithTag ( tif , tag )
FUNCTION_CALL	2327:12	2327:37	8	TIFFFieldWithTag ( tif , tag )
CALLEE	2327:12	2327:12	9	TIFFFieldWithTag
LEAF_NODE	2327:12	2327:12	10	TIFFFieldWithTag
LEAF_NODE	2327:28	2327:28	9	(
ARGUMENT	2327:29	2327:29	9	tif
FIELD	2327:29	2327:29	10	tif
LEAF_NODE	2327:29	2327:29	11	tif
LEAF_NODE	2327:32	2327:32	9	,
ARGUMENT	2327:34	2327:34	9	tag
FIELD	2327:34	2327:34	10	tag
LEAF_NODE	2327:34	2327:34	11	tag
LEAF_NODE	2327:37	2327:37	9	)
LEAF_NODE	2327:38	2327:38	6	)
EQ_OPERATOR	2327:40	2327:40	6	!=
LEAF_NODE	2327:40	2327:40	7	!=
FIELD	2327:43	2327:43	6	NULL
LEAF_NODE	2327:43	2327:43	7	NULL
LEAF_NODE	2327:47	2327:47	4	)
STATEMENTS	2327:49	2329:1	4	
LEAF_NODE	2327:49	2327:49	5	{
STATEMENTS	2328:2	2328:2	5	
EXPR_STATEMENT	2328:2	2328:38	6	TIFFSetFieldBit ( tif , fip -> field_bit ) ;
EXPR	2328:2	2328:2	7	TIFFSetFieldBit ( tif , fip -> field_bit )
FUNCTION_CALL	2328:2	2328:37	8	TIFFSetFieldBit ( tif , fip -> field_bit )
CALLEE	2328:2	2328:2	9	TIFFSetFieldBit
LEAF_NODE	2328:2	2328:2	10	TIFFSetFieldBit
LEAF_NODE	2328:17	2328:17	9	(
ARGUMENT	2328:18	2328:18	9	tif
FIELD	2328:18	2328:18	10	tif
LEAF_NODE	2328:18	2328:18	11	tif
LEAF_NODE	2328:21	2328:21	9	,
ARGUMENT	2328:23	2328:23	9	fip -> field_bit
FIELD	2328:23	2328:28	10	fip -> field_bit
LEAF_NODE	2328:23	2328:23	11	fip
LEAF_NODE	2328:26	2328:26	11	->
LEAF_NODE	2328:28	2328:28	11	field_bit
LEAF_NODE	2328:37	2328:37	9	)
LEAF_NODE	2328:38	2328:38	7	;
LEAF_NODE	2329:1	2329:1	5	}
SELECTION	2329:3	2329:8	3	
KEYWORD	2329:3	2329:3	4	else
LEAF_NODE	2329:3	2329:3	5	else
STATEMENTS	2329:8	2331:1	4	
LEAF_NODE	2329:8	2329:8	5	{
STATEMENTS	2330:2	2330:2	5	
JUMP_STATEMENT	2330:2	2330:12	6	return ( 0 ) ;
KEYWORD	2330:2	2330:2	7	return
LEAF_NODE	2330:2	2330:2	8	return
DESTINATION	2330:9	2330:9	7	( 0 )
EXPR	2330:9	2330:11	8	( 0 )
LEAF_NODE	2330:9	2330:9	9	(
FIELD	2330:10	2330:10	9	0
LEAF_NODE	2330:10	2330:10	10	0
LEAF_NODE	2330:11	2330:11	9	)
LEAF_NODE	2330:12	2330:12	7	;
LEAF_NODE	2331:1	2331:1	5	}
EXPR_STATEMENT	2333:1	2333:35	3	tif -> tif_flags |= TIFF_DIRTYDIRECT ;
EXPR	2333:1	2333:1	4	tif -> tif_flags |= TIFF_DIRTYDIRECT
ASSIGN	2333:1	2333:19	5	tif -> tif_flags |= TIFF_DIRTYDIRECT
LVAL	2333:1	2333:1	6	tif -> tif_flags
FIELD	2333:1	2333:6	7	tif -> tif_flags
LEAF_NODE	2333:1	2333:1	8	tif
LEAF_NODE	2333:4	2333:4	8	->
LEAF_NODE	2333:6	2333:6	8	tif_flags
ASSIGN_OP	2333:16	2333:16	6	|=
LEAF_NODE	2333:16	2333:16	7	|=
RVAL	2333:19	2333:19	6	TIFF_DIRTYDIRECT
FIELD	2333:19	2333:19	7	TIFF_DIRTYDIRECT
LEAF_NODE	2333:19	2333:19	8	TIFF_DIRTYDIRECT
LEAF_NODE	2333:35	2333:35	4	;
JUMP_STATEMENT	2334:1	2334:11	3	return ( 1 ) ;
KEYWORD	2334:1	2334:1	4	return
LEAF_NODE	2334:1	2334:1	5	return
DESTINATION	2334:8	2334:8	4	( 1 )
EXPR	2334:8	2334:10	5	( 1 )
LEAF_NODE	2334:8	2334:8	6	(
FIELD	2334:9	2334:9	6	1
LEAF_NODE	2334:9	2334:9	7	1
LEAF_NODE	2334:10	2334:10	6	)
LEAF_NODE	2334:11	2334:11	4	;
LEAF_NODE	2335:0	2335:0	2	}
FUNCTION_DEF	2337:0	2362:0	1	
RETURN_TYPE	2337:0	2337:7	2	static int
LEAF_NODE	2337:0	2337:0	3	static
TYPE_NAME	2337:7	2337:7	3	int
LEAF_NODE	2337:7	2337:7	4	int
FUNCTION_NAME	2338:0	2338:0	2	JPEGVGetField
LEAF_NODE	2338:0	2338:0	3	JPEGVGetField
PARAMETER_LIST	2338:13	2338:47	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	2338:13	2338:13	3	(
PARAMETER_DECL	2338:14	2338:20	3	TIFF * tif
TYPE	2338:14	2338:18	4	TIFF *
TYPE_NAME	2338:14	2338:14	5	TIFF
LEAF_NODE	2338:14	2338:14	6	TIFF
POINTER	2338:18	2338:18	5	*
LEAF_NODE	2338:18	2338:18	6	*
NAME	2338:20	2338:20	4	tif
LEAF_NODE	2338:20	2338:20	5	tif
LEAF_NODE	2338:23	2338:23	3	,
PARAMETER_DECL	2338:25	2338:32	3	uint32 tag
TYPE	2338:25	2338:25	4	uint32
TYPE_NAME	2338:25	2338:25	5	uint32
LEAF_NODE	2338:25	2338:25	6	uint32
NAME	2338:32	2338:32	4	tag
LEAF_NODE	2338:32	2338:32	5	tag
LEAF_NODE	2338:35	2338:35	3	,
PARAMETER_DECL	2338:37	2338:45	3	va_list ap
TYPE	2338:37	2338:37	4	va_list
TYPE_NAME	2338:37	2338:37	5	va_list
LEAF_NODE	2338:37	2338:37	6	va_list
NAME	2338:45	2338:45	4	ap
LEAF_NODE	2338:45	2338:45	5	ap
LEAF_NODE	2338:47	2338:47	3	)
LEAF_NODE	2339:0	2339:0	2	{
STATEMENTS	2340:1	2361:1	2	
SIMPLE_DECL	2340:1	2340:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2340:1	2340:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2340:1	2340:10	5	JPEGState *
TYPE_NAME	2340:1	2340:1	6	JPEGState
LEAF_NODE	2340:1	2340:1	7	JPEGState
POINTER	2340:10	2340:10	6	*
LEAF_NODE	2340:10	2340:10	7	*
NAME	2340:12	2340:12	5	sp
LEAF_NODE	2340:12	2340:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2340:12	2340:12	5	sp = JState ( tif )
ASSIGN	2340:12	2340:17	6	sp = JState ( tif )
LVAL	2340:12	2340:12	7	sp
NAME	2340:12	2340:12	8	sp
LEAF_NODE	2340:12	2340:12	9	sp
ASSIGN_OP	2340:15	2340:15	7	=
LEAF_NODE	2340:15	2340:15	8	=
RVAL	2340:17	2340:17	7	JState ( tif )
FUNCTION_CALL	2340:17	2340:27	8	JState ( tif )
CALLEE	2340:17	2340:17	9	JState
LEAF_NODE	2340:17	2340:17	10	JState
LEAF_NODE	2340:23	2340:23	9	(
ARGUMENT	2340:24	2340:24	9	tif
FIELD	2340:24	2340:24	10	tif
LEAF_NODE	2340:24	2340:24	11	tif
LEAF_NODE	2340:27	2340:27	9	)
LEAF_NODE	2340:28	2340:28	4	;
EXPR_STATEMENT	2342:1	2342:19	3	assert ( sp != NULL ) ;
EXPR	2342:1	2342:1	4	assert ( sp != NULL )
FUNCTION_CALL	2342:1	2342:18	5	assert ( sp != NULL )
CALLEE	2342:1	2342:1	6	assert
LEAF_NODE	2342:1	2342:1	7	assert
LEAF_NODE	2342:7	2342:7	6	(
ARGUMENT	2342:8	2342:14	6	sp != NULL
FIELD	2342:8	2342:8	7	sp
LEAF_NODE	2342:8	2342:8	8	sp
EQ_OPERATOR	2342:11	2342:11	7	!=
LEAF_NODE	2342:11	2342:11	8	!=
FIELD	2342:14	2342:14	7	NULL
LEAF_NODE	2342:14	2342:14	8	NULL
LEAF_NODE	2342:18	2342:18	6	)
LEAF_NODE	2342:19	2342:19	4	;
SELECTION	2344:1	2344:14	3	
KEYWORD	2344:1	2344:1	4	switch
LEAF_NODE	2344:1	2344:1	5	switch
LEAF_NODE	2344:8	2344:8	4	(
CONDITION	2344:9	2344:9	4	tag
EXPR	2344:9	2344:9	5	tag
FIELD	2344:9	2344:9	6	tag
LEAF_NODE	2344:9	2344:9	7	tag
LEAF_NODE	2344:12	2344:12	4	)
STATEMENTS	2344:14	2360:1	4	
LEAF_NODE	2344:14	2344:14	5	{
STATEMENTS	2345:2	2359:3	5	
LABEL	2345:2	2345:25	6	case TIFFTAG_JPEGTABLES :
LEAF_NODE	2345:2	2345:2	7	case
LEAF_NODE	2345:7	2345:7	7	TIFFTAG_JPEGTABLES
LEAF_NODE	2345:25	2345:25	7	:
LEAF_NODE	2346:3	2346:3	6	*
LEAF_NODE	2346:4	2346:4	6	va_arg
LEAF_NODE	2346:10	2346:10	6	(
LEAF_NODE	2346:11	2346:11	6	ap
LEAF_NODE	2346:13	2346:13	6	,
LEAF_NODE	2346:15	2346:15	6	uint32
LEAF_NODE	2346:21	2346:21	6	*
LEAF_NODE	2346:22	2346:22	6	)
LEAF_NODE	2346:24	2346:24	6	=
EXPR_STATEMENT	2346:26	2346:47	6	sp -> jpegtables_length ;
EXPR	2346:26	2346:26	7	sp -> jpegtables_length
FIELD	2346:26	2346:30	8	sp -> jpegtables_length
LEAF_NODE	2346:26	2346:26	9	sp
LEAF_NODE	2346:28	2346:28	9	->
LEAF_NODE	2346:30	2346:30	9	jpegtables_length
LEAF_NODE	2346:47	2346:47	7	;
LEAF_NODE	2347:3	2347:3	6	*
LEAF_NODE	2347:4	2347:4	6	va_arg
LEAF_NODE	2347:10	2347:10	6	(
LEAF_NODE	2347:11	2347:11	6	ap
LEAF_NODE	2347:13	2347:13	6	,
LEAF_NODE	2347:15	2347:15	6	void
LEAF_NODE	2347:19	2347:19	6	*
LEAF_NODE	2347:20	2347:20	6	*
LEAF_NODE	2347:21	2347:21	6	)
LEAF_NODE	2347:23	2347:23	6	=
EXPR_STATEMENT	2347:25	2347:39	6	sp -> jpegtables ;
EXPR	2347:25	2347:25	7	sp -> jpegtables
FIELD	2347:25	2347:29	8	sp -> jpegtables
LEAF_NODE	2347:25	2347:25	9	sp
LEAF_NODE	2347:27	2347:27	9	->
LEAF_NODE	2347:29	2347:29	9	jpegtables
LEAF_NODE	2347:39	2347:39	7	;
JUMP_STATEMENT	2348:3	2348:8	6	break DESTINATION ;
KEYWORD	2348:3	2348:3	7	break
LEAF_NODE	2348:3	2348:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2348:8	2348:8	7	;
LABEL	2349:2	2349:26	6	case TIFFTAG_JPEGQUALITY :
LEAF_NODE	2349:2	2349:2	7	case
LEAF_NODE	2349:7	2349:7	7	TIFFTAG_JPEGQUALITY
LEAF_NODE	2349:26	2349:26	7	:
LEAF_NODE	2350:3	2350:3	6	*
LEAF_NODE	2350:4	2350:4	6	va_arg
LEAF_NODE	2350:10	2350:10	6	(
LEAF_NODE	2350:11	2350:11	6	ap
LEAF_NODE	2350:13	2350:13	6	,
LEAF_NODE	2350:15	2350:15	6	int
LEAF_NODE	2350:18	2350:18	6	*
LEAF_NODE	2350:19	2350:19	6	)
LEAF_NODE	2350:21	2350:21	6	=
EXPR_STATEMENT	2350:23	2350:38	6	sp -> jpegquality ;
EXPR	2350:23	2350:23	7	sp -> jpegquality
FIELD	2350:23	2350:27	8	sp -> jpegquality
LEAF_NODE	2350:23	2350:23	9	sp
LEAF_NODE	2350:25	2350:25	9	->
LEAF_NODE	2350:27	2350:27	9	jpegquality
LEAF_NODE	2350:38	2350:38	7	;
JUMP_STATEMENT	2351:3	2351:8	6	break DESTINATION ;
KEYWORD	2351:3	2351:3	7	break
LEAF_NODE	2351:3	2351:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2351:8	2351:8	7	;
LABEL	2352:2	2352:28	6	case TIFFTAG_JPEGCOLORMODE :
LEAF_NODE	2352:2	2352:2	7	case
LEAF_NODE	2352:7	2352:7	7	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	2352:28	2352:28	7	:
LEAF_NODE	2353:3	2353:3	6	*
LEAF_NODE	2353:4	2353:4	6	va_arg
LEAF_NODE	2353:10	2353:10	6	(
LEAF_NODE	2353:11	2353:11	6	ap
LEAF_NODE	2353:13	2353:13	6	,
LEAF_NODE	2353:15	2353:15	6	int
LEAF_NODE	2353:18	2353:18	6	*
LEAF_NODE	2353:19	2353:19	6	)
LEAF_NODE	2353:21	2353:21	6	=
EXPR_STATEMENT	2353:23	2353:40	6	sp -> jpegcolormode ;
EXPR	2353:23	2353:23	7	sp -> jpegcolormode
FIELD	2353:23	2353:27	8	sp -> jpegcolormode
LEAF_NODE	2353:23	2353:23	9	sp
LEAF_NODE	2353:25	2353:25	9	->
LEAF_NODE	2353:27	2353:27	9	jpegcolormode
LEAF_NODE	2353:40	2353:40	7	;
JUMP_STATEMENT	2354:3	2354:8	6	break DESTINATION ;
KEYWORD	2354:3	2354:3	7	break
LEAF_NODE	2354:3	2354:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2354:8	2354:8	7	;
LABEL	2355:2	2355:29	6	case TIFFTAG_JPEGTABLESMODE :
LEAF_NODE	2355:2	2355:2	7	case
LEAF_NODE	2355:7	2355:7	7	TIFFTAG_JPEGTABLESMODE
LEAF_NODE	2355:29	2355:29	7	:
LEAF_NODE	2356:3	2356:3	6	*
LEAF_NODE	2356:4	2356:4	6	va_arg
LEAF_NODE	2356:10	2356:10	6	(
LEAF_NODE	2356:11	2356:11	6	ap
LEAF_NODE	2356:13	2356:13	6	,
LEAF_NODE	2356:15	2356:15	6	int
LEAF_NODE	2356:18	2356:18	6	*
LEAF_NODE	2356:19	2356:19	6	)
LEAF_NODE	2356:21	2356:21	6	=
EXPR_STATEMENT	2356:23	2356:41	6	sp -> jpegtablesmode ;
EXPR	2356:23	2356:23	7	sp -> jpegtablesmode
FIELD	2356:23	2356:27	8	sp -> jpegtablesmode
LEAF_NODE	2356:23	2356:23	9	sp
LEAF_NODE	2356:25	2356:25	9	->
LEAF_NODE	2356:27	2356:27	9	jpegtablesmode
LEAF_NODE	2356:41	2356:41	7	;
JUMP_STATEMENT	2357:3	2357:8	6	break DESTINATION ;
KEYWORD	2357:3	2357:3	7	break
LEAF_NODE	2357:3	2357:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2357:8	2357:8	7	;
LABEL	2358:2	2358:9	6	default :
LEAF_NODE	2358:2	2358:2	7	default
LEAF_NODE	2358:9	2358:9	7	:
JUMP_STATEMENT	2359:3	2359:41	6	return ( * sp -> vgetparent ) ( tif , tag , ap ) ;
KEYWORD	2359:3	2359:3	7	return
LEAF_NODE	2359:3	2359:3	8	return
DESTINATION	2359:10	2359:10	7	( * sp -> vgetparent ) ( tif , tag , ap )
EXPR	2359:10	2359:10	8	( * sp -> vgetparent ) ( tif , tag , ap )
FUNCTION_CALL	2359:10	2359:40	9	( * sp -> vgetparent ) ( tif , tag , ap )
CALLEE	2359:10	2359:26	10	( * sp -> vgetparent )
LEAF_NODE	2359:10	2359:10	11	(
UNARY_EXPR	2359:11	2359:12	11	* sp -> vgetparent
UNARY_OPERATOR	2359:11	2359:11	12	*
LEAF_NODE	2359:11	2359:11	13	*
FIELD	2359:12	2359:16	12	sp -> vgetparent
LEAF_NODE	2359:12	2359:12	13	sp
LEAF_NODE	2359:14	2359:14	13	->
LEAF_NODE	2359:16	2359:16	13	vgetparent
LEAF_NODE	2359:26	2359:26	11	)
LEAF_NODE	2359:27	2359:27	10	(
ARGUMENT	2359:28	2359:28	10	tif
FIELD	2359:28	2359:28	11	tif
LEAF_NODE	2359:28	2359:28	12	tif
LEAF_NODE	2359:31	2359:31	10	,
ARGUMENT	2359:33	2359:33	10	tag
FIELD	2359:33	2359:33	11	tag
LEAF_NODE	2359:33	2359:33	12	tag
LEAF_NODE	2359:36	2359:36	10	,
ARGUMENT	2359:38	2359:38	10	ap
FIELD	2359:38	2359:38	11	ap
LEAF_NODE	2359:38	2359:38	12	ap
LEAF_NODE	2359:40	2359:40	10	)
LEAF_NODE	2359:41	2359:41	7	;
LEAF_NODE	2360:1	2360:1	5	}
JUMP_STATEMENT	2361:1	2361:11	3	return ( 1 ) ;
KEYWORD	2361:1	2361:1	4	return
LEAF_NODE	2361:1	2361:1	5	return
DESTINATION	2361:8	2361:8	4	( 1 )
EXPR	2361:8	2361:10	5	( 1 )
LEAF_NODE	2361:8	2361:8	6	(
FIELD	2361:9	2361:9	6	1
LEAF_NODE	2361:9	2361:9	7	1
LEAF_NODE	2361:10	2361:10	6	)
LEAF_NODE	2361:11	2361:11	4	;
LEAF_NODE	2362:0	2362:0	2	}
FUNCTION_DEF	2364:0	2379:0	1	
RETURN_TYPE	2364:0	2364:7	2	static void
LEAF_NODE	2364:0	2364:0	3	static
TYPE_NAME	2364:7	2364:7	3	void
LEAF_NODE	2364:7	2364:7	4	void
FUNCTION_NAME	2365:0	2365:0	2	JPEGPrintDir
LEAF_NODE	2365:0	2365:0	3	JPEGPrintDir
PARAMETER_LIST	2365:12	2365:44	2	( TIFF * tif , FILE * fd , long flags )
LEAF_NODE	2365:12	2365:12	3	(
PARAMETER_DECL	2365:13	2365:19	3	TIFF * tif
TYPE	2365:13	2365:17	4	TIFF *
TYPE_NAME	2365:13	2365:13	5	TIFF
LEAF_NODE	2365:13	2365:13	6	TIFF
POINTER	2365:17	2365:17	5	*
LEAF_NODE	2365:17	2365:17	6	*
NAME	2365:19	2365:19	4	tif
LEAF_NODE	2365:19	2365:19	5	tif
LEAF_NODE	2365:22	2365:22	3	,
PARAMETER_DECL	2365:24	2365:30	3	FILE * fd
TYPE	2365:24	2365:28	4	FILE *
TYPE_NAME	2365:24	2365:24	5	FILE
LEAF_NODE	2365:24	2365:24	6	FILE
POINTER	2365:28	2365:28	5	*
LEAF_NODE	2365:28	2365:28	6	*
NAME	2365:30	2365:30	4	fd
LEAF_NODE	2365:30	2365:30	5	fd
LEAF_NODE	2365:32	2365:32	3	,
PARAMETER_DECL	2365:34	2365:39	3	long flags
TYPE	2365:34	2365:34	4	long
TYPE_NAME	2365:34	2365:34	5	long
LEAF_NODE	2365:34	2365:34	6	long
NAME	2365:39	2365:39	4	flags
LEAF_NODE	2365:39	2365:39	5	flags
LEAF_NODE	2365:44	2365:44	3	)
LEAF_NODE	2366:0	2366:0	2	{
STATEMENTS	2367:1	2372:8	2	
SIMPLE_DECL	2367:1	2367:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2367:1	2367:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2367:1	2367:10	5	JPEGState *
TYPE_NAME	2367:1	2367:1	6	JPEGState
LEAF_NODE	2367:1	2367:1	7	JPEGState
POINTER	2367:10	2367:10	6	*
LEAF_NODE	2367:10	2367:10	7	*
NAME	2367:12	2367:12	5	sp
LEAF_NODE	2367:12	2367:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2367:12	2367:12	5	sp = JState ( tif )
ASSIGN	2367:12	2367:17	6	sp = JState ( tif )
LVAL	2367:12	2367:12	7	sp
NAME	2367:12	2367:12	8	sp
LEAF_NODE	2367:12	2367:12	9	sp
ASSIGN_OP	2367:15	2367:15	7	=
LEAF_NODE	2367:15	2367:15	8	=
RVAL	2367:17	2367:17	7	JState ( tif )
FUNCTION_CALL	2367:17	2367:27	8	JState ( tif )
CALLEE	2367:17	2367:17	9	JState
LEAF_NODE	2367:17	2367:17	10	JState
LEAF_NODE	2367:23	2367:23	9	(
ARGUMENT	2367:24	2367:24	9	tif
FIELD	2367:24	2367:24	10	tif
LEAF_NODE	2367:24	2367:24	11	tif
LEAF_NODE	2367:27	2367:27	9	)
LEAF_NODE	2367:28	2367:28	4	;
EXPR_STATEMENT	2369:1	2369:19	3	assert ( sp != NULL ) ;
EXPR	2369:1	2369:1	4	assert ( sp != NULL )
FUNCTION_CALL	2369:1	2369:18	5	assert ( sp != NULL )
CALLEE	2369:1	2369:1	6	assert
LEAF_NODE	2369:1	2369:1	7	assert
LEAF_NODE	2369:7	2369:7	6	(
ARGUMENT	2369:8	2369:14	6	sp != NULL
FIELD	2369:8	2369:8	7	sp
LEAF_NODE	2369:8	2369:8	8	sp
EQ_OPERATOR	2369:11	2369:11	7	!=
LEAF_NODE	2369:11	2369:11	8	!=
FIELD	2369:14	2369:14	7	NULL
LEAF_NODE	2369:14	2369:14	8	NULL
LEAF_NODE	2369:18	2369:18	6	)
LEAF_NODE	2369:19	2369:19	4	;
EXPR_STATEMENT	2370:1	2370:13	3	( void ) flags ;
EXPR	2370:1	2370:8	4	( void ) flags
LEAF_NODE	2370:1	2370:1	5	(
TYPE_NAME	2370:2	2370:2	5	void
LEAF_NODE	2370:2	2370:2	6	void
LEAF_NODE	2370:6	2370:6	5	)
FIELD	2370:8	2370:8	5	flags
LEAF_NODE	2370:8	2370:8	6	flags
LEAF_NODE	2370:13	2370:13	4	;
SELECTION	2372:8	2372:25	3	
KEYWORD	2372:8	2372:8	4	if
LEAF_NODE	2372:8	2372:8	5	if
LEAF_NODE	2372:10	2372:10	4	(
CONDITION	2372:12	2372:12	4	sp != NULL
EXPR	2372:12	2372:18	5	sp != NULL
FIELD	2372:12	2372:12	6	sp
LEAF_NODE	2372:12	2372:12	7	sp
EQ_OPERATOR	2372:15	2372:15	6	!=
LEAF_NODE	2372:15	2372:15	7	!=
FIELD	2372:18	2372:18	6	NULL
LEAF_NODE	2372:18	2372:18	7	NULL
LEAF_NODE	2372:23	2372:23	4	)
STATEMENTS	2372:25	2378:1	4	
LEAF_NODE	2372:25	2372:25	5	{
STATEMENTS	2373:2	2376:2	5	
SELECTION	2373:2	2374:3	6	
KEYWORD	2373:2	2373:2	7	if
LEAF_NODE	2373:2	2373:2	8	if
LEAF_NODE	2373:5	2373:5	7	(
CONDITION	2373:6	2373:6	7	TIFFFieldSet ( tif , FIELD_JPEGTABLES )
EXPR	2373:6	2373:6	8	TIFFFieldSet ( tif , FIELD_JPEGTABLES )
FUNCTION_CALL	2373:6	2373:39	9	TIFFFieldSet ( tif , FIELD_JPEGTABLES )
CALLEE	2373:6	2373:6	10	TIFFFieldSet
LEAF_NODE	2373:6	2373:6	11	TIFFFieldSet
LEAF_NODE	2373:18	2373:18	10	(
ARGUMENT	2373:19	2373:19	10	tif
FIELD	2373:19	2373:19	11	tif
LEAF_NODE	2373:19	2373:19	12	tif
LEAF_NODE	2373:22	2373:22	10	,
ARGUMENT	2373:23	2373:23	10	FIELD_JPEGTABLES
FIELD	2373:23	2373:23	11	FIELD_JPEGTABLES
LEAF_NODE	2373:23	2373:23	12	FIELD_JPEGTABLES
LEAF_NODE	2373:39	2373:39	10	)
LEAF_NODE	2373:40	2373:40	7	)
STATEMENTS	2374:3	2374:3	7	
EXPR_STATEMENT	2374:3	2375:42	8	fprintf ( fd , "  JPEG Tables: (%lu bytes)\n" , ( unsigned long ) sp -> jpegtables_length ) ;
EXPR	2374:3	2374:3	9	fprintf ( fd , "  JPEG Tables: (%lu bytes)\n" , ( unsigned long ) sp -> jpegtables_length )
FUNCTION_CALL	2374:3	2375:41	10	fprintf ( fd , "  JPEG Tables: (%lu bytes)\n" , ( unsigned long ) sp -> jpegtables_length )
CALLEE	2374:3	2374:3	11	fprintf
LEAF_NODE	2374:3	2374:3	12	fprintf
LEAF_NODE	2374:10	2374:10	11	(
ARGUMENT	2374:11	2374:11	11	fd
FIELD	2374:11	2374:11	12	fd
LEAF_NODE	2374:11	2374:11	13	fd
LEAF_NODE	2374:13	2374:13	11	,
ARGUMENT	2374:15	2374:15	11	"  JPEG Tables: (%lu bytes)\n"
FIELD	2374:15	2374:15	12	"  JPEG Tables: (%lu bytes)\n"
LEAF_NODE	2374:15	2374:15	13	"  JPEG Tables: (%lu bytes)\n"
LEAF_NODE	2374:45	2374:45	11	,
ARGUMENT	2375:4	2375:20	11	( unsigned long ) sp -> jpegtables_length
LEAF_NODE	2375:4	2375:4	12	(
TYPE_NAME	2375:5	2375:14	12	unsigned long
LEAF_NODE	2375:5	2375:5	13	unsigned
LEAF_NODE	2375:14	2375:14	13	long
LEAF_NODE	2375:18	2375:18	12	)
FIELD	2375:20	2375:24	12	sp -> jpegtables_length
LEAF_NODE	2375:20	2375:20	13	sp
LEAF_NODE	2375:22	2375:22	13	->
LEAF_NODE	2375:24	2375:24	13	jpegtables_length
LEAF_NODE	2375:41	2375:41	11	)
LEAF_NODE	2375:42	2375:42	9	;
SELECTION	2376:2	2377:3	6	
KEYWORD	2376:2	2376:2	7	if
LEAF_NODE	2376:2	2376:2	8	if
LEAF_NODE	2376:5	2376:5	7	(
CONDITION	2376:6	2376:6	7	sp -> printdir
EXPR	2376:6	2376:6	8	sp -> printdir
FIELD	2376:6	2376:10	9	sp -> printdir
LEAF_NODE	2376:6	2376:6	10	sp
LEAF_NODE	2376:8	2376:8	10	->
LEAF_NODE	2376:10	2376:10	10	printdir
LEAF_NODE	2376:18	2376:18	7	)
STATEMENTS	2377:3	2377:3	7	
EXPR_STATEMENT	2377:3	2377:34	8	( * sp -> printdir ) ( tif , fd , flags ) ;
EXPR	2377:3	2377:3	9	( * sp -> printdir ) ( tif , fd , flags )
FUNCTION_CALL	2377:3	2377:33	10	( * sp -> printdir ) ( tif , fd , flags )
CALLEE	2377:3	2377:17	11	( * sp -> printdir )
LEAF_NODE	2377:3	2377:3	12	(
UNARY_EXPR	2377:4	2377:5	12	* sp -> printdir
UNARY_OPERATOR	2377:4	2377:4	13	*
LEAF_NODE	2377:4	2377:4	14	*
FIELD	2377:5	2377:9	13	sp -> printdir
LEAF_NODE	2377:5	2377:5	14	sp
LEAF_NODE	2377:7	2377:7	14	->
LEAF_NODE	2377:9	2377:9	14	printdir
LEAF_NODE	2377:17	2377:17	12	)
LEAF_NODE	2377:18	2377:18	11	(
ARGUMENT	2377:19	2377:19	11	tif
FIELD	2377:19	2377:19	12	tif
LEAF_NODE	2377:19	2377:19	13	tif
LEAF_NODE	2377:22	2377:22	11	,
ARGUMENT	2377:24	2377:24	11	fd
FIELD	2377:24	2377:24	12	fd
LEAF_NODE	2377:24	2377:24	13	fd
LEAF_NODE	2377:26	2377:26	11	,
ARGUMENT	2377:28	2377:28	11	flags
FIELD	2377:28	2377:28	12	flags
LEAF_NODE	2377:28	2377:28	13	flags
LEAF_NODE	2377:33	2377:33	11	)
LEAF_NODE	2377:34	2377:34	9	;
LEAF_NODE	2378:1	2378:1	5	}
LEAF_NODE	2379:0	2379:0	2	}
FUNCTION_DEF	2381:0	2391:0	1	
RETURN_TYPE	2381:0	2381:7	2	static uint32
LEAF_NODE	2381:0	2381:0	3	static
TYPE_NAME	2381:7	2381:7	3	uint32
LEAF_NODE	2381:7	2381:7	4	uint32
FUNCTION_NAME	2382:0	2382:0	2	JPEGDefaultStripSize
LEAF_NODE	2382:0	2382:0	3	JPEGDefaultStripSize
PARAMETER_LIST	2382:20	2382:40	2	( TIFF * tif , uint32 s )
LEAF_NODE	2382:20	2382:20	3	(
PARAMETER_DECL	2382:21	2382:27	3	TIFF * tif
TYPE	2382:21	2382:25	4	TIFF *
TYPE_NAME	2382:21	2382:21	5	TIFF
LEAF_NODE	2382:21	2382:21	6	TIFF
POINTER	2382:25	2382:25	5	*
LEAF_NODE	2382:25	2382:25	6	*
NAME	2382:27	2382:27	4	tif
LEAF_NODE	2382:27	2382:27	5	tif
LEAF_NODE	2382:30	2382:30	3	,
PARAMETER_DECL	2382:32	2382:39	3	uint32 s
TYPE	2382:32	2382:32	4	uint32
TYPE_NAME	2382:32	2382:32	5	uint32
LEAF_NODE	2382:32	2382:32	6	uint32
NAME	2382:39	2382:39	4	s
LEAF_NODE	2382:39	2382:39	5	s
LEAF_NODE	2382:40	2382:40	3	)
LEAF_NODE	2383:0	2383:0	2	{
STATEMENTS	2384:1	2390:11	2	
SIMPLE_DECL	2384:1	2384:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2384:1	2384:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2384:1	2384:10	5	JPEGState *
TYPE_NAME	2384:1	2384:1	6	JPEGState
LEAF_NODE	2384:1	2384:1	7	JPEGState
POINTER	2384:10	2384:10	6	*
LEAF_NODE	2384:10	2384:10	7	*
NAME	2384:12	2384:12	5	sp
LEAF_NODE	2384:12	2384:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2384:12	2384:12	5	sp = JState ( tif )
ASSIGN	2384:12	2384:17	6	sp = JState ( tif )
LVAL	2384:12	2384:12	7	sp
NAME	2384:12	2384:12	8	sp
LEAF_NODE	2384:12	2384:12	9	sp
ASSIGN_OP	2384:15	2384:15	7	=
LEAF_NODE	2384:15	2384:15	8	=
RVAL	2384:17	2384:17	7	JState ( tif )
FUNCTION_CALL	2384:17	2384:27	8	JState ( tif )
CALLEE	2384:17	2384:17	9	JState
LEAF_NODE	2384:17	2384:17	10	JState
LEAF_NODE	2384:23	2384:23	9	(
ARGUMENT	2384:24	2384:24	9	tif
FIELD	2384:24	2384:24	10	tif
LEAF_NODE	2384:24	2384:24	11	tif
LEAF_NODE	2384:27	2384:27	9	)
LEAF_NODE	2384:28	2384:28	4	;
SIMPLE_DECL	2385:1	2385:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	2385:1	2385:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	2385:1	2385:15	5	TIFFDirectory *
TYPE_NAME	2385:1	2385:1	6	TIFFDirectory
LEAF_NODE	2385:1	2385:1	7	TIFFDirectory
POINTER	2385:15	2385:15	6	*
LEAF_NODE	2385:15	2385:15	7	*
NAME	2385:16	2385:16	5	td
LEAF_NODE	2385:16	2385:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	2385:16	2385:16	5	td = & tif -> tif_dir
ASSIGN	2385:16	2385:21	6	td = & tif -> tif_dir
LVAL	2385:16	2385:16	7	td
NAME	2385:16	2385:16	8	td
LEAF_NODE	2385:16	2385:16	9	td
ASSIGN_OP	2385:19	2385:19	7	=
LEAF_NODE	2385:19	2385:19	8	=
RVAL	2385:21	2385:21	7	& tif -> tif_dir
UNARY_EXPR	2385:21	2385:22	8	& tif -> tif_dir
UNARY_OPERATOR	2385:21	2385:21	9	&
LEAF_NODE	2385:21	2385:21	10	&
FIELD	2385:22	2385:27	9	tif -> tif_dir
LEAF_NODE	2385:22	2385:22	10	tif
LEAF_NODE	2385:25	2385:25	10	->
LEAF_NODE	2385:27	2385:27	10	tif_dir
LEAF_NODE	2385:34	2385:34	4	;
EXPR_STATEMENT	2387:1	2387:30	3	s = ( * sp -> defsparent ) ( tif , s ) ;
EXPR	2387:1	2387:1	4	s = ( * sp -> defsparent ) ( tif , s )
ASSIGN	2387:1	2387:5	5	s = ( * sp -> defsparent ) ( tif , s )
LVAL	2387:1	2387:1	6	s
FIELD	2387:1	2387:1	7	s
LEAF_NODE	2387:1	2387:1	8	s
ASSIGN_OP	2387:3	2387:3	6	=
LEAF_NODE	2387:3	2387:3	7	=
RVAL	2387:5	2387:5	6	( * sp -> defsparent ) ( tif , s )
FUNCTION_CALL	2387:5	2387:29	7	( * sp -> defsparent ) ( tif , s )
CALLEE	2387:5	2387:21	8	( * sp -> defsparent )
LEAF_NODE	2387:5	2387:5	9	(
UNARY_EXPR	2387:6	2387:7	9	* sp -> defsparent
UNARY_OPERATOR	2387:6	2387:6	10	*
LEAF_NODE	2387:6	2387:6	11	*
FIELD	2387:7	2387:11	10	sp -> defsparent
LEAF_NODE	2387:7	2387:7	11	sp
LEAF_NODE	2387:9	2387:9	11	->
LEAF_NODE	2387:11	2387:11	11	defsparent
LEAF_NODE	2387:21	2387:21	9	)
LEAF_NODE	2387:22	2387:22	8	(
ARGUMENT	2387:23	2387:23	8	tif
FIELD	2387:23	2387:23	9	tif
LEAF_NODE	2387:23	2387:23	10	tif
LEAF_NODE	2387:26	2387:26	8	,
ARGUMENT	2387:28	2387:28	8	s
FIELD	2387:28	2387:28	9	s
LEAF_NODE	2387:28	2387:28	10	s
LEAF_NODE	2387:29	2387:29	8	)
LEAF_NODE	2387:30	2387:30	4	;
SELECTION	2388:1	2389:2	3	
KEYWORD	2388:1	2388:1	4	if
LEAF_NODE	2388:1	2388:1	5	if
LEAF_NODE	2388:4	2388:4	4	(
CONDITION	2388:5	2388:5	4	s < td -> td_imagelength
EXPR	2388:5	2388:9	5	s < td -> td_imagelength
FIELD	2388:5	2388:5	6	s
LEAF_NODE	2388:5	2388:5	7	s
REL_OPERATOR	2388:7	2388:7	6	<
LEAF_NODE	2388:7	2388:7	7	<
FIELD	2388:9	2388:13	6	td -> td_imagelength
LEAF_NODE	2388:9	2388:9	7	td
LEAF_NODE	2388:11	2388:11	7	->
LEAF_NODE	2388:13	2388:13	7	td_imagelength
LEAF_NODE	2388:27	2388:27	4	)
STATEMENTS	2389:2	2389:2	4	
EXPR_STATEMENT	2389:2	2389:61	5	s = TIFFroundup_32 ( s , td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE ) ;
EXPR	2389:2	2389:2	6	s = TIFFroundup_32 ( s , td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE )
ASSIGN	2389:2	2389:6	7	s = TIFFroundup_32 ( s , td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE )
LVAL	2389:2	2389:2	8	s
FIELD	2389:2	2389:2	9	s
LEAF_NODE	2389:2	2389:2	10	s
ASSIGN_OP	2389:4	2389:4	8	=
LEAF_NODE	2389:4	2389:4	9	=
RVAL	2389:6	2389:6	8	TIFFroundup_32 ( s , td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE )
FUNCTION_CALL	2389:6	2389:60	9	TIFFroundup_32 ( s , td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE )
CALLEE	2389:6	2389:6	10	TIFFroundup_32
LEAF_NODE	2389:6	2389:6	11	TIFFroundup_32
LEAF_NODE	2389:20	2389:20	10	(
ARGUMENT	2389:21	2389:21	10	s
FIELD	2389:21	2389:21	11	s
LEAF_NODE	2389:21	2389:21	12	s
LEAF_NODE	2389:22	2389:22	10	,
ARGUMENT	2389:24	2389:53	10	td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE
FIELD	2389:24	2389:49	11	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	2389:24	2389:24	12	td
LEAF_NODE	2389:26	2389:26	12	->
LEAF_NODE	2389:28	2389:28	12	td_ycbcrsubsampling
LEAF_NODE	2389:47	2389:47	12	[
EXPR	2389:48	2389:48	12	1
FIELD	2389:48	2389:48	13	1
LEAF_NODE	2389:48	2389:48	14	1
LEAF_NODE	2389:49	2389:49	12	]
LEAF_NODE	2389:51	2389:51	11	*
FIELD	2389:53	2389:53	11	DCTSIZE
LEAF_NODE	2389:53	2389:53	12	DCTSIZE
LEAF_NODE	2389:60	2389:60	10	)
LEAF_NODE	2389:61	2389:61	6	;
LEAF_NODE	2390:1	2390:1	3	return
LEAF_NODE	2390:8	2390:8	3	(
LEAF_NODE	2390:9	2390:9	3	s
LEAF_NODE	2390:10	2390:10	3	)
LEAF_NODE	2390:11	2390:11	3	;
LEAF_NODE	2391:0	2391:0	2	}
FUNCTION_DEF	2393:0	2402:0	1	
RETURN_TYPE	2393:0	2393:7	2	static void
LEAF_NODE	2393:0	2393:0	3	static
TYPE_NAME	2393:7	2393:7	3	void
LEAF_NODE	2393:7	2393:7	4	void
FUNCTION_NAME	2394:0	2394:0	2	JPEGDefaultTileSize
LEAF_NODE	2394:0	2394:0	3	JPEGDefaultTileSize
PARAMETER_LIST	2394:19	2394:53	2	( TIFF * tif , uint32 * tw , uint32 * th )
LEAF_NODE	2394:19	2394:19	3	(
PARAMETER_DECL	2394:20	2394:26	3	TIFF * tif
TYPE	2394:20	2394:24	4	TIFF *
TYPE_NAME	2394:20	2394:20	5	TIFF
LEAF_NODE	2394:20	2394:20	6	TIFF
POINTER	2394:24	2394:24	5	*
LEAF_NODE	2394:24	2394:24	6	*
NAME	2394:26	2394:26	4	tif
LEAF_NODE	2394:26	2394:26	5	tif
LEAF_NODE	2394:29	2394:29	3	,
PARAMETER_DECL	2394:31	2394:39	3	uint32 * tw
TYPE	2394:31	2394:37	4	uint32 *
TYPE_NAME	2394:31	2394:31	5	uint32
LEAF_NODE	2394:31	2394:31	6	uint32
POINTER	2394:37	2394:37	5	*
LEAF_NODE	2394:37	2394:37	6	*
NAME	2394:39	2394:39	4	tw
LEAF_NODE	2394:39	2394:39	5	tw
LEAF_NODE	2394:41	2394:41	3	,
PARAMETER_DECL	2394:43	2394:51	3	uint32 * th
TYPE	2394:43	2394:49	4	uint32 *
TYPE_NAME	2394:43	2394:43	5	uint32
LEAF_NODE	2394:43	2394:43	6	uint32
POINTER	2394:49	2394:49	5	*
LEAF_NODE	2394:49	2394:49	6	*
NAME	2394:51	2394:51	4	th
LEAF_NODE	2394:51	2394:51	5	th
LEAF_NODE	2394:53	2394:53	3	)
LEAF_NODE	2395:0	2395:0	2	{
STATEMENTS	2396:1	2401:1	2	
SIMPLE_DECL	2396:1	2396:28	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2396:1	2396:12	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2396:1	2396:10	5	JPEGState *
TYPE_NAME	2396:1	2396:1	6	JPEGState
LEAF_NODE	2396:1	2396:1	7	JPEGState
POINTER	2396:10	2396:10	6	*
LEAF_NODE	2396:10	2396:10	7	*
NAME	2396:12	2396:12	5	sp
LEAF_NODE	2396:12	2396:12	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2396:12	2396:12	5	sp = JState ( tif )
ASSIGN	2396:12	2396:17	6	sp = JState ( tif )
LVAL	2396:12	2396:12	7	sp
NAME	2396:12	2396:12	8	sp
LEAF_NODE	2396:12	2396:12	9	sp
ASSIGN_OP	2396:15	2396:15	7	=
LEAF_NODE	2396:15	2396:15	8	=
RVAL	2396:17	2396:17	7	JState ( tif )
FUNCTION_CALL	2396:17	2396:27	8	JState ( tif )
CALLEE	2396:17	2396:17	9	JState
LEAF_NODE	2396:17	2396:17	10	JState
LEAF_NODE	2396:23	2396:23	9	(
ARGUMENT	2396:24	2396:24	9	tif
FIELD	2396:24	2396:24	10	tif
LEAF_NODE	2396:24	2396:24	11	tif
LEAF_NODE	2396:27	2396:27	9	)
LEAF_NODE	2396:28	2396:28	4	;
SIMPLE_DECL	2397:1	2397:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	2397:1	2397:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	2397:1	2397:15	5	TIFFDirectory *
TYPE_NAME	2397:1	2397:1	6	TIFFDirectory
LEAF_NODE	2397:1	2397:1	7	TIFFDirectory
POINTER	2397:15	2397:15	6	*
LEAF_NODE	2397:15	2397:15	7	*
NAME	2397:16	2397:16	5	td
LEAF_NODE	2397:16	2397:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	2397:16	2397:16	5	td = & tif -> tif_dir
ASSIGN	2397:16	2397:21	6	td = & tif -> tif_dir
LVAL	2397:16	2397:16	7	td
NAME	2397:16	2397:16	8	td
LEAF_NODE	2397:16	2397:16	9	td
ASSIGN_OP	2397:19	2397:19	7	=
LEAF_NODE	2397:19	2397:19	8	=
RVAL	2397:21	2397:21	7	& tif -> tif_dir
UNARY_EXPR	2397:21	2397:22	8	& tif -> tif_dir
UNARY_OPERATOR	2397:21	2397:21	9	&
LEAF_NODE	2397:21	2397:21	10	&
FIELD	2397:22	2397:27	9	tif -> tif_dir
LEAF_NODE	2397:22	2397:22	10	tif
LEAF_NODE	2397:25	2397:25	10	->
LEAF_NODE	2397:27	2397:27	10	tif_dir
LEAF_NODE	2397:34	2397:34	4	;
EXPR_STATEMENT	2399:1	2399:31	3	( * sp -> deftparent ) ( tif , tw , th ) ;
EXPR	2399:1	2399:1	4	( * sp -> deftparent ) ( tif , tw , th )
FUNCTION_CALL	2399:1	2399:30	5	( * sp -> deftparent ) ( tif , tw , th )
CALLEE	2399:1	2399:17	6	( * sp -> deftparent )
LEAF_NODE	2399:1	2399:1	7	(
UNARY_EXPR	2399:2	2399:3	7	* sp -> deftparent
UNARY_OPERATOR	2399:2	2399:2	8	*
LEAF_NODE	2399:2	2399:2	9	*
FIELD	2399:3	2399:7	8	sp -> deftparent
LEAF_NODE	2399:3	2399:3	9	sp
LEAF_NODE	2399:5	2399:5	9	->
LEAF_NODE	2399:7	2399:7	9	deftparent
LEAF_NODE	2399:17	2399:17	7	)
LEAF_NODE	2399:18	2399:18	6	(
ARGUMENT	2399:19	2399:19	6	tif
FIELD	2399:19	2399:19	7	tif
LEAF_NODE	2399:19	2399:19	8	tif
LEAF_NODE	2399:22	2399:22	6	,
ARGUMENT	2399:24	2399:24	6	tw
FIELD	2399:24	2399:24	7	tw
LEAF_NODE	2399:24	2399:24	8	tw
LEAF_NODE	2399:26	2399:26	6	,
ARGUMENT	2399:28	2399:28	6	th
FIELD	2399:28	2399:28	7	th
LEAF_NODE	2399:28	2399:28	8	th
LEAF_NODE	2399:30	2399:30	6	)
LEAF_NODE	2399:31	2399:31	4	;
EXPR_STATEMENT	2400:1	2400:64	3	* tw = TIFFroundup_32 ( * tw , td -> td_ycbcrsubsampling [ 0 ] * DCTSIZE ) ;
EXPR	2400:1	2400:1	4	* tw = TIFFroundup_32 ( * tw , td -> td_ycbcrsubsampling [ 0 ] * DCTSIZE )
ASSIGN	2400:1	2400:7	5	* tw = TIFFroundup_32 ( * tw , td -> td_ycbcrsubsampling [ 0 ] * DCTSIZE )
LVAL	2400:1	2400:1	6	* tw
UNARY_EXPR	2400:1	2400:2	7	* tw
UNARY_OPERATOR	2400:1	2400:1	8	*
LEAF_NODE	2400:1	2400:1	9	*
FIELD	2400:2	2400:2	8	tw
LEAF_NODE	2400:2	2400:2	9	tw
ASSIGN_OP	2400:5	2400:5	6	=
LEAF_NODE	2400:5	2400:5	7	=
RVAL	2400:7	2400:7	6	TIFFroundup_32 ( * tw , td -> td_ycbcrsubsampling [ 0 ] * DCTSIZE )
FUNCTION_CALL	2400:7	2400:63	7	TIFFroundup_32 ( * tw , td -> td_ycbcrsubsampling [ 0 ] * DCTSIZE )
CALLEE	2400:7	2400:7	8	TIFFroundup_32
LEAF_NODE	2400:7	2400:7	9	TIFFroundup_32
LEAF_NODE	2400:21	2400:21	8	(
ARGUMENT	2400:22	2400:22	8	* tw
UNARY_EXPR	2400:22	2400:23	9	* tw
UNARY_OPERATOR	2400:22	2400:22	10	*
LEAF_NODE	2400:22	2400:22	11	*
FIELD	2400:23	2400:23	10	tw
LEAF_NODE	2400:23	2400:23	11	tw
LEAF_NODE	2400:25	2400:25	8	,
ARGUMENT	2400:27	2400:56	8	td -> td_ycbcrsubsampling [ 0 ] * DCTSIZE
FIELD	2400:27	2400:52	9	td -> td_ycbcrsubsampling [ 0 ]
LEAF_NODE	2400:27	2400:27	10	td
LEAF_NODE	2400:29	2400:29	10	->
LEAF_NODE	2400:31	2400:31	10	td_ycbcrsubsampling
LEAF_NODE	2400:50	2400:50	10	[
EXPR	2400:51	2400:51	10	0
FIELD	2400:51	2400:51	11	0
LEAF_NODE	2400:51	2400:51	12	0
LEAF_NODE	2400:52	2400:52	10	]
LEAF_NODE	2400:54	2400:54	9	*
FIELD	2400:56	2400:56	9	DCTSIZE
LEAF_NODE	2400:56	2400:56	10	DCTSIZE
LEAF_NODE	2400:63	2400:63	8	)
LEAF_NODE	2400:64	2400:64	4	;
EXPR_STATEMENT	2401:1	2401:64	3	* th = TIFFroundup_32 ( * th , td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE ) ;
EXPR	2401:1	2401:1	4	* th = TIFFroundup_32 ( * th , td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE )
ASSIGN	2401:1	2401:7	5	* th = TIFFroundup_32 ( * th , td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE )
LVAL	2401:1	2401:1	6	* th
UNARY_EXPR	2401:1	2401:2	7	* th
UNARY_OPERATOR	2401:1	2401:1	8	*
LEAF_NODE	2401:1	2401:1	9	*
FIELD	2401:2	2401:2	8	th
LEAF_NODE	2401:2	2401:2	9	th
ASSIGN_OP	2401:5	2401:5	6	=
LEAF_NODE	2401:5	2401:5	7	=
RVAL	2401:7	2401:7	6	TIFFroundup_32 ( * th , td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE )
FUNCTION_CALL	2401:7	2401:63	7	TIFFroundup_32 ( * th , td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE )
CALLEE	2401:7	2401:7	8	TIFFroundup_32
LEAF_NODE	2401:7	2401:7	9	TIFFroundup_32
LEAF_NODE	2401:21	2401:21	8	(
ARGUMENT	2401:22	2401:22	8	* th
UNARY_EXPR	2401:22	2401:23	9	* th
UNARY_OPERATOR	2401:22	2401:22	10	*
LEAF_NODE	2401:22	2401:22	11	*
FIELD	2401:23	2401:23	10	th
LEAF_NODE	2401:23	2401:23	11	th
LEAF_NODE	2401:25	2401:25	8	,
ARGUMENT	2401:27	2401:56	8	td -> td_ycbcrsubsampling [ 1 ] * DCTSIZE
FIELD	2401:27	2401:52	9	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	2401:27	2401:27	10	td
LEAF_NODE	2401:29	2401:29	10	->
LEAF_NODE	2401:31	2401:31	10	td_ycbcrsubsampling
LEAF_NODE	2401:50	2401:50	10	[
EXPR	2401:51	2401:51	10	1
FIELD	2401:51	2401:51	11	1
LEAF_NODE	2401:51	2401:51	12	1
LEAF_NODE	2401:52	2401:52	10	]
LEAF_NODE	2401:54	2401:54	9	*
FIELD	2401:56	2401:56	9	DCTSIZE
LEAF_NODE	2401:56	2401:56	10	DCTSIZE
LEAF_NODE	2401:63	2401:63	8	)
LEAF_NODE	2401:64	2401:64	4	;
LEAF_NODE	2402:0	2402:0	2	}
FUNCTION_DEF	2426:0	2475:0	1	
RETURN_TYPE	2426:0	2426:7	2	static int
LEAF_NODE	2426:0	2426:0	3	static
TYPE_NAME	2426:7	2426:7	3	int
LEAF_NODE	2426:7	2426:7	4	int
FUNCTION_NAME	2426:11	2426:11	2	JPEGInitializeLibJPEG
LEAF_NODE	2426:11	2426:11	3	JPEGInitializeLibJPEG
PARAMETER_LIST	2426:32	2426:61	2	( TIFF * tif , int decompress )
LEAF_NODE	2426:32	2426:32	3	(
PARAMETER_DECL	2426:34	2426:41	3	TIFF * tif
TYPE	2426:34	2426:39	4	TIFF *
TYPE_NAME	2426:34	2426:34	5	TIFF
LEAF_NODE	2426:34	2426:34	6	TIFF
POINTER	2426:39	2426:39	5	*
LEAF_NODE	2426:39	2426:39	6	*
NAME	2426:41	2426:41	4	tif
LEAF_NODE	2426:41	2426:41	5	tif
LEAF_NODE	2426:44	2426:44	3	,
PARAMETER_DECL	2426:46	2426:50	3	int decompress
TYPE	2426:46	2426:46	4	int
TYPE_NAME	2426:46	2426:46	5	int
LEAF_NODE	2426:46	2426:46	6	int
NAME	2426:50	2426:50	4	decompress
LEAF_NODE	2426:50	2426:50	5	decompress
LEAF_NODE	2426:61	2426:61	3	)
LEAF_NODE	2427:0	2427:0	2	{
STATEMENTS	2428:4	2474:4	2	
SIMPLE_DECL	2428:4	2428:31	3	JPEGState * sp ; sp = JState ( tif ) ;
VAR_DECL	2428:4	2428:15	4	JPEGState * sp ; sp = JState ( tif )
TYPE	2428:4	2428:13	5	JPEGState *
TYPE_NAME	2428:4	2428:4	6	JPEGState
LEAF_NODE	2428:4	2428:4	7	JPEGState
POINTER	2428:13	2428:13	6	*
LEAF_NODE	2428:13	2428:13	7	*
NAME	2428:15	2428:15	5	sp
LEAF_NODE	2428:15	2428:15	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2428:15	2428:15	5	sp = JState ( tif )
ASSIGN	2428:15	2428:20	6	sp = JState ( tif )
LVAL	2428:15	2428:15	7	sp
NAME	2428:15	2428:15	8	sp
LEAF_NODE	2428:15	2428:15	9	sp
ASSIGN_OP	2428:18	2428:18	7	=
LEAF_NODE	2428:18	2428:18	8	=
RVAL	2428:20	2428:20	7	JState ( tif )
FUNCTION_CALL	2428:20	2428:30	8	JState ( tif )
CALLEE	2428:20	2428:20	9	JState
LEAF_NODE	2428:20	2428:20	10	JState
LEAF_NODE	2428:26	2428:26	9	(
ARGUMENT	2428:27	2428:27	9	tif
FIELD	2428:27	2428:27	10	tif
LEAF_NODE	2428:27	2428:27	11	tif
LEAF_NODE	2428:30	2428:30	9	)
LEAF_NODE	2428:31	2428:31	4	;
SELECTION	2430:4	2431:4	3	
KEYWORD	2430:4	2430:4	4	if
LEAF_NODE	2430:4	2430:4	5	if
LEAF_NODE	2430:6	2430:6	4	(
CONDITION	2430:7	2430:7	4	sp -> cinfo_initialized
EXPR	2430:7	2430:7	5	sp -> cinfo_initialized
FIELD	2430:7	2430:11	6	sp -> cinfo_initialized
LEAF_NODE	2430:7	2430:7	7	sp
LEAF_NODE	2430:9	2430:9	7	->
LEAF_NODE	2430:11	2430:11	7	cinfo_initialized
LEAF_NODE	2430:28	2430:28	4	)
STATEMENTS	2431:4	2440:4	4	
LEAF_NODE	2431:4	2431:4	5	{
STATEMENTS	2432:8	2439:8	5	
SELECTION	2432:8	2433:12	6	
KEYWORD	2432:8	2432:8	7	if
LEAF_NODE	2432:8	2432:8	8	if
LEAF_NODE	2432:10	2432:10	7	(
CONDITION	2432:12	2432:12	7	! decompress && sp -> cinfo . comm . is_decompressor
EXPR	2432:12	2432:12	8	! decompress && sp -> cinfo . comm . is_decompressor
AND	2432:12	2432:27	9	! decompress && sp -> cinfo . comm . is_decompressor
EXPR	2432:12	2432:12	10	! decompress
UNARY_EXPR	2432:12	2432:13	11	! decompress
UNARY_OPERATOR	2432:12	2432:12	12	!
LEAF_NODE	2432:12	2432:12	13	!
FIELD	2432:13	2432:13	12	decompress
LEAF_NODE	2432:13	2432:13	13	decompress
LEAF_NODE	2432:24	2432:24	10	&&
EXPR	2432:27	2432:27	10	sp -> cinfo . comm . is_decompressor
FIELD	2432:27	2432:42	11	sp -> cinfo . comm . is_decompressor
LEAF_NODE	2432:27	2432:27	12	sp
LEAF_NODE	2432:29	2432:29	12	->
LEAF_NODE	2432:31	2432:31	12	cinfo
LEAF_NODE	2432:36	2432:36	12	.
LEAF_NODE	2432:37	2432:37	12	comm
LEAF_NODE	2432:41	2432:41	12	.
LEAF_NODE	2432:42	2432:42	12	is_decompressor
LEAF_NODE	2432:58	2432:58	7	)
STATEMENTS	2433:12	2433:12	7	
EXPR_STATEMENT	2433:12	2433:34	8	TIFFjpeg_destroy ( sp ) ;
EXPR	2433:12	2433:12	9	TIFFjpeg_destroy ( sp )
FUNCTION_CALL	2433:12	2433:33	10	TIFFjpeg_destroy ( sp )
CALLEE	2433:12	2433:12	11	TIFFjpeg_destroy
LEAF_NODE	2433:12	2433:12	12	TIFFjpeg_destroy
LEAF_NODE	2433:28	2433:28	11	(
ARGUMENT	2433:30	2433:30	11	sp
FIELD	2433:30	2433:30	12	sp
LEAF_NODE	2433:30	2433:30	13	sp
LEAF_NODE	2433:33	2433:33	11	)
LEAF_NODE	2433:34	2433:34	9	;
SELECTION	2434:8	2434:13	6	
KEYWORD	2434:8	2434:8	7	else
LEAF_NODE	2434:8	2434:8	8	else
STATEMENTS	2434:13	2434:13	7	
SELECTION	2434:13	2435:12	8	
KEYWORD	2434:13	2434:13	9	if
LEAF_NODE	2434:13	2434:13	10	if
LEAF_NODE	2434:15	2434:15	9	(
CONDITION	2434:17	2434:17	9	decompress && ! sp -> cinfo . comm . is_decompressor
EXPR	2434:17	2434:17	10	decompress && ! sp -> cinfo . comm . is_decompressor
AND	2434:17	2434:31	11	decompress && ! sp -> cinfo . comm . is_decompressor
EXPR	2434:17	2434:17	12	decompress
FIELD	2434:17	2434:17	13	decompress
LEAF_NODE	2434:17	2434:17	14	decompress
LEAF_NODE	2434:28	2434:28	12	&&
EXPR	2434:31	2434:31	12	! sp -> cinfo . comm . is_decompressor
UNARY_EXPR	2434:31	2434:32	13	! sp -> cinfo . comm . is_decompressor
UNARY_OPERATOR	2434:31	2434:31	14	!
LEAF_NODE	2434:31	2434:31	15	!
FIELD	2434:32	2434:47	14	sp -> cinfo . comm . is_decompressor
LEAF_NODE	2434:32	2434:32	15	sp
LEAF_NODE	2434:34	2434:34	15	->
LEAF_NODE	2434:36	2434:36	15	cinfo
LEAF_NODE	2434:41	2434:41	15	.
LEAF_NODE	2434:42	2434:42	15	comm
LEAF_NODE	2434:46	2434:46	15	.
LEAF_NODE	2434:47	2434:47	15	is_decompressor
LEAF_NODE	2434:63	2434:63	9	)
STATEMENTS	2435:12	2435:12	9	
EXPR_STATEMENT	2435:12	2435:34	10	TIFFjpeg_destroy ( sp ) ;
EXPR	2435:12	2435:12	11	TIFFjpeg_destroy ( sp )
FUNCTION_CALL	2435:12	2435:33	12	TIFFjpeg_destroy ( sp )
CALLEE	2435:12	2435:12	13	TIFFjpeg_destroy
LEAF_NODE	2435:12	2435:12	14	TIFFjpeg_destroy
LEAF_NODE	2435:28	2435:28	13	(
ARGUMENT	2435:30	2435:30	13	sp
FIELD	2435:30	2435:30	14	sp
LEAF_NODE	2435:30	2435:30	15	sp
LEAF_NODE	2435:33	2435:33	13	)
LEAF_NODE	2435:34	2435:34	11	;
SELECTION	2436:8	2437:12	6	
KEYWORD	2436:8	2436:8	7	else
LEAF_NODE	2436:8	2436:8	8	else
STATEMENTS	2437:12	2437:12	7	
JUMP_STATEMENT	2437:12	2437:20	8	return 1 ;
KEYWORD	2437:12	2437:12	9	return
LEAF_NODE	2437:12	2437:12	10	return
DESTINATION	2437:19	2437:19	9	1
EXPR	2437:19	2437:19	10	1
FIELD	2437:19	2437:19	11	1
LEAF_NODE	2437:19	2437:19	12	1
LEAF_NODE	2437:20	2437:20	9	;
EXPR_STATEMENT	2439:8	2439:33	6	sp -> cinfo_initialized = 0 ;
EXPR	2439:8	2439:8	7	sp -> cinfo_initialized = 0
ASSIGN	2439:8	2439:32	8	sp -> cinfo_initialized = 0
LVAL	2439:8	2439:8	9	sp -> cinfo_initialized
FIELD	2439:8	2439:12	10	sp -> cinfo_initialized
LEAF_NODE	2439:8	2439:8	11	sp
LEAF_NODE	2439:10	2439:10	11	->
LEAF_NODE	2439:12	2439:12	11	cinfo_initialized
ASSIGN_OP	2439:30	2439:30	9	=
LEAF_NODE	2439:30	2439:30	10	=
RVAL	2439:32	2439:32	9	0
FIELD	2439:32	2439:32	10	0
LEAF_NODE	2439:32	2439:32	11	0
LEAF_NODE	2439:33	2439:33	7	;
LEAF_NODE	2440:4	2440:4	5	}
SELECTION	2445:4	2445:22	3	
KEYWORD	2445:4	2445:4	4	if
LEAF_NODE	2445:4	2445:4	5	if
LEAF_NODE	2445:7	2445:7	4	(
CONDITION	2445:9	2445:9	4	decompress
EXPR	2445:9	2445:9	5	decompress
FIELD	2445:9	2445:9	6	decompress
LEAF_NODE	2445:9	2445:9	7	decompress
LEAF_NODE	2445:20	2445:20	4	)
STATEMENTS	2445:22	2448:4	4	
LEAF_NODE	2445:22	2445:22	5	{
STATEMENTS	2446:8	2446:8	5	
SELECTION	2446:8	2447:12	6	
KEYWORD	2446:8	2446:8	7	if
LEAF_NODE	2446:8	2446:8	8	if
LEAF_NODE	2446:11	2446:11	7	(
CONDITION	2446:12	2446:12	7	! TIFFjpeg_create_decompress ( sp )
EXPR	2446:12	2446:12	8	! TIFFjpeg_create_decompress ( sp )
UNARY_EXPR	2446:12	2446:13	9	! TIFFjpeg_create_decompress ( sp )
UNARY_OPERATOR	2446:12	2446:12	10	!
LEAF_NODE	2446:12	2446:12	11	!
FUNCTION_CALL	2446:13	2446:42	10	TIFFjpeg_create_decompress ( sp )
CALLEE	2446:13	2446:13	11	TIFFjpeg_create_decompress
LEAF_NODE	2446:13	2446:13	12	TIFFjpeg_create_decompress
LEAF_NODE	2446:39	2446:39	11	(
ARGUMENT	2446:40	2446:40	11	sp
FIELD	2446:40	2446:40	12	sp
LEAF_NODE	2446:40	2446:40	13	sp
LEAF_NODE	2446:42	2446:42	11	)
LEAF_NODE	2446:43	2446:43	7	)
STATEMENTS	2447:12	2447:12	7	
JUMP_STATEMENT	2447:12	2447:22	8	return ( 0 ) ;
KEYWORD	2447:12	2447:12	9	return
LEAF_NODE	2447:12	2447:12	10	return
DESTINATION	2447:19	2447:19	9	( 0 )
EXPR	2447:19	2447:21	10	( 0 )
LEAF_NODE	2447:19	2447:19	11	(
FIELD	2447:20	2447:20	11	0
LEAF_NODE	2447:20	2447:20	12	0
LEAF_NODE	2447:21	2447:21	11	)
LEAF_NODE	2447:22	2447:22	9	;
LEAF_NODE	2448:4	2448:4	5	}
SELECTION	2448:6	2448:11	3	
KEYWORD	2448:6	2448:6	4	else
LEAF_NODE	2448:6	2448:6	5	else
STATEMENTS	2448:11	2470:4	4	
LEAF_NODE	2448:11	2448:11	5	{
STATEMENTS	2449:8	2457:8	5	
SELECTION	2449:8	2450:12	6	
KEYWORD	2449:8	2449:8	7	if
LEAF_NODE	2449:8	2449:8	8	if
LEAF_NODE	2449:11	2449:11	7	(
CONDITION	2449:12	2449:12	7	! TIFFjpeg_create_compress ( sp )
EXPR	2449:12	2449:12	8	! TIFFjpeg_create_compress ( sp )
UNARY_EXPR	2449:12	2449:13	9	! TIFFjpeg_create_compress ( sp )
UNARY_OPERATOR	2449:12	2449:12	10	!
LEAF_NODE	2449:12	2449:12	11	!
FUNCTION_CALL	2449:13	2449:40	10	TIFFjpeg_create_compress ( sp )
CALLEE	2449:13	2449:13	11	TIFFjpeg_create_compress
LEAF_NODE	2449:13	2449:13	12	TIFFjpeg_create_compress
LEAF_NODE	2449:37	2449:37	11	(
ARGUMENT	2449:38	2449:38	11	sp
FIELD	2449:38	2449:38	12	sp
LEAF_NODE	2449:38	2449:38	13	sp
LEAF_NODE	2449:40	2449:40	11	)
LEAF_NODE	2449:41	2449:41	7	)
STATEMENTS	2450:12	2450:12	7	
JUMP_STATEMENT	2450:12	2450:22	8	return ( 0 ) ;
KEYWORD	2450:12	2450:12	9	return
LEAF_NODE	2450:12	2450:12	10	return
DESTINATION	2450:19	2450:19	9	( 0 )
EXPR	2450:19	2450:21	10	( 0 )
LEAF_NODE	2450:19	2450:19	11	(
FIELD	2450:20	2450:20	11	0
LEAF_NODE	2450:20	2450:20	12	0
LEAF_NODE	2450:21	2450:21	11	)
LEAF_NODE	2450:22	2450:22	9	;
SELECTION	2457:8	2458:8	6	
KEYWORD	2457:8	2457:8	7	if
LEAF_NODE	2457:8	2457:8	8	if
LEAF_NODE	2457:10	2457:10	7	(
CONDITION	2457:12	2457:12	7	sp -> cinfo . c . mem -> max_memory_to_use > 0
EXPR	2457:12	2457:49	8	sp -> cinfo . c . mem -> max_memory_to_use > 0
FIELD	2457:12	2457:29	9	sp -> cinfo . c . mem -> max_memory_to_use
LEAF_NODE	2457:12	2457:12	10	sp
LEAF_NODE	2457:14	2457:14	10	->
LEAF_NODE	2457:16	2457:16	10	cinfo
LEAF_NODE	2457:21	2457:21	10	.
LEAF_NODE	2457:22	2457:22	10	c
LEAF_NODE	2457:23	2457:23	10	.
LEAF_NODE	2457:24	2457:24	10	mem
LEAF_NODE	2457:27	2457:27	10	->
LEAF_NODE	2457:29	2457:29	10	max_memory_to_use
REL_OPERATOR	2457:47	2457:47	9	>
LEAF_NODE	2457:47	2457:47	10	>
FIELD	2457:49	2457:49	9	0
LEAF_NODE	2457:49	2457:49	10	0
LEAF_NODE	2457:51	2457:51	7	)
STATEMENTS	2458:8	2469:8	7	
LEAF_NODE	2458:8	2458:8	8	{
STATEMENTS	2460:12	2460:12	8	
SELECTION	2460:12	2461:12	9	
KEYWORD	2460:12	2460:12	10	if
LEAF_NODE	2460:12	2460:12	11	if
LEAF_NODE	2460:15	2460:15	10	(
CONDITION	2460:16	2460:16	10	getenv ( "JPEGMEM" ) == NULL
EXPR	2460:16	2460:37	11	getenv ( "JPEGMEM" ) == NULL
FUNCTION_CALL	2460:16	2460:32	12	getenv ( "JPEGMEM" )
CALLEE	2460:16	2460:16	13	getenv
LEAF_NODE	2460:16	2460:16	14	getenv
LEAF_NODE	2460:22	2460:22	13	(
ARGUMENT	2460:23	2460:23	13	"JPEGMEM"
FIELD	2460:23	2460:23	14	"JPEGMEM"
LEAF_NODE	2460:23	2460:23	15	"JPEGMEM"
LEAF_NODE	2460:32	2460:32	13	)
EQ_OPERATOR	2460:34	2460:34	12	==
LEAF_NODE	2460:34	2460:34	13	==
FIELD	2460:37	2460:37	12	NULL
LEAF_NODE	2460:37	2460:37	13	NULL
LEAF_NODE	2460:41	2460:41	10	)
STATEMENTS	2461:12	2468:12	10	
LEAF_NODE	2461:12	2461:12	11	{
STATEMENTS	2466:16	2466:16	11	
SELECTION	2466:16	2467:20	12	
KEYWORD	2466:16	2466:16	13	if
LEAF_NODE	2466:16	2466:16	14	if
LEAF_NODE	2466:18	2466:18	13	(
CONDITION	2466:20	2466:20	13	sp -> cinfo . c . mem -> max_memory_to_use < TIFF_JPEG_MAX_MEMORY_TO_USE
EXPR	2466:20	2466:57	14	sp -> cinfo . c . mem -> max_memory_to_use < TIFF_JPEG_MAX_MEMORY_TO_USE
FIELD	2466:20	2466:37	15	sp -> cinfo . c . mem -> max_memory_to_use
LEAF_NODE	2466:20	2466:20	16	sp
LEAF_NODE	2466:22	2466:22	16	->
LEAF_NODE	2466:24	2466:24	16	cinfo
LEAF_NODE	2466:29	2466:29	16	.
LEAF_NODE	2466:30	2466:30	16	c
LEAF_NODE	2466:31	2466:31	16	.
LEAF_NODE	2466:32	2466:32	16	mem
LEAF_NODE	2466:35	2466:35	16	->
LEAF_NODE	2466:37	2466:37	16	max_memory_to_use
REL_OPERATOR	2466:55	2466:55	15	<
LEAF_NODE	2466:55	2466:55	16	<
FIELD	2466:57	2466:57	15	TIFF_JPEG_MAX_MEMORY_TO_USE
LEAF_NODE	2466:57	2466:57	16	TIFF_JPEG_MAX_MEMORY_TO_USE
LEAF_NODE	2466:85	2466:85	13	)
STATEMENTS	2467:20	2467:20	13	
EXPR_STATEMENT	2467:20	2467:84	14	sp -> cinfo . c . mem -> max_memory_to_use = TIFF_JPEG_MAX_MEMORY_TO_USE ;
EXPR	2467:20	2467:20	15	sp -> cinfo . c . mem -> max_memory_to_use = TIFF_JPEG_MAX_MEMORY_TO_USE
ASSIGN	2467:20	2467:57	16	sp -> cinfo . c . mem -> max_memory_to_use = TIFF_JPEG_MAX_MEMORY_TO_USE
LVAL	2467:20	2467:20	17	sp -> cinfo . c . mem -> max_memory_to_use
FIELD	2467:20	2467:37	18	sp -> cinfo . c . mem -> max_memory_to_use
LEAF_NODE	2467:20	2467:20	19	sp
LEAF_NODE	2467:22	2467:22	19	->
LEAF_NODE	2467:24	2467:24	19	cinfo
LEAF_NODE	2467:29	2467:29	19	.
LEAF_NODE	2467:30	2467:30	19	c
LEAF_NODE	2467:31	2467:31	19	.
LEAF_NODE	2467:32	2467:32	19	mem
LEAF_NODE	2467:35	2467:35	19	->
LEAF_NODE	2467:37	2467:37	19	max_memory_to_use
ASSIGN_OP	2467:55	2467:55	17	=
LEAF_NODE	2467:55	2467:55	18	=
RVAL	2467:57	2467:57	17	TIFF_JPEG_MAX_MEMORY_TO_USE
FIELD	2467:57	2467:57	18	TIFF_JPEG_MAX_MEMORY_TO_USE
LEAF_NODE	2467:57	2467:57	19	TIFF_JPEG_MAX_MEMORY_TO_USE
LEAF_NODE	2467:84	2467:84	15	;
LEAF_NODE	2468:12	2468:12	11	}
LEAF_NODE	2469:8	2469:8	8	}
LEAF_NODE	2470:4	2470:4	5	}
EXPR_STATEMENT	2472:4	2472:32	3	sp -> cinfo_initialized = TRUE ;
EXPR	2472:4	2472:4	4	sp -> cinfo_initialized = TRUE
ASSIGN	2472:4	2472:28	5	sp -> cinfo_initialized = TRUE
LVAL	2472:4	2472:4	6	sp -> cinfo_initialized
FIELD	2472:4	2472:8	7	sp -> cinfo_initialized
LEAF_NODE	2472:4	2472:4	8	sp
LEAF_NODE	2472:6	2472:6	8	->
LEAF_NODE	2472:8	2472:8	8	cinfo_initialized
ASSIGN_OP	2472:26	2472:26	6	=
LEAF_NODE	2472:26	2472:26	7	=
RVAL	2472:28	2472:28	6	TRUE
FIELD	2472:28	2472:28	7	TRUE
LEAF_NODE	2472:28	2472:28	8	TRUE
LEAF_NODE	2472:32	2472:32	4	;
JUMP_STATEMENT	2474:4	2474:12	3	return 1 ;
KEYWORD	2474:4	2474:4	4	return
LEAF_NODE	2474:4	2474:4	5	return
DESTINATION	2474:11	2474:11	4	1
EXPR	2474:11	2474:11	5	1
FIELD	2474:11	2474:11	6	1
LEAF_NODE	2474:11	2474:11	7	1
LEAF_NODE	2474:12	2474:12	4	;
LEAF_NODE	2475:0	2475:0	2	}
FUNCTION_DEF	2477:0	2585:0	1	
RETURN_TYPE	2477:0	2477:0	2	int
TYPE_NAME	2477:0	2477:0	3	int
LEAF_NODE	2477:0	2477:0	4	int
FUNCTION_NAME	2478:0	2478:0	2	TIFFInitJPEG
LEAF_NODE	2478:0	2478:0	3	TIFFInitJPEG
PARAMETER_LIST	2478:12	2478:34	2	( TIFF * tif , int scheme )
LEAF_NODE	2478:12	2478:12	3	(
PARAMETER_DECL	2478:13	2478:19	3	TIFF * tif
TYPE	2478:13	2478:17	4	TIFF *
TYPE_NAME	2478:13	2478:13	5	TIFF
LEAF_NODE	2478:13	2478:13	6	TIFF
POINTER	2478:17	2478:17	5	*
LEAF_NODE	2478:17	2478:17	6	*
NAME	2478:19	2478:19	4	tif
LEAF_NODE	2478:19	2478:19	5	tif
LEAF_NODE	2478:22	2478:22	3	,
PARAMETER_DECL	2478:24	2478:28	3	int scheme
TYPE	2478:24	2478:24	4	int
TYPE_NAME	2478:24	2478:24	5	int
LEAF_NODE	2478:24	2478:24	6	int
NAME	2478:28	2478:28	4	scheme
LEAF_NODE	2478:28	2478:28	5	scheme
LEAF_NODE	2478:34	2478:34	3	)
LEAF_NODE	2479:0	2479:0	2	{
STATEMENTS	2480:1	2584:1	2	
SIMPLE_DECL	2480:1	2480:14	3	JPEGState * sp ;
VAR_DECL	2480:1	2480:12	4	JPEGState * sp
TYPE	2480:1	2480:10	5	JPEGState *
TYPE_NAME	2480:1	2480:1	6	JPEGState
LEAF_NODE	2480:1	2480:1	7	JPEGState
POINTER	2480:10	2480:10	6	*
LEAF_NODE	2480:10	2480:10	7	*
NAME	2480:12	2480:12	5	sp
LEAF_NODE	2480:12	2480:12	6	sp
LEAF_NODE	2480:14	2480:14	4	;
EXPR_STATEMENT	2482:1	2482:35	3	assert ( scheme == COMPRESSION_JPEG ) ;
EXPR	2482:1	2482:1	4	assert ( scheme == COMPRESSION_JPEG )
FUNCTION_CALL	2482:1	2482:34	5	assert ( scheme == COMPRESSION_JPEG )
CALLEE	2482:1	2482:1	6	assert
LEAF_NODE	2482:1	2482:1	7	assert
LEAF_NODE	2482:7	2482:7	6	(
ARGUMENT	2482:8	2482:18	6	scheme == COMPRESSION_JPEG
FIELD	2482:8	2482:8	7	scheme
LEAF_NODE	2482:8	2482:8	8	scheme
EQ_OPERATOR	2482:15	2482:15	7	==
LEAF_NODE	2482:15	2482:15	8	==
FIELD	2482:18	2482:18	7	COMPRESSION_JPEG
LEAF_NODE	2482:18	2482:18	8	COMPRESSION_JPEG
LEAF_NODE	2482:34	2482:34	6	)
LEAF_NODE	2482:35	2482:35	4	;
SELECTION	2487:1	2487:69	3	
KEYWORD	2487:1	2487:1	4	if
LEAF_NODE	2487:1	2487:1	5	if
LEAF_NODE	2487:4	2487:4	4	(
CONDITION	2487:5	2487:5	4	! _TIFFMergeFields ( tif , jpegFields , TIFFArrayCount ( jpegFields ) )
EXPR	2487:5	2487:5	5	! _TIFFMergeFields ( tif , jpegFields , TIFFArrayCount ( jpegFields ) )
UNARY_EXPR	2487:5	2487:6	6	! _TIFFMergeFields ( tif , jpegFields , TIFFArrayCount ( jpegFields ) )
UNARY_OPERATOR	2487:5	2487:5	7	!
LEAF_NODE	2487:5	2487:5	8	!
FUNCTION_CALL	2487:6	2487:66	7	_TIFFMergeFields ( tif , jpegFields , TIFFArrayCount ( jpegFields ) )
CALLEE	2487:6	2487:6	8	_TIFFMergeFields
LEAF_NODE	2487:6	2487:6	9	_TIFFMergeFields
LEAF_NODE	2487:22	2487:22	8	(
ARGUMENT	2487:23	2487:23	8	tif
FIELD	2487:23	2487:23	9	tif
LEAF_NODE	2487:23	2487:23	10	tif
LEAF_NODE	2487:26	2487:26	8	,
ARGUMENT	2487:28	2487:28	8	jpegFields
FIELD	2487:28	2487:28	9	jpegFields
LEAF_NODE	2487:28	2487:28	10	jpegFields
LEAF_NODE	2487:38	2487:38	8	,
ARGUMENT	2487:40	2487:40	8	TIFFArrayCount ( jpegFields )
FUNCTION_CALL	2487:40	2487:65	9	TIFFArrayCount ( jpegFields )
CALLEE	2487:40	2487:40	10	TIFFArrayCount
LEAF_NODE	2487:40	2487:40	11	TIFFArrayCount
LEAF_NODE	2487:54	2487:54	10	(
ARGUMENT	2487:55	2487:55	10	jpegFields
FIELD	2487:55	2487:55	11	jpegFields
LEAF_NODE	2487:55	2487:55	12	jpegFields
LEAF_NODE	2487:65	2487:65	10	)
LEAF_NODE	2487:66	2487:66	8	)
LEAF_NODE	2487:67	2487:67	4	)
STATEMENTS	2487:69	2492:1	4	
LEAF_NODE	2487:69	2487:69	5	{
STATEMENTS	2488:2	2491:2	5	
EXPR_STATEMENT	2488:2	2490:50	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitJPEG" , "Merging JPEG codec-specific tags failed" ) ;
EXPR	2488:2	2488:2	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitJPEG" , "Merging JPEG codec-specific tags failed" )
FUNCTION_CALL	2488:2	2490:49	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitJPEG" , "Merging JPEG codec-specific tags failed" )
CALLEE	2488:2	2488:2	9	TIFFErrorExt
LEAF_NODE	2488:2	2488:2	10	TIFFErrorExt
LEAF_NODE	2488:14	2488:14	9	(
ARGUMENT	2488:15	2488:15	9	tif -> tif_clientdata
FIELD	2488:15	2488:20	10	tif -> tif_clientdata
LEAF_NODE	2488:15	2488:15	11	tif
LEAF_NODE	2488:18	2488:18	11	->
LEAF_NODE	2488:20	2488:20	11	tif_clientdata
LEAF_NODE	2488:34	2488:34	9	,
ARGUMENT	2489:8	2489:8	9	"TIFFInitJPEG"
FIELD	2489:8	2489:8	10	"TIFFInitJPEG"
LEAF_NODE	2489:8	2489:8	11	"TIFFInitJPEG"
LEAF_NODE	2489:22	2489:22	9	,
ARGUMENT	2490:8	2490:8	9	"Merging JPEG codec-specific tags failed"
FIELD	2490:8	2490:8	10	"Merging JPEG codec-specific tags failed"
LEAF_NODE	2490:8	2490:8	11	"Merging JPEG codec-specific tags failed"
LEAF_NODE	2490:49	2490:49	9	)
LEAF_NODE	2490:50	2490:50	7	;
JUMP_STATEMENT	2491:2	2491:10	6	return 0 ;
KEYWORD	2491:2	2491:2	7	return
LEAF_NODE	2491:2	2491:2	8	return
DESTINATION	2491:9	2491:9	7	0
EXPR	2491:9	2491:9	8	0
FIELD	2491:9	2491:9	9	0
LEAF_NODE	2491:9	2491:9	10	0
LEAF_NODE	2491:10	2491:10	7	;
LEAF_NODE	2492:1	2492:1	5	}
EXPR_STATEMENT	2497:1	2497:57	3	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( JPEGState ) ) ;
EXPR	2497:1	2497:1	4	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( JPEGState ) )
ASSIGN	2497:1	2497:17	5	tif -> tif_data = ( uint8 * ) _TIFFmalloc ( sizeof ( JPEGState ) )
LVAL	2497:1	2497:1	6	tif -> tif_data
FIELD	2497:1	2497:6	7	tif -> tif_data
LEAF_NODE	2497:1	2497:1	8	tif
LEAF_NODE	2497:4	2497:4	8	->
LEAF_NODE	2497:6	2497:6	8	tif_data
ASSIGN_OP	2497:15	2497:15	6	=
LEAF_NODE	2497:15	2497:15	7	=
RVAL	2497:17	2497:26	6	( uint8 * ) _TIFFmalloc ( sizeof ( JPEGState ) )
LEAF_NODE	2497:17	2497:17	7	(
TYPE_NAME	2497:18	2497:18	7	uint8
LEAF_NODE	2497:18	2497:18	8	uint8
LEAF_NODE	2497:23	2497:23	7	*
LEAF_NODE	2497:24	2497:24	7	)
FUNCTION_CALL	2497:26	2497:56	7	_TIFFmalloc ( sizeof ( JPEGState ) )
CALLEE	2497:26	2497:26	8	_TIFFmalloc
LEAF_NODE	2497:26	2497:26	9	_TIFFmalloc
LEAF_NODE	2497:37	2497:37	8	(
ARGUMENT	2497:38	2497:38	8	sizeof ( JPEGState )
FUNCTION_CALL	2497:38	2497:55	9	sizeof ( JPEGState )
CALLEE	2497:38	2497:38	10	sizeof
LEAF_NODE	2497:38	2497:38	11	sizeof
LEAF_NODE	2497:45	2497:45	10	(
ARGUMENT	2497:46	2497:46	10	JPEGState
FIELD	2497:46	2497:46	11	JPEGState
LEAF_NODE	2497:46	2497:46	12	JPEGState
LEAF_NODE	2497:55	2497:55	10	)
LEAF_NODE	2497:56	2497:56	8	)
LEAF_NODE	2497:57	2497:57	4	;
SELECTION	2499:1	2499:28	3	
KEYWORD	2499:1	2499:1	4	if
LEAF_NODE	2499:1	2499:1	5	if
LEAF_NODE	2499:4	2499:4	4	(
CONDITION	2499:5	2499:5	4	tif -> tif_data == NULL
EXPR	2499:5	2499:22	5	tif -> tif_data == NULL
FIELD	2499:5	2499:10	6	tif -> tif_data
LEAF_NODE	2499:5	2499:5	7	tif
LEAF_NODE	2499:8	2499:8	7	->
LEAF_NODE	2499:10	2499:10	7	tif_data
EQ_OPERATOR	2499:19	2499:19	6	==
LEAF_NODE	2499:19	2499:19	7	==
FIELD	2499:22	2499:22	6	NULL
LEAF_NODE	2499:22	2499:22	7	NULL
LEAF_NODE	2499:26	2499:26	4	)
STATEMENTS	2499:28	2503:1	4	
LEAF_NODE	2499:28	2499:28	5	{
STATEMENTS	2500:2	2502:2	5	
EXPR_STATEMENT	2500:2	2501:56	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitJPEG" , "No space for JPEG state block" ) ;
EXPR	2500:2	2500:2	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitJPEG" , "No space for JPEG state block" )
FUNCTION_CALL	2500:2	2501:55	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitJPEG" , "No space for JPEG state block" )
CALLEE	2500:2	2500:2	9	TIFFErrorExt
LEAF_NODE	2500:2	2500:2	10	TIFFErrorExt
LEAF_NODE	2500:14	2500:14	9	(
ARGUMENT	2500:15	2500:15	9	tif -> tif_clientdata
FIELD	2500:15	2500:20	10	tif -> tif_clientdata
LEAF_NODE	2500:15	2500:15	11	tif
LEAF_NODE	2500:18	2500:18	11	->
LEAF_NODE	2500:20	2500:20	11	tif_clientdata
LEAF_NODE	2500:34	2500:34	9	,
ARGUMENT	2501:8	2501:8	9	"TIFFInitJPEG"
FIELD	2501:8	2501:8	10	"TIFFInitJPEG"
LEAF_NODE	2501:8	2501:8	11	"TIFFInitJPEG"
LEAF_NODE	2501:22	2501:22	9	,
ARGUMENT	2501:24	2501:24	9	"No space for JPEG state block"
FIELD	2501:24	2501:24	10	"No space for JPEG state block"
LEAF_NODE	2501:24	2501:24	11	"No space for JPEG state block"
LEAF_NODE	2501:55	2501:55	9	)
LEAF_NODE	2501:56	2501:56	7	;
JUMP_STATEMENT	2502:2	2502:10	6	return 0 ;
KEYWORD	2502:2	2502:2	7	return
LEAF_NODE	2502:2	2502:2	8	return
DESTINATION	2502:9	2502:9	7	0
EXPR	2502:9	2502:9	8	0
FIELD	2502:9	2502:9	9	0
LEAF_NODE	2502:9	2502:9	10	0
LEAF_NODE	2502:10	2502:10	7	;
LEAF_NODE	2503:1	2503:1	5	}
EXPR_STATEMENT	2504:8	2504:56	3	_TIFFmemset ( tif -> tif_data , 0 , sizeof ( JPEGState ) ) ;
EXPR	2504:8	2504:8	4	_TIFFmemset ( tif -> tif_data , 0 , sizeof ( JPEGState ) )
FUNCTION_CALL	2504:8	2504:55	5	_TIFFmemset ( tif -> tif_data , 0 , sizeof ( JPEGState ) )
CALLEE	2504:8	2504:8	6	_TIFFmemset
LEAF_NODE	2504:8	2504:8	7	_TIFFmemset
LEAF_NODE	2504:19	2504:19	6	(
ARGUMENT	2504:20	2504:20	6	tif -> tif_data
FIELD	2504:20	2504:25	7	tif -> tif_data
LEAF_NODE	2504:20	2504:20	8	tif
LEAF_NODE	2504:23	2504:23	8	->
LEAF_NODE	2504:25	2504:25	8	tif_data
LEAF_NODE	2504:33	2504:33	6	,
ARGUMENT	2504:35	2504:35	6	0
FIELD	2504:35	2504:35	7	0
LEAF_NODE	2504:35	2504:35	8	0
LEAF_NODE	2504:36	2504:36	6	,
ARGUMENT	2504:38	2504:38	6	sizeof ( JPEGState )
FUNCTION_CALL	2504:38	2504:54	7	sizeof ( JPEGState )
CALLEE	2504:38	2504:38	8	sizeof
LEAF_NODE	2504:38	2504:38	9	sizeof
LEAF_NODE	2504:44	2504:44	8	(
ARGUMENT	2504:45	2504:45	8	JPEGState
FIELD	2504:45	2504:45	9	JPEGState
LEAF_NODE	2504:45	2504:45	10	JPEGState
LEAF_NODE	2504:54	2504:54	8	)
LEAF_NODE	2504:55	2504:55	6	)
LEAF_NODE	2504:56	2504:56	4	;
EXPR_STATEMENT	2506:1	2506:17	3	sp = JState ( tif ) ;
EXPR	2506:1	2506:1	4	sp = JState ( tif )
ASSIGN	2506:1	2506:6	5	sp = JState ( tif )
LVAL	2506:1	2506:1	6	sp
FIELD	2506:1	2506:1	7	sp
LEAF_NODE	2506:1	2506:1	8	sp
ASSIGN_OP	2506:4	2506:4	6	=
LEAF_NODE	2506:4	2506:4	7	=
RVAL	2506:6	2506:6	6	JState ( tif )
FUNCTION_CALL	2506:6	2506:16	7	JState ( tif )
CALLEE	2506:6	2506:6	8	JState
LEAF_NODE	2506:6	2506:6	9	JState
LEAF_NODE	2506:12	2506:12	8	(
ARGUMENT	2506:13	2506:13	8	tif
FIELD	2506:13	2506:13	9	tif
LEAF_NODE	2506:13	2506:13	10	tif
LEAF_NODE	2506:16	2506:16	8	)
LEAF_NODE	2506:17	2506:17	4	;
EXPR_STATEMENT	2507:1	2507:14	3	sp -> tif = tif ;
EXPR	2507:1	2507:1	4	sp -> tif = tif
ASSIGN	2507:1	2507:11	5	sp -> tif = tif
LVAL	2507:1	2507:1	6	sp -> tif
FIELD	2507:1	2507:5	7	sp -> tif
LEAF_NODE	2507:1	2507:1	8	sp
LEAF_NODE	2507:3	2507:3	8	->
LEAF_NODE	2507:5	2507:5	8	tif
ASSIGN_OP	2507:9	2507:9	6	=
LEAF_NODE	2507:9	2507:9	7	=
RVAL	2507:11	2507:11	6	tif
FIELD	2507:11	2507:11	7	tif
LEAF_NODE	2507:11	2507:11	8	tif
LEAF_NODE	2507:14	2507:14	4	;
EXPR_STATEMENT	2512:1	2512:47	3	sp -> vgetparent = tif -> tif_tagmethods . vgetfield ;
EXPR	2512:1	2512:1	4	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
ASSIGN	2512:1	2512:18	5	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
LVAL	2512:1	2512:1	6	sp -> vgetparent
FIELD	2512:1	2512:5	7	sp -> vgetparent
LEAF_NODE	2512:1	2512:1	8	sp
LEAF_NODE	2512:3	2512:3	8	->
LEAF_NODE	2512:5	2512:5	8	vgetparent
ASSIGN_OP	2512:16	2512:16	6	=
LEAF_NODE	2512:16	2512:16	7	=
RVAL	2512:18	2512:18	6	tif -> tif_tagmethods . vgetfield
FIELD	2512:18	2512:38	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	2512:18	2512:18	8	tif
LEAF_NODE	2512:21	2512:21	8	->
LEAF_NODE	2512:23	2512:23	8	tif_tagmethods
LEAF_NODE	2512:37	2512:37	8	.
LEAF_NODE	2512:38	2512:38	8	vgetfield
LEAF_NODE	2512:47	2512:47	4	;
EXPR_STATEMENT	2513:1	2513:46	3	tif -> tif_tagmethods . vgetfield = JPEGVGetField ;
EXPR	2513:1	2513:1	4	tif -> tif_tagmethods . vgetfield = JPEGVGetField
ASSIGN	2513:1	2513:33	5	tif -> tif_tagmethods . vgetfield = JPEGVGetField
LVAL	2513:1	2513:1	6	tif -> tif_tagmethods . vgetfield
FIELD	2513:1	2513:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	2513:1	2513:1	8	tif
LEAF_NODE	2513:4	2513:4	8	->
LEAF_NODE	2513:6	2513:6	8	tif_tagmethods
LEAF_NODE	2513:20	2513:20	8	.
LEAF_NODE	2513:21	2513:21	8	vgetfield
ASSIGN_OP	2513:31	2513:31	6	=
LEAF_NODE	2513:31	2513:31	7	=
RVAL	2513:33	2513:33	6	JPEGVGetField
FIELD	2513:33	2513:33	7	JPEGVGetField
LEAF_NODE	2513:33	2513:33	8	JPEGVGetField
LEAF_NODE	2513:46	2513:46	4	;
EXPR_STATEMENT	2514:1	2514:47	3	sp -> vsetparent = tif -> tif_tagmethods . vsetfield ;
EXPR	2514:1	2514:1	4	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
ASSIGN	2514:1	2514:18	5	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
LVAL	2514:1	2514:1	6	sp -> vsetparent
FIELD	2514:1	2514:5	7	sp -> vsetparent
LEAF_NODE	2514:1	2514:1	8	sp
LEAF_NODE	2514:3	2514:3	8	->
LEAF_NODE	2514:5	2514:5	8	vsetparent
ASSIGN_OP	2514:16	2514:16	6	=
LEAF_NODE	2514:16	2514:16	7	=
RVAL	2514:18	2514:18	6	tif -> tif_tagmethods . vsetfield
FIELD	2514:18	2514:38	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	2514:18	2514:18	8	tif
LEAF_NODE	2514:21	2514:21	8	->
LEAF_NODE	2514:23	2514:23	8	tif_tagmethods
LEAF_NODE	2514:37	2514:37	8	.
LEAF_NODE	2514:38	2514:38	8	vsetfield
LEAF_NODE	2514:47	2514:47	4	;
EXPR_STATEMENT	2515:1	2515:46	3	tif -> tif_tagmethods . vsetfield = JPEGVSetField ;
EXPR	2515:1	2515:1	4	tif -> tif_tagmethods . vsetfield = JPEGVSetField
ASSIGN	2515:1	2515:33	5	tif -> tif_tagmethods . vsetfield = JPEGVSetField
LVAL	2515:1	2515:1	6	tif -> tif_tagmethods . vsetfield
FIELD	2515:1	2515:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	2515:1	2515:1	8	tif
LEAF_NODE	2515:4	2515:4	8	->
LEAF_NODE	2515:6	2515:6	8	tif_tagmethods
LEAF_NODE	2515:20	2515:20	8	.
LEAF_NODE	2515:21	2515:21	8	vsetfield
ASSIGN_OP	2515:31	2515:31	6	=
LEAF_NODE	2515:31	2515:31	7	=
RVAL	2515:33	2515:33	6	JPEGVSetField
FIELD	2515:33	2515:33	7	JPEGVSetField
LEAF_NODE	2515:33	2515:33	8	JPEGVSetField
LEAF_NODE	2515:46	2515:46	4	;
EXPR_STATEMENT	2516:1	2516:44	3	sp -> printdir = tif -> tif_tagmethods . printdir ;
EXPR	2516:1	2516:1	4	sp -> printdir = tif -> tif_tagmethods . printdir
ASSIGN	2516:1	2516:16	5	sp -> printdir = tif -> tif_tagmethods . printdir
LVAL	2516:1	2516:1	6	sp -> printdir
FIELD	2516:1	2516:5	7	sp -> printdir
LEAF_NODE	2516:1	2516:1	8	sp
LEAF_NODE	2516:3	2516:3	8	->
LEAF_NODE	2516:5	2516:5	8	printdir
ASSIGN_OP	2516:14	2516:14	6	=
LEAF_NODE	2516:14	2516:14	7	=
RVAL	2516:16	2516:16	6	tif -> tif_tagmethods . printdir
FIELD	2516:16	2516:36	7	tif -> tif_tagmethods . printdir
LEAF_NODE	2516:16	2516:16	8	tif
LEAF_NODE	2516:19	2516:19	8	->
LEAF_NODE	2516:21	2516:21	8	tif_tagmethods
LEAF_NODE	2516:35	2516:35	8	.
LEAF_NODE	2516:36	2516:36	8	printdir
LEAF_NODE	2516:44	2516:44	4	;
EXPR_STATEMENT	2517:1	2517:44	3	tif -> tif_tagmethods . printdir = JPEGPrintDir ;
EXPR	2517:1	2517:1	4	tif -> tif_tagmethods . printdir = JPEGPrintDir
ASSIGN	2517:1	2517:32	5	tif -> tif_tagmethods . printdir = JPEGPrintDir
LVAL	2517:1	2517:1	6	tif -> tif_tagmethods . printdir
FIELD	2517:1	2517:21	7	tif -> tif_tagmethods . printdir
LEAF_NODE	2517:1	2517:1	8	tif
LEAF_NODE	2517:4	2517:4	8	->
LEAF_NODE	2517:6	2517:6	8	tif_tagmethods
LEAF_NODE	2517:20	2517:20	8	.
LEAF_NODE	2517:21	2517:21	8	printdir
ASSIGN_OP	2517:30	2517:30	6	=
LEAF_NODE	2517:30	2517:30	7	=
RVAL	2517:32	2517:32	6	JPEGPrintDir
FIELD	2517:32	2517:32	7	JPEGPrintDir
LEAF_NODE	2517:32	2517:32	8	JPEGPrintDir
LEAF_NODE	2517:44	2517:44	4	;
EXPR_STATEMENT	2520:1	2520:22	3	sp -> jpegtables = NULL ;
EXPR	2520:1	2520:1	4	sp -> jpegtables = NULL
ASSIGN	2520:1	2520:18	5	sp -> jpegtables = NULL
LVAL	2520:1	2520:1	6	sp -> jpegtables
FIELD	2520:1	2520:5	7	sp -> jpegtables
LEAF_NODE	2520:1	2520:1	8	sp
LEAF_NODE	2520:3	2520:3	8	->
LEAF_NODE	2520:5	2520:5	8	jpegtables
ASSIGN_OP	2520:16	2520:16	6	=
LEAF_NODE	2520:16	2520:16	7	=
RVAL	2520:18	2520:18	6	NULL
FIELD	2520:18	2520:18	7	NULL
LEAF_NODE	2520:18	2520:18	8	NULL
LEAF_NODE	2520:22	2520:22	4	;
EXPR_STATEMENT	2521:1	2521:26	3	sp -> jpegtables_length = 0 ;
EXPR	2521:1	2521:1	4	sp -> jpegtables_length = 0
ASSIGN	2521:1	2521:25	5	sp -> jpegtables_length = 0
LVAL	2521:1	2521:1	6	sp -> jpegtables_length
FIELD	2521:1	2521:5	7	sp -> jpegtables_length
LEAF_NODE	2521:1	2521:1	8	sp
LEAF_NODE	2521:3	2521:3	8	->
LEAF_NODE	2521:5	2521:5	8	jpegtables_length
ASSIGN_OP	2521:23	2521:23	6	=
LEAF_NODE	2521:23	2521:23	7	=
RVAL	2521:25	2521:25	6	0
FIELD	2521:25	2521:25	7	0
LEAF_NODE	2521:25	2521:25	8	0
LEAF_NODE	2521:26	2521:26	4	;
EXPR_STATEMENT	2522:1	2522:21	3	sp -> jpegquality = 75 ;
EXPR	2522:1	2522:1	4	sp -> jpegquality = 75
ASSIGN	2522:1	2522:19	5	sp -> jpegquality = 75
LVAL	2522:1	2522:1	6	sp -> jpegquality
FIELD	2522:1	2522:5	7	sp -> jpegquality
LEAF_NODE	2522:1	2522:1	8	sp
LEAF_NODE	2522:3	2522:3	8	->
LEAF_NODE	2522:5	2522:5	8	jpegquality
ASSIGN_OP	2522:17	2522:17	6	=
LEAF_NODE	2522:17	2522:17	7	=
RVAL	2522:19	2522:19	6	75
FIELD	2522:19	2522:19	7	75
LEAF_NODE	2522:19	2522:19	8	75
LEAF_NODE	2522:21	2522:21	4	;
EXPR_STATEMENT	2523:1	2523:38	3	sp -> jpegcolormode = JPEGCOLORMODE_RAW ;
EXPR	2523:1	2523:1	4	sp -> jpegcolormode = JPEGCOLORMODE_RAW
ASSIGN	2523:1	2523:21	5	sp -> jpegcolormode = JPEGCOLORMODE_RAW
LVAL	2523:1	2523:1	6	sp -> jpegcolormode
FIELD	2523:1	2523:5	7	sp -> jpegcolormode
LEAF_NODE	2523:1	2523:1	8	sp
LEAF_NODE	2523:3	2523:3	8	->
LEAF_NODE	2523:5	2523:5	8	jpegcolormode
ASSIGN_OP	2523:19	2523:19	6	=
LEAF_NODE	2523:19	2523:19	7	=
RVAL	2523:21	2523:21	6	JPEGCOLORMODE_RAW
FIELD	2523:21	2523:21	7	JPEGCOLORMODE_RAW
LEAF_NODE	2523:21	2523:21	8	JPEGCOLORMODE_RAW
LEAF_NODE	2523:38	2523:38	4	;
EXPR_STATEMENT	2524:1	2524:64	3	sp -> jpegtablesmode = JPEGTABLESMODE_QUANT | JPEGTABLESMODE_HUFF ;
EXPR	2524:1	2524:1	4	sp -> jpegtablesmode = JPEGTABLESMODE_QUANT | JPEGTABLESMODE_HUFF
ASSIGN	2524:1	2524:22	5	sp -> jpegtablesmode = JPEGTABLESMODE_QUANT | JPEGTABLESMODE_HUFF
LVAL	2524:1	2524:1	6	sp -> jpegtablesmode
FIELD	2524:1	2524:5	7	sp -> jpegtablesmode
LEAF_NODE	2524:1	2524:1	8	sp
LEAF_NODE	2524:3	2524:3	8	->
LEAF_NODE	2524:5	2524:5	8	jpegtablesmode
ASSIGN_OP	2524:20	2524:20	6	=
LEAF_NODE	2524:20	2524:20	7	=
RVAL	2524:22	2524:22	6	JPEGTABLESMODE_QUANT | JPEGTABLESMODE_HUFF
BIT_OR	2524:22	2524:45	7	JPEGTABLESMODE_QUANT | JPEGTABLESMODE_HUFF
BIT_OR_ELEM	2524:22	2524:22	8	JPEGTABLESMODE_QUANT
FIELD	2524:22	2524:22	9	JPEGTABLESMODE_QUANT
LEAF_NODE	2524:22	2524:22	10	JPEGTABLESMODE_QUANT
LEAF_NODE	2524:43	2524:43	8	|
BIT_OR_ELEM	2524:45	2524:45	8	JPEGTABLESMODE_HUFF
FIELD	2524:45	2524:45	9	JPEGTABLESMODE_HUFF
LEAF_NODE	2524:45	2524:45	10	JPEGTABLESMODE_HUFF
LEAF_NODE	2524:64	2524:64	4	;
EXPR_STATEMENT	2525:8	2525:37	3	sp -> ycbcrsampling_fetched = 0 ;
EXPR	2525:8	2525:8	4	sp -> ycbcrsampling_fetched = 0
ASSIGN	2525:8	2525:36	5	sp -> ycbcrsampling_fetched = 0
LVAL	2525:8	2525:8	6	sp -> ycbcrsampling_fetched
FIELD	2525:8	2525:12	7	sp -> ycbcrsampling_fetched
LEAF_NODE	2525:8	2525:8	8	sp
LEAF_NODE	2525:10	2525:10	8	->
LEAF_NODE	2525:12	2525:12	8	ycbcrsampling_fetched
ASSIGN_OP	2525:34	2525:34	6	=
LEAF_NODE	2525:34	2525:34	7	=
RVAL	2525:36	2525:36	6	0
FIELD	2525:36	2525:36	7	0
LEAF_NODE	2525:36	2525:36	8	0
LEAF_NODE	2525:37	2525:37	4	;
EXPR_STATEMENT	2530:1	2530:35	3	tif -> tif_fixuptags = JPEGFixupTags ;
EXPR	2530:1	2530:1	4	tif -> tif_fixuptags = JPEGFixupTags
ASSIGN	2530:1	2530:22	5	tif -> tif_fixuptags = JPEGFixupTags
LVAL	2530:1	2530:1	6	tif -> tif_fixuptags
FIELD	2530:1	2530:6	7	tif -> tif_fixuptags
LEAF_NODE	2530:1	2530:1	8	tif
LEAF_NODE	2530:4	2530:4	8	->
LEAF_NODE	2530:6	2530:6	8	tif_fixuptags
ASSIGN_OP	2530:20	2530:20	6	=
LEAF_NODE	2530:20	2530:20	7	=
RVAL	2530:22	2530:22	6	JPEGFixupTags
FIELD	2530:22	2530:22	7	JPEGFixupTags
LEAF_NODE	2530:22	2530:22	8	JPEGFixupTags
LEAF_NODE	2530:35	2530:35	4	;
EXPR_STATEMENT	2531:1	2531:39	3	tif -> tif_setupdecode = JPEGSetupDecode ;
EXPR	2531:1	2531:1	4	tif -> tif_setupdecode = JPEGSetupDecode
ASSIGN	2531:1	2531:24	5	tif -> tif_setupdecode = JPEGSetupDecode
LVAL	2531:1	2531:1	6	tif -> tif_setupdecode
FIELD	2531:1	2531:6	7	tif -> tif_setupdecode
LEAF_NODE	2531:1	2531:1	8	tif
LEAF_NODE	2531:4	2531:4	8	->
LEAF_NODE	2531:6	2531:6	8	tif_setupdecode
ASSIGN_OP	2531:22	2531:22	6	=
LEAF_NODE	2531:22	2531:22	7	=
RVAL	2531:24	2531:24	6	JPEGSetupDecode
FIELD	2531:24	2531:24	7	JPEGSetupDecode
LEAF_NODE	2531:24	2531:24	8	JPEGSetupDecode
LEAF_NODE	2531:39	2531:39	4	;
EXPR_STATEMENT	2532:1	2532:35	3	tif -> tif_predecode = JPEGPreDecode ;
EXPR	2532:1	2532:1	4	tif -> tif_predecode = JPEGPreDecode
ASSIGN	2532:1	2532:22	5	tif -> tif_predecode = JPEGPreDecode
LVAL	2532:1	2532:1	6	tif -> tif_predecode
FIELD	2532:1	2532:6	7	tif -> tif_predecode
LEAF_NODE	2532:1	2532:1	8	tif
LEAF_NODE	2532:4	2532:4	8	->
LEAF_NODE	2532:6	2532:6	8	tif_predecode
ASSIGN_OP	2532:20	2532:20	6	=
LEAF_NODE	2532:20	2532:20	7	=
RVAL	2532:22	2532:22	6	JPEGPreDecode
FIELD	2532:22	2532:22	7	JPEGPreDecode
LEAF_NODE	2532:22	2532:22	8	JPEGPreDecode
LEAF_NODE	2532:35	2532:35	4	;
EXPR_STATEMENT	2533:1	2533:32	3	tif -> tif_decoderow = JPEGDecode ;
EXPR	2533:1	2533:1	4	tif -> tif_decoderow = JPEGDecode
ASSIGN	2533:1	2533:22	5	tif -> tif_decoderow = JPEGDecode
LVAL	2533:1	2533:1	6	tif -> tif_decoderow
FIELD	2533:1	2533:6	7	tif -> tif_decoderow
LEAF_NODE	2533:1	2533:1	8	tif
LEAF_NODE	2533:4	2533:4	8	->
LEAF_NODE	2533:6	2533:6	8	tif_decoderow
ASSIGN_OP	2533:20	2533:20	6	=
LEAF_NODE	2533:20	2533:20	7	=
RVAL	2533:22	2533:22	6	JPEGDecode
FIELD	2533:22	2533:22	7	JPEGDecode
LEAF_NODE	2533:22	2533:22	8	JPEGDecode
LEAF_NODE	2533:32	2533:32	4	;
EXPR_STATEMENT	2534:1	2534:34	3	tif -> tif_decodestrip = JPEGDecode ;
EXPR	2534:1	2534:1	4	tif -> tif_decodestrip = JPEGDecode
ASSIGN	2534:1	2534:24	5	tif -> tif_decodestrip = JPEGDecode
LVAL	2534:1	2534:1	6	tif -> tif_decodestrip
FIELD	2534:1	2534:6	7	tif -> tif_decodestrip
LEAF_NODE	2534:1	2534:1	8	tif
LEAF_NODE	2534:4	2534:4	8	->
LEAF_NODE	2534:6	2534:6	8	tif_decodestrip
ASSIGN_OP	2534:22	2534:22	6	=
LEAF_NODE	2534:22	2534:22	7	=
RVAL	2534:24	2534:24	6	JPEGDecode
FIELD	2534:24	2534:24	7	JPEGDecode
LEAF_NODE	2534:24	2534:24	8	JPEGDecode
LEAF_NODE	2534:34	2534:34	4	;
EXPR_STATEMENT	2535:1	2535:33	3	tif -> tif_decodetile = JPEGDecode ;
EXPR	2535:1	2535:1	4	tif -> tif_decodetile = JPEGDecode
ASSIGN	2535:1	2535:23	5	tif -> tif_decodetile = JPEGDecode
LVAL	2535:1	2535:1	6	tif -> tif_decodetile
FIELD	2535:1	2535:6	7	tif -> tif_decodetile
LEAF_NODE	2535:1	2535:1	8	tif
LEAF_NODE	2535:4	2535:4	8	->
LEAF_NODE	2535:6	2535:6	8	tif_decodetile
ASSIGN_OP	2535:21	2535:21	6	=
LEAF_NODE	2535:21	2535:21	7	=
RVAL	2535:23	2535:23	6	JPEGDecode
FIELD	2535:23	2535:23	7	JPEGDecode
LEAF_NODE	2535:23	2535:23	8	JPEGDecode
LEAF_NODE	2535:33	2535:33	4	;
EXPR_STATEMENT	2536:1	2536:39	3	tif -> tif_setupencode = JPEGSetupEncode ;
EXPR	2536:1	2536:1	4	tif -> tif_setupencode = JPEGSetupEncode
ASSIGN	2536:1	2536:24	5	tif -> tif_setupencode = JPEGSetupEncode
LVAL	2536:1	2536:1	6	tif -> tif_setupencode
FIELD	2536:1	2536:6	7	tif -> tif_setupencode
LEAF_NODE	2536:1	2536:1	8	tif
LEAF_NODE	2536:4	2536:4	8	->
LEAF_NODE	2536:6	2536:6	8	tif_setupencode
ASSIGN_OP	2536:22	2536:22	6	=
LEAF_NODE	2536:22	2536:22	7	=
RVAL	2536:24	2536:24	6	JPEGSetupEncode
FIELD	2536:24	2536:24	7	JPEGSetupEncode
LEAF_NODE	2536:24	2536:24	8	JPEGSetupEncode
LEAF_NODE	2536:39	2536:39	4	;
EXPR_STATEMENT	2537:1	2537:35	3	tif -> tif_preencode = JPEGPreEncode ;
EXPR	2537:1	2537:1	4	tif -> tif_preencode = JPEGPreEncode
ASSIGN	2537:1	2537:22	5	tif -> tif_preencode = JPEGPreEncode
LVAL	2537:1	2537:1	6	tif -> tif_preencode
FIELD	2537:1	2537:6	7	tif -> tif_preencode
LEAF_NODE	2537:1	2537:1	8	tif
LEAF_NODE	2537:4	2537:4	8	->
LEAF_NODE	2537:6	2537:6	8	tif_preencode
ASSIGN_OP	2537:20	2537:20	6	=
LEAF_NODE	2537:20	2537:20	7	=
RVAL	2537:22	2537:22	6	JPEGPreEncode
FIELD	2537:22	2537:22	7	JPEGPreEncode
LEAF_NODE	2537:22	2537:22	8	JPEGPreEncode
LEAF_NODE	2537:35	2537:35	4	;
EXPR_STATEMENT	2538:1	2538:37	3	tif -> tif_postencode = JPEGPostEncode ;
EXPR	2538:1	2538:1	4	tif -> tif_postencode = JPEGPostEncode
ASSIGN	2538:1	2538:23	5	tif -> tif_postencode = JPEGPostEncode
LVAL	2538:1	2538:1	6	tif -> tif_postencode
FIELD	2538:1	2538:6	7	tif -> tif_postencode
LEAF_NODE	2538:1	2538:1	8	tif
LEAF_NODE	2538:4	2538:4	8	->
LEAF_NODE	2538:6	2538:6	8	tif_postencode
ASSIGN_OP	2538:21	2538:21	6	=
LEAF_NODE	2538:21	2538:21	7	=
RVAL	2538:23	2538:23	6	JPEGPostEncode
FIELD	2538:23	2538:23	7	JPEGPostEncode
LEAF_NODE	2538:23	2538:23	8	JPEGPostEncode
LEAF_NODE	2538:37	2538:37	4	;
EXPR_STATEMENT	2539:1	2539:32	3	tif -> tif_encoderow = JPEGEncode ;
EXPR	2539:1	2539:1	4	tif -> tif_encoderow = JPEGEncode
ASSIGN	2539:1	2539:22	5	tif -> tif_encoderow = JPEGEncode
LVAL	2539:1	2539:1	6	tif -> tif_encoderow
FIELD	2539:1	2539:6	7	tif -> tif_encoderow
LEAF_NODE	2539:1	2539:1	8	tif
LEAF_NODE	2539:4	2539:4	8	->
LEAF_NODE	2539:6	2539:6	8	tif_encoderow
ASSIGN_OP	2539:20	2539:20	6	=
LEAF_NODE	2539:20	2539:20	7	=
RVAL	2539:22	2539:22	6	JPEGEncode
FIELD	2539:22	2539:22	7	JPEGEncode
LEAF_NODE	2539:22	2539:22	8	JPEGEncode
LEAF_NODE	2539:32	2539:32	4	;
EXPR_STATEMENT	2540:1	2540:34	3	tif -> tif_encodestrip = JPEGEncode ;
EXPR	2540:1	2540:1	4	tif -> tif_encodestrip = JPEGEncode
ASSIGN	2540:1	2540:24	5	tif -> tif_encodestrip = JPEGEncode
LVAL	2540:1	2540:1	6	tif -> tif_encodestrip
FIELD	2540:1	2540:6	7	tif -> tif_encodestrip
LEAF_NODE	2540:1	2540:1	8	tif
LEAF_NODE	2540:4	2540:4	8	->
LEAF_NODE	2540:6	2540:6	8	tif_encodestrip
ASSIGN_OP	2540:22	2540:22	6	=
LEAF_NODE	2540:22	2540:22	7	=
RVAL	2540:24	2540:24	6	JPEGEncode
FIELD	2540:24	2540:24	7	JPEGEncode
LEAF_NODE	2540:24	2540:24	8	JPEGEncode
LEAF_NODE	2540:34	2540:34	4	;
EXPR_STATEMENT	2541:1	2541:33	3	tif -> tif_encodetile = JPEGEncode ;
EXPR	2541:1	2541:1	4	tif -> tif_encodetile = JPEGEncode
ASSIGN	2541:1	2541:23	5	tif -> tif_encodetile = JPEGEncode
LVAL	2541:1	2541:1	6	tif -> tif_encodetile
FIELD	2541:1	2541:6	7	tif -> tif_encodetile
LEAF_NODE	2541:1	2541:1	8	tif
LEAF_NODE	2541:4	2541:4	8	->
LEAF_NODE	2541:6	2541:6	8	tif_encodetile
ASSIGN_OP	2541:21	2541:21	6	=
LEAF_NODE	2541:21	2541:21	7	=
RVAL	2541:23	2541:23	6	JPEGEncode
FIELD	2541:23	2541:23	7	JPEGEncode
LEAF_NODE	2541:23	2541:23	8	JPEGEncode
LEAF_NODE	2541:33	2541:33	4	;
EXPR_STATEMENT	2542:1	2542:31	3	tif -> tif_cleanup = JPEGCleanup ;
EXPR	2542:1	2542:1	4	tif -> tif_cleanup = JPEGCleanup
ASSIGN	2542:1	2542:20	5	tif -> tif_cleanup = JPEGCleanup
LVAL	2542:1	2542:1	6	tif -> tif_cleanup
FIELD	2542:1	2542:6	7	tif -> tif_cleanup
LEAF_NODE	2542:1	2542:1	8	tif
LEAF_NODE	2542:4	2542:4	8	->
LEAF_NODE	2542:6	2542:6	8	tif_cleanup
ASSIGN_OP	2542:18	2542:18	6	=
LEAF_NODE	2542:18	2542:18	7	=
RVAL	2542:20	2542:20	6	JPEGCleanup
FIELD	2542:20	2542:20	7	JPEGCleanup
LEAF_NODE	2542:20	2542:20	8	JPEGCleanup
LEAF_NODE	2542:31	2542:31	4	;
EXPR_STATEMENT	2543:1	2543:39	3	sp -> defsparent = tif -> tif_defstripsize ;
EXPR	2543:1	2543:1	4	sp -> defsparent = tif -> tif_defstripsize
ASSIGN	2543:1	2543:18	5	sp -> defsparent = tif -> tif_defstripsize
LVAL	2543:1	2543:1	6	sp -> defsparent
FIELD	2543:1	2543:5	7	sp -> defsparent
LEAF_NODE	2543:1	2543:1	8	sp
LEAF_NODE	2543:3	2543:3	8	->
LEAF_NODE	2543:5	2543:5	8	defsparent
ASSIGN_OP	2543:16	2543:16	6	=
LEAF_NODE	2543:16	2543:16	7	=
RVAL	2543:18	2543:18	6	tif -> tif_defstripsize
FIELD	2543:18	2543:23	7	tif -> tif_defstripsize
LEAF_NODE	2543:18	2543:18	8	tif
LEAF_NODE	2543:21	2543:21	8	->
LEAF_NODE	2543:23	2543:23	8	tif_defstripsize
LEAF_NODE	2543:39	2543:39	4	;
EXPR_STATEMENT	2544:1	2544:45	3	tif -> tif_defstripsize = JPEGDefaultStripSize ;
EXPR	2544:1	2544:1	4	tif -> tif_defstripsize = JPEGDefaultStripSize
ASSIGN	2544:1	2544:25	5	tif -> tif_defstripsize = JPEGDefaultStripSize
LVAL	2544:1	2544:1	6	tif -> tif_defstripsize
FIELD	2544:1	2544:6	7	tif -> tif_defstripsize
LEAF_NODE	2544:1	2544:1	8	tif
LEAF_NODE	2544:4	2544:4	8	->
LEAF_NODE	2544:6	2544:6	8	tif_defstripsize
ASSIGN_OP	2544:23	2544:23	6	=
LEAF_NODE	2544:23	2544:23	7	=
RVAL	2544:25	2544:25	6	JPEGDefaultStripSize
FIELD	2544:25	2544:25	7	JPEGDefaultStripSize
LEAF_NODE	2544:25	2544:25	8	JPEGDefaultStripSize
LEAF_NODE	2544:45	2544:45	4	;
EXPR_STATEMENT	2545:1	2545:38	3	sp -> deftparent = tif -> tif_deftilesize ;
EXPR	2545:1	2545:1	4	sp -> deftparent = tif -> tif_deftilesize
ASSIGN	2545:1	2545:18	5	sp -> deftparent = tif -> tif_deftilesize
LVAL	2545:1	2545:1	6	sp -> deftparent
FIELD	2545:1	2545:5	7	sp -> deftparent
LEAF_NODE	2545:1	2545:1	8	sp
LEAF_NODE	2545:3	2545:3	8	->
LEAF_NODE	2545:5	2545:5	8	deftparent
ASSIGN_OP	2545:16	2545:16	6	=
LEAF_NODE	2545:16	2545:16	7	=
RVAL	2545:18	2545:18	6	tif -> tif_deftilesize
FIELD	2545:18	2545:23	7	tif -> tif_deftilesize
LEAF_NODE	2545:18	2545:18	8	tif
LEAF_NODE	2545:21	2545:21	8	->
LEAF_NODE	2545:23	2545:23	8	tif_deftilesize
LEAF_NODE	2545:38	2545:38	4	;
EXPR_STATEMENT	2546:1	2546:43	3	tif -> tif_deftilesize = JPEGDefaultTileSize ;
EXPR	2546:1	2546:1	4	tif -> tif_deftilesize = JPEGDefaultTileSize
ASSIGN	2546:1	2546:24	5	tif -> tif_deftilesize = JPEGDefaultTileSize
LVAL	2546:1	2546:1	6	tif -> tif_deftilesize
FIELD	2546:1	2546:6	7	tif -> tif_deftilesize
LEAF_NODE	2546:1	2546:1	8	tif
LEAF_NODE	2546:4	2546:4	8	->
LEAF_NODE	2546:6	2546:6	8	tif_deftilesize
ASSIGN_OP	2546:22	2546:22	6	=
LEAF_NODE	2546:22	2546:22	7	=
RVAL	2546:24	2546:24	6	JPEGDefaultTileSize
FIELD	2546:24	2546:24	7	JPEGDefaultTileSize
LEAF_NODE	2546:24	2546:24	8	JPEGDefaultTileSize
LEAF_NODE	2546:43	2546:43	4	;
EXPR_STATEMENT	2547:1	2547:32	3	tif -> tif_flags |= TIFF_NOBITREV ;
EXPR	2547:1	2547:1	4	tif -> tif_flags |= TIFF_NOBITREV
ASSIGN	2547:1	2547:19	5	tif -> tif_flags |= TIFF_NOBITREV
LVAL	2547:1	2547:1	6	tif -> tif_flags
FIELD	2547:1	2547:6	7	tif -> tif_flags
LEAF_NODE	2547:1	2547:1	8	tif
LEAF_NODE	2547:4	2547:4	8	->
LEAF_NODE	2547:6	2547:6	8	tif_flags
ASSIGN_OP	2547:16	2547:16	6	|=
LEAF_NODE	2547:16	2547:16	7	|=
RVAL	2547:19	2547:19	6	TIFF_NOBITREV
FIELD	2547:19	2547:19	7	TIFF_NOBITREV
LEAF_NODE	2547:19	2547:19	8	TIFF_NOBITREV
LEAF_NODE	2547:32	2547:32	4	;
EXPR_STATEMENT	2549:8	2549:37	3	sp -> cinfo_initialized = FALSE ;
EXPR	2549:8	2549:8	4	sp -> cinfo_initialized = FALSE
ASSIGN	2549:8	2549:32	5	sp -> cinfo_initialized = FALSE
LVAL	2549:8	2549:8	6	sp -> cinfo_initialized
FIELD	2549:8	2549:12	7	sp -> cinfo_initialized
LEAF_NODE	2549:8	2549:8	8	sp
LEAF_NODE	2549:10	2549:10	8	->
LEAF_NODE	2549:12	2549:12	8	cinfo_initialized
ASSIGN_OP	2549:30	2549:30	6	=
LEAF_NODE	2549:30	2549:30	7	=
RVAL	2549:32	2549:32	6	FALSE
FIELD	2549:32	2549:32	7	FALSE
LEAF_NODE	2549:32	2549:32	8	FALSE
LEAF_NODE	2549:37	2549:37	4	;
SELECTION	2557:8	2558:8	3	
KEYWORD	2557:8	2557:8	4	if
LEAF_NODE	2557:8	2557:8	5	if
LEAF_NODE	2557:10	2557:10	4	(
CONDITION	2557:12	2557:12	4	tif -> tif_diroff == 0
EXPR	2557:12	2557:31	5	tif -> tif_diroff == 0
FIELD	2557:12	2557:17	6	tif -> tif_diroff
LEAF_NODE	2557:12	2557:12	7	tif
LEAF_NODE	2557:15	2557:15	7	->
LEAF_NODE	2557:17	2557:17	7	tif_diroff
EQ_OPERATOR	2557:28	2557:28	6	==
LEAF_NODE	2557:28	2557:28	7	==
FIELD	2557:31	2557:31	6	0
LEAF_NODE	2557:31	2557:31	7	0
LEAF_NODE	2557:33	2557:33	4	)
STATEMENTS	2558:8	2582:8	4	
LEAF_NODE	2558:8	2558:8	5	{
STATEMENTS	2568:12	2574:12	5	
EXPR_STATEMENT	2568:12	2568:54	6	sp -> jpegtables_length = SIZE_OF_JPEGTABLES ;
EXPR	2568:12	2568:12	7	sp -> jpegtables_length = SIZE_OF_JPEGTABLES
ASSIGN	2568:12	2568:36	8	sp -> jpegtables_length = SIZE_OF_JPEGTABLES
LVAL	2568:12	2568:12	9	sp -> jpegtables_length
FIELD	2568:12	2568:16	10	sp -> jpegtables_length
LEAF_NODE	2568:12	2568:12	11	sp
LEAF_NODE	2568:14	2568:14	11	->
LEAF_NODE	2568:16	2568:16	11	jpegtables_length
ASSIGN_OP	2568:34	2568:34	9	=
LEAF_NODE	2568:34	2568:34	10	=
RVAL	2568:36	2568:36	9	SIZE_OF_JPEGTABLES
FIELD	2568:36	2568:36	10	SIZE_OF_JPEGTABLES
LEAF_NODE	2568:36	2568:36	11	SIZE_OF_JPEGTABLES
LEAF_NODE	2568:54	2568:54	7	;
EXPR_STATEMENT	2569:12	2569:72	6	sp -> jpegtables = ( void * ) _TIFFmalloc ( sp -> jpegtables_length ) ;
EXPR	2569:12	2569:12	7	sp -> jpegtables = ( void * ) _TIFFmalloc ( sp -> jpegtables_length )
ASSIGN	2569:12	2569:29	8	sp -> jpegtables = ( void * ) _TIFFmalloc ( sp -> jpegtables_length )
LVAL	2569:12	2569:12	9	sp -> jpegtables
FIELD	2569:12	2569:16	10	sp -> jpegtables
LEAF_NODE	2569:12	2569:12	11	sp
LEAF_NODE	2569:14	2569:14	11	->
LEAF_NODE	2569:16	2569:16	11	jpegtables
ASSIGN_OP	2569:27	2569:27	9	=
LEAF_NODE	2569:27	2569:27	10	=
RVAL	2569:29	2569:38	9	( void * ) _TIFFmalloc ( sp -> jpegtables_length )
LEAF_NODE	2569:29	2569:29	10	(
TYPE_NAME	2569:30	2569:30	10	void
LEAF_NODE	2569:30	2569:30	11	void
LEAF_NODE	2569:35	2569:35	10	*
LEAF_NODE	2569:36	2569:36	10	)
FUNCTION_CALL	2569:38	2569:71	10	_TIFFmalloc ( sp -> jpegtables_length )
CALLEE	2569:38	2569:38	11	_TIFFmalloc
LEAF_NODE	2569:38	2569:38	12	_TIFFmalloc
LEAF_NODE	2569:49	2569:49	11	(
ARGUMENT	2569:50	2569:50	11	sp -> jpegtables_length
FIELD	2569:50	2569:54	12	sp -> jpegtables_length
LEAF_NODE	2569:50	2569:50	13	sp
LEAF_NODE	2569:52	2569:52	13	->
LEAF_NODE	2569:54	2569:54	13	jpegtables_length
LEAF_NODE	2569:71	2569:71	11	)
LEAF_NODE	2569:72	2569:72	7	;
SELECTION	2570:12	2571:12	6	
KEYWORD	2570:12	2570:12	7	if
LEAF_NODE	2570:12	2570:12	8	if
LEAF_NODE	2570:15	2570:15	7	(
CONDITION	2570:16	2570:16	7	sp -> jpegtables
EXPR	2570:16	2570:16	8	sp -> jpegtables
FIELD	2570:16	2570:20	9	sp -> jpegtables
LEAF_NODE	2570:16	2570:16	10	sp
LEAF_NODE	2570:18	2570:18	10	->
LEAF_NODE	2570:20	2570:20	10	jpegtables
LEAF_NODE	2570:30	2570:30	7	)
STATEMENTS	2571:12	2573:12	7	
LEAF_NODE	2571:12	2571:12	8	{
STATEMENTS	2572:16	2572:16	8	
EXPR_STATEMENT	2572:16	2572:66	9	_TIFFmemset ( sp -> jpegtables , 0 , SIZE_OF_JPEGTABLES ) ;
EXPR	2572:16	2572:16	10	_TIFFmemset ( sp -> jpegtables , 0 , SIZE_OF_JPEGTABLES )
FUNCTION_CALL	2572:16	2572:65	11	_TIFFmemset ( sp -> jpegtables , 0 , SIZE_OF_JPEGTABLES )
CALLEE	2572:16	2572:16	12	_TIFFmemset
LEAF_NODE	2572:16	2572:16	13	_TIFFmemset
LEAF_NODE	2572:27	2572:27	12	(
ARGUMENT	2572:28	2572:28	12	sp -> jpegtables
FIELD	2572:28	2572:32	13	sp -> jpegtables
LEAF_NODE	2572:28	2572:28	14	sp
LEAF_NODE	2572:30	2572:30	14	->
LEAF_NODE	2572:32	2572:32	14	jpegtables
LEAF_NODE	2572:42	2572:42	12	,
ARGUMENT	2572:44	2572:44	12	0
FIELD	2572:44	2572:44	13	0
LEAF_NODE	2572:44	2572:44	14	0
LEAF_NODE	2572:45	2572:45	12	,
ARGUMENT	2572:47	2572:47	12	SIZE_OF_JPEGTABLES
FIELD	2572:47	2572:47	13	SIZE_OF_JPEGTABLES
LEAF_NODE	2572:47	2572:47	14	SIZE_OF_JPEGTABLES
LEAF_NODE	2572:65	2572:65	12	)
LEAF_NODE	2572:66	2572:66	10	;
LEAF_NODE	2573:12	2573:12	8	}
SELECTION	2574:12	2575:12	6	
KEYWORD	2574:12	2574:12	7	else
LEAF_NODE	2574:12	2574:12	8	else
STATEMENTS	2575:12	2580:12	7	
LEAF_NODE	2575:12	2575:12	8	{
STATEMENTS	2576:16	2579:16	8	
EXPR_STATEMENT	2576:16	2578:73	9	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitJPEG" , "Failed to allocate memory for JPEG tables" ) ;
EXPR	2576:16	2576:16	10	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitJPEG" , "Failed to allocate memory for JPEG tables" )
FUNCTION_CALL	2576:16	2578:72	11	TIFFErrorExt ( tif -> tif_clientdata , "TIFFInitJPEG" , "Failed to allocate memory for JPEG tables" )
CALLEE	2576:16	2576:16	12	TIFFErrorExt
LEAF_NODE	2576:16	2576:16	13	TIFFErrorExt
LEAF_NODE	2576:28	2576:28	12	(
ARGUMENT	2576:29	2576:29	12	tif -> tif_clientdata
FIELD	2576:29	2576:34	13	tif -> tif_clientdata
LEAF_NODE	2576:29	2576:29	14	tif
LEAF_NODE	2576:32	2576:32	14	->
LEAF_NODE	2576:34	2576:34	14	tif_clientdata
LEAF_NODE	2576:48	2576:48	12	,
ARGUMENT	2577:8	2577:8	12	"TIFFInitJPEG"
FIELD	2577:8	2577:8	13	"TIFFInitJPEG"
LEAF_NODE	2577:8	2577:8	14	"TIFFInitJPEG"
LEAF_NODE	2577:22	2577:22	12	,
ARGUMENT	2578:29	2578:29	12	"Failed to allocate memory for JPEG tables"
FIELD	2578:29	2578:29	13	"Failed to allocate memory for JPEG tables"
LEAF_NODE	2578:29	2578:29	14	"Failed to allocate memory for JPEG tables"
LEAF_NODE	2578:72	2578:72	12	)
LEAF_NODE	2578:73	2578:73	10	;
JUMP_STATEMENT	2579:16	2579:24	9	return 0 ;
KEYWORD	2579:16	2579:16	10	return
LEAF_NODE	2579:16	2579:16	11	return
DESTINATION	2579:23	2579:23	10	0
EXPR	2579:23	2579:23	11	0
FIELD	2579:23	2579:23	12	0
LEAF_NODE	2579:23	2579:23	13	0
LEAF_NODE	2579:24	2579:24	10	;
LEAF_NODE	2580:12	2580:12	8	}
LEAF_NODE	2582:8	2582:8	5	}
JUMP_STATEMENT	2584:1	2584:9	3	return 1 ;
KEYWORD	2584:1	2584:1	4	return
LEAF_NODE	2584:1	2584:1	5	return
DESTINATION	2584:8	2584:8	4	1
EXPR	2584:8	2584:8	5	1
FIELD	2584:8	2584:8	6	1
LEAF_NODE	2584:8	2584:8	7	1
LEAF_NODE	2584:9	2584:9	4	;
LEAF_NODE	2585:0	2585:0	2	}
