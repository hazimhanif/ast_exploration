SOURCE_FILE	34:0	78:0	0	
FUNCTION_DEF	34:0	40:0	1	
RETURN_TYPE	34:0	34:0	2	int
TYPE_NAME	34:0	34:0	3	int
LEAF_NODE	34:0	34:0	4	int
FUNCTION_NAME	34:4	34:4	2	TIFFGetTagListCount
LEAF_NODE	34:4	34:4	3	TIFFGetTagListCount
PARAMETER_LIST	34:23	34:35	2	( TIFF * tif )
LEAF_NODE	34:23	34:23	3	(
PARAMETER_DECL	34:25	34:31	3	TIFF * tif
TYPE	34:25	34:30	4	TIFF *
TYPE_NAME	34:25	34:25	5	TIFF
LEAF_NODE	34:25	34:25	6	TIFF
POINTER	34:30	34:30	5	*
LEAF_NODE	34:30	34:30	6	*
NAME	34:31	34:31	4	tif
LEAF_NODE	34:31	34:31	5	tif
LEAF_NODE	34:35	34:35	3	)
LEAF_NODE	36:0	36:0	2	{
STATEMENTS	37:4	39:4	2	
SIMPLE_DECL	37:4	37:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	37:4	37:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	37:4	37:17	5	TIFFDirectory *
TYPE_NAME	37:4	37:4	6	TIFFDirectory
LEAF_NODE	37:4	37:4	7	TIFFDirectory
POINTER	37:17	37:17	6	*
LEAF_NODE	37:17	37:17	7	*
NAME	37:19	37:19	5	td
LEAF_NODE	37:19	37:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	37:19	37:19	5	td = & tif -> tif_dir
ASSIGN	37:19	37:24	6	td = & tif -> tif_dir
LVAL	37:19	37:19	7	td
NAME	37:19	37:19	8	td
LEAF_NODE	37:19	37:19	9	td
ASSIGN_OP	37:22	37:22	7	=
LEAF_NODE	37:22	37:22	8	=
RVAL	37:24	37:24	7	& tif -> tif_dir
UNARY_EXPR	37:24	37:25	8	& tif -> tif_dir
UNARY_OPERATOR	37:24	37:24	9	&
LEAF_NODE	37:24	37:24	10	&
FIELD	37:25	37:30	9	tif -> tif_dir
LEAF_NODE	37:25	37:25	10	tif
LEAF_NODE	37:28	37:28	10	->
LEAF_NODE	37:30	37:30	10	tif_dir
LEAF_NODE	37:37	37:37	4	;
JUMP_STATEMENT	39:4	39:34	3	return td -> td_customValueCount ;
KEYWORD	39:4	39:4	4	return
LEAF_NODE	39:4	39:4	5	return
DESTINATION	39:11	39:11	4	td -> td_customValueCount
EXPR	39:11	39:11	5	td -> td_customValueCount
FIELD	39:11	39:15	6	td -> td_customValueCount
LEAF_NODE	39:11	39:11	7	td
LEAF_NODE	39:13	39:13	7	->
LEAF_NODE	39:15	39:15	7	td_customValueCount
LEAF_NODE	39:34	39:34	4	;
LEAF_NODE	40:0	40:0	2	}
FUNCTION_DEF	42:0	51:0	1	
RETURN_TYPE	42:0	42:0	2	uint32
TYPE_NAME	42:0	42:0	3	uint32
LEAF_NODE	42:0	42:0	4	uint32
FUNCTION_NAME	42:7	42:7	2	TIFFGetTagListEntry
LEAF_NODE	42:7	42:7	3	TIFFGetTagListEntry
PARAMETER_LIST	42:26	42:53	2	( TIFF * tif , int tag_index )
LEAF_NODE	42:26	42:26	3	(
PARAMETER_DECL	42:28	42:34	3	TIFF * tif
TYPE	42:28	42:33	4	TIFF *
TYPE_NAME	42:28	42:28	5	TIFF
LEAF_NODE	42:28	42:28	6	TIFF
POINTER	42:33	42:33	5	*
LEAF_NODE	42:33	42:33	6	*
NAME	42:34	42:34	4	tif
LEAF_NODE	42:34	42:34	5	tif
LEAF_NODE	42:37	42:37	3	,
PARAMETER_DECL	42:39	42:43	3	int tag_index
TYPE	42:39	42:39	4	int
TYPE_NAME	42:39	42:39	5	int
LEAF_NODE	42:39	42:39	6	int
NAME	42:43	42:43	4	tag_index
LEAF_NODE	42:43	42:43	5	tag_index
LEAF_NODE	42:53	42:53	3	)
LEAF_NODE	44:0	44:0	2	{
STATEMENTS	45:4	49:4	2	
SIMPLE_DECL	45:4	45:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	45:4	45:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	45:4	45:17	5	TIFFDirectory *
TYPE_NAME	45:4	45:4	6	TIFFDirectory
LEAF_NODE	45:4	45:4	7	TIFFDirectory
POINTER	45:17	45:17	6	*
LEAF_NODE	45:17	45:17	7	*
NAME	45:19	45:19	5	td
LEAF_NODE	45:19	45:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	45:19	45:19	5	td = & tif -> tif_dir
ASSIGN	45:19	45:24	6	td = & tif -> tif_dir
LVAL	45:19	45:19	7	td
NAME	45:19	45:19	8	td
LEAF_NODE	45:19	45:19	9	td
ASSIGN_OP	45:22	45:22	7	=
LEAF_NODE	45:22	45:22	8	=
RVAL	45:24	45:24	7	& tif -> tif_dir
UNARY_EXPR	45:24	45:25	8	& tif -> tif_dir
UNARY_OPERATOR	45:24	45:24	9	&
LEAF_NODE	45:24	45:24	10	&
FIELD	45:25	45:30	9	tif -> tif_dir
LEAF_NODE	45:25	45:25	10	tif
LEAF_NODE	45:28	45:28	10	->
LEAF_NODE	45:30	45:30	10	tif_dir
LEAF_NODE	45:37	45:37	4	;
SELECTION	47:4	48:8	3	
KEYWORD	47:4	47:4	4	if
LEAF_NODE	47:4	47:4	5	if
LEAF_NODE	47:6	47:6	4	(
CONDITION	47:8	47:8	4	tag_index < 0 || tag_index >= td -> td_customValueCount
EXPR	47:8	47:8	5	tag_index < 0 || tag_index >= td -> td_customValueCount
OR	47:8	47:25	6	tag_index < 0 || tag_index >= td -> td_customValueCount
EXPR	47:8	47:20	7	tag_index < 0
FIELD	47:8	47:8	8	tag_index
LEAF_NODE	47:8	47:8	9	tag_index
REL_OPERATOR	47:18	47:18	8	<
LEAF_NODE	47:18	47:18	9	<
FIELD	47:20	47:20	8	0
LEAF_NODE	47:20	47:20	9	0
LEAF_NODE	47:22	47:22	7	||
EXPR	47:25	47:38	7	tag_index >= td -> td_customValueCount
FIELD	47:25	47:25	8	tag_index
LEAF_NODE	47:25	47:25	9	tag_index
REL_OPERATOR	47:35	47:35	8	>=
LEAF_NODE	47:35	47:35	9	>=
FIELD	47:38	47:42	8	td -> td_customValueCount
LEAF_NODE	47:38	47:38	9	td
LEAF_NODE	47:40	47:40	9	->
LEAF_NODE	47:42	47:42	9	td_customValueCount
LEAF_NODE	47:62	47:62	4	)
STATEMENTS	48:8	48:8	4	
JUMP_STATEMENT	48:8	48:27	5	return ( uint32 ) ( - 1 ) ;
KEYWORD	48:8	48:8	6	return
LEAF_NODE	48:8	48:8	7	return
DESTINATION	48:15	48:15	6	( uint32 ) ( - 1 )
EXPR	48:15	48:26	7	( uint32 ) ( - 1 )
LEAF_NODE	48:15	48:15	8	(
TYPE_NAME	48:16	48:16	8	uint32
LEAF_NODE	48:16	48:16	9	uint32
LEAF_NODE	48:22	48:22	8	)
LEAF_NODE	48:23	48:23	8	(
UNARY_EXPR	48:24	48:25	8	- 1
UNARY_OPERATOR	48:24	48:24	9	-
LEAF_NODE	48:24	48:24	10	-
FIELD	48:25	48:25	9	1
LEAF_NODE	48:25	48:25	10	1
LEAF_NODE	48:26	48:26	8	)
LEAF_NODE	48:27	48:27	6	;
SELECTION	49:4	50:8	3	
KEYWORD	49:4	49:4	4	else
LEAF_NODE	49:4	49:4	5	else
STATEMENTS	50:8	50:8	4	
JUMP_STATEMENT	50:8	50:61	5	return td -> td_customValues [ tag_index ] . info -> field_tag ;
KEYWORD	50:8	50:8	6	return
LEAF_NODE	50:8	50:8	7	return
DESTINATION	50:15	50:15	6	td -> td_customValues [ tag_index ] . info -> field_tag
EXPR	50:15	50:15	7	td -> td_customValues [ tag_index ] . info -> field_tag
FIELD	50:15	50:52	8	td -> td_customValues [ tag_index ] . info -> field_tag
LEAF_NODE	50:15	50:15	9	td
LEAF_NODE	50:17	50:17	9	->
LEAF_NODE	50:19	50:19	9	td_customValues
LEAF_NODE	50:34	50:34	9	[
EXPR	50:35	50:35	9	tag_index
FIELD	50:35	50:35	10	tag_index
LEAF_NODE	50:35	50:35	11	tag_index
LEAF_NODE	50:44	50:44	9	]
LEAF_NODE	50:45	50:45	9	.
LEAF_NODE	50:46	50:46	9	info
LEAF_NODE	50:50	50:50	9	->
LEAF_NODE	50:52	50:52	9	field_tag
LEAF_NODE	50:61	50:61	6	;
LEAF_NODE	51:0	51:0	2	}
FUNCTION_DEF	58:0	62:0	1	
RETURN_TYPE	58:0	58:15	2	TIFFTagMethods *
TYPE_NAME	58:0	58:0	3	TIFFTagMethods
LEAF_NODE	58:0	58:0	4	TIFFTagMethods
LEAF_NODE	58:15	58:15	3	*
FUNCTION_NAME	58:16	58:16	2	TIFFAccessTagMethods
LEAF_NODE	58:16	58:16	3	TIFFAccessTagMethods
PARAMETER_LIST	58:36	58:48	2	( TIFF * tif )
LEAF_NODE	58:36	58:36	3	(
PARAMETER_DECL	58:38	58:44	3	TIFF * tif
TYPE	58:38	58:43	4	TIFF *
TYPE_NAME	58:38	58:38	5	TIFF
LEAF_NODE	58:38	58:38	6	TIFF
POINTER	58:43	58:43	5	*
LEAF_NODE	58:43	58:43	6	*
NAME	58:44	58:44	4	tif
LEAF_NODE	58:44	58:44	5	tif
LEAF_NODE	58:48	58:48	3	)
LEAF_NODE	60:0	60:0	2	{
STATEMENTS	61:4	61:4	2	
JUMP_STATEMENT	61:4	61:33	3	return & ( tif -> tif_tagmethods ) ;
KEYWORD	61:4	61:4	4	return
LEAF_NODE	61:4	61:4	5	return
DESTINATION	61:11	61:11	4	& ( tif -> tif_tagmethods )
EXPR	61:11	61:11	5	& ( tif -> tif_tagmethods )
UNARY_EXPR	61:11	61:32	6	& ( tif -> tif_tagmethods )
UNARY_OPERATOR	61:11	61:11	7	&
LEAF_NODE	61:11	61:11	8	&
LEAF_NODE	61:12	61:12	7	(
FIELD	61:13	61:18	7	tif -> tif_tagmethods
LEAF_NODE	61:13	61:13	8	tif
LEAF_NODE	61:16	61:16	8	->
LEAF_NODE	61:18	61:18	8	tif_tagmethods
LEAF_NODE	61:32	61:32	7	)
LEAF_NODE	61:33	61:33	4	;
LEAF_NODE	62:0	62:0	2	}
FUNCTION_DEF	64:0	76:0	1	
RETURN_TYPE	64:0	64:5	2	void *
TYPE_NAME	64:0	64:0	3	void
LEAF_NODE	64:0	64:0	4	void
LEAF_NODE	64:5	64:5	3	*
FUNCTION_NAME	64:6	64:6	2	TIFFGetClientInfo
LEAF_NODE	64:6	64:6	3	TIFFGetClientInfo
PARAMETER_LIST	64:23	64:53	2	( TIFF * tif , const char * name )
LEAF_NODE	64:23	64:23	3	(
PARAMETER_DECL	64:25	64:31	3	TIFF * tif
TYPE	64:25	64:30	4	TIFF *
TYPE_NAME	64:25	64:25	5	TIFF
LEAF_NODE	64:25	64:25	6	TIFF
POINTER	64:30	64:30	5	*
LEAF_NODE	64:30	64:30	6	*
NAME	64:31	64:31	4	tif
LEAF_NODE	64:31	64:31	5	tif
LEAF_NODE	64:34	64:34	3	,
PARAMETER_DECL	64:36	64:48	3	const char * name
TYPE	64:36	64:47	4	const char *
TYPE_NAME	64:36	64:42	5	const char
LEAF_NODE	64:36	64:36	6	const
LEAF_NODE	64:42	64:42	6	char
POINTER	64:47	64:47	5	*
LEAF_NODE	64:47	64:47	6	*
NAME	64:48	64:48	4	name
LEAF_NODE	64:48	64:48	5	name
LEAF_NODE	64:53	64:53	3	)
LEAF_NODE	66:0	66:0	2	{
STATEMENTS	67:4	74:4	2	
SIMPLE_DECL	67:4	67:52	3	TIFFClientInfoLink * psLink ; psLink = tif -> tif_clientinfo ;
VAR_DECL	67:4	67:24	4	TIFFClientInfoLink * psLink ; psLink = tif -> tif_clientinfo
TYPE	67:4	67:23	5	TIFFClientInfoLink *
TYPE_NAME	67:4	67:4	6	TIFFClientInfoLink
LEAF_NODE	67:4	67:4	7	TIFFClientInfoLink
POINTER	67:23	67:23	6	*
LEAF_NODE	67:23	67:23	7	*
NAME	67:24	67:24	5	psLink
LEAF_NODE	67:24	67:24	6	psLink
LEAF_NODE	0:0	0:0	5	;
INIT	67:24	67:24	5	psLink = tif -> tif_clientinfo
ASSIGN	67:24	67:33	6	psLink = tif -> tif_clientinfo
LVAL	67:24	67:24	7	psLink
NAME	67:24	67:24	8	psLink
LEAF_NODE	67:24	67:24	9	psLink
ASSIGN_OP	67:31	67:31	7	=
LEAF_NODE	67:31	67:31	8	=
RVAL	67:33	67:33	7	tif -> tif_clientinfo
FIELD	67:33	67:38	8	tif -> tif_clientinfo
LEAF_NODE	67:33	67:33	9	tif
LEAF_NODE	67:36	67:36	9	->
LEAF_NODE	67:38	67:38	9	tif_clientinfo
LEAF_NODE	67:52	67:52	4	;
ITERATION	69:4	70:8	3	
KEYWORD	69:4	69:4	4	while
LEAF_NODE	69:4	69:4	5	while
LEAF_NODE	69:9	69:9	4	(
CONDITION	69:11	69:11	4	psLink != NULL && strcmp ( psLink -> name , name ) != 0
EXPR	69:11	69:11	5	psLink != NULL && strcmp ( psLink -> name , name ) != 0
AND	69:11	69:29	6	psLink != NULL && strcmp ( psLink -> name , name ) != 0
EXPR	69:11	69:21	7	psLink != NULL
FIELD	69:11	69:11	8	psLink
LEAF_NODE	69:11	69:11	9	psLink
EQ_OPERATOR	69:18	69:18	8	!=
LEAF_NODE	69:18	69:18	9	!=
FIELD	69:21	69:21	8	NULL
LEAF_NODE	69:21	69:21	9	NULL
LEAF_NODE	69:26	69:26	7	&&
EXPR	69:29	69:58	7	strcmp ( psLink -> name , name ) != 0
FUNCTION_CALL	69:29	69:53	8	strcmp ( psLink -> name , name )
CALLEE	69:29	69:29	9	strcmp
LEAF_NODE	69:29	69:29	10	strcmp
LEAF_NODE	69:35	69:35	9	(
ARGUMENT	69:36	69:36	9	psLink -> name
FIELD	69:36	69:44	10	psLink -> name
LEAF_NODE	69:36	69:36	11	psLink
LEAF_NODE	69:42	69:42	11	->
LEAF_NODE	69:44	69:44	11	name
LEAF_NODE	69:48	69:48	9	,
ARGUMENT	69:49	69:49	9	name
FIELD	69:49	69:49	10	name
LEAF_NODE	69:49	69:49	11	name
LEAF_NODE	69:53	69:53	9	)
EQ_OPERATOR	69:55	69:55	8	!=
LEAF_NODE	69:55	69:55	9	!=
FIELD	69:58	69:58	8	0
LEAF_NODE	69:58	69:58	9	0
LEAF_NODE	69:60	69:60	4	)
STATEMENTS	70:8	70:8	4	
EXPR_STATEMENT	70:8	70:29	5	psLink = psLink -> next ;
EXPR	70:8	70:8	6	psLink = psLink -> next
ASSIGN	70:8	70:17	7	psLink = psLink -> next
LVAL	70:8	70:8	8	psLink
FIELD	70:8	70:8	9	psLink
LEAF_NODE	70:8	70:8	10	psLink
ASSIGN_OP	70:15	70:15	8	=
LEAF_NODE	70:15	70:15	9	=
RVAL	70:17	70:17	8	psLink -> next
FIELD	70:17	70:25	9	psLink -> next
LEAF_NODE	70:17	70:17	10	psLink
LEAF_NODE	70:23	70:23	10	->
LEAF_NODE	70:25	70:25	10	next
LEAF_NODE	70:29	70:29	6	;
SELECTION	72:4	73:8	3	
KEYWORD	72:4	72:4	4	if
LEAF_NODE	72:4	72:4	5	if
LEAF_NODE	72:6	72:6	4	(
CONDITION	72:8	72:8	4	psLink != NULL
EXPR	72:8	72:18	5	psLink != NULL
FIELD	72:8	72:8	6	psLink
LEAF_NODE	72:8	72:8	7	psLink
EQ_OPERATOR	72:15	72:15	6	!=
LEAF_NODE	72:15	72:15	7	!=
FIELD	72:18	72:18	6	NULL
LEAF_NODE	72:18	72:18	7	NULL
LEAF_NODE	72:23	72:23	4	)
STATEMENTS	73:8	73:8	4	
JUMP_STATEMENT	73:8	73:27	5	return psLink -> data ;
KEYWORD	73:8	73:8	6	return
LEAF_NODE	73:8	73:8	7	return
DESTINATION	73:15	73:15	6	psLink -> data
EXPR	73:15	73:15	7	psLink -> data
FIELD	73:15	73:23	8	psLink -> data
LEAF_NODE	73:15	73:15	9	psLink
LEAF_NODE	73:21	73:21	9	->
LEAF_NODE	73:23	73:23	9	data
LEAF_NODE	73:27	73:27	6	;
SELECTION	74:4	75:8	3	
KEYWORD	74:4	74:4	4	else
LEAF_NODE	74:4	74:4	5	else
STATEMENTS	75:8	75:8	4	
JUMP_STATEMENT	75:8	75:19	5	return NULL ;
KEYWORD	75:8	75:8	6	return
LEAF_NODE	75:8	75:8	7	return
DESTINATION	75:15	75:15	6	NULL
EXPR	75:15	75:15	7	NULL
FIELD	75:15	75:15	8	NULL
LEAF_NODE	75:15	75:15	9	NULL
LEAF_NODE	75:19	75:19	6	;
LEAF_NODE	76:0	76:0	2	}
FUNCTION_DEF	78:0	109:0	1	
RETURN_TYPE	78:0	78:0	2	void
TYPE_NAME	78:0	78:0	3	void
LEAF_NODE	78:0	78:0	4	void
FUNCTION_NAME	78:5	78:5	2	TIFFSetClientInfo
LEAF_NODE	78:5	78:5	3	TIFFSetClientInfo
PARAMETER_LIST	78:22	78:64	2	( TIFF * tif , void * data , const char * name )
LEAF_NODE	78:22	78:22	3	(
PARAMETER_DECL	78:24	78:30	3	TIFF * tif
TYPE	78:24	78:29	4	TIFF *
TYPE_NAME	78:24	78:24	5	TIFF
LEAF_NODE	78:24	78:24	6	TIFF
POINTER	78:29	78:29	5	*
LEAF_NODE	78:29	78:29	6	*
NAME	78:30	78:30	4	tif
LEAF_NODE	78:30	78:30	5	tif
LEAF_NODE	78:33	78:33	3	,
PARAMETER_DECL	78:35	78:41	3	void * data
TYPE	78:35	78:40	4	void *
TYPE_NAME	78:35	78:35	5	void
LEAF_NODE	78:35	78:35	6	void
POINTER	78:40	78:40	5	*
LEAF_NODE	78:40	78:40	6	*
NAME	78:41	78:41	4	data
LEAF_NODE	78:41	78:41	5	data
LEAF_NODE	78:45	78:45	3	,
PARAMETER_DECL	78:47	78:59	3	const char * name
TYPE	78:47	78:58	4	const char *
TYPE_NAME	78:47	78:53	5	const char
LEAF_NODE	78:47	78:47	6	const
LEAF_NODE	78:53	78:53	6	char
POINTER	78:58	78:58	5	*
LEAF_NODE	78:58	78:58	6	*
NAME	78:59	78:59	4	name
LEAF_NODE	78:59	78:59	5	name
LEAF_NODE	78:64	78:64	3	)
LEAF_NODE	80:0	80:0	2	{
STATEMENTS	81:4	108:4	2	
SIMPLE_DECL	81:4	81:52	3	TIFFClientInfoLink * psLink ; psLink = tif -> tif_clientinfo ;
VAR_DECL	81:4	81:24	4	TIFFClientInfoLink * psLink ; psLink = tif -> tif_clientinfo
TYPE	81:4	81:23	5	TIFFClientInfoLink *
TYPE_NAME	81:4	81:4	6	TIFFClientInfoLink
LEAF_NODE	81:4	81:4	7	TIFFClientInfoLink
POINTER	81:23	81:23	6	*
LEAF_NODE	81:23	81:23	7	*
NAME	81:24	81:24	5	psLink
LEAF_NODE	81:24	81:24	6	psLink
LEAF_NODE	0:0	0:0	5	;
INIT	81:24	81:24	5	psLink = tif -> tif_clientinfo
ASSIGN	81:24	81:33	6	psLink = tif -> tif_clientinfo
LVAL	81:24	81:24	7	psLink
NAME	81:24	81:24	8	psLink
LEAF_NODE	81:24	81:24	9	psLink
ASSIGN_OP	81:31	81:31	7	=
LEAF_NODE	81:31	81:31	8	=
RVAL	81:33	81:33	7	tif -> tif_clientinfo
FIELD	81:33	81:38	8	tif -> tif_clientinfo
LEAF_NODE	81:33	81:33	9	tif
LEAF_NODE	81:36	81:36	9	->
LEAF_NODE	81:38	81:38	9	tif_clientinfo
LEAF_NODE	81:52	81:52	4	;
ITERATION	87:4	88:8	3	
KEYWORD	87:4	87:4	4	while
LEAF_NODE	87:4	87:4	5	while
LEAF_NODE	87:9	87:9	4	(
CONDITION	87:11	87:11	4	psLink != NULL && strcmp ( psLink -> name , name ) != 0
EXPR	87:11	87:11	5	psLink != NULL && strcmp ( psLink -> name , name ) != 0
AND	87:11	87:29	6	psLink != NULL && strcmp ( psLink -> name , name ) != 0
EXPR	87:11	87:21	7	psLink != NULL
FIELD	87:11	87:11	8	psLink
LEAF_NODE	87:11	87:11	9	psLink
EQ_OPERATOR	87:18	87:18	8	!=
LEAF_NODE	87:18	87:18	9	!=
FIELD	87:21	87:21	8	NULL
LEAF_NODE	87:21	87:21	9	NULL
LEAF_NODE	87:26	87:26	7	&&
EXPR	87:29	87:58	7	strcmp ( psLink -> name , name ) != 0
FUNCTION_CALL	87:29	87:53	8	strcmp ( psLink -> name , name )
CALLEE	87:29	87:29	9	strcmp
LEAF_NODE	87:29	87:29	10	strcmp
LEAF_NODE	87:35	87:35	9	(
ARGUMENT	87:36	87:36	9	psLink -> name
FIELD	87:36	87:44	10	psLink -> name
LEAF_NODE	87:36	87:36	11	psLink
LEAF_NODE	87:42	87:42	11	->
LEAF_NODE	87:44	87:44	11	name
LEAF_NODE	87:48	87:48	9	,
ARGUMENT	87:49	87:49	9	name
FIELD	87:49	87:49	10	name
LEAF_NODE	87:49	87:49	11	name
LEAF_NODE	87:53	87:53	9	)
EQ_OPERATOR	87:55	87:55	8	!=
LEAF_NODE	87:55	87:55	9	!=
FIELD	87:58	87:58	8	0
LEAF_NODE	87:58	87:58	9	0
LEAF_NODE	87:60	87:60	4	)
STATEMENTS	88:8	88:8	4	
EXPR_STATEMENT	88:8	88:29	5	psLink = psLink -> next ;
EXPR	88:8	88:8	6	psLink = psLink -> next
ASSIGN	88:8	88:17	7	psLink = psLink -> next
LVAL	88:8	88:8	8	psLink
FIELD	88:8	88:8	9	psLink
LEAF_NODE	88:8	88:8	10	psLink
ASSIGN_OP	88:15	88:15	8	=
LEAF_NODE	88:15	88:15	9	=
RVAL	88:17	88:17	8	psLink -> next
FIELD	88:17	88:25	9	psLink -> next
LEAF_NODE	88:17	88:17	10	psLink
LEAF_NODE	88:23	88:23	10	->
LEAF_NODE	88:25	88:25	10	next
LEAF_NODE	88:29	88:29	6	;
SELECTION	90:4	91:4	3	
KEYWORD	90:4	90:4	4	if
LEAF_NODE	90:4	90:4	5	if
LEAF_NODE	90:6	90:6	4	(
CONDITION	90:8	90:8	4	psLink != NULL
EXPR	90:8	90:18	5	psLink != NULL
FIELD	90:8	90:8	6	psLink
LEAF_NODE	90:8	90:8	7	psLink
EQ_OPERATOR	90:15	90:15	6	!=
LEAF_NODE	90:15	90:15	7	!=
FIELD	90:18	90:18	6	NULL
LEAF_NODE	90:18	90:18	7	NULL
LEAF_NODE	90:23	90:23	4	)
STATEMENTS	91:4	94:4	4	
LEAF_NODE	91:4	91:4	5	{
STATEMENTS	92:8	93:8	5	
EXPR_STATEMENT	92:8	92:27	6	psLink -> data = data ;
EXPR	92:8	92:8	7	psLink -> data = data
ASSIGN	92:8	92:23	8	psLink -> data = data
LVAL	92:8	92:8	9	psLink -> data
FIELD	92:8	92:16	10	psLink -> data
LEAF_NODE	92:8	92:8	11	psLink
LEAF_NODE	92:14	92:14	11	->
LEAF_NODE	92:16	92:16	11	data
ASSIGN_OP	92:21	92:21	9	=
LEAF_NODE	92:21	92:21	10	=
RVAL	92:23	92:23	9	data
FIELD	92:23	92:23	10	data
LEAF_NODE	92:23	92:23	11	data
LEAF_NODE	92:27	92:27	7	;
JUMP_STATEMENT	93:8	93:14	6	return DESTINATION ;
KEYWORD	93:8	93:8	7	return
LEAF_NODE	93:8	93:8	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	93:14	93:14	7	;
LEAF_NODE	94:4	94:4	5	}
EXPR_STATEMENT	100:4	100:75	3	psLink = ( TIFFClientInfoLink * ) _TIFFmalloc ( sizeof ( TIFFClientInfoLink ) ) ;
EXPR	100:4	100:4	4	psLink = ( TIFFClientInfoLink * ) _TIFFmalloc ( sizeof ( TIFFClientInfoLink ) )
ASSIGN	100:4	100:13	5	psLink = ( TIFFClientInfoLink * ) _TIFFmalloc ( sizeof ( TIFFClientInfoLink ) )
LVAL	100:4	100:4	6	psLink
FIELD	100:4	100:4	7	psLink
LEAF_NODE	100:4	100:4	8	psLink
ASSIGN_OP	100:11	100:11	6	=
LEAF_NODE	100:11	100:11	7	=
RVAL	100:13	100:36	6	( TIFFClientInfoLink * ) _TIFFmalloc ( sizeof ( TIFFClientInfoLink ) )
LEAF_NODE	100:13	100:13	7	(
TYPE_NAME	100:14	100:14	7	TIFFClientInfoLink
LEAF_NODE	100:14	100:14	8	TIFFClientInfoLink
LEAF_NODE	100:33	100:33	7	*
LEAF_NODE	100:34	100:34	7	)
FUNCTION_CALL	100:36	100:74	7	_TIFFmalloc ( sizeof ( TIFFClientInfoLink ) )
CALLEE	100:36	100:36	8	_TIFFmalloc
LEAF_NODE	100:36	100:36	9	_TIFFmalloc
LEAF_NODE	100:47	100:47	8	(
ARGUMENT	100:48	100:48	8	sizeof ( TIFFClientInfoLink )
FUNCTION_CALL	100:48	100:73	9	sizeof ( TIFFClientInfoLink )
CALLEE	100:48	100:48	10	sizeof
LEAF_NODE	100:48	100:48	11	sizeof
LEAF_NODE	100:54	100:54	10	(
ARGUMENT	100:55	100:55	10	TIFFClientInfoLink
FIELD	100:55	100:55	11	TIFFClientInfoLink
LEAF_NODE	100:55	100:55	12	TIFFClientInfoLink
LEAF_NODE	100:73	100:73	10	)
LEAF_NODE	100:74	100:74	8	)
LEAF_NODE	100:75	100:75	4	;
EXPR_STATEMENT	101:4	101:27	3	assert ( psLink != NULL ) ;
EXPR	101:4	101:4	4	assert ( psLink != NULL )
FUNCTION_CALL	101:4	101:26	5	assert ( psLink != NULL )
CALLEE	101:4	101:4	6	assert
LEAF_NODE	101:4	101:4	7	assert
LEAF_NODE	101:11	101:11	6	(
ARGUMENT	101:12	101:22	6	psLink != NULL
FIELD	101:12	101:12	7	psLink
LEAF_NODE	101:12	101:12	8	psLink
EQ_OPERATOR	101:19	101:19	7	!=
LEAF_NODE	101:19	101:19	8	!=
FIELD	101:22	101:22	7	NULL
LEAF_NODE	101:22	101:22	8	NULL
LEAF_NODE	101:26	101:26	6	)
LEAF_NODE	101:27	101:27	4	;
EXPR_STATEMENT	102:4	102:38	3	psLink -> next = tif -> tif_clientinfo ;
EXPR	102:4	102:4	4	psLink -> next = tif -> tif_clientinfo
ASSIGN	102:4	102:19	5	psLink -> next = tif -> tif_clientinfo
LVAL	102:4	102:4	6	psLink -> next
FIELD	102:4	102:12	7	psLink -> next
LEAF_NODE	102:4	102:4	8	psLink
LEAF_NODE	102:10	102:10	8	->
LEAF_NODE	102:12	102:12	8	next
ASSIGN_OP	102:17	102:17	6	=
LEAF_NODE	102:17	102:17	7	=
RVAL	102:19	102:19	6	tif -> tif_clientinfo
FIELD	102:19	102:24	7	tif -> tif_clientinfo
LEAF_NODE	102:19	102:19	8	tif
LEAF_NODE	102:22	102:22	8	->
LEAF_NODE	102:24	102:24	8	tif_clientinfo
LEAF_NODE	102:38	102:38	4	;
EXPR_STATEMENT	103:4	103:67	3	psLink -> name = ( char * ) _TIFFmalloc ( ( tmsize_t ) ( strlen ( name ) + 1 ) ) ;
EXPR	103:4	103:4	4	psLink -> name = ( char * ) _TIFFmalloc ( ( tmsize_t ) ( strlen ( name ) + 1 ) )
ASSIGN	103:4	103:19	5	psLink -> name = ( char * ) _TIFFmalloc ( ( tmsize_t ) ( strlen ( name ) + 1 ) )
LVAL	103:4	103:4	6	psLink -> name
FIELD	103:4	103:12	7	psLink -> name
LEAF_NODE	103:4	103:4	8	psLink
LEAF_NODE	103:10	103:10	8	->
LEAF_NODE	103:12	103:12	8	name
ASSIGN_OP	103:17	103:17	6	=
LEAF_NODE	103:17	103:17	7	=
RVAL	103:19	103:28	6	( char * ) _TIFFmalloc ( ( tmsize_t ) ( strlen ( name ) + 1 ) )
LEAF_NODE	103:19	103:19	7	(
TYPE_NAME	103:20	103:20	7	char
LEAF_NODE	103:20	103:20	8	char
LEAF_NODE	103:25	103:25	7	*
LEAF_NODE	103:26	103:26	7	)
FUNCTION_CALL	103:28	103:66	7	_TIFFmalloc ( ( tmsize_t ) ( strlen ( name ) + 1 ) )
CALLEE	103:28	103:28	8	_TIFFmalloc
LEAF_NODE	103:28	103:28	9	_TIFFmalloc
LEAF_NODE	103:39	103:39	8	(
ARGUMENT	103:40	103:65	8	( tmsize_t ) ( strlen ( name ) + 1 )
LEAF_NODE	103:40	103:40	9	(
TYPE_NAME	103:41	103:41	9	tmsize_t
LEAF_NODE	103:41	103:41	10	tmsize_t
LEAF_NODE	103:49	103:49	9	)
LEAF_NODE	103:50	103:50	9	(
FUNCTION_CALL	103:51	103:62	9	strlen ( name )
CALLEE	103:51	103:51	10	strlen
LEAF_NODE	103:51	103:51	11	strlen
LEAF_NODE	103:57	103:57	10	(
ARGUMENT	103:58	103:58	10	name
FIELD	103:58	103:58	11	name
LEAF_NODE	103:58	103:58	12	name
LEAF_NODE	103:62	103:62	10	)
LEAF_NODE	103:63	103:63	9	+
FIELD	103:64	103:64	9	1
LEAF_NODE	103:64	103:64	10	1
LEAF_NODE	103:65	103:65	9	)
LEAF_NODE	103:66	103:66	8	)
LEAF_NODE	103:67	103:67	4	;
EXPR_STATEMENT	104:4	104:33	3	assert ( psLink -> name != NULL ) ;
EXPR	104:4	104:4	4	assert ( psLink -> name != NULL )
FUNCTION_CALL	104:4	104:32	5	assert ( psLink -> name != NULL )
CALLEE	104:4	104:4	6	assert
LEAF_NODE	104:4	104:4	7	assert
LEAF_NODE	104:11	104:11	6	(
ARGUMENT	104:12	104:28	6	psLink -> name != NULL
FIELD	104:12	104:20	7	psLink -> name
LEAF_NODE	104:12	104:12	8	psLink
LEAF_NODE	104:18	104:18	8	->
LEAF_NODE	104:20	104:20	8	name
EQ_OPERATOR	104:25	104:25	7	!=
LEAF_NODE	104:25	104:25	8	!=
FIELD	104:28	104:28	7	NULL
LEAF_NODE	104:28	104:28	8	NULL
LEAF_NODE	104:32	104:32	6	)
LEAF_NODE	104:33	104:33	4	;
EXPR_STATEMENT	105:4	105:30	3	strcpy ( psLink -> name , name ) ;
EXPR	105:4	105:4	4	strcpy ( psLink -> name , name )
FUNCTION_CALL	105:4	105:29	5	strcpy ( psLink -> name , name )
CALLEE	105:4	105:4	6	strcpy
LEAF_NODE	105:4	105:4	7	strcpy
LEAF_NODE	105:10	105:10	6	(
ARGUMENT	105:11	105:11	6	psLink -> name
FIELD	105:11	105:19	7	psLink -> name
LEAF_NODE	105:11	105:11	8	psLink
LEAF_NODE	105:17	105:17	8	->
LEAF_NODE	105:19	105:19	8	name
LEAF_NODE	105:23	105:23	6	,
ARGUMENT	105:25	105:25	6	name
FIELD	105:25	105:25	7	name
LEAF_NODE	105:25	105:25	8	name
LEAF_NODE	105:29	105:29	6	)
LEAF_NODE	105:30	105:30	4	;
EXPR_STATEMENT	106:4	106:23	3	psLink -> data = data ;
EXPR	106:4	106:4	4	psLink -> data = data
ASSIGN	106:4	106:19	5	psLink -> data = data
LVAL	106:4	106:4	6	psLink -> data
FIELD	106:4	106:12	7	psLink -> data
LEAF_NODE	106:4	106:4	8	psLink
LEAF_NODE	106:10	106:10	8	->
LEAF_NODE	106:12	106:12	8	data
ASSIGN_OP	106:17	106:17	6	=
LEAF_NODE	106:17	106:17	7	=
RVAL	106:19	106:19	6	data
FIELD	106:19	106:19	7	data
LEAF_NODE	106:19	106:19	8	data
LEAF_NODE	106:23	106:23	4	;
EXPR_STATEMENT	108:4	108:32	3	tif -> tif_clientinfo = psLink ;
EXPR	108:4	108:4	4	tif -> tif_clientinfo = psLink
ASSIGN	108:4	108:26	5	tif -> tif_clientinfo = psLink
LVAL	108:4	108:4	6	tif -> tif_clientinfo
FIELD	108:4	108:9	7	tif -> tif_clientinfo
LEAF_NODE	108:4	108:4	8	tif
LEAF_NODE	108:7	108:7	8	->
LEAF_NODE	108:9	108:9	8	tif_clientinfo
ASSIGN_OP	108:24	108:24	6	=
LEAF_NODE	108:24	108:24	7	=
RVAL	108:26	108:26	6	psLink
FIELD	108:26	108:26	7	psLink
LEAF_NODE	108:26	108:26	8	psLink
LEAF_NODE	108:32	108:32	4	;
LEAF_NODE	109:0	109:0	2	}
