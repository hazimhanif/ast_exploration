SOURCE_FILE	60:8	374:0	0	
SIMPLE_DECL	60:8	64:22	1	union fd_as_handle_union BASE_CLASSES { int fd ; thandle_t h ; } fd_as_handle_union_t ;
VAR_DECL	60:8	64:2	2	union fd_as_handle_union BASE_CLASSES { int fd ; thandle_t h ; } fd_as_handle_union_t
TYPE	60:8	60:8	3	union fd_as_handle_union BASE_CLASSES { int fd ; thandle_t h ; }
CLASS_DEF	60:8	64:0	4	union fd_as_handle_union BASE_CLASSES { int fd ; thandle_t h ; }
LEAF_NODE	60:8	60:8	5	union
CLASS_NAME	60:14	60:14	5	fd_as_handle_union
LEAF_NODE	60:14	60:14	6	fd_as_handle_union
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	61:0	61:0	5	{
CLASS_CONTENT	62:1	63:1	5	int fd ; thandle_t h ;
SIMPLE_DECL	62:1	62:7	6	int fd ;
VAR_DECL	62:1	62:5	7	int fd
TYPE	62:1	62:1	8	int
TYPE_NAME	62:1	62:1	9	int
LEAF_NODE	62:1	62:1	10	int
NAME	62:5	62:5	8	fd
LEAF_NODE	62:5	62:5	9	fd
LEAF_NODE	62:7	62:7	7	;
SIMPLE_DECL	63:1	63:12	6	thandle_t h ;
VAR_DECL	63:1	63:11	7	thandle_t h
TYPE	63:1	63:1	8	thandle_t
TYPE_NAME	63:1	63:1	9	thandle_t
LEAF_NODE	63:1	63:1	10	thandle_t
NAME	63:11	63:11	8	h
LEAF_NODE	63:11	63:11	9	h
LEAF_NODE	63:12	63:12	7	;
LEAF_NODE	64:0	64:0	5	}
NAME	64:2	64:2	3	fd_as_handle_union_t
LEAF_NODE	64:2	64:2	4	fd_as_handle_union_t
LEAF_NODE	64:22	64:22	2	;
FUNCTION_DEF	66:0	92:0	1	
RETURN_TYPE	66:0	66:7	2	static tmsize_t
LEAF_NODE	66:0	66:0	3	static
TYPE_NAME	66:7	66:7	3	tmsize_t
LEAF_NODE	66:7	66:7	4	tmsize_t
FUNCTION_NAME	67:0	67:0	2	_tiffReadProc
LEAF_NODE	67:0	67:0	3	_tiffReadProc
PARAMETER_LIST	67:13	67:52	2	( thandle_t fd , void * buf , tmsize_t size )
LEAF_NODE	67:13	67:13	3	(
PARAMETER_DECL	67:14	67:24	3	thandle_t fd
TYPE	67:14	67:14	4	thandle_t
TYPE_NAME	67:14	67:14	5	thandle_t
LEAF_NODE	67:14	67:14	6	thandle_t
NAME	67:24	67:24	4	fd
LEAF_NODE	67:24	67:24	5	fd
LEAF_NODE	67:26	67:26	3	,
PARAMETER_DECL	67:28	67:34	3	void * buf
TYPE	67:28	67:32	4	void *
TYPE_NAME	67:28	67:28	5	void
LEAF_NODE	67:28	67:28	6	void
POINTER	67:32	67:32	5	*
LEAF_NODE	67:32	67:32	6	*
NAME	67:34	67:34	4	buf
LEAF_NODE	67:34	67:34	5	buf
LEAF_NODE	67:37	67:37	3	,
PARAMETER_DECL	67:39	67:48	3	tmsize_t size
TYPE	67:39	67:39	4	tmsize_t
TYPE_NAME	67:39	67:39	5	tmsize_t
LEAF_NODE	67:39	67:39	6	tmsize_t
NAME	67:48	67:48	4	size
LEAF_NODE	67:48	67:48	5	size
LEAF_NODE	67:52	67:52	3	)
LEAF_NODE	68:0	68:0	2	{
STATEMENTS	69:1	91:8	2	
SIMPLE_DECL	69:1	69:25	3	fd_as_handle_union_t fdh ;
VAR_DECL	69:1	69:22	4	fd_as_handle_union_t fdh
TYPE	69:1	69:1	5	fd_as_handle_union_t
TYPE_NAME	69:1	69:1	6	fd_as_handle_union_t
LEAF_NODE	69:1	69:1	7	fd_as_handle_union_t
NAME	69:22	69:22	5	fdh
LEAF_NODE	69:22	69:22	6	fdh
LEAF_NODE	69:25	69:25	4	;
SIMPLE_DECL	70:8	70:48	3	const size_t bytes_total ; bytes_total = ( size_t ) size ;
VAR_DECL	70:8	70:21	4	const size_t bytes_total ; bytes_total = ( size_t ) size
TYPE	70:8	70:8	5	const size_t
TYPE_NAME	70:8	70:14	6	const size_t
LEAF_NODE	70:8	70:8	7	const
LEAF_NODE	70:14	70:14	7	size_t
NAME	70:21	70:21	5	bytes_total
LEAF_NODE	70:21	70:21	6	bytes_total
LEAF_NODE	0:0	0:0	5	;
INIT	70:21	70:21	5	bytes_total = ( size_t ) size
ASSIGN	70:21	70:35	6	bytes_total = ( size_t ) size
LVAL	70:21	70:21	7	bytes_total
NAME	70:21	70:21	8	bytes_total
LEAF_NODE	70:21	70:21	9	bytes_total
ASSIGN_OP	70:33	70:33	7	=
LEAF_NODE	70:33	70:33	8	=
RVAL	70:35	70:44	7	( size_t ) size
LEAF_NODE	70:35	70:35	8	(
TYPE_NAME	70:36	70:36	8	size_t
LEAF_NODE	70:36	70:36	9	size_t
LEAF_NODE	70:42	70:42	8	)
FIELD	70:44	70:44	8	size
LEAF_NODE	70:44	70:44	9	size
LEAF_NODE	70:48	70:48	4	;
SIMPLE_DECL	71:8	71:25	3	size_t bytes_read ;
VAR_DECL	71:8	71:15	4	size_t bytes_read
TYPE	71:8	71:8	5	size_t
TYPE_NAME	71:8	71:8	6	size_t
LEAF_NODE	71:8	71:8	7	size_t
NAME	71:15	71:15	5	bytes_read
LEAF_NODE	71:15	71:15	6	bytes_read
LEAF_NODE	71:25	71:25	4	;
SIMPLE_DECL	72:8	72:27	3	tmsize_t count ; count = - 1 ;
VAR_DECL	72:8	72:17	4	tmsize_t count ; count = - 1
TYPE	72:8	72:8	5	tmsize_t
TYPE_NAME	72:8	72:8	6	tmsize_t
LEAF_NODE	72:8	72:8	7	tmsize_t
NAME	72:17	72:17	5	count
LEAF_NODE	72:17	72:17	6	count
LEAF_NODE	0:0	0:0	5	;
INIT	72:17	72:17	5	count = - 1
ASSIGN	72:17	72:25	6	count = - 1
LVAL	72:17	72:17	7	count
NAME	72:17	72:17	8	count
LEAF_NODE	72:17	72:17	9	count
ASSIGN_OP	72:23	72:23	7	=
LEAF_NODE	72:23	72:23	8	=
RVAL	72:25	72:25	7	- 1
UNARY_EXPR	72:25	72:26	8	- 1
UNARY_OPERATOR	72:25	72:25	9	-
LEAF_NODE	72:25	72:25	10	-
FIELD	72:26	72:26	9	1
LEAF_NODE	72:26	72:26	10	1
LEAF_NODE	72:27	72:27	4	;
SELECTION	73:1	74:1	3	
KEYWORD	73:1	73:1	4	if
LEAF_NODE	73:1	73:1	5	if
LEAF_NODE	73:4	73:4	4	(
CONDITION	73:5	73:5	4	( tmsize_t ) bytes_total != size
EXPR	73:5	73:31	5	( tmsize_t ) bytes_total != size
LEAF_NODE	73:5	73:5	6	(
TYPE_NAME	73:6	73:6	6	tmsize_t
LEAF_NODE	73:6	73:6	7	tmsize_t
LEAF_NODE	73:14	73:14	6	)
FIELD	73:16	73:16	6	bytes_total
LEAF_NODE	73:16	73:16	7	bytes_total
EQ_OPERATOR	73:28	73:28	6	!=
LEAF_NODE	73:28	73:28	7	!=
FIELD	73:31	73:31	6	size
LEAF_NODE	73:31	73:31	7	size
LEAF_NODE	73:35	73:35	4	)
STATEMENTS	74:1	77:1	4	
LEAF_NODE	74:1	74:1	5	{
STATEMENTS	75:2	76:2	5	
EXPR_STATEMENT	75:2	75:14	6	errno = EINVAL ;
EXPR	75:2	75:2	7	errno = EINVAL
ASSIGN	75:2	75:8	8	errno = EINVAL
LVAL	75:2	75:2	9	errno
FIELD	75:2	75:2	10	errno
LEAF_NODE	75:2	75:2	11	errno
ASSIGN_OP	75:7	75:7	9	=
LEAF_NODE	75:7	75:7	10	=
RVAL	75:8	75:8	9	EINVAL
FIELD	75:8	75:8	10	EINVAL
LEAF_NODE	75:8	75:8	11	EINVAL
LEAF_NODE	75:14	75:14	7	;
JUMP_STATEMENT	76:2	76:22	6	return ( tmsize_t ) - 1 ;
KEYWORD	76:2	76:2	7	return
LEAF_NODE	76:2	76:2	8	return
DESTINATION	76:9	76:9	7	( tmsize_t ) - 1
EXPR	76:9	76:20	8	( tmsize_t ) - 1
LEAF_NODE	76:9	76:9	9	(
TYPE_NAME	76:10	76:10	9	tmsize_t
LEAF_NODE	76:10	76:10	10	tmsize_t
LEAF_NODE	76:18	76:18	9	)
UNARY_EXPR	76:20	76:21	9	- 1
UNARY_OPERATOR	76:20	76:20	10	-
LEAF_NODE	76:20	76:20	11	-
FIELD	76:21	76:21	10	1
LEAF_NODE	76:21	76:21	11	1
LEAF_NODE	76:22	76:22	7	;
LEAF_NODE	77:1	77:1	5	}
EXPR_STATEMENT	78:1	78:11	3	fdh . h = fd ;
EXPR	78:1	78:1	4	fdh . h = fd
ASSIGN	78:1	78:9	5	fdh . h = fd
LVAL	78:1	78:1	6	fdh . h
FIELD	78:1	78:5	7	fdh . h
LEAF_NODE	78:1	78:1	8	fdh
LEAF_NODE	78:4	78:4	8	.
LEAF_NODE	78:5	78:5	8	h
ASSIGN_OP	78:7	78:7	6	=
LEAF_NODE	78:7	78:7	7	=
RVAL	78:9	78:9	6	fd
FIELD	78:9	78:9	7	fd
LEAF_NODE	78:9	78:9	8	fd
LEAF_NODE	78:11	78:11	4	;
ITERATION	79:8	80:8	3	
KEYWORD	79:8	79:8	4	for
LEAF_NODE	79:8	79:8	5	for
LEAF_NODE	79:12	79:12	4	(
FOR_INIT	79:13	79:25	4	bytes_read = 0 ;
EXPR	79:13	79:13	5	bytes_read = 0
ASSIGN	79:13	79:24	6	bytes_read = 0
LVAL	79:13	79:13	7	bytes_read
FIELD	79:13	79:13	8	bytes_read
LEAF_NODE	79:13	79:13	9	bytes_read
ASSIGN_OP	79:23	79:23	7	=
LEAF_NODE	79:23	79:23	8	=
RVAL	79:24	79:24	7	0
FIELD	79:24	79:24	8	0
LEAF_NODE	79:24	79:24	9	0
LEAF_NODE	79:25	79:25	5	;
CONDITION	79:27	79:27	4	bytes_read < bytes_total
EXPR	79:27	79:40	5	bytes_read < bytes_total
FIELD	79:27	79:27	6	bytes_read
LEAF_NODE	79:27	79:27	7	bytes_read
REL_OPERATOR	79:38	79:38	6	<
LEAF_NODE	79:38	79:38	7	<
FIELD	79:40	79:40	6	bytes_total
LEAF_NODE	79:40	79:40	7	bytes_total
LEAF_NODE	79:51	79:51	4	;
FOR_EXPR	79:53	79:53	4	bytes_read += count
EXPR	79:53	79:53	5	bytes_read += count
ASSIGN	79:53	79:65	6	bytes_read += count
LVAL	79:53	79:53	7	bytes_read
FIELD	79:53	79:53	8	bytes_read
LEAF_NODE	79:53	79:53	9	bytes_read
ASSIGN_OP	79:63	79:63	7	+=
LEAF_NODE	79:63	79:63	8	+=
RVAL	79:65	79:65	7	count
FIELD	79:65	79:65	8	count
LEAF_NODE	79:65	79:65	9	count
LEAF_NODE	79:70	79:70	4	)
STATEMENTS	80:8	88:8	4	
LEAF_NODE	80:8	80:8	5	{
STATEMENTS	81:16	86:16	5	
SIMPLE_DECL	81:16	81:58	6	char * buf_offset ; buf_offset = ( char * ) buf + bytes_read ;
VAR_DECL	81:16	81:22	7	char * buf_offset ; buf_offset = ( char * ) buf + bytes_read
TYPE	81:16	81:21	8	char *
TYPE_NAME	81:16	81:16	9	char
LEAF_NODE	81:16	81:16	10	char
POINTER	81:21	81:21	9	*
LEAF_NODE	81:21	81:21	10	*
NAME	81:22	81:22	8	buf_offset
LEAF_NODE	81:22	81:22	9	buf_offset
LEAF_NODE	0:0	0:0	8	;
INIT	81:22	81:22	8	buf_offset = ( char * ) buf + bytes_read
ASSIGN	81:22	81:35	9	buf_offset = ( char * ) buf + bytes_read
LVAL	81:22	81:22	10	buf_offset
NAME	81:22	81:22	11	buf_offset
LEAF_NODE	81:22	81:22	12	buf_offset
ASSIGN_OP	81:33	81:33	10	=
LEAF_NODE	81:33	81:33	11	=
RVAL	81:35	81:48	10	( char * ) buf + bytes_read
LEAF_NODE	81:35	81:35	11	(
TYPE_NAME	81:36	81:36	11	char
LEAF_NODE	81:36	81:36	12	char
LEAF_NODE	81:41	81:41	11	*
LEAF_NODE	81:42	81:42	11	)
FIELD	81:44	81:44	11	buf
LEAF_NODE	81:44	81:44	12	buf
LEAF_NODE	81:47	81:47	11	+
FIELD	81:48	81:48	11	bytes_read
LEAF_NODE	81:48	81:48	12	bytes_read
LEAF_NODE	81:58	81:58	7	;
SIMPLE_DECL	82:16	82:55	6	size_t io_size ; io_size = bytes_total - bytes_read ;
VAR_DECL	82:16	82:23	7	size_t io_size ; io_size = bytes_total - bytes_read
TYPE	82:16	82:16	8	size_t
TYPE_NAME	82:16	82:16	9	size_t
LEAF_NODE	82:16	82:16	10	size_t
NAME	82:23	82:23	8	io_size
LEAF_NODE	82:23	82:23	9	io_size
LEAF_NODE	0:0	0:0	8	;
INIT	82:23	82:23	8	io_size = bytes_total - bytes_read
ASSIGN	82:23	82:33	9	io_size = bytes_total - bytes_read
LVAL	82:23	82:23	10	io_size
NAME	82:23	82:23	11	io_size
LEAF_NODE	82:23	82:23	12	io_size
ASSIGN_OP	82:31	82:31	10	=
LEAF_NODE	82:31	82:31	11	=
RVAL	82:33	82:45	10	bytes_total - bytes_read
FIELD	82:33	82:33	11	bytes_total
LEAF_NODE	82:33	82:33	12	bytes_total
LEAF_NODE	82:44	82:44	11	-
FIELD	82:45	82:45	11	bytes_read
LEAF_NODE	82:45	82:45	12	bytes_read
LEAF_NODE	82:55	82:55	7	;
SELECTION	83:16	84:24	6	
KEYWORD	83:16	83:16	7	if
LEAF_NODE	83:16	83:16	8	if
LEAF_NODE	83:19	83:19	7	(
CONDITION	83:20	83:20	7	io_size > TIFF_IO_MAX
EXPR	83:20	83:30	8	io_size > TIFF_IO_MAX
FIELD	83:20	83:20	9	io_size
LEAF_NODE	83:20	83:20	10	io_size
REL_OPERATOR	83:28	83:28	9	>
LEAF_NODE	83:28	83:28	10	>
FIELD	83:30	83:30	9	TIFF_IO_MAX
LEAF_NODE	83:30	83:30	10	TIFF_IO_MAX
LEAF_NODE	83:41	83:41	7	)
STATEMENTS	84:24	84:24	7	
EXPR_STATEMENT	84:24	84:45	8	io_size = TIFF_IO_MAX ;
EXPR	84:24	84:24	9	io_size = TIFF_IO_MAX
ASSIGN	84:24	84:34	10	io_size = TIFF_IO_MAX
LVAL	84:24	84:24	11	io_size
FIELD	84:24	84:24	12	io_size
LEAF_NODE	84:24	84:24	13	io_size
ASSIGN_OP	84:32	84:32	11	=
LEAF_NODE	84:32	84:32	12	=
RVAL	84:34	84:34	11	TIFF_IO_MAX
FIELD	84:34	84:34	12	TIFF_IO_MAX
LEAF_NODE	84:34	84:34	13	TIFF_IO_MAX
LEAF_NODE	84:45	84:45	9	;
EXPR_STATEMENT	85:16	85:70	6	count = read ( fdh . fd , buf_offset , ( TIFFIOSize_t ) io_size ) ;
EXPR	85:16	85:16	7	count = read ( fdh . fd , buf_offset , ( TIFFIOSize_t ) io_size )
ASSIGN	85:16	85:22	8	count = read ( fdh . fd , buf_offset , ( TIFFIOSize_t ) io_size )
LVAL	85:16	85:16	9	count
FIELD	85:16	85:16	10	count
LEAF_NODE	85:16	85:16	11	count
ASSIGN_OP	85:21	85:21	9	=
LEAF_NODE	85:21	85:21	10	=
RVAL	85:22	85:22	9	read ( fdh . fd , buf_offset , ( TIFFIOSize_t ) io_size )
FUNCTION_CALL	85:22	85:69	10	read ( fdh . fd , buf_offset , ( TIFFIOSize_t ) io_size )
CALLEE	85:22	85:22	11	read
LEAF_NODE	85:22	85:22	12	read
LEAF_NODE	85:26	85:26	11	(
ARGUMENT	85:27	85:27	11	fdh . fd
FIELD	85:27	85:31	12	fdh . fd
LEAF_NODE	85:27	85:27	13	fdh
LEAF_NODE	85:30	85:30	13	.
LEAF_NODE	85:31	85:31	13	fd
LEAF_NODE	85:33	85:33	11	,
ARGUMENT	85:35	85:35	11	buf_offset
FIELD	85:35	85:35	12	buf_offset
LEAF_NODE	85:35	85:35	13	buf_offset
LEAF_NODE	85:45	85:45	11	,
ARGUMENT	85:47	85:62	11	( TIFFIOSize_t ) io_size
LEAF_NODE	85:47	85:47	12	(
TYPE_NAME	85:48	85:48	12	TIFFIOSize_t
LEAF_NODE	85:48	85:48	13	TIFFIOSize_t
LEAF_NODE	85:60	85:60	12	)
FIELD	85:62	85:62	12	io_size
LEAF_NODE	85:62	85:62	13	io_size
LEAF_NODE	85:69	85:69	11	)
LEAF_NODE	85:70	85:70	7	;
SELECTION	86:16	87:24	6	
KEYWORD	86:16	86:16	7	if
LEAF_NODE	86:16	86:16	8	if
LEAF_NODE	86:19	86:19	7	(
CONDITION	86:20	86:20	7	count <= 0
EXPR	86:20	86:29	8	count <= 0
FIELD	86:20	86:20	9	count
LEAF_NODE	86:20	86:20	10	count
REL_OPERATOR	86:26	86:26	9	<=
LEAF_NODE	86:26	86:26	10	<=
FIELD	86:29	86:29	9	0
LEAF_NODE	86:29	86:29	10	0
LEAF_NODE	86:30	86:30	7	)
STATEMENTS	87:24	87:24	7	
JUMP_STATEMENT	87:24	87:29	8	break DESTINATION ;
KEYWORD	87:24	87:24	9	break
LEAF_NODE	87:24	87:24	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	87:29	87:29	9	;
LEAF_NODE	88:8	88:8	5	}
SELECTION	89:8	90:16	3	
KEYWORD	89:8	89:8	4	if
LEAF_NODE	89:8	89:8	5	if
LEAF_NODE	89:11	89:11	4	(
CONDITION	89:12	89:12	4	count < 0
EXPR	89:12	89:20	5	count < 0
FIELD	89:12	89:12	6	count
LEAF_NODE	89:12	89:12	7	count
REL_OPERATOR	89:18	89:18	6	<
LEAF_NODE	89:18	89:18	7	<
FIELD	89:20	89:20	6	0
LEAF_NODE	89:20	89:20	7	0
LEAF_NODE	89:21	89:21	4	)
STATEMENTS	90:16	90:16	4	
JUMP_STATEMENT	90:16	90:35	5	return ( tmsize_t ) - 1 ;
KEYWORD	90:16	90:16	6	return
LEAF_NODE	90:16	90:16	7	return
DESTINATION	90:23	90:23	6	( tmsize_t ) - 1
EXPR	90:23	90:33	7	( tmsize_t ) - 1
LEAF_NODE	90:23	90:23	8	(
TYPE_NAME	90:24	90:24	8	tmsize_t
LEAF_NODE	90:24	90:24	9	tmsize_t
LEAF_NODE	90:32	90:32	8	)
UNARY_EXPR	90:33	90:34	8	- 1
UNARY_OPERATOR	90:33	90:33	9	-
LEAF_NODE	90:33	90:33	10	-
FIELD	90:34	90:34	9	1
LEAF_NODE	90:34	90:34	10	1
LEAF_NODE	90:35	90:35	6	;
JUMP_STATEMENT	91:8	91:36	3	return ( tmsize_t ) bytes_read ;
KEYWORD	91:8	91:8	4	return
LEAF_NODE	91:8	91:8	5	return
DESTINATION	91:15	91:15	4	( tmsize_t ) bytes_read
EXPR	91:15	91:26	5	( tmsize_t ) bytes_read
LEAF_NODE	91:15	91:15	6	(
TYPE_NAME	91:16	91:16	6	tmsize_t
LEAF_NODE	91:16	91:16	7	tmsize_t
LEAF_NODE	91:24	91:24	6	)
FIELD	91:26	91:26	6	bytes_read
LEAF_NODE	91:26	91:26	7	bytes_read
LEAF_NODE	91:36	91:36	4	;
LEAF_NODE	92:0	92:0	2	}
FUNCTION_DEF	94:0	121:0	1	
RETURN_TYPE	94:0	94:7	2	static tmsize_t
LEAF_NODE	94:0	94:0	3	static
TYPE_NAME	94:7	94:7	3	tmsize_t
LEAF_NODE	94:7	94:7	4	tmsize_t
FUNCTION_NAME	95:0	95:0	2	_tiffWriteProc
LEAF_NODE	95:0	95:0	3	_tiffWriteProc
PARAMETER_LIST	95:14	95:53	2	( thandle_t fd , void * buf , tmsize_t size )
LEAF_NODE	95:14	95:14	3	(
PARAMETER_DECL	95:15	95:25	3	thandle_t fd
TYPE	95:15	95:15	4	thandle_t
TYPE_NAME	95:15	95:15	5	thandle_t
LEAF_NODE	95:15	95:15	6	thandle_t
NAME	95:25	95:25	4	fd
LEAF_NODE	95:25	95:25	5	fd
LEAF_NODE	95:27	95:27	3	,
PARAMETER_DECL	95:29	95:35	3	void * buf
TYPE	95:29	95:33	4	void *
TYPE_NAME	95:29	95:29	5	void
LEAF_NODE	95:29	95:29	6	void
POINTER	95:33	95:33	5	*
LEAF_NODE	95:33	95:33	6	*
NAME	95:35	95:35	4	buf
LEAF_NODE	95:35	95:35	5	buf
LEAF_NODE	95:38	95:38	3	,
PARAMETER_DECL	95:40	95:49	3	tmsize_t size
TYPE	95:40	95:40	4	tmsize_t
TYPE_NAME	95:40	95:40	5	tmsize_t
LEAF_NODE	95:40	95:40	6	tmsize_t
NAME	95:49	95:49	4	size
LEAF_NODE	95:49	95:49	5	size
LEAF_NODE	95:53	95:53	3	)
LEAF_NODE	96:0	96:0	2	{
STATEMENTS	97:1	119:8	2	
SIMPLE_DECL	97:1	97:25	3	fd_as_handle_union_t fdh ;
VAR_DECL	97:1	97:22	4	fd_as_handle_union_t fdh
TYPE	97:1	97:1	5	fd_as_handle_union_t
TYPE_NAME	97:1	97:1	6	fd_as_handle_union_t
LEAF_NODE	97:1	97:1	7	fd_as_handle_union_t
NAME	97:22	97:22	5	fdh
LEAF_NODE	97:22	97:22	6	fdh
LEAF_NODE	97:25	97:25	4	;
SIMPLE_DECL	98:1	98:41	3	const size_t bytes_total ; bytes_total = ( size_t ) size ;
VAR_DECL	98:1	98:14	4	const size_t bytes_total ; bytes_total = ( size_t ) size
TYPE	98:1	98:1	5	const size_t
TYPE_NAME	98:1	98:7	6	const size_t
LEAF_NODE	98:1	98:1	7	const
LEAF_NODE	98:7	98:7	7	size_t
NAME	98:14	98:14	5	bytes_total
LEAF_NODE	98:14	98:14	6	bytes_total
LEAF_NODE	0:0	0:0	5	;
INIT	98:14	98:14	5	bytes_total = ( size_t ) size
ASSIGN	98:14	98:28	6	bytes_total = ( size_t ) size
LVAL	98:14	98:14	7	bytes_total
NAME	98:14	98:14	8	bytes_total
LEAF_NODE	98:14	98:14	9	bytes_total
ASSIGN_OP	98:26	98:26	7	=
LEAF_NODE	98:26	98:26	8	=
RVAL	98:28	98:37	7	( size_t ) size
LEAF_NODE	98:28	98:28	8	(
TYPE_NAME	98:29	98:29	8	size_t
LEAF_NODE	98:29	98:29	9	size_t
LEAF_NODE	98:35	98:35	8	)
FIELD	98:37	98:37	8	size
LEAF_NODE	98:37	98:37	9	size
LEAF_NODE	98:41	98:41	4	;
SIMPLE_DECL	99:8	99:28	3	size_t bytes_written ;
VAR_DECL	99:8	99:15	4	size_t bytes_written
TYPE	99:8	99:8	5	size_t
TYPE_NAME	99:8	99:8	6	size_t
LEAF_NODE	99:8	99:8	7	size_t
NAME	99:15	99:15	5	bytes_written
LEAF_NODE	99:15	99:15	6	bytes_written
LEAF_NODE	99:28	99:28	4	;
SIMPLE_DECL	100:8	100:27	3	tmsize_t count ; count = - 1 ;
VAR_DECL	100:8	100:17	4	tmsize_t count ; count = - 1
TYPE	100:8	100:8	5	tmsize_t
TYPE_NAME	100:8	100:8	6	tmsize_t
LEAF_NODE	100:8	100:8	7	tmsize_t
NAME	100:17	100:17	5	count
LEAF_NODE	100:17	100:17	6	count
LEAF_NODE	0:0	0:0	5	;
INIT	100:17	100:17	5	count = - 1
ASSIGN	100:17	100:25	6	count = - 1
LVAL	100:17	100:17	7	count
NAME	100:17	100:17	8	count
LEAF_NODE	100:17	100:17	9	count
ASSIGN_OP	100:23	100:23	7	=
LEAF_NODE	100:23	100:23	8	=
RVAL	100:25	100:25	7	- 1
UNARY_EXPR	100:25	100:26	8	- 1
UNARY_OPERATOR	100:25	100:25	9	-
LEAF_NODE	100:25	100:25	10	-
FIELD	100:26	100:26	9	1
LEAF_NODE	100:26	100:26	10	1
LEAF_NODE	100:27	100:27	4	;
SELECTION	101:1	102:1	3	
KEYWORD	101:1	101:1	4	if
LEAF_NODE	101:1	101:1	5	if
LEAF_NODE	101:4	101:4	4	(
CONDITION	101:5	101:5	4	( tmsize_t ) bytes_total != size
EXPR	101:5	101:31	5	( tmsize_t ) bytes_total != size
LEAF_NODE	101:5	101:5	6	(
TYPE_NAME	101:6	101:6	6	tmsize_t
LEAF_NODE	101:6	101:6	7	tmsize_t
LEAF_NODE	101:14	101:14	6	)
FIELD	101:16	101:16	6	bytes_total
LEAF_NODE	101:16	101:16	7	bytes_total
EQ_OPERATOR	101:28	101:28	6	!=
LEAF_NODE	101:28	101:28	7	!=
FIELD	101:31	101:31	6	size
LEAF_NODE	101:31	101:31	7	size
LEAF_NODE	101:35	101:35	4	)
STATEMENTS	102:1	105:1	4	
LEAF_NODE	102:1	102:1	5	{
STATEMENTS	103:2	104:2	5	
EXPR_STATEMENT	103:2	103:14	6	errno = EINVAL ;
EXPR	103:2	103:2	7	errno = EINVAL
ASSIGN	103:2	103:8	8	errno = EINVAL
LVAL	103:2	103:2	9	errno
FIELD	103:2	103:2	10	errno
LEAF_NODE	103:2	103:2	11	errno
ASSIGN_OP	103:7	103:7	9	=
LEAF_NODE	103:7	103:7	10	=
RVAL	103:8	103:8	9	EINVAL
FIELD	103:8	103:8	10	EINVAL
LEAF_NODE	103:8	103:8	11	EINVAL
LEAF_NODE	103:14	103:14	7	;
JUMP_STATEMENT	104:2	104:22	6	return ( tmsize_t ) - 1 ;
KEYWORD	104:2	104:2	7	return
LEAF_NODE	104:2	104:2	8	return
DESTINATION	104:9	104:9	7	( tmsize_t ) - 1
EXPR	104:9	104:20	8	( tmsize_t ) - 1
LEAF_NODE	104:9	104:9	9	(
TYPE_NAME	104:10	104:10	9	tmsize_t
LEAF_NODE	104:10	104:10	10	tmsize_t
LEAF_NODE	104:18	104:18	9	)
UNARY_EXPR	104:20	104:21	9	- 1
UNARY_OPERATOR	104:20	104:20	10	-
LEAF_NODE	104:20	104:20	11	-
FIELD	104:21	104:21	10	1
LEAF_NODE	104:21	104:21	11	1
LEAF_NODE	104:22	104:22	7	;
LEAF_NODE	105:1	105:1	5	}
EXPR_STATEMENT	106:1	106:11	3	fdh . h = fd ;
EXPR	106:1	106:1	4	fdh . h = fd
ASSIGN	106:1	106:9	5	fdh . h = fd
LVAL	106:1	106:1	6	fdh . h
FIELD	106:1	106:5	7	fdh . h
LEAF_NODE	106:1	106:1	8	fdh
LEAF_NODE	106:4	106:4	8	.
LEAF_NODE	106:5	106:5	8	h
ASSIGN_OP	106:7	106:7	6	=
LEAF_NODE	106:7	106:7	7	=
RVAL	106:9	106:9	6	fd
FIELD	106:9	106:9	7	fd
LEAF_NODE	106:9	106:9	8	fd
LEAF_NODE	106:11	106:11	4	;
ITERATION	107:8	108:8	3	
KEYWORD	107:8	107:8	4	for
LEAF_NODE	107:8	107:8	5	for
LEAF_NODE	107:12	107:12	4	(
FOR_INIT	107:13	107:28	4	bytes_written = 0 ;
EXPR	107:13	107:13	5	bytes_written = 0
ASSIGN	107:13	107:27	6	bytes_written = 0
LVAL	107:13	107:13	7	bytes_written
FIELD	107:13	107:13	8	bytes_written
LEAF_NODE	107:13	107:13	9	bytes_written
ASSIGN_OP	107:26	107:26	7	=
LEAF_NODE	107:26	107:26	8	=
RVAL	107:27	107:27	7	0
FIELD	107:27	107:27	8	0
LEAF_NODE	107:27	107:27	9	0
LEAF_NODE	107:28	107:28	5	;
CONDITION	107:30	107:30	4	bytes_written < bytes_total
EXPR	107:30	107:46	5	bytes_written < bytes_total
FIELD	107:30	107:30	6	bytes_written
LEAF_NODE	107:30	107:30	7	bytes_written
REL_OPERATOR	107:44	107:44	6	<
LEAF_NODE	107:44	107:44	7	<
FIELD	107:46	107:46	6	bytes_total
LEAF_NODE	107:46	107:46	7	bytes_total
LEAF_NODE	107:57	107:57	4	;
FOR_EXPR	107:59	107:59	4	bytes_written += count
EXPR	107:59	107:59	5	bytes_written += count
ASSIGN	107:59	107:74	6	bytes_written += count
LVAL	107:59	107:59	7	bytes_written
FIELD	107:59	107:59	8	bytes_written
LEAF_NODE	107:59	107:59	9	bytes_written
ASSIGN_OP	107:72	107:72	7	+=
LEAF_NODE	107:72	107:72	8	+=
RVAL	107:74	107:74	7	count
FIELD	107:74	107:74	8	count
LEAF_NODE	107:74	107:74	9	count
LEAF_NODE	107:79	107:79	4	)
STATEMENTS	108:8	116:8	4	
LEAF_NODE	108:8	108:8	5	{
STATEMENTS	109:16	114:16	5	
SIMPLE_DECL	109:16	109:67	6	const char * buf_offset ; buf_offset = ( char * ) buf + bytes_written ;
VAR_DECL	109:16	109:28	7	const char * buf_offset ; buf_offset = ( char * ) buf + bytes_written
TYPE	109:16	109:27	8	const char *
TYPE_NAME	109:16	109:22	9	const char
LEAF_NODE	109:16	109:16	10	const
LEAF_NODE	109:22	109:22	10	char
POINTER	109:27	109:27	9	*
LEAF_NODE	109:27	109:27	10	*
NAME	109:28	109:28	8	buf_offset
LEAF_NODE	109:28	109:28	9	buf_offset
LEAF_NODE	0:0	0:0	8	;
INIT	109:28	109:28	8	buf_offset = ( char * ) buf + bytes_written
ASSIGN	109:28	109:41	9	buf_offset = ( char * ) buf + bytes_written
LVAL	109:28	109:28	10	buf_offset
NAME	109:28	109:28	11	buf_offset
LEAF_NODE	109:28	109:28	12	buf_offset
ASSIGN_OP	109:39	109:39	10	=
LEAF_NODE	109:39	109:39	11	=
RVAL	109:41	109:54	10	( char * ) buf + bytes_written
LEAF_NODE	109:41	109:41	11	(
TYPE_NAME	109:42	109:42	11	char
LEAF_NODE	109:42	109:42	12	char
LEAF_NODE	109:47	109:47	11	*
LEAF_NODE	109:48	109:48	11	)
FIELD	109:50	109:50	11	buf
LEAF_NODE	109:50	109:50	12	buf
LEAF_NODE	109:53	109:53	11	+
FIELD	109:54	109:54	11	bytes_written
LEAF_NODE	109:54	109:54	12	bytes_written
LEAF_NODE	109:67	109:67	7	;
SIMPLE_DECL	110:16	110:58	6	size_t io_size ; io_size = bytes_total - bytes_written ;
VAR_DECL	110:16	110:23	7	size_t io_size ; io_size = bytes_total - bytes_written
TYPE	110:16	110:16	8	size_t
TYPE_NAME	110:16	110:16	9	size_t
LEAF_NODE	110:16	110:16	10	size_t
NAME	110:23	110:23	8	io_size
LEAF_NODE	110:23	110:23	9	io_size
LEAF_NODE	0:0	0:0	8	;
INIT	110:23	110:23	8	io_size = bytes_total - bytes_written
ASSIGN	110:23	110:33	9	io_size = bytes_total - bytes_written
LVAL	110:23	110:23	10	io_size
NAME	110:23	110:23	11	io_size
LEAF_NODE	110:23	110:23	12	io_size
ASSIGN_OP	110:31	110:31	10	=
LEAF_NODE	110:31	110:31	11	=
RVAL	110:33	110:45	10	bytes_total - bytes_written
FIELD	110:33	110:33	11	bytes_total
LEAF_NODE	110:33	110:33	12	bytes_total
LEAF_NODE	110:44	110:44	11	-
FIELD	110:45	110:45	11	bytes_written
LEAF_NODE	110:45	110:45	12	bytes_written
LEAF_NODE	110:58	110:58	7	;
SELECTION	111:16	112:24	6	
KEYWORD	111:16	111:16	7	if
LEAF_NODE	111:16	111:16	8	if
LEAF_NODE	111:19	111:19	7	(
CONDITION	111:20	111:20	7	io_size > TIFF_IO_MAX
EXPR	111:20	111:30	8	io_size > TIFF_IO_MAX
FIELD	111:20	111:20	9	io_size
LEAF_NODE	111:20	111:20	10	io_size
REL_OPERATOR	111:28	111:28	9	>
LEAF_NODE	111:28	111:28	10	>
FIELD	111:30	111:30	9	TIFF_IO_MAX
LEAF_NODE	111:30	111:30	10	TIFF_IO_MAX
LEAF_NODE	111:41	111:41	7	)
STATEMENTS	112:24	112:24	7	
EXPR_STATEMENT	112:24	112:45	8	io_size = TIFF_IO_MAX ;
EXPR	112:24	112:24	9	io_size = TIFF_IO_MAX
ASSIGN	112:24	112:34	10	io_size = TIFF_IO_MAX
LVAL	112:24	112:24	11	io_size
FIELD	112:24	112:24	12	io_size
LEAF_NODE	112:24	112:24	13	io_size
ASSIGN_OP	112:32	112:32	11	=
LEAF_NODE	112:32	112:32	12	=
RVAL	112:34	112:34	11	TIFF_IO_MAX
FIELD	112:34	112:34	12	TIFF_IO_MAX
LEAF_NODE	112:34	112:34	13	TIFF_IO_MAX
LEAF_NODE	112:45	112:45	9	;
EXPR_STATEMENT	113:16	113:71	6	count = write ( fdh . fd , buf_offset , ( TIFFIOSize_t ) io_size ) ;
EXPR	113:16	113:16	7	count = write ( fdh . fd , buf_offset , ( TIFFIOSize_t ) io_size )
ASSIGN	113:16	113:22	8	count = write ( fdh . fd , buf_offset , ( TIFFIOSize_t ) io_size )
LVAL	113:16	113:16	9	count
FIELD	113:16	113:16	10	count
LEAF_NODE	113:16	113:16	11	count
ASSIGN_OP	113:21	113:21	9	=
LEAF_NODE	113:21	113:21	10	=
RVAL	113:22	113:22	9	write ( fdh . fd , buf_offset , ( TIFFIOSize_t ) io_size )
FUNCTION_CALL	113:22	113:70	10	write ( fdh . fd , buf_offset , ( TIFFIOSize_t ) io_size )
CALLEE	113:22	113:22	11	write
LEAF_NODE	113:22	113:22	12	write
LEAF_NODE	113:27	113:27	11	(
ARGUMENT	113:28	113:28	11	fdh . fd
FIELD	113:28	113:32	12	fdh . fd
LEAF_NODE	113:28	113:28	13	fdh
LEAF_NODE	113:31	113:31	13	.
LEAF_NODE	113:32	113:32	13	fd
LEAF_NODE	113:34	113:34	11	,
ARGUMENT	113:36	113:36	11	buf_offset
FIELD	113:36	113:36	12	buf_offset
LEAF_NODE	113:36	113:36	13	buf_offset
LEAF_NODE	113:46	113:46	11	,
ARGUMENT	113:48	113:63	11	( TIFFIOSize_t ) io_size
LEAF_NODE	113:48	113:48	12	(
TYPE_NAME	113:49	113:49	12	TIFFIOSize_t
LEAF_NODE	113:49	113:49	13	TIFFIOSize_t
LEAF_NODE	113:61	113:61	12	)
FIELD	113:63	113:63	12	io_size
LEAF_NODE	113:63	113:63	13	io_size
LEAF_NODE	113:70	113:70	11	)
LEAF_NODE	113:71	113:71	7	;
SELECTION	114:16	115:24	6	
KEYWORD	114:16	114:16	7	if
LEAF_NODE	114:16	114:16	8	if
LEAF_NODE	114:19	114:19	7	(
CONDITION	114:20	114:20	7	count <= 0
EXPR	114:20	114:29	8	count <= 0
FIELD	114:20	114:20	9	count
LEAF_NODE	114:20	114:20	10	count
REL_OPERATOR	114:26	114:26	9	<=
LEAF_NODE	114:26	114:26	10	<=
FIELD	114:29	114:29	9	0
LEAF_NODE	114:29	114:29	10	0
LEAF_NODE	114:30	114:30	7	)
STATEMENTS	115:24	115:24	7	
JUMP_STATEMENT	115:24	115:29	8	break DESTINATION ;
KEYWORD	115:24	115:24	9	break
LEAF_NODE	115:24	115:24	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	115:29	115:29	9	;
LEAF_NODE	116:8	116:8	5	}
SELECTION	117:8	118:16	3	
KEYWORD	117:8	117:8	4	if
LEAF_NODE	117:8	117:8	5	if
LEAF_NODE	117:11	117:11	4	(
CONDITION	117:12	117:12	4	count < 0
EXPR	117:12	117:20	5	count < 0
FIELD	117:12	117:12	6	count
LEAF_NODE	117:12	117:12	7	count
REL_OPERATOR	117:18	117:18	6	<
LEAF_NODE	117:18	117:18	7	<
FIELD	117:20	117:20	6	0
LEAF_NODE	117:20	117:20	7	0
LEAF_NODE	117:21	117:21	4	)
STATEMENTS	118:16	118:16	4	
JUMP_STATEMENT	118:16	118:35	5	return ( tmsize_t ) - 1 ;
KEYWORD	118:16	118:16	6	return
LEAF_NODE	118:16	118:16	7	return
DESTINATION	118:23	118:23	6	( tmsize_t ) - 1
EXPR	118:23	118:33	7	( tmsize_t ) - 1
LEAF_NODE	118:23	118:23	8	(
TYPE_NAME	118:24	118:24	8	tmsize_t
LEAF_NODE	118:24	118:24	9	tmsize_t
LEAF_NODE	118:32	118:32	8	)
UNARY_EXPR	118:33	118:34	8	- 1
UNARY_OPERATOR	118:33	118:33	9	-
LEAF_NODE	118:33	118:33	10	-
FIELD	118:34	118:34	9	1
LEAF_NODE	118:34	118:34	10	1
LEAF_NODE	118:35	118:35	6	;
JUMP_STATEMENT	119:8	119:39	3	return ( tmsize_t ) bytes_written ;
KEYWORD	119:8	119:8	4	return
LEAF_NODE	119:8	119:8	5	return
DESTINATION	119:15	119:15	4	( tmsize_t ) bytes_written
EXPR	119:15	119:26	5	( tmsize_t ) bytes_written
LEAF_NODE	119:15	119:15	6	(
TYPE_NAME	119:16	119:16	6	tmsize_t
LEAF_NODE	119:16	119:16	7	tmsize_t
LEAF_NODE	119:24	119:24	6	)
FIELD	119:26	119:26	6	bytes_written
LEAF_NODE	119:26	119:26	7	bytes_written
LEAF_NODE	119:39	119:39	4	;
LEAF_NODE	121:0	121:0	2	}
FUNCTION_DEF	123:0	135:0	1	
RETURN_TYPE	123:0	123:7	2	static uint64
LEAF_NODE	123:0	123:0	3	static
TYPE_NAME	123:7	123:7	3	uint64
LEAF_NODE	123:7	123:7	4	uint64
FUNCTION_NAME	124:0	124:0	2	_tiffSeekProc
LEAF_NODE	124:0	124:0	3	_tiffSeekProc
PARAMETER_LIST	124:13	124:50	2	( thandle_t fd , uint64 off , int whence )
LEAF_NODE	124:13	124:13	3	(
PARAMETER_DECL	124:14	124:24	3	thandle_t fd
TYPE	124:14	124:14	4	thandle_t
TYPE_NAME	124:14	124:14	5	thandle_t
LEAF_NODE	124:14	124:14	6	thandle_t
NAME	124:24	124:24	4	fd
LEAF_NODE	124:24	124:24	5	fd
LEAF_NODE	124:26	124:26	3	,
PARAMETER_DECL	124:28	124:35	3	uint64 off
TYPE	124:28	124:28	4	uint64
TYPE_NAME	124:28	124:28	5	uint64
LEAF_NODE	124:28	124:28	6	uint64
NAME	124:35	124:35	4	off
LEAF_NODE	124:35	124:35	5	off
LEAF_NODE	124:38	124:38	3	,
PARAMETER_DECL	124:40	124:44	3	int whence
TYPE	124:40	124:40	4	int
TYPE_NAME	124:40	124:40	5	int
LEAF_NODE	124:40	124:40	6	int
NAME	124:44	124:44	4	whence
LEAF_NODE	124:44	124:44	5	whence
LEAF_NODE	124:50	124:50	3	)
LEAF_NODE	125:0	125:0	2	{
STATEMENTS	126:1	134:1	2	
SIMPLE_DECL	126:1	126:25	3	fd_as_handle_union_t fdh ;
VAR_DECL	126:1	126:22	4	fd_as_handle_union_t fdh
TYPE	126:1	126:1	5	fd_as_handle_union_t
TYPE_NAME	126:1	126:1	6	fd_as_handle_union_t
LEAF_NODE	126:1	126:1	7	fd_as_handle_union_t
NAME	126:22	126:22	5	fdh
LEAF_NODE	126:22	126:22	6	fdh
LEAF_NODE	126:25	126:25	4	;
SIMPLE_DECL	127:1	127:39	3	_TIFF_off_t off_io ; off_io = ( _TIFF_off_t ) off ;
VAR_DECL	127:1	127:13	4	_TIFF_off_t off_io ; off_io = ( _TIFF_off_t ) off
TYPE	127:1	127:1	5	_TIFF_off_t
TYPE_NAME	127:1	127:1	6	_TIFF_off_t
LEAF_NODE	127:1	127:1	7	_TIFF_off_t
NAME	127:13	127:13	5	off_io
LEAF_NODE	127:13	127:13	6	off_io
LEAF_NODE	0:0	0:0	5	;
INIT	127:13	127:13	5	off_io = ( _TIFF_off_t ) off
ASSIGN	127:13	127:22	6	off_io = ( _TIFF_off_t ) off
LVAL	127:13	127:13	7	off_io
NAME	127:13	127:13	8	off_io
LEAF_NODE	127:13	127:13	9	off_io
ASSIGN_OP	127:20	127:20	7	=
LEAF_NODE	127:20	127:20	8	=
RVAL	127:22	127:36	7	( _TIFF_off_t ) off
LEAF_NODE	127:22	127:22	8	(
TYPE_NAME	127:23	127:23	8	_TIFF_off_t
LEAF_NODE	127:23	127:23	9	_TIFF_off_t
LEAF_NODE	127:34	127:34	8	)
FIELD	127:36	127:36	8	off
LEAF_NODE	127:36	127:36	9	off
LEAF_NODE	127:39	127:39	4	;
SELECTION	128:1	129:1	3	
KEYWORD	128:1	128:1	4	if
LEAF_NODE	128:1	128:1	5	if
LEAF_NODE	128:4	128:4	4	(
CONDITION	128:5	128:5	4	( uint64 ) off_io != off
EXPR	128:5	128:24	5	( uint64 ) off_io != off
LEAF_NODE	128:5	128:5	6	(
TYPE_NAME	128:6	128:6	6	uint64
LEAF_NODE	128:6	128:6	7	uint64
LEAF_NODE	128:12	128:12	6	)
FIELD	128:14	128:14	6	off_io
LEAF_NODE	128:14	128:14	7	off_io
EQ_OPERATOR	128:21	128:21	6	!=
LEAF_NODE	128:21	128:21	7	!=
FIELD	128:24	128:24	6	off
LEAF_NODE	128:24	128:24	7	off
LEAF_NODE	128:27	128:27	4	)
STATEMENTS	129:1	132:1	4	
LEAF_NODE	129:1	129:1	5	{
STATEMENTS	130:2	131:2	5	
EXPR_STATEMENT	130:2	130:14	6	errno = EINVAL ;
EXPR	130:2	130:2	7	errno = EINVAL
ASSIGN	130:2	130:8	8	errno = EINVAL
LVAL	130:2	130:2	9	errno
FIELD	130:2	130:2	10	errno
LEAF_NODE	130:2	130:2	11	errno
ASSIGN_OP	130:7	130:7	9	=
LEAF_NODE	130:7	130:7	10	=
RVAL	130:8	130:8	9	EINVAL
FIELD	130:8	130:8	10	EINVAL
LEAF_NODE	130:8	130:8	11	EINVAL
LEAF_NODE	130:14	130:14	7	;
JUMP_STATEMENT	131:2	131:20	6	return ( uint64 ) - 1 ;
KEYWORD	131:2	131:2	7	return
LEAF_NODE	131:2	131:2	8	return
DESTINATION	131:9	131:9	7	( uint64 ) - 1
EXPR	131:9	131:18	8	( uint64 ) - 1
LEAF_NODE	131:9	131:9	9	(
TYPE_NAME	131:10	131:10	9	uint64
LEAF_NODE	131:10	131:10	10	uint64
LEAF_NODE	131:16	131:16	9	)
UNARY_EXPR	131:18	131:19	9	- 1
UNARY_OPERATOR	131:18	131:18	10	-
LEAF_NODE	131:18	131:18	11	-
FIELD	131:19	131:19	10	1
LEAF_NODE	131:19	131:19	11	1
LEAF_NODE	131:20	131:20	7	;
LEAF_NODE	132:1	132:1	5	}
EXPR_STATEMENT	133:1	133:11	3	fdh . h = fd ;
EXPR	133:1	133:1	4	fdh . h = fd
ASSIGN	133:1	133:9	5	fdh . h = fd
LVAL	133:1	133:1	6	fdh . h
FIELD	133:1	133:5	7	fdh . h
LEAF_NODE	133:1	133:1	8	fdh
LEAF_NODE	133:4	133:4	8	.
LEAF_NODE	133:5	133:5	8	h
ASSIGN_OP	133:7	133:7	6	=
LEAF_NODE	133:7	133:7	7	=
RVAL	133:9	133:9	6	fd
FIELD	133:9	133:9	7	fd
LEAF_NODE	133:9	133:9	8	fd
LEAF_NODE	133:11	133:11	4	;
JUMP_STATEMENT	134:1	134:52	3	return ( ( uint64 ) _TIFF_lseek_f ( fdh . fd , off_io , whence ) ) ;
KEYWORD	134:1	134:1	4	return
LEAF_NODE	134:1	134:1	5	return
DESTINATION	134:7	134:7	4	( ( uint64 ) _TIFF_lseek_f ( fdh . fd , off_io , whence ) )
EXPR	134:7	134:51	5	( ( uint64 ) _TIFF_lseek_f ( fdh . fd , off_io , whence ) )
LEAF_NODE	134:7	134:7	6	(
LEAF_NODE	134:8	134:8	6	(
TYPE_NAME	134:9	134:9	6	uint64
LEAF_NODE	134:9	134:9	7	uint64
LEAF_NODE	134:15	134:15	6	)
FUNCTION_CALL	134:16	134:50	6	_TIFF_lseek_f ( fdh . fd , off_io , whence )
CALLEE	134:16	134:16	7	_TIFF_lseek_f
LEAF_NODE	134:16	134:16	8	_TIFF_lseek_f
LEAF_NODE	134:29	134:29	7	(
ARGUMENT	134:30	134:30	7	fdh . fd
FIELD	134:30	134:34	8	fdh . fd
LEAF_NODE	134:30	134:30	9	fdh
LEAF_NODE	134:33	134:33	9	.
LEAF_NODE	134:34	134:34	9	fd
LEAF_NODE	134:36	134:36	7	,
ARGUMENT	134:37	134:37	7	off_io
FIELD	134:37	134:37	8	off_io
LEAF_NODE	134:37	134:37	9	off_io
LEAF_NODE	134:43	134:43	7	,
ARGUMENT	134:44	134:44	7	whence
FIELD	134:44	134:44	8	whence
LEAF_NODE	134:44	134:44	9	whence
LEAF_NODE	134:50	134:50	7	)
LEAF_NODE	134:51	134:51	6	)
LEAF_NODE	134:52	134:52	4	;
LEAF_NODE	135:0	135:0	2	}
FUNCTION_DEF	137:0	143:0	1	
RETURN_TYPE	137:0	137:7	2	static int
LEAF_NODE	137:0	137:0	3	static
TYPE_NAME	137:7	137:7	3	int
LEAF_NODE	137:7	137:7	4	int
FUNCTION_NAME	138:0	138:0	2	_tiffCloseProc
LEAF_NODE	138:0	138:0	3	_tiffCloseProc
PARAMETER_LIST	138:14	138:27	2	( thandle_t fd )
LEAF_NODE	138:14	138:14	3	(
PARAMETER_DECL	138:15	138:25	3	thandle_t fd
TYPE	138:15	138:15	4	thandle_t
TYPE_NAME	138:15	138:15	5	thandle_t
LEAF_NODE	138:15	138:15	6	thandle_t
NAME	138:25	138:25	4	fd
LEAF_NODE	138:25	138:25	5	fd
LEAF_NODE	138:27	138:27	3	)
LEAF_NODE	139:0	139:0	2	{
STATEMENTS	140:1	142:1	2	
SIMPLE_DECL	140:1	140:25	3	fd_as_handle_union_t fdh ;
VAR_DECL	140:1	140:22	4	fd_as_handle_union_t fdh
TYPE	140:1	140:1	5	fd_as_handle_union_t
TYPE_NAME	140:1	140:1	6	fd_as_handle_union_t
LEAF_NODE	140:1	140:1	7	fd_as_handle_union_t
NAME	140:22	140:22	5	fdh
LEAF_NODE	140:22	140:22	6	fdh
LEAF_NODE	140:25	140:25	4	;
EXPR_STATEMENT	141:1	141:11	3	fdh . h = fd ;
EXPR	141:1	141:1	4	fdh . h = fd
ASSIGN	141:1	141:9	5	fdh . h = fd
LVAL	141:1	141:1	6	fdh . h
FIELD	141:1	141:5	7	fdh . h
LEAF_NODE	141:1	141:1	8	fdh
LEAF_NODE	141:4	141:4	8	.
LEAF_NODE	141:5	141:5	8	h
ASSIGN_OP	141:7	141:7	6	=
LEAF_NODE	141:7	141:7	7	=
RVAL	141:9	141:9	6	fd
FIELD	141:9	141:9	7	fd
LEAF_NODE	141:9	141:9	8	fd
LEAF_NODE	141:11	141:11	4	;
JUMP_STATEMENT	142:1	142:22	3	return ( close ( fdh . fd ) ) ;
KEYWORD	142:1	142:1	4	return
LEAF_NODE	142:1	142:1	5	return
DESTINATION	142:7	142:7	4	( close ( fdh . fd ) )
EXPR	142:7	142:21	5	( close ( fdh . fd ) )
LEAF_NODE	142:7	142:7	6	(
FUNCTION_CALL	142:8	142:20	6	close ( fdh . fd )
CALLEE	142:8	142:8	7	close
LEAF_NODE	142:8	142:8	8	close
LEAF_NODE	142:13	142:13	7	(
ARGUMENT	142:14	142:14	7	fdh . fd
FIELD	142:14	142:18	8	fdh . fd
LEAF_NODE	142:14	142:14	9	fdh
LEAF_NODE	142:17	142:17	9	.
LEAF_NODE	142:18	142:18	9	fd
LEAF_NODE	142:20	142:20	7	)
LEAF_NODE	142:21	142:21	6	)
LEAF_NODE	142:22	142:22	4	;
LEAF_NODE	143:0	143:0	2	}
FUNCTION_DEF	145:0	155:0	1	
RETURN_TYPE	145:0	145:7	2	static uint64
LEAF_NODE	145:0	145:0	3	static
TYPE_NAME	145:7	145:7	3	uint64
LEAF_NODE	145:7	145:7	4	uint64
FUNCTION_NAME	146:0	146:0	2	_tiffSizeProc
LEAF_NODE	146:0	146:0	3	_tiffSizeProc
PARAMETER_LIST	146:13	146:26	2	( thandle_t fd )
LEAF_NODE	146:13	146:13	3	(
PARAMETER_DECL	146:14	146:24	3	thandle_t fd
TYPE	146:14	146:14	4	thandle_t
TYPE_NAME	146:14	146:14	5	thandle_t
LEAF_NODE	146:14	146:14	6	thandle_t
NAME	146:24	146:24	4	fd
LEAF_NODE	146:24	146:24	5	fd
LEAF_NODE	146:26	146:26	3	)
LEAF_NODE	147:0	147:0	2	{
STATEMENTS	148:1	153:1	2	
SIMPLE_DECL	148:1	148:16	3	_TIFF_stat_s sb ;
VAR_DECL	148:1	148:14	4	_TIFF_stat_s sb
TYPE	148:1	148:1	5	_TIFF_stat_s
TYPE_NAME	148:1	148:1	6	_TIFF_stat_s
LEAF_NODE	148:1	148:1	7	_TIFF_stat_s
NAME	148:14	148:14	5	sb
LEAF_NODE	148:14	148:14	6	sb
LEAF_NODE	148:16	148:16	4	;
SIMPLE_DECL	149:1	149:25	3	fd_as_handle_union_t fdh ;
VAR_DECL	149:1	149:22	4	fd_as_handle_union_t fdh
TYPE	149:1	149:1	5	fd_as_handle_union_t
TYPE_NAME	149:1	149:1	6	fd_as_handle_union_t
LEAF_NODE	149:1	149:1	7	fd_as_handle_union_t
NAME	149:22	149:22	5	fdh
LEAF_NODE	149:22	149:22	6	fdh
LEAF_NODE	149:25	149:25	4	;
EXPR_STATEMENT	150:1	150:11	3	fdh . h = fd ;
EXPR	150:1	150:1	4	fdh . h = fd
ASSIGN	150:1	150:9	5	fdh . h = fd
LVAL	150:1	150:1	6	fdh . h
FIELD	150:1	150:5	7	fdh . h
LEAF_NODE	150:1	150:1	8	fdh
LEAF_NODE	150:4	150:4	8	.
LEAF_NODE	150:5	150:5	8	h
ASSIGN_OP	150:7	150:7	6	=
LEAF_NODE	150:7	150:7	7	=
RVAL	150:9	150:9	6	fd
FIELD	150:9	150:9	7	fd
LEAF_NODE	150:9	150:9	8	fd
LEAF_NODE	150:11	150:11	4	;
SELECTION	151:1	152:2	3	
KEYWORD	151:1	151:1	4	if
LEAF_NODE	151:1	151:1	5	if
LEAF_NODE	151:4	151:4	4	(
CONDITION	151:5	151:5	4	_TIFF_fstat_f ( fdh . fd , & sb ) < 0
EXPR	151:5	151:31	5	_TIFF_fstat_f ( fdh . fd , & sb ) < 0
FUNCTION_CALL	151:5	151:29	6	_TIFF_fstat_f ( fdh . fd , & sb )
CALLEE	151:5	151:5	7	_TIFF_fstat_f
LEAF_NODE	151:5	151:5	8	_TIFF_fstat_f
LEAF_NODE	151:18	151:18	7	(
ARGUMENT	151:19	151:19	7	fdh . fd
FIELD	151:19	151:23	8	fdh . fd
LEAF_NODE	151:19	151:19	9	fdh
LEAF_NODE	151:22	151:22	9	.
LEAF_NODE	151:23	151:23	9	fd
LEAF_NODE	151:25	151:25	7	,
ARGUMENT	151:26	151:26	7	& sb
UNARY_EXPR	151:26	151:27	8	& sb
UNARY_OPERATOR	151:26	151:26	9	&
LEAF_NODE	151:26	151:26	10	&
FIELD	151:27	151:27	9	sb
LEAF_NODE	151:27	151:27	10	sb
LEAF_NODE	151:29	151:29	7	)
REL_OPERATOR	151:30	151:30	6	<
LEAF_NODE	151:30	151:30	7	<
FIELD	151:31	151:31	6	0
LEAF_NODE	151:31	151:31	7	0
LEAF_NODE	151:32	151:32	4	)
STATEMENTS	152:2	152:2	4	
JUMP_STATEMENT	152:2	152:11	5	return ( 0 ) ;
KEYWORD	152:2	152:2	6	return
LEAF_NODE	152:2	152:2	7	return
DESTINATION	152:8	152:8	6	( 0 )
EXPR	152:8	152:10	7	( 0 )
LEAF_NODE	152:8	152:8	8	(
FIELD	152:9	152:9	8	0
LEAF_NODE	152:9	152:9	9	0
LEAF_NODE	152:10	152:10	8	)
LEAF_NODE	152:11	152:11	6	;
SELECTION	153:1	154:2	3	
KEYWORD	153:1	153:1	4	else
LEAF_NODE	153:1	153:1	5	else
STATEMENTS	154:2	154:2	4	
JUMP_STATEMENT	154:2	154:28	5	return ( ( uint64 ) sb . st_size ) ;
KEYWORD	154:2	154:2	6	return
LEAF_NODE	154:2	154:2	7	return
DESTINATION	154:8	154:8	6	( ( uint64 ) sb . st_size )
EXPR	154:8	154:27	7	( ( uint64 ) sb . st_size )
LEAF_NODE	154:8	154:8	8	(
LEAF_NODE	154:9	154:9	8	(
TYPE_NAME	154:10	154:10	8	uint64
LEAF_NODE	154:10	154:10	9	uint64
LEAF_NODE	154:16	154:16	8	)
FIELD	154:17	154:20	8	sb . st_size
LEAF_NODE	154:17	154:17	9	sb
LEAF_NODE	154:19	154:19	9	.
LEAF_NODE	154:20	154:20	9	st_size
LEAF_NODE	154:27	154:27	8	)
LEAF_NODE	154:28	154:28	6	;
LEAF_NODE	155:0	155:0	2	}
FUNCTION_DEF	160:0	176:0	1	
RETURN_TYPE	160:0	160:7	2	static int
LEAF_NODE	160:0	160:0	3	static
TYPE_NAME	160:7	160:7	3	int
LEAF_NODE	160:7	160:7	4	int
FUNCTION_NAME	161:0	161:0	2	_tiffMapProc
LEAF_NODE	161:0	161:0	3	_tiffMapProc
PARAMETER_LIST	161:12	161:54	2	( thandle_t fd , void * * pbase , toff_t * psize )
LEAF_NODE	161:12	161:12	3	(
PARAMETER_DECL	161:13	161:23	3	thandle_t fd
TYPE	161:13	161:13	4	thandle_t
TYPE_NAME	161:13	161:13	5	thandle_t
LEAF_NODE	161:13	161:13	6	thandle_t
NAME	161:23	161:23	4	fd
LEAF_NODE	161:23	161:23	5	fd
LEAF_NODE	161:25	161:25	3	,
PARAMETER_DECL	161:27	161:34	3	void * * pbase
TYPE	161:27	161:31	4	void * *
TYPE_NAME	161:27	161:27	5	void
LEAF_NODE	161:27	161:27	6	void
POINTER	161:31	161:32	5	* *
LEAF_NODE	161:31	161:31	6	*
LEAF_NODE	161:32	161:32	6	*
NAME	161:34	161:34	4	pbase
LEAF_NODE	161:34	161:34	5	pbase
LEAF_NODE	161:39	161:39	3	,
PARAMETER_DECL	161:41	161:49	3	toff_t * psize
TYPE	161:41	161:47	4	toff_t *
TYPE_NAME	161:41	161:41	5	toff_t
LEAF_NODE	161:41	161:41	6	toff_t
POINTER	161:47	161:47	5	*
LEAF_NODE	161:47	161:47	6	*
NAME	161:49	161:49	4	psize
LEAF_NODE	161:49	161:49	5	psize
LEAF_NODE	161:54	161:54	3	)
LEAF_NODE	162:0	162:0	2	{
STATEMENTS	163:1	175:1	2	
SIMPLE_DECL	163:1	163:34	3	uint64 size64 ; size64 = _tiffSizeProc ( fd ) ;
VAR_DECL	163:1	163:8	4	uint64 size64 ; size64 = _tiffSizeProc ( fd )
TYPE	163:1	163:1	5	uint64
TYPE_NAME	163:1	163:1	6	uint64
LEAF_NODE	163:1	163:1	7	uint64
NAME	163:8	163:8	5	size64
LEAF_NODE	163:8	163:8	6	size64
LEAF_NODE	0:0	0:0	5	;
INIT	163:8	163:8	5	size64 = _tiffSizeProc ( fd )
ASSIGN	163:8	163:17	6	size64 = _tiffSizeProc ( fd )
LVAL	163:8	163:8	7	size64
NAME	163:8	163:8	8	size64
LEAF_NODE	163:8	163:8	9	size64
ASSIGN_OP	163:15	163:15	7	=
LEAF_NODE	163:15	163:15	8	=
RVAL	163:17	163:17	7	_tiffSizeProc ( fd )
FUNCTION_CALL	163:17	163:33	8	_tiffSizeProc ( fd )
CALLEE	163:17	163:17	9	_tiffSizeProc
LEAF_NODE	163:17	163:17	10	_tiffSizeProc
LEAF_NODE	163:30	163:30	9	(
ARGUMENT	163:31	163:31	9	fd
FIELD	163:31	163:31	10	fd
LEAF_NODE	163:31	163:31	11	fd
LEAF_NODE	163:33	163:33	9	)
LEAF_NODE	163:34	163:34	4	;
SIMPLE_DECL	164:1	164:34	3	tmsize_t sizem ; sizem = ( tmsize_t ) size64 ;
VAR_DECL	164:1	164:10	4	tmsize_t sizem ; sizem = ( tmsize_t ) size64
TYPE	164:1	164:1	5	tmsize_t
TYPE_NAME	164:1	164:1	6	tmsize_t
LEAF_NODE	164:1	164:1	7	tmsize_t
NAME	164:10	164:10	5	sizem
LEAF_NODE	164:10	164:10	6	sizem
LEAF_NODE	0:0	0:0	5	;
INIT	164:10	164:10	5	sizem = ( tmsize_t ) size64
ASSIGN	164:10	164:18	6	sizem = ( tmsize_t ) size64
LVAL	164:10	164:10	7	sizem
NAME	164:10	164:10	8	sizem
LEAF_NODE	164:10	164:10	9	sizem
ASSIGN_OP	164:16	164:16	7	=
LEAF_NODE	164:16	164:16	8	=
RVAL	164:18	164:28	7	( tmsize_t ) size64
LEAF_NODE	164:18	164:18	8	(
TYPE_NAME	164:19	164:19	8	tmsize_t
LEAF_NODE	164:19	164:19	9	tmsize_t
LEAF_NODE	164:27	164:27	8	)
FIELD	164:28	164:28	8	size64
LEAF_NODE	164:28	164:28	9	size64
LEAF_NODE	164:34	164:34	4	;
SELECTION	165:1	165:28	3	
KEYWORD	165:1	165:1	4	if
LEAF_NODE	165:1	165:1	5	if
LEAF_NODE	165:4	165:4	4	(
CONDITION	165:5	165:5	4	( uint64 ) sizem == size64
EXPR	165:5	165:20	5	( uint64 ) sizem == size64
LEAF_NODE	165:5	165:5	6	(
TYPE_NAME	165:6	165:6	6	uint64
LEAF_NODE	165:6	165:6	7	uint64
LEAF_NODE	165:12	165:12	6	)
FIELD	165:13	165:13	6	sizem
LEAF_NODE	165:13	165:13	7	sizem
EQ_OPERATOR	165:18	165:18	6	==
LEAF_NODE	165:18	165:18	7	==
FIELD	165:20	165:20	6	size64
LEAF_NODE	165:20	165:20	7	size64
LEAF_NODE	165:26	165:26	4	)
STATEMENTS	165:28	174:1	4	
LEAF_NODE	165:28	165:28	5	{
STATEMENTS	166:2	170:2	5	
SIMPLE_DECL	166:2	166:26	6	fd_as_handle_union_t fdh ;
VAR_DECL	166:2	166:23	7	fd_as_handle_union_t fdh
TYPE	166:2	166:2	8	fd_as_handle_union_t
TYPE_NAME	166:2	166:2	9	fd_as_handle_union_t
LEAF_NODE	166:2	166:2	10	fd_as_handle_union_t
NAME	166:23	166:23	8	fdh
LEAF_NODE	166:23	166:23	9	fdh
LEAF_NODE	166:26	166:26	7	;
EXPR_STATEMENT	167:2	167:12	6	fdh . h = fd ;
EXPR	167:2	167:2	7	fdh . h = fd
ASSIGN	167:2	167:10	8	fdh . h = fd
LVAL	167:2	167:2	9	fdh . h
FIELD	167:2	167:6	10	fdh . h
LEAF_NODE	167:2	167:2	11	fdh
LEAF_NODE	167:5	167:5	11	.
LEAF_NODE	167:6	167:6	11	h
ASSIGN_OP	167:8	167:8	9	=
LEAF_NODE	167:8	167:8	10	=
RVAL	167:10	167:10	9	fd
FIELD	167:10	167:10	10	fd
LEAF_NODE	167:10	167:10	11	fd
LEAF_NODE	167:12	167:12	7	;
EXPR_STATEMENT	168:2	169:62	6	* pbase = ( void * ) mmap ( 0 , ( size_t ) sizem , PROT_READ , MAP_SHARED , fdh . fd , 0 ) ;
EXPR	168:2	168:2	7	* pbase = ( void * ) mmap ( 0 , ( size_t ) sizem , PROT_READ , MAP_SHARED , fdh . fd , 0 )
ASSIGN	168:2	168:11	8	* pbase = ( void * ) mmap ( 0 , ( size_t ) sizem , PROT_READ , MAP_SHARED , fdh . fd , 0 )
LVAL	168:2	168:2	9	* pbase
UNARY_EXPR	168:2	168:3	10	* pbase
UNARY_OPERATOR	168:2	168:2	11	*
LEAF_NODE	168:2	168:2	12	*
FIELD	168:3	168:3	11	pbase
LEAF_NODE	168:3	168:3	12	pbase
ASSIGN_OP	168:9	168:9	9	=
LEAF_NODE	168:9	168:9	10	=
RVAL	168:11	169:6	9	( void * ) mmap ( 0 , ( size_t ) sizem , PROT_READ , MAP_SHARED , fdh . fd , 0 )
LEAF_NODE	168:11	168:11	10	(
TYPE_NAME	168:12	168:12	10	void
LEAF_NODE	168:12	168:12	11	void
LEAF_NODE	168:16	168:16	10	*
LEAF_NODE	168:17	168:17	10	)
FUNCTION_CALL	169:6	169:61	10	mmap ( 0 , ( size_t ) sizem , PROT_READ , MAP_SHARED , fdh . fd , 0 )
CALLEE	169:6	169:6	11	mmap
LEAF_NODE	169:6	169:6	12	mmap
LEAF_NODE	169:10	169:10	11	(
ARGUMENT	169:11	169:11	11	0
FIELD	169:11	169:11	12	0
LEAF_NODE	169:11	169:11	13	0
LEAF_NODE	169:12	169:12	11	,
ARGUMENT	169:14	169:22	11	( size_t ) sizem
LEAF_NODE	169:14	169:14	12	(
TYPE_NAME	169:15	169:15	12	size_t
LEAF_NODE	169:15	169:15	13	size_t
LEAF_NODE	169:21	169:21	12	)
FIELD	169:22	169:22	12	sizem
LEAF_NODE	169:22	169:22	13	sizem
LEAF_NODE	169:27	169:27	11	,
ARGUMENT	169:29	169:29	11	PROT_READ
FIELD	169:29	169:29	12	PROT_READ
LEAF_NODE	169:29	169:29	13	PROT_READ
LEAF_NODE	169:38	169:38	11	,
ARGUMENT	169:40	169:40	11	MAP_SHARED
FIELD	169:40	169:40	12	MAP_SHARED
LEAF_NODE	169:40	169:40	13	MAP_SHARED
LEAF_NODE	169:50	169:50	11	,
ARGUMENT	169:52	169:52	11	fdh . fd
FIELD	169:52	169:56	12	fdh . fd
LEAF_NODE	169:52	169:52	13	fdh
LEAF_NODE	169:55	169:55	13	.
LEAF_NODE	169:56	169:56	13	fd
LEAF_NODE	169:58	169:58	11	,
ARGUMENT	169:60	169:60	11	0
FIELD	169:60	169:60	12	0
LEAF_NODE	169:60	169:60	13	0
LEAF_NODE	169:61	169:61	11	)
LEAF_NODE	169:62	169:62	7	;
SELECTION	170:2	170:28	6	
KEYWORD	170:2	170:2	7	if
LEAF_NODE	170:2	170:2	8	if
LEAF_NODE	170:5	170:5	7	(
CONDITION	170:6	170:6	7	* pbase != ( void * ) - 1
EXPR	170:6	170:24	8	* pbase != ( void * ) - 1
UNARY_EXPR	170:6	170:7	9	* pbase
UNARY_OPERATOR	170:6	170:6	10	*
LEAF_NODE	170:6	170:6	11	*
FIELD	170:7	170:7	10	pbase
LEAF_NODE	170:7	170:7	11	pbase
EQ_OPERATOR	170:13	170:13	9	!=
LEAF_NODE	170:13	170:13	10	!=
LEAF_NODE	170:16	170:16	9	(
TYPE_NAME	170:17	170:17	9	void
LEAF_NODE	170:17	170:17	10	void
LEAF_NODE	170:21	170:21	9	*
LEAF_NODE	170:22	170:22	9	)
UNARY_EXPR	170:24	170:25	9	- 1
UNARY_OPERATOR	170:24	170:24	10	-
LEAF_NODE	170:24	170:24	11	-
FIELD	170:25	170:25	10	1
LEAF_NODE	170:25	170:25	11	1
LEAF_NODE	170:26	170:26	7	)
STATEMENTS	170:28	173:2	7	
LEAF_NODE	170:28	170:28	8	{
STATEMENTS	171:3	172:3	8	
EXPR_STATEMENT	171:3	171:27	9	* psize = ( tmsize_t ) sizem ;
EXPR	171:3	171:3	10	* psize = ( tmsize_t ) sizem
ASSIGN	171:3	171:12	11	* psize = ( tmsize_t ) sizem
LVAL	171:3	171:3	12	* psize
UNARY_EXPR	171:3	171:4	13	* psize
UNARY_OPERATOR	171:3	171:3	14	*
LEAF_NODE	171:3	171:3	15	*
FIELD	171:4	171:4	14	psize
LEAF_NODE	171:4	171:4	15	psize
ASSIGN_OP	171:10	171:10	12	=
LEAF_NODE	171:10	171:10	13	=
RVAL	171:12	171:22	12	( tmsize_t ) sizem
LEAF_NODE	171:12	171:12	13	(
TYPE_NAME	171:13	171:13	13	tmsize_t
LEAF_NODE	171:13	171:13	14	tmsize_t
LEAF_NODE	171:21	171:21	13	)
FIELD	171:22	171:22	13	sizem
LEAF_NODE	171:22	171:22	14	sizem
LEAF_NODE	171:27	171:27	10	;
JUMP_STATEMENT	172:3	172:13	9	return ( 1 ) ;
KEYWORD	172:3	172:3	10	return
LEAF_NODE	172:3	172:3	11	return
DESTINATION	172:10	172:10	10	( 1 )
EXPR	172:10	172:12	11	( 1 )
LEAF_NODE	172:10	172:10	12	(
FIELD	172:11	172:11	12	1
LEAF_NODE	172:11	172:11	13	1
LEAF_NODE	172:12	172:12	12	)
LEAF_NODE	172:13	172:13	10	;
LEAF_NODE	173:2	173:2	8	}
LEAF_NODE	174:1	174:1	5	}
JUMP_STATEMENT	175:1	175:11	3	return ( 0 ) ;
KEYWORD	175:1	175:1	4	return
LEAF_NODE	175:1	175:1	5	return
DESTINATION	175:8	175:8	4	( 0 )
EXPR	175:8	175:10	5	( 0 )
LEAF_NODE	175:8	175:8	6	(
FIELD	175:9	175:9	6	0
LEAF_NODE	175:9	175:9	7	0
LEAF_NODE	175:10	175:10	6	)
LEAF_NODE	175:11	175:11	4	;
LEAF_NODE	176:0	176:0	2	}
FUNCTION_DEF	178:0	183:0	1	
RETURN_TYPE	178:0	178:7	2	static void
LEAF_NODE	178:0	178:0	3	static
TYPE_NAME	178:7	178:7	3	void
LEAF_NODE	178:7	178:7	4	void
FUNCTION_NAME	179:0	179:0	2	_tiffUnmapProc
LEAF_NODE	179:0	179:0	3	_tiffUnmapProc
PARAMETER_LIST	179:14	179:52	2	( thandle_t fd , void * base , toff_t size )
LEAF_NODE	179:14	179:14	3	(
PARAMETER_DECL	179:15	179:25	3	thandle_t fd
TYPE	179:15	179:15	4	thandle_t
TYPE_NAME	179:15	179:15	5	thandle_t
LEAF_NODE	179:15	179:15	6	thandle_t
NAME	179:25	179:25	4	fd
LEAF_NODE	179:25	179:25	5	fd
LEAF_NODE	179:27	179:27	3	,
PARAMETER_DECL	179:29	179:35	3	void * base
TYPE	179:29	179:33	4	void *
TYPE_NAME	179:29	179:29	5	void
LEAF_NODE	179:29	179:29	6	void
POINTER	179:33	179:33	5	*
LEAF_NODE	179:33	179:33	6	*
NAME	179:35	179:35	4	base
LEAF_NODE	179:35	179:35	5	base
LEAF_NODE	179:39	179:39	3	,
PARAMETER_DECL	179:41	179:48	3	toff_t size
TYPE	179:41	179:41	4	toff_t
TYPE_NAME	179:41	179:41	5	toff_t
LEAF_NODE	179:41	179:41	6	toff_t
NAME	179:48	179:48	4	size
LEAF_NODE	179:48	179:48	5	size
LEAF_NODE	179:52	179:52	3	)
LEAF_NODE	180:0	180:0	2	{
STATEMENTS	181:1	182:1	2	
EXPR_STATEMENT	181:1	181:10	3	( void ) fd ;
EXPR	181:1	181:8	4	( void ) fd
LEAF_NODE	181:1	181:1	5	(
TYPE_NAME	181:2	181:2	5	void
LEAF_NODE	181:2	181:2	6	void
LEAF_NODE	181:6	181:6	5	)
FIELD	181:8	181:8	5	fd
LEAF_NODE	181:8	181:8	6	fd
LEAF_NODE	181:10	181:10	4	;
EXPR_STATEMENT	182:1	182:34	3	( void ) munmap ( base , ( off_t ) size ) ;
EXPR	182:1	182:8	4	( void ) munmap ( base , ( off_t ) size )
LEAF_NODE	182:1	182:1	5	(
TYPE_NAME	182:2	182:2	5	void
LEAF_NODE	182:2	182:2	6	void
LEAF_NODE	182:6	182:6	5	)
FUNCTION_CALL	182:8	182:33	5	munmap ( base , ( off_t ) size )
CALLEE	182:8	182:8	6	munmap
LEAF_NODE	182:8	182:8	7	munmap
LEAF_NODE	182:14	182:14	6	(
ARGUMENT	182:15	182:15	6	base
FIELD	182:15	182:15	7	base
LEAF_NODE	182:15	182:15	8	base
LEAF_NODE	182:19	182:19	6	,
ARGUMENT	182:21	182:29	6	( off_t ) size
LEAF_NODE	182:21	182:21	7	(
TYPE_NAME	182:22	182:22	7	off_t
LEAF_NODE	182:22	182:22	8	off_t
LEAF_NODE	182:27	182:27	7	)
FIELD	182:29	182:29	7	size
LEAF_NODE	182:29	182:29	8	size
LEAF_NODE	182:33	182:33	6	)
LEAF_NODE	182:34	182:34	4	;
LEAF_NODE	183:0	183:0	2	}
FUNCTION_DEF	185:0	190:0	1	
RETURN_TYPE	185:0	185:7	2	static int
LEAF_NODE	185:0	185:0	3	static
TYPE_NAME	185:7	185:7	3	int
LEAF_NODE	185:7	185:7	4	int
FUNCTION_NAME	186:0	186:0	2	_tiffMapProc
LEAF_NODE	186:0	186:0	3	_tiffMapProc
PARAMETER_LIST	186:12	186:54	2	( thandle_t fd , void * * pbase , toff_t * psize )
LEAF_NODE	186:12	186:12	3	(
PARAMETER_DECL	186:13	186:23	3	thandle_t fd
TYPE	186:13	186:13	4	thandle_t
TYPE_NAME	186:13	186:13	5	thandle_t
LEAF_NODE	186:13	186:13	6	thandle_t
NAME	186:23	186:23	4	fd
LEAF_NODE	186:23	186:23	5	fd
LEAF_NODE	186:25	186:25	3	,
PARAMETER_DECL	186:27	186:34	3	void * * pbase
TYPE	186:27	186:31	4	void * *
TYPE_NAME	186:27	186:27	5	void
LEAF_NODE	186:27	186:27	6	void
POINTER	186:31	186:32	5	* *
LEAF_NODE	186:31	186:31	6	*
LEAF_NODE	186:32	186:32	6	*
NAME	186:34	186:34	4	pbase
LEAF_NODE	186:34	186:34	5	pbase
LEAF_NODE	186:39	186:39	3	,
PARAMETER_DECL	186:41	186:49	3	toff_t * psize
TYPE	186:41	186:47	4	toff_t *
TYPE_NAME	186:41	186:41	5	toff_t
LEAF_NODE	186:41	186:41	6	toff_t
POINTER	186:47	186:47	5	*
LEAF_NODE	186:47	186:47	6	*
NAME	186:49	186:49	4	psize
LEAF_NODE	186:49	186:49	5	psize
LEAF_NODE	186:54	186:54	3	)
LEAF_NODE	187:0	187:0	2	{
STATEMENTS	188:1	189:1	2	
EXPR_STATEMENT	188:1	188:10	3	( void ) fd ;
EXPR	188:1	188:8	4	( void ) fd
LEAF_NODE	188:1	188:1	5	(
TYPE_NAME	188:2	188:2	5	void
LEAF_NODE	188:2	188:2	6	void
LEAF_NODE	188:6	188:6	5	)
FIELD	188:8	188:8	5	fd
LEAF_NODE	188:8	188:8	6	fd
LEAF_NODE	188:10	188:10	4	;
EXPR_STATEMENT	188:12	188:24	3	( void ) pbase ;
EXPR	188:12	188:19	4	( void ) pbase
LEAF_NODE	188:12	188:12	5	(
TYPE_NAME	188:13	188:13	5	void
LEAF_NODE	188:13	188:13	6	void
LEAF_NODE	188:17	188:17	5	)
FIELD	188:19	188:19	5	pbase
LEAF_NODE	188:19	188:19	6	pbase
LEAF_NODE	188:24	188:24	4	;
EXPR_STATEMENT	188:26	188:38	3	( void ) psize ;
EXPR	188:26	188:33	4	( void ) psize
LEAF_NODE	188:26	188:26	5	(
TYPE_NAME	188:27	188:27	5	void
LEAF_NODE	188:27	188:27	6	void
LEAF_NODE	188:31	188:31	5	)
FIELD	188:33	188:33	5	psize
LEAF_NODE	188:33	188:33	6	psize
LEAF_NODE	188:38	188:38	4	;
JUMP_STATEMENT	189:1	189:11	3	return ( 0 ) ;
KEYWORD	189:1	189:1	4	return
LEAF_NODE	189:1	189:1	5	return
DESTINATION	189:8	189:8	4	( 0 )
EXPR	189:8	189:10	5	( 0 )
LEAF_NODE	189:8	189:8	6	(
FIELD	189:9	189:9	6	0
LEAF_NODE	189:9	189:9	7	0
LEAF_NODE	189:10	189:10	6	)
LEAF_NODE	189:11	189:11	4	;
LEAF_NODE	190:0	190:0	2	}
FUNCTION_DEF	192:0	196:0	1	
RETURN_TYPE	192:0	192:7	2	static void
LEAF_NODE	192:0	192:0	3	static
TYPE_NAME	192:7	192:7	3	void
LEAF_NODE	192:7	192:7	4	void
FUNCTION_NAME	193:0	193:0	2	_tiffUnmapProc
LEAF_NODE	193:0	193:0	3	_tiffUnmapProc
PARAMETER_LIST	193:14	193:52	2	( thandle_t fd , void * base , toff_t size )
LEAF_NODE	193:14	193:14	3	(
PARAMETER_DECL	193:15	193:25	3	thandle_t fd
TYPE	193:15	193:15	4	thandle_t
TYPE_NAME	193:15	193:15	5	thandle_t
LEAF_NODE	193:15	193:15	6	thandle_t
NAME	193:25	193:25	4	fd
LEAF_NODE	193:25	193:25	5	fd
LEAF_NODE	193:27	193:27	3	,
PARAMETER_DECL	193:29	193:35	3	void * base
TYPE	193:29	193:33	4	void *
TYPE_NAME	193:29	193:29	5	void
LEAF_NODE	193:29	193:29	6	void
POINTER	193:33	193:33	5	*
LEAF_NODE	193:33	193:33	6	*
NAME	193:35	193:35	4	base
LEAF_NODE	193:35	193:35	5	base
LEAF_NODE	193:39	193:39	3	,
PARAMETER_DECL	193:41	193:48	3	toff_t size
TYPE	193:41	193:41	4	toff_t
TYPE_NAME	193:41	193:41	5	toff_t
LEAF_NODE	193:41	193:41	6	toff_t
NAME	193:48	193:48	4	size
LEAF_NODE	193:48	193:48	5	size
LEAF_NODE	193:52	193:52	3	)
LEAF_NODE	194:0	194:0	2	{
STATEMENTS	195:1	195:25	2	
EXPR_STATEMENT	195:1	195:10	3	( void ) fd ;
EXPR	195:1	195:8	4	( void ) fd
LEAF_NODE	195:1	195:1	5	(
TYPE_NAME	195:2	195:2	5	void
LEAF_NODE	195:2	195:2	6	void
LEAF_NODE	195:6	195:6	5	)
FIELD	195:8	195:8	5	fd
LEAF_NODE	195:8	195:8	6	fd
LEAF_NODE	195:10	195:10	4	;
EXPR_STATEMENT	195:12	195:23	3	( void ) base ;
EXPR	195:12	195:19	4	( void ) base
LEAF_NODE	195:12	195:12	5	(
TYPE_NAME	195:13	195:13	5	void
LEAF_NODE	195:13	195:13	6	void
LEAF_NODE	195:17	195:17	5	)
FIELD	195:19	195:19	5	base
LEAF_NODE	195:19	195:19	6	base
LEAF_NODE	195:23	195:23	4	;
EXPR_STATEMENT	195:25	195:36	3	( void ) size ;
EXPR	195:25	195:32	4	( void ) size
LEAF_NODE	195:25	195:25	5	(
TYPE_NAME	195:26	195:26	5	void
LEAF_NODE	195:26	195:26	6	void
LEAF_NODE	195:30	195:30	5	)
FIELD	195:32	195:32	5	size
LEAF_NODE	195:32	195:32	6	size
LEAF_NODE	195:36	195:36	4	;
LEAF_NODE	196:0	196:0	2	}
FUNCTION_DEF	202:0	217:0	1	
RETURN_TYPE	202:0	202:4	2	TIFF *
TYPE_NAME	202:0	202:0	3	TIFF
LEAF_NODE	202:0	202:0	4	TIFF
LEAF_NODE	202:4	202:4	3	*
FUNCTION_NAME	203:0	203:0	2	TIFFFdOpen
LEAF_NODE	203:0	203:0	3	TIFFFdOpen
PARAMETER_LIST	203:10	203:53	2	( int fd , const char * name , const char * mode )
LEAF_NODE	203:10	203:10	3	(
PARAMETER_DECL	203:11	203:15	3	int fd
TYPE	203:11	203:11	4	int
TYPE_NAME	203:11	203:11	5	int
LEAF_NODE	203:11	203:11	6	int
NAME	203:15	203:15	4	fd
LEAF_NODE	203:15	203:15	5	fd
LEAF_NODE	203:17	203:17	3	,
PARAMETER_DECL	203:19	203:31	3	const char * name
TYPE	203:19	203:29	4	const char *
TYPE_NAME	203:19	203:25	5	const char
LEAF_NODE	203:19	203:19	6	const
LEAF_NODE	203:25	203:25	6	char
POINTER	203:29	203:29	5	*
LEAF_NODE	203:29	203:29	6	*
NAME	203:31	203:31	4	name
LEAF_NODE	203:31	203:31	5	name
LEAF_NODE	203:35	203:35	3	,
PARAMETER_DECL	203:37	203:49	3	const char * mode
TYPE	203:37	203:47	4	const char *
TYPE_NAME	203:37	203:43	5	const char
LEAF_NODE	203:37	203:37	6	const
LEAF_NODE	203:43	203:43	6	char
POINTER	203:47	203:47	5	*
LEAF_NODE	203:47	203:47	6	*
NAME	203:49	203:49	4	mode
LEAF_NODE	203:49	203:49	5	mode
LEAF_NODE	203:53	203:53	3	)
LEAF_NODE	204:0	204:0	2	{
STATEMENTS	205:1	216:13	2	
SIMPLE_DECL	205:1	205:10	3	TIFF * tif ;
VAR_DECL	205:1	205:7	4	TIFF * tif
TYPE	205:1	205:5	5	TIFF *
TYPE_NAME	205:1	205:1	6	TIFF
LEAF_NODE	205:1	205:1	7	TIFF
POINTER	205:5	205:5	6	*
LEAF_NODE	205:5	205:5	7	*
NAME	205:7	205:7	5	tif
LEAF_NODE	205:7	205:7	6	tif
LEAF_NODE	205:10	205:10	4	;
SIMPLE_DECL	207:1	207:25	3	fd_as_handle_union_t fdh ;
VAR_DECL	207:1	207:22	4	fd_as_handle_union_t fdh
TYPE	207:1	207:1	5	fd_as_handle_union_t
TYPE_NAME	207:1	207:1	6	fd_as_handle_union_t
LEAF_NODE	207:1	207:1	7	fd_as_handle_union_t
NAME	207:22	207:22	5	fdh
LEAF_NODE	207:22	207:22	6	fdh
LEAF_NODE	207:25	207:25	4	;
EXPR_STATEMENT	208:1	208:12	3	fdh . fd = fd ;
EXPR	208:1	208:1	4	fdh . fd = fd
ASSIGN	208:1	208:10	5	fdh . fd = fd
LVAL	208:1	208:1	6	fdh . fd
FIELD	208:1	208:5	7	fdh . fd
LEAF_NODE	208:1	208:1	8	fdh
LEAF_NODE	208:4	208:4	8	.
LEAF_NODE	208:5	208:5	8	fd
ASSIGN_OP	208:8	208:8	6	=
LEAF_NODE	208:8	208:8	7	=
RVAL	208:10	208:10	6	fd
FIELD	208:10	208:10	7	fd
LEAF_NODE	208:10	208:10	8	fd
LEAF_NODE	208:12	208:12	4	;
EXPR_STATEMENT	209:1	213:34	3	tif = TIFFClientOpen ( name , mode , fdh . h , _tiffReadProc , _tiffWriteProc , _tiffSeekProc , _tiffCloseProc , _tiffSizeProc , _tiffMapProc , _tiffUnmapProc ) ;
EXPR	209:1	209:1	4	tif = TIFFClientOpen ( name , mode , fdh . h , _tiffReadProc , _tiffWriteProc , _tiffSeekProc , _tiffCloseProc , _tiffSizeProc , _tiffMapProc , _tiffUnmapProc )
ASSIGN	209:1	209:7	5	tif = TIFFClientOpen ( name , mode , fdh . h , _tiffReadProc , _tiffWriteProc , _tiffSeekProc , _tiffCloseProc , _tiffSizeProc , _tiffMapProc , _tiffUnmapProc )
LVAL	209:1	209:1	6	tif
FIELD	209:1	209:1	7	tif
LEAF_NODE	209:1	209:1	8	tif
ASSIGN_OP	209:5	209:5	6	=
LEAF_NODE	209:5	209:5	7	=
RVAL	209:7	209:7	6	TIFFClientOpen ( name , mode , fdh . h , _tiffReadProc , _tiffWriteProc , _tiffSeekProc , _tiffCloseProc , _tiffSizeProc , _tiffMapProc , _tiffUnmapProc )
FUNCTION_CALL	209:7	213:33	7	TIFFClientOpen ( name , mode , fdh . h , _tiffReadProc , _tiffWriteProc , _tiffSeekProc , _tiffCloseProc , _tiffSizeProc , _tiffMapProc , _tiffUnmapProc )
CALLEE	209:7	209:7	8	TIFFClientOpen
LEAF_NODE	209:7	209:7	9	TIFFClientOpen
LEAF_NODE	209:21	209:21	8	(
ARGUMENT	209:22	209:22	8	name
FIELD	209:22	209:22	9	name
LEAF_NODE	209:22	209:22	10	name
LEAF_NODE	209:26	209:26	8	,
ARGUMENT	209:28	209:28	8	mode
FIELD	209:28	209:28	9	mode
LEAF_NODE	209:28	209:28	10	mode
LEAF_NODE	209:32	209:32	8	,
ARGUMENT	210:5	210:5	8	fdh . h
FIELD	210:5	210:9	9	fdh . h
LEAF_NODE	210:5	210:5	10	fdh
LEAF_NODE	210:8	210:8	10	.
LEAF_NODE	210:9	210:9	10	h
LEAF_NODE	210:10	210:10	8	,
ARGUMENT	211:5	211:5	8	_tiffReadProc
FIELD	211:5	211:5	9	_tiffReadProc
LEAF_NODE	211:5	211:5	10	_tiffReadProc
LEAF_NODE	211:18	211:18	8	,
ARGUMENT	211:20	211:20	8	_tiffWriteProc
FIELD	211:20	211:20	9	_tiffWriteProc
LEAF_NODE	211:20	211:20	10	_tiffWriteProc
LEAF_NODE	211:34	211:34	8	,
ARGUMENT	212:5	212:5	8	_tiffSeekProc
FIELD	212:5	212:5	9	_tiffSeekProc
LEAF_NODE	212:5	212:5	10	_tiffSeekProc
LEAF_NODE	212:18	212:18	8	,
ARGUMENT	212:20	212:20	8	_tiffCloseProc
FIELD	212:20	212:20	9	_tiffCloseProc
LEAF_NODE	212:20	212:20	10	_tiffCloseProc
LEAF_NODE	212:34	212:34	8	,
ARGUMENT	212:36	212:36	8	_tiffSizeProc
FIELD	212:36	212:36	9	_tiffSizeProc
LEAF_NODE	212:36	212:36	10	_tiffSizeProc
LEAF_NODE	212:49	212:49	8	,
ARGUMENT	213:5	213:5	8	_tiffMapProc
FIELD	213:5	213:5	9	_tiffMapProc
LEAF_NODE	213:5	213:5	10	_tiffMapProc
LEAF_NODE	213:17	213:17	8	,
ARGUMENT	213:19	213:19	8	_tiffUnmapProc
FIELD	213:19	213:19	9	_tiffUnmapProc
LEAF_NODE	213:19	213:19	10	_tiffUnmapProc
LEAF_NODE	213:33	213:33	8	)
LEAF_NODE	213:34	213:34	4	;
SELECTION	214:1	215:2	3	
KEYWORD	214:1	214:1	4	if
LEAF_NODE	214:1	214:1	5	if
LEAF_NODE	214:4	214:4	4	(
CONDITION	214:5	214:5	4	tif
EXPR	214:5	214:5	5	tif
FIELD	214:5	214:5	6	tif
LEAF_NODE	214:5	214:5	7	tif
LEAF_NODE	214:8	214:8	4	)
STATEMENTS	215:2	215:2	4	
EXPR_STATEMENT	215:2	215:18	5	tif -> tif_fd = fd ;
EXPR	215:2	215:2	6	tif -> tif_fd = fd
ASSIGN	215:2	215:16	7	tif -> tif_fd = fd
LVAL	215:2	215:2	8	tif -> tif_fd
FIELD	215:2	215:7	9	tif -> tif_fd
LEAF_NODE	215:2	215:2	10	tif
LEAF_NODE	215:5	215:5	10	->
LEAF_NODE	215:7	215:7	10	tif_fd
ASSIGN_OP	215:14	215:14	8	=
LEAF_NODE	215:14	215:14	9	=
RVAL	215:16	215:16	8	fd
FIELD	215:16	215:16	9	fd
LEAF_NODE	215:16	215:16	10	fd
LEAF_NODE	215:18	215:18	6	;
LEAF_NODE	216:1	216:1	3	return
LEAF_NODE	216:8	216:8	3	(
LEAF_NODE	216:9	216:9	3	tif
LEAF_NODE	216:12	216:12	3	)
LEAF_NODE	216:13	216:13	3	;
LEAF_NODE	217:0	217:0	2	}
FUNCTION_DEF	222:0	252:0	1	
RETURN_TYPE	222:0	222:4	2	TIFF *
TYPE_NAME	222:0	222:0	3	TIFF
LEAF_NODE	222:0	222:0	4	TIFF
LEAF_NODE	222:4	222:4	3	*
FUNCTION_NAME	223:0	223:0	2	TIFFOpen
LEAF_NODE	223:0	223:0	3	TIFFOpen
PARAMETER_LIST	223:8	223:43	2	( const char * name , const char * mode )
LEAF_NODE	223:8	223:8	3	(
PARAMETER_DECL	223:9	223:21	3	const char * name
TYPE	223:9	223:19	4	const char *
TYPE_NAME	223:9	223:15	5	const char
LEAF_NODE	223:9	223:9	6	const
LEAF_NODE	223:15	223:15	6	char
POINTER	223:19	223:19	5	*
LEAF_NODE	223:19	223:19	6	*
NAME	223:21	223:21	4	name
LEAF_NODE	223:21	223:21	5	name
LEAF_NODE	223:25	223:25	3	,
PARAMETER_DECL	223:27	223:39	3	const char * mode
TYPE	223:27	223:37	4	const char *
TYPE_NAME	223:27	223:33	5	const char
LEAF_NODE	223:27	223:27	6	const
LEAF_NODE	223:33	223:33	6	char
POINTER	223:37	223:37	5	*
LEAF_NODE	223:37	223:37	6	*
NAME	223:39	223:39	4	mode
LEAF_NODE	223:39	223:39	5	mode
LEAF_NODE	223:43	223:43	3	)
LEAF_NODE	224:0	224:0	2	{
STATEMENTS	225:1	251:1	2	
LEAF_NODE	225:1	225:1	3	static
SIMPLE_DECL	225:8	225:40	3	const char [ ] module ; module = "TIFFOpen" ;
VAR_DECL	225:8	225:19	4	const char [ ] module ; module = "TIFFOpen"
TYPE	225:8	225:25	5	const char [ ]
TYPE_NAME	225:8	225:14	6	const char
LEAF_NODE	225:8	225:8	7	const
LEAF_NODE	225:14	225:14	7	char
TYPE_SUFFIX	225:25	225:26	6	[ ]
LEAF_NODE	225:25	225:25	7	[
LEAF_NODE	225:26	225:26	7	]
NAME	225:19	225:19	5	module
LEAF_NODE	225:19	225:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	225:19	225:19	5	module = "TIFFOpen"
ASSIGN	225:19	225:30	6	module = "TIFFOpen"
LVAL	225:19	225:19	7	module
NAME	225:19	225:19	8	module
LEAF_NODE	225:19	225:19	9	module
ASSIGN_OP	225:28	225:28	7	=
LEAF_NODE	225:28	225:28	8	=
RVAL	225:30	225:30	7	"TIFFOpen"
FIELD	225:30	225:30	8	"TIFFOpen"
LEAF_NODE	225:30	225:30	9	"TIFFOpen"
LEAF_NODE	225:40	225:40	4	;
SIMPLE_DECL	226:1	226:10	3	int m , int fd ;
INIT_DECL_LIST	226:1	226:1	4	int m , int fd
VAR_DECL	226:1	226:5	5	int m
TYPE	226:1	226:1	6	int
TYPE_NAME	226:1	226:1	7	int
LEAF_NODE	226:1	226:1	8	int
NAME	226:5	226:5	6	m
LEAF_NODE	226:5	226:5	7	m
LEAF_NODE	226:6	226:6	5	,
VAR_DECL	226:1	226:8	5	int fd
TYPE	226:1	226:1	6	int
TYPE_NAME	226:1	226:1	7	int
LEAF_NODE	226:1	226:1	8	int
NAME	226:8	226:8	6	fd
LEAF_NODE	226:8	226:8	7	fd
LEAF_NODE	226:10	226:10	4	;
SIMPLE_DECL	227:1	227:10	3	TIFF * tif ;
VAR_DECL	227:1	227:7	4	TIFF * tif
TYPE	227:1	227:5	5	TIFF *
TYPE_NAME	227:1	227:1	6	TIFF
LEAF_NODE	227:1	227:1	7	TIFF
POINTER	227:5	227:5	6	*
LEAF_NODE	227:5	227:5	7	*
NAME	227:7	227:7	5	tif
LEAF_NODE	227:7	227:7	6	tif
LEAF_NODE	227:10	227:10	4	;
EXPR_STATEMENT	229:1	229:31	3	m = _TIFFgetMode ( mode , module ) ;
EXPR	229:1	229:1	4	m = _TIFFgetMode ( mode , module )
ASSIGN	229:1	229:5	5	m = _TIFFgetMode ( mode , module )
LVAL	229:1	229:1	6	m
FIELD	229:1	229:1	7	m
LEAF_NODE	229:1	229:1	8	m
ASSIGN_OP	229:3	229:3	6	=
LEAF_NODE	229:3	229:3	7	=
RVAL	229:5	229:5	6	_TIFFgetMode ( mode , module )
FUNCTION_CALL	229:5	229:30	7	_TIFFgetMode ( mode , module )
CALLEE	229:5	229:5	8	_TIFFgetMode
LEAF_NODE	229:5	229:5	9	_TIFFgetMode
LEAF_NODE	229:17	229:17	8	(
ARGUMENT	229:18	229:18	8	mode
FIELD	229:18	229:18	9	mode
LEAF_NODE	229:18	229:18	10	mode
LEAF_NODE	229:22	229:22	8	,
ARGUMENT	229:24	229:24	8	module
FIELD	229:24	229:24	9	module
LEAF_NODE	229:24	229:24	10	module
LEAF_NODE	229:30	229:30	8	)
LEAF_NODE	229:31	229:31	4	;
SELECTION	230:1	231:2	3	
KEYWORD	230:1	230:1	4	if
LEAF_NODE	230:1	230:1	5	if
LEAF_NODE	230:4	230:4	4	(
CONDITION	230:5	230:5	4	m == - 1
EXPR	230:5	230:10	5	m == - 1
FIELD	230:5	230:5	6	m
LEAF_NODE	230:5	230:5	7	m
EQ_OPERATOR	230:7	230:7	6	==
LEAF_NODE	230:7	230:7	7	==
UNARY_EXPR	230:10	230:11	6	- 1
UNARY_OPERATOR	230:10	230:10	7	-
LEAF_NODE	230:10	230:10	8	-
FIELD	230:11	230:11	7	1
LEAF_NODE	230:11	230:11	8	1
LEAF_NODE	230:12	230:12	4	)
STATEMENTS	231:2	231:2	4	
JUMP_STATEMENT	231:2	231:19	5	return ( ( TIFF * ) 0 ) ;
KEYWORD	231:2	231:2	6	return
LEAF_NODE	231:2	231:2	7	return
DESTINATION	231:9	231:9	6	( ( TIFF * ) 0 )
EXPR	231:9	231:18	7	( ( TIFF * ) 0 )
LEAF_NODE	231:9	231:9	8	(
LEAF_NODE	231:10	231:10	8	(
TYPE_NAME	231:11	231:11	8	TIFF
LEAF_NODE	231:11	231:11	9	TIFF
LEAF_NODE	231:15	231:15	8	*
LEAF_NODE	231:16	231:16	8	)
FIELD	231:17	231:17	8	0
LEAF_NODE	231:17	231:17	9	0
LEAF_NODE	231:18	231:18	8	)
LEAF_NODE	231:19	231:19	6	;
EXPR_STATEMENT	235:1	235:14	3	m |= O_BINARY ;
EXPR	235:1	235:1	4	m |= O_BINARY
ASSIGN	235:1	235:6	5	m |= O_BINARY
LVAL	235:1	235:1	6	m
FIELD	235:1	235:1	7	m
LEAF_NODE	235:1	235:1	8	m
ASSIGN_OP	235:3	235:3	6	|=
LEAF_NODE	235:3	235:3	7	|=
RVAL	235:6	235:6	6	O_BINARY
FIELD	235:6	235:6	7	O_BINARY
LEAF_NODE	235:6	235:6	8	O_BINARY
LEAF_NODE	235:14	235:14	4	;
EXPR_STATEMENT	238:1	238:25	3	fd = open ( name , m , 0666 ) ;
EXPR	238:1	238:1	4	fd = open ( name , m , 0666 )
ASSIGN	238:1	238:6	5	fd = open ( name , m , 0666 )
LVAL	238:1	238:1	6	fd
FIELD	238:1	238:1	7	fd
LEAF_NODE	238:1	238:1	8	fd
ASSIGN_OP	238:4	238:4	6	=
LEAF_NODE	238:4	238:4	7	=
RVAL	238:6	238:6	6	open ( name , m , 0666 )
FUNCTION_CALL	238:6	238:24	7	open ( name , m , 0666 )
CALLEE	238:6	238:6	8	open
LEAF_NODE	238:6	238:6	9	open
LEAF_NODE	238:10	238:10	8	(
ARGUMENT	238:11	238:11	8	name
FIELD	238:11	238:11	9	name
LEAF_NODE	238:11	238:11	10	name
LEAF_NODE	238:15	238:15	8	,
ARGUMENT	238:17	238:17	8	m
FIELD	238:17	238:17	9	m
LEAF_NODE	238:17	238:17	10	m
LEAF_NODE	238:18	238:18	8	,
ARGUMENT	238:20	238:20	8	0666
FIELD	238:20	238:20	9	0666
LEAF_NODE	238:20	238:20	10	0666
LEAF_NODE	238:24	238:24	8	)
LEAF_NODE	238:25	238:25	4	;
SELECTION	239:1	239:13	3	
KEYWORD	239:1	239:1	4	if
LEAF_NODE	239:1	239:1	5	if
LEAF_NODE	239:4	239:4	4	(
CONDITION	239:5	239:5	4	fd < 0
EXPR	239:5	239:10	5	fd < 0
FIELD	239:5	239:5	6	fd
LEAF_NODE	239:5	239:5	7	fd
REL_OPERATOR	239:8	239:8	6	<
LEAF_NODE	239:8	239:8	7	<
FIELD	239:10	239:10	6	0
LEAF_NODE	239:10	239:10	7	0
LEAF_NODE	239:11	239:11	4	)
STATEMENTS	239:13	246:1	4	
LEAF_NODE	239:13	239:13	5	{
STATEMENTS	240:2	245:2	5	
SELECTION	240:2	240:45	6	
KEYWORD	240:2	240:2	7	if
LEAF_NODE	240:2	240:2	8	if
LEAF_NODE	240:5	240:5	7	(
CONDITION	240:6	240:6	7	errno > 0 && strerror ( errno ) != NULL
EXPR	240:6	240:6	8	errno > 0 && strerror ( errno ) != NULL
AND	240:6	240:19	9	errno > 0 && strerror ( errno ) != NULL
EXPR	240:6	240:14	10	errno > 0
FIELD	240:6	240:6	11	errno
LEAF_NODE	240:6	240:6	12	errno
REL_OPERATOR	240:12	240:12	11	>
LEAF_NODE	240:12	240:12	12	>
FIELD	240:14	240:14	11	0
LEAF_NODE	240:14	240:14	12	0
LEAF_NODE	240:16	240:16	10	&&
EXPR	240:19	240:38	10	strerror ( errno ) != NULL
FUNCTION_CALL	240:19	240:33	11	strerror ( errno )
CALLEE	240:19	240:19	12	strerror
LEAF_NODE	240:19	240:19	13	strerror
LEAF_NODE	240:27	240:27	12	(
ARGUMENT	240:28	240:28	12	errno
FIELD	240:28	240:28	13	errno
LEAF_NODE	240:28	240:28	14	errno
LEAF_NODE	240:33	240:33	12	)
EQ_OPERATOR	240:35	240:35	11	!=
LEAF_NODE	240:35	240:35	12	!=
FIELD	240:38	240:38	11	NULL
LEAF_NODE	240:38	240:38	12	NULL
LEAF_NODE	240:43	240:43	7	)
STATEMENTS	240:45	242:2	7	
LEAF_NODE	240:45	240:45	8	{
STATEMENTS	241:3	241:3	8	
EXPR_STATEMENT	241:3	241:60	9	TIFFErrorExt ( 0 , module , "%s: %s" , name , strerror ( errno ) ) ;
EXPR	241:3	241:3	10	TIFFErrorExt ( 0 , module , "%s: %s" , name , strerror ( errno ) )
FUNCTION_CALL	241:3	241:59	11	TIFFErrorExt ( 0 , module , "%s: %s" , name , strerror ( errno ) )
CALLEE	241:3	241:3	12	TIFFErrorExt
LEAF_NODE	241:3	241:3	13	TIFFErrorExt
LEAF_NODE	241:15	241:15	12	(
ARGUMENT	241:16	241:16	12	0
FIELD	241:16	241:16	13	0
LEAF_NODE	241:16	241:16	14	0
LEAF_NODE	241:17	241:17	12	,
ARGUMENT	241:19	241:19	12	module
FIELD	241:19	241:19	13	module
LEAF_NODE	241:19	241:19	14	module
LEAF_NODE	241:25	241:25	12	,
ARGUMENT	241:27	241:27	12	"%s: %s"
FIELD	241:27	241:27	13	"%s: %s"
LEAF_NODE	241:27	241:27	14	"%s: %s"
LEAF_NODE	241:35	241:35	12	,
ARGUMENT	241:37	241:37	12	name
FIELD	241:37	241:37	13	name
LEAF_NODE	241:37	241:37	14	name
LEAF_NODE	241:41	241:41	12	,
ARGUMENT	241:43	241:43	12	strerror ( errno )
FUNCTION_CALL	241:43	241:57	13	strerror ( errno )
CALLEE	241:43	241:43	14	strerror
LEAF_NODE	241:43	241:43	15	strerror
LEAF_NODE	241:51	241:51	14	(
ARGUMENT	241:52	241:52	14	errno
FIELD	241:52	241:52	15	errno
LEAF_NODE	241:52	241:52	16	errno
LEAF_NODE	241:57	241:57	14	)
LEAF_NODE	241:59	241:59	12	)
LEAF_NODE	241:60	241:60	10	;
LEAF_NODE	242:2	242:2	8	}
SELECTION	242:4	242:9	6	
KEYWORD	242:4	242:4	7	else
LEAF_NODE	242:4	242:4	8	else
STATEMENTS	242:9	244:2	7	
LEAF_NODE	242:9	242:9	8	{
STATEMENTS	243:3	243:3	8	
EXPR_STATEMENT	243:3	243:51	9	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name ) ;
EXPR	243:3	243:3	10	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name )
FUNCTION_CALL	243:3	243:50	11	TIFFErrorExt ( 0 , module , "%s: Cannot open" , name )
CALLEE	243:3	243:3	12	TIFFErrorExt
LEAF_NODE	243:3	243:3	13	TIFFErrorExt
LEAF_NODE	243:15	243:15	12	(
ARGUMENT	243:16	243:16	12	0
FIELD	243:16	243:16	13	0
LEAF_NODE	243:16	243:16	14	0
LEAF_NODE	243:17	243:17	12	,
ARGUMENT	243:19	243:19	12	module
FIELD	243:19	243:19	13	module
LEAF_NODE	243:19	243:19	14	module
LEAF_NODE	243:25	243:25	12	,
ARGUMENT	243:27	243:27	12	"%s: Cannot open"
FIELD	243:27	243:27	13	"%s: Cannot open"
LEAF_NODE	243:27	243:27	14	"%s: Cannot open"
LEAF_NODE	243:44	243:44	12	,
ARGUMENT	243:46	243:46	12	name
FIELD	243:46	243:46	13	name
LEAF_NODE	243:46	243:46	14	name
LEAF_NODE	243:50	243:50	12	)
LEAF_NODE	243:51	243:51	10	;
LEAF_NODE	244:2	244:2	8	}
JUMP_STATEMENT	245:2	245:20	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	245:2	245:2	7	return
LEAF_NODE	245:2	245:2	8	return
DESTINATION	245:9	245:9	7	( ( TIFF * ) 0 )
EXPR	245:9	245:19	8	( ( TIFF * ) 0 )
LEAF_NODE	245:9	245:9	9	(
LEAF_NODE	245:10	245:10	9	(
TYPE_NAME	245:11	245:11	9	TIFF
LEAF_NODE	245:11	245:11	10	TIFF
LEAF_NODE	245:16	245:16	9	*
LEAF_NODE	245:17	245:17	9	)
FIELD	245:18	245:18	9	0
LEAF_NODE	245:18	245:18	10	0
LEAF_NODE	245:19	245:19	9	)
LEAF_NODE	245:20	245:20	7	;
LEAF_NODE	246:1	246:1	5	}
EXPR_STATEMENT	248:1	248:38	3	tif = TIFFFdOpen ( ( int ) fd , name , mode ) ;
EXPR	248:1	248:1	4	tif = TIFFFdOpen ( ( int ) fd , name , mode )
ASSIGN	248:1	248:7	5	tif = TIFFFdOpen ( ( int ) fd , name , mode )
LVAL	248:1	248:1	6	tif
FIELD	248:1	248:1	7	tif
LEAF_NODE	248:1	248:1	8	tif
ASSIGN_OP	248:5	248:5	6	=
LEAF_NODE	248:5	248:5	7	=
RVAL	248:7	248:7	6	TIFFFdOpen ( ( int ) fd , name , mode )
FUNCTION_CALL	248:7	248:37	7	TIFFFdOpen ( ( int ) fd , name , mode )
CALLEE	248:7	248:7	8	TIFFFdOpen
LEAF_NODE	248:7	248:7	9	TIFFFdOpen
LEAF_NODE	248:17	248:17	8	(
ARGUMENT	248:18	248:23	8	( int ) fd
LEAF_NODE	248:18	248:18	9	(
TYPE_NAME	248:19	248:19	9	int
LEAF_NODE	248:19	248:19	10	int
LEAF_NODE	248:22	248:22	9	)
FIELD	248:23	248:23	9	fd
LEAF_NODE	248:23	248:23	10	fd
LEAF_NODE	248:25	248:25	8	,
ARGUMENT	248:27	248:27	8	name
FIELD	248:27	248:27	9	name
LEAF_NODE	248:27	248:27	10	name
LEAF_NODE	248:31	248:31	8	,
ARGUMENT	248:33	248:33	8	mode
FIELD	248:33	248:33	9	mode
LEAF_NODE	248:33	248:33	10	mode
LEAF_NODE	248:37	248:37	8	)
LEAF_NODE	248:38	248:38	4	;
SELECTION	249:1	250:2	3	
KEYWORD	249:1	249:1	4	if
LEAF_NODE	249:1	249:1	5	if
LEAF_NODE	249:3	249:3	4	(
CONDITION	249:4	249:4	4	! tif
EXPR	249:4	249:4	5	! tif
UNARY_EXPR	249:4	249:5	6	! tif
UNARY_OPERATOR	249:4	249:4	7	!
LEAF_NODE	249:4	249:4	8	!
FIELD	249:5	249:5	7	tif
LEAF_NODE	249:5	249:5	8	tif
LEAF_NODE	249:8	249:8	4	)
STATEMENTS	250:2	250:2	4	
EXPR_STATEMENT	250:2	250:11	5	close ( fd ) ;
EXPR	250:2	250:2	6	close ( fd )
FUNCTION_CALL	250:2	250:10	7	close ( fd )
CALLEE	250:2	250:2	8	close
LEAF_NODE	250:2	250:2	9	close
LEAF_NODE	250:7	250:7	8	(
ARGUMENT	250:8	250:8	8	fd
FIELD	250:8	250:8	9	fd
LEAF_NODE	250:8	250:8	10	fd
LEAF_NODE	250:10	250:10	8	)
LEAF_NODE	250:11	250:11	6	;
JUMP_STATEMENT	251:1	251:11	3	return tif ;
KEYWORD	251:1	251:1	4	return
LEAF_NODE	251:1	251:1	5	return
DESTINATION	251:8	251:8	4	tif
EXPR	251:8	251:8	5	tif
FIELD	251:8	251:8	6	tif
LEAF_NODE	251:8	251:8	7	tif
LEAF_NODE	251:11	251:11	4	;
LEAF_NODE	252:0	252:0	2	}
FUNCTION_DEF	259:0	305:0	1	
RETURN_TYPE	259:0	259:4	2	TIFF *
TYPE_NAME	259:0	259:0	3	TIFF
LEAF_NODE	259:0	259:0	4	TIFF
LEAF_NODE	259:4	259:4	3	*
FUNCTION_NAME	260:0	260:0	2	TIFFOpenW
LEAF_NODE	260:0	260:0	3	TIFFOpenW
PARAMETER_LIST	260:9	260:47	2	( const wchar_t * name , const char * mode )
LEAF_NODE	260:9	260:9	3	(
PARAMETER_DECL	260:10	260:25	3	const wchar_t * name
TYPE	260:10	260:23	4	const wchar_t *
TYPE_NAME	260:10	260:16	5	const wchar_t
LEAF_NODE	260:10	260:10	6	const
LEAF_NODE	260:16	260:16	6	wchar_t
POINTER	260:23	260:23	5	*
LEAF_NODE	260:23	260:23	6	*
NAME	260:25	260:25	4	name
LEAF_NODE	260:25	260:25	5	name
LEAF_NODE	260:29	260:29	3	,
PARAMETER_DECL	260:31	260:43	3	const char * mode
TYPE	260:31	260:41	4	const char *
TYPE_NAME	260:31	260:37	5	const char
LEAF_NODE	260:31	260:31	6	const
LEAF_NODE	260:37	260:37	6	char
POINTER	260:41	260:41	5	*
LEAF_NODE	260:41	260:41	6	*
NAME	260:43	260:43	4	mode
LEAF_NODE	260:43	260:43	5	mode
LEAF_NODE	260:47	260:47	3	)
LEAF_NODE	261:0	261:0	2	{
STATEMENTS	262:1	304:1	2	
LEAF_NODE	262:1	262:1	3	static
SIMPLE_DECL	262:8	262:41	3	const char [ ] module ; module = "TIFFOpenW" ;
VAR_DECL	262:8	262:19	4	const char [ ] module ; module = "TIFFOpenW"
TYPE	262:8	262:25	5	const char [ ]
TYPE_NAME	262:8	262:14	6	const char
LEAF_NODE	262:8	262:8	7	const
LEAF_NODE	262:14	262:14	7	char
TYPE_SUFFIX	262:25	262:26	6	[ ]
LEAF_NODE	262:25	262:25	7	[
LEAF_NODE	262:26	262:26	7	]
NAME	262:19	262:19	5	module
LEAF_NODE	262:19	262:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	262:19	262:19	5	module = "TIFFOpenW"
ASSIGN	262:19	262:30	6	module = "TIFFOpenW"
LVAL	262:19	262:19	7	module
NAME	262:19	262:19	8	module
LEAF_NODE	262:19	262:19	9	module
ASSIGN_OP	262:28	262:28	7	=
LEAF_NODE	262:28	262:28	8	=
RVAL	262:30	262:30	7	"TIFFOpenW"
FIELD	262:30	262:30	8	"TIFFOpenW"
LEAF_NODE	262:30	262:30	9	"TIFFOpenW"
LEAF_NODE	262:41	262:41	4	;
SIMPLE_DECL	263:1	263:10	3	int m , int fd ;
INIT_DECL_LIST	263:1	263:1	4	int m , int fd
VAR_DECL	263:1	263:5	5	int m
TYPE	263:1	263:1	6	int
TYPE_NAME	263:1	263:1	7	int
LEAF_NODE	263:1	263:1	8	int
NAME	263:5	263:5	6	m
LEAF_NODE	263:5	263:5	7	m
LEAF_NODE	263:6	263:6	5	,
VAR_DECL	263:1	263:8	5	int fd
TYPE	263:1	263:1	6	int
TYPE_NAME	263:1	263:1	7	int
LEAF_NODE	263:1	263:1	8	int
NAME	263:8	263:8	6	fd
LEAF_NODE	263:8	263:8	7	fd
LEAF_NODE	263:10	263:10	4	;
SIMPLE_DECL	264:1	264:11	3	int mbsize ;
VAR_DECL	264:1	264:5	4	int mbsize
TYPE	264:1	264:1	5	int
TYPE_NAME	264:1	264:1	6	int
LEAF_NODE	264:1	264:1	7	int
NAME	264:5	264:5	5	mbsize
LEAF_NODE	264:5	264:5	6	mbsize
LEAF_NODE	264:11	264:11	4	;
SIMPLE_DECL	265:1	265:13	3	char * mbname ;
VAR_DECL	265:1	265:7	4	char * mbname
TYPE	265:1	265:6	5	char *
TYPE_NAME	265:1	265:1	6	char
LEAF_NODE	265:1	265:1	7	char
POINTER	265:6	265:6	6	*
LEAF_NODE	265:6	265:6	7	*
NAME	265:7	265:7	5	mbname
LEAF_NODE	265:7	265:7	6	mbname
LEAF_NODE	265:13	265:13	4	;
SIMPLE_DECL	266:1	266:10	3	TIFF * tif ;
VAR_DECL	266:1	266:7	4	TIFF * tif
TYPE	266:1	266:5	5	TIFF *
TYPE_NAME	266:1	266:1	6	TIFF
LEAF_NODE	266:1	266:1	7	TIFF
POINTER	266:5	266:5	6	*
LEAF_NODE	266:5	266:5	7	*
NAME	266:7	266:7	5	tif
LEAF_NODE	266:7	266:7	6	tif
LEAF_NODE	266:10	266:10	4	;
EXPR_STATEMENT	268:1	268:31	3	m = _TIFFgetMode ( mode , module ) ;
EXPR	268:1	268:1	4	m = _TIFFgetMode ( mode , module )
ASSIGN	268:1	268:5	5	m = _TIFFgetMode ( mode , module )
LVAL	268:1	268:1	6	m
FIELD	268:1	268:1	7	m
LEAF_NODE	268:1	268:1	8	m
ASSIGN_OP	268:3	268:3	6	=
LEAF_NODE	268:3	268:3	7	=
RVAL	268:5	268:5	6	_TIFFgetMode ( mode , module )
FUNCTION_CALL	268:5	268:30	7	_TIFFgetMode ( mode , module )
CALLEE	268:5	268:5	8	_TIFFgetMode
LEAF_NODE	268:5	268:5	9	_TIFFgetMode
LEAF_NODE	268:17	268:17	8	(
ARGUMENT	268:18	268:18	8	mode
FIELD	268:18	268:18	9	mode
LEAF_NODE	268:18	268:18	10	mode
LEAF_NODE	268:22	268:22	8	,
ARGUMENT	268:24	268:24	8	module
FIELD	268:24	268:24	9	module
LEAF_NODE	268:24	268:24	10	module
LEAF_NODE	268:30	268:30	8	)
LEAF_NODE	268:31	268:31	4	;
SELECTION	269:1	270:2	3	
KEYWORD	269:1	269:1	4	if
LEAF_NODE	269:1	269:1	5	if
LEAF_NODE	269:4	269:4	4	(
CONDITION	269:5	269:5	4	m == - 1
EXPR	269:5	269:10	5	m == - 1
FIELD	269:5	269:5	6	m
LEAF_NODE	269:5	269:5	7	m
EQ_OPERATOR	269:7	269:7	6	==
LEAF_NODE	269:7	269:7	7	==
UNARY_EXPR	269:10	269:11	6	- 1
UNARY_OPERATOR	269:10	269:10	7	-
LEAF_NODE	269:10	269:10	8	-
FIELD	269:11	269:11	7	1
LEAF_NODE	269:11	269:11	8	1
LEAF_NODE	269:12	269:12	4	)
STATEMENTS	270:2	270:2	4	
JUMP_STATEMENT	270:2	270:19	5	return ( ( TIFF * ) 0 ) ;
KEYWORD	270:2	270:2	6	return
LEAF_NODE	270:2	270:2	7	return
DESTINATION	270:9	270:9	6	( ( TIFF * ) 0 )
EXPR	270:9	270:18	7	( ( TIFF * ) 0 )
LEAF_NODE	270:9	270:9	8	(
LEAF_NODE	270:10	270:10	8	(
TYPE_NAME	270:11	270:11	8	TIFF
LEAF_NODE	270:11	270:11	9	TIFF
LEAF_NODE	270:15	270:15	8	*
LEAF_NODE	270:16	270:16	8	)
FIELD	270:17	270:17	8	0
LEAF_NODE	270:17	270:17	9	0
LEAF_NODE	270:18	270:18	8	)
LEAF_NODE	270:19	270:19	6	;
EXPR_STATEMENT	274:1	274:14	3	m |= O_BINARY ;
EXPR	274:1	274:1	4	m |= O_BINARY
ASSIGN	274:1	274:6	5	m |= O_BINARY
LVAL	274:1	274:1	6	m
FIELD	274:1	274:1	7	m
LEAF_NODE	274:1	274:1	8	m
ASSIGN_OP	274:3	274:3	6	|=
LEAF_NODE	274:3	274:3	7	|=
RVAL	274:6	274:6	6	O_BINARY
FIELD	274:6	274:6	7	O_BINARY
LEAF_NODE	274:6	274:6	8	O_BINARY
LEAF_NODE	274:14	274:14	4	;
EXPR_STATEMENT	277:1	277:27	3	fd = _wopen ( name , m , 0666 ) ;
EXPR	277:1	277:1	4	fd = _wopen ( name , m , 0666 )
ASSIGN	277:1	277:6	5	fd = _wopen ( name , m , 0666 )
LVAL	277:1	277:1	6	fd
FIELD	277:1	277:1	7	fd
LEAF_NODE	277:1	277:1	8	fd
ASSIGN_OP	277:4	277:4	6	=
LEAF_NODE	277:4	277:4	7	=
RVAL	277:6	277:6	6	_wopen ( name , m , 0666 )
FUNCTION_CALL	277:6	277:26	7	_wopen ( name , m , 0666 )
CALLEE	277:6	277:6	8	_wopen
LEAF_NODE	277:6	277:6	9	_wopen
LEAF_NODE	277:12	277:12	8	(
ARGUMENT	277:13	277:13	8	name
FIELD	277:13	277:13	9	name
LEAF_NODE	277:13	277:13	10	name
LEAF_NODE	277:17	277:17	8	,
ARGUMENT	277:19	277:19	8	m
FIELD	277:19	277:19	9	m
LEAF_NODE	277:19	277:19	10	m
LEAF_NODE	277:20	277:20	8	,
ARGUMENT	277:22	277:22	8	0666
FIELD	277:22	277:22	9	0666
LEAF_NODE	277:22	277:22	10	0666
LEAF_NODE	277:26	277:26	8	)
LEAF_NODE	277:27	277:27	4	;
SELECTION	278:1	278:13	3	
KEYWORD	278:1	278:1	4	if
LEAF_NODE	278:1	278:1	5	if
LEAF_NODE	278:4	278:4	4	(
CONDITION	278:5	278:5	4	fd < 0
EXPR	278:5	278:10	5	fd < 0
FIELD	278:5	278:5	6	fd
LEAF_NODE	278:5	278:5	7	fd
REL_OPERATOR	278:8	278:8	6	<
LEAF_NODE	278:8	278:8	7	<
FIELD	278:10	278:10	6	0
LEAF_NODE	278:10	278:10	7	0
LEAF_NODE	278:11	278:11	4	)
STATEMENTS	278:13	281:1	4	
LEAF_NODE	278:13	278:13	5	{
STATEMENTS	279:2	280:2	5	
EXPR_STATEMENT	279:2	279:51	6	TIFFErrorExt ( 0 , module , "%ls: Cannot open" , name ) ;
EXPR	279:2	279:2	7	TIFFErrorExt ( 0 , module , "%ls: Cannot open" , name )
FUNCTION_CALL	279:2	279:50	8	TIFFErrorExt ( 0 , module , "%ls: Cannot open" , name )
CALLEE	279:2	279:2	9	TIFFErrorExt
LEAF_NODE	279:2	279:2	10	TIFFErrorExt
LEAF_NODE	279:14	279:14	9	(
ARGUMENT	279:15	279:15	9	0
FIELD	279:15	279:15	10	0
LEAF_NODE	279:15	279:15	11	0
LEAF_NODE	279:16	279:16	9	,
ARGUMENT	279:18	279:18	9	module
FIELD	279:18	279:18	10	module
LEAF_NODE	279:18	279:18	11	module
LEAF_NODE	279:24	279:24	9	,
ARGUMENT	279:26	279:26	9	"%ls: Cannot open"
FIELD	279:26	279:26	10	"%ls: Cannot open"
LEAF_NODE	279:26	279:26	11	"%ls: Cannot open"
LEAF_NODE	279:44	279:44	9	,
ARGUMENT	279:46	279:46	9	name
FIELD	279:46	279:46	10	name
LEAF_NODE	279:46	279:46	11	name
LEAF_NODE	279:50	279:50	9	)
LEAF_NODE	279:51	279:51	7	;
JUMP_STATEMENT	280:2	280:20	6	return ( ( TIFF * ) 0 ) ;
KEYWORD	280:2	280:2	7	return
LEAF_NODE	280:2	280:2	8	return
DESTINATION	280:9	280:9	7	( ( TIFF * ) 0 )
EXPR	280:9	280:19	8	( ( TIFF * ) 0 )
LEAF_NODE	280:9	280:9	9	(
LEAF_NODE	280:10	280:10	9	(
TYPE_NAME	280:11	280:11	9	TIFF
LEAF_NODE	280:11	280:11	10	TIFF
LEAF_NODE	280:16	280:16	9	*
LEAF_NODE	280:17	280:17	9	)
FIELD	280:18	280:18	9	0
LEAF_NODE	280:18	280:18	10	0
LEAF_NODE	280:19	280:19	9	)
LEAF_NODE	280:20	280:20	7	;
LEAF_NODE	281:1	281:1	5	}
EXPR_STATEMENT	283:1	283:14	3	mbname = NULL ;
EXPR	283:1	283:1	4	mbname = NULL
ASSIGN	283:1	283:10	5	mbname = NULL
LVAL	283:1	283:1	6	mbname
FIELD	283:1	283:1	7	mbname
LEAF_NODE	283:1	283:1	8	mbname
ASSIGN_OP	283:8	283:8	6	=
LEAF_NODE	283:8	283:8	7	=
RVAL	283:10	283:10	6	NULL
FIELD	283:10	283:10	7	NULL
LEAF_NODE	283:10	283:10	8	NULL
LEAF_NODE	283:14	283:14	4	;
EXPR_STATEMENT	284:1	284:71	3	mbsize = WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL ) ;
EXPR	284:1	284:1	4	mbsize = WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
ASSIGN	284:1	284:10	5	mbsize = WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
LVAL	284:1	284:1	6	mbsize
FIELD	284:1	284:1	7	mbsize
LEAF_NODE	284:1	284:1	8	mbsize
ASSIGN_OP	284:8	284:8	6	=
LEAF_NODE	284:8	284:8	7	=
RVAL	284:10	284:10	6	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
FUNCTION_CALL	284:10	284:70	7	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , NULL , 0 , NULL , NULL )
CALLEE	284:10	284:10	8	WideCharToMultiByte
LEAF_NODE	284:10	284:10	9	WideCharToMultiByte
LEAF_NODE	284:29	284:29	8	(
ARGUMENT	284:30	284:30	8	CP_ACP
FIELD	284:30	284:30	9	CP_ACP
LEAF_NODE	284:30	284:30	10	CP_ACP
LEAF_NODE	284:36	284:36	8	,
ARGUMENT	284:38	284:38	8	0
FIELD	284:38	284:38	9	0
LEAF_NODE	284:38	284:38	10	0
LEAF_NODE	284:39	284:39	8	,
ARGUMENT	284:41	284:41	8	name
FIELD	284:41	284:41	9	name
LEAF_NODE	284:41	284:41	10	name
LEAF_NODE	284:45	284:45	8	,
ARGUMENT	284:47	284:47	8	- 1
UNARY_EXPR	284:47	284:48	9	- 1
UNARY_OPERATOR	284:47	284:47	10	-
LEAF_NODE	284:47	284:47	11	-
FIELD	284:48	284:48	10	1
LEAF_NODE	284:48	284:48	11	1
LEAF_NODE	284:49	284:49	8	,
ARGUMENT	284:51	284:51	8	NULL
FIELD	284:51	284:51	9	NULL
LEAF_NODE	284:51	284:51	10	NULL
LEAF_NODE	284:55	284:55	8	,
ARGUMENT	284:57	284:57	8	0
FIELD	284:57	284:57	9	0
LEAF_NODE	284:57	284:57	10	0
LEAF_NODE	284:58	284:58	8	,
ARGUMENT	284:60	284:60	8	NULL
FIELD	284:60	284:60	9	NULL
LEAF_NODE	284:60	284:60	10	NULL
LEAF_NODE	284:64	284:64	8	,
ARGUMENT	284:66	284:66	8	NULL
FIELD	284:66	284:66	9	NULL
LEAF_NODE	284:66	284:66	10	NULL
LEAF_NODE	284:70	284:70	8	)
LEAF_NODE	284:71	284:71	4	;
SELECTION	285:1	285:17	3	
KEYWORD	285:1	285:1	4	if
LEAF_NODE	285:1	285:1	5	if
LEAF_NODE	285:4	285:4	4	(
CONDITION	285:5	285:5	4	mbsize > 0
EXPR	285:5	285:14	5	mbsize > 0
FIELD	285:5	285:5	6	mbsize
LEAF_NODE	285:5	285:5	7	mbsize
REL_OPERATOR	285:12	285:12	6	>
LEAF_NODE	285:12	285:12	7	>
FIELD	285:14	285:14	6	0
LEAF_NODE	285:14	285:14	7	0
LEAF_NODE	285:15	285:15	4	)
STATEMENTS	285:17	295:1	4	
LEAF_NODE	285:17	285:17	5	{
STATEMENTS	286:2	293:2	5	
EXPR_STATEMENT	286:2	286:30	6	mbname = _TIFFmalloc ( mbsize ) ;
EXPR	286:2	286:2	7	mbname = _TIFFmalloc ( mbsize )
ASSIGN	286:2	286:11	8	mbname = _TIFFmalloc ( mbsize )
LVAL	286:2	286:2	9	mbname
FIELD	286:2	286:2	10	mbname
LEAF_NODE	286:2	286:2	11	mbname
ASSIGN_OP	286:9	286:9	9	=
LEAF_NODE	286:9	286:9	10	=
RVAL	286:11	286:11	9	_TIFFmalloc ( mbsize )
FUNCTION_CALL	286:11	286:29	10	_TIFFmalloc ( mbsize )
CALLEE	286:11	286:11	11	_TIFFmalloc
LEAF_NODE	286:11	286:11	12	_TIFFmalloc
LEAF_NODE	286:22	286:22	11	(
ARGUMENT	286:23	286:23	11	mbsize
FIELD	286:23	286:23	12	mbsize
LEAF_NODE	286:23	286:23	13	mbsize
LEAF_NODE	286:29	286:29	11	)
LEAF_NODE	286:30	286:30	7	;
SELECTION	287:2	287:15	6	
KEYWORD	287:2	287:2	7	if
LEAF_NODE	287:2	287:2	8	if
LEAF_NODE	287:5	287:5	7	(
CONDITION	287:6	287:6	7	! mbname
EXPR	287:6	287:6	8	! mbname
UNARY_EXPR	287:6	287:7	9	! mbname
UNARY_OPERATOR	287:6	287:6	10	!
LEAF_NODE	287:6	287:6	11	!
FIELD	287:7	287:7	10	mbname
LEAF_NODE	287:7	287:7	11	mbname
LEAF_NODE	287:13	287:13	7	)
STATEMENTS	287:15	291:2	7	
LEAF_NODE	287:15	287:15	8	{
STATEMENTS	288:3	290:3	8	
EXPR_STATEMENT	288:3	289:57	9	TIFFErrorExt ( 0 , module , "Can't allocate space for filename conversion buffer" ) ;
EXPR	288:3	288:3	10	TIFFErrorExt ( 0 , module , "Can't allocate space for filename conversion buffer" )
FUNCTION_CALL	288:3	289:56	11	TIFFErrorExt ( 0 , module , "Can't allocate space for filename conversion buffer" )
CALLEE	288:3	288:3	12	TIFFErrorExt
LEAF_NODE	288:3	288:3	13	TIFFErrorExt
LEAF_NODE	288:15	288:15	12	(
ARGUMENT	288:16	288:16	12	0
FIELD	288:16	288:16	13	0
LEAF_NODE	288:16	288:16	14	0
LEAF_NODE	288:17	288:17	12	,
ARGUMENT	288:19	288:19	12	module
FIELD	288:19	288:19	13	module
LEAF_NODE	288:19	288:19	14	module
LEAF_NODE	288:25	288:25	12	,
ARGUMENT	289:3	289:3	12	"Can't allocate space for filename conversion buffer"
FIELD	289:3	289:3	13	"Can't allocate space for filename conversion buffer"
LEAF_NODE	289:3	289:3	14	"Can't allocate space for filename conversion buffer"
LEAF_NODE	289:56	289:56	12	)
LEAF_NODE	289:57	289:57	10	;
JUMP_STATEMENT	290:3	290:20	9	return ( ( TIFF * ) 0 ) ;
KEYWORD	290:3	290:3	10	return
LEAF_NODE	290:3	290:3	11	return
DESTINATION	290:10	290:10	10	( ( TIFF * ) 0 )
EXPR	290:10	290:19	11	( ( TIFF * ) 0 )
LEAF_NODE	290:10	290:10	12	(
LEAF_NODE	290:11	290:11	12	(
TYPE_NAME	290:12	290:12	12	TIFF
LEAF_NODE	290:12	290:12	13	TIFF
LEAF_NODE	290:16	290:16	12	*
LEAF_NODE	290:17	290:17	12	)
FIELD	290:18	290:18	12	0
LEAF_NODE	290:18	290:18	13	0
LEAF_NODE	290:19	290:19	12	)
LEAF_NODE	290:20	290:20	10	;
LEAF_NODE	291:2	291:2	8	}
EXPR_STATEMENT	293:2	294:19	6	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , mbname , mbsize , NULL , NULL ) ;
EXPR	293:2	293:2	7	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , mbname , mbsize , NULL , NULL )
FUNCTION_CALL	293:2	294:18	8	WideCharToMultiByte ( CP_ACP , 0 , name , - 1 , mbname , mbsize , NULL , NULL )
CALLEE	293:2	293:2	9	WideCharToMultiByte
LEAF_NODE	293:2	293:2	10	WideCharToMultiByte
LEAF_NODE	293:21	293:21	9	(
ARGUMENT	293:22	293:22	9	CP_ACP
FIELD	293:22	293:22	10	CP_ACP
LEAF_NODE	293:22	293:22	11	CP_ACP
LEAF_NODE	293:28	293:28	9	,
ARGUMENT	293:30	293:30	9	0
FIELD	293:30	293:30	10	0
LEAF_NODE	293:30	293:30	11	0
LEAF_NODE	293:31	293:31	9	,
ARGUMENT	293:33	293:33	9	name
FIELD	293:33	293:33	10	name
LEAF_NODE	293:33	293:33	11	name
LEAF_NODE	293:37	293:37	9	,
ARGUMENT	293:39	293:39	9	- 1
UNARY_EXPR	293:39	293:40	10	- 1
UNARY_OPERATOR	293:39	293:39	11	-
LEAF_NODE	293:39	293:39	12	-
FIELD	293:40	293:40	11	1
LEAF_NODE	293:40	293:40	12	1
LEAF_NODE	293:41	293:41	9	,
ARGUMENT	293:43	293:43	9	mbname
FIELD	293:43	293:43	10	mbname
LEAF_NODE	293:43	293:43	11	mbname
LEAF_NODE	293:49	293:49	9	,
ARGUMENT	293:51	293:51	9	mbsize
FIELD	293:51	293:51	10	mbsize
LEAF_NODE	293:51	293:51	11	mbsize
LEAF_NODE	293:57	293:57	9	,
ARGUMENT	294:8	294:8	9	NULL
FIELD	294:8	294:8	10	NULL
LEAF_NODE	294:8	294:8	11	NULL
LEAF_NODE	294:12	294:12	9	,
ARGUMENT	294:14	294:14	9	NULL
FIELD	294:14	294:14	10	NULL
LEAF_NODE	294:14	294:14	11	NULL
LEAF_NODE	294:18	294:18	9	)
LEAF_NODE	294:19	294:19	7	;
LEAF_NODE	295:1	295:1	5	}
EXPR_STATEMENT	297:1	298:9	3	tif = TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode ) ;
EXPR	297:1	297:1	4	tif = TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
ASSIGN	297:1	297:7	5	tif = TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
LVAL	297:1	297:1	6	tif
FIELD	297:1	297:1	7	tif
LEAF_NODE	297:1	297:1	8	tif
ASSIGN_OP	297:5	297:5	6	=
LEAF_NODE	297:5	297:5	7	=
RVAL	297:7	297:7	6	TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
FUNCTION_CALL	297:7	298:8	7	TIFFFdOpen ( ( int ) fd , ( mbname != NULL ) ? mbname : "<unknown>" , mode )
CALLEE	297:7	297:7	8	TIFFFdOpen
LEAF_NODE	297:7	297:7	9	TIFFFdOpen
LEAF_NODE	297:17	297:17	8	(
ARGUMENT	297:18	297:23	8	( int ) fd
LEAF_NODE	297:18	297:18	9	(
TYPE_NAME	297:19	297:19	9	int
LEAF_NODE	297:19	297:19	10	int
LEAF_NODE	297:22	297:22	9	)
FIELD	297:23	297:23	9	fd
LEAF_NODE	297:23	297:23	10	fd
LEAF_NODE	297:25	297:25	8	,
ARGUMENT	297:27	297:27	8	( mbname != NULL ) ? mbname : "<unknown>"
COND_EXPR	297:27	297:55	9	( mbname != NULL ) ? mbname : "<unknown>"
CONDITION	297:27	297:42	10	( mbname != NULL )
LEAF_NODE	297:27	297:27	11	(
FIELD	297:28	297:28	11	mbname
LEAF_NODE	297:28	297:28	12	mbname
EQ_OPERATOR	297:35	297:35	11	!=
LEAF_NODE	297:35	297:35	12	!=
FIELD	297:38	297:38	11	NULL
LEAF_NODE	297:38	297:38	12	NULL
LEAF_NODE	297:42	297:42	11	)
LEAF_NODE	297:44	297:44	10	?
EXPR	297:46	297:46	10	mbname
FIELD	297:46	297:46	11	mbname
LEAF_NODE	297:46	297:46	12	mbname
LEAF_NODE	297:53	297:53	10	:
FIELD	297:55	297:55	10	"<unknown>"
LEAF_NODE	297:55	297:55	11	"<unknown>"
LEAF_NODE	297:66	297:66	8	,
ARGUMENT	298:4	298:4	8	mode
FIELD	298:4	298:4	9	mode
LEAF_NODE	298:4	298:4	10	mode
LEAF_NODE	298:8	298:8	8	)
LEAF_NODE	298:9	298:9	4	;
EXPR_STATEMENT	300:1	300:18	3	_TIFFfree ( mbname ) ;
EXPR	300:1	300:1	4	_TIFFfree ( mbname )
FUNCTION_CALL	300:1	300:17	5	_TIFFfree ( mbname )
CALLEE	300:1	300:1	6	_TIFFfree
LEAF_NODE	300:1	300:1	7	_TIFFfree
LEAF_NODE	300:10	300:10	6	(
ARGUMENT	300:11	300:11	6	mbname
FIELD	300:11	300:11	7	mbname
LEAF_NODE	300:11	300:11	8	mbname
LEAF_NODE	300:17	300:17	6	)
LEAF_NODE	300:18	300:18	4	;
SELECTION	302:1	303:2	3	
KEYWORD	302:1	302:1	4	if
LEAF_NODE	302:1	302:1	5	if
LEAF_NODE	302:3	302:3	4	(
CONDITION	302:4	302:4	4	! tif
EXPR	302:4	302:4	5	! tif
UNARY_EXPR	302:4	302:5	6	! tif
UNARY_OPERATOR	302:4	302:4	7	!
LEAF_NODE	302:4	302:4	8	!
FIELD	302:5	302:5	7	tif
LEAF_NODE	302:5	302:5	8	tif
LEAF_NODE	302:8	302:8	4	)
STATEMENTS	303:2	303:2	4	
EXPR_STATEMENT	303:2	303:11	5	close ( fd ) ;
EXPR	303:2	303:2	6	close ( fd )
FUNCTION_CALL	303:2	303:10	7	close ( fd )
CALLEE	303:2	303:2	8	close
LEAF_NODE	303:2	303:2	9	close
LEAF_NODE	303:7	303:7	8	(
ARGUMENT	303:8	303:8	8	fd
FIELD	303:8	303:8	9	fd
LEAF_NODE	303:8	303:8	10	fd
LEAF_NODE	303:10	303:10	8	)
LEAF_NODE	303:11	303:11	6	;
JUMP_STATEMENT	304:1	304:11	3	return tif ;
KEYWORD	304:1	304:1	4	return
LEAF_NODE	304:1	304:1	5	return
DESTINATION	304:8	304:8	4	tif
EXPR	304:8	304:8	5	tif
FIELD	304:8	304:8	6	tif
LEAF_NODE	304:8	304:8	7	tif
LEAF_NODE	304:11	304:11	4	;
LEAF_NODE	305:0	305:0	2	}
FUNCTION_DEF	308:0	315:0	1	
RETURN_TYPE	308:0	308:4	2	void *
TYPE_NAME	308:0	308:0	3	void
LEAF_NODE	308:0	308:0	4	void
LEAF_NODE	308:4	308:4	3	*
FUNCTION_NAME	309:0	309:0	2	_TIFFmalloc
LEAF_NODE	309:0	309:0	3	_TIFFmalloc
PARAMETER_LIST	309:11	309:22	2	( tmsize_t s )
LEAF_NODE	309:11	309:11	3	(
PARAMETER_DECL	309:12	309:21	3	tmsize_t s
TYPE	309:12	309:12	4	tmsize_t
TYPE_NAME	309:12	309:12	5	tmsize_t
LEAF_NODE	309:12	309:12	6	tmsize_t
NAME	309:21	309:21	4	s
LEAF_NODE	309:21	309:21	5	s
LEAF_NODE	309:22	309:22	3	)
LEAF_NODE	310:0	310:0	2	{
STATEMENTS	311:8	314:1	2	
SELECTION	311:8	312:16	3	
KEYWORD	311:8	311:8	4	if
LEAF_NODE	311:8	311:8	5	if
LEAF_NODE	311:11	311:11	4	(
CONDITION	311:12	311:12	4	s == 0
EXPR	311:12	311:17	5	s == 0
FIELD	311:12	311:12	6	s
LEAF_NODE	311:12	311:12	7	s
EQ_OPERATOR	311:14	311:14	6	==
LEAF_NODE	311:14	311:14	7	==
FIELD	311:17	311:17	6	0
LEAF_NODE	311:17	311:17	7	0
LEAF_NODE	311:18	311:18	4	)
STATEMENTS	312:16	312:16	4	
JUMP_STATEMENT	312:16	312:38	5	return ( ( void * ) NULL ) ;
KEYWORD	312:16	312:16	6	return
LEAF_NODE	312:16	312:16	7	return
DESTINATION	312:23	312:23	6	( ( void * ) NULL )
EXPR	312:23	312:37	7	( ( void * ) NULL )
LEAF_NODE	312:23	312:23	8	(
LEAF_NODE	312:24	312:24	8	(
TYPE_NAME	312:25	312:25	8	void
LEAF_NODE	312:25	312:25	9	void
LEAF_NODE	312:30	312:30	8	*
LEAF_NODE	312:31	312:31	8	)
FIELD	312:33	312:33	8	NULL
LEAF_NODE	312:33	312:33	9	NULL
LEAF_NODE	312:37	312:37	8	)
LEAF_NODE	312:38	312:38	6	;
JUMP_STATEMENT	314:1	314:28	3	return ( malloc ( ( size_t ) s ) ) ;
KEYWORD	314:1	314:1	4	return
LEAF_NODE	314:1	314:1	5	return
DESTINATION	314:8	314:8	4	( malloc ( ( size_t ) s ) )
EXPR	314:8	314:27	5	( malloc ( ( size_t ) s ) )
LEAF_NODE	314:8	314:8	6	(
FUNCTION_CALL	314:9	314:26	6	malloc ( ( size_t ) s )
CALLEE	314:9	314:9	7	malloc
LEAF_NODE	314:9	314:9	8	malloc
LEAF_NODE	314:15	314:15	7	(
ARGUMENT	314:16	314:25	7	( size_t ) s
LEAF_NODE	314:16	314:16	8	(
TYPE_NAME	314:17	314:17	8	size_t
LEAF_NODE	314:17	314:17	9	size_t
LEAF_NODE	314:23	314:23	8	)
FIELD	314:25	314:25	8	s
LEAF_NODE	314:25	314:25	9	s
LEAF_NODE	314:26	314:26	7	)
LEAF_NODE	314:27	314:27	6	)
LEAF_NODE	314:28	314:28	4	;
LEAF_NODE	315:0	315:0	2	}
FUNCTION_DEF	317:0	323:0	1	
RETURN_TYPE	317:0	317:4	2	void *
TYPE_NAME	317:0	317:0	3	void
LEAF_NODE	317:0	317:0	4	void
LEAF_NODE	317:4	317:4	3	*
FUNCTION_NAME	317:6	317:6	2	_TIFFcalloc
LEAF_NODE	317:6	317:6	3	_TIFFcalloc
PARAMETER_LIST	317:17	317:46	2	( tmsize_t nmemb , tmsize_t siz )
LEAF_NODE	317:17	317:17	3	(
PARAMETER_DECL	317:18	317:27	3	tmsize_t nmemb
TYPE	317:18	317:18	4	tmsize_t
TYPE_NAME	317:18	317:18	5	tmsize_t
LEAF_NODE	317:18	317:18	6	tmsize_t
NAME	317:27	317:27	4	nmemb
LEAF_NODE	317:27	317:27	5	nmemb
LEAF_NODE	317:32	317:32	3	,
PARAMETER_DECL	317:34	317:43	3	tmsize_t siz
TYPE	317:34	317:34	4	tmsize_t
TYPE_NAME	317:34	317:34	5	tmsize_t
LEAF_NODE	317:34	317:34	6	tmsize_t
NAME	317:43	317:43	4	siz
LEAF_NODE	317:43	317:43	5	siz
LEAF_NODE	317:46	317:46	3	)
LEAF_NODE	318:0	318:0	2	{
STATEMENTS	319:4	322:4	2	
SELECTION	319:4	320:8	3	
KEYWORD	319:4	319:4	4	if
LEAF_NODE	319:4	319:4	5	if
LEAF_NODE	319:6	319:6	4	(
CONDITION	319:8	319:8	4	nmemb == 0 || siz == 0
EXPR	319:8	319:8	5	nmemb == 0 || siz == 0
OR	319:8	319:22	6	nmemb == 0 || siz == 0
EXPR	319:8	319:17	7	nmemb == 0
FIELD	319:8	319:8	8	nmemb
LEAF_NODE	319:8	319:8	9	nmemb
EQ_OPERATOR	319:14	319:14	8	==
LEAF_NODE	319:14	319:14	9	==
FIELD	319:17	319:17	8	0
LEAF_NODE	319:17	319:17	9	0
LEAF_NODE	319:19	319:19	7	||
EXPR	319:22	319:29	7	siz == 0
FIELD	319:22	319:22	8	siz
LEAF_NODE	319:22	319:22	9	siz
EQ_OPERATOR	319:26	319:26	8	==
LEAF_NODE	319:26	319:26	9	==
FIELD	319:29	319:29	8	0
LEAF_NODE	319:29	319:29	9	0
LEAF_NODE	319:31	319:31	4	)
STATEMENTS	320:8	320:8	4	
JUMP_STATEMENT	320:8	320:30	5	return ( ( void * ) NULL ) ;
KEYWORD	320:8	320:8	6	return
LEAF_NODE	320:8	320:8	7	return
DESTINATION	320:15	320:15	6	( ( void * ) NULL )
EXPR	320:15	320:29	7	( ( void * ) NULL )
LEAF_NODE	320:15	320:15	8	(
LEAF_NODE	320:16	320:16	8	(
TYPE_NAME	320:17	320:17	8	void
LEAF_NODE	320:17	320:17	9	void
LEAF_NODE	320:22	320:22	8	*
LEAF_NODE	320:23	320:23	8	)
FIELD	320:25	320:25	8	NULL
LEAF_NODE	320:25	320:25	9	NULL
LEAF_NODE	320:29	320:29	8	)
LEAF_NODE	320:30	320:30	6	;
JUMP_STATEMENT	322:4	322:46	3	return calloc ( ( size_t ) nmemb , ( size_t ) siz ) ;
KEYWORD	322:4	322:4	4	return
LEAF_NODE	322:4	322:4	5	return
DESTINATION	322:11	322:11	4	calloc ( ( size_t ) nmemb , ( size_t ) siz )
EXPR	322:11	322:11	5	calloc ( ( size_t ) nmemb , ( size_t ) siz )
FUNCTION_CALL	322:11	322:45	6	calloc ( ( size_t ) nmemb , ( size_t ) siz )
CALLEE	322:11	322:11	7	calloc
LEAF_NODE	322:11	322:11	8	calloc
LEAF_NODE	322:17	322:17	7	(
ARGUMENT	322:18	322:27	7	( size_t ) nmemb
LEAF_NODE	322:18	322:18	8	(
TYPE_NAME	322:19	322:19	8	size_t
LEAF_NODE	322:19	322:19	9	size_t
LEAF_NODE	322:25	322:25	8	)
FIELD	322:27	322:27	8	nmemb
LEAF_NODE	322:27	322:27	9	nmemb
LEAF_NODE	322:32	322:32	7	,
ARGUMENT	322:34	322:42	7	( size_t ) siz
LEAF_NODE	322:34	322:34	8	(
TYPE_NAME	322:35	322:35	8	size_t
LEAF_NODE	322:35	322:35	9	size_t
LEAF_NODE	322:41	322:41	8	)
FIELD	322:42	322:42	8	siz
LEAF_NODE	322:42	322:42	9	siz
LEAF_NODE	322:45	322:45	7	)
LEAF_NODE	322:46	322:46	4	;
LEAF_NODE	323:0	323:0	2	}
FUNCTION_DEF	325:0	329:0	1	
RETURN_TYPE	325:0	325:0	2	void
TYPE_NAME	325:0	325:0	3	void
LEAF_NODE	325:0	325:0	4	void
FUNCTION_NAME	326:0	326:0	2	_TIFFfree
LEAF_NODE	326:0	326:0	3	_TIFFfree
PARAMETER_LIST	326:9	326:17	2	( void * p )
LEAF_NODE	326:9	326:9	3	(
PARAMETER_DECL	326:10	326:16	3	void * p
TYPE	326:10	326:14	4	void *
TYPE_NAME	326:10	326:10	5	void
LEAF_NODE	326:10	326:10	6	void
POINTER	326:14	326:14	5	*
LEAF_NODE	326:14	326:14	6	*
NAME	326:16	326:16	4	p
LEAF_NODE	326:16	326:16	5	p
LEAF_NODE	326:17	326:17	3	)
LEAF_NODE	327:0	327:0	2	{
STATEMENTS	328:1	328:1	2	
EXPR_STATEMENT	328:1	328:8	3	free ( p ) ;
EXPR	328:1	328:1	4	free ( p )
FUNCTION_CALL	328:1	328:7	5	free ( p )
CALLEE	328:1	328:1	6	free
LEAF_NODE	328:1	328:1	7	free
LEAF_NODE	328:5	328:5	6	(
ARGUMENT	328:6	328:6	6	p
FIELD	328:6	328:6	7	p
LEAF_NODE	328:6	328:6	8	p
LEAF_NODE	328:7	328:7	6	)
LEAF_NODE	328:8	328:8	4	;
LEAF_NODE	329:0	329:0	2	}
FUNCTION_DEF	331:0	335:0	1	
RETURN_TYPE	331:0	331:4	2	void *
TYPE_NAME	331:0	331:0	3	void
LEAF_NODE	331:0	331:0	4	void
LEAF_NODE	331:4	331:4	3	*
FUNCTION_NAME	332:0	332:0	2	_TIFFrealloc
LEAF_NODE	332:0	332:0	3	_TIFFrealloc
PARAMETER_LIST	332:12	332:32	2	( void * p , tmsize_t s )
LEAF_NODE	332:12	332:12	3	(
PARAMETER_DECL	332:13	332:19	3	void * p
TYPE	332:13	332:17	4	void *
TYPE_NAME	332:13	332:13	5	void
LEAF_NODE	332:13	332:13	6	void
POINTER	332:17	332:17	5	*
LEAF_NODE	332:17	332:17	6	*
NAME	332:19	332:19	4	p
LEAF_NODE	332:19	332:19	5	p
LEAF_NODE	332:20	332:20	3	,
PARAMETER_DECL	332:22	332:31	3	tmsize_t s
TYPE	332:22	332:22	4	tmsize_t
TYPE_NAME	332:22	332:22	5	tmsize_t
LEAF_NODE	332:22	332:22	6	tmsize_t
NAME	332:31	332:31	4	s
LEAF_NODE	332:31	332:31	5	s
LEAF_NODE	332:32	332:32	3	)
LEAF_NODE	333:0	333:0	2	{
STATEMENTS	334:1	334:1	2	
JUMP_STATEMENT	334:1	334:32	3	return ( realloc ( p , ( size_t ) s ) ) ;
KEYWORD	334:1	334:1	4	return
LEAF_NODE	334:1	334:1	5	return
DESTINATION	334:8	334:8	4	( realloc ( p , ( size_t ) s ) )
EXPR	334:8	334:31	5	( realloc ( p , ( size_t ) s ) )
LEAF_NODE	334:8	334:8	6	(
FUNCTION_CALL	334:9	334:30	6	realloc ( p , ( size_t ) s )
CALLEE	334:9	334:9	7	realloc
LEAF_NODE	334:9	334:9	8	realloc
LEAF_NODE	334:16	334:16	7	(
ARGUMENT	334:17	334:17	7	p
FIELD	334:17	334:17	8	p
LEAF_NODE	334:17	334:17	9	p
LEAF_NODE	334:18	334:18	7	,
ARGUMENT	334:20	334:29	7	( size_t ) s
LEAF_NODE	334:20	334:20	8	(
TYPE_NAME	334:21	334:21	8	size_t
LEAF_NODE	334:21	334:21	9	size_t
LEAF_NODE	334:27	334:27	8	)
FIELD	334:29	334:29	8	s
LEAF_NODE	334:29	334:29	9	s
LEAF_NODE	334:30	334:30	7	)
LEAF_NODE	334:31	334:31	6	)
LEAF_NODE	334:32	334:32	4	;
LEAF_NODE	335:0	335:0	2	}
FUNCTION_DEF	337:0	341:0	1	
RETURN_TYPE	337:0	337:0	2	void
TYPE_NAME	337:0	337:0	3	void
LEAF_NODE	337:0	337:0	4	void
FUNCTION_NAME	338:0	338:0	2	_TIFFmemset
LEAF_NODE	338:0	338:0	3	_TIFFmemset
PARAMETER_LIST	338:11	338:38	2	( void * p , int v , tmsize_t c )
LEAF_NODE	338:11	338:11	3	(
PARAMETER_DECL	338:12	338:18	3	void * p
TYPE	338:12	338:16	4	void *
TYPE_NAME	338:12	338:12	5	void
LEAF_NODE	338:12	338:12	6	void
POINTER	338:16	338:16	5	*
LEAF_NODE	338:16	338:16	6	*
NAME	338:18	338:18	4	p
LEAF_NODE	338:18	338:18	5	p
LEAF_NODE	338:19	338:19	3	,
PARAMETER_DECL	338:21	338:25	3	int v
TYPE	338:21	338:21	4	int
TYPE_NAME	338:21	338:21	5	int
LEAF_NODE	338:21	338:21	6	int
NAME	338:25	338:25	4	v
LEAF_NODE	338:25	338:25	5	v
LEAF_NODE	338:26	338:26	3	,
PARAMETER_DECL	338:28	338:37	3	tmsize_t c
TYPE	338:28	338:28	4	tmsize_t
TYPE_NAME	338:28	338:28	5	tmsize_t
LEAF_NODE	338:28	338:28	6	tmsize_t
NAME	338:37	338:37	4	c
LEAF_NODE	338:37	338:37	5	c
LEAF_NODE	338:38	338:38	3	)
LEAF_NODE	339:0	339:0	2	{
STATEMENTS	340:1	340:1	2	
EXPR_STATEMENT	340:1	340:25	3	memset ( p , v , ( size_t ) c ) ;
EXPR	340:1	340:1	4	memset ( p , v , ( size_t ) c )
FUNCTION_CALL	340:1	340:24	5	memset ( p , v , ( size_t ) c )
CALLEE	340:1	340:1	6	memset
LEAF_NODE	340:1	340:1	7	memset
LEAF_NODE	340:7	340:7	6	(
ARGUMENT	340:8	340:8	6	p
FIELD	340:8	340:8	7	p
LEAF_NODE	340:8	340:8	8	p
LEAF_NODE	340:9	340:9	6	,
ARGUMENT	340:11	340:11	6	v
FIELD	340:11	340:11	7	v
LEAF_NODE	340:11	340:11	8	v
LEAF_NODE	340:12	340:12	6	,
ARGUMENT	340:14	340:23	6	( size_t ) c
LEAF_NODE	340:14	340:14	7	(
TYPE_NAME	340:15	340:15	7	size_t
LEAF_NODE	340:15	340:15	8	size_t
LEAF_NODE	340:21	340:21	7	)
FIELD	340:23	340:23	7	c
LEAF_NODE	340:23	340:23	8	c
LEAF_NODE	340:24	340:24	6	)
LEAF_NODE	340:25	340:25	4	;
LEAF_NODE	341:0	341:0	2	}
FUNCTION_DEF	343:0	347:0	1	
RETURN_TYPE	343:0	343:0	2	void
TYPE_NAME	343:0	343:0	3	void
LEAF_NODE	343:0	343:0	4	void
FUNCTION_NAME	344:0	344:0	2	_TIFFmemcpy
LEAF_NODE	344:0	344:0	3	_TIFFmemcpy
PARAMETER_LIST	344:11	344:46	2	( void * d , const void * s , tmsize_t c )
LEAF_NODE	344:11	344:11	3	(
PARAMETER_DECL	344:12	344:18	3	void * d
TYPE	344:12	344:16	4	void *
TYPE_NAME	344:12	344:12	5	void
LEAF_NODE	344:12	344:12	6	void
POINTER	344:16	344:16	5	*
LEAF_NODE	344:16	344:16	6	*
NAME	344:18	344:18	4	d
LEAF_NODE	344:18	344:18	5	d
LEAF_NODE	344:19	344:19	3	,
PARAMETER_DECL	344:21	344:33	3	const void * s
TYPE	344:21	344:31	4	const void *
TYPE_NAME	344:21	344:27	5	const void
LEAF_NODE	344:21	344:21	6	const
LEAF_NODE	344:27	344:27	6	void
POINTER	344:31	344:31	5	*
LEAF_NODE	344:31	344:31	6	*
NAME	344:33	344:33	4	s
LEAF_NODE	344:33	344:33	5	s
LEAF_NODE	344:34	344:34	3	,
PARAMETER_DECL	344:36	344:45	3	tmsize_t c
TYPE	344:36	344:36	4	tmsize_t
TYPE_NAME	344:36	344:36	5	tmsize_t
LEAF_NODE	344:36	344:36	6	tmsize_t
NAME	344:45	344:45	4	c
LEAF_NODE	344:45	344:45	5	c
LEAF_NODE	344:46	344:46	3	)
LEAF_NODE	345:0	345:0	2	{
STATEMENTS	346:1	346:1	2	
EXPR_STATEMENT	346:1	346:25	3	memcpy ( d , s , ( size_t ) c ) ;
EXPR	346:1	346:1	4	memcpy ( d , s , ( size_t ) c )
FUNCTION_CALL	346:1	346:24	5	memcpy ( d , s , ( size_t ) c )
CALLEE	346:1	346:1	6	memcpy
LEAF_NODE	346:1	346:1	7	memcpy
LEAF_NODE	346:7	346:7	6	(
ARGUMENT	346:8	346:8	6	d
FIELD	346:8	346:8	7	d
LEAF_NODE	346:8	346:8	8	d
LEAF_NODE	346:9	346:9	6	,
ARGUMENT	346:11	346:11	6	s
FIELD	346:11	346:11	7	s
LEAF_NODE	346:11	346:11	8	s
LEAF_NODE	346:12	346:12	6	,
ARGUMENT	346:14	346:23	6	( size_t ) c
LEAF_NODE	346:14	346:14	7	(
TYPE_NAME	346:15	346:15	7	size_t
LEAF_NODE	346:15	346:15	8	size_t
LEAF_NODE	346:21	346:21	7	)
FIELD	346:23	346:23	7	c
LEAF_NODE	346:23	346:23	8	c
LEAF_NODE	346:24	346:24	6	)
LEAF_NODE	346:25	346:25	4	;
LEAF_NODE	347:0	347:0	2	}
FUNCTION_DEF	349:0	353:0	1	
RETURN_TYPE	349:0	349:0	2	int
TYPE_NAME	349:0	349:0	3	int
LEAF_NODE	349:0	349:0	4	int
FUNCTION_NAME	350:0	350:0	2	_TIFFmemcmp
LEAF_NODE	350:0	350:0	3	_TIFFmemcmp
PARAMETER_LIST	350:11	350:54	2	( const void * p1 , const void * p2 , tmsize_t c )
LEAF_NODE	350:11	350:11	3	(
PARAMETER_DECL	350:12	350:24	3	const void * p1
TYPE	350:12	350:22	4	const void *
TYPE_NAME	350:12	350:18	5	const void
LEAF_NODE	350:12	350:12	6	const
LEAF_NODE	350:18	350:18	6	void
POINTER	350:22	350:22	5	*
LEAF_NODE	350:22	350:22	6	*
NAME	350:24	350:24	4	p1
LEAF_NODE	350:24	350:24	5	p1
LEAF_NODE	350:26	350:26	3	,
PARAMETER_DECL	350:28	350:40	3	const void * p2
TYPE	350:28	350:38	4	const void *
TYPE_NAME	350:28	350:34	5	const void
LEAF_NODE	350:28	350:28	6	const
LEAF_NODE	350:34	350:34	6	void
POINTER	350:38	350:38	5	*
LEAF_NODE	350:38	350:38	6	*
NAME	350:40	350:40	4	p2
LEAF_NODE	350:40	350:40	5	p2
LEAF_NODE	350:42	350:42	3	,
PARAMETER_DECL	350:44	350:53	3	tmsize_t c
TYPE	350:44	350:44	4	tmsize_t
TYPE_NAME	350:44	350:44	5	tmsize_t
LEAF_NODE	350:44	350:44	6	tmsize_t
NAME	350:53	350:53	4	c
LEAF_NODE	350:53	350:53	5	c
LEAF_NODE	350:54	350:54	3	)
LEAF_NODE	351:0	351:0	2	{
STATEMENTS	352:1	352:1	2	
JUMP_STATEMENT	352:1	352:36	3	return ( memcmp ( p1 , p2 , ( size_t ) c ) ) ;
KEYWORD	352:1	352:1	4	return
LEAF_NODE	352:1	352:1	5	return
DESTINATION	352:8	352:8	4	( memcmp ( p1 , p2 , ( size_t ) c ) )
EXPR	352:8	352:35	5	( memcmp ( p1 , p2 , ( size_t ) c ) )
LEAF_NODE	352:8	352:8	6	(
FUNCTION_CALL	352:9	352:34	6	memcmp ( p1 , p2 , ( size_t ) c )
CALLEE	352:9	352:9	7	memcmp
LEAF_NODE	352:9	352:9	8	memcmp
LEAF_NODE	352:15	352:15	7	(
ARGUMENT	352:16	352:16	7	p1
FIELD	352:16	352:16	8	p1
LEAF_NODE	352:16	352:16	9	p1
LEAF_NODE	352:18	352:18	7	,
ARGUMENT	352:20	352:20	7	p2
FIELD	352:20	352:20	8	p2
LEAF_NODE	352:20	352:20	9	p2
LEAF_NODE	352:22	352:22	7	,
ARGUMENT	352:24	352:33	7	( size_t ) c
LEAF_NODE	352:24	352:24	8	(
TYPE_NAME	352:25	352:25	8	size_t
LEAF_NODE	352:25	352:25	9	size_t
LEAF_NODE	352:31	352:31	8	)
FIELD	352:33	352:33	8	c
LEAF_NODE	352:33	352:33	9	c
LEAF_NODE	352:34	352:34	7	)
LEAF_NODE	352:35	352:35	6	)
LEAF_NODE	352:36	352:36	4	;
LEAF_NODE	353:0	353:0	2	}
FUNCTION_DEF	355:0	363:0	1	
RETURN_TYPE	355:0	355:7	2	static void
LEAF_NODE	355:0	355:0	3	static
TYPE_NAME	355:7	355:7	3	void
LEAF_NODE	355:7	355:7	4	void
FUNCTION_NAME	356:0	356:0	2	unixWarningHandler
LEAF_NODE	356:0	356:0	3	unixWarningHandler
PARAMETER_LIST	356:18	356:66	2	( const char * module , const char * fmt , va_list ap )
LEAF_NODE	356:18	356:18	3	(
PARAMETER_DECL	356:19	356:31	3	const char * module
TYPE	356:19	356:29	4	const char *
TYPE_NAME	356:19	356:25	5	const char
LEAF_NODE	356:19	356:19	6	const
LEAF_NODE	356:25	356:25	6	char
POINTER	356:29	356:29	5	*
LEAF_NODE	356:29	356:29	6	*
NAME	356:31	356:31	4	module
LEAF_NODE	356:31	356:31	5	module
LEAF_NODE	356:37	356:37	3	,
PARAMETER_DECL	356:39	356:51	3	const char * fmt
TYPE	356:39	356:49	4	const char *
TYPE_NAME	356:39	356:45	5	const char
LEAF_NODE	356:39	356:39	6	const
LEAF_NODE	356:45	356:45	6	char
POINTER	356:49	356:49	5	*
LEAF_NODE	356:49	356:49	6	*
NAME	356:51	356:51	4	fmt
LEAF_NODE	356:51	356:51	5	fmt
LEAF_NODE	356:54	356:54	3	,
PARAMETER_DECL	356:56	356:64	3	va_list ap
TYPE	356:56	356:56	4	va_list
TYPE_NAME	356:56	356:56	5	va_list
LEAF_NODE	356:56	356:56	6	va_list
NAME	356:64	356:64	4	ap
LEAF_NODE	356:64	356:64	5	ap
LEAF_NODE	356:66	356:66	3	)
LEAF_NODE	357:0	357:0	2	{
STATEMENTS	358:1	362:1	2	
SELECTION	358:1	359:2	3	
KEYWORD	358:1	358:1	4	if
LEAF_NODE	358:1	358:1	5	if
LEAF_NODE	358:4	358:4	4	(
CONDITION	358:5	358:5	4	module != NULL
EXPR	358:5	358:15	5	module != NULL
FIELD	358:5	358:5	6	module
LEAF_NODE	358:5	358:5	7	module
EQ_OPERATOR	358:12	358:12	6	!=
LEAF_NODE	358:12	358:12	7	!=
FIELD	358:15	358:15	6	NULL
LEAF_NODE	358:15	358:15	7	NULL
LEAF_NODE	358:19	358:19	4	)
STATEMENTS	359:2	359:2	4	
EXPR_STATEMENT	359:2	359:33	5	fprintf ( stderr , "%s: " , module ) ;
EXPR	359:2	359:2	6	fprintf ( stderr , "%s: " , module )
FUNCTION_CALL	359:2	359:32	7	fprintf ( stderr , "%s: " , module )
CALLEE	359:2	359:2	8	fprintf
LEAF_NODE	359:2	359:2	9	fprintf
LEAF_NODE	359:9	359:9	8	(
ARGUMENT	359:10	359:10	8	stderr
FIELD	359:10	359:10	9	stderr
LEAF_NODE	359:10	359:10	10	stderr
LEAF_NODE	359:16	359:16	8	,
ARGUMENT	359:18	359:18	8	"%s: "
FIELD	359:18	359:18	9	"%s: "
LEAF_NODE	359:18	359:18	10	"%s: "
LEAF_NODE	359:24	359:24	8	,
ARGUMENT	359:26	359:26	8	module
FIELD	359:26	359:26	9	module
LEAF_NODE	359:26	359:26	10	module
LEAF_NODE	359:32	359:32	8	)
LEAF_NODE	359:33	359:33	6	;
EXPR_STATEMENT	360:1	360:29	3	fprintf ( stderr , "Warning, " ) ;
EXPR	360:1	360:1	4	fprintf ( stderr , "Warning, " )
FUNCTION_CALL	360:1	360:28	5	fprintf ( stderr , "Warning, " )
CALLEE	360:1	360:1	6	fprintf
LEAF_NODE	360:1	360:1	7	fprintf
LEAF_NODE	360:8	360:8	6	(
ARGUMENT	360:9	360:9	6	stderr
FIELD	360:9	360:9	7	stderr
LEAF_NODE	360:9	360:9	8	stderr
LEAF_NODE	360:15	360:15	6	,
ARGUMENT	360:17	360:17	6	"Warning, "
FIELD	360:17	360:17	7	"Warning, "
LEAF_NODE	360:17	360:17	8	"Warning, "
LEAF_NODE	360:28	360:28	6	)
LEAF_NODE	360:29	360:29	4	;
EXPR_STATEMENT	361:1	361:26	3	vfprintf ( stderr , fmt , ap ) ;
EXPR	361:1	361:1	4	vfprintf ( stderr , fmt , ap )
FUNCTION_CALL	361:1	361:25	5	vfprintf ( stderr , fmt , ap )
CALLEE	361:1	361:1	6	vfprintf
LEAF_NODE	361:1	361:1	7	vfprintf
LEAF_NODE	361:9	361:9	6	(
ARGUMENT	361:10	361:10	6	stderr
FIELD	361:10	361:10	7	stderr
LEAF_NODE	361:10	361:10	8	stderr
LEAF_NODE	361:16	361:16	6	,
ARGUMENT	361:18	361:18	6	fmt
FIELD	361:18	361:18	7	fmt
LEAF_NODE	361:18	361:18	8	fmt
LEAF_NODE	361:21	361:21	6	,
ARGUMENT	361:23	361:23	6	ap
FIELD	361:23	361:23	7	ap
LEAF_NODE	361:23	361:23	8	ap
LEAF_NODE	361:25	361:25	6	)
LEAF_NODE	361:26	361:26	4	;
EXPR_STATEMENT	362:1	362:23	3	fprintf ( stderr , ".\n" ) ;
EXPR	362:1	362:1	4	fprintf ( stderr , ".\n" )
FUNCTION_CALL	362:1	362:22	5	fprintf ( stderr , ".\n" )
CALLEE	362:1	362:1	6	fprintf
LEAF_NODE	362:1	362:1	7	fprintf
LEAF_NODE	362:8	362:8	6	(
ARGUMENT	362:9	362:9	6	stderr
FIELD	362:9	362:9	7	stderr
LEAF_NODE	362:9	362:9	8	stderr
LEAF_NODE	362:15	362:15	6	,
ARGUMENT	362:17	362:17	6	".\n"
FIELD	362:17	362:17	7	".\n"
LEAF_NODE	362:17	362:17	8	".\n"
LEAF_NODE	362:22	362:22	6	)
LEAF_NODE	362:23	362:23	4	;
LEAF_NODE	363:0	363:0	2	}
SIMPLE_DECL	364:0	364:57	1	TIFFErrorHandler _TIFFwarningHandler ; _TIFFwarningHandler = unixWarningHandler ;
VAR_DECL	364:0	364:17	2	TIFFErrorHandler _TIFFwarningHandler ; _TIFFwarningHandler = unixWarningHandler
TYPE	364:0	364:0	3	TIFFErrorHandler
TYPE_NAME	364:0	364:0	4	TIFFErrorHandler
LEAF_NODE	364:0	364:0	5	TIFFErrorHandler
NAME	364:17	364:17	3	_TIFFwarningHandler
LEAF_NODE	364:17	364:17	4	_TIFFwarningHandler
LEAF_NODE	0:0	0:0	3	;
INIT	364:17	364:17	3	_TIFFwarningHandler = unixWarningHandler
ASSIGN	364:17	364:39	4	_TIFFwarningHandler = unixWarningHandler
LVAL	364:17	364:17	5	_TIFFwarningHandler
NAME	364:17	364:17	6	_TIFFwarningHandler
LEAF_NODE	364:17	364:17	7	_TIFFwarningHandler
ASSIGN_OP	364:37	364:37	5	=
LEAF_NODE	364:37	364:37	6	=
RVAL	364:39	364:39	5	unixWarningHandler
FIELD	364:39	364:39	6	unixWarningHandler
LEAF_NODE	364:39	364:39	7	unixWarningHandler
LEAF_NODE	364:57	364:57	2	;
FUNCTION_DEF	366:0	373:0	1	
RETURN_TYPE	366:0	366:7	2	static void
LEAF_NODE	366:0	366:0	3	static
TYPE_NAME	366:7	366:7	3	void
LEAF_NODE	366:7	366:7	4	void
FUNCTION_NAME	367:0	367:0	2	unixErrorHandler
LEAF_NODE	367:0	367:0	3	unixErrorHandler
PARAMETER_LIST	367:16	367:64	2	( const char * module , const char * fmt , va_list ap )
LEAF_NODE	367:16	367:16	3	(
PARAMETER_DECL	367:17	367:29	3	const char * module
TYPE	367:17	367:27	4	const char *
TYPE_NAME	367:17	367:23	5	const char
LEAF_NODE	367:17	367:17	6	const
LEAF_NODE	367:23	367:23	6	char
POINTER	367:27	367:27	5	*
LEAF_NODE	367:27	367:27	6	*
NAME	367:29	367:29	4	module
LEAF_NODE	367:29	367:29	5	module
LEAF_NODE	367:35	367:35	3	,
PARAMETER_DECL	367:37	367:49	3	const char * fmt
TYPE	367:37	367:47	4	const char *
TYPE_NAME	367:37	367:43	5	const char
LEAF_NODE	367:37	367:37	6	const
LEAF_NODE	367:43	367:43	6	char
POINTER	367:47	367:47	5	*
LEAF_NODE	367:47	367:47	6	*
NAME	367:49	367:49	4	fmt
LEAF_NODE	367:49	367:49	5	fmt
LEAF_NODE	367:52	367:52	3	,
PARAMETER_DECL	367:54	367:62	3	va_list ap
TYPE	367:54	367:54	4	va_list
TYPE_NAME	367:54	367:54	5	va_list
LEAF_NODE	367:54	367:54	6	va_list
NAME	367:62	367:62	4	ap
LEAF_NODE	367:62	367:62	5	ap
LEAF_NODE	367:64	367:64	3	)
LEAF_NODE	368:0	368:0	2	{
STATEMENTS	369:1	372:1	2	
SELECTION	369:1	370:2	3	
KEYWORD	369:1	369:1	4	if
LEAF_NODE	369:1	369:1	5	if
LEAF_NODE	369:4	369:4	4	(
CONDITION	369:5	369:5	4	module != NULL
EXPR	369:5	369:15	5	module != NULL
FIELD	369:5	369:5	6	module
LEAF_NODE	369:5	369:5	7	module
EQ_OPERATOR	369:12	369:12	6	!=
LEAF_NODE	369:12	369:12	7	!=
FIELD	369:15	369:15	6	NULL
LEAF_NODE	369:15	369:15	7	NULL
LEAF_NODE	369:19	369:19	4	)
STATEMENTS	370:2	370:2	4	
EXPR_STATEMENT	370:2	370:33	5	fprintf ( stderr , "%s: " , module ) ;
EXPR	370:2	370:2	6	fprintf ( stderr , "%s: " , module )
FUNCTION_CALL	370:2	370:32	7	fprintf ( stderr , "%s: " , module )
CALLEE	370:2	370:2	8	fprintf
LEAF_NODE	370:2	370:2	9	fprintf
LEAF_NODE	370:9	370:9	8	(
ARGUMENT	370:10	370:10	8	stderr
FIELD	370:10	370:10	9	stderr
LEAF_NODE	370:10	370:10	10	stderr
LEAF_NODE	370:16	370:16	8	,
ARGUMENT	370:18	370:18	8	"%s: "
FIELD	370:18	370:18	9	"%s: "
LEAF_NODE	370:18	370:18	10	"%s: "
LEAF_NODE	370:24	370:24	8	,
ARGUMENT	370:26	370:26	8	module
FIELD	370:26	370:26	9	module
LEAF_NODE	370:26	370:26	10	module
LEAF_NODE	370:32	370:32	8	)
LEAF_NODE	370:33	370:33	6	;
EXPR_STATEMENT	371:1	371:26	3	vfprintf ( stderr , fmt , ap ) ;
EXPR	371:1	371:1	4	vfprintf ( stderr , fmt , ap )
FUNCTION_CALL	371:1	371:25	5	vfprintf ( stderr , fmt , ap )
CALLEE	371:1	371:1	6	vfprintf
LEAF_NODE	371:1	371:1	7	vfprintf
LEAF_NODE	371:9	371:9	6	(
ARGUMENT	371:10	371:10	6	stderr
FIELD	371:10	371:10	7	stderr
LEAF_NODE	371:10	371:10	8	stderr
LEAF_NODE	371:16	371:16	6	,
ARGUMENT	371:18	371:18	6	fmt
FIELD	371:18	371:18	7	fmt
LEAF_NODE	371:18	371:18	8	fmt
LEAF_NODE	371:21	371:21	6	,
ARGUMENT	371:23	371:23	6	ap
FIELD	371:23	371:23	7	ap
LEAF_NODE	371:23	371:23	8	ap
LEAF_NODE	371:25	371:25	6	)
LEAF_NODE	371:26	371:26	4	;
EXPR_STATEMENT	372:1	372:23	3	fprintf ( stderr , ".\n" ) ;
EXPR	372:1	372:1	4	fprintf ( stderr , ".\n" )
FUNCTION_CALL	372:1	372:22	5	fprintf ( stderr , ".\n" )
CALLEE	372:1	372:1	6	fprintf
LEAF_NODE	372:1	372:1	7	fprintf
LEAF_NODE	372:8	372:8	6	(
ARGUMENT	372:9	372:9	6	stderr
FIELD	372:9	372:9	7	stderr
LEAF_NODE	372:9	372:9	8	stderr
LEAF_NODE	372:15	372:15	6	,
ARGUMENT	372:17	372:17	6	".\n"
FIELD	372:17	372:17	7	".\n"
LEAF_NODE	372:17	372:17	8	".\n"
LEAF_NODE	372:22	372:22	6	)
LEAF_NODE	372:23	372:23	4	;
LEAF_NODE	373:0	373:0	2	}
SIMPLE_DECL	374:0	374:53	1	TIFFErrorHandler _TIFFerrorHandler ; _TIFFerrorHandler = unixErrorHandler ;
VAR_DECL	374:0	374:17	2	TIFFErrorHandler _TIFFerrorHandler ; _TIFFerrorHandler = unixErrorHandler
TYPE	374:0	374:0	3	TIFFErrorHandler
TYPE_NAME	374:0	374:0	4	TIFFErrorHandler
LEAF_NODE	374:0	374:0	5	TIFFErrorHandler
NAME	374:17	374:17	3	_TIFFerrorHandler
LEAF_NODE	374:17	374:17	4	_TIFFerrorHandler
LEAF_NODE	0:0	0:0	3	;
INIT	374:17	374:17	3	_TIFFerrorHandler = unixErrorHandler
ASSIGN	374:17	374:37	4	_TIFFerrorHandler = unixErrorHandler
LVAL	374:17	374:17	5	_TIFFerrorHandler
NAME	374:17	374:17	6	_TIFFerrorHandler
LEAF_NODE	374:17	374:17	7	_TIFFerrorHandler
ASSIGN_OP	374:35	374:35	5	=
LEAF_NODE	374:35	374:35	6	=
RVAL	374:37	374:37	5	unixErrorHandler
FIELD	374:37	374:37	6	unixErrorHandler
LEAF_NODE	374:37	374:37	7	unixErrorHandler
LEAF_NODE	374:53	374:53	2	;
